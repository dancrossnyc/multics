/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* ****************************************************************************************
   ******************************************************************************************
   *
   *
   *
   *	R U N   A   G C O S   A C T I V I T Y
   *
   *
   *  This procedure is called by gcos_gein_ whenever an activity terminating card is read
   *  while an activity is being defined. This procedure will setup to run the activity
   *  specified in gcos_ext_stat_$activity_name. It will receive control when this activity
   *  is completed. At such time, it will clean up, record some accounting information
   *  and return.
   *
   *
   *	WRITTEN BY DICK SNYDER SEPTEMBER 10,1970
   *	MODIFIED BY T. CASEY JUNE 1973, OCTOBER 1973, JANUARY 1974, FEBRUARY 1974, MAY 1974, AUGUST 1974
   *	MODIFIED BY D. KAYDEN MARCH 1974, APRIL 1974, JUNE 1974, DECEMBER 1974
   *	MODIFIED BY R.H. MORRISON  75/06/15
   *	Modified by M. R. Jordan, August 1977
   *      Modified  Ron Barstad  83-11-16  Fix actid format and console msgs
   *      Modified  Ron Barstad  83-04-28  Fix precision of time limit divide
   *                                       change "ACT. TERM." to "NORM TERM"
   *
   ******************************************************************************************
   **************************************************************************************** */
%page;
gcos_run_activity_: proc;

	if pre_setup_stop_sw then do;
	     call ioa_ ("run_activity_ entered; calling db:");
	     call db;
	end;

	gcos_ext_stat_$save_data.activ = "0"b;		/* clear activity being defined sw */

	if gcos_ext_stat_$save_data.gtssflag then
	     call gcos_gtss_update_$new_activity (save_data.activity_no, WAIT_PERIPH);


/* 	This loop scans the fibs and does the following things   	 */
/* 	where indicated:						 */
/* 		write eof and rewind gein files			 */
/*		attach unattached files				 */
/*		save initial file size and position			 */


	do i = 1 to hbound (save_data.fibs, 1);
	     if fct.filecode (i) = "" then go to bump;
	     if fct.sysout (i) then go to bump;

	     fibptr = fct.fibptr (i);

	     if fib.gein then do;			/* eof and rewind? */

		if fib.buffer = null then go to bump;	/* bump if no writes done */

		call gcos_write_$bcd_ptr (fibptr, "", (8)"0"b); /* write eof */

		fib.last = fib.current;

		call ios_$seek (fib.stream, "read", "first", 0, status); /* reset read ptr */

		fib.read = "1"b;			/* gein files can only be read */

		fib.current = 0;

		fib.disp = "01"b;			/* set disposition to release */
	     end;


	     if ^fib.attached then call gcos_attach_file_ (fibptr); /* attach file */

	     fib.init_posit = fib.current;		/* save file position */
	     fib.init_size = fib.size;		/* save file size */
bump:
	end;

%page;

/* Set up the gcos segment. If it does not exist yet, it will be */
/* created by the file system in the working directory or in the */
/* process directory depending on the control arg. "-nosave". A pointer */
/* to the segment will be kept in internal static so that the seg */
/* need be created only once per process. Once the segment has been  */
/* created or located, it is truncated and then its max length */
/* is set to the storage limit for the activity. Thus if the gcos */
/* program attempts to write above its allotted memory, a fault */
/* will occur and the program can be aborted just like in "real" gcos. */

	if gcos_ext_stat_$activity_name = "geload" then do; /* activity = "geload" ? */

	     if gcos_ext_stat_$ldrss ^= 0 then do;	/* yes...loader shared stg = 0 ? */

/* If loader shared storage > max for loader, decrease it to this max (22000 octal ) */

/* NOTE that a constant loader size of 9K is built into the code, here */

		if gcos_ext_stat_$ldrss > 9*1024 then gcos_ext_stat_$ldrss = 9*1024; /* 9K */

/* Round ldrss down to a multiple of 1K */

		i = divide (gcos_ext_stat_$ldrss, 1024, 17, 0);
		gcos_ext_stat_$ldrss = i*1024;
	     end;

/* If ldrss is negative, the above will round its absolute value down to a multiple of 1K.
   Then, the subtraction below will add its absolute value to the storage limit,
   which is what is desired when negative loader shared storage is specified */

	     gcos_ext_stat_$storage_limit = gcos_ext_stat_$storage_limit+9*1024-gcos_ext_stat_$ldrss;
						/* compute final storage limit */
	end;

/*  Check for storage limit too high */

	if gcos_ext_stat_$storage_limit >gcos_ext_stat_$max_mem then /* wants too much core */
	     call gcos_error_ (0, "slave core limit > max Multics segment size");

	gseg = gcos_ext_stat_$gcos_slave_area_seg;

	if gseg = null then do;
	     call hcs_$make_seg ("", "gcos_slave_area_seg", "", 11, gseg, code); /* create gcos segment */
						/* in process directory */
	     if gseg = null then call gcos_error_ (code, "attempting to create slave segment");
	     gcos_ext_stat_$gcos_slave_area_seg = gseg;	/* save ptr in ext static */

/* Set rewa access on gcos_slave_area_seg */

/* NOTE: eliminate append access ONLY after all existing Multics systems
   have been upgraded to the version that does not use it */

	     acla.userid = get_group_id_$tag_star ();	/* fill in user id in acl model */
	     call cu_$level_get (i);			/* get validation level */
	     rb1 = substr (unspec (i), 31, 6);		/* put in ring bracket 1 */
	     rb2, rb3 = substr (unspec (i), 31, 6);	/* brackets 2 & 3 = val level */
	     acla.mode = "01110"b;			/* mode = rew */

	     call hcs_$acl_add (string (gcos_ext_stat_$pdir), "gcos_slave_area_seg", addr (acla), 1, code); /* set acl */
	     if code ^= 0 then call gcos_error_ (code, "setting access to slave segment");

	end;
	call hcs_$truncate_seg (gseg, 0, code);		/* truncate */

/* Set the actual max length limit on the segment */
	call hcs_$set_max_length (string (gcos_ext_stat_$pdir), "gcos_slave_area_seg", gcos_ext_stat_$storage_limit, code);
	if code ^= 0 then call gcos_error_ (code, "setting max length on slave segment");

/* Set up bypass of condition handlers */

	on any_other call gcos_fault_processor_;

	call sct_manager_$get (mme1_sct_index, gcos_ext_stat_$sig_ptr, code);
						/* check */
	call sct_manager_$set (mme1_sct_index, addr (gcos_process_mme_), code);
						/* check */

/* The stack frame for this procedure stays around during the running of the
   activity. If it gets cleaned up, we must reset to the normal condition
   handlers and turn off the timer */

	on cleanup begin;
	     call timer_manager_$reset_cpu_call (gcos_fault_processor_$timer_runout); /* abort any timeout */
	     if gcos_ext_stat_$sig_ptr ^= null		/* pointer was diddled */
	     then do;
		call sct_manager_$set (mme1_sct_index, gcos_ext_stat_$sig_ptr, code);
						/* check */
		gcos_ext_stat_$sig_ptr = null;	/* reinitialize */
	     end;
	     if gcos_ext_stat_$save_data.rout then call gcos_mme_rout_$rout_cleanup; /* MME GEROUT simulater wants to clean up too */

	     released_fibs.nrf = 0;			/* Empty released fibs array. */

	end;

	on program_interrupt			/* to simulate the GCOS equivalent of "QUIT" to stop */
	     call gcos_mme_rout_$rout_interrupt;	/* unwanted typing from the slave program, we use the */
						/* Multics "pi" command (user hits QUIT, then types "pi") */


/* CLEAR THE SLAVE PREFIX, THEN START INITIALIZING IT */

	zero = "0"b;				/* zero out slave prefix */

subact1:						/* come here to start running an abort subactivity */
	slave_prefix.mme = "000000000000010010000000001000000000"b; /* set up MME GECALL in slave prefix */


/* Translate program name to bcd and put in prefix */

	call gcos_cv_ascii_gebcd_ (addr (gcos_ext_stat_$activity_name), 6, addr (slave_prefix.prog), i);

	if gcos_ext_stat_$save_data.abort_subact then goto subact2; /* skip lots of initialization, if running subactivity */

/* 	Convert activity number and job number to one word with the following format:	 */
/* 		bits 0-5  activity number in binary		 */
/* 		bits 6-35 job number in BCD		 */
/* 	Save also in ext static for use by MME GESYOT			 */

/* convert snumb to BCD */

	call gcos_cv_ascii_gebcd_ (addr (substr (save_data.actid, 1, 5)), 5, addr (slave_prefix.activid), i);

/* now get the activity number and concatenate the BCD snumb onto the end of it */

	i = save_data.activity_no;

	save_data.short_actid, slave_prefix.activid =
	     substr (unspec (i), 31, 6) || substr (slave_prefix.activid, 1, 30);

/* 	Compute relative load limits and put in 37 octal of slave prefix */
/* 	Has the following format. Bits 0-17 hold lowest allowable address */
/* 	of activity relative to GELOAD origin. Bits 18-35 hold highest allowable */
/* 	address to be loaded by GELOAD.				 */


/* Lower limit = size of GELOAD - loader shared storage */

	i = 9*1024-gcos_ext_stat_$ldrss;

/* Upper limit = storage limit -1 */

	j = gcos_ext_stat_$storage_limit-1;
	slave_prefix.load_limits = substr (unspec (i), 19, 18)||substr (unspec (j), 19, 18);

/* Put ident card info in slave prefix */

	call gcos_cv_ascii_gebcd_ (addr (gcos_ext_stat_$save_data.save_data.ident), length (gcos_ext_stat_$save_data.save_data.ident), addr (slave_prefix.ident), i);

	if gcos_ext_stat_$save_data.taskflag then spa_taskflag = (36) "1"b; /* set gtss drl task flag in spa */

/* 	Set up label variable in external static so that when the GCOS */
/* 	program terminates, the handler can return to this procedure */
/* 	and revert the stack properly.				 */

	gcos_ext_stat_$mme_rtrn = end_activity;

	if gcos_ext_stat_$save_data.gtssflag then
	     call gcos_gtss_update_$status_update (EXECUTING);

/*  Put activity start message out to operator     */

	call hcs_$get_usage_values (k, cputime_start, k); /* get cpu time at activity start */
	realtime_start = clock_ ();			/* get activity start time */
	gcos_ext_stat_$activity_start_time = realtime_start;
	call date_time_ (realtime_start, holdtime);	/* get date and time */
	if save_data.activity_no = 1 & ^gcos_ext_stat_$save_data.brief then
	     call ioa_ (" *SRT  ^a  @^a  ^6a  (^3d)", save_data.actid, 
	     substr (holdtime, 11, 6), gcos_ext_stat_$activity_name,
	     divide(gcos_ext_stat_$time_limit,36,35));

	pta.accno, rta.accno = substr (save_data.actid, 7, 2);

	term_msg = "activity";

/* Format the begin message for the execution report */

subact2:	call ioa_$rs ("* ACTY-^2d  $CARD #^4a  ^6a   ^a   SW=^w", bannerstring, j,
	     save_data.activity_no,
	     gcos_ext_stat_$activity_card_num, gcos_ext_stat_$activity_name,
	     substr (holdtime, 1, 8), save_data.psw);

	call gcos_write_$ptr (gcos_ext_stat_$er, var_msg, "11111100"b); /* write it on the execution report */

	if gcos_ext_stat_$save_data.long then
	     call ioa_$nnl (var_msg);			/* also write it on the console for the interactive user */

/* 	Set up timeout = current number of cpu seconds process has */
/* 	been running + time limit. Control goes to fault$timer_runout */
/* 	if timeout occurs.					 */

	call timer_manager_$cpu_call (gcos_ext_stat_$time_limit, "11"b, gcos_fault_processor_$timer_runout);

	if ^gcos_ext_stat_$save_data.abort_subact then	/* except when continuing, with a subactivity */
	     gcos_ext_stat_$initial_cpu_time = virtual_cpu_time_ ();

	if pre_activity_stop_sw then do;
	     call ioa_ ("ready to run activity; calling db:");
	     call db;
	end;

/*	Ready to transfer to gcos segment. Call a program to set BAR and do	*/
/*	a TSS to enter BAR mode. Pass as args the limit part of the BAR	*/
/*	(number of 512 word blocks), and a pointer to 26 in the gcos segment	*/
/*	which is the location of the MME GECALL to get the activity going.	*/

	call gcos_set_slave_ (divide (gcos_ext_stat_$storage_limit, 512, 18, 0), addrel (gseg, 26), (gcos_ext_stat_$save_data.no_bar));

/* Control will return to the top of the next page, via a nonlocal goto,
   when the slave program gives up control, which it will do for any of the following reasons:

   1) MME GEFINI from the slave program,
   2) MME GEBORT from the slave program,
   3) fault in slave program, of a type which causes an abort,
   4) error in one of the mme simulators, of a type which causes an abort.
   */
%page;

/* Control comes here via a nonlocal goto, when the activity terminates */

end_activity:

	if post_activity_stop_sw then do;
	     call ioa_ ("activity completed; calling db:");
	     call db;
	end;

	call timer_manager_$reset_cpu_call (gcos_fault_processor_$timer_runout); /* turn off timeout */

	call hcs_$get_usage_values (k, cputime_finish, k); /* get cpu time used */

/* compute cpu time used in slave program */

	cputime_used = cputime_finish - cputime_start;

/* CONVERT MICROSECONDS USED TO SECONDS USED - VERIFY THIS THOUGH,
   hcs_$get_usage_values is not in the MPM any longer, so we can not be
   sure the value it returns IS microseconds ... */

	cputime_used = divide (cputime_used, 1000000, 71, 0);

	if gcos_ext_stat_$abort_reason ^= "" then do;	/* was there an abort in the slave pgm */
						/* NOTE: if activity aborted but wrapup did not,
						   abort_reason will be blank when wrapup terminates,
						   and this do group will be skipped after the wrapup */

	     term_msg = term_msg || " aborted ";

	     if ^gcos_ext_stat_$save_data.wrapup	/* if not wrapup */
	     then if ^gcos_ext_stat_$save_data.abort_subact /* and not subactivity */
		then initial_abort_reason = gcos_ext_stat_$abort_reason; /* save the abort reason for the ABT message */
	     call gcos_write_to_er_ ("^a", gcos_ext_stat_$abort_reason);


	     gcos_ext_stat_$abort_reason = "";		/* clear it, so we can tell if wrapup aborts */

	     if gcos_ext_stat_$save_data.gtssflag then
		call gcos_gtss_update_$status_update (TERMINATING);

/* Check type of dump desired, set switches, then call dump program */

	     if substr (save_data.psw, 1, 1) then
		dump_info = (36)"0"b;		/* dump it all */
	     else
	     dump_info = (29)"0"b || "1"b || (6)"0"b;	/* only regs and prefix */

	     call gcos_mme_snp1_$bord (gcos_ext_stat_$mc.scu (4), dump_info);

	     if gcos_ext_stat_$save_data.wrapup then goto no_wrapup; /* if abort from within wrapup, don't wrapup again */

	     if slave_prefix.wrapup = "0"b then goto no_wrapup; /* if no wrapup address given */

	     if fixed (slave_prefix.wrapup) > gcos_ext_stat_$storage_limit then do; /* if wrapup address out of bounds */

		call ioa_ ("wrapup address out of bounds");
		call gcos_write_$ptr (gcos_ext_stat_$er, "wrapup address out of bounds", "11111100"b);
		goto no_wrapup;
	     end;

/* print psw, etc. before entering wrapup */
	     call print_term_msg;			/* internal procedure */

	     term_msg = "wrapup";			/* prepare for next message */

/* add 30 seconds to the remainder of the time limit, for the wrapup routine */

	     gcos_ext_stat_$time_limit = gcos_ext_stat_$time_limit - cputime_used + 30;

/* set timer for wrapup */

	     call timer_manager_$cpu_call (gcos_ext_stat_$time_limit, "11"b, gcos_fault_processor_$timer_runout);

	     gcos_ext_stat_$save_data.wrapup = "1"b;	/* remember that we are wrapping up after an abort */
	     substr (save_data.psw, 1, 1) = "0"b;	/* and don't dump if wrapup aborts */

/* Call program to set bar and then transfer via TSS to wrapup address in gcos pgm */

	     call gcos_set_slave_ (divide (gcos_ext_stat_$storage_limit, 512, 18, 0),
		addrel (gseg, slave_prefix.wrapup), (gcos_ext_stat_$save_data.no_bar));

/* control returns to "end_activity" above, via a nonlocal goto, when the wrapup terminates */

	end;

	term_msg = term_msg || " terminated ";		/* no abort - normal termination */



/* come here if wrapup not to be executed, for any reason (including no abort) */

no_wrapup:

/* clean up the slave environment that we established earlier */

	call sct_manager_$set (mme1_sct_index, gcos_ext_stat_$sig_ptr, code);
						/* check */
	gcos_ext_stat_$sig_ptr = null;

	revert program_interrupt;

	if gcos_ext_stat_$save_data.rout then call gcos_mme_rout_$rout_cleanup;

	gcos_ext_stat_$save_data.wrapup = "0"b;		/* turn off wrapup flag in case it was oh  */

	call print_term_msg;			/* go print message */

/* if an abort subactivity is to be run, we do not want to clean up everything right now, though */

	if gcos_ext_stat_$save_data.this_act_abort then	/* if this activity aborted */
	     if gcos_ext_stat_$save_data.abort_card then do; /* and it contained a $ ABORT card */

/* NOTE that we are using our own flag and ignoring psw bit 12 here. This means that:
   1) the activity can not turn off bit 12 to prevent the subactivity from running;
   2) the activity can not turn on bit 12 to force it to run;
   it depends only on whether a $ ABORT card was present */


		if gcos_ext_stat_$activity_name ^= "geload" /* only after a $ EXECUTE activity */
		then goto no_subact;		/* is $ ABORT allowed */

		gcos_ext_stat_$save_data.abort_subact = "1"b; /* remember that we are running an abort subactivity */

/* add 30 seconds to remainder of time limit, for the subactivity */

		gcos_ext_stat_$time_limit = gcos_ext_stat_$time_limit - cputime_used + 30;

		gcos_ext_stat_$activity_name = "utility";

		term_msg = "subactivity";
		call date_time_ (clock_ (), holdtime);

		goto subact1;			/* go back to the activity-initializing part of this procedure,
						   and set up to run the subactivity */

	     end;


no_subact:

/* terminate the activity and clean up completely */

	call gcos_cleanup_files_;			/* dispose of files according to settings of fib.indicators */

/* Write real time used on execution report */

	realtime_finish = clock_ ();			/* get current time */

	call gcos_time_convert_ (realtime_finish-realtime_start, rta.time); /* get real time used */

	call gcos_write_$ptr (gcos_ext_stat_$er, string (rta), "11111100"b); /* put out real time used msg */

/* Write cpu time used on execution report */

	call gcos_time_convert_ (cputime_finish-cputime_start, pta.time); /* get cpu time used */

	call gcos_write_$ptr (gcos_ext_stat_$er, string (pta), "11111100"b); /* put msg on execution report */

/* Write activity completion message (either FIN or ABT) on console */

	if ^gcos_ext_stat_$save_data.brief then do;
	     call date_time_ (realtime_finish, holdtime); /* format date and time of activity completion */
	     if gcos_ext_stat_$save_data.this_act_abort then /* put abort message on console */

		call ioa_ (" *ABT  ^a  @^a  ^a", save_data.actid, substr (holdtime, 11, 6), initial_abort_reason);

/*	     else
	     call ioa_ (" *FIN  ^a  @^a", save_data.actid, substr (holdtime, 11, 6));  
*/	end;

post_cleanup:

	if post_cleanup_stop_sw then do;
	     call ioa_ ("post-activity cleanup completed; calling db:");
	     call db;
	end;

	return;


/*  INTERNAL PROCEDURE TO PRINT MESSAGES OF THE FORM:
   *
   *  ACTIVITY
   *               TERMINATED
   *  WRAPUP                    AT nnnnnn I=nnnnnn SW=nnnnnnnnnnnn
   *               ABORTED
   *  SUBACTIVITY
   *
   */

print_term_msg: proc;

dcl (xilc, xir) fixed bin(35);

/* get pointer to scu data */

	     scup = addr (gcos_ext_stat_$mc.scu);

/* get location counter and indicators into separate full words, to keep ioa_ happy */

	     xilc = fixed (scu.ilc);

	     xir = fixed (substr (string (scu.ir), 1, 12));

/* format the message */

/* **********
   **********

   CHANGE TO USE NEW IOA CODES TO GET RID OF FORMAT PROBLEMS */

	     if term_msg = "activity terminated "
		then term_msg = "normal termination ";  /* what it should be */
	     call ioa_$rs ("  * ^22a at ^6w I=^4w SW=^w", bannerstring, j,
		term_msg, xilc, xir, save_data.psw);

	     call gcos_write_$ptr (gcos_ext_stat_$er, var_msg, "11111100"b); /* write it on execution report */

	     if gcos_ext_stat_$save_data.long then
		call ioa_$nnl (var_msg);		/* also write it on console, for interactive user */

	     return;

	end print_term_msg;


/*      D  E  B  U  G  G  I  N  G     E  N  T  R  I  E  S     */

pre_setup_stop: presetup: entry;
	switch_name = "pre_setup_stop";
	pre_setup_stop_sw = ^pre_setup_stop_sw;
	if pre_setup_stop_sw then
print_on:
	     switch_state = "on";
	else
print_off:
	switch_state = "off";

print_switch:
	call ioa_ ("^a turned ^a", switch_name, switch_state);
	return;

pre_activity_stop: preact: entry;
	switch_name = "pre_activity_stop";
	pre_activity_stop_sw = ^pre_activity_stop_sw;
	if pre_activity_stop_sw then goto print_on;
	else goto print_off;

post_activity_stop: postact: entry;
	switch_name = "post_activity_stop";
	post_activity_stop_sw = ^post_activity_stop_sw;
	if post_activity_stop_sw then goto print_on;
	else goto print_off;

post_cleanup_stop: postclean: entry;
	switch_name = "post_cleanup_stop";
	post_cleanup_stop_sw = ^post_cleanup_stop_sw;
	if post_cleanup_stop_sw then goto print_on;
	else goto print_off;
%page;
/* 	D E C L A R A T I O N S					 */


/* External Static */

dcl  error_table_$namedup ext static fixed bin(35);						/* system error code */
dcl  error_table_$segknown ext static fixed bin(35);						/* system error code */

/* 	External Entries				 */


dcl  gcos_attach_file_ ext entry (ptr);
dcl  gcos_process_mme_ ext entry;						/* called at fault time instead of signal_ */
dcl  gcos_cleanup_files_ ext entry;
dcl  gcos_cv_ascii_gebcd_ ext entry (ptr, fixed bin(24), ptr, fixed bin(24));
dcl  gcos_mme_snp1_$bord entry (bit (36), bit (36));
dcl  gcos_error_ ext entry options (variable);
dcl  gcos_fault_processor_ ext entry;
dcl  gcos_fault_processor_$timer_runout ext entry;
dcl  virtual_cpu_time_ entry () returns (fixed bin(71) aligned);
dcl  gcos_mme_rout_$rout_cleanup ext entry;
dcl  gcos_mme_rout_$rout_interrupt ext entry;
dcl  gcos_set_slave_ ext entry (fixed bin(18), ptr, bit (1) aligned);
dcl  gcos_time_convert_ ext entry (fixed bin(52), char (19));
dcl  gcos_write_$bcd_ptr ext entry (ptr, char (*), bit (8));
dcl  gcos_write_$ptr ext entry (ptr, char (*), bit (8));
dcl  gcos_write_to_er_ entry options (variable);

dcl  clock_ ext entry returns (fixed bin(71));
dcl  cu_$level_get ext entry (fixed bin(24));
dcl  date_time_ ext entry (fixed bin(71), char (*));
dcl  db ext entry options (variable);
dcl  get_group_id_$tag_star ext entry returns (char (32));
dcl  hcs_$acl_add ext entry (char (*), char (*), ptr, fixed bin(24), fixed bin(35));
dcl  hcs_$get_usage_values ext entry (fixed bin(24), fixed bin(71), fixed bin(24));
dcl  hcs_$make_seg ext entry (char (*), char (*), char (*), fixed bin(5), ptr, fixed bin(35));
dcl  hcs_$set_max_length ext entry (char (*), char (*), fixed bin(19), fixed bin(35));
dcl  hcs_$truncate_seg ext entry (pointer, fixed bin(24), fixed bin(35));
dcl  ios_$seek ext entry (char (*), char (*), char (*), fixed bin(35), bit (72));
dcl  sct_manager_$get entry (fixed bin, ptr, fixed bin(35));
dcl  sct_manager_$set entry (fixed bin, ptr, fixed bin(35));
dcl  timer_manager_$cpu_call ext entry (fixed bin(71), bit (2), entry);
dcl  timer_manager_$reset_cpu_call ext entry (entry);
dcl (ioa_, ioa_$rs, ioa_$nnl) ext entry options (variable);




/* 	Work Variables					 */


dcl  system_free_area area based (gcos_ext_stat_$system_free_pointer);
dcl  dump_info bit (36);
dcl  status bit (72);						/* holds return status from ios_ */
dcl  bannerstring char (120);						/* area to build banner in */
dcl  var_msg char (j) based (addr (bannerstring));						/* variable length overlay for above */
dcl  term_msg char (24) varying;						/* holds "activity terminated", "wrapup aborted", etc. */
dcl  initial_abort_reason char (128) varying;						/* holds initial abort reason, for ABT message */

dcl (j, i) fixed bin(24);						/* temps */

dcl (realtime_start, realtime_finish) fixed bin(71);						/* holds time of start,end of activity */
dcl (cputime_start, cputime_finish, cputime_used) fixed bin(71);						/* hold cpu time usage figures */
dcl  k fixed bin(24);
dcl  holdtime char (24);						/* holds date and time */
dcl  code fixed bin(35);						/* code returned from calls to hardcore */
dcl  gseg pointer;						/* temp ptr to gcos seg */

dcl  zero bit (2304) based (gseg);						/* used to zero slave prefix */
dcl 1 slave_prefix based (gseg),			/* slave prefix model */
    2 fault_vector (14) fixed bin(24),
    2 fill1 (9) fixed bin(24),
    2 goodies,
      3 wrapup bit (18) unaligned,			/* address of abort wrapup routine */


      3 fill2 bit (18) unaligned,
    2 fill3 (2) fixed bin(24),
    2 mme bit (36),					/* place where MME GECALL is to go */
    2 prog bit (36),				/* prog to be loaded for this activity */
    2 fill4 (2) fixed bin(24),
    2 activid bit (36),				/* activity number and job number */
    2 load_limits bit (36),				/* upper and lower load limits */
    2 fill5 (22) fixed bin(24),
    2 ident bit (360)				/* ident information from ident card (60 BCD characters) */;
dcl 1 slave_prefix_alt_1 based (gseg),
    2 fill (0:62) bit (36),
    2 spa_taskflag bit (36);


dcl 1 acla,					/* acl model for file system */
    2 userid char (32),
    2 pack,
      3 mode bit (5),				/* access  */
      3 reterr bit (13),
      3 (rb1, rb2, rb3) bit (6);

dcl 1 rta int static,
    2 msg char (21) init ("real time activity  #"),
    2 accno char (2),
    2 blanks char (4) init ("    "),
    2 time char (19),
    2 nl char (2) init ("

");

dcl 1 pta int static,
    2 msg char (26) init ("processor time activity  #"),
    2 accno char (2),
    2 blanks char (4) init ("    "),
    2 time char (19),
    2 nl char (4) init ("



");



/* FOR DEBUGGING */

dcl (
     pre_setup_stop_sw
     , pre_activity_stop_sw
     , post_activity_stop_sw
     , post_cleanup_stop_sw
     ) bit (1) aligned int static init ("0"b);

dcl  switch_name char (32) aligned;
dcl  switch_state char (4) aligned;

dcl (addr, addrel, divide, fixed, null, string, substr, unspec) builtin;

dcl (any_other, cleanup, program_interrupt) condition;
%page;
%include gcos_ext_stat_;
%page;
%include gcos_gtss_dcls;
%page;
%include static_handlers;
%page;
%include gcos_fibs;
end gcos_run_activity_;
