/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gcos_cleanup_files_: proc;

/*

   This procedure is called by gcos_run_activity_ after an activity terminates.
   It examines all the fibs and disposes of them according to the settings of
   of their indicators. The filecode table is also cleared.


   Author: DICK SNYDER SEPTEMBER 10,1970
   Change: T.CASEY DECEMBER 1972, APRIL 1974, JUNE 1974
   Change: D. KAYDEN  APRIL 1974
   Change: M. R. Jordan, October 1977
   Change: Dave Ward	09/12/81 structured.
*/
	er = gcos_ext_stat_$er;

	call ioa_$rs ("^20xfc d type      #reqs^7xip^7xfp^7xis^7xfs^5xi/o stream", msg, k);
	call gcos_write_$ptr (er, nl, "11111100"b);
	call gcos_write_$ptr (er, var_msg, "11111100"b);
	call gcos_write_$ptr (er, nl, "11111100"b);

/* Check for files released by MME GERELS	 */
	do i = 1 to released_fibs.nrf;
	     fibptr = addr (released_fib (i));
	     fc = substr (fib.pathnm, 1, 2);
	     call display ("0"b);
	end;

/* The following loop disposes of fibs according to the settings
   of the various indicators. */
	do i = 1 to hbound (save_data.fibs, 1);
	     fibptr = addr (save_data.fibs (i));	/* get fib address */
	     if ^fib.used then go to next_fib;		/* skip if fib unused */
	     if fibptr = gcos_ext_stat_$prt then go to next_fib; /* skip simulapor files */
	     if fibptr = gcos_ext_stat_$pch then go to next_fib;
	     if fibptr = gcos_ext_stat_$rs then go to next_fib;
	     if fibptr = er then go to next_fib;

	     fc = "00";				/* initialize file code */
	     do j = 1 to hbound (fct, 1);		/* locate a file code for this file */
		if fct.filecode (j) ^= "" then
		     if ^fct.sysout (j) then
			if fct.fibptr (j) = fibptr then do;
			     fc = fct.filecode (j);	/* save the file code */
			     go to hit;
			end;
	     end;

hit:	     ;
	     if fib.console then
		if fc = "t*" then go to close;	/* don't display console t* */
	     if fc = "00" then
		if fib.plud = "435453"b3 then go to close; /* l* library */

	     if gcos_ext_stat_$save_data.this_act_abort then fib.disp = fib.adisp; /* use abort dispositions */

	     call display ("0"b);			/* display file status */

	     do j = 1 to (j-1), (j+1) to hbound (fct, 1); /* look for additional fc's on file */
		if fct.fibptr (j) = fibptr then do;
		     fc = fct.filecode (j);		/* save the file code */
		     call display ("1"b);
		end;
	     end;

	     fib.gein = "0"b;			/* clear in case file gets saved */
	     fib.iocount = 0;			/* reset in case file gets saved */

close:	     ;
	     call gcos_close_file_ (fibptr);		/* let gcos_close_file_ dispose of file appropriately */

next_fib:	     ;
	end;

/* Clear the file code table */
	do i = 1 to hbound (fct, 1);
	     if fct.sysout (i) then do;
		if fct.dac (i) then dev_type = "  DAC";
		else dev_type = "SYOUT";
		fc = translate (fct.filecode (i), "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "abcdefghijklmnopqrstuvwxyz");
		call ioa_$rs ("^20x^a  ^a", msg, k, fc, dev_type);
		call gcos_write_$ascii_ptr (er, var_msg, "11111100"b);
	     end;
	     fct.filecode (i) = "";			/* clear file code */
	     fct.sysout (i) = "0"b;			/* clear the sysout flag */
	     fct.fibptr (i) = null ();		/* null() the fib pointer */
	end;

	call gcos_write_$ptr (er, nl, "11111100"b);

/* Write end of activity record on sysout print collector file */
	call gcos_write_$record_ptr (gcos_ext_stat_$prt, addr (end_record) -> char20, (8)"0"b);
	call gcos_write_$force_ptr (gcos_ext_stat_$prt);

	return;
%page;
display:	proc (short);

dcl  short                    bit (1) parm;

	     if short = "0"b then do;
		if fib.tape then dev_type = " TAPE";
		else if fib.print then dev_type = " PRNT";
		else if fib.console then dev_type = " TYPE";
		else if fib.null then dev_type = " NULL";
		else dev_type = " DISK";

		disp = dsp (fixed (fib.disp));

		if fib.gein then gein = "*";
		else if fib.perm then gein = "P";
		else gein = " ";

		if fib.type then rand = "R";
		else rand = " ";

	     end;
	     fc = translate (fc, "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "abcdefghijklmnopqrstuvwxyz");

	     if (dev_type = " DISK") & (short = "0"b) then
		call ioa_$rs ("^20x^a ^a^a ^1a^9d^9d^9d^9d^9d^1a^4x^a", msg, k, fc, disp, dev_type,
		gein, fib.iocount, divide (fib.init_posit, 320, 17, 0), divide (fib.current, 320, 17, 0),
		divide (fib.init_size, 320, 17, 0), divide (fib.size, 320, 17, 0), rand, fib.stream);

	     else
	     call ioa_$rs ("^20x^a ^a^a  ^9d^41x^a", msg, k,
		fc, disp, dev_type, fib.iocount, fib.stream);

	     call gcos_write_$ascii_ptr (er, var_msg, "11111100"b);

	     return;

	end display;
%page;
/*   Variables for gcos_cleanup_files_:		 */
/*   IDENTIFIER		ATTRIBUTES	 */
dcl  addr                     builtin;
dcl  addrel                   builtin;
dcl  char20                   char(20)based;
dcl  dev_type                 char(5);
dcl  disp                     char(1);
dcl  divide                   builtin;
dcl  dsp                      (0:3) char(1) static int options(constant) init ("D", "R", "S", "C");
dcl  er                       ptr;
dcl  fc                       char(2);
dcl  fixed                    builtin;
dcl  gcos_close_file_         ext entry (ptr);
dcl  gcos_write_$ascii_ptr    ext entry (ptr, char(*), bit(8));
dcl  gcos_write_$force_ptr    ext entry (ptr);
dcl  gcos_write_$ptr          ext entry (ptr, char(*), bit(8));
dcl  gcos_write_$record_ptr   ext entry (ptr, char(*), bit(8));
dcl  gein                     char(1);
dcl  i                        fixed bin(24);
dcl  ioa_$rs                  entry() options(variable);
dcl  ioa_$rsnnl               entry() options(variable);
dcl  j                        fixed bin(24);
dcl  k                        fixed bin(24);
dcl  msg                      char(100);
dcl  null                     builtin;
dcl  rand                     char(1);
dcl  size                     builtin;
dcl  substr                   builtin;
dcl  system_free_area         area based (gcos_ext_stat_$system_free_pointer);
dcl  translate                builtin;
dcl  var_msg                  char(k) based (addr (msg));

dcl  nl                       char(1) static int options(constant)init ("
");

/* The end_record structure following is written on the sysout print collector
   file at the end of each activity, so that gcos_sysprint will know to stop
   reading the file, and sort and translate the reports for the activity */

dcl 1 end_record int static options(constant) aligned,
      2 rcw bit(36) init ("000004000374"b3)	/* length=4, media code=3 (bcd print), report code= 74 */
,     2 newline_word bit(36) init ("770100000000"b3)	/* the 7701 (bcd newline) prevents gcos_sys_xlate_ from trying to translate the rest of the record from bcd */
,     2 end_message char(12) init ("end activity") /* Ascii characters in BCD record is intential */
;
%page;
%include gcos_ext_stat_;
%page;
%include gcos_fibs;
     end gcos_cleanup_files_;
