/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* ****************************************************************************************
   ******************************************************************************************
   *
   *
   *
   *	T I M E  C O N V E R S I O N   P R O C E D U R E
   *
   *
   *  This procedure takes as an input argument a fixed bin(52) representation of
   *  time in microseconds. It converts this value to a character string of length
   *  nineteen which contains the time in minutes, seconds, and tenths
   *
   *
   *	WRITTEN BY DICK SNYDER SEPTEMBER 25,1970
   *      MODIFIED BY T.CASEY DECEMBER 1972
   *
   *
   *******************************************************************************************
   ***************************************************************************************** */
/*  */
gcos_time_convert_: proc (timeused, returntime);


dcl  returntime char (19);						/* time returned */
dcl (timeused, timework) fixed bin(52);						/* time interval */
dcl  digits (0: 9) char (1) internal static
     init ("0", "1", "2", "3", "4", "5", "6", "7", "8", "9");						/* ascii 0-9 */
dcl (i, n) fixed bin(24);
dcl  v (14) fixed bin(24)int static init ((10)10, 6, 10, 0, 10);						/* divide values */

dcl (divide, mod, substr) builtin;

	returntime = "     mins   .  secs";		/* init return string */
	timework = divide (timeused, 100000, 52, 0);	/* convert to tenths of secs */

	do i = 14, 12 by -1 to 11, 4 by -1 to 1;	/* divide loop */
	     substr (returntime, i, 1) = digits (mod (timework, v (i))); /* grab digit */
	     timework = divide (timework, v (i), 17, 0);	/* reduce time */
	end;
	return;
     end gcos_time_convert_;
