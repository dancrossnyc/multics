/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* *******************************************************************************************
   *******************************************************************************************
   *
   *
   *	Written by M. R. Jordan, October 1977
   *
   *******************************************************************************************
   ******************************************************************************************* */




gcos_fms_error_: procedure (fms_ecode, buf_ptr, fms_code);

dcl  addr builtin;
dcl  bit36 bit (36) aligned based;
dcl  buf_ptr ptr;
dcl  code fixed bin(35);
dcl  convert_status_code_ entry (fixed bin(35), char (8), char (100));
dcl  cv_dec_check_ entry (char (*), fixed bin(35)) returns (fixed bin(35));
dcl  fms_buf_ptr ptr;
dcl  fms_code bit (72) aligned;
dcl  fms_ecode fixed bin(35);
dcl  gcos_cv_ascii_gebcd_ entry (ptr, fixed bin(24), ptr, fixed bin(24));
dcl  gcos_mme_bort_$system entry options (variable);
dcl  i fixed bin(24);
dcl  long_message char (100);
dcl  reason_code fixed bin(35);
dcl  rel builtin;
dcl  short_message char (8);
dcl  substr builtin;

dcl 1 fms_buf aligned based (fms_buf_ptr),
    2 pad1 (30) bit (36),
    2 dcw,
      3 data_loc bit (18) unal,
      3 op bit (6) unal,
      3 tally bit (12) unal,
    2 pad2 (3) bit (36),
    2 message bit (30*6) unal;

/*

   Initialize needed data items.

*/


	fms_buf_ptr = buf_ptr;
	fms_return_code_ptr = addr (fms_code);


/*

   Get the messages associated with the specified fms_ecode value.
   If the message is not an FMS error message then abort.  If it is then prepare to
   process the message.

*/


	call convert_status_code_ (fms_ecode, short_message, long_message);
	if substr (short_message, 1, 3) ^= "FMS" then
	     call gcos_mme_bort_$system (fms_ecode, "Bad FMS error code - contact support personnel");
	else do;
	     reason_code = cv_dec_check_ (substr (short_message, 4, 5), code);
	     if code ^= 0 then reason_code = 2047;
	end;


/*

   Now that we have verified the message, put all the data where the user
   can get to it from his GCOS slave job.

*/


	fms_return_code.reason = substr (addr (reason_code) -> bit36, 26, 11);
	fms_buf.dcw.data_loc = rel (addr (fms_buf.message));
	fms_buf.dcw.tally = "0005"b3;
	call gcos_cv_ascii_gebcd_ (addr (long_message), 30, addr (fms_buf.message), i);
	fms_return_code.err_mess_dcw.data_loc = fms_buf.dcw.data_loc;
	fms_return_code.err_mess_dcw.tally = fms_buf.dcw.tally;

	return;

%include gcos_fms_return_code_;


     end gcos_fms_error_;
