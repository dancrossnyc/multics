/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



/*
   ********************************************************************************************
   ********************************************************************************************
   *
   *
   *	PROCESS $ PARAM CONTROL CARD
   *
   *
   *  This module processes the $ PARAM control card.  This control card may
   *  be used to supply replacement parameters in a job stack.  It may also be
   *  used to replace parameter descriptions supplied using the -ag control
   *  argument to the gcos command.
   *
   *
   *	Written by M. R. Jordan,  July 1977
   * Modified:
   *  Ron Barstad  3.1  02/16/83  Fixed illegal $Param ioa, field was missing
   *
   *
   ********************************************************************************************
   ********************************************************************************************
*/



gcos_cc_param_: proc (card);

dcl  i fixed bin(24);
dcl  result fixed bin(24);
dcl  card char (80);
dcl  field char (72-15);
dcl  END_OF_CARD fixed bin(24)static internal options (constant) init (2);
dcl  gcos_get_cc_field_$no_param entry (char (80), char (*), fixed bin(24));
dcl  rtrim builtin;
dcl  hbound builtin;
dcl  gcos_error_ entry options (variable);
dcl  search builtin;
dcl  gcos_et_$cc_bad_field fixed bin(35) ext;

/*

   Initialize a few values and prepare to prcoess all supplied fields.

*/


	result = 0;
	i = 1;


/*

   Now loop through all supplied fields.  Replace the param(i) value
   only when a non-null field is encountered.  This allows selective
   replacement of arguments supplied via -ag.

*/


	do while (result ^= END_OF_CARD);

	     call gcos_get_cc_field_$no_param (card, field, result);

	     if result ^= END_OF_CARD then do;		/* if this is a valid field then ... */

		call Set_Param ();			/* set the value. */

		i = i+1;				/* increment the param index */

	     end;

	end;


	return;

Set_Param: proc ();


/*

   Make sure we don't already have all the parameters we can handle.

*/


	     if i > hbound (save_data.param, 1) then call gcos_error_ (gcos_et_$cc_bad_field,
		"Maximum number of parameters exceeded.  Maximum is ^d.^/^a^2x^a", hbound (save_data.param, 1),
		gcos_ext_stat_$card_num, card);


/*

   Make sure the parameter consists of valid characters only.

   */


	     if search (field, "$/#") ^= 0 then call gcos_error_ (gcos_et_$cc_bad_field,
		"Illegal $ PARAM card field.  ""^a""^/^a^2x^a", field, gcos_ext_stat_$card_num, card);


/*

   The parameter value looks good.  Save it if it has not been overridden
   in the command line by the -ag control argument.

*/


	     if save_data.param (i) = "" then
		save_data.param (i) = rtrim (field);


	     return;


	end Set_Param;

%include gcos_ext_stat_;


     end gcos_cc_param_;
