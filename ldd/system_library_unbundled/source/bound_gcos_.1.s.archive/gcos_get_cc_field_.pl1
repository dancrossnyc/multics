/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* ******************************************************************************************
   ********************************************************************************************
   *
   *
   *
   *	E X T R A C T  F I E L D  F R O M  G E C O S  C O N T R O L  C A R D
   *
   *
   *
   *  This procedure extracts the next field from a gcos control card. It will
   *  also return a switch called "result". If result is 0 then it means that a field is
   *  being returned in "field". If result is 1, it means that a null field  (two
   *  successive commas) was found. If result is a 2, the end of the card has been read.
   *  Getfield allows $ etc cards to be used to extend the operand field of a card.
   *  If a $ ETC card is read, then 1) if gcos_ext_stat_$save_data.write_etc is "1"b then
   *  the bcd image is written on gcos_ext_stat_$etc_filecode (which might
   *  be "d*" for example), and 2) the ascii image will replace the input
   *  argument, card. This works except when it is not decided to write
   *  the card on a file until after the etc card has been read (e.g., a
   *  stranger option on the second card but not the first. We hope this never happens.
   *
   *  The variable gcos_ext_stat_$gf is used for communication between this
   *  procedure and its callers: a value of 0 (set by the caller) indicates
   *  that a new card has been read, and we should start processing it at
   *  column 16; 1 (set by this procedure) indicates that the same card is being processed
   *  as in the previous call, and we should continue processing at the column where
   *  the field returned then ended; 2 (set by this procedure) indicates
   *  that on the previous call, the field returned was the last one on the card,
   *  and so we should return result=2 on this call; 3 indicates that
   *  we should immediately read a $ ETC card and start processing it in column 16.
   *
   *  gcos_cc_file_cards_ sets gf=3 to force reading of a $ ETC card, when the pathname
   *  on the PRMFL card ends in > or / (continuation, but not indicated by a comma).
   *
   *
   *	WRITTEN BY DICK SNYDER AUGUST 27, 1970
   *      MODIFIED BY T.CASEY DECEMBER 1972, OCTOBER 1973, FEBRUARY 1974
   *	MODIFIED BY D.KAYDEN  FEBRUARY 1975
   *	Modified by M. R. Jordan, August 1977
   *
   *
   ********************************************************************************************
   ****************************************************************************************** */



gcos_get_cc_field_: proc (card, field, result);



/* 	D E C L A R A T I O N S					 */


/* 	Parameters						 */


dcl  card char (80) aligned;						/* input card image */
dcl  field char (*);						/* returned field */
dcl  result fixed bin(24);						/* returned result:     */
						/*  0 = ok		 */
						/*  1 = null field		 */
						/*  2 = end of card 	 */


%include gcos_ext_stat_;


/* 	Work Variables					 */


dcl  gcos_error_ entry options (variable);
dcl  code fixed bin(35);
dcl  cv_dec_check_ entry (char (*), fixed bin(35)) returns (fixed bin(35));
dcl  gcos_et_$cc_bad_field fixed bin(35) ext;
dcl  param_num fixed bin(24);
dcl  posn fixed bin(24)internal static;						/* variable to remember scan position */
dcl  i fixed bin(24);						/* temp */
dcl  trans_it bit (1) aligned;
dcl  use_params bit (1) aligned;
dcl  gcos_record char (gcos_len) based (gcos_ptr);						/* bcd image of etc card */
dcl  gcos_len fixed bin(24);
dcl  gcos_ptr ptr;
dcl  dollar_sw bit (1) aligned;

/* 	External Entries				 */

dcl  gcos_et_$cc_field_too_long fixed bin(35) ext;
dcl  gcos_write_$record ext entry (char (*), char (*), bit (8));
dcl  gcos_write_to_er_ entry options (variable);
dcl  gcos_read_card_ ext entry (ptr, fixed bin(24), char (80) aligned, bit (1) aligned);

dcl (addr, length, search, substr, translate) builtin;

dcl  LOWER_CASE char (26) static internal options (constant) init ("abcdefghijklmnopqrstuvwxyz");
dcl  UPPER_CASE char (26) static internal options (constant) init ("ABCDEFGHIJKLMNOPQRSTUVWXYZ");

	trans_it = "1"b;				/* make it lower case */
	use_params = "1"b;				/* and allow params */
	goto continue;


asis:	entry (card, field, result);


	trans_it = "0"b;
	use_params = "0"b;
	goto continue;


no_param:	entry (card, field, result);


	trans_it = "1"b;				/* make sure we get lower case */
	use_params = "0"b;				/* and no parameter expansions */
	goto continue;


no_fold:	entry (card, field, result);


	trans_it = "0"b;
	use_params = "1"b;				/* allow parameter expansions */


continue:

	field = " ";				/* init return field */

	if gcos_ext_stat_$gf = 0 then go to start;	/* flag is 0 when new card read */
	if gcos_ext_stat_$gf = 1 then go to next;	/* middle of card ? */
	if gcos_ext_stat_$gf = 2 then do;		/* if 2 then end of card */
endcard:	     result = 2;				/* indicate end of card */
	     return;				/* exeunt */
	end;

/* gf must be 3, as set by last call, when "," was last character on card */

	go to getetc;				/* go get a $ etc card */



/* 	Come here if starting on a new card */


start:	gcos_ext_stat_$gf = 1;			/* indicate middle of card */
	posn = 16;				/* init position offset */
	go to next1;


/*	Come here if called in middle of card			*/


next:	if posn > 72 then go to getetc;

next1:	i = search (substr (card, posn, 73-posn), " ,")-1; /* scan for a field delimiter */

	if i = 0 then				/* if the first char is a delimiter... */
	     if substr (card, posn, 1) = "," then do;	/* and it is a comma... */
		result = 1;			/* return null field indicator */
		posn = posn+1;			/* bump card position */
		return;
	     end;
	     else					/* it must be a space */
	     if posn = 16 then go to endcard;		/* if no commas before delimiter, this is end of card */
	     else go to getetc;			/* otherwise, get $ etc card */

	if i < 0 then do;				/* if no delimiter found... */
	     i = 73-posn;				/* then field is rest of card */
	     gcos_ext_stat_$gf = 2;			/* and this is the last parameter */
	end;
	else if substr (card, posn+i, 1) = " " then	/* if deleimiter was a blank... */
	     gcos_ext_stat_$gf = 2;			/* this is also the last parameter */

	if i > length (field) then do;		/* field on control card is too long */
	     call gcos_write_to_er_ ("Warning:  Control card field ""^a"" is too long.^/^a^2x^a", substr (card, posn, i), gcos_ext_stat_$card_num, card);
	end;

	call Get_Field ();

	posn = posn + i+1;				/* bump card position past field and delimiter */

	if trans_it then field = translate (field, LOWER_CASE, UPPER_CASE);
	result = 0;
	return;					/* done */


/* 	Come here to read $ etc card */


getetc:	call gcos_read_card_ (gcos_ptr, gcos_len, card, dollar_sw); /* get a new card */


	if ^dollar_sw | substr (card, 1, 10) ^= "$      etc" then do; /* print warning if not $ etc */
	     call gcos_write_to_er_ ("Warning:  There appears to be a missing $ ETC card before:^/^a^2x^a", gcos_ext_stat_$card_num, card);
	     gcos_ext_stat_$gf = 2;
	     goto endcard;
	end;

	if gcos_ext_stat_$save_data.write_etc then			/* if caller wants etc cards written on a file */
	     call gcos_write_$record (gcos_ext_stat_$etc_filecode, gcos_record, (8)"0"b);

	posn = 16;				/* reset position indicator */
	go to next1;				/* continue processing */

Get_Field: procedure ();


	     if substr (card, posn, 1) = "#" & use_params then do;
		if i = 1 then do;
		     call gcos_write_to_er_ (
			"Warning:  A parameter replacement may be in error.^/^a^2x^a",
			gcos_ext_stat_$card_num, card);
		     field = "#";
		end;
		else if substr (card, posn+1, 1) = "#" then field = substr (card, posn+1, i-1);
		else do;
		     param_num = cv_dec_check_ (substr (card, posn+1, i-1), code);
		     if code ^= 0 then call gcos_error_ (gcos_et_$cc_bad_field,
			"Parameter numbers must be decimal constants.  ""^a""^/^a^2x^a", substr (card, posn, i),
			gcos_ext_stat_$card_num, card);
		     if param_num < lbound (save_data.param, 1) | param_num > hbound (save_data.param, 1) then
			call gcos_error_ (gcos_et_$cc_bad_field,
			"Parameter number values must be from ^d to ^d.^/^a^2x^a",
			lbound (save_data.param, 1), hbound (save_data.param, 1),
			gcos_ext_stat_$card_num, card);
		     if length (save_data.param (param_num)) > length (field) then call gcos_write_to_er_ (
			"Warning:  Control card field ""^a"" is too long.^/^a^2x^a",
			save_data.param (param_num), gcos_ext_stat_$card_num, card);
		     field = save_data.param (param_num);
		end;
	     end;
	     else field = substr (card, posn, i);	/* extract field from card */


	     return;


	end Get_Field;


     end gcos_get_cc_field_;
