/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/*
   ********************************************************************************************
   ********************************************************************************************
   *
   *
   *	G C O S   E R R O R
   *
   *
   *	This procedure is called to report any fatal job error to the user.
   *	The procedure takes a status code as the first argument and an ioa_
   *	control string and arguments follow.
   *
   *
   *	Rewritten by M. R. Jordan,  August 1977
   *
   ********************************************************************************************
   ********************************************************************************************
*/



gcos_error_: procedure (a_code);



dcl  NL char (1) static internal options (constant) init ("
");
dcl  a_code fixed bin(35);
dcl  addr builtin;
dcl  arg_list_ptr ptr;
dcl  callers_sp ptr;
dcl  com_err_ entry options (variable);
dcl  convert_status_code_ entry (fixed bin(35), char (8) aligned, char (100) aligned);
dcl  cu_$arg_list_ptr entry (ptr);
dcl  cu_$stack_frame_ptr entry () returns (ptr);
dcl  db entry ();
dcl  gcos_cc_endjob_ entry ();
dcl  gcos_et_$fatal_error fixed bin(35) ext;
dcl  gcos_write_to_er_ entry options (variable);
dcl  ioa_$general_rs entry (ptr, fixed bin(24), fixed bin(24), char (*), fixed bin(24), bit (1), bit (1));
dcl  ioa_$ioa_stream entry options (variable);
dcl  long_message char (100) aligned;
dcl  message char (256) varying;
dcl  name char (name_len) based (name_ptr);
dcl  name_len fixed bin(24);
dcl  name_ptr ptr;
dcl  pl1_frame_$name entry (ptr, ptr, fixed bin(24));
dcl  rtn_string char (256);
dcl  rtn_string_len fixed bin(24);
dcl  rtrim builtin;
dcl  short_message char (8) aligned;
dcl  substr builtin;

/*

   If debugging then tell the user who done it ...

*/



	if gcos_ext_stat_$save_data.debug then do;
	     sp = cu_$stack_frame_ptr ();
	     callers_sp = stack_frame.prev_sp;
	     call pl1_frame_$name (callers_sp, name_ptr, name_len);
	     message = NL || "From " || name;
	end;
	else message = "";


/*

   Get the message for the specific error from the error table.

*/


	if a_code ^= 0 then do;
	     call convert_status_code_ (a_code, short_message, long_message);
	     if long_message ^= "" then message = message || NL || rtrim (long_message);
	end;


/*

   Get the ioa_ part of the error message.

*/


	call cu_$arg_list_ptr (arg_list_ptr);
	call ioa_$general_rs (arg_list_ptr, 2, 3, rtn_string, rtn_string_len, "0"b, "1"b);
	if rtn_string_len ^= 0 then
	     if substr (rtn_string, 1, rtn_string_len) ^= "" then
		message = message || NL || substr (rtn_string, 1, rtn_string_len);


/*

   Let the user know that there is a problem.

*/


	call com_err_ (gcos_et_$fatal_error, "gcos_error_", "^a", message);


/*

   Output the message on the execution report and tell the user we're aborting.

*/


	call convert_status_code_ (gcos_et_$fatal_error, short_message, long_message);
	call gcos_write_to_er_ ("gcos_error_:  ^a^a", long_message, message);
	call ioa_$ioa_stream ("error_output", "Aborting GCOS job.");


/*

   If the user is debugging the simulator, then stop for a moment.

*/


	if gcos_ext_stat_$save_data.debug then do;
	     call ioa_$ioa_stream ("error_output", "CALLING DEBUG");
	     call db ();
	end;


/*

   Now try to terminate gracefully ...  If we have started to process the ENDJOB
   card we must have real trouble (we cannot produce the SYSOUT).

*/


	if gcos_ext_stat_$save_data.endjob then do;
	     call com_err_ (0, "gcos_error_", "Unable to produce SYSOUT.");
	     goto gcos_ext_stat_$abort_return;
	end;


	call gcos_cc_endjob_ ();


	return;

%include gcos_ext_stat_;

%include stack_frame;


     end gcos_error_;
