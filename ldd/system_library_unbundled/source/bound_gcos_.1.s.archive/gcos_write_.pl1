/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gcos_write_: proc (filecode, record, reportcode);

/*
   *  This  procedure  is  called  to write a record on a gcos file.
   *
   *  The main entry point expects an ASCII string, which will be converted to BCD,
   *  and put into a GCOS standard system format record. Certain  special  ascii
   *  characters are recognized and are converted to printer control information.
   *  Newline characters are converted to  octal  7701  (skip  one  line).  If  n
   *  contiguous  newlines  are  encountered,  then  a control sequence of 77n is
   *  produced (skip n lines). Page characters (octal 014) are converted  to  7720
   *  (skip  to  head of form).   Note that gcos_write_ does not actually do this
   *  conversion, but instead, it is done by a subroutine  (gcos_cv_printline_gebcd_).
   *
   *  A search of the filecode table is made to match the filecode to an existing  fib.  If
   *  no  match  is  found,  a file is opened and a fib is built. This is done by
   *  gcos_open_file_, and gcos_attach_file_. This is only done for those
   *  entry points that use the filecode to specify the file.
   *
   *  Since records are written in GCOS standard format, multiple records are
   *  packed  into  320  word  blocks.  These blocks are written to the specified
   *  files using ios_.
   *
   *  If  the  length  of
   *  the record to be written is 0, an end of file record will be written.  This
   *  is a record with length 0 and the end of file code (170000)  in  the  lower
   *  half  of the record header word (the upper half containing the length).
   *  The buffer is then written out.
   *
   *
   *  ADDITIONAL ENTRY POINTS:
   *
   *  $ptr	-same as main entry, except that the file is specified by a
   *		 fib pointer.
   *
   *  $force	-forces a partially-filled buffer for the specified filecode
   *		 to be written out to the file. An empty buffer is not written out.
   *
   *  $force_ptr	-same as $force, except that the file is specified by a
   *   		 fib pointer.
   *
   *  $bcd	-writes a BCD string onto the given stream, in a GCOS record.
   *
   *  $bcd_ptr	-same as $bcd above, except that the file is specified by
   *		 a fib pointer.
   *
   *  $ascii_ptr	-writes a GCOS record, containing the ASCII characters from the
   *		 input string. Turns on bit 27 (counting from zero) of the rcw,
   *		 if bits 28 and 29 are not both zero, and bit 26 if they are zero,
   *		 thus allowing media codes 5, 6, 7, and 8 to be specified.
   *		 Pads last word with ASCII pad characters (octal 177).
   *		 The file is specified by a pointer to the fib.
   *
   *
   *  The above entries all construct a rcw and place it before the data in the record.
   *
   *
   *
   *  The following entries assume the record already starts with a rcw (or bcw, for $block).
   *
   *  $record	-writes gcos record, complete with rcw, without changing
   *		 anything in it. reportcode is ignored, but must be supplied
   *		 in the call (and should be (8)"0"b).
   *		 record should be char(*), with * being 4 times
   *		 the word length of the record, including the rcw.
   *
   *		 Since the contents of the record and the rcw are not
   *		 examined or changed, but merely copied into the output buffer,
   *		 this entry can be used to write more than one record per call,
   *		 by overlaying the records with a char(*) argument of the
   *		 correct length. This is done by gcos_mme_syot_.
   *
   *
   *  $record_ptr	-same as $record, except that the file is specified
   *		 by a fib pointer.
   *
   *  $print_bcd_card -writes gcos record, supplied as above, but modifies it as follows:
   *		 it assumes it is a bcd card (14 data words in record) and it
   *		 puts octal 7701 (bcd newline) into last word, in "columns" 81-82.
   *		 It puts reportcode into the rcw that it is passed. reportcode
   *		 should begin with "11"b (media code for bcd printlines).
   *		 BCD ! (77) and ? (17) are escaped by preceeding them with 7777.
   *		 All modifications are made to the copy in the write buffer,
   *		 so the copy passed by the caller is preserved.
   *
   *  $print_bcd_ptr -same as $print_bcd_card except that file is specified
   *		 by a pointer to the fib.
   *
   *  $block	-writes a full block (up to 320 words). If there are any records in
   *		 the buffer for the given filecode, that buffer is written out first. The
   *		 length and serial number are put into the bcw, in the caller's copy of the
   *		 block. The block must be passed as a char(*) variable, with * being exactly
   *		 4 times the word length of the block, including the bcw.
   *
   *  $block_ptr	-same as $block, except that the file is specified
   *		 by a fib pointer.
   *
   *	INPUT PARAMETERS:
   *	either:	filecode--filecode of file to be written on.
   *	or:	fib_ptr--pointer to fib of file to be written on
   *		record--record to be written.
   *		reportcode--8 bits used as: media code (2 bits) and report code (6 bits).
   *			(thus the 4 bit ascii media codes are not presently supported -
   *			EXCEPT for the $ascii_ptr, $record and $record_ptr entries.)
   *
   */
%page;
/*
   Author: DICK SNYDER AUGUST 10,1970
   Change: T. CASEY JUNE 1973, NOVEMBER 1973, FEBRUARY 1974, APRIL 1974,  AUGUST 1974
   Change: D. KAYDEN  APRIL 1974, JULY 1974, DECEMBER 1974
   Change: M. R. Jordan, October 1977
   Change: Dave Ward	08/14/81 reorganized. Arrayed form of fibs.
*/
%page;
dcl  fib_ptr                  ptr parm;
dcl  filecode                 char(*) parm	/* file code of file to be written */;
dcl  record                   char(*) parm	/* record to be written */;
dcl  reportcode               bit(8) parm	/* record type and report code */;

/* Come here from all entry points that take filecode (except $force)
   to look up the fib by filecode, and open the file if the fib is not found */

main: ;


/* 	Look for fib to match file code 			 */

	if look_up_filecode () then return;		/* internal procedure */

/* Come here from all entries that take a fib pointer (except $force_ptr),
   to provide a buffer if necessary, and write a record on the file, but bypassing
   the the opening of the file if the fib is not found; when a fib pointer is
   specified, the file must be open.		*/

setbuf: ;
	call setup;

	if length (record) = 0 then do;

/*
   Come here if length of record to be written is 0. Write a
   filemark record (000000170000 octal) in the block if the
   device is disk or drum. If tape, write an eof followed by
   a trailer and another eof.
*/
	     if ^fib.tape then do;			/* if not a tape */
		buf (fib.rec_len) = "000000170000"b3;	/* put eof mark */
						/* in record header (bits 18-23). */
						/* Rest of header = 0's  */
		fib.rec_len = fib.rec_len + 1;	/* and increment length of record */
	     end;

	     call write_fib_block;			/* go write the block */

	     if fib.tape then do;			/* writing on tape? */

		call ios_$order ((fib.stream), "eof", null, status); /* write eof */
		if code ^= 0 then			/* all errors fatal */
wr_err:		     ;
		call gcos_error_ (code, "^a^/stream=^a", fib.pathnm, fib.stream);

		trailer.blk_count = block.num -1;	/* put no blocks written in trailer */
		call ios_$write ((fib.stream), addr (trailer), 0, 14, i, status); /* write eof trailer */
		if code ^= 0 then goto wr_err;	/* all errors fatal */

		call ios_$order ((fib.stream), "eof", null, status); /* write another eof */
		if code ^= 0 then goto wr_err;	/* all errors fatal */
	     end;

	     return;
	end;

	lenrec = divide (length (record)+3, 4, 17, 0);


/* 	set up for translation of ASCII data to BCD. Subroutine gcos_cv_printline_gebcd_ */
/* 	will translate the message and move it to the buffer. It will also */
/* 	transform newlines and newpages into proper BCD escape codes  */

	inp = addr (record);			/* get address of input record */

	if ^acisw then				/* if we don't want an ASCII record */
	     if ^bcdsw then do;			/* and we don't have a BCD record */

/* if any of the above, copy the input record directly into the buffer,
   omitting the ASCII to BCD translation */


/* Since we are here, none of the above was true, so translate to BCD */

		call gcos_cv_printline_gebcd_ (inp, length (record), addr (temp_buf), i);
		lenrec = divide (i+5, 6, 17, 0);
		inp = addr (temp_buf);		/* get pointer to the BCD string */
	     end;

print_join: ;

	if lenrec >= 319 then do;			/* test for long record */
	     code = gcos_et_$record_too_long;
	     goto wr_err;
	end;

	if fib.rec_len + lenrec >= 319 then call write_fib_block; /* write current block if new rec won't fit */

	rcwp, outp = addr (buf (fib.rec_len));		/* addr of slot in buffer for this record */

	if ^gcossw then outp = addrel (outp, 1);	/* leave room for rcw, unless its there already */

	outstring = instring;			/* copy record into buffer */

	if gcossw then do;				/* if we have a gcos record, with rcw already in it */

	     lenrec = lenrec - 1;			/* don't count the rcw in the length */

/* INCODE PROCESSING:

   All BCD card images (which may have been originally created by reading cards punched
   in other than GEBCD card codes) are written onto files by calls to gcos_write_$record.

   That entry turns on gcossw. Therefore, if gcossw is on
   and the media code is "10" (BCD card) and gcos_ext_stat_$incode is nonzero,
   we want to go through the record we just put into the buffer, looking for any of the
   six characters that can be different, and translate them into the proper GEBCD codes. */

	     if gcos_ext_stat_$incode ^= 0 then		/* If incode translation is in effect */
		if rcw.media_code = "0010"b then	/* and we have a BCD card */
		     call gcos_incode_ (addrel (inp, 1), lenrec * 6, addrel (outp, 1));

	end;

	else do;

/* Create record header (rcw) consisting of length and record type and reportcode */

	     rcwp -> word = "0"b;			/* clear out the rcw */
	     rcw.length = lenrec;			/* fill in record length */

	     substr (rcwp -> word, 29, 8) = reportcode;	/* fill in media and report codes */

	     if acisw then do;			/* if $ascii entry, fix up several parts of the record */

		if rcw.media_code = "0"b then		/* if we want ascii media code 8 */
		     substr (rcw.media_code, 1, 1) = "1"b; /* make it 8 ("1000"b) */
		else substr (rcw.media_code, 2, 1) = "1"b; /* else make it 5, 6, or 7 ("01xx"b) */

		acipad = mod (length (record), 4);	/* see if they partially fill the last word */

		if acipad > 0 then			/* if last word is only partially filled */
		     substr (outp -> acistring, length (record)+1, 4-acipad) = substr (pads, 1, 4-acipad);
						/* fill rest of it with pad (177) chars */
	     end;
	end;

	fib.rec_len = fib.rec_len+lenrec+1;		/* compute new length of block */
	return;
%page;
print_bcd_card: entry (filecode, record, reportcode);

/* print bcd card image. 7701 is appended to card, and rcw is modified using reportcode argument */

	goto print_common;
%page;
print_bcd_ptr: entry (fib_ptr, record, reportcode);

/* print bcd card image, but with fib pointer argument */

	fibptr = fib_ptr;
print_common: ;
	call setup;

/* EDITP PROCESSING

   The following code searches the record just written for the BCD characters
   ! (77) and ? (17), which have special meaning for printed output. In order
   to be taken literally and just printed, they must be preceeded by the BCD
   escape sequence, which is two !'s (7777). Since this procedure is called to
   write all sorts of records on gcos files, some of which will later be printed,
   and some of which will be read by gcos slave programs, and the escapes are
   only proper in print files, this code is only entered when the $print_bcd_card
   entry was used.

   */

	inp = addrel (addr (record), 1);
	outp = addr (temp_buf);
	j = 0;
	do i = 1 to 80;

	     if bcd.char = "17"b3 |			/* 17 = "?" */
	     bcd.char = "77"b3 then do;		/* 77 = "!" */
		bcd2.chars = "7777"b3 ;		/* 7777 = "!!" */
		outp = addr (bcd2.next);
		j = j + 2;
	     end;
	     outp -> bcd.char = bcd.char;
	     inp = addr (bcd.next);
	     outp = addr (outp -> bcd.next);
	     j = j + 1;
	end;
	bcd2.chars = "7701"b3 ;			/* 7701 = "!1" (bcd newline) */

	inp = addr (temp_buf);
	lenrec = divide (j+7, 6, 17, 0);
	goto print_join;
%page;
record_ptr: entry (fib_ptr, record, reportcode);

/* write gcos record (as for $record entry) but with fib pointer arg */

	gcossw = "1"b;				/* full gcos record, rcw included */
						/* fall thru to turn on bcdsw */

/* 	Enter here to write a string which is already in bcd and which	 */
/* 	already has newlines and newpages translated to their bcd equivalents */


bcd_ptr:	entry (fib_ptr, record, reportcode);

	bcdsw = "1"b;				/* indicate that input is in BCD */
%page;
ptr:	entry (fib_ptr, record, reportcode);

/* do the same as the primary entry, given a fib pointer */

/* Come here from $ascii_ptr entry */
ptr_common: ;
	fibptr = fib_ptr;

	goto setbuf;
%page;
ascii_ptr: entry (fib_ptr, record, reportcode);

/* write a record containing the ascii input string, untranslated */

	acisw = "1"b;				/* remember we entered here */

	goto ptr_common;				/* go set fib pointer */
%page;
record:	entry (filecode, record, reportcode);

/* write gcos record with no alteration at all. rcw is included in length of char(*) argument */

	gcossw = "1"b;				/* we have a full gcos record, rcw included */
%page;
bcd:	entry (filecode, record, reportcode);

/* write block of bcd words, and build rcw, but look up fib by filecode */

	bcdsw = "1"b;				/* input is bcd characters */

	goto main;				/* go look up filecoe and join main body of program */
%page;
block:	entry (filecode, record);

/* write complete 320 word block */

	if look_up_filecode () then return;

writing_block: ;
	call setup;
	if fib.rec_len > 0 then			/* if there is anything in the buffer */
	     call write_fib_block;			/* go write it out first */

	blockptr = addr (record);
	blockptr -> block.num = block.num;		/* copy current bsn into bcw of block to be written */

/* Compute word length of block and put it where write_block expects to find it. */

	fib.rec_len = blockptr -> block.length;

	call write_block;				/* go write the block */

	return;					/* that's all */
%page;
block_ptr: entry (fib_ptr, record);

/* write complete 320 word block, but with fib pointer arg
*/

	fibptr = fib_ptr;
	goto writing_block;


/* 	Enter here to force out buffer for file specified in filecode.	 */
/* 	Do not force if buffer is null or rec_len = 0 which		 */
/* 	indicates that buffer was just written out.		 */

force:	entry (filecode);

	if look_up_filecode () then return;


	goto force_common;
%page;
force_ptr: entry (fib_ptr);

/* 	Enter here to force out buffer for file associated with the	 */
/* fib pointed to by fibptr. */

	fibptr = fib_ptr;

force_common: ;
	if fib.buffer ^= null then			/* and there is a buffer */
	     if fib.rec_len ^= 0 then			/* and it is not empty */
		call write_fib_block;		/* write it out */

	return;
%page;
look_up_filecode: proc () returns (bit (1));

/* look up a fib by filecode
   Return "1"b if file not to be written.
*/

	     do i = 1 to hbound (save_data.fibs, 1);
		if fct.filecode (i) = filecode then do;
		     if fct.sysout (i) then return ("1"b);
		     fibptr = fct.fibptr (i);		/* get pointer to fib */
		     if ^fib.gein then return ("1"b);	/* protect user files from simulator */
		     return ("0"b);
		end;
	     end;

/* 	No fib found. Create one and a file to match 	 */
	     call gcos_open_file_ (filecode, "", fibptr, sw); /* initialize a fib for the specified filecode */
	     fib.gein = "1"b;			/* file for slave use - a gein file */
	     return ("0"b);
	end look_up_filecode;
%page;
setup:	proc;

/* allocate a working buffer if necessary */
	     if fib.buffer = null then do;		/* buffer provided yet? */
		k = index (string (fib_buffers.buffer_in_use), "0"b);
		if k = 0 then do;
		     call gcos_error_ (		/* No buffers available. */
			0
			, "Exceeded ^i file buffers provided."
			, hbound (fib_buffers.buffer_in_use, 1)
			);
		     return;
		end;
		fib_buffers.buffer_in_use (k) = "1"b;	/* Mark buffer in use. */
		fib.buffer_indx = k;
		fib.buffer = addr (fib_buffers.buffer (k));

		fib.rec_len = 0;			/* block length */
		block.num = divide (fib.current, 320, 17, 0) + 1; /* set block serial number */
		if ^fib.attached then call gcos_attach_file_ (fibptr);

	     end;
	     return;
	end setup;
%page;
write_fib_block: proc;

/* write a block onto the file */
	     blockptr = fib.buffer;			/* pointer to the block to be written */
	     blockptr -> block.length = fib.rec_len;	/* put length into bcw */

write_block:   entry;

/* entry with blockptr already set. */

	     if fib.tape then write_count = fib.rec_len + 1; /* write only used words in block on tape */
	     else write_count = 320;			/* write max words per block to disk */
	     fib.rec_len = 0;			/* reset block length */

	     call ios_$write ((fib.stream), blockptr, 0, write_count, i, status); /* write record */

	     if code ^= 0 then goto wr_err;		/* fatal write error */

/* 	Bump serial number in buffer header (bits 1-17) by one	 */

	     block.num = block.num + 1;

	     fib.current = fib.current + write_count;	/* bump curr rec no */
	     if fib.current > fib.size then		/* grow file size if necessary */
		fib.size = fib.size + 3840;		/* grow file one link */

	     return;				/* return from internal procedure */

	end write_fib_block;
%page;
/*   Variables for gcos_write_:		 */
/*   IDENTIFIER		ATTRIBUTES	 */
dcl  acipad                   fixed bin(24)	/* number of pad chars needed to finish ascii rec */;
dcl  acistring                char(1044480) based;
dcl  acisw                    bit(1)init("0"b)	/* => $ascii entry. */;
dcl  addr                     builtin;
dcl  addrel                   builtin;
dcl  bcdsw                    bit(1)init("0"b)	/* => $bcd entry. */;
dcl  blockptr                 ptr;
dcl  divide                   builtin;
dcl  gcossw                   bit(1)init("0"b)	/* => $record entry. */;
dcl  gcos_attach_file_        ext entry (pointer);
dcl  gcos_cv_printline_gebcd_ ext entry (ptr, fixed bin(21), ptr, fixed bin(21));
dcl  gcos_error_              ext entry options (variable);
dcl  gcos_et_$record_too_long fixed bin(35) ext;
dcl  gcos_incode_             ext entry (ptr, fixed bin(24), ptr);
dcl  gcos_open_file_          ext entry (char(*), char(*), pointer, bit(1));
dcl  i                        fixed bin(21);
dcl  index                    builtin;
dcl  inp                      ptr;
dcl  instring                 (lenrec) fixed bin(24)based (inp)	/* input string */;
dcl  j                        fixed bin(24);
dcl  k                        fixed bin;
dcl  length                   builtin;
dcl  lenrec                   fixed bin(17)	/* length in words of record  */;
dcl  mod                      builtin;
dcl  null                     builtin;
dcl  outp                     ptr;
dcl  outstring                (lenrec) fixed bin(24)based (outp)	/* output string */;
dcl  pads                     char(4) int static init("")	/* four ASCII pad (177) chars */;
dcl  putp                     ptr;
dcl  rcwp                     ptr;
dcl  substr                   builtin;
dcl  sw                       bit(1)	/* switch used in open call */;
dcl  temp_buf                 (350) fixed bin(24);
dcl  word                     bit(36) aligned based;
dcl  write_count              fixed bin(21)	/* no of words to write */;	;

dcl 1 block	aligned based (fib.buffer),		/* overlay for buffer */
      2 num	fixed bin(18)unsigned unaligned,	/* block number */
      2 length	fixed bin(18)unsigned unaligned,	/* block length */
      2 buf	(0:318) bit(36)			/* remainder of block */
;

dcl 1 trailer	int static			/* model of eof trailer */
,     2 eoftrailer	bit(36) init( "202546262020"b3 )	/* bEOFbb */
,     2 blk_count	fixed bin(24) init(0)		/* block count for file */
,     2 junk	(12)bit(36) init((12)(1)"0"b)		/* remainder of label record. */
;

dcl 1 rcw		aligned based (rcwp),
      2 length	fixed bin(18)unsigned unaligned,			/* record length */
      2 eof	bit(6) unaligned,
      2 zeros	bit(2) unaligned,
      2 media_code	bit(4) unaligned,
      2 report_code	bit(6) unaligned;

dcl 1 bcd		unaligned based (inp),
      2 char	bit(6) unaligned,
      2 next	bit(6) unaligned;

dcl 1 bcd2	unaligned based (outp),
      2 chars	bit(12) unaligned,
      2 next	bit(6) unaligned;
%page;
%include gcos_fibs;
%page;
%include gcos_ext_stat_;
%page;
%include gcos_dcl_ios_;
     end gcos_write_;
