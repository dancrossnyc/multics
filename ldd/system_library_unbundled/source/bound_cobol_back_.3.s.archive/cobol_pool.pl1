/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_pool.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 1/5/76 by Bob Chang to search operators only when nchar=8 or nchar<5. */
/* Modified since Version 2.0.	*/
/* format: style3 */
cobol_pool:
cobol_pool_:
     proc (constant, boundary, offset, in_op, byte_count);

/*}
function:	This procedure pools a constant in the constant portion
	of the cobol object text section.
	NOTE: NO conversion, blank or zero padding is performed.

usage:	dcl cobol_pool entry (char(*), fixed bin, fixed bin(24));

	call cobol_pool (constant, boundary, offset);

where:	constant (input):
	is the constant to be pooled 

	boundary (input):
	specifies the allocation of the left-most char of the constant
	= 0 :=  any word alloc; return offset in CHARS
	= 1 :=  any word alloc; return offset in WORDS
	= 2 := EVEN word alloc; return offset in WORDS
	= 3 :=  ODD word alloc; return offset in WORDS
	= 4 :=  any char alloc; return offset in CHARS
	NOTE: cobol_pool ALWAYS places the 1st char of the constant in 
	      the LEFT-MOST char position of the 1st word allocated

	offset (output):
	is the WORD or CHARACTER offset of the pooled constant
	relative to the END of the constant portion of the text
	section.
	NOTE: the CHARACTER offset refers to the 1st char in the 
	constant and the WORD offset refers to the word containing 
	the 1st character of the constant.
	(This offset  is in the same form as the offset 
	supplied by Data Division Allocation.)

	in_op output from the search_op entry .
	= 0 := the constant is not in cobol_operators_
	= 1 := the constant is in cobol_operators_. the output offset is
		based on the cobol_operators_.
	byte_count	 input to search_op_byte for the number of bytes
		which are neglected when searching.
}*/

/*	written by: Bob McDowell
	entered system:  7/29/74
	last modified:  12/06/74	*/

/*	note: still needs;

	n)		*/

dcl	(
	ioa_,
	ioa_$rsnnl,
	signal_
	)		entry options (variable);
dcl	(substr, unspec, fixed, rel, index)
			builtin;
dcl	(addr, addrel, length, null, string)
			builtin;

dcl	1 create_con_pool	aligned based (con_wrk_ptr),
	  2 next_const	char (no_char);

dcl	1 search_con_pool	aligned based (con_wrk_ptr),
	  2 all_consts	char (char_size);


dcl	1 op_con_base	based (op_con_ptr),
	  2 num		fixed bin,
	  2 filler	fixed bin,
	  2 op_con	char (0 refer (op_con_base.num));

dcl	1 error_info	aligned,
	  2 module_name	char (32) init ("cobol_pool"),
	  2 err_msg_lngth	fixed bin,
	  2 error_msg	char (168);

dcl	constant		char (*);
dcl	msg_1		char (32) init ("constant entered had 0 length;  ");
dcl	msg_2		char (44) init ("illegal boundary code value - [0<=code<=4]; ");
dcl	msg_3		char (40) init ("constant section overlaps text section; ");
dcl	msg_4		char (47) init ("illegal byte_count value - [0<=byte_count<=7]; ");
dcl	utemp		fixed bin;
dcl	(nchar, nword, word_size, char_size)
			fixed bin;
dcl	(boundary, end_loc, srch_loc, found_loc, reset_loc)
			fixed bin;
dcl	in_op		fixed bin;
dcl	byte_count	fixed bin;
dcl	no_char		fixed bin;
dcl	char_count	fixed bin;
dcl	start_loc		fixed bin;
dcl	(insert_loc, char_loc, bits35_36, bit_36)
			fixed bin;
dcl	offset		fixed bin (24);
dcl	(con_base_ptr, con_wrk_ptr)
			ptr;

start:
	reset_loc = con_wd_off;
	char_count = 0;
	nchar = length (constant);
	if (nchar > 0)
	then goto ck_bndry;
	call error (msg_1);
	return;

ck_bndry:
	if ((boundary >= 0) & (boundary <= 4))
	then goto begin;
	call error (msg_2);
	return;

begin:
	utemp = nchar + char_count + 3;
	nword = fixed (substr (unspec (utemp), 1, 34), 36);
	end_loc = fixed (rel (con_end_ptr), 18);
	con_base_ptr = addrel (con_end_ptr, -end_loc);

/*     search for this constant already in pool   */

	if (con_wd_off = 1)
	then srch_loc = end_loc - 1;
	else srch_loc = end_loc - (con_wd_off - 1) + 1;
search_1:
	con_wrk_ptr = addrel (con_base_ptr, srch_loc);
	word_size = end_loc - srch_loc;
	word_size = mod (word_size, 256);
	char_size = word_size * 4;
	start_loc = 1;
	char_loc = fixed (rel (con_wrk_ptr), 18);
	if (substr (unspec (char_loc), 36, 1) = "1"b & boundary = 2)
	     | (substr (unspec (char_loc), 36, 1) = "0"b & boundary = 3)
	then start_loc = 5;

loop:
	if substr (all_consts, start_loc + char_count, nchar) = constant
	then goto found;
	else if boundary = 0 | boundary = 1
	then start_loc = start_loc + 4;
	else if boundary = 4
	then start_loc = start_loc + 1;
	else start_loc = start_loc + 8;
	if start_loc + nchar - 1 <= char_size
	then goto loop;
	goto pool_it;

found:
	char_loc = start_loc - 1;
	offset = fixed (substr (unspec (char_loc), 1, 34), 36);
	found_loc = srch_loc + offset;
	offset = end_loc - found_loc + 1;
	if boundary = 0 | boundary = 4
	then offset = offset * 4;
	if boundary ^= 4
	then goto exit;
	char_loc = mod (char_loc, 4);
	if char_loc ^= 0
	then offset = offset + char_loc;
	return;

/*     pool constant after satisfying boundary conditions   */

pool_it:
	con_wd_off = con_wd_off + nword;
bump_it:
	offset = con_wd_off - 1;
	insert_loc = end_loc - offset + 1;
	if ((boundary = 0) | (boundary = 4) | (boundary = 1))
	then goto ck_fit;
	bit_36 = fixed (substr (unspec (insert_loc), 36, 1), 36);
						/* check current pool loc satisfies boundary conditions */
ck_bound:
	if ((boundary = 2) & (bit_36 = 0))
	then goto ck_fit;
	if ((boundary = 3) & (bit_36 = 1))
	then goto ck_fit;				/* boundary conditions unsatisfied; bump offset */
	con_wd_off = con_wd_off + 1;
	goto bump_it;				/* check if this constant will fit in constant pool */
ck_fit:
	if (insert_loc > text_wd_off)
	then goto insert;
	call error (msg_3);
	return;					/* insert this constant in the constant pool */
insert:
	con_wrk_ptr = addrel (con_base_ptr, insert_loc);
	no_char = nchar + char_count;
	if char_count ^= 0
	then substr (next_const, 1, char_count) = "";
	substr (next_const, char_count + 1, nchar) = substr (constant, 1, nchar);
	if boundary = 0 | boundary = 4
	then offset = offset * 4;
exit:
	return;




/*	***************************************/


/*	The following entry are implemented to search the constant in cobol_operators_
	before the try on constant section in text segment.
	The fourth parameter in_op is the output explained on the main entry.
*/

search_op:
     entry (constant, boundary, offset, in_op, byte_count);

	char_count = 0;
	goto start_op;

/*****************************************/

/*	This procedure is for the search of cobol_operatorwith the leading null
	chars neglected. The word alignment is the same as usual.*/
search_op_byte:
     entry (constant, boundary, offset, in_op, byte_count);


	char_count = byte_count;
start_op:
	in_op = 0;
	if char_count < 0 | char_count > 7
	then call error (msg_4);
	nchar = length (constant);
	if (nchar > 0)
	then goto ck_bndry_op;
	call error (msg_1);
	return;

ck_bndry_op:
	if ((boundary >= 0) & (boundary <= 4))
	then goto begin_op;
	call error (msg_2);
	return;

begin_op:
	if (nchar > 4) & (nchar ^= 8)
	then goto begin;
	if boundary = 3
	then start_loc = 5;
	else start_loc = 1;
loop_op:
	if substr (op_con, start_loc + char_count, nchar) = constant
	then goto found_op;
	if boundary = 4
	then start_loc = start_loc + 1;
	else if boundary = 1 | boundary = 0
	then start_loc = start_loc + 4;
	else start_loc = start_loc + 8;
	if start_loc + nchar - 1 <= op_con_base.num
	then goto loop_op;
	goto begin;

found_op:
	offset = start_loc + 8199;
	if (boundary ^= 0) & (boundary ^= 4)
	then offset = fixed (substr (unspec (offset), 1, 34));
	in_op = 1;
	return;

/***************************************/



error:
     proc (err_msg);

dcl	err_msg		char (*);

	call ioa_$rsnnl ("^a ABORTING const -> ""^a""", error_msg, err_msg_lngth, err_msg, constant);
	call signal_ ("command_abort_", null, addr (error_info));
	offset = 0;
	con_wd_off = reset_loc;

	return;

     end error;

%include cobol_;
     end cobol_pool;
