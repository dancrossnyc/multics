/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_start_gen.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modifile on 08/27/79 by PRP, [4.0-2] new operator for alternate keys*/
/* Modified on 06/27/79 by FCH, [4.0-1], not option added for debug */
/* Modified on 11/1/78 by FCH,[3.0-1], alt rec keys added */
/* Modifies since Version 3.0 */

/* format: style3 */
cobol_start_gen:
     proc (mp_ptr, passed_tag);

dcl	passed_tag	fixed bin;		/* for  in-line error handling */
dcl	ptag		fixed bin;
dcl	mp_ptr		ptr;
dcl	1 mp		based (mp_ptr),
	  2 n		fixed bin,		/* from 3 to 4 */
	  2 pt		(0 refer (mp.n)) ptr;	/* pt(1) pts to type1 token for START */
						/* pt(2) pts to type 12 token for the file in question */
						/* pt(3) pts to type9 token for key IF end_stmt.a = "1"b */
						/* pt(n) pts to type19 token (eos) */

dcl	1 args,
	  2 entryno	fixed bin,
	  2 arglist_off	fixed bin,
	  2 stacktemp_off	fixed bin,
	  2 n		fixed bin,
	  2 arg		(4),
	    3 pt		ptr,
	    3 type	fixed bin,
	    3 off1	fixed bin,
	    3 off2	fixed bin,
	    3 value	bit (18) unal,
	    3 indirect	bit (1) unal,
	    3 overlay	bit (1) unal,
	    3 repeat_nogen	bit (1) unal,
	    3 regsw	bit (1) unal,
	    3 regno	bit (3) unal;

dcl	file_key_desc	char (40) based;
dcl	argb		(4) bit (216) based (addr (args.arg (1)));
dcl	text		(0:10000) bit (36) based (cobol_$text_base_ptr);

dcl	ft_ptr		ptr;
dcl	fkey_ptr		ptr;
dcl	name_ptr		ptr;
dcl	dn_ptr		ptr;
dcl	arg_ptr		ptr;
dcl	ioerror_ptr	ptr;

dcl	aloff		fixed bin;
dcl	size		fixed bin;
dcl	reclen_off	fixed bin;
dcl	order_off		fixed bin;
dcl	relation_off	fixed bin;
dcl	keylen_off	fixed bin;
dcl	key_off		fixed bin;
dcl	ntag		fixed bin;
dcl	errno		fixed bin;
dcl	alt_sw		bit (1);

dcl	seek_head_sw	bit (1);
dcl	temp_bit2		bit (2);

/*[3.0-1]*/
dcl	char5		char (5),
	key_ctr		fixed bin;

/*************************************/
/*************************************/
/* INITIALIZATION */
start:
	rw_ptr = mp.pt (1);
	eos_ptr = mp.pt (mp.n);
	ioerror_ptr = addr (ioerror);
	ioerror.cobol_code = 0;
	ioerror.type1_ptr = mp.pt (1);
	ioerror.mode = 0;

	if end_stmt.b = "1"b
	then do;					/* in-line error coding follows */
		ioerror.is_tag = cobol_$next_tag;	/* to be defined at end of generated code for WRITE */
		ptag, passed_tag = cobol_$next_tag + 1; /* to be defined by gen driver at end of in-line coding */
		ioerror.ns_tag = ptag;
		cobol_$next_tag = cobol_$next_tag + 2;
	     end;
	else do;
		ioerror.is_tag = 0;
		ptag = 0;
		ioerror.ns_tag = cobol_$next_tag;	/* to be defined at end of generated code */
		cobol_$next_tag = cobol_$next_tag + 1;
	     end;

	arg_ptr = addr (args);
	iocb_arg.pt = addr (iocb_basic_struct);

	call cobol_read_ft (mp.pt (2) -> fd_token.file_no, ft_ptr);

	call cobol_alloc$stack (368, 2, aloff);		/* enough for 92 words - aloff is a wd offset */
	args.arglist_off = aloff;
	argb (1) = unspec (iocb_arg);
	reclen_off = aloff + 22;
	order_off = aloff + 23;
	relation_off = aloff + 26;
	keylen_off = aloff + 27;
	key_off = aloff + 28;


/*************************************/
/* START CODE GENERATION */
start_codegen:					/* MAKE SURE FILE IS OPEN */
	ioerror.retry_tag = cobol_$next_tag;
	ntag = cobol_$next_tag + 1;
	cobol_$next_tag = cobol_$next_tag + 2;

	call cobol_define_tag (ioerror.retry_tag);

	call cobol_set_fsbptr (ft_ptr);		/* OPERATOR21(init_start) */
	call cobol_call_op (21, ntag);		/* INT_START_OP */

	call cobol_gen_ioerror (ft_ptr, ioerror_ptr);

	call cobol_define_tag (ntag);

/*[3.0-1]*/
	alt_sw = file_table.organization = 3 /* ind */ /*[3.0-1]*/ & /*[3.0-1]*/ file_table.alternate_keys ^= 0;

	if file_table.external | file_table.open_out
	then do;

		ntag = cobol_$next_tag;
		cobol_$next_tag = cobol_$next_tag + 1;

		call cobol_io_util$bypass_mode_error (ntag, "11"b);

		if (file_table.external | file_table.rewrite | file_table.delete) & file_table.access < 2
		then call cobol_io_util$move_direct ("001"b, fsb_keylen_sw, 4, 1, ""b);
						/* zero the switch */
						/* OPERATOR54(delete error) */
		call cobol_call_op (54, ntag);	/* ERROR_OP */

		call cobol_gen_ioerror (ft_ptr, ioerror_ptr);

		call cobol_define_tag (ntag);

	     end;

/*[3.0-1]*/
	if alt_sw & end_stmt.e ^= 511			/*[3.0-1]*/
	then do;
		char5 = file_table.alt_key_info;	/*[3.0-1]*/
						/*[3.0-1]*/
		do key_ctr = 1 by 1 to end_stmt.e;	/*[3.0-1]*/
						/*[3.0-1]*/
		     call cobol_read_rand (1, char5, fkey_ptr);
						/*[3.0-1]*/
		     char5 = file_key.next_alt;	/*[3.0-1]*/
						/*[3.0-1]*/
		end;				/*[3.0-1]*/
	     end;

	else call cobol_read_rand (1, file_table.r_key_info, fkey_ptr);

	addr (fkey_type9.file_key_info) -> file_key_desc = file_key.desc;

	seek_head_sw = "0"b;


	if end_stmt.a ^= "0"b
	then do;

		if end_stmt.d = "00"b
		then if mp.pt (3) -> data_name.item_length = fkey_type9.size
		     then ;			/* = whole key */
		     else seek_head_sw = "1"b;
		else seek_head_sw = "1"b;

	     end;

	if ^seek_head_sw
	then do;

		mpout.pt1 = mp.pt (1);
		mpout.pt2 = addr (fkey_type9);

		if file_table.organization = 2
		then do;				/* relative */
			mpout.pt3 = addr (num_type9);
			size, num_type9.size, num_type9.places_left = 16;
			num_type9.seg = 5001;	/* from PR1 */
			num_type9.off = file_table.fsb.off + fsb_key;
		     end;
		else do;				/* indexed */
			mpout.pt3 = addr (alpha_type9);
			size, alpha_type9.size = fkey_type9.size;
			alpha_type9.seg = 5001;	/* from PR1 */
			alpha_type9.off = file_table.fsb.off + fsb_key;
		     end;

		mpout.pt4 = addr (type19);

		call cobol_move_gen (addr (mpout));

		call cobol_io_util$move_direct ("001"b, fsb_keylen_sw, 4, 1, substr (unspec (size), 19, 18));

		ntag = cobol_$next_tag;

/*[3.0-1]*/
		if alt_sw				/*[3.0-1]*/
		then do;
			call cobol_io_util$key_loc (0, 0);
						/*[3.0-1]*/
			call alt_start (84);	/*[3.0-1]*/
		     end;

		cobol_$next_tag = cobol_$next_tag + 1;

		call cobol_set_fsbptr (ft_ptr);

		call cobol_ioop_util$set_icode;	/* OPERATOR67(read_seek_key) */
		call cobol_call_op (67, ntag);	/* iox_$seek_key */

		call cobol_gen_ioerror (ft_ptr, ioerror_ptr);

		call cobol_define_tag (ntag);

		errno = seek_errno;

	     end;
	else do;					/* must call iox_$control */


		temp_bit2 = end_stmt.d;		/* relational code */

		call cobol_io_util$move_direct ("110"b, relation_off * 4, 4, 1, (16)"0"b || temp_bit2);

		mpout.pt1 = mp.pt (1);
		mpout.pt2 = addr (fkey_type9);

		if file_table.organization = 2
		then do;				/* relative */
			mpout.pt3 = addr (num_type9);
			size, num_type9.size, num_type9.places_left = 16;
			num_type9.seg = 1000;	/* stack */
			num_type9.off = key_off * 4;
		     end;
		else do;				/* indexed */
			mpout.pt3 = addr (alpha_type9);
			size, alpha_type9.size = mp.pt (3) -> data_name.item_length;
			alpha_type9.seg = 1000;	/* stack */
			alpha_type9.off = key_off * 4;
		     end;

		mpout.pt4 = addr (type19);

		call cobol_move_gen (addr (mpout));

		call cobol_io_util$move_direct ("110"b, keylen_off * 4, 4, 1, substr (unspec (size), 19, 18));

/*[3.0-1]*/
		if alt_sw				/*[3.0-1]*/
		then do;
			call cobol_io_util$key_loc (1, relation_off);
						/*[3.0-1]*/
			call alt_start (82);	/*[3.0-1]*/
		     end;

/* CALL iox_$control(iocb_ptr,order_name,struc_ptr,code)  where:
				     order_name char(*) - "seek_head",
				     struc_ptr ptr -> 1 struc,
						     2 relation fixed bin,
						     2 keylen fixed bin,
						     2 key char(0 refer (keylen));
				relation:	0 - head = key
					1 - head >= key
					2 - head > key			*/

		ntag = cobol_$next_tag;
		cobol_$next_tag = cobol_$next_tag + 1;

		call cobol_set_fsbptr (ft_ptr);

		call cobol_ioop_util$set_icode;

		call cobol_ioop_util$ldaldx5 (9, reclen_off);
						/* OPERATOR23(start_control) */
		if alt_sw
		then call cobol_call_op (83, ntag);	/*[4.0-2]  iox_$control for alternate keys */
		else call cobol_call_op (23, ntag);	/* iox_$control */

		call cobol_gen_ioerror (ft_ptr, ioerror_ptr);

		call cobol_define_tag (ntag);

		errno = control_errno;

	     end;

	if (file_table.external | file_table.delete | file_table.rewrite) & file_table.access < 2
	then do;

		call cobol_set_fsbptr (ft_ptr);

		call cobol_io_util$move_direct ("001"b, fsb_keylen_sw, 4, 1, ""b);
						/* zero the switch */

	     end;

/*[3.0-1]*/
	if alt_sw					/*[3.0-1]*/
	then do;
		call cobol_io_util$file_desc (file_table.file_desc_1_offset);
						/*[3.0-1]*/
		call cobol_call_op (79, 0);		/*[3.0-1]*/
	     end;

	call cobol_reg_manager$after_op (4095 + ioerror.cobol_code);

/*[4.0-1]*/
	if end_stmt.f = "01"b			/*[4.0-1]*/
	then passed_tag = ioerror.is_tag;		/*[4.0-1]*/
	else call cobol_gen_ioerror$finish_up (ft_ptr, ioerror_ptr);

	return;

alt_start:
     proc (i);

/*[3.0-1]*/
declare	i		fixed bin;

/*[3.0-1]*/
	call cobol_io_util$file_desc (file_table.file_desc_1_offset);
						/*[3.0-1]*/
	call cobol_io_util$key_num (end_stmt.e);	/*[3.0-1]*/
	call cobol_call_op (i, 0);			/* OPERATORi(*) */
     end;



/*************************************/
%include cobol_start_gen_info;
%include cobol_start_gen_data;
     end cobol_start_gen;
