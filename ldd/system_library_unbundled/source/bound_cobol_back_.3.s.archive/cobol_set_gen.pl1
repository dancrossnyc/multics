/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_set_gen.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 04/05/80/ by FCH, [4.2-1], fix out-of range checking, BUG430(TR4533) */
/* Modified since Version 4.2 */
/*{*/
/* format: style3 */
cobol_set_gen:
     proc (in_token_ptr);

dcl	opno		fixed bin;
dcl	ok_tag		fixed bin;
dcl	retry_tag		fixed bin;
dcl	slen		fixed bin;
dcl	(i, j)		fixed bin;
dcl	temp		fixed bin;
dcl	value		fixed bin;
dcl	litoff		fixed bin;

dcl	temp_numlit	char (18);
dcl	char4		char (4) based;
dcl	char8		char (8) based;

dcl	done		bit (1);
dcl	ocsw		bit (1);
dcl	subsw		bit (1);

dcl	iptr		ptr;
dcl	s1p		ptr;
dcl	r1p		ptr;
dcl	s2p		ptr;
dcl	r2p		ptr;
dcl	dn_ptr		ptr;
dcl	name_ptr		ptr;

dcl	rterror_SET_RANGE	fixed bin static options (constant) init (61);
dcl	A		fixed bin static options (constant) init (1);
dcl	Q		fixed bin static options (constant) init (2);
dcl	AQ		fixed bin static options (constant) init (3);
dcl	X5		fixed bin static options (constant) init (15);

dcl	ADQ		bit (11) static options (constant) init ("00011111000"b);
dcl	CWL		bit (11) static options (constant) init ("00100100100"b);
dcl	LDA		bit (11) static options (constant) init ("01001110100"b);
dcl	LDQ		bit (11) static options (constant) init ("01001111000"b);
dcl	LCQ		bit (11) static options (constant) init ("01101111000"b);
dcl	LDAQ		bit (11) static options (constant) init ("01001111100"b);
dcl	STAQ		bit (11) static options (constant) init ("11110111100"b);
dcl	STA		bit (11) static options (constant) init ("11110110100"b);
dcl	STQ		bit (11) static options (constant) init ("11110111000"b);
dcl	STBQ		bit (11) static options (constant) init ("10110101000"b);
dcl	LXL5		bit (11) static options (constant) init ("11101010100"b);
dcl	LDX5		bit (11) static options (constant) init ("01001010100"b);
dcl	STX5		bit (11) static options (constant) init ("11110010100"b);
dcl	AOS		bit (11) static options (constant) init ("00010110000"b);
dcl	STBQ_MASK		bit (6) static options (constant) init ("110000"b);

dcl	set_seq		(2) bit (36) static options (constant) init ("000000000000000001010011101000000111"b,
						/* lda 1,dl */
			"100000000000001010011101010001010000"b);
						/*epp2 pr4|12,**/
dcl	set_reloc		(4) bit (5) aligned static options (constant) init ("00000"b, "00000"b, "11001"b, "00000"b);
dcl	QRS_instr		bit (36) static options (constant) init ("000000000000010010111011010000000000"b);
						/* qrs	22 */
dcl	QLS_instr		bit (36) static options (constant) init ("000000000000010010111011110000000000"b);
						/* qls	22 */
dcl	ANQ1_instr	bit (36) static options (constant) init ("000000000000000000011111110000000011"b);
						/* anq	0,du */
dcl	qls_instr		bit (36) static init ("000000000000000000111011110000000000"b);
						/* qls	X */
dcl	sta_instr		bit (36) static init ("010000000000000000111101101001000000"b);
						/* sta 2|x */
dcl	stz_instr		bit (36) static init ("010000000000000000100101000001000000"b);
						/* stz 2|x */
dcl	mpy_instr		bit (36) static init ("000000000000000000100000010000000111"b);
						/* mpy	X,dl */
dcl	tze_instr		bit (36) static init ("000000000000000000110000000000000100"b);
						/* tze X */
dcl	ldaq_ic_instr	bit (36) static init ("000000000000000000010011111000000100"b);
						/* ldaq X,ic */
dcl	ldq_ic_instr	bit (36) static init ("000000000000000000010011110000000100"b);
						/* ldq X,ic */
dcl	ldq_dl_instr	bit (36) static init ("000000000000000000010011110000000111"b);
						/* ldq X,dl */
dcl	lcq_ic_instr	bit (36) static init ("000000000000000000011011110000000100"b);
						/* lcq X,ic */
dcl	lcq_dl_instr	bit (36) static init ("000000000000000000011011110000000111"b);
						/* lcq X,dl */

dcl	reloc		(2) bit (5);
dcl	1 instr,
	  2 address,
	    3 regno	bit (3),
	    3 offset	bit (15),
	  2 op		bit (11),
	  2 reg		bit (1),
	  2 tag		bit (12);

dcl	1 out_token,
	  2 n		fixed bin,
	  2 fill		fixed bin,
	  2 ptr		(4) ptr;

dcl	1 pool,
	  2 num1		fixed bin (35),
	  2 num2		fixed bin (35);


dcl	1 add_eos		static options (constant),
	  2 size		fixed bin init (10),
	  2 line		fixed bin init (0),
	  2 column	fixed bin init (0),
	  2 type		fixed bin init (19),
	  2 verb		fixed bin init (2),
	  2 e		fixed bin init (1),
	  2 h		fixed bin init (1),
	  2 i		fixed bin init (0),
	  2 j		fixed bin init (0),
	  2 a		bit (3) init (""b),
	  2 b		bit (1) init (""b),
	  2 c		bit (1) init (""b),
	  2 d		bit (2) init (""b),
	  2 f		bit (2) init (""b),
	  2 g		bit (2) init (""b),
	  2 k		bit (5) init (""b);

dcl	1 subtract_eos	static options (constant),
	  2 size		fixed bin init (10),
	  2 line		fixed bin init (0),
	  2 column	fixed bin init (0),
	  2 type		fixed bin init (19),
	  2 verb		fixed bin init (11),
	  2 e		fixed bin init (1),
	  2 h		fixed bin init (1),
	  2 i		fixed bin init (0),
	  2 j		fixed bin init (0),
	  2 a		bit (3) init (""b),
	  2 b		bit (1) init (""b),
	  2 c		bit (1) init (""b),
	  2 d		bit (2) init (""b),
	  2 f		bit (2) init (""b),
	  2 g		bit (2) init (""b),
	  2 k		bit (5) init (""b);

dcl	1 move_eos	static options (constant),
	  2 size		fixed bin init (10),
	  2 line		fixed bin init (0),
	  2 column	fixed bin init (0),
	  2 type		fixed bin init (19),
	  2 verb		fixed bin init (18),
	  2 e		fixed bin init (1),
	  2 h		fixed bin init (0),
	  2 i		fixed bin init (0),
	  2 j		fixed bin init (0),
	  2 a		bit (3) init (""b),
	  2 b		bit (1) init (""b),
	  2 c		bit (1) init (""b),
	  2 d		bit (2) init (""b),
	  2 f		bit (2) init (""b),
	  2 g		bit (2) init (""b),
	  2 k		bit (5) init (""b);

dcl	1 reg		aligned static,
	  2 num		fixed bin,
	  2 assigned_reg	bit (4),
	  2 lock		fixed bin init (1),
	  2 reg_set_now	fixed bin,
	  2 use_code	fixed bin init (0),
	  2 content_ptr	ptr init (null ()),
	  2 literal_content bit (36) init (""b);

dcl	1 ss1		aligned static,
	  2 type		fixed bin init (1),
	  2 operand_no	fixed bin init (0),
	  2 lock		fixed bin init (0),
	  2 segno		fixed bin,
	  2 offset	fixed bin (24),
	  2 send_receive	fixed bin init (0);

dcl	1 rs1		aligned static,
	  2 type		fixed bin init (1),
	  2 operand_no	fixed bin init (0),
	  2 lock		fixed bin init (0),
	  2 segno		fixed bin,
	  2 offset	fixed bin (24),
	  2 send_receive	fixed bin init (1);

dcl	1 ss2		aligned static,
	  2 type		fixed bin init (2),
	  2 operand_no	fixed bin init (1),
	  2 lock		fixed bin init (0),
	  2 operand,
	    3 token_ptr	ptr init (null ()),
	    3 send_receive	fixed bin init (0),
	    3 ic_mod	fixed bin,
	    3 size_sw	fixed bin init (1);

dcl	1 rs2		aligned static,
	  2 type		fixed bin init (2),
	  2 operand_no	fixed bin init (1),
	  2 lock		fixed bin init (0),
	  2 operand,
	    3 token_ptr	ptr init (null ()),
	    3 send_receive	fixed bin init (1),
	    3 ic_mod	fixed bin,
	    3 size_sw	fixed bin init (1);

declare	1 ptr_register_request
			aligned static,
	  2 what_pointer	fixed bin aligned init (2),
	  2 assigned_ptr	fixed bin aligned,
	  2 lock		fixed bin aligned init (1),
	  2 switch	fixed bin aligned init (0),
	  2 segno		fixed bin aligned init (0),
	  2 offset	fixed bin aligned init (0),
	  2 reset		fixed bin aligned;

dcl	cobol_pool	entry (char (*), fixed bin, fixed bin);
dcl	cobol_addr	entry (ptr, ptr, ptr);
dcl	cobol_emit	entry (ptr, ptr, fixed bin);
dcl	cobol_register$load entry (ptr);
dcl	cobol_register$release
			entry (ptr);
dcl	cobol_pointer_register$get
			entry (ptr);
dcl	cobol_pointer_register$priority
			entry (fixed bin, fixed bin, bit (3));
dcl	cobol_make_type9$long_bin
			entry (ptr, fixed bin, fixed bin (24));
dcl	cobol_move_gen	entry (ptr);
dcl	cobol_add_gen	entry (ptr);
dcl	cobol_subtract_gen	entry (ptr);
dcl	cobol_define_tag	entry (fixed bin);
dcl	cobol_make_tagref	entry (fixed bin, fixed bin, ptr);
dcl	cobol_gen_error	entry (fixed bin, fixed bin);

dcl	addr		builtin,
	binary		builtin,
	null		builtin,
	substr		builtin,
	unspec		builtin,
	fixed		builtin;

/*************************************/
start:
	ocsw = fixed_common.options.oc;
	eos_ptr = in_token.token_ptr (in_token.n);
	opno = end_stmt.e;
	dn_ptr = in_token.token_ptr (opno + 2);
	s1p = addr (ss1);
	r1p = addr (rs1);
	s2p = addr (ss2);
	r2p = addr (rs2);
	go to format (binary (end_stmt.a));

/*************************************/
format (0):					/* set {IN | IDN | ID} to {IN | IDN | ID | LIT} */
start0:
	if data_name.type = 10
	then do;					/* set x to IN */
		ind_ptr = dn_ptr;
		ss1.segno = index_name.seg_num;
		ss1.offset = index_name.offset;
		slen = index_name.struc_length;
		do i = 1 to opno;
		     dn_ptr = in_token.token_ptr (i + 1);
		     if data_name.type = 10
		     then do;			/* set IN to IN */
			     ind_ptr = dn_ptr;
			     rs1.segno = index_name.seg_num;
			     rs1.offset = index_name.offset + 4;
			     if ocsw
			     then call oc_start;
			     if slen = index_name.struc_length
			     then do;		/* equal element lengths */
				     call addr_emit (s1p, LDAQ);
				     call reg_lock (AQ);
				     rs1.offset = rs1.offset - 4;
				     call addr_emit (r1p, STAQ);
				     call reg_unlock (AQ);
				end;
			     else do;		/* unequal element lengths */
				     ss1.offset = ss1.offset + 4;
				     call addr_emit (s1p, LDQ);
				     ss1.offset = ss1.offset - 4;
				     call reg_lock (AQ);
				     ;
				     call addr_emit (r1p, STQ);
				     call mpy;
				     call adj_emit (-1, STQ);
				     call reg_unlock (AQ);
				end;
			     if ocsw
			     then call oc_finish;
			end;
		     else if data_name.type = 9
		     then if data_name.usage_index
			then do;			/* set IDN to IN */
				rs2.token_ptr = dn_ptr;
				call addr_emit (s1p, LDA);
				call adj_emit (1, LXL5);
				call reg_lock (A);
				call reg_lock (X5);
				call addr_emit (r2p, STA);
				call adj_emit (1, STX5);
				call reg_unlock (A);
				call reg_unlock (X5);
			     end;
			else do;			/* set ID to IN */
				out_token.n = 4;
				out_token.ptr (1) = in_token.token_ptr (1);
				out_token.ptr (2) = null ();
				out_token.ptr (3) = dn_ptr;
				out_token.ptr (4) = addr (move_eos);
				call cobol_make_type9$long_bin (out_token.ptr (2), ss1.segno, ss1.offset + 4);
				call cobol_move_gen (addr (out_token));
			     end;
		end;
	     end;

	else if data_name.type = 9
	then if data_name.usage_index
	     then do;				/* set x to IDN */
		     ss2.token_ptr = dn_ptr;
		     do i = 1 to opno;
			dn_ptr = in_token.token_ptr (i + 1);
			if data_name.type = 10
			then do;			/* set IN to IDN */
				ind_ptr = dn_ptr;
				rs1.segno = index_name.seg_num;
				rs1.offset = index_name.offset;
				if ocsw
				then call oc_start;
				call addr_emit (s2p, LDAQ);
				call reg_lock (AQ);
				call cobol_emit (addr (QRS_instr), null (), 1);
				call addr_emit (r1p, STAQ);
				call reg_unlock (AQ);
				if ocsw
				then do;
					call oc_finish;
					call oc_finish_idn;
				     end;
			     end;
			else do;			/* set IDN to IDN */
				rs2.token_ptr = dn_ptr;
				if data_name.subscripted
				then do;		/* can't use STBQ instruction */
					call addr_emit (s2p, LDA);
					call adj_emit (1, LDX5);
					call reg_lock (A);
					call reg_lock (X5);
					call addr_emit (r2p, STA);
					call adj_emit (1, STX5);
					call reg_unlock (A);
					call reg_unlock (X5);
				     end;
				else do;
					call addr_emit (s2p, LDAQ);
					call reg_lock (AQ);
					call addr_emit (r2p, STA);
					instr.tag = STBQ_MASK;
					call adj_emit (1, STBQ);
					call reg_unlock (AQ);
				     end;
			     end;
		     end;
		end;

	     else if (data_name.bin_18 & ^data_name.subscripted) /* set IN to ID(short binary) */ | data_name.bin_36
	     then do;				/* set to ID(long binary) */
		     ss2.token_ptr = dn_ptr;
		     do i = 1 to opno;
			ind_ptr = in_token.token_ptr (i + 1);
			rs1.segno = index_name.seg_num;
			rs1.offset = index_name.offset + 4;
			if ocsw
			then call oc_start;
			call addr_emit (s2p, LDQ);
			call reg_lock (Q);
			if data_name.bin_18
			then do;
				if mod (data_name.offset, 4) ^= 0 & ^data_name.linkage_section
				then call cobol_emit (addr (QLS_instr), null (), 1);
				call cobol_emit (addr (QRS_instr), null (), 1);
			     end;
			call addr_emit (r1p, STQ);
			call mpy;
			call adj_emit (-1, STQ);
			call reg_unlock (Q);
			;
			if ocsw
			then call oc_finish;
		     end;
		end;

	     else do;				/* set IN to ID(general) */
		     out_token.n = 4;
		     out_token.ptr = in_token.token_ptr (1);
		     out_token.ptr (2) = dn_ptr;
		     out_token.ptr (4) = addr (move_eos);
		     do i = 1 to opno;
			ind_ptr = in_token.token_ptr (i + 1);
			rs1.segno = index_name.seg_num;
			rs1.offset = index_name.offset + 4;
			if ocsw
			then call oc_start;
			out_token.ptr (3) = null ();
			call cobol_make_type9$long_bin (out_token.ptr (3), rs1.segno, rs1.offset);
			call cobol_move_gen (addr (out_token));
			call addr_emit (r1p, LDQ);
			call reg_lock (Q);
			call mpy;
			call adj_emit (-1, STQ);
			call reg_unlock (Q);
			if ocsw
			then call oc_finish;
		     end;
		end;

	else do;					/* set IN to LIT */
		nlit_ptr = dn_ptr;
		temp_numlit = (18)"0";
		substr (temp_numlit, 19 - numeric_lit.places_left, numeric_lit.places) = numeric_lit.literal;
		pool.num2 = fixed (temp_numlit);
		if pool.num2 = 0
		then call oc_unconditional;
		else do i = 1 to opno;
			ind_ptr = in_token.token_ptr (i + 1);
			rs1.segno = index_name.seg_num;
			rs1.offset = index_name.offset;
						/*[4.2-1]*/
			if pool.num2 < 1 | pool.num2 > index_name.max
			then call oc_unconditional;
			else do;
				pool.num1 = pool.num2 * index_name.struc_length;
				call cobol_pool (addr (pool) -> char8, 2, litoff);
				temp = -(cobol_$text_wd_off + litoff);
				substr (ldaq_ic_instr, 1, 18) = substr (unspec (temp), 19, 18);
				call cobol_emit (addr (ldaq_ic_instr), null (), 1);
				call reg_lock (AQ);
				call addr_emit (r1p, STAQ);
				call reg_unlock (AQ);
				;
			     end;
		     end;
	     end;
	return;


/*************************************/
format (1):					/* set IN {up | down} {ID | LIT} */
start1:
	dn_ptr = in_token.token_ptr (opno + 2);
	if data_name.type = 9
	then do;
		if (data_name.bin_18 & ^data_name.subscripted) /* set IN up | down ID(short binary) */
		     | data_name.bin_36
		then do;				/* set IN up | down ID(long binary) */
			ss2.token_ptr = dn_ptr;
			do i = 1 to opno;
			     ind_ptr = in_token.token_ptr (i + 1);
			     rs1.segno = index_name.seg_num;
			     rs1.offset = index_name.offset + 4;
			     if ocsw
			     then call oc_start;
			     if end_stmt.b
			     then call addr_emit (s2p, LCQ);
						/* DOWN */
			     else call addr_emit (s2p, LDQ);
						/* UP */
			     call reg_lock (Q);
			     if data_name.bin_18
			     then do;
				     if mod (data_name.offset, 4) ^= 0 & ^data_name.linkage_section
				     then call cobol_emit (addr (QLS_instr), null (), 1);
				     call cobol_emit (addr (QRS_instr), null (), 1);
				end;
			     call addr_emit (r1p, ADQ);
			     call adj_emit (0, STQ);
			     call mpy;
			     call adj_emit (-1, STQ);
			     call reg_unlock (Q);
			     if ocsw
			     then call oc_finish;
			end;
		     end;
		else do;				/* set IN up | down ID(general) */
			out_token.n = 4;
			out_token.ptr (1) = in_token.token_ptr (1);
			out_token.ptr (2) = dn_ptr;
			do i = 1 to opno;
			     ind_ptr = in_token.token_ptr (i + 1);
			     rs1.segno = index_name.seg_num;
			     rs1.offset = index_name.offset + 4;
			     if ocsw
			     then call oc_start;
			     out_token.ptr (3) = null ();
			     call cobol_make_type9$long_bin (out_token.ptr (3), rs1.segno, rs1.offset);
			     if end_stmt.b
			     then do;		/* DOWN */
				     out_token.ptr (4) = addr (subtract_eos);
				     call cobol_subtract_gen (addr (out_token));
				end;
			     else do;
				     out_token.ptr (4) = addr (add_eos);
				     call cobol_add_gen (addr (out_token));
				end;
			     call addr_emit (r1p, LDQ);
			     call reg_lock (Q);
			     call mpy;
			     call adj_emit (-1, STQ);
			     call reg_unlock (Q);
			     if ocsw
			     then call oc_finish;
			end;
		     end;
	     end;

	else do;					/* set IN up | down LIT */
		nlit_ptr = dn_ptr;
		temp_numlit = (18)"0";
		substr (temp_numlit, 19 - numeric_lit.places_left, numeric_lit.places) = numeric_lit.literal;
		value = fixed (temp_numlit);
		if numeric_lit.sign = "-"
		then subsw = ^end_stmt.b;
		else subsw = end_stmt.b;
		if value > 1 | subsw
		then do i = 1 to opno;
			ind_ptr = in_token.token_ptr (i + 1);
			rs1.segno = index_name.seg_num;
			rs1.offset = index_name.offset + 4;
			if ocsw
			then call oc_start;
			if value < 262144
			then do;
				if subsw
				then do;
					substr (lcq_dl_instr, 1, 18) = substr (unspec (value), 19, 18);
					call cobol_emit (addr (lcq_dl_instr), null (), 1);
				     end;
				else do;
					substr (ldq_dl_instr, 1, 18) = substr (unspec (value), 19, 18);
					call cobol_emit (addr (ldq_dl_instr), null (), 1);
				     end;
			     end;
			else do;
				call cobol_pool (addr (value) -> char4, 1, litoff);
				temp = -(cobol_$text_wd_off + litoff);
				if subsw
				then do;
					substr (lcq_ic_instr, 1, 18) = substr (unspec (temp), 19, 18);
					call cobol_emit (addr (lcq_ic_instr), null (), 1);
				     end;
				else do;
					substr (ldq_ic_instr, 1, 18) = substr (unspec (temp), 19, 18);
					call cobol_emit (addr (ldq_ic_instr), null (), 1);
				     end;
			     end;
			call reg_lock (Q);
			call addr_emit (r1p, ADQ);
			call adj_emit (0, STQ);
			call mpy;
			call adj_emit (-1, STQ);
			call reg_unlock (Q);
			if ocsw
			then call oc_finish;
		     end;
		else if value = 1
		then do i = 1 to opno;
			ind_ptr = in_token.token_ptr (i + 1);
			rs1.segno = index_name.seg_num;
			rs1.offset = index_name.offset + 4;
			if ocsw
			then call oc_start;
			call addr_emit (r1p, AOS);
			if index_name.struc_length = 1
			then call adj_emit (-1, AOS);
			else do;
				call reg_lock (Q);
				call adj_emit (0, LDQ);
				call mpy;
				call adj_emit (-1, STQ);
				call reg_unlock (Q);
			     end;
			if ocsw
			then call oc_finish;
		     end;
	     end;
	return;


/*************************************/
format (2):
start2:
	call cobol_pointer_register$get (addr (ptr_register_request));
	if end_stmt.c = "1"b
	then do;
		call cobol_emit (addr (set_seq (1)), addr (set_reloc (1)), 2);
		string (instr) = sta_instr;
	     end;
	else do;					/* OFF */
		call cobol_emit (addr (set_seq (2)), addr (set_reloc (3)), 1);
		string (instr) = stz_instr;
	     end;
	do i = 1 to opno;
	     name_ptr = in_token.token_ptr (i + 1);
	     temp = mnemonic_name.iw_key - 1;
	     instr.offset = substr (unspec (temp), 22, 15);
	     call cobol_emit (addr (instr), null (), 1);
	end;
	call cobol_pointer_register$priority (2, 0, "010"b);
	return;


/*************************************/
/* INTERNAL PROCEDURES */

adj_emit:
     proc (n, opcode);
dcl	n		fixed bin;
dcl	opcode		bit (11);
start:
	temp = fixed (instr.offset) + n;
	instr.offset = substr (unspec (temp), 22, 15);
	instr.op = opcode;
	call cobol_emit (addr (instr), null (), 1);
	return;
     end adj_emit;

addr_emit:
     proc (struc_ptr, opcode);
dcl	struc_ptr		ptr;
dcl	opcode		bit (11);
start:
	instr.op = opcode;
	call cobol_addr (struc_ptr, addr (instr), addr (reloc (1)));
	call cobol_emit (addr (instr), addr (reloc (1)), 1);
	return;
     end addr_emit;

mpy:
     proc;
dcl	n		fixed bin (35);
start:
	n = index_name.struc_length;
	if n ^= 1
	then do;
		done = "0"b;
		do j = 19 to 36 while (^done);
		     if substr (unspec (n), j, 1) = "1"b
		     then do;
			     if substr (unspec (n), j + 1) = ""b
			     then do;
				     temp = 36 - j;
				     substr (qls_instr, 1, 18) = substr (unspec (temp), 19, 18);
				     iptr = addr (qls_instr);
				end;
			     else do;
				     substr (mpy_instr, 1, 18) = substr (unspec (n), 19, 18);
				     iptr = addr (mpy_instr);
				end;
			     done = "1"b;
			end;
		end;
		if ^done
		then iptr = addr (ANQ1_instr);
		call cobol_emit (iptr, null (), 1);
	     end;
	return;
     end mpy;

reg_lock:
     proc (regno);
dcl	regno		fixed bin;
start:
	reg.num = regno;
	call cobol_register$load (addr (reg));
	return;
     end reg_lock;

reg_unlock:
     proc (regno);
dcl	regno		fixed bin;
start:
	if regno >= 10
	then temp = regno - 2;
	else temp = regno;
	reg.assigned_reg = substr (unspec (temp), 33, 4);
	reg.num = regno;
	call cobol_register$release (addr (reg));
	return;
     end reg_unlock;

oc_start:
     proc;
start:
	ok_tag = cobol_$next_tag;
	retry_tag = cobol_$next_tag + 1;
	cobol_$next_tag = cobol_$next_tag + 2;
	call cobol_define_tag (retry_tag);
	return;
     end oc_start;

oc_finish:
     proc;
start:						/*[4.2-1]*/
	pool.num1 = 1;
	if pool.num1 = 0
	then pool.num1 = 1;
	pool.num2 = index_name.max;
	call cobol_pool (addr (pool) -> char8, 2, litoff);
	temp = -(cobol_$text_wd_off + litoff);
	substr (ldaq_ic_instr, 1, 18) = substr (unspec (temp), 19, 18);
	call cobol_emit (addr (ldaq_ic_instr), null (), 1);
	rs1.offset = index_name.offset + 4;
	call reg_lock (AQ);
	call addr_emit (r1p, CWL);
	call reg_unlock (AQ);
	call cobol_emit (addr (tze_instr), null (), 1);
	call cobol_make_tagref (ok_tag, cobol_$text_wd_off - 1, null ());
	call cobol_gen_error (rterror_SET_RANGE, retry_tag);
	call cobol_define_tag (ok_tag);
	return;
     end oc_finish;

oc_finish_idn:
     proc;
start:
	ok_tag = cobol_$next_tag;
	cobol_$next_tag = cobol_$next_tag + 1;
	if index_name.struc_length ^= 1
	then do;					/* otherwise AQ will be already loaded */
		pool.num1 = pool.num1 * index_name.struc_length;
		pool.num2 = pool.num2 * index_name.struc_length;
		call cobol_pool (addr (pool) -> char8, 2, litoff);
		temp = -(cobol_$text_wd_off + litoff);
		substr (ldaq_ic_instr, 1, 18) = substr (unspec (temp), 19, 18);
		call cobol_emit (addr (ldaq_ic_instr), null (), 1);
	     end;
	call reg_lock (AQ);
	rs1.offset = rs1.offset - 4;
	call addr_emit (r1p, CWL);
	call reg_unlock (AQ);
	call cobol_emit (addr (tze_instr), null (), 1);
	call cobol_make_tagref (ok_tag, cobol_$text_wd_off - 1, null ());
	call cobol_gen_error (rterror_SET_RANGE, retry_tag);
	call cobol_define_tag (ok_tag);
	return;
     end oc_finish_idn;

oc_unconditional:
     proc;
	retry_tag = cobol_$next_tag;
	cobol_$next_tag = cobol_$next_tag + 1;
	call cobol_define_tag (retry_tag);		/* no escape */
	call cobol_gen_error (rterror_SET_RANGE, retry_tag);
	return;
     end oc_unconditional;


/*************************************/
/* INCLUDE FILES */
%include cobol_in_token;
%include cobol_type2;
%include cobol_type9;
%include cobol_type10;
%include cobol_type17;
%include cobol_type19;
%include cobol_fixed_common;
%include cobol_;
%include cobol_ext_;

     end cobol_set_gen;
