/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_register_util.pl1 Added Trace statements.
                                                   END HISTORY COMMENTS */


/* Modified on 10/19/84 by FCH, [4.3-1], BUG563(phx18381), new cobol_addr_tokens.incl.pl1 */
/* Modified on 09/03/83 by FCH, [5.2...], trace added */
/* Modified on 01/14/77 by ORN to signal command_abort_ rather than cobol_compiler_error */
/* Modified since Version 2.0 */

/* format: style3 */
cobol_register_util:
     proc (bit_reg_code);

/*
This procedure generates code to save and restore the arithmetic
registers, and pointer registers.  There are four entry points:
	1. save	- generates code to save A,Q,A and Q, or index.
	2. restore- generates code to restore A,Q,A and Q, or index
	3. save_pointer - generates code to save a pointer register.
	4. restore_pointer - generates code to restore a pointer
	register.
/*}*/

/*  DECLARATION OF THE PARAMETER  */

dcl	bit_reg_code	bit (4);

/*  DESCRIPTION OF THE PARAMETER  */

/*
PARAMETER		DESCRIPTION

bit_reg_code	A code that identifies the register to be
		saved or restored. The code is defined
		by the following tables:
		If this procedure is being called to save
		or restore A,Q, or index register:


		  code	|  register
		=======================================
		"0001"b	|  A
		"0010"b	|  Q
		"0011"b	|  A and Q
		"1nnn"b	|  index register nnn
		=========================================

		If this procedure is being called to save
		or restore a pointer register the code
		values are:

		  code	|  register
		========================================
		"0nnn"b	|  pointer register "nnn"b
		=========================================

*/

/*  DECLARATIONS OF EXTERNAL ENTRIES  */

dcl	signal_		ext entry (char (*), ptr, ptr);
dcl	cobol_emit	ext entry (ptr, ptr, fixed bin);
dcl	cobol_alloc$stack	ext entry (fixed bin, fixed bin, fixed bin);
dcl	cobol_addr	ext entry (ptr, ptr, ptr);	/*  DECLARATION OF INTERNAL STATIC DATA  */

dcl	STO		bit (7) int static init ("1111011"b);
						/*  Leftmost 7 bits of STA,STQ,STAQ opcodes.  */

dcl	STXN		bit (6) int static init ("111100"b);
						/*  Leftmost 6 bits of STXN opcode.  */

dcl	LOAD		bit (7) int static init ("0100111"b);
						/*  Leftmost 7 bits of LDA,LDQ,LDAQ opcodes.  */

dcl	LDXN		bit (6) int static init ("010010"b);
						/*  Leftmost 6 bits of LDXN opcode.  */

dcl	SPRPN		bit (6) int static init ("101100"b);
						/*  Leftmost 6 bits of SPRPn  */

dcl	LPRPN		bit (6) int static init ("111110"b);
						/*  Leftmost 6 bits of LPRPn  */


	/***.....
dcl       MY_NAME             char (19) int static init ("COBOL_REGISTER_UTIL");
dcl       SAVE_NAME           char (5) int static init ("$SAVE");
dcl       RESTORE_NAME        char (8) int static init ("$RESTORE");
dcl       SAVE_POINTER_NAME   char (13) int static init ("$SAVE_POINTER");
dcl       RESTORE_POINTER_NAME
                              char (16) int static init ("$RESTORE_POINTER");
/**/


dcl	1 error_message	int static,
	  2 name		char (32) init ("cobol_register_util"),
	  2 length	fixed bin init (80),
	  2 message	char (80);


/*  DECLARATIONS OF INTERNAL AUTOMATIC VARIABLES  */

dcl	work_reg_code	fixed bin;
dcl	work_opcode	bit (9);
dcl	fixed_reg_code	fixed bin;
dcl	temp_chars	fixed bin;
dcl	temp_offset	fixed bin;
dcl	binary_reg_code	fixed bin;

dcl	1 input_buff	aligned,
	  2 buffer	(1:10) fixed bin;



/*************************************/
save:
     entry (bit_reg_code);

/*
This entry point generates code to save a register (A,Q,A-Q, or index)
into temporary storage, and  saves the address and relocation information
in the register save_stack for the register being saved.
*/

	/***..... if Trace_Bit then call cobol_gen_driver_$Tr_Beg(MY_NAME||SAVE_NAME);/**/

/*  Map the bit register code into a fixed binary register code.  */

	fixed_reg_code = get_reg_code (bit_reg_code);

	if reg_status.save_stack_count (fixed_reg_code) = reg_status.save_stack_max (fixed_reg_code)
	then do;					/*  SAve stack is full, signal compile  time error.  */
		error_message.message = "save_stack overflow ($save entry)";
stack_overflow:
		call signal_ ("command_abort_", null (), addr (error_message));
		return;
	     end;					/*  Save stack is full, signal compile time error.  */

	if fixed_reg_code = 10
	then do;					/*  Saving A and Q.  */
		work_reg_code = 8;			/*  Save address of the temporary into which A-Q
		is stored into the save stack for the A register.  */
		temp_chars = 8;
	     end;					/*  Saving A and Q  */

	else do;
		work_reg_code = fixed_reg_code;
		temp_chars = 4;
	     end;

	call get_temp_storage (temp_chars, temp_offset);
	call establish_address (work_reg_code, temp_offset);

/*  Insert the proper opcode into the save_stack entry.  */
	if fixed_reg_code > 7
	then work_opcode = STO || substr (bit_reg_code, 3, 2);
						/*  Store A,Q,A-Q  */
	else work_opcode = STXN || substr (bit_reg_code, 2, 3);
						/*  Store index n  */

	temp_stack_count = reg_status.save_stack_count (fixed_reg_code);
	substr (reg_status.save_stack (fixed_reg_code, temp_stack_count), 19, 9) = work_opcode;

/*  Emit the store instruction.  */
	call cobol_emit (inst_ptr, reloc_ptr, 1);

	go to exit_save;


/*************************************/
restore:
     entry (bit_reg_code);

/*
This entry point generates code to restore a register from a
saved value in the stack.
*/

	/***.....if Trace_Bit then call cobol_gen_driver_$Tr_Beg(MY_NAME||RESTORE_NAME);/**/

/*  Map the bit code into a fixed binary code.  */

	work_reg_code = get_reg_code (bit_reg_code);

	if work_reg_code = 10			/*  A and Q  */
	then fixed_reg_code = 8;			/*  Address of the temp in which A and Q is stored is
		saved in the A register save_stack.  */
	else fixed_reg_code = work_reg_code;

	if reg_status.save_stack_count (fixed_reg_code) = 0
	then do;					/*  No register is saved..none can be restored.  */
		error_message.message = "save stack underflow ($restore entry)";
stack_underflow:
		call signal_ ("command_abort_", null (), addr (error_message));
		return;
	     end;					/*  No register is saved..non can be restored.  */

	temp_stack_count = reg_status.save_stack_count (fixed_reg_code);
	inst_ptr = addr (reg_status.save_stack (fixed_reg_code, temp_stack_count));

	reloc_ptr = addr (reg_status.reloc_stack (fixed_reg_code, temp_stack_count));


	if work_reg_code > 7
	then work_opcode = LOAD || substr (bit_reg_code, 3, 2);
						/*  Load A,Q or A-Q  */
	else work_opcode = LDXN || substr (bit_reg_code, 2, 3);
						/*  Load index n  */

	temp_stack_count = reg_status.save_stack_count (fixed_reg_code);
	substr (reg_status.save_stack (fixed_reg_code, temp_stack_count), 19, 9) = work_opcode;

/*  Decrement the top of stack pointer for the save_stack.  */
	reg_status.save_stack_count (fixed_reg_code) = reg_status.save_stack_count (fixed_reg_code) - 1;
	call cobol_emit (inst_ptr, reloc_ptr, 1);

exit_save:
exit_save_pointer:
exit_restore_pointer:
	/***.....if Trace_Bit then call cobol_gen_driver_$Tr_End(MY_NAME);/**/
	return;


/*************************************/

save_pointer:
     entry (bit_reg_code);

/*
This entry point generates code to save a pointer register
into temporary storage, and saves the address at which the pointer
register is stored, and relocation information in the pointer register
save statck for the pointer register being saved.
*/

	/***.....if Trace_Bit then call cobol_gen_driver_$Tr_Beg(MY_NAME||SAVE_POINTER_NAME);/**/

start_save_pointer:					/*  Convert the bit pointer register code to fixed binary.  */
	fixed_reg_code = fixed (bit_reg_code, 17);

	temp_stack_count = ptr_status.save_stack_max (fixed_reg_code);
	if ptr_status.save_stack_count (fixed_reg_code) = temp_stack_count
	then do;					/*  Pointer save stack for this pointer register is full.  */
		error_message.message = "save_stack overflow ($save_pointer entry)";
pointer_stack_overflow:
		call signal_ ("command_abort_", null (), addr (error_message));
		return;
	     end;					/*  Pointer save stack for this pointer register is full.  */

	call get_temp_storage (4 /*  number of bytes  */, temp_offset);
	call establish_address (fixed_reg_code + 10, temp_offset);

/*  Insert the opcode into the save stack entry.  */
	temp_stack_count = ptr_status.save_stack_count (fixed_reg_code);
	substr (ptr_status.save_stack (fixed_reg_code, temp_stack_count), 19, 9) = SPRPN || substr (bit_reg_code, 2, 3);

/*  Emit the instruction to store the pointer register into the temporary.  */
	call cobol_emit (inst_ptr, reloc_ptr, 1);

	go to exit_save_pointer;


/*************************************/

restore_pointer:
     entry (bit_reg_code);

/*
This entry point generates code to restore a pointer register
from a saved value in a temporary (in the stack).
*/
	/***..... dcl RESTORE_POINTER char (15) int static init ("RESTORE_POINTER");/**/
	/***.....if Trace_Bit then call cobol_gen_driver_$Tr_Beg(MY_NAME||RESTORE_POINTER);/**/

start_restore_pointer:
	fixed_reg_code = fixed (bit_reg_code, 17);	/*  Check for stack underflow.  */
	if ptr_status.save_stack_count (fixed_reg_code) = 0
	then do;					/*  No pointer is saved...none can be restored.  */
		error_message.message = "save_stack underflow ($save_pointer entry)";
pointer_stack_underflow:
		call signal_ ("command_abort_", null (), addr (error_message));
		return;
	     end;					/*  No pointer is saved...none can be restored.  */

	temp_stack_count = ptr_status.save_stack_count (fixed_reg_code);
	inst_ptr = addr (ptr_status.save_stack (fixed_reg_code, temp_stack_count));
	temp_stack_count = ptr_status.save_stack_count (fixed_reg_code);
	reloc_ptr = addr (ptr_status.reloc_stack (fixed_reg_code, temp_stack_count));

	inst_struc_basic.fill1_op = LPRPN || substr (bit_reg_code, 2, 3);

/*  Emit the instruction to restore the pointer register from the saved value in temporary storage.  */
	call cobol_emit (inst_ptr, reloc_ptr, 1);

/*  Decrement the top of stack pointer (counter) for the save stack.  */
	ptr_status.save_stack_count (fixed_reg_code) = ptr_status.save_stack_count (fixed_reg_code) - 1;

	go to exit_restore_pointer;

get_reg_code:
     proc (reg_bit_code) returns (fixed bin);

/*
This internal procedure maps a four bit register code into a fixed binary
register code.
*/

dcl	reg_bit_code	bit (4);

dcl	binary_code	fixed bin;

	if reg_bit_code = "0001"b
	then binary_reg_code = 8;			/*  A  */
	else if reg_bit_code = "0010"b
	then binary_reg_code = 9;			/*  Q  */
	else if reg_bit_code = "0011"b
	then binary_reg_code = 10;			/*  A and Q  */
	else binary_reg_code = fixed (reg_bit_code, 17, 0) - 8;
						/*  Index register.  */

	return (binary_reg_code);

     end get_reg_code;

get_temp_storage:
     proc (byte_length, char_offset);

/*
This internal procedure allocates space on the stack for a temporary
in which a register is to be stored.
*/

/*  DECLARATION OF THE PARAMETERS  */

dcl	byte_length	fixed bin;
dcl	char_offset	fixed bin;

/*  DESCRIPTION OF THE  PARAMETERS  */

/*
PARAMETER		DESCRIPTION

byte_length	The number of bytes to allocate in the stack.
		This length will be 4 if the register being
		stored is A,Q,any index register or any
		pointer register, and 8 if the register being
		stored is the A-Q.  (input)
char_offset	The character offset of the leftmost character
		of the stack temporary.  (output)

*/

/*  Allocate space, aligned on a double word boundary.  */
	call cobol_alloc$stack (byte_length, 2, char_offset);

/*  Convert the returned word offset to a character offset.  */
	char_offset = char_offset * 4;

     end get_temp_storage;

establish_address:
     proc (binary_reg_code, temp_char_offset);

/*
This internal procedure establishes the address of the temporary
in the stack to receive a stored register.
*/

/*  DECLARATION OF THE PARAMETERS  */

dcl	binary_reg_code	fixed bin;
dcl	temp_char_offset	fixed bin;

/*  DESCRIPTION OF THE PARAMETERS  */

/*
PARAMETER		DESCRIPTION

binary_reg_code	A code that identifies the register being
		stored, and  that indicates
		the subscript of the register status structure
		entry in which the address is to be stored.
		This code specifies either a register (A,Q,
		or index) or a pointer register, as shown
		in the folllowing table:

		 code	|  register identified
		=========================================
		  0-7	|  index register 0-7
		  8	|  A
		  9	|  Q
		  10-17	|  pointer register 0-7
		==========================================


temp_char_offset	The character offset of the leftmost byte
		of the word in the stack into whichh the registe
		is to be stored.  (input)

*/

	if binary_reg_code < 10
	then do;					/*  Storing a register (A,Q,A-Q, or index)  */

		reg_status.save_stack_count (binary_reg_code) = reg_status.save_stack_count (binary_reg_code) + 1;
		temp_stack_count = reg_status.save_stack_count (binary_reg_code);
		inst_ptr = addr (reg_status.save_stack (binary_reg_code, temp_stack_count));

		temp_stack_count = reg_status.save_stack_count (binary_reg_code);
		reloc_ptr = addr (reg_status.reloc_stack (binary_reg_code, temp_stack_count));
	     end;					/*  Storing a register (A,Q,A-Q, or index)  */

	else do;					/*  Storing a pointer register.  */
		temp_stack_count = ptr_status.save_stack_count (binary_reg_code - 10);
		ptr_status.save_stack_count (binary_reg_code - 10) = temp_stack_count + 1;
		temp_stack_count = ptr_status.save_stack_count (binary_reg_code - 10);
		inst_ptr = addr (ptr_status.save_stack (binary_reg_code - 10, temp_stack_count));

		temp_stack_count = ptr_status.save_stack_count (binary_reg_code - 10);
		reloc_ptr = addr (ptr_status.reloc_stack (binary_reg_code - 10, temp_stack_count));
	     end;					/*  Storing a pointer register.  */

/*  Set up to call the addressability utility to establish the address
	of the stack temporary.  Note that the address and reloc information are stored into the
	proper save_stack for the register being stored.  */

	input_ptr = addr (input_buff);
	input_struc_basic.type = 1;
	input_struc_basic.operand_no = 0;
	input_struc_basic.lock = 0;
	input_struc_basic.segno = 1000;		/*  Stack  */
	input_struc_basic.char_offset = temp_offset;

	call cobol_addr (input_ptr, inst_ptr, reloc_ptr);


     end establish_address;



	/***.....	dcl cobol_gen_driver_$Tr_Beg entry(char(*));/**/
	/***.....	dcl cobol_gen_driver_$Tr_End entry(char(*));/**/

	/***.....	dcl Trace_Bit bit(1) static external;/**/
	/***.....	dcl Trace_Lev fixed bin static external;/**/
	/***.....	dcl Trace_Line char(36) static external;/**/
	/***.....	dcl ioa_ entry options(variable); /**/


dcl	temp_stack_count	fixed bin;

/*  INCLUDE FILES USED BY THIS PROCEDURE  */
/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

%include cobol_addr_tokens;
dcl	1 reg_status	(0:9) based (cobol_$reg_status_ptr) aligned,
%include cobol_reg_status;
dcl	1 ptr_status	(0:9) based (cobol_$ptr_status_ptr) aligned,
%include cobol_ptr_status;
%include cobol_;

     end cobol_register_util;
