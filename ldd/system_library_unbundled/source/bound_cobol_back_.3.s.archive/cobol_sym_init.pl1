/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_sym_init.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 10/13/81 by FCH, [5.0-1], 32 char used-id caused seg-fault, BUG514(phx11725) */
/* Modified on 05/29/81 by FCH, [4.4-1], dtm incorrectly stored in obj module, phx09946(BUG485) */
/* Modified on 10/25/78 by FCH, [3.0-4], c_name decl changed */
/* Modified on 06/22/78 by RAL, [3.0-3], rewrote symbol_section to handle source and include files */
/* Modified on 04/27/78 by FCH, [3.0-2], symbol_section(source module path name) */
/* Modified on 04/27/78 by FCH, [3.0-1], compiler options to symbol sect */
/* Modified since Version 3.0 */

/* format: style3 */
cobol_sym_init:
     proc (tpath);					/* [3.0-2] */

/*	This procedure builds the SYMBOL SECTION
		(header, source_map, variable_area, symbol_relocation_block)
	The external procedure RELP1 is used to calculate the relative pointers
	used within all structures.
*/

	sym_ptr = cobol_$sym_base_ptr;

/* =====HEADER================ */

	relp = "000000000000010100"b;			/* set start of header variable area +20(decimal) words */

	symbol_block_header.decl_vers = 1;
	symbol_block_header.identifier = "symbtree";
	symbol_block_header.gen_version_number = 1;

	time = clock_ ();
	call date_time_ (time, string);

	symbol_block_header.gen_creation_time = time;	/* TBD */
	symbol_block_header.object_creation_time = time;
	symbol_block_header.generator = "cobol   ";

/* Build and Set gen_version_name */

	pp = addrel (sym_ptr, relp);
	symbol_block_header.gen_version_name_relp = relp; /* always begins at 20th word in symbol section. */
	substr (is, 1, 48) = "Multics COBOL, Version " || fixed_common.compiler_rev_no;
	symbol_block_header.gen_version_name_length = "000000000000110000"b;
						/* 48(decimal) */

/* Build and Set userid */

	char_string = get_group_id_ ();
	l = symbol_block_header.gen_version_name_length;
	symbol_block_header.userid_relp = RELP1 (relp, l);
	n = index (char_string, " ") - 1;

/*[5.0-1]*/
	if n < 1
	then n = 32;

	symbol_block_header.userid_length = substr (unspec (n), 19, 18);
	pp = addrel (sym_ptr, userid_relp);
	substr (is, 1, n) = char_string;

/* no comments */

	l = symbol_block_header.userid_length;
	relp = symbol_block_header.userid_relp;		/* [3.0-1] */
	symbol_block_header.comment_relp = RELP1 (relp, l);
						/* [3.0-1] */
	symbol_block_header.comment_length = substr (unspec (cobol_options_len), 19, 18);
						/* [3.0-1] */
	pp = addrel (sym_ptr, symbol_block_header.comment_relp);
						/* [3.0-1] */
	substr (is, 1, cobol_options_len) = cobol_options;/* [3.0-1] */

	symbol_block_header.text_boundary = "000000000000000010"b;
						/* 2 */
	symbol_block_header.stat_boundary = "000000000000000010"b;
						/* 2 */

/* the following items are set further into the compilation */

	symbol_block_header.section_relp = "0"b;
	symbol_block_header.block_size = "0"b;
	symbol_block_header.next_block_thread = "0"b;
	symbol_block_header.text_relocation_relp = "0"b;
	symbol_block_header.def_relocation_relp = "0"b;
	symbol_block_header.link_relocation_relp = "0"b;

/* Build and Set source map */

	RR = fixed (symbol_block_header.gen_version_name_length, 18) + fixed (symbol_block_header.userid_length, 18)
	     + fixed (symbol_block_header.comment_length, 18);
	l = substr (unspec (RR), 19, 18);

	symbol_block_header.source_map_relp = RELP1 (relp, l);

	if substr (userid_length, 17, 2) ^= "00"b
	then do;
		RR = fixed (symbol_block_header.source_map_relp, 18) + 1;
		symbol_block_header.source_map_relp = substr (unspec (RR), 19, 18);
		RR = fixed (l, 18) + 4;
		l = substr (unspec (RR), 19, 18);
	     end;

/* =====SOURCE_MAP============ */


/* [3.0-3] */
	p1 = addrel (sym_ptr, source_map_relp);
	source_map.decl_vers = 1;
	call cobol$pop_name (c_name_ptr);
	source_map.size = c_name.ct;
	RR = fixed (l, 18) + 8 + (16 * source_map.size);
	l = substr (unspec (RR), 19, 18);
	do i = source_map.size to 1 by -1;
	     RR = c_name.size + 1;
	     source_map.map.pathname_length (i) = substr (unspec (RR), 19, 18);
	     source_map.map.pathname_relp (i) = RELP1 (relp, l);
	     RR = fixed (l, 18);
	     RR = RR + fixed (pathname_length (i), 18);
	     l = substr (unspec (RR), 19, 18);
	     source_map.map.uid (i) = c_name.uid;	/*[4.4-1]*/
	     source_map.map.dtm (i) = 10000000000000000b * binary (c_name.dtm, 36);
	     pp = addrel (sym_ptr, source_map.pathname_relp (i));
	     substr (is, 1, fixed (source_map.pathname_length (i), 18)) = substr (c_name.pname, 1, c_name.size);
	     seg_name_length = c_name.size + 1;
	     call cobol$pop_name (c_name_ptr);
	end;					/* [3.0-3] */


/* =====VARIABLE_AREA========= */

	RR = fixed (l, 18) + fixed (pathname_length (source_map.size), 18);
	l = substr (unspec (RR), 19, 18);
	area_relp = RELP1 (relp, l);
	p2 = addrel (sym_ptr, area_relp);

	variable_area.decl_vers = 1;
	variable_area.identifier = "pl1info ";
	variable_area.flags = 0;
	variable_area.greatest_severity = 0;
	variable_area.root = "0"b;
	variable_area.profile = "0"b;
	variable_area.map_first = "0"b;
	variable_area.map_last = "0"b;
	RR = fixed (area_relp, 18) + 8;
	variable_area.segname_relp = substr (unspec (RR), 19, 18);
	variable_area.segname_length = substr (unspec (seg_name_length), 19, 18);

	RR = fixed (l, 18) + 32;
	l = substr (unspec (RR), 19, 18);
	pp = addrel (sym_ptr, RELP1 (relp, l));
	substr (is, 1, seg_name_length) = cobol_$obj_seg_name;

/* =====clean up================== */

	RR = fixed (l, 18) + seg_name_length;
	l = substr (unspec (RR), 19, 18);
	default_truncate = RELP1 (relp, l);
	optional_truncate = default_truncate;

	sym_wd_off = fixed (default_truncate, 18);

	call cobol_reloc (null (), 2 * sym_wd_off, 3004);

	return;


RELP1:
     proc (RC, RL) returns (bit (18));
declare	(RC, RL)		bit (18),
	(rc, rl)		fixed bin;

	rl = fixed (RL, 18);
	rc = fixed (RC, 18);

	RR = rl + mod (-rl, 4);
	RL = substr (unspec (RR), 19, 18);
	RR = divide (RR, 4, 31, 0) + rc;

	return (substr (unspec (RR), 19, 18));

     end RELP1;

/* [3.0-3] */
dcl	i		fixed bin;		/* [3.0-3] */
dcl	1 c_name		based (c_name_ptr),		/*[3.0-4]*/
	  2 ct		fixed bin,		/*[3.0-4]*/
	  2 size		fixed bin,		/*[3.0-4]*/
	  2 last_name_ptr	ptr,			/* [3.0-3] */
	  2 pname		char (168) aligned,		/* [3.0-3] */
	  2 uid		bit (36),			/* [3.0-3] */
	  2 dtm		bit (36);			/* [3.0-3] */
dcl	c_name_ptr	ptr;			/* [3.0-3] */
dcl	cobol$pop_name	entry (ptr);


declare	tpath		char (168) aligned;		/* [3.0-2] */

dcl	date_time_	entry (fixed bin (71), char (*)) ext,
	cobol_reloc	entry (ptr, fixed bin, fixed bin) ext,
	get_group_id_	entry returns (char (32)) ext,
	clock_		entry returns (fixed bin (71)) ext,
	get_wdir_		entry returns (char (168)) ext,
	(relp, l)		bit (18),
	(n, seg_name_length)
			fixed bin,
	RR		fixed bin,
	time		fixed bin (71) aligned,
	dirname		char (168) aligned,
	string		char (24),
	char_string	char (32),
	temp_string	char (26000) aligned,
	(p1, p2, pp)	ptr,
	is		char (262000) aligned based (pp);

dcl	addrel		builtin;
dcl	unspec		builtin;
dcl	fixed		builtin;
dcl	index		builtin;
dcl	null		builtin;
dcl	substr		builtin;

%include cobol_sbh;
%include cobol_fixed_common;
%include cobol_ext_;
%include cobol_source_map;
%include cobol_variable_area;
%include cobol_relinfo;
%include cobol_;

     end;
