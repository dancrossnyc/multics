/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_set_pr.pl1 Added Trace statements.
                                                   END HISTORY COMMENTS */


/* Modified on 09/23/83 by FCH, [5.2...], trace added */
/* Modified on 09/25/80 by FCH, [4.4-1], values in array epp_instr were being changed, BUG445 */
/* Modified on 01/12/78 by FCH, [3.0-1], a9db_instr changed from static to automatic */
/* Changes made since Version 3.0 */

/* format: style3 */
cobol_set_pr:
     proc (struc_ptr, dn_ptr);

dcl	struc_ptr		ptr;			/* pts to a structure identical to that used by cobol_pointer_register */
dcl	dn_ptr		ptr;			/* pts to a type 9 token */

/* This routine is passed an input structure identical to that
passed to cobol_pointer_register$get and additionally a pointer
to a type 9 token.  The pointer register specified in the
structure is set to point to the data item described by the type 9
token (to the byte).  The switch field in the input structure
should be set to 0.  If it is not, a call to this routine
is no different than a call to cobol_pointer_register$get, i.e.
the ptr to the type 9 token is ignored and the segno and offset
fields in the structure are used instead. */

dcl	1 structure	based (struc_ptr),
	  2 what_pointer	fixed bin,
	  2 pointer_no	bit (3),
	  2 lock		fixed bin,
	  2 switch	fixed bin,
	  2 segno		fixed bin,
	  2 offset	fixed bin (24),
	  2 reset		fixed bin;

/*
 what_pointer specifies the pointer register to be obtained.
	(input)
	0-7 - get this pointer register.
	 10 - get any temporary pointer register.
 pointer_no is the register that is assigned, in the
	range 0-7. (output)
 lock	can have the following values. (input)
	0 - do not change the lock or unlock status
	    of this pointer.
	1 - lock the pointer register.
	2 - unlock all pointer registers.
	3 - unlock all pointer registers and A register
	    and Q register and all index registers.
 switch	has the following values. (input)
	0 - the dn_ptr is to be used to set the pointer
	    register rather than segno and offset
	    fields which follow.  In this case the value
	    is not meaningful for register optimization.
	    Segment number and offset are meaningless.
	1 - a segment number and word offset are supplied.
	2 - a segment number and character offset are supplied
 segno 	is the segment number. (input)
	values recognized are:
	    2 - cobol data.
	 1000 - stack.
	 3000 - constants.
	 3002 - multics linkage.
	 4000 - pl1 operators.
	2nnnn - cobol linkage.
	   -n - link in multics linkage.
 offset	is the word or character offset (depending on switch).
	Any case when the offset is meaningless a 0 value
	must be used. 
	If a character offset is provided only the word
	portion is meaningful. (input)
 reset	specifies that the caller has requested a register
	that must have a preset value. For example a preset
	register to cobol data or the pointer to pl/1 operators
	(likely). This is only of interest to callers
	who request a specific register (what_pointer = 0-7)
	Such callers should test reset. If it is 1, a call to
	cobol_reset_r should be made in order
	to emit instructions to reload the register to
	its proper value.
/*}*/

dcl	1 addr_struc	static,
	  2 type		fixed bin,
	  2 operand_no	fixed bin init (1),
	  2 lock		fixed bin init (0),
	  2 operand,
	    3 token_ptr	ptr,
	    3 send_receive	fixed bin init (0),
	    3 ic_mod	fixed bin,
	    3 size_sw	fixed bin init (1);		/* don't bother with size */

/*[4.4-1]*/
dcl	instr		bit (36);

dcl	epp_instr		(0:7) bit (36) static
			init ("000000000000000000011101000000000000"b, "000000000000000000011101001100000000"b,
			"000000000000000000011101010000000000"b, "000000000000000000011101011100000000"b,
			"000000000000000000011111000000000000"b, "000000000000000000011111001100000000"b,
			"000000000000000000011111010000000000"b, "000000000000000000011111011100000000"b)
			options (constant);
dcl	a9bd_instr	bit (36);			/*[3.0-1]*/
dcl	omit_sign_instr	(2) bit (36) static init ("000000000000000001010010010000000011"b,
						/* ldx2	1,du	*/
			"010000000000000000101000000101001010"b) /* a9bd	pr2|0,2	*/ options (constant);

dcl	reloc		(2) bit (5) aligned;
dcl	reloc_ptr		ptr;
dcl	instr_ptr		ptr;
dcl	addr_struc_ptr	ptr;
dcl	i		fixed bin;
dcl	backup		fixed bin;
dcl	subsw		bit (1);
dcl	omitsw		bit (1);

dcl	cobol_emit	entry (ptr, ptr, fixed bin);
dcl	cobol_addr	entry (ptr, ptr, ptr);
dcl	cobol_pointer_register$get
			entry (ptr);



	/***.....	dcl cobol_gen_driver_$Tr_Beg entry(char(*));/**/
	/***.....	dcl cobol_gen_driver_$Tr_End entry(char(*));/**/

	/***.....	dcl Trace_Bit bit(1) static external;/**/
	/***.....	dcl Trace_Lev fixed bin static external;/**/
	/***.....	dcl Trace_Line char(36) static external;/**/
	/***.....	dcl ioa_ entry options(variable); /**/
	/***..... dcl MY_NAME char (12) int static init ("COBOL_SET_PR");/**/


/*************************************/

	/***.....if Trace_Bit then call cobol_gen_driver_$Tr_Beg(MY_NAME);/**/

	omitsw = "0"b;
	go to start;

omit_sign:
     entry (struc_ptr, dn_ptr);

	/***..... dcl LOCAL_NAME char (10) int static init ("$OMIT_SIGN");/**/
	/***.....	if Trace_Bit then call cobol_gen_driver_$Tr_Beg(MY_NAME||LOCAL_NAME);/**/

	omitsw = "1"b;

start:
	if structure.switch ^= 0 | dn_ptr = null ()
	then do;

		call cobol_pointer_register$get (struc_ptr);
		go to pr_done;

	     end;



	if data_name.subscripted
	then do;

		subsw = "1"b;
		data_name.subscripted = "0"b;
		occurs_ptr = addrel (dn_ptr, substr (unspec (data_name.occurs_ptr), 17, 18));
		backup = 0;

		do i = 1 to occurs.dimensions;
		     backup = backup + divide (occurs.level.struc_length (i), 2, 35, 0);
						/* accumulate size of each dimension */
		end;

		data_name.offset = data_name.offset - backup;
						/* backup to zeroth element */


	     end;
	else subsw = "0"b;

	call cobol_pointer_register$get (struc_ptr);

	addr_struc.type = 2;
	addr_struc.operand.token_ptr = dn_ptr;
	addr_struc_ptr = addr (addr_struc);

/*[4.4-1]*/
	instr_ptr = addr (instr);			/*[4.4-1]*/
	instr = epp_instr (fixed (structure.pointer_no, 3));

	reloc_ptr = addr (reloc);

	call cobol_addr (addr_struc_ptr, instr_ptr, reloc_ptr);
	call cobol_emit (instr_ptr, reloc_ptr, 1);

	a9bd_instr = "000000000000000000101000000100000000"b;
						/*[3.0-1]*/

	if subsw
	then do;

		data_name.subscripted = "1"b;
		substr (a9bd_instr, 1, 3) = structure.pointer_no;
		addr_struc.type = 7;
		instr_ptr = addr (a9bd_instr);

		call cobol_addr (addr_struc_ptr, instr_ptr, reloc_ptr);
		call cobol_emit (instr_ptr, reloc_ptr, 1);

		data_name.offset = data_name.offset + backup;
						/* readjust offset to base of array */

	     end;
	else if mod (data_name.offset, 4) ^= 0
	then do;					/* non-word-aligned scalar data */

		substr (a9bd_instr, 1, 3) = structure.pointer_no;
		addr_struc.type = 7;
		instr_ptr = addr (a9bd_instr);

		call cobol_addr (addr_struc_ptr, instr_ptr, reloc_ptr);
		call cobol_emit (instr_ptr, reloc_ptr, 1);

	     end;

	if omitsw
	then if data_name.sign_separate
	     then call cobol_emit (addr (omit_sign_instr), null (), 2);
						/* adjust pr */

pr_done:	/***.....if Trace_Bit then call cobol_gen_driver_$Tr_End(MY_NAME);/**/
	return;


/*************************************/

/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

%include cobol_occurs_ext;
%include cobol_type9;
%include cobol_;
     end cobol_set_pr;
