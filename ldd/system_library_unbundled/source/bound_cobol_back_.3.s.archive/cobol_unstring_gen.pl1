/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_unstring_gen.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* format: style3 */
cobol_unstring_gen:
     proc (mp_ptr, passed_tag);

dcl	mp_ptr		ptr;
dcl	passed_tag	fixed bin;

dcl	1 mp		based (mp_ptr),
	  2 n		fixed bin,
	  2 pt		(0 refer (mp.n)) ptr;

dcl	1 u		auto,
	  2 n		fixed bin,
	  2 tag		fixed bin,
	  2 stp		ptr,			/* pts to sending token */
	  2 dptr		ptr,			/* pts to d struct - may be null */
	  2 ptp		ptr,			/* pts to pointer token - may be null */
	  2 ttp		ptr,			/* pts to tallying token - may be null */
	  2 unstr		(256),
	    3 rtp		ptr,			/* pts to receiving token(i) */
	    3 dtp		ptr,			/* pts to delimiter token(i) - may be null */
	    3 ctp		ptr;			/* pts to count token(i) - may be null */
dcl	1 d		auto,
	  2 n		fixed bin,
	  2 all_cnt	fixed bin,		/* number of entries with ALL */
	  2 delimiter	(256),
	    3 dtp		ptr,			/* pts to delimited token */
	    3 allsw	fixed bin;		/* 1 means ALL precedes delimiter */

dcl	(i, j, temp)	fixed bin;
dcl	delimiter_key	fixed bin static init (91);
dcl	count_key		fixed bin static init (84);
dcl	all_key		fixed bin static init (73);

dcl	dn_ptr		ptr;

dcl	cobol_unstring	entry (ptr, ptr);


/*************************************/
start:
	eos_ptr = mp.pt (mp.n);
	if end_stmt.b
	then do;
		passed_tag = cobol_$next_tag;
		cobol_$next_tag = cobol_$next_tag + 1;
		u.tag = passed_tag;
	     end;
	else u.tag = 0;

	u.stp = mp.pt (2);

	j = 3;
	if end_stmt.e > 0
	then do;					/* at least one operand after DELIMITED */
		u.dptr = addr (d);
		d.all_cnt = 0;
		d.n = end_stmt.e;
		do i = 1 to d.n;
		     dn_ptr = mp.pt (j);
		     d.allsw (i) = 0;
		     if data_name.type = 1
		     then if dn_ptr -> reserved_word.key = all_key
			then do;			/*ALL */
				d.allsw (i) = 1;
				d.all_cnt = d.all_cnt + 1;
				j = j + 1;
			     end;
		     d.dtp (i) = mp.pt (j);
		     j = j + 1;
		end;
	     end;
	else u.dptr = null ();

	u.n = end_stmt.h;
	do i = 1 to u.n;
	     u.rtp (i) = mp.pt (j);
	     temp = j + 1;
	     if mp.pt (temp) -> data_name.type = 1 & mp.pt (temp) -> reserved_word.key = delimiter_key
	     then do;
		     j = j + 2;
		     u.dtp (i) = mp.pt (j);
		end;
	     else u.dtp (i) = null ();
	     temp = j + 1;
	     if mp.pt (temp) -> data_name.type = 1 & mp.pt (temp) -> reserved_word.key = count_key
	     then do;
		     j = j + 2;
		     u.ctp (i) = mp.pt (j);
		end;
	     else u.ctp (i) = null ();
	     j = j + 1;
	end;

	if end_stmt.d = "01"b
	then u.ptp = mp.pt (j);
	else u.ptp = null ();
	if end_stmt.c = "1"b
	then u.ttp = mp.pt (mp.n - 1);
	else u.ttp = null ();

	call cobol_unstring (addr (u), mp.pt (1));
	return;


/*************************************/

/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

%include cobol_type1;
%include cobol_type9;
%include cobol_type19;
%include cobol_;
     end cobol_unstring_gen;
