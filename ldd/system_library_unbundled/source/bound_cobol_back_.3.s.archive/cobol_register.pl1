/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_register.pl1 Added Trace statements.
                                                   END HISTORY COMMENTS */


/* Modified on 10/19/84 by FCH, [4.3-1], BUG563(phx18381), new cobol_addr_tokens.incl.pl1 */
/* Modified on 09/03/83 by FCH, [4.1...], trace added */
/* Modified on 2/24/76 to cover the pl1 bit string handling */
/*	Last modified 1-21-76	by bc.	*/
/* format: style3 */
cobol_register:
     proc (reg_struc_ptr);				/* The procedure is not a valid entry point.	*/



dcl	reg_struc_ptr	ptr;			/* reg_struc_ptr is a pointer to the following structure (input) */

dcl	1 reg_struc	based (reg_struc_ptr),
	  2 what_reg	fixed bin,
	  2 reg_no	bit (4) unaligned,
	  2 filler1	bit (32) unaligned,		/* for bit string handling */
	  2 lock		fixed bin,
	  2 already_there	fixed bin,
	  2 contains	fixed bin,
	  2 pointer	ptr,
	  2 literal	bit (36);

/*
what_reg	specifies the register to be obtained.	(input)
	0 - A or Q or any index register.
	1 - A register.
	2 - Q register.
	3 - A and Q registers.
	4 - A or Q register.
	5 - any index register.
	1n - index register n.

reg_no	is the register that is assigned. (output).
	1 - A register.
	2 - Q register.
	3 - A and Q registers.
	1n - index register n.

lock	can have the following values. (input).
	0 - do not change the lock or unlock status of the register.
	1 - lock this register.
	2 - unlock all index registers and the A and Q registers.
	3 - unlock all index registers and the A and Q registers
	    and all pointer registers.
already_there	has the followoutg values. (output).
	0 - the register must be loaded.
	1 - the specified contents are already in the register
	    and it does not need to loaded.

contains	specifies the form of the contents of the register. (input).
	0 - the register will not contain a value that is meaningful
	    for register optimatization.
	    pointer and literal are not meaningful.
	1 - the register will contain a data item.
	    pointer must have a meaningful value.
	2 - the register will contain the value specified in "literal".
	3 - the register will contain a computed subscript, pointer must
	    have a meaningful value.
	4 - the register will contain a computed index,
	    pointer must have a meaningful value.
	5 - the register will contain a modified computed index,
	    pointer must have a meaningful value.

	Note:	The values 3, 4 and 5 are intended for  the use by
	    the addressibility handler and should not be of interest
	    to the most generators.

pointer	is one of the following:
	(a) - A pointer to a type 9 token. In this case "contains" is 1 (data item).
	(b) - A pointer to a structure (to be defined) for index or subscript
	    computations. In this case, "contains" is 3 (subscript), 4
	    (index) or 5 (modified index).

literal	is the literal value that will be in the register.

	*/

/*  DECLARATION OF EXTERNAL ENTRIES  */

dcl	ioa_$ioa_stream	entry options (variable);
dcl	cobol_register_util$save
			ext entry (bit (4));
dcl	cobol_register_util$restore
			ext entry (bit (4));
dcl	cobol_register_util$save_pointer
			ext entry (bit (4));
dcl	cobol_register_util$restore_pointer
			ext entry (bit (4));

dcl	signal_		entry (char (*), ptr, ptr);
dcl	1 error_message,
	  2 name		char (32) init ("cobol_register"),
	  2 length	fixed bin init (80),
	  2 message	char (80);
dcl	(i, max)		fixed bin;
dcl	temp_ptr		ptr;
dcl	zero_word		bit (36) based (temp_ptr);


/*}*/


/*{*/

load:
     entry (reg_struc_ptr);
	/***..... dcl LOCAL_NAME char (5) int static init ("$LOAD");/**/
	/***..... if Trace_Bit then call cobol_gen_driver_$Tr_Beg(MY_NAME||LOCAL_NAME);/**/

/* This entry may be used for the following function:

	(a) - Obtain a register ( A, Q or an index register) for the caller.
	(b) - If the register is locked by someone already, save its content and make it
	      available to me.
	(c) - Make the contents of the register known to the utility.
	(d) - Inform the caller if the contents are already in the register.

	NOTE:	(c) and (d) are not implemented yet.


USAGE:	declare cobol_register$load entry(ptr);

	The declaration of reg_struc is described in the main entry point.

	call cobol_register$load(reg_struc_ptr);


	NOTE: (1) The caller is assured that the register he want will be available
		to him whatever it is locked or not.
	      (2) If the register is locked already, the content will be stored into
		some location and the address of that location will be saved on the
		top of register storage stack.
	      (3) Some instruction may be emitted to save the register content.
	      (4) Always remember to call the release entry to release the
		register when it is not needed anymore.

	*/

/*}*/
dcl	bit_reg_code	bit (4);



/**************************************************/
/*	START OF EXECUTION			*/
/*	ENTRY POINT:  load			*/
/**************************************************/



	reg_struc.already_there = 0;

/*  Unlock registers, if requested.  */
	if reg_struc.lock = 2 | reg_struc.lock = 3
	then do;					/*  Unlock was requested.  */

		do i = 0 to 9;			/*  Unlock A, Q, index registers.  */
		     if reg_status.save_stack_count (i) ^= 0
		     then do;			/*  Restore the register.  */
			     call cobol_register_util$restore ((reg_bit_code (i)));
			     reg_status.r_lock (i) = 1;
			end;			/*  Restore the register.  */
		     else reg_status.r_lock (i) = 0;
		end;				/*  UNlock A, Q, and index registers.  */

		if reg_struc.lock = 3
		then do;				/*  UNlock temporary pointer registers.  */

			if ptr_status.save_stack_count (1) ^= 0
			then do;			/*  Restore PR1  */
				call cobol_register_util$restore_pointer (substr (unspec (binary (1)), 33, 4));
				ptr_status.p_lock (1) = 1;
			     end;			/*  Restore PR1  */
			else ptr_status.p_lock (1) = 0;

			if ptr_status.save_stack_count (2) ^= 0
			then do;			/*  Restore PR2  */
				call cobol_register_util$restore_pointer (substr (unspec (binary (2)), 33, 4));
				ptr_status.p_lock (2) = 1;
			     end;			/*  Restore PR2  */
			else ptr_status.p_lock (2) = 0;

			if ptr_status.save_stack_count (7) ^= 0
			then do;			/*  Restore PR 7  */
				call cobol_register_util$restore_pointer (substr (unspec (binary (7)), 33, 4));
				ptr_status.p_lock (7) = 1;
			     end;			/*  Restore PR7  */
			else ptr_status.p_lock (7) = 0;

		     end;				/*  Unlock temporary pointer registers.  */

	     end;					/*  UNlock was requested.  */

	if (reg_struc.what_reg = 0 | reg_struc.what_reg = 4 | reg_struc.what_reg = 5)
	then call pick_a_register (reg_struc.what_reg, reg_struc.lock, reg_struc.reg_no);
	else call get_specific_reg (reg_struc.what_reg, reg_struc.lock, reg_struc.reg_no);
	reg_struc.filler1 = (32)"0"b;
/**************************************************/
						/*	RETURN POINT		*/
						/*	ENTRY: load			*/
/**************************************************/

	go to crx;


get_specific_reg:
     proc (reg_code, lock_code, return_bit_code);

/*
This internal procedure gets a specific register, locks it, if
requested, and returns the four bit code that describes the register.
*/

/*  DECLARATION OF THE PARAMETERS  */

dcl	reg_code		fixed bin;
dcl	lock_code		fixed bin;
dcl	return_bit_code	bit (4);

/*  DESCRIPTION OF THE PARAMETERS  */

/*
PARAMETER		DESCRIPTION

reg_code		A fixedd binary code that indicates the register
		to get.  (input)  This code is defined in
		the following table.

		 reg_code	|  register to get
		====================================
		  1	|  A
		  2	|  Q
		  3	|  A and Q
		 |n	|  index register "n"
		====================================

lock_code		A code that indicates whether the register
		is to be locked after it is gotten.  (input)
		This code is defined as follows:

		   0 - don't lock
		   1 - lock

return_bit_code	A bit code that identifies the register
		gotten.  (output)  This code is defined in
		the following table.

		  code	|  register
		==============================
		 "0001"b	|  A
		 "0010"b	|  Q
		 "0011"b	|  A and Q
		"1nnn"b	|  index register "n"

*/
dcl	work_reg_code	fixed bin;



/**************************************************/
/*	START OF EXECUTION			*/
/*	INTERNAL PROCEDURE get_specific_reg	*/
/**************************************************/

	if reg_code = 1
	then do;					/*  A register.  */
		work_reg_code = 8;
		return_bit_code = "0001"b;
	     end;					/*  A register.  */
	else if reg_code = 2
	then do;					/*  Q register.  */
		work_reg_code = 9;
		return_bit_code = "0010"b;
	     end;					/*  Q register.  */
	else if reg_code > 9
	then do;					/*  Index register.  */
		work_reg_code = reg_code - 10;
		return_bit_code = "1"b || substr (unspec (work_reg_code), 34, 3);
	     end;					/*  Index register.  */

	else do;					/*  Must be A and Q  */
		return_bit_code = "0011"b;
		if reg_status.r_lock (8) ^= 0
		then call cobol_register_util$save ("0001"b);
		reg_status.r_lock (8) = lock_code;
		return_bit_code = "0010"b;		/*  Q  */
		work_reg_code = 9;
	     end;					/*  Must be A and Q  */

	if reg_status.r_lock (work_reg_code) ^= 0
	then do;
		call cobol_register_util$save (return_bit_code);
		reg_status.r_lock (work_reg_code) = 1;
	     end;
	else reg_status.r_lock (work_reg_code) = lock_code;

	if reg_code = 3
	then return_bit_code = "0011"b;		/*  A and Q  */


     end get_specific_reg;


pick_a_register:
     proc (reg_code, lock_code, return_bit_code);

/*
This procedure picks a register from a set of registers specified
by the input parameter reg_code, locks it if specified, and
returns a four bit code that defines the register gotten.
*/

/*  DECLARATION OF THE PARAMETERS  */

dcl	reg_code		fixed bin;
dcl	lock_code		fixed bin;
dcl	return_bit_code	bit (4);

/*  DESCRIPTION OF THE  PARAMETERS  */

/*
PARAMETER		DESCRIPTION

reg_code		A code that indicates the set of registers
		from which one is to be gotten.  (inputt)
		This code is defined in the following table:

		  code	|  register set
		===================================
		  0	|  any register (A,Q, or index)
		  4	|  A or Q
		  5	|  any index register
		=====================================

lock_code	A code that indicates whether the register gotten
		is to be locked.  (input)

		  0 - no lock
		  1 - lock the register

return_bit_code	A code that identifies the register gotten
		by this procedure.  (output)

		 return_bit_code	|  register gotten
		=========================================
		  "0001"b		|  A
		  "0010"b		|  Q
		  "1nnn"b		|  index register "n"

*/

/**************************************************/
/*	START OF EXECUTION			*/
/*	INTERNAL PROCEDURE pick_a_register	*/
/**************************************************/

dcl	found_index	fixed bin;
dcl	i		fixed bin;
dcl	work_reg_code	fixed bin int static init (4);

	if (reg_code = 0 | reg_code = 5)
	then do;					/*  Any register.  */
						/*  Pick any index register.  */

		found_index = 0;
		do i = 0 to 7 while (found_index = 0);	/*  Scan for unlocked index register.  */
		     if reg_status.r_lock (i) = 0
		     then found_index = i;
		end;				/*  Scan for unlocked index register.  */

		if found_index = 0
		then do;				/*  All index registers are locked, pick one.  */
			work_reg_code = mod ((work_reg_code + 1), 7);
			return_bit_code = "1"b || substr (unspec (work_reg_code), 34, 3);
		     end;				/*  All index registers are locked, pick one.  */
		else do;				/*  Found an unlocked index register.  */
			work_reg_code = found_index;
			return_bit_code = "1"b || substr (unspec (found_index), 34, 3);
		     end;				/*  Found an unlocked index register.  */

	     end;					/*  Any register.  */

	else do;					/*  A or Q  */

		if reg_status.r_lock (8) = 0
		then do;				/*  A is not locked, use A.  */
			work_reg_code = 8;
			return_bit_code = "0001"b;
		     end;				/*  A is not locked, use A.  */

		else if reg_status.r_lock (9) = 0
		then do;				/*  Q is not locked, use Q  */
			work_reg_code = 9;
			return_bit_code = "0010"b;
		     end;				/*  Q is not locked, use Q  */
		else do;				/*  A and Q both locked.  */
						/*  PICK A !!!  */
			work_reg_code = 8;
			return_bit_code = "0001"b;
		     end;				/*  A and Q both locked.  */

	     end;					/*  A or Q  */

	if reg_status.r_lock (work_reg_code) ^= 0
	then call cobol_register_util$save (return_bit_code);
	reg_status.r_lock (work_reg_code) = lock_code;

     end pick_a_register;


reg_bit_code:
     proc (fixed_reg_code) returns (bit (4));

/*
This internal procedure maps a fixed binary register code into
a four bit code.
*/

dcl	fixed_reg_code	fixed bin;		/*  The fixed binary register code.  */

/*
This procedure maps a fixed binary register code into a four bit
code.  The following table defines the mapping.

fixed_reg_code	| meaning	|  mapped to bit code
========================================================

  0 - 7		|x0 - x7	|  "1nnn"b
  8		  A	|  "0001"b
  9		|  Q	|  "0010"b

*/

dcl	return_bit_code	bit (4);

	if fixed_reg_code = 8
	then return_bit_code = "0001"b;		/*  A  */
	else if fixed_reg_code = 9
	then return_bit_code = "0010"b;		/*  Q  */
	else return_bit_code = "1"b || substr (unspec (fixed_reg_code), 34, 3);

	return (return_bit_code);

     end reg_bit_code;


/*{*/

release:
     entry (reg_struc_ptr);
	/***..... dcl LOCAL_NAME2 char (8) int static init ("$RELEASE");/**/
	/***..... if  Trace_Bit then call cobol_gen_driver_$Tr_Beg(MY_NAME||LOCAL_NAME2);/**/

/* This entry is used for the following function:
	(a) - Makes the register management aware that the contents of
	      the register (A, Q or index register) will be released.
	(b) - Restore the register from the top of the register saving
	      stack if there is something saved before.
	      Perform the register unlocking.
	(c) - Basically the caller is telling the utility:
	      "I plan to release the register which I have asked to get it
	       before. Please make it available to uture use again.".


	NOTE: (1) If the register stack is not empty, some instruction will be emitted
		to restore the register from the top of the stack.



USAGE:	declare cobol_register$release entry(ptr);

	The declaration of the register structure is the same as in the main entry point.
	However the meaning is  a little bit different.
what_reg	not used here.
reg_no	is the reg_no to be released. (input).
	1 - A register.
	2 - Q register.
	3 - A and Q registers.
	1n - index register n.
lock	same meaning as described in main entry point. (input).
already_there	not used.
contains	0 - the register will not contain a value that is meaningful for register optimatization.
	1 - the register will be stored into a data item. "pointer" must
	    have a meaningful value.
pointer	is a pointer to a type 9 token.
literal	not used.


	call cobol_register$release(reg_struc_ptr);

	*/


/*}*/
/**************************************************/
/*	START OF EXECUTION			*/
/*	ENTRY POINT:  release			*/
/**************************************************/


	if reg_struc.reg_no = "0001"b
	then do;					/*  Unlock A  */
		if reg_status.save_stack_count (8) ^= 0
		then do;				/*  Restore A  */
			call cobol_register_util$restore (reg_struc.reg_no);
			reg_status.r_lock (8) = 1;
		     end;				/*  Restore A  */
		else reg_status.r_lock (8) = 0;
	     end;					/*  Unlock A  */


	else if reg_struc.reg_no = "0010"b
	then do;					/*  Unlock Q  */
		if reg_status.save_stack_count (9) ^= 0
		then do;				/*  Restore Q  */
			call cobol_register_util$restore (reg_struc.reg_no);
			reg_status.r_lock (9) = 1;
		     end;				/*  Restore Q  */
		else reg_status.r_lock (9) = 0;
	     end;					/*  Unlock Q  */
	else if reg_struc.reg_no = "0011"b
	then do;					/*  Unlock A and Q  */

		if reg_status.save_stack_count (8) ^= 0
		then do;				/*  Restore A  */
			call cobol_register_util$restore ("0001"b);
			reg_status.r_lock (8) = 1;
		     end;				/*  Restore A  */
		else reg_status.r_lock (8) = 0;
		if reg_status.save_stack_count (9) ^= 0
		then do;				/*  Restore Q  */
			call cobol_register_util$restore ("0010"b);
			reg_status.r_lock (9) = 1;
		     end;				/*  Restore Q  */
		else reg_status.r_lock (9) = 0;
	     end;					/*  Unlock a and Q  */

	else do;					/*  Must be an index register.  */
		i = fixed (reg_struc.reg_no, 17, 0) - 8;
		if reg_status.save_stack_count (i) ^= 0
		then do;				/*  Restore the index.  */
			call cobol_register_util$restore (reg_struc.reg_no);
			reg_status.r_lock (i) = 1;
		     end;				/*  Restore the index.  */
		else reg_status.r_lock (i) = 0;
	     end;					/*  Must be an index register.  */



/**************************************************/
/*	RETURN POINT			*/
/*	ENTRY: release			*/
/**************************************************/
crx:	/***.....if Trace_Bit then call cobol_gen_driver_$Tr_End(MY_NAME);/**/
	return;
priority:
     entry;
	call ioa_$ioa_stream ("error_output", "cobol_register$priority not yet implemented");
	return;



	/***.....	dcl cobol_gen_driver_$Tr_Beg entry(char(*));/**/
	/***.....	dcl cobol_gen_driver_$Tr_End entry(char(*));/**/

	/***.....	dcl Trace_Bit bit(1) static external;/**/
	/***.....	dcl Trace_Lev fixed bin static external;/**/
	/***.....	dcl Trace_Line char(36) static external;/**/
	/***.....	dcl ioa_ entry options(variable); /**/
	/***..... dcl MY_NAME char (14) int static init ("COBOL_REGISTER");/**/

/*  INCLUDE FILES USED BY THIS PROCEDURE  */


/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

%include cobol_ext_;

%include cobol_fixed_common;
%include cobol_;


dcl	1 ptr_status	(0:7) based (cobol_$ptr_status_ptr) aligned,
%include cobol_ptr_status;


dcl	1 reg_status	(0:9) based (cobol_$reg_status_ptr) aligned,
%include cobol_reg_status;
     end cobol_register;
