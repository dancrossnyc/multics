/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_string.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 04/14/80 by FCH, [4.2-1], incorrect code if lit is sending field, BUG437(TR5906) */
/* Modified on 03/14/77 by Bob Chang to change the loading of registers after setting of pointer.	*/

/* format: style3 */
cobol_string:
     proc (sptr);

dcl	sptr		ptr;
dcl	1 s		based (sptr),
	  2 n		fixed bin,
	  2 tag		fixed bin,
	  2 rtp		ptr,			/* ptr to receiving item token */
	  2 ptp		ptr,			/* ptr to pointer item token (none if null) */
	  2 str		(0 refer (s.n)),
	    3 stp		ptr,			/* ptr to sending item token */
	    3 dtp		ptr;			/* ptr to delimiter item token (none if null) */

dcl	fixlen_mlr_instr	(3) bit (36) static init ("000000000001000000001000000101000000"b,
						/* mlr	(pr),(pr)		*/
			"000000000000000000000000000000000000"b,
						/* desc9a			*/
			"000000000000000000000000000000000000"b);
						/* desc9a			*/
dcl	move_instr	(3) bit (36) static init ("000000000001101001001000000101100000"b,
						/* mlr	(pr,rl),(pr,rl,x1)		*/
			"010000000000000000000000000000000101"b,
						/* desc9a	pr2|0	(sending item for A chars) */
			"001000000000000000000000000000000101"b);
						/* desc9a	pr1|0	(indexed by x1 for A chars) */
dcl	scan_instr	(3) bit (36) based (scan_instr_ptr);
dcl	scm_instr		(5) bit (36) static init ("000000000000000011001010100101100000"b,
						/* scm	(pr,rl),(du),mask(000)	*/
			"010000000000000000000000000000000101"b,
						/* desc9a	pr2|0	(len in A)	*/
			"000000000000000000000000000000000000"b,
						/* desc9a	literal	(len ignored)	*/
			"110000000000110111000000000001000000"b,
						/* arg	pr6|67	(tally)		*/
			"110000000000110111010011101001000000"b);
						/* lda	pr6|67	(tally)		*/
dcl	scd_instr		(6) bit (36) static init ("000000000000000011001010000101100000"b,
						/* scd	(pr,rl),(du),mask(000)	*/
			"010000000000000000000000000000000101"b,
						/* desc9a	pr2|0	(len in A)	*/
			"000000000000000000000000000000000000"b,
						/* desc9a	literal	(len ignored)	*/
			"110000000000110111000000000001000000"b,
						/* arg	pr6|67	(tally)		*/
			"000000000000000010110000110100000100"b,
						/* ttn	2,ic	(len already in A)	*/
			"110000000000110111010011101001000000"b);
						/* lda	pr6|67	(tally)		*/
dcl	bypass_ovfl_instr	(2) bit (36) static init ("110000000000110110010011100001000000"b,
						/* szn	pr6|66	(ovfl)		*/
			"000000000000000000110000000000000100"b);
						/* tze	[tag],ic	(bypass ovfl code)	*/
dcl	check_ovfl_instr	(5) bit (36) static init ("000000000000010010111011101000000000"b,
						/* als	22			*/
			"110000000000110001111101101001000000"b,
						/* sta	pr6|61	(atemp)		*/
			"110000000000110001000110001001000000"b,
						/* adx1	pr6|61	(atemp)		*/
			"110000000000110110010011100001000000"b,
						/* szn	pr6|66	(ovfl)		*/
			"000000000000000000110000001000000100"b);
						/* tnz	[endtag],ic		*/
dcl	adjust_length_instr (12) bit (36) static init ("110000000000110001111101101001000000"b,
						/* sta	pr6|61	(atemp)		*/
			"110000000000110100100101000001000000"b,
						/* stz	pr6|64	(x1temp)		*/
			"110000000000110100100100001001000000"b,
						/* sxl1	pr6|64	(x1temp)		*/
			"110000000000110100000111101001000000"b,
						/* ada	pr6|64	(x1temp)		*/
			"110000000000110101001001101001000000"b,
						/* cmpa	pr6|65	(rlen)		*/
			"000000000000000110110000100100000100"b,
						/* tmoz	6,ic	(not ovfl)	*/
			"110000000000110110000101100001000000"b,
						/* aos	pr6|66	(ovfl)		*/
			"110000000000110100011011101001000000"b,
						/* lca	pr6|64	(x1temp)		*/
			"110000000000110101000111101001000000"b,
						/* ada	pr6|65	(rlen)		*/
			"000000000000000000110000000000000100"b,
						/* tze	[endtag],ic  (none left)	*/
			"000000000000000010111001000000000100"b,
						/* tra	2,ic	(join)		*/
			"110000000000110001010011101001000000"b);
						/* lda	pr6|61	(atemp)		*/
dcl	scan_loop_instr	(16) bit (36) static init ("110000000000110011111010010001000000"b,
						/* lxl2	pr6|63	(dlen)		*/
			"110000000000110001100101000001000000"b,
						/* stz	pr6|61	(atemp)		*/
			"110000000000110001010011101001000000"b,
						/* lda	pr6|61	(atemp)		*/
			"110000000000110011000111101001000000"b,
						/* ada	pr6|63	(dlen)		*/
			"110000000000110010001001101001000000"b,
						/* cmpa	pr6|62	(slen)		*/
			"000000000000000011110000100100000100"b,
						/* tmoz	3,ic	(still more)	*/
			"110000000000110010010011101001000000"b,
						/* lda	pr6|62	(slen)		*/
			"000000000000001001111001000000000100"b,
						/* tra	11,ic	(no luck, exit)	*/
			"110000000000110001010011101001000000"b,
						/* lda	pr6|61	(atemp)		*/
			"000000000001100101001000110101100000"b,
						/* cmpc	(pr,rl),(pr,rl,al)		*/
			"000000000000000000000000000000001010"b,
						/* desc9a	delimiter (len in A)	*/
			"010000000000000000000000000000001010"b,
						/* desc9a	pr2|0 (len in A)		*/
			"000000000000000100110000000000000100"b,
						/* tze	4,ic	(found it)	*/
			"000000000000000001000111101000000111"b,
						/* ada	1,dl	(bump index)	*/
			"110000000000110001111101101001000000"b,
						/* sta	pr6|61	(atemp)		*/
			"111111111111110100111001000000000100"b);
						/* tra	-14,ic	(and again)	*/
dcl	adjust_and_test_x1_instr
			(8) bit (36) static init ("000000000000000001010011110000000111"b,
						/* ldq	1,du	(in case of ovfl)	*/
			"110000000000110110111101110001000000"b,
						/* stq	pr6|66	(ovfl)		*/
			"110000000000110000111010001001000000"b,
						/* lxl1	pr6|60	(ptr)		*/
			"000000000000000001001110001000000011"b,
						/* sbx1	1,du	(create offset)	*/
			"000000000000000000110000100000000100"b,
						/* tmi	[endtag],ic  ((out of range)	*/
			"110000000000110000001001101001000000"b,
						/* cmpa	pr6|60	(ptr)		*/
			"000000000000000000110000100000000100"b,
						/* tmi	[endtag],ic  (out of range)	*/
			"110000000000110110100101000001000000"b);
						/* stz	pr6|66	(ovfl)		*/
dcl	set_x1_instr	(2) bit (36) static init ("000000000000000000110010001000000000"b,
						/* eax1	0			*/
			"110000000000110110100101000001000000"b);
						/* stz	pr6|66	(ovfl)		*/
dcl	set_pointer_instr	(2) bit (36) static init ("000000000000000001000110001000000011"b,
						/* adx1	1,du			*/
			"110000000000110000100100001001000000"b);
						/* sxl1	pr6|60	(ptr)		*/
dcl	asa_instr		bit (36) static init ("110000000001010000000101101001000000"b) options (constant);
						/*-05/05/76-*/
dcl	tra_instr		bit (36) static init ("000000000000000000111001000000000100"b);

dcl	1 addr_struct	static,
	  2 type		fixed bin init (4),
	  2 operand_no	fixed bin init (2),
	  2 lock		fixed bin init (0),
	  2 op1,
	    3 tptr	ptr,
	    3 sr		fixed bin init (0),
	    3 ic_mod	fixed bin,
	    3 size_sw	fixed bin init (1),
	  2 op2,
	    3 tptr	ptr,
	    3 sr		fixed bin init (0),
	    3 ic_mod	fixed bin,
	    3 size_sw	fixed bin init (1);
dcl	1 pr_struct	static,
	  2 pr		fixed bin,
	  2 pointer_no	bit (3),
	  2 lock		fixed bin init (1),
	  2 switch	fixed bin init (0),
	  2 segno		fixed bin,
	  2 offset	fixed bin,
	  2 reset		fixed bin;
dcl	1 reg_struct	static,
	  2 what_reg	fixed bin,
	  2 reg_no	bit (4),
	  2 lock		fixed bin init (1),
	  2 already_there	fixed bin,
	  2 contains	fixed bin init (0),
	  2 pointer	ptr init (null ()),
	  2 literal	bit (36) init (""b);

dcl	ptr_off		fixed bin static init (48);
dcl	ptr_offx4		fixed bin static init (192);
dcl	atemp_off		fixed bin static init (49);
dcl	slen_off		fixed bin static init (50);
dcl	dlen_off		fixed bin static init (51);
dcl	x1temp_off	fixed bin static init (52);
dcl	rlen_off		fixed bin static init (53);
dcl	ovfl_off		fixed bin static init (54);
dcl	ovfl_offx4	fixed bin static init (216);

dcl	1 type3,
	  2 alignment	ptr,			/* so as to double word align the space */
	  2 rest		char (26);
dcl	1 stype9,
	  2 alignment	ptr,
	  2 rest		char (140);
dcl	1 rtype9,
	  2 alignment	ptr,
	  2 rest		char (140);
dcl	1 dtype9,
	  2 alignment	ptr,
	  2 rest		char (140);
dcl	type9_chars	char (148) aligned based (type9_ptr);

dcl	fixlen		(0:255) fixed bin auto;

dcl	endtag		fixed bin;
dcl	(i, j, next)	fixed bin;
dcl	ic		fixed bin;
dcl	temp		fixed bin;
dcl	(from_len, to_len)	fixed bin;
dcl	(varlen, litlen)	fixed bin;
dcl	total_fixlen	fixed bin;
dcl	rlen		fixed bin (20);
dcl	ovfl_no		fixed bin;
dcl	varlen_no		fixed bin;

dcl	fill_char		char (1);
dcl	temp_lit		char (256);

dcl	pr2set		bit (1);
dcl	lit		bit (18);
dcl	nolimit		bit (1);
dcl	two_in_one	bit (1);
dcl	move_completed	bit (1);

dcl	scan_instr_ptr	ptr;
dcl	stptr		ptr;
dcl	dtptr		ptr;
dcl	dn_ptr		ptr;
dcl	pr_struct_ptr	ptr;
dcl	type9_ptr		ptr;

dcl	cobol_addr	entry (ptr, ptr, ptr);
dcl	cobol_emit	entry (ptr, ptr, fixed bin);
dcl	cobol_get_size	entry (ptr, fixed bin, fixed bin);
dcl	cobol_set_pr	entry (ptr, ptr);
dcl	cobol_make_type9$type2_3
			entry (ptr, ptr);
dcl	cobol_make_type3$type1
			entry (ptr, ptr);
dcl	cobol_io_util$move_lit
			entry (bit (3) aligned, fixed bin, fixed bin, char (*));
dcl	cobol_io_util$move	entry (bit (3) aligned, fixed bin, fixed bin, bit (3) aligned, fixed bin, fixed bin);
dcl	cobol_io_util$t9dec_to_bin
			entry (bit (3) aligned, fixed bin, ptr);
dcl	cobol_io_util$bin_to_t9dec
			entry (bit (3) aligned, fixed bin, ptr);
dcl	cobol_reset_r$in_line
			entry;
dcl	cobol_pointer_register$priority
			entry (fixed bin, fixed bin, bit (3) aligned);
dcl	cobol_register$load entry (ptr);

dcl	cobol_make_tagref	entry (fixed bin, fixed bin, ptr);
dcl	cobol_define_tag_nc entry (fixed bin, fixed bin);


/*************************************/
start:
	endtag = cobol_$next_tag;
	cobol_$next_tag = cobol_$next_tag + 1;
	total_fixlen = 0;

	if s.rtp -> data_name.item_length = 0
	then do;					/* special case - string into unlimited stack area */
		nolimit = "1"b;
		rlen = 1048575;			/* segment size is only limiting factor */
	     end;
	else do;
		nolimit = "0"b;
		if s.rtp -> data_name.variable_length
		then rlen = 0;
		else rlen = s.rtp -> data_name.item_length;
	     end;

/* varlen_no = 1st sending field whose length can't be
						   predetermined; 0 indicates all fixed */

	if s.ptp = null () & rlen ^= 0
	then do;					/* try optimizing */

		ovfl_no, varlen_no = 0;

		do i = 1 to s.n while (varlen_no = 0 & ovfl_no = 0);

		     if s.dtp (i) ^= null ()		/*[4.2-1]*/
		     then do;
			     varlen_no = i;		/*[4.2-1]*/
			     fixlen (i) = 0;	/*[4.2-1]*/
			end;
		     else do;
			     dn_ptr = s.stp (i);

			     if data_name.type = 9
			     then do;

				     if data_name.variable_length
				     then varlen_no = i;
				     else fixlen (i) = data_name.item_length;
				end;
			     else if data_name.type = 3
			     then fixlen (i) = dn_ptr -> alphanum_lit.lit_size;
			     else if data_name.type = 2
			     then fixlen (i) = dn_ptr -> numeric_lit.places;
			     else fixlen (i) = 1;	/* fig-con */
			end;

		     if varlen_no = 0
		     then do;

			     if rlen < total_fixlen + fixlen (i)
			     then do;		/* overflow */

				     fixlen (i) = rlen - total_fixlen;
				     ovfl_no = i;
				end;
			     else do;
				     total_fixlen = total_fixlen + fixlen (i);
				     if rlen = total_fixlen
				     then if s.n > i
					then ovfl_no = i;
				end;
			end;
		end;

		if varlen_no ^= 1
		then do;				/* at least one fixed length */

			type9_ptr = addr (rtype9);
			type9_chars = s.rtp -> type9_chars;
			addr_struct.op2.tptr = type9_ptr;
			fixlen (0) = 0;

		     end;
	     end;
	else varlen_no = 1;				/* can't optimize */

	if varlen_no ^= 0
	then do;					/* at least one non-fixed length */

/* SET PR1 TO PT TO RECEIVING ITEM */
		pr_struct_ptr = addr (pr_struct);
		pr_struct.pr = 1;

		call cobol_set_pr (pr_struct_ptr, s.rtp);

		do reg_struct.what_reg = 1, 11, 12;	/* lock A, X1, and X2 */

		     call cobol_register$load (addr (reg_struct));

		end;

/* ESTABLISH SIZE OF RECEIVING ITEM */

		if ^nolimit
		then call cobol_get_size (s.rtp, rlen_off, 0);
						/* INITIALIZE X1 (indexes receiving item) */

		if s.ptp = null ()
		then do;

			if nolimit
			then ic = 1;		/* no ovfl checking will be done */
			else ic = 2;

			substr (set_x1_instr (1), 1, 18) = substr (unspec (total_fixlen), 19, 18);

			call cobol_emit (addr (set_x1_instr), null (), ic);

		     end;
		else do;

			call cobol_io_util$t9dec_to_bin ("110"b, ptr_offx4, ptp);
			call cobol_emit (addr (adjust_and_test_x1_instr), null (), 8);
			call cobol_make_tagref (endtag, cobol_$text_wd_off - 4, null ());
			call cobol_make_tagref (endtag, cobol_$text_wd_off - 2, null ());

		     end;
	     end;

	do i = 1 to s.n;				/* DETERMINE NUMBER OF CHARS TO BE MOVED AND STORE IN A */
	     dn_ptr = s.stp (i);

	     if data_name.type = 9
	     then stptr = dn_ptr;
	     else do;

		     if data_name.type = 1
		     then do;

			     dn_ptr = addr (type3);

			     call cobol_make_type3$type1 (dn_ptr, s.stp (i));

			end;

		     stptr = addr (stype9);

		     call cobol_make_type9$type2_3 (stptr, dn_ptr);

		end;

	     pr2set = "0"b;

	     if varlen_no = 0 | i < varlen_no
	     then do;				/* fixed length move */

		     type9_ptr -> data_name.offset = type9_ptr -> data_name.offset + fixlen (i - 1);
		     addr_struct.op1.tptr = stptr;
		     from_len, to_len = fixlen (i);
		     fixlen_mlr_instr (2) = unspec (from_len);
		     fill_char = "";
		     two_in_one = "0"b;

		     if i < s.n & i ^= ovfl_no
		     then do;			/* try optimizing with fill char */

			     next = i + 1;
			     dn_ptr = s.stp (next);

/*[4.2-1]*/
			     if fixlen (next) ^= 0 & data_name.type < 4
			     then do;		/* not a variable */


				     if data_name.type = 1
				     then do;

					     dn_ptr = addr (type3);

					     call cobol_make_type3$type1 (dn_ptr, s.stp (next));

					end;

				     litlen = fixlen (next);

				     if data_name.type = 3
				     then substr (temp_lit, 1, litlen) =
					     substr (dn_ptr -> alphanum_lit.string, 1, litlen);
				     else substr (temp_lit, 1, litlen) =
					     substr (dn_ptr -> numeric_lit.literal, 1, litlen);

				     fill_char = substr (temp_lit, 1, 1);
				     to_len = from_len + litlen;
				     two_in_one = "1"b;

				     do j = 2 to litlen while (two_in_one);

					if substr (temp_lit, j, 1) ^= fill_char
					then do;

						to_len = from_len;
						fill_char = "";
						two_in_one = "0"b;
					     end;
				     end;

				     if two_in_one
				     then do;	/* skip next move */
					     fixlen (next) = fixlen (i) + fixlen (next);
					     i = next;
					end;
				end;
			end;

		     fixlen_mlr_instr (3) = unspec (to_len);

		     call cobol_addr (addr (addr_struct), addr (fixlen_mlr_instr), null ());

		     move_completed = "0"b;

		     if ^two_in_one
		     then do;			/* try to optimize */

			     if substr (fixlen_mlr_instr (1), 12, 7) = "1000000"b
			     then do;

				     if s.stp (i) -> data_name.type = 3
				     then do;

					     call cobol_io_util$move_lit (substr (fixlen_mlr_instr (3), 1, 3),
						fixed (substr (fixlen_mlr_instr (3), 4, 17)),
						fixed (substr (fixlen_mlr_instr (3), 25, 12)),
						substr (s.stp (i) -> alphanum_lit.string, 1,
						s.stp (i) -> alphanum_lit.lit_size));

					     move_completed = "1"b;
					end;

				     else if substr (fixlen_mlr_instr (1), 30, 7) = "1000000"b
				     then do;

					     call cobol_io_util$move (substr (fixlen_mlr_instr (3), 1, 3),
						fixed (substr (fixlen_mlr_instr (3), 4, 17)),
						fixed (substr (fixlen_mlr_instr (3), 25, 12)),
						substr (fixlen_mlr_instr (2), 1, 3),
						fixed (substr (fixlen_mlr_instr (2), 4, 17)),
						fixed (substr (fixlen_mlr_instr (2), 25, 12)));

					     move_completed = "1"b;
					end;
				end;
			end;			/* try to optimize */

		     if ^move_completed
		     then do;

			     substr (fixlen_mlr_instr (1), 1, 9) = unspec (fill_char);

			     call cobol_emit (addr (fixlen_mlr_instr), null (), 3);

			end;

		     if i = ovfl_no
		     then return;			/* just like that */
		end;

	     else do;				/* variable length move */

		     if s.dtp (i) = null ()
		     then do;			/* no delimiter */

			     call cobol_get_size (stptr, 0, 0);

			     if nolimit
			     then if stptr -> data_name.type = 9
				then if stptr -> data_name.variable_length
				     then call cobol_emit (addr (asa_instr), null (), 1);

			end;
		     else do;

			     call cobol_get_size (stptr, slen_off, 0);

			     dn_ptr = s.dtp (i);
			     litlen, varlen = 0;

			     if data_name.type < 4
			     then do;

				     if data_name.type = 1
				     then do;

					     dn_ptr = addr (type3);

					     call cobol_make_type3$type1 (dn_ptr, s.dtp (i));

					end;

				     if data_name.type = 2
				     then do;

					     if dn_ptr -> numeric_lit.places < 3
					     then do;

						     lit = substr (unspec (dn_ptr -> numeric_lit.literal), 1,
							18);
						     litlen = dn_ptr -> numeric_lit.places;
						end;
					end;

				     else if data_name.type = 3
				     then do;


					     if dn_ptr -> alphanum_lit.lit_size < 3
					     then do;

						     lit = substr (unspec (dn_ptr -> alphanum_lit.string), 1,
							18);
						     litlen = dn_ptr -> alphanum_lit.lit_size;

						end;
					end;

				     if litlen = 0
				     then do;

					     dtptr = addr (dtype9);

					     call cobol_make_type9$type2_3 (dtptr, dn_ptr);

					end;
				end;
			     else do;		/* type9 token */

				     if ^data_name.variable_length & data_name.item_length < 3
				     then varlen = data_name.item_length;
				     dtptr = dn_ptr;

				end;

			     call cobol_pointer_register$priority (2, 0, "010"b);
						/* unlock pr2 */

			     pr_struct.pr = 2;

			     call cobol_set_pr (pr_struct_ptr, stptr);

			     pr2set = "1"b;

			     if litlen > 0 | varlen > 0
			     then do;

				     if litlen = 2 | varlen = 2
				     then do;	/* SCD */
					     scan_instr_ptr = addr (scd_instr);
					     ic = 6;
					end;
				     else do;	/* SCM */
					     scan_instr_ptr = addr (scm_instr);
					     ic = 5;
					end;

				     if varlen > 0
				     then do;	/* scan to variable */

					     addr_struct.op1.tptr = null ();
					     addr_struct.op2.tptr = dtptr;

					     call cobol_addr (addr (addr_struct), scan_instr_ptr, null ());

					end;
				     else do;	/* scan to literal */
					     substr (scan_instr (1), 12, 7) = "0000011"b;
						/* du */
					     scan_instr (3) = lit;
					end;

				     call cobol_emit (scan_instr_ptr, null (), ic);

				end;
			     else do;

				     call cobol_get_size (dtptr, dlen_off, 0);

				     addr_struct.op1.tptr = dtptr;
				     addr_struct.op1.ic_mod = 0;
				     addr_struct.op2.tptr = null ();

				     call cobol_addr (addr (addr_struct), addr (scan_loop_instr (10)), null ());

				     if addr_struct.op1.ic_mod = 1
				     then do;

					     temp = fixed (substr (scan_loop_instr (11), 1, 18), 18) - 9;
					     substr (scan_loop_instr (11), 1, 18) =
						substr (unspec (temp), 19, 18);
					end;

				     call cobol_emit (addr (scan_loop_instr), null (), 16);

				end;
			end;

/* ADJUST LENGTH IF NECESSARY AND RECORD OVERFLOW */

		     if ^nolimit
		     then do;

			     call cobol_emit (addr (adjust_length_instr), null (), 12);
			     call cobol_make_tagref (endtag, cobol_$text_wd_off - 3, null ());

			end;

/* MOVE STRING AND CHECK OVERFLOW */

		     if ^pr2set
		     then do;

			     addr_struct.op1.tptr = stptr;
			     addr_struct.op2.tptr = null ();

			     call cobol_addr (addr (addr_struct), addr (move_instr), null ());

			end;
		     else do;
			     substr (move_instr (1), 30, 7) = "1100000"b;
			     move_instr (2) = "010000000000000000000000000000000101"b;
			end;

		     call cobol_emit (addr (move_instr), null (), 3);

		     if i = s.n
		     then do;

			     if s.ptp ^= null ()
			     then call cobol_emit (addr (check_ovfl_instr), null (), 3);

			end;

		     else if nolimit
		     then call cobol_emit (addr (check_ovfl_instr), null (), 3);

		     else do;

			     call cobol_emit (addr (check_ovfl_instr), null (), 5);
			     call cobol_make_tagref (endtag, cobol_$text_wd_off - 1, null ());

			end;
		end;

	end;


	if ^nolimit
	then do;

		call cobol_define_tag_nc (endtag, cobol_$text_wd_off);


		if s.ptp ^= null ()
		then do;				/* must set pointer */

			call cobol_emit (addr (set_pointer_instr), null (), 2);
			call cobol_io_util$bin_to_t9dec ("110"b, ptr_offx4, s.ptp);

		     end;

		if s.tag > 0
		then do;

			if varlen_no = 0
			then call cobol_emit (addr (tra_instr), null (), 1);
						/* overflow impossible */

			else call cobol_emit (addr (bypass_ovfl_instr), null (), 2);

			call cobol_make_tagref (s.tag, cobol_$text_wd_off - 1, null ());

		     end;
	     end;

	call cobol_reset_r$in_line;

exit:
	return;


/*************************************/

/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

%include cobol_type1;
%include cobol_type2;
%include cobol_type3;
%include cobol_type9;
%include cobol_;
     end cobol_string;
