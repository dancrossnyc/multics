/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_perform_gen.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 06/20/80 by FCH, [4.2-1], dont call cobol_addr if in-line perform */
/* Modified on 06/20/79 by FCH, [4.0-1], in-line performs added for debug */
/* Modified since Version 4.0 */

/* format: style3 */
cobol_perform_gen:
     proc (in_token_ptr);


declare	bit_18		bit (18) based,		/* 18-bit temp used to address id_10_fb*/
	code_ptr		ptr,			/* Working pointer used to locate 	   */
						/* appropriate position in code seq.   */
	con_tag		(3) fixed bin,		/* Tags associated with first inst of  */
						/* Format 4 condition code sequences.  */
	eop_proc_no	fixed bin,		/* Procedure no of procedure at end of */
						/* perform range.		   */
	er_loc		fixed bin,		/* Location of first inst of call to   */
						/* cobol_error_.		   */
	false_tag		fixed bin,		/* Tag associated with condition false.*/
	format_no		fixed bin,		/* Format no of PERFORM statement being*/
						/* processed.			   */
	i_tag		fixed bin,		/* Tag to be associated with loc_i in  */
						/* Formats 3 and 4.		   */
	id_tok_no		(4) fixed bin,		/* Token no of Format 4 varying ids.   */
						/* id_tok_no(varying_ids) containg no  */
						/* of tokens in perform statement + 1. */
	index		fixed bin,		/* Do loop index.		   */
	init_req_flag	fixed bin,		/* Set to 1 if seg initialization not  */
						/* required; to 2, if it is.	   */
	init_tag		fixed bin,		/* Tag associated with first instruc-  */
						/* tion of code generated to initial-  */
						/* ize alterable GO's in COBOL segment */
						/* containing procedure-name-1.	   */
	integer		fixed bin,		/* If non-zero, fixed bin value of	   */
						/* integer-1.			   */
	jndex		fixed bin,		/* Do loop index.		   */
	lit_ptr		ptr,			/* Working ptr used in determining     */
						/* value of integer-1.	 	   */
	lit_str		(30) bit (9) /* Bit string array used in determin-  */ unaligned based,
						/* ing value of integer-1.	   */
	lo_lim		fixed bin,		/* From - to limits of do loop index   */
	hi_lim		fixed bin,		/* used in processing conditions.	   */
	next_stmt_tag	fixed bin,		/* Tag associated with next executable */
						/* statement following procedure at    */
						/* end of perform range.		   */
	no_inst		fixed bin,		/* No instructions to be emitted.	   */
	no_tokens		fixed bin,		/* No of tokens in statement.	   */
	p_token_ptr	ptr,			/* Pointer to area currently being used*/
						/* for building in_token structure     */
						/* passed to cobol_arithop_gen and/or     */
						/* cobol_compare_gen.		   */
	p1_token_ptr	ptr,			/* Pointers to areas reserved for      */
	p2_token_ptr	ptr,			/* building in_token structure passed  */
						/* to cobol_arithop_gen and/or 	   */
						/* to cobol_compare_gen.		   */
	s_tag		fixed bin,		/* Utility tag.		   	   */
	space_req		fixed bin,		/* Approximate space required for      */
						/* in_token structure containing input */
						/* for cobol_arithop_gen and/or	   */
						/* cobol_compare_gen.		   */
	stackoff		fixed bin,		/* Offset of wd allocated in stack.	   */
	temp		fixed bin,		/* Temporary used for calculations.    */
	pn1_no		fixed bin,		/* Procedure no of procedure at 	   */
						/* beginning of perform range.	   */
	pn1_priority	fixed bin,		/* COBOL segment no of seg containing  */
						/* procedure-name-1.		   */
	temp_chars	fixed bin (24),		/* Number of characters in COBOL data  */
						/* segment required for temporaries.   */
	type		fixed bin,		/* Token type.			   */
	varying_ids	fixed bin,		/* No of identifiers varied in Format 4*/
	wk_ptr		ptr;			/* Ptr to token of current interest.   */

dcl	temp_wk_ptr	ptr;
dcl	move_token_ptr	ptr;
dcl	dn_ptr		ptr;
dcl	keep_scanning	bit (1);			/*[4.0-1]*/
declare	(L1, L2, L3)	fixed bin,
	out_line		bit (1);


/*  Functions common to all formats			   */

/*  Determine format number of statement being processed.	   */

start:
	no_tokens = in_token.n;			/*[4.0-1]*/
	eos_ptr = in_token.token_ptr (no_tokens);	/*[4.0-1]*/
	format_no = binary (eos_ptr -> end_stmt.a, 17) + 1;

/*[4.0-1]*/
	if end_stmt.d = "00"b
	then out_line = "1"b;
	else out_line = "0"b;

/*  Is segment initialization required?			   */

	init_req_flag = 1;

/*[4.0-1]*/
	if out_line				/*[4.0-1]*/
	then do;
		if cobol_$seg_init_list_ptr ^= null ()
		then do;
			pn1_priority = binary (unspec (in_token.token_ptr (2) -> proc_ref.priority), 17);
			if cobol_$priority_no ^= pn1_priority
			then if pn1_priority > 49
			     then do index = 1 to seg_init_list.n;
				     if seg_init_list.seg.priority (index) = pn1_priority
				     then do;
					     init_req_flag = 2;
					     init_tag = seg_init_list.seg.int_tag_no (index);
					     goto next_step;
					end;

				end;

		     end;

/*[4.0-1]*/
	     end;

next_step:					/*  Extract beginning-of-perform range procedure number from   */
						/*  second token.					   */
						/*[4.0-1]*/
	L1, pn1_no = in_token.token_ptr (2) -> proc_ref.proc_num;

/*  Extract end_of_perform range procedure number from third   */
/*  token, locate this procedure number in perform_list and    */
/*  extract target_a_PN2 segno and char offset, and the tag    */
/*  associated with the "next executable statement".	   */

/*[4.0-1]*/
	L3, eop_proc_no = in_token.token_ptr (3) -> proc_ref.proc_num;

/*[4.0-1]*/
	if out_line				/*[4.0-1]*/
	then do index = 1 to perform_list.n;
		if perform_list.perf.proc_num (index) = eop_proc_no
		then do;
			if in_token.token_ptr (no_tokens) -> end_stmt.h = 1
			then if perform_list.perf.proc_num (index + 1) = eop_proc_no
			     then index = index + 1;

			target.segno = perform_list.perf.target_a_segno (index);
			target.char_offset = perform_list.perf.target_a_offset (index);
			next_stmt_tag = abs (perform_list.perf.int_tag_no (index));
			goto format (format_no);
		     end;

	     end;

/*[4.0-1]*/
	else go to format (format_no);

/*  		End of Common Functions		   */

/*  Process Format 1 PERFORM statements			   */

format (1):					/*[4.0-1]*/
	if ^out_line
	then return;

	call cobol_register$load (addr (register_request));

	if init_req_flag = 1
	then code_ptr = addr (seq2 (3));

	else code_ptr = addr (seq2i (3));

/*[4.2-1]*/
	if out_line
	then call cobol_addr (addr (target), addrel (code_ptr, 1), null ());
	call cobol_emit (code_ptr, null (), init_req_flag + 2);
	call cobol_make_tagref (pn1_no, cobol_$text_wd_off - init_req_flag, null ());

	if init_req_flag = 2
	then call cobol_make_tagref (init_tag, cobol_$text_wd_off - 1, null ());

	call cobol_reset_r$in_line;
	call cobol_register$load (addr (register_request));
						/*[4.2-1]*/
	if out_line
	then call cobol_addr (addr (target), addr (seq3 (13)), null ());
	call cobol_emit (addr (seq3 (11)), null (), 2);
	call cobol_make_tagref (next_stmt_tag, cobol_$text_wd_off - 2, null ());
	call cobol_reset_r$in_line;

	return;

/*  Process Format 2 PERFORM statements		   */

format (2):
	if in_token.token_ptr (4) -> numeric_lit.type = 2
	then do;
		integer = 0;
		lit_ptr = addr (in_token.token_ptr (4) -> numeric_lit.literal);

		do index = 1 to in_token.token_ptr (4) -> numeric_lit.places while (integer < 131072);
		     integer = integer * 10 + binary (substr (lit_ptr -> lit_str (index), 6, 4), 17);
		end;

		temp_chars = 4;
	     end;

	else temp_chars = 8;

	call cobol_alloc$cobol_data (temp_chars, 2, count.char_offset);
	call cobol_register$load (addr (register_request));

	if init_req_flag = 1
	then code_ptr = addr (seq2);

	else code_ptr = addr (seq2i);

	count.char_offset = count.char_offset * 4;

	call cobol_addr (addr (count), code_ptr, null ());/*[4.2-1]*/
	if out_line
	then call cobol_addr (addr (target), addrel (code_ptr, 2), null ());

	if temp_chars = 8
	then do;
		if (in_token.token_ptr (4) -> data_name.bin_36 | in_token.token_ptr (4) -> data_name.bin_18)
		then do;				/*  Identifier specifying number of times to PERFORM is long or short binary.  */

/*  Make a data name token for the temporary to receive the long or short binary.  */
			temp_wk_ptr = null ();
			call cobol_make_type9$long_bin (temp_wk_ptr, 2 /*cobol data */, count.char_offset + 4);

			move_token_ptr = addr (move_in_token (1));

			if move_data_init ^= cobol_$compile_count
			then do;			/*  Initialize structure used in calls to the move generator.  */

				move_token_ptr -> in_token.token_ptr (1) = null ();
				move_token_ptr -> in_token.token_ptr (4) = addr (move_eos);
				move_token_ptr -> in_token.n = 4;
				move_data_init = cobol_$compile_count;
			     end;			/*  Initialize structure used in calls to the move geerator.  */

			move_token_ptr -> in_token.token_ptr (2) = in_token.token_ptr (4);
						/*  long or short bin item  */
			move_token_ptr -> in_token.token_ptr (3) = temp_wk_ptr;
						/*  temporary in cobol data  */

			call cobol_move_gen (move_token_ptr);

/*  Emit code to set indicators from storage (the value just moved to cobol data)
			and transfer to error routine if zero or negative.  */

			szn_seq (1) = code_ptr -> bit_18;
			temp = binary (substr (szn_seq (1), 4, 15)) + 1;
						/*  address portion  */
			substr (szn_seq (1), 4, 15) = substr (unspec (temp), 22, 15);
			call cobol_emit (addr (szn_seq (1)), null (), 1);
						/*  SZN from temp  */

			call cobol_emit (addr (seq1 (7)), null (), 1);
						/*  tmoz  */

			seq3 (7) = szn_seq (1);

		     end;				/*  Identifier specifying the number of times to perform is long or short binary.  */

		else do;				/*  Identifier is unpacked or packed decimal, or overpunch sign data  */

			if (in_token.token_ptr (4) -> data_name.item_signed
			     & in_token.token_ptr (4) -> data_name.sign_separate = "0"b)
			then do;			/*  Overpunch sign data.  */

				input_struc.token_ptr = null ();
				call cobol_num_to_udts (in_token.token_ptr (4), input_struc.token_ptr);

			     end;			/*  Overpunch sign data.  */

			else input_struc.token_ptr = in_token.token_ptr (4);

			call cobol_addr (addr (input_struc), addr (seq1), null ());
			seq1 (1) = "000000000001000000"b;
			seq1 (5) = code_ptr -> bit_18;
			temp = binary (substr (seq1 (5), 4, 15), 17) + 1;
			substr (seq1 (5), 4, 15) = substr (unspec (temp), 22, 15);

			call cobol_emit (addr (seq1), null (), 4);

			seq3 (7) = seq1 (5);

		     end;				/*  Identifier is unpacked or packed decimal, or overpunch sign data.  */

		seq3 (8) = cmpq_id_10;

/*[4.0-1]*/
		if out_line			/*[4.0-1]*/
		then call cobol_make_tagref (cobol_$next_tag, cobol_$text_wd_off - 1, null ());
						/*[4.0-1]*/
		else call cobol_make_tagref (eop_proc_no, cobol_$text_wd_off - 1, null ());

	     end;

	else do;
		seq3 (7) = substr (unspec (integer), 19, 18);
		seq3 (8) = cmpq_int_1;
	     end;

/*[4.0-1]*/
	if out_line				/*[4.0-1]*/
	then do;

		call cobol_emit (code_ptr, null (), init_req_flag + 3);
		call cobol_make_tagref (pn1_no, cobol_$text_wd_off - init_req_flag, null ());

/*[4.0-1]*/
	     end;					/*[4.0-1]*/
	else do;
		L2 = cobol_$next_tag;		/*[4.0-1]*/
		cobol_$next_tag = cobol_$next_tag + 1;

/*[4.0-1]*/
		call cobol_emit (addr (seq2 (1)), null (), 1);
						/*[4.0-1]*/
		call cobol_emit (addr (seq2 (7)), null (), 1);
						/*[4.0-1]*/
		call cobol_make_tagref (L2, cobol_$text_wd_off - 1, null ());
						/*[4.0-1]*/
		call cobol_define_tag_nc (L1, cobol_$text_wd_off);
						/*[4.0-1]*/
	     end;

	if init_req_flag = 2
	then call cobol_make_tagref (init_tag, cobol_$text_wd_off - 1, null ());

	call cobol_reset_r$in_line;
	call cobol_register$load (addr (register_request));
	call cobol_addr (addr (count), addr (seq3 (1)), null ());
	seq3 (5) = seq3 (1);			/*[4.2-1]*/
	if out_line
	then call cobol_addr (addr (target), addr (seq3 (13)), null ());

/*[4.0-1]*/
	if out_line				/*[4.0-1]*/
	then do;

		call cobol_emit (addr (seq3), null (), 7);
		call cobol_make_tagref (pn1_no, cobol_$text_wd_off - 3, null ());
		call cobol_make_tagref (next_stmt_tag, cobol_$text_wd_off - 2, null ());

/*[4.0-1]*/
	     end;					/*[4.0-1]*/
	else do;
		call cobol_emit (addr (seq3), null (), 5);
		call cobol_make_tagref (L2, cobol_$text_wd_off - 1, null ());
						/*[4.0-1]*/
		call def_L2;			/*[4.0-1]*/
	     end;

	call cobol_reset_r$in_line;

	if temp_chars = 8
	then /*[4.0-1]*/
	     if out_line
	     then do;
		     call cobol_define_tag_nc (cobol_$next_tag, cobol_$text_wd_off);
		     cobol_$next_tag = cobol_$next_tag + 1;
		end;

	return;

set_false_tag:
     proc;

/*[4.0-1]*/
	if out_line				/*[4.0-1]*/
	then false_tag = pn1_no;			/*[4.0-1]*/
	else do;
		false_tag, L2 = cobol_$next_tag;	/*[4.0-1]*/
		cobol_$next_tag = cobol_$next_tag + 1;	/*[4.0-1]*/
	     end;

     end;

format (3):					/*  Set alterable GO at end of PN2.  */
	seq4 (3) = "000000000000000010"b;
	call cobol_register$load (addr (register_request));
	if init_req_flag = 1
	then do;
		code_ptr = addr (seq4 (3));

/*[4.0-1]*/
		call set_false_tag;

	     end;

	else do;
		code_ptr = addr (seq4);
		i_tag = cobol_$next_tag;
		false_tag = i_tag;
		cobol_$next_tag = cobol_$next_tag + 1;
		call cobol_alloc$cobol_data (4, 2, count.char_offset);
		count.char_offset = count.char_offset * 4;

		call cobol_addr (addr (count), code_ptr, null ());

	     end;

/*[4.2-1]*/
	if out_line
	then call cobol_addr (addr (target), addr (seq4 (5)), null ());

/*[4.0-1]*/
	if out_line				/*[4.0-1]*/
	then call cobol_emit (code_ptr, null (), init_req_flag + 1);
						/*[4.0-1]*/
	else call cobol_define_tag_nc (L1, cobol_$text_wd_off);

	call cobol_reset_r$in_line;

/*  Get space for token structure.  */

	space_req = no_tokens * 2 - 6;
	call get_token_space;

/*  Process condition-1.  */

	lo_lim = 4;
	hi_lim = no_tokens - 1;

	call process_condition;

/*  Reset alterable GO at end of PN2.  */

	call reset_f_3_4;

/*[4.0-1]*/
	if ^out_line
	then call def_L2;

	return;

def_L2:
     proc;

/*[4.0-1]*/
	call cobol_emit (addr (seq2 (7)), null (), 1);	/*[4.0-1]*/
	call cobol_make_tagref (L3, cobol_$text_wd_off - 1, null ());
						/*[4.0-1]*/
	call cobol_define_tag_nc (L2, cobol_$text_wd_off);

     end;
format (4):					/*  Get token numbers of pointers to varying identifiers and */
						/*  compute space required for token structure to be passed  */
						/*  to generators.				   */
	varying_ids = in_token.token_ptr (no_tokens) -> end_stmt.e;


	index = 1;
	jndex = 4;
	id_tok_no (index) = jndex;
	if index = varying_ids
	then keep_scanning = "0"b;
	else do;
		keep_scanning = "1"b;
		index = index + 1;
		jndex = jndex + 3;
	     end;

	do while (keep_scanning);			/*  Scan to find all varying identifiers.  */
	     if (in_token.token_ptr (jndex) -> end_stmt.type = 1
		& in_token.token_ptr (jndex) -> reserved_word.key = 72 /* AFTER */)
	     then do;				/*  Found reserved word AFTER.  */
						/*  Next token is the VARYING identifier.  */
		     id_tok_no (index) = jndex + 1;
		     if index = varying_ids
		     then keep_scanning = "0"b;
		     else do;
			     index = index + 1;
			     jndex = jndex + 3;
			end;
		end;				/*  Found reserved word AFTER.  */
	     else jndex = jndex + 1;
	end;					/*  Scan to find all varying identifiers.  */

	id_tok_no (varying_ids + 1) = no_tokens + 1;
	space_req = 0;

	do index = varying_ids to 1 by -1;
	     if (id_tok_no (index + 1) - id_tok_no (index)) * 2 - 6 > space_req
	     then space_req = (id_tok_no (index + 1) - id_tok_no (index)) * 2 - 6;

	end;

	call get_token_space;

/*  Generate call to cobol_error.			   */

	do index = 1 to varying_ids;
	     if in_token.token_ptr (id_tok_no (index) + 2) -> end_stmt.type = 9
	     then do;
		     call cobol_alloc$stack (4, 1, stackoff);
		     substr (ret_inst (1), 4, 15) = substr (unspec (stackoff), 22, 15);
		     tra_inst (3) = ret_inst (1);
		     s_tag = cobol_$next_tag;
		     cobol_$next_tag = cobol_$next_tag + 1;

		     call cobol_pointer_register$get (addr (ptr_register_request));
		     call cobol_emit (addr (tra_inst), null (), 3);
		     call cobol_make_tagref (s_tag, cobol_$text_wd_off - 1, null ());

		     er_loc = cobol_$text_wd_off;

		     call cobol_process_error (44, in_token.token_ptr (1) -> end_stmt.line, 0);
		     call cobol_emit (addr (ret_inst), null (), 1);
		     call cobol_define_tag (s_tag);

		     goto end_loop;
		end;

	end;

end_loop:						/*  Initialize varying identifiers.			   */
	p_token_ptr -> in_token.n = 4;
	p_token_ptr -> in_token.code = 0;
	p_token_ptr -> in_token.token_ptr (1) = in_token.token_ptr (1);
	p_token_ptr -> in_token.token_ptr (4) = addr (eos_token);
	eos_token.e = 1;

	do index = 1 to varying_ids;
	     call init_var_id;
	end;

/*  Get tags to be associated with first instruction of	   */
/*  condition code sequences.			   */

	do index = 1 to varying_ids;
	     con_tag (index) = cobol_$next_tag;
	     cobol_$next_tag = cobol_$next_tag + 1;
	end;

/*  Set alterable GO at end of PN2.			   */

	seq4 (3) = "000000000000000011"b;
	call cobol_register$load (addr (register_request));
	if init_req_flag = 1
	then do;
		code_ptr = addr (seq4 (3));

/*[4.0-1]*/
		call set_false_tag;

	     end;

	else do;
		code_ptr = addr (seq4);
		i_tag = cobol_$next_tag;
		false_tag = i_tag;
		cobol_$next_tag = cobol_$next_tag + 1;
		call cobol_alloc$cobol_data (4, 2, count.char_offset);
		count.char_offset = count.char_offset * 4;
		call cobol_addr (addr (count), code_ptr, null ());
	     end;

/*[4.2-1]*/
	if out_line
	then call cobol_addr (addr (target), addr (seq4 (5)), null ());

/*[4.0-1]*/
	if out_line				/*[4.0-1]*/
	then call cobol_emit (code_ptr, null (), init_req_flag + 2);
						/*[4.0-1]*/
	else call cobol_emit (addr (seq4 (7)), null (), 1);

	call cobol_make_tagref (con_tag (1), cobol_$text_wd_off - 1, null ());

/*[4.0-1]*/
	if ^out_line
	then call cobol_define_tag_nc (L1, cobol_$text_wd_off);

	call cobol_reset_r$in_line;

/*  BY identifier zero?				   */

	do index = varying_ids to 1 by -1;
	     if in_token.token_ptr (id_tok_no (index) + 2) -> end_stmt.type = 9
	     then do;
		     p_token_ptr -> in_token.n = 2;
		     p_token_ptr -> in_token.code = 0;
		     p_token_ptr -> in_token.token_ptr (1) = in_token.token_ptr (id_tok_no (index) + 2);
		     p_token_ptr -> in_token.token_ptr (2) = addr (eos_token);
		     s_tag = cobol_$next_tag;
		     eos_token.h = s_tag;
		     eos_token.verb = 13;
		     eos_token.e = 180;
		     unspec (eos_token.i) = "010000000000000000000000000000000000"b;
		     cobol_$next_tag = cobol_$next_tag + 1;

		     call cobol_compare_gen (p_token_ptr);

		     temp = stackoff + 1;
		     substr (seq6 (1), 4, 15) = substr (unspec (temp), 22, 15);
		     temp = er_loc - cobol_$text_wd_off - 1;
		     seq6 (3) = substr (unspec (temp), 19, 18);

		     call cobol_emit (addr (seq6), null (), 2);
		     call cobol_define_tag_nc (s_tag, cobol_$text_wd_off);

		end;

/*  Increment varying identifier.			   */

	     p_token_ptr -> in_token.n = 4;
	     p_token_ptr -> in_token.code = 0;
	     p_token_ptr -> in_token.token_ptr (1) = in_token.token_ptr (1);
	     p_token_ptr -> in_token.token_ptr (4) = addr (eos_token);
	     eos_token.e = 1;
	     eos_token.b = "0"b;
	     if in_token.token_ptr (id_tok_no (index)) -> end_stmt.type = 9
	     then do;
		     p_token_ptr -> in_token.token_ptr (2) = in_token.token_ptr (id_tok_no (index) + 2);
		     p_token_ptr -> in_token.token_ptr (3) = in_token.token_ptr (id_tok_no (index));
		     eos_token.a = "000"b;
		     eos_token.h = 1;
		     eos_token.verb = 2;

		     call cobol_add_gen (p_token_ptr, s_tag);

		end;

	     else do;
		     ind_ptr = in_token.token_ptr (id_tok_no (index));
		     p_token_ptr -> in_token.token_ptr (2) = ind_ptr;
		     index_name.max = index_name.max + 1;
		     p_token_ptr -> in_token.token_ptr (3) = in_token.token_ptr (id_tok_no (index) + 2);
		     eos_token.a = "001"b;
		     eos_token.verb = 31;

		     call cobol_set_gen (p_token_ptr);

		end;

/*  Process condition.				   */

	     call cobol_define_tag (con_tag (index));
	     lo_lim = id_tok_no (index) + 3;
	     hi_lim = id_tok_no (index + 1) - 2;

	     call process_condition;

/*  Set false tag for next pass and initialize varying id.   */

	     if index > 1
	     then do;
		     false_tag = con_tag (index);
		     p_token_ptr -> in_token.n = 4;
		     p_token_ptr -> in_token.code = 0;
		     p_token_ptr -> in_token.token_ptr (1) = in_token.token_ptr (1);
		     p_token_ptr -> in_token.token_ptr (4) = addr (eos_token);
		     eos_token.e = 1;

		     call init_var_id;

		end;

	end;

/*  Reset alterable GO at end of PN2.			   */

	call reset_f_3_4;

/*[4.0-1]*/
	if ^out_line
	then call def_L2;

	return;

format (7):					/*[4.0-1]*/
	call cobol_emit (addr (seq2 (7)), null (), 1);	/*[4.0-1]*/
	call cobol_make_tagref (end_stmt.e, cobol_$text_wd_off - 1, null ());
						/*[4.0-1]*/
	call cobol_define_tag_nc (end_stmt.h, cobol_$text_wd_off);

/*[4.0-1]*/
	return;

format (8):					/*[4.2-1]*/
	if out_line
	then call cobol_addr (addr (target), addr (seq8 (3)), null ());
	call cobol_emit (addr (seq8), null (), 3);
	call cobol_make_tagref (pn1_no, cobol_$text_wd_off - 1, null ());

	return;

get_token_space:
     proc;

	if binary (rel (temp_token_ptr), 17) + space_req * 2 > 262143
	then do;
signal_ovfl_error:
		call signal_ ("command_abort_", null (), addr (seg_ovfl_error));
		goto signal_ovfl_error;
	     end;

	if substr (rel (temp_token_ptr), 18, 1) = "1"b
	then temp_token_ptr = addrel (temp_token_ptr, 1);

	p1_token_ptr = temp_token_ptr;
	temp_token_ptr = addrel (temp_token_ptr, space_req);
	p2_token_ptr = temp_token_ptr;
	temp_token_ptr = addrel (temp_token_ptr, space_req);
	p_token_ptr = p1_token_ptr;

	return;

     end get_token_space;

init_var_id:
     proc;

	if in_token.token_ptr (id_tok_no (index)) -> end_stmt.type = 9
	     & in_token.token_ptr (id_tok_no (index) + 1) -> end_stmt.type ^= 10
	then do;
		p_token_ptr -> in_token.token_ptr (2) = in_token.token_ptr (id_tok_no (index) + 1);
		p_token_ptr -> in_token.token_ptr (3) = in_token.token_ptr (id_tok_no (index));
		eos_token.verb = 18;
		call cobol_move_gen (p_token_ptr);
	     end;

	else do;
		p_token_ptr -> in_token.token_ptr (2) = in_token.token_ptr (id_tok_no (index));
		p_token_ptr -> in_token.token_ptr (3) = in_token.token_ptr (id_tok_no (index) + 1);
		eos_token.verb = 31;
		eos_token.a = "000"b;
		call cobol_set_gen (p_token_ptr);
	     end;

	return;

     end init_var_id;

reset_f_3_4:
     proc;

	call cobol_register$load (addr (register_request));
	if init_req_flag = 1
	then no_inst = 2;

	else do;
		no_inst = 8;
		call cobol_addr (addr (count), addr (seq5 (7)), null ());
		seq5 (11) = seq5 (7);
	     end;

/*[4.2-1]*/
	if out_line				/*[4.2-1]*/
	then do;
		call cobol_addr (addr (target), addr (seq5 (3)), null ());
						/*[4.2-1]*/
		call cobol_emit (addr (seq5), null (), no_inst);




/*[4.2-1]*/
		call cobol_make_tagref (next_stmt_tag, cobol_$text_wd_off - no_inst, null ());
						/*[4.2-1]*/
	     end;

	if init_req_flag = 2
	then do;
		call cobol_make_tagref (pn1_no, cobol_$text_wd_off - 4, null ());
		call cobol_make_tagref (pn1_no, cobol_$text_wd_off - 2, null ());
		call cobol_make_tagref (init_tag, cobol_$text_wd_off - 1, null ());
		call cobol_define_tag_nc (i_tag, cobol_$text_wd_off - 5);
	     end;

	call cobol_pointer_register$priority (4, 4, "000"b);

	return;

     end reset_f_3_4;

process_condition:
     proc;

	p_token_ptr -> in_token.n = 0;
	p_token_ptr -> in_token.code = 0;

	do jndex = lo_lim to hi_lim;
	     wk_ptr = in_token.token_ptr (jndex);
	     type = wk_ptr -> end_stmt.type;
	     if type = 30
	     then if wk_ptr -> int_tag.perform_bit = "1"b & wk_ptr -> int_tag.true_path = "0"b
		then do;
			equate_tag.equated_tag = wk_ptr -> int_tag.proc_num;
			equate_tag.true_tag = false_tag;
			call cobol_equate_tag (addr (equate_tag));
		     end;

		else call cobol_define_tag_nc (binary (wk_ptr -> int_tag.proc_num, 17), cobol_$text_wd_off);

	     else do;
		     p_token_ptr -> in_token.n = p_token_ptr -> in_token.n + 1;
		     p_token_ptr -> in_token.token_ptr (p_token_ptr -> in_token.n) = wk_ptr;
		     if type = 19
		     then do;
			     if wk_ptr -> end_stmt.verb = 13
			     then call cobol_compare_gen (p_token_ptr);

			     else call cobol_arithop_gen (p_token_ptr);

			     if p_token_ptr -> in_token.code > 0
			     then p_token_ptr -> in_token.n = p_token_ptr -> in_token.code;

			     else do;
				     if p_token_ptr -> in_token.code = -1
				     then if p_token_ptr -> in_token.code = -1
					then if p_token_ptr = p1_token_ptr
					     then p_token_ptr = p2_token_ptr;

					     else p_token_ptr = p1_token_ptr;

				     p_token_ptr -> in_token.n = 0;
				end;

			     p_token_ptr -> in_token.code = 0;
			end;

		end;

	end;

	return;

     end process_condition;

%include cobol_perform_gen_info;
%include cobol_perform_gen_data;

     end cobol_perform_gen;
