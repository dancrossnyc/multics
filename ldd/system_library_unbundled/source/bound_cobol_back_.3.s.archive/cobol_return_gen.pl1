/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_return_gen.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 11/20/76 by Bob Chang to handle same_sort_merge  flag.	*/
/* Modified on 11/12/76 by Bob Chang to interface with merge_gen. */
/* Modified since Version 2.0	*/
/* format: style3 */
cobol_return_gen:
     proc (in_token_ptr, passed_tag);

/*
This procedure cobol_return generates the code necessary to
implement the COBOL RETURN statement. This format of the RETURN
staatement is as follows:

R_E_T_U_R_N_ file-name RECORD  [I_N_T_O_ identifier ];
		     AT E_N_D_ imperative-statement

The execution of the RETURN statement causes the next record,
in the order specified by the keys listed in the SORT statement,
to be made available for processing in the record areas
associated with the sort file.

If the INTO phrase is specified, the current record is moved
from the input area to the area specified by identifier according
to the rules for MOVE statement without the CORRESPONDING
phrase. The implied MOVE does not occur if there is an AT END
condition. Any subscripting or indexing associated with
identifier is evaluated after the record has been returned and
immediately before it is moved to the data item.

When the INTO phrase is used, the data is available in both
the input record area and the data area associated with identifier.

If no next logical record exist for the file at the time of the
execution of a RETURN statement, the AT END condition occurs. The
contents of the record area associated with the file when the
AT END condition occurs are undefined. After the execution
of the imperative-statement in the AT END phrase, no RETURN
statement may be executed as part of the current output
procedure.

NOTE:
The contents of any data items which lie beyound the range of the
current data record are undefined at the completion of the
execution of the RETURN statement.
*/

/*  Code and relocation sequences.		*/

dcl	1 read_in_token	static,
	  2 n		fixed bin init (4),
	  2 code		fixed bin init (0),
	  2 pt1		ptr,
	  2 pt2		ptr,
	  2 pt3		ptr,
	  2 pt4		ptr;
dcl	1 mlr_struct	static,
	  2 type		fixed bin init (4),
	  2 operand_no	fixed bin init (2),
	  2 lock		fixed bin init (0),
	  2 operand1,
	    3 token_ptr	ptr init (null ()),
	    3 sr		fixed bin init (0),
	    3 icmod	fixed bin init (0),
	    3 size_sw	fixed bin init (0),
	  2 operand2,
	    3 token_ptr	ptr,
	    3 sr		fixed bin init (1),
	    3 icmod	fixed bin,
	    3 size_sw	fixed bin init (0);

dcl	mlr_reg_to_reg	bit (36) init ("000100000001010000001000000101000000"b);

dcl	instr		(3) bit (36) unaligned static
			init ("000000000000000000000000000000000000"b, "000000000000000000000000000000000000"b,
			"000000000000000000000000000000000000"b);
dcl	rel_instr		(6) bit (5) aligned static
			init ("00000"b, "00000"b, "00000"b, "00000"b, "00000"b, "00000"b);

dcl	inst_seq1		(6) bit (18) static init ("110000000001001100"b, "010011101001000000"b,
						/* lda  pr6|76	*/
			"000000000000000000"b, "110000000000000100"b,
						/* tze	0,ic	*/
			"110000000001001010"b, "011101010001010000"b);
						/* epp2	pr6|74,*	*/
dcl	tra_inst		(2) bit (18) static init ("000000000000000000"b, "111001000000000100"b);
						/* tra	0,ic	*/

dcl	merge_check_inst	(4) bit (18) static init ("100000000000101001"b, "010011101001000000"b,
						/* lda	pr4|sort_merge_sw	*/
			"000000000000000000"b, "110000000000000100"b);
						/* tze	sort_tag	*/
dcl	rel_merge_check	(4) bit (5) aligned static init ("11001"b, "00000"b, "00000"b, "00000"b);

dcl	temp_type12	char (60) static,
	temp_file_ptr	ptr static,
	temp_type12_ptr	ptr static,
	temp_type9_ptr	ptr static;
dcl	1 temp_type9	static,
	  2 header	(4) fixed bin init (112, 0, 0, 9),
	  2 repl_ptr	(2) ptr init ((2) null ()),
	  2 fill1		bit (108) init (""b),
	  2 file_key_info,
	    3 fb1		(3) fixed bin init (0, 0, 0),
	    3 size	fixed bin init (0),
	    3 fb2		(2) fixed bin init (0, 0),
	    3 flags1	bit (36) init ("000000100100000000010000000100000000"b),
	    3 flags2	bit (36) init (""b),
	    3 seg		fixed bin init (0),
	    3 off		fixed bin,
	  2 fill2		(7) fixed bin init (0, 0, 0, 0, 0, 0, 0);
dcl	1 type19_read_into	static,
	  2 header	(4) fixed bin init (38, 0, 0, 19),
	  2 verb		fixed bin init (0),
	  2 e		fixed bin init (0),
	  2 h		fixed bin init (0),
	  2 ij		(2) fixed bin init (0, 0),
	  2 abcdfgk	bit (16) init ("0011000000000000"b);
dcl	1 mpout		static,
	  2 n		fixed bin init (4),
	  2 pt1		ptr,
	  2 pt2		ptr,
	  2 pt3		ptr,
	  2 pt4		ptr;
dcl	file_key_desc	char (40) based;
dcl	fkey_ptr		ptr;
dcl	eos_buff		(5) ptr;

dcl	1 fkey_type9	static,
	  2 header	(4) fixed bin init (112, 0, 0, 9),
	  2 repl_ptr	(2) ptr init ((2) null ()),
	  2 fill1		bit (108) init (""b),
	  2 file_key_info,
	    3 fb1		(3) fixed bin init (0, 0, 0),
	    3 size	fixed bin init (0),
	    3 fb2		(2) fixed bin init (0, 0),
	    3 flags1	bit (36) init (""b),
	    3 flags2	bit (36) init (""b),
	    3 seg		fixed bin,
	    3 off		fixed bin,
	  2 fill2		(7) fixed bin init (0, 0, 0, 0, 0, 0, 0);
dcl	1 alpha_type9	static,
	  2 header	(4) fixed bin init (112, 0, 0, 9),
	  2 repl_ptr	(2) ptr init ((2) null ()),
	  2 fill1		bit (108) init (""b),
	  2 file_key_info,
	    3 fb1		(3) fixed bin init (0, 0, 0),
	    3 size	fixed bin init (0),
	    3 fb2		(2) fixed bin init (0, 0),
	    3 flags1	bit (36) init ("000000100100000000010000000100000000"b),
	    3 flags2	bit (36) init (""b),
	    3 seg		fixed bin init (0),
	    3 off		fixed bin,
	  2 fill2		(7) fixed bin init (0, 0, 0, 0, 0, 0, 0);
dcl	1 num_type9	static,
	  2 header	(4) fixed bin init (112, 0, 0, 9),
	  2 repl_ptr	(2) ptr init ((2) null ()),
	  2 fill1		bit (108) init (""b),
	  2 file_key_info,
	    3 fb1		(3) fixed bin init (0, 0, 0),
	    3 size	fixed bin init (0),
	    3 places_left	fixed bin,
	    3 places_right	fixed bin init (0),
	    3 flags1	bit (36) init ("000000100100000001000000000100000000"b),
	    3 flags2	bit (36) init (""b),
	    3 seg		fixed bin init (0),
	    3 off		fixed bin,
	  2 fill2		(7) fixed bin init (0, 0, 0, 0, 0, 0, 0);
						/*
Automatic data		*/

dcl	retry_tag		fixed bin,
	sort_tag		fixed bin,
	exit_tag		fixed bin,
	dn_ptr		ptr,			/* pointer to type 9 token	*/
	ft_ptr		ptr,			/* pointer to the file table 	*/
	name_ptr		ptr,			/* pointer to type12 token */
	linkoff		fixed bin,		/* word offset of entry point link */
	passed_tag	fixed bin,
	def_tag		fixed bin,
	hold_addr		bit (18) based,
	return_error_code	fixed bin static init (53),
	merge_bit		bit (1) static init ("0"b),
	stackoff		fixed bin static init (0);	/* word offset in stack	*/

/*
Procedures Called		*/

dcl	cobol_read_rand	entry (fixed bin, char (5), ptr),
	cobol_read_gen	entry (ptr, fixed bin),
	cobol_io_util$bin_to_dec
			entry (bit (3) aligned, fixed bin, fixed bin, bit (3) aligned, fixed bin, fixed bin),
	cobol_move_gen	entry (ptr),
	cobol_addr	entry (ptr, ptr, ptr),
	cobol_call_op	entry (fixed bin, fixed bin),
	cobol_define_tag	entry (fixed bin),
	cobol_merge_return_gen
			entry (ptr, fixed bin),
	cobol_reg_manager$after_op
			entry (fixed bin),
	cobol_read_ft	entry (fixed bin, ptr),
	cobol_make_tagref	entry (fixed bin, fixed bin, ptr),
	cobol_make_merge_file
			entry (ptr, ptr, ptr, ptr),
	cobol_emit	entry (ptr, ptr, fixed bin);
start:
	eos_ptr = in_token.token_ptr (in_token.n);
	if end_stmt.f = "01"b | end_stmt.f = "00"b
	then do;
		passed_tag = cobol_$next_tag;
		cobol_$next_tag = cobol_$next_tag + 1;
		call sort;
		return;
	     end;
	else if end_stmt.f = "10"b
	then do;
		call merge;
		return;
	     end;
	else do;
		sort_tag = cobol_$next_tag;
		exit_tag = cobol_$next_tag + 1;
		cobol_$next_tag = cobol_$next_tag + 2;
		call cobol_emit (addr (merge_check_inst), addr (rel_merge_check), 2);
		call cobol_make_tagref (sort_tag, cobol_$text_wd_off - 1, null ());
		call merge;
		call cobol_emit (addr (tra_inst), null (), 1);
		call cobol_make_tagref (exit_tag, cobol_$text_wd_off - 1, null ());
		call cobol_define_tag (sort_tag);
		call sort;
		call cobol_define_tag (exit_tag);
		return;
	     end;

/*	BEGIN	sort	*/
sort:
     proc;

	retry_tag = cobol_$next_tag;
	call cobol_define_tag (retry_tag);
	cobol_$next_tag = cobol_$next_tag + 1;
	eos_ptr = addr (eos_buff);
	name_ptr = in_token.token_ptr (2);
	def_tag = cobol_$next_tag;
	cobol_$next_tag = cobol_$next_tag + 1;
	call cobol_call_op (13, retry_tag);
	call cobol_reg_manager$after_op (13);


	call cobol_read_ft (fd_token.file_no, ft_ptr);

/* Added to fix the bug for variable length item. 	*/
	if file_table.rec_do
	then do;
		call cobol_io_util$bin_to_dec ("110"b, 328, 12, "110"b, 304, 4);
		call cobol_read_rand (1, file_table.rec_do_info, fkey_ptr);
		addr (fkey_type9.file_key_info) -> file_key_desc = file_key.desc;
		mpout.pt1 = null ();
		mpout.pt2 = addr (num_type9);
		num_type9.size = 12;
		num_type9.places_left = 12;
		num_type9.seg = 1000;
		num_type9.off = 328;
		mpout.pt3 = addr (fkey_type9);
		mpout.pt4 = eos_ptr;
		end_stmt.e = 1;
		call cobol_move_gen (addr (mpout));
	     end;

	call cobol_emit (addr (inst_seq1 (1)), null (), 3);
	call cobol_make_tagref (def_tag, cobol_$text_wd_off - 2, null ());


	alpha_type9.size = file_table.max_cra_size;
	alpha_type9.seg = file_table.cra_seg;
	alpha_type9.off = file_table.cra_offset;
	dn_ptr = addr (alpha_type9);


	instr (1) = mlr_reg_to_reg;
	instr (2) = "010000000000000000000000"b || substr (unspec (file_table.max_cra_size), 25, 12);
	instr (3) = ""b;

	mlr_struct.operand2.token_ptr = dn_ptr;

	call cobol_addr (addr (mlr_struct), addr (instr (1)), null ());

	call cobol_emit (addr (instr (1)), null (), 3);
	if in_token.n >= 4
	then do;
		mlr_struct.operand2.token_ptr = in_token.token_ptr (3);
		in_token.token_ptr (3) -> data_name.numeric = "0"b;
		in_token.token_ptr (3) -> data_name.alphanum = "1"b;
		instr (1) = mlr_reg_to_reg;
		instr (2) = "010000000000000000000000"b || substr (unspec (file_table.max_cra_size), 25, 12);
		instr (3) = ""b;
		call cobol_addr (addr (mlr_struct), addr (instr (1)), null ());
		substr (instr (1), 1, 9) = "000100000"b;
		call cobol_emit (addr (instr (1)), null (), 3);
	     end;

	call cobol_emit (addr (tra_inst (1)), null (), 1);

/* AT END processing		*/

	call cobol_make_tagref (passed_tag, cobol_$text_wd_off - 1, null ());

	call cobol_define_tag (def_tag);


	return;
     end sort;					/*	END	sort	*/

/*	BEGIN	merge	*/
merge:
     proc;
	call cobol_make_merge_file (in_token.token_ptr (2), temp_file_ptr, temp_type12_ptr, temp_type9_ptr);
	read_in_token.pt2 = temp_type12_ptr;
	read_in_token.pt3 = in_token.token_ptr (3);
	if in_token.n = 4
	then do;
		read_in_token.n = 4;
		read_in_token.pt4 = addr (type19_read_into);
	     end;
	else read_in_token.n = 3;
	call cobol_read_gen (addr (read_in_token), passed_tag);
	return;

     end merge;					/*	END merge	*/





/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

%include cobol_in_token;
%include cobol_file_key;
%include cobol_;
%include cobol_file_table;
%include cobol_type1;
%include cobol_type9;
%include cobol_type12;
%include cobol_type19;

     end cobol_return_gen;
