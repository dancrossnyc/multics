/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_send_gen.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 10/02/77 by Bob Chang to fix the bug for mcs_ocdp. */
/* Modified on 05/05/77 by Bob Chang to fix the bug for mnemonic name hof.	*/
/* Modified on 04/12/77 by Bob Chang to fix the bug for end_indicator.	*/
/* Modified on 03/24/77 by Bob Chang to implement communication send verb.	*/
/* Created as a stub on 11/18/76 by ORN */

/* format: style3 */
cobol_send_gen:
     proc (in_token_ptr);

/* Declaration for static data.	*/
dcl	1 pr_struc	static,
	  2 what_ptr	fixed bin init (2),
	  2 pointer_no	bit (3),
	  2 lock		fixed bin init (0),
	  2 switch	fixed bin init (0);

dcl	1 alpha_type9	static,
	  2 header	(4) fixed bin init (112, 0, 0, 9),
	  2 repl_ptr	(2) ptr init ((2) null ()),
	  2 fill1		bit (108) init (""b),
	  2 file_key_info,
	    3 fb1		(3) fixed bin init (0, 0, 0),
	    3 size	fixed bin init (0),
	    3 fb2		(2) fixed bin init (0, 0),
	    3 flags1	bit (36) init ("000000100100000000010000000100000000"b),
	    3 flags2	bit (36) init (""b),
	    3 seg		fixed bin init (0),
	    3 off		fixed bin,
	  2 fill2		(7) fixed bin init (0, 0, 0, 0, 0, 0, 0);

dcl	1 type19_move	static,
	  2 header	(4) fixed bin init (38, 0, 0, 19),
	  2 verb		fixed bin init (0),
	  2 e		fixed bin init (1),
	  2 h		fixed bin init (0),
	  2 ij		(2) fixed bin init (0, 0),
	  2 abcdfgk	bit (16) init ("0000000000000000"b);
dcl	1 mpout		static,
	  2 n		fixed bin init (4),
	  2 pt1		ptr,
	  2 pt2		ptr,
	  2 pt3		ptr,
	  2 pt4		ptr;
dcl	1 fb17_type9	static,
	  2 header	(4) fixed bin init (112, 0, 0, 9),
	  2 repl_ptr	(2) ptr init ((2) null ()),
	  2 fill1		bit (108) init (""b),
	  2 file_key_info,
	    3 fb1		(3) fixed bin init (0, 0, 0),
	    3 size	fixed bin init (2),
	    3 places_left	fixed bin init (4),
	    3 places_right	fixed bin init (0),
	    3 flags1	bit (36) init ("000000100100010001000000000000000000"b),
	    3 flags2	bit (36) init (""b),
	    3 seg		fixed bin init (0),
	    3 off		fixed bin,
	  2 fill2		(7) fixed bin init (0, 0, 0, 0, 0, 0, 0);

dcl	inst_seq		(20) bit (18) unaligned static init ("110000000000000000"b, "010101010001000000"b,
						/* spri2	pr6|offset	*/
			"000000000000000000"b, "010011101000000111"b,
						/* lda	0,dl		*/
			"110000000000000000"b, "111101101001000000"b,
						/* sta	pr6|offset	*/
			"110000000000000000"b, "100101000001000000"b,
						/* stz	pr6|offset	*/
			"110000000000000000"b, "010011100001000000"b,
						/* szn	pr6|offset	*/
			"000000000000000000"b, "110000000000000100"b,
						/* tze	0,ic		*/
			"000000000000000000"b, "010011101000000100"b,
						/* lda	0,ic		*/
			"000000000000000000"b, "010011111001000000"b,
						/* ldaq	pr0|offset	*/
			"000000000000000000"b, "010011101000000011"b,
						/* lda	0,du		*/
			"110000000000000000"b, "111101111001000000"b);
						/* staq	pr6|offset	*/

dcl	inst_buff		bit (36),
	inst_char		char (4) based (addr (inst_buff));
dcl	btd		(6) bit (18) static init ("000000000001000000"b, "011000001101000000"b,
						/* btd		*/
			"110000000000000000"b, "000000000000000100"b, "110000000000000000"b, "000011000000000100"b);


/*	Automatic data	*/
dcl	null_ptr		ptr static init (null),
	null_ptr_char	char (8) based (addr (null_ptr)),
	conoff		fixed bin,
	temp_char		char (4),
	temp_char1	char (1),
	temp_bit1		bit (9) based (addr (temp_char1)),
	con_flag		fixed bin,
	stoff		fixed bin,
	dn_ptr		ptr,
	name_ptr		ptr,
	in_op		fixed bin,
	char_conv		char (9),
	dec_conv		fixed dec (6),
	temp		fixed bin;

/* External procedure	*/
dcl	cobol_call_op	entry (fixed bin, fixed bin),
	cobol_reg_manager$after_op
			entry (fixed bin, fixed bin),
	cobol_move_gen	entry (ptr),
	cobol_pool	entry (char (*), fixed bin, fixed bin),
	cobol_pool$search_op
			entry (char (*), fixed bin, fixed bin, fixed bin),
	cobol_pointer_register$priority
			entry (fixed bin, fixed bin, bit (3)),
	cobol_emit	entry (ptr, ptr, fixed bin),
	cobol_define_tag	entry (fixed bin),
	cobol_make_tagref	entry (fixed bin, fixed bin, ptr),
	cobol_set_pr	entry (ptr, ptr),
	cobol_get_size	entry (ptr, fixed bin, fixed bin);

start:
	mpout.pt1 = in_token.token_ptr (1);
	mpout.pt4 = addr (type19_move);
	eos_ptr = in_token.token_ptr (in_token.n);

/* Generate epp2 instruction for communication token.	*/
	cdtoken_ptr = in_token.token_ptr (2);
	alpha_type9.seg = cdtoken.cd_seg;
	alpha_type9.off = cdtoken.cd_off - 20;
	call cobol_set_pr (addr (pr_struc), addr (alpha_type9));

/* Allocate 12 words in stack frame for parameters	*/
	stoff = 74;				/* Communication stack frame  from pr6|74	*/

/* Store cd_token address.	*/
	substr (inst_seq (1), 4, 15) = substr (unspec (stoff), 22, 15);
	call cobol_emit (addr (inst_seq (1)), null, 1);

/* Set up parameter for message type.	*/
	temp = stoff + 4;
	if end_stmt.a = "000"b | end_stmt.b
	then do;					/* Generate epp2 instruction for receiving data item.	     */
		dn_ptr = in_token.token_ptr (3);
		call cobol_set_pr (addr (pr_struc), dn_ptr);
						/* Store into stack frame.	     */
		temp = stoff + 2;
		substr (inst_seq (1), 4, 15) = substr (unspec (temp), 22, 15);
		call cobol_emit (addr (inst_seq (1)), null, 1);
		if ^data_name.variable_length
		then do;
			dec_conv = dec (data_name.item_length);
			char_conv = char (dec_conv);
			temp_char = substr (char_conv, 6, 4);
			con_flag = 1;
		     end;
		else do;
			temp = stoff + 16;
			call cobol_get_size (dn_ptr, temp, 0);
						/* Generate btd instruction	*/
			substr (btd (3), 4, 15) = substr (unspec (temp), 22, 15);
			temp = stoff + 4;
			substr (btd (5), 4, 15) = substr (unspec (temp), 22, 15);
			call cobol_emit (addr (btd), null, 3);
			con_flag = 0;
		     end;
	     end;
	else do;
		call cobol_pool$search_op (null_ptr_char, 2, conoff, in_op);
		substr (inst_seq (15), 4, 15) = substr (unspec (conoff), 22, 15);
		call cobol_emit (addr (inst_seq (15)), null, 1);
						/* Store into stack frame.	     */
		temp = stoff + 2;
		substr (inst_seq (19), 4, 15) = substr (unspec (temp), 22, 15);
		call cobol_emit (addr (inst_seq (19)), null, 1);
		temp_char = "9999";
		con_flag = 1;
	     end;
	if con_flag = 1
	then do;
		call cobol_pool (temp_char, 1, conoff);
		temp = -cobol_$text_wd_off - conoff;
		inst_seq (13) = substr (unspec (temp), 19, 18);
		temp = stoff + 4;
		substr (inst_seq (5), 4, 15) = substr (unspec (temp), 22, 15);
		call cobol_emit (addr (inst_seq (13)), null, 1);
		call cobol_emit (addr (inst_seq (5)), null, 1);
	     end;

	if end_stmt.a = "000"b
	then do;
		temp = stoff + 5;
		substr (inst_seq (7), 4, 15) = substr (unspec (temp), 22, 15);
		call cobol_emit (addr (inst_seq (7)), null, 1);
		temp = stoff + 6;
		substr (inst_seq (7), 4, 15) = substr (unspec (temp), 22, 15);
		call cobol_emit (addr (inst_seq (7)), null, 1);
	     end;
	else do;
		if end_stmt.d = "00"b
		then do;
			if end_stmt.b
			then mpout.pt2 = in_token.token_ptr (4);
			else mpout.pt2 = in_token.token_ptr (3);
			mpout.pt3 = addr (alpha_type9);
			alpha_type9.size = 1;
			alpha_type9.seg = 1000;
			alpha_type9.off = (stoff + 5) * 4;
			call cobol_move_gen (addr (mpout));
		     end;
		else do;
			dec_conv = dec (fixed (end_stmt.d));
			char_conv = char (dec_conv);
			temp_char1 = substr (char_conv, 9, 1);
			substr (inst_seq (17), 1, 9) = temp_bit1;
			call cobol_emit (addr (inst_seq (17)), null, 1);
			temp = stoff + 5;
			substr (inst_seq (5), 4, 15) = substr (unspec (temp), 22, 15);
			call cobol_emit (addr (inst_seq (5)), null, 1);
		     end;
		if end_stmt.f = "00"b
		then do;				/* no linage	*/
			temp = stoff + 6;
			substr (inst_seq (7), 4, 15) = substr (unspec (temp), 22, 15);
			call cobol_emit (addr (inst_seq (7)), null, 1);
		     end;
		else do;
			dn_ptr = in_token.token_ptr (in_token.n - 1);
			if data_name.type = 9
			then do;			/* line count in identifier	*/
				mpout.pt2 = dn_ptr;
				mpout.pt3 = addr (fb17_type9);
				fb17_type9.seg = 1000;
				fb17_type9.off = (stoff + 6) * 4 + 2;
				call cobol_move_gen (addr (mpout));
			     end;
			if end_stmt.f = "01"b
			then substr (inst_buff, 1, 9) = "000000001"b;
			else substr (inst_buff, 1, 9) = "000000010"b;
			if data_name.type = 9
			then do;			/* ldx2	type of line control	*/
				substr (inst_buff, 19, 18) = "010010010000000011"b;
				substr (inst_buff, 10, 9) = "000000001"b;
				call cobol_emit (addr (inst_buff), null, 1);
						/* stx2 pr6|stoff+6	*/
				temp = stoff + 6;
				substr (inst_buff, 1, 3) = "110"b;
				substr (inst_buff, 4, 15) = substr (unspec (temp), 22, 15);
				substr (inst_buff, 19, 18) = "111100010001000000"b;
				call cobol_emit (addr (inst_buff), null, 1);
			     end;
			else do;
				if data_name.type = 2
				then do;		/* advancing integer lines.	*/
					substr (inst_buff, 10, 9) = "000000001"b;
					temp =
					     fixed (
					     substr (dn_ptr -> numeric_lit.literal, 1,
					     dn_ptr -> numeric_lit.places_left));
					substr (inst_buff, 19, 18) = substr (unspec (temp), 19, 18);
				     end;
				else if data_name.type = 1 & dn_ptr -> reserved_word.key = reswd_PAGE
				then /* advancing page.	*/
				     substr (inst_buff, 10, 27) = "000000010000000000000000001"b;
				else if data_name.type = 17
				then do;
					if dn_ptr -> mnemonic_name.iw_key < 227
					     & dn_ptr -> mnemonic_name.iw_key > 210
					then do;	/* slew, channel number mnemonic name.	*/
						substr (inst_buff, 10, 9) = "000000011"b;
						temp = dn_ptr -> mnemonic_name.iw_key - 210;
						substr (inst_buff, 19, 18) = substr (unspec (temp), 19, 18);
					     end;
					else substr (inst_buff, 10, 27) = "000000010000000000000000001"b;
				     end;
				call cobol_pool (inst_char, 1, conoff);
				temp = -cobol_$text_wd_off - conoff;
				inst_seq (13) = substr (unspec (temp), 19, 18);
				temp = stoff + 6;
				substr (inst_seq (5), 4, 15) = substr (unspec (temp), 22, 15);
				call cobol_emit (addr (inst_seq (13)), null, 1);
				call cobol_emit (addr (inst_seq (5)), null, 1);
			     end;
		     end;
	     end;

/* Call cobol_operators_	*/
	call cobol_call_op (73, 0);

	call cobol_reg_manager$after_op (73, 0);


exit:
	return;

/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, char, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/


%include cobol_in_token;
%include cobol_;
%include cobol_type19;
%include cobol_type9;
%include cobol_type13;
%include cobol_type1;
%include cobol_reswd_values;
%include cobol_type2;
%include cobol_type17;
     end cobol_send_gen;
