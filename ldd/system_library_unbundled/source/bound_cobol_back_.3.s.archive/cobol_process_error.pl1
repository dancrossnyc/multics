/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_process_error.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 5/18/76 by Bob Chang to fix the aos instruction.	*/
/* Modified on 05/05/76 by Bob Chang to interface with cobol_reg_manager. */
/* Modified on 4/24/76 by Bob Chang to interface with cobol_rts_. */
/* Modified on 4/19/76 by Bob Chang to interface with cobol operator. */
/* Modified on 4/2/76 by Bob Chang to interface with cobol operator. */
/*{*/
/* format: style3 */
cobol_process_error:
     proc (cobol_error_code, line_no, error_code_relp);

/* This sub-generator produces code to generate an
object time error message via the run-time support routine
cobol_error_. */

dcl	cobol_error_code	fixed bin;
dcl	line_no		fixed bin;
dcl	error_code_relp	fixed bin;

/*
     cobol_error_code  a fixed bin number indicating the "COBOL
               error number" (see below).  If 0, then there is no
               associated COBOL error number and no COBOL message
               is printed.

This program will set up a call to a run-time error
routine cobol_error_.  Run-time support routines encountering
errors will also call cobol_error_.  Thus all error messages will
be funnelled through one run-time routine.

The interface is as follows:

  call cobol_error_ (cobol_code,multics_code,line_no1,
                                   line_no2,progname,error_ptr);

     cobol_code  corresponds to cobol_error_code described above.

     multics_code  a fixed bin corresponding to the location
               identified by sp|error_code_relp described above.

     line_no1  a fixed bin containing the line number on
               which the error occurred.  This is derived from
               the internal line number given in line_no
               described above.  If it is 0, no line number is
               applicable to this error and no such indication
               will be given in the error message.

     line_no2  a fixed bin containing the additional line
               number.  This is derived from the internal line
               number line_no described above.  If it is 0, then
               only a one-part line number is given.

     progname  a varying char field containing the name of the
               program which produced the error.  The
               cobol_process_error sub-generator will always set it
               to the name of the program for which code is being
               generated.  Run-time support routines may identify
               the program which called them or themselves,
               depending on the error.

     error_ptr  a pointer to the location at which the error was
               discovered or to the location at which
               cobol_control_ is called from.  The
               cobol_process_error sub-generator will always set it
               to the latter.


The following message(s) will be output to the "error_output"
stream:

     ["progname": Multics message (from com_err_)]
     ["progname": COBOL error message]
     Error occurred at "segno|offset"
          [in "progname" [on line ["line_no2"] "line_no1"]]

The first line is printed only if multics_code is non-zero.  The
second line is printed only if cobol_code is non-zero.  The third
line is always printed.  The progname portion of it is not
present if progname is null; the line_no2 portion of it is not
present is line_no2 is zero;  the line_no1 portion of it is not
present if line_no1 is zero.  If progname is null and the first
and/or the second line is present, the the string "cobol_error"
is used in place of it.
}*/

dcl	inst_seq		bit (36) static init ("000000000000000000111000000001000000"b);
						/* tsx0	pr0|4095+cobol_code	*/
dcl	add_use_code	bit (36) static init ("110000000001001001000101100001000000"b);
						/* aos	pr6|73	*/
						/* -5-18-76- */

dcl	sw		fixed bin;
dcl	temp		fixed bin;

dcl	cobol_emit	entry (ptr, ptr, fixed bin);
dcl	cobol_reg_manager$before_op
			entry (fixed bin);
dcl	cobol_reg_manager$after_op
			entry (fixed bin);

/*************************************/
	sw = 1;
	go to start;
use:
     entry (cobol_error_code, line_no, error_code_relp);
	sw = 2;
start:
	if cobol_error_code = 0
	then cobol_error_code = 58;
	temp = 4095 + cobol_error_code;
	call cobol_reg_manager$before_op (temp);
	if sw = 2
	then call cobol_emit (addr (add_use_code), null (), 1);
	substr (inst_seq, 4, 15) = substr (unspec (temp), 22, 15);
	call cobol_emit (addr (inst_seq), null (), 1);
	call cobol_reg_manager$after_op (temp);
	return;


/*************************************/

/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

%include cobol_;

     end cobol_process_error;
