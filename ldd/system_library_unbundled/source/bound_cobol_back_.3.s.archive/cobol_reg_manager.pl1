/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_reg_manager.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 12/17/79 by FCH, [4.3-1] illegal subscript ref deleted (TR4096) */
/* Modified since Version 4.3 */

/* format: style3 */
cobol_reg_manager:
     proc;

/*
This procedure is called by any procedure that generates
code to call a PL1 or Cobol operator.  This entry point must be called
before any code is generated to establish the interface with
the PL1 or Cobol operator. (i.e. before loading registers with
parameters to be passed to the operator).
This entry point:
	1.  genertaes code to save all locked registers.
	They must be restored after the return from the
	operator.  This can be done by a call to
	cobol_reset_r$after_operator.
	2.  unlocks all locked registers.
*/

/*  DECLARATION OF EXTERNAL ENTRIES  */

dcl	cobol_register_util$restore_pointer
			ext entry (bit (4));
dcl	cobol_register_util$restore
			ext entry (bit (4));

dcl	cobol_register_util$save
			ext entry (bit (4));
dcl	cobol_emit	ext entry (ptr, ptr, fixed bin);
dcl	cobol_reg_manager	entry (fixed bin);
dcl	cobol_reg_manager$set_pr5
			entry;
dcl	cobol_reg_manager$after_op
			entry (fixed bin);
dcl	cobol_register_util$save_pointer
			ext entry (bit (4));

/*  DECLARATION OF AUTOMATIC DATA.  */

dcl	i		fixed bin,
	temp		fixed bin,
	operator_num	fixed bin;		/*[4.3-1]*/
						/*	pointer_not_needed	(200) bit(8) static options(constant) init(
		(200)(1)"00000000"b),
	index_reg_not_needed	(200) bit(10) static options(constant) init(
		(200)(1)"0000000000"b); */
						/*[4.3-1]*/

/**************************************************/
/*	START OF EXECUTION			*/

before_op:
     entry (operator_num);

/*[4.3-1]*/
	if operator_num = 0 | operator_num >= 4096
	then temp = 1;
	else temp = operator_num;

/**************************************************/

/*  Save any register (A,Q or index) that is locked.  */

	do i = 0 to 9;				/*[4.3-1]*/
						/*	     if substr(index_reg_not_needed(temp),i,1)="0"b then do;*/
	     if reg_status.r_lock (i) ^= 0
	     then do;				/*  This register is locked.  */
		     call cobol_register_util$save ((get_bit_code (i)));
						/*  save the register.  */
		     reg_status.r_lock (i) = 0;	/*  Unlock it.  */
		end;				/*  This register is locked.  */
	end;					/*[4.3-1]*/
						/*	     end;*/

/*  Save any pointer register that is locked.  */

	do i = 0 to 7;				/*[4.3-1]*/
						/*	     if substr(pointer_not_needed(temp),i,1)="0"b then do;*/
	     if ptr_status.p_lock (i) ^= 0
	     then do;				/*  This pointer register is locked.  */
		     call cobol_register_util$save_pointer (substr (unspec (i), 33, 4));
		     ptr_status.p_lock (i) = 0;
		end;				/*  This pointer register is locked.  */
	end;					/*[4.3-1]*/
						/*	     end;*/





/**************************************
		entry for set_pr5
*****************************************/

set_pr5:
     entry;


	return;

/********************************************
	entry for after_op
**********************************************/

after_op:
     entry (operator_num);

/*[4.3-1]*/
	if operator_num = 0 | operator_num >= 4096
	then temp = 1;
	else temp = operator_num;

	do i = 0 to 9;				/*[4.3-1]*/
						/*	if substr(index_reg_not_needed(temp),i,1)="0"b then do;*/
	     reg_status.r_priority (i) = 0;
	     if reg_status.save_stack_count (i) ^= 0
	     then do;				/*  Must restore this register.  */
		     call cobol_register_util$restore ((get_bit_code (i)));
		     reg_status.r_lock (i) = 1;
		end;
	     else reg_status.r_lock (i) = 0;		/* ORN */
						/*

          reg_status.contents_sw(i)=0;
          */
						/*[4.3-1]*/
						/*	end;*/
	end;


	do i = 1, 2, 7;				/* 7/7/76 */
						/*[4.3-1]*/
						/*	     if substr(pointer_not_needed(temp),i,1)="0"b then do;*/
	     if ptr_status.save_stack_count (i) ^= 0
	     then do;
		     call cobol_register_util$restore_pointer (substr (unspec (i), 33, 4));
		     ptr_status.contents_sw (i) = 0;
		     ptr_status.p_priority (i) = 0;
		     ptr_status.p_lock (i) = 1;
		end;
	     else do;
		     ptr_status.p_lock (i) = 0;
		end;				/*[4.3-1]*/
						/*	     end;*/
	end;

	return;
get_bit_code:
     proc (fbin_code) returns (bit (4));

dcl	fbin_code		fixed bin,
	bit_code		bit (4);


	if fbin_code = 9
	then bit_code = "0010"b;			/*  Q  */
	else if fbin_code = 8
	then bit_code = "0001"b;			/*  A  */
	else bit_code = "1"b || substr (unspec (fbin_code), 34, 3);

	return (bit_code);

     end get_bit_code;

/* INCLUDE FILES USED BY THIS PROCEDUURE  */

dcl	1 ptr_status	(0:9) based (cobol_$ptr_status_ptr) aligned,
%include cobol_ptr_status;

/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/


dcl	1 reg_status	(0:9) based (cobol_$reg_status_ptr) aligned,
%include cobol_reg_status;


%include cobol_;

     end cobol_reg_manager;
