/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_store_binary.pl1 Added Trace statements.
                                                   END HISTORY COMMENTS */


/* Modified on 11/16/84 by FCH, [5.3...], trace added */
/* Modified on 10/19/84 by FCH, [5.3-1], BUG563(phx18381), new cobol_addr_tokens.incl.pl1 */
/* Modified on 02/22/77 by Bob Chang to fix the bug for reloc bits.	*/
/* Modified on 01/17/77 by ORN to call cobol_make_reg_token instead of cobol_make_register_token */
/* Modified since Version 2.0 */





/* format: style3 */
cobol_store_binary:
     proc (source_ptr, target_ptr, call_again);		/*
This procedure generates code to store a fixed vinary datum inot
another fixed binary datum, in the arithmetic (as opposed to
the Cobol MOVE) sense.
*/

/*  DECLARATION OF THE PARAMETERS  */

dcl	source_ptr	ptr;
dcl	target_ptr	ptr;
dcl	call_again	bit (1);

/*  DESCRIPTION OF THE PARAMETERS  */

/*
PARAMETER		DESCRIPTION

source_ptr	Pointer to a token that describes the
		value to be stored. (input)  The source
		can be in one of the following places:
		  a. index register (short binary value)
		  b. A or Q (long binary value)
		  c. A and Q (result of multiplication)
		  d. in a data item (long or short binary)
		  e. in an immediate constant token (type 102)

target_ptr	Pointer to the data name token of the
		target. (input)  The target is always either
		a long binary or short binary datum.

call_again	A flag that is set to "1"b by this procedure
		if the calling procedure should call this
		procedure again to store the result into
		the target.  This flag will be set only
		when the size of the source is greater
		than the size of the target, and
		code has been generated to move the source
		into a temporary, in order to force overflow.
		Under these circumstances, the input parameter
		source_ptr is set to a token that describes
		the temporary, and call_again is set to
		"1"b.  A subsequent call to this procedure,
		with no additional changes to the input
		parameters by the calling procedure, will
		then generate code to move the temporary,
		(which is now of the same size as the target)
		into the target.

*/

/*  DECLARATION OF EXTERNAL ENTRIES  */

dcl	cobol_addr	ext entry (ptr, ptr, ptr);
dcl	cobol_emit	ext entry (ptr, ptr, fixed bin);
dcl	cobol_make_reg_token
			ext entry (ptr, bit (4));
dcl	cobol_short_to_longbin$register
			ext entry (ptr, ptr);
dcl	cobol_register$load ext entry (ptr);
dcl	cobol_register$release
			ext entry (ptr);
dcl	cobol_make_type9$decimal_9bit
			ext entry (ptr, fixed bin, fixed bin (24), fixed bin, fixed bin);
dcl	cobol_make_type9$long_bin
			ext entry (ptr, fixed bin, fixed bin (24));
dcl	cobol_make_type9$short_bin
			ext entry (ptr, fixed bin, fixed bin (24));
dcl	cobol_alloc$stack	ext entry (fixed bin, fixed bin, fixed bin (24));



/*  DECLARATION OF INTERNALL STATIC DATA  */

dcl	STA		bit (10) int static init ("1111011010"b);
						/* 755(0)  */
dcl	STQ		bit (10) int static init ("1111011100"b);
						/* 756(0) */
dcl	STX		bit (10) int static init ("1111000000"b);
						/*  740(0)  */
dcl	SXL		bit (10) int static init ("1001000000"b);
						/*  440(0)  */
dcl	LDA		bit (10) int static init ("0100111010"b);
						/*  235(0)  */
dcl	LDQ		bit (10) int static init ("0100111100"b);
						/*  236(0)  */
dcl	LDX		bit (10) int static init ("0100100000"b);
						/*  220(0)  */
dcl	LXL		bit (10) int static init ("1110100000"b);
						/*  720(0)  */
dcl	BTD		bit (10) int static init ("0110000011"b);
						/*  301(1)  */
dcl	DTB		bit (10) int static init ("0110001011"b);
						/*  305(1)  */
dcl	STAQ		bit (10) int static init ("1111011110"b);
						/*  757(0)  */


/*  DECLARATION OF INTERNAL VARIABLES  */

dcl	source_length	fixed bin;
dcl	target_length	fixed bin;
dcl	temp_source_ptr	ptr;
dcl	temp_ptr		ptr;

dcl	1 input_buff	aligned,
	  2 buff		(1:10) ptr;
dcl	1 inst_buff	aligned,
	  2 buff		(1:4) fixed bin;
dcl	1 reloc_buff	aligned,
	  2 buff		(1:10) bit (5) aligned;

dcl	temp_op		bit (10);


dcl	1 register_struc,
	  2 what_reg	fixed bin,
	  2 reg_no	bit (4),
	  2 lock		fixed bin,
	  2 already_there	fixed bin,
	  2 contains	fixed bin,
	  2 tok_ptr	ptr,
	  2 literal	bit (36);
dcl	dn_ptr		ptr;


/**************************************************/
start:	/***.....	if Trace_Bit then call cobol_gen_driver_$Tr_Beg(csb);/**/
	if source_ptr -> data_name.type = rtc_immed_const
	then do;					/*  Source is an immediate constant token  */
						/*  Load the constant into an index register.  */
		temp_ptr = null ();
		if target_ptr -> data_name.bin_18
		then call immed_to_index (source_ptr, temp_ptr);
		else call immed_to_register (source_ptr, temp_ptr);
		source_ptr = temp_ptr;
	     end;					/*  Source is an immediate constant token.  */

	call get_length (source_ptr, source_length);
	call get_length (target_ptr, target_length);

	if target_length < source_length
	then call difficult_store (source_ptr, target_ptr, call_again);
	else call easy_store (source_ptr, target_ptr, call_again);
exit:	/***.....	if Trace_Bit then call cobol_gen_driver_$Tr_End(csb);/**/
	return;

	/***.....	dcl csb char(18) init("COBOL_STORE_BINARY");/**/

	/***.....	dcl cobol_gen_driver_$Tr_Beg entry(char(*));/**/
	/***.....	dcl cobol_gen_driver_$Tr_End entry(char(*));/**/

	/***.....	dcl Trace_Bit bit(1) static external;/**/
	/***.....	dcl Trace_Lev fixed bin static external;/**/
	/***.....	dcl Trace_Line char(36) static external;/**/
	/***.....	dcl ioa_ entry options(variable); /**/



/**************************************************/
easy_store:
     proc (es_source_ptr, es_target_ptr, es_call_again);

/*
This procedure generates code to store a fixed binary datum
into another fixed binary datum of length equal to or greater
than the source datum.  The source may be in an index register,
or the A or Q register, or in a cobol data item.  The target is
always a cobol data item.
*/

/*  DECLARATION OF THE PARAMETERS  */

dcl	es_source_ptr	ptr;
dcl	es_target_ptr	ptr;
dcl	es_call_again	bit (1);

start_easy_store:
	es_call_again = "0"b;

/*  Set up the input structure for calling the addressability utility.  */
	input_ptr = addr (input_buff);
	inst_ptr = addr (inst_buff);
	reloc_ptr = addr (reloc_buff);

	input_struc.type = 2;
	input_struc.operand_no = 1;
	input_struc.lock = 0;
	input_struc.send_receive (1) = 1;		/*  receiving  */
	input_struc.operand.size_sw (1) = 0;

	if es_source_ptr -> data_name.type = rtc_register
	then do;					/*  Source is in a register.  */

/*  Establish addressability to the target*/
		input_struc.operand.token_ptr (1) = es_target_ptr;
		call cobol_addr (input_ptr, inst_ptr, reloc_ptr);

		if (es_source_ptr -> cobol_type100.register = "0001"b /*  A  */
		     | es_source_ptr -> cobol_type100.register = "0010"b /*  Q  */)
		then do;				/*  Source is in the A or Q  */

			if es_source_ptr -> cobol_type100.register = "0001"b
						/*  source in A  */
			then inst_struc_basic.fill1_op = STA;
			else inst_struc_basic.fill1_op = STQ;

			call cobol_emit (inst_ptr, reloc_ptr, 1);
		     end;				/*  Source is in the A or Q  */

		else do;				/*  Source is in an index register  */
						/*  Note that if the source is in an index register, the target must be a short
			binary, because arithmetic is done in the index registers only if all targets are
			short binary.  */

			if mod (es_target_ptr -> data_name.offset, 4) = 0
			then temp_op = STX;		/*  Target is word aligned  */
			else temp_op = SXL;		/*  Target is half-word aligned  */

			substr (temp_op, 7, 3) = substr (es_source_ptr -> cobol_type100.register, 2, 3);
			inst_struc_basic.fill1_op = temp_op;
			call cobol_emit (inst_ptr, reloc_ptr, 1);

		     end;				/*  Source is in an index register  */

	     end;					/*  Source is in a register  */


	else do;					/*  Source must be in a cobol data item  */

		if es_source_ptr -> data_name.bin_36
		then do;				/*  Source is a long binary.  */

/*  Note that if the source is a long binary, then the target is also a long binary.  */

/*  Establish addressability to the source.  */
			input_struc.operand.token_ptr (1) = es_source_ptr;
			call cobol_addr (input_ptr, inst_ptr, reloc_ptr);

/*  Get the A or Q register  */
			register_struc.what_reg = 4;	/*  A or Q  */
			register_struc.lock = 1;
			register_struc.contains = 1;
			register_struc.tok_ptr = es_source_ptr;
			call cobol_register$load (addr (register_struc));

			if register_struc.reg_no = "0001"b
						/*  A  */
			then inst_struc_basic.fill1_op = LDA;
			else inst_struc_basic.fill1_op = LDQ;
			call cobol_emit (inst_ptr, reloc_ptr, 1);

/*  Establish addressability to the target.  */
			input_struc.operand.token_ptr (1) = es_target_ptr;
			call cobol_addr (input_ptr, inst_ptr, reloc_ptr);

			if register_struc.reg_no = "0001"b
						/*  A  */
			then inst_struc_basic.fill1_op = STA;
			else inst_struc_basic.fill1_op = STQ;
			call cobol_emit (inst_ptr, reloc_ptr, 1);

/*  The source is now in the A or Q  */
/*  Make a register token for the A or Q, and set the source pointer
			(es_source_ptr) to point to this register token, so that additional sotres
			(if any) can be done directly from the A or Q.  */

			es_source_ptr = null ();
			call cobol_make_reg_token (es_source_ptr, register_struc.reg_no);

		     end;				/*  Source is a long binary  */

		else do;				/*  Source must be a short binary.  */

			if es_target_ptr -> data_name.bin_18
			then do;			/*  Target is a short binary  */

/*  Establish addressability to the source  */
				input_struc.operand.token_ptr (1) = es_source_ptr;
				call cobol_addr (input_ptr, inst_ptr, reloc_ptr);

/*  Get an index register into which to load the short binary, and lock it  */
				register_struc.what_reg = 5;
				register_struc.lock = 1;
				register_struc.contains = 1;
				register_struc.tok_ptr = es_source_ptr;
				call cobol_register$load (addr (register_struc));

				if mod (es_source_ptr -> data_name.offset, 4) = 0
				then temp_op = LDX; /*  Source is word aligned.  */
				else temp_op = LXL; /*  Source is  half_word aligned  */
				substr (temp_op, 7, 3) = substr (register_struc.reg_no, 2, 3);
				inst_struc_basic.fill1_op = temp_op;
						/*  Emit the instruction to load the source into an index register.  */
				call cobol_emit (inst_ptr, reloc_ptr, 1);

/*  Establish addressability to the target.  */
				input_struc.operand.token_ptr (1) = es_target_ptr;
				call cobol_addr (input_ptr, inst_ptr, reloc_ptr);

				if mod (es_target_ptr -> data_name.offset, 4) = 0
				then temp_op = STX; /*  Target is word aligned.  */
				else temp_op = SXL; /*  Target is holf-word aligned.  */

				substr (temp_op, 7, 3) = substr (register_struc.reg_no, 2, 3);
				inst_struc_basic.fill1_op = temp_op;

/*  Emit the instruction to store the index register into the target.  */
				call cobol_emit (inst_ptr, reloc_ptr, 1);

/*  Make a register token for the index register, and set the source pointer
				to point to the register token, so that additional stores (if any)
				can be done directly from the index register.  */
				es_source_ptr = null ();
				call cobol_make_reg_token (es_source_ptr, register_struc.reg_no);

			     end;			/*  Target is a short binary.  */

			else do;			/*  Target is a long binary  */

				temp_source_ptr = null ();
						/*  Convert the short binary source to a long binary in the A or Q  */
				call cobol_short_to_longbin$register (es_source_ptr, temp_source_ptr);

/*  Establish addressabiity to the target.  */
				input_struc.operand.token_ptr (1) = es_target_ptr;
				call cobol_addr (input_ptr, inst_ptr, reloc_ptr);

				if temp_source_ptr -> cobol_type100.register = "0001"b
						/*  A  */
				then inst_struc_basic.fill1_op = STA;
				else inst_struc_basic.fill1_op = STQ;
						/*  Emit the instruction to store the register into the target.  */
				call cobol_emit (inst_ptr, reloc_ptr, 1);

/*  Set the source pointer to the register token for the long
				binary, so that additional stores (if any) can be done
				directly from the register.  */
				es_source_ptr = temp_source_ptr;
			     end;			/*  Target is a long binary  */

		     end;				/*  Source must be a short binary.  */

	     end;					/*  Source must be a cobol data item.  */
exit_easy_store:
	return;

     end easy_store;


/**************************************************/
difficult_store:
     proc (ds_source_ptr, ds_target_ptr, ds_call_again);

/*  DECLARATION OF THE PARAMETERS  */

dcl	ds_source_ptr	ptr;
dcl	ds_target_ptr	ptr;
dcl	ds_call_again	bit (1);



/*
This procedure generates code that attempts to force a fixed
point overflow condition because the source (to be stored)
is potentially larger than the receiving target.
*/

/*  DESCRIPTION OF THE PARAMETERS  */

/*
PARAMETER		DESCRIPTION

ds_source_ptr	Pointer to a token that describes the value
		to be stored.  (input)  This token may be
		a register token for either A,Q, or A-Q, or
		a data name token (type 9) for a long binary
		cobol data item.
ds_target_ptr	Pointer to a token that describes the
		target of the store.(input)  This token
		is always a data name (type 9) token for
		either a long binary or short binary
		data item.
ds_call_again	A flag that is always set to "1"b by
		this procedure.

*/

/*  DECLARATION OF INTERNAL VARIABLES  */

dcl	temp_length	fixed bin;
dcl	ret_offset	fixed bin (24);
dcl	temp_op		bit (10);
dcl	temp_source_ptr	ptr;
dcl	temp_dec_token_ptr	ptr;
dcl	temp_bin_token_ptr	ptr;


/**************************************************/
start_difficult_store:				/*  Set up for calling the addressability utility.  */
	input_ptr = addr (input_buff);
	inst_ptr = addr (inst_buff);
	reloc_ptr = addr (reloc_buff);

	if ds_source_ptr -> data_name.type = rtc_register
	then do;					/*  Source is in a register.  */
						/*  Store the register(s) into temporary storage  */
		if ds_source_ptr -> cobol_type100.register = "0011"b
						/*  A and Q  */
		then temp_length = 8;
		else temp_length = 4;		/*  Allocate some temporary, aligned on a double word boundary.  */
		call cobol_alloc$stack (temp_length, 2, ret_offset);

/*  Make a long binary data name token for the temporary.  */
		temp_source_ptr = null ();
		call cobol_make_type9$long_bin (temp_source_ptr, 1000 /*stack*/, 4 * ret_offset);
						/*  Modify the item length, because make_type9$long_bin assumes a length of 4 bytes.  */
		temp_source_ptr -> data_name.item_length = temp_length;

/*  Set up for calling the addressability utility.  */
		input_struc_basic.type = 1;
		input_struc_basic.operand_no = 0;
		input_struc_basic.lock = 0;
		input_struc_basic.char_offset = ret_offset * 4;
		input_struc_basic.segno = 1000;	/*  stack  */

		call cobol_addr (input_ptr, inst_ptr, reloc_ptr);

/*  Insert the appropriate opode to store the register(s) into the temporary  */
		if ds_source_ptr -> cobol_type100.register = "0001"b
		then temp_op = STA;
		else if ds_source_ptr -> cobol_type100.register = "0010"b
		then temp_op = STQ;
		else temp_op = STAQ;

/*  Emit code to store the source into a temporary  */
		inst_struc_basic.fill1_op = temp_op;
		call cobol_emit (inst_ptr, reloc_ptr, 1);

/*  Unlock the register that contained the source.  */
		register_struc.reg_no = ds_source_ptr -> cobol_type100.register;
		call cobol_register$release (addr (register_struc));
	     end;					/*  Source is in a register.  */

	else temp_source_ptr = ds_source_ptr;

/*  Allocate space in the stack into which the fixed binary will be converted to decimal.  */

	if temp_source_ptr -> data_name.item_length = 4
	then temp_length = 11;			/*  source is single-word fixed binary.  */
	else temp_length = 22;			/*  source is double-word fixed binary  */
	call cobol_alloc$stack (temp_length, 0, ret_offset);

/*  Make a data name token for the temporary  */
	temp_dec_token_ptr = null ();
	call cobol_make_type9$decimal_9bit (temp_dec_token_ptr, 1000 /*stack*/, ret_offset, temp_length, 0);

/*  Set up to build the BTD instruction.  */
	input_struc.type = 5;
	input_struc.operand_no = 2;
	input_struc.lock = 0;
	input_struc.operand.token_ptr (1) = temp_source_ptr;
	input_struc.operand.size_sw (1) = 0;
	input_struc.operand.token_ptr (2) = temp_dec_token_ptr;
	input_struc.operand.size_sw (2) = 0;
	call cobol_addr (input_ptr, inst_ptr, reloc_ptr);

/*  Insert the opcode and emit the EIS BTD instruction  */
	inst_struc_basic.fill1_op = BTD;
	call cobol_emit (inst_ptr, reloc_ptr, 3);

/*  Allocate work space the size of the target.  The decimal number will be converted into this work
	space, using a DTB instruction.  If the decimal number is too long, overflow will occur.  */

	call cobol_alloc$stack (fixed (ds_target_ptr -> data_name.item_length, 17), 0, ret_offset);
	temp_bin_token_ptr = null ();
	if ds_target_ptr -> data_name.item_length = 4
	then call cobol_make_type9$long_bin (temp_bin_token_ptr, 1000, ret_offset);
	else call cobol_make_type9$short_bin (temp_bin_token_ptr, 1000, ret_offset);

	input_struc.operand.token_ptr (1) = temp_dec_token_ptr;
	input_struc.operand.token_ptr (2) = temp_bin_token_ptr;
	call cobol_addr (input_ptr, inst_ptr, reloc_ptr);

/*  Insert the opcode and emit the EIS DTB instruction  */
	inst_struc_basic.fill1_op = DTB;
	call cobol_emit (inst_ptr, reloc_ptr, 3);

/*  Set the source pointer to point to the fixed binary temporary  */
	ds_source_ptr = temp_bin_token_ptr;
	ds_call_again = "1"b;
exit_difficult_store:
	return;

     end difficult_store;


/**************************************************/
get_length:
     proc (token_ptr, datum_length);

/*
This procedure determines the number of data bytes required
by the datum described by the token pointed at by token_ptr.
*/

/*  DECLARATION OF THE PARAMETERS  */

dcl	token_ptr		ptr;
dcl	datum_length	fixed bin;


start_get_length:
	if token_ptr -> data_name.type = rtc_register
	then do;					/*  Token describes a register  */

		if (token_ptr -> cobol_type100.register = "0001"b /*  A  */
		     | token_ptr -> cobol_type100.register = "0010"b /*  Q  */)
		then datum_length = 4;		/*  4 bytes = 36 bits = full word  */

		else if token_ptr -> cobol_type100.register = "0011"b
						/*  A and Q  */
		then datum_length = 8;

		else datum_length = 2;		/*  Must be an index register.  */
	     end;					/*  token describes a register.  */

	else datum_length = token_ptr -> data_name.item_length;
exit_get_length:
	return;

     end get_length;


immed_to_index:
     proc (source_tok_ptr, index_tok_ptr);

/*
This procedure generates code to load an immediate constant
into an index register.
*/

/*  DECLARATION OF THE PARAMETERS  */

dcl	source_tok_ptr	ptr;
dcl	index_tok_ptr	ptr;

/*  DECLARATION OF INTERNAL STATIC DATA  */

dcl	ldx_du_inst	bit (36) int static init ("000000000000000000010010000000000011"b);
						/*  LDXn 0,du  */

/**************************************************/
start_immed_to_index:				/*  Get an index register and lock it.  */
	register_struc.what_reg = 5;			/*  any index register  */
	register_struc.lock = 1;			/*  lock it  */
	register_struc.contains = 0;
	call cobol_register$load (addr (register_struc));

/*  Build LDXn const,du instruction  */
	substr (ldx_du_inst, 25, 3) = substr (register_struc.reg_no, 2, 3);
	substr (ldx_du_inst, 1, 18) = substr (unspec (source_tok_ptr -> immed_const.const_value), 19, 18);

	call cobol_emit (addr (ldx_du_inst), null (), 1);

/*  Make a register token tor the index that contains the constant.  */
	call cobol_make_reg_token (index_tok_ptr, register_struc.reg_no);

exit_immed_to_index:
	return;
     end immed_to_index;


immed_to_register:
     proc (source_tok_ptr, register_tok_ptr);

/*
This procedure generates code to load an immediate constant into the A or Q register.
*/

/*  DECLARATION OF THE PARAMETERS  */

dcl	source_tok_ptr	ptr;
dcl	register_tok_ptr	ptr;

/*  DECLARATION OF INTERNAL STATIC DATA  */

dcl	direct_lower_inst	bit (36) int static init ("000000000000000000000000000000000111"b);
						/*  zero,dl  */

start_immed_to_register:				/*  Get a register and lock it.  */
	register_struc.what_reg = 4;			/*  A or Q  */
	register_struc.lock = 1;
	register_struc.contains = 0;
	call cobol_register$load (addr (register_struc));

/*  Build LDA/Q const,dl instruction  */
	substr (direct_lower_inst, 1, 18) = substr (unspec (source_tok_ptr -> immed_const.const_value), 19, 18);

	if register_struc.reg_no = "0001"b
	then substr (direct_lower_inst, 19, 10) = LDA;
	else substr (direct_lower_inst, 19, 10) = LDQ;


	call cobol_emit (addr (direct_lower_inst), null (), 1);

/*  Make a register token for the register that contains the constant.  */
	call cobol_make_reg_token (register_tok_ptr, register_struc.reg_no);
exit_immed_to_register:
	return;

     end immed_to_register;


/*  INCLUDE FILES USED BY THIS PROCEDURE  */

/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

%include cobol_type100;
%include cobol_addr_tokens;
%include cobol_type9;
%include cobol_record_types;
%include cobol_type102;

     end cobol_store_binary;
