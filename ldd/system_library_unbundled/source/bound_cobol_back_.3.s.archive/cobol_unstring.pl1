/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_unstring.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 03/26/76 by ORN to MOVE only _o_n_e character of a DELIMITED BY figcon into DELIMITER IN field. */

/* Modified on 03/17/76 by ORN to allow unstringing into non-separate sign numeric data fields
     by utilizing the new cobol_addr variable length encodement in the seg field of the type 9 token */
/* format: style3 */
cobol_unstring:
     proc (uptr, rwtp);

dcl	uptr		ptr;
dcl	rwtp		ptr;

dcl	1 u		based (uptr),
	  2 n		fixed bin,
	  2 tag		fixed bin,
	  2 stp		ptr,			/* pts to sending token */
	  2 dptr		ptr,			/* pts to d struct - may be null */
	  2 ptp		ptr,			/* pts to pointer token - may be null */
	  2 ttp		ptr,			/* pts to tallying token - may be null */
	  2 unstr		(256),
	    3 rtp		ptr,			/* pts to receiving token(i) */
	    3 dtp		ptr,			/* pts to delimiter token(i) - may be null */
	    3 ctp		ptr;			/* pts to count token(i) - may be null */
dcl	1 d		based (u.dptr),
	  2 n		fixed bin,
	  2 all_cnt	fixed bin,		/* number of entries with ALL */
	  2 delimiter	(256),
	    3 dtp		ptr,			/* pts to delimited token */
	    3 allsw	fixed bin;		/* 1 means ALL precedes delimiter */

dcl	text		(0:10000) bit (36) based (cobol_$text_base_ptr);

dcl	tra_instr		bit (36) static init ("000000000000000000111001000000000100"b);
						/* tra	-,ic			*/
dcl	epp2_instr	bit (36) static init ("110000000000000000011101010001000000"b);
						/* epp2	 pr6|-			*/
dcl	spri2_instr	bit (36) static init ("110000000000000000010101010001000000"b);
						/* spri2	pr6|-			*/
dcl	bump_tally_instr	bit (36) static init ("110000000000110001000101100001000000"b);
						/* aos	pr6|61	(tally)		*/
dcl	all_loop1_instr	(7) bit (36) static init ("110000000000111010111100010001000000"b,
						/* stx2	pr6|72	*/
			"000000000000000000110011101000001010"b,
						/* eaa	0,2	*/
			"000000000000010010111111001000000000"b,
						/* arl	22	*/
			"110000000000111001000111101001000000"b,
						/* ada	pr6|71	*/
			"000000000000000000110010010000000101"b,
						/* eax2	0,al	*/
			"110000000000110111001001101001000000"b,
						/* cmpa	pr6|67	*/
			"000000000000000101110000101100000100"b);
						/* tpnz	5,ic	*/
dcl	all_loop2_instr	(7) bit (36) static init ("111111111111111001110000000000000100"b,
						/* tze	-7,ic	*/
			"110000000000111010010010010001000000"b,
						/* ldx2	pr6|72	*/
			"110000000000111010111100001001000000"b,
						/* stx1	pr6|72	*/
			"110000000000111010001100010001000000"b,
						/* ssx2	pr6|72	*/
			"110000000000111010010010011001000000"b,
						/* ldx3	pr6|72	*/
			"110000000000111001001111101001000000"b,
						/* sba	pr6|71	*/
			"000000000000000000110010010000000101"b);
						/* eax2	0,al	*/
dcl	init_x2_instr	(3) bit (36) static init ("000000000000000000110010010000001001"b,
						/* eax2	0,1	*/
			"110000000000111011100101000001000000"b,
						/* stz	pr6|73	*/
			"000000000000000000111001000000000100"b);
						/* tra	0,ic	*/
dcl	check_x2_instr	(2) bit (36) static init ("110000000000111101001000010001000000"b,
						/* cmpx2	pr6|75	*/
			"000000000000000000110000100000000100"b);
						/* tmi	0,ic	*/
dcl	check_new_x1_instr	(9) bit (36) static init ("000000000000000000110011101000001010"b,
						/* eaa	0,2	*/
			"000000000000010010111111001000000000"b,
						/* arl	22	*/
			"110000000000111001000111101001000000"b,
						/* ada	pr6|71	*/
			"110000000000110000111101101001000000"b,
						/* sta	pr6|60	*/
			"000000000000000000110010001000000101"b,
						/* eax1	0,al	*/
			"110000000000111101001000001001000000"b,
						/* cmpx1	pr6|75	*/
			"000000000000000000110000101000000100"b,
						/* tpl	0,ic	*/
			"000000000000000000110010010000001001"b,
						/* eax2	0,x1	*/
			"000000000000000000111001000000000100"b);
						/* tra	0,ic	*/
dcl	check_del_instr	(5) bit (36) static init ("000000000000000000110010011000000101"b,
						/* eax3	0,al	*/
			"110000000000111011100100010001000000"b,
						/* sxl2	pr6|73	*/
			"110000000000111011000111101001000000"b,
						/* ada	pr6|73	*/
			"110000000000110111001001101001000000"b,
						/* cmpa	pr6|67	*/
			"000000000000000000110000101100000100"b);
						/* tpnz	0,ic	*/
dcl	comp_del_instr	(4) bit (36) static init ("000000000000000000001000110100000000"b,
						/* cmpc	(EIS)	*/
			"000000000000000000000000000000001011"b,
						/*  (EIS desc.)		*/
			"001000000000000000000000000000001011"b,
						/*  (EIS desc.)		*/
			"000000000000000000110000001000000100"b);
						/* tnz	0,ic	*/
dcl	set_x3_instr	(3) bit (36) static init ("110000000000111010111100001001000000"b,
						/* stx1	pr6|72	*/
			"110000000000111010001100010001000000"b,
						/* ssx2	pr6|72	*/
			"110000000000111010010010011001000000"b);
						/* ldx3	pr6|72	*/
dcl	bump_x2_instr	(2) bit (36) static init ("000000000000000001000110010000000011"b,
						/* adx2	1,du	*/
			"000000000000000000111001000000000100"b);
						/* tra	0,ic	*/
dcl	bump_x1_instr	(5) bit (36) static init ("110000000000111010111100011001000000"b,
						/* stx3	pr6|72	*/
			"110000000000111010000110001001000000"b,
						/* adx1	pr6|72	*/
			"110000000000110000100100001001000000"b,
						/* sxl1	pr6|60	*/
			"110000000000111101001000001001000000"b,
						/* cmpx1	pr6|75	*/
			"000000000000000000110000101000000100"b);
						/* tpl	0,ic	*/
dcl	save_send_len_instr (2) bit (36) static init ("000000000000000000110010010000000101"b,
						/* eax2	0,al	*/
			"110000000000111101111100010001000000"b);
						/* stx2	pr6|75	*/
dcl	set_pointer_instr	(6) bit (36) static init ("110000000000111101001000001001000000"b,
						/* cmpx1	pr6|75	*/
			"000000000000000010110000100100000100"b,
						/* tmoz	2,ic	*/
			"110000000000111101010010001001000000"b,
						/* ldx1	pr6|75	*/
			"000000000000000001000110001000000011"b,
						/* adx1	1,du	*/
			"110000000000110000100100001001000000"b,
						/* sxl1	pr6|60	*/
			"000000000000000001001110001000000011"b);
						/* sbx1	1,du	*/
dcl	set_count_instr	(3) bit (36) static init ("000000000000000000110011101000001011"b,
						/* eaa	0,3			*/
			"000000000000010010111111001000000000"b,
						/* arl	22	*/
			"110000000000111011111101101001000000"b);
						/* sta	pr6|73	(temp)		*/
dcl	adjust_length_instr (8) bit (36) static init ("000000000000000000110010011000000101"b,
						/* eax3	0,al			*/
			"110000000000110000000111101001000000"b,
						/* ada	pr6|60	(ptr)		*/
			"110000000000110111001001101001000000"b,
						/* cmpa	pr6|67	(slen)		*/
			"000000000000000101110000100100000100"b,
						/* tmoz	5,ic	(OK)		*/
			"110000000000110111001111101001000000"b,
						/* sba	pr6|67	(slen)		*/
			"000000000000010010111011101000000000"b,
						/* als	22			*/
			"110000000000111010111101101001000000"b,
						/* sta	pr6|72	(utemp)		*/
			"110000000000111010001110011001000000"b);
						/* sbx3	pr6|72	(utemp)		*/
dcl	bypass_ovfl_instr	(2) bit (36) static init ("110000000000111101001000001001000000"b,
						/* cmpx1	pr6|75	*/
			"000000000000000000110000101000000100"b);
						/* tpl	0,ic	*/
dcl	adjust_and_test_x1_instr
			(6) bit (36) static init ("110000000000110000111010001001000000"b,
						/* lxl1	pr6|60	(ptr)		*/
			"000000000000000001001110001000000011"b,
						/* sbx1	1,du	(create offset)	*/
			"000000000000000000110000100000000100"b,
						/* tmi	[end_tag],ic  (out of range)	*/
			"110000000000110000001001101001000000"b,
						/* cmpa	pr6|60	(ptr)		*/
			"000000000000000000110000100000000100"b,
						/* tmi	[end_tag],ic  (out of range)	*/
			"110000000000110000100100001001000000"b);
						/* sxl1	pr6|60	(ptr)		*/
dcl	zero_x1_instr	(2) bit (36) static init ("000000000000000000110010001000000000"b,
						/* eax1	0			*/
			"110000000000110000100101000001000000"b);
						/* stz	pr6|60	(ptr)		*/

dcl	1 mpout		auto,
	  2 n		fixed bin,
	  2 pt1		ptr,
	  2 pt2		ptr,
	  2 pt3		ptr,
	  2 pt4		ptr;
dcl	1 addr_struct	static,
	  2 type		fixed bin init (4),
	  2 operand_no	fixed bin init (2),
	  2 lock		fixed bin init (0),
	  2 op1,
	    3 tptr	ptr,
	    3 sr		fixed bin init (0),
	    3 ic_mod	fixed bin,
	    3 size_sw	fixed bin init (1),
	  2 op2,
	    3 tptr	ptr,
	    3 sr		fixed bin init (0),
	    3 ic_mod	fixed bin,
	    3 size_sw	fixed bin init (0);
dcl	1 pr_struct	static,
	  2 pr		fixed bin,
	  2 pointer_no	bit (3),
	  2 lock		fixed bin init (1),
	  2 switch	fixed bin init (0),
	  2 segno		fixed bin,
	  2 offset	fixed bin,
	  2 reset		fixed bin;
dcl	1 reg_struct	static,
	  2 what_reg	fixed bin,
	  2 reg_no	bit (4),
	  2 lock		fixed bin init (1),
	  2 already_there	fixed bin,
	  2 contains	fixed bin init (0),
	  2 pointer	ptr init (null ()),
	  2 literal	bit (36) init (""b);

/* scratch pad use
 60	ptr
 61	tally
 62	paddr
 64	taddr
 67	slen
 71	dlen
 72	utemp
 73	temp
 75	uslen */
dcl	ptr_off		fixed bin static init (48);
dcl	ptr_offx4		fixed bin static init (192);
dcl	paddr_off		fixed bin static init (50);
dcl	tally_offx4	fixed bin static init (196);
dcl	count_offx4	fixed bin static init (236);
dcl	taddr_off		fixed bin static init (52);
dcl	slen_off		fixed bin static init (55);
dcl	dlen_off		fixed bin static init (57);

dcl	1 alpha_type9	static,
	  2 header	(4) fixed bin init (112, 0, 0, 9),
	  2 repl_ptr	(2) ptr init ((2) null ()),
	  2 fill1		bit (108) init (""b),
	  2 file_key_info,
	    3 fb1		(3) fixed bin init (0, 0, 0),
	    3 size	fixed bin init (40),
	    3 fb2		(2) fixed bin init (0, 0),
	    3 flags1	bit (36) init ("010000100100000000010000000100000000"b),
	    3 flags2	bit (36) init (""b),
	    3 seg		fixed bin init (11161),	/* PR1 with offset X1 and length in X3 (010 1011 1001 1001) */
						/*-03/17/76-*/
	    3 off		fixed bin init (0),
	  2 fill2		(7) fixed bin init (0, 0, 0, 0, 0, 0, 0);
dcl	1 zero_type2	static,
	  2 size		fixed bin init (37),
	  2 line		fixed bin init (0),
	  2 column	fixed bin init (0),
	  2 type		fixed bin init (2),
	  2 integral	bit (1) init ("1"b),
	  2 floating	bit (1) init ("0"b),
	  2 filler1	bit (5) init (""b),
	  2 subscript	bit (1) init ("0"b),
	  2 sign		char (1) init (" "),
	  2 exp_sign	char (1) init (" "),
	  2 exp_places	fixed bin init (0),
	  2 places_left	fixed bin init (1),
	  2 places_right	fixed bin init (0),
	  2 places	fixed bin init (1),
	  2 literal	char (1) init ("0");
dcl	1 blank_type3	static,
	  2 size		fixed bin init (25),
	  2 line		fixed bin init (0),
	  2 column	fixed bin init (0),
	  2 type		fixed bin init (3),
	  2 lit_type	bit (1) init ("0"b),
	  2 all_lit	bit (1) init ("1"b),
	  2 filler1	bit (6) init (""b),
	  2 lit_size	fixed bin init (1),
	  2 string	char (1) init (" ");
dcl	type9_chars	char (112) based (addr (type9));
dcl	1 type3		auto,
	  2 alignment	ptr,			/* so as to double-word align the space */
	  2 rest		char (26);
dcl	1 type9		auto,
	  2 header	(4) fixed bin,
	  2 repl_ptr	(2) ptr,
	  2 fill1		bit (108),
	  2 fb1		(3) fixed bin,
	  2 size		fixed bin,
	  2 fb2		(2) fixed bin,
	  2 flags		bit (72),
	  2 seg		fixed bin,
	  2 offset	fixed bin,
	  2 rest		char (28);
dcl	1 move_eos	static,
	  2 size		fixed bin init (38),
	  2 line		fixed bin init (0),
	  2 column	fixed bin init (0),
	  2 type		fixed bin init (19),
	  2 verb		fixed bin init (18),
	  2 e		fixed bin init (1),
	  2 h		fixed bin init (0),
	  2 i		fixed bin init (0),
	  2 j		fixed bin init (0),
	  2 a		bit (3) init (""b),
	  2 b		bit (1) init (""b),
	  2 c		bit (1) init (""b),
	  2 d		bit (2) init (""b),
	  2 f		bit (2) init (""b),
	  2 g		bit (2) init (""b),
	  2 k		bit (5) init (""b);

dcl	end_tag		fixed bin;
dcl	ovfl_tag		fixed bin;
dcl	nextdel_tag	fixed bin;
dcl	delfound_tag	fixed bin;
dcl	nextpos_tag	fixed bin;
dcl	nextrt_tag	fixed bin;

dcl	(i, j)		fixed bin;
dcl	ic		fixed bin;
dcl	temp		fixed bin;

dcl	psub		bit (1);
dcl	tsub		bit (1);
dcl	lit		bit (18);

dcl	dn_ptr		ptr;
dcl	pr_struct_ptr	ptr;

dcl	cobol_move_gen	entry (ptr);
dcl	cobol_addr	entry (ptr, ptr, ptr);
dcl	cobol_emit	entry (ptr, ptr, fixed bin);
dcl	cobol_get_size	entry (ptr, fixed bin, fixed bin);
dcl	cobol_get_size$omit_sign
			entry (ptr, fixed bin, fixed bin);
dcl	cobol_set_pr	entry (ptr, ptr);
dcl	cobol_make_type9$type2_3
			entry (ptr, ptr);
dcl	cobol_make_type3$type1
			entry (ptr, ptr);
dcl	cobol_io_util$t9dec_to_bin
			entry (bit (3) aligned, fixed bin, ptr);
dcl	cobol_io_util$bin_to_t9dec
			entry (bit (3) aligned, fixed bin, ptr);
dcl	cobol_reset_r$in_line
			entry;
dcl	cobol_register$load entry (ptr);
dcl	cobol_$register$load
			entry (ptr);
dcl	cobol_make_tagref	entry (fixed bin, fixed bin, ptr);
dcl	cobol_define_tag_nc entry (fixed bin, fixed bin);


/*************************************/
start:
	mpout.n = 4;
	mpout.pt1 = rwtp;
	mpout.pt4 = addr (move_eos);
	do reg_struct.what_reg = 1, 11, 12, 13;		/* lock A, X1, X2 and X3 */
	     call cobol_register$load (addr (reg_struct));
	end;
	end_tag = cobol_$next_tag;
	ovfl_tag = end_tag + 1;
	cobol_$next_tag = cobol_$next_tag + 2;

/* SET PR1 TO PT TO SENDING ITEM */
	pr_struct_ptr = addr (pr_struct);
	pr_struct.pr = 1;
	call cobol_set_pr (pr_struct_ptr, u.stp);

/* ESTABLISH SIZE OF SENDING ITEM */
	call cobol_get_size (u.stp, slen_off, 0);
	call cobol_emit (addr (save_send_len_instr), null (), 2);

/* ESTABLISH TALLY (if specified) */
	if u.ttp ^= null ()
	then do;
		dn_ptr = u.ttp;
		if ^data_name.subscripted
		then tsub = "0"b;
		else do;
			tsub = "1"b;
			pr_struct.pr = 2;
			call cobol_set_pr (pr_struct_ptr, u.ttp);
			substr (spri2_instr, 4, 15) = substr (unspec (taddr_off), 22, 15);
			call cobol_emit (addr (spri2_instr), null (), 1);
			type9_chars = dn_ptr -> type9_chars;
			type9.seg = 5002;		/* pointed to by PR2 */
			dn_ptr = addr (type9);
		     end;
		call cobol_io_util$t9dec_to_bin ("110"b, tally_offx4, dn_ptr);
	     end;

/* INITIALIZE X1 (indexes sending item) */
	if u.ptp = null ()
	then call cobol_emit (addr (zero_x1_instr), null (), 2);
	else do;
		dn_ptr = u.ptp;
		if ^data_name.subscripted
		then psub = "0"b;
		else do;
			psub = "1"b;
			pr_struct.pr = 2;
			call cobol_set_pr (pr_struct_ptr, u.ptp);
			substr (spri2_instr, 4, 15) = substr (unspec (paddr_off), 22, 15);
			call cobol_emit (addr (spri2_instr), null (), 1);
			type9_chars = dn_ptr -> type9_chars;
			type9.seg = 5002;		/* pointed to by PR2 */
			dn_ptr = addr (type9);
		     end;
		call cobol_io_util$t9dec_to_bin ("110"b, ptr_offx4, dn_ptr);
		call cobol_emit (addr (adjust_and_test_x1_instr), null (), 6);
		call cobol_make_tagref (ovfl_tag, cobol_$text_wd_off - 4, null ());
		call cobol_make_tagref (ovfl_tag, cobol_$text_wd_off - 2, null ());
	     end;

/* MAIN LOOP */
	if u.dptr = null ()
	then do i = 1 to u.n;			/* no delimiters specified */
		call cobol_get_size$omit_sign (u.rtp (i), 0, 0);
		call cobol_emit (addr (adjust_length_instr), null (), 8);
		mpout.pt2 = addr (alpha_type9);
		mpout.pt3 = rtp (i);
		call cobol_move_gen (addr (mpout));
		if u.ttp ^= null ()
		then call cobol_emit (addr (bump_tally_instr), null (), 1);
		if u.ctp (i) ^= null ()
		then do;
			call cobol_emit (addr (set_count_instr), null (), 3);
			call cobol_io_util$bin_to_t9dec ("110"b, count_offx4, u.ctp (i));
		     end;
		if u.dtp (i) ^= null ()
		then do;
			if u.dtp (i) -> data_name.numeric
			then mpout.pt2 = addr (zero_type2);
			else mpout.pt2 = addr (blank_type3);
			mpout.pt3 = u.dtp (i);
			call cobol_move_gen (addr (mpout));
		     end;
		if i = u.n
		then do;				/* may be able to avoid for last time */
			if u.tag > 0
			then temp = 5;
			else if u.ptp ^= null ()
			then temp = 2;
			else temp = 0;
		     end;
		else temp = 5;
		if temp > 0
		then do;
			call cobol_emit (addr (bump_x1_instr), null (), temp);
			if temp = 5
			then call cobol_make_tagref (end_tag, cobol_$text_wd_off - 1, null ());
		     end;
	     end;

	else do;					/* delimiter(s) specified */
		nextdel_tag = cobol_$next_tag;
		cobol_$next_tag = cobol_$next_tag + 1;
		call cobol_emit (addr (init_x2_instr), null (), 3);
		call cobol_make_tagref (nextdel_tag, cobol_$text_wd_off - 1, null ());
		do i = 1 to u.n;
		     if i > 1
		     then call cobol_define_tag_nc (nextrt_tag, cobol_$text_wd_off);
		     if u.n > 1
		     then do;
			     call cobol_emit (addr (check_new_x1_instr), null (), 9);
			     call cobol_make_tagref (end_tag, cobol_$text_wd_off - 3, null ());
			     call cobol_make_tagref (nextdel_tag, cobol_$text_wd_off - 1, null ());
			end;
		     nextpos_tag = cobol_$next_tag;
		     cobol_$next_tag = cobol_$next_tag + 1;
		     call cobol_define_tag_nc (nextpos_tag, cobol_$text_wd_off);
		     call cobol_emit (addr (check_x2_instr), null (), 2);
		     call cobol_make_tagref (nextdel_tag, cobol_$text_wd_off - 1, null ());
						/* NO MATCH FOUND */
		     if u.dtp (i) ^= null ()
		     then do;
			     if u.dtp (i) -> data_name.numeric
			     then mpout.pt2 = addr (zero_type2);
			     else mpout.pt2 = addr (blank_type3);
			     mpout.pt3 = u.dtp (i);
			     call cobol_move_gen (addr (mpout));
			end;			/* MOVE */
		     call cobol_emit (addr (set_x3_instr), null (), 3);
		     delfound_tag = cobol_$next_tag;
		     cobol_$next_tag = cobol_$next_tag + 1;
		     call cobol_define_tag_nc (delfound_tag, cobol_$text_wd_off);
		     mpout.pt2 = addr (alpha_type9);
		     mpout.pt3 = u.rtp (i);
		     call cobol_move_gen (addr (mpout));
		     if u.ttp ^= null ()
		     then call cobol_emit (addr (bump_tally_instr), null (), 1);
		     if u.ctp (i) ^= null ()
		     then do;
			     call cobol_emit (addr (set_count_instr), null (), 3);
			     call cobol_io_util$bin_to_t9dec ("110"b, count_offx4, u.ctp (i));
			end;
		     call cobol_emit (addr (tra_instr), null (), 1);
		     nextrt_tag = cobol_$next_tag;
		     cobol_$next_tag = cobol_$next_tag + 1;
		     call cobol_make_tagref (nextrt_tag, cobol_$text_wd_off - 1, null ());
		     do j = 1 to d.n;
			call cobol_define_tag_nc (nextdel_tag, cobol_$text_wd_off);
			nextdel_tag = cobol_$next_tag;
			cobol_$next_tag = cobol_$next_tag + 1;
			dn_ptr = d.dtp (j);
			if data_name.type = 1
			then do;
				dn_ptr = addr (type3);
				call cobol_make_type3$type1 (dn_ptr, d.dtp (j));
			     end;
			if data_name.type = 2 | data_name.type = 3
			then do;
				addr_struct.op1.tptr = addr (type9);
				call cobol_make_type9$type2_3 (addr_struct.op1.tptr, dn_ptr);
			     end;
			else addr_struct.op1.tptr = d.dtp (j);
			addr_struct.op2.tptr = null ();
			call cobol_get_size (addr_struct.op1.tptr, dlen_off, 0);
			call cobol_emit (addr (check_del_instr), null (), 5);
			call cobol_make_tagref (nextdel_tag, cobol_$text_wd_off - 1, null ());
			addr_struct.op1.ic_mod = 0;
			call cobol_addr (addr (addr_struct), addr (comp_del_instr), null ());
			substr (comp_del_instr (1), 31, 1) = "1"b;
						/* len in register */
			substr (comp_del_instr (1), 12, 7) = "1101010"b;
						/* pr,rl,x2 */
			call cobol_emit (addr (comp_del_instr), null (), 4);
			call cobol_make_tagref (nextdel_tag, cobol_$text_wd_off - 1, null ());
			if u.dtp (i) ^= null ()
			then do;
				mpout.pt2 = addr_struct.op1.tptr;
						/* type 9 token for this delimiter */
						/*-03/26/76-*/
				mpout.pt3 = u.dtp (i);
				call cobol_move_gen (addr (mpout));
			     end;
			if d.allsw (j) = 0
			then call cobol_emit (addr (set_x3_instr), null (), 3);
			else do;			/* ALL specified */
				call cobol_emit (addr (all_loop1_instr), null (), 7);
				if addr_struct.op1.ic_mod ^= 0
				then call cobol_addr (addr (addr_struct), addr (comp_del_instr), null ());
				call cobol_emit (addr (comp_del_instr), null (), 3);
				call cobol_emit (addr (all_loop2_instr), null (), 7);
			     end;
			call cobol_emit (addr (tra_instr), null (), 1);
			call cobol_make_tagref (delfound_tag, cobol_$text_wd_off - 1, null ());
			if j = d.n
			then do;			/* last time - provide exit via nextdel_tag */
				call cobol_define_tag_nc (nextdel_tag, cobol_$text_wd_off);
				nextdel_tag = cobol_$next_tag;
				cobol_$next_tag = cobol_$next_tag + 1;
				call cobol_emit (addr (bump_x2_instr), null (), 2);
				call cobol_make_tagref (nextpos_tag, cobol_$text_wd_off - 1, null ());
			     end;
		     end;
		     if i = u.n
		     then do;			/* last time - provide exit via nextrt_tag */
			     call cobol_define_tag_nc (nextrt_tag, cobol_$text_wd_off);
			     if u.ptp ^= null () | u.tag > 0
			     then call cobol_emit (addr (check_new_x1_instr), null (), 5);
			end;
		end;
	     end;

	call cobol_define_tag_nc (end_tag, cobol_$text_wd_off);


/* SET TALLY */
	if u.ttp ^= null ()
	then do;
		dn_ptr = u.ttp;
		if tsub
		then do;
			substr (epp2_instr, 4, 15) = substr (unspec (taddr_off), 22, 15);
			call cobol_emit (addr (epp2_instr), null (), 1);
			type9_chars = dn_ptr -> type9_chars;
			dn_ptr = addr (type9);
		     end;
		call cobol_io_util$bin_to_t9dec ("110"b, tally_offx4, dn_ptr);
	     end;

/* SET POINTER */
	if u.ptp ^= null ()
	then do;
		dn_ptr = u.ptp;
		if psub
		then do;
			substr (epp2_instr, 4, 15) = substr (unspec (paddr_off), 22, 15);
			call cobol_emit (addr (epp2_instr), null (), 1);
			type9_chars = dn_ptr -> type9_chars;
			type9.seg = 5002;
			dn_ptr = addr (type9);
		     end;
		if tag > 0
		then temp = 6;			/* must check x1 for overflow */
		else temp = 5;			/* forget it */
		call cobol_emit (addr (set_pointer_instr), null (), temp);
		call cobol_io_util$bin_to_t9dec ("110"b, ptr_offx4, u.ptp);
	     end;

/* CHECK FOR OVERFLOW */
	if u.tag > 0
	then do;
		call cobol_emit (addr (bypass_ovfl_instr), null (), 2);
		call cobol_make_tagref (tag, cobol_$text_wd_off - 1, null ());
	     end;
	call cobol_define_tag_nc (ovfl_tag, cobol_$text_wd_off);

	call cobol_reset_r$in_line;
	return;

/*************************************/

/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

%include cobol_type1;
%include cobol_type2;
%include cobol_type3;
%include cobol_type9;
%include cobol_;
     end cobol_unstring;
