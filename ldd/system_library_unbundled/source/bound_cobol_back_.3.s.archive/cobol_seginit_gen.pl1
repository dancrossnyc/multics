/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_seginit_gen.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 5/19/76 by Bob Chang to interface with prologue_gen changes.	*/
/* Modified on 5/18/76 by Bob Chang to interface with prologue_gen changes.	*/
/*{*/
/* format: style3 */
cobol_seginit_gen:
     proc (fxs_locno, last_decl_proc);

/*
The procedure cobol_seginit_gen is called by cobol_gen_driver_ only if
data and/or segment initialization is required for the program
being compiled.  The primary function of cobol_seginit_gen is to
generate code sequences to initialize explicit and implicit al- 
terable GO's, if any, contained in the program.  (An explicit al-
terable GO is one resulting from the implementation of an ALTER
statement.  An implicit alterable GO is one introduced at the end
of a procedure which terminates a perform range.)  In addition,
however, this procedure always updates stat.call_cnt from zero to 
one to indicate that initialization has been accomplished and
generates the transfer instruction at the end of the data/fixed-
segment initialization code sequence necessary to transfer con-
trol to the first instruction generated to implement the first
non-DECLARATIVE statement of the program.


U__s_a_g_e:_

     declare cobol_seginit_gen entry (fixed bin, fixed bin);

     call cobol_seginit_gen (fxs_locno, last_decl_proc);

						   */
declare	fxs_locno		fixed bin parameter,
	last_decl_proc	fixed bin parameter;

/*
fxs_locno	     is the compile time offset of the first instruc-
	     tion of the first executable statement of the pro-
	     gram.  (Input)

last_decl_proc is the procedure (tag) number of the last section
	     of the DECLARATIVES.  (Input)

						   */

/*
G__e_n_e_r_a_t_e_d_C__o_d_e:_

The following code is generated to initialize implicit alterable     
GO's (alterable GO's introduced at the end of perform ranges):  

     eaxn   t_relp,ic
     sxln   target_a_PNn

where:

n	   designates an index reqister number.  Any may be
	   used but two is reserved and used in the generated
	   code.

t_relp	   is the offset, relative to the instruction in which
	   it appears, of an instruction defined by a tag uni-
	   quely associated with target_a_PNn.  (Usually, this
	   is the instruction immediately following the end-of-
	   perform range alterable GO.)

target_a_PNn is a 36-bit variable allocated in the program's
	   COBOL data segment.  It is uniquely associated with
	   procedure-name-n which has been specified in a PER-
	   FORM statement as defining the end of a PERFORM
	   range.

Explicit Alterable GO's

Format 1 GO's with optional procedure-name present

Code Sequence 1, below, is generated if the COBOL segment con- 
taining procedure-name-2 does not require initialization before
control is transferred to procedure-name-2.  Code Sequence 2, be-
low, is generated if initialization is required.  Initialization
is not required if procedure-name-1 and procedure-name-2 are in
the same COBOL segment, if procedure-name-2 is in a fixed COBOL
segment, or if procedure-name-2 is in an independent COBOL seg-
ment which contains no alterable GO's.  The term "alterable GO"
is used here to designate a GO that is referenced by an ALTER
statement.  Procedure_name_1 is the procedure which conatins the
the GO statement and procedure-name-2 is the procedure to which
control is to be transferred.

     Sequence 1

  eaxn   pn2_relp,ic
  sxln   target_a_pn1

     Sequence 2

  eaxn   s(pn2)_init_relp,ic
  sxln   target_a_pn1
  eaxn   pn2_relp,ic
  stxn   target_a_pn1

where:

n	       designates an index reqister number.  Any may be
	       used but two is reserved and used in the genera-
	       ted code.

pn2_relp	       is the offset, relative to the instruction in
	       which it appears, of the first instruction of
	       procedure-name-2.

target_a_pn1     is a 36-bit variable, allocated in COBOL data on
	       a word boundary and uniquely associated with
	       procedure-name-1 (see alter_list), which con-
	       tains transfer address data.

s(pn2)_init_relp is the offset, relative to the instruction in
	       which it appears, of the first instruction of a
	       code sequence provided to initialize the alter-
	       able GO's in the segment containing procedure-
	       name-2.

Format 1 GO's with optional procedure-name absent

The following code initializes target_a_pn1 such that control is
transferred to the first instruction of a call to cobol_error_
which informs the user at execution time that no procedure has
been named to which control can be transferred.

  eaxn   er_relp,ic
  sxln   target_a_pn1

where:

er_relp	   is the offset, relative to the instruction in which
	   it appears, of the first instruction of a call to
	   cobol_error_.

target_a_pn1 is a 36-bit variable, allocated in the program's
	   COBOL data segment and uniquely associated with the
	   procedure containing the GO statement being initia-
	   lized (see alter_list), which contains transfer ad-
	   dress data.


Transfer instructions

An unconditional transfer instruction is generated at the end of
each initialization sequence.  The following instruction is gen-
erated at the end of the initialization sequence for fixed seg-
ments and is preceded by an instruction to update stat.call_cnt
from 0 to 1 (see fixed_static.incl.pl1 for a description of the
stat structure):

  aos   stat.call_cnt
  tra   0,0

where:

fxs_relp is the offset, relative to the transfer instruction, of
         the first instruction of the first executable statement
         of the program.

The following instruction is generated at the end of each code
sequence generated to initialize independent COBOL segments:

  tra   0,au

Prior to making the transfer to the initialization sequence, reg-
ister a, bits(0-17), will have been loaded with the offset within
the Text Section of the instruction to which control is to be
transferred subsequent to initialization.

						   */

/*
R__e_l_o_c_a_t_i_o_n_I__n_f_o_r_m_a_t_i_o_n:_

All instructions generated directly by cobol_seginit_gen except 
those referencing data in the Linkage Section of the Object Seg- 
ment are non-relocatable.  The relocation code generated for each 
half of each non-relocatable instruction is "00000"b.

Instructions generated directly by cobol_seginit_gen that reference
data in the Linkage Section i.e. those instructions in the code
sequence of the form
	<opcode>  pr4|<offset>
are relocatable with respect to their left hand half and non-re-
locatable with respect to thier right hand half.  The relocation
code generated for the relocatable half of each such instruction
is "11001"b, when the operand referenced by the instruction is 
internal data, and "10100"b, when it is a link. In either case, 
the code generated for the non_relocatable half is "00000"b.
						   */

/*
D__a_t_a:_


     % include cobol_;

	Items in cobol_$incl.pl1 used (u) and/or set (s) by
	cobol_seginit_gen:

	     cobol_ptr (u)
	     text_wd_off (u)
	     perform_list_ptr (u)
	     seg_init_flag (u)
	     seg_init_list_ptr (u)

						   */

%include cobol_seg_init_list;
%include cobol_perform_list;

/*  Input structure for cobol_register$load		   */

declare	1 register_request	aligned static,
	  2 requested_reg	fixed bin aligned init (12),
	  2 assigned_reg	bit (4) aligned,
	  2 lock		fixed bin aligned init (1),
	  2 reg_set_now	fixed bin aligned,
	  2 use_code	fixed bin aligned init (0),
	  2 adjust_ptr_addr fixed bin aligned init (0),
	  2 content_ptr	ptr aligned init (null),
	  2 literal_content bit (36) aligned init ((36)"0"b);

/*
requested_reg   is a code designating the register requested;
		0  - a- or q- or any index-register
		1  - a-register
		2  - q-register
		3  - a- and q-register
		4  - a- or q-register
		5  - any index-register
		1n - index-register n

assigned_reg    is a code designating the register assigned.  It
	      has no significance if a specific register is
	      requested.

lock	      indicates locking requirements; 1 requests that
	      the register be locked.

reg_set_now     not applicable for use_code = 0.

use_code 	      specifies how the register is to be used by the
	      requester; 0 signifies that such information is
	      not meaningful for register optimization.

adjust_ptr_addr inserted to make evident that since all pointers
	      must be allocated on even word boundaries, the
	      pl1 compiler will allocate structures containing
	      pointers and all pointers therein on even word  
	      boundaries leaving "gaps" where necessary.

content_ptr     not applicable for use_code = 0.

literal_content not applicable for use_code = 0.
						   */

/*  Input structure for cobol_addr			   */

declare	1 target		aligned static,
	  2 type		fixed bin aligned init (1),
	  2 operand_no	fixed bin aligned init (0),
	  2 lock		fixed bin aligned init (0),
	  2 segno		fixed bin aligned,
	  2 char_offset	fixed bin (24) aligned,
	  2 send_receive	fixed bin aligned init (0);

/*
type	   indicates type of addressing requested.  Type 1
	   indicates basic; i.e., data to be addressed is
	   specified by segno and char_offset.

operand_no   not applicable to type 1.

lock	   indicates lock requirements for registers used in
	   addressing;
	     0 - do not lock registers used.
	     1 - lock registers used.

segno	   is the compiler designation of the segment in which
	   the data to be addressed is located.

char_offset  is the character offset within segno of the data to
	   be addressed.

send_receive indicates whether the data being addressed is a
	   sending or receiving field for the instruction whose
	   address field is being set; 0 indicates sending.
						   */

/* Equate tag token					   */

declare	1 equate_tags	aligned static,
	  2 size		fixed bin aligned init (0),
	  2 line		fixed bin aligned init (0),
	  2 column	fixed bin aligned init (0),
	  2 type		fixed bin aligned init (31),
	  2 filler1	fixed bin aligned init (0),
	  2 equated_tag	fixed bin aligned,
	  2 true_tag	fixed bin aligned,
	  2 filler2	fixed bin aligned init (0),
	  2 filler3	fixed bin aligned init (0),
	  2 filler4	bit (16) aligned init ((16)"0"b);

/*
where:
type	  is the token type.

equated_tag is the tag number to be equated to true_tag.

true_tag	  is a tag which has been or will be associated with
	  an instruction location in the text.

No other fields of the token are used.

						   */

/* Instruction declarations				   */

dcl	init_perf_go	(4) bit (18) unaligned static init ("000000000000000000"b, "110010010000000100"b,
						/*  eax2   0,ic   */
			"000000000000000000"b, "100100010001000000"b);
						/*  sxl2   pr0|0  */

dcl	init_alt_go	(8) bit (18) unaligned static init ("000000000000000000"b, "110010010000000100"b,
						/*  eax2   0,ic   */
			"000000000000000000"b, "100100010001000000"b,
						/*  sxl2   pr0|0  */
			"000000000000000000"b, "110010010000000100"b,
						/*  eax2   0,ic   */
			"000000000000000000"b, "111100010001000000"b);
						/*  stx2   pr0|0  */

dcl	tra_ic_inst	(4) bit (18) unaligned static init ("100000000000001110"b, "000101100001000000"b,
						/*  aos    pr4|14 */
			"000000000000000000"b, "111001000000001000"b);
						/*  tra    0,0   */
						/* -5-18-76-*/

dcl	tra_a_inst	(2) bit (18) unaligned static init ("000000000000000000"b, "111001000000000001"b);
						/*  tra    0,au   */

dcl	tra_ic_reloc	(4) bit (5) aligned static init ("11001"b, "00000"b, "00000"b, "00000"b);

/*  Local data					   */

declare	index		fixed bin,		/* Do loop index.			   */
	jndex		fixed bin,		/* Do loop index.			   */
	init_ptr		ptr,			/* Ptr to initialization data in 	   */
						/* seg_init_list.			   */
	no_inst		fixed bin,		/* No of instructions emitted.	   */
	tag		fixed bin,		/* Tag number.			   */
	temp		fixed bin;		/* Temporary qualtity.		   */

/*  Based structure used to extract initialization data from   */
/*  seg_init_list.					   */

declare	1 init_data	aligned based (init_ptr),
	  2 target_a_segno	fixed bin aligned,
	  2 target_a_offset fixed bin aligned,
	  2 pn2		fixed bin unaligned,
	  2 init		fixed bin unaligned;

/*
P__r_o_c_e_d_u_r_e_s_C__a_l_l_e_d:_
						   */

dcl	cobol_addr	entry (ptr, ptr, ptr),
	cobol_define_tag	entry (fixed bin),
	cobol_emit	entry (ptr, ptr, fixed bin),
	cobol_equate_tag	entry (ptr),
	cobol_make_tagref	entry (fixed bin, fixed bin, ptr),
	cobol_register$load entry (ptr),
	cobol_reset_r$in_line
			entry;


/*
B__u_i_l_t-__i_n_F__u_n_c_t_i_o_n_s_U__s_e_d:_
						   */

dcl	addr		builtin,
	addrel		builtin,
	null		builtin,
	substr		builtin,
	unspec		builtin;

/*}*/

%include cobol_;


start:						/*  Initialize alterable GO's in fixed segments.		   */
	if cobol_$seg_init_flag ^= 0
	then do;
		call cobol_register$load (addr (register_request));

/*  Initialize end-of-perform range alterable GO's in all segments.  */

		if cobol_$perform_list_ptr ^= null
		then do;
			if last_decl_proc ^= 0
			then do;
				equate_tags.true_tag = last_decl_proc;

				do index = 1 to perform_list.n
				     while (perform_list.perf.proc_num (index) < last_decl_proc);
				     if perform_list.perf.int_tag_no (index) < 0
				     then do;
					     perform_list.perf.int_tag_no (index) =
						-perform_list.perf.int_tag_no (index);
					     equate_tags.equated_tag = perform_list.perf.int_tag_no (index);
					     call cobol_equate_tag (addr (equate_tags));
					end;

				end;

			     end;


			do index = 1 to perform_list.n;
			     target.segno = perform_list.perf.target_a_segno (index);
			     target.char_offset = perform_list.perf.target_a_offset (index);
			     call cobol_addr (addr (target), addr (init_perf_go (3)), null);
			     call cobol_emit (addr (init_perf_go), null, 2);
			     call cobol_make_tagref (perform_list.perf.int_tag_no (index), cobol_$text_wd_off - 2,
				null);
			end;

			call cobol_reset_r$in_line;
		     end;

/*  Initialize explicit GO's.			   */

		if cobol_$seg_init_list_ptr ^= null
		then do;
			if seg_init_list.seg.priority (1) = 0
			then do;
				index = 1;
				call initialize_go;
				index = 2;
			     end;

		     end;

	     end;

	else index = 1;

/*  Generate transfer to first executable instruction of program.  */

	temp = fxs_locno - cobol_$text_wd_off - 1;
	call cobol_emit (addr (tra_ic_inst), addr (tra_ic_reloc), 2);

/*  Initialize alterable GO's in independent segments.	   */

	if cobol_$seg_init_list_ptr ^= null
	then do index = index to seg_init_list.n;
		call cobol_define_tag (seg_init_list.seg.int_tag_no (index));
		call initialize_go;
		call cobol_emit (addr (tra_a_inst), null, 1);
	     end;

	return;

initialize_go:
     proc;

	do jndex = 0 to seg_init_list.seg.no_gos (index) - 1;
	     init_ptr = addrel (seg_init_list.seg.init_ptr (index), 3 * jndex);
	     target.segno = init_data.target_a_segno;
	     target.char_offset = init_data.target_a_offset;
	     call cobol_addr (addr (target), addr (init_alt_go (3)), null);
	     if init_data.init = 0
	     then no_inst = 2;

	     else do;
		     init_alt_go (7) = init_alt_go (3);
		     tag = init_data.init;
		     call cobol_make_tagref (tag, cobol_$text_wd_off, addr (init_alt_go));
		     no_inst = 4;
		end;

	     call cobol_emit (addr (init_alt_go), null, no_inst);
	     tag = init_data.pn2;
	     call cobol_make_tagref (tag, cobol_$text_wd_off - 2, null);

	end;

	return;

     end initialize_go;

     end cobol_seginit_gen;
