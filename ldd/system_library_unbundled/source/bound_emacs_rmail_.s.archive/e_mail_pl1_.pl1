/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(88-03-22,Blair), approve(88-03-22,MCR7842),
     audit(88-06-29,Lippard), install(88-07-26,MR12.2-1069):
     Add a new entry to expand the savebox pathname after searching the mlsys
     searchlist for the user supplied savebox name.
  2) change(89-02-09,Flegel), approve(89-03-16,MCR8076), audit(89-03-30,Lee),
     install(89-04-24,MR12.3-1035):
     Moved system procedure, support, and parameter declarations out of entry
     points and into the main procedure declaration.
     phx16782 - created entries emacs_get_address_list and
     emacs_redistribute_message for rmail-forward support
  3) change(89-02-16,Flegel), approve(89-03-16,MCR8076), audit(89-03-30,Lee),
     install(89-04-24,MR12.3-1035):
     phx21262 - support for getting and modifying the "seen" switch on messages
                                                   END HISTORY COMMENTS */


/* 
 * 83/07/19 Jon A. Rochlis - RMAIL pl1 interface to MR10.2 mail_system_
 * 83/01/06 B. Margolin    - to not set deliver_options.queue_mailing_lists.
 */

e_mail_pl1_:
	proc();

/* PARAMETERS */
dcl a_addr	       char (*) parameter;	    /* Addresses to parse */
dcl a_addr_ptr	       ptr parameter;	    /* Address list created */
dcl a_code	       fixed bin (35) parameter;  /* Error code */
dcl a_comments	       char (*) parameter;	    /* Comments to add */
dcl a_recipients_ptr       ptr parameter;	    /* Forward addresses */
dcl a_acknowledge_flag     bit (1) parameter;	    /* Ack requested */
dcl a_error_ptr	       ptr parameter;	    /* Pointer to error structures */
dcl a_seen_sw	       bit (1) parameter;	    /* Message seen switch */
dcl a_mbx_dir	       char (*) parameter;
dcl a_mbx_entry	       char (*) parameter;
dcl a_mailbox_ptr	       ptr parameter;
dcl a_salvaged	       bit(1) aligned parameter;
dcl a_msgcount	       fixed bin parameter;
dcl a_message_ptr	       ptr parameter;
dcl a_buffer_ptr	       ptr parameter;
dcl a_envelope_format      char(*) parameter;
dcl a_header_format	       char(*) parameter;
dcl a_redistributions_list_format char(*) parameter;
dcl a_body_length	       fixed bin(21) parameter;
dcl a_line_length	       fixed bin parameter;
dcl a_message_number       fixed bin parameter;
dcl a_subject	       char(*) parameter;
dcl a_original_message_ptr ptr parameter;
dcl a_new_message_ptr      ptr parameter;
dcl a_include_authors      bit(1) parameter;
dcl a_include_recipients   bit(1) parameter;
dcl a_include_self	       bit(1) parameter;
dcl a_message_text	       char(*) parameter;
dcl a_parse_error_list_ptr ptr parameter;
dcl a_request_ack	       bit(1) parameter;
dcl a_pathname	       char (*) parameter;
dcl a_dirname	       char (168) parameter;
dcl a_entryname	       char (32) parameter;

/* SYSTEM CALLS */
dcl mail_system_$redistribute_message entry (ptr, char (*), ptr, ptr,
		      fixed bin (35));
dcl mail_system_$open_mailbox entry (char (*), char(*), ptr, char(8), ptr,
		      fixed bin(35));
dcl mail_system_$acknowledge_message entry (ptr, fixed bin (35));
dcl mail_system_$read_message entry (ptr, fixed bin, fixed bin(35));
dcl mail_system_$close_mailbox entry (ptr, ptr, fixed bin(35));
dcl mail_system_$free_address_list entry (ptr, fixed bin (35));
dcl mail_system_$create_message entry (char (8), ptr, fixed bin(35));
dcl mail_system_$create_address_list entry (char (8), ptr, fixed bin(35));
dcl mail_system_$add_address entry (ptr, ptr, char(8), fixed bin(35));
dcl mail_system_$replace_subject entry (ptr, char (*), fixed bin(35));
dcl mail_system_$replace_from entry (ptr, ptr, fixed bin(35));
dcl mail_system_$deliver_message entry (ptr, ptr, ptr, fixed bin(35));
dcl mail_system_$free_message entry (ptr, fixed bin(35));
dcl mlsys_utils_$format_message entry (ptr, ptr, ptr, fixed bin (21),
		      fixed bin (21), fixed bin (35));
dcl mlsys_utils_$parse_address_list_text entry (char (*), ptr, char (8), ptr,
		      ptr, fixed bin (35));
dcl mlsys_utils_$create_reply_message entry (ptr, ptr, ptr, fixed bin(35));
dcl mlsys_utils_$format_message_header entry (ptr, fixed bin, fixed bin, ptr,
		      fixed bin(21), fixed bin(21), fixed bin(35));
dcl mlsys_utils_$parse_message_text entry (char (*), ptr, char (8), ptr, ptr,
		      fixed bin(35));
dcl mlsys_utils_$free_delivery_results entry (ptr, fixed bin(35));
dcl mlsys_utils_$print_delivery_results entry (ptr, bit(1) aligned, ptr,
		      fixed bin(35));
dcl user_info_$login_data entry (char(*), char(*), char(*), fixed bin, 
		      fixed bin, fixed bin, fixed bin(71), char(*));
dcl get_system_free_area_ entry() returns(ptr);
dcl com_err_$suppress_name entry options (variable);
dcl ssu_$standalone_invocation entry (ptr, char(*), char(*), ptr, entry,
		      fixed bin(35));
dcl ssu_$destroy_invocation entry (ptr);
dcl expand_pathname_$add_suffix entry (char(*), char(*), char(*), char(*),
		      fixed bin(35));
dcl suffixed_name_$make   entry (char(*), char(*), char(32), fixed bin(35));
dcl search_paths_$find_dir entry (char(*), ptr, char(*), char(*), char(*),
		      fixed bin(35));

/* SYSTEM CALL SUPPORT */
dcl error_table_$noentry  fixed bin(35) ext static;
dcl mlsys_et_$cant_parse_irt_field fixed bin(35) ext static;
dcl sys_info$max_seg_size fixed bin(35) ext static;
dcl mlsys_data_$user_default_mailbox_address ptr ext static;
dcl mlsys_data_$user_mail_table_address ptr ext static;

/* EXTERNAL CALLS */
dcl e_mail_pl1_$get_user_default_address entry returns(ptr);

/* BUILTINS */
dcl (addr, index, length, null, reverse, rtrim, translate,
     substr, unspec, search) builtin;

/* CONDITIONS */
dcl clean_up	      condition;

	return;

/* Open a mailbox for later reading. Pass back a pointer to the mailbox
   structure to be used during later reads */

emacs_mailbox_open:
	entry(a_mbx_dir, a_mbx_entry, a_mailbox_ptr, a_salvaged, a_msgcount, a_code);

dcl 1 auto_open_options aligned like open_options;

	a_code = 0;

	unspec (auto_open_options) = ""b;

	auto_open_options.version = OPEN_OPTIONS_VERSION_2;
	auto_open_options.message_selection_mode = ORDINARY_MESSAGES;
	auto_open_options.sender_selection_mode = ACCESSIBLE_MESSAGES;
	auto_open_options.message_reading_level = READ_KEYS;

	call mail_system_$open_mailbox (a_mbx_dir, a_mbx_entry, addr(auto_open_options), MAILBOX_VERSION_2, a_mailbox_ptr, a_code);
	if a_code ^= 0 then return;

	a_salvaged = a_mailbox_ptr -> mailbox.flags.salvaged;
	a_msgcount = a_mailbox_ptr -> mailbox.n_messages;

	return;

/* end emacs_open_mailbox; */

/* Read one message. We are given a pointer to a mail system message, and
   we use the mail system to format it.  RMAIL will expect to find the 
   formatted message in a black magic string pointed to by a_buffer_ptr */

emacs_read_message:
     entry (a_message_ptr, a_buffer_ptr, a_line_length, a_acknowledge_flag, 
	  a_envelope_format, a_header_format, a_redistributions_list_format,
	  a_body_length, a_seen_sw, a_code);

dcl buffer_position fixed bin(21);

dcl 1 auto_format_options aligned like format_message_options;
dcl chrsused fixed bin(35) based; /* ugh, ugh ... shades of Scribe */ 


     a_code = 0;

     unspec (auto_format_options) = ""b;

     auto_format_options.version = FORMAT_MESSAGE_OPTIONS_VERSION_1;
     auto_format_options.line_length = a_line_length;
     auto_format_options.include_body = "1"b;

     call parse_formatting_mode (a_envelope_format, auto_format_options.envelope_formatting_mode, a_code);
     if a_code ^= 0 then do; a_code = -1; return; end;

     call parse_formatting_mode (a_header_format, auto_format_options.header_formatting_mode, a_code);
     if a_code ^= 0 then do; a_code = -2; return; end;

     call parse_formatting_mode (a_redistributions_list_format, auto_format_options.redistributions_list_formatting_mode, a_code);
     if a_code ^= 0 then do; a_code = -3; return; end;

     buffer_position = 4;      /* 4 chars = 1 word, leaves room for the bmstr length */

     call mlsys_utils_$format_message (a_message_ptr, addr (auto_format_options), a_buffer_ptr, (sys_info$max_seg_size-1)*4, buffer_position, a_code);
     if a_code ^= 0 then return;

     a_buffer_ptr -> chrsused = buffer_position - 4;

     a_body_length = a_message_ptr -> message.body.total_lines;

     if a_message_ptr -> message.flags.must_be_acknowledged	& a_acknowledge_flag
	then call mail_system_$acknowledge_message (a_message_ptr, a_code);

     a_seen_sw = a_message_ptr -> message.flags.seen;

     return;

parse_formatting_mode:
     proc (a_formatting_mode, a_mlsys_formatting_mode, a_code);

dcl a_formatting_mode     char(*) parameter;
dcl a_mlsys_formatting_mode fixed bin parameter;
dcl a_code	      fixed bin (35) parameter;

     a_code = 0;

     a_formatting_mode = translate (a_formatting_mode, "_", "-"); /* allow either underscrose or dashes */

     if a_formatting_mode = "none_formatting_mode" 
	then a_mlsys_formatting_mode = NONE_FORMATTING_MODE;
     else if a_formatting_mode = "brief_formatting_mode" 
	then a_mlsys_formatting_mode = BRIEF_FORMATTING_MODE;
     else if a_formatting_mode = "default_formatting_mode" 
	then a_mlsys_formatting_mode = DEFAULT_FORMATTING_MODE;
     else if a_formatting_mode = "long_formatting_mode" 
	then a_mlsys_formatting_mode = LONG_FORMATTING_MODE;
     else a_code = -1; /* this will be special cased by RMAIL */

end parse_formatting_mode;

/* end emacs_read_message; */

/* Given a pointer to a mailbox, and a message number, return a pointer
   to that message (reading it if need be). */

emacs_get_message_ptr:
     entry (a_mailbox_ptr, a_message_number, a_message_ptr, a_code);

     a_code = 0;

     a_message_ptr = a_mailbox_ptr -> mailbox.messages(a_message_number).message_ptr;

     if a_message_ptr = null then do;
	call mail_system_$read_message (a_mailbox_ptr, a_message_number, a_code);
	if a_code ^= 0 then return;
	a_message_ptr = a_mailbox_ptr -> mailbox.messages(a_message_number).message_ptr;
	end;

     return;

/* Close a mailbox */

emacs_mailbox_close:
     entry (a_mailbox_ptr, a_code);

dcl 1 auto_close_options aligned like close_options;

     a_code = 0;

     unspec (auto_close_options) = ""b;

     auto_close_options.version = CLOSE_OPTIONS_VERSION_2;
     auto_close_options.flags.perform_deletions = "1"b;
     auto_close_options.flags.report_deletion_errors = "0"b; /* I'm not about to set up a sub_err_ handler */
     
     call mail_system_$close_mailbox (a_mailbox_ptr, addr (auto_close_options), a_code);

     return;

/* end emacs_mailbox_close; */

get_user_default_address:
     entry returns(ptr);

dcl anonymous fixed bin;

     call user_info_$login_data ("", "", "", anonymous, (0), (0), (0), "");

     if anonymous = 1 
	then return (mlsys_data_$user_default_mailbox_address);
	else return (mlsys_data_$user_mail_table_address);

/* end get_user_default_address; */

get_user_default_mbx_address:
     entry returns (ptr);

     return (mlsys_data_$user_default_mailbox_address);

/* end get_user_default_mbx_address; */

/* Create an address list from a character string representation of a list of
   addresses. */

emacs_get_address_list:
     entry (a_addr, a_addr_ptr, a_error_ptr, a_code);

dcl 01 pt_ops	       like parse_text_options aligned;

/* Prepare for cleanup condition */

     a_code = 0;
     a_addr_ptr = null;
     a_error_ptr = null;
     on clean_up begin;
	if a_addr_ptr ^= null then
	     call mail_system_$free_address_list (a_addr_ptr, (0));
	if a_error_ptr ^= null then
	     call free_parse_text_error_list (a_error_ptr);
     end;

/* Parse the forwarding destination addresses */

     pt_ops.version = PARSE_TEXT_OPTIONS_VERSION_1;
     pt_ops.area_ptr = get_system_free_area_ ();
     pt_ops.list_errors = "1"b;
     pt_ops.validate_addresses = "1"b;
     pt_ops.include_invalid_addresses = "0"b;
     pt_ops.mbz = ""b;

     call mlsys_utils_$parse_address_list_text ((a_addr), addr (pt_ops),
	ADDRESS_LIST_VERSION_2, a_addr_ptr, a_error_ptr, a_code);
     if a_code ^= 0 then do;
	if a_addr_ptr ^= null then do;
	     call mail_system_$free_address_list (a_addr_ptr, (0));
	     a_addr_ptr = null;
	end;
	return;
     end;

     return;

/* end emacs_get_address_list */

emacs_create_message:
     entry (a_subject, a_message_ptr, a_code);

dcl from_list ptr;


     a_code = 0;

     call mail_system_$create_message (MESSAGE_VERSION_2, a_message_ptr, a_code);
     if a_code ^= 0 then return;

     call mail_system_$replace_subject (a_message_ptr, a_subject, a_code);
     if a_code ^= 0 then return;

/* Do the from field hacking to insure that we see the from field in the
   buffer.  mail_system_ would wait until delivery time to fill it in. */

     call mail_system_$create_address_list (ADDRESS_LIST_VERSION_2, from_list, a_code);
     if a_code ^= 0 then return;

     call mail_system_$add_address (from_list, e_mail_pl1_$get_user_default_address(), ADDRESS_LIST_VERSION_2, a_code);
     if a_code ^= 0 then return;

     call mail_system_$replace_from (a_message_ptr, from_list, a_code);
     return;

/* end emacs_create_message; */

emacs_create_reply_message:
     entry (a_original_message_ptr, a_include_authors, a_include_recipients, a_include_self, a_new_message_ptr, a_code);
     
    
dcl  1 auto_reply_options aligned like reply_options;
     
     a_code = 0;

     unspec (auto_reply_options) = ""b;
     
     auto_reply_options.version = REPLY_OPTIONS_VERSION_2;
     auto_reply_options.to = null; /* no extra recipients */
     auto_reply_options.cc = null;
     auto_reply_options.bcc = null;
     auto_reply_options.flags.include_authors = a_include_authors;
     auto_reply_options.flags.include_recipients = a_include_recipients;
     auto_reply_options.flags.include_self = a_include_self;
     
     call mlsys_utils_$create_reply_message (a_original_message_ptr, addr (auto_reply_options), a_new_message_ptr, a_code);

/* See create_message for the explanation of why we do this */

     call mail_system_$create_address_list (ADDRESS_LIST_VERSION_2, from_list, a_code);
     if a_code ^= 0 then return;

     call mail_system_$add_address (from_list, e_mail_pl1_$get_user_default_address(), ADDRESS_LIST_VERSION_2, a_code);
     if a_code ^= 0 then return;

     call mail_system_$replace_from (a_new_message_ptr, from_list, a_code);

     return;
     
/* end emacs_create_reply_message; */

emacs_format_header:
     entry (a_message_ptr, a_line_length, a_buffer_ptr, a_code);
     
    
     a_code = 0;

     buffer_position = 4; /* see emacs_read_message for black magic string hacking */

     call mlsys_utils_$format_message_header (a_message_ptr, DEFAULT_FORMATTING_MODE, a_line_length, a_buffer_ptr, (sys_info$max_seg_size-1)*4, buffer_position, a_code);
     if a_code ^= 0 then return;
     
     a_buffer_ptr -> chrsused = buffer_position - 4;
     
     return;
     
/* end emacs_format_header; */

emacs_parse_message_text:
     entry (a_message_text, a_message_ptr, a_parse_error_list_ptr, a_code);

dcl 1 auto_parse_options aligned like parse_text_options;

     a_code = 0;

     unspec(auto_parse_options) = ""b;

     auto_parse_options.version = PARSE_TEXT_OPTIONS_VERSION_1;
     auto_parse_options.area_ptr = null;  /* system_free_area_ is fine */
     auto_parse_options.flags.list_errors = "1"b;
     auto_parse_options.flags.validate_addresses = "1"b; /* ???? */
     auto_parse_options.flags.include_invalid_addresses = "1"b; /* ???? */

     call mlsys_utils_$parse_message_text (a_message_text, addr (auto_parse_options), MESSAGE_VERSION_2, a_message_ptr, a_parse_error_list_ptr, a_code);

/* If the only error was not being able to parse the In-Reply-To: field,
   we pretend everything was okay, since RMAIL will add the reply reference
   itself and considers parse errors to be fatal. */

     if a_parse_error_list_ptr = null then return;

     if a_parse_error_list_ptr -> parse_text_error_list.n_errors = 1 
	then do;
	     if a_parse_error_list_ptr -> parse_text_error_list.errors(1).code = mlsys_et_$cant_parse_irt_field
		then a_code = 0;
	end;
		
     return;

/* end emacs_parse_message_text; */

/* display the parse error list (from above) via com_err_ */

display_parse_errors:
     entry (a_parse_error_list_ptr, a_message_text);

dcl 1 ptel aligned like parse_text_error_list based (a_parse_error_list_ptr);

dcl i fixed bin;

     begin;
	dcl code fixed bin(35),
	    (start, length) fixed bin(21);

	do i = 1 to ptel.n_errors;
	     code = ptel.errors(i).code;
	     start = ptel.errors(i).text_start;
	     length = ptel.errors(i).text_lth;
	     if code ^= mlsys_et_$cant_parse_irt_field then
		call com_err_$suppress_name (code, "emacs (rmail)", substr (a_message_text, start, length));
	end; /* do */ 
     end; /* begin */

     return;

/* end display_parse_errors; */

free_parse_text_error_list:
     entry (a_parse_error_list_ptr);

	dcl free_area area based;

     free ptel in (get_system_free_area_() -> free_area);

     return;

/* end display_parse_errors; */


/* Deliver a message and print the delivery results on user_i/o (RMAIL has 
   set up a file output) */

emacs_deliver_message:
     entry (a_message_ptr, a_request_ack, a_code);
     
dcl sci_ptr	      ptr;
dcl delivery_code	      fixed bin (35);
                    
dcl 1 auto_deliver_options aligned like deliver_options;
     
     delivery_code = 0;

     sci_ptr, recipients_info_ptr = null; /* for cleanup handler */

     unspec (auto_deliver_options) = ""b;

     recipients_info_n_lists = 3;

     on clean_up call free_structures("1"b);
     
     allocate recipients_info set (recipients_info_ptr);

     recipients_info.header.version = RECIPIENTS_INFO_VERSION_2;
     recipients_info.header.area_ptr = get_system_free_area_ ();
     recipients_info.header.expanded_recipients_result_list_ptr = null;
     recipients_info.lists.recipients_result_list_ptr = null;
     recipients_info.lists.address_list_ptr(1) = a_message_ptr -> message.header.to;
     recipients_info.lists.address_list_ptr(2) = a_message_ptr -> message.header.cc;
     recipients_info.lists.address_list_ptr(3) = a_message_ptr -> message.header.bcc;
	
     auto_deliver_options.version = DELIVER_OPTIONS_VERSION_2;
     auto_deliver_options.delivery_mode = ORDINARY_DELIVERY;
     auto_deliver_options.queueing_mode = ALWAYS_QUEUE_FOREIGN;
     auto_deliver_options.queued_notification_mode = NOTIFY_ON_ERROR;
     auto_deliver_options.flags.abort = "1"b;
     auto_deliver_options.flags.send_if_empty = "1"b; /* ???? */
     auto_deliver_options.flags.recipient_notification = "1"b;
     auto_deliver_options.flags.acknowledge = a_request_ack;
     auto_deliver_options.flags.queue_mailing_lists = "0"b; /* ???? */
     
     call mail_system_$deliver_message (a_message_ptr, recipients_info_ptr, addr (auto_deliver_options), delivery_code);

     if delivery_code ^= 0 then
	call com_err_$suppress_name (delivery_code, "", ""); /* print_delivery_results will yield more info */

/* Now it's time to print the results */

     call ssu_$standalone_invocation (sci_ptr, "", "", null, ssu_abort_deliver, a_code);
     if a_code ^= 0 then do;
	call com_err_$suppress_name (a_code, "", "While creating an ssu_ stand alone invocation.");
	call free_structures("1"b);
	return;
     end;
     
     call mlsys_utils_$print_delivery_results (sci_ptr, "0"b /* print all results */, recipients_info_ptr, a_code);
     if a_code ^= 0 then do;
	call com_err_$suppress_name (a_code, "", "While printing delivery results.");
     end;

     a_code = delivery_code; /* at this point a_code must be 0, but we want to make sure RMAIL knows something happened if deliver message got an error */

ERROR_DELIVER_RETURN:
     call free_structures ("1"b);
     
     return;
     
ssu_abort_deliver: /* ssu wants a proc which really aborts */
     proc;

     goto ERROR_DELIVER_RETURN;

     end ssu_abort_deliver;

ssu_abort_redistribute:
     proc;

     goto ERROR_REDIST_RETURN;

     end ssu_abort_redistribute;

free_structures:
     proc (a_message_flag);

dcl a_message_flag	      bit (1) parameter;	    /* If a message is to be cleaned */

     if a_message_flag then
	call mail_system_$free_message (a_message_ptr, (0));
     
     if recipients_info_ptr ^= null then  do;
	call mlsys_utils_$free_delivery_results (recipients_info_ptr, (0)); /* only frees expanded lists in the structure */
	free recipients_info;
     end;
     	     
     if sci_ptr ^= null then
	call ssu_$destroy_invocation (sci_ptr);

     return;
     
     end free_structures;

/* end emacs_deliver_message; */

/* Redistribute the message, with the comments provided and the appropriate
   acknowledgement to the provided list of address(es). */

emacs_redistribute_message:
     entry (a_message_ptr, a_comments, a_recipients_ptr, a_acknowledge_flag,
	a_code);

dcl 01 dv_ops	       like deliver_options aligned;
dcl system_free_area_ptr   ptr;
dcl system_free_area       area based (system_free_area_ptr);
dcl redist_code	       fixed bin (35);


/* Prepare for cleanup condition */

     system_free_area_ptr = get_system_free_area_ ();
     recipients_info_ptr = null;
     sci_ptr = null;
     on clean_up call free_structures ("0"b);

/* Set up the recipients info structure (those to forward to) */

     recipients_info_n_lists = 1;
     allocate recipients_info set (recipients_info_ptr) in (system_free_area);

     recipients_info.header.version = RECIPIENTS_INFO_VERSION_2;
     recipients_info.header.area_ptr = system_free_area_ptr;
     recipients_info.header.expanded_recipients_result_list_ptr = null;
     recipients_info.n_recipients = 0;
     recipients_info.n_unique_recipients = 0;
     recipients_info.n_failed_recipients = 0;
     recipients_info.n_lists = 1;
     recipients_info.lists(1).address_list_ptr = a_recipients_ptr;
     recipients_info.lists(1).recipients_result_list_ptr = null;

     dv_ops.version = DELIVER_OPTIONS_VERSION_2;
     dv_ops.delivery_mode = ORDINARY_DELIVERY;
     dv_ops.queueing_mode = ALWAYS_QUEUE_FOREIGN;
     dv_ops.queued_notification_mode = NOTIFY_ON_ERROR;
     dv_ops.abort = "1"b;
     dv_ops.flags.send_if_empty = "1"b;
     dv_ops.flags.recipient_notification = "1"b;
     dv_ops.flags.acknowledge = a_acknowledge_flag;
     dv_ops.flags.queue_mailing_lists = "0"b;
     dv_ops.flags.mbz = ""b;

     call mail_system_$redistribute_message (a_message_ptr, a_comments,
	recipients_info_ptr, addr (dv_ops), redist_code);

     if redist_code ^= 0 then
	call com_err_$suppress_name (redist_code, "", "");  /* print_delivery_results will yield more info */

/* Now it's time to print the results */

     call ssu_$standalone_invocation (sci_ptr, "", "", null, ssu_abort_redistribute, a_code);
     if a_code ^= 0 then do;
	call com_err_$suppress_name (a_code, "", "While creating an ssu_ stand alone invocation.");
	call free_structures("0"b);
	return;
     end;
     
     call mlsys_utils_$print_delivery_results (sci_ptr, "0"b /* print all results */, recipients_info_ptr, a_code);
     if a_code ^= 0 then do;
	call com_err_$suppress_name (a_code, "", "While printing delivery results.");
     end;

     a_code = redist_code; /* at this point a_code must be 0, but we want to make sure RMAIL knows something happened if deliver message got an error */

ERROR_REDIST_RETURN:
     call free_structures ("0"b);
     
     return;

/* end emacs_redistribute_message */

/* Expand the name of the savebox the user types in. If there are no "<>"
   characters in the pathname, then look in the "mlsys" searchlist for the
   entryname. */

emacs_expand_svbx_pathname:
     entry (a_pathname, a_dirname, a_entryname, a_code);

dcl pathname char (168);
dcl dirname char (168);
dcl entryname char (32);
dcl code fixed bin (35);

     a_code, code = 0;
     pathname = a_pathname;
     entryname, dirname = "";

/* strip off the .sv if necessary */
     if index (reverse (rtrim(pathname)), reverse (".sv")) = 1 then
	pathname = substr (pathname, 1, length(rtrim(pathname)) - length(".sv"));

     if search (pathname, "<>") = 0 then do;
	call suffixed_name_$make (rtrim(pathname), "sv.mbx", entryname, code);
	if code ^= 0 then do;
	     call com_err_$suppress_name (code, "", "Expanding savebox pathname.");
	     goto EXIT_SVBX_PATHNAME;
	     end;
	call search_paths_$find_dir ("mlsys", null, rtrim(entryname), "", dirname, code);
	if code ^= 0 then
	     if code = error_table_$noentry then do;
		call expand_pathname_$add_suffix (pathname, "sv.mbx", dirname, entryname, code);
		if code ^= 0 then do;
		     call com_err_$suppress_name (code, "", "Expanding savebox pathname.");
		     goto EXIT_SVBX_PATHNAME;
		     end;
		end;
	     else	call com_err_$suppress_name (code, "", "Searching ""mlsys"" searchlist.");
	     else;
	end;
     else do;
	call expand_pathname_$add_suffix (pathname, "sv.mbx", dirname, entryname, code);
	if code ^= 0 then call com_err_$suppress_name (code, "", "Expanding savebox pathname.");
	end;

EXIT_SVBX_PATHNAME:
     a_dirname = dirname;
     a_entryname = entryname;
     a_code = code;
     return;
/* end emacs_expand_svbx_pathname; */

%include mlsys_open_options;
%include mlsys_mailbox;
%include mlsys_format_options;
%include mlsys_close_options;
%include mlsys_message;
%include mlsys_parse_txt_options;
%include mlsys_deliver_info;
%include mlsys_reply_options;
%include mlsys_address_list;
%include rdm_switch_types;

end e_mail_pl1_;
