/* **************************************************************
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1973 *
   *                                                            *
   ************************************************************** */
/* protect old protection notice */
/*  (c)  Copyright 1973, Massachusetts Institute of Technology
         All rights rseserved
*/

lcp:
lisp_compiler: proc;

/*
 * This is a command interface to the LISP compiler.
 * It copies its argument list, putting in a first
 * argument of the pathname of the compiler saved environment,
 * which is assumed to be in the same directory as this command.
 * It calls lisp with these arguments, which causes it
 * to unsave and run the compiler.
 * It also initiates the two compiler object segments because
 * at present the referencing_dir search rule doesn't work right for
 * lisp links.
 *
 * coded 4 May 1973 by D. A. Moon
 */


declare
(i, j, n) fixed bin,
cu_$arg_list_ptr entry returns(ptr),
old_ap ptr,
com_err_ entry options(variable),
hcs_$fs_get_path_name entry(ptr, char(*), fixed bin, char(*), fixed bin(35)),
hcs_$initiate entry(char(*), char(*), char(*), fixed bin, fixed bin, ptr, fixed bin(35)),
(null, addr, index, substr) builtin,
pathname char(168),
lisp ext entry,
cu_$gen_call entry(ptr, ptr),

1 old_argl aligned based(old_ap),
 2 argc fixed bin(16) unal,
 2 type fixed bin(18) unal,
 2 descc fixed bin(16) unal,
 2 ptr(1000) ptr,

1 a1desc unaligned,
 2 type bit(9),
 2 len fixed bin(26);

declare  label_me label variable,	/* kludge to get ptr to myself */
	ptr_to_me ptr aligned based(addr(label_me));

dcl lap_flag bit(1);

	lap_flag = "0"b;
	go to join;

lap:	entry;			/* LISP Assembly Program */

	lap_flag = "1"b;

join:
	old_ap = cu_$arg_list_ptr();
	n = old_argl.argc;
	if n = 0 then do;
		if lap_flag
		then call com_err_(0, "lap",
		  "Correct usage is:^/^-lap pathname -options-^/");
		else call com_err_(0, "lisp_compiler",
		  "Correct usage is:^/^-lisp_compiler pathname -options-^/or^-lcp pathname -options-");
		return;
		end;
	/* find pathname of compiler.sv.lisp */

	label_me = label;
label:	call hcs_$fs_get_path_name(ptr_to_me, pathname, (0), (""), (0));
	if lap_flag
	then call hcs_$initiate(pathname, "lap_", "lap_", 0, 0, (null), (0));
	else do;
	     call hcs_$initiate(pathname, "lcp_semant_", "lcp_semant_", 0, 0, (null), (0));	/* can't err */
	     call hcs_$initiate(pathname, "lcp_cg_", "lcp_cg_", 0, 0, (null), (0));
	     end;
	i = index(pathname, " ");
	if lap_flag
	then substr(pathname, i, 4) = ">lap";
	else substr(pathname, i, 9) = ">compiler";	/* full pn shorn of .sv.lisp extension */
	a1desc.type = "101010100"b;	/* 524 */
	a1desc.len = i+8;

	begin;	/* allocate space for new argument list */

dcl 1 new_argl aligned,
     2 argc fixed bin(16) unal,
     2 type fixed bin(18) unal,
     2 descc fixed bin(16) unal,
     2 mbz fixed bin(18) unal,
     2 aptr (n+1) ptr,
     2 dptr(n+1) ptr;

	new_argl.argc, new_argl.descc = n+1;
	new_argl.type = 4;
	new_argl.mbz = 0;

	/* set first arg to pathname */

	new_argl.aptr(1) = addr(pathname);
	new_argl.dptr(1) = addr(a1desc);

	/* copy rest of args */

	do i = 1 to n;
		new_argl.aptr(i+1) = old_argl.ptr(i);
		if old_argl.type = 4 then
			new_argl.dptr(i+1) = old_argl.ptr(i+n);
			else new_argl.dptr(i+1) = old_argl.ptr(i+n+1);
		end;

	/* call out */

	call cu_$gen_call(addr(lisp), addr(new_argl));
	end;
end;
