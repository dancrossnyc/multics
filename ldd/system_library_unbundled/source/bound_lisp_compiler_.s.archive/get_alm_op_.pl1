/* **************************************************************
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1974 *
   *                                                            *
   ************************************************************** */
/* Procedure to look up a symbol in alm's symbol table
   Part of Multics LISP Assembly Program
   75.01.23 DAM */

get_alm_op_:  procedure(a_symbol, value);

dcl a_symbol char(*),		/* symbol to be looked up, no padding */
    value fixed bin(35);		/* its value, -1 if not found in table */
				/*            -2 if takes register number */

dcl 1 alm$opcode_table aligned external structure,
    2 number_of_symbols fixed bin(35,1),		/* word contains 2*hbound of symbols array */
    2 symbols_relp bit(18) unaligned,			/* relative pointer to symbols array */
    2 values_relp bit(18) unaligned,			/* relative pointer to values array */

    symbols_ptr pointer init(addrel(addr(alm$opcode_table),symbols_relp)),

    alm_nsymbol(0:number_of_symbols) fixed bin(71) aligned based(symbols_ptr),

    values_ptr pointer init(addrel(addr(alm$opcode_table), values_relp)),

    1 alm_values_table (0:number_of_symbols) aligned structure based(values_ptr),
    2 pseudo bit(18) unaligned,		/* pseudo op status */
    2 opcode bit(10) unaligned,
    2 opclass fixed bin(7) unaligned;

dcl symbol char(8) aligned based(addr(nsymbol));		/* symbol munged into fortran format */

dcl nsymbol fixed bin(71);	/* for comparison */

dcl (A9BD_TYPE init("000000000000110101"b),
     PTRN_TYPE init("000000000000101100"b),
    NDXN_TYPE init("000000000000101011"b) ) bit(18) static;	/* interesting values of pseudo field */
dcl (i, j, k) fixed bin;

dcl (addr, addrel, unspec, substr, length, divide) builtin;



	unspec(symbol) = ""b;	/* so as to pad with null characters */
	substr(symbol, 1, length(a_symbol)) = a_symbol;

	j = 1;
	k = number_of_symbols;		/* binary search */
	do while(j <= k);
	   i = j + divide(k-j, 2, 17, 0);	/* probing point */
	   if alm_nsymbol(i) = nsymbol then do;
		if opclass(i) = 1 then go to lose;	/* old */
		if opclass(i) = 4 then go to lose;	/* old */
		if pseudo(i) = ""b then value = fixed(opcode(i)||"00000000"b, 18);
		else if pseudo(i) = A9BD_TYPE then value = fixed(opcode(i)||"00000000"b, 18);
		else if pseudo(i) = PTRN_TYPE then value = -2;		/* op ptr,addr */
		else if pseudo(i) = NDXN_TYPE then value = -2;		/* op xr,addr */
		else go to lose;					/* not interesting */
		return;
		end;
	   else if alm_nsymbol(i) < nsymbol then j = i+1;
	   else k = i-1;
	   end;
lose:	value = -1;		/* not found */
	return;

end;
