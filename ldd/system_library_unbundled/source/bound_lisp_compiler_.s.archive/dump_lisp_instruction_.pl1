/* **************************************************************
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1973 *
   *                                                            *
   ************************************************************** */
/* protect old protection notice */
/* (c) Copyright 1973, Massachusetts Institute of Technology.
       All rights reserved.					*/

dump_lisp_instruction_:
	proc(a_word, ic, a_tablep, a_tra_table_p) returns(char(*));

/* modified 73.11.28 by DAM for new subr blocks */
/* modified '78 by BSG for unwind-protect ops */

dcl a_word bit(36) aligned parameter,
    a_tablep pointer parameter,
    ic fixed bin(18) parameter,
    a_tra_table_p pointer parameter;


dcl
	abr bit(1) unal defined(word) pos(30),
	addr builtin,
	addrb bit(18) unal defined(word) pos(1),
	addrf fixed bin(17) unal based(addr(word)),
	base bit(3) unal defined(word) pos(1),
	bin builtin,
	dl bit(6) int static init("000111"b),
	du bit(6) int static init("000011"b),
	mod bit(6) unal defined(word) pos(31),
	offsetb bit(15) unal defined(word) pos(4),
	offsetf fixed bin(14) unal based(addr(offsetb)),
	opcode bit(9) unal defined(word) pos(19),
	hopcode bit(1) unal defined (word) pos(28),	/* opcode extension */
	output char(64) var,
	operator fixed bin,
	atom_name_ptr unaligned pointer,
	atom_name char(10000) varying aligned based(atom_name_ptr),

	link_info (1000) bit(27) aligned based,
	1 link aligned automatic structure,		/* lisp itp link */
	  2 address fixed bin(14) unaligned,
	  2 snap bit(1) unaligned,
	  2 constant bit(1) unaligned,
	  2 f bit(1) unaligned,
	  2 nargs bit(9) unaligned,

	array_link_control_word(100) bit(36) aligned based,
	1 array_link aligned automatic structure,
	  2 type fixed bin(8) unaligned,
	  2 ndims fixed bin(8) unaligned,
	   2 address fixed bin(17) unaligned,

	(comment_sw, atom_sw, link_sw, tempf) bit(1) aligned,
	lbound builtin,
	hbound builtin,
	substr builtin,
	convert_sfl_ entry(float bin(27), fixed bin) returns(char(*)),
	word bit(36) init(a_word);

dcl (mll_internal_error, mll_internal_error_2) condition;

dcl tablep pointer init(a_tablep);

/* table of all locations referenced by transfer instructions */

dcl tra_table_p pointer init(a_tra_table_p),

    1 tra_table aligned based(tra_table_p),
    2 number_of_labels fixed bin,
    2 label(0 refer(number_of_labels)) structure,	/* sorted by address */
      3 address fixed bin(18),			/* location labelled */
      3 stack_ht fixed bin(18),			/* stack_height at tra here, -1 if not known yet */
      3 tra_from fixed bin(18),			/* loc of tra to here */
      3 save_bind_stack_ptr fixed bin,			/* Value of binding stack ptr */
      3 tra_from_others bit(1);			/* 1 -> tra_from is not only place that tras here */

dcl constp pointer,
    1 word_pair aligned based,
      2 (w1, w2) fixed bin(35);

	/* declare various tables which are based on tablep */

dcl 1 table aligned structure based(tablep),
    2 stack_height fixed bin(17),			/* add to ap offset to get 2 * temp number */
    2 atom_table_size fixed bin,			/* size of atom_table array */
    2 link_table_ptr unaligned pointer,		/* -> array of itp link info */
    2 link_table_lbound fixed bin(18),			/* first lp| offset of itp link */
    2 link_table_hbound fixed bin(18),			/* last lp| offset of itp link */
    2 array_link_table_ptr unaligned pointer,		/* -> array of array_link control words */
    2 array_link_table_lbound fixed bin(18),		/* first lp| offset of array link */
    2 array_link_table_hbound fixed bin(18),		/* last lp| offset of array link */
    2 definition_table_size fixed bin,			/* size of definition_table array */
    2 constant_table_size fixed bin,			/* size of constant_table array */
    2 constant_table_lbound fixed bin(18),		/* first lp| offset of constant */
    2 constant_table_hbound fixed bin(18),		/* last lp| offset of constant */
    2 bind_stack_ptr fixed bin,			/* index of first unused entry in bind_stack */
    2 arg_twiddle fixed bin(18),			/* eax5 hacker */
    2 seg_ptr unaligned pointer,			/* -> text section */
    2 bind_stack (100) fixed bin,			/* table of sizes of nested binding blocks */
    2 atom_table (0 refer(atom_table_size)),		/* pointers to atomic symbols */
      3 ptr_to_name unaligned pointer,			/* -> varying string */
    2 definition_table(0 refer(definition_table_size)),	/* entries defined... */
      3 arg_pdl bit(18) unaligned,			/* number of pdl cells occupied by args */
      3 entrypoint bit(18) unaligned,			/* location of entry */
      3 ptr_to_name unaligned pointer,			/* -> varying string */
    2 constant_table(0 refer(constant_table_size)),
      3 atom_table_index fixed bin,			/* 0 if this constant not an atom */

    traref fixed bin(18),
    (labu, labx, labh) fixed bin;

dcl
	absolute(0:1023) bit(1) int static init(
	(8)(1)"0"b,
	(8)(1)"0"b,
	(8)(1)"0"b,
	(8)(1)"0"b,
	(8)(1)"0"b,
	(8)(1)"0"b,
	(8)(1)"0"b,
	(8)(1)"0"b,
	(8)(1)"0"b,
	(8)(1)"0"b,
	(8)(1)"0"b,
	(8)(1)"0"b,
	(8)(1)"0"b,
	(8)(1)"0"b,
	(8)(1)"0"b,
	(8)(1)"0"b,
	(8)(1)"1"b,		/* cnaxN */
	(5)(1)"0"b, "1"b, "1"b, "0"b,	/* cnaa, cnaq */
	(8)(1)"0"b,
	(8)(1)"0"b,
	(8)(1)"0"b,
	(8)(1)"0"b,
	(8)(1)"1"b,		/* orxN */
	(5)(1)"0"b, "1"b, "1"b, "0"b,	/* ora, orq */
	(8)(1)"1"b,		/* canxN */
	(5)(1)"0"b, "1"b, "1"b, "0"b,	/* cana, canq */
	(8)(1)"0"b,
	(8)(1)"0"b,
	(8)(1)"0"b,
	(8)(1)"0"b,
	(8)(1)"1"b,		/* anxN */
	(5)(1)"0"b, "1"b, "1"b, "0"b,	/* ana, anq */
	(160)(1)"0"b,
	(8)(1)"0"b,
	(8)(1)"0"b,
	(8)(1)"1"b,		/* erxN */
	(5)(1)"0"b, "1"b, "1"b, "0"b,	/* era, erq */
	(64)(1)"0"b,
	(512)(1)"0"b);

dcl
	bases(0:8) char(3) aligned int static init(
	 "ms|", "op|", "tp|", "cp|", "lp|", "rp|", "sp|", "sb|", "us|");

dcl
	op_names(4:52) char(25) varying static init(
		"old array store ptr",
		"nil",
		"t",
		"bad addr?",
		"bind operator",
		"unbind operator",
		"errset operator 1",
		"errset operator 2",
		"errset remover",
		"call operator",
		"catch operator 1",
		"catch operator 2",
		"catch remover",
		"bad addr?",
		"bad addr?",
		"iog binding operator",
		"bad goto operator",
		"throw operator 1",
		"throw operator 2",
		"set indicators from sign",
		"fixtype,flotype",
		"return operator",
		"err operator",
		"pl1-interface operator",
		"pl1-l-interface operator",
		"cons operator",
		"ncons operator",
		"xcons operator",
		"begin list operator",
		"append list operator",
		"terminate list operator",
		"numeric compare operator",
		"bad addr?",
		"array reference op?",
		"dead array ref op?",
		"store operator",
		"flonum store operator",
		"bad addr?",
		"bad addr?",
		"array link snap opr?",
		"create string descriptor",
		"create array descriptor",
		"pl1 call operator",
		"cons string operator",
		"create var string desc op",
		"unwind protect operator 1",
		"unwind protect operator 2",
		"unwind protect epilogue",
		"interrupt restore return");

dcl op_stack_adj(4:52) fixed bin static init(	/* stack adjustments of these operators */
	0, 0, 0, 0,
	0,		/* bind is special */
	0,		/* unbind is special */
	2,		/* errset1 */
	0,		/* errset2 */
	-2,		/* unerrset */
	0,		/* call is special */
	2,		/* catch1 */
	0,		/* catch2 */
	-2,		/* uncatch */
	0,		/* prologue interpreter?? */
	0,		/* ?? */
	16,		/* iogbind */
	0,		/* unseen go tag */
	0,		/* throw1 (never returns) */
	0,		/* throw2 (never returns) */
	0,		/* signp */
	0,		/* ?? */
	0,		/* return (never returns) */
	0,		/* err (never returns) */
	0,		/* ?? */
	0,		/* ?? */
	0,		/* cons */
	0,		/* ncons */
	0,		/* xcons */
	2,		/* list1 */
	0,		/* list2 */
	-2,		/* list3 */
	0,		/* compare */
	0,0,0,0,0,0,0,0,	/* array oprs */
	0,0,0,0,		/* defpl1 operators */
	0,0,0,0,0		/* var string desc and unm_prots */
    );

dcl op_special (4:52) fixed bin static init(		/* special action code */
	0, 0, 0, 0,
	0,		/* bind */
	1,		/* unbind */
	0, 0, 0,
	3,		/* call */
	0, 0, 0, 0, 0,
	2,		/* iog bind */
	(33)0);

dcl
	tags(0:63) char(4) aligned int static init(
	",00", ",au ", ",qu ", ",du ", ",ic ", ",al ", ",ql ", ",dl ",               
	",x0 ", ",x1 ", ",x2 ", ",x3 ", ",x4 ", ",x5 ", ",x6 ", ",x7 ",               
	",*  ", ",au*", ",qu*", ",23 ", ",ic*", ",al*", ",ql*", ",27 ",               
	",x0*", ",x1*", ",x2*", ",x3*", ",x4*", ",x5*", ",x6*", ",x7*",               
	",ft1", ",itb", ",42 ", ",its", ",sd ", ",scr", ",ft2", ",ft3",               
	",ci ", ",i  ", ",sc ", ",ad ", ",di ", ",dir", ",id ", ",idc",               
	",*n ", ",*au", ",*qu", ",*du", ",*ic", ",*al", ",*ql", ",*dl",               
	",*x0", ",*x1", ",*x2", ",*x3", ",*x4", ",*x5", ",*x6", ",*x7");              

dcl
	op_codes(0:1023) char(8) aligned int static init(
"arg  ", "mme  ", "drl  ", "***  ", "mme2 ", "mme3 ", "***  ", "mme4 ", 
"***  ", "nop  ", "***  ", "***  ", "***  ", "cioc ", "***  ", "***  ", 
"adlx0", "adlx1", "adlx2", "adlx3", "adlx4", "adlx5", "adlx6", "adlx7", 
"***  ", "***  ", "ldqc ", "adl  ", "ldac ", "adla ", "adlq ", "adlaq",
"asx0 ", "asx1 ", "asx2 ", "asx3 ", "asx4 ", "asx5 ", "asx6 ", "asx7 ", 
"adwpms", "adwpop", "adwptp", "adwpcp", "aos  ", "asa  ", "asq  ", "***  ", 
"adx0 ", "adx1 ", "adx2 ", "adx3 ", "adx4 ", "adx5 ", "adx6 ", "adx7 ", 
"***  ", "awca ", "awcq ", "lreg ", "***  ", "ada  ", "adq  ", "adaq ", 
"cmpx0", "cmpx1", "cmpx2", "cmpx3", "cmpx4", "cmpx5", "cmpx6", "cmpx7", 
"***  ", "cwl  ", "***  ", "***  ", "***  ", "cmpa ", "cmpq ", "cmpaq", 
"sblx0", "sblx1", "sblx2", "sblx3", "sblx4", "sblx5", "sblx6", "sblx7", 
"***  ", "***  ", "***  ", "***  ", "***  ", "sbla ", "sblq ", "sblaq", 
"ssx0 ", "ssx1 ", "ssx2 ", "ssx3 ", "ssx4 ", "ssx5 ", "ssx6 ", "ssx7 ", 
"adwplp", "adwprp", "adwpsp", "adwpsb", "sdbr ", "ssa  ", "ssq  ", "zam  ", 
"sbx0 ", "sbx1 ", "sbx2 ", "sbx3 ", "sbx4 ", "sbx5 ", "sbx6 ", "sbx7 ", 
"***  ", "swca ", "swcq ", "ldb  ", "***  ", "sba  ", "sbq  ", "sbaq ", 
"cnax0", "cnax1", "cnax2", "cnax3", "cnax4", "cnax5", "cnax6", "cnax7", 
"***  ", "cmk  ", "absa ", "epaq ", "sznc ", "cnaa ", "cnaq ", "cnaaq",
"ldx0 ", "ldx1 ", "ldx2 ", "ldx3 ", "ldx4 ", "ldx5 ", "ldx6 ", "ldx7 ", 
"***  ", "rsw  ", "ldbr ", "rmcm ", "szn  ", "lda  ", "ldq  ", "ldaq ", 
"orsx0", "orsx1", "orsx2", "orsx3", "orsx4", "orsx5", "orsx6", "orsx7", 
"sprims", "spbpms", "spritp", "spbptp", "spri ", "orsa ", "orsq ", "lam  ", 
"orx0 ", "orx1 ", "orx2 ", "orx3 ", "orx4 ", "orx5 ", "orx6 ", "orx7 ", 
"tspms", "tspop", "call ", "tspcp", "***  ", "ora  ", "orq  ", "oraq ", 
"canx0", "canx1", "canx2", "canx3", "canx4", "canx5", "canx6", "canx7", 
"eawpms", "easpms", "eawptp", "easptp", "***  ", "cana ", "canq ", "canaq", 
"lcx0 ", "lcx1 ", "lcx2 ", "lcx3 ", "lcx4 ", "lcx5 ", "lcx6 ", "lcx7 ", 
"eawplp", "easplp", "eawpsp", "easpsp", "***  ", "lca  ", "lcq  ", "lcaq ", 
"ansx0", "ansx1", "ansx2", "ansx3", "ansx4", "ansx5", "ansx6", "ansx7", 
"eppms", "epbpop", "epptp", "epbpcp", "stac ", "ansa ", "ansq ", "stcd ", 
"anx0 ", "anx1 ", "anx2 ", "anx3 ", "anx4 ", "anx5 ", "anx6 ", "anx7 ", 
"epplp", "epbprp", "eppsp", "epbpsb", "***  ", "ana  ", "anq  ", "anaq ", 
"***  ", "mpf  ", "mpy  ", "***  ", "***  ", "cmg  ", "***  ", "***  ", 
"***  ", "lde  ", "***  ", "***  ", "***  ", "ade  ", "***  ", "***  ", 
"***  ", "ufm  ", "***  ", "dufm ", "***  ", "fcmg ", "***  ", "dfcmg", 
"fszn ", "fld  ", "***  ", "dfld ", "***  ", "ufa  ", "***  ", "dufa ", 
"sxl0 ", "sxl1 ", "sxl2 ", "sxl3 ", "sxl4 ", "sxl5 ", "sxl6 ", "sxl7 ", 
"stz  ", "smic ", "***  ", "lacl ", "stt  ", "fst  ", "ste  ", "dfst ", 
"***  ", "fmp  ", "***  ", "dfmp ", "***  ", "***  ", "***  ", "***  ", 
"fstr ", "***  ", "***  ", "***  ", "***  ", "fad  ", "***  ", "dfad ", 
"rpl  ", "***  ", "***  ", "***  ", "***  ", "bcd  ", "div  ", "dvf  ", 
"***  ", "***  ", "ldcf ", "fneg ", "***  ", "fcmp ", "***  ", "dfcmp", 
"rpt  ", "***  ", "***  ", "***  ", "***  ", "fdi  ", "***  ", "dfdi ", 
"***  ", "neg  ", "cam  ", "negl ", "***  ", "ufs  ", "***  ", "dufs ", 
"sprpms", "sprpop", "sprptp", "sprpcp", "sprplp", "sprprp", "sprpsp", "sprpsb", 
"***  ", "stba ", "stbq ", "smcm ", "stc1 ", "***  ", "***  ", "sam  ", 
"rpd  ", "***  ", "***  ", "***  ", "***  ", "fdv  ", "***  ", "dfdv ", 
"***  ", "***  ", "***  ", "fno  ", "***  ", "fsb  ", "***  ", "dfsb ", 
"tze  ", "tnz  ", "tnc  ", "trc  ", "tmi  ", "tpl  ", "***  ", "ttf  ", 
"rtcd ", "***  ", "***  ", "rcu  ", "teo  ", "teu  ", "dis  ", "tov  ", 
"eax0 ", "eax1 ", "eax2 ", "eax3 ", "eax4 ", "eax5 ", "eax6 ", "eppus ", 
"ret  ", "***  ", "***  ", "rccl ", "ldi  ", "eaa  ", "eaq  ", "ldt  ", 
"ersx0", "ersx1", "ersx2", "ersx3", "ersx4", "ersx5", "ersx6", "ersx7", 
"sprilp", "spbplp", "sprisp", "spbpsp", "***  ", "ersa ", "ersq ", "scu  ", 
"erx0 ", "erx1 ", "erx2 ", "erx3 ", "erx4 ", "erx5 ", "erx6 ", "erx7 ", 
"tsplp", "tsprp", "tspsp", "tspsb", "***  ", "era  ", "erq  ", "eraq ", 
"tsx0 ", "tsx1 ", "tsx2 ", "tsx3 ", "tsx4 ", "tsx5 ", "tsx6 ", "tsx7 ", 
"tra  ", "***  ", "***  ", "callsp","***  ", "tss  ", "xec  ", "xed  ",
"lxl0 ", "lxl1 ", "lxl2 ", "lxl3 ", "lxl4 ", "lxl5 ", "lxl6 ", "lxl7 ", 
"***  ", "ars  ", "qrs  ", "lrs  ", "***  ", "als  ", "qls  ", "lls  ", 
"stx0 ", "stx1 ", "stx2 ", "stx3 ", "stx4 ", "stx5 ", "stx6 ", "stx7 ", 
"stc2 ", "stca ", "stcq ", "sreg ", "sti  ", "sta  ", "stq  ", "staq ", 
"lprpms", "lprpop", "lprptp", "lprpcp", "lprplp", "lprprp", "lprpsp", "lprpsb", 
"***  ", "arl  ", "qrl  ", "lrl  ", "gtb  ", "alr  ", "qlr  ", "llr  ",
(64)(1)"***",
"mlr  ",
(63)(1)"***",
(32)(1)"***",
(9)(1)"***",
"spriop","***","spricp",(4)(1)"***",
(16)(1)"***",
(32)(1)"***",
(9)(1)"***","eppop","***","eppcp",(4)(1)"***",
(9)(1)"***","epprp","***","eppsb",(4)(1)"***",
(64)(1)"***",
(64)(1)"***",
(4)(1)"***","tmoz","tpnz","ttn",(9)(1)"***",
(16)(1)"***",
(9)(1)"***","sprirp","***","sprisb",(4)(1)"***",
(16)(1)"***",
(64)(1)"***");

%include lisp_nums;

	comment_sw, atom_sw, link_sw, tempf = "0"b;

	if word = "000140100540"b3			/*  hee hee */
	     then return ("mlr     (pr,rl),(pr,rl)");

	/* this hack is so we can remember eax5 instructions in case
	   an lsubr later gets called. */

	if opcode = "110010101"b			/* eax5 */
	then arg_twiddle = addrf;

	output = op_codes(bin(hopcode||opcode));

	if abr then do;
	   if base = "001"b then do;
	        if mod = "17"b3 | mod = "37"b3
						/* ab|n,x7 is special us ptr */
		   then do;
		        output = output || bases(8);
		        output = output || cv_octal((offsetf));
		        if mod & "010000"b then output = output || ",*";
		        return(output);
		   end;
             end;
	   output = output || bases(bin(base));
	   output = output || cv_octal((offsetf));
	   if base = "001"b				/* ab| some offset... */
	   then do;
		operator = divide(offsetf,2,17,0);
		if operator >= lbound(op_names,1)
		then if operator <= hbound(op_names,1)
		then comment_sw = "1"b;
	        end;
	   else if base = "000"b then			/* ms */
	     if opcode = "011101000"b then do;		/* eppms instruction */
		stack_height = stack_height + offsetf;
		end;
	     else do;				/* reference to a temporary cell */
		tempf = "1"b;
		end;
	   else if base = "100"b then do;		/* reference to data in subr block */
		if offsetf >= constant_table_lbound
		then if offsetf <= constant_table_hbound
		then if constant_table(divide(offsetf-constant_table_lbound, 2, 18, 0)+1).atom_table_index ^= 0
		then do;
		     atom_name_ptr = atom_table(constant_table(1+divide(offsetf-constant_table_lbound, 2, 18, 0)).atom_table_index).ptr_to_name;
		     atom_sw = "1"b;
		     end;

		if offsetf >= link_table_lbound
		then if offsetf <= link_table_hbound
		then link_sw = "1"b;
		end;
	   end;

	else if (mod=dl)|(absolute(bin(hopcode||opcode))&mod=du) then
	   output = output || cv_octal(bin(addrb));
	else if (mod=du)&(substr(output,1,1)="f") then
	   output = output || cv_float((addrb));
	else output = output || cv_octal((addrf));
	if substr(word, 19, 18) = "000101000000000011"b	/* adwpms n,du */
	then stack_height = stack_height + addrf;
	else if mod = "000100"b then do;		/*  ,ic  */
		output = output || ",ic		";
		output = output || cv_octal(ic+addrf);
		constp = addrel(seg_ptr, ic+addrf);

		/* attempt to display the value of the constant referenced */

		if opcode = "001001111"b		/* cmpaq */
		 | opcode = "010011111"b then do;	/* ldaq */
		     output = output || " = ";
		     if constp -> fixnum_fmt.type_info = fixnum_type then do;
			output = output || "fixnum ";
			output = output || cv_dec((constp -> fixedb));
			output = output || ".";	/* indicate decimal */
			end;
		     else if constp -> flonum_fmt.type_info = flonum_type then do;
			output = output || "flonum ";
			output = output || convert_sfl_(constp -> floatb, 7);
			end;
		     else do;		/* something random */
			output = output || cv_octal_word(constp -> w1);
			output = output || " ";
			output = output || cv_octal_word(constp -> w2);
			end;
		     end;

		else if (opcode & "100001100"b) = "000001100"b then do;  /* fixed point add subtract */
		     output = output || " = ";
		     output = output || cv_dec(constp -> w1);
		     end;

                    else if (opcode & "111110000"b) = "110000000"b |
                            (opcode & "111110000"b) = "111000000"b then;  /* transfer */
		else do;	/* Some random instruction, put it in octal */
		     output = output || " = ";
		     output = output || cv_octal_word(constp -> w1);
		     end;

		end;
	else if mod^=""b then do;
	   output = output || tags(bin(mod));
	   end;


	/* check for transfer +n,ic instructions.  If we find one,
	   update its entry in label table to contain current stack_height */

	if (rt_half & "111111000011111111"b) = "110000000000000100"b	/* conditional tra,ic */
	 | rt_half = "111001000000000100"b then do;

		traref = ic + addrf;
		labu = 1;
		labh = number_of_labels;
		do while(labh >= labu);
		   labx = labu + divide(labh-labu, 2, 17, 0);
		   if label(labx).address = traref then do;
			label(labx).stack_ht = stack_height;
			label(labx).save_bind_stack_ptr = bind_stack_ptr;
			go to end_tra_loop;
			end;
	 	   else if label(labx).address < traref then labu = labx+1;
		   else labh = labx-1;
		   end;
		/* shouldn't come out this way (label not found) */
end_tra_loop:		/* should come out this way */

		end;		/* end of tra code */


	if comment_sw
	then do;
	     output = output || "		";
	     output = output || op_names(operator);
	     stack_height = stack_height + op_stack_adj(operator);
	     go to ophack(op_special(operator));
ophack(0):     go to exit;		/* default case */

ophack(1):     /* unbind */
	     bind_stack_ptr = bind_stack_ptr - 1;
	     if bind_stack_ptr <= 0 then signal mll_internal_error;
	     stack_height = stack_height - bind_stack(bind_stack_ptr);
	     go to exit;

ophack(2):     /* iog bind */
	     if bind_stack_ptr > hbound(bind_stack, 1) then signal mll_internal_error;
	     bind_stack(bind_stack_ptr) = 16;
	     bind_stack_ptr = bind_stack_ptr + 1;
	     go to exit;

ophack(3):     /* call */
	     if ^ link_sw then output = output || "		?????";	/* you have lost badly */

exit:	     end;

	else if tempf then do;		/* put comment for reference to temporary */
		output = output || "		temp ";
		output = output || cv_dec(divide(offsetf+stack_height, 2, 18, 0));
		end;

	else if atom_sw then do;	/* display name of referenced atom */
		output = output || "		";
		if substr(word, 31, 2) = "00"b	/* not indirect */
		then output = output || "'";		/* flag constant rather than variable */
		output = output || atom_name_ptr -> atom_name;
		end;

	else if link_sw then do;	/* decode a link */

		output = output || "		";
		unspec(link) = link_table_ptr -> link_info(divide(offsetf-link_table_lbound, 2, 18, 0)+1);
		if ^ link.constant then do;
			output = output || "ms|";
			output = output || cv_octal((link.address));
			output = output || " (temp ";
			output = output || cv_dec(divide(link.address+stack_height, 2, 18, 0));
			output = output || ")";
			end;
		else do;
		     if link.address >= constant_table_lbound
		     then if link.address <= constant_table_hbound
		     then if constant_table(1+divide(link.address-constant_table_lbound, 2, 18, 0)).atom_table_index ^= 0
		     then do;		/* atomic function */
			output = output || atom_table(constant_table(1+divide(link.address-constant_table_lbound, 2, 18, 0)).atom_table_index).ptr_to_name -> atom_name;
			go to exitgroup;
			end;
		     /* nonatomic function */
		     call lphack((link.address));

	      exitgroup:
		     end;

		/* special flags */

		if link.f then output = output || "  [F]";
		if link.snap = "0"b then output = output || "  [nosnap]";

		/* adjust stack height according to number of arguments */

		if link.f then stack_height = stack_height - 2;
		else if link.nargs = "111111111"b
	               then stack_height = stack_height + arg_twiddle;
		else stack_height = stack_height - 2*fixed(link.nargs, 9);

		end;

	else if abr then if base = "100"b then if opcode = "111001110"b then do;	/* xec of an array link */
		unspec(array_link) = array_link_table_ptr -> array_link_control_word(
				divide(offsetf-array_link_table_lbound, 4, 17, 0)+1);
		output = output || "		array ";
		if array_link.address >= constant_table_lbound
		then if array_link.address <= constant_table_hbound
		then if constant_table(1+divide(array_link.address-constant_table_lbound, 2, 17, 0)).atom_table_index ^= 0
		then do;
		     output = output || atom_table(constant_table(1+divide(array_link.address-constant_table_lbound,
							2, 17, 0)).atom_table_index).ptr_to_name -> atom_name;
		     end;
		end;


	return(output);

dump_lisp_binding_word_:
	entry(a_word, ic, a_tablep) returns(char(*));

dcl
	bind_class (0:7) char(5) varying static init(
	"op|",
	"ms|",
	"lp|",
	"",
	"ms|",
	"C(x5)",
	"ms|",
	"lp|"),

	bind_tags (0:7) char(3) varying static init(
	"",
	"",
	"",
	",ic",
	"",
	"",
	",*",
	",*"),

	rt_half bit(18) unal defined(word) pos(19),
	rt_half_fb  fixed bin(17) unal based(addr(rt_half));

	output = "bind    ";
	if base = "100"b
	then output = output || """argatom""";
	else do;		/* binding atom, discover its name */
	     if offsetf >= constant_table_lbound
	     then if offsetf <= constant_table_hbound
	     then if constant_table(1+divide(offsetf-constant_table_lbound, 2, 18, 0)).atom_table_index ^= 0
	     then output = output || atom_table(constant_table(1+divide(offsetf-constant_table_lbound,2 , 18, 0)).atom_table_index).ptr_to_name -> atom_name;
	     else call lphack((offsetf));
	     else call lphack((offsetf));
	     else call lphack((offsetf));

	   end;

	output = output || " to ";

	output = output || bind_class(fixed(base,3));

	if base ^= "101"b then do;
		output = output || cv_octal((rt_half_fb));
		output = output || bind_tags(fixed(base, 3));
		end;
	if base = "000"b		/* stack constant... */
	then do;
		operator = divide(rt_half_fb,2,17,0);
		if operator >= lbound(op_names,1) & operator<= hbound(op_names,1)
		then do;
			if length(output) < 16 then output = output || "	";
			output = output || "	";
			output = output || op_names(operator);
			end;
	     end;

	else if base = "001"b | base = "110"b | base = "100"b then do;	/* ms| */
		if length(output) < 16 then output = output || "	";
		output = output || "	temp ";
		output = output || cv_dec(divide(rt_half_fb+stack_height, 2, 18, 0));
		end;

	else if base = "010"b | base = "111"b then do;	/* lp| */
		if length(output) < 16 then output = output || "	";
		output = output || "	";
		if rt_half_fb >= constant_table_lbound
		then if rt_half_fb <= constant_table_hbound
		then if constant_table(1+divide(rt_half_fb-constant_table_lbound, 2, 18, 0)).atom_table_index ^= 0
		then output = output || atom_table(constant_table(1+divide(rt_half_fb-constant_table_lbound, 2, 18, 0)).atom_table_index).ptr_to_name -> atom_name;
		else call lphack((rt_half_fb));
		else call lphack((rt_half_fb));
		else call lphack((rt_half_fb));
		end;

	else if base = "011"b then do;		/*  ,ic  */
		if length(output) < 16 then output = output || "	";
		output = output || "	";
		output = output || cv_octal(rt_half_fb+ic);
		end;

	return (output);



lphack:  proc(xx);

dcl xx fixed bin (17) parameter;

	output = output || "lp|";
	output = output || cv_octal((xx));
	end lphack;

cv_dec:  proc(value) returns(char(*));

dcl value fixed bin(35),
    convert_binary_integer_$decimal_string entry(fixed bin(35)) returns(char(12) varying);

	return(convert_binary_integer_$decimal_string(value));
	end;


cv_octal:
	proc(value) returns(char(*));


dcl
	convert_binary_integer_$octal_string entry(fixed bin(35)) returns(char(13) var),
	value fixed bin(35);


	return(convert_binary_integer_$octal_string(value));

	end;


cv_float:
	proc(value) returns(char(*));

dcl
	fnum float bin(27),
	unspec builtin,
	value bit(*);


	unspec(fnum) = value;

	return(convert_sfl_(fnum, 4));

	end;

cv_octal_word:  procedure(value) returns(char(12));

dcl value fixed bin(35),
    bits bit(36) aligned,
    i fixed bin,
    (unspec, string, substr) builtin,
    results (12) char(1) unaligned,
    Zero bit(6) static init("000110"b);

	bits = unspec(value);
	do i = 1 to 12;
	   unspec(results(i)) = Zero || substr(bits, 3*i-2, 3);
	   end;
	return(string(results));
	end;


	end;
