/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cmcs_date_time_.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified since Version 4.3 */

/* format: style3 */
cmcs_date_time_:
     proc (a_clock_value, a_date, a_time);

dcl	a_clock_value	fixed bin (71),
	a_date		char (6) unaligned,
	a_time		char (8) unaligned;

/*
   This COBOL MCS procedure accepts a clock_ value as input and
   returns strings of form YYMMDD and HHMMSSTT, where
   YY is year
   MM is month
   DD is day
   and,
   HH is hour
   MM is minute
   SS is second
   TT is hundredths of a second

   It is directly adapted from the pl1_date_ and pl1_time_ subroutines, the difference being
   that the clock_ value is externally supplied and is used in both the date and time computations.

   Bob May, 6/30/77
   */

dcl	clock_value	fixed bin (71);		/* copy because we modify it */

dcl	sys_info$time_delta fixed bin ext,
	(date, day, month, year, i)
			fixed bin;

dcl	clk		float bin (63),
	(seconds, microseconds)
			fixed bin,
	digit		(0:9) char (1) aligned static init ("0", "1", "2", "3", "4", "5", "6", "7", "8", "9");

dcl	(divide, min, mod, substr)
			builtin;

/* */

dcl	table		(6) fixed bin (6) static init (10, 10, 6, 10, 6, 10);

	clock_value = a_clock_value + 5000;		/* round up to hundredths of a second, we'll truncate later */

	date = (clock_value - sys_info$time_delta) / 8.64e10 + 694266;
						/* days from 3-1-0000 */

	day = mod (date, 146097);			/* days into 400 year cycle */

	year = 400 * divide (date, 146097, 35, 0);	/* year set to beginning of cycle */

	date = 3 + 4 * (day + min (3, divide (date, 36534, 17, 0)));
						/* prepare year estimator */

	day = mod (date, 1461);			/* day = 4 * day_of_year (0 ... 365) */

	year = year + divide (date, 1461, 17, 0);	/* add in year of cycle */

	date = 2 + 5 * divide (day, 4, 17, 0);		/* prepare month estimator */

	day = mod (date, 153);			/* day = 5 * day_of_month (0 ... 30) */

	month = 1 + mod (2 + divide (date, 153, 17, 0), 12);
						/* get month */

	if month < 3
	then year = year + 1;			/* correct for jan, feb */

	day = 1 + divide (day, 5, 17, 0);		/* get day */

	date = year * 10000 + month * 100 + day;

	do i = 6 by -1 to 1;
	     substr (a_date, i, 1) = digit (mod (date, 10));
	     date = divide (date, 10, 35, 0);
	end;

	clk = mod (clock_value - sys_info$time_delta, 8.64e10);

	seconds = clk / 1.e6;
	microseconds = clk - seconds * 1.e6;
	seconds = mod (seconds, 86400);


	microseconds = microseconds / 10000.0;		/* convert microseconds to hundredths of a second */

	do i = 8 by -1 to 7;
	     substr (a_time, i, 1) = digit (mod (microseconds, 10));
	     microseconds = divide (microseconds, 10, 35, 0);
	end;

	do while (i > 0);
	     substr (a_time, i, 1) = digit (mod (seconds, table (i)));
	     seconds = divide (seconds, table (i), 35, 0);
	     i = i - 1;
	end;

	return;

     end /* cmcs_date_time_ */;
