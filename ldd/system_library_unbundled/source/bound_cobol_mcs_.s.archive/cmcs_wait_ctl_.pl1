/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8087),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8087 cmcs_wait_ctl_.pl1 Shorten wait time for cmcs_station_ctl_.
                                                   END HISTORY COMMENTS */


/* Modified on 10/20/84 by FCH, [5.3-1], BUG565(phx18385), wait time for set_lock_$lock */
/* Modified since Version 4.3 */




/* format: style3 */
cmcs_wait_ctl_:
     proc;

	return;					/* bad entrypoint */

/* This COBOL MCS subroutine is used to manage the wait control lists. The lists
   are linked forward and backward by entry index. All additions are done at the end of the list.
   Deletions can occur anywhere. Lists are always searched from the beginning,
   in order to serve requests on a first-come, first-served (when appropriate) basis.

   Note: the wait_ctl.current_size is not decremented even when the last physical entry of the segment
   is deleted. The entry is just added to the free list. The segment will never have more entries
   than the maximum number of concurrent users, so it will never grow to unreasonable size. */

/* Bob May, 6/30/77 */

/* DEBUG dcls */

dcl	(sub_err_, ioa_)	entry options (variable);

dcl	sub_err_retval	fixed bin (35);		/* dummy for sub_err_ */

/* input/output parameters */

dcl	a_tree_path	char (48),
	a_index		fixed bin,
	a_queue_ctl_eptr	ptr,
	a_wait_ctl_mp_eindex
			fixed bin,
	a_tree_ctl_eindex	fixed bin,
	a_code		fixed bin (35);

/* variables to manipulate entries */

dcl	(c_ptr, b_ptr, f_ptr)
			ptr,
	(c_index, b_index, f_index)
			fixed bin,
	1 c		like wait_ctl_entry based (c_ptr),
						/* "current" entry */
	1 b		like wait_ctl_entry based (b_ptr),
						/* entry before current entry */
	1 f		like wait_ctl_entry based (f_ptr);
						/* entry following current entry */

dcl	i		fixed bin,
	new_index		fixed bin;		/* additional FB to process entry indices */

dcl	code		fixed bin (35);

dcl	my_name		char (14) int static init ("cmcs_wait_ctl_");

dcl	test_sw		bit (1) int static init ("0"b);

dcl	(
	free_flag		init ("1"b),
	used_flag		init ("0"b)
	)		bit (1) aligned int static options (constant);

dcl	get_process_id_	entry () returns (bit (36) aligned);

dcl	hcs_$wakeup	entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35)),
	ipc_$create_ev_chn	entry (fixed bin (71), fixed bin (35)),
	ipc_$block	entry (ptr, ptr, fixed bin (35));

dcl	error_table_$action_not_performed
			fixed bin (35) external;

dcl	(addr, null, string)
			builtin;

/*  */
%include cmcs_control_hdr;
%include cmcs_entry_dcls;
%include cmcs_error_table_dcls;
%include cmcs_queue_ctl;
%include cmcs_tree_ctl;
%include cmcs_user_ctl;
%include cmcs_vfile_rs;
%include cmcs_wait_ctl;
/*  */
add:
     entry (a_tree_path, a_index, a_code);

	if ^(external_user_ctl_ptr -> user_ctl.init_sw.wait_ctl)
	then call setup;

	call lock;
	if a_code ^= 0
	then return;

	call get_free_index (a_index);

	wait_ctl_eptr = addr (wait_ctl.entries (a_index));
	wait_ctl_entry.rcv_process_id = get_process_id_ ();
						/* set owner info */
	string (wait_ctl_entry.rcv_tree_path) = a_tree_path;
	wait_ctl_entry.ev_wait_chn = user_ctl.ev_wait_chn;

	call link_index (a_index, used_flag);
	call unlock;

	if test_sw
	then call ioa_ ("Now going to sleep.");

/* Code to go to sleep until wakeup goes here */

	call ipc_$block (user_ctl.ev_wait_list_ptr, user_ctl.ev_info_ptr, a_code);

	return;

/* end of add entrypoint */

find:
     entry (a_tree_path, a_queue_ctl_eptr, a_code);

	if ^(external_user_ctl_ptr -> user_ctl.init_sw.wait_ctl)
	then call setup;

	queue_ctl_eptr = a_queue_ctl_eptr;

	call lock;
	if a_code ^= 0
	then return;

	call find_index (new_index);
	if a_code ^= 0				/* First check to see if COBOL program waiting */
	then do;
		if a_code ^= cmcs_error_table_$no_message
		then do;				/* should never happen */
			call unlock;
			return;
		     end;

/* Drop-through means that no COBOL program was waiting */

		tree_ctl_eindex = queue_ctl_entry.tree_ctl_eindex;
						/* should we notify an mp? */
		tree_ctl_eptr = addr (tree_ctl.entries (tree_ctl_eindex));

		if (tree_ctl_entry.mp_sw | tree_ctl_entry.cobol_program_id_sw)
						/* don't bother unless there is some thing to do */
		then if wait_ctl.mp_info.mp_active_count > 0
		     then do wait_ctl_mp_eindex = 1 to wait_ctl.mp_current_size;
			     wait_ctl_mp_eptr = addr (wait_ctl.mp_info.mp_entries (wait_ctl_mp_eindex));
			     if wait_ctl_mp_entry.process_id ^= (36)"0"b
			     then if wait_ctl_mp_entry.available_sw
						/* found waiting mp */
				then do;
					wait_ctl_mp_entry.available_sw = "0"b;
					wait_ctl_mp_entry.ev_message = 0;
						/* unused for the present */
					wait_ctl_mp_entry.tree_ctl_eindex = queue_ctl_entry.tree_ctl_eindex;
					call hcs_$wakeup (wait_ctl_mp_entry.process_id,
					     wait_ctl_mp_entry.ev_wait_chn, 0, code);
					if code ^= 0
					then call sub_err_ (code, my_name, "c", null (), sub_err_retval,
						"Attempting to send wakeup to message processor (^w). Continuing.",
						wait_ctl_mp_entry.process_id);
					go to find_mp_ret;
				     end;
			end;

/* Drop-through means no message processors available either */

find_mp_ret:
		call unlock;
		a_code = 0;
		return;
	     end;

/* Got to here, so we found a COBOL program that was waiting on a receive */

	tree_ctl_eindex, c.tree_ctl_eindex = queue_ctl_entry.tree_ctl_eindex;

	tree_ctl_eptr = addr (tree_ctl.entries (tree_ctl_eindex));
	string (c.abs_tree_path) = string (tree_ctl_entry.tree_path);
	c.queue_ctl_eindex = tree_ctl_entry.queue_ctl_eindex;
	c.queue_name = tree_ctl_entry.queue_name;
	c.ev_message = 0;

	wait_ctl_eptr = addr (wait_ctl.entries (new_index));

	if test_sw
	then do;
		call ioa_ ("wait_ctl_$wakeup:^-^a, ^p", a_tree_path, a_queue_ctl_eptr);
						/* DEBUG */
		call ioa_ ("^2-^a.", string (wait_ctl_entry.rcv_tree_path));
						/* DEBUG */
	     end;

	call hcs_$wakeup (wait_ctl_entry.rcv_process_id, wait_ctl_entry.ev_wait_chn, 0, a_code);
						/* 0 says process message */
	if a_code ^= 0
	then call sub_err_ (a_code, my_name, "c", null (), sub_err_retval,
		"Attempting to send wakeup to waiting process. Continuing.");
	call unlock;

	return;

/* end of find entrypoint */

/*  */

delete:
     entry (a_index, a_code);

	if ^(external_user_ctl_ptr -> user_ctl.init_sw.wait_ctl)
	then call setup;

	wait_ctl_eptr = addr (wait_ctl.entries (a_index));
	if get_process_id_ () = wait_ctl_entry.rcv_process_id
	then do;
		call lock;
		if a_code ^= 0
		then return;
		call unlink_index (a_index, used_flag);
		call link_index (a_index, free_flag);	/* keep it for reuse */
		call unlock;
		a_code = 0;
	     end;
	else do;					/* wrong index */
		a_code = error_table_$action_not_performed;
	     end;

	return;

/* end of delete entrypoint */

/*  */
link_index:
     proc (x_index, x_free_flag);

dcl	x_index		fixed bin,
	x_free_flag	bit (1) aligned;

	c_index = x_index;
	c_ptr = addr (wait_ctl.entries (c_index));
	c.findex = 0;				/* new entry always added at (logical) end */

	if x_free_flag
	then do;					/* added to free list */
		b_index = wait_ctl.free.bindex;
		if b_index = 0
		then do;				/* new entry is only entry */
			wait_ctl.free.bindex, wait_ctl.free.findex = c_index;
			c.bindex = 0;		/* new, only entry can only point back to hdr */
		     end;
		else do;
			b_ptr = addr (wait_ctl.entries (b_index));
			b.findex = c_index;		/* make old last entry point forward to new, only one */
			c.bindex = b_index;		/* point back to old last entry */
			wait_ctl.free.bindex = c_index;
						/* now points to new, only entry */
		     end;
		c.entry_status = 0;			/* free */
		wait_ctl.free.count = wait_ctl.free.count + 1;
	     end;
	else do;					/* added to used list */
		b_index = wait_ctl.used.bindex;
		if b_index = 0
		then do;				/* new, only entry is only entry */
			wait_ctl.used.bindex, wait_ctl.used.findex = c_index;
			c.bindex = 0;		/* new, only entry can only point back to hdr */
		     end;
		else do;
			b_ptr = addr (wait_ctl.entries (b_index));
			b.findex = c_index;		/* make old last entry point forward to new one */
			c.bindex = b_index;		/* point back to old last entry */
			wait_ctl.used.bindex = c_index;
						/* now points to new last entry */
		     end;
		c.entry_status = 1;			/* used */
		wait_ctl.used.count = wait_ctl.used.count + 1;
	     end;

	return;

     end /* link_index */;

/*  */
unlink_index:
     proc (x_index, x_free_flag);

dcl	x_index		fixed bin,
	x_free_flag	bit (1) aligned;

	c_index = x_index;
	c_ptr = addr (wait_ctl.entries (c_index));
	b_index = c.bindex;
	f_index = c.findex;
	if b_index = 0
	then if x_free_flag				/* current is first record (logically) following hdr */
	     then wait_ctl.free.findex = f_index;	/* free list */
	     else wait_ctl.used.findex = f_index;	/* used list */
	else do;					/* current was not the 1st record following hdr */
		b_ptr = addr (wait_ctl.entries (b_index));
		b.findex = f_index;
	     end;
	if f_index = 0
	then if x_free_flag				/* current is last record in one list or the other */
	     then wait_ctl.free.bindex = b_index;	/* free list */
	     else wait_ctl.used.bindex = b_index;	/* used list */
	else do;					/* current was not last entry in list */
		f_ptr = addr (wait_ctl.entries (f_index));
		f.bindex = b_index;
	     end;

	if x_free_flag
	then wait_ctl.free.count = wait_ctl.free.count - 1;
	else wait_ctl.used.count = wait_ctl.used.count - 1;

	c.findex, c.bindex = 262143;			/* 777777, easy to spot unlinked entries */

	return;

     end /* unlink_index */;

/*  */

find_index:
     proc (x_index);

dcl	x_index		fixed bin;		/* output, 0 if none found */

dcl	x_level_names	(4) char (12) based (addr (a_tree_path));

	if wait_ctl.used.count = 0
	then go to not_found;			/* don't look any further */

	c_index = wait_ctl.used.findex;


find_index_loop:
	if c_index = 0				/* will never happen 1st time through */
	then go to not_found;			/* we exhausted the list without an appropriate match */

	c_ptr = addr (wait_ctl.entries (c_index));
	if x_level_names (1) = c.rcv_tree_path.level_names (1)
	then do i = 2 to 4;				/* there's hope, check the rest */
		if c.rcv_tree_path.level_names (i) = ""
		then go to found;			/* req was for higher level, which is fine */
		if x_level_names (i) ^= c.rcv_tree_path.level_names (i)
		then go to find_index_continue;	/* doesn't agree at higher levels, forget it */
	     end;

find_index_continue:
	c_index = c.findex;
	go to find_index_loop;

found:
	x_index = c_index;
	a_code = 0;
	return;

not_found:
	x_index = 0;
	a_code = cmcs_error_table_$no_message;
	return;

     end /* find_index */;

/*  */
setup:
     proc;

	if ^(external_user_ctl_ptr -> user_ctl.init_sw.wait_ctl)
	then do;

		user_ctl_ptr = external_user_ctl_ptr;	/* set local variable from global */

		queue_ctl_ptr = user_ctl.queue_ctl_ptr;
		tree_ctl_ptr = user_ctl.tree_ctl_ptr;
		wait_ctl_ptr = user_ctl.wait_ctl_ptr;

		user_ctl.init_sw.wait_ctl = "1"b;
	     end;

	a_code = 0;

	return;

     end /* setup */;

/* */

get_free_index:
     proc (x_index);				/* caller must link back in */

dcl	x_index		fixed bin;

	if wait_ctl.free.count = 0
	then do;					/* this is the easy way */
		x_index, wait_ctl.current_size, wait_ctl.entry_count = wait_ctl.current_size + 1;
	     end;
	else do;
		x_index = wait_ctl.free.findex;	/* take the first one */
		call unlink_index (x_index, free_flag); /* let caller link it to used list */
	     end;

	return;

     end /* get_free_index */;


/*  */

mp_login:
     entry (a_wait_ctl_mp_eindex, a_code);

	if ^(external_user_ctl_ptr -> user_ctl.init_sw.wait_ctl)
	then call setup;

	if user_ctl.ev_wait_chn = 0 | user_ctl.process_id = (36)"0"b
	then do;
		a_code = cmcs_error_table_$bad_call_parm;
mp_err:
		a_wait_ctl_mp_eindex = -1;		/* if they try to use it, we'll blow */
		call sub_err_ (a_code, my_name, "c", null (), sub_err_retval,
		     "Error found in message processor login control info. Returning to caller.");
		return;
	     end;

	call mp_lock;
	if a_code ^= 0
	then return;

/* First check to see if mp is already logged in */

	if wait_ctl.mp_current_size > 0
	then do;
		do i = 1 to wait_ctl.mp_current_size;
		     wait_ctl_mp_eptr = addr (wait_ctl.mp_info.mp_entries (i));
		     if wait_ctl_mp_entry.process_id = user_ctl.process_id
		     then do;
			     call mp_unlock;
			     a_code = cmcs_error_table_$bad_call_parm;
			     go to mp_err;
			end;
		end;

/* So far, so good. Now, do we have any open slots already? */

		do wait_ctl_mp_eindex = 1 to wait_ctl.mp_info.mp_current_size;
		     wait_ctl_mp_eptr = addr (wait_ctl.mp_info.mp_entries (wait_ctl_mp_eindex));
		     if wait_ctl_mp_entry.process_id = (36)"0"b
		     then do;
set_mp_info:
			     string (wait_ctl_mp_entry.flags) = (36)"0"b;
			     wait_ctl_mp_entry.ev_wait_chn = user_ctl.ev_wait_chn;
			     wait_ctl_mp_entry.process_id = user_ctl.process_id;
			     wait_ctl.mp_info.mp_active_count = wait_ctl.mp_info.mp_active_count + 1;
			     a_wait_ctl_mp_eindex = wait_ctl_mp_eindex;
						/* all future calls will use this index */
			     call mp_unlock;
			     a_code = 0;
			     return;
			end;
		end;
	     end;

/* Got to here, so we must increase the current size of the table for the new entry */

	if wait_ctl.mp_info.mp_current_size < 10
	then do;
		wait_ctl_mp_eindex, wait_ctl.mp_info.mp_current_size = wait_ctl.mp_info.mp_current_size + 1;
		wait_ctl_mp_eptr = addr (wait_ctl.mp_info.mp_entries (wait_ctl_mp_eindex));
		go to set_mp_info;
	     end;

	else do;					/* already have 10 message processors */
		a_code = error_table_$action_not_performed;
		go to mp_err;
	     end;

/* end of mp_login entrypoint */

/* */

mp_available:
     entry (a_wait_ctl_mp_eindex, a_tree_ctl_eindex, a_code);

	if ^(external_user_ctl_ptr -> user_ctl.init_sw.wait_ctl)
	then call setup;

/* No need to use mp_lock because entry is ignored until we set the available_sw true */

	wait_ctl_mp_eptr = addr (wait_ctl.mp_info.mp_entries (a_wait_ctl_mp_eindex));
	wait_ctl_mp_entry.available_sw = "1"b;

	call ipc_$block (user_ctl.ev_wait_list_ptr, user_ctl.ev_info_ptr, a_code);
	return;

/* end of mp_available entrypoint */

/* */

mp_logout:
     entry (a_wait_ctl_mp_eindex, a_code);

	if ^(external_user_ctl_ptr -> user_ctl.init_sw.wait_ctl)
	then call setup;

	wait_ctl_mp_eindex = a_wait_ctl_mp_eindex;
	wait_ctl_mp_eptr = addr (wait_ctl.mp_info.mp_entries (wait_ctl_mp_eindex));

	call mp_lock;
	if a_code ^= 0
	then return;

	wait_ctl_mp_entry.process_id = (36)"0"b;
	wait_ctl_mp_entry.ev_wait_chn = 0;
	string (wait_ctl_mp_entry.flags) = (36)"0"b;
	if wait_ctl.mp_info.mp_active_count ^= 0
	then wait_ctl.mp_info.mp_active_count = wait_ctl.mp_info.mp_active_count - 1;

	if wait_ctl_mp_eindex = wait_ctl.mp_info.mp_current_size
	then wait_ctl.mp_info.mp_current_size = wait_ctl.mp_info.mp_current_size - 1;

	call mp_unlock;
	a_code = 0;
	return;

/* end of mp_logout entrypoint */

/*  */

clear_mp:
     entry (a_code);

/* Used to force a reset to zero of the message processor control information.
   This is necessary in case of a crash with active message processors. */

/*[5.3-1]*/
	call cmcs_set_lock_$lock (wait_ctl.hdr.lockword, 0, a_code);
	if a_code ^= 0
	then do;
		call sub_err_ (a_code, my_name, "c", null (), sub_err_retval,
		     "Attempting to set lock in preparation for clear_mp request. Returning to request level.");
		return;
	     end;

	if wait_ctl.mp_info.mp_active_count > 0
	then call sub_err_ (0, my_name, "c", null (), sub_err_retval,
		"Active message processor count reset from ^d to 0.", wait_ctl.mp_info.mp_active_count);

	do i = 1 to 10;
	     wait_ctl_mp_eptr = addr (wait_ctl.mp_info.mp_entries (i));
	     wait_ctl_mp_entry.process_id = (36)"0"b;
	     string (wait_ctl_mp_entry.flags) = (36)"0"b;
	end;
	wait_ctl.mp_info.mp_active_count, wait_ctl.mp_info.mp_current_size = 0;
	call cmcs_set_lock_$unlock (wait_ctl.mp_info.mp_lockword, a_code);
						/* ignore status */

	a_code = 0;
	return;

/* end of clear_mp entrypoint */

/* */

start_mp:
     entry (a_code);

/* Used to wakeup message processors explicitly because the queues are already non-empty.
   The message processors must already be logged in and available. */

	do queue_ctl_eindex = 1 to queue_ctl.current_size;
	     queue_ctl_eptr = addr (queue_ctl.entries (queue_ctl_eindex));
	     if queue_ctl_entry.status_list_ctl_entries (2).count > 0
	     then do;				/* messages waiting to be processed */
		     tree_ctl_eindex = queue_ctl_entry.tree_ctl_eindex;
		     tree_ctl_eptr = addr (tree_ctl.entries (tree_ctl_eindex));
						/* needed for getting short queue name in case of trouble */
		     call start_next_mp;
		     if a_code ^= 0
		     then return;
		end;
	end;

	return;

/* end of start_mp entrypoint */

/* */

stop_mp:
     entry (a_code);

	if ^(external_user_ctl_ptr -> user_ctl.init_sw.wait_ctl)
	then call setup;

	call mp_lock;
	if a_code ^= 0
	then return;

/* Send a wakeup with a message of 1 to all mps. All will get this either immediately or the next time they go blocked */

	if wait_ctl.mp_info.mp_active_count > 0
	then do wait_ctl_mp_eindex = 1 to wait_ctl.mp_info.mp_current_size;
		wait_ctl_mp_eptr = addr (wait_ctl.mp_info.mp_entries (wait_ctl_mp_eindex));
		if wait_ctl_mp_entry.process_id ^= (36)"0"b
		then do;
			call hcs_$wakeup (wait_ctl_mp_entry.process_id, wait_ctl_mp_entry.ev_wait_chn, 1, a_code);
						/* 1 says to logout */
			if a_code ^= 0
			then call sub_err_ (code, my_name, "c", null (), sub_err_retval,
				"Attempting to send wakeup to tell process (^b) to log out. Continuing.",
				wait_ctl_mp_entry.process_id);
		     end;
	     end;
	call mp_unlock;
	a_code = 0;
	return;

/* end of stop_mp entrypoint */

/*  */

start_next_mp:
     proc ();

/* Finds the next available message processor and sends it a wakeup. It will complain if none are available,
   rather than sending multiple wakeups to a single process. */

dcl	old_wait_ctl_mp_eindex
			fixed bin int static init (0);/* To make sure we don't just continue looping */

	if old_wait_ctl_mp_eindex = 0
	then wait_ctl_mp_eindex, old_wait_ctl_mp_eindex = 1;
						/* first time through, initialize */

	do i = 1 to wait_ctl.mp_info.mp_current_size;
	     wait_ctl_mp_eindex = wait_ctl_mp_eindex + 1;
	     if wait_ctl_mp_eindex > wait_ctl.mp_info.mp_current_size
	     then wait_ctl_mp_eindex = 1;		/* don't overflow the table entries */
	     if wait_ctl_mp_eindex = old_wait_ctl_mp_eindex
	     then do;				/* didn't finnd an available mp */
		     a_code = error_table_$action_not_performed;
		     call sub_err_ (a_code, my_name, "c", null (), sub_err_retval,
			"Couldn't find an available message processor to start for ^a.", tree_ctl_entry.queue_name);
						/* without the suffix */
		     return;
		end;

	     wait_ctl_mp_eptr = addr (wait_ctl.mp_info.mp_entries (wait_ctl_mp_eindex));
	     if wait_ctl_mp_entry.process_id ^= (36)"0"b
	     then if wait_ctl_mp_entry.available_sw
		then do;
			call hcs_$wakeup (wait_ctl_mp_entry.process_id, wait_ctl_mp_entry.ev_wait_chn, 0, a_code);
			if a_code ^= 0
			then do;
				call sub_err_ (a_code, my_name, "c", null (), sub_err_retval,
				     "Attempting to send wakeup to message processor for queue ^a.",
				     tree_ctl_entry.queue_name);
				return;
			     end;
			else do;
				wait_ctl_mp_entry.available_sw = "0"b;
						/* now this one is busy */
				call sub_err_ (0, my_name, "c", null (), sub_err_retval,
				     "Started message processor for queue ^a.", tree_ctl_entry.queue_name);
			     end;
		     end;
	end;

	a_code = 0;
	return;

     end /* start_next_mp */;

/*  */

test:
     entry;

	test_sw = "0"b;
	return;

/* end of test entrypoint */

/* */

lock:
     proc;

/*[5.3-1]*/
	call cmcs_set_lock_$lock (wait_ctl.hdr.lockword, 0, a_code);
	if a_code ^= 0
	then call sub_err_ (a_code, my_name, "c", null (), sub_err_retval, "Attempting to lock wait control.");
	return;

     end /* lock */;

/* */

mp_lock:
     proc;

/*[5.3-1]*/
	call cmcs_set_lock_$lock (wait_ctl.mp_lockword, 0, a_code);
	if a_code ^= 0
	then call sub_err_ (a_code, my_name, "c", null (), sub_err_retval,
		"Attempting to lock message processor wait control.");
	return;

     end /* mp_lock */;

/* */

unlock:
     proc;

	call cmcs_set_lock_$unlock (wait_ctl.hdr.lockword, a_code);
	if a_code ^= 0
	then call sub_err_ (a_code, my_name, "c", null (), sub_err_retval, "Attempting to unlock wait control.");
	return;

     end /* unlock */;

/* */

mp_unlock:
     proc;

	call cmcs_set_lock_$unlock (wait_ctl.mp_lockword, a_code);
	if a_code ^= 0
	then call sub_err_ (a_code, my_name, "c", null (), sub_err_retval,
		"Attempting to unlock message processor wait control.");
	return;

     end /* mp_unlock */;

     end /* cmcs_wait_ctl_ */;
