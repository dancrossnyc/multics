/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cmcs_purge_queues_.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 03/03/81 by FCH, [4.4-1], once per process initialization, BUG468 */
/* Modified since Version 4.3 */

/* format: style3 */
cmcs_purge_queues_:
     proc (a_queue_ctl_eindex, a_long_sw, a_code);

dcl	a_queue_ctl_eindex	fixed bin,
	a_long_sw		bit (1),
	a_code		fixed bin (35);

dcl	i		fixed bin;		/* dummy to avoid looping for count ^= 0 */

dcl	my_name		char (18) int static options (constant) init ("cmcs_purge_queues_");

dcl	sub_err_		entry options (variable);
dcl	sub_err_retval	fixed bin (35);

dcl	iocb_ptr		ptr;

dcl	(
	ioa_,
	ioa_$rsnnl
	)		entry options (variable);

dcl	1 msg_descr	int static like vfile_descr;

dcl	msg_descr_ptr	ptr int static;

dcl	fb21		fixed bin (21);



dcl	(msg_no, seg_no)	fixed bin (35);

dcl	1 static_vfile_rs	int static like vfile_rs;

dcl	attach_descr	char (256),
	attach_descr_len	fixed bin;

dcl	switch_name	char (7) int static options (constant) init ("cmcs_pq");

dcl	overlay_len	fixed bin,
	overlay		(overlay_len) fixed bin (35) based;

dcl	(error_table_$no_record)
			fixed bin (35) external;

dcl	(addr, fixed, null, size, substr)
			builtin;

/*  */

%include cmcs_control_hdr;
%include cmcs_entry_dcls;
%include cmcs_error_table_dcls;
%include cmcs_iox_processing;
%include cmcs_key_dcls;
%include cmcs_msg_hdr;
%include cmcs_msg_seg;
%include cmcs_queue_ctl;
%include cmcs_user_ctl;
%include cmcs_vfile_rs;

/*  */

/*[4.4-1]*/
	if ^(external_user_ctl_ptr -> user_ctl.init_sw.purge_queues)
	then call setup;

	if a_queue_ctl_eindex = 0
	then do queue_ctl_eindex = 1 to queue_ctl.current_size;

		call purge_queue;

	     end;

	else do;

		queue_ctl_eindex = a_queue_ctl_eindex;

		if queue_ctl_eindex < 1 | queue_ctl_eindex > queue_ctl.current_size
		then do;

			a_code = cmcs_error_table_$bad_call_parm;
			return;

		     end;

		call purge_queue;			/* dropped thru, specific index ok */

	     end;

	a_code = 0;
	return;

/* */

purge_queue:
     proc ();

/* Requires that queue_ctl_eindex be set to desired queue prior to call */

	queue_ctl_eptr = addr (queue_ctl.entries (queue_ctl_eindex));

	if a_long_sw
	then call ioa_ ("Queue ^a^/^-Partial sends = ^d^/^-Available = ^d^/^-Partial receives ^d^/^-Completed = ^d",
		queue_ctl_entry.queue_name, queue_ctl_entry.status_list_ctl_entries (1).count,
		queue_ctl_entry.status_list_ctl_entries (2).count, queue_ctl_entry.status_list_ctl_entries (3).count,
		queue_ctl_entry.status_list_ctl_entries (4).count);

	call ioa_$rsnnl ("vfile_ ^a>^a -old", attach_descr, attach_descr_len, user_ctl.cmcs_dir,
	     queue_ctl_entry.queue_name);

	call iox_$attach_name (switch_name, iocb_ptr, substr (attach_descr, 1, attach_descr_len), null (), a_code);

	if a_code ^= 0
	then do;

		call sub_err_ (a_code, my_name, "c", null (), sub_err_retval, "Attempting to attach queue ^a.",
		     queue_ctl_entry.queue_name);

		go to pq_ret;

	     end;

	call iox_$open (iocb_ptr, 13, "0"b, a_code);

	if a_code ^= 0
	then do;

		call sub_err_ (a_code, my_name, "c", null (), sub_err_retval, "Attempting to open ^a.",
		     queue_ctl_entry.queue_name);

		go to detach;

	     end;

	do status_list_ctl_eindex = 1, 3, 4;

	     status_list_ctl_eptr = addr (queue_ctl_entry.status_list_ctl_entries (status_list_ctl_eindex));

	     do i = 1 to status_list_ctl_entry.count;

		msg_descr = status_list_ctl_entry.f_descr;
						/* get first in list */

		if status_list_ctl_eindex = 3
		then do;
			call cmcs_status_list_ctl_$move (queue_ctl_eptr, iocb_ptr, msg_descr_ptr, 3, 2, a_code);

			if a_code ^= 0
			then do;

				call sub_err_ (a_code, my_name, "c", null (), sub_err_retval,
				     "Attempting to move status 3 message back to status 2.");

				go to end_count_loop;

			     end;
		     end;
		else do;				/* 1 or 4, delete it */

			static_vfile_rs.descr = status_list_ctl_entry.f_descr;

			call iox_$control (iocb_ptr, "record_status", vfile_rs_ptr, a_code);

			if a_code ^= 0
			then do;

				call sub_err_ (a_code, my_name, "c", null (), sub_err_retval,
				     "Attempting to seek descriptor to get the msg header.");

				msg_hdr_ptr = null ();
				msg_seg_ptr = null ();

				go to end_count_loop;

			     end;

			msg_hdr_ptr = static_vfile_rs.rec_ptr;
			msg_seg_ptr = addr (msg_hdr.msg_seg);

			msg_no = msg_hdr.msg_no;	/* for subsequent seek keys */

			call cmcs_status_list_ctl_$delete (queue_ctl_eptr, iocb_ptr, msg_descr_ptr,
			     status_list_ctl_eindex, a_code);

			if a_code ^= 0
			then do;

				call sub_err_ (a_code, my_name, "c", null (), sub_err_retval,
				     "Attempting to delete message from status list ^d.", status_list_ctl_eindex);

				go to end_count_loop;

			     end;

			key_struc.msg_no = msg_no;
			key_struc.seg_no = 0;

seg_delete_loop:
			key_struc.seg_no = key_struc.seg_no + 1;
			key = based_key;		/* to make vfile_ happy  */

			call iox_$seek_key (iocb_ptr, key, fb21, a_code);

			if a_code ^= 0
			then if a_code = error_table_$no_record
			     then go to end_count_loop;
			     else do;

				     call sub_err_ (a_code, my_name, "c", null (), sub_err_retval,
					"Attempting to seek ^d/^d for deletion.", key_struc.msg_no,
					key_struc.seg_no);

				     go to end_count_loop;

				end;

			call iox_$delete_record (iocb_ptr, a_code);

			if a_code ^= 0
			then do;

				call sub_err_ (a_code, my_name, "c", null (), sub_err_retval,
				     "Attempting to delete ^d/^d.", key_struc.msg_no, key_struc.seg_no);
				go to seg_delete_loop;

			     end;

		     end /* status 1 or 4 */;

end_count_loop:
	     end /* count > 0 */;
	end /* status 1, 3, or 4 */;

close:
	call iox_$close (iocb_ptr, a_code);

	if a_code ^= 0
	then call sub_err_ (a_code, my_name, "c", null (), sub_err_retval, "Attempting to close ^a.",
		queue_ctl_entry.queue_name);

detach:
	call iox_$detach_iocb (iocb_ptr, a_code);

	if a_code ^= 0
	then call sub_err_ (a_code, my_name, "c", null (), sub_err_retval, "Attempting to detach ^a.",
		queue_ctl_entry.queue_name);

pq_ret:
	return;

     end /* purge_queue */;

/* */

setup:
     proc ();

	user_ctl_ptr = external_user_ctl_ptr;
	queue_ctl_ptr = user_ctl.queue_ctl_ptr;

	msg_descr_ptr = addr (msg_descr);
	vfile_rs_ptr = addr (static_vfile_rs);
	overlay_len = size (static_vfile_rs);
	vfile_rs_ptr -> overlay (*) = 0;
	static_vfile_rs.locate_sw = "1"b;
	static_vfile_rs.version = vfile_rs_version;

	user_ctl.init_sw.purge_queues = "1"b;
	return;

     end /* setup */;

     end /* cmcs_purge_queues_ */;
