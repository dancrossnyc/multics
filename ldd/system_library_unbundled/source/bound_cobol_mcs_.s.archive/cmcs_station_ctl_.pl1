/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8087),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8087 cmcs_station_ctl_.pl1 Shorten wait time for cmcs_station_ctl_.
                                                   END HISTORY COMMENTS */


/* Modified on 10/20/84 by FCH, [5.3-1], BUG565(phx18385), wait time for set_lock_$lock */
/* Modified on 03/18/82 by FCH, [5.2-1], [4.4-4] was a disaster, BUG530 */
/* Modified on 06/08/81 by FCH, [4.4-5], code "20" not returned, BUG468 */
/* Modified on 05/12/81 by FCH, [4.4-4], zero deley if station in use, BUG468 */
/* Modified on 04/29/81 by FCH, [4.4-3], entry find_destination added, BUG468 */
/* Modified on 04/23/81 by FCH, [4.4-2], check destination count for legality, BUG468 */
/* Modified on 03/03/81 by FCH, [4.4-1], once per process initialization, BUG468 */
/* Modified since Version 4.3 */

/* format: style3 */
cmcs_station_ctl_:
     proc;

/* COBOL MCS subroutine to manage stations for enable and disable functions. */

/* Note: The disable/enable entrypoints all accept a char (10) password string. This string is ignored
   because it was already checked by cobol_mcs_. Current ANSI rules on the use of multiple passwords for CMCS
   terminals and queues is unclear and requests for clarification have been submitted. Until the clarification
   is issued, this implementation will use a single password. Thus, cobol_mcs_ can do the checking for everybody. */

/* Bob May, 6/01/77 */

	return;					/* bad entry point */

dcl	i		fixed bin,
	my_name		char (17) init ("cmcs_station_ctl_");


dcl	com_err_		entry options (variable);

dcl	a_station_name	char (12),
	a_station_ctl_eptr	ptr,
	a_station_ctl_eindex
			fixed bin,
	a_input_cdp	ptr,
	a_output_cdp	ptr,
	a_station_output_cdp,
	a_password	char (10),
	a_flag		bit (1),
	a_code		fixed bin (35);		/*[4.4-4]*/
declare	save_lwt		fixed bin;

dcl	x_station_name	char (12),
	station_count	fixed bin;		/* converted from char data */


dcl	(error_table_$invalid_lock_reset)
			fixed bin (35) external;

dcl	set_lock_$lock	entry (bit (36) aligned, fixed bin, fixed bin (35)),
	set_lock_$unlock	entry (bit (36) aligned, fixed bin (35));

dcl	(addr, null)	builtin;

/*  */
%include cmcs_cd_dcls;
%include cmcs_control_hdr;
%include cmcs_entry_dcls;
%include cmcs_error_table_dcls;
%include cmcs_station_ctl;
%include cmcs_system_ctl;
%include cmcs_user_ctl;
/*  */
validate:
     entry (a_station_name, a_station_ctl_eindex, a_code);

/*[4.4-1]*/
	call setup;

	call find_station (a_station_name);

	if a_code ^= 0
	then a_station_ctl_eindex = 0;
	else a_station_ctl_eindex = station_ctl_eindex;

	return;

/* end validate entrypoint */

attach:
     entry (a_station_name, a_station_ctl_eindex, a_code);

/*[4.4-1]*/
	call setup;

	call find_station (a_station_name);

	if a_code ^= 0
	then return;

/*[5.2-1]*/
/*save_lwt = system_ctl.lock_wait_time*/
/*[5.2-1]*/
/*system_ctl.lock_wait_time = 0;*/

	call lock_station;				/*[5.2-1]*/
						/*system_ctl.lock_wait_time = save_lwt;*/

	if a_code = 0
	then a_station_ctl_eindex = station_ctl_eindex;	/* went fine, give it to user */
	else a_station_ctl_eindex = 0;		/* if used, will blow */

	user_ctl.station_name = a_station_name;

	return;

/* */

detach:
     entry (a_station_ctl_eindex, a_code);

/*[4.4-1]*/
	call setup;

	station_ctl_eindex = a_station_ctl_eindex;
	station_ctl_eptr = addr (station_ctl.entries (station_ctl_eindex));

	call unlock_station;

	if a_code = 0
	then user_ctl.station_name = "";

	return;

/* */

detach_name:
     entry (a_station_name, a_code);

/*[4.4-1]*/
	call setup;

	call find_station (a_station_name);

	if a_code ^= 0
	then return;

	call unlock_station;

	if a_code = 0
	then user_ctl.station_name = "";

	user_ctl.station_name = "";

	return;

/* */

disable_input_terminal:
     entry (a_input_cdp, a_password, a_code);

/*[4.4-1]*/
	call setup;

	input_cdp = a_input_cdp;
	x_station_name = input_cd.station_name;

	call find_station (x_station_name);

	if a_code ^= 0
	then do;

		input_cd.status_key = "20";
		return;

	     end;

	if station_ctl_entry.input_disabled_sw
	then a_code = cmcs_error_table_$source_already_disabled;
	else do;

		station_ctl_entry.input_disabled_sw = "1"b;
		a_code = 0;

	     end;

	input_cd.status_key = "00";

	return;

/* */

enable_input_terminal:
     entry (a_input_cdp, a_password, a_code);

/*[4.4-1]*/
	call setup;

	input_cdp = a_input_cdp;
	x_station_name = input_cd.station_name;

	call find_station (x_station_name);

/*[4.4-5]*/
	if a_code ^= 0				/*[4.4-5]*/
	then do;
		input_cd.status_key = "20";		/*[4.4-5]*/
		return;				/*[4.4-5]*/
	     end;

	if ^station_ctl_entry.input_disabled_sw
	then a_code = cmcs_error_table_$source_already_enabled;
	else do;

		station_ctl_entry.input_disabled_sw = "0"b;
		a_code = 0;

	     end;

	input_cd.status_key = "00";

	return;					/* */
disable_output_terminal:
     entry (a_output_cdp, a_password, a_code);

/*[4.4-1]*/
	call setup;

	output_cdp = a_output_cdp;

	if output_cdp ^= null ()
	then do;					/* process the supplied list */

		output_cd.status_key = "00";		/* init to 00 is changed if any problem */
		station_count = output_cd.station_count;/* convert from char data */

/*[4.4-2]*/
		if station_count = 0 | station_count > output_cd.bin_max_station_count
						/*[4.4-2]*/
		then output_cd.status_key = "30";	/*[4.4-2]*/
		else do i = 1 to station_count;

			x_station_name = output_cd.station_name (i);

			call find_station (x_station_name);

			if a_code ^= 0
			then do;

				output_cd.error_key (i) = "1";
				output_cd.status_key = "20";

			     end;
			else output_cd.error_key (i) = "0";

			if station_ctl_entry.output_disabled_sw
			then a_code = cmcs_error_table_$dest_already_disabled;
			else do;

				station_ctl_entry.output_disabled_sw = "1"b;
				a_code = 0;

			     end;
		     end;
	     end;

/* null output_cdp, do them all and ignore status key */

	else do;

		do i = 1 to station_ctl.current_size;

		     if ^station_ctl.entries (i).inactive_sw
		     then station_ctl.entries (i).output_disabled_sw = "1"b;
						/* ignore previous state */

		end;

		a_code = 0;

	     end;

	return;

/* */

enable_output_terminal:
     entry (a_output_cdp, a_password, a_code);

/*[4.4-1]*/
	call setup;

	output_cdp = a_output_cdp;

	if output_cdp ^= null ()
	then do;					/* process the supplied list */

		output_cd.status_key = "00";		/* init to 00 is changed if any problem */
		station_count = output_cd.station_count;/* convert from char data */

/*[4.4-2]*/
		if station_count = 0 | station_count > output_cd.bin_max_station_count
						/*[4.4-2]*/
		then output_cd.status_key = "30";	/*{4.4-2]*/
		else do i = 1 to station_count;

			x_station_name = output_cd.station_name (i);

			call find_station (x_station_name);

			if a_code ^= 0
			then do;

				output_cd.error_key (i) = "1";
				output_cd.status_key = "20";

			     end;
			else output_cd.error_key (i) = "0";

			if ^station_ctl_entry.output_disabled_sw
			then a_code = cmcs_error_table_$dest_already_enabled;
			else do;

				station_ctl_entry.output_disabled_sw = "0"b;
				a_code = 0;

			     end;
		     end;
	     end;

/* null output_cdp, do them all and ignore status key */

	else do;

		do i = 1 to station_ctl.current_size;

		     if ^station_ctl.entries (i).inactive_sw
		     then station_ctl.entries (i).output_disabled_sw = "0"b;
						/* ignore previous state */

		end;

		a_code = 0;

	     end;

	return;

/* */

input_disabled:
     entry (a_station_ctl_eindex, a_flag, a_code);

/*[4.4-1]*/
	call setup;

	station_ctl_eptr = addr (station_ctl.entries (a_station_ctl_eindex));
	a_flag = station_ctl_entry.input_disabled_sw;
	a_code = 0;

	return;

/* */

output_disabled:
     entry (a_station_ctl_eindex, a_flag, a_code);

/*[4.4-1]*/
	call setup;

	station_ctl_eptr = addr (station_ctl.entries (a_station_ctl_eindex));
	a_flag = station_ctl_entry.output_disabled_sw;
	a_code = 0;

	return;

/* */


setup:
     proc;

/*[4.4-1]*/
	if ^(external_user_ctl_ptr -> user_ctl.init_sw.station_ctl)
						/*[4.4-1]*/
	then do;

		user_ctl_ptr = external_user_ctl_ptr;	/* set local variable from global */
						/*[4.4-4]*/
		system_ctl_ptr = user_ctl.system_ctl_ptr;
		station_ctl_ptr = user_ctl.station_ctl_ptr;
		user_ctl.init_sw.station_ctl = "1"b;

/*[4.4-1]*/
	     end;

	a_code = 0;

	return;

     end /* setup */;

/* */

find_station:
     proc (x_station_name);

dcl	x_station_name	char (12);

	a_code = 0;				/* init to good for immediate return */

	do station_ctl_eindex = 1 to station_ctl.current_size;

	     if x_station_name = station_ctl.entries (station_ctl_eindex).station_name
	     then do;

		     station_ctl_eptr = addr (station_ctl.entries (station_ctl_eindex));
		     if ^station_ctl_entry.inactive_sw
		     then return;			/* right name and active, go to it */

		end;
	end;

	a_code = cmcs_error_table_$bad_station;		/* didn't make it */

	return;

     end /* find_station */;

/* */

lock_station:
     proc;

dcl	LOCAL_LOCK_WAIT_TIME
			fixed bin internal static options (constant) init (5);

/*[5.3-1]*/
	call cmcs_set_lock_$lock (station_ctl_entry.lockword, LOCAL_LOCK_WAIT_TIME, a_code);

	return;

     end /* lock_station */;

/* */

unlock_station:
     proc;

	call cmcs_set_lock_$unlock (station_ctl_entry.lockword, a_code);

	return;

     end /* unlock_station */;

find_destination:
     entry (a_station_name, a_station_ctl_eindex, a_station_ctl_eptr, a_code);

/*[4.4-1]*/
	call setup;

/*[4.4-3]*/
	call find_station (a_station_name);

/*[4.4-3]*/
	if a_code ^= 0				/*[4.4-3]*/
	then a_station_ctl_eindex = 0;		/*[4.4-3]*/
	else do;
		a_station_ctl_eindex = station_ctl_eindex;
						/*[4.4-3]*/
		a_station_ctl_eptr = station_ctl_eptr;	/*[4.4-3]*/
	     end;

/*[4.4-3]*/
	return;

     end /* cmcs_station_ctl_ */;
