/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_mcs_.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 06/08/81 by FCH, [4.4-2], code "60" returned, BUG468 */
/* Modified on 03/03/81 by FCH, [4.4-1], once per process initialization, BUG468 */
/* Modified since Version 4.3 */

/* format: style3 */
cobol_mcs_:
     proc;

dcl	a_input_cdp	ptr,
	a_output_cdp	ptr,
	a_code		fixed bin (35),
	a_rcv_type	fixed bin,
	a_slew_ctl	bit (36),
	a_buffer_ptr	ptr,
	a_char_buffer_len	char (4),
	a_char_max_buffer_len
			char (4),
	a_bin_buffer_len	fixed bin,
	a_char_delim	char (1),
	a_sw		bit (1) aligned,		/* flag for set/get user_ctl_exists_sw */
	a_password	char (*);

dcl	buffer_len	fixed bin,
	max_buffer_len	fixed bin,
	io_subtype	fixed bin,
	code		fixed bin (35),
	purge_ptr		ptr,
	scrambled_password	char (10),
	password		char (10);

dcl	my_name		char (10) int static init ("cobol_mcs_");

dcl	test_sw		bit (1) int static init ("0"b);

dcl	(addr, fixed, index, null, substr)
			builtin;

dcl	(ioa_, com_err_, sub_err_)
			entry options (variable);	/* Both for DEBUG */

dcl	sub_err_retval	fixed bin (35);
dcl	station_count	fixed bin;

dcl	(
	error_table_$noentry,
	error_table_$action_not_performed
	)		fixed bin (35) external;

dcl	cleanup		condition;

dcl	continue_to_signal_ entry (fixed bin (35));

/*  */
%include cmcs_cd_dcls;
%include cmcs_control_hdr;
%include cmcs_entry_dcls;
%include cmcs_error_table_dcls;
%include cmcs_queue_ctl;
%include cmcs_station_ctl;
%include cmcs_system_ctl;
%include cmcs_tree_ctl;
%include cmcs_user_ctl;
%include cmcs_vfile_rs;

/* %include cmcs_wait_ctl; */

/*  */

accept:
     entry (a_input_cdp, a_code);

/*[4.4-1]*/
	if ^(external_user_ctl_ptr -> user_ctl.init_sw.mcs)
	then call setup;

	io_subtype = 1;				/* and in this case only, only 1 */

	call cmcs_queue_ctl_$accept_message_count (a_input_cdp, io_subtype, a_code);
	return;


/* */

receive:
     entry (a_input_cdp, a_rcv_type, a_buffer_ptr, a_bin_buffer_len, a_code);

/*[4.4-1]*/
	if ^(external_user_ctl_ptr -> user_ctl.init_sw.mcs)
	then call setup;

	if a_rcv_type = 0
	then io_subtype = 2;			/* convert to std form, 0 input = message, no wait */
	else if a_rcv_type = 1
	then io_subtype = 1;			/* 1 input = segment, no wait */

	call cmcs_queue_ctl_$receive (a_input_cdp, io_subtype, a_buffer_ptr, a_bin_buffer_len, a_code);
	return;


/* */

receive_wait:
     entry (a_input_cdp, a_rcv_type, a_buffer_ptr, a_bin_buffer_len, a_code);

/*[4.4-1]*/
	if ^(external_user_ctl_ptr -> user_ctl.init_sw.mcs)
	then call setup;

	if a_rcv_type = 0
	then io_subtype = 4;			/* convert to std form, 0 input = message (wait) */
	else if a_rcv_type = 1
	then io_subtype = 3;			/* 1 input = segment (wait) */

	call cmcs_queue_ctl_$receive (a_input_cdp, io_subtype, a_buffer_ptr, a_bin_buffer_len, a_code);
	return;


/* */

send:
     entry (a_output_cdp, a_buffer_ptr, a_char_max_buffer_len, a_char_delim, a_slew_ctl, a_code);

/*[4.4-1]*/
	if ^(external_user_ctl_ptr -> user_ctl.init_sw.mcs)
	then call setup;

	io_subtype = index ("0123", a_char_delim) - 1;

	if io_subtype < 0				/* not 0-3 */
	then io_subtype = 0;

	output_cdp = a_output_cdp;

	buffer_len = output_cd.text_len;
	max_buffer_len = fixed (a_char_max_buffer_len, 17);

/*[4.4-2]*/
	if io_subtype = 0 & (buffer_len = 0 | a_buffer_ptr = null ())
	then do;

		output_cd.status_key = "60";
		a_code = cmcs_error_table_$null_partial_message;
		return;
	     end;


	if buffer_len > max_buffer_len
	then do;

		a_code = cmcs_error_table_$bad_message_length;
		output_cd.status_key = "50";
		return;
	     end;

	output_cd.bin_max_station_count = output_cd.char_max_station_count;
	station_count = output_cd.station_count;

	if output_cd.bin_max_station_count < station_count | station_count = 0
	then do;

		output_cd.status_key = "30";
		a_code = cmcs_error_table_$bad_dest_count;
		return;
	     end;

/* The following call uses parameters different than those passed to cobol_mcs_. Specifically, buffer_len and
   station_count are used instead of max_buffer_len (and nothing). Since the validity checks are done here, there is
   no reason that we must continue passing character representations of numeric data. */

	call cmcs_queue_ctl_$send (a_output_cdp, io_subtype, a_buffer_ptr, buffer_len, station_count, a_slew_ctl,
	     a_code);

	return;


/* */

purge:
     entry (a_output_cdp, a_code);			/* CODASYL PURGE, sends only */

/*[4.4-1]*/
	if ^(external_user_ctl_ptr -> user_ctl.init_sw.mcs)
	then call setup;

	if a_output_cdp ^= null ()
	then do;

		output_cdp = a_output_cdp;
		output_cd.bin_max_station_count = output_cd.char_max_station_count;
		station_count = output_cd.station_count;

		if (output_cd.bin_max_station_count < station_count) | station_count = 0
		then do;

			output_cd.status_key = "30";
			a_code = cmcs_error_table_$bad_dest_count;
			return;
		     end;
	     end;

	io_subtype = 1;				/* sends only, per CODASYL */

	call cmcs_queue_ctl_$purge (a_output_cdp, io_subtype, a_code);

	return;


/* */

enable_input_queue:
     entry (a_input_cdp, a_password, a_code);

/*[4.4-1]*/
	if ^(external_user_ctl_ptr -> user_ctl.init_sw.mcs)
	then call setup;

	call check_password;			/* also gets fixed size password */

	if a_code ^= 0
	then do;

		input_cdp = a_input_cdp;
		input_cd.status_key = "40";
		return;
	     end;

	io_subtype = 1;

	call cmcs_queue_ctl_$enable (a_input_cdp, io_subtype, password, a_code);
	return;


/* */

disable_input_queue:
     entry (a_input_cdp, a_password, a_code);

/*[4.4-1]*/
	if ^(external_user_ctl_ptr -> user_ctl.init_sw.mcs)
	then call setup;

	call check_password;			/* also gets fixed size password */

	if a_code ^= 0
	then do;

		input_cdp = a_input_cdp;
		input_cd.status_key = "40";
		return;
	     end;

	io_subtype = 1;

	call cmcs_queue_ctl_$disable (a_input_cdp, io_subtype, password, a_code);

	return;


/* */

enable_input_terminal:
     entry (a_input_cdp, a_password, a_code);

/*[4.4-1]*/
	if ^(external_user_ctl_ptr -> user_ctl.init_sw.mcs)
	then call setup;

	call check_password;			/* also gets fixed size password */

	if a_code ^= 0
	then do;

		input_cdp = a_input_cdp;
		input_cd.status_key = "40";
		return;
	     end;

	io_subtype = 2;

	call cmcs_station_ctl_$enable_input_terminal (a_input_cdp, password, a_code);

	return;


/* */

disable_input_terminal:
     entry (a_input_cdp, a_password, a_code);

/*[4.4-1]*/
	if ^(external_user_ctl_ptr -> user_ctl.init_sw.mcs)
	then call setup;

	call check_password;			/* also gets fixed size password */

	if a_code ^= 0
	then do;

		input_cdp = a_input_cdp;
		input_cd.status_key = "40";
		return;
	     end;

	io_subtype = 2;

	call cmcs_station_ctl_$disable_input_terminal (a_input_cdp, password, a_code);

	return;


/* */

enable_output:
     entry (a_output_cdp, a_password, a_code);

/*[4.4-1]*/
	if ^(external_user_ctl_ptr -> user_ctl.init_sw.mcs)
	then call setup;

	call check_password;			/* also gets fixed size password */

	if a_code ^= 0
	then do;

		output_cdp = a_output_cdp;
		output_cd.status_key = "40";
		return;
	     end;

	io_subtype = 3;

	call cmcs_station_ctl_$enable_output_terminal (a_output_cdp, password, a_code);


	return;


/* */

disable_output:
     entry (a_output_cdp, a_password, a_code);

/*[4.4-1]*/
	if ^(external_user_ctl_ptr -> user_ctl.init_sw.mcs)
	then call setup;

	call check_password;			/* also gets fixed size password */

	if a_code ^= 0
	then do;

		output_cdp = a_output_cdp;
		output_cd.status_key = "40";
		return;
	     end;

	io_subtype = 3;

	call cmcs_station_ctl_$disable_output_terminal (a_output_cdp, password, a_code);

	return;

ret:						/*[4.4-1]*/
	return;

/* */

check_password:
     proc ();

	password = a_password;			/* need fixed size */
	scrambled_password = cmcs_scramble_ (password);
	password = "";				/* at least eliminate OUR password visibility */

	if scrambled_password = system_ctl.password
	then a_code = 0;
	else a_code = cmcs_error_table_$bad_password;

	return;

     end /* check_password */;


/* */

stop_run:
     entry ();

	if ^(external_user_ctl_ptr -> user_ctl.init_sw.mcs)
	then return;				/* temporary test to see if user doesn't use cmcs */

	call cmcs_queue_ctl_$stop_run (1, code);

	if code ^= 0
	then call sub_err_ (code, my_name, "c", null (), sub_err_retval,
		"From purge (and queue detach) initiated by stop_run.");

	return;

/* end of stop_run entrypoint */


cleanup_handler:
	call sub_err_ (0, my_name, "c", null (), sub_err_retval,
	     "The cleanup condition was detected. A stop_run will be simulated.");

	call cmcs_queue_ctl_$stop_run (1, code);

	if code ^= 0
	then call sub_err_ (code, my_name, "c", null (), sub_err_retval,
		"From purge (and queue detach) initiated by stop_run.");

	call continue_to_signal_ (code);

	if code ^= 0
	then call sub_err_ (code, my_name, "c", null (), sub_err_retval,
		"From attempt to continue signalling up the stack. Continuing.");
	return;

/* end of cleanup_handler code */

/*  */
setup:
     proc;

	if user_ctl_exists_sw			/* must be running in the proper environment */
	then do;

		user_ctl_ptr = external_user_ctl_ptr;	/* set local variable from global */

		queue_ctl_ptr = user_ctl.queue_ctl_ptr;
		station_ctl_ptr = user_ctl.station_ctl_ptr;
		system_ctl_ptr = user_ctl.system_ctl_ptr;
		terminal_ctl_ptr = user_ctl.terminal_ctl_ptr;
		tree_ctl_ptr = user_ctl.tree_ctl_ptr;
		wait_ctl_ptr = user_ctl.wait_ctl_ptr;

		on cleanup go to cleanup_handler;

		user_ctl.init_sw.mcs = "1"b;
		a_code = 0;

	     end;
	else do;

		a_code = error_table_$action_not_performed;
		call sub_err_ (a_code, my_name, "c", null (), sub_err_retval,
		     "Private COBOL application programs using CMCS must be run under the cobol_mcs command (execute request). Please consult with your CMCS Administrator on procedures."
		     );

		go to ret;
	     end;

     end /* setup */;

/* */

test:
     entry ();

	test_sw = "1"b;
	return;

/* */

set_user_ctl_exists_sw:
     entry (a_sw);

	user_ctl_exists_sw = a_sw;
	return;

/* */

get_user_ctl_exists_sw:
     entry (a_sw);

	a_sw = user_ctl_exists_sw;
	return;

     end /* cobol_mcs_ */;
