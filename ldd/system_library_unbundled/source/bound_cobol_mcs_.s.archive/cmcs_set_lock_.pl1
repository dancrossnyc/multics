/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8087),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8087 cmcs_set_lock_.pl1 Shorten wait time for cmcs_station_ctl_.
                                                   END HISTORY COMMENTS */


/* Modified on 10/20/84 by FCH, [5.3-1], BUG565(phx18385), wait time for set_lock_$lock */
/* Modified since Version 4.3 */

/* format: style3 */
cmcs_set_lock_:
     proc;

	return;					/* invalid entry point */

/* This COBOL MCS subroutine is  used to mask all IPS interrupts and then lock the specified lock.
   In the reverse, it will unlock the lock and then umask the IPS interrupts. */

/* Bob May, 6/30/77 */

/*   hcs_$set_ips_mask entry (bit (36) aligned, bit (36) aligned),
     hcs_$reset_ips_mask entry (bit (36) aligned, bit (36) aligned), */
dcl	set_lock_$lock	entry (bit (36) aligned, fixed bin, fixed bin (35)),
	set_lock_$unlock	entry (bit (36) aligned, fixed bin (35));

dcl	error_table_$invalid_lock_reset
			fixed bin (35) external;

dcl	(mask, oldmask)	bit (36) aligned,
	lockword		bit (36) aligned;



dcl	code		fixed bin (35);

/*  */
%include cmcs_control_hdr;
%include cmcs_entry_dcls;
%include cmcs_system_ctl;
%include cmcs_user_ctl;
/*  */
lock:
     entry (a_lockword, time, a_code);

dcl	a_lockword	bit (36) aligned,
	a_code		fixed bin (35);

/*[5.3-1]*/
dcl	time		fixed bin;

	if ^(external_user_ctl_ptr -> user_ctl.init_sw.set_lock)
	then do;
		call setup;
		if a_code ^= 0
		then return;
	     end;


/*[5.3-1]*/
	call set_lock_$lock (a_lockword, time, a_code);
	if a_code ^= 0
	then if a_code = error_table_$invalid_lock_reset
	     then a_code = 0;

	return;

unlock:
     entry (a_lockword, a_code);

	if ^(external_user_ctl_ptr -> user_ctl.init_sw.set_lock)
	then do;
		call setup;
		if a_code ^= 0
		then return;
	     end;

	call set_lock_$unlock (a_lockword, a_code);
	return;

setup:
     proc;

	user_ctl_ptr = external_user_ctl_ptr;		/* set local variable from global */

	system_ctl_ptr = user_ctl.system_ctl_ptr;

	user_ctl.init_sw.set_lock = "1"b;
	a_code = 0;
	return;

     end /* setup */;

     end /* cmcs_set_lock_ */;
