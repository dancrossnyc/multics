/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(88-04-05,Huen), approve(88-04-05,MCR7868), audit(88-04-13,RWaters),
     install(88-04-19,MR12.2-1040):
     The basic compiler can now associate severity levels with error messages.
     The severity command will now work with basic.
                                                   END HISTORY COMMENTS */


/* Main program for basic compiler

   Initial Version: Spring 1973 by BLW
	Modified: 14 May 1974 by BLW to fix bug 030 */
/*	Modified 1 November 1974 by MBW for extended precision */
/* 	Args made non-positional 11/08/79 S. Herbst */
/*	Modified 31 July by M. Weaver to print full pathname in error message */
/*	Modified 27 October 1980 by M. Weaver to treat zero length segments as an error */
/*        Modified 8 March 1988 by S. Huen to implement SCP6356 basic severity  */

/* format: style2 */

basic:
     proc;

	dcl     (i, k, input_length, code, err_count, arglen, bitcnt, arg_count)
				 fixed bin,
	        level		 fixed bin static init (0),
	        time_limit		 fixed bin (71) init (0),
	        time1		 fixed bin (71),
	        (executing, got_path, had_bad_option)
				 bit (1),
	        work_seg		 ptr static init (null),
	        (source_info_pt, input_pt, output_pt)
				 ptr init (null),
	        (argpt, object_hold, main_pt)
				 ptr,
	        program_interrupt	 condition,
	        cleanup		 condition,
	        s			 char (1) varying,
	        arg		 char (arglen) based (argpt) unaligned,
	        my_name		 char (5) static init ("basic"),
	        (ent, sourcename)	 char (32),
	        (dir, wdir)		 char (168);

	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin, fixed bin),
	        cu_$af_return_arg	 entry (fixed bin, ptr, fixed bin, fixed bin),
	        cu_$ptr_call	 entry (ptr),
	        cv_dec_check_	 entry (char (*) aligned, fixed bin) returns (fixed bin),
	        ioa_		 entry options (variable),
	        (
	        active_fnc_err_,
	        com_err_,
	        com_err_$suppress_name
	        )			 entry options (variable),
	        command_query_	 entry options (variable),
	        expand_pathname_$add_suffix
				 entry (char (*), char (*), char (*), char (*), fixed bin),
	        hcs_$initiate_count	 entry (char (*), char (*), char (*), fixed bin, fixed bin, ptr, fixed bin),
	        hcs_$terminate_noname	 entry (ptr, fixed bin),
	        get_wdir_		 entry (char (168)),
	        hcs_$delentry_seg	 entry (ptr, fixed bin),
	        hcs_$make_seg	 entry (char (*), char (*), char (*), fixed bin, ptr, fixed bin),
	        hcs_$status_long	 entry options (variable),
	        tssi_$get_segment	 entry (char (*), char (*), ptr, ptr, fixed bin),
	        tssi_$finish_segment	 entry (ptr, fixed bin, bit (5), ptr, fixed bin),
	        hcs_$truncate_seg	 entry (ptr, fixed bin, fixed bin),
	        virtual_cpu_time_	 entry (fixed bin (71)),
	        timer_manager_$cpu_call
				 entry (fixed bin (71), bit (2), entry),
	        timer_manager_$reset_cpu_call
				 entry (entry),
	        basic_		 entry (ptr, fixed bin, ptr, ptr, ptr, fixed bin);

	dcl     (addr, divide, fixed, float, index, length, null, rtrim, search, substr)
				 builtin;

	dcl     (
	        error_table_$bad_conversion,
	        error_table_$badopt,
	        error_table_$entlong,
	        error_table_$zero_length_seg
	        )			 fixed binary external;
	dcl     basic_data$precision_length
				 fixed bin (35) ext static;

	dcl     1 basic_error_messages_$
                                         aligned ext,
                   2 index_block         (0:500),
                     3 loc               fixed bin,
                     3 sev               fixed bin,
                     3 len               fixed bin,
                   2 message_block       char (248000);

	dcl     basic_severity_	fixed bin ext static;

	dcl     1 branch		 aligned automatic,
		2 type		 bit (2) unaligned,
		2 nnames		 bit (16) unaligned,
		2 nrp		 bit (18) unaligned,
		2 dtm		 bit (36) unaligned,
		2 dtu		 bit (36) unaligned,
		2 mode		 bit (5) unaligned,
		2 padding		 bit (13) unaligned,
		2 records		 bit (18) unaligned,
		2 dtd		 bit (36) unaligned,
		2 dtem		 bit (36) unaligned,
		2 acct		 bit (36) unaligned,
		2 curlen		 bit (12) unaligned,
		2 bitcnt		 bit (24) unaligned,
		2 did		 bit (4) unaligned,
		2 mdid		 bit (4) unaligned,
		2 copysw		 bit (1) unaligned,
		2 pad2		 bit (9) unaligned,
		2 rbs		 (0:2) bit (6) unaligned,
		2 uid		 bit (36) unaligned;

	dcl     1 source_info	 aligned,
%include basic_source_info;

/* precision_length is not set here because this is the primary entry
   for extended precision use as well */

start:
	word_count = 0;
	basic_severity_ = 5;

	on program_interrupt goto done;

	got_path, had_bad_option = "0"b;

	call cu_$af_return_arg (arg_count, null, 0, code);/* make sure called as a command */
	if code = 0
	then do;
		call active_fnc_err_ (0, my_name, "Cannot be called as an active function.");
		return;
	     end;

	do i = 1 to arg_count;

	     call cu_$arg_ptr (i, argpt, arglen, code);

	     if substr (arg, 1, 1) ^= "-"
	     then do;
		     if got_path
		     then do;
USAGE:
			     call com_err_$suppress_name (0, my_name, "Usage:  ^a path {-control_args}", my_name);
			     return;
			end;
		     got_path = "1"b;
		     call expand_pathname_$add_suffix (arg, "basic", dir, sourcename, code);
		     if code ^= 0
		     then do;
			     if code = error_table_$entlong & substr (arg, arglen - 5, 6) ^= ".basic"
			     then call com_err_ (code, my_name, "^a.basic", arg);
			     else call com_err_ (code, my_name, "^a", arg);
			     return;
			end;
		     ent = substr (sourcename, 1, length (rtrim (sourcename)) - length (".basic"));
		end;

	     else if arg = "-time" | arg = "-tm"
	     then do;
		     i = i + 1;
		     if i > arg_count
		     then time_limit = 1;
		     else do;
			     call cu_$arg_ptr (i, argpt, arglen, code);
			     time_limit = cv_dec_check_ ((arg), code);
			     if code ^= 0
			     then do;
				     call com_err_ (error_table_$bad_conversion, my_name, "^a", arg);
				     return;
				end;
			end;
		end;
	     else if arg = "-compile" | arg = "-cp"
	     then source_info_pt = addr (source_info);
	     else do;
		     call com_err_ (error_table_$badopt, my_name, "^a", arg);
		     had_bad_option = "1"b;
		end;
	end;

	if ^got_path
	then go to USAGE;
	if had_bad_option
	then return;

have_source:
	call hcs_$initiate_count (dir, sourcename, "", bitcnt, 1, input_pt, code);

	if input_pt = null
	then do;
ent_err:
		call com_err_ (code, my_name, "^a>^a", dir, sourcename);
		return;
	     end;
	if bitcnt = 0
	then do;
		code = error_table_$zero_length_seg;
		go to ent_err;
	     end;

	input_length = divide (bitcnt, 9, 17, 0);

	on cleanup call clean_up;

	level = level + 1;

	if source_info_pt ^= null
	then do;

/* generate object segment */

		source_info.segname = rtrim (ent);

		source_info.dirname = rtrim (dir);

		call hcs_$status_long (dir, sourcename, 0, addr (branch), null, code);

		if code ^= 0
		then goto ent_err;

		source_info.unique_id = branch.uid;
		source_info.date_time_modified = fixed (branch.dtm || (16)"0"b, 71);

		call get_wdir_ (wdir);
		call tssi_$get_segment (wdir, ent, output_pt, object_hold, code);
	     end;
	else if level = 1
	then do;
		if work_seg = null
		then call hcs_$make_seg ("", "basic_temporary_", "", 01111b, work_seg, code);

		output_pt = work_seg;
	     end;
	else call hcs_$make_seg ("", "", "", 01111b, output_pt, code);

	if output_pt = null
	then do;
		call com_err_ (code, my_name, "^a>^a", dir, sourcename);
		goto done;
	     end;

	basic_severity_ = 0;
	call basic_ (input_pt, input_length, output_pt, source_info_pt, main_pt, err_count);

	if source_info_pt = null
	then if err_count = 0
	     then if main_pt = null
		then call fatal_err (180);
		else if time_limit = 0
		then call cu_$ptr_call (main_pt);
		else do;
			call virtual_cpu_time_ (time1);

			call timer_manager_$cpu_call (time_limit, "11"b, cpu_limit);

			executing = "1"b;
			call cu_$ptr_call (main_pt);
			executing = "0"b;
		     end;
	     else do;
		     if err_count = 1
		     then s = "";
		     else s = "s";
		     call ioa_ ("^d error^a found, no execution.", err_count, s);
		     call ioa_ ("");
		end;

done:
	call clean_up;
	return;




ep_basic:
     entry;

	basic_data$precision_length = 2;		/* make entry work as expected */
	go to start;

clean_up:
     proc;

	if input_pt ^= null
	then call hcs_$terminate_noname (input_pt, code);

	if source_info_pt ^= null
	then if output_pt ^= null
	     then do;
		     call hcs_$truncate_seg (output_pt, word_count, code);

		     if code ^= 0
		     then call com_err_ (code, my_name, "^a>^a", dir, sourcename);

		     call tssi_$finish_segment (output_pt, word_count * 36, "1100"b, object_hold, code);

		     if code ^= 0
		     then call com_err_ (code, my_name, "^a>^a", dir, sourcename);
		end;
	     else ;
	else if level > 1
	then call hcs_$delentry_seg (output_pt, code);
	else call hcs_$truncate_seg (output_pt, 0, code);

	level = level - 1;

	if time_limit ^= 0
	then call timer_manager_$reset_cpu_call (cpu_limit);
     end;

cpu_limit:
     proc;

	dcl     answer		 char (3) varying,
	        time2		 fixed bin (71);

	dcl     1 query_info	 aligned,
		2 version		 fixed bin init (2),
		2 yes_or_no	 unaligned bit (1) init ("1"b),
		2 surpress_name	 unaligned bit (1) init ("0"b),
		2 status_code	 fixed bin init (0),
		2 query_code	 fixed bin;

	if executing
	then do;
		call virtual_cpu_time_ (time2);

		call command_query_ (addr (query_info), answer, my_name,
		     "^a has used ^.3f seconds of cpu time.  Do you want to continue?", ent,
		     float (time2 - time1, 27) / 1.0e6);

		if answer = "no"
		then goto done;

		call timer_manager_$cpu_call (time_limit, "11"b, cpu_limit);
	     end;

     end;

fatal_err:
     proc (err_num);
	dcl     err_num			fixed bin;
	dcl     (i, k)		 	fixed bin;

	dcl     1 message_overlay	 aligned based (addr (basic_error_messages_$)),
		2 index_block_skip	 (0:500),
		  3 (a, b, c)	 fixed bin,
		2 skip		 unal char (k),
		2 message		 unal char (index_block (i).len - 1);

	i = abs (err_num);
          call ioa_ ("");
          call ioa_ ("FATAL ERROR - ^d", i);
	k = index_block (i).loc;
          if k ^= -1 then call ioa_ (message);;
 	call ioa_ ("");
	basic_severity_ = 5;
 	return;
     end;
end;
