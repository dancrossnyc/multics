/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* format: style2 */

basic_resequence_:
     procedure (first_value, increment, tbl, txt, jt, highest, error_code);


/* A resequencer for line numbered files, for use with the basic_system editor.
					J.M. Broughton  --  April 1973	*/

/* Modified July 19, 1974 by J.M. Broughton to properly handle mixed case
	   letters in if, on, and goto statements */

	declare first_value		 fixed bin,	/* value from which to start resequencing */
	        increment		 fixed bin,	/* each new line number will be upped by this amount */
	        tbl		 pointer,		/* points to table, corresponds to ntbl */
	        txt		 pointer,		/* points to txt area, corresponds to ntxt */
	        jt		 fixed bin,	/* offset of first free word in test */
	        highest		 fixed bin,	/* maximum line number */
	        error_code		 fixed bin (35);	/* standard error_code */

	declare hcs_$make_seg	 entry (char (*), char (*), char (*),
						/* creates the temporary segment */
				 fixed bin (5), ptr, fixed bin (35)),
	        hcs_$truncate_seg	 entry (ptr, fixed bin, fixed bin (35)),
						/* shortens a segment */
	        hcs_$terminate_noname	 entry (ptr, fixed bin (35)),
						/* terminates null ref name */
	        ioa_		 entry options (variable);
						/* output formatting routine */

	declare 1 segment		 based aligned,	/* temporary segment */
		2 text		 (0:21503) fixed bin (35),
						/* area to place new source */
		2 translation_table	 (0:99999),	/* info from which to translate line numbers */
	        1 line_translation_table
				 (0:99999) based (trtbl) aligned,
						/* line number mappings */
		2 oldvalue	 fixed bin (17) unal,
						/* old number from new */
		2 newvalue	 fixed bin (17) unal,
						/* new number from old */
	        1 table		 (0:99999) based aligned,
						/* table of line information */
		2 indx		 fixed bin (17) unal,
						/* offset from start of "txt" */
		2 chcount		 fixed bin (17) unal,
						/* number of characters */
	        line		 char (oldcount) based (oldline_ptr) aligned,
						/* old line */
	        oldcount		 fixed bin,
	        oldline_ptr		 pointer,
	        oldindex		 fixed bin,	/* index of old line in original t text */
	        nline		 char (132) based (nline_ptr) aligned,
						/* new patched line */
	        nline_ptr		 pointer,
	        tline		 char (256) varying,/* lower cased version of old line */
	        1 string		 based aligned,	/* psuedo string to be overlayed on lines */
		2 ch		 (0:262143) char (1) unaligned,
						/* the characters */
	        copy_overlay	 (count) fixed bin (35) based,
						/* overlay to move text area */
	        count		 fixed bin;	/* number of words to move */

	declare trtbl		 pointer,		/* pointer to translation table */
	        ntbl		 pointer,		/* pointer to table of resequenced source */
	        ntxt		 pointer;		/* pointer to temp. segment and resequenced text */

	declare new_max		 fixed bin,	/* maximum line number of new program */
	        linum		 fixed bin,	/* number of line currently being created */
	        jnt		 fixed bin initial (0),
						/* offset from start of "ntxt" */
	        nl		 char (1) static aligned initial ("
"),
	        tab		 char (1) static aligned initial ("	"),
						/* new line and tab characters */
	        (loc, nloc)		 fixed bin,	/* offsets from being of old/new line */
	        numl		 fixed bin,	/* length (in chars.) of line number */
	        newline		 bit (1) aligned,	/* indicates newline after line number */
	        code		 fixed bin (35),	/* standard error code */
	        (i, j, k)		 fixed bin,	/* often used temporaries */
	        (addr, max, mod, null, divide, search, substr, verify, index)
				 builtin;

/*************************************************** Internal Subroutines *************************************************/


get_number:
     procedure (place) returns (fixed bin);

	declare chr		 char (1) aligned,	/* temporary */
	        place,
	        d			 fixed bin (17),
	        error		 bit (1) initial ("1"b),
						/* indicates if there are leading chars */
	        line		 fixed bin;	/* line number */

	line = 0;					/* initialize line number */

	do numl = 0 by 1;				/* scan line */
	     chr = txt -> ch (place + numl);		/* get current line */
	     d = index ("0123456789", chr) - 1;		/* compute the digit */
	     if d < 0				/* test if really a digit */
	     then do;
		     if error			/* has a digit been found yet */
		     then go to bad_char;		/* number has not been started */
		     else do;			/* end of the line number */
			     newline = (chr = nl);	/* set newline indicator */
			     return (line);		/* finished */
			end;
		end;
	     else do;
		     line = (line * 10) + d;		/* compute line number */
		     error = "0"b;			/* a digit has been found */
		end;
	end;					/* of do group */

     end get_number;



write_number:
     procedure (number, place);			/* writes a number into source lines */

	declare number		 fixed bin,	/* number to be converted */
	        place		 fixed bin,	/* offset in nline */
	        temp_string		 char (5) aligned,	/* holds number as it is built up */
	        n			 fixed bin;	/* temporary */

	numl = 0;					/* initialize length of number in chars. */

	do while (number > 0);			/* process the whole number */
	     n = mod (number, 10);			/* get low order digit */
	     numl = numl + 1;			/* add one to length */
	     substr (temp_string, 6 - numl, 1) = substr ("0123456789", n + 1, 1);
						/* move character into temp. string */
	     number = divide (number, 10, 17, 0);	/* try for another digit */
	end;

	substr (nline, nloc, numl) = substr (temp_string, 6 - numl);
						/* move number into source */
	place = place + numl;			/* move pointer ahead by length of number */

	return;

     end write_number;

/*********************************************  Execution Begins Here  **************************************************/



	call hcs_$make_seg ("", "basic_rseq_temp_1_", "", 01011b, ntxt, code);
						/* create temp for new text, trans. table */
	if ntxt = null
	then go to error;
	call hcs_$truncate_seg (ntxt, 0, code);		/* zero it out */
	if code ^= 0
	then go to error;
	call hcs_$make_seg ("", "basic_rseq_temp_2_", "", 01011b, ntbl, code);
						/* create temporary for new table */
	if ntbl = null
	then go to error;
	call hcs_$truncate_seg (ntbl, 0, code);		/* again zero it out */
	if code ^= 0
	then go to error;
	trtbl = addr (ntxt -> segment.translation_table); /* get pointer to translation table */
	error_code = 0;				/* just to make sure */


	j = first_value;				/* compute new line numbers */
	do i = 0 to highest;			/* search all old numbers */
	     if tbl -> table (i).chcount > 0
	     then do;				/* test if valid line */
		     newvalue (i) = j;		/* set new value of old number */
		     oldvalue (j) = i;		/* remember old number too */
		     j = j + increment;		/* get new line number */
		     if j > 99999
		     then do;			/* this can't be allowed */
			     call ioa_ ("Maximum line number too large.");
						/* indicate error */
			     return;		/* and return immediately */
			end;
		end;
	end;
	new_max = j - increment;			/* compute new maximum line number */


	do linum = first_value by increment while (linum <= new_max);
						/* step through each line patching source */

	     j = oldvalue (linum);			/* find old source line */
	     oldindex = tbl -> table (j).indx;		/* get the index */
	     oldcount = tbl -> table (j).chcount;	/* and character count */
	     oldline_ptr = addr (txt -> ch (oldindex));	/* and now a pointer to it */

	     tline = translate (line, "abcdefghijklmnopqrstuvwxyz", "ABCDEFGHIJKLMNOPQRSTUVWXYZ");
						/* lower case the string */
	     ntbl -> table (linum).indx = jnt;		/* compute index of new line */
	     nline_ptr = addr (ntxt -> ch (jnt));	/* and a pointer */

	     loc, nloc = search (tline, "0123456789");	/* where is the line number */
	     substr (nline, 1, loc) = substr (line, 1, loc);
						/* move any leading white space to new source line */
	     call write_number ((linum), nloc);		/* write new line number into source */
	     k = search (substr (tline, loc), " 	") - 1;
						/* set pointer in "line" past line number */

	     if k < 0
	     then do;

/* statement contains only a line number */

		     loc = oldcount;
		     goto next_line;
		end;

	     loc = loc + k;

	     k = verify (substr (tline, loc), " 	") - 1;
						/* find the beginning of the statement */
	     substr (nline, nloc, k) = substr (line, loc, k);
						/* move preceding white space */
	     nloc = nloc + k;
	     loc = loc + k;				/* update pointers */

	     k = index ("igo", substr (tline, loc, 1));	/* what type of statement is this */
	     go to type (k);			/* process it according to its type */

type (1):						/* if or input */
	     if substr (tline, loc + 1, 1) = "n"	/* ignore an input statement */
	     then go to next_line;
	     k = index (substr (tline, loc), "th") + 3;	/* line number follows "then" */
	     if k > 3
	     then go to patch_line;			/* found a then, patch_line will finish the job */
	     go to type (2);			/* otherwise look for a goto */

type (3):						/* on <expr> go(to sub) */
	     k = index (substr (tline, loc), "go") - 1;	/* find the "go" */
	     if k < 0
	     then go to bad_statement;		/* no go anything */
	     substr (nline, nloc, k) = substr (line, loc, k);
						/* move the first part of the statement */
	     nloc = nloc + k;
	     loc = loc + k;

type (2):						/* goto or gosub */
	     k = index (substr (tline, loc), "to") + 1;	/* look for a go "to" */
	     if k = 1
	     then do;				/* not a goto, try for gosub */
		     k = index (substr (tline, loc), "sub") + 2;
						/* look for it */
		     if k = 2
		     then go to bad_statement;	/* neither - something is in error */
		end;

patch_line:
	     substr (nline, nloc, k) = substr (line, loc, k);
						/* move line up to line number */
	     nloc = nloc + k;
	     loc = loc + k;

	     newline = "0"b;			/* just to make sure */
	     do while (^newline);			/* process all line numbers */
		k = search (substr (tline, loc), "0123456789") - 1;
						/* find where the line number begins */
		if k < 0
		then goto next_line;		/* skip if no more line numbers.
							   This check handles cases like
								10 goto 20 ' comment
							   which used to cause fault */
		substr (nline, nloc, k) = substr (line, loc, k);
						/* move whatever preceeds the number */
		nloc = nloc + k;
		loc = loc + k;
		j = get_number (oldindex + loc - 1);	/* get the line number to be changed */
		i = newvalue (j);			/* get new equivalent */
		if i = 0
		then go to bad_line;		/* invalid line number */
		loc = loc + numl;			/* update pointer by length of number */
		call write_number (i, nloc);
	     end;

next_line:
type (0):
	     i = oldcount - loc + 1;			/* get length of string to end of line */
	     substr (nline, nloc, i) = substr (line, loc, i);
						/* move the remaining portion of the line */
	     ntbl -> table (linum).chcount = nloc + i - 1;/* compute number of charcters in line */
	     jnt = jnt + nloc + i + 2;		/* align next line on word boundary */
	     jnt = jnt - mod (jnt, 4);

	end;					/* go back for another line */

/* Resequencing complete, update orignal */

	count = max (highest, new_max) + 1;		/* use highest to zero out old elements of table */
	tbl -> copy_overlay = ntbl -> copy_overlay;	/* move the "table" */
	highest = new_max;
	jt = jnt;					/* reset "jt" to new value */
	count = divide (jnt, 4, 17, 0);		/* get number of words to move */
	txt -> copy_overlay = ntxt -> copy_overlay;	/* copy count words of text */
	call hcs_$truncate_seg (ntxt, 0, error_code);	/* cleanup */
	call hcs_$truncate_seg (ntbl, 0, error_code);
	call hcs_$terminate_noname (ntbl, error_code);
	call hcs_$terminate_noname (ntxt, error_code);

	return;


/* Various Error Handlers */


error:
	error_code = code;				/* indicate error */
	return;

bad_statement:					/* invalid syntax */
	call ioa_ ("Invalid statement encountered on line ^d, old line ^d.", linum, oldvalue (linum));
	go to next_line;

bad_char:						/* we found an invalid character on this line */
	call ioa_ ("Bad line number encountered on line ^d, old line ^d.", linum, oldvalue (linum));
	go to next_line;

bad_line:						/* come here if wrong line number encountered */
	call ioa_ ("Bad line number ^d encountered on line ^d, old line ^d.", j, linum, oldvalue (linum));
	go to next_line;


     end basic_resequence_;
