/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */

/* **************************************************************************
   *                                                                        *
   *   Name: micro_transfer, mt                                             *
   *                                                                        *
   *   This program acts as an interface between the Multics file system    *
   *   and I/O modules (protocols), when transferring files between Multics *
   *   and a microcomputer.                                                 *
   *                                                                        *
   *   Status:                                                              *
   *                                                                        *
   *    0) 24 August 1984:  Initial coding, M. Mallmes.                     *
   *                                                                        *
   *    1) 31 January 1985: Modified, M.Mallmes                             *
   *            Changed the iocb-pointer passed to iox_$modes and           *
   *            iox_$control to use the user-supplied field and to          *
   *            default to the user_i/o switch iocb-pointer.                *
   *            Previous version always used the user_i/o switch            *
   *            iocb-pointer even when the user supplied a different        *
   *            switch.  In summary, iox_$user_io has been replaced         *
   *            with mt_options.ts_iocbp.                                   *
   *                                                                        *
   *            mt_options.new_modes now contains 'force'.                  *
   *            deletes file if modes can't be set.                         *
   *                                                                        *
   *                                                                        *
   ************************************************************************* */


micro_transfer:
mt:
     procedure () options (variable);


/*  Automatic  */


	dcl     absolute_path	 char (168);
	dcl     active_protocol	 fixed bin;
	dcl     argument_count	 fixed bin;
	dcl     arg_idx		 fixed bin;
	dcl     argument_lth	 fixed bin (21);
	dcl     argument_ptr	 ptr;
	dcl     bit_count		 fixed bin (24);
	dcl     buff		 char (256) aligned;
	dcl     buf_ptr		 ptr;
	dcl     call_com_err	 bit (1);
	dcl     chars_written	 fixed bin (35);
	dcl     code		 fixed bin (35);
	dcl     default_modes	 bit (1);
	dcl     dl_file		 bit (1);
	dcl     message		 char (200);
	dcl     modes_set		 bit (1) init ("0"b);
	dcl     01 mt_options	 unal,
		02 ts_iocbp	 ptr aligned,
		02 atd		 char (512),
		02 eof_char	 char (256) var,
		02 eol_str	 char (256) var,
		02 io_switch	 char (32) var,
		02 new_modes	 char (512),
		02 path		 char (200),
		02 protocol	 char (32),
		02 sending	 bit (1),
		02 receiving	 bit (1);
	dcl     my_cl_intermediary	 entry variable;
	dcl     n_read		 fixed bin (21);
	dcl     new_delay_ptr	 ptr;
	dcl     01 new_delay_struc	 like delay_struc;
	dcl     old_delay_ptr	 ptr;
	dcl     01 old_delay_struc	 like delay_struc;
	dcl     old_modes		 char (256);
	dcl     protocol_iocb_ptr	 ptr;
	dcl     protocol_mode	 fixed bin;
	dcl     protocol_swn	 char (32);
	dcl     reset_cl_intermediary	 bit (1);
	dcl     saved_cl_intermediary	 entry variable;
	dcl     seg_iocb_ptr	 ptr;
	dcl     seg_mode		 fixed bin;
	dcl     seg_ptr		 ptr;
	dcl     seg_swn		 char (32);
	dcl     source_dir		 character (168);
	dcl     source_ename	 character (32);
	dcl     start_of_eol	 char (32) var;
	dcl     01 ti		 like terminal_info;
	dcl     ti_ptr		 ptr;
	dcl     transmission_time	 fixed bin (35);
	dcl     whoami		 char (32);

/*  Based   */

	dcl     argument		 character (argument_lth) based (argument_ptr);

/*  Constants  */

	dcl     Buf_Size		 fixed bin (21) internal static options (constant) init (256);
	dcl     Del_Switches	 bit (6) internal static options (constant) init ("100100"b) aligned;
	dcl     IBM_PC		 fixed bin internal static options (constant) init (1);
	dcl     MT_VERSION		 char (3) internal static options (constant) init ("1.0");
	dcl     NL		 char (1) internal static options (constant) init ("
");
	dcl     OTHER		 fixed bin internal static options (constant) init (2);
	dcl     XMODEM		 fixed bin internal static options (constant) init (0);

/*  Builtin  */

	dcl     (abs, addr, after, before, ceil, index, length, mod, reverse, rtrim, null, substr, trunc)
				 builtin;

/*  Conditions */
	dcl     cleanup		 condition;

/*  External  */

	dcl     error_table_$action_not_performed
				 fixed bin (35) ext static;
	dcl     error_table_$badopt	 fixed bin (35) ext static;
	dcl     error_table_$empty_file fixed bin (35) ext static;
	dcl     error_table_$long_record fixed bin (35) ext static;
	dcl     error_table_$noentry	 fixed bin (35) ext static;
	dcl     error_table_$regexp_too_long fixed bin (35) ext static;
	dcl     error_table_$noarg	 fixed bin (35) ext static;
	dcl     error_table_$end_of_info fixed bin (35) ext static;
	dcl     error_table_$short_record fixed bin (35) ext static;

/*  Procedures  */

	dcl     com_err_		 entry options (variable);
	dcl     cu_$arg_count	 entry (fixed bin, fixed bin (35));
	dcl     cu_$arg_list_ptr	 entry returns (ptr);
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	dcl     cu_$cl		 entry (1 aligned, 2 bit (1) unal, 2 bit (35) unal);
	dcl     cu_$generate_call	 entry (entry, ptr);
	dcl     cu_$get_cl_intermediary entry (entry);
	dcl     cu_$set_cl_intermediary entry (entry);
	dcl     delete_$path	 entry (char (*), char (*), bit (6) aligned, char (*), fixed bin (35));
	dcl     expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     hcs_$set_bc_seg	 entry (ptr, fixed bin (24), fixed bin (35));
	dcl     initiate_file_	 entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
	dcl     ioa_		 entry () options (variable);
	dcl     iox_$attach_name	 entry (char (*), ptr, char (*), ptr, fixed bin (35));
	dcl     iox_$close		 entry (ptr, fixed bin (35));
	dcl     iox_$control	 entry (ptr, char (*), ptr, fixed bin (35));
	dcl     iox_$detach_iocb	 entry (ptr, fixed (35));
	dcl     iox_$get_chars	 entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
	dcl     iox_$get_line	 entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
	dcl     iox_$look_iocb	 entry (char (*), ptr, fixed bin (35));
	dcl     iox_$modes		 entry (ptr, char (*), char (*), fixed bin (35));
	dcl     iox_$open		 entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
	dcl     iox_$put_chars	 entry (ptr, ptr, fixed bin (21), fixed bin (35));
	dcl     nd_handler_		 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     terminate_file_	 entry (ptr, fixed bin (24), bit (*), fixed bin (35));
	dcl     pathname_		 entry (char (*), char (*)) returns (char (168));
	dcl     unique_chars_	 entry (bit (*)) returns (char (15));

/*  Include */
%page;
%include access_mode_values;
%page;
%include iox_modes;
%page;
%include terminal_info;
%page;
%include terminate_file;
%page;
%include tty_convert;
%page;

/*  micro_transfer: mt:     procedure () options (variable);  */

	old_delay_ptr = null ();
	new_delay_ptr = null ();
	protocol_iocb_ptr = null ();
	seg_iocb_ptr = null ();
	seg_ptr = null ();
	old_modes = "";
	whoami = "micro_transfer";
	reset_cl_intermediary = "0"b;
	dl_file = "0"b;
	ti_ptr = addr (ti);
	ti.version = terminal_info_version;
	old_delay_struc.version = DELAY_VERSION;
	new_delay_struc.version = DELAY_VERSION;

	on cleanup call clean_up (0);


/*  Initialize control arguments, setting defaults where applicable */

	mt_options.receiving = "0"b;
	mt_options.sending = "0"b;
	mt_options.eof_char = "";
	mt_options.eol_str = "";
	mt_options.protocol = " ";
	mt_options.io_switch = " ";
	mt_options.atd = "xmodem_io_ user_i/o";
	mt_options.new_modes = " ";
	default_modes = "1"b;


	call cu_$arg_count (argument_count, code);
	if code ^= 0
	then do;
		call com_err_ (code, whoami);
		return;
	     end;

	if argument_count = 0
	then do;
USAGE:
		call com_err_ (error_table_$noarg, whoami, "^/Usage: ^a path {-control_args}", whoami);
		return;
	     end;


	call cu_$arg_ptr (1, argument_ptr, argument_lth, code);
						/* get path */
	if code ^= 0
	then do;
		call com_err_ (error_table_$noarg, whoami, "^/Usage: ^a path {-control_args}", whoami);
		return;
	     end;

	if index (argument, "-") ^= 1
	then path = argument;

	else do;
		call com_err_ (error_table_$noarg, whoami, "^/Usage: ^a path {-control_args}", whoami);
		return;
	     end;


/* Scan for control arguments */

	arg_idx = 2;
	do while (arg_idx <= argument_count);
	     call cu_$arg_ptr (arg_idx, argument_ptr, argument_lth, code);
	     if code ^= 0
	     then do;
		     call com_err_ (code, argument, "Fetching argument #^d.", arg_idx);
		     return;
		end;

	     else if argument = "-send"
	     then do;
		     mt_options.sending = "1"b;
		     mt_options.receiving = "0"b;
		end;


	     else if argument = "-receive"
	     then do;
		     mt_options.receiving = "1"b;
		     mt_options.sending = "0"b;
		end;

	     else if argument = "-modes"
	     then do;
		     arg_idx = arg_idx + 1;
		     call get_sub_arg;
		     mt_options.new_modes = argument;
		     default_modes = "0"b;
		end;

	     else if argument = "-attach_description" | argument = "-atd"
	     then do;
		     arg_idx = arg_idx + 1;
		     call get_sub_arg;
		     mt_options.atd = argument;
		end;

	     else if argument = "-eof"
	     then do;
		     arg_idx = arg_idx + 1;
		     call get_sub_arg;
		     mt_options.eof_char = argument;
		end;

	     else if argument = "-eol"
	     then do;
		     arg_idx = arg_idx + 1;
		     call get_sub_arg;
		     mt_options.eol_str = argument;
		end;

	     else do;
BADOPT:
		     call com_err_ (error_table_$badopt, whoami, "^a", argument);
		     return;
		end;
	     arg_idx = arg_idx + 1;
	end;


/*  Check arguments  */

	if ^mt_options.sending & ^mt_options.receiving
	then do;					/*  User didn't specify direction */
		call com_err_ (error_table_$noarg, whoami, "^a ^a", "-send", "-receive");
		return;
	     end;

	if length (mt_options.eol_str) > 32
	then do;
		call com_err_ (error_table_$regexp_too_long, whoami, "^a", mt_options.eol_str);
		return;
	     end;

	if length (mt_options.eof_char) > 1
	then do;
		call com_err_ (error_table_$regexp_too_long, whoami, "^a", mt_options.eof_char);
		return;
	     end;

	call set_implicit_args;

	call expand_pathname_ (path, source_dir, source_ename, code);
	if code ^= 0
	then do;
		call com_err_ (code, whoami, "^a", path);
		return;
	     end;

	absolute_path = pathname_ (rtrim (source_dir), rtrim (source_ename));

	if mt_options.receiving
	then do;					/*  Check file on Multics side   */
		call check_target_file (call_com_err, code);
		if code ^= 0
		then do;
			if code = error_table_$action_not_performed
			then call clean_up (0);
			else if call_com_err
			then call com_err_ (code, whoami, "^a", rtrim (absolute_path));
			return;
		     end;
		seg_mode = Stream_output;
		protocol_mode = Stream_input;
	     end;

	else do;					/*  Check file on Multics side   */
		call check_source_file (code, bit_count);
		if code ^= 0
		then do;
			call com_err_ (code, whoami, "^a", rtrim (absolute_path));
			return;
		     end;
		seg_mode = Stream_input;
		protocol_mode = Stream_output;
	     end;


	seg_swn = unique_chars_ (""b) || "." || rtrim (source_ename);
	protocol_swn = unique_chars_ (""b) || "." || rtrim (mt_options.protocol);

/*  Attach vfile_ */
	call iox_$attach_name (seg_swn, seg_iocb_ptr, "vfile_ " || rtrim (absolute_path), null, code);
	if code ^= 0
	then do;
		call clean_up (0);
		call com_err_ (code, whoami, "^a", rtrim (absolute_path));
		return;
	     end;

	call iox_$open (seg_iocb_ptr, seg_mode, "0"b, code);
	if code ^= 0
	then do;
		call clean_up (0);
		call com_err_ (code, whoami, "^a", rtrim (absolute_path));
		return;
	     end;

	if mt_options.receiving then dl_file = "1"b;

	call iox_$look_iocb ((mt_options.io_switch), mt_options.ts_iocbp, code);
	if code ^= 0
	then do;
		call com_err_ (code, whoami, "^a", mt_options.io_switch);
		return;
	     end;

/* Multics side okay, greet user  */

	call ioa_ ("Micro Transfer^xVersion^x^a", MT_VERSION);

	if mt_options.receiving
	then call ioa_ ("Receiving file ^a", rtrim (absolute_path));
	else call display_send_info (bit_count);


/* setup line modes */
/* Delays */
	old_delay_ptr = addr (old_delay_struc);
	new_delay_ptr = addr (new_delay_struc);

	new_delay_struc.default = 0;
	new_delay_struc.delay.vert_nl = 0;
	new_delay_struc.delay.horz_nl = 0;
	new_delay_struc.delay.const_tab = 0;
	new_delay_struc.delay.var_tab = 0;
	new_delay_struc.delay.backspace = 0;
	new_delay_struc.delay.vt_ff = 0;

	call iox_$control (mt_options.ts_iocbp, "get_delay", old_delay_ptr, code);
	if code ^= 0
	then do;
		call com_err_ (code, whoami);
		call clean_up (0);
		return;
	     end;

	call iox_$control (mt_options.ts_iocbp, "set_delay", new_delay_ptr, code);
	if code ^= 0
	then do;
		call com_err_ (code, whoami);
		call clean_up (0);
		return;
	     end;

/*  Modes and cl_intermediary  */
	call cu_$get_cl_intermediary (saved_cl_intermediary);
	my_cl_intermediary = do_cl_intermediary;
	call cu_$set_cl_intermediary (my_cl_intermediary);
	reset_cl_intermediary = "1"b;

	call iox_$modes (mt_options.ts_iocbp, mt_options.new_modes, old_modes, code);

	if code ^= 0
	then do;
		call com_err_ (code, whoami, "^a", mt_options.new_modes);
		call clean_up (0);
		return;
	     end;
	modes_set = "1"b;


/*  Attach the I/O module  */
	call iox_$attach_name (protocol_swn, protocol_iocb_ptr, rtrim (mt_options.atd), null, code);

	if code ^= 0
	then do;
		call clean_up (0);
		call com_err_ (code, whoami, "^a", mt_options.protocol);
		return;
	     end;


	call iox_$open (protocol_iocb_ptr, protocol_mode, "0"b, code);
	if code ^= 0
	then do;
		call clean_up (0);
		call com_err_ (code, whoami, "^a", mt_options.protocol);
		return;
	     end;


/*  Do i/o  */

	dl_file = "0"b;
	buf_ptr = addr (buff);

	if protocol_mode = Stream_output
	then call send_data (code, message);

	else call get_data (code, message);

	if code ^= 0
	then do;
		call clean_up (0);
		call com_err_ (code, whoami, "^a", rtrim (message));
		return;
	     end;

	call clean_up (code);			/*  Care about the close here */

	if code ^= 0
	then do;
		call com_err_ (code, whoami, "^a", mt_options.protocol);
		return;
	     end;

	if mt_options.eof_char ^= "" & seg_mode = Stream_output
	then call strip_remote_eof (code);

	if code ^= 0
	then call com_err_ (code, whoami, "^/a, ^a", "Unable to translate end-of-file character ",
		rtrim (absolute_path));


%page;
/*  This procedure returns the STR portion of a control argument  */

get_sub_arg:
     proc;

	if arg_idx > argument_count
	then do;
		call com_err_ (error_table_$noarg, whoami);
		goto EXIT;
	     end;
	call cu_$arg_ptr (arg_idx, argument_ptr, argument_lth, code);
	if code ^= 0
	then do;
		call com_err_ (code, argument, "Fetching argument #^d.", arg_idx);
		goto EXIT;
	     end;
     end get_sub_arg;

%page;
/*  This procedure sets variables based on the command line input  */

set_implicit_args:
     proc;

	mt_options.protocol = before (mt_options.atd, " ");
	mt_options.io_switch = before (after (mt_options.atd, " "), " ");

	if rtrim (mt_options.protocol) = "xmodem_io_"
	then do;
		active_protocol = XMODEM;
		if default_modes
		then mt_options.new_modes =
			"force,no_outp,8bit,breakall,^echoplex,rawi,^crecho,^lfecho,^tabecho,rawo";
	     end;
	else if rtrim (mt_options.protocol) = "ibm_pc_io_"
	then do;
		active_protocol = IBM_PC;
		if default_modes
		then mt_options.new_modes = "force,^8bit,breakall,^echoplex,rawi,^crecho,^lfecho,^tabecho,rawo";
	     end;

	else do;
		active_protocol = OTHER;
		if default_modes
		then mt_options.new_modes = "force,no_outp,8bit,breakall,^echoplex,rawi,^crecho,^lfecho,^tabecho,rawo";
	     end;
	return;
     end set_implicit_args;


%page;
/*  This procedure checks out the integrity of the file to be received  */

check_target_file:
     proc (call_com_err, ec);

	dcl     bit_count		 fixed bin (24);
	dcl     call_com_err	 bit (1);
	dcl     ec		 fixed bin (35);

	call_com_err = "1"b;

	call initiate_file_ (source_dir, source_ename, N_ACCESS, seg_ptr, bit_count, ec);
	if ec = error_table_$noentry
	then ec = 0;

	if seg_ptr ^= null
	then do;
		call nd_handler_ (whoami, source_dir, source_ename, ec);
		call_com_err = "0"b;
	     end;
	return;
     end check_target_file;


%page;
/*  This procedure checks out the integrity of the file to be sent */

check_source_file:
     proc (ec, bit_count);

	dcl     bit_count		 fixed bin (24);
	dcl     ec		 fixed bin (35);


	call initiate_file_ (source_dir, source_ename, R_ACCESS, seg_ptr, bit_count, ec);
	if ec ^= 0
	then return;

	if bit_count = 0
	then do;
		ec = error_table_$empty_file;
		return;
	     end;

     end check_source_file;

%page;
/*  This procedure displays file information before sending a Multics file */

display_send_info:
     proc (bit_count);

	dcl     bit_count		 fixed bin (24);
	dcl     char_length		 fixed bin;
	dcl     char_count		 fixed bin (35);
	dcl     ec		 fixed bin (35);
	dcl     packet_length	 fixed bin;
	dcl     packet_overhead	 fixed bin;

	char_count = bit_count / 9;
	call ioa_ ("Sending file ^a:^x^d^xcharacters", rtrim (absolute_path), char_count);

	call iox_$control (mt_options.ts_iocbp, "terminal_info", ti_ptr, ec);

	if ec = 0
	then do;
		goto init_info (active_protocol);

init_info (0):					/* XMODEM */
		packet_overhead = 4;
		packet_length = 128;
		char_length = 8;
		goto end_init_info;

init_info (1):					/* IBM_PC */
		packet_overhead = 1;
		packet_length = 1;			/*  Variable length packets  */
		char_length = 7;
		goto end_init_info;


init_info (2):					/* OTHER */
		packet_overhead = 1;
		packet_length = 1;
		char_length = 8;

end_init_info:
		bit_count =
		     (char_count * char_length)
		     + (abs (packet_length - mod (char_count, packet_length)) * char_length)
		     + (ceil (char_count / packet_length) * packet_overhead);
						/*  Real bit transmission count  */

		transmission_time = ceil (bit_count / ti.baud_rate);
		call ioa_ ("Approximate Send Time: ^d minutes, ^d seconds at ^d baud", trunc (transmission_time / 60),
		     mod (transmission_time, 60), ti.baud_rate);
	     end;
	return;
     end display_send_info;

%page;
/*  mt's cl intermediary  */

do_cl_intermediary:
     procedure;

	call mt_call_out (cu_$cl, cu_$arg_list_ptr ());
	return;
     end do_cl_intermediary;



/* This procedure handles modes setting in the event of a quit  */

mt_call_out:
     procedure (Entry, Arg_list);

	dcl     Entry		 variable entry parameter;
	dcl     Arg_list		 ptr parameter;

	call iox_$modes (mt_options.ts_iocbp, old_modes, (""), 0);
	call cu_$set_cl_intermediary (saved_cl_intermediary);
	call cu_$generate_call (Entry, Arg_list);
	call iox_$modes (mt_options.ts_iocbp, mt_options.new_modes, old_modes, 0);
	call cu_$set_cl_intermediary (my_cl_intermediary);
	return;
     end mt_call_out;


%page;
/*  This procedure reads from the protocol I/O module and writes the data
   to the Multics segment performing end-of-line and translations
   as necessary.  */

get_data:
     proc (ec, message);

	dcl     ec		 fixed bin (35);
	dcl     eof		 bit (1);
	dcl     message		 char (200);

	eof = "0"b;
	ec = 0;
	start_of_eol = "";

	call iox_$get_chars (protocol_iocb_ptr, buf_ptr, Buf_Size - length (mt_options.eol_str), n_read, ec);


	do while (^eof);
	     if ec = error_table_$end_of_info
	     then do;
		     eof = "1"b;
		end;

	     else if ec ^= 0
	     then goto error_protocol_in;

	     if mt_options.eol_str ^= ""
	     then call translate_remote_eol (n_read, eof);

	     call iox_$put_chars (seg_iocb_ptr, buf_ptr, n_read, ec);
	     if ec ^= 0
	     then goto error_file_out;

	     if ^eof
	     then call iox_$get_chars (protocol_iocb_ptr, buf_ptr, Buf_Size - length (mt_options.eol_str), n_read, ec);
	end;
	ec = 0;
	return;

error_protocol_in:
	message = mt_options.protocol;
	return;
error_file_out:
	message = absolute_path;
	return;
     end get_data;

%page;
/*  This procedure reads from the Multics segment and writes to the protocol
   I/O module performing end-of-line and end-of-file conversions as necessary */

send_data:
     proc (ec, message);

	dcl     ec		 fixed bin (35);
	dcl     eof_set		 bit (1);
	dcl     message		 char (200);

	chars_written = 0;
	if mt_options.eol_str ^= ""
	then call iox_$get_line (seg_iocb_ptr, buf_ptr, Buf_Size - length (mt_options.eol_str), n_read, ec);
	else call iox_$get_chars (seg_iocb_ptr, buf_ptr, Buf_Size, n_read, ec);

	do while (ec ^= error_table_$end_of_info);
	     if mt_options.eol_str ^= "" & n_read ^= 0
	     then call translate_mu_eol (n_read);

	     chars_written = chars_written + n_read;	/* need for xmodem  */

	     if ec = error_table_$short_record
	     then do;
		     if mt_options.eof_char ^= ""
		     then do;
			     call add_remote_eof (n_read);
			     eof_set = "1"b;
			end;
		end;

	     else if ec = error_table_$long_record
	     then ;
	     else if ec ^= 0
	     then goto error_file_in;

	     call iox_$put_chars (protocol_iocb_ptr, buf_ptr, n_read, ec);
	     if ec ^= 0
	     then goto error_protocol_out;

	     if mt_options.eol_str ^= ""
	     then call iox_$get_line (seg_iocb_ptr, buf_ptr, Buf_Size - length (mt_options.eol_str), n_read, ec);
	     else call iox_$get_chars (seg_iocb_ptr, buf_ptr, Buf_Size, n_read, ec);
	end;

	if ^eof_set & mt_options.eof_char ^= ""
	then do;
		call add_remote_eof (n_read);
		call iox_$put_chars (protocol_iocb_ptr, buf_ptr, n_read, ec);
		if ec ^= 0
		then goto error_protocol_out;
	     end;

	ec = 0;
	return;

error_protocol_out:
	message = mt_options.protocol;
	return;
error_file_in:
	message = absolute_path;
	return;
     end send_data;


%page;
/*  This procedure adds the remote's eof character(s) */

add_remote_eof:
     proc (n_read);

	dcl     i			 fixed bin;
	dcl     n_pad		 fixed bin;
	dcl     n_read		 fixed bin (21);

	goto case (active_protocol);

case (0):						/* XMODEM */
	n_pad = Buf_Size / 2 - mod (chars_written, 128);
	do i = n_read + 1 to n_read + n_pad;
	     substr (buff, i, 1) = mt_options.eof_char;
	end;
	n_read = n_read + n_pad;
	goto end_case;

case (1):						/* IBM_PC */
case (2):						/* OTHER */
	substr (buff, n_read + 1, 1) = mt_options.eof_char;
	n_read = n_read + 1;
end_case:
	return;

     end add_remote_eof;


%page;
/*  This procedure strips the remote eof character (s)  */

strip_remote_eof:
     proc (ec);

	dcl     char_count		 fixed bin (35);
	dcl     done_searching	 bit (1);
	dcl     ec		 fixed bin (35);
	dcl     i			 fixed bin;
	dcl     seg_ptr		 ptr;
	dcl     overlay		 char (char_count) based (seg_ptr);

	call initiate_file_ (source_dir, source_ename, N_ACCESS, seg_ptr, bit_count, ec);
	if seg_ptr ^= null & ec = 0
	then do;
		char_count = bit_count / 9;
		done_searching = "0"b;
		i = char_count;

		do while (i >= 1 & ^done_searching);
		     if substr (seg_ptr -> overlay, i, 1) ^= mt_options.eof_char
		     then i = i - 1;
		     else do;
			     do while (i >= 1 & ^done_searching);
				if substr (seg_ptr -> overlay, i, 1) = mt_options.eof_char
				then i = i - 1;
				else done_searching = "1"b;
			     end;
			end;
		end;

		if i ^= char_count & done_searching
		then do;				/* Have to reset the bit count  */
			bit_count = i * 9;
			call hcs_$set_bc_seg (seg_ptr, bit_count, ec);
		     end;
	     end;

	if seg_ptr ^= null
	then call terminate_file_ (seg_ptr, 0, TERM_FILE_TERM, 0);

	return;
     end strip_remote_eof;


%page;

/*  This procedure translates a Multics NL to the remote eol character (s)  */

translate_mu_eol:
     proc (n_read);

	dcl     n_read		 fixed bin (21);

	if substr (buff, n_read, 1) = NL
	then do;
		substr (buff, n_read, length (mt_options.eol_str)) = mt_options.eol_str;
		n_read = n_read + length (mt_options.eol_str) - 1;
	     end;
     end translate_mu_eol;


/* This procedure translates the remote eol character (s) to a Multics NL.  */

translate_remote_eol:
     proc (n_read, eof);

	dcl     buf_pos		 fixed bin;
	dcl     eof		 bit (1);
	dcl     i			 fixed bin;
	dcl     n_read		 fixed bin (21);
	dcl     out_buf		 char (288) var;


	buf_pos = 0;
	out_buf = "";

/* See if we've got the last half of the end-of-line sequence */
	if start_of_eol || substr (buff, 1, length (mt_options.eol_str) - length (start_of_eol)) = mt_options.eol_str
	then do;					/* yes  */
		buf_pos = length (mt_options.eol_str) - length (start_of_eol);
		out_buf = NL;
	     end;

	else out_buf = start_of_eol;			/* No  */

	start_of_eol = "";

/* Now convert all full end-of-line sequences to a NL  */
	i = index (substr (buff, buf_pos + 1, n_read - buf_pos), mt_options.eol_str);

	do while (i ^= 0);
	     out_buf = out_buf || substr (buff, buf_pos + 1, i - 1) || NL;
	     buf_pos = buf_pos + i + length (mt_options.eol_str) - 1;
	     i = index (substr (buff, buf_pos + 1, n_read - buf_pos), mt_options.eol_str);
	end;

	out_buf = out_buf || substr (buff, buf_pos + 1, n_read - buf_pos);
	n_read = length (out_buf);

/* See if we still might have an end-of-line sequence beginning at the
   end of the buffer.  i.e. split across two buffers  */

	if ^eof
	then do;
		i = index (reverse (out_buf), substr (mt_options.eol_str, 1, 1));

		if i ^= 0
		then do;
			buf_pos = length (out_buf) + 1 - i;
			if i < length (mt_options.eol_str)
			then do;
				if substr (out_buf, buf_pos, i) = substr (mt_options.eol_str, 1, i)
				then n_read = buf_pos - 1;
			     end;
		     end;

/* There was a split, so save the first portion of the end-of-line sequence */
		if n_read < length (out_buf)
		then start_of_eol = substr (out_buf, n_read + 1, i);
	     end;


	substr (buff, 1, n_read) = substr (out_buf, 1, n_read);
	return;
     end translate_remote_eol;


%page;
/*  This procedure restores the environment */

clean_up:
     proc (ec);

	dcl     ec		 fixed bin (35);

	ec = 0;

	if protocol_iocb_ptr ^= null ()
	then do;
		call iox_$close (protocol_iocb_ptr, ec);
		call iox_$detach_iocb (protocol_iocb_ptr, 0);
	     end;

	if seg_iocb_ptr ^= null ()
	then do;
		call iox_$close (seg_iocb_ptr, 0);
		call iox_$detach_iocb (seg_iocb_ptr, 0);
	     end;

	if reset_cl_intermediary
	then call cu_$set_cl_intermediary (saved_cl_intermediary);

	if modes_set
	then call iox_$modes (mt_options.ts_iocbp, old_modes, "", 0);

	if old_delay_ptr ^= null
	then call iox_$control (mt_options.ts_iocbp, "set_delay", old_delay_ptr, 0);

	if seg_ptr ^= null
	then call terminate_file_ (seg_ptr, 0, TERM_FILE_TERM, 0);

	if dl_file then call delete_$path (source_dir, source_ename, Del_Switches, whoami, 0);

	return;
     end clean_up;

EXIT:
     end;
