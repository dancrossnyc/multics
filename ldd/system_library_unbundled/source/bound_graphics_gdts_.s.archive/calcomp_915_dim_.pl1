/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

calcomp_915_dim_attach: proc (iocb_ptr, option_array, com_err_sw, code);

/* This code is a tape dim for the CalComp 915 (and similar) plotter
   controller.  The 915 hacks its characters in this format:

   The tape can be either 7- or 9-track, and ALWAYS uses 6-bit characters
   (despite what the lying documentation says).  The records are specified to
   be 480 to 512 chars long; we use up to 510 chars/record.  The first record
   is a dummy record.  It's supposed to contain the ID of the system it was
   created on (a CalComp protective mechanism) but nothing looks at it.  We
   just put out "I am a plot record - stop plot." All significant records must
   start with an octal 37 31 31 37, meaning "I am a plot record." Each record
   must end with the octal code 17, meaning "stop plot" (so it doesn't try to
   plot inter-record gaps - they're wild stuff.)

   The input to this routine is exactly the codes which are to go to the 915.
   The dim has to know about the lengths of commands, because it seems you
   can't split commands across record boundaries.  You also can't put search
   address in mid-record -- the plotter will find them when plotting, but not
   when searching.  The commands are packed in a Multics 9-bit ASCII character
   instead of being in 6-bit.  The conversion from 9-bit to 6-bit is done in
   this DIM.

   Written 5/3/74 by C. D. Tavares */
/* Modified 03/20/75 by CDT to make 9-track tapes possible. */
/* Modified 03/31/75 by CDT to convert to IOX-style module */
/* Modified 04/30/81 by CDT to clean up attach table on attach errors */
/* Last modified 05/19/81 by CDT to remove unused and buggy changemode entry */

dcl  iocb_ptr pointer parameter,
     option_array (*) char (*) varying parameter,
     com_err_sw bit (1) aligned parameter,
     code fixed bin (35) parameter;

dcl  com_err_ ext entry options (variable),
     explanation char (64);

dcl  iox_$attach_ioname ext entry (char (*), pointer, char (*), fixed bin (35)),
     iox_$open ext entry (pointer, fixed bin, bit (1) aligned, fixed bin (35));

dcl  sys_area_p pointer static initial (null),
     sys_area area based (sys_area_p),
     get_system_free_area_ ext entry returns (pointer);

%include iocbv;

dcl 1 switch_data_block aligned based (iocb.attach_descrip_ptr),
    2 attach_description char (64) varying,
    2 open_description char (64) varying,
    2 target_switch pointer,
    2 outdx fixed bin,
    2 buffer bit (buffer_size_in_bits) aligned;

dcl  buffer_size_in_bits fixed bin (24) static initial (3060), /* 510 * 6 */
     buffer_size_in_chars fixed bin (21) static initial (340); /* 510 * 6 / 9 */

dcl  Start_plot bit (24) initial ("011111011001011001011111"b) static,
     Stop_plot bit (6) initial ("001111"b) static;


dcl (error_table_$not_attached,
     error_table_$not_detached,
     error_table_$multiple_io_attachment) ext fixed bin (35);

dcl (null, substr, index) builtin;


	if iocb.attach_descrip_ptr ^= null then do;
	     code = error_table_$not_detached;
	     explanation = "";
	     goto attach_error;
	end;

	if sys_area_p = null then sys_area_p = get_system_free_area_ ();

	allocate switch_data_block in (sys_area) set (iocb.attach_descrip_ptr); /* make an SDB */

	switch_data_block.attach_description = "calcomp_915_dim_ " || option_array (1);

	iocb.open = calcomp_915_open;
	iocb.detach_iocb = calcomp_915_detach;

	switch_data_block.outdx = 0;

	call iox_$attach_ioname ((option_array (1)), target_switch,
	     "ntape_ " || option_array (1) || " -raw -write", code);
	if code ^= 0 then do;
	     explanation = "Attempting to attach tape.";
	     goto attach_error;
	end;

	code = 0;

	call iox_$propagate (iocb_ptr);

	return;

attach_error:
	if com_err_sw then
	     call com_err_ (code, "calcomp_915_dim_", explanation);

	if iocb.attach_descrip_ptr ^= null then do;
	     free iocb.attach_descrip_ptr -> switch_data_block in (sys_area);
	     iocb.attach_descrip_ptr = null;
	end;

	return;

calcomp_915_open: entry (iocb_ptr, mode, append, code);

dcl  mode fixed bin parameter,
     append bit (1) aligned parameter;

%include iox_modes;

dcl  iox_$propagate ext entry (pointer);

	call iox_$open (target_switch, Sequential_output, ""b, code);
	if code ^= 0 then return;

	outdx = 0;
	buffer = Start_plot || Stop_plot;		/* 37 31 31 37 17 - "I am a plot record - stop plot" */
						/* The calcomp wants a dummy record to begin with. */
	call iox_$write_record (target_switch, addr (buffer), buffer_size_in_chars, code); /* put it out there */
	if code ^= 0 then return;			/* Hm! */

	actual_iocb_ptr -> iocb.put_chars = calcomp_915_write;

	open_description = "stream_output";
	iocb.open_descrip_ptr = addr (open_description);

	iocb.close = calcomp_915_close;

	call iox_$propagate (actual_iocb_ptr);

	return;					/* You got it. */
%page;
calcomp_915_close: entry (iocb_ptr, code);

dcl  iox_$detach_iocb ext entry (pointer, fixed bin (35)),
     iox_$close ext entry (pointer, fixed bin (35));

	call put_out;				/* flush last bufferful */

	call iox_$close (target_switch, code);
	if code ^= 0 then return;

	actual_iocb_ptr -> iocb.open = calcomp_915_open;
	actual_iocb_ptr -> iocb.detach_iocb = calcomp_915_detach;
	actual_iocb_ptr -> iocb.open_descrip_ptr = null;

	call iox_$propagate (actual_iocb_ptr);

	return;

calcomp_915_detach: entry (iocb_ptr, code);

	call iox_$detach_iocb (target_switch, code);	/* Whirr! */
	if code ^= 0 then return;

	free iocb.attach_descrip_ptr -> switch_data_block in (sys_area);
	iocb.attach_descrip_ptr = null;

	call iox_$propagate (actual_iocb_ptr);
	return;
%page;
calcomp_915_write: entry (iocb_ptr, wksp, nelem, code);

dcl  nelem fixed bin (21);

dcl  instring bit (inlen) based (wksp),
    (i, j, n_chars) fixed bin,
     wksp pointer,
     indx fixed bin (24);

dcl  inlen fixed bin (24),
     divide builtin,
     before builtin,
     addr builtin,
     error_table_$negative_nelem fixed bin (35) external;

dcl  iox_$write_record ext entry (pointer, pointer, fixed bin (21), fixed bin (35));

dcl  text fixed bin static initial (2),
     search_address fixed bin static initial (1),
     lookup_table (0 : 31) fixed bin static initial
    (1, 4, 1, 1, 2, (11) -1,
     1, 2, 3, 4, 2, 3, 4, 5, 3, 4, 5, 6, 4, 5, 6, 7);

dcl  nelemt fixed bin (21);

	if nelem < 0 then do;			/* there's always a joker. */
	     code = error_table_$negative_nelem;	/* slap his wrists */
	     return;
	end;

	nelemt = 0;

	code = 0;
	if nelem = 0 then return;			/* write nothing - that's easy. */

	inlen = nelem * 9;				/* inlen is in bits */
	indx = 4;					/* first bit we are interested in is fourth. */

	if outdx = 0 then call start_record;		/* we are beginning a tape record */

another_element:
	if fixed (substr (instring, indx - 1, 3)) = text then do;
	     i = fixed (substr (instring, indx + 2, 2));
	     j = fixed (substr (instring, indx + 4, 2));
	     n_chars = fixed (substr (instring, indx + i * 9 + j * 9 + 6, 9)) + i + j + 2;
	end;

	else do;
	     i = fixed (substr (instring, indx - 1, 7));
	     if i = search_address then if outdx ^= length (Start_plot) + 1 then call put_out;
	     n_chars = lookup_table (i);
	end;

	if outdx + n_chars * 6 >= buffer_size_in_bits - 6 then call put_out;

	do i = 1 to n_chars;
	     substr (buffer, outdx, 6) = substr (instring, indx, 6);
	     outdx = outdx + 6;
	     indx = indx + 9;
	end;


	nelemt = nelemt + n_chars;
	if nelemt < nelem then goto another_element;

	return;

put_out:	proc;					/* procedure to append "stop plot", write, and reinitialize buffer */

	     substr (buffer, outdx, 6) = Stop_plot;	/* stop plot. */
	     call iox_$write_record (target_switch, addr (buffer), buffer_size_in_chars, code);
						/* put out the buffer on one record */
	     if code ^= 0 then goto returner;		/* tape dim barfed */

start_record:  entry;				/* entry to reinitialize buffer without writing it out */

	     buffer = Start_plot;			/* 37 31 31 37 - "I am a plot record" */
	     outdx = length (Start_plot) + 1;		/* note that many used */
	     return;
	end put_out;

returner:	return;

     end calcomp_915_dim_attach;
