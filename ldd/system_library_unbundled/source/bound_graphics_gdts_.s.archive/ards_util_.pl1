/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Graphic Support Procedure for ARDS.  Modified from CDT's Tektronix GSP,
   74.09.13 by Dave Moon */
/* Last modified 07/23/75 by C. D. Tavares, to add order call "start_xmit_hd" to
   circumvent gross ARDS blanking protocol problem, and to handle vectors of
   length > 1024 by breaking them up. */

ards_util_: proc;
	return;

dcl  effector fixed bin parameter,
     n_chars_out fixed bin (21) parameter,
    (instring, outstring) char (*) parameter;

dcl  graphic_code_util_$decode_spi ext entry (pointer, fixed bin, (*) fixed bin),
     graphic_code_util_$decode_dpi ext entry (pointer, fixed bin, (*) fixed bin),
    (graphic_code_util_$decode_scl,
     graphic_code_util_$decode_scl_nozero) ext entry (pointer, fixed bin, (*) float bin);

dcl  graphic_matrix_util_$make_matrix ext entry ((3) fixed bin, (3) float bin, (3, 3) float bin),
     graphic_matrix_util_$multiply_3x3_x_1x3 ext entry ((3, 3) float bin, (3) float bin, (3) float bin);

dcl (addr, substr, round) builtin;

dcl  instring_array (262144) char (1) defined (instring) position (1);

dcl (satisfied, maps_active, visible, dotted) bit (1) aligned static;
dcl  cur_mode fixed bin static,
    (Text_Mode fixed bin static init (0),
     Short_Mode fixed bin static init (1),
     Long_Mode fixed bin static init (2));

dcl (matrix (3, 3),
     identity_matrix (3, 3) initial
    (1e0, 0e0, 0e0, 0e0, 1e0, 0e0, 0e0, 0e0, 1e0)) float bin static;

dcl (xyz static, xyz_temp, xyz_temp2, array_copy) (3) float bin;
dcl  round_copy (3) fixed bin (35, 7);

dcl (rotations fixed, scalings float) bin static dimension (3);
dcl (Erase init ("000001100"b),
     TextMode init ("000011100"b),
     CR init ("000001101"b),
     ShortVectorMode init ("000011111"b),
     LongVectorMode init ("000011110"b),
     SetPoint init ("000011101"b)) bit (9) static;

dcl 1 coordinate_sequence unaligned,
    2 first,
      3 one bit (3),
      3 mag bit (5),
      3 sign bit (1),
    2 second,
      3 one bit (3),
      3 dot bit (1),
      3 mag bit (5);

dcl (i, j) fixed bin,
     float_array (3) float bin,
     fixed_array (3) fixed bin;

dcl 1 stack (20) aligned static,			/* to keep track of abs position */
    2 node_val char (3) aligned,
    2 xyz_copy (3) float bin,
    2 satisfied_copy bit (1) aligned;

dcl  stack_depth fixed bin static initial (0);

position:	entry (effector, instring, outstring, n_chars_out);

	n_chars_out = 0;

	call graphic_code_util_$decode_scl (addr (instring_array (2)), 3, xyz_temp); /* get coord values */

	if maps_active then do;			/* map into rotated or scaled coords */
	     xyz_temp2 = xyz_temp;			/* because (xyz_temp) in call blows up pl1 */
	     call graphic_matrix_util_$multiply_3x3_x_1x3 (matrix, xyz_temp2, xyz_temp);
	end;

	goto pos (effector);			/* handle by type */

pos (48): pos (49):					/* setposition and setpoint */
	xyz = xyz_temp;				/* set to abs position */

	if effector = 49 then call draw_to (xyz);	/* draw the point */
	else satisfied = ""b;			/* else say we haven't put it out yet */
	return;

pos (50):	xyz_temp = xyz + xyz_temp;			/* add to abs position */
	call draw_to (xyz_temp);			/* draw the vector */
	return;

pos (51):	xyz = xyz + xyz_temp;			/* add shift to abs position */
	satisfied = ""b;
	return;

pos (52):	xyz = xyz + xyz_temp;			/* add shift to abs position */
	satisfied = ""b;
	call draw_to (xyz);				/* draw the point */
	return;


node_in:	entry (effector, instring, outstring, n_chars_out);

dcl  subscriptrange condition;

	n_chars_out = 0;				/* we swallow them */
	stack_depth = stack_depth + 1;		/* push the stack */
	if stack_depth > hbound (stack, 1) then signal subscriptrange; /* just in case */

	stack (stack_depth).xyz_copy (*) = xyz (*);	/* copy where we are */
	stack (stack_depth).satisfied_copy = satisfied;	/* copy if we really are */
	stack (stack_depth).node_val = substr (instring, 3, 3); /* copy identifier */
	return;

node_out:	entry (effector, instring, outstring, n_chars_out);

	n_chars_out = 0;				/* we swallow these too */
	stack_depth = stack_depth - 1;		/* pop the stack */
	if stack_depth < 0 then signal subscriptrange;	/* just in case */

	return;

expansion: entry (effector, instring, outstring, n_chars_out);

dcl  no_node_match condition;

	n_chars_out = 0;				/* no output needed */
	do i = 1 to stack_depth while (substr (instring, 3, 3) ^= stack (i).node_val);
	end;					/* find where we've expanded to */

	if i > stack_depth then signal no_node_match;	/* should NEVER happen */

	stack_depth = i;				/* pop stack to here again */
	satisfied = stack (stack_depth).satisfied_copy;	/* copy all current position */
	xyz (*) = stack (stack_depth).xyz_copy (*);	/* indicators from where we were */
	cur_mode = -1;

	return;

mode_switch: entry (effector, instring, outstring, n_chars_out);

dcl  iox_$control ext entry (pointer, char (*), pointer, fixed bin (35)),
     code fixed bin (35),
     iox_$look_iocb ext entry (char (*), pointer, fixed bin (35)),
     switch_ptr pointer,
     keep_modes static char (128) initial ("");

dcl  baud_per_del fixed bin static initial (17);

dcl 1 info_structure aligned,
    2 id char (4),
    2 flags aligned,
      3 baud_rate fixed bin (17) unaligned,
      3 pad bit (54) unaligned,
    2 tw_type fixed bin;

	n_chars_out = 0;				/* we swallow this */

	call iox_$look_iocb (instring, switch_ptr, code);
	if code ^= 0 then do;
	     n_chars_out = -code;
	     return;
	end;

	if effector = Prepare_for_graphics then do;	/* put ARDS in graphic mode */
	     if ^ got_speed then do;			/* select adjustable wait length after flash */
		call iox_$control (switch_ptr, "info", addr (info_structure), code);

		number_nuls = 0;
		if code ^= 0 then baud_rate = 1200;	/* not direct to screen, assume 1200 baud */
		number_nuls = baud_rate / baud_per_del;
		got_speed = "1"b;
	     end;

	     call iox_$control (switch_ptr, "start_xmit_hd", null (), code);
						/* don't check code until hardcore control order is known
						   to have been installed at every site */

	     stack_depth = 0;			/* initialize stuff */
	     xyz = 0;
	     matrix = identity_matrix;
	     scalings = 1e0;
	     rotations = 0;
	     visible = "1"b;
	     satisfied = ""b;
	     cur_mode = -1;				/* mode not known */
	     dotted = "0"b;
	end;

	else do;					/* go to text mode */
	     xyz (1) = -508;			/* go to top of page */
	     xyz (2) = 660;
	     xyz (3) = 0;
	     satisfied = ""b;
	     call draw_to (xyz);
	     call put_out (TextMode);
	     call put_out (CR);
	     cur_mode = Text_Mode;

	     call iox_$control (switch_ptr, "stop_xmit_hd", null (), code);
						/* don't check code yet -- see above comment */

	end;

	return;

set_modes: entry (effector, instring, outstring, n_chars_out);

	n_chars_out = 0;				/* we swallow modes */
	call graphic_code_util_$decode_spi (addr (instring_array (2)), 1, fixed_array); /* get mode value */
	if fixed_array (1) = 0 then visible = ""b;	/* we are only called for */
	else visible = "1"b;			/* the intensity mode */
	return;

set_maps:	entry (effector, instring, outstring, n_chars_out);

	n_chars_out = 0;				/* we swallow maps */
	goto mapping_effector (effector);		/* handle by type */

mapping_effector (53):				/* scaling */
	call graphic_code_util_$decode_scl_nozero (addr (instring_array (2)), 3, scalings); /* get scale factors */
	goto map_common;

mapping_effector (54):				/* rotation */
	call graphic_code_util_$decode_dpi (addr (instring_array (2)), 3, rotations); /* get angles */

map_common:
	call graphic_matrix_util_$make_matrix (rotations, scalings, matrix); /* make the mappings */

	do i = 1 to 3;
	     do j = 1 to 3;				/* see if it's really not unity matrix */
		if matrix (i, j) ^= identity_matrix (i, j) then do; /* not unity */
		     maps_active = "1"b;
		     return;
		end;
	     end;
	end;

	maps_active = ""b;				/* matrix is nugatory */
	return;

set_line_type: entry (effector, instring, outstring, n_chars_out);

	n_chars_out = 0;
	call graphic_code_util_$decode_spi (addr (instring_array (2)), 1, fixed_array);
	dotted = (fixed_array (1) ^= 0);		/* 0 = solid, all else dotted (i.e. dashed => dotted) */
	return;

text:	entry (effector, instring, outstring, n_chars_out);

dcl (alignment, string_length) fixed bin,
    (x_offset, y_offset) float bin,
     charsizes (3) float bin initial (16, 13, 3) static;

	n_chars_out = 0;
	if ^visible then return;

	call graphic_code_util_$decode_spi (addr (instring_array (2)), 1, fixed_array); /* get alignment of string */
	alignment = fixed_array (1);

	call graphic_code_util_$decode_dpi (addr (instring_array (3)), 1, fixed_array); /* get length of string */
	string_length = fixed_array (1);

	x_offset, y_offset = 0;			/* from where we currently are */

	y_offset = divide (alignment - 1, 3, 17, 0) / 2 * charsizes (1); /* align by non-top somewhere */

	i = mod (alignment-1, 3) + 1;			/* get x-alignment */
	if i > 1 then x_offset = -string_length * charsizes (2) /* not aligned by left edge */
	     - (string_length - 1) * charsizes (3);
	if i = 2 then x_offset = x_offset / 2e0;	/* aligned by center */

	if ^satisfied | x_offset + y_offset ^= 0 then do; /* must move */
	     call put_out (SetPoint);
	     float_array (1) = xyz (1) + x_offset;
	     float_array (2) = xyz (2) + y_offset;
	     round_copy = float_array;
	     array_copy = round (round_copy, 0);	/* because expand_assign blows up creating temps */
	     call encode (array_copy, "0"b);		/* go to correct position */
	end;

	call put_out (TextMode);			/* go to text mode */
	substr (outstring, n_chars_out + 1, string_length) = substr (instring, 5, string_length);
	n_chars_out = n_chars_out + string_length;	/* return text string here */

	cur_mode = -1;				/* arbitrarily screwed */
	satisfied = ""b;

	return;

pause:	entry (effector, instring, outstring, n_chars_out);

dcl  iox_$get_line ext entry (pointer, pointer, fixed bin, fixed bin, fixed bin (35)),
     iox_$user_input pointer external,
     junk char (200) aligned;

	call iox_$get_line (iox_$user_input, addr (junk), 200, 0, code); /* wait for LF */
	n_chars_out = - code;			/* if nonzero, error */
	return;

erase:	entry (effector, instring, outstring, n_chars_out);

dcl  NUL char (1) static aligned initial (" "),
     got_speed bit (1) initial (""b) aligned static,
     number_nuls fixed bin static initial (100);

	n_chars_out = 1 + number_nuls;
	unspec (substr (outstring, 1, 1)) = Erase;
	substr (outstring, 2, n_chars_out) = copy (NUL, number_nuls); /* this erases screen */
	cur_mode = -1;				/* clears mode in hardware */
	return;


draw_to:	proc (coordinates);

dcl  coordinates (3) float bin;

dcl (i, n_sub_components) fixed bin,
     max_component float bin;

	     if ^visible then do;			/* we don't put out many little shifts */
		satisfied = ""b;
		xyz = coordinates;
		return;
	     end;

	     if ^satisfied then do;			/* go to where we should be */
		call put_out (SetPoint);
		cur_mode = -1;
		round_copy = xyz;
		array_copy = round (round_copy, 0);
		call encode (array_copy, "0"b);	/* put out coordinates */
		satisfied = "1"b;			/* we are where we think we are */
	     end;
	     round_copy = coordinates - xyz;
	     array_copy = round (round_copy, 0);

	     max_component = max (abs (array_copy (1)), abs (array_copy (2)));

	     if max_component = 0 then return;		/* done for now */

	     if dotted | max_component >= 32 then do;	/* have to use long mode */
		if cur_mode ^= Long_Mode then do;
		     call put_out (LongVectorMode);
		     cur_mode = Long_Mode;
		end;

		if max_component < 1024 then call encode (array_copy, "1"b); /* simple case */

		else do;				/* split up into more than one vector */
		     n_sub_components = max_component / 1024 + 1;
		     array_copy = array_copy / n_sub_components;

		     do i = 1 to n_sub_components;
			call encode (array_copy, "1"b);
		     end;

		end;
	     end;

	     else do;				/* use short mode */
		if cur_mode ^= Short_Mode then do;
		     call put_out (ShortVectorMode);
		     cur_mode = Short_Mode;
		end;
						/* now put a 2-char short vector */

		first.one = "001"b;
		first.mag = bit (fixed (array_copy (1), 5), 5);
		first.sign = (array_copy (1) < 0);
		call put_out (unspec (first));

		first.mag = bit (fixed (array_copy (2), 5), 5);
		first.sign = (array_copy (2) < 0);
		call put_out (unspec (first));
	     end;
	     xyz = coordinates;			/* remind ourselves we are really there now */
	     return;

	end draw_to;

encode:	proc (float_coords, vis);			/* puts out a vector to (float_coords) */

dcl (float_coords (3)) float bin parameter,
     vis bit (1) aligned parameter,
     coords (3) fixed bin,
     fromword fixed bin;

	     coords = float_coords;

	     fromword = coords (1);			/* do X - hardware clips so don't bother */
	     if fromword < 0 then do;
		fromword = - fromword;
		first.sign = "1"b;
	     end;
	     else first.sign = "0"b;
	     first.one, second.one = "001"b;
	     first.mag = substr (unspec (fromword), 32, 5); /* low */
	     second.mag = substr (unspec (fromword), 27, 5); /* high */
	     second.dot = ^ vis;			/* hardware stupidity requires ^ */

	     call put_out (unspec (first));
	     call put_out (unspec (second));

	     fromword = coords (2);			/* do Y */
	     if fromword < 0 then do;
		fromword = - fromword;
		first.sign = "1"b;
	     end;
	     else first.sign = "0"b;
	     first.mag = substr (unspec (fromword), 32, 5); /* low */
	     second.mag = substr (unspec (fromword), 27, 5); /* high */
	     second.dot = dotted;

	     call put_out (unspec (first));
	     call put_out (unspec (second));

	     return;

	end encode;

put_out:	proc (char);				/* puts one char into outstring */

dcl  char bit (9);

	     n_chars_out = n_chars_out + 1;
	     unspec (substr (outstring, n_chars_out, 1)) = char;
	     return;
	end put_out;

%include graphic_device_table;

     end ards_util_;
