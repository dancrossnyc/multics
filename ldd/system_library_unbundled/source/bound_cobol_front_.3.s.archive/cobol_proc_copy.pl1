/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_proc_copy.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 11/25/81 by FCH, [5.1-2], main prog added to include file table, BUG519(phx11818) */
/* Modified on 11/19/81 by FCH, [5.1-1], line number in source map incorrect, BUG519(phx11818) */
/* Modified on 04/09/80 by FCH, [4.2-2], fix problems with leveling diags */
/* Modified on 12/7/79 by MHD, [4.2-1], corrected leveling problems from validation */
/* Modified on 04/09/79 by FCH, [4.0-3], [3.0-2] wiped out */
/* Modified on 02/23/79 by FCH, [4.0-1], copy file name qualification */
/* Modified on 11/02/78 by RAL, [3.0-2], COPY REPLACING and REPLACE added for MR7.0 */
/* Modified 06/19/77 [3.0-1] by RAL to save include names for symbol table */
/* Modified since Version 3.0.     */





/* format: style3 */
cobol_proc_copy:
     proc;

/* ========================================================================== */
/*                                                                            */
/* This routine is intended to process the COPY verb and load the tables      */
/* with the replacement text.  After loading the tables with text, it will    */
/* cause the named library file to become active.                             */
/*                                                                            */
/* ========================================================================== */





start:
	fn_len = 0;
	ln_len = 0;

/* COPY processing */

/*[4.0-3]*/
	if reserved_word.key = 425			/* replace */
						/*[4.0-3]*/
	then do;
		if fixed_common.options.exp		/*[4.0-3]*/
		then do;
			if fixed_common.comp_level < "5"
						/*[4.2-2]*/
			then call diag (173, reserved_word.line, reserved_word.column);
						/*[4.0-3]*/
		     end;				/*[4.0-3]*/
		else call cobol_lexerr (35, "0"b, 0, " ");

/*[4.0-3]*/
		go to scan_off;			/*[4.0-3]*/
	     end;

/*[4.2-2]*/
	copy.line = reserved_word.line;		/* copy */
						/*[4.2-2]*/
	copy.col = reserved_word.column;

	if cobol_copy_active
	then do;
		call cobol_lexerr (7, "0"b, 0, " ");
		goto scan_off;
	     end;

	save_card = cobol_cards.name;
	save_clen = cobol_cards.column;
	cobol_stack_sw = "1"b;
	cobol_lu_sw = "0"b;				/* don't convert next word to upper case */
	substr (token.l_info, 3, 1) = "1"b;

	call cobol_gns1;

	substr (token.l_info, 3, 1) = "1"b;
	cobol_lu_sw = "1"b;

	if user_word.type ^= 8
	then do;					/* error - should be file name */
		call cobol_lexerr (10, "0"b, 0, " ");
		call cobol_lexerr (11, "0"b, 0, " ");

scan_off:
		do while ("1"b);			/*[4.0-3]*/
		     if reserved_word.type = 1	/*[4.0-3]*/
		     then do;
			     if reserved_word.key = 256
						/* == */
						/*[4.0-3]*/
			     then do while ("1"b);

/*[4.0-3]*/
				     substr (token.l_info, 3, 1) = "1"b;
						/*[4.0-3]*/
				     call cobol_gns;

/*[4.0-3]*/
				     if reserved_word.type = 1 & reserved_word.key = 256
						/* == */
						/*[4.0-3]*/
				     then go to scan_1;

/*[4.0-3]*/
				end;

/*[4.0-3]*/
			     else /*[4.0-3]*/
				if reserved_word.key = 189
						/* . */
						/*[4.0-3]*/
			     then do;
				     substr (token.l_info, 3, 1) = "1"b;
						/*[4.0-3]*/
				     cobol_stack_sw = "0"b;

/*[4.0-3]*/
				     return;	/*[4.0-3]*/
				end;		/*[4.0-3]*/
			end;

		     if user_word.type = 8
		     then if user_word.column < 12
			then do;			/* if period missing stop on procedure name */

				call cobol_lexerr (12, "0"b, 0, " ");

				cobol_stack_sw = "0"b;
				return;
			     end;
scan_1:
		     substr (token.l_info, 3, 1) = "1"b;

		     call cobol_gns;
		end;
	     end;

	fn_len = user_word.length;
	file_name = substr (user_word.word, 1, fn_len);

	call cobol_gns1;

	substr (token.l_info, 3, 1) = "1"b;

	if reserved_word.type = 1
	then if (reserved_word.key = 133) | (reserved_word.key = 101)
						/* OF or IN */
	     then do;				/* library file will be specified */

		     cobol_lu_sw = "0"b;		/* don't convert next word to upper case */

/*[4.2-2]*/
		     lib.line = reserved_word.line;	/*[4.2-2]*/
		     lib.col = reserved_word.column;

		     call cobol_gns1;

		     substr (token.l_info, 3, 1) = "1"b;
		     cobol_lu_sw = "1"b;

		     if user_word.type = 8
		     then do;			/* save pointer to name of library file */

			     lib_name = substr (user_word.word, 1, user_word.length);
			     ln_len = user_word.length;

			     call cobol_gns1;

			     substr (token.l_info, 3, 1) = "1"b;
			     goto ck_rep;
			end;

		     call cobol_lexerr (10, "0"b, 0, " ");
						/* error in library entry specification */
		     call cobol_lexerr (11, "0"b, 0, " ");

		     goto scan_off;
		end;				/*[4.0-1]*/
	     else lib_name = "";

ck_rep:						/*[4.2-1]*/
	if fixed_common.comp_level = "1"		/*[4.2-2]*/
	then call diag (64, copy.line, copy.col);	/* COPY statement */

/*[4.2-1]*/
	if fixed_common.comp_level < "4"		/*[4.2-1]*/
	then if lib_name ^= ""			/*[4.2-2]*/
	     then call diag (209, lib.line, lib.col);	/* library-name phrase */

/*[4.0-3]*/
	if reserved_word.type = 1 & reserved_word.key = 152
						/* replacing */
						/*[4.0-3]*/
	then do;
		if fixed_common.options.exp		/*[4.0-3]*/
		then if fixed_common.comp_level < "4"	/*[4.2-2]*/
		     then call diag (65, reserved_word.line, reserved_word.column);
						/* REPLACING phrase */
						/*[4.2-1]*/
		     else ;			/*[4.0-3]*/
		else call cobol_lexerr (36, "0"b, 0, " ");

/*[4.0-3]*/
		go to scan_off;			/*[4.0-3]*/
	     end;


/*[4.0-3]*/
	if fixed_common.options.exp
	then go to scan_off;

	if reserved_word.type = 1
	then if reserved_word.key = 189
	     then goto copy_ready;			/* then	if "." ... */

	call cobol_lexerr (14, "0"b, 1, ".");

	goto scan_off;

/* text portion of file built here */

copy_ready:
	if fn_len ^= 0
	then do;					/* we have a file to access */


/*[4.0-1]*/
		call expand_cobol_source$find_incl_file
		     /*[4.0-1]*/ (substr (file_name, 1, fn_len), lib_name, cobol_sfp, cobol_cfp, code);

		if code = 0 | code = error_table_$zero_length_seg
		then go to cpy_fnd;
		else go to copy_file_error;		/* abort */

cpy_fnd:
		call hcs_$fs_get_path_name (cobol_cfp, dir_name, ldn, entry_name, code);
						/* [3.0-1] */
		call cobol$push_name (dir_name, entry_name);
						/* [3.0-1] */

		cobol_$include_cnt = cobol_$include_cnt + 1;

		if cobol_$include_cnt > 1000
		then goto excess_copy_error;

/*[5.1-1]*/
		include_ptr (cobol_$include_cnt) = pointer (cobol_cfp, copy.line - cobol_merge$copy_line_count ());

		if cobol_cards.nr_char ^= 8
		then do;
			cobol_cards.nr_char = cobol_cards.nr_char - 1;
			substr (cobol_cards.name, cobol_cards.nr_char, 1) = cobol_new_line_character;

		     end;
		else cobol_cards.nr_char = cobol_cards.column;

		cobol_copy_found = "1"b;
		substr (token.l_info, 3, 1) = "1"b;

/*[5.1-1]*/
		call cobol_merge$incr_line_count;

	     end;
	else call cobol_lexerr (28, "0"b, 0, " ");

	cobol_stack_sw = "0"b;

	return;

/*======================================*/

declare	cobol_merge$copy_line_count
			entry returns (fixed bin);
declare	cobol_merge$incr_line_count
			entry;

dcl	cobol_c_list	entry (ptr);
dcl	lev_message_ptr	ptr;
dcl	1 lev_message	internal static,
	  2 size		fixed bin init (28),
	  2 line		fixed bin init (0),
	  2 column	fixed bin init (0),
	  2 type		fixed bin init (5),
	  2 run		fixed bin init (9),
	  2 number	fixed bin init (0),
	  2 info		bit (32) init ("0"b);

/*[4.2-2]*/
declare	1 lib,					/*[4.2-2]*/
	  2 line		fixed bin,		/*[4.2-2]*/
	  2 col		fixed bin;

/*[4.2-2]*/
declare	1 copy,					/*[4.2-2]*/
	  2 line		fixed bin,		/*[4.2-2]*/
	  2 col		fixed bin;

diag:
     proc (num, line, col);
dcl	(num, line, col)	fixed bin;

/*[4.0-3]*/
	lev_message.line = line;			/*[4.0-3]*/
	lev_message.column = col;
	lev_message.number = num;
	lev_message_ptr = addr (lev_message);

	call cobol_c_list (lev_message_ptr);

     end;

dcl	ioa_$rsnnl	entry options (variable);
dcl	signal_		entry (char (*), ptr, ptr);

copy_file_error:
	call ioa_$rsnnl ("COPY file ^a not found", error_info.message, error_info.message_len, file_name);
	go to abort;

excess_copy_error:
	call ioa_$rsnnl ("EXCESS 1000 copy files in a cobol program.", error_info.message, error_info.message_len);
	goto abort;

abort:
	error_info.name = "library";
	call signal_ ("command_abort_", null (), addr (error_info));
exit_abort:
	return;

/*   reserved_word    */
dcl	1 reserved_word	based (cobol_current),
	  2 fwd_link	pointer,
	  2 back_link	pointer,
	  2 rep_link	pointer,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,		/* = 1 */
	  2 key		fixed bin,
	  2 class		bit (26),
	  2 jump_index	fixed bin;

/*   alphanum_lit    */
dcl	1 alphanum_lit	based (cobol_current),
	  2 fwd_link	pointer,
	  2 back_link	pointer,
	  2 rep_link	pointer,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,		/* = 3 */
	  2 info		bit (8),
	  2 length	fixed bin,
	  2 string	char (200);

/*   user_word    */
dcl	1 user_word	based (cobol_current),
	  2 fwd_link	pointer,
	  2 back_link	pointer,
	  2 rep_link	pointer,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,		/* = 8 */
	  2 info		bit (8),
	  2 length	fixed bin,
	  2 word		char (30);

/*   message    */
dcl	1 message		based (cobol_current),
	  2 fwd_link	pointer,
	  2 back_link	pointer,
	  2 rep_link	pointer,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,		/* = 5 */
	  2 run		fixed bin,
	  2 number	fixed bin,
	  2 info		bit (8),
	  2 length	fixed bin,
	  2 image		char (200);

/*   general overlay for any token    */
dcl	1 token		based (cobol_current),
	  2 fwd_link	pointer,
	  2 back_link	pointer,
	  2 rep_link	pointer,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin;

/*   general overlay for any replacement token    */
dcl	1 rtoken		based (rep_point),
	  2 chain		pointer,
	  2 back_link	pointer,
	  2 lev_link	pointer,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin;


/*   source    */
dcl	1 source		based (cobol_current),
	  2 fwd_link	pointer,
	  2 back_link	pointer,
	  2 rep_link	pointer,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,		/* = 6 */
	  2 info		bit (8),
	  2 length	fixed bin,
	  2 image		char (200);

dcl	1 source1		based (cobol_current),
	  2 fwd_link	ptr,
	  2 back_link	ptr,
	  2 rep_link	ptr,
	  2 l_info	bit (8),
	  2 size		fixed bin (17),
	  2 fill1		fixed bin (17),
	  2 fill		char (1),
	  2 sm		bit (1),
	  2 copy		bit (1),
	  2 sln		bit (22),
	  2 type		fixed bin (17);

/* save area for library file <-> source file transfer */
dcl	rep_point		pointer;

/*  replacement table */

dcl	n_c		char (200) based;		/*  source card images */
						/*[5.1-2]*/
dcl	include_ptr	(0:1000) ptr based (cobol_$include_info_ptr);


dcl	cobol_gns1	entry external;
dcl	find_include_file_$initiate_count
			entry (char (*), ptr, char (*), fixed bin (24), ptr, fixed bin (35));
dcl	error_table_$zero_length_seg
			fixed bin (35) ext;
dcl	code		fixed bin (35);
dcl	bc		fixed bin (24);
dcl	cobol_lexerr	entry (fixed bin, bit (1), fixed bin, char (50)) external;
dcl	cobol_gns		entry external;
dcl	cobol_insert_token	entry (fixed bin, fixed bin) external;
dcl	cobol_delete_tokens$unlnk
			entry (ptr) external;
dcl	cobol_allo_tm	entry (ptr, fixed bin) ext;

dcl	st		bit (32);
dcl	(pn_len, fn_len, ln_len, save_clen, i)
			fixed bin;
dcl	(file_name, lib_name)
			char (44);
dcl	pname		char (168) aligned;
dcl	pnb		char (pn_len) based (addr (pname));
dcl	get_wdir_		entry returns (char (168) aligned) ext;
dcl	p		pointer;
dcl	err		bit (1);
dcl	save_card		char (256) static;
dcl	fnb		char (fn_len) based (addr (file_name));
dcl	lnb		char (ln_len) based (addr (lib_name));

dcl	pointer		builtin;
dcl	addr		builtin;
dcl	null		builtin;
dcl	substr		builtin;


dcl	hcs_$fs_get_path_name
			entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
						/* [3.0-1] */
dcl	expand_cobol_source$find_incl_file
			entry (char (*), char (*), ptr, ptr, fixed bin (35));
						/*[4.0-1]*/
dcl	dir_name		char (168);		/* [3.0-1] */
dcl	ldn		fixed bin;		/* [3.0-1] */
dcl	entry_name	char (168);		/* [3.0-1] */
dcl	cobol$push_name	entry (char (168), char (168));
						/* [3.0-1] */



%include cobol_fixed_common;
%include cobol_error_info;
%include cobol_;
%include cobol_ext_lex;
%include cobol_ext_;

     end cobol_proc_copy;
