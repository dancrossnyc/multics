/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_usrwd.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 04/24/78 by FCH, [3.0-1], delete inherited usage on non-elem dn */
/* Modified since Version 3.0 */

/* format: style3 */
cobol_usrwd:
     proc (ptrtab_ptr, counter, hashptr, sectno, ntendptr, ref_type, was_found, not_found, diag_no, ntptr2);


/*  DECLARATION OF THE PARAMETERS  */

dcl	ptrtab_ptr	ptr;			/* points to data name stack pointer table (input) */
dcl	counter		fixed bin (15);		/* number of entries in data name stack pointer table (input) */
dcl	hashptr		ptr;			/* points to string base table array (input) */
dcl	sectno		fixed bin (15);		/* current section number (input) */
dcl	ntendptr		ptr;			/* points to word following last name table buffer entry (input) */
dcl	ref_type		bit (1);			/* reference type: "0"b - data, "1"b - procedure (input) */
dcl	was_found		bit (1);			/* set to "1"b if name found without error (output) */
dcl	not_found		bit (1);			/* set to "1"b if name not found and no error (output) */
dcl	diag_no		fixed bin (15);		/* error type (out) */
dcl	ntptr2		ptr;			/* points to name table buffer entry for a found name (output) */

dcl	1 auser_word	based (stackptr),
	  2 size		fixed bin (15),
	  2 line		fixed bin (15),
	  2 column	fixed bin (7),
	  2 type		fixed bin (7),
	  2 searched	bit (1),
	  2 duplicate	bit (1),
	  2 info3		bit (6),
	  2 length	fixed bin (7),
	  2 word		char (30);

dcl	template		char (500) based (ntptr);
dcl	template1		(500) char (1) based (addr (template));
declare	BIT36		bit (36) based;

/*  DECLARATION OF INTERNAL VARIABLES  */

dcl	alength		fixed bin (15);
dcl	blength		fixed bin (15);
dcl	(i, k, n, s)	fixed bin (15);
dcl	prev_k		fixed bin (15);
dcl	hashno		fixed bin (15);
dcl	psectno		fixed bin (15);
dcl	this_sectno	fixed bin (15);
dcl	levstack		(50) fixed bin (15);
dcl	cn1		char (4);
dcl	aname		char (30);
dcl	bname		char (30);
dcl	ntptr		ptr;
dcl	ntptr1		ptr;
dcl	(ptr1, dn_ptr)	ptr;
dcl	not_done		bit (1);
dcl	found_one		bit (1);
dcl	still_searching	bit (1);
dcl	section_not_finished
			bit (1);


dcl	ptrtable		(1:50) ptr based (ptrtab_ptr);
dcl	arrpntr		(1:512) ptr based (hashptr);
dcl	stackptr		ptr;
dcl	stackbegptr	ptr;

dcl	fileno		fixed bin;
dcl	name_ptr		ptr;			/* for fd_token include file */

dcl	addr		builtin;
dcl	fixed		builtin;
dcl	mod		builtin;
dcl	null		builtin;
dcl	substr		builtin;
dcl	unspec		builtin;


/************************************/
start:
	fileno = 0;
restart:
	stackptr = ptrtable (counter);		/*  point at the highest qualifier in the name stack  */
	was_found = "0"b;
	not_found = "1"b;
	not_done = "1"b;
	alength = auser_word.length;
	substr (aname, 1, alength) = substr (auser_word.word, 1, alength);

	hashno = 0;				/* hash user word to get ntptr */
	do i = 1 to alength;
	     hashno = hashno + fixed (unspec (substr (aname, i, 1)), 15);
	end;
	ntptr = arrpntr (mod (hashno, 512) + 1);

	if ^ref_type
	then do;					/* IDENTIFIER REFERENCE */
		call search;
		if ntptr = null ()
		then go to notfound;
		if ntptr -> data_name.type = 18
		then go to notfound;		/* proc-names are last in hash string */

		if counter = 1
		then do;				/* UNQUALIFIED DATA-NAME */

			if fileno ^= 0
			then do;			/* file-name (> 0) or cd-name (< 0) qualification */
				do while (ntptr ^= null ());
				     if ntptr -> data_name.type = 9 & ntptr -> data_name.file_num = fileno
				     then do;
					     if was_found
					     then do;
						     diag_no = fatal_AMBIGUOUS_QUAL_REF;
						     go to duplicate_error;
						end;
					     else do;
						     was_found = "1"b;
						     ntptr2 = ntptr;
						end;
					end;
				     ntptr = ntptr -> data_name.string_ptr;
				     call search;
				end;
				if was_found
				then go to found;
				else go to notfound;
			     end;

			ntptr2 = ntptr;
			if ^ntptr2 -> data_name.searched
			then do;
				ntptr2 -> data_name.searched = "1"b;
				ntptr = ntptr2 -> data_name.string_ptr;
				call search;	/* see if there's another */
				if ntptr ^= null ()
				then ntptr2 -> data_name.duplicate = "1"b;
			     end;
			if ntptr2 -> data_name.duplicate
			then do;
				if ntptr2 -> data_name.type = 9
				then do;
					if ntptr2 -> data_name.level = 1
					then diag_no = fatal_DATANAME_MULTIPLY_DECLARED;
					else diag_no = fatal_AMBIGUOUS_UNQUAL_REF;
				     end;
				else if ntptr2 -> data_name.type = 12 | ntptr2 -> data_name.type = 16
				then diag_no = fatal_FILENAME_MULTIPLY_DECLARED;
				else if ntptr2 -> data_name.type = 13
				then diag_no = fatal_CDNAME_MULTIPLY_DECLARED;
				else diag_no = fatal_DATANAME_MULTIPLY_DECLARED;
				go to duplicate_error;
			     end;
			else go to found;
		     end;

		else do;				/* QUALIFIED DATA-NAME */
			if (ntptr -> data_name.type = 12 | ntptr -> data_name.type = 16
			     | ntptr -> data_name.type = 13) & fileno = 0
			then do;			/* file or cd-name qualification */
				ntptr1 = ntptr;
				ntptr = ntptr1 -> data_name.string_ptr;
				call search;
				if ntptr = null ()
				then do;		/* found a unique file-name */
					ntptr = ntptr1;
					if ntptr -> data_name.type = 13
					then fileno = ntptr -> cdtoken.cd_num;
					else fileno = ntptr -> fd_token.file_no;
					levstack (counter) = 0;
					counter = counter - 1;
					go to restart;
				     end;
				else do;
					if ntptr -> data_name.type = 12 | ntptr -> data_name.type = 16
					then diag_no = fatal_FILENAME_MULTIPLY_DECLARED;
					else if ntptr -> data_name.type = 13
					then diag_no = fatal_CDNAME_MULTIPLY_DECLARED;
					else diag_no = fatal_DATANAME_MULTIPLY_DECLARED;
					go to duplicate_error;
				     end;
			     end;
			levstack (counter + 1) = 0;	/* dummy level higher than all legal vlevels */
			do while (not_done);	/* use string technique to search all occurrences of highest qualifier */
			     ntptr1 = ntptr;	/* save ptr to highest qualifier */
			     k = counter - 1;
			     prev_k = counter;
			     still_searching = "1"b;
			     if ntptr -> data_name.type = 9
			     then levstack (counter) = ntptr -> data_name.level;
						/*   else if ntptr->data_name.type = 13 then levstack(counter) = ntptr->cdtoken.level;  */
			     else do;
				     if ntptr -> data_name.type = 17
				     then diag_no = fatal_MNEMONIC_NAME_QUALIFIER;
				     else if ntptr -> data_name.type = 10
				     then diag_no = fatal_INDEX_NAME_QUALIFIER;
				     else if ntptr -> data_name.type = 40
				     then diag_no = fatal_ALPHABET_NAME_QUALIFIER;
				     else diag_no = fatal_INVALID_QUALIFIER;
				     not_found = "0"b;
				     go to fail_exit;
				end;
			     do while (still_searching);
						/* linear search for rest starting at 2nd highest level */
				ntptr = addrel (ntptr, divide (ntptr -> data_name.size + 11, 8, 17, 0) * 2);
				if ntptr = ntendptr
				then still_searching = "0"b;
						/* abandon search but check if found */
				else if ntptr -> data_name.type ^= 10
				then do;		/* skip type 10's */
					do while (ntptr -> data_name.level <= levstack (k + 1));
					     k = k + 1;
					end;
					still_searching = k < counter;
						/* search until backed up to highest qualifier */
					if still_searching
					then do;
						if k ^= prev_k
						then do;
							prev_k = k;
							stackptr = ptrtable (k);
							blength = auser_word.length;
							substr (bname, 1, blength) =
							     substr (auser_word.word, 1, blength);
						     end;
						n = size_TOKEN (ntptr -> data_name.type) - 3;
						cn1 = substr (template, n, 4);
						if blength = fixed (unspec (cn1), 15)
						then if substr (bname, 1, blength)
							= substr (template, n + 4, blength)
						     then if k = 1
							then /* at lowest level */
							     if was_found
							     then do;
						/* full name already found */
								     diag_no = fatal_AMBIGUOUS_QUAL_REF;
								     go to duplicate_error;
								end;
							     else do;
						/* first time full name found */
								     if fileno = 0
									| (ntptr -> data_name.type = 9
									& ntptr -> data_name.file_num
									= fileno)
								     then do;
									     was_found = "1"b;
									     ntptr2 = ntptr;
									end;
								end;
							else do;
						/* found a qualifier, look for next lower qualifier */
								levstack (k) = ntptr -> data_name.level;
								k = k - 1;
							     end;
					     end; /* if still_searching  */
				     end;		/* if data_name.type ^= 10 */
			     end;			/* while(still_searching) */
			     ntptr = ntptr1 -> data_name.string_ptr;
			     call search;
			     if ntptr = null ()
			     then not_done = "0"b;
			     else if ntptr -> data_name.type = 18
			     then not_done = "0"b;
			end;			/* while(not_done) */
		     end;				/* if counter ^= 1 */
	     end;					/* if ^ref_type */

	else do;					/* SECTION or PARAGRAPH-NAME REFERENCE */
		stackbegptr = ptrtable (1);		/* point at the qualified name in the name stack */
		do while (not_done);		/* get first type 18 token */
		     call search;
		     if ntptr = null ()
		     then return;			/* section or paragraph-name not found */
		     else if ntptr -> proc_ref.type = 18
		     then not_done = "0"b;
		     else ntptr = ntptr -> proc_ref.string_ptr;
		end;
		if counter = 1
		then do;				/* UNQUALIFIED SECTION or PARAGRAPH-NAME REFERENCE */
			ntptr1 = ntptr;
			psectno = ntptr -> proc_ref.section_num;

/* try to find an occurrence of this section or paragraph-name in the referencing section */

			do while (psectno > sectno);
			     ntptr = ntptr -> proc_ref.string_ptr;
			     call search;
			     if ntptr = null ()
			     then psectno = -1;	/* exit do loop with failure */
			     else psectno = ntptr -> proc_ref.section_num;
			end;
			if psectno = sectno
			then do;			/* Found first occurrence of this section or paragraph-name in the
				   referencing section. Now look for a duplicate in the same section */

				ntptr2 = ntptr;
				if ntptr -> proc_ref.searched
						/* was this string searched before? */
				then if ntptr -> proc_ref.duplicate
				     then do;	/* duplicate found in previous search */
					     diag_no = fatal_PROCNAME_MULTIPLY_DECLARED;
					     go to duplicate_error;
					end;
				     else was_found = "1"b;
						/* no duplicate found */
				else do;		/* first time string searched */
					ntptr -> proc_ref.searched = "1"b;
					ntptr = ntptr -> proc_ref.string_ptr;
					call search;
					if ntptr ^= null ()
					then if ntptr -> proc_ref.section_num = sectno
					     then do;
						/* duplicate found in this section */
						     diag_no = fatal_PROCNAME_MULTIPLY_DECLARED;
						     ntptr2 -> proc_ref.duplicate = "1"b;
						     go to duplicate_error;
						end;
					     else was_found = "1"b;
					else was_found = "1"b;
				     end;
			     end;
			else do;			/* Section or paragraph-name not found in referencing section,
					   search for a duplicate in any section. */

				ntptr = ntptr1 -> proc_ref.string_ptr;
				call search;
				if ntptr ^= null ()
				then do;		/* found another occurrence of this section or paragraph-name */
					diag_no = fatal_AMBIGUOUS_PROCNAME_REF;
					go to duplicate_error;
				     end;
				else do;		/* no other occurrence of this section or paragraph name found */
					was_found = "1"b;
					ntptr1 -> proc_ref.searched = "1"b;
					ntptr2 = ntptr1;
				     end;
			     end;			/* Section or paragraph-name not found in referencing section... */
		     end;				/* UNQUALIFIED SECTION or PARAGRAPH-NAME REFERENCE */
		else if counter = 2 & ntptr -> proc_ref.section_name
		then do;				/* ONLY ONE QUALIFIER AND THAT QUALIFIER IS A SECTION-NAME */
			ntptr1 = ntptr;		/* save ptr to first occurrence of section-name */
			not_done = "1"b;
			do while (not_done);	/* search all occurrences of this section-name */
			     found_one = "0"b;
			     if ntptr -> proc_ref.section_name
			     then do;		/* linearly search this section for all occurrences of the paragraph-name */
				     this_sectno = ntptr -> proc_ref.section_num;
				     section_not_finished = "1"b;
				     do while (section_not_finished);
					ntptr =
					     addrel (ntptr, divide (ntptr -> proc_ref.size + 11, 8, 17, 0) * 2);
					if ntptr = ntendptr
					then section_not_finished = "0"b;
					else if ntptr -> proc_ref.type ^= 18
					then section_not_finished = "0"b;
					else if ntptr -> proc_ref.section_num ^= this_sectno
					then section_not_finished = "0"b;
					else if ntptr -> proc_ref.name_size = stackbegptr -> auser_word.length
					then if substr (ntptr -> proc_ref.name, 1, ntptr -> proc_ref.name_size)
						=
						substr (stackbegptr -> auser_word.word, 1,
						ntptr -> proc_ref.name_size)
					     then if found_one
						then do;
						/* found duplicate in this section */
							diag_no = fatal_PROCNAME_MULTIPLY_DECLARED;
							ntptr2 -> proc_ref.duplicate = "1"b;
							go to duplicate_error;
						     end;
						else do;
						/* found first occurrence of
								   paragraph, search for
								   another in this section */

							found_one = "1"b;
							ntptr -> proc_ref.searched = "1"b;
							ntptr2 = ntptr;
						     end;
				     end;		/* do while(section_not_finished) */
				     if was_found & found_one
				     then do;	/* entire qualified name was already found */
					     diag_no = fatal_AMBIGUOUS_PROCNAME_REF;
					     go to duplicate_error;
					end;
				     else was_found = found_one;
				end;		/* linearly search this section for all occurrences of the paragraph-name */
			     ntptr = ntptr1 -> proc_ref.string_ptr;
			     call search;
			     not_done = ntptr ^= null ();
			end;			/* do while(not_done) */
		     end;				/* ONLY ONE QUALIFIER AND THAT QUALIFIER IS A SECTION-NAME */
	     end;
	return;

search:
     procedure;

	do while (ntptr ^= null ());
	     n = size_TOKEN (ntptr -> data_name.type) - 3;
	     cn1 = substr (template, n, 4);
	     if alength = fixed (unspec (cn1), 15)
	     then if substr (aname, 1, alength) = substr (template, n + 4, alength)
		then return;
	     ntptr = ntptr -> data_name.string_ptr;
	end;

     end search;


/*************************************/
/* EXITS */
/*************************************/
found:
	if ntptr2 -> data_name.type = 9 & ntptr2 -> data_name.non_elementary
						/* [3.0-1] */
	then addr (ntptr2 -> data_name.file_section) -> BIT36 =
		/* [3.0-1] */ addr (ntptr2 -> data_name.file_section) -> BIT36 /* [3.0-1] */
		& /* [3.0-1] */ "111111111111100111111111111110000001"b;
						/* [3.0-1] */
	was_found = "1"b;
	not_found = "0"b;
success_exit:
	return;

notfound:
	was_found = "0"b;
	not_found = "1"b;
fail_exit:
	return;

duplicate_error:
	was_found = "0"b;
	not_found = "0"b;
	go to fail_exit;

/************************************/
/* INCLUDE FILES */
/************************************/
%include cobol_repl_diag_values;
%include cobol_size_values;
%include cobol_type12;
%include cobol_ext_;
%include cobol_type9;
%include cobol_type13;
%include cobol_type18;

     end cobol_usrwd;
