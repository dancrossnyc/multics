/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_proc_sort.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* 6/16/77, FCH, fixed bin decls standardized */
/* Modified on 11/16/76 to set corst.s_info4 for merge (in conjunction with cobol_repl3 change) */
/* Modified since Version 2.0 */

/* format: style3 */
cobol_proc_sort:
     proc;

dcl	1 sio,
	  2 chain		char (5),
	  2 bsns		fixed bin,
	  2 bsn		char (30),
	  2 esns		fixed bin,
	  2 esn		char (30),
	  2 ssn		fixed bin,
	  2 sfns		fixed bin,
	  2 sfn		char (30),
	  2 io		bit (1),
	  2 bits,
	    3 pdsyn,
	      4 rel	bit (1),
	      4 ret	bit (1),
	    3 repl,
	      4 info_1	bit (1),
	      4 info_2	bit (1),
	      4 info_3	bit (1),
	      4 merge	bit (1),
	      4 info_5	bit (1);
dcl	1 sio_b		based (oe_ptr),
	  2 chain		char (5),
	  2 bsns		fixed bin,
	  2 bsn		char (30),
	  2 esns		fixed bin,
	  2 esn		char (30),
	  2 ssn		fixed bin,
	  2 sfns		fixed bin,
	  2 sfn		char (30),
	  2 io		bit (1),
	  2 bits,
	    3 pdsyn,
	      4 rel	bit (1),
	      4 ret	bit (1),
	    3 repl,
	      4 info_1	bit (1),
	      4 info_2	bit (1),
	      4 info_3	bit (1),
	      4 merge	bit (1),
	      4 info_5	bit (1);			/*   reserved_word    */
dcl	1 reserved_word	based (cobol_current),
	  2 fwd_link	pointer,
	  2 back_link	pointer,
	  2 rep_link	pointer,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,		/* = 1 */
	  2 key		fixed bin,
	  2 class		bit (26),
	  2 jump_index	fixed bin;		/*   user_word    */
dcl	1 user_word	based (cobol_current),
	  2 fwd_link	pointer,
	  2 back_link	pointer,
	  2 rep_link	pointer,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,		/* = 8 */
	  2 info		bit (8),
	  2 length	fixed bin,
	  2 word		char (30);
dcl	cobol_gns1	entry ext;
dcl	sio_t		char (125);
dcl	sio_tb		char (oe_len) based (oe_ptr);
dcl	(oe_key, ne_key)	char (5);
dcl	st		bit (32);
dcl	(oe_ptr, siot_ad)	ptr;
dcl	oe_len		fixed bin;
dcl	cobol_vdwf_sput	entry (ptr, bit (32), ptr, fixed bin, char (5)) ext;
dcl	cobol_vdwf_dget	entry (ptr, bit (32), ptr, fixed bin, char (5)) ext;
dcl	cobol_vdwf_dput	entry (ptr, bit (32), ptr, fixed bin, char (5)) ext;

dcl	addr		builtin;
dcl	substr		builtin;


/*************************************/

start:
	siot_ad = addr (sio_t);
	sio.chain = "00000";
	sio.bsns = 0;
	sio.esns = 0;
	sio.ssn = 0;
	string (sio.bits) = ""b;
	sio.bits.repl.merge = reserved_word.key = reswd_MERGE;

	call cobol_gns1;

	if user_word.type ^= 8
	then return;

	sio.sfns = user_word.length;
	sio.sfn = substr (user_word.word, 1, user_word.length);

get_io:
	call cobol_gns1;

get_io1:
	if reserved_word.type = 1
	then do;
		if reserved_word.key = reswd_INPUT
		then do;
			sio.io = "0"b;
			goto proc_com_ent;
		     end;

		if reserved_word.key = reswd_OUTPUT
		then do;
			sio.io = "1"b;
			goto proc_com_ent;
		     end;

		if substr (reserved_word.class, 4, 1) = "1"b
		then return;

/* if end of statement... */
	     end;

	if user_word.type = 8
	then if user_word.column < 12
	     then return;				/* if procedure name... */

	goto get_io;

proc_com_ent:
	call cobol_gns1;

	if reserved_word.type ^= 1
	then return;

	if reserved_word.key ^= reswd_PROCEDURE
	then return;

	call cobol_gns1;

	if reserved_word.type = 1
	then call cobol_gns1;			/* if IS... */

	if user_word.type ^= 8
	then return;

	sio.bsns = user_word.length;
	sio.bsn = substr (user_word.word, 1, user_word.length);
	sio.esns = user_word.length;
	sio.esn = substr (user_word.word, 1, user_word.length);

	call cobol_gns1;

	if reserved_word.type = 1
	then if reserved_word.key = reswd_THRU
	     then do;
		     call cobol_gns1;

		     if user_word.type ^= 8
		     then return;

		     sio.esns = user_word.length;
		     sio.esn = substr (user_word.word, 1, user_word.length);
		end;

	call cobol_vdwf_sput (cobol_cmfp, st, addr (sio), 119, ne_key);

	if sio.io = "0"b
	then do;

		if cobol_si_key = "00000"
		then do;
			fixed_common.sort_in_info = ne_key;
			cobol_si_key = ne_key;
			goto get_io1;
		     end;

		call cobol_vdwf_dget (cobol_cmfp, st, oe_ptr, oe_len, cobol_si_key);

		sio_t = sio_tb;
		siot_ad -> sio_b.chain = ne_key;

		call cobol_vdwf_dput (cobol_cmfp, st, siot_ad, oe_len, cobol_si_key);

		cobol_si_key = ne_key;
		goto get_io1;
	     end;

	if cobol_so_key = "00000"
	then do;
		fixed_common.sort_out_info = ne_key;
		cobol_so_key = ne_key;
		goto get_io1;
	     end;

	call cobol_vdwf_dget (cobol_cmfp, st, oe_ptr, oe_len, cobol_so_key);

	sio_t = sio_tb;
	siot_ad -> sio_b.chain = ne_key;

	call cobol_vdwf_dput (cobol_cmfp, st, siot_ad, oe_len, cobol_so_key);

	cobol_so_key = ne_key;

	goto get_io1;

%include cobol_fixed_common;
%include cobol_ext_;
%include cobol_ext_lex;
%include cobol_reswd_values;

     end cobol_proc_sort;
