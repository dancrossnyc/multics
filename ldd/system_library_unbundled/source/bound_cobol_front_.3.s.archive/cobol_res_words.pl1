/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_res_words.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 07/11/83 by FCH, [5.2-1], SUPPRESS verb does not work, BUG553(phx15481) */
/* Modified on 01/04/82 by FCH, [5.1-1], call special debug io entries only once, phx11819(BUG517) */
/* Modified on 06/30/81 by FCH, [4.4-2], reserved word token formed incorrectly, BUG480(phx09696) */
/* Modified on 06/14/80 by FCH, [4.4-1], REPORT WRITER facility */
/* Modified on 12/12/79 by MHD, [4.2-1], added lex_proc(14) - reconize SD and save sort file name */
/* Modified on 10/11/79 by MHD, [4.1-1], deleted lines 653,657 - don't diag multiple DATA (it assumes DIVISION) */
/* Modified on 02/15/79 by FCH, [4.0-1],  debug statement */
/* Modified on 10/31/78 by RAL, [3.0-2], have REPLACE trigger proc_copy like COPY for copy replacing */
/* Modified on 05/17/78 by FCH, [3.0-1], fix bug for priority onumber */
/* Modified since Version 3.0 */





/* format: style3 */
cobol_res_words:
     proc;

/* This run checks each user word for a reserved word and initiates any special processing required */


/*************************************/

start:
	if firsttime
	then do;

		call hcs_$make_ptr (null (), "cobol_reswd_table_", "cobol_reswd_table_", reswd_table_ptr, mcode);

		if reswd_table_ptr = null ()
		then do;
			call ioa_ ("HELP");
			return;
		     end;

		do i = 1 to 30;
		     g2_ptr (i) = addrel (reswd_table_ptr, reswd_table.g2_offset (i));
		end;

		firsttime = "0"b;			/*[4.0-1]*/
		DS = "0"b;			/*[4.2-1]*/
		last_sort_file = 0;
	     end;



	if cobol_rwt_init_sw = "1"b
	then do;
		cobol_rwt_init_sw = "0"b;
		area_a_sw = "0"b;
		user_word.line = 1;
		procname.type = 7;
		procname.repl_bits = "00000000"b;
		ad_attn = addr (fixed_common.options);
		fixed_common.phase_name = "LEX";
		h_w_count = 0;
		dclr_sec = 0;
		increment_dclr_sec = "0"b;
		secint = 0;

		if substr (user_word.word, 1, user_word.length) = "copy"
		then c_f_sw = "1"b;			/* if COPY first word in program... */
		else c_f_sw = "0"b;

	     end;

	if c_f_sw
	then goto start_search;			/* if copy first line in prog and still scanning it... */

	if cobol_head_words (1) = "0"b
	then do;
ck_ci:
		if substr (user_word.word, 1, user_word.length) ^= "control"
		then if substr (user_word.word, 1, user_word.length) ^= "identification"
		     then do;
			     len = 2;

			     call gen_head;

			     cobol_head_words (1) = "1"b;
			     cobol_head_words (2) = "1"b;
			end;
	     end;

start_search:
	reswd_len, len = user_word.length;
	g1_off = g2_ptr (reswd_len) -> g2 (fixed (unspec (substr (user_word.word, 1, 1))));

	if g1_off = 0
	then go to fail;

	g1_ptr = addrel (reswd_table_ptr, g1_off);

/*[4.0-1]*/
	if g1.name = substr (user_word.word, 1, reswd_len)
	then go to tph;

	do while (g1.name < substr (user_word.word, 1, reswd_len));

	     g1_ptr = addr (g1.next);

	end;

	if g1_stop = stop_bits | g1.name ^= substr (user_word.word, 1, reswd_len)
	then go to fail;

tph:						/*[4.4-1]*/
	if g3.key >= 530 & g3.key <= 537		/* debug register */
						/*[4.4-1]*/
	then do;
		if cobol_debug_mode & fixed_common.comp_level < "2" & DS
						/*[4.4-1]*/
		then call diag (g3.key - 329);	/*[4.4-1]*/
	     end;					/*[4.4-1]*/
	else if g3.key = 565			/* line-counter */
						/*[4.4-1]*/
	then ;					/*[4.4-1]*/
	else if g3.key = 578			/* page-counter */
						/*[4.4-1]*/
	then ;					/*[4.4-1]*/
	else go to hit;




/* 
   * * * * *
   SPECIAL PROCESSING FOR USER WORDS
   * * * * *
    */




fail:						/* still a user word */
	if cobol_head_words (5) = "0"b
	then return;				/* exit--not in procedure division */

	if user_word.column < 12
	then do;					/* paragraph name */
		if p_n
		then return;

		p_n = "1"b;			/* bypass this code for recursive calls */

next_pn:
		procname.line = user_word.line;
		procname.def_line = procname.line;
		procname.column = user_word.column;
		procname.length = user_word.length;

		substr (procname.name, 1, procname.length) = substr (user_word.word, 1, procname.length);

		procname.size = 52 + procname.length;
		procname.info = "0"b;
		procname.proc_num = cobol_name_number;
		procname.section_num = cobol_section_number;
						/* [3.0-1] */

		if cobol_stack_sw = "0"b
		then substr (user_word.l_info, 3, 1) = "1"b;

		p = cobol_current;

		call cobol_insert_token (7, procname.length);

		addr (user_word.size) -> tmvr = tmvr;

		if cobol_stack_sw = "1"b
		then call cobol_delete_tokens (p, p);

		area_a_sw = "1"b;

		call cobol_gns1;

/* a [.] [goto | section [#] | note ] [.] */

		if reserved_word.type = 1
		then if reserved_word.key = reschar_PERIOD
		     then call cobol_gns1;

		if token.type = 1
		then if reserved_word.key = reswd_GO
		     then do;			/* check for alterable go */

			     call cobol_gns1;

			     if token.type = 1
			     then if reserved_word.key = reswd_TO
				then do;

					call cobol_gns1;

					if token.type = 1
					then if reserved_word.key = reschar_PERIOD
					     then do;
						     if fixed_common.comp_level < "3"
						/* for leveling, An alterable GO TO */
						     then call diag (27);
						     call cobol_gns1;
						end;

					if token.type = 8 | token.type = 2
					then if token.column < 12
						/* another paragraph or section name */
					     then substr (procname.info, 8, 1) = "1"b;
						/* alterable */
					     else do;

						     call cobol_gns1;

						     if token.type = 1
						     then if reserved_word.key = 101 /* "IN" */
							     | reserved_word.key = 133
						/* "OF" */
							then do;
						/* qualified */

								call cobol_gns1;

								if token.type = 8 | token.type = 2
								then if token.column > 11
								     then do;
									     call cobol_gns1;
									     if token.type = 1
									     then if reserved_word.key
										     = reschar_PERIOD
										then call cobol_gns1;

									     if token.type = 8
										| token.type = 2
									     then if token.column < 12
										then substr (procname
											.info, 8, 1)
											= "1"b;
										else ;
									     else if token.type = 1
									     then if reserved_word.key
										     = 89
										     | reserved_word
										     .key = 191
										then substr (procname
											.info, 8, 1)
											= "1"b;
									end;
							     end;
							else do;
								if reserved_word.key = reschar_PERIOD
								then call cobol_gns1;

								if token.type = 8 | token.type = 2
								then if token.column < 12
						/* another parag or sec */
								     then substr (procname.info, 8, 1) =
									     "1"b;
						/* alterable */
								     else ;
								else if token.type = 1
								then if reserved_word.key
									= 89 /* end DECLARATIVES */
									| reserved_word.key = 191
						/* end COBOL */
								     then substr (procname.info, 8, 1) =
									     "1"b;
							     end;
						end;
					else if token.type = 1
					then if reserved_word.key = 89 /* end DECLARATIVES */
						| reserved_word.key = 191
						/* end COBOL */
					     then substr (procname.info, 8, 1) = "1"b;
						/* alterable */
				     end;
			end;
		     else if reserved_word.key = reswd_SECTION
		     then do;			/* a section name */

			     cobol_section_number = cobol_name_number;
			     substr (procname.info, 5, 1) = "1"b;
						/* indicate section name */
			     save_stsw = cobol_stack_sw;
			     cobol_stack_sw = "1"b;

			     call cobol_gns1;

			     cobol_stack_sw = save_stsw;

			     if reserved_word.type = 1 & reserved_word.key = reschar_PERIOD
			     then p = user_word.back_link;
			     else p = cobol_current;

			     secint = 0;		/* convert section number */

			     if p -> numeric_lit.type = 2
			     then do;

				     do i = 1 to p -> numeric_lit.places;

					secint =
					     10 * secint
					     + fixed (unspec (substr (p -> numeric_lit.literial, i, 1)), 15)
					     - 48;/* [3.0-1] */

				     end;

				     if secint > 99 | p -> numeric_lit.sign = "-"
				     then secint = 100;
				     else substr (p -> numeric_lit.info, 3, 1) = "1"b;

				end;

			end;
p_n_exit:
		if dclr_sec = 1
		then substr (procname.info, 6, 1) = "1"b;
						/* indicate if declr sec */

		if increment_dclr_sec
		then do;				/* increment dclr_sec....END DECLARATIVES already processed. */

			dclr_sec = dclr_sec + 1;
			increment_dclr_sec = "0"b;
		     end;

		procname.priority = sint.char2;
		procname.section_num = cobol_section_number;
		procname.proc_num = cobol_name_number;

/* Update fixed_common fields here every time, in case this paragraph/section name
		   immediately preceeds "end cobol". */

		fixed_common.proc_counter = cobol_name_number;
		fixed_common.spec_tag_counter = cobol_name_number;
		cobol_name_number = cobol_name_number + 1;

		call cobol_vdwf_sput (cobol_ntfp, st, addr (procname.size), procname.size, rec_ad);

		if token.line ^= procname.line
		then if token.type = 8
		     then if token.column < 12
			then go to next_pn;

		p_n = "0"b;
		area_a_sw = "0"b;
	     end;
	return;

initialize:
     entry;

/*[4.0-1]*/
	ph_num = 1;
	p_n = "0"b;				/*[5.1-1]*/
	string (indicators) = "111111"b;


/*[4.0-1]*/
	state = 0;				/*[4.0-1]*/
	fixed_common.debug, fixed_common.use_debug, cobol_debug_mode = "0"b;

/*[4.0-1]*/
	return;

/* 
   * * * * *
   SPECIAL PROCESSING FOR RESERVED WORDS
   * * * * *
    */

hit:						/* located a reserved word */
	if g3.rfi
	then do;
		if g3.key = reswd_COMP_1
		then reserved_word.key = reswd_COMP_7;
		else if g3.key = reswd_COMP_2
		then reserved_word.key = reswd_COMP_6;
		else do;
			call cobol_lexerr (24, "1"b, 0, " ");
			return;
		     end;
	     end;
	else reserved_word.key = g3.key;

/*[4.4-1]*/
	if report_exists				/*[4.4-2]*/
	then do;
		rwl = user_word.length;

/*[4.4-2]*/
		substr (reserved_word.name, 1, rwl) = substr (user_word.word, 1, rwl);

/*[4.4-2]*/
		reserved_word.size = 32 + rwl;	/*[4.4-2]*/
		reserved_word.length = rwl;

/*[4.4-1]*/
	     end;					/*[4.4-1]*/
	else reserved_word.size = 28;

	reserved_word.type = 1;
	reserved_word.class.pd = g3.class.pd;
	reserved_word.class.dd = g3.class.dd;

	string (reserved_word.class.others) = string (g3.class.others);

	reserved_word.jump_index = fixed (g3.ji);

	if cobol_head_words (5) = "1"b
	then /* if in procedure division... */
	     if reserved_word.column < 12
	     then /* if in area A... */
		if (reserved_word.key ^= 98)
		then /* if not END... */
		     if (reserved_word.key ^= 89)
		     then /* if not DECLARATIVES... */
			if (reserved_word.key ^= 522)
			then /* if not COPY... */
			     if (reserved_word.key ^= 425)
			     then /* in not REPLACE... */ /* [3.0-2]*/
				if g3.s_p_key = "0"b
				then return;	/* return if no special processing */

	s_p_i = 0;

s_p_loop:
	s_p_i = s_p_i + 1;				/* select each special process indicated */

	if s_p_i > 6
	then return;

	if substr (g3.s_p_key, s_p_i, 1) = "0"b
	then goto s_p_loop;

	goto s_p_proc (s_p_i);

/* SPECIAL PROCESSING FOR GROUPS OF RESERVED WORDS */

s_p_proc (1):					/* major reserved word, further processing by	*/
						/* cobol_output_tokens			*/
						/*[4.4-1]*/
	substr (reserved_word.l_info, 8, 1) = "1"b;
	goto s_p_loop;

s_p_proc (2):
	goto s_p_loop;

s_p_proc (3):					/* attention words */
						/* corr,debugging,initialize,section */
	if cobol_head_words (2) & ^cobol_head_words (3)
	then goto s_p_loop;

/* if in identification division... */

	if g3.attn = "1001"b /* 9 */ & ^cobol_head_words (5)
	then go to s_p_loop;			/* section in procedure division only */

/*[4.0-1]*/
	if g3.attn = "0110"b
	then go to s_p_loop;
	else at_wd (fixed (g3.attn)) = "1"b;

	goto s_p_loop;

s_p_proc (4):					/* missing division detection */
						/* add,go,move,perform */
	tm_d_ck = fixed (m_d_ck, 15);

	if cobol_head_words (tm_d_ck)
	then goto s_p_loop;				/* ignore if not in right division */

	h_w_count = h_w_count + 1;

	if h_w_count > 3
	then do;
		h_w_count = 0;
		len = tm_d_ck;
		goto gen_hdr;
	     end;

	goto s_p_loop;

s_p_proc (5):					/* division headers */
	tm_d_ck = fixed (m_d_ck, 15);

	if cobol_head_words (tm_d_ck)
	then do;
		goto s_p_loop;
	     end;

	h_w_count = 0;				/* reset missing division header detector */

/*[4.0-1]*/
	if tm_d_ck <= 5				/*[4.0-1]*/
	then do;
		go to MDH (tm_d_ck);

MDH (1):
MDH (2):
MDH (3):						/*[4.0-1]*/
		ph_num = 1;
		go to MD;

MDH (4):						/*[4.0-1]*/
		ph_num = 2;
		go to MD;

MDH (5):						/*[4.0-1]*/
		ph_num = 3;
		go to MD;

MD:
		cobol_head_words (tm_d_ck) = "1"b;

/*[4.0-1]*/
	     end;

	if (tm_d_ck = 1) | (tm_d_ck = 2)
	then goto div_head (tm_d_ck);

	len = tm_d_ck - 1;

	if cobol_head_words (len) = "0"b		/* if previous header is not present... */
	then do;
gen_hdr:
		do len = 2 to tm_d_ck - 1;		/*-09/17/76-*/

		     if ^cobol_head_words (len)
		     then do;
			     call gen_head;
			     cobol_head_words (len) = "1"b;
						/*						tm_d_ck = len;	*/
			end;
		end;
	     end;

	goto div_head (tm_d_ck);


s_p_proc (6):					/* individual word processing */
	goto lex_proc (fixed (g3.indv));

/* SPECIAL PROCESSING FOR DIVISION HEADERS */

div_head (1):					/* control division */
	cobol_head_words (1) = "1"b;			/*[4.0-1]*/
	goto s_p_loop;

div_head (2):					/* identification division */
	cobol_head_words (1) = "1"b;
	cobol_head_words (2) = "1"b;			/*[4.0-1]*/

div_head (3):					/* environment division */
div_head (4):					/* data division */
	goto s_p_loop;

div_head (5):					/* procedure division */
						/*[4.4-1]*/
	if processing_report
	then go to s_p_loop;


	cobol_stack_sw = "1"b;
	cobol_mfp = cobol_m2fp;			/* Put out all before procedure division and open new minpral. */
	call cobol_gns1;

	if ^(reserved_word.type = 1 & reserved_word.key = reswd_DIVISION)
	then do;					/* Error in "procedure division" header. */
		len = 5;
		call gen_head;
	     end;

	cobol_head_words (5) = "1"b;

/*[4.0-1]*/
	ph_num = 3;

/*[4.0-1]*/
	if fixed_common.debug & decl_bit		/*[5.1-1]*/
	then do;
		if ss_2
		then do;
			call cobol_io_$set_state (2);
			ss_2 = "0"b;
		     end;				/* set cobol_get_rec to use cobol_db_phase$get_tok */
						/*[4.0-1]*/
		decl_bit = "0"b;			/*[4.0-1]*/
	     end;

	call cobol_gns1;

	cobol_stack_sw = "0"b;

	goto s_p_loop;

/* SPECIAL PROCESSING FOR INDIVIDUAL RESERVED WORDS */

lex_proc (1):					/* picture */
	if ^cobol_head_words (4) | cobol_head_words (5)
	then goto s_p_loop;				/* if not in data division... */
	cobol_pic_switch = "1"b;

	call cobol_gns1;

	if reserved_word.type = 1
	then if reserved_word.key = reswd_IS
	     then call cobol_gns1;

	cobol_pic_switch = "0"b;

	goto s_p_loop;

lex_proc (2):					/* decimal point */
	if ^cobol_head_words (3) | cobol_head_words (4)
	then goto s_p_loop;				/* if not in environment division... */
						/*bypass DECIMAL-POINT in OBJECT IS phrase*/
	if cobol_dp_sw
	then goto s_p_loop;				/*if already processed "decimal-point is..."*/

l_p2a:
	cobol_dp_sw = "1"b;				/*bypass this code for recursive calls*/

	call cobol_gns1;

	cobol_dp_sw = "0"b;				/*re-enable*/

	if reserved_word.type = 1
	then do;
		if reserved_word.key = 118		/* IS */
		then do;
			cobol_dp_sw = "1"b;		/*disable*/

			call cobol_gns1;

			cobol_dp_sw = "0"b;		/*re-enable*/

			if reserved_word.type ^= 1
			then goto l_p2c;
		     end;

		if reserved_word.key = 517		/*COMMA*/
		then do;
			cobol_decimal_point_character = ",";
			cobol_comma_character = ".";
			fixed_common.dec_comma = "1"b;
l_p2b:
			cobol_dp_sw = "1"b;		/*see lex_proc(2)*/
			goto s_p_loop;
		     end;



		if reserved_word.key = 538
		then goto l_p2b;			/*DECIMAL-POINT*/
	     end;

l_p2c:
	call cobol_lexerr (22, "0"b, 13, "DECIMAL-POINT");

	goto s_p_loop;

lex_proc (3):					/* copy,replace */
	call cobol_proc_copy;

	c_f_sw = "0"b;

	goto s_p_loop;

lex_proc (4):					/* merge,sort */
	if ^cobol_head_words (5)
	then goto s_p_loop;				/* if not in procedure division... */

	call cobol_proc_sort;

	goto s_p_loop;

lex_proc (5):					/* ASSIGN processing */
	if ^cobol_head_words (3) | cobol_head_words (4)
	then goto s_p_loop;

/*if not environment division... */
	cobol_lu_sw = "0"b;

	call cobol_gns1;

	if user_word.type = 8
	then if user_word.length = 2
	     then if substr (user_word.word, 1, 2) = "TO" | substr (user_word.word, 1, 2) = "to"
		then do;
			substr (user_word.l_info, 3, 1) = "1"b;
			call cobol_gns1;
		     end;

	if reserved_word.type = 1 & reserved_word.key = reswd_TO
	then call cobol_gns1;

	cobol_lu_sw = "1"b;

	goto s_p_loop;

lex_proc (6):					/* declaratives */
	if ^cobol_head_words (5)
	then goto s_p_loop;				/* if not in procedure division... */

/* If we are processing a paragraph or section name then do not increment dclr_sec.
	   We want to mark the present paragraph/section name as being in the declaritive section.
	   dclr_sec will be incremented after paragraph/section name is so marked. */

/*[4.0-1]*/
	DS = "1"b;

	if p_n
	then increment_dclr_sec = "1"b;
	else dclr_sec = dclr_sec + 1;

	goto s_p_loop;

lex_proc (7):					/* end */
	cobol_stack_sw = "1"b;

	call cobol_gns1;

	p = cobol_frst;

	if reserved_word.type = 1
	then do;

		if reserved_word.key = 89		/* declaratives */
		then do;

			substr (p -> reserved_word.class.pd, 4, 1) = "1"b;
						/*-11/15/76-*/
			substr (p -> reserved_word.class.pd, 5, 1) = "1"b;
						/*-11/15/76-*/

/*[5.1-1]*/
			if ss_3
			then do;
				call cobol_io_$set_state (3);
				ss_3 = "0"b;
			     end;			/* set cobol_get_rec to use cobol_db_phase$get_perf */

		     end;

		else if reserved_word.key = 191	/* cobol */
		then do;

			substr (p -> reserved_word.class.pd, 4, 1) = "1"b;
						/*-11/15/76-*/
			substr (p -> reserved_word.class.pd, 8, 1) = "1"b;
						/*-11/15/76-*/

/* end of program processing */

			token.line = token.line - 1;

			do len = 2 to 5;

			     if ^cobol_head_words (len)
			     then do;
				     if len = 5
				     then cobol_mfp = cobol_m2fp;
				     call gen_head;
				end;
			end;
			token.line = token.line + 1;

/*[4.4-1]*/
			if report_exists & ^real_end_report
						/*[4.4-1]*/
			then do;
				token.l_info = "00100000"b;
				p -> token.l_info = "00100000"b;
			     end;
			else /*do nothing*/
			     ;
			cobol_endprog_sw = "1"b;	/*[4.0-1]*/
			if fixed_common.debug & db_bit/*[4.0-1]*/
			then call cobol_lexerr (37, "0"b, 0, " ");

		     end;
	     end;

	cobol_stack_sw = "0"b;

	goto s_p_loop;

lex_proc (8):					/* date compiled */
	if ^cobol_head_words (2) | cobol_head_words (3)
	then goto s_p_loop;

/* if not in identification division... */

	if reserved_word.column > 11
	then goto s_p_loop;

	fixed_common.date_comp_ln = reserved_word.line;
	cobol_$date_compiled_sw = 1;

	goto scanoff_id;

lex_proc (9):					/* currency sign */
	if ^cobol_head_words (3) | cobol_head_words (4)
	then goto s_p_loop;

/* if not in environment division... */

l_p9a:
	call cobol_gns1;

	if reserved_word.type = 1
	then do;
		if reserved_word.key = 118
		then goto l_p9a;
		if reserved_word.key = 245
		then goto l_p9a;
	     end;

	if alphanum_lit.type ^= 3
	then do;
		call cobol_lexerr (22, "0"b, 13, "CURRENCY SIGN");
		goto s_p_loop;
	     end;

	fixed_common.currency = alphanum_lit.string;

	goto s_p_loop;

lex_proc (10):					/* debugging */
						/*[4.0-1]*/
	if cobol_head_words (3) & ^cobol_head_words (4)	/*[4.0-1]*/
	then do;
		call cobol_gns1;			/* ED */

/*[4.0-1]*/
		if reserved_word.type = 1 & reserved_word.key = 230
						/*DEBUGGING MODE */
						/*[4.4-1]*/
		then do;
			fixed_common.debug = "1"b;

/*[4.4-1]*/
			cobol_debug_mode = "1"b;	/* used by cobol_merge */
						/*[4.0-1]*/
		     end;

/*[4.0-1]*/
	     end;


/*[4.0-1]*/
	if cobol_head_words (5)			/*[4.0-1]*/
	then do;
		fixed_common.use_debug = "1"b;	/* USE FOR DEBUGGING */

/*[4.0-1]*/
		if fixed_common.debug		/*[4.0-1]*/
		then do;
			call cobol_output_tokens$proc_def_ptr (PDF);

/*[4.0-1]*/
			call cobol_db_phase$proc_def_ptr (PDF);
						/*[4.0-1]*/
		     end;

/*[4.0-1]*/
	     end;

	goto s_p_loop;

lex_proc (11):					/* program-id */
	if ^cobol_head_words (2) | cobol_head_words (3)
	then goto s_p_loop;

	if reserved_word.column > 11
	then goto s_p_loop;

	call cobol_gns1;

	if reserved_word.type ^= 1
	then goto l_p11a;

	if reserved_word.key ^= reschar_PERIOD
	then goto l_p11a;

	cobol_lu_sw = "0"b;

	if fixed_common.compiler_id = 3
	then cobol_progid_sw = "1"b;

	call cobol_gns1;

	cobol_progid_sw = "0"b;

	if reserved_word.type ^= 8
	then do;
l_p11a:
		call cobol_lexerr (22, "0"b, 10, "PROGRAM-ID");
	     end;
	else fixed_common.prog_name = substr (user_word.word, 1, user_word.length);

	cobol_lu_sw = "1"b;

	goto scanoff_id;

lex_proc (12):					/* identification division comment scanoff routine */
						/* author,date-written,installation,security */
	if ^cobol_head_words (2) | cobol_head_words (3)
	then goto s_p_loop;

	if reserved_word.column > 11
	then goto s_p_loop;

scanoff_id:
	cobol_scanoff_sw = "1"b;

	call cobol_gns;

	cobol_scanoff_sw = "0"b;
	cobol_$date_compiled_sw = 0;

	goto s_p_loop;

lex_proc (13):					/* working-storage */
						/*[4.0-1]*/
	if cobol_head_words (4) & ^cobol_head_words (5) & reserved_word.column <= 11
						/*[4.0-1]*/
	then do;
		call cobol_gns1;

/*[4.0-1]*/
		if reserved_word.type ^= 1
		then go to s_p_loop;		/*[4.0-1]*/
		if reserved_word.key ^= reswd_SECTION
		then go to s_p_loop;

/*[5.1-1] */
		if ss_1
		then do;
			call cobol_io_$set_state (1);
			ss_1 = "0"b;
		     end;				/* set cobol_get_rec to use cobol_db_phase$get_rec */

/*[4.0-1]*/
		call cobol_gns1;			/* . */

/*[4.0-1]*/
		if reserved_word.type ^= 1
		then go to s_p_loop;		/*[4.0-1]*/
		if reserved_word.key ^= 189
		then go to s_p_loop;		/* . */

/*[4.0-1]*/
		db_bit = "0"b;

/*[4.0-1]*/
	     end;

/*[4.0-1]*/
	go to s_p_loop;

/*[4.2-1]*/

/* Following added to help diagnosis sort errors.  Gets the file name associated with the SD and saves
   in in  sort_file_list.  Maximum of SD pre program */
/* SD */
lex_proc (14):
	if ^cobol_head_words (4) | cobol_head_words (5)
	then goto s_p_loop;

	if reserved_word.column > 11
	then goto s_p_loop;

	call cobol_gns1;

	last_sort_file = last_sort_file + 1;
	sort_file_list (last_sort_file) = substr (user_word.word, 1, user_word.length);


	goto s_p_loop;

lex_proc (15):					/* REPORT, REPORTING, GENERATE, TERMINATE, INITIATE, SUPPRESS */
						/*[4.4-1]*/
	if reserved_word.key = reswd_REPORT		/* REPORT */
						/*[4.4-1]*/
	then do;


/*[4.4-1]*/
		if cobol_head_words (4) & ^cobol_head_words (5) & reserved_word.column <= 11
						/*[4.4-1]*/
		then do;

/*[4.4-1]*/
			call cobol_gns1;

/*[4.4-1]*/
			if reserved_word.type ^= 1
			then go to s_p_loop;

/*[4.4-1]*/
			if reserved_word.key ^= reswd_SECTION
			then go to s_p_loop;

/*[4.4-1]*/
			call cobol_gns1;

			if reserved_word.type ^= 1
			then go to s_p_loop;

/*[4.4-1]*/
			if reserved_word.key ^= reschar_PERIOD
			then go to s_p_loop;

/*[4.4-1]*/
			if report_exists		/*[4.4-1]*/
			then call cobol_lexerr (39, "0"b, 6, "REPORT");
						/*[4.4-1]*/
			else report_exists, fixed_common.report = "1"b;

/*[4.4-1]*/
		     end;				/*[4.4-1]*/
	     end;					/*[4.4-1]*/
	else /*[4.4-1]*/
	     if reserved_word.key = reswd_REPORTING	/* REPORTING */
						/*[4.4-1]*/
	then do;

/*[4.4-1]*/
		if cobol_head_words (5)		/*[4.4-1]*/
		then do;
			fixed_common.use_reporting = "1"b;
						/* USE BEFORE REPORTING */

/*[4.4-1]*/
			if report_exists		/*[4.4-1]*/
			then do;
				call cobol_output_tokens$proc_def_ptr (PDF);

/*[4.4-1]*/
				call cobol_db_phase$proc_def_ptr (PDF);
						/*[4.4-1]*/
			     end;

/*[4.4-1]*/
			call prefix_qual_name;

/*[4.4-1]*/
		     end;

/*[4.4-1]*/
	     end;					/*[4.4-1]*/
	else /*[4.4-1]*/
	     if reserved_word.key = reswd_INITIATE	/* INITIATE */
						/*[4.4-1]*/
	then do;
		if ^cobol_head_words (5)
		then go to s_p_loop;		/* not in PD */


/*[4.4-1]*/
		call name_seq ("I");		/*[4.4-1]*/
	     end;					/*[4.4-1]*/
	else /*[4.4-1]*/
	     if reserved_word.key = reswd_TERMINATE	/* TERMINATE */
						/*[4.4-1]*/
	then do;
		if ^cobol_head_words (5)
		then go to s_p_loop;		/* not in PD */

/*[4.4-1]*/
		call name_seq ("T");		/*[4.4-1]*/
	     end;					/*[4.4-1]*/
	else /*[4.4-1]*/
	     if reserved_word.key = reswd_GENERATE	/* GENERATE */
						/*[4.4-1]*/
	then do;					/*[4.4-1]*/
		if cobol_head_words (5)
		then call prefix_qual_name;		/*[4.4-1]*/
	     end;					/*[4.4-1]*/
	else /*[4.4-1]*/
	     if reserved_word.key = reswd_SUPPRESS	/*[4.4-1]*/
	then do;
		if ^cobol_head_words (5)
		then go to s_p_loop;

/*[5.2-1]*/
/* call cobol_gns1; */
/*[5.2-1]*/
/* if reserved_word.type ^= 1 then go to s_p_loop; */
/*[5.2-1]*/
/* if reserved_word.key ^= reswd_PRINTING then go to s_p_loop; */

/*[4.4-1]*/
		user_word.type = 8;			/* change to type 8 token */
						/*[4.4-2]*/
		user_word.length = 2;		/*[4.4-1]*/
		user_word.size = 26;		/*[4.4-1]*/
		substr (user_word.word, 1, 2) = "SS";	/*[4.4-1]*/
	     end;

/*[4.4-1]*/
	go to s_p_loop;

prefix_name:
     proc (ch);

/*[4.4-1]*/
declare	ch		char (1),
	len		fixed bin;

/*[4.4-1]*/
	len = user_word.length;			/*[4.4-1]*/
	substr (user_word.word, 1, len + 1) = ch || substr (user_word.word, 1, len);
						/*[4.4-1]*/
	user_word.length = len + 1;
	user_word.size = user_word.size + 1;

     end;

prefix_qual_name:
     proc;

/*[4.4-1]*/
	call cobol_gns1;

/*[4.4-1]*/
	if user_word.type ^= 8
	then return;

/*[4.4-1]*/
	if report_exists
	then call prefix_name ("G");
	else call prefix_name ("g");

/*[4.4-1]*/
	call cobol_gns1;

/*[4.4-1]*/
	if reserved_word.type ^= 1
	then return;

/*[4.4-1]*/
	if reserved_word.key ^= reswd_OF & reserved_word.key ^= reswd_IN
	then return;				/*[4.4-1]*/
	call cobol_gns1;

/*[4.4-1]*/
	if user_word.type ^= 8
	then return;

/*[4.4-1]*/
	if report_exists
	then call prefix_name ("R");
	else call prefix_name ("r");

     end;

name_seq:
     proc (ch);

/*[4.4-1]*/
declare	ch		char (1);

/*[4.4-1]*/
	do while ("1"b);

/*[4.4-1]*/
	     call cobol_gns1;			/*[4.4-1]*/
	     if user_word.type ^= 8
	     then return;

/*[4.4-1]*/
	     call prefix_name (ch);

/*[4.4-1]*/
	end;

     end;

/* This routine generates missing headers and inserts them at the beginning of the token stack */

gen_head:
     proc;

dcl	div_no		fixed bin;
dcl	h_key		(5) fixed bin static init (520, 552, 540, 196, 142);
dcl	h_class		(5) bit (26) static
			init ("00000000000000000001"b, "00000000000000000011"b, "00000000000000000011"b,
			"000000000010000000011"b, "000000001000000000101"b);
dcl	h_ji		(5) fixed bin static init (0, 0, 0, 0, 6);

	if fixed_common.comp_level < "5"
	then call diag (160);			/* for levelling, A DIVISION is missing*/
	tfirst = cobol_frst;
	tcurrent = cobol_current;
	ttop = cobol_top;
	save_stsw = cobol_stack_sw;
	cobol_stack_sw = "1"b;
	cobol_frst = null ();

	if len = 5
	then call cobol_lexerr (21, "0"b, hdr_len (len), (hdr (len)));
	else call cobol_lexerr (19, "0"b, hdr_len (len), (hdr (len)));

/* 		call cobol_insert_token(6, 18 + hdr_lngth(len));
/* 		source.column = 0;
/* 		source.length = 18 + hdr_lngth(len);
/* 		source.image = "	  " || substr(hdr(len),1,hdr_lngth(len))
/*			 || " DIVISION." || cobol_new_line_character;
/**/


	call cobol_insert_token (1, 0);

	source.column = 8;
	reserved_word.key = h_key (len);
	string (reserved_word.class) = h_class (len);	/*-11/15/76-*/
	reserved_word.jump_index = h_ji (len);

	call cobol_insert_token (1, 0);

	source.column = 23;
	reserved_word.key = reswd_DIVISION;
	reserved_word.class.mer = "0011"b;		/*-11/15/76-*/

	call cobol_insert_token (1, 0);

	source.column = 31;
	reserved_word.key = reschar_PERIOD;
	string (reserved_word.class) = "0001"b;		/*-11/15/76-*/

	call cobol_output_tokens;

	cobol_frst = tfirst;
	cobol_current = tcurrent;
	cobol_top = ttop;
	cobol_stack_sw = save_stsw;

     end gen_head;

/*[4.2-1]*/

/* This entry is used by idedsyn and checks to see if sort_name is a
   file that was mentioned in a SD clause */

check_sort_list:
     entry (sort_name) returns (bit (1));

dcl	sort_name		char (*);

	do i = 1 to last_sort_file;

	     if sort_name = sort_file_list (i)
	     then return ("1"b);

	end;

	return ("0"b);


/*======================================*/


/* general token */

dcl	1 token		based (cobol_current),
	  2 fwd_link	ptr,
	  2 back_link	ptr,
	  2 rep_link	ptr,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin;

/*   source    */
dcl	1 source		based (cobol_current),
	  2 fwd_link	pointer,
	  2 back_link	pointer,
	  2 rep_link	pointer,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,		/* = 6 */
	  2 info		bit (8),
	  2 length	fixed bin,
	  2 image		char (source.length);


/*   user_word    */
dcl	1 user_word	based (cobol_current),
	  2 fwd_link	pointer,
	  2 back_link	pointer,
	  2 rep_link	pointer,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,		/* = 8 */
	  2 info		bit (8),
	  2 length	fixed bin,
	  2 word		char (30);


/*   procname    */
dcl	1 procname	static,
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,		/* = 7 */
	  2 st_ptr_1	fixed bin,
	  2 st_ptr_2	fixed bin,
	  2 pr_rec_1	fixed bin,
	  2 pr_rec_2	fixed bin,
	  2 info		bit (8),
	  2 priority	char (2),
	  2 repl_bits	bit (8),
	  2 section_num	fixed bin,
	  2 proc_num	fixed bin,
	  2 def_line	fixed bin,
	  2 length	fixed bin,
	  2 name		char (30);

/*   reserved_word    */
dcl	1 reserved_word	based (cobol_current),
	  2 fwd_link	pointer,
	  2 back_link	pointer,
	  2 rep_link	pointer,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,		/* = 1 */
	  2 key		fixed bin,
	  2 class		aligned,
	    3 pd		bit (8) unal,
	    3 dd		bit (8) unal,
	    3 others	unal,
	      4 mer	bit (4) unal,
	      4 ie	bit (1) unal,
	      4 rw	bit (5) unal,
	  2 jump_index	fixed bin aligned,		/*[4.4-1]*/
	  2 length	fixed bin,		/*[4.4-1]*/
	  2 name		char (32);		/*   alphanum_lit    */
dcl	1 alphanum_lit	based (cobol_current),
	  2 fwd_link	pointer,
	  2 back_link	pointer,
	  2 rep_link	pointer,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,		/* = 3 */
	  2 info		bit (8),
	  2 length	fixed bin,
	  2 string	char (200);

/*   numeric_lit    */
dcl	1 numeric_lit	based (cobol_current),
	  2 fwd_link	pointer,
	  2 back_link	pointer,
	  2 rep_link	pointer,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,		/* = 2 */
	  2 info		bit (8),
	  2 sign		char (1),
	  2 exp_sign	char (1),
	  2 exp_places	fixed bin,
	  2 places_left	fixed bin,
	  2 places_right	fixed bin,
	  2 places	fixed bin,
	  2 literial	char (30);

dcl	cobol_io_$set_state entry (fixed bin);
dcl	cobol_lexerr	entry (fixed bin, bit (1), fixed bin, char (60)) external;
dcl	(cobol_gns1, cobol_gns, cobol_proc_sort, cobol_output_tokens)
			entry external;
dcl	cobol_vdwf_sput	entry (ptr, bit (32), ptr, fixed bin, char (5)) ext;
dcl	cobol_insert_token	entry (fixed bin, fixed bin) external;
dcl	cobol_delete_tokens entry (pointer, pointer) external;
dcl	cobol_proc_copy	entry external;		/*[4.0-1]*/
declare	cobol_db_phase$initialize
			entry;			/*[4.0-1]*/
declare	cobol_output_tokens$proc_def_ptr
			entry (ptr);		/*[4.0-1]*/
declare	cobol_db_phase$proc_def_ptr
			entry (ptr);
dcl	xdepending_key	fixed bin static init (92);
dcl	xnote_key		fixed bin static init (201);
dcl	xcomma_key	fixed bin static init (517);
dcl	tcur		ptr;
dcl	rw_dscr		(200) char (9) based;
dcl	dscr_indx		fixed bin;		/*[4.0-1]*/
declare	PDF		ptr;
dcl	dscr_indx_b	char (4) based (addr (dscr_indx));
dcl	hv1c		char (1) static;
dcl	st		bit (32);
dcl	save_stsw		bit (1);
dcl	init_error	bit (1);
dcl	rec_ad		char (5);
dcl	tmvr		char (procname.size) based (addr (procname));
dcl	base		fixed bin static;
dcl	len		fixed bin static;
dcl	delta		fixed bin static;
dcl	mult_adj		fixed bin;
dcl	p_n		bit (1) static init ("0"b),	/* paragraph name processing in progress */
	init_tab		bit (1) static init ("1"b),
	c_f_sw		bit (1) static,
	area_a_sw		bit (1) static,
	(p, dt1, dt2)	pointer static,
	(secint, i)	fixed bin static;
dcl	1 f_c_ind		based (ad_attn),
	  2 std_opts	bit (32),
	  2 at_wd		(9) bit (1);
dcl	1 sint		based (addr (secint)),
	  2 fill		char (2),
	  2 char2		char (2);
dcl	(h_w_count, dclr_sec, tm_d_ck)
			fixed bin static;
dcl	increment_dclr_sec	bit (1) static;
dcl	(tfirst, tcurrent, ttop, ad_attn)
			ptr static;
dcl	hdr		(5) char (14) init ("CONTROL", "IDENTIFICATION", "ENVIRONMENT", "DATA", "PROCEDURE")
			static options (constant);
dcl	hdr_len		(5) fixed bin init (7, 14, 11, 4, 9) static options (constant);
dcl	hdr_lngth		(5) fixed bin static init (7, 14, 11, 4, 9);
dcl	s_p_i		fixed bin static;


dcl	addr		builtin;
dcl	fixed		builtin;
dcl	mod		builtin;
dcl	null		builtin;
dcl	substr		builtin;
dcl	unspec		builtin;


/*[5.1-1]*/
dcl	1 indicators	static int,		/*[5.1-1]*/
	  2 decl_bit	bit (1),			/*[5.1-1]*/
	  2 firsttime	bit (1),			/*[5.1-1]*/
	  2 db_bit	bit (1),			/*[5.1-1]*/
	  2 ss_1		bit (1),			/*[5.1-1]*/
	  2 ss_2		bit (1),			/*[5.1-1]*/
	  2 ss_3		bit (1);

dcl	state		fixed bin static int;
dcl	reswd_len		fixed bin;
dcl	reswd_table_ptr	ptr static init (null ());
dcl	1 reswd_table	based (reswd_table_ptr),
	  2 stop_word	bit (36),
	  2 g2_offset	(30) fixed bin;
dcl	g2_ptr		(30) ptr static;		/*[4.0-1]*/
declare	DS		bit (1) internal static;
dcl	g2		(48:122) fixed bin based;
dcl	g1_ptr		ptr;
dcl	g1_stop		bit (36) based (g1_ptr) aligned;
dcl	stop_bits		bit (36) static options (constant) init ((36)"1"b);

declare	1 shdr		based (cobol_m1fp),
	  2 x1		char (12),
	  2 next		fixed bin;


dcl	1 g1		based (g1_ptr) aligned,
	  2 name		char (reswd_len) aligned,
	  2 g3		aligned,			/* item in reserved word table */
	    3 key		fixed bin (17) unal,
	    3 class	unal,
	      4 pd	bit (7) unal,
	      4 dd	bit (6) unal,
	      4 others	unal,
	        5 mer	bit (4) unal,
	        5 ie	bit (1) unal,
	        5 rw	bit (5) unal,
	    3 ji		bit (4) unal,
	    3 s_p_key	bit (6) unal,
	    3 old_lvl_rstr	unal,
	      4 non_ansi	bit (1) unal,
	      4 lvl_rstr	bit (3) unal,
	    3 inst_rstr	bit (4) unal,
	    3 attn	bit (4) unal,
	    3 m_d_ck	bit (4) unal,
	    3 indv	bit (4) unal,
	    3 rfi		bit (1) unal,
	    3 division	bit (3) unal,
	    3 dialect	bit (5) unal,
	  2 next		aligned;
dcl	mcode		fixed bin (35);
dcl	(g1_off, rwl)	fixed bin;

dcl	ioa_		entry options (variable);
dcl	hcs_$make_ptr	entry (ptr, char (*), char (*), ptr, fixed bin (35));

dcl	string		builtin;


/*[4.2-1]*/
dcl	sort_file_list	(20) char (30) varying internal static,
	last_sort_file	fixed bin internal static;

dcl	cobol_c_list	entry (ptr);
dcl	lev_message_ptr	ptr;
dcl	1 lev_message	internal static,
	  2 size		fixed bin init (28),
	  2 line		fixed bin init (0),
	  2 column	fixed bin init (0),
	  2 type		fixed bin init (5),
	  2 run		fixed bin init (9),
	  2 number	fixed bin init (0),
	  2 info		bit (32) init ("0"b);
diag:
     proc (num);
dcl	num		fixed bin;

	lev_message.line = user_word.line;
	lev_message.column = user_word.column;
	lev_message.number = num;
	lev_message_ptr = addr (lev_message);

	call cobol_c_list (lev_message_ptr);

     end;


%include cobol_reswd_values;
%include cobol_ext_;
%include cobol_fixed_common;
%include cobol_ext_lex;
%include cobol_;

     end cobol_res_words;
