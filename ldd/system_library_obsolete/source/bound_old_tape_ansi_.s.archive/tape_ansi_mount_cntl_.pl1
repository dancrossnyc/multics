/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */



/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
/*                                                                       */
/*  N__a_m_e:  tape_ansi_mount_cntl_                                                */
/*                                                                       */
/*       This module performs the following functions:                   */
/*  1)  mount - assigns drive and mounts volume;                         */
/*  2)  remount - demounts volume, mounts new volume on assigned drive;  */
/*  3)  free - unassigns a drive, demounting volume (if any);            */
/*  4)  insert_rings - inserts write rings in every mounted volume;      */
/*  5)  write_protect - sets every active drive to inhibit writing;      */
/*  6)  write_permit - sets every active drive w/ring to permit writing  */
/*                                                                       */
/*  U__s_a_g_e                                                                */
/*                                                                       */
/* dcl tape_ansi_mount_cntl_$mount ext entry                             */
/*                           (ptr, fixed bin, fixed bin (35)),           */
/*     tape_ansi_mount_cntl_$remount ext entry                           */
/*                           (ptr, ptr, fixed bin, fixed bin (35)),      */
/*     tape_ansi_mount_cntl_$free ext entry                              */
/*                           (ptr, fixed bin, fixed bin (35)),           */
/*     tape_ansi_mount_cntl_$insert_rings ext entry                      */
/*                           (ptr, fixed bin (35)),                      */
/*     tape_ansi_mount_cntl_$write_protect ext entry                     */
/*                           (ptr, fixed bin (35)),                      */
/*     tape_ansi_mount_cntl_$write_permit ext entry                      */
/*                           (ptr, fixed bin (35));                      */
/*                                                                       */
/*       call tape_ansi_mount_cntl_$mount (cP, vlX, code);               */
/*       call tape_ansi_mount_cntl_$remount (cP, down_vlX, vlX, code);   */
/*       call tape_ansi_mount_cntl_$free (cP, vlX, code);                */
/*       call tape_ansi_mount_cntl_$insert_rings (cP, code);             */
/*       call tape_ansi_mount_cntl_$write_protect (cP, code);            */
/*       call tape_ansi_mount_cntl_$write_permit (cP, code);             */
/*                                                                       */
/*  1) cP        is a pointer to tape_ansi_cseg.  (Input)                */
/*                                                                       */
/*  2) vlX       is the index of the volume link array element of the    */
/*               volume to be mounted or freed.  (Input)                 */
/*                                                                       */
/*  3) down_vlX  is the index of the volume link of the volume to be     */
/*               dismounted.  (Input)                                    */
/*                                                                       */
/*  4) code      is a standard Multics status code.  (Output)            */
/*                                                                       */
/* --------------------------------------------------------------------- */
/*                                                                       */
/*  0) Created:  09/25/74 by Ross E. Klinger                             */
/*  1) Modified: 11/06/74 by Ross E. Klinger                             */
/*  2) Modified: 10/26/76 by Janice B. Phillipps                         */
/*  3) Modified: 04/05/77 by Janice B. Phillipps                         */
/*  4) Modified: 04/28/78 by Michael R. Jordan			   */
/*  5) Modified: 4/79     by R.J.C. Kissel			   */
/*                                                                       */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/* format: style3,linecom,ifthenstmt,indthenelse,^indnoniterdo,indend,initlm3,dclind5,idind32 */
tape_ansi_mount_cntl_:
     procedure;

/* parameters */
dcl  vlX			       fixed bin,
     down_vlX		       fixed bin,
     code			       fixed bin (35);

%include old_tape_ansi_cseg;

%include ibm_vol1;

%include ansi_vol1;


/* automatic storage */

dcl  can_retry		       bit (1) init ("1"b),
     den			       fixed bin,		/* density code for tape_ansi_tape_io_$order */
     dn			       picture "99",	/* drive number for user mount message */
     drive_name		       char (32),		/* drive name for user mount message */
     i			       fixed bin,		/* label length */
     op			       char (3),		/* operation for protect/permit entries */
     part			       char (2) varying,	/* particle for user mount message */
     vX			       fixed bin;		/* index of current volume link */

/* based storage */
dcl  VOL1_label_id		       char (4) based (addr (cseg.lbl_buf));
						/* label identifier of VOL1 label (ANSI or IBM) */
dcl  VOL1_volume_id		       char (6) based (addr (substr (cseg.lbl_buf, 5)));
						/* VOL1 volume id (ANSI or IBM) */
dcl  VOL1_80th_char		       char (1) based (addr (substr (cseg.lbl_buf, 80)));
						/* 80th character of VOL1 label */

/* conditions */
dcl  cleanup		       condition;

/* builtin functions */
dcl  (addr, binary, substr)	       builtin;

/* external procedures */
dcl  cv_dec_check_		       ext entry (char (*), fixed bin (35)) returns (fixed bin (35)),
     cv_dec_		       ext entry (char (*)) returns (fixed bin (35)),
     ebcdic_to_ascii_	       ext entry (char (*), char (*)),
     ioa_			       ext entry options (variable),
     ipc_$block		       ext entry (ptr, ptr, fixed bin (35)),
     ipc_$create_ev_chn	       ext entry (fixed bin (71), fixed bin (35)),
     ipc_$delete_ev_chn	       ext entry (fixed bin (71), fixed bin (35)),
     tape_ansi_tape_io_$order	       ext entry (ptr, char (3), fixed bin, fixed bin (35)),
     tape_ansi_tape_io_$sync_read    ext entry (ptr, fixed bin, fixed bin (35)),
     tdcm_$tdcm_attach	       ext entry (ptr, fixed bin (35)),
     tdcm_$tdcm_detach	       ext entry (ptr, fixed bin (35)),
     tdcm_$tdcm_iocall	       ext entry (ptr, fixed bin (35)),
     tdcm_$tdcm_message	       ext entry (ptr, char (*), fixed bin, fixed bin (35)),
     tdcm_$tdcm_reset_signal	       ext entry (ptr, fixed bin (35)),
     tdcm_$tdcm_set_signal	       ext entry (ptr, fixed bin (35));

/* external static */
dcl  (
     error_table_$bad_mount_request,
     error_table_$blank_tape
     )			       ext static fixed bin (35);

dcl  error_table_$invalid_file_set_format
			       fixed bin (35) ext;

mount:
     entry (cP, vlX, code);				/* assign a drive and mount a volume */

	vX = vlX;					/* set index of current volume link */

	on cleanup call cleaner;			/* don't leave event channels or drives */

	call ipc_$create_ev_chn (tseg.ev_chan, code);	/* get an event channel */
	if code ^= 0 then return;

	tseg.version_num = cseg_tseg_version_1;
	tseg.tracks = 0;				/* nine-track drive */

	if cseg.density = -1
	     then do;
		if cseg.standard = 1
		     then tseg.density = "00100"b;	/* 800 bpi */
		     else tseg.density = "00010"b;	/* 1600 bpi */
		end;

	     else do;
		if cseg.density = 2 then tseg.density = "00100"b;
						/* 800 bpi */
		else if cseg.density = 3 then tseg.density = "00010"b;
						/* 1600 bpi */
		else if cseg.density = 4 then tseg.density = "00001"b;
						/* 6250 bpi */
		else tseg.density = "00100"b;		/* 800 bpi */
		end;

	tseg.buffer_count = 0;			/* attach call */
	tseg.get_size = 1;				/* all IO to return block lengths */
	call tdcm_$tdcm_attach (addr (tseg), code);	/* assign a drive */
	if code ^= 0
	     then go to er_exit;			/* trouble */
	     else cseg.nactive = cseg.nactive + 1;	/* ok - up active count */

up:
	call mount_request;				/* issue message to operator and wait */

	call VOL1_check (code);			/* verify status of VOL1 label */
	if code ^= 0 then go to er_exit;		/* trouble */

/* only if VOL label looks good do we check the file labels for valid standard */
/*
   if vl (vX).write_VOL1 = 0 then call hdr_eox_check (code);
*/
	if code ^= 0
	     then do;
		vl (vX).write_VOL1 = 6;		/* not standard file set */
		code = 0;
		end;
	vl (vX).rcp_id = cv_dec_ (substr (tseg.drive_name, 6, 2));
						/* fill volume link */
	vl (vX).event_chan = tseg.ev_chan;
	vl (vX).tape_drive = drive_name;
	vl (vX).ws_segno = tseg.ws_segno;		/* save IOI wks segno */
	vl (vX).cflX = 0;

	return;

remount:
     entry (cP, down_vlX, vlX, code);			/* switches volumes on an active drive */

	vX = down_vlX;				/* first work with down volume */

	tseg.drive_name = vl (vX).tape_drive;		/* set tseg to use this drive */
	tseg.ev_chan = vl (vX).event_chan;
	tseg.ws_segno = vl (vX).ws_segno;

	on cleanup call cleaner;			/* exit with consistency */

	vl (vX).cflX = 0;				/* invalidate position */
	call unload;

	vl (vX).rcp_id = 0;				/* invalidate volume link */

	vX = vlX;					/* now work with volume to go up */

	go to up;					/* mount the new volume */

insert_rings:
     entry (cP, code);				/* dismount, insert rings, and remount */

	on cleanup call cleaner;			/* don't leave event channel or drive */
	cseg.write_ring = "1"b;			/* rings will be in */
	do vX = 1 to cseg.vcN;			/* test each volume */
	     if vl (vX).rcp_id ^= 0
		then do;				/* mounted */
		     tseg.drive_name = vl (vX).tape_drive;
						/* set-up for insertion */
		     tseg.ev_chan = vl (vX).event_chan;
		     tseg.ws_segno = vl (vX).ws_segno;
		     vl (vX).cflX = 0;		/* invalidate position */
		     call unload;
		     call mount_request;		/* tell operator to mount */
		     end;
	end;

	return;

write_protect:
     entry (cP, code);				/* set file protect */

	op = "pro";				/* operatio is file _p_r_otect */
	cseg.protect = "1"b;
	go to com;

write_permit:
     entry (cP, code);				/* set file permit */

	op = "per";				/* operation is _p_e_rmit */
	cseg.protect = "0"b;

com:
	on cleanup call cleaner;			/* maintain consistency */
	do vX = 1 to cseg.vcN;			/* test each volume */
	     if vl (vX).rcp_id ^= 0
		then do;				/* mounted */
		     tseg.drive_name = vl (vX).tape_drive;
						/* set-up to use this volume */
		     tseg.ws_segno = vl (vX).ws_segno;
		     tseg.ev_chan = vl (vX).event_chan;
		     call tape_ansi_tape_io_$order (cP, op, 0, code);
						/* set protect or permit */
		     if code ^= 0 then go to er_exit;
		     end;
	end;

	return;




free:
     entry (cP, vlX, code);				/* unassign a drive */

	vX = vlX;					/* copy index of current volume link */

	tseg.drive_name = vl (vX).tape_drive;		/* set-up for detach */
	tseg.ev_chan = vl (vX).event_chan;
	tseg.ws_segno = vl (vX).ws_segno;
	vl (vX).cflX = 0;				/* invalidate volume position */
	on cleanup call cleaner;			/* don't leave event channel or drive */

	call tdcm_$tdcm_reset_signal (addr (tseg), 0);
	cseg.wait_switch (vl (vX).rcp_id) = "0"b;
	call tdcm_$tdcm_detach (addr (tseg), code);	/* unassign the drive */
	vl (vX).tape_drive = "";
	vl (vX).rcp_id = 0;
	vl (vX).ws_segno = "0"b;
	if code ^= 0
	     then go to er_exit;			/* trouble */
	     else cseg.nactive = cseg.nactive - 1;	/* ok - down active count */

	call ipc_$delete_ev_chn (tseg.ev_chan, code);	/* delete event channel */
	if code ^= 0 then go to er_exit;		/* trouble */
	vl (vX).event_chan = 0;
	tseg.ev_chan = 0;

	return;

er_exit:
	call cleaner;				/* cleanup if error */
	code = error_table_$bad_mount_request;
	return;


cleaner:
     procedure;					/* cleanup and error exit procedure */
dcl  ecode		       fixed bin (35);

	if tseg.drive_name ^= ""
	     then do;				/* detach drive if attached */
		call tdcm_$tdcm_reset_signal (addr (tseg), 0);
		cseg.wait_switch (vl (vX).rcp_id) = "0"b;
		call tdcm_$tdcm_detach (addr (tseg), ecode);
		if ecode = 0 then cseg.nactive = cseg.nactive - 1;
						/* down active count */
		tseg.drive_name = "";
		vl (vX).ws_segno = "0"b;
		vl (vX).tape_drive = "";
		vl (vX).rcp_id = 0;
		end;
	if tseg.ev_chan ^= 0
	     then do;				/* delete event channel if created */
		call ipc_$delete_ev_chn (tseg.ev_chan, 0);
		tseg.ev_chan = 0;
		vl (vX).event_chan = 0;
		end;
	vl (vX).cflX = 0;
	return;
     end cleaner;

wait:
     procedure (ecode);				/* waits for tdcm_ interrupt */
dcl  ecode		       fixed bin (35);
dcl  1 wait_list,					/* ipc_$block parameters */
       2 n		       fixed bin,
       2 chn		       fixed bin (71);
dcl  1 message,
       2 channel		       fixed bin (71),
       2 msg		       fixed bin (71),
       2 sender		       bit (36),
       2 origin,
         3 dev_sig		       bit (18) unaligned,
         3 ring		       bit (18) unaligned,
       2 channel_index	       fixed bin;

again:
	wait_list.n = 1;				/* waiting for only 1 interrupt */
	wait_list.chn = tseg.ev_chan;			/* set ID */

	call ipc_$block (addr (wait_list), addr (message), ecode);
						/* wait */
	if ecode ^= 0 then go to reset;		/* always reset the signal */

	tseg.sync = 1;				/* do a synchronous reset status */
	tseg.command_count = 1;
	tseg.buffer_count = 0;
	tseg.command_queue (1) = 100000b;
	call tdcm_$tdcm_iocall (addr (tseg), ecode);

	if tseg.completion_status ^= 1 then go to again;

reset:
	call tdcm_$tdcm_reset_signal (addr (tseg), 0);	/* no more signalling */
	cseg.wait_switch (vl (vX).rcp_id) = "0"b;

	return;

     end wait;

VOL1_check:
     procedure (ecode);				/* verify VOL1 label */
dcl  ecode		       fixed bin (35),
     data			       char (80) unaligned based (cseg.syncP);
						/* 80 characters of synchronous IO buffer */

	do den = 2 to 4;				/* try to read at 800, 1600, or 6250 bpi */
	     call tape_ansi_tape_io_$order (cP, "rew", 0, ecode);
	     if ecode ^= 0 then return;
	     call tape_ansi_tape_io_$order (cP, "sdn", den, ecode);
						/* set density */
	     if ecode ^= 0 then return;
	     call tape_ansi_tape_io_$sync_read (cP, i, ecode);
						/* try to read VOL1 label */
	     if ecode = 0
		then do;				/* read was uneventful */
		     if i >= 80
			then do;			/* could be a label */
			     if cseg.standard = 1
				then cseg.lbl_buf = data;
						/* ascii - put in lbl_buf */
				else call ebcdic_to_ascii_ (data, cseg.lbl_buf);
						/* ebcdic - convert move to lbl_buf */
			     go to got_it;		/* check whatever we got */
			     end;
			else do;			/* can't be a VOL1 label */
invalid_VOL1:
			     vl (vX).write_VOL1 = 3;	/* indicate not valid VOL1 label */
			     go to wvol1;
			     end;
		     end;
	     if ecode = error_table_$blank_tape
		then do;				/* tape is blank */
		     vl (vX).write_VOL1 = 1;		/* indicate blank tape */
		     go to wvol1;
		     end;
	end;
	vl (vX).write_VOL1 = 2;			/* can't read it (error or 200 or 556 bpi) */

wvol1:
	vl (vX).volume_id = vl (vX).volname;
	if cseg.density = -1
	     then do;				/* no density specified */
		if cseg.standard = 1
		     then cseg.density = 2;		/* ANSI default is 800 cpi */
		     else cseg.density = 3;		/* IBM default is 1600 bpi */
		end;
	if cseg.density ^= den
	     then do;				/* must set density again */
		call tape_ansi_tape_io_$order (cP, "rew", 0, ecode);
						/* rewind to set density */
		if ecode ^= 0 then return;
		call tape_ansi_tape_io_$order (cP, "sdn", (cseg.density), ecode);
						/* set density) */
		end;
	     else ecode = 0;
	return;

got_it:
	vl (vX).volume_id = vl (vX).volname;		/* TEMPORARY UNTIL CAN GET VOLID FROM REGISTRATION FILE */

	if VOL1_label_id ^= "VOL1" then go to invalid_VOL1;
						/* not VOL1 label */

	if cseg.standard = 1
	     then do;				/* ANSI - test 80th character */
		i = cv_dec_check_ (VOL1_80th_char, ecode);
						/* convert to binary */
		if ecode ^= 0 then go to invalid_VOL1;	/* not number - invalid */
		if i < 1 then go to invalid_VOL1;	/* must be 1 <_ i <_ 3 */
		if i > 3 then go to invalid_VOL1;
		end;

	if VOL1_volume_id ^= vl (vX).volume_id
	     then do;				/* identifiers don't match */
		vl (vX).write_VOL1 = 4;		/* indicate wrong volume identifier */
		go to wvol1;
		end;

	if cseg.density = -1
	     then do;				/* all seems well - and density defaults */
		cseg.density = den;			/* set it to that of the tape */
all_is_well:
		vl (vX).write_VOL1 = 0;		/* don't have to write a new VOL1 */
		ecode = 0;			/* and no errors */
		return;				/* so just exit */
		end;
	if cseg.density = den then go to all_is_well;	/* density specified, and matches */
	vl (vX).write_VOL1 = 5;			/* density doesn't match */
	go to wvol1;				/* change tape density to specified value */

     end VOL1_check;

/*
   hdr_eox_check: procedure (ecode);

   dcl  label_id char (4) based (addr (cseg.lbl_buf));


   dcl  data char (80) unaligned based (cseg.syncP),
   i fixed bin,
   j fixed bin,
   ecode fixed bin (35),
   nchar fixed bin;


   /* Enter here after successfully read and verified the VOL1 label. * /
   /* check for file header and trailer labels to complete the tape verification for the ANSI standard * /


   ecode = 0;				/* initialize * /


   do j = 1 to 2;				/* read an 80 char label synchronously: 1st HDR1 then EOX1 * /
   call tape_ansi_tape_io_$sync_read (cP, nchar, ecode); /* read a block looking for HDR1 * /
   if ecode ^= 0 then go to non_standard;	/* trouble already * /
   else do;				/* read was uneventful * /
   if nchar < 80 then go to non_standard; /* definitely not a label * /
   else do;
   if cseg.standard = 1 then cseg.lbl_buf = data; /* move into buffer * /
   else call ebcdic_to_ascii_ (data, cseg.lbl_buf); /* translate to ascii * /
   end;
   if j = 1 then do;		/* looking for HDR1 * /
   if label_id ^= "HDR1" then go to non_standard;
   do i = 1 to 2;		/* get to trailer label position * /
   call tape_ansi_tape_io_$order (cP, "fsf", 0, ecode);
   /* 1st space past header labels; then past file * /
   if ecode ^= 0 then do;
   /* might be eof: that's ok * /


   end;
   end;
   end;
   end;

   end;
   if label_id = "EOF1" | label_id = "EOV1" then return;
   non_standard:  ecode = error_table_$invalid_file_set_format;
   return;

   end hdr_eox_check;
*/

mount_request:
     procedure;					/* issues mount message to operator and waits */
dcl  msg_temp		       char (66) varying;

once_again:
	call tdcm_$tdcm_set_signal (addr (tseg), code);	/* interrupt when mounted */
	if code ^= 0 then go to er_exit;		/* trouble */
	if cseg.write_ring
	     then part = "a";
	     else part = "no";
	call ioa_ ("Mounting volume ^a with ^a write ring.",
						/* write message to user */
	     vl (vX).volname, part);
	if vl (vX).comment = ""
	     then msg_temp = "";
	     else msg_temp = ",*" || vl (vX).comment;
	call tdcm_$tdcm_message (addr (tseg), vl (vX).volname || msg_temp, binary (cseg.write_ring, 17), code);
	if code ^= 0 then go to er_exit;		/* trouble */
	call wait (code);				/* wait for mount */
	if code ^= 0 then go to er_exit;		/* trouble */
	if cseg.write_ring then call ring_check;	/* did ring get in?? */
	drive_name = tseg.drive_name;
	call ioa_ ("^a mounted on ^a.",		/* inform user */
	     vl (vX).volname, drive_name);

	return;


ring_check:
     procedure;					/* insures that ring is in tape */

/* reset status op in wait procedure set status bits */
	if substr (hardware_status, 3, 4) = "0000"b
	     then if substr (hardware_status, 12, 1) = "1"b
		     then do;			/* if write protected still... */
			if can_retry
			     then do;		/* try to remount with ring only once */
				can_retry = "0"b;
				call ioa_ ("^a mounted without ring - retrying.",
						/* tell user */
				     vl (vX).volname);
				call unload;
				go to once_again;	/* retry the mount */
				end;
			     else do;		/* 2nd try failed as well */
				code = error_table_$bad_mount_request;
				go to er_exit;
				end;
			end;

	return;					/* ring is in tape */

     end ring_check;

     end mount_request;



unload:
     procedure;					/* unloads a drive */

	call tape_ansi_tape_io_$order (cP, "run", 0, code);
						/* will wait for, but not set, signal */
	if code ^= 0 then go to er_exit;

	call tdcm_$tdcm_reset_signal (addr (tseg), 0);	/* redundant, but just in case... */
	cseg.wait_switch (vl (vX).rcp_id) = "0"b;

	return;

     end unload;


     end tape_ansi_mount_cntl_;
