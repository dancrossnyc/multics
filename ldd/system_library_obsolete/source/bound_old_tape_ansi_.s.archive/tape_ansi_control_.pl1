/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */





/****^  HISTORY COMMENTS:
  1) change(2016-01-15,Swenson), approve(2016-01-15,MCR10003):
     Fix to support 4-character time zone abbreviations.
                                                   END HISTORY COMMENTS */

/* format: style3,linecom,ifthenstmt,indthenelse,^indnoniterdo,indend,initlm3,dclind5,idind32 */
tape_ansi_control_:
     procedure (iocbP, order, infoP, code);		/* performs iox_$control function for tape_ansi_ */


/* Modified 08/17/76 by Janice Phillipps to handle io_call order requests.  */
/* Modified 12/18/78 by Michael R. Jordan to add volume_density order as a
   temporary measure for list_tape_contents.  */

/* arguments */
dcl  iocbP		       ptr,		/* pointer to iocb */
     order		       char (*),		/* control order name */
     infoP		       ptr,		/* pointer to information structure */
     code			       fixed bin (35);	/* error code */


%include iocb;

%include old_tape_ansi_cseg;

%include tape_ansi_fd;

%include tape_ansi_fl;

%include tape_file_status;

%include tape_volume_status;

%include device_status;


%include iom_stat;

%include io_call_info;
/* based storage */

dcl  hardware_status	       bit (72) aligned based (infoP);
						/* information for "hardware_status" order */
dcl  retain_code		       fixed bin based (infoP);
						/* information for "retention" */



/* automatic storage */

dcl  ret_code		       fixed bin (35);
dcl  io_order		       char (32) varying;
dcl  volume_density_ptr	       ptr;
dcl  volume_density		       fixed bin based (volume_density_ptr);

dcl  file_status_sw		       bit (1);
dcl  msg_sw		       bit (1);
dcl  state		       fixed bin;
dcl  event_code		       fixed bin (35);
dcl  lbl			       bit (1) aligned;

dcl  errmsg		       char (64) aligned;
dcl  short		       char (8) aligned;
dcl  long			       char (100) aligned;
dcl  i			       fixed bin;		/* temporary */
dcl  io_mod		       fixed bin;


/* internal static */

dcl  central_msg		       (0:7) char (55) internal static options (constant)
			       init ("""000""b", "LPW tally runout", "two sequential TDCW's", "boundary violation",
			       "invalid IOM central status - ""100""b", "IDCW in restricted mode",
			       "character position/size discrepancy during list service",
			       "parity error on I/O bus, data read from channel"),
     channel_msg		       (0:7) char (46) int static options (constant)
			       init ("""000""b", "attempt to connect while busy", "illegal channel command in PCW",
			       "incorrect DCW during list service", "incomplete instruction sequence",
			       "invalid channel status - ""101""b", "parity error on PSIA",
			       "parity error on I/O bus, data write to channel"),
     format		       (2, 8) char (3) int static options (constant)
			       init ("u", "f", "d", "s", "ub", "fb", "db", "sb", "u", "f", "v", "vs", "ub", "fb", "vb",
			       "vbs"),
     mode			       (3) char (6) int static options (constant) init ("ASCII", "EBCDIC", "binary"),
     State		       (0:3) char (32) int static options (constant)
			       init ("no information", "not open", "open", "open, but further I/O inhibited");

dcl  1 order_list		       (12) internal static options (constant),
						/* list of valid control orders */
       2 name		       char (32) varying init (
						/* orders */
			       "hardware_status", "status", "volume_status", "feov", "close_rewind", "retention",
			       "file_status", "retain_none", "retain_all", "reset_error_lock", "volume_density",
						/* temp for MR7.0 for list_tape_contents */
			       "io_call"),
       2 must_be_open	       bit (1) init ("1"b, "1"b, "0"b, "1"b, "0"b, "0"b, "0"b, "0"b, "0"b, "1"b, "0"b, "0"b),
       2 non_null_ptr	       bit (1) init ("1"b, "1"b, "1"b, "0"b, "0"b, "1"b, "1"b, "0"b, "0"b, "0"b, "1"b, "1"b);

dcl  1 io_order_list	       (10) internal static options (constant),
						/* list of valid control orders foor use thru io_call */
       2 long_name		       char (32) varying init (
						/* orders */
			       "hardware_status", "status", "volume_status", "feov", "close_rewind", "retention",
			       "file_status", "retain_none", "retain_all", "reset_error_lock"),
       2 short_name		       char (4) varying init (/* orders */
			       "hst", "st", "vst", "feov", "crw", "ret", "fst", "retn", "reta", "rel"),
       2 must_be_open	       bit (1) init ("1"b, "1"b, "0"b, "1"b, "0"b, "0"b, "0"b, "0"b, "0"b, "1"b),
       2 arguments		       bit (1) init ("0"b, "1"b, "0"b, "0"b, "0"b, "1"b, "0"b, "0"b, "0"b, "0"b);


dcl  1 io_order_user_msg	       (10) internal static options (constant),
						/* list of valid order request syntax */
       2 msgs		       char (48) varying init (
						/* orders */
			       "hardware_status", "status [-all]", "volume_status", "feov", "close_rewind",
			       "retention [-all] [-volume] [-device] [-none]", "file_status", "retain_none",
			       "retain_all", "reset_error_lock");

/* external procedures */

dcl  tape_ansi_file_cntl_$data_eot   ext entry (ptr, fixed bin (35));
dcl  convert_status_code_	       entry (fixed bin (35), char (8) aligned, char (100) aligned);
dcl  tape_ansi_nl_file_cntl_$data_eot
			       ext entry (ptr, fixed bin (35));

/* external static */

dcl  (
     error_table_$action_not_performed,
     error_table_$wrong_no_of_args,
     error_table_$bad_arg,
     error_table_$undefined_order_request,
     error_table_$file_busy,
     error_table_$invalid_cseg,
     error_table_$no_operation,
     error_table_$no_next_volume,
     error_table_$not_open,
     error_table_$tape_error
     )			       fixed bin (35) external static;

/* conditions and builtins */

dcl  cleanup		       condition,
     (hbound, null, addr, binary, convert, substr)
			       builtin;


	do i = 1 to hbound (order_list, 1);		/* determine which order to execute */
	     if order = order_list.name (i)
		then do;				/* got it - now check it */
		     if order_list.must_be_open (i)
			then do;
			     if iocbP -> iocb.actual_iocb_ptr -> iocb.open_descrip_ptr = null ()
				then do;
				     code = error_table_$not_open;
				     return;
				     end;
			     end;
		     if order_list.non_null_ptr (i)
			then do;
			     if infoP = null
				then do;
				     code = error_table_$bad_arg;
				     return;
				     end;
			     end;
		     go to START;
		     end;
	end;
	code = error_table_$no_operation;		/* invalid order */
	return;


START:
	cP = iocbP -> iocb.actual_iocb_ptr -> iocb.attach_data_ptr;
						/* all ok - get cseg pointer */

	if cseg.invalid
	     then do;
		code = error_table_$invalid_cseg;
		return;
		end;

	if cseg.file_lock
	     then do;
		code = error_table_$file_busy;
		return;
		end;
	     else do;
		on cleanup cseg.file_lock = "0"b;
		cseg.file_lock = "1"b;
		end;

	code = 0;					/* initialize error code */
	go to act (i);				/* transfer to perform appropriate processing */

act (1):						/* hardware_status */
	hardware_status = cseg.hdw_status.bits;		/* give 72 bit IOM status */
	go to exit;


act (2):						/* status */
	dstat_ptr = infoP;				/* set pointer to structure */
	device_status = cseg.hdw_status;		/* give entire status structure */
	go to exit;


act (3):						/* volume_status */
	tvstat_ptr = infoP;				/* set pointer to structure */
	call setup_for_vol_status;

	tape_volume_status.volume_name = vl (i).volname;	/* fill status structure */
	tape_volume_status.volume_id = substr (vl (i).volume_id, 1, 6);
	tape_volume_status.volume_seq = i;
	if vl (i).rcp_id = 0
	     then tape_volume_status.tape_drive = "";
	     else tape_volume_status.tape_drive = vl (i).tape_drive;
	tape_volume_status.read_errors = vl (i).read_errors;
	tape_volume_status.write_errors = vl (i).write_errors;
	go to exit;


act (4):						/* feov */
	if cseg.open_mode ^= 5
	     then do;				/* opening must be sequential_output */
		code = error_table_$action_not_performed;
		go to exit;
		end;

	call force_eov;
	go to exit;


act (5):						/* close_rewind */
	cseg.close_rewind = "1"b;			/* set the switch for next close operation */
	go to exit;


act (6):						/* retention */
	if retain_code < 0 | retain_code > 4
	     then do;				/* check validity */
		code = error_table_$bad_arg;
		go to exit;
		end;

	cseg.retain = retain_code;			/* set the new retention */
	go to exit;

act (7):						/* file_status */
	tfstat_ptr = infoP;				/* set pointer to structure */
	call setup_for_file_status;			/* sets state and event code */

	tape_file_status.state = state;
	tape_file_status.event_code = event_code;

	if cseg.no_labels
	     then do;				/* no file chain */
		tape_file_status.file_id = "";
		tape_file_status.file_seq = fd.sequence;
		tape_file_status.cur_section = fd.vlX;
		tape_file_status.cur_volume = vl (fd.vlX).volname;
		tape_file_status.generation = 0;
		tape_file_status.version = 0;
		tape_file_status.creation = "00000";
		tape_file_status.expiration = "00000";
		tape_file_status.format_code = fd.format;
		tape_file_status.blklen = fd.blklen;
		tape_file_status.reclen = fd.reclen;
		tape_file_status.blocked = fd.blocked;
		tape_file_status.mode = fd.mode;
		end;
	     else do;				/* file chain exists */
		tape_file_status.file_id = fl.file_id;
		tape_file_status.file_seq = fl.sequence;
		tape_file_status.cur_section = fl.section;
		tape_file_status.cur_volume = vl (fl.vlX).volname;
		tape_file_status.generation = fl.generation;
		tape_file_status.version = fl.version;
		tape_file_status.creation = fl.creation;
		tape_file_status.expiration = fl.expiration;
		tape_file_status.format_code = fl.format;
		tape_file_status.blklen = fl.blklen;
		tape_file_status.reclen = fl.reclen;
		tape_file_status.blocked = fl.blocked;
		tape_file_status.mode = fl.mode;
		end;

	tape_file_status.cur_blkcnt = cseg.lrec.blkcnt;
	go to exit;

act (8):						/* retain_none */
	cseg.retain = 1;
	go to exit;


act (9):						/* retain_all */
	cseg.retain = 4;
	go to exit;


act (10):						/* reset_error_lock */
	call reset_error_lock;
	go to exit;

act (11):						/* volume_density temp for ltc */
	volume_density_ptr = infoP;			/* set pointer to variable */
	volume_density = cseg.density;		/* copy info */
	goto exit;

act (12):						/* io_call orders */
	io_call_infop = infoP;


	if cseg.standard = 1
	     then io_mod = 1;			/* tape_ansi_ io mod */
	     else io_mod = 2;			/* tape_ibm_ io mod */
	msg_sw = "1"b;

	do i = 1 to hbound (io_order_list, 1);		/* determine which order to execute */
	     io_order = io_call_info.order_name;
	     if io_order = io_order_list.long_name (i) | io_order = io_order_list.short_name (i)
		then do;				/* got it - now check it */
		     if io_order_list.must_be_open (i)
			then do;
			     if iocbP -> iocb.actual_iocb_ptr -> iocb.open_descrip_ptr = null ()
				then do;
				     if msg_sw
					then call io_call_info
						.error (error_table_$not_open, io_call_info.caller_name, "^a
 control requires that switch is open.^/", io_order_list.long_name (i));
				     go to exit;
				     end;
			     end;
		     if io_call_info.nargs > 0
			then do;			/* some orders take args */
			     if io_order_list.arguments (i)
				then do;
				     if io_call_info.nargs = 1
					then ;
					else do;
wrong_no_args:
					     call io_call_info
						.
						error (error_table_$wrong_no_of_args, io_call_info.caller_name,
						"^/Usage: io control switch_name ^a", io_order_user_msg.msgs (i));
					     go to exit;
					     end;
				     end;
				else go to wrong_no_args;
			     end;
		     go to ord (i);

		     end;
	end;

	call io_call_info.error (error_table_$undefined_order_request, io_call_info.caller_name, "^a", io_order);
	go to exit;

ord (1):						/* hardware_status call */
	call print_hardware_status;
	go to exit;


ord (2):						/* status order call */
	if io_call_info.args (1) = "-all"
	     then do;
		file_status_sw = "1"b;
		call print_device_status;
		call print_hardware_status;
		call setup_for_vol_status;
		call print_volume_status;
		call setup_for_file_status;
		call print_file_status;
		end;
	else if io_call_info.args (1) ^= ""
	     then do;
		call io_call_info
		     .
		     error (error_table_$bad_arg, io_call_info.caller_name, "^a ^/Usage: io control switch_name ^a",
		     io_call_info.args (1), io_order_user_msg.msgs (i));

		go to exit;
		end;
	else do;
	     file_status_sw = "0"b;
	     call print_device_status;
	     end;
	go to exit;


ord (3):						/* volume_status order call */
	call setup_for_vol_status;
	call print_volume_status;
	go to exit;


ord (4):						/* feov order call */
	if cseg.open_mode ^= 5
	     then do;
		call io_call_info
		     .
		     error (error_table_$action_not_performed, io_call_info.caller_name,
		     "Switch must be open sequential_output.");
		end;
	     else do;
		call force_eov;
		if code ^= 0
		     then call io_call_info.error (code, io_call_info.caller_name, "Unable to force volume switching.");
		end;
	go to exit;


ord (5):						/* close_rewind order call */
	cseg.close_rewind = "1"b;
	go to exit;


ord (6):						/* retention order call */
	if io_call_info.args (1) = "-all" then ret_code = 4;
	else if io_call_info.args (1) = "-none" then ret_code = 1;
	else if io_call_info.args (1) = "-volume" then ret_code = 2;
	else if io_call_info.args (1) = "-device" then ret_code = 3;
	else do;
bad_arg:
	     call io_call_info.error (error_table_$bad_arg, io_call_info.caller_name, "Bad retention in order request.");
	     go to exit;
	     end;

	cseg.retain = ret_code;			/* set the new retention */
	go to exit;


ord (7):						/* file_status order call */
	call setup_for_file_status;
	call print_file_status;
	go to exit;


ord (8):						/* retain_none order call */
	cseg.retain = 1;
	go to exit;


ord (9):						/* retain_all order call */
	cseg.retain = 4;
	go to exit;


ord (10):						/* reset_error_lock order call */
	call reset_error_lock;
	if code ^= 0
	     then call io_call_info
		     .
		     error (code, io_call_info.caller_name,
		     "Unable to reset lock: IO Switch must be open for sequential_input.");

exit:
	cseg.file_lock = "0"b;
	return;



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
print_hardware_status:
     procedure;

	statp = addr (cseg.hdw_status.bits);		/* set ptr to status structure */
	if status.power
	     then errmsg = "off or device disconnected";
	     else errmsg = "on";
	call io_call_info.report ("Power:^2-^a", errmsg);
	call io_call_info.report ("Major status:^-""^4b""b", status.major);
	call io_call_info.report ("Substatus:^-""^6b""b", status.sub);
	call io_call_info.report ("Even/Odd:^2-""^1b""b", status.eo);
	if status.marker
	     then errmsg = "yes";
	     else errmsg = "no, terminate status";
	call io_call_info.report ("Marker status:^-^a", errmsg);
	call io_call_info.report ("Software status:^-""^2b""b", status.soft);
	call io_call_info.report ("Initiate:^2-""^1b""b", status.initiate);
	call io_call_info.report ("Software abort:^-""^1b""b", status.abort);
	call io_call_info.report ("IOM channel:^-^a", channel_msg (binary (status.channel_stat)));
	call io_call_info.report ("IOM central:^-^a", central_msg (binary (status.central_stat)));
	call io_call_info.report ("Rec count residue:^-^d (decimal)", binary (status.rcount));
	call io_call_info.report ("DCW address:^-^6w (octal)", binary (status.address), 35);
	call io_call_info.report ("Character position:^-^d (decimal)", binary (status.char_pos));
	if status.r
	     then errmsg = "yes";
	     else errmsg = "no";
	call io_call_info.report ("Reading:^2-^a", errmsg);
	call io_call_info.report ("Last DCW type:^-""^2b""b", status.type);
	call io_call_info.report ("DCW tally:^-^d (decimal)^/", binary (status.tally));
	return;

     end print_hardware_status;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
print_device_status:
     procedure;

	errmsg = "Device status";
	if cseg.hdw_status.no_minor = 0
	     then do;				/* no minor status entered */
		call convert_status_code_ (cseg.hdw_status.major, short, long);
		call io_call_info.report ("^a:^-^a", errmsg, long);
		end;
	     else do i = 1 to cseg.hdw_status.no_minor;
		     call convert_status_code_ (cseg.hdw_status.minor (i), short, long);
		     call io_call_info.report ("^a:^-^a", errmsg, long);
		     errmsg = "       and:";
		end;
	if ^file_status_sw
	     then					/* only for not file_status */
		call io_call_info.report ("Blocks processed:^-^d^/", cseg.lrec.blkcnt);
	     else call io_call_info.report ("");
	return;

     end print_device_status;


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
print_volume_status:
     procedure;

/* prints info from cseg: i = current volume number of volume set. */

	call io_call_info.report ("Volume name:^-^a", vl (i).volname);
	call io_call_info.report ("Label ID:^2-^a", substr (vl (i).volume_id, 1, 6));
	call io_call_info.report ("Volume sequence no:^-^d", i);
	if vl (i).rcp_id = 0
	     then call io_call_info.report ("Tape drive:^-(Volume Not Mounted)");
	     else call io_call_info.report ("Tape drive:^-^a", vl (i).tape_drive);
	if vl (i).read_errors > 0 then call io_call_info.report ("Read errors:^-^d", vl (i).read_errors);
	if vl (i).write_errors > 0 then call io_call_info.report ("Write errors:^-^d", vl (i).write_errors);
	call io_call_info.report ("");
	return;

     end print_volume_status;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
print_file_status:
     procedure;


	call io_call_info.report ("File state:^-^a", State (state));
	if state = 0
	     then do;
		call io_call_info.report ("");
		return;
		end;
	if state = 3
	     then do;
		call convert_status_code_ (cseg.lrec.code, short, long);
		call io_call_info.report ("I/O inhibited because:^-^a", long);
		end;
	if cseg.no_labels
	     then lbl = "0"b;
	     else lbl = "1"b;
	if lbl then call io_call_info.report ("File name:^-^a", fl.file_id);
	call io_call_info.report ("File number:^-^d", fl.sequence);
	if lbl then call io_call_info.report ("File section no:^-^d", fl.section);
	call io_call_info.report ("Current volume:^-^a", vl (fl.vlX).volname);
	if lbl then call io_call_info.report ("File generation:^-^d", fl.generation);
	if lbl then call io_call_info.report ("File version:^-^d", fl.version);
	if fl.creation ^= "00000" then call io_call_info.report ("Created on:^-^a", cv_date ((fl.creation)));
	if fl.expiration ^= "00000" then call io_call_info.report ("Expires on:^-^a", cv_date ((fl.expiration)));
	call io_call_info.report ("Format:^2-^a", format (io_mod, fl.format + (binary (fl.blocked, 1) * 4)));
	if fl.format ^= 1 then call io_call_info.report ("Record length:^-^d", fl.reclen);
	call io_call_info.report ("Block length:^-^d", fl.blklen);
	call io_call_info.report ("Encoding mode:^-^a", mode (fl.mode));
	call io_call_info.report ("Blocks processed:^-^d^/", cseg.lrec.blkcnt);
	return;

     end print_file_status;


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
cv_date:
     proc (julian) returns (char (10) aligned);

dcl  julian		       char (5);		/* date in form: yyddd			*/

dcl  clock		       fixed bin (71),
     (month, day, year)	       fixed bin,
     (Cmonth, Cday, Cyear)	       pic "99",
     date_time		       char (10) aligned,
     code			       fixed bin (35);

dcl  decode_clock_value_$date_time   entry (fixed bin (71), fixed bin, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin,
			       fixed bin (71), fixed bin, char (4), fixed bin (35)),
     encode_clock_value_$offsets     entry (fixed bin (71), fixed bin, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin,
			       fixed bin (71), fixed bin, char (4), fixed bin (71), fixed bin (35));

	year = convert (year, substr (julian, 1, 2));
	day = convert (day, substr (julian, 3, 3));
	call encode_clock_value_$offsets (0, 0, day - 1, year - 1, 0, 0, 0, 0, 0, "gmt", clock, code);
	if code ^= 0 then return ("unknown");
	call decode_clock_value_$date_time (clock, month, day, year, 0, 0, 0, 0, 0, "gmt", code);
	if code ^= 0 then return ("unknown");
	Cmonth = month;
	Cday = day;
	Cyear = year - 1900;
	date_time = Cmonth || "/" || Cday || "/" || Cyear;
	return (date_time);

     end cv_date;



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
setup_for_vol_status:
     procedure;

	if cseg.no_labels
	     then do;				/* no file chain */
		if fd.vlX = 0
		     then i = 1;			/* file data not initializeed - use 1st volume */
		     else i = fd.vlX;
		end;
	     else do;
		if cseg.flP = cseg.fcP | cseg.flP = null
		     then i = 1;			/* no file links - use 1st volume */
		     else i = fl.vlX;		/* else use current volume */
		end;
	return;					/* i = number of current volume */

     end setup_for_vol_status;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
force_eov:
     procedure;


	code = 0;
	if cseg.no_labels
	     then call tape_ansi_nl_file_cntl_$data_eot (iocbP, code);
	     else call tape_ansi_file_cntl_$data_eot (iocbP, code);
						/* force volume switch */
	if code ^= 0
	     then do;				/* trouble */
		cseg.lrec.code = code;		/* lock the logical record IO */
		if code = error_table_$no_next_volume then code = 0;
						/* don't indicate now */
		end;
	return;

     end force_eov;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
setup_for_file_status:
     procedure;					/* determine file state and event code */

	code = 0;
	if cseg.no_labels
	     then do;				/* no file chain */
		if fd.vlX = 0
		     then go to no_info;		/* no information available */
		     else ;
		end;
	     else do;
		if cseg.flP = cseg.fcP | cseg.flP = null
		     then do;			/* no file links */
no_info:
			state = 0;
			return;
			end;
		if fl.file_id ^= fd.file_id & fl.sequence ^= fd.sequence then go to no_info;
						/* wrong link */
		end;

	if iocbP -> iocb.actual_iocb_ptr -> iocb.open_descrip_ptr = null
	     then state = 1;
	     else do;				/* file is open */
		event_code = cseg.lrec.code;		/* set event code */
		if cseg.lrec.code = 0
		     then state = 2;		/* no event */
		     else state = 3;
		end;
	return;

     end setup_for_file_status;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
reset_error_lock:
     procedure;

	code = 0;
	if cseg.open_mode = 4
	     then do;				/* switch must be open for sequential_input */
		if cseg.lrec.code = error_table_$tape_error then cseg.lrec.code = 0;
						/* unlock the lock */
		if cseg.lrec.code = 0 then return;	/* lock isn't (or wasn't) locked - we're done */
		end;
	code = error_table_$action_not_performed;	/* sequential_output or couldn't unlock */
	return;

     end reset_error_lock;




     end tape_ansi_control_;
