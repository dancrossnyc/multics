/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

tape_labeler_: procedure;


/*	This procedure is part of the Multics standard tape DIM: tape_.
   *	Originally coded by  Bill Silver  on 01/21/74.
   *
   *	It is called to write or read the label of a Multics standard tape.
*/

/*		ARGUMENTS			*/

dcl  arg_error_code fixed bin (35),			/* (O) Standard system error code. */
     arg_tsegp ptr,					/* (I) Pointer to tseg set up by tape_. */
     arg_volid char (*);				/* (I/O) Tape reel ID. */



/*		AUTOMATIC  DATA		*/

dcl  buf_size fixed bin,				/* Size of tdcm_ I/O buffer. */
     error_code fixed bin (35),			/* Standard system error code. */
     extra_bufs fixed bin,				/* Number of extra large buffers available. */
     i fixed bin,
     ip ptr,					/* Pointer to base of installation_parms segment. */
     record_data_size fixed bin,			/* Number of words in the data portion of the label record. */
     record_size fixed bin,				/* Number of words in the physical label record. */
     search_retry_count fixed bin,			/* Num of times we retry the whole label search. */
     tl_ptr ptr,					/* Pointer to our tape label data. */
     want_eof_flag bit (1),				/* ON => we want an End of File record. */
     write_retry_count fixed bin;			/* Num of times we retry PE Burst error. */



/*		BASED  DATA		*/

dcl 1 tape_label based (tl_ptr) aligned,		/* Overlay of the data in a tape label. */
    2 installation_id char (32),			/* Taken from installation parms. */
    2 tape_reel_id char (16);				/* Identifier for this reel. */



/*		EXTERNAL  ENTRIES		*/

dcl (addr, divide, fixed, null, rel, size, string, substr) builtin;

dcl (error_table_$argerr,
     error_table_$bad_label,
     error_table_$device_attention,
     error_table_$improper_data_format) external fixed bin (35),
     tape_dim_data_$record_data_size external fixed bin;

dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (5), fixed bin (2), ptr, fixed bin (35)),
     ioa_ entry options (variable),
     tape_read_$record entry (ptr, ptr, fixed bin, fixed bin (35)),
     tape_util_$rewind entry (ptr, fixed bin (35)),
     tape_write_$eof entry (ptr, fixed bin (35)),
     tape_write_$record entry (ptr, ptr, fixed bin, fixed bin (35)),
     tdcm_$tdcm_get_buf_size entry (ptr, fixed bin, fixed bin (35));
						/* 	*/
%include tseg;
/* 	*/
%include mstd;
/* 	*/
%include mstr;
/* 	*/
%include installation_parms;
/* 	*/
write:	entry (arg_tsegp, arg_volid, arg_error_code);


/*	This entry is called to write the label record of a Multics standard tape.  It must
   *	also write an EOF record after the label record.  Note, currently a Multics standard
   *	record may be one of two sizes.  We will get the size used for all the records of this
   *	tape from:  tape_dim_data.  This size is the number of words in the data portion
   *	of the Multics standard records.
*/


	write_retry_count = 0;

	record_data_size = tape_dim_data_$record_data_size;
	if (record_data_size ^= 1024) &		/* Validate record data size. */
	(record_data_size ^= 256)
	then do;					/* We will only write records of standard size. */
	     error_code = error_table_$argerr;
	     goto WRITE_RETURN;
	end;

	call INIT_MSTD;				/* Set up data in an MSTD. */
	if error_code ^= 0
	then goto WRITE_RETURN;

	if record_data_size = 1024			/* Set up the number of buffers we will work with. */
	then mstd.work.sub_buf_num = 2 + extra_bufs;
	else mstd.work.sub_buf_num = 6;
	mstd.work.tot_buf_num = mstd.work.sub_buf_num * 2;

	mstd.work.last_buf = mstd.work.sub_buf_num + 1;	/* Init to beginning of second subset. */

	tl_ptr = addr (mstd.buffer);			/* Set up label data. */

	call hcs_$initiate (">system_control_1", "installation_parms", "", 0b, 1b, ip, error_code);
	if ip = null ()				/* Is there an installation_parms segment? */
	then tape_label.installation_id = " ";		/* NO, use blanks. */
	else tape_label.installation_id = installation_parms.installation_id;
	tape_label.tape_reel_id = arg_volid;		/* Caller knows reel ID. */

WRITE_RETRY_LOOP:

	mstd.head.flags.admin,			/* Turn ON label flags. */
	     mstd.head.flags.label = "1"b;
	call tape_write_$record (tsegp, tl_ptr, size (tape_label), error_code);
	if error_code = 0 then do;			/* No error, try to write EOF mark. */
	     string (mstd.head.flags) = "0"b;		/* Turn OFF all flags. */
	     call tape_write_$eof (tsegp, error_code);
	end;
	if error_code ^= 0
	then do;					/* There was some error writing label. */
	     if error_code ^= error_table_$bad_label
	     then goto WRITE_RETURN;
	     if write_retry_count = 10		/* PE Burst Write Error. */
	     then do;				/* Retry a max of ten times. */
		call ioa_ ("tape_: PE Burst Write Error while writing label.");
		error_code = error_table_$device_attention;
		goto WRITE_RETURN;
	     end;
	     write_retry_count = write_retry_count + 1;
	     call tape_util_$rewind (tsegp, error_code);
	     if error_code ^= 0
	     then goto WRITE_RETURN;
	     goto WRITE_RETRY_LOOP;			/* Try to write label record again. */
	end;

	call COMPLETE_MSTD;				/* Label records written OK. */

WRITE_RETURN:					/* Common exit from this entry. */
	arg_error_code = error_code;
	return;
						/* 	*/
read:	entry (arg_tsegp, arg_volid, arg_error_code);


/*	This entry is called to read a label record and an End of File record from the
   *	beginning of a Multics standard tape.  Note, before we look for the label record we
   *	must rewind the tape to be sure that it is at BOT.
*/

	record_data_size = 1024;			/* Initially assume that this tape has large records. */

	call INIT_MSTD;				/* Set up an MSTD. */
	if error_code ^= 0
	then goto READ_RETURN;

	tl_ptr = addr (mstd.buffer);			/* Read label data into this buffer. */
	search_retry_count = 0;


SEARCH_RETRY_LOOP:					/* Search for the label record and EOF. */

	if search_retry_count = 10			/* Have we retried search too many times? */
	then goto BAD_LABEL;			/* YES, quit. */
	search_retry_count = search_retry_count + 1;	/* Up count of retries. */

	call tape_util_$rewind (tsegp, error_code);	/* Must start from BOT. */
	if error_code ^= 0
	then goto READ_RETURN;

	want_eof_flag = "0"b;			/* 1st record should not be an EOF. */

	do i = 1 to 66;				/* Read the first record  +  up to 64
						   *  repeat records  +  one EOF record. */
	     call tape_read_$record (tsegp, tl_ptr, record_data_size, error_code);
	     if error_code ^= 0
	     then if error_code = error_table_$improper_data_format
		then goto SEARCH_RETRY_LOOP;
		else goto READ_RETURN;
	     if mstd.flags.eof			/* Is this an EOF record? */
	     then if want_eof_flag			/* Do we want an EOF record? */
		then goto GOT_LABEL_EOF;		/* YES, this is what we are looking for. */
		else goto SEARCH_RETRY_LOOP;		/* NO, we missed the label record. */
	     if mstd.trail.tot_rec > 0		/* We got a good data record. */
	     then goto SEARCH_RETRY_LOOP;		/* BUT it is not the label record. */
	     want_eof_flag = "1"b;			/* We have read in one good data record.
						   *  Now we are looking for the EOF record. */
	end;					/* Go read the next record. */

	error_code = error_table_$improper_data_format;	/* If we get here then bad trouble. */
	goto READ_RETURN;


/*	We have successfully read the first record of the tape and the EOF record that followed
   *	it.  Now, we must see how many words are in this record.  The rest of the records on
   *	this tape should be the same size.  We must also check to see that this record is a
   *	valid Multics standard tape label record.
*/
GOT_LABEL_EOF:

	record_data_size = divide (mstd.head.data_bit_len, 36, 17, 0);
	if (record_data_size ^= 1024) &
	(record_data_size ^= 256)
	then goto BAD_LABEL;

	if ^mstd.head.flags.admin |			/* Check that label flags are correct. */
	^mstd.head.flags.label
	then goto BAD_LABEL;			/* Both MUST be ON. */

	record_size = record_data_size + size (mstr_header) + size (mstr_trailer);
	if record_size = 1040			/* Set up number of buffers. */
	then mstd.work.sub_buf_num = 2 + extra_bufs;
	else mstd.work.sub_buf_num = 4;
	mstd.work.tot_buf_num = mstd.work.sub_buf_num * 3;

	string (mstd.flags),			/* Zero flags. */
	     string (mstd.head.flags) = "0"b;
	mstd.flags.begin = "1"b;			/* Tell tape_read_ that this is the beginning. */
	mstd.work.label_uid = "0"b;			/* Save UID of label.  Only right 52 bits used. */
	substr (mstd.work.label_uid, 19, 52) = substr (mstd.head.uid, 19, 52);

	call COMPLETE_MSTD;				/* Return a good MSTD to tape_. */

	arg_volid = tape_label.tape_reel_id;		/* Caller wants to know this. */

	goto READ_RETURN;



BAD_LABEL:
	error_code = error_table_$bad_label;


READ_RETURN:					/* Common exit from this entry. */
	arg_error_code = error_code;
	return;
						/* 	*/
INIT_MSTD: procedure;

/*	This internal procedure is called by both the write and read entries.  Its job is to
   *	find the tseg that we must use.  Then it must initialize the MSTD referenced by this tseg.
*/

	     error_code = 0;			/* Initialize. */
	     tsegp = arg_tsegp;

	     record_size = record_data_size + size (mstr_header) + size (mstr_trailer);

	     tseg.bufferptr (1) = fixed (rel (addr (tseg.buffer (1))), 18);
	     tseg.buffer_size (1) = record_size;	/* Set up first TSEG buffer. */
	     tseg.mode (1) = 0;


	     mstd_ptr = tseg.areap;			/* Now initialize this MSTD. */

	     mstd.head.c1 = header_c1;		/* 670314355245 */
	     mstd.head.rec_within_file = -1;		/* Incremented before record is written. */
	     mstd.head.phy_file = 0;
	     mstd.head.data_bit_len = record_data_size * 36;
	     string (mstd.head.flags) = "0"b;
	     mstd.head.c2 = header_c2;		/* 512556146073 */

	     mstd.trail.c1 = trailer_c1;		/* 107463422532 */
	     mstd.trail.tot_data_bits = 0;
	     mstd.trail.pad_pattern = "111111111111111111111111111111111111"b;
	     mstd.trail.reel_num,
		mstd.trail.tot_file = 0;
	     mstd.trail.tot_rec = -1;			/* Incremented before record is written. */
	     mstd.trail.c2 = trailer_c2;		/* 265221631704 */

	     string (mstd.flags) = "0"b;

	     mstd.work.buf_pos = size (mstr_header);	/* Start data after header. */
	     mstd.work.curr_buf,			/* Start with the first buffer. */
		mstd.work.last_buf,
		mstd.work.next_buf = 1;
	     mstd.work.error_buf,			/* No errors yet. */
		mstd.work.error_count,
		mstd.work.last_count,		/* Nothing is going on now. */
		mstd.work.next_count = 0;
	     mstd.work.error_status = "0"b;
	     mstd.work.rec_word_size = record_data_size;

	     call tdcm_$tdcm_get_buf_size (tsegp, buf_size, error_code);
	     if buf_size = 4160			/* Do we have a large buffer? */
	     then extra_bufs = 2;			/* Yes, we can have two more large buffers. */
	     else extra_bufs = 0;

	end INIT_MSTD;
						/* 	*/
COMPLETE_MSTD: procedure;


/*	This internal procedure is called when we have successfully processed the tape label.
   *	Its job is to set up in TSEG all the buffers that we will be using to
   *	process this tape.
*/

	     do i = 1 to mstd.work.tot_buf_num;		/* Initialize the buffers that will be used. */
		tseg.bufferptr (i) = fixed (rel (addr (tseg.buffer (i))), 18);
		tseg.buffer_size (i) = record_size;
		tseg.mode (i) = 0;
	     end;

	end COMPLETE_MSTD;


     end tape_labeler_;
