/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

tape_write_:  procedure;


/*	This procedure implements the write functions of the Multics standard tape DIM: tape_.
*	Originally coded by  Bill Silver  on 01/14/74.
*
*	All of the functions that involve writing on a tape have been combined in this module.
*	Previously, these functions were dispersed in every module of tape_.  The entry
*	points contained in this module are:
*
*	stream:	Writes stream data onto the tape.  The stream is broken up into Multics
*		standard records.  Currently, the element size of the stream must be 36.
*	record:	Writes one Multics standard record.  The data that is to be written must
*		fit into one Multics standard record.  Currently, this entry may be
*		called only from within tape_.
*	eof:	Writes one End of File record.  May be called only from within tape_.
*	flush:	Writes all the data we have currently bufferred.  This entry
*		may be called only from within tape_.
*/


/*		ARGUMENTS			*/

dcl	arg_data_size	fixed bin,	/* (I) Num of WORDS of data to write. */
	arg_error_code	fixed bin(35),	/* (O) Standard system error code. */
	arg_nelem		fixed bin,	/* (I) Num of elements we are requested to write. */
	arg_nelemt	fixed bin,	/* (O) Num of elements actually written. */
	arg_offset	fixed bin,	/* (I) Offset from workspace pointer of
					*      where output data begins. */
	arg_status	bit(72),		/* (O) IOS status that is returned. */
	arg_tsegp		ptr,		/* (I) Pointer to "tseg".  Used by entries
					*      that are only called from tape_ itself. */
	arg_tts_ptr	ptr,		/* (I) Pointer to tape temp seg. */
	arg_workspace_ptr	ptr;		/* (I) Pointer to beginning of output data. */


/*		AUTOMATIC  DATA		*/

dcl	buf_data_ptr	ptr,		/* Pointer to beginning of unused buffer data area. */
	buf_ptr		ptr,		/* Pointer to beginning of record buffer. */
	buf_space		fixed bin,	/* Num of unused words in record buffer. */
	data_size		fixed bin,	/* Num of words of data to be moved. */
	error_code	fixed bin(35),	/* Standard system error code. */
	error_index	fixed bin,	/* Used in processing write errors. */
	full_flag		bit(1),		/* ON => buffer is full. */
	i		fixed bin,
	num_data_bits	fixed bin,	/* Bit count of actual data in a record. */
	retry_count	fixed bin,	/* Num of times we have retried an operation. */
	word_count	fixed bin,	/* Num of words left to process. */
	work_ptr		ptr;		/* Pointer to workspace + offset. */


/*		 BASED  DATA		*/

dcl	based_data (data_size) bit(36) based aligned;  /* Used to move data. */

dcl	based_array(1:1040)	bit(36) based;	 /* Array of words. */


/*		EXTERNAL  DATA		*/

dcl     (	error_table_$bad_label,
	error_table_$device_attention,
	error_table_$device_end,
	error_table_$device_parity,
	error_table_$invalid_write )  fixed bin  external;


dcl	ioa_ 		entry  options(variable);
dcl	tdcm_$tdcm_iocall	entry  (ptr, fixed bin(35)),
	tape_checksum_	entry  (ptr, ptr),
	unique_bits_	entry  returns (bit(70));


dcl	(addr, addrel, min, ptr, size)  builtin;
/*	*/
%include tape_temp_seg;






%include ios_sdb;
/*	*/
%include tseg;
/*	*/
%include mstd;
/*	*/
%include mstr;
/*	*/
%include ios_status;




%include iom_stat;
/*	*/
stream:  entry  (arg_tts_ptr, arg_workspace_ptr, arg_offset, arg_nelem, arg_nelemt, arg_status);


/*	This entry is called to write stream data onto a tape.  The element size of the
*	stream must be 36 bits.  The stream will be broken up into units that can be written
*	as one Multics standard tape record.
*/

	tts_ptr = arg_tts_ptr;		/* Initialize pointers. */
	tsegp = addr(tape_temp_seg.tseg);
	mstd_ptr = tseg.areap;
	ios_statp = addr(arg_status);

	word_count = arg_nelem;		/* Get num of words to write.  Add in offset. */
	work_ptr = addrel(arg_workspace_ptr, arg_offset);
	arg_status = "0"b;
	error_code = 0;

	if   tseg.write_sw ^= 1		/* May we write on this tape? */
	     then do;			/* NO. */
		error_code = error_table_$invalid_write;
		goto STREAM_RETURN;
	     end;

	if   mstd.head.flags.eot		/* Have we past the End of Tape reflector? */
	     then do;			/* YES, can't write anymore. */
		error_code = error_table_$device_end;
		goto STREAM_RETURN;
	     end;

/*	We will now move the caller's data into the record buffers.  This loop breaks the
*	data up into Multics standard tape records.  Each iteration implies that one
*	tape record has been filled  or  contains all the data we have to write.
*/
	do   while (word_count > 0);		/* Keep looping until all data moved. */
	     call FILL_BUFFER;		/* Fill buffer - up to 1 Mult. stand. tape record. */
	     if   error_code ^= 0		/* Was there an error writing some records? */
		then goto STREAM_RETURN;	/* YES. */
	end;


STREAM_RETURN:				/* Common return from this entry. */

	arg_nelemt = arg_nelem - word_count;	/* Return number of elements actually processed. */
	if   error_code ^= 0		/* Was there an error? */
	     then do;			/* YES. */
		ios_status.code = error_code;	/* Return error code. */
		if   error_code = error_table_$device_end
		     then ios_status.log_end_data,
			ios_status.phy_end_data = "1"b;
	     end;
	return;
/*	*/
record:  entry  (arg_tsegp, arg_workspace_ptr, arg_data_size, arg_error_code);


/*	This entry is called to write ONE Multics standard tape record.  The data
*	that the user wants to write MUST fit into one Multics standard tape record.
*	Note, no record is written unless the caller supplies at least one word.
*	If there is space in the record which is not used it will be padded with
*	words of (-1).  If there is unwritten data in the current record buffer
*	then that record will also be padded.  We will always begin writing our data
*	at the beginning of the data portion of the Multics standard record.
*/

	tsegp = arg_tsegp;			/* Initialize pointers, etc. */
	mstd_ptr = tseg.areap;
	error_code = 0;
	word_count = min(arg_data_size, mstd.work.rec_word_size);
	work_ptr = arg_workspace_ptr;

	if   word_count = 0			/* No data => no write. */
	     then goto RECORD_RETURN;

	call PAD;				/* If any data in current buffer, pad ... */
	if   error_code ^= 0		/* it out to the end of the record. */
	     then if   error_code ^= error_table_$device_end
		     then goto RECORD_RETURN;	/* Error when writing padded record. */

	call FILL_BUFFER;			/* Move data into record buffer. */
	if   error_code ^= 0
	     then goto RECORD_RETURN;

	call PAD;				/* Pad the rest of this record. */

RECORD_RETURN:				/* Common way out of this entry. */
	arg_error_code = error_code;		/* Return code. */
	return;
/*	*/
eof:	entry  (arg_tsegp, arg_error_code);


/*	This entry is called to write one End of File record.  If there is any
*	unwritten data in the current buffer it will be padded and written
*	before the EOF record is written.
*/

	tsegp = arg_tsegp;			/* Initialize pointers, etc. */
	mstd_ptr = tseg.areap;
	error_code = 0;

	call PAD;				/* Pad any data in current record buffer. */
	if   error_code ^= 0
	     then if   error_code ^= error_table_$device_end
		     then goto EOF_RETURN;

	call WRITE_EOF;			/* Write the EOF record. */

EOF_RETURN:				/* Common way out of this entry. */
	arg_error_code = error_code;
	return;
/*	*/
flush:	entry  (arg_tsegp, arg_error_code);


/*	This entry is called to flush out all the data we currently have
*	buffered.  If the current bffer is only partially full it will be
*	padded.  We may have to call WRITE_BUFFERS twice to be sure that
*	all the buffers have actually been written out onto the tape.
*	Calling this entry guarrantees that the next data given to tape_write_
*	will be placed at the beginning of the data portion of the next
*	physical Multics standard record.
*/

	tsegp = arg_tsegp;			/* Initialize. */
	mstd_ptr = tseg.areap;
	error_code = 0;

	call PAD;				/* Take care of any data in the current
					*  buffer. */
	if   error_code ^= 0
	     then goto FLUSH_RETURN;

	if   mstd.work.next_count > 0		/* Are there any buffers which we haven't
					* yet tried to write? */
	     then do;			/* YES. */
		call WRITE_BUFFERS;		/* Write them now. */
		if   error_code ^= 0
		     then goto FLUSH_RETURN;
	     end;

	call WRITE_BUFFERS;			/* Make sure last buffer write completed.
					*  mstd.work.next_count is 0 when this
					*  call is made. */
FLUSH_RETURN:
	arg_error_code = error_code;
	return;
/*	*/
FILL_BUFFER:  procedure;


/*	This procedure is called to move data into the current record buffer.
*	It will only move the number of data words needed to fill up this one buffer.
*	If there is more data to write, this procedure must be called again.
*	Note, this procedure calls SET_UP_BUFFER to fill in the record header and
*	the record trailer and to possibly write the current subset of buffers.
*/

	buf_ptr = ptr(tsegp, tseg.bufferptr(mstd.work.curr_buf));
	buf_data_ptr = addrel(buf_ptr, mstd.work.buf_pos);
	buf_space = mstd.work.rec_word_size + size(mstr_header) - mstd.work.buf_pos;

	if   word_count < buf_space		/* Will we fill up the buffer with this data? */
	     then do;			/* NO, buffer will not be full. */
		full_flag = "0"b;
		mstd.work.buf_pos = mstd.work.buf_pos + word_count;
		data_size = word_count;
	     end;
	     else do;			/* Buffer will be full. */
		full_flag = "1"b;
		data_size = buf_space;	/* The data moved is = to space left. */
	     end;

	buf_data_ptr->based_data = work_ptr->based_data;	/* Move data into record buffer. */
	work_ptr = addrel(work_ptr, data_size);		/* Move pointer to next data. */
	word_count = word_count - data_size;		/* Get num of words left to process. */

	if   ^full_flag			/* Is the buffer full? */
	     then return;			/* NO, don't set up record header, etc. */

	num_data_bits = mstd.head.data_bit_len;	/* Stream write => using all of record data area. */
	call SET_UP_BUFFER;			/* Update header and trailer for this record. */


	end  FILL_BUFFER;
/*	*/
PAD:	procedure;


/*	This procedure is called to pad out the current record with words of
*	(-1).  We will not pad if there is no data in the current buffer.  Note,
*	padded records will have the  "set" and "padded" flags ON.
*/

	if   mstd.work.buf_pos = size(mstr_header)  /* Is there any data in the current buffer? */
	     then return;			/* NO, no padding needed. */

	word_count = mstd.work.buf_pos - size(mstr_header);
	num_data_bits = word_count * 36;	/* Get number of actual bits of data. */
	buf_ptr = ptr(tsegp, tseg.bufferptr(mstd.work.curr_buf));

	do   i = (word_count + size(mstr_header) + 1) to (mstd.work.rec_word_size + size(mstr_header));
	     buf_ptr -> based_array(i) = mstd.trail.pad_pattern;
	end;

	mstd.head.flags.set,		/* Turn ON padding flags. */
	mstd.head.flags.padded = "1"b;

	call SET_UP_BUFFER;			/* Set up header and trailer of this
					*  record. */


	end  PAD;
/*	*/
SET_UP_BUFFER:  procedure;


/*	This procedure is called to set up the header and trailer of the current
*	record.  First it will update the information that must go into the header
*	and trailer.  Then it will move the work header and trailer into the actual
*	write buffer for this record.  If we are at an End of File boundary
*	(every 128 records counting from zero)  or  if we are at the end of
*	a buffer subset (for writing the total number of buffers is divided
*	into two subsets) then we will write out all the buffers in the current
*	subset.
*/

	mstrp = buf_ptr;			/* Get pointer to actual record buffer. */

	mstd.head.uid,			/* Same UID in header & trailer. */
	mstd.trail.uid = unique_bits_();

	mstd.head.rec_within_file  = mstd.head.rec_within_file + 1;
	mstd.head.data_bits_used = num_data_bits;

	mstd.trail.tot_data_bits = mstd.trail.tot_data_bits + num_data_bits;
	mstd.trail.tot_rec = mstd.trail.tot_rec + 1;

	mstr.head  = mstd.head;		/* Copy work header and trailer. */
	mstr.trail = mstd.trail;

	call tape_checksum_ (mstrp, addr(mstr.head.checksum));


/*	Now the record is all set up for writing.  We must update the index to
*	the current buffer.  Note, we handle buffer wrap-around when we write.
*	We must check here to see if we have to write the current buffer subset.
*/
	mstd.work.buf_pos = size(mstr_header);		/* This record full - reset data element offset. */
	mstd.work.curr_buf = mstd.work.curr_buf + 1;	/* Up index to buf we will fill in. */
	mstd.work.next_count = mstd.work.next_count + 1;	/* Up count of bufs already filled. */

	if   mstd.head.rec_within_file = 127	/* Have we reached an EOF boundary? */
	     then do;			/* Yes, we must write an EOF record. */
		call WRITE_EOF;		/* This procedure forces write of last subset. */
		return;
	     end;

	if   mstd.work.next_count = mstd.work.sub_buf_num
	     then call WRITE_BUFFERS;		/* We have filled up this buffer subset. */


	end  SET_UP_BUFFER;
/*	*/
WRITE_EOF:  procedure;


/*	This procedure is called to write one End of File record.  There are four main tasks
*	performed by this procedure:
*	1.  If there are any data records which we have not tried to write then we must
*	    write them now.
*	2.  We must make sure that the last attempt to write data records has completed.
*	3.  We will write the EOF record itself.  Note, if we have errors while writing
*	    the EOF record we will retry it 10 times.
*	4.  We must update the record header and trailer data to reflect the beginning
*	    of a new file.
*/

	if   mstd.work.next_count > 0		/* Any data records not yet written? */
	     then do;			/* YES, write them before the EOF. */
		call WRITE_BUFFERS;
		if   error_code ^= 0
		     then if   error_code ^= error_table_$device_end
			     then return;
	     end;

	call WRITE_BUFFERS;			/* Make sure last write request has completed. */
	if   error_code ^= 0		/* Note, "next_count" for this call was 0. */
	     then if   error_code ^= error_table_$device_end
		     then return;


	retry_count = 0;
WRITE_EOF_LOOP:

	tseg.sync,			/* Wait for EOF to be written. */
	tseg.command_count = 1;		/* One EOF record written. */
	tseg.command_queue(1) = 101101b;	/* Set up write EOF command. */
	call tdcm_$tdcm_iocall (tsegp, error_code);  /* Call to actually write the EOF record. */
	tseg.sync = 0;			/* Make sure this is reset. */
	if   error_code ^= 0		/* Was there a bad error? */
	     then return;			/* YES. */

	if   tseg.completion_status = 2	/* Did write EOF fail? */
	     then do;			/* YES. */
		statp = addr(tseg.hardware_status);
		if   (status.major = "0011"b)  &
		     (status.sub = "100000"b)
		     then goto WRITE_EOF_OK;	/* Ignore End of Tape condition. */
		retry_count = retry_count + 1;/* Maybe we can retry. */
		if   retry_count > 10	/* Too many retries? */
		     then do;		/* Yes, can't go on. */
			error_code = error_table_$device_parity;
			return;
		     end;
		goto WRITE_EOF_LOOP;	/* Go retry writing the EOF. */
	     end;

WRITE_EOF_OK:
	mstd.head.rec_within_file  = -1;	/* Write EOF OK, update header & trailer. */
	mstd.head.phy_file  = mstd.head.phy_file  + 1;
	mstd.trail.tot_file = mstd.trail.tot_file + 1;


	end  WRITE_EOF;
/*	*/
WRITE_BUFFERS:  procedure;


/*	This procedure is called to  write out the current subset of record buffers.
*	Note, in order to maximize the use of the tape drive, we have divided the total
*	number of buffers available into two subsets.  The general idea is to write one
*	subset - and while the tape drive is working on that request - to fill up the next
*	subset of buffers with data.
*/

WRITE_NEXT_SUBSET:					/* We are writing the subset that we have
						*  just filled with data. */

	tseg.command_count = 0;			/* No non data transfer commands. */
	tseg.buffer_count  = mstd.work.next_count;	/* "next_count" = num of buffers to write. */
	tseg.buffer_offset = mstd.work.next_buf - 1;	/* tdcm_ counts buffers from 0. */

	call tdcm_$tdcm_iocall (tsegp, error_code);	/* Write out this subset. */
	if   error_code ^= 0			/* Bad error? */
	     then return;				/* YES. */

	if   tseg.completion_status = 2		/* Status is for last subset.  Any error? */
	     then do;				/* Yes, error writing last subset. */
		call WRITE_ERROR;			/* Try to recover from this error. */
		if   error_code ^= 0		/* Is it an unrecoverable error. */
		     then return;			/* Yes, can't do any more. */
		goto WRITE_NEXT_SUBSET;		/* No,  WRITE_ERROR recovered.  Try again. */
	     end;

/*	The last subset of buffers was written successfully.  The tape drive is now working
*	on the next subset of buffers.  Now we must switch the subsets so that the last
*	subset becomes the next subset we will fill up with data.
*/
	if   mstd.work.last_buf > mstd.work.sub_buf_num	/* Which subset should be filled next? */
	     then mstd.work.curr_buf = mstd.work.sub_buf_num + 1;	/* The second subset. */
	     else mstd.work.curr_buf = 1;			/* The first  subset. */
	mstd.work.last_buf = mstd.work.next_buf;	/* Switch the buffer subsets. */
	mstd.work.next_buf = mstd.work.curr_buf;	/* Last -> next,  next -> last. */
	mstd.work.last_count = mstd.work.next_count;	/* Save num of bufs in this write request. */
	mstd.work.next_count = 0;			/* No bufs filled yet in next subset. */

	if   mstd.head.flags.eot			/* Have we reached the end of the tape reel? */
	     then error_code = error_table_$device_end;	/* Yes, return error code. */


	end  WRITE_BUFFERS;
/*	*/
WRITE_ERROR:    procedure;


/*	This procedure is called to try and recover from a write error.
*	All errors  except data alerts (device and MPC) will be considered fatal.
*	In handling write errors, the Multics standard tape  format requires that
*	the  tape is never backed up.   Instead, we will write the record in error
*	over again.  A special flag in the header of the rewritten record will
*	indicate that it is a repeated record.  Note, if we have reached the End
*	of Tape reflector, then we must do some special processing.
*/

	statp = addr(tseg.hardware_status);		/* Ptr to status that tells what error is. */
	error_index = tseg.error_buffer - 1;		/* Used to determine buffer in error. */

	if   (status.major ^= "0011"b)  &		/* If not Device Data Alert ... */
	     (status.major ^= "1011"b)		/* or not MPC Device Data Alert ... */
	     then goto SETUP_REPEAT_RECORD;		/* Bad error, but try to recover anyway. */

	if   (status.major = "1011"b)  &		/* Check for PE Burst Write error. */
	     (status.sub = "001000"b)
	     then do;				/* Got one. Can only happen with label. */
		error_code = error_table_$bad_label;
		return;
	     end;

	if   (status.major ^= "0011"b)  |		/* If not a Device Data Alert ... */
	     ((status.sub & "100000"b) ^= "100000"b)	/* and not an EOT ... */
	     then goto SETUP_REPEAT_RECORD;		/* then we are not at End of Tape. */


/*	We have reached the End of Tape reflector.   All records written now must have
*	the EOT bit ON in their header.   Note, changing the record requires that the
*	checksum be recomputed.    If the only error encounterd was the EOT condition,
*	then the error record specified by "tseg.error_buffer" WAS written OK.
*	We don't want to write it again or repeat it.
*/
	if   ^mstd.head.flags.eot			/* Is this the 1st EOT error? */
	     then do;				/* Yes, do this only the 1st time. */
		mstd.head.flags.eot = "1"b;		/* Remember EOT condition. */
		do   i = 1 to mstd.work.tot_buf_num;	/* Set EOT flag ON in all buffers. */
		     mstrp = ptr(tsegp, tseg.bufferptr(i));
		     mstr.head.flags.set,
		     mstr.head.flags.eot = "1"b;
		     call tape_checksum_ (mstrp, addr(mstr.head.checksum));
		end;
	     end;

	if   status.sub ^= "100000"b			/* Are there other errors? */
	     then goto SETUP_REPEAT_RECORD;		/* Yes, we should repeat error record. */

	if   mstd.work.last_count = tseg.error_buffer	/* Was error in work.last buffer of subset? */
	     then return;				/* Yes, nothing to rewrite. */

	error_index = error_index + 1;		/* Buffer that got error was written OK. */
	goto REWRITE_LAST_SUBSET;			/* Finish writing buffers in last subset. */


/*	We got an error writing the last subset.  "last_buf" now indicates the record
*	which got the error.  We must turn on the  repeat flag  in this record.  Note,
*	whenever we turn ON a flag in the header of a record we must recompute the checksum.
*	Note also that we will only retry this record 64 times.
*/

SETUP_REPEAT_RECORD:

	mstrp = ptr(tsegp, tseg.bufferptr(mstd.work.last_buf + error_index));
	mstr.head.repeat_count = mstr.head.repeat_count + 1;
	if   mstr.head.repeat_count > 64
	     then do;				/* We have retried too many times. */
		error_code = error_table_$device_parity;
		return;
	     end;
	mstr.head.flags.set,			/* OK to repeat, now turn ON flags. */
	mstr.head.flags.repeat = "1"b;
	call tape_checksum_ (mstrp, addr(mstr.head.checksum));
	mstd.work.error_count  = mstd.work.error_count + 1;


/*	Starting with the buffer that got the error, we will reissue a write
*	for all the buffers in the last subset which did not get written OK.
*	We must update the variables that keep track of what was going on
*	in the last subset.  We could get another error while writting these buffers.
*/

REWRITE_LAST_SUBSET:

	mstd.work.last_buf = mstd.work.last_buf + error_index;
	mstd.work.last_count = mstd.work.last_count - error_index;

	tseg.buffer_count  = mstd.work.last_count;
	tseg.buffer_offset = mstd.work.last_buf - 1;

	call tdcm_$tdcm_iocall (tsegp, error_code);


	end  WRITE_ERROR;


	end  tape_write_;
