/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

tape_read_:  procedure;

/*	Read portion of Multics standard tape DIM: tape_.  */

dcl (cp, wksp) pointer, (offset, nelem, nelemt) fixed bin, arg_status bit(72) aligned;
dcl  arg_tsegp ptr,
     arg_workspace_ptr ptr,
     arg_data_size fixed bin,
     arg_error_code fixed bin(35);
dcl  data_size fixed bin,
     error_code fixed bin(35),
     retry_count fixed bin,
     record_retry_flag bit(1),
     test_checksum bit(36) aligned;
dcl (wrdcnt, j, n,
     rem,						/* remainder of buffer */
     data_alerts init(0) ) fixed bin,			/* distinguish repeating for data alerts or bad format */
     rcode fixed bin(35),
    (wp, cbp,
     c,						/* ptr to tseg */
     bp) ptr,					/* ptr to current buffer */
     1 x72 based aligned,
       2 pad bit(18) unaligned,
       2 x bit(52) unaligned,
     temp_clok_id bit(72),
     temp fixed bin(35),
     bk_cnt fixed bin,
     ret_label label local init(accept_rec),
     high_cnt fixed bin,
     bk_code bit(1),
     tck bit(36) aligned,

     mover(size) fixed based, size fixed bin,		/* replaces use of move_ */
    (skip_rec, read_ahead, copy_flag) bit(1);
dcl	based_data (data_size) bit(36)  based  aligned;

dcl	max_record_retry fixed bin init(64) internal static;
dcl	label_size  fixed bin  init(12)  internal static;
dcl     (addr, bin, addrel, divide, fixed, mod, null, ptr, substr) builtin,
    error_table_$invalid_read ext fixed bin(17),
     error_table_$bad_density ext fixed bin(17),
    (error_table_$data_improperly_terminated, error_table_$improper_data_format) ext fixed bin(17),
    (error_table_$device_end, error_table_$device_parity) external fixed bin,
     (error_table_$blank_tape, error_table_$device_attention) fixed bin external,
     tdcm_$tdcm_iocall ext entry(pointer, fixed bin(35)),
     tape_checksum_ ext entry(ptr, ptr);
/*	*/
%include tape_temp_seg;





%include ios_sdb;
/*	*/
%include tseg;
/*	*/
%include mstd;
/*	*/
%include mstr;
/*	*/
%include ios_status;



%include iom_stat;
/*  */
record:	entry  (arg_tsegp, arg_workspace_ptr, arg_data_size, arg_error_code);


/*	This entry is called to read ONE physical record.  Only the actual data in this
*	Multics standard record will be moved into the caller's workspace.  If the record
*	read is an End of File record no data will be returned.  This entry does some
*	error recovery.  Currently, however, it has the following limitations:
*	1.  It should not be called after stream reading has been started.
*	2.  It does not check for repeat records.
*	3.  It only reads in synchronous mode.
*	4.  It does not check for End of Tape or End of Reel flags.
*	Currently this entry is called only by tape_ itself to read the label record.
*/

	tsegp = arg_tsegp;			/* Initialize pointers and work variables. */
	mstd_ptr = tseg.areap;
	mstrp = addr(tseg.buffer(mstd.work.curr_buf));

	string(mstd.flags),			/* Reset these values on each call. */
	record_retry_flag  =  "0"b;
	data_size,
	error_code,
	retry_count= 0;

	tseg.sync = 1;			/* All work done in sync mode. */
	tseg.buffer_offset = mstd.work.curr_buf - 1;  /* All work done in this buffer. */


RECORD_READ_LOOP:

	tseg.command_count = 0;
	tseg.buffer_count  = 1;		/* We want to read ONE record. */
	call tdcm_$tdcm_iocall (tsegp, error_code);
	if   error_code ^= 0		/* Bad error!! */
	     then goto RECORD_RETURN;

	if   tseg.completion_status < 2	/* Check result of read operation. */
	     then call VALIDATE_RECORD;	/* Good read, check if record is valid. */
	     else call CHECK_ERROR;		/* We got an error reading this record. */

	if   error_code ^= 0		/* Check code returned by either internal procs */
	     then goto RECORD_RETURN;		/* Bad error => no recovery. */

	if   record_retry_flag		/* Is there something wrong that we can retry? */
	     then do;			/* YES. */
		if   retry_count > max_record_retry
		     then do;		/* Too many retries already. */
			error_code = error_table_$device_parity;
			goto RECORD_RETURN;
		     end;
		retry_count = retry_count + 1;/* Try reading next record. */
		goto RECORD_READ_LOOP;
	     end;


/*	We got a good and valid record.  If this is an EOF record we will just return.
*	If this is a data record we will move the data from the record into the
*	workspace specified by the caller.  We will tell him the number of WORDS of data
*	that we are giving him.  We will move the record header and trailer into the MSTD.
*/
	if   mstd.flags.eof			/* Was it an End of File record? */
	     then goto RECORD_RETURN;		/* YES. */

	data_size = divide(mstr.head.data_bits_used,36,17,0);
	if   data_size = 0			/* Kludge to get past bug in old tape_xtach_$attach. */
	      then if  mstr.head.flags.label	/* It didn't set data_bits_used in label. */
		     then data_size = label_size; /* Trust that this is the size of the label. */
		     else do;		/* Not a label record. */
			error_code = error_table_$improper_data_format;
			goto RECORD_RETURN;
		     end;
	arg_data_size = data_size;
	arg_workspace_ptr->based_data = addr(mstr.data)->based_data;

	mstd.head  = mstr.head;		/* Return header & trailer data. */
	mstd.trail = mstr.trail;


RECORD_RETURN:				/* Common way out of this entry. */

	tseg.sync = 0;			/* This must be reset. */
	arg_data_size  = data_size;		/* Set return arguments. */
	arg_error_code = error_code;
	return;
/*	*/
VALIDATE_RECORD:  procedure;


/*	This internal procedure is called to validate a record.  The record has beem read
*	successfully. We want to be sure that the header and trailer data is valid.
*/

	if   (mstr.head.c1  ^= mstd.head.c1)   |
	     (mstr.head.c2  ^= mstd.head.c2)   |
	     (mstr.trail.c1 ^= mstd.trail.c1)  |
	     (mstr.trail.c2 ^= mstd.trail.c2)
	     then do;			/* Invalid header or trailer. */
		record_retry_flag = "1"b;	/* Try reading the next record. */
		return;
	     end;

	call tape_checksum_ (mstrp, addr(test_checksum));
	if   mstr.head.checksum ^= test_checksum
	     then do;			/* Checksum error. */
		record_retry_flag = "1"b;	/* Read the next record. */
		return;
	     end;

	record_retry_flag = "0"b;		/* Record is valid, no retry needed. */
	return;


	end  VALIDATE_RECORD;
/*	*/
CHECK_ERROR:  procedure;


/*	This internal procedure is called to find out what kind of error occurred
*	when reading one record.  There are the following possible results:
*	1.  End of File:	The error occurred because the record was an End of File.
*			A flag in  mstd  is turned ON to indicate the End of File.
*			If the record_retry_flag is ON, we will return an error code
*			telling the caller that a data record has been skipped.
*	2.  Retry:	The error is a kind we can retry.  The retry flag is set ON.
*			Retryable errors are: data alert (not blank_tape)  and  MPC
*			data alerts.
*	3.  Bad Error:	The error is "blank tape on read" or "bad density" or
*			some other error which cannot be retried.
*/

	statp = addr(tseg.hardware_status);	/* Get pointer to status we will test. */

	if   status.major = "0100"b		/* Is it an EOF? */
	     then do;			/* Yes. */
		mstd.flags.eof = "1"b;	/* Indicate End of File. */
		if   record_retry_flag	/* Was there a problem with prev record? */
		     then error_code = error_table_$improper_data_format;
		return;
	     end;

	record_retry_flag = "1"b;		/* Either we retry or return bad error code. */

	if   status.major = "0011"b		/* Device Data Alert? */
	     then do;			/* Yes, check substatus. */
		if   status.sub = "000010"b	/* Blank tape on read? */
		     then error_code = error_table_$blank_tape;
		return;
	     end;

	if   status.major = "1011"b		/* MPC Device Data Alert? */
	     then return;			/* Yes, we can retry this too. */

/*	We got an error which we can't retry.  Unless this is a density problem return
*	a device attention error code.
*/
	if   (status.major = "1010"b)  &	/* MPC Device Attention? */
	     (status.sub = "001000"b)		/* Incompatible Mode? */
	     then error_code = error_table_$bad_density;
	     else error_code = error_table_$device_attention;


	end  CHECK_ERROR;
/*  */
/* Read module for the Multics Standard Tape DSM.
   Initial coding by T. P. Skinner - Jan., 1969 */
/* completely rewritten for better error recovery and positioning
    techniques by Mike Grady 10/30/72 */
stream:	entry(cp, wksp, offset, nelem, nelemt, arg_status);
	c = cp;
	tsegp = addr(c -> tape_temp_seg.tseg);
	mstd_ptr = tseg.areap;
	ios_statp = addr(arg_status);			/* Ptr to return status. */
	arg_status = "0"b;
	if tseg.write_sw ^= 0 then do;		/* error if not right */
	     ios_status.code = error_table_$invalid_read;
	     return;
	end;

	temp_clok_id = "0"b;
	wp = addrel(wksp, offset);			/* take care of offset */
	nelemt, wrdcnt = nelem;			/* for now give all */
	if   mstd.flags.begin then go to init_read;

	if mstd.flags.bad_backup | mstd.flags.abs_record | mstd.flags.bad_record |
	   mstd.flags.bad_format then do;		/* if we got an error last time */

	     mstd.flags.bad_backup, mstd.flags.abs_record, mstd.flags.bad_record,
	     mstd.flags.bad_format = "0"b;			/* reset bits */

	     /* we will try to read ahead to next good rec - 10 times */

	     j = 0;				/* init counter */
hunt_loop:     tseg.sync, tseg.buffer_count = 1;		/* set some stuff for tdcm */
	     tseg.buffer_offset, tseg.command_count = 0;
	     call tdcm_$tdcm_iocall(tsegp, rcode);	/* call tdcm */
	     if tseg.completion_status = 2 then do;	/* any error ? */
		if j < 10 then do;
		     j = j + 1;
		     go to hunt_loop;
		end;
		else do;
		     mstd.flags.bad_record = "1"b;
		     go to g_next;
		end;
	     end;
	     cbp = ptr(c, tseg.bufferptr(1));		/* grab ptr to good rec */
	     mstd.head.uid = "0"b;			/* clear clock */
	     addr(mstd.head.uid)->x72.x = addr(cbp->mstr.head.uid)->x72.x; /* grab clock */
	     if mstd.head.uid < mstd.work.label_uid then do; /* check to make sure we have good rec */
	          mstd.flags.eod = "1"b;		/* no more good data */
		go to g_next;			/* report error */
	     end;
	     mstd.work.buf_pos = 8;			/* set to beginning */
	     mstd.trail.tot_rec = fixed(cbp->mstr.trail.tot_rec, 35);	/* set recno to current */
	     tseg.sync = 0;				/* reset sync mode */
	     ret_label = g_next;			/* if we get another error */
	     read_ahead = "1"b; copy_flag = "1"b;	/* set some switches so we start right */
	     n = 0; high_cnt = 32;			/* and set some error counters */
	     call read_next;			/* grab next rec - bp */
	     ret_label = accept_rec;			/* no error */
	     go to next;				/* process data */
	end;

	cbp = mstd.work.save_ptr_1;
	bp = mstd.work.save_ptr_2;
next:	if cbp->mstr.head.flags.eor then do;
	     goto set_end_code;
	end;
	rem = divide(fixed(cbp->mstr.head.data_bits_used, 18), 36, 17, 0) + 8 - mstd.work.buf_pos;
	if rem = 0 then go to g_next;
	if wrdcnt <= rem then do;
	     if wrdcnt = 0 then go to retn;
	     size = wrdcnt;				/* move data */
	     wp -> mover = addrel(cbp, mstd.work.buf_pos) -> mover;
	     mstd.work.buf_pos = mstd.work.buf_pos + wrdcnt;
	     go to retn;
	end;
	size = rem;				/* move as much data as we have in this buffer */
	wp -> mover = addrel(cbp, mstd.work.buf_pos) -> mover;
	wrdcnt = wrdcnt - rem;
	wp = addrel(wp, rem);			/* bump word count and ptr */

/* here to g next buffer */
g_next:	if mstd.head.flags.eot then do;
	     ios_status.phy_end_data = "1"b;
	     go to set_end_code;
	end;
	if mstd.head.flags.eor then go to set_end_code;		/* end of reel */
	if mstd.flags.eod then do;
	     ios_status.code = error_table_$data_improperly_terminated; /* no end of reel marks */
	     go to set_end_data;
	end;
	if mstd.flags.bad_backup then do;			/* couldnt backspace tape */
	     ios_status.code = error_table_$device_parity;
	     go to set_elements;
	end;
	if mstd.flags.abs_record then do;
	     ios_status.code=error_table_$improper_data_format;	/* probably should be better code */
	     go to set_elements;
	end;
	if mstd.flags.bad_record then do;
	     ios_status.code = error_table_$device_parity;
	     go to set_elements;
	end;
	if mstd.flags.bad_format then do;
	     ios_status.code = error_table_$improper_data_format;
	     go to set_elements;
	end;

supercede:				/* back here when next record is copy of current */
	cbp = bp;				/* set ptr of next to current */
	mstd.head.uid = "0"b;		/* cbp is current - bp is next */
	addr(mstd.head.uid)->x72.x = addr(cbp->mstr.head.uid)->x72.x; /* copy clock */
	mstd.trail.tot_rec = fixed(cbp->mstr.trail.tot_rec,35);

	high_cnt=32;				/* set number of  reads we will allow in repositioning */
	n = 0;					/* clear some error counters in main path */
	data_alerts = 0;				/* all other paths will increment them */

read_again:					/* here when we need to read again */
	skip_rec = "0"b;				/* indicates no skipped records due to bad read */
	copy_flag = "0"b;				/* no copy needed */
	read_ahead="0"b;				/* clear read_ahead bit */
	call read_next;				/* call int proc to get next buffer */

	substr(temp_clok_id,19,52) = substr(bp->mstr.head.uid,19,52); /* copy clock from id */
	if temp_clok_id < mstd.work.label_uid then go to invalid_1; /* clock wrong - invalid rec */

    /* record is valid check for position */

	if fixed(bp->mstr.trail.tot_rec,35) = (mstd.trail.tot_rec+1)
	     then go  to accept_rec;			/* record is right one */

	if bp->mstr.head.flags.set then
	     if bp->mstr.head.flags.repeat then
	          go to supercede;			/* record is repeat of last one */

	if   bp->mstr.head.uid = cbp->mstr.head.uid	/* If same ID treat as repeat record. */
	     then goto supercede;

	/* record is wrong one - assume tape mispositioned */

	temp = fixed(bp->mstr.trail.tot_rec,35);	/* save the record number for test */

	call two_bsr;				/* back two recs-physical(hard to do) */
	read_ahead="1"b;				/* we must read - we have moved tape */
	call read_next;				/* read the current record */

	/* if we can do this then we have a missing record number on the tape */

	if cbp->mstr.head.uid = bp->mstr.head.uid then	/* see if we backed up to current rec */
	     if temp < (mstd.trail.tot_rec+1) then do;	/* test to see if we have repeated recs(garbage) */

		/* this code is a kludge to get around an old tape dim bug
		   which left old records on the tape just before a tape mark
		   here we will attempt to skip over them */

kludge_loop:	call read_next;			/* grab next record */

		substr(temp_clok_id,19,52) = substr(bp->mstr.head.uid,19,52); /* copy clock */
		if temp_clok_id < mstd.work.label_uid then go to invalid_1; /* if bad we may not be where thought*/

		if fixed(bp->mstr.trail.tot_rec,35) = (mstd.trail.tot_rec+1) then	/* got it now */
		     go to accept_rec;		/* keep it */

		go to kludge_loop;			/* read a few more */

	     end;

	     else go to missing_rec;			/* even worse case of lost rec */

	/* tape must be mispositioned  */

	go to check_pos;				/* see if we can fix it up */

invalid_1:					/* here for invalid record */

	/* two cases here also - 1) we have reached end of good data without a good end
	    of reel mark or 2) we have been mispositioned again */

	call two_bsr;				/* back up to try to read curr */
	read_ahead="1"b;				/* we must read - we have moved tape */
	call read_next;				/* get the current again */
	if cbp->mstr.head.uid = bp->mstr.head.uid then do;
	     mstd.flags.eod = "1"b;		/* recs are same - end good data */
	     go to accept_rec;
	end;

	/* tape must be mispositioned */

twenty_bsrs:					/* back up alot */
	do j = 1 to 10;				/* 10 at a time */
	     tseg.command_queue(j) = bin("100110"b, 6);	/* BSR op */
	end;
	tseg.command_count=10;			/* 10 to do */
	bk_cnt=10;				/* save backup count for retry */
	tseg.sync=1;				/* have tdcm wait for this */

	call tdcm_$tdcm_iocall(tsegp, rcode);

	if tseg.completion_status = 2 then do;		/* error backing up */
	     call chk_back(bk_code);			/* check the backup */
	     if bk_code then do;			/* chk_back couldnt recover */
		mstd.flags.bad_backup = "1"b;
		go to accept_rec;
	     end;
	end;

	tseg.command_count=10;			/* do it again */
	bk_cnt=10;				/* save backup count for retry */
	call tdcm_$tdcm_iocall(tsegp, rcode);
	if tseg.completion_status = 2 then do;
	     call chk_back(bk_code);			/* check the backup */
	     if bk_code then do;			/* chk_back couldnt recover */
		mstd.flags.bad_backup = "1"b;
		goto accept_rec;
	     end;
	end;
	tseg.sync=0;				/* reset sync mode */
	read_ahead="1"b;				/* must read - moved tape */

read_alpha:					/* grab the record */
	call read_next;				/* go get it */

	substr(temp_clok_id,19,52) = substr(bp->mstr.head.uid,19,52); /* grab clock */

	/* check to set if we have valid recs yet */

	if temp_clok_id < mstd.work.label_uid then go to twenty_bsrs; /* not yet */

	if cbp -> mstr.head.uid = bp->mstr.head.uid	/* is it same as current */
	     then go to read_again;			/* if yes we are back where we started */

check_pos:					/* here to reposition a valid rec */
	if temp_clok_id < mstd.head.uid		/* where are we in respect to current */
	     then go to read_alpha;			/* we are before it go to read */

	if fixed(bp->mstr.trail.tot_rec,35) = mstd.trail.tot_rec then	/* is it same */
	     go to supercede;			/* yes we have later copy */

	go to twenty_bsrs;				/* not back enough yet */

set_bad_format:
	mstd.flags.bad_format = "1"b;
	go to accept_rec;

missing_rec:					/* here when we get missing rec */
	if skip_rec then mstd.flags.bad_record = "1"b;		/* we skipped one so we have bad parity */
	   else mstd.flags.abs_record = "1"b;		/* really missing ? */
	go to accept_rec;

accept_rec:
	if bp->mstr.head.flags.admin then do;		/* admin record ? */
	     if bp->mstr.head.flags.eor then 		/* is it end of reel */
		mstd.head.flags.eor = "1"b;		/* yes */
	     if bp->mstr.head.flags.eot then		/* is end of tape */
		mstd.head.flags.eot = "1"b;		/* yes */
	end;
	mstd.work.buf_pos = 8;				/* at beginning */
	go to next;

retn:	mstd.work.save_ptr_1 = cbp;			/* save ptrs */
	mstd.work.save_ptr_2 = bp;
	return;

set_end_code:	ios_status.code=error_table_$device_end;
set_end_data:	ios_status.log_end_data = "1"b;
set_elements:	nelemt = nelem - wrdcnt;
		return;



/* initialize to read the tape */

init_read:					/* here only once after attach to read */

	ret_label = g_next;				/* in case of error */
	high_cnt = 32;				/* set for first time */
	read_ahead = "1"b;				/* set so we do extra read ahead to get things going */
init_1:	cbp=addr(mstd.buffer(1));
	copy_flag="0"b;
	n=0;

	call read_next;				/* will return ptr to first buffer */
	if bp->mstr.head.flags.set then
	     if bp->mstr.head.flags.repeat then go to init_1;	/* we have repeated label */

init_2:	cbp = bp;					/* make it current one */
	copy_flag="0"b;				/* reset flag */
	n=0;

	call read_next;				/* grab next one also - bp */
	if bp->mstr.head.flags.set then
	     if bp->mstr.head.flags.repeat then go to init_2;	/* if this rec is repeated go back */

	ret_label = accept_rec;			/* for normal path */
	mstd.flags.begin="0"b;				/* not any more */

	go to next;				/* done */

/*  */
	/* this proc reads the next record(logical) */

read_next: proc;


again:						/* here to try again */
	n=n+1;
	if n > high_cnt then do;			/* to many tries */
	     if data_alerts > 0 then mstd.flags.bad_record = "1"b; /* bad record(hardware) */
	       else mstd.flags.bad_format = "1"b;	/* not Multics standard */
	     go to ret_label;
	end;

loop_wait:					/* here on some status codes to try again */
	if copy_flag then do;			/* save current */
	     size =  mstd.work.rec_word_size + 16;
	     addr(mstd.buffer(1)) -> mover = cbp -> mover;  /* copy data */
	     cbp=addr(mstd.buffer(1));		/* reset ptr */
	end;

	if read_ahead then do;			/* do we need to read to get started ? */
	     read_ahead = "0"b;			/* clear */
	     tseg.buffer_count = mstd.work.sub_buf_num;	/* set to do read */
	     tseg.buffer_offset=0;			/* at start of buffer */
	     call tdcm_$tdcm_iocall(tsegp, rcode);	/* Perhaps status should be checked here? */
	     mstd.work.curr_buf=1;
	end;

	copy_flag="1"b;				/* set flag to copy next time */

/* 	Check to see if we need to start reading in the next subset of buffers. */

	if   mod(mstd.work.curr_buf, mstd.work.sub_buf_num) = 1
	     then do;
		mstd.work.last_buf = tseg.buffer_offset;
		tseg.buffer_offset = mod((mstd.work.curr_buf + mstd.work.sub_buf_num - 1), mstd.work.tot_buf_num);
		call start_read;
	     end;


	/* have started read so we can process stuf in last buffers */

	if mstd.work.curr_buf = mstd.work.error_buf then do;	/* we got an error on this buffer */
	     mstd.work.error_buf = 0;			/* reset error */
	     read_ahead="1"b;			/* set to do read ahead next */
	     statp = addr(mstd.work.error_status);	/* Get pointer to IOM status. */
	     if status.major = "0001"b then go to loop_wait;	/* busy - wait */
	     if status.major = "0010"b then do;		/* device attention - out of ready */
		ios_status.code = error_table_$device_attention;
		goto set_elements;
	     end;
	     if status.major = "0011"b then do;		/* data alert */
		if status.sub & "000010"b then do;
		     mstd.flags.eod = "1"b;	/* blank tape end good data */
		     go to ret_label;
		end;
		data_alerts=data_alerts+1;
		skip_rec="1"b;			/* bad error we will skip this rec */
		go to again;
	     end;
	     if status.major = "1011"b then do;		/* MPC data alert */
		data_alerts = data_alerts+1;
		skip_rec = "1"b;
		goto again;
	     end;
	     if status.major ^= "0100"b then go to set_bad_format;/* unrecoverable error */
	     go to again;				/* must have been tm - read again */
	end;
	bp = ptr(c, tseg.bufferptr(mstd.work.curr_buf));	/* no error - set ptr to next rec */
	if   mstd.work.curr_buf < mstd.work.tot_buf_num	/* Up buffer index. */
	     then mstd.work.curr_buf = mstd.work.curr_buf + 1;
	     else mstd.work.curr_buf = 1;

	/* check data constants to see if this good rec */

	if bp->mstr.head.c1 ^= mstd.head.c1 then go to set_skipped;	/* no good */
	if bp->mstr.head.c2 ^= mstd.head.c2 then go to set_skipped;	/* no good */
	if bp->mstr.trail.c1 ^= mstd.trail.c1 then go to set_skipped;	/* no good */
	if bp->mstr.trail.c2 ^= mstd.trail.c2 then go to set_skipped;	/* no good */

	/* we could be at the label */

	if mstd.flags.begin then return;		/* if we are just setting up ignore this */

	if bp->mstr.head.flags.admin then
	     if bp->mstr.head.flags.label then do;	/* yes we have label */
	       high_cnt=10000;			/* set number of reads to get back to position */
	       go to read_alpha;			/* go check position */
	end;

	return;					/* all done */

set_skipped:
	skip_rec = "1"b;			/* we skipped one */
	go to again;

        end;			/* END of read_next */
	/*  */

	/* internal proc to do reads and error recovery */
start_read: proc;

dcl  tptr ptr,
    (indx, indx2, indx3, indx4) fixed bin,
     glick fixed bin;

	tseg.buffer_count = mstd.work.sub_buf_num;	/* always is one whole subset. */

	call tdcm_$tdcm_iocall(tsegp, rcode);		/* start io */

	/* if comp_stats 2 then previous io was in error _a_n_d this one was not done */

	if tseg.completion_status = 2 then do;		/* there was an error */
	     statp = addr(tseg.hardware_status);
	     if (status.major ^= "0011"b) &		/* bad error - no retry */
	        (status.major ^= "1011"b)
		then go to read_error;
	     do indx2 = 1 to 10;			/* we will try ten retrys */
		tseg.command_count=tseg.error_buffer;	/* we must backup this many times */
		do indx = 1 to tseg.error_buffer;	/* fill in op codes */
		     tseg.command_queue(indx) = bin("100110"b,6); /* set to do BSR */
		end;
		bk_cnt = tseg.command_count;		/* save count */
		tseg.buffer_count = 0;		/* reset to be sure */
		tseg.sync = 1;			/* do sync io */
		call tdcm_$tdcm_iocall(tsegp, rcode);	/* go do it */
		if tseg.completion_status = 2 then do;	/* bad backspace */
		     call chk_back(bk_code);		/* did backspace go ok */
		     if bk_code then do;		/* no - no recovery */
			mstd.flags.bad_backup = "1"b;	/* set sw so we know */
			go to ret_label;
		     end;
		end;
		tseg.buffer_offset=mstd.work.last_buf;	/* set to last time */
		tseg.buffer_count = mstd.work.sub_buf_num; /* same as always */
		call tdcm_$tdcm_iocall(tsegp, rcode);	/* go to it */
		tseg.sync = 0;			/* reset state of things */
		if tseg.completion_status ^= 2 then go to read_again; /* good try read next bunch */
	     end;					/* end of retry loop */

read_error:					/* retry failed set codes */
	     mstd.work.error_buf=tseg.error_buffer+mstd.work.last_buf;
	     mstd.work.error_status = tseg.hardware_status;	/* set code also */
	     if addr(mstd.work.error_status)->status.major = "0100"b then do;	/* tape mark do ck sums on buffers we got */
		glick = tseg.error_buffer-1;		/* number buffers we got */
		if glick >= 1 then go to ck_sums_st;	/* go only if we got some */
	     end;
	     return;

	end;

	glick = mstd.work.sub_buf_num;		/* standard path = one subset. */

ck_sums_st: indx4 = 0;				/* counter of retrys on chksums */

ck_sums:	do indx = 0 to glick-1;			/* this computes on last subset */

	     tptr = ptr(c, tseg.bufferptr(mstd.work.last_buf+indx+1)); /* get ptr */
	     call tape_checksum_(tptr, addr(tck));	/* compute magic number */

	     if tck ^= tptr->mstd.head.checksum then do;	/* summs do not agree */
		tseg.buffer_count=0;
		tseg.command_count=0;
		call tdcm_$tdcm_iocall(tsegp, rcode);	/* quiet all previous io */

		if tseg.completion_status = 2 then indx2 = tseg.error_buffer+mstd.work.sub_buf_num;
		     else if tseg.completion_status = 1
			then indx2 = mstd.work.sub_buf_num * 2;  /* indx2 is how far to backup. */
			else indx2 = glick+1;

		do indx3 = 1 to 10;			/* 10 retrys to reread data */

		     tseg.command_count=indx2;	/* backup */
		     bk_cnt = indx2;		/* save count */
		     do indx2 = 1 to tseg.command_count;
			tseg.command_queue(indx2)= bin("100110"b, 6);
		     end;
		     tseg.sync = 1;			/* set sync mode */

		     call tdcm_$tdcm_iocall(tsegp, rcode);
		     if tseg.completion_status = 2 then do; /* error on backspaces */
			call chk_back(bk_code);	/* check backup */
			if bk_code then do;		/* no recovery */
			     mstd.flags.bad_backup = "1"b;
			     go to ret_label;
			end;
		     end;
		     tseg.buffer_count = mstd.work.sub_buf_num;/* set to one buffer subset */
		     tseg.buffer_offset = mstd.work.last_buf; /* reset to last buffers */
		     call tdcm_$tdcm_iocall(tsegp, rcode);
		     tseg.sync=0;			/* reset sync mode */
		     if tseg.completion_status ^= 2 then go to loop_ck;

		     indx2 = tseg.error_buffer;	/* set num backups */
		     if addr(tseg.hardware_status)->status.major = "0100"b then /* is it TM? */
			go to loop_ck;			/* yes */
		end;

	          go to  read_error;				/* couldnt reread for ck sum */

	     end;

	end;

	return;					/* check sums were correct */

loop_ck:	indx4=indx4 + 1;				/* count number of retrys on ck sums */
	if indx4 < 10 then go to ck_sums;		/* try it again */
	tseg.error_buffer = indx+1;			/* set buffer on which cksum failed */
	statp = addr(tseg.hardware_status);
	status.major = "0011"b;			/* Data Alert */
	status.sub = "000100"b;			/* Parity */
	go to read_error;				/* return it */

      end;		/* END of start read */
	/*  */
	/* proc to backup 2 physical records from current logical position
	    this is harder than you think */

two_bsr:	proc;


dcl  ti fixed bin,
     tcb fixed bin;


	tseg.command_count=0;
	tseg.buffer_count=0;
	call tdcm_$tdcm_iocall(tsegp, rcode);		/* quiet all previous i/o */
	if tseg.completion_status = 2 then		/* check io */
	     if addr(tseg.hardware_status)->status.major = "0100"b then
		ti = tseg.error_buffer - 1;		/* ignore tm */
	     else ti = tseg.error_buffer;		/* whole thing */
	else ti = mstd.work.sub_buf_num;		/* no error */

	tcb = mstd.work.curr_buf - mstd.work.sub_buf_num;	/* set tcb to num of buffer cbp pts to */
						/* this is the record we wish to reread */
	if tcb < 1 then tcb = tcb + mstd.work.tot_buf_num;/* correct for ring effect */
	if   mod(tcb, mstd.work.sub_buf_num) = 0	/* if at boundary add susset. */
	     then ti = ti + mstd.work.sub_buf_num;
	tcb = mod(tcb-1, mstd.work.sub_buf_num);	/* get index into current subset. */
	tcb = mstd.work.sub_buf_num -tcb;		/* number to backup */

	tcb = tcb + ti;				/* plus extra */
	do ti = 1 to tcb;				/* fill in ops */
	     tseg.command_queue(ti) = bin("100110"b, 6);
	end;
	tseg.command_count=tcb;			/* set count */
	bk_cnt=tcb;
	tseg.sync = 1;				/* tell tdcm to wait */

	call tdcm_$tdcm_iocall(tsegp, rcode);		/* do it */

	if tseg.completion_status = 2 then do;
	     call chk_back(bk_code);			/* check backup error */
	     if bk_code then do;			/* no recovery */
		mstd.flags.bad_backup ="1"b;
		go to ret_label;
	     end;
	end;

	tseg.sync=0;				/* reset to async mode */

	return;

    end;

	/*  */

/* internal procedure to recover from backing up over tape marks */

chk_back: proc(sw);

dcl  sw bit(1),
    (bi, bj) fixed bin;


	sw = "0"b;				/* clear sw */
	statp = addr(tseg.hardware_status);

	if status.major ^= "0100"b then do;		 /* not a tape mark */
	     if status.major = "0101"b then return;		
	     sw = "1"b;				/* real trouble */
	     return;
	end;

	bi = bk_cnt - tseg.error_buffer + 1;		/* get number of backups left to do */
	do bj = 1 to bi;
	     tseg.command_queue(bj)=bin("100110"b, 6);	/* set OP code */
	end;
	tseg.command_count=bi;			/* set count */
	call tdcm_$tdcm_iocall(tsegp, rcode);

	if tseg.completion_status = 2 then
	     if (status.major = "0101"b) |
	        (status.major = "0100"b) then return;
		else sw="1"b;	/* bad error - not another tm */

	return;

end;

/* end of tape_xmt_ */

	end   tape_read_;
