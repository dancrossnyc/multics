/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

tape_detach_:  procedure;


/*	This procedure is part of the Multics standard tape DIM:  tape_.
*	Originally coded by  Bill Silver  on 01/22/74.
*
*	This module replaces the old tape_xtach_$detach entry.  It contains entries
*	for closing a tape and for detaching a tape drive.
*/


/*		ARGUMENTS			*/

dcl	arg_error_code	fixed bin(35),	/* (O) Standard system error code. */
	arg_ioname2	char(*),		/* (I) Tape reel ID. */
	arg_status	bit(72) aligned,	/* (O) Standard ios_ error status. */
	arg_tsegp		ptr,		/* (I) Pointer to TSEG. */
	arg_tts_ptr	ptr,		/* (I) Pointer to Temp Tape Seg. */
	arg_type		char(*);		/* (I) Not used. */


/*		AUTOMATIC  DATA		*/

dcl	eot_flag		bit(1),		/* ON => tape at End of Tape. */
	error_code	fixed bin(35),	/* Standard system error code. */
	i		fixed bin,
	save_code		fixed bin(35);	/* Used to play with error code. */


/*		EXTERNAL ENTRIES		*/

dcl     (	addr, string )  builtin;

dcl     (	error_table_$device_end,
	error_table_$io_still_assnd )  external  fixed bin(35);

dcl	hcs_$delentry_seg		entry  (ptr, fixed bin(35)),
	tdcm_$tdcm_detach		entry  (ptr, fixed bin(35)),
	tdcm_$tdcm_iocall		entry  (ptr, fixed bin(35)),
	ipc_$delete_ev_chn		entry  (fixed bin(71), fixed bin(35)),
	convert_ipc_code_		entry  (fixed bin(35)),
	tape_write_$eof		entry  (ptr, fixed bin(35)),
	tape_write_$record		entry  (ptr, ptr, fixed bin, fixed bin(35));
/*	*/
%include tape_temp_seg;





%include ios_sdb;
/*	*/
%include tseg;
/*	*/
%include mstd;
/*	*/
%include mstr;
/*	*/
%include ios_status;
/*	*/
detach:  entry  (arg_tts_ptr, arg_ioname2, arg_type, arg_status);


/*	This entry is called when the user wants to detach a tape drive.
*	Currently it is assumed that the tape is not closed.  This entry will
*	always close the tape before detaching it.  Once the tape has been closed
*	detaching involves the following steps:
*	1.  Rewinding and unloading the tape reel.
*	2.  Calling ring 0 to unassign the tape drive.
*	3.  Deleting the event channel that was created for this drive.
*	4.  Deleting the TSEG that was created for this drive.
*/
	tts_ptr = arg_tts_ptr;		/* Initialize pointers, etc.. */
	sdb_ptr = addr(tape_temp_seg.sdb);
	tsegp = addr(tape_temp_seg.tseg);
	mstd_ptr  = tseg.areap;
	ios_statp = addr(arg_status);
	arg_status = "0"b;
	save_code,
	error_code = 0;

	if   arg_ioname2 ^= ""		/* Check to see if we are detaching the right reel. */
	     then if   arg_ioname2 ^= sdb.name_list.name_string
		     then do;
			save_code = error_table_$io_still_assnd;
			goto DETACH_RETURN;
		     end;
	call CLOSE;			/* Got right tape reel.  Now close tape. */
	call SAVE_CODE;

	tseg.buffer_count,			/* Flush out any existing status. */
	tseg.command_count = 0;
	call tdcm_$tdcm_iocall (tsegp, error_code);
	call SAVE_CODE;

	call tdcm_$tdcm_detach (tsegp, error_code);
	call SAVE_CODE;

	call ipc_$delete_ev_chn (tseg.ev_chan, error_code);
	if   error_code ^= 0		/* Was there an error deleting event channel? */
	     then do;			/* YES, convert non standart error code. */
		call convert_ipc_code_ (error_code);
		call SAVE_CODE;
	     end;

	call hcs_$delentry_seg (tts_ptr, error_code);
	call SAVE_CODE;

	ios_status.detach = "1"b;		/* Now that TSEG deleted and everything else
					*  done, tell user that drive has been detached. */

DETACH_RETURN:
	ios_status.code = save_code;		/* Return our saved code. */
	return;
/*	*/
close:	entry  (arg_tsegp, arg_error_code);


/*	This entry is called to close a tape.  Currently it is called only
*	from within tape_.
*/

	tsegp = arg_tsegp;			/* Initialize pointers. */
	mstd_ptr = tseg.areap;
	error_code = 0;

	call CLOSE;			/* This is all we do. */

	arg_error_code = error_code;

	return;
/*	*/
SAVE_CODE:  procedure;

/*	Called to save first error code that is not zero. */

	if   error_code = 0
	     then return;

	if   save_code = 0
	     then save_code = error_code;

	end  SAVE_CODE;
/*	*/
CLOSE:	procedure;


/*	This procedure is called to close a tape.  The concept of closing a tape is not
*	precisely defined.  In general, however, it involves all the cleanup tasks
*	that must be performed before a tape is rewound.  Once a tape has been closed,
*	it may be rewound and then detached or opened again.
*	Note, there is nothing to be done when closing a tape that has been opened for reading.
*	When closing a tape that has been opened for writing we must do the following:
*	1.  Write out all currently buffered output.
*	2.  Write an  EOF record.
*	3.  Write an  End of Reel record.  This records contains all PAD words.
*	4.  Write two EOF records
*	Note, when writing this end of tape information we must ignore all device end errors.
*/


	if   tseg.write_sw = 0		/* Is tape opened for reading? */
	     then return;			/* YES, nothing to do to close it. */

	if   mstd.head.flags.eot		/* Are we at the End of Tape? */
	     then eot_flag = "1"b;
	     else eot_flag = "0"b;

	string(mstd.head.flags) = "0"b;	/* Turn OFF all flags. */
	call tape_write_$eof(tsegp,error_code);	/* This call will flush all buffered output. */
	if   (error_code ^= 0)  &
	     (error_code ^= error_table_$device_end)
	     then return;

	mstd.head.flags.set,
	mstd.head.flags.eot = eot_flag;	/* Set EOT flag if appropriate. */
	mstd.head.flags.admin,
	mstd.head.flags.eor = "1"b;		/* Turn ON  End of Reel  flag. */
	call tape_write_$record (tsegp, addr(mstd.trail.pad_pattern), 1, error_code);
	if   (error_code ^= 0)  &
	     (error_code ^= error_table_$device_end)
	     then return;

	string(mstd.head.flags) = "0"b;	/* Make sure all flags are OFF. */
	do   i = 1 to 2;			/* Write two EOF records at end of tape. */
	     call tape_write_$eof (tsegp, error_code);
	     if	(error_code ^= 0)  &
		(error_code ^= error_table_$device_end)
		then return;
	end;

	error_code = 0;			/* Getting this far => no error. */

	end  CLOSE;


	end  tape_detach_;
