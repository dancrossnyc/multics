/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

g115_util_: proc;

/* utilities procedure for the g115 DCM */

/* coded 11/8/73 by Mike Grady */

/* modified 06/10/75 by Bob Adsit to move line_control to MCS/355 */

dcl  a_ptr ptr,
     dev_index fixed bin,
     icode fixed bin (35),
     code fixed bin (35);

dcl  int_data_ptr ptr int static;
dcl  head_data_ptr ptr int static init (null);
dcl  null builtin;

dcl (save_trim, loopsw) bit (1);

dcl  ipc_$block entry (ptr, ptr, fixed bin (35));

dcl 1 event_info aligned,				/* wakeup information */
    2 channel_id fixed bin (71) aligned,		/* channel over which to send wakeup */
    2 message char (8) aligned,			/* event message */
    2 sender bit (36) aligned,			/* process id of sending process */
    2 origin,
      3 dev_signal bit (18) unaligned,			/* ON if event occurred as result of i/o interrupt */
      3 ring bit (18) unaligned,			/* sender's validation level */
    2 data_ptr ptr aligned;				/* pointer to answer service data (answer table) */

dcl (acard, card varying, rcard varying) char (80),
     i fixed bin;

dcl (lower_case init ("abcdefghijklmnopqrstuvwxyz"),
     upper_case init ("ABCDEFGHIJKLMNOPQRSTUVWXYZ") ) char (26) int static;

dcl  g115_io_$read entry (fixed bin, ptr, fixed bin, fixed bin, fixed bin, fixed bin (35));
dcl  error_table_$device_end fixed bin (35) ext,
     error_table_$net_timeout fixed bin (35) ext;
	
%include g115_data;
/*  */

get_ptr:	entry returns (ptr);

/* entry to set the data_ptr */

	return (int_data_ptr);			/* thats it */


set_ptr:	entry (a_ptr);

/* entry to init the data_ptr */

	int_data_ptr = a_ptr;			/* copy to int static */

	return;

block:	entry (code);

	data_ptr = int_data_ptr;
	call ipc_$block (addr (g115_data.wait_list), addr (event_info), code);
	if event_info.message = "alarm___" then code = error_table_$net_timeout;
		else code = 0;
	return;


get_data_ptr: entry (dev_index) returns (ptr);
						/* entry to search the g115_data structure chain  */
	data_ptr = head_data_ptr;
	do while (data_ptr ^= null);
	     if g115_data.twx = dev_index then return (data_ptr); /* found dev_index structure */
	     data_ptr = g115_data.next_data_ptr;	/* advance to next structure */
	end;
	return (null);				/* no structure found for dev_index */

link_data_ptr: entry (a_ptr);

/* entry to add a new g115_data structure to the chain */

	data_ptr = a_ptr;
	g115_data.next_data_ptr = head_data_ptr;	/* set forward link in chain */
	head_data_ptr = data_ptr;
	return;


unlink_data_ptr: entry (dev_index) returns (ptr);

/* entry to remove g115_data structure from the chain */

	data_ptr = head_data_ptr;
	do while (data_ptr ^= null);
	     if g115_data.twx = dev_index then do;	/* found dev_index structure */
		if head_data_ptr = data_ptr		/* head of chain */
		then head_data_ptr = g115_data.next_data_ptr; /* must be adjusted */
		else int_data_ptr -> g115_data.next_data_ptr = g115_data.next_data_ptr; /* preserve forward link */
		return (data_ptr);
	     end;
	     int_data_ptr = data_ptr;
	     data_ptr = g115_data.next_data_ptr;	/* advance to next structure */
	end;
	return (null);				/* no structure found for dev_index */


conv_card: entry (rcard);

/* entry to convert one card image to lower case and do backslash
   escape processing. also appends new_line */

	save_trim = g115_data.trim;			/* save trim mode */
	g115_data.trim = "0"b;			/* no trim wanted */
	loopsw = "1"b;
	do while (loopsw);
	     call g115_io_$read (g115_data.twx, addr (acard), 0, 80, i, icode);
	     if icode ^= error_table_$device_end then loopsw = "0"b;
	end;
	g115_data.trim = save_trim;
	if g115_data.no_block & i = 0 then return;	/* none yet */
	i = 80 - verify (reverse (acard), " ") + 1;	/* find first non blank */
	card = substr (acard, 1, i);			/* copy interesting part of card */
	card = translate (card, lower_case, upper_case);	/* change all upper case to lower */

	i = index (card, "\");			/* look for upper case escapes */
	do while (i > 0);				/* loop processing all of them */
	     card = substr (card, 1, i-1) || translate (substr (card, i+1, 1), upper_case, lower_case) ||
			substr (card, i+2);		/* copy card dropping "\" and changeing char */
	     i = index (card, "\");			/* look for next one */
	end;

	rcard = card || "
";						/* copy to return arg, adding nl */
	return;

     end;
