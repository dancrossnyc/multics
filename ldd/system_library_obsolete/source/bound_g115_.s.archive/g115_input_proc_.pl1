/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

g115_input_proc_: proc (slot_ptr, bufp, nelem, nelemt, code);

/* input processor, rewritten 8/14/75 by Mike Grady */
/* modified by Bob Franklin 04/10/77 to fix bugs */

dcl (i, j, k, ct, uct, inelem, nelem, nelemt) fixed bin,
     code fixed bin (35),
    (bufp, rbufp) ptr,
     bchars char (82) based (addr (g115_msg.text (g115_hdr.read_offset))),
     ccard char (80) varying init ((80)" "),
     card char (80) varying init ((80)" "),
     blanks char (80) init ((80)" "),
     outstr char (1000) based (rbufp),
     chara (0:1000) char (1) based (rbufp);

dcl (rs, cc, char) char (1),
     nl char (1) init ("
");

dcl  debug entry options (variable);
dcl  g115_util_$get_ptr entry returns (ptr);

%include g115_data;
%include g115_msg;
%include g115_stat;


dcl  g115_ascii_to_bits (0:63) bit (9) unaligned int static init (
     "000010000"b, "000111111"b, "000111110"b, "000001011"b,
     "000101011"b, "000111100"b, "000011010"b, "000101111"b,
     "000011101"b, "000101101"b, "000101100"b, "000110000"b,
     "000111011"b, "000101010"b, "000011011"b, "000110001"b,
     "000000000"b, "000000001"b, "000000010"b, "000000011"b,
     "000000100"b, "000000101"b, "000000110"b, "000000111"b,
     "000001000"b, "000001001"b, "000001101"b, "000101110"b,
     "000011110"b, "000111101"b, "000001110"b, "000001111"b,
     "000001100"b, "000010001"b, "000010010"b, "000010011"b,
     "000010100"b, "000010101"b, "000010110"b, "000010111"b,
     "000011000"b, "000011001"b, "000100001"b, "000100010"b,
     "000100011"b, "000100100"b, "000100101"b, "000100110"b,
     "000100111"b, "000101000"b, "000101001"b, "000110010"b,
     "000110011"b, "000110100"b, "000110101"b, "000110110"b,
     "000110111"b, "000111000"b, "000111001"b, "000001010"b,
     "000011111"b, "000011100"b, "000100000"b, "000111010"b);

	data_ptr = g115_util_$get_ptr ();
	unspec (rs) = g115_stat.rs_char;
	unspec (cc) = g115_stat.comp_char;
	nelemt, code = 0;
	rbufp = bufp;
	inelem = nelem;

	do while (g115_hdr.full_cc > 0);		/* loop reading all in message */
	     i = index (bchars, rs);			/* find rs at end of card */
	     ccard = substr (bchars, 2, i-2);		/* take all between mc and rs */
	     g115_hdr.read_offset = g115_hdr.read_offset + i; /* skip over that */
	     card = "";

	     j = 1;				/* init ptr to packed card */
	     k = index (ccard, cc);			/* see if any compression chars in card */
	     do while (k > 0);			/* loop de-compressing card */
		card = card || substr (ccard, j, k-1);	/* copy all up to compression char */
		char = substr (ccard, j+k-2, 1);	/* pickup repeated char */
		uct = fixed (unspec (substr (ccard, j+k, 1)), 17); /* get count */
		uct = fixed (g115_ascii_to_bits (uct - 32), 17); /* get real count */
		do ct = 1 to uct;			/* loop unpacking chars */
		     card = card || char;		/* unpack a char */
		end;
		j = j + k + 1;			/* bump ptr up to next virgin piece */
		k = index (substr (ccard, j), cc);	/* look for next cc */
	     end;
	     card = card || substr (ccard, j, i-2-j+1);	/* copy remainder of card */
	     card = card || substr (blanks, 1);
	     g115_hdr.full_cc = g115_hdr.full_cc - 80;	/* decrement card count in message */

	     if substr (card, 1, 6) = "***EOF" then do;	/* found eof marker card */
		code = 2;				/* set funny code */
		return;
	     end;

	     if g115_data.trim then			/* trimming blanks off end then */
		ct = 80 - verify (reverse (card), " ") + 1; /* get real count for card */
	     else ct = 80;				/* full card to be returned */
	     if inelem < ct + 1 then do;		/* not enough room to return all */
		ct = inelem;
		substr (outstr, 1, ct) = substr (card, 1, ct);
		nelemt = nelemt + ct;
		return;
	     end;
	     substr (outstr, 1, ct + 1) = substr (card, 1, ct) || nl; /* return whats wanted plus nl */
	     nelemt = nelemt + ct + 1;		/* amt returned */
	     inelem = inelem - ct - 1;		/* amt left in buffer */
	     rbufp = addr (chara (ct+1));		/* bump ptr */
	     if inelem = 0 then return;
	end;

	code = 1;					/* still need more input from 115 */
	return;

     end;
