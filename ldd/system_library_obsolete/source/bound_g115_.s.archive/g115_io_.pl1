/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

g115_io_: proc;

/* This procedure handles the logical reading and writing of data
   to the g115 remote computer. */

/* Coded 5/2/74 by Mike Grady */

/* modified 06/10/75 by Bob Adsit to move line_control to MCS/355 */

/* modified 04/10/77 by Bob Franklin to: fix bugs, add upper_case only
   conversion table,turn off teleprinter, reset pci.pos,etc */

dcl (twx, i, offset, nelem, nelemt, nel, nelt, neltx) fixed bin,
    (wp, readp, curp, nextp, msg_ptr, to_ptr, from_ptr, wksp) ptr,
    (msg_len, inelem, tidx) fixed bin,
     code fixed bin (35),
    (fc, mc) bit (9),
     nrdp (0:1000) char (1) based (readp) unal,
     bchr char (neltx) based unal;

dcl  g115_message_$read entry (ptr, fixed bin, fixed bin (35)),
     g115_message_$write entry (ptr, fixed bin (35)),
     g115_input_proc_ entry (ptr, ptr, fixed bin, fixed bin, fixed bin (35)),
     prt_conv_ entry (ptr, fixed bin, ptr, fixed bin, ptr),
     g115_util_$get_ptr entry returns (ptr),
     g115_util_$block entry (fixed bin (35));

dcl (null, rel, bool) builtin;

dcl (error_table_$not_attached,
     error_table_$device_end,
     error_table_$unable_to_do_io) fixed bin (35) ext;

dcl  temp_line (40) fixed bin,
     temp_count fixed bin,
     temp_filled bit (1) init ("0"b);

dcl  string (128) char based (wksp) unal;
dcl  string1 (128) fixed bin (8) unal based;
dcl (left_to_print, nelt_to_print, j) fixed bin;
dcl  wksp1 ptr;
dcl  buffer_print char (4000);

dcl  tptr ptr;

dcl  table (0:127) bit (9) unaligned int static init (
     "000000000"b,					/* 000 null */
     "000000001"b,					/* 001 soh */
     "000000010"b,					/* 002 stx */
     "000000011"b,					/* 003 etx */
     "000000100"b,					/* 004 eot */
     "000000101"b,					/* 005 enq */
     "000000110"b,					/* 006 ack */
     "000000111"b,					/* 007 bel */

     "000001000"b,					/* 010 bc  */
     "000001001"b,					/* 011 ht  */
     "000001010"b,					/* 012 nl  */
     "000001011"b,					/* 013 vt  */
     "000001100"b,					/* 014   */
     "000001101"b,					/* 015 cr  */
     "000001110"b,					/* 016   */
     "000001111"b,					/* 017  */

     "000010000"b,					/* 020 dle */
     "000010001"b,					/* 021 dc1 */
     "000010010"b,					/* 022 dc2 */
     "000010011"b,					/* 023 dc3 */
     "000010100"b,					/* 024 dc4 */
     "000010101"b,					/* 025 nak */
     "000010110"b,					/* 026 syn */
     "000010111"b,					/* 027 etb */

     "000011000"b,					/* 030 can */
     "000011001"b,					/* 031 em  */
     "000011010"b,					/* 032 sub */
     "000011011"b,					/* 033 esc */
     "000011100"b,					/* 034 fs  */
     "000011101"b,					/* 035 gs  */
     "000011110"b,					/* 036 rs  */
     "000011111"b,					/* 037    */

     "000100000"b,					/* 040 blank */
     "000100001"b,					/* 041 ! */
     "000100010"b,					/* 042 " */
     "000100011"b,					/* 043 pound sign */
     "000100100"b,					/* 044 dollar */
     "000100101"b,					/* 045 percent */
     "000100110"b,					/* 046 ampersand */
     "000100111"b,					/* 047 accent */

     "000101000"b,					/* 050 ( */
     "000101001"b,					/* 051 ) */
     "000101010"b,					/* 052 asterisk */
     "000101011"b,					/* 053 plus */
     "000101100"b,					/* 054 comma */
     "000101101"b,					/* 055 minus */
     "000101110"b,					/* 056 period */
     "000101111"b,					/* 057 slash */

     "000110000"b,					/* 060 zero */
     "000110001"b,					/* 061 1 */
     "000110010"b,					/* 062 2 */
     "000110011"b,					/* 063 3 */
     "000110100"b,					/* 064 4 */
     "000110101"b,					/* 065 5 */
     "000110110"b,					/* 066 6 */
     "000110111"b,					/* 067 7 */

     "000111000"b,					/* 070 8 */
     "000111001"b,					/* 071 9 */
     "000111010"b,					/* 072 colon */
     "000111011"b,					/* 073 semicolon */
     "000111100"b,					/* 074 less than */
     "000111101"b,					/* 075 = */
     "000111110"b,					/* 076 > */
     "000111111"b,					/* 077 question */

     "001000000"b,					/* 100 at sign */
     "001000001"b,					/* 101 A */
     "001000010"b,					/* 102 B */
     "001000011"b,					/* 103 C */
     "001000100"b,					/* 104 D */
     "001000101"b,					/* 105 E */
     "001000110"b,					/* 106 F */
     "001000111"b,					/* 107 G */

     "001001000"b,					/* 110 H */
     "001001001"b,					/* 111 I */
     "001001010"b,					/* 112 J */
     "001001011"b,					/* 113 K */
     "001001100"b,					/* 114 L */
     "001001101"b,					/* 115 M */
     "001001110"b,					/* 116 N */
     "001001111"b,					/* 117 O */

     "001010000"b,					/* 120 P */
     "001010001"b,					/* 121 Q */
     "001010010"b,					/* 122 R */
     "001010011"b,					/* 123 S */
     "001010100"b,					/* 124 T */
     "001010101"b,					/* 125 U */
     "001010110"b,					/* 126 V */
     "001010111"b,					/* 127 W */

     "001011000"b,					/* 130 X */
     "001011001"b,					/* 131 Y */
     "001011010"b,					/* 132  Z */
     "001011011"b,					/* 133 [ */
     "001011100"b,					/* 134 slash */
     "001011101"b,					/* 135 ] */
     "001011110"b,					/* 136 up arrow */
     "001011111"b,					/* 137 _ */

     "000111111"b,					/* 140 = 077 = ? */
     "001000001"b,					/* 141 = 101 = A */
     "001000010"b,					/* 142 = 102 = B */
     "001000011"b,					/* 143 = 103 = C */
     "001000100"b,					/* 144 = 104 = D */
     "001000101"b,					/* 145 = 1-5 = E */
     "001000110"b,					/* 146 = 106 = F */
     "001000111"b,					/* 147 = 107 = G */

     "001001000"b,					/* 150 = 110 = H */
     "001001001"b,					/* 151 = 111 = I */
     "001001010"b,					/* 152 = 112 = J */
     "001001011"b,					/* 153 = 113 = K */
     "001001100"b,					/* 154 = 114 = L */
     "001001101"b,					/* 155 = 115 = M */
     "001001110"b,					/* 156 = 116 = N */
     "001001111"b,					/* 157 = 117 = O */


     "001010000"b,					/* 160 = 120 = P */
     "001010001"b,					/* 161 = 121 = Q */
     "001010010"b,					/* 162 = 122 = R */
     "001010011"b,					/* 163 = 123 = S */
     "001010100"b,					/* 164 = 124 = T */
     "001010101"b,					/* 165 = 125 = U */
     "001010110"b,					/* 166 = 126 = V */
     "001010111"b,					/* 167 = 127 = W */

     "001011000"b,					/* 170 = 130 = X */
     "001011001"b,					/* 171 = 131 = Y */
     "001011010"b,					/* 172 = 132 = Z */
     "000101000"b,					/* 173 = 050 = ( */
     "001011110"b,					/* 174 = 136 = up arrow */
     "000101001"b,					/* 175 = 051 = ) */
     "000111111"b,					/* 176 = 077 = ? */
     "000111111"b					/* 177 = 077 = ? */
     );

%include g115_data;
%include g115_msg;
%include g115_stat;


write:	entry (twx, wp, offset, nelem, nelemt, code);

	code, nelemt = 0;				/* init return stuff */
	if nelem = 0 then return;

	data_ptr = g115_util_$get_ptr ();		/* get data ptr */
	if g115_data.twx ^= twx then do;		/* error, wrong device  */
	     code = error_table_$not_attached;
	     return;
	end;

	pcip = addr (g115_data.conv_info);
	if g115_data.teleprinter then do;		/* telelprinter in use now */
	     pci.pos = 0;				/* darn trailer leaves it at 132 */
	     mc = g115_stat.teleprinter_mc;		/* set media code */
	     fc = g115_stat.special_c;		/* set format code to special compressed */
	end;
	else if g115_data.write_compress then do;	/* wants compressed records */
	     g115_data.write_split = "0"b;		/* and not split records */
	     fc = g115_stat.info_ns_c;		/* set format code to information no split compressed */
	     if g115_data.punch then mc = g115_stat.punch_mc;
	     else mc = g115_stat.printer_mc;
	end;
	else do;
bad_type:	     code = error_table_$unable_to_do_io;
	     return;
	end;

	wksp = addr (wp -> nrdp (offset));
	tptr = addr (table);			/* set to convert */
	i = 0;
	left_to_print = nelem;
loop:
	if left_to_print > 0 then do;			/* process until done */
	     wksp1 = addr (buffer_print);
	     if left_to_print > 4000 then
		nelt_to_print = 4000;		/* don't print more than buffer size */
	     else nelt_to_print = left_to_print;
	     do j = 1 to nelt_to_print;
		wksp1 -> string (j) = wksp -> string (i+j);
	     end;
	     left_to_print = left_to_print - nelt_to_print; /* keep counts up-to-date */
	     i = i + nelt_to_print;
	     inelem = nelt_to_print;
	     curp = addr (g115_data.output_buffer1);	/* get addr of first  output buffer */
	     nextp = null;				/* no next buffer yet */

	     call fill_buffer (curp, code);		/* fill first buffer */
	     if code ^= 0 then return;		/* must be error, return */

next_write:					/* loop here to write next buffer */
	     if curp = null then go to finished_write;	/* no next, all done */
	     call g115_message_$write (curp, code);	/* write the buffer */
	     if code ^= 0 then return;		/* any error, punt  */

	     nextp = switch_buffers (curp);		/* get ptr to new buffer  */
	     call fill_buffer (nextp, code);		/* fill this buffer */
	     if code = 1 then nextp = null;		/* no more data to write */
	     else if code ^= 0 then return;		/* must be error */

	     curp = nextp;				/* set next to current */
	     nextp = null;				/* next is gone */
	     go to next_write;			/* loop back and write */

finished_write:
	     go to loop;
	end;
	g115_data.teleprinter = "0"b;			/* turn off teleprinter */
	nelemt = nelem;
	code = 0;
xit:	return;

read:	entry (twx, wp, offset, nelem, nelemt, code);

	code, nelemt = 0;				/* init return stuff */
	nel = nelem;
	nelt = 0;
	readp = wp;

	if nelem = 0 then return;			/* nothing to do for now */

	data_ptr = g115_util_$get_ptr ();		/* get the data ptr */

	if g115_data.twx ^= twx then do;		/* not this one today */
	     code = error_table_$not_attached;
	     return;
	end;

	msg_ptr = addr (g115_data.input_buffer);	/* get pointer to buffer */
	if msg_ptr -> g115_hdr.full_cc ^= 0 then go to process;

next_read:					/* loop here reading data */
	if g115_data.no_block then do;		/* answering  service read */
	     call g115_message_$read (msg_ptr, msg_len, code); /* read data cards */
	     if code ^= 0 then return;
	     if msg_len = 0 then goto finished_read;
	end;
	else
	call get_message;				/* read in the data msg */
process:
	call g115_input_proc_ (msg_ptr, readp, nel, neltx, code); /* convert input msgs */
	readp = addr (nrdp (neltx));
	nelt = nelt + neltx;
	nel = nel - neltx;

	if code = 1 then				/* more input needed */
	     go to next_read;			/*  read some more */

	else if code = 2 then
	     code = error_table_$device_end;

finished_read:
	nelemt = nelt;
	return;

switch_buffers: proc (old_ptr) returns (ptr);

dcl (old_ptr, new_ptr) ptr,
    (old_offset, new_offset) bit (18);

	     old_offset = rel (old_ptr);		/* get the offset */
	     new_offset = bool (old_offset, g115_data.mask_sw, "0110"b);

	     new_ptr = ptr (old_ptr, new_offset);
	     return (new_ptr);

	end;



get_message: proc ;


gloop:	     call g115_message_$read (msg_ptr, msg_len, code); /* read in message */
	     if code ^= 0 then go to xit;

	     if msg_len ^= 0 then return;

	     call g115_util_$block (code);
	     if code ^= 0 then go to xit;

	     go to gloop;

	end;


fill_buffer: proc (optr, code);			/* proc to fill one output buffer */

dcl  optr ptr,
     code fixed bin (35);

	     code = 0;

	     if inelem = 0 & ^temp_filled then do;	/* we have processed all data */
		code = 1;
		return;
	     end;

	     pci.temp = mc;				/* set media code for g115_conv_ */
	     optr -> g115_hdr.null_ct = 0;
	     optr -> g115_hdr.text_char_count = 0;	/* clear count to init */
	     optr -> g115_msg.fmt_code = fc;		/* fill in fmt code in message */
	     optr -> g115_msg.op_code.cmd = g115_stat.no_op; /* no op on std write request */
	     tidx = 1;				/* init to first in data */

	     do while (inelem > 0 | temp_filled);	/* pump output till done */
		if temp_filled then neltx = temp_count; /* process temp first */
		else call prt_conv_ (wksp1, inelem, addr (temp_line), neltx, pcip); /* get next temp */

		if (tidx - 1) + neltx > g115_stat.max_msg_len then do; /* enough for this buffer */
		     temp_filled = "1"b;		/* indicate that for next time */
		     temp_count = neltx;
		     go to fill_done;
		end;
		else temp_filled = "0"b;

		to_ptr = addr (optr -> g115_msg.text (tidx)); /* set to ptr */
		from_ptr = addr (temp_line);		/* set from ptr */
		to_ptr -> bchr = from_ptr -> bchr;	/* copy converted string */
		tidx = tidx + neltx;
	     end;

fill_done:
	     optr -> g115_hdr.text_char_count = tidx -1;	/* set count */
	     optr -> g115_msg.etx = g115_stat.etx_char;
	     return;

	end;

     end;
