/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

g115_output_request_: proc (a_stream_name, a_element_size, a_stat_p, a_banner_proc, a_code);

/* General procedure for doing output for an I/O daemon device driver */

/* Rewritten from old procedure "io_daemon" in August 1973 by Robert S. Coren */

/*  Modified in March 1975 by J.C. Whitmore during driver restructuring */

/* Modified in December 1975 by M. A. Braida to include new restart capabilities and update
   the accounting mechanism */
/* modified 05/76 by THVV for set_kst_attributes & force deactivation */
/* Modified 06/76 by J. C. Whitmore to fix translate hardware bug */
/* Modified June 1976 by J. L. Homan to accommodate charging by line count instead of block count. */
/* modified July 1976 by THVV for message notification */
/* modified April 1977 by Bob Franklin to output request message to slave */

dcl  a_stream_name char (*);				/* stream to write the output on */
dcl  a_element_size fixed bin;			/* number of bits in each stream element */
dcl  a_stat_p ptr;					/* the value of stat_p from caller */
dcl  a_banner_proc entry;				/* procedure to be called for head and tail banners */
dcl  a_code fixed bin (35);				/* error code....used for driver_fatal_error */


/* AUTOMATIC */

dcl  abort_msg char (256) var;			/* string for bad error messages */
dcl  access_class bit (72) aligned;			/* access class of user file */
dcl  auth bit (72) aligned;				/* authorization used to set banner access class */
dcl  auth_string char (680);				/* string form of auth */
dcl  banner_proc entry variable options (variable);	/* proc to be called for messages */
dcl  bitcnt fixed bin (24);
dcl  code fixed bin (35);
dcl  curl fixed bin (24);
dcl  errlen fixed bin;
dcl  fac fixed bin;
dcl  l fixed bin;
dcl  mode fixed bin (5);
dcl  more_components bit (1) aligned;			/* we expect more MSF components */
dcl  mult_ind fixed bin;
dcl  mult_no fixed bin (24);
dcl  new_clock fixed bin (71);
dcl  new_cpu fixed bin (52);
dcl  new_pp fixed bin;
dcl  new_waits fixed bin (35);
dcl  old_cpu fixed bin (52);
dcl  old_pp fixed bin;
dcl  old_waits fixed bin (35);
dcl  save_code fixed bin (35);
dcl  tpe fixed bin (2);
dcl  val fixed bin;					/* for validation level */
dcl (lng2, nelt, nret) fixed bin;

dcl  dest char (12) aligned;
dcl  ename char (32) aligned;				/* entry name of file for output */
dcl  mailname char (32) aligned;
dcl  err_mess char (200) var;
dcl  full_path char (168) aligned;
dcl  gt char (1);					/* > for directory names */
dcl  header_found bit (1);
dcl  header_sw bit (1);
dcl  last char (20);
dcl  mes_space char (100) aligned;
dcl  msf_sw bit (1) aligned;
dcl  pverb char (5) aligned ;
dcl  req_stream char (32);
dcl  short_mes char (8) aligned;
dcl  status bit (72) aligned;				/* error code returned by i/o system */
dcl  user_dir char (168) aligned;			/* directory containing users' segment */
dcl (tailsw, chgsw) bit (1) aligned;			/* indicate whether to print out a tail sheet, or to charge */
dcl  comp_dir char (168) aligned;			/* MSF component directory name */
dcl  comp_name char (32) aligned;			/* entry name of the MSF component */
dcl  dir_len fixed bin;				/* length of component directory name */

dcl  segp ptr;
dcl  fcbp ptr;
dcl  desc_ptr ptr;
dcl  dr_ptr ptr;					/* pointer to driver status segment */
dcl  driver_data_p ptr;


/* INTERNAL STATIC */

dcl  bits_per_page fixed bin int static options (constant) init (36864);
dcl  header fixed bin int static options (constant) init (1); /* value for header wanted */
dcl  tail fixed bin int static options (constant) init (2); /* value for tail wanted */
dcl  error_msg fixed bin int static options (constant) init (3); /* value for print error message */
dcl  stars char (40) int static options (constant) aligned init ((40)"*"); /* For error messages */

dcl  privileged bit (1) static init ("1"b);		/* TRUE if we can call hphcs_ */
dcl  first_call bit (1) static init ("1"b);		/* TRUE on first call */
dcl  fault_mess char (32) aligned int static;
dcl  fault_name char (32) aligned int static;

dcl  err_label label int static;			/* point of return from condition handler */

dcl  request_data_p ptr int static;			/* ptr to REQUEST for set_single_copy entrry */

dcl  NL char (1) int static options (constant) init ("
");

dcl  tab_nl_vt_ff char (4) int static options (constant) init ("
");						/* ht, nl, vert tab and form feed chars */

/* EXTERNAL STATIC */

dcl  error_table_$noentry fixed bin (35) ext static;
dcl  error_table_$moderr fixed bin (35) ext static;
dcl  error_table_$dirseg ext static fixed bin (35);
dcl  error_table_$ai_restricted ext static fixed bin (35);


/* EXTERNAL ENTRIES */

dcl  aim_check_$equal entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
dcl  aim_check_$greater entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
dcl  check_fs_errcode_ ext entry (fixed bin (35), char (8) aligned, char (100) aligned);
dcl  clock_ ext entry returns (fixed bin (71));		/* gets clock time */
dcl  com_err_ entry options (variable);
dcl  convert_authorization_$from_string entry (bit (72) aligned, char (*), fixed bin (35));
dcl  convert_authorization_$to_string entry (bit (72) aligned, char (*), fixed bin (35));
dcl  cpu_time_and_paging_ entry (fixed bin (35), fixed bin (52), fixed bin);
dcl  date_time_ entry (fixed bin (71), char (*) aligned);
dcl  hphcs_$set_kst_attributes entry (fixed bin, ptr, fixed bin (35));
dcl  phcs_$deactivate entry (ptr, fixed bin (35));
dcl  hcs_$fs_get_mode ext entry (ptr, fixed bin (5), fixed bin (35));
dcl  hcs_$fs_get_path_name entry (ptr, char (*) aligned, fixed bin, char (*) aligned, fixed bin (35));
dcl  hcs_$get_access_class entry (char (*) aligned, char (*) aligned, bit (72) aligned, fixed bin (35));
dcl  hcs_$get_user_effmode entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin,
     fixed bin (5), fixed bin (35));
dcl  hcs_$initiate_count entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (24),
     fixed bin, ptr, fixed bin (35));
dcl  hcs_$status_long entry (char (*) aligned, char (*) aligned, fixed bin (1), ptr, ptr, fixed bin (35));
dcl  hcs_$status_minf entry (char (*) aligned, char (*) aligned, fixed bin, fixed bin (2), fixed bin (24), fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  io_daemon_account_ entry (ptr, ptr);
dcl  ioa_$ioa_stream entry options (variable);
dcl  ioa_$rsnnl entry options (variable);
dcl  ios_$order entry (char (*), char (*), ptr, bit (72) aligned);
dcl  ios_$write entry (char (*), ptr, fixed bin, fixed bin, fixed bin, bit (72) aligned);
dcl  msf_manager_$close entry (ptr);
dcl  msf_manager_$get_ptr entry (ptr, fixed bin, bit (1), ptr, fixed bin (24), fixed bin (35));
dcl  msf_manager_$open entry (char (*) aligned, char (*) aligned, ptr, fixed bin (35));
dcl  read_allowed_ entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
dcl  send_mail_$access_class entry (char (*) aligned, char (*) aligned, ptr, bit (72) aligned, fixed bin (35));



/* BASED VARIABLES */

dcl  fbpart fixed bin (35) based (addr (status));


/* STRUCTURES */


dcl 1 bla aligned,					/* Info returned by status & status_long */
    2 (type bit (2), nnames bit (16), nrp bit (18)) unal,
    2 (dtm, dtu) bit (36),
    2 (mode bit (5), pad1 bit (13), records bit (18)) unal,
    2 (dtd, dtem, acct) bit (36),
    2 (curlen bit (12), bitcnt bit (24)) unal,
    2 ((did, mdid) bit (4), copysw bit (1), pad2 bit (9), rbs (0:2) bit (6)) unal,
    2 uid bit (36);

dcl 1 ksta like kst_attributes aligned;

dcl 1 print_driver_data aligned based (driver_data_p),	/* defines driver data of request_descriptor */
    2 copies_done fixed bin (17) unal,			/* number of copies already printed */
    2 copies_charged fixed bin (17) unal,		/* number of copies already charged */
    2 pad fixed bin;


dcl 1 counts aligned,				/* Structure returned by "get_count" order */
    2 curline fixed bin,
    2 maxline fixed bin,
    2 indent fixed bin,
    2 page_width fixed bin,
    2 line_count fixed bin,
    2 page_count fixed bin;


/* BUILTINS */

dcl (addr, bit, divide, fixed, length, null, substr, verify, reverse, translate) builtin;
dcl (baseno, binary, string, unspec) builtin;


/* CONDITIONS */

dcl (cleanup, linkage_error, daemon_again, daemon_again_slave, daemon_kill, daemon_cancel) condition;



/* INCLUDE FILES */

%include output_request_data;

%include driver_status;

%include mseg_return_args;

%include dprint_msg;

%include request_descriptor;

%include iodd_static;

%include kst_attributes;

%include send_mail_info;

/*  */
/* copy arguments and initialize pointers and control switches */

	stat_p = a_stat_p;
	string (ksta) = "0"b;
	if first_call then do;			/* Conduct an experiment to see about hphcs_ */
	     on linkage_error begin;
		privileged = "0"b;
		go to tough;
	     end;
	     call hphcs_$set_kst_attributes (binary (baseno (stat_p), 18), addr (ksta), (0));
						/* This is a NOP - structure is 0 */
tough:	     revert linkage_error;			/* If we get here we are privileged */
	     first_call = "0"b;			/* Now we know */
	     ksta.set.tpd, ksta.value.tpd = "1"b;	/* Dont put on bulkstore just for lil ole me */
	     ksta.set.explicit_deactivate_ok, ksta.value.explicit_deactivate_ok = "1"b;
	     ksta.set.allow_write = "1"b;		/* Dont let me wreck user seg by accident */
	     ksta.set.tus, ksta.value.tus = "1"b;	/* Save a vtoc write */
	end;
	banner_proc = a_banner_proc;
	req_stream = a_stream_name;
	fac = a_element_size;
	a_code = 0;				/* set to zero for now */

	dr_ptr = iodd_static.driver_ptr;		/* get ptr to the current driver status seg */
	desc_ptr = addr (dr_ptr -> driver_status.descriptor); /* and to the request descriptor */
	ms_arg_ptr = desc_ptr;			/* first part of desciptor is ms_return_args */
	dmp = addr (dr_ptr -> driver_status.message);	/* set dprint_msg default pointer */
	request_data_p = addr (REQUEST);		/* get ready to handle "single copy" request */
	driver_data_p = addr (desc_ptr -> request_descriptor.driver_data); /* get ptr to printer_driver_data */

	on cleanup call clean_proc;			/* establish a cleanup handler */
	err_label = abort_request;

/* Set up master structure used by this pgm. */

	REQUEST.requestor = mseg_return_args.sender_id;
	REQUEST.continued = desc_ptr -> request_descriptor.continued;
	REQUEST.restarted = desc_ptr -> request_descriptor.restarted;
	REQUEST.separator = "1"b;			/* we always want a print separator first time */
	REQUEST.device_name = dr_ptr -> driver_status.dev_name_label;
	REQUEST.request_type = dr_ptr -> driver_status.req_type_label;
	REQUEST.queue = desc_ptr -> request_descriptor.q;
	REQUEST.request_no = desc_ptr -> request_descriptor.seq_id; /* coord assigned the number */
	REQUEST.restart_no = desc_ptr -> request_descriptor.prev_seq_id;
						/* previous number of request (0 = not restarted) */
	REQUEST.contd_no = desc_ptr -> request_descriptor.contd_seq_id;
						/* previous number of continued request (0 = not continued) */
	REQUEST.dpmp = dmp;
	REQUEST.delete = dprint_msg.delete_sw;
	if ^REQUEST.continued then print_driver_data.copies_done = 0; /* no copies assumed, unless continued */
						/* if none completed, it's not continued */
	else if print_driver_data.copies_done < 1 then REQUEST.continued = "0"b;
	REQUEST.copies = dprint_msg.copies;
	REQUEST.notify = (dprint_msg.notify = 1);
	REQUEST.total_charge = 0e0;
	l = length (REQUEST.requestor) + 1 - 2 - verify (reverse (REQUEST.requestor), " ");
	mailname = substr (REQUEST.requestor, 1, l);
	unspec (send_mail_info) = "0"b;
	send_mail_info.version = 1;
	send_mail_info.wakeup = "1"b;
	send_mail_info.always_add = "1"b;
	send_mail_info.sent_from = REQUEST.request_type;

	if dprint_msg.output_module = 1 then do;
	     REQUEST.punsw = 0;
	     pverb = "print";
	end;
	else do;
	     REQUEST.punsw = 1;
	     pverb = "punch";
	end;

/* Find the access class to use for the banner */

	if aim_check_$greater (mseg_return_args.sender_authorization, dr_ptr -> driver_status.min_banner) then
	     auth = mseg_return_args.sender_authorization;
	else auth = dr_ptr -> driver_status.min_banner;	/* mark the output with auth */

	call convert_authorization_$to_string (auth, auth_string, code); /* get string form */
	if code ^= 0 then call fatal_error;		/* this is real bad */

	l = 681 - verify (reverse (auth_string), " ");	/* how long is the string */
	if l < 681 then				/* quick test for blank string */
	     if l > 132 then do;			/* too long for normal output..check for short form */
		call convert_authorization_$from_string (access_class, "system_high", code);
		if code ^= 0 then call fatal_error;
		if aim_check_$equal (auth, access_class) then auth_string = "SYSTEM HIGH"; /* this is shorter */
	     end;

	REQUEST.access_class_string = auth_string;	/* save all we can for the label */


/* 	get pathname of file for header and error messages */

	user_dir = dprint_msg.dirname;
	ename = dprint_msg.ename;
	if substr (user_dir, 1, 4) = ">   " then gt = " ";
	else gt = ">";
	call ioa_$rsnnl ("^a^a^a", full_path, lng2, user_dir, gt, ename);

	REQUEST.full_path = translate (full_path, "", tab_nl_vt_ff); /* force a page fault on the table - HARDWARE BUG WRITEAROUND */
	full_path = translate (full_path, "", tab_nl_vt_ff); /* remove bad chars for banner */
	dprint_msg.destination = translate (dprint_msg.destination, "", tab_nl_vt_ff);
	dprint_msg.heading = translate (dprint_msg.heading, "", tab_nl_vt_ff);

	REQUEST.full_path = full_path;		/* save the clean copy */
	segp, fcbp = null;				/* ready for an early restart */
	REQUEST.line_count = 0;
	REQUEST.page_count = 0;

/* we now know enough to be able to restart this request if desired */

repr_start:

	header_found, header_sw, msf_sw = "0"b;
	tailsw, chgsw = "0"b;			/* initialize accounting switches */
	old_cpu, bitcnt, nelt = 0;			/* just in case they get used before being set */

	REQUEST.time_start_request = clock_ ();
	call date_time_ (REQUEST.time_start_request, REQUEST.date_time_start_request);

	REQUEST.cpu_time = 0;			/* reset the usage data */
	REQUEST.real_time = 0;
	REQUEST.page_waits = 0;
	REQUEST.pre_pages = 0;
	REQUEST.bit_count = 0;
	REQUEST.charge = 0e0;
	REQUEST.copy_no = print_driver_data.copies_done + 1; /* initialize copy-counter */
	REQUEST.output_mode = "";

	header_found = "1"b;			/* we now have enough info to print a head/tail banner */

	on daemon_again begin;			/* to restart the current request.... */
	     call restart_request ("master");		/* talking to master terminal */
	     go to repr_start;
	end;

	on daemon_again_slave begin;			/* to restart the current request.... */
	     call restart_request ("slave");		/* talking to slave terminal */
	     go to repr_start;
	end;

	on daemon_kill go to flush_request;		/* flush the current request */

	on daemon_cancel go to flush_request;		/* likewise,  the cancelled flag has been set */

	iodd_static.request_in_progress = "1"b;		/* ready to accept kill, cancel etc. */

	call clean_proc;				/* see if we need to terminate after restart */

	err_mess = "";				/* no message until it is set */
	header_sw = "0"b;				/* so we'll get header now and on reprint */

/*	record the event of processing this request */

	if REQUEST.separator then do;			/* only have to log the request once */

	     dest = dprint_msg.destination;		/* keep this locally */

	     if dest = ""
	     then last = "";			/* set up "destination" part of log msg */
	     else call ioa_$rsnnl (" (to ^a)", last, l, dest);

	     if iodd_static.slave.active then do;	/* tell slave */
		call ioa_$ioa_stream (iodd_static.slave_output, "Request ^d.^d: ^a",
		     REQUEST.request_no, REQUEST.queue, pverb);
		call ioa_$ioa_stream (iodd_static.slave_output, "   ^a ",
		     full_path);
		call ioa_$ioa_stream (iodd_static.slave_output, "   for ^a^a",
		     REQUEST.requestor, last);
	     end;
	     call ioa_$ioa_stream (iodd_static.log_stream, "Request ^d.^d: ^a ^a for ^a^a",
		REQUEST.request_no, REQUEST.queue, pverb, full_path, REQUEST.requestor, last);

	end;

	call cpu_time_and_paging_ (old_waits, old_cpu, old_pp); /* keep time and page waits for accounting */


/* check the requestor's access to the pathname he specified */

	val = mseg_return_args.level;

	call check_user_access (user_dir, ename, code);	/* use the internal proc to do the work */
	if code ^= 0 then call fatal_error;		/* it won't return to here */

	err_mess = full_path;			/* let this sit here in case of error */

	call hcs_$status_minf (user_dir, ename, 1, tpe, mult_no, code); /* see what kind of a thing it is */
	if code ^= 0 then call fatal_error;

	if tpe = 2 then				/* directory */
	     if mult_no < 1 then do;			/* it was a directory */
		code = error_table_$dirseg;
		call fatal_error;
	     end;
	     else do;				/* it is a multi_segment file - handle different */

		call msf_manager_$open (user_dir, ename, fcbp, code);
		if code ^= 0 then do;
		     err_mess = "Could not open multi-segment file "||full_path;
		     call fatal_error;
		end;
		msf_sw = "1"b;			/* indicate that it is an MSF */

	     end;

	else do;					/* it is an ordinary segment */

	     call hcs_$initiate_count (user_dir, ename, "", bitcnt, 1, segp, code);
	     if segp = null then do;
		err_mess = "Cannot initiate "||full_path;
		call fatal_error;
	     end;
	     msf_sw = "0"b;				/* it is not an MSF, make it clear */
	     if privileged				/* If we can be nice, we will */
	     then call hphcs_$set_kst_attributes (binary (baseno (segp), 18), addr (ksta), (0));

	end;

/*	Now we are ready to output the number of copies the user requested. */
/*	The structure of the loop and internal procedures is set to handle */
/*	different access and bitcounts per MSF component. */

	do while (REQUEST.copies >= REQUEST.copy_no);	/* once around for each copy */

	     call banner_proc (req_stream, header, addr (REQUEST), code); /* print header banner */
	     if code ^= 0 then do;			/* I/O error trying to print header */
		call driver_fatal_error (code, "I/O ERROR -- trying to print header.");
		go to clean_out;			/* abort this request completely */
	     end;


	     REQUEST.separator = "0"b;		/* separator bar was for first banner only */
	     header_sw, tailsw = "1"b;		/* header was ok, do tail */
	     more_components = "1"b;			/* get ready for MSF components of this copy */

/*	The banner_proc set the user's output modes based on REQUEST.dpmp ... we just write the stream as it stands */

	     if ^msf_sw then do;			/* the normal case is the segment */

		call output_segment (user_dir, ename, segp); /* internal proc does the work */

	     end;

	     else do mult_ind = 0 by 1 while (more_components); /* MSF - go through each component starting with 0 */

		call msf_manager_$get_ptr (fcbp, mult_ind, "0"b, segp, bitcnt, code);
		if segp = null then do;
		     if code = error_table_$noentry then more_components = "0"b; /* we are done */
		     else do;			/* try for more after other errors */
			call ioa_$rsnnl ("Could not get pointer to ^a>^d", err_mess, errlen,
			     full_path, mult_ind);
			call error_write (code, err_mess);
			more_components = "1"b;	/* just to be safe */
		     end;
		     go to next_component;
		end;

/*		we got a pointer to something...where is it */
/*		and does the requestor have access to it? */

		call hcs_$fs_get_path_name (segp, comp_dir, dir_len, comp_name, code);
		if code ^= 0 then do;
		     err_mess = "Could not get MSF component pathname.";
		     call error_write (code, err_mess);
		     go to next_component;
		end;

		call check_user_access (comp_dir, comp_name, code);
		if code ^= 0 then do;		/* he tried to pull a fast one and got caught */
		     err_mess = err_mess || "  " || substr (comp_dir, 1, dir_len) || ">" || comp_name;
		     call error_write (code, err_mess); /* most of err_mess was set by check_user_access */
		end;

		else do;				/* He made it through the obstacles */
		     if privileged			/* .. do it (gently if possible) */
		     then call hphcs_$set_kst_attributes (binary (baseno (segp), 18), addr (ksta), (0));
		     call output_segment (comp_dir, comp_name, segp);
		     if privileged then call phcs_$deactivate (segp, (0));
		end;

next_component: end;				/* look for the next MSF component */


	     if REQUEST.copies > print_driver_data.copies_charged then do;
						/* user honestly deserves these charges */
		chgsw = "1"b;
		print_driver_data.copies_charged = print_driver_data.copies_charged + 1;
	     end;
	     else chgsw = "0"b;

	     call charge_for_work;			/* do the accounting so we can put price on tail */

	     call banner_proc (req_stream, tail, addr (REQUEST), code); /* this will put on the tail banner */
	     if code ^= 0 then do;			/* some type of error..don't do it again */
		call driver_fatal_error (code, "I/O ERROR -- attempting to write tail banner.");
		go to clean_out;
	     end;


	     print_driver_data.copies_done = print_driver_data.copies_done + 1;
	     REQUEST.copy_no = REQUEST.copy_no + 1;	/* get ready for next copy */
	     REQUEST.time_start_request = new_clock;	/* from accounting */
	     old_cpu = new_cpu;
	     old_waits = new_waits;
	     old_pp = new_pp;

	     REQUEST.bit_count = 0;			/* restart bit count */
	     header_sw, tailsw = "0"b;

	     call ios_$order (req_stream, "runout", null, status); /* make device disgorge */

	end;					/* done with this copy...check for more in while loop */


	if REQUEST.notify then do;
	     call ioa_$rsnnl ("^aed ^a $^.2f queue ^d ^a ^d", abort_msg, l,
		pverb, REQUEST.full_path, REQUEST.total_charge,
		REQUEST.queue, REQUEST.device_name, REQUEST.request_no);
	     call send_mail_$access_class (mailname, substr (abort_msg, 1, l), addr (send_mail_info),
		mseg_return_args.sender_authorization, code);
	end;
clean_out:					/* get ready for the next users' request */

	call ios_$order (req_stream, "runout", null, status); /* make device disgorge */

	call clean_proc;				/* get junk out of the address space */

	iodd_static.request_in_progress = "0"b;		/* no more commands can be effective */


	return;

/* =================================================================================== */

/*  This is where the condition handlers "go to" when something has gone wrong */

flush_request:					/* signal handler jumps back here */

	fault_name = "Operator aborted listing";	/* message for kill and cancel */

abort_request:					/* unclaimed signals transfer to here */

	if fault_name = "seg_fault_error" & iodd_static.segptr = segp then
	     chgsw = "1"b;				/* if user causes the fault then charge him for work */
	else chgsw = "0"b;

	if REQUEST.delete ^= 0
	then fault_mess = "; segment will not be deleted";
	else fault_mess = "";

	desc_ptr -> request_descriptor.dont_delete = "1"b; /* like we said */


	call ioa_$rsnnl ("^a during processing of request^a.", err_mess, l,
	     fault_name, fault_mess);

	code = 0;

	call fatal_error;				/* this will clean things up a bit */

	go to clean_out;				/* fatal_error will actually make the transfer */

/*  */
/* *****    INTERNAL PROCEDURES ***** */

charge_for_work: proc;

/* Accounting section, done at end of processing each copy of output. */

	     counts.line_count = 0;			/* Clear these items so that if the order is unknown.. */
	     counts.page_count = 0;			/* .. (like if card dim doesn't do them) we still go */
	     call ios_$order (req_stream, "get_count", addr (counts), status);
	     new_clock = clock_ ();
	     call cpu_time_and_paging_ (new_waits, new_cpu, new_pp);

	     if counts.line_count > 0 then
		REQUEST.line_count = counts.line_count;
	     else REQUEST.line_count = divide (REQUEST.bit_count+699, 700, 24, 0); /* Use block count
						   if dim returns zero line count */
	     REQUEST.page_count = counts.page_count;
	     if REQUEST.time_start_request = 0 | old_cpu = 0 then go to no_charge; /* don't give huge erroneous times */
	     if chgsw then do;			/* charge him */
		REQUEST.cpu_time = new_cpu - old_cpu;
						/* REQUEST.bit_count was set when chgsw was */
		REQUEST.real_time = new_clock - REQUEST.time_start_request;
		REQUEST.page_waits = fixed (new_waits - old_waits, 35);
		REQUEST.pre_pages = fixed (new_pp - old_pp, 35);
		call io_daemon_account_ (dr_ptr -> driver_status.acct_ptr, addr (REQUEST));
	     end;
	     else do;				/* tell user he wasn't charged */
no_charge:	REQUEST.charge = 0e0;		/* reset any undefined values */
		REQUEST.cpu_time = 0;
		REQUEST.real_time = 0;
		REQUEST.page_waits = 0;
		REQUEST.pre_pages = 0;
	     end;
	     REQUEST.total_charge = REQUEST.total_charge + REQUEST.charge;

	     return;

	end charge_for_work;


/* ======================================================================================== */

check_user_access: proc (user_dir, ename, ec);

/* Internal procedure to check that the requestor has at least "r" access to
   the specified segment */

dcl  user_dir char (*) aligned;
dcl  ename char (*) aligned;
dcl  code fixed bin (35);
dcl  ec fixed bin (35);

	     call hcs_$get_user_effmode (user_dir, ename, REQUEST.requestor, val, mode, code);
	     if code ^= 0 then do;
		err_mess = "Unable to get user's mode to segment.";
		ec = code;
		return;
	     end;

	     if (bit (mode, 5) & "01000"b) = "0"b then do;
		err_mess = "User does not have read access on segment.";
		ec = error_table_$moderr;
		return;
	     end;

	     call hcs_$get_access_class (user_dir, ename, access_class, code);
	     if code ^= 0 then do;
		err_mess = "Unable to get access class of segment.";
		ec = code;
		return;
	     end;

	     if ^ read_allowed_ (mseg_return_args.sender_authorization, access_class) then do;
		ec = error_table_$ai_restricted;
		err_mess = "User not allowed to read segment.";
		return;
	     end;

	     ec = 0;				/* ok, user passed the checks */

	     return;

	end check_user_access;


/* ======================================================================================== */

fatal_error: proc;

/* This is an internal procedure only to make the flow of control cleaner
   in the main procedure.  */

	     save_code = code;			/* keep current error for reporting */

	     if ^header_sw & header_found then do;
		call banner_proc (req_stream, header, addr (REQUEST), code);
		if code = 0 then header_sw, tailsw = "1"b; /* all was well */
		else header_sw, tailsw = "0"b;	/* just to be sure */
	     end;

	     call error_write (save_code, err_mess);

	     call ioa_$ioa_stream (iodd_static.log_stream, "Processing of request terminated.");

	     if iodd_static.slave.active then
		if iodd_static.slave.print_errors then
		     call ioa_$ioa_stream (iodd_static.slave_output, "Processing of request terminated.");

	     desc_ptr -> request_descriptor.dont_delete = "1"b; /* make sure we don't delete msf */

	     if tailsw then do;			/* if we owe a tail banner, do it */
		call charge_for_work;		/* charge for good part that may have been done */
		call banner_proc (req_stream, tail, addr (REQUEST), code);
	     end;

	     go to clean_out;			/* we'll stop rather than returning */

	end fatal_error;

/* =========================================================================================== */

error_write: proc (code, message);			/* for writing error messages to console &
						   request stream */
dcl  code fixed bin (35);
dcl  message char (*) varying;

	     if code ^= 0 then call check_fs_errcode_ (code, short_mes, mes_space);
	     else mes_space = "";

	     call ioa_$ioa_stream (iodd_static.log_stream, "io_daemon: ^a ^a", mes_space, message);

	     call ioa_$rsnnl ("Unable to ^a ^a. ^a ^a", abort_msg, l,
		pverb, REQUEST.full_path, mes_space, message);
	     call send_mail_$access_class (mailname, substr (abort_msg, 1, l), addr (send_mail_info),
		mseg_return_args.sender_authorization, (0));

	     if iodd_static.slave.active then
		if iodd_static.slave.print_errors then
		     call ioa_$ioa_stream (iodd_static.slave_output, "io_daemon: ^a ^a", mes_space, message);

	     if header_sw then do;			/* if banner_proc does a "reset" line and page count is lost */
		call ioa_$rsnnl ("^2/^a^/io_daemon: ^a ^a^/^a^|", abort_msg, l,
		     stars, mes_space, message, stars);
		call banner_proc (req_stream, error_msg, addr (abort_msg), code); /* put out error msg to media */
	     end;
	     return;

	end error_write;





/*  =============================================================================================== */

driver_fatal_error: proc (code, err_msg);

/* Internal procedure to print messages when there is an IO error on the output stream */

dcl  code fixed bin (35);
dcl  err_msg char (*);

	     call com_err_ (code, "io_daemon", "^a ^/ Driver returning to command level.", err_msg);

	     desc_ptr -> request_descriptor.dont_delete = "1"b; /* give a reprieve....in case */

	     a_code = code;				/* report driver_fatal_error */

	     return;

	end driver_fatal_error;

/* ======================================================================================== */

output_segment: proc (user_dir, ename, segp);

/* This internal procedure checks the Daemon's access to the segment, then calculates
   the length as determined by bitcount and current length, then data is written. */

dcl  user_dir char (*) aligned;
dcl  ename char (*) aligned;
dcl  segp ptr;

	     iodd_static.segptr = segp;		/* tell signal handler what segment we are using */

	     call hcs_$fs_get_mode (segp, mode, code);	/*  make sure daemon has access  */
	     if code ^= 0 then do;
		err_mess = "I/O Daemon does not have access to segment.";
		call error_write (code, err_mess);
		REQUEST.copies = 1;			/* don't do it again */
		return;
	     end;
	     if (bit (mode, 5) & "01000"b) = "0"b then do;
		err_mess = "I/O daemon does not have read access on segment.";
		call error_write (0, err_mess);
		REQUEST.copies = 1;			/* don't allow the error to be repeated */
		return;
	     end;

/*		find the current segment length in pages and in bits */

	     call hcs_$status_long (user_dir, ename, 1, addr (bla), null, code);
	     if code ^= 0 then do;
		err_mess = "I/O Daemon cannot get length of segment.";
		call error_write (code, err_mess);
		REQUEST.copies = 1;			/* don't do it again */
		return;
	     end;

	     bitcnt = fixed (bla.bitcnt);		/* relevant bits according to the user */

	     curl = fixed (bla.curlen, 12)*bits_per_page; /* calculate the current length in bits */

	     if bitcnt > curl then			/* excess would be \000 anyway */
		bitcnt = curl;			/* we use this value for accounting */

	     nelt = divide (bitcnt, fac, 17, 0);	/* see now many elements to write on the req_stream */
	     if nelt = 0 then do;
		code = 0;
		call ioa_$rsnnl ("^a>^a is a zero length segment.", err_mess, l, user_dir, ename);
		call error_write (code, err_mess);
		REQUEST.copies = 1;			/* as said before */
		return;
	     end;

	     REQUEST.bit_count = REQUEST.bit_count + bitcnt; /* update the amount of output */

	     call ios_$write (req_stream, segp, 0, nelt, nret, status); /* This is the actual output of segment */

	     if fbpart ^= 0 then do;			/* I/O error */
		call driver_fatal_error (fbpart, "I/O ERROR -- during user segment output.");
		go to clean_out;
	     end;

	     return;

	end output_segment;

/* ======================================================================================== */

restart_request: proc (source);

/* internal procedure used to question operator regarding the restart of current request */

dcl  answer char (120);
dcl  cnt_msg char (10);				/* space to specify a continued request */
dcl  copies_good fixed bin (35);			/* operator response to number of good copies */
dcl (input_stream, output_stream) char (32);
dcl  io_stat bit (72) aligned;
dcl 1 st aligned based (addr (io_stat)),
    2 code fixed bin (35),
    2 junk bit (36);
dcl  pg_count_msg char (30);				/* space to specify pages per copy */
dcl  restrt_msg char (30);				/* space that the request is to be restarted */
dcl  source char (*);

dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  ios_$read entry (char (*), ptr, fixed bin, fixed bin, fixed bin, bit (72) aligned);

/* set up input/output stream for the master terminal */

	     if source = "master" then do;
		input_stream = iodd_static.input_stream;
		output_stream = "user_output";
	     end;

/* set up input/output stream for the slave terminal */

	     else do;
		input_stream = iodd_static.slave.slave_input;
		output_stream = iodd_static.slave.slave_output;
	     end;


/* is there a need to query the operator? */

	     if REQUEST.punsw = 1 | print_driver_data.copies_done = 0 | REQUEST.copies = 1 then do;

		restrt_msg = "";
		REQUEST.separator = "1"b;
		print_driver_data.copies_done = 0;

	     end;

	     else do;				/* must query operator */

		if REQUEST.page_count > 0 then	/* is there a non zero page count? */
		     call ioa_$rsnnl (" (^d pages each)", pg_count_msg, nret, REQUEST.page_count);
		else pg_count_msg = "";

		if REQUEST.continued then		/* is this a continued request? */
		     cnt_msg = " (continued request)";
		else cnt_msg = "";

ask_how_many_good:					/* tell operator how many were done */
		call ioa_$ioa_stream (output_stream, "^d of ^d copies^a were done^a.  How many were good?",
		     print_driver_data.copies_done, REQUEST.copies, pg_count_msg, cnt_msg);
						/* now let's see what the operator tells us */
		call ios_$read (input_stream, addr (answer), 0, 10, nelt, io_stat);

		if st.code ^= 0 then do;
		     copies_good = 0;
		     go to tell_operator;
		end;

		if substr (answer, nelt, 1) = NL then
		     answer = substr (answer, 1, nelt - 1);

		copies_good = cv_dec_check_ (answer, st.code);

		if st.code ^= 0 then do;		/* was the answer a number? */
bad_no:		     call ioa_$ioa_stream (output_stream, "Please specify a number between 0 and ^d",
			print_driver_data.copies_done);
		     go to ask_how_many_good;
		end;

		if copies_good < 0 | copies_good > print_driver_data.copies_done then go to bad_no;

tell_operator:	print_driver_data.copies_done = copies_good; /* update the record of finished copies */

		if copies_good = 0 then REQUEST.separator = "1"b;

		call ioa_$rsnnl (" from copy number ^d", restrt_msg, nret, copies_good + 1);

	     end;

	     call ioa_$ioa_stream (output_stream, "Restarting request^a.", restrt_msg);

	     return;

	end restart_request;

/* ======================================================================================== */

clean_proc: proc;

	     iodd_static.segptr = null;		/* tell signal handler we are done with it */

	     if fcbp ^= null then
		call msf_manager_$close (fcbp);

	     else if segp ^= null then do;
		if privileged then call phcs_$deactivate (segp, (0));
		call hcs_$terminate_noname (segp, code);
	     end;

	     segp, fcbp = null;			/* because this is used for several functions */

	     return;

	end clean_proc;



error_during_request: entry (cond);			/* for coming back after signal */

dcl  cond char (*);

	fault_name = cond;

	go to err_label;



set_single_copy: entry;

/*  to abort multiple copies if the single command must be used */

	request_data_p -> ordata.copies = 1;		/* make it fall out of the loop after tail sheet */

	return;


     end g115_output_request_;
