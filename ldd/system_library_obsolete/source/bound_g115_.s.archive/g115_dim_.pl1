/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

g115_dim_: proc;

/* DIM for g115 remote batch terminals, interfaces with g115 DCM */

/* Coded 11/20/73 by Mike Grady */

/* modified 06-10-75 by Bob Adsit to move line_control to MCS/355 */
/* modified 07-22-77 by Bob Franklin to add entries for resetread, resetwrite,
   and abort calls which are all treated as no-ops. */

dcl (stream_name, type, device, mode, disposal, order_type) char (*),
    (t_twx, attach_type, aoffset, anelem, anelemt) fixed bin,
    (new_mode, old_mode) char (*),
     rcard char (80) varying,
     bcard based (bufp) char (length (rcard)),
     rstatus bit (72) aligned,
     sareap ptr int static,
     sarea area based (sareap),
     code fixed bin (35),
     sp ptr,
     bufp ptr,
     orderp ptr;

dcl  g115_control_$attach entry (char (*), fixed bin, fixed bin (35)),
     g115_control_$order entry (fixed bin, char (*), ptr, fixed bin (35)),
     g115_control_$modes entry (fixed bin, char (*), char (*), fixed bin (35)),
     g115_control_$detach entry (fixed bin, fixed bin (35)),
     g115_util_$set_ptr entry (ptr),
     g115_util_$get_data_ptr entry (fixed bin) returns (ptr),
     g115_util_$conv_card entry (char (*) varying),
     g115_io_$write entry (fixed bin, ptr, fixed bin, fixed bin, fixed bin, fixed bin (35)),
     g115_io_$read entry (fixed bin, ptr, fixed bin, fixed bin, fixed bin, fixed bin (35)),
     get_system_free_area_ entry returns (ptr);

dcl (null, addr) builtin;

dcl (area, storage) condition;

dcl (error_table_$ionmat,
     error_table_$bad_mode,
     error_table_$multiple_io_attachment,
     error_table_$noalloc,
     error_table_$invalid_read,
     error_table_$invalid_write,
     error_table_$device_end,
     error_table_$not_attached) fixed bin (35) ext;

dcl  sdbp ptr;					/* pointer to stream data block */

dcl 1 g115_dim_sdb aligned based (sdbp),		/* stream data block */
    2 outer_mod_name char (32),			/* = "g115_" */
    2 device_namep ptr init (addr (g115_dim_sdb.device_name)), /* points to device name */
    2 device_type fixed bin,
    2 device_name,
      3 next_ptr ptr init (null),
      3 name_size fixed bin init (32),
      3 name char (32);


dcl  dim_data_ptr ptr int static init (null);		/* pointer to dim_data */

dcl 1 g115_dim_data aligned based (dim_data_ptr),
    2 twx fixed bin,
    2 dev_name char (6),
    2 attach_count fixed bin;

%include io_status;
%include g115_data;

/*  */
g115_attach: entry (stream_name, type, device, mode, rstatus, sdbp); /* attach printer */

	call set_attach_type;			/* call subr to set type from mode */

	if sdbp ^= null then			/* error stream already attached */
	     call return_status (error_table_$ionmat, "0"b);

	if dim_data_ptr = null then do;		/* first init for this device */

	     call g115_control_$attach (device, t_twx, code); /* index this device */
	     if code ^= 0 then
		call return_status (code, "1"b);	/* error from attachment, bad */

	     sareap = get_system_free_area_ ();		/* grab ptr to free area */

	     on condition (area) call return_status (error_table_$noalloc, "1"b);
	     on condition (storage) call return_status (error_table_$noalloc, "1"b);

	     allocate g115_dim_data in (sarea) set (dim_data_ptr);

	     revert condition (area);
	     revert condition (storage);

	     g115_dim_data.twx = t_twx;		/* save twx for future calls */
	     g115_dim_data.dev_name = device;		/* save name for future attaches */
	     g115_dim_data.attach_count = 0;		/* init this */


	end;

	if device ^= g115_dim_data.dev_name then	/* error, only one device at a time */
	     call return_status (error_table_$multiple_io_attachment, "1"b);

	on condition (area) call return_status (error_table_$noalloc, "1"b);
	on condition (storage) call return_status (error_table_$noalloc, "1"b);

	allocate g115_dim_sdb in (sarea) set (sdbp);	/* allocate an sdb for this stream */

	revert condition (area);
	revert condition (storage);

	g115_dim_sdb.outer_mod_name = type;		/* set outer mod name */
	g115_dim_sdb.device_type = attach_type;		/* record attach type */
	g115_dim_sdb.name = device;			/* set device name in here also */

	g115_dim_data.attach_count = g115_dim_data.attach_count + 1; /* count up attaches */

	call return_status (0, "0"b);			/* done, return zero code */

/*  */

g115_read: entry (sdbp, bufp, aoffset, anelem, anelemt, rstatus); /* entry to read */

	call check_attachment;


	if g115_dim_sdb.device_type = 2 |		/* not a readable device */
	g115_dim_sdb.device_type = 4 then
	     call return_status (error_table_$invalid_read, "0"b);

	if g115_dim_sdb.device_type = 3 then do;	/* special for teleprinter read */
	     call g115_util_$conv_card (rcard);		/* convert card */
	     bcard = rcard;				/* return to user */
	     anelemt = length (rcard);		/* set len */
	     call return_status (0, "0"b);		/* done */
	end;
	call g115_io_$read (g115_dim_data.twx, bufp, aoffset, anelem, anelemt, code); /* pass on read */

	if code = error_table_$device_end then call return_status (1, "0"b);

	call return_status (code, "0"b);



g115_write: entry (sdbp, bufp, aoffset, anelem, anelemt, rstatus); /* write here */

	call check_attachment;


	if g115_dim_sdb.device_type < 2 then		/* not a writeable device */
	     call return_status (error_table_$invalid_write, "0"b);

	call g115_control_$order (g115_dim_data.twx, "set_periph", addr (g115_dim_sdb.device_type), code);
						/* set the device type for the write */

	call g115_io_$write (g115_dim_data.twx, bufp, aoffset, anelem, anelemt, code);

	call return_status (code, "0"b);		/* done */

/*  */

g115_modes: entry (sdbp, new_mode, old_mode, rstatus);

	call check_attachment;

	call g115_control_$modes (g115_dim_data.twx, new_mode, old_mode, code);

	call return_status (code, "0"b);


g115_order: entry (sdbp, order_type, orderp, rstatus);	/* order call stuff */

	call check_attachment;


	call g115_control_$order (g115_dim_data.twx, order_type, orderp, code); /* easy, pass it along */

	call return_status (code, "0"b);		/* return code if any */




g115_detach: entry (sdbp, device, disposal, rstatus);	/* entry to detach device */

	call check_attachment;


	g115_dim_data.attach_count = g115_dim_data.attach_count - 1; /* count down for detach */

	code = 0;

	if g115_dim_data.attach_count = 0 then		/* if no streams attached now, dump device */
	     call g115_control_$detach (g115_dim_data.twx, code);

	call return_status (code, "1"b);		/* return code, if any and detach */

g115_cntrl: entry (sdbp, rstatus);			/* resetread, resetwrite, abort ignored */

	call check_attachment;
	code = 0;
	call return_status (code, "0"b);

/*  */
/* internal proc to return status as real ios status */

return_status: proc (rcode, rdet_bit);

dcl  rcode fixed bin (35),
     rdet_bit bit (1);

	     sp = addr (status);
	     status_bits = "0"b;			/* clear to init */

	     if rcode = 1 then do;			/* if 1 set eod */
		rcode = 0;
		status.end_of_data = "1"b;
	     end;

	     status.ioname_detached = rdet_bit;		/* set det bit in status word */
	     status.code = rcode;

	     if rdet_bit then do;			/* if we are detaching then do */

		if sdbp ^= null then do;		/* free sdb if allocated */
		     free g115_dim_sdb in (sarea);
		     sdbp = null;
		end;

		if dim_data_ptr ^= null then		/* check dim_data */
		     if g115_dim_data.attach_count = 0 then do; /* no more streams attached, free block */
			free g115_dim_data in (sarea);
			dim_data_ptr = null;
		     end;

	     end;

	     rstatus = status_bits;			/* copy back status */
	     go to ret;				/* nonlocal goto to exit */

	end;


ret:	return;


/* internal procedure to check correctness of call to g115_dim_$... */

check_attachment: proc;

	     if dim_data_ptr = null | sdbp = null then	/* error - no previous attach call */
		call return_status (error_table_$not_attached, "0"b);

	     if g115_dim_sdb.name ^= g115_dim_data.dev_name then /* device names do not match */
		call return_status (error_table_$multiple_io_attachment, "0"b);

	     data_ptr = g115_util_$get_data_ptr (g115_dim_data.twx);
	     if data_ptr = null then			/* no g115_data structure for this device */
		call return_status (error_table_$not_attached, "0"b);
	     call g115_util_$set_ptr (data_ptr);
	     g115_data.no_block = "0"b;		/* turn off no block flag */

	     return;
	end;


set_attach_type: proc;

	     attach_type = 0;			/* set default to none */

	     if index (mode, "teleprinter") ^= 0 then attach_type = 3;
	     else if index (mode, "reader") ^= 0 then attach_type = 1;
	     else if index (mode, "printer") ^= 0 then attach_type = 2;
	     else if index (mode, "punch") ^= 0 then attach_type = 4;
	     else if mode = "" then attach_type = 3;

	     if attach_type = 0 then			/* wrong mode, gripe */
		call return_status (error_table_$bad_mode, "1"b);

	     return;

	end;

     end;
