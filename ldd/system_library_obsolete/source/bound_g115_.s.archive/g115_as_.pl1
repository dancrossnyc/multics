/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

g115_as_: proc;


/* g115_as_ - procedure to interface answering service when it needs to
   work the g115 or mds2400.
   tty_index entry must be called first to establish a data structure for the device.
   the other entries rely on the presence of this data structure */


/* coded 07/11/75 by Bob Adsit */

dcl (t_twx, asw, dflag, state, istate, aoffset, anelem, anelemt) fixed bin;

dcl  process_id bit (36) aligned,
     save_trim bit (1);

dcl (bufp, orderp) ptr;
dcl  null builtin;

dcl (device, order, new_mode, old_mode) char (*);
dcl (rcard varying, bcard based (bufp)) char (80);

dcl  event fixed bin (71);
dcl  code fixed bin (35);
dcl  error_table_$not_attached fixed bin (35) ext;

dcl 1 modes aligned,
      2 len fixed bin,
      2 str char (256);

dcl  g115_util_$set_ptr entry (ptr),
     g115_util_$get_data_ptr entry (fixed bin) returns (ptr),
     g115_util_$conv_card entry (char (*) varying),
     g115_control_$init entry (char (*), fixed bin, fixed bin (35)),
     g115_control_$detach entry (fixed bin, fixed bin(35)),
     g115_io_$read entry (fixed bin, ptr, fixed bin, fixed bin, fixed bin, fixed bin (35)),
     g115_io_$write entry (fixed bin, ptr, fixed bin, fixed bin, fixed bin, fixed bin (35)),
     hcs_$tty_index entry (char (*), fixed bin, fixed bin, fixed bin (35)),
     hcs_$tty_event entry (fixed bin, fixed bin(71), fixed bin, fixed bin(35)),
     hcs_$tty_abort entry (fixed bin, fixed bin, fixed bin, fixed bin(35)),
     hcs_$tty_state entry (fixed bin, fixed bin, fixed bin(35)),
     hcs_$tty_order entry (fixed bin, char (*), ptr, fixed bin, fixed bin(35)),
     hcs_$tty_detach_new_proc entry (fixed bin, bit (36) aligned, fixed bin, fixed bin (35));



%include g115_data;



as_index: entry (device, t_twx, state, code);

	call hcs_$tty_index (device, t_twx, state, code);
	if code ^= 0 then return;

	call g115_control_$init (device, t_twx, code);
	return;


as_event: entry (t_twx, event, state, code);

	call init_device;
	g115_data.as_ev_chan = event;
	call hcs_$tty_event (t_twx, event, state, code);
	return;


as_order: entry (t_twx, order, orderp, state, code);

	call hcs_$tty_order (t_twx, order, orderp, state, code);
	return;


as_changemode: entry (t_twx, new_mode, old_mode, code);

	modes.len = length (modes.str);
	modes.str = new_mode;
	call hcs_$tty_order (t_twx, "modes", addr (modes), istate, code);
	old_mode = modes.str;
	return;


as_state: entry (t_twx, state, code);

	call hcs_$tty_state (t_twx, state, code);
	return;


as_abort: entry (t_twx, asw, state, code);

	call hcs_$tty_abort (t_twx, asw, state, code);
	return;


as_detach: entry (t_twx, dflag, state, code);

	call init_device;
	call g115_control_$detach (t_twx, code);
	state = 1;
	return;


as_detach_new_proc: entry (t_twx, process_id, state, code);

	call hcs_$tty_detach_new_proc (t_twx, process_id, state, code);
	return;


as_read:	entry (t_twx, bufp, aoffset, anelem, anelemt, state, code);

	call init_device;
	call g115_util_$conv_card (rcard);		/* get and convert a card for the as */
	bcard = rcard;				/* return it */
	anelemt = length (rcard);
	return;



as_write:
as_write_force: entry (t_twx, bufp, aoffset, anelem, anelemt, state, code);

	call init_device;
	call g115_io_$write (t_twx, bufp, aoffset, anelem, anelemt, code);
	return;



init_device: proc;

	data_ptr = g115_util_$get_data_ptr (t_twx);
	if data_ptr = null then do;
	     code = error_table_$not_attached;
	     go to error;
	end;
	g115_data.no_block = "1"b;
	call g115_util_$set_ptr (data_ptr);
	state = 5;
	code = 0;
	return;

     end;

error:	return;

  end;
