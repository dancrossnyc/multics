/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

sort_strings_: proc (sptr, scount);

/*
   Algorithm 347
   AN EFFICIENT ALGORITHM FOR SORTING WITH MINIMAL STORAGE
   Richard C. Singleton
   CACM 12, Number 3, March 1969, pp. 185-7

   Converted to Multics PL/I by Paul A. Green - April 6, 1974

   Modified to sort adjustable character strings instead of fixed binary numbers
   by Jerry Stern - May 30, 1974
*/

dcl  sptr ptr;					/* pointer to array of string pointers and lengths */
dcl  scount fixed bin (24);				/* number of strings */

dcl 1 A (scount) aligned based (Ap) like t;		/* array of string pointers and lengths */
dcl  Ap ptr;					/* pointer to A */

dcl 1 t aligned,					/* temporary to hold one entry from A */
    2 p ptr unal,					/* pointer to string */
    2 l fixed bin (24);				/* length of string */

dcl 1 swap_temp aligned like t;

dcl  cstring char (262144) based;			/* template to reference a string described in A or t */

dcl (first, last, median, low, high) fixed bin (24);

dcl  depth fixed bin;

dcl 1 stack (0:20) aligned,
    2 first fixed bin (24),
    2 last fixed bin (24);

dcl (divide, substr) builtin;


	Ap = sptr;
	depth = 0;
	first = 1;
	last = scount;
	go to L4;


L1:	median = divide (first + last, 2, 24, 0);
	t = A (median);
	low = first;
	high = last;

	if substr (A (first).p -> cstring, 1, A (first).l) > substr (A (median).p -> cstring, 1, A (median).l)
	     then do;
	     A (median) = A (first);
	     A (first) = t;
	     t = A (median);
	end;

	if substr (A (last).p -> cstring, 1, A (last).l) < substr (A (median).p -> cstring, 1, A (median).l)
	     then do;
	     A (median) = A (last);
	     A (last) = t;
	     t = A (median);

	     if substr (A (first).p -> cstring, 1, A (first).l) > substr (A (median).p -> cstring, 1, A (median).l)
		then do;
		A (median) = A (first);
		A (first) = t;
		t = A (median);
	     end;

	end;

L2:	do high = high -1 by -1
		while (substr (A (high).p -> cstring, 1, A (high).l) > substr (t.p -> cstring, 1, t.l));
	end;

	do low = low +1 by 1
		while (substr (A (low).p -> cstring, 1, A (low).l) < substr (t.p -> cstring, 1, t.l));
	end;

	if low <= high then do;
	     swap_temp = A (high);
	     A (high) = A (low);
	     A (low) = swap_temp;
	     go to L2;
	end;

	if (high - first) > (last - low) then do;
	     stack.first (depth) = first;
	     stack.last (depth) = high;
	     first = low;
	end;

	else do;
	     stack.first (depth) = low;
	     stack.last (depth) = last;
	     last = high;
	end;

	depth = depth +1;

L4:	if (last - first) > 10 then go to L1;

	if first = 1 then
	     if first < last then go to L1;

	do first = first +1 to last;
	     t = A (first);
	     do low = first -1 by -1
		     while (substr (A (low).p -> cstring, 1, A (low).l) > substr (t.p -> cstring, 1, t.l));
		A (low +1) = A (low);
	     end;
	     A (low +1) = t;
	end;


	depth = depth -1;
	if depth >= 0 then do;
	     first = stack.first (depth);
	     last = stack.last (depth);
	     go to L4;
	end;
	return;

     end sort_strings_;
