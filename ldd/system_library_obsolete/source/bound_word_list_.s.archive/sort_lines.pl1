/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

sort_lines: sl: procedure;

/* Written by Jerry Stern */

dcl (segp, tp1, tp2, insegp, outp) ptr init (null),
    (i, j, seglen) fixed bin (24),
     bc fixed bin (24),
     ap ptr,
    (al, nargs, argno) fixed bin,
     arg char (al) based (ap),
     code fixed bin (35),
    (lines, olines, fi, li, fj, lj) fixed bin (24),
    (max_chars, max_lines) fixed bin (24),
    (brief, unique, ao, got_pname) bit (1) aligned,
     ename char (32),
     dirname char (168),
     whoami char (11) varying,
     cleanup condition,
     lc char (26) aligned int static init ("abcdefghijklmnopqrstuvwxyz"),
     uc char (26) aligned int static init ("ABCDEFGHIJKLMNOPQRSTUVWXYZ"),
     nl char (1) aligned int static init ("
");

dcl 1 c based aligned,
    2 a (seglen) char (1) unaligned;

dcl  seg char (seglen) based aligned;

dcl 1 A (131072) aligned based (Ap),
    2 p ptr unal,
    2 l fixed bin (24);

dcl  Ap ptr init (null);
dcl  sys_info$max_seg_size ext fixed bin (24);
dcl  subroutine_sw bit (1) aligned;
dcl  ch_string char (string_len) based;
dcl  string_len fixed bin (24);
dcl (pi, pj) ptr;

dcl  expand_path_ ext entry (ptr, fixed bin, ptr, ptr, fixed bin (35)),
     error_table_$noarg ext fixed bin (35),
     error_table_$bigarg ext fixed bin (35),
     error_table_$fatal_error ext fixed bin (35),
     hcs_$delentry_seg ext entry (ptr, fixed bin (35)),
     hcs_$terminate_noname ext entry (ptr, fixed bin (35)),
     hcs_$truncate_seg ext entry (ptr, fixed bin, fixed bin (35)),
     hcs_$set_bc_seg ext entry (ptr, fixed bin (24), fixed bin (35)),
     cu_$arg_ptr ext entry (fixed bin, ptr, fixed bin) returns (fixed bin (35)),
     com_err_ ext entry options (variable),
     ioa_ ext entry options (variable),
     hcs_$initiate_count ext entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35)),
     hcs_$make_seg ext entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35)),
     sort_strings_ ext entry (ptr, fixed bin (24));

dcl (addr, divide, null, substr, translate, index) builtin;


	whoami = "sort_lines";			/* remember entry point name */
	brief, unique, ao, got_pname, subroutine_sw = "0"b; /* init command options, etc. */

	do argno = 1 by 1 while (cu_$arg_ptr (argno, ap, al) = 0); /* scan arguments */
	     if substr (arg, 1, 1) ^= "-" then do;	/* not an option, must be pathname */
		if got_pname then go to badarg;	/* already have pathname, user goofed */
		call expand_path_ (ap, al, addr (dirname), addr (ename), code);
		if code ^= 0 then do;
		     call com_err_ (code, whoami, arg);
		     return;
		end;
		got_pname = "1"b;
	     end;
	     else if arg = "-uq" then unique = "1"b;	/* unique option requested */
	     else if arg = "-unique" then unique = "1"b;	/* " */
	     else if arg = "-bf" then brief = "1"b;	/* brief option requested */
	     else if arg = "-brief" then brief = "1"b;	/* " */
	     else if arg = "-ao" then ao = "1"b;	/* alphabetical order option requested */
	     else if arg = "-alphabet_order" then ao = "1"b; /* " */
	     else do;				/* I give up, what is it? */
badarg:		call com_err_ (0, whoami, "Unrecognized argument: ^a", arg);
		return;
	     end;
	end;

	if ^got_pname then do;			/* no pathname given */
	     call com_err_ (error_table_$noarg, whoami);
	     return;
	end;

	go to common;


sort_lines_: entry (a_insegp, a_seglen, a_lines, a_outp, a_unique, a_ao, a_code);

dcl (a_insegp, a_outp) ptr;
dcl (a_seglen, a_lines) fixed bin (24);
dcl (a_unique, a_ao) bit (1) aligned;
dcl  a_code fixed bin (35);

	whoami = "sort_lines_";			/* remember entry point name */
	subroutine_sw, brief = "1"b;			/* set subroutine switch, brief option implicit */
	insegp = a_insegp;				/* get input seg ptr */
	seglen = a_seglen;				/* get input seg length in chars */
	outp = a_outp;				/* get output seg ptr */
	unique = a_unique;				/* get unique switch */
	ao = a_ao;				/* get alphabetical order switch */
	a_code = 0;				/* set error code */


common:	on cleanup call cleaner;

	if ^subroutine_sw then do;
	     call hcs_$initiate_count (dirname, ename, "", bc, 0, insegp, code); /* initiate input segment */
	     if insegp = null then go to err_exit;	/* check for error */
	     outp = insegp;
	     seglen = divide (bc, 9, 18, 0);		/* get segment length in characters */
	end;

	max_chars = 4 * sys_info$max_seg_size;

	call make_temp_seg ("sl_temp0_", Ap);		/* make temp to hold array of line ptrs and lengths */
	call make_temp_seg ("sl_temp1_", tp1);		/* make temp to copy lines into */
	if ao then				/* if alphabetical sorting requested */
	     if seglen > divide (max_chars, 2, 24, 0) then /* if more than half a segment of input */
		call make_temp_seg ("sl_temp2_", tp2);	/* make another temp to copy lines into */


make_temp_seg: proc (tname, tp);			/* procedure to create a temp seg in the process directory */

dcl  tname char (32);				/* name of temp seg */
dcl  tp ptr;					/* ptr to temp seg */

	     call hcs_$make_seg ("", tname, "", 01011b, tp, code);
	     if tp = null then
		if subroutine_sw then do;		/* return error code */
		     a_code = error_table_$fatal_error;
		     go to finish;
		end;
		else do;				/* set up for com_err_ call */
		     ename = tname;
		     dirname = "(process directory)";
		     go to err_exit;
		end;

	end make_temp_seg;


/* The following loop parses the input segment into lines,
   copies each line to a temp seg, and stores a pointer to and
   the length of each line in an array.  However, if alphabetical
   sorting is requested, then each line is doubled in length,
   the second half being the original line, and the first half
   being the line with upper case letters translated to lower case.
   This causes ordinary ASCII sorting to result in alphabetical
   sorting.  Two temp segs are sometimes needed to hold a
   "doubled" copy of the input seg. */

	segp = tp1;				/* set temp ptr to first temp seg */
	fi, fj = 1;				/* init input and temp seg offsets */
	max_lines = divide (max_chars, 8, 24, 0);	/* need 2 words per line in the array segment */
	do lines = 1 to max_lines while (fi < seglen);	/* scan input until exhausted */
	     p (lines) = addr (segp -> c.a (fj));	/* save  line ptr */
	     li = index (substr (insegp -> seg, fi), nl); /* get line length */
	     if li = 0 then li = seglen + 1 - fi;	/* if final newline missing, rest of input is last line */
	     if ao then do;				/* if alphabetical sorting */
		lj = 2 * li;			/* double line length */
		if fj + lj > max_chars then do;	/* will this line fit in the temp seg ? */
		     segp = tp2;			/* begin using second temp seg */
		     p(lines) = tp2;		/* save new line ptr */
		     fj = 1;			/* reinitialize temp seg offset */
		end;
		substr (segp -> seg, fj, li) = translate (substr (insegp -> seg, fi, li), lc, uc);
		fj = fj + li;			/* after moving translated line, increment temp seg offset */
	     end;
	     else lj = li;				/* line length unchanged */
	     l (lines) = lj;			/* save line length */
	     substr (segp -> seg, fj, li) = substr (insegp -> seg, fi, li); /* copy line to temp seg */
	     fj = fj + li;				/* increment temp seg offset */
	     fi = fi + li;				/* increment input seg offset */
	end;

	if lines > max_lines then do;			/* we ran out of room in the array */
	     if subroutine_sw then a_code = error_table_$bigarg; /* punt */
	     else call com_err_ (0, whoami, "Number of lines exceeds limit");
	     go to finish;
	end;
	lines = lines -1;


	call sort_strings_ (Ap, lines);		/* sort it */


/* Now copy lines to output seg  (which could be the input seg) */

	j = 1;					/* init output seg offset */
	olines, lj = 0;				/* init output line count, previous line length */
	do i = 1 to lines;				/* loop thru lines */
	     pi = p (i);				/* get ptr to current line */
	     string_len = l (i);			/* get length of current line */
	     if ao then do;				/* line length was doubled for alphabetical sorting */
		li = divide (string_len, 2, 24, 0);	/* halve line length */
		fi = li + 1;			/* get index of second half of line */
	     end;
	     else do;
		li = string_len;			/* line length unchanged */
		fi = 1;				/* line position unchanged, i.e. index is 1 */
	     end;
	     if unique then				/* don't copy this line if it's a duplicate */
		if li = lj then			/* current line length = previous line length ? */
		     if substr (pi -> ch_string, fi, li) = substr (pj -> ch_string, fi, li) then /* lines match ? */
			go to skip;		/* skip duplicate line */
	     substr (outp -> seg, j, li) = substr (pi -> ch_string, fi, li); /* copy line */
	     pj = pi;				/* save line ptr */
	     lj = li;				/* save line length */
	     j = j + li;				/* increment output seg offset */
	     olines = olines + 1;			/* increment output line count */
skip:	end;
	seglen = j-1;

	if subroutine_sw then do;
	     a_seglen = seglen;			/* return output seg length */
	     a_lines = olines;			/* return number of output lines */
	end;

	else do;					/* for sort_lines command, take care of input/output seg */
	     if bc ^= 9*seglen then do;		/* if seg length changed */
		call hcs_$truncate_seg (outp, divide (seglen+3, 4, 21, 0), code); /* truncate to new length */
		if code ^= 0 then go to err_exit;
		call hcs_$set_bc_seg (outp, 9* seglen, code); /* set bitcount */
		if code ^= 0 then go to err_exit;
	     end;
	     if ^brief then call ioa_ ("number of lines = ^d", olines); /* print number of lines */
	end;

finish:	call cleaner;

cleaner:	proc;					/* cleanup handler */
	     do segp = Ap, tp1, tp2;
		if segp ^= null then call hcs_$delentry_seg (segp, code); /* delete temp segs */
	     end;
	     if ^subroutine_sw then
		if insegp ^= null then call hcs_$terminate_noname (insegp, code); /* terminate original segment */
	end cleaner;

	return;

err_exit:	call com_err_ (code, whoami, "^a>^a", dirname, ename);
	if subroutine_sw then a_code = code;
	go to finish;


     end sort_lines;
