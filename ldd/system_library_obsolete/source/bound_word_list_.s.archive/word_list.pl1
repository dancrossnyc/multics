/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

word_list: wl: proc;

/* Based on an idea by John Gilson
   Written by Jerry Stern          */
/* modified 9/3/75 by J. Stern to make find_word print line numbers */
/* Modified 760413 by PG to make find_word take an arbitrary number of words */
/* Modified 760825 by PG to add -header, and sort words to be found */
/* modified 10/1/76 by J. Stern to add correct_words entry */
/* modified 10/8/76 by J. Stern to remove underlining */

dcl (ap, nmp, mpp, mlp, clp, cpp, system_area_ptr) ptr;
dcl  system_area area (65536) based (system_area_ptr);
dcl  al fixed bin;
dcl  arg char (al) based (ap);
dcl  match_word char (match_len (wordx)) based (match_ptr (wordx));
dcl  match_len (n_words) based (mlp) fixed bin;
dcl  match_ptr (n_words) based (mpp) ptr;
dcl  corr_word char (corr_len (wordx)) based (corr_ptr (wordx));
dcl  corr_len (n_words) based (clp) fixed bin;
dcl  corr_ptr (n_words) based (cpp) ptr;
dcl  num_matches (n_args) based (nmp) fixed bin;
dcl (argno, n_args, n_words, wordx) fixed bin;
dcl  nosort bit (1) aligned init ("0"b);
dcl (brief, long) bit (1) aligned init ("0"b);
dcl  header_sw bit (1) aligned init ("0"b);
dcl (wl_sw, fwd_sw, cow_sw) bit (1) aligned init ("0"b);
dcl  got_pname bit (1) aligned init ("0"b);
dcl  invalid_sw bit (1) aligned;
dcl  count_lines bit (1) aligned;
dcl  ul_sw bit (1) aligned;
dcl  whoami char (16) varying;
dcl  ename char (32);
dcl  dname char (168);
dcl  cleanup condition;
dcl  code fixed bin (35);
dcl  bc fixed bin (24);
dcl (input_ptr, temp_ptr, output_ptr) ptr init (null);
dcl (input_len, temp_len) fixed bin (24);
dcl  input_cs char (input_len) based (input_ptr);
dcl  temp_cs char (1048576) based (temp_ptr);
dcl  strip_ptr ptr;
dcl  strip_cs char (1048576) based (strip_ptr);
dcl (token_ix, token_len, strip_ix, strip_len, word_ix, word_len, out_word_len, ul_ix, ul_len) fixed bin (24);
dcl (i, j, n, nli, last, line, output_words) fixed bin (24);
dcl  ul_buf char (300);
dcl  ul_cs char (ul_len) based (addr (ul_buf));
dcl  delims char (5) aligned int static init (" 	
");						/* SPACE, HT, VT, FF, NL */
dcl (left_delim, right_delim) char (4) aligned;
dcl  delim_name (5) char (4) aligned int static init ("<SP>", "<HT>", "<VT>", "<FF>", "<NL>");
dcl  nl char (1) aligned int static init ("
");

dcl (error_table_$noarg,
     error_table_$wrong_no_of_args,
     error_table_$badopt,
     error_table_$bigarg,
     error_table_$zero_length_seg,
     error_table_$entlong) fixed bin (35) ext;

dcl (addr, divide, index, null, reverse, search, substr, sum, verify, length) builtin;
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  expand_pathname_ ext entry (char (*), char (*), char (*), fixed bin (35));
dcl  get_system_free_area_ entry (ptr);
dcl  hcs_$initiate_count ext entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35));
dcl  com_err_ ext entry options (variable);
dcl  ioa_ ext entry options (variable);
dcl  get_wdir_ ext entry returns (char (168));
dcl  hcs_$make_seg ext entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$truncate_seg ext entry (ptr, fixed bin (21), fixed bin (35));
dcl  hcs_$delentry_seg ext entry (ptr, fixed bin (35));
dcl  hcs_$set_bc_seg ext entry (ptr, fixed bin (24), fixed bin (35));
dcl  hcs_$terminate_noname ext entry (ptr, fixed bin (35));
dcl  sort_lines_ ext entry (ptr, fixed bin (24), fixed bin (24), ptr, bit (1) aligned, bit (1) aligned, fixed bin (35));

	wl_sw = "1"b;				/* remember we came in via the word_list entry */
	whoami = "word_list";
	system_area_ptr = null;
	nmp = null;				/* these arrays are not used in word_list */
	mpp = null;
	mlp = null;
	clp = null;
	cpp = null;
	call cu_$arg_count (n_args);			/* How many arguments? */
	if n_args < 1 then do;			/* need at least one */
word_list_usage:
	     code = error_table_$noarg;
word_list_usage_2:
	     call com_err_ (code, whoami, "^/Usage: word_list path -control_args-");
	     return;
	end;
	go to join;

find_word: fwd: entry;

	fwd_sw = "1"b;				/* remember we came in via the find_word entry */
	whoami = "find_word";
	call cu_$arg_count (n_args);			/* get number of arguments */
	if n_args < 2 then do;			/* need at least two */
find_word_usage:
	     call com_err_ (error_table_$noarg, whoami, "^/Usage: find_word path word1 word2 ... wordN -control_args-");
	     return;
	end;

	clp, cpp = null;
	n_words = n_args;				/* n_args is upper bound on number of match words */
	go to allocations;

correct_words: cow: entry;

	cow_sw = "1"b;				/* remember we came in via the correct_words entry */
	whoami = "correct_words";
	call cu_$arg_count (n_args);			/* get number of arguments */
	if n_args < 3 then do;
correct_words_usage:
	     call com_err_ (error_table_$noarg, whoami, "^/Usage:  correct_words path word1 correction1 ... wordN correctionN -control_args-");
	     return;
	end;
	n_words = divide (n_args, 2, 17, 0);		/* half n_args is upper bound on number of word/correction pairs */
allocations:
	call get_system_free_area_ (system_area_ptr);
	allocate match_len in (system_area);
	allocate match_ptr in (system_area);
	allocate num_matches in (system_area);
	num_matches (*) = 0;
	if ^cow_sw then go to join;
	allocate corr_len in (system_area);
	allocate corr_ptr in (system_area);

join:	n_words = 0;
	do argno = 1 by 1 to n_args;
	     call cu_$arg_ptr (argno, ap, al, code);
	     if substr (arg, 1, 1) ^= "-" then do;	/* not an option */
		if ^got_pname then do;		/* this should be a pathname */
		     call expand_pathname_ (arg, dname, ename, code);
		     if code ^= 0 then do;
			call com_err_ (code, whoami, arg);
			return;
		     end;
		     got_pname = "1"b;
		end;
		else if wl_sw then do;
		     code = error_table_$wrong_no_of_args;
		     go to word_list_usage_2;
		end;
		else do;				/* this should be a match word */
insert_word:	     do wordx = 1 to n_words while (match_word < arg); /* find place to insert arg. */
		     end;

		     do j = n_words to wordx by -1;	/* make room for insertion. */
			match_ptr (j + 1) = match_ptr (j);
			match_len (j + 1) = match_len (j);
			if cow_sw then do;
			     corr_ptr (j + 1) = corr_ptr (j);
			     corr_len (j + 1) = corr_len (j);
			end;
		     end;
		     match_ptr (wordx) = ap;		/* save ptr to current word */
		     match_len (wordx) = al;		/* save length of current word */
		     n_words = n_words + 1;
		     if cow_sw then do;
			argno = argno +1;
			if argno > n_args then go to correct_words_usage;
			call cu_$arg_ptr (argno, ap, al, code);
			corr_ptr (wordx) = ap;
			corr_len (wordx) = al;
		     end;
		end;
	     end;
	     else if arg = "-word" then do;
		argno = argno + 1;
		if argno > n_args then
		     if cow_sw then go to correct_words_usage;
		     else go to find_word_usage;
		call cu_$arg_ptr (argno, ap, al, code);
		go to insert_word;
	     end;
	     else if wl_sw & (arg = "-no_sort" | arg = "-ns") then nosort = "1"b;
	     else if arg = "-bf" | arg = "-brief" then brief = "1"b;
	     else if arg = "-he" | arg = "-header" then header_sw = "1"b;
	     else if cow_sw & (arg = "-lg" | arg = "-long") then long = "1"b;
	     else do;
		call com_err_ (error_table_$badopt, whoami, "^a", arg);
		return;
	     end;
	end;

	if ^got_pname				/* pathname missing */
	| (^wl_sw & n_words = 0)			/* match word(s) missing */
	then if wl_sw				/* word_list entry */
	     then go to word_list_usage;		/* complain about word_list */
	     else if cow_sw
	     then go to correct_words_usage;		/* complain about correct_words */
	     else go to find_word_usage;		/* complain about find_word */

	if ^wl_sw then do;				/* check validity of word arguments */
	     invalid_sw = "0"b;			/* assume all word arguments are valid */
	     do wordx = 1 to n_words;
		call validate_word (match_word);
		if cow_sw then call validate_word (corr_word);
	     end;
	     if invalid_sw then return;
	end;

	count_lines = fwd_sw | (cow_sw & long);		/* count lines for find_word or correct_words with long option */

	on cleanup call cleaner;

	call hcs_$initiate_count (dname, ename, "", bc, 0, input_ptr, code); /* initiate input seg */
	if input_ptr = null then go to err_exit;
	input_len = divide (bc, 9, 21, 0);		/* get character count */
	if input_len = 0 then do;
	     code = error_table_$zero_length_seg;
	     go to err_exit;
	end;

	if wl_sw then do;				/* if word_list entry */
	     i = 34 - verify (reverse (ename), " ");
	     if i > 30 then do;			/* make sure we can add ".wl" suffix to entry name */
		call com_err_ (error_table_$entlong, whoami, "^a.wl", ename);
		go to finish;
	     end;
	     substr (ename, i, 3) = ".wl";

	     dname = get_wdir_ ();
	     call hcs_$make_seg (dname, ename, "", 01010b, output_ptr, code); /* create output seg in working dir */
	     if output_ptr = null then go to err_exit;

	     if nosort then temp_ptr = output_ptr;	/* if nosort, use output seg directly */
	     else do;				/* otherwise, create a temp output seg */
make_temp_seg:	call hcs_$make_seg ("", "wl_temp_", "", 01010b, temp_ptr, code);
		if temp_ptr = null then do;
		     ename = "wl_temp_";
		     dname = "(process directory)";
		     go to err_exit;
		end;
	     end;
	end;
	else if cow_sw then go to make_temp_seg;

	if header_sw
	then call ioa_ ("^/^-^a>^a^/", dname, ename);

	strip_ptr = input_ptr;			/* strip words in input string */
	line = 1;					/* init line counter */
	output_words = 0;				/* init word counter */
	temp_len = 0;				/* init length of temp seg */
	token_ix = 0;				/* init token index */
	last = 0;					/* init index of last input seg char moved to temp seg */

	do while (token_ix < input_len);		/* scan until input exhausted */
	     n = verify (substr (input_cs, token_ix+1), delims); /* skip delimiters */
	     if n = 0 then go to end_of_data;

	     if count_lines then do;			/* count newlines skipped */
		i = token_ix;			/* index of last token delimiter */
		j = n;				/* number of delimiters */
		if token_ix = 0 then do;		/* start of input, no previous token delimiter */
		     i = i +1;
		     j = j -1;
		end;
		do while (j > 0);
		     nli = index (substr (input_cs, i, j), nl);
		     if nli ^= 0 then do;		/* found one */
			line = line + 1;
			i = i + nli;
			j = j -nli;
		     end;
		     else j = 0;
		end;
	     end;

	     token_ix = token_ix + n;			/* advance index past delimiters */
	     token_len = search (substr (input_cs, token_ix+1), delims); /* find end-of-token delimiter */
	     if token_len = 0 then			/* no delimiter */
		token_len = input_len + 1 - token_ix;	/* use end of input as delimiter */

	     strip_ix = token_ix;
	     strip_len = token_len;
	     call strip_punc;			/* strip surrounding punctuation from token */
	     call check_ul;				/* check for underlining */

	     if ul_sw then do;			/* the word was underlined */
		ul_ix = word_ix;
		ul_len = word_len;
		strip_ptr = addr (ul_buf);		/* prepare to strip words in ul_buf */
		i = 0;
		do while (i < ul_len);		/* rescan token to pick out words */
		     n = verify (substr (ul_cs, i+1), " "); /* skip spaces */
		     if n = 0 then go to end_of_ul;
		     i = i + n;			/* advance index past spaces */
		     n = index (substr (ul_cs, i+1), " "); /* find next space */
		     if n = 0 then			/* no more spaces */
			n = ul_len +1 -i;		/* use end of token as delimiter */
		     strip_ix = i;
		     strip_len = n;
		     call strip_punc;
		     word_len = divide (word_len, 3, 24, 0); /* compute de-underlined word length */
		     do j = 1 to word_len -1;		/* squeeze de-underlined word together */
			substr (ul_buf, word_ix + j, 1) = substr (ul_buf, word_ix + (j*3), 1);
		     end;
		     if wl_sw then call output_word;
		     else call test_word;
		     i = i + n;
		end;
end_of_ul:	strip_ptr = input_ptr;
	     end;

	     else					/* no underlining to worry about */
	     if wl_sw then call output_word;
	     else call test_word;

	     token_ix = token_ix + token_len;		/* advance index past current token */
	end;

end_of_data:
	if cow_sw then
	     if last < input_len then
		if last > 0 then do;

/* For correct_words, if there are any chars left after the last
   correction, move them to the temp seg.  Then copy the whole
   temp seg into the original input seg (which becomes the output seg). */

		     n = input_len - last;
		     substr (temp_cs, temp_len+1, n) = substr (input_cs, last+1, n);
		     temp_len = temp_len + n;
		     output_ptr = input_ptr;
		     input_ptr = null;
		     substr (output_ptr -> temp_cs, 1, temp_len) = substr (temp_cs, 1, temp_len);
		end;

	if wl_sw then do;				/* if word_list entry */
	     if ^brief then
		call ioa_ ("total number of words = ^d", output_words); /* print word count */
	     if ^nosort then do;			/* if nosort option not requested */
		call sort_lines_ (temp_ptr, temp_len, output_words, output_ptr, "1"b, "1"b, code);
						/* sort words and copy to output seg */
		if code ^= 0 then do;
		     if code = error_table_$bigarg then call com_err_ (0, whoami, "Total number of words exceeds sorting limit.");
		     else call com_err_ (code, whoami, "Unable to sort word list.");
		     go to finish;
		end;
		if ^brief then
		     call ioa_ ("number of unique words = ^d", output_words); /* print unique word count */
	     end;
	end;

	if wl_sw | (cow_sw & last > 0) then do;
	     call hcs_$truncate_seg (output_ptr, divide (temp_len+3, 4, 21, 0), code); /* truncate output seg to new length */
	     if code ^= 0 then go to err_exit;
	     call hcs_$set_bc_seg (output_ptr, 9*temp_len, code); /* set new bitcount */
	     if code ^= 0 then go to err_exit;
	end;

	if ^wl_sw
	then if sum (num_matches (*)) = 0
	     then call ioa_ ("No ^[corrections^;matches^].", cow_sw); /* if no corrections or matches, say so */
	     else do wordx = 1 to n_words;		/* see if any other words were missed */
		if num_matches (wordx) = 0
		then call ioa_ ("No ^[corrections^;matches^] for ""^a"".", cow_sw, match_word);
		else if cow_sw
		then if ^(brief | long)
		     then call ioa_ ("^d correction^[s^] for ""^a"".", num_matches (wordx), (num_matches (wordx) ^= 1), match_word);
	     end;

finish:	call cleaner;
	return;

err_exit:	call com_err_ (code, whoami, "^a>^a", dname, ename); /* moan */
	go to finish;


/*  */


validate_word: proc (word);

dcl  word char (*);

/* checks validity of words supplied as arguments to commands
   a word must not contain delimiters or surrounding punctuation and must not be underlined
*/

	     if search (word, delims) ^= 0		/* word contains delimiters */
	     then do;
bad_word:		call com_err_ (0, whoami, """^a"" is not a word.", word);
		invalid_sw = "1"b;			/* the word is invalid */
		return;
	     end;
	     strip_ptr = addr (word);
	     strip_ix = 1;
	     strip_len = length (word);
	     call strip_punc;			/* strip surrounding punctuation from argument word */
	     if word_ix > 1 | word_len < strip_len	/* some punctuation was removed */
	     then go to bad_word;
	     call check_ul;				/* check word for underlining */
	     if ul_sw then go to bad_word;

	end validate_word;





strip_punc: proc;

/* removes surrounding punctuation from a string
   the input string is given by substr(strip_cs, strip_ix, strip_len)
   the output string is given by substr(strip_cs, word_ix, word_len)
*/

dcl  n fixed bin (24);

	     n = verify (substr (strip_cs, strip_ix, strip_len), "([{""") -1; /* check for leading punctuation */
	     if n = -1 then go to no_strip;		/* if all punctuation, do not strip */
	     word_ix = strip_ix + n;
	     word_len = strip_len - n;
	     n = verify (reverse (substr (strip_cs, word_ix, word_len)), ")]}""!,.:;?")-1; /* check for trailing punctuation */
	     if n = -1 then do;			/* if all punctuation, do not strip */
no_strip:		word_ix = strip_ix;
		word_len = strip_len;
		return;
	     end;
	     word_len = word_len - n;
	     if word_len >= 2 then do;		/* enough room for underlining */
		if strip_ix < word_ix then
		     if substr (strip_cs, word_ix, 2) = "_"
		     then do;			/* do not strip underlined leading punctuation */
			word_ix = word_ix -1;
			word_len = word_len + 1;
		     end;
		if word_ix + word_len < strip_ix + strip_len then
		     if substr (strip_cs, word_ix + word_len -2, 2) = "_"
		     then word_len = word_len +1;	/* do not strip underlined trailing punctuation */
	     end;

	end strip_punc;





check_ul:	proc;

/* checks word for continuous underlining
   de-underlined string is assembled in ul_buf
   underlining is replaced as follows:
   X<backspace><underline> -> XXX
   <underline><backspace>X -> XXX
   underline without adjacent backspace -> space
   the input word is given by substr(strip_cs, word_ix, word_len)
*/

dcl  i fixed bin;

	     ul_sw = "0"b;				/* assume word is not underlined */
	     if word_len + 2 <= length (ul_buf)		/* word fits in underline processing buffer */
	     & index (substr (strip_cs, word_ix, word_len), "") ^= 0
	     then do;				/* word contains backspaces, check for underlining */
		substr (ul_buf, 1, word_len) = substr (strip_cs, word_ix, word_len); /* copy stripped token */
		i = 0;
		do while (i < word_len);		/* scan token */
		     if i+3 > word_len then go to check_single_ul;
		     if substr (ul_buf, i+1, 2) = "_"
		     then do;
			substr (ul_buf, i+1, 1),
			     substr (ul_buf, i+2, 1) = substr (ul_buf, i+3, 1);
			i = i + 3;
		     end;
		     else if substr (ul_buf, i+2, 2) = "_"
		     then do;
			substr (ul_buf, i+2, 1),
			     substr (ul_buf, i+3, 1) = substr (ul_buf, i+1, 1);
			i = i +3;
		     end;
		     else
check_single_ul:	     if substr (ul_buf, i+1, 1) = "_"
		     then do;
			substr (ul_buf, i+1, 1) = " ";
			i = i + 1;
		     end;
		     else return;			/* not standard underlined string */
		end;
		ul_sw = "1"b;			/* yup, that was an underlined string */
	     end;

	end check_ul;





output_word: proc;

/* copies a word from the input seg to the temp seg
   max word size is 95 chars plus a trailing newline
   words exceeding 95 chars are truncated to 94 chars with a "?" appended
*/

	     if word_len > 95 then out_word_len = 94;	/* limit output words to 95 chars */
	     else out_word_len = word_len;
	     substr (temp_cs, temp_len+1, out_word_len) = substr (strip_cs, word_ix, out_word_len); /* copy word */
	     temp_len = temp_len + out_word_len;
	     if word_len > 95 then do;		/* oversize word */
		substr (temp_cs, temp_len+1, 1) = "?";	/* append "?" */
		temp_len = temp_len + 1;
	     end;
	     substr (temp_cs, temp_len+1, 1) = nl;	/* append newline */
	     temp_len = temp_len + 1;
	     output_words = output_words + 1;

	end output_word;





test_word: proc;

/* tests if current word matches any of the match words
   if a match if found, the action taken depends on whether find_word or correct_words was called
   for find_word, the line number of the current word is printed and
   if "-brief" was not specified, the word is printed with surrounding punctuation and delimiters
   for correct_words, the uncopied portion of the input string preceding the current word is copied to the temp seg
   if "-long" was specified, the line number of the current word is printed
*/

dcl  cc fixed bin (24);
dcl  i fixed bin;

/* Since the match_word array is in alphabetical (collating) order, we only have to
   search until we find the first word in the array that is greater than or equal to the
   current word. */

	     do wordx = 1 to n_words while (match_word < substr (strip_cs, word_ix, word_len));
	     end;

	     if wordx <= n_words
	     then if match_word = substr (strip_cs, word_ix, word_len)
		then do;
		     num_matches (wordx) = num_matches (wordx) + 1; /* we found a match, increment match count */
		     if cow_sw then do;		/* move chars before current word to temp seg and correct word */
			if ul_sw then do;		/* word was de-underlined */
			     word_ix = ul_ix + word_ix -1; /* get index of original word */
			     word_len = 3 * word_len; /* get length of original word */
			end;
			cc = word_ix -last -1;	/* compute number of unmoved chars before word_ix */
			substr (temp_cs, temp_len+1, cc) = substr (input_cs, last+1, cc); /* move 'em */
			last = last + cc + word_len;	/* recompute last char moved */
			temp_len = temp_len + cc;	/* number of chars in temp seg */
			if ^ul_sw then do;
			     substr (temp_cs, temp_len+1, length (corr_word)) = corr_word; /* drop in the correction */
			     temp_len = temp_len + length (corr_word);
			end;
			else do i = 1 to length (corr_word); /* underline the correction canonically */
			     if substr (corr_word, i, 1) < "_" then do;
				substr (temp_cs, temp_len +1, 1) = substr (corr_word, i, 1);
				temp_len = temp_len +1;
				substr (temp_cs, temp_len+1, 2) = "_";
				temp_len = temp_len + 2;
			     end;
			     else do;
				substr (temp_cs, temp_len +1, 2) = "_";
				temp_len = temp_len +2;
				substr (temp_cs, temp_len +1, 1) = substr (corr_word, i, 1);
				temp_len = temp_len +1;
			     end;
			end;
			if long then go to print_line_number;
		     end;
		     else if brief then
print_line_number:		if n_words = 1
			then call ioa_ ("^3d) line ^5d", num_matches (wordx), line);
			else call ioa_ ("^3d) line ^5d^-^a", num_matches (wordx), line, match_word);
		     else do;			/* print line number and token */
			if token_ix > 1 then
			     left_delim = delim_name (index (delims, substr (input_cs, token_ix-1, 1)));
			else left_delim = "";
			if token_ix + token_len <= input_len then
			     right_delim = delim_name (index (delims, substr (input_cs, token_ix+token_len, 1)));
			else right_delim = "";
			call ioa_ ("^3d) line ^5d^-^a^a^a", num_matches (wordx), line, left_delim,
			     substr (input_cs, token_ix, token_len), right_delim);
		     end;
		end;

	end test_word;





cleaner:	proc;					/* cleanup handler */

	     if nmp ^= null then do;
		free num_matches in (system_area);
		nmp = null;
	     end;
	     if mpp ^= null then do;
		free match_ptr in (system_area);
		mpp = null;
	     end;
	     if mlp ^= null then do;
		free match_len in (system_area);
		mlp = null;
	     end;
	     if cpp ^= null then do;
		free corr_ptr in (system_area);
		cpp = null;
	     end;
	     if clp ^= null then do;
		free corr_len in (system_area);
		clp = null;
	     end;
	     if ^nosort then			/* if temp_ptr points to temp seg */
		if temp_ptr ^= null then call hcs_$delentry_seg (temp_ptr, code); /* delete temp seg */
	     do input_ptr = input_ptr, output_ptr;
		if input_ptr ^= null then call hcs_$terminate_noname (input_ptr, code); /* terminate input  output segs */
	     end;
	end cleaner;

     end;
