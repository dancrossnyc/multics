/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


display_stack_: proc (odsp);


/*        Modified 3/82 by Rich Coppola to do a better job of validating stack ptrs
   to eliminate (to some extent) looping on stack trace. */

/*	Modified 7/80 by R. L. Coppola to add fwd trace arg and to attempt forward trace
   *	if reverse pointer is invalid. Also changed format of output to display seg and offset
   *	of the stack.
*/

% include ol_dump_struc;

dcl  ol_dump_util_$stk_validate_rev entry (ptr, ptr, ptr);
dcl  ol_dump_util_$stk_validate_fwd entry (ptr, ptr, ptr);
dcl  ol_dump_util_$dump_oct entry (ptr, fixed bin (18), fixed bin);
dcl  ol_dump_util_$p_valid entry (ptr) returns (bit (1));
dcl  ol_dump_util_$val_ptr entry (ptr) returns (char (16) aligned); /* :: */
dcl  ol_dump_util_$get_ptr entry (fixed bin, ptr, fixed bin (35), ptr); /* :: */
dcl  ol_dump_util_$get_segno entry (char (32) varying, ptr) returns (fixed bin); /* :: */
dcl  cv_oct_check_ entry (char (*), fixed bin) returns (fixed bin);
dcl  namef_ entry (ptr, ptr) returns (char (*));
dcl  display_frame_args_ entry (fixed bin, ptr, ptr, ptr);
dcl (ioa_, ioa_$nnl) entry options (variable);

dcl (i, j, code, segno, nxarg) fixed bin init (0);
dcl  ring fixed bin (3) unsigned init (0);
dcl  segln fixed bin (35) init (0);
dcl (substr, addrel, addr, null, rel, baseno, baseptr, length, verify, reverse, fixed) builtin;
dcl (p, nextsp, stkv, rptr, lptr, a_sb) ptr init (null);
dcl (rp_char, et_char, pr0_char) char (16) init ("");
dcl  (stkout, stkout2) char (168) init ("");
dcl (offset, offs) fixed bin (18) aligned init (0);
dcl (lg_sw, off_sw, arg_sw, fwd_sw, trm, fim_frame) bit (1) init ("0"b);


/*  */
	if argcnt < 1 then do;
stack_label:
	     call ioa_ ("stack (s) name|no|stack_<n>|(ring <n>) (offset) (fwd) (args) (lg)");
	     return;
	end;


	if arg (1) = "stack_ " | arg (1) = "stack" then
	     go to stack_label;

	if arg (1) = "ring" then do;			/* user wants to trace "stack ring n" */
	     if argcnt < 2 then			/* must specify ring number */
		go to stack_label;
	     segno = cv_oct_check_ ((arg (2)), code);
	     if code ^= 0 | segno > 7 then		/* ring numbers from 0 to 7 */
		go to stack_label;
	     ring = segno;				/* copy ring number */
	     if dsegp -> sdw.entry_bound = "0"b then do;	/* no stacks */
		call ioa_ ("ring ^o stack not found in process", ring);
		return;
	     end;
	     segno = bin (dsegp -> sdw.entry_bound || bit (ring)); /* cancat. ring to stack in dbr */
	     nxarg = 3;				/* nxt arg starts at 3 */
	end;
	else do;
	     nxarg = 2;				/* nxt arg starts at 2 */
	     segno = cv_oct_check_ ((arg (1)), code);	/* convert to binary */
	     if code ^= 0 then do;			/* maybe special name */
		segno = ol_dump_util_$get_segno (arg (1), odsp);
		if segno = -1 then return;
	     end;
	end;
	call ol_dump_util_$get_ptr (segno, a_sb, segln, odsp);
	if a_sb = null then return;
	sb = a_sb;
	fwd_sw, off_sw, arg_sw, lg_sw = "0"b;
	if argcnt >= nxarg then			/* if any more args */
	     do i = nxarg to argcnt;			/* get the args */
	     if verify (arg (i), "01234567") = 0 then do; /* if offset arg speicified */
		offset = cv_oct_check_ ((arg (i)), code);
		if code ^= 0 then
		     go to stack_label;
		off_sw = "1"b;
	     end;

	     else if arg (i) = "lg" then		/* user wants long oct dump */
		lg_sw = "1"b;

	     else if arg (i) = "args" then		/* user wants args displayed */
		arg_sw = "1"b;

	     else if arg (i) = "fwd" then		/* user wants to trace from beginning */
		fwd_sw = "1"b;

	     else go to stack_label;

end_args:	end;


	rptr = baseptr (segno);
	sp = null;

	call ioa_ ("^/Stack Begin PTR = ^p, Stack End PTR = ^p",
	     stack_header.stack_begin_ptr, stack_header.stack_end_ptr);

	if ^fwd_sw then
	     call ol_dump_util_$stk_validate_rev (sb, sp, stkv); /* validate threads from back ptr */
	if sp = null then do;			/* no luck from back ptr, try fwd */
	     call ol_dump_util_$stk_validate_fwd (sb, sp, stkv);
	     if stkv = null then do;			/* no luck at all */
		call ioa_ ("No valid stack frames laid on Segment #^o", segno);
		return;
	     end;

	     else if ^fwd_sw then do;			/* user wanted reverse trace but we must go fwd */
		fwd_sw = "1"b;			/* set fwd trace */
		call ioa_ ("Stack end pointer invalid. Trace will be forward. "); /* let him know */
	     end;
	end;

	if fwd_sw then sp = stkv;			/* reverse begin and end ptrs */
	if off_sw then				/* if user speicified offset */
	     sp = addrel (sb, offset);
	call ioa_ ("^/^3xADDR^5xRETURN POINTER^/^13tENTRY POINTER^/");

	trm = "0"b;
	do while (^trm);				/* go thru all the threads */
	     if ^fwd_sw then offset = fixed (rel (sp), 18) - fixed (rel (sb), 18);
	     else offset = fixed (rel (sb), 18) + fixed (rel (sp), 18);

	     if addrel (rptr, offset) = lptr then do;
		trm = "1"b;
		call ioa_ ("^/Trace loops.  End trace.");
		return;
	     end;

	     rp_char = ol_dump_util_$val_ptr (addr (sp -> stack_frame.return_ptr));
	     if substr (rp_char, 1, 7) ^= "Invalid" then do;
		stkout = namef_ (return_ptr, odsp);
		if index (stkout, "pl1_operators") ^= 0 then do; /* if frame is owned by pl1_operators */
		     pr0_char = ol_dump_util_$val_ptr (addr (sp -> stack_frame.pointer_registers (0)));
		     if substr (pr0_char, 1, 7) ^= "Invalid" then do;
			rp_char = pr0_char;		/* copy it over */
			stkout = rtrim (namef_ (stack_frame.pointer_registers (0), odsp)) || " [pr0]";
		     end;
		end;
	     end;
	     else do;
		trm = "1"b;
		stkout = "";
	     end;


	     et_char = ol_dump_util_$val_ptr (addr (sp -> stack_frame.entry_ptr));
	     if substr (et_char, 1, 7) ^= "Invalid" then do;
		stkout2 = namef_ (entry_ptr, odsp);
		if index (stkout2, "pl1_operators") ^= 0 then do; /* if frame is owned by pl1_operators */
		     pr0_char = ol_dump_util_$val_ptr (addr (sp -> stack_frame.pointer_registers (0)));
		     if substr (pr0_char, 1, 7) ^= "Invalid" then do;
			et_char = pr0_char;		/* copy it over */
			stkout2 = rtrim (namef_ (stack_frame.pointer_registers (0), odsp)) || " [pr0]";
		     end;
		end;
	     end;
	     else 
		stkout2 = "";

	     fim_frame = is_cond_frame (sp);
	     offs = fixed (rel (sp), 18) - fixed (rel (sb), 18);
	     call ioa_ ("^10p  ^15a^a", addrel (rptr, offs), rp_char, stkout);
						/* print out info */
	     call ioa_ ("^13t^15a^a^[^/^21t A fim frame.^]^/", et_char, stkout2, fim_frame);
	     if arg_sw then				/* if we want to display_args */
		call display_frame_args_ (segno, sp, sb, odsp);
	     if lg_sw then do;			/* user wants octal dump also */
		call display_frame_args_ (segno, sp, sb, odsp);

		if ^fwd_sw then do;
		     if substr (rp_char, 1, 7) = "Invalid" then /* if return char invalid */
			i = segln - offset;		/* dump rest of segment */
		     else i = fixed (rel (next_sp), 18) - offset; /* else set length to frame length */
		end;

		else if fwd_sw then do;
		     if substr (rp_char, 1, 7) = "Invalid" then /* if return char invalid */
			i = offset - segln;		/* dump rest of segment */
		     else				/* esle set length to frame length */
		     i = fixed (rel (next_sp), 18) - ((fixed (rel (sp), 18)) - (fixed (rel (sb), 18)));
		end;

		call ol_dump_util_$dump_oct (sp, offset, i);
		call ioa_ (" ");

	     end;

	     if ^fwd_sw then do;

		if ol_dump_util_$p_valid (addr (prev_sp)) then do;
		     p = addrel (sb, rel (prev_sp));
		     if rel (p) >= rel (sp) then go to bad_rev_ptr;
		     else sp = p;
		end;


		else do;
bad_rev_ptr:	     call ioa_ ("Invalid reverse pointer in this frame. Trace stops.");
		     trm = "1"b;			/* lets quit */
		end;
	     end;

	     else if fwd_sw then do;

		if ol_dump_util_$p_valid (addr (next_sp)) then do;
		     p = addrel (sb, rel (next_sp));
		     if rel (p) <= rel (sp) then go to bad_fwd_ptr;
		     else sp = p;
		end;


		else do;
bad_fwd_ptr:	     call ioa_ ("Invalid forward pointer in this frame. Trace stops.");
		     trm = "1"b;			/* lets quit */
		end;
	     end;

	     lptr = addrel (rptr, offset);

	end;

	if (^fwd_sw) & (ol_dump_util_$p_valid (addr (prev_sp))) then do;
	     rp_char = ol_dump_util_$val_ptr (addr (prev_sp)); /* if prev ptr is valid */
	     if substr (rp_char, 1, 7) ^= "Invalid" then
		if prev_sp ^= null then		/* and not a null pointer */
		     call ioa_ ("^/stack_frame.prev_sp = ^a (^a)", rp_char, namef_ (prev_sp, odsp));
	end;

	else if (fwd_sw) & (ol_dump_util_$p_valid (addr (next_sp))) then do;
	     rp_char = ol_dump_util_$val_ptr (addr (next_sp)); /* if next ptr is valid */
	     if substr (rp_char, 1, 7) ^= "Invalid" then
		if next_sp ^= null then		/* and not a null pointer */
		     call ioa_ ("^/stack_frame.next_sp = ^a (^a)", rp_char, namef_ (next_sp, odsp));

	end;



is_cond_frame: proc (stkp) returns (bit (1));

dcl  stkp ptr;
dcl  out char (70);

	     if ol_dump_util_$p_valid (addr (stkp -> stack_frame.return_ptr)) then do;
		out = namef_ (stkp -> stack_frame.return_ptr, odsp);
		if index (out, "return_to_ring_") ^= 0 | index (out, "$fim|") ^= 0 then
		     return ("1"b);
	     end;
	     return ("0"b);
	end is_cond_frame;

/*  */

% include stack_header;
% include stack_frame;
% include sdw;
     end display_stack_;
