/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


display_ast_:
     proc (odsp);

/* **********************************************************************
   * Routine to display the ASTE/PT of a segment.                       *
   * Modified June 1981 by Warren Johnson to add the asbadr entrypoint  *
   * to display the absolute address given segment and offset.          *
   * Modified March 1982 by J. Bongiovanni for new PVTE		  *
   * Modified August 1982 by E. N. Kittlitz to move core map.           *
   ********************************************************************** */

dcl  ring0_get_$segptr_given_slt entry (char (*), char (*), ptr, fixed (35), ptr, ptr);
dcl (ioa_$nnl, ioa_, ioa_$rsnnl) entry options (variable);
dcl  cv_oct_check_ entry (char (*), fixed (35)) returns (fixed (35));
dcl  ol_dump_util_$get_ptr entry (fixed, ptr, fixed (35), ptr);
dcl  ol_dump_util_$get_segno entry (char (32) varying, ptr) returns (fixed);
dcl  ol_dump_util_$dump_oct entry (ptr, fixed, fixed);
dcl  namef_$no_comp entry (ptr, ptr) returns (char (*));
dcl  get_line_length_$switch entry (ptr, fixed (35)) returns (fixed);
dcl  date_time_ entry (fixed (71), char (*) aligned);

dcl (i, segno, offset, pts, ll, ln, page, word) fixed;
dcl (segln, code) fixed (35);
dcl  sptp ptr;
dcl  pt_word fixed based (ptp);
dcl  repeat bit (1);
dcl (core_add, fdevadd) fixed (18);
dcl  devadd bit (22);
dcl  devadd_add_type bit (4) defined (devadd) pos (19);
dcl  devadd_nulled_flag bit (1) defined (devadd);
dcl  devadd_record_no bit (18) defined (devadd);
dcl  last_ptw bit (36);
dcl (str, cdevadd) char (16);
dcl  pvtx_name char (16) varying;
dcl  vs char (99) varying;

dcl 1 local_cme aligned like cme;

dcl (ptr, addr, substr, null, addrel, rel, baseno, baseptr, divide, fixed, length, size, unspec, mod) builtin;
%page (1);
	if argcnt < 1
	then do;
	     call ioa_ ("ast segno/name");
	     return;
	end;

	if sstptr = null ()
	then do;
	     call ioa_ ("No sst.");
	     return;
	end;

	if coremapptr = null ()
	then call ioa_ ("No core_map. Device addresses of in-core pages are shown as 0.");

	sstp = sstptr;				/* copy arg */
	ll = get_line_length_$switch (null (), segln);	/* get terminal lin length */
	segno = cv_oct_check_ (substr (arg (1), 1, length (arg (1))), code); /* get segment number in binary */
	if code ^= 0
	then do;					/* non-octal, try special name */
	     segno = ol_dump_util_$get_segno (arg (1), odsp);
	     if segno = -1
	     then return;
	     else;
	end;
	else;

	sdwp = addr (dsegp -> sdwa (segno));		/* get a pointer to the SDW for the segment */
	if sdw.unpaged
	then do;					/* see if the segment is paged */
	     call ioa_ ("Segment ^a is not paged.", arg (1));
	     return;
	end;
	else;

	astep = ptr (sstp, fixed (sdw.add, 24) -
	     fixed (sst.ptwbase, 18) - sst.astsize);	/* get a pointer to the ast entry */
	offset = fixed (rel (astep), 18) - fixed (rel (sstp), 18);
	call ioa_ ("ASTE For Segment ^a (seg ^o), at SST|^o^/",
	     namef_$no_comp (baseptr (segno), odsp), segno, offset);
	call ol_dump_util_$dump_oct (astep, offset, sst.astsize);
	call ring0_get_$segptr_given_slt ("", "pvt", pvtp, code, sltptr, sltnp); /* get ptr to pvt */
	if code ^= 0
	then pvtx_name = "??????";
	else do;
	     call ol_dump_util_$get_ptr (fixed (baseno (pvtp), 15), pvtp, segln, odsp);
	     if pvtp = null ()
	     then pvtx_name = "??????";
	     else do;
		pvt_arrayp = addr (pvt.array);
		pvtep = addr (pvt_array (aste.pvtx));
		if substr (pvte.devname, 1, 3) = "dsk" then
		     call ioa_$rsnnl ("^a device ^d", pvtx_name, ln, pvte.devname, pvte.logical_area_number);
		else pvtx_name = "";
	     end;
	end;

	call ioa_ ("^/uid = ^w, vtocx ^o on pvtx ^o^[ (^a)^]",
	     fixed (aste.uid, 35), aste.vtocx, aste.pvtx, pvtx_name ^= "", pvtx_name);
	call ioa_ ("max len ^d, ^d recs used, ^d in core, cur len ^d",
	     fixed (aste.msl, 9), fixed (aste.records, 9), fixed (aste.np, 9), fixed (aste.csl, 9));
	if aste.dtu
	then call ioa_ ("Used ^a", dtc (aste.dtu));
	else call ioa_ ("Not updated as used.");
	if aste.dtm
	then call ioa_ ("Modified ^a", dtc (aste.dtm));
	else call ioa_ ("Not updated as modified.");
	if aste.par_astep | aste.infl | aste.infp
	then call ioa_ ("Par astep = ^o, Son = ^o, brother = ^o", fixed (aste.par_astep, 18),
	     fixed (aste.infp, 18), fixed (aste.infl, 18));
	if aste.uid = "0"b
	then call ioa_ ("Hardcore segno = ^o", fixed (aste.strp, 18));
	else if aste.strp
	then call ioa_ ("Trailer thread = ^o", fixed (aste.strp, 18));
	else call ioa_ ("No trailer thread.");

	if aste.dirsw
	then do;
	     if aste.master_dir
	     then call ioa_ ("Aste for a master directory.");
	     else call ioa_ ("Aste for a directory.");
	end;
	else if aste.master_dir
	then call ioa_ ("Says master dir, but not directory.");
	else;
	if aste.quota (0) ^= 0 | aste.quota (1) ^= 0
	then call ioa_ ("     Quota (S D) = (^d ^d)", aste.quota (0), aste.quota (1));
	else;
	if aste.used (0) ^= 0 | aste.used (1) ^= 0
	then call ioa_ ("     QUsed (S D) = (^d ^d)", aste.used (0), aste.used (1));
	else;

	vs = "";
	call ioa_$nnl ("^/");
	if aste.usedf
	then call vput ("usedf ");
	else;
	if aste.init
	then call vput ("init ");
	else;
	if aste.gtus
	then call vput ("gtus ");
	else;
	if aste.hc
	then call vput ("hc ");
	else;
	if aste.hc_sdw
	then call vput ("hc_sdw ");
	else;
	if aste.any_access_on
	then call vput ("aaon ");
	else;
	if aste.write_access_on
	then call vput ("waccon ");
	else;
	if aste.inhibit_cache
	then call vput ("inhcch ");
	else;
	if aste.explicit_deact_ok
	then call vput ("xdok ");
	else;
	if aste.ehs
	then call vput ("ehs ");
	else;
	if aste.nqsw
	then call vput ("nqsw ");
	else;
	if aste.tqsw (0)
	then call vput ("seg-tqsw ");
	else;
	if aste.tqsw (1)
	then call vput ("dir-tqsw ");
	else;
	if aste.fmchanged
	then call vput ("fmch ");
	else;
	if aste.fms
	then call vput ("fms ");
	else;
	if aste.npfs
	then call vput ("npfs ");
	else;
	if aste.gtpd
	then call vput ("gtpd ");
	else;
	if aste.dnzp
	then call vput ("dnzp ");
	else;
	if aste.per_process
	then call vput ("per_proc ");
	else;
	if aste.fmchanged1
	then call vput ("fmch1 ");
	else;
	if aste.damaged
	then call vput ("damaged ");
	else;
	if aste.ddnp
	then call vput ("ddnp ");
	else;
	if aste.pack_ovfl
	then call vput ("oopv ");
	else;

	call vput ("FLUSH");
	pts = sst.pts (fixed (aste.ptsi, 3));
	call ioa_ ("^/PAGE      PT        DEVADD^/");

	repeat = "0"b;
	sptp = addrel (astep, size (aste));

	do i = 0 to pts-1 by 1;
	     ptp = addr (sptp -> ptwa (i));
	     devadd = ptp -> mptw.devadd;
	     if i ^= 0 & i ^= pts - 1 & unspec (ptw) = last_ptw
	     & devadd_add_type = "000"b & ^ptw.df
	     then repeat = "1"b;
	     else do;
		if repeat
		then do;
		     repeat = "0"b;
		     call ioa_ ("====");
		end;
		else;
		if ptw.df
		then do;
		     core_add = fixed (devadd_record_no);
		     core_add = divide (core_add, 16, 18, 0);
		     if coremapptr ^= null then do;
		          cmep = addr (coremapptr -> cma (core_add));
		          devadd = cme.devadd;
		     end;
		     else devadd = "0"b;
		end;
		fdevadd = fixed (devadd_record_no);
		if devadd_add_type & add_type.non_null
		then call ioa_$rsnnl ("^6o", cdevadd, ln, fdevadd);
		else cdevadd = " null";
		if devadd_nulled_flag & devadd_add_type = add_type.disk
		then do;
		     devadd_nulled_flag = "0"b;
		     fdevadd = fixed (devadd_record_no);
		     call ioa_ ("^4o  ^w  ^6o (nulled)", i, pt_word, fdevadd);
		end;
		else call ioa_ ("^4o  ^w  ^6a", i, pt_word, cdevadd);
	     end;
	     last_ptw = unspec (ptw);
	end;

	return;
%page (1);
absadr:	entry (odsp);

	if argcnt < 1
	then do;
absadr_label:
	     call ioa_ ("absadr segno/name {offset}");
	     return;
	end;
	else;


	if sstptr = null ()
	then do;
	     call ioa_ ("No sst.");
	     return;
	end;
	else;

	sstp = sstptr;
	segno = cv_oct_check_ (substr (arg (1), 1, length (arg (1))), code); /* get segment number in binary */
	if code ^= 0
	then do;					/* non-octal, try special name */
	     segno = ol_dump_util_$get_segno (arg (1), odsp);
	     if segno = -1
	     then return;
	     else;
	end;
	else;

	if argcnt < 2 then do;
	     offset = 0;
	     go to GET_SDWP;
	end;


	offset = cv_oct_check_ (substr (arg (2), 1, length (arg (2))), code); /* get segment offset */
	if code ^= 0
	then go to absadr_label;
	else;

GET_SDWP:
	sdwp = addr (dsegp -> sdwa (segno));		/* get a pointer to the SDW for the segment */
	if sdw.unpaged				/* see if the segment is paged */
	then if sdw.df				/* segment fault? */
	     then do;				/* nope, got the address */
		offset = fixed (sdw.add, 24) + offset;
		call ioa_ ("^o", offset);
		return;
	     end;
	     else do;				/* segment not active */
		call ioa_ ("Segment ^o is unpaged and faulted.", segno);
		return;
	     end;
	else;

	word = mod (offset, 1024);			/* get word within page */
	page = divide (offset, 1024, 17, 0);		/* get PTW index */

	ptp = ptr (sstp, fixed (sdw.add, 24) - fixed (sst.ptwbase, 18)); /* get a pointer to page table */
	astep = addrel (ptp, -sst.astsize);		/* get ptr to ASTE */
	pts = sst.pts (fixed (aste.ptsi, 3));
	if page >= pts
	then do;
	     call ioa_ ("Offset ^o not found in segment ^o.", offset, segno);

	     return;

	end;
	else ptp = addrel (ptp, page);		/* get ptr to PTW */
	if ptw.df					/* is page in memory? */
	then do;					/* yes, it's there */
	     offset = fixed (ptw.add, 18) * 64;
	     offset = offset + word;
	     call ioa_ ("^o", offset);
	end;
	else call ioa_ ("Page ^o of segment ^o is not in main memory.",
	     page, segno);

	return;
%page (1);
vput:	proc (x);

dcl  x char (*) parameter;

	     if x = "FLUSH" | length (vs) > ll - 10
	     then do;
		if vs = ""
		then call ioa_ ("No Flags.");
		else call ioa_ ("Flags: ^a", vs);
		vs = "";
	     end;
	     else;
	     vs = vs || x;

	     return;

	end vput;
%page (1);
dtc:	proc (b) returns (char (24));

dcl  b bit (36) parameter;
dcl  buf bit (72);
dcl  fbuf fixed (71);
dcl  date char (24) aligned;

	     buf = "0"b;
	     substr (buf, 21) = b;
	     unspec (fbuf) = unspec (buf);
	     call date_time_ (fbuf, date);

	     return (date);

	end dtc;
%page (1);
%include ol_dump_struc;
%page (1);
%include sst;
%page (1);
%include aste;
%page (1);
%include cmp;
%page (1);
%include pvt;
%page (1);
%include pvte;
%page (1);
%include add_type;
%page (1);
%include sdw;
%page (1);
%include ptw;


     end display_ast_;
