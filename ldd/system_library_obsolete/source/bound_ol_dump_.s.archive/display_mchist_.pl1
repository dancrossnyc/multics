/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


display_mchist_: proc (odsp);



% include ol_dump_struc;

dcl  ring0_get_$definition_given_slt entry (ptr, char (*), char (*), fixed bin (18),
     fixed bin, fixed bin (35), ptr, ptr, ptr);
dcl  ol_dump_util_$get_ptr_given_dbr entry (fixed bin (24), fixed bin, ptr, fixed bin (35), ptr);
dcl  ol_dump_util_$get_ptr entry (fixed bin, ptr, fixed bin (35), ptr);
dcl  ol_dump_util_$fnd_dbr entry (fixed bin (24), fixed bin (35), fixed bin, ptr);
dcl (ioa_, ioa_$nnl) entry options (variable);
dcl  cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin);
dcl  display_regs_$prt_mc_ entry (ptr, ptr, fixed bin (18), fixed bin, char (32), bit (1));
dcl  get_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  release_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  com_err_ entry options (variable);

dcl (i, j, count, first, apte_offset, apte_idx, exstate, type, rel_apte) fixed bin;
dcl  def_offset fixed bin (18);
dcl (oct_code, code, segln) fixed bin (35);
dcl (lg_sw, tmr) bit (1);
dcl (fixed, addrel, addr, null, baseno, substr, length) builtin;
dcl  w (0 : 63) fixed bin based;
dcl  usbuf char (32) based (p);
dcl (p, cpup) ptr;
dcl  statopt (0 : 5) char (3) int static options (constant) init
    ("emp", "run", "rdy", "wat", "blk", "stp");
dcl  process_st (0 : 5) char (7) varying int static options (constant) init
    ("empty", "running", "ready", "waiting", "blocked", "stopped");
dcl  tag (0 : 7) char (1) int static options (constant) init
    ("a", "b", "c", "d", "e", "f", "g", "h");
dcl  mcdesc_table (6)char (32) int static options (constant) init (
     "Page Fault Data", "Fim Data", "Signal Data", "Interrupt Data", "System Trouble Data", "Fim Data");
dcl  cpu_prds (0:7) bit (1) aligned;
dcl  cpu_no fixed bin (3) based (cpup) aligned;
dcl  temp_seg_ptr ptr;
dcl  user_ptr ptr;
dcl  hold_dbr fixed bin (24);
dcl  time char (24) aligned;
dcl 01 sort_info based (temp_seg_ptr),
    02 n fixed bin (24),
    02 mce (1:1000) aligned like based_mce;
dcl  mce_ptr ptr;
dcl 01 based_mce aligned based (mce_ptr),
    02 mc_time fixed bin (71),
    02 apte_idx fixed bin,
    02 apte_offset fixed bin,
    02 dbr fixed bin (24),
    02 def_offset fixed bin (18),
    02 user_ptr ptr,
    02 mcptr ptr,
    02 segn fixed bin,
    02 desc_idx fixed bin;

dcl  cleanup condition;

/* apt - entry to display an apt entry */


	if argcnt < 1 then do;
proc_label:
	     call ioa_ ("mchist no/state/cur/all (lg)");
	     return;
	end;

	if tcdp = null then do;

notcd:	     call ioa_ ("No tc_data.");
	     return;
	end;

	lg_sw = "0"b;

	if argcnt = 2 then
	     if arg (2) = "lg" then			/* user wants an octal dump of the apt entry */
		lg_sw = "1"b;
	count = 1;				/* default is only 1 process */

	first = cv_oct_check_ (substr (arg (1), 1, length (arg (1))), oct_code); /* convert the process number to octal */

	if oct_code ^= 0 then do;
	     first = 0;
	     count = no_apt;
	     if arg (1) = "all" | arg (1) = "cur" then go to proc_ok;
	     do i = 0 to 5;
		if arg (1) = statopt (i) then do;
		     exstate = i;
		     go to proc_ok;
		end;
	     end;
	end;

proc_ok:

	temp_seg_ptr = null ();
	call get_temp_segment_ ("ol_dump", temp_seg_ptr, code);

	if code ^= 0 then do;
	     call com_err_ ("ol_dump", code);
	     return;
	end;

	on cleanup begin;
	     call ol_dump_util_$fnd_dbr (hold_dbr, segln, j, odsp);
	     call ol_dump_util_$get_ptr (ol_dump_struc.kstseg, ol_dump_struc.kstptr,
		segln, odsp);
	     call release_temp_segment_ ("ol_dump", temp_seg_ptr, code);
	end;

	sort_info.n = 0;
	cpu_prds (*) = "0"b;


	tmr = "0"b;

	do apte_idx = first to first+count-1 while (^tmr);
	     aptep = addrel (aptap, apte_idx*ol_dump_struc.apt_entry_size); /* get apointer to the process to look at */
	     sdwp = addr (aptep -> apte.dbr);
	     if oct_code = 0 | arg (1) = "all" then go to pproc;
	     if arg (1) = "cur" then
		if fixed (sdw.add, 24) = dbrsv then
		     tmr = "1"b;			/* set terminate condition */
		else go to pproclp;
	     else if fixed (aptep -> apte.flags.state, 18) ^= exstate then go to pproclp;

pproc:
	     apte_offset = fixed (rel (aptep), 18) -fixed (rel (tcdp), 18);

	     user_ptr = null ();
	     call ol_dump_util_$get_ptr_given_dbr (fixed (sdw.add, 24), pdsseg, p, segln, odsp);
	     if p = null () then goto try_prds;

	     call ring0_get_$definition_given_slt (null (), "pds", "process_group_id",
		def_offset, type, code, sltptr, sltnp, defptr);
	     user_ptr = addrel (p, def_offset);

	     call ring0_get_$definition_given_slt (null, "pds", "page_fault_data",
		def_offset, type, code, sltptr, sltnp, defptr);
	     call store_mc (addrel (p, def_offset), def_offset, pdsseg, 1);

	     call ring0_get_$definition_given_slt (null, "pds", "fim_data",
		def_offset, type, code, sltptr, sltnp, defptr);
	     call store_mc (addrel (p, def_offset), def_offset, pdsseg, 2);

	     call ring0_get_$definition_given_slt (null, "pds", "signal_data",
		def_offset, type, code, sltptr, sltnp, defptr);
	     call store_mc (addrel (p, def_offset), def_offset, pdsseg, 3);

try_prds:

	     call ol_dump_util_$get_ptr_given_dbr (fixed (sdw.add, 24), prdsseg, p, segln, odsp);
	     if p = null () then goto pproclp;

	     call ring0_get_$definition_given_slt (null (), "prds", "processor_tag",
		def_offset, type, code, sltptr, sltnp, defptr);
	     cpup = addrel (p, def_offset);
	     if cpu_prds (cpu_no) then goto pproclp;

	     cpu_prds (cpu_no) = "1"b;

	     call ring0_get_$definition_given_slt (null, "prds", "interrupt_data",
		def_offset, type, code, sltptr, sltnp, defptr);
	     call store_mc (addrel (p, def_offset), def_offset, prdsseg, 4);

	     call ring0_get_$definition_given_slt (null, "prds", "sys_trouble_data",
		def_offset, type, code, sltptr, sltnp, defptr);
	     call store_mc (addrel (p, def_offset), def_offset, prdsseg, 5);

	     call ring0_get_$definition_given_slt (null, "prds", "fim_data",
		def_offset, type, code, sltptr, sltnp, defptr);
	     call store_mc (addrel (p, def_offset), def_offset, prdsseg, 6);

pproclp:
	end;

	if sort_info.n = 0 then do;
	     call ioa_ ("No machine conditions to sort.");
	     goto exit;
	end;

	call sort_mce;

	hold_dbr = dbrsv;
	do i = 1 to sort_info.n;
	     mce_ptr = addr (sort_info.mce (i));
	     call ioa_ ("^/APTE #^o  ADDR ^o  DBR ^o  USERID ^[^a^;?^s^]",
		based_mce.apte_idx, based_mce.apte_offset, based_mce.dbr,
		based_mce.user_ptr ^= null (), based_mce.user_ptr -> usbuf);

	     call ol_dump_util_$fnd_dbr (based_mce.dbr, segln, j, odsp);
	     call ol_dump_util_$get_ptr (ol_dump_struc.kstseg, ol_dump_struc.kstptr, segln, odsp);
	     call display_regs_$prt_mc_ (odsp, based_mce.mcptr, based_mce.def_offset,
		based_mce.segn, mcdesc_table (based_mce.desc_idx), lg_sw);
	     call ioa_ ("^/^40(- ^)^[^|^]", lg_sw);
	end;

	call ol_dump_util_$fnd_dbr (hold_dbr, segln, j, odsp);
	call ol_dump_util_$get_ptr (ol_dump_struc.kstseg, ol_dump_struc.kstptr, segln, odsp);


exit:	call release_temp_segment_ ("ol_dump", temp_seg_ptr, code);
	return;


/*  This subroutine sorts the mc's into chronoligical order  */

store_mc:	proc (a_mcptr, a_offset, a_segn, a_desc_idx);

dcl  a_mcptr ptr;
dcl  a_offset fixed bin (18);
dcl  a_segn fixed bin;
dcl  a_desc_idx fixed bin;

	     mcp = a_mcptr;


/*	     if mc.fault_time = "0"b then return;	*/


	     sort_info.n = sort_info.n+1;
	     if sort_info.n>1000 then return;

	     sort_info.mce (sort_info.n).mc_time = fixed (mc.fault_time, 71);
	     sort_info.mce (sort_info.n).apte_idx = apte_idx;
	     sort_info.mce (sort_info.n).apte_offset = apte_offset;
	     sort_info.mce (sort_info.n).dbr = fixed (sdw.add, 24);
	     sort_info.mce (sort_info.n).user_ptr = user_ptr;
	     sort_info.mce (sort_info.n).mcptr = mcp;
	     sort_info.mce (sort_info.n).def_offset = a_offset;
	     sort_info.mce (sort_info.n).segn = a_segn;
	     sort_info.mce (sort_info.n).desc_idx = a_desc_idx;

	     return;

	end store_mc;



/* This routine will sort the mc entries into reverse chronological order */


sort_mce:	proc;
dcl (i, j) fixed bin;				/* iteration variables */
dcl 01 temp_mce,
    02 mc_time fixed bin (71),
    02 apte_idx fixed bin,
    02 apte_offset fixed bin,
    02 dbr fixed bin (24),
    02 def_offset fixed bin (18),
    02 user_ptr ptr,
    02 mcptr ptr,
    02 segn fixed bin,
    02 desc_idx fixed bin;

	     do i = 1 to sort_info.n-1;
		do j = i+1 to sort_info.n;
		     if sort_info.mce.mc_time (i) < sort_info.mce.mc_time (j) then do;
			temp_mce = sort_info.mce (i);
			sort_info.mce (i) = sort_info.mce (j);
			sort_info.mce (j) = temp_mce;
		     end;
		end;
	     end;
	     return;
	end sort_mce;


% include apte;

% include sdw;

% include tcm;

%include mc;
     end display_mchist_;
