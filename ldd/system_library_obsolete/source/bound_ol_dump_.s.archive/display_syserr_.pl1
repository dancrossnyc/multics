/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/*  Modified Oct 1982 by Rich Coppola to set dbr to first proc dumped instead of
   defaulting to inzr process as it is not always dumped. */

display_syserr_: proc;
	return;					/* should never enter here */

% include ol_dump_struc;
%page;
% include syserr_log;
%page;
% include syserr_data;
%page;
%include sdw;
%page;
dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin);
dcl  ring0_get_$segptr_given_slt entry (char (*) aligned, char (*) aligned, ptr, fixed bin (35), ptr, ptr);
dcl  ol_dump_util_$get_ptr entry (fixed bin, ptr, fixed bin (35), ptr); /* :: */
dcl  ol_dump_util_$fnd_dbr entry (fixed bin (24), fixed bin (35), fixed bin, ptr);
dcl  ring0_get_$definition_given_slt entry (ptr, char (*), char (*), fixed bin (18),
     fixed bin, fixed bin (35), ptr, ptr, ptr);
dcl  ioa_ entry options (variable);

dcl (null, addrel, addr, rel, fixed) builtin;
dcl (i, j, count, edoc, segno, offset, mblen, mblenn, type) fixed bin;
dcl  def_offset fixed bin (18);
dcl  msbuf char (mblen) aligned based (p);
dcl  msbuff char (mblenn) aligned based (ap);
dcl (p, pm, ap, savep) ptr;
dcl (segln, code) fixed bin (35);
dcl  repeat_sw bit (1);
dcl  saved_kstseg fixed bin;
dcl  saved_kstptr ptr;
dcl  saved_dbr fixed bin (24);



/*  */
data:	entry (odsp);

	saved_kstseg = kstseg;			/* save values of the */
	saved_kstptr = kstptr;			/* process as it will change */
	saved_dbr = dbrsv;

	dbrsv = boot_dbr;

	call ol_dump_util_$fnd_dbr (dbrsv, segln, i, odsp);

	call ring0_get_$segptr_given_slt ("", "syserr_data", p, code, sltptr, sltnp);
	if code ^= 0 then do;
	     call ioa_ ("No syserr_data segment found.");
	     go to restore_dbr;
	end;
	savep = p;
	segno = fixed (baseno (p), 15);
	call ol_dump_util_$get_ptr (segno, sd_ptr, segln, odsp);
	if sd_ptr = null then
	     go to restore_dbr;
	call ring0_get_$definition_given_slt (null, "syserr_data", "wired_log_area",
	     def_offset, type, code, sltptr, sltnp, defptr);
	wlog_ptr = addrel (sd_ptr, def_offset);		/* Set up ptr to header */
	wmess_ptr = addrel (wlog_ptr, fixed (rel (addr (wlog.buffer)), 18) - fixed (rel (wlog_ptr)));
	edoc = wlog.count;				/* Get number of messages */
	call ioa_ ("^d messages in syserr_data segment (seg. # ^o), most recent first",
	     edoc, fixed (baseno (p), 18));
	if edoc = 0 then
	     go to restore_dbr;			/* If no messages quit */
	call ioa_ ("^/  ADDR   SEQNO   DATE       TIME     CODE  MESSAGE TEXT^/");
	begin;
dcl  wmess_ptrs (edoc) ptr;
	     do i = 1 to edoc;
		wmess_ptrs (i) = wmess_ptr;
		wmess_ptr = addr (wmess.data (wmess.data_size + 1));
	     end;
	     do i = edoc to 1 by -1;
		wmess_ptr = wmess_ptrs (i);
		p = addr (wmess.text);
		mblen = wmess.text_len;		/* Set mess.age buffer length */
		offset = fixed (rel (wmess_ptr), 18) - fixed (rel (sd_ptr), 18);
		if mblen = 0 then do;
		     call ioa_ ("syserr_log entry at ^p is null", addrel (savep, offset));
		     go to psdta_lp;
		end;


		call ioa_ ("^6o  ^6o  ^20a   ^o   ^a", offset, wmess.seq_num,
		     datm (addr (wmess.time)), wmess.code, msbuf);
psdta_lp:
	     end;
	end;
	go to restore_dbr;


/*  */

log:	entry (odsp);
	if argcnt < 1 then do;
errlog_label:
	     call ioa_ ("syserlog number of messages ");
	     return;
	end;
	count = cv_dec_check_ (substr (arg (1), 1, length (arg (1))), code);
	if code ^= 0 then go to errlog_label;


	saved_kstseg = kstseg;			/* save values of the */
	saved_kstptr = kstptr;			/* process as it will change */
	saved_dbr = dbrsv;

	dbrsv = boot_dbr;

	call ol_dump_util_$fnd_dbr (dbrsv, segln, i, odsp);


	call ring0_get_$segptr_given_slt ("", "syserr_log", p, code, sltptr, sltnp);
	if code ^= 0 then do;
	     call ioa_ ("No syserr_log seg.");
	     go to restore_dbr;
	end;
	segno = fixed (baseno (p), 18);
	call ol_dump_util_$get_ptr (segno, slog_ptr, segln, odsp);
	if slog_ptr = null then go to restore_dbr;
	call ioa_ ("Last ^d messages in syserr_log segment (seg. # ^o), most recent first",
	     count, segno);
	offset = fixed (slog_ptr -> slog.head.last, 18);
	call ioa_ ("^/  ADDR   SEQNO   DATE       TIME     CODE  MESSAGE TEXT^/");
	j = 0;
	repeat_sw = "0"b;
	do i = 1 to count;
	     smess_ptr = addrel (slog_ptr, offset);
	     if smess.text_len = 0 then do;
		call ioa_ ("syserr entry at ^p is null", addrel (p, offset));
		go to pellp;
	     end;


	     mblen = smess.text_len;
	     p = addr (smess.text);
	     pm = addrel (slog_ptr, fixed (smess_ptr -> smess.prev, 18));
	     mblenn = pm -> smess.text_len;
	     ap = addr (pm -> smess.text);
	     if msbuf = msbuff then do;
		repeat_sw = "1"b;
		j = j + 1;
		i = i - 1;
		go to pellp;
	     end;
	     else if repeat_sw then do;
		repeat_sw = "0"b;
		call ioa_ ("^d occurrances of message - ""^a""", j + 1, msbuf);
		j = 0;
		go to pellp;
	     end;
	     offset = fixed (rel (smess_ptr), 18) - fixed (rel (slog_ptr), 18);
	     call ioa_ ("^6o  ^6o  ^20a   ^o   ^a", offset, smess.seq_num,
		datm (addr (smess.time)), smess.code, msbuf);
pellp:
	     offset = fixed (smess_ptr -> smess.prev, 18);
	end;
	go to restore_dbr;

datm:	proc (tp) returns (char (20) aligned);
dcl  tp ptr;					/* pointer to time value to convert */
dcl  timcv fixed bin (71);
dcl  timein (2) fixed bin (35) based (tp);
dcl  timeint (2) fixed bin (35) based (addr (timcv));
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  timout char (20);
	     timeint = timein;			/* Copy time value to assure even boundary */
	     call date_time_ (timcv, timout);
	     return (timout);
	end datm;

restore_dbr:

	dbrsv = saved_dbr;
	kstseg = saved_kstseg;
	kstptr = saved_kstptr;
	call ol_dump_util_$fnd_dbr (dbrsv, segln, i, odsp);
	call ol_dump_util_$get_ptr (kstseg, kstptr, segln, odsp);
	return;

     end display_syserr_;
