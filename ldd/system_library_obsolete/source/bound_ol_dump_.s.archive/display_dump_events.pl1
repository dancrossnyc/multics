/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


display_dump_events:
     proc;

/* Program to examine an FDUMP, extracting all interesting time-stamped events,
   and printing these events in reverse-chronological order.

   Calling sequence:

   display_dump_events {Control Arguments}

   where Control Arguments are the following:

   -erf <ERF number>         (Required)

   -dump_dir, -dd {dump directory}     Specifies the directory in which the
   dump lives (default is >dumps)

   -last, -lt <number of events>        Specifies the number of events to print
   (default is to print all)

   -time <time in seconds>              Specifies the time in seconds before
   the dump was taken when events were interesting
   (default is 10)

   -long, -lg		       long output format (default)

   -short, -sh		       short output format (1 line/event)


   Subroutine interface:

   dcl display_dump_events_ (char (32), char (168), fixed bin, fixed bin (71), bit (1));

   call display_dump_events_ (erf_no, dump_dir, num_events, time_interval, mode);


   where:
   erf_no          is the erf to be examined.
   dump_dir        directory the containing the erf (null if >dumps).
   num_events      as defined above for last.
   time_interval   as defined above for time.
   mode            specifies long or short output format, a "1"b specifies long.

   Written March 1981 by J. Bongiovanni

   Modified April 1981 by Rich Coppola to add subroutine interface so it
   could be used by ol_dump.
   */


/* Automatic */

dcl  argl fixed bin (21);
dcl  argno fixed bin;
dcl  argp ptr;
dcl  code fixed bin (35);
dcl  definitions_ptr ptr;
dcl  done_segs bit (1);
dcl  dummy_name char (32) varying;
dcl  dump_dir char (168);
dcl  dump_name char (32) varying;
dcl  erf char (32);
dcl  error_message char (40);
dcl  found_erf bit (1);
dcl  have_erf bit (1);
dcl  long_flag bit (1);
dcl  nargs fixed bin;
dcl  nametbl_ptr ptr;
dcl  number_events fixed bin;
dcl  seg_name char (32);
dcl  short_flag bit (1);
dcl  slt_ptr ptr;
dcl  seg_no pic "zzz9";
dcl  temp_segs (N_TEMP_SEGS) ptr init ((N_TEMP_SEGS) null ());
dcl  time_interval fixed bin (71);
dcl  why char (40);


/* Static */

dcl  DEFAULT_DUMP_DIR char (6) init (">dumps") int static options (constant);
dcl  MYNAME char (19) init ("display_dump_events") int static options (constant);
dcl  N_TEMP_SEGS fixed bin init (5) int static options (constant);


/* Based */

dcl  arg char (argl) based (argp);
dcl  based_area area based (temp_segs (1));
dcl 1 erf_segs aligned based (temp_segs (2)),
    2 n_segs fixed bin,
    2 segp (0 refer (n_segs)) ptr;



/* Entry */

dcl  absolute_pathname_ entry (char (*), char (*), fixed bin (35));
dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  get_temp_segments_ entry (char (*), (*) ptr, fixed bin (35));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$star_ entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  ioa_ entry () options (variable);
dcl  process_dump_segments entry ((*) ptr, ptr, ptr, ptr, fixed bin, fixed bin (71), bit (1));
dcl  release_temp_segments_ entry (char (*), (*) ptr, fixed bin (35));
dcl  setup_dump_segments entry ((*) ptr, ptr, ptr, ptr, fixed bin, char (*), fixed bin (35));


/* External */

dcl  error_table_$badopt fixed bin (35) external;
dcl  error_table_$inconsistent fixed bin (35) external;
dcl  error_table_$namedup fixed bin (35) external;
dcl  error_table_$noarg fixed bin (35) external;
dcl  error_table_$segknown fixed bin (35) external;

/* Condition */

dcl  cleanup condition;
dcl  conversion condition;

/* Builtin */

dcl  addr builtin;
dcl  after builtin;
dcl  before builtin;
dcl  empty builtin;
dcl  fixed builtin;
dcl  ltrim builtin;
dcl  null builtin;
dcl  reverse builtin;
dcl  rtrim builtin;
dcl  sum builtin;


%page;

/* Pick up and validate arguments */

	have_erf = "0"b;
	short_flag, long_flag = "0"b;
	dump_dir = DEFAULT_DUMP_DIR;
	call cu_$arg_count (nargs, code);
	if code ^= 0 then do;
	     call com_err_ (code, MYNAME);
	     return;
	end;

	if nargs = 0 then do;
	     call com_err_ (0, MYNAME, "Usage is: ^a {Control Arguments}^/^10xControl Arguments: -erf {erf no}     -dump_dir {dump directory}^/^20x-time {interval in sec.}     -last {number events}     -short     -long",
		MYNAME);
	     return;
	end;

	number_events = 0;
	time_interval = 10000000;
	do argno = 1 to nargs;
	     call cu_$arg_ptr (argno, argp, argl, code);
	     if arg = "-dump_dir" | arg = "-dd" then do;
		argno = argno + 1;
		if argno > nargs then do;
		     why = "dump_dir";
MISSING:		     call com_err_ (error_table_$noarg, MYNAME, why);
		     return;
		end;
		call cu_$arg_ptr (argno, argp, argl, code);
		call absolute_pathname_ (arg, dump_dir, code);
		if code ^= 0 then do;
		     call com_err_ (code, MYNAME, arg);
		     return;
		end;
	     end;

	     else if arg = "-erf" then do;
		have_erf = "1"b;
		argno = argno + 1;
		why = "erf";
		if argno > nargs then goto MISSING;
		call cu_$arg_ptr (argno, argp, argl, code);
		erf = arg;
	     end;
	     else if arg = "-last" | arg = "-lt" then do;
		why = "Number events";
		argno = argno + 1;
		if argno > nargs then goto MISSING;
		call cu_$arg_ptr (argno, argp, argl, code);
		on conversion goto BAD_ARGUMENT;
		number_events = fixed (arg);
		revert conversion;
	     end;
	     else if arg = "-time" then do;
		why = "Time interval";
		argno = argno + 1;
		if argno > nargs then goto MISSING;
		call cu_$arg_ptr (argno, argp, argl, code);
		on conversion goto BAD_ARGUMENT;
		time_interval = fixed (arg) * 1000000;
		revert conversion;
	     end;
	     else if arg = "-short" | arg = "-sh"
	     then short_flag = "1"b;
	     else if arg = "-long" | arg = "-lg"
	     then long_flag = "1"b;
	     else do;
		call com_err_ (error_table_$badopt, MYNAME, arg);
		return;
	     end;
	end;

	if ^have_erf then do;
	     call com_err_ (error_table_$noarg, MYNAME, "erf");
	     return;
	end;

	if short_flag & long_flag then do;
	     call com_err_ (error_table_$inconsistent, MYNAME, "-short and -long");
	     return;
	end;
	long_flag = ^short_flag;

	go to start;


%page;

display_dump_events_:
	entry (sub_erf_no, sub_dump_dir, sub_events, sub_time, sub_mode);


dcl  sub_erf_no char (32);
dcl  sub_dump_dir char (168);
dcl  sub_events fixed bin;
dcl  sub_time fixed bin (71);
dcl  sub_mode bit (1);

	why = "";
	if sub_erf_no ^= "" then do;
	     erf = sub_erf_no;
	     have_erf = "1"b;
	end;

	else do;
	     why = "erf";
	     go to MISSING;
	end;


	if sub_dump_dir ^= "" then do;
	     call absolute_pathname_ (sub_dump_dir, dump_dir, code);

	     if code ^= 0 then do;
	        why = "dump_dir";
		go to MISSING;
		end;
	end;

	else dump_dir = DEFAULT_DUMP_DIR;


	if sub_events ^= 0 then
	     number_events = sub_events;
	else number_events = 0;

	if sub_time ^= 0 then
	     time_interval = sub_time * 1000000;
	else time_interval = 10000000;

	if sub_mode = "0"b then
	     short_flag = "1"b;
	else short_flag = "0"b;

	long_flag = ^short_flag;

start:

	on cleanup call Mr_Clean;			/* who else?				*/

	call get_temp_segments_ (MYNAME, temp_segs, code);
	if code ^= 0 then do;
	     call com_err_ (code, MYNAME, "Getting temp segs.");
	     return;
	end;

	based_area = empty ();
	erf_segs.n_segs = 0;


/* Find the first segment of the dump segment, thereby its name					*/


	call hcs_$star_ (dump_dir, "**.*." || erf, 3, addr (based_area),
	     star_entry_count, star_entry_ptr, star_names_ptr,
	     code);				/* setup for subroutine			*/
	if code = 0 then
	     found_erf = find_prefix_suffix ("", ".0." || erf, dump_name);
	if code ^= 0 | ^found_erf then do;
	     call com_err_ (code, MYNAME, "ERF ^a not found", erf);
	     call Mr_Clean;
	     return;
	end;

/* Fill array with pointers to components of dump segment						*/

	done_segs = "0"b;
	do while (^done_segs);
	     seg_no = erf_segs.n_segs;
	     seg_name = "." || ltrim (seg_no) || "." || erf;
	     if find_prefix_suffix (dump_name, seg_name, dummy_name) then do;
		seg_name = dump_name || seg_name;
		call hcs_$initiate (dump_dir, seg_name, "", 0, 1, segp (erf_segs.n_segs + 1), code);
		if code ^= 0 then
		     if code ^= error_table_$namedup & code ^= error_table_$segknown then do;
			call com_err_ (code, MYNAME, seg_name);
			call Mr_Clean;
			return;
		     end;
		erf_segs.n_segs = erf_segs.n_segs + 1;
	     end;
	     else done_segs = "1"b;
	end;

/* Setup some critical segment from the dump file							*/

	slt_ptr = temp_segs (3);
	definitions_ptr = temp_segs (4);
	nametbl_ptr = temp_segs (5);
	call setup_dump_segments (segp, slt_ptr, definitions_ptr,
	     nametbl_ptr, 0, error_message, code);
	if code ^= 0 then do;
	     call Mr_Clean;
	     call com_err_ (code, MYNAME, "Error from setup_dump_segments. ^a.",
		error_message);
	     return;
	end;

/* Process the dump 									*/

	call ioa_ ("^/^/Dump Events from ERF ^a^7xDumped on ^a at ^a^/^/",
	     erf, before (dump_name, "."), after (dump_name, "."));

	call process_dump_segments (segp, slt_ptr, definitions_ptr, nametbl_ptr, number_events,
	     time_interval, long_flag);


	call Mr_Clean;
	return;


BAD_ARGUMENT:
	call com_err_ (error_table_$badopt, MYNAME, why);
	return;

%page;
/* Internal procedure to scan array of names returned by star_
   based on suplied prefix and suffix criteria							*/


find_prefix_suffix:
	proc (prefix, suffix, name) returns (bit (1));

dcl  name char (*) varying;
dcl  prefix char (*) varying;
dcl  suffix char (*);

dcl  found bit (1);
dcl  name_no fixed bin;
dcl  reverse_suffix char (32) varying;
dcl  star_no fixed bin;


	     reverse_suffix = reverse (rtrim (suffix));
	     found = "0"b;
	     star_no = 1;

	     do while (^found & star_no <= star_entry_count);
		if star_entries (star_no).type ^= star_DIRECTORY then do; /* don't want directories		*/
		     name_no = star_entries (star_no).nindex;
		     do while (^found & name_no <= star_entries (star_no).nnames
			     + star_entries (star_no).nindex);
			if before (star_names (name_no), prefix) = "" then
			     if before (reverse (rtrim (star_names (name_no))),
			     reverse_suffix) = "" then do;
				name = reverse (after (reverse (rtrim (star_names (name_no))),
				     reverse_suffix));
				if name ^= "" then found = "1"b;
			     end;
			name_no = name_no + 1;
		     end;
		end;
		star_no = star_no + 1;
	     end;


	     return (found);
	end find_prefix_suffix;


%page;
/* Internal Procedure to to cleanup								*/


Mr_Clean:
	proc;

dcl  code fixed bin (35);
dcl  n fixed bin;

	     if temp_segs (2) ^= null ()
	     then if erf_segs.n_segs > 0 then do n = 1 to erf_segs.n_segs;
		     call hcs_$terminate_noname (segp (n), code);
		end;
	     if temp_segs (1) ^= null () then
		call release_temp_segments_ (MYNAME, temp_segs, code);

	end Mr_Clean;

%page;

%include star_structures;

     end display_dump_events;
