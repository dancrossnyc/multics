/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


convert_v1_fdump:
     procedure options (variable);

/* *	CONVERT_V1_FDUMP
   *
   *	This command converts a version 1 FDUMP image (from before MR9.0) into
   *	a version 2 FDUMP image. The change is that the dump header has been
   *	reorganized, and is now two pages long, rather than one.
   *
   *	03/18/81, W. Olin Sibert
   */

dcl  arg char (al) based (ap);
dcl  al fixed bin (21);
dcl  ap pointer;
dcl (nargs, argno) fixed bin;
dcl  code fixed bin (35);

dcl  page (1024) bit (36) aligned based;

dcl 1 old_dump aligned like v1_dump automatic;
dcl 1 new_dump aligned like dump automatic;

dcl  fs_mode fixed bin (5);
dcl  ename_prefix char (32) varying;
dcl  ename_suffix char (32) varying;
dcl  ename char (32);

dcl  dump_seg_lth fixed bin;
dcl  total_pages fixed bin;
dcl  remaining_pages fixed bin;
dcl  idx fixed bin;
dcl  error_sw bit (1) aligned;
dcl  in_place bit (1) aligned;
dcl  seg_zero_ename char (32);

dcl  old_dname char (168);
dcl  old_ptrs (0 : 31) pointer;
dcl  n_old_segs fixed bin;
dcl  old_bc (0 : 31) fixed bin (24);
dcl  old_lth (0 : 31) fixed bin;
dcl  old_page_ptr pointer;
dcl  old_seg fixed bin;

dcl  new_dname char (168);
dcl  new_equal_name char (32);
dcl  new_ptrs (0 : 31) pointer;
dcl  new_name (0 : 31) char (32) unaligned;
dcl  n_new_segs fixed bin;
dcl  new_page_ptr pointer;
dcl  new_seg fixed bin;

dcl  absolute_pathname_ entry (char (*), char (*), fixed bin (35));
dcl  com_err_ entry options (variable);
dcl  copy_acl_ entry (char (*), char (*), char (*), char (*), bit (1) aligned, fixed bin (35));
dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, pointer, fixed bin (21), fixed bin (35));
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  get_equal_name_ entry (char (*), char (*), char (32), fixed bin (35));
dcl  hcs_$fs_get_mode entry (pointer, fixed bin (5), fixed bin (35));
dcl  hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), pointer, fixed bin (35));
dcl  hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), pointer, fixed bin (35));
dcl  hcs_$set_bc_seg entry (pointer, fixed bin (24), fixed bin (35));
dcl  ioa_ entry options (variable);

dcl  sys_info$max_seg_size fixed bin (18) external static;

dcl  error_table_$noentry fixed bin (35) external static;
dcl  error_table_$no_w_permission fixed bin (35) external static;

dcl  WHOAMI char (32) internal static options (constant) init ("convert_v1_fdump");

dcl (addr, char, divide, ltrim, null, pointer, rtrim, substr) builtin;

/*  */

	call cu_$arg_count (nargs, code);
	if code ^= 0 then do;
	     call com_err_ (code, WHOAMI);
MAIN_RETURN:   return;
	end;

	if (nargs < 1) | (nargs > 2) then do;
	     call com_err_ (0, WHOAMI, "Usage: ^a path-of-comp-zero {equal-path-of-new-comp-zero}", WHOAMI);
	     goto MAIN_RETURN;
	end;

	call cu_$arg_ptr (1, ap, al, (0));
	call expand_pathname_ (arg, old_dname, ename, code);
	if code ^= 0 then do;
	     call com_err_ (code, WHOAMI, "^a", arg);
	     goto MAIN_RETURN;
	end;

	seg_zero_ename = ename;
	ename_prefix = substr (ename, 1, 12);		/* MMDDYY.HHMM. */
	ename_suffix = after (substr (ename, 13), ".");	/* ERF number */
	if verify (ename_prefix, "0123456789.") ^= 0 then do;
BAD_ENAME:     call com_err_ (0, WHOAMI, "^a is not the entryname of component zero of an FDUMP.", ename);
	     goto MAIN_RETURN;
	end;

	if ename_suffix = "" then goto BAD_ENAME;
	ename_suffix = "." || rtrim (ename_suffix);
	if substr (ename, 12, 3) ^= ".0." then goto BAD_ENAME;

	if nargs > 1 then do;			/* Get new dirname */
	     call cu_$arg_ptr (2, ap, al, (0));
	     call expand_pathname_ (arg, new_dname, new_equal_name, code);
	     if code ^= 0 then do;
		call com_err_ (code, WHOAMI, "^a", arg);
		goto MAIN_RETURN;
	     end;

	     if index (new_equal_name, "=") = 0 then do;
		call com_err_ (0, WHOAMI, "Entryname for converted dump must be an equal name. ^a", new_equal_name);
		goto MAIN_RETURN;
	     end;
	     in_place = "0"b;
	end;

	else do;
	     new_dname = old_dname;
	     new_equal_name = "==";
	     in_place = "1"b;
	end;

	new_ptrs (*) = null ();
	old_ptrs (*) = null ();

/* First, look for all the segments which are part of this FDUMP image. Stop
   looking when there are no more. This loop also initiates or creates the
   output segments. */

	total_pages = 0;
	do idx = 0 by 1;
	     ename = ename_prefix || rtrim (ltrim (char (idx))) || ename_suffix;

	     call hcs_$initiate_count (old_dname, ename, "", old_bc (idx), 0, old_ptrs (idx), code);
	     if old_ptrs (idx) = null () then do;
		if code = error_table_$noentry then
		     if idx > 0 then
			goto FINISHED_INITIATING;

		call com_err_ (code, WHOAMI, "^a^[>^]^a", old_dname, (old_dname ^= ">"), ename);
		goto MAIN_RETURN;
	     end;

	     old_lth (idx) = divide ((old_bc (idx) + (36 * 1024) - 1), 36 * 1024, 17, 0);
	     total_pages = total_pages + old_lth (idx);

	     call get_equal_name_ (ename, new_equal_name, ename, code);
	     if code ^= 0 then goto BAD_NEW_SEGMENT;
	     new_name (idx) = ename;

	     call hcs_$make_seg (new_dname, ename, "", 01010b, new_ptrs (idx), code);
	     if new_ptrs (idx) = null () then do;
BAD_NEW_SEGMENT:	call com_err_ (code, WHOAMI, "^a^[>^]^a", new_dname, (new_dname ^= ">"), ename);
		goto MAIN_RETURN;
	     end;

	     call hcs_$fs_get_mode (new_ptrs (idx), fs_mode, code);
	     if code ^= 0 then goto BAD_NEW_SEGMENT;
	     code = error_table_$no_w_permission;
	     if substr (bit (binary (fs_mode, 5), 5), 4, 1) = "0"b then goto BAD_NEW_SEGMENT;
	end;

/* Now, figure out how many segments there are, what the max length of the dump
   image segments is, and possibly create another output segment -- this is necessary
   if all the existing segments are completely full, so that adding a page would
   cause an overflow into the next segment. */

FINISHED_INITIATING:
	n_old_segs = idx - 1;
	if n_old_segs > 0 then			/* Zero-Origin */
	     dump_seg_lth = old_lth (0);
	else dump_seg_lth = divide (sys_info$max_seg_size, 1024, 17, 0);

	if old_lth (n_old_segs) + 1 > dump_seg_lth then do;
	     ename = ename_prefix || rtrim (ltrim (char (n_old_segs + 1))) || ename_suffix;
	     n_new_segs = n_old_segs + 1;

	     call get_equal_name_ (ename, new_equal_name, ename, code);
	     if code ^= 0 then goto BAD_NEW_SEGMENT;

	     call hcs_$make_seg (new_dname, ename, "", 01010b, new_ptrs (n_new_segs), code);
	     if new_ptrs (n_new_segs) = null () then goto BAD_NEW_SEGMENT;

	     call hcs_$fs_get_mode (new_ptrs (n_new_segs), fs_mode, code);
	     if code ^= 0 then goto BAD_NEW_SEGMENT;
	     code = error_table_$no_w_permission;
	     if substr (bit (binary (fs_mode, 5), 5), 4, 1) = "0"b then goto BAD_NEW_SEGMENT;
	end;
	else n_new_segs = n_old_segs;

/* Now loop backward through all the pages in the dump, copying page N into page N+1;
   that is, shifting it all right by one page. The pages are numbered zero-origin, but
   the loop terminates at one because the page zero of segment zero is the header page,
   and cannot be simply copied. */

	do idx = total_pages - 1 to 1 by -1;
	     old_seg = divide (idx, dump_seg_lth, 17, 0);
	     old_page_ptr = pointer (old_ptrs (old_seg), (1024 * mod (idx, dump_seg_lth)));
	     new_seg = divide (idx + 1, dump_seg_lth, 17, 0);
	     new_page_ptr = pointer (new_ptrs (new_seg), (1024 * mod (idx + 1, dump_seg_lth)));
	     new_page_ptr -> page = old_page_ptr -> page;
	end;

/* Now, set the bitcounts everywhere to indicate the appropriate sizes -- it's max length
   for all segments but the last. */

	remaining_pages = total_pages;
	do idx = 0 to n_new_segs;
	     if remaining_pages > dump_seg_lth then
		call hcs_$set_bc_seg (new_ptrs (idx), (36 * 1024 * dump_seg_lth), (0));
	     else call hcs_$set_bc_seg (new_ptrs (idx), (36 * 1024 * remaining_pages), (0));
	     remaining_pages = remaining_pages - dump_seg_lth;
	end;

/* Finally, the dump headers are converted. The old dump header is copied into automatic,
   and all the corresponding information is copied into an automatic version of the new
   header, which is finally inserted into the new FDUMP image. This cannot use by-name
   assignment, more's the pity, because there are several arrays with different bounds
   which must be copied, as well as the scalar items. */

	unspec (old_dump) = unspec (old_ptrs (0) -> v1_dump);
	unspec (new_dump) = ""b;

	new_dump.dump_header = old_dump.dump_header;

	do idx = 1 to hbound (old_dump.segs, 1);
	     new_dump.segs (idx) = old_dump.segs (idx);
	end;

	do idx = 0 to hbound (old_dump.amptwregs, 1);
	     new_dump.amptwregs (idx) = old_dump.amptwregs (idx);
	     new_dump.amptwptrs (idx) = old_dump.amptwptrs (idx);
	     new_dump.amsdwregs (idx) = old_dump.amsdwregs (idx);
	     new_dump.amsdwptrs (idx) = old_dump.amsdwptrs (idx);
	end;

	do idx = 0 to hbound (old_dump.ouhist, 1);
	     new_dump.ouhist (idx) = old_dump.ouhist (idx);
	     new_dump.cuhist (idx) = old_dump.cuhist (idx);
	     new_dump.duhist (idx) = old_dump.duhist (idx);
	     new_dump.auhist (idx) = old_dump.auhist (idx);
	end;

	unspec (new_dump.prs) = unspec (old_dump.prs);	/* Avoid validating pointers */
	new_dump.regs = old_dump.regs;

	new_dump.low_order_port = old_dump.low_order_port;
	new_dump.mctime = old_dump.mctime;

	new_dump.misc_registers = old_dump.misc_registers;
	new_dump.ptrlen = old_dump.ptrlen;

	new_dump.coreblocks (*) = old_dump.coreblocks (*);

	new_dump.version = DUMP_VERSION_2;

	unspec (new_ptrs (0) -> dump) = unspec (new_dump);

	if ^in_place then do;			/* Only do this if something actually moved */
	     do idx = 0 to n_new_segs;		/* Now, copy the ACLs to make it all perfectly clean */
		call copy_acl_ (old_dname, seg_zero_ename, new_dname, new_name (idx), error_sw, code);
	     end;					/* Just ignore errors -- they are benign */
	end;

	call ioa_ ("^a: Converted ^d pages from ^a^[>^]^a^[^/^3xinto ^a^[>^]^a^]",
	     WHOAMI, total_pages, old_dname, (old_dname ^= ">"), seg_zero_ename,
	     (^in_place), new_dname, (new_dname ^= ">"), new_name (0));

	goto MAIN_RETURN;

%page; %include bos_dump;

     end convert_v1_fdump;
