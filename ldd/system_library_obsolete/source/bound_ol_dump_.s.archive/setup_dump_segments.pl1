/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


setup_dump_segments:
     proc (dump_ptrs, slt_ptr, definitions_ptr, nametbl_ptr,
	     flagbox_seg, error_msg, code);


/* Procedure to setup critical segments from an FDUMP
   An array of pointers to dump segment components is passed as a parameter
   --this array is in order by component (0, 1, 2, ...).  This procedure
   copies the following segments from the FDUMP into supplied segments:
   SLT, definitions_, and the Name Table.  It finds the SLT from the flagbox,
   the Name Table from the SLT, and definitions_ from the SLT and Name Table.
   It uses the segment number of flagbox in the running system, unless over-ridden
   by a non-zero segment number passed as a parameter.  If this procedure
   fails, it returns a descriptive error message along with a standard error
   code.

   Written March 1981 by J. Bongiovanni								*/


/* Parameter */

dcl  dump_ptrs (*) ptr;				/* array of ordered pointers to dump components	*/
dcl  slt_ptr ptr;					/* where to copy SLT			*/
dcl  definitions_ptr ptr;				/* where to copy definitions			*/
dcl  nametbl_ptr ptr;				/* where to copy name table			*/
dcl  flagbox_seg fixed bin;				/* if non-zero, segment number of flagbox	*/
dcl  error_msg char (*);				/* ascii error message			*/
dcl  code fixed bin (35);				/* standard error code			*/


/* Automatic */

dcl  defp ptr;
dcl  flagbox_no fixed bin;
dcl  flagbox_ptr ptr;

/* Static */

dcl  MYNAME char (19) init ("setup_dump_segments") int static options (constant);


/* Entry */

dcl  copy_from_dump entry ((*) ptr, fixed bin, fixed bin (18), fixed bin (18), ptr, fixed bin (18), fixed bin (35));
dcl  get_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  release_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  ring0_get_$segptr entry (char (*), char (*), ptr, fixed bin (35));
dcl  ring0_get_$segptr_given_slt entry (char (*), char (*), ptr, fixed bin (35), ptr, ptr);

/* External */

dcl  error_table_$action_not_performed fixed bin (35) external;
dcl  sys_info$max_seg_size fixed bin (18) external;

/* Condition */

dcl  cleanup condition;

/* Builtin */

dcl  baseno builtin;
dcl  bin builtin;




%page;

/* Pick up flagbox segment number from running system, unless supplied in call				*/


	code = 0;
	error_msg = "Using SSTNT filled by BOS.";
	if flagbox_seg ^= 0
	then flagbox_no = flagbox_seg;
	else do;
	     call ring0_get_$segptr ("", "flagbox", flagbox_ptr, code);
	     if code ^= 0 then do;
		error_msg = "Cannot find flagbox on system";
		return;
	     end;
	     flagbox_no = bin (baseno (flagbox_ptr), 18);
	end;

/* Copy the flagbox from the FDUMP								*/

	call get_temp_segment_ (MYNAME, fgbxp, code);
	if code ^= 0 then do;
	     error_msg = "Error getting temp segment.";
	     return;
	end;

	on cleanup call cleanit;

	call copy_seg (flagbox_no, fgbxp, "flagbox");

	if slt_segno = "0"b then do;
	     code = error_table_$action_not_performed;
	     error_msg = "slt seg number not filled";
	     return;
	end;

/* Copy remaining segments of interest								*/

	call copy_seg (bin (slt_segno, 18), slt_ptr, "slt");
	sltp = slt_ptr;
	call copy_seg (bin (baseno (slt.name_seg_ptr), 18), nametbl_ptr, "Name Table");
	call ring0_get_$segptr_given_slt ("", "definitions_", defp, code, sltp, nametbl_ptr);
	if code ^= 0 then do;
	     call cleanit;
	     error_msg = "Cannot find definitions_";
	     return;
	end;
	call copy_seg (bin (baseno (defp), 18), definitions_ptr, "definitions_");

ERROR_RETURN:
	call cleanit;
	return;

%page;
/* Internal procedure to copy a segment from the FDUMP and return with an error
   if this cannot be done for any reason							*/


copy_seg:	proc (segno, seg_ptr, seg_name);

dcl  segno fixed bin;				/* segment number to copy			*/
dcl  seg_ptr ptr;					/* where to copy to				*/
dcl  seg_name char (*);				/* name of segment for error message		*/

dcl  found bit (1);
dcl  seginx fixed bin;
dcl  words_copied fixed bin (18);



	     dumpptr = dump_ptrs (1);
	     found = "0"b;
	     seginx = 1;
	     do while (seginx <= dump.num_segs & ^found);
		if bin (dump.segs.segno (seginx), 18) = segno
		then found = "1"b;
		else seginx = seginx + 1;
	     end;
	     if ^found then do;
		code = error_table_$action_not_performed;
		goto build_error_message;
	     end;


	     call copy_from_dump (dump_ptrs, seginx, 0, sys_info$max_seg_size, seg_ptr, words_copied, code);
	     if code ^= 0 | words_copied <= 0 then do;
build_error_message:

		error_msg = "Cannot find " || seg_name || " in dump";
		goto ERROR_RETURN;
	     end;

	end copy_seg;


/* Internal procedure for cleanup								*/


cleanit:
	proc;

dcl  rcode fixed bin (35);



	     call release_temp_segment_ (MYNAME, fgbxp, rcode);

	end cleanit;

%page;
%include bos_dump;
%page;
%include fgbx;
%page;
%include slt;


     end setup_dump_segments;
