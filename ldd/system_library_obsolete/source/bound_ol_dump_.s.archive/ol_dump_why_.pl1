/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

ol_dump_why_: proc (odsp);

/* Completed for installation May 1982 by Rich Coppola from source provided
   by Dave Kitson */
/* Modified Oct 1982 by Rich Coppola to have it set ol_dump_struc.dbrsv before
   returning to ol_dump.
*/

%include ol_dump_struc;
%page;


dcl  ioa_ entry options (variable);
dcl  display_stack_ entry (ptr);
dcl  display_process_$apt entry (ptr);
dcl  display_regs_$mcprds entry (ptr);
dcl  display_regs_$mcpds entry (ptr);

dcl  ol_dump_util_$get_ptr entry (fixed bin, ptr, fixed bin (35), ptr);
dcl  ol_dump_util_$fnd_dbr entry (fixed bin (24), fixed bin (35), fixed bin, ptr);
dcl  ol_dump_util_$get_ptr_given_dbr entry (fixed bin (24), fixed bin, ptr, fixed bin (35), ptr);
dcl  ring0_get_$segptr_given_slt entry (char (*) aligned, char (*) aligned,
     ptr, fixed bin (35), ptr, ptr);
dcl  ring0_get_$definition_given_slt entry (ptr, char (*), char (*), fixed bin (18),
     fixed bin, fixed bin (35), ptr, ptr, ptr);

dcl (tagp, prdsp, scsp, sdatap, fdatap, pdsp, stpp) ptr;
dcl  missed_one bit (1) init ("0"b);
dcl  lg_sw bit (1);
dcl  fnd bit (1);
dcl  ltags (0:7) char (1) init ("A", "B", "C", "D", "E", "F", "G", "H");
dcl (new_dbr, dbr) fixed bin (24);
dcl  cur fixed bin;
dcl  bgn fixed bin;
dcl  ok bit (1);
dcl  tag fixed bin (3) based (tagp);
dcl  segn fixed bin ;
dcl  def_offset fixed bin (18);
dcl (segln, code) fixed bin (35);
dcl  type fixed bin;
dcl  stpw bit (36);
dcl 1 stpw2 based (addr (stpw)),
    2 ho bit (33),
    2 lo bit (3);
dcl  stp bit (36) based (stpp);
dcl  saved_dbr fixed bin (24);
dcl  i fixed bin;
dcl  cioc bit (9) init ("000001101"b);
dcl  dis bit (9) init ("110001110"b);
dcl  tra bit (9) init ("111001000"b);
dcl 1 ev_inst based (addr (scu.even_inst)),
    2 pad1 bit (18) unal,
    2 opcode bit (9) unal,
    2 pad2 bit (9) unal;
dcl 1 od_inst based (addr (scu.odd_inst)),
    2 pad1 bit (18) unal,
    2 opcode bit (9) unal,
    2 pad2 bit (9) unal;

dcl  null builtin;

%page;

	if argcnt >1 | (argcnt = 1 & arg (1) ^= "lg") then do;
	     call ioa_ ("^a", " why {lg}");
	     return;
	end;

	new_dbr = -1;

	if argcnt = 1 & arg (1) = "lg" then lg_sw = "1"b;
	else lg_sw = "0"b;
	call ol_dump_util_$fnd_dbr (fixed (addr (aptap -> apte.dbr) -> sdw.add, 24), segln, i, odsp);

	new_dbr = fixed (addr (aptap -> apte.dbr) -> sdw.add, 24);
	call ring0_get_$segptr_given_slt ("", "flagbox", fgbxp, code,
	     ol_dump_struc.sltptr, ol_dump_struc.sltnp);

	segn = fixed (baseno (fgbxp));

	call ol_dump_util_$get_ptr (segn, fgbxp, segln, odsp);

	if fgbxp = null then call ioa_ ("Unable to get message");
	else do;
	     if fgbx.rtb.mess then call ioa_ ("^a ^a  ",
	        ":::::::::::: CRASH MESSAGE   ", fgbx.message);
	     else call ioa_ (":::::::::::: NO CRASH MESSAGE ::::::::::::");
	end;

	call ring0_get_$segptr_given_slt ("", "scs", scsp, code,
	     ol_dump_struc.sltptr, ol_dump_struc.sltnp);

	call ring0_get_$definition_given_slt (null, "scs", "sys_trouble_pending",
	     def_offset, type, code, ol_dump_struc.sltptr, ol_dump_struc.sltnp, ol_dump_struc.defptr);
	segn = fixed (baseno (scsp));
	call ol_dump_util_$get_ptr (segn, scsp, segln, odsp);

	if scsp = null then do;
	     call ioa_ ("Can't get SCS segment");
	     go to CLEANUP;
	end;
	stpp = addrel (scsp, def_offset);
	stpw = stp;
	if stpw2.ho = "77777777777"b3 then call fimfault;
	else call notfimfault;

CLEANUP:

	ol_dump_struc.dbrsv = new_dbr;
	return;
%page;
fimfault:	proc;

	     cur = 0;
	     fnd = "0"b;
	     saved_dbr = ol_dump_struc.dbrsv;
	     bgn = 0;
	     do while (cur < ol_dump_struc.no_apt & fnd ^= "1"b);
		call get_running (bgn, cur, ok);
		if ok then do;
		     call ring0_get_$definition_given_slt (null, "prds", "processor_tag",
		        def_offset, type, code, ol_dump_struc.sltptr,
		        ol_dump_struc.sltnp, ol_dump_struc.defptr);
		     tagp = addrel (prdsp, def_offset);
		     call ring0_get_$definition_given_slt (null, "prds",
			"sys_trouble_data", def_offset, type, code, sltptr,
		        ol_dump_struc.sltnp, ol_dump_struc.defptr);
		     mcp = addrel (prdsp, def_offset);
		     scup = addr (mc.scu (0));

		     if lo = "1"b3 then do;
			call ioa_ ("^/^a ^a", ":::::::::::: RUNNING ON CPU ", ltags (tag));
			arg (1) = "systroub";
			argcnt = 1;
			call display_regs_$mcprds (odsp);
		     end;

		     else if lo = "2"b3 then do;
			if ev_inst.opcode = (cioc & od_inst.opcode = dis)
			| ev_inst.opcode = (cioc & od_inst.opcode = tra)
			then do;
			     call ioa_ ("^/^a ^a", ":::::::::::: ON CPU ", ltags (tag));
			     arg (1) = "systroub";
			     arg (2) = "lg";
			     if lg_sw then argcnt = 2;
			     else argcnt = 1;
			     call display_regs_$mcprds (odsp);
			     fnd = "1"b;
			end;
		     end;

		     else if lo = "3"b3 then do;
			if ev_inst.opcode = (cioc & od_inst.opcode = dis)
			| ev_inst.opcode = (cioc & od_inst.opcode = tra)
			then do;
			     call ioa_ ("^/^a ^a", ":::::::::::: ON CPU ", ltags (tag));
			     arg (1) = "fim";
			     arg (2) = "lg";
			     if lg_sw then argcnt = 2;
			     else argcnt = 1;
			     call display_regs_$mcpds (odsp);
			     fnd = "1"b;
			end;
		     end;

		     else if (lo >"3"b3) & (lo <"7"b3) | lo = "0"b3 then do;
			if ev_inst.opcode = (cioc & od_inst.opcode = dis)
			| ev_inst.opcode = (cioc & od_inst.opcode = tra)
			then do;
			     call ioa_ ("^/^a ^a", ":::::::::::: ON  CPU ", ltags (tag));
			     call ol_dump_util_$get_ptr (pdsseg, pdsp, segln, odsp);
			     call ring0_get_$definition_given_slt (null, "pds",
			        "fim_data", def_offset, type,
				code, sltptr, sltnp, defptr);
			     fdatap = addrel (pdsp, def_offset);
			     call ring0_get_$definition_given_slt (null, "pds",
			        "signal_data", def_offset, type, code, sltptr, sltnp, defptr);
			     sdatap = addrel (pdsp, def_offset);
			     if fdatap -> fault_time >sdatap -> fault_time then arg (1) = "fim";
			     else arg (1) = "sig";
			     arg (2) = "lg";
			     if lg_sw then argcnt = 2;
			     else argcnt = 1;
			     call display_regs_$mcpds (odsp);
			     fnd = "1"b;
			end;
		     end;

		     else if lo = "7"b3 then do;
			if ev_inst.opcode = (cioc & od_inst.opcode = dis)
			| ev_inst.opcode = (cioc & od_inst.opcode = tra)
			then do;
			     call ioa_ ("^/^a ^a", ":::::::::::: ON CPU ", ltags (tag));
			     arg (1) = "pgflt";
			     arg (2) = "lg";
			     if lg_sw then argcnt = 2;
			     else argcnt = 1;
			     call display_regs_$mcpds (odsp);
			     fnd = "1"b;
			end;
		     end;
		     bgn = cur;
		end;
	     end;

	     if ^fnd then
		if missed_one then
	        call ioa_ ("^a", ":::::::::::: COULD NOT GET ALL RUNNING PROCESSES");
	end;
%page;

get_running: proc (first, nxt, got_one);
dcl (first, nxt, i, j) fixed bin;
dcl  got_one bit (1);

	     got_one = "0"b;
	     do i = first to ol_dump_struc.no_apt-1;
		aptep = addrel (aptap, i*ol_dump_struc.apt_entry_size);
		if (apte.state = "000001"b3) | (apte.flags.dbr_loaded) then do;
		     sdwp = addr (aptep -> apte.dbr);
		     call ol_dump_util_$get_ptr_given_dbr (fixed (sdw.add, 24), ol_dump_struc.prdsseg,
			prdsp, segln, odsp);

		     if prdsp = null then do;
			missed_one = "1"b;
			goto next;
		     end;

		     nxt = i+1;
		     dbr = fixed (sdw.add, 24);
		     call ol_dump_util_$fnd_dbr (dbr, segln, i, odsp);
		     new_dbr = fixed (addr (aptap -> apte.dbr) -> sdw.add, 24);
		     if i = -1 then goto next ;
		     else got_one = "1"b;
		     call ol_dump_util_$get_ptr (ol_dump_struc.kstseg, ol_dump_struc.kstptr,
			segln, odsp);
		     return;
		end;
next:
	     end;
	     nxt = i+1;
	end;

%page;
notfimfault: proc;

dcl  nprocs fixed bin;
dcl  j fixed bin;
dcl  nprocessors fixed bin based (np);
dcl 1 proc_info (0:7),
    2 stptr ptr,
    2 dbrp fixed bin (24);

dcl  np ptr;
dcl  ptag fixed bin;
dcl  ftime bit (54);
dcl  clckfnd bit (1) init ("0"b);
dcl  i fixed bin;
dcl  conlock bit (36) based (conlockp);
dcl  conlockp ptr;

	     do i = 0 to 7;
		proc_info (i).stptr = null;
	     end;

	     call ring0_get_$definition_given_slt (null, "scs", "connect_lock", def_offset,
		type, code, ol_dump_struc.sltptr, ol_dump_struc.sltnp, ol_dump_struc.defptr);

	     conlockp = addrel (scsp, def_offset);
	     do j = 0 to ol_dump_struc.no_apt-1;
		aptep = addrel (aptap, j*ol_dump_struc.apt_entry_size);
		if apte.processid = "000000000000"b3 then goto next1;
		if (apte.processid = conlock)| (apte.state = "000001"b3) |
		   (apte.flags.dbr_loaded) then do;
		     sdwp = addr (aptep -> apte.dbr);
		     call ol_dump_util_$get_ptr_given_dbr (fixed (sdw.add, 24),
		        ol_dump_struc.prdsseg, prdsp, segln, odsp);

		     if prdsp = null then do;
			if conlock = apte.processid then do;
			     call ioa_ ("Can't find proc that did it.");
			     return;
			end;
			else goto next1;
		     end;

		     call ring0_get_$definition_given_slt (null, "prds", "processor_tag", def_offset,
			type, code, ol_dump_struc.sltptr, ol_dump_struc.sltnp, ol_dump_struc.defptr);
		     tagp = addrel (prdsp, def_offset);
		     dbr = fixed (sdw.add, 24);
		     call ol_dump_util_$fnd_dbr (dbr, segln, i, odsp);
		     new_dbr = fixed (addr (aptap -> apte.dbr) -> sdw.add, 24);
		     if i = -1 then do;
			if conlock = apte.processid then do;
			     call ioa_ ("Can't get process that did it.");
			     return;
			end;
			else goto next1;
		     end;

		     dbr = fixed (sdw.add, 24);
		     call ol_dump_util_$get_ptr (ol_dump_struc.kstseg, ol_dump_struc.kstptr, segln, odsp);
		     if conlock = apte.processid then do;
			clckfnd = "1"b;
			call ioa_ ("^/::::::::::::  CALL TO BOS BY  ::::::::::::^/");
			odsp -> argcnt = 1;
			odsp -> arg (1) = "cur";
			call display_process_$apt (odsp);
			odsp -> arg (1) = "ring";
			odsp -> arg (2) = "0";
			odsp -> arg (3) = "args";
			if lg_sw then argcnt = 3;
			else argcnt = 2;
			call ioa_ ("^/::::::::::::::: RING 0 STACK TRACE :::::::::::::::^/");
			call display_stack_ (odsp);
			return;
		     end;

		     if conlock = "000000000000"b3 then do;
			call ring0_get_$definition_given_slt (null, "prds",
			   "sys_trouble_data", def_offset, type, code,
			   ol_dump_struc.sltptr, ol_dump_struc.sltnp,
			   ol_dump_struc.defptr);
			proc_info (tag).stptr = addrel (prdsp, def_offset);
			proc_info (tag).dbrp = dbr;
		     end;
		end;
next1:
	     end;

	     if conlock then do;
		if ^clckfnd then call ioa_ ("^a ^w",
		   ":::::::::::: CANNOT FIND THE CALLING PROCESS ", (conlock));
	     end;

	     if conlock = "000000000000"b3 then do;
		ftime = "777777777777777777"b3;
		call ring0_get_$definition_given_slt (null, "scs", "nprocessors", def_offset,
		     type, code, ol_dump_struc.sltptr, ol_dump_struc.sltnp, ol_dump_struc.defptr);

		np = addrel (scsp, def_offset);
		nprocs = 0;

		do i = 0 to 7;
		     if proc_info (i).stptr ^= null then do;
			nprocs = nprocs + 1;
			if proc_info (i).stptr -> fault_time < ftime then ptag = i;
			ftime = proc_info (i).stptr -> fault_time;
		     end;
		end;

		dbr = proc_info (ptag).dbrp;
		call ol_dump_util_$fnd_dbr (dbr, segln, i, odsp);
		new_dbr = fixed (addr (aptap -> apte.dbr) -> sdw.add, 24);
		call ol_dump_util_$get_ptr (ol_dump_struc.kstseg, ol_dump_struc.kstptr, segln, odsp);
		if nprocs ^= nprocessors then call ioa_ ("^/^a^/",
		   "COULD NOT GET ALL RUNNING PROCESSES, BEST GUESS IS");
		call ioa_ ("^a",
		   ":::::::::::: PROCESS THAT CRASHED ::::::::::::");
		arg (1) = "cur";
		argcnt = 1;
		call display_process_$apt (odsp);
		arg (1) = "ring";
		arg (2) = "0";
		arg (3) = "args";
		if lg_sw then argcnt = 3;
		else argcnt = 2;
		call ioa_ ("^/:::::::::::: RING _ STACK TRACE ::::::::::::");
		call display_stack_ (odsp);
	     end;
	end;

%page;
%include sdw;
%page;
%include apte;
%page;
%include fgbx;
%page;
%include mc;

  end ol_dump_why_;
