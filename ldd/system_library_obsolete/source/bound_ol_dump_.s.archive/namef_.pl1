/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


namef_: proc (segptr, odsp) returns (char (*));

/* Modification History - namef_:
   Initially coded by J. A. Bush - Dec. 1975
   Modified April 6, 1981 by Rich Coppola to fix bug causing OOSBs.
*/

% include ol_dump_struc;

dcl  segptr ptr;					/* ptr to segment and offset in question */
dcl (segno, ling, k, i, j, mblen, dl) fixed bin;
dcl  bitcnt fixed bin (24);
dcl  code fixed bin (35);
dcl  offrel fixed bin (18);
dcl (genp, bmp, ptrtmp, sblkp, astep, nsdwp, nmp, areap) ptr;
dcl  namebuf char (168);
dcl  var_str char (ling) based (ptrtmp);
dcl  dirname char (168);
dcl (bndsw, tmr) bit (1);
dcl  key char (1);
dcl  ename char (32);
dcl  zerodivide condition;


dcl  hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24),
     fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$status_ entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
dcl  get_system_free_area_ entry (ptr);
dcl  get_bound_seg_info_ entry (ptr, fixed bin (24), ptr, ptr, ptr, fixed bin (35));
dcl  expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  get_ast_name_ entry (ptr, ptr, ptr, char (*));
dcl  ring0_get_$name_given_slt entry (char (*), char (*), ptr, fixed bin (35), ptr, ptr);
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  ioa_$rsnnl entry options (variable);
dcl  ol_dump_util_$fnd_hcseg entry (char (32), ptr, fixed bin (24), ptr);
dcl 1 oi_area aligned like object_info;
dcl (null, length, addr, addrel, baseno, fixed, ptr, rel, substr, baseptr, hbound, rtrim, index, size, reverse) builtin;

dcl 1 branch aligned,				/* output structure from hcs_$status_ */
    2 type bit (2) unal,
    2 nnames fixed bin (15) unal,
    2 nrp bit (18) unal,
    2 dtm bit (36) unal,
    2 dtu bit (36) unal,
    2 mode bit (5) unal,
    2 pad bit (13) unal,
    2 rec fixed bin (17) unal;

dcl 1 dinfo int static,				/* level one directory assosciative memory */
    2 ndir fixed bin init (0),
    2 l1dir (30),
      3 lg_name char (32),
      3 sht_name char (4);

dcl  dnames (branch.nnames) char (32) aligned based (nmp);



/*  */
	bndsw = "0"b;				/* set sw to break out component names and relative offsets */
	go to common;
no_comp:	entry (segptr, odsp) returns (char (*));
	bndsw = "1"b;				/* set switch for no component breakout */
common:
	segno = fixed (baseno (segptr), 18);		/* Get segment number */
	offrel = fixed (rel (segptr), 18);		/* Get offset */
	mblen = 168;				/* preset return char length to 168 */
	if segno <= hcscnt then do;			/* if a hardcore segment */
	     call ring0_get_$name_given_slt (dirname, ename, baseptr (segno), code, sltptr, sltnp); /* get name */
	     if code ^= 0 then return ("not known");
	     if bndsw then return (ename);
	     if substr (ename, 1, 5) ^= "bound" then do;
		call ioa_$rsnnl ("^a|^o", ename, mblen, ename, fixed (rel (segptr)));
		return (ename);
	     end;
	     namebuf = ename;			/* copy for compatability */
	     go to inithc;				/* initiate hardcore seg from ldd */
	end;
	else do;					/* Non hardcore segment */
	     if segptr = null then return ("NULL POINTER"); /* if null ptr stop here */
	     if sstnp = null then return ("NO SSTNT");
	     nsdwp = addrel (dsegp, segno * 2);
	     astep = ptr (sstptr, fixed (nsdwp -> sdw.add, 24) - fixed (sstptr -> sst.ptwbase, 18)
		- sstptr -> sst.astsize);		/* Compute Astep */
	     namebuf = "";

	     on condition (zerodivide)
		namebuf = "CANNOT-COMPLETE-PATH";


	     call get_ast_name_ (astep, sstptr, sstnp, namebuf); /* Figure out the name */
	     revert condition (zerodivide);


	     if length (rtrim (namebuf)) > 1 then do;	/* special case the root */
		if index (namebuf, "CANNOT") ^= 0 | (index (reverse (namebuf), "!>") ^= 0 &
		substr (namebuf, 1, 16) ^= ">process_dir_dir") then
		     if (phcs_ok & kstptr ^= null) then /* if all this is true, go find name from kst */
			call kst_name (segno);	/* find the name from kst */
		if substr (namebuf, 1, 1) = ">" then do; /* convert level 1 directories to short form */
		     ename = "";			/* set ename to all blanks first */
		     i = index (substr (namebuf, 2), ">") - 1;
		     if i = 0 then
			ename = rtrim (substr (namebuf, 2));
		     else ename = substr (namebuf, 2, i);
		     tmr = "0"b;
		     if ndir ^= 0 then do;		/*  if  we have any dirs in ass mem. */
			do i = 1 to ndir while (^tmr);
			     if l1dir.lg_name (i) = ename then
				tmr = "1"b;
			end;
		     end;
		     if ^tmr then do;		/* did not find in assosiative memory */
			ndir = ndir + 1;		/* increment assosiative memory index */
			l1dir.lg_name (ndir) = ename; /* set in long name */
			l1dir.sht_name (ndir) = "";	/* initially set short name to blanks */
			call get_system_free_area_ (areap); /* get a place to store names */
			call hcs_$status_ (">", ename, 0, addr (branch), areap, code);
			if code ^= 0 then go to st_err; /* if we get error, forget it */
			if branch.nnames > 1 | branch.nrp ^= "0"b then do;
			     nmp = ptr (areap, branch.nrp); /*  form ptr to names */
			     if substr (ename, 1, 15) = "system_library_" then
				if substr (ename, 1, 16) ^= "system_library_1" then
				     key = substr (ename, 16, 1); /* get cmp key for system librarys */
				else key = substr (ename, 1, 1); /* use first letter of long name for others */
			     else key = substr (ename, 1, 1); /* use first letter of long name for others */
			     tmr = "0"b;		/* reset terminate condition */
			     do i = 1 to branch.nnames while (^tmr);
				if substr (dnames (i), 1, 1) = key then
				     if length (rtrim (dnames (i))) <= 4 then do; /* found name meetin criteria */
					l1dir.sht_name (ndir) = dnames (i);
					tmr = "1"b; /* set terminate condition */
				     end;
			     end;
			end;
st_err:
			i = ndir + 1;		/* set correct index */
		     end;
		     if l1dir.sht_name (i-1) ^= "" then do; /* if short name is present */
			dl = length (rtrim (l1dir.lg_name (i-1)));
			j = length (rtrim (l1dir.sht_name (i-1)));
			ling = (length (rtrim (namebuf)) - dl) + 1;
			substr (namebuf, 2, j) = substr (l1dir.sht_name (i-1), 1, j);
			substr (namebuf, j + 2) = substr (namebuf, dl + 2);
			substr (namebuf, j + ling + 5) = "";
		     end;
		end;
	     end;
	     if bndsw then return (namebuf);
	     call expand_path_ (addr (namebuf), length (namebuf), addr (dirname), addr (ename), code);
	     if substr (ename, 1, 5) ^= "bound" then do;
		call ioa_$rsnnl ("^a|^o", namebuf, mblen, namebuf, fixed (rel (segptr)));
		return (namebuf);
	     end;
	     if substr (dirname, 1, 4) = ">sl1" then do;	/* initiate hardcore segments from ldd for bind maps */
inithc:
		call ol_dump_util_$fnd_hcseg (ename, genp, bitcnt, odsp); /* search given dirs */
		if genp = null then return (namebuf);	/* cannot find in search dirs */
	     end;
	     else do;
		genp = null;			/* make sure ptr is null */
		call hcs_$initiate_count (dirname, ename, "", bitcnt, 0, genp, code);
		if genp = null then return (namebuf);
	     end;
	     oi_area.version_number = object_info_version_2;
	     call get_bound_seg_info_ (genp, bitcnt, addr (oi_area), bmp, sblkp, code);
	     if code ^= 0 then return (namebuf);
						/* We now have a ptr to the bind map */
	     do i = 1 to n_components;
		j = fixed (bindmap.component (i).text_start, 18);
		k = fixed (bindmap.component (i).text_lng, 18);
		if offrel >= j then
		     if offrel < j + k then do;	/* We found a match */
matchp:
			ptrtmp = addrel (sblkp, bindmap.component (i).name_ptr);
			ling = fixed (bindmap.component (i).name_lng, 18);
			call ioa_$rsnnl ("^a$^a|^o", namebuf, mblen, namebuf, var_str, offrel - j);
			go to trmnme;		/* Go term segment */
		     end;
		j = fixed (bindmap.component (i).stat_start, 18);
		k = fixed (bindmap.component (i).stat_lng, 18);
		if offrel >= j then
		     if offrel < j + k then go to matchp; /* We found a match */
		j = fixed (bindmap.component (i).symb_start, 18);
		k = fixed (bindmap.component (i).symb_lng, 18);
		if offrel >= j then
		     if offrel < j + k then go to matchp; /* We found a match */
	     end;

trmnme:
	     call hcs_$terminate_noname (genp, code);
	     return (namebuf);
	end;
						/*  */

/* kst_name - internal procedure to find name of segment in kst of dump, from live system */

kst_name:	proc (segn);

dcl  segn fixed bin;
dcl  seg_array (15) fixed bin;
dcl (rzdp, rzdsp) ptr;
dcl  ring0_get_$segptr entry (char (*), char (*), ptr, fixed bin (35));
dcl  phcs_$initiate entry (char (*), char (*), char (*), fixed bin, fixed bin, ptr, fixed bin (35));
dcl  phcs_$ring_0_peek entry (ptr, ptr, fixed bin);
dcl  phcs_$terminate_noname entry (ptr, fixed bin (35));
dcl (get_temp_segments_, release_temp_segments_) entry (char (*), (*) ptr, fixed bin (35));
dcl  q (1) ptr;
dcl 1 tsdw like sdw aligned;
dcl (dlen, level) fixed bin;

	     kstp = kstptr;				/* copy ptr for neater code */
	     if segn < kst.lowseg | segn > kst.highseg then
		return;				/* no point in using KST */


	     kstep = addr (kst.kst_entry (segn));	/* get requested entry */
	     tmr = "0"b;				/* reset termination flag */

/* find root kste first, working backwards and saving kst entry indices along the way */

	     do i = 1 to 15 while (^tmr);		/* go through 15 levels if neccessary */
		seg_array (i) = kste.segno;
		if kste.entryp = null then		/* we found the root kste */
		     tmr = "1"b;

		else do;
		     j = fixed (baseno (kste.entryp));
		     if j < kst.lowseg | j > kst.highseg then
			tmr = "1"b;		/* don't use KST */

		     else kstep = addr (kst.kst_entry (j));
		     if ^kste.dirsw then
			tmr = "1"b;		/* ANOMALY;
						   superior branches should be dirs */
		end;
	     end;


	     if ^tmr then return;			/* don't waste our time */
	     call ring0_get_$segptr ("", "dseg", rzdsp, code); /* get ptr to our dseg */
	     if code ^= 0 then return;		/* get out at slightest error */
	     call get_temp_segments_ ("namef_", q, code); /* get temp segment to store dir in */
	     if code ^= 0 then return;
	     dp = q (1);

/* no go from the root and form complete pathname of target entry */

	     level = 0;
	     dirname, ename = "";			/* start with null names */
	     do j = i-2 to 1 by -1;			/* now find name */
		level = level + 1;
		if dirname = "" then
		     call phcs_$initiate (">", ename, "", 0, 0, rzdp, code);
		else call phcs_$initiate (dirname, ename, "", 0, 0, rzdp, code);
		if rzdp = null then go to ret1;	/* if some problem, get out of here */
		call phcs_$ring_0_peek (rzdp, dp, 1);	/* cause seg fault */
ftsdw:
		call phcs_$ring_0_peek (addr (rzdsp -> sdwa (fixed (baseno (rzdp)))), addr (tsdw), 2);
		if ^tsdw.df then go to ftsdw;		/* we must be faulted */
		dlen = fixed (tsdw.bound, 15) * 16 + 16;
		call phcs_$ring_0_peek (rzdp, dp, dlen); /* copy dir seg out of ring 0 */
		kstep = addr (kst.kst_entry (seg_array (j)));
		tmr = "0"b;
		do ep = ptr (dp, dp -> dir.entryfrp) repeat ptr (dp, ep -> entry.efrp) while (dp ^= ep & ^tmr);
		     if ep -> entry.uid = kste.uid then do; /* found right one */
			tmr = "1"b;		/* set terminate cond */
			dirname = rtrim (dirname) || ">" || addr (entry.primary_name) -> names.name;
			call phcs_$terminate_noname (rzdp, code); /* terminate this ref */
		     end;
		end;
		if ^tmr then do;			/* didn't find name */
ret1:
		     if level > 1 then		/* if we have part of a path */
			if index (namebuf, "CANNOT") ^= 0 then /* and if ast_pathe  no good */
			     namebuf = rtrim (dirname) || ">" || "CANNOT-COMPLETE-PATH";
		     go to ret;
		end;
	     end;
	     namebuf = dirname;			/* copy pathname */

ret:
	     call release_temp_segments_ ("namef_", q, code);

	end kst_name;

/*  */

% include kst;
% include dir_header;
% include dir_entry;
% include dir_name;
% include bind_map;
% include object_info;
% include sdw;
% include sst;
     end namef_;
