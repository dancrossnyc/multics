/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

ta_extract_: proc (table_ptr, arg_array, delete, force, table_name, code);

/* This subroutine handles the extract key of tape_archive.

   Written 05/10/77 by C. D. Tavares.
   Modified 09/24/79 by CDT to implement star convention.
   Modified 09/21/80 by CDT to implement table workspace strategy
   (indivisible updates).
   Last modified 83-03-24 by S. G. Harris (UNCA) for version 4.
*/

/* PARAMETERS */

dcl  arg_array (*) char (168) parameter,
     delete bit (1) aligned parameter,
     force bit (1) aligned parameter,
     table_name char (*) parameter,
     code fixed bin (35) parameter;

/* AUTOMATIC */

dcl  answer char (4) varying,
     arg char (168),
     component_slot fixed bin,
     dirname char (168),
     ename char (32),
     i fixed bin,
     request_slot fixed bin,
     single_name_sw bit (1) aligned,
     specific_component bit (1) aligned;

/* CONDITIONS */

dcl  cleanup condition;

/* INTERNAL STATIC */

dcl  system_free_ptr pointer static initial (null);

/* EXTERNAL STATIC */

dcl  error_table_$badopt ext fixed bin (35) static;

dcl  sys_info$max_seg_size ext fixed bin (35) static;

/* ENTRIES */

dcl  check_star_name_$entry ext entry (char (*), fixed bin (35)),
     command_query_ ext entry options (variable),
     com_err_ ext entry options (variable),
     expand_pathname_ ext entry (char (*), char (*), char (*), fixed bin (35)),
     get_system_free_area_ ext entry returns (pointer),
     hcs_$status_minf ext entry (char (*), char (*), fixed bin, fixed bin, fixed bin (24), fixed bin (35));

dcl  ta_table_mgr_$find_component ext entry (pointer, char (*), char (*), bit (1) aligned, fixed bin, fixed bin, fixed bin (35)),
     ta_table_mgr_$lock ext entry (pointer, char (*), fixed bin, fixed bin (35)),
     ta_table_mgr_$unlock ext entry (pointer, fixed bin (35)),
     ta_table_mgr_$star_list ext entry (pointer, char (*), fixed bin, pointer, fixed bin (35)),
     ta_table_mgr_$setup_workspace ext entry (pointer, fixed bin, fixed bin, pointer),
     ta_table_mgr_$complete_table_op ext entry (pointer);

/* BASED */

dcl  system_free_area area (sys_info$max_seg_size) based (system_free_ptr);

/* BUILTINS */

dcl (addr, dim, null, substr, unspec) builtin;

/* INCLUDE FILES */
%include query_info;
%page;
%include status_info_branch;
%page;
%include tape_archive_table_dcl;
%page;
%include tape_archive_star;
%page;

/* ta_extract_: proc... */

	if system_free_ptr = null then
	     system_free_ptr = get_system_free_area_ ();

	single_name_sw = ""b;
	specific_component = ""b;
	query_info.version = query_info_version_5;
	query_info.yes_or_no_sw = "1"b;

/* Following block handles control args */

	do i = 1 to dim (arg_array, 1);

	     arg = arg_array (i);

	     if substr (arg, 1, 1) = "-" then do;
		if (arg = "-single_name" | arg = "-snm") then single_name_sw = "1"b;

		else do;
		     code = error_table_$badopt;
		     call com_err_ (code, "tape_archive", "Arguments from ""^a"" were not processed.",
			arg);
		     return;
		end;
	     end;

	     else specific_component = "1"b;
	end;

/* Following block handles args which should be storage system pathnames */

	if specific_component then
	     do i = 1 to dim (arg_array, 1);

	     arg = arg_array (i);

	     if substr (arg, 1, 1) ^= "-" then call process_filearg (arg);
	end;

	else					/* user wants everything extracted */
	do i = 1 to tape_archive_table.n_component_slots;
	     if component_table (i).valid then
		call process_filearg (component_table (i).entry_name);
	end;

	code = 0;
returner:	return;

%skip(5);
process_filearg: proc (component_name);

dcl  component_name char (*) parameter;

	     call expand_pathname_ (component_name, dirname, ename, code);
	     if code ^= 0 then do;
not_processed:	call com_err_ (code, "tape_archive", """^a"" not processed.", component_name);
		return;
	     end;

	     call check_star_name_$entry (ename, code);
	     if code = 0 then do;
		call extract_one (dirname, ename);
		return;
	     end;

	     else if (code = 1) | (code = 2) then begin;	/* arbitrary starname or "**" */
						/* the begin keeps the current procedure fast by limiting
						   the scope of the following cleanup handler. */

dcl  i fixed bin;

		ta_component_star_ptr = null;

		on cleanup begin;
		     if ta_component_star_ptr ^= null then
			free ta_component_star_info in (system_free_area);
		end;

		call ta_table_mgr_$star_list (table_ptr, ename, Component, ta_component_star_ptr, code);
		if code ^= 0 then goto not_processed;

		do i = 1 to ta_component_star_info.n_entries;
		     call extract_one (dirname, ta_component_star_info (i).ename);
		end;

		free ta_component_star_info in (system_free_area);
	     end;

	     else goto not_processed;
	     return;
%skip(5);
extract_one:   proc (dirname, ename);

dcl (dirname, ename) char (*) parameter;

		if ^force then do;
		     call hcs_$status_minf (dirname, ename, 1 /* chase */, 0, 0, code);
		     if code = 0 then call com_err_ (0, "tape_archive", "Warning - ^a>^a already exists.", dirname, ename);
		end;

		on cleanup call ta_table_mgr_$unlock (table_ptr, code);

		call ta_table_mgr_$lock (table_ptr, table_name, Modify, code);
		if code ^= 0 then do;
		     call com_err_ (code, "tape_archive",
			"Arguments from ""^a"" could not be processed.", component_name);
		     goto returner;
		end;

		call ta_table_mgr_$find_component (table_ptr, table_name, ename, "1"b /* should be there */, component_slot, request_slot, code);
		if code ^= 0 then do;
		     call ta_table_mgr_$unlock (table_ptr, code);

		     return;
		end;

		component_ptr = addr (component_table (component_slot));

		call ta_table_mgr_$setup_workspace (table_ptr, component_slot, request_slot, workspace_ptr);

		if request_slot > workspace_ptr -> workspace.n_request_slots then
		     workspace_ptr -> workspace.n_request_slots = request_slot;

		request_ptr = addr (workspace_ptr -> workspace.request_copy);
		unspec (request) = ""b;		/* clear out any old garbage */

		request.extract = "1"b;
		if delete then do;
		     request.delete = "1"b;
		     if ^force then 		/* check safety switch */
			if component.safety_switch then do;
			     call command_query_ (addr (query_info), answer, "tape_archive",
				"Component ^a is protected. Do you wish to delete it??  ", ename);
			     if answer = "no" then request.delete = "0"b;
			end;
		end;
		request.force = force;	
		request.directory_name = dirname;
		request.entry_name = ename;
		request.single_name = single_name_sw;
		request.existing_reference = component_slot;
		request.valid = "1"b;

		workspace_ptr -> workspace.component_copy.associated_request_index = request_slot;
		if request.delete then
		     workspace_ptr -> workspace.dead_records = workspace_ptr -> workspace.dead_records + component.file_length;
		workspace_ptr -> workspace.n_queued_requests = workspace_ptr -> workspace.n_queued_requests + 1;
		if workspace_ptr -> workspace.next_mount_type < Read then
		     workspace_ptr -> workspace.next_mount_type = Read;

		call ta_table_mgr_$complete_table_op (table_ptr);

		call ta_table_mgr_$unlock (table_ptr, code);
	     end extract_one;
	end process_filearg;
     end ta_extract_;
