/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* format: style1,^inddcls,ifthenstmt,ifthendo,ifthen,indcomtxt,dclind5 */
ta_process_volume_set_: proc (perm_table_ptr, arg_array, table_name, code);

/* This subroutine implements the "go" key of tape_archive.  It is responsible
   for orchestrating the order in which files are extracted, appended, and so
   on, and for the bookkeeping of the files on the tape.  Certain duties that
   are left to subroutines include actual tape mount, dismount, and I/O, and
   bookkeeping of tape records used and tape file names.

   Written 05/12/77 by C. D. Tavares.
   Modified 04/11/79 by CDT to fix some problems with error handling.
   Modified 09/24/79 by CDT to add -long and to fix bug resulting in
   run-time additions to the volume set failing.
   Modified 09/03/80 by CDT to implement density selection.
   Modified 10/24/80 by CDT to add tape_ibm_ capability.
   Modified 12/9/81 by CDT for highest_mount_type stuff.
   Last modified 83-03-16 by S. G. Harris (UNCA) for version 4.
*/

dcl  perm_table_ptr	        pointer parameter,
     arg_array	        (*) char (168) parameter,
     table_name	        char (*) parameter,
     code		        fixed bin (35) parameter;

/* AUTOMATIC */

dcl  compacting	        bit (1) aligned,
     cur_time	        bit (36) aligned,
     debug_sw	        bit (1) aligned,
     dlp		        pointer,
     (i, j)	        fixed bin,
     max_chars_in_seg       fixed bin (21),
     reel_no	        fixed bin,
     retain_sw	        bit (1) aligned,
     set_incomplete_bit     bit (1) aligned,
     system_free_ptr        pointer,
     tape_has_changed       bit (1) aligned,
     tape_in_volume_string  char (264),
     tape_out_volume_string char (264),
     this_mount_type        fixed bin,
     varying_reel_id        char (168) varying,
     volume_no	        fixed bin,
     volume_string	        char (64) varying;

/* BUILTINS */

dcl  (addr, clock, dim, index, null, substr) builtin;

/* STATIC */

dcl  my_lock_id	        bit (36) aligned static initial ((36)"1"b);

/* EXTERNAL STATIC */

dcl  (error_table_$bad_mount_request,
     error_table_$badopt,
     error_table_$file_aborted,
     error_table_$lock_wait_time_exceeded,
     error_table_$no_next_volume,
     error_table_$not_done,
     error_table_$unexpired_file,
     error_table_$unexpired_volume,
     error_table_$uninitialized_volume,
     error_table_$vol_in_use) external fixed bin (35) static;

dcl  sys_info$max_seg_size  external fixed bin (35) static;

/* ENTRIES */

dcl  (com_err_, com_err_$suppress_name, command_query_, command_query_$yes_no) ext entry options (variable),
     continue_to_signal_    ext entry (fixed bin (35)),
     delete_$path	        ext entry (char (*), char (*), bit (6), char (*), fixed bin (35)),
     find_condition_info_   ext entry (pointer, pointer, fixed bin (35)),
     get_lock_id_	        entry returns (bit (36) aligned),
     get_system_free_area_  ext entry returns (pointer),
     get_temp_segments_     ext entry (char (*), pointer dimension (*), fixed bin (35)),
     ioa_		        ext entry options (variable),
     ioa_$rsnnl	        ext entry options (variable),
     iox_$find_iocb	        ext entry (char (*), pointer, fixed bin (35)),
     iox_$attach_ptr        ext entry (pointer, char (*) aligned, pointer, fixed bin (35)),
     release_temp_segments_ ext entry (char (*), pointer dimension (*), fixed bin (35)),
     set_lock_$lock	        entry (bit (36) aligned, fixed bin, fixed bin (35)),
     set_lock_$unlock       entry (bit (36) aligned, fixed bin (35));

dcl  ta_file_io_$append     ext entry (pointer, fixed bin, pointer, fixed bin (35)),
     ta_file_io_$append_table ext entry (pointer, pointer, fixed bin (35)),
     ta_file_io_$compact    ext entry (pointer, fixed bin, pointer, fixed bin (35)),
     ta_file_io_$dismount   ext entry (pointer, pointer, bit (1) aligned, fixed bin (35)),
     ta_file_io_$extract    ext entry (pointer, fixed bin, pointer, fixed bin (35)),
     ta_table_mgr_$cancel_request_no ext entry (pointer, fixed bin, fixed bin (35)),
     ta_table_mgr_$copy_and_unlock ext entry (pointer, pointer, fixed bin (35)),
     ta_table_mgr_$finish_requests ext entry (pointer, fixed bin (35)),
     ta_table_mgr_$lock_and_copy ext entry (pointer, pointer, char (*), fixed bin, fixed bin (35)),
     ta_table_mgr_$unlock   ext entry (pointer, fixed bin (35));

/* CONDITIONS */

dcl  (command_question, cleanup) condition;

/* BASED VARIABLES */

dcl  1 delete_list	        aligned based (dlp),
       2 n_entries	        fixed bin initial (0),
       2 entries	        (tape_archive_table.n_queued_requests) aligned,
         3 dirname	        char (168) unaligned,
         3 uid	        bit (36) aligned,
         3 ename	        char (32) unaligned,
         3 force	        bit (1) aligned;

dcl  system_free_area       area based (system_free_ptr);
%page;
%include tape_archive_table_dcl;
%page;

dcl  1 tape_archive_io_info aligned automatic,
%include tape_archive_io_info;
	;
%page;

%include condition_info;
dcl  1 cond_info	        aligned automatic like condition_info;
%page;
%include query_info_;
%page;
	table_ptr = perm_table_ptr;
	debug_sw, tape_archive_io_info.long_sw = ""b;
	temp_seg_ptrs = null;
	max_chars_in_seg = sys_info$max_seg_size * 4;
	dlp = null;
	query_info.version = query_info_version_5;

	if my_lock_id = (36)"1"b then
	     my_lock_id = get_lock_id_ ();

	retain_sw = (tape_archive_table.mount_lock = my_lock_id);

	call iox_$find_iocb ("ta_file_output_", tape_archive_io_info.file_output_switch, code);
	if code ^= 0 then call abort;

	call iox_$find_iocb ("ta_file_input_", tape_archive_io_info.file_input_switch, code);
	if code ^= 0 then call abort;

	call iox_$find_iocb ("ta_tape_output_", tape_archive_io_info.tape_output_switch, code);
	if code ^= 0 then call abort;

	call iox_$find_iocb ("ta_tape_input_", tape_archive_io_info.tape_input_switch, code);
	if code ^= 0 then call abort;

/* Process arguments if any */

	do i = 1 to dim (arg_array, 1);
	     if (arg_array (i) = "-debug" | arg_array (i) = "-db") then
		debug_sw, tape_archive_io_info.long_sw = "1"b; /* do things loudly on command_question and call db if failure */

	     else if (arg_array (i) = "-long") | (arg_array (i) = "-lg") then
		tape_archive_io_info.long_sw = "1"b;

	     else if arg_array (i) = "-retain" then do;
		     if i = dim (arg_array, 1) then retain_sw = "1"b;
		     else do;
			     i = i + 1;
			     if arg_array (i) = "all" then retain_sw = "1"b;
			     else if arg_array (i) = "none" then retain_sw = ""b;
			     else do;
				     call com_err_ (error_table_$badopt, "tape_archive", "Use -retain all or -retain none.");
				     return;
				end;
			end;
		end;

	     else do;
		     call com_err_ (error_table_$badopt, "tape_archive", arg_array (i));
		     return;
		end;
	end;


	this_mount_type = tape_archive_table.next_mount_type;

	if this_mount_type = None then do;
		if (^retain_sw &
		     (tape_archive_table.mount_lock = my_lock_id)) then do; /* wants to dismount tapes */

			if tape_archive_table.highest_mount_type >= Read then
			     call attach_for_detach
				(tape_archive_table.active_set,
				tape_archive_io_info.tape_input_switch);

			if tape_archive_table.highest_mount_type = Compact then
			     call attach_for_detach
				(3 - tape_archive_table.active_set,
				tape_archive_io_info.tape_output_switch);

/* ---------- */

attach_for_detach: proc (set_no, sw_ptr);

dcl  (set_no	        fixed bin,
     sw_ptr	        pointer) parameter;

	call ioa_$rsnnl ("^v(^a ^)",
	     tape_in_volume_string, 0,
	     tape_archive_table.n_volumes_in_set (set_no),
	     tape_archive_table.volume_set (set_no).volume_id (*));

	call ioa_$rsnnl ("^a ^a -number 1 -density ^d",
	     tape_archive_io_info.input_atd_template, 0,
	     tape_archive_table.io_module_name,
	     tape_in_volume_string,
	     tape_archive_table.density (set_no));

	call iox_$attach_ptr
	     (sw_ptr, tape_archive_io_info.input_atd_template, null, code);

	return;
     end attach_for_detach;

/* ---------- */

			call cleanerup;

			tape_archive_table.highest_mount_type = None;
			call set_lock_$unlock
			     (tape_archive_table.mount_lock, 0);
		     end;
		else do;
			code = error_table_$not_done;
			call com_err_ (code, "tape_archive", "No processing is scheduled for ^a.", table_name);
		     end;
		return;
	     end;

	on cleanup call cleanerup;

	call get_temp_segments_ ("tape_archive", based_temp_seg_ptrs (*), code);
	if code ^= 0 then call abort;

	call ta_table_mgr_$lock_and_copy (perm_table_ptr, tape_archive_io_info.temp_table_ptr, table_name, Process_tape, code);
	if code ^= 0 then return;

	table_ptr = tape_archive_io_info.temp_table_ptr;

	call set_lock_$lock (tape_archive_table.mount_lock, 0, code);
	if code = error_table_$lock_wait_time_exceeded then do;
		call com_err_ (error_table_$vol_in_use, "tape_archive",
		     "^a", table_name);
		call cleanerup;
		return;
	     end;
	if code = 0 then tape_archive_table.highest_mount_type = None;

	tape_archive_table.highest_mount_type =
	     max (tape_archive_table.highest_mount_type, this_mount_type);

	compacting = (this_mount_type = Compact);
	if compacting then i = 3 - tape_archive_table.active_set;
	else i = tape_archive_table.active_set;

	if tape_info.n_volumes_in_set (i) = 0 then do;
		query_info.suppress_name_sw = "1"b;
		call command_query_ (addr (query_info),
		     volume_string,
		     "tape_archive", "Enter volume name of new first volume: ");

		tape_info.volume_set (i).volume_id (1) = volume_string;

		tape_info.n_volumes_in_set (i) = 1;
	     end;

	do i = tape_archive_table.active_set, 3 - tape_archive_table.active_set;
	     call ioa_$rsnnl ("^v(^a ^)", tape_out_volume_string, 0,
		tape_archive_table.n_volumes_in_set (i), tape_archive_table.volume_set (i).volume_id (*));
	     if i = tape_archive_table.active_set then tape_in_volume_string = tape_out_volume_string;
	end;

	call ioa_$rsnnl ("^a ^a -name ^^a -number ^^d -retain all^[ -ring^;^] -mode ^^a -density ^d",
	     tape_archive_io_info.input_atd_template, 0,
	     tape_archive_table.io_module_name,
	     tape_in_volume_string,
	     ((this_mount_type = Write) | retain_sw),
	     tape_archive_table.density (tape_archive_table.active_set));

	if this_mount_type < Compact then tape_archive_io_info.output_atd_template = "";
	else call ioa_$rsnnl
		("^a ^a -name ^^a -number ^^d^^[ -clear^^] -create -expires 12/31/99 -format sb -block 8192 -retain all -ring -mode ^^a -density ^d",
		tape_archive_io_info.output_atd_template, 0,
		tape_archive_table.io_module_name,
		tape_out_volume_string,
		tape_archive_table.tape_info.density (3 - tape_archive_table.active_set));
%page;
	on command_question begin;
%skip (3);
%include command_question_info;
%include condition_info_header;

dcl  cq_answer	        char (command_question_info.max_answer_lth) based (command_question_info.answer_ptr),
     cq_callername	        char (command_question_info.name_lth) based (command_question_info.name_ptr);
dcl  yes_sw	        bit (1) aligned;
%skip (3);

		call find_condition_info_ (null, addr (cond_info), code);
		if code ^= 0 then goto resignal;

		cq_info_ptr = cond_info.info_ptr;

		if cq_callername ^= tape_archive_table.io_module_name then goto resignal;

		else if command_question_info.status_code = error_table_$file_aborted then goto resignal;

		else if command_question_info.status_code = error_table_$unexpired_volume then cq_answer = "yes";

		else if command_question_info.status_code = error_table_$uninitialized_volume then
		     if command_question_info.query_code = 3 then goto resignal; /* Valid volume but different label */
		     else cq_answer = "yes";

		else if command_question_info.status_code = error_table_$no_next_volume then do;
		     call command_query_$yes_no (yes_sw, 0, "tape_archive",
		          "Volume set is now full. Another tape volume will be required to complete the current operation.",
		          "End of volume reached. Do you wish to extend the volume set?");
		     if yes_sw then cq_answer = "no";
		     else cq_answer = "yes";
		end;

		else if command_question_info.status_code = error_table_$unexpired_file then
		     if perm_table_ptr -> tape_archive_table.incomplete_write_op_last then cq_answer = "yes";
		     else if compacting then cq_answer = "yes"; /* destroy any old contents of alternate volume set */
		     else do;
			     call com_err_ (command_question_info.status_code, "tape_archive",
				"^/There may be more recent data on the volume set than is reflected in the table.");
			     call com_err_$suppress_name (0, "tape_archive",
				"^5xUnless you are sure this is not the case, answer ""no"" to the following
^5xquestion and perform a ""load_table"" operation on this volume set to regain^/^5xthe most recent table.");
			     goto resignal;
			end;

		else if command_question_info.status_code = 0 then do; /* wants name of next tape to mount */

			if compacting then volume_no = 3 - tape_archive_table.active_set;
			else volume_no = tape_archive_table.active_set;

			reel_no = tape_archive_table.tape_info.n_volumes_in_set (volume_no) + 1;
			if reel_no > dim (tape_archive_table.volume_set (1).volume_id (*), 1) then do;
				code = error_table_$no_next_volume;
				call com_err_ (code, "tape_archive", "Maximum volume set size exceeded.");
				call abort;
			     end;

			call command_query_ (addr (query_info), varying_reel_id,
			     "tape_archive", "Enter name of new volume to be appended to the volume set: ");

			tape_info.n_volumes_in_set (volume_no) = reel_no;
			cq_answer, tape_info.volume_set (volume_no).volume_id (reel_no) = varying_reel_id;
		     end;

		command_question_info.question_sw,
		     command_question_info.answer_sw = debug_sw;
						/* blab only if user wants to know */
		command_question_info.answer_lth = index (cq_answer, " ") - 1;
		command_question_info.preset_sw = "1"b;

		goto endblock;

resignal:		call continue_to_signal_ (0);

endblock:	     end;					/* of begin block, command_question handler */
%page;

/* Perform deletions */

	cur_time = substr (bit (clock ()), 20, 36);


	do i = 1 to tape_archive_table.n_component_slots;

	     component_ptr = addr (component_table (i));

	     if component.valid then
		if component.date_time_deleted then do;
			component.valid = ""b;
			component.date_time_deleted = cur_time;
			tape_archive_table.n_components = tape_archive_table.n_components - 1;
			if tape_archive_io_info.long_sw then
			     call ioa_ ("Deleting component ^a", component.entry_name);
		     end;

	end;

/* All deletions are done, now do the extractions */

	if this_mount_type >= Read then do;
		if compacting then
		     tape_archive_table.last_tape_file_no,
			tape_archive_table.last_table_no,
			tape_archive_table.total_records,
			tape_archive_table.dead_records = 0;

		if retain_sw then do;		/* mark the table so we remember */
			perm_table_ptr -> tape_archive_table.mount_lock
			     = tape_archive_table.mount_lock;
						/* the tapes stay up regardless of invocation-specific errors */
			perm_table_ptr -> tape_archive_table.highest_mount_type
			     = tape_archive_table.highest_mount_type;
		     end;

		do i = 1 to tape_archive_table.n_component_slots;

		     component_ptr = addr (component_table (i));

		     if component.valid then
			if component.associated_request_index > 0 then
			     if request_queue (component.associated_request_index).extract then do;
				     j = component.associated_request_index;
				     call ta_file_io_$extract (table_ptr, i, addr (tape_archive_io_info), code);
				     if code ^= 0 then
					if code = error_table_$bad_mount_request then do;
						call com_err_ (code, "tape_archive", "Extraction ^[and deletion^] of ^a could not be processed.", request_queue (j).delete, component.entry_name);
						call cleanerup;
						return;
					     end;
					else if code = 1 then ;  /* special case: cancel deletion, msg already issued */
					else call com_err_ (code, "tape_archive", "^a could not be extracted ^[and was not deleted^].",
						component.entry_name, request_queue (j).delete);
				     else do;	/* extraction ok, check if deletion requested */
					if request_queue (j).delete then do;
					     component.valid = ""b;
					     component.date_time_deleted = cur_time;
					     tape_archive_table.n_components = tape_archive_table.n_components - 1;
					     if tape_archive_io_info.long_sw then
						call ioa_ ("Deleting component ^a", component.entry_name);
					     request_queue (j).delete = ""b;	/* tell cancel_request_no extract/delete ok */
					end;
				     end;
				     call ta_table_mgr_$cancel_request_no (table_ptr, j, code);
				     call ta_table_mgr_$cancel_request_no (perm_table_ptr, j, code);
						/* file successfully extracted, might as well note it in perm table */
				end;
			     else ;		/* must be a replace pending, don't copy it */
			else if compacting then do;
				call ta_file_io_$compact (table_ptr, i, addr (tape_archive_io_info), code);
				if code ^= 0 then call abort;
			     end;
		end;
	     end;

/* All the extractions are done, now do the replacements and appendings. */

	if this_mount_type >= Write then do;


		set_incomplete_bit = "1"b;

/* The incomplete_write_op_last will be set the first time we successfully
   append something.  This is a hedge in case the user or system crashes
   before table is consistent again.  What this means is that the tape may
   very well have files on the end which are not reflected in the table.  When
   we re-run this table, the tape I/O module will ask whether we want to
   destroy these unexpired files.  If the bit is on, we say yes.  On the other
   hand, if someone's online table gets backed-up (an earlier version
   retrieved), the same situation will occur, and this bit being off will tell
   us that the tape is probably MORE recent than the table, and that the user
   must take remedial action (a load_table or a reconstruct op) to recover
   without losing data.  */

		if ^compacting then do;
			tape_out_volume_string = tape_in_volume_string;
			call ioa_$rsnnl
			     ("^a ^a -name ^^a -number ^^d^^[ -clear^^] -create -expires 12/31/99 -format ^[sb^;vbs^] -block 8192 -retain all -ring -mode ^^a -density ^d",
			     tape_archive_io_info.output_atd_template, 0,
			     tape_archive_table.io_module_name,
			     tape_out_volume_string,
			     (tape_archive_table.io_module_name = "tape_ansi_"),
			     tape_archive_table.tape_info.density (tape_archive_table.active_set));
		     end;

		system_free_ptr = get_system_free_area_ ();
		allocate delete_list set (dlp) in (system_free_area);

		do i = 1 to tape_archive_table.n_request_slots;

		     request_ptr = addr (request_queue (i));

		     if request.valid then do;
			     call ta_file_io_$append (table_ptr, i, addr (tape_archive_io_info), code);
			     if code ^= 0 then
				if code = error_table_$bad_mount_request then do;
					call com_err_ (code, "tape_archive", "Append of ^a>^a could not be processed.", request.directory_name, request.entry_name);
					call cleanerup;
					return;
				     end;
				else if code = error_table_$unexpired_file then do;
					call com_err_ (code, "tape_archive", "Terminating processing of this volume.");
					call cleanerup;
					return;
				     end;
				else do;
					call com_err_ (code, "tape_archive", "^a>^a could not be appended to volume set; removing request.",
					     request.directory_name, request.entry_name);
					call ta_table_mgr_$cancel_request_no (table_ptr, i, code);
						/* remove request; if "rdf" specified, we don't want to delete it! */
				     end;
			     else do;		/* successful append */
				     if request.delete then do;
					     delete_list.n_entries, j = delete_list.n_entries + 1;
					     delete_list.dirname (j) = request.directory_name;
					     delete_list.ename (j) = request.entry_name;
					     delete_list.uid (j) = request.uid;
					     delete_list.force (j) = request.force;
					end;
				     if set_incomplete_bit then do;
					     tape_archive_table.incomplete_write_op_last = "1"b;
					     perm_table_ptr -> tape_archive_table.incomplete_write_op_last = "1"b;
					     set_incomplete_bit = ""b;
					end;
				end;
			end;
		end;
	     end;
%skip (5);
	tape_has_changed = compacting | tape_archive_table.incomplete_write_op_last;	/* next call resets incomplete_write_op_last */
	call ta_table_mgr_$finish_requests (table_ptr, code);
	if tape_archive_table.n_components = 0 then
	     call ioa_ ("tape_archive: All components of ^a have been deleted.", table_name);

	if tape_has_changed then do;		/* here, output the table to tape */
		tape_archive_table.mount_lock = ""b;	/* wouldn't do to have locked table on tape */
		call ta_file_io_$append_table (table_ptr, addr (tape_archive_io_info), code);
		if code ^= 0 then call abort;
	     end;

/* Copy the new table into permanent storage */

	if (tape_archive_table.highest_mount_type >= Read &
	     retain_sw) then
	     tape_archive_table.mount_lock = my_lock_id;	/* don't bother with set_lock_, it's in the [pd] */
	else tape_archive_table.mount_lock = ""b;	/*  note we no longer have volumes retained */

	call ta_table_mgr_$copy_and_unlock (tape_archive_io_info.temp_table_ptr, perm_table_ptr, code);
	if code ^= 0 then call abort;

	if dlp ^= null then
	     do i = 1 to delete_list.n_entries;
	          if delete_list.uid (i) = tape_archive_table.perm_table_uid then /* avoid disaster */
		     call ioa_ ("tape_archive: Deletion of active table ^a has been suppressed.", table_name);     
		else do;
		     if tape_archive_io_info.long_sw then
		          call ioa_ ("Deleting ^a>^a.", delete_list.dirname (i), delete_list.ename (i));
		     call delete_$path (delete_list.dirname (i), delete_list.ename (i), delete_list.force (i) || "11111"b,
		          "tape_archive", code);		/* force if asked, otherwise delete anything that moves,
						   and chase links. */
		     if code ^= 0 then
		          call com_err_ (code, "tape_archive", "Unable to delete ^a>^a.",
			     delete_list.dirname (i), delete_list.ename (i));
		end;
	     end;

	table_ptr = perm_table_ptr;

	call cleanerup;
	return;
%skip (5);
cleanerup: proc;

	call ta_file_io_$dismount (perm_table_ptr, tape_archive_io_info.tape_input_switch, retain_sw, code);
	call ta_file_io_$dismount (perm_table_ptr, tape_archive_io_info.tape_output_switch, retain_sw, code);

	call ta_table_mgr_$unlock (perm_table_ptr, code);

	call release_temp_segments_ ("tape_archive", based_temp_seg_ptrs (*), code);

	if dlp ^= null then free delete_list in (system_free_area);

	return;
     end cleanerup;
%skip (5);
abort: proc options (non_quick);

dcl  debug	        ext entry;

	call com_err_ (code, "tape_archive", "");
	if debug_sw then do;
		call ioa_ ("Calling debug...");
		call debug;
	     end;
	call cleanerup;
	goto returner;
     end abort;

returner: return;
%page;
dismount: entry (perm_table_ptr, a_retain_sw, code);

dcl  a_retain_sw	        bit (1) aligned parameter;

	retain_sw = a_retain_sw;

	call iox_$find_iocb ("ta_tape_output_", tape_archive_io_info.tape_output_switch, code);
	if code ^= 0 then call abort;

	call iox_$find_iocb ("ta_tape_input_", tape_archive_io_info.tape_input_switch, code);
	if code ^= 0 then call abort;

	call ta_file_io_$dismount (perm_table_ptr, tape_archive_io_info.tape_input_switch, retain_sw, code);
	call ta_file_io_$dismount (perm_table_ptr, tape_archive_io_info.tape_output_switch, retain_sw, code);

	if ^retain_sw then do;
		perm_table_ptr -> tape_archive_table.highest_mount_type
		     = None;
		call set_lock_$unlock
		     (perm_table_ptr -> tape_archive_table.mount_lock, 0);
	     end;

	code = 0;
	return;

     end ta_process_volume_set_;
