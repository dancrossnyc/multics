/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* format: style1,^inddcls,ifthenstmt,ifthendo,ifthen,indcomtxt,dclind5 */
ta_load_table_: proc (table_ptr, arg_array, table_name, code);

/* This procedure implements the load_table key of tape_archive. */

/* Written 06/29/77 by C. D. Tavares.
   Modified 09/24/79 to work if the final table on tape has a tape error smack
   in the middle of it.
   Modified 09/03/80 by CDT to fix ref thru null ptr and to warn user if volid
   supplied by user doesn't match volid in loaded table (source of problems
   when volumes shipped to other sites and given other volids).
   Modified 10/24/80 by CDT to add tape_ibm_ capability.
   Modified 12/9/81 by CDT for highest_mount_type stuff.
   Modified 12/17/81 by CDT to make it upgrade the table to the current
   version before checking the table for consistency.
   BIM 3/82 -density control argument.
   Last modified 83-03-16 by S. G. Harris (UNCA) for version 4.
*/

dcl  (arg_array	        (*) char (168),
     table_name	        char (*),
     code		        fixed bin (35)) parameter;

/* AUTOMATIC */

dcl  answer	        char (256) varying,
     attach_description     char (256),
     attach_template        char (256),
     date_time_string       char (24),
     detach_code	        fixed bin (35),
     density	        fixed bin,
     dname	        char (168),
     ename	        char (32),
     filename	        char (17),
     got_older_table        bit (1),
     i		        fixed bin,
     io_module	        char (32),
     max_chars_in_seg       fixed bin (21),
     n_chars_read	        fixed bin (21),
     nelemt	        fixed bin (21),
     n_table_volids	        fixed bin,
     n_volids	        fixed bin,
     n_words_read	        fixed bin (18),
     retain_sw	        bit (1),
     table_volid	        char (168),
     tape_input_switch      pointer,
     temp_seg_ptrs	        (2) pointer,
     last_good_copy_ptr     pointer,
     ptr_active	        fixed bin,
     volid	        (8) char (32);

%include query_info_;

/* ENTRIES */

dcl  (com_err_,
     com_err_$suppress_name,
     command_query_,
     ioa_,
     ioa_$rsnnl)	        entry options (variable),
     date_time_$fstime      entry (bit (36) aligned, char (*)),
     get_lock_id_	        entry returns (bit (36) aligned),
     (release_temp_segments_,
     get_temp_segments_)    entry (char (*), pointer dimension (*),
		        fixed bin (35)),
     hcs_$fs_get_path_name  entry (ptr, char (*), fixed bin, char (*),
		        fixed bin (35)),
     hcs_$set_bc_seg        entry (pointer, fixed bin (24), fixed bin (35)),
     hcs_$set_safety_sw_seg entry (pointer, bit (1) aligned, fixed bin (35)),
     hcs_$terminate_noname  entry (ptr, fixed bin (35)),
     hcs_$truncate_seg      entry (pointer, fixed bin (18), fixed bin (35)),
     resource_info_$canonicalize_name
		        entry (char (*), char (*), char (*),
		        fixed bin (35));

dcl  ta_file_io_$make_filename
		        entry (ptr, char (13), fixed bin)
		        returns (char (17) aligned),
     ta_table_mgr_$find_and_verify
		        entry (char (*), char (*), ptr, bit (1) aligned,
		        fixed bin (35));

%include iox_dcls;

/* EXTERNAL STATIC */

dcl  (error_table_$bad_arg,
     error_table_$badopt,
     error_table_$noarg,
     error_table_$no_file,
     error_table_$short_record,
     error_table_$too_many_args)
		        ext fixed bin (35) static,
     sys_info$max_seg_size  ext fixed bin (35) static;

/* CONSTANTS */

%include iox_modes;

/* CONDITION */

dcl  cleanup	        condition;

/* BUILTINS */

dcl  (dim, null, unspec)    builtin;

/* BASED VARIABLES */

%include tape_archive_table_dcl;

/* BASED */

dcl  based_table	        (n_words_read) bit (36) aligned based;


	got_older_table = "0"b;

	call iox_$find_iocb ("ta_tape_input_", tape_input_switch, code);
	if code ^= 0 then goto end_processing;

	max_chars_in_seg = sys_info$max_seg_size * 4;
	query_info.version = query_info_version_5;

	if tape_archive_table.n_component_slots
	     + tape_archive_table.n_request_slots > 0 then do;
		query_info.yes_or_no_sw = "1"b;
		call command_query_
		     (addr (query_info), answer, "tape_archive",
		     "^a already exists.  Do you wish to overwrite it?? ",
		     table_name);
		if answer = "no" then return;
	     end;

	io_module = tape_archive_table.io_module_name;
	if io_module = "" then io_module = "tape_ansi_";
	n_volids = tape_archive_table.n_volumes_in_set (tape_archive_table.active_set);
	volid (*) = "";
	if n_volids ^= 0
	then volid (*) = tape_archive_table.volume_set (tape_archive_table.active_set).volume_id (*);

	density = tape_archive_table.density (tape_archive_table.active_set);
	if density = 0 then density = Default_density;

	retain_sw = ""b;


	do i = 1 to dim (arg_array, 1);
	     if arg_array (i) = "-io_module"
		| arg_array (i) = "-iom" then do;
		     i = i + 1;
		     if i > dim (arg_array, 1) then do;
			     call com_err_
				(error_table_$noarg, "tape_archive",
				"I/O module name must follow ^a",
				arg_array (i - 1));
			     return;
			end;

(nostrz):		     io_module = arg_array (i);

		     if io_module ^= "tape_ansi_" &
			io_module ^= "tape_ibm_" then do;
			     call com_err_
				(error_table_$bad_arg, "tape_archive",
				"I/O module ^a not supported.",
				io_module);
			     return;
			end;
		end;

	     else if arg_array (i) = "-retain" then do;
		     i = i + 1;
		     if i > dim (arg_array, 1) then retain_sw = "1"b;
		     else if arg_array (i) = "all" then retain_sw = "1"b;
		     else if arg_array (i) = "none" then retain_sw = ""b;
		     else do;
			     call com_err_
				(error_table_$badopt, "tape_archive",
				"^a; Use -retain all or -retain none.",
				arg_array (i));
			     return;
			end;
		end;

	     else if arg_array (i) = "-density"
		     | arg_array (i) = "-den"
	     then do;
		     i = i + 1;
		     if i > hbound (arg_array, 1)
		     then do;
			     call com_err_ (error_table_$noarg, "tape_archive", "-density requires a density number.");
			     return;
			end;
		     density = binary (arg_array (i));
		end;

	     else if char (arg_array (i), 1) = "-" then do;
		     call com_err_
			(error_table_$badopt, "tape_archive",
			arg_array (i));
		     return;
		end;


	     else do;
		     n_volids = n_volids + 1;
		     if n_volids > hbound (volid, 1) then do;
			     call com_err_
				(error_table_$too_many_args,
				"tape_archive",
				"Only ^d volume ids allowed.",
				n_volids - 1);
			     return;
			end;

(nostrz):		     volid (n_volids) = arg_array (i);
		end;
	end;

	if n_volids = 0 then do;
		query_info.yes_or_no_sw = ""b;
		call command_query_
		     (addr (query_info), answer, "tape_archive",
		     "Enter volume name of first volume: ");

		volid (1) = answer;
		n_volids = 1;
	     end;

	do i = 1 to n_volids;
	     call resource_info_$canonicalize_name
		("tape_vol", (volid (i)), volid (i), code);
	     if code ^= 0 then goto end_processing;
	end;

	tape_archive_table.io_module_name = io_module;

	temp_seg_ptrs = null;

	on cleanup call cleanerup;

	call get_temp_segments_ ("tape_archive", temp_seg_ptrs (*), code);
	if code ^= 0 then goto end_processing;

	ptr_active = 1;
	last_good_copy_ptr = null;


	call ioa_$rsnnl
	     ("^a^v( ^a^) -name ^^a -retain all^^[ -clear^^;^^]^[ -ring^;^] -mode binary -density ^d",
	     attach_template, 0, io_module, dim (volid, 1), volid (*),
	     retain_sw, density);

	do i = 1 by 1 while (code = 0);

	     filename = ta_file_io_$make_filename
		(table_ptr, "ONLINE-TABLE-", i);

	     call ioa_$rsnnl (attach_template, attach_description, 0,
		filename, (i = 1));

	     call iox_$close (tape_input_switch, 0);
	     call iox_$detach_iocb (tape_input_switch, detach_code);

	     call iox_$attach_ptr
		(tape_input_switch, attach_description, null, code);
	     if code = 0 then do;

		     call iox_$open
			(tape_input_switch, Sequential_input, ""b, code);
		     if code = 0 then do;

			     call hcs_$truncate_seg
				(temp_seg_ptrs (ptr_active), 0, 0);

			     call iox_$read_record (tape_input_switch,
				temp_seg_ptrs (ptr_active),
				max_chars_in_seg, nelemt, code);
			     if code = error_table_$short_record then
				code = 0;
			     if code ^= 0 then goto end_processing;
			     n_chars_read = nelemt;
			     last_good_copy_ptr =
				temp_seg_ptrs (ptr_active);
			     if ptr_active = 1 then ptr_active = 2;
			     else ptr_active = 1;
			end;
		end;
	end;

end_processing:
	if last_good_copy_ptr = null then do;
		call com_err_
		     (code, "tape_archive",
		     "No readable copy of ^a was found.", table_name);
		call cleanerup;
		return;
	     end;

	if code ^= error_table_$no_file then do;
		call com_err_ (code, "tape_archive");
		got_older_table = "1"b;
	     end;

	n_words_read = divide (n_chars_read + 3, 4, 18, 0);

	unspec (table_ptr -> based_table) =
	     unspec (last_good_copy_ptr -> based_table);

	call hcs_$truncate_seg (table_ptr, n_words_read, 0);

	call hcs_$set_bc_seg (table_ptr, n_chars_read * 9, code);

	call hcs_$set_safety_sw_seg (table_ptr, "1"b, code);


/* The following set of calls checks the table for consistency, upgrading the
   version if necessary */

	call hcs_$fs_get_path_name (table_ptr, dname, 0, ename, code);

	call ta_table_mgr_$find_and_verify
	     (dname, ename, table_ptr, "0"b, code);
	if code ^= 0 then do;
		call com_err_ (code, "tape_archive",
		     "^a>^a", dname, ename);
		call cleanerup;
		return;
	     end;

/* Kill the extra null refname put onto the segment by find_and_verify */

	call hcs_$terminate_noname (table_ptr, 0);


	if got_older_table then do;
		call date_time_$fstime (last_good_copy_ptr ->
		     tape_archive_table.date_time_tape_modified,
		     date_time_string);
		call com_err_$suppress_name (0, "tape_archive",
		     "The most recent readable copy of ^a (^a) has ^a.",
		     table_name, date_time_string, "been loaded");
	     end;

/* Now that we're sure we know where everything is, check the volume names in
   the table for consistency with the names used to load this table. */

	n_table_volids =
	     tape_archive_table.n_volumes_in_set
	     (tape_archive_table.active_set);

	if n_volids ^= n_table_volids then
	     call ioa_
		("^a-- ^a contains ^[only ^;^]^d volumes in volume set.",
		"tape_archive: Warning", table_name,
		(n_table_volids < n_volids), n_table_volids);

	do i = 1 to min (n_volids, n_table_volids);
	     call resource_info_$canonicalize_name ("tape_vol",
		(tape_archive_table.volume_set
		(tape_archive_table.active_set).volume_id (i)),
		table_volid, code);
	     if code ^= 0 then do;
		     table_volid =
			tape_archive_table.volume_set
			(tape_archive_table.active_set).volume_id (i);
		     call com_err_ (code, "tape_archive",
			"Canonicalizing volume name ""^a"" from table.",
			table_volid);
		end;

	     if volid (i) ^= table_volid then do;
		     call ioa_
			("^a: ^a-- At least one volume name supplied (^a)
     does not match volume name in table (^a).",
			"tape_archive", "Warning",
			volid (i), table_volid);
		     call ioa_
			("^15xAn ""^a"" operation may be indicated.",
			"alter volume");
		     i = 100;
		end;
	end;

	tape_archive_table.density (tape_archive_table.active_set) = density;		/* why force the user to alter? */
	tape_archive_table.io_module_name = io_module;

	call cleanerup;
	return;

cleanerup: proc;

	if temp_seg_ptrs (1) ^= null then
	     call release_temp_segments_
		("tape_archive", temp_seg_ptrs (*), code);

	if retain_sw = ""b then
	     call iox_$control (tape_input_switch, "retain_none",
		null, code);
	else do;
		tape_archive_table.mount_lock = get_lock_id_ ();
		tape_archive_table.highest_mount_type = Read;
	     end;

	call iox_$close (tape_input_switch, code);
	call iox_$detach_iocb (tape_input_switch, code);

	return;
     end cleanerup;

     end ta_load_table_;
