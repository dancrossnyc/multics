/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

ta_replace_: proc (table_ptr, arg_array, delete, force, table_name, code);

/* This subroutine handles the replace, append, and update keys of
   tape_archive.

   Written 05/10/77 by C. D. Tavares.
   Modified 09/24/79 by CDT to add star convention.
   Last modified 09/21/80 by CDT to implement table workspace strategy
   (indivisible updates).
*/

/* PARAMETERS */

dcl  arg_array (*) char (168) parameter,
     delete bit (1) aligned parameter,
     force bit (1) aligned parameter,
     table_name char (*) parameter,
     code fixed bin (35) parameter;

/* AUTOMATIC */

dcl  answer char (4) varying,
     arg char (168),
     binary_file bit (1),
     branch_type fixed bin,
     component_slot fixed bin,
     current_mode char (8),
     dirname char (168),
     dtbm bit (36),
     ename char (32),
     file_length fixed bin (35),
     i fixed bin,
     operation fixed bin,
     request_slot fixed bin,
     safety_sw bit (1),
     single_name_sw bit (1) aligned,
     specific_component bit (1) aligned,
     wdir char (168);

/* CONDITIONS */

dcl  cleanup condition;


/* CONSTANTS */

dcl (Append initial (1),
     Replace initial (2),
     Update initial (3)) fixed bin static options (constant);

/* INTERNAL STATIC */

dcl  system_free_ptr pointer static initial (null);

/* EXTERNAL STATIC */

dcl (error_table_$bad_mode,
     error_table_$badopt,
     error_table_$namedup,
     error_table_$noarg) ext fixed bin (35) static;

dcl  sys_info$max_seg_size ext fixed bin (35) static;

/* ENTRIES */

dcl  check_star_name_$entry ext entry (char (*), fixed bin (35)),
     com_err_ ext entry options (variable),
     command_query_ ext entry options (variable),
     expand_pathname_ ext entry (char (*), char (*), char (*), fixed bin (35)),
     get_system_free_area_ ext entry returns (pointer),
     get_wdir_ ext entry returns (char (168)),
     hcs_$status_ ext entry (char (*), char (*), fixed bin, pointer, pointer, fixed bin (35)),
     hcs_$status_minf ext entry (char (*), char (*), fixed bin, fixed bin, fixed bin (24), fixed bin (35)),
     ioa_ ext entry options (variable);

dcl  ta_filesys_util_$get_file_info ext entry (char (*), char (*), fixed bin, fixed bin (35), bit (1), bit (1), bit (36), fixed bin (35)),
     ta_filesys_util_$star_list ext entry (char (*), char (*), pointer, fixed bin (35));

dcl  ta_table_mgr_$find_component ext entry (pointer, char (*), char (*), bit (1) aligned, fixed bin, fixed bin, fixed bin (35)),
     ta_table_mgr_$lock ext entry (pointer, char (*), fixed bin, fixed bin (35)),
     ta_table_mgr_$unlock ext entry (pointer, fixed bin (35)),
     ta_table_mgr_$setup_workspace entry (ptr, fixed bin, fixed bin, ptr),
     ta_table_mgr_$complete_table_op entry (ptr);

/* BASED */

dcl  system_free_area area (sys_info$max_seg_size) based (system_free_ptr);

/* BUILTINS */

dcl (addr, binary, dim, null, substr, unspec) builtin;

/* INCLUDE FILES */
%include status_info_branch;
%page;
%include query_info_;
%page;
%include tape_archive_table_dcl;
%page;
%include tape_archive_star;
%page;

/* ta_replace_: proc... */

	operation = Replace;
	goto common;

update:	entry (table_ptr, arg_array, delete, force, table_name, code);

	operation = Update;
	goto common;

append:	entry (table_ptr, arg_array, delete, force, table_name, code);

	operation = Append;

common:
	if system_free_ptr = null then
	     system_free_ptr = get_system_free_area_ ();

	current_mode = "";				/* the "we choose" recording mode */
	single_name_sw = ""b;
	specific_component = ""b;
	query_info.version = query_info_version_5;

/* Following block handles control args */

	do i = 1 to dim (arg_array, 1);

	     arg = arg_array (i);

	     if substr (arg, 1, 1) = "-" then do;
		if arg = "-mode" then do;
		     i = i + 1;
		     if i > dim (arg_array, 1) then do;
			code = error_table_$noarg;
			call com_err_ (code, "tape_archive", "-mode must be followed by a recording mode.");
			return;
		     end;

		     current_mode = arg_array (i);
		     if current_mode ^= "ascii" then
			if current_mode ^= "binary" then
			     if current_mode ^= "ebcdic" then do;
				code = error_table_$bad_mode;
				call com_err_ (code, "tape_archive",
				     "Arguments following ""-mode ^a"" were not processed.", current_mode);
				return;
			     end;

		     arg_array (i) = "-";		/* so pathname loop skips it */
		end;

		else if (arg = "-single_name" | arg = "-snm") then single_name_sw = "1"b;

		else do;
		     code = error_table_$badopt;
		     call com_err_ (code, "tape_archive", "Arguments from ""^a"" were not processed.",
			arg);
		     return;
		end;
	     end;

	     else specific_component = "1"b;
	end;

/* Following block handles args which should be storage system pathnames */

	if specific_component then
	     do i = 1 to dim (arg_array, 1);

	     arg = arg_array (i);

	     if substr (arg, 1, 1) ^= "-" then call process_filearg (arg);
	end;

	else if operation = Append then
	     call com_err_ (error_table_$noarg, "tape_archive", "At least one file must be specified to append.");
	else do;

	     wdir = get_wdir_ ();

	     do i = 1 to tape_archive_table.n_component_slots; /* non-specific replace or update */
		component_ptr = addr (component_table (i));
		if component.valid then do;
		     call hcs_$status_minf (wdir, component.entry_name, 1 /* chase */, 0, 0, code);
		     if code = 0 then call process_filearg (component.entry_name);
		end;
	     end;
	end;

	code = 0;
return_hard:
	return;
%skip(5);
process_filearg: proc (component_name);

dcl  component_name char (*) parameter;

	     call expand_pathname_ (component_name, dirname, ename, code);
	     if code ^= 0 then do;
not_processed:	call com_err_ (code, "tape_archive", """^a"" not processed.", component_name);
		return;
	     end;

	     call check_star_name_$entry (ename, code);
	     if code = 0 then do;
		call replace_one (dirname, ename);
		return;
	     end;

	     else if (code = 1) | (code = 2) then begin;	/* arbitrary starname or "**" */
						/* the begin keeps the current procedure fast by limiting
						   the scope of the following cleanup handler. */

dcl  i fixed bin;

		ta_filesys_star_ptr = null;

		on cleanup begin;
		     if ta_filesys_star_ptr ^= null then
			free ta_filesys_star_info in (system_free_area);
		end;

		call ta_filesys_util_$star_list (dirname, ename, ta_filesys_star_ptr, code);
		if code ^= 0 then goto not_processed;

		do i = 1 to ta_filesys_star_info.n_entries;
		     call replace_one (dirname, ta_filesys_star_info (i).ename);
		end;

		free ta_filesys_star_info in (system_free_area);
	     end;

	     else goto not_processed;
	     return;
%skip(5);
replace_one:   proc (dirname, ename);

dcl (dirname, ename) char (*) parameter;

		on cleanup call ta_table_mgr_$unlock (table_ptr, code);

		call ta_table_mgr_$lock (table_ptr, table_name, Modify, code);
		if code ^= 0 then do;
		     call com_err_ (code, "tape_archive",
			"Arguments from ""^a"" could not be processed.", component_name);
		     goto return_hard;
		end;

		call ta_table_mgr_$find_component (table_ptr, table_name, ename,
		     "0"b /* doesn't have to be there */, component_slot, request_slot, code);
		if code ^= 0 then goto unlock_and_return;

		request_ptr = addr (tape_archive_table.request_queue (request_slot));
		unspec (request) = ""b;		/* clear out any old garbage */

		if current_mode ^= "" then		/* user specified recording mode */
		     request.recording_mode = current_mode;

		else if component_slot > 0 then do;	/* get default mode from old copy */
		     component_ptr = addr (tape_archive_table.component_table (component_slot));
		     request.recording_mode = component.recording_mode;
		end;

		else request.recording_mode = "binary"; /* last resort default */

		component_ptr = null;		/* catch wild refs */

		if request.recording_mode = "binary" then binary_file = "1"b;
		else binary_file = ""b;

		call ta_filesys_util_$get_file_info (dirname, ename, branch_type, file_length,
		     safety_sw, binary_file, dtbm, code);
		if code ^= 0 then do;
		     call com_err_ (code, "tape_archive", "^a>^a", dirname, ename);
		     goto unlock_and_return;
		end;

		if binary_file then
		     if request.recording_mode ^= "binary" then do;
			call com_err_ (0, "tape_archive",
			     "^a cannot be recorded in ^a mode;  using binary mode.", ename, request.recording_mode);
			request.recording_mode = "binary";
		     end;

		if operation = Append then do;
		     if component_slot > 0 then do;	/* already there, complain */
			call com_err_ (error_table_$namedup, "tape_archive", "^a already exists in ^a.", ename, table_name);
			goto unlock_and_return;
		     end;
		     else request.append = "1"b;
		end;

		else if operation = Replace then do;
		     if component_slot = 0 then do;
			call com_err_ (0, "tape_archive", "Appending ^a to ^a", ename, table_name);
			request.append = "1"b;
		     end;
		     else do;
			request.replace = "1"b;
			request.existing_reference = component_slot;
		     end;
		end;

		else if operation = Update then do;
		     if component_slot = 0 then goto unlock_and_return; /* update never appends, only replaces */

		     call hcs_$status_ (dirname, ename, 1, addr (status_info_branch), null, code);
		     if code ^= 0 then do;
			call com_err_ (code, "tape_archive", "^a>^a", dirname, ename);
			goto unlock_and_return;
		     end;

		     if binary (status_info_branch.dtm) <= binary (component_table (component_slot).date_time_archived)
		     then goto unlock_and_return;
		     request.replace = "1"b;
		     request.existing_reference = component_slot;
		     call ioa_ ("tape_archive: Updating ^a in ^a", ename, table_name);
		end;

		request.directory_name = dirname;
		request.entry_name = ename;
		request.delete = delete;
		request.force = force;
		request.single_name = single_name_sw;
		request.file_length = file_length;
		request.date_time_branch_modified = dtbm;
		request.n_tape_records = 0;

		if (delete & safety_sw & ^force) then do;
		     query_info.yes_or_no_sw = "1"b;
		     call command_query_ (addr (query_info), answer, "tape_archive",
			"^a>^a is protected.  Do you wish to delete it?? ", dirname, ename);
		     if answer = "no" then request.delete, request.force = ""b;
		     else request.delete, request.force = "1"b;
		end;

		call ta_table_mgr_$setup_workspace (table_ptr, component_slot, request_slot, workspace_ptr);

		request_ptr = addr (workspace_ptr -> workspace.request_copy);
		component_ptr = addr (workspace_ptr -> workspace.component_copy);

		workspace_ptr -> workspace.n_queued_requests = workspace_ptr -> workspace.n_queued_requests + 1;
		if request.replace then
		     workspace_ptr -> workspace.dead_records = workspace_ptr -> workspace.dead_records
		     + component.file_length;
		workspace_ptr -> workspace.total_records = workspace_ptr -> workspace.total_records + file_length;

		if request_slot > tape_archive_table.n_request_slots then
		     workspace_ptr -> workspace.n_request_slots = request_slot;

		if workspace_ptr -> workspace.next_mount_type < Write then
		     workspace_ptr -> workspace.next_mount_type = Write;

		if component_slot > 0 then		/* we are replacing an existing component */
		     component.associated_request_index = request_slot;

		request.valid = "1"b;

		call ta_table_mgr_$complete_table_op (table_ptr);

unlock_and_return:
		call ta_table_mgr_$unlock (table_ptr, code);
		return;
	     end replace_one;
	end process_filearg;
     end ta_replace_;
