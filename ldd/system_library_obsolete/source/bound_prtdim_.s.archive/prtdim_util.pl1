/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* PRTDIM_UTIL - Utility Functions for the Multics rinter DIM.
   coded 6/12/75 by Noel I. Morris			*/


/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


prtdim_util$init: proc (sdb_ptr, rcode);

dcl  rcode fixed bin (35);				/* error code */

dcl  temp_iom_stat bit (72) aligned,			/* temp area to hold iom status */
     load_proc entry (ptr, ptr, entry, fixed bin (35)) variable, /* procedure to load train or VFC image */
     save_buffer (100) fixed bin (35),			/* holding buffer for workspace */
     wseg (100) fixed bin (35) based (wsegp),		/* for saving and restoring workspace */
     ecode fixed bin (35);				/* internal error code */

dcl  ipc_$block entry (ptr, ptr, fixed bin (35)),
     ioi_$connect entry (fixed bin, fixed bin (18), fixed bin (35)),
     init_printer_ entry (ptr, ptr, entry, fixed bin (35)),
     init_printer_$load_image entry (ptr, ptr, entry, fixed bin (35)),
     init_printer_$load_vfc entry (ptr, ptr, entry, fixed bin (35)),
     analyze_device_stat_ entry (char (*) aligned, ptr, bit (72) aligned, bit (18) aligned),
     analyze_system_fault_ entry (char (*) aligned, bit (72) aligned);

dcl  error_table_$net_timeout fixed bin (35) ext,
     error_table_$no_operation fixed bin (35) ext,
     prt_status_table_$prt_status_table_ ext;

dcl 1 ipc_message aligned,				/* structure for receiving ipc_ message */
    2 chname fixed bin (71),
    2 message fixed bin (71),
    2 sender bit (36),
    2 origin,
      3 devsignal bit (18),
      3 ring bit (18),
    2 channel_index fixed bin;

dcl (addr, addrel, bit, rel, string) builtin;


/*  */


% include prt_sdb;

% include prt_info;


/*  */

% include prt_conv_info;


/*  */

% include iom_pcw;

% include iom_dcw;

/*  */

% include ioi_stat;


/*  */

	pip = addr (sdb.info);			/* Get pointer to printer info. */
	pcip = addr (sdb.conv_info);			/* Get pointer to conversion info. */

	call init_printer_ (pip, pcip, sync_io, rcode);	/* Initialize the printer information. */

	sdb.stop_every,
	     sdb.stop_counter = 0;			/* Initialize page stop counters. */
	sdb.mode = "0"b;				/* Clear all mode bits. */

	return;


/*  */

load_image: entry (sdb_ptr, rcode);


	load_proc = init_printer_$load_image;		/* Set procedure pointer. */
	go to load_join;				/* Join common code. */




load_vfc:	entry (sdb_ptr, rcode);


	load_proc = init_printer_$load_vfc;		/* Set procedure pointer. */

load_join:
	pip = addr (sdb.info);			/* Get pointer to printer info. */
	pcip = addr (sdb.conv_info);			/* Get pointer to conversion info. */

	save_buffer = wseg;				/* Save the contents of the workspace. */

	call load_proc (pip, pcip, sync_io, rcode);	/* Call out to load the train or VFC image. */

	wseg = save_buffer;				/* Restore the workspace. */

	if rcode = 5 then				/* If invalid operation for thi model ... */
	     rcode = error_table_$no_operation;		/* Reflect appropriate error code. */

	return;


/*  */

sync_io:	proc (i, rw, d, l, e);			/* internal proc to do synchronous I/O */

dcl  i bit (36) aligned,				/* IDCW */
     rw bit (2) aligned,				/* RW bits */
     d ptr,					/* pointer to data */
     l fixed bin (12),				/* length of data */
     e bit (1) aligned;				/* error flag */

dcl  sdata (l) fixed bin based,			/* for copying data */
     dp ptr,					/* pointer to place for data */
     b bit (18) aligned;				/* status flags */


	     idcwp = wsegp;				/* Get pointer to place for IDCW. */
	     string (idcw) = i;			/* Copy the IDCW. */

	     dcwp = addrel (idcwp, 1);		/* Get pointer to data xfer DCW. */
	     dp = addrel (dcwp, 1);			/* Get pointer to place for data. */

	     string (dcw) = "0"b;			/* Clear the DCW. */
	     dcw.address = rel (dp);			/* Insert address. */
	     dcw.tally = bit (l);			/* And tally. */

	     if rw & "01"b then			/* If writing ... */
		dp -> sdata = d -> sdata;		/* Copy the data in workspace segment. */

redo_sync:
	     call ioi_$connect (prt_info.devx, 0, ecode); /* Fire up the IOM. */
	     if ecode ^= 0 then do;			/* This should not happen. */
		e = "1"b;
		return;
	     end;


/*  */

sync_wait:
	     call ipc_$block (addr (sdb.ev_list), addr (ipc_message), ecode);
	     if ecode ^= 0 then do;			/* Wait for I/O to complete. */
		e = "1"b;
		return;
	     end;

	     imp = addr (ipc_message.message);		/* get pointer to ioi event message */
	     if imess.level = "111"b then go to redo_sync; /* if this is a special interupt */

	     if imess.st then do;			/* if status is present */
		if imess.time_out then do;		/* if timeout occured */
		     e = "1"b;			/* error occured */
		     ecode = error_table_$net_timeout;	/* caused by time out */
		     return;
		end;

		temp_iom_stat = imess.status;		/* copy status to double word */
		if imess.level = "011"b then do;	/* If termination ... */
		     if imess.er then		/* If error ... */
			call analyze_device_stat_ (prt_info.devname, addr (prt_status_table_$prt_status_table_),
			temp_iom_stat, b);
		end;				/* Analyze the status. */

		else if imess.level = "001"b then	/* If system fault ... */
		     call analyze_system_fault_ (prt_info.devname, temp_iom_stat);

		if imess.er then go to sync_wait;	/* If error, wait for special. */
	     end;
	     else go to sync_wait;			/* If no status, try for more. */

	     if rw & "10"b then			/* If reading ... */
		d -> sdata = dp -> sdata;		/* Copy the data. */

	     e = "0"b;				/* Clear the error switch. */

	     return;				/* Return to caller. */


	end sync_io;




     end prtdim_util$init;
