/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4,delnl,insnl,indattr,ifthen,declareind10,dclind10 */
tape_mult_close_:
     procedure;

/*	This program is part of the Multics standard tape I/O module, tape_mult_.
   *
   *	Created on 10/28/74 by Bill Silver.
   *      Modified 07/02/81 by J. A. Bush for bootable tape labels
   *	Modified 01/16/82 by J. A. Bush to process the "error_tally" att desc arg
   *      Modified 8/82 by S. Krupp for change from tdcm_ to tape_ioi_ interface.
   *
   *	This program implements the iox_$close entry point.
   *	We must prepare the tape and all of our info for the tape to be opened
   *	again.  When closing the tape we must do the following:
   *	     1.  Rewind the tape reel.  When opening a tape it must be at BOT.
   *	     2.  Close the I/O control block.
   *	When closing a tape that has been opened for writing we must first perform the
   *	following additional steps:
   *	     1.  Write out all currently buffered output data.
   *	     2.  Write an EOF record.
   *	     3.  Write an End of Reel record.  This contains all PAD characters.
   *	     4.  Write two EOF records.
   *	When writing this end of tape information we must ignore all device_end errors.
*/


/*		ARGUMENTS			*/

dcl	arg_error_code	   fixed bin (35),		/* (O) Standard system error code. */
	arg_iocb_ptr	   ptr;			/* (I) Pointer to I/O control block. */


/*		AUTOMATIC  DATA		*/

dcl	eot_flag		   bit (1),		/* ON => tape at End of Tape. */
	error_code	   fixed bin (35),		/* Standard system error code. */
	i		   fixed bin,
	iocb_ptr		   ptr,			/* Pointer to I/O control block. */
	put_hdr		   bit (1) aligned,
	rx		   fixed bin,
	save_code		   fixed bin (35),		/* Used to play with error code. */
	tioi_id		   bit (36) aligned;	/* Id of tape_ioi_ activation. */

dcl	1 auto_error_tally	   aligned like tec;	/* Keeps track of number of errors. */

/*		INTERNAL STATIC DATA	*/

dcl	pad_char		   bit (9) aligned internal static init ("111111111"b);
						/*		EXTERNAL ENTRIES		*/

dcl	(addr, hbound, null, string)
			   builtin;

dcl	error_table_$device_end
			   fixed bin (35) external;
dcl	error_table_$device_parity
			   fixed bin (35) external;

dcl	iox_$err_not_open	   entry options (variable),
	iox_$propagate	   entry (ptr),
	ioa_		   entry options (variable),
	tape_mult_detach_$detach
			   entry (ptr, fixed bin (35)),
	tape_mult_open_$open   entry (ptr, fixed bin, bit (1), fixed bin (35)),
	tape_mult_util_$wait_for_write
			   entry (bit (36) aligned, fixed bin, fixed bin (35)),
	tape_mult_write_$flush entry (ptr, fixed bin (35)),
	tape_mult_write_$eof   entry (ptr, fixed bin (35)),
	tape_mult_write_$record
			   entry (ptr, ptr, fixed bin, fixed bin (35));
%page;
%include iocb;
%page;
%include tmdb;
%page;
%include mstr;
%page;
%include tape_ioi_dcls;
%page;
%include tape_ioi_error_counts;
%page;
close:
     entry (arg_iocb_ptr, arg_error_code);

	iocb_ptr = arg_iocb_ptr;			/* Copy argument. */

	iocb_ptr = iocb_ptr -> iocb.actual_iocb_ptr;	/* Initialize pointers. */
	tmdb_ptr = iocb_ptr -> iocb.attach_data_ptr;
	tioi_id = tmdb.tioi_id;
	error_code = 0;

	if tmdb.open.description = "stream_input" then do;
	     call STOP_TAPE (error_code);
	     if error_code ^= 0 then
		go to REWIND;
	     if tmdb.opt.flags.err_tal		/* user wants error recovery tally */
	     then do;
		auto_error_tally.version = TEC_VERSION_1;
		call tape_ioi_$get_statistics (tioi_id, addr (auto_error_tally), error_code);
		if error_code ^= 0 then
		     call ioa_ ("Unable to get error statistics for tape volume ^a", tmdb.opt.reel_name);
		else do;
		     call ioa_ ("^/Error statistics for tape volume ^a:^/", tmdb.opt.reel_name);
		     call ioa_ ("Total tape errors:^-^d", auto_error_tally.reads.errors);
		     put_hdr = "0"b;
		     do i = 1 to hbound (auto_error_tally.successful_retry_strategy, 1);
			if auto_error_tally.successful_retry_strategy (i) ^= 0 then do;
			     if ^put_hdr then do;
				put_hdr = "1"b;
				call ioa_ ("Successful error recovery by backspace/re-read record:^/");
			     end;
			     call ioa_ ("With ^2d retries:^-^d", i, auto_error_tally.successful_retry_strategy (i));
			end;
		     end;
		     if tmdb.meters.fwd_rd_recovery ^= 0 then do;
			call ioa_ ("Successful error recovery by reading re-written record:");
			call ioa_ ("^2-^d", tmdb.meters.fwd_rd_recovery);
		     end;
		     if tmdb.meters.reposition_recovery ^= 0 then do;
			call ioa_ ("Successful error recovery by repositioning and re-reading:");
			call ioa_ ("^2-^d", tmdb.meters.reposition_recovery);
		     end;
		end;
	     end;
	     goto REWIND;				/* If reading nothing to do to close. */
	end;

	call tape_mult_write_$flush (tmdb_ptr, error_code);
						/* Ignore error, just try to close. */

	call FIX_HEADER_AND_TRAILER (error_code);
	if error_code ^= 0 then
	     go to REWIND;

	if tmdb.head.rec_within_file ^= -1		/* If we haven't just written an EOF. */
	then do;
	     call tape_mult_write_$eof (tmdb_ptr, error_code);
	     if ^(error_code = 0 | error_code = error_table_$device_end) then
		goto REWIND;
	end;

	if tmdb.head.flags.eot			/* Are we at the End of Tape? */
	then eot_flag = "1"b;
	else eot_flag = "0"b;

	string (tmdb.head.flags) = "0"b;		/* Turn OFF all flags. */

	tmdb.head.flags.set, tmdb.head.flags.eot = eot_flag;
						/* Set EOT flag if appropriate. */
	tmdb.head.flags.admin, tmdb.head.flags.eor = "1"b;/* Turn ON  End of Reel  flag. */
	call tape_mult_write_$record (tmdb_ptr, addr (pad_char), 1, error_code);
	if ^(error_code = 0 | error_code = error_table_$device_end) then
	     goto REWIND;

	do i = 1 to 2;				/* Write two EOF records at end of tape. */
	     call tape_mult_write_$eof (tmdb_ptr, error_code);
	     if ^(error_code = 0 | error_code = error_table_$device_end) then
		goto REWIND;
	end;

	error_code = 0;				/* Getting this far => no error. */

REWIND:						/* A closed tape reel should be rewound. */
	string (tmdb.head.flags) = "0"b;		/* Make sure all flags are OFF. */

	if error_code ^= 0 then
	     call STOP_TAPE ((0));

	call tape_ioi_$deallocate_buffers (tioi_id, save_code);
	if error_code = 0 then
	     error_code = save_code;
	call tape_ioi_$order (tioi_id, "rew", 1, (null), (0), (0), save_code);
						/* issue rewind order, but don't bother to wait. */
	if error_code = 0				/* Use first error_code. */
	then error_code = save_code;

/*	Now we must fill in the I/O control block to indicate that it is closed.
*/
	iocb_ptr -> iocb.open_descrip_ptr = null ();
	iocb_ptr -> iocb.detach_iocb = tape_mult_detach_$detach;
	iocb_ptr -> iocb.open = tape_mult_open_$open;
	iocb_ptr -> iocb.close, iocb_ptr -> iocb.put_chars, iocb_ptr -> iocb.get_chars = iox_$err_not_open;

	call iox_$propagate (iocb_ptr);		/* Propagate changes to the I/O control block. */

	arg_error_code = error_code;			/* Return our error code. */

%page;
STOP_TAPE:
     proc (code);

dcl	code		   fixed bin (35);

	code = 0;

	call tape_ioi_$stop_tape (tioi_id, (0), rx, code);
	if rx ^= 0 then do;
	     if code = 0 then
		code = error_table_$device_parity;
	end;

     end STOP_TAPE;

/* This procedure is used to find the last good buffer written after a
   write error occured in the last subset.  We must do this because counters
   in the eor record must be in line with those of the last good record written. */

FIX_HEADER_AND_TRAILER:
     proc (error_code);

dcl	error_code	   fixed bin (35);
dcl	n_ready_buffers	   fixed bin;
dcl	READY_BUFS	   fixed bin init (1);
dcl	ready_buffers	   (tmdb.work.n_bufs) ptr;
dcl	rx		   fixed bin;

	error_code = 0;

	call tape_mult_util_$wait_for_write (tioi_id, rx, error_code);
	if rx ^= 0 then do;
	     if error_code = 0 then
		error_code = error_table_$device_parity;
	     return;
	end;

	call tape_ioi_$list_buffers (tioi_id, READY_BUFS, ready_buffers, n_ready_buffers, error_code);
	if error_code ^= 0 then
	     return;

	if n_ready_buffers = 0 then
	     return;

	mstrp = ready_buffers (n_ready_buffers);

	if mstr.trail.tot_rec = tmdb.trail.tot_rec then
	     return;				/* We are ok. */

/* We are not ok, counts must be reset so that they are consistent.
   This is because some error occured that caused us to abort writing. */

	tmdb.head = mstr.head;
	tmdb.trail = mstr.trail;

	tmdb.work.buf_pos, tmdb.work.n_full = 0;

	call STOP_TAPE (error_code);

     end FIX_HEADER_AND_TRAILER;

     end tape_mult_close_;
