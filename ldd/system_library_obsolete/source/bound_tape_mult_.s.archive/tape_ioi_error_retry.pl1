/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

/* This is where all the tape error recovery is done.  */

/* Written Aug 1982 by Sherman D. Sprague. */
/* Modified October 1983 by Chris Jones to add eof entry. */

/* format: style4,delnl,insnl,indattr,ifthen,dclind9 */
tape_ioi_error_retry:
     proc (arg_wksp_ptr, arg_buf_ptr, arg_status_ptr, arg_code);

/* Parameters */

dcl      arg_buf_ptr	  ptr parameter;		/* (I/O) pointer to  the data to be or just processed */
dcl      arg_code		  fixed bin (35) parameter;	/* (O) system status code */
dcl      arg_lost_status_cnt	  fixed bin parameter;	/* (I) count of number of statuses lost */
dcl      arg_wksp_ptr	  ptr parameter;		/* (O) pointer to the workspace */
dcl      arg_status_ptr	  ptr parameter;



/* Automatic variables */

dcl      device_command	  bit (6);
dcl      backspace_cnt	  fixed bin;
dcl      status_class	  char (2);
dcl      write_sw		  bit (1) aligned;
dcl      tries		  fixed bin;
dcl      deadline		  fixed bin (71);

dcl      ioi_$connect	  entry (fixed bin, fixed bin (18), fixed bin (35));
dcl      error_table_$device_active
			  fixed bin (35) ext static;
dcl      error_table_$device_parity
			  fixed bin (35) ext static;

/* Builtins */

dcl      (addr, addrel, bin, bit, clock, rel, substr, unspec)
			  builtin;

dcl      TEN_SECONDS	  fixed bin (71) static options (constant) init (10000000);
%page;
	wksp = arg_wksp_ptr;
	dcwp = addr (tai.order_data);			/* use the  order data area as a scratch area */
	idcwp = addr (arg_buf_ptr -> tbi.idcw_word);	/* set up the current idcw */
	write_sw = substr (idcw.command, 3, 1);		/* are we writing ? */
	if write_sw then do;
	     call BACKSPACE (1, dcwp);		/* go backspace */
	     call ERASE (dcwp);			/* go erase */
	     call TDCW (dcwp, idcwp);			/* build idcw to bridge our lists */
	     call CONNECT (addr (tai.order_data));	/* send him on his way... */
	end;

	else do;
	     if idcw.chan_cmd = "37"b3 then do;		/* have we tried all options yet */
		arg_code = error_table_$device_parity;	/* if so return code */
		return;
	     end;
	     idcw.chan_cmd = bit (bin (bin (idcw.chan_cmd) + 1, 6), 6);
						/* add one to the channel command */
	     call BACKSPACE (1, dcwp);		/* go backspace */
	     call TDCW (dcwp, idcwp);
	     call CONNECT (addr (tai.order_data));	/* send him on his way */
	end;
	return;

backspace:
     entry (arg_wksp_ptr, arg_buf_ptr, arg_status_ptr, arg_lost_status_cnt, arg_code);

	wksp = arg_wksp_ptr;			/* setup the workspace pointer */
	statp = addr (arg_status_ptr -> istat.iom_stat);
	dcwp = addr (tai.order_data);
	idcwp = addr (arg_buf_ptr -> tbi.idcw_word);	/* get the current idcw */

	if status.initiate then
	     backspace_cnt = arg_lost_status_cnt;
	else backspace_cnt = arg_lost_status_cnt + 1;
	call BACKSPACE (backspace_cnt, dcwp);		/* go backspace */
	call TDCW (dcwp, idcwp);
	call CONNECT (addr (tai.order_data));		/* send him on his way.... */
	return;

eof:
     entry (arg_wksp_ptr, arg_code);

	wksp = arg_wksp_ptr;
	idcwp = addr (tai.order_data (1));
	dcwp = addr (tai.order_idcw);
	call BACKSPACE (1, dcwp);
	call ERASE (dcwp);
	call CONNECT (addr (tai.order_idcw));
	return;




/* This procedure will backspace the tape */

BACKSPACE:
     proc (rec_bk, dcwp);
dcl      rec_bk		  fixed bin parameter;	/* records to be backspaced */
dcl      dcwp		  ptr parameter;		/* pointer into IDCW list */

	dcwp -> idcw = idcw;
	dcwp -> idcw.command = "46"b3;
	dcwp -> idcw.control = "10"b;
	dcwp -> idcw.chan_cmd = "02"b3;
	dcwp -> idcw.count = bit (bin (rec_bk, 6), 6);
	dcwp = addrel (dcwp, 1);

     end BACKSPACE;


/* This procedure will erase one record on the tape */

ERASE:
     proc (dcwp);
dcl      dcwp		  ptr parameter;		/* pointer into IDCW list */

	dcwp -> idcw = idcw;
	dcwp -> idcw.command = "54"b3;
	dcwp -> idcw.control = "10"b;
	dcwp -> idcw.chan_cmd = "02"b3;
	dcwp -> idcw.count = "01"b3;
	dcwp = addrel (dcwp, 1);

     end ERASE;



/* This procedure will build a TDCW to join two idcw lists */

TDCW:
     proc (dcwp, dest_idcwp);
dcl      dcwp		  ptr parameter;		/* pointer into IDCW list */
dcl      dest_idcwp		  ptr parameter;		/* pointer to the rest of the list */

	tdcwp = dcwp;				/* point as to a tdcw */
	unspec (tdcw) = ""b;
	tdcw.address = rel (dest_idcwp);
	tdcw.type = "10"b;
	tdcw.rel = "1"b;

     end TDCW;

CONNECT:
     proc (idcwp);

dcl      idcwp		  ptr parameter;		/* pointer to start of dcw list */

	deadline = clock () + TEN_SECONDS;
	do while ("1"b);
	     do tries = 1 to 10;
		call ioi_$connect (tai.ioi_index, bin (rel (idcwp)), arg_code);
		if arg_code ^= error_table_$device_active then
		     return;
	     end;
	     if clock () > deadline then
		return;
	end;

     end CONNECT;

%include tape_ioi_workspace;
%page;
%include iom_pcw;
%include iom_dcw;
%page;
%include iom_stat;
%page;
%include ioi_stat;
%page;
%include io_status_word;
%page;
%include interrupt_levels;
%page;
%include tape_ioi_result_indexes;
%page;
%include tape_ioi_buffer_status;

     end tape_ioi_error_retry;
