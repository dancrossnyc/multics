/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

/* tape_ioi_ buffer management entries */
/* Written May 1982 by Chris Jones */
/* Modified 14 January 1983 by Chris Jones to add reserve_buffer and release_buffer entries. */
/* Modified 2 February 1983 by Chris Jones to add READY_AND_RESERVED distinction to list_buffers. */
/* Modified 9 February 1983 by Chris Jones to improve interaction between reserved buffers and deallocate_buffers. */

/* format: style4,delnl,insnl,indattr,ifthen,declareind10,dclind10 */
tape_ioi_buffer_man:
     proc;

dcl	p_buffer_data_ptr	   ptr parameter;		/* (I) pointer to the data area of a buffer */
dcl	p_buffer_ptr	   ptr parameter;		/* (I) pointer to a buffer header */
dcl	p_buffer_ptrs	   (*) ptr parameter;	/* (O) array of buffer data area pointers */
dcl	p_code		   fixed bin (35) parameter;	/* (O) standard system status code */
dcl	p_num_bufs	   fixed bin parameter;	/* (O) count of buffers in a given state */
dcl	p_state		   fixed bin parameter;	/* (I) state of buffers we're interested in */
dcl	p_tbs_ptr		   ptr parameter;		/* (I) pointer to a buffer status structure */
dcl	p_tioi_id		   bit (36) aligned parameter;/* (I) tape_ioi_ activation ID */
dcl	p_wksp		   ptr parameter;		/* (I) pointer to the tape_ioi_ workspace */

/* Automatic variables */

dcl	buffer_ptr	   ptr;
dcl	num_bufs		   fixed bin;
dcl	state		   fixed bin;

/* Externals */

dcl	tape_ioi_utils$get_buffer_ptr
			   entry (ptr, ptr) returns (ptr);
dcl	tape_ioi_utils$get_workspace_ptr
			   entry (bit (36) aligned, ptr);

dcl	error_table_$action_not_performed
			   fixed bin (35) ext static;
dcl	error_table_$bad_arg   fixed bin (35) ext static;
dcl	error_table_$device_active
			   fixed bin (35) ext static;
dcl	error_table_$unimplemented_version
			   fixed bin (35) ext static;

/* Builtins */

dcl	(addr, bin, dim, lbound, null, ptr, rel)
			   builtin;

/* entry to return the status of a specified buffer */
buffer_status:
     entry (p_tioi_id, p_buffer_data_ptr, p_tbs_ptr, p_code);

	call setup;
	buffer_ptr = tape_ioi_utils$get_buffer_ptr (wksp, p_buffer_data_ptr);
	if buffer_ptr = null () then
	     call quit (error_table_$bad_arg);

	tbs_ptr = p_tbs_ptr;
	if tbs.version ^= TBS_VERSION then
	     call quit (error_table_$unimplemented_version);

	tbs.state = buffer_ptr -> tbi.state;
	tbs.buffer_len = buffer_ptr -> tbi.buffer_len;
	tbs.data_len = buffer_ptr -> tbi.data_len;
	tbs.bit_count = buffer_ptr -> tbi.bit_len;
	tbs.channel_inst = buffer_ptr -> tbi.cif_code;
	if buffer_ptr -> tbi.modes.data_code = "05"b3 then
	     tbs.data_mode = "bin";
	else if buffer_ptr -> tbi.modes.data_code = "04"b3 then
	     tbs.data_mode = "bcd";
	else if buffer_ptr -> tbi.modes.data_code = "03"b3 then
	     tbs.data_mode = "tap9";
	else if buffer_ptr -> tbi.modes.data_code = "27"b3 then
	     tbs.data_mode = "asc";
	else if buffer_ptr -> tbi.modes.data_code = "24"b3 then
	     tbs.data_mode = "ebc";
	else if buffer_ptr -> tbi.modes.data_code = "25"b3 then
	     tbs.data_mode = "a/e";
	else tbs.data_mode = "****";			/* we'll get an error later if we try to use this */
	tbs.align_mode = buffer_ptr -> tbi.modes.align;
	tbs.length_mode = buffer_ptr -> tbi.modes.length;
	tbs.recovery_mode = buffer_ptr -> tbi.modes.recovery;
	tbs.reserved = buffer_ptr -> tbi.reserved;

	p_code = 0;
	return;

/* entry to return an array of all buffers, or all buffers in a specified state */
list_buffers:
     entry (p_tioi_id, p_state, p_buffer_ptrs, p_num_bufs, p_code);

	call setup;
	state = p_state;
	if state = 0 then
	     buffer_ptr = ptr (wksp, tai.buffer_list_offset);
	else if (state = READY_STATE) | (state = READY_AND_RESERVED_STATE) then
	     buffer_ptr = ptr (wksp, tai.free_list_offset);
	else if state = QUEUED_STATE then
	     buffer_ptr = ptr (wksp, tai.queue_list_offset);
	else if state = SUSPENDED_STATE then
	     buffer_ptr = ptr (wksp, tai.susp_list_offset);
	else call quit (error_table_$bad_arg);

/* Now loop thru the appropriate buffer list.  If rel (buffer_ptr) = ""b, then the offset in the ptr expression
   above must be 0, which means there are no buffers of the appropriate state, so skip the following loop. */

	num_bufs = 0;				/* none seen so far */
	do while (rel (buffer_ptr));
	     if ^((state = READY_STATE) & (buffer_ptr -> tbi.reserved)) then do;
		if num_bufs < dim (p_buffer_ptrs, 1) then
		     p_buffer_ptrs (lbound (p_buffer_ptrs, 1) + num_bufs) = ptr (wksp, buffer_ptr -> tbi.data_offset);
		num_bufs = num_bufs + 1;
	     end;
	     if state = 0 then
		buffer_ptr = ptr (wksp, buffer_ptr -> tbi.next_buf_offset);
	     else buffer_ptr = ptr (wksp, buffer_ptr -> tbi.next_state_offset);
	end;

	p_num_bufs = num_bufs;
	p_code = 0;
	return;

/* Entry to set a suspended buffer's state to ready. */

set_buffer_ready:
     entry (p_tioi_id, p_buffer_data_ptr, p_code);

	call setup;
	buffer_ptr = tape_ioi_utils$get_buffer_ptr (wksp, p_buffer_data_ptr);
	if buffer_ptr = null () then
	     call quit (error_table_$bad_arg);

	if buffer_ptr -> tbi.state = QUEUED_STATE then
	     call quit (error_table_$device_active);
	else if buffer_ptr -> tbi.state = READY_STATE then
	     call quit (error_table_$action_not_performed);

	call set_buffer_ready_proc (buffer_ptr);
	p_code = 0;
	return;

/* Internal entry (not retained) to set a buffer's state to ready. */

internal_set_buffer_ready:
     entry (p_wksp, p_buffer_ptr);

	wksp = p_wksp;
	call set_buffer_ready_proc (p_buffer_ptr);
	return;

/* Procedure which actually sets a buffer's state to ready.  It insists that the state be either queued or suspended. */

set_buffer_ready_proc:
     proc (buffer_ptr);

dcl	buffer_ptr	   ptr parameter;

dcl	cbufp		   ptr;
dcl	last_offset_ptr	   ptr;

dcl	last_offset	   fixed bin (18) unsigned unaligned based (last_offset_ptr);

	if buffer_ptr -> tbi.state = QUEUED_STATE then do;
	     cbufp = ptr (wksp, tai.queue_list_offset);
	     last_offset_ptr = addr (tai.queue_list_offset);
	end;
	else if buffer_ptr -> tbi.state = SUSPENDED_STATE then do;
	     cbufp = ptr (wksp, tai.susp_list_offset);
	     last_offset_ptr = addr (tai.susp_list_offset);
	end;
	else return;

	do while ((cbufp ^= buffer_ptr) & (cbufp ^= wksp));
	     last_offset_ptr = addr (cbufp -> tbi.next_state_offset);
	     cbufp = ptr (wksp, cbufp -> tbi.next_state_offset);
	end;
	if cbufp = wksp then
	     return;

	last_offset = buffer_ptr -> tbi.next_state_offset;/* cbupf = buffer_ptr */
	buffer_ptr -> tbi.state = READY_STATE;
	buffer_ptr -> tbi.next_state_offset = 0;

	if tai.free_list_offset = 0 then
	     tai.free_list_offset = bin (rel (buffer_ptr));
	else do;
	     cbufp = ptr (wksp, tai.free_list_offset);
	     do while (cbufp -> tbi.next_state_offset ^= 0);
		cbufp = ptr (wksp, cbufp -> tbi.next_state_offset);
	     end;
	     cbufp -> tbi.next_state_offset = bin (rel (buffer_ptr));
	end;

     end set_buffer_ready_proc;

/* Entry to reserve a buffer.  A reserved buffer will not have a read done into it unless an explicit
   queue_read call is made with it as an argument.  A reserved buffer may not lie above a buffer which is
   not reserved (so that deallocate_buffers can keep the reserved buffers still allocated). */

reserve_buffer:
     entry (p_tioi_id, p_buffer_data_ptr, p_code);

	call setup;
	buffer_ptr = tape_ioi_utils$get_buffer_ptr (wksp, p_buffer_data_ptr);
	if buffer_ptr = null () then
	     call quit (error_table_$bad_arg);

	begin;
dcl	bufp		   ptr;

	     do bufp = ptr (wksp, tai.buffer_list_offset) repeat ptr (wksp, bufp -> tbi.next_state_offset)
		while (rel (bufp));
		if ((bufp -> tbi.data_offset) < (buffer_ptr -> tbi.data_offset)) & ^(bufp -> tbi.reserved) then
		     call quit (error_table_$action_not_performed);
	     end;
	end;

	buffer_ptr -> tbi.reserved = "1"b;
	return;

/* Entry to release a buffer from its reserved state. */

release_buffer:
     entry (p_tioi_id, p_buffer_data_ptr, p_code);

	call setup;
	buffer_ptr = tape_ioi_utils$get_buffer_ptr (wksp, p_buffer_data_ptr);
	if buffer_ptr = null () then
	     call quit (error_table_$bad_arg);

	begin;
dcl	bufp		   ptr;

	     do bufp = ptr (wksp, tai.buffer_list_offset) repeat ptr (wksp, bufp -> tbi.next_state_offset)
		while (rel (bufp));
		if ((bufp -> tbi.data_offset) > (buffer_ptr -> tbi.data_offset)) & (bufp -> tbi.reserved) then
		     call quit (error_table_$action_not_performed);
	     end;
	end;

	buffer_ptr -> tbi.reserved = "0"b;
	return;

setup:
     proc;

	call tape_ioi_utils$get_workspace_ptr (p_tioi_id, wksp);
	if wksp = null () then
	     call quit (error_table_$bad_arg);

     end setup;

quit:
     proc (code);

dcl	code		   fixed bin (35);

	p_code = code;
	goto ERROR_RETURN;

     end quit;

ERROR_RETURN:
	return;

%include tape_ioi_workspace;
%page;
%include tape_ioi_buffer_status;

     end tape_ioi_buffer_man;
