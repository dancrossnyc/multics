/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* monitor_log_util_ -- actual examiner of the logs, separated out for efficiency */
/* format: style2 */

monitor_log_util_:
     procedure;

/* Coded 1981 March 4 Benson I. Margulies */
/* bugs in log switching addresed BIM 11/82 */

%page;
%include monitor_log_info_;
%page;
%include syslog;
%page;

	declare cu_$cp		 entry (ptr, fixed bin (21), fixed bin (35));
	declare hcs_$initiate	 entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr,
				 fixed bin (35));
	declare hcs_$terminate_name	 entry (char (*), fixed bin (35));
	declare hcs_$status_minf	 entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24),
				 fixed bin (35));
	declare ioa_$rsnpnnl	 entry options (variable);
	declare iox_$control	 entry (ptr, char (*), ptr, fixed bin (35));
	declare ioa_		 entry () options (variable);
	declare requote_string_	 entry (char (*)) returns (char (*));
	declare timer_manager_$alarm_call
				 entry (fixed bin (71), bit (2), entry);

	declare (
	        error_table_$namedup,
	        error_table_$segknown
	        )			 external static fixed bin (35);
	declare iox_$user_io	 pointer external static;

	declare saved_pclock	 fixed bin (35);
	declare code		 fixed bin (35);
	declare sys_log_ptr		 pointer;

	declare cleanup		 condition;
	declare any_other		 condition;
	declare seg_fault_error	 condition;
	declare out_of_bounds	 condition;

	declare (
	        (Log_pointer, Info_pointer)
				 pointer,
	        (Dir_name, Entryname, Refname)
				 character (*),
	        Code		 fixed binary (35)
	        )			 parameter;


wakeup_handler:
     entry;					/* gets timer_manager_ wakeups */
	on any_other system;			/* isolate from things further up */

	on cleanup call reset;			/* dont lose wakeup */
	on seg_fault_error,				/* moved or deleted */
	     out_of_bounds /* something else went awry */
	     begin;
		declare log_state		 bit (2);
		log_state = check_log_switch ();
		if log_state = LOG_SWITCHED
		then go to RECONSIDER_LOG;
		else go to SKIP_LOG;		/* maybe it will be in a better state next tick */
	     end;

/* Try to be robust across changes made by a call handler */

RESTART_CHECK:					/* come here if a -call disturbs the threads */
	do mlip = monitor_log_invocations_.firstp repeat (monitor_log_info.forwardp) while (mlip ^= null ());

RECONSIDER_LOG:
	     saved_pclock = monitor_log_invocations_.change_pclock;
	     if monitor_log_info.log_entryname ^= ""	/* not deleted */
	     then do;
		     sys_log_ptr = monitor_log_info.logp;

/* first print for the simple case, which is just new messages in the existing log.	*/

		     if sys_log_file.count > monitor_log_info.last_count
		     then call printup;

/* next check for a switch in the log segments.					*/

		     else if sys_log_file.count = monitor_log_info.last_count & sys_log_file.count >= sys_log_file.max
		     then if check_log_switch () = LOG_SWITCHED
			then call printup;		/* try again */
		end;
SKIP_LOG:
	     if monitor_log_invocations_.change_pclock ^= saved_pclock
	     then go to RESTART_CHECK;

	end;
	call reset;
	return;

reset:
     procedure;

	if monitor_log_invocations_.firstp ^= null ()
	then call timer_manager_$alarm_call (monitor_log_invocations_.interval, "11"b, wakeup_handler);
     end reset;

printup:
     procedure;

	declare im		 fixed bin;
	declare printit		 bit (1);
	declare last_message_we_see	 fixed bin;
	declare message_length	 fixed bin (21);
	declare command		 character (512) aligned;
	declare i			 fixed bin;

	last_message_we_see = sys_log_file.count;
	do i = monitor_log_info.last_count + 1 to last_message_we_see;

	     printit = "0"b;			/* assume we will not print */

	     if monitor_log_info.matches
	     then do im = 1 to monitor_log_info.n_matches;/* any match will do */
		     printit = printit | (index (sys_log_file.array (i).line, lm_match_array (im)) > 0);
		end;
	     else printit = "1"b;			/* unless there are no match requirements, in which case we assume we do */

	     if monitor_log_info.filter_severity
	     then printit = printit & (sys_log_file.array (i).svty >= monitor_log_info.severity);

	     if monitor_log_info.excludes
	     then do im = 1 to monitor_log_info.n_excludes;
						/* any serve to exclude */
		     printit = printit & ^(index (sys_log_file.array (i).line, lm_exclude_array (im)) > 0);
		end;
	     if printit
	     then do;
		     if monitor_log_info.call
		     then do;
			     call ioa_$rsnpnnl ("^a ^a ^d ^d ^a", command, message_length,
				rtrim (monitor_log_info.command_to_call), monitor_log_info.log_entryname, i,
				sys_log_file.array (i).svty,
				requote_string_ (rtrim (sys_log_file.array (i).line)));

			     call cu_$cp (addr (command), message_length, (0));
			end;
		     else do;
			     call ioa_ ("^a ^d ^d ^a", monitor_log_info.log_entryname, i,
				sys_log_file.array (i).svty, sys_log_file.array (i).line);
			end;
		end;
	end;
	monitor_log_info.last_count = last_message_we_see;
	call iox_$control (iox_$user_io, "start", null (), code);
	return;
     end printup;



refname$$initiate:
     procedure (log_ptr, code);
	declare log_ptr		 pointer;
	declare code		 fixed bin (35);
	declare (dir, entryname, refname)
				 character (*);
	declare temp_code		 fixed bin (35);

	call hcs_$initiate (monitor_log_info.log_dir, monitor_log_info.log_entryname, monitor_log_info.special_refname,
	     0, 1, log_ptr, code);
	return;

refname$$initiate_path:
     entry (dir, entryname, refname, log_ptr, code);

	call hcs_$initiate (dir, entryname, refname, (0), (1), log_ptr, code);
	return;

refname$$terminate:
     entry ();

	call hcs_$terminate_name (monitor_log_info.special_refname, temp_code);
	return;
     end refname$$initiate;


check_log_switch:
     procedure returns (bit (2) aligned);
	declare temp_logp		 pointer;

/* if a switch has completed, then the special refname will be stuck
   on the old segment, which will have a new name. If the switch is
   only partway done, the rename will have happened but the new segment
   will not yet exist. If this program detects the rename, then it terminates
   the special refname. If it then finds that the new segment is not 
   available yet, it does not bother to try to put the refname back on
   the renamed segment. So the next time we look at this log, we will try
   to initiate with the refname, the initiate call will return segknown
   or no error. The only remaining difficulty is that we may wind up 
   terminating the renamed segment altogether. To prevent this a status_minf
   call is made before the reference name is terminated. */

	call refname$$initiate (temp_logp, code);

	if (code = 0)				/* this is impossible unless there was an error of some kind */
	then do;
		call refname$$terminate;
		return (NO_SUCH_LOG);
	     end;
	else if (code = error_table_$segknown)
	then do;					/* seg at this path has this refname */
		return (NO_LOG_SWITCH);		/* so there was no turnover */
	     end;

	else if code = error_table_$namedup
	then do;					/* seg at another pathname has this refname */
						/* so a rename has happened */
						/* insure that the new one is there */
		call hcs_$status_minf (monitor_log_info.log_dir, monitor_log_info.log_entryname, (0), (0), (0), code);
		if code ^= 0
		then return (NO_LOG_SWITCH);		/* not yet ... window we cannot close */
		call refname$$terminate;
		call refname$$initiate (temp_logp, code);

		if monitor_log_info.logp = null ()	/* we could call sub_err_, but */
		then do;
			return (NO_LOG_SWITCH);
		     end;
		monitor_log_info.logp = temp_logp;
		monitor_log_info.last_count = 0;
		sys_log_ptr = monitor_log_info.logp;    /* new log */
		return (LOG_SWITCHED);
	     end;
	return (NO_LOG_SWITCH);			/* some other error from initiate */
     end check_log_switch;

initiate_log:
     entry (Info_pointer, Code);
	Code = 0;
	mlip = Info_pointer;
	call refname$$initiate (monitor_log_info.logp, Code);
	return;

initiate_path:
     entry (Dir_name, Entryname, Refname, Log_pointer, Code);

	call refname$$initiate_path (Dir_name, Entryname, Refname, Log_pointer, Code);
	return;

monitor_log_util_$check_log_switch:
     entry (Info_pointer) returns (bit (2) aligned);

	mlip = Info_pointer;
	return (check_log_switch ());
     end monitor_log_util_;
