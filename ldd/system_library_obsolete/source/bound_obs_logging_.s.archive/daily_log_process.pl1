/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4 */
daily_log_process: proc;

/* This program is run once a day to process the log for the preceding day.
   It writes out all log entries on various streams.

   USAGE:

   .	daily_log_process -logname- -(-from date)-

   If the "-from date" option is not given, the program looks for "sys_admin_data" in the current
   working directory, and uses the "log_control" structure there to look for a note which says
   how far daily_log_process got last time. It continues from there.

   Otherwise, the log is scanned for a line beginning with "date" and we go from there.

   Distribution of the output is controlled by the control file, "log_select_file", in the current
   working directory. This file has comment lines beginning with "*", and lines of the form

   .	streamname,S,opcode,text

   streamname	is the name of the stream on which a line will be written.
   S		is the minimum severity which will be considered.
   opcode 	is the operation code (see below)
   text		is optional text which is the operand of opcode.

   Legal opcodes are:
   .	all	selects all lines at this severity
   .	any	selects all lines containing text
   .	begin	selects all lines beginning text
   .	not	inhibits all lines containing text
   .	nbegin	inhibits all lines beginning text
   .	count	counts all lines containing text
   .	bcount	counts all lines beginning text
   .	usage	accumulates totals for network lines
   .	charge	accumulates charges for network lines

   "not" and "nbegin" must precede any selectors they are to inhibit, for a given stream.

   ALL STREAMS MUST BE PRE-ATTACHED.

   At the end of processing, total lines are written. Then, if any lines were selected, a total count is output.

   THVV
*/
/*  Modified October, 1980 by J. N. R. Barnecut to allow 15 extra logs rather than 5. */
/*  Modified September, 1982 by E. N. Kittlitz to increase number of streams, selectors, and check array bounds */

dcl  path char (168) init (">system_control_dir>log");
dcl  dn char (168);
dcl  en char (32);
dcl  c32 char (32);
dcl  p ptr;
dcl  sadp ptr;
dcl  logx fixed bin;
dcl  bcs char (131071) based (p);
dcl  buffer char (120);
dcl  ec fixed bin (35);
dcl  bchr char (al) based (ap);
dcl  testsw bit (1) aligned init ("0"b);
dcl  ap ptr;
dcl  al fixed bin (21);
dcl  sys_log_ptr ptr;
dcl  timestr char (16);
dcl  opword char (8);
dcl  (i, j, k, l, m, n) fixed bin;
dcl  vcs char (64) varying;
dcl  c1 char (1) aligned;
dcl  max_test fixed bin;
dcl  nstreams fixed bin init (0);
dcl  nwrote fixed bin init (0);
dcl  nscan fixed bin init (0);
dcl  xj fixed bin;
dcl  icount fixed bin (24);
dcl  pl fixed bin init (23);
dcl  an fixed bin init (1);

/* declarations for "usage" and "charge",  "extra_log", and "-from" logic EWM 103072 */

dcl  extra_log_index fixed bin init (0);		/* how many extra levels of logs are there ? */
dcl  extra_log_ptrs (15) ptr;				/* ptrs to up to 15 extra logs */

dcl  (charge_count, charge_seconds, usage_count, usage_seconds,
     usage_dempages, usage_prepages) fixed bin init (0);
dcl  (curidx, incr, len) fixed bin;
dcl  (minutes, seconds, dempages, prepages) fixed bin (35);

dcl  limit_sw bit (1) init (""b);			/* =1 if "-from" option is used */
dcl  limit_time fixed bin (71);			/* = earliest time for retrieval if "-from" option is used */
dcl  linep ptr;

dcl  dec_string char (12) var;

dcl  1 based_line aligned based (linep),
       2 part1 char (curidx - 1) unaligned,
       2 part2 char (117 - curidx) unaligned;

dcl  NL char (1) aligned int static init ("
");

dcl  1 temp_str (500) aligned,
       2 cs char (64) unal,
       2 opcode fixed bin,
       2 tot fixed bin,
       2 streamno fixed bin,
       2 tsvty fixed bin,
       2 tlth fixed bin;

dcl  1 streams (50) aligned,
       2 stream char (32) unal,
       2 odate char (8),
       2 inhib fixed bin,
       2 lastline fixed bin,
       2 linecount fixed bin;

dcl  format char (14) aligned int static init ("^4d ^16a ^d ^a");

dcl  (addr, null, hbound, index, length, max, mod, divide, substr) builtin;
dcl  cleanup condition;

dcl  convert_binary_integer_$decimal_string entry (fixed bin (35), char (12) var);
dcl  convert_date_to_binary_ entry (char (*), fixed bin (71), fixed bin (35));
dcl  get_wdir_ entry () returns (char (168));
dcl  initiate_file_ entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
dcl  terminate_file_ entry (ptr, fixed bin (24), bit (*), fixed bin (35));
dcl  com_err_ entry options (variable);
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  ioa_ entry () options (variable);
dcl  ioa_$ioa_stream entry () options (variable);

/* ======================================================= */

/* Internal procedure to write a line on a stream if not there already. */

wout: proc (sx, lx);
dcl  (sx, lx) fixed bin;
dcl  tdate char (16) aligned;
	if lastline (sx) = lx then return;
	if inhib (sx) = lx then return;
	tdate = timestr;
	if substr (timestr, 1, 8) = odate (sx) then substr (tdate, 1, 8) = "";
	else odate (sx) = tdate;
	call ioa_$ioa_stream (stream (sx), format, lx, tdate, sys_log_file.svty (lx),
	     sys_log_file.line (lx));
	lastline (sx) = lx;
	nwrote = nwrote + 1;
	linecount (sx) = linecount (sx) + 1;
     end wout;

/* ------------------------------------------------------- */

/* First read in control file */

	p, sadp, sys_log_ptr = null;
	on cleanup call clean_up;
	call initiate_file_ (get_wdir_ (), "log_select_file", R_ACCESS, p, icount, ec);
	if p = null then do;
	     call com_err_ (ec, "daily_log_process", "control file missing - log_select_file");
	     return;
	end;
	icount = divide (icount, 9, 17, 0);
	j = 1;
	do k = 1 repeat i + k while (k < icount);
	     i = index (substr (bcs, k), NL);
	     buffer = substr (bcs, k, i - 1);
	     if substr (buffer, 1, 1) = "*" then go to incrs;
	     m = index (buffer, ",");
	     c32 = substr (buffer, 1, m - 1);
	     do l = 1 to nstreams;
		if c32 = stream (l) then go to fstr;
	     end;
	     if nstreams >= hbound (streams, 1) then do;
		call com_err_ (0, "daily_log_process", "The limit of ^d streams has been exceeded.", hbound (streams, 1));
		go to punt;
	     end;
	     l, nstreams = nstreams + 1;
	     linecount (l), inhib (l), lastline (l) = 0;
	     stream (l) = c32;
	     odate (l) = "";
fstr:	     streamno (j) = l;
	     c1 = substr (buffer, m + 1, 1);
	     if c1 = "2" then tsvty (j) = 2;
	     else if c1 = "1" then tsvty (j) = 1;
	     else tsvty (j) = 0;
	     buffer = substr (buffer, m + 3);
	     n = index (buffer, ",");
	     if n = 0 then n = i - m - 2;
	     opword = substr (buffer, 1, n - 1);
	     if opword = "all" then opcode (j) = 1;
	     else if opword = "any" then opcode (j) = 2;
	     else if opword = "begin" then opcode (j) = 3;
	     else if opword = "not" then opcode (j) = 4;
	     else if opword = "nbegin" then opcode (j) = 5;
	     else if opword = "count" then opcode (j) = 6;
	     else if opword = "bcount" then opcode (j) = 7;
	     else if opword = "usage" then opcode (j) = 8;
	     else if opword = "charge" then opcode (j) = 9;
	     else do;
		call com_err_ (0, "daily_log_process", "Illegal opcode ^a", opword);
		go to incrs;
	     end;
	     tot (j) = 0;
	     cs (j) = substr (buffer, n + 1);
	     tlth (j) = i - m - 3 - n;
	     if j >= hbound (temp_str, 1) then do;
		call com_err_ (0, "daily_log_process", "The limit of ^d selectors has been exceeded.", hbound (temp_str, 1));
		go to punt;
	     end;
	     j = j + 1;
incrs:	end;
	max_test = j - 1;
	call ioa_ ("daily_log_process: ^d streams, ^d selectors", nstreams, max_test);
	if max_test = 0 then return;

/* process arguments */

	an = 1;
	j = 0;					/* switch for dispatching on "-from" code */
arglp:	call cu_$arg_ptr (an, ap, al, ec);
	if ec ^= 0 then go to endarg;

	if j = 1 then do;				/* process limit argument following "-from" */
	     j = 0;
	     limit_sw = "1"b;
	     call convert_date_to_binary_ (bchr, limit_time, ec);
	     if ec ^= 0 then goto badarg;
	end;
	else if bchr = "-from" then j = 1;
	else do;
	     path = bchr;
	     pl = al;
	end;

nxtarg:	an = an + 1;
	go to arglp;

endarg:	call expand_pathname_ (path, dn, en, ec);
	if ec ^= 0 then do;
er:	     call com_err_ (ec, "daily_log_process", path);
	     return;
	end;

	if ^limit_sw then do;
	     call initiate_file_ (get_wdir_ (), "sys_admin_data", R_ACCESS, sadp, (0), ec);
	     if sadp = null then go to er;
	     do logx = 1 to sys_admin_data.n_logs;
		if sys_admin_data.log_id (logx) = en then do;
		     go to initiate_logs;
		end;
	     end;
	end;

initiate_logs: call initiate_file_ (dn, en, R_ACCESS, sys_log_ptr, (0), ec);
	if sys_log_ptr = null then
	     if extra_log_index = 0 then go to er;	/* we didn't find the primary log. Real bad */
	     else do;				/* it's the previous log not found. switch to primary */
		call com_err_ (ec, "daily_log_process", "old log ^a not found", en);
		sys_log_ptr = extra_log_ptrs (extra_log_index); /* restore the previous log */
		extra_log_index = extra_log_index - 1;	/* Back down to next log */
		curidx = 1;			/* If we wanted previous log, we want first entry of this log */
		go to dolog;
	     end;

	if extra_log_index = hbound (extra_log_ptrs, 1) then goto find_start_index; /* Limit the search for previous logs */

	if ^limit_sw then
	     if logx <= sys_admin_data.n_logs then
		if log_control.last_entry (logx) ^= 0 then
		     if sys_log_file.time (log_control.last_entry (logx)) = log_control.last_entry_date (logx) then do;
			curidx = log_control.last_entry (logx); /* pick up where we left off */
			go to dolog;
		     end;
		     else ;
		else ;				/* Log point is invalid. */
	     else ;				/* Log name not registered. */
	else if sys_log_file.time (1) > limit_time then ; /* "limit_sw" is on, and whole log is after. */
	else go to find_start_index;			/* .. some of log is before limit. no need secondary. */

	if sys_log_file.lls = "" then goto find_start_index; /* no previous log */
	if sys_log_file.lls < "" then goto find_start_index; /* no previous log */

initiate_next_log: extra_log_index = extra_log_index + 1;
	extra_log_ptrs (extra_log_index) = sys_log_ptr;
	en = "log.-." || sys_log_file.lls;
	goto initiate_logs;				/* to init the previous one */

/**/
/* Following code implements a logarithmic search to find the starting point based upon a lower
   time bound. Upper bound k is always a permissible starting point except at the start when it is
   out of bounds. Lower bound j is not necessarily a permissible starting point.  We stop
   when j is out of bounds (failure) or j = k (success) */

find_start_index: if ^limit_sw then do;			/* start is based on last entry processed */
	     curidx = 1;				/* But we don't know where to start. */
	     goto dolog;
	end;

	j = 1;					/* lower bound for logarithmic search */
	k = sys_log_file.count + 1;			/* initial upper bound is out of bounds */

get_check_index: curidx = divide (k + j, 2, 17, 0);
	if sys_log_file.array (curidx).time < limit_time then do; /* This is below lower bound */
	     j = curidx + 1;
	     if j > sys_log_file.count then
		if extra_log_index = 0 then goto time_err; /* User specified time not in data base */
		else goto finish_log;		/* Will process the next log */
	end;

	else k = curidx;				/* It's OK, therefore it becomes new upper bound */

	if j = k then do;				/* We've limited it down */
	     curidx = j;
	     goto dolog;
	end;

	goto get_check_index;			/* To do another iteration */

/**/
/* Following code is the processing loop on log entries.
   Each line is checked against all selectors to see if it should be written. */

dolog:	icount = sys_log_file.count;			/* Dont do any item twice. */
	do i = curidx to icount;
	     nscan = nscan + 1;
	     call date_time_ (sys_log_file.time (i), timestr);
	     do j = 1 to max_test;
		if sys_log_file.svty (i) < tsvty (j) then go to skiptst;
		if tlth (j) > 0 then vcs = substr (cs (j), 1, tlth (j));
		else vcs = "";
		xj = streamno (j);
		if opcode (j) = 1 then call wout (xj, i);
		else if opcode (j) = 5 then do;
		     if substr (sys_log_file.line (i), 1, tlth (j)) = vcs then inhib (xj) = i;
		end;
		else if opcode (j) = 4 then do;
		     if index (sys_log_file.line (i), vcs) ^= 0 then inhib (xj) = i;
		end;
		else if opcode (j) = 2 then do;
		     if index (sys_log_file.line (i), vcs) ^= 0 then call wout (xj, i);
		end;
		else if opcode (j) = 3 then do;
		     if substr (sys_log_file.line (i), 1, tlth (j)) = vcs then call wout (xj, i);
		end;
		else if opcode (j) = 6 then do;	/* count */
		     if index (sys_log_file.line (i), vcs) ^= 0 then tot (j) = tot (j) + 1;
		end;
		else if opcode (j) = 7 then do;	/* bcount */
		     if substr (sys_log_file.line (i), 1, tlth (j)) = vcs then tot (j) = tot (j) + 1;
		end;
		else if opcode (j) = 8 then do;	/* usage */
		     if index (sys_log_file.line (i), vcs) ^= 0 then goto DECODE_USAGE_VALS;
		end;
		else if opcode (j) = 9 then do;	/* charge */
		     if index (sys_log_file.line (i), vcs) ^= 0 then goto DECODE_CHARGES;
		end;
skiptst:	     end;
endlp:	end;
finish_log: if ^limit_sw then
	     if logx <= sys_admin_data.n_logs then do;
		log_control.last_entry (logx) = icount;
		log_control.last_entry_date (logx) = sys_log_file.time (icount);
	     end;

	call terminate_file_ (sys_log_ptr, 0, TERM_FILE_TERM, ec);
	if extra_log_index > 0 then do;
	     sys_log_ptr = extra_log_ptrs (extra_log_index);
	     extra_log_index = extra_log_index - 1;
	     curidx = 1;				/* start at first point of next log */
	     go to dolog;
	end;

	if ^limit_sw then call terminate_file_ (sadp, 0, TERM_FILE_TERM, ec);
	call ioa_ ("daily_log_process: scanned ^d, wrote ^d", nscan, nwrote);

	do j = 1 to max_test;			/* now put out stiff for counters */
	     if opcode (j) = 6 then do;
		opword = "matching";
		go to ct2;
	     end;
	     else if opcode (j) = 7 then do;
		opword = "starting";
ct2:		xj = streamno (j);
		if linecount (xj) = 0 then if tot (j) = 0 then go to ct3;
		call ioa_$ioa_stream (stream (xj), "^/^-^6d lines ^a ""^a""",
		     tot (j), opword, substr (cs (j), 1, tlth (j)));
	     end;

	     else if opcode (j) = 8 then do;		/* usage */
		if usage_count = 0 then goto ct3;
		xj = streamno (j);
		call ioa_$ioa_stream (stream (xj),
		     "^/^6d lines ""^a"", total cpusec = ^d^/average usage per line: cpusec = ^d, pages = ^d+^d",
		     usage_count, substr (cs (j), 1, tlth (j)), usage_seconds, divide (usage_seconds, usage_count, 17, 0),
		     divide (usage_prepages, usage_count, 17, 0), divide (usage_dempages, usage_count, 17, 0));
	     end;

	     else if opcode (j) = 9 then do;		/* charge */
		if charge_count = 0 then goto ct3;
		xj = streamno (j);
		seconds = divide (charge_seconds, charge_count, 17, 0);
		call ioa_$ioa_stream (stream (xj),
		     "^/^6d lines ""^a"", total charged cpusec = ^d^/average charge per line = ^d:^2d",
		     charge_count, substr (cs (j), 1, tlth (j)), charge_seconds, divide (seconds, 60, 17, 0),
		     mod (seconds, 60));
		if usage_count = 0 then goto ct3;
		seconds = divide (charge_seconds * 100, usage_seconds, 17, 0); /* get ratio x 100 */
		call convert_binary_integer_$decimal_string (seconds, dec_string);
		len = length (dec_string);
		if len < 2 then do;
		     dec_string = "  " || dec_string;
		     len = len + 2;
		end;
		call ioa_$ioa_stream (stream (xj), "^/(charge cpu seconds)/(usage cpu seconds) ratio = ^a.^a",
		     substr (dec_string, 1, len - 2) /* integer part */, substr (dec_string, len - 1, 2) /* fraction part */);
	     end;

ct3:	end;

	do xj = 1 to nstreams;			/* now put out line totals */
	     if linecount (xj) > 0 then
		call ioa_$ioa_stream (stream (xj), "^/Total of ^d lines", linecount (xj));
	end;

punt:	call clean_up;
	return;

badarg:	call com_err_ (ec, "daily_log_process", "Bad argument ^a", bchr);
	return;

time_err: call com_err_ (0, "daily_log_process", "Time specified later than within logs");
	return;

/**/
/* CODE TO PROCESS "usage" and "charge" orders follows */

DECODE_USAGE_VALS:
	linep = addr (sys_log_file.line (i));
	len, incr = 0;

decode_useconds: curidx = index (sys_log_file.line (i), "=") + 1;
	if curidx < 2 then goto line_format_error;
	len = index (based_line.part2, ",") - 1;
	if len < 1 then goto line_format_error;
	seconds = cv_dec_check_ (substr (sys_log_file.line (i), curidx, len), ec);
	if ec ^= 0 then goto conversion_error;

decode_prepages:
	incr = index (based_line.part2, "=") + 1;
	if incr < 2 then goto line_format_error;
	curidx = curidx + incr;
	len = index (based_line.part2, "+") - 1;
	if len < 1 then goto line_format_error;
	prepages = cv_dec_check_ (substr (sys_log_file.line (i), curidx, len), ec);
	if ec ^= 0 then goto conversion_error;

decode_dempages:
	curidx = curidx + len + 1;
	dempages = cv_dec_check_ ((based_line.part2), ec);
	if ec ^= 0 then goto conversion_error;

update_usage_totals: usage_count = usage_count + 1;
	usage_seconds = usage_seconds + seconds;
	usage_prepages = usage_prepages + prepages;
	usage_dempages = usage_dempages + dempages;

	goto skiptst;				/* to process the next line */


DECODE_CHARGES:
	linep = addr (sys_log_file.line (i));
	len, incr = 0;

decode_minutes: curidx = index (sys_log_file.line (i), ":") - 1;
	if curidx < 2 then goto line_format_error;
	do incr = curidx to 1 by -1;
	     if substr (sys_log_file.line (i), incr, 1) = " " then goto decode_minutes1;
	end;
	goto line_format_error;			/* we never found the beginning */

decode_minutes1: len = curidx - incr;
	minutes = cv_dec_check_ (substr (sys_log_file.line (i), incr + 1, len), ec);
	if ec ^= 0 then goto conversion_error;

decode_cseconds: curidx = curidx + 2;
	len = 2;					/* seconds field has two digits */
	seconds = cv_dec_check_ (substr (sys_log_file.line (i), curidx, len), ec);
	if ec ^= 0 then goto conversion_error;

update_charge_totals: charge_count = charge_count + 1;
	charge_seconds = charge_seconds + minutes * 60 + seconds;

	goto skiptst;				/* to process the next line */

conversion_error: call com_err_ (0, "daily_log_process",
	     "conversion_error in char ^d of: ""^a""", ec, substr (sys_log_file.line (i), curidx, len));

line_format_error: call com_err_ (0, "daily_log_process",
	     "format_error in line ^d. Line = ^/^a^/curidx = ^d, len = ^d, incr = ^d",
	     i, sys_log_file.line (i), curidx, len, incr);

	goto skiptst;				/* to process the next line */


clean_up: proc;
	if sys_log_ptr ^= null then
	     call terminate_file_ (sys_log_ptr, 0, TERM_FILE_TERM, (0));
	if p ^= null then
	     call terminate_file_ (p, 0, TERM_FILE_TERM, (0));
	if sadp ^= null then
	     call terminate_file_ (sadp, 0, TERM_FILE_TERM, (0));
     end;
%page;
%include access_mode_values;
%page;
%include syslog;
%page;
%include sys_admin_data;
%page;
%include terminate_file;

     end daily_log_process;
