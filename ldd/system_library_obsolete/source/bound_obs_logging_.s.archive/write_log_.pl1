/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


write_log_: proc (dtime, xsv, lin);

/* WRITE_LOG_ - add an entry to a system control log file.

   THVV */

dcl  dtime fixed bin (71),
     xsv fixed bin,
     lin char (*);

dcl  logptr ptr int static init (null);			/* ptr to standard log. */
dcl  dn char (64) aligned int static init (">system_control_1");

dcl  hcs_$terminate_noname entry (ptr, fixed bin);
dcl  hcs_$make_seg entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (5), ptr, fixed bin);
dcl  copy_acl_ entry (char (*) aligned, char (*) aligned, char (*) aligned, char (*) aligned, bit (1), fixed bin);
dcl  hcs_$chname_seg entry (ptr, char (*) aligned, char (*) aligned, fixed bin);
dcl  date_time_ entry (fixed bin (71), char (*) aligned);
dcl  ioa_$rsnnl entry options (variable);

dcl  en char (32) aligned;
dcl  sys_log_ptr ptr;
dcl  filesw bit (1) aligned;
dcl  xlls char (32) aligned init ("");
dcl  ec fixed bin;
dcl  i fixed bin;
dcl  timestr char (16) aligned;
dcl  on char (32) aligned;

dcl (null, substr) builtin;

%include syslog;

/* -------------------------------------------------------- */

	en = "log";				/* Default name. */
	sys_log_ptr = logptr;			/* .. dft ptr */
	filesw = "0"b;
	go to join;

/* Entry point used if writing to other than default log file. */

write_log_file: entry (dtime, xsv, lin, sname, logp);

dcl  sname char (*),				/* Name of log file to write. */
     logp ptr;					/* ptr to log */

	sys_log_ptr = logp;				/* Copy args */
	en = sname;				/* .. */
	filesw = "1"b;

join:	if sys_log_ptr = null then do;		/* Do we know where file is? */
refind:	     call hcs_$make_seg (dn, en, "", 1011b, sys_log_ptr, ec);
	     if sys_log_ptr = null then return;		/* can't happen */
	     if filesw then logp = sys_log_ptr;		/* Found new log maybe */
	     else logptr = sys_log_ptr;		/* Anyway, make avail for next time. */
	     if sys_log_file.max = 0 then do;		/* new segment? */
		sys_log_file.max = 2047;		/* 64K segment */
		sys_log_file.lls = xlls;		/* save name of old one */
		call copy_acl_ (dn, on, dn, en, ("0"b), (0));
	     end;
	end;

	if sys_log_file.count >= sys_log_file.max then do;
	     call date_time_ (dtime, timestr);
	     xlls = substr (timestr, 11, 4) || "-" || substr (timestr, 1, 5);
	     call ioa_$rsnnl ("^a.-.^a", on, i, en, xlls); /* Make name for old log. */
	     call hcs_$chname_seg (sys_log_ptr, en, on, ec);
	     if ec ^= 0 then return;			/* can't happen */
	     call hcs_$terminate_noname (sys_log_ptr, ec);
	     go to refind;				/* now make new segment */
	end;

	sys_log_file.count = sys_log_file.count + 1;	/* increase count */
	sys_log_file.ttime = dtime;			/* set last-time-logged */
	i = sys_log_file.count;			/* get into XR */
	sys_log_file.array (i).time = dtime;		/* set time of message */
	sys_log_file.array (i).svty = xsv;		/* ... severity */
	sys_log_file.array (i).line = lin;		/* ... formatted line */

	return;

/* Entry point for testing. */

write_log_test: entry (xdir);

dcl  xdir char (*);

	dn = xdir;

     end write_log_;
