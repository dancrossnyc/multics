/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

tio_:	procedure;				/* dummy tio_, write-around for old tio_ calls */

      dcl p ptr,					/* temporary storage */
	l fixed bin;

      dcl aformat char(2) internal static init("^a");	/* for calls to ioa_ from tio_$write_line */

      dcl ioa_ ext entry,
	(ios_$write_ptr, ios_$read_ptr) ext entry(ptr, fixed bin, fixed bin);

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

write_line:  entry(astring, awl);			/* to write ascii string (w/nl) on user_output */

      dcl astring char(*) aligned,			/* ascii string to be written-out (or read-into) */
	awl fixed bin;

	if awl <= 0  then do;			/* optimize typical case (awl= 0) */
	     call ioa_(aformat, astring);		/* use length(astring) as string length */
	     return;
	     end;
	l= length(astring);				/* here if specific length specified by awl */
	l= min(l, awl);				/* insure l <= length(astring) */
	call ioa_(aformat, substr(astring, 1, l));	/* more expensive call to ioa_ than above */
	return;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

write_string:  entry(astring, awl);			/* to write ascii string (wo/nl) on user_output */

	l= length(astring);				/* compute proper string length */
	if awl >= 0  then l= min(l, awl);		/* for call to ios_$write_ptr */
	p= addr(astring);				/* get pointer to base of string */
	call ios_$write_ptr(p, 0, l);			/* call ios_ to write string on user_output */
	return;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

read_line:  entry(astring, arl, art);			/* to read ascii line (w/nl) from user_input */

      dcl arl fixed bin,				/* max. no. of characters to read into astring */
	art fixed bin;				/* no. of characters actually read into astring */

	l= length(astring);				/* compute proper string length */
	if arl > 0  then l= min(l, arl);		/* for call to ios_$read_ptr */
	p= addr(astring);				/* get pointer to base of string */
	call ios_$read_ptr(p, l, art);		/* read one line from user_input */
	return;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

read_ptr:	entry(workspace,nelem,nelemt);		/* entry equivlaent to ios_$read_ptr */

	dcl workspace ptr,
	    nelem fixed bin,
	    nelemt fixed bin;

	call ios_$read_ptr(workspace,nelem,nelemt);
	return;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

write_ptr: entry(workspace,offset,nelem);		/* entry equivalent to ios_$write_ptr */

	dcl offset fixed bin;

	call ios_$write_ptr(workspace,offset,nelem);
	return;


end tio_;
