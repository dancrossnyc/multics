/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

eval_ec_if_test_: proc(line_ptr,line_length,index_of_bracket,value,code);

dcl	line_ptr ptr;

dcl	code fixed bin(35) aligned;

dcl	(line_length,
	 index_of_bracket,
	 max_com_line
			) fixed bin;

dcl	value char(8) aligned;

dcl	full_command_processor_$get_line ext entry(fixed bin);

dcl	(addr, length, substr, verify) builtin;

		/* Get size of maximum expanded command line */
	code=0;
	call full_command_processor_$get_line(max_com_line);

		/* Enter begin block to allocate space for returned value */
	begin;

dcl	pad bit(1) aligned,
	(i, l) fixed bin;

dcl	(ret_string,
	 workspace
		    ) char(max_com_line) var;

dcl	proc_brackets_$return_value ext entry(ptr,fixed bin,fixed bin,bit(1) aligned,fixed bin,
				        char(*) var,char(*) var,fixed bin(35));

		/* Call part of command processor to evaluate the active function */
	call proc_brackets_$return_value(line_ptr,line_length-1,index_of_bracket-1,pad,max_com_line,
				   ret_string,workspace,code);

	l = length(ret_string);

/* Following code is used to strip off leading blanks from returned value,
   since proc_brackets_ copies original string (blanks in this case) up to the left bracket */

	if l>0 then do;
	     i = verify(ret_string," ");
	     value = substr(ret_string,i,l-i+1);
	end;
	else value = "";
     end;

end eval_ec_if_test_;
