/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

proc_brackets_: proc(inputlinep,inputlinel,brackind,max_com_line,ret_string,workspace,code);

/* initially coded in January 1970 by V. Voydock */
/* Modified to handle recursive active functions correctly in all cases in June
   1971 by V. Voydock */
/* Modified in April 1972 to handle quoted return strings correctly by V. Voydock */
/* Modified in May 1972 as part of fast command loop */

dcl	(inputlinel,
	 brackind,
	 max_com_line,    /* maximum expanded command line size */
	 code,
	 lng,
	 i,
	 should_not_rescan,
	 ind init(brackind),	/* index of bracket in inputline */
	 error_table_$unbalanced_brackets external,
	 error_table_$null_brackets external,
	 error_table_$command_line_overflow external,
	 j,
	 bracketless_str_lng init(0),	/* lng of bracketless string before [ or after ] */
	 built_cline_lng init(1),	/* current lng of bracketless command line being built */
	 first_input_char init(1)		/* index of first input char of current bracket pair */
				) fixed bin;

dcl	(ignoreb init("0"b),
	 not_in_quoted_string
			) bit(1) aligned,
	should_return_value bit(2) aligned;

dcl	(inputlinep,
	 inp init(inputlinep),
	 clinep
		) ptr;

dcl	ret_string char(*) var,   /* string to hold value returned (a parameter)  */
	workspace char(*) var,   /* space in which to store intermediate results */
	comline char(max_com_line) aligned,    /* bracketless command line being built */
	inputline char(inputlinel) based(inp) aligned,
	nch char(1) aligned;

dcl	1 x based(inp) aligned,
	     2 ch(0:31) char(1) unaligned;

dcl	full_command_processor_$ignore_brackets ext entry(ptr,fixed bin,bit(1) aligned,fixed bin),
	full_command_processor_$return_val ext entry(ptr,fixed bin,bit(1) aligned,char(*) var,char(*) var,fixed bin),
	proc_brackets_$return_value ext entry(ptr,fixed bin,fixed bin,bit(1) aligned,fixed bin,
				        char(*) var,char(*) var,fixed bin);

dcl	(addr,mod,substr,divide,index,length) builtin;
/*  */
	code=0;
	should_return_value="00"b;
	
PROCESS_NEXT_BRACKET_PAIR:
	
		/* See if "|[" in input line */
	if ch(ind-1)="|" then  do; ignoreb="1"b; should_not_rescan=1; end;
	else should_not_rescan=0;
	
		/* Calculate lng of  bracketless string before next bracket pair */
	bracketless_str_lng=ind-should_not_rescan-first_input_char+1;
	
		/* Copy the bracketless prefix string into the command line being built */
	call copy_bracketless_string();
	if code^=0 then return;
	
		/* Find the end of the bracket pair being processed */
	call find_matching_right_bracket();
	if code^=0 then return;
	
		/* Calculate the index of the first character of the bracket pair to be evaluated.
		   It must start on a word boundary, so we adjust it if necessary. We then
		   blank out the string which will hold the returned result */
	ind=ind+1;
	i=mod(ind,4);    /* find out if ind points to word boundary */
	if i>0 then substr(inputline,ind-i+1,i)=" ";
	ret_string="";
/*  */
		/* Call command processor to evaluate contents of bracket pair and return value
		   to be inserted in command line being built */
	call full_command_processor_$return_val(addr(ch(ind-i)),j-ind+i,"0"b,ret_string,workspace,code);
	if code^=0 then do; if code=100 then code=error_table_$null_brackets; return; end;
	lng=length(ret_string);

		/* Returned string should be inserted into command line being
		   built without scanning it for brackets */
	if should_not_rescan=1 then go to ADD_STRING_TO_LINE;
	
		/* Returned string should be scanned for brackets.  If any are found
		   they must be evaluated and their value inserted into the command line */

	if index (ret_string, "[") = 0 then goto ADD_STRING_TO_LINE; /* check if there are any brackets at all */
	not_in_quoted_string="1"b;
	do i=1 to lng;
	     nch=substr(ret_string,i,1);
	     if nch="[" then
	  	if not_in_quoted_string then go to BRACKET_FOUND;
		else;
	     else
	     if nch="""" then
		if i=lng then not_in_quoted_string=^not_in_quoted_string;
		else
		if substr(ret_string,i+1,1)="""" then i=i+1;
		else not_in_quoted_string=^not_in_quoted_string;
	end;

		/* There was no bracket in the string returned by the active function */
	go to ADD_STRING_TO_LINE;
	
BRACKET_FOUND:
		/* Allocate space to copy returned string.  */
	begin;

dcl	rescanline char(lng) aligned;

		/* Copy returned string into temporary */
	rescanline=ret_string;
	
		/* Clear old returned string and call proc_brackets recursively
		   to determine value of bracketed string that was returned */
	ret_string="";
	call proc_brackets_$return_value(addr(rescanline),lng-1,i-1,ignoreb,max_com_line,ret_string,workspace,code);
	end;

	lng=length(ret_string);

ADD_STRING_TO_LINE:

	if lng>max_com_line-built_cline_lng+1 then do; code=error_table_$command_line_overflow; return; end;
	substr(comline,built_cline_lng,lng)=ret_string;
	built_cline_lng=built_cline_lng+lng;
/*  */
		/* We have finished evaluating a bracket pair.  Now
		   let us find the next one and process it */
	not_in_quoted_string="1"b;
	do ind=j+1 to inputlinel;
	     nch=ch(ind);
	     if nch="[" then
		if not_in_quoted_string then do; first_input_char=j+2; go to PROCESS_NEXT_BRACKET_PAIR; end;
		else;
	     else
	     if nch="""" then
		if ind=inputlinel then not_in_quoted_string=^not_in_quoted_string;
		else
		if ch(ind+1)="""" then ind=ind+1;
		else not_in_quoted_string=^not_in_quoted_string;
	end;

		/* The end of the input line has been reached */
	first_input_char=j+2;
	bracketless_str_lng=inputlinel-j;

		/* Copy the bracketless suffix string into the command line being built */
	call copy_bracketless_string();
	if code^=0 then return;
/*  */
	/* We have built a command line which either does not contain brackets or
		   contains brackets which should be ignored.  */
	built_cline_lng=built_cline_lng-1;

		/* If the call was via the "return_value" entry, return the
		   command line just built.  This is the case of recursive active functions */
	if should_return_value="11"b then
	     do;
	     iflag=ignoreb;
	     ret_string=substr(comline,1,built_cline_lng);
	     return;
	     end;

		/* Otherwise we call the command processor at the appropriate entry */
	ret_string="";
	clinep=addr(comline);
	if should_return_value then
	call full_command_processor_$return_val(clinep,built_cline_lng,ignoreb,ret_string,workspace,code);
	else
	call full_command_processor_$ignore_brackets(clinep,built_cline_lng,ignoreb,code);
	
	return;


/*  */
		/* This entry is called when a recursive active function is encountered.
		   That is, an active function whose value is another active function.  The
		   parameter iflag is necessary so that this entry can tell its caller if
		   a line containing brackets which are to be ignored is being returned.
	   	   For example if "[f]" returns the value "[h]" which returns the value "|[g]" */

return_value: entry(inputlinep,inputlinel,brackind,iflag,max_com_line,ret_string,workspace,code);

dcl	iflag bit(1) aligned;

	code = 0;

	should_return_value="11"b;	go to PROCESS_NEXT_BRACKET_PAIR;



		/* This entry is called by full_command_processor_$return_val if a nested bracket
		   is encountered.  For example the line "[F x [g y] ]"
		   It builds a bracketless command line by evaluating all the nested brackets.
		   It then evaluates this command line and returns its value to its caller.  In
		   the example, suppose "[g y]" returns the value "foo" and suppose
		   [f x foo] returns the value "hello", then nested_brackets will return
		   the value "hello" to return_val */
nested_brackets: entry(inputlinep,inputlinel,brackind,max_com_line,ret_string,workspace,code);

	code = 0;

	should_return_value="01"b;  go to PROCESS_NEXT_BRACKET_PAIR;
/*  */
		/* Internal procedure to copy bracketless strings into command line being built */
copy_bracketless_string: proc;

	if bracketless_str_lng>max_com_line-built_cline_lng+1 then 
	     do;
	     code=error_table_$command_line_overflow;
	     return;
     	     end;
	
	substr(comline,built_cline_lng,bracketless_str_lng)=substr(inputline,first_input_char,bracketless_str_lng);
	built_cline_lng=built_cline_lng+bracketless_str_lng;

end copy_bracketless_string;
/*  */
		/* Internal procedure to find the right bracket which matches the left bracket of the
		   active string being processed */
find_matching_right_bracket: proc;

dcl	(lcnt,
	 rcnt
		) fixed bin initial(0);
	not_in_quoted_string="1"b;
	
	do j=ind+1 to inputlinel;
	     nch=ch(j);
	     if nch="]" then
		if not_in_quoted_string then
		     if lcnt=rcnt then return;
		     else rcnt=rcnt+1;
		else;
	     else
	     if nch="[" then
		if not_in_quoted_string then lcnt=lcnt+1;
		else;
	     else
	     if nch="""" then
		if j=inputlinel then not_in_quoted_string=^not_in_quoted_string;
		else
		if ch(j+1)="""" then j=j+1;
		else not_in_quoted_string=^not_in_quoted_string;
	end;
	
	code=error_table_$unbalanced_brackets;	/* Brackets do not balance */
	return;


end find_matching_right_bracket;

end proc_brackets_;
