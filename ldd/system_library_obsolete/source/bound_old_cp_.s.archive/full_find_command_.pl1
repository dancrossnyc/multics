/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

full_find_command_:  proc(am_ptr,comp,coml,entry_point_ptr,code);


/* find_command_ ..... standard service subroutine to return a pointer to a command entry point,
	given the command name as it originally appeared in the command line. */

/* Initial coding by R. C. Daley,December 1969 */
/* modified on June 23,1970 at 3:35 P. M. by V. Voydock */
/* Modified in November 1971 by V. Voydock to not blow up if a command of the form
   "name is typed, to force pathnames to override previously known reference names,
   and to make the code more readible */

/* Modified in May 1972 by V. Voydock as part of the fast command loop */
/* Modified 6/24/76 by S. Herbst to fix bugs */



/* ******************************************************************************************************* 
	 N_O_T_E_: The case of a pathname being passed (ie pointed to by "comp") is not as simple as it
	   may seem.  Let X be the reference name (i. e. entry name) portion of the pathname.
	   Several cases may occur.  The segment whose pathname was passed may already be known
	   to the process (either by the reference name X or another reference name), or another
	   segment may be known to the process by the reference name X, or X may not be known to the
	   process.  In _a_l_l cases, the name X may or may not exists in the AM.  This procedure has been
	   carefully coded to account for all these cases.  It should not be changed casually 
 ******************************************************************************************************* */




dcl	(comp,
	 p,
	 entry_point_ptr,
	 am_ptr,
	 oldp,
	 cp
		) ptr;

dcl	(coml,
	 command_length,
	ename_length,
	 entry_index initial(0),
	 entry_length initial(0),
	 oldu,
	 aml int static initial(9),		/* Size of associative memory */
	 i,
	 j
		   ) fixed bin;
/*  */
dcl	(pathname_given,
	 print_message,
	 am_entry_exists,
	 term_called,
	 pathname_error
			) bit(1) aligned init("0"b);

dcl	1 w aligned,				/* temporary for high speed comparison */
	     2 (c1,c2,c3,c4) fixed bin(71),		/* of command name (char(32)),*/
	     2 (s1,s2,s3,s4) fixed bin(71);		/* and entry name (char(32)). */

dcl	1 cs based(cp) aligned,			/* dcl for initialization of above structure */
	     2 command char(32),
	     2 entry char(32);


dcl	1 am(0:9) based(am_ptr) aligned,		/* declaration of associative memory */
	     2 command(2) fixed bin(71),			/* space for command name */
	     2 entry_point_ptr ptr,				/* pointer to command entry */
	     2 usage fixed bin;			/* usage indicator */

dcl	1 ame based(p) aligned,			/* based declaration for entry of assoc. mem. */
	     2 command char(16),
	     2 entry_point_ptr ptr,
	     2 usage fixed bin;



dcl	1 aw based(p) aligned,			/* dcl for associative memory lookup */
	     2 (c1,c2) fixed bin(71);		/* command name (char(32)) */

dcl	name char(168) based(p) unaligned,		/* based dcl for pickup of command name */
	dname char(168),				/* for pickup of expanded directory name */
	buffer char(168),				/* for ename (which might be >32) */
	nch char(1) aligned,
	cname char(coml) based(comp),			/* name to be printed on error */
	ch(0:167) char(1) unaligned based(p);

dcl 	SPACE char(2) int static options(constant) init("	 ");  /* blank and tab */

dcl	code fixed bin(35) aligned;

dcl	error_table_$seg_not_found fixed bin(35) ext,	/* standard error codes used by find_command_ */
	error_table_$namedup fixed bin(35) ext,
	error_table_$segknown fixed bin(35) ext,
	error_table_$bad_command_name fixed bin(35) ext,
	error_table_$dirseg fixed bin(35) ext,
	error_table_$entlong fixed bin(35) ext,
	error_table_$noentry fixed bin(35) ext,
	error_table_$no_ext_sym fixed bin(35) ext;

dcl	expand_pathname_ entry(char(*),char(*),char(*),fixed bin(35)),
	term_$no_clear ext entry(char(*) aligned,fixed bin(35)),
	hcs_$initiate ext entry(char(*) aligned,char(*) aligned,char(*) aligned,fixed bin,fixed bin,ptr,fixed bin(35)),
	hcs_$make_ptr ext entry(ptr,char(*) aligned,char(*) aligned,ptr,fixed bin(35)),
	(com_err_,
	 com_err_$suppress_name
				) external entry options(variable);

dcl	(addr, index, length, null, rtrim, substr, verify) builtin;
/*  */
	print_message="1"b;  go to START;

fc_no_message: entry(am_ptr,comp,coml,entry_point_ptr,code);  /* for the use of find_command_$fc_no_message */

	print_message = "0"b;
	go to START;

fc_print_message: entry(comp,coml,entry_point_ptr,code);	/* this was put in for the use of init_admin */

	print_message="0"b;

START:	if cname=">" then do;			/* command name ">" */
	     code = error_table_$dirseg;
	     go to ERROR;
	end;
	if verify(cname,SPACE)=0 then do;		/* blank command name */
BLANK:	     if print_message then call com_err_(0,"command_processor_","Blank command name.");
	     code = error_table_$seg_not_found;
	     return;
	end;
	p = comp;
	command_length=coml;

		/* Look for pathname and for entry name explicitly specified (i. e. "$") */
	do i=0 to command_length-1;
	     nch=ch(i);
	     if nch=">"  then pathname_given="1"b;
	     if nch="<"  then pathname_given="1"b;
	     if nch="$" then
		do;
		command_length=i;				/* if entry found,adjust command name length */
		if command_length=0 then  do; code=error_table_$bad_command_name; go to ERROR; end;
		entry_index=command_length+2;			/* locate first character of entry */
		entry_length = length(rtrim(cname))-entry_index+1;  /* get length of entry name */
		if entry_length=0 then do;
ENTNULL:		     code = error_table_$bad_command_name;
		     go to ERROR;
		end;
		if verify(substr(cname,i+2),SPACE)=0 then  go to ENTNULL;
		if entry_length>length(cs.entry) then do;
		     buffer = substr(cname,i+1,entry_length);
ENTLONG:		     code = error_table_$entlong;
		     if print_message then call com_err_(code,"command_processor_","^a",buffer);
		     return;
		end;
		go to FIND_IT;			/* skip out of character scan */
		end;
	end;


		/* If a pathname was passed, convert it to an absolute pathname. Otherwise,
		   pick up the simple command name */
FIND_IT:	cp=addr(w);
	if pathname_given  then 
	     do;
	     call expand_pathname_(substr(name,1,command_length),dname,buffer,code);
	     if code^=0 then go to ERROR;
	     end;
	else buffer = substr(p->name,1,command_length);
	if verify(buffer,SPACE)=0 then go to BLANK;
	ename_length = length (rtrim (buffer));
	if ename_length > length(cs.entry) then go to ENTLONG;
	cp -> cs.command = buffer;

		/* Now store away the entry name if one was specified. Otherwise the
		   entry name is the same as the command name */
	if entry_index^=0  then cp->cs.entry=substr(p->name,entry_index,entry_length);
	else  cp->cs.entry=cp->cs.command;

		/* If a pathname was passed, initiate it to override the search rules (i. e. "initiated_segments"
		   is the first thing in the search rules). If another segment is already known by the
		   same reference name, we terminate it (and remove it from the AM if it is there) */
	if pathname_given then
	     do;
LOOP:	     call hcs_$initiate((dname),cp->cs.command,cp->cs.command,0,0,p,code);
	     if code^=0 then
		do;
		if code=error_table_$segknown then go to SEARCH_AM;
		if term_called then  do; pathname_error="1"b; go to SEARCH_AM; end;
		if code^=error_table_$namedup then go to ERROR;
		call term_$no_clear(cp->cs.command,code);
		if code^=0 then go to ERROR;
		term_called="1"b;
		go to LOOP;
		end;
	     end;
/*  */
SEARCH_AM:
	if (ename_length>16) | (nch="$") then go to CALL_MP;

		/* Search associative memory for command/entry name match.  The comparison
		   is made using based fixed bin(71) variables to maximize the
		   efficiency of the search.  If a match is found and the command was
		   specified by a pathname, then the pathname must overide the associative memory.
		   That is, the AM entry of the old segment is replaced by
		   a pointer to the segment specified by the pathname */
	oldu=aml+1;
	do i=0 to aml;
	     p=addr(am(i));
	     if p->aw.c1^=w.c1  then go to SKIP;
	     if p->aw.c2^=w.c2  then go to SKIP;
	     p->ame.usage=aml+1;			/* entry found,indicate recent usage */
	     entry_point_ptr=p->ame.entry_point_ptr;			/* pick up command entry pointer */

	     do j=i+1 to aml;			/* decrement usage for remaining AM entries */
		am(j).usage=am(j).usage-1;
	     end;

	     if pathname_given then			/* pathname overrides AM */
		do;
		oldp=p;
		if pathname_error then go to CLEAR_AME;		/* have found entry to clear */
		am_entry_exists="1"b;
		go to CALL_MP;
		end;

	     code=0;				/* set return status code for successful return */
	     return;

SKIP:	     p->ame.usage=p->ame.usage-1;		/* this AM entry does not match,decrement usage */
	     if p->ame.usage<oldu  then		/* is this the least used entry seen so far? */
		do;
		oldu=p->ame.usage;			/* if so,remember this entry */
		oldp=p;
		end;
	end;

		/* Command was not found in associative memory.  We must try to snap a link to it */
CALL_MP:	call hcs_$make_ptr(null,cp->cs.command,cp->cs.entry,entry_point_ptr,code);
	if code^=0 then  do; if am_entry_exists then go to CLEAR_AME; go to ERROR; end;

		/* If linking was successful and command name is of correct form, put it in AM */
	if ename_length<17 then
	     if nch^="$" then
		do;
		oldp->ame.command=cp->cs.command;
		oldp->ame.entry_point_ptr=entry_point_ptr;
		oldp->ame.usage=aml+1;
		end;
	return;					/* return control to caller */
/*  */
CLEAR_AME:
	oldp->aw.c1,oldp->aw.c2=0;

ERROR:	entry_point_ptr=null;

		/* Do not print error message if called at fc_no_message entry */
	if print_message then
	     do;
	     if code=error_table_$seg_not_found  then 	/* check for segment not found */
NO_SEG:		call com_err_$suppress_name(0,"command_processor_","Segment ^R^a^B not found.",cp->cs.command);
	     else
	     if code=error_table_$noentry then go to NO_SEG;
	     else
	     if code=error_table_$no_ext_sym  then	/* check for entry not found */
		call com_err_$suppress_name(0,"command_processor_","Entry point ^R^a^B not found in segment ^R^a^B."
				        ,cp->cs.entry,cp->cs.command);
	     else
	     call com_err_(code,"command_processor_","^R^a^B",cname);
	     end;

end  full_find_command_;
