/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

proc_parens_: proc(input_linep,input_line_lng,last_char_of_iter_set,atomp,atom_buffer_lng,atom_lng,first_call,code);

/* initially coded in January 1970 by V. Voydock */
/* modified on February 12, 1970 at 9:15 P. M. by V. Voydock */
/* modified to accept new quoting convention and to not expect lines to end
   with a new line char in June 1971 by V. Voydock */
/* Extensively reorganized for clarity (taking advantage of fast internal procedures in version 2 pl1)
   and to fix bug which caused quoted strings to be occasionally ignored in March 1972 by V. Voydock */
/* EIS version S. Herbst 3/4/74 */

dcl	(input_line_lng,		/* length of input line to be processed (INPUT) */
	 last_char_of_iter_set,	/* index of first char to be scanned when control returns to caller (OUTPUT) */
	 atom_buffer_lng,		/* amt of space avail. to store atom being built by this proc (INPUT) */
	 atom_lng,		/* length of atom built by this procedure (OUTPUT) */
	 end_of_simple_head,	/* index of first char after the end of the simple head (e.g. in (a b)
				   the space immediately following the "a". In (asd(1 2) z) the "("
				   immediately following the "d" */
	 first_nonblank,		/* index of first nonblank character in input line */
	 j,k,			/* Temporary variables */
	 last_char_of_head,		/* index of the last char in the head of the iteration set. (e. g. in
				   (a(b d) def)x"y"(1 2) the head is (a(b d) def) the tail x"y"(1 2) */
	 end_of_simple_tail,	/* index of first char after simple tail (e. g. in (a b)DEF; the ";"
				   in  (a b)DEF(1 2)  the "(" immediately after the F */
	 first_char initial(1),	/* index of first char being processed (value changes during processing) */
	 last_char_of_atom,		/* index of current last character in atom being built */
	 simple_tail_lng,		/* length of simple tail part. In   (a b)DEF"a c"    DEF is s. t. p. */
	 right_paren_cnt,		/* count of number of right parenthesis seen */
	 left_paren_cnt		/* count of number of left parentheses seen */
						) fixed bin aligned;

dcl	(code,
	 error_table_$mismatched_iter external,
	 error_table_$unbalanced_parentheses external
				) fixed bin(35) aligned;

dcl	(in_quoted_string initial("0"b),	/* True if char being scanned is inside quoted string */
	 nonsimple_tail initial("0"b),	/* Indicates (a b)DE"1 2" or (a b)DE(1 2) as opposed to (a b)DE */
	 quote_inside_parens initial("0"b),	/* Indicates ("ABC") as opposed to (ABC)"DEF" */
	 paren_inside_parens initial("0"b),	/* Indicates ( a(b c)) as opposed to (a b)(d e) */
	 attached_iter_set,			/* True if case (a(b ...) ...) or (a ...)bcd(q ...)  */
	 first_call			/* True if this is first time procedure was called for this line */
				) bit(1) aligned;

dcl	(input_linep,		/* pointer to input line to be processed (INPUT) */
	 atomp			/* pointer to space in which to store atom being built (INPUT) */
		) ptr aligned;

dcl	input_line char(input_line_lng+1) based(input_linep),	/* based structure to reference input */
	atom char(atom_buffer_lng) based(atomp),		/* based string to reference atom */
	ch(0:31) char(1) unaligned based(input_linep),		/* based array to get single chars of input */
	nch char(1) aligned,				/* character currently being scanned */
	nl char(1) aligned internal static initial("
");			/* new line character */

dcl	(addr,search,substr) builtin;
/*  */
	code=0;
	
		/* If this is first invocation search for "[" in input line.  Otherwise the case
		   "(a b)  [f x]" will not work. We search to first ";" or to end */
	if first_call then if search(input_line,"[]")^=0 then call check_for_bracket;
	if code^=0 then return;
	
START:	last_char_of_atom=0;
	attached_iter_set="0"b;
	
		/* Skip leading blanks */
	do first_nonblank=first_char to input_line_lng while(ch(first_nonblank)=" "); end;
	
		/* Build "atom" to be returned */
	end_of_simple_head = search(substr(input_line,first_nonblank+1,input_line_lng-first_nonblank+1)," ();""
");
	if end_of_simple_head=0 then go to UNBALANCED_PARENS;
	end_of_simple_head = end_of_simple_head + first_nonblank - 1;
	     nch=ch(end_of_simple_head);
	     if nch=" " then		/* Case:   (ab_ ...) where "_" represents a blank */
		do;
		first_char=end_of_simple_head+1;
		call find_matching_right_paren;
		if code^=0 then return;
		last_char_of_atom=end_of_simple_head-first_nonblank;
		go to END_PAREN_PAIR;
		end;
	     if nch=")" then
		do;
		nch=ch(end_of_simple_head-1);
		if nch=" " then go to NULL_ITER_SET;		/* Case:   (     ) */
		if nch="(" then go to NULL_ITER_SET;		/* Case:   () */
		last_char_of_head=end_of_simple_head;		/* Case: (  ab) */
		last_char_of_atom=end_of_simple_head-first_nonblank;
		go to END_PAREN_PAIR;
		end;
	     if nch="(" then		/* Case:   (ab( ... ) ... )    */
		do;
		attached_iter_set,paren_inside_parens="1"b;
PROC_SPEC_CHAR:	last_char_of_atom=end_of_simple_head-first_nonblank;
		call process_special_char(end_of_simple_head);
		quote_inside_parens,paren_inside_parens="0"b;
		if code=-1 then  do; code=0; go to START; end;	/* Case:   (ab(   ) ... ) */
		if code^=0 then return;
		call find_matching_right_paren;
		if code^=0 then return;
		go to END_PAREN_PAIR;
		end;
	     if nch="""" then do; quote_inside_parens="1"b; go to PROC_SPEC_CHAR; end;	/* Case:   ("a"...) */
	     if nch=";" then go to UNBALANCED_PARENS;
	     if nch=nl then go to UNBALANCED_PARENS;

/*  */
END_PAREN_PAIR:
	
		/* Process the "tail". e. g. in  "(a b c(d e))fg(h k)" the
	 	   tail is "fg(h k)"    */
	end_of_simple_tail = search(substr(input_line,last_char_of_head+2,input_line_lng-last_char_of_head)," ();""
");
	if end_of_simple_tail=0 then do;
	     end_of_simple_tail = input_line_lng + 1;
	     go to DO_TAIL;
	end;
	end_of_simple_tail = end_of_simple_tail + last_char_of_head;
	     nch=ch(end_of_simple_tail);
	     if nch=" " then go to DO_TAIL;	/* Case:   (a b)de_   where "_" represents a blank */
	     if nch=";" then go to DO_TAIL;	/* Case:   (a b)de;   */
	     if nch=nl then go to DO_TAIL;	/* Case:   (a b)de%   where "%" represents a new line character */
	     if nch=")" then go to DO_TAIL;	/* Case:   ((a b)de(f g))   */
	     if nch="(" then do; nonsimple_tail="1"b; go to DO_TAIL; end;	/* Case:   (a b)de(f g)   */
	     if nch="""" then do; nonsimple_tail="1"b; go to DO_TAIL; end;	/* Case:   (a b)de"xyz"   */

		/* Calculate the length of tail before first special character */
DO_TAIL:	simple_tail_lng=end_of_simple_tail-last_char_of_head-1;
	
		/* Copy simple portion of the tail (if any) into the atom being built. (e. g. in
		   (a b)DEF"1 2" then tail is DEF"1 2" and the simple portion of the tail is DEF   ) */
	if simple_tail_lng^=0 then
	     do;
	     substr(atom,last_char_of_atom+1,simple_tail_lng)=substr(input_line,last_char_of_head+2,simple_tail_lng);
	     last_char_of_atom=last_char_of_atom+simple_tail_lng;
	     end;

		/* If the tail has a special character in it (e.g. (a b)DEF"1 2" or (a b)DEF(1 2)   )
		   then call subroutine to process it */
	if nonsimple_tail then do; call process_special_char(end_of_simple_tail); if code^=0 then return; end;
	else first_char=end_of_simple_tail;

		/* Now fill in the part of the atom which appears before the first special character. (e g.
	  	   in  (ASDF"1 2")qwer  fill in ASDF. Blank it out in the input line unless it is attached
		   to another iteration set (e. g. in  (a b(de fgh)) the "a" is not attached
		   and the "b" is.  Set variables indicating no errors, the length of the atom being returned,
		   and where the caller should continue the scan of the input line, and return. */
	k=end_of_simple_head-first_nonblank;
	if k>0 then do; substr(atom,1,k)=substr(input_line,first_nonblank+1,k);
	if ^attached_iter_set then substr(input_line,first_nonblank+1,k)=" "; end;
	last_char_of_iter_set=first_char;
	atom_lng=last_char_of_atom;
	code=0;
	return;


UNBALANCED_PARENS:	code=error_table_$unbalanced_parentheses;
		return;
/*  */
		/* We are processing a null iteration set */
NULL_ITER_SET:  left_paren_cnt,right_paren_cnt=0;
	      in_quoted_string="0"b;
	      code=103;

		/* Find end of null iteration group.  i. e. we are cleaning up a case of the
		   ... (       )bc"d e;"( a) ...  The variable "in_quoted_string" indicates
		   that we are inside a quoted string and that characters which otherwise would
		   terminate the scan or indicate an error condition should be treated as ordinary characters */
	do k = end_of_simple_head+1 to input_line_lng;
	     nch=ch(k);
	     if nch=" " then
	          do;
	          if in_quoted_string then go to END_LOOP;	/* case:  (      )"abc def"   */
	          if left_paren_cnt=right_paren_cnt then go to END_NULL_ITER_SET;
	          end;
	     else  
	     if (nch=";") | (nch=nl) then 
		do;
		if in_quoted_string then go to END_LOOP;	/* case:  (    )";"  or  (    )"nl"     */
		go to END_NULL_ITER_SET;
		end;
	     else   
	     if nch="""" then
		if k=input_line_lng then in_quoted_string=^in_quoted_string;
		else
		if ch(k+1)="""" then k=k+1;
		else in_quoted_string=^in_quoted_string;
	     else   
	     if nch=")" then
		do;
		if in_quoted_string then go to END_LOOP;	/* case:  (   )")"    */
		if left_paren_cnt=right_paren_cnt then go to END_NULL_ITER_SET;	/* case    (    ))
							   e. g. in atom of form:   (((   ))  abc)  */
		right_paren_cnt=right_paren_cnt+1;
		end;
	     else   
	     if nch="(" then
		do;
		if in_quoted_string then go to END_LOOP;	/* case  (    )"("   */
		left_paren_cnt=left_paren_cnt+1;
		end;
	     else   
	     if left_paren_cnt^=right_paren_cnt then		/* case:   (ab(   )XY(1 2))  */
		do;
		code=error_table_$mismatched_iter;
		return;
		end;
END_LOOP: end;
	
		/* We have found the end of the null iteration set */
END_NULL_ITER_SET:	last_char_of_iter_set=k;
		return;
/*  */
		/* Internal procedure to find the matching right parenthesis in the iteration
		   set we are now processing */
find_matching_right_paren: proc;


	left_paren_cnt,right_paren_cnt=0;
	last_char_of_head = first_char-1;
FIND_LOOP:j = last_char_of_head;
	last_char_of_head = search(substr(input_line,j+2,input_line_lng-j),"();""
");
	if last_char_of_head=0 then go to BAD;
	last_char_of_head = last_char_of_head + j;
	     nch=ch(last_char_of_head);
	     if nch=")" then
		if ^in_quoted_string then
		     if left_paren_cnt=right_paren_cnt then return;
		     else right_paren_cnt=right_paren_cnt+1;
		else;
	     else   
	     if nch="(" then
		if ^in_quoted_string then left_paren_cnt=left_paren_cnt+1;
		else;
	     else
	     if (nch=";") | (nch=nl) then
		if ^in_quoted_string then go to BAD;
		else;
	     else
	     if nch="""" then
		if last_char_of_head=input_line_lng then in_quoted_string=^in_quoted_string;
		else
		if ch(last_char_of_head+1)="""" then last_char_of_head=last_char_of_head+1;
		else in_quoted_string=^in_quoted_string;
	if last_char_of_head < input_line_lng then go to FIND_LOOP;

BAD:	code=error_table_$unbalanced_parentheses;
	return;


end find_matching_right_paren;
/**/
		/* Internal procedure to search command line for a left bracket */

check_for_bracket: proc;

dcl	error_table_$unbalanced_brackets external fixed bin(35) aligned;



	     k = 0;
    CHECK_LOOP:j = k;
	     k = search(substr(input_line,j+2,input_line_lng-j),"[];""
");
	     if k=0 then return;
	     k = k+j;
	     nch=ch(k);
	     if nch="""" then
		if k=input_line_lng then in_quoted_string=^in_quoted_string;
		else
		if ch(k+1)="""" then k=k+1;
		else in_quoted_string=^in_quoted_string;
	     else   
	     if nch="[" then
		if ^in_quoted_string then   do; last_char_of_iter_set=k; code=102; return; end;
		else;
	     else
	     if (nch=";") | (nch=nl) then
		if ^in_quoted_string then return;
		else;
	     else
	     if nch="]" then
		if ^in_quoted_string then  do; code=error_table_$unbalanced_brackets; return; end;
	     if k < input_line_lng then go to CHECK_LOOP;

end check_for_bracket;
/*  */
		/* Internal procedure to process quoted strings and iteration sets
		   encountered while processing this iteration set */
process_special_char: proc(special_char_index);

dcl	(startp,
	 atmp
		) ptr aligned;

dcl	(special_char_index,
	 atoml,
	 lng,
	 inl_left
		) fixed bin aligned;

dcl	(proc_parens_,
	 proc_quotes_
			) ext entry(ptr,fixed bin,fixed bin,ptr,fixed bin,fixed bin,bit(1) aligned,fixed bin(35));


		/* Set up arguments with which to call special syntatic subroutines */
	startp=addr(ch(special_char_index));
	atmp=addr(atomp->ch(last_char_of_atom));
	atoml=atom_buffer_lng-last_char_of_atom;
	inl_left=input_line_lng-special_char_index;
	
	if nch="(" then call proc_parens_(startp,inl_left,first_char,atmp,atoml,lng,"0"b,code);
	else call proc_quotes_(startp,inl_left,first_char,atmp,atoml,lng,"0"b,code);
	
	if nch="""" then
	     if quote_inside_parens then
		if code=101 then do; attached_iter_set="1"b; code=0; end;  /* case ("ab"(d qwe)) */
		else
		if code=103 then paren_inside_parens="1"b;	/* case  ("ab"(   ))  */
		else
		substr(input_line,end_of_simple_head+1,first_char)=" ";	/* case ("a" de) or ("a"2 def) */
	     else
	     if code=101 then code=0;		/* case (a b)"def"  */
	
	if code^=0 then
	     if code^=103 then return;
	     else   
	     if paren_inside_parens then	/* Case: (ab( )  d)   We must blank out used up set, i.e. ab( ) */
		do;
		substr(input_line,first_nonblank+1,first_char+end_of_simple_head-first_nonblank)=" ";
		code=-1;
		return;
		end;
	     else do; code=error_table_$mismatched_iter; return; end; 	/* case  (ab(cd er)d(  )  z)  */
	
	first_char=first_char+special_char_index;
	last_char_of_atom=last_char_of_atom+lng;
	
	return;


end process_special_char;

end proc_parens_;
