/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

decam:	dcm:	procedure;

/*	"Desk Calculator with Memory"		*/
/*	Transcribed from the CTSS MAD version,	*/
/*	J. H. Saltzer, May, 1969.		*/


declare	buffer	character(40) init("Go
"),
	status	bit(72) aligned,
	char	character(1),
	digno	fixed,
	eof	bit(1),
	int	fixed binary(35),
	intlist	character(20)	internal	static	initial("0123456789abcdefghij"),
	k	fixed binary(35),
	length	fixed,
	lhs	fixed binary(35),
	lnct	fixed,
	nl	character(1)	internal	static	initial("
"),							/*  New line character literal.  */
	op	character(1),
	reg(0:10)	fixed binary(35),
	reglist	character(8)	internal	static	initial("stuvwxyz"),
	rhs	fixed binary(35),
	rlength	fixed bin,
	scan	entry		internal,
	size	fixed,
	temp	fixed binary(35);

declare   ios_$write_ptr ext entry(ptr,fixed bin,fixed bin),
	ios_$read_ptr ext entry(ptr,fixed bin,fixed bin),
	ios_$resetread ext entry(char(*),bit(72) aligned),
	com_err_ ext entry options(variable);



/*  . . . Program . . . . . . . . . . . . . . . . . . . */

	reg(0) = 0;			/*  Initialize automatic variable.  */
	reg(1) = 10;			/*  Initial value for radix.  */
	call ios_$write_ptr(addr(buffer),0,3);
 
rdlp:	call ios_$read_ptr(addr(buffer),40,rlength);
	length = rlength - 1;		/*  "length" does not include carriage return.  */
	lnct = 0;
	eof = "0"b;

/*	Evaluate left hand side of input.  */

	call scan;
	if eof then go to rdlp;		/*  Ignore blank line.  */
	lhs = index(reglist, char);
	if lhs > 0 then call scan;
	if eof then go to err;		/*  Complain about ill-constructed line.  */

/*	Save operator.	*/

	op = char;

/*	Evaluate right hand side of input	*/

	call scan;
	if eof then rhs = reg(0);
		else do;	rhs = index(reglist, char);	/*  rhs temporarily contains lvalue.  */
			if rhs = 0 then do while (^eof);	/*  Non-register, evaluate literal.  */
				int = index(substr(intlist, 1, reg(1)), char) - 1;
				if int = -1 then go to err;
				rhs = rhs*reg(1) + int;
				call scan;
				end;
			else rhs = reg(rhs);		/*  now rhs contains rvalue.  */
			end;

/*	Perform requested operation.	*/

	if op = "+"
		then reg(0) = reg(lhs) + rhs;
	else if op = "-"
		then reg(0) = reg(lhs) - rhs;
	else if op = "/"
		then if rhs = 0 then do;
div_err:			call com_err_(0,"decam","I can't divide by zero.");
			call ios_$resetread("user_input",status);
			go to rdlp;
			end;
		else reg(0) = divide(reg(lhs), rhs, 35, 0);
	else if op = "%"
		then if reg(lhs) = 0 then go to div_err;
		else reg(0) = divide(rhs, reg(lhs), 35, 0);
	else if op = "*"
		then reg(0) = reg(lhs) * rhs;
	else if op = "="
		then do;
		if lhs = 1 then if (rhs<2) | (rhs>20) then do;
			call com_err_(0,"decam","Radix out of range.");
			call ios_$resetread("user_input",status);
			go to rdlp;
			end;
		reg(lhs) = rhs;		/*  Perform storage requested.  */
		end;
	else if op = "p"
		then go to print;
	else if op = "q"
		then return;		/*  Quit request, return to command level.  */
	else do;
err:		call com_err_(0,"decam","Illegal request ^a",substr(buffer,1,rlength));
		call ios_$resetread("user_input",status);
		end;
	go to rdlp;

print:	k = abs(rhs);
	buffer = nl;
	do size = 0 by 1 while ((k>0)|(size=0));
		temp = divide(k,reg(1), 35, 0);
		digno = k-temp*reg(1) + 1;			/*  Compute which digit wanted.  */
		buffer = substr(intlist,digno,1)||buffer;	/*  Pick output digit.  */
		k = temp;
		end;
	if rhs < 0 then do; buffer = "-"||buffer;
			size = size + 1;
			end;
	substr(buffer,size+2,1) = "
";
	call ios_$write_ptr(addr(buffer),0,size+2);
	go to rdlp;


/*	"scan" is an internal subroutine which pushes the
	index "lnct" to the next non-blank character in the input
	line, or sets "eof" if the end of line is reached.	*/

scan:	procedure;
scnlp:	if lnct >= length then do;
		eof = "1"b;
		return;
		end;
	lnct = lnct + 1;
	char = substr(buffer,lnct,1);
	if char = " " then go to scnlp;	/*  Skip over all blanks.  */
	end scan;
end dcm;
