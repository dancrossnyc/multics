02/08/88  Introduction to CURSES

This is an introduction to CURSES and TERMINFO.  It is intended for
the programmer who must write a screen-oriented program using the
CURSES package.

For CURSES to be able to produce terminal dependent output, it has to
know what kind of terminal you have.  The UNIX system convention for
this is to put the name of the terminal in the variable TERM in the
environment.  Thus, a user on a DEC VT100 would set TERM = vt100 when
logging in.  CURSES uses this convention.


Output:

A program using CURSES always starts by calling initscr( ).  (See
Figure 12-1.) Other modes can then be set as needed by the program.
Possible modes include cbreak( ), and idlok(stdscr,TRUE).  These
modes will be explained later.  During the execution of the program,
output to the screen is done with routines such as addch(ch) and
printw(fmt,args).  (These routines behave just like putchar and
printf except that they go through CURSES.) The cursor can be moved
with the call move(row,col).  These routines only output to a data
structure called a window, not to the actual screen.  A window is a
representation of a CRT screen, containing such things as an array of
characters to be displayed on the screen, a cursor, a current set of
video attributes, and various modes and options.  You don't


need to worry about windows unless you use more than one of them,
except to realize that a window is buffering your requests to output
to the screen.

To send all accumulated output, it is necessary to call refresh( ).

(This can be thought of as a flush.) Finally, before the program
exits, it should call endwin ( ), which restores all terminal
settings and positions the cursor at the bottom of the screen.


_____________________________________________________________

#include <CURSES.h>
...
	initscr();  /*  Initialization  */

	cbreak(); /* Various optional mode settings  */
	nonl() ;
	noecho();
...
	while (!done)  {/* Main body of program */
	    ...
	    /* Sample calls to draw on screen  */
	    move (row, col);


	    addch(ch);
	    printw("Formatted print with value %d\n", value);
	    ...
	    /* Flush output */
	    refresh();
	    ...
	}

	endwin(); /* Clean up */
	exit (0);

	Figure 12-1  Framework of a CURSES Program
_____________________________________________________________


Some programs assume all screens are 24 lines by 80 columns.  It is
important to understand that many are not.  The variables LINES and
COLS are defined by initscr with the current screen size.  Programs
should use them instead of assuming a 24x80 screen.

No output to the terminal actually happens until refresh is called.
Instead, routines such as move and addch draw on a window data
structure called stdscr (standard screen).  CURSES always keeps track
of what is on the physical screen, as well as what is in stdscr.


When refresh is called, CURSES compares the two screen images and
sends a stream of characters to the terminal that will turn the
current screen into what is desired.  CURSES considers many different
ways to do this, taking into account the various capabilities of the
terminal, and similarities between what is on the screen and what is
desired.  It usually outputs as few characters as is possible.  This
function is called cursor optimization and is the source of the name
of the CURSES package.

Note, due to the hardware scrolling of terminals, writing to the
lower right-hand character position is impossible.


Input:

CURSES can do more than just draw on the screen.  Functions are also
provided for input from the keyboard.  The primary function is
getch() which waits for the user to type a character on the keyboard,
and then returns that character.  This function is like getchar
except that it goes through CURSES.  Its use is recommended for
programs using the cbreak() or noecho() options, since several
terminal or system dependent options become available that are not
possible with getchar.

Options available with getch include keypad which allows extra keys
such as arrow keys, function keys, and other special keys that
transmit escape sequences, to be treated as just another key.  (The
values returned for these keys are listed below.) KEY_LEFT in


CURSES.h.  The values for these keys are over octal 400, so they
should be stored in a variable larger than a char.) nodelay mode
causes the value -1 to be returned if there is no input waiting.
Normally, getch will wait until a character is typed.  Finally, the
routine getstr(str) can be called, allowing input of an entire line,
up to a new line.  This routine handles echoing and the erase and
kill characters of the user.  Examples of the use of these options
are in later example programs.

The following function keys might be returned by getch if keypad has
been enabled.  Note that not all of these are currently supported,
due to lack of definitions in terminfo or the terminal not
transmitting a unique code when the key is pressed.


Name		     Value     Key name

KEY_BREAK		     0401      Break key(unreliable)
KEY_DOWN		     0402	     The four arrow keys...
KEY_UP		     0403
KEY_LEFT		     0404
KEY_RIGHT	               0405      ...
KEY_HOME		     0406	     Home key (upward+left arrow)
KEY_BACKSPACE	     0407	     Backspace (unreliable)
KEY_F0		     0410	     Function keys. Space for 64 keys
			     is reserved.


KEY_F(n)          KEY_F0+(n))      Formula for fn.
KEY_DL	               0510      Delete line
KEY_IL		     0511	     Insert line
KEY_DC		     0512	     Delete character
KEY_IC		     0513	     Insert char or enter insert mode
KEY_EIC		     0514	     Exit insert char mode
KEY_CLEAR		     0515	     Clear screen
KEY_EOS		     0516	     Clear to end of screen
KEY_EOL		     0517	     Clear to end of line
KEY_SF		     0520	     Scroll 1 line forward
KEY_SR		     0521	     Scroll 1 line backwards (reverse)
KEY_NPAGE		     0522	     Next page


KEY_PPAGE		     0523	     Previous page
KEY_STAB		     0524	     Set tab
KEY_CTSB		     0525	     Clear tab
KEY_CATAB		     0526	     Clear all tabs
KEY_ENTER		     0527	     Enter or send (unreliable)
KEY_SRESET	     0530	     Soft (partial) reset (unreliable)
KEY_RESET		     0531	     Reset or hard reset (unreliable)
KEY_PRINT		     0532	     Print or copy
KEY_LL		     0533	     Home down or bottom (lower left)


