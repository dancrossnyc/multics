02/08/88  CURSES Entrypoints

This section describes all the routines available to the programmer
in the CURSES package.  The routines are organized by function.  For
an alphabetical list, see the information segment curses.gi.info.


Structure:

All programs using CURSES should include the file <curses.h>.  This
file defines several CURSES functions as macros, and defines several
global variables and the datatype WINDOW.  References to windows are
always of type WINDOW *.  CURSES also defines WINDOW * constants
stdscr (the standard screen, used as a default to routines expecting
a window), and curscr (the current screen, used only for certain low
level operations like clearing and redrawing a garbaged screen).


Integer constants LINES and COLS are defined, containing the size of
the screen.  Constants TRUE and FALSE are defined, with values 1 and
0, respectively.  Additional constants which are values returned from
most CURSES functions are ERR and OK.  OK is returned if the function
could be properly completed, and ERR is returned if there was some
error, such as moving the cursor outside of a window.

The include file <curses.h> automatically includes <stdio.h> and an
appropriate tty driver interface file, currently either <sgtty.h> or
<termio.h>.


A program using CURSES should include -lib
>sl3p>cl>e>libcurses.archive in the cc command.  This is true for
both the terminfo level and CURSES level.  The compilation flag -def
MINICURSES can be included if you restrict your program to a small
subset of CURSES concerned primarily with screen output and
optimization.  The routines possible with MINICURSES are listed in
the info segment curses.gi.info.  (MINICURSES routines are those in
the list marked with asterisks.)


Initialization:

These functions are called when initializing a program.

initscr() The first function called should always be initscr.  This
will determine the terminal type and initialize CURSES data
structures.  initscr also arranges that the first call to refresh
will clear the screen.

endwin() A program should always call endwin before exiting.  This
function will restore tty modes, move the cursor to the lower left
corner of the screen, reset the terminal into the proper non-visual
mode, and tear down all appropriate date structures.


newterm(type, fd) A program which outputs to more than one terminal
should use newterm instead of initscr.  newterm should be called once
for each terminal.  It returns a variable of type SCREEN * which
should be saved as a reference to that terminal.  The arguments are
the type of the terminal (a string) and a stdio file descriptor
(FILE*) for output to the terminal.  The file descriptor should be
open for both reading and writing if input from the terminal is
desired.  The program should also call endwin for each terminal being
used (see set_term below).  If an error occurs, the value NULL is
returned.


set_term(new)
This function us used to switch to a different terminal.  The screen
reference new becomes the new current terminal.  The previous
terminal is returned by the function.  All other calls affect only
the current terminal.

longname()
This function returns a pointer to a static area containing a verbose
description of the current terminal.  It is defined only after a call
to initscr, newterm, or setupterm.


Option Setting:

These functions set options within CURSES.  In each case, win is the
window affected, and bf is a boolean flag with value TRUE or FALSE
indicating whether to enable or disable the option.  All options are
initially FALSE.  It is not necessary to turn these options off
before calling endwin.

clearok(win,bf)
If set, the next call to wrefresh with this window will clear the
screen and redraw the entire screen.  If win is curscr, the next call
to wrefresh with any window will cause the screen to be cleared.
This is useful when the contents of the screen are uncertain, or in
some cases for a more pleasing visual effect.


idlok(win,bf)
If enabled, CURSES will consider using the hardware insert/delete
line feature of terminals so equipped.  If disabled, CURSES will
never use this feature.  The insert/delete character feature is
always considered.  Enable this option only if your application needs
insert/delete line, for example, for a screen editor.  It is disabled
by default because insert/delete line tends to be visually annoying
when used in applications where it isn't really needed.  If
insert/delete line cannot be used, CURSES will redraw the changed
portions of all lines that do not match the desired line.


keypad(win,bf)
This option enables the keypad of the users terminal.  If enabled,
the user can press a function key (such as an arrow key) and getch
will return a single value representing the function key.  If
disabled, CURSES will not treat function keys specially.  If the
keypad in the terminal can be turned on (made to transmit) and off
(made to work locally), turning on this option will turn on the
terminal keypad.

leaveok(win,bf)
Normally, the hardware cursor is left at the location of the window
cursor being refreshed.  This option allows the cursor to be left
wherever the update happens to leave it.  It is useful for
applications where the cursor is not used, since it reduces the need
for cursor motions.  If possible, the cursor is made invisible when
this option is enabled.


meta(win,bf)
If enabled, characters returned by getch are transmitted with all 8
bits, instead of stripping the highest bit.  The value OK is returned
if the request succeeded, the value ERR is returned if the terminal
or system is not capable of 8-bit input.

Meta mode is useful for extending the non-text command set in
applications where the terminal has a meta shift key.  CURSES takes
whatever measures are necessary to arrange for 8-bit input.  On other
versions of UNIX systems, raw mode will be used.  On our systems, the
character size will be set to 8, parity checking disabled, and
stripping of the 8th bit turned off.


Note that 8-bit input is a fragile mode.  Many programs and networks
only pass 7 bits.  If any link in the chain from the terminal to the
application program strips the 8th bit, 8-bit input is impossible.


nodelay(win,bf)
This option causes getch to be a non-blocking call.  If no input is
ready, getch will return -1.  If disabled, getch will hang until a
key is pressed.

intrflush(win bf)
If this option is enabled when an interrupt key is pressed on the
keyboard (interrupt, quit, suspend), all output in the tty driver
queue will be flushed, giving the effect of faster response to the
interrupt but causing CURSES to have the wrong idea of what is on the
screen.  Disabling the option prevents the flush.  The default is for
the option to be enabled.  This option depends on support in the
underlying teletype driver.


typeahead(fd)
Sets the file descriptor for typeahead check.  fd should be an
integer returned from open or fileno.  Setting typeahead to -1 will
disable typeahead check.  By default, file descriptor 0(stdin) is
used.  Typeahead is checked independently for each screen, and for
multiple interactive terminals it should probably be set to the
appropriate input for each screen.  A call to typeahead always
affects only the current screen.


scrollok(win,bf)
This option controls what happens when the cursor of a window is
moved off the edge of the window, either from a newline on the bottom
line, or typing the last character of the last line.  If disabled,
the cursor is left on the bottom line.  If enabled, wrefresh is
called on the window, and then the physical terminal and window are
scrolled up one line.  Note that in order to get the physical
scrolling effect the terminal, it is also necessary to call idlok.

setscrreg(t,b)
wsetscrreg(win,t,b)
These functions allow the user to set a software scrolling region in
a window win or stdscr.  t and b are the line numbers of the top and
bottom margin of the scrolling region.  (Line 0 is the top line of
the window.) If this option and scrollok are enabled, an attempt to


move off the bottom margin line will cause all lines in the scrolling
region to scroll up one line.  Note that this has nothing to do with
use of a physical scrolling region capability in the terminal, like
that in the VT100.  Only the text of the window is scrolled.  If
idlok is enabled and the terminal has either a scrolling region or
insert/delete line capability, they will probably be used by the
output routines.


Terminal Mode Setting:

These functions are used to set modes in the tty driver.  The initial
mode usually depends on the setting when the program was called: the
initial modes documented here represent the normal situation.

cbreak()
nocbreak()
These two functions put the terminal into and out of CBREAK mode.  In
this mode, characters typed by the user are immediately available to
the program.  When out of this mode, the teletype driver will buffer
characters typed until newline is typed.  Interrupt and flow control
characters are unaffected by this mode.  Initially the terminal is
not in CBREAK mode.  Most interactive programs using CURSES will set
this mode.


echo()
noecho()
These functions control whether characters typed by the user are
echoed as typed.  Initially, characters typed are echoed by the
teletype driver.  Authors of many interactive programs prefer to do
their own echoing in a controlled area of the screen, or not to echo
at all, so they disable echoing.

nl()
nonl()
These functions control whether newline is translated into carriage
return and linefeed on output, and whether return is translated into
newline on input.  Initially, the translations do occur.  By
disabling these translations, CURSES is able to make better use of
the linefeed capability, resulting in faster cursor motion.


raw()
noraw()
The terminal is placed into or out of raw mode.  Raw mode is similar
to cbreak mode in that characters typed are immediately passed
through to the user program.  The interrupt and quit characters will
cause signals on Multics.  RAW mode also causes 8 bit input and
output.

resetty()
savetty()
These functions save and restore the state of the tty modes.  savetty
saves the current state in a buffer, resetty restores the state to
what it was at the last call to savetty.


Window Manipulation:

newwin (num_lines, num_cols, beg_row, beg_col)
Create a new window with the given number of lines and columns.  The
upper left corner of the window is at line beg_row column beg_col.
If either num_lines or num_cols is zero, they will be defaulted to
LINES-beg_row and COLS-beg_col.  A new full-screen window is created
by calling newwin (0,0,0,0).

newpad(num_lines, num_cols)
Creates a new pad data structure.  A pad is like a window, except
that it is not restricted by the screen size, and is not associated
with a particular part of the screen.  Pads can be used when a large
window is needed, and only a part of the window will be on the screen
at one time.  Automatic refreshes of pads (e.g.  from scrolling


or echoing of input) do not occur.  It is not legal to call refresh
with a pad as an argument, the routines prefresh or pnoutrefresh
should be called instead.  Note that these routines require
additional parameters to specify the part of the pad to be displayed
and the location on the screen to be used for display.

subwin (orig, num_lines, num_cols, begy, begx)
Create a new window with the given number of lines and columns.  The
window is at position (begy, begx) on the screen.  (It is relative to
the screen, not orig.) The window is made in the middle of the window
orig, so that changes made to one window will affect both windows.
When using this function, often it will be necessary to call touchwin
before calling wrefresh.


delwin(win)
Deletes the named window, freeing up all memory associated with it.
In the case of overlapping windows, subwindows should be deleted
before the main window.

mvwin(win, br, bc)
Move the window so that the upper left corner will be at position
(br, bc).  If the move would cause the window to be off the screen,
it is an error and the window is not moved.


touchwin(win)
Throw away all optimization information about which parts of the
window have been touched, by pretending the entire window has been
drawn on.  This is sometimes necessary when using overlapping
windows, since a change to one window will affect the other window,
but the records of which lines have been changed in the other window
will not reflect the change.

overlay(win1, win2)
overwrite(win1, win2)
These functions overlay win1 on top of win2; that is, all text in
win1 is copied into win2.  The difference is that overlay is
nondestructive (blanks are not copied) while overwrite is
destructive.


Causing Output to the Terminal:

refresh()
wrefresh(win)
These functions must be called to get any output on the terminal, as
other routines merely manipulate data structures.  wrefresh copies
the named window to the physical terminal screen, taking into account
what is already there in order to do optimizations.  refresh is the
same, using stdscr as a default screen.  Unless leaveok has been
enabled, the physical cursor of the terminal is left at the location
of the window's cursor.


doupdate() wnoutrefresh(win)
These two functions allow multiple updates with more efficiency than
wrefresh.  To use them, it is important to understand how CURSES
works.  In addition to all the window structures, CURSES keeps two
data structures representing the terminal screen: a physical screen,
describing what is actually on the screen, and a virtual screen,
describing what the programmer wants to have on the screen.  wrefresh
works by first copying the named window to the virtual screen
(wnoutrefresh), and then calling the routine to update the screen
(doupdate).  If the programmer wishes to output several windows at
once, a series of calls to wrefresh will result in alternating calls
to wnoutrefresh and doupdate, causing several bursts of output to the
screen.  By calling wnoutrefresh for each window, it is then possible
to call doupdate once, resulting in only one burst of output, with
probably fewer total characters transmitted.


prefresh(pad,pminrow,pmincol,sminrow,smincol,smaxrow smaxcol)
pnoutrefresh(pad,pminrow,pmincol,sminrow,smincol,smaxrow,smaxcol)
These routines are analogous to wrefresh and wnoutrefresh except that
pads, instead of windows, are involved.  The additional parameters
are needed to indicate what part of the pad and screen are involved.
pminrow and pmincol specify the upper left corner, in the pad, of the
rectangle to be displayed.  sminrow, smincol, smaxrow, and smaxcol
specify the edges, on the screen, of the rectangle to be displayed
in.  The lower right corner in the pad of the rectangle to be
displayed is calculated from the screen coordinates, since the
rectangles must be the same size.  Both rectangles must be entirely
contained within their respective structures.


Writing on Window Structures:

These routines are used to "draw " text on windows.  In all cases, a
missing win is taken to be stdscr.  y and x are the row and column,
respectively.  The upper left corner is always (0,0), not (1,1).  The
mv functions imply a call to move before the call to the other
function.

Moving the Cursor

move(y, x)
wmove(win, y, x)
The cursor associated with the window is moved to the given location.
This does not move the physical cursor of the terminal until refresh
is called.  The position specified is relative to the upper left
corner of the window.


Writing One Character

addch(ch)
waddch(win, ch)
mvaddch(y,x,ch)
mvwaddch(win,y,x,ch)
The character ch is put in the window at the current cursor position
of the window.  If ch is a tab, newline, or backspace, the cursor
will be moved appropriately in the window.  If ch is a different
control character, it will be drawn in the ^X notation.  The position
of the window cursor is advanced.  At the right margin, an automatic
newline is performed.  At the bottom of the scrolling region, if
scrollok in enabled, the scrolling region will be scrolled up one
line.


The ch parameter is actually an integer, not a character.  Video
attributes can be combined with a character by or-ing them into the
parameter.  This will result in these attributes also being set.
(The intent here is that text, including attributes, can be copied
from one place to another with inch and addch.)

Writing a String

addstr(str)
waddstr(win,str)
mvaddstr(y,x,str)
mvwaddstr(win,y,x,str)
These functions write all the characters of the null terminated
character string str on the given window.  They are identical to a
series of calls to addch.


Clearing Areas of the Screen

erase()
werase(win)
These functions copy blanks to every position in the window.

clear()
wclear(win)
These functions are like erase and werase but they also call clearok,
arranging that the screen will be cleared on the next call to refresh
for that window.


clrtobot()
wclrtobot(win)
All lines below the cursor in this window are erased.  Also, the
current line to the right of the cursor is erased.

clrtoeol()
wclrtoeol(win)
The current line to the right of the cursor is erased.


Inserting and Deleting Text:

delch()
wdelch(win)
mvdelch(y,x)
mvwdelch(win,y,x)
The character under the cursor in the window is deleted.  All
characters to the right on the same line are moved to the left one
position.  This does not imply use of the hardware delete character
feature.


deleteln()
wdeleteln(win)
The line under the cursor in the window is deleted.  All lines below
the current line are moved up one line.  The bottom line of the
window is cleared.  This does not imply use of the hardware delete
line feature.

insch(c)
winsch(win,c)
mvinsch(y,x,c)
mvwinsch(win,y,x,c)
The character c is inserted before the character under the cursor.
All characters to the right are moved one space to the right,
possibly losing the rightmost character on the line.  This does not
imply use of the hardware insert character feature.


insertln()
winsertln(win)
A blank line is inserted above the current line.  The bottom line is
lost.  This does not imply use of the hardware insert line feature.


Formatted Output:

printw(fmt, args)
wprintw(win, fmt, args)
mvprintw(y, x, fmt, args)
mvwprintw(win, y, x, fmt, args)
These functions correspond to printf.  The characters which would be
output by printf are instead output using waddch on the given window.


Miscellaneous:

box(win, vert, hor)
A box is drawn around the edge of the window.  vert and hor are the
characters the box is to be drawn with.

scroll(win)
The window is scrolled up one line.  This involves moving the lines
in the window data structure.  As an optimization, if the window is
stdscr and the scrolling region is the entire window, the physical
screen will be scrolled at the same time.


Input From a Window:

getyx(win,y,x)
The cursor position of the window is placed in the two integer
variables y and x.  Since this is a macro, no & is necessary.

inch()
winch(win)
mvinch(y,x)
mvwinch(win,y,x)
The character at the current position in the named window is
returned.  If any attributes are set for that position, their values
will be or-ed into the value returned.  The pre-defined constants
A_ATTRIBUTES and A_CHARTEXT can be used with the & operator to
extract the character or attributes alone.


Input From The Terminal:

getch()
wgetch(win)
mvgetch(y,x)
mvwgetch(win,y,x)
A character is read from the terminal associated with the window.  In
a nodelay mode, if there is no input waiting, the value -1 is
returned.  In delay mode, the program will hang until the system
passes text through to the program.  Depending on the setting of
cbreak, this will be after one character, or after the first newline.

If keypad mode is enabled, and a function key is pressed, the code
for that function key will be returned instead of the raw characters.
Possible function keys are defined with integers beginning with


0401, whose names begin with KEY_.  These are listed in "Input" under
"INTRODUCTION." If a character is received that could be the
beginning of a function key (such as escape), CURSES will set a 1-
second timer.  If the remainder of the sequence does not come in
within 1 second, the character will be passed through, otherwise the
function key value will be returned.  For this reason, on many
terminals, there will be a one second delay after a user presses the
escape key.  (Use by a programmer of the escape key for a single
character function is discouraged.)


getstr(str)
wgetstr(win,str)
mvgetstr(y,x,str)
wvwgetstr(win,y,x,str)
A series of calls to getch is made, until a newline is received.  The
resulting value is placed in the area pointed at by the character
pointer str.  The users' erase and kill characters are interpreted.

scanw(fmt, args)
wscanw(win, fmt, args)
mvscanw(y, x, fmt, args)
mvwscanw(win, y, x, fmt, args)
This function corresponds to scanf.  wgetstr is called on the window,
and the resulting line is used as input for the scan.


Video Attributes:

attroff(attrs)
wattroff(win, attrs)
attron(attrs)
wattron(win, attrs)
attrset(attrs)
wattrset(win, attrs)
standout()
standend()
wstandout(win)
wstandend(win)
These functions set the current attributes of the named window.
These attributes can be any combination of A_STANDOUT, A_REVERSE,


A_BOLD, A_DIM, A_BLINK, and A_UNDERLINE.  These constants are defined
in <curses.h> and can be combined with the C | (or) operator.

The current attributes of a window are applied to all characters that
are written into the window with waddch.  Attributes are a property
of the character, and move with the character through any scrolling
and insert/delete line/character operations.  To the extent possible
on the particular terminal, they will be displayed as the graphic
rendition of characters put on the screen.

attrset(attrs) sets the current attributes of the given window to
attrs.  attroff(attrs) turns off the named attributes without
affecting any other attributes.  attron(attrs) turns on the named
attributes without affecting any others.  standout is the same as
attron(A_STANDOUT).  standend is the same as attrset(0) in that it
turns off all attributes.


Bells and Flashing Lights:

beep()
flash()
These functions are used to signal the programmer.  beep will sound
the audible alarm on the terminal, if possible, and if not, will
flash the screen (visible bell), if that is possible.  flash will
flash the screen, and if that is not possible, will sound the audible
signal.  If neither signal is possible nothing will happen.  Nearly
all terminals have an audible signal (bell or beep) but only some can
flash the screen.


Portability Functions:

These functions do not directly involve terminal dependent character
output but tend to be needed by programs that use CURSES.
Unfortunately, their implementation varies from one system to
another.  They have been included here to enhance the portability of
programs using CURSES.

baudrate()
baudrate returns the output speed of the terminal.  The number
returned is the integer baud rate, for example, 9600, rather than a
table index such as B9600.


erasechar()
The erase character chosen by the user is returned.  This is the
character typed by the user to erase the character just typed.

killchar()
The line kill character chosen by the user is returned.  This is the
character typed by the user to forget the entire line being typed.

flushinp()
flushinp throws away any typeahead that has been typed by the user
and has not yet been read by the program.


Delays:

These functions are highly unportable, but are often needed by
programs that use CURSES, especially real time response programs.
Some of these functions require a particular operating system or a
modification to the operating system to work.  In all cases, the
routine will compile and return an error status if the requested
action is not possible.  It is recommended that programmers avoid use
of these functions if possible.

draino(ms)
The program is suspended until the output queue has drained enough to
complete in ms additional milliseconds.  Thus, draino(50) at 1200
baud would pause until there are no more than 6 characters in the
output queue, because it would take 50 milliseconds to output the


additional 6 characters.  The purpose of this routine is to keep the
program (and thus the keyboard) from getting ahead of the screen.  If
the operating system does not support the ioctls needed to implement
draino, the value ERR is returned; otherwise, OK is returned.

napms(ms)
This function suspends the program for ms milliseconds.  It is
similar to sleep except with higher resolution.  The resolution
actually provided will vary with the facilities available in the
operating system, and often a change to the operating system will be
necessary to produce good results.  If resolution of at least .1
second is not possible, the routine will round to the next higher
second, call sleep, and return ERR.  Otherwise, the value OK is
returned.  Often the resolution provided is 1/60th second.


Lower Level Functions:

These functions are provided for programs not needing the screen
optimization capabilities of CURSES.  Programs are discouraged from
working at this level, since they must handle various glitches in
certain terminals.  However, a program can be smaller if it only
brings in the low level routines.


Cursor Motion

mvcur(oldrow, oldcol, newrow, newcol)
This routine optimally moves the cursor from (oldrow, oldcol) to
(newrow, newcol).  The user program is expected to keep track of the
current cursor position.  Note that unless a full screen image is
kept, CURSES will have to make pessimistic assumptions, sometimes
resulting in less than optimal cursor motion.  For example, moving
the cursor a few spaces to the right can be done by transmitting the
characters being moved over, but if CURSES does not have access to
the screen image, it doesn't know what these characters are.


TERMINFO Level:

These routines are called by low level programs that need access to
specific capabilities of terminfo.  A program working at this level
should include both <curses.h> and <term.h> in that order.  After a
call to setupterm, the capabilities will be available with macro
names defined in <term.h>.  See terminal_information.gi.info for a
detailed description of the capabilities.

Boolean valued capabilities will have the value 1 if the capability
is present, 0 if it is not.  Numeric capabilities have the value -1
if the capability is missing, and have a value at least 0 if it is
present.  String capabilities (both those with and without
parameters) have the value NULL if the capability is missing, and
otherwise have type char * and point to a character string containing


the capability.  The special character codes involving the \ and ^
characters (such as \r for return, or ^A for control A) are
translated into the appropriate ASCII characters.  Padding
information (of the form $<time>) and parameter information
(beginning with %) are left uninterpreted at this stage.  The routine
tputs interprets padding information, and tparm interprets parameter
information.

If the program only needs to handle one terminal, the definition -
def SINGLE can be passed to the C compiler, resulting in static
references to capabilities instead of dynamic references.  This can
result in smaller code, but prevents use of more than one terminal at
a time.  Very few programs use more than one terminal, so almost all
programs can use this flag.


setupterm(term, filenum, errret)
This routine is called to initialize a terminal.  term is the
character string representing the name of the terminal being used.
filenum is the UNIX file descriptor of the terminal being used for
output.  errret is a pointer to an integer in which a success or
failure indication is returned.  The values returned can be 1 (all is
well), 0 (no such terminal), or -1 (some problem locating the
terminfo database).  The value of term can be given as NULL, which
will cause the value of TERM in the environment to be used.  The
errret pointer can also be given as NULL, meaning no error code is
wanted.  If errret is defaulted, and something goes wrong, setupterm
will print an appropriate error message and exit, rather than
returning.  Thus, a simple program can call setupterm(NULL, 1, NULL)
and not worry about initialization errors.


If the variable TERMINFO is set in the environment to a path name,
setupterm will check for a compiled terminfo description of the
terminal under that path, before checking the standard system
terminfo description.  Otherwise, only the standard system terminfo
description is checked.

setupterm will check the tty driver mode bits, using filenum, and
change any that might prevent the correct operation of other low
level routines.  Currently, the mode that expands tabs into spaces is
disabled, because the tab character is sometimes used for different
functions by different terminals.  (Some terminals use it to move
right one space.  Others use it to address the cursor to row or
column 9.) If the system is expanding tabs, setupterm will remove the
definition of the tab and backtab functions, making the assumption


that since the user is not using hardware tabs, they may not be
properly set in the terminal.  Other system dependent changes, such
as disabling a virtual terminal driver, may be made here.

As a side effect, setupterm initializes the global variable ttytype,
which is an array of characters, to the value of the list of names
for the terminal, This list comes from the beginning of the terminfo
description.

After the call to setupterm, the global variable cur_term is set to
point to the current structure of terminal capabilities.  By calling
setupterm for each terminal, and saving and restoring cur_term, it is
possible for a program to use two or more terminals at once.


The mode that turns newlines into CRLF on output is not disabled.
Programs that use cursor_down or scroll_forward should avoid these
capabilities if their value is linefeed unless they disable this
mode.  setupterm calls reset_prog_mode after any changes it makes.


reset_prog_mode()
reset_shell_mode()
def_prog_mode()
def_shell_mode()
These routines can be used to change the tty modes between the two
states: shell (the mode they were in before the program was started)
and program (the mode needed by the program).  def_prog_mode saves
the current terminal mode as program mode.  setupterm and initscr
call def_shell_mode automatically.  reset_prog_mode puts the terminal
into program mode, and reset_shell_mode puts the terminal into normal
mode.

A typical calling sequence is for a program to call initscr (or
setupterm if a terminfo level program), then to set the desired
program mode by calling routines such as cbreak and noecho, then to


call def_prog_mode to save the current state.  Before a shell escape
or control-Z suspension, the program should call reset_shell_mode, to
restore normal mode for the shell.  Then, when the program resumes,
it should call reset_prog_mode.  Also, all programs must call
reset_shell_mode before they exit.  (The higher level routine endwin
automatically calls reset_shell_mode.)

Normal mode is stored in cur_term->Ottyb, and program mode is in
cur_term->Nttyb.  These structures are both of type termio (which
varies depending on the system).


vidputs(newmode, putc)
newmode is any combination of attributes, defined in <curses.h>.
putc is a putchar-like function.  The proper string to put the
terminal in the given video mode is output.  The previous mode is
remembered by this routine.  The result characters are passed through
putc.

vidattr(newmode)
The proper string to put the terminal in the given mode is output to
stdout.


tparm(instring, p1,p2,p3,p4,p5,p6,p7,p8,p9)
tparm is used to instantiate a parameterized string.  The character
string returned has the given parameters applied, and is suitable for
tputs.  Up to 9 parameters can be passed, in addition to the
parameterized string.


tputs(cp,affcnt,outc)
A string capability, possibly containing padding information, is
processed.  Enough padding characters to delay for the specified time
replace the padding specification, and the resulting string is
passed, one character at a time, to the routine outc, which should
expect one character parameter.  (This routine often just calls
putchar.) cp is the capability string.  affcnt is the number of units
affected by the capability, which varies with the particular
capability.  (For example, the affcnt for insert_line is the number
of lines below the inserted line on the screen, that is, the number
of lines that will have to be moved by the terminal.) affcnt is used
by the padding information of some terminals as a multiplication
factor.  If the capability does not have a factor, the value 1 should
be passed.


putp(str)
This is a convenient function to output a capability with no affcnt.
The string is output to putchar with an affcnt of 1.  It can be used
in simple applications that do not need to process the output of
tputs.

delay_output(ms)
A delay is inserted into the output stream for the given number of
milliseconds.  The current implementation inserts sufficient pad
characters for the delay.  This should not be used in place of a high
resolution sleep, but rather for delay effects in the output.  Due to
buffering in the system, it is unlikely that this call will result in
the process actually sleeping.  Since large numbers of pad characters
can be output, it is recommended that ms not exceed 500.
