02/08/88  CURSES Operation Details

Insert and delete line and character:

The algorithm used by CURSES takes into account insert and delete
line and character functions, if available, in the terminal.  Calling
the routine
          	idlok(stdscr, TRUE);

will enable insert/delete line.  By default, CURSES will not use
insert/delete line.  This was not done for performance reasons, since
there is no speed penalty involved.  Rather, experience has shown
that some programs do not need this facility, and that if CURSES uses
insert/delete line, the result on the screen can be visually
annoying.  Since many simple programs using CURSES do not need this,
the default is to avoid insert/delete line.  Insert/delete character
is always considered.


Additional terminals:

CURSES will work even if absolute cursor addressing is not possible,
as long as the cursor can be moved from any location to any other
location.  It considers local motions, parameterized motions, home,
and carriage return.

CURSES is aimed at full duplex, alphanumeric, video terminals.  No
attempt is made to handle half-duplex, synchronous, hard copy, or
bitmapped terminals.  Bitmapped terminals can be handled by
programming them to emulate an ordinary alphanumeric terminal.  This
does not take advantage of the bitmap capabilities, but it is the
fundamental nature of CURSES to deal with alphanumeric terminals.


The CURSES handles terminals with the "magic cookie glitch" in their
video attributes.  The term "magic cookie" means that a change in
video attributes is implemented by storing a "magic cookie" in a
location on the screen.  The "cookie" takes up a space , preventing
an exact implementation of what the programmer wanted.  CURSES takes
the extra space into account, and moves part of the line to the
right, as necessary.  In some cases, this will unavoidably result in
losing text from the right hand edge of the screen.  Advantage is
taken of existing spaces.


Multiple terminals:

Some applications need to display text on more than one terminal,
controlled by the same process.  Even if the terminals are of
different types, CURSES can handle this.

All information about the current terminal is kept in a global
variable

	struct screen *SP;

Although the screen structure is hidden from the user, the C compiler
will accept declarations of variables which are pointers.  The user
program should declare one screen pointer variable for each terminal
it wishes to handle.


The routine

	struct screen *newterm(type, fd)

will set up a new terminal of the given terminal type which does
output on file descriptor fd.  A call to initscr is essentially
newterm(getenv("TERM"),stdout).  A program wishing to use more than
one terminal should use newterm for each terminal and save the value
returned as a reference to that terminal.


To switch to a different terminal, call

	set_term(term)

The old value of SP will be returned.  The programmer should not
assign directly to SP because certain other global variables must
also be changed.

All CURSES routines always affect the current terminal.  To handle
several terminals, switch to each one in turn with set_term, and then
access it.  Each terminal must be set up with newterm, and closed
down with endwin.


Video attributes:

Video attributes can be displayed in any combination on terminals
with this capability.  They are treated as an extension of the
standout capability, which is still present.

Each character position on the screen has 16 bits of information
associated with it.  Seven of these bits are the character to be
displayed, leaving separate bits for nine video attributes.  These
bits are used for standout, underline, reverse video, blink, dim,
bold, blank, protect, and alternate character set.  Standout is taken
to be whatever highlighting works best on the terminal, and should be
used by any program that does not need specific or combined
attributes.  Underlining, reverse video, blink, dim, and bold are the
usual video attributes.  Blank means that the character is displayed


as a space, for security reasons.  Protected and alternate character
set depend on the particular terminal.  The use of these last three
bits is subject to change and not recommended.  Note also that not
all terminals implement all attributes - in particular, no current
terminal implements both dim and bold.

The routines to use these attributes include

	attrset(attrs)		wattrset(win, attrs)
	attron(attrs)		wattron(win, attrs)
	attroff(attrs)		wattroff(win, attrs)
	standout()		wstandout(win)
	standend()		wstandend(win)


Attributes, if given, can be any combination of a A_STANDOUT,
A_UNDERLINE, A_REVERSE, A_BLINK, A_DIM, A_BOLD, A_INVIS, A_PROTECT,
and A_ALTCHARSET.  These constants, defined in CURSES.h, can be
combined with the C | (or) operator to get multiple attributes.
attrset sets the current attributes to the given attrs; attron turns
on the given attrs in addition to any attributes that are already on;
attroff turns off the given attributes, without affecting any others.
standout and standend are equivalent to attron(A_STANDOUT) and
attrset(A_NORMAL).

If the particular terminal does not have the particular attribute or
combination requested, CURSES will attempt to use some other
attribute in its place.  If the terminal has no highlighting at all,
all attributes will be ignored.


Special keys:

Many terminals have special keys, such as arrow keys, keys to erase
the screen, insert or delete text, and keys intended for user
functions.  The particular sequences these terminals send differs
from terminal to terminal.  CURSES allows the programmer to handle
these keys.

A program using special keys should turn on the keypad by calling

	keypad(stdscr, TRUE)

at initialization.  This will cause special characters to be passed
through to the program by the function getch.  These keys have
constants which are listed in the section called "Input" in the
information segment introduction.gi.info


They have values starting at 0401, so they should not be stored in a
char variable, as significant bits will be lost.

A program using special keys should avoid using the escape key, since
most sequences start with escape, creating an ambiguity.  CURSES will
set a one second alarm to deal with this ambiguity, which will cause
delay response to the escape key.  It is a good idea to avoid escape
in any case, since there is eventually pressure for nearly any screen
oriented program to accept arrow key input.


Scrolling region:

There is a programmer accessible scrolling region.  Normally, the
scrolling region is set to the entire window, but the calls

	setscrreg(top, bot)
	wsetscrreg(win, top, bot)

set the scrolling region for stdscr or the given window to any
combination of top and bottom margins.  When scrolling past the
bottom margin of the scrolling region, the lines in the region will
move up one line, destroying the top line of the region.  If
scrolling has been enabled with scrollok, scrolling will take place
only within that window.  Note that the scrolling region is a
software feature, and only causes a window data structure to scroll.


This may or may not translate to use of the hardware scrolling region
feature of a terminal, or insert/delete line.


MINICURSES:

CURSES copies from the current window to an internal screen image for
every call to refresh.  If the programmer is only interested in
screen output optimization, and does not want the windowing or input
functions, an interface to the lower level routines is available.
This will make the program somewhat smaller and faster.  The
interface is a subset of full CURSES, so that conversion between the
levels in not necessary to switch from MINICURSES to full CURSES.


The following functions of CURSES and terminfo are available to the
user of MINICURSES:

addch(ch)	  	addstr(str)     	attroff(at)        	attron(at)
attrset(at)	clear()		erase()		initscr
move(y,x)		mvaddch(y,x,ch)	mvaddstr(y,x,str)	newterm
refresh()		standend()	standout()


The following functions of CURSES and terminfo are not  available to
the user of MINICURSES:

box	         	clrtobot		clrtoeol		delch
deleteln		delwin		getch		getstr
inch	         	insch		insertln		longname
makenew		mvdelch		mvgetch		mvgetstr
mvinch		mvinsch		mvprintw		mvscanw
mvwaddch	          mvwaddstr    	mvwdelch		mvwgetch
mvwgetstr		mvwin		mvwinch		mvwinsch
mvwprintw	          mvwscanw   	newwin		overlay
overwrite		printw		putp		scanw
scroll		setscrreg		subwin		touchwin
vidattr		waddch		waddstr		wclear


wclrtobot		wclrtoeol		wdelch		wdeleteln
werase		wgetch		wgetstr		winsch
winsertln		wmove		wprintw		wrefresh
wscanw		wsetscrreg

The subset mainly requires the programmer to avoid use of more than
the one window stdscr.  Thus, all functions beginning with "w" are
generally undefined.  Certain high level functions that are
convenient but not essential are also not available, including printw
and scanw.  Also, the input routine getch cannot be used with
MINICURSES.  Features implemented at a low level, such as use of
hardware insert/delete line and video attributes, are available in
both versions.  Also, mode setting routines such as crmode and noecho
are allowed.

To access MINICURSES, add -def MINICURSES to the CFLAGS in the
makefile.  If routines are requested that are not in the subset, they
will cuase a linkage error upon execution.


TTY mode functions:

In addition to the save/restore routines savetty() and resetty(),
standard routines are available for going into and out of normal tty
mode.  These routines are resetterm(), which puts the terminal back
in the mode it was in when CURSES was started; fixterm(), which
undoes the effects of resetterm, that is, restores the "current
CURSES mode"; and saveterm(), which saves the current state to be
used by fixterm().  endwin automatically calls resetterm.  These
routines are also available at the terminfo level.


Typeahead check:

If the user types something during an update, the update will stop,
pending a future update.  This is useful when the user hits several
keys, each of which causes a good deal of output.  For example, in a
screen editor, if the user presses the "forward screen" key, which
draws the next screen full of text, several times rapidly, rather
than drawing screens of text, the updates will be cut short, and only
the last screen full will actually be displayed.  This feature is
automatic and cannot be disabled.


getstr:

No matter what the setting of echo is, strings typed in here are
echoed at the current cursor location.  The users erase and kill
characters are understood and handled.  This makes it unnecessary for
an interactive program to deal with erase, kill and echoing when the
user is typing a line of text.


longname:

The longname function does not need any arguments.  It returns a
pointer to a static area containing the actual long name of the
terminal.


Nodelay mode:

The call

	nodelay(stdscr, TRUE)

will put the terminal in "nodelay mode".  While in this mode, any
call to getch will return -1 if there is nothing waiting to be read
immediately.  This is useful for writing programs requiring "real
time" behavior where the users watch action on the screen and press a
key when they want something to happen.  For example, the cursor can
be moving across the screen, in real time.  When it reaches a certain
point, the user can press an arrow key to change direction at that
point.


Portability:

Several useful routines are provided to improve portability.  The
implementation of these routines is different from system to system,
and the differences can be isolated from the user program by
including them in CURSES.

Functions erasechar() and killchar() return the characters which
erase one character, and kill the entire input line, respectively.
The function baudrate() will return the current baud rate, as an
integer.  (For example, at 9600 baud, the integer 9600 will be
returned, not the value B9600 from <sgtty.h>.) The routine flushinp()
will cause all typeahead to be thrown away.




