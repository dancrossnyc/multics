10/21/88  c_compile, cc, c

Syntax as a command:  cc filename1 ... filenameN  {-control_args}


Function: cc is the Multics C compiler.  It accepts as input C
source programs and / or assembled or compiled programs creating one
of various output file types.  If more than one input file is
specified cc will generate '.cob' intermediate files for each input
file passed through the assembly phase of the compiler.  These files
will be generated in the current working directory.  If only one
file is specified a '.cob' file will not be created in the current
working directory.


Arguments:
filename
   Any file name with a suffix of '.c' is taken as a C source file
   and is compiled. Any file name suffixed with '.alm' is passed to
   alm. Any file name suffixed with '.cpp' is passed to the compiler.
   All other file names are given as input to the Linkage Editor. CC
   will not perform any suffix defaulting, all suffixes are taken as
   specified on the command line.


Control arguments:
-brief, -bf
   suppress printing of messages stating the current pass being
   performed. (Default).
-definition args, -def args
   specifies define names to be defined or undefined in the
   preprocessor.  Where args is a list of define names separated by
   commas with no spaces in the following form:

   -def n,x=2,^y

   The first arg specifies that n is to be defined as 1 in the same way
   as '#define n' would define n to 1. The second arg specifies that
   x is to be given a definition of 2 and the last arg specifies that
   y is to be undefined in the preprocessor. There is a maximum of ten
   defines and ten undefines.


-include paths, -incl paths
   specifies the pathnames of include file directories the user
   wishes the preprocessor to look in for include files.  All
   arguments up to the next control argument are treated as include
   directory pathnames. A maximum of ten include directories can be
   specified.
-library paths, -lb paths
   specifies the pathnames of library directories, archives or
   object files the user wishes the Linkage Editor to use when
   resolving external references.  All arguments up to the next
   control argument are treated as include library pathnames.
   A maximum of ten libraries can be specified.


-list, -ls                                                           |
   specifies that a Linkage Editor listing file should be generated  |
   for the Linkage Editor pass of c_compile. The listing file will   |
   specify where all of the objects brought in by the Linkage        |
   Editor were found.                                                |

-long, -lg
   specifies that a message should be printed specifying the
   completion of each pass of the compiler for each specified
   filename.
-output_file pathname, -of pathname
   Forces the output to be placed in the file defined by pathname.
   If no output file name is given the output will be put into the
   Linkage Editors default output file 'a.out'.


-stop_after pass, -spaf pass
   Specifies to cc to stop after the specified pass of the compiler.
   Valid values for pass are:

    preprocessor, pp:  generates a ".cpp" file which is the output
                       from the preprocessor.
    c:                 generates a ".alm" file which is an alm
                       source file outputted from the C compiler.
    alm:               generates a ".cob" file which is the
                       intermediate executable file generated from
                       the assembler.  This file is to be used as
                       input to the Linkage Editor.


-table, -tb
   Generates a full symbol table for use by symbolic debuggers.  The
   symbol table is part of the symbol section of the object program
   and consists of two parts:  a statement map that gives the
   correspondence between source line numbers and object locations
   of the source, and an identifier table containing information
   about every identifier referenced in the source program.


Notes:                                                              |
C_compile has been altered to use the standard search rules to find |
the default C runtime library (runtime.archive). This library is    |
normally located in >sl3p>cc>e and will automatically be found by   |
the referencing_dir search rule.                                    |
