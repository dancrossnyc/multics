02/08/88  Introduction to CURSES Examples

The following is a list of example programs for CURSES and the
corresponding information segments where they can be found.  These
programs are provided to demonstrate uses of CURSES and are for
purposes of illustration only.


PROGRAM		INFO SEGMENT

editor		editor.gi.info
highlight		highlight.gi.info
scatter		scatter.gi.info
show		show.gi.info
termhl		termhl.gi.info
two		two.gi.info
window		window.gi.info


To view a program, type help followed by the information segment
name.  For example, type

	help two.gi.info


Show:

Show pages through a file, showing one screen full each
time the user presses the space bar.  By creating an input file for
show made up of 24 line pages, each segment varying slightly from the
previous page, nearly any exercise for CURSES can be created.  Such
input files are called show scripts.

In the show program, cbreak is called so that the user can press the
space bar without having to hit return.  The noecho function is called
to prevent the space from echoing in the middle of a refresh,
messing up the screen.  The nonl function is called to enable more
screen optimization.  The idlok function is called to allow insert and
delete line, since many show scripts are constructed to duplicate
bugs caused by that feature.  The clrtoeol and clrtobot functions
clear from the cursor to the end of the line and screen, respectively.


Highlight:

The function addch always draws two things on a window.  In addition
to the character itself, a set of attributes  is associated with
the character.  These attributes cover various forms of highlighting
of the character.  For example, the character can be put in reverse
video, bold, or be underlined.  You can think of the attributes as the
color of the ink used to draw the character.

A window always has a set of current attributes  associated with it.
The current attributes are associated with each character as it is
written to the window.  The current attributes can be changed with a
call to attrset (attrs).  (Think of this as dipping the window's pen
in a particular color ink.)  The names of the attributes are
A_STANDOUT, A_REVERSE, A_BOLD, A_DIM, A_INVIS, and


A_UNDERLINE.  For example, to put a work in bold, the code in Figure
12-2 might be used.  The word "boldface" will be shown in bold.
_____________________________________________________________

printw("A word in " );
attrset(A_BOLD);
printw("boldface");
attrset(0);
printw(" really stands out.\n");
...
refresh();

Figure 12-2 Use of attributes
_____________________________________________________________


Not all terminals are capable of displaying all attributes.  If a
particular terminal cannot display a requested attribute, CURSES wil
attempt to find a substitute attribute.  If none is possible, the
attribute is ignored.

One particular attribute is called standout.   This attribute is used
to make text attract the attention of the user.  The particular
hardware attribute used for standout varies from terminal to terminal,
and is chosen to be the most visually pleasing attribute the terminal
has.  Standout is typically implemented as reverse video or bold. Many
programs don't really need a specific attribute, such as bold or
inverse video, but instead just need to highlight some text.  For such
applications, the A_STANDOUT attribute is recommended.  Two convenient
functions, standout() and standend() turn on and off this attribute.


Attributes can be turned on in combination.  Thus, to turn on
blinking bold text, use attrset(A_BLINK|A_BOLD).  Individual
attributes can be turned on and off with attron and attroff without
affecting other attributes.

For an example program using attributes, see the information segment
highlight.gi.info.  The program takes a text file as input and allows
embedded escape sequences to control attributes.  In this example
program, \U turns on underlining, \B turns on bold, and \N restores
normal text.  Note the initial call to scrollok.  This allows the
terminal to scroll if the file is longer than one screen.  When an
attempt is made to draw past the bottom of the screen, CURSES will
automatically scroll the terminal up a line and call refresh.


Highlight comes about as close to being a filter as is possible with
CURSES.  It is not a true filter, because CURSES must "take over" the
CRT screen.  In order to determine how to update the screen, it must
know what is on the screen at all times.  This requires CURSES to
clear the screen in the first call to refresh, and to know the cursor
position and screen contents at all times.


Window:

A window is a data structure representing all or part of the CRT
screen.  It has room for a two dimensional array of characters,
attributes for each character (a total of 16 bits per character: 7 for
text and 9 for attributes) a cursor, a set of current attributes, an
a number of flags.  CURSES provides a full screen window, called
stdscr, and a set of functions that use stdscr.  Another window is
provided called curscr, representing the physical screen.

It is important to understand that a window is only a data structure.
Use of more than one window does not imply use of more than one
terminal,  nor does it involve more than one process.  A window is
merely an object which can be copied to all or part of the terminal


screen.  The current implementation of CURSES does not allow
windows which are bigger than the screen

The programmer can create additional windows with the function newwin
(lines, cols, begin_row, begin_col) which will return a pointer to a
newly created window.  The window will be lines by cols, and the
upper left corner of the window will be at screen position
(begin_row, begin_col).  All operations that affect stdscr have
corresponding functions that affect an arbitrary named window.
Generally, these functions have names formed by putting a "w" o the
front of the stdscr function, and the window name is added as the
first parameter.  Thus waddch(mywin, c) would write the character c
to window mywin.  The wrefresh(win) function is used to flush the
contents of a window to the screen.


Windows are useful for maintaining several different screen images,
and alternating the user among them.  Also, it is possible to
subdivide the screen into several windows, refreshing each of them as
desired.  When windows overlap, the contents of the screen will be
the more recently refreshed window.

In all cases, the non-w version of the function calls the w version
of the function, using stdscr as the additional argument.  Thus, a
call to addch(c) results in a call to waddch(stdscr, c).

The program window is an example of the use of multiple windows.


The main display is kept in stdscr.  When the user temporarily wants
to put something else on the screen, a new window is created covering
part of the screen.  A call to wrefresh on that window causes the
window to be written over stdscr on the screen.  Calling refresh on
stdscr results in the original window being re-drawn on the screen.
Note the calls to touchwin before writing out an overlapping window.
These are necessary to defeat an optimization in CURSES.  If you have
trouble refreshing a new window which overlaps an old window, it may
be necessary to call touchwin on the new window to get it completely
written out.


For convenience, a set of "move" functions are also provided for most
of the common functions.  These result in a call to move before the
other function.  For example, mvaddch (row, col, c) is the same as
move (row, col); addch (c).  Combinations, e.g.  mvwaddch (row, col,
win, c) also exist.


Two:

CURSES can produce output on more than one terminal at once.  This is
useful for single process programs that access a common database,
such as multi-player games.  Output to multiple terminals is a
difficult business, and CURSES does not solve all the problems for
the programmer.  It is the responsibility of the program to determine
the file name of each terminal line, and what kind of terminal is on
each of those lines.  The standard method, checking $TERM in the
environment, does not work, since each process can only examine its
own environment.  Another problem that must be solved is that of
multiple programs reading from one line.  This situation produces a
race condition and should be avoided.  Nonetheless, a program wishing
to take over another terminal cannot just shut off whatever program
is currently running on that line.  (Usually, security reasons


would also make this inappropriate.  However, for some applications,
such as an inter-terminal communication program, or a program that
takes over unused tty lines, it would be appropriate.) A typical
solution requires the user logged in on each line to run a program
that notifies the master program that the user is interested in
joining the master program, telling it the notification program's
process id, the name of the tty line and the type of terminal being
used.  Then the program goes to sleep until the master program
finishes.  When done, the master program wakes up the notification
program, and all programs exit.

CURSES handles multiple terminals by always having a current
terminal.  All function calls always affect the current terminal.
The master program should set up each terminal, saving a reference to
the terminals in its own variables.  When it wishes to affect a


terminal, it should set the current terminal as desired, and then
call ordinary CURSES routines.

References to terminals have type struct screen *.  A new terminal is
initialized by calling newterm(type, fd).  newterm returns a screen
reference to the terminal being set up.  type is a character string,
naming the kind of terminal being used.  fd is a stdio file
descriptor to be used for input and output to the terminal.  (If only
output is needed, the file can be open for output only.) This call
replaces the normal call to initscr, which calls newterm
(getenv("TERM"), stdout).

To change the current terminal, call "set_term(sp)" where sp is the
screen reference to be made current.  set_term returns a reference to
the previous terminal.


It is important to realize that each terminal has its own set of
windows and options.  Each terminal must be initialized separately
with newterm.  Options such as cbreak and noecho must be set
separately for each terminal.  The functions endwin and refresh must
be called separately for each terminal.  See Figure 12-3 for a
typical scenario to output a message to each terminal.
_____________________________________________________________

for (i=o; i<interm; i++) {
	set_term(terms[i]);
	mvaddstr(0, 0, "Important message");
	refresh();
}

Figure 12-3  Sending a message to several terminals
-------------------------------------------------------------


See the sample program two for a full example.  This program pages
through a file, showing one page to the first terminal and the next
page to the second terminal.  It then waits for a space to be typed
on either terminal, and shows the next page to the terminal typing
the space.  Each terminal has to be separately put into nodelay mode.
Since no standard multiplexor is available in current versions of the
UNIX system, it is necessary to either busy wait, or call sleep(1);,
between each check for keyboard input.  This program sleeps for a
second between checks.


The two program is just a simple example of two terminal CURSES.  It
does not handle notification, as described above, instead it requires
the name and type of the second terminal on the command line.  As
written, the command sleep 100000 must be typed on the second
terminal to put it to sleep while the program runs, and the first
user must have both read and write permission on the second terminal.


Termhl:

Some programs need to use lower level primitives than those offered
by CURSES.  For such programs, the terminfo level interface is
offered.  This interface does not manage your CRT screen, but rather
gives you access to strings and capabilities which you can use
yourself to manipulate the terminal.

Programmers are discouraged from using this level.  Whenever
possible, the higher level CURSES routines should be used.  This will
make your program more portable to other UNIX systems and to a wider
class of terminals.  CURSES takes care of all the glitches and
misfeatures present in physical terminals, but at the terminfo level
you must deal with them yourself.  Also, it cannot be guaranteed that


this part of the interface will not change or be upward compatible
with previous releases.

There are two circumstances when it is proper to use terminfo.  The
first is when you are writing a special purpose tool that sends a
special purpose string to the terminal, such as programming a
function key, setting tab stops, sending output to a printer port, or
dealing with the status line.  The second situation is when writing a
filter.  A typical filter does one transformation on the input stream
without clearing the screen or addressing the cursor.  If this
transformation is terminal dependent and clearing the screen is
inappropriate, use of terminfo is indicated.

A program writing at the terminfo level uses the framework shown in
Figure 12-4.


_____________________________________________________________

#include <CURSES.h>
#include <term.h>
...
	setupterm(NULL, 1, NULL);
	...
	putp(clear_screen);
	...
	reset_shell_mode();
	exit(0);

Figure 12-4 Terminfo level framework
_____________________________________________________________


Initialization is done by calling setupterm.  Passing the values
NULL, 1, and NULL invoke reasonable defaults.  If setupterm can't
figure out what kind of terminal you are on, it will print an error
message and exit.  The program should call reset_shell_mode before it
exits.

Global variables with names like clear_screen and cursor_address are
defined by the call to setupterm.  They can be output using putp, or
also using tputs, which allows the programmer more control.  These
strings should not be directly output to the terminal using printf
since they contain padding information.  A program that directly
outputs strings will fail on terminals that require padding, or that
use the xon/xoff flow control protocol.

In the terminfo level, the higher level routines described previously
are not available.  It is up to the programmer to output whatever is


needed.  For a list of capabilities and a description of what they
do, see terminal_information.gi.info.

The example program termhl shows simple use of terminfo.  It is a
version of highlight that uses terminfo instead of CURSES.  This
version can be used as a filter.  The strings to enter bold and
underline mode, and to turn off all attributes, are used.

This program is more complex than it need be in order to illustrate
some properties of terminfo.  The routine vidattr could have been
used instead of directly outputting enter_bold_mode,
enter_underline_mode, and exit_attribute_mode.  In fact, the program
would be more robust if it did since there are several ways to change
video attribute modes.  This program was written to illustrate
typical use of terminfo.


The function tputs(cap, affcnt, outc) applies padding information.
Some capabilities contain strings like $<20>, which means to pad for
20 milliseconds.  tputs generates enough pad characters to delay for
the appropriate time.  The first parameter is the string capability
to be output.  The second is the number of lines affected by the
capability.  (Some capabilities may require padding that depends on
the number of lines affected.  For example, insert_line may have to
copy all lines below the current line, and may require time
proportional to the number of lines copied.  By convention affcnt is
1 if no lines are affected.  The value 1 is used, rather than 0, for
safety, since affcnt is multiplied by the amount of time per item,
and anything multiplied by 0 is 0.) The third parameter is a routine
to be called with each character.


For many simple programs, affcnt is always 1 and outc always just
calls putchar.  For these programs the routine putp(cap) is a
convenient abbreviation.  termhl could be simplified by using putp.

Note also the special check for the underline_char capability.  Some
terminals, rather than having a code to start underlining and a code
to stop underlining, have a code to underline the current character.
termhl keeps track of the current mode, and if the current character
is supposed to be underlined, will output underline_char if
necessary.  Low level details such as this are precisely why the
CURSES level recommended over the terminfo level.  CURSES takes care
of terminals with different methods of underlining and other CRT
functions.  Programs at the terminfo level must handle such details
themselves.


Editor:

For a final example, see the program editor.  This program is a very
simple screen editor, patterned after the vi editor.  The program
illustrates how to use CURSES to write a screen editor.  This editor
keeps the buffer in stdscr to keep the program simple - obviously a
real screen editor would keep a separate data structure.  Many
simplifications have been made here - no provision is made for files
of any length other than the size of the screen, for lines longer
than the width of the screen, or for control characters in the file.

Several points about this program are worth making.  The routine to
write out the file illustrates the use of the mvinch function, which
returns the character in a window at a given position.  The data
structure used here does not have a provision for keeping track of


the number of characters in a line, or the number of lines in a file,
so trailing blanks are eliminated when the file is written out.

The program uses built-in CURSES functions insch, delch, insertln,
and deleteln.  These functions behave much as the similar functions
on intelligent terminals behave, inserting and deleting a character
or line.

The command interpreter accepts not only ASCII characters, but also
special keys.  This is important - a good program will accept both.
(Some editors are modeless, using non-printing characters for
commands.  This is largely a matter of taste - the point being made
here is that both arrow keys and ordinary ASCII characters should be
handled.) It is important to handle special keys because this makes
it easier for a new user to learn to use your program if he can


use the arrow keys, instead of having to memorize that "h" means
left, "j" means down, "k" means up, and "1" means right.  On the
other hand, not all terminals have arrow keys, so your program will
be usable on a larger class of terminals if there is an ASCII
character which is a synonym for each special key.  Also, experienced
users dislike having to move their hands from the "home row" position
to use special Keys, since they can work faster with alphabetic keys.

Note the call to mvaddstr in the input routine.  addstr is roughly
like the C fputs function, which writes out a string of characters.
Like fputs, addstr does not add a trailing newline.  It is the same
as a series of calls to addch using the characters in the string.
mvaddstr is the mv version of addstr, which moves to the given
location in the window before writing.


The control-R command illustrates a feature most programs using
CURSES should add.  Often some program beyond the control of CURSES
has written something to the screen, or some line noise has messed up
the screen beyond what CURSES can keep track of.  In this case, the
user usually types control-L, causing the screen to be cleared and
redrawn.  This is done with the call to clearok(curscr), which sets a
flag causing the next refresh to first clear the screen.  Then
refresh is called to force the redraw.

Note also the call to flash(), which flashes the screen if possible,
and otherwise rings the bell.  Flashing the screen is intended as a
bell replacement, and is particularly useful if the bell bothers
someone within earshot of the user.  The routine beep() can be called
when a real beep is desired.  (If for some reason the terminal is
unable to beep, but can flash, a call to beep will flash the screen.)


Another important point is that the input command is terminated by
control-D or '.', not escape.  It is very tempting to use escape as a
command, since escape is one of the few special keys which is
available on every keyboard.  (Return and break are the only others.)
However, using escape as a separate key introduces an ambiguity.
Most terminals use sequences of characters beginning with escape
("escape sequences") to control the terminal, and have special keys
that send escape sequences to the computer.  If the computer sees and
escape coming from the terminal, it cannot tell for sure whether the
user pushed the escape key, or whether a special key was pressed.
CURSES handles the ambiguity by waiting for up to one second.  If
another character is received during this second, and if that
character might be the beginning of a special key, more input is read
(waiting for up to one second for each character) until either a full
special key is read, one second passes, or a character is


received that could not have been generated by a special key.  While
this strategy works most of the time, it is not foolproof.  It is
possible for the user to press escape, then to type another key
quickly, which causes CURSES to think a special key has been pressed.
Also, there is a one second pause until the escape can be passed to
the user program, resulting in slower response to the escape key.
Many existing programs use escape as a fundamental command, which
cannot be changed without infuriating a large class of users.  Such
programs cannot make use of special keys without dealing with this
ambiguity, and at best must resort to a timeout solution.  The moral
is clear: when designing your program, avoid the escape key.








