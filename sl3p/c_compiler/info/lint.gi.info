06/18/88  LINT

Name:

         lint -- a C program checker


Synopsis:

         lint [-abhlnpuvx] [-DUI] files


Description:

LINT  attempts  to  detect  features  of  the C program files that are
likely  to  be  bugs,  non-portable, or wasteful.  It also checks type
usage  more  strictly  than  the  compiler.  Among the things that are
currently  detected  are  unreachable statements, loops not entered at
the  top,  automatic  variables  declared  and  not  used, and logical
expressions whose value is constant.  Moreover, the usage of functions
is checked to find functions that return values in some places and not
in   others,  functions  called  with  varying  numbers  or  types  of
arguments, and functions whose values are not used or whose values are
used but none returned.


Options:

Any number of LINT options may be used in any order, intermixed with
filename arguments.  The following options are used to suppress
certain kinds of complaints.

-a  Suppress complaints about assignments of long values to
    variables that are not long.

-b  Suppress complaints about "break" statements that cannot be
    reached.  (Programs produced by lex or yacc will often result in
    many such complaints).

-h  Do not apply heuristic test that attempt to intuit bugs, improve
    style, and reduce waste.


-u  Suppress complaints about functions and external variables used
    and not defined, or defined and not used.  (This option is
    suitable for running LINT on a subset of files of a larger
    program).

-v  Suppress complaints about unused arguments in functions.

-x  Do not report variables referred to by external declarations but
    never used.


The following arguments alter LINT's behavior.

-lx  Include additional lint library llib-lx.ln.  For example, you can
     include  a  lint  version  of  the  Math  Library  llib-lm.ln  by
     inserting  -lm  on  the  command  line.   This  argument does not
     suppress the default use of llib-lc.ln.  This option can be used
     to   reference   local  lint  libraries  and  is  useful  in  the
     development of multi-file projects.

-n   Do  not  check  compatibility  against either the standard or the
     portable lint library.


-p   Attempt  to  check portability to other dialects (IBM and GCOS)
     of  C.  Along with stricter checking, this option causes all non-
     external  names  to  be  truncated  to  eight  characters and all
     external names to be truncated to six characters and one case.

-c  Cause LINT to produce a .ln file for every .c file on the command
    line.  These .ln  files are the product of LINT's first pass only,
    and are not checked for inter-function compatibility.


-o lib Cause LINT to create a lint library with the name llib-llib.ln.
     The  -c  option  nullifies  any use of the -o option.  The lint
     library  produced  is  the  input  that is given to LINT's second
     pass.   The  -o option simply causes this file to be saved in the
     named lint library.  To produce a llib-llib.ln without extraneous
     messages,  use  of  the -x option is suggested.  The -v option is
     useful  if  the  source  file(s)  for  the  lint library are just
     external  interfaces  (for  example,  the way the file llib-lc is
     written).   These  option settings are also available through the
     use of "lint comments" (see below).


The -D, -U, and -I options of C preprocessor (cpp) are also recognized
as  separate  arguments.   Other options are warned about and ignored.
The   pre-processor   symbol   "lint"  is  defined  to  allow  certain
questionable  code  to be altered or removed for LINT.  Therefore, the
symbol  "lint"  should  be  thought of as a reserved word for all code
that is planned to be checked by LINT.


Invoking Lint:

Arguments  whose  names  end  with  .c are taken to be C source files.
Arguments  whose  names  end with .ln are taken to be the result of an
earlier invocation of LINT with either the -c or the -o option used.

The  .ln  files are analogous to .cob (object) files that are produced
by  the  c_compile  (cc) command when given a .c file as input.  Files
with other suffixes are warned about and ignored.

LINT  will  take  all  the  .c, .ln, and llib-lx.ln (specified by -lx)
files  and process them in their command line order.  By default, LINT
appends  the  standard  C  lint library (llib-lc.ln) to the end of the
list of files.  However, if the -p option is used, the portable C lint
library (llib-port.ln) is appended instead.  When the -c option is not
used,  the  second  pass  of LINT checks this list of files for mutual
compatibility.  When the -c option is used, the .ln and the llib-lx.ln
files are ignored.


Source Comments:

Certain conventional comments in the C source will change the behavior
of LINT.

          /*NOTREACHED*/
               at appropriate points stops comments about unreachable
               code.  (This comment is typically placed just after
               calls to functions like exit() ).

          /*VARARGSn*/
               suppresses the usual checking for variable numbers of
               arguments in the following function declaration.  The
               data types of the first n arguments are checked; a
               missing n is taken to be 0.


          /*ARGSUSED*/
               turns on the -v options for the next function.

          /*LINTLIBRARY*/
               at the beginning of a file shuts off complaints about
               unused functions and function arguments in this file.
               This is equivalent to using the -v and -x options.


Diagnostics:

LINT produces its first output on a per-source-file basis.  Complaints
regarding  included  files  are collected and printed after all source
files  have  been  processed.   Finally, if the -c option is not used,
information gathered from all input files is collected and checked for
consistency.   At  this  point, if it is not clear whether a complaint
stems  from a given source file or from one of its included files, the
source file name will be printed followed by a question mark.


The  behavior  of  the -c and -o options allows for incremental use of
LINT on a set of C source files.  Generally, one invokes LINT once for
each  source  file  with  the  -c  option.   Each of these invocations
produces  a  .ln file which corresponds to the .c file, and prints all
messages  that  are about just that source file.  After all the source
files  have  been separately run through LINT, it is invoked once more
(without the -c option), listing all the .ln files with the needed -lx
options.   This  will  print all the inter-file inconsistencies.  This
scheme  works  well  with MAKE; it allows MAKE to be used to LINT only
the  source  files that have been modified since the last time the set
of source files were LINTed.

