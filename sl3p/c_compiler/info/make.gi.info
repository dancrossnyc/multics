06/18/88  MAKE

Name:

make -- maintain, update, and regenerate groups of programs


Synopsis:

make [-f makefile] [-piksrnbemtdq] [names]


Description:

The following is a brief description of all options and some special
names.

-f MAKEFILE  Description file name.  MAKEFILE is assumed to be the
             name of a description file.  A file name of - denotes
             the standard input.  The contents of MAKEFILE override
             the built-in rules if they are present.

-p           Print out the complete set of macro definitions and
             target descriptions.


-i           Ignore error codes returned by invoked commands.  This
             mode is entered if the fake target name .IGNORE appears
             in the description file.

-k           Abandon work on the current entry, but continue on other
             branches that do not depend on that entry.

-s           Silent mode.  Do not print command lines before
             executing.  This mode is also entered if the fake target
             name .SILENT appears in the description file.

-r           Do not use the built-in rules.

-n           No execute mode.  Print commands, but do not execute
             them.  Even lines beginning with an @ are printed.


-b           Compatibility mode for old makefiles.

-e           Environment variables override assignments within
             makefiles.

-t           Touch the target files (causing them to be up-to-date)
             rather than issue the usual commands.

-d           Debug mode.  Print out detailed information on files
             and times examined.


-q           Question.  The MAKE command returns a zero or non-zero
             status code depending on whether the target file is or
             is not up-to-date.


.DEFAULT     If a file must be made but there are no explicit commands
             or relevant built-in rules, the commands associated with
             the name .DEFAULT are used it it exists.

.PRECIOUS    Dependents of this target will not be removed when quit
             or interrupt are hit.

.SILENT      Same effect as the -s option.

.IGNORE      Same effect as the -i option.


MAKE executes commands in MAKEFILE to update one or more target NAMES.
NAME  is typically a program.  If no -f option is present, "makefile",
and  then  "Makefile"  are  tried  in  order.   If  MAKEFILE is -, the
standard  input  is taken.  More than one - MAKEFILE argument pair may
appear.

MAKE  updates  a  target  only  if  its  dependents are newer than the
target.   All  prerequisite files of a target are added recursively to
the list of targets.  Missing files are deemed to be out-of-date.


MAKEFILE  contains  a  sequence  of entries that specify dependencies.
The  first  line  of  an  entry is a blank-separated, non-null list of
targets,  then  a :, then a (possibly null) list of prerequisite files
or  dependencies.   Text  following  a  ; and all following lines that
begin  with  a  tab  are commands to be executed to update the target.
The  first  line  that  does  not  begin  with a tab or # begins a new
dependency  or  macro  definition.   Commands  may be continued across
lines  with the <backslash><new-line> sequence.  Everything printed by
MAKE  (except  the  initial  tab)  is  passed  directly to the command
processor. Thus,

	echo a\
	b
will produce
	ab

Sharp(#) and new-line surround comments.


The following MAKEFILE says that pgm depends on two files a.cob and b.cob,
and  that they in turn depend on their corresponding source files (a.c
and b.c) and a common file incl.h.

          pgm: a.cob b.cob
          	cc a.cob b.cob -of pgm
          a.cob: incl.h a.c
          	cc a.c -spaf alm
          b.cob: incl.h b.c
          	cc b.c -spaf alm


Command  lines  are  executed  one  at  a  time.  The first one or two
characters  in  a command can be the following: -, @, -@, or @-.  If @
is  present,  printing of the command is suppressed.  If - is present,
MAKE  ignores  an error.  A line is printed when it is executed unless
the  -s  option  is  present, or the entry .SILENT: is in MAKEFILE, or
unless  the  initial  character sequence contains a @.  The -n options
specifies printing without execution; however, if the command line has
the  string $(MAKE) in it, the line is always executed (see discussion
of  the  MAKEFLAGS  macro under "Environment").  The -t (touch) option
updates the modified date of a file without executing any commands.
(See the documentation for the TOUCH command).


Commands returning non-zero status normally terminate MAKE.  If the -i
option  is  present, or the entry .IGNORE: appears in MAKEFILE, or the
initial  character  sequence  of  the command contains -, the error is
ignored.   If  the  -k  option  is  present,  work is abandoned on the
current  entry,  but continues on other branches that do not depend on
that entry.

The  -b option allows old makefiles (those written for the old version
of  MAKE)  to  run  without  errors.   The  difference between the old
version  of  MAKE  and  this version is that this version requires all
dependency  lines  to  have  a  (possibly  null  or  implicit) command
associated  with  them.   The  previous version of MAKE assumed, if no
command was specified explicitly, that the command was null.


Environment:

The  environment  is  read  by  MAKE.  All variables are assumed to be
macro  definitions  and  processed as such.  The environment variables
are  processed before any makefile and after the internal rules; thus,
macro  assignments  in a makefile override environment variables.  The
-e  option causes the environment to override the macro assignments in
a makefile.


The  MAKEFLAGS environment variable is processed by MAKE as containing
any legal input option (except -f, -p, and -d) defined for the command
line.   Further, upon invocation, MAKE "invents" the variable if it is
not  in  the environment, puts the current options into it, and passes
it  on to invocation of commands.  Thus, MAKEFLAGS always contains the
current input options.  This proves very useful for "super-makes".  In
fact,  as noted above, when the -n option is used, the command $(MAKE)
is  executed anyway; hence, one can perform a make -n recursively on a
whole  software  system to see what would have been executed.  This is
because  the  -n is put in MAKEFLAGS and passed to further invocations
of  $(MAKE).   This is one way of debugging all of the makefiles for a
software project without actually doing anything.


Macros:

Entries of the form string1=string2 are macro definitions.  String2 is
defined  as  all  characters up to a comment character or an unescaped
new-line.   Subsequent appearances of $(string1[:subst1=[subst2]]) are
replaced  by  string2.   The  parentheses  are  optional  if  a single
character  macro name is used and there is no substitute sequence.  If
it  is  specified,  all  non-overlapping  occurrences of subst1 in the
named macro are replaced by subst2.  Strings (for the purposes of this
type   of  substitution)  are  delimited  by  blanks,  tabs,  new-line
characters,  and  beginnings  of  lines.


Internal macros:

There  are  five  internally  maintained  macros  which are useful for
writing rules for building targets.

$*  The  macro  $*  stands  for  the  file  name  part  of the current
    dependent  with  the  suffix  deleted.   It  is evaluated only for
    inference rules.

$@  The $@ macro stands for the full target name of the current target.
    It is evaluated only for explicitly named dependencies.


$<  The $< macro is only evaluated for inference rules or the .DEFAULT
    rule.  It is the module which is out-of-date with respect to the
    target (i.e., the "manufactured" dependent file name).  Thus, in
    the .c.cob rule, the $< macro would evaluate to the .c file.  An
    example for making .cob files from .c files is

          .c.cob:
                              cc $*.c -spaf alm
OR
          .c.cob:
                              cc $< -spaf alm


$?  The $? macro is evaluated when explicit rules from the makefile
    are   evaluated.   It  is  the  list  of  prerequisites  that  are
    out-of-date with respect to the target; essentially, those modules
    which must be rebuilt.

$%  The  $%  macro  is  only  evaluated  when the target is an archive
    library  member  of  the  form  lib(file.cob).   In  this case, $@
    evaluates to lib and $% evaluates to the library member, file.cob.

Four  of  the  five  macros can have alternative forms.  When an upper
case  D  or  F  is  appended to any of the four macros, the meaning is
changed  to "directory part" for D and "file part" for F.  Thus, $(@D)
refers  to  the  directory  part  of  the  string  $@.  If there is no
directory  part,  the  working directory is generated.  The only macro
excluded  from  this alternative form is $?.  The reasons for this are
debatable.


Suffixes:

Certain  names  (for  instance, those ending with .cob) have inferable
prerequisites  such as .c, etc.  If no update commands for such a file
appear  in  MAKEFILE,  and  if  an inferable prerequisite exists, that
prerequisite  is  compiled to make the target.  In this case, MAKE has
inference  rules  which  allow  building  files  from  other  files by
examining  the  suffixes and determining an appropriate inference rule
to use.  The current default inference rules are

          .c, .c.cob, .alm.cob, .y.cob, .l.cob, .y.c, .l.c


A  rule  with  only one suffix (i.e., .c) is the definition of how to
build  x  from  x.c.   In  effect,  the other suffix is null.  This is
useful  for  building  targets  from only one source file (e.g., shell
procedures, simple C programs).


Additional  suffixes  are  given as the dependency list for .SUFFIXES.
Order  is  significant;  the first possible name for which both a file
and a rule exist is inferred as a prerequisite.  The default list is

          .SUFFIXES: .cob .c .y .l .alm .h

Multiple  suffix  lists  can  accumulate.   To  clear the suffix list,
define  a  target  .SUFFIXES which has no dependencies.  Note that the
suffix  .o  has been replaced by .cob, and that .alm replaces .s.  See
the documentation for the C compiler (cc).


Inference Rules:

The first example can be done more briefly.

          pgm: a.cob b.cob
          	cc a.cob b.cob -of pgm
          a.cob b.cob: incl.h

This  is  because MAKE has a set of internal rules for building files.
The  user  may  add  rules  to this list by simply putting them in the
MAKEFILE. (Such as rules for building PL/1 objects)


Certain  macros  are used by the default inference rules to permit the
inclusion  of optional matter in any resulting commands.  For example,
CFLAGS,  LFLAGS,  and  YFLAGS  are  used for compiler options to the C
compiler, LEX, and YACC, respectively.

The  inference of prerequisites can be controlled.  The rule to create
a  file with suffix .cob from a file with suffix .c is specified as an
entry  with  .c.cob:  as  the  target  and  no  dependents.   Commands
associated with the target define the rule for making a .cob file from
a .c file.  Any target that has no ">" in it and starts with a dot
is identified as a rule and not a true target.


DIFFERENCES:

The  following  is  a  summary  of the differences between between the
Multics version of MAKE and a typical Unix version.

Unix-type  archive  libraries  are  not  supported  on Multics.  Thus,
makefiles  containing  library  references  such as $(LIB)(file.o) are
illegal.   The  internal  rules and suffixes supporting these have not
been implemented.

Unix-type  SCCS  (Source Code Control System) files are not supported.
Again,  the  internal rules and suffixes supporting this have not been
implemented.   (The  GET  macro is still defined as "get", but no such
Multics command exists).

Multics search rules, rather than the environment variable PATH is
used to find commands.


Commands  are  passed directly to the command processor. This creates
several differences.

    * Active functions and abbrevs used in commands are expanded.

    * Each command is NOT executed in a separate subshell, so
      commands that alter the environment (such as cwd) may affect
      later commands.
