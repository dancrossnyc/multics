/* BEGIN INCLUDE FILE...imft_logical_record.incl.pl1 */

/* Defines an IMFT logical record. Such records are passed by imft_io_ to the
   write_record entries of imft_COMM_ I/O modules, and returned by the read_record
   entries of such modules. */

/* Written January 4, 1983 by Robert Coren */

declare ilr_ptr pointer;
declare imft_logical_record_length fixed bin (21);

declare 1 imft_logical_record aligned based (ilr_ptr),
        2 header,
	3 version char (8),
	3 type fixed bin,				/* types are defined in _imft_std_commands.incl.pl1 */
	3 length fixed bin (21),			/* in characters */
	3 flags,
	  4 binary bit (1) unaligned,			/* ON => record contains characters with 9th bit on */
	  4 eight_bit bit (1) unaligned,		/* ON => record contains characters with 8th bit on */
	  4 pad bit (34) unaligned,
        2 contents character (imft_logical_record_length refer (imft_logical_record.length));

/* NOTE: flags.binary and flags.eight_bit should never both be on in the same
   record. If neither is on, every character in the record fits in 7 bits.
*/

dcl  1 imft_logical_record_header aligned like imft_logical_record.header;
						/* so we can use size builtin on it */

declare  IMFT_LOGICAL_RECORD_VERSION_1 char (8) internal static options (constant) init ("ILR_0001");

declare IMFT_MAX_RECORD_LENGTH fixed bin (21) internal static options (constant) init (4096);

/* END INCLUDE FILE...imft_logical_record.incl.pl1 */
