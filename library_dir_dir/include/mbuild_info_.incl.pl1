/*  START OF:	mbuild_info_.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

  
/****^  HISTORY COMMENTS:
  1) change(2019-08-17,GDixon), approve(2019-10-24,MCR10069),
     audit(2020-01-20,Swenson), install(2020-01-20,MR12.6g-0035):
     Declarations for the seg_type, paradigm, and mbuild thread names described
     by the data structures in mbuild_info_.cds.
                                                   END HISTORY COMMENTS */


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* Name:  mbuild_info_.incl.pl1						        */
	/*									        */
	/* Function:  declare structures to hold data which tailors operations of the mbuild subsystem.   */
	/*									        */
	/* Notes:									        */
	/*  The seg_types and bld_paradigms substructures may be displayed using the mbuild_type	        */
	/*  command/active function.  The thread_selectors and thread_summary substructures are used      */
	/*  only within mbuild error messages and usage information messages.			        */
	/*									        */
	/*  Data populating these structures is defined in the mbuild_info_.cds file.		        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

  dcl mbuild_info_$seg_types fixed bin external static;

  dcl 1 mbuild_info		         aligned based (addr (mbuild_info_$seg_types)),
        2 seg_types,
	3 segN		         fixed bin,
	3 seg_type_info	         (0 refer (mbuild_info.seg_types.segN)),
	  4 type_ID	         fixed bin,		/* numeric identifier for this seg_type array entry.      */
	  4 source_starname          char (32) var,       /* e.g., **.pl1, **.incl.pl1, bound_*.**.s.archive        */
	  4 description	         char (60) var,	/* content of segs having this source_suffix.	        */
	  4 mbuild_type	         char (20) var,	/* mbuild Seg(<type>) field value for this segment type.  */
	  4 build_paradigm	         fixed bin,		/* index of build/install paradigm for this source_suffix */
	  4 compiler	         char (32) var,	/* name of compiler/translator for this seg (if any)      */
	  4 default_compile_options  char (32) var,	/* options used when building to install in Multics libs. */
	  4 intermediate_suffix      char (12) var,	/* suffix of intermediate file generated by compiler      */
	  4 object_suffix	         char (12) var,	/* suffix of seg generated by compiler		        */
	  4 default_library          char (32) var,	/* default library which holds this type of file	        */
						/*  (used when adding new files).		        */
        2 bld_paradigms,
          3 paradigmN                  fixed bin,
	3 bld_paradigm_info	         (0 refer (mbuild_info.bld_paradigms.paradigmN)),
	  4 name		         char(32) var,	/* ex: compile, source_x_only, ...		        */
						/*  Names never contain periods or spaces.	        */
	  4 purpose	         char(76) var,	/* what does this build_type do.		        */
	  4 examples	         char(70) var,	/* typical seg types using this paradigm.	        */
	  4 steps		         char(1600) var,	/* steps involved in paradigm			        */

        2 thread_selectors,
          3 selectorN,
	3 selector_info              (0 refer (mbuild_info.thread_selectors.selectorN)),
	  4 sel_ID	         char(16) var,	/* selector ID string			        */
	  4 sel_value	         fixed bin,		/* selector value: one of the following constants:        */
        2 thread_summary,
	3 summaryN fixed bin,
	3 selector_summary           (0 refer (mbuild_info.thread_summary.summaryN)) char(32) var;
						/* Summary of sel_ID possible values for error msg.       */

  dcl (PDM_source            	         init(1),		/* Compile, schedule bind, if part of bound seg;	        */
						/*  otherwise, install in ldd and x dirs.	        */
       PDM_bindfile          	         init(2),		/* Bind instructions, only found in bound obj archive.    */
						/*  (ex: bound_pl1_.bind)			        */
       PDM_source_arch       	         init(3),		/* No compile, just install in ldd source dir.	        */
						/*  (ex: bound_pl1_.**.s.archive)		        */
       PDM_object_arch       	         init(4),		/* Bind a bound seg; install source/object archives in    */
						/*  ldd; install bound object in x dir.		        */
       PDM_Bound_obj         	         init(5),		/* Install executable bound segment in x dir.	        */
						/*  (ex: bound_pl1_)			        */
       PDM_Unbound_obj       	         init(6),		/* Install unbound object in x dir.		        */
						/*  (ex: hcs_ compiled from hcs_.alm)		        */
       PDM_target_only       	         init(7),		/* No compiles; just install in target dir.	        */
						/*  (ex: info segs, include files, bound_xxx_.s.archive)  */
       PDM_listing           	         init(8),		/* No compiles; just install in listing.	        */
						/*  (ex: pl1.list, probe.list, hcs_.list)	        */
       PDM_source_x_only     	         init(9),		/* No compile, just install in ldd source and x dirs.     */
						/*  (ex: admin.ec, >ldd>unb>s>tss_basic_::*.basic)        */
       PDM_object_x_only     	         init(10),		/* No compile or archive; install in ldd object and x.    */
						/*  (ex: TTF.ttf, pl1.dcl)			        */
       PDM_mbuild_support    	         init(11),		/* No compile or archive or install; support file created */
						/*  or used by the mbuild subsystem.		        */
						/*  (ex: MCR10056.mb, MCR10056.mb.il)		        */

       SEG_INTERMEDIATE      	         init(12),		/* Seg-specific thread types.			        */
       SEG_scan	         	         init(13),		

       STRUCT_BOUNDOBJ       	         init(14),		/* Per-Structure thread types.		        */
       STRUCT_COMPILE        	         init(15),		
       STRUCT_Seg            	         init(16),		
       STRUCT_UNBOUNDOBJ     	         init(17)		
         ) fixed bin int static options(constant);

  dcl 1 segt aligned like mbuild_info.seg_types.seg_type_info based(segtP),
       segtP ptr;

  dcl 1 pdm aligned like mbuild_info.bld_paradigms.bld_paradigm_info based(pdmP);
  dcl  pdmP ptr;

  dcl 1 seg_type_switches aligned,			/* Switches to select structure elements for display.     */
        2 (source_starnameS,
           descriptionS,
	 mbuild_typeS,
           build_paradigmS,
	 build_stepsS,
           compilerS,
           default_compile_optionsS,
           intermediate_suffixS,
           object_suffixS,
           default_libraryS
           ) bit(1) unaligned,
        2  pad bit(26) unaligned;

  dcl 1 bld_paradigm_switches aligned,			/* Switches to select structure elements for display.     */
        2 (nameS,
           purposeS,
           examplesS,
           stepsS
           ) bit(1) unaligned,
        2  pad bit(32) unaligned;


/* ----------------------------------------------------------------------
   Threads anchored in build_data structure (see mbuild_data_.incl.pl1):
     
    build_data.XXX_Tb   Structure      Selector ID            Purpose
     XXX can be
    -----------------  ------------   ----------------       --------------------
     BOUNDOBJ          BOUNDOBJ       BOUNDOBJ, BND          All BOUNDOBJ structures.
     COMPILE           COMPILE        COMPILE, COMP          All COMPILE structures.
     UNBOUNDOBJ        UNBOUNDOBJ     UNBOUNDOBJ, UNBND      All UNBOUNDOBJ structures.
     Seg               Seg            Seg, seg               All Seg structures.

     Unbound_obj       Seg            Unbound_obj, Unb       All Seg(Unbound_obj) structures.
     Bound_obj         Seg            Bound_obj, Bnd         All Seg(Bound_obj) structures.
     bindfile          Seg            bindfile, bind         All Seg(bindfile) structures.
     object_arch       Seg            object_arch, oArch     All Seg(object_arch) structures.
     source_arch       Seg            source_arch, sArch     All Seg(source_arch) structures.
     source            Seg            source, src            All Seg(source) structures, except intermediate sources.
     listing           Seg            listing, list          All Seg(listing) structures.
     mbuild_support    Seg            support, sup           All Seg(Build_xxx) structures.
     target_only       Seg            target_only, target    All Seg(...) structures except those above.
     object_x_only     Seg            object_x, o.x	 All Seg(...) structures for object_x paradigm segs.

     scan              Seg	        scan	           Segments found in install dir before building; never cleaned!
     INTERMEDIATE      Seg	        INTERMEDIATE, inter    Some Seg(source) structures that aren't installed.
   ---------------------------------------------------------------------- */

/*  END OF:	mbuild_info_.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
