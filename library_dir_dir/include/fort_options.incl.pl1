/* BEGIN INCLUDE FILE fort_options.incl.pl1  */

/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1987 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-07-14,BWong), approve(86-07-14,MCR7382), audit(86-07-17,Ginter),
     install(86-07-28,MR12.0-1105):
     Fix fortran bug 473.
  2) change(87-06-23,RWaters), approve(87-06-23,MCR7703), audit(87-07-10,Huen),
     install(87-08-06,MR12.1-1069):
     Implemented SCP 6315: fortran error-handling argument.
                                                   END HISTORY COMMENTS */


/*
          Modified: 12 May 87 by RWaters added debug_io
	Modified: 19 February 1986 by B. Wong & A. Ginter - 473.a: Correct
		comments and size of pad field in fort_declared
		and pad out dfast and fast bit masks to two words.
	Modified: 09 October 1985 by B. Wong - 473: add VLA_auto, VLA_static,
		VLA_parm, VLC, LA_auto, and LA_static.  Remove VLA and LA.
	Modified: 28 March 1984 by M. Mabey - Install HFP support.
	Modified: 21 September 1983 by M. Mabey - correct size of pad field in  fortran_declared.
	Modified: 16 May 1983 by M. Mabey - add fortran_declared
	Modified: 18 December 1982 by T. Oke - Add 'long_profile'.
	Modified: 22 September 1982 by T. Oke - add VLA and LA
	Modified:  3 May  1982 by T. Oke - add check_multiply
	Modified: 06/24/81 by S. Herbst - add do_rounding & auto_zero to fast_mask and dfast_mask
	Modified: 26 February 1980 by C R Davis - add fast_mask,  fix dfast_mask.
	Modified: 31 January 1980 by C R Davis - add stringrange.
	Modified: 13 September 1979 by Paul E. Smee--add ansi_77.
	Modified: 05 December 1978 by Paul E. Smee--add do_rounding, auto_zero.
	Modified:	25 January 1978 by Richard A. Barnes for the loop optimizer
*/

declare

    1 fortran_options aligned based,
      2 use_library bit (1) unaligned,		/* (1) ON if library statements will be parsed */
      2 optimize bit (1) unaligned,		/* (2) ON if optimized code is to be produced */
      2 time bit (1) unaligned,		/* (3) ON for compile timing */
      2 source_format unaligned,
        3 has_line_numbers bit (1) unaligned,	/* (4) ON if each line begins with a line number */
        3 fold bit (1) unaligned,		/* (5) ON if variable names are to be folded to lowercase */
        3 card bit (1) unaligned,		/* (6) ON for card format */
        3 convert bit (1) unaligned,		/* (7) ON for card format to be converted */
      2 listing unaligned,
        3 source bit (1) unaligned,		/* (8) ON for listing of numbered source */
        3 symbol bit (1) unaligned,		/* (9) ON for listing with symbol map */
        3 map bit (1) unaligned,		/* (10) ON for listing with statement map */
        3 list bit (1) unaligned,		/* (11) ON for listing with assembler instructions */
      2 error_messages unaligned,
        3 brief bit (1) unaligned,		/* (12) ON for brief error messages */
        3 severity fixed bin (3),		/* (13-16) suppresses messages below this severity */
      2 debugging unaligned,
        3 subscriptrange bit (1) unaligned,	/* (17) ON for subscript range checking */
        3 stringrange bit (1) unaligned,	/* (18) ON for string range checking */
        3 brief_table bit (1) unaligned,	/* (19) ON for statement table */
        3 table bit (1) unaligned,		/* (20) ON for statement and symbol table */
        3 profile bit (1) unaligned,		/* (21) ON to generate code to meter statements */
        3 check bit (1) unaligned,		/* (22) ON for syntactic and semantic checking only */
      2 system_debugging unaligned,
        3 stop_after_cg bit (1) unaligned,	/* (23) ON if debug stop after code generator */
        3 stop_after_parse bit (1) unaligned,	/* (24) ON if debug stop after parse */
      2 relocatable bit (1) unaligned,		/* (25) ON if relocatable object segment generated */
      2 optimizing unaligned,
        3 time_optimizer bit (1) unaligned,	/* (26) ON if timings for optimizer requested */
					/* (27) ON if optimizer can loosen safety constraints */
        3 ignore_articulation_blocks bit (1) unaligned,
        3 consolidate bit(1) unaligned,		/* (28) ON if optimizer should run consolidation phase */
      2 do_rounding bit(1) unaligned,		/* (29) ON if floating point round should be used */
      2 auto_zero bit(1) unaligned,		/* (30) ON if auto storage should be zeroed when allocated */
      2 ansi_77 bit (1) unaligned,		/* (31) ON if ansi77 rules are to be followed */
      2 check_multiply bit (1) unaligned,	/* (32) ON if check integer multiply extent */
      2 VLA_auto bit (1) unaligned,		/* (33) ON if auto VLA's being done */
      2 VLA_parm bit (1) unaligned,		/* (34) ON if parm VLA's being done */
      2 VLA_static bit (1) unaligned,		/* (35) ON if static VLA's being done */
      2 VLC bit (1) unaligned,		/* (36) ON if VLC's being done */
      2 LA_auto bit (1) unaligned,		/* (1)  ON if auto LA's being done */
      2 LA_static bit (1) unaligned,		/* (2)  ON if static LA's being done */
      2 long_profile bit (1) unaligned,		/* (3)  ON to generate long_profile */
      2 static_storage bit (1) unaligned,	/* (4)  ON if static storage */
      2 hfp bit (1) unaligned,		/* (5)  ON if using hex floating point math */
      2 debug_io bit (1) unaligned,               /* (6) */
      2 pad bit(30) unaligned;		/* (7-36) Pad bits */

declare

   1  fortran_declared aligned based,
      2  ansi66 bit(1) unaligned,		/* (1) First word */
      2  ansi77 bit(1) unaligned,		/* (2) */
      2  auto bit(1) unaligned,		/* (3) */
      2  auto_zero bit(1) unaligned,		/* (4) */
      2  brief bit(1) unaligned,		/* (5) */
      2  binary_floating_point bit(1) unaligned,	/* (6) */
      2  brief_table bit(1) unaligned,		/* (7) */
      2  card bit(1) unaligned,		/* (8) */
      2  check bit(1) unaligned,		/* (9) */
      2  check_multiply bit(1) unaligned,	/* (10) */
      2  consolidate bit(1) unaligned,		/* (11) */
      2  debug bit(1) unaligned,		/* (12) */
      2  debug_cg bit(1) unaligned,		/* (13) */
      2  debug_io bit(1) unaligned,		/* (14) */
      2  default_full bit(1) unaligned,		/* (15) */
      2  default_safe bit(1) unaligned,		/* (16) */
      2  fold bit(1) unaligned,		/* (17) */
      2  free bit(1) unaligned,		/* (18) */
      2  full_optimize bit(1) unaligned,	/* (19) */
      2  hexadecimal_floating_point bit(1) unaligned,
					/* (20) */
      2  la_auto bit(1) unaligned,		/* (21) */
      2  la_static bit(1) unaligned,		/* (22) */
      2  large_array bit(1) unaligned,		/* (23) */
      2  line_numbers bit(1) unaligned,		/* (24) */
      2  list bit(1) unaligned,		/* (25) */
      2  long bit(1) unaligned,		/* (26) */
      2  long_profile bit(1) unaligned,		/* (27) */
      2  map bit(1) unaligned,		/* (28) */
      2  no_auto_zero bit(1) unaligned,		/* (29) */
      2  no_check bit(1) unaligned,		/* (30) */
      2  no_fold bit(1) unaligned,		/* (31) */
      2  no_large_array bit(1) unaligned,	/* (32) */
      2  no_line_numbers bit(1) unaligned,	/* (33) */
      2  no_map bit(1) unaligned,		/* (34) */
      2  no_optimize bit(1) unaligned,		/* (35) */
      2  no_check_multiply bit(1) unaligned,	/* (36) */
      2  no_debug_io bit(1) unal,                 /* (1) Second Word */
      2  no_stringrange bit(1) unaligned,	/* (2) */
      2  no_subscriptrange bit(1) unaligned,	/* (3) */
      2  no_table bit(1) unaligned,		/* (4) */
      2  no_very_large_array bit(1) unaligned,	/* (5) */
      2  no_vla_parm bit(1) unaligned,		/* (6) */
      2  no_version bit(1) unaligned,		/* (7) */
      2  non_relocatable bit(1) unaligned,	/* (8) */
      2  optimize bit(1) unaligned,		/* (9) */
      2  profile bit(1) unaligned,		/* (10) */
      2  relocatable bit(1) unaligned,		/* (11) */
      2  round bit(1) unaligned,		/* (12) */
      2  safe_optimize bit(1) unaligned,	/* (13) */
      2  severity fixed bin(3) unaligned,	/* (14-16) */
      2  static bit(1) unaligned,		/* (17) */
      2  stringrange bit(1) unaligned,		/* (18) */
      2  subscriptrange bit(1) unaligned,	/* (19) */
      2  table bit(1) unaligned,		/* (20) */
      2  time bit(1) unaligned,		/* (21) */
      2  time_ot bit(1) unaligned,		/* (22) */
      2  top_down bit(1) unaligned,		/* (23) */
      2  truncate bit(1) unaligned,		/* (24) */
      2  version bit(1) unaligned,		/* (25) */
      2  very_large_array bit(1) unaligned,	/* (26) */
      2  very_large_common bit(1) unaligned,	/* (27) */
      2  vla_auto bit(1) unaligned,		/* (28) */
      2  vla_parm bit(1) unaligned,		/* (29) */
      2  vla_static bit(1) unaligned,		/* (30) */
      2  pad bit(6) unaligned;		/* (31-36) */


declare					/* Options used by DFAST */

     dfast_mask bit (72) internal static options (constant) initial ("100110000000000010100000000011"b);
	/* use_library, has_line_numbers, fold, subscriptrange, brief_table */


declare					/* Options used by FAST */

     fast_mask bit (72) internal static options (constant) initial ("000100000000000010100000000011"b);
	/* has_line_numbers, subscriptrange, brief_table */

/* END INCLUDE FILE fort_options.incl.pl1 */
