/* BEGIN INCLUDE FILE pl1_macro_compare_procs.incl.pl1 */
compare_numbers:
     procedure (operation, operand1, operand2) returns (bit (1));
	declare operation		 fixed binary;	/* INPUT:  logical operation */
	declare (operand1, operand2)	 fixed binary;	/* INPUT: operands */

	goto compare (operation);

compare (14):
compare (24):
	return (arith_value (operand1) = arith_value (operand2));
compare (15):
	return (arith_value (operand1) ^= arith_value (operand2));
compare (16):
	return (arith_value (operand1) < arith_value (operand2));
compare (17):
	return (arith_value (operand1) > arith_value (operand2));
compare (18):
	return (arith_value (operand1) <= arith_value (operand2));
compare (19):
	return (arith_value (operand1) >= arith_value (operand2));
compare (20):
	return (arith_value (operand1) ^> arith_value (operand2));
compare (21):
	return (arith_value (operand1) ^< arith_value (operand2));

     end compare_numbers;

compare_chars:
     procedure (operation, operand1, operand2) returns (bit (1));
	declare operation		 fixed binary;	/* INPUT:  logical operation */
	declare (operand1, operand2)	 fixed binary;	/* INPUT: operands */

	goto compare (operation);

compare (14):
compare (24):
	return (char_value (operand1) = char_value (operand2));
compare (15):
	return (char_value (operand1) ^= char_value (operand2));
compare (16):
	return (char_value (operand1) < char_value (operand2));
compare (17):
	return (char_value (operand1) > char_value (operand2));
compare (18):
	return (char_value (operand1) <= char_value (operand2));
compare (19):
	return (char_value (operand1) >= char_value (operand2));
compare (20):
	return (char_value (operand1) ^> char_value (operand2));
compare (21):
	return (char_value (operand1) ^< char_value (operand2));

     end compare_chars;

compare_bit_strings:
     procedure (operation, operand1, operand2) returns (bit (1));
	declare operation		 fixed binary;	/* INPUT:  logical operation */
	declare (operand1, operand2)	 fixed binary;	/* INPUT: operands */

	goto compare (operation);

compare (14):
compare (24):
	return (bit_value (operand1) = bit_value (operand2));
compare (15):
	return (bit_value (operand1) ^= bit_value (operand2));
compare (16):
	return (bit_value (operand1) < bit_value (operand2));
compare (17):
	return (bit_value (operand1) > bit_value (operand2));
compare (18):
	return (bit_value (operand1) <= bit_value (operand2));
compare (19):
	return (bit_value (operand1) >= bit_value (operand2));
compare (20):
	return (bit_value (operand1) ^> bit_value (operand2));
compare (21):
	return (bit_value (operand1) ^< bit_value (operand2));

     end compare_bit_strings;

same_identifier:
       procedure (id1, id2) returns (bit (1));
       declare (id1, id2)		fixed binary;

/* long winded way of saying that both tokens are represented by the same char_string */

	  return (substr (token (id1).string_ptr -> based_chars, 1, token (id1).string_size) = substr (token (id2).string_ptr -> based_chars, 1, token (id2).string_size));

     end same_identifier;
/* END INCLUDE FILE ... pl1_macro_compare_procs.incl.pl1 */
