/* BEGIN INCLUDE FILE ..... comp_output.incl.pl1 ..... 08/29/78 J Falksen */

/* This include file describes the format of compout files. "Ordinary" compout
   files, i.e. printer or ascii, will be written to stream files. All others
   are not dprint-able and are written to sequential files.

   The first record is a file header which contains information necessary for
   processing by process_compout.

   Each record thereafter contains one page image of data */

/* format: style2,ind2,ll79,dclind4,idind15,comcol41,linecom */

     dcl filedata_version_2
		    fixed bin static options (constant) init (2);
     dcl filedata_version_3
		    fixed bin static options (constant) init (3);
     dcl filedata_version_4
		    fixed bin static options (constant) init (4);

     dcl fileheader_ptr ptr init (null);
     dcl 1 fileheader   aligned based (fileheader_ptr),
	 2 version    fixed bin,	/* version of this file */
	 2 device_class
		    char (32),
	 2 device_name		/* generic device name */
		    char (32),
	 2 device	    char (32),	/* logical device name */
	 2 recleng    fixed bin,	/* mag tape record length */
	 2 max_pages  fixed bin,	/* max pages/record, -1=unlimited */
				/* max_files not defined version 2 */
	 2 max_files  fixed bin,	/* max files/tape, -1=unlimited */
				/* page_len not defined in version 3 */
	 2 page_len   fixed bin (21), /* page length */
	 2 cleanup_leng		/* device cleanup string */
		    fixed bin,
	 2 cleanup    char (l_cleanup),
	 2 comment_leng		/* comment string - info for pco */
		    fixed bin,
	 2 comment    char (l_comment);

     dcl l_comment	    fixed bin;	/* comment length */
     dcl l_cleanup	    fixed bin;	/* cleanup length */
				/* data record */
     dcl record_ptr	    ptr init (null);
     dcl 1 record	    aligned based (record_ptr),
	 2 header,
	   3 pageid   char (32),	/* page identification
				   ("-1" means a galley block) */
	   3 changed  bit (1) unal,	/* 1- this is a changed page */
	   3 front    bit (1) unal,	/* 1- this is a front page */
	   3 pending  bit (1) unal,	/* 1- page has been processed
				   but not printed */
	   3 blank    bit (1) unal,	/* 1- intentional blank page */
	   3 MBZ	    bit (32) unal,	/* pad to word boundary */
	 2 page_record
		    bit (36);	/* base location of output structure */

/* The output writer returns a catenated set of text strings.  Each string has 
   a control preface. The last string in the list has output.nextref = "0"b */

     dcl page_record_ptr
		    ptr init (null);
     dcl 1 page_record  aligned based (page_record_ptr),
	 2 sws,
	   3 in_use   bit (1) unal,	/* 1- in use (so nextref ^= "0"b ) */
	   3 rawo	    bit (1) unal,	/* 1- text needs raw mode */
	   3 halt	    bit (1) unal,	/* 1- halt to change wheels */
	   3 halt2    bit (1) unal,	/* 1- halt AFTER changing wheels */
	   3 halt3    bit (1) unal,	/* reserved for future use */
	   3 halt4    bit (1) unal,	/* 1- mid-page wait		       */
	   3 preface  bit (1) unal,	/* 1- control preface, this text */
				/*    must be processed whenever it */
				/*    is different than the */
				/*    previous one. */
	   3 id_preface		/* 1- identification preface, this */
		    bit (1) unal,	/*    to be included only at the */
				/*    beginning of an output file. */
				/*    In general, they will never */
				/*    match each other (unless page */
				/*    ids are duplicated). */
	   3 pad	    bit (22) unal,	/* pad to last byte */
	   3 pwheel   fixed bin (6) unal uns,
	 2 leng	    fixed bin (24), /* actual output text */
	 2 text	    char (16384 refer (page_record.leng)),
	 2 nextref    bit (36);	/* location of next if any */

/* END INCLUDE FILE ..... comp_output.incl.pl1 ..... */
