/*  START OF:	ssu_invoker_dcls_.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* NAME:  ssu_invoker_dcls_.incl.pl1						        */
	/*									        */
	/* FUNCTION:  Provide ssu_-related declarations needed by a non-command, non-request program      */
	/* that needs to create an ssu_ standalone invocation.  The info_seg_ subroutine is an example.   */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


/****^  HISTORY COMMENTS:
  1) change(2020-06-09,GDixon), approve(2021-02-23,MCR10089),
     audit(2021-03-31,Swenson), install(2021-03-31,MR12.6g-0053):
     Created as an element of the verify_info command and its info_seg_
     subroutine.
                                                   END HISTORY COMMENTS */



  dcl  AsciP ptr;					/* Pointer to ssu_ invocation data. 		        */

  dcl  code fixed bin(35);				/* Status code.				        */

  dcl (F init("0"b), T init("1"b)) bit(1) aligned int static options(constant);
						/* Constants used in this include file.		        */

  dcl  ssu_$abort_line entry() options(variable);		/*  ssu_ request support routines.		        */
  dcl  ssu_$abort_subsystem entry() options(variable);
  dcl  ssu_$add_request_table entry (ptr, ptr, fixed bin, fixed bin(35));
  dcl  ssu_$create_invocation entry (char(*), char(*), ptr, ptr, char(*), ptr, fixed bin(35));
  dcl  ssu_$delete_request_table entry (ptr, ptr, fixed bin(35));
  dcl  ssu_$destroy_invocation entry (ptr);
  dcl  ssu_$execute_line entry (ptr, ptr, fixed bin(21), fixed bin(35));
  dcl  ssu_$execute_string entry (ptr, char(*), fixed bin(35));
  dcl  ssu_$get_area entry (ptr, ptr, char(*), ptr);
  dcl  ssu_$get_info_ptr entry (ptr) returns(ptr);
  dcl  ssu_$get_request_name entry (ptr) returns(char(32));
  dcl  ssu_$get_subsystem_name entry (ptr) returns(char(32));
  dcl  ssu_$get_subsystem_and_request_name entry (ptr) returns(char(72) var);
  dcl  ssu_$get_temp_segment entry (ptr, char(*), ptr);
  dcl  ssu_$listen entry (ptr, ptr, fixed bin(35));
  dcl  ssu_$print_message entry() options(variable);
  dcl  ssu_$set_info_ptr entry (ptr, ptr);
  dcl  ssu_$set_prompt_mode entry (ptr, bit(*));
  dcl  ssu_$set_request_tables entry (ptr, ptr, fixed bin(35));
  dcl  ssu_$standalone_invocation entry (ptr, char(*), char(*), ptr, entry, fixed bin(35));
	

standalone_cleanup_handler:
          proc(AisStandalone, AsciP);
     
  dcl  AisStandalone bit(1) aligned;			/* T: ssu_$standalone_invocation created; F: not created  */
  dcl  AsciP ptr;					/* Pointer to ssu_$standalone_invocation data.	        */

	if AisStandalone then do;
	     call ssu_$destroy_invocation (AsciP);
	     AisStandalone = F;
	     end;
	return;

	end standalone_cleanup_handler;

/*  END OF:	ssu_invoker_dcls_.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
