/*  START OF:	_help_shared_data_.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	
/****^  HISTORY COMMENTS:
  1) change(2020-10-25,GDixon), approve(2021-02-23,MCR10089),
     audit(2021-03-31,Swenson), install(2021-03-31,MR12.6g-0053):
      A) Initial version created as part of rewriting help_ subroutine.
      B) Add hi.ALL_PARAGRAPHS_LABEL to support the new all_paragraphs
         response.
      C) Reorder items in help_info.info_ptrs substructure.
                                                   END HISTORY COMMENTS */

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* Data shared between: help_.pl1, help_requests_.pl1 and help_responses_.pl1; and	        */
	/*                      help_util_ and help_listen_util_.				        */
	/*									        */
	/* FUNCTION: Document hidden data stored before the help_args public data structure.	        */
	/*	    - Document location/content of help_info structure (declared below).	        */
	/*	    - Document location of info_seg_data structure in temp segment		        */
	/*               (declared in info_seg_dcls_.incl.pl1)				        */
	/*	   Document location of help_args in temp segment (declared in help_args_.incl.pl1).    */
	/*	   Document hidden data stored after  the help_args public data structure.	        */
	/*	    - Document location of Dinfo  structure (declared below.)		        */
	/*	    - Document location of PDinfo_seg structure (declared in help_cis_args_.incl.pl1).  */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

  dcl 1 help_info aligned,				/*     .. Position 1 (base) of help_ temp segment.        */

      2 init_ptrs,					/* == Items set by help_$init call.		     == */
        3 (sciP,					/*  - help_ subsystem's ssu_ invocation info_ptr	        */
	 areaP,					/*  - Points to help_ subsystem's standard allocation     */
						/*    area (supplied by ssu_).		        */

	 isdP,					/*  - Points to info_seg_ subsystem's info_seg_data struct*/
						/*     .. Position 2    within help_ temp segment.        */

	 help_argsP,				/*  - Points to help_args (help_ input arguments from     */
						/*    help command or caller)			        */
						/*     .. Position 3    within help_ temp segment.        */

	 next_free_spaceP				/*  - Points to next available space in help_ temp seg.   */
	 ) ptr,

      2 help_ptrs,					/* == Items set by help_$help_ call.                   == */
        3 (Dinfo_arrayP,				/*  - Points to Dinfo structure containing an array of    */
						/*    Dinfo_seg structures, each describing one info      */
						/*    block matching a help_args.path(I) input argument.  */
						/*     .. Position 4    within help_ temp segment.        */

	 Dinfo_sort_ptrsP,				/*  - Points to PDinfo_seg structure containing a sorted  */
						/*    array of pointers to one of Dinfo_seg structures.   */
						/*     .. Position 5    within help_ temp segment.        */

	 DinfoP					/*  - Points to current Dinfo_seg structure.	        */
	 ) ptr,

      2 help_video_data,				/* == Items set by help_$help_ & its display_block rtn == */
        3 video_iocbP ptr,				/*  - Points to IOCB of process's active video terminal.  */

						/* == Items set by display_block & help_listen_util_   == */
        3 prompt_region,				/*  - Upper-left line/col index and lines/cols extent of  */
	4 (lineI, colI, linesN, colsN) fixed bin,	/*    region containing most recent prompt & user response*/
        3 clear_prompt_regionS bit(1) aligned,		/*  - if T: clear prompt region before displaying pghs.   */
        3 hvd_pad bit(36) aligned,

      2 help_labels,				/* == Labels set by help_$help_, used by display_block == */
						/*    help_listen_util_ & help_responses_ 	        */
						/*    to handle asynchronous events.		        */
						/*  Transfer to given label when response ...	        */
        3 NEXT_INFO_LABEL label variable,		/*  - requires skipping to next file.		        */
        3 PI_LABEL label variable,			/*  - interrupted via program_interrupt signal.	        */
        3 ALL_PARAGRAPHS_LABEL label variable,		/*  - wishes to print all paragraphs of current block,    */
						/*    or all blocks of a subroutine info seg.	        */
        3 ANOTHER_BLOCK_LABEL label variable,		/*  - requires changing to another block in same info seg.*/
						/*     - iBlokP points to iBlok of that target block.     */
        3 SUBSYSTEM_ABORT_LABEL label variable,		/*  - requires exiting help_ subsystem.		        */

      2 help_numbers,				/* == Items set by help_$help_, used by header response== */
        3 (Dinfo_sort_ptrsI,				/*  - Index of current Dinfo_seg structure's pointer in   */
						/*    PDinfo_seg.P array of pointers to Dinfo_seg structs */
	 Dinfo_last_cross_refI,			/*  - Index of last Dinfo_seg structure's pointer in the  */
						/*    PDinfo_seg.P array of pointers w/ Scross_ref = T.   */

						/* == Items set by help_$help_ and display_block       == */
	 infos_printedN,				/*  - Count of Dinfo_seg info blocks displayed by help_.  */

						/* == Items set by help_$help_, display_block,         == */
						/*    help_listen_util_, help_responses_, etc.	        */
	 terminal_lineL,				/*  - Max length for lines on current terminal.	        */
	 newline_Nblanks_output,			/*  - Count of blank lines emitted w/o additional output. */
	 hn_pad					/*  - Pad field for alignment of pointers that follow.    */
	 ) fixed bin,

      2 info_ptrs,					/* == Data set/used by help_'s display_block and	    ==  */
						/*    help_responses for each block.		        */
        3 storage,
          4 (CACHE_caP,				/*  - Points to cache of default control_arg resp args.   */
	   CACHE_findP,				/*  - Points to cache of default find_info response args. */
	   CACHE_scnP,				/*  - Points to cache of default section response args.   */
	   CACHE_srhP,				/*  - Points to cache of default search response args.    */

	   STRING_entrypointsP,			/*  - Points to STRING w/ list of subr entrypoints        */
	   LIST_entrypointsP,			/*  - Points to LIST of subr entrypoints in current info  */
	   LIST_non_subroutine_responsesP,		/*  - Points to LIST of help non-subroutine responses     */
	   LIST_subroutine_responsesP,		/*  - Points to LIST of help subroutine responses	        */
	   LIST_helpRql_responsesP			/*  - Points to List of help request loop responses       */
	   ) ptr,					/*     (not currently used since help request does not    */
						/*      prompt user and accepts no responses)	        */

						/* == Data for the "current block" being displayed.    == */
        3 (iFileP,					/*  - Points to block container's iFile structure.        */
	 iBlokP					/*  - Points to selected block's iBlok structure.	        */
	 ) ptr,
						
        3 selected,					/* == Data for tracking "current paragraph" of block.  == */
	4 (iSectP,				/*  - Points to selected section; null at "top" of block. */
	   iPghP					/*  - Points to selected paragraph; null to select sect.  */
	   ) ptr,

        3 iPgh_print_range,				/* == Data given next chunk put onto terminal page.    == */
	4 (startP,				/*  - Points to 1st paragraph to be displayed on cur page */
	   endP					/*  - Points to last pgh to be displayed on current page  */
	   ) ptr,					/*    of display_block output.		        */

      2 info_numbers,				/* == Data set by help_'s display_block procedure.     == */
        3 (block_progress,				/*  - Progress selecting/searching/displaying info block. */
						/*     (see BLOCK_PROGRESS_xxx constants below)	        */
	 display_mode,				/*  - Current block is non-subroutine vs. subroutine.     */
						/*     (see DISPLAY_MODE_xxx constants below)	        */
           display_limit,				/*  - Limits on output paragraphs.		        */
						/*     (see DISPLAY_LIMIT_xxx constants below)	        */
	 header_Nlines_follow			/*  - Count of lines to be displayed immediately after    */
						/*    current help_responses_$header output.  This value  */
						/*    is zeroed when header has been displayed.	        */
	 ) fixed bin,

      2 info_switches,				/* == Switches controlling display/prompt content.     == */
        3 (print_inhibitS,				/*  - If true, inhibit any printed output.	        */
						/*        Set at PI_LABEL targets.		        */
						/*	Cleared when ready to display next prompt.      */
           prompt_repeatS,				/*  - If true, inhibits display of next info paragraphs,  */
						/*    and forces prior "More help?" prompt to be repeated.*/
						/*        Set when response diagnoses user error, or      */
						/*	non-pgh request returns.		        */
           section_search_matchedS,			/*  - Result returned by most recent section/search/find  */
						/*    response.				        */
	 another_blockS				/*  - If true, selects header format w/o path of info seg.*/
						/*        Set when switching to another info block after  */
						/*	earlier printing of full header.  It's same     */
						/*        info seg, just a different block.	        */
	 )  bit(1) aligned,
        3 Sctl aligned like help_args.Sctl;		/* Copy of help_args.Sctl switches which can be changed   */
						/*   by display_block or responses as display ops occur.  */

  dcl 1 hi aligned like help_info based (help_infoP),	/* Short name for help_info structure.		        */
       help_infoP ptr;

  dcl  hi_area area based (hi.areaP);			/* Temporary area used to call external subroutines which */
						/*  expect an "area with standard characteristics"        */

  dcl (BLOCK_PROGRESS_new_block      	init(1),		/* Starting to process a new info block (Dinfo.seg item). */
       BLOCK_PROGRESS_section_search 	init(2),		/* Searching within block for starting section/paragraph. */
       BLOCK_PROGRESS_needs_header   	init(3),		/* First header response emits full header & increments   */
       BLOCK_PROGRESS_display        	init(4)		/* Entering request loop to display info block sections.  */
       ) fixed bin int static options(constant);

  dcl (DISPLAY_LIMIT_none		init(0),		/*  - Set when displaying all paragraphs that fit on page.*/
       DISPLAY_LIMIT_section		init(1),		/*  - Set when displaying only paragraphs of 1 section.   */
       DISPLAY_LIMIT_unseen		init(2),		/*  - Set when displaying only unseen paragraphs.	        */
       DISPLAY_LIMIT_rest_unseen	init(3)		/*  - Set when displaying all remaining unseen paragraphs.*/
       ) fixed bin int static options(constant);

  dcl (DISPLAY_MODE_unset		init(0),
       DISPLAY_MODE_non_subroutine      init(1),		/*  - Set when displaying non-subroutine info block       */
       DISPLAY_MODE_subroutine	init(2),		/*  - Set when displaying subroutine w/ entrypoints block */
       DISPLAY_MODE_help_request_loop	init(3)		/*  - Set when invoking help from help_'s request loop    */
       ) fixed bin int static options(constant);

  dcl  HELP_LINE_SIZE_DEFAULT fixed bin int static options (constant) init (79);
  dcl  HELP_LINE_SIZE_MAX fixed bin int static options (constant) init (136);

  dcl (HELP_PAGE_LENGTH_BIG		init (35),	/* Page size between 36 : 200 inclusive		        */
       HELP_PAGE_LENGTH_MID		init (25),	/* Page size between 26 :  35 inclusive		        */
       HELP_PAGE_LENGTH_SHORT		init (15),	/* Page size between 15 :  25 inclusive		        */
       HELP_PROMPT_LINES_MAX 		init ( 7),	/* Prompt lines reserved on BIG   length pages.	        */
       HELP_PROMPT_LINES_MID		init ( 5),	/* Prompt lines reserved on MID   length pages.	        */
       HELP_PROMPT_LINES_MIN		init ( 3),	/* Prompt lines reserved on SHORT length pages.	        */
       HELP_PROMPT_RESPONSE_MIN_SPACE	init (50)
       ) fixed bin int static options(constant);

  dcl  HELP_VERSION_02 char (20) int static options(constant) init("help version: 2.00");

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

  dcl 1 Dinfo_item aligned like Dinfo_seg based (hi.DinfoP);

  dcl 1 Dinfo aligned based (PDinfo),			/* Also pointed to by help_info.Dinfo_arrayP	        */
      2 N fixed bin,				/* Information about each log. info to be printed.        */
      2 seg (0 refer (Dinfo.N)) like Dinfo_seg,		/*  Dinfo_seg is declared in: help_cis_args_.incl.pl1     */
       PDinfo ptr;
						/* Each Dinfo.seg substructure is accessed by an          */
						/* element of the PDinfo_seg.P array (same include file). */
						/*  - Also pointed to by help_info.Dinfo_sort_ptrsP       */
						/*  - Pointers of this array have been sorted in	        */
						/*    alphabetical order by the given info segment entry  */
						/*    name (or first entry name matching  given starname).*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

    dcl 1 LIST aligned based,				/* structure used by help_util_ to format list of things  */
	2 header,					/* to be output in columns.			        */
	  3 (N,					/*   number of list elements.			        */
	     Npghs,				/*   number of filled paragraphs of formatted out.        */
	     Nrows,				/*   number of rows in formatted output.	        */
	     Ncols,				/*   number of columns in formatted output.	        */
	     ML (6)				/*   length of longest element in each column.	        */
	     ) fixed bin,
	2 title char (84),				/*   title of output list (includes COLON ending title).  */
						/*    NOTE: This element is pointed to by iLine.P & .L,   */
						/*          and by the Line structure.  It cannot be a    */
						/*          varying string.			        */
	2 group (0 refer (LIST.N)),
	  3 arg char (88) varying,			/*   the argument.				        */
	  3 Snot_found fixed bin,			/*   = 1 if no match found for the argument.	        */
	2 print_array (0 refer (LIST.Npghs), 0 refer (LIST.Nrows)),
	  3 line_out char (HELP_LINE_SIZE_MAX);		/* Array of lines to be output to the screen.	        */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* SUBROUTINE:  error, response_error						        */
	/*									        */
	/* SYNTAX:								        */
	/*   declare error entry options(variable);					        */
	/*   call error (sci_ptr, status_code, ioa_string, optional_args);			        */
	/*									        */
	/*   declare response_error entry options(variable);				        */
	/*   call response_error (sci_ptr, status_code, ioa_string, optional_args);		        */
	/*									        */
	/* FUNCTION:								        */
	/* Provide a shared error routine used throughout help_ which has an ssu_$print_message	        */
	/* interface, and also provides the following side effects:				        */
	/*  1) Suppresses messages if help_ caller set help_args.Sctl.inhibit_errors.		        */
	/*  2) Ensures there is a blank line printed before every error message.		        */
	/*  3) Resets count of consecutive blank lines emitted to zero after error message is printed.    */
	/*  4) For error entrypoint, calls ssu_$print_message to display the error.		        */
	/*     For response_error, calls ssu_$abort_line to prevent any response following the one in     */
	/*     error from being executed.						        */
	/*  5) For response_error entrypoint:						        */
	/*      - sets help_info.prompt_repeatS = T to suppress printing when ssu_$listen calls	        */
	/*	help_listen_util_$iPgh_print_range.					        */
	/*         - ssu_$listen then calls help_listen_util_$display_prompt to repeat prior prompt so    */
	/*           USER can correct the error diagnosed in the response.			        */
	/*  NOTE: If neither status_code nor ioa_string are given, ssu_$abort_line only aborts remainder  */
	/*	of the current user response line.					        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

error:						
     procedure options (variable);

  dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin(21), fixed bin(35)),
       cu_$arg_list_ptr entry returns (ptr),
       cu_$generate_call entry (entry, ptr),
       ssu_$abort_line entry() options(variable),
       ssu_$get_info_ptr entry (ptr) returns(ptr),
       ssu_$print_message entry() options(variable);

  dcl  first_argP ptr,
       hiP ptr,
       ignore_code fixed bin(35),
       ignore_argL fixed bin(21),
       response_epS bit(1) aligned,
       sciP ptr;

  dcl  first_arg  ptr based(first_argP);

     response_epS = F;
     goto error_JOIN;
     
     
response_error:
     entry options (variable);
     
     response_epS = T;

error_JOIN:
     call cu_$arg_ptr (1, first_argP, ignore_argL, ignore_code);
     sciP = first_arg;				/* First argument is sci_ptr for help_'s ssu_ invocation  */

     hiP = ssu_$get_info_ptr (sciP);			/* Get pointer to help_info structure.		        */
						/*  - help_$init sets this pointer, so we're sure it is   */
						/*    non-null().				        */
     if  hiP->hi.help_argsP -> help_args.Sctl.inhibit_errors  then
	return;					/* If errors are inhibited, do nothing further.	        */
     else if  hiP->hi.newline_Nblanks_output = 0  then
	call newline (1);				/* Output blank line before error.		        */

     hiP->hi.newline_Nblanks_output = 0;		/* Errors count as printed output. Zero blank line count. */

     if  response_epS  then do;			/* Set hi.prompt_repeatS to inhibit display of info text. */
	hiP->hi.prompt_repeatS = T;			/*  Instead, latest prompt is redisplayed, so new user    */
						/*  response can correct the error.		        */
	call cu_$generate_call (ssu_$abort_line, cu_$arg_list_ptr() );
	end;					/*  Let ssu_$abort_line generate error message and abort  */
						/*  any responses after the failing response in the       */
						/*  response line.  ssu_$abort_line does not return here. */
     else call cu_$generate_call (ssu_$print_message, cu_$arg_list_ptr() );
						/* Let ssu_$print_message generate the error message.     */

     return;

warning_avoid:
     entry options (variable);

  dcl  hi_AVOID_PL1_WARNING entry variable;		/* PL/I issues warning if any internal procedure is not   */
						/*  called.  These procedures are not called by           */
     hi_AVOID_PL1_WARNING = error;			/*  all includers of this include file.		        */
     hi_AVOID_PL1_WARNING = ioa;
     hi_AVOID_PL1_WARNING = newline;
     hi_AVOID_PL1_WARNING = set_space_used;

     end error;
%page;
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* SUBROUTINE:  ioa, ioa$nnl							        */
	/*									        */
	/* SYNTAX:								        */
	/*   declare ioa entry options(variable);					        */
	/*   call ioa (ioa_control_string, optional_args);				        */
	/*									        */
	/*   declare ioa$nnl entry options(variable);					        */
	/*   call ioa$nnl (ioa_control_string, optional_args);				        */
	/*									        */
	/* FUNCTION:								        */
	/* Provide a shared ioa_-like routine used throughout help_ which also provides the following     */
	/* side effects:								        */
	/*  1) Suppresses output if hi.print_inhibitS is T (as results of program_interrupt signal).      */
	/*  2) Resets count of consecutive blank lines emitted to zero.			        */
	/* ioa$nnl acts like ioa_$nnl (it suppresses NL at end of output string).		        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

ioa:
     procedure options(variable);
     
  dcl  cu_$arg_list_ptr entry returns (ptr),
       cu_$generate_call entry (entry, ptr),
      (ioa_, ioa_$nnl)  entry() options(variable);
     
     if  help_infoP = null()  then;			/* caller's environment must have a help_infoP pointer;   */
						/*   otherwise, do nothing!			        */
     else do;
	hi.newline_Nblanks_output = 0;
	if  ^hi.print_inhibitS  then
	     call cu_$generate_call (ioa_, cu_$arg_list_ptr() );     
	end;
     return;
     
ioa$nnl:
     entry options(variable);
     
     if  help_infoP = null()  then;			/* caller's environment must have a help_infoP pointer;   */
						/*   otherwise, do nothing!			        */
     else do;
	hi.newline_Nblanks_output = 0;
	if  ^hi.print_inhibitS  then
	     call cu_$generate_call (ioa_$nnl, cu_$arg_list_ptr() );     
	end;
     end ioa;


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* SUBROUTINE:  newline							        */
	/*									        */
	/* SYNTAX:								        */
	/*   declare newline entry (fixed bin);						        */
	/*   call newline (count_of_consecutive_NLs_to_emit);				        */
	/*									        */
	/* FUNCTION:								        */
	/* Provide a shared routine used throughout help_ to consolidate requests to output NLs, thus     */
	/* avoiding excess consecutive NLs requested by different parts of help_ code.		        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

newline:
     procedure (Acount);

  dcl  Acount fixed bin;				/* Count between 1 and 5 (inclusive).		        */

  dcl  iox_$put_chars entry (ptr, ptr, fixed bin(21), fixed bin(35));
  dcl  iox_$user_output ptr ext static;
  dcl  NLs char(5) int static options(constant) init((5)"
");
  dcl  ignore_code fixed bin(35);

  dcl  count fixed bin(21);

     if  help_infoP = null()  then;
     else if  hi.print_inhibitS  then;

     else if  hi.newline_Nblanks_output < Acount  then do;
	count = max (min (length(NLs), Acount - hi.newline_Nblanks_output), 0);
	if  count > 0  then do;
	     hi.newline_Nblanks_output = hi.newline_Nblanks_output + count;
	     call iox_$put_chars (iox_$user_output, addr(NLs), count, ignore_code);
	     end;
	end;

     end newline;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* SUBROUTINE:  set_space_used						        */
	/*									        */
	/* SYNTAX:								        */
	/*   declare set_space_used (size_of_current_storage_allocation);			        */
	/*   call set_space_used (currentsize(STRUCTURE_NAME));				        */
	/*									        */
	/* FUNCTION:								        */
	/* Provide a shared routine used by many parts of the help_ code to record size of structures     */
	/* and/or arrays "pushed" onto the help_ temporary segment.  The temp segment returned by	        */
	/* help_$init is treated like a push-down stack.  At any point in time, help_ code can "push"     */
	/* new storage onto the stack, so long as size of that new storage can be determined before that  */
	/* code returns to its caller.						        */
	/*									        */
	/* USAGE:									        */
	/*  1) Declare a based storage item which may include adjustable extents (refer extents) for      */
	/*     array size, area size, or character string lengths.  For example, see the help_args        */
	/*     structure declared in help_args_.incl.pl1.					        */
	/*  2) Base that storage declaration on a pointer variable: P			        */
	/*  3) Set P to the value of hi.next_free_spaceP (a variable in the structure pointed to by       */
	/*     help_infoP.								        */
	/*  4) Initialize storage elements and refer extent variables.  When fully setup...	        */
	/*  5) Call set_space_used supplying the current size of this storage.  Use the PL/I builtin      */
	/*     function currentsize(STORAGE_VARIABLE) to obtain current size of adjustable-size storage   */
	/*     elements, based on current values of their refer-variable elements.		        */
	/*									        */
	/* Code below will adjust this currentsize upwards to the next even-word boundary, thus ensuring  */
	/* all storage items are aligned on an even-word boundary.				        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

set_space_used:
     procedure (Asize_current_space);			/* This procedure sets pointer to next free word of       */
						/*  storage in help_args temp segment.		        */

  dcl  Asize_current_space fixed bin (21);		/* Amount of space used in structure last structure in    */
						/*  temp segment.				        */

     hi.next_free_spaceP = addrel (hi.next_free_spaceP, Asize_current_space + mod (Asize_current_space, 2));
     return;

     end set_space_used;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/*  END OF:	_help_shared_data_.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
