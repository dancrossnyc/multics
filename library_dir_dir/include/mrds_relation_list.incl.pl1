/* BEGIN INCLUDE FILE mrds_relation_list.incl.pl1 - - Jim Gray 81-01-14 */

/* HISTORY:

   81-01-14 Jim Gray : originally created for the dsl_$get_relation_list interface

*/

/* DESCRIPTION:

   For a given opening of a database via a model or submodel view,
   this structure will contain the list of relations as seen from that view.
   It contains the number of relations in that view, and both the
   submodel and model names of the relation (model = submodel name if not submodel opening)
   plus whether the opening was via a submodel or not.
   The virtual relation bit indicates when the model name may not
   be valid, due to a mapping over more than one relation in the model.

   Access information for various versions of MRDS access is also returned, as follows:

   system_acl entries refers strictly to "rew" type multics acl's.
   for version 3 access info, attr system_acls are the same as the relation acls,
   unless the attribute is inverted, in which case it is the acl
   of the attribute as it appears under the invert_dir in the database.

   mrds_access entries are version dependent, version 3 databases
   with mrds_list/set_delete_acl commands used a mrds specific access
   set of modes of retreive-store-modify-delete.
   version 4 databases released in MR8 had no mrds specific
   access, but used system acl's of "rew".
   version 4 databases for MR9 mrds using submodel security have
   mrds specific access mode of append/delete_tuple for relations,
   and read/modify_attr for attributes.

   effective_access entries use the same units as mrds_access.
   it is the logical result of applying both mrds and system access,
   and coming up with a user effective mode of access to the relation/attribute.
   for version 3 databases, the effective access includes
   in the relation effective access, the effect that access of inverted attributes
   in the invert_dir may have.

*/


declare 1 mrds_relation_list aligned based (mrds_relation_list_ptr),
        2 version fixed bin,				/* version number for this structure */
        2 access_info_version fixed bin,		/* version of mrds access modes
						   3 => version 3 db with r-s-m-d access,
						   4 => version 4 MR8 db with r-e-w access,
						   5 => version 4 MR9 db with relation a-d, and attr r-m modes
						   (submodel security) */
        2 num_rels_in_view fixed bin,			/* count of relations present in this view */
        2 submodel_view bit (1) unal,			/* ON => this opening was via a submodel */
        2 mbz1 bit (35) unal,
        2 relation (mrds_relation_list_num_rels_init refer (mrds_relation_list.num_rels_in_view)),
	3 model_name char (32),			/* name of relation in database model */
	3 submodel_name char (64),			/* alias name of relation in submodel, else model name */
	3 system_acl char (8) varying,		/* the system access from r-e-w modes */
	3 mrds_access char (8) varying,		/* version 3 => from r-s-m-d, 4 => from r-e-w, 5 => from a-d */
	3 effective_access char (8) varying,		/* effect of system + mrds access, in mrds access units */
	3 virtual_relation bit (1) unal,		/* ON => submodel relation defined over >1 model relation */
	3 mbz2 bit (35) unal ;


declare  mrds_relation_list_num_rels_init fixed bin ;

declare  mrds_relation_list_ptr ptr ;

declare  mrds_relation_list_structure_version fixed bin init (1) int static options (constant) ;

/* END INCLUDE FILE mrds_relation_list.incl.pl1 */
