/* BEGIN INCLUDE FILE ... cpm_entries.incl.pl1 */

/****^  HISTORY COMMENTS:
  1) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
     audit(86-10-08,Fawcett), install(86-11-03,MR12.0-1206):
     Written to support control point management in March 1985 by G. Palter.
                                                   END HISTORY COMMENTS */

/* format: style3,linecom */

/* Control Point Manager (cpm_) entrypoint definitions */

dcl	get_control_point_id_			/* returns the ID of the currently running control point */
			entry () returns (bit (36) aligned);

dcl	cpm_$create				/* create a new control point */
			entry (pointer, bit (36) aligned, fixed binary (35));

dcl	(
	cpm_$destroy,				/* destroy the specified control point */
	cpm_$start,				/* start the specified control point if its stopped */
	cpm_$wakeup,				/* make the specified control point ready if its blocked */
	cpm_$stop					/* stop the specified control point if its ready or blocked */
	)		entry (bit (36) aligned, fixed binary (35));

dcl	cpm_$block	entry ();			/* block the current control point */

dcl	cpm_$scheduler	entry ();			/* find a runnable control point and let it run */

dcl	(
	cpm_$get_user_cl_intermediary,		/* get the user supplied procedure to run during cu_$cl */
	cpm_$set_user_cl_intermediary			/* set the user supplied procedure to run during cu_$cl */
	)		entry (bit (36) aligned, entry (bit (1) aligned), fixed binary (35));

dcl	(
	cpm_$generate_call,				/* generate an immediate call */
	cpm_$generate_call_preferred,			/* generate an immediate call and make it run preferred */
	cpm_$generate_call_when_ready			/* generate a call when the control point is next ready */
	)		entry (bit (36) aligned, entry (pointer), pointer, fixed binary (35));

dcl	cpm_$get_preferred_control_point		/* return the ID of the preferred control point */
			entry () returns (bit (36) aligned);
dcl	cpm_$set_preferred_control_point		/* make the specified control point preferred */
			entry (bit (36) aligned, fixed binary (35));
dcl	cpm_$push_preferred_control_point		/* switch preferred control points */
			entry (bit (36) aligned, bit (1) aligned, fixed binary (35));
dcl	cpm_$pop_preferred_control_point		/* restore the previous preferred control point */
			entry (bit (1) aligned);

dcl	cpm_$get_control_point_meters			/* get the usage meters for a specific control point */
			entry (bit (36) aligned, pointer, fixed binary (35));
dcl	cpm_$get_scheduler_meters			/* get the usage meters for the control point scheduler */
			entry (pointer, fixed binary (35));

dcl	cpm_$nulle	entry () options (variable);	/* a "null" entry value which should never be called */

/* END INCLUDE FILE ... cpm_entries.incl.pl1 */
