/* ********** BEGIN INCLUDE FILE dm_field_table.incl.pl1 ********** */

/* DESCRIPTION:

          The field_table describes the layout of a set of fields in a
     formatted data string.  Such a string is the stored representation of a
     record or a key.  Fields are placed side-by-side in the string in the
     order they appear in the field_table.field array.  The string is divided
     into the fixed portion and the varying portion.  In the fixed portion
     appear fixed-length fields and fixed-size length-fields for
     varying-length fields.  In the varying portion appear varying length
     fields.  The length-field for a varying-length field contains the length
     of the field values either in bits or in characters, depending on the
     data type of the field.
*/

/* HISTORY:
Written by Matthew Pierret, 04/01/82.
Modified:
04/20/82 by Matthew Pierret: Added length_is_in_characters, meaning, if on,
	  that if the field is varying, its length is expressed in
	  bytes/characters.
03/22/83 by Lindsey Spratt:  Changed lofvf to have a precision of 35 instead
	  of 17, changed version to 2, changed version field to char(8) from
	  fixed bin (17).
05/01/84 by Matthew Pierret:  Changed version to 3. Removed field.name and
            put field names in one string (field_names) at the end of the 
            structure. Added field.location_of_name and field.length_of_name
            for locating the field name in field_names. Aligned all "fixed bin"
            structure elements.  Changed maximum_field_name_length to 
            length_of_field_names.
*/

/* format: style2 */

     dcl	   1 field_table	      aligned based (field_table_ptr),
	     2 version	      char (8) aligned init (FIELD_TABLE_VERSION_3),
	     2 number_of_fields   fixed bin (17),
	     2 length_of_field_names
			      fixed bin (17),	/* length of field_names in characters */
	     2 location_of_first_varying_field
			      fixed bin (35),	/* location of first bit in the varying portion of the formatted string */
	     2 field	      (ft_number_of_fields refer (field_table.number_of_fields)),
	       3 flags	      aligned,
	         4 descriptor_is_varying
			      bit (1) unal,		/* if on, the descriptor is not limited to the standard 36 bits */
						/* and is stored in a stand-alone fashion, with field.descriptor */
						/* containing the id of the element in which the descriptor is stored. */
	         4 length_is_in_characters
			      bit (1) unal,		/* if field is varying, the length field describes its length */
						/* in characters instead of in bits */
	         4 must_be_zero   bit (34) unal,
	       3 descriptor	      bit (36) aligned,
	       3 location	      fixed bin (35),	/* location of first bit of field in formatted string */
	       3 length_in_bits   fixed bin (35),	/* length of field in bits */
	     3 location_of_name   fixed bin (17),	/* location of first character of field name in field_names */
	     3 length_of_name     fixed bin (17),	/* length of name in characters */
	     2 varying_field_map  (ft_number_of_fields refer (field_table.number_of_fields)),
	       3 field_id	      fixed bin (17),	/* field_id of Nth varying field */
	       3 varying_field_index
			      fixed bin (17),	/* ordinality among varying fields of field N */
	     2 field_names	      char (ft_length_of_field_names refer (field_table.length_of_field_names));


     dcl	   field_table_ptr	      ptr;
     dcl	   ft_length_of_field_names
			      fixed bin;
     dcl	   ft_number_of_fields    fixed bin;
     dcl	   FIELD_TABLE_VERSION_3  char (8) aligned init ("FldTbl 3") internal static options (constant);

dcl field_name char (field_name_length) based (field_name_ptr);

dcl field_name_length fixed bin;
dcl field_name_ptr ptr;

/* END INCLUDE FILE dm_field_table.incl.pl1 */
