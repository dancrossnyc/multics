/*  START OF:	mbuild_Tlist_.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


/****^  HISTORY COMMENTS:
  1) change(2019-08-17,GDixon), approve(2019-10-23,MCR10069),
     audit(2020-01-20,Swenson), install(2020-01-20,MR12.6g-0035):
     mbuild subsystem threaded-list software and declarations.  See: MTB-1003
  2) change(2020-11-10,GDixon), approve(2021-02-22,MCR10086),
     audit(2021-03-17,Swenson), install(2021-03-17,MR12.6g-0051):
      A) Fix Syntax comment for Tlist_insert_before and Tlist_insert_after
         subroutines.
                                                   END HISTORY COMMENTS */

/* ==========================================================================================
 * SUBROUTINE:  Tlist_
 *
 * Quick internal procedures that implement the mbuild threaded-list software. 
 * For a description of these threaded lists, see:  MTB-1003  mbuild Subsystem.
 *
 * For continued efficiency of mbuild code, these entrypoints must adhere to the rules for
 * PL/I quick procedures, as described in AN82-00: Standards System Designer's Notebook, 
 * page 8-9 and following.
 *
 *   Subroutine				Function Performed
 * ------------------------------------------   ------------------------------------------------------------
 * Tlist_initialize (list_baseP, holderP);      Initialize Tlist_base element of holderP structure.

 * Tlist_holder (list_dataP);	                  Return pointer to structure holding threaded list anchor.

 * Tlist_member (list_dataP);	                  Returns True if list_data is an active member of a threaded list.

 * Tlist_is_empty (list_baseP);	        Returns True if there are no members on list_baseP anchor.

 * Tlist_add_to_head (list_baseP, itemP, item_list_dataP);
 *				        Adds itemP to head of list anchored by list_baseP.

 * Tlist_add_to_tail (list_baseP, itemP, item_list_dataP);
 *				        Adds itemP to tail of list anchored by list_baseP.

 * Tlist_insert_before (list_baseP, new_itemP, new_item_list_dataP, cur_item_list_dataP );
 *				        Adds new_itemP before cur_item_list_dataP.itemP in the threaded list.

 * Tlist_insert_after (list_baseP, new_itemP, new_item_list_dataP, cur_item_list_dataP );
 *				        Adds new_itemP after cur_item_list_dataP.itemP in the threaded list.

 * Tlist_first_item (list_baseP);	        Returns pointer to first item in list.

 * Tlist_last_item (list_baseP);	        Returns pointer to last item in list.

 * Tlist_prev_item (item_list_dataP);	        Returns pointer to previous item in list.

 * Tlist_next_item (item_list_dataP);	        Returns pointer to next item in list.

 * Tlist_remove (item_list_dataP);	        Removes item from list.

 * Tlist_count (list_baseP);		        Returns count of items in the list.

 *
 * ========================================================================================== */

%include mbuild_Tlist_dcls_;
%page;
Tlist_:
     proc();
     return;

  dcl 1 b like Tlist_base aligned based(bP),
      bP ptr;

  dcl 1 a like Tlist_data aligned based(aP),
      aP ptr;
  dcl 1 n like Tlist_data aligned based(nP),
      nP ptr;
  dcl 1 p like Tlist_data aligned based(pP),
      pP ptr;
  dcl 1 r like Tlist_data aligned based(rP),
      rP ptr;
  dcl 1 t like Tlist_data aligned based(tP),
      tP ptr;

  dcl (null) builtin;


Tlist_initialize:					/* Initialize a Tlist_base sub-structure contained in a   */
     entry (AbaseP, AholderP);			/*  holder structure.			        */

  dcl  AholderP ptr;

     bP = AbaseP;
     if bP = null() then return;
     b = Tlist_initial_base;
     b.holderP = AholderP;
     return;


Tlist_holder:					/* Given pointer to an item's Tlist_data sub-structure,   */
     entry (Athis_item_thread_dataP) returns (ptr);	/*  return a pointer to structure holding Tlist_base of   */
						/*  this threaded list.			        */

     tP = Athis_item_thread_dataP;
     if tP = null() then return ( null() );
     if t.baseP = null then 
	return ( null() );
     bP = t.baseP;
     return (b.holderP);
     

Tlist_member:					/* Return T ("1"b) if item's Tlist_data shows the item    */
     entry (Athis_item_thread_dataP)			/*  is actually threaded onto a list.		        */
     returns (bit(1) aligned);
     
  dcl  Athis_item_thread_dataP ptr;

     tP = Athis_item_thread_dataP;
     if tP = null() then return ( "0"b );
     return ( t.prevP ^= null() | t.nextP ^= null() | t.baseP ^= null() );
     

Tlist_is_empty:					/* Return T ("1"b) if Tlist_base of threaded list shows   */
     entry (AbaseP) returns (bit(1) aligned);		/*  the list contains no members.		        */

     bP = AbaseP;
     if bP = null() then return ("1"b);
     return ( b.headP = null() );


Tlist_add_to_head:					/* Add an item containing a Tlist_data sub-structure      */
     entry (AbaseP, Aadd_itemP, Aadd_item_thread_dataP);	/*  to beginning of a threaded list identified by	        */
						/*  a Tlist_base structure.			        */
  dcl (AbaseP, Aadd_itemP, Aadd_item_thread_dataP) ptr;
     
     bP = AbaseP;					/* Address parameters.			        */
     aP = Aadd_item_thread_dataP;

     a.itemP = Aadd_itemP;				/* Initialize thread data within item being added.        */
     a.baseP = bP;

     if b.headP = null() then do;			/* List is empty?				        */
	b.headP = aP;				/*   <head>             <tail>		        */
						/* BECOMES:				        */
	a.nextP = null();				/*   <head> ---> a <--- <tail>		        */
	a.prevP = null();

	b.tailP = aP;
	end;
     else do;					/* One or more items already in list?		        */
	nP = b.headP;				/*   <head> ---> n				        */
						/* BECOMES:				        */
	b.headP = aP;				/*   <head> ---> a <---> n			        */

	a.prevP = null();
	a.nextP = nP;

	n.prevP = aP;
	end;
     return;

     
Tlist_add_to_tail:					/* Add an item containing a Tlist_data sub-structure      */
     entry (AbaseP, Aadd_itemP, Aadd_item_thread_dataP);	/*  to end of a threaded list identified by	        */     
						/*  a Tlist_base structure.			        */

     bP = AbaseP;					/* Address parameters.			        */
     aP = Aadd_item_thread_dataP;

     a.itemP = Aadd_itemP;				/* Initialize thread data within item being added.        */
     a.baseP = bP;

     if b.tailP = null() then do;			/* List is empty?				        */
	b.headP = aP;				/*   <head>             <tail>		        */
						/* BECOMES:				        */
	a.nextP = null();				/*   <head> ---> a <--- <tail>		        */
	a.prevP = null();

	b.tailP = aP;
	end;
     else do;					/* One or more items already in list?		        */
	pP = b.tailP;				/*           p <--- <tail>			        */
						/* BECOMES:				        */
	p.nextP = aP;				/*   p <---> a <--- <tail>			        */

	a.prevP = pP;
	a.nextP = null();

	b.tailP = aP;
	end;
     return;

	     
Tlist_insert_before:				/* Add an item containing a Tlist_data sub-structure      */
     entry (AbaseP, Aadd_itemP, Aadd_item_thread_dataP, Athis_item_thread_dataP);
						/*  before an item already on the threaded list defined   */
						/*  by a given Tlist_base sub-structure.	        */

     bP = AbaseP;					/* Address parameters.			        */
     aP = Aadd_item_thread_dataP;
     tP = Athis_item_thread_dataP;

     a.itemP = Aadd_itemP;				/* Initialize thread data within item being added.        */
     a.baseP = bP;
	
     if b.headP = tP then do;				/* This item currently begins the list?		        */
	b.headP = aP;				/*   <head> ---> t				        */
						/* BECOMES:				        */
	a.prevP = null();				/*   <head> ---> a <---> t			        */
	a.nextP = tP;
	
	t.prevP = aP;
	end;
     else do;					/* One or more items already in list?		        */
	pP = t.prevP;				/*   p <---> t				        */
						/* BECOMES:				        */
	p.nextP = aP;				/*   p <---> a <---> t			        */

	a.prevP = pP;
	a.nextP = tP;

	t.prevP = aP;
	end;
     return;


Tlist_insert_after:					/* Add an item containing a Tlist_data sub-structure      */
     entry (AbaseP, Aadd_itemP, Aadd_item_thread_dataP, Athis_item_thread_dataP);
						/*  after an item already on the threaded list defined    */
						/*  by a given Tlist_base sub-structure.	        */

     bP = AbaseP;					/* Address parameters.			        */
     aP = Aadd_item_thread_dataP;
     tP = Athis_item_thread_dataP;

     a.itemP = Aadd_itemP;				/* Initialize data within thread being added.	        */
     a.baseP = bP;
	
     if b.tailP = tP then do;				/* This item currently ends the list?		        */
	t.nextP = aP;				/*           t <--- <tail>			        */
						/* BECOMES:				        */
	a.prevP = tP;				/*   t <---> a <--- <tail>			        */
	a.nextP = null();

	b.tailP = aP;
	end;
     else do;					/* One or more items already in list?		        */
	nP = t.nextP;				/*   t <---> n				        */
						/* BECOMES:				        */
	t.nextP = aP;				/*   t <---> a <---> n			        */

	a.prevP = tP;
	a.nextP = nP;

	n.prevP = aP;
	end;
     return;

     
Tlist_first_item:					/* Given a pointer to Tlist_base sub-structure of a       */
     entry (AbaseP) returns(ptr);			/*  threaded list, return pointer to first item in list.  */

     if AbaseP = null() then return ( null() );
     bP = AbaseP;					/* Address parameter.			        */
     if b.headP ^= null then do;			/*   <head> ---> t				        */
	tP = b.headP;
	return (t.itemP);
	end;
     else return ( null() );				/*   <head>				        */
     

Tlist_last_item:					/* Given a pointer to Tlist_base sub-structure of a       */
     entry (AbaseP) returns(ptr);			/*  threaded list, return pointer to last item in list.   */

     if AbaseP = null() then return ( null() );
     bP = AbaseP;					/* Address parameter.			        */
     if b.tailP ^= null() then do;			/*   t <--- <tail>				        */
	tP = b.tailP;
	return (t.itemP);
	end;
     else return ( null() );				/*          <tail>				        */
     

Tlist_next_item:					/* Given a pointer to Tlist_data sub-structure of an item */
     entry (Athis_item_thread_dataP) returns(ptr);	/*  on a threaded list, return a pointer to next item     */
						/*  on the list.				        */

     tP = Athis_item_thread_dataP;			/* Address parameter.			        */
     if tP = null() then return ( null() );
     if t.nextP = null then				/*   t <--- <tail>				        */
	return ( null() );
     else do;					/*   t <---> n				        */
	nP = t.nextP;
	return (n.itemP);
	end;

Tlist_prev_item:					/* Given a pointer to Tlist_data sub-structure of an item */
     entry (Athis_item_thread_dataP) returns(ptr);	/*  on a threaded list, return a pointer to previous item */
						/*  on the list.				        */

     tP = Athis_item_thread_dataP;			/* Address parameter.			        */
     if tP = null() then return ( null() );
     if t.prevP = null then				/*   <head> ---> t				        */
	return ( null() );
     else do;					/*       p <---> t				        */
	pP = t.prevP;
	return (p.itemP);
	end;
     

Tlist_remove:					/* Given a pointer to Tlist_data sub-structure of an item */
     entry (Aremove_item_thread_dataP);			/*  on a list, remove that item from the threaded list.   */

  dcl  Aremove_item_thread_dataP ptr;			/* Pointer to thread data in item to be removed from list */

     rP = Aremove_item_thread_dataP;			/* Address parameter, and r.baseP		        */
     if rP = null() then return;
     bP = r.baseP;

     if bP = null() then return;			/* item to remove is not in the list.		        */
     else  if b.headP = rP & b.tailP = rP  then do;	/* item to remove is only item in the list.	        */
	b.headP = null();				/*   <head> ---> r <--- <tail>		        */
						/* BECOMES:				        */
	b.tailP = null();				/*   <head>             <tail>     r		        */
	end;
     else if b.headP = rP then do;			/* item to remove is at head of multi-item list.	        */
	nP = r.nextP;				/*   <head> ---> r <----> n			        */
						/* BECOMES:				        */
	b.headP = nP;				/*   <head> ---> n                 r		        */

	n.prevP = null();
	end;
     else if b.tailP = rP then do;			/* item to remove is at tail of multi-item list.	        */	
	pP = r.prevP;				/*   p <---> r <--- <tail>			        */
						/* BECOMES:				        */
	p.nextP = null();				/*           p <--- <tail>         r		        */

	b.tailP = pP;
	end;
     else do;					/* item is in middle of multi-item list.	        */
	pP = r.prevP;				/*   p <---> r <---> n			        */
	nP = r.nextP;				/* BECOMES:				        */
						/*   p <---> n                     r		        */
	p.nextP = nP;

	n.prevP = pP;
	end;

     r.nextP = null();				/* In all cases, item being removed points to nothing     */
     r.prevP = null();				/*  except itself.				        */
     r.baseP = null();
     return;
     

Tlist_count:					/* Count items on a threaded list.		        */
     entry (AbaseP) returns (fixed bin);

  dcl  Tcount fixed bin;
     
     bP = AbaseP;
     if bP = null() then return ( 0 );
     Tcount = 0;

     do tP = b.headP
      repeat t.nextP while (tP ^= null());
	Tcount = Tcount + 1;
	if Tcount >= 99 then			/* Avoid infinite loop...			        */
	     return (999);
	end;
     return (Tcount);

     end Tlist_;

/*  END OF:	mbuild_Tlist_.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
