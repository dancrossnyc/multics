/*  START OF:	ocu_dcls.incl.pl1			 *  *  *  *  *  */

/****^  HISTORY COMMENTS:
  1) change(86-08-12,Elhard), approve(86-08-12,MCR7505),
     audit(86-12-10,DGHowe), install(86-12-10,MR12.0-1241):
     Originally written to define the subroutines and data structures used by
     callers of ocu_.
                                                   END HISTORY COMMENTS */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	ocu_dcls					*/
  /***	Function: These are the entrypoints and structures required	*/
  /***		to use the ocu_ object creation utilities.	*/
  /***							*/
  /*** ****************************************************************/
  
  /* open option flags */
  
  dcl OPEN_FLAGS_BOUND	bit (6) static options (constant)
			init ("100000"b);
  dcl OPEN_FLAGS_RELOCATABLE	bit (6) static options (constant)
			init ("010000"b);
  dcl OPEN_FLAGS_PROCEDURE	bit (6) static options (constant)
			init ("001000"b);
  dcl OPEN_FLAGS_SEPARATE_STATIC
			bit (6) static options (constant)
			init ("000100"b);
  dcl OPEN_FLAGS_PERPROCESS_STATIC
			bit (6) static options (constant)
			init ("000010"b);
  dcl OPEN_FLAGS_NO_HASHTABLE bit (6) static options (constant)
			init ("000001"b);
			
  /* definition flags */
  
  dcl DEFINITION_FLAGS_IGNORE bit (4) static options (constant) init ("1000"b);
  dcl DEFINITION_FLAGS_ENTRY	bit (4) static options (constant) init ("0100"b);
  dcl DEFINITION_FLAGS_RETAIN bit (4) static options (constant) init ("0010"b);
  dcl DEFINITION_FLAGS_INDIRECT
			bit (4) static options (constant) init ("0001"b);
  
  /* input structures */
  
  dcl word_arrayp		ptr;
  dcl word_arrayl		fixed bin (18) unsigned;
  
  dcl word_array(word_arrayl) bit (36) based (word_arrayp);
  
  dcl reloc_strp		ptr;
  dcl reloc_strl		fixed bin (21);
  
  dcl reloc_str		char (reloc_strl) based (reloc_strp);
  
  dcl component_listp	ptr;
  dcl component_count	fixed bin (15) unsigned;
  
  dcl component_list (1:component_count)
			ptr based (component_listp);
  
  dcl 01 gen_info		aligned based,
       02 gen_created	fixed bin (71),
       02 generator		char (8),
       02 gen_number	fixed bin,
       02 gen_version	char (512) varying;
  
  /* entrypoint declarations */
  
  dcl ocu_$open		/* setup to create an object		*/
	entry (char(*),		/* directory name	    (in )	*/
	       char(*),		/* entry name	    (in )	*/
	       bit(*),		/* option flags	    (in ) */
	       ptr,		/* ocu_data pointer	    (out) */
	       fixed bin(35));	/* error code	    (out) */
  
  dcl ocu_$close		/* create the object segment		*/
	entry (ptr,		/* ocu_data pointer     (in )	*/
	       fixed bin(35));	/* error code	    (out) */
  
  dcl ocu_$release		/* release storage on cleanup		*/
	entry (ptr);		/* ocu_data pointer	    (in )	*/
  
  dcl ocu_$emit_text	/* emit a block of text words		*/
	entry (ptr,		/* ocu_data pointer	    (in )	*/
	       ptr,		/* word array pointer   (in ) */
	       ptr,		/* reloc string pointer (in ) */
	       fixed bin (18) uns)	/* word count	    (in ) */
	returns(fixed bin (18) uns);	/* text relp	    (out) */
  
  dcl ocu_$emit_definition	/* emit a single definition entry	*/
	entry (ptr,		/* ocu_data pointer	    (in )	*/
	       char(*) var,		/* definition name	    (in ) */
	       fixed bin (3),	/* target section	    (in ) */
	       fixed bin (18) uns,	/* offset in section    (in ) */
	       bit(*))		/* definition flags	    (in ) */
	returns(fixed bin (18) uns);	/* definition relp	    (out) */
  
  dcl ocu_$emit_segname	/* emit a single segname definition	*/
	entry (ptr,		/* ocu_data pointer	    (in )	*/
	       char(*) var,		/* segname	    (in ) */
	       bit(*))		/* definition flags	    (in ) */
	returns(fixed bin (18) uns);	/* definition relp	    (out) */
  
  dcl ocu_$emit_msf_map	/* emit an msf map (MSF components)	*/
	entry (ptr,		/* ocu_data pointer	    (in )	*/
	       fixed bin (15) uns,	/* component count	    (in ) */
	       fixed bin (15) uns);	/* my component	    (in ) */
  
  dcl ocu_$emit_static	/* emit a block of static words	*/
	entry (ptr,		/* ocu_data pointer	    (in )	*/
	       ptr,		/* word array pointer   (in ) */
	       fixed bin (18) uns)	/* word count	    (in ) */
	returns(fixed bin (18) uns);	/* static relp	    (out) */
  
  dcl ocu_$emit_link	/* emit a single external link	*/
	entry (ptr,		/* ocu_data pointer	    (in )	*/
	       fixed bin (3),	/* link type	    (in ) */
	       fixed bin (3),	/* link class	    (in ) */
	       char(*) var,		/* target refname	    (in ) */
	       char(*) var,		/* target definition    (in ) */
	       fixed bin,		/* expression offset    (in ) */
	       bit(6),		/* link modifier	    (in ) */
	       ptr)		/* init info pointer    (in ) */
	returns(fixed bin (18) uns);	/* link relp	    (out) */
  
  dcl ocu_$emit_partial_link	/* emit a single partial link		*/
	entry (ptr,		/* ocu_data pointer	    (in ) */
	       fixed bin (15) uns,	/* target component	    (in ) */
	       fixed bin (3),	/* target section	    (in ) */
	       fixed bin (18) uns,	/* offset in section    (in ) */
	       bit(6))		/* link modifier	    (in ) */
	returns(fixed bin (18) uns);	/* link relp	    (out) */
  
  dcl ocu_$emit_firstref_trap	/* add a trap to the firstref block	*/
	entry (ptr,		/* ocu_data pointer	    (in ) */
	       fixed bin (18) uns,	/* call relp	    (in ) */
	       fixed bin (18) uns);	/* info relp	    (in ) */
  
  dcl ocu_$emit_symbol	/* emit a block of symbol words	*/
	entry (ptr,		/* ocu_data pointer	    (in ) */
	       ptr,		/* word array pointer   (in ) */
	       ptr,		/* reloc string pointer (in ) */
	       fixed bin (18) uns)	/* word count	    (in ) */
	returns(fixed bin (18) uns);	/* symbol relp	    (out) */
  
  dcl ocu_$backpatch	/* patch a word in the text/symbol scn	*/
	entry (ptr,		/* ocu_data pointer	    (in ) */
	       char(*),		/* section	    (in ) */
	       fixed bin (18) uns,	/* offset in section    (in ) */
	       char(*),		/* side and size	    (in ) */
	       fixed bin (35));	/* new value to patch   (in ) */
  
  dcl ocu_$create_msf	/* create component 0 of the MSF	*/
	entry (ptr,		/* component array ptr  (in ) */
	       fixed bin (15) uns,	/* component count	    (in ) */
	       ptr,		/* generator info ptr   (in ) */
	       fixed bin(35));	/* error code	    (out) */
  
/*  END OF:	ocu_dcls.incl.pl1			 *  *  *  *  *  */
