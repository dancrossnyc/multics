/*	BEGIN INCLUDE FILE ...aste.incl.pl1 ... */

/* Template for an AST entry. Length = 12 words. */

/* Words 0 to 7, and 11 are read by PC; they are read and modified by SC.
   Words 8, 9 and 10 are modified by PC; they should never be modified without locking the PC lock */
/* Modified January 1985 by Keith Loepere for multi_class. */

dcl  astep ptr;

dcl 1 aste based (astep) aligned,

    (2 fp bit (18),					/* forward  used list rel pointer */
    2 bp bit (18),					/* backward used list rel pointer */

    2 infl bit (18),				/* ptr to NEXT  in list of ASTE's of my brothers */
    2 infp bit (18),				/* ptr to FIRST in list of ASTE's of my children */

    2 strp bit (18),				/* rel pointer to process trailer */
    2 par_astep bit (18),				/* rel pointer to parent aste */

    2 uid bit (36),					/* segment unique id */

    2 msl bit (9),					/* maximum segment length in 1024 word units */
    2 pvtx fixed bin (8),				/* physical volume table index */
    2 vtocx fixed bin (17),				/* vtoc entry index */

    2 usedf bit (1),				/* ast entry is being used if non-zero */
    2 init bit (1),					/* used bit - insure 1 lap */
    2 gtus bit (1),					/* global transparent usage switch */
    2 gtms bit (1),					/* global transparent modified switch */
    2 hc bit (1),					/* hard core segment */
    2 hc_sdw bit (1),				/* aste with sdw for hardcore seg if non-zero */
    2 any_access_on bit (1),				/* any sdw allows access, unless write_access_on */
    2 write_access_on bit (1),			/* any sdw allows write access */
    2 inhibit_cache bit (1),				/* flag not to reset above bits */
    2 explicit_deact_ok bit (1),			/* set if user can deactivate seg */
    2 deact_error bit (1),				/* set if error occurred while deactivating */
    2 hc_part bit (1),				/* set if pages are in a hardcore partition */
    2 fm_damaged bit (1),				/* set if filemap checksum was ever bad */
    2 multi_class bit (1),				/* set if page_control should watch state changes to this segment */
    2 pad1 bit (2),					/* OO */
    2 dius bit (1),					/* dumper in use switch */
    2 nid bit (1),					/* if on prevents addtion to incremental dump map */
    2 dmpr_pad bit (1),
    2 ehs bit (1),					/* entry hold switch */
    2 nqsw bit (1),					/* no quota switch - no checking for pages of this seg */
    2 dirsw bit (1),				/* directory switch */
    2 master_dir bit (1),				/* master dir - a root for the log volume */
    2 volmap_seg bit (1),				/* volmap_seg for some volume */
    2 tqsw (0:1) bit (1),				/* terminal quota switch - (0) for non dir pages */
    2 pad_ic bit (10),				/* Used to be aste.ic */

    2 dtu bit (36),					/* date and time segment last used */

    2 dtm bit (36),					/* date and time segment last modified */


    2 quota (0:1) fixed bin (18) unsigned,		/* sec storage quota - (0) for non dir pages */

    2 used (0:1) fixed bin (18) unsigned,		/* sec storage used  - (0) for non dir pages */

    2 csl bit (9),					/* current segment length in 1024 words units */
    2 fmchanged bit (1),				/* turned on by page if file map changed */
    2 fms bit (1),					/* file modified switch */
    2 npfs bit (1),					/* no page fault switch */
    2 gtpd bit (1),					/* global transparent paging device switch */
    2 dnzp bit (1),					/* don't null out if zero page switch */
    2 per_process bit (1),				/* use master quota for this entry */
    2 ddnp bit (1),					/* don't deposit nulled pages */
    2 pad2 bit (2),
    2 records bit (9),				/* number of records used by the seg in sec storage */
    2 np bit (9),					/* number of pages in core */


    2 ht_fp bit (18),				/* hash table forward rel pointer */
    2 fmchanged1 bit (1),				/* value of "fmchanged" saved by pc$get_file_map */
    2 damaged bit (1),				/* PC declared segment unusable */
    2 pack_ovfl bit (1),				/* page fault on seg would cause pack overflow */
    2 synchronized bit (1),				/* Data Management synchronized segment */
    2 pad3 bit (6),					/* OOOOOOOOO */
    2 ptsi bit (2),					/* page table size index */
    2 marker bit (6)) unaligned;			/* marker to indicate last word of ASTE */


dcl  asta (0 : 8000) bit (36*12 /* sst-> sst.astsize */) based aligned;


dcl 1 aste_part aligned based (astep),

    2 one bit (36) unaligned,				/* fp and bp */
    2 two bit (36*11 - 8) unaligned,			/* part that has to be zeroed when ASTE is freed */
    2 three bit (8) unaligned;			/* ptsi and marker */


dcl 1 seg_aste based (astep) aligned,			/* Overlay because quota is only for dirs */
    2 pad1 bit (8*36),
    2 usage fixed bin (35),				/* page fault count: overlays quota */
    2 pad2 bit (3*36);

/*	END INCLUDE FILE ... aste.incl.pl1 */
