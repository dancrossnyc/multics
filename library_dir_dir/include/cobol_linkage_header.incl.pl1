
/*  BEGIN INCLUDE FILE ...   cobol_linkage_header.incl.pl1  */

/*  Last modified 07/19/78 by RAL to conform with MULTICS standard linkage map */
/*  Last modified June 26, 1974 by AEG              */



declare	1 linkage_header aligned based(link_base_ptr),
	  2 pad bit(36),
	  2 def_section_relp bit(18) unaligned,
	  2 first_reference_relp bit(18) unaligned,
	  2 obsolete_ptr ptr unal,
	  2 original_linkage_ptr ptr unal,
	  2 unused bit (72),
	  2 links_relp bit(18) unaligned,
	  2 linkage_section_length bit(18) unaligned,
	  2 object_seg bit(18) unaligned,
	  2 obsolete_length bit(18) unaligned;


/*
link_base_ptr		is a pointer to the base of the
			linkage section and is an element
			of the structure   cobol_ located in
			  cobol_external_seg.

pad			is reserved for future use and
			must be zero.

def_section_relp		is a pointer (relative to the base
			of the object segment) to the base
			of the definition section.

first_reference_relp	is a pointer (relative to the base
			of the linkage section) to the
			array of first-reference traps.
			If the value of this item is "0"b
			then there are no first-reference
			traps.

obsolete_ptr		for historical reasons, linkage
			sections are sometimes threaded
			together to form a linkage list.
			This variable is a pointer to the
			next linkage section on the thread.
			This variable is described for 
			completemess;  it is not intended
			for general use.

original_linkage_ptr	is a pointer to the original link-
			age section within the object seg-
			ment.  It is used by the link un-
			snapping mechanism.  It is init-
			ialized by the linker.

links_relp		is a pointer (retative to the base
			of the linkage section) to the
			first link (the base of the link
			structure).

linkage_section_length	is the length in words of the
			linkage section.

object_seg		is the segment number of the object
			segment.  It is initialized by the
			linker.

obsolete_length		when several linkage sections are
			combined into a list, this item
			(in the first linkage section in
			the list) contains the length of
			the entire list.  See the above
			discussion under obsolete_ptr.
						  */
/*  END INCLUDE FILE ...   cobol_linkage_header.incl.pl1		  */

