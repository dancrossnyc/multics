/* Begin include file . . . . . poll_mpc_data.incl.pl1 */

/* Describes format of syserr binary data logged with mpc polling */
/* Prepared April 1980 by Larry Johnson */
/* Modified November 1980 by Rich Coppola to add MPC error registers */
/* Modified May 1982 by Rich Coppola to add info about EURC */
/* Modified June 1983 by Paul Farley to add dev_name to dev_stat structure.
   Modified June 1984 by Paul Farley to add MSP800(DAU) support.
   Also changed structures to version_2, which separates unique data into
   individual definitions.
*/

dcl  poll_mpc_datap ptr;
dcl  poll_mpc_specp ptr;				/* addr(poll_mpc_data.specific) */
dcl  poll_mpc_data_version_2 fixed bin int static options (constant) init (2);
dcl  poll_mpc_data_n_devices fixed bin;
dcl  poll_mpc_data_n_stats fixed bin;

dcl 1 poll_mpc_data aligned based (poll_mpc_datap),
    2 version fixed bin,
    2 name char (4),				/* Name of MPC */
    2 model fixed bin,				/* Model number */
    2 n_words fixed bin,				/* used to get size */
    2 specific					/* Unique data, depending on */
    (0 refer (poll_mpc_data.n_words)) fixed bin (35);	/* MPC model number */

dcl 1 poll_mtp_data aligned based (poll_mpc_specp),
    2 firmware_rev char (2) unal,			/* Firmware revision */
    2 config_sw bit (16) unal,			/* Configuration switches */
    2 pad bit (2) unal,
    2 polled_stat_counters (12) fixed bin,		/* LA-PSI  error counters */
    2 polled_error_data,
      3 pad1 bit (8),
      3 interrupt_counter fixed bin (8) uns,		/* the error interrupt counter */
      3 register bit (16),				/* the MPC's error data register */
      3 AUXAR bit (16),				/* the auxilliary mpc addr at time of last error */
      3 INTAR bit (16),				/* the addr at which the error occurred */
    2 n_devices fixed bin,				/* Number of devices with statistics */
    2 n_stats fixed bin,				/* Number of non-zero statistics actually logged */
    2 dev_info (poll_mpc_data_n_devices refer (poll_mtp_data.n_devices)) like dev_info,
    2 stat_info (poll_mpc_data_n_stats refer (poll_mtp_data.n_stats)) like stat_info;

dcl 1 poll_msp_data aligned like poll_mtp_data based (poll_mpc_specp);

dcl 1 poll_urp_data aligned based (poll_mpc_specp),
    2 interrupt_counter fixed bin (8) uns,		/* the error interrupt counter */
    2 register bit (16),				/* the MPC's error data register */
    2 INTAR bit (16);				/* thar addr at which the error occurred */

dcl 1 poll_eurc_data aligned based (poll_mpc_specp),
    2 uptime_clock fixed bin (32) uns,
    2 prom_revision unal,
      3 core bit (8),
      3 iom bit (8),
      3 special_controller bit (8),
      3 link_edit bit (8),
      3 pdsi_application bit (8),
      3 self_test bit (8),
      3 dai_application bit (8),
    2 n_devices fixed bin,				/* Number of devices with statistics */
    2 n_stats fixed bin,				/* Number of non-zero statistics actually logged */
    2 dev_info (poll_mpc_data_n_devices refer (poll_eurc_data.n_devices)) like dev_info,
    2 stat_info (poll_mpc_data_n_stats refer (poll_eurc_data.n_stats)) like stat_info;

dcl 1 poll_dau_data aligned based (poll_mpc_specp),
    2 fw_rev char (2) unal,				/* Firmware revision */
    2 hw_rev bit (8) unal,				/* DAU Revision */
    2 config unal,
      3 ci_0_online bit (1),
      3 ci_1_online bit (1),
      3 psi0_2trip bit (1),				/* 0= 4trip, 1= 2trip */
      3 psi1_2trip bit (1),
      3 psi2_2trip bit (1),
      3 psi3_2trip bit (1),
    2 pad bit (4) unal,
    2 err_interrupts fixed bin (12) uns unal,
    2 psi_cntr (20) fixed bin (8) unal,
    2 ext_size fixed bin,				/* Size of DAU extention info, */
						/* 0=none, 72=err_int>0 */
    2 n_devices fixed bin,				/* Number of devices with statistics */
    2 n_stats fixed bin,				/* Number of non-zero statistics actually logged */
    2 err_info (0 refer (poll_dau_data.ext_size)) bit (8) unal,
    2 dev_info (poll_mpc_data_n_devices refer (poll_dau_data.n_devices)) like dev_info,
    2 stat_info (poll_mpc_data_n_stats refer (poll_dau_data.n_stats)) like stat_info;

dcl  dev_info_ptr ptr;

dcl 1 dev_info based (dev_info_ptr),
    2 subsystem char (1) unal,			/* X from tapX */
    2 driveno fixed bin (6) uns unal,			/* Drive number */
    2 opi bit (1) unal,				/* Powered on Bit */
    2 ca fixed bin (2) uns unal,			/* CA or TCA number */
    2 port fixed bin (4) uns unal,			/* Port number */
    2 dev_model char (6) unal,			/* Model number */
    2 dev_name char (7) unal;				/* Name of the dev */

dcl  stat_info_ptr ptr;

dcl 1 stat_info based (stat_info_ptr),
    2 dev_index fixed bin (9) uns unal,			/* Index in dev_info, above */
    2 stat_index fixed bin (9) uns unal,		/* Which statistic for that device (1 to 16) */
    2 pad bit (2) unal,
    2 value fixed bin (16) uns unal;			/* Actual value of that stat */


/* Start of MPC Summary Declarations */

dcl  mpc_data_summaryp ptr;
dcl  mpc_data_specp ptr;				/* addr(mpc_data_summary.specific) */
dcl  mpc_data_summary_version_2 fixed bin int static options (constant) init (2);
dcl  mpc_summary_n_devices fixed bin;

dcl 1 mpc_data_summary aligned based (mpc_data_summaryp),
    2 version fixed bin,
    2 name char (4),				/* Name of MPC */
    2 model fixed bin,
    2 firmware_rev char (2),				/* Firmware revision */

/* *old* MSP, MTP and URP specific data */

    2 config_sw bit (16),				/* Configuration switches */
    2 polled_stat_counters (12) fixed bin,		/* LA-PSI  error counters */
    2 interrupt_counter fixed bin (35),			/* the error interrupt counter */
    2 register bit (16),				/* the MPC's error data register */
    2 AUXAR bit (16),				/* the auxilliary mpc addr at time of last error */
    2 INTAR bit (16),				/* thar addr at which the error occurred */

/* EURC Specific data */

    2 eurc_specifics,
      3 uptime_clock fixed bin (32) uns,
      3 prom_revision,
        4 core bit (8),
        4 iom bit (8),
        4 special_controller bit (8),
        4 link_edit bit (8),
        4 pdsi_application bit (8),
        4 self_test bit (8),
        4 dai_application bit (8),

/* DAU specific data */

    2 hw_rev bit (8) unal,				/* DAU Revision */
    2 config unal,
      3 ci_0_online bit (1),
      3 ci_1_online bit (1),
      3 psi0_2trip bit (1),				/* 0= 4trip, 1= 2trip */
      3 psi1_2trip bit (1),
      3 psi2_2trip bit (1),
      3 psi3_2trip bit (1),
    2 err_interrupts fixed bin (35),
    2 err_info (72) bit (8) unal,
    2 psi_cntr (20) fixed bin (35),

/* Device statistical data */

    2 n_devices fixed bin,				/* Number of devices with statistics */
    2 dev_stat (mpc_summary_n_devices refer (mpc_data_summary.n_devices)) like dev_stat;

dcl  dev_stat_ptr ptr;

dcl 1 dev_stat based (dev_stat_ptr),
    2 subsystem char (1) unal,			/* X from tapX */
    2 driveno fixed bin (6) uns unal,			/* Drive number */
    2 opi bit (1) unal,				/* Powered on Bit */
    2 ca fixed bin (2) uns unal,			/* CA or TCA number */
    2 port fixed bin (4) uns unal,			/* Port number */
    2 pad bit (5) unal,
    2 dev_model char (6) unal,			/* Model number */
    2 prev_driveno fixed bin (6) uns unal,
    2 pad1 bit (3) unal,
    2 dev_name char (6) unal,				/* Name of the dev */
    2 value (16) fixed bin (35);			/* Actual value of that stat */

dcl  dev_sum_ptr ptr;

dcl 1 dev_sum like dev_stat based (dev_sum_ptr);


/* Note: except for the MPC registers only non-zero statistics are logged.
   An entry is made in the stat_info array for each non-zero statistics noting
   which device, and which of the counters was non-zero */

/* End include file . . . . . poll_mpc_data.incl.pl1 */
