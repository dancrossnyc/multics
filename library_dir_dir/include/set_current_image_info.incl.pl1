set_current_image_info:
     proc;					/* passively determines the transaction code
						   and indirect descriptor which currently apply to this record */
						/* The validity of this algorithm while records are subject to asynch
						   changes is guaranteed by the strict observance of a standard modification
						   protocol */

	do while ("1"b);				/* loops on detecting asynch changes */
	     time_stamp = fixed (time_stamp_struct.time_last_modified);
						/* to detect asynch change */
	     cur_mod = stat_struct.prev_mod;
	     ref_cnt = block_ptr -> stat_struct.ref_count;
	     if cur_mod = -3			/* creation in progress */
	     then ind_desc = -1;
	     else if block_ptr -> record_block.indirect
	     then ind_desc = ind_struct.prev_desc;
	     else if block_ptr -> record_block.after_applies
	     then do;
		     ind_des.comp = stat_struct.ind_comp;
		     ind_des.offset = time_stamp_struct.ind_offset;
		     mod = stat_struct.modifier;
		     cur_mod = mod;
		     ref_cnt = stat_struct.ref_count_after;
		     go to check_time;		/* validate snapshot */
		end;
	     else ind_desc = current_descrip;		/* compact case */
	     mod = stat_struct.modifier;
	     if block_ptr -> record_block.lock_flag	/* before image may not be valid */
	     then if mod > 0			/* transaction may be in progress on this record */
		then if mod ^= cur_mod		/* before and after are different */
		     then do;
			     new_ind_des.comp = stat_struct.ind_comp;
			     new_ind_des.offset = time_stamp_struct.ind_offset;
			     if cur_mod = stat_struct.prev_mod
						/* in case of asynch change */
			     then do;		/* must look in tcf to see which applies */
				     if ^transaction/* no tcf available */
				     then do;	/* abort with non-zero code */
					     code = error_table_$higher_inconsistency;
						/* can't tell which image
						   is the one to use */
					     return;
						/* abort */
					end;
				     unspec (gk_inf.flags) = "0"b;
				     gk_inf.input_key = "1"b;
				     gk_inf.key_len = 4;
				     gk_inf.head_size = 4;
				     gk_key = mod;	/* current transaction using this record */
				     call iox_$control (tcfp, "get_key", addr (gk_inf), er_code);
				     if er_code = 0
				     then if gk_inf.descrip = -1
						/* past checkpoint */
					then do;	/* use after image info */
						cur_mod = mod;
						ind_desc = new_ind_desc;
						ref_cnt = stat_struct.ref_count_after;
						return;
						/* done */
					     end;
					else ;
				     else if er_code = error_table_$no_key
				     then code = error_table_$higher_inconsistency;
				end;
			end;
	     if cur_mod = stat_struct.prev_mod		/* same as at previous reference */
	     then if cur_mod > 0			/* modifier is unique for this record image */
		then return;
		else do;
check_time:
			if fixed (time_stamp_struct.time_last_modified) = time_stamp
			then return;		/* will use time_stamp for verification */
		     end;
	     if clock () > timeout			/* time limit is exhausted */
	     then do;
		     code = error_table_$record_busy;
		     return;
		end;
	end;					/* keep trying until reference succeeds */

	dcl     er_code		 fixed (35);
	dcl     1 new_ind_des	 based (addr (new_ind_desc)),
		2 comp		 fixed (17) unal,
		2 offset		 bit (18) unal;
	dcl     new_ind_desc	 fixed (35);
	dcl     gk_key		 fixed (35) based (addr (gk_inf.key));
	dcl     1 gk_inf,
		2 header		 like gk_header,
		2 key		 char (4);
     end set_current_image_info;

     dcl	   1 ind_des	      like ind_des_structure based (addr (ind_desc));
     dcl	   1 stat_struct	      like stat_structure based (block_ptr);
     dcl	   1 ind_struct	      like ind_structure based (block_ptr);
     dcl	   1 time_stamp_struct    like time_stamp_structure based (addr (stat_struct.time_stamp_words));
     dcl	   1 record_block	      like record_block_structure based (block_ptr);
