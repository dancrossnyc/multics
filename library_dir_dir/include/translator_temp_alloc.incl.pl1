/* BEGINNING OF:	translator_temp_alloc.incl.pl1	  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* N__a_m_e:  translator_temp_alloc.incl.pl1					*/
	/*									*/
	/*      This include segment allocates space in a translator's temporary segment.  It 	*/
	/* contains a complete space allocation function 'allocate' which can be a quick PL/I	*/
	/* internal procedure in the program which includes this include segment.  The temporary	*/
	/* segment should be one obtained by using the translator_temp_ subroutine.		*/
	/*									*/
	/* S__t_a_t_u_s									*/
	/*									*/
	/* 0) Created by:  G. C. Dixon  in  January, 1975.				*/
	/* 1) Modified by: G. C. Dixon  in  February, 1981 - use limit area structure.		*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */



allocate:	procedure (Parea, ANwords) returns (ptr);

     dcl	Parea			ptr,		/* ptr to the temporary segment. (In)		*/
	ANwords			fixed bin;	/* number of words to be allocated. (In)	*/

     dcl	Nwords			fixed bin,	/* number of words to be allocated, rounded up	*/
						/* to a 0 mod 2 quantity.			*/
	P			ptr,		/* a temporary pointer.			*/
	code			fixed bin(35),	/* a status code.				*/
         (mod, null, ptr)		builtin;

     dcl	1 area			based (Parea),
	  2 Pfirst_temp_seg		ptr unal,		/*   ptr to first temp seg of a group.		*/
	  2 Ofree			fixed bin(35),	/*   offset of next free word in temp seg.	*/
	  2 Lfree			fixed bin(35);	/*   length of remaining free space in temp seg.	*/

     dcl	translator_temp_$get_next_segment
				entry (ptr, ptr, fixed bin(35));

	Nwords = ANwords + mod (ANwords, 2);		/* round up word count to 0 + mod 2 quantity.	*/
	if Nwords > Lfree then do;			/* handle area overflow.			*/
	     call translator_temp_$get_next_segment (Parea, P, code);
	     if P = null then return (null);
	     Parea = P;
	     if Nwords > area.Lfree then return (null);
	     end;
	P = ptr (Parea, area.Ofree);			/* get pointer to next free word of area.	*/
	area.Ofree = area.Ofree + Nwords;		/* increase offset of remaining free space.	*/
	area.Lfree = area.Lfree - Nwords;		/* decrease length of remaining free space.	*/
	return (P);

	end allocate;

/* END OF:	translator_temp_alloc.incl.pl1	  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
