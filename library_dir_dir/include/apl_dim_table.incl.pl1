/* ====== BEGIN INCLUDE SEGMENT	apl_dim_table.incl.pl1 ==================================== */

dcl	 (conversion_ptr, device_ptr, sequence_ptr) ptr,
	n fixed bin;

dcl (	baud_rate_110		init (0),
	baud_rate_150_or_134	init (1),
	baud_rate_300		init (2),
	baud_rate_1200		init (3)
	) fixed bin internal static options (constant);


dcl     1 device_info		based (device_ptr) aligned,
	2 conversion_offset		unal bit (18),
	2 sequence_offset		unal bit (18),
	2 compression_in_offset	unal bit (18),
	2 compression_out_offset	unal bit (18),
	2 device_name		unal char (32),
	2 graphic_terminal		unal bit (1),
	2 shift_needed		unal bit (1),
	2 quit_editing_allowed	unal bit (1),
	2 unused_bits_1		unal bit (15),
	2 linefeed_character_device	unal bit (9),
	2 escape_character_code	unal bit (9),	/* internal 8-bit code */
	2 delay_character		unal bit (9),
	2 upper_case		unal bit (9),
	2 lower_case		unal bit (9),
	2 escape_character_device	unal bit (9),	/* external 7-bit device */
	2 default_page_length	unal fixed bin (17),
	2 default_line_length	unal fixed bin (17),
	2 pad_info		dim (0:3) aligned,	/* 110, 150, 300, 1200 */
	  3 nl_addend		unal fixed bin (17),
	  3 nl_multiplier		unal fixed bin (17),
	  3 tab_addend		unal fixed bin (17),
	  3 tab_multiplier		unal fixed bin (17),
	  3 bs_n_pads		unal fixed bin (17),	/* number of pads after bs. */
	  3 np_n_pads		unal fixed bin (17),	/* number of pads after new page. */
	2 editing_prompt		varying char (8);

dcl	1 conversions	based (conversion_ptr) aligned,
	2 out		unal dim (0:255) bit (9),	/* internal 8-bit code to external 7-bit device */
	2 in		unal dim (0:127) bit (9),	/* external 7-bit device to internal 8-bit code */
	2 code_move	unal dim (0:255) bit (9),	/* internal movement of code */
	2 device_move	unal dim (0:127) bit (6),	/* external movement of device */
	2 unused_1	unal bit (24),
	2 size		fixed bin,
	2 escape		dim (0:n refer (conversions.size)),
	  3 prefix	unal bit (1),
	  3 conceal	unal bit (1),
	  3 unused_2	unal bit (7),
	  3 inchar	unal bit (9),
	  3 outchar	unal bit (9),
	  3 unused_3	unal bit (9);

dcl	1 sequence	based (sequence_ptr) aligned,
	2 size		unal fixed bin (8),
	2 characters	unal dim (sequence.size) bit (9);

dcl	1 compression_in	based (compression_in_ptr) aligned,
	2 size		fixed bin,
	2 compression_string char (compression_in.size);

dcl	1 compression_out	based (compression_out_ptr) aligned,
	2 size		fixed bin,
	2 output_character	dim (compression_out.size) unal bit (9);

/* ------ END INCLUDE SEGMENT		apl_dim_table.incl.pl1 ------------------------------------ */
