/* Begin amu_mc.incl.pl1 */

dcl number_val_args fixed bin (17) init (23) static options (constant);

dcl valid_mc_arg (24) char (8) init 
("-dump",		    /*  mc from bos dump */
"-lg",		    /*  all of the info stored at the given pointer */
"-scu","-ppr","-tpr","-inst",   /*  scu data or trs or psr (if scu then not psr nor tsr) */
"-reg",		    /*  basic ou regs */
"-misc","-code","-flt","-tm", /* misc line of mc data if misc then not others */
"-eis",		    /* eis info if MIF flag in scu_data */	
"-prs","-pr0","-pr1","-pr2","-pr3","-pr4","-pr5","-pr6","-pr7", /* pointer regs if prs then not the others */
"-vbf","-oct","-set")  /* control args */
 static options (constant);

/* the next structuers all all the same real data word and a dcl'ed in
     many ways to make the code easer to write and undersand, only time
     will tell if this is the correct end result. If any are changed they 
     all must by changed, The bit order must corespond to valid_mc_arg */


	
dcl 1 arg_bits based (arg_bits_ptr) aligned,
    2 request_arg(number_val_args) bit (1) unal;

dcl 1 what_prs based (arg_bits_ptr) aligned,
    2 pad bit (13) unal,
    2 pregs (0:7) bit (1) unal,
    2 padr bit (16);
	

dcl 1 arg_bits_def based (arg_bits_ptr),
    2 dump bit (1) unal,
    2 all bit (1) unal,
    2 scu bit (1) unal,
    2 ppr bit (1) unal,
    2 tpr bit (1) unal,
    2 inst bit (1) unal,
    2 regs bit (1) unal,
    2 xreg (0:7) bit (1) unal,
    2 areg bit (1) unal,
    2 qreg bit (1) unal,
    2 mis bit (1) unal,
    2 mc_err bit (1) unal,
    2 flt bit (1) unal,
    2 tm bit (1) unal,
    2 eis bit (1) unal,
    2 prs bit (1) unal,
    2 pr (0:7) bit (1) unal,
    2 long bit (1) unal,
    2 set_ptr bit (1) unal,
    2 mc_stored bit (1) unal,
    2 rest_bits bit (1) unal;   /* bits to fill out the word **/
	
	

dcl arg_bits_ptr ptr;
	
/* End amu_mc.incl.pl1 */
