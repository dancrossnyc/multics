/*  START OF:	ssu_standalone_command_.incl.pl1	  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

  
/****^  HISTORY COMMENTS:
  1) change(2019-08-17,GDixon), approve(2019-10-23,MCR10069),
     audit(2020-01-20,Swenson), install(2020-01-20,MR12.6g-0035):
     Declarations needed by standalone commands that make use of the ssu_
     infrastructure to simplify command/AF programming.
  2) change(2021-02-22,GDixon), approve(2021-02-22,MCR10089),
     audit(2021-03-31,Swenson), install(2021-03-31,MR12.6g-0053):
     Add declarations for ssu_$execute_string and ssu_$get_info_ptr support
     routines.
                                                   END HISTORY COMMENTS */

  dcl  cu_$arg_list_ptr entry() returns (ptr);		/* Command / ssu_ request support routines.	        */
  dcl  ssu_$abort_line entry() options(variable);
  dcl  ssu_$abort_subsystem entry() options(variable);
  dcl  ssu_$arg_ptr entry (ptr, fixed bin, ptr, fixed bin(21));
  dcl  ssu_$create_invocation entry (char(*), char(*), ptr, ptr, char(*), ptr, fixed bin(35));
  dcl  ssu_$destroy_invocation entry (ptr);
  dcl  ssu_$execute_line entry (ptr, ptr, fixed bin(21), fixed bin(35));
  dcl  ssu_$execute_string entry (ptr, char(*), fixed bin(35));
  dcl  ssu_$get_area entry (ptr, ptr, char(*), ptr);
  dcl  ssu_$get_info_ptr entry (ptr) returns(ptr);
  dcl  ssu_$get_subsystem_name entry (ptr) returns(char(32));
  dcl  ssu_$listen entry (ptr, ptr, fixed bin(35));
  dcl  ssu_$print_message entry() options(variable);
  dcl  ssu_$return_arg entry (ptr, fixed bin, bit(1) aligned, ptr, fixed bin(21));
  dcl  ssu_$set_prompt entry (ptr, char(64) var);
  dcl  ssu_$set_prompt_mode entry (ptr, bit(*));
  dcl  ssu_$standalone_invocation entry (ptr, char(*), char(*), ptr, entry, fixed bin(35));

  dcl (F init("0"b), T init("1"b)) bit(1) aligned int static options(constant);
						/* Constants used in this include file.		        */

  dcl  ssu_et_$subsystem_aborted fixed bin(35) ext static;	/* External variables.			        */

  dcl  cleanup condition;				/* Conditions used in this include file.	        */

						/* Automatic variables.			        */
  dcl  argCount fixed bin;                                  /* Count of arguments in command/request line.	        */
  dcl  argI fixed bin init (0);                             /* Index of argument last examined.		        */

  dcl  arg char(argL) based(argP),			/* Argument returned by ssu_$arg_ptr		        */
       argL fixed bin(21),
       argP ptr;

  dcl  af_ret char (af_retL) varying based(af_retP),	/* When called as active function, this is return value.  */
       af_retL fixed bin (21),
       af_retP ptr;

  dcl  code fixed bin(35);				/* Status code.				        */

  dcl  isAF bit(1) aligned;				/* T: an active request; F: a command request	        */
  dcl  isStandalone bit(1) aligned;			/* T: a standalone invocation; F: a request invocation    */

  dcl  sciP ptr;					/* Pointer to ssu_$standalone_invocation data, which      */
						/*  must be cleaned up before returning from command.     */

%page;
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* Support Routines:  argument processing, and ssu_$standalone_invocation and aborting	        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

arg_setup:
          proc (AsciP);
	
  dcl  AsciP ptr;

	call ssu_$return_arg (AsciP, argCount, isAF, af_retP, af_retL);
	end arg_setup;
     

args_remain:					/* Function to report whether any arguments               */
          proc () returns (bit (1) aligned);		/*  remain to be processed.			        */
	return (argI < argCount);
	end args_remain;


isControlArg:					/* Returns T if arg is in form of a -control_arg.	        */
          proc (Aarg) returns (bit(1) aligned);
     
  dcl  Aarg char(*);
  dcl  argFirst char(1) defined(Aarg);
  dcl  length builtin;

	if  length(Aarg) = 0  then return(F);		/* empty string is not an option.		        */
	if  argFirst ^= "-"   then return(F);		/* does not start with - , then not an option.	        */
	return(T);
	end isControlArg;


abort_to_EXIT:					/* Called by ssu_$abort_line & ssu_$abort_subsystem.      */
          proc();
          goto EXIT;				/* Do non-local transfer, to end command/AF and cleanup   */
          end abort_to_EXIT;				/*  the standalone subsystem.			        */


standalone_cleanup_handler:
          proc(AisStandalone, AsciP);
     
  dcl  AisStandalone bit(1) aligned;			/* T: ssu_$standalone_invocation created; F: not created  */
  dcl  AsciP ptr;					/* Pointer to ssu_$standalone_invocation data.	        */

	if AisStandalone then do;
	     call ssu_$destroy_invocation (AsciP);
	     AisStandalone = F;
	     end;
	return;

	end standalone_cleanup_handler;

/*  END OF:	ssu_standalone_command_.incl.pl1	  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
