/*  START OF:	mbuild_Tlist_dcls_.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	
/****^  HISTORY COMMENTS:
  1) change(2019-08-17,GDixon), approve(2019-10-23,MCR10069),
     audit(2020-01-20,Swenson), install(2020-01-20,MR12.6g-0035):
     mbuild subsystem threaded-list software and declarations.  See: MTB-1003
                                                   END HISTORY COMMENTS */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
/*									        */
/* NOTES on Threaded Lists:							        */
/*   The structures declared below are connected in two cardinality types:		        */
/*    - one-to-one:                   COMPILE.sourceP  <---->  SEG(source).compileP	        */
/*    - one-to-many:    SEG(source_archive).inArch_Tb  <--->>  SEG(source).inArch_Td	        */
/*									        */
/*   mbuild uses threaded lists (Tlists) to do one-to-many connections between related	        */
/*   structures.								        */
/*     - A Tlist_base structure anchors the head/tail of a list.			        */
/*     - A Tlist_data structure threads between adjacent structures of the list, or	        */
/*       between a structure and the list head or tail anchor points.			        */
/*									        */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

  dcl 1 Tlist_base aligned based,			/* Structure anchoring the threaded list of items.        */
      2 headP ptr,					/* pointer to first item in the list.		        */
      2 tailP ptr,					/* pointer to last item in the list.		        */
      2 holderP ptr;				/* pointer to structure holding this Tlist_base.	        */

  dcl 1 Tlist_data aligned based,			/* Structure contained in items threaded together.        */
      2 prevP ptr,					/* pointer to prev element on the list.		        */
      2 nextP ptr,					/* pointer to next element on the list.		        */
      2 itemP ptr,					/* pointer to structure holding this substructure.        */
      2 baseP ptr;					/* pointer to list base (head/tail pointers).	        */

  dcl 1 Tlist_initial_base aligned int static options(constant),
      2 (headP, tailP, holderP) ptr init(null());		/* Initial value for a Tlist_base item.		        */
	
  dcl 1 Tlist_initial_data aligned int static options(constant),
      2 (prevP, nextP, itemP, baseP) ptr init(null());	/* Initial value for a Tlist_data item.		        */

/*  END OF:	mbuild_Tlist_dcls_.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
