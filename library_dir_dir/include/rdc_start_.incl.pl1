	/* START OF:	rdc_start_.incl.pl1		  *  *  *  *  *  *  */

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
	/*							*/
	/* N__a_m_e:  rdc_start_.incl.pl1					*/
	/*							*/
	/*      This include segment is used by compilers generated by the	*/
	/* reduction_compiler.  Such compilers include a SEMANTIC_ANALYSIS	*/
	/* subroutine generated by the reduction_compiler.  This subroutine	*/
	/* compares a chain of input tokens with token requirements		*/
	/* specified in reductions.  This include segment declares the 	*/
	/* structure of the input tokens (which are generated by lex_string_),*/
	/* defines the beginning of the SEMANTIC_ANALYSIS procedure, and	*/
	/* declares Pthis_token, a global pointer variable which points to	*/
	/* the "current" token being referenced by SEMANTIC_ANALYSIS.	*/
	/*							*/
	/* S__t_a_t_u_s							*/
	/*							*/
	/* 0) Created:  April, 1974 by G. C. Dixon			*/
	/*							*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

     dcl	Pthis_token		ptr;		/* ptr to the "current" token being acted upon.	*/

%include lex_descriptors_;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


SEMANTIC_ANALYSIS:	procedure;			/* procedure which analyzes the syntax and	*/
						/* semantics of the tokens in the input list.	*/

     dcl						/*	automatic variables			*/
	LTOKEN_REQD_VALUE		fixed bin(18),	/* length of a token requirement.		*/
	NRED			fixed bin,	/* number of the reduction tokens are being	*/
						/* compared to.				*/
	PRED			ptr,		/* ptr to the reduction tokens are being	*/
						/* compared to.				*/
	PTOKEN_REQD		ptr,		/* ptr to token requirement descriptor associated	*/
						/* with reduction tokens are being compared to.	*/
	PTOKEN_REQD_VALUE		ptr,		/* ptr to a token requirement.		*/
	STOKEN_FCN		bit(1) aligned,	/* return value from a relative syntax function.	*/
	CODE			fixed bin(35),	/* an error code.				*/
	I			fixed bin,	/* a do-group index.			*/
	NUMBER			fixed bin(35);	/* fixed binary representation of a decimal 	*/
						/* number character string.			*/

     dcl						/*	based variables			*/
	1 RED			aligned based (PRED),
						/* descriptor for reduction tokens are being 	*/
						/* compared to.				*/
	  2 TOKEN_REQD		unaligned,
	    3 IFIRST		fixed bin(17) unal,	/* index of first token requirement.		*/
	    3 ILAST		fixed bin(17) unal,	/* index of last  token requirement associated	*/
						/* with this reduction.			*/
	1 TOKEN_REQD		aligned based (PTOKEN_REQD),
						/* a token requirement descriptor.		*/
	  2 FORM			fixed bin(17) unal,	/* form of the token requirement:		*/
						/*  -1 = relative token requirement function;	*/
						/*       TYPE = index of the particular token	*/
						/*	      function in the token_fcn array.	*/
						/*   0 = built-in token requirement function;	*/
						/*       TYPE = as defined below.		*/
						/*  >0 = absolute token requirement:		*/
						/*       FORM = index(TOKEN_STRINGS,TOKEN_REQD);	*/
						/*       TYPE = length(TOKEN_REQD);		*/
	  2 TYPE			fixed bin(17) unal,	/* TYPE of built-in token requirement function:	*/
						/*   1 = compile test to see if input token 	*/
						/*       chain is exhausted (<no-token>).	*/
						/*   2 = compile test for any token value	*/
						/*       (<any-token>).			*/
						/*   3 = compile test for a PL/I identifier	*/
						/*       (<name>) of 32 or fewer characters.	*/
						/*   4 = compile test for token which is a	*/
						/*       <decimal-integer>.			*/
						/*   5 = compile test for token which is a single	*/
						/*       backspace character (<BS>).		*/
						/*   6 = compile test for a token which is a	*/
						/*       <quoted-string>.			*/

	1 TOKEN_REQD_STRING		aligned based (PTOKEN_REQD),
						/* overlay for an absolute token requirement	*/
						/* descriptor.				*/
	  2 I			fixed bin(17) unal,	/* index into list of token strings of the	*/
						/* absolute token string assoc w/ descriptor.	*/
	  2 L			fixed bin(17) unal,	/* length of the absolute token string.		*/
	TOKEN_REQD_VALUE		char(LTOKEN_REQD_VALUE) based (PTOKEN_REQD_VALUE);
						/* absolute token string which token is reqd	*/
						/* to match in order for tokens which are	*/
						/* "current" on the list to match the reduction.	*/

     dcl						/*	builtin functions			*/
         (addr, max, null, search, substr, verify)
				builtin;

     dcl						/*	entries				*/
	cv_dec_check_		entry (char(*), fixed bin(35)) returns (fixed bin(35));

     dcl						/*	static variables			*/
	BACKSPACE			char(1) aligned int static init ("");

	/* END OF:	rdc_start_.incl.pl1		  *  *  *  *  *  *  */
