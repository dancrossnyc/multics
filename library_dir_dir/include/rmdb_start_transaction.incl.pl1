/* ====== BEGIN INCLUDE FILE	        rmdb_start_transaction.incl.pl1 =========================== */

/*
                    BEGIN_DESCRIPTION

   A generalized routine accessed by 5 MRDS modules  (create_mrds_db.pl1,
   rmdb_create_index.pl1, rmdb_create_relation.pl1, rmdb_delete_index.pl1,
   rmdb_delete_relation.pl1) that must start transactions if none are present.
   The intent is that it be executed as inline code.  The variable
   mstxn_transactions_needed must be set prior to entering this code.
   In most cases a simple assignment from dbcb_data.transactions_needed
   will suffice.  Included are procedures called mstxn_cleanup and 
   mstxn_any_other.  These procedures must be called by cleanup and any_other 
   handlers in the program.  Such handlers should be established just prior to
   the inclusion of this code and disabled just following the inclusion of
   rmdb_finish_transaction.  Directly prior to establishing the handlers
   mstxn_txn_id must be set to "0"b.  This must be done even though this 
   include file does the same, because this code might not have been entered 
   yet when the handler is invoked.  Directly following this include file the 
   contents of mstxn_code should be examined.  If zero, then either the 
   transaction was successfully started or no transaction was required.  If the
   mrds_finish_transaction code is referenced in general error handling 
   situations where the possibility exists that the code in this include file 
   has not been executed, it is necessary to initialize mstxn_txn_id to "0"b at
   the beginning of the program.

                    END_DESCRIPTION

   Written 82-09-28 by Paul W. Benjamin.
   Modified 82-12-09 by PWB to include mstxn_any_other.
   Modified 83-01-07 by PWB to not reference the dbcb.
   Modified 83-01-10 by PWB to add a call to continue_to_signal_ to the
		 any_other handler in situations where the module did
		 not start the transaction.
   Modified 83-05-05 by PWB to abandon when abort fails.
   Modified 83-05-18 by PWB to use mstxn_temp_code in calls to abandon and
		 and abort.
   Modified 83-05-19 by PWB to handle transaction_deadlock and 
		 transaction_bj_full conditions.
   Modified 84-02-04 by PWB to add trailing underscores to the 2 conditions
		 and to handle transaction_lock_timeout_.
   Modified 85-04-14 by Thanh Nguyen: Changed this include file name to
                     rmdb_start_transaction.incl.pl1 with the same content
                     for create_mrds_db.pl1, rmdb_create_index.pl1, 
                     rmdb_delete_index.pl1, rmdb_delete_relation.pl1.  Because
                     these four modules do not contain the dbcb structure, but
                     we need to reference to dbcb for the rest of other mrds
                     modules.
*/

dcl continue_to_signal_ entry (fixed bin(35));
dcl dm_error_$no_current_transaction fixed bin (35) ext static;
dcl error_table_$null_info_ptr fixed bin(35) ext static;
dcl find_condition_info_ entry (ptr, ptr, fixed bin(35));
dcl mstxn_code fixed bin (35);
dcl mstxn_retries fixed;
dcl mstxn_temp_code fixed bin (35);
dcl mstxn_transactions_needed bit (1) aligned;
dcl mstxn_txn_id bit (36) aligned;
dcl transaction_manager_$abandon_txn entry (bit (36) aligned, fixed bin (35));
dcl transaction_manager_$abort_txn entry (bit (36) aligned, fixed bin (35));
dcl transaction_manager_$begin_txn entry (fixed bin, fixed bin (35), bit (36) aligned, fixed bin (35));
dcl transaction_manager_$get_current_txn_id entry (bit (36) aligned, fixed bin (35));
dcl transaction_manager_$handle_conditions entry ();
dcl 1 mstxn_condition_info like condition_info;
%page;
%include dm_tm_modes;
%skip;
%include condition_info;
%page;
	mstxn_code = 0;
	mstxn_txn_id = "0"b;
	
	if ^mstxn_transactions_needed			/* only need transactions */
	     then goto mstxn_exit;			/* for protected page files */

	mstxn_retries = 0;
	call transaction_manager_$get_current_txn_id (mstxn_txn_id, mstxn_code);
	if mstxn_code ^= dm_error_$no_current_transaction	/* and if none already in progress */
	     then do;				
	     mstxn_txn_id = "0"b;			/* you didn't start it, it's none of your business */
	     goto mstxn_exit;	
	end;

	call transaction_manager_$begin_txn (TM_NORMAL_MODE, 0, mstxn_txn_id, mstxn_code);

mstxn_cleanup:
proc;

/*  This procedure MUST be called by a cleanup handler. */

          if mstxn_txn_id ^= "0"b
          then do;
	     call transaction_manager_$abort_txn (mstxn_txn_id, mstxn_temp_code);
	     if mstxn_temp_code ^= 0
		then call transaction_manager_$abandon_txn (mstxn_txn_id, mstxn_temp_code);
	end;
	
     end mstxn_cleanup;

mstxn_any_other:
proc;

/*  This procedure MUST be called by an any_other handler. */

          if mstxn_txn_id ^= "0"b
          then do;
	     call find_condition_info_ (null (), addr(mstxn_condition_info), mstxn_temp_code);
	     if mstxn_condition_info.condition_name = "transaction_deadlock_"
		then do;
		mftxn_code = dm_error_$lock_deadlock;
		goto mftxn_check_code;
	     end;
	     else if mstxn_condition_info.condition_name = "transaction_bj_full_"
		| mstxn_condition_info.condition_name = "transaction_lock_timeout_"
		then do;
		mftxn_code = dm_error_$bj_journal_full;
		goto mftxn_check_code;
	     end;
	     else call transaction_manager_$handle_conditions;
	end;
	else call continue_to_signal_ (mstxn_code);	/* code returned will always be zero */
     end mstxn_any_other;
     
mstxn_exit:
     
/* ------ END INCLUDE FILE	          rmdb_start_transaction.incl.pl1 --------------------------- */
