/*  START OF:	rdc_tracing_fcns_.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* N__a_m_e: rdc_tracing_fcns_.incl.pl1						*/
	/*									*/
	/*      This include segment is used by compilers generated by the reduction_compiler.	*/
	/* It includes a PRINT_REDUCTION procedure which prints eached matched reduction, and a	*/
	/* PRINT_TOKENS procedure which print the tokens which match the reduction.  This output	*/
	/* helps trace the flow of control through the reductions.				*/
	/*									*/
	/* E__n_t_r_y:  PRINT_REDUCTION							*/
	/*									*/
	/*      This entry prints the matched reduction.					*/
	/*									*/
	/* U__s_a_g_e									*/
	/*									*/
	/*      call PRINT_REDUCTION(NRED)						*/
	/*									*/
	/* 1) NRED   is the number of the matched reduction.				*/
	/*									*/
	/* E__n_t_r_y:  PRINT_TOKENS							*/
	/*									*/
	/*      The entry prints the tokens which matched the matching reduction.		*/
	/*									*/
	/* U__s_a_g_e									*/
	/*									*/
	/*      call PRINT_TOKENS (DIRECTION, FIRST, LAST)				*/
	/*									*/
	/* 1) DIRECTION	is +1 in a non-PUSH DDOWN  LANGUAGE translator, and -1 in a PUSH DOWN */
	/*		LANGUAGE translator.					*/
	/* 2) FIRST	is number of the first syntax specification of this reduction.	*/
	/* 3) LAST	is the number of the last syntax specification of this reduction.	*/
	/*									*/
	/* S__t_a_t_u_s									*/
	/*									*/
	/* 0) Created by:   G. C. Dixon, February, 1981 for reductions command, version 2.3	*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

PRINT_REDUCTION:
	proc (NRED);

     dcl	NRED			fixed bin,
	ioa_			entry() options(variable);

	call ioa_ ("^a", RED_TEXT(NRED));

	end PRINT_REDUCTION;


PRINT_TOKENS:
	proc (DIRECTION, FIRST, LAST);

     dcl	DIRECTION			fixed bin,
         (FIRST, LAST)		fixed bin;

     dcl	Itoken			fixed bin,
	count			fixed bin;

     dcl	ioa_$nnl			entry() options(variable);

	if Ptoken = null then do;
	     call ioa_$nnl ("<NO TOKENS LEFT>^/");
	     return;
	     end;

	if DIRECTION = -1 then do;			/* PUSH DOWN LANGUAGE			*/
	     count = FIRST - LAST + 1;
	     if count = 0 then do;
		call ioa_$nnl ("^/");
		return;
		end;
	     PTOKEN_REQD = addr(TOKEN_REQUIREMENT(FIRST));
	     if TOKEN_REQD.FORM = 0 & TOKEN_REQD.TYPE = 0 then
		count = count - 1;			/* A <no-token> syntax function does not match a	*/
						/*  token.				*/
	     do Itoken = 1 to count-1 while(token.Plast ^= null);
		Ptoken = token.Plast;
		end;
	     do Ptoken = Ptoken repeat token.Pnext while (Ptoken ^= Pthis_token);
		call ioa_$nnl ("^a ", token_value);
		end;
	     call ioa_$nnl ("^a^/", token_value);
	     end;
	else do;
	     count = LAST - FIRST + 1;
	     do Itoken = 1 to count;
		call ioa_$nnl ("^a ", token_value);
		Ptoken  = token.Pnext;
		end;
	     call ioa_$nnl ("^/");
	     Ptoken = Pthis_token;
	     end;

	end PRINT_TOKENS;

	     
	     
/*  END OF:	rdc_tracing_fcns_.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
