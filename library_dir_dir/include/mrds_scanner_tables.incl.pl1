/* mrds_scanner_tables.incl.pl1 

   These are the tables that drive the scanner for MRDS selection expression 
   parsing.

   Originally created 08-04-85 J. Hergert


 The following declaration is used by the scanner to type the token it is 
 about to parse. The first character determines what the token could be.

 The codes in the following declaration are deciphered as follows:
 Any code >  0 is a token type, indicating the type of token we will try 
 to find. Codes less than 0 are negated keyword encode values. These token 
 types are simple one character tokens and no further searching need be 
 done when we find one.
*/


/****^  HISTORY COMMENTS:
  1) change(87-11-23,Hergert), approve(88-06-28,MCR7903),
     audit(88-06-28,Dupuis), install(88-08-01,MR12.2-1073):
     Created for for new parser.
                                                   END HISTORY COMMENTS */

dcl token_type_list (22) fixed bin internal static options(constant) init (
/*                                              CHARACTER CLASSES
            1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  
          num   .  +-  Ee   i   ^   =   <   > let  * /  |   (   )   &   , whsp  " oth   :   ]   [
*/
            1,  2,  3,  4,  4,  5,  6,  7,  8,  4, 14, 9, 14, 14, 14, 14, 10, 11, 12, 13, 14, 14);




/* The following dcl sets up a list that is used to categorize each 
   character into one of 22 classes. The classes are defined below.

The character classes are the following:
1 digits
2   .
3   +-
4   Ee
5   i
6   ^
7   =
8   <
9   > 
10  letters
11  * /
12  |
13  (
14  )
15  &
16  ,
17  SP TAB NL FF VT CR   (white space)
18  "
19  all others
20  :
21  ]
22  [
*/


/* each of 512 ascii characters classified into the above groups */

dcl char_class_list (0:511) fixed bin internal static options(constant) 
    init(
/*         whsp                !   "   #$%    &   '   (   )   *  +   ,  - */
    (9)19, (5)17, (18)19, 17, 19, 18, (3)19, 15, 19, 13, 14, 11, 3, 16, 3,
/*  .   /   nums   :   ;  <  =  >   ?   @   ABCD  E   FGH   I   J-U       */
    2, 11, (10)1, 20, 19, 8, 7, 9, 19, 19, (4)10, 4, (3)10, 5, (12)10,
/*   V   W   X   Y   Z   [   \   ]  ^   _   `   abcd  e   fgh   i   j-u   */
    10, 10, 10, 10, 10, 22, 19, 21, 6, 19, 19, (4)10, 4, (3)10, 5, (12)10,
/*   v   w   x   y   z   {   |                                            */
    10, 10, 10, 10, 10, 19, 12, (387)19);

 


/* the table declared below is a state table used to parse a number.
   The rows are states, and the columns are character classes. These
   are obtained from the char_class_list above. The columns are organized
   so that the six correspond to classes 1-6 above.

   A positive value in the table is the next state to goto, given the current
   character class. A negative value means the scan is finished.
   -1 means the scan is finished, a token has been found.
   -2 means an error has been detected.
   -3 means the scan is finished, a token has been found, the cursor must be 
      bumped by one.
*/

dcl num_state_table (6,6) fixed bin internal static options (constant) init(
/*                class
          1   2   3   4   5   6
        num   .  +-  Ee   i   other
states */
/* 1 */   1,  2, -1,  3, -3, -1, 
/* 2 */   4, -2, -2, -2, -2, -2, 
/* 3 */   6, -2,  5, -2, -2, -2, 
/* 4 */   4, -1, -1,  3, -3, -1, 
/* 5 */   6, -2, -2, -2, -2, -2, 
/* 6 */   6, -1, -1, -1, -3, -1);
	
