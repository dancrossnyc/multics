/* Begin include file . . . lsm_formats.incl.pl1 */

/* CONSTANTS */

dcl (LSM_version_7 initial (7),			/* current version, root is always symtab */
     LSM_version_6 initial (6))			/* root wasn't automatically symtab */
     fixed bin static options (constant);

dcl 1 lsm_constants aligned static options (constant),
    2 n_types fixed bin initial (9),
    2 types,
      3 indirect_type initial (1),
      3 fixed_type initial (2),
      3 float_type initial (3),
      3 bit_type initial (4),
      3 char_type initial (5),
      3 symtab_type initial (6),
      3 symbol_type initial (7),
      3 list_type initial (8),
      3 array_type initial (9),
    2 data_length_factors (9) initial (1, 1, 1, 36, 4, 1, 1, 1, 1),
    2 max_allocation fixed bin initial (4095),
    2 initial_component_slots fixed bin initial (8);

dcl  lsm_segptr pointer;

dcl 1 lsm aligned based (lsm_segptr),			/* declaration of head of lsm_ segment */
    2 version fixed bin,				/* number of lsm_ version that created this seg */
    2 free fixed bin (18),				/* word number of first free word in seg */
    2 root_symtab fixed bin (18),			/* node number of the root symbol table */
    2 lock bit (36) aligned,
    2 component_slots fixed bin,
    2 components fixed bin,
    2 pad (26) fixed bin (18),
    2 component_ptrs (lsm_constants.initial_component_slots refer (lsm.component_slots)) pointer unaligned;


/* Formats of different node types used by lsm_ */

dcl  node_ptr pointer;

dcl 1 header aligned based (node_ptr),			/* Used in all formats below */
    2 type fixed bin (6) unsigned unaligned,		/* type of node */
    2 allocated_len fixed bin (12) unsigned unaligned,	/* allocated length of data space */
    2 data_len fixed bin (18) unsigned unaligned;		/* current length of data in block */
						/* (in appropriate units) */

dcl 1 any_node aligned based (node_ptr),		/* general node description */
    2 header like header aligned,
    2 data_space (0 refer (any_node.allocated_len)) bit (36) aligned;

dcl 1 indirect_node aligned based (node_ptr),		/* internal to lsm_ */
    2 header like header,
    2 new_node fixed bin (18);			/* numberof reallocated node */

dcl 1 fixed_node aligned based (node_ptr),		/* array of fixed bin (35) */
    2 header like header,
    2 element (0 refer (fixed_node.data_len)) fixed bin (35); /* array of values */

dcl 1 float_node aligned based (node_ptr),		/* array of float binary (27) */
    2 header like header,
    2 element (0 refer (float_node.data_len)) float bin (27);

dcl 1 bit_node aligned based (node_ptr),		/* string of bits */
    2 header like header,
    2 string bit (0 refer (bit_node.data_len));		/* bit string of max length */

dcl 1 char_node aligned based (node_ptr),		/* string of characters */
    2 header like header,
    2 string char (0 refer (char_node.data_len)) unaligned; /* character string of max length */

dcl 1 symtab_node aligned based (node_ptr),		/* symbol table node */
    2 header like header,
    2 bucket_root (0 : 1 refer (symtab_node.data_len)) fixed bin (18);
						/* actually, it is (0 : data_len - 1), but there's no way to do */
						/* this with a refer option, and it's invalid not to use refer */

dcl 1 symbol_node aligned based (node_ptr),		/* symbol node */
    2 header like header,
    2 name_node fixed bin (18),			/* number of character string node containing symbol name */
    2 value_node fixed bin (18),			/* number of node that is the "value" of this symbol */
    2 next_node fixed bin (18);			/* number of next symbol node in this bucket chain */
						/* =0 if this is last node o chain */

dcl 1 list_node aligned based (node_ptr),		/* non-terminal list node */
    2 header like header,
    2 node (0 refer (list_node.data_len)) fixed bin (18);	/* numbers of nodes comprising this list */

dcl 1 array_node aligned based (node_ptr),		/* non-terminal list with terminal properties */
    2 header like header,
    2 node (0 refer (array_node.data_len)) fixed bin (18);	/* numbers of nodes comprising this array */


/* End include file . . . lsm_formats.incl.pl1 */
