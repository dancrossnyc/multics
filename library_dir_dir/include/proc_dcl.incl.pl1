/* proc_dcl include file  */

dcl assign entry(ptr,ptr,fixed bin precision(35)),
    random_$uniform entry (fixed bin(35),float bin(27)),
    edit_options entry(ptr,char(22) varying),
    error_output entry(ptr,char(3) varying),
    ioi_$connect_pcw entry (fixed bin(12),fixed bin(18),bit(36),
         fixed bin(35)),
    sioi_$connect_pcw entry (fixed bin(12),fixed bin(18),bit(36),
         fixed bin(35)),
    options entry(ptr,ptr,fixed bin),
    output_trace entry(ptr,ptr,fixed bin,ptr),
     establish_cleanup_proc_ entry(entry),
     revert_cleanup_proc_ entry,
    terminate_process_ entry(char(*),ptr),
    timer_manager_$alarm_wakeup entry (fixed bin(71),bit(2),fixed bin(71));

dcl current_dcw_add ptr,
    work_ptr ptr,
    status_zero_ptr ptr;

dcl status_zero bit(36) aligned based(status_zero_ptr);

dcl 1 dcw_peek based,
      2 add bit(18) unaligned,
      2 char bit(3) unaligned,
      2 w_c bit(1) unaligned,
      2 typ bit(2) unaligned,
      2 wc bit(12) unaligned;


dcl 1 fatal_desc aligned,
     2 version init(0),
     2 fatal_code fixed bin(35) init(0);
dcl 1 bit_look based,
      2 data(10656) bit(1);
 
 dcl  bits based bit(36) aligned;
dcl  fmtflg aligned init(0);

dcl char_move char(48) based;
dcl falt_peek precision(35) based;
dcl char6_peek(256) bit(6) based;
dcl 1 data_peek based,
      2 data bit(36);
dcl 1 data_move based,
      2 data(322) bit(36);


dcl 1 dcw_list,
      2 dcws(10) aligned,
        3 add bit(18) unaligned,
        3 char bit(3) unaligned,
        3 w_c bit(1) unaligned,
        3 typ bit(2) unaligned,
        3 wc bit(12) unaligned;

dcl inst$tdli(370) char(8) aligned external,
    inst$tdlr_no(1480) unaligned external,
    inst$tdlr_num_conv_control(4440) precision(5) unaligned external,
    inst$tdlr_type_conv_control(4440) bit(6) unaligned external,
    inst$tlen external;

/* validating table for hex data
a 20 entry is illegal
otherwise, the data is the numerical value for the conversion */
dcl hex_val(64) init(
0,1,2,3,4,5,6,7,8,9,   /*  0-9 ok and convert to 0-9 */
20,20,20,20,20,20,20,  /* 10-16 illegal */
10,11,12,13,14,15,  /* 17-22 (a-f) legal and convert to 10-15 */
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20);  /* 23-63 illegal */


dcl allow_branch_dcw,
    bit36 bit(36),
    byte1 bit(9),
    byte2 bit(9),
    byte3 bit(9),
    check,
    chgmode init(0),
    eflag init(0),
    cmpflg init(0),
    current_options char(22) varying,
    data_error char(150) varying,
    data_setup_reladd,
    data_setup_wc,
    dcw_count,
    did_skip,
    dovar1,
    dovar2,
    dovar3,
    dvran bit(36),
    dvranw bit(72),
    fdec1,
    fdec2,
    fdec3,
    fieldno,
    fix_bit precision(35),
    halt_message char(20) varying,
    inv_data char(72) varying init("") static,
    isol_flag,
    last_test_no,
    lineno,
    lpprct init(0),
    message char(512) varying,
    mesg_len,
    next_test_no,
    non_exec_count,
    octnum precision(63),
    page_no_char char(36) init("0123456789abcdefghijklmnopqrstuvwxyz"),
    page_term char(12) varying,
    passck init(0),
    pcwa bit(36),
    per_op_letter char(1),
    pnum char(1),
    pos char(3) varying,
    sf bit(36) based,
    skip_field_no init (0),
    status_ptr ptr,
    term_message char(150) varying init(""),
    the_char char(1),
    tio_off precision(18),
    vdec4,
    work_num;
  dcl adrange bin (35);
  dcl seed fixed bin(35);
  dcl random_no float bin(27);
  dcl adproduct bin(35);


dcl rcp_name char(8) varying;
dcl rcp_area(24);
dcl rcp_priv_$attach entry(char(*),ptr,fixed bin(71),char(*),bit(36) aligned,fixed bin(35));
/* call rcp_priv_$attach("tape",info_ptr,event_id,"comment",mdata.rcp_id,error);
		       "disk"
		       "console"
		       "printer"
		       "punch"
		       "reader"
		       "special"
					"comment" is displayed to the operator
					after assignment is complete.  No comment
					will be displayed if "".

					mdata.rcp_id and error are outputs.


			info_ptr points to one of the following structures:
			All of the info in these different structures
			is identical up through device_name for all of the
			devices.  Since if device_name is not blank, all of the rest of the
			information is ignored, rather than use a different
			structure for each device, the largest structure(that for tapes) is used
			and T&D always sets the device_name to non-blank as it wants a specific device.

*/
%include rcp_device_info;
%include rcp_tape_info;
%include rcp_disk_info;
%include rcp_printer_info;
