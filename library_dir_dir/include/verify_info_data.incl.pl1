/*  START OF:	verify_info_data.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/****^  HISTORY COMMENTS:
  1) change(2020-11-25,GDixon), approve(2021-02-23,MCR10089),
     audit(2021-03-31,Swenson), install(2021-03-31,MR12.6g-0053):
      Initial version of this structure and associated constants.
                                                   END HISTORY COMMENTS */

/* --------------------------------------------------------------------------------
   STRUCTURE:  verify_info_data

     Describes data used by the verify_info command and its info_seg_verify_$iFiles
     subroutine to examine info segment formatting.
   -------------------------------------------------------------------------------- */


  dcl 1 verify_info_data aligned based(verify_info_dataP),
      2 vid_version char(16),				/*  - version of this struct: verify_info_data_version_01 */

      2 inputs,
						/* Inputs for: info_seg_verify_$display_specifications:   */
        3 rules_area fixed bin,			/* -rules OPERAND  select which rules to display:	        */
						/*                 a VI_RULE_xxx value from list below.   */


						/* Inputs for: info_seg_verify_$iFiles		        */
						/*  (includes all remaining verify_info_data elements)    */
        3 switches,
	4 (totalsS,				/* -totals: (T) only set error_count, highest_severity.   */
						/*          (F) display individual error messages.        */
	   briefS,				/* -brief:  (T) block/section errors displayed as keys at */
						/*              end of vi block/section heading output.   */
						/*          (F) full error messages are displayed.        */

	   fileS,					/* -debug file  display details of file structure.        */
	   blockS,				/* -db block    display block divider and header details. */
	   sectionS,				/* -db section  display Syntax section components.        */
	   listS					/* -db list     display section items in "Arguments",     */
						/*              "Control arguments" and "List of ..."     */
   	   ) bit(1) aligned,
        3 naming fixed bin(2),			/* -names, -no_names, -force_names setting:	        */
						/*                 a VI_NAMING_xxx value 	        */

        3 lines,					/* display info seg lines, for debugging purposes	        */
	4 file,					/* -lines {count}   OR   -lines start:{count}	        */
	  5 (start, count) fixed bin,
	4 blok,					/* -block {count}   OR   -block start:{count}	        */
	  5 (start, count) fixed bin,

      2 results,					
        3 segs_processed fixed bin,			/*  - count of info segs found and parsed.	        */
        3 error_count fixed bin,			/*  - count of errors encountered		        */
        3 highest_severity fixed bin,			/*  - highest severity error encountered verifying infos  */

      2 isd aligned like info_seg_data,			/*  - info_seg_data structure used to parse segs being    */
						/*    verified.  See info_seg_dcls_.incl.pl1	        */

       verify_info_dataP ptr;				/* Pointer to verify_info_data structure.	        */

  dcl  verify_info_data_version_01 char(14) int static options(constant) init("verify_info_01");
						/* Currently supported version of verify_info_data struct */

						/* Should names on info segment be changed?	        */
  dcl (VI_NAMING_off	init(0),			/*  - no, issue errors for names outside guidelines.      */
       VI_NAMING_query	init(1),			/*  - ask user about removals; add/reorder without asking */
       VI_NAMING_force	init(2)			/*  - make all changes per guidelines without asking, but */
						/*    all changes are reported via error messages.        */
       ) fixed bin(2) int static options(constant);

  dcl  VI_RULES_AREA (12,2) char(12) var int static options(constant) init(
						/* Keep items in VI_RULES_AREA synchronized with index    */
						/*  values VI_RULE_xxx defined below.		        */
			"all",		"a",	/*   - VI_RULE_all_areas			        */
			"file",		"f",	/*   - VI_RULE_file_structure			        */
			"block",		"bk",	/*   - VI_RULE_block_kind			        */
			"section",	"scn",	/*   - VI_RULE_section_titles			        */

			"all_kinds",	"ak",	/*   - VI_RULE_all_kinds			        */
			"command",	"cmd",	/*   - VI_RULE_command_titles			        */

			"subsystem",	"ss",	/*   - VI_RULE_subsystem_titles		        */
			"request",	"req",	/*   - VI_RULE_request_titles			        */

			"topics",		"topic",	/*   - VI_RULE_topic_titles			        */
			"general_info",	"gi",	/*   - VI_RULE_gi_titles			        */

			"subroutine",	"subr",	/*   - VI_RULE_subroutine_titles		        */
			"io_module",        "io"	/*   - VI_RULE_io_titles			        */
			);

  dcl (VI_RULE_unset	   init( 0),		/* The only value not represented in VI_RULES_AREA above. */
       VI_RULE_all_areas	   init( 1),
       VI_RULE_file_structure	   init( 2),
       VI_RULE_block_kind	   init( 3),
       VI_RULE_section_titles	   init( 4),

       VI_RULE_all_kinds	   init( 5),
       VI_RULE_command_titles	   init( 6),

       VI_RULE_subsystem_titles  init( 7),
       VI_RULE_request_titles	   init( 8),

       VI_RULE_topic_titles	   init( 9),
       VI_RULE_gi_titles	   init(10),

       VI_RULE_subroutine_titles init(11),
       VI_RULE_io_titles         init(12)
       ) fixed bin int static options(constant);

  dcl  VI_DEBUG_OPERAND (4,2) char(16) var int static options(constant) init(
			"file",		"f",
			"block",		"bk",
			"section",	"scn",
			"list",		"ls"
			);
  dcl (VI_DEBUG_file	   init( 1),
       VI_DEBUG_block	   init( 2),
       VI_DEBUG_section	   init( 3),
       VI_DEBUG_list	   init( 4)
       ) fixed bin int static options(constant);

/*  END OF:	verify_info_data.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
