/*  BEGIN INCLUDE FILE:	call_dtype_functions.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/****^  HISTORY COMMENTS:
  1) change(2016-08-09,GDixon), approve(2016-10-13,MCR10014),
     audit(2016-10-13,Swenson), install(2016-10-13,MR12.6f-0002):
     Initial version of filter programs for attributes associated with parameter descriptor types.
  2) change(2016-12-17,GDixon), approve(2017-01-14,MCR10014),
     audit(2017-01-14,Swenson), install(2017-01-14,MR12.6f-0014):
     Use attribute information in data_type_info_.incl.pl1 to simplify this code.
                                                   END HISTORY COMMENTS */


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* Data type characteristic test functions used by call.pl1, and related subroutines.	        */
	/*									        */
	/* Caller must include the following PL/I include files, which are referenced throughout these    */
	/* functions:								        */
	/*     std_descriptor_types.incl.pl1						        */
	/*     system.incl.pl1							        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

  dcl  call_dtype_functions (4) entry variable 
	init (bit_string_dtype,  supported_by_call_dtype,  storage_for_pl1_dtype,  pl1_dtype_name);
						/* Suppress PL/I warnings about unreferenced procedures.  */

bit_string_dtype:
     proc (dtype) returns(bit(1) aligned);		/* Is descriptor type bit_dtype or varying_bit_dtype?     */

  dcl  dtype fixed bin;

  dcl 1 attr aligned like data_type_info_$info based(attrP);
  dcl  attrP ptr;

     if dtype < 0 | dtype > hbound(data_type_info_$info, 1) then return ("0"b);
     attrP = addr(data_type_info_$info(dtype));
     return (attr.bit_string);
     

char_string_dtype:
     entry (dtype) returns(bit(1) aligned);		/* Is descriptor type char_dtype or varying_char_dtype?   */

     if dtype < 0 | dtype > hbound(data_type_info_$info, 1) then return ("0"b);
     attrP = addr(data_type_info_$info(dtype));
     return (attr.char_string);


star_extent_dtype:					/* Descriptor types that accept star (*) extents	        */
     entry (dtype) returns(bit(1) aligned);

     if dtype < 0 | dtype > hbound(data_type_info_$info, 1) then return ("0"b);
     attrP = addr(data_type_info_$info(dtype));
     return (attr.bit_string | attr.char_string | (dtype = area_dtype));


string_dtype:					/* Descriptor types that are strings		        */
     entry (dtype) returns(bit(1) aligned);

     if dtype < 0 | dtype > hbound(data_type_info_$info, 1) then return ("0"b);
     attrP = addr(data_type_info_$info(dtype));
     return (attr.bit_string | attr.char_string);


varying_string_dtype:
     entry (dtype) returns(bit(1) aligned);		/* Is descriptor varying_bit_dtype or varying_char_dtype? */

     if dtype < 0 | dtype > hbound(data_type_info_$info, 1) then return ("0"b);
     attrP = addr(data_type_info_$info(dtype));
     return (attr.varying);


fixed_bin_dtype:					/* Descriptor types for fixed binary numbers.	        */
     entry (dtype) returns(bit(1) aligned);

     if dtype < 0 | dtype > hbound(data_type_info_$info, 1) then return ("0"b);
     attrP = addr(data_type_info_$info(dtype));
     return (attr.fixed & ^attr.decimal);


fixed_point_dtype:					/* Descriptor types for fixed-point numbers.	        */
     entry (dtype) returns(bit(1) aligned);

     if dtype < 0 | dtype > hbound(data_type_info_$info, 1) then return ("0"b);
     attrP = addr(data_type_info_$info(dtype));
     return (attr.fixed);


numeric_dtype:					/* Descriptor types that are numbers		        */
     entry (dtype) returns(bit(1) aligned);

     if dtype < 0 | dtype > hbound(data_type_info_$info, 1) then return ("0"b);
     attrP = addr(data_type_info_$info(dtype));
     return (attr.arithmetic);


unsigned_dtype:
     entry (dtype) returns(bit(1) aligned);		/* Is descriptor type fixed bin unsigned dtype?	        */

     if dtype < 0 | dtype > hbound(data_type_info_$info, 1) then return ("0"b);
     attrP = addr(data_type_info_$info(dtype));
     return (attr.arithmetic & ^attr.signed);

%page;
%include data_type_info_;

     end bit_string_dtype;
%page;
  dcl 1 BOUNDARY aligned int static options(constant),	/* storage_for_pl1_dtype boundary parameter constants.    */
      2 (Even_Word init(3),				/* Storage begins on even-word boundary; count in words.  */
         Word      init(2),				/* Storage begins on word boundary;	 count in words.  */
         Byte      init(1),				/* Storage begins on byte boundary;	 count in bytes.  */
         Bit       init(0)) fixed bin(2) unsigned;	/* Storage begins on bit boundary;	 count in bits.   */

storage_for_pl1_dtype:
     proc (dtype, dunaligned, dsize, boundary, count, code);

  dcl  dtype fixed bin;				/* Value from std_descriptor_types.incl.pl1	   (in) */
						/*  Only PL/I data types are supported, however. 	        */
						/*  For other data types, 0 is returned.	        */
  dcl  dunaligned bit(1) aligned;			/* =1:  data is unaligned (packed);                  (in) */
						/* =0:  data is aligned (unpacked).		        */
  dcl  dsize fixed bin(24);				/* For numbers, this is precision value.  For strings(in) */
						/*  & areas, this is a size value given in the attribute. */
						/*  It may not be the * value (16777215).	        */
  dcl  boundary fixed bin(2) unsigned;			/* Storage boundard.  See BOUNDARY constants above. (out) */
  dcl  count fixed bin(24);				/* Count of storage needed, in units specified by   (out) */
						/*  the boundary value.			        */
  dcl  code fixed bin(35);				/* Status code.                                     (out) */
			
  dcl (call_et_$bad_dtype_alignment,
       call_et_$dtype_unsupported,
       call_et_$structure_size_undefined)  fixed bin(35) ext static;
%page;

     boundary = BOUNDARY.Bit;				/* Initialize output parameters.		        */
     count = 0;
     code = 0;

     if ^supported_by_pl1_dtype(dtype) then go to EXIT_storage;
  dcl  subscriptrange condition;
     on subscriptrange begin;				/* Make sure dtype is one of the label array values below */
	go to EXIT_storage;
	end;
     if dunaligned then 
	go to unalStoreSize(dtype);			/* calculate storage size/boundary for unal data type.    */
     else go to storeSize(dtype);			/* calculate storage size/boundary for aligned data type. */

storeSize (real_fix_bin_1_uns_dtype):
storeSize (real_fix_bin_1_dtype):           call st(BOUNDARY.Word,      words_per_fix_bin_1);
storeSize (real_fix_bin_2_uns_dtype):
storeSize (real_fix_bin_2_dtype):           call st(BOUNDARY.Even_Word, words_per_fix_bin_2);
storeSize (real_flt_bin_1_dtype):	    call st(BOUNDARY.Word,	  words_per_flt_bin_1);
storeSize (real_flt_bin_2_dtype):	    call st(BOUNDARY.Even_Word, words_per_flt_bin_2);
storeSize (real_fix_dec_9bit_ls_dtype):     call st(BOUNDARY.Word,       /* extra +1 is for sign byte.	        */
				       divide(dsize+1+(characters_per_word-1),characters_per_word,24,0));
storeSize (real_flt_dec_9bit_dtype):        call st(BOUNDARY.Word,	   /* extra +2 are for sign and exponent bytes. */
				       divide(dsize+2+(characters_per_word-1),characters_per_word,24,0));

storeSize (cplx_fix_bin_1_dtype):           call st(BOUNDARY.Even_Word, 2*words_per_fix_bin_1);
storeSize (cplx_fix_bin_2_dtype):           call st(BOUNDARY.Even_Word, 2*words_per_fix_bin_2);
storeSize (cplx_flt_bin_1_dtype):	    call st(BOUNDARY.Even_Word, 2*words_per_flt_bin_1);
storeSize (cplx_flt_bin_2_dtype):	    call st(BOUNDARY.Even_Word, 2*words_per_flt_bin_2);
storeSize (cplx_fix_dec_9bit_ls_dtype):     call st(BOUNDARY.Word,       /* extra +1 is for sign byte.	        */
				       2*divide(dsize+1+(characters_per_word-1),characters_per_word,24,0));
storeSize (cplx_flt_dec_9bit_dtype):        call st(BOUNDARY.Word,	   /* extra +2 are for sign and exponent bytes. */
				       2* divide(dsize+2+(characters_per_word-1),characters_per_word,24,0));

storeSize (pointer_dtype):                  call st(BOUNDARY.Even_Word, words_per_pointer);
storeSize (offset_dtype):		    call st(BOUNDARY.Word,      words_per_offset);
storeSize (label_dtype):		    call st(BOUNDARY.Word,      words_per_label_var);
storeSize (entry_dtype):                    call st(BOUNDARY.Word,      words_per_entry_var);
storeSize (area_dtype):		    call st(BOUNDARY.Even_Word, (dsize) );
storeSize (file_dtype):		    call st(BOUNDARY.Even_Word, words_per_file_var);

storeSize (char_dtype):		    call st(BOUNDARY.Word, 
				       divide(dsize+(characters_per_word-1),characters_per_word,24,0));
storeSize (varying_char_dtype):             call st(BOUNDARY.Word,
				       divide(dsize+(characters_per_word-1),characters_per_word,24,0) + 
				       words_per_varying_string_header);
storeSize (bit_dtype):                      call st(BOUNDARY.Word,
				       divide(dsize+(bits_per_word-1),bits_per_word,24,0));
storeSize (varying_bit_dtype):              call st(BOUNDARY.Word,
				       divide(dsize+(bits_per_word-1),bits_per_word,24,0) + 
				       words_per_varying_string_header);

storeSize (structure_dtype):				/* Structure has no inherent storage shape/alignment.     */
                                            code = call_et_$structure_size_undefined;  return;
storeSize (real_fix_dec_4bit_bytealigned_ls_dtype):	/* These data types used only for packed decimal.         */
storeSize (real_flt_dec_4bit_bytealigned_dtype):
                                            code = call_et_$bad_dtype_alignment;  return;


unalStoreSize (real_fix_bin_1_dtype):       
unalStoreSize (real_fix_bin_2_dtype):       call st(BOUNDARY.Bit,       dsize+1);
unalStoreSize (real_flt_bin_1_dtype):	    
unalStoreSize (real_flt_bin_2_dtype):	    call st(BOUNDARY.Bit,       dsize+9);

unalStoreSize (real_fix_bin_1_uns_dtype):   
unalStoreSize (real_fix_bin_2_uns_dtype):   call st(BOUNDARY.Bit,       (dsize) );

unalStoreSize (cplx_fix_bin_1_dtype):       
unalStoreSize (cplx_fix_bin_2_dtype):       call st(BOUNDARY.Bit,       2*(dsize+1));
unalStoreSize (cplx_flt_bin_1_dtype):	    
unalStoreSize (cplx_flt_bin_2_dtype):	    call st(BOUNDARY.Bit,       2*(dsize+9));
unalStoreSize (cplx_fix_dec_9bit_ls_dtype): call st(BOUNDARY.Byte,      2*(dsize+1));
unalStoreSize (cplx_flt_dec_9bit_dtype):    call st(BOUNDARY.Byte,      2*(dsize+2));

unalStoreSize (real_fix_dec_4bit_bytealigned_ls_dtype):	/* +2 for sign nibble + round up to full byte boundary.   */
			              call st(BOUNDARY.Byte, divide(dsize+2, packed_digits_per_character,24,0));
unalStoreSize (real_flt_dec_4bit_bytealigned_dtype):	/* +2 for sign nibble + round up to full byte boundary.   */
						/*  +1 after divide for the binary exponent field.        */
			              call st(BOUNDARY.Byte, divide(dsize+2, packed_digits_per_character,24,0)+1);

unalStoreSize (pointer_dtype):              call st(BOUNDARY.Bit,       bits_per_packed_ptr);
unalStoreSize (offset_dtype):		    call st(BOUNDARY.Word,      words_per_offset);
unalStoreSize (label_dtype):		    call st(BOUNDARY.Even_Word, words_per_label_var);
unalStoreSize (entry_dtype):                call st(BOUNDARY.Even_Word, words_per_entry_var);
unalStoreSize (area_dtype):		    call st(BOUNDARY.Even_Word, (dsize) );
unalStoreSize (file_dtype):		    call st(BOUNDARY.Even_Word, words_per_file_var);

unalStoreSize (char_dtype):		    call st(BOUNDARY.Byte,      (dsize) ); 
unalStoreSize (varying_char_dtype):         call st(BOUNDARY.Word,
				       divide(dsize+(characters_per_word-1),characters_per_word,24,0) + 
				       words_per_varying_string_header);
unalStoreSize (bit_dtype):                  call st(BOUNDARY.Bit,       (dsize) );
unalStoreSize (varying_bit_dtype):          call st(BOUNDARY.Word,
				       divide(dsize+(bits_per_word-1),bits_per_word,24,0) + 
				       words_per_varying_string_header);

unalStoreSize (structure_dtype):			/* Structure has no inherent storage shape/alignment.     */
                                            code = call_et_$structure_size_undefined;  return;
unalStoreSize (real_fix_dec_9bit_ls_dtype):		/* These data types used only for unpacked decimal.       */
unalStoreSize (real_flt_dec_9bit_dtype):    code = call_et_$bad_dtype_alignment;  return;

EXIT_storage:
     code = call_et_$dtype_unsupported;							    
RETURN_from_storage:
     return;

st:       proc(bnd, cnt);
  dcl  bnd fixed bin(2) unsigned;
  dcl  cnt fixed bin(31);
	
	boundary = bnd;
	count = cnt;
	go to RETURN_from_storage;
	end st;

     end storage_for_pl1_dtype;
%page;

supported_by_call_dtype:				/* Descriptor types that are supported by call program    */
     proc (dtype) returns(bit(1) aligned);

  dcl  dtype fixed bin;

  dcl  CPLX_FLOAT_DEC_UNAL fixed bin aligned int static options(constant) init(cplx_flt_dec_4bit_bytealigned_dtype);
						/* This is highest-numbered _dtype value supported by     */
						/* the call program.			        */

     if dtype <= 0 | dtype > CPLX_FLOAT_DEC_UNAL then go to SUPPORTED_no;

  dcl  subscriptrange condition;
     on subscriptrange begin;
	go to SUPPORTED_no;
	end;
     go to supportCall(dtype);

supportCall (real_fix_bin_1_dtype):
supportCall (real_fix_bin_2_dtype):
supportCall (real_flt_bin_1_dtype):
supportCall (real_flt_bin_2_dtype):
supportCall (real_fix_dec_9bit_ls_dtype):
supportCall (real_flt_dec_9bit_dtype):
supportCall (pointer_dtype):
supportCall (entry_dtype):
supportCall (area_dtype):
supportCall (bit_dtype):
supportCall (varying_bit_dtype):
supportCall (char_dtype):
supportCall (varying_char_dtype):
supportCall (real_fix_bin_1_uns_dtype):
supportCall (real_fix_bin_2_uns_dtype):
supportCall (real_fix_dec_4bit_bytealigned_ls_dtype):
supportCall (real_flt_dec_4bit_bytealigned_dtype):
     go to SUPPORTED_yes;

supportCall (cplx_fix_bin_1_dtype):
supportCall (cplx_fix_bin_2_dtype):
supportCall (cplx_flt_bin_1_dtype):
supportCall (cplx_flt_bin_2_dtype):
supportCall (cplx_fix_dec_9bit_ls_dtype):
supportCall (cplx_flt_dec_9bit_dtype):
supportCall (cplx_fix_dec_4bit_bytealigned_ls_dtype):
supportCall (cplx_flt_dec_4bit_bytealigned_dtype):
supportCall (structure_dtype):			/* Most of call does not support structures.	        */
supportCall (offset_dtype):
supportCall (label_dtype):
supportCall (file_dtype):
supportCall (real_fix_dec_9bit_ls_overp_dtype):
supportCall (real_fix_dec_9bit_ts_overp_dtype):
supportCall (real_fix_dec_9bit_uns_dtype):
supportCall (real_fix_dec_9bit_ts_dtype):
supportCall (real_fix_dec_4bit_uns_dtype):
supportCall (real_fix_dec_4bit_ts_dtype):
supportCall (real_fix_dec_4bit_bytealigned_uns_dtype):
supportCall (real_fix_dec_4bit_ls_dtype):
supportCall (real_flt_dec_4bit_dtype):
     go to SUPPORTED_no;

SUPPORTED_yes:
     return("1"b);

SUPPORTED_no:
     return("0"b);

     end supported_by_call_dtype;
%page;

supported_by_pl1_dtype:				/* Descriptor types that are supported by PL/I compiler   */
     proc (dtype) returns(bit(1) aligned);

  dcl  dtype fixed bin;

  dcl  CPLX_FLOAT_DEC_UNAL fixed bin aligned int static options(constant) init(cplx_flt_dec_4bit_bytealigned_dtype);
						/* This is highest-numbered _dtype value supported by     */
						/* the call program.			        */

     if dtype <= 0 | dtype > CPLX_FLOAT_DEC_UNAL then go to SUPPORTED_PL1_no;

  dcl  subscriptrange condition;
     on subscriptrange begin;
	go to SUPPORTED_PL1_no;
	end;
     go to supportPL1(dtype);

supportPL1 (real_fix_bin_1_dtype):
supportPL1 (real_fix_bin_2_dtype):
supportPL1 (real_flt_bin_1_dtype):
supportPL1 (real_flt_bin_2_dtype):
supportPL1 (cplx_fix_bin_1_dtype):
supportPL1 (cplx_fix_bin_2_dtype):
supportPL1 (cplx_flt_bin_1_dtype):
supportPL1 (cplx_flt_bin_2_dtype):
supportPL1 (real_fix_dec_9bit_ls_dtype):
supportPL1 (real_flt_dec_9bit_dtype):
supportPL1 (cplx_fix_dec_9bit_ls_dtype):
supportPL1 (cplx_flt_dec_9bit_dtype):
supportPL1 (pointer_dtype):
supportPL1 (offset_dtype):
supportPL1 (label_dtype):
supportPL1 (entry_dtype):
supportPL1 (structure_dtype):
supportPL1 (area_dtype):
supportPL1 (bit_dtype):
supportPL1 (varying_bit_dtype):
supportPL1 (char_dtype):
supportPL1 (varying_char_dtype):
supportPL1 (file_dtype):
supportPL1 (real_fix_bin_1_uns_dtype):
supportPL1 (real_fix_bin_2_uns_dtype):
supportPL1 (real_fix_dec_4bit_bytealigned_ls_dtype):
supportPL1 (real_flt_dec_4bit_bytealigned_dtype):
supportPL1 (cplx_fix_dec_4bit_bytealigned_ls_dtype):
supportPL1 (cplx_flt_dec_4bit_bytealigned_dtype):
     go to SUPPORTED_PL1_yes;

supportPL1 (real_fix_dec_9bit_ls_overp_dtype):
supportPL1 (real_fix_dec_9bit_ts_overp_dtype):
supportPL1 (real_fix_dec_9bit_uns_dtype):
supportPL1 (real_fix_dec_9bit_ts_dtype):
supportPL1 (real_fix_dec_4bit_uns_dtype):
supportPL1 (real_fix_dec_4bit_ts_dtype):
supportPL1 (real_fix_dec_4bit_bytealigned_uns_dtype):
supportPL1 (real_fix_dec_4bit_ls_dtype):
supportPL1 (real_flt_dec_4bit_dtype):
     go to SUPPORTED_PL1_no;

SUPPORTED_PL1_yes:
     return("1"b);

SUPPORTED_PL1_no:
     return("0"b);

     end supported_by_pl1_dtype;
%page;
pl1_dtype_name:
     proc (dtype) returns (char(52) var);
     
  dcl  dtype fixed bin;

  dcl  CPLX_FLOAT_DEC_UNAL fixed bin aligned int static options(constant) init(cplx_flt_dec_4bit_bytealigned_dtype);
						/* This is highest-numbered _dtype value supported by     */
						/* the call program.			        */

     if dtype <= 0 | dtype > CPLX_FLOAT_DEC_UNAL then go to NOT_PL1_DTYPE;

  dcl  subscriptrange condition;
     on subscriptrange begin;
	go to NOT_PL1_DTYPE;
	end;
     go to dn(dtype);

dn( 1):     return ("real_fix_bin_1_dtype");        
dn( 2):	  return ("real_fix_bin_2_dtype");       
dn( 3):	  return ("real_flt_bin_1_dtype");          
dn( 4):	  return ("real_flt_bin_2_dtype");          
dn( 5):	  return ("cplx_fix_bin_1_dtype");          
dn( 6):	  return ("cplx_fix_bin_2_dtype");          
dn( 7):	  return ("cplx_flt_bin_1_dtype");          
dn( 8):	  return ("cplx_flt_bin_2_dtype");          
dn( 9):	  return ("real_fix_dec_9bit_ls_dtype");          
dn(10):	  return ("real_flt_dec_9bit_dtype");           
dn(11):	  return ("cplx_fix_dec_9bit_ls_dtype");          
dn(12):	  return ("cplx_flt_dec_9bit_dtype");          
dn(13):	  return ("pointer_dtype");          
dn(14):	  return ("offset_dtype");          
dn(15):	  return ("label_dtype");          
dn(16):	  return ("entry_dtype");          
dn(17):	  return ("structure_dtype");          
dn(18):	  return ("area_dtype");          
dn(19):	  return ("bit_dtype");          
dn(20):	  return ("varying_bit_dtype");          
dn(21):	  return ("char_dtype");          
dn(22):	  return ("varying_char_dtype");          
dn(23):	  return ("file_dtype");          
dn(33):	  return ("real_fix_bin_1_uns_dtype");          
dn(34):	  return ("real_fix_bin_2_uns_dtype");          
dn(43):	  return ("real_fix_dec_4bit_bytealigned_ls_dtype");          
dn(44):	  return ("real_flt_dec_4bit_bytealigned_dtype");          
dn(45):	  return ("cplx_fix_dec_4bit_bytealigned_ls_dtype");          
dn(46):	  return ("cplx_flt_dec_4bit_bytealigned_dtype");          

dn(24):	  return ("label_constant_runtime_dtype");
dn(25):	  return ("int_entry_runtime_dtype");
dn(26):	  return ("ext_entry_runtime_dtype");
dn(27):	  return ("ext_procedure_runtime_dtype");
dn(28):	  return ("NOT_SUPPORTED");
dn(29):	  return ("real_fix_dec_9bit_ls_overp_dtype");          
dn(30):	  return ("real_fix_dec_9bit_ts_overp_dtype");          
dn(31):	  return ("NOT_SUPPORTED");
dn(32):	  return ("NOT_SUPPORTED");

dn(35):	  return ("real_fix_dec_9bit_uns_dtype");          
dn(36):	  return ("real_fix_dec_9bit_ts_dtype");                    
dn(37):	  return ("NOT_SUPPORTED");
dn(38):     return ("real_fix_dec_4bit_uns_dtype");
dn(39):	  return ("real_fix_dec_4bit_ts_dtype");          
dn(40):	  return ("real_fix_dec_4bit_bytealigned_uns_dtype");          
dn(41):	  return ("real_fix_dec_4bit_ls_dtype");          
dn(42):	  return ("real_flt_dec_4bit_dtype");          

NOT_PL1_DTYPE:
	  return ("NOT_SUPPORTED");

     end pl1_dtype_name;

/*  END INCLUDE FILE:  	call_dtype_functions.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

