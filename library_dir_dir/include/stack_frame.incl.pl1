/* 	BEGIN INCLUDE FILE ... stack_frame.incl.pl1 ... */

/* format: off */

/* Modified: 16 Dec 1977, D. Levin - to add fio_ps_ptr and pl1_ps_ptr */
/* Modified:  3 Feb 1978, P. Krupp - to add run_unit_manager bit & main_proc bit */
/* Modified: 21 March 1978, D. Levin - change fio_ps_ptr to support_ptr */
/* Modified: 03/01/84, S. Herbst - Added RETURN_PTR_MASK */


/****^  HISTORY COMMENTS:
  1) change(86-09-15,Kissel), approve(86-09-15,MCR7473),
     audit(86-10-01,Fawcett), install(86-11-03,MR12.0-1206):
     Modified to add constants for the translator_id field in the stack_frame
     structure.
                                                   END HISTORY COMMENTS */


dcl RETURN_PTR_MASK bit (72) int static options (constant)  /* mask to be AND'd with stack_frame.return_ptr */
	init ("777777777777777777000000"b3);		/* when copying, to ignore bits that a call fills */
						/* with indicators (nonzero for Fortran hexfp caller) */
			/* say: unspec(ptr) = unspec(stack_frame.return_ptr) & RETURN_PTR_MASK; */

dcl TRANSLATOR_ID_PL1V2 bit (18) internal static options (constant) init ("000000"b3);
dcl TRANSLATOR_ID_ALM bit (18) internal static options (constant) init ("000001"b3);
dcl TRANSLATOR_ID_PL1V1 bit (18) internal static options (constant) init ("000002"b3);
dcl TRANSLATOR_ID_SIGNAL_CALLER bit (18) internal static options (constant) init ("000003"b3);
dcl TRANSLATOR_ID_SIGNALLER bit (18) internal static options (constant) init ("000004"b3);


dcl  sp pointer;					/* pointer to beginning of stack frame */

dcl  stack_frame_min_length fixed bin static init(48);


dcl 1 stack_frame based(sp) aligned,
    2 pointer_registers(0 : 7) ptr,
    2 prev_sp pointer,
    2 next_sp pointer,
    2 return_ptr pointer,
    2 entry_ptr pointer,
    2 operator_and_lp_ptr ptr,			/* serves as both */
    2 arg_ptr pointer,
    2 static_ptr ptr unaligned,
    2 support_ptr ptr unal, /* only used by fortran I/O */
    2 on_unit_relp1 bit(18) unaligned,
    2 on_unit_relp2 bit(18) unaligned,
    2 translator_id bit(18) unaligned,			/* Translator ID (see constants above)
						   0 => PL/I version II
						   1 => ALM
						   2 => PL/I version I   
						   3 => signal caller frame
						   4 => signaller frame */
    2 operator_return_offset bit(18) unaligned,
    2 x(0: 7) bit(18) unaligned,			/* index registers */
    2 a bit(36),					/* accumulator */
    2 q bit(36),					/* q-register */
    2 e bit(36),					/* exponent */
    2 timer bit(27) unaligned,				/* timer */
    2 pad bit(6) unaligned,
    2 ring_alarm_reg bit(3) unaligned;


dcl 1 stack_frame_flags based(sp) aligned,
    2 pad(0 : 7) bit(72),				/* skip over prs */
    2 xx0 bit(22) unal,
    2 main_proc bit(1) unal,				/* on if frame belongs to a main procedure */
    2 run_unit_manager bit(1) unal,			/* on if frame belongs to run unit manager */
    2 signal bit(1) unal,				/* on if frame belongs to logical signal_ */
    2 crawl_out bit(1) unal,				/* on if this is a signal caller frame */
    2 signaller bit(1) unal,				/* on if next frame is signaller's */
    2 link_trap bit(1) unal,				/* on if this frame was made by the linker */
    2 support bit(1) unal,				/* on if frame belongs to a support proc */
    2 condition bit(1) unal,				/* on if condition established in this frame */
    2 xx0a bit(6) unal,
    2 xx1 fixed bin,
    2 xx2 fixed bin,
    2 xx3 bit(25) unal,
    2 old_crawl_out bit (1) unal,			/* on if this is a signal caller frame */
    2 old_signaller bit(1) unal,			/* on if next frame is signaller's */
    2 xx3a bit(9) unaligned,
    2 xx4(9) bit(72) aligned,
    2 v2_pl1_op_ret_base ptr,				/* When a V2 PL/I program calls an operator the
						*  operator puts a pointer to the base of
						*  the calling procedure here. (text base ptr)  */
    2 xx5 bit(72) aligned,
    2 pl1_ps_ptr ptr;				/* ptr to ps for this frame; also used by fio. */

/* format: on */

/* 	END INCLUDE FILE ... stack_frame.incl.pl1 */
