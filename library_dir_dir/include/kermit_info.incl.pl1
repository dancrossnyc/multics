/*  START OF:	kermit_info.incl.pl1		  *  *  *  *  *  */
  

  

/****^  HISTORY COMMENTS:
  1) change(88-05-16,Huen), approve(88-05-16,MCR7841), audit(88-05-25,RWaters),
     install(88-07-05,MR12.2-1054):
     Fix kermit 15, 16, 17, and 18.
                                                   END HISTORY COMMENTS */


/********************************************************************/
  /*							*/
  /*n	kermit_constants					*/
  /*							*/
  /*d	This structure contains the constant definitions of CR, 	*/
  /*d  and NL characters which are coded as bit strings with 	*/
  /*d  overlays.                                                      */
  /*							*/
  /*l	Written:	87-06-19	by Don Kozlowski			*/
  /*l     Modified: 87-06-19  by Don Kozlowski - CR and NL are coded  */
  /*l			as bit strings with overlays (kermit 15)*/
  /*							*/
  /********************************************************************/

  dcl 01 kermit_bit_constants	internal static options (constant),
         02 CR_bit		bit (9) unaligned init ("015"b3),
         02 NL_bit		bit (9) unaligned init ("012"b3);

  dcl 01 kermit_char_constants based (addr (kermit_bit_constants)),
         02 CR		char (1) unaligned,
         02 NL		char (1) unaligned;

  dcl 01 kermit_fixed_constants based (addr (kermit_bit_constants)),
         02 CR_fixed	fixed bin (9) unsigned unaligned,
         02 NL_fixed	fixed bin (9) unsigned unaligned;
	

  /********************************************************************/
  /*							*/
  /*n	kermit_info					*/
  /*							*/
  /*d	This data structure is the subsystem info structure used	*/
  /*d	when creating a kermit invocation.  It is used to find the	*/
  /*d	three kermit databases.				*/
  /*							*/
  /*l	Written:	84-10-11	by Dean Elhard			*/
  /*							*/
  /********************************************************************/
  
  dcl 01 kermit_info	aligned based (kermit_infop),
       02 version		char (8),
       02 sci_ptr		ptr,	/* ssu_ sci_ptr		*/
       02 perm_modesp	ptr,	/* ptr to permanent modes db	*/
       02 temp_modesp	ptr,	/* ptr to temporary modes db	*/
       02 log_infop		ptr,	/* ptr to log info db	*/
       02 comm_infop	ptr;	/* ptr to comm info db	*/
  
  dcl kermit_infop		ptr;
  dcl kermit_info_version	char (8) static options (constant)
			     init ("ki   1.0");
  
  /********************************************************************/
  /*							*/
  /*n	kermit_perm_modes					*/
  /*							*/
  /*d	This data structure contains the array of 9-bit values that	*/
  /*d	represent the permanent kermit modes.			*/
  /*							*/
  /*l	Written:	84-10-11	by Dean Elhard			*/
  /*l     Modified: 87-06-12  by Don Kozlowski - Increase mode_counts */
  /*l			(kermit 16)			*/
  /*							*/
  /********************************************************************/
  
  dcl 01 kermit_perm_modes	aligned based (kermit_perm_modesp),
       02 version		char (8),
       02 mode (1:kermit_perm_mode_count)
			bit (9) unaligned;
  
  dcl kermit_perm_modesp	ptr;
  dcl kermit_perm_mode_count	fixed bin static options (constant) init (20);
  dcl kermit_perm_modes_version
			char (8) static options (constant)
			     init ("kpm  1.1");
  
  /********************************************************************/
  /*							*/
  /*n	kermit_temp_modes					*/
  /*							*/
  /*d	This data structure contains the array of 9-bit values that	*/
  /*d	represent the temporary kermit modes.			*/
  /*							*/
  /*l	Written:	84-10-11	by Dean Elhard			*/
  /*							*/
  /********************************************************************/
  
  dcl 01 kermit_temp_modes	aligned based (kermit_temp_modesp),
       02 version		char (8),
       02 mode (1:kermit_temp_mode_count)
			bit (9) unaligned;
  
  dcl kermit_temp_modesp	ptr;
  dcl kermit_temp_mode_count	fixed bin static options (constant) init (23);
  dcl kermit_temp_modes_version
			char (8) static options (constant)
			     init ("ktm  1.1");
  
  /********************************************************************/
  /*							*/
  /*n	kermit_log_info					*/
  /*							*/
  /*d	This data structure contains 2 types of logging info:	*/
  /*d	     - data concerning the logging state and log_file	*/
  /*d	     - statistics on the last completed file-transfer	*/
  /*							*/
  /*l	Written:	84-10-11	by Dean Elhard			*/
  /*							*/
  /********************************************************************/
  
  dcl 01 kermit_log_info	aligned based (kermit_log_infop),
       02 version		char (8),
       02 log_file		aligned,		/* log_file info	*/
        03 iocbp		ptr,		/* iocb ptr	*/
        03 flags		aligned,
         04 enabled		bit (1) unaligned,	/* enabled flag	*/
         04 stats_valid	bit (1) unaligned,	/* stats are set	*/
         04 mbz		bit (34) unaligned,
       02 statistics	aligned like kermit_stats_info;
  
  dcl kermit_log_infop	ptr;
  dcl kermit_log_info_version char (8) static options (constant)
			     init ("kli  1.0");
  
  /********************************************************************/
  /*							*/
  /*n	kermit_stats_info					*/
  /*							*/
  /*d	This structure is the statistics information passed to the	*/
  /*d	log manager and stored as the statistics.		*/
  /*							*/
  /*l	Written:	84-10-25	by Dean Elhard			*/
  /*							*/
  /********************************************************************/
  
  dcl 01 kermit_stats_info	aligned based (kermit_stats_infop),
       02 caller		char (32),	/* send or receive	*/
       02 status		fixed bin (35),	/* status of F-T	*/
       02 filename		char (194) unal,	/* name of file	*/
       02 file_len		fixed bin (21),	/* len in chars	*/
       02 char_count	fixed bin (21),	/* number sent	*/
       02 packet_chars	fixed bin (21),	/* after encoding	*/
       02 packet_count	fixed bin (21),	/* num of packets	*/
       02 packet_retries	fixed bin (21),	/* retries done	*/
       02 start_time	fixed bin (71),	/* time F-T started	*/
       02 end_time		fixed bin (71),	/* time F-T done	*/
       02 error_message	char (94);	/* rcvd error msg	*/
  
  dcl kermit_stats_infop	ptr;
  
  /********************************************************************/
  /*							*/
  /*n	kermit_comm_info					*/
  /*							*/
  /*d	This data structure contains information regarding the	*/
  /*d	communications channel over which the file transfer takes	*/
  /*d	place.						*/
  /*							*/
  /*l	Written:	84-10-12	by Dean Elhard			*/
  /*l	Modified: 86-10-09  by Don Kozlowski Add transfer_modes_set	*/
  /*l                         and server indicators. (kermit 13)      */
  /*							*/
  /********************************************************************/
  
  dcl 01 kermit_comm_info	aligned based (kermit_comm_infop),
       02 version		char (8),
       02 ft_iocbp		ptr,		/* transfer iocbp	*/
       02 debug_segp	ptr,		/* debug segment	*/
       02 debug_segl	fixed bin (21),
       02 input_buffer	aligned,		/* input buffer	*/
        03 bufferp		ptr,
        03 bufferl		fixed bin (21),
       02 old_modes		char (512) unal,	/* ft switch modes	*/
       02 old_framing_chars	aligned,		/* saved frm chars	*/
        03 start_char	char (1) unaligned,
        03 end_char		char (1) unaligned,
        03 server		bit (1) unaligned,	/* In server mode	*/
        03 transfer_modes_set	bit (1) unaligned,
        03 pad		bit (16) unaligned,
       02 old_wake_table	aligned,		/* saved wake table	*/
        03 breaks (0:127)	bit (1) unaligned,
        03 mbz		bit (16) unaligned,
       02 old_delays	aligned,		/* saved delay info	*/
        03 version		fixed bin,
        03 default		fixed bin,
        03 delay,
         04 vert_nl		fixed bin,
         04 horz_nl		fixed bin,
         04 const_tab	float bin,
         04 var_tab		fixed bin,
         04 backspace	fixed bin,
         04 vt_ff		fixed bin;
  
  dcl kermit_comm_infop	ptr;
  dcl kermit_comm_info_version
			char (8) static options (constant)
			     init ("kci  1.0");
  
/*  END OF:	kermit_info.incl.pl1		  *  *  *  *  *  */
