/*  MACLISP Compiled SUBR Block */

dcl 1 subr_block_head based aligned,		/* this is the first part of the subr block */
      2 next_compiled_block ptr,		/* for xctblt */
      2 instructions(4) bit(36),		/* the common entry code */
      2 subr_code_link_offset bin(17) unal,	/* points to subr code link */
      2 rest_of_tsplp bit(18) unal,		/* tsplp ,ic* */
      2 gcmark bit(18) unal,			/* for garbage collector to remember seeing this block */
      2 gc_length fixed bin(17) unal,		/* number garbage collectable objects */
      2 constants(1000) fixed bin(71);	/* the compiled constants */

/* alternate declaration of above */

dcl 1 subr_block_head_overlay based aligned,
      2 first_word bit(36),
      2 second_word aligned,
        3 padding bit(28) unaligned,
        3 no_links_are_snapped bit(1) unaligned,	/* "1"b if no itp links in this block have been snapped */
        3 more_padding bit(7) unaligned;



dcl 1 lisp_subr_links(1000) based aligned,	/* the subr links follow the constants, and are the last gc'ed items */
      2 itp_base bit(3) unal,
      2 itp_info bit(27) unal,		/* produced by compiler */
      2 itp_mod bit(6) unal,
      2 link_opr_tv_offset bit(18) unal,
      2 mbz bit(12) unal,
      2 further_mod bit(6) unal;		/* when itp; this is indirect */


dcl 1 subr_entries(1000) based aligned,		/* these are next in block, not gc'able */
      2 nargs bit(18) unal,
      2 code_offset bit(18) unal,		/* offset of entrypoint in object segment */
      2 head_offset bin(17) unal,		/* offset to common entry sequence in subr_block_head */
      2 rest_of_tsx0 bit(18) unal;		/* tsx0   ,ic */


dcl 1 link_to_subr_code based aligned,		/* used by lisp_linker_ to find object segment */
      2 itp_to_linker ptr,			/* points to linker, reset by linker to point to base of object seg */
      2 compilation_time fixed bin(71),		/* used to verify linking to correct segment */
      2 name_length fixed bin(24),		/* length of subroutines name...both segname and ename */
      2 name char(0 refer(link_to_subr_code.name_length)) unal;

dcl instructions_for_subr (4) bit(36) static init("000000000000000100110010111000001111"b,
				 	   "001111111111111100110101000001001111"b,
					   "001111111111111110010101010001001111"b,
					   "111111111111111110111010000000001000"b),
    tsplp_ic_ind bit(18) static init("110111000000010100"b),
    tsx0_ic bit(18) static init("111000000000000100"b);

dcl 1 array_links (1000) aligned based,	/* come after entries, before link_to_subr_code */
      2 instruction bit(36) aligned,		/* tspbp to array_link_snap operator
					   or eppbb *+2,* when snapped */
      2 control_word unaligned,		/* controls what to snap to */
        3 type fixed bin(8),			/* 0=S-expr, 2=fixnum, 3=flonum */
        3 ndims fixed bin(8),
        3 atomic_symbol fixed bin(17),	/* offset in constants to symbol which names array */
      2 pointer pointer;			/* -> array_info block when snapped */

dcl 1 array_link_count aligned based,		/* comes after array_links, before link_to_subr_code */
      2 unused bit(36),
      2 number_of_array_links fixed bin(17) unaligned,
      2 must_be_zero bit(18) unaligned;		/* 0 to distinguish from tsx0 in subr block with no array links */

/* End of description of Compiled SUBR Block */
