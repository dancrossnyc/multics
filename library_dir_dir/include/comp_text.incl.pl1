/* 	BEGIN INCLUDE FILE comp_text.incl.pl1	 */

/* format: style2,ind2,ll79,dclind4,idind15,comcol41,linecom */

     dcl 1 tblkdata			/* data for allocated text blocks */
		    aligned based (shared.tblkdata_ptr),
	 2 block,			/* block pool */
	   3 count    fixed bin,
	   3 ptr	    (500) ptr,	/* block pointers */
				/* block state flags */
	   3 free	    (500) bit (1) unal,
	 2 line_area,		/* line area pool */
	   3 count    fixed bin,
	   3 ptr	    (500) ptr,	/* area pointers */
				/* area state flags */
	   3 free	    (500) bit (1) unal,
	 2 text_area,		/* text area pool */
	   3 count    fixed bin,
	   3 ptr	    (500) ptr,	/* area pointers */
				/* area state flags */
	   3 free	    (500) bit (1) unal,
	   3 string_area_count
		    fixed bin;	/* line areas */
     dcl LINE_AREA_SIZE fixed bin static options (constant) init (24);
     dcl line_area_ptr  ptr init (null);
     dcl 1 line_area    aligned based (line_area_ptr),
	 2 next	    ptr,		/* forward thread */
	 2 prev	    ptr,		/* backward thread */
	 2 count	    fixed bin,	/* number of lines allocated */
	 2 ndx	    fixed bin,	/* index of current line */
	 2 pndx	    fixed bin,	/* area pool index */
	 2 linptr	    (LINE_AREA_SIZE) ptr;
				/* text areas */
     dcl TEXT_AREA_SIZE fixed bin static options (constant) init (6);
     dcl text_area_ptr  ptr init (null);
     dcl 1 text_area    aligned based (text_area_ptr),
	 2 next	    ptr,		/* forward thread */
	 2 count	    fixed bin,	/* number of areas allocated */
	 2 ndx	    fixed bin,	/* index of current strarea */
	 2 pndx	    fixed bin,	/* area pool index */
	 2 strareaptr (TEXT_AREA_SIZE) ptr;
				/* text string area */
     dcl string_area    (256) fixed bin based;
     dcl txtstrptr	    ptr;		/* current text string */
     dcl txtstr	    char (1020) var based (txtstrptr);

     dcl TEXT_VERSION   fixed bin static options (constant) init (9);
				/* general text block */
     dcl 1 text	    aligned based (shared.blkptr),
	 2 version    fixed bin,	/* version of structure */
	 2 blkndx	    fixed bin,	/* block data index */
	 2 blktype    char (2),	/* block type code */
				/* dynamic block control stuff */
	 2 hdr	    aligned like text_header,
				/* text read from input file */
	 2 input	    aligned like text_entry,
	 2 input_line char (1020) var,/* input buffer */
	 2 line_area,
	   3 first    ptr,		/* head of line area thread */
	   3 cur	    ptr,		/* current line area */
	 2 next_text  ptr,		/* next text string */
				/* text formatting parameters */
	 2 parms	    aligned like default_parms,
	 2 text_area,
	   3 first    ptr,		/* head of text area thread */
	   3 cur	    ptr;		/* current text area */
				/* an empty text block line */
     dcl 1 text_entry   aligned based (const.text_entry_ptr),
	 2 sws,			/* unaligned switches, etc. */
	   3 art	    bit (1) unal,	/* line has artwork */
	   3 cbar,		/* change bar flags */
	     4 add    bit (1) unal,	/* text addition flag */
	     4 del    bit (1) unal,	/* text deletion flag */
	     4 mod    bit (1) unal,	/* text modification flag */
	   3 default  bit (1) unal,	/* 1 = default case as needed */
	   3 DVctl    bit (1) unal,	/* 1 = line is a device ctl string */
	   3 embedded bit (1) unal,	/* 1 = line has an embedded control */
	   3 end_keep bit (1) unal,	/* 1= line ends a keep */
	   3 fnt_chng bit (1) unal,	/* 1 = text is a font change string */
	   3 footref  bit (1) unal,	/* 1 = line has a footnote reference */
	   3 hanging  bit (1) unal,	/* 1 = a hanging undent */
	   3 keep	    bit (1) unal,	/* 1 = unsplittable line */
	   3 no_trim  bit (1) unal,	/* 1 = untrimmable white line */
	   3 oflo	    bit (1) unal,	/* line causes overflow */
	   3 punct    bit (1) unal,	/* 1 = line ends with punctuation */
	   3 quad	    bit (6) unal,	/* text alignment flags */
	   3 space_added		/* 1= line has added space */
		    bit (1) unal,
	   3 spcl,		/* special entry - not output text */
	     4 file   bit (1) unal,	/* 1= output to special file */
	     4 blk_splt		/* 1= action at block split time */
		    bit (1) unal,
	     4 page_mkup		/* 1= action at page makeup time */
		    bit (1) unal,
	   3 table    bit (1) unal,	/* 1= line is a table entry */
	   3 tblspc   bit (1) unal,	/* 1= WS fill for table mode */
	   3 title    bit (1) unal,	/* 1= line is a <title> */
	   3 unspnct  bit (1) unal,	/* 1= underscore punctuation */
	   3 unstop   bit (1) unal,	/* 1= line is/ends with UNSTOP */
	   3 unstrt   bit (1) unal,	/* 1= line is/ends with UNSTART */
	   3 unswrds  bit (1) unal,	/* 1= underscore words only */
	   3 white    bit (1) unal,	/* 1= line is white space */
	   3 und_prot bit (1) unal,	/* 1= undent is protected */
	   3 MBZ	    bit (4) unal,
	 2 art_start  fixed bin unal, /* start of art string in line */
	 2 art_len    fixed bin unal, /* length of art string in line */
	 2 cbar_level		/* change level for cbars */
		    char (1) aligned,
	 2 cur,			/* current scanning data for line */
	   3 chrct    fixed bin,	/* count of chars scanned */
	   3 gaps	    fixed bin,	/* gap count */
	   3 width    fixed bin (31), /* width of font chars */
	   3 min	    fixed bin (31), /* width of min spbnds */
	   3 avg	    fixed bin (31), /* width of avg spbnds */
	   3 max	    fixed bin (31), /* width of max spbnds */
	   3 font	    like fntstk_entry,
	 2 depth	    fixed bin (31), /* page depth for line */
				/* font at start of line */
	 2 font	    like fntstk_entry,
	 2 index	    fixed bin (21), /* char index for line scanning */
	 2 info,			/* stuff created during line input */
	   3 fileno   fixed bin,	/* input file index */
	   3 lineno   fixed bin,	/* input file line number */
	   3 lineno0  fixed bin,	/* call_box0 line number */
	 2 linespace  fixed bin (31), /* linespace value for the line */
	 2 lmarg	    fixed bin (31), /* adjusted left margin position */
	 2 mod_len    fixed bin,	/* length of modified text */
	 2 mod_start  fixed bin,	/* index for start of modified text */
	 2 net	    fixed bin (31), /* net line width for filling */
	 2 ptr	    ptr,		/* pointer to the actual text */
	 2 rmarg	    fixed bin (31), /* adjusted right margin position */
	 2 spcl_iocbp ptr,		/* iocb ptr for spcl line */
	 2 sym_delim  char (1) unal,	/* symbol delimiter for this line */
	 2 tblcol	    fixed bin,	/* column for table entries */
	 2 title_delim
		    char (1) unal,	/* title delimiter if a <title> */
	 2 title_index
		    fixed bin,	/* <title> block index for line */
	 2 width	    fixed bin (31), /* width of text */
	 2 ftn,			/* footnote info for line */
	   3 ct	    fixed bin,	/* number of footnote refs */
	   3 used	    fixed bin (31), /* space used */
	   3 e	    (40),		/* limit is arbitrary */
	     4 blkndx fixed bin unal, /* block index of footnote - if this
				   value is 0, then .frf was used */
	     4 refno  fixed bin unal; /* reference number */

     dcl (
         quadi	    init ("40"b3),	/* set to the inside margin */
         quado	    init ("20"b3),	/* set to the outside margin */
         quadl	    init ("10"b3),	/* set left */
         quadc	    init ("04"b3),	/* set centered */
         quadr	    init ("02"b3),	/* set right */
         just	    init ("01"b3)	/* justified */
         )	    bit (6) static options (constant);
				/* control line structure */
     dcl 1 ctl	    aligned like text_entry based (const.ctl_ptr);
     dcl ctl_line	    char (1020) var based (ctl.ptr);

     dcl txtlinptr	    ptr;		/* the current text line */
     dcl 1 txtlin	    aligned like text_entry based (txtlinptr);
				/* empty text header structure */
     dcl 1 text_header  aligned based (const.text_header_ptr),
	 2 sws,			/* control switches */
	   3 art	    bit (1) unal,	/* block has artwork */
	   3 dfrftn   bit (1) unal,	/* block is a deferred footnote */
	   3 modified bit (1) unal,	/* block contains modified lines */
	   3 no_trim  bit (1) unal,	/* 1 = dont trim WS block */
	   3 oflo_ftn bit (1) unal,	/* overflow footnote */
	   3 tblblk   bit (1) unal,	/* a table block */
	   3 unref    bit (1) unal,	/* block is an unreffed footnote */
	   3 white    bit (1) unal,	/* block is a white space block */
	   3 picture  bit (1) unal,	/* picture block */
	   3 orphan   bit (1) unal,	/* 1= footnote is an orphan */
	   3 MBZ	    bit (26) unal,
	 2 art_count  fixed bin unal, /* to count input art lines */
	 2 blkptr	    ptr,		/* pointer to suspended block */
	 2 cap_size   fixed bin unal, /* line count of text caption */
	 2 cap_used   fixed bin (31), /* size of text caption */
	 2 colno	    fixed bin unal, /* column owning the block */
	 2 count	    fixed bin unal, /* line count for block */
	 2 eqn_line_count
		    fixed bin unal, /* counter for equation lines */
	 2 first_text fixed bin unal, /* OBSOLETE */
	 2 ftn,			/* footnotes */
	   3 ct	    fixed bin,	/* count */
	   3 usd	    fixed bin (31), /* space used */
	   3 blkndx   (40) fixed bin, /* footnote block index values */
	 2 head_size  fixed bin,	/* line count of text header */
	 2 head_used  fixed bin (31), /* size of text header */
	 2 index	    fixed bin unal, /* block index of next output line */
	 2 keep_count fixed bin unal, /* to count input keep lines */
	 2 last_line  fixed bin,	/* last text line in column */
	 2 mx_ttl_ndx fixed bin,	/* max title index value in block */
	 2 name	    char (32) var,	/* block name, if any */
	 2 nofill_count		/* to count nofill lines */
		    fixed bin,
	 2 parms_ptr  ptr,		/* parms for suspended block */
	 2 refer	    fixed bin,	/* inter-block reference */
	 2 refer_index		/* OBSOLETE */
		    fixed bin,	/* a reference */
	 2 split	    fixed bin,	/* split point for balancing */
	 2 trl_ws	    fixed bin (31), /* trailing WS */
	 2 used	    fixed bin (31); /* page space used by a column/block */
				/* text formatting parameters */
     dcl 1 text_parms   aligned like default_parms
		    based (const.text_parms_ptr);

     dcl 1 current_parms
		    aligned like default_parms
		    based (const.current_parms_ptr);

     dcl 1 default_parms
		    aligned based (const.default_parms_ptr),
	 2 sws,			/* control switches */
	   3 quad	    bit (6) unal,	/* text alignment mode */
	   3 art	    bit (1) unal,	/* 1 = block countains artwork */
	   3 cbar,		/* change bar flags */
	     4 add    bit (1) unal,	/* text addition flag */
	     4 del    bit (1) unal,	/* text deletion flag for next line */
	     4 mod    bit (1) unal,	/* text modification flag */
	   3 fill_mode
		    bit (1) unal,	/* 1 = fill mode ON */
	   3 footnote bit (1) unal,	/* block is a footnote */
	   3 hfc	    bit (1) unal,	/* OBSOLETE */
	   3 htab_mode
		    bit (1) unal,	/* 1 = horizontal tab mode ON */
	   3 keep	    bit (1) unal,	/* keep mode */
	   3 page	    bit (1) unal,	/* block belongs to page, not text */
	   3 title_mode
		    bit (1) unal,	/* 0 = plain text, 1 = <title>s OK */
	   3 MBZ	    bit (19) unal,
	 2 ftrptr	    ptr,		/* text caption block */
	 2 cbar_level		/* change level for cbars */
		    char (1) aligned,
	 2 hdrptr	    ptr,		/* text header block */
	 2 left,			/* left margin data */
	   3 indent   fixed bin (31),
	   3 undent   fixed bin (31),
	 2 linespace  fixed bin (31), /* line spacing value */
	 2 measure    fixed bin (31), /* line space for text */
				/* right margin data */
	 2 right	    like default_parms.left,
	 2 fntstk,		/* stack of last 20 font changes */
	   3 index    fixed bin,	/* which one in use */
				/* entry(0) is the default */
	   3 entry    (0:19) like fntstk_entry;

     dcl hfcblk_ptr	    ptr;
     dcl 1 hfcblk	    aligned like text based (hfcblk_ptr);

/*	END INCLUDE FILE comp_text.incl.pl1	*/
