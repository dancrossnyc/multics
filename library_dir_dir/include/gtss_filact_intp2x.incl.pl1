/* BEGIN INCLUDE FILE gtss_filact_intp2x.incl.pl1 */
/*
  Created: (Wardd Multics)  07/13/79 2116.0 mst Fri 
*/
get_ascii_file_name: proc (fnia, cfdl, acfp)returns (bit (1));

/**	Obtain the catalog/file description
	in ascii.
   Changed: R. Barstad        82/06/11 - to fix stringsize condition on acf.name
                                         assign to callers_buf...
**/
dcl  fnia                     bit(1)parm	/* "1"b => file name in ascii. */;
dcl  cfdl                     fixed bin(18)unsigned unal parm	/* Location of catalog file description. */;
dcl  acfp                     ptr parm	/* Pointer to ascii_cat_file structure. */;

	ap = acfp;				/* Local value. */
	cat_filedescr_name_offset = 0;		/* => offset to "current" name in catalog file description. */

	if (cfdl < mem_bottom) |
	(cfdl+5 > mem_top) then do;
	     goto return_err4;
	end;					/* Require USERID and atleast file name. */
	descriptor_ptr = addrel (gseg, cfdl);

	if cfd2.USERID = -1 then do;			/* cfd2.USERID is that of current terminal user. */
	     descriptor_ptr -> bit72 = gtss_ust.lid;
	     cfd2.USERID_password = (12)"20"b3;
	end;

	cat_filedescr_name_offset = cfdl;

	do nic = 0 to 5;				/* Search for end of list. */
	     if nic = 0 then
		if cdf4.end_of_list = -1 then do;	/* Only a USERID. */
		     acf.nn = 1;
		     goto gal;
		end;

	     if (cfdl+ (nic*2)+6) > mem_top then do;
		goto return_err4;
	     end;					/* cat/filedescr entry out of memory. */

	     if cfd2.end_of_list = -1 then do;		/* cat/filedescr isolated. */
		cat_filedescr_name_offset = cfdl + (nic*4) + 4; /* Offset to name entry (global). */
		acf.nn = nic+2;

gal:		;
		do i = 1 to acf.nn;

/**	Store catalog file description for expand path. **/

		     if (i > 1) & (i = acf.nn) & fnia then do;
			callers_buf.restore_switch = "000000000001"b3; /* => file name in ascii. */
			acf.name (i) = translate (cfd3 (i).name,
			     "abcdefghijklmnopqrstuvwxyz",
			     "ABCDEFGHIJKLMNOPQRSTUVWXYZ");
		     end;
		     else
		     call gtss_bcd_ascii_$lc (
			addr (cfd3 (i).name)
			, 12
			, addr (acf.name (i))
			);
		end;

		if substr (string (gtss_ext_$db), 09, 11) then do;
		     call ioa_ ("cat/filedescr:");
		     do i = 1 to acf.nn;
			call ioa_ ("^3i. ""^a""", i, acf.name (i));
		     end;
		end;

		if substr (acf.name (1), 1, 6) = "!!!!!!"
		then acf.name (1) = gse_ext_$umc_name;
		callers_buf.file_id_in_ascii = substr(acf.name (acf.nn),1,8);
		return ("0"b);			/* Success. */
	     end;
	end;

/**	cat/filedescr has no end of list marker. **/
	cat_filedescr_name_offset = 0;
	return ("1"b);				/* Failure. */

dcl  ap                       ptr	/* Local acfp */;
dcl 1 acf aligned based(ap) like ascii_cat_file;

dcl 1 callers_buf		aligned based(buffer_ptr),
      3 restore_switch	bit(36),
      3 file_id_in_ascii	char(8);

dcl 1 cfd2		aligned based(descriptor_ptr)	/* 2nd description of catalog/file list. */
,     3 user_master_catalog
,       4 USERID		fixed bin(71)
,       4 USERID_password	bit(72)
,     3 intermediate_catalogs	(nic)
,       4 CATALOG		bit(72)
,       4 CATALOG_password	bit(72)
,     3 file_to_be_accessed
,       4 FILENAME		bit(72)
,       4 FILENAME_password	bit(72)
,     3 end_of_list		fixed bin(35)
;

dcl 1 cfd3		(7) aligned based(descriptor_ptr)	/* 3rd description of catalog/file list. */
,     3 name		char(8)
,     3 password		bit(72)
;

dcl 1 cdf4		aligned based(descriptor_ptr)	/* 4th description of catalog/file list. */
,     3 user_master_catalog
,       4 USERID		fixed bin(71)
,       4 USERID_password	bit(72)
,     3 end_of_list		fixed bin(35)
;
     end						/* get_ascii_file_name */;

/*   END INCLUDE FILE gtss_filact_intp2x.incl.pl1 */
