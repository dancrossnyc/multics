
/* BEGIN INCLUDE FILE ...   cobol_object_map.incl.pl1 */
/* Last modified July 13, 1978 by FCH */
/* Last modified July 5, 1974 by ORN */

dcl 1 object_map aligned static,
     2 decl_vers fixed bin init(2),		/* [3.0-1] */
     2 identifier char(8) aligned init("obj_map "),
     2 text_relp bit(18) unaligned,
     2 text_length bit(18) unaligned,
     2 def_relp bit(18) unaligned,
     2 def_length bit(18) unaligned,
     2 link_relp bit(18) unaligned,
     2 link_length bit(18) unaligned,
     2 static_relp bit(18) unaligned init("0"b),	/* [3.0-1] */
     2 static_length bit(18) unaligned init("0"b),	/* [3.0-1] */
     2 symb_relp bit(18) unaligned,
     2 symb_length bit(18) unaligned,
     2 bmap_relp bit(18) unaligned init((18)"0"b),
     2 bmap_length bit(18) unaligned init((18)"0"b),
     2 entry_bound bit(18) unaligned init("0"b),	/* [3.0-1] */
     2 text_length_offset bit(18) unaligned init("0"b),	/* [3.0-1] */
     2 format aligned,
	3 bound bit(1) unaligned init("0"b),
	3 relocatable bit(1) unaligned init("1"b),
	3 procedure bit(1) unaligned init("1"b),
	3 standard bit(1) unaligned init("1"b),
	3 unused bit(14) unaligned init((14)"0"b),

     2 last_word aligned,
	3 object_map_relp bit(18) unaligned,
	3 unused bit(18) init((18)"0"b) unaligned;

/*
decl_vers		is the version number of the structure.

identifier	is the constant "obj_map".

text_relp		is a pointer (relative to the base of the
		object segment) to the base of the text
		section.

text_length	is the length (in words) of the text section.

def_relp		is a pointer (relative to the base of the
		object segment) to the base of the definition
		section.

def_length	is the length (in words) of the definition
		section.

link_relp		is a pointer (relative to the base of the
		object segment) to the base of the linkage
		section.

link_length	is the length (in words) of the linkage
		section.

static_relp	Offset relative to base of object seg
		of base of linkage section

static_length	Length in words of static section

symb_relp		is a pointer (relative to the base of the
		object segment) to the base of the symbol
		section.

symb_length	is the length (in words) of the symbol
		section.

bmap_relp		is a pointer (relative to the base of the
		object segment) to the base of the break map
		section.

entry_bound	Offset of last gate entry

text_link_offset	Offset of first text embedded link

bmap_length	is the length (in words) of the break map
		section.

bound		is "1"b if the object segment is a bound
		segment.

relocatable	is "1"b is the object segment is relocatable;
		that is, if it contains relocation
		information.  This information (if present)
		must be stored in the segment's first symbol
		block.  See the MPM Subsystem Writers' Guide
		section, The Structure of the Symbol Section.

procedure		is "1"b if this is an executable object
		segment.

standard		is "1"b if the object segment is in standard
		format.

unused		is reserved for future use and must be "0"b.


last_word		this is not part of the object map - however
		COBOL will always locate it as the word
		immediately following the object map, which
		is also the last word of the object segment.
object_map_relp	is a pointer (relative to the base of the
		object segment) to the base of the object map.

unused		set to zeros.
*/

/* END INCLUDE FILE ...   cobol_object_map.incl.pl1 */

