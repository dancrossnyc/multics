"	BEGIN INCLUDE FILE ... stack_header.incl.alm  3/72  Bill Silver
"
"	modified 7/76 by M. Weaver for *system links and more system use of areas
"	modified 3/77 by M. Weaver  to add rnt_ptr
"	modified 7/77 by S. Webber to add run_unit_depth and assign_linkage_ptr
"	modified 6/83 by J. Ives to add trace_frames and in_trace.

" HISTORY COMMENTS:
"  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
"     audit(86-08-05,Schroth), install(86-11-03,MR12.0-1206):
"     added the heap_header_ptr definition
"  2) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
"     audit(86-10-10,Fawcett), install(86-11-03,MR12.0-1206):
"     Modified to support control point management.  These changes were
"     actually made in February 1985 by G. Palter.
"  3) change(86-10-22,Fawcett), approve(86-10-22,MCR7473),
"     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
"     Remove the old_lot pointer and replace it with cpm_data_ptr. Use the 18
"     bit pad after cur_lot_size for the cpm_enabled. This was done to save
"     some space int the stack header and change the cpd_ptr unal to
"     cpm_data_ptr (ITS pair).
"                                                      END HISTORY COMMENTS

	equ	stack_header.cpm_data_ptr,4		ptr to control point for this stack
	equ	stack_header.combined_stat_ptr,6	ptr to separate static area

	equ	stack_header.clr_ptr,8		ptr to area containing linkage sections
	equ	stack_header.max_lot_size,10		number of words allowed in lot (DU)
	equ	stack_header.main_proc_invoked,10	nonzero if main proc was invoked in run unit (DL)
	equ	stack_header.run_unit_depth,10	number of active run units stacked (DL)
	equ	stack_header.cur_lot_size,11		DU number of words (entries) in lot
          equ	stack_header.cpm_enabled,11		DL  non-zero if control point management is enabled
	equ	stack_header.system_free_ptr,12	ptr to system storage area
	equ	stack_header.user_free_ptr,14		ptr to user storage area

	equ	stack_header.parent_ptr,16		ptr to parent stack or null
	equ	stack_header.stack_begin_ptr,18	ptr to first stack frame
	equ	stack_header.stack_end_ptr,20		ptr to next useable stack frame
	equ	stack_header.lot_ptr,22		ptr to the lot for the current ring

	equ	stack_header.signal_ptr,24		ptr to signal proc for current ring
	equ	stack_header.bar_mode_sp,26		value of sp before entering bar mode
	equ	stack_header.pl1_operators_ptr,28	ptr: pl1_operators_$operator_table
	equ	stack_header.call_op_ptr,30		ptr to standard call operator

	equ	stack_header.push_op_ptr,32		ptr to standard push operator
	equ	stack_header.return_op_ptr,34		ptr to standard return operator
	equ	stack_header.ret_no_pop_op_ptr,36	ptr: stand. return/ no pop operator
	equ	stack_header.entry_op_ptr,38		ptr to standard entry operator

	equ	stack_header.trans_op_tv_ptr,40	ptr to table of translator operator ptrs
	equ	stack_header.isot_ptr,42		pointer to ISOT
	equ	stack_header.sct_ptr,44		pointer to System Condition Table
	equ	stack_header.unwinder_ptr,46		pointer to unwinder for current ring

	equ	stack_header.sys_link_info_ptr,48	ptr to *system link name table
	equ	stack_header.rnt_ptr,50		ptr to reference name table
	equ	stack_header.ect_ptr,52		ptr to event channel table
	equ	stack_header.assign_linkage_ptr,54	ptr to area for hcs_$assign_linkage calls
	equ	stack_header.heap_header_ptr,56	ptr to heap header.
	equ	stack_header.trace_frames,58		stack of trace_catch_ frames
	equ	stach_header.trace_top_ptr,59		trace pointer
	equ	stack_header.in_trace,60		trace antirecurse bit
	equ	stack_header_end,64			length of stack header




	equ	trace_frames.count,0		number of trace frames on stack
	equ	trace_frames.top_ptr,1		packed pointer to top one

"	The  following constant is an offset within the  pl1  operators table.
"	It  references a  transfer vector table.

	bool	tv_offset,551


"	The  following constants are offsets within this transfer vector table.

	equ	call_offset,tv_offset+271
	equ	push_offset,tv_offset+272
	equ	return_offset,tv_offset+273
	equ	return_no_pop_offset,tv_offset+274
	equ	entry_offset,tv_offset+275


" 	END INCLUDE FILE stack_header.incl.alm
