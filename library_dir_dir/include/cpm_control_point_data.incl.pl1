/* BEGIN INCLUDE FILE ... cpm_control_point_data.incl.pl1 */

/****^  HISTORY COMMENTS:
  1) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
     audit(86-10-08,Fawcett), install(86-11-03,MR12.0-1206):
     Written to support control point management in March 1985 by G. Palter.
                                                   END HISTORY COMMENTS */

/* format: style3,linecom,idind22 */

/* NOTE: This include file references structures contained in the following independent include files --
	cpm_ctrl_pt_meters.incl.pl1		process_usage.incl.pl1	*/


/* Definition of a single control point in the process */

dcl	1 control_point_data  aligned based (cpd_ptr),
	  2 id		  bit (36) aligned,		/* unique ID of this control point */
	  2 group_id	  bit (36) aligned,		/* unique ID of containing group of control points */
	  2 state		  fixed binary,		/* scheduling state (see below) */
	  2 flags,
	    3 preferred	  bit (1) unaligned,	/* ON => this is the preferred task (infinite priority) */
	    3 swapped_switches			/* ON => this control point's switches were swapped ... */
			  bit (1) unaligned,	/* ... with the root's during an unclaimed signal */
	    3 pad		  bit (34) unaligned,
	  2 priority	  fixed binary,		/* scheduling priority */
	  2 pad		  bit (36) aligned,
	  2 stack_ptr	  pointer,		/* -> the stack used by this control point */
	  2 last_frame_ptr	  pointer,		/* -> last frame in said stack where control is to resume */
	  2 destroy	  label,			/* transferring to this label will kill the control point */
	  2 parent	  pointer,		/* -> defintion of this control point's parent */
	  2 peers,				/* linked list of this control point's peers */
	    3 prev_peer	  pointer,
	    3 next_peer	  pointer,
	  2 children,				/* linked list of this control point's children */
	    3 first_child	  pointer,
	    3 last_child	  pointer,
	  2 ready_queue,				/* ordered list of control points in the ready state */
	    3 prev_ready	  pointer,
	    3 next_ready	  pointer,
	  2 user_cl_intermediary			/* procedure to be called by cpm_overseer_$cl_intermediary */
			  entry (bit (1) aligned),
	  2 comment	  character (64),		/* a description of this control point */
	  2 saved_environment,			/* data saved when the control point stops running ... */
	    3 ips_mask	  bit (36) aligned,		/* ... IPS mask when it stopped running */
	    3 privileges	  bit (36) aligned,		/* ... system privileges */
	    3 cl_intermediary entry (bit (36) aligned),	/* ... CL intermediary */
	    3 io_switches,				/* ... standard I/O switches */
	      4 user_io	  pointer,
	      4 user_input	  pointer,
	      4 user_output	  pointer,
	      4 error_output  pointer,
	  2 meters	  like control_point_meters;	/* per control point metering data */

dcl	cpd_ptr		  pointer;


/* Scheduler states for a control point */

dcl	(
	CPM_DESTROYED	  initial (0),		/* waiting to be deleted */
	CPM_STOPPED	  initial (1),		/* can not run without an explicit cpm_$start */
	CPM_BLOCKED	  initial (2),		/* blocked on an IPC event channel */
	CPM_READY		  initial (3)		/* eligible to run on next call to cpm_$scheduler */
	)		  fixed binary static options (constant);

/* END INCLUDE FILE ... cpm_control_point_data.incl.pl1 */
