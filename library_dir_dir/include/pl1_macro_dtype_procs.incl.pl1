/* BEGIN INCLUDE FILE ... pl1_macro_dtype_procs.incl.pl1 */
both_arithmetic:
     procedure (opr1, opr2) returns (bit (1));
	declare (opr1, opr2)	 fixed binary;	/* INPUT - indixes of tokens */

	if token (opr1).type = dec_integer & token (opr2).type = dec_integer
	then return ("1"b);
	else return ("0"b);
     end both_arithmetic;

both_bit_string:
     procedure (oprx1, oprx2) returns (bit (1));
	declare (oprx1, oprx2)	 fixed binary;

	if token (oprx1).type = bit_string & token (oprx2).type = bit_string
	then return ("1"b);
	else return ("0"b);

     end both_bit_string;


both_char_string:
     procedure (z1, z2) returns (bit (1));
	declare (z1, z2)		 fixed binary;

	if token (z1).type = char_string & token (z2).type = char_string
	then return ("1"b);
	else return ("0"b);
     end both_char_string;

both_identifier:
     procedure (z1, z2) returns (bit (1));
	declare (z1, z2)		fixed binary;
     
	if token (z1).type = identifier & token (z2).type = identifier
	then return ("1"b);
	else return ("0"b);
     end both_identifier;
     
op_mix:
     procedure (x1, x2) returns (fixed binary);
	declare (x1, x2)		 fixed binary;

	if both_arithmetic (x1, x2)
	then return (1);
	else if both_bit_string (x1, x2)
	then return (2);
	else if both_char_string (x1, x2)
	then return (3);
	else if both_identifier (x1,x2)
	then return (4);
	else return (none);
     end op_mix;
/* END INCLUDE FILE ... pl1_macro_dtype_procs.incl.pl1 */
