	/* START OF:	rdc_next_stmt_.incl.pl1	  *  *  *  *  *  *  */

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
	/*							*/
	/* N__a_m_e:  rdc_next_stmt_.incl.pl1				*/
	/*							*/
	/*      This include segment is used by compilers generated by the	*/
	/* reduction_compiler.  It includes a procedure which shifts the	*/
	/* compilation process to the next source statement.		*/
	/*							*/
	/* S__t_a_t_u_s							*/
	/*							*/
	/* 0) Created:  April, 1974 by G. C. Dixon			*/
	/*							*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


NEXT_STMT:	procedure;			/* invoked to begin parsing the next statement of	*/
						/* the input tokens.			*/

     dcl	null			builtin,
	Ssearching		bit(1) aligned;

	Ptoken = Pthis_token;			/* make sure these pointers are the same.	*/
	Pstmt = token.Pstmt;			/* address "current" statement's descriptor.	*/
	Ssearching = "1"b;				/* start scanning forward for next statement.	*/
	do while (Ssearching & token.Pnext ^= null);
	     Ptoken = token.Pnext;
	     if token.Pstmt = Pstmt then;
	     else Ssearching = "0"b;
	     end;
	if token.Pstmt = Pstmt then			/* if there is no next statement, and		*/
	     if SPDL then				/*   in PUSH DOWN LANGUAGE mode, can't run off	*/
		Ptoken = Ptoken;			/*   end of input list.			*/
	     else Ptoken, Pthis_token = null;		/*   otherwise, input list exhausted.		*/
	else Pthis_token = Ptoken;			/* normally, next statement exists and Ptoken	*/
						/*   points to its 1st _n_o_n-__d_e_l_e_t_e_d token.	*/

	end NEXT_STMT;

	/* END OF:	rdc_next_stmt_.incl.pl1	  *  *  *  *  *  *  */
