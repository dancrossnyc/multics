/* BEGIN INCLUDE FILE  mrds_se_info.incl.pl1 

   These contains information relating to the selection expression.

*/

/****^  HISTORY COMMENTS:
  1) change(85-08-05,Hergert), approve(88-06-28,MCR7903),
     audit(88-06-28,Dupuis), install(88-08-01,MR12.2-1073):
     Created for for new parser.
                                                   END HISTORY COMMENTS */

dcl     1 se_info		 aligned based (se_info_ptr),
	2 se_ptr		 ptr,			/* points to the beginning of the selection expression */
	2 se_length	 fixed bin,		/* length of the selection expression */
	2 se_cursor	 fixed bin,		/* current place in se */
	2 flags,
	  3 pso_seen	 bit,			/* -pso supplied in se */
	  3 no_ot_seen	 bit,			/* -no_ot supplied in se */
          2 error_report,
	  3 error_info_supplied bit aligned,              /* ON -> structure already filled in */
	  3 loud             bit aligned,                	/* ON -> call mu_print_error */
            3 token_start      fixed bin,                   /* position in se where token starts */
            3 token_length     fixed bin,                   /* length of token in se */
	  3 error_code       fixed bin(35),               /* system error code */
            3 stack_offset     fixed bin,                   /* how far down the token is in the lex stack */
            3 error_type       char(24),                    /* type of error. ie range, select where... */
	  3 error_msg        char(256);         	/* message to explain problem */


/* various types of errors. actually the string that is reported in the
   error message. */
dcl     RC_TYPE		 char (12) internal static
			 options (constant) init ("Range Clause");
dcl     SE_TYPE		 char (20) internal static
			 options (constant)
			 init ("Selection Expression");
dcl     SC_TYPE		 char (13) internal static
			 options (constant)
			 init ("Select Clause");
dcl     WC_TYPE		 char (12) internal static
			 options (constant)
			 init ("Where Clause");
dcl     WCE_TYPE		 char (23) internal static
			 options (constant)
			 init ("Where Clause Expression");
dcl     WCF_TYPE		 char (21) internal static
			 options (constant)
			 init ("Where Clause Function");
dcl     AV_TYPE		 char (16) internal static
			 options (constant)
			 init ("Access Violation");
dcl     IL_TYPE		 char (14) internal static
			 options (constant)
			 init ("Internal Logic");

/* parser_work_area is used to hold all static data for an invocation
   of the parser. parser_static_info holds ptrs to all of these relevant
   data and also a ptr back to the area it is allocated in. 
   parser_work_area.
*/

dcl parser_work_area aligned area (sys_info$max_seg_size) based (parser_static_info.pwa_ptr);

dcl psi_ptr ptr;
dcl 1 parser_static_info aligned based (psi_ptr),
      2 pwa_ptr ptr,
      2 semantics, /* for mrds_dsl_semantics */
        3 static_data_ptr ptr,
      2 expr, /* for mrds_dsl_expr_ */
        3 data_stacks_ptr ptr,
      2 func, /* for mrds_dsl_func_ */
        3 sfptrs_ptr ptr,
      2 where_clause, /* for mrds_dsl_where_clause_ */
        3 ns_ptr ptr;


/* END INCLUDE FILE  mrds_se_info.incl.pl1 */
