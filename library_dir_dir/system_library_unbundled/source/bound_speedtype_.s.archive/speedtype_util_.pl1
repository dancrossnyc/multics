/* ******************************************************
   *                                                    *
   *                                                    *
   *    Copyright, (C) Honeywell Information Systems    *
   *    Inc., 1980.                                     *
   *                                                    *
   *                                                    *
   ****************************************************** */

speedtype_util_: rns: procedure;

/*	This procedure is an internal interface of the Speedtype subsystem.
   *	Created on 02/03/76 by Bill Silver as notescript_util_.
   *	Changed on 06/13/77 by Bill Silver to speedtype_util_.
   *      Changed on 05/30/80 by Paul Benjamin to change dcl of bit_count.
   *
   *	It contains entry points that are called to set up input and output
   *	segments for the expand_symbols and retain_symbols commands.
*/

/*		ARGUMENTS			*/

dcl  arg_dir_name char (*);				/* (I)   Directory containing input or output segment. */
dcl  arg_ent_name char (*);				/* (I)   Entry name of input or output segment. */
dcl  arg_ecode fixed bin (35);			/* (O)   Returned error_table_ code. */
dcl  arg_in_ptr ptr;				/* (I/O) Pointer to input segment. */
dcl  arg_out_ptr ptr;				/* (I/O) Pointer to output segment. */
dcl  arg_seg_len fixed bin (21);			/* (I/O) Length of input or output segment. */
dcl  arg_temp_flag bit (1);				/* (I)   ON => copy output segment into input segment. */

/*		AUTOMATIC DATA		*/

dcl  bit_count fixed bin (24);			/* Bit count of input and output segments. */
dcl  ecode fixed bin (35);				/* Error table code. */
dcl  in_ptr ptr;					/* Pointer to input segment. */
dcl  out_ptr ptr;					/* Pointer to output segment. */
dcl  seg_len fixed bin (21);				/* Length of an output segment. */
dcl  words fixed bin (19);				/* Size of output segment at completion of command. */


/*		BASED DATA		*/

dcl  based_data char (seg_len) based;			/* Used to copy temporary output segment. */

/*		EXTERNAL ENTRIES		*/

dcl (null) builtin;

dcl  error_table_$zero_length_seg fixed bin (35) external;

dcl  hcs_$get_max_length_seg entry (ptr, fixed bin (19), fixed bin (35));
dcl  hcs_$initiate_count entry (char(*), char(*), char(*), fixed bin(24),
	fixed bin(2), ptr, fixed bin(35));
dcl  hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$set_bc_seg  entry (ptr, fixed bin(24), fixed bin(35));
dcl  hcs_$truncate_seg entry (ptr, fixed bin (19), fixed bin (35));
						/* 	*/
init_input_seg: entry (arg_dir_name, arg_ent_name, arg_in_ptr, arg_seg_len, arg_ecode);

/*	This entry will initiate an input segment.  it will return a pointer
   *	to this segment and will return the length of the segment.
*/
	call hcs_$initiate_count (arg_dir_name, arg_ent_name, "", bit_count, (0), in_ptr, ecode);
	if in_ptr = null ()				/* Did we get a pointer to segment? */
	then do;					/* No, error. */
	     arg_ecode = ecode;
	     return;
	end;

	if bit_count = 0				/* Is this a zero length segment? */
	then do;					/* Yes, cannot process input segment. */
	     arg_ecode = error_table_$zero_length_seg;
	     return;
	end;

	arg_in_ptr = in_ptr;			/* Return pointer to input segment. */
	arg_seg_len = bit_count / 9;			/* Return length of input segment. */
	arg_ecode = 0;				/* No error, make sure no error code. */
	return;
						/* 	*/
init_output_seg: entry (arg_dir_name, arg_ent_name, arg_out_ptr, arg_seg_len, arg_ecode);

/*	This entry will initialize an output segment.  If the segment does not
   *	exist it will be created.  It will return a pointer to the segment
   *	and it will return the maximum length of the segment in characters.
*/
	if arg_dir_name ^= " "			/* Blank name => use process directory. */
	then call hcs_$make_seg (arg_dir_name, arg_ent_name, "", 01010b, out_ptr, ecode);
	else call hcs_$make_seg ("", arg_ent_name, "", 01010b, out_ptr, ecode);

	if out_ptr = null ()			/* Did we get a pointer to the output segment? */
	then do;					/* No. */
	     arg_ecode = ecode;
	     return;
	end;

	call hcs_$get_max_length_seg (out_ptr, words, ecode);
	if ecode ^= 0
	then do;
	     arg_ecode = ecode;
	     return;
	end;

	arg_out_ptr = out_ptr;			/* Return a pointer to the output segment. */
	arg_seg_len = words * 4;			/* Return max size of segment in characters. */
	arg_ecode = 0;
	return;
						/* 	*/
fix_output_seg: entry (arg_temp_flag, arg_in_ptr, arg_out_ptr, arg_seg_len, arg_ecode);

/*	This entry will fix an output segment so that its actual size
   *	and bit count are correct.
*/
	in_ptr = arg_in_ptr;			/* Copy arguments. */
	out_ptr = arg_out_ptr;
	seg_len = arg_seg_len;
	if arg_temp_flag				/* Is output segment a temporary? */
	then do;					/* Yes, copy output into input segment. */
	     in_ptr -> based_data = out_ptr -> based_data;
	     call hcs_$truncate_seg (out_ptr, 0, ecode);
	     out_ptr = in_ptr;			/* Input and output segments are now the same. */
	end;

	words = (seg_len + 3) / 4;			/* Get number of words needed by output segment. */
	call hcs_$truncate_seg (out_ptr, words, ecode);
	if ecode ^= 0				/* Error trying to adjust size of output segment. */
	then do;					/* Yes there was an error. */
	     arg_ecode = ecode;
	     return;
	end;

	bit_count = seg_len * 9;			/* Get number of bits in output segment. */
	call hcs_$set_bc_seg (out_ptr, bit_count, ecode);

	arg_ecode = ecode;
	return;

     end speedtype_util_;
