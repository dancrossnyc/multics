/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

change_symbols: csb: procedure;

/*	This procedure implements the change_symbols command.
   *	Created on 05/20/76 by Bill Silver as change_notescript.
   *	Changed on 06/07/77 by Bill Silver to change_symbols.
   *      Changed on 10/28/80 by Paul Benjamin for special suffixing.
   *    
   *	The change_symbols command will change the suffixing or expansion
   *	of a symbol in the current Speedtype symbol dictionary.
   *	Its calling sequence is:
   *
   *	change_symbols, csb symbol -control_args
   *
   *	where:
   *
   *	     -plural AA	Defines this suffix.
   *	     -ed AA
   *	     -ing AA
   *	     -er AA
   *	     -ly AA
   *
   *	     -suffix "on" | "off"
   *
   *	     -exp  AA	Defines a new expansion for this symbol.
*/

/*		AUTOMATIC DATA		*/

dcl  arg_len fixed bin;				/* Length of a command argument. */
dcl  arg_ptr ptr;					/* Pointer to a command argument. */
dcl  argx fixed bin;				/* Index of current command argument. */
dcl  dir_name char (168);				/* Directory containing symbol dictionary. */
dcl  ecode fixed bin (35);				/* Error table code. */
dcl  ent_name char (32);				/* Entry name of symbol dictionary. */
dcl  i fixed bin;
dcl  sbx fixed bin;					/* Index of symbol entry. */
dcl  temp_code fixed bin (35);			/* Used when already have non-zero ecode. */
dcl  num_args fixed bin;				/* Number of command arguments. */
dcl  option char (8);				/* Option argument. */
dcl  optx fixed bin;				/* Option argument index. */
dcl  suffix_len fixed bin;				/* Length of suffix expansion string. */


/*		BASED DATA		*/

dcl  argument char (arg_len) based (arg_ptr);		/* Command argument. */


/*		INTERNAL STATIC DATA	*/

dcl  options (7) char (8)				/* Control arg options. */
     internal static init ("-plural", "-ed", "-ing", "-er", "-ly",
     "-suffix", "-exp");


/*		EXTERNAL ENTRIES CALLED	*/

dcl (addr, hbound, length) builtin;

dcl  error_table_$bad_arg fixed bin (35) external;
dcl  error_table_$badopt fixed bin (35) external;
dcl  error_table_$no_w_permission fixed bin(35) ext static;
dcl  error_table_$odd_no_of_args fixed bin (35) external;
dcl  error_table_$wrong_no_of_args fixed bin (35) external;

dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  speedtype_index_ entry (char (*), ptr, fixed bin, fixed bin (35));
dcl  speedtype_info_$name entry (char (*), char (*), fixed bin (35));
dcl  speedtype_info_$pointer entry (ptr, fixed bin (35));
dcl  speedtype_suffix_  entry (ptr, ptr, ptr, fixed bin, ptr, fixed bin);
						/* 	*/
%include speedtype_symbols;
/* 	*/
/*	Begin change_symbols command.
*/

	call cu_$arg_count (num_args);		/* Get number of arguments. */
	if num_args < 3
	then do;
	     call com_err_ (error_table_$wrong_no_of_args, "Speedtype",
		"Usage is:  csb symbol -control_args");
	     return;
	end;

/* Get symbol argument. */
	call cu_$arg_ptr (1, arg_ptr, arg_len, ecode);
	if ecode ^= 0
	then do;
	     call com_err_ (ecode, "Speedtype", "Error getting symbol argument");
	     return;
	end;

	call speedtype_info_$pointer (ssd_ptr, ecode);
	if ecode ^= 0				/* Did we get a pointer to the symbol dictionary? */
	then do;
	     if ecode = error_table_$no_w_permission
		then do;
		call speedtype_info_$name (dir_name, ent_name, temp_code);
		call com_err_ (ecode, "Speedtype", "Attempting to convert ^a>^a to new version.", dir_name, ent_name);
	     end;
	     return;
	end;

	call speedtype_index_ (argument, ssd_ptr, sbx, ecode);
	if ecode ^= 0 then return;			/* Return if error getting symbol index. */
	if sbx = 0				/* Is symbol defined? */
	then do;					/* No, error. */
	     call com_err_ (0, "Speedtype", """^a"" not defined", argument);
	     return;
	end;

	sb_ptr = addr (ssd.sb_tab (sbx));		/* Get pointer to symbol entry. */
	exp_ptr = addr (ssd.exp_tab (sbx));		/* And expansion entry. */
	spc_ptr = addr (ssd.spec_tab (sbx));              /* AND special entry. */
	do argx = 2 to num_args while (ecode = 0);	/* Process the control arguments. */
	     call PROCESS_OPTION;			/* Process one option pair. */
	end;

	return;
						/* 	*/
PROCESS_OPTION: procedure;

/*	This procedure is called to process one option pair.
   *	Each pair consists of a control argument and a value argument.
*/
/* Get option argument. */
	     call cu_$arg_ptr (argx, arg_ptr, arg_len, ecode);
	     if ecode ^= 0
	     then do;
		call com_err_ (ecode, "Speedtype", "Error getting argument ^d", argx);
		return;
	     end;

	     option = argument;			/* Save option argument. */

	     argx = argx + 1;			/* Get index of value argument. */
	     if argx > num_args			/* Is there another argument? */
	     then do;				/* No, missing value argument. */
		ecode = error_table_$odd_no_of_args;
		call com_err_ (ecode, "Speedtype", "^a requires a value argument", option);
		return;
	     end;

/* Get value argument. */
	     call cu_$arg_ptr (argx, arg_ptr, arg_len, ecode);
	     if ecode ^= 0
	     then do;
		call com_err_ (ecode, "Speedtype", "Error getting argument ^d", argx);
		return;
	     end;

	     do optx = 1 to hbound (options, 1);	/* Look for option argument. */
		if option = options (optx)		/* Did we find it? */
		then goto OPTION (optx);		/* Yes, go process this option. */
	     end;

	     ecode = error_table_$badopt;		/* Option not found. */
	     call com_err_ (ecode, "Speedtype", "Argument ^a unknown", option);
	     return;

OPTION (1): OPTION (2): OPTION (3):			/* SUFFIX change option. */
OPTION (4): OPTION (5):
	     suffix_len = arg_len;			/* Get length of suffix expansion string. */
	     if argument = "on"			/* ON => use default action. */
	     then suffix_len = 0;
	     if argument = "off"			/* OFF => disable suffix. */
	     then suffix_len = -1;
	     call speedtype_suffix_ (sb_ptr, exp_ptr, spc_ptr, optx, arg_ptr, suffix_len);
	     if (exp.actionx (optx) = 0) &		/* Test if desired suffix not actually set. */
	     (suffix_len >0)
	     then call com_err_ (0, "Speedtype", "^a suffix ""^a"" invalid, ^a turned off",
		options (optx), argument, options (optx));
	     return;

OPTION (6):					/* "-suffix "yes","on" | "no","off"" */
	     suffix_len = 1;			/* Error if it remains = 1. */
	     if argument = "on"			/* ON => set all defaults. */
	     then suffix_len = 0;
	     if argument = "off"			/* OFF => disable all suffixes. */
	     then suffix_len = -1;
	     if suffix_len = 1			/* Was it "on" or "off"? */
	     then do;				/* No, error. */
		ecode = error_table_$bad_arg;
		call com_err_ (ecode, "Speedtype", "-suffix argument must be ""on"", or ""off""");
		return;
	     end;
	     do i = 1 to hbound (exp.actionx, 1);	/* Set each suffix. */
		call speedtype_suffix_ (sb_ptr, exp_ptr, spc_ptr, i, arg_ptr, suffix_len);
	     end;
	     return;

OPTION (7):					/* "-exp" */
						/* Is expansion argument a valid length? */
	     if length (argument) > length (exp.expansion)
	     then do;				/* No, expansion argument is too long. */
		ecode = error_table_$bad_arg;
		call com_err_ (ecode, "Speedtype", "-exp value argument is too long");
		return;
	     end;
	     exp.expansion = argument;
	     exp.len = length (argument);
	     return;

	end PROCESS_OPTION;

     end change_symbols;
