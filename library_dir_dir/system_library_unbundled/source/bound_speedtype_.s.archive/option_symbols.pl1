/* ******************************************************
   *                                                    *
   *                                                    *
   *    Copyright, (C) Honeywell Information Systems    *
   *    Inc., 1980.                                     *
   *                                                    *
   *                                                    *
   ****************************************************** */

option_symbols: osb: procedure;

/*	This procedure implements the option_symbols command.
   *	Created on 05/20/76 by Bill Silver as option_notescript.
   *	Changed on 06/08/77 by Bill Silver to option_symbols.
   *      Changed on 10/28/80 by Paul Benjamin for special suffixing.
   *
   *	The option_symbols command will set the special characters
   *	contained in the current Speedtype symbol dictionary.
   *	its calling sequence is:
   *
   *	option_symbols, osb {-control_args}
   *
   *	where:
   *
   *	     -plural A		Set specified SUFFIX character.
   *	     -ed A
   *	     -ing A
   *	     -er A
   *	     -ly A
   *
   *	     -pad A		Set specified ESCAPE character.
   *	     -perm A
   *	     -temp A
   *	     -trans A
   *	     -space A

   *	     -under A		Set specified PREFIX character.
   *	     -upper A
   *
   *	     -delim AA		/* Specify other delimiters.
*/

/*		AUTOMATIC DATA		*/

dcl  arg_len fixed bin;				/* Length of a command argument. */
dcl  arg_ptr ptr;					/* Pointer to a command argument. */
dcl  argx fixed bin;				/* Index of current command argument. */
dcl  dir_name char (168);				/* Directory of symbol dictionary. */
dcl  ecode fixed bin (35);				/* Error table code. */
dcl  ent_name char (32);				/* Name of symbol dictionary. */
dcl  num_args fixed bin;				/* Number of command arguments. */
dcl  option char (8);				/* Option control argument. */
dcl  optx fixed bin;				/* Option index. */
dcl  temp_code fixed bin (35);			/* Used when already have non-zero ecode. */

/*		BASED DATA		*/

dcl  argument char (arg_len) based (arg_ptr);		/* Command argument. */


/*		INTERNAL STATIC DATA	*/

dcl  options (13) char (8)				/* Control argument options. */
     internal static init ("-plural", "-ed", "-ing", "-er", "-ly",
     "-pad", "-perm", "-temp", "-trans", "-space",
     "-under", "-upper", "-delim");


/*		EXTERNAL ENTRIES CALLED	*/

dcl (addr, hbound, length, substr) builtin;

dcl  error_table_$bad_arg fixed bin (35) external;
dcl  error_table_$badopt fixed bin (35) external;
dcl  error_table_$no_w_permission fixed bin(35) ext static;
dcl  error_table_$odd_no_of_args fixed bin (35) external;
dcl  error_table_$wrong_no_of_args fixed bin (35) external;

dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  speedtype_info_$name entry (char (*), char (*), fixed bin (35));
dcl  speedtype_info_$pointer entry (ptr, fixed bin (35));
						/* 	*/
%include speedtype_symbols;
/* 	*/
	call speedtype_info_$pointer (ssd_ptr, ecode);
	if ecode ^= 0				/* Did we get a pointer to the symbol dictionary? */
	     then do;				/* No. */
	     if ecode = error_table_$no_w_permission
		then do;
		call speedtype_info_$name (dir_name, ent_name, temp_code);
		call com_err_ (ecode, "Speedtype", "Attempting to convert ^a>^a to new version.", dir_name, ent_name);
	     end;
	     return;
	end;

	call cu_$arg_count (num_args);		/* Get number of arguments. */
	if num_args = 0				/* Is there at least one argument? */
	then do;					/* No, error. */
	     call com_err_ (error_table_$wrong_no_of_args, "Speedtype", "No arguments");
	     return;
	end;

	ecode = 0;				/* Initialize error code. */

	do argx = 1 to num_args while (ecode = 0);	/* Process all of the control arguments. */
	     call PROCESS_OPTION;
	end;

	return;
						/* 	*/
PROCESS_OPTION: procedure;

/*	This procedure is called to process the control arguments to
   *	this command.  These control arguments all come in pairs with a
   *	control argument followed by a value argument.
*/
/* Get the control argument. */
	     call cu_$arg_ptr (argx, arg_ptr, arg_len, ecode);
	     if ecode ^= 0
	     then do;
		call com_err_ (ecode, "Speedtype", "Error getting argument ^d", argx);
		return;
	     end;

	     option = argument;			/* Save control argument. */

	     argx = argx + 1;			/* Next argument is value argument. */
	     if argx > num_args			/* Is there a next argument? */
	     then do;				/* No, value argument is missing. */
		ecode = error_table_$odd_no_of_args;
		call com_err_ (ecode, "Speedtype", "^a requires a value argument", option);
		return;
	     end;
						/* Get value argument. */
	     call cu_$arg_ptr (argx, arg_ptr, arg_len, ecode);
	     if ecode ^= 0
	     then do;
		call com_err_ (ecode, "Speedtype", "Error getting argument ^d", argx);
		return;
	     end;

	     do optx = 1 to hbound (options, 1);	/* Look up option. */
		if option = options (optx)		/* Is this a known option? */
		then goto OPTION (optx);		/* Yes, go process this option. */
	     end;

	     ecode = error_table_$badopt;		/* Option not known. */
	     call com_err_ (ecode, "Speedtype", "Control argument ^a unknown", option);
	     return;

OPTION (1): OPTION (2): OPTION (3):			/* Defining a SUFFIX character. */
OPTION (4): OPTION (5):
	     call CHECK_CHARACTER;			/* Is this a valid suffix character? */
	     if ecode ^= 0 then return;		/* No. */
	     substr (ssd.suffixes, optx, 1) = argument;	/* Yes, set this suffix character. */
	     return;

OPTION (6): OPTION (7): OPTION (8):			/* Defining an ESCAPE character. */
OPTION (9): OPTION (10):
	     call CHECK_CHARACTER;			/* Is this a valid escape character? */
	     if ecode ^= 0 then return;		/* No. */
	     optx = optx - 5;			/* Turn option index into an escape index. */
	     substr (ssd.escapes, optx, 1) = argument;	/* Set escape character. */
	     delim_ptr = addr (ssd.delimiters);		/* Update delimiter escapes too. */
	     delim_chars.escapes = ssd.escapes;
	     return;				/* Escape character has been set. */

OPTION (11): OPTION (12):				/* Defining a PREFIX character. */
	     call CHECK_CHARACTER;			/* Is this a valid prefix character? */
	     if ecode ^= 0 then return;		/* No. */
	     optx = optx - 10;			/* Turn option index into a prefix index. */
	     substr (ssd.prefixes, optx, 1) = argument;	/* Set prefixes character. */
	     return;

OPTION (13):					/* Set DELIMITERS. */
	     if arg_len > length (delim_chars.others)	/* Is new delimiter string too long? */
	     then do;				/* Yes, too long. */
		ecode = error_table_$bad_arg;
		call com_err_ (ecode, "Speedtype", "Delimiter string ""^a"" is too long", argument);
		return;
	     end;
	     delim_ptr = addr (ssd.delimiters);		/* Set up to reference delimiters. */
	     delim_chars.others = argument;		/* Set delimiter characters. */
	     return;

	end PROCESS_OPTION;





CHECK_CHARACTER: procedure;

/*	This procedure checks to see that the new suffix, escape, or prefix character
   *	is valid.
*/
	     if arg_len > 1				/* Must be only one character. */
	     then do;
		ecode = error_table_$bad_arg;
		call com_err_ (ecode, "Speedtype", "^a argument ""^a"" is too long", option, argument);
		return;
	     end;

	end CHECK_CHARACTER;

     end option_symbols;
