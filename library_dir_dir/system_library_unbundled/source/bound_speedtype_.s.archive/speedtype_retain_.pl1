/* ******************************************************
   *                                                    *
   *                                                    *
   *    Copyright, (C) Honeywell Information Systems    *
   *    Inc., 1980.                                     *
   *                                                    *
   *                                                    *
   ****************************************************** */

speedtype_retain_: procedure (arg_perm_flag, arg_in_ptr, arg_in_len, arg_out_ptr, arg_out_len, arg_out_used, arg_ecode);

/*	This procedure is an internal interface of the Speedtype subsystem.
   *	Created on 02/20/76 by Bill Silver as notescript_escape_.
   *	Changed on 06/13/77 by Bill Silver to speedtype_retain_.
*/

/*		ARGUMENTS			*/

dcl  arg_ecode fixed bin (35);			/* (O) error_table code. */
dcl  arg_in_len fixed bin (21);			/* (I) Length of input string in characters. */
dcl  arg_in_ptr ptr;				/* (I) Pointer to input string. */
dcl  arg_out_len fixed bin (21);			/* (I) Length of output buffer in characters. */
dcl  arg_out_ptr ptr;				/* (I) Pointer to output buffer. */
dcl  arg_out_used fixed bin (21);			/* (O) Actual length of output string in characters. */
dcl  arg_perm_flag bit (1) aligned;			/* (I) ON => Perm (`), OFF => Temp (~). */


/*		AUTOMATIC DATA		*/

dcl  dtok_len fixed bin;				/* Length of delimiter token string. */
dcl  dtok_ptr ptr;					/* Pointer to delimiter token. */
dcl  ecode fixed bin (35);				/* Error table code. */
dcl  escape_char char (1);				/* Specified escape character to insert. */
dcl  texp_len fixed bin (21);				/* Length of test expansion string. */
dcl  texp_len_max fixed bin (21);			/* Length of output string left. */
dcl  texp_ptr ptr;					/* Where test expansion string will go. */
dcl  in_len fixed bin (21);				/* Length of unused part of input segment. */
dcl  in_ptr ptr;					/* Pointer to input segment. */
dcl  in_used fixed bin;				/* Length of used part of input segment. */
dcl  out_len fixed bin (21);				/* Length of actual output string. */
dcl  out_ptr ptr;					/* Pointer to output string. */
dcl  out_used fixed bin (21);				/* Length of used part of output segment. */
dcl  pad_escape char (1);				/* Used to hold pad escape character. */
dcl  ttok_len fixed bin;				/* Length of text token string. */
dcl  ttok_ptr ptr;					/* Pointer to text token string. */
dcl  token_len fixed bin (21);			/* Length of one token. */
dcl  token_ptr ptr;					/* Pointer to a token. */


/*		BASED DATA		*/

dcl 1 input based (in_ptr) aligned,			/* Overlay of input segment. */
    (2 used char (in_used),				/* Part of segment that has been processed. */
    2 text char (in_len)) unaligned;			/* Part of segment still to be processed. */

dcl 1 output based (out_ptr) aligned,			/* Overlay of output segment. */
    (2 used char (out_used),				/* Part of segment that has been processed. */
    2 text char (1)) unaligned;			/* Beginning of unprocessed part. */

/* Overlay of temporary output string. */
dcl  test_expansion char (texp_len) based (texp_ptr) aligned;

dcl  token char (token_len) based (token_ptr);		/* Overlay of one token string. */


/*		EXTERNAL ENTRIES		*/

dcl (addr, length, search, substr, verify) builtin;

dcl  error_table_$item_too_big fixed bin (35) external;

dcl  speedtype_expand_ entry (ptr, fixed bin (21), ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  speedtype_info_$pointer entry (ptr, fixed bin (35));
						/* 	*/
%include speedtype_symbols;
/* 	*/
/*	Begin Escaping
*/
	in_ptr = arg_in_ptr;			/* Copy arguments and initialize. */
	in_len = arg_in_len;
	out_ptr = arg_out_ptr;
	out_len = arg_out_len;

	in_used,
	     out_used,
	     ecode = 0;

/* Get pointer to current symbol dictionary. */
	call speedtype_info_$pointer (ssd_ptr, ecode);
	if ecode ^= 0 then goto RETURN;

	if arg_perm_flag				/* Save selected escape character. */
	then escape_char = substr (ssd.escapes, 2, 1);	/* Perm escape. */
	else escape_char = substr (ssd.escapes, 3, 1);	/* Temp escape. */
	pad_escape = substr (ssd.escapes, 1, 1);	/* Save pad escape character. */

	do while ((in_len > 0) & (ecode = 0));		/* Copy input to output until no more input. */
	     call COPY_PAIR;			/* Copy next delimiter/text token pair. */
	end;

RETURN:
	arg_out_used = out_used;			/* Return number of chars in output segment. */
	arg_ecode = ecode;
	return;
						/* 	*/
COPY_PAIR: procedure;

/*	This procedure copies the input string into the output string one
   *	delimiter/text token pair at a time.  Each pair is expanded to see
   *	if it would be altered by the expansion process.  It it would be,
   *	then the specified escape character is inserted between the two tokens.
   *	Otherwise the token pair is copied into the output string as is.
   *	In addition, if the last character of the delimiter token is a PAD
   *	escape character, then it is converted to the specified escape character.
*/
	     dtok_ptr = addr (input.text);		/* Get pointer to delimiter token. */
	     dtok_len = verify (input.text, ssd.delimiters);
	     if dtok_len > 0			/* Adjust length of delimiter token. */
	     then dtok_len = dtok_len - 1;
	     else dtok_len = in_len;
	     in_used = in_used + dtok_len;		/* Move input window past delimiter token. */
	     in_len = in_len - dtok_len;

	     if in_len = 0				/* Is there any text token? */
	     then do;				/* No, special case last delimiter token. */
		token_ptr = dtok_ptr;		/* Move just the delimiter token. */
		token_len = dtok_len;
		call MOVE_OUT;
		return;
	     end;

	     ttok_ptr = addr (input.text);		/* Get address of text token. */
	     ttok_len = search (input.text, ssd.delimiters);
	     if ttok_len > 0			/* Adjust length of text token. */
	     then ttok_len = ttok_len -1;
	     else ttok_len = in_len;
	     in_used = in_used + ttok_len;		/* Move input window past text token. */
	     in_len = in_len - ttok_len;

	     token_ptr = dtok_ptr;			/* Define token to be whole pair. */
	     token_len = dtok_len + ttok_len;

	     texp_ptr = addr (output.text);		/* Expand directly into our output string. */
	     texp_len_max = out_len - out_used;		/* Use all the space that is left. */
	     call speedtype_expand_ (token_ptr, token_len, texp_ptr, texp_len_max, texp_len, ecode);
	     if ecode ^= 0 then return;

	     if token = test_expansion		/* Did expansion change anything? */
	     then do;				/* No, expanded string OK. */
		if dtok_len > 0			/* If delim token, check for PAD escape. */
		then if substr (test_expansion, dtok_len, 1) = pad_escape
		     then substr (test_expansion, dtok_len, 1) = escape_char;
		out_used = out_used + texp_len;	/* Move output window. */
		return;
	     end;

/*	Expansion does alter the input text.  Thus expanded string cannot be used.
   *	Move input string tokens one at a time and insert an escape character in between.
*/
	     token_ptr = dtok_ptr;			/* First move th delimiter token. */
	     token_len = dtok_len;
	     call MOVE_OUT;
	     if ecode ^= 0 then return;

	     token_ptr = addr (escape_char);		/* Add the escape character. */
	     token_len = 1;
	     call MOVE_OUT;
	     if ecode ^= 0 then return;

	     token_ptr = ttok_ptr;			/* Now move the text token. */
	     token_len = ttok_len;
	     call MOVE_OUT;

	end COPY_PAIR;
						/* 	*/
MOVE_OUT:	procedure;

/*	This procedure is called to move the current token string
   *	into the output string.  It will make sure that there is
   *	enough room in the output string.
*/

	     if token_len = 0 then return;		/* No token => nothing to do. */

	     if (out_used + token_len) > out_len	/* Is there room for this output? */
	     then do;				/* No. */
		out_used = out_len;			/* Make sure no other output fits. */
		ecode = error_table_$item_too_big;
		return;
	     end;

	     addr (output.text) -> token = token;	/* Copy token into output. */

	     out_used = out_used + token_len;		/* Move output pointer over token. */

	end MOVE_OUT;

     end speedtype_retain_;
