/* ******************************************************
   *                                                    *
   *                                                    *
   *    Copyright, (C) Honeywell Information Systems    *
   *    Inc., 1980.                                     *
   *                                                    *
   *                                                    *
   ****************************************************** */

speedtype_index_: procedure (arg_symbol, arg_ssd_ptr, arg_sbx, arg_ecode);

/*	This procedure is an internal interface of the Speedtype subsystem.
   *	Created on 10/13/75 by Bill Silver as notescript_index_.
   *	Changed on 06/13/77 by Bill Silver to speedtype_symbol_.
   *
   *	This procedure takes a symbol and returns the index in the current
   *	Speedtype symbol dictionary that corresponds to this symbol.
*/

dcl  arg_ecode fixed bin (35);			/* (O) Error table code. */
dcl  arg_symbol char (*);				/* (I) A symbol token. */
dcl  arg_ssd_ptr ptr;				/* (I) Pointer to current symbol dictionary. */
dcl  arg_sbx fixed bin;				/* (O) Index of symbol entry. */


dcl  ecode fixed bin (35);
dcl  sb_tab_len fixed bin;				/* Length of actual symbol array. */
dcl  sb_tab_ptr ptr;				/* Pointer to symbol table. */
dcl  sbx fixed bin;					/* Symbol index. */
dcl  symbol_len fixed bin;				/* Length of test symbol. */
dcl  symbol_ptr ptr;				/* Pointer to test symbol. */

dcl  symbol_buffer char (8);				/* Used to copy symbol argument. */


dcl  symbol char (symbol_len) based (symbol_ptr);		/* Overlay of the test symbol. */

dcl  sb_table char (sb_tab_len) based (sb_tab_ptr);	/* Symbol table as a string. */


dcl  caps char (26) aligned				/* Uppercase letters. */
     internal static init ("EAIOUSTCYHNLMRWFGPBDJQKXVZ");


dcl (addr, index, length, search, substr) builtin;

dcl  error_table_$bad_arg fixed bin (35) external;
dcl  error_table_$bigarg fixed bin (35) external;

dcl  com_err_ entry options (variable);
						/* 	*/
%include speedtype_symbols;
/* 	*/
	ssd_ptr = arg_ssd_ptr;			/* Get pointer to symbol dictionary. */
	sb_ptr = addr (symbol_buffer);		/* Build a test symbol entry. */
	sb.new_line = "
";						/* Set it up like an entry in the sb_tab array. */
	sb.symbol = arg_symbol;			/* Copy symbol argument. */
	sbx = 0;					/* Initialize to not found. */

	symbol_ptr = addr (sb.symbol);		/* Set up overlay of symbol. */
	symbol_len = length (arg_symbol);

	if symbol_len > 7				/* Is symbol too long? */
	then do;					/* Yes, illegal symbol. */
	     ecode = error_table_$bigarg;
	     call com_err_ (ecode, "Speedtype", "Symbol ""^a"" longer than 7 characters.", arg_symbol);
	     goto RETURN;
	end;

	ecode = error_table_$bad_arg;			/* Set error until symbol validated. */

	if search (symbol, ssd.delimiters) ^= 0		/* Check for delimiters in symbol. */
	then do;
	     call com_err_ (ecode, "Speedtype", "Symbol ""^a"" contains a delimiter character.", symbol);
	     goto RETURN;
	end;
	if index (caps, substr (symbol, 1, 1)) ^= 0	/* Check for leading capital letter. */
	then do;
	     call com_err_ (ecode, "Speedtype", "Symbol ""^a"" contains a leading capital letter.", symbol);
	     goto RETURN;
	end;
	if index (ssd.prefixes, substr (symbol, 1, 1)) ^= 0
	then do;					/* Symbol begins with a prefix character. */
	     call com_err_ (ecode, "Speedtype", "Symbol ""^a"" begins with a prefix character.", symbol);
	     goto RETURN;
	end;
	if index (ssd.suffixes, substr (symbol, symbol_len, 1)) ^= 0
	then do;
	     call com_err_ (ecode, "Speedtype", "Symbol ""^a"" ends with a suffix character.", symbol);
	     goto RETURN;
	end;
	if substr (symbol, symbol_len, 1) = "."
	then do;
	     call com_err_ (ecode, "Speedtype", "Symbol ""^a"" ends with a period.", symbol);
	     goto RETURN;
	end;

	ecode = 0;				/* Now reset to good error code. */

	sb_tab_len = ssd.num_symbols * (2 * 4);		/* Use symbol table as a string. */
	sb_tab_ptr = addr (ssd.sb_tab);

	sbx = index (sb_table, symbol_buffer);		/* Look for symbol in table. */
	if sbx ^= 0				/* Did we find it? */
	then sbx = ((sbx-1) / 8) + 1;			/* Yes, convert to table index. */

RETURN:
	arg_sbx = sbx;				/* Return index. */
	arg_ecode = ecode;

     end speedtype_index_;
