/* ******************************************************
   *                                                    *
   *                                                    *
   *    Copyright, (C) Honeywell Information Systems    *
   *    Inc., 1980.                                     *
   *                                                    *
   *                                                    *
   ****************************************************** */

expand_symbols: esb: procedure;

/*	This procedure implements the expand_symbols command.
   *	Created on 10/15/75 by Bill Silver as run_notescript_.
   *	Changed on 06/07/77 by Bill Silver to expand_symbols_.
   *
   *	The expand_symbols command will copy an input segment into
   *	an output segment and in so doing expand each symbol that
   *	is found in the input segment and is defined in the current
   *	Speedtype symbol dictionary.  Its calling sequence is:
   *
   *	     expand_symbols, esb input_path (output_path)
*/

/*		AUTOMATIC DATA		*/
dcl  dir_name char (168);				/* Used to expand pathnames. */
dcl  ent_name char (32);				/* Used to expand pathnames. */

dcl  arg_len fixed bin;				/* Length of control argument. */
dcl  arg_ptr ptr;					/* Pointer to control argument. */
dcl  argx fixed bin;				/* Index of control argument. */
dcl  ecode fixed bin (35);				/* Error table code. */
dcl  in_len fixed bin (21);				/* Length of unused part of input segment. */
dcl  in_ptr ptr;					/* Pointer to input segment. */
dcl  num_args fixed bin;				/* Number of command arguments. */
dcl  out_ptr ptr;					/* Pointer to output segment. */
dcl  out_len fixed bin (21);				/* Max length of output segment. */
dcl  out_used fixed bin (21);				/* Length of used part of output segment. */
dcl  temp_flag bit (1) aligned;			/* ON -> using temporary output segment. */

/*		BASED DATA		*/

dcl  argument char (arg_len) based (arg_ptr);		/* Control argument string. */

/*		EXTERNAL ENTRIES		*/

dcl (addr) builtin;

dcl  error_table_$wrong_no_of_args fixed bin (35) external;

dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  speedtype_expand_ entry (ptr, fixed bin (21), ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  speedtype_util_$fix_output_seg entry (bit (1) aligned, ptr, ptr, fixed bin (21), fixed bin (35));
dcl  speedtype_util_$init_input_seg entry (char (*), char (*), ptr, fixed bin (21), fixed bin (35));
dcl  speedtype_util_$init_output_seg entry (char (*), char (*), ptr, fixed bin (21), fixed bin (35));
						/* 	*/
	call cu_$arg_count (num_args);		/* Test for correct number of arguments. */
	if (num_args < 1) |				/* Must have either 1 or 2 arguments. */
	(num_args > 2)
	then do;
	     ecode = error_table_$wrong_no_of_args;
	     call com_err_ (ecode, "Speedtype", "Usage is: esb input_path (output_path)");
	     return;
	end;

	temp_flag = "1"b;				/* Assume that we need a temporary output segment. */

	do argx = 1 to num_args;			/* Process each argument. */
	     call cu_$arg_ptr (argx, arg_ptr, arg_len, ecode);
	     if ecode ^= 0
	     then do;
		call com_err_ (ecode, "Speedtype", "Error getting argument ^d", argx);
		return;
	     end;
	     call PROCESS_ARG;			/* Process this argument. */
	     if ecode ^= 0 then return;		/* Give up if argument error. */
	end;

	if temp_flag				/* Do we need a temporary output segment? */
	then do;					/* Yes, use temporary segment in process directory. */
	     call speedtype_util_$init_output_seg ("", "speedtype_temp", out_ptr, out_len, ecode);
	     if ecode ^= 0
	     then do;
		call com_err_ (ecode, "Speedtype", "Error creating temporary output segment");
		return;
	     end;
	end;

/* Now expand input segment. */
	call speedtype_expand_ (in_ptr, in_len, out_ptr, out_len, out_used, ecode);
	if ecode ^= 0
	then do;
	     call com_err_ (ecode, "Speedtype", "Error expanding input");
	     return;
	end;

/* Fix up output segment. */
	call speedtype_util_$fix_output_seg (temp_flag, in_ptr, out_ptr, out_used, ecode);
	if ecode ^= 0
	then call com_err_ (ecode, "Speedtype", "Error fixing output segment");

	return;
						/* 	*/
PROCESS_ARG: procedure;

/*	This procedure is called to process one input argument.
   *	The first argument must be the pathname of the input segment.
   *	The second, optional argument, must be the pathanme of the output segment.
*/
/* Expand the pathname argument. */
	     call expand_path_ (arg_ptr, arg_len, addr (dir_name), addr (ent_name), ecode);
	     if ecode ^= 0
	     then do;
		call com_err_ (ecode, "Speedtype", "Error expanding pathanme: ^a", argument);
		return;
	     end;

	     goto ARGUMENT (argx);			/* Go process correct argument. */

ARGUMENT (1):					/* Pathname of input segment. */
	     call speedtype_util_$init_input_seg (dir_name, ent_name, in_ptr, in_len, ecode);
	     if ecode ^= 0
	     then call com_err_ (ecode, "Speedtype", "Error initializing input segment");
	     return;

ARGUMENT (2):					/* Pathname of output segment. */
	     call speedtype_util_$init_output_seg (dir_name, ent_name, out_ptr, out_len, ecode);
	     if ecode ^= 0
	     then do;
		call com_err_ (ecode, "Speedtype", "Error initializing output segment");
		return;
	     end;
	     if out_ptr ^= in_ptr			/* If output segment different from input segment. */
	     then temp_flag = "0"b;			/* Then no need for temporary output segment. */
	end PROCESS_ARG;

     end expand_symbols;
