/* ******************************************************
   *                                                    *
   *                                                    *
   *    Copyright, (C) Honeywell Information Systems    *
   *    Inc., 1980.                                     *
   *                                                    *
   *                                                    *
   ****************************************************** */

show_symbols: ssb: procedure;

/*	This procedure implements the show_symbols command.
   *	Created on 12/29/75 by Bill Silver as test_notescript.
   *	Changed on 06/10/77 by Bill Silver to show_symbols.
   *
   *	The show_symbols (ssb) command will expand an input string using
   *	the currently defined Speedtype symbol dictionary.
   *	Its calling sequence is:
   *
   *	     show_symbols, ssb  term1 ... termi
*/

dcl  in_buffer char (256);				/* Used to hold input string. */
dcl  out_buffer char (512);				/* Used to hold expanded stroutg. */

dcl  arg_len fixed bin (21);				/* Length of an input term argument. */
dcl  arg_ptr ptr;					/* Pointer to an argument term. */
dcl  argx fixed bin;				/* Number of argument term. */
dcl  ecode fixed bin (35);				/* Error table code. */
dcl  in_len fixed bin (21);				/* Length of input string. */
dcl  in_ptr ptr;					/* Pointer to input string. */
dcl  num_args fixed bin;				/* Number of command arguments. */
dcl  out_used fixed bin (21);				/* Length of output string. */

dcl  argument char (arg_len) based (arg_ptr);

dcl  string char (in_len) based (in_ptr);		/* Input string. */

dcl (addr, length, substr) builtin;

dcl  error_table_$bad_arg fixed bin (35) external;
dcl  error_table_$wrong_no_of_args fixed bin (35) external;

dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  speedtype_expand_ entry (ptr, fixed bin (21), ptr, fixed bin (21), fixed bin (21), fixed bin (35));
						/* 	*/
	call cu_$arg_count (num_args);
	if num_args = 0
	then do;
	     ecode = error_table_$wrong_no_of_args;
	     call com_err_ (ecode, "Speedtype", "Usage is:  ssb term1 ... termi");
	     return;
	end;

	in_buffer = " ";				/* Clear input buffer. */
	in_ptr = addr (in_buffer);
	in_len = 0;

	do argx = 1 to num_args;			/* Each argument is an input term. */
	     call cu_$arg_ptr (argx, arg_ptr, arg_len, ecode);
	     if ecode ^= 0
	     then do;
		call com_err_ (ecode, "Speedtype", "Error getting argument");
		return;
	     end;
	     if (in_len + arg_len) > length (in_buffer)
	     then do;				/* Length of input buffer exceeded. */
		ecode = error_table_$bad_arg;
		call com_err_ (ecode, "Speedtype", "Length of input buffer exceeded.");
		return;
	     end;
	     if argx > 1				/* Is this the second or greater term? */
	     then in_len = in_len + 1;		/* Yes, sikp a space. */
						/* Copy term to input string. */
	     substr (in_buffer, (in_len + 1), (in_len + 1 + arg_len)) = argument;
	     in_len = in_len + arg_len;
	end;

	call speedtype_expand_ (in_ptr, in_len, addr (out_buffer), length (out_buffer), out_used, ecode);
	if ecode = 0
	then call ioa_ ("^a", substr (out_buffer, 1, out_used));
	else call com_err_ (0, "Speedtype", "Error expanding ^a", string);

     end show_symbols;
