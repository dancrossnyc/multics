/* ******************************************************
   *                                                    *
   *                                                    *
   *    Copyright, (C) Honeywell Information Systems    *
   *    Inc., 1980.                                     *
   *                                                    *
   *                                                    *
   ****************************************************** */

speedtype_sort_: procedure (arg_vector_ptr, arg_vector_size, arg_string_len);

/*	This program is an internal interface of the Speedtype subsystem.
   *	Changed on 10/21/75 by Bill Silver to notescript_sort_.
   *	Changed on 06/13/77 by Bill Silver to speedtype_sort_.
   *
   *	This program sorts symbols and expansions.
   *	It was taken from "sort_strings_".
   *	Algorithm 347
   *	AN EFFICIENT ALGORITHM FOR SORTING WITH MINIMAL STORAGE
   *	Richard C. Singleton
   *	CACM 12, Number 3, March 1969, pp. 185-7
*/

dcl  arg_vector_ptr ptr;				/* Pointer to array of string pointers. */
dcl  arg_vector_size fixed bin;			/* Number of symbols to sort. */
dcl  arg_string_len fixed bin;			/* Length of sort strings. */

dcl  vector_ptr ptr;				/* Pointer to vector of pointers. */
dcl  vector_size fixed bin;				/* Number of symbols. */
dcl  string_len fixed bin;				/* Length of sort strings. */

dcl 1 temp like vector_entry aligned;			/* Work entry. */
dcl 1 swap_temp like vector_entry aligned;		/* Work entry. */

dcl (depth, first, last, median, low, high) fixed bin;

dcl 1 stack (0:20) aligned,
    2 first fixed bin,
    2 last fixed bin;

dcl 1 vector (vector_size) based (vector_ptr) like vector_entry aligned;

dcl 1 vector_entry based aligned,
    2 string_ptr ptr,
    2 sbx fixed bin,
    2 pad bit (36);

dcl  string char (string_len) based;			/* Template to reference strings. */

dcl (divide) builtin;
						/* 	*/
	vector_ptr = arg_vector_ptr;			/* Copy arguments. */
	vector_size = arg_vector_size;
	string_len = arg_string_len;

	depth = 0;
	first = 1;
	last = vector_size;
	go to L4;


L1:	median = divide (first + last, 2, 17, 0);
	temp = vector (median);
	low = first;
	high = last;

	if vector (first).string_ptr -> string > vector (median).string_ptr -> string
	then do;
	     vector (median) = vector (first);
	     vector (first) = temp;
	     temp = vector (median);
	end;

	if vector (last).string_ptr -> string < vector (median).string_ptr -> string
	then do;
	     vector (median) = vector (last);
	     vector (last) = temp;
	     temp = vector (median);
	     if vector (first).string_ptr -> string > vector (median).string_ptr -> string
	     then do;
		vector (median) = vector (first);
		vector (first) = temp;
		temp = vector (median);
	     end;
	end;

L2:	do high = (high -1) by -1 while (vector (high).string_ptr -> string > temp.string_ptr -> string);
	end;

	do low = (low + 1) by 1 while (vector (low).string_ptr -> string < temp.string_ptr -> string);
	end;

	if low <= high
	then do;
	     swap_temp = vector (high);
	     vector (high) = vector (low);
	     vector (low) = swap_temp;
	     go to L2;
	end;

	if (high - first) > (last - low)
	then do;
	     stack.first (depth) = first;
	     stack.last (depth) = high;
	     first = low;
	end;
	else do;
	     stack.first (depth) = low;
	     stack.last (depth) = last;
	     last = high;
	end;

	depth = depth + 1;

L4:	if (last - first) > 10
	then goto L1;

	if first = 1
	then if first < last
	     then goto L1;

	do first = (first + 1) to last;
	     temp = vector (first);
	     do low = first -1 by -1 while (vector (low).string_ptr -> string > temp.string_ptr -> string);
		vector (low + 1) = vector (low);
	     end;
	     vector (low + 1) = temp;
	end;

	depth = depth - 1;
	if depth >= 0
	then do;
	     first = stack.first (depth);
	     last = stack.last (depth);
	     go to L4;
	end;

     end speedtype_sort_;
