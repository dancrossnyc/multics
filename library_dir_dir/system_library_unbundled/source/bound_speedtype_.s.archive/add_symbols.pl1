/* ******************************************************
   *                                                    *
   *                                                    *
   *    Copyright, (C) Honeywell Information Systems    *
   *    Inc., 1980.                                     *
   *                                                    *
   *                                                    *
   ****************************************************** */

add_symbols: asb: procedure;

/*	This procedure implements the add_symbols command.
   *	Created on 10/15/75 by Bill Silver as add_notescript.
   *	Changed on 06/07/77 by Bill Silver to add_symbols.
   *      Changed on 10/28/80 by Paul Benjamin for special suffixing.
   *
   *	The add_symbols command will add a new symbol to the
   *	current Speedtype symbol dictionary.  Its calling sequence is:
   *
   *	add_symbols, asb symbol expansion {-control_args}
   *
   *	where:
   *
   *	     -fc, -force	Specifying this argument will force the replacement
   *			of the expansion of an already defined symbol.
   *			If the symbol is already defined and this argument is
   *			not specified then the user will be asked if he wants to
   *			replace this symbol.
   *
   *	     -plural AA	SUFFIX options.
   *	     -ed AA
   *	     -ing AA
   *	     -er AA
   *	     -ly AA
   *
   *	     -suffix "on" or "off"
*/

/*		AUTOMATIC DATA		*/

dcl  suffix_lens (5) fixed bin;			/* Length of each suffix expansion. */
dcl  suffix_exps (5) char (56+4);			/* +4 => room for suffix). */

/* Note above that 5 is really hbound(exp.actionx,1) and 56 is really length(exp.expansion). */


dcl  answer char (4) varying;				/* Answer to command query. */
dcl  arg_len fixed bin;				/* Length of a command argument. */
dcl  arg_ptr ptr;					/* Pointer to a command argument. */
dcl  argx fixed bin;				/* Index of current command argument. */
dcl  dir_name char (168);				/* Directory containing symbol dict. */
dcl  ecode fixed bin (35);				/* Error table code. */
dcl  ent_name char (32);				/* Symbol dictionary */
dcl  exp_len fixed bin;				/* Length of expansion argument. */
dcl  expansion char (56);				/* Expansion for the new symbol. */

/* Note above that 56 is really length(exp.expansion). */

dcl  force_flag bit (1);				/* ON => force the replacement of defined symbol. */
dcl  i fixed bin;
dcl  symbol char (7);				/* The new symbol. */
dcl  sbx fixed bin;					/* Index of symbol entry. */
dcl  temp_code fixed bin (35);			/* Used when already have non-zero ecode. */
dcl  num_args fixed bin;				/* Number of command arguments. */
dcl  option char (8);				/* Control argument option. */
dcl  optx fixed bin;				/* Option index. */

dcl 1 query_info aligned,				/* Info structure for command_query_. */
    2 version fixed bin,
    (2 yes_no bit (1),
    2 suppress_name bit (1)) unaligned,
    2 status_code fixed bin,
    2 other_code fixed bin;


/*		BASED DATA		*/

dcl  argument char (arg_len) based (arg_ptr);		/* Command argument. */


/*		INTERNAL STATIC DATA	*/

dcl  options (6) char (8)				/* Control argument options. */
     internal static init ("-plural", "-ed", "-ing", "-er", "-ly", "-suffix");

dcl  new_line char (1)				/* Used to set up symbol entry. */
     internal static init ("
");


/*		EXTERNAL ENTRIES CALLED	*/

dcl (addr, hbound, length, min) builtin;

dcl  error_table_$bad_arg fixed bin (35) external;
dcl  error_table_$badopt fixed bin (35) external;
dcl  error_table_$no_w_permission fixed bin(35) ext static;
dcl  error_table_$odd_no_of_args fixed bin (35) external;
dcl  error_table_$wrong_no_of_args fixed bin (35) external;

dcl  com_err_ entry options (variable);
dcl  command_query_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  speedtype_index_ entry (char (*), ptr, fixed bin, fixed bin (35));
dcl  speedtype_info_$expand_table entry (ptr, fixed bin(35));
dcl  speedtype_info_$name entry (char (*), char (*), fixed bin (35));
dcl  speedtype_info_$pointer entry (ptr, fixed bin (35));
dcl  speedtype_info_$set_bc entry (ptr, fixed bin (35));
dcl  speedtype_suffix_ entry (ptr, ptr, ptr, fixed bin, ptr, fixed bin);
						/* 	*/
%include speedtype_symbols;
/* 	*/
/*	Begin add_symbols command.
*/
	call speedtype_info_$pointer (ssd_ptr, ecode);
	if ecode ^= 0				/* Did we get a pointer to the Speedtype symbol dictionary? */
	then do;
	     if ecode = error_table_$no_w_permission
		then do;
		call speedtype_info_$name (dir_name, ent_name, temp_code);
		call com_err_ (ecode, "Speedtype", "Attempting to convert ^a>^a to new version.", dir_name, ent_name);
	     end;
	     return;
	end;

	force_flag = "0"b;				/* Initialize flags. */
	do i = 1 to hbound (suffix_lens, 1);		/* Initially default suffixes specified. */
	     suffix_lens (i) = 0;
	end;

	call GET_ARGS;				/* Get commmand arguments. */
	if ecode ^= 0 then return;			/* Any errors? */

	if sbx = 0				/* Is symbol already defined? */
	then call GET_NEW_SBX;			/* No, it is a new symbol. */
	else call GET_OLD_SBX;			/* This symbol is already defined. */

	if sbx = 0				/* Are we ready to add this symbol? */
	then return;				/* No, no valid symbol entry index. */

	sb_ptr = addr (ssd.sb_tab (sbx));		/* Get pointer to specified symbol entry. */
	exp_ptr = addr (ssd.exp_tab (sbx));		/* And corresponding expansion entry. */
	spc_ptr = addr (ssd.spec_tab (sbx));              /* AND corresponding special entry. */

	exp.expansion = expansion;			/* First fill in expansion entry. */
	exp.pad = 0;
	exp.len = exp_len;

	sb.symbol = symbol;				/* Next, fill in the symbol entry. */
	sb.new_line = new_line;

	if sbx > ssd.num_symbols			/* Is this a new symbol? */
	then ssd.num_symbols = sbx;			/* Yes, add it to the list. */

	do i = 1 to hbound (suffix_lens, 1);		/* Set all suffixes for this symbol. */
	     call speedtype_suffix_ (sb_ptr, exp_ptr, spc_ptr, i, addr (suffix_exps (i)), suffix_lens (i));
	     if (exp.actionx (i) = 0) &		/* Note if desired expansion not actually set. */
	     (suffix_lens (i) >0)
	     then call com_err_ (0, "Speedtype", "^a suffix ^a invalid, ^a turned off",
		options (i), suffix_exps (i), options (i));
	end;

	call speedtype_info_$set_bc (ssd_ptr, ecode);

	return;
						/* 	*/
GET_NEW_SBX: procedure;

/*	This procedure will find a free symbol entry for the new symbol.
   *	It will always take the first free entry.
*/
	     sbx = ssd.num_symbols + 1;		/* Adding another symbol to list. */

	     if sbx > ssd.table_size            	/* Is this one too many symbols? */
	     then call speedtype_info_$expand_table (ssd_ptr, ecode);
	     
	end GET_NEW_SBX;




GET_OLD_SBX: procedure;

/*	This symbol is already defined.  Unless the caller has specified
   *	that we force the replacement we will ask him what he wants to do.
*/
	     if force_flag				/* Should we force the replacement? */
	     then return;				/* Yes. */

	     query_info.version = 1;			/* No, ask user what he wants to do. */
	     query_info.yes_no = "1"b;
	     query_info.suppress_name = "0"b;
	     query_info.status_code,
		query_info.other_code = 0;

	     call command_query_ (addr (query_info), answer, "Speedtype",
		"^a already defined. ^/Do you want to replace it?", symbol);

	     if answer = "no"			/* Does user want to replace this symbol? */
	     then sbx = 0;				/* No, make index invalid. */

	end GET_OLD_SBX;
						/* 	*/
GET_ARGS:	procedure;

/*	This procedure is called to process all of the command arguments.
*/
	     call cu_$arg_count (num_args);

	     if num_args < 2
	     then do;				/* Too few arguments. */
		ecode = error_table_$wrong_no_of_args;
		call com_err_ (ecode, "Speedtype", "Usage is:  asb symbol expansion {-control_args}");
		return;
	     end;

	     do argx = 1 to num_args;			/* Process each argument. */
		call cu_$arg_ptr (argx, arg_ptr, arg_len, ecode);
		if ecode ^= 0
		then do;
		     call com_err_ (ecode, "Speedtype", "Error getting argument ^d", argx);
		     return;
		end;
		call PROCESS_ARG;			/* Process this argument. */
		if ecode ^= 0 then return;		/* Stop if any error. */
	     end;

	end GET_ARGS;
						/* 	*/
PROCESS_ARG: procedure;

/*	This procedure is called to process one or two command arguments.
*/
	     goto ARGUMENT (min (argx, 3));		/* Process according to position. */

ARGUMENT (1):					/* Symbol */
	     symbol = argument;			/* Save symbol, see if it is already defined. */
	     call speedtype_index_ (argument, ssd_ptr, sbx, ecode);
	     if ecode ^= 0 then return;

ARGUMENT (2):					/* Expansion */
	     if arg_len > length (exp.expansion)	/* Validate expansion length. */
	     then do;				/* It is too long. */
		ecode = error_table_$bad_arg;
		call com_err_ (ecode, "Speedtype", "Expansion ^a is too long", argument);
		return;
	     end;
	     expansion = argument;			/* Save expansion. */
	     exp_len = arg_len;			/* Save actual expansion length. */
	     return;

ARGUMENT (3):					/* Control argument(s) */
	     if (argument = "-fc") |			/* Check for force control argument. */
	     (argument = "-force")
	     then do;				/* It is the force control argument. */
		force_flag = "1"b;			/* User wants to force replacement. */
		return;
	     end;

	     option = argument;			/* Option argument pair, save option. */

	     argx = argx + 1;			/* Get index of value argument. */
	     if argx > num_args			/* Is there another argument? */
	     then do;				/* No, error. */
		ecode = error_table_$odd_no_of_args;
		call com_err_ (ecode, "Speedtype", "^a requires a value argument", option);
		return;
	     end;

/* Get value argument. */
	     call cu_$arg_ptr (argx, arg_ptr, arg_len, ecode);
	     if ecode ^= 0
	     then do;
		call com_err_ (ecode, "Speedtype", "Error getting argument ^d", argx);
		return;
	     end;

	     do optx = 1 to hbound (options, 1);	/* Look for option. */
		if option = options (optx)		/* Is this the option? */
		then goto OPTION (optx);		/* Yes, we found it. */
	     end;

	     ecode = error_table_$badopt;
	     call com_err_ (ecode, "Speedtype", "Control argument ^a unknown", option);
	     return;

OPTION (1): OPTION (2): OPTION (3):			/* SUFFIX option. */
OPTION (4): OPTION (5):
	     if argument = "on"			/* ON => default suffix action. */
	     then do;
		suffix_lens (optx) = 0;
		return;
	     end;
	     if argument = "off"			/* OFF => disable this suffix. */
	     then do;
		suffix_lens (optx) = -1;
		return;
	     end;
	     suffix_lens (optx) = arg_len;		/* Set up special action for this suffix. */
	     suffix_exps (optx) = argument;
	     return;

OPTION (6):					/* -suffix "on" | "off" */
	     if argument = "on"			/* ON => default action for all suffixes. */
	     then do;
		do i = 1 to hbound (suffix_lens, 1);
		     suffix_lens (i) = 0;
		end;
		return;
	     end;
	     if argument = "off"			/* OFF => disable all suffixes. */
	     then do;
		do i = 1 to hbound (suffix_lens, 1);
		     suffix_lens (i) = -1;
		end;
		return;
	     end;
	     ecode = error_table_$bad_arg;
	     call com_err_ (ecode, "Speedtype", "-suffix argument must be ""on"" or ""off""");
	     return;

	end PROCESS_ARG;

     end add_symbols;
