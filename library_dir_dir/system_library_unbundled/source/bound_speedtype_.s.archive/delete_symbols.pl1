/* ******************************************************
   *                                                    *
   *                                                    *
   *    Copyright, (C) Honeywell Information Systems    *
   *    Inc., 1980.                                     *
   *                                                    *
   *                                                    *
   ****************************************************** */

delete_symbols: dsb: procedure;

/*	This procedure implements the delete_symbols command.
   *	Created on 10/15/75 by Bill Silver as delete_notescript.
   *	Changed on 06/07/77 by Bill Silver to delete_symbols.
   *      Changed on 10/28/80 by Paul Benjamin for special suffixing.
   *
   *	The delete_symbols command will delete one or more symbols from
   *	the current Speedtype symbol dictinary.  Its calling sequence is:
   *
   *	     delete_symbols, dsb symbols
*/

dcl  arg_len fixed bin;				/* Length of symbol argument. */
dcl  arg_ptr ptr;					/* Pointer to symbol argument. */
dcl  argx fixed bin;				/* Index of current argument. */
dcl  del_exp_ptr ptr;				/* Pointer to expansion being deleted. */
dcl  del_sb_ptr ptr;				/* Pointer to symbol being deleted. */
dcl  del_spc_ptr ptr;                                       /* Pointer to special entry being deleted. */
dcl  dir_name char (168);				/* Directory containing symbol dict. */
dcl  ecode fixed bin (35);				/* Error table code. */
dcl  ent_name char (32);				/* Symbol dictionary. */
dcl  i fixed bin;
dcl  sbx fixed bin;					/* Symbol entry index. */
dcl  temp_code fixed bin (35);			/* Used when already hav non-zero ecode. */
dcl  num_args fixed bin;				/* Number of command arguments. */

dcl  argument char (arg_len) based (arg_ptr);		/* Command argument. */

dcl (addr, hbound, unspec) builtin;

dcl  error_table_$no_w_permission fixed bin(35) ext static;
dcl  error_table_$wrong_no_of_args fixed bin (35) external;

dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  speedtype_index_ entry (char (*), ptr, fixed bin, fixed bin (35));
dcl  speedtype_info_$name entry (char(168), char(32), fixed bin(35));
dcl  speedtype_info_$pointer entry (ptr, fixed bin (35));
dcl  speedtype_info_$set_bc entry (ptr, fixed bin (35));
dcl  speedtype_info_$shrink_table entry (ptr, fixed bin(35));
						/* 	*/
%include speedtype_symbols;
/* 	*/
/*	Begin delete_symbols command.
*/
	call speedtype_info_$pointer (ssd_ptr, ecode);
	if ecode ^= 0				/* Did we get a pointer to symbol dictionary? */
	     then do;				/* No. */
	     if ecode = error_table_$no_w_permission
		then do;
		call speedtype_info_$name (dir_name, ent_name, temp_code);
		call com_err_ (ecode, "Speedtype", "Attempting to convert ^a>^a to new version.", dir_name, ent_name);
	     end;
	     return;
	end;

	call cu_$arg_count (num_args);		/* Check calling sequence. */
	if num_args = 0
	then do;
	     call com_err_ (error_table_$wrong_no_of_args, "Speedtype",
		"Usage is: dsb symbols");
	     return;
	end;

	do argx = 1 to num_args;			/* Process each argument. */
	     call DELETE_SYMBOL;			/* It is a symbol to be deleted. */
	     if ecode ^= 0 then return;		/* Stop if any error. */
	end;

	call speedtype_info_$set_bc (ssd_ptr, ecode);

	return;
						/* 	*/
DELETE_SYMBOL: procedure;

/*	This procedure is called to get and delete one symbols.
   *	We will call speedtype_index_ to get the symbol entry index
   *	that corresponds to this symbol.
*/
	     call cu_$arg_ptr (argx, arg_ptr, arg_len, ecode);
	     if ecode ^= 0
	     then do;
		call com_err_ (ecode, "Speedtype", "Error getting symbol argument");
		return;
	     end;

	     call speedtype_index_ (argument, ssd_ptr, sbx, ecode);
	     if ecode ^= 0				/* Was it a valid symbol? */
	     then return;				/* No. */

	     if sbx = 0				/* Is it defined? */
	     then do;				/* No. */
		call com_err_ (0, "Speedtype", """^a"" not defined", argument);
		return;
	     end;

	     del_sb_ptr = addr (ssd.sb_tab (sbx));	/* Get pointer to symbol being deleted. */
	     del_exp_ptr = addr (ssd.exp_tab (sbx));	/* And corresponding expansion entry. */
	     del_spc_ptr = addr (ssd.spec_tab (sbx));     /* AND corresponding special entry. */
	     sb_ptr = addr (ssd.sb_tab (ssd.num_symbols)); /* Get pointer to last symbol entry. */
	     exp_ptr = addr (ssd.exp_tab (ssd.num_symbols)); /* And corresponding expansion entry. */
	     spc_ptr = addr (ssd.spec_tab (ssd.num_symbols)); /* AND corresponding special entry. */

	     del_sb_ptr -> sb.symbol = " ";		/* Blank deleted symbol. */

	     del_exp_ptr -> exp = exp;		/* Replace expansion with last expansion. */
	     del_spc_ptr -> spc = spc;                    /* Replace special with last special. */
	     del_sb_ptr -> sb = sb;			/* Now replace symbol. */

	     ssd.num_symbols = ssd.num_symbols - 1;	/* Last entry no longer defined. */

	     unspec (exp) = "0"b;			/* Zero last entries. */
	     unspec (spc) = "0"b;
	     unspec (sb) = "0"b;			/* This may gain back a page of quota. */

	     if mod (ssd.num_symbols, 100) < mod (ssd.num_symbols - 1, 100)
		then call speedtype_info_$shrink_table (ssd_ptr, ecode);

	end DELETE_SYMBOL;

     end delete_symbols;
