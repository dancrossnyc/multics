/* ******************************************************
   *                                                    *
   *                                                    *
   *    Copyright, (C) Honeywell Information Systems    *
   *    Inc., 1980.                                     *
   *                                                    *
   *                                                    *
   ****************************************************** */

list_symbols: lsb: procedure;

/*	This procedure implements the list_symbols and find_symbols commands.
   *	Created on 10/13/75 by Bill Silver as list_notescript.
   *	Changed on 06/07/77 by Bill Silver to list_symbols.
   *	Changed on 08/16/78 by R.J.C. Kissel to handle more than 253 symbols.
   *      Changed on 10/28/80 by Paul Benjamin for special suffixing.
   *
   *	The list_symbols/find_symbols commands will list one or several or all
   *	or the symbols/expansions in the currently defined Speedtype symbol dictionary.
   *	Their calling sequences are:
   *
   *	list_symbols, lsb  {symbols} {-control_args}
   *	find_symbols, fsb  {expansions}  {-control_args}
   *
   *	where:
   *
   *	     -lg, -long	Print suffix expansions.
   *	     -op, -option	Print option info.
   *	     -tt, -total	Print total number of defined symbols.
*/

dcl  sb_buf char (8);				/* Symbol buffer. */
dcl  exp_buf char (56);				/* Expansion buffer. */

/* Note above that 56 is really length(exp.expansion). */


dcl  arg_len fixed bin;				/* Length of symbol argument. */
dcl  arg_ptr ptr;					/* Pointer to symbol argument. */
dcl  argx fixed bin;				/* Index of current argument. */
dcl  dir_name char (168) aligned;			/* Directory name of symbol dictionary. */
dcl  ecode fixed bin (35);				/* Error table code. */
dcl  ent_name char (32) aligned;			/* Entry name of symbol dictionary. */
dcl  exp_buf_len fixed bin;				/* Length of expansion buffer. */
dcl  exp_buf_ptr ptr;				/* Pointer to expansion buffer. */
dcl  exp_len fixed bin;				/* Length of expansion. */
dcl  found_flag bit (1);				/* ON => expansion found. */
dcl  i fixed bin;
dcl  item_len fixed bin;				/* Length of current item. */
dcl  item_ptr ptr;					/* Pointer to current item. */
dcl  itemx fixed bin;				/* Index of current item. */
dcl  list_flag bit (1);				/* ON => symbol,  OFF => expansion. */
dcl  listx fixed bin;				/* Type of listing index. */
dcl  long_flag bit (1);				/* ON => list suffixes. */
dcl  sb_buf_ptr ptr;				/* Pointer to symbol buffer. */
dcl  sb_len fixed bin;				/* Length of symbol. */
dcl  sbx fixed bin;					/* Table index of symbol. */
dcl  num_args fixed bin;				/* Number of command arguments. */
dcl  num_items fixed bin;				/* Number of items specified. */
dcl  num_sb fixed bin;				/* Number of possible symbol entries. */
dcl  option_flag bit (1);				/* ON => list options. */
dcl  optx fixed bin;				/* Index of control arg option. */
dcl  string_len fixed bin;				/* Length of sorting strings. */
dcl  suffix_char char (1);				/* Suffix character. */
dcl  temp_code fixed bin (35);			/* Used when already have non-zero ecode. */
dcl  total_flag bit (1);				/* ON => list totals. */
dcl  items (16) char (56);				/* Temporary storage for items. */

/* Note above that 56 is really length(exp.expansion). */

dcl  item_lens (16) fixed bin;			/* Length of each item. */


/*		BASED DATA		*/

dcl  argument char (arg_len) based (arg_ptr);		/* Command argument. */

dcl  expansion char (exp_len) based (exp_buf_ptr);	/* Used to print expanded symbol. */

dcl  item char (item_len) based (item_ptr);		/* Used to reference first argument. */


/*		INTERNAL STATIC DATA	*/

dcl  brief_options (4) char (4)
     internal static init ("-lg", "-op", "-tt", "");

dcl  long_options (4) char (8)
     internal static init ("-long", "-option", "-total", "");

dcl  suffix_names (5) char (8)			/* List of knwon suffix names. */
     internal static init ("plural", "ed", "ing", "er", "ly");

dcl  escape_names (5) char (8)			/* List of known escape names. */
     internal static init ("pad", "perm", "temp", "trans", "space");

dcl  prefix_names (2) char (8)
     internal static init ("under", "upper");


/*		EXTERNAL DATA		*/

dcl (addr, hbound, index, length, substr) builtin;

dcl  error_table_$badopt fixed bin (35) external;
dcl  error_table_$no_w_permission fixed bin(35) ext static;

dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  speedtype_expand_ entry (ptr, fixed bin, ptr, fixed bin, fixed bin, fixed bin (35));
dcl  speedtype_info_$name entry (char (168) aligned, char (32) aligned, fixed bin (35));
dcl  speedtype_info_$pointer entry (ptr, fixed bin (35));
dcl  speedtype_index_ entry (char (*), ptr, fixed bin, fixed bin (35));
dcl  speedtype_sort_ entry (ptr, fixed bin, fixed bin);
						/* 	*/
%include speedtype_symbols;
/* 	*/
/*	Entry for list_symbols, lsb
*/
	list_flag = "1"b;
	goto COMMON;

/*	Entry for find_symbols, fsb
*/
find_symbols: fsb: entry;

	list_flag = "0"b;


COMMON:
	listx,
	     num_items = 0;				/* Initialize control variables. */
	long_flag,
	     option_flag,
	     total_flag = "0"b;

	sb_buf_ptr = addr (sb_buf);			/* Set up pointers and lengths for suffix listing. */
	exp_buf_ptr = addr (exp_buf);
	exp_buf_len = length (exp_buf);

	call cu_$arg_count (num_args);		/* Get number of arguments. */

	if num_args = 0				/* Are there any arguments? */
	then listx = 1;				/* No, sort and list all. */
	else do argx = 1 to num_args;			/* Process all the arguments. */
	     call PROCESS_ARGUMENT;			/* Process one argument. */
	     if ecode ^= 0 then return;
	end;

	call speedtype_info_$pointer (ssd_ptr, ecode);
	if ecode ^= 0				/* Is there a valid Speedtype symbol dictionary? */
	then do;
	     if ecode = error_table_$no_w_permission
		then do;
		call speedtype_info_$name (dir_name, ent_name, temp_code);
		call com_err_ (ecode, "Speedtype", "Attempting to convert ^a>^a to new version.", dir_name, ent_name);
	     end;
	     return;
	end;

	if option_flag then call LIST_OPTION;		/* If told to, list the options. */

	num_sb = ssd.num_symbols;			/* Make sure there are defined symbols. */
	if num_sb = 0
	then do;
	     call ioa_ ("No symbols defined");
	     return;
	end;

	if total_flag				/* If told to, print total. */
	then if num_sb = 1
	     then call ioa_ ("Total:  1 symbol");
	     else call ioa_ ("Total:  ^d symbols", num_sb);

	goto LISTX (listx);				/* Go do selected type of listing. */

LISTX (0):					/* List only the total or options. */
	return;

LISTX (1):					/* List all symbols or expansions. */
	call speedtype_info_$name (dir_name, ent_name, ecode);
	if ecode = 0
	then call ioa_ ("Speedtype symbol dictionary:  ^a>^a", dir_name, ent_name);
	if ^total_flag				/* List total if not already done. */
	then if num_sb = 1
	     then call ioa_ ("Total:  1 symbol");
	     else call ioa_ ("Total:  ^d symbols", num_sb);
	call LIST_SORT;				/* List in sorted order. */
	return;

LISTX (2):
	do itemx = 1 to num_items;			/* List all items specified. */
	     item_ptr = addr (items (itemx));		/* Set up reference to item string. */
	     item_len = item_lens (itemx);
	     if list_flag				/* List item. */
	     then call LIST_SYMBOL;			/* Item is a symbol. */
	     else call LIST_EXPANSION;		/* Item is a expansion. */
	end;
	return;
						/* 	*/
LIST_SORT: procedure;

/*	This procedure will list all symbol entries defined in the
   *	symbol dictionary currently in use.  They will be listed
   *	in ASCII collating sequence.
*/
dcl  vex fixed bin;					/* Local index. */
dcl  tseg_ptr (1) ptr;
dcl  vector_ptr ptr;

dcl 1 vector (num_sb) based (vector_ptr),		/* Structure for sorting. */
    2 string_ptr ptr,
    2 isbx fixed bin;				/* Rename to get around name-scope problem. */

dcl  get_temp_segments_ entry (char (*), (*)ptr, fixed bin (35));
dcl  release_temp_segments_ entry (char (*), (*)ptr, fixed bin (35));

dcl  cleanup condition;

	     call get_temp_segments_ ("list_symbols", tseg_ptr, ecode);
	     if ecode ^= 0
	     then do;
		call com_err_ (ecode, "Speedtype");
		return;
	     end;

	     on cleanup
		begin;
		if tseg_ptr (1) ^= null ()
		then call release_temp_segments_ ("list_symbols", tseg_ptr, ecode);
	     end;

	     vector_ptr = tseg_ptr (1);

	     do vex = 1 to num_sb;			/* Put each entry in the sorting list. */
		vector (vex).isbx = vex;		/* Save symbol index. */
		if list_flag			/* List => sort symbols, Find => expansions. */
		then vector (vex).string_ptr = addr (ssd.sb_tab (vex));
		else vector (vex).string_ptr = addr (ssd.exp_tab (vex).expansion);
	     end;

	     if list_flag				/* Now sort list of symbols or expansions. */
	     then string_len = 8;			/* Symbol length. */
	     else string_len = length (exp.expansion);	/* Expansion length. */

	     call speedtype_sort_ (vector_ptr, num_sb, string_len);

	     do vex = 1 to num_sb;			/* List each symbol in sorted order. */
		sbx = vector (vex).isbx;		/* Get symbol index. */
		call DISPLAY_SYMBOL;		/* List information about this symbol. */
	     end;

	     call release_temp_segments_ ("list_symbols", tseg_ptr, ecode);

	end LIST_SORT;
						/* 	*/
LIST_SYMBOL: procedure;

/*	This procedure is called to list just one symbol.
*/

	     call speedtype_index_ (item, ssd_ptr, sbx, ecode);
	     if ecode ^= 0				/* Is this a valid symbol? */
	     then return;				/* No. */

	     if sbx > 0				/* Is this symbol defined? */
	     then call DISPLAY_SYMBOL;		/* Yes, list it. */
	     else call com_err_ (0, "Speedtype", "Symbol ""^a"" not defined", item);

	end LIST_SYMBOL;








LIST_EXPANSION: procedure;

/*	This procedure will look for and list a specified expansion.
   *	If it finds it it will display information about the symbol that
   *	represents this expansion.  All symbols representing this expansion
   *	will be listed.
*/

	     found_flag = "0"b;			/* Assume expansion not found. */

	     do sbx = 1 to num_sb;			/* Search expansion table. */
		exp_ptr = addr (ssd.exp_tab (sbx));	/* Get pointer to expansion entry. */
		if exp.expansion = item		/* Is this the one we are looking for. */
		then do;				/* Yes, expansion matches. */
		     call DISPLAY_SYMBOL;		/* List this symbol. */
		     found_flag = "1"b;		/* Note that expansion found. */
		end;
	     end;

	     if ^found_flag				/* Tell user if expansion not found. */
	     then call com_err_ (0, "Speedtype", "Expansion ""^a"" not defined", item);

	end LIST_EXPANSION;
						/* 	*/
DISPLAY_SYMBOL: procedure;

/*	This procedure is called to display information about one symbol.
*/

	     sb_ptr = addr (ssd.sb_tab (sbx));		/* Get pointer to symbol entry. */
	     exp_ptr = addr (ssd.exp_tab (sbx));	/* Get pointer to expansion entry. */

	     if list_flag				/* List => symbol first. */
	     then call ioa_ ("^a^-^a", sb.symbol, exp.expansion);
	     else call ioa_ ("^a  -  ^a", exp.expansion, sb.symbol);

	     if ^long_flag				/* If no long flag then all done. */
	     then return;

	     sb_buf = sb.symbol;			/* Copy symbol into work buffer. */
	     sb_len = index (sb_buf, " ");		/* Get length of symbol. */
	     if sb_len = 0 then sb_len = length (sb_buf);

	     do i = 1 to hbound (exp.actionx, 1);	/* Generate expansion with each suffix. */
		if exp.actionx (i) ^= 0		/* Is this suffix defined? */
		then do;				/* Yes, add suffix and expand. */
		     suffix_char,			/* Save suffix character. */
			substr (sb_buf, sb_len, 1) = substr (ssd.suffixes, i, 1);
		     call speedtype_expand_ (sb_buf_ptr, sb_len, exp_buf_ptr, exp_buf_len, exp_len, ecode);
		     if ecode ^= 0
		     then do;
			call com_err_ (ecode, "Speedtype", "Error expanding ^a", sb_buf);
			return;
		     end;				/* Next line lists suffix and expansion. */
		     call ioa_ ("^6x(^a) ^a", suffix_char, expansion);
		end;
	     end;
	     call ioa_ (" ");			/* Skip a line. */

	end DISPLAY_SYMBOL;
						/* 	*/
LIST_OPTION: procedure;

/*	This procedure is called to list the options found in the
   *	header of the current Speedtype symbol dictionary.
*/
	     call speedtype_info_$name (dir_name, ent_name, ecode);
	     if ecode = 0
	     then call ioa_ ("^/Options for Speedtype symbol dictionary:  ^a>^a", dir_name, ent_name);

	     call ioa_ ("Speedtype Version (^d)", ssd.version);

	     call ioa_ ("Suffixes:");
	     do i = 1 to hbound (suffix_names, 1);	/* List each suffix character. */
		call ioa_ ("^5x^10a""^a""", suffix_names (i), substr (ssd.suffixes, i, 1));
	     end;

	     call ioa_ ("Prefixes:");
	     do i = 1 to hbound (prefix_names, 1);	/* List each prefix character. */
		call ioa_ ("^5x^10a""^a""", prefix_names (i), substr (ssd.prefixes, i, 1));
	     end;

	     call ioa_ ("Escapes:");
	     do i = 1 to hbound (escape_names, 1);	/* List each escape character. */
		call ioa_ ("^5x^10a""^a""", escape_names (i), substr (ssd.escapes, i, 1));
	     end;

	     delim_ptr = addr (ssd.delimiters);
	     call ioa_ ("Delimiters:  ""^a""", delim_chars.others);

	end LIST_OPTION;
						/* 	*/
PROCESS_ARGUMENT: procedure;

/*	This procedure is called to process one argument.
*/
	     call cu_$arg_ptr (argx, arg_ptr, arg_len, ecode);
	     if ecode ^= 0
	     then do;
		call com_err_ (ecode, "Speedtype", "Error getting argument ^d", argx);
		return;
	     end;

	     if substr (argument, 1, 1) ^= "-"		/* If argument is not a control argument. */
	     then do;				/* It is a symbol or an expansion item. */
		listx = 2;			/* List items. */
		if num_items = hbound (items, 1)	/* Too many items? */
		then do;				/* Yes, reject this item. */
		     call com_err_ (0, "Speedtype", "Cannot list more than ^d symbols.", num_items);
		     return;
		end;
		num_items = num_items + 1;		/* Another item in the list. */
		items (num_items) = argument;		/* Add item to list. */
		item_lens (num_items) = arg_len;	/* Save length of item. */
		return;
	     end;

	     do optx = 1 to hbound (long_options, 1);	/* See if this a valid control argument. */
		if (argument = brief_options (optx)) |
		(argument = long_options (optx))
		then goto OPTION (optx);		/* Found it, go process it. */
	     end;

	     ecode = error_table_$badopt;
	     call com_err_ (ecode, "Speedtype", "Argument ^a unknown", argument);
	     return;

OPTION (1):					/* "-lg" or "-long" */
	     long_flag = "1"b;
	     if listx = 0 then listx = 1;		/* "-long" => list all by default. */
	     return;

OPTION (2):					/* "-op" or "-option" */
	     option_flag = "1"b;
	     return;

OPTION (3):					/* "-tt" or "-total" */
	     total_flag = "1"b;
	     return;

	end PROCESS_ARGUMENT;

     end list_symbols;
