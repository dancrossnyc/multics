/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gfms_print_names_: proc (n);

/* Sort and print file names (n names)

   Author: Dave Ward	10/10/80
   Change: Dave Ward	10/15/80 totals.
   Change: Dave Ward	10/16/80 separate file name and catalog.
   Change: Dave Ward	10/30/80 reel, date time header.
   Change: Dave Ward	11/11/80 bug in sort comparison routine.
   Change: Dave Ward	11/18/80 periods in attributes and defect display.
*/
dcl  n                        fixed bin parm;
	j = 1;					/* Index to first start entry. */
	do i = 1 to n;				/* Prepare index to file name entries. */
	     fnep = addr (start_entry (j));		/* Locate next file name entry. */
	     sa (i) = j;				/* j => index to entry. */
	     j = j + size (file_name_entry);
	end;
	if prfn then do;
	     call SORT ((n), sa, cmp);

/* Print in sorted order. */
	     if dump then call ioa_$nnl ("^|");		/* New page if dumping or printing tree. */
	     call date_time_ (clock_ (), dt);
	     call ioa_ (
		"gcos_fms  (version ^a)"
		||"^/tape reel ^a  ^a"
		, version
		, file_serial_num
		, dt
		);
	     call ioa_ (
		"^/"				/* Skip line after header. */
		|| "^23tS sequential file"
		||"^/^23tR random"
		||"^/^23tA ascii"
		||"^/^23tI I-D-S"
		||"^/"
		||"              maximum v|     user        defect       file" /* 1st header line. */
		||"^/"				/* Skip a line. */
		||"      llinks   llinks mode  information code         name         catalog" /* 2nd header line. */
		);
	     print_name, last_name = " ";
	     do i = 1 to n;
		fnep = addr (start_entry (sa (i)));	/* Located next file name entry in sorted order. */
		if file_name_entry.name = last_name then print_name = " ";
		else print_name, last_name = file_name_entry.name;
		l = length (file_name_entry.defective);
		call ioa_ (
		     "^4i."			/* name count. */
		     ||"^7i"			/* current size. */
		     ||"^[ no limit^s^;^9i^]"		/* max size. */
		     ||"^1x^4a"			/* mode */
		     ||"^1x^[^12.3b^;^6( .^)^s^]"	/* user info. */
		     ||"^1x^[^va^;.^s^s^]^va"		/* defective. */
		     ||"^1x^12a"			/* file name. */
		     ||"^1x^a"			/* catalog */
		     , i
		     , file_name_entry.llinks
		     , file_name_entry.attr.max_size_llinks = 0, file_name_entry.attr.max_size_llinks
		     , md (file_name_entry.attr.mode)
		     , file_name_entry.attr.present, file_name_entry.attr.value
		     , l>0, l, file_name_entry.defective, 12-max (1, l), substr ((6)" .", 1, 12-max (1, l))
		     , print_name
		     , file_name_entry.catalog
		     );
	     end;
	     if tll then
		call ioa_ (
		"TOTAL^7i"
		, total_llinks
		);
	end;
	else
	if tll then
	     call ioa_ (
	     "^6i llinks ^6i files."
	     , total_llinks
	     , n
	     );
	return;
%page;
cmp:	proc (i1, i2)returns (fixed bin);

/* Compare 2 file name entries to determine sorted order. */
dcl  i1                       fixed bin parm;
dcl  i2                       fixed bin parm;
	     p1 = addr (start_entry (i1));
	     p2 = addr (start_entry (i2));
	     if f1.name < f2.name then return (0);
	     if f1.name > f2.name then return (1);
	     if f1.catalog < f2.catalog then return (0);
	     if f1.catalog > f2.catalog then return (1);
	     if f1.llinks < f2.llinks then return (0);
	     if f1.llinks > f2.llinks then return (1);
	     return (0);
dcl  p1                       ptr;
dcl  p2                       ptr;

dcl 1 f1			aligned based(p1)
,     3 llinks		fixed bin(24)	/* llinks in file. */
,     3 attr		like description_tree.attributes
,     3 char_length				/* Lengths of variable. */
,       4 defl		fixed bin
,       4 naml		fixed bin
,       4 catl		fixed bin
,     3 defective		char(f1.char_length.defl)unal
,     3 name		char(f1.char_length.naml)unal
,     3 catalog		char(f1.char_length.catl)unal
;

dcl 1 f2			aligned based(p2)
,     3 llinks		fixed bin(24)	/* llinks in file. */
,     3 attr		like description_tree.attributes
,     3 char_length				/* Lengths of variable. */
,       4 defl		fixed bin
,       4 naml		fixed bin
,       4 catl		fixed bin
,     3 defective		char(f2.char_length.defl)unal
,     3 name		char(f2.char_length.naml)unal
,     3 catalog		char(f2.char_length.catl)unal
;
	end cmp;
%page;
md:	proc (m)returns (char (4));

/* Evaluate mode m. */
dcl  m                        bit(4)unal parm;
	     r = " ";
	     if m & "1000"b then substr (r, 1, 1) = "S";	/* Sequential. */
	     if m & "0100"b then substr (r, 2, 1) = "R";	/* Random. */
	     if m & "0010"b then substr (r, 3, 1) = "A";	/* ASCII. */
	     if m & "0001"b then substr (r, 4, 1) = "I";	/* IDS. */
	     return (r);

dcl  r                        char(4);
	end md;
%page;
SORT:	proc (len, lst, cmp);

/*
   _l_s_t, of length _l_e_n, is the ordering of the
   data to be sorted. Using the comparison procedure
   _c_m_p, return _l_s_t ordered according to the comparisons.

   _c_m_p has two input parameters. These are two entries from
   the _l_s_t that point to the next two data elements to
   be sorted. If the data element pointed to by the first parameter
   is "next" then _c_m_p returns a zero, 0, else returns a one, 1.

   Author: Dave Ward	06/16/80
*/
dcl  cmp                      entry(fixed bin,fixed bin) returns(fixed bin) parameter;
dcl  len                      fixed bin parameter;
dcl  lst                      (*) fixed bin parameter;

/*
   calculate the lengths of
   lists and their start pointers
   in a linear set.
*/
	     if len<2 then return;
	     t = 0;
	     l = len;
	     do n = 1 by 1 while (l>1);
		s (n) = t;			/* start of the next list. */
		if mod (l, 2) = 1 then l = l+1;	/* make the length even. */
		t = t+l;				/* accumulate the lengths. */
		l = l/2;				/* next list is 1/2 the length of the present list. */
	     end;
	     n = n-1;

	     begin;				/* Local block. */
/* pointers to input list. */
		do i = 1 to len;
		     m (i) = i;
		end;

/* fill in all lists. */
		do i = 2 to n;
		     lft = s (i-1);
		     rit = s (i) ;
		     do j = 1 by 2 to (rit - lft);
			x = lft+j;
			v1 = m (x);
			v2 = m (x+1);
			if v2>0 then
			     if cmp (lst (v1), lst (v2)) = 1 then v1 = v2;
			rit = rit+1;
			m (rit) = v1;
		     end;
		end;


/* calculate the list of pointers in o */
		y = s (n)+1;
		do i = 1 to len;
		     v1 = m (y);
		     v2 = m (y+1);
		     if (v1 = 0) & (v2 = 0) then i = len; /* End "i" loop. */
		     else do;
			if v1 = 0 then v1 = v2;
			else if v2>0 then
			     if cmp (lst (v1), lst (v2)) = 1 then v1 = v2;
			o (i) = lst (v1);		/* next output value. */
			m (v1) = 0;		/* delete the last winner. */
			do j = 2 to n;		/* get the next winner. */
			     lft = s (j-1);
			     if mod (v1, 2) = 1 then v2 = v1+1; else v2 = v1-1;
			     x = (v1+1)/2;
			     v1 = m (v1+lft);
			     v2 = m (v2+lft);
			     if v1 = 0 then v1 = v2;
			     else if v2>0 then
				if cmp (lst (v1), lst (v2)) = 1 then v1 = v2;
			     m (x+s (j)) = v1;
			     v1 = x;
			end;
		     end;
		end;
		i = i-1;
		len = i;				/* output the length of the output list. */
		do i = 1 to i;			/* copy over the output list. */
		     lst (i) = o (i);
		end;
						/* Declarations for local block. */
dcl  m                        (t) fixed bin init((t)0);
dcl  o                        (len) fixed bin;
	     end;					/* Local block. */

						/* Global declarations. */
dcl  i                        fixed bin;
dcl  j                        fixed bin;
dcl  l                        fixed bin;
dcl  lft                      fixed bin;
dcl  mod                      builtin;
dcl  n                        fixed bin;
dcl  rit                      fixed bin;
dcl  s                        (36)fixed bin	/* Indices to "bottoms" of lists. */;
dcl  t                        fixed bin;
dcl  v1                       fixed bin;
dcl  v2                       fixed bin;
dcl  x                        fixed bin;
dcl  y                        fixed bin;
	end SORT;
%page;
/*   Variables for gfms_print_names_:	*/
/*   IDENTIFIER		ATTRIBUTES	*/
dcl  clock_                   entry() returns(fixed bin(71));
dcl  date_time_               entry (fixed bin(71), char(*));
dcl  dt                       char(24);
dcl  i                        fixed bin;
dcl  ioa_                     entry() options(variable);
dcl  ioa_$nnl                 entry() options(variable);
dcl  j                        fixed bin;
dcl  l                        fixed bin;
dcl  last_name                char(12);
dcl  print_name               char(12);
dcl  sa                       (n)fixed bin;
%page;
%include gfms_file_name_list;
%page;
%include gfms_ext;
%page;
%include gfms_description_tree;
%page;
%include gfms_version;
     end gfms_print_names_;
