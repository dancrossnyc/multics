/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gfms_trailer_label_: proc ()returns (bit (1));

/* Process the tape trailer label.
   Return "1"b if this is end of file (EOF) label
   versus end of reel (EOR) label.

   Author: Dave Ward	10/17/80
   Changed: Ron Barstad  84-11-21  Fixed processing of multiple tape saves.
*/

	call iox_$read_record (			/* Read the trailer record. */
	     cbp					/* (input) pointer to control block. */
	     , addr (tape_label)			/* (input) record buffer. */
	     , size (tape_label)*4			/* (input) buffer length in bytes. */
	     , nbr				/* (output) number of bytes read. */
	     , code				/* (output) I/O system status. */
	     );
	if code ^= 0 then do;
	     call com_err_ (
		code
		, "gfms_trailer_label_"
		, "Attempting to read tape trailer label file."
		||"^/Tape status ^4.3b"
		||"^/buffer length ^i (bytes)."
		||"^/bytes read ^i."
		||"^/attach description ""^a"""
		, gfms_tape_status_ (cbp)
		, size (tape_label)*4
		, nbr
		, attach_description
		);
	     signal cond (gfms_fail);
	end;

	if end_label = "202546262020"b3 then		/* " EOF  " bcd. */
	     r = "1"b;				/* EOF */
	else
	if end_label = "202546512020"b3 then		/* " EOR  " bcd */
	     r = "0"b;				/* EOR */
	else do;					/* Neither EOF or EOR. */
	     call com_err_ (
		0
		, "gfms_trailer_label_"
		, "Trailer label, ""^6a"", not EOF or EOR."
		, gfms_ascii_ ((end_label))
		);
	     call gfms_dump_rec_ (
		addr (tape_label)
		, divide (nbr+3, 4, 17)
		);
	     signal cond (gfms_fail);
	end;

	call ioa ("^|TRAILER LABEL INFORMATION:");
	call ioa ("end_label......... ^a", gfms_ascii_ ((end_label)));
	if r then
	     reel_serial_num = "NOREEL";
	else do;
	     call ioa ("next_reel_serial.. ^a", gfms_ascii_ ((next_reel_serial)));
	     reel_serial_num = gfms_ascii_ ((next_reel_serial));
	     substr (reel_serial_num, 1, 1) = " ";  /* strip off the "#" */
	     sequence_pic = decimal (reel_sequence_num, 6) + 1;
	     reel_sequence_num = sequence_pic;
	     if (gfms_close_ ()) then signal cond (gfms_fail);
	     call gfms_detach_ ();
	     attach_description = before (attach_description, " ") || reel_serial_num || after (after (attach_description, " "), " ");

	end;
	return (r);
%page;
/*  Variables for gfms_trailer_label_:			*/
/*   IDENTIFIER		ATTRIBUTES	*/
dcl  code                     fixed bin(35);
dcl  com_err_                 entry() options(variable);
dcl  divide                   builtin;
dcl  gfms_ascii_              entry(bit(*))returns(char(*));
dcl  gfms_close_              entry() returns(bit(1));
dcl  gfms_detach_             entry options(variable);
dcl  gfms_dump_rec_           entry (ptr, fixed bin);
dcl  gfms_fail                condition ext;
dcl  gfms_tape_status_        entry (ptr) returns(bit(12));
dcl  ioa_                     entry() options(variable);
dcl  iox_$control             entry (ptr, char(*), ptr, fixed bin(35));
dcl  iox_$read_record         entry (ptr, ptr, fixed bin(21), fixed bin(21), fixed bin(35));
dcl  nbr                      fixed bin(21);
dcl  r                        bit(1);
dcl  sequence_pic             pic "zz9999";
dcl  size                     builtin;

/* See DD07 (April 1974) FILE AND RECORD CONTROL
   Page 11-3 trailer label format.
*/
dcl 1 tape_label		aligned
,     3 end_label		bit(36)
,     3 block_count		bit(36)
,     3 arbitrary		(3:13)bit(36)
,     3 next_reel_serial	bit(36)
;
%page;
%include gfms_ext;
     end gfms_trailer_label_;
