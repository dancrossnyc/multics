/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gfms_dump_rec_: proc (p, n);

/* Display catalog record BCD and octal.

   Author: Dave Ward	11/05/80
   Change: Dave Ward	11/06/80 number of words parameter.
   Change: Dave Ward	11/25/80 notify zero words requested.
*/
dcl  n                        fixed bin parm;
dcl  p                        ptr parm;
	if n<1 then do;
	     call ioa_$ioa_switch_nnl (
		iox_$error_output
		, "ZERO WORDS READ. NO DUMP."
		);
	     return;
	end;
	f = n-1;					/* upper bound 0,1,...,n-1. */
	call ioa_$ioa_switch_nnl (iox_$error_output, "^5x");
	do i = 0 to 7;				/* Print header. */
	     call ioa_$ioa_switch_nnl (iox_$error_output, "^13x^i", i);
	end;
	call ioa_$ioa_switch_nnl (iox_$error_output, "^/");
	do i = 0 by 8 to f;
	     if i>0 then
		if last_line = current_line then do;
		     if first then do;
			first = "0"b;
			call ioa_$ioa_switch_nnl (iox_$error_output, "^6x^12(=^)");
			call ioa_$ioa_switch_nnl (iox_$error_output, "^/");
		     end;
		     goto next_line;
		end;
	     first = "1"b;
	     call ioa_$ioa_switch_nnl (iox_$error_output, "^4i.", i);
	     do j = i to (i+8-1) while (j <= f);	/* Print bcd. */
		call ioa_$ioa_switch_nnl (iox_$error_output, "^1x^13a", bcd (w (j)));
	     end;
	     call ioa_$ioa_switch_nnl (iox_$error_output, "^/^5x");
	     do j = i to (i+8-1) while (j <= f);	/* Print octal. */
		call ioa_$ioa_switch_nnl (iox_$error_output, "^1x^6.3b'^6.3b", wl (j), wr (j));
	     end;
	     call ioa_$ioa_switch_nnl (iox_$error_output, "^/");
next_line:     ;
	end;
	return;
%page;
bcd:	proc (w)returns (char (13));

/* Convert 6 bcd characters to ascii, convert blanks to
   underlines (bcd has no underline character, so this
   distinguishes bcd blanks). Return the 6 characters as a 2
   strings of 6 characters each, space in middle, each input
   character preceeded by a space.
*/
dcl  w                        bit(36)aligned parm;
	     string (s) = gfms_ascii_ ((w));		/* Convert bcd to ascii. */
	     string (s) = translate (string (s), "_", " "); /* Convert spaces to underlines. */
	     string (r) = " ";			/* Blank the result. */
	     do i = 0 to 5;
		if i<3 then k = 1;
		else k = 2;
		r ((i*2)+k) = s (i);		/* Distribute to every other character of the output. */
	     end;
	     return (string (r));

dcl  i                        fixed bin;
dcl  k                        fixed bin;
dcl  r                        (0:12)char(1)unal;
dcl  s                        (0:5)char(1)unal;
	end bcd;
%page;
/*   Variables for gfms_dump_rec_:		*/
/*   IDENTIFIER		ATTRIBUTES	*/
dcl  current_line             bit(8*36)aligned based(addr(w(i)));
dcl  f                        fixed bin;
dcl  first                    bit(1);
dcl  gfms_ascii_              entry (bit(*)) returns(char(*));
dcl  i                        fixed bin;
dcl  ioa_$ioa_switch_nnl      entry() options(variable);
dcl  iox_$error_output        ptr ext static;
dcl  j                        fixed bin;
dcl  last_line                bit(8*36)aligned based(addr(w(i-8)));
dcl  w                        (0:f)bit(36)aligned based(p);

dcl 1 w2			(0:f)aligned based(p)
,     2 wl		bit(18)unal
,     2 wr		bit(18)unal
;
     end gfms_dump_rec_;
