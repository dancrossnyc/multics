/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gfms_smc_records_: proc ();

/* Display SMC records information.

   Author: Dave Ward	10/02/80
   Change: Dave Ward	10/20/80 verify EOF record.
   Change: Dave Ward	11/05/80 add type 6 cat info to tree.
   Change: Dave Ward	11/08/80 hash catalog.
   Change: Ron Barstad        11/24/82 fix bug preventing unload of master save
	                             --must ignore type "77"b3  records
*/

	call ioa ("^|SMC RECORDS INFORMATION:");
	tc = 0;					/* Total count of catalog records. */
	do i = 1 by 1 while (get_rec ());
	     call ioa (
		"^6i. (block^6i)  size^6i  record-size^6i"
		, i
		, block_serial_number
		, block_size
		, record_size
		);

/* Display smc records. */
	     rl = nw-1;				/* Remaining length (words) for catalog records. */
	     if mod (rl, size (gfms_catrec_6)) ^= 0 then do;
		call com_err_ (
		     0
		     , "gfms_smc_records_"
		     , "Not modulo (^i) number of words for catalog records (^i)"
		     , size (gfms_catrec_6)
		     , rl
		     );
fail:		;
		signal cond (gfms_fail);
	     end;

/* Set pointer to initial catalog record. */
	     cat_ptr = addr (type6_records);

	     do while (rl>0);
		tc = tc+1;			/* Catalog record count. */
		call ioa ("^8x[^6i] type 6 catalog.", tc);
		if gfms_catrec_6.type = "77"b3 then goto cont;
		if gfms_catrec_6.type ^= "06"b3 then do;
		     call com_err_ (
			0
			, "gfms_smc_records_"
			, "SMC NOT TYPE 6 RECORD"
			);
		     call gfms_dump_rec_ (cat_ptr, 64);
		     goto fail;
		end;

		do j = 1 to hbound (smc_entry, 1);	/* Process type 6 catalog smc entries. */
		     if (smc_name (j) = "0"b) | (smc_name (j) = (12)"20"b3) then goto cont;
		     call cat_6_entry (
			j
			, gfms_catrec_6.dupl_sector_no
			, addr (gfms_catrec_6.smc_entry (j))
			);
		end;
cont:		;
		if j = 1 then call ioa ("^17xNO ENTRIES.");

		rl = rl - size (gfms_catrec_6);
		if rl > 0 then
		     cat_ptr = addrel (cat_ptr, size (gfms_catrec_6));
	     end;
	end;
	return;
%page;
cat_6_entry: proc (j, ps, smcep);

/* Provide tree description information from type 6 catalog
   smc entry. "j" is index to entry. "ps" is parent sector,
   "smcep" locates smc entry.
*/
dcl  j                        fixed bin parm;
dcl  ps                       fixed bin(18)unsigned unal parm;
dcl  smcep                    ptr parm;
	     n = rtrim (gfms_ascii_ ((smce.smc_name)));
	     call ioa (
		"^17x^1i. ^12a ^[^^on-device^; on-device^] cat-0-sector ^6i"
		||"^/^20xparent ^6i cat-llinks ^6i allowed ^2.3b llinks-in-use ^6i max-llinks ^[unlimited^s^;^6i^]"
/* line 1 values. */
		, j
		, n
		, smce.umc_on_device
		, smce.umc_llink*5			/* sector of child (type 0 catalog). */
/* line 2 values. */
		, ps				/* sector or parent. */
		, smce.catalog_llinks
		, string (smce.smc_perms)
		, smce.llinks_in_use
		, smce.llinks_allowed = 0
		, smce.llinks_allowed
		);

	     call gfms_hash_cat_ (
		smce.smc_name			/* (input) name BCD. */
		, n				/* (input) name ASCII. */
		, "1"b				/* (input) entry is catalog. */
		, ps				/* (input) sector of parent. */
		, smce.umc_llink*5			/* (input) sector of child. */
		);
	     return;

dcl  n                        char(12)var;
dcl 1 smce aligned based(smcep) like gfms_catrec_6.smc_entry;
	end cat_6_entry;
%page;
get_rec:	proc returns (bit (1));

/* Obtain the next SMC record from tape.
   Return "0"b when record read is the EOF record
   (position past the EOF record).
   Return "1"b when SMC record read.
*/
	     call iox_$read_record (
		cbp				/* (input) pointer to control block. */
		, addr (smc_space)			/* (input) record buffer. */
		, size (smc_space)*4		/* (input) buffer length in bytes. */
		, nbr				/* (output) number of bytes read. */
		, code				/* (output) I/O system status. */
		);
	     if code ^= 0 then
		if code = error_table_$end_of_info then
		     if gfms_end_of_input_ (
		     addr (smc_space)		/* (input) pointer to input buffer. */
		     , size (smc_space)*4		/* (input) length of buffer (bytes). */
		     , nbr			/* (input/output) current number bytes in buffer. */
		     ) then do;			/* No more tape input. */
			call com_err_ (
			     0
			     , "gfms_substructure_records_"
			     , "End of tape input reached in SMC records."
			     );
			signal cond (gfms_fail);
		     end;
		     else goto cont;		/* Next reel in process. */
		else
		if code ^= error_table_$long_record then do;
		     call com_err_ (
			code
			, "gfms_smc_records_"
			, "Attempting to read smc record."
			||"^/Tape status ^4.3b"
			||"^/buffer length ^i (bytes)."
			||"^/bytes read ^i."
			||"^/attach description ""^a"""
			, gfms_tape_status_ (cbp)
			, size (smc_space)*4
			, nbr
			, attach_description
			);
fail:		     ;
		     signal cond (gfms_fail);
		end;

/* Assure length in words is conistent. */
cont:	     ;
	     if mod (nbr, 4) ^= 0 then
		call com_err_ (
		0
		, "gfms_smc_records_"
		, "Bytes read (^i) not word modulo, will truncate to word and continue."
		, nbr
		);
	     nwr = divide (nbr, 4, 17);		/* Number of words read. */
	     nw = nwr-1;				/* upper bound of smc structure. */
	     if nw < 2 then do;
		call com_err_ (
		     0
		     , "gfms_smc_records_"
		     , "Record ^i bytes long (<2 words)"
		     , nbr
		     );
		goto fail;
	     end;

/* Determine if EOF record reached. */
	     if smc.eof_mark = "170017"b3 then do;
		p = addr (smc_space);
		if p -> k65 ^= 65
		| p -> k64 ^= 64
		| p -> EOF_number ^= 1 then
		     call com_err_ (
		     0
		     , "gfms_smc_records_"
		     , "Faulty EOF record. Continuing."
		     ||"^/1st 4 words:^4( ^12.3b^)"
		     , unspec (p -> EOF_record.word0)
		     , unspec (p -> EOF_record.word1)
		     , unspec (p -> EOF_record.word2)
		     , unspec (p -> EOF_record.word3)
		     );
		call ioa (
		     "^6i. (block^6i) EOF record."
		     , i
		     , p -> EOF_record.bsn
		     );
		return ("0"b);
	     end;
	     return ("1"b);

dcl  p                        ptr;
%include gfms_EOF_record;
	end get_rec;
%page;
/*  Variables for gfms_smc_records_:			*/
/*   IDENTIFIER		ATTRIBUTES	*/
dcl  addr                     builtin;
dcl  addrel                   builtin;
dcl  cat_ptr                  ptr init(null());
dcl  code                     fixed bin(35);
dcl  com_err_                 entry() options(variable);
dcl  divide                   builtin;
dcl  error_table_$end_of_info fixed bin(35) ext static;
dcl  error_table_$long_record fixed bin(35) ext static;
dcl  gfms_ascii_              entry(bit(*))returns(char(*));
dcl  gfms_dump_rec_           entry (ptr,fixed bin);
dcl  gfms_end_of_input_       entry (ptr, fixed bin(21), fixed bin(21)) returns(bit(1));
dcl  gfms_fail                condition ext;
dcl  gfms_hash_cat_           entry (bit(72) aligned, char(12) var, bit(1), uns fixed bin(18) unal, uns fixed bin(18));
dcl  gfms_tape_status_        entry (ptr) returns(bit(12));
dcl  hbound                   builtin;
dcl  i                        fixed bin;
dcl  iox_$read_record         entry (ptr, ptr, fixed bin(21), fixed bin(21), fixed bin(35));
dcl  j                        fixed bin;
dcl  mod                      builtin;
dcl  nbr                      fixed bin(21);
dcl  null                     builtin;
dcl  nw                       fixed bin;
dcl  nwr                      fixed bin;
dcl  rl                       fixed bin;
dcl  rtrim                    builtin;
dcl  size                     builtin;
dcl  smc_space                (3842)bit(36)aligned;
dcl  string                   builtin;
dcl  tc                       fixed bin;
dcl  unspec                   builtin;
dcl  w                        (0:63)bit(36)aligned based(cat_ptr);
%page;
/* See DD14, Rev 1 (June 1976) SYSTEM TABLES
   Page 16-25 SMC RECORDS (<=3842 words)
*/
dcl 1 smc			aligned based(addr(smc_space))
,     3 word0
,       4 block_serial_number	fixed bin(18)unsigned unal
,       4 block_size	fixed bin(18)unsigned unal
,     3 word1
,       4 record_size	fixed bin(18)unsigned unal
,       4 eof_mark		bit(18)unal
,     3 words2_3841
,       4 type6_records	(2:nw)bit(36)
;
%page;
%include gfms_catrec_6;
%page;
%include gfms_ext;
     end gfms_smc_records_;
