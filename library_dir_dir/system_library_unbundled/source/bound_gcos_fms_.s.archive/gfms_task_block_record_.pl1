/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gfms_task_block_record_: proc (ms);

/* Display task block record information.
   "ms" is set to "1"b if tape is a master save,
   or "0"b if a user save (any other type of save is
   reported and processing discontinued).

   Author: Dave Ward	10/01/80
   Change: Dave Ward	10/03/80 compensated for words5_6 not 0 as advertised.
*/
dcl  ms                       bit(1)parm;
	call iox_$read_record (
	     cbp					/* (input) pointer to control block. */
	     , addr (tbr_space)			/* (input) record buffer. */
	     , size (tbr_space)*4			/* (input) buffer length in bytes. */
	     , nbr				/* (output) number of bytes read. */
	     , code				/* (output) I/O system status. */
	     );
	if code ^= 0 then
	     if code ^= error_table_$long_record then do;
		call com_err_ (
		     code
		     , "gfms_task_block_record_"
		     , "Attempting to read task block record."
		     ||"^/Tape status ^4.3b"
		     ||"^/buffer length ^i (bytes)."
		     ||"^/bytes read ^i."
		     ||"^/attach description ""^a"""
		     , gfms_tape_status_ (cbp)
		     , size (tbr_space)*4
		     , nbr
		     , attach_description
		     );
fail:		;
		signal cond (gfms_fail);
	     end;

/* Assure length in words is conistent. */
	if mod (nbr, 4) ^= 0 then
	     call com_err_ (
	     0
	     , "gfms_task_block_record_"
	     , "Bytes read (^i) not word modulo, will truncate to word and continue."
	     , nbr
	     );
	nwr = divide (nbr, 4, 17);			/* Number of words read. */
	nw = nwr-1;				/* upper bound of tbr structure. */

	call ioa ("^|TASK BLOCK RECORD INFORMATION (block 2):");
	if word0.b00_17 = 2				/* Must be block 2 of record. */
	& word1.b18_35 = "0"b
	& word2.savhdr = "622165302451"b3 then do;	/* bcd SAVHDR */
	     call ioa ("block_size^4(.^) ^i", block_size);
	     call ioa ("record_size^3(.^) ^i", record_size);
	     call ioa ("date^10(.^) ^a", gfms_date_ (date));
	     call ioa ("clock_pulses^2(.^) ^i", clock_pulses);
	     rw = nwr - 7;				/* Words remaining for copy of task block. */

	     sqll = rw - 12 - 1;			/* Words remaining for qualifier list. */

/* Verify "some" FACT fields. */
	     if task_header = 1
	     & word0.b18_35 = "0"b
	     & type_code = 10
	     & serial_num = (10)"1"b3
	     & subtask_header = 2
	     & word3.b18_35 = "0"b
	     & report_code = 33
	     & file_code = "4754"b3			/* bcd "P*" */
	     & last_word.b00_17 = (6)"7"b3
	     & last_word.b18_35 = "0"b then do;		/* FACT constants as expected. */
		call ioa (" FACT overlay info:");
		if subtask_code = 1 then do;
		     ms = "1"b;			/* Master save. */
		     call ioa (" MASTER SAVE");
		end;
		else
		if subtask_code = 2 then do;
		     ms = "0"b;			/* User save. */
		     call ioa (" USER SAVE");
		end;
		else do;
		     call ioa (" Subtask code ^i.^/  TYPE NOT PROCESSED BY THIS COMMAND, TERMINATING."
			, subtask_code
			);
		     goto fail;
		end;
		call ioa (" subtask options ^6.3b", string (subtask_options));
		call ioa (" user ^a", gfms_ascii_ ((user_name)));
		call ioa (" qualifier list:");
		i = 1;
		do while (i <= sqll);
		     if subtask_qualifier_list (i).b00_17 = 3 then do; /* => subtask qualifier. */
			j = subtask_qualifier_list (i).b18_35; /* Qualifier code. */
			if (j<1) | (j>10) then do;
			     call ioa ("    QUALIFIER CODE (^i) OUT OF RANGE 1 to 10.", j);
			     goto dump_fact;
			end;
			call ioa_nnl ("^2x[^4i]^1x", i);
			i = i+1;
			goto stq (j);

stq (01):			;
			call ioa ("(01) User Save.");
			do while (i <= sqll);
			     if subtask_word (i) = (12)"7"b3 then do;
				i = i+1;
				goto cont;
			     end;
			     call ioa (
				"^14x^6.3b ^6.3b"
				, substr (subtask_word (i), 01, 18)
				, substr (subtask_word (i), 19, 18)
				);
			     i = i+1;
			end;

off_end:			;
			call ioa ("EXCEEDED END OF SUBTASK LIST (^i entries)", sqll);
			goto dump_fact;

stq (02):			;
			call ioa ("(02) Master Save DON'T DO or DO ONLY names");
display_names:		;
			do while (i <= sqll);
			     if subtask_word (i) = (12)"7"b3 then do;
				i = i+1;
				goto cont;
			     end;
			     call ioa ("^14x^a", gfms_ascii_ (Name));
			     i = i+2;
			end;
			goto off_end;

stq (03):			;
			call ioa ("(03) Device Names");
			do while (i <= sqll);
			     if subtask_word (i) = (12)"7"b3 then do;
				i = i+1;
				goto cont;
			     end;
			     call ioa ("^14x^a", gfms_ascii_ (substr (subtask_word (i), 1, 18)));
			     i = i+1;
			end;
			goto off_end;

stq (04):			;
			call ioa ("(^2i) -NO DISPLAY-");
display_word:		;
			do while (i <= sqll);
			     if subtask_word (i) = (12)"7"b3 then do;
				i = i+1;
				goto cont;
			     end;
			     call ioa ("^14x^12.3b", subtask_word (i));
			     i = i+1;
			end;
			goto cont;

stq (05):			;
			call ioa ("(05) New Names");
			goto display_names;

stq (06):			;
			call ioa ("(06) Pack Identification");
			goto display_word;

stq (07):			;
			call ioa ("(07) ALL");
			call ioa (
			     "(07) Date ^6a Time ^6a"
			     , gfms_date_ (Date (i))
			     , gfms_ascii_ (Time (i))
			     );
			i = i+1;
			goto cont;

stq (08):			;
			call ioa ("(08) ILLEGAL Qualifier Code.");
			goto dump_fact;

stq (09):			;
			call ioa ("(09) SMC Sections ^32b", subtask_word (i));
			i = i+1;
			goto cont;

stq (10):			;
			call ioa (
			     "(10) Journal Search ^6a ^6a"
			     , gfms_date_ (Date (i))
			     , gfms_ascii_ (Time (i))
			     );
			i = i+2;
			goto cont;

cont:			;

		     end;
		end;
	     end;
	     else do;				/* FACT constants not as expected. */
		call ioa ("FACT constants not as expected (octal dump):");
dump_fact:	;
		do i = 0 to hbound (fact_word, 1) by 4;
		     call ioa_nnl ("^3i. ", i);
		     do j = i to (i+3);
			call ioa_nnl (" ^12.3b", fact_word (j));
		     end;
		     call ioa_nnl ("^/");
		end;
		goto fail;
	     end;
	end;
	else do;					/* Constant(s) improper. */
	     call ioa ("constants not as expected (octal dump):");
	     do i = 0 to hbound (word, 1) by 4;
		call ioa_nnl ("^3i. ", i);
		do j = i to (i+3);
		     call ioa_nnl (" ^12.3b", word (j));
		end;
		call ioa_nnl ("^/");
	     end;
	     goto fail;
	end;
	return;
%page;
/*  Variables for gfms_task_block_record_:			*/
/*   IDENTIFIER		ATTRIBUTES	*/
dcl  code                     fixed bin(35);
dcl  com_err_                 entry() options(variable);
dcl  error_table_$long_record fixed bin(35) ext static;
dcl  fact_word                (0:size(FACT_Overlay_Interface)-1)bit(36)aligned based(addr(FACT_Overlay_Interface));
dcl  gfms_ascii_              entry(bit(*))returns(char(*));
dcl  gfms_date_               entry (bit(36) aligned) returns(char(8));
dcl  gfms_fail                condition ext;
dcl  gfms_tape_status_        entry (ptr) returns(bit(12));
dcl  i                        fixed bin;
dcl  ioa_                     entry() options(variable);
dcl  ioa_$nnl                 entry() options(variable);
dcl  iox_$read_record         entry (ptr, ptr, fixed bin(21), fixed bin(21), fixed bin(35));
dcl  j                        fixed bin;
dcl  l                        fixed bin;
dcl  Name                     bit(72)based(addr(subtask_qualifier_list(i)));
dcl  nbr                      fixed bin(21);
dcl  nw                       fixed bin;
dcl  nwr                      fixed bin;
dcl  rw                       fixed bin;
dcl  size                     builtin;
dcl  sqll                     fixed bin;
dcl  subtask_word             (sqll)bit(36)based(addr(subtask_qualifier_list));
dcl  tbr_space                (1117)bit(36)aligned;
dcl  word                     (0:nw)bit(36)aligned based(addr(tbr));
%page;
/* See DD14, Rev 1 (June 1976) SYSTEM TABLES
   Page 16-25 TASK BLOCK RECORD (<=1117 words)
*/
dcl 1 tbr			aligned based(addr(tbr_space))
,     3 word0
,       4 b00_17		fixed bin(18)unsigned unal
,       4 block_size	fixed bin(18)unsigned unal
,     3 word1
,       4 record_size	fixed bin(18)unsigned unal
,       4 b18_35		bit(18)unal
,     3 word2
,       4 savhdr		bit(36)	/* bcd constant "SAVHDR" */
,     3 word3
,       4 date		bit(36)	/* bcd MMDDYY */
,     3 word4
,       4 clock_pulses	fixed bin(36)unsigned unal
,     3 words5_6		bit(72)	/* should be zero. */
,     3 words7_nw		(7:nw)bit(36) /* Copy of task block. */
;
%page;
/* See DD14, Rev 1 (June 1976) SYSTEM TABLES
   Page 16-30 FACT Overlay Interface
*/
dcl 1 FACT_Overlay_Interface	aligned based(addr(tbr.words7_nw))
,     3 word0
,       4 task_header	fixed bin(18)unsigned unal
,       4 b18_35		bit(18)unal
,     3 word1
,       4 restore		bit(01)unal
,       4 b01_17		bit(17)unal	/* Reserved for GCOS. */
,       4 task_ordinal	fixed bin(18)unsigned unal
,     3 word2
,       4 type_code		fixed bin(06)unsigned unal	/* 10 decimal. */
,       4 serial_num	bit(30)unal /* octal 1's. */
,     3 word3
,       4 subtask_header	fixed bin(18)unsigned unal	/* 2. */
,       4 b18_35		bit(18)unal
,     3 word4
,       4 subtask_code	fixed bin(18)unsigned unal
,       4 subtask_options	(18:35)bit(1)unal
,     3 word5		bit(36)	/* Reserved. */
,     3 words6_7
,       4 user_name		bit(72)
,     3 words8_9		bit(72)	/* Reserved. */
,     3 word10
,       4 address_of_return_pair bit(18)unal
,       4 b18_35		bit(18)unal	/* Reserved. */
,     3 word11
,       4 report_code	fixed bin(18)unsigned unal	/* decimal 33. */
,       4 b18_23		bit(06)unal	/* Reserved. */
,       4 file_code		bit(12)unal	/* P*. */
,     3 word12
,       4 subtask_qualifier_list (sqll)
,         5 b00_17		fixed bin(18)unsigned unal
,         5 b18_35		fixed bin(18)unsigned unal
,     3 last_word
,       4 b00_17		bit(18)unal
,       4 b18_35		bit(18)unal
;

dcl 1 stq_ovl		(sqll)aligned based(addr(subtask_qualifier_list))
,     2 Date		bit(36)
,     2 Time		bit(36)unal
;
%page;
%include gfms_ext;
     end gfms_task_block_record_;
