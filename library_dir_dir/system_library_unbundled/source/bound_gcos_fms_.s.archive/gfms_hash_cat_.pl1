/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gfms_hash_cat_: proc (b_name, a_name, ic, ps, cs);

/* Store the catalog entry in the description tree.
   Entry is a catalog (ic="1"b) or a file (ic="0"b).
   Sector number of parent is "ps" and of child is "cs".
   The name of the entry is BCD "b_name" and equivently
   ASCII "a_name".

   Author: Dave Ward	11/08/80
*/
dcl b_name bit(72)aligned parm;
dcl a_name char(12)var parm;
dcl ic bit(1)parm;
dcl ps fixed bin(18)unsigned unal parm;
dcl cs fixed bin(18)unsigned parm;

/* Record entry name in cat array. */
	n_cat = n_cat+1;
	if n_cat > hbound (cat, 1) then do;
	     call com_err_ (
		0
		, "gfms_hash_cat_"
		, "Exhausted ^i entries of cat table."
		, hbound (cat, 1)
		);
	     signal cond (gfms_fail);
	end;
	cat (n_cat).name = b_name;			/* entry name BCD. */
	cat (n_cat).ascii_name = a_name;		/* entry name ASCII. */
	cat (n_cat).is_cat = ic;			/* catalog ("1"b) or file ("0"b) entry. */
	cat (n_cat).parent_sector = ps;		/* sector of my parent. */
	cat (n_cat).child_sector = cs;		/* sector of my child (subcatalog or file description). */

/* Hash child sector number into one of two lists
   according to whether this is a catalog entry or
   a file entry.
*/
	if ic then				/* entry is a catalog. */
	     slp = addr (start_list.cat_child);
	else					/* entry is a file. */
	slp = addr (start_list.file_child);
	k = mod (cs, hbound (slp -> start_list, 1)+1);
	j = slp -> start_list (k);
	do while (j>0);				/* Assure name not currently hashed. */
	     if cat (j).child_sector = cs then do;
		call com_err_ (
		     0
		     , "gfms_hash_cat_"
		     , "BUG, multiple occurance of ""^a"" (sector ^6i ^6.3b oct)"
		     , a_name
		     , cs
		     , unspec (cs)
		     );
		return;
	     end;
	     j = cat (j).child_link;
	end;

/* New name to enter in the hashed list. */
	cat (n_cat).child_link = slp -> start_list (k);	/* Link new name to previous hash entry. */
	slp -> start_list (k) = n_cat;		/* Link this name as the first in hash list. */
	return;
%page;
/*   Variables for gfms_hash_cat_:		*/
/*   IDENTIFIER		ATTRIBUTES	*/
dcl gfms_fail condition ext;
dcl  com_err_ entry() options(variable);
dcl mod builtin;
dcl hbound builtin;
dcl addr builtin;
dcl  j                        fixed bin;
dcl  k                        fixed bin;
dcl  slp                      ptr;
dcl  start_list               (0:1020)fixed bin(18)unsigned based;
%page;
%include gfms_description_tree;
%page;
%include gfms_ext;
     end gfms_hash_cat_;
