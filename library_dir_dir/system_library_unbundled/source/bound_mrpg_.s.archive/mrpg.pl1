/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/**** format: ind3,ll80,initcol6,indattr,^inddcls,dclind4,idind16	       */
/**** format: struclvlind2,^ifthenstmt,^ifthendo,^ifthen,^indnoniterdo       */
/**** format: ^inditerdo,^indnoniterend,^indthenelse,case,^indproc,^indend   */
/**** format: ^delnl,^insnl,comcol41,^indcom,^indblkcom,linecom,^indcomtxt   */

mrpg: proc;

dcl MRPG_version	char (8) int static init ("1.1b");

/* report generator language					       */

      code = 0;
      ifp = null ();
      call cu_$arg_ptr (1, argp, argl, code);
      if (code = 0)
      then do;
         if (substr (arg, 1, 1) ^= "-")
         then do;
	  if (ifp ^= null ())
	  then do;
	     call com_err_ (0, command_name, "Multiple input segments not allowed.");
	     return;
	  end;
	  call expand_pathname_$add_suffix (arg, "mrpg", dname, ename, code);
	  if (code ^= 0)
	  then do;
	     call com_err_ (code, command_name, "^a", arg);
	     return;
	  end;
	  if (verify (before (ename, ".mrpg"), chars) ^= 0)
	     | (index ("_0123456789", substr (ename, 1, 1)) ^= 0)
	  then do;
	     call com_err_ (0, "mrpg", "Syntax error in report name.");
	     return;
	  end;
	  call hcs_$initiate_count (dname, ename, "", bc, 0, ifp, code);
	  if (ifp = null ())

	  then do;
	     call com_err_ (code, command_name, "^a>^a", dname, ename);
	     return;
	  end;
	  if (bc = 0)
	  then do;
	     call com_err_ (error_table_$zero_length_seg, command_name, "^a>^a", dname, ename);
	     return;
	  end;
	  ife = divide (bc, 9, 24, 0);
	  arg = before (ename, ".mrpg");
         end;
         else do;
	  call com_err_ (error_table_$badopt, command_name, "^a", arg);
	  return;
         end;
      end;
      else do;
         call com_err_ (code, command_name || MRPG_version, "
Usage:	mrpg pathname {PL/I options}");
         return;
      end;
      if (ifp = null ())
      then do;
         call com_err_ (error_table_$noarg, command_name, "Input segment.");
         return;
      end;
      call ioa_ ("MRPG ^a", MRPG_version);
      ai.version = area_info_version_1;
      ai.zero_on_alloc = "1"b;
      ai.zero_on_free = "0"b;
      ai.dont_free = "0"b;
      ai.no_freeing = "1"b;
      ai.owner = command_name;
      ai.size = sys_info$max_seg_size;
      if hold_sw
      then do;
         ai.extend = "0"b;
         call hcs_$make_seg (get_wdir_ (), "mrpg.area", "mrpg.area", 01010b, ai.areap, code);
         if (ai.areap = null ())
         then do;
	  call com_err_ (code, "mrpg", "Getting work area");
	  return;
         end;
      end;
      else do;
         ai.areap = null ();
         ai.extend = "1"b;
      end;
      call define_area_ (addr (ai), code);
      if (code ^= 0)
      then do;
         call com_err_ (code, command_name, "define_area_");
         return;
      end;
      on condition (cleanup) begin;
	  if ^hold_sw
	  then call release_area_ (ai.areap);
         end;
      on condition (mrpg_fatal) goto done;
      call mrpg_error_$init;
      call mrpg_parse_ (ifp, ife, ai.areap, code);
      if mrpg_error_$stat ()
      then goto done;
      call mrpg_generate_ (ai.areap, ename, ifp, code);
      if (code ^= 0)
      then goto done;
      if ^hold_sw then
	 call release_area_ (ai.areap);
      ai.areap = null ();
      call hcs_$make_ptr (null (), "pl1", "pl1", pl1p, code);
      call cu_$arg_list_ptr (arglp);
      call cu_$gen_call (pl1p, arglp);
done:
      if ^hold_sw & (ai.areap ^= null ()) then
	 call release_area_ (ai.areap);
      return;

dcl 1 ai		like area_info;
%include area_info;
dcl arg		char (argl) based (argp); /* current argument	       */
dcl argl		fixed bin (24);	/* length of current argument	       */
dcl arglp		ptr;
dcl argp		ptr;		/* pointer to current argument       */
dcl bc		fixed bin (24);
dcl chars		char (63) int static
  init ("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789");
dcl cleanup	condition;
dcl code		fixed bin (35);
dcl com_err_	entry options (variable);
dcl command_name	char (4) int static init ("mrpg");
dcl cu_$arg_list_ptr entry (ptr);
dcl cu_$arg_ptr	entry (fixed bin (24), ptr, fixed bin (24), fixed bin (35));
dcl cu_$gen_call	entry (ptr, ptr);
dcl define_area_	entry (ptr, fixed bin (35));
dcl dname		char (168);	/* directory portion of input name   */
dcl ename		char (32);	/* entry portion of input name       */
dcl error_table_$zero_length_seg fixed bin (35) ext static;
dcl error_table_$badopt fixed bin (35) ext static;
dcl error_table_$noarg fixed bin (35) ext static;
dcl expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl get_wdir_	entry returns (char (168));
dcl hcs_$initiate_count entry options (variable);
dcl hcs_$make_ptr	entry (ptr, char (*), char (*), ptr, fixed bin (35));
dcl hcs_$make_seg	entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl i		fixed bin (24);
dcl ife		fixed bin (24);	/* length of input segment	       */
dcl ifp		ptr;		/* pointer to input sgment	       */
dcl ioa_		entry options (variable);
dcl mrpg_error_$init entry;
dcl mrpg_error_$stat entry returns (bit (1));
dcl mrpg_fatal	condition;
dcl mrpg_generate_	entry (ptr, char (32), ptr, fixed bin (35));
dcl mrpg_parse_	entry (ptr, fixed bin (24), ptr, fixed bin (35));
dcl pl1p		ptr;
dcl release_area_	entry (ptr);
dcl sys_info$max_seg_size fixed bin (24) ext static;

dcl (addr, before, codeptr, divide, index, null, substr, verify) builtin;

dcl hold_sw	bit (1) int static init ("0"b);
holdn: entry; hold_sw = "1"b; return;
holdf: entry; hold_sw = "0"b; return;
   end;
