/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/**** format: ind3,ll80,initcol6,indattr,^inddcls,dclind4,idind16	       */
/**** format: struclvlind2,^ifthenstmt,^ifthendo,^ifthen,^indnoniterdo       */
/**** format: ^inditerdo,^indnoniterend,^indthenelse,case,^indproc,^indend   */
/**** format: ^delnl,^insnl,comcol41,^indcom,^indblkcom,linecom,^indcomtxt   */

mrpg_generate_: proc (atreeptr, ename, aifp, code);

dcl atreeptr	ptr,
    ename		char (32),
    aifp		ptr,		/* pointer to source segment	       */
    code		fixed bin (35);

      P_skip, P_stop, P_bool_char, P_bool_dec, P_char_bool, P_char_dec,
         P_dec_bool, P_dec_char, P_int, P_if = "0"b;
      failed = 0;
      tree_ptr = atreeptr;
      if stop_sw then signal condition (stop_mrpg);
      if db_sw then do;
         call ioa_ ("table	^p	^p", table.b, table.e);
         optr = table.b;
         do while (optr ^= null ());
	  call mrpg_dump_$list ((optr), 3);
	  optr = optr -> symtab.next;
         end;
         call ioa_ ("^/parm_pos	^p	^p	^i",
	  parm_pos.b, parm_pos.e, ppos_ct);
         if (parm_pos.b ^= null ())
         then call mrpg_dump_$all (parm_pos.b, 0);
         call ioa_ ("^/parm_key	^p	^p	^i",
	  parm_key.b, parm_key.e, pkey_ct);
         if (parm_key.b ^= null ())
         then call mrpg_dump_$all (parm_key.b, 0);
         call ioa_ ("^/parm_check	^p	^p",
	  parm_check.b, parm_check.e);
         if (parm_check.b ^= null ())
         then call mrpg_dump_$all (parm_check.b, 0);
         call ioa_ ("^/input	^p	^p", input.b, input.e);
         if (input.b ^= null ())
         then call mrpg_dump_$all (input.b, 0);
         call ioa_ ("^/input_check	^p	^p",
	  input_check.b, input_check.e);
         if (input_check.b ^= null ())
         then call mrpg_dump_$all (input_check.b, 0);
         call ioa_ ("^/rec_str,res_siz	^i   ^i", rec_str, res_siz);
         call ioa_ ("^/from	^p", from);
         if (from ^= null ())
         then call mrpg_dump_$all (from, 0);
         call ioa_ ("^/local	^p	^p", local.b, local.e);
         if (local.b ^= null ())
         then call mrpg_dump_$all (local.b, 0);
         call ioa_ ("^/report	^p	^p", tree.report.b, tree.report.e);
         if (tree.report.b ^= null ())
         then call mrpg_dump_$all (tree.report.b, 0);
         call ioa_ ("^/exec	^p	^p", exec.b, exec.e);
         if (exec.b ^= null ())
         then call mrpg_dump_$all (exec.b, 0);
      end; %skip (5);
      err_sw = "0"b;

      do symtabptr = table.b
         repeat (symtabptr -> symtab.next)
         while (symtabptr ^= null ());
         daptr = symtab.use.b;
         if (symtab.type = "ID")
         then if (datum.type = "SY")
	    then do;
	       call mrpg_error_ (3, (datum.line),
		"Undeclared variable ""^a"".", symtab.data);
	       err_sw = "1"b;
	    end;
      end;

      if err_sw
      then do;
         code = 1;
         return;
      end; %skip (5);
      macname = "macro";

/*	call macro_$library (macname, mrpg, code);		       */
      if (code ^= 0)
      then return;
      name = before (ename, ".mrpg");
      call get_seg_ptr_ (name || ".pl1", "010101"b, bc, optr, code);
      on condition (cleanup) begin;
	  call macro_$free (db_sw);
	  call release_seg_ptr_ (optr, 0, code);
         end;
      ose = 0;
dcl err_sw	bit (1);
dcl version	char (32) int static options (constant)
		init ("mrpg 1.1b of Oct 26, 1983");
dcl dname		char (168);
dcl dnamel	fixed bin;
dcl hcs_$fs_get_path_name entry (ptr, char (*), fixed bin, char (*),
		fixed bin (35));

      call hcs_$fs_get_path_name (aifp, dname, dnamel, "      ", 0);

      argl.p (1) = addr (version);
      argl.l (1) = length (version);

      argl.p (2) = addr (dname);
      argl.l (2) = dnamel;

      argl.p (3) = addrel (addr (name), 1);
      argl.l (3) = length (name);

      vtemp = "";
      if (from ^= null ())
      then call regen (from);
      argl.p (4) = addrel (addr (vtemp), 1);
      argl.l (4) = length (vtemp);

      argct = 5;
      ds (5) = rec_str;
      call number;

      argct = 6;
      ds (6) = res_siz;
      call number;

      argct = 7;
      argl.l (7) = 1;
      if db_sw | lg_sw
      then argl.p (7) = addr (digit (1));
      else argl.p (7) = addr (digit (0));

      argct = 8;
      ds (argct) = ppos_ct + pkey_ct;
      call number;

      macname = "proc";
      call macro;

/* process parameters					       */

      if (ppos_ct > 0)
         | (pkey_ct > 0)
      then do;
         ds (1) = ppos_ct;
         ds (2) = pkey_ct;

         argct = 1;
         call number;

         argct = 2;
         call number;

         macname = "parm_begin";
         argct = 2;
         call macro;

         macname = "parm_check";

         max_name = 0;
         dflt_sw = "0"b;
         paptr = parm_key.b;
         do i = ppos_ct + 1 to ppos_ct + pkey_ct, -1, 1 to ppos_ct;
	  if (i = -1)
	  then do;
	     argct = 0;
	     paptr = parm_pos.b;
	  end;
	  else do;
	     srefptr = param.sym;
	     symtabptr = symref.sym;
	     argl.p (1) = addr (symtab.data);
	     argl.l (1) = symtab.leng;
	     max_name = max (max_name, symtab.leng);

	     argct = 2;
	     ds (argct) = i;
	     call number;

	     argct = 3;
	     if (param.kind = Bool)
	     then ds (argct) = -1;
	     else ds (argct) = param.leng;
	     call number;

	     atptr = param.attr.b;
	     do while (atptr ^= null ());
	        if (attr.type = "KY")
	        then do;
		 argct = argct + 1;
		 srefptr = attr.sym;
		 symtabptr = symref.sym;
		 argl.p (argct) = addr (symtab.data);
		 argl.l (argct) = symtab.leng;
	        end;
	        else dflt_sw = "1"b;
	        atptr = attr.next;
	     end;
	     paptr = param.next;
	  end;

	  call macro;
         end;

         if dflt_sw
         then do;
	  macname = "parm_default";
	  paptr = parm_key.b;
	  do i = ppos_ct + 1 to ppos_ct + pkey_ct, -1, 1 to ppos_ct;
	     if (i = -1)
	     then do;
	        paptr = parm_pos.b;
	     end;
	     else do;
	        srefptr = param.sym;
	        symtabptr = symref.sym;
	        argl.p (1) = addr (symtab.data);
	        argl.l (1) = symtab.leng;

	        argct = 2;
	        ds (argct) = i;
	        call number;

	        argct = 3;
	        if (param.kind = Bool)
	        then ds (argct) = -1;
	        else ds (argct) = param.leng;
	        call number;

	        atptr = param.attr.b;
	        do while (atptr ^= null ());
		 if (attr.type = "DV")
		 then do;
		    argct = 4;
		    call expr (attr.sym, argl.p (4), argl.l (4));
		    call macro;
		    atptr = null ();
		 end;
		 else atptr = attr.next;
	        end;
	        paptr = param.next;
	     end;
	  end;
         end;

         argct = 1;
         ds (argct) = max_name;
         call number;
         argct = 1;
         macname = "parm_end";
         call macro;
      end;

%page;
/* process local declaration					       */
      macname = "local";
      do daptr = tree.local.b
         repeat (datum.next)
         while (daptr ^= null ());

         LINE = datum.line;
         argl.l (1) = 4;
         argl.p (1) = addr (LINE);
dcl LINE		pic "zzz9";
         srefptr = datum.sym;
         symtabptr = symref.sym;
         if (index (symtab.data, ".") = 0)
         then do;
	  argl.p (2) = addr (symtab.data);
	  argl.l (2) = symtab.leng;

	  if (datum.kind = Set)
	     | (datum.kind = Table)
	     | (datum.kind = Tablev)
	  then do;
	     if (symtab.use.b = symtab.use.e)
	     then call mrpg_error_ (1, (datum.line),
	        """^a"" is not referenced.", symtab.data);
	     else do;
	        if (datum.datal.b -> opn.op = n_n)
	        then do;
		 argl.p (3), argl.p (4) = addr (t_n);
		 argl.l (3), argl.l (4) = length (t_n);
	        end;
	        else if (datum.datal.b -> opn.op = n_s)
	        then do;
		 argl.p (3) = addr (t_n);
		 argl.l (3) = length (t_n);
		 argl.p (4) = addr (t_c);
		 argl.l (4) = length (t_c) - 3;
	        end;
	        else if (datum.datal.b -> opn.op = s_n)
	        then do;
		 argl.p (3) = addr (t_c);
		 argl.l (3) = length (t_c) - 3;
		 argl.p (4) = addr (t_n);
		 argl.l (4) = length (t_n);
	        end;
	        else do;
		 argl.p (3), argl.p (4) = addr (t_c);
		 argl.l (3), argl.l (4) = length (t_c) - 3;
	        end;
	        if (datum.kind = Set)
	        then argct = 3;
	        else argct = 4;
	        if (datum.kind = Tablev)
	        then argl.l (4) = argl.l (4) + 3;
	        macname = "table";

	        call macro;

	        argct = 1;
	        do opptr = datum.datal.b
		 repeat (opn.next)
		 while (opptr ^= null ());
		 symtabptr = opn.op1 -> symref.sym;
		 argl.p (1) = addr (symtab.data);
		 argl.l (1) = symtab.leng;
		 if (opn.op2 ^= null ())
		 then do;
		    argct = 2;
		    symtabptr = opn.op2 -> symref.sym;
		    argl.p (2) = addr (symtab.data);
		    argl.l (2) = symtab.leng;
		 end;
		 call macro;
	        end;
	        argct = 0;
	        call macro;
	        macname = "local";
	     end;
	  end;
	  else do;
	     argct = 3;
	     ds (argct) = datum.pos;
	     call number;

	     argl.p (4) = addrel (addr (kind_char (datum.kind)), 1);
	     argl.l (4) = length (kind_char (datum.kind));

	     argct = 5;
	     ds (argct) = datum.leng;
	     call number;

	     call expr (datum.datal.b, argl.p (6), argl.l (6));

	     argct = 6;
	     call macro;
	  end;
         end;
      end;
%page;
/* process report specifications				       */
dcl digit		(0:9) char (1) int static init (
		"0", "1", "2", "3", "4", "5", "6", "7", "8", "9");

      do repptr = tree.report.b
         repeat (report.next)
         while (repptr ^= null ());
         do pt = "PF1", "PH1", "ON0", "BR0", "DFn", "RF1", "RH1", "DHn", "DTn";
	  rc = substr (pt, 3, 1);
	  substr (pt, 3, 1) = " ";
	  macname = "report";
	  argl.p (1) = addr (pt);
	  argl.l (1) = 2;
	  if (pt = "PF")
	  then do;
	     srefptr = report.sym;
	     symtabptr = symref.sym;
	     argl.p (2) = addr (symtab.data);
	     argl.l (2) = symtab.leng;

	     argct = 3;
	     ds (argct) = report.pw;
	     call number;

	     argct = 4;
	     ds (argct) = report.pl;
	     call number;

	     argct = 5;
	     ds (argct) = report.minl;
	     call number;

	     argct = 6;
	     ds (argct) = report.maxl;
	     call number;
	  end;
	  if (rc ^= "n")		/* PF, PH, ON, BR, RF, RH	       */
	  then call macro;

	  if (rc ^= "0")		/* PF, PH, DF, RF, RH, DH, DT	       */
	  then do partptr = report.part.b
	        repeat (part.next)
	        while (partptr ^= null ());
	     if (part.type = pt)
	     then do;
	        if (rc = "n")	/* DF, DH, DT		       */
	        then do;
		 srefptr = part.sym;
		 symtabptr = symref.sym;
		 argct = 2;
		 if (pt = "DT")
		 then do;
		    argl.p (2) = addr (symtab.data);
		    argl.l (2) = symtab.leng;

		    argct = 3;
		    ds (argct) = part.maxl;
		    call number;
		 end;
		 else do;
		    i = 0;
		    do srefptr = report.brlist.b
		       repeat (symref.next)
		       while (srefptr ^= null ());
		       i = i + 1;
		       if (symref.sym = symtabptr)
		       then goto br_found;
		    end;
				/* error			       */
br_found:
		    ds (argct) = i;
		    call number;
		 end;

		 if (part.ctl ^= null ())
		 then do;
		    argct = 4;
		    call expr (part.ctl, argl.p (4), argl.l (4));
		 end;
		 macname = "report";
		 argl.p (1) = addr (pt);
		 argl.l (1) = 2;
		 call macro;
	        end;
	        call put_part;
	     end;
	  end;
	  if (pt = "ON")
	  then do;
	     macname = "on";
	     argct = 4;
	     do valptr = report.onlist.b
	        repeat (value.next)
	        while (valptr ^= null ());
	        argl.l (1) = 2;
	        argl.p (1) = addr (value.type);

	        vtemp = "";
	        call expr (value.ctl, argl.p (3), argl.l (3));

	        argl.p (2) = addr (argl.p (3) -> car (argl.l (3) + 1));
	        call regen (value.sym);
	        argl.l (2) = length (vtemp) - argl.l (3);

	        ds (argct) = value.numb;
	        call number;

	        call macro;
	     end;
	  end;

	  if (pt = "BR")
	  then do;
	     macname = "break";
	     i = 0;
	     do srefptr = report.brlist.b
	        repeat (symref.next)
	        while (srefptr ^= null ());
	        symtabptr = symref.sym;
	        daptr = symtab.use.b;
	        argl.p (1) = addr (symtab.data);
	        argl.l (1) = symtab.leng;

	        i = i + 1;
	        argct = 2;
	        ds (argct) = i;
	        call number;

	        argl.p (3) = addrel (addr (kind_char (datum.kind)), 1);
	        argl.l (3) = length (kind_char (datum.kind));

	        argct = 4;
	        ds (argct) = datum.leng;
	        call number;

	        call macro;
	     end;
	  end;
         end;

         macname = "report";
         argl.p (1) = addr (digit (9));
         argl.l (1) = 1;

         argct = 1;
         call macro;

      end; %skip (5);
/* process input declaration					       */
      macname = "input";
      argct = 0;
      call macro;

      macname = "input_field";
      do daptr = tree.input.b
         repeat (datum.next)
         while (daptr ^= null ());

         LINE = datum.line;
         argl.l (1) = 4;
         argl.p (1) = addr (LINE);
         srefptr = datum.sym;
         if (srefptr ^= null ())
         then do;
	  symtabptr = symref.sym;
	  argl.p (2) = addr (symtab.data);
	  argl.l (2) = symtab.leng;
         end;
         else do;
	  argl.p (2) = addr (digit (0));
	  argl.l (2) = 0;
         end;

         argct = 3;
         ds (argct) = datum.pos;
         call number;

         argl.p (4) = addrel (addr (kind_char (datum.kind)), 1);
         argl.l (4) = length (kind_char (datum.kind));

         argct = 5;
         ds (argct) = datum.leng;
         call number;

         vtemp = "";
         call expr (datum.datal.b, argl.p (6), argl.l (6));

         argct = 6;
         call macro;
      end; %skip (5);
/* process executable					       */

      macname = "exec";
      argct = 0;
      call macro;

      call stmt_exp (tree.exec.b);

      macname = "exec";
      argct = 0;
      call macro;

      argct = 6;
      argl.p (1) = addr (I_day);
      if tree.day
      then argl.l (1) = 5;
      else argl.l (1) = 0;

      argl.p (2) = addr (I_hhmmss);
      if tree.hhmmss
      then argl.l (2) = 8;
      else argl.l (2) = 0;

      argl.p (3) = addr (I_mmddyy);
      if tree.mmddyy
      then argl.l (3) = 8;
      else argl.l (3) = 0;

      argl.p (4) = addr (I_month);
      if tree.month
      then argl.l (4) = 7;
      else argl.l (4) = 0;

      argl.p (5) = addr (I_yyddd);
      if tree.yyddd
      then argl.l (5) = 7;
      else argl.l (5) = 0;

      vtemp = "";
      if P_skip
      then vtemp = vtemp || "&let P_skip=1&;";
      if P_stop
      then vtemp = vtemp || "&let P_stop=1&;";
      if P_bool_char
      then vtemp = vtemp || "&let P_bool_char=1&;";
      if P_bool_dec
      then vtemp = vtemp || "&let P_bool_dec=1&;";
      if P_char_bool
      then vtemp = vtemp || "&let P_char_bool=1&;";
      if P_char_dec
      then vtemp = vtemp || "&let P_char_dec=1&;";
      if P_dec_bool
      then vtemp = vtemp || "&let P_dec_bool=1&;";
      if P_dec_char
      then vtemp = vtemp || "&let P_dec_char=1&;";
      if P_int
      then vtemp = vtemp || "&let P_int=1&;";
      if P_if
      then vtemp = vtemp || "&let P_if=1&;";
      argl.p (6) = addrel (addr (vtemp), 1);
      argl.l (6) = length (vtemp);

      macname = "end";
      call macro;
exit:
      call macro_$free (db_sw);
      call release_seg_ptr_ (optr, ose * 9, code);
      if (failed ^= 0)
      then call mrpg_error_ (failed, 0, "Unable to complete translation");
      code = failed;
      return; %page;
stmt_exp: proc (stmtp);

dcl stmtp		ptr unal;
dcl tp		ptr;

      do stmtptr = stmtp
         repeat (stmt.next)
         while (stmtptr ^= null ());
         tp = stmtptr;
         if (stmt.type = "IF")
         then do;
	  macname = "if";
	  argct = 1;
	  ds (argct) = 1;
	  call number;

	  argct = 2;
	  call expr (stmt.ref1.b, argl.p (2), argl.l (2));

	  call macro;
	  call stmt_exp (tp -> stmt.ref2.b);
	  if (tp -> stmt.ref3.b ^= null ())
	  then do;
	     macname = "if";
	     argct = 1;
	     ds (argct) = 2;
	     call number;
	     call macro;

	     call stmt_exp (tp -> stmt.ref3.b);
	  end;
	  macname = "if";
	  argct = 1;
	  ds (argct) = 3;
	  call number;
	  call macro;
         end;
         else if (stmt.type = ":=")
	       | (stmt.type = "=:")
         then do;
	  macname = "assign";
	  argct = 4;

	  srefptr = stmt.ref1.b;
	  symtabptr = symref.sym;
	  argl.p (1) = addr (symtab.data);
	  argl.l (1) = symtab.leng;

	  vtemp = "";
	  call expr (stmt.ref2.b, argl.p (2), argl.l (2));

	  argl.l (3) = 2;
	  argl.p (3) = addr (stmt.type);

	  ds (argct) = symref.line;
	  call number;

	  call macro;
         end;
         else if (stmt.type = "PR")
         then do;
	  macname = "print";
	  argct = 1;

	  srefptr = stmt.ref1.b;
	  symtabptr = symref.sym;
	  argl.p (1) = addr (symtab.data);
	  argl.l (1) = symtab.leng;

	  call macro;
         end;
         else if (stmt.type = "SR")
	       | (stmt.type = "SU")
	       | (stmt.type = "HD")
         then do;
	  macname = "sort";
	  argct = 1;
	  argl.l (1) = 2;
	  argl.p (1) = addr (stmt.type);

	  call macro;

	  argct = 4;
	  do atptr = stmt.ref2.b
	     repeat (attr.next)
	     while (atptr ^= null ()),
	     stmt.ref1.b
	     repeat (attr.next)
	     while (atptr ^= null ());
dcl A		char (1) int static init ("A");
dcl D		char (1) int static init ("D");
	     argl.p (1) = addr (A);
	     if (attr.type = "KY")
	     then do;
	        if attr.des
	        then argl.p (1) = addr (D);
	        argl.l (1) = 1;
	        srefptr = attr.sym;
	     end;
	     else do;
	        argl.l (1) = 0;
	        srefptr = atptr;
	     end;
	     if (symref.type ^= "SY")
	     then do;
	        call mrpg_error_ (3, (symref.line), "SORT/HOLD fields cannot be expressions.");
	     end;
	     else do;
	        symtabptr = symref.sym;
	        argl.l (2) = symtab.leng;
	        argl.p (2) = addr (symtab.data);

	        daptr = symtab.use.b;
	        argl.p (3) = addrel (addr (kind_char (datum.kind)), 1);
	        argl.l (3) = length (kind_char (datum.kind));

	        argct = 4;
	        ds (argct) = datum.leng;
	        call number;

	        call macro;
	     end;
	  end;
	  argct = 0;
	  call macro;
         end;
         else if (stmt.type = "BG")
         then do;
	  macname = "bg";
	  argct = 1;
	  ds (argct) = 1;
	  call number;
	  call macro;

	  call stmt_exp (tp -> stmt.ref1.b);
	  call stmt_exp (tp -> stmt.ref2.b);
	  macname = "bg";
	  argct = 1;
	  ds (argct) = 2;
	  call number;
	  call macro;
	  call stmt_exp (tp -> stmt.ref3.b);
	  macname = "bg";
	  argct = 1;
	  ds (argct) = 3;
	  call number;
	  call macro;

         end;
         else if (stmt.type = "NT")
         then ;
         else do;
	  call mrpg_error_ (3, 0, "Invalid stmt.type ""^a""", stmt.type);
         end;
         stmtptr = tp;

      end;
   end stmt_exp; %page;
put_part: proc;

dcl tptr		ptr;

      do linptr = part.lines.b
         repeat (lines.next)
         while (linptr ^= null ());
         argl.p (1) = addr (digit (1));
         argl.l (1) = 1;

         argct = 2;
         ds (argct) = lines.number;
         call number;

         call expr (lines.ctl, argl.p (3), argl.l (3));

         argct = 3;
         macname = "line";
         call macro;

         do fldptr = lines.field.b
	  repeat (field.next)
	  while (fldptr ^= null ());
	  do stmtptr = field.let.b
	     repeat (stmt.next)
	     while (stmtptr ^= null ());
	     vtemp = "";
	     tptr = stmtptr;
exec_loop:
	     if (tptr -> stmt.type = "IF")
	     then do;
	        macname = "if";

	        argct = 1;
	        call expr (tptr -> stmt.ref1.b, argl.p (1), argl.l (1));

	        call macro;
	        stmtptr = tptr -> stmt.ref2.b;
	        goto exec_loop;
	     end;
	     else if (tptr -> stmt.type = ":=")
		   | (tptr -> stmt.type = "=:")
	     then do;
	        macname = "assign";
	        argct = 4;

	        srefptr = tptr -> stmt.ref1.b;
	        symtabptr = symref.sym;
	        argl.p (1) = addr (symtab.data);
	        argl.l (1) = symtab.leng;

	        call expr (tptr -> stmt.ref2.b, argl.p (2), argl.l (2));

	        argl.l (3) = 2;
	        argl.p (3) = addr (tptr -> stmt.type);

	        ds (argct) = symref.line;
	        call number;

	        call macro;
	     end;
	     else if (tptr -> stmt.type = "cP")
	     then do;
	        macname = "picture";
	        goto pic_edit;
	     end;
	     else if (tptr -> stmt.type = "cE")
	     then do;
	        macname = "edit";
pic_edit:
	        argct = 3;

	        srefptr = tptr -> stmt.ref1.b;
	        symtabptr = symref.sym;
	        argl.p (1) = addr (symtab.data);
	        argl.l (1) = symtab.leng;

	        call expr (tptr -> stmt.ref2.b, argl.p (2), argl.l (2));

	        srefptr = tptr -> stmt.ref2.e;
	        symtabptr = symref.sym;
	        argl.p (3) = addr (symtab.data);
	        argl.l (3) = symtab.leng;

	        call macro;
	     end;
	     else do;
	        call mrpg_error_ (2, 0, "Unknown stmt.type ""^a""", tptr -> stmt.type);
	     end;
	  end;
	  P_ctl = "000000000";
	  valptr = field.value.b;
	  srefptr = value.sym;
	  symtabptr = symref.sym;
	  argl.p (1) = addr (symtab.data);
	  argl.l (1) = symtab.leng;

	  if (symtab.type = "ID")
	  then do;
	     daptr = symtab.use.b;
	     argct = 2;
	     ds (argct) = datum.kind;
	     call number;

	     argct = 3;
	     ds (argct) = datum.leng;
	     call number;
	     if (datum.kind = Decimal)
	     then do;
	        P.numeric = "1";
	        if (field.align = 0)
	        then P.space = "1";
	     end;
	  end;
	  else do;
	     argct = 2;
	     if (symtab.type = "NU")
	     then do;
	        ds (argct) = Decimal;
	        P.numeric = "1";
	        if (field.align = 0)
	        then P.right = "1";
	     end;
	     else do;
	        ds (argct) = Char;
	     end;
	     call number;

	     argl.l (3) = 1;
	     argl.p (3) = addr (digit (0));
	  end;

	  argct = 4;
	  ds (argct) = field.col;
	  call number;

	  argct = 5;
	  ds (argct) = field.leng;
	  call number;
	  if (field.leng = 0) & (symtab.type ^= "ST")
	  then P.space = "1";

	  argct = 6;
dcl P_ctl		char (9);
dcl 1 P		defined (P_ctl),
      2 (bsp, left, center, right, align, numeric, space) char (1);
	  if field.bsp
	  then P.bsp = "1";
	  if (field.align >= 8) & (field.align <= 11)
	  then substr (P_ctl, field.align - 6, 1) = "1";
	  argl.l (6) = 9;
	  argl.p (6) = addr (P_ctl);

	  argct = 7;
	  argl.l (7) = 1;
	  argl.p (7) = addr (field.alch);

/* take care of fill(1:2) */ /*				       */

	  macname = "value";
	  call macro;
         end;
         macname = "line";
         argct = 1;

         argl.p (1) = addr (digit (2));
         argl.l (1) = 1;

         call macro;
      end;

   end put_part; %page;
number: proc;

dcl i		fixed bin;

      i = index (reverse (ds (argct)), " ");
      argl.p (argct) = addr (substr (ds (argct), 10 - i, 1));
      argl.l (argct) = i - 1;

   end number; %skip (5);
macro: proc;

      call macro_ ("mrpg_lib", "mrpg", macname, optr, ose,
         addr (argl), argct, msg, codeptr (macro), code);
      if (code ^= 0)
      then do;
         if (code = error_table_$translation_failed)
	  | (code = error_table_$badsyntax)
         then do;
	  failed = 2;
	  code = 0;
         end;
         if (code = error_table_$translation_aborted)
         then do;
	  ose = 0;
	  failed = 3;
	  call com_err_ (code, "mrpg", "^a", msg);
	  goto exit;
         end;
         call ioa_ ("^a", msg);
         code = 0;
      end;

   end macro; %page;
expr: proc (axptr, rptr, rlen);

dcl axptr		ptr unal,		/* pointer to node to expand	       */
    rptr		ptr,		/* pointer to argument (OUT)	       */
    rlen		fixed bin;	/* length of argument	       */
dcl xptr		ptr;

      vtemp = "";
      xptr = axptr;
      if (xptr ^= null ())
      then do;
         call regen ((xptr));
      end;
      rptr = addrel (addr (vtemp), 1);
      rlen = length (vtemp);
      return;

/* note that only 1 expr of this kind can used in one macro call	       */

   end expr;
%page;
dcl P_skip	bit (1);
dcl P_stop	bit (1);
dcl P_bool_char	bit (1);
dcl P_bool_dec	bit (1);
dcl P_char_bool	bit (1);
dcl P_char_dec	bit (1);
dcl P_dec_bool	bit (1);
dcl P_dec_char	bit (1);
dcl P_int		bit (1);
dcl P_if		bit (1);
regen: proc (xptr);

dcl xptr		ptr unal;

      if (xptr -> stmt.type = "VL")
      then do;
         call regen (xptr -> value.sym);
         return;
      end;
      if (xptr -> stmt.type = "SY")
      then do;
         call regen (xptr -> symref.sym);
         return;
      end;

      if (xptr -> stmt.type = "ID")
         | (xptr -> stmt.type = "NU")
         | (xptr -> stmt.type = "ST")
      then do;
         vtemp = vtemp || xptr -> symtab.data;
         return;
      end;

      if (xptr -> stmt.type = "OP")
      then do;

/* Level => ( op1 .I_level <=  op2 )				       */
         if (xptr -> opn.op = Level)
         then do;
	  vtemp = vtemp || "(";
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || ".I_level <= ";
	  call regen (xptr -> opn.op2);
	  vtemp = vtemp || ")";
	  return;
         end;


/* Beg => (before ( op1 , op2 ) = "")				       */
         if (xptr -> opn.op = Beg)
         then do;
	  vtemp = vtemp || "(before (";
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || ",";
	  call regen (xptr -> opn.op2);
	  vtemp = vtemp || ") = """")";
	  return;
         end;


/* Nbeg => (before ( op1 , op2 ) ^= "")				       */
         if (xptr -> opn.op = Nbeg)
         then do;
	  vtemp = vtemp || "(before (";
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || ",";
	  call regen (xptr -> opn.op2);
	  vtemp = vtemp || ") ^= """")";
	  return;
         end;


/* End => (before ( reverse( op1 ) , reverse( op2 ) ) = "")		       */
         if (xptr -> opn.op = End)
         then do;
	  vtemp = vtemp || "(before (reverse (";
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || "), reverse (";
	  call regen (xptr -> opn.op2);
	  vtemp = vtemp || ")) = """")";
	  return;
         end;


/* Nend => (before ( reverse( op1 ) , reverse( op2 ) ) ^= "")	       */
         if (xptr -> opn.op = Nend)
         then do;
	  vtemp = vtemp || "(before (reverse (";
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || "), reverse (";
	  call regen (xptr -> opn.op2);
	  vtemp = vtemp || ")) ^= """")";
	  return;
         end;


/* Cont => (index ( op1 , op2 ) ^= 0)				       */
         if (xptr -> opn.op = Cont)
         then do;
	  vtemp = vtemp || "(index (";
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || ",";
	  call regen (xptr -> opn.op2);
	  vtemp = vtemp || ") ^= 0)";
	  return;
         end;


/* Ncont => (index ( op1 , op2 ) = 0)				       */
         if (xptr -> opn.op = Ncont)
         then do;
	  vtemp = vtemp || "(index (";
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || ",";
	  call regen (xptr -> opn.op2);
	  vtemp = vtemp || ") = 0)";
	  return;
         end;


/* Begw => (before ( op1 ||" " , op2 ||" " ) = "")		       */
         if (xptr -> opn.op = Beg)
         then do;
	  vtemp = vtemp || "(before (";
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || "||"" "", ";
	  call regen (xptr -> opn.op2);
	  vtemp = vtemp || "||"" "") = """")";
	  return;
         end;


/* Nbegw => (before ( op1 ||" " , op2 ||" " ) ^= "")		       */
         if (xptr -> opn.op = Nbeg)
         then do;
	  vtemp = vtemp || "(before (";
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || "||"" "", ";
	  call regen (xptr -> opn.op2);
	  vtemp = vtemp || "||"" "") ^= """")";
	  return;
         end;


/* Endw => (before ( reverse( " "|| op1 ) , reverse( " "|| op2 ) ) = "")     */
         if (xptr -> opn.op = End)
         then do;
	  vtemp = vtemp || "(before (reverse ( "" ""||";
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || "), reverse ( "" ""||";
	  call regen (xptr -> opn.op2);
	  vtemp = vtemp || ")) = """")";
	  return;
         end;


/* Nendw => (before ( reverse( " "|| op1 ) , reverse( op2 ) ) ^= "")	       */
         if (xptr -> opn.op = Nend)
         then do;
	  vtemp = vtemp || "(before (reverse ( "" ""||";
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || "), reverse ( "" ""||";
	  call regen (xptr -> opn.op2);
	  vtemp = vtemp || ")) ^= """")";
	  return;
         end;


/* Contw => (index ( " "|| op1 ||" " , " "|| op2 ||" " ) = 0)	       */
         if (xptr -> opn.op = Cont)
         then do;
	  vtemp = vtemp || "(index ( "" ""||";
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || "||"" "", "" ""||";
	  call regen (xptr -> opn.op2);
	  vtemp = vtemp || "||"" "") = 0)";
	  return;
         end;


/* Ncontw => (index ( " "|| op1 ||" " , op2 ) ^= 0)		       */
         if (xptr -> opn.op = Ncont)
         then do;
	  vtemp = vtemp || "(index ( "" ""||";
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || "||"" "", "" ""||";
	  call regen (xptr -> opn.op2);
	  vtemp = vtemp || "||"" "") ^= 0)";
	  return;
         end;


/* In => op1 ( op2 )					       */
         if (xptr -> opn.op = In)
         then do;
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || "(";
	  call regen (xptr -> opn.op2);
	  vtemp = vtemp || ")";
	  return;
         end;


/* Nin => ^ op1 ( op2 )					       */
         if (xptr -> opn.op = Nin)
         then do;
	  vtemp = vtemp || "^";
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || "(";
	  call regen (xptr -> opn.op2);
	  vtemp = vtemp || ")";
	  return;
         end;

/* Skip => if ( op1 ) then call P_skip( op2 );			       */
         if (xptr -> opn.op = Skip)
         then do;
	  vtemp = vtemp || "if (";
	  call regen (xptr -> opn.op1);
	  P_skip = "1"b;
	  vtemp = vtemp || ") then call P_skip(";
	  call regen (xptr -> opn.op2);
	  vtemp = vtemp || ");";
	  return;
         end;


/* Stop => if ( op1 ) then call P_stop( op2 );			       */
         if (xptr -> opn.op = Stop)
         then do;
	  vtemp = vtemp || "if (";
	  call regen (xptr -> opn.op1);
	  P_stop = "1"b;
	  vtemp = vtemp || ") then call P_stop(";
	  call regen (xptr -> opn.op2);
	  vtemp = vtemp || ");";
	  return;
         end;


/* Tran => op1 ( op2 )					       */
         if (xptr -> opn.op = Tran)
         then do;
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || "(";
	  call regen (xptr -> opn.op2);
	  vtemp = vtemp || ")";
	  return;
         end;


/* n_s => n_s						       */
         if (xptr -> opn.op = n_s)
         then do;
	  vtemp = vtemp || "n_s";
	  return;
         end;


/* s_n => s_n						       */
         if (xptr -> opn.op = s_n)
         then do;
	  vtemp = vtemp || "s_n";
	  return;
         end;


/* s_s => s_s						       */
         if (xptr -> opn.op = s_s)
         then do;
	  vtemp = vtemp || "s_s";
	  return;
         end;


/* b_c => P_bool_char( op1 )					       */
         if (xptr -> opn.op = b_c)
         then do;
	  P_bool_char = "1"b;
	  vtemp = vtemp || "P_bool_char(";
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || ")";
	  return;
         end;


/* b_d => P_bool_dec( op1 ) */
         if (xptr -> opn.op = b_d)
         then do;
	  P_bool_dec = "1"b;
	  vtemp = vtemp || "P_bool_dec(";
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || ")";
	  return;
         end;


/* c_b => P_char_bool( op1 )					       */
         if (xptr -> opn.op = c_b)
         then do;
	  P_char_bool = "1"b;
	  vtemp = vtemp || "P_char_bool((";
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || "))";
	  return;
         end;


/* c_d => convert(F_d20,  op1 )				       */
         if (xptr -> opn.op = c_d)
         then do;
	  vtemp = vtemp || "convert(F_d20,";
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || ")";
	  return;
         end;


/* d_b => P_dec_bool( op1)					       */
         if (xptr -> opn.op = d_b)
         then do;
	  P_dec_bool = "1"b;
	  vtemp = vtemp || "P_dec_bool(";
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || ")";
	  return;
         end;


/* d_c => P_dec_char					       */
/* ( op1 )						       */
         if (xptr -> opn.op = d_c)
         then do;
	  P_dec_char = "1"b;
	  vtemp = vtemp || "P_dec_char(";
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || ")";
	  return;
         end;


/* If => P_if( op1 , op2 , op3 )				       */
         if (xptr -> opn.op = If)
         then do;
	  P_if = "1"b;
	  vtemp = vtemp || "P_if (";
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || ",";
	  if (xptr -> opn.op2 = null ())
	  then vtemp = vtemp || """""";
	  else call regen (xptr -> opn.op2);
	  vtemp = vtemp || ",";
	  if (xptr -> opn.op3 = null ())
	  then vtemp = vtemp || """""";
	  else call regen (xptr -> opn.op3);
	  vtemp = vtemp || ")";
	  return;
         end;



/* Pnum => P_int( op1 .I_page)				       */
         if (xptr -> opn.op = Pnum)
         then do;
	  vtemp = vtemp || "P_int (";
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || ".I_page)";
	  return;
         end;


/* Func =>  op1 ( op2 )					       */
         if (xptr -> opn.op = Func)
         then do;
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || "(";
	  call regen (xptr -> opn.op2);
	  vtemp = vtemp || ")";
	  return;
         end;


/* Paren => ( op1 )						       */
         if (xptr -> opn.op = Paren)
         then do;
	  vtemp = vtemp || "(";
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || ")";
	  return;
         end;


/* Add =>  op1 + op2					       */
         if (xptr -> opn.op = Add)
         then do;
	  if (xptr -> opn.op1 ^= null ())
	  then call regen (xptr -> opn.op1);
	  vtemp = vtemp || "+";
	  call regen (xptr -> opn.op2);
	  return;
         end;


/* Sub =>  op1 - op2					       */
         if (xptr -> opn.op = Sub)
         then do;
	  if (xptr -> opn.op1 ^= null ())
	  then call regen (xptr -> opn.op1);
	  vtemp = vtemp || "-";
	  call regen (xptr -> opn.op2);
	  return;
         end;


/* Mul =>  op1 * op2					       */
         if (xptr -> opn.op = Mul)
         then do;
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || "*";
	  call regen (xptr -> opn.op2);
	  return;
         end;


/* Div =>  op1 / op2					       */
         if (xptr -> opn.op = Div)
         then do;
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || "/";
	  call regen (xptr -> opn.op2);
	  return;
         end;


/* Rpt => copy( op1 , op2 )					       */
         if (xptr -> opn.op = Rpt)
         then do;
	  vtemp = vtemp || "copy(";
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || ",";
	  call regen (xptr -> opn.op2);
	  vtemp = vtemp || ")";
	  return;
         end;


/* Cat =>  op1 || op2					       */
         if (xptr -> opn.op = Cat)
         then do;
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || "||";
	  call regen (xptr -> opn.op2);
	  return;
         end;


/* EQ =>  op1 = op2						       */
         if (xptr -> opn.op = EQ)
         then do;
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || "=";
	  call regen (xptr -> opn.op2);
	  return;
         end;


/* NE =>  op1 ^= op2					       */
         if (xptr -> opn.op = NE)
         then do;
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || "^=";
	  call regen (xptr -> opn.op2);
	  return;
         end;


/* LE =>  op1 <= op2					       */
         if (xptr -> opn.op = LE)
         then do;
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || "<=";
	  call regen (xptr -> opn.op2);
	  return;
         end;


/* GE =>  op1 >= op2					       */
         if (xptr -> opn.op = GE)
         then do;
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || ">=";
	  call regen (xptr -> opn.op2);
	  return;
         end;


/* LT =>  op1 < op2						       */
         if (xptr -> opn.op = LT)
         then do;
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || "<";
	  call regen (xptr -> opn.op2);
	  return;
         end;


/* GT =>  op1 > op2						       */
         if (xptr -> opn.op = GT)
         then do;
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || ">";
	  call regen (xptr -> opn.op2);
	  return;
         end;


/* Not => ^ op2						       */
         if (xptr -> opn.op = Not)
         then do;
	  vtemp = vtemp || "^";
	  call regen (xptr -> opn.op2);
	  return;
         end;


/* And =>  op1 & op2					       */
         if (xptr -> opn.op = And)
         then do;
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || "&";
	  call regen (xptr -> opn.op2);
	  return;
         end;


/* Substr => substr( op1, op2, op3)				       */
         if (xptr -> opn.op = Substr)
         then do;
	  vtemp = vtemp || " substr(";
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || ",";
	  call regen (xptr -> opn.op2);
	  if (xptr -> opn.op3 ^= null ())
	  then do;
	     vtemp = vtemp || ",";
	     call regen (xptr -> opn.op3);
	  end;
	  vtemp = vtemp || ")";
	  return;
         end;

/* Or =>  op1 | op2						       */
         if (xptr -> opn.op = Or)
         then do;
	  call regen (xptr -> opn.op1);
	  vtemp = vtemp || "|";
	  call regen (xptr -> opn.op2);
	  return;
         end;


      end;

      vtemp = vtemp || "
<<opn.op>>
";

   end regen;

dcl (mrpg_dump_, mrpg_dump_$list, mrpg_dump_$all) entry (ptr unal, fixed bin);

dcl I_day		char (8) int static init ("I_DAY");
dcl I_hhmmss	char (8) int static init ("I_HHMMSS");
dcl I_mmddyy	char (8) int static init ("I_MMDDYY");
dcl I_month	char (8) int static init ("I_MONTH");
dcl I_yyddd	char (8) int static init ("I_YYDDD");
dcl vtemp		char (512) var;
dcl car		(2000) char (1) unal based;
dcl name		char (32) var;
dcl mrpg_error_	entry options (variable);
dcl get_seg_ptr_	entry (char (*), bit (6) aligned, fixed bin (24), ptr, fixed bin (35));
dcl release_seg_ptr_ entry (ptr, fixed bin (24), fixed bin (35));
dcl bc		fixed bin (24);
dcl pt		char (3);
dcl rc		char (1);
dcl dflt_sw	bit (1);
dcl msg		char (1000) var;
dcl failed	fixed bin;
dcl com_err_	entry options (variable);
dcl macname	char (32) var;
dcl ds		(24) pic "(7)-9";
dcl cleanup	condition;
dcl ose		fixed bin (24);
dcl optr		ptr;
dcl i		fixed bin;
dcl argct		fixed bin;
dcl max_name	fixed bin;
dcl error_table_$badsyntax fixed bin (35) ext static;
dcl error_table_$translation_aborted fixed bin (35) ext static;
dcl error_table_$translation_failed fixed bin (35) ext static;
dcl ioa_		entry options (variable);
dcl macro_$free	entry (bit (1));
dcl mrpg		entry;
dcl stop_mrpg	condition;
dcl t_n		char (13) int static options (constant) init ("float dec(20)");
dcl t_c		char (14) int static options (constant) init ("char(&leng)var");
%include macro;
%include mrpg_tree;
dcl (db_sw, lg_sw, stop_sw) bit (1) int static init ("0"b);
dcl execptr	ptr;
dbn: entry; db_sw = "1"b; return;
lgn: entry; lg_sw = "1"b; return;
stopn: entry; stop_sw = "1"b; return;
stopf: entry; stop_sw = "0"b; return;
lgf: entry; lg_sw = "0"b; return;
dbf: entry; db_sw = "0"b; return;
dcl (addr, addrel, before, index, length, max, null, reverse, string, substr) builtin;
   end mrpg_generate_;
