/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

report_: proc;

	call com_err_ (0, "report_", "Cannot call I/O switch directly.");
	return;

report_attach: entry (iocb_ptr, option_array, com_err_sw, code);

dcl  iocb_ptr ptr,					/* points to the control block of switch to be attached */
     option_array (*)char (*)var,
     com_err_sw bit (1),
     code fixed bin (35);

	iocbp = iocb_ptr;
	if (iocbp -> iocb.attach_descrip_ptr ^= null ())
	then do;
	     code = error_table_$not_detached;
	     return;
	end;

	if (hbound (option_array, 1) = 0)
	then do;
	     code = error_table_$insufficient_open;
	     if com_err_sw
	     then do;
		call com_err_(code,"report_","Missing report name.");
	     end;
	     return;
	end;
	call hcs_$make_ptr (null(), (option_array (1)), "attach", ep_ptr, code);
	if (code ^= 0)
	then do;
	     if com_err_sw
	     then do;
		call com_err_(code,"report_","^a$attach",option_array(1));
	     end;
	     return;
	end;

	rcbp = null ();
	call cu_$ptr_call (ep_ptr, rcbp, option_array, code);
	if (code ^= 0)
	then do;
	     if com_err_sw
	     then do;
		call com_err_(code,"report_");
	     end;
	     return;
	end;

	iocbp -> iocb.open = report_$open;
	iocbp -> iocb.detach_iocb = report_$detach;
	iocbp -> iocb.attach_data_ptr = rcbp;
	aloc_len = length (option_array (1)) + 8;
	allocate descrip;
	descrip.string = "report_ " || option_array (1);
	iocbp -> iocb.attach_descrip_ptr = d_ptr;

	code = 0;
	call iox_$propagate (iocb_ptr);
	return;

dcl 1 descrip based (d_ptr),
    2 leng fixed bin,
    2 string char (aloc_len refer (leng));
dcl  aloc_len fixed bin;
dcl  d_ptr ptr;
dcl  cmode char (20)var;
dcl  rcbp ptr;
dcl 1 rcb based (rcbp),
    2 E,
      3 mode fixed bin,
      3 write entry (ptr, ptr, fixed bin (21), fixed bin (35)),
      3 close entry (ptr, fixed bin (35));

open:	entry (iocb_ptr, mode, unused, code);
dcl  mode fixed bin,
     unused bit (1);

	iocbp = iocb_ptr -> iocb.actual_iocb_ptr;
	rcbp = iocbp -> attach_data_ptr;
	if (mode ^= E.mode)
	then do;
	     code = error_table_$missent;
	     return;
	end;
	if (mode = 2)
	then do;
	     cmode = "stream_output";
	     iocbp -> iocb.put_chars = report_$put;
	end;
	else if (mode = 5)
	then do;
	     cmode = "sequential_output";
	     iocbp -> iocb.write_record = report_$put;
	end;
	else do;
	     code = error_table_$no_operation;
	     return;
	end;
	aloc_len = length (cmode);
	allocate descrip;
	descrip.string = cmode;
	iocbp -> iocb.open_descrip_ptr = d_ptr;
	iocbp -> iocb.close = report_$close;
	call iox_$propagate (iocb_ptr);
	return;


put:	entry (iocb_ptr, buff_ptr, rec_len, code);

dcl  buff_ptr ptr,
     rec_len fixed bin (21);
	iocbp = iocb_ptr -> actual_iocb_ptr;
	rcbp = iocbp -> attach_data_ptr;
          code = 0;
	call E.write (rcbp, buff_ptr, rec_len, code);
	return;


close:	entry (iocb_ptr, code);

	iocbp = iocb_ptr -> actual_iocb_ptr;
	rcbp = iocbp -> iocb.attach_data_ptr;
	call E.close (rcbp, code);
	iocbp -> iocb.open = report_$reopen;
	iocbp -> iocb.detach_iocb = report_$detach;
	iocbp -> iocb.open_descrip_ptr = null ();
	call iox_$propagate (iocb_ptr);
	return;

reopen:	entry (iocb_ptr, mode, unused, code);

	code = error_table_$not_detached;
	return;

detach:	entry (iocb_ptr, code);

	iocb_ptr -> iocb.attach_descrip_ptr = null ();
	call iox_$propagate (iocb_ptr);
	return;


dcl com_err_ entry options(variable);
dcl  cu_$decode_entry_value entry;
dcl  cu_$ptr_call entry options(variable);
dcl  env_ptr ptr;
dcl  ep_ptr ptr;
dcl  error_table_$insufficient_open fixed bin(35)ext static;
dcl  error_table_$missent fixed bin(35)ext static;
dcl  error_table_$no_operation fixed bin(35)ext static;
dcl  error_table_$not_detached fixed bin(35)ext static;
dcl  hcs_$make_ptr entry(ptr,char(*),char(*),ptr,fixed bin(35));
dcl  iocbp ptr;
dcl iox_$propagate entry (ptr);
dcl  report_$close entry;
dcl  report_$detach entry;
dcl  report_$open entry;
dcl  report_$put entry;
dcl  report_$reopen entry;
%include iocb;

     end;
