/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/* format: style2 */
/*  the user ring ibm_pc io module --- ibm_pc_io_
    Uses the IBM PC-to-PC data transfer protocol as defined by IBM in their
   "Asynchronous Communication Support" manual, version 2.0.

1.  Definitions

    CR$     Carriage Return (Hex 0D) (Oct 15)
    XON$    XON Character (Hex 11) (Oct 21)
    XOFF$   XOFF Character (Hex 13) (Oct 23)
    IBG$    Begin Transmission Code (Hex 1C) (Oct 34)
    ITM$    Terminate Transmission Code (Hex 17) (Oct 27)

2.  Transmission Medium Level Protocol

    Asynchronous, 7 data bits.

    Files must be ASCII text files and have no lines longer than 250
    characters. 

3.  Message Block Level Protocol

    The standard transmission portion of the block is a variable length
    character block, maximum 250 characters, followed by a carriage return.  

4.  Program Considerations

    1.  The program loops, reading the communications line and waiting for
        reception of a text line ending with the control characters IBG$CR$.

    2.  When such a line is received, the program sends a text line ending
        with IBG$CR$.  (This line may contain an informative message as well,
        such as Starting file transmission)


    3.  The program transmits the file.  Each line in the file should
        be sent as a line ending in a Carriage Return (CR$)

    4.  While transmission is taking place the program should monitor the
        input from the communications line and take the following actions:
            a.  If an XOFF$CR$ is seen, stop transmission of lines.  When
                an XON$CR$ is seen, resume transmission.
            b.  If a line ending in ITM$CR$ is seen, stop all transmission.
                This line will contain as text the reason the receiving IBM
                Personal Computer has requested termination.
            c.  When all lines in the file have been sent, the program should
                send a line ending in ITM$CR$. (This line can contain an
                appropriate message, such as "file transmission completed".)

5. Program Considerations

    1.  The program loops, sending out a message ending in IBG$CR$ every 15
        to 20 seconds.  This message may also contain text, such as Ready to
        receive file.)

    2.  During the loop in Step 1, the communications line is continually 
        monitored for messages from the IBM Personal Computer.   When a line
        ending in IBG$CR$ is received, the program moves on to step 3.

    3.  Each line received (after the one ending in IBG$CR$) is stored as
        a file record.  As these lines end with Carriage Returns (CR$), the
        program might delete the CR$ before storing a line.  Before storing
        a line, the program checks it to see if it ends in ITM$CR$.  If it
        does, the program does not store that line, but closes the file
        and stops operation.

    4.  The program can stop transmission by the IBM Personal Computer by 
        sending a line ending with an ITM$CR$.  This line may also contain
        a message giving the reason for the termination.

    5.  If the program is receiving lines faster that they can be stored, it
        can suspend transmission by sending a line consisting of an XOFF$CR$
        to the IBM Personal Computer.  When it has caught up with the input,
        it can start up transmission by sending a line consisting of an XON$CR$
        to the IBM Personal Computer.
*/

%page;
ibm_pc_io_:
     proc;
	return;					/* not an entry  */
						/*  iox_ io module for ibm_pc protocol i/o written 6/84 by M.J. Mallmes  */

/*  Parameters  */

	dcl     arg_actual_len	 fixed bin (21);
	dcl     arg_buf_ptr		 ptr;		/* ptr to user buffer (input) */
	dcl     arg_buf_len		 fixed bin (21);	/* length of user buffer (input) */
	dcl     arg_iocbp		 ptr;		/* ptr to iocb (input) */
	dcl     code		 fixed bin (35);	/*  Multics standard error code  (output */
	dcl     com_err_switch	 bit (1) aligned;	/* ON if should call com_err_ for errors (input)  */
	dcl     mode		 fixed bin;
	dcl     option_array	 (*) char (*) varying;


/*  Automatic  */

	dcl     actual_iocbp	 ptr;		/* copy of iocb.actual_iocb_ptr */
	dcl     arg_buf_pos		 fixed bin;	/* index into passed argument buffer  */
	dcl     attach_data_ptr	 ptr;		/* ptr to iocb's attach_data  */
	dcl     buf_ptr		 ptr;
	dcl     buffer_empty	 bit (1);		/* ON if a packet is to be received  */
	dcl     buffer_full		 bit (1);		/* ON if a packet is to be sent  */
	dcl     carriage_return_found	 bit (1);
	dcl     carriage_return_needed bit (1);
	dcl     control_chars	 char (2);
	dcl     ec		 fixed bin (35);
	dcl     iocbp		 ptr;		/*  copy of arg_iocbp */
	dcl     mask		 bit (36) aligned;	/* ips mask */
	dcl     system_free_area_ptr	 ptr;

/*  Based  */

	dcl     01 attach_data	 aligned based (attach_data_ptr),
						/* iocb attach_data */
		02 attach_descrip	 char (256) varying,
		02 open_descrip	 char (32) varying,
		02 target_iocbp	 ptr,		/* ptr to target switch iocb */
		02 buf		 char (250),	/* internal buffer  */
		02 buf_pos	 fixed bin (21),	/* index into buf  */
		02 error_code	 fixed bin (35),	/* 0 if normal close operation */
		02 xon_sw		 bit (1) unal,
		02 eof_sw		 bit (1) unal;


	dcl     01 open_descrip	 based aligned,	/* open description for iocb  */
		02 length		 fixed bin (17),
		02 string		 char (0 refer (open_descrip.length));

	dcl     system_free_area	 area based (system_free_area_ptr);

/*  Constants  */

	dcl     One_Second		 fixed bin (71) static options (constant) init (1000000);
	dcl     Ten_Seconds		 fixed bin (71) static options (constant) init (10000000);
						/* 110 seconds */
	dcl     Terminate_Transmission char (2) static options (constant) init ("");
	dcl     Buf_Size		 fixed bin (21) static options (constant) init (250);
	dcl     Begin_Transmission	 char (2) static options (constant) init ("");
	dcl     Dim_name		 char (10) static options (constant) init ("ibm_pc_io_");
	dcl     XON		 char (2) static options (constant) init ("");
	dcl     XOFF		 char (2) static options (constant) init ("");
	dcl     CR		 char (1) static options (constant) init ("");

/*  Builtin    */

	dcl     (addcharno, addr, hbound, index, lbound, null, rtrim, substr)
				 builtin;

/* Conditions */

	dcl     (any_other, cleanup)	 condition;

/*  External Static  */

	dcl     error_table_$bad_arg	 fixed bin (35) ext static;
	dcl     error_table_$bad_mode	 fixed bin (35) ext static;
	dcl     error_table_$badopt	 fixed bin (35) ext static;
	dcl     error_table_$end_of_info
				 fixed bin (35) ext static;
	dcl     error_table_$long_record
				 fixed bin (35) ext static;
	dcl     error_table_$noarg	 fixed bin (35) ext static;
	dcl     error_table_$no_iocb	 fixed bin (35) ext static;
	dcl     error_table_$not_attached
				 fixed bin (35) ext static;
	dcl     error_table_$not_detached
				 fixed bin (35) ext static;
	dcl     error_table_$not_open	 fixed bin (35) ext static;
	dcl     error_table_$timeout	 fixed bin (35) ext static;
	dcl     error_table_$unable_to_do_io
				 fixed bin (35) ext static;

/*  Procedures       */

	dcl     com_err_		 entry () options (variable);
	dcl     get_system_free_area_	 entry () returns (ptr);
	dcl     hcs_$reset_ips_mask	 entry (bit (36) aligned, bit (36) aligned);
	dcl     hcs_$set_ips_mask	 entry (bit (36) aligned, bit (36) aligned);
	dcl     iox_$err_no_operation	 entry () options (variable);
	dcl     iox_$err_not_attached	 entry () options (variable);
	dcl     iox_$err_not_open	 entry () options (variable);
	dcl     iox_$err_not_closed	 entry () options (variable);
	dcl     iox_$get_chars	 entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
	dcl     iox_$look_iocb	 entry (char (*), ptr, fixed bin (35));
	dcl     iox_$propagate	 entry (ptr);
	dcl     iox_$put_chars	 entry (ptr, ptr, fixed bin (21), fixed bin (35));
	dcl     timed_io_$get_chars	 entry (ptr, fixed bin (71), ptr, fixed bin (21), fixed bin (21), fixed bin (35));


%page;

/*  Include Files    */

%include iocb;
%page;
%include iox_modes;
%page;

/*  This entry attaches the ibm_pc_io_ i/o module after verifying that
    the target switch is open for stream_input_output  */

ibm_pc_io_attach:
     entry (arg_iocbp, option_array, com_err_switch, code);

	ec = 0;
	mask = ""b;
	iocbp = arg_iocbp;

	if hbound (option_array, 1) < 1
	then call error (0, com_err_switch, error_table_$noarg, "Usage:  ibm_pc_io_ switch_name {-control_arguments}");

	attach_data_ptr = null ();
	on cleanup call clean_up_attach;

	if iocbp -> iocb.attach_descrip_ptr ^= null ()
	then call error (0, com_err_switch, error_table_$not_detached, "");

	system_free_area_ptr = get_system_free_area_ ();
	allocate attach_data in (system_free_area) set (attach_data_ptr);

/*  see if the target switch is attached and open  for stream_input_output */
	call iox_$look_iocb (rtrim (option_array (1)), target_iocbp, ec);
	if ec = error_table_$no_iocb
	then call error (1, com_err_switch, ec, rtrim (option_array (1)));
	if target_iocbp -> iocb.actual_iocb_ptr -> iocb.attach_descrip_ptr = null
	then call error (1, com_err_switch, error_table_$not_attached, rtrim (option_array (1)));
	if target_iocbp -> iocb.actual_iocb_ptr -> iocb.open_descrip_ptr = null
	then call error (1, com_err_switch, error_table_$not_open, rtrim (option_array (1)));
	if target_iocbp -> iocb.actual_iocb_ptr -> iocb.open_descrip_ptr -> open_descrip.string
	     ^= iox_modes (Stream_input_output)
	then call error (1, com_err_switch, error_table_$bad_mode, rtrim (option_array (1)));


	attach_data.attach_descrip = Dim_name || " " || rtrim (option_array (1));
	attach_data.open_descrip = "";
	attach_data.eof_sw = "0"b;
	attach_data.buf_pos = 0;
	attach_data.error_code = 0;

	call hcs_$set_ips_mask (""b, mask);
	iocbp -> iocb.attach_data_ptr = attach_data_ptr;
	iocbp -> iocb.attach_descrip_ptr = addr (attach_data.attach_descrip);
	iocbp -> iocb.detach_iocb = ibm_pc_io_detach;
	iocbp -> iocb.open_descrip_ptr = null ();
	iocbp -> iocb.open = ibm_pc_io_open;
	iocbp -> iocb.modes = iox_$err_no_operation;
	iocbp -> iocb.control = iox_$err_no_operation;
	call iox_$propagate (iocbp);
	call hcs_$reset_ips_mask (mask, ""b);
EXIT:
	return;


%page;
/*  Error calls com_err_ if the loud switch is set and goes to the attach return */

error:
     proc (cleanup_level, call_com_err, ec, msg);

	dcl     cleanup_level	 fixed bin;
	dcl     call_com_err	 bit (1) aligned;
	dcl     ec		 fixed bin (35);	/* Multics standard error code */
	dcl     msg		 char (*);	/* Additional error information */

	goto Err (cleanup_level);

Err (1):
	free attach_data;

Err (0):
	if call_com_err
	then call com_err_ (ec, Dim_name, "^a", msg);
	code = ec;
	goto EXIT;
     end error;


%page;

/*  This entry detaches the ibm_pc_io_ i/o module and frees the associated
    information  */

ibm_pc_io_detach:
     entry (arg_iocbp, code);

	call set_up;
	on any_other call handler;
	call hcs_$set_ips_mask ("0"b, mask);
	actual_iocbp -> iocb.attach_descrip_ptr = null ();
	actual_iocbp -> iocb.attach_data_ptr = null ();
	actual_iocbp -> iocb.open = iox_$err_not_attached;
	actual_iocbp -> iocb.detach_iocb = iox_$err_not_attached;
	call iox_$propagate (actual_iocbp);
	call hcs_$reset_ips_mask (mask, "0"b);
	revert any_other;
	free attach_data;
	return;

%page;

/*  This entry sets the open description and the legal operation entries
    in the iocb.  Operation permitted:

             all the time: close
	   input:        get_chars, get_line
	   output:       put_chars

    Before returning it performs a handshake with the remote ibm_pc.  */


ibm_pc_io_open:
     entry (arg_iocbp, mode, com_err_switch, code);

	on cleanup call terminate_io;
	call set_up;

	if mode ^= Stream_input & mode ^= Stream_output
	then do;
		code = error_table_$bad_mode;
		return;
	     end;

	if mode = Stream_output
	then do;					/* Perform handshake - sender */
		call get_control_chars (control_chars, Ten_Seconds, ec);
		if control_chars = Terminate_Transmission
		then ec = error_table_$unable_to_do_io;

		do while ((ec = 0 | ec = error_table_$timeout) & control_chars ^= Begin_Transmission);
		     call get_control_chars (control_chars, Ten_Seconds, ec);
		     if control_chars = Terminate_Transmission
		     then ec = error_table_$unable_to_do_io;
		end;

		if ec ^= 0
		then do;
			code = error_table_$unable_to_do_io;
			return;
		     end;

/* The receiver sent IBG$CR$ so complete the handshake  */
		call send_control_chars (Begin_Transmission);
		attach_data.xon_sw = "1"b;
	     end;


	if mode = Stream_input
	then do;					/* Perform handshake - receiver */

		call send_control_chars (Begin_Transmission);
		call get_control_chars (control_chars, Ten_Seconds, ec);
		if control_chars = Terminate_Transmission
		then ec = error_table_$unable_to_do_io;

		do while ((ec = 0 | ec = error_table_$timeout) & control_chars ^= Begin_Transmission);
		     call send_control_chars (Begin_Transmission);
		     call get_control_chars (control_chars, Ten_Seconds, ec);
		     if control_chars = Terminate_Transmission
		     then ec = error_table_$unable_to_do_io;
		end;

		if ec ^= 0
		then do;
			code = error_table_$unable_to_do_io;
			return;
		     end;
	     end;

	attach_data_ptr -> attach_data.open_descrip = iox_modes (mode);
	on any_other call handler;
	call hcs_$set_ips_mask (""b, mask);
	actual_iocbp -> iocb.open_descrip_ptr = addr (attach_data.open_descrip);
	actual_iocbp -> iocb.open = iox_$err_not_closed;
	actual_iocbp -> iocb.close = ibm_pc_io_close;
	actual_iocbp -> iocb.detach_iocb = iox_$err_not_closed;
	if mode = Stream_input
	then do;
		actual_iocbp -> iocb.get_line = ibm_pc_io_get_line;
		actual_iocbp -> iocb.get_chars = ibm_pc_io_get_chars;
	     end;
	else if mode = Stream_output
	then actual_iocbp -> iocb.put_chars = ibm_pc_io_put_chars;
	call iox_$propagate (actual_iocbp);
	call hcs_$reset_ips_mask (mask, ""b);
	revert any_other;

	return;

%page;
/*  This procedure closes the ibm_pc i/o switch.  If the switch was
    open for stream_output it flushes the output buffer and sends
    the ITM$CR$ control characters to the remote ibm_pc.
    If the last packet cannot be transmitted, the i/o switch is
    closed and the error code error_table_$unable_to_do_io is returned.   */

ibm_pc_io_close:
     entry (arg_iocbp, code);

	on cleanup call terminate_io;
	call set_up;

	if actual_iocbp -> iocb.open_descrip_ptr -> open_descrip.string = iox_modes (Stream_output)
	     & attach_data.error_code = 0
	then do;
		buf_ptr = addr (attach_data.buf);
		if attach_data.buf_pos ^= 0 & substr (attach_data.buf, buf_pos, 1) ^= CR
		then do;
			attach_data.buf_pos = attach_data.buf_pos + 1;
			substr (attach_data.buf, attach_data.buf_pos, 1) = CR;
		     end;
		call send_data_packet (ec);
		if attach_data.error_code = 0
		then call terminate_io;
	     end;

	on any_other call handler;
	call hcs_$set_ips_mask ("0"b, mask);
	actual_iocbp -> iocb.open_descrip_ptr = null;
	actual_iocbp -> iocb.open = ibm_pc_io_open;
	actual_iocbp -> iocb.detach_iocb = ibm_pc_io_detach;
	call iox_$propagate (actual_iocbp);
	call hcs_$reset_ips_mask (mask, "0"b);
	revert any_other;
	code = ec;
	return;

/*  This entry is called to input characters received from the remote
    connection.  Packets are read until the user request is satisfied.  
    Data received, but not requested by the user, is stored in an internal
    buffer, and is available on subsequent reads.            */

ibm_pc_io_get_chars:
     entry (arg_iocbp, arg_buf_ptr, arg_buf_len, arg_actual_len, code);

	carriage_return_needed = "0"b;
	goto get_data;

/*  This entry is called to input characters received from the remote
    connection.  Packets are read until the user request is satisfied.
    i.e. a carriage_return is found or the user buffer is filled. Data
    received, but not requested by the user, is stored in an internal
    buffer, and is available on subsequent reads            */

ibm_pc_io_get_line:
     entry (arg_iocbp, arg_buf_ptr, arg_buf_len, arg_actual_len, code);

	carriage_return_needed = "1"b;

get_data:
	on cleanup call terminate_io;
	call set_up;

	if arg_buf_len = 0
	then return;
	if arg_buf_len < 0
	then do;
		code = error_table_$bad_arg;
		return;
	     end;

	carriage_return_found = "0"b;
	arg_buf_pos = 0;

	do while ("1"b);
	     ec = 0;
	     call unload_internal_buffer (buffer_empty);
	     if buffer_empty
	     then do;

		     if attach_data.eof_sw
		     then do;
			     ec = error_table_$end_of_info;
			     return;
			end;

		     call get_data_packet (ec);
		     if ec ^= 0
		     then do;
			     if ec = error_table_$end_of_info
			     then attach_data.eof_sw = "1"b;
			     else call terminate_io;
			     attach_data.buf_pos = 0;
			     goto done_receive;
			end;
		end;
	     else goto done_receive;
	end;

done_receive:
	if (ec = 0) & carriage_return_needed & ^carriage_return_found
	then ec = error_table_$long_record;
	arg_actual_len = arg_buf_pos;
	code = ec;
	return;


%page;

/*  This internal procedure moves the data from the internal buffer to the user's
    buffer during a get_chars or get_line operation.  */

unload_internal_buffer:
     proc (buffer_empty);
	dcl     buffer_empty	 bit (1);		/* ON if we need more data from the remote ibm_pc */
	dcl     n_chars		 fixed bin;
	dcl     overlay		 char (arg_buf_len) based;
						/* user buffer */
	dcl     i			 fixed bin;


	buffer_empty = "0"b;
	if attach_data.buf_pos = 0
	then do;
		buffer_empty = "1"b;
		return;
	     end;

	if arg_buf_len - arg_buf_pos > attach_data.buf_pos
	then n_chars = attach_data.buf_pos;
	else n_chars = arg_buf_len - arg_buf_pos;

	if carriage_return_needed
	then do;
		i = index (substr (attach_data.buf, 1, n_chars), CR);
		if i ^= 0
		then do;
			carriage_return_found = "1"b;
			n_chars = i;
		     end;

	     end;

	substr (arg_buf_ptr -> overlay, arg_buf_pos + 1, n_chars) = substr (attach_data.buf, 1, n_chars);
	substr (attach_data.buf, 1, attach_data.buf_pos - n_chars) =
	     substr (attach_data.buf, n_chars + 1, attach_data.buf_pos - n_chars);
	attach_data.buf_pos = attach_data.buf_pos - n_chars;
	arg_buf_pos = arg_buf_pos + n_chars;
	if (^carriage_return_found) & (arg_buf_pos < arg_buf_len)
	then buffer_empty = "1"b;
	return;
     end unload_internal_buffer;


/*  This internal procedure gets the actual packet from the remote ibm_pc
    during a get_chars or get_line operation.  Data is received via variable
    length packets ending in a carriage return character.  */

get_data_packet:
     proc (ec);

	dcl     chase_buf_ptr	 ptr;
	dcl     ec		 fixed bin (35);
	dcl     n_read		 fixed bin (21);
	dcl     to_read		 fixed bin (21);

	ec = 0;
	attach_data.buf_pos = 0;
	to_read = Buf_Size;
	buf_ptr = addr (attach_data.buf);
	chase_buf_ptr = buf_ptr;

	do while (to_read > 0 & ec = 0);
	     call iox_$get_chars (attach_data.target_iocbp, chase_buf_ptr, to_read, n_read, ec);
	     if ec ^= 0
	     then return;
	     attach_data.buf_pos = attach_data.buf_pos + n_read;
	     if substr (attach_data.buf, attach_data.buf_pos, 1) = CR
	     then to_read = 0;
	     else to_read = Buf_Size - attach_data.buf_pos;
	     chase_buf_ptr = addcharno (buf_ptr, attach_data.buf_pos);
	end;

	if index (attach_data.buf, Terminate_Transmission) ^= 0
	then ec = error_table_$end_of_info;
	return;
     end get_data_packet;



%page;
/*  This entry is called to output characters to the remote connection.
    Data passed by the user is transmitted via variable length packets.
    Where each packet ends in a carriage return. 
    Packets are transmitted until the user request is satisfied.  */


ibm_pc_io_put_chars:
     entry (arg_iocbp, arg_buf_ptr, arg_buf_len, code);
	/*** entry to perform put_chars operation */

	on cleanup call terminate_io;
	call set_up;

	if arg_buf_len = 0
	then return;
	if arg_buf_len < 0
	then do;
		code = error_table_$bad_arg;
		return;
	     end;

	arg_buf_pos = 0;
	buf_ptr = addr (attach_data.buf);

	do while ("1"b);
	     ec = 0;
	     call load_internal_buffer (buffer_full);
	     if buffer_full
	     then do;
		     call send_data_packet (ec);
		     if ec ^= 0
		     then do;
			     call terminate_io;
			     goto done_transmitting;
			end;
		     else attach_data.buf_pos = 0;
		end;
	     else goto done_transmitting;
	end;
done_transmitting:
	code = ec;
	return;


/*  This internal procedure controls the necessary buffer operations
    during a put_chars operation.  If the user's buffer contains more
    than 250 characters or the user's buffer contains a carriage return
    character then buffer_full = true.
    Otherwise, if a full packet cannot be sent (data does not end in a
    carriage return), data is stored in an internal buffer until 
    (1) subsequent writes fill the buffer, or (2) the ibm_pc switch is
    closed, or (3) a subsequent write operation passes data containing a
    carriage return.             */

load_internal_buffer:
     proc (buffer_full);

	dcl     buffer_full		 bit (1);
	dcl     CR_found		 bit (1);
	dcl     n_chars		 fixed bin;
	dcl     overlay		 char (arg_buf_len) based;
	dcl     temp_buf_len	 fixed bin (21);


	buffer_full = "0"b;
	CR_found = "0"b;
	if arg_buf_pos = arg_buf_len
	then return;

	temp_buf_len = index (substr (arg_buf_ptr -> overlay, arg_buf_pos + 1, arg_buf_len - arg_buf_pos), CR);
	if temp_buf_len = 0
	then temp_buf_len = arg_buf_len;
	else do;
		temp_buf_len = arg_buf_pos + temp_buf_len;
		CR_found = "1"b;
	     end;

	if temp_buf_len - arg_buf_pos > Buf_Size - attach_data.buf_pos
	then n_chars = Buf_Size - attach_data.buf_pos;
	else n_chars = temp_buf_len - arg_buf_pos;

	substr (attach_data.buf, attach_data.buf_pos + 1, n_chars) =
	     substr (arg_buf_ptr -> overlay, arg_buf_pos + 1, n_chars);

	arg_buf_pos = arg_buf_pos + n_chars;
	attach_data.buf_pos = attach_data.buf_pos + n_chars;
	if CR_found
	then buffer_full = "1"b;
	else if attach_data.buf_pos = Buf_Size
	then do;					/* force a 250-character line */
		arg_buf_pos = arg_buf_pos - 1;
		substr (attach_data.buf, Buf_Size, 1) = CR;
		buffer_full = "1"b;
	     end;

	return;
     end load_internal_buffer;




%page;
/*  This internal procedure sends a data packet  during a put_chars operation.  */
send_data_packet:
     proc (ec);
	dcl     ec		 fixed bin (35);


	ec = 0;

	call get_control_chars (control_chars, One_Second, ec);
	if ec ^= 0 & ec ^= error_table_$timeout
	then goto send_data_error;
	if control_chars = XOFF
	then attach_data.xon_sw = "0"b;

	do while (^attach_data.xon_sw & control_chars ^= Terminate_Transmission);
	     if control_chars = XON
	     then attach_data.xon_sw = "1"b;
	     if ^attach_data.xon_sw
	     then call get_control_chars (control_chars, One_Second, ec);
	     if ec ^= 0 & ec ^= error_table_$timeout
	     then goto send_data_error;
	end;

	if control_chars = Terminate_Transmission
	then do;
		ec = error_table_$unable_to_do_io;
		attach_data.error_code = 1;
		return;
	     end;

	call iox_$put_chars (attach_data.target_iocbp, buf_ptr, attach_data.buf_pos, ec);
	if ec ^= 0
	then goto send_data_error;
	attach_data.buf_pos = 0;
	ec = 0;
	return;

send_data_error:
	call terminate_io;
	return;
     end send_data_packet;


/*  This internal procedure sends a control character */

send_control_chars:
     proc (control_chars);
	dcl     control_chars	 char (2);
	dcl     control_char_ptr	 ptr;


	control_char_ptr = addr (control_chars);
	call iox_$put_chars (attach_data_ptr -> attach_data.target_iocbp, control_char_ptr, 2, (0));
	return;
     end send_control_chars;




/*  Get a packet control character  */

get_control_chars:
     proc (control_chars, interval, ec);
	dcl     control_buf		 char (1);
	dcl     control_buf_ptr	 ptr;
	dcl     control_chars	 char (2);
	dcl     ec		 fixed bin (35);
	dcl     interval		 fixed bin (71);
	dcl     n_read		 fixed bin (21);

	ec = 0;
	control_chars = " ";
	control_buf_ptr = addr (control_buf);
	control_buf = " ";

	do while (ec = 0);
	     call timed_io_$get_chars (attach_data.target_iocbp, interval, control_buf_ptr, 1, n_read, ec);
	     if ec ^= 0
	     then return;
	     if control_buf ^= CR
	     then substr (control_chars, 1, 1) = control_buf;
	     else do;
		     substr (control_chars, 2, 1) = control_buf;
		     return;
		end;
	end;
	return;
     end get_control_chars;


set_up:
     proc;					/* fill in */
	ec = 0;
	mask = ""b;
	actual_iocbp = arg_iocbp -> iocb.actual_iocb_ptr;
	attach_data_ptr = actual_iocbp -> iocb.attach_data_ptr;
	return;
     end set_up;



/*  Cleans up the attach data and allocated storage if the attach operation is aborted  */

clean_up_attach:
     proc;

	if mask ^= ""b
	then call handler;				/* Fatal error */
	if attach_data_ptr = null ()
	then return;
	free attach_data_ptr -> attach_data;
	return;
     end clean_up_attach;


terminate_io:
     proc;

	attach_data.error_code = 1;
	call send_control_chars (Terminate_Transmission);
	return;
     end;

%page;
/*  Internal procedure to handle faults while IPS interrupts are masked.  For a
    fault while masked, the process is terminated (with the reason "unable to do
    critical I/O")  because the I/O control blocks are in an inconsistent state  */

handler:
     procedure options (non_quick);			/* visible in ifd */

	dcl     error_table_$unable_to_do_io
				 fixed (35) ext;
	if mask ^= ""b
	then call terminate_this_process (error_table_$unable_to_do_io);
	else return;
     end handler;



terminate_this_process:
     proc (cd);

	dcl     cd		 fixed bin (35);
	dcl     terminate_process_	 entry (char (*), ptr);
	dcl     01 ti		 aligned automatic,
		02 version	 fixed,
		02 code		 fixed (35);

	ti.version = 0;
	ti.code = code;
	call terminate_process_ ("fatal_error", addr (ti));

     end terminate_this_process;
     end;
