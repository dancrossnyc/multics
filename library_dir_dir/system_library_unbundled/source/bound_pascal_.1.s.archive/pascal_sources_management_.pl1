/* *************************************************************************
   *                                                                       *
   * Copyright (c) 1980 by Centre Interuniversitaire de Calcul de Grenoble *
   * and Institut National de Recherche en Informatique et Automatique     *
   *                                                                       *
   ************************************************************************* */
pascal_sources_management_: proc;

/* management of include files and main source file for PASCAL compiler */

%include pascal_fsb;
%include pascal_context_;
%include branch_status;
%include source_map;

/* references to Multics entry points */

	dcl     hcs_$status_long	 entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
	dcl     hcs_$initiate	 entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
	dcl     hcs_$fs_get_path_name	 entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
	dcl     com_err_		 entry options (variable);
	dcl     date_time_		 entry (fixed bin (71), char (*));
	dcl     find_include_file_$initiate_count entry (char (*), ptr, char (*), fixed bin (24), ptr, fixed bin (35));
	dcl     unique_chars_	 entry (bit (*)) returns (char (15));
	dcl     unique_bits_	 entry returns (bit (70));
	dcl     iox_$look_iocb	 entry (char (*), ptr, fixed bin (35));
	dcl     iox_$attach_name	 entry (char (*), ptr, char (*), ptr, fixed bin (35));
	dcl     iox_$close		 entry (ptr, fixed bin (35));
	dcl     iox_$destroy_iocb	 entry (ptr, fixed bin (35));
	dcl     iox_$detach_iocb	 entry (ptr, fixed bin (35));
	dcl     ioa_$ioa_switch	 entry options (variable);
	dcl     get_temp_segment_	 entry (char (*), ptr, fixed bin (35));
	dcl     release_temp_segment_	 entry (char (*), ptr, fixed bin (35));
	dcl     adjust_bit_count_	 entry (char (168), char (32), bit (1), fixed bin (24), fixed bin (35));

/* references to other PASCAL entry points */

	dcl     RACINE_defs$mpcogin	 ext ptr;		/* fsb of compiler input */
	dcl     RACINE_defs$mpcogout	 ext ptr;
	dcl     RACINE_defs$sourcenbr	 ext fixed bin (35);/* number of current source */
	dcl     RACINE_defs$liglues	 ext fixed bin (35);
	dcl     RACINE_defs$sourceindex fixed bin (35) ext;

/* statics */

	dcl     last_source		 ptr init (null) int static; /* ptr to last source structure */
	dcl     buffer_length	 fixed bin int static; /* length of pascal fsb buffer */
	dcl     current_source	 ptr int static;	/* ptr to current source structure */
	dcl     source_nbr		 fixed bin int static; /* current source counter */

/* automatics */

	dcl     (source_ptr, seg_ptr, map_ptr, pntr, iocb_ptr) ptr;
	dcl     temp_dir		 char (168);
	dcl     temp_entry		 char (32);
	dcl     dir_name		 char (168);
	dcl     entry_name		 char (32);
	dcl     code		 fixed bin (35);
	dcl     time_string		 char (16);
	dcl     bc		 fixed bin (24);
	dcl     ldn		 fixed bin;
	dcl     (i, j)		 fixed bin;
	dcl     chain_len		 fixed bin;
	dcl     n			 fixed bin;
	dcl     (i1, i2)		 fixed bin (35);
	dcl     input_length	 fixed bin (35);
	dcl     liglues		 fixed bin;
	dcl     source_index	 fixed bin (35);

/* based */

	dcl     val18		 fixed bin (17) unal based;
	dcl     1 source		 based (source_ptr),
		2 number		 fixed bin,
		2 path		 char (168) varying,
		2 seg_addr	 ptr,
		2 liglues		 fixed bin (35),
		2 index		 fixed bin (35),
		2 uid		 bit (36),
		2 dtm		 fixed bin (71),
		2 temp_seg	 ptr,
		2 (previous, next, father) ptr,
		2 fsb_fix		 like text_fsb_fix,
		2 buffer		 char (buffer_length);
	dcl     chain		 char (chain_len) based (pntr);

/* builtins */

	dcl     (null, index, addrel, rel, size, fixed) builtin;

/*  */
init_source: entry;

	buffer_length = RACINE_defs$mpcogin -> pascal_text_fsb.buff_len_;
	allocate source;
	source.previous, source.next, source.father, source.temp_seg = null;
	last_source = source_ptr;
	call hcs_$status_long (pascal_context_$source_dir_name, pascal_context_$source_entry_name, 0, addr (branch_status), null, code);
	if code ^= 0 then go to init_source_error;
	call hcs_$initiate (pascal_context_$source_dir_name, pascal_context_$source_entry_name, "",
	     0, 0, seg_addr, code);
	source.path = rtrim (pascal_context_$source_dir_name) || ">" || rtrim (pascal_context_$source_entry_name);
	source.uid = branch_status.unique_id;
	source.dtm = fixed (branch_status.date_time_modified || "0000000000000000"b, 71);
	source.previous, source.next, source.father = null;
	current_source = source_ptr;
	source_nbr, source.number = 0;
	return;

init_source_error:
	call com_err_ (code, "pascal", pascal_context_$source_dir_name || ">" || rtrim (pascal_context_$source_entry_name));
	go to pascal_context_$abort_comp_label;

/*  */
clean: entry;

	do while (last_source ^= null);
	     source_ptr = last_source;
	     if source.temp_seg ^= null then
		call release_temp_segment_ ("pascal", source.temp_seg, code);
	     call iox_$look_iocb (rtrim (addr (source.fsb_fix) -> pascal_fsb.file_name), iocb_ptr, code);
	     if iocb_ptr ^= null then do;
		     call iox_$close (iocb_ptr, code);
		     call iox_$detach_iocb (iocb_ptr, code);
		     call iox_$destroy_iocb (iocb_ptr, code);
		end;
	     last_source = source.previous;
	     free source;
	end;
	return;

/*  */
begin_source: entry (name, begin_string, lb, end_string, le);

	dcl     name		 char (168);
	dcl     (begin_string, end_string) char (32);
	dcl     (lb, le)		 fixed bin (35);

	dcl     filename		 char (8);
	dcl     (bs, es)		 char (32) varying;
	dcl     my_name		 char (32) varying;

	my_name = rtrim (name);
	if length (my_name) + 12 > 32 then do;
		call com_err_ (0, "pascal", "Entry name ^a is too long", my_name || ".incl.pascal");
		go to pascal_context_$abort_comp_label;
	     end;
	name = my_name || ".incl.pascal";
	bs = substr (begin_string, 1, lb);
	es = substr (end_string, 1, le);
	call find_include_file_$initiate_count ("pascal", null, name, bc, seg_ptr, code);
	if code ^= 0 then go to begin_source_error;
	call hcs_$fs_get_path_name (seg_ptr, dir_name, ldn, entry_name, code);
	if code ^= 0 then go to begin_source_error;
	call hcs_$status_long (dir_name, entry_name, 0, addr (branch_status), null, code);
	if code ^= 0 then go to begin_source_error;
	source_ptr = current_source;
test_recursivity:
	if source.uid = branch_status.unique_id then do;
		call com_err_ (0, "pascal", "recursive reference to include file ^a", rtrim (dir_name) || ">" || rtrim (entry_name));
		go to pascal_context_$abort_comp_label;
	     end;
	source_ptr = source.father;
	if source_ptr ^= null then go to test_recursivity;
	source_ptr = last_source;
test_if_allocated:
	if source.uid = branch_status.unique_id then do;
		source.father = current_source;
		current_source = source_ptr;
		RACINE_defs$sourcenbr = source.number;
		go to allocated_now;
	     end;
	source_ptr = source.previous;
	if source_ptr ^= null then go to test_if_allocated;
	allocate source;
	source.previous, source.next, source.father, source.temp_seg = null;
	source.seg_addr = seg_ptr;
	last_source -> source.next = source_ptr;
	source.previous = last_source;
	source.next = null;
	last_source = source_ptr;
	source.father = current_source;
	last_source, current_source = source_ptr;
	source.path = rtrim (dir_name) || ">" || rtrim (entry_name);
	source.uid = branch_status.unique_id;
	source.dtm = fixed (branch_status.date_time_modified || "0000000000000000"b, 71);
	source.number, source_nbr, RACINE_defs$sourcenbr = source_nbr + 1;
allocated_now:
	fsb_ptr = RACINE_defs$mpcogin;
	source.father -> fsb_fix = text_fsb_fix;
	source.father -> source.buffer = pascal_text_fsb.buffer;
	input_length = (fixed (branch_status.bit_count, 35) + 8) / 9;
	if input_length = 0 then do;
		call com_err_ (0, "pascal", "include segment is zero length ^a", source.path);
		go to begin_source_error;
	     end;
	file_name = substr (unique_chars_ (unique_bits_ ()), 8, 8);
	filename = file_name;			/* local */
	liglues = 1;
	if (bs = "*") & (es = "*") then do;
		source.temp_seg = null;
		call iox_$attach_name (filename, system_ptr, "vfile_ " || source.path, null, code);
		if code ^= 0 then go to begin_source_error;
		source_index = 0;
	     end;
	else do;					/* include source between bs and be - not included */
		call get_temp_segment_ ("pascal", source.temp_seg, code);
		if code ^= 0 then go to begin_source_error;
		begin;
		     dcl	   input_string	      char (input_length) based (seg_ptr);
		     dcl	   output_string	      char (255 * 1024 * 4) based (source.temp_seg);
		     if bs = "*" then i1 = 1;
		     else do;
			     i1 = index (input_string, bs);
			     if i1 = 0 then do;
				     call com_err_ (0, "pascal", "Include segment ^a does not contain string ""^a"".", source.path, bs);
				     go to pascal_context_$abort_comp_label;
				end;
			     i1 = i1 + lb;
			end;
		     if es = "*" then i2 = input_length - i1 + 1;
		     else do;
			     i2 = index (substr (input_string, i1), es) - 1;
			     if i2 = -1 then do;
				     if bs = "*" then call com_err_ (0, "pascal", "Include segment ^a does not contain string ""^a"".", source.path, es);
				     else call com_err_ (0, "pascal", "Include segment ^a does not contain string ""^a"" after string ""^a"".", source.path, es, bs);
				     go to pascal_context_$abort_comp_label;
				end;
			end;
		     substr (output_string, 1, i2) = substr (input_string, i1, i2);
		     j = 1;
		     do while (j < i1);
			i = index (substr (input_string, j, i1 - j), "
");
			if i = 0 then go to line_ok;
			j = i + j;
			liglues = liglues + 1;
		     end;
line_ok:
		end;				/* begin block */
		call hcs_$fs_get_path_name (source.temp_seg, temp_dir, ldn, temp_entry, code);
		if code ^= 0 then go to begin_source_error;
		call adjust_bit_count_ (temp_dir, temp_entry, "1"b, bc, code);
		if code ^= 0 then go to begin_source_error;
		call iox_$attach_name (filename, system_ptr, "vfile_ " || rtrim (temp_dir) || ">" || rtrim (temp_entry), null, code);
		if code ^= 0 then go to begin_source_error;
		source_index = i1 - 1;
	     end;
	source.father -> source.liglues = RACINE_defs$liglues;
	source.father -> source.index = RACINE_defs$sourceindex;
	RACINE_defs$liglues = liglues;
	RACINE_defs$sourceindex = source_index - 1;
	file_is_open = "0"b;
	return;

begin_source_error:
	call com_err_ (code, "pascal", name);
	go to pascal_context_$abort_comp_label;

/*  */
end_source: entry;

	fsb_ptr = RACINE_defs$mpcogin;
	call iox_$close (system_ptr, code);
	if code ^= 0 then go to end_source_error;
	call iox_$detach_iocb (system_ptr, code);
	if code ^= 0 then go to end_source_error;
	call iox_$destroy_iocb (system_ptr, code);
	if code ^= 0 then go to end_source_error;
	source_ptr = current_source;
	if source.temp_seg ^= null then
	     call release_temp_segment_ ("pascal", source.temp_seg, code);
	current_source = source.father;
	source.father = null;
	source_ptr = current_source;
	text_fsb_fix = fsb_fix;
	pascal_text_fsb.buffer = source.buffer;
	RACINE_defs$sourcenbr = source.number;
	RACINE_defs$liglues = source.liglues;
	RACINE_defs$sourceindex = source.index;
	return;

end_source_error:
	call com_err_ (code, "pascal", "^a", source.path);
	go to pascal_context_$abort_comp_label;

/*  */
display_sources: entry;

	fsb_ptr = RACINE_defs$mpcogout;
	call ioa_$ioa_switch (system_ptr, "
        SOURCE FILES USED IN THIS COMPILATION

NUMBER  DATE MODIFIED      PATHNAME");
	do while (current_source -> source.previous ^= null);
	     current_source = current_source -> source.previous;
	end;
	source_ptr = current_source;
	do while (source_ptr ^= null);
	     call date_time_ (source.dtm, time_string);
	     call ioa_$ioa_switch (system_ptr, "^4d    ^a   ^a", source.number, time_string, source.path);
	     source_ptr = source.next;
	end;
	return;

/*  */
return_source_ptr: entry (s_nbr, s_ptr);

	dcl     s_nbr		 fixed bin (35);	/* (input) source nbr */
	dcl     s_ptr		 ptr;		/* (output) source ptr */

	do while (current_source -> source.previous ^= null);
	     current_source = current_source -> source.previous;
	end;
	source_ptr = current_source;
	do while (source_ptr ^= null);
	     if source.number = s_nbr then do;
		     s_ptr = source.seg_addr;
		     return;
		end;
	     source_ptr = source.next;
	end;

	s_ptr = null;
	return;

/*  */
create_source_table: entry;

	do while (current_source -> source.previous ^= null);
	     current_source = current_source -> source.previous;
	end;
	source_ptr = current_source;
	map_ptr = addrel (pascal_context_$symb_ptr, pascal_context_$symb_word_count);
	map_ptr -> source_map.version = 1;
	map_ptr -> source_map.number, n = source_nbr + 1;
	pntr = addrel (map_ptr, size (source_map));
	do i = 1 to map_ptr -> source_map.number;
	     map_ptr -> source_map.map (i).pathname.offset = rel (pntr);
	     addr (map_ptr -> source_map.map (i).pathname.size) -> val18, chain_len = length (source.path);
	     map_ptr -> source_map.map (i).uid = source.uid;
	     map_ptr -> source_map.map (i).dtm = source.dtm;
	     chain = source.path;
	     pntr = addrel (pntr, (chain_len + 3) / 4);
	     source_ptr = source.next;
	end;
	pascal_context_$symb_word_count = fixed (rel (pntr), 35);
	return;


     end pascal_sources_management_;
