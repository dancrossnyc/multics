/****^  *************************************************************************
        *                                                                       *
        * Copyright (c) 1980 by Centre Interuniversitaire de Calcul de Grenoble *
        * and Institut National de Recherche en Informatique et Automatique     *
        *                                                                       *
        ************************************************************************* */

/****^  HISTORY COMMENTS:
  1) change(86-10-05,JMAthane), approve(86-10-05,MCR7521),
     audit(86-10-09,JPFauche), install(86-11-12,MR12.0-1212):
     No change for MR11.
                                                   END HISTORY COMMENTS */

pascal_build_object: proc;



/* external references to the MULTICS system */

	dcl     ioa_$ioa_switch	 entry options (variable);
	dcl     com_err_		 entry options (variable);
	dcl     error_table_$segnamedup fixed bin (35) ext;
	dcl     adjust_bit_count_	 entry (char (168), char (32), bit (1), fixed bin (35), fixed bin (35));
	dcl     hcs_$chname_seg	 entry (ptr, char (*), char (*), fixed bin (35));
	dcl     tssi_$get_segment	 entry (char (*), char (*), ptr, ptr, fixed bin (35));
	dcl     tssi_$finish_segment	 entry (ptr, fixed bin (24), bit (36) aligned, ptr, fixed bin (35));

/* external references to other PASCAL entry points */

	dcl     (RACINE_defs$init_fsb_trap_links_place,
	        RACINE_defs$init_fsb_trap_number_of_files,
	        RACINE_defs$init_fsb_trap_info_place) fixed bin (35) ext;
	dcl     RACINE_defs$statnbr	 fixed bin (35) ext;
	dcl     RACINE_defs$profilewordcount fixed bin (35) ext;
	dcl     RACINE_defs$linkswordcount fixed bin (35) ext;
	dcl     RACINE_defs$staticswordcount fixed bin (35) ext;
	dcl     RACINE_defs$selectivetable fixed bin (35) ext;
	dcl     pascal_gen_rel_$text	 entry (bit (5), fixed bin);
	dcl     pascal_gen_rel_$def	 entry (bit (5), fixed bin);
	dcl     pascal_gen_rel_$link	 entry (bit (5), fixed bin);
	dcl     pascal_gen_rel_$symb	 entry (bit (5), fixed bin);
	dcl     pascal_gen_rel_$ps_def entry (bit (5), fixed bin);
	dcl     pascal_sources_management_$create_source_table entry;
	dcl     pascal_create_tables	 entry (ptr, fixed bin);
	dcl     pascal_display_text	 entry;
	dcl     pascal_sources_management_$display_sources entry;
	dcl     pascal_statement_map_$display entry;
	dcl     RACINE_defs$programnode ext ptr;
	dcl     UNIQUE_new$displaysymbols entry;

/* constants */


/* automatics */

	dcl     (j, k, n)		 fixed bin (35);
	dcl     return_code		 fixed bin;
	dcl     frt_info_ptr	 ptr;
	dcl     has_table		 bit (1);
	dcl     init_fsb_trap_info_place fixed bin (35);
	dcl     relinfo		 bit (5) unal;
	dcl     hwnbr		 bit (10) unal;
	dcl     (map_base, profile_base, stats_length) fixed bin (35);
	dcl     value		 fixed bin;
	dcl     i			 fixed bin (35);
	dcl     absolute_ps_path	 char (168) varying;
	dcl     ps_ptr		 ptr;
	dcl     ps_entry_name	 char (32);
	dcl     ps_aclinfo_ptr	 ptr;
	dcl     pntr		 ptr;
	dcl     root		 ptr;
	dcl     b_chain_length	 fixed bin;
	dcl     code		 fixed bin (35);
	dcl     object_aclinfo_ptr	 ptr;
	dcl     section_length	 fixed bin (35);
	dcl     ps_map_ptr		 ptr;
	dcl     object_map_ptr	 ptr;
	dcl     absolute_object_path	 char (168) varying;
	dcl     link_length		 fixed bin (35);
	dcl     word_count		 fixed bin (35);
	dcl     wc		 fixed bin (35);
	dcl     symb_ptr		 ptr;
	dcl     def_ptr		 ptr;
	dcl     object_bit_count	 fixed bin (35);
	dcl     bit_count		 fixed bin (35);
	dcl     static_offset	 bit (18);
	dcl     section_ptr		 ptr;
	dcl     labelp		 ptr;
	dcl     ps_symb_len		 fixed bin (10) unsigned unal;
	dcl     var_string		 char (168) varying;

/* based */

	dcl     1 reloc		 based (pntr),
		2 decl_vers	 fixed bin,
		2 n_bits		 fixed bin,
		2 relbits		 bit (0 refer (reloc.n_bits));

	dcl     section		 (section_length) bit (36) based;


	dcl     based_chain		 char (b_chain_length) based;

	dcl     1 def_header	 based (def_ptr),
		2 def_list_relp	 bit (18) unal,
		2 unused		 bit (18) unal,
		2 hash_table_relp	 bit (18) unal,
		2 flags		 unal,
		  3 new_format	 bit (1) unal,
		  3 ignore	 bit (1) unal,
		  3 unused	 bit (16) unal,
		2 all_zero_word	 bit (36),
		2 seg_name,
		  3 num_chars	 fixed bin (9) unsigned unal,
		  3 string	 char (0 refer (def_header.seg_name.num_chars)) unal,
		2 def_seg		 aligned like definition;

	dcl     1 val		 based,
		2 high		 bit (18) unal,
		2 low		 bit (18) unal;

	dcl     val18		 fixed bin (18) unsigned unal based;
	dcl     v17s		 fixed bin (17) unal based;

	dcl     1 acc		 based,
		2 num_chars	 fixed bin (9) unsigned unal,
		2 string		 char (0 refer (acc.num_chars)) unal;

	dcl     1 profile_area	 based (section_ptr),
		2 entry		 (RACINE_defs$statnbr) like profile_entry;
	dcl     1 long_profile_area	 based (section_ptr),
		2 header		 like long_profile_header,
		2 entry		 (RACINE_defs$statnbr) like long_profile_entry;
	dcl     v18		 fixed bin (18) unsigned unal based;
	dcl     v18s		 fixed bin (17) unal based;
	dcl     v10		 fixed bin (10) unsigned unal based;
	dcl     half18		 (155000) fixed bin (18) unsigned unal based;
	dcl     1 half15		 (155000) based,
		2 dum		 bit (3) unal,
		2 v		 fixed bin (14) unal;

/* builtins */

	dcl     unspec		 builtin;
	dcl     null		 builtin;
	dcl     addrel		 builtin;
	dcl     rel		 builtin;
	dcl     ptr		 builtin;
	dcl     addr		 builtin;
	dcl     mod		 builtin;
	dcl     length		 builtin;
	dcl     substr		 builtin;
	dcl     rtrim		 builtin;
	dcl     fixed		 builtin;



	has_table = pascal_context_$options.table | (RACINE_defs$selectivetable = 1);

/* create the object segment if translation is OK */

	absolute_object_path = rtrim (pascal_context_$working_dir_name) || ">" || rtrim (pascal_context_$object_entry_name);

	call tssi_$get_segment (pascal_context_$working_dir_name, pascal_context_$object_entry_name, pascal_context_$object_ptr, object_aclinfo_ptr, code);
	if code ^= 0 then do;
		call com_err_ (code, "pascal", "Error while get ^a", absolute_object_path);
		go to comp_aborted;
	     end;

/* compute bases */

	if RACINE_defs$profilewordcount ^= 0 then do;
		if (pascal_context_$options.profile = "0"b) & (pascal_context_$options.long_profile = "0"b) then do;
			call com_err_ (0, "pascal", "Internal checking : profile word count is not null");
			go to int_error;
		     end;
		profile_base = RACINE_defs$staticswordcount;
		if mod (profile_base, 2) ^= 0 then profile_base = profile_base + 1;
		pascal_context_$link_base = profile_base + RACINE_defs$profilewordcount;
		if mod (pascal_context_$link_base, 2) ^= 0 then pascal_context_$link_base = pascal_context_$link_base + 1;
	     end;
	else do;
		pascal_context_$link_base = RACINE_defs$staticswordcount;
		if mod (pascal_context_$link_base, 2) ^= 0 then pascal_context_$link_base = pascal_context_$link_base + 1;
		profile_base = pascal_context_$link_base;
	     end;
	stats_length = RACINE_defs$staticswordcount - 8;

	if pascal_context_$link_base + RACINE_defs$linkswordcount > 2 ** 14 - 1 then do;
		call com_err_ (0, "pascal", "Link section is > 16383 words (global variables. = ^d, links = ^d),
Export some big global variables.",
		     pascal_context_$link_base, RACINE_defs$linkswordcount);
		go to comp_aborted;
	     end;

/* complete symbol section */

	pascal_context_$symb_ptr -> std_symbol_header.dcl_version = 1;
	pascal_context_$symb_ptr -> std_symbol_header.identifier = "symbtree";
	pascal_context_$symb_ptr -> gen_number = pascal_compiler_id$version_number;
	pascal_context_$symb_ptr -> object_created = pascal_context_$time;
	pascal_context_$symb_ptr -> gen_created = pascal_context_$compiler_created;
	pascal_context_$symb_ptr -> generator = "PASCAL  ";
	pascal_context_$symb_ptr -> gen_version.offset = "000000000000010100"b; /* 20 */
	addr (pascal_context_$symb_ptr -> gen_version.size) -> val18, b_chain_length = length (pascal_compiler_id$gen_id);
	symb_ptr = ptr (pascal_context_$symb_ptr, 20);
	symb_ptr -> based_chain = pascal_compiler_id$gen_id;
	symb_ptr = addrel (symb_ptr, (length (pascal_compiler_id$gen_id) + 3) / 4);

	var_string = rtrim (pascal_context_$user_id);
	pascal_context_$symb_ptr -> userid.offset = rel (symb_ptr);
	addr (pascal_context_$symb_ptr -> userid.size) -> val18, b_chain_length = length (var_string);
	symb_ptr -> based_chain = var_string;
	symb_ptr = addrel (symb_ptr, (length (var_string) + 3) / 4);


	if length (pascal_context_$option_list) ^= 0 then do;
		pascal_context_$symb_ptr -> std_symbol_header.comment.offset = rel (symb_ptr);
		addr (pascal_context_$symb_ptr -> comment.size) -> val18, b_chain_length = length (pascal_context_$option_list);
		symb_ptr -> based_chain = pascal_context_$option_list;
		symb_ptr = addrel (symb_ptr, (length (pascal_context_$option_list) + 3) / 4);
	     end;

	pascal_context_$symb_ptr -> std_symbol_header.text_boundary,
	     pascal_context_$symb_ptr -> stat_boundary = "000000000000000010"b; /* 2 */
	pascal_context_$symb_ptr -> std_symbol_header.source_map = rel (symb_ptr);

	pascal_context_$symb_word_count = 0;
	addr (pascal_context_$symb_word_count) -> val.low = rel (symb_ptr);

	call pascal_sources_management_$create_source_table;

	if pascal_context_$options.ps = "1"b then do;
		pascal_context_$ps_symb_word_count, section_length = pascal_context_$symb_word_count;
		pascal_context_$ps_symb_ptr -> section = pascal_context_$symb_ptr -> section;
	     end;

	if pascal_context_$options.bind = "1"b then
	     call pascal_gen_rel_$symb (abs, pascal_context_$symb_word_count * 2);
	symb_ptr = addrel (pascal_context_$symb_ptr, pascal_context_$symb_word_count);
						/* pl1 symbol block */
	pascal_context_$symb_ptr -> area_pointer = rel (symb_ptr);
	symb_ptr -> pl1_symbol_block.version = 1;
	symb_ptr -> pl1_symbol_block.identifier = "pl1info ";
	symb_ptr -> pl1_symbol_block.flags.profile = pascal_context_$options.profile;
	symb_ptr -> pl1_symbol_block.flags.io = (RACINE_defs$selectivetable = 1);
	symb_ptr -> pl1_symbol_block.flags.long_profile = pascal_context_$options.long_profile;
	symb_ptr -> pl1_symbol_block.flags.table = has_table;
	symb_ptr -> pl1_symbol_block.flags.map =
	     pascal_context_$options.profile | pascal_context_$options.table
	     | pascal_context_$options.long_profile | pascal_context_$options.brief_table;
	var_string = rtrim (pascal_context_$object_entry_name);
	pntr = addrel (symb_ptr, 8);
	b_chain_length = length (var_string);
	pntr -> based_chain = var_string;
	symb_ptr -> pl1_symbol_block.segname.offset = rel (pntr);
	addr (symb_ptr -> pl1_symbol_block.segname.size) -> val18 = length (var_string);
	wc = (length (var_string) + 3) / 4;
	pntr = addrel (symb_ptr, 8 + wc);
	if pascal_context_$options.bind = "1"b then do;
		if (pascal_context_$options.profile = "1"b) | (pascal_context_$options.long_profile = "1"b) then do;
			call pascal_gen_rel_$symb (abs, 11);
			call pascal_gen_rel_$symb (int18, 1);
			call pascal_gen_rel_$symb (abs, 4);
		     end;
		else call pascal_gen_rel_$symb (abs, 16);
		call pascal_gen_rel_$symb (abs, wc * 2);
	     end;
	addr (pascal_context_$symb_word_count) -> val.low = rel (pntr);
	pascal_context_$symb_ptr -> maxi_truncate = rel (pntr);
						/* symbol table */
	if has_table = "1"b then do;
		root = pntr;
		symb_ptr -> pl1_symbol_block.root = rel (root);
		call pascal_create_tables (pntr, return_code);
		if return_code ^= 0 then go to comp_aborted;
		addr (pascal_context_$symb_word_count) -> val.low = rel (pntr);
		if symb_ptr -> pl1_symbol_block.flags.map then
		     call reloc_map_refs (root);
	     end;
						/* statement map */
	if symb_ptr -> pl1_symbol_block.flags.map = "1"b then do;
		if (pascal_context_$options.profile = "1"b) | (pascal_context_$options.long_profile = "1"b) then
		     symb_ptr -> pl1_symbol_block.profile = addr (profile_base) -> val.low;
		symb_ptr -> pl1_symbol_block.first = addr (pascal_context_$symb_word_count) -> val.low;
		section_length = RACINE_defs$statnbr * 2;
		pntr -> section = pascal_context_$map_ptr -> section;
		map_base = fixed (rel (pntr));
		pntr = addrel (pntr, section_length);
		pascal_context_$symb_word_count = pascal_context_$symb_word_count + section_length;
		symb_ptr -> pl1_symbol_block.last = addr (pascal_context_$symb_word_count) -> val.low;
		if pascal_context_$options.bind = "1"b then
		     do i = 1 to RACINE_defs$statnbr;
			call pascal_gen_rel_$symb (text_rel, 1);
			call pascal_gen_rel_$symb (abs, 3);
		     end;
	     end;

/* terminate and check text rel info string */

	call pascal_gen_rel_$text ("1"b, 0);
	if rel_info (txt).nbr_of_calls ^= (pascal_context_$text_word_count * 2) then do;
		call com_err_ (0, "pascal", "text rel info string and section length are not compatible");
		go to rel_error;
	     end;


/* relocate text */

	k = length (rel_info (txt).string);
	i = 1;
	j = 1;

	do while (i <= k);
	     relinfo = substr (rel_info (txt).string, i, 5);
	     if substr (relinfo, 1, 1) = "0"b then do;
		     i = i + 1;
		     j = j + 1;
		end;
	     else if relinfo = expabs then do;
		     hwnbr = substr (rel_info (txt).string, i + 5, 10);
		     i = i + 15;
		     j = j + addr (hwnbr) -> v10;
		end;
	     else do;
		     if relinfo = link15 then
			pascal_context_$text_ptr -> half15.v (j) = pascal_context_$text_ptr -> half15.v (j) + pascal_context_$link_base;
		     else if relinfo = link18 then
			pascal_context_$text_ptr -> half18 (j) =
			     pascal_context_$text_ptr -> half18 (j) + pascal_context_$link_base;
		     else if relinfo = self_rel then do;
			     pascal_context_$text_ptr -> half18 (j) =
				pascal_context_$text_ptr -> half18 (j) + (j / 2);
			     substr (rel_info (txt).string, i, 5) = text_rel;
			end;
		     else
			if relinfo = profile then do;
			     pascal_context_$text_ptr -> half15.v (j) = pascal_context_$text_ptr -> half15.v (j) + profile_base;
			     substr (rel_info (txt).string, i, 5) = int15;
			end;
		     i = i + 5;
		     j = j + 1;
		end;
	end;

/* copy text section */

	section_length = pascal_context_$text_word_count;
	section_ptr = pascal_context_$object_ptr;
	section_ptr -> section = pascal_context_$text_ptr -> section;
	section_ptr = addrel (section_ptr, section_length);

/* terminate and check def rel info string */

	if pascal_context_$options.bind = "1"b then do;
		call pascal_gen_rel_$def ("1"b, 0);
		if rel_info (def).nbr_of_calls ^= (pascal_context_$def_word_count * 2) then do;
			call com_err_ (0, "pascal", "def rel info string and section length are not compatible");
			go to rel_error;
		     end;
	     end;

/* relocate def section */

	k = length (rel_info (def).string);
	i = 1;
	j = 1;
	do while (i <= k);
	     relinfo = substr (rel_info (def).string, i, 5);
	     if substr (relinfo, 1, 1) = "0"b then do;
		     i = i + 1;
		     j = j + 1;
		end;
	     else if relinfo = expabs then do;
		     hwnbr = substr (rel_info (def).string, i + 5, 10);
		     i = i + 15;
		     j = j + addr (hwnbr) -> v10;
		end;
	     else do;
		     if relinfo = link18 then
			pascal_context_$def_ptr -> half18 (j) = pascal_context_$def_ptr -> half18 (j) + pascal_context_$link_base;
		     i = i + 5;
		     j = j + 1;
		end;
	end;

/* copy definition section */
	section_length = pascal_context_$def_word_count;
	section_ptr -> section = pascal_context_$def_ptr -> section;

/* dword boundary for link section */

	word_count = pascal_context_$text_word_count + pascal_context_$def_word_count;
	if mod (word_count, 2) ^= 0 then word_count = word_count + 1;
	section_ptr = ptr (section_ptr, word_count);

/* assemble and complete link section */

	pascal_context_$link_offset = rel (section_ptr);
	static_offset = rel (addrel (section_ptr, 8));
	section_length = RACINE_defs$staticswordcount;
	section_ptr -> section = pascal_context_$stats_ptr -> section;
	section_ptr -> linkage_header.stats.static_length = stats_length;
	section_ptr -> virgin_linkage_header.def_offset = pascal_context_$text_word_count;
	section_ptr -> virgin_linkage_header.link_begin = pascal_context_$link_base;
	link_length = pascal_context_$link_base + RACINE_defs$linkswordcount;
	section_ptr -> virgin_linkage_header.linkage_section_lng = link_length;
	section_ptr = addrel (section_ptr, profile_base);

	if pascal_context_$options.profile = "1"b then do;
		section_length = RACINE_defs$profilewordcount;
		section_ptr -> section = pascal_context_$prof_ptr -> section;
	     end;
	else if pascal_context_$options.long_profile = "1"b then do;
		section_length = RACINE_defs$profilewordcount;
		section_ptr -> section = pascal_context_$prof_ptr -> section;
		long_profile_area.header.last_offset = 5;
		long_profile_area.header.nentries = (RACINE_defs$profilewordcount - 13) / 4;
	     end;
	section_ptr = addrel (section_ptr, pascal_context_$link_base - profile_base);

	section_length = RACINE_defs$linkswordcount;
	section_ptr -> section = pascal_context_$links_ptr -> section;
	do i = 0 to (RACINE_defs$linkswordcount - 2) by 2;
	     addrel (section_ptr, i) -> v18s = -(pascal_context_$link_base + i);
	end;
	section_ptr = addrel (section_ptr, RACINE_defs$linkswordcount);

	if RACINE_defs$init_fsb_trap_info_place ^= 0 then do;
		frt_info_ptr = section_ptr;
		frt_info_ptr -> fr_traps.decl_vers = FR_TRAPS_VERSION_1;
		frt_info_ptr -> fr_traps.n_traps = 1;
		frt_info_ptr -> fr_traps.trap_array.call_relp (1) =
		     RACINE_defs$init_fsb_trap_links_place / 4 + pascal_context_$link_base;
		frt_info_ptr -> fr_traps.trap_array.info_relp (1) =
		     RACINE_defs$init_fsb_trap_links_place / 4 + 2 + pascal_context_$link_base;
		ptr (section_ptr, pascal_context_$link_offset) -> virgin_linkage_header.first_ref_relp = link_length;
		init_fsb_trap_info_place = RACINE_defs$init_fsb_trap_info_place / 4;
		ptr (section_ptr, init_fsb_trap_info_place) -> pascal_init_fsb_trap_info.n_files =
		     RACINE_defs$init_fsb_trap_number_of_files;
		section_ptr = addrel (section_ptr, 4);
		link_length = link_length + 4;
	     end;

/* link rel info */

	if pascal_context_$options.bind = "1"b then do;
		call pascal_gen_rel_$link (abs, (pascal_context_$link_base - 8) * 2);
		do i = 0 to (RACINE_defs$linkswordcount - 2) by 2;
		     call pascal_gen_rel_$link (int15, 1);
		     call pascal_gen_rel_$link (abs, 1);
		     call pascal_gen_rel_$link (def_rel, 1);
		     call pascal_gen_rel_$link (abs, 1);
		end;
		if RACINE_defs$init_fsb_trap_info_place ^= 0 then do;
			call pascal_gen_rel_$link (abs, 4);
			call pascal_gen_rel_$link (link18, 2);
			call pascal_gen_rel_$link (abs, 2);
		     end;
		call pascal_gen_rel_$link ("1"b, 0);
		if rel_info (lnk).nbr_of_calls ^= (link_length * 2) then do;
			call com_err_ (0, "pascal", "link rel info string and section length are not compatible");
			go to rel_error;
		     end;
	     end;

	pascal_context_$statlink_ptr -> linkage_header.stats.block_length = link_length;

/* terminate and check symbol rel info string */
	if pascal_context_$options.bind = "1"b then do;
		call pascal_gen_rel_$symb ("1"b, 0);
		if rel_info (sym).nbr_of_calls ^= (pascal_context_$symb_word_count * 2) then do;
			call com_err_ (0, "pascal", "symb rel info string and section length are not compatible");
			go to rel_error;
		     end;
	     end;

/* copy the symbol_section */

	word_count = word_count + link_length;
	section_ptr = ptr (pascal_context_$object_ptr, word_count);
	section_length = pascal_context_$symb_word_count;
	section_ptr -> section = pascal_context_$symb_ptr -> section;

	pntr = addrel (section_ptr, section_length);
	section_ptr -> mini_truncate = addr (section_length) -> val.low;

/* relocation info */

	if pascal_context_$options.bind = "1"b then do;
		reloc.decl_vers = 1;
		reloc.n_bits = length (rel_info (1).string);
		reloc.relbits = rel_info (1).string;
		section_ptr -> std_symbol_header.rel_text = addr (section_length) -> val.low; ;
		word_count = 2 + ((reloc.n_bits + 35) / 36);
		section_length = section_length + word_count;
		pntr = addrel (pntr, word_count);

		reloc.decl_vers = 1;
		reloc.n_bits = length (rel_info (2).string);
		reloc.relbits = rel_info (2).string;
		section_ptr -> std_symbol_header.rel_def = addr (section_length) -> val.low; ;
		word_count = 2 + ((reloc.n_bits + 35) / 36);
		section_length = section_length + word_count;
		pntr = addrel (pntr, word_count);

		reloc.decl_vers = 1;
		reloc.n_bits = length (rel_info (3).string);
		reloc.relbits = rel_info (3).string;
		section_ptr -> std_symbol_header.rel_link = addr (section_length) -> val.low; ;
		word_count = 2 + ((reloc.n_bits + 35) / 36);
		section_length = section_length + word_count;
		pntr = addrel (pntr, word_count);

		reloc.decl_vers = 1;
		reloc.n_bits = length (rel_info (4).string);
		reloc.relbits = rel_info (4).string;
		section_ptr -> std_symbol_header.rel_symbol = addr (section_length) -> val.low; ;
		word_count = 2 + ((reloc.n_bits + 35) / 36);
		section_length = section_length + word_count;
		pntr = addrel (pntr, word_count);
	     end;

	section_ptr -> block_size = addr (section_length) -> val.low;

/* object_map */

	pntr -> object_map.decl_vers = 2;
	pntr -> object_map.identifier = "obj_map ";
	pntr -> object_map.text_offset = "0"b;
	pntr -> object_map.text_length = addr (pascal_context_$text_word_count) -> val.low;
	pntr -> object_map.definition_offset = pntr -> object_map.text_length;
	pntr -> object_map.definition_length = addr (pascal_context_$def_word_count) -> val.low;
	pntr -> object_map.linkage_offset = pascal_context_$link_offset;
	pntr -> object_map.linkage_length = addr (link_length) -> val.low;
	pntr -> object_map.static_offset = static_offset;
	pntr -> object_map.static_length = unspec (ptr (pascal_context_$object_ptr, pascal_context_$link_offset) -> linkage_header.stats.static_length);
	pntr -> object_map.symbol_offset = rel (section_ptr);
	pntr -> object_map.symbol_length = addr (section_length) -> val.low;
	pntr -> object_map.format.procedure = "1"b;
	pntr -> object_map.format.relocatable = pascal_context_$options.bind;
	pntr -> object_map.format.standard = "1"b;

	call ioa_$ioa_switch (pascal_context_$out_ptr, "
        STORAGE REQUIREMENTS FOR OBJECT SEGMENT

          Object      Text      Defs     Links    Static    Symbol");
	call ioa_$ioa_switch (pascal_context_$out_ptr, "Start ^6(^10o^)",
	     0,
	     0,
	     fixed (pntr -> object_map.definition_offset),
	     fixed (pntr -> object_map.linkage_offset),
	     fixed (pntr -> object_map.static_offset),
	     fixed (pntr -> object_map.symbol_offset));
	call ioa_$ioa_switch (pascal_context_$out_ptr, "Length^6(^10o^)",
	     fixed (rel (pntr)) + 12,
	     fixed (pntr -> object_map.text_length),
	     fixed (pntr -> object_map.definition_length),
	     fixed (pntr -> object_map.linkage_length),
	     fixed (pntr -> object_map.static_length),
	     fixed (pntr -> object_map.symbol_length));

	object_map_ptr = pntr;
	pntr = addrel (pntr, 11);
	pntr -> val.high = rel (object_map_ptr);

	pntr, def_ptr = ptr (pntr, pascal_context_$text_word_count);
						/* add names for exportables entry points and variables */
	if pascal_context_$options.add_exportable_names then
	     do while (pntr -> definition.forward ^= "000000000000000010"b);
		pntr = addrel (def_ptr, pntr -> definition.forward);
		if ((pntr -> definition.class = "0"b) & (pntr -> definition.flags.entry = "1"b))
		     | ((pntr -> definition.class = "001"b) & (pntr -> definition.flags.entry = "0"b)) then do;
			labelp = addrel (def_ptr, pntr -> definition.symbol);
			if labelp -> acc.string ^= seg_name.string then do;
				call hcs_$chname_seg (pntr, "", labelp -> acc.string, code);
				if (code ^= 0) & (code ^= error_table_$segnamedup)
				then call com_err_ (code, "pascal", "Warning : Cannot add name ^a to object segment", labelp -> acc.string);
			     end;
		     end;
	     end;

/* adjust object bit count */

	call adjust_bit_count_ (pascal_context_$working_dir_name, pascal_context_$object_entry_name, "0"b, object_bit_count, code);
	if code ^= 0 then do;
		call com_err_ (code, "pascal", "Error while adjust object bit count : ^a", absolute_object_path);
		go to comp_aborted;
	     end;

	if pascal_context_$options.ps = "1"b then do;
		ps_entry_name = rtrim (pascal_context_$object_entry_name) || ".defs";
		if pascal_context_$ps_stat_half_word_count > 16 then do;
			absolute_ps_path = rtrim (pascal_context_$working_dir_name) || ">" || rtrim (ps_entry_name);

			call tssi_$get_segment (pascal_context_$working_dir_name, ps_entry_name, ps_ptr, ps_aclinfo_ptr, code);
			if code ^= 0 then do;
				call com_err_ (code, "pascal", "Error while get ^a", absolute_ps_path);
				go to comp_aborted;
			     end;

/* complete the ps link section */

			word_count = (pascal_context_$ps_stat_half_word_count / 2) - 8;
			pascal_context_$ps_link_ptr -> linkage_header.stats.static_length = word_count;
			word_count = word_count + 8;
			if mod (word_count, 2) ^= 0 then do;
				word_count = word_count + 1;
			     end;

			link_length = word_count;

			if pascal_context_$options.bind = "1"b then do;

/* finish rel_bits strings */

				call pascal_gen_rel_$ps_def ("1"b, 0);

/* check sect length and rel_bit string length */

				if (rel_info (5).nbr_of_calls ^= (pascal_context_$ps_def_word_count * 2))
				then do;
					call com_err_ (0, "pascal", "rel_info bit string and section length are not compatible");
					go to rel_error;
				     end;
			     end;

/* copy the ps definition section */

			section_ptr = ps_ptr;
			section_length = pascal_context_$ps_def_word_count;
			section_ptr -> section = pascal_context_$ps_def_ptr -> section;

/* copy the ps link_section */

			word_count = section_length;
			if mod (word_count, 2) ^= 0 then word_count = word_count + 1;
			section_ptr = ptr (ps_ptr, word_count);
			pascal_context_$link_offset = rel (section_ptr);
			static_offset = rel (addrel (section_ptr, 8));
			section_length = link_length;
			section_ptr -> section = pascal_context_$ps_link_ptr -> section;

/* copy the ps symbol_section */

			word_count = word_count + link_length;
			section_ptr = ptr (ps_ptr, word_count);
			section_length = pascal_context_$ps_symb_word_count;
			section_ptr -> section = pascal_context_$ps_symb_ptr -> section;

			pntr = addrel (section_ptr, section_length);
			section_ptr -> maxi_truncate, section_ptr -> mini_truncate = addr (section_length) -> val.low;

/* ps relocation info */

			if pascal_context_$options.bind = "1"b then do;
				reloc.decl_vers = 1;
				section_ptr -> std_symbol_header.rel_text = addr (section_length) -> val.low; ;
				section_length = section_length + 2;
				pntr = addrel (pntr, 2);

				reloc.decl_vers = 1;
				reloc.n_bits = length (rel_info (5).string);
				reloc.relbits = rel_info (5).string;
				section_ptr -> std_symbol_header.rel_def = addr (section_length) -> val.low; ;
				word_count = 2 + ((reloc.n_bits + 35) / 36);
				section_length = section_length + word_count;
				pntr = addrel (pntr, word_count);

				reloc.decl_vers = 1;
				reloc.n_bits = 20;
				reloc.relbits = "00100000000000000000"b;
				section_ptr -> std_symbol_header.rel_link = addr (section_length) -> val.low; ;
				word_count = 3;
				section_length = section_length + word_count;
				pntr = addrel (pntr, word_count);

				reloc.decl_vers = 1;
				reloc.n_bits = 15;
				ps_symb_len = pascal_context_$ps_symb_word_count * 2;
				reloc.relbits = "11110"b || unspec (ps_symb_len);
				section_ptr -> std_symbol_header.rel_symbol = addr (section_length) -> val.low; ;
				section_length = section_length + 3;
				pntr = addrel (pntr, 3);
			     end;

			section_ptr -> block_size = addr (section_length) -> val.low;

/* ps object_map */

			pntr -> object_map.decl_vers = 2;
			pntr -> object_map.identifier = "obj_map ";
			pntr -> object_map.definition_length = addr (pascal_context_$ps_def_word_count) -> val.low;
			pntr -> object_map.linkage_offset = pascal_context_$link_offset;
			pntr -> object_map.linkage_length = addr (link_length) -> val.low;
			pntr -> object_map.static_offset = static_offset;
			pntr -> object_map.static_length = unspec (ptr (ps_ptr, pascal_context_$link_offset) -> linkage_header.stats.static_length);
			pntr -> object_map.symbol_offset = rel (section_ptr);
			pntr -> object_map.symbol_length = addr (section_length) -> val.low;
			pntr -> object_map.format.procedure = "0"b;
			pntr -> object_map.format.relocatable = pascal_context_$options.bind;
			pntr -> object_map.format.standard = "1"b;
			pntr -> object_map.format.separate_static = "1"b;

			call ioa_$ioa_switch (pascal_context_$out_ptr, "
        STORAGE REQUIREMENTS FOR PRIVATE_STORAGE SEGMENT

          Object      Text      Defs     Links    Static    Symbol");
			call ioa_$ioa_switch (pascal_context_$out_ptr, "Start ^6(^10o^)",
			     0,
			     0,
			     fixed (pntr -> object_map.definition_offset),
			     fixed (pntr -> object_map.linkage_offset),
			     fixed (pntr -> object_map.static_offset),
			     fixed (pntr -> object_map.symbol_offset));
			call ioa_$ioa_switch (pascal_context_$out_ptr, "Length^6(^10o^)",
			     fixed (rel (pntr)) + 12,
			     fixed (pntr -> object_map.text_length),
			     fixed (pntr -> object_map.definition_length),
			     fixed (pntr -> object_map.linkage_length),
			     fixed (pntr -> object_map.static_length),
			     fixed (pntr -> object_map.symbol_length));

			ps_map_ptr = pntr;
			pntr = addrel (pntr, 11);
			pntr -> val.high = rel (ps_map_ptr);

/* adjust ps bit count */

			call adjust_bit_count_ (pascal_context_$working_dir_name, ps_entry_name, "0"b, bit_count, code);
			if code ^= 0 then do;
				call com_err_ (code, "pascal", "Error while adjust ps bit count : ^a", absolute_ps_path);
				go to comp_aborted;
			     end;

/* terminate with ps */

			call tssi_$finish_segment (ps_ptr, fixed (bit_count, 24), "110"b, ps_aclinfo_ptr, code);
			if code ^= 0 then do;
				call com_err_ (code, "pascal", "Error while finish ^a", absolute_object_path);
				go to comp_aborted;
			     end;
			pascal_context_$ps_ok = 1;
		     end;
	     end;

	if pascal_context_$options.list
	     | pascal_context_$options.map
	     | pascal_context_$options.brief_map
	then call pascal_sources_management_$display_sources;

	if pascal_context_$options.map
	     | pascal_context_$options.generated_code
	then if RACINE_defs$programnode ^= null
	     then call UNIQUE_new$displaysymbols;

	if pascal_context_$options.list
	     | pascal_context_$options.map
	     | pascal_context_$options.brief_map
	then call pascal_statement_map_$display;

/* display generated code if required */

	if pascal_context_$options.generated_code then call pascal_display_text;

/* terminate with object */

	call tssi_$finish_segment (pascal_context_$object_ptr, fixed (object_bit_count, 24), "110"b, object_aclinfo_ptr, code);
	if code ^= 0 then do;
		call com_err_ (code, "pascal", "Error while finish ^a", absolute_object_path);
		go to comp_aborted;
	     end;
	pascal_context_$object_ok = 1;

	return;


rel_error:
	call com_err_ (0, "", "   Try to recompile using the ""-nrlc"" argument");

int_error:
	call com_err_ (0, "", "   Please contact PASCAL compiler maintenance personnel.");
comp_aborted:
	call ioa_$ioa_switch (pascal_context_$out_ptr, "

**********  One error occurred during object segment generation, NO OBJECT CREATED  **********

");

	return;

/*  */

reloc_map_refs: proc (block_ptr);

	dcl     block_ptr		 ptr;

	value = fixed (rel (pntr)) - fixed (rel (block_ptr));
	addr (block_ptr -> runtime_block.map.first) -> v17s = addr (block_ptr -> runtime_block.map.first) -> v17s + value;
	addr (block_ptr -> runtime_block.map.last) -> v17s = addr (block_ptr -> runtime_block.map.last) -> v17s + value;

	if block_ptr -> runtime_block.son ^= "0"b then
	     call reloc_map_refs (addrel (block_ptr, block_ptr -> runtime_block.son));

	if block_ptr -> runtime_block.brother ^= "0"b then
	     call reloc_map_refs (addrel (block_ptr, block_ptr -> runtime_block.brother));

     end reloc_map_refs;
%page;
%include pascal_ops_statics;
%include pascal_context_;
%include pl1_symbol_block;
%include object_map;
%include definition;
%include source_map;
%include std_symbol_header;
%include long_profile;
%include profile_entry;
%include runtime_symbol;
%include object_link_dcls;
%include pascal_fsb_trap_info;


     end pascal_build_object;
