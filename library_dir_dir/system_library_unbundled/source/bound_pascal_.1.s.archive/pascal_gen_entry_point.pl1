/****^  *************************************************************************
        *                                                                       *
        * Copyright (c) 1980 by Centre Interuniversitaire de Calcul de Grenoble *
        * and Institut National de Recherche en Informatique et Automatique     *
        *                                                                       *
        ************************************************************************* */


/****^  HISTORY COMMENTS:
  1) change(86-10-05,JMAthane), approve(86-10-05,MCR7521),
     audit(86-10-09,JPFauche), install(86-11-12,MR12.0-1212):
     Pascal version for MR12.
                                                   END HISTORY COMMENTS */

/* format: style4,^linecom,^ifthendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind1 */

genentrypoint: proc (TEXTBYTES, PR4BYTES, TYPOFENTRY, SEGNAME, ENTRYNAME, FUNCTIONFLAG, ENTRYLENGTH, ERRCODE);

dcl TEXTBYTES fixed bin (35);				/* byte location in the text section */
dcl PR4BYTES fixed bin (35);				/* byte location of the link ITS to generate */
dcl TYPOFENTRY fixed bin (35);			/* code for the entry (see constants decl. */
dcl SEGNAME char (32);				/* segment name if imported procedure */
dcl ENTRYNAME char (32);				/* name of the entrypoint */
dcl FUNCTIONFLAG fixed bin (35);			/* (input) PASCAL boolean, true if entrypoint is a function */
dcl ENTRYLENGTH fixed bin (35);			/* (output) nbr of bytes for generated entry_sequence */
dcl ERRCODE fixed bin (35);				/* ERRCODE to compiler :
						   0 - ok
						   1 - invalid pathname supplied for external procedure
						*/


/* external references to the Multics system */

dcl check_star_name_$path entry (char (*), fixed bin (35));
dcl ioa_$rs entry options (variable);

/* external references to other pascal entry points */

dcl RACINE_defs$extcalltrapplace fixed bin (35) ext;
dcl pascal_gen_string_$def_ entry (char (*), fixed bin (18) unsigned unal, fixed bin (35));
dcl pascal_gen_rel_$text entry (bit (5), fixed bin);
dcl pascal_gen_rel_$def entry (bit (5), fixed bin);
dcl pascal_error_table_$cur_text_error ext fixed bin (35);
dcl pascal_error_table_$bad_link_place ext fixed bin (35);
dcl pascal_comp_error entry;

/* automatic */

dcl string_len fixed bin (21);
dcl link_ptr ptr;
dcl entry_seq_ptr ptr;
dcl entry_acc_offset fixed bin (18) unsigned unal;
dcl seg_acc_offset fixed bin (18) unsigned unal;
dcl acc_offset fixed bin (18) unsigned unal;
dcl type_pair_ptr ptr;
dcl definition_offset fixed bin (18) unsigned unal;
dcl offset fixed bin (35);
dcl code fixed bin (35);
dcl nbwords fixed bin (35);
dcl (i, j) fixed bin (35);
dcl var_string char (32) varying;
dcl text_offset fixed bin (35);

/* constants */

/* TYPOFENTRY codes */
dcl int_proc fixed bin (35) int static options (constant) init (0);
dcl DEF_proc fixed bin (35) int static options (constant) init (1);
dcl REF_proc fixed bin (35) int static options (constant) init (2);
dcl MAIN_entry fixed bin (35) int static options (constant) init (3);
dcl exit_label fixed bin (35) int static options (constant) init (4);

/* builtins */

dcl (addr, rel, rtrim, ptr, mod, index, search) builtin;

/* based */

dcl 1 val based,
     2 high bit (18) unal,
     2 low bit (18) unal;

dcl 1 short_entry_sequence based aligned like entry_sequence.word2;
%page;
	text_offset = TEXTBYTES / 4;
	ERRCODE = 0;
	ENTRYLENGTH = 0;

/* text ptr check */

	if ((TYPOFENTRY ^= REF_proc) & (TYPOFENTRY ^= exit_label))
	     & ((mod (TEXTBYTES, 4) ^= 0) | ((text_offset) ^= pascal_context_$text_word_count)) then do;
	     ERRCODE = 1;
	     return;
	end;

/* acc strings */

	if TYPOFENTRY = REF_proc then do;
	     call pascal_gen_string_$def_ (rtrim (SEGNAME), seg_acc_offset, nbwords);
	     if nbwords ^= 0 then do;
		if pascal_context_$options.bind = "1"b then
		     call pascal_gen_rel_$def (abs, nbwords * 2);
		pascal_context_$def_word_count = pascal_context_$def_word_count + nbwords;
	     end;
	     if ENTRYNAME ^= SEGNAME then do;
		call pascal_gen_string_$def_ (rtrim (ENTRYNAME), entry_acc_offset, nbwords);
		if nbwords ^= 0 then do;
		     if pascal_context_$options.bind = "1"b then
			call pascal_gen_rel_$def (abs, nbwords * 2);
		     pascal_context_$def_word_count = pascal_context_$def_word_count + nbwords;
		end;
	     end;
	     else entry_acc_offset = seg_acc_offset;
	end;
	else do;
	     if (TYPOFENTRY = DEF_proc) | (TYPOFENTRY = MAIN_entry) then do;
		call pascal_gen_string_$def_ (rtrim (ENTRYNAME), acc_offset, nbwords);
		if nbwords ^= 0 then do;
		     if pascal_context_$options.bind = "1"b then
			call pascal_gen_rel_$def (abs, nbwords * 2);
		     pascal_context_$def_word_count = pascal_context_$def_word_count + nbwords;
		end;
	     end;
	end;

	def_ptr = ptr (pascal_context_$def_ptr, pascal_context_$def_word_count);

/* entry sequence and definition for exportable entry points */

	if (TYPOFENTRY = DEF_proc) | (TYPOFENTRY = MAIN_entry) then do;
	     entry_seq_ptr = ptr (pascal_context_$text_ptr, pascal_context_$text_word_count);
	     if pascal_context_$options.table then
		entry_seq_ptr = addrel (entry_seq_ptr, 1);
	     entry_seq_ptr -> short_entry_sequence.flags.revision_1 = "1"b; /* other flags are "0"b */
	     entry_seq_ptr -> short_entry_sequence.def_relp = rel (def_ptr);
	     entry_seq_ptr -> short_entry_sequence.flags.function = (FUNCTIONFLAG = 1);
	     if pascal_context_$options.table then do;
		ENTRYLENGTH = 8;
		entry_seq_ptr -> short_entry_sequence.flags.has_descriptors = "1"b;
		call pascal_gen_rel_$text (text_rel, 1);
		call pascal_gen_rel_$text (abs, 1);
	     end;
	     else
		ENTRYLENGTH = 4;

	     call pascal_gen_rel_$text (def_rel, 1);
	     call pascal_gen_rel_$text (abs, 1);
	     def_ptr -> definition.backward_relp = fixed (rel (pascal_context_$last_def_ptr));
	     def_ptr -> definition.forward_relp = 2;	/* 2 : all zero word */
	     pascal_context_$last_def_ptr -> definition.forward_relp = fixed (rel (def_ptr));
	     pascal_context_$last_def_ptr = def_ptr;
	     pascal_context_$text_word_count = pascal_context_$text_word_count + (ENTRYLENGTH / 4);
	     def_ptr -> definition.thing_relp = pascal_context_$text_word_count;
	     def_ptr -> definition.flags.new = "1"b;
	     def_ptr -> definition.flags.entry = "1"b;
	     def_ptr -> definition.flags.retain = "1"b;
	     def_ptr -> definition.name_relp = acc_offset;
	     def_ptr -> definition.segname_relp = fixed (rel (pascal_context_$def_ptr));
	     def_ptr = addrel (def_ptr, 3);
	     if pascal_context_$options.bind = "1"b then do;
		call pascal_gen_rel_$def (def_rel, 2);
		call pascal_gen_rel_$def (text_rel, 1);
		call pascal_gen_rel_$def (abs, 1);
		call pascal_gen_rel_$def (def_rel, 2);
	     end;
	end;

/* links */

	if (TYPOFENTRY ^= MAIN_entry) then do;
	     type_ptr = def_ptr;
						/* internal references */
	     if (TYPOFENTRY ^= REF_proc) then do;
		type_pair.type = 1;
		exp_ptr,
		     def_ptr = addrel (def_ptr, 2);
		if TYPOFENTRY ^= exit_label then exp_word.expression = pascal_context_$text_word_count;
		else exp_word.expression = text_offset;
		if pascal_context_$options.bind = "1"b then do;
		     call pascal_gen_rel_$def (abs, 4);
		     call pascal_gen_rel_$def (def_rel, 1);
		     call pascal_gen_rel_$def (text_rel, 1);
		end;
		exp_word.type_relp = fixed (rel (type_ptr));
		definition_offset = fixed (rel (def_ptr));
		def_ptr = addrel (def_ptr, 1);
	     end;
						/* imported procedures */
	     else do;
		type_pair.type = 4;
		type_pair.segname_relp = seg_acc_offset;
		type_pair.offsetname_relp = entry_acc_offset;
		exp_ptr,
		     def_ptr = addrel (def_ptr, 2);
		if pascal_context_$options.bind = "1"b then do;
		     call pascal_gen_rel_$def (abs, 2);
		     call pascal_gen_rel_$def (def_rel, 3);
		     call pascal_gen_rel_$def (abs, 1);
		end;
		exp_word.type_relp = fixed (rel (type_ptr));
		definition_offset = fixed (rel (def_ptr));
		def_ptr = addrel (def_ptr, 1);
		if TEXTBYTES ^= 0 then do;
						/* trap pair */
		     type_ptr -> type_pair.trap_relp = fixed (rel (def_ptr));
		     def_ptr -> link_trap_pair.call_relp = RACINE_defs$extcalltrapplace / 4;
		     def_ptr -> link_trap_pair.info_relp = (PR4BYTES / 4) + 2;
		     if pascal_context_$options.bind then
			call pascal_gen_rel_$def (link18, 2);
		     def_ptr = addrel (def_ptr, 1);
						/* link to info for trap proc */
		     type_ptr = def_ptr;
		     type_pair.type = 1;
		     exp_ptr,
			def_ptr = addrel (def_ptr, 2);
		     exp_word.expression = text_offset;
		     if pascal_context_$options.bind = "1"b then do;
			call pascal_gen_rel_$def (abs, 4);
			call pascal_gen_rel_$def (def_rel, 1);
			call pascal_gen_rel_$def (text_rel, 1);
		     end;
		     exp_word.type_relp = fixed (rel (type_ptr));
		     offset = (PR4BYTES / 4) + 2;
		     link_ptr = addrel (pascal_context_$links_ptr, offset);
		     link_ptr -> object_link.tag = "46"b3; /* tag 46 octal */
		     link_ptr -> object_link.expression_relp = fixed (rel (def_ptr));
		     def_ptr = addrel (def_ptr, 1);
		end;
	     end;
	     if mod (PR4BYTES, 8) ^= 0 then do;
		ERRCODE = 1;
		return;
	     end;
	     offset = PR4BYTES / 4;
	     link_ptr = addrel (pascal_context_$links_ptr, offset);
	     link_ptr -> object_link.tag = "46"b3;	/* tag 46 octal */
	     link_ptr -> object_link.expression_relp = definition_offset;

	end;

	pascal_context_$def_word_count = fixed (rel (def_ptr));
	return;


%page;
%include definition_dcls;
%include pascal_context_;
%include entry_sequence_info;
%include object_link_dcls;
     end genentrypoint;
