/****^  *************************************************************************
        *                                                                       *
        * Copyright (c) 1980 by Centre Interuniversitaire de Calcul de Grenoble *
        * and Institut National de Recherche en Informatique et Automatique     *
        *                                                                       *
        ************************************************************************* */

/****^  HISTORY COMMENTS:
  1) change(86-10-05,JMAthane), approve(86-10-05,MCR7521),
     audit(86-10-09,JPFauche), install(86-11-12,MR12.0-1212):
     Pascal version for MR12.
                                                   END HISTORY COMMENTS */

genextvariable: proc (SEGNAME, VARNAME, GENERATOR, PR4DISP, VARLENGTH, LENGTH, TABLE, ERRCODE);

/*

   procedure called to generate an external static link


*/

	dcl     SEGNAME		 char (32);	/* (input) name of the segment of the imported variable */
	dcl     VARNAME		 char (32);	/* (input) name of the variable */
	dcl     GENERATOR		 char (32);	/* (input) name of the segment generator */
	dcl     PR4DISP		 fixed bin (35);	/* (input) byte offset of the link ITS to generate */
	dcl     LENGTH		 fixed bin (35);	/* (input) if ^= 0 then length in half-words of the init array */
						/* (input) if = 0 then no init array */
	dcl     VARLENGTH		 fixed bin (35);	/* (input) length in bytes of the variable */
	dcl     1 TABLE		 (255000),	/* (input)  init array if any */
		2 pad		 bit (18) unal,
		2 half_word	 bit (18) unal;
	dcl     ERRCODE		 fixed bin (35);	/* (output) error code */

%include pascal_context_;
%include linkdcl;
%include definition;

/* external references to the Multics system */

	dcl     ioa_$rs		 entry options (variable);

/* external references to other Pascal entry points */

	dcl     pascal_error_table_$bad_args fixed bin (35) ext;
	dcl     pascal_error_table_$bad_link_place fixed bin (35) ext;
	dcl     pascal_gen_string_$def_ entry (char (*), bit (18), fixed bin (35));
	dcl     pascal_gen_string_$ps_def_ entry (char (*), bit (18), fixed bin (35));
	dcl     pascal_comp_error	 entry;
	dcl     pascal_gen_rel_$def	 entry (bit (5), fixed bin);
	dcl     pascal_gen_rel_$ps_def entry (bit (5), fixed bin);

/* automatics */

	dcl     string_len		 fixed bin (21);
	dcl     code		 fixed bin (35);
	dcl     ps_nbwords		 fixed bin (35);
	dcl     nbwords		 fixed bin (35);
	dcl     def_ptr		 ptr;
	dcl     i			 fixed bin (35);
	dcl     trap_pair_offset	 bit (18);
	dcl     offset		 fixed bin (35);
	dcl     ps_stat_ptr		 ptr;
	dcl     link_ptr		 ptr;
	dcl     init_offset		 bit (18);
	dcl     acc_offset		 bit (18);
	dcl     seg_acc_offset	 bit (18);
	dcl     var_type		 fixed bin (35);
	dcl     ps_acc_offset	 bit (18);
	dcl     ps_def_ptr		 ptr;
	dcl     ps_offset		 fixed bin (35);
	dcl     var_length		 fixed bin (35);

/* constants */

	dcl     DEF		 fixed bin (35) int static options (constant) init (2);
	dcl     REF		 fixed bin (35) int static options (constant) init (1);

/* builtins */

	dcl     (addrel, addr, rel, translate) builtin;

/* based */

	dcl     1 initialisation_info	 based,
		2 n_words		 fixed bin,
		2 code		 fixed bin,
		2 info		 (var_length) bit (18) unal;


	dcl     1 acc		 based,
		2 num_chars	 fixed bin (8) unal,
		2 string		 char (0 refer (acc.num_chars)) unal;


	dcl     1 val		 based,
		2 high		 bit (18) unal,
		2 low		 bit (18) unal;

	dcl     initarray		 (var_length) bit (18) unal based;


/*  */
	ERRCODE = 0;

	if VARLENGTH >= 0 then var_type = DEF;
	else do;
		var_type = REF;
		VARLENGTH = -VARLENGTH;
	     end;

	if (mod (PR4DISP, 8) ^= 0) then do;
		ERRCODE = 1;
		return;
	     end;

	if (((VARLENGTH + 3) / 4) * 2 < LENGTH) then do;
		ERRCODE = 1;
		return;
	     end;

	offset = PR4DISP / 4;
	link_ptr = addrel (pascal_context_$links_ptr, offset);
	link_ptr -> ft2 = "100110"b;			/* tag 46 octal */

/* acc string */

	call pascal_gen_string_$def_ (rtrim (VARNAME), acc_offset, nbwords);
	if nbwords ^= 0 then do;
		call pascal_gen_rel_$def (abs, nbwords * 2);
		pascal_context_$def_word_count = pascal_context_$def_word_count + nbwords;
	     end;

	def_ptr = ptr (pascal_context_$def_ptr, pascal_context_$def_word_count);

/* length of variable */

	nbwords = (VARLENGTH + 3) / 4;
	var_length = nbwords * 2;

/* DEF */

	if var_type = DEF then do;
						/* allocation */
		if pascal_context_$options.ps = "1"b then do;
			if nbwords > 1 then do;
				pascal_context_$ps_stat_half_word_count = (pascal_context_$ps_stat_half_word_count + 3) / 4;
				pascal_context_$ps_stat_half_word_count = pascal_context_$ps_stat_half_word_count * 4;
			     end;
			ps_offset = pascal_context_$ps_stat_half_word_count / 2;
			ps_stat_ptr = ptr (pascal_context_$ps_link_ptr, ps_offset);
			ps_offset = ps_offset - 8;
			if LENGTH ^= 0 then do;
				do i = 1 to LENGTH;
				     ps_stat_ptr -> initarray (i) = TABLE.half_word (i);
				end;
			     end;
			if var_length > LENGTH then do;
				do i = LENGTH + 1 to var_length;
				     ps_stat_ptr -> initarray (i) = "040040"b3;
				end;
			     end;
			pascal_context_$ps_stat_half_word_count = pascal_context_$ps_stat_half_word_count + (nbwords * 2);
			call pascal_gen_string_$ps_def_ (rtrim (VARNAME), ps_acc_offset, ps_nbwords);
			if ps_nbwords ^= 0 then do;
				if pascal_context_$options.bind = "1"b then
				     call pascal_gen_rel_$ps_def (abs, ps_nbwords * 2);
				pascal_context_$ps_def_word_count = pascal_context_$ps_def_word_count + ps_nbwords;
			     end;
			ps_def_ptr = ptr (pascal_context_$ps_def_ptr, pascal_context_$ps_def_word_count);
			ps_def_ptr -> forward = "000000000000000010"b; /* 2 : all zero word */
			ps_def_ptr -> backward = rel (pascal_context_$ps_last_def_ptr);
			pascal_context_$ps_last_def_ptr -> forward = rel (ps_def_ptr);
			pascal_context_$ps_last_def_ptr = ps_def_ptr;
			ps_def_ptr -> value = addr (ps_offset) -> val.low;
			ps_def_ptr -> new = "1"b;
			ps_def_ptr -> class = "100"b;
			ps_def_ptr -> symbol = ps_acc_offset;
			ps_def_ptr -> segname = rel (pascal_context_$ps_segname_def_ptr);
			ps_def_ptr = addrel (ps_def_ptr, 3);
			if pascal_context_$options.bind = "1"b then do;
				call pascal_gen_rel_$ps_def (def_rel, 2);
				call pascal_gen_rel_$ps_def (int18, 1);
				call pascal_gen_rel_$ps_def (abs, 1);
				call pascal_gen_rel_$ps_def (def_rel, 2);
			     end;
			pascal_context_$ps_def_word_count = pascal_context_$ps_def_word_count + 3;
		     end;
		else do;
			init_offset = rel (def_ptr);
			def_ptr -> n_words = nbwords;
			if LENGTH ^= 0 then do;
				def_ptr -> initialisation_info.code = 3;
				do i = 1 to LENGTH;
				     def_ptr -> info (i) = TABLE.half_word (i);
				end;
				if var_length > LENGTH then do;
					do i = LENGTH + 1 to var_length;
					     def_ptr -> info (i) = "040040"b3;
					end;
				     end;
				nbwords = nbwords + 2;
			     end;
			else do;
				def_ptr -> initialisation_info.code = 0;
				nbwords = 2;
			     end;
			def_ptr = addrel (def_ptr, nbwords);
			call pascal_gen_rel_$def (abs, nbwords * 2);
			pascal_context_$def_word_count = pascal_context_$def_word_count + nbwords;
		     end;
						/* definition */
		def_ptr -> forward = "000000000000000010"b; /* 2 : all zero word */
		def_ptr -> backward = rel (pascal_context_$last_def_ptr);
		pascal_context_$last_def_ptr -> forward = rel (def_ptr);
		pascal_context_$last_def_ptr = def_ptr;
		def_ptr -> value = addr (offset) -> val.low;
		def_ptr -> new = "1"b;
		def_ptr -> class = "001"b;
		def_ptr -> symbol = acc_offset;
		def_ptr -> segname = rel (pascal_context_$segname_def_ptr);
		def_ptr = addrel (def_ptr, 3);
		pascal_context_$def_word_count = pascal_context_$def_word_count + 3;
		call pascal_gen_rel_$def (def_rel, 2);
		call pascal_gen_rel_$def (link18, 1);
		call pascal_gen_rel_$def (abs, 1);
		call pascal_gen_rel_$def (def_rel, 2);
						/* type pair */
		if pascal_context_$options.ps = "1"b then do;
			call pascal_gen_string_$def_ (ptr (pascal_context_$ps_def_ptr, pascal_context_$ps_segname_def_ptr -> symbol) -> acc.string, ps_acc_offset, nbwords);
			if nbwords ^= 0 then do;
				def_ptr = addrel (def_ptr, nbwords);
				if pascal_context_$options.bind = "1"b then
				     call pascal_gen_rel_$def (abs, nbwords * 2);
			     end;
			def_ptr -> type = "000000000000000100"b; /* type 4 */
			def_ptr -> seg_ptr = ps_acc_offset;
			call pascal_gen_rel_$def (abs, 2);
			call pascal_gen_rel_$def (def_rel, 2);
		     end;
		else do;
			def_ptr -> type = "000000000000000101"b; /* type 5 */
			def_ptr -> trap_ptr = init_offset;
			def_ptr -> seg_ptr = "000000000000000101"b; /* 5 */
			do i = 1 to 2;
			     call pascal_gen_rel_$def (abs, 1);
			     call pascal_gen_rel_$def (def_rel, 1);
			end;
		     end;
		def_ptr -> ext_ptr = acc_offset;
		trap_pair_offset = rel (def_ptr);
		def_ptr = addrel (def_ptr, 2);
						/* exp_word */
		def_ptr -> type_ptr = trap_pair_offset;
		call pascal_gen_rel_$def (def_rel, 1);
		call pascal_gen_rel_$def (abs, 1);

	     end;

/* REF */

	else do;

/* external statics imported */

		if (SEGNAME = "external_statics") | (SEGNAME = "external_static") then do;
			init_offset = rel (def_ptr);
			def_ptr -> n_words = nbwords;
			def_ptr -> initialisation_info.code = 0;
			def_ptr = addrel (def_ptr, 2);
			call pascal_gen_rel_$def (abs, 4);
						/* type pair */
			def_ptr -> type = "000000000000000101"b; /* type 5 */
			def_ptr -> trap_ptr = init_offset;
			def_ptr -> seg_ptr = "000000000000000101"b; /* 5 */
			do i = 1 to 2;
			     call pascal_gen_rel_$def (abs, 1);
			     call pascal_gen_rel_$def (def_rel, 1);
			end;
			def_ptr -> ext_ptr = acc_offset;
			trap_pair_offset = rel (def_ptr);
			def_ptr = addrel (def_ptr, 2);
		     end;

/* other */

		else do;
			if SEGNAME ^= VARNAME then do;
				call pascal_gen_string_$def_ (rtrim (SEGNAME), seg_acc_offset, nbwords);
				if nbwords ^= 0 then do;
					call pascal_gen_rel_$def (abs, nbwords * 2);
					pascal_context_$def_word_count = pascal_context_$def_word_count + nbwords;
				     end;
				def_ptr = ptr (pascal_context_$def_ptr, pascal_context_$def_word_count);
			     end;
			else seg_acc_offset = acc_offset;
						/* type pair */
			trap_pair_offset = rel (def_ptr);
			def_ptr -> type = "000000000000000100"b; /* type 4 */
			def_ptr -> seg_ptr = seg_acc_offset;
			def_ptr -> ext_ptr = acc_offset;
			def_ptr = addrel (def_ptr, 2);
			call pascal_gen_rel_$def (abs, 2);
			call pascal_gen_rel_$def (def_rel, 2);
		     end;
						/* exp word */
		def_ptr -> type_ptr = trap_pair_offset;
		call pascal_gen_rel_$def (def_rel, 1);
		call pascal_gen_rel_$def (abs, 1);
						/* link ITS */
		if translate (GENERATOR, "pascl", "PASCL") = "pascal" then
		     link_ptr -> modifier = "010000"b;	/* indirect link for imported PASCAL variables */
	     end;
						/* link ITS */
	link_ptr -> exp_ptr = rel (def_ptr);

	def_ptr = addrel (def_ptr, 1);
	addr (pascal_context_$def_word_count) -> val.low = rel (def_ptr);

	return;


     end genextvariable;
