/* *************************************************************************
   *                                                                       *
   * Copyright (c) 1980 by Centre Interuniversitaire de Calcul de Grenoble *
   * and Institut National de Recherche en Informatique et Automatique     *
   *                                                                       *
   ************************************************************************* */
pascal_gen_io_ref_: proc;

/*

   procedure called to generate reference to implicitly declared INPUT  or OUTPUT fsb
   generates ext reference to pascal_io_$INPUT, pascal_io_$OUTPUT or pascal_io_$ERROR.
   (allocated in "pascal_io_alm_")

*/

	dcl     PR4DISP		 fixed bin (35);
	dcl     ERRCODE		 fixed bin (35);

%include pascal_context_;
%include linkdcl;
%include definition;

/* external references to the Multics system */

	dcl     ioa_$rs		 entry options (variable);

/* external references to other PASCAL entry points */

	dcl     pascal_error_table_$bad_link_place ext fixed bin (35);
	dcl     pascal_gen_rel_$def	 entry (bit (5), fixed bin);
	dcl     pascal_comp_error	 entry;
	dcl     pascal_gen_string_$def_ entry (char (*), bit (18), fixed bin (35));

/* automatics */

	dcl     string_len		 fixed bin (21);
	dcl     nbwords		 fixed bin (35);
	dcl     code		 fixed bin (35);
	dcl     var_name		 char (10);
	dcl     (acc_1_offset, acc_2_offset, trap_pair_offset) bit (18);
	dcl     (def_ptr, link_ptr)	 ptr;
	dcl     offset		 fixed bin (35);

/* based */

	dcl     1 val		 based,
		2 high		 bit (18) unal,
		2 low		 bit (18) unal;

/* builtins */

	dcl     (addr, addrel, mod, ptr, rel, rtrim) builtin;

/*  */
geninput: entry (PR4DISP, ERRCODE);

	var_name = "INPUT";
	go to join;

genoutput: entry (PR4DISP, ERRCODE);

	var_name = "OUTPUT";
	go to join;

generror: entry (PR4DISP, ERRCODE);

	var_name = "ERROR";
	go to join;

genentree: entry (PR4DISP, ERRCODE);

	var_name = "ENTREE";
	go to join;

gensortie: entry (PR4DISP, ERRCODE);

	var_name = "SORTIE";
	go to join;

generreur: entry (PR4DISP, ERRCODE);

	var_name = "ERREUR";


join:
	ERRCODE = 0;
	if PR4DISP < 0 then PR4DISP = -PR4DISP;

	if (mod (PR4DISP, 8) ^= 0) then do;
		ERRCODE = 1;
		return;
	     end;

/* acc strings */

	call pascal_gen_string_$def_ (rtrim (var_name), acc_1_offset, nbwords);
	if nbwords ^= 0 then do;
		pascal_context_$def_word_count = pascal_context_$def_word_count + nbwords;
		call pascal_gen_rel_$def (abs, nbwords * 2);
	     end;
	call pascal_gen_string_$def_ ("pascal_io_", acc_2_offset, nbwords);
	if nbwords ^= 0 then do;
		pascal_context_$def_word_count = pascal_context_$def_word_count + nbwords;
		call pascal_gen_rel_$def (abs, nbwords * 2);
	     end;
	def_ptr = ptr (pascal_context_$def_ptr, pascal_context_$def_word_count);

/* type pair */

	trap_pair_offset = rel (def_ptr);
	def_ptr -> type = "000000000000000100"b;
	def_ptr -> seg_ptr = acc_2_offset;
	def_ptr -> ext_ptr = acc_1_offset;
	def_ptr = addrel (def_ptr, 2);
	call pascal_gen_rel_$def (abs, 2);
	call pascal_gen_rel_$def (def_rel, 2);

/* exp_word */

	def_ptr -> type_ptr = trap_pair_offset;
	call pascal_gen_rel_$def (def_rel, 1);
	call pascal_gen_rel_$def (abs, 1);

/* link ITS */

	offset = PR4DISP / 4;
	link_ptr = addrel (pascal_context_$links_ptr, offset);
	link_ptr -> ft2 = "100110"b;			/* tag 46 octal */
	link_ptr -> exp_ptr = rel (def_ptr);

	def_ptr = addrel (def_ptr, 1);
	addr (pascal_context_$def_word_count) -> val.low = rel (def_ptr);

	return;

     end pascal_gen_io_ref_;
