/* *************************************************************************
   *                                                                       *
   * Copyright (c) 1980 by Centre Interuniversitaire de Calcul de Grenoble *
   * and Institut National de Recherche en Informatique et Automatique     *
   *                                                                       *
   ************************************************************************* */
genbinarea: proc (BYTDISP, CODEAREA, LENGTH, CODELENGTH, TABLE, ERRCODE);

/*

   Procedure called to initialize a binary area into one of the sections

*/

	dcl     BYTDISP		 fixed bin (35);	/* (input) byte addr in the section */
	dcl     CODEAREA		 fixed bin (35);	/* (input) code of the section (1 : txt, 3 : stat, 4 : stat(init blanks)) */
	dcl     LENGTH		 fixed bin (35);	/* (input) length in half_words of the area */
	dcl     CODELENGTH		 fixed bin (35);	/* (input) length in half words of the machine_instructions zone (if CODEAREA = 1) */
	dcl     1 TABLE		 (255000),	/* (input)  area to copy (if CODEAREA ^= 4) */
		2 pad		 bit (18) unal,
		2 half_word	 bit (18) unal;
	dcl     ERRCODE		 fixed bin (35);	/* (output) return code */


%include pascal_context_;

/* external references to the Multics system */

	dcl     ioa_$rs		 entry options (variable);

/* external references to other Pascal entry points */

	dcl     pascal_error_table_$bad_args fixed bin (35) ext;
	dcl     pascal_gen_rel_$text	 entry (bit (5), fixed bin);
	dcl     pascal_gen_rel_$link	 entry (bit (5), fixed bin);
						/* automatics */

	dcl     length		 fixed bin (35);
	dcl     string_len		 fixed bin (21);
	dcl     i			 fixed bin;
	dcl     (target_ptr, word_ptr, end_code_ptr, desc_ptr) ptr;
	dcl     areaindex		 fixed bin;
	dcl     code		 fixed bin (35);

/* based */

	dcl     section		 (0:255 * 1024 * 4) bit (9) unal based (pascal_context_$segs (areaindex));
	dcl     1 machine_word	 based (word_ptr),
		2 reg		 fixed bin (3) unsigned unal,
		2 offset		 fixed bin (15) unsigned unal,
		2 code		 fixed bin (10) unsigned unal,
		2 I_bit		 bit (1) unal,
		2 A_bit		 bit (1) unal,
		2 tm		 bit (2) unal,
		2 td		 bit (4) unal;
	dcl     1 eis		 based (word_ptr),
		2 pad_1		 bit (11) unal,
		2 bit_11		 bit (1) unal,
		2 pad_2		 bit (17) unal,
		2 bit_29		 bit (1) unal,
		2 pad_3		 bit (6) unal;
	dcl     1 descriptor	 based (desc_ptr),
		2 register	 fixed bin (3) unsigned unal,
		2 disp		 fixed bin (15) unsigned unal,
		2 pad_1		 bit (18) unal;
	dcl     target		 (LENGTH) bit (18) unal based (target_ptr);

/* builtins */

	dcl     mod		 builtin;

	dcl     addr		 builtin;

/*  */

	ERRCODE = 0;

	if ((CODEAREA ^= 1) & (CODEAREA ^= 3) & (CODEAREA ^= 4))
	     | ((CODEAREA = 1) & ((mod (CODELENGTH, 2) ^= 0) | (mod (LENGTH, 2) ^= 0) | (mod (BYTDISP, 4) ^= 0) | (pascal_context_$text_word_count ^= (BYTDISP / 4))))
	     | ((CODEAREA ^= 1) & ((mod (BYTDISP, 2) ^= 0) | (pascal_context_$stat_half_word_count > (BYTDISP / 2)))) then do;
		ERRCODE = 1;
		return;
	     end;

	if CODEAREA = 4 then areaindex = 3; else areaindex = CODEAREA;

	if (CODEAREA = 3) | (CODEAREA = 4) then do;
		length = (BYTDISP / 2) - pascal_context_$stat_half_word_count;
		if length > 0 then do;
			target_ptr = addr (section (pascal_context_$stat_half_word_count * 2));
			do i = 1 to length;
			     target (i) = "040040"b3;
			end;
		     end;
	     end;
	if (CODEAREA ^= 4) then do;
		target_ptr = addr (section (BYTDISP));
		do i = 1 to LENGTH;
		     target (i) = TABLE.half_word (i);
		end;
	     end;
	if (CODEAREA = 4) then do;
		target_ptr = addr (section (BYTDISP));
		do i = 1 to LENGTH;
		     target (i) = "040040"b3;		/* two blanks */
		end;
	     end;
	if (CODEAREA = 1) then do;
		pascal_context_$text_word_count = pascal_context_$text_word_count + (LENGTH / 2);
	     end;
	else do;
		pascal_context_$stat_half_word_count = (BYTDISP / 2) + LENGTH;
	     end;

	return;


     end genbinarea;
