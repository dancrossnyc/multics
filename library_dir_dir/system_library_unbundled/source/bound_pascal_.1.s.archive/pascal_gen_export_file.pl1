/* *************************************************************************
   *                                                                       *
   * Copyright (c) 1980 by Centre Interuniversitaire de Calcul de Grenoble *
   * and Institut National de Recherche en Informatique et Automatique     *
   *                                                                       *
   ************************************************************************* */
genexportfile: proc (FILENAME, PR4DISP, ERRCODE);

/*

   procedure called to generate an external static link


*/

	dcl     FILENAME		 char (32);	/* (input) name of the variable */
	dcl     PR4DISP		 fixed bin (35);	/* (input) byte offset of the link ITS to generate */
	dcl     ERRCODE		 fixed bin (35);	/* (output) error code */

%include pascal_context_;
%include linkdcl;
%include definition;

/* external references to the Multics system */

	dcl     ioa_$rs		 entry options (variable);

/* external references to other Pascal entry points */

	dcl     pascal_error_table_$bad_args fixed bin (35) ext;
	dcl     pascal_error_table_$bad_link_place fixed bin (35) ext;
	dcl     pascal_gen_string_$def_ entry (char (*), bit (18), fixed bin (35));
	dcl     pascal_gen_string_$ps_def_ entry (char (*), bit (18), fixed bin (35));
	dcl     pascal_comp_error	 entry;
	dcl     pascal_gen_rel_$def	 entry (bit (5), fixed bin);
	dcl     pascal_gen_rel_$ps_def entry (bit (5), fixed bin);

/* automatics */

	dcl     string_len		 fixed bin (21);
	dcl     code		 fixed bin (35);
	dcl     ps_nbwords		 fixed bin (35);
	dcl     nbwords		 fixed bin (35);
	dcl     def_ptr		 ptr;
	dcl     i			 fixed bin (35);
	dcl     trap_pair_offset	 bit (18);
	dcl     offset		 fixed bin (35);
	dcl     ps_stat_ptr		 ptr;
	dcl     link_ptr		 ptr;
	dcl     init_offset		 bit (18);
	dcl     acc_offset		 bit (18);
	dcl     seg_acc_offset	 bit (18);
	dcl     var_type		 fixed bin (35);
	dcl     ps_acc_offset	 bit (18);
	dcl     ps_def_ptr		 ptr;
	dcl     ps_offset		 fixed bin (35);

/* builtins */

	dcl     (addrel, addr, rel, null) builtin;

/* based */

	dcl     1 initialisation_info	 based,
		2 n_words		 fixed bin,
		2 code		 fixed bin,
		2 fsb_ptr		 bit (72);


	dcl     1 acc		 based,
		2 num_chars	 fixed bin (8) unal,
		2 string		 char (0 refer (acc.num_chars)) unal;


	dcl     1 val		 based,
		2 high		 bit (18) unal,
		2 low		 bit (18) unal;

	dcl     b_ptr		 ptr based;


/*  */
	ERRCODE = 0;

	if (mod (PR4DISP, 8) ^= 0) then do;
		ERRCODE = 1;
		return;
	     end;

	offset = PR4DISP / 4;
	link_ptr = addrel (pascal_context_$links_ptr, offset);
	link_ptr -> ft2 = "100110"b;			/* tag 46 octal */

/* acc string */

	call pascal_gen_string_$def_ (rtrim (FILENAME), acc_offset, nbwords);
	if nbwords ^= 0 then do;
		call pascal_gen_rel_$def (abs, nbwords * 2);
		pascal_context_$def_word_count = pascal_context_$def_word_count + nbwords;
	     end;

	def_ptr = ptr (pascal_context_$def_ptr, pascal_context_$def_word_count);

	if pascal_context_$options.ps then do;
		pascal_context_$ps_stat_half_word_count = (pascal_context_$ps_stat_half_word_count + 3) / 4;
		pascal_context_$ps_stat_half_word_count = pascal_context_$ps_stat_half_word_count * 4;
		ps_offset = pascal_context_$ps_stat_half_word_count / 2;
		ps_stat_ptr = ptr (pascal_context_$ps_link_ptr, ps_offset);
		ps_offset = ps_offset - 8;
		ps_stat_ptr -> b_ptr = null;
		pascal_context_$ps_stat_half_word_count = pascal_context_$ps_stat_half_word_count + 4;
		call pascal_gen_string_$ps_def_ (rtrim (FILENAME), ps_acc_offset, ps_nbwords);
		if ps_nbwords ^= 0 then do;
			if pascal_context_$options.bind = "1"b then
			     call pascal_gen_rel_$ps_def (abs, ps_nbwords * 2);
			pascal_context_$ps_def_word_count = pascal_context_$ps_def_word_count + ps_nbwords;
		     end;
		ps_def_ptr = ptr (pascal_context_$ps_def_ptr, pascal_context_$ps_def_word_count);
		ps_def_ptr -> forward = "000000000000000010"b; /* 2 : all zero word */
		ps_def_ptr -> backward = rel (pascal_context_$ps_last_def_ptr);
		pascal_context_$ps_last_def_ptr -> forward = rel (ps_def_ptr);
		pascal_context_$ps_last_def_ptr = ps_def_ptr;
		ps_def_ptr -> value = addr (ps_offset) -> val.low;
		ps_def_ptr -> new = "1"b;
		ps_def_ptr -> class = "100"b;
		ps_def_ptr -> symbol = ps_acc_offset;
		ps_def_ptr -> segname = rel (pascal_context_$ps_segname_def_ptr);
		ps_def_ptr = addrel (ps_def_ptr, 3);
		if pascal_context_$options.bind = "1"b then do;
			call pascal_gen_rel_$ps_def (def_rel, 2);
			call pascal_gen_rel_$ps_def (int18, 1);
			call pascal_gen_rel_$ps_def (abs, 1);
			call pascal_gen_rel_$ps_def (def_rel, 2);
		     end;
		pascal_context_$ps_def_word_count = pascal_context_$ps_def_word_count + 3;
	     end;
	else do;
		init_offset = rel (def_ptr);
		def_ptr -> n_words = 2;
		def_ptr -> initialisation_info.code = 3;
		def_ptr -> fsb_ptr = "077777000043000001000000"b3;
		def_ptr = addrel (def_ptr, 4);
		call pascal_gen_rel_$def (abs, 8);
		pascal_context_$def_word_count = pascal_context_$def_word_count + 4;
	     end;
						/* definition */
	def_ptr -> forward = "000000000000000010"b;	/* 2 : all zero word */
	def_ptr -> backward = rel (pascal_context_$last_def_ptr);
	pascal_context_$last_def_ptr -> forward = rel (def_ptr);
	pascal_context_$last_def_ptr = def_ptr;
	def_ptr -> value = addr (offset) -> val.low;
	def_ptr -> new = "1"b;
	def_ptr -> class = "001"b;
	def_ptr -> symbol = acc_offset;
	def_ptr -> segname = rel (pascal_context_$segname_def_ptr);
	def_ptr = addrel (def_ptr, 3);
	pascal_context_$def_word_count = pascal_context_$def_word_count + 3;
	call pascal_gen_rel_$def (def_rel, 2);
	call pascal_gen_rel_$def (link18, 1);
	call pascal_gen_rel_$def (abs, 1);
	call pascal_gen_rel_$def (def_rel, 2);
						/* type pair */
	if pascal_context_$options.ps = "1"b then do;
		call pascal_gen_string_$def_ (ptr (pascal_context_$ps_def_ptr, pascal_context_$ps_segname_def_ptr -> symbol) -> acc.string, ps_acc_offset, nbwords);
		if nbwords ^= 0 then do;
			def_ptr = addrel (def_ptr, nbwords);
			if pascal_context_$options.bind = "1"b then
			     call pascal_gen_rel_$def (abs, nbwords * 2);
		     end;
		def_ptr -> type = "000000000000000100"b;/* type 4 */
		def_ptr -> seg_ptr = ps_acc_offset;
		call pascal_gen_rel_$def (abs, 2);
		call pascal_gen_rel_$def (def_rel, 2);
	     end;
	else do;
		def_ptr -> type = "000000000000000101"b;/* type 5 */
		def_ptr -> trap_ptr = init_offset;
		def_ptr -> seg_ptr = "000000000000000101"b; /* 5 */
		do i = 1 to 2;
		     call pascal_gen_rel_$def (abs, 1);
		     call pascal_gen_rel_$def (def_rel, 1);
		end;
	     end;
	def_ptr -> ext_ptr = acc_offset;
	trap_pair_offset = rel (def_ptr);
	def_ptr = addrel (def_ptr, 2);
						/* exp_word */
	def_ptr -> type_ptr = trap_pair_offset;
	call pascal_gen_rel_$def (def_rel, 1);
	call pascal_gen_rel_$def (abs, 1);


	link_ptr -> exp_ptr = rel (def_ptr);
	link_ptr -> modifier = "010000"b;

	def_ptr = addrel (def_ptr, 1);
	addr (pascal_context_$def_word_count) -> val.low = rel (def_ptr);

	return;


     end genexportfile;
