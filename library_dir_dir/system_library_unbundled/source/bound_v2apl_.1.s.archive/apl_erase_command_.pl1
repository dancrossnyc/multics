/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* format: style3 */
apl_erase_command_:
     proc (nargs, arglist);

/*
 * this routine executes the )ERASE apl command
 * written 73.9.06 by DAM
 * Modified 740131 by PG to check for SI DAMAGE
   Modified 800116 by PG to stop calling apl_system_error_ for SI DAMAGE report
	because it unwinds & leaves the save frame on the SI, leading to system errors
	later on.
 */

/* parameters */

dcl	nargs		fixed bin parameter,
	arglist		dim (*) char (*) parameter;

/* automatic */

declare	argno		fixed bin,
	code		fixed bin (35),
	not_erased_msg	char (150) varying aligned,
	symb		ptr unaligned;

/* builtins */

declare	(addr, addrel, length, maxlength, null, rtrim)
			builtin;

/* entries */

dcl	apl_create_save_frame_
			entry,
	apl_destroy_save_frame_update_
			entry,
	apl_get_symbol_	entry (char (*), unaligned pointer, fixed bin),
	apl_free_bead_	entry (unaligned pointer),
	apl_pendant_function_check_
			entry (unaligned pointer) returns (bit (1) aligned),
	iox_$put_chars	entry (ptr, ptr, fixed bin (21), fixed bin (35));

/* external static */

declare	apl_static_$apl_output
			ptr external static;

/* internal static */

declare	NL		char (1) init ("
") internal static;

/* include files */

%include apl_bead_format;
%include apl_group_bead;
%include apl_symbol_bead;
%include apl_ws_info;

/* program */

	not_erased_msg = "";

	call apl_create_save_frame_;			/* operate on global meanings */
	do argno = 1 to nargs;			/* process each argument, left to right */

	     call apl_get_symbol_ (rtrim (arglist (argno)), symb, (0));
	     call expunge (symb);
	     call wash (symb);
	end;

	call apl_destroy_save_frame_update_;

	if length (not_erased_msg) > 0
	then do;
		not_erased_msg = not_erased_msg || NL;
		call iox_$put_chars (apl_static_$apl_output, addrel (addr (not_erased_msg), 1), length (not_erased_msg),
		     code);
	     end;

	return;

wash:
     proc (abp);

dcl	abp		unaligned pointer parameter,
	bp		unaligned pointer automatic;

	bp = abp;
	bp -> general_bead.reference_count = bp -> general_bead.reference_count - 1;
	if bp -> general_bead.reference_count <= 0
	then call apl_free_bead_ (bp);
     end;

expunge:
     proc (abp);

dcl	memx		fixed bin,
	abp		unaligned pointer parameter,
	bp		unaligned pointer automatic;

	bp = abp;
	if bp -> symbol_bead.meaning_pointer = null
	then do;
		call not_erased (bp -> symbol_bead.name);
		return;
	     end;

	if bp -> symbol_bead.meaning_pointer -> general_bead.type.group
	then do memx = 1 to bp -> symbol_bead.meaning_pointer -> group_bead.number_of_members;

/* erase the members of a group */

		call expunge (bp -> symbol_bead.meaning_pointer -> group_bead.member (memx));
	     end;

	if bp -> symbol_bead.meaning_pointer -> general_bead.function
	then if apl_pendant_function_check_ (bp -> symbol_bead.meaning_pointer)
	     then do;
		     call not_erased (bp -> symbol_bead.name);
		     return;
		end;

	call wash (bp -> symbol_bead.meaning_pointer);
	bp -> symbol_bead.meaning_pointer = null;
	return;

not_erased:
     procedure (P_name);

/* parameters */

declare	P_name		char (*) parameter;

/* program */

	if length (not_erased_msg) = 0
	then not_erased_msg = "not erased: ";

/* Is there room to fit the text on the current output line, and is there room to fit the text in
   the output buffer? Note that the NL doesn't count in the first test, but does count in the second. */

	if (length (not_erased_msg) + length (P_name) + 1 > ws_info.width)
	     | (length (not_erased_msg) + length (P_name) + 1 >= maxlength (not_erased_msg))
	then do;
		not_erased_msg = not_erased_msg || NL;
		call iox_$put_chars (apl_static_$apl_output, addrel (addr (not_erased_msg), 1), length (not_erased_msg),
		     code);
		not_erased_msg = "";
	     end;

	not_erased_msg = not_erased_msg || " ";
	not_erased_msg = not_erased_msg || P_name;
	return;

     end /* not_erased */;

     end /* expunge */;

     end /* apl_erase_command_ */;
