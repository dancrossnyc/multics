"  ******************************************************
"  *                                                    *
"  *                                                    *
"  * Copyright (c) 1972 by Massachusetts Institute of   *
"  * Technology and Honeywell Information Systems, Inc. *
"  *                                                    *
"  *                                                    *
"  ******************************************************

" apl_dyadic_bool_appendage_ -- fast boolean operations on boolean values
"
" Benson I. Margulies    February 80.
"
	name	apl_dyadic_bool_appendage_
	segdef	and,or,eq,nand,nor,neq
"
" faster versions of dyadic and or nand nor equal(nxor) nequal(xor)

" these all depend on the internal representation of floating point values
"
"
" calling sequence:
" declare apl_dyadic_bool_appendage_$XXX entry (ptr, ptr, ptr, fixed bin (21) aligned);
" call apl_dyadic_bool_appendage_$XXX (lptr, rptr, rsptr, count);
"
" lptr first arg array
" rptr second arg array
" rsptr result array
" count number of elements to process
"
" General strategy:  for AND, OR, NAND, and NOR, we need never
" load the arguments. we can set the indicators -- for OR,
" if first is 1 then stop & store 1, else check second
" for AND, if first is zero, store zero, else check second.
" for eq / neq things are similar.

	bool	fzero,400000	" top 18 bits of a floating-point zero.
	bool	fone,002400	" top 18 bits of a floating-point one.
"
"	SETUP. Subroutine to setup registers from arguments.
"
"	Usage:
"		tsx3	setup
"
setup:
	lda	pr0|8,*		" count => a
	als	1		" (count) * 2 is offset of last value in vectors (points to second word)
	eax1	0,al		" hide it in x1 for limit
	epp3	pr0|2,*		" ptr to ptr to first argument
	epp3	pr3|0,*
	epp4	pr0|4,*		" ptr to ptr to second argument
	epp4	pr4|0,*
	epp5	pr0|6,*		" ptr to ptr to result
	epp5	pr5|0,*
	lda	fzero,du		" zero in a
	ldq	fone,du		" and one in q
	tra	0,x3		" back to where you left it
"
"	AND. First zero stores zero.
"
and:	tsx3	setup
	eax2	and_loop
and_loop: 
	szn	pr3|-2,x1		" L=0?
	tmi	return_zero	" yes
	szn	pr4|-2,x1		" R=0?
	tmi	return_zero	" yes
	tra	return_one	" neither
"
"	NAND. First zero stores one.
"
nand:
	tsx3	setup
	eax2	nand_loop
nand_loop: 
	szn	pr3|-2,x1		" L=0?
	tmi	return_one	" yes
	szn	pr4|-2,x1		" R=0?
	tmi	return_one	" yes
	tra	return_zero	" neither
"
"	OR. First one stores one.
"
or:	tsx3	setup
	eax2	or_loop
or_loop:	
	szn	pr3|-2,x1		" L=1?
	tpl	return_one	" yes
	szn	pr4|-2,x1		" R=1?
	tpl	return_one	" yes
	tra	return_zero	" neither
"
"	NOR. First one stores zero.
"
nor:	tsx3	setup
	eax2	nor_loop
nor_loop:
	szn	pr3|-2,x1		" L=1?
	tpl	return_zero	" yes
	szn	pr4|-2,x1		" R=1?
	tpl	return_zero	" yes
	tra	return_one	" neither
"
"	EQUAL.
"
eq:
	tsx3	setup
	eax2	eq_loop
eq_loop:
	szn	pr3|-2,x1		" L=1?
	tpl	try_one		" yes
try_zero: szn	pr4|-2,x1		" (L=0), R=0?
	tmi	return_one	" yes
	tra	return_zero	" no
try_one:	szn	pr4|-2,x1		" (L=1), R=1?
	tpl	return_one	" yes
	tra	return_zero	" no
"
"	NOT EQUAL.
"
neq: 
	tsx3	setup
	eax2	neq_loop
neq_loop:
	szn	pr3|-2,x1		" L=0?
	tmi	try_one		" yes
	tra	try_zero		" no
"
"	BOTTOM OF LOOP. Store a zero or one, and go around again.
"
return_zero:
	sta	pr5|-2,x1		" store the top half of a zero
	tra	around
return_one:
	stq	pr5|-2,x1		" store the top half of a one
around:
	stz	pr5|-1,x1		" put out zero second word
	eax1	-2,x1		" bump to previous value.
	tpnz	0,x2		" go to appropriate loop
	short_return
	end
