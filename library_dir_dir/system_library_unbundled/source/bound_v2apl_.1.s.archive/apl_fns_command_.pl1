/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* Modification History - 811210.

   Modified 811210 by TO to add )EFNS command.
*/

apl_fns_command_:
	procedure (a_initial_letter, frame_already_saved);

	type_string = function_type;
	go to list_command_common;

apl_efns_command_:
	entry (a_initial_letter, frame_already_saved);

	type_string = function_type;
	efns_flag = "1"b;
	go to list_command_common;

apl_vars_command_:
	entry (a_initial_letter, frame_already_saved);

	type_string = value_type;
	go to list_command_common;

apl_grps_command_:
	entry (a_initial_letter, frame_already_saved);

	type_string = group_type;

list_command_common:

	initial_letter = a_initial_letter;

	if ^frame_already_saved
	then do;
		on cleanup call apl_destroy_save_frame_;
		call apl_create_save_frame_;
	end;

	save_frame_pointer = ws_info.current_parse_frame_ptr;


	total_symbols = save_frame_pointer -> save_frame.saved_symbol_count;
	printed_count = 0;

	do symbol_number = 1 to total_symbols - 1;

	     if save_frame_pointer -> save_frame.symbol_pointer (symbol_number) -> symbol_bead.meaning_pointer ^= null
	     then do;

		     do other_symbol_number = symbol_number + 1 to total_symbols;

			if save_frame_pointer -> save_frame.symbol_pointer (other_symbol_number) ->
					     symbol_bead.meaning_pointer ^= null
			then do;

				if save_frame_pointer ->
				   save_frame.symbol_pointer (symbol_number) ->
				   symbol_bead.name
						  >
				   save_frame_pointer ->
				   save_frame.symbol_pointer (other_symbol_number) ->
				   symbol_bead.name

				then do;

					temporary = save_frame_pointer ->
						  save_frame.symbol_pointer (symbol_number);

					save_frame_pointer ->
					save_frame.symbol_pointer (symbol_number) =
					save_frame_pointer ->
					save_frame.symbol_pointer (other_symbol_number);

					save_frame_pointer ->
					save_frame.symbol_pointer (other_symbol_number) =
					temporary;

					temporary = save_frame_pointer ->
						  save_frame.saved_meaning_pointer (symbol_number);

					save_frame_pointer ->
					save_frame.saved_meaning_pointer (symbol_number) =
					save_frame_pointer ->
					save_frame.saved_meaning_pointer (other_symbol_number);

					save_frame_pointer ->
					save_frame.saved_meaning_pointer (other_symbol_number) =
					temporary;

				     end;

			     end;

		     end;

		end;

	end;


	do symbol_number = 1 to total_symbols;

	     if save_frame_pointer ->
	        save_frame.symbol_pointer (symbol_number) ->
	        symbol_bead.meaning_pointer
	     ^= null

	     then if string (save_frame_pointer ->
			 save_frame.symbol_pointer (symbol_number) ->
			 symbol_bead.meaning_pointer ->
			 general_bead.type)
		     & type_string

		then if substr (save_frame_pointer ->
			      save_frame.symbol_pointer (symbol_number) ->
			      symbol_bead.name,
					     1, 1) >= initial_letter

		     then if ^efns_flag
		     then do;
			     call apl_print_string_ (save_frame_pointer ->
					         save_frame.symbol_pointer (symbol_number) ->
					         symbol_bead.name);
			     printed_count = printed_count + 1;
			end;
			else do;
			     class = save_frame_pointer ->
				save_frame.symbol_pointer (symbol_number) ->
				symbol_bead.meaning_pointer ->
				function_bead.class;
			     if class = 2 | class = 3 | class = 4 then do;
				call ioa_$ioa_stream (apl_output_stream,
				     ")^[zfn^;mfn^;dfn^]  ^a ^- ^a",
				     class - 1,
				     save_frame_pointer ->
				     save_frame.symbol_pointer (symbol_number) ->
				     symbol_bead.name,
				     save_frame.symbol_pointer (symbol_number) ->
				     symbol_bead.meaning_pointer ->
				     function_bead.text);
				printed_count = printed_count + 1;
			     end;
			end;


	end;

	if ^efns_flag then do;
	     if printed_count > 0
	     then call apl_print_newline_;
	     call apl_flush_buffer_;
	end;
	else if printed_count > 0 then call ioa_$ioa_stream (apl_output_stream, "");
	if ^frame_already_saved
		then call apl_destroy_save_frame_;

declare	temporary pointer unaligned;

declare (symbol_number, other_symbol_number, total_symbols, printed_count
	) fixed binary (29);

declare	cleanup condition;

declare  apl_print_string_ entry (character (*));

declare (apl_create_save_frame_, apl_destroy_save_frame_, apl_print_newline_, apl_flush_buffer_
	) entry ();

declare  ioa_$ioa_stream entry options (variable);

declare  a_initial_letter character (1);
declare  frame_already_saved bit (1) aligned;

declare  initial_letter character (1) aligned;

declare  type_string bit (18) aligned;

declare  class fixed bin;
declare  efns_flag bit (1) aligned init ("0"b);
declare  apl_output_stream char (11) int static init ("apl_output_");

declare (null, string, substr
	) builtin;

%include apl_number_data;
%include "apl_ws_info";
%include "apl_bead_format";
%include "apl_save_frame";
%include "apl_symbol_bead";
%include "apl_function_bead";

end apl_fns_command_;
