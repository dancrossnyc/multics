/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* Input canonicalization program for APL Device Interface Module.
   Paul Green, July 1973 */
/* Modified 741018 by PG for variable tab width. */
/* Modified 780505 by William York to allow erasing of illegal characters. */

/* format: style3 */
apl_dim_canonicalize_:
     procedure (sdb_ptr, charp, lowi, n);

dcl	(col, ncol, sos, lowi, i, j, k, save, tempn)
			fixed bin (18);
dcl	pair_index	fixed bin,
	compressing	bit (1) aligned,
	pair		char (2) aligned,
	move		fixed bin (3),
	tchar		bit (9),
	(charp, tempp)	ptr;

dcl	1 temp		(n) aligned,		/* temp array of chars and their columns */
	  2 col		unal fixed bin (17),	/* column where char starts */
	  2 erase		bit (1) unaligned,		/* if erase char */
	  2 kill		bit (1) unaligned,		/* kill char switch */
	  2 stop		bit (1) unaligned,		/* end-of-line switch */
	  2 error		bit (1) unaligned,		/* character error here */
	  2 pad		bit (5) unaligned,
	  2 char		bit (9) unaligned;

dcl	ccol		fixed bin (17);

dcl	tempa		(1) fixed bin based (tempp) aligned;
						/* overlay for temp, used in sort */

dcl	1 char		based aligned,		/* to reference input string */
	  2 a		(0:1) bit (9) unaligned;

/* builtins */

dcl	(addr, binary, divide, index, mod, null, substr, unspec)
			builtin;

/* include files */

%include apl_dim_sdb;
%include apl_dim_table;

/* program */

	compressing = compression_in_ptr ^= null;
	tempp = addr (temp);
	col = 1;					/* first copy chars into stack array */
	j = 1;					/* computing column position */
	do i = lowi to lowi + n - 1;
	     tempa (j) = 0;
	     tchar = charp -> char.a (i);		/* copy char */
	     if tchar = "100011000"b			/* if special erase */
	     then do;
		     temp (j).char = "000100011"b;	/* erase char */
		     temp (j).erase = "1"b;		/* erase flag on */
		end;
	     else if tchar = "100011001"b		/* if kill */
	     then do;
		     temp (j).char = "001000000"b;	/* store real kill char */
		     temp (j).kill = "1"b;		/* set switch */
		end;
	     else if tchar = "100011010"b		/* if character error */
	     then do;
		     temp (j).char = "011000010"b;	/* universal ignored, spacing char */
		     temp (j).error = "1"b;
		end;
	     else do;
		     temp (j).char = tchar;
		end;
	     temp (j).col = col;			/* store column where char starts */
	     move = binary (type (binary (temp (j).char, 9)).move, 3);
						/* get movement code */
	     if move = 0				/* +1 (normal) */
	     then do;
		     col = col + 1;
		end;
	     else if move = 3			/* tab */
	     then do;
		     col = col + stream_data_block.tab_width - mod (col, stream_data_block.tab_width);
		end;
	     else if move = 2			/* bs */
	     then do;
		     j = j - 1;			/* erase from temp array */
		     if col > 1			/* and backup col */
		     then col = col - 1;
		end;
	     else if move = 4			/* cr */
	     then do;
		     j = j - 1;			/* don't keep it */
		     col = 1;
		end;
	     else if move = 5			/* nl */
	     then if tchar = "011000000"b		/* QLineFeed */
		then temp (j).stop = "1"b;		/* force end-of-line at this column */
		else do;
			temp (j).col = col + 250;	/* nl is like a big barrier */
			col = col + 500;
		     end;
	     j = j + 1;
	end;

	tempn = j - 1;				/* length of temp array */
	do i = tempn by -1 to 2;			/* sort */
	     if tempa (i) < tempa (i - 1)		/* if inversion */
	     then do;
		     save = tempa (i - 1);		/* save char out of place */
		     do j = i to tempn while (tempa (j) < save);
						/* search for correct place */
			tempa (j - 1) = tempa (j);	/* sliding other chars */
		     end;
		     tempa (j - 1) = save;		/* place found, insert */
		end;
	end;

	sos = 1;					/* first character is significant */
	tempa (tempn + 1) = 0;

	do i = 1 by 1 while (i <= tempn);		/* process erase kill chars */
shortlp:
	     if temp (i).char = "000100000"b		/* if blank */
	     then if temp (i + 1).col = temp (i).col	/* and at same col with next char */
		then do;
			do k = i + 1 to tempn;	/* delete blank */
			     tempa (k - 1) = tempa (k);
			end;
			tempn = tempn - 1;
			go to shortlp;
		     end;
	     if temp (i).erase			/* only recognize this erase char */
	     then do;
		     do k = i - 1 by -1 to sos while (temp (k).erase);
						/* find last existing graphic */
		     end;
		     if k >= sos			/* if something to erase */
		     then do;
			     if type (binary (temp (k).char, 9)).white
						/* if erasing white space */
			     then do j = k by -1 to 1 while (type (binary (temp (j).char, 9)).white);
				     tempa (j) = -1;/* turn the erase flag on */
				end;
			     else do;
				     ccol = temp (k).col;
				     do j = k by -1 to 1 while (temp (j).col = ccol);
						/* else erase all in col */
					tempa (j) = -1;
						/* set the erase bit on */
				     end;
				end;
			end;
		     else sos = i + 1;		/* only suceding columns are significant */
		end;

	     else if temp (i).kill			/* if kill char */
	     then do;
		     if temp (i + 1).erase		/* if next char is erase */
		     then if temp (i + 1).col = temp (i).col
						/* and at same col */
			then go to loop;		/* do not kill */
		     sos = i + 1;			/* kill, first significant column is the
						   next column */
		end;
	     else if temp (i).stop
	     then do;
		     tempn = i - 1;			/* delete LineFeed and rest of line */
		     do k = i - 1 by -1 while (temp (k).col = temp (i).col);
						/* and everything in same col */
			tempn = tempn - 1;
		     end;
		end;
loop:
	end;

	j = lowi;					/* copy back into string, inserting bs */
	col = 1;					/* no initial bs */
	do i = sos to tempn;
	     if temp (i).erase
	     then go to skip;
	     ncol = temp (i).col;

	     if ncol < col				/* if backed up */
	     then do;

		     if temp (i).char = temp (i - 1).char
		     then go to skip;		/* eliminate duplicate chars in same column */

		     if compressing
		     then do;

			     unspec (substr (pair, 1, 1)) = temp (i - 1).char;
			     unspec (substr (pair, 2, 1)) = temp (i).char;
			     pair_index = index (compression_string, pair);

			     if 2 * divide (pair_index, 2, 17, 0) = pair_index
						/* if not found or bad match (even index) */
			     then if stream_data_block.character_error_index < 0
				then do;
					if pair = "ot" & temp (i + 1).char = "001110101"b /* "u" */
					     & temp (i).col = temp (i + 1).col
					then stream_data_block.escape_out_seen = "1"b;
					else stream_data_block.character_error_index = j - 1 - lowi;
						/* j-1-lowi chars are good */
					pair_index = 0;
				     end;
				else pair_index = 0;
			     else pair_index = divide (pair_index, 2, 17, 0) + 1;

			     if pair_index ^= 0
			     then do;
				     temp (i).char = output_character (pair_index);
				     j = j - 1;	/* wipe out previous char */
				end;

			end;
		     else do;
			     charp -> char.a (j) = "000001000"b;
						/* insert backspace */
			     j = j + 1;
			end;
		end;

	     if temp (i).error			/* character error */
	     then if stream_data_block.character_error_index < 0
		then stream_data_block.character_error_index = j - lowi;

	     charp -> char.a (j) = temp (i).char;	/* move char */
	     j = j + 1;
	     col = ncol;				/* remember col */
	     if type (binary (temp (i).char, 9)).move = "0"b
						/* if normal +1 char */
	     then col = col + 1;			/* then move ahead 1 */
skip:
	end;
	n = j - lowi;				/* return new n (might be less) */
	return;

     end /* apl_dim_canonicalize_ */;
