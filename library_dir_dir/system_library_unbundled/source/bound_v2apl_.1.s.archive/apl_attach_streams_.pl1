/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* Commands and subroutines to attach & detach the APL I/O streams and Device Interface Module.
   R.S.Lamson, D.A.Moon, and P.Green, 1973
   Modified 740511 by PG to correct handling of network terminals.
   Modified 750711 by PG to work with MCS.
   Modified 760209 by PG to add Correspondence 2741s.
   Modified 760730 by PG to add bit-paired APL/ASCII terminals (CDI 1030).
   Modified 770120 by PG to work in an absentee process.
   Modified 781208 by PG to use iox_$move_attach and friends (bug 218).
   Modified 790320 by PG to flush NET2741 (sugg 344), add TYPEPAIRED and BITPAIRED (bug 210).
   Modified 790326 by PG to fix 387 (didn't detach switches in absentee).
   Modified 790602 by PG to fix 401 (didn't recognize typepaired or bitpaired),
	and to do sugg 396 (recognize some TTF names, and be consistent with TTF).
   Modified 790910 by PG to add TELERAY11 and LA36 terminal types (sugg 386).
   Modified 790912 by PG to get TELERAY11 to switch in and out automatically like TEK4013.
   Modified 800129 by PG to add SARA, AJ510, and AJ830.
   Modified 800130 by PG to call apl_dim_select_table_.
   Modified 800227 by PG to setup apl_static_$user_tty in absentee.
   Modified 810125 by WMY to fix bug 479, the streams are attached incorrectly
	when running in foreground absentee.
   Modified 811208 by TO to get LA36 (ne cybernex_apl) to switch in and out
   Modified 820824 by AD to fix bug 484 (line length was obtained from modes
	string instead of by calling get_line_length_).
*/

/* format: style3 */
apl_start:
     procedure;

	call cu_$arg_count (argument_count);

	if argument_count ^= 0
	then do;
		call cu_$arg_ptr (1, argument_ptr, argument_length, code);
		if code ^= 0
		then do;
argument_error:
			call com_err_ (code, "apl_start", "Usage: apl_start {-terminal_type name}
where name = 1050, 2741, CORR2741, 1030, TEK4013, TEK4015, TN300, ARDS,
ASCII, TTY33, TTY38, TYPEPAIRED, BITPAIRED, TELERAY11, LA36, SARA,
AJ510, AJ830, AJ832.");
			return;
		     end;

		if argument ^= "-terminal_type" & argument ^= "-ttp"
		then do;
			code = error_table_$badopt;
			go to argument_error;
		     end;

		call cu_$arg_ptr (2, argument_ptr, argument_length, code);
		if code ^= 0
		then do;
			code = error_table_$noarg;
			go to argument_error;
		     end;

		user_terminal_type = argument;
	     end;
	else user_terminal_type = "";

	call apl_attach_streams_ (user_terminal_type, code);
	if code ^= 0
	then call com_err_ (code, "apl_start", "^a", user_terminal_type);

	return;

apl_attach_streams_:
     entry (a_terminal_type, a_code);

	a_code = 0;

	if apl_streams_attached
	then do;
		a_code = error_table_$ionmat;
		return;
	     end;

	call user_info_$absentee_queue (abs_q);

	/* The abs_q must be greater than zero (zero means foreground) */

	if abs_q >= 0
	then do;
		absentee_process = "1"b;
		call iox_$attach_name ("apl_output_", apl_static_$apl_output, "syn_ user_output",
		     codeptr (apl_attach_streams_), a_code);
		if a_code ^= 0
		then return;

		call iox_$attach_name ("apl_input_", apl_static_$apl_input, "syn_ user_input",
		     codeptr (apl_attach_streams_), a_code);

		apl_static_$user_tty = iox_$user_io;
		apl_streams_attached = "1"b;
		return;
	     end;
	else absentee_process = "0"b;

	terminal_info.version = 1;
	call iox_$control (iox_$user_io, "terminal_info", addr (terminal_info), code);
	if code = 0
	then do;
		terminal_type = terminal_info.term_type;

		if terminal_info.line_type = LINE_TELNET
		then network_terminal = "1"b;
		else network_terminal = "0"b;
	     end;
	else do;
		terminal_type = "ASCII";
		network_terminal = "0"b;
	     end;

	if a_terminal_type ^= ""			/* if caller gave us one, use it instead */
	then do;
		terminal_type = translate (a_terminal_type, "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "abcdefghijklmnopqrstuvwxyz");
		if terminal_type = "4013"		/* convert old apl-only name to TTF name */
		then terminal_type = "TEK4013";
	     end;

	call apl_dim_select_table_ (terminal_type, table_ptr, default_table_used);

	if default_table_used & a_terminal_type ^= ""	/* subroutine couldn't understand name that user gave us */
	then do;
		a_code = error_table_$no_term_type;
		return;
	     end;

	call mask;

/* Get the old modes so we can compute some apl modes from them. */

	call iox_$modes (iox_$user_io, "", old_modes, status_code);
	if status_code ^= 0
	then do;
		a_code = status_code;
		return;
	     end;

	if index (old_modes, "^red") ^= 0
	then new_modes = "^red";
	else new_modes = "red";

	if index (old_modes, "^tabs") ^= 0 | (terminal_type = "TEK4013") | (terminal_type = "TEK4015")
						/* SHOULD BE IN TABLE */
	then new_modes = new_modes || ",^tabs";
	else new_modes = new_modes || ",tabs";

	i = get_line_length_$switch (iox_$user_io, status_code);
	if status_code = 0
	then new_modes = new_modes || ",ll" || ltrim (char (i));

	if network_terminal
	then do;
		initial_modes = "^esc,^erkl,^can";
		final_modes = "esc,erkl,can";
	     end;
	else do;
		initial_modes = "rawi,rawo,^hndlquit";
		final_modes = "^rawi,^rawo,hndlquit";
	     end;

	call iox_$find_iocb ("user_tty_", apl_static_$user_tty, status_code);
	if status_code ^= 0
	then go to loss (7);

	call iox_$move_attach (iox_$user_io, apl_static_$user_tty, status_code);
	if status_code ^= 0				/* today is not our day... */
	then go to loss (6);

	call iox_$modes (apl_static_$user_tty, initial_modes, "", status_code);
	if status_code ^= 0
	then go to loss (5);

/* the following statement is necessary because the ios_ writearound for iox_ does not
   follow the same search rules as the old ios_. taking the addr will cause the normal
   search rules to be followed. */

	if addr (apl_dim_$apl_dim_module) = null
	then ;

	call ios_$attach ("user_i/o", "apl_dim_", "user_tty_", (new_modes), status);
	if status_code ^= 0				/* what!? probably no room for sdb... */
	then go to loss (4);

	call iox_$attach_name ("apl_output_", apl_static_$apl_output, "syn_ user_output", codeptr (apl_attach_streams_),
	     status_code);
	if status_code ^= 0
	then go to loss (3);

	call iox_$attach_name ("apl_input_", apl_static_$apl_input, "syn_ user_input", codeptr (apl_attach_streams_),
	     status_code);
	if status_code ^= 0
	then go to loss (2);

	call ios_$order ("user_i/o", "set_table", table_ptr, status);
	if status_code ^= 0				/* aw, c'mon! We got this far and then lost? */
	then go to loss (1);

	call ios_$order ("user_i/o", "read_back_input", null, ""b);

	apl_streams_attached = "1"b;			/* this bit prevents us from trying to attach the
						   streams more than once, in case of a recursive call. */

/* SHOULD BE IN TABLE */

	if (terminal_type = "TEK4013") | (terminal_type = "TEK4015") | (terminal_type = "TELERAY11")
	then call iox_$put_chars (apl_static_$user_tty, addr (enter_4013_apl_mode), length (enter_4013_apl_mode), 0);
	else if (terminal_type = "AJ510")
	then call iox_$put_chars (apl_static_$user_tty, addr (enter_aj510_apl_mode), length (enter_aj510_apl_mode), 0);
	else if (terminal_type = "LA36")
	then call iox_$put_chars (apl_static_$user_tty, addr (enter_la36_apl_mode), length (enter_la36_apl_mode), 0);

	call unmask;
	return;

loss (1):
	call iox_$detach_iocb (apl_static_$apl_input, 0);

loss (2):
	call iox_$detach_iocb (apl_static_$apl_output, 0);

loss (3):
	call ios_$detach ("user_i/o", "", "", ""b);

loss (4):
	call iox_$modes (apl_static_$user_tty, final_modes, "", 0);

loss (5):
	call iox_$move_attach (apl_static_$user_tty, iox_$user_io, 0);

loss (6):
loss (7):
	a_code = status_code;			/* give caller prime reason why failed. */
	return;

apl_end:
     entry;

	call apl_detach_streams_ (code);

	if code ^= 0
	then call com_err_ (code, "apl_end", "While trying to restore the I/O switches.");

	return;

apl_detach_streams_:
     entry (a_code);

	a_code = 0;

	if ^apl_streams_attached
	then do;
		a_code = error_table_$ioname_not_active;
		return;
	     end;

	if ^absentee_process
	then do;

/* SHOULD BE IN TABLE */

		if (terminal_type = "TEK4013") | (terminal_type = "TEK4015") | (terminal_type = "TELERAY11")
		then call iox_$put_chars (apl_static_$user_tty, addr (leave_4013_apl_mode), length (leave_4013_apl_mode),
			code);
		else if (terminal_type = "AJ510")
		then call iox_$put_chars (apl_static_$user_tty, addr (leave_aj510_apl_mode),
			length (leave_aj510_apl_mode), code);
		else if (terminal_type = "LA36")
		then call iox_$put_chars (apl_static_$user_tty, addr (leave_la36_apl_mode),
			length (leave_la36_apl_mode), code);

		call mask;

		call ios_$detach ("user_i/o", "", "", ""b);
						/* flush apl dim */

		call iox_$move_attach (apl_static_$user_tty, iox_$user_io, code);
		if code ^= 0
		then a_code = code;

		call iox_$modes (iox_$user_io, final_modes, "", code);
		if code ^= 0
		then a_code = code;

		call unmask;
	     end;

	call iox_$detach_iocb (apl_static_$apl_output, 0);
	call iox_$detach_iocb (apl_static_$apl_input, 0);

	apl_static_$apl_input = null;
	apl_static_$apl_output = null;
	apl_static_$user_tty = null;

	apl_streams_attached = "0"b;			/* ready for a 2nd time... */
	return;

/* Internal procedures */

mask:
unmask:
     procedure ();

	return;

     end /* mask */;

/* parameters */

dcl	(
	a_terminal_type	char (*),
	a_code		fixed bin (35)
	)		parameter;

/* entries */

declare	apl_attach_streams_ entry (char (*), fixed bin (35)),
	apl_detach_streams_ entry (fixed bin (35)),
	apl_dim_$apl_dim_module
			entry (),
	apl_dim_select_table_
			entry (char (*), ptr, bit (1) aligned),
	com_err_		entry options (variable),
	cu_$arg_count	entry (fixed bin),
	cu_$arg_ptr	entry (fixed bin, ptr, fixed bin, fixed bin (35)),
	get_line_length_$switch
			entry (ptr, fixed bin (35)) returns (fixed bin),
	ios_$attach	entry (char (*), char (*), char (*), char (*), bit (72) aligned),
	ios_$detach	entry (char (*), char (*), char (*), bit (72) aligned),
	ios_$order	entry (char (*), char (*), pointer, bit (72) aligned),
	iox_$attach_name	entry (char (*), ptr, char (*), ptr, fixed bin (35)),
	iox_$control	entry (ptr, char (*), ptr, fixed bin (35)),
	iox_$detach_iocb	entry (ptr, fixed bin (35)),
	iox_$find_iocb	entry (char (*), ptr, fixed bin (35)),
	iox_$modes	entry (ptr, char (*), char (*), fixed bin (35)),
	iox_$move_attach	entry (ptr, ptr, fixed bin (35)),
	iox_$put_chars	entry (ptr, ptr, fixed bin (21), fixed bin (35)),
	user_info_$absentee_queue
			entry (fixed bin);

/* automatic */

declare	1 terminal_info	aligned,
	  2 version	fixed bin,		/* ==1 */
	  2 id		char (4) unal,
	  2 term_type	char (32) unal,
	  2 line_type	fixed bin,
	  2 baud_rate	fixed bin,
	  2 reserved	(4) fixed bin;

dcl	abs_q		fixed bin,
	argument_count	fixed bin,
	argument_length	fixed bin,
	argument_ptr	pointer,
	default_table_used	bit (1) aligned,
	network_terminal	bit (1) aligned,
	user_terminal_type	char (32),
	(i, number_of_digits)
			fixed bin,
	new_modes		char (168) varying,
	status		bit (72) aligned,
	table_ptr		pointer,
	code		fixed bin (35);

/* based */

dcl	argument		char (argument_length) based (argument_ptr),
	status_code	fixed bin (35) aligned based (addr (status));
						/* UGH! */

/* builtins */

dcl	(addr, codeptr, index, length, ltrim, null, substr, translate, verify)
			builtin;

/* external static */

declare	(
	error_table_$badopt,
	error_table_$ioname_not_active,
	error_table_$ionmat,
	error_table_$no_term_type,
	error_table_$noarg
	)		fixed bin (35) external static;

declare	(
	apl_static_$apl_input,
	apl_static_$apl_output,
	apl_static_$user_tty,
	iox_$user_io
	)		ptr external static;

/* internal static */

declare	(
	absentee_process	bit (1) aligned,
	apl_streams_attached
			bit (1) aligned initial ("0"b),
	terminal_type	char (32) unal,
	old_modes		char (256),
	(final_modes, initial_modes)
			char (32)
	)		internal static;

/* internal static initial */

declare	(
	enter_4013_apl_mode char (2) init (""),	/* ESC CTL-N */
	leave_4013_apl_mode char (2) init (""),	/* ESC CTL-O */
	enter_aj510_apl_mode
			char (1) init (""),	/* CTL-N */
	leave_aj510_apl_mode
			char (1) init (""),	/* CTL-O */
	enter_la36_apl_mode char (1) init (""),	/* CTL-O */
	leave_la36_apl_mode char (1) init ("")	/* CTL-N */
	)		aligned internal static options (constant);

/* include files */

%include line_types;
     end /* apl_attach_streams_ */;
