/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

apl_group_command_:
     procedure (nargs, arglist);

/*
 * apl command to create, append, or disband a group
 *
 * written 73.9.06 by DAM
   Modified 800819 by WMY to fix bug 468 ()GROUP X F F gives a system
	error (attempt to free bead with non-zero ref count))
 */

dcl     nargs		 fixed bin parameter,
        arglist		 dim (*) char (*) parameter;


	call apl_create_save_frame_;			/* use global meanings */
	call apl_get_symbol_ (before (arglist (1), " "), group_symbol, (0));

	if nargs = 1
	     then do;

/* disband group */

		if group_symbol -> symbol_bead.meaning_pointer = null
		     then go to cant_disband;
		     else if group_symbol -> symbol_bead.meaning_pointer -> general_bead.type.group
			     then ;
			     else go to cant_disband;
		call wash (group_symbol -> symbol_bead.meaning_pointer);
		group_symbol -> symbol_bead.meaning_pointer = null;
	     end;

	     else do;  /* create or append to existing group */

		/* Check to see if group of this name already exists */

		if group_symbol -> symbol_bead.meaning_pointer ^= null
		     then if group_symbol -> symbol_bead.meaning_pointer -> general_bead.type.group
			     then do argno = 2 by 1 while (argno <= nargs);

				     /* group already exists, check to see if we are appending
				        or replacing the group */

				     call apl_get_symbol_ (before (arglist (argno), " "), symb, (0));
				     if symb = group_symbol
					then go to append_to_group;
					else call wash (symb);
				end;

/* create group bead */

		if group_symbol -> symbol_bead.meaning_pointer ^= null
		     then if group_symbol -> symbol_bead.meaning_pointer -> general_bead.type.group
			     then call wash (group_symbol -> symbol_bead.meaning_pointer);
			     else go to name_dup;

/* have already flushed old value, if any */

		call apl_allocate_words_ (size (group_bead) + nargs - 1, gbp);
		string (gbp -> general_bead.type) = group_type;
		gbp -> group_bead.number_of_members = nargs - 1;

		/* Add new symbols to group bead. */

		do argno = 2 by 1 while (argno <= nargs);

		     call apl_get_symbol_ (before (arglist (argno), " "), symb, (0));

		     /* Check for duplicate entries in symbol list */

		     do dupx = 1 to argno - 2;
			if gbp -> group_bead.member (dupx) = symb
			     then go to mem_dup_create;
		     end;

		     /* Add this symbol to group bead */

		     gbp -> group_bead.member (argno - 1) = symb;
		end;

		/* Attach group bead to symbol */

		group_symbol -> symbol_bead.meaning_pointer = gbp;

	     end;  /* create or append to group */


finish:
	call wash (group_symbol);
	call apl_destroy_save_frame_update_;
	return;




append_to_group:
	group_symbol -> symbol_bead.reference_count = group_symbol -> symbol_bead.reference_count - 1;
						/* adjust for goto out of do loop */

/* name of group is in members list, append */

	n_mem = group_symbol -> symbol_bead.meaning_pointer -> group_bead.number_of_members + nargs - 2;
	call apl_allocate_words_ (size (group_bead) + n_mem, gbp);
						/* make new, larger group bead */

	string (gbp -> general_bead.type) = group_type;
	gbp -> group_bead.number_of_members = n_mem;

/* copy old members */

	do memx = 1 by 1 while (memx <= group_symbol -> symbol_bead.meaning_pointer -> group_bead.number_of_members);
	     gbp -> group_bead.member (memx) = group_symbol -> symbol_bead.meaning_pointer ->
		group_bead.member (memx);
	end;

/* add new members */

	do argx = 2 by 1 while (argx <= nargs);
	     if argx ^= argno
		then do;				/* append member (skipping over the group's own name) */
		     call apl_get_symbol_ (before (arglist (argx), " "), symb, (0));
		     do dupx = 1 by 1 while (dupx < memx);
						/* look for duplications */
			if gbp -> group_bead.member (dupx) = symb
			     then go to mem_dup_append;
		     end;
		     gbp -> group_bead.member (memx) = symb;
		     memx = memx + 1;
		end;
	end;

/* flush old bead - do not decrement reference counts of old members since copied over */

	call apl_free_words_ (fixed (group_symbol -> symbol_bead.meaning_pointer -> general_bead.size, 18),
	     group_symbol -> symbol_bead.meaning_pointer);
	group_symbol -> symbol_bead.meaning_pointer = gbp;
	go to finish;


wash:
     proc (bp);

dcl     bp		 unaligned pointer;

dcl     p			 unaligned pointer;

	p = bp;
	if p = null
	     then return;
	p -> general_bead.reference_count = p -> general_bead.reference_count - 1;
	if p -> general_bead.reference_count <= 0
	     then call apl_free_bead_ (p);
     end;


/* error exits */

mem_dup_create:
	gbp -> group_bead.number_of_members = argno - 2;
	go to mem_dup;

mem_dup_append:
	gbp -> group_bead.number_of_members = memx - 1;
mem_dup:
	call ioa_$ioa_stream (apl_output_stream, "^Rincorrect command - group member ^a appears twice^B",
	     symb -> symbol_bead.name);
	call wash (gbp);			/* flush space for group bead, fix up reference counts on members */
	go to finish;

cant_disband:
	call ioa_$ioa_stream (apl_output_stream, "^Rcan't disband - ^a is not a group^B", group_symbol -> symbol_bead.name);
	go to finish;

name_dup:
	call ioa_$ioa_stream (apl_output_stream, "^Rnot grouped, name in use^B");
	go to finish;

dcl     group_symbol	 unaligned pointer,
        argno		 fixed bin,
        symb		 unaligned pointer,
        gbp		 unaligned pointer,
        ioa_$ioa_stream	 entry options (variable),
        n_mem		 fixed bin,
        memx		 fixed bin,
        dupx		 fixed bin,
        argx		 fixed bin;

declare apl_output_stream	 char (11) static initial ("apl_output_");

dcl     (null, string, addr, fixed, size, before)
			 builtin;

dcl     apl_create_save_frame_ entry,
        apl_destroy_save_frame_update_
			 entry,
        apl_get_symbol_	 entry (char (*), unaligned pointer, fixed bin),
        apl_allocate_words_	 entry (fixed bin (18), unaligned pointer),
        apl_free_words_	 entry (fixed bin (18), unaligned pointer),
        apl_free_bead_	 entry (unaligned pointer);



/* include files */

%include apl_bead_format;
%include apl_group_bead;
%include apl_symbol_bead;



     end;
