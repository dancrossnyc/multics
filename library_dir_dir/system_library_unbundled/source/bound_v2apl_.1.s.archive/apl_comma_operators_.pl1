/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

apl_comma_operators_:
     procedure;

/*
 * This module implements the following APL operators:
 *	ravel	,A
 *	scalar laminate	1,2
 *	catenate	A,B
 *	laminate	A,[1.5]B
 *
 * written 73.7.08 by DAM
 * modified to take advantage of EIS, 73.7.31 by DAM
 * modified to fix a bug causing catenate of a scalar and a null
 * vector (either way) to fail due to setting of total_data_elements
 * field incorrectly, and to slightly decrease size of object code
 * by G. Gordon Benedict, June 15, 1974
 * Modified 770307 by PG to fix bug 195 (+_1 bug in checking rank subscript for laminate).
   Modified 790305 by William M. York to fix part of bug 278 (some programs
	do not double-word align value beads).
 *
 */


dcl result_vb ptr,				/* -> result value_bead on stack */
    result ptr,				/* -> data array of result value_bead */
    rhorho fixed bin,			/* rhorho of result */
    kludge_rhorho fixed binary defined (rhorho),	/* to get around name conflict in
					   calculate_result_bead_laminate */
   left ptr,				/* -> data array of left operand value_bead */
    right ptr,				/* -> data array of right operand value_bead */
    left_rr fixed bin,			/* rhorho of left operand */
    right_rr fixed bin,			/* rhorho of right operand */

		/* variables used to control scanning through the arguments in the inner loop */
    (left_pos, right_pos) fixed bin(21),	/* index in datum array of left or right operand */

    (left_scalar, right_scalar) bit(1),		/* "1"b if left (right) operand is a scalar */

    outersize fixed bin(21),			/* total number of result elements */
    jointsize fixed bin(21),			/* number of result elements between joints */
    innersize fixed bin(21),			/* number of result elements in dimensions to right (in rho vector)
					   of the dimension in which the joints occur */

    joint fixed bin(21),			/* number of elements in a column before you get to the joint */
    I fixed bin,				/* dimension along which joining is to occur */
    J fixed bin(21),			/* = result.rho[I] */
    characters bit(1),			/* 1 => do in character mode, 0 => do in numeric mode */
    resulting_type bit(18),			/* type field for result, needed for null-vector hacks */

    (i, j, n) fixed bin(21),		/* for do loops, etc. */

    (right_vb, left_vb) ptr;			/* -> value_bead of left & right args irrespectively */

dcl left_size fixed bin(21),			/* number of things taken at a time from left argument */
    right_size fixed bin(21),			/* number of things taken at a time from right argument */
    result_pos fixed bin(21),			/* base of column currently being generated in result */

    left_numbers(left_size) float aligned based,	/* because you can't use substr on arrays in PL/I */
    right_numbers(right_size) float based aligned;


dcl apl_number float;			/* for size builtin */
dcl n_words fixed bin(18),			/* for moving things around */
    words (n_words) bit(36) aligned based,
    data_elements fixed bin(21) def(outersize);	/* satisfy include file - allow use of size builtin */

declare	(addr, addrel, fixed, rel, size, string, substr) builtin;

dcl (left_char, right_char) char(1),
    (left_num, right_num) float;

%include apl_number_data;
%include apl_bead_format;
%include apl_value_bead;
%include apl_operators_argument;
%include apl_ws_info;

apl_catenate_: entry(operators_argument);


	call determine_conformability;

	/* check ranks, find which case, set up various parameters */

	if left_scalar then if right_scalar then go to comma_two_scalars;
	   else 	/* scalar,array */
	      call calculate_result_bead (right_vb);	/*since right is array, calculate
						  all result bead fields from right */
	else if right_scalar then do;	/* array,scalar */
		call calculate_result_bead (left_vb);	/* however now left is array */
		joint = left_vb -> value_bead.rho (I) * joint;
		end;

	else	/* array,array */
	   if left_rr = right_rr then do;		/* same ranks is OK */

		rhorho = left_rr;
		if rhorho < I then go to rank_subsc_error;
		do j = 1 by 1 while (j <= rhorho);
		   if j ^= I then if left_vb->value_bead.rho(j) ^=
				 right_vb->value_bead.rho(j) then go to length_error;
		   end;
		J = left_vb->value_bead.rho(I) + right_vb->value_bead.rho(I);

		innersize = 1;
		do j = I by 1 while(j < rhorho);
		     innersize = left_vb->value_bead.rho(j + 1) * innersize;
		     end;

		joint = innersize*left_vb->value_bead.rho(I);

		outersize = left_vb->value_bead.total_data_elements +
			  right_vb->value_bead.total_data_elements;

		/* allocate result and set rho vector */

		call stack_allocate;
		do j = 1 by 1 while(j <= rhorho);
		   result_vb->value_bead.rho(j) = left_vb->value_bead.rho(j);
		   if j = I then result_vb->value_bead.rho(j) = result_vb->value_bead.rho(j) +
							right_vb->value_bead.rho(j);
		   end;
		end;

	else if right_rr+1 = left_rr then do;		/* right arg has one less rank is allowed too */
	   call calculate_result_bead_vector (left_vb, right_vb);	/* left is 1st cause it has more dims */
	   joint = left_vb->value_bead.rho(I) * joint;
	end;
	else if left_rr+1 = right_rr then		/* left arg with one less rank is also allowed */
		call calculate_result_bead_vector (right_vb, left_vb);	/* right has more than left */

	else go to rank_error;			/* but any other case is not allowed */




catenate_laminate_join:


	jointsize = J * innersize;

	left_pos, right_pos = 0;		/* set up control variables for scanning through arguments */
	left_size = joint;			/* number of things at a time to take from left */
	right_size = jointsize - left_size;	/* number of things at a time to take from the right */

	/** All stuff has been set up.  Do the actual operation **/


	do result_pos = 0 repeat (result_pos + jointsize) while(result_pos < outersize);

		/* part of column before a joint is moved in from left argument */

	      if ^left_scalar then do;		/* use EIS to copy in from vector */
		if characters then substr(result -> character_string_overlay, result_pos+1, left_size) =
				substr(left -> character_string_overlay, left_pos+1, left_size);
		else addr(result -> numeric_datum(result_pos)) -> left_numbers =
			addr(left -> numeric_datum(left_pos)) -> left_numbers;
		left_pos = left_pos + left_size;
		end;

	      else				/* assign scalar to vector row of result */
	        if characters then do n = 0 by 1 while (n < left_size);	/* use copy builtin if and when it */
		result -> character_datum(n+result_pos) = left -> character_datum(0);	/* ever works. */
		end;
	        else do n = 0 by 1 while (n < left_size);		/* use assignment of scalar to aggregate */
		result -> numeric_datum(n+result_pos) = left -> numeric_datum(0);	/* if and when it ever generates */
		end;						/* as good or better code than do-loop */

		/* part of column after a joint is moved in from right argument */

	      if ^right_scalar then do;		/* use EIS to copy in from vector */
		if characters then substr(result -> character_string_overlay, result_pos+left_size+1, right_size) =
			substr(right -> character_string_overlay, right_pos+1, right_size);
		else addr(result -> numeric_datum(result_pos+left_size)) -> right_numbers =
			addr(right -> numeric_datum(right_pos)) -> right_numbers;
		right_pos = right_pos + right_size;
		end;

	      else				/* assign to scalar to a vector row of result */
	        if characters then do n = 0 by 1 while (n < right_size);	/* use copy builtin if and when */
		result -> character_datum(n+result_pos+left_size) = right -> character_datum(0);
		end;	/* it ever works */
	        else do n = 0 by 1 while (n < right_size);		/* use assignment of a scalar to an aggregate */
		result -> numeric_datum(n+result_pos+left_size) = right -> numeric_datum(0);
		end;					/* if and when it ever generates as good or
							   better code than the do loop */

	   end;

	/* maybe copy result down */

	if ^ operands(2).on_stack
	   then if ^operands(1).on_stack
	      then do;		/* result is already at right place since nothing else on stack */
		operators_argument.result = result_vb;
		return;
		end;
	   else operators_argument.result = left_vb;	/* only left on stack, over-write it */
	else operators_argument.result = right_vb;	/* right or both on stack, over-write right */

	/* yes, copy result down */

	number_of_dimensions = rhorho;	/* for taking size, base of refer option */
	n_words = size(value_bead);			/* first copy bead header stuff + rho vector */
	operators_argument.result -> words = result_vb -> words;

	/* adjust value_bead.data_pointer */

	left, operators_argument.result -> value_bead.data_pointer
		= addr(operators_argument.result->value_bead.rho(rhorho+1));

	if characters then n_words = size(character_string_overlay);
	else do;
	     n_words = size(numeric_datum);
	     if substr(rel(left), 18, 1) then do;
		left = addrel(left, 1);		/* double-word align */
		operators_argument.result -> value_bead.data_pointer = left;
		end;
	     end;

	if n_words ^= 0 then			/* avoid illegal_procedure faults from kludge EIS hardware */
	left -> words = result -> words;		/* move in the data */

	value_stack_ptr = addrel(left, n_words);		/* set ptr to first word above data */

	return;

comma_two_scalars:

	rhorho = 1;
	outersize = 2;
	if characters then do;
	     left_char = left -> character_datum(0);
	     right_char = right -> character_datum(0);
	     call stack_allocate_0;
	     result -> character_datum(0) = left_char;
	     result -> character_datum(1) = right_char;
	     end;
	else do;
	     left_num = left -> numeric_datum(0);
	     right_num = right -> numeric_datum(0);
	     call stack_allocate_0;
	     result -> numeric_datum(0) = left_num;
	     result -> numeric_datum(1) = right_num;
	     end;
	result_vb -> value_bead.rho(1) = 2;
	operators_argument.result = result_vb;
	return;

/*** routines to make a bead on the value stack, given rhorho and outersize.
	returns result_vb, result.  Sets value_bead.type, .rhorho, .data_pointer.
	Sets value_stack_ptr ***/

stack_allocate_0: proc;	/* this entry flushes operands before allocating */

	if operands(2).on_stack then value_stack_ptr = right_vb;
	else if operands(1).on_stack then value_stack_ptr = left_vb;

stack_allocate: entry;	/* this entry allocates on top of stack */

dcl words_needed_in_bead fixed bin(19),
    words_needed fixed bin(19),
    data_words_needed fixed bin(19);

	if characters then data_words_needed = size(character_string_overlay);
		    else data_words_needed = size(numeric_datum);

	number_of_dimensions = rhorho;
	words_needed_in_bead = size(value_bead);
	words_needed = words_needed_in_bead + data_words_needed;
	if ^ characters then words_needed = words_needed + 1;	/* double word alignment hack */

	result_vb = apl_push_stack_ (words_needed);

	result = addrel(result_vb, words_needed_in_bead);		/* -> data area */
	string(result_vb -> value_bead.type) = resulting_type;
	if ^ characters then if substr(rel(result), 18, 1) then result = addrel(result, 1);	/* double word align */

	result_vb -> value_bead.reference_count = -1;
	result_vb -> value_bead.total_data_elements = outersize;
	result_vb -> value_bead.rhorho = rhorho;
	result_vb -> value_bead.data_pointer = result;

%include apl_push_stack_fcn;
end;

/* This subroutine calculates information about the result bead from either
  the left or right bead (whichever one arg ptr points to) for the
   apl_catenate_ entry. */

calculate_result_bead:
	procedure (a_info_bead_ptr);

declare	a_info_bead_ptr pointer parameter;	/* ptr to which bead is array */
declare	info_bead_ptr pointer initial (a_info_bead_ptr);	/* for efficiency */


		kludge_rhorho = info_bead_ptr -> value_bead.rhorho;
		if I > kludge_rhorho then go to rank_subsc_error;

		J = info_bead_ptr -> value_bead.rho(I) + 1;

		innersize = 1;
		do i = I by 1 while (i < kludge_rhorho);
		   innersize =  info_bead_ptr -> value_bead.rho(i + 1) * innersize;
		   end;

		outersize,		/* init to product of all dims
					   of greater rank than I */
		joint = innersize;		/* left member is a scalar, so only take 1 at a time from it */

/* Multiply outersize by all dimensions of lesser rank than I so that it
   will be product of all dimensions but that of I */

		do i = 0 to I -2;
		     outersize = info_bead_ptr -> value_bead.rho (i + 1) * outersize;
		end;

		outersize = outersize + info_bead_ptr -> value_bead.total_data_elements;

		/* allocate result and set rho vector */

		call stack_allocate;
		do j = 1 by 1 while (j <= kludge_rhorho);
		   result_vb->value_bead.rho(j) = info_bead_ptr -> value_bead.rho(j);
		   if j = I then result_vb->value_bead.rho(j) = result_vb->value_bead.rho(j) + 1;
		end;
end calculate_result_bead;

/* This subroutine calculates data in the result bead for
   apl_catenate_ for vector arguments, when one vector has
   one less dimension than the other */

calculate_result_bead_vector:
	procedure (a_greater_ptr, a_less_ptr);

declare	(a_greater_ptr,	/* ptr to value bead with greater rhorho */
	 a_less_ptr) ptr parameter;	/* pointer to other one, dummy */

declare	(greater_ptr initial (a_greater_ptr),	/* is it really more efficient? */
	 less_ptr initial (a_less_ptr)) pointer automatic;


		kludge_rhorho = greater_ptr -> value_bead.rhorho;
		if kludge_rhorho < I then go to rank_subsc_error;

		do j = 1 by 1 while (j < I);			/* check that rho vectors match */
		   if greater_ptr -> value_bead.rho(j) ^= less_ptr -> value_bead.rho(j) then go to length_error;
		   end;
		do j = I+1 by 1 while(j <= kludge_rhorho);
		   if greater_ptr -> value_bead.rho(j) ^=  less_ptr -> value_bead.rho (j-1) then
			go to length_error;
		   end;

		J = greater_ptr -> value_bead.rho(I)+1;
		innersize = 1;
		do j = I by 1 while(j < kludge_rhorho);
		   innersize = greater_ptr -> value_bead.rho(j + 1) * innersize;
		   end;

		joint = innersize;
		outersize = greater_ptr -> value_bead.total_data_elements +
			  less_ptr -> value_bead.total_data_elements;

		/* allocate result and set rho vector */

		call stack_allocate;
		do j = 1 by 1 while(j <= kludge_rhorho);
		   result_vb->value_bead.rho(j) = greater_ptr -> value_bead.rho(j);
		   if j = I then result_vb->value_bead.rho(j) = result_vb->value_bead.rho(j) + 1;
		   end;

end calculate_result_bead_vector;



determine_conformability: proc;

	left_vb = operands(1).value;
	right_vb = operands(2).value;			/* copy arg ptrs for efficiency (?) */
	if left_vb->value_bead.data_type.character_value
	   then if right_vb->value_bead.data_type.character_value
	      then do;
		characters = "1"b;
		resulting_type = character_value_type;
		end;
	   else call null_vector_hacks;
	else if left_vb->value_bead.data_type.numeric_value
	   then if right_vb->value_bead.data_type.numeric_value
	      then do;
		characters = "0"b;
		resulting_type = string(left_vb -> value_bead.type) & string(right_vb -> value_bead.type);
		end;
	   else call null_vector_hacks;
	else go to domain_error;


	/* types conform, set up variables so that rank/shape checking can be done */

	left = left_vb->value_bead.data_pointer;
	right = right_vb->value_bead.data_pointer;
	left_rr = left_vb->value_bead.rhorho;
	left_scalar = (left_rr = 0);		/* comma only accepts true scalars as scalars */
	right_rr = right_vb->value_bead.rhorho;
	right_scalar = (right_rr = 0);
	I = operators_argument.dimension;


null_vector_hacks: proc;

/*
 * this routine is called when there is a mismatch in types.
 * normally, this would be a domain error, but for compatibility with
 * some apparently undocumented features in APL/360 the following special
 * cases are recognized:
 *  1) both arguments are null
 *	the type of the right-hand argument is used.
 *  2) one is null, but not both
 *	the type of the non-null argument is used.
 *  3) otherwise
 *	it is a domain error
 */

	if left_vb -> value_bead.total_data_elements = 0
	   then if right_vb -> value_bead.total_data_elements = 0
	      then	/* case 1 */
		resulting_type = string(right_vb -> value_bead.type);
	      else 	/* case 2, right is non-null */
		resulting_type = string(right_vb -> value_bead.type);	/* not optimized - clarity */
	   else if right_vb -> value_bead.total_data_elements = 0
	      then	/* case 2, left is non-null */
		resulting_type = string(left_vb -> value_bead.type);
	      else go to domain_error;	/* case 3, not allowed */

	characters = (resulting_type = character_value_type);
end null_vector_hacks;


end determine_conformability;

apl_ravel_:
	entry (operators_argument);

	right_vb = operands(2).value;
	resulting_type = string(right_vb -> value_bead.type);
	if ^operands (2).on_stack			/* copy into stack */
	then do;
		if right_vb -> value_bead.data_type.character_value
		then characters = "1"b;
		else if right_vb -> value_bead.data_type.numeric_value
		     then characters = "0"b;
		     else go to domain_error_right;

		rhorho = 1;
		outersize = right_vb -> value_bead.total_data_elements;
		left_vb = right_vb;			/* hack type-field !! */
		call stack_allocate;

		/* having set up the bead header, now copy the data values */

		if outersize ^= 0			/* avoid IPR fault from EIS hardware */
		then if characters
		     then result -> character_string_overlay = right_vb -> value_bead.data_pointer -> character_string_overlay;
		     else result -> numeric_datum (*) = right_vb -> value_bead.data_pointer -> numeric_datum (*);
	     end;
	else if right_vb -> value_bead.rhorho = 0	/* special handling for scalar on stack, because */
	     then do;				/* it cannot be done in place */
		     rhorho = 1;
		     outersize = 1;
		     if right_vb -> value_bead.data_type.character_value	/* save value and type of scalar */
		     then do;
			     characters = "1"b;
			     right_char = right_vb -> value_bead.data_pointer -> character_datum(0);
			end;
		     else do;
			     characters = "0"b;
			     right_num = right_vb -> value_bead.data_pointer -> numeric_datum(0);
			end;
		     left_vb, value_stack_ptr = right_vb;	/* get rid of the old value bead, and ... */
							/* set left_vb to hack the type field */
		     call stack_allocate;			/* get a new bead with room for rho vector */
		     if characters
		     then result -> character_datum (0) = right_char;
		     else result -> numeric_datum(0) = right_num;	/* fill in data from saved scalar */
		end;
	     else result_vb = right_vb;		/* a non-scalar on the stack may always be overlayed */

	/* now just mung the rho vector */

	operators_argument.result = result_vb;
	result_vb -> value_bead.rhorho = 1;
	result_vb -> value_bead.rho(1) = result_vb -> value_bead.total_data_elements;
	return;

apl_laminate_: entry(operators_argument);

	call determine_conformability;

	/* check ranks, find which case, set up parameters */

	if left_scalar  
	then if right_scalar
	     then go to comma_two_scalars;
	     else					/* scalar,array */
		call calculate_result_bead_laminate (right_vb);	/* because right is array it dominates */
	else if right_scalar			/* array,scalar */
	     then call calculate_result_bead_laminate (left_vb);	/* left is array */
	     else if right_rr = left_rr		/* arrays of the same rank */
		then do;
			if I > right_rr
			then go to rank_subsc_error;

			rhorho = right_rr + 1;

			do j = 0 by 1 while (j < right_rr);	/* make sure rho vectors are equal */
			   if left_vb->value_bead.rho(j + 1) ^= right_vb->value_bead.rho(j + 1)
				then go to length_error;
			   end;

			outersize = 2 * left_vb->value_bead.total_data_elements;

			innersize = 1;
			do j = I by 1 while (j < left_rr);
			   innersize = left_vb->value_bead.rho(j + 1) * innersize;
			   end;
			joint = innersize;

			/* allocate and fill rho */

			call stack_allocate;
			do j = 0 by 1 while (j < I);		/* part of rho before joint */
			   result_vb->value_bead.rho(j + 1) = left_vb->value_bead.rho(j + 1);
			   end;
			do j = I by 1 while (j < right_rr);	/* part of rho after joint */
			   result_vb->value_bead.rho(j+2) = left_vb->value_bead.rho(j + 1);
			   end;
			result_vb->value_bead.rho(I+1) = 2;	/* part of rho for joint */
			end;
		else go to rank_error;

	J = 2;

	go to catenate_laminate_join;

/* Subroutine to calculate bead info and sizes, etc. for laminate when one operand
   is scalar and the other is vector */

calculate_result_bead_laminate:
	procedure (a_array_bead_ptr);

declare	a_array_bead_ptr pointer parameter;	/* which bead is array */
declare	array_bead_ptr pointer initial	/* for efficiency */
		(a_array_bead_ptr);

		if I > array_bead_ptr -> value_bead.rhorho
		then go to rank_subsc_error;

		kludge_rhorho = array_bead_ptr -> value_bead.rhorho + 1;

		outersize = 2 * array_bead_ptr -> value_bead.total_data_elements;
		innersize = 1;
		do j = I by 1 while (j < array_bead_ptr -> value_bead.rhorho);
		   innersize = array_bead_ptr -> value_bead.rho(j + 1) * innersize;
		   end;
		joint = innersize;				/* since joining two things of equal size */

		/* allocate and fill rho */

		call stack_allocate;
		do j = 0  by 1 while ( j < kludge_rhorho);
		   if j < I then result_vb->value_bead.rho(j + 1) = array_bead_ptr -> value_bead.rho(j + 1);
		   else if j = I then result_vb->value_bead.rho(j + 1) = 2;	/* the lamination dimension */
		   else result_vb->value_bead.rho(j + 1) = array_bead_ptr -> value_bead.rho(j);
		   end;
end calculate_result_bead_laminate;

/*** errors ***/

dcl (apl_error_table_$operator_subscript_range,
     apl_error_table_$length,
     apl_error_table_$rank,
     apl_error_table_$domain) fixed bin(35) external;

rank_subsc_error:
	operators_argument.error_code = apl_error_table_$operator_subscript_range;
	return;

rank_error:
	operators_argument.error_code = apl_error_table_$rank;
	return;

length_error:
	operators_argument.error_code = apl_error_table_$length;
	return;

domain_error_right:
	operators_argument.where_error = operators_argument.where_error - 1;

domain_error:
	operators_argument.error_code = apl_error_table_$domain;
	return;

     end /* apl_comma_operators */;
