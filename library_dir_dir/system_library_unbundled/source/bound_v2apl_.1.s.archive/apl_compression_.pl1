/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* This module implements the two APL mixed operators compression and expansion.

   Created by Richard S. Lamson on an unknown date
   Essentially completely recoded by G. Gordon Benedict on 11/17/73 to:
	fix bugs in stack allocation and copy up code
	fix a slight bug in algorithm
	make more efficient.
   Modified 770223 by PG to fix bug 192 (handling of 0\i0 and 1\i0).
   Modified 770224 by PG to fix unnumbered bug whereby
	operators_argument.result did not always get set if right arg
	was on stack.  Also fixed operators to extend scalar arg on
	rhs.
   Modified 770228 by PG to fix bug 272 (1 0\4 fails...770224 change
	wasn't quite right), and bug 274 (operations on characters set
	value_stack_ptr one word too high).
   Modified 790308 by William M. York to double-word align all value beads.
   Modified 800226 by BIM and PG for bug 445 (0\'X' should be '/b').
   Modified 800226 by PG to fix 454 (expand and compress failed if qCT=0). We should never
	have used qCT here, anyway, so I changed it to use the qIT (with the new algorithm,
	to avoid bug 358).
*/

/* format: style3 */
apl_compression_:
     procedure (operators_argument);

	internal_op_code = compression;
	go to joined_code;

apl_expansion_:
     entry (operators_argument);

	internal_op_code = expansion;

joined_code:
	integer_fuzz = ws_info.integer_fuzz;

	right_vb = operators_argument.operands (2).value;
	if right_vb -> value_bead.numeric_value
	then do;
		copy_zero = copy_zero_num (internal_op_code);
		copy_one = copy_one_num (internal_op_code);
	     end;
	else if right_vb -> value_bead.character_value
	then do;
		copy_zero = copy_zero_char (internal_op_code);
		copy_one = copy_one_char (internal_op_code);
	     end;
	else go to domain_error_right;

	if right_vb -> value_bead.rhorho = 0
	then dimension, result_rhorho = 1;
	else do;
		result_rhorho = right_vb -> value_bead.rhorho;
		dimension = operators_argument.dimension;
	     end;

	right_data_elements = right_vb -> value_bead.total_data_elements;

	if right_data_elements = 1
	then do;
		dim_to_compress = right_data_elements;	/* is 1 of course */
		from_increment = 0;			/* right is scalar so do not increment index to non-existent next element */
	     end;
	else do;
		dim_to_compress = right_vb -> value_bead.rho (dimension);
		if dimension > right_vb -> value_bead.rhorho
		then goto operator_subscript_range_error;
		from_increment = 1;			/* next element of right will be 1 element ahead of last */
	     end;
	left_vb = operators_argument.operands (1).value;
	left_data_elements = left_vb -> value_bead.total_data_elements;

	left = left_vb -> value_bead.data_pointer;
	right = right_vb -> value_bead.data_pointer;

	skip, times = 1;

	do subscript = 1 by 1 while (subscript < dimension);
	     times = right_vb -> value_bead.rho (subscript) * times;
	end;
	do subscript = dimension + 1 to right_vb -> value_bead.rhorho;
	     skip = right_vb -> value_bead.rho (subscript) * skip;
	end;

/* left arg is not null, check that it is numeric */

	if left_data_elements ^= 0
	then if ^left_vb -> value_bead.numeric_value
	     then go to domain_error_left;

	if left_data_elements = 1
	then if internal_op_code = compression
	     then do;
		     if abs (left_numeric_datum (0)) <= integer_fuzz
		     then go to create_null_value;

		     if abs (left_numeric_datum (0) - 1e0) <= integer_fuzz
		     then go to return_right_argument;

		     goto domain_error_left;
		end;
	     else ;				/* no special cases for expansion */
	else if left_vb -> value_bead.rhorho ^= 1
	then go to rank_error;

	ones_count = 0;

	if left_data_elements ^= 0
	then if left_vb -> value_bead.zero_or_one_value
	     then ones_count = fixed (sum (left_numeric_datum), 35);
						/* add up and convert to fixed */
	     else do this_subscript = 0 by 1 while (this_subscript < left_data_elements);
		     value = floor (left_numeric_datum (this_subscript) + .5e0);

		     if abs (value) > integer_fuzz	/* not equal to zero */
		     then if abs (value - 1e0) <= integer_fuzz
			then ones_count = ones_count + 1;
						/* equal to one */
			else go to domain_error_left; /* not equal to zero or one */
		end;

/* Calculate the length of the result */

	if internal_op_code = compression
	then if (left_data_elements = dim_to_compress) | (right_data_elements = 1)
	     then result_length = ones_count;
	     else goto length_error;
	else if (ones_count = dim_to_compress) | (right_data_elements = 1)
	then result_length = left_data_elements;
	else go to incomplete_expansion;

/* Handle special cases & optimizations. */

	if /* tree */ result_length = dim_to_compress
	then if internal_op_code = compression
	     then go to return_right_argument;		/* compression won't shorten arg */
	     else if (right_data_elements = 1) & (ones_count = 0)
		then ;				/* 0\<SCALAR> */
		else go to return_right_argument;	/* expansion won't lengthen arg */

	if left_data_elements = 0
	then go to create_null_value;

	call allocate_result;

	from_subscript, to_subscript = 0;

	do time = 0 by 1 while (time < times);		/* this loop controls how often left array is looped thru */

	     do position = 0 by 1 while (position < left_data_elements);
						/* loop thru left arg */

		if abs (left_numeric_datum (position)) <= integer_fuzz
		then copy_site = copy_zero;
		else copy_site = copy_one;

		do subscript = 0 by 1 while (subscript < skip);
						/* loop across dim to be reduced */

		     go to copy_site;

copy_zero_char (0):
		     result_value_char (to_subscript) = Blank;
		     to_subscript = to_subscript + 1;
		     go to exeunt;

copy_zero_num (0):
		     result_numeric_datum (to_subscript) = 0.0e0;
		     to_subscript = to_subscript + 1;
		     go to exeunt;

copy_one_char (0):
copy_one_char (1):
		     result_value_char (to_subscript) = right_argument_char (from_subscript);
		     to_subscript = to_subscript + 1;
		     goto increment_from_subscript;

copy_one_num (0):
copy_one_num (1):
		     result_numeric_datum (to_subscript) = right_numeric_datum (from_subscript);
		     to_subscript = to_subscript + 1;

copy_zero_char (1):
copy_zero_num (1):
increment_from_subscript:
		     from_subscript = from_subscript + from_increment;

exeunt:
		end;
	     end;
	end;

	if ^operators_argument.operands (2).on_stack
	then do;					/* right not on stack, see if can move to left */
		if ^operators_argument.operands (1).on_stack
		then do;				/* cannot, just return it whereever it is */
			call fill_in_bead ();	/* finalize bead contents */
			return;
		     end;

		final_result_vb = left_vb;
	     end;
	else /* right is on stack */
	     final_result_vb = right_vb;

	if fixed (rel (final_result_vb), 18, 0) + total_words_wanted > ws_info.maximum_value_stack_size
	then return;				/* copy-up wouldn't fit on stack... */

	ws_info.pointers.value_stack_ptr = final_result_vb;
						/* put result here */
	previous_result_array_pointer = result;		/* save because allocate_again will smash */

	call allocate_again ();			/* allocate at this new spot */
	call fill_in_bead ();			/* fill in bead values */

	if data_words_wanted = 0
	then return;				/* avoid IPR */
	result -> word_copy_overlay = /* copy up stack */ previous_result_array_pointer -> word_copy_overlay;
	return;

create_null_value:
	result_length = 0;
	goto return_same;

return_right_argument:				/* no change; left arg must be all 1s */
	if operators_argument.operands (2).on_stack
	then do;					/* how lucky -- just return it */
		operators_argument.result = right_vb;
		data_elements = right_vb -> value_bead.total_data_elements;
		number_of_dimensions = right_vb -> value_bead.rhorho;
		total_words_wanted = size (value_bead) + size (numeric_datum) + 1;
		ws_info.value_stack_ptr = addrel (right_vb, total_words_wanted);
						/* protect result */
		return;
	     end;

	result_length = dim_to_compress;

return_same:
	if operators_argument.operands (2).on_stack
	then ws_info.value_stack_ptr = right_vb;
	else if operators_argument.operands (1).on_stack
	then ws_info.value_stack_ptr = left_vb;

	call allocate_result ();
	call fill_in_bead ();

	result -> word_copy_overlay = /* copy entire right array onto stack */ right -> word_copy_overlay;

	return;

rank_error:
	operators_argument.error_code = apl_error_table_$rank;
	return;

incomplete_expansion:
	operators_argument.error_code = apl_error_table_$incomplete_expansion;
	return;

length_error:
	operators_argument.error_code = apl_error_table_$length;
	return;

domain_error_right:
	operators_argument.where_error = operators_argument.where_error - 2;

domain_error_left:
	operators_argument.where_error = operators_argument.where_error + 1;
	operators_argument.error_code = apl_error_table_$domain;
	return;
operator_subscript_range_error:
	operators_argument.error_code = apl_error_table_$operator_subscript_range;
	return;

allocate_result:
     procedure ();

	data_elements = multiply (multiply (times, skip, 21, 0), result_length, 21, 0);
	number_of_dimensions = result_rhorho;
	bead_words_wanted = size (value_bead);		/* words to be in result value bead */

	if right_vb -> value_bead.numeric_value		/* numbers we want */
	then data_words_wanted = size (numeric_datum) + 1;
	else data_words_wanted = size (character_string_overlay);

allocate_again:					/* entry point for moving final result up stack */
     entry ();

/* bead_words_wanted and data_words_wanted have either been set by
	   caller, or by falling through from allocate_result above. */

	total_words_wanted = bead_words_wanted + data_words_wanted;

	result_vb = apl_push_stack_ (total_words_wanted);

	result = addrel (result_vb, bead_words_wanted);

	if right_vb -> value_bead.numeric_value
	then if substr (rel (result), 18, 1)
	     then result = addrel (result, 1);

	operators_argument.result = result_vb;
     end allocate_result;

fill_in_bead:
     procedure ();

	result_vb -> value_bead.data_pointer = result;
	string (result_vb -> value_bead.type) = string (right_vb -> value_bead.type);
	result_vb -> value_bead.total_data_elements = data_elements;

	do subscript = 1 to right_vb -> value_bead.rhorho;
	     result_vb -> value_bead.rho (subscript) = right_vb -> value_bead.rho (subscript);
	end;

	result_vb -> value_bead.rho (dimension) = result_length;
	result_vb -> value_bead.rhorho = result_rhorho;

     end fill_in_bead;

%include apl_push_stack_fcn;

/* automatic */

declare	(dimension, dim_to_compress, internal_op_code, times, skip, ones_count, result_length, from_subscript, to_subscript,
	position, subscript, data_elements, time, this_subscript, left_data_elements, right_data_elements, result_rhorho)
			fixed binary (21);

declare	(total_words_wanted, bead_words_wanted, data_words_wanted, from_increment)
			fixed binary precision (19);
declare	integer_fuzz	float,
	value		float;

declare	(copy_site, copy_zero, copy_one)
			label local;

declare	(left_vb, left, right_vb, right, result_vb, result, previous_result_array_pointer, final_result_vb)
			pointer;

/* based */

declare	word_copy_overlay	dimension (data_words_wanted) based fixed binary (35);
						/* for rapid data copying */

declare	left_numeric_datum	(0:left_data_elements - 1) float based (left),
	result_numeric_datum
			(0:data_elements - 1) float based (result),
	right_numeric_datum (0:right_data_elements - 1) float based (right);
declare	1 right_argument_char_structure
			based (right) aligned,
	  2 right_argument_char
			character (1) unaligned dimension (0:right_data_elements - 1);

declare	1 result_value_char_structure
			based (result) aligned,
	  2 result_value_char
			character (1) unaligned dimension (0:data_elements - 1);

/* external static */

declare	(
	apl_error_table_$length,
	apl_error_table_$rank,
	apl_error_table_$domain,
	apl_error_table_$operator_subscript_range,
	apl_error_table_$incomplete_expansion
	)		fixed binary (35) external static;

/* internal static */

declare	(
	compression	initial (1),
	expansion		initial (0)
	)		fixed binary internal static;

declare	Blank		character (1) aligned internal static initial (" ");

/* builtins */

declare	(abs, addrel, fixed, floor, rel, size, multiply, sum, string, substr)
			builtin;

/* include files */

%include apl_bead_format;
%include apl_value_bead;
%include apl_ws_info;
%include apl_number_data;
%include apl_operators_argument;
     end apl_compression_;
