/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

apl_external_fcn_defn_: proc(a_a_path, a_class);

/*
 * this routine defines an external function for APL
 * it is called by the )ZFN, )MFN, and )DFN commands.

 * written 73.09.05 by DAM
   Modified 811210 by TO to add apl_search_paths for local functions.
 */


dcl a_a_path char(*) parameter,	/* pathname of external function */
    a_class fixed bin parameter,	/* class code to put in function bead */
    a_path char(length(a_a_path)) aligned init(a_a_path) automatic;	/* must copy argument because apl_create_save_frame_
							   clobbers the portion of the stack used as
							   a command buffer, which is where a_a_path is */


          if ^init_flg then call init;
	esw = 0;
	sbp = null;
	call apl_create_save_frame_;

	/* now running in the global environment */

	if index(a_path, " ") ^= 0 then do;

		/* 2 arguments, first is apl name */

		call apl_scan_(a_path, 1, apl_name_pos, apl_name_len, tok_type, null);
		if tok_type ^= 2 then go to incorrect_command;
		if apl_name_pos+apl_name_len ^= index(a_path, " ") then go to incorrect_command;

		call apl_get_symbol_(substr(a_path, apl_name_pos, apl_name_len), sbp, (0));
		call apl_scan_(a_path, apl_name_pos+apl_name_len, cx, (0), tok_type, null);
		if tok_type = 0 then go to incorrect_command;	/* trailing spaces?? */
		end;
	else cx = 1;

	/* now process pathname/refname argument */

	not_refname = "0"b;
	cx0 = cx;
	do cx = cx by 1 to length(a_path);
	   if substr(a_path, cx, 1) = "<" then not_refname = "1"b;
	   else if substr(a_path, cx, 1) = ">" then not_refname = "1"b;
	   else if substr(a_path, cx, 1) = " " then go to incorrect_command;
	   end;

	if not_refname then do;	/* pathname */

	   call expand_path_(addr(a_path_pn_part), length(a_path)+1-cx0, addr(dn), addr(en), code);
	   if code ^= 0 then go to coderr;
	   call seperate_en;
	   call hcs_$initiate(dn, seg_name, seg_name, 0, 0, segptr, code);
	   if segptr = null then go to coderr;
	   if code = error_table_$namedup then go to coderr;	/* should be possible to get around this
							   somehow if there was a decent interface
							   to the linker */
	   end;

	else do;			/* refname */
	   en = substr(a_path, cx0);
	   call seperate_en;
	   end;

join:
	if ^not_refname then do;
	   call hcs_$fs_get_seg_ptr (seg_name, segptr, code);
	   if segptr ^= null () then goto make_ptr;		/* initiated already */
	   call search_paths_$find_dir ("apl", null (), seg_name, ref_dir_name, dn, code);
	   if code ^= 0 then goto make_ptr;
	   call hcs_$initiate (dn, seg_name, seg_name, 0, 0, segptr, code);
	   if segptr = null () then goto coderr;
	   if code = error_table_$namedup then goto coderr;
	end;

make_ptr:
	call hcs_$make_ptr(addr (apl$), seg_name, entry_name, entry_ptr, code);
	if entry_ptr = null then go to coderr;
	call hcs_$fs_get_mode(entry_ptr, mode, code);
	if code ^= 0 then go to coderr;
	if (bit(fixed(mode, 4), 4) & "0100"b) = "0000"b then go to moderr;
	if esw ^= 0 then go to got_entry_ptr;

	/* if necessary, pick up sbp which points at symbol bead */

	if cx0 = 1 then call apl_get_symbol_(decat(en, " ", "100"b), sbp, (0));		

	/* compute function_bead.text as reference name or full path name */

	if not_refname then do;
	   call expand_path_(addr(a_path_pn_part), length(a_path)+1-cx0, addr(dn), null, code);
	   if code ^= 0 then go to coderr;		/* !! should never happen !! */
	   end;
	else dn = a_path_pn_part;
	data_elements = length(decat(dn, " ", "100"b));	/* don't store trailing blanks */

	/* do not allow if name already has a global meaning */

	if sbp -> symbol_bead.meaning_pointer ^= null then go to incorrect_command;

	/* now create the function bead */

	call apl_allocate_words_(size(function_bead), fbp);
	string(fbp -> function_bead.type) = function_type;
	fbp -> function_bead.lexed_function_bead_pointer = entry_ptr;
	fbp -> function_bead.class = a_class;
	fbp -> function_bead.stop_control_pointer, fbp -> function_bead.trace_control_pointer = null;
	fbp -> function_bead.text_length = data_elements;
	fbp -> function_bead.text = substr(dn, 1, data_elements);

	/* now hook onto the meaning of the symbol which names the function */

	sbp -> symbol_bead.meaning_pointer = fbp;
	call wash_sbp;
	call apl_destroy_save_frame_update_;
	return;


moderr:	code = error_table_$moderr;

coderr:	call com_err_(code, myname(esw), substr(a_path, cx0));
	call wash_sbp;
	if esw = 0 then call apl_destroy_save_frame_;
	return;

incorrect_command:
	call wash_sbp;
	if esw ^= 0 then do;	/* should never happen */
	   code = error_table_$badpath;
	   go to coderr;
	   end;
	call ioa_$ioa_stream (apl_output_stream, "^Rincorrect command^B");
	call apl_destroy_save_frame_;
	return;

wash_sbp: proc;

	if sbp = null then return;
	sbp -> symbol_bead.reference_count = sbp -> symbol_bead.reference_count - 1;
	if sbp -> symbol_bead.reference_count <= 0 then call apl_free_bead_(sbp);
	end;


seperate_en: proc;

	if index(en, "$") = 0 then seg_name, entry_name = en;
	else do;
	   seg_name = decat(en, "$", "100"b);		
	   entry_name = decat(en, "$", "001"b);		
	   end;

	end;

init:	proc;
	     call hcs_$fs_get_path_name (addr (apl$), dn, ix, en, code);
	     if code = 0 then ref_dir_name = dn;
	     init_flg = "1"b;
	     return;
	end;




apl_external_fcn_addr_: entry(a_a_path, return_pointer_alignment_structure);

/*
 * this entry, given function_bead.text for an external function, returns its entry-point pointer
 */

	if ^init_flg then call init;
	esw = 1;
	sbp = null;
	cx0 = 1;			/* in case error */

	/* two possibilities - absolute pathname or refname */

	if substr(a_path, 1, 1) = ">" then do;	/* full pathname */

	   not_refname = "1"b;
	   call expand_path_(addr(a_path), length(a_path), addr(dn), addr(en), code);
	   if code ^= 0 then go to coderr;	/* !! */
	   call seperate_en;
	   call hcs_$initiate(dn, seg_name, seg_name, 0, 0, segptr, code);
	   if segptr = null then go to coderr;
	   if code = error_table_$namedup then go to coderr;
	   end;

	else do;				/* reference name */

	   not_refname = "0"b;
	   en = a_path;
	   call seperate_en;
	   end;

	go to join;

got_entry_ptr:
	return_pointer = entry_ptr;
	return;

dcl 1 return_pointer_alignment_structure aligned structure parameter,
      2 return_pointer unaligned pointer;

dcl apl_name_pos fixed bin(21),
    apl_name_len fixed bin(21),
    tok_type fixed bin,
    sbp unaligned pointer,			/* -> symbol bead */
    fbp unaligned pointer,			/* -> function bead */
    ix fixed bin,
    cx fixed bin(21),			/* current character index */
    cx0 fixed bin(21),			/* character index of start of pathname or refname */
    not_refname bit(1),
    dn char(168),
    en char(32),
    seg_name char(32),
    entry_name char(32),
    segptr pointer,
    entry_ptr pointer,
    code fixed bin(35),
    esw fixed bin,
    mode fixed bin(5),
    data_elements fixed bin(21);

/* based */

dcl 1 a_path_expand_path_hack_overlay based(addr(a_path)),
      2 first_part char(cx0-1),
      2 a_path_pn_part char(length(a_path)-cx0+1);

dcl apl_create_save_frame_ entry,
    apl_destroy_save_frame_ entry,
    apl_destroy_save_frame_update_ entry,
    apl_scan_ entry(char(*) aligned, fixed bin(21), fixed bin(21), fixed bin(21), fixed bin, unaligned pointer),
    apl_get_symbol_ entry(char(*), unaligned pointer, fixed bin),
    apl_free_bead_ entry(unaligned pointer),
    apl_allocate_words_ entry(fixed bin(18), unaligned pointer);

dcl expand_path_ entry(pointer, fixed bin, pointer, pointer, fixed bin(35)),
    hcs_$initiate entry(char(*), char(*), char(*), fixed bin(1), fixed bin(2), pointer, fixed bin(35)),
    hcs_$make_ptr entry(pointer, char(*), char(*), pointer, fixed bin(35)),
    hcs_$fs_get_mode entry(pointer, fixed bin(5), fixed bin(35)),
    hcs_$fs_get_path_name entry (pointer, char (*), fixed bin, char (*), fixed bin (35)),
    hcs_$fs_get_seg_ptr entry (char (*), pointer, fixed bin (35)),
    search_paths_$find_dir entry (char (*), pointer, char (*), char (*), char (*), fixed bin (35)),
    com_err_ entry options(variable),
    ioa_$ioa_stream entry options(variable);

/* external static */

declare	apl$ external static;
dcl (error_table_$moderr, error_table_$namedup, error_table_$badpath,
     error_table_$no_search_list) fixed bin(35) external;

dcl init_flg bit (1) aligned int static init ("0"b);
dcl ref_dir_name char (168) int static init ("");
dcl myname(0:1) char(32) static init("apl_external_fcn_defn_", "apl_external_fcn_addr_");
dcl apl_output_stream char (11) static initial ("apl_output_");

dcl (addr, bit, fixed, length, substr, index, null, size, string, decat) builtin;


/* include files */

%include apl_bead_format;
%include apl_function_bead;
%include apl_symbol_bead;

end;
