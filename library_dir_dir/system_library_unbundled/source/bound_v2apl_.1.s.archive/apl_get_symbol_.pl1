/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* This program, given the name of a symbol, searches the hash table of symbols for it.  If it is found,
   a pointer to that symbol's symbol_bead is returned, along with the hash index used to find it.  If it
   is not found, a symbol bead for it is created and it is entered into the hash table.  Either way you win.
   (Speaking of gratuitous side-effects...)

	Written on an unknown date by an unknown person, probably DAM
	This comment inserted, and name apl_get_symbol_ added by G. Gordon Benedict in July 1974 */

apl_get_symbol_:
get_apl_symbol_:  proc(symbol_name, return_ptr, hash_index);

dcl symbol_name char(*),			/* name of symbol to get bead for.  No trailing spaces */
    1 return_ptr aligned structure,
    2 return_pointer pointer unaligned,		/* (Output) -> symbol bead */
    hash_index fixed bin;			/* (Output) index in hash table of symbol bead, used by free_apl_bead_
					   to recompute hash index */


dcl temp_ptr ptr unaligned;

dcl i fixed bin,
    apl_allocate_words_ entry(fixed bin(20), pointer unaligned),
    (length, fixed, unspec, string, substr, mod, null, size, divide) builtin;

%include apl_number_data;
%include apl_ws_info;
%include apl_symbol_table;
%include apl_bead_format;
%include apl_symbol_bead;


/*** 1 - compute hash code for symbol_name ***/

	hash_index = 0;
	do i = 1 to length(symbol_name);
	    hash_index = hash_index + fixed(unspec(substr(symbol_name, i, 1)), 9);	/* initial kludgey hash function */
	    end;
	hash_index = mod(hash_index, symbol_table.table_size) + 1;

/*** 2 - see if symbol is already in hash table ***/

	do temp_ptr = hash_bucket_ptr(hash_index)
		   repeat(temp_ptr -> symbol_bead.hash_link_pointer)
		   while(temp_ptr ^= null);
	   if temp_ptr -> symbol_bead.name = symbol_name then go to found_it;
	   end;

/*** 3 - not there - so make one and thread it in ***/

	call apl_allocate_words_(size(symbol_bead) + divide(length(symbol_name)+3, 4, 17, 0), temp_ptr);

	string(temp_ptr -> general_bead.type) = symbol_type;
	temp_ptr -> general_bead.reference_count = 0;	/* hash links don't count */

	temp_ptr -> symbol_bead.meaning_pointer = null;		/* initiall undefined */
	temp_ptr -> symbol_bead.name_length = length(symbol_name);
	temp_ptr -> symbol_bead.name = symbol_name;

	temp_ptr -> symbol_bead.hash_link_pointer = hash_bucket_ptr(hash_index);	/* thread it in */
	hash_bucket_ptr(hash_index) = temp_ptr;
	ws_info.number_of_symbols = ws_info.number_of_symbols + 1;		/* some of rsl's things use this */

found_it:	temp_ptr -> symbol_bead.reference_count = temp_ptr -> symbol_bead.reference_count + 1;	/* going to give away ptr to it */
	return_pointer = temp_ptr;
	return;
end apl_get_symbol_;
