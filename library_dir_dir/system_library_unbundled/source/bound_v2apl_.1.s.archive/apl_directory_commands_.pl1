/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

apl_directory_commands_:
	procedure (command_name, argument);

/*
 * this module contains miscellaneous APL commands dealing with directories.
 * currently the ")LIB", ")LIBD", ")V1LIB", ")V1DROP", and ")DROP" commands are included.
 * written 73.9.15 by DAM
 * Modified 741009 by PG to use ioa_$ioa_stream, and add )V1LIB.
 * Modified 770113 by PG to add )V1DROP.
   Modified 781208 by PG to switch to clock builtin
 */

/* parameters */

dcl command_name char (4) aligned parameter,	/* name of command to be executed */
    argument char (*) parameter;		/* the argument to the command (a wsid) */

/* automatic */

dcl wsid char (168),
    dname char (168),
    ename char (32),
    fcbp pointer,
    code fixed bin (35),
    date_time_used fixed bin (71),
    date_time_modified fixed bin (71),
    v1 bit (1) aligned;

/* builtins */

dcl (addr, before, clock, fixed, null, unspec) builtin;
/* entries */

dcl ioa_$ioa_stream entry options (variable),
    apl_print_string_ entry (char (*)),
    apl_print_newline_ entry,
    apl_flush_buffer_ entry,
    (apl_translate_pathname_, apl_translate_pathname_$allow_version_one) entry (char (*), char (*), char (*), pointer, fixed bin (35)),
    apl_date_time_ entry (fixed bin (71)) returns (char (17)),
    com_err_ entry options (variable),
    msf_manager_$close entry (pointer),
    delete_$path entry (char (*), char (*), bit (6), char (*), fixed bin (35)),
    get_wdir_ entry returns (char (168)aligned),
    hcs_$star_ entry (char (*), char (*), fixed bin (2), pointer, fixed bin, pointer, pointer, fixed bin (35)),
    get_system_free_area_ entry returns (pointer),
    freen_ entry (pointer);			/* required because hardcode won't say how many Names */

/* conditions */

dcl	cleanup condition;

/* external static */

dcl	error_table_$nomatch fixed bin (35) external;

/* internal static */

dcl	apl_output_stream char (11) internal static initial ("apl_output_");

dcl suffix char (7) varying;
dcl eptr pointer,
    nptr pointer,
    ecount fixed bin,
    e_x fixed bin,
    n_x fixed bin,
    nct fixed bin,

    Names (100 /* or so */ ) char (32) based (nptr),

    1 Entries (ecount) based (eptr) aligned,
      2 (
	type bit (2),
	nnames bit (16),
	nindex bit (18)) unaligned;

	/* dispatch on command_name */

	if command_name = "drop"
	then do;
		v1 = "0"b;
		go to drop;
	     end;
	else
	if command_name = "v1dr"
	then do;
		v1 = "1"b;
		go to drop;
	     end;
	else
	if command_name = "lib "
	then go to lib;
	else
	if command_name = "libd"
	then go to libd;
	else
	if command_name = "v1li"
	then go to v1lib;
	else return;				/* random error, not too serious so just ignore */

drop:	/* )DROP */

	if argument ^= "" then wsid = argument;
	else wsid = ws_info.wsid;

	if wsid = "clear ws" then do;
	   call ioa_$ioa_stream (apl_output_stream, "not dropped, this ws is clear ws");
	   return;
	   end;

	if v1
	then call apl_translate_pathname_$allow_version_one (wsid, dname, ename, fcbp, code);
	else call apl_translate_pathname_ (wsid, dname, ename, fcbp, code);
	if code ^= 0 then do;
bad_code:
	   call com_err_ (code, "apl", "^a>^a", dname, ename);	/* tell loser that he lost */
	   return;
	   end;

	call msf_manager_$close (fcbp);	/* we didn't really want it opened anyway */
	call delete_$path (dname, ename, "100111"b, "", code);
	if code ^= 0 then go to bad_code;
	call ioa_$ioa_stream (apl_output_stream, "^a", apl_date_time_ (clock ()));
	return;

lib:
libd:
v1lib:
	/* commands to list directories - libd also gives dates */

	if argument = "" then dname = get_wdir_ ();
	else do;
	   call apl_translate_pathname_ (argument, dname, (""), fcbp, code);	/* "" as ename says I want a directory */
	   if code ^= 0 then do;			/* not there fail - fails later if there but not dir. */
	      ename = "";				/* get better looking error message (slightly) */
	      go to bad_code;
	      end;
	   end;

	if command_name ^= "v1li"
	then do;
		ename = "**.sv.apl";
		suffix = ".sv.apl";
	     end;
	else do;
		ename = "*.apl";
		suffix = ".apl";
	     end;
	nptr, eptr = null;
	on cleanup call cleanup_proc;

	call hcs_$star_ (dname, ename, 3, get_system_free_area_ (), ecount, eptr, nptr, code);
	if code = error_table_$nomatch then go to empty_directory;
	if code ^= 0 then go to bad_code;

	/* OK, produce the directory listing */

	if command_name = "libd" then 	/* put headings if long listing */
	   call ioa_$ioa_stream (apl_output_stream, "^5xname^3-^4xdate used^-^4xdate saved^/");

	do e_x = 1 by 1 while (e_x <= ecount);	/* process each entry */

	   n_x = fixed (Entries (e_x).nindex, 18);		/* index of first name for entry */
	   if command_name = "libd" then do;		/* if long format, make line of listing */
	      ename = Names (n_x);
	      call get_date_time_modified;
	      call ioa_$ioa_stream (apl_output_stream, "^30a^20a^a", before (ename, suffix), apl_date_time_ (date_time_used),
							apl_date_time_ (date_time_modified));
	      do nct = fixed (Entries (e_x).nnames, 16) by -1 while (nct > 1);		/* do auxiliary names */
		n_x = n_x + 1;
		call ioa_$ioa_stream (apl_output_stream, "^a", before (Names (n_x), suffix));
		end;
	      end;

	   else do;	/* normal )LIB listing */

	      do nct = fixed (Entries (e_x).nnames,16) by -1 while (nct > 0);
		call apl_print_string_ (before (Names (n_x), suffix));
		n_x = n_x + 1;
		end;
	      end;

	   end;

	/* Listing has been produced - clean up */

	if command_name = "libd" then call ioa_$ioa_stream (apl_output_stream, "");
	else do;
	   call apl_print_newline_;
	   call apl_flush_buffer_;
	   end;

	call cleanup_proc;
	return;

empty_directory:
	call ioa_$ioa_stream (apl_output_stream, "no workspaces");
	return;

cleanup_proc:
     procedure;

	if nptr ^= null
	then call freen_ (nptr);

	if eptr ^= null
	then call freen_ (eptr);

     end cleanup_proc;

get_date_time_modified:
     procedure;

/* sets date_time_modified to the dtm for dname>ename */

dcl hcs_$status_ entry (char (*), char (*), fixed bin (1), pointer, pointer, fixed bin (35)),
    be_sure_to_chase_links fixed bin (1) static init (1),
    1 branch_info aligned automatic structure,	/* return data from status_ */
      2 (
	type bit (2),
	nnames bit (16),
	nrp bit (18),
	dtm bit (36),
	dtu bit (36),
	mode bit (5),
	padding bit (13),
	records bit (18)) unaligned;

	call hcs_$status_ (dname, ename, be_sure_to_chase_links, addr (branch_info), null, code);
	if code ^= 0 then dtm, dtu = (36)"0"b;	/* if no status permission on entry, return the year one */
	code = 0;

	unspec (date_time_modified) = (20)"0"b || dtm || (16)"0"b;	/* unpack kludgey file-system time */
	unspec (date_time_used) = (20)"0"b || dtu || (16)"0"b;	/* .. */
     end get_date_time_modified;

/* include files */

%include apl_ws_info;
%include apl_number_data;



end;
