/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cmcs_expand_tree_path_.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified since Version 4.3 */

/* format: style3 */
cmcs_expand_tree_path_:
     proc (a_input, a_tree_path, a_code);

/* This COBOL MCS subroutine is used by the CMCS command interfaces to expand
   the short-form tree path (no blanks, period delimiters) into the proper
   48-character internal representation. The level_names can be from 1-12 chars
   in length and must be period separated. Blanks may appear only on
   the trailing end of the input string. Errors will be returned
   if there are more than three periods, intervening blanks, adjacent periods,
   and level_names outside the length of 1-12 characters.

   Bob May, 6/30/77 */

dcl	a_input		char (*),
	a_tree_path	char (48),
	a_code		fixed bin (35);

dcl	cmcs_error_table_$bad_tree_path
			fixed bin (35) external;

dcl	buffer		char (51),
	buffer_left_begin	fixed bin,
	buffer_left_len	fixed bin;

dcl	end_sw		bit (1),
	(i, j)		fixed bin;

dcl	tree_path_ptr	ptr;

dcl	1 tree_path	based (tree_path_ptr),
	  2 level_names	(4) char (12);

dcl	level_no		fixed bin;

dcl	(index, length, search, substr, verify)
			builtin;

/*  */

/* Preliminary Checks */

	if length (a_input) = 0 | length (a_input) > 51
	then go to bad_tree_path;
	if substr (a_input, 1, 1) = "." | substr (a_input, 1, 1) = " "
	then go to bad_tree_path;			/* period and blank */

/* Initialization */

	tree_path_ptr = addr (a_tree_path);
	buffer = a_input;				/* copy to fixed space for efficiency */
	buffer_left_begin = 1;
	buffer_left_len = 51;
	level_no = 0;
	end_sw = "0"b;

/* Main Procedure */

loop:
	level_no = level_no + 1;
	if level_no = 5
	then go to bad_tree_path;			/* data follows level_name-4 */

	i = index (substr (buffer, buffer_left_begin, buffer_left_len), ".");
						/* look for another component preceded with "." */
	if i = 0
	then do;					/* at least no more periods */
		end_sw = "1"b;			/* should be last time through */
		i = index (substr (buffer, buffer_left_begin, buffer_left_len), " ");
						/* trailing blanks? */
		if i = 0
		then do;				/* no, use all that remains */
			i = buffer_left_len;
		     end;
		else do;				/* found trailing blank */
			if buffer_left_begin + i < 53
			then if verify (substr (buffer, buffer_left_begin + i), " ") ^= 0
						/* look for data after blank */
			     then go to bad_tree_path;

			i = i - 1;		/* adjust field length to elim blank */
		     end;
	     end;
	else i = i - 1;				/* found a period, set i to length of level_name */

/* validate level name */

	if i = 0
	then go to bad_tree_path;
	if i > 12
	then go to bad_tree_path;			/* must be 1-12 chars long */

	level_names (level_no) = substr (buffer, buffer_left_begin, i);
	if level_names (level_no) = " "
	then go to bad_tree_path;			/* tried to slip it in between good delims */
	if ^end_sw
	then do;
		buffer_left_begin = buffer_left_begin + i + 1;
		buffer_left_len = buffer_left_len - i - 1;
						/* include the trailing "." as well */
		go to loop;
	     end;

/* Finish Up */

	if level_no ^= 4
	then do i = level_no + 1 to 4;		/* blank out all trailing level names */
		level_names (i) = "";
	     end;

	a_code = 0;
	return;

bad_tree_path:
	a_code = cmcs_error_table_$bad_tree_path;
	a_tree_path = "";				/* make sure they can't use anything */
	return;

     end /* cmcs_expand_tree_path_ */;
