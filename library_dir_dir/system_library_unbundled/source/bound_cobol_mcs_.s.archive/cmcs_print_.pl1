/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cmcs_print_.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 10/02/81 by FCH, [5.0-1], emit NL after message if no slew, BUG510 */
/* Modified on 07/16/81 by FCH, [4.4-1], make BEF/AFT PAGE same as BEF/AFT 1 LINE unless printer, BUG468 */
/* Modified since Version 4.3 */

/* format: style3 */
cmcs_print_:
     proc (a_iocb_ptr, a_buffer_ptr, a_buffer_len, a_slew_ctl_ptr, a_code);

/* This COBOL MCS subroutine is used to reformat messages and message segments
   for final output to a terminal device. It uses the slew control originally given
   in the SEND verb to determine the nature of slewing required. Slew control can
   specify a slew of zero lines. Thus,  all output of data is terminated with a
   Carriage Return,  rather than a Newline. It is up to the COBOL program to keep
   track of the need to slew.

   Bob May,  6/30/77 */

dcl	a_iocb_ptr	ptr,
	a_buffer_ptr	ptr,
	a_buffer_len	fixed bin (35),
	a_slew_ctl_ptr	ptr,
	a_code		fixed bin (35);

dcl	buffer		char (a_buffer_len) based (a_buffer_ptr);
						/* for DEBUG */

dcl	(addr, copy, fixed, null, substr, unspec)
			builtin;

dcl	test_sw		bit (1) int static init ("0"b);

dcl	1 esc_sequence,
	  2 ESC		char (1),
	  2 vfu_chn	pic "99",
	  2 ETX		char (1);

dcl	(NL, FF, CR)	char (1);

dcl	NL_string		char (128);

/*  */
%include cmcs_slew_ctl;
%include cmcs_iox_processing;
%include cmcs_error_table_dcls;
%include cmcs_user_ctl;

/*  */

/* Initialization */

	slew_ctl_ptr = a_slew_ctl_ptr;		/* to get at structure components */

	unspec (esc_sequence.ESC) = "033"b3;
	unspec (esc_sequence.ETX) = "003"b3;
	unspec (CR) = "015"b3;
	unspec (NL) = "012"b3;
	unspec (FF) = "014"b3;			/*[4.4-1]*/
	user_ctl_ptr = external_user_ctl_ptr;
	NL_string = copy (NL, 128);

/* */

	if slew_ctl.when = 0
	then do;

		call iox_$put_chars (a_iocb_ptr, addr (NL), 1, a_code);

		if a_code ^= 0
		then return;

		call put_data;			/* as-is,  with trailing CR */

/*[5.0-1]*/
		if ^user_ctl.attach_bit | (user_ctl.attach_bit & user_ctl.iocb_ptr = null ())
						/*[5.0-1]*/
		then call iox_$put_chars (a_iocb_ptr, addr (NL), 1, a_code);

	     end;
	else if slew_ctl.when = 1
	then do;					/* send before slew */

		call put_data;
		call put_slew;

	     end;
	else if slew_ctl.when = 2
	then do;					/* send data after slew */

		call put_slew;
		call put_data;

	     end;
	else do;

		a_code = cmcs_error_table_$bad_call_parm;

	     end;

	return;

/*  */
put_data:
     proc ();

	if a_buffer_len ^= 0
	then do;					/* sometimes they just want the slew */

		call iox_$put_chars (a_iocb_ptr, a_buffer_ptr, fixed (a_buffer_len, 21), a_code);

		if a_code ^= 0
		then return;

	     end;

	call iox_$put_chars (a_iocb_ptr, addr (CR), 1, a_code);

	return;

     end /* put_data */;

/* */

put_slew:
     proc ();

	if slew_ctl.what = 0
	then do;					/* same as slew zero lines... we put out the CR in front */

		a_code = 0;
		return;

	     end;
	else if slew_ctl.what = 1
	then do;					/* slew n lines */

/*[4.4-1]*/
		call lines;

		return;

	     end;					/* what = 1 */
	else if slew_ctl.what = 2
	then do;					/* wants slew to PAGE */

/*[4.4-1]*/
		if user_ctl.attach_bit		/*[4.4-1]*/
		then if user_ctl.iocb_ptr ^= null ()	/*[4.4-1]*/
		     then do;
			     call iox_$put_chars (a_iocb_ptr, addr (FF), 1, a_code);
						/*[4.4-1]*/
			     return;		/*[4.4-1]*/
			end;

/*[4.4-1]*/
		slew_ctl.how_much = 1;		/*[4.4-1]*/
		call lines;

		return;

	     end;					/* what = 2 */
	else if slew_ctl.what = 3
	then do;					/* wants slew to channel */

		if slew_ctl.how_much < 1 | slew_ctl.how_much > 16
		then do;				/* VFU channels can only be 1-16 */

			a_code = cmcs_error_table_$bad_call_parm;
			return;

		     end;

		esc_sequence.vfu_chn = slew_ctl.how_much;
						/* convert to ascii chars */

		call iox_$put_chars (a_iocb_ptr, addr (esc_sequence), 4, a_code);

		return;

	     end;
	else do;

		a_code = cmcs_error_table_$bad_call_parm;
		return;

	     end;

     end /* put_slew */;

/*[4.4-1]*/
lines:
     proc;

	if slew_ctl.how_much = 0
	then do;					/* same as what = 0 */

		a_code = 0;
		return;

	     end;
	else if slew_ctl.how_much > 128
	then do;					/* can't handle this */

		a_code = cmcs_error_table_$bad_call_parm;
		return;

	     end;

	call iox_$put_chars (a_iocb_ptr, addr (NL_string), fixed (slew_ctl.how_much, 21), a_code);

     end;						/*[4.4-1]*/

     end /* cmcs_print_ */;
