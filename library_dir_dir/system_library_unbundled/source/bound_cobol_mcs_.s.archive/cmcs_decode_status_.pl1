/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cmcs_decode_status_.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified since Version 4.3 */

/* format: style3 */
cmcs_decode_status_:
     proc (a_iocbp, a_cdp, a_io_type, a_io_subtype, a_code);

/* This COBOL MCS subroutine decodes the status key in the input or output CD
   and prints this information on the specified output switch. If the call
   specifies a non-null output CD pointer, the station_names
   (in the output CD) are also printed with their corresponding error_keys.

   Bob May, 6/30/77 */

dcl	a_iocbp		ptr,
	a_cdp		ptr,			/* don't know yet if input, output, or null */
	a_io_type		fixed bin,
	a_io_subtype	fixed bin,
	a_code		fixed bin (35);		/* if ever nonzero, there's a bug */

dcl	io_types		(7) char (8) int static options (constant)
			init ("Send", "Receive", "Enable", "Disable", "Accept", "Purge", "Print");
						/* STOP RUN can't have status key */

dcl	io_subtypes	(0:28) char (24) int static options (constant) init ("Partial",
						/* Send - 0 */
			"Segment",		/* Send - 1 */
			"Message",		/* Send - 2 */
			"Group",			/* Send - 3 */
			"filler",			/* send is 0-3, others are 1-4 */
			"Segment, No Wait",		/* Receive - 1 */
			"Message, No Wait",		/* Receive - 2 */
			"Segment, Wait",		/* Receive - 3 */
			"Message, Wait",		/* Receive - 4 */
			"Input (Queue)",		/* Enable - 1 */
			"Input Terminal",		/* Enable - 2 */
			"Output (Destination)",	/* Enable - 3 */
			"N/A",			/* Enable - 4 */
			"Input (Queue)",		/* Disable - 1 */
			"Input Terminal",		/* Disable - 2 */
			"Output (Destination)",	/* Disable - 3 */
			"N/A",			/* Disable - 4 */
			"Message Count",		/* Accept - 1 */
			"N/A",			/* Accept - 2 */
			"N/A",			/* Accept - 3 */
			"N/A",			/* Accept - 4 */
			"Sends Only (CODASYL)",	/* Purge - 1 */
			"Receives Only (Multics)",	/* Purge - 2 */
			"All (Multics)",		/* Purge - 3 */
			"N/A",			/* Purge - 4 */
			"Segment, No Wait",		/* Print - 1 */
			"Message, No Wait",		/* Print - 2 */
			"N/A",			/* Print - 3 */
			"N/A");			/* Print - 4 */

dcl	status_keys	(10) char (2) int static options (constant)
			init ("na", "00", "10", "15", "20", "30", "40", "50", "60", "70");

dcl	io_type		fixed bin,
	io_subtype	fixed bin,
	count		fixed bin,
	status_key	char (2),
	error_key		char (1),
	i		fixed bin,
	input_cd_sw	bit (1);

dcl	ioa_$ioa_switch	entry options (variable);

/*  */
%include cmcs_cd_dcls;
%include cmcs_error_table_dcls;

/*  */
	a_code = 0;				/* highly unlikely it will ever be otherwise */
	input_cdp, output_cdp = a_cdp;		/* easier to do both now */

	go to set_io_type (a_io_type);

/* send, purge (CODASYL), enable/disable output */
set_io_type (1):
set_purge_io_subtype (1):				/* Standard CODASYL */
set_purge_io_subtype (3):				/* COBOL Extension */
set_en_dis_io_subtype (3):
	input_cd_sw = "0"b;				/* function uses output CD */
	if output_cdp = null ()
	then status_key = "na";
	else status_key = output_cd.status_key;
	go to print_status_key;

/* receive (and print), accept, enable/disable input/input terminal, purge (partial rcvs) */
set_io_type (2):
set_io_type (5):
set_io_type (7):
set_en_dis_io_subtype (1):
set_en_dis_io_subtype (2):
set_purge_io_subtype (2):
	input_cd_sw = "1"b;				/* uses input CD */
	if input_cdp = null ()
	then status_key = "na";			/* special COBOL extension */
	else status_key = input_cd.status_key;
	go to print_status_key;

/* enable, disable */
set_io_type (3):
set_io_type (4):
	go to set_en_dis_io_subtype (a_io_subtype);

/* purge */
set_io_type (6):
	go to set_purge_io_subtype (a_io_subtype);

/* */

print_status_key:
	call ioa_$ioa_switch (a_iocbp, "IO Type: ""^8a"", IO Subtype: ""^24a"", Status Key: ""^2a""",
	     io_types (a_io_type), io_subtypes ((4 * (a_io_type - 1) + a_io_subtype)), status_key);

	do i = 1 to 12;
	     if status_key = status_keys (i)
	     then go to print_status_msg (i);
	end;

	a_code = cmcs_error_table_$bad_call_parm;
	go to ds_ret;

/* na */
print_status_msg (1):
	call ioa_$ioa_switch (a_iocbp, "Null CD pointer used for this operation.");
	go to print_error_keys;

/* 00 */
print_status_msg (2):
	call ioa_$ioa_switch (a_iocbp, "No error detected. Action completed.");
	go to print_error_keys;

/* 10 */
print_status_msg (3):
	call ioa_$ioa_switch (a_iocbp, "One or more destinations are disabled. Action completed.");
	go to print_error_keys;

/* 15 */
print_status_msg (4):
	call ioa_$ioa_switch (a_iocbp, "One or more queues or destinations already enabled.");
	go to print_error_keys;

/* 20 */
print_status_msg (5):
	if a_io_subtype > 3
	then io_type = 7 - a_io_type;			/* 4, 5, 6 = 3, 2, 1, respectively */
	else io_type = a_io_type;			/* lumps send/purge, receive/accept, enable/disable */

	if io_type = 1
	then do;					/* send, purge, enable/disable output */
print_status_msg_20 (1):
		call ioa_$ioa_switch (a_iocbp,
		     "One or more destinations unknown. Action completed for known destinations. No action taken for unknown destinations. Data-name-4 (ERROR KEY) indicates known or unknown."
		     );
		go to print_error_keys;
	     end;

	else if io_type = 2
	then do;

/* receive, accept, enable/disable input */
print_status_msg_20 (2):
		call ioa_$ioa_switch (a_iocbp, "One or more queues or subqueues unknown. No action taken.");
		go to print_error_keys;
	     end;

	else do;					/* io_type = 3 */
		if a_io_subtype = 3
		then io_subtype = 1;
		else io_subtype = a_io_subtype + 1;
		go to print_status_msg_20 (io_subtype);
	     end;

/* enable/disable input terminal */
print_status_msg_20 (3):
	call ioa_$ioa_switch (a_iocbp, "The source is unknown. No action taken.");
	go to print_error_keys;

/* 30 */
print_status_msg (6):
	call ioa_$ioa_switch (a_iocbp, "Content of DESTINATION COUNT invalid. No action taken.");
	go to print_error_keys;

/* 40 */
print_status_msg (7):
	call ioa_$ioa_switch (a_iocbp, "Passord invalid. No enabling/disabling action taken.");
	go to print_error_keys;

/* 50 */
print_status_msg (8):
	call ioa_$ioa_switch (a_iocbp, "Character count greater than length of sending field. No action taken.");
	go to print_error_keys;

/* 60 */
print_status_msg (9):
	call ioa_$ioa_switch (a_iocbp,
	     "Partial segment with either zero character count or no sending area specified. No action taken.");
	go to print_error_keys;

/* 70 */
print_status_msg (10):
	call ioa_$ioa_switch (a_iocbp,
	     "One or more detinations do not have partial messages associated with them. Action completed for other destinations."
	     );
	go to print_error_keys;

print_error_keys:
	if ^input_cd_sw
	then if output_cdp ^= null ()
	     then do;				/* print out individual ERROR KEYs from output CD */
		     count = output_cd.station_count;
		     if count <= output_cd.bin_max_station_count
		     then do;			/* valid CD info */
			     call ioa_$ioa_switch (a_iocbp, "Station      Error Code");
			     do i = 1 to count;
				call ioa_$ioa_switch (a_iocbp, "^12a ^1a", output_cd.dest_table (i).station_name,
				     output_cd.dest_table (i).error_key);
			     end;
			     call ioa_$ioa_switch (a_iocbp, "");
						/* leave a little whitespace */
			end;
		end;

ds_ret:
	return;

     end /* cmcs_decode_status_ */;
