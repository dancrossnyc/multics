/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cmcs_tree_ctl_.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 05/05/81 by FCH, [4.4-3], entry name find_qual_name added, BUG468 */
/* Modified on 05/05/81 by FCH, [4.4-2], destination name may be any primitive node name, BUG468 */
/* Modified on 03/03/81 by FCH, [4.4-1], once per process initialization, BUG468 */
/* Modified since Version 4.3 */

/* format: style3 */
cmcs_tree_ctl_:
     proc;

	return;					/* invalid_entrypoint */

/* This COBOL MCS subroutine is used to find and process the various
   entries in cmcs_tree_ctl.control segment. */

/* Bob May, 6/30/77 */

dcl	a_dest		char (12),
	a_index		fixed bin,
	a_eptr		ptr,
	a_count		fixed bin,
	a_code		fixed bin (35),
	a_input_cdptr	ptr;

dcl	(i, j)		fixed bin,
	full_tree_path	char (48);

/* Internal Static */



dcl	(addr, null, string)
			builtin;

/*  */
%include cmcs_cd_dcls;
%include cmcs_control_hdr;
%include cmcs_entry_dcls;
%include cmcs_error_table_dcls;
%include cmcs_tree_ctl;
%include cmcs_user_ctl;
%include cmcs_vfile_rs;
/*  */
find_destination:
     entry (a_dest, a_index, a_eptr, a_code);

/*[4.4-2]*/
declare	ch48		char (48),
	loc		fixed bin;

/*[4.4-3]*/
	call find_name;

/*[4.4-3]*/
	return;

find_name:
     proc;

/*[4.4-1]*/
	call setup;

	do i = 1 to tree_ctl.current_size;

/*[4.4-2]*/
	     tree_ctl_eptr = addr (tree_ctl.entries (i)); /*[4.4-2]*/
	     ch48 = string (tree_ctl_entry.tree_path);	/*[4.4-2]*/
	     loc = index (ch48, a_dest);

/*[4.4-2]*/
	     if loc > 0				/*[4.4-2]*/
	     then if a_dest = substr (ch48, loc)	/*[4.4-2]*/
		then do;
			a_index = i;		/*[4.4-2]*/
			a_eptr = tree_ctl_eptr;	/*[4.4-2]*/
			a_code = 0;

/*[4.4-2]*/
			return;			/*[4.4-2]*/
		     end;

	end;

	a_index = 0;				/* didn't find it */
	a_eptr = null ();
	a_code = cmcs_error_table_$bad_dest;

     end;

find_qual_name:
     entry (a_dest, a_index, a_eptr, qn, a_code);

/*[4.4-3]*/
	call find_name;				/*[4.4-3]*/
	if a_code ^= 0
	then return;

/*[4.4-3]*/
	call form_qual_name;

/*[4.4-3]*/
	qn = qual_name;

/*[4.4-3]*/
	return;

/*[4.4-3]*/
declare	blank_pos		fixed bin;		/*[4.4-3]*/
declare	qual_name		char (52) varying;		/*[4.4-3]*/
declare	qn		char (52);

form_qual_name:
     proc;

/*[4.4-3]*/
	qual_name = "";

/*[4.4-3]*/
	call qual_comp (1);

/*[4.4-3]*/
	if blank_pos ^= 1				/*[4.4-3]*/
	then do;
		call qual_comp (13);

/*[4.4-3]*/
		if blank_pos ^= 1			/*[4.4-3]*/
		then do;
			call qual_comp (25);

/*[4.4-3]*/
			if blank_pos ^= 1
			then call qual_comp (37);	/*[4.4-3]*/
		     end;				/*[4.4-3]*/
	     end;
     end;

qual_comp:
     proc (pos);

/*[4.4-3]*/
declare	pos		fixed bin;

/*[4.4-3]*/
	blank_pos = index (substr (ch48, pos, 12), " ");

/*[4.4-3]*/
	if blank_pos = 1
	then return;

/*[4.4-3]*/
	if blank_pos = 0
	then blank_pos = 13;

/*[4.4-3]*/
	if qual_name ^= ""
	then qual_name = qual_name || ".";

/*[4.4-3]*/
	qual_name = qual_name || substr (ch48, pos, blank_pos - 1);

     end;

find_index:
     entry (a_index, a_eptr, a_code);

/*[4.4-1]*/
	call setup;

	if a_index <= tree_ctl.current_size
	then do;

		tree_ctl_eptr = addr (tree_ctl.entries (a_index));

		if ^tree_ctl_entry.inactive_sw
		then do;

			a_eptr = tree_ctl_eptr;
			a_code = 0;

			return;

		     end;
	     end;

	a_eptr = null ();
	a_code = cmcs_error_table_$bad_dest;

	return;

/* end of find_index entrypoint */

find_tree_path:
     entry (a_input_cdptr, a_index, a_count, a_eptr, a_code);

/*[4.4-1]*/
	call setup;

	full_tree_path = string (a_input_cdptr -> input_cd.tree_path);

	do i = 1 to tree_ctl.current_size;

	     tree_ctl_eptr = addr (tree_ctl.entries (i));

	     if ^tree_ctl_entry.inactive_sw
	     then if full_tree_path = string (tree_ctl_entry.tree_path)
		then do;

			a_index = i;
			a_count = tree_ctl_entry.subtree_count;
			a_eptr = tree_ctl_eptr;
			a_code = 0;

			return;

		     end;
	end;

	a_index, a_count = 0;			/* didn't find it */
	a_eptr = null ();
	a_code = cmcs_error_table_$bad_queue_path;	/* ---- */

	return;

/* end of find_tree_path entrypoint */

setup:
     proc;

/*[4.4-1]*/
	if (external_user_ctl_ptr -> user_ctl.init_sw.tree_ctl)
	then return;

	user_ctl_ptr = external_user_ctl_ptr;		/* set local variable from global */

	tree_ctl_ptr = user_ctl.tree_ctl_ptr;
	user_ctl.init_sw.tree_ctl = "1"b;

	a_code = 0;

     end /* setup */;

     end /* cmcs_tree_ctl_ */;
