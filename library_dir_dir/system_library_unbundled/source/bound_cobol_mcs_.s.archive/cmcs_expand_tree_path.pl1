/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cmcs_expand_tree_path.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified since Version 4.3 */

/* format: style3 */
cmcs_expand_tree_path:
cmetp:
     proc ();

/* This COBOL MCS command and active function provides the command interface to expand
   a short-form CMCS tree_path (no blanks, period delimiters) into the proper 48-char
   tree_path string. Its primary use will be as an active function for interactive
   and absentee initiation of COBOL MCS application programs that have an
   "INITIAL MESSAGE" clause, where the program must be told what CMCS queue (and subqueues)
   to use in its initial RECEIVE request.

   Bob May, 6/30/77 */

dcl	af_sw		bit (1);

dcl	my_name		char (21) init ("cmcs_expand_tree_path");

dcl	tree_path		char (48);

%include cmcs_arg_processing;

dcl	code		fixed bin (35);

dcl	ioa_		entry options (variable);

dcl	cmcs_expand_tree_path_
			entry (char (*), char (48), fixed bin (35));

/*  */

	call cu_$af_return_arg (arg_count, af_return_arg_ptr, af_return_arg_len, code);
	if code ^= 0
	then if code = error_table_$not_act_fnc
	     then do;
		     call cu_$arg_count (arg_count);
		     af_sw = "0"b;
		end;
	     else do;				/* probably active function, but something else is wrong */
		     call active_fnc_err_ (code, my_name, "Attempting to get active function paramters.");
		     return;
		end;
	else af_sw = "1"b;				/* everything is go for AF */

	if arg_count ^= 1
	then do;
print_usage:
		code = 0;
print_error:
		if af_sw
		then call active_fnc_err_ (code, my_name,
			"^/Usage: cmcs_expand_tree_path level_name1{.l_n2{.l_n3{.l_n4}}}");
		else call com_err_ (code, my_name, "^/Usage: cmcs_expand_tree_path level_name1{.l_n2{.l_n3{.l_n4}}}");
		return;
	     end;

	if af_sw
	then call cu_$af_arg_ptr (1, arg_ptr, arg_len, code);
	else call cu_$arg_ptr (1, arg_ptr, arg_len, code);
	if code ^= 0
	then go to print_error;

	call cmcs_expand_tree_path_ (arg, tree_path, code);
	if code ^= 0
	then go to print_error;

	if af_sw
	then af_return_arg = """" || tree_path || """";	/* enclose it quotes for command line */
	else call ioa_ ("""^48a""", tree_path);
	return;

     end /* cmcs_expand_tree_path */;
