/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cmcs_create_queues_.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 04/28/81 by FCH, [4.4-1], once per process initialization, BUG468 */
/* Modified since Version 4.3 */



/* format: style3 */
cmcs_create_queues_:
     proc (a_code);

/* This COBOL MCS subroutine is used by cobol_mcs_admin to do the actual work of creating
   the CMCS queues, cmcs_wait_ctl.control, cmcs_system_ctl.control, and cmcs_queue_ctl.control. */

/* Bob May, 6/30/77 */

dcl	a_code		fixed bin (35);

dcl	vt_count		fixed bin,
	pic_value		pic "9999",		/* to build switch names */
	(q_name, sw_name)	char (32),
	iocbp		ptr,
	(hdr_len_21, constant_hdr_len)
			fixed bin (21);

dcl	(i, j, k)		fixed bin,
	temp_ctl_ptr	ptr,			/* for use with make_seg */
	my_name		char (19) init ("cmcs_create_queues_");



dcl	get_pdir_		entry () returns (char (168));
dcl	hcs_$initiate	entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl	hcs_$make_seg	entry (char (*) aligned, char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl	hcs_$truncate_seg	entry (ptr, fixed bin (18), fixed bin (35));

dcl	(
	error_table_$namedup,
	error_table_$segknown,
	error_table_$action_not_performed,
	error_table_$no_record
	)		fixed bin (35) external;

dcl	(
	sub_err_,
	ioa_,
	ioa_$rsnnl
	)		entry options (variable);

dcl	sub_err_retval	fixed bin (35);		/* dummy for sub_err_ */

dcl	(addr, index, null, size, string, substr, truncate)
			builtin;

dcl	cleanup		condition;

dcl	vfile_table_ptr	ptr int static init (null);

dcl	vt_index		fixed bin;		/* manual index into vfile_table when being built */

dcl	1 vfile_table	(vt_count) based (vfile_table_ptr),
	  2 switch_name	char (32),
	  2 queue_name	char (32),
	  2 tree_ctl_eindex fixed bin,
	  2 iocb_ptr	ptr,
	  2 error_flag	bit (1);

dcl	var_cmcs_dir	char (256) varying;		/* temp to build vfile_ attach descr */
dcl	attach_descr	char (256);

dcl	1 vfile_rs1	like vfile_rs;

dcl	zero_overlay_len	fixed bin,
	zero_overlay	(zero_overlay_len) fixed bin (35) based;
						/* to zero space in stack or pre-used structure entries */

/*  */

%include cmcs_control_hdr;
%include cmcs_entry_dcls;
%include cmcs_iox_processing;
%include cmcs_key_dcls;
%include cmcs_queue_ctl;
%include cmcs_system_ctl;
%include cmcs_tree_ctl;
%include cmcs_user_ctl;
%include cmcs_vfile_rs;
%include cmcs_wait_ctl;

/*  */

/*[4.4-1]*/
	if ^(external_user_ctl_ptr -> user_ctl.init_sw.create_queues)
	then call setup;



	var_cmcs_dir = substr (user_ctl.cmcs_dir, 1, index (user_ctl.cmcs_dir, " ") - 1);
						/* we'll always find blanks */

	vt_count = tree_ctl.queue_count;
	allocate vfile_table;
	vt_index = 0;

	do i = 1 to tree_ctl.current_size;

	     if ^tree_ctl.entries (i).inactive_sw
	     then if tree_ctl.entries (i).subtree_count = 0
						/* absolute tree path */
		then do;

			vt_index = vt_index + 1;
			vfile_table (vt_index).tree_ctl_eindex = i;
						/* to copy tree entry stuff into queue entry later */
			vfile_table (vt_index).queue_name = tree_ctl.entries (i).queue_name;
			vfile_table (vt_index).iocb_ptr = null ();
			vfile_table (vt_index).error_flag = "1"b;
						/* reset only if completely successful */

		     end;
	end;

	on cleanup go to free_vt;

/* first create the other control segs */

	call make_seg ("cmcs_system_ctl.control", system_ctl_ptr);

	if a_code ^= 0
	then go to free_vt;

	call cmcs_fillin_hdr_ (system_ctl_ptr, system_ctl_version, system_ctl_hdr_len, system_ctl_entry_len, a_code);

	if a_code ^= 0
	then do;

		call sub_err_ (a_code, my_name, "c", null (), sub_err_retval, "Fillin hdr for system_ctl.");

		go to free_vt;

	     end;

	user_ctl.system_ctl_ptr = system_ctl_ptr;
	system_ctl.password = "cobol_mcs";		/* garbage until set with set_cmcs_password */
	system_ctl.lock_wait_time = 300;		/* seconds, maybe made variable later */

	call make_seg ("cmcs_queue_ctl.control", queue_ctl_ptr);

	if a_code ^= 0
	then go to free_vt;

	call cmcs_fillin_hdr_ (queue_ctl_ptr, queue_ctl_version, queue_ctl_hdr_len, queue_ctl_entry_len, a_code);

	if a_code ^= 0
	then do;

		call sub_err_ (a_code, my_name, "c", null (), sub_err_retval, "Fillin hdr for queue_ctl.");

		go to free_vt;

	     end;

	user_ctl.queue_ctl_ptr = queue_ctl_ptr;

	call make_seg ("cmcs_wait_ctl.control", wait_ctl_ptr);

	if a_code ^= 0
	then go to free_vt;

	call cmcs_fillin_hdr_ (wait_ctl_ptr, wait_ctl_version, wait_ctl_hdr_len, wait_ctl_entry_len, a_code);

	if a_code ^= 0
	then do;

		call sub_err_ (a_code, my_name, "c", null (), sub_err_retval, "Fillin hdr for wait_ctl.");

		go to free_vt;

	     end;

	user_ctl.wait_ctl_ptr = wait_ctl_ptr;

/*
   The following a_code will create the CMCS message queues and set the queue control
   record (0/1) header data. Any existing message file will be truncated.
*/

/* init info structure for vfile_ record_status order call */

	vfile_rs_ptr = addr (vfile_rs1);
	zero_overlay_len = size (vfile_rs1);
	vfile_rs_ptr -> zero_overlay (*) = 0;
	vfile_rs.version = 1;
	vfile_rs.create_sw = "1"b;			/* easier than writing a dummy record */
	vfile_rs.rec_len, vfile_rs.max_rec_len = 128;	/* (32 * 4) */

/* Init key structure with constants */

	key_struc.msg_no = 0;			/* the header rcd is always 0/1 */
	key_struc.seg_no = 1;
	key_struc.key_len = 8;
	key = based_key;				/* strictly for iox_ */

	constant_hdr_len = control_hdr_len;		/* to reinit hdr len for seek_key */

	do i = 1 to vt_count;

	     pic_value = i;
	     sw_name = "cmcs_queue_" || pic_value;	/* unique for this run only */
	     q_name = vfile_table (i).queue_name;

	     if i ^= 1
	     then do j = 1 to i - 1;			/* don't duplicate previous queue names */
		     if q_name = vfile_table (j).queue_name
		     then go to loop_end;
		end;

	     vfile_table.switch_name = sw_name;

	     call ioa_$rsnnl ("vfile_ ^a>^a.cmcs_queue", attach_descr, j, var_cmcs_dir, q_name);
	     call iox_$attach_name (sw_name, iocbp, substr (attach_descr, 1, j), null (), a_code);

	     if a_code ^= 0
	     then do;

		     call sub_err_ (a_code, my_name, "c", null (), sub_err_retval, "Attempting to attach ""^a"".",
			q_name);

		     go to loop_end;

		end;

	     vfile_table (i).iocb_ptr = iocbp;

	     call iox_$open (iocbp, 12, "0"b, a_code);	/* for direct_output to force truncate */

	     if a_code ^= 0
	     then do;

		     call sub_err_ (a_code, my_name, "c", null (), sub_err_retval, "Attempting to open ""^a"".",
			q_name);

		     go to loop_end;

		end;

	     hdr_len_21 = constant_hdr_len + 4;		/* restore proper value + 4 chars for lockword */

	     call iox_$seek_key (iocbp, key, hdr_len_21, a_code);

	     if a_code ^= 0
	     then if a_code ^= error_table_$no_record
		then do;

			call sub_err_ (a_code, my_name, "c", null (), sub_err_retval,
			     "Attempting to seek_key ""^a"".", q_name);

			go to loop_end;

		     end;

	     call iox_$control (iocbp, "record_status", vfile_rs_ptr, a_code);

	     if a_code ^= 0
	     then if a_code ^= error_table_$no_record	/* NOT SURE ABOUT ALL POSSIBLE CODES */
		then do;

			call sub_err_ (a_code, my_name, "c", null (), sub_err_retval,
			     "Attempting to perform a record_status control order ""^a"".", q_name);

			go to close;

		     end;

	     control_hdr_ptr = vfile_rs.rec_ptr;	/* for based variable */

	     call cmcs_fillin_hdr_ (control_hdr_ptr, 1, 0, 0, a_code);

	     if a_code ^= 0
	     then do;

		     call sub_err_ (a_code, my_name, "c", null (), sub_err_retval,
			"Attempting to set the msg hdr data ""^a"".", q_name);

		end;

close:
	     call iox_$close (iocbp, a_code);

	     if a_code ^= 0
	     then do;

		     call sub_err_ (a_code, my_name, "c", null (), sub_err_retval, "Attempting to close ""^a"".",
			q_name);

		end;

	     call iox_$detach_iocb (iocbp, a_code);

	     if a_code ^= 0
	     then do;

		     call sub_err_ (a_code, my_name, "c", null (), sub_err_retval, "Attempting to detach ""^a"".",
			q_name);

		end;

	     vfile_table (i).error_flag = "0"b;		/* we made it through this one */

/* Set up info in queue_ctl_entry */

	     queue_ctl.current_size, queue_ctl.entry_count = queue_ctl.current_size + 1;
						/* index to new entry and current size */
	     queue_ctl_eptr = addr (queue_ctl.entries (queue_ctl.current_size));
	     j = vfile_table (i).tree_ctl_eindex;
	     tree_ctl_eptr = addr (tree_ctl.entries (j));

	     if queue_ctl.current_size ^= tree_ctl_entry.queue_ctl_eindex
	     then do;

		     a_code = error_table_$action_not_performed;

		     call sub_err_ (a_code, my_name, "c", null (), sub_err_retval,
			"Mismatch found between queue_ctl_eindex in the tree_ctl_entry and the current location (^d vs ^d).",
			tree_ctl_entry.queue_ctl_eindex, queue_ctl.current_size);

		     return;

		end;

	     queue_ctl_entry.queue_name = "";		/* rsnnl doesn't blank fill */

	     call ioa_$rsnnl ("^a.cmcs_queue", queue_ctl_entry.queue_name, k, tree_ctl_entry.queue_name);

	     string (queue_ctl_entry.tree_path) = string (tree_ctl_entry.tree_path);
	     queue_ctl_entry.tree_ctl_eindex = j;
	     queue_ctl_entry.cmd_sw = tree_ctl_entry.cmd_sw;
	     queue_ctl_entry.mp_sw = tree_ctl_entry.mp_sw;


loop_end:
	end;					/* closes initial do loop */


free_vt:
	if vfile_table_ptr ^= null ()
	then do;

		free vfile_table;
		vfile_table_ptr = null ();

	     end;

	return;

make_seg:
     proc (a_name, a_ptr);

dcl	a_name		char (*),
	a_ptr		ptr;

	call hcs_$make_seg (user_ctl.cmcs_dir, a_name, a_name, 1010b, a_ptr, a_code);

	if a_code ^= 0
	then if a_code = error_table_$namedup | a_code = error_table_$segknown
						/* already exists */
	     then call hcs_$truncate_seg (a_ptr, 0, a_code);
						/* reset to zero */

	if a_ptr = null ()
	then call sub_err_ (a_code, my_name, "c", null (), sub_err_retval, "Attempting to create the segment ""^a"".",
		a_name);				/* DEBUG */

	return;

     end /* make_seg */;


setup:
     proc;

	user_ctl_ptr = external_user_ctl_ptr;
	tree_ctl_ptr = user_ctl.tree_ctl_ptr;

	user_ctl.init_sw.create_queues = "1"b;



	return;

     end /* setup */;

     end /* cmcs_create_queues_ */;
