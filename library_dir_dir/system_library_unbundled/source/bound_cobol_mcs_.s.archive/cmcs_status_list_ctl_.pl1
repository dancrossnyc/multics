/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cmcs_status_list_ctl_.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified since Version 4.3 */

/* format: style3 */
cmcs_status_list_ctl_:
     proc ();

	return;					/* bad entrypoint */

/* This COBOL MCS subroutine is called by cmcs_queue_ctl_ to manipulate the activity
   status of a given message. It uses the process-INdependent locators of the vfile_
   record_status control order, and manipulates linked-list locator values in the
   affected records to keep the messages in the desired status list.

   Note: This module requuires that the caller do the locking and unlocking of queue_ctl.hdr.lockword.

   Bob May, 6/30/77 */

dcl	a_iocb_ptr	ptr,
	a_queue_ctl_eptr	ptr,
	a_old_status	fixed bin,
	a_new_status	fixed bin,
	a_descr_ptr	ptr,
	a_code		fixed bin (35);

dcl	1 a_descr		like vfile_descr based (a_descr_ptr);

dcl	sysprint		file env (interactive);	/* for DEBUG */

dcl	my_name		char (21) init ("cmcs_status_list_ctl_");

dcl	iocb_ptr		ptr,
	descr_ptr		ptr;

dcl	(ioa_)		entry options (variable);

dcl	test_sw		bit (1) int static init ("0"b);

dcl	(size, string, unspec)
			builtin;

dcl	error_table_$action_not_performed
			fixed bin (35) external;

/*  */

dcl	1 (b_descr, c_descr, f_descr)
			like vfile_descr int static;

dcl	(b_descr_ptr, c_descr_ptr, f_descr_ptr)
			ptr int static;

dcl	1 (b_rs, c_rs, f_rs)
			like vfile_rs int static;

dcl	(b_rs_ptr, c_rs_ptr, f_rs_ptr)
			ptr int static;

dcl	(b_ptr, c_ptr, f_ptr)
			ptr int static;

dcl	1 (
	b		based (b_ptr),
	c		based (c_ptr),
	f		based (f_ptr)
	)		like msg_hdr;

dcl	zero		fixed bin (35) int static init (0) options (constant);

dcl	zero_descr_ptr	ptr int static;

dcl	1 zero_descr	like vfile_descr based (zero_descr_ptr);
dcl	init_ptrs_sw	bit (1) int static init ("0"b);

dcl	overlay_len	fixed bin,
	overlay		(overlay_len) fixed bin (35) based;

dcl	(addr, baseptr, fixed, null)
			builtin;

dcl	sub_err_		entry options (variable),
	sub_err_retval	fixed bin (35);

/*  */
%include cmcs_control_hdr;
%include cmcs_entry_dcls;
%include cmcs_error_table_dcls;
%include cmcs_iox_processing;
%include cmcs_key_dcls;
%include cmcs_msg_hdr;
%include cmcs_msg_seg;
%include cmcs_queue_ctl;
%include cmcs_slew_ctl;
%include cmcs_user_ctl;
%include cmcs_vfile_rs;
/*  */
add:
     entry (a_queue_ctl_eptr, a_iocb_ptr, a_descr_ptr, a_new_status, a_code);

	if test_sw				/* DEBUG */
	then do;
		put skip data (a_queue_ctl_eptr);
		put skip data (a_iocb_ptr);
		put skip data (a_descr_ptr);
		put skip data (a_new_status);
	     end;


	if ^(external_user_ctl_ptr -> user_ctl.init_sw.status_list_ctl)
	then call setup;

	call set_descr;
	if a_code ^= 0
	then go to error_ret;
	call check_msg_status (a_new_status);
	if a_code ^= 0
	then go to error_ret;

	status_list_ctl_eptr = addr (queue_ctl_entry.status_list_ctl_entries (a_new_status));

	call link_descr;
	if a_code ^= 0
	then go to error_ret;

	go to check_wait;

/* end of add entrypoint */


/* */

delete:
     entry (a_queue_ctl_eptr, a_iocb_ptr, a_descr_ptr, a_old_status, a_code);

	if test_sw				/* DEBUG */
	then do;
		put skip data (a_queue_ctl_eptr);
		put skip data (a_iocb_ptr);
		put skip data (a_descr_ptr);
		put skip data (a_old_status);
	     end;


	if ^(external_user_ctl_ptr -> user_ctl.init_sw.status_list_ctl)
	then call setup;

	call set_descr;
	if a_code ^= 0
	then go to error_ret;
	call check_msg_status (a_old_status);
	if a_code ^= 0
	then go to error_ret;
	status_list_ctl_eptr = addr (queue_ctl_entry.status_list_ctl_entries (a_old_status));

	call unlink_descr;
	if a_code ^= 0
	then go to error_ret;

	go to good_ret;

/* end of delete entrypoint */


/* */

move:
     entry (a_queue_ctl_eptr, a_iocb_ptr, a_descr_ptr, a_old_status, a_new_status, a_code);

	if test_sw				/* DEBUG */
	then do;
		put skip data (a_iocb_ptr);
		put skip data (a_queue_ctl_eptr);
		put skip data (a_descr_ptr);
		put skip data (a_old_status);
		put skip data (a_new_status);
	     end;


	if ^(external_user_ctl_ptr -> user_ctl.init_sw.status_list_ctl)
	then call setup;

	call set_descr;
	if a_code ^= 0
	then go to error_ret;
	call check_msg_status (a_old_status);
	if a_code ^= 0
	then go to error_ret;
	if a_new_status < 1 | a_new_status > 4
	then do;
		a_code = cmcs_error_table_$bad_call_parm;
		go to error_ret;
	     end;

	status_list_ctl_eptr = addr (queue_ctl_entry.status_list_ctl_entries (a_old_status));
	call unlink_descr;
	if a_code ^= 0
	then go to error_ret;
	status_list_ctl_eptr = addr (queue_ctl_entry.status_list_ctl_entries (a_new_status));
	c.msg_status = a_new_status;			/* do before we link in, it may be processed next */
	call link_descr;
	if a_code ^= 0
	then go to error_ret;

check_wait:
	if a_new_status = 2				/* notify only for available messages */
	then do;
		if status_list_ctl_entry.count ^= 1
		then goto good_ret;			/* and only when going nonzero */
		call cmcs_wait_ctl_$find (string (queue_ctl_entry.tree_path), queue_ctl_eptr, a_code);
		if a_code ^= 0
		then if a_code ^= cmcs_error_table_$no_message
		     then do;
			     call sub_err_ (a_code, my_name, "c", null (), sub_err_retval,
				"Attempting to find process waiting for message in ""^a"". Continuing.",
				string (queue_ctl_entry.tree_path));
			     go to error_ret;
			end;
		     else a_code = 0;		/* it's ok, nobody was waiting */
	     end;

good_ret:
	a_code = 0;
error_ret:
	return;

/* end of move entrypoint */

/*  */

link_descr:
     proc ();

/* Procedure to add a message to the end of a given status list. It assumes that the
   main procedure has already set the following: status_list_ctl_eptr, all of the c_xxx
   variables for the current record, including the c_rs structure. Also assumes that the
   queue_ctl.hdr.lockword is locked by the caller of cmcs_status_list_ctl_, whatever the entrypoint. */

	if status_list_ctl_entry.count = 0
	then do;					/* this is the easy one */
		status_list_ctl_entry.f_descr, status_list_ctl_entry.b_descr = c_descr;
						/* for just one, both point to new entry */
		c.f_descr, c.b_descr = zero_descr;	/* similarly for new msg */
	     end;

/* already at least one msg, new one always goes at the end */

	else do;
		b_descr = status_list_ctl_entry.b_descr;/* get old last-entry descr */
		call seek_descr (b_descr, b_rs_ptr, b_ptr);
		if a_code ^= 0
		then return;
		c.b_descr = b_descr;
		c.f_descr = zero_descr;		/* new one points back to head */
		status_list_ctl_entry.b_descr, b.f_descr = c_descr;
						/* new one now in the loop */
	     end;

	a_code = 0;
	status_list_ctl_entry.count = status_list_ctl_entry.count + 1;
	return;

     end /* link_descr */;

/*  */

unlink_descr:
     proc ();

/* Procedure to unlink a message from anywhere in the linked list.
   This subroutine makes the same assumptions as link_descr. */

	if status_list_ctl_entry.count = 0
	then do;					/* impossible, unquote */
		a_code = cmcs_error_table_$bad_call_parm;
		call sub_err_ (a_code, my_name, "c", null (), sub_err_retval,
		     "Fatal error detected. Attempt to perform an unlink in a list with zero entries. Continuing.");
		return;
	     end;
	if status_list_ctl_entry.count = 1
	then do;					/* another easy one */
		if unspec (status_list_ctl_entry.f_descr) ^= unspec (c_descr)
		then do;				/* another impossible situation */
			a_code = cmcs_error_table_$bad_call_parm;
			call sub_err_ (a_code, my_name, "c", null (), sub_err_retval,
			     "Message in status list does not match descriptor of record to be deleted. Continuing.")
			     ;
			return;
		     end;

		status_list_ctl_entry.f_descr, status_list_ctl_entry.b_descr = zero_descr;
						/* reset list to null */
		c.f_descr, c.b_descr = zero_descr;
		c.msg_status = 0;
	     end;

/* not so easy, more than one message int static in the list */

	else do;
		b_descr = c.b_descr;
		f_descr = c.f_descr;		/* set both now, may only use one */

		if unspec (b_descr) = (36)"0"b & unspec (f_descr) = (36)"0"b
		then do;
			a_code = error_table_$action_not_performed;
			call sub_err_ (a_code, my_name, "c", null (), sub_err_retval,
			     "Attempting to unlink a message from queue ""^a"", status ""^d"",
where both forward and backward record descriptors are zero.
Please contact the CMCS Administrator. Continuing.", queue_ctl_entry.queue_name, a_old_status);
			go to zero_c_descr;
		     end;


		if unspec (b_descr) = unspec (zero_descr)
		then do;				/* first one in list */
			call seek_descr (f_descr, f_rs_ptr, f_ptr);
			if a_code ^= 0
			then return;
			f.b_descr = zero_descr;	/* now 2nd one is first */
			status_list_ctl_entry.f_descr = f_descr;
		     end;
		else if unspec (f_descr) = unspec (zero_descr)
		then do;				/* last one in list */
			call seek_descr (b_descr, b_rs_ptr, b_ptr);
			if a_code ^= 0
			then return;
			b.f_descr = zero_descr;	/* second to last now last */
			status_list_ctl_entry.b_descr = b_descr;
		     end;

/* message to be deleted is in middle of the list */

		else do;
			call seek_descr (b_descr, b_rs_ptr, b_ptr);
			if a_code ^= 0
			then return;
			call seek_descr (f_descr, f_rs_ptr, f_ptr);
			if a_code ^= 0
			then return;

			b.f_descr = f_descr;	/* link ones on each side together */
			f.b_descr = b_descr;
		     end;
	     end;

zero_c_descr:
	c.f_descr, c.b_descr = zero_descr;		/* zero out for clean job */
	status_list_ctl_entry.count = status_list_ctl_entry.count - 1;

	a_code = 0;
	return;

     end /* unlink_descr */;

/*  */

set_descr:
     proc ();

	queue_ctl_eptr = a_queue_ctl_eptr;
	iocb_ptr = a_iocb_ptr;
	descr_ptr = a_descr_ptr;
	c_descr = a_descr;

	call seek_descr (c_descr, c_rs_ptr, c_ptr);
	return;

     end /* set_descr */;

/* */

check_msg_status:
     proc (x_status);

dcl	x_status		fixed bin;

	a_code = cmcs_error_table_$bad_call_parm;
	if x_status < 1 | x_status > 4
	then return;
	if c.msg_status ^= x_status
	then return;

	a_code = 0;
	return;

     end /* check_msg_status */;

/* */

seek_descr:
     proc (x_descr, x_rs_ptr, x_ptr);

/* uses vfile_ record_status control to find messages by their vfile_ descriptor */

dcl	1 x_descr		like vfile_descr,
	x_rs_ptr		ptr,
	x_ptr		ptr;

dcl	1 x_rs		like vfile_rs based (x_rs_ptr);

dcl	1 x		like msg_hdr based (x_ptr);

	x_rs.descr = x_descr;			/* maybe redundant sometimes, but consistent */
	call iox_$control (iocb_ptr, "record_status", x_rs_ptr, a_code);
	if a_code ^= 0
	then do;					/* bad news, should never happen */
		call sub_err_ (a_code, my_name, "c", null (), sub_err_retval,
		     "Attempting to use record_status control order to locate descriptor ^d.^d.", x_rs.descr.comp_no,
		     fixed (x_rs.descr.comp_offset, 18));
		x_ptr = null ();
	     end;
	else x_ptr = x_rs.rec_ptr;

	return;

     end /* seek_descr */;

/* */

init_ptrs:
     proc ();

	b_descr_ptr = addr (b_descr);
	c_descr_ptr = addr (c_descr);
	f_descr_ptr = addr (f_descr);

	b_rs_ptr = addr (b_rs);
	c_rs_ptr = addr (c_rs);
	f_rs_ptr = addr (f_rs);

	overlay_len = size (b_rs);
	b_rs_ptr -> overlay (*) = 0;
	c_rs_ptr -> overlay (*) = 0;
	c_rs_ptr -> overlay (*) = 0;

	b_rs.locate_sw = "1"b;

	c_rs.locate_sw = "1"b;

	f_rs.locate_sw = "1"b;

	b_rs.version, c_rs.version, f_rs.version = vfile_rs_version;

	zero_descr_ptr = addr (zero);

	init_ptrs_sw = "1"b;
	return;

     end /* init_ptrs */;

/* */

setup:
     proc;


	user_ctl_ptr = external_user_ctl_ptr;		/* set local variable from global */

	queue_ctl_ptr = user_ctl.queue_ctl_ptr;

	call init_ptrs;				/* setup, part two */

	user_ctl.init_sw.status_list_ctl = "1"b;	/* do this only once */
	a_code = 0;
	return;

     end /* setup */;

test:
     entry ();

	test_sw = "1"b;
	return;

     end /* cmcs_status_list_ctl_ */;
