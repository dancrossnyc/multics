/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */

rmdb_ready_db: proc (db_path, quiesce_wait_time, entries_str_ptr, absolute_db_path,
	db_model_ptr, saved_res_version_ptr, error_message, code);


/****^  HISTORY COMMENTS:
  1) change(86-01-28,Spitzer), approve(86-01-28,MCR7311),
     audit(86-09-15,Gilcrease), install(86-10-16,MR12.0-1187):
     add initialization for relmgr_entries.(put_tuple get_tuples_by_spec).
  2) change(86-08-21,Blair), approve(86-08-21,MCR7311),
     audit(86-09-15,Gilcrease), install(86-10-16,MR12.0-1187):
     Back out the entry points get_tuples_by_spec and put_tuples as they
     haven't been sufficiently tested to be reliable.  Put in get_tuple_id and
     get_tuple_by_id.
                                                   END HISTORY COMMENTS */


/*
   .		       BEGIN_DESCRIPTION
   This module quiesces a data base in  preparation  for  its  being
   restructured  and  checks  to  be  sure that the data base can be
   restructured by the caller. It also returns  to  the  caller  the
   absolute  path of the data base and a pointer to the db_model for
   the database and a pointer the the version of the saved res.

   The restrictions are:
   .   only a data base may be restructured - the  path  cannot
   .      refer to a submodel.
   .   only a version 4 or latter data base may be restructured
   .   the caller must be a DBA for the data base
   .		       END_DESCRIPTION

   Known Bugs:
   Other Problems:

   .                       HISTORY
   82-03-22 Davids: Written

   82-05-25 Davids: added code to initiate a pointer to the db_model
   .                segment and return it to the caller.

   82-05-26 Davids: changed   to   be	compatable   with   the  new
   .                mu_quiesce$quiesce_quiet calling sequence.

   82-05-26 Roger Lackey: changed mrds_dsl_get_version$get_path_info to
                   dsl_$get_path_info for binding
                      and
                  mu_quiesce$quiesce_quiet to mdbm_util_$quiesce_quiet

   82-08-20 Davids: added entries_str_ptr to the parameter list, included 
                    the rmdb_relmgr_entries and mdbm_db_model include files
                    and added code to set the values of the relmgr entries
                    to the correct relation_manager based on the database type.

   83-02-14 Davids: modified to use the new db_type_flags in the db_model
   structure instead of the old numeric db_type.

   83-05-24 Davids: Added code to initiate the saved rdbi segment and return
   a pointer to the saved_res_version element.

   83-10-04 Benjamin: Changed hcs_$initiate calls to initiate_file_.

   84-10-23 Benjamin: Changed to not abort when mu_quiesce returns 
   mrds_error_$my_quiesced_db.
*/

/* PARAMETERS */

	dcl     db_path		 char (168);	/* (input) data base path reative or absolute */
	dcl     quiesce_wait_time	 fixed bin;	/* (input) length of time to wait before giving
						   up tring to quiesce the data base */
	dcl     entries_str_ptr	 ptr;		/* (input) pointer to the relmgr_entries structure whose
                                                               elements will be set by this procedure */
	dcl     absolute_db_path	 char (168);	/* (output) absoulte path of the data base */
	dcl     db_model_ptr	 ptr;		/* (output) pointer to the db_model segment of the database */
	dcl     saved_res_version_ptr	 ptr;		/* (output) pointer the saved_res_version element
                                                               of the saved rdbi segment */
	dcl     error_message	 char (500);	/* (output) text of error message in case of problems */
	dcl     code		 fixed bin (35);	/* (output) standard error code */

/* EXTERNAL STATIC */

	dcl     error_table_$action_not_performed fixed bin (35) external static;
	dcl     error_table_$no_dir	 fixed bin (35) ext static;
	dcl     mrds_error_$my_quiesced_db fixed bin (35) ext static;
	dcl     sys_info$max_seg_size	 fixed bin (35) external static;

/* ENTRIES */

	dcl     vfile_relmgr_$close	 entry (bit (36) aligned, fixed bin (35));
	dcl     vfile_relmgr_$create_index entry (bit (36) aligned, ptr,
				 bit (36) aligned, fixed bin, bit (36) aligned, fixed bin (35));
	dcl     vfile_relmgr_$create_MRDS_relation entry (char (*), char (*), ptr,
				 ptr, bit (36) aligned, bit (36) aligned, fixed bin (35));
	dcl     vfile_relmgr_$destroy_index entry (bit (36) aligned, bit (36) aligned, fixed bin (35));
	dcl     vfile_relmgr_$destroy_relation_by_path entry (char (*), char (*), fixed bin (35));
	dcl     vfile_relmgr_$open	 entry (char (*), char (*), bit (36) aligned, fixed bin (35));
	dcl     vfile_relmgr_$put_tuple entry (ptr, ptr, bit (36) aligned, fixed bin(35));
	dcl     vfile_relmgr_$create_cursor entry (bit(36) aligned, ptr, ptr, fixed bin(35));
          dcl     vfile_relmgr_$get_tuple_id entry (ptr, ptr, ptr, ptr, fixed bin (35));
	dcl     vfile_relmgr_$get_tuple_by_id entry (ptr, bit (36) aligned, ptr, ptr, ptr, fixed bin (35));
	     
	dcl     relation_manager_$close entry (bit (36) aligned, fixed bin (35));
	dcl     relation_manager_$create_index entry (bit (36) aligned, ptr,
				 bit (36) aligned, fixed bin, bit (36) aligned, fixed bin (35));
	dcl     relation_manager_$create_relation entry (char (*), char (*), ptr,
				 ptr, bit (36) aligned, bit (36) aligned, fixed bin (35));
	dcl     relation_manager_$destroy_index entry (bit (36) aligned, bit (36) aligned, fixed bin (35));
	dcl     relation_manager_$destroy_relation_by_path entry (char (*), char (*), fixed bin (35));
	dcl     relation_manager_$open entry (char (*), char (*), bit (36) aligned, fixed bin (35));
	dcl     relation_manager_$put_tuple entry (ptr, ptr, bit (36) aligned, fixed bin(35));
	dcl     relation_manager_$create_cursor entry (bit(36) aligned, ptr, ptr, fixed bin(35));
          dcl     relation_manager_$get_tuple_id entry (ptr, ptr, ptr, ptr, fixed bin (35));
	dcl     relation_manager_$get_tuple_by_id entry (ptr, bit (36) aligned, ptr, ptr, ptr, fixed bin (35));

	dcl     ioa_$rs		 entry () options (variable);
	dcl     initiate_file_	 entry (char (*), char (*), bit (*), ptr, fixed bin (24),
				 fixed bin (35));
	dcl     mdbm_util_$get_user_class entry (char (*), ptr, fixed bin, ptr, fixed bin (35));
	dcl     dsl_$get_path_info	 entry (char (*), ptr, fixed bin, ptr, fixed bin (35));
	dcl     dsl_$create_res_copy	 entry options (variable);
	dcl     mdbm_util_$quiesce_quiet entry (char (168), fixed bin, fixed bin (35));

/* INTERNAL AUTOMATIC */

	dcl     area		 area (500);	/* local working area for structures to be allocated in */
	dcl     bit_count		 fixed bin (24);	/* required in calls to initiate_file_ */
	dcl     local_db_model_ptr	 ptr;		/* local copy of the pointer to the db_model seg */
	dcl     saved_rdbi_ptr	 ptr;		/* pointer the the rm_db_info structure in the rdbi segment */


/* BUILTINS */

	dcl     addr		 builtin;
	dcl     empty		 builtin;
	dcl     fixed		 builtin;
	dcl     length		 builtin;
	dcl     null		 builtin;
	dcl     rel		 builtin;
	dcl     rtrim		 builtin;

/* INCLUDE FILES */
%page;
%include mrds_authorization;
%page;
%include mrds_path_info;
%page;
%include rmdb_relmgr_entries;
%page;
%include mdbm_db_model;
%page;
%include mdbm_rm_db_info;
%page;
%include access_mode_values;

/*
   Initialize the output parameters
*/

	absolute_db_path = "";
	db_model_ptr = null ();
	code = 0;
	error_message = "";



/*
   use the pointer declared in with rmdb_relmgr_entries
*/

	rmdb_relmgr_entries_ptr = entries_str_ptr;





/*
   Determine if the input path refers to a  data  base  model  or  a
   submodel.  If a submodel return an error. Also determine the data
   bases's version of its version  3  or  earlier  return  an  error
   (restructuring  can  not  be  supported  by  models  eariler than
   version 4).
*/


	call dsl_$get_path_info (db_path, addr (area),
	     mrds_path_info_structure_version, mrds_path_info_ptr, code);
	if code ^= 0
	then do;
		call ioa_$rs ("Could not get database path info for ^a", error_message, length (error_message), db_path);
		goto exit_rmdb_ready_db;
	     end;

	if mrds_path_info.type.submodel
	then do;
		code = error_table_$action_not_performed;
		error_message = "Submodels may not be restructured";
		goto exit_rmdb_ready_db;
	     end;

	if mrds_path_info.mrds_version <= 3
	then do;
		code = error_table_$action_not_performed;
		error_message = "Version 3 and eariler data bases may not be restructured";
		goto exit_rmdb_ready_db;
	     end;

/*
   Determine the authorization of the caller, if he  is  not  a  DBA
   return an error.
*/


	call mdbm_util_$get_user_class ((mrds_path_info.absolute_path), addr (area),
	     mrds_authorization_structure_version, mrds_authorization_ptr, code);
	if code ^= 0
	then do;
		call ioa_$rs ("Unable to determine if you are a DBA for ^a", error_message,
		     length (error_message), mrds_path_info.absolute_path);
		goto exit_rmdb_ready_db;
	     end;

	if ^mrds_authorization.administrator
	then do;
		code = error_table_$action_not_performed;
		error_message = "Only a data base's DBA may restructure the data base";
		goto exit_rmdb_ready_db;
	     end;





/*
   initiate a pointer to the db_model segment  of  the  database  so
   that it is available for the other requests. the output parameter
   will be set after the database is quiesced.
*/

	local_db_model_ptr = null ();
	call initiate_file_ ((mrds_path_info.absolute_path), "db_model", RW_ACCESS, local_db_model_ptr, bit_count, code);
	if local_db_model_ptr = null ()
	then do;
		error_message = "Could not initiate the db_model segment";
		goto exit_rmdb_ready_db;
	     end;


/*
   Get a pointer to the saved_res_version value. If there is no saved
   resultant - create one
*/

	call initiate_file_ (rtrim (mrds_path_info.absolute_path) || ">resultant_segs.dir",
	     "rdbi", RW_ACCESS, saved_rdbi_ptr, bit_count, code);
	if code = error_table_$no_dir
	then do;					/* create the saved resultant */
		call dsl_$create_res_copy (mrds_path_info.absolute_path, code);
		if code ^= 0
		then do;
			error_message = "Could not create and save a copy of the resultant.";
			goto exit_rmdb_ready_db;
		     end;
		call initiate_file_ (rtrim (mrds_path_info.absolute_path) || ">resultant_segs.dir",
		     "rdbi", RW_ACCESS, saved_rdbi_ptr, bit_count, code);
	     end;
	if saved_rdbi_ptr = null ()
	then do;
		error_message = "Could not initiate the saved resultant segment rdbi.";
		goto exit_rmdb_ready_db;
	     end;
	saved_res_version_ptr = addr (saved_rdbi_ptr -> rm_db_info.saved_res_version);

/*
   Quiesce  the  database.
*/

	call mdbm_util_$quiesce_quiet ((mrds_path_info.absolute_path), quiesce_wait_time, code);
	if code ^= 0 & code ^= mrds_error_$my_quiesced_db
	then do;
		error_message = "The data base could not be quiesced.";
		goto exit_rmdb_ready_db;
	     end;




/*
   Setup the relation_manager entries that correspond with the
   type of database being opened.
*/

	if local_db_model_ptr -> db_model.db_type_flags.vfile_type
	then do;
		rmdb_relmgr_entries.create_relation = vfile_relmgr_$create_MRDS_relation;
		rmdb_relmgr_entries.delete_relation = vfile_relmgr_$destroy_relation_by_path;
		rmdb_relmgr_entries.open = vfile_relmgr_$open;
		rmdb_relmgr_entries.close = vfile_relmgr_$close;
		rmdb_relmgr_entries.create_index = vfile_relmgr_$create_index;
		rmdb_relmgr_entries.delete_index = vfile_relmgr_$destroy_index;
		rmdb_relmgr_entries.put_tuple = vfile_relmgr_$put_tuple;
		rmdb_relmgr_entries.create_cursor = vfile_relmgr_$create_cursor;
		rmdb_relmgr_entries.get_tuple_id = vfile_relmgr_$get_tuple_id;
		rmdb_relmgr_entries.get_tuple_by_id = vfile_relmgr_$get_tuple_by_id;
	     end;
	else do;					/* dm_file database */
		rmdb_relmgr_entries.create_relation = relation_manager_$create_relation;
		rmdb_relmgr_entries.delete_relation = relation_manager_$destroy_relation_by_path;
		rmdb_relmgr_entries.open = relation_manager_$open;
		rmdb_relmgr_entries.close = relation_manager_$close;
		rmdb_relmgr_entries.create_index = relation_manager_$create_index;
		rmdb_relmgr_entries.delete_index = relation_manager_$destroy_index;
		rmdb_relmgr_entries.put_tuple = relation_manager_$put_tuple;
		rmdb_relmgr_entries.create_cursor = relation_manager_$create_cursor;
		rmdb_relmgr_entries.get_tuple_id = relation_manager_$get_tuple_id;
		rmdb_relmgr_entries.get_tuple_by_id = relation_manager_$get_tuple_by_id;
	     end;





/*
   Since  everything  worked  ok   we   can   set   the   value   of
   absolute_db_path and the db_model_ptr.
*/


	absolute_db_path = mrds_path_info.absolute_path;
	db_model_ptr = local_db_model_ptr;




exit_rmdb_ready_db:
	return;

     end rmdb_ready_db;
