/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-11-18,Blair), approve(86-11-18,PBF7311), audit(86-12-01,Dupuis),
     install(86-12-09,MR12.0-1237):
     Change to use mrds_data_$relation_blocking_factor when creating new
     relations.
                                                   END HISTORY COMMENTS */


/* HISTORY
   Originally coded by Oris Friesen -- June 1978
   Modified by Jim Gray - - October 1978, to correct calculate_size
   Modified by Jim Gray - - November 1978, to correct handling of > 255 pages/blocked file
   Modified by Jim Gray - - December 1978, to put module and error handling in mrds_rst format
   Modified by Jim Gray - - March 1979, to correct bucket headers from 0 to 1 when bucket_density < 0

   81-05-28 Jim Gray : removed blocked file code

   82-09-07 D. Woodka : changed for DMS conversion to call relation_manager
   create relation and create index.

   82-12-07 R. Harvey : fixed bug with secondary index creation - too many
   calls were previously being made. Also set protected bit in
   file_create_info.

   83-01-10 Mike Kubicar : added a common error handling routine, "error"
   and returned on the first error.  Also added "code" parameter for returning
   the error encountered.

   83-02-17 R. Harvey : changed to support attribute naming in relation_manager
   interface.

   83-10-04 Paul Benjamin : changed hcs_$initiate calls to initiate_file_.
   Changed "1"b to ON and "0"b to OFF.

   84-08-21 Matthew Pierret : changed file_create_info to use version
   FILE_CREATE_INFO_VERSION_2, added initialization of ring_brackets in
   file_create_info to 0.
*/


mrds_rst_format_file: procedure (rsc_ptr, input_file_name, code);
%page;
/*
                            BEGIN_DESCRIPTION
   Given a single file name, this routine  creates a relation
   for the database and the corresponding  indices  according
   to the  file_model of the name file_name.m already defined
   in the database.

                            END_DESCRIPTION
*/

/* PARAMETERS

   rsc_ptr - - (input) pointer to the restructure control segment.

   input_file_name - - (input) equivalent to file_info.file_name,
   char(30) aligned, is the name of the data file. 

   code - - (output) returned error code.

*/
%page;
/* call metering if trace is on */

	if rsc.trace_sw then
	     call mrds_rst_meter (rsc_ptr, "mrds_rst_file_format",
		"1"b /* input call */, input_file_name);


	code = 0;

/* initialize for calls to create_relation and create_index */

	file_segment_name = rtrim (input_file_name);

	call initiate_file_ (rsc.dbp, "db_model", RW_ACCESS, dbm_ptr, bit_count, error_code);
	if error_code = error_table_$no_r_permission | error_code = error_table_$no_w_permission then do;
		call mrds_dm_authorization$set_needed_access (rtrim (rsc.dbp),
		     error_code);			/* fails if user is not a DBA */
		if error_code ^= 0 then error_code = mrds_error_$no_model_access;
		else call initiate_file_ (dbp, "db_model", RW_ACCESS, dbm_ptr, bit_count, error_code);
	     end;

	if dbm_ptr = null then call error (rsc_ptr, 4 /* severity */,
		mrds_error_$no_database, " The database model could not be initiated.");

	file_model_name = rtrim (file_segment_name) || ".m";
	call initiate_file_ (rsc.dbp, file_model_name, RW_ACCESS, fm_ptr, bit_count, error_code);
	if fm_ptr = null then call error (rsc_ptr, 4 /* severity */,
		error_code, " The file model," || file_model_name || "could not be initiated.");

	ri_ptr = ptr (fm_ptr, file_model.rel_ptr);	/* relation info ptr */

	tva_number_of_vector_slots = 0;
	tva_number_of_dimensions = rel_info.num_attr;
	tva_maximum_dimension_name_length = 32;
	allocate typed_vector_array in (rsc.wa);

	il_number_of_ids = rel_info.num_attr;
	allocate id_list in (rsc.wa);
	id_list.number_of_ids = 0;
	id_list.version = ID_LIST_VERSION_1;

	typed_vector_array.version = TYPED_VECTOR_ARRAY_VERSION_2;
	ai_ptr = ptr (fm_ptr, rel_info.attr_ptr);	/* get attribute info  */
	do i = 1 to tva_number_of_dimensions;

	     if attr_info.key_attr then do;		/* set up the primary key index */
		     id_list.number_of_ids = id_list.number_of_ids + 1;
		     id_list.id (id_list.number_of_ids) = attr_info.defn_order;
		end;

	     di_ptr = ptr (dbm_ptr, attr_info.domain_ptr);/* set up descriptor list for create relation */
	     typed_vector_array.dimension_table (i).name = attr_info.name;
	     typed_vector_array.dimension_table (i).descriptor_ptr = addr (domain_info.db_desc);
	     ai_ptr = ptr (fm_ptr, attr_info.fwd_thread);

	end;

	allocate rel_creation_info in (rsc.wa);
	allocate file_create_info in (rsc.wa);

/* initialize values for create_relation */

	rel_creation_info.version = REL_CREATION_INFO_VERSION_2;
	rel_creation_info.file_create_info_ptr = addr (file_create_info);
	esm_info_ptr = null;
	cism_info_ptr = null;
	file_create_info.version = FILE_CREATE_INFO_VERSION_2;
	file_create_info.ci_size_in_bytes = 4096;
	file_create_info.blocking_factor = mrds_data_$relation_blocking_factor;
	file_create_info.flags.protected = rsc.db_relation_mode_flags.protection_on;
	file_create_info.flags.no_concurrency = ^rsc.db_relation_mode_flags.concurrency_on;
	file_create_info.flags.no_rollback = ^rsc.db_relation_mode_flags.rollback_on;
	file_create_info.flags.mbz_1 = OFF;
          file_create_info.ring_brackets (*) = 0;
	file_create_info.mbz_2 = 0;
          file_create_info.mbz_3 = OFF;

/* initialize values for create_index */
	style = 1;
	relation_index_flags_ptr = addr (flag_list);
	relation_index_flags.relation_must_be_empty = OFF;
	relation_index_flags.index_is_clustering = OFF;
	relation_index_flags.index_is_unique = ON;	/* for primary key */




/* make call to relation manager */

	if rsc.db_relation_mode_flags.dm_file_type then do; /* if this is a page_file database */

		call relation_manager_$create_relation (rsc.dbp, file_segment_name,
		     rel_creation_info_ptr, typed_vector_array_ptr,
		     rel_opening_id, rel_info.id, error_code);
		if error_code ^= 0 then
		     call error (rsc_ptr, 4 /* severity */, error_code,
			"while creating relation" || file_segment_name);

/* create the primary index for the relation */

		call relation_manager_$create_index (rel_opening_id,
		     id_list_ptr, flag_list, style, rel_info.primary_key_index_id, error_code);

		if error_code ^= 0 then
		     call error (rsc_ptr, 4 /* severity */, error_code,
			"while creating the primary index for" || file_segment_name);

	     end;

	else do;					/* if this is a vfile_ database */

		call vfile_relmgr_$create_MRDS_relation (rsc.dbp, file_segment_name,
		     rel_creation_info_ptr, typed_vector_array_ptr,
		     rel_opening_id, rel_info.id, error_code);
		if error_code ^= 0 then
		     call error (rsc_ptr, 4 /* severity */, error_code,
			"while creating relation" || file_segment_name);

/* create the primary index for the relation */

		call vfile_relmgr_$create_index (rel_opening_id,
		     id_list_ptr, flag_list, style, rel_info.primary_key_index_id, error_code);
		if error_code ^= 0 then
		     call error (rsc_ptr, 4 /* severity */, error_code,
			"while creating the primary index for" || file_segment_name);

	     end;


/* create the secondary indexes for the relation */

	relation_index_flags.index_is_unique = OFF;	/* index need not be unique for secondary index */

	id_list.number_of_ids = 1;			/* secondary indices involve only one attribute */

	do ai_ptr = ptr (fm_ptr, rel_info.attr_ptr)
	     repeat ptr (fm_ptr, attr_info.fwd_thread)
	     while (rel (ai_ptr) ^= NULL_OFFSET);

	     if attr_info.index_attr then do;
		     id_list.id (1) = attr_info.defn_order;

		     if rsc.db_relation_mode_flags.dm_file_type then do; /* if this is a page_file database */

			     call relation_manager_$create_index (rel_opening_id,
				id_list_ptr, flag_list, style, attr_info.index_id, error_code);

			     if error_code ^= 0 then
				call error (rsc_ptr, 4 /* severity */, error_code,
				     " while creating secondary indices for " || file_segment_name);

			end;

		     else do;			/* if this is a vfile_ database */

			     call vfile_relmgr_$create_index (rel_opening_id,
				id_list_ptr, flag_list, style, attr_info.index_id, error_code);
			     if error_code ^= 0 then
				call error (rsc_ptr, 4 /* severity */, error_code,
				     " while creating secondary indices for " || file_segment_name);

			end;

		end;				/* index_attr */

	end;					/* do ai_ptr */

/* close the relation */

	if rsc.db_relation_mode_flags.dm_file_type
	then call relation_manager_$close (rel_opening_id, error_code);
	else call vfile_relmgr_$close (rel_opening_id, error_code);
	if error_code ^= 0 then
	     call error (rsc_ptr, 4 /* severity */, error_code,
		" while closing relation " || file_segment_name);


/* call metering if trace is on */

EXIT:
	if rsc.trace_sw then
	     call mrds_rst_meter (rsc_ptr, "mrds_rst_file_format",
		"0"b /* output call */, input_file_name);

	return;
%page;
/**********
*
*  This error routine provides a common action on error.  It will call
*  mrds_rst_error to display the error and then return.
*
**********/

error:
     proc (err_rsc_ptr, err_severity, err_code, err_text);

	dcl     err_rsc_ptr		 ptr;		/* Pointer to rsc common structure */
	dcl     err_severity	 fixed bin;	/* Cmdb severity */
	dcl     err_code		 fixed bin (35);	/* Standard error code */
	dcl     err_text		 char (*);	/* Expanitory text for error */

	code = err_code;				/* Set error code for return. Note, global parameter (Yuck) */
	call mrds_rst_error (err_rsc_ptr, err_severity, err_code, err_text);
	goto EXIT;
     end error;
%page;
	dcl     bit_count		 fixed bin (24);	/* Required in calls to initiate_file_ */
	dcl     code		 fixed bin (35);	/* Returned error code */
	dcl     error_code		 fixed bin (35);	/* internal status return code */
	dcl     error_table_$no_r_permission
				 fixed bin (35) ext static;
	dcl     error_table_$no_w_permission
				 fixed bin (35) ext static;
	dcl     file_model_name	 char (32);
	dcl     flag_list		 bit (36) aligned;
	dcl     i			 fixed bin;	/* index variable */
	dcl     initiate_file_	 entry (char (*), char (*), bit (*), ptr, fixed bin (24),
				 fixed bin (35));
	dcl     (addr, null, fixed, rel, rtrim, ptr) builtin;
	dcl     rel_opening_id	 bit (36) aligned;
	dcl     style		 fixed bin (17);
	dcl     sys_info$max_seg_size	 fixed bin (35) ext;

	dcl     mrds_rst_meter	 entry (ptr, char (*), bit (1), char (*)); /* metering routine */
	dcl     input_file_name	 char (*);	/* file name to be formatted */
	dcl     file_segment_name	 char (32);	/* rtrim of input_file_name */
          dcl     mrds_data_$relation_blocking_factor fixed bin (17) external static;
	dcl     mrds_dm_authorization$set_needed_access entry (char (*), fixed bin (35));
	dcl     mrds_error_$no_database fixed bin (35) ext static;
	dcl     mrds_error_$no_model_access fixed bin (35) ext static;
	dcl     mrds_rst_error	 entry (ptr, fixed bin, fixed bin (35), char (*)); /* error output routine */
	dcl     NULL_OFFSET		 int static bit (18) unal init ((18)"1"b) options (constant);
	dcl     OFF		 bit (1) aligned internal static options (constant) init ("0"b);
	dcl     ON		 bit (1) aligned internal static options (constant) init ("1"b);
	dcl     relation_manager_$close entry (bit (36) aligned, fixed bin (35));
	dcl     relation_manager_$create_index entry (bit (36) aligned, ptr, bit (36) aligned, fixed bin (17), bit (36) aligned, fixed bin (35));
	dcl     relation_manager_$create_relation entry (char (*), char (*), ptr, ptr, bit (36) aligned, bit (36) aligned, fixed bin (35));
	dcl     vfile_relmgr_$close	 entry (bit (36) aligned, fixed bin (35));
	dcl     vfile_relmgr_$create_MRDS_relation entry (char (*), char (*), ptr, ptr, bit (36) aligned, bit (36) aligned, fixed bin (35));
	dcl     vfile_relmgr_$create_index entry (bit (36) aligned, ptr, bit (36) aligned, fixed bin (17), bit (36) aligned, fixed bin (35));
%page;
%include mrds_rst_rsc;
%page;
%include mrds_rst_struct_types;
%page;
%include mdbm_file_model;
%page;
%include mdbm_rs_info;
%page;
%include mrds_dbcb;
%page;
%include mdbm_db_model;
%page;
%include dm_rel_creation_info;
%page;
%include dm_file_create_info;
%page;
%include vu_typed_vector_array;
%page;
%include dm_id_list;
%page;
%include dm_relation_index_flags;
%page;
%include access_mode_values;
     end mrds_rst_format_file;
