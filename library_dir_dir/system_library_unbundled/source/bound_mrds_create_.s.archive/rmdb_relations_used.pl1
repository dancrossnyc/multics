/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/* format: ^inddcls,^indattr,indnoniterend,^indnoniterdo,indend,tree,^case,insnl,comcol61,dclind5,declareind5,delnl */

/*DESCRIPTION
  Given a list of objects to delete (domains or attributes, depending upon
  which entry point into this subroutine is used), this subroutine creates
  a list of relations that are used along with a per-relation list of attributes
  to be deleted in that relation. This list is then used in another subroutine
  to create a new copy of those relations without the specified attributes.
  The information to prepare these lists comes from the temporary crossreference
  vfile.
*/

/****^  HISTORY COMMENTS:
  1) change(86-01-14,Spitzer), approve(86-01-14,MCR7311),
     audit(86-09-15,Gilcrease), install(86-10-16,MR12.0-1187):
     written
                                                   END HISTORY COMMENTS */

rmdb_relations_used:
     proc;

	return;					/* not an entry point */

rmdb_relations_used$domains:
     entry (Irmdb_ctl_ptr, Idelete_object_info_ptr, Iarea_ptr, Odomain_list_ptr, Oattribute_list_ptr, Orelation_list_ptr,
	Oerror_message, Ocode);

	domain_entry = "1"b;
	goto COMMON;

rmdb_relations_used$attributes:
     entry (Irmdb_ctl_ptr, Idelete_object_info_ptr, Iarea_ptr, Odomain_list_ptr, Oattribute_list_ptr, Orelation_list_ptr,
	Oerror_message, Ocode);

	domain_entry = "0"b;
	goto COMMON;

COMMON:						/* copy input variables */
	rmdb_ctl_ptr = Irmdb_ctl_ptr;
	delete_object_info_ptr = Idelete_object_info_ptr;
	user_area_ptr = Iarea_ptr;

/* initialize output variables */
	Odomain_list_ptr, Oattribute_list_ptr, Orelation_list_ptr = null;
	Oerror_message = "";
	Ocode = 0;

	temp_ptrs (*) = null;
	max_seg_size = sys_info$max_seg_size * 4;
	db_path = rmdb_ctl.absolute_db_path;
	local_iocb = rmdb_ctl.crossref_file_info.iocb_ptr;

	on cleanup call cleaner;

	call mdbm_util_$get_temp_segments_path (rmdb_ctl.temp_dir_path, myname, temp_ptrs, code);
	if code ^= 0
	then do;
	     error_message = "Cannot get a temp segment in " || rtrim(rmdb_ctl.temp_dir_path) || ".";
	     call error (code, error_message);
	     end;
	
/* use the 1st temp segment for reading records from the crossref file */
	crossref_info_record_ptr = temp_ptrs (1);

/* Since we are now going to allocate lots of structures in the user area, set
   up an area condition so we can return some intelligent error message if we
   overflow it. */
	on area call error (error_table_$area_too_small, "Input user area.");

	if domain_entry
	then do;					/* create and fill the domain_list structure */
	     domain_list_count = delete_object_info.count;
	     allocate domain_list in (user_area) set (domain_list_ptr);

	     do domain_idx = 1 to domain_list_count;

/* Get the domain record from the crossreference file */
		call mdbm_util_$xref_find_record (local_iocb, DOMAIN_KEY_HEAD, delete_object_info.name (domain_idx),
		     crossref_info_record_ptr, max_seg_size, error_message, code);
		if code ^= 0
		then if code = error_table_$no_record
		     then call error (mrds_error_$no_model_dom, delete_object_info.name (domain_idx));
		     else call error (code, error_message);

/* It's there, fill in the domain_list entry */
		domain_list.name (domain_idx) = make_name (delete_object_info.name (domain_idx));

/* Create this domain's corresponding attribute_list structure (the list of
   attributes that are used by this domain). If the domain is unreferenced,
   this ptr will be set to null. */
		if crossref_info_record.count = 0
		then attribute_list_ptr = null;
		else do;
		     attribute_list_count = crossref_info_record.count;
		     allocate attribute_list in (user_area) set (attribute_list_ptr);

/* Fill in the attribute_list structure for this domain. This will contain the
   list of attributes used within a single specific domain. */
		     do attribute_list_idx = 1 to attribute_list_count;
			attribute_list.name (attribute_list_idx) =
			     make_name (crossref_info_record.object (attribute_list_idx));
			end;			/* do attribute_list_idx */
		     end;

		domain_list.attribute_list_ptr (domain_idx) = attribute_list_ptr;
		end;				/* do domain_idx */
	     end;					/* if domain_entry */
	else do;					/* must have entered through the attribute EP */

/* Indicate there is no domain_list structure when entered through the domain
   entry point. */
	     domain_list_ptr = null;

/* Create the attribute_list structure. */
	     attribute_list_count = delete_object_info.count;
	     allocate attribute_list in (user_area) set (attribute_list_ptr);

/* Populate the attribute_list structure with the objects from the
   delete_object_info structure. */
	     do attribute_list_idx = 1 to attribute_list_count;
		attribute_list.name (attribute_list_idx) = make_name (delete_object_info.name (attribute_list_idx));
		attribute_list.attribute_ptr (attribute_list_idx) = null;
		end;				/* do attribute_list_idx */
	     end;

/* Process the attribute_list structure, producing the list of relations used
   in all the specified attributes. The list of unique relations is built upon
   a temp segment and then copied into an allocated structure, as we don't know
   a priori how many relations there will be. */
	relation_list_ptr = temp_ptrs (2);
	if domain_entry
	then do domain_idx = 1 to domain_list.count;
		attribute_list_ptr = domain_list.attribute_list_ptr (domain_idx);
		call get_relation_names;
		end;				/* do domain_idx */
	else call get_relation_names;

/* Create the relation_list structure that is to be returned to the caller. */
	relation_list_count = relation_list.count;
	allocate relation_list in (user_area) set (relation_list_ptr);

/* Copy the contents of the temp_ptrs (2) -> relation_list.name into
   relation_list_ptr -> relation_list.name. */
	relation_list_ptr -> relation_list.name = temp_ptrs (2) -> relation_list.name;

/* Now process the relation_list structure. We have to initiate the relation.m
   segments and create a relation structure for each referenced relation. Note
   that we don't have to terminate the segments because we will 1) leave the
   pointer to it in the relation structure, and 2) we will shortly delete the
   segment anyway. */

	do relation_idx = 1 to relation_list.count;
	     relation_model_name = rtrim (unmake_name (relation_list.name (relation_idx))) || ".m";
	     call initiate_file_ (db_path, relation_model_name, RW_ACCESS, fm_ptr, (0), code);
	     if code ^= 0
	     then call error (code, "Initiating " || pathname_ (db_path, relation_model_name));

/* Get attribute count of this relation from the relation_info structure in the
   file_model. */
	     ri_ptr = ptr (fm_ptr, file_model.rel_ptr);
	     relation_attribute_count = rel_info.num_attr;

/* Create and populate the relation structure for this relation. */
	     allocate relation in (user_area) set (relation_ptr);
	     relation.name = unmake_name (relation_list.name (relation_idx));
	     relation.file_model_ptr = fm_ptr;

	     relation_list.relation_ptr (relation_idx) = relation_ptr;

/* Fill in the list of attributes in this relation. */
	     ai_ptr = ptr (fm_ptr, rel_info.attr_ptr);
	     do attribute_idx = 1 to relation_attribute_count;
		unspec (relation.attribute (attribute_idx).flags) = "0"b;
		relation.attribute.attribute_info_ptr (attribute_idx) = ai_ptr;
		relation.attribute.domain_info_ptr (attribute_idx) = attr_info.domain_ptr;
		relation.attribute_names (attribute_idx) = make_name ((attr_info.name));
		relation.attribute.flags.part_of_key (attribute_idx) = attr_info.key_attr;
		ai_ptr = ptr (fm_ptr, attr_info.fwd_thread);
		end;				/* do attribute_idx */
	     end;					/* relation_idx */

/* Finally, we need to turn on the delete flag for each attribute in each
   referenced relation that is to be deleted. */
	if domain_entry
	then do domain_idx = 1 to domain_list.count;
		attribute_list_ptr = domain_list.attribute_list_ptr (domain_idx);
		call mark_deleted_attributes;
		end;				/* do domain_idx */
	else call mark_deleted_attributes;

/* Return the pointers to the structures we have just generated. */
	Orelation_list_ptr = relation_list_ptr;
	Oattribute_list_ptr = attribute_list_ptr;
	Odomain_list_ptr = domain_list_ptr;

	call error (0, "");
%page;
make_name:
     proc (input_name) returns (char (33));

dcl  input_name char (*) parameter;

	return (OBJECT_HEAD || input_name);
     end make_name;

unmake_name:
     proc (input_name) returns (char (32));

dcl  input_name char (33) parameter;

	return (substr (input_name, 2, 32));
     end unmake_name;
%page;
/* Process the current attribute_list structure: retrieve the attribute
   crossreference record for each attribute (this contains the list of relations
   that the attribute is used within). Search the relation_list structure for
   each relation. If it is not found, add the relation to the end of the
   relation_list. Then place the index of that relation in the attribute
   structure. */

get_relation_names:
     proc;

dcl  attribute_name char (32);
dcl  search_name char (33);
dcl  position fixed bin;

	do attribute_list_idx = 1 to attribute_list.count;
	     attribute_name =unmake_name (attribute_list.name (attribute_list_idx));
	     call mdbm_util_$xref_find_record (local_iocb, ATTRIBUTE_KEY_HEAD,
		attribute_name, crossref_info_record_ptr, max_seg_size,
		error_message, code);
	     if code ^= 0
	     then if code = error_table_$no_record
		then call error (mrds_error_$no_model_attr, attribute_name);
		else call error (code, error_message);

	     if crossref_info_record.count = 0
	     then attribute_list.attribute_ptr (attribute_list_idx) = null;
	     else do;

/* Create the attribute structure. */
		attribute_count = crossref_info_record.count;
		allocate attribute in (user_area) set (attribute_ptr);

/* Each relation in the current crossref_info_record contains the attribute that
   we are processing now. Place the index of each referenced relation (in the
   relation_list structure) in the attribute structure. */
		do attribute_idx = 1 to attribute_count;
		     search_name = substr (crossref_info_record_objects, 1 + (33 * (attribute_idx - 1)), 33);
		     position = index (relation_list_names, search_name);

		     if position = 0
		     then do;			/* add it on the end */
			position, relation_list.count = relation_list.count + 1;
			relation_list.name (position) = search_name;
			end;
		     else position = divide (position, 33, 17, 0) + 1;

		     attribute.relation_idx (attribute_idx) = position;

		     end;				/* do attribute_idx */

		attribute_list.attribute_ptr (attribute_list_idx) = attribute_ptr;
		end;

	     attribute_list.domain_info_ptr (attribute_list_idx) = crossref_info_record.offset;
	     end;					/* do attribute_list_idx */

	return;
     end get_relation_names;
%page;
/*DESCRIPTION
  Take the list pointed to by the current attribute_list_ptr, processing it
  by marking all attributes in the referenced relation to be deleted. */

mark_deleted_attributes:
     proc;

dcl  position fixed bin;
dcl  search_name char (33);

	do attribute_list_idx = 1 to attribute_list.count;
	     attribute_ptr = attribute_list.attribute_ptr (attribute_list_idx);
	     if attribute_ptr ^= null
	     then do;				/* the attribute was referenced in at least a single relation */
		search_name = attribute_list.name (attribute_list_idx);
		do attribute_idx = 1 to attribute.count;
		     relation_ptr = relation_list.relation_ptr (attribute.relation_idx (attribute_idx));
		     position = index (relation_attribute_names, search_name);
		     if position ^= 0
		     then do;			/* found the place, mark the attribute to be deleted */
			position = divide (position, 33, 17, 0) + 1;
			relation.attribute (position).flags.delete = "1"b;
			end;
		     end;				/* do attribute_idx */
		end;
	     end;					/* do attribute_list_idx */

	return;
     end mark_deleted_attributes;
%page;
/*DESCRIPTION
  Error handler and cleanup handler. This is the only way to exit these
  subroutines.
*/

error:
     proc (code, msg);

dcl  code fixed bin (35) parameter;
dcl  msg char (*) parameter;

	Ocode = code;
	Oerror_message = msg;
	goto RETURN_TO_CALLER;
     end error;

RETURN_TO_CALLER:
	call cleaner;
	return;

cleaner:
     proc;

dcl  cleaner_code fixed bin (35);

	if temp_ptrs (1) ^= null
	then call mdbm_util_$free_temp_segments (myname, temp_ptrs, cleaner_code);

	return;
     end cleaner;
%page;
%include access_mode_values;
%include mdbm_db_model;
%include mdbm_file_model;
%include mrds_rmdb_ctl;
%include rmdb_crossref_info;
%include rmdb_delete_object_info;
%page;
dcl  addr builtin;
dcl  area condition;
dcl  attribute_idx fixed bin;
dcl  attribute_list_idx fixed bin;
dcl  cleanup condition;
dcl  code fixed bin (35);
dcl  divide builtin;
dcl  db_path char (168);
dcl  domain_entry bit (1) aligned;
dcl  domain_idx fixed bin;
dcl  error_message char (500);
dcl  error_table_$area_too_small fixed bin (35) ext static;
dcl  error_table_$no_record fixed bin(35) ext static;
dcl fixed builtin;
dcl  Iarea_ptr ptr parameter;
dcl  Idelete_object_info_ptr ptr parameter;
dcl  index builtin;
dcl  initiate_file_ entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
dcl  Irmdb_ctl_ptr ptr parameter;
dcl  local_iocb ptr;				/* -> IOCB for crossref file */
dcl  max_seg_size fixed bin (21);
dcl  mrds_error_$no_model_attr fixed bin(35) ext static;
dcl  mrds_error_$no_model_dom fixed bin(35) ext static;
dcl  myname char (32) int static options (constant) init ("rmdb");
dcl  null builtin;
dcl  Oattribute_list_ptr ptr parameter;
dcl  Ocode fixed bin (35) parameter;
dcl  Odomain_list_ptr ptr parameter;
dcl  Oerror_message char (*) parameter;
dcl  Orelation_list_ptr ptr parameter;
dcl  pathname_ entry (char (*), char (*)) returns (char (168));
dcl  ptr builtin;
dcl  rel builtin;
dcl  relation_idx fixed bin;
dcl  relation_model_name char (32);
dcl  mdbm_util_$get_temp_segments_path entry (char (*), char (*), (*) ptr, fixed bin (35));
dcl  mdbm_util_$free_temp_segments entry (char (*), (*) ptr, fixed bin (35));
dcl  mdbm_util_$xref_find_record entry (ptr, char (*), char (*), ptr, fixed bin (21), char (*), fixed bin (35));
dcl  rtrim builtin;
dcl  substr builtin;
dcl  sys_info$max_seg_size fixed bin (35) ext static;
dcl  temp_ptrs (2) ptr;
dcl  unspec builtin;
dcl  user_area area based (user_area_ptr);
dcl  user_area_ptr ptr;

     end rmdb_relations_used;
