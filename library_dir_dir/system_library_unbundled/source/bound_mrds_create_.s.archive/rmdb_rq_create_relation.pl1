/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-06-16,Blair), approve(86-06-16,MCR7311),
     audit(86-09-15,Gilcrease), install(86-10-16,MR12.0-1187):
     Initialize all the attributes we have room for. Previously the extent was
     set to zero and initialization wasn't happening.
  2) change(86-10-28,Blair), approve(86-10-28,PBF7311), audit(86-11-26,Dupuis),
     install(86-12-09,MR12.0-1237):
     Move the initializing of rmdb_create_rel_info.num_attrs out of the
     attr_list_handler so that it doesn't get wiped out if we have any indices
     to create.
                                                   END HISTORY COMMENTS */


rmdb_rq_create_relation: proc (I_sci_ptr, I_rmdb_ctl_ptr);

/* .		    BEGIN_DESCRIPTION

   This procedure is called from the the rmdb ssu routine

   Its purpose is to process the create_relation request arguments

   Syntax for this request is

   .     relation_name { <rel_attr_list> }
   .                   { -index  <index_attr_list> | -ix  <index_attr_list> }
   .                   { -sel_exp  | -se "mrds_temp_rel_type_selection_exp" }

   rel_attr_list ::=  attr_name_1 attr_name_2 .... attr_name_n

   index_attr_list ::=  rmdb_ix_attr_name_m .... rmdb_ix_attr_name_k

   mrds_temp_rel_type_selection_exp ::= temp_rel like selection expression

   The  rel_attr_list  and  -sel_exp  are exclusive arguments.  The
   attributes  that  are  to  make up the relation primary key must
   have   an   astrisk  appended  to  the  attribute  name  in  the
   rel_attr_list.   The -index maybe used with either and specifies
   which  attributes  are  to  be secondary indices.  The attribute
   names  that appear in the index_attr_list must be defined in the
   rel_attr_list or by the selection_expression.

   Currently only attributes that already exist in the data_model can be used
   to define new relations.

   .		         END_DESCRIPTION

%page;
   HISTORY:
   82-03-11 Written by R. Lackey

   82-06-09 R. Harvey: Stripped out code to handle parentheses.

   82-06-28 Roger Lackey : corrected loop control and check for * on end of 
   attribute name.  other minor changes pointer out in team review.

   82-07-01  Roger Lackey : Modified the calls to mu_db_inconsistent to use
   mdbm_util_$inconsistent_* for binding.

   83-02-07  Mike Kubicar : Changed calling sequence of rmdb_create_relation
   so that it includes a bit which says whether the routine was called from
   request level.  This is necessary since that routine must know whether to
   start transactions and that should only be done from request level.

*/
%page;

/* rmdb_rq_create_relation: proc (I_sci_ptr, I_rmdb_ctl_ptr) */

	dcl     I_rmdb_ctl_ptr	 pointer parameter /* Pointer to restructuring control */;
	dcl     I_sci_ptr		 pointer parameter /* ssu info ptr */;

	sci_ptr = I_sci_ptr;			/* For quicker ref */
	rmdb_ctl_ptr = I_rmdb_ctl_ptr;		/* Pointer to rmdb control structure */

	selection_exp_exists = "0"b;			/* On = -sel_exp was found */
	rel_attr_list_exists = "0"b;			/* On = relation attr list was found */
	index_attr_list_exists = "0"b;		/* On = index attr_list was found */
	rmdb_create_rel_info_ptr = null;		/* Not allocated yet */
	rmdb_ix_attrs_ptr = null;			/* Not allocated yet */
	rmdb_sel_val_info_ptr = null;			/* Not allocated yet */

	if rmdb_ctl.version ^= RMDB_CTL_VERSION_1 then
	     call ssu_$abort_line (sci_ptr, error_table_$unimplemented_version, "rmdb_create_rel_info.incl.pl1");

	if rmdb_ctl.absolute_db_path = "" then
	     call error (error_table_$action_not_performed,
		"^/There is no currently readied data base.");

	on cleanup call tidy_up;			/* Establish a cleanup handler for this procedure */

	call ssu_$arg_count (sci_ptr, nargs);		/* Get number of arguments supplied to me */

	if nargs < 2 then /* Must have rel_name and at least one attribute
						   or -selection_expression */
	     call error (error_table_$wrong_no_of_args, USAGE); /* Tell um how to use it */

	call mdbm_util_$inconsistent_get_info (rmdb_ctl.db_model_ptr, /* See if db is inconsistent */
	     incon_flag, incon_name, unused, undo_request);

	if incon_flag then /* DB is inconsisten */
	     call rmdb_execute_undo (sci_ptr,
		"create_relation", rmdb_ctl.absolute_db_path,
		rmdb_ctl.db_model_ptr, incon_name, undo_request);

	call ssu_$arg_ptr (sci_ptr, 1, arg_ptr, arg_len); /* First arg must be rel name */

	args_used = 1;

	if arg_len > 30				/* Relation names can only be 30 chars long
						   because the relation model name must have a ".m" suffix */
	then call error (mrds_error_$rel_name_too_long, arg);

	if arg_len < 1 then call error (mrds_error_$no_rel_name, "^/Relation name was expected for first argument.");

	else rel_name = arg;			/* Got a good rel_name */

%page;
	do while (args_used < nargs);			/* Process supplied arguments */

	     call ssu_$arg_ptr (sci_ptr, args_used + 1, arg_ptr, arg_len); /* Get next argument */

	     if substr (arg, 1, 1) = "-" then do;	/* Control arg check */

		     if arg = "-ix" | arg = "-index" then do; /* Index attr list should follow */

			     args_used = args_used + 1; /* Just used -index */

			     if index_attr_list_exists then
				call error (error_table_$inconsistent,
				     "^/The -index argument was previously specified.");
			     if args_used < nargs then do;
				     rmdb_ix_attrs_alloc = mrds_data_$max_attributes;
				     allocate rmdb_ix_attrs in (wa) set (rmdb_ix_attrs_ptr);
				     rmdb_ix_attrs.version = RMDB_IX_ATTRS_VERSION_1;
				     rmdb_ix_attrs.relation_name = rel_name;
				     rmdb_ix_attrs.num_used = 0;

				     call attr_list_handler (args_used, INDEX_ATTR_LIST);
				end;

			     else call error (mrds_error_$no_inds,
				     "^/An index attribute list is required following the -index control argument.");

			     index_attr_list_exists = "1"b;
			end; 	                    /* if arg = "-index" then do */

		     else if arg = "-se" | arg = "-sel_exp" then do; /* Selection expression should follow */

			     args_used = args_used + 1;

			     if selection_exp_exists then
				call error (error_table_$inconsistent,
				     "^/The -sel_exp argument was previously specified.");

			     if rel_attr_list_exists then
				call error (error_table_$inconsistent,
				     "^/A relation attribute list cannot be used with the control argument: " || arg);

			     if args_used < nargs then
				call select_exp_handler (args_used);

			     else do;

				     call error (mrds_error_$no_sel_exp,
					"^/A selection expression is required following the -sel_exp control argument.");
				end;

			end;			/* if arg = "-se" */

		     else call error (error_table_$badopt, arg); /*  Bad control arg */

		end;				/* End control arg check */

	     else do;				/* Not a control arg */

		     if args_used = 1 then do;	/* If first argument following rel_name
						   assume it is the relation attribute list */


/*       Allocate and init rmdb_create_rel_info  structure     */

			     rmdb_create_rel_info_alloc = mrds_data_$max_attributes; /* Set max number of attrs
						   in rmdb_create_rel_info */

			     allocate rmdb_create_rel_info in (wa) /* wa is rmdb_ctl.work_area) */
				set (rmdb_create_rel_info_ptr);

			     rmdb_create_rel_info.version = RMDB_CREATE_REL_INFO_VERSION_1;
			     rmdb_create_rel_info.db_path = rmdb_ctl.absolute_db_path;
			     rmdb_create_rel_info.db_model_ptr = rmdb_ctl.db_model_ptr;
			     rmdb_create_rel_info.temp_directory_path = rmdb_ctl.temp_dir_path;
			     rmdb_create_rel_info.relation_name = rel_name;
			     rmdb_create_rel_info.num_attrs = rmdb_create_rel_info_alloc; /* we'll figure out how many actual in a minute */
			     do z = 1 to rmdb_create_rel_info_alloc;
				rmdb_create_rel_info.attrs (*).primary_key = "0"b; /* Turn off all primary_key flags */
				rmdb_create_rel_info.attrs (*).indexed = "0"b; /* Turn off all indexed flags */
			     end;

			     rmdb_create_rel_info.num_attrs = 0;
			     call attr_list_handler (args_used, REL_ATTR_LIST); /* Process attribute list */

			end;			/* Must be rel_attr_list */

		     else call error (error_table_$bad_subr_arg, arg || USAGE);

		end;

	end /* Get rest of arguments */;

	if ^selection_exp_exists then do;		/* Creation was already done for us */

		if rmdb_create_rel_info_ptr = null then
		     call error (mrds_error_$no_rel_attr, "^/" || rel_name);

		if rmdb_create_rel_info.num_attrs < 1 then
		     call error (mrds_error_$no_rel_attr, rmdb_create_rel_info.relation_name);

		if index_attr_list_exists then call index_attr_mark; /* Mark those attrs that are to be indexed */

		call rmdb_create_relation (rmdb_ctl_ptr, rmdb_create_rel_info_ptr, "1"b /* Called at request level */, err_msg, code);
		if code ^= 0 then call error (code, err_msg);

	     end;

	call tidy_up;				/* Free rmdb_create_rel_info structure */

exit:	return;
%page;
/*  * * * * * * * * * * *      attr_list_handler       * * * * * * * * * * * */

attr_list_handler: proc (ag_used, list_type_indicator);	/* Processor for both rel and index attribute list */

	dcl     ag_used		 fixed bin parameter /* (INPUT/OUTPUT) Number of arguments used so far  */;
	dcl     list_type_indicator	 fixed bin parameter /* (INPUT) 1 = relation attr list
						   2 = index attr list */;

/* This internal procedure processes the input string

   attr_1 attr_2 .. .. .. attr_n

   It isolates each attribute in an attribute list for both relation atr_list
   and index attr_list.
*/

	first = "1"b;
	attrs_done = "0"b;
%page;
	do while (ag_used < nargs & ^attrs_done);

	     call ssu_$arg_ptr (sci_ptr, ag_used + 1, arg_ptr, arg_len); /* Get next argument */

	     if substr (arg, 1, 1) = "-" then /* argument is a control arg */
		attrs_done = "1"b;


	     else do;				/* Not a control argument */

		     ag_used = ag_used + 1;		/* Bump number of arguments used */

		     attr_name = arg;

		     if length (attr_name) < 1 then call error (mrds_error_$bad_attr_name,
			     "^/Null attribute name.");

		     if list_type_indicator = REL_ATTR_LIST then do;

			     call relation_attr_add;

			end;
		     else do;			/* Were working on an inde attr list */

			     if length (attr_name) > 32 then call error (mrds_error_$rst_name_too_long,
				     "^/Attribute name is longer then 32 characters: " || attr_name);
			     rmdb_ix_attrs.num_used = rmdb_ix_attrs.num_used + 1;
			     rmdb_ix_attrs.an (rmdb_ix_attrs.num_used) = attr_name;

			end;

		     first = "0"b;			/* First token already processed */
		end;				/* END not a contol arg */
	end /* END do while (ag_used <= nargs | ^attrs_done) */;

     end attr_list_handler;
%page;
/*  * * * * * * * * * * * *   relation_attr_add   * * * * * * * * * * * * * */


relation_attr_add: proc;


	if rmdb_create_rel_info.num_attrs >= mrds_data_$max_attributes then
	     call error (mrds_error_$max_attributes, "");

	rmdb_create_rel_info.num_attrs = rmdb_create_rel_info.num_attrs + 1; /* Got another one */



	if index (reverse (attr_name), "*") = 1 then do;	/* If last char is * it is a primary attribute */

		j = length (attr_name) - 1;		/* Length attr - * */

		attr_name = substr (attr_name, 1, j);	/* Remove the * from name */

		if j < 1 then call error (mrds_error_$bad_attr_name, "*");

		rmdb_create_rel_info.attrs (rmdb_create_rel_info.num_attrs).primary_key = "1"b;

	     end;

	if length (attr_name) > 32 then call error (mrds_error_$rst_name_too_long,
		"^/Attribute name is longer then 32 characters: " || attr_name);

	rmdb_create_rel_info.attrs (rmdb_create_rel_info.num_attrs).name = attr_name;

	rel_attr_list_exists = "1"b;			/* Remember we had a rel_attr_list */

     end relation_attr_add;
%page;
/*  * * * * * * * * * * * *   index_attr_mark   * * * * * * * * * * * * * * */


index_attr_mark: proc;

	do k = 1 to rmdb_ix_attrs.num_used;		/* All indexed attrs */

	     attr_name = rmdb_ix_attrs.an (k);

	     found = "0"b;

	     do j = 1 to rmdb_create_rel_info.num_attrs while (^found); /* Search for name in list */

		if attr_name = rmdb_create_rel_info.attrs (j).name then do;

			if rmdb_create_rel_info.attrs (j).indexed = "1"b then
			     call error (mrds_error_$previously_defined_index, (attr_name));

			rmdb_create_rel_info.attrs (j).indexed = "1"b; /* Mark as indexed */
			found = "1"b;
		     end;

	     end;

	     if ^found then call error (mrds_error_$undef_attr,
		     "^/" || attr_name);

	end;					/* END All indexed attrs */

     end index_attr_mark;
%page;
/*  * * * * * * * * * * * *   select_exp_handler   * * * * * * * * * * * * * */

select_exp_handler: proc (args_used_count);

	dcl     args_used_count	 fixed bin parameter;

	selection_exp_exists = "1"b;

	call ssu_$arg_ptr (sci_ptr, args_used_count + 1, sel_exp_ptr, sel_exp_len); /* Get selection expression */
	args_used_count = args_used_count + 1;

/* Check any other args for control argument (they are not allowed following the selection exp) */

	do z = args_used_count + 1 to nargs;

	     call ssu_$arg_ptr (sci_ptr, z, arg_ptr, arg_len); /* Get next arg */
	     if substr (arg, 1, 1) = "-" then call
		     error (error_table_$bad_arg, "^/" || arg ||
		     "^/No control arguments are allowed after the select expression.");
	end;
%page;
/* rmdb_sel_val_info is required by rmdb_create_and_pop_rel even if no sel_vals are provided */

	allocate rmdb_sel_val_info in (wa) set (rmdb_sel_val_info_ptr);
	rmdb_sel_val_info.version = RMDB_SEL_VAL_INFO_VERSION_1;
	rmdb_sel_val_info.sv_num = 0;
	rmdb_sel_val_info.data_list_ptr = null;
	rmdb_sel_val_info.desc_list_ptr = null;

	if nargs > args_used_count then do;		/* Must have provided some sel_values */

		call ssu_$arg_list_ptr (sci_ptr, al_ptr); /* Get the argument list */
		rmdb_sel_val_info.data_list_ptr =
		     addr (al_ptr -> arg_list.arg_ptrs (args_used_count + 1)); /* Pointer list of data pointers */
		rmdb_sel_val_info.desc_list_ptr =
		     addr (al_ptr -> arg_list.desc_ptrs (args_used_count + 1)); /* Pointer to list of
						   select_value descriptors */
		rmdb_sel_val_info.sv_num = nargs - args_used_count;
	     end;

	if rmdb_ix_attrs_ptr = null then do;		/*  If no -index was supplied */
		rmdb_ix_attrs_alloc = 0;		/* Got to have this
						   to pass rel_name to rmdb_create_and_pop_rel */
		allocate rmdb_ix_attrs in (wa) set (rmdb_ix_attrs_ptr);
		rmdb_ix_attrs.version = RMDB_IX_ATTRS_VERSION_1;
		rmdb_ix_attrs.relation_name = rel_name;
		rmdb_ix_attrs.num_used = 0;
	     end;

	call rmdb_create_and_pop_rel (rmdb_ctl_ptr, rmdb_ctl.absolute_db_path,
	     rmdb_ctl.temp_dir_path, sel_exp, rmdb_sel_val_info_ptr,
	     rmdb_ix_attrs_ptr, err_msg, code);
	if code ^= 0 then do;

		added_args = "";
		do z = args_used_count + 1 to nargs;

		     call ssu_$arg_ptr (sci_ptr, z, arg_ptr, arg_len); /* Get next arg */
		     added_args = added_args || " " || arg;
		end;

		err_msg = rtrim (err_msg) || added_args;

		call error (code, err_msg);
	     end;					/* END if code ^= 0 */

	args_used_count = nargs;			/* So we won't look for any more arguments */

     end select_exp_handler;
%page;
/*  * * * * * * * * * * * *       error       * * * * * * * * * * * * * */

error: proc (err_code, err_message);			/* Error procedure for rmdb_create_relation.pl1 */

	dcl     err_code		 fixed bin (35) parameter;
	dcl     err_message		 char (*) parameter;
	dcl     ssu_$abort_line	 entry () options (variable);

	call tidy_up;

	call ssu_$abort_line (sci_ptr, err_code, err_message);

     end error;











/*  * * * * * * * * * * * *       tidy_up       * * * * * * * * * * * * * */

tidy_up: proc;

	if rmdb_create_rel_info_ptr ^= null then
	     free rmdb_create_rel_info;

	if rmdb_ix_attrs_ptr ^= null then free rmdb_ix_attrs;

	if rmdb_sel_val_info_ptr ^= null then free rmdb_sel_val_info;

     end tidy_up;
%page;
	dcl     added_args		 char (100) varying;
	dcl     addr		 builtin;
	dcl     al_ptr		 ptr;
	dcl     arg		 char (arg_len) based (arg_ptr);
	dcl     args_used		 fixed bin;
	dcl     arg_len		 fixed bin (21);
	dcl     arg_ptr		 ptr;
	dcl     attrs_done		 bit (1);
	dcl     attr_name		 char (64) varying;
	dcl     cleanup		 condition;
	dcl     code		 fixed bin (35);
	dcl     error_table_$action_not_performed fixed bin (35) ext static;
	dcl     error_table_$badopt	 fixed bin (35) ext static;
	dcl     error_table_$bad_arg	 fixed bin (35) ext static;
	dcl     error_table_$bad_subr_arg fixed bin (35) ext static;
	dcl     error_table_$inconsistent fixed bin (35) ext static;
	dcl     error_table_$unimplemented_version fixed bin (35) ext static;
	dcl     error_table_$wrong_no_of_args fixed bin (35) ext static;
	dcl     err_msg		 char (256);
	dcl     first		 bit (1);
	dcl     found		 bit (1);
	dcl     incon_flag		 bit (1);
	dcl     incon_name		 char (32);
	dcl     index		 builtin;
	dcl     INDEX_ATTR_LIST	 fixed bin int static options (constant) init (2);
	dcl     index_attr_list_exists bit (1);
	dcl     j			 fixed bin;
	dcl     k			 fixed bin;
	dcl     length		 builtin;
	dcl     mrds_data_$max_attributes fixed bin (35) init (256);
	dcl     mrds_error_$bad_attr_name fixed bin (35) ext static;
	dcl     mrds_error_$max_attributes fixed bin (35) ext static;
	dcl     mrds_error_$no_inds	 fixed bin (35) ext static;
	dcl     mrds_error_$no_rel_attr fixed bin (35) ext static;
	dcl     mrds_error_$no_rel_name fixed bin (35) ext static;
	dcl     mrds_error_$no_sel_exp fixed bin (35) ext static;
	dcl     mrds_error_$previously_defined_index fixed bin (35) ext static;
	dcl     mrds_error_$rel_name_too_long fixed bin (35) ext static;
	dcl     mrds_error_$rst_name_too_long fixed bin (35) ext static;
	dcl     mrds_error_$undef_attr fixed bin (35) ext static;
	dcl     mdbm_util_$inconsistent_get_info entry (ptr, bit (1), char (*), char (*), char (*));
	dcl     nargs		 fixed bin;
	dcl     null		 builtin;
	dcl     REL_ATTR_LIST	 fixed bin int static options (constant) init (1);
	dcl     rel_attr_list_exists	 bit (1);
	dcl     rel_name		 char (32) varying;
	dcl     reverse		 builtin;
	dcl     rmdb_create_and_pop_rel entry (ptr, char (*), char (*), char (*), ptr, ptr, char (*), fixed bin (35));
	dcl     rmdb_create_relation	 entry (ptr, ptr, bit (1), char (*), fixed bin (35));
	dcl     rmdb_execute_undo	 entry (ptr, char (32), char (168), ptr, char (32), char (100));
	dcl     rtrim		 builtin;
	dcl     sci_ptr		 ptr;
	dcl     selection_exp_exists	 bit (1);
	dcl     sel_exp		 char (sel_exp_len) based (sel_exp_ptr);
	dcl     sel_exp_len		 fixed bin (21);
	dcl     sel_exp_ptr		 ptr;
	dcl     ssu_$abort_line	 entry () options (variable);
	dcl     ssu_$arg_count	 entry (ptr, fixed bin);
	dcl     ssu_$arg_list_ptr	 entry (ptr, ptr);
	dcl     ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21));
	dcl     substr		 builtin;
	dcl     sys_info$max_seg_size	 fixed bin (35) ext static;
	dcl     undo_request	 char (100);
	dcl     unused		 char (32);
	dcl     USAGE		 char (120) int static options (constant) init ("^/Usage: create_relation  relation_name {attribute_list}^/^7x{-index attribute_list}  {-sel_exp  SEL_EXP}");
	dcl     wa		 area (sys_info$max_seg_size) based (rmdb_ctl.work_area_ptr);
	dcl     z			 fixed bin;

%page;
%include mrds_rmdb_ctl;
%page;
%include rmdb_create_rel_info;
%page;
%include arg_list;

     end rmdb_rq_create_relation;
