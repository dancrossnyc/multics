/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* HISTORY:

   originally written by jim gray - - February 1979

   82-06-28 Roger Lackey: Removed code for struct type 52 thru 58
   chnaged the way type 25 was handled since no longer used.

*/

mrds_rst_rsc_alloc: procedure (rsc_ptr, struct_type, struct_ptr);

/*
   .                        BEGIN_DESCRIPTION
   this routine does all allocations in working storage known as "rsc"
   for restructure control. modules that create, modify, or display
   the mrds database model all use this working storage, which is structured
   as a directory with a common segment, and several segments acting as
   extensible areas. allocations are made in the segments according to
   type of structure and the policy as defined by the logic of this module.
   two additional entries are $variable, and $free for variable
   length allocations, and freeing of previously allocated space.
   .                        END_DESCRIPTION
*/

/* PARAMETERS:

   normal entry ===
   rsc_ptr - - (input) pointer to the common segment under the working
   storage directory created under the user specified directory

   struct_type - - (input) fixed binary number that indicates which structure
   is to be allocated, and according to the internal policy, where it will be allocated
   as well. the include file mrds_rst_struct_types.incl.pl1 gives the constants
   that are used for this purpose.

   struct_ptr - - (output) pointer to the newly allocated structure of the type
   given by struct_type.

   $variable entry ===
   struct_size - - (input) a fixed binary (35) number, in addition to those above,
   that gives the length for the current allocation of this
   structure type that has a variable length.

   $free entry ===
   same as the normal entry, except struct_ptr is an input parameter,
   and it points to the allocation instance to be freed
*/
%page;
/* normal allocation entry point */

	FREE = OFF;
	goto common;


/* freeing entry point */

mrds_rst_rsc_alloc$free: entry (rsc_ptr, struct_type, struct_ptr);

	FREE = ON;

/* determine if we are freeing a variable length allocation */

	if struct_type <= hbound (case, 1) then
	     goto common;
	else goto var_common;


common:

	if ^rsc.trace_sw then ;
	else call trace (ON);			/* input call */
%page;
/* check that the encoding for structure type is within the legal range */

	if struct_type < lbound (case, 1) | struct_type > hbound (case, 1) then
	     call bad_struct_code ();

	else do;

/* good structure type code, go to the allocate that it indicates for the
   given structure to be allocated, and the area in which it will reside */

		goto case (struct_type);

/* parse info structures */

case (1):

		if FREE then
		     free struct_ptr -> domain in (parse_info_area);
		else allocate domain set (struct_ptr) in (parse_info_area);
		goto return_label;

case (2):

		if FREE then
		     free struct_ptr -> attribute_domain in (parse_info_area);
		else allocate attribute_domain set (struct_ptr) in (parse_info_area);
		goto return_label;

case (3):

		if FREE then
		     free struct_ptr -> relation in (parse_info_area);
		else allocate relation set (struct_ptr) in (parse_info_area);
		goto return_label;

case (4):

		if FREE then
		     free struct_ptr -> attribute in (parse_info_area);
		else allocate attribute set (struct_ptr) in (parse_info_area);
		goto return_label;

case (5):

		if FREE then
		     free struct_ptr -> file in (parse_info_area);
		else allocate file set (struct_ptr) in (parse_info_area);
		goto return_label;

case (6):

		if FREE then
		     free struct_ptr -> item in (parse_info_area);
		else allocate item set (struct_ptr) in (parse_info_area);
		goto return_label;

case (7):

		if FREE then
		     free struct_ptr -> link in (parse_info_area);
		else allocate link set (struct_ptr) in (parse_info_area);
		goto return_label;

case (8):

		if FREE then
		     free struct_ptr -> foreign_key in (parse_info_area);
		else allocate foreign_key set (struct_ptr) in (parse_info_area);
		goto return_label;

case (9):

		if FREE then
		     free struct_ptr -> children in (parse_info_area);
		else allocate children set (struct_ptr) in (parse_info_area);
		goto return_label;

case (10):

		if FREE then
		     free struct_ptr -> rel_index in (parse_info_area);
		else allocate rel_index set (struct_ptr) in (parse_info_area);
		goto return_label;

case (11):

		if FREE then
		     free struct_ptr -> delete_name in (parse_info_area);
		else allocate delete_name set (struct_ptr) in (parse_info_area);
		goto return_label;

case (12):

		if FREE then
		     free struct_ptr -> dom_list in (parse_info_area);
		else allocate dom_list set (struct_ptr) in (parse_info_area);
		goto return_label;
%page;
/* semantic structures */

case (13):

		if FREE then
		     free struct_ptr -> directive in (static_info_area);
		else allocate directive set (struct_ptr) in (static_info_area);
		goto return_label;

case (14):

		if FREE then
		     free struct_ptr -> stmt in (static_info_area);
		else allocate stmt set (struct_ptr) in (static_info_area);
		goto return_label;

/* parsing structures */

case (15):

		if FREE then
		     free struct_ptr -> lex_stack in (static_info_area);
		else allocate lex_stack set (struct_ptr) in (static_info_area);
		goto return_label;

case (16):

		if FREE then
		     free struct_ptr -> p_struct in (static_info_area);
		else allocate p_struct set (struct_ptr) in (static_info_area);
		goto return_label;

case (17):

		if FREE then
		     free struct_ptr -> cur_lex_top in (static_info_area);
		else allocate cur_lex_top set (struct_ptr) in (static_info_area);
		goto return_label;

case (18):

		if FREE then
		     free struct_ptr -> token in (static_info_area);
		else allocate token set (struct_ptr) in (static_info_area);
		goto return_label;

case (19):

		if FREE then
		     free struct_ptr -> output_text in (static_info_area);
		else allocate output_text set (struct_ptr) in (static_info_area);
		goto return_label;
%page;
/* global list structures */

case (20):

		if FREE then
		     free struct_ptr -> gl in (global_list_area);
		else allocate gl set (struct_ptr) in (global_list_area);
		goto return_label;

case (21):

		if FREE then
		     free struct_ptr -> sl in (sublist_area);
		else allocate sl set (struct_ptr) in (sublist_area);
		goto return_label;

case (22):

		if FREE then
		     free struct_ptr -> seg_info in (seg_info_area);
		else allocate seg_info set (struct_ptr) in (seg_info_area);
		goto return_label;

case (23):

		if FREE then
		     free struct_ptr -> node in (tree_node_area);
		else allocate node set (struct_ptr) in (tree_node_area);
		goto return_label;
%page;
/* other structures */

case (24):

		if FREE then
		     free struct_ptr -> saved_child_count in (other_area);
		else allocate saved_child_count set (struct_ptr) in (other_area);
		goto return_label;

case (25):

		if FREE then
		     call bad_struct_code ();		/* No longer implemented */
		else call bad_struct_code ();		/* No longer implemented */
		goto return_label;


	     end;
%page;
mrds_rst_rsc_alloc$variable: entry (rsc_ptr, struct_type, struct_size, struct_ptr);

/* entry to handle structures whose length is variable */

	FREE = OFF;

var_common:

	if ^rsc.trace_sw then ;
	else call trace (ON);			/* input call */

	if struct_type < lbound (var_case, 1) | struct_type > hbound (var_case, 1) then
	     call bad_struct_code ();
	else if struct_size < 1 then
	     call bad_struct_size ();


/* good encoding and size given, go allocate the given structure
   with the specified size, and place it according to area policy */

	else do;

		goto var_case (struct_type);

var_case (50):

		if FREE then
		     free struct_ptr -> fixup_token in (variable_length_area);
		else do;
			token_length = struct_size;
			allocate fixup_token set (struct_ptr) in (variable_length_area);
		     end;
		goto return_label;

var_case (51):

		if FREE then
		     free struct_ptr -> string_source in (variable_length_area);
		else do;
			source_size = struct_size;
			allocate string_source set (struct_ptr) in (variable_length_area);
		     end;
		goto return_label;

	     end;
%page;
return_label:

	if ^rsc.trace_sw then ;
	else call trace (OFF);			/* output call */


	return;
%page;
bad_struct_code: procedure ();

/* report bad structure type encoding error */

	call ioa_$rs ("^a ^d ^a", message, message_length,
	     "LOGIC ERROR in mrds_rst_rsc_alloc,", struct_type, "is an invalid code for structure type.");
	call mrds_rst_error (rsc_ptr, 4 /* severity */, mrds_error_$rst_logic_error, (message));

     end;
%page;
bad_struct_size: procedure ();

/* report bad structure allocation size */

	call ioa_$rs ("^a ^d ^a", message, message_length,
	     "LOGIC ERROR in mrds_rst_rsc_alloc,", struct_size, "is an illegal structure allocation size.");
	call mrds_rst_error (rsc_ptr, 4 /* severity */, mrds_error_$rst_logic_error, (message));


     end;
%page;
trace: procedure (in_out);

/* common call to the metering routine */

	struct_type_picture = struct_type;
	call mrds_rst_meter (rsc_ptr, "mrds_rst_rsc_alloc", in_out, (struct_type_picture));

	dcl     in_out		 bit (1);		/* on => input, off => output call */
	dcl     struct_type_picture	 picture "99";	/* for integer to char conversion */

     end;
%page;

	dcl     mrds_rst_meter	 entry (ptr, char (*), bit (1), char (*)); /* trace routine */
	dcl     parse_info_area	 area based (rsc.parse_info_area_ptr); /* location for parsing structures */
	dcl     seg_info_area	 area based (rsc.tree_data.seg_info_area_ptr); /* segment list location */
	dcl     global_list_area	 area based (rsc.tree_data.gl_area_ptr); /* global element location */
	dcl     sublist_area	 area based (rsc.tree_data.sl_area_ptr); /* sub list element location */
	dcl     tree_node_area	 area based (rsc.tree_node_area_ptr); /* location of tree head portion */
	dcl     static_info_area	 area based (rsc.static_info_area_ptr); /* static type info location */
	dcl     variable_length_area	 area based (rsc.variable_length_area_ptr); /* location for variable length allocations */
	dcl     other_area		 area based (rsc.other_area_ptr); /* all other information */
	dcl     struct_type		 fixed bin;	/* number corresponding to structure to be allocated */
	dcl     struct_size		 fixed bin (35);	/* number of words to allocate for varying types */
	dcl     struct_ptr		 ptr;		/* pointer to allocated structure */
	dcl     mrds_rst_error	 entry (ptr, fixed bin, fixed bin (35), char (*)); /* general error routine */
	dcl     ioa_$rs		 entry options (variable); /* string manipulator routine */
	dcl     FREE		 bit (1);		/* on => free structure, off => allocate */
	dcl     ON		 bit (1) internal static options (constant) init ("1"b); /* true value */
	dcl     OFF		 bit (1) internal static options (constant) init ("0"b); /* false value */
	dcl     mrds_error_$rst_logic_error fixed bin (35) external; /* bad program */
	dcl     message		 char (96) varying; /* returned formatted specifics of error */
	dcl     message_length	 fixed bin (21);	/* length of returned message */
	dcl     sys_info$max_seg_size	 fixed bin (35) external; /* max system segment length */
	dcl     (addr, lbound, hbound, rel, fixed) builtin;
%page;
%include mrds_rst_struct_types;
%page;
%include mrds_rst_tree;
%page;
%include mrds_rst_rsc;
%page;
%include mrds_rst_global_lists;
%page;
%include mrds_rst_parse_info;
%page;
%include mrds_dm_display_info;
%page;
%include mrds_rst_semantics;
%page;
%include mrds_rst_scan;
%page;
%include mrds_rst_parse_stack;
%page;
%include mdbm_db_model;

     end;
