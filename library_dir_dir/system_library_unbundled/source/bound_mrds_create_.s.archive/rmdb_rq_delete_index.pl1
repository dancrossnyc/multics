/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
rmdb_rq_delete_index: proc (sci_ptr, info_ptr);

/*
   .                       BEGIN_DESCRIPTION
   This  procedure  implements  the  delete_index  request  of   the
   restructure_mrds_db  subsystem.  It  verifies  that  the  correct
   number of arguments have been supplied and that a data  base  has
   been  readied  for  restructuring.  It  does  not verify that the
   arguments supplied are actually a relation and attribute  in  the
   database,  that  is left to the rmdb_delete_index procedure which
   is called to do the actual index deletion.

   If the database is inconsistent rmdb_execute_undo  is  called  to
   query the user and execute the request.
   .                       END_DESCRIPTION
   
   .                       BEGIN_INFO
   .05/20/82  delete_index, dli
   .
   .Syntax:  dli relation_name  attribute_name {-control_args}
   .
   .
   .Function:  Removes  the  secondary  index  for  the  attribute  in  the
   .              relation.
   .
   .
   .Arguments:
   .
   .relation_name
   .   Name of the relation to be restructured.
   .
   .attribute_name
   .   Name of the attribute whose secondary  index  is  to  be  deleted.
   .
   .
   .Control Arguments:
   .
   .brief, fc
   .   Will suppress error reporting if the  attribute  is  not  already  a
   .   secondary index.
   .
   .long, lg
   .   Will report an error if the attribute is  not  already  a  secondary
   .   index
   .
   .
   .Notes:
   .
   .   This request may be run only against a consistent database.  If  the
   .   database  is  inconsistent  the  user  will  be queried to see if he
   .   wishes to execute the "undo request", this  request  will  make  the
   .   database  consistent.  After  the undo request has been executed the
   .   requested index will be deleted. If the undo request fails the  user
   .   will  be  returned  to  rmdb  request  level - the index will not be
   .   deleted, in addition the database will be freed.
   .                       END_INFO
   
   Known Bugs:

   Other Problems:

   .                       HISTORY
   82-05-17 Davids: Written

   82-05-26 Davids: Added call to rmdb_execute_undo for inconsistent
   .                database and added rmdb_ctl.db_model.ptr to  the
   .                calling sequence of rmdb_delete_index.

   82-07-01  Roger Lackey : Modified the calls to mu_db_inconsistent to use
   mdbm_util_$inconsistent_* for binding.
*/

/* PARAMETERS */

	dcl     sci_ptr		 ptr;		/* (input) pointer to the subsystem control info structure */
						/*         need to be able to pass it to the ssu routines */
	dcl     info_ptr		 ptr;		/* (input) pointer to the rmdb_ctl structure which is */
						/*         read only */

/* EXTERNAL STATIC */

	dcl     error_table_$action_not_performed fixed bin (35) external static;
	dcl     error_table_$badcall	 fixed bin (35) external static;

/* ENTRIES */

	dcl     mdbm_util_$inconsistent_get_info entry (ptr, bit (1), char (*), char (*), char (*));
	dcl     mdbm_util_$inconsistent_reset entry (ptr);
	dcl     ssu_$abort_line	 entry options (variable);
	dcl     ssu_$arg_count	 entry (ptr, fixed bin);
	dcl     ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21));
	dcl     ssu_$print_message	 entry () options (variable);
	dcl     rmdb_delete_index	 entry (ptr, char (168), ptr, char (*), char (*), bit (1), char (500), fixed bin (35));
	dcl     rmdb_execute_undo	 entry (ptr, char (32), char (168), ptr, char (32), char (100));

/* INTERNAL AUTOMATIC */

	dcl     attr_name_len	 fixed bin (21);	/* length of the attribute name argument */
	dcl     attr_name_ptr	 ptr;		/* pointer to the attribute name argument */

	dcl     code		 fixed bin (35);	/* standard error code */

	dcl     ctl_arg_error	 bit (1);		/* true ==> at least one of the control arguments was in error */
	dcl     ctl_arg_len		 fixed bin (21);	/* length of a control argument */
	dcl     ctl_arg_ptr		 ptr;		/* pointer to a control argument */

	dcl     error_message	 char (500);	/* error message returned from rmdb_delete_index */

	dcl     brief_flag		 bit (1);		/* true ==> last control arg had value of -fc or -brief */

	dcl     i			 fixed bin;	/* loop counter for control argument processing */

	dcl     incon_value		 bit (1);		/* true ==> database is inconsistent */
	dcl     incon_name		 char (32);	/* name of request that caused the db to become inconsistent */

	dcl     nargs		 fixed bin;	/* number of arguments the request was called with */

	dcl     rel_name_len	 fixed bin (21);	/* length of the relation name argument */
	dcl     rel_name_ptr	 ptr;		/* pointer to the relation name argument */

	dcl     rest_of_undo_request	 char (100);	/* copy of undo request with request, rel, attr names removed */

	dcl     this_is_the_undo_request bit (1);	/* true ==> the user typed in the undo request */

	dcl     undo_attr_name	 char (32) varying; /* name of the attribute in the undo request */
	dcl     undo_rel_name	 char (32) varying; /* name of the relation in the undo request */
	dcl     undo_request	 char (100);	/* rmdb request that will make the db consistent again */
	dcl     undo_request_name	 char (32) varying; /* name of the undo request */

	dcl     unused1		 char (200);	/* unused output parameter from mdbm_util_$inconsistent_get_info */

/* BASED */

	dcl     attr_name		 char (attr_name_len) based (attr_name_ptr); /* name of attribute to be indexed */
	dcl     ctl_arg		 char (ctl_arg_len) based (ctl_arg_ptr); /* control argument */
	dcl     rel_name		 char (rel_name_len) based (rel_name_ptr); /* name of relation which contains the attribute */

/* BUILTINS */

	dcl     after		 builtin;
	dcl     before		 builtin;

/* INCLUDES */
%page;
%include mrds_rmdb_ctl;

/*
   Assign initial values
*/

	rmdb_ctl_ptr = info_ptr;
	brief_flag = "0"b;
	ctl_arg_error = "0"b;
	this_is_the_undo_request = "0"b;




/*
   Determine the number of arguments that this  request  was  called
   with.  At least two  arguments  are  required,  the  relation  name and the
   attribute name there may also be any number of control arguments
   which may be either brief or long.

   If at least two arguments are not supplied issue an  error.  Note
   that abort line does not return.
*/

	call ssu_$arg_count (sci_ptr, nargs);
	if nargs < 2
	then call ssu_$abort_line (sci_ptr, error_table_$badcall,
		"^/Usage:^/^-delete_index relation_name attribute_name {-brief | -long}^/");





/*
   If the absolute_db_path element of the rmdb_ctl structure is null
   it   means   that   no   data   base  is  currently  readied  for
   restructuring. This is an error.
*/

	if rmdb_ctl.absolute_db_path = ""
	then call ssu_$abort_line (sci_ptr, error_table_$action_not_performed,
		"^/There is no currently readied database");

/*
   Get the relation and attribute name  arguments  and  the  control
   arguments.  All control arguments will be looked at, any that are
   in error will be reported. If an incorrect control arg  is  found
   then  the  request will be aborted (along with any other requests
   on the command line) after all the control  arguments  have  been
   looked at.
*/

	call ssu_$arg_ptr (sci_ptr, 1, rel_name_ptr, rel_name_len);
	call ssu_$arg_ptr (sci_ptr, 2, attr_name_ptr, attr_name_len);

	do i = 3 to nargs;
	     call ssu_$arg_ptr (sci_ptr, i, ctl_arg_ptr, ctl_arg_len);
	     if ctl_arg = "-brief" | ctl_arg = "-bf"
	     then brief_flag = "1"b;
	     else
		if ctl_arg = "-long" | ctl_arg = "-lg"
	     then brief_flag = "0"b;
	     else do;
		     ctl_arg_error = "1"b;
		     call ssu_$print_message (sci_ptr, error_table_$badcall,
			"^/Argument ^i (^a) is not a legal control argument^/",
			i, ctl_arg);
		end;
	end;

	if ctl_arg_error
	then call ssu_$abort_line (sci_ptr, 0);

/*
   If the database is inconsistent then only the undo request may be
   executed. Since it is possible that the user typed  in  the  undo
   request himself it must be parsed and compared with what the user
   typed in. If the two are different rmdb_execute_undo is called to
   query the user and execute the request. If the user typed in  the
   request himself it will be executed and then the database will be
   marked as consistent. Note that if rmdb_execute_undo returns then
   the database is consistent and the index deletion can take place.
*/

	call mdbm_util_$inconsistent_get_info (rmdb_ctl.db_model_ptr, incon_value, incon_name, unused1, undo_request);
	if incon_value
	then do;
		undo_request_name = before (undo_request, " ");
		rest_of_undo_request = after (undo_request, " ");
		undo_rel_name = before (rest_of_undo_request, " ");
		rest_of_undo_request = after (rest_of_undo_request, " ");
		undo_attr_name = before (rest_of_undo_request, " ");
		if undo_request_name = "delete_index" &
		     undo_rel_name = rel_name &
		     undo_attr_name = attr_name
		then this_is_the_undo_request = "1"b;
		else call rmdb_execute_undo (sci_ptr, "delete_index", rmdb_ctl.absolute_db_path,
			rmdb_ctl.db_model_ptr, incon_name, undo_request);
	     end;





/*
   Do the actual index creation
*/

	call rmdb_delete_index (rmdb_ctl_ptr, rmdb_ctl.absolute_db_path, rmdb_ctl.db_model_ptr, rel_name, attr_name, brief_flag,
	     error_message, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code, error_message);









/*
   If we are executing the undo request directly the  database  must
   now be marked as consistent.
*/

	if this_is_the_undo_request
	then call mdbm_util_$inconsistent_reset (rmdb_ctl.db_model_ptr);






	return;


     end rmdb_rq_delete_index;
