/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(85-11-17,Dupuis), approve(85-12-16,MCR7314),
     audit(86-02-04,Brunelle), install(86-02-05,MR12.0-1013):
     This entry is being made to cover the change made on 85-05-06 by Thanh
     Nguyen. (see mrds #136)
                                                   END HISTORY COMMENTS */


rmdb_create_index: proc (rci_rmdb_ctl_ptr, rci_db_abs_path, rci_db_model_ptr, rci_rel_name, rci_attr_name, rci_error_message, rci_code);

/*
                           BEGIN_DESCRIPTION
   This module will change a non-indexed  attribute  in  a  relation
   into an indexed attribute.

   This process involves both updating the structures in  the  model
   and writing the new index.

   An  attempt  has   been   made   to   make   certain   operations
   uninterruptable  by the user. These operations are the updates to
   the data model (including marking the data base as  inconsistent)
   and the addition of  a   new index. To do this any quits signaled
   by the  user  are  delayed  until  the  operations  are  complete.


   NOTE:
         Naming convention: because of the number of  internal  routines
         and the need for descriptive names, variables declared  in  all
         routines  (including the main entry) have prefixes that are the
         initials  of  the  routine  name.  Global  variables   can   be
         identified since they have a prefix different from that derived
         from the routine name. Variables with the same name except  for
         the  prefix mean the same thing. Variables without a prefix are
         external to the module,  i.e.  entry  names,  external  static,
         builtins,  conditions, etc. These variables are declared in the
         main routine.
   
         In order to reduce the complexity of this module, none  of  the
         internal  routines  have  an error code parameter. Instead they
         set a global error code declared in the main routine, call  the
         clean_up  routine,  and  perform  a non-local goto to leave the
         module.
                          END_DESCRIPTION

   Known Bugs:

   Other Problems:

                          HISTORY
   82-04-23 Davids: Written

   82-04-29 Davids: changed   to   use   the  new  calling   sequence  of
                    mu_db_inconsistent also changed the  output  messages
                    and  comments  to  reflect  that amdb will NOT have a
                    -consistent control arg.
    
                    changed cleanup routine so that calls to  iox_$detach
                    and  iox_$destroy are always made even if the call to
                    iox_close fails, this is because the  iocb  could  be
                    attached but not open.
   
   82-04-30 Davids: changed to use the $set entry  in  mu_db_inconsistent
                    which  is  still  the main entry but more discriptive
                    also added the " -brief"  control  arg  on  the  undo
                    request and added the call to iox_$control "start" to
                    the cleanup handler.

   82-05-07 Davids: added    code    to    signal    quit    after    the
                    exit_rmdb_create_index label so that  if  the  caller
                    hits  quit and then an error occurs the quit does not
                    get  lost  because  the  error  handling  code  calls
                    cleanup   and   then   does   a   non-local  goto  to
                    exit_rmdb_create_index.

   82-05-25 Davids: added rci_db_model_ptr  parameter  and  removed  code
                    that used toget the pointer.

   82-06-24 Davids: removed   declared   but   unreferenced    variables,
                    reformated  lines  to  prevent  wrap-around.  changed
                    -force to -brief in the undo request.

   82-07-01  Roger Lackey : Modified the calls to  mu_db_inconsistent  to
	                  use mdbm_util_$inconsistent_* for binding.

   82-07-02 R. Harvey : Modified the calls to mu_data_length, mu_data_class$*,
	              mu_encd_key$*, mu_scan_records$* for binding

   82-07-20 Davids: corrected  the way that the tuple_id was built in the
                    get_a_tuple procedure, it was taking the first 7 bits
                    from the  file_id , it  was supposed to be taking the 
                    last 7. 

   82-08-20 D. Woodka : deleted references to mdbm_tuple_id  include file
	              for DMS conversion.

   82-09-15 D. Woodka : Modified for DMS Conversion: removed references
	              to tuples and modified the module to call 
	              rmdb_relmgr_entries.open and
	              rmdb_relmgr_entries.create_index

   83-01-06 Davids: Modified the internal procedure get_attribute_data to
   no longer calculate the new_index_id and to no longer check the
   rel_info.max_attr_index_id to be sure its < 512 which was needed to be 
   sure that the newly calculated value would fit in the 8-bit field.
   The relation manager will be suppling the new index_id. Also modified
   the internal proc update_model to null the attr_info.index_id and set
   rel_info.max_attr_index_id to 512. The index_id must be nulled so that
   when the vfile relation manager looks at the model it knows that the field
   is not an index yet. The value of max_attr_index_id is set to 512 to keep
   MR10.1 rmdb from working since once MR10.2 rmdb is used the way that
   MR10.1 rmdb calcualted the index id cannot be guarenteeded to produce an
   index_id that MR10.2 rmdb did not already use.

   Added code to handle transactions.

   83-01-14 Davids: Modified code to report error in transaction finishing and
   to correctly handle reporting errors in the clean_up procedure.

   83-02-14 Davids: modified to use the new db_type_flags in the db_model
   structure instead of the old numeric db_type.

   83-05-24 Davids: Added code to change the version of the saved resultant
   so that it will not be incorrectly used in an opening.
*/
%page;
/* PARAMETERS */

	dcl     rci_db_abs_path	 char (168);	/* (input) path to the data base to be restructured */
	dcl     rci_db_model_ptr	 ptr;		/* (input) pointer to the db_model for the database */
	dcl     rci_rel_name	 char (*);	/* (input) name of relation to be restructured */
	dcl     rci_attr_name	 char (*);	/* (input) name of attribute to be indexed */
	dcl     rci_error_message	 char (500);	/* (output) text of message in the event of an error */
	dcl     rci_code		 fixed bin (35);	/* (output) standard error message */

/* AUTOMATIC */

	dcl     rci_attr_defn_order	 fixed bin;
	dcl     rci_attr_desc	 bit (36);	/* standard multics descriptor of the attribute to be indexed */
	dcl     rci_attr_ptr	 ptr;		/* pointer to the attr_info structure */
	dcl     rci_backout_occured	 bit (1);		/* true if restore_significant_data has been called */
	dcl     rci_caller_name	 char (17);	/* for call to get_temp_segment_ */
	dcl     rci_file_id		 bit (36);	/* id of the file as defined in the database model */
	dcl     rci_file_model_ptr	 ptr;		/* pointer to the file model that contains the relation */
	dcl     rci_flag_list	 bit (36) aligned;	/* flag structure for create_index */
	dcl     rci_max_data_length	 fixed bin;	/* maximum number of bits of data a tuple may have, if tuple */
						/* contains varying data the actual number may be less */
	dcl     rci_number_of_attrs	 fixed bin;	/* number of attributes in the relation */
	dcl     rci_number_of_varying_attrs fixed bin;	/* number of varying attributes in the relation */
	dcl     rci_original_rel_info_indexed bit (1);	/* value of the indexed element in rel_info before the model was updated */
	dcl     rci_original_rel_info_max_attr_index_id fixed bin; /* ditto */
	dcl     rci_quit_signaled
				 bit (1);		/* true if a quit was signaled */
	dcl     rci_rel_id		 bit (36);	/* id of the relation as defined in rel_info */
	dcl     rci_rel_opening_id	 bit (36) aligned;	/* opening identifier of the relation */
	dcl     rci_rel_ptr		 ptr;		/* pointer to the rel_info structure */
	dcl     rci_rmdb_ctl_ptr	 ptr;
	dcl     rci_style		 fixed bin (17) init (1);
	dcl     wa		 area;


/* BUILTINS */

	dcl     addr		 builtin;
	dcl     ceil		 builtin;
	dcl     empty		 builtin;
	dcl     fixed		 builtin;
	dcl     length		 builtin;
	dcl     null		 builtin;
	dcl     pointer		 builtin;
	dcl     rel		 builtin;
	dcl     rtrim		 builtin;

/* BAESED */

	dcl     rci_based_char8	 char (8) based;	/* overlay on the saved res version */

/* CONDITIONS */

	dcl     any_other		 condition;
	dcl     cleanup		 condition;
	dcl     quit		 condition;
%page;
/* ENTRIES */

	dcl     hcs_$initiate	 entry (char (*), char (*), char (*),
				 fixed bin (1), fixed bin (2), ptr, fixed bin (35));
	dcl     ioa_$rs		 entry () options (variable);
	dcl     mdbm_util_$mu_data_length entry (bit (36)) returns (fixed bin (35));
	dcl     mdbm_util_$inconsistent_set entry (ptr, char (*), char (*), char (*));
	dcl     mdbm_util_$inconsistent_reset entry (ptr);
	dcl     rmdb_add_rmdb_history	 entry (ptr, fixed bin, char (32), fixed bin, char (32), char (500), fixed bin (35));

/* EXTERNAL STATIC */

	dcl     error_table_$action_not_performed fixed bin (35) ext static;
	dcl     sys_info$max_seg_size	 fixed bin (35) ext static; /* needed by include files */

/* INCLUDES */
%page;
%include mdbm_db_model;
%page;
%include mdbm_file_model;
%page;
%include mdbm_index;
%page;
%include rmdb_history_entry;
%page;
%include mrds_rmdb_ctl;
%page;
%include dm_rel_creation_info;
%page;
%include dm_id_list;
%page;
%include dm_relation_index_flags;
%page;
/*
   Initialize variables which may be referenced before they are  set
   somewhere else
*/
	rci_quit_signaled = "0"b;
	rmdb_ctl_ptr = rci_rmdb_ctl_ptr;
	rci_rel_opening_id = "0"b;
	rci_backout_occured = "0"b;
	mstxn_transactions_needed = "0"b;
	mstxn_txn_id = "0"b;

/* 
   If the database needs transactions and one is already in progress stop right now.
*/
	if rci_db_model_ptr -> db_model.db_type_flags.transactions_needed
	then do;
		mstxn_transactions_needed = "1"b;
		call transaction_manager_$get_current_txn_id (mstxn_txn_id, mstxn_code);
		if mstxn_code ^= dm_error_$no_current_transaction
		then do;
			rci_code = error_table_$action_not_performed;
			rci_error_message = "Indexes may not be created while a transaction is in progress, " ||
			     "commit or abort current transaction and try again.";
			goto exit_rmdb_create_index;
		     end;
	     end;

/*
   Get pointers to the db_model and relation's file  model,  extract
   from  the  models  those values needed to build the index
*/

	call initiate_models (rci_db_abs_path, rci_rel_name, rci_file_model_ptr);

	call get_relation_data (rci_db_model_ptr, rci_file_model_ptr, rci_rel_name, rci_file_id,
	     rci_rel_ptr, rci_rel_id, rci_number_of_attrs, rci_number_of_varying_attrs, rci_max_data_length);

	call get_attribute_data (rci_db_model_ptr, rci_file_model_ptr, rci_rel_ptr,
	     rci_rel_name, rci_attr_name, rci_attr_ptr, rci_attr_desc, rci_attr_defn_order);


	on cleanup call mstxn_cleanup;

	on any_other call mstxn_any_other;



	rci_caller_name = "rmdb_create_index";
	ai_ptr = rci_attr_ptr;
	il_number_of_ids = 1;
	allocate id_list in (wa);
	id_list.number_of_ids = 1;
	id_list.version = ID_LIST_VERSION_1;
	id_list.id (1) = rci_attr_ptr -> attr_info.defn_order;

/* initialize values for create_index */
	rci_style = 1;
	relation_index_flags_ptr = addr (rci_flag_list);
	relation_index_flags.relation_must_be_empty = "0"b;
	relation_index_flags.index_is_clustering = "0"b;
	relation_index_flags.index_is_unique = "0"b;
	relation_index_flags.pad = "0"b;
%page;
%include mrds_start_transaction;

	if mstxn_code ^= 0
	then do;
		rci_error_message = "Could not start a transaction";
		goto exit_rmdb_create_index;
	     end;

	rci_backout_occured = "0"b;

/*
   Update the model. This operation consists  of  marking  the  data
   base  as  inconsistent  and  updating  the relation and attribute
   models. The version of the saved resultant is also changed so that
   it will not be used for opening the database. In addition a history
   entry is added  to  the  data  base model.  This  update is done
   before any of the data is changed so that there is enough information
   avaiable so that the delete_index request can work.

   If a quit is signaled during this time, the fact is recorded, but
   the  quit  is  not processed. After the model has been completely
   updated the quit is signaled.
*/

	on quit rci_quit_signaled = "1"b;
	rmdb_ctl_ptr -> rmdb_ctl.saved_res_version_ptr -> rci_based_char8 = "RESTRUCT";
	call mdbm_util_$inconsistent_set (rci_db_model_ptr, "create_index", "Indexing attribute " ||
	     rtrim (rci_attr_name) || " in relation " || rtrim (rci_rel_name),
	     "delete_index " || rtrim (rci_rel_name) || " " || rtrim (rci_attr_name) || " -brief");
	call update_model (rci_db_model_ptr, rci_rel_ptr, rci_attr_ptr);
	revert quit;
	if rci_quit_signaled
	then do;
		rci_quit_signaled = "0"b;
		signal quit;
	     end;

	on cleanup begin;
		call mstxn_cleanup;
		call clean_up ("0"b, "1"b);
	     end;

	call rmdb_ctl.relmgr_entries.open (rci_db_abs_path, rci_rel_name,
	     rci_rel_opening_id, rci_code);
	if rci_code ^= 0
	then do;
		rci_error_message = "Could not open the relation to create the index.";
		call restore_significant_data;
		goto mftxn_exit;			/* need to reset the inconsistency of db */
	     end;

	call rmdb_ctl.relmgr_entries.create_index (rci_rel_opening_id,
	     id_list_ptr, rci_flag_list, rci_style,
	     attr_info.index_id, rci_code);

	mftxn_code = rci_code;

%include mrds_finish_transaction;

	if mftxn_code ^= 0
	then do;
		rci_error_message = "Cound not finish the transaction.";
		call clean_up ("0"b, "1"b);
		goto exit_rmdb_create_index;
	     end;

	if ^rci_backout_occured & rci_code ^= 0		/* if error occured during creation process */
	then do;
		rci_error_message = "Could not add an index";
		call clean_up ("0"b, "1"b);
		goto exit_rmdb_create_index;
	     end;

/*
   Mark the data  base  as  consistent  again  don't  let  the  user
   interrupt.  Also  cleanup  attachments  in  this  case  the  "1"b
   indicates that any non-zero error code produced  in  the  cleanup
   handler should be returned to the user, since the database is not
   marked inconsistent the value of the second switch is "0"b.
*/

	on quit rci_quit_signaled = "1"b;
	call mdbm_util_$inconsistent_reset (rci_db_model_ptr);
	revert quit;
	if rci_quit_signaled
	then do;
		rci_quit_signaled = "0"b;
		signal quit;
	     end;

	call clean_up ("1"b, "0"b);

exit_rmdb_create_index:
	if rci_quit_signaled
	then do;
		revert quit;
		rci_quit_signaled = "0"b;
		signal quit;
	     end;
	return;
%page;
should_rollback: proc () returns (bit (1));
	return ("0"b);
     end should_rollback;






restore_significant_data: proc;

	dcl     rsd_code		 fixed bin (35);
	dcl     rsd_error_message	 char (500);


	rci_rel_ptr -> rel_info.indexed = rci_original_rel_info_indexed;
	rci_rel_ptr -> rel_info.max_attr_index_id =
	     rci_original_rel_info_max_attr_index_id;
	rci_attr_ptr -> attr_info.index_attr = "0"b;

	call rmdb_add_rmdb_history (rci_db_model_ptr, RMDB_REL_TYPE, (rci_rel_ptr -> rel_info.name),
	     RMDB_DEL_IDX_OP, (rci_attr_ptr -> attr_info.name), rsd_error_message, rsd_code);

	rci_error_message = rtrim (rci_error_message) || " Backout has occured.";

	if rci_rel_opening_id ^= "0"b then
	     call rmdb_ctl.relmgr_entries.close (rci_rel_opening_id, rsd_code);
	rci_rel_opening_id = "0"b;

	rci_backout_occured = "1"b;

	return;
     end restore_significant_data;
%page;
initiate_models: proc (im_db_abs_path, im_rel_name, im_file_model_ptr);

/*
   This routine initiates a pointer to the  file_model segment that
   contains the relation model. If the file model cannot be found
   it indicates that  the  data  base does not contain the relation.
*/

/* PARAMETERS */

	dcl     im_db_abs_path	 char (168);	/* (input) path to the data base to be restructured */
	dcl     im_rel_name		 char (*);	/* (input) name of relation to be restructured */
	dcl     im_file_model_ptr	 ptr;		/* (output) pointer to the file model
						   .        that contains the relation */


	call hcs_$initiate (im_db_abs_path, rtrim (im_rel_name) || ".m", "", 0, 0, im_file_model_ptr, rci_code);
	if im_file_model_ptr = null ()
	then do;
		call ioa_$rs ("^/The relation ^a does not exist in the data base.",
		     rci_error_message, length (rci_error_message), im_rel_name);
		goto exit_rmdb_create_index;
	     end;
	else rci_code = 0;

	return;

     end initiate_models;
%page;
get_relation_data: proc (grd_db_model_ptr, grd_file_model_ptr, grd_rel_name, grd_file_id, grd_rel_ptr, grd_rel_id,
	grd_number_of_attrs, grd_number_of_varying_attrs, grd_max_data_length);

/*
   This routine extracts information from the rel_info and file_info
   structures for the relation to be restructured, i.e. the relation
   with an attribute being indexed.
*/

/* PARAMETERS */

	dcl     grd_db_model_ptr	 ptr;		/* (input) pointer to the database model */
	dcl     grd_file_model_ptr	 ptr;		/* (input) pointer to the file model that contains the relation */
	dcl     grd_rel_name	 char (*);	/* (input) name of relation to be restructured */
	dcl     grd_file_id		 bit (36);	/* (output) id of the file as defined in the database model */
	dcl     grd_rel_ptr		 ptr;		/* (output) pointer to the rel_info structure */
	dcl     grd_rel_id		 bit (36);	/* (output) id of the relation as defined in rel_info */
	dcl     grd_number_of_attrs	 fixed bin;	/* (output) number of attributes in the relation */
	dcl     grd_number_of_varying_attrs fixed bin;	/* (output) number of varying attributes in the relation */
	dcl     grd_max_data_length	 fixed bin;	/* (output) maximum number of bits of data a tuple
						   .          may have, if tuple contains varying
						   .          data the actual number may be less */


	grd_file_id = pointer (grd_db_model_ptr, grd_file_model_ptr -> file_model.fi_ptr) -> file_info.file_id;

	grd_rel_ptr = pointer (grd_file_model_ptr, grd_file_model_ptr -> rel_ptr);

	if grd_rel_ptr -> rel_info.name ^= grd_rel_name
	then do;
		rci_code = error_table_$action_not_performed;
		call ioa_$rs ("Data model inconsistant - file ^a contains a relation named ^a",
		     rci_error_message, length (rci_error_message), grd_rel_name, grd_rel_ptr -> rel_info.name);
		goto exit_rmdb_create_index;
	     end;
	else do;
		grd_rel_id = grd_rel_ptr -> rel_info.id;
		grd_number_of_attrs = grd_rel_ptr -> rel_info.num_attr;
		grd_number_of_varying_attrs = grd_rel_ptr -> rel_info.nvar_atts;
		grd_max_data_length = ceil (grd_rel_ptr -> rel_info.max_data_len / 9);
	     end;

	return;

     end get_relation_data;
%page;
get_attribute_data: proc (gad_db_model_ptr, gad_file_model_ptr, gad_rel_ptr, gad_rel_name, gad_attr_name,
	gad_attr_ptr, gad_attr_desc, gad_attr_defn_order);

/*
   This  routine  extracts  information  out  of   the   attribute's
   attr_info  and  rel_info structures that have to do with the attr
   being indexed. It also checks various attributes of the attribute
   and reports errors if
   .   1) attribute is already indexed
   .   2) attribute is the first attribute of the  primary  key  and
   .      hence does not need to be indexed
   .   3) attribute's domain will  allow  values  >  253  characters
   .      which is the maximum length of an index
   .   4) relation does not contain the indicated attribute
*/

/* PARAMETERS */

	dcl     gad_db_model_ptr	 ptr;		/* (input) pointer to the database model */
	dcl     gad_file_model_ptr	 ptr;		/* (input) pointer to the file model that contains the relation */
	dcl     gad_rel_ptr		 ptr;		/* (input) pointer to the rel_info structure */
	dcl     gad_rel_name	 char (*);	/* (input) name of relation to be restructured */
	dcl     gad_attr_name	 char (*);	/* (input) name of attribute to be indexed */
	dcl     gad_attr_ptr	 ptr;		/* (output) pointer to the attr_info structure */
	dcl     gad_attr_desc	 bit (36);	/* (output) standard multics descriptor
						   .        of the attribute to be indexed */
	dcl     gad_attr_defn_order	 fixed bin;

/* AUTOMATIC */

	dcl     gad_domain_ptr	 ptr;		/* pointer to attribute's domain info */
	dcl     gad_found		 bit (1);		/* true if the attribute exists in the relation */
	dcl     gad_i		 fixed bin;	/* loop index */

	gad_attr_ptr = pointer (gad_file_model_ptr, gad_rel_ptr -> rel_info.attr_ptr);
	gad_found = "0"b;
	do gad_i = 1 to gad_rel_ptr -> rel_info.num_attr while (^gad_found);
	     if gad_attr_ptr -> attr_info.name = gad_attr_name
	     then do;
		     gad_found = "1"b;
		     if gad_attr_ptr -> attr_info.index_attr
		     then do;
			     rci_code = error_table_$action_not_performed;
			     call ioa_$rs ("^/Attribute ^a in relation ^a is already indexed",
				rci_error_message, length (rci_error_message), gad_attr_name, gad_rel_name);
			     goto exit_rmdb_create_index;
			end;
		     if gad_attr_ptr -> attr_info.key_attr & gad_attr_ptr -> attr_info.key_order = 1
		     then do;
			     rci_code = error_table_$action_not_performed;
			     call ioa_$rs ("^/Attribute ^a in relation ^a is the first attribute of the^/" ||
				"relation's primary key and can already be used as an index",
				rci_error_message, length (rci_error_message), gad_attr_name, gad_rel_name);
			     goto exit_rmdb_create_index;
			end;
		     gad_attr_defn_order = gad_attr_ptr -> attr_info.defn_order;
		     gad_domain_ptr = pointer (gad_db_model_ptr, gad_attr_ptr -> attr_info.domain_ptr);
		     gad_attr_desc = gad_domain_ptr -> domain_info.db_desc;
		     if mdbm_util_$mu_data_length (gad_attr_desc) > 2277 /* 253 * 9 */
		     then do;
			     rci_code = error_table_$action_not_performed;
			     call ioa_$rs (
				"^/Attribute ^a has a domain that allows values with lengths " ||
				"^/longer than 253 characters - the maximum allowable index length.",
				rci_error_message, length (rci_error_message), gad_attr_name);
			     goto exit_rmdb_create_index;
			end;
		end;
	     else gad_attr_ptr = pointer (gad_file_model_ptr, gad_attr_ptr -> attr_info.fwd_thread);
	end;
	if ^gad_found
	then do;
		rci_code = error_table_$action_not_performed;
		call ioa_$rs ("^/Relation ^a does not contain an attribute named ^a",
		     rci_error_message, length (rci_error_message), gad_rel_name, gad_attr_name);
		goto exit_rmdb_create_index;
	     end;

	return;

     end get_attribute_data;
%page;
update_model: proc (um_db_model_ptr, um_rel_ptr, um_attr_ptr);

/*
   This procedure updates the model to indicate the new index and to
   record that restructuring has taken place. The index_id will be set
   by the relation_manager when it creates the index but the rel_mgr
   expects the id to be "0"b until it actually sets it. It also sets the
   max_attr_index_id to 512 so that MR10.1 rmdb will die. This is needed
   because the max_attr_index_id which is used by MR10.1 rmdb to calculate
   the new index_id can no longer be guarenteeded to be the maximum index
   id once MR10.2 rmdb has been used. MR10.1 rmdb had a check that refused
   to allow the index_id to go above 511 because it was only 8 bits long,
   setting max_attr_index_id (which is fixed bin) will therefore stop
   MR10.1 rmdb.
*/

/* PARAMETERS */

	dcl     um_db_model_ptr	 ptr;		/* (input) pointer to the database model */
	dcl     um_rel_ptr		 ptr;		/* (input) pointer to the rel_info structure */
	dcl     um_attr_ptr		 ptr;		/* (input) pointer to the attr_info structure */

	rci_original_rel_info_indexed = um_rel_ptr -> rel_info.indexed;
	um_rel_ptr -> rel_info.indexed = "1"b;

	rci_original_rel_info_max_attr_index_id = um_rel_ptr -> rel_info.max_attr_index_id;
	um_rel_ptr -> rel_info.max_attr_index_id = 512;

	um_attr_ptr -> attr_info.index_attr = "1"b;
	um_attr_ptr -> attr_info.index_id = "0"b;

	call rmdb_add_rmdb_history (um_db_model_ptr, RMDB_REL_TYPE, (um_rel_ptr -> rel_info.name),
	     RMDB_ADD_IDX_OP, (um_attr_ptr -> attr_info.name), rci_error_message, rci_code);
	if rci_code ^= 0
	then do;
		call clean_up ("0"b, "1"b);
		goto exit_rmdb_create_index;
	     end;

	return;

     end update_model;
%page;
clean_up: proc (cu_set_code, cu_leave_db_inconsistent);

/*
   This procedure is called both during normal and error termination
   and in the event that the cleanup condition is signaled.

   In the event that this procedure is called due  to  an  error  we
   want  to  be sure that the error code reported to the user is the
   one that caused the error. There is therefore a local error  code
   in  this procedure which is set to the global error code (the one
   returned  to   the   user)   only   during   normal   (non-error,
   non-cleanup_condition) termination and if an error occurs in this
   procedure (this could occur  during  io  attachment  cleanup).  A
   record  of  the  error is concatinated onto the end of the global
   error_message so that the caller has some indication of what went
   wrong.
*/






/* PARAMETERS */

	dcl     cu_set_code		 bit (1);		/* (input) true ==> if error occurs during cleanup, global error
						   .       code will be set to error */
	dcl     cu_leave_db_inconsistent bit (1);	/* (input) true ==> the dba will not be queried if indexing is
						   .       to continue and the message giving directions for
						   .       how to make the db consistent will be concatinated
						   .       to the returned error message */

/* AUTOMATIC */

	dcl     cu_code		 fixed bin (35);	/* local error code */




	if cu_leave_db_inconsistent
	then rci_error_message = rtrim (rci_error_message) ||
		"^/The data base is being left in an inconsistant state," ||
		"^/to make the database consistent use the delete_index request" ||
		"^/to delete the partially created index.";


	if rci_rel_opening_id ^= "0"b then
	     call rmdb_ctl.relmgr_entries.close (rci_rel_opening_id, cu_code);
	if cu_set_code
	then do;					/* set global error code, if error in cleanup occured */
		if cu_code ^= 0			/* if error didn't occur don't change anything */
		then do;
			rci_code = cu_code;
			if rci_code = 0		/* keep old message if there was another error */
			then rci_error_message = "^/The relation could not be closed.";
			else rci_error_message = rtrim (rci_error_message) ||
				"^/The relation could not be closed.";
		     end;
	     end;
	else do;
		if cu_code ^= 0			/* even if code is not reset, let user know error occured */
		then rci_error_message = rtrim (rci_error_message) ||
			"^/The relation could not be close.";
	     end;

	return;

     end clean_up;


     end rmdb_create_index;
