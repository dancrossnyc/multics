/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

mrds_rst_create_rsc: create_rsc: proc (input_dir, rsc_ptr, code);


/* This procedure creates and initializes the temporary rsc working storage
   under the given directory, as a directory containing segments allocated
   according to a storage classification of data functional use */



/* Initially written by R. D. Lackey August 1978 */
/* modified by Jim Gray 2/19/79, to change structure of rsc to directory with extensible area segments */
/* MODIFIED by Jim Gray - - Jan. 1980, to add initialization of foreign_key, blocked file, and restructuring allow flags. */
/* Modified by Jim Gray - - Feb. 1980, to add init of command level bit */
/* Modified by Jim Gray - - 80-11-06, to add inititalization of rsc.secure bit */

/* 81-05-18 Jim Gray : added initialization of rsc.max_attrs bit */
/* 82-07--6 Roger Lackey : changed call to mu_define_area to 
   mdbm_util_$mu_define_area for binding*/





/* input_dir (INPUT PARAMETER) pathname where rsc directory is to be appended */
/* rsc_ptr    (OUTPUT PARAMETER) pointer to rsc segment */
/* code	(OUTPUT PARAMETER) error code from append_branchx or make_seg or define_area_ */
%page;
/* get a new directory under the given pathname in which to put
   the working storage segments, 1 common, and several extensible areas */

	dir_name = unique_chars_ ("0"b) || ".rsc_dir";
	call hcs_$append_branchx (input_dir, dir_name,
	     01011b /* sma acl's */, rings, get_group_id_$tag_star (),
	     1 /* directory */, 0 /* copy_sw */, 0 /* bit_count */, code);
	if code ^= 0 then goto exit;


/* Create rsc common storage data segment */

	rsc_dir_name = rtrim (input_dir) || ">" || dir_name;
	call hcs_$make_seg (rsc_dir_name, unique_chars_ ("0"b) || ".MRDS.rsc.rst", "", 10 /* rw acl's */, rsc_ptr, code);
	if code ^= 0 then goto exit;			/* Return with bad error code */


/* Initiallize all  the elements of the rsc structure */

	rsc.rsc_dir = rsc_dir_name;
	rsc.dbp = BLANK;
	rsc.temp_dir = BLANK;
	rsc.temp_dir_sw = OFF;
	rsc.db_quiesced_sw = OFF;
	rsc.o_db_open_sw = OFF;
	rsc.n_db_open_sw = OFF;
	rsc.listing_seg_sw = OFF;
	rsc.skip_scanner_conversion = OFF;
	rsc.cmdb_option = OFF;
	rsc.trace_sw = OFF;
	rsc.debug_sw = OFF;
	rsc.meter_sw = OFF;
	rsc.delete_db_sw = OFF;
	rsc.model_consistent_sw = OFF;
	rsc.physical_started_sw = OFF;
	rsc.physical_complete_sw = OFF;
	rsc.model_overflow = OFF;
	rsc.max_files = OFF;
	rsc.allow_foreign_keys = OFF;
	rsc.foreign_key_seen = OFF;
	rsc.allow_blocked_files = OFF;
	rsc.blocked_file_seen = OFF;
	rsc.allow_restructuring = OFF;
	rsc.command_level = ON;
	rsc.secure = OFF;
	rsc.max_attrs = OFF;
	rsc.severity_high = 0;
	rsc.phase = 0;
	rsc.h_o_seg_info_ls_ptr = null;
	rsc.h_n_seg_info_ls_ptr = null;
	rsc.h_gfile_ptr = null;
	rsc.h_gdom_ptr = null;
	rsc.h_gattr_ptr = null;
	rsc.h_grel_ptr = null;
	rsc.h_glink_ptr = null;
	rsc.o_dm_ptr = null;
	rsc.n_dm_ptr = null;
	rsc.o_fn_hdr_ptr = null;
	rsc.source_seg_ptr = null;
	rsc.listing_iocb_ptr = null;
	rsc.directive_ptr = null;
	rsc.stmt_ptr = null;
	rsc.trace_metering_iocb_ptr = null;
	rsc.wa = empty ();				/* non-extensible common area for static storage */



/* get segments and initialize them as extensible areas */

	rsc.tree_node_area_ptr = area_init ("tnode");
	rsc.tree_data.seg_info_area_ptr = area_init ("seg_in");
	rsc.tree_data.gl_area_ptr = area_init ("gl");
	rsc.tree_data.sl_area_ptr = area_init ("sl");
	rsc.parse_info_area_ptr = area_init ("parse");
	rsc.static_info_area_ptr = area_init ("static");
	rsc.variable_length_area_ptr = area_init ("variab");
	rsc.other_area_ptr = area_init ("other");


exit:	return;
%page;
area_init: procedure (class_word) returns (ptr);

/* first get a segment to use as an area */

	call hcs_$make_seg (rsc.rsc_dir, unique_chars_ ("0"b) || ".MRDS." || class_word,
	     "", 10 /* rw acl's */, model_seg_ptr, code);
	if code ^= 0 then goto exit;

/* set up the segment header, get the area pointer */

	model_seg_ptr -> model_seg.struct_offset = NULL_OFFSET;
	model_seg_ptr -> model_seg.padding = 0;
	model_area_ptr = pointer (model_seg_ptr, size (model_seg));

/* routine to initialize the area_info for the define area call */

	call mdbm_util_$mu_define_area (model_area_ptr, sys_info$max_seg_size - size (model_seg),
	     "MRDS." || class_word,
	     "1"b /* extensible */, "0"b /* freeing */, "0"b, "0"b /* no zeroing */, code);
	if code ^= 0 then goto exit;

	return (model_area_ptr);


	dcl     class_word		 char (6) varying;	/* name for class type of storage in segment */

     end;
%page;
	dcl     (addr, empty, fixed, pointer, rel, rtrim) builtin;
	dcl     rsc_dir_name	 char (168);	/* pathname of rsc directory */
	dcl     dir_name		 char (32);	/* name of rsc directory entry */
	dcl     input_dir		 char (*);
	dcl     get_group_id_$tag_star entry returns (char (32));
	dcl     rings		 (3) fixed bin (3) init ((3) 7);
	dcl     hcs_$append_branchx	 entry (char (*), char (*), fixed bin (5), (3) fixed bin (3),
				 char (*), fixed bin (1), fixed bin (1), fixed bin (24), fixed bin (35));
	dcl     hcs_$make_seg	 entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
	dcl     unique_chars_	 entry (bit (*)) returns (char (15));
	dcl     NULL_OFFSET		 bit (18) init ((18)"1"b);
	dcl     mdbm_util_$mu_define_area entry (ptr, fixed bin (18), char (11), /* does call to define_area_ */
				 bit (1) aligned, bit (1) aligned, bit (1) aligned, bit (1) aligned, fixed bin (35));
	dcl     BLANK		 char (1) int static options (constant) init (" ");
	dcl     OFF		 bit (1) int static options (constant) init ("0"b);
	dcl     ON		 bit (1) int static options (constant) init ("1"b);
	dcl     code		 fixed bin (35);	/* (INPUT PARAMETER) eror code */
	dcl     null		 builtin;
	dcl     sys_info$max_seg_size	 fixed bin (35) ext;
%page;
%include mdbm_seg_area;
%page;
%include mrds_rst_rsc;
%page;
%include area_info;
%page;
%include area_structures;



     end mrds_rst_create_rsc;
