/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* HISTORY:

   Originally written by roger lackey
   Modified by Jim Gray - - Feb. 1980, to add signaling of th condition
   mrds_rst_error, when rsc.command_level is off, indicating that CMDB
   was called from a subroutine level, and thus not to output
   errors to error_output.
   Modified by Jim Gray - - Mar. 1980, to fix formatting of specifics message,
   so that no blanks in a 79 char length of text are handled better.

*/

mrds_rst_error: proc (rsc_ptr, severity, err_code, specifics_text);

/*	PARAMETERS	*/

/* rsc_ptr ptr;				/ Pointer to rst (restructuring ) control segment */
	dcl     severity		 fixed bin;	/* (INPUT)
						   1 = Warning level  error detected
						   2 = syntax error detected
						   3 =
						   4 = Fatal error during logical phase of restructuring
						   5 = fatal error during physical restructuring */

	dcl     err_code		 fixed bin (35);	/* (INPUT) error code for com_err_ */
	dcl     specifics_text	 char (*);	/* (INPUT) associated specific message */

/*
   .                        BEGIN_DESCRIPTION
   this routine is a common error reporting routine for create/restructure_mrds_db
   it's primary purpose is to format error messages for output on the users console.
   The error messages include a severity level, the error table message,
   plus one or more lines of length <= 80, with specifics about this error.
   It also can return simple a condition info with the status code,
   instead of doing an user error output(except for the listing segment)
   if the call was from a subroutine level.
   .                        END_DESCRIPTION
*/
%page;
	call convert_status_code_ (err_code, shortinfo, longinfo);

	if severity < 2 then err_msg.type = "WARNING ";
	else err_msg.type = "*ERROR*";

	err_msg.severity_level = severity;

	err_msg.msg1 = longinfo;
	specifics = specifics_text || NL;

	call format_specifics_message ();

	code = 0;					/* init */

	if rsc.command_level then do;			/* called as a command, not from subroutine level */
		call iox_$put_chars (iox_$error_output, addr (err_msg), length (string (err_msg)), code);
		call iox_$put_chars (iox_$error_output, addrel (addr (specifics), 1), length (specifics), code);
	     end;
	else do;

/* fill in the condition information for find_condition_info_,
   then signal the condition mrds_rst_error for mrds_dm_create_db to handle,
   since this was a call from a subroutine interface */

		mrds_error_cond_info.length = size (mrds_error_cond_info);
		mrds_error_cond_info.version = 1;
		mrds_error_cond_info.cant_restart = "0"b;
		mrds_error_cond_info.default_restart = "1"b;
		mrds_error_cond_info.pad = "0"b;
		mrds_error_cond_info.info_string = substr (specifics, 1, min (256, length (specifics)));
		mrds_error_cond_info.status_code = err_code;
		mrds_error_cond_info.severity = severity;
		mrds_error_cond_info.severity_high = rsc.severity_high;

		call signal_ ("mrds_rst_error", null (), addr (mrds_error_cond_info));

	     end;

	if code = 0 then
	     if rsc.listing_seg_sw then do;
		     call iox_$put_chars (rsc.listing_iocb_ptr, addr (err_msg), length (string (err_msg)), code);
		     call iox_$put_chars (rsc.listing_iocb_ptr, addrel (addr (specifics), 1), length (specifics), code);
		end;

	if code ^= 0 then do;
		if rsc.command_level then
		     call com_err_ (code, "mrds_rst_error");
		else call sub_err_ (code, "mrds_rst_error", "c", null (), 0, "Unable to output listing.");
	     end;

	rsc.severity_high = max (rsc.severity_high, severity);
%page;
format_specifics_message: procedure ();

/* routine to break long lines down to shorter ones by inserting
   new_lines where blanks appear, so that error messages will not be
   folded by the printing device. */

	i, pos = 1;

	do while (pos + 79 < length (specifics));	/* Break into 79 char lines or less at a blank char */
	     i = index (reverse (substr (specifics, pos, 79)), BLANK);
	     if i ^= 0 then do;
		     substr (specifics, pos + 79 - i, 1) = NL;
		     pos = pos + 79 - i;
		end;
	     else do;				/* no blank in 79 chars, find first blank following */
		     pos = pos + 79;
		     i = index (substr (specifics, pos), BLANK);
		     if i ^= 0 then do;
			     substr (specifics, pos + i - 1, 1) = NL;
			     pos = pos + i;
			end;
		     else pos = length (specifics);	/* no blanks left, get out */
		end;

	end;

     end;
%page;

	dcl     code		 fixed bin (35);
	dcl     com_err_		 entry options (variable);
	dcl     convert_status_code_	 entry (fixed bin (35), char (8) aligned, char (100) aligned);
	dcl     iox_$error_output	 ext ptr;
	dcl     iox_$put_chars	 entry (ptr, ptr, fixed bin (21), fixed bin (35));
	dcl     longinfo		 char (100) aligned;/* Long msg from convert status code */
	dcl     shortinfo		 char (8) aligned;	/* Short msg from convert status code */
	dcl     sys_info$max_seg_size	 ext fixed bin (35);
	declare signal_		 entry options (variable); /* passes cond_info structure upon signaling condition */

	declare 1 mrds_error_cond_info aligned,
%include cond_info_structure;

	2 severity fixed bin,
	     2 severity_high fixed bin;

	declare sub_err_		 entry options (variable);
	dcl     (addr, fixed, length, max, rel, size, string) builtin;
	dcl     (addrel, index, min, null, reverse, substr) builtin;

	dcl     BLANK		 char (1) int static options (constant) init (" ");
	dcl     NL		 char (1) int static options (constant) init ("
");
	dcl     (i, pos)		 fixed bin;



	dcl     1 err_msg		 aligned,
		2 lf0		 char (1) unal init ("
"),						/* Start with a line feed */
		2 type		 char (8) unal,	/* Type = WARNING or *ERROR*      */
		2 constant	 char (12) unal init ("OF SEVERITY "),
		2 severity_level	 pic "9" unal,	/* Severity numeric 1 to 5 see input parameter */
		2 lf1		 char (1) unal init ("
"),
		2 msg1		 char (100) unal,	/* Error message from error table */
		2 lf2		 char (1) unal init ("
");

	dcl     specifics		 char (256) varying unal; /* Additional err info */
%page;
%include mrds_rst_rsc;

     end mrds_rst_error;
