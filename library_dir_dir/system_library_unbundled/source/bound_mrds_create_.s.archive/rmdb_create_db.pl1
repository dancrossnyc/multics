/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: ^inddcls,^indattr,indnoniterend,^indnoniterdo,indend,tree,^case,insnl,comcol61,dclind5,declareind5,delnl */

/*
                            BEGIN_DESCRIPTION
   This procedure creates the skeleton of a database, including:
   db_model (data base model segment)
   dbc (database control segment)

   These segments are initialized before returning.
   If an error occures the data base is not created (it is deleted).

 		        END_DESCRIPTION
*/

/****^  HISTORY COMMENTS:
  1) change(85-12-03,Spitzer), approve(85-12-03,MCR7311),
     audit(86-09-02,Blair), install(86-10-16,MR12.0-1187):
     This routine is really mrds_rst_create_db with some changes in order that
     we may call it from something else besides the cmdb parser.
                                                   END HISTORY COMMENTS */

rmdb_create_db:
     proc (Idb_path, Irelation_type, Irelation_modes, Oabsolute_path, Odbm_ptr, Oerror_message, Ocode);

	relation_type = Irelation_type;
	relation_modes = Irelation_modes;

	db_created_sw = OFF;

	on cleanup call tidy_up;			/* Set a cleanup handler */

	call expand_pathname_$add_suffix (Idb_path, "db", dir, db_ent, code);
	if code ^= 0
	then call error (code, Idb_path);
	absolute_path = pathname_ (dir, db_ent);

	call hcs_$append_branchx (dir, db_ent, 11, RINGS, /* Create the data base directory */
	     get_group_id_$tag_star (), 1, 0, 0, code);
	if code ^= 0
	then call error (code, absolute_path);

	db_created_sw = ON;				/* Remember database directory was created */

/* create the submodel_dir */
	call hcs_$append_branchx (absolute_path, mrds_data_$submodel_dir_name, 11, RINGS, get_group_id_$tag_star (), 1,
	     0, 0, code);
	if code ^= 0
	then call error (code, pathname_ (absolute_path, mrds_data_$submodel_dir_name));

	call hcs_$make_seg (absolute_path, "db_model", "", 10, dbm_ptr, code);
						/* Create the db_model */
	if dbm_ptr = null
	then call error (code, pathname_ (absolute_path, DB_MODEL_NAME));
	else call init_db_model;

	call mdbm_util_$create_control_segment (absolute_path, dbc_ptr, dbc_bit_count, code);
	if code ^= 0
	then call error (code, pathname_ (absolute_path, DB_CONTROL_NAME));

	Oabsolute_path = absolute_path;		/* set output parameters */
	Odbm_ptr = dbm_ptr;
	db_created_sw = OFF;			/* so cleanup won't delete it */

	call error (0, "");

/* Only exit from this procedure */
exit:
	return;

%page;
error:
     proc (cd, msg);

dcl  cd fixed bin (35) parameter;
dcl  msg char (*) parameter;

	call tidy_up;
	Ocode = cd;				/* Set return error code */
	if cd = 0
	then Oerror_message = "";
	else Oerror_message = msg;
	goto exit;

     end error;

tidy_up:
     proc;					/* Clean up procedure */

	if db_created_sw				/* If database created then delete it */
	then do;
	     delete_options.force = ON;
	     delete_options.question = OFF;
	     delete_options.directory = ON;
	     delete_options.segment = ON;
	     delete_options.link = ON;
	     delete_options.chase = ON;
	     delete_options.raw = OFF;
	     delete_options.library = OFF;
	     delete_options.mbz = OFF;

	     call delete_$path (dir, db_ent, string (delete_options), MODULE_NAME, (0));

	     end;

     end tidy_up;
%page;
init_db_model:
     procedure;

/* This procedure initializes the db_model */

	db_model_path = rtrim (absolute_path) || DB_MODEL_NAME;

	db_model.version = mdbm_data_$current_version;
	db_model.dbm_area = empty;
	db_model.version_ptr = set_version ();
	db_model.changer_ptr = set_change_time ();
	db_model.uniq_sw_name = unique_chars_ ("0"b) || ".mrds";

	if relation_type = "vfile"
	then do;
	     db_model.db_type_flags.vfile_type = "1"b;
	     db_model.db_type_flags.transactions_needed = "0"b;
	     end;	     
	else if relation_type = "data_management_file"
	     then do;
		db_model.db_type_flags.vfile_type = "0"b;
		mode_bits.dm_file_type = "1"b;	/* default all on */
		mode_bits.protection_on = "1"b;
		mode_bits.concurrency_on = "1"b;
		mode_bits.rollback_on = "1"b;

		call mrds_rst_proc_ctl_args$parse_mode_string (relation_modes, mode_bits, code, error_message);
		if code ^= 0
		then call error (code, "Parsing the mode string """ || rtrim (relation_modes)
		     || """, encountered " || rtrim (error_message));

		db_model.db_type_flags.concurrency_on = mode_bits.concurrency_on;
		db_model.db_type_flags.transactions_needed = "1"b;
		db_model.db_type_flags.rollback_on = mode_bits.rollback_on;
		end;
	     else call error (error_table_$bad_arg, relation_type);

	db_model.consistant = "1"b;
	db_model.mdbm_secured = "0"b;
	db_model.copy_good = "0"b;
	db_model.reserved = "0"b;
	db_model.num_rels = 0;
	db_model.blk_file_id_len = 0;
	db_model.unblk_file_id_len = 0;
	db_model.num_blk_files = 0;
	db_model.num_unblk_files = 0;
	db_model.num_domains = 0;
	db_model.num_dyn_links = 0;
	db_model.max_max_tuples = 0;
	db_model.pad_1 = 0;
	db_model.pad_2 = 0;
	db_model.file_ptr = NULL_OFFSET;
	db_model.domain_ptr = NULL_OFFSET;
	db_model.unreferenced_attribute_ptr = NULL_OFFSET;
	db_model.unused_offsets (*) = NULL_OFFSET;
	db_model.last_restructuring_history_offset = NULL_OFFSET;
	db_model.inconsistent_message_offset = NULL_OFFSET;
	db_model.first_restructuring_history_offset = NULL_OFFSET;

	return;
     end init_db_model;
%page;
set_version:
     procedure () returns (bit (18));

/* fill in the version structure */
/* this major number was 7 for the MR8 mrds release,
   it was changed to 8 on 80-11-06, to signify the addition of the submodel_dir to the architecture */

	allocate version_status in (db_model.dbm_area) set (version_status_ptr);

/* CMDB/RMDB source code version */

	version_status.cmdb_rmdb.major = mrds_data_$current_version_status;
						/* MR8.0 */
	version_status.cmdb_rmdb.minor = 0;
	version_status.cmdb_rmdb.modification = " ";

/* database model version */

	version_status.model.major = mrds_data_$current_version_status;
	version_status.model.minor = 0;
	version_status.model.modification = " ";

/* resultant model version */

	version_status.resultant.major = mrds_data_$current_version_status;
	version_status.resultant.minor = 0;
	version_status.resultant.modification = " ";

	return (rel (version_status_ptr));

     end set_version;
%page;
set_change_time:
     procedure () returns (bit (18));

/* fill in the user_id and time for the database creator */

	allocate changer in (db_model.dbm_area) set (changer_ptr);

	changer.id = get_group_id_ ();
	changer.time = clock ();
	changer.next = NULL_OFFSET;			/* creator = last on list */

	return (rel (changer_ptr));

     end set_change_time;
%page;
%include mdbm_db_model;
%page;
%include mdbm_dbc;
%page;
%include mrds_rst_arg_info;
%page;
%include delete_options;
%page;
/* External entries */

dcl  empty builtin;
dcl  null builtin;
dcl  error_message char (500);
dcl  absolute_path char (168);
dcl  addr builtin;
dcl  cleanup condition;
dcl  clock builtin;
dcl  code fixed bin (35);				/* error code */
dcl  DB_CONTROL_NAME char (32) int static options (constant) init ("db.control");
dcl  db_created_sw bit (1);				/* ON => Db_directory was created */
dcl  db_ent char (32);				/* Data base directory name */
dcl  DB_MODEL_NAME char (32) int static options (constant) init ("db_model");
dcl  db_model_path char (168);			/* path down to db_model segment */
dcl  dbc_bit_count fixed bin (24);
dcl  delete_$path entry (char (*), char (*), bit (36) aligned, char (*), fixed bin (35));
dcl  dir char (168);				/* Directory superior to data base */
dcl  error_table_$bad_arg fixed bin (35) ext static;
dcl  expand_pathname_$add_suffix entry (char(*), char(*), char(*), char(*), fixed bin(35));
dcl  fixed builtin;
dcl  get_group_id_ entry returns (char (32));
dcl  get_group_id_$tag_star entry returns (char (32));
dcl  hcs_$append_branchx
	entry (char (*), char (*), fixed bin (5), (3) fixed bin (3), char (*), fixed bin (1), fixed bin (1),
	fixed bin (24), fixed bin (35));
dcl  hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  Idb_path char (*) parameter;
dcl  Irelation_modes char (*) parameter;
dcl  Irelation_type char (*) parameter;
dcl  mdbm_data_$current_version ext fixed bin (35);
dcl  mdbm_util_$create_control_segment entry (char (168), ptr, fixed bin (24), fixed bin (35));
dcl  1 mode_bits like db_relation_modes;
dcl  MODULE_NAME char (18) int static options (constant) init ("rmdb_create_db");
dcl  mrds_data_$current_version_status fixed bin (35) ext;	/* display_mrds_dm needs to know about this */
dcl  mrds_data_$submodel_dir_name char (16) ext;		/* common place to get name of submodel dir */
dcl  mrds_rst_proc_ctl_args$parse_mode_string entry (char(*), 1, 2 bit(1) unal, 2 bit(1) unal, 2 bit(1) unal,
	2 bit(1) unal, fixed bin(35), char(*));
dcl  NULL_OFFSET bit (18) unal int static options (constant) init ("111111111111111111"b);
dcl  Oabsolute_path char (*) parameter;
dcl  Ocode fixed bin (35) parameter;
dcl  Odbm_ptr ptr parameter;
dcl  Oerror_message char (*) parameter;
dcl  OFF bit (1) int static options (constant) init ("0"b);
dcl  ON bit (1) int static options (constant) init ("1"b);
dcl  pathname_ entry (char (*), char (*)) returns (char (168));
dcl  rel builtin;
dcl  relation_modes char (256);
dcl  relation_type char (32);
dcl  RINGS (3) fixed bin (3) init static options (constant) init (7, 7, 7);
						/* Ring brackets */
dcl  rtrim builtin;
dcl  string builtin;
dcl  sys_info$max_seg_size ext fixed bin (35);
dcl  unique_chars_ entry (bit (*)) returns (char (15));	/* unique char string routine */

     end rmdb_create_db;
