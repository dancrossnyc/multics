/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */

/* format: ^inddcls,^indattr,indnoniterend,^indnoniterdo,indend,tree,^case,insnl,comcol61,dclind5,declareind5,delnl */

/*DESCRIPTION
  This routine parses command arguments for the create_attribute rmdb
  request.
*/

/****^  HISTORY COMMENTS:
  1) change(85-12-03,Spitzer), approve(85-12-03,MCR7311),
     audit(86-09-02,Blair), install(86-10-16,MR12.0-1187):
     written.
                                                   END HISTORY COMMENTS */

rmdb_rq_create_attribute:
     proc (Isci_ptr, Iinfo_ptr);

/* Initialize values */

	sci_ptr = Isci_ptr;
	rmdb_ctl_ptr = Iinfo_ptr;

/* Determine the number of arguments. There must be an even number. */

	call ssu_$arg_count (sci_ptr, nargs);
	if (nargs = 0) | (mod (nargs, 2) ^= 0)
	then call ssu_$abort_line (sci_ptr, error_table_$wrong_no_of_args,
		"^/Usage:^/^-^a attribute1 domain1 {...attributeN domainN}", myname);

/* Create the structure that contains the attributes to create */

	create_attr_info_count = mod (nargs, 2);
	allocate create_attr_info in (my_area) set (create_attr_info_ptr);

/* Check to see if we have an open database */

	if rmdb_ctl.absolute_db_path = ""
	then call ssu_$abort_line (sci_ptr, error_table_$action_not_performed,
		"^/There is no currently readied database.");

/* Check to see if the database is consistent. If not, we must make it
consistent before we can create new attributes. Note that if for some reason
the database is not made consistent rmdb_execute_undo will not return, it
will either cause a request line or subsystem abort.*/

	call mdbm_util_$inconsistent_get_info (rmdb_ctl.db_model_ptr, incon_value, incon_name, unused2, undo_request);
	if incon_value
	then call rmdb_execute_undo (sci_ptr, "create_attribute", rmdb_ctl.absolute_db_path, rmdb_ctl.db_model_ptr,
		incon_name, undo_request);

/* Fill in our structure */

	create_attr_info.version = create_attr_info_version_1;
	create_attr_info.count = divide (nargs, 2, 17, 0);
	attribute_index = 1;

	do loop = 1 to nargs by 2;
	     call ssu_$arg_ptr (sci_ptr, loop, argp, argl);

	     if argl > 32
	     then call ssu_$abort_line (sci_ptr, error_table_$bigarg,
		     "^/The maximum length of attribute names is 32 characters. ^a", arg);
	     if verify (arg, mrds_data_$valid_rel_and_attr_name_chars) ^= 0
	     then call ssu_$abort_line (sci_ptr, mrds_error_$bad_ident, "^a", arg);
	     if search (substr (arg, 1, 1), "_-0123456789") ^= 0
	     then call ssu_$abort_line (sci_ptr, mrds_error_$inv_attr_name_first_char, "^a", arg);

	     create_attr_info.attribute (attribute_index).name = arg;

	     call ssu_$arg_ptr (sci_ptr, loop + 1, argp, argl);
	     if argl > 32
	     then call ssu_$abort_line (sci_ptr, error_table_$bigarg,
		     "^/The maximum length of domain names is 32 characters. ^a", arg);
	     if verify (arg, mrds_data_$valid_rel_and_attr_name_chars) ^= 0
	     then call ssu_$abort_line (sci_ptr, mrds_error_$bad_ident, "^a", arg);
	     if search (substr (arg, 1, 1), "_-0123456789") ^= 0
	     then call ssu_$abort_line (sci_ptr, mrds_error_$inv_domain_name_first_char, "^a", arg);

	     create_attr_info.attribute (attribute_index).domain = arg;

	     attribute_index = attribute_index + 1;
	     end;					/* do loop */

/* Check for duplicate attributes to create */

	do loop = 1 to create_attr_info.count-1;
	     do inner_loop = loop + 1 to create_attr_info.count;
		if create_attr_info.attribute (loop).name = create_attr_info.attribute (inner_loop).name
		then call ssu_$abort_line (sci_ptr, mrds_error_$attr_already_exists, "^a", create_attr_info.attribute (inner_loop).name);
		end;				/* do inner_loop */
	     end;					/* do loop */

/* Do the actual attribute creation */

	call rmdb_create_attribute (rmdb_ctl_ptr, create_attr_info_ptr, error_message, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code, "^a", error_message);

	return;
%page;
%include mrds_rmdb_ctl;
%include rmdb_create_attr_info;
%page;
dcl  arg char (argl) based (argp);			/* command line argument */
dcl  argl fixed bin (21);
dcl  argp ptr;
dcl  attribute_index fixed bin;			/* loop index */
dcl  code fixed bin (35);
dcl  divide builtin;
dcl  empty builtin;
dcl  error_message char (500);
dcl  error_table_$action_not_performed fixed bin (35) ext static;
dcl  error_table_$bigarg fixed bin (35) ext static;
dcl  error_table_$wrong_no_of_args fixed bin (35) ext static;
dcl  incon_name char (32);				/* name of the request that caused the db to become inconsistent */
dcl  incon_value bit (1);				/* true ::= the db is inconsistent */
dcl  Iinfo_ptr ptr;
dcl  inner_loop fixed bin (17);			/* loop index */
dcl  Isci_ptr ptr;
dcl  loop fixed bin;				/* loop index */
dcl  mdbm_util_$inconsistent_get_info entry (ptr, bit (1), char (*), char (*), char (*));
dcl  mod builtin;
dcl  mrds_data_$valid_rel_and_attr_name_chars char (128) ext static;
dcl  mrds_error_$attr_already_exists fixed bin(35) ext static;
dcl  mrds_error_$bad_ident fixed bin(35) ext static;
dcl  mrds_error_$inv_attr_name_first_char fixed bin(35) ext static;
dcl  mrds_error_$inv_domain_name_first_char fixed bin(35) ext static;
dcl  my_area area;					/* small area to allocate in */
dcl  myname char (32) int static options (constant) init ("create_attribute");
dcl  nargs fixed bin;
dcl  rmdb_create_attribute entry (ptr, ptr, char (*), fixed bin (35));
dcl  rmdb_execute_undo entry (ptr, char (32), char (168), ptr, char (32), char (100));
dcl  sci_ptr ptr;
dcl  search builtin;
dcl  ssu_$abort_line entry () options (variable);
dcl  ssu_$arg_count entry (ptr, fixed bin);
dcl  ssu_$arg_ptr entry (ptr, fixed bin, ptr, fixed bin (21));
dcl  substr builtin;
dcl  undo_request char (100);				/* rmdb request that will cause the db to become consistent */
dcl  unused2 char (200);				/* output from mdbm_util_$inconsistent_get_info */
dcl  verify builtin;

     end rmdb_rq_create_attribute;
