/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* HISTORY:

   originally written by jim gray - - july 1978
   Modified by Jim Gray - - 80-11-07, to have identifier_handler get legal characters from
   a mrds_data_ item in common with the rest of mrds (this removed "." as a legal character)

   80-12-15 Jim Gray : added check for last token being "-" ahead of edit proc
   keywords, as part of un-reserving keywords in CMDB.

   81-06-04 Jim Gray : removed token types no longer
   acepted by mrds_rst_semantics, such as constants for the -check option
   which was never implemented.

   81-07-29 Jim Gray : added correct handling of a "/" by itself in the source.

   83-10-01 Roger Lackey : Modified to correct multi-line comment sometimes
            not putting all of comment in listing. (TR phx15198)
*/

mrds_rst_scanner: procedure (lex_stack_ptr, stack_index);
%page;
/* DESCRIPTION:
   lexical analyzer or scanner for returning tokens from the restructuring source to the parser.
   a token may be an identifier, keyword, number, special character or end of file.
   an integer encoding value is also returned for use by the parser in identifying the token
   and pointers to the token in the source, and the start of the current line are returned
   as well as the line number and length of the token. A line numbered version of the original source can be produced.
   comments and white space are skipped over, and any invalid characters are detected..

   there are two entries:
   init entry -  should be called first for initialization
   normal entry - for returning tokens from the source
*/

/* PARAMETERS:
   === normal entry ===
   lex_stack_ptr - - (input) pointer to the lexical stack

   stack_index - - (input) stack element which is hold the returned token, etc.

   lex_stack - - (output) the specified element contains the token pointer, length, encoding,
   and line number and line start pointer

   (output) for the line numbered listing goes to "source_segment".list

   === init entry ===
   err_ptr - - (input) pointer to retructure control segment

   source_seg_ptr - - (input) pointer to the restructuring directives source segment

   source_length - - (input) length in characters of the source segment */
%page;
/* normal entry */

	goto state (START);





/* initialization entry */

mrds_rst_scanner$init: entry (err_ptr, source_seg_ptr, source_length);


/* get restructure conrol pointer, set up line number and pointer,
   make first character and it's type available */

	static_rsc_ptr = err_ptr;
	call mrds_rst_rsc_alloc (static_rsc_ptr, TOKEN, accum_token_ptr);
	call mrds_rst_rsc_alloc (static_rsc_ptr, OUTPUT_TEXT, output_text_ptr);
	call get_next_char_init (source_seg_ptr, source_length, char_ptr, char_type, char);
	call keyword_lookup ("check_proc", CHECK_PROC);
	call keyword_lookup ("encode_proc", ENCODE_PROC);
	call keyword_lookup ("decode_proc", DECODE_PROC);

	return;









/* START */
state (0):


/* using the type code for the current character, go to the appropiate state for that class of tokens,
   the parser having initialized the current character before the first call, and scanner obtaining the next
   character to be used when called again before returning to the parser */

	token = "";
	token_length = 0;
	fixed_value = 0;
	float_value = 0.0;
	symbol_found = "0"b;
	token_too_long_seen = "0"b;

/* continue on next page

   loop from start state to the recognition states,
   while a token is not found, and end of source is not detected */
%page;
	do while (^symbol_found);
	     goto state (char_type);

/* LETTER */
state (1):

/* letter found, accumulate characters that are letters, numbers, underscores, hyphens into an identifier token
   then make checks for keywords and pathnames that may follow to provide correct parser and scanner encoding */

	     call identifier_handler ();
	     call stack_put ();
	     symbol_found = "1"b;
	     goto state (CASE_END);

/* DIGIT */
state (2):

/* digit found, accumulate digits,
   into a number and convert from ascii to binary */

	     if ^number_convert () then ;
	     else do;
		     call stack_put ();
		     symbol_found = "1"b;
		end;
	     goto state (CASE_END);

/* SPECIAL */
state (3):

/* special character found, if slash, check for comment
   else return encoding for the character */

	     if comment_skip () then ;
	     else do;

/* not a comment, single character special instead, get it's encoding */

		     call encode_special ();
		     call stack_put ();
		     symbol_found = "1"b;
		end;
	     goto state (CASE_END);


/* A_PATH_ENTRY */
state (4):

/* start of a pathname or entry name detected */

	     call path_entry_handler ();
	     call stack_put ();
	     symbol_found = "1"b;
	     goto state (CASE_END);

/* NL */
state (5):

/* new line detected */

	     call get_next_char_new_line (char_ptr, char_type, char);
	     symbol_found = "0"b;
	     goto state (CASE_END);

/* WHITE_SPACE */
state (6):

/* white space detected, skip over it */

	     call get_next_char_non_white (char_ptr, char_type, char);
	     symbol_found = "0"b;
	     goto state (CASE_END);

/* ILLEGAL */
state (7):

/* illegal character detected */

	     call ioa_$rs ("^a^a^a ^d ^a ^d^a", message, message_length,
		"Character """, char, """, before token number", token_count + 1, "on line", line_number, ".");
	     call mrds_rst_error (static_rsc_ptr, 1 /* severity */, mrds_error_$rst_illegal_char, (message));
	     call get_next_char (char_ptr, char_type, char);
	     symbol_found = "0"b;
	     goto state (CASE_END);

/* EOF */
state (8):

/* end of input detected */

	     encoding = EOI;
	     token_ptr = char_ptr;
	     call stack_put ();
	     symbol_found = "1"b;
	     goto state (CASE_END);

/* CASE_END */
state (9):

	end;
	return;
%page;
stack_put: procedure ();

/* increment the number of tokens seen in this line */

	token_count = token_count + 1;

/* routine to put the token info into the stack */

	lex_stack (stack_index).symptr = token_ptr;
	lex_stack (stack_index).symlen = token_length;
	lex_stack (stack_index).line = line_number;
	lex_stack (stack_index).symbol = encoding;
	lex_stack (stack_index).val = fixed_value;
	lex_stack (stack_index).float = float_value;
	lex_stack (stack_index).line_strt = line_ptr;
	lex_stack (stack_index).line_size = line_length;
	lex_stack (stack_index).token_num = token_count;

	previous_token_type = encoding;
     end;
%page;
identifier_handler: procedure ();

/* routine to assemble identifiers, make keyword encodings,
   and set up for path names to follow certain keywords */

	token_ptr = char_ptr;
	do while (index (mrds_data_$valid_id_chars, char) ^= 0);
	     call add_char_to_token ();
	     call get_next_char (char_ptr, char_type, char);
	end;

/* find out if this is a keyword */

	call keyword_lookup (token, encoding);
	if encoding ^= 0 then ;
	else encoding = IDENTIFIER;

/* if this was a path name keyword, check for absolute pathname following(i.e. ">" next),
   and set up char_type to get the pathname on the next call to scanner */

	if encoding = CHECK_PROC | encoding = ENCODE_PROC | encoding = DECODE_PROC then do;


/* do double check that the previous token was a "-", else
   we don't really have an edit procedure keyword */

		if previous_token_type ^= index (SPECIAL_LIST, "-") then
		     encoding = IDENTIFIER;		/* not a real keyword */
		else do;

/* get next good character after keyword, it should be ">" */

			temp_line_number = line_number;
			good_char = "0"b;
			do while (^good_char);
			     if char_type ^= WHITE_SPACE & char_type ^= NL then
				good_char = "1"b;
			     else if char_type = WHITE_SPACE then
				call get_next_char_non_white (char_ptr, char_type, char);
			     else if char_type = NL then
				call get_next_char_new_line (char_ptr, char_type, char);
			end;
			if char = ">" then
			     char_type = A_PATH_ENTRY;
			else do;

				call ioa_$rs ("^a ^d^a ^d^a", message, message_length,
				     "Absolute pathname missing or not starting with "">"" after token",
				     token_count + 1, ", a procedure path keyword in line", temp_line_number, ".");
				call mrds_rst_error (static_rsc_ptr, 2 /* severity */,
				     mrds_error_$rst_missing_pathname, (message));

			     end;
		     end;

	     end;
     end;
%page;
add_char_to_token: procedure ();

/* if max token size not exceeded, append current character
   to the accumulating token variable, else truncate it at the max size  */

	on stringsize /* capture max size exceeded */
	     begin;

/* issue error message on first occurence only */

		if token_too_long_seen then ;
		else do;
			token_too_long_seen = "1"b;
			call ioa_$rs ("^a ^d ^a ^d ^a", message, message_length,
			     "A token on line", line_number, "exceeds the maximum string size of",
			     mrds_data_$max_string_size, "characters, it is being truncated at that length.");
			call mrds_rst_error (static_rsc_ptr, 2 /* severity */, mrds_error_$rst_token_too_long, (message));
		     end;

		goto truncate_token;

	     end;

/* normal action appends character to token */

(stringsize): token = token || char;
	token_length = token_length + 1;

truncate_token:


     end;
%page;
number_convert: procedure () returns (bit (1));

/* routine to accumulate extent of number in ascii, and convert it to the
   appropriate internal form and give it the required parser encoding */

	fixup_done = "0"b;
	token_ptr = char_ptr;

/*    accumulate  positive integer numbers as the token */

	mantissa_end = "0"b;
	radix_found = "0"b;
	do while (^mantissa_end);

	     do while (char_type = DIGIT);
		call add_char_to_token ();
		call get_next_char (char_ptr, char_type, char);
	     end;


	     mantissa_end = "1"b;

	end;


/* good number found, check for possible exponent */

	number_found = "1"b;

/* number processed, assign the appropiate encoding value for the parser */

	encoding = INTEGER;

/* get the binary equivalent for this number, if semantics has not shut off converting */

	if static_rsc_ptr -> rsc.skip_scanner_conversion then ;
	else call binary_conversion ();


/* return success for good number, failure for illegal character "." by itself, and use corrected token rather than source */

	if ^fixup_done then ;
	else call substitute_fixup_token ();

	return (number_found);
%page;
binary_conversion: procedure ();

/* routine to do ascii to binary conversion of numbers */

/* use the large number fixup on conversion overflow */

	on size call fixup_conversion;
	on fixedoverflow call fixup_conversion;
	on overflow call fixup_conversion;
	on underflow call fixup_conversion;
	on conversion call fixup_conversion;

/* convert the accumulated ascii token to binary */

	fixed_value = fixed (binary (token));


/* conversion error fixup return */
SKIP_CONVERT:

	return;



fixup_conversion: procedure ();

/* use the largest number in place of the one that is too big */

	fixup_done = "1"b;

	temp_token = copy ("1", 71) || "b";
	fixed_value = fixed (binary (temp_token));
	call ioa_$rs ("^a ^a ^a ^d ^a ^d ", message, message_length,
	     "The number", token, "in line", line_number, "is too large, using value", fixed_value);
	token = temp_token;

	call mrds_rst_error (static_rsc_ptr, 2 /* severity */,
	     mrds_error_$rst_conversion_error, (message));

	goto SKIP_CONVERT;

     end;

     end;

     end;
%page;
substitute_fixup_token: procedure ();

/* save the fixup version of the token, and point to it rather than the source */

	token_length = length (token);
	call mrds_rst_rsc_alloc$variable (static_rsc_ptr, FIXUP_TOKEN, (token_length), token_ptr);
	token_ptr -> fixup_token = token;


     end;
%page;
comment_skip: procedure () returns (bit (1));

/* check for presence of a comment, return failure if not found */

	token_ptr = char_ptr;
	token = char;
	call get_next_char (char_ptr, char_type, char);
	if (token = "/" & char ^= "*") | (token ^= "/") then do;
		if token ^= "/" then
		     result = "0"b;
		else do;
			result = "1"b;		/* skip over illegal character */
			call ioa_$rs ("^a^a^a ^d ^a ^d^a", message, message_length,
			     "Character """, token, """, before token number", token_count + 1, "on line", line_number, ".");
			call mrds_rst_error (static_rsc_ptr, 1 /* severity */, mrds_error_$rst_illegal_char, (message));
		     end;
	     end;
	else do;

/* routine to bypass comments in the source */

		comment_end = "0"b;
		char = " ";
		do while (^comment_end);

		     do while (char ^= "*" & char_type ^= EOF);
			if char_type ^= NL then
			     call get_next_char_non_white (char_ptr, char_type, char);
			if char_type = NL then
			     call get_next_char_new_line (char_ptr, char_type, char);
		     end;

		     if char_type = EOF then
			comment_end = "1"b;
		     else do;
			     call get_next_char (char_ptr, char_type, char);
			     if char ^= "/" & char_type ^= EOF then ;
			     else comment_end = "1"b;
			     if char_type ^= NL then ;
			     else call get_next_char_new_line (char_ptr, char_type, char);
			end;

		end;


/* check for comment error */

		if char_type ^= EOF then ;
		else do;
			call ioa_$rs ("^a ^d^a", message, message_length,
			     "Comment ends line number", line_number, ".");
			call mrds_rst_error (static_rsc_ptr, 2 /* severity */,
			     mrds_error_$rst_comment_ends_source, (message));
		     end;

		token = "";
		call get_next_char_non_white (char_ptr, char_type, char);
		symbol_found = "0"b;
		result = "1"b;

	     end;

	return (result);

     end;
%page;
encode_special: procedure ();

/* routine to produce the parser encoding of the special character just found */

	token_length = 1;
	special_index = index (SPECIAL_LIST, token);
	if special_index ^= 0 then
	     encoding = CODE (special_index);
	else do;
		encoding = EOI;
		call ioa_$rs ("^a ^a ^a ^d^a", message, message_length,
		     "Special character", token, "in line", line_number, ".");
		call mrds_rst_error (static_rsc_ptr, 4 /* severity */, mrds_error_$rst_bad_encoding, (message));
	     end;

     end;
%page;
path_entry_handler: procedure ();

/* routine to accumulate character strings representing either path names,
   or entry names into tokens and give them the proper parser encoding */


/* if path name detected by identifier handler, reset the ">" char_type to special */

	if char ^= "$" then do;
		encoding = PATH_NAME;
		char_type = SPECIAL;
	     end;

/* else we have an entry name starting with "$", throw that character away */

	else do;
		encoding = ENTRY_NAME;
		call get_next_char (char_ptr, char_type, char);
	     end;

/* get the length for and pointer to this path/entry name
   path names end in white space or "$", entry names end in white space
   a "," or ";" also ends them due to domain statement syntax */

	token_ptr = char_ptr;
	do while (char_type ^= WHITE_SPACE & char_type ^= NL & char_type ^= A_PATH_ENTRY & char_type ^= EOF
	     & char ^= "," & char ^= ";");
	     token_length = token_length + 1;
	     call get_next_char (char_ptr, char_type, char);
	end;

/* check for name ending source prematurely */

	if char_type ^= EOF then ;
	else do;
		call ioa_$rs ("^a ^d^a ^d^a", message, message_length,
		     "Pathname is token", token_count + 1, ", on line", line_number, ".");
		call mrds_rst_error (static_rsc_ptr, 2 /* severity */,
		     mrds_error_$rst_pathname_ends_source, (message));
	     end;

     end;
%page;
get_next_character_routine: procedure ();		/* dummy entry, not used */

/* This procedure has four entry points.
   get_next_char_init   should be called first to set up things
   get_next_char_new_line is used to advance the current line, output it, and get the first char
   get_next_char_non_white skips white spaces until a valid character is found
   get_next_char$get_next_char  returns only info about the next char in source
*/



/* INIT */
get_next_char_init: entry (s_seg_ptr, s_seg_len, chr_ptr, type, chr_val); /* This entry initializes internal stativ values */

	seg_ptr = s_seg_ptr;			/* Save source segment pointer and length */
	seg_len = s_seg_len;			/*   in internal static variable */
	pos = 1;					/* Starting position is first character */
	line_number = 0;



/* NEW LINE */
get_next_char_new_line: entry (chr_ptr, type, chr_val);	/* entry to advance to next line */

	if pos > seg_len then ;
	else do;

/* find end of next line */

		line_ptr = addr (char_string (pos));
		line_length = index (substr (line_ptr -> source, 1, seg_len - pos + 1), NL_CHAR);
		if line_length ^= 0 then ;		/* next lines NL found */
		else line_length = seg_len - pos + 1;	/* segment doesn't end last line with NL */

		line_number = line_number + 1;
		token_count = 0;

		if ^static_rsc_ptr -> rsc.listing_seg_sw then ;
		else do;

/* listing switch on, output the current line */

			line_no_pic = line_number;
			output_text = line_no_pic || "   " || substr (line_ptr -> source, 1, line_length);

			call iox_$put_chars (static_rsc_ptr -> rsc.listing_iocb_ptr,
			     addrel (addr (output_text), 1), length (output_text), code);
			if code = 0 then ;
			else do;
				call ioa_$rs ("^a ^d ^a", message, message_length,
				     "Error in trying to output line number", line_number, "to listing segment rmdb.list");
				call mrds_rst_error (static_rsc_ptr, 4 /* severity */,
				     mrds_error_$rst_io_error, (message));
			     end;
		     end;
	     end;

	goto get_first_char;


/* NEXT NON WHITE */
get_next_char_non_white: entry (chr_ptr, type, chr_val);	/* This entry skips white space */

	if pos <= seg_len then do;			/* for positions less than segment length + 1 */

		type = mrds_rst_translate (fixed (char_bits (pos), 9)); /* get character type */

		do while (type = WHITE_SPACE & pos <= seg_len); /* Skip until type is not white space */
		     pos = pos + 1;			/* Current position gets bumped */
		     type = mrds_rst_translate (fixed (char_bits (pos), 9)); /* Determine caracter type */
		end;
						/* pos is the index of the next non-white-space character */
	     end;



/* NEXT CHAR */
get_first_char: ;
get_next_char: entry (chr_ptr, type, chr_val);		/* return next character in source */

	if pos <= seg_len then do;			/* Not passed end of segment */
		chr_val = char_string (pos);		/* Get character */
		type = mrds_rst_translate (fixed (char_bits (pos), 9)); /* Get character type from table */
		chr_ptr = addr (char_string (pos));	/* Get pointer to caracter */
		pos = pos + 1;			/* Bump index to next char posiition */
	     end;

	else do;
		type = EOF;			/* Position was beyond end of segment */
		chr_val = " ";
	     end;


	return;
%page;
/*	PARAMETERS	*/

	dcl     s_seg_ptr		 ptr;		/* (INPUT) Pointer to source segment */
	dcl     s_seg_len		 fixed bin (24);	/* (INPUT) Length of source segment in chars */

	dcl     chr_val		 char (1);	/* (OUTPUT) Current character */
	dcl     type		 fixed bin;	/* (OUTPUT) Character type from map */
	dcl     chr_ptr		 ptr;		/* (OUTPUT) Pointer to current character */

/*	STATIC VARIABLES	*/

	dcl     pos		 fixed bin (24) internal static init (1); /* Index position in to character string */
	dcl     seg_ptr		 ptr int static init (null); /* Pointer to input segment (source segment) */
	dcl     seg_len		 fixed bin (24) int static init (0); /* Length of input segment (source) */
	dcl     NL_CHAR		 char (1) internal static init ("
");						/* new line character */

/*	OTHERS		*/

	dcl     addr		 builtin;

/* 	BASED VARIABLES	*/

	dcl     char_string		 (seg_len) char (1) based (seg_ptr); /* Treat char string as char array */
	dcl     char_bits		 (seg_len) bit (9) unal based (seg_ptr); /* Treat char string as bit array */
%page;
%include mrds_rst_translate;
     end get_next_character_routine;
%page;
keyword_lookup: procedure (token, encodement);

/* routine to do binary search of keywords known to mrds restructuring
   against a supplied identifier and return an
   encoded value for the keyword if a match if found, else return zero */

/* initialize the starting range for the binary search
   as that of the whole array, and set the
   first probe point to its middle */

	low = lbound (keyword, 1);
	high = hbound (keyword, 1);
	middle = (low + high) / 2;

/* proceed to divide the range in half,
   searching the half remaining that contains
   the value range (in ascii sequence) of
   the supplied identifier */

	do while (token ^= keyword.name (middle) & high > low);

	     if token > keyword.name (middle) then
		low = middle + 1;
	     else high = middle - 1;

	     middle = (low + high) / 2;

	end;

/* check to see if the search was successful */

	if token = keyword.name (middle) then
	     encodement = keyword.value (middle);
	else encodement = 0;
%page;
/* the following declaration that includes the encoding
   for keywords was generated by the keyword sorted list tool,
   for use with the terminal encoding as derived from
   use of the lrk tool on the mrds restructuring bnf - - see D. Ward's documentation */

%include mrds_rst_keywords;
%page;

	dcl     low		 fixed binary;	/* current low search for part of array left to be searched */
	dcl     high		 fixed binary;	/* current high search search */
	dcl     middle		 fixed binary;	/* current probe point in array */
	dcl     (lbound, hbound)	 builtin;		/* functions known to pl1 to get array bounds */
	dcl     token		 char (*) varying;	/* identifier to be searched for as keyword */
	dcl     encodement		 fixed binary;	/* encoding value to be given to found keyword */

     end;
%page;
	dcl     stack_index		 fixed bin (24) aligned; /* place in lexical stack to put returned token */
	dcl     encoding		 fixed binary;	/* integer value expected by parser to represent this token */
	dcl     token_too_long_seen	 bit (1);		/* ON => previous error message issued */
	dcl     stringsize		 condition;	/* target too small for string */
	dcl     good_char		 bit (1);		/* on => character is not white space or new line char */
	dcl     mantissa_end	 bit (1);		/* end of mantissa flag */
	dcl     radix_found		 bit (1);		/* on => radix point found in mantissa */
	dcl     fixed_value		 fixed binary (71); /* converted binary value of a fixed number */
	dcl     float_value		 float binary (63); /* converted binary value of a float number */
	dcl     symbol_found	 bit (1);		/* on => token has been found */
	dcl     comment_end		 bit (1);		/* on => end of comment reached */
	dcl     mrds_rst_rsc_alloc$variable entry (ptr, fixed bin, fixed bin (35), ptr); /* working area alloc routine */
	dcl     mrds_rst_rsc_alloc	 entry (ptr, fixed bin, ptr); /* for non-variable allocations */
	dcl     ioa_$rs		 entry options (variable); /* string manipulation routine for error messages */
	dcl     message		 char (256) varying;/* error message with details */
	dcl     message_length	 fixed binary;	/* length of error message */
	dcl     mrds_rst_error	 entry (ptr, fixed binary, fixed binary (35), char (*)); /* error handling routine */
	dcl     result		 bit (1);		/* on => a comment was found and skipped */
	dcl     number_found	 bit (1);		/* off => "." by itself skipped as illegal */
	dcl     token_ptr		 ptr;		/* pointer to token start in source */
	dcl     (size, overflow, underflow, fixedoverflow, conversion) condition; /* trap for conversion overflow */
	dcl     mrds_error_$rst_token_too_long fixed bin (35) external; /* token exceed max string size */
	dcl     mrds_error_$rst_pathname_ends_source fixed binary (35) external; /* premature segment end by a name */
	dcl     mrds_error_$rst_missing_pathname fixed binary (35) external; /* expected pathname missing after keyword */
	dcl     mrds_error_$rst_conversion_error fixed binary (35) external; /* number convert onverflow error */
	dcl     mrds_error_$rst_io_error fixed binary (35) external; /* error during io attempt */
	dcl     mrds_error_$rst_comment_ends_source fixed binary (35) external; /* long comment error code */
	dcl     mrds_error_$rst_illegal_char fixed binary (35) external; /* bad char error code */
	dcl     mrds_error_$rst_bad_encoding fixed binary (35) external; /* bad integer code for special char */
	dcl     special_index	 fixed binary;	/* index of special char encoding in the CODE array */
	dcl     index		 builtin;		/* search function known to pl1 */
	dcl     source_seg_ptr	 ptr;		/* pointer to restructuring directives source segment */
	dcl     err_ptr		 ptr;		/* pointer to restructure control segment */
	dcl     source_length	 fixed binary (24); /* character length of source segment */
	dcl     sys_info$max_seg_size	 fixed binary (35) external; /* system constant for largest size segment */
	dcl     (fixed, rel, addr)	 builtin;		/* functions known to pl1 */
	dcl     temp_line_number	 fixed binary (21); /* storage for error line number */
	dcl     line_no_pic		 picture "zzzzzz9"; /* number of output line, formatted */
	dcl     source		 char (sys_info$max_seg_size) based; /* overlay to extract source lines */
	dcl     fixup_done		 bit (1);		/* on => change made to token to correct error */
	dcl     code		 fixed binary (35); /* error code from subroutine calls */
	dcl     iox_$put_chars	 entry (ptr, ptr, fixed bin (21), fixed bin (35)); /* listing io routine */
	dcl     (addrel, binary, copy, length, substr) builtin;
	dcl     temp_token		 char (96) varying; /* temp storage for fixup value */
	dcl     ENCODE_PROC		 fixed binary internal static; /* encoding value for keyword encode_proc */
	dcl     DECODE_PROC		 fixed binary internal static; /* encoding value for keyword decode_proc */
	dcl     CHECK_PROC		 fixed binary internal static; /* encoding value for keyword check_proc */
	dcl     mrds_data_$valid_id_chars char (128) varying ext; /* common place for getting legal identifier characters */
	dcl     previous_token_type	 fixed bin int static init (0); /* last token encoding */
%page;

%include mrds_rst_parse_stack;
%page;
%include mrds_rst_scan;
%page;
%include mrds_rst_rsc;
%page;
%include mrds_rst_struct_types;
%page;
%include mrds_rst_parse_info;

     end;


