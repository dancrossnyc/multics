/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

mrds_rst_create_db: proc (rsc_ptr, dbm_ptr, code);


/****^  HISTORY COMMENTS:
  1) change(85-12-03,Spitzer), approve(85-12-03,MCR7311),
     audit(86-09-02,Blair), install(86-10-16,MR12.0-1187):
     initialize unreferenced_attribute_ptr offset.
                                                   END HISTORY COMMENTS */


/*
                            BEGIN_DESCRIPTION
   This procedure creates the skeleton of a database, including:
   db_model (data base model segment)
   dbc (database control segment)

   These segments are initialized before returning.
   If an error occures the data base is not created (it is deleted).
 		        END_DESCRIPTION
*/


/* HISTORY

   Written by Roger D. Lackey    December  1978

   Modified by Jim Gray - 3/20/79 - - to handle new versions of model and working storage (rsc)

   Modified by Jim Gray - - 80-11-06, to
   1) add initialization of mdbm_secured bit in db_model
   2) always create a submodel_dir under the database dir
   3) change the version_status major number from 7 to 8
   4) put the version_status number in a mrds_data_ entry

   Modified by Jim Gray - - 80-11-07, to put the name of the submodel dir
   in a standard mrds_data_ entry fors users and mrds to refer to.

   Modified by Jim Gray - - 80-11-10, to change delete_$path to calls to hcs_$delentry_file
   and hcs_$del_dir_tree for performance purposes.

   80-12-09 Jim Gray : mdbm_util_$init_dbc changed to call to mdbm_util_$create_control_segment
   as part of r-u to r-s-m-d scope mode and dbc version change.
   CMDB now always creates version 5 dbc structures in a segment "db.control".

   82-04-09 Davids: modified the init_db_model procedure so that it uses
   .                the new names for elements in the db_model, specifically
   .                unused_offsets and restructuring_history_offset.

   82-04-15 Davids: changed unused_offset (13) to inconsistent_message_offset

   82-05-04 Davids: changed unused_offset (12) to last_restructuring_history_offset
   .                and added the prefix first_ to restructuring_history_offset

   82-08-19 Davids: changed code to set the value of db_model.db_type to either
                    1 (vfile db) or 2 (page_file db) based on the value of
                    rsc.db_type instead of just always setting it to 1.

   83-02-14 Davids: modified to use the new db_type_flags in the db_model
   structure instead of the old numeric db_type.

   83-10-04 Benjamin: reverted change of 80-11-10.
*/

/* PARAMETERS

   rsc_ptr (INPUT) pointer to control segment (contains rsc.temp_dir (database path))
   dbm_ptr (OUTPUT) pointer to db_model
   code (OUTPUT) error code

   */
%page;
	db_created_sw = OFF;

	on cleanup call tidy_up;			/* Set a cleanup handler */

	if rsc.meter_sw | rsc.trace_sw then
	     call mrds_rst_meter (rsc_ptr, MODULE_NAME, ON, "");

	call expand_pathname_ (rsc.temp_dir, dir, db_ent, code);
	if code ^= 0 then call error (code);

	call hcs_$append_branchx (dir, db_ent, 11, RINGS, /* Create the data base directory */
	     get_group_id_$tag_star (), 1, 0, 0, code);
	if code ^= 0 then call error (code);

	db_created_sw = ON;				/* Remember database directory was created */

	call hcs_$append_branchx (rtrim (dir) || ">" || rtrim (db_ent), /* create the submodel_dir */
	     mrds_data_$submodel_dir_name, 11, RINGS, get_group_id_$tag_star (), 1, 0, 0, code);
	if code ^= 0 then call error (code);

	call hcs_$make_seg (rsc.temp_dir, "db_model", "", 10, dbm_ptr, code); /* Create the db_model */
	if dbm_ptr = null then call error (code);

	else call init_db_model;

	call mdbm_util_$create_control_segment (rsc.temp_dir, dbc_ptr, dbc_bit_count, code);
	if code ^= 0 then call error (code);


exit:	if rsc.meter_sw | rsc.trace_sw then
	     call mrds_rst_meter (rsc_ptr, MODULE_NAME, OFF, "");

	return;					/* Only exit from this procedure */
%page;
error: proc (cd);

	dcl     cd		 fixed bin (35);

	call tidy_up;
	code = cd;				/* Set return error code */
	goto exit;

     end error;





tidy_up: proc;					/* Clean up procedure */

	if db_created_sw				/* If database created then delete it */
	then do;
		delete_options.force = ON;
		delete_options.question = OFF;
		delete_options.directory = ON;
		delete_options.segment = ON;
		delete_options.link = ON;
		delete_options.chase = ON;
		delete_options.raw = OFF;
		delete_options.library = OFF;
		delete_options.mbz = OFF;

		call delete_$path (dir, db_ent, string (delete_options), MODULE_NAME, code);

	     end;

     end tidy_up;
%page;
init_db_model: procedure;

/* This procedure initializes the db_model */

	db_model_path = rtrim (rsc.temp_dir) || ">db_model";

	db_model.version = mdbm_data_$current_version;
	db_model.dbm_area = empty;
	db_model.version_ptr = set_version ();
	db_model.changer_ptr = set_change_time ();
	db_model.uniq_sw_name = unique_chars_ ("0"b) || ".mrds" || copy (" ", 32 - 15 - 5); /* unique switch name */
	db_model.db_type_flags.vfile_type =
	     ^rsc.db_relation_mode_flags.dm_file_type;
	db_model.db_type_flags.concurrency_on =
	     rsc.db_relation_mode_flags.concurrency_on;
	db_model.db_type_flags.transactions_needed =
	     rsc.db_relation_mode_flags.protection_on;
	db_model.db_type_flags.rollback_on =
	     rsc.db_relation_mode_flags.rollback_on;
	db_model.consistant = "0"b;
	db_model.mdbm_secured = rsc.secure;		/* on if cmdb -secure option */
	db_model.copy_good = "0"b;
	db_model.reserved = "0"b;
	db_model.num_rels = 0;
	db_model.blk_file_id_len = 0;
	db_model.unblk_file_id_len = 0;
	db_model.num_blk_files = 0;
	db_model.num_unblk_files = 0;
	db_model.num_domains = 0;
	db_model.num_dyn_links = 0;
	db_model.max_max_tuples = 0;
	db_model.pad_1 = 0;
	db_model.pad_2 = 0;
	db_model.file_ptr = NULL_OFFSET;
	db_model.domain_ptr = NULL_OFFSET;
	db_model.unreferenced_attribute_ptr = NULL_OFFSET;
	db_model.unused_offsets (*) = NULL_OFFSET;
	db_model.last_restructuring_history_offset = NULL_OFFSET;
	db_model.inconsistent_message_offset = NULL_OFFSET;
	db_model.first_restructuring_history_offset = NULL_OFFSET;

	return;
     end init_db_model;
%page;
set_version: procedure () returns (bit (18));

/* fill in the version structure */
/* this major number was 7 for the MR8 mrds release,
   it was changed to 8 on 80-11-06, to signify the addition of the submodel_dir to the architecture */

	call mrds_rst_model_alloc (rsc_ptr, db_model_path, VERSION_STATUS, version_status_ptr);

	if version_status_ptr = null () then
	     call model_overflow ("version_status");
	else do;


/* CMDB/RMDB source code version */

		version_status.cmdb_rmdb.major = mrds_data_$current_version_status; /* MR8.0 */
		version_status.cmdb_rmdb.minor = 0;
		version_status.cmdb_rmdb.modification = " ";

/* database model version */

		version_status.model.major = mrds_data_$current_version_status;
		version_status.model.minor = 0;
		version_status.model.modification = " ";

/* resultant model version */

		version_status.resultant.major = mrds_data_$current_version_status;
		version_status.resultant.minor = 0;
		version_status.resultant.modification = " ";

	     end;


	return (rel (version_status_ptr));

     end;
%page;
set_change_time: procedure () returns (bit (18));

/* fill in the user_id and time for the database creator */

	call mrds_rst_model_alloc (rsc_ptr, db_model_path, CHANGER, changer_ptr);

	if changer_ptr = null () then
	     call model_overflow ("changer");

	else do;

		changer.id = get_group_id_ ();
		changer.time = clock ();
		changer.next = NULL_OFFSET;		/* creator = last on list */

	     end;

	return (rel (changer_ptr));

     end;
%page;
model_overflow: procedure (struct_cause);

/* report mdb_model overflow, first time only */

	if rsc.model_overflow then ;
	else do;
		rsc.model_overflow = ON;

		call ioa_$rs ("^a^a^a^a", message, message_length,
		     "LOGIC ERROR in mrds_rst_create_db, the db_model area overflowed",
		     "while processing the structure """, struct_cause, """.");

		call mrds_rst_error (rsc_ptr, 4 /* severity */, mrds_error_$rst_logic_error, (message));

	     end;



	declare struct_cause	 char (*);	/* either "changer", or "version_status" */

     end;
%page;
/* External entries */

	declare ioa_$rs		 entry options (variable); /* string manipulator */
	declare mrds_error_$rst_logic_error fixed bin (35) ext; /* program error */
	declare mrds_rst_error	 entry (ptr, fixed bin, fixed bin (35), char (*)); /* general error routine */
	declare mrds_rst_model_alloc	 entry (ptr, char (*), fixed bin, ptr); /* model allocation routine */
	declare unique_chars_	 entry (bit (*)) returns (char (15)); /* unique char string routine */
	dcl     mdbm_util_$create_control_segment entry (char (168), ptr, fixed bin (24), fixed bin (35));
	declare dbc_bit_count	 fixed bin (24);
	dcl     mdbm_data_$current_version ext fixed bin (35);
	dcl     expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     get_group_id_$tag_star entry returns (char (32));
	dcl     get_group_id_	 entry returns (char (32));
	dcl     clock		 builtin;
	dcl     addr		 builtin;
	dcl     copy		 builtin;
	dcl     fixed		 builtin;
	dcl     rel		 builtin;
	dcl     rtrim		 builtin;
	dcl     string		 builtin;
	dcl     delete_$path	 entry (char (*), char (*), bit (36) aligned, char (*),
				 fixed bin (35));
	dcl     hcs_$append_branchx	 entry (char (*), char (*), fixed bin (5), (3) fixed bin (3), char (*), fixed bin (1), fixed bin (1),
				 fixed bin (24), fixed bin (35));
	dcl     hcs_$make_seg	 entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
	dcl     mrds_rst_meter	 entry (ptr, char (*), bit (1), char (*));
	dcl     MODULE_NAME		 char (18) int static options (constant) init ("mrds_rst_create_db");
	dcl     OFF		 bit (1) int static options (constant) init ("0"b);
	dcl     ON		 bit (1) int static options (constant) init ("1"b);
	dcl     RINGS		 (3) fixed bin (3) init static options (constant) init (7, 7, 7); /* Ring brackets */


	declare message		 char (120) varying;/* specifics of error message */
	declare message_length	 fixed bin (21);	/* length of specifics string */
	dcl     dir		 char (168);	/* Directory superior to data base */
	declare db_model_path	 char (168);	/* path down to db_model segment */
	declare mrds_data_$current_version_status fixed bin (35) ext; /* display_mrds_dm needs to know about this */
	declare mrds_data_$submodel_dir_name char (16) ext; /* common place to get name of submodel dir */
	dcl     db_ent		 char (32);	/* Data base directory name */
	dcl     code		 fixed bin (35);	/* error code */
	dcl     db_created_sw	 bit (1);		/* ON => Db_directory was created */
	dcl     (empty, null)	 builtin;
	dcl     NULL_OFFSET		 bit (18) unal int static options (constant) init ("111111111111111111"b);
	dcl     cleanup		 condition;
	dcl     sys_info$max_seg_size	 ext fixed bin (35);
%page;
%include mrds_rst_struct_types;
%page;
%include mdbm_db_model;
%page;
%include mdbm_dbc;
%page;
%include mrds_rst_rsc;
%page;
%include delete_options;

     end mrds_rst_create_db;

