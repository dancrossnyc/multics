/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

mrds_rst_list_element: procedure (key, structure_type, rsc_ptr, root_ptr, structure_ptr, error_code);


/* HISTORY:

   originally written by jim gray - - july 1978
   modified by Jim Gray 2/19/79, to allocate structures in areas according to type,
   this changed the area_ptr input to an rsc_ptr input parameter

*/

/* DESCRIPTION:

   add or delete global list header and data space
   the global restructuring lists are made up of elements
   that have two parts.  the head portion is a node
   in a binary tree with a link to a data portion that
   may be one of several pl1 structures.

   there are two entries:
   entry add - inserts the head portion into the
   tree and links it newly allocated data space.
   entry delete - deletes the head portion and
   frees the allocated data space.     */


/* PARAMETERS:

   key - - (input) data key used for location of head portion in search tree

   structure_type - - (input) the type of pl1 structure in the include file
   that is to be allocated or freed (see include file)

   rsc_ptr - - (input) pointer to the common rsc segment, that contains pointers to the areas where
   the different structure types are to be allocated, or freed from

   root_ptr - - (input/output) pointer to desired list to be manipulated,
   additions to empty lists, or deletions of root nodes change it

   error_code - - (output) value indicating either failure reason or success

   structure_ptr - - (output) when adding, the resultant pointer to the
   newly allocated structure(or to the existing structure when duplicate add attempted)

*/
%page;

add: entry (key, structure_type, rsc_ptr, root_ptr, structure_ptr, error_code);

/* entry to add element to global list
   first, get head portion for list element into
   it's proper place in the list */

	call mrds_rst_tree_insert (key, rsc_ptr, root_ptr, node_ptr, success);

/* no success means attempt to add duplicate to list,
   return error code and pointer to existing structure */

	if ^success then do;
		error_code = mrds_error_$rst_list_duplicate;
		structure_ptr = node_ptr -> node.data;
	     end;

	else do;

/* get new data portion for list element using
   the given area and structure parameters */

		if structure_type = MAIN_LIST then do;
			error_code = 0;
			call mrds_rst_rsc_alloc (rsc_ptr, GL, structure_ptr);
		     end;
		else if structure_type = SUB_LIST then do;
			error_code = 0;
			call mrds_rst_rsc_alloc (rsc_ptr, SL, structure_ptr);
		     end;
		else if structure_type = SEG_INFO then do;
			error_code = 0;
			call mrds_rst_rsc_alloc (rsc_ptr, SEGINFO, structure_ptr);
		     end;
		else do;
			error_code = mrds_error_$rst_invalid_structure_type;
			structure_ptr = null ();
		     end;

/* link data portion of element to it's head part
   that is in the global list */

		node_ptr -> node.data = structure_ptr;

	     end;

	return;





delete: entry (key, structure_type, rsc_ptr, root_ptr, error_code);

/* entry to delete global element
   first delete the head portion from list,
   saving pointer to the data portion */

	call mrds_rst_tree_delete (key, rsc_ptr, root_ptr, structure_ptr, success);

/* no success means key node was not found */

	if ^success then
	     error_code = mrds_error_$rst_list_delete_fail;

	else

/* free the data portion space with size according to structure type */

	     if structure_type = MAIN_LIST then do;
		error_code = 0;
		call mrds_rst_rsc_alloc$free (rsc_ptr, GL, structure_ptr);
	     end;
	else if structure_type = SUB_LIST then do;
		error_code = 0;
		call mrds_rst_rsc_alloc$free (rsc_ptr, SL, structure_ptr);
	     end;
	else if structure_type = SEG_INFO then do;
		error_code = 0;
		call mrds_rst_rsc_alloc$free (rsc_ptr, SEGINFO, structure_ptr);
	     end;
	else error_code = mrds_error_$rst_invalid_structure_type;
%page;


	dcl     null		 builtin;
	dcl     mrds_rst_rsc_alloc	 entry (ptr, fixed bin, ptr); /* work area manager */
	dcl     mrds_rst_rsc_alloc$free entry (ptr, fixed bin, ptr); /* freeing entry in work area manager */
	dcl     mrds_rst_tree_delete	 entry (char (32) aligned, ptr, ptr, ptr, bit (1)); /* tree node delete routine */
	dcl     mrds_rst_tree_insert	 entry (char (32) aligned, ptr, ptr, ptr, bit (1)); /* tree node insertion routine */

	dcl     structure_ptr	 ptr;		/* pointer to data space just added or to be deleted */

	dcl     structure_type	 fixed binary;	/* number 0f structure desired, see include file */
	dcl     error_code		 fixed binary (35); /* zero or failure reason code */

	dcl     mrds_error_$rst_list_duplicate fixed binary (35) external; /* attempt to add duplicate error */
	dcl     mrds_error_$rst_invalid_structure_type fixed binary (35) external; /* undefined structure type error */
	dcl     mrds_error_$rst_list_delete_fail fixed binary (35) external; /* attempt to delete missing key */
%page;
%include mrds_rst_tree;
%page;
%include mrds_rst_struct_types;
%page;
%include mrds_rst_rsc;
%page;
%include mdbm_seg_area;
%page;
%include mrds_rst_global_lists;


     end;


