/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-04-03,Spitzer), approve(86-04-03,MCR7311),
     audit(86-09-02,Blair), install(86-10-16,MR12.0-1187):
     remove unused dcls.
                                                   END HISTORY COMMENTS */


/* HISTORY:

   originally written by jim gray - - october 1978
   Modified November 1978, by Roger Lackey to  add define & cmdb section.

   81-05-18 Jim Gray : added check for number of indexed attributes
   exceeding the capabilities of the rel_id field used in the vfile
   key for secondary indexes.

   83-01-11 Ron Harvey : changed to zero out the index_id field and to set
   set max_attr_index_id field to beyond the maximum.

   83-02-17 Davids: explicitly declared variables that were declared by
   context or implication and deleted declarations to variables that were
   not referenced.
*/


mrds_rst_index_handler: procedure (rsc_ptr, list_ptr);

/* DESCRIPTION:

   this routine builds/alters the mrds database model index information
   and the global entity lists maintained by RMDB/CMDB,
   based upon the index data and directive that is active when
   called by the RMDB/CMDB parser.
   the directive may be undefine, define, redefine, or cmdb and the data is a linked list of
   structures holding the index information and its attribute list

*/

/* PARAMETERS:

   rsc_ptr - - (input) pointer to the common control segment

   list_ptr - - (input) pointer to the relation structure headed list of attribute structures

   database model - - (output) updated model with altered index information

   global lists - - (output) the list of database entities, updated
   according to directive and data

   error_output - - (output) via mrds_rst_error calls, of error messages

*/

/* REMAINING ERRORS:


   define, cmdb:

   the index name may be the <error_symbol>(this may be ignored)
   one of the attribute names may be the <error_symbol>(this may be ignored)
   the index may already be defined in the database
   one of the given attributes may not be defined as part of the given index

   undefine,    redefine:

   same as define, except index name may not be defined in the database

   note: "(this may be ignored)" means a previous error will prevent
   a database model with erroneous information from being built

*/

Start:
	directive_ptr = rsc.directive_ptr;		/* So we can use directive str */
	stmt_ptr = rsc.stmt_ptr;

	index_ptr = list_ptr;
	index_relation_name = rel_index.rel_name;	/* same for all directives */
	if rsc.trace_sw then
	     call mrds_rst_meter (rsc_ptr, "mrds_rst_index_handler", ON,
		(index_relation_name));

	if directive.type = UNDEFINE then do;		/* Undefine the index */

/* THIS IS NOT IMPLEMENTED YET SO ISSUE AN ERROR MSG */

		if stmt (directive.type).index.number > 0 then ;
		else call error (2, mrds_error_$rst_undone_option,
			"The index handler will not implement the ""undefine"" directive" ||
			" until a later release.");

	     end;					/* END of undefine */

	if directive.type = DEFINE | directive.type = CMDB then do; /* Define or cmdb section */


		item_ptr = rel_index.i_ptr;		/* rel_index.i_ptr points to list of indexed
						   attributes for this relation */
						/* Make sure relation is defined for data base */

		call mrds_rst_tree_search (rel_index.rel_name, rsc.h_grel_ptr, node_ptr, parent_ptr, success);

		if ^success then do;		/* Relation name was not found in db */

			call mrds_rst_error (rsc_ptr, 2, mrds_error_$rst_undef_rel,
			     "The indexed relation """ || rtrim (rel_index.rel_name) ||
			     """ on line " || ltrim (char (rel_index.line_num)) ||
			     " specified for the indexed attribute """
			     || rtrim (item.name) || """ has not been defined in the database.");

/* check that the given attributes are at least defined in the database */

			do while (item_ptr ^= null ());

			     call mrds_rst_tree_search (item.name, rsc.h_gattr_ptr, node_ptr, parent_ptr, success);

			     if ^success then do;


				     call mrds_rst_error (rsc_ptr, 2 /* severity */, mrds_error_$undef_attr,
					"The attribute """ || rtrim (item.name) || """ given on line " ||
					ltrim (char (item.line_num)) || " is not defined in the database.");

				end;

			     item_ptr = item.next;

			end;


		     end;

		else do;				/* Relation exists for this attribute */

			rel_gl_ptr = node_ptr -> node.data; /* Set the relation global element pointer */
			ri_ptr = rel_gl_ptr -> gl.item_info_ptr; /* So we can reference rel_info */

/* check for attempt to set index in a non-new file during the current release */

			file_gl_ptr = rel_gl_ptr -> gl.other_info_ptr; /* get rel's file gl ptr */
			if file_gl_ptr -> gl.parse_info_ptr = null () then do; /* not from source => existing file */
				call ioa_$rs ("^a^a^a ^d ^a ^a", message, message_length,
				     "The relation """, rel_index.rel_name, """ on line", rel_index.line_num,
				     "has a secondary index statement given for it, but does not belong to a newly created file,",
				     "this option will not be implemented until a later release.");
				call mrds_rst_error (rsc_ptr, 2 /* severity */, mrds_error_$rst_undone_option, (message));
			     end;
			else do;			/* new file */
				file_gl_ptr -> gl.affected = ON; /* file where relation resides is affected */
				rel_gl_ptr -> gl.affected = ON; /* This relation is affected */

/* Find attribute in sublist of relation */

				do while (item_ptr ^= null); /* Do all attributes to indexed */

				     call mrds_rst_tree_search (item.name, rel_gl_ptr -> gl.item_sub_list_ptr,
					node_ptr, parent_ptr, success);

				     if ^success then do; /* Attribute was not found in this relation */

					     call mrds_rst_error (rsc_ptr, 2, mrds_error_$rst_not_rel_attr,
						"The attribute """ || rtrim (item.name) ||
						""" given on line " || ltrim (char (item.line_num)) ||
						" was not defined for the relation """ ||
						rtrim (rel_index.rel_name) || """.");

					end;
				     else do;	/* Attribute was found in this relation */

					     attr_sl_ptr = node_ptr -> node.data; /* Attribute sub_list entry pointer */
					     ai_ptr = attr_sl_ptr -> sl.item_info_ptr; /* So we can reference attr_info */
					     fm_ptr = pointer (ai_ptr, 0); /* rel's file ptr */

					     if ai_ptr = null () | ri_ptr = null () | fm_ptr = null () then ;
					     else do;


						     if attr_info.index_attr then /* Attribute was already indexed */
							call mrds_rst_error (rsc_ptr, 1, mrds_error_$previously_defined_index,
							     "The attribute """ || rtrim (item.name) ||
							     """ on line " || ltrim (char (item.line_num)) ||
							     " in relation """ || rtrim (rel_index.rel_name) ||
							     """ was already defined as a secondary index.");

						     else do; /* Make this attribute indexed */

/* check for the indexed attribute being within maximum key length */

							     if attr_info.bit_length > 9 * mrds_data_$max_key_len then
								call mrds_rst_error (rsc_ptr, 2, mrds_error_$long_key,
								     "The attribute """ || rtrim (item.name) ||
								     """ on line " || ltrim (char (item.line_num)) ||
								     " in relation """ || rtrim (rel_index.rel_name) ||
								     """ has a secondary key data length of " ||
								     ltrim (char (ceil (attr_info.bit_length / 9))) ||
								     " characters, which is longer than the allowed maximum length of "
								     || ltrim (char (mrds_data_$max_key_len)) || " characters.");
							     else do;

								     attr_info.index_attr = ON; /* Mark the attribute as a secondary index */
								     rel_info.indexed = ON; /* relation now has secondary indexes */

								     attr_info.index_id = OFF; /* This needs to be cleared */
								     attr_gl_ptr = attr_sl_ptr -> sl.global_list_ptr;
								     attr_gl_ptr -> gl.affected = ON; /* Mark attr as affected */
								end;
							end;
						end;
					end;

				     item_ptr = item.next; /* Continue to next attribute to be indexed (if any) */
				end;		/* End of DO WHILE (item_ptr ^= null) */

			     end;
		     end;				/* END of relation exists do */
	     end;					/* END of DEFINE | CMDB  section */

	if directive.type = REDEFINE then do;		/* REDEFINE section */

/* THIS DIRECTIVE IS NOT IMPLEMENTED YET -- SO ISSUE AN ERROR MSG */


		if stmt (directive.type).index.number > 0 then ;
		else call error (2, mrds_error_$rst_undone_option,
			"The index handler will not implement the ""redefine"" directive" ||
			" until a later release.");


	     end;					/* END of REDEFINE section */


exit:
	if rsc.trace_sw then
	     call mrds_rst_meter (rsc_ptr, "mrds_rst_index_handler", OFF /* EXIT */,
		(index_relation_name));
	return;

error: proc (sev, cd, msg);

	dcl     sev		 fixed bin;	/* (INPUT) Severity level */
	dcl     cd		 fixed bin (35);	/* (INPUT) error code */
	dcl     msg		 char (*);	/* (INPUT)  specific error information */

	call mrds_rst_error (rsc_ptr, sev, cd, msg);
	goto exit;

     end error;

	declare (fixed, addr, rel, null, ceil, char, ltrim, pointer, rtrim) builtin;
	declare list_ptr		 ptr;		/*  pointer to parse info list */

	dcl     mrds_rst_meter	 entry (ptr, char (*), bit (1), char (*)); /* metering/tracing routine */
	dcl     mrds_rst_error	 entry (ptr, fixed bin, fixed bin (35), char (*)); /* general error handler */
	dcl     mrds_rst_tree_search	 entry (char (32) aligned, ptr, ptr, ptr, bit (1)); /* list searcher */
	declare ioa_$rs		 entry options (variable); /* string manipulator */

	dcl     mrds_error_$previously_defined_index fixed bin (35) external;
	dcl     mrds_error_$rst_undef_rel fixed bin (35) external;
	dcl     mrds_error_$rst_not_rel_attr fixed bin (35) external;
	declare mrds_error_$undef_attr fixed bin (35) ext;
	dcl     mrds_error_$rst_undone_option fixed bin (35) external; /* option not coded yet */

	declare attr_gl_ptr		 ptr;		/* pointer to global attr element */
	declare file_gl_ptr		 ptr;		/* pointer to file global list element */
	dcl     rel_gl_ptr		 pointer;		/* Pointer to global list structure (gl) for relation */
	dcl     attr_sl_ptr		 pointer;		/* Pointer to relation sublist
						   (list of attr's for this relation ) */

	dcl     ON		 bit (1) internal static options (constant) init ("1"b); /* true state */
	dcl     OFF		 bit (1) internal static options (constant) init ("0"b); /* false */

	declare message		 char (256) varying;/* specifics of error message */
	declare message_length	 fixed bin (21);	/* length of specifics message */
	declare index_relation_name	 char (32);	/* input name for metering */
	declare mrds_data_$max_key_len fixed bin (35) ext;/* longest key allowed, in chars */
	declare mrds_error_$long_key	 fixed bin (35) ext;/* key too long error */
          declare sys_info$max_seg_size  fixed bin(35) ext static;

%include mrds_rst_rsc;
%include mrds_rst_semantics;
%include mrds_rst_parse_info;
%include mdbm_file_model;

%include mdbm_db_model;

%include mrds_rst_global_lists;

%include mrds_rst_tree;
     end mrds_rst_index_handler;
