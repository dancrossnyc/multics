/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(85-11-17,Dupuis), approve(85-12-16,MCR7314),
     audit(86-02-04,Brunelle), install(86-02-05,MR12.0-1013):
     This entry is being made to cover the change made on 85-04-19 by Thanh
     Nguyen. (see mrds #136)
  2) change(86-07-21,Blair), approve(86-07-21,MCR7311),
     audit(86-09-15,Gilcrease), install(86-10-16,MR12.0-1187):
     When this module is called from command level with -list the xref file
     from rmdb will be built and needs to be deleted.
                                                   END HISTORY COMMENTS */

create_mrds_db: cmdb: mrds_rst_cmdb: procedure;		/* CMDB procedure point */

	entry_name = "cmdb";
	goto common;
%page;
/* HISTORY

   Initially written by R. D. Lackey June, 1978

   Modified by Jim Gray 3/79, to put working  storage  in  it's  own
   directory, using extensible areas

   Modified by Jim Gray - - Sept. 1979, to add  suffix  entries  for
   regression test compatibility

   Modified by Jim Gray - - Jan. 1980, to disallow  use  of  blocked
   files, foreign keys, and restructuring.

   Modified by Jim Gray - - Feb. 1980, to remove use of system_free_

   Modified by Jim Gray - - Feb. 1980, to add entries to set up  for
   being called as subroutine.

   Modified by Jim Gray - - April 1980, to  correct  recursion  flag
   problem.

   Modified by Jim Gray - - 80-11-06, to add  "-secure"  option  for
   cmdb, and have mrds_rst_create_db always create a "submodel_dir",
   under the database  directory.  The  -secure  option  causes  the
   mdbm_secured   bit   to   be   set  in  the  db_model.  Also  the
   version_status structure in the db_model had  it's  major  number
   changed  from  7  to 8. The CMDB/RMDB "running" message output at
   the start of an invocation was altered  to  include  the  version
   number of the model being worked on.

   Modified by Jim Gray - -  80-11-10,  to  change  delete_$path  to
   hcs_$del_dir_tree   and   hcs_$delentry_file   calls  to  improve
   performance.

   81-04-28 Jim Gray :  added  logic  for  the  new  -force  control
   argument.

   82-05-12 Roger Lackey : changed the way temp_rsc_dir_name was determined to
   use expand_pathname_ to correct a stringsize condition.

   82-06-09 Davids: removed code that was supposed to handle rmdb
   .                and rmdb metering and tracing. rmdb has  been
   .                moved to a separate subsystem.

   82-06-24 Roger Lackey : change display of model for listing to use
   .                       mrds_dm_display

   82-07-02 Roger Lackey : changed call to mrds_dm_display to 
                           mdbm_util_$mrds_display 
		       and mu_quiesce$* to mdbm_util_$ for binding

   82-07-06 Roger Lackey : changed mu_define_area to be mdbm_util_$mu_define_area

   82-08-19 Davids: added code to set rsc.db_type from arg_info.db_type after the
                    call to mrds_rst_proc_ctl_args.

   82-11-23 Davids: added entries set_vfile_db_type and set_page_file_db_type
   which set the internal static variable default_db_type which was also
   added and inited to "vf". Modified the parameter list of the module
   mrds_rst_proc_ctl_args to include default_db_type.

   12-02-82  R. Harvey: changed calls to release_area_ to release_temp_segment_
   so that the temporary segment really gets freed.

   83-01-18  Mike Kubicar: Added transaction processing include files.

   83-02-18  Mike Kubicar : Added recognition of mode string for dm files
   and creation of models that reflect these strings.

   83-05-18 Davids: Added the call to dsl_$create_res_copy to create the 
   copy of the model opening resultant. Also moved the position of where the
   db_model.consistant bit is set to ON from the finish_cmdb internal procedure
   procedure (if rsc.severity_high = 0) to just before the call to
   create_res_copy. This was needed so that create_res_copy can open the db.

   83-10-04 Benjamin: Replaced call to hcs_$initiate with initiate_file_.

   83-10-05 Benjamin: Reverted change of 80-11-10.

   84-07-19 Nguyen: Make cleanup handler more reliable and to diagnose non-
   existent cmdb source segment more quickly.
*/
%page;
/* entries for debug and regression test purposes */


suffix: entry ();					/* USE ".db" SUFFIX ON DATABASE PATH */

	suffix_flag = ON;

	return;



no_suffix: entry ();				/* DON'T USE ".db" SUFFIX ON DATABASE PATH */

	suffix_flag = OFF;

	return;

set_vfile_db_type:
vf:  entry ();					/* Default datatype will be vfile */

	unspec (default_db_relation_modes) = "0"b;
	return;


set_dm_file_db_type:
dmf: entry ();					/* Default datatype will be dm file */

	dcl     set_modes_err_code	 fixed bin (35);	/* Error code, Possibly returned from $parse_mode_string */
	dcl     set_modes_err_msg	 char (500);	/* Possibly returned from $parse_mode_string */
	dcl     mrds_rst_proc_ctl_args$parse_mode_string entry (char (*), 1, 2 bit (1) unal, 2 bit (1) unal, 2 bit (1) unal,
				 2 bit (1) unal, fixed bin (35), char (*));


	entry_name = "cmdb$set_dm_file_db_type";
	mstxn_txn_id = "0"b;			/* Just in case we have to call error */
	rsc_ptr = null ();				/* Ditto */
	default_db_relation_modes.dm_file_type = "1"b;
	default_db_relation_modes.protection_on = "1"b;
	default_db_relation_modes.concurrency_on = "1"b;
	default_db_relation_modes.rollback_on = "1"b;
	call cu_$arg_count (arg_num, code);
	if code ^= 0
	then call error (code,
		"While trying to determine the argument count.");
	if arg_num > 1
	then call error (error_table_$too_many_args,
		"Usage: create_mrds_db$set_dm_file_db_type {mode_string}");
	if arg_num > 0 then do;
		call cu_$arg_ptr (1, arg_ptr, arg_len, code);
		if code ^= 0
		then call error (code,
			"While getting the first argument.");
		call mrds_rst_proc_ctl_args$parse_mode_string (arg, default_db_relation_modes, set_modes_err_code, set_modes_err_msg);
		if set_modes_err_code ^= 0
		then call error (set_modes_err_code, set_modes_err_msg);
	     end;

	return;
%page;
/* entries for new features allowing/disallowing */

new_on: entry ();

	allow_new_features = ON;

	return;

/* turn off new features */

new_off: entry ();

	allow_new_features = OFF;

	return;

/* entries to set up as a command or being called as subroutine */

set_command_level: entry ();

	command_level_call = ON;

	return;


set_subroutine_level: entry ();

	command_level_call = OFF;

	return;
%page;
common:
	if recurse_flag then do;			/* If recursively invoked */
		call com_err_ (mrds_error_$no_recursion, entry_name);
		return;
	     end;
	else do;

		mstxn_txn_id = "0"b;		/* No transaction started yet */
		rsc_ptr = null;			/* Init restructure control segment pointer */
		ai_ptr = null;			/* Arg_info str pointer */
		wa_ptr = null ();

		on cleanup call tidy_up;		/* Establish a cleanup handler */

		recurse_flag = ON;			/* remember we have been invoked */

	     end;

	call mdbm_util_$mu_define_area (wa_ptr, (sys_info$max_seg_size), "MRDS.cmdb",
	     "0"b /* not extensible */, "1"b /* no freeing */, "0"b, "0"b /* no zeroing */, code);
	if code ^= 0 then call error (code, "defining temp area");

	mrds_dm_display_info_ptr = null;

	if ^command_level_call then ;
	else call ioa_$ioa_switch (iox_$user_output, "CMDB Version ^d models.",
		mdbm_data_$current_version);

	call cu_$arg_list_ptr (arg_list_ptr);		/* Get pointer to commandlevel arguments */

	allocate arg_info in (wk_area);

	call mrds_rst_proc_ctl_args (arg_list_ptr, ai_ptr, suffix_flag, default_db_relation_modes, fatal_sw);
	if fatal_sw then do;			/* Fatal error was encountered during arg processing */
		call tidy_up;
		goto exit;
	     end;

	call initiate_file_ (arg_info.source_dir, arg_info.source_entry, R_ACCESS,
	     temp_seg_ptr, source_seg_bcnt, code);
	if code ^= 0 then do;
		temp_msg = "Source segment: " || rtrim (arg_info.source_dir);
		temp_msg = temp_msg || ">";
		temp_msg = temp_msg || arg_info.source_entry;
		err_msg = temp_msg;
		call error (code, err_msg);
	     end;

/* Create rsc (temporary) segment and directory */
	call mrds_rst_create_rsc (arg_info.temp_work_dir, rsc_ptr, code); /* Create and init rsc */
	if code ^= 0 then call error (code, "Creating rsc segment ");

	rsc.source_seg_ptr = temp_seg_ptr;
	rsc.db_relation_mode_flags = arg_info.relation_mode_flags; /* Set up relation modes */
	rsc.secure = arg_info.secure;			/* set up cmdb -secure option */

	if ^allow_new_features then ;
	else do;
		rsc.allow_foreign_keys = ON;
		rsc.allow_blocked_files = ON;
		rsc.allow_restructuring = ON;
	     end;


	if command_level_call then
	     rsc.command_level = ON;
	else rsc.command_level = OFF;
	rsc.dbp = arg_info.db_dir_path;
	rsc.cmdb_option = ON;

	if arg_info.list then call init_listing_seg;	/* Attach open and init listing segent */
%page;
	rsc.temp_dir = rsc.dbp;			/* For cmdb these are the same */
	db_model_path = rtrim (rsc.temp_dir) || ">db_model";

	call mrds_rst_create_db (rsc_ptr, dbm_ptr, code); /* Create the database skeleton including db_model */
	if code ^= 0 then do;
		if code ^= error_table_$namedup then
		     call error (code, "Creating data base " || rsc.dbp);
		else do;
			if ^arg_info.force then do;
				call expand_pathname_ (rsc.dbp, db_dir, db_entry, cd);
				call error (code, "
      The entry '" || rtrim (db_entry) || "' already exists under the directory " || db_dir);
			     end;
			else do;			/* user gave -force argument */

/* check for a database, since we will not delete
   plain directories, segments, links, or msf's */

				call dmd_$check_path (rtrim (rsc.dbp), db_dir, db_entry, new_found, code);
				if code = error_table_$incorrect_access then
				     code = 0;	/* ignore access problems to the data model */
				if code ^= 0 then
				     call error (code, "Trying to delete existing database: " || rsc.dbp);
				else do;

/* force the user to be a DBA, if possible, so we can give all needed access */

					dir_acl (1).access_name = get_group_id_$tag_star (); /* get person.project.tag */
					call hcs_$add_dir_acl_entries (db_dir, db_entry, addr (dir_acl), 1, code);
					if code ^= 0 then do;
						if code = error_table_$argerr then
						     code = dir_acl (1).status_code; /* get real error for this acl setting */
						call error (code, "Could not set needed access: " || rsc.dbp);
					     end;
					else do;

						call dmd_$set_needed_access (rtrim (rsc.dbp), code);
						if code ^= 0 then
						     call error (code, "Unable to give DBA needed access: " || rsc.dbp);
						else do;

							call delete_directory ();
							if code ^= 0 then
							     call error (code, "Deleting existing database.");
							else do;
								call mrds_rst_create_db (rsc_ptr, dbm_ptr, code); /* try again */
								if code ^= 0 then
								     call error (code, "Creating data base after deletion " || rsc.dbp);
							     end;
						     end;
					     end;
				     end;
			     end;
		     end;
	     end;

	rsc.delete_db_sw = ON;			/* Set for tidy_up */

	call mrds_rst_get_seg_ptr (rsc_ptr, rsc.h_n_seg_info_ls_ptr, DB_MODEL_SEG_NAME, /* Add the new db_model to */
	     INITIATE, dbm_ptr, code);		/*          seg_info list */
	if dbm_ptr = null then call error (code, "DB MODEL");

	rsc.n_dm_ptr = dbm_ptr;			/* For cmdb New is used */
%page;
	rsc.phase = 200;				/* going into parse phase */

	call mrds_rst_parse (rsc_ptr, rsc.source_seg_ptr, source_seg_bcnt / 9);

	if rsc.severity_high >= 3 then ;
	else call mrds_rst_consistancy_check (rsc_ptr);	/* make sure there are no loose ends */


/* Now we might be ready to create relations, set up for transactions */

	mstxn_transactions_needed = rsc.db_relation_mode_flags.protection_on;
	if rsc.db_relation_mode_flags.dm_file_type then do;
		no_dms_err_code = mrds_error_$no_dms;	/* If we're going to get an error, do it now */
		on linkage_error
		     call error (no_dms_err_code,
			"The Data Management System could not be found by the process search rules.");
		dms_test = transaction_manager_$begin_txn;
		revert linkage_error;
	     end;

	on cleanup begin;
		call mstxn_cleanup;
		call tidy_up;
	     end;

	on any_other call mstxn_any_other;

%include mrds_start_transaction;
	if mstxn_code ^= 0
	then call error (mstxn_code, "Starting a transaction");

	if rsc.severity_high = 0 then do;		/* Logical completed OK */
		call model_adjust_bit_count;		/* Adjust bit count for all models */

		call format_files;
		rsc.n_dm_ptr -> db_model.consistant = ON; /* OK to open db */
		call dsl_$create_res_copy (rsc.dbp, code);
		if code ^= 0
		then do;
			if rsc.listing_seg_sw
			then call ioa_$ioa_switch (rsc.listing_iocb_ptr,
				"2^/Could not create the model resultant copies");
			call ioa_$ioa_switch (iox_$error_output,
			     "2^/Could not create the model resultant copies");
			rsc.severity_high = 4;
			rsc.n_dm_ptr -> db_model.consistant = OFF;
		     end;
	     end;

	call finish_cmdb;


exit:
	if rsc_ptr = null ()
	then mftxn_code = code;			/* Nothing happened */
	else if rsc.severity_high = 0 & code = 0	/* No errors occurred */
	then mftxn_code = 0;			/* Everthings cool */
	else if code = 0
	then mftxn_code = error_table_$action_not_performed; /* Rollback! */
	else mftxn_code = code;
%include mrds_finish_transaction;

	if mftxn_code ^= 0
	then call com_err_ (mftxn_code, entry_name);
	if entry_name ^= "cmdb$set_dm_file_db_type"
	then call tidy_up;
	return;					/* This is the only return from this program */
%page;
model_adjust_bit_count: proc;

/* This procedure adjusts the bit count on the data model and all file models */

	success = ON;				/* Init loop */

	if rsc.h_n_seg_info_ls_ptr ^= null then
	     do loop_ptr = rsc.h_n_seg_info_ls_ptr /* Do all segment in new seg_info list */
		repeat node_ptr
		while (success = ON);

		call mrds_rst_tree_successor (rsc.h_n_seg_info_ls_ptr,
		     loop_ptr, node_ptr, dummy_ptr, success);

		if success then do;			/* IF entry in list was found */

			seg_info_ptr = node.data;	/* Set pointer to seg_info */

			call adjust_bit_count_ (seg_info.dir, seg_info.name, "1"b, (seg_info.bcnt), code);
			if code ^= 0 then call error (code, "model_adjust_bit_count");

		     end;
	     end;

     end model_adjust_bit_count;
%page;
finish_cmdb: proc;

	if rsc.listing_seg_sw then do;
		if rsc.severity_high > 0 then call ioa_$ioa_switch (rsc.listing_iocb_ptr,
			"^2/An error of severity ^d occured.^/database not created.^/", rsc.severity_high);

		else call ioa_$ioa_switch (rsc.listing_iocb_ptr, "^/NO ERRORS^/");
	     end;
	if rsc.severity_high > 0 & rsc.command_level then
	     call ioa_$ioa_switch (iox_$error_output,
		"^/cmdb: An error of severity ^d occured.^/^6xData base not created.^/", rsc.severity_high);


	if rsc.severity_high = 0 then do;
		rsc.delete_db_sw = OFF;		/* We have a good data base */
		if rsc.listing_seg_sw then do;	/* display db in listing */
			call init_display_info;	/* Internal proc */
			call mdbm_util_$mrds_dm_display (mrds_dm_display_info_ptr, err_msg, code);
			if code ^= 0 then call error (code, err_msg);
		     end;
	     end;

     end finish_cmdb;
%page;
format_files: proc;

/* this procedure walks the global file list and formats the newly created files */

	dcl     error_code		 fixed bin (35);

	node_ptr = rsc.h_gfile_ptr;

	success = ON;

	do while (success);				/* all the files in list */
	     call mrds_rst_tree_successor (rsc.h_gfile_ptr, node_ptr, successor_ptr, successor_parent_ptr, success);

	     if success then do;			/* Found a file info */
		     node_ptr = successor_ptr;
		     gl_ptr = node.data;
		     if ^gl.complete then do;		/* To complete it format the file */
			     call mrds_rst_format_file (rsc_ptr, (gl.name), error_code);
			     if error_code ^= 0
			     then call error (error_code, "Creating relation " || rtrim (gl.name));
			     gl.complete = ON;	/* It is now complete */
			end;
		end;
	end;

     end format_files;
%page;
error: proc (cd, msg);

	dcl     cd		 fixed bin (35);	/* (INPUT) Error code */
	dcl     msg		 char (*);	/* (INPUT) error message input with code */

	code = cd;				/* Code is a global parameter */
	call com_err_ (cd, entry_name, "^/^a", msg);
	goto exit;

     end error;
%page;
init_listing_seg: proc;				/* Initialize listing segment */

	call cu_$decode_entry_value (create_mrds_db, ref_ptr, dummy_ptr); /* Get pointer to ref procedure */

	attach_desc = "vfile_ " || rtrim (get_wdir_ ()) || ">" ||
	     before (arg_info.source_entry, "." || rtrim (entry_name)) || ".list";

	call iox_$attach_name (unique_chars_ ("0"b) || rtrim (entry_name) || ".listing",
	     rsc.listing_iocb_ptr, attach_desc, ref_ptr, code);
	if code = 0 then call iox_$open (rsc.listing_iocb_ptr, STREAM_OUTPUT, "0"b, code);
	if code ^= 0 then call error (code, "listing segment");

	value = "CREATE_MRDS_DB";

	call ioa_$ioa_switch (rsc.listing_iocb_ptr, "^-^a LISTING FOR ^a",
	     value, rtrim (arg_info.source_dir) || ">" || arg_info.source_entry);

	call ioa_$ioa_switch (rsc.listing_iocb_ptr, "^-Created by:^-^a",
	     get_group_id_ ());

	call date_time_ (clock (), long_date);
	call ioa_$ioa_switch (rsc.listing_iocb_ptr, "^-Created on:^-^a", long_date);

	call ioa_$ioa_switch (rsc.listing_iocb_ptr, "^-Data base path:^-^a", rsc.dbp);

	value = "";

	if arg_info.list then value = value || " list";

	if value = "" then value = " None";

	call ioa_$ioa_switch (rsc.listing_iocb_ptr, "^-^7xOptions:^4x^a", value);

	call ioa_$ioa_switch (rsc.listing_iocb_ptr, "^/");/* A couple of spaces */

	rsc.listing_seg_sw = ON;
	return;

     end init_listing_seg;
%page;
init_display_info: proc;

	allocate mrds_dm_display_info in (wa) set (mrds_dm_display_info_ptr);

	mrds_dm_display_info.version = MRDS_DM_DISPLAY_INFO_VERSION_1;
	mrds_dm_display_info.output_iocb_ptr = rsc.listing_iocb_ptr;
	mrds_dm_display_info.db_path = rsc.dbp;
	mrds_dm_display_info.temp_dir_path = arg_info.temp_work_dir;
	mrds_dm_display_info.work_area_ptr = wa_ptr;
	mrds_dm_display_info.dbm_ptr = dbm_ptr;
	mrds_dm_display_info.sw.default = "0"b;
	mrds_dm_display_info.sw.long = "1"b;		/* This is what we are after */
	mrds_dm_display_info.sw.cmdb = "0"b;
	mrds_dm_display_info.sw.names_only = "0"b;

	mrds_dm_display_info.sw.attribute = "0"b;
	mrds_dm_display_info.sw.relation = "1"b;	/* This is what we are after */
	mrds_dm_display_info.sw.index = "0"b;
	mrds_dm_display_info.sw.history = "0"b;
	mrds_dm_display_info.sw.header = "1"b;		/* This is what we are after */
	mrds_dm_display_info.sw.mbz = "0"b;
	mrds_dm_display_info.dom_name_list_ptr = null;
	mrds_dm_display_info.attr_name_list_ptr = null;
	mrds_dm_display_info.rel_name_list_ptr = null;
	mrds_dm_display_info.index_name_list_ptr = null;
	mrds_dm_display_info.xref_iocb_ptr = null;
	mrds_dm_display_info.xref_name = "";

     end init_display_info;
%page;
tidy_up: proc;

	if rsc_ptr ^= null then do;

		if rsc.db_quiesced_sw then /* If database has been quiesced then  un-quiesce it */
		     call mdbm_util_$quiesce_free (rsc.dbp, code);

		if mrds_dm_display_info_ptr ^= null
		then if mrds_dm_display_info.xref_iocb_ptr ^= null
		     then do;
		               call mdbm_util_$xref_destroy (mrds_dm_display_info.xref_iocb_ptr,
			     mrds_dm_display_info.temp_dir_path, (mrds_dm_display_info.xref_name), err_msg, code);
			     if code ^= 0 then call error (code, err_msg);
			     mrds_dm_display_info.xref_iocb_ptr = null;
			     end;

		if rsc.delete_db_sw then /* If the data base had been created but an error  */
		     call delete_directory;		/*   occured then delete the data base */


		else if rsc.temp_dir_sw then /* Entry point was rmdb and a temp dir was created */
		     call delete_directory;

		if rsc.listing_seg_sw then do;	/* Close and detach the listing segment */
			call iox_$close (rsc.listing_iocb_ptr, code);
			if code = 0 then call iox_$detach_iocb (rsc.listing_iocb_ptr, code);
			if code = 0 then call iox_$destroy_iocb (rsc.listing_iocb_ptr, code);
		     end;

		call expand_pathname_ (rsc.rsc_dir, dir, temp_rsc_dir_name, code);
		if code = 0 then do;
			delete_options.force = ON;
			delete_options.question = OFF;
			delete_options.directory = ON;
			delete_options.segment = ON;
			delete_options.link = ON;
			delete_options.chase = ON;
			delete_options.library = OFF;
			delete_options.raw = OFF;
			delete_options.mbz = OFF;

			quit_sw = "0"b;
			on quit quit_sw = "1"b;
						/* Because the delete_$path takes a lot of cpu time, so let handle the quit
   condition and let it finishes then we give the quit. */
			call delete_$path (arg_info.temp_work_dir, temp_rsc_dir_name, string (delete_options), MODULE_NAME, code);
			if code = 0 then do;
				rsc_ptr = null;
			     end;
			if quit_sw then do;
				quit_sw = "0"b;
				revert quit;
				signal quit;
			     end;
		     end;
		if code ^= 0
		then call com_err_ (code, entry_name, "^a", "deleting rsc_dir");
	     end;

	if wa_ptr ^= null () then do;
		call release_temp_segment_ ("MRDS.cmdb", wa_ptr, code);
		wa_ptr = null ();
	     end;

	recurse_flag = OFF;				/* Reset so we can be called again */
	return;

     end tidy_up;
%page;
delete_directory: proc;

	temp_dir_name = reverse (before (reverse (before (rsc.temp_dir, BLANK)), ">"));
	temp_dir_directory = before (rsc.temp_dir, ">" || temp_dir_name);

	delete_options.force = ON;
	delete_options.question = OFF;
	delete_options.directory = ON;
	delete_options.segment = ON;
	delete_options.link = ON;
	delete_options.chase = ON;
	delete_options.library = OFF;
	delete_options.raw = OFF;
	delete_options.mbz = OFF;

	call delete_$path (temp_dir_directory, temp_dir_name, string (delete_options), MODULE_NAME, code);

     end delete_directory;
%page;
/*
*
*  These routines are dummy routines required for the transaction processing
*  include files.  They do nothing.
*
*/

should_rollback:
     proc returns (bit (1));
	return ("0"b);
     end should_rollback;


restore_significant_data:
     proc;
     end restore_significant_data;
%page;
	dcl     recurse_flag	 bit (1) internal static init ("0"b); /* On = cmdb/rmdb has been invoked */






	dcl     adjust_bit_count_	 entry (char (168), char (32), bit (1) aligned, fixed bin (35), fixed bin (35));
	dcl     cleanup		 condition;
	dcl     quit		 condition;
	dcl     any_other		 condition;
	dcl     linkage_error	 condition;
	dcl     clock		 builtin;
	dcl     com_err_		 entry options (variable);
	dcl     cu_$arg_count	 entry (fixed bin, fixed bin (35));
	dcl     cu_$arg_list_ptr	 entry (ptr);
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	dcl     cu_$decode_entry_value entry (entry, ptr, ptr);
	dcl     date_time_		 entry (fixed bin (71), char (*));
	dcl     delete_$path	 entry (char (*), char (*), bit (36) aligned, char (*),
				 fixed bin (35));
	dcl     expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     get_group_id_	 entry returns (char (32));
	dcl     get_group_id_$tag_star entry returns (char (32));
	dcl     get_wdir_		 entry returns (char (168));
	dcl     initiate_file_	 entry (char (*), char (*), bit (*), ptr, fixed bin (24),
				 fixed bin (35));
	dcl     ioa_$ioa_switch	 entry options (variable);
	dcl     iox_$attach_name	 entry (char (*), ptr, char (*), ptr, fixed bin (35));
	dcl     iox_$close		 entry (ptr, fixed bin (35));
	dcl     iox_$error_output	 ext ptr;
	dcl     iox_$open		 entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
	dcl     iox_$user_output	 ext ptr;
	dcl     unique_chars_	 entry (bit (*)) returns (char (15));
	dcl     unspec		 builtin;
	dcl     wa_ptr		 ptr;
	dcl     wk_area		 area (sys_info$max_seg_size) based (wa_ptr);
	dcl     (iox_$detach_iocb, iox_$destroy_iocb) entry (ptr, fixed bin (35));
	dcl     mrds_rst_consistancy_check entry (ptr);	/* valid model checker */
%page;
	dcl     BLANK		 char (1) int static options (constant) init (" ");
	dcl     DB_MODEL_SEG_NAME	 char (32) aligned int static options (constant) init ("db_model");
	dcl     INITIATE		 bit (1) int static options (constant) init ("0"b);
	dcl     MODULE_NAME		 char (14) int static options (constant) init ("create_mrds_db");
	dcl     OFF		 bit (1) int static options (constant) init ("0"b);
	dcl     ON		 bit (1) int static options (constant) init ("1"b);
	dcl     quit_sw		 bit (1) aligned;
	dcl     RINGS		 (3) fixed bin (3) init static options (constant) init (7, 7, 7); /* Ring brackets */
	dcl     STREAM_OUTPUT	 fixed bin internal static options (constant) init (2);

	dcl     mdbm_util_$mrds_dm_display entry (ptr, char (*), fixed bin (35));
          dcl     mdbm_util_$xref_destroy entry (ptr, char (*), char (*), char (*), fixed bin (35));
	dcl     mrds_rst_create_db	 entry (ptr, ptr, fixed bin (35));
	dcl     mrds_rst_create_rsc	 entry (char (*), ptr, fixed bin (35));
	dcl     mrds_rst_format_file	 entry (ptr, char (*), fixed bin (35));
	dcl     mrds_rst_get_seg_ptr	 entry (ptr, ptr, char (32) aligned, bit (1), ptr, fixed bin (35));
	dcl     mdbm_util_$quiesce_free entry (char (168), fixed bin (35));
	dcl     mrds_rst_parse	 entry (ptr, ptr, fixed bin (24));
	dcl     mrds_rst_proc_ctl_args entry (ptr, ptr, bit (1), 1, 2 bit (1) unal, 2 bit (1) unal, 2 bit (1) unal,
				 2 bit (1) unal, bit (1));
	declare suffix_flag		 bit (1) init ("1"b) int static; /* on => use ".db" suffix on db path */
	declare allow_new_features	 bit (1) init ("0"b) int static; /* on => allow foreign keys, blocked files, restructuring */
	declare release_temp_segment_	 entry (char (*), ptr, fixed bin (35));
	declare mdbm_util_$mu_define_area entry (ptr, fixed bin (18), char (11), /* calls mu_define_area_ to get temp seg */
				 bit (1) aligned, bit (1) aligned, bit (1) aligned, bit (1) aligned, fixed bin (35));
	declare command_level_call	 bit (1) internal static init ("1"b); /* on => set up as command, not subroutine */
	declare mdbm_data_$current_version fixed bin (35) ext; /* curent model version numberr */
	declare error_table_$incorrect_access fixed bin (35) ext; /* no acl to existing data model */
	declare new_found		 bit (1);		/* on => new version db arch found */
	declare dmd_$check_path	 entry (char (*), char (168), char (32), bit (1), fixed bin (35)); /* determines if path is to db */
	declare dmd_$set_needed_access entry (char (*), fixed bin (35)); /* gives a DBA all acls */
	declare dsl_$create_res_copy	 entry (char (168), fixed bin (35));
	declare hcs_$add_dir_acl_entries entry (char (*), char (*), ptr, fixed bin, fixed bin (35)); /* set acl on a dir */
	declare 1 dir_acl		 (1:1) aligned,	/* structure for setting sma on db dir */
		2 access_name	 char (32),	/* person.project.tag */
		2 dir_modes	 bit (36) init ("111000000000000000000000000000000000"b), /* sma acl */
		2 status_code	 fixed bin (35) init (0); /* error code for this acl setting */
	declare error_table_$argerr	 fixed bin (35) ext;/* from hcs_$add_dir_acl_entries */

	dcl     mrds_rst_tree_successor entry (ptr, ptr, ptr, ptr, bit (1));
	dcl     sys_info$max_seg_size	 ext fixed bin (35);

/*	ERROR CODES	*/

	dcl     error_table_$action_not_performed fixed bin (35) ext static; /* Could not create db */
	dcl     error_table_$namedup	 ext fixed bin (35);
	dcl     error_table_$too_many_args fixed bin (35) ext static;
	dcl     mrds_error_$no_recursion ext fixed bin (35);
	dcl     mrds_error_$no_dms	 ext fixed bin (35);
%page;
	dcl     arg		 char (arg_len) based (arg_ptr);
						/* To get args for set_dm_file_db_type entry point */
	dcl     arg_len		 fixed bin (21);	/* To get args for set_dm_file_db_type entry point */
	dcl     arg_list_ptr	 ptr;		/* Pointer to commmand level argument list */
	dcl     arg_num		 fixed bin;	/* Number of args for set_dm_file_db_type entry point */
	dcl     arg_ptr		 ptr;		/* To get arguments for set_dm_file_db_type entry point */
	dcl     source_seg_bcnt	 fixed bin (24);	/* Bit count of source segment */
	dcl     temp_seg_ptr	 ptr;
	dcl     err_msg		 char (256);
	dcl     fatal_sw		 bit (1);		/* ON => Fatal error occured while processing control arguments */

	dcl     (addr, null, fixed, rtrim, before, reverse, string) builtin;

	dcl     cd		 fixed bin (35);
	dcl     db_dir		 char (168);
	dcl     db_entry		 char (32);
	dcl     dir		 char (168);
	dcl     dms_test		 entry options (variable) variable; /* See if dms software is there */
	dcl     code		 fixed bin (35);	/* Error code */
	dcl     (dummy_ptr, loop_ptr)	 ptr;		/* Dummy pointer */
	dcl     ref_ptr		 ptr;		/* procedure reference pointer */
	dcl     attach_desc		 char (200);	/* Attach descriptor */
	dcl     entry_name		 char (32);
	dcl     db_model_path	 char (168);	/* path name down to db_model */
	dcl     long_date		 char (24);
	dcl     no_dms_err_code	 fixed bin (35);	/* To avoid recursive linkage_error conditions */
	dcl     temp_dir_name	 char (32);	/* Name of temp directory entry */
	dcl     temp_dir_directory	 char (168);
	dcl     temp_rsc_dir_name	 char (32);	/* temp for holding rsc dir name */
	dcl     temp_msg		 char (256) varying;
	dcl     value		 char (64) varying;

	dcl     1 default_db_relation_modes int static,	/* Relation modes, set by set_(vfile dm_file)_db_type entry points */
		2 dm_file_type	 bit (1) init ("0"b), /* Default vfile */
		2 protection_on	 bit (1) init ("0"b), /* No transactions */
		2 concurrency_on	 bit (1) init ("0"b), /* No concurrency */
		2 rollback_on	 bit (1) init ("0"b); /* No journalling */
%page;
%include mrds_rst_struct_types;
%page;
%include mrds_rst_arg_info;
%page;
%include mrds_rst_rsc;
%page;
%include mrds_rst_tree;
%page;
%include mrds_rst_global_lists;
%page;
%include mrds_dm_display_info;
%page;
%include mdbm_db_model;
%page;
%include access_mode_values;
%page;
%include delete_options;

     end;
