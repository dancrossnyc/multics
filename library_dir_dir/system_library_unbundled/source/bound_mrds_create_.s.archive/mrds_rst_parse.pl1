/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */



/* HISTORY:

   originally written by jim gray - - july 1978

*/

mrds_rst_parse: procedure (rsc_ptr, source_seg_ptr, source_length);

/*
   .                        BEGIN_DESCRIPTION
   table driven lrk parsing algorithm
   method is that of a no backtrack bottom up shift reduce parser
   the tables are built using the automated lrk tool of d. ward
   (see the Multics lrk MTB)

   an additional entry - debug_set - may be call without parameters to set
   a debug switch for debug output
   .                        END_DESCRIPTION
*/

/* PARAMETERS:

   rsc_ptr - - (input) pointer to restructure control segment

   source_seg_ptr - - (input) pointer to restructuring source segment

   source_length - - (input) character length of source segment

   (output) will come from the semantic action routines that the parser calls
   as well as from the scanner listing segment output which includes error messages
   ( the listing is in source_seg.list )

*/
%page;
/* normal entry */

	goto PARSE;











/* debug switch set entry */

debug_set: entry ();

/* switch state of debug switch to regulate
   debug output from parser */

	debug_sw = ^debug_sw;
	return;












PARSE:

/* if trace is on, call metering */

	if ^rsc.trace_sw then ;
	else call mrds_rst_meter (rsc_ptr, "mrds_rst_parse", "1"b /* in */, "");


/* initialize the lexical analyzer, and semantic routines */

	call mrds_rst_scanner$init (rsc_ptr, source_seg_ptr, source_length);
	call mrds_rst_semantics$init (rsc_ptr);




/* go forth and parse the source */
%page;
/*

   ________________________________________________________________________________

   _____________________________________________________________
   | initialize                                                  |
   | do while (^EOI);                                            |
   |      if READ_state then do;                                 |
   |           enter state number into parse stack               |
   |           if look-ahead stack empty                         |
   |           then call scanner; /* puts to look-ahead stack * /|
   |           look in read-table for 1st look-ahead symbol      |
   |           if not found then ERROR                           |
   |           set next state from read-table                    |
   |           if look-ahead transition                          |
   |           then delete 1 state from parse stack              |
   |           else move symbol from look-ahead stack            |
   |                            to lex stack                     |
   |      end;                                                   |
   |      else if LOOK_state then do; /* look ahead n * /        |
   |           do until n symbols in look-ahead stack;           |
   |                call scanner; /* put to look-ahead stack * / |
   |           end;                                              |
   |           look in look-table for n'th look-ahead symbol     |
   |           if not found then ERROR                           |
   |           set next state from look-table                    |
   |      end;                                                   |
   |      else if APPLY_state then do;                           |
   |           call semantics                                    |
   |           delete necessary symbols from lex stack           |
   |           delete necessary states from parse stack          |
   |           look in apply-table for top stacked state         |
   |           set next state from apply-table                   |
   |      end;                                                   |
   | end;                                                        |
   |_____________________________________________________________|
   Generalized parse procedure.

*/

/* get space for lexical stack */

	call mrds_rst_rsc_alloc (rsc_ptr, LEX_STACK, lex_stack_ptr);
	call mrds_rst_rsc_alloc (rsc_ptr, P_STRUCT, p_struct_ptr);
	call mrds_rst_rsc_alloc (rsc_ptr, CUR_LEX_TOP, cur_lex_top_ptr);


/* Parser for tables created by LRK. */


	current_state = 1;
	nil_sym = -1;				/* set nil_sym non-existant */
	nil_flag = "0"b;				/* Initially not in skip error recovery */
	ls_top, ps_top = 0;
	la_put, la_get = 1;
	la_ct = 0;
	token_cnt = 0;
	error_mark = -1;

/* The parsing loop. */
NEXT:
	if (current_state = 0) then goto done_parse;
	current_table = current_state;
	string (db_data) = "";
	db_data.state = current_state;
	goto CASE (DPDA.v1 (current_table));

CASE (3):						/* Shared look */
	current_table = DPDA.v2 (current_table);
CASE (1):						/* Look. */
	la_use = mod (la_get + la_need - 1, -lbound (lex_stack, 1)) + 1;
	if (la_need >= -lbound (lex_stack, 1) - 1) then call too_many (-lbound (lex_stack, 1), "lookahead");
	la_need = la_need + 1;
	goto read_look;

CASE (10):					/* Shared read */
	current_table = DPDA.v2 (current_table);

CASE (9):						/* Read. */
	db_data.type = "READ";
	la_need = 1;
	la_use = la_get;
	goto read_look;

CASE (2):						/* Stack and Shared read */
	current_table = DPDA.v2 (current_table);

CASE (0):						/* Stack and Read. */
	db_data.type = "READ";
	db_data.flag = "*";
	la_need = 1;
	la_use = la_get;
	if (ps_top >= hbound (parse_stack, 1)) then call too_many (hbound (parse_stack, 1), "parse");
	ps_top = ps_top + 1;			/* Top of  parsing stack. */
	parse_stack (ps_top) = current_state;		/* Stack the current state. */
	cur_lex_top (ps_top) = ls_top;		/* save current lex top (for recovery) */
read_look:
	do while (la_ct < la_need);			/* make sure enough symbols are available */
	     call mrds_rst_scanner (addr (lex_stack), -la_put);
	     la_put = mod (la_put, -lbound (lex_stack, 1)) + 1;
	     la_ct = la_ct + 1;
	end;
	test_symbol = lex_stack.symbol (-la_use);
	m = 0;
	nil = 0;
						/*	Look current symbol up in read list. */
	do i = current_table + 1 to current_table + DPDA.v2 (current_table);
	     n = DPDA.v1 (i);
	     dcl	   an		      fixed bin (24);
	     if n < 0 then an = -n;
	     else an = +n;
	     if (an = test_symbol) then do;
		     next_state = DPDA.v2 (i);
		     goto got_symbol;
		end;
	     if (an > test_symbol) then do;
		     do i = i to current_table + DPDA.v2 (current_table);
			if abs (DPDA.v1 (i)) = nil_sym then nil = i;
		     end;
		     go to not_found;
		end;
	     if n < 0 then m = i;			/* Record a default transition. */
	     else if n = nil_sym then nil = i;		/* Record a nil symbol transition
						   (for skip error recovery) */
	end;
not_found:
	if (m > 0) then do;				/* if marked symbol was in table, use it */
		next_state = DPDA.v2 (m);
		goto got_symbol;
	     end;

	if nil_flag & nil > 0 then do;		/* If skip recovery has just occurred
						   and there is a nil symbol
						   transition take the transition
						   and back up to the nil
						   symbol in the lookahead
						   stack. */
		next_state = DPDA.v2 (nil);
		la_get = mod (la_get - 2, -lbound (lex_stack, 1)) + 1;
		la_ct = la_ct + 1;
		test_symbol = nil_sym;
		go to got_symbol;
	     end;
	line_number = lex_stack (-la_use).line;
	if token_cnt > error_mark then
	     if local_recovered () then goto read_look;

	if skip_recovered () then do;
		call mrds_rst_error (rsc_ptr, 3 /* severity */, mrds_error_$rst_parse_err_recover, (recov_msg));
		goto NEXT;
	     end;
	if debug_sw then call ioa_$ioa_switch_nnl (iox_$user_output, " ^4i  ", current_state);
	call ioa_$rs ("^a ^d ^a ^a", message, message_length,
	     "Line", lex_stack (-la_get).line, "symbol", getermc (test_symbol, la_get));
	call mrds_rst_error (rsc_ptr, 2 /* severity */, mrds_error_$rst_parse_err_no_recover, (message));
	goto done_parse;

got_symbol:
	nil_flag = "0"b;				/* If skip error recovery was
						   in progress, it is now
						   complete. */
	if debug_sw then do;
		if (next_state < 0) then do;		/* is this a look-ahead state? */
			db_data.type = "LK01";
			db_look = la_need;
			db_data.data = geterm (test_symbol, 0); /* display only terminal "name" on look-ahead */
			db_data.flag = " ";
		     end;
		else do;
			db_data.data = getermc (test_symbol, la_get); /* display terminal "name" and data, if available */
		     end;
		call ioa_$ioa_switch_nnl (iox_$user_output, "^a^/", string (db_data));
	     end;
	current_state = next_state;
	if (current_state < 0) then do;		/* Transition is a look-ahead state. */
		current_state = -current_state;
	     end;
	else do;
		if (ls_top >= hbound (lex_stack, 1)) then call too_many (hbound (lex_stack, 1), "lexical");
		ls_top = ls_top + 1;
		lex_stack (ls_top) = lex_stack (-la_get);
		la_get = mod (la_get, -lbound (lex_stack, 1)) + 1;
		la_ct = la_ct - 1;
		token_cnt = token_cnt + 1;
	     end;
	goto NEXT;

CASE (6):						/* Apply Shared */
	current_table = DPDA.v2 (current_state + 3);
CASE (4):						/* Apply state. */
CASE (5):						/* Apply single */
	la_need = 1;
	rulen = DPDA.v1 (current_state + 2);
	altn = DPDA.v2 (current_state + 2);
	if debug_sw then do;
		db_data.type = "APLY";
		db_data.data = "(";
		call ioa_$ioa_switch_nnl (iox_$user_output, "^a^i ^i)", string (db_data), rulen, altn);
	     end;
	if (rulen > 0) then do;
		if rsc_ptr -> rsc.severity_high >= 3 then ; /* forget semantics if skip recovery has occured */
		else call mrds_rst_semantics (rulen, altn, lex_stack_ptr, ls_top);
	     end;
	if debug_sw then do;
		call ioa_$ioa_switch_nnl (iox_$user_output, "^-pd=^i ld=^i("
		     , DPDA.v1 (current_state + 1), DPDA.v2 (current_state + 1));
		do t = ps_top to ps_top - DPDA.v1 (current_state + 1) + 1 by -1;
		     call ioa_$ioa_switch_nnl (iox_$user_output, " ^d", parse_stack (t));
		end;
		call ioa_$ioa_switch_nnl (iox_$user_output, ")^/");
	     end;
						/* *	Check for an apply of an empty production.
						   In this case the apply state number must be
						   pushed on the parse stack. (Reference
						   LaLonde, W. R.:  An Efficient LALR Parser Generator.
						   Tech. Report CSRG-2, 1971, pp. 34-35.)  * */
	if DPDA.v1 (current_state + 1) = -1 then do;
		if (ps_top >= hbound (parse_stack, 1)) then call too_many (hbound (parse_stack, 1), "parse");
		parse_stack (ps_top + 1) = current_state;
	     end;
	ps_top = ps_top - DPDA.v1 (current_state + 1);	/* Delete parse stack states. */
	ls_top = ls_top - DPDA.v2 (current_state + 1);	/* delete lex stack states */
	if ps_top <= 0 then do;
		call ioa_$rs ("^a", message, message_length, "Parse stack empty");
		call mrds_rst_error (rsc_ptr, 4 /* severity */, mrds_error_$rst_parse_fail, (message));
		goto done_parse;
	     end;
	do i = current_table + 4 to current_table + DPDA.v2 (current_table);
	     if (DPDA.v1 (i) = parse_stack (ps_top)) then do;
		     current_state = DPDA.v2 (i);
		     goto NEXT;
		end;
	end;
	current_state = DPDA.v2 (current_table + 3);
	goto NEXT;
done_parse:
	if rsc.trace_sw then call mrds_rst_meter (rsc_ptr, "mrds_rst_parse", "0"b /* out */, "");
	return;
						/* %page; */
skip_recovered: proc returns (bit (1));

/* *
   Skip recovery requires that the user difine one or more  recovery
   terminal symbols by means of the

   -recover <nil> st1 st2 ...

   control  included  in  the  lrk  source.   st1  st2 etc. are skip
   terminals.  They are terminals which can  end  statements.   They
   cause  a  table  to  be built for skip recovery.  This table is a
   list of read or lookahead states which can follow the reading  of
   a skip terminal. These states correspond to the beginnings of new
   statements.

   Skip  recovery  is  done  when  an  error  has occurred and local
   recovery (if used) was not successful.  Basically what it does is
   to skip forward in the source by calling  the  scanner  until  it
   encounters  one  of  the skip terminals.  It then tries to find a
   state which followed a previous occurrence of the found terminal.
   If one is found it adjusts the lexical and parse stacks and  then
   procedes.

   Effectively  a  bad "statement" has been discarded.  In this case
   "statement" means an input string bounded by two  identical  skip
   terminals  (such  as  ";"  for  example)  including  the boundary
   terminal on  the  right.   If  the  language  is  such  that  the
   discarded  statement  is optional (syntactically) the rest of the
   input can be checked for syntax errors.

   When a bad "statement" is discarded the parser  is  restarted  in
   the  state  in  which it began to process that statement.  If the
   next input symbol encountered is not acceptable  to  this  state,
   the  parser  makes  a last attempt at error recovery by replacing
   the bad "statement" with the <nil> symbol defined by the -recover
   control if used.

   The <nil> symbol is one which the scanner must NEvER  return.  It
   is  needed  because some languages do not allow all statements to
   occur at every point.  This means that when you back  up  to  the
   last  statement  beginning  point, you may not be allowed to have
   the statement you find next.  As an example, take  this  grammar:
   <g>  ::= <i> | <g> <i> !
   <i>  ::= <a> | <b> !
   <a>  ::= a ; <rd> !
   <rd> ::= r ; | <rd> r ; !
   <b>  ::= b ; <sd> !
   <sd> ::= s ; | <sd> s ; !
   %page;
   Then  suppose  that  you  intended to have an input like line (1)
   below, but instead you got (2):

   (1)  a ; r ; r ; b ; s ; s ; s ; a ; r ; r ; r ;
   (2)  a ; r ; r ; b ; s ; s ; s   a ; r ; r ; r ;

   Suppose that the grammar had specified
   -recover <nil> ;
   and local recovery  is  not  used.   When  the  "s"  "a"  ";"  is
   encountered,  skip  recovery  will discard it as a bad statement.
   But this then means that it will miss the fact that it should  be
   entering  the  <a>  rule.   It  will  then get to the "r" but the
   parser will have restarted in a state which can  read  either  an
   "a",  "b",  or  "s".   So  it  will  have to skip again.  In this
   example, skipping will occur, one statement at a time, until  EOI
   is reached.  This means that no syntax checking is done in all of
   the "r" s which are skipped.  This is not highly desireable.

   However, if you add a rule like this:

   <a>  ::= <nil> <rd> !
   then  the  generated <nil> from skip recovery will allow the <rd>
   to be correctly parsed, reducing  the  number  of  useless  error
   messages by quite a bit, usually.

   These <nil> rules can help parse thru misplaced statements during
   error  recovery,  but  will  never  accept these statements under
   normal circumstances.  The semantics on these <nil> rules  should then report an error.
   */


	dcl     (i, ii)		 fixed bin (24);
	dcl     (j, jj)		 fixed bin (24);
	dcl     c			 fixed bin (24);
	dcl     dec4		 pic "zzz9";

/* * %page; */
%page;

	if (hbound (skip_v1, 1) <= 0) then return ("0"b); /* no skip table */
	error_mark = 0;
	current_table = 1;
	recov_msg = "Unuseable ";
	recov_msg = recov_msg || geterm (test_symbol, la_get);
	recov_msg = recov_msg || " on line ";
	dec4 = lex_stack (-la_get).line;
	recov_msg = recov_msg || ltrim (dec4);
	recov_msg = recov_msg || ",  Skipped to ";

	nil_sym = skip_v1 (2);			/* SKIP table */
	c = 1;
	do while (c ^= 0);
	     if (la_ct < 1) then do;			/* if look-ahead stack is empty, get a symbol */
		     call mrds_rst_scanner (addr (lex_stack), -la_put);
		     la_put = mod (la_put, -lbound (lex_stack, 1)) + 1;
		     la_ct = 1;
		end;
	     c = lex_stack.symbol (-la_get);
	     do i = current_table + 2 to current_table + skip_v2 (current_table); /* SKIP table */
		if (skip_v1 (i) = c) then do;		/* SKIP table */
			jj = skip_v2 (i);		/* SKIP table */
			do j = ps_top to 1 by -1;
			     do ii = jj + 1 to jj + skip_v2 (jj); /* SKIP table */
				if (skip_v1 (ii) = parse_stack (j)) then do; /* SKIP table */
					ps_top = j - 1;
					ls_top = cur_lex_top (j);
					current_state = skip_v2 (ii); /* SKIP table */
					recov_msg = recov_msg || geterm (c, 0);
					recov_msg = recov_msg || " on line ";
					dec4 = lex_stack (-la_get).line;
					recov_msg = recov_msg || ltrim (dec4)
					     || " " || copy ("!*!", 26);
					lex_stack (-la_get).symlen = 0;
						/* generate a nil symbol into the look-ahead stack */
					lex_stack (-la_get).symbol = nil_sym;
					la_get = mod (la_get, -lbound (lex_stack, 1)) + 1;
						/* Advance past nil symbol.
						   It will not be used unless
						   the next symbol cannot be read. */
					la_ct = la_ct - 1;
					nil_flag = "1"b;
					return ("1"b);
				     end;
			     end;
			end;
		     end;
	     end;
	     la_get = mod (la_get, -lbound (lex_stack, 1)) + 1;
	     la_ct = la_ct - 1;
	end;
	recov_msg = recov_msg || end_of_input_msg || copy ("!*!", 26);
	current_state = 0;
	return ("1"b);
     end;
%page;
	dcl     (addr, mod, fixed)	 builtin;
	dcl     db_look		 pic "99" defined (db_data.type) pos (3);
	dcl     1 db_data,
		2 flag		 char (1),	/* * means stacked */
		2 state		 pic "zzz9",
		2 fil1		 char (2),
		2 type		 char (6),
		2 data		 char (100);
	dcl     DDop		 (-1:2) char (4) int static init ("LOOK", "FINI", "READ", "ERR");
	dcl     ioa_$ioa_switch_nnl	 entry options (variable);
	dcl     iox_$user_output	 ptr ext static;


	;
	dcl     ls_top		 fixed bin (24);	/* location of top of lexical stack */
	dcl     altn		 fixed bin (24);	/* APPLY alternative number */
	dcl     current_state	 fixed bin (24);	/* number of current state */
	dcl     test_symbol		 fixed bin (24);	/* encoding of current symbol */
	dcl     current_table	 fixed bin (24);	/* number of current table */
	dcl     i			 fixed bin (24);	/* temp */
	dcl     la_ct		 fixed bin (24);	/* number of terminals in look-ahead stack */
	dcl     la_get		 fixed bin (24);	/* location in look_ahead stack to get next symbol */
	dcl     la_need		 fixed bin (24);	/* number of look-ahead symbols needed */
	dcl     la_put		 fixed bin (24);	/* location in look_ahead stack to put next symbol */
	dcl     la_use		 fixed bin (24);	/* location in look-ahead stack to test with */
	dcl     (m, n)		 fixed bin (24);
	dcl     next_state		 fixed bin (24);	/* number of next state */
	dcl     nil_sym		 fixed bin (24);
	dcl     nil		 fixed bin (24);
	dcl     nil_flag		 bit (1);
	dcl     ps_top		 fixed bin (24);	/* location of top of parse stack */
	dcl     recov_msg		 char (150) var;
	dcl     rulen		 fixed bin (24);	/* APPLY rule number */
	dcl     t			 fixed bin (24);
	dcl     sys_info$max_seg_size	 fixed binary (35) external; /* largest segment size */
	dcl     token_cnt		 fixed binary (24); /* number of tokens used */
	dcl     error_mark		 fixed binary (24); /* point to get past before another local correction allowed */
	dcl     line_number		 fixed binary (24); /* line where error detected */
						/* %page; */
geterm: proc (idx, ids) returns (char (100) var);

	dcl     (idx, ids)		 fixed bin (24);
	dcl     temp		 char (100) var;
	dcl     c_str		 char (20000) based;

	temp = "";
get_rest:
	if (ids > 0) then
	     if (lex_stack (-ids).symlen > 0) then do;
		     temp = temp || """";
		     temp = temp || substr (lex_stack (-ids).symptr -> c_str, 1, min (50, lex_stack (-ids).symlen));
		     temp = temp || """";
		     return (temp);
		end;
	if (idx = 0) then temp = end_of_input_msg;
	else temp = substr (string (TC), TL.fc (idx), TL.ln (idx));
	return (temp);
getermc: entry (idx, ids) returns (char (100) var);

	if (idx = 0) then temp = end_of_input_msg;
	else temp = substr (string (TC), TL.fc (idx), TL.ln (idx));
	temp = temp || " ";
	goto get_rest;
     end;
%page;
local_recovered: proc returns (bit (1));

/*
   "    this procedure implements the LRK local error recovery (using
   "    the  DPDA  table).  This  is  done by using the current (bad)
   "    symbol and the next input symbol. All  possible  parses  from
   "    this state are examined. These trial parses proceed until the
   "    next read or lookahead state is encountered. The trial parses
   "    are true simulations of what  can  happen,  apply  states are
   "    chosen according to the simulated top of parse stack.

   "    Given:
   "         B is the current symbol (bad)
   "         N is the next input symbol
   "         C is the current state
   "         R is a "next" read state
   "    These are the conditions which can exist.
   "         C( N )    R( B N )    -kind-
   "            0         1 0    symbol leading to R is missing
   "            0         0 1    B is a wrong symbol
   "            1         1 0    B and N reversed in input
   "            1         0 x    B is an extra symbol in the input
   "            0         0 0    recovery fails

   "    The recovery tries to find  a  useable  combination.  If  one
   "    exists,  the  search  does  not  stop.  If  a  second  one is
   "    encountered, the search stops, a message is  generated  which
   "    says the choice is not unique, and then the first combination
   "    is used.

   "    The local recovery shcheme was altered in  Sept  1977  by  Al
   "    Kepner  to  allow  local  recovery from errors encountered by
   "    look-ahead states.  Preveously  only  errors  encountered  by
   "    read states could be handled.  The error correction scheme is
   "    still the same heuristic described above.
   "
   "    Some  complexity has been added to procedure next_term.  Note
   "    the new variables la_get2 and la_use2.  These  are  necessary
   "    to  handle  the  case  where  an  error  is  encountered by a
   "    look-ahead state and the next state found is not a look-ahead
   "    state.  In this case the next  read  state  encountered  will
   "    correspond  to the "bad" symbol or a symbol to the left of it
   "    (depending on how many look-ahead states preceded the error).
   "    The goal is to  find  the  read  or  look-ahead  state  which
   "    corresponds  to  the  input  symbol to the right of the "bad"
   "    symbol.  The goal is recognized by the condition  "la_use2  =
   "    la_next".   Until  this  goal  is reached look-ahead and read
   "    states are simply passed through using the  look-ahead  stack
   "    to find the appropriate next state.
   */
%page;







	if (test_symbol < 0) then do;
		call ioa_$rs ("^a ^d ^a", message, message_length,
		     "Line", lex_stack (-la_get).line, "Negative terminal; cannot recover");
		call mrds_rst_error (rsc_ptr, 2 /* severity */, mrds_error_$rst_parse_err_no_correct, (message));
		return ("0"b);
	     end;
	error_mark = token_cnt + la_need;
	do while (la_ct < la_need + 1);
	     call mrds_rst_scanner (addr (lex_stack), -la_put);
	     la_put = mod (la_put, -lbound (lex_stack, 1)) + 1;
	     la_ct = la_ct + 1;
	end;
	if hbound (skip_v1, 1) > 0 then nil_sym = skip_v1 (2); /* SKIP table */
	else nil_sym = -1;
	la_next = mod (la_use, -lbound (lex_stack, 1)) + 1;
	next_symbol = lex_stack (-la_next).symbol;
	dcl     string		 builtin;
	string (sws) = "0"b;
	transit = -1;
	combinations = 0;
	depth = 0;
	if debug_sw then call dump_la;
	do i = current_table + 1 to current_table + DPDA.v2 (current_table) while (combinations < 2);
	     alt_symbol = abs (DPDA.v1 (i));
	     if alt_symbol = nil_sym then go to try_again;
	     if debug_sw then call ioa_$ioa_switch_nnl (iox_$user_output, "#^4i ^4a ^i ^a^/",
		     current_state, DDop (sign (DPDA.v2 (i))), alt_symbol, geterm (alt_symbol, 0));
	     string (cycle) = "0"b;
	     if combinations < 2 then
		call next_term ((ps_top), (DPDA.v2 (i)));
try_again:
	end;
	recov_msg = "";
	if (transit = -1) then return ("0"b);
	goto case (fixed (string (sws)));

case (0):						/* can't resolve it */
	return ("0"b);

case (3):
case (7):						/* cannot occur */
	signal condition (logic_error);
	dcl     logic_error		 condition;

case (1):						/* B is wrong symbol */
	recov_msg = recov_msg || geterm (transit, 0);
	recov_msg = recov_msg || " used in place of erroneous ";
	recov_msg = recov_msg || geterm (test_symbol, la_get);
	goto set_symbol;

case (2):						/* symbol leading to R is missing */
	recov_msg = recov_msg || "Missing ";
	recov_msg = recov_msg || geterm (transit, 0);
	recov_msg = recov_msg || " is assumed before ";
	recov_msg = recov_msg || geterm (test_symbol, la_get);
	la_ct = la_ct + 1;
	lex_stack (-la_put) = lex_stack (-la_next);
	lex_stack (-la_next) = lex_stack (-la_use);
	la_put = mod (la_put, -lbound (lex_stack, 1)) + 1;
set_symbol:
	lex_stack (-la_use).token_num = 0;		/* flag as phoney token for semantics */
	la_next = la_use;
	lex_stack (-la_next).symptr = addr (default_symbol);
	lex_stack (-la_next).symlen = length (default_symbol);
	lex_stack (-la_next).line = lex_stack (-(mod (la_put - 2, -lbound (lex_stack, 1)) + 1)).line;
	lex_stack (-la_next).symbol = transit;
	goto done;

case (4):
case (5):						/* B is an extra symbol */
	recov_msg = recov_msg || "Extraneous ";
	recov_msg = recov_msg || geterm (test_symbol, la_use);
	recov_msg = recov_msg || " ignored before ";
	recov_msg = recov_msg || geterm (next_symbol, la_next);
	la_ct = la_ct - 1;
	la_put = mod (la_put - 2, -lbound (lex_stack, 1)) + 1; /* Back up one in look-ahead stack. */
	lex_stack (-la_use) = lex_stack (-la_next);
	goto done;

case (6):						/* B and N reversed */
	recov_msg = recov_msg || geterm (test_symbol, la_use);
	recov_msg = recov_msg || " and ";
	recov_msg = recov_msg || geterm (next_symbol, la_next);
	recov_msg = recov_msg || " are reversed.";
	lex_stack (ls_top + 1) = lex_stack (-la_use);
	lex_stack (-la_use) = lex_stack (-la_next);
	lex_stack (-la_next) = lex_stack (ls_top + 1);
done:
	if combinations <= 1 then ;
	else recov_msg = recov_msg || copy (" ", 30) || "(choose first of many possibilities)";
	call ioa_$rs ("^a ^d ^a", message, message_length,
	     "Line", line_number, recov_msg);
	call mrds_rst_error (rsc_ptr, 1 /* severity */, mrds_error_$rst_parse_err_correct, (message));
	if debug_sw then call dump_la;
	return ("1"b);				/* recovery completed */

	dcl     1 sws,
		2 CNf		 bit (1) unal,	/* current state contains next symbol */
		2 RBNf		 bit (2) unal;	/* next read matches bad or next symbol */
	dcl     combinations	 fixed bin (24);	/* useable combinations found so far */
	dcl     transit		 fixed bin (24);	/* found alternate symbol to use from current state */
	dcl     la_next		 fixed bin (24);	/* temporary "next" look-ahead position */
	dcl     alt_symbol		 fixed bin (24);	/* current alternate symbol */
	dcl     cycle		 (4000) bit (1) unal;
	dcl     default_symbol	 char (13) int static init ("ERROR_SYMBOL_");
	dcl     next_symbol		 fixed bin (24);
	dcl     depth		 fixed bin (24);
						/* %page; */
%page;
dump_la: proc;

	dcl     ii		 fixed bin (24);
	if debug_sw then do;
		ii = la_get;
		do while (ii ^= la_put);
		     call ioa_$ioa_switch_nnl (iox_$user_output, "#la(-^i) ^3i""^a""^/",
			ii,
			lex_stack (-ii).symbol,
			geterm (lex_stack (-ii).symbol, 0));
		     ii = mod (ii, -lbound (lex_stack, 1)) + 1;
		end;
	     end;
     end dump_la;
						/* %page; */
next_term: proc (top, ns);

	look_ahead = (ns < 0);
	if look_ahead then do;
		la_use2 = la_use;
		la_get2 = la_get;
	     end;
	else la_use2, la_get2 = mod (la_get, -lbound (lex_stack, 1)) + 1;
	depth = depth + 5;
	do i = 1 to ps_top;
	     parse_stack2 (i) = parse_stack (i);
	end;
NEXT:
	if (ns = 0) then do;
		transit = 0;
		depth = depth - 5;
		go to done;
	     end;
	ns = abs (ns);
	cur_st = ns;
	if DPDA.v1 (cur_st) = 0 | DPDA.v1 (cur_st) = 2 then do; /* Stack state? */
		if top >= hbound (parse_stack, 1) then call too_many (hbound (parse_stack, 1), "parse");
		top = top + 1;
		parse_stack (top) = cur_st;
	     end;
	goto CASE (DPDA.v1 (cur_st));
CASE (2):						/* Stack and Shared read */
CASE (3):						/* Shared look */
CASE (10):					/* Shared read */
	cur_st = DPDA.v2 (cur_st);
CASE (0):						/* Stack and Read. */
CASE (1):						/* Look. */
CASE (9):						/* Read. */
	if DPDA.v1 (cur_st) = 1 then
	     la_use2 = mod (la_use2, -lbound (lex_stack, 1)) + 1;
	else la_use2 = la_get2;
	if la_use2 = la_next then do;
		if debug_sw then call ioa_$ioa_switch_nnl (iox_$user_output, "#^vx^4i READ^/", depth, ns);
		rep = 0;
		do s = test_symbol, next_symbol while (next_symbol ^= alt_symbol);
		     rep = rep + 1;
		     do i = cur_st + 1 to cur_st + DPDA.v2 (cur_st) while (combinations < 2);
			if ((DPDA.v1 (i) < 0) & (-DPDA.v1 (i) <= s))
			     | (DPDA.v1 (i) = s) then do;
				if debug_sw then
				     call ioa_$ioa_switch_nnl (iox_$user_output, "#^vx(^i)^i^/", depth, rep, s);
				if (combinations = 0) then do;
					combinations = 1;
					transit = alt_symbol;
					if (rep = 1) then RBNf = "10"b;
					else RBNf = "01"b;
				     end;
				else combinations = 2;
			     end;
		     end;
		end;
		if (next_symbol = alt_symbol) then do;
			if (combinations = 0) then do;
				CNf = "1"b;
				do i = cur_st + 1 to cur_st + DPDA.v2 (cur_st);
				     if ((DPDA.v1 (i) < 0) & (-DPDA.v1 (i) <= test_symbol))
					| DPDA.v1 (i) = test_symbol then
					RBNf = "10"b;
				end;
				transit = alt_symbol;
				combinations = 1;
			     end;
			else combinations = 2;
		     end;
done:
		depth = depth - 5;
		do i = 1 to ps_top;
		     parse_stack (i) = parse_stack2 (i);
		end;
		return;
	     end;
	else do;
		if la_use2 = la_use			/* la_use points to the bad input symbol. */
		then s = alt_symbol;		/* We are considering an alternate symbol. */
		else
		     s = lex_stack (-la_use2).symbol;
		marked = 0;
		do i = cur_st + 1 to cur_st + DPDA.v2 (cur_st)
		     while (abs (DPDA.v1 (i)) <= s);
		     if abs (DPDA.v1 (i)) = s then
			go to found;
		     else if DPDA.v1 (i) < 0 then
			marked = i;
		end;
		if marked ^= 0 then
		     i = marked;
		else go to done;
found:
		ns = DPDA.v2 (i);
		if ns >= 0 then
		     la_get2 = mod (la_get2, -lbound (lex_stack, 1)) + 1;
		go to NEXT;
	     end;
CASE (4):						/* Apply state. */
CASE (5):						/* Apply single */
CASE (6):						/* Apply Shared */
	if debug_sw then call ioa_$ioa_switch_nnl (iox_$user_output, "#^vx^4i APLY^/", depth, ns);
	if DPDA.v1 (cur_st + 1) = -1 then do;
		if (top >= hbound (parse_stack, 1)) then call too_many (hbound (parse_stack, 1), "parse");
		parse_stack (top + 1) = cur_st;
	     end;
	top = top - DPDA.v1 (cur_st + 1);
	if (DPDA.v1 (cur_st) = 6) then
	     cur_st = DPDA.v2 (cur_st + 3);
	if top > 0 then
	     do i = cur_st + 4 to cur_st + DPDA.v2 (cur_st);
		if (DPDA.v1 (i) = parse_stack (top)) then do;
			ns = DPDA.v2 (i);
			goto NEXT;
		     end;
	     end;
	else return;
	ns = DPDA.v2 (cur_st + 3);
	goto NEXT;





	dcl     top		 fixed bin (24),	/* top of parse stack for this invocation */
	        ns		 fixed bin (24);	/* branch to follow */

	dcl     cur_st		 fixed bin (24);	/* current state for this recursion */
	dcl     rep		 fixed bin (24);
	dcl     s			 fixed bin (24);
	dcl     look_ahead		 bit (1);
	dcl     i			 fixed bin (24);
	dcl     la_get2		 fixed bin (24);
	dcl     la_use2		 fixed bin (24);
	dcl     marked		 fixed bin (24);
     end next_term;
     end local_recovered;

/* * %page; */

too_many: proc (x, t);
	p6 = x;
	call ioa_$rs ("^a", message, message_length,
	     "Exceeded " || p6 || " entries of lrk " || t || " stack.");
	call mrds_rst_error (rsc_ptr, 4 /* severity */, mrds_error_$rst_parse_fail, (message));
	go to stop;

/* *	variables for too_many:	*/
	dcl     p6		 pic "zzzzz9";
	dcl     t			 char (*) parm;
	dcl     x			 fixed bin (24) parm;
     end too_many;
stop:
	;
%page;


	dcl     (abs, copy, hbound, lbound, length, ltrim,
	        min, rel, sign, string, substr) builtin;
	dcl     source_seg_ptr	 ptr;		/* restructuring directives source segment pointer */
	dcl     source_length	 fixed binary (24); /* character length of source segment */
	dcl     mrds_rst_rsc_alloc	 entry (ptr, fixed bin, ptr); /* working area allocate routine */
	dcl     mrds_rst_scanner$init	 entry (ptr, ptr, fixed binary (24)); /* scanner initialization entry */
	dcl     mrds_rst_scanner	 entry (ptr, fixed bin (24)); /* lexical analyzer routine */
	dcl     mrds_rst_semantics	 entry (fixed bin (24), fixed bin (24), ptr, fixed bin (24)); /* semantic action routines */
	dcl     mrds_rst_semantics$init entry (ptr);	/* semantic initialization entry */
	dcl     mrds_rst_error	 entry (ptr, fixed bin, fixed bin (35), char (*)); /* error handling routine */
	dcl     ioa_$rs		 entry options (variable); /* routine to return string */
	dcl     message		 char (128) varying;/* message with details of error */
	dcl     message_length	 fixed binary;	/* length of returned error message */
	dcl     mrds_rst_meter	 entry (ptr, char (*), bit (1), char (*)); /* metering routine */
	dcl     mrds_error_$rst_parse_err_recover fixed bin (35) external; /* skip recovery error */
	dcl     mrds_error_$rst_parse_err_no_recover fixed bin (35) external; /* unable to skip recover  */
	dcl     mrds_error_$rst_parse_err_correct fixed bin (35) external; /* local correction error */
	dcl     mrds_error_$rst_parse_err_no_correct fixed bin (35) external; /* unable to correct locally */
	dcl     mrds_error_$rst_parse_fail fixed bin (35) external; /* parsing cannot proceed error */
	dcl     end_of_input_msg	 char (18) init (" --END_OF_INPUT-- "); /* EOI message */












%include mrds_rst_parse_stack;
%page;
%include mrds_rst_parse_table;
%page;
%include mrds_rst_skip_table;
%page;
%include mrds_rst_terminals;
%page;
%include mrds_rst_rsc;
%page;
%include mrds_rst_struct_types;

     end;

