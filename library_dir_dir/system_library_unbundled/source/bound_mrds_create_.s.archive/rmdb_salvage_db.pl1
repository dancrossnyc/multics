/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/* format: ^inddcls,^indattr,indnoniterend,^indnoniterdo,indend,tree,^case,insnl,comcol61,dclind5,declareind5,delnl */

/*DESCRIPTION
  This routine attempts to clean up after certain rmdb requests. It is only
  called by the undo operation (when the database in marked inconsistent)
  after the operation is undone. The purpose is to delete all the files
  (relation.m or relation MSF/DMF) that have unique names. These strangely
  named files are created by operations that cause the relation to be copied.
*/

/****^  HISTORY COMMENTS:
  1) change(86-01-27,Spitzer), approve(86-01-27,MCR7311),
     audit(86-09-02,Blair), install(86-10-16,MR12.0-1187):
     written
  2) change(86-11-03,Blair), approve(86-11-03,PBF7311), audit(86-12-01,Dupuis),
     install(86-12-09,MR12.0-1237):
     Take out the code that lets you roll the files forward when a new relation
     has been created from the old during a delete or rename.  We don't have
     enough information to update the model properly even if the relations are
     good, so we always have to roll back.
                                                   END HISTORY COMMENTS */

rmdb_salvage_db:
     proc (Idb_path);

	db_path = Idb_path;
	system_areap, status_area_ptr = get_system_free_area_ ();

	star_names_ptr, star_entry_ptr = null;
	dbm_ptr = null;

	status_ptr = addr (sb);
	status_branch.names_relp = "0"b;

	on cleanup call cleaner;

	call initiate_file_ (db_path, "db_model", RW_ACCESS, dbm_ptr, (0), code);
	if code ^= 0
	then return;

	last_fi_ptr = null;
	done = "0"b;
	do fi_ptr = ptr (dbm_ptr, db_model.file_ptr) repeat ptr (dbm_ptr, file_info.fwd_ptr)
	     while ((rel (fi_ptr) ^= NULL_OFFSET) & (^done));
	     if substr (file_info.file_name, 1, 1) = "!"
	     then done = "1"b;
	     else last_fi_ptr = fi_ptr;
	     end;					/* do fi_ptr */

	if last_fi_ptr = null
	then db_model.file_ptr = NULL_OFFSET;
	else last_fi_ptr -> file_info.fwd_ptr = NULL_OFFSET;

	call hcs_$star_ (db_path, "!*.m", star_ALL_ENTRIES, system_areap, star_entry_count, star_entry_ptr,
	     star_names_ptr, code);
	if code ^= 0
	then return;

	do loop = 1 to star_entry_count;
	     call process_file (loop);
	     end;					/* do loop */

	free star_names in (system_area);
	star_names_ptr = null;

	free star_entries in (system_area);
	star_entry_ptr = null;

	return;
%page;
process_file:
     proc (star_idx);

dcl  model_name char (32);
dcl  relation_name char (32);
dcl  star_idx fixed bin parameter;

	model_name = star_names (star_entries (star_idx).nindex);
	relation_name = before (model_name, ".");
	
/*  Delete the uniquely named files. */
	call delete_file (relation_name);
	call delete_file (model_name);

	return;
%page;
delete_file:
     proc (file_name);

dcl  delete_$path entry (char (*), char (*), bit (36) aligned, char (*), fixed bin (35));
dcl  error_table_$unsupported_operation fixed bin (35) ext static;
dcl  file_name char (*) parameter;
dcl  fs_util_$delentry_file entry (char (*), char (*), fixed bin (35));

	call fs_util_$delentry_file (db_path, file_name, code);
	if code = error_table_$unsupported_operation
	then call delete_$path (db_path, file_name, "101111"b, myname, code);

	return;
     end delete_file;

     end process_file;
%page;
cleaner:
     proc;

dcl  p ptr;

	if star_names_ptr ^= null
	then free star_names in (system_area);
	if star_entry_ptr ^= null
	then free star_entries in (system_area);
	if status_branch.names_relp ^= "0"b
	then free status_entry_names in (system_area);

	do p = dbm_ptr;
	     if p ^= null
	     then call terminate_file_ (dbm_ptr, (0), TERM_FILE_TERM, (0));
	     end;

	return;
     end cleaner;
%page;
%include access_mode_values;
%page;
%include mdbm_db_model;
%page;
%include star_structures;
%page;
%include status_structures;
%page;
%include terminate_file;
%page;
dcl  addr builtin;
dcl  before builtin;
dcl  cleanup condition;
dcl  code fixed bin (35);
dcl  db_path char (168);
dcl  done bit (1) aligned;
dcl  fixed builtin;
dcl  get_system_free_area_ entry () returns (ptr);
dcl  hcs_$star_ entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  Idb_path char (*) parameter;			/* absolute pathname of the database */
dcl  initiate_file_ entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
dcl  last_fi_ptr ptr;
dcl  loop fixed bin;
dcl  myname char (32) int static options (constant) init ("rmdb_salvage_db");
dcl  null builtin;
dcl  NULL_OFFSET bit (18) unaligned int static options (constant) init ((18)"1"b);
dcl  pointer builtin;
dcl  ptr builtin;
dcl  rel builtin;
dcl  1 sb aligned like status_branch;
dcl  substr builtin;
dcl  sum builtin;
dcl  sys_info$max_seg_size fixed bin (35) ext static;
dcl  system_area area based (system_areap);
dcl  system_areap ptr;
dcl  terminate_file_ entry (ptr, fixed bin (24), bit (*), fixed bin (35));

     end rmdb_salvage_db;
