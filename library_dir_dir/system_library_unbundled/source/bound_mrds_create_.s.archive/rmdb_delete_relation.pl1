/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(85-11-17,Dupuis), approve(85-12-16,MCR7314),
     audit(86-02-04,Brunelle), install(86-02-05,MR12.0-1013):
     This entry is being made to cover the change made on 85-05-06 by Thanh
     Nguyen. (see mrds #136)
  2) change(86-04-03,Spitzer), approve(86-04-03,MCR7311),
     audit(86-09-15,Gilcrease), install(86-10-16,MR12.0-1187):
     Add updating the crossreference file.
  3) change(86-12-03,Blair), approve(86-12-03,PBF7311), audit(86-12-05,Dupuis),
     install(86-12-09,MR12.0-1237):
     If we're executing the delete as a cleanup operation and the rel_name is
     not in the model and there is no xref-file, we don't have anything to
     unlink.
                                                   END HISTORY COMMENTS */

rmdb_delete_relation: proc (I_rmdb_ctl_ptr, I_rmdb_delete_rel_info_ptr, O_err_msg, O_err_code);

/*                      BEGIN_DESCRIPTION

   This  module implements the rmdb delete relation work. It unlinks
   any  knowledge  of the  relation  from the db_model,  deletes the
   file_model (rel_name.m) and deletes the rel_data file (rel_name).

   This procedure contains two entry points:
         rmdb_delete_relation$rmdb_delete_relation
         rmdb_delete_relation$cleanup

   The only difference is that cleanup entry point does NOT set the
   inconsistent undo string.

   		      END_DESCRIPTION
*/

/* HISTORY
   82-04-29  Written by R. Lackey

   82-07-01  Roger Lackey :  Modified the calls to  mu_db_inconsistent to use
   mdbm_util_$inconsistent_* for binding.

   82-09-14 D. Woodka : Modified for DMS conversion. The call to delete_$path
   to delete the relation's MSF was changed to a call to rmdb_relmgr_entries.
   delete_relation. The cleanup_intercept handler was removed. 
   The pointer rmdb_ctl_ptr is now passed in as an argument in order to pass
   the relation_manager entry points.

   83-02-09 Mike Kubicar : Added transaction processing include files.

   83-02-14 Davids: modified to use the new db_type_flags in the db_model
   structure instead of the old numeric db_type.

   83-05-24 Davids: Added code to reset the saved_res_version so the saved
   resultant will not get incorrectly used.
*/

/*       PARAMETERS       */
	dcl     I_rmdb_ctl_ptr	 ptr parameter;	/* Pointer to rmdb_ctl structure */
	dcl     I_rmdb_delete_rel_info_ptr ptr parameter; /* Pointer rmdb_delete_rel_info structure */
	dcl     O_err_code		 fixed bin (35) parameter; /* Error code */
	dcl     O_err_msg		 char (*) parameter;/* Error message test */

/* main entry point */

	cleanup_entry_point = "0"b;
	goto common;


%page;
/* Cleanup entry point does not set undo string in inconsistence */

cleanup: entry (I_rmdb_ctl_ptr, I_rmdb_delete_rel_info_ptr, O_err_msg, O_err_code);

	cleanup_entry_point = "1"b;
	goto common;


%page;
common:

	rmdb_delete_rel_info_ptr = I_rmdb_delete_rel_info_ptr;
	rmdb_ctl_ptr = I_rmdb_ctl_ptr;
	mstxn_txn_id = "0"b;
	if rmdb_delete_rel_info.version ^= RMDB_DELETE_REL_INFO_VERSION_1 then
	     call error (error_table_$unimplemented_version,
		"For rmdb_delete_rel_info.version");

	if rmdb_delete_rel_info.db_model_ptr -> db_model.db_type_flags.transactions_needed then do; /* Transactions needed, it's a protected dm file */
		mstxn_transactions_needed = "1"b;
		call transaction_manager_$get_current_txn_id (mstxn_txn_id, mstxn_code);
		if mstxn_code = 0 then do;
			mstxn_txn_id = "0"b;
			call error (error_table_$action_not_performed,
			     "Relations may not be deleted while a transaction " ||
			     "is in progress.  Commit or abort the transaction " ||
			     "and try again.");
		     end;
	     end;
	else mstxn_transactions_needed = "0"b;
	mstxn_txn_id = "0"b;

	db_path = rmdb_delete_rel_info.absolute_db_path;
	dbm_ptr = rmdb_delete_rel_info.db_model_ptr;
	rel_name = rtrim (rmdb_delete_rel_info.relation_name);
	O_err_msg = "";
	O_err_code = 0;

	if db_path = "" then call error (mrds_error_$no_db_path, "");

	exists_in_db_model = "0"b;			/* Don't know yet */
	brief = rmdb_delete_rel_info.brief;

	rmdb_ctl_ptr -> rmdb_ctl.saved_res_version_ptr -> based_char8 = "RESTRUCT";

/* Critical code to unlink relation from db_model
   QUITs will be intercepted and held until the unlink critical code is completed
*/

	quit_intercept_flag = "0"b;

	on quit quit_intercept_flag = "1"b;		/* hold off any QUITs til finished updating db_model */



	call unlink_relation (exists_in_db_model);	/* Internal procedure */

	if exists_in_db_model
	then do;
	     call terminate_file_ (fm_ptr, 0, TERM_FILE_DELETE, code);
	     if code ^= 0 then do;

		if code = error_table_$noentry then code = 0; /* File model not there */
		else call error (code, rtrim (db_path) || ">" || rel_name || ".m");
		end;
	     end;

/*  delete the relation */

	on cleanup call mstxn_cleanup;
	on any_other call mstxn_any_other;
%include mrds_start_transaction;
	if mstxn_code ^= 0
	then call error (mstxn_code, "Could not start a transaction while deleting relation " || rtrim (rel_name) || ".");
	call rmdb_ctl.relmgr_entries.delete_relation (db_path, rel_name, code);
	if code ^= 0 then do;
		if code = error_table_$noentry then code = 0; /* Relation data file not there */
		else call error (code, rtrim (db_path) || ">" || rel_name);
	     end;

	call mdbm_util_$inconsistent_reset (dbm_ptr);	/* Make db consistent */

/* If not cleanup_entrypoint then add the history entry to the db_model that we deleted it */

	if ^cleanup_entry_point then
	     call rmdb_add_rmdb_history (dbm_ptr, RMDB_REL_TYPE, (rel_name), RMDB_DEL_REL_OP, "", long_err_msg, code);

	revert quit;

	if quit_intercept_flag then signal quit;	/* Now signal the quit that was intercepted */

	if ^exists_in_db_model & ^brief then call error (mrds_error_$no_model_rel, "^/" || rel_name);

exit:
	if O_err_code = mrds_error_$no_model_rel	/* Don't abort just for this */
	then mftxn_code = 0;
	else mftxn_code = O_err_code;
%include mrds_finish_transaction;
	if mftxn_code ^= 0 then do;
		O_err_code = mftxn_code;
		O_err_msg = "Could not finish a transaction while deleting relation " || rtrim (rel_name) || ".";
	     end;
	return;
%page;
/*  * * * * * * * * * *    unlink_relation   * * * * * * * * * * * *  *      */

unlink_relation: proc (exists);

	dcl     exists		 bit (1) parameter;
	dcl     last_ua_ptr		 ptr;
	dcl     record_buffer	 bit (72);

	prev_fi_ptr = null;			/* Indicating db_model.file_ptr */

/* Look for rel_name in file_info linked list */

	exists = "0"b;

	if db_model.file_ptr ^= NULL_OFFSET
	then do fi_ptr = ptr (dbm_ptr, db_model.file_ptr)
	     repeat ptr (dbm_ptr, file_info.fwd_ptr)
	     while (^exists & rel (fi_ptr) ^= NULL_OFFSET);

	     if file_info.file_name = rel_name then do;	/* Found the one were looking for */
		     exists = "1"b;
		     saved_fi_ptr = fi_ptr;		/* Pointer to one to be unlinked */
		end;
	     else prev_fi_ptr = fi_ptr;

	end;

	if ^exists then goto not_in_model;		/* Relation was not linked into db_model */

	next_fi_ptr_offset = saved_fi_ptr -> file_info.fwd_ptr;

	if ^cleanup_entry_point then call mdbm_util_$inconsistent_set (dbm_ptr, "delete_relation",
		"Deleting relation " || rel_name, "delete_relation " || rel_name || " -brief");

/* Indicate in all the attributes within this relation that they aren't
   referenced within this relation. If any of the attributes becomes
   unreferenced, create an unreferenced_attribute structure and link it into
   the list in db_model. */

	if rmdb_ctl.crossref_file_info.iocb_ptr = null
	then do;
	     call mdbm_util_$xref_build (rmdb_ctl.temp_dir_path, rmdb_ctl.absolute_db_path,
		dbm_ptr, rmdb_ctl.crossref_file_info.name, rmdb_ctl.crossref_file_info.iocb_ptr,
		long_err_msg, code);
	     if code ^= 0 then call error (code, long_err_msg);
	     end;
not_in_model:
	xref_iocb_ptr = rmdb_ctl.crossref_file_info.iocb_ptr;
	if xref_iocb_ptr = null then return;

	file_model_name = rtrim (rel_name) || ".m";
	call initiate_file_ (db_path, file_model_name, R_ACCESS, fm_ptr, (0), code);
	if code ^= 0 then
	     if brief then do;
		exists = "0"b;
		return;
		end;
	     else call error (code, "Initiating " || file_model_name);

	last_ua_ptr = null;
	ri_ptr = ptr (fm_ptr, rel_ptr);

	do ai_ptr = ptr (fm_ptr, rel_info.attr_ptr)
		  repeat ptr (fm_ptr, attr_info.fwd_thread)
		  while (rel (ai_ptr) ^= NULL_OFFSET);
	     call mdbm_util_$xref_dereference (xref_iocb_ptr, ATTRIBUTE_KEY_HEAD,
		(attr_info.name), rel_name, reference_count, long_err_msg, code);
	     if code ^= 0 then call error (code, long_err_msg);

	     if reference_count = 0 then do;
		last_ua_ptr = null;
		do ua_ptr = ptr (dbm_ptr, db_model.unreferenced_attribute_ptr)
			  repeat ptr (dbm_ptr, unreferenced_attribute.fwd_thread)
			  while (rel (ua_ptr) ^= NULL_OFFSET);
		          last_ua_ptr = ua_ptr;
		     end;				/* do last_ua_ptr */

/* Check to see if the domain name and attribute name are the same. If so, then
   this is a generated attribute and should not be added to the unreferenced
   attribute list. */
		di_ptr = ptr (dbm_ptr, attr_info.domain_ptr);
		if domain_info.name = attr_info.name
		then do;

/* This is a generated attribute. Check the domain reference count. If it is 1,
   then the domain becomes unreferenced. */
		     crossref_info_record_ptr = addr (record_buffer);
		     call mdbm_util_$xref_find_record (xref_iocb_ptr, DOMAIN_KEY_HEAD,
			(domain_info.name), crossref_info_record_ptr, 8, long_err_msg, code);
		     if code ^= 0 then call error (code, long_err_msg);

		     if crossref_info_record.count = 1 /* 1 for the generated attribute */
		     then domain_info.unreferenced = "1"b;
		     end;
		else do;				/* it's a real attribute */
		     allocate unreferenced_attribute in (dbm_area) set (ua_ptr);

		     unreferenced_attribute.name = attr_info.name;
		     unreferenced_attribute.domain_ptr = attr_info.domain_ptr;
		     unreferenced_attribute.unused (*) = NULL_OFFSET;
		     unreferenced_attribute.fwd_thread = NULL_OFFSET;

/* Link it on the end of the list */
		     if last_ua_ptr = null
		     then db_model.unreferenced_attribute_ptr = rel (ua_ptr);
		     else last_ua_ptr -> unreferenced_attribute.fwd_thread = rel (ua_ptr);
		     end;
		end;
	     end;					/* do ai_ptr */

/* Unlink the file_info structure in db_model */

	if ^exists 
	then do;
	     saved_fi_ptr = ptr (dbm_ptr, file_model.fi_ptr);
	     free saved_fi_ptr -> file_info;
	     exists = "1"b;
	     return;
	     end;

	if prev_fi_ptr = null then /* Incase it was first in  list */
	     db_model.file_ptr = next_fi_ptr_offset;

	else prev_fi_ptr -> file_info.fwd_ptr = next_fi_ptr_offset; /* Link around current file_info structure */

	db_model.num_unblk_files = db_model.num_unblk_files - 1; /* Just unlinked */
	db_model.num_rels = db_model.num_rels - 1;

	if ^brief & code ^= 0 then call error (code, long_err_msg); /* Error code from rmdb_add_rmdb_history */

	call mdbm_util_$xref_delete_record (xref_iocb_ptr, RELATION_KEY_HEAD,  rel_name, long_err_msg, code);
	if (code ^= 0) & (code ^= error_table_$no_record) & (^brief)
	then call error (code, long_err_msg);

	free saved_fi_ptr -> file_info;		/* Free unlinked file_info structure */

	call adjust_bit_count_ ((db_path), "db_model", "1"b, bcnt, code);

     end unlink_relation;
%page;
/***********
*
*   These routines are used by the transaction processing include files.
*   Restore_significant_data is called to reinitialize variables in case
*   of a rollback.  Should_rollback determines whether a transaction should
*   be rolled back or aborted on error.  Currently, it is always aborted.
*
**********/


restore_significant_data:
     proc;
     end restore_significant_data;



should_rollback:
     proc returns (bit (1));
	return ("0"b);
     end should_rollback;
%page;
/*  * * * * * * * * * * * * * *      error     * * * * * * * * * * * * * *   */



error: proc (err_code, err_message);

	dcl     err_code		 fixed bin (35);
	dcl     err_message		 char (*);


	O_err_code = err_code;
	O_err_msg = err_message;
	goto exit;

     end error;
%page;
%include access_mode_values;
%page;
%include mdbm_db_model;
%page;
%include mdbm_file_model;
%page;
%include mrds_rmdb_ctl;
%page;
%include rmdb_crossref_info;
%page;
%include rmdb_delete_rel_info;
%page;
%include rmdb_history_entry;
%page;
%include terminate_file;
%page;
	dcl     addr		 builtin;
	dcl     adjust_bit_count_	 entry (char (168) aligned, char (32) aligned, bit (1) aligned, fixed bin (35), fixed bin (35));
	dcl     any_other		 condition;
	dcl     based_char8		 char (8) based;
	dcl     bcnt		 fixed bin (35);
	dcl     cleanup		 condition;
	dcl     cleanup_entry_point	 bit (1);
	dcl     code		 fixed bin (35);
	dcl     db_path		 char (168);
	dcl     error_table_$action_not_performed fixed bin (35) ext static;
	dcl     error_table_$noentry	 fixed bin (35) ext static;
	dcl     error_table_$no_record fixed bin(35) ext static;
	dcl     error_table_$unimplemented_version fixed bin (35) ext static;
	dcl     exists_in_db_model	 bit (1);
	dcl     file_model_name	 char (32);
	dcl     fixed		 builtin;
	dcl     initiate_file_	 entry (char(*), char(*), bit(*), ptr, fixed bin(24), fixed bin(35));
	dcl     long_err_msg	 char (500);
	dcl     mdbm_util_$inconsistent_reset entry (ptr);
	dcl     mdbm_util_$inconsistent_set entry (ptr, char (*), char (*), char (*));
	dcl     mdbm_util_$xref_build	 entry (char(*), char(*), ptr, char(*), ptr, char(*), fixed bin(35));
	dcl     mdbm_util_$xref_delete_record entry (ptr, char(*), char(*), char(*), fixed bin(35));
	dcl     mdbm_util_$xref_dereference entry (ptr, char(*), char(*), char(*), fixed bin (21), char(*), fixed bin(35));
	dcl     mdbm_util_$xref_find_record entry (ptr, char(*), char(*), ptr, fixed bin(21), char(*), fixed bin(35));
	dcl     mrds_error_$no_db_path fixed bin (35) ext static;
	dcl     mrds_error_$no_model_rel fixed bin (35) ext static;
	dcl     next_fi_ptr_offset	 bit (18);
	dcl     null		 builtin;
	dcl     NULL_OFFSET		 int static bit (18) unal init ((18)"1"b) options (constant);
	dcl     prev_fi_ptr		 ptr;
	dcl     ptr		 builtin;
	dcl     quit		 condition;
	dcl     quit_intercept_flag	 bit (1);
	dcl     reference_count	 fixed bin (21);
	dcl     rel		 builtin;
	dcl     rel_name		 char (32);
	dcl     rmdb_add_rmdb_history	 entry (ptr, fixed bin, char (32), fixed bin, char (32), char (500), fixed bin (35));
	dcl     rtrim		 builtin;
	dcl     saved_fi_ptr	 ptr;
	dcl     sys_info$max_seg_size	 fixed bin(35) ext static;
	dcl     terminate_file_	 entry (ptr, fixed bin(24), bit(*), fixed bin(35));
	dcl     xref_iocb_ptr	 ptr;

     end rmdb_delete_relation;
