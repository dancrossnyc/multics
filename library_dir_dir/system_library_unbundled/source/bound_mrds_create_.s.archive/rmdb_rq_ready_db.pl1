/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */

/* format: ^inddcls,^indattr,indnoniterend,^indnoniterdo,indend,tree,^case,insnl,comcol61,dclind5,declareind5,delnl */

rmdb_rq_ready_db:
     proc (sci_ptr, info_ptr);


/****^  HISTORY COMMENTS:
  1) change(85-12-03,Spitzer), approve(85-12-03,MCR7311),
     audit(86-09-02,Blair), install(86-10-16,MR12.0-1187):
     added the database creation code.
  2) change(88-01-11,Blair), approve(88-02-25,MCR7840), audit(88-03-03,Dupuis),
     install(88-03-08,MR12.2-1034):
     Re_arrange some code so that the pathname of the database isn't expanded
     until after we try to fill in the mrds_pathname_info structure so that we
     can use search paths to locate the database.  Only if the database doesn't
     exist do we try to create one in the working_dir.
  3) change(88-09-20,Dupuis), approve(88-09-20,MCR7995), audit(88-09-20,Blair),
     install(88-09-26,MR12.2-1119):
     Changed error_table_bad_arg to error_table_$badopt (phx20666).
                                                   END HISTORY COMMENTS */


/*
   .		       BEGIN_DESCRIPTION
   This  routines  implements  that  ready_db  request  within   the
   restructure_mrds_db  subsystem.  It  processes  and  checks  that
   arguments  associated  with  the  request  and  then  calls   the
   rmdb_ready_db  routine  which actually does the work or ready-ing
   the db for restructuring.

   If the database does not exist, the user will be queried to create
   it. If the answer is yes, the database is created with no existing
   domains, attribute, or domains, and the database is quiesced.

   In the event that the readied database is marked inconsistent  it
   will  query  the  user  for execution of the undo request.
   .		       END_DESCRIPTION

   Known Bugs:

   Other Problems:

   .                       HISTORY
   82-03-29 Davids: Written

   82-04-08 Davids: Changed the error messages for "a database is
   .                alreadied readied" and "could not  ready  the
   .                database" so that they are formated better.

   82-04-30 Davids: Added code to check the  consistency  of  the
   .                database and to execute the undo request.

   82-05-25 Davids: changed to have rmdb_ctl.db_model_ptr in calling
   .                sequence to rmdb_ready_db.

   82-05-26 Davids: changed to call rmdb_execute_undo if the database
   .                is inconsistent.

   82-06-07 Davids: changed to check size condition if user inputs a
   .                quiesce_wait_time  that  is  to  large.  Also to
   .                recognize a negative wait  time  so  as  not  to
   .                treat  it  like  a control argument. And changed
   .                changed   the   default   wait   time   to   use
   .                mrds_data_$quiesce_wait  (= 0)  instead  of  the
   .                constant 10.

   82-06-25 Davids: removed    call    to   get_shortest_path_   and
   .                reformated some lines to prevent wrap-around

   82-07-01  Roger Lackey : Modified the calls to mu_db_inconsistent to use
   .                        mdbm_util_$inconsistent_* for binding.

   82-08-20 Davids: modified the call to rmdb_ready_db to include
   .                addr (rmdb_ctl.relmgr_entries).

   83-05-24 Davids: Modified the parameter list of rmdb_ready_db to include the
   saved_res_version_ptr argument.

   84-10-23 Benjamin: When returning from rmdb_ready_db, if code is 
   mrds_error_$my_quiesced_db, will not abort, but rather set a flag that says
   that rmdb did not quiesce the database.
*/

/* PARAMETERS */

dcl  sci_ptr ptr;					/* (input) pointer to the subsystem control infor structure */
						/*         need to be able to pass it to the ssu entries */
dcl  info_ptr ptr;					/* (input) pointer the rmdb_ctl structure which is both */
						/*         read and written */

/* EXTERNAL STATIC */

dcl  error_table_$badopt fixed bin (35) external static;
dcl  error_table_$bad_conversion fixed bin (35) external static;
dcl  error_table_$noarg fixed bin (35) external static;
dcl  mrds_data_$quiesce_wait fixed bin (35) external static;
dcl  mrds_error_$my_quiesced_db fixed bin (35) ext static;
dcl  mrds_error_$no_database fixed bin (35) ext static;

/* ENTRIES */

dcl  command_query_$yes_no entry () options (variable);
dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  expand_pathname_$add_suffix entry (char(*), char(*), char(*), char(*), fixed bin(35));
dcl  mdbm_util_$inconsistent_get_info entry (ptr, bit (1), char (*), char (*), char (*));
dcl  pathname_ entry (char(*), char(*)) returns(char(168));
dcl  rmdb_create_db entry (char (*), char (*), char (*), char (*), ptr, char (*), fixed bin (35));
dcl  rmdb_execute_undo entry (ptr, char (32), char (168), ptr, char (32), char (100));
dcl  rmdb_ready_db entry (char (168), fixed bin, ptr, char (168), ptr, ptr, char (500), fixed bin (35));
dcl  ssu_$abort_line entry options (variable);
dcl  ssu_$arg_count entry (ptr, fixed bin);
dcl  ssu_$arg_ptr entry (ptr, fixed bin, ptr, fixed bin (21));

/* INTERNAL AUTOMATIC */

dcl  arg_len fixed bin (21);				/* length of an argument */
dcl  arg_ptr ptr;					/* pointer to an argument */
dcl  code fixed bin (35);				/* standard error code */
dcl  db_dir char (168);				/* expanded directory of db */
dcl  db_name char (32);				/* db name + suffix */
dcl  db_path char (168);				/* database path supplied as an argument */
dcl  error_message char (500);			/* error message returned from rmdb_ready_db */
dcl  force_sw bit (1);				/* true if -force was specified */
dcl  i fixed bin;					/* loop index */
dcl  incon_name char (32);				/* name of module that marked db as inconsistent */
dcl  incon_value bit (1);				/* true ==> db is inconsistent */
dcl  nargs fixed bin;				/* number of arguments the request was called with */
dcl  quiesce_wait_time fixed bin;			/* how many seconds the caller is willing to wait to
						   try to quiesce the database */
dcl  quiesce_wait_time_supplied bit (1);		/* true if a wait time has been supllied as an argument */
dcl  relation_type char (32);				/* file type command line argument */
dcl  relation_modes char (256);			/* mode command line argument */
dcl  undo_request char (100);				/* rmdb request that will make the db consistent again */
dcl  unused1 char (200);				/* unused output parameter from mdbm_util_$inconsistent_get_info */

/* BUILTINS */

dcl  addr builtin;
dcl  index builtin;
dcl  verify builtin;

/* BASED */

dcl  arg char (arg_len) based (arg_ptr);		/* an argument */

/* CONDITIONS */

dcl  size condition;

/* CONSTANTS */

dcl  DATA_MANAGEMENT_FILE char (32) int static options (constant) init ("data_management_file");
dcl  OFF bit (1) internal static options (constant) init ("0"b);
dcl  ON bit (1) internal static options (constant) init ("1"b);
dcl  VFILE char (32) int static options (constant) init ("vfile");

/* INCLUDES */
%page;
%include mrds_rmdb_ctl;

/*
   Assign initial values
*/

	rmdb_ctl_ptr = info_ptr;

	db_path = "";
	relation_type = "";
	relation_modes = "";
	quiesce_wait_time_supplied = OFF;

	force_sw = OFF;

/*
   If the absolute_db_path is not null it indicates that a  database
   is  currently  in the readied state. The caller cannot request to
   ready a  database  while  one  is  still  readied.  The  call  to
   ssu_$abort_line  does  not  return,  it  causes  the  rest of the
   request line to be aborted and returns control to the listener.
*/

	if rmdb_ctl.absolute_db_path ^= ""
	then call ssu_$abort_line (sci_ptr, 0,
		"^/The database ^a^/^-is already readied, only 1 database may be readied at a time."
		|| "^/^-Type ""free_db"" to free the currently readied database.", rmdb_ctl.absolute_db_path);

/*
   The ready_db request takes two control args, -pathname (-pn)  and
   -quiesce_wait_time  (-qwt).  These  arguments  may  appear in any
   order and any number of times with the last value being  the  one
   used.  If  the first argument is not a control arg, i.e. does not
   begin with a "-" it is assumed to be the database path.
*/

	call ssu_$arg_count (sci_ptr, nargs);

	i = 1;
	do while (i <= nargs);
	     call ssu_$arg_ptr (sci_ptr, i, arg_ptr, arg_len);

	     if /* case */ index (arg, "-") = 1
	     then if /* case */ arg = "-fc" | arg = "-force"
		then force_sw = "1"b;
		else if arg = "-nfc" | arg = "-no_force"
		then force_sw = "0"b;
		else if arg = "-pn" | arg = "-pathname"
		then do;
		     if i = nargs
		     then
missing_path:
			call ssu_$abort_line (sci_ptr, error_table_$noarg,
			     "^/The -pathname (-pn) control arg was given but no pathname was supplied");
		     call ssu_$arg_ptr (sci_ptr, i + 1, arg_ptr, arg_len);
		     if index (arg, "-") = 1
		     then goto missing_path;
		     db_path = arg;
		     i=i+1;
		     end;
		else if arg = "-qwt" | arg = "-quiesce_wait_time"
		then do;
		     if i = nargs
		     then call ssu_$abort_line (sci_ptr, error_table_$noarg,
			     "^/The -quiesce_wait_time (-qwt) control arg was given but no quiesce wait time was supplied.");
		     call ssu_$arg_ptr (sci_ptr, i + 1, arg_ptr, arg_len);
		     if verify (arg, "-0123456789") ^= 0
		     then goto bad_conversion;

		     quiesce_wait_time_supplied = ON;
		     on size
			begin;
			     call ssu_$abort_line (sci_ptr, error_table_$bad_conversion,
				"^/The size of the quiesce wait time ^a is larger "
				|| "than the maximum of 131071.", arg);
			end;
(size):
		     quiesce_wait_time = cv_dec_check_ (arg, code);
		     revert size;
		     if code ^= 0
		     then
bad_conversion:	          call ssu_$abort_line (sci_ptr, error_table_$bad_conversion,
			     "^/Could not convert ^a into an integer representing the quiesce wait-time.", arg);
		     if quiesce_wait_time < 0
		     then call ssu_$abort_line (sci_ptr, error_table_$bad_conversion,
			     "^/The quiesce wait time ^a is negative, wait times must be >= 0.", arg);
		     i=i+1;
		     end;
		else if arg = "-rt" | arg = "-relation_type"
		then do;
		     if i = nargs
		     then
missing_type:		call ssu_$abort_line (sci_ptr, error_table_$noarg, "^/The -relation_type (-rt) control argument was given but no relation type was supplied.");
		     call ssu_$arg_ptr (sci_ptr, i+1, arg_ptr, arg_len);
		     if index (arg, "-") = 1
		     then goto missing_type;
		     relation_type = arg;
		     i = i+1;
		     if i ^= nargs
		     then do;
			call ssu_$arg_ptr (sci_ptr, i+1, arg_ptr, arg_len);
			if index (arg, "-") ^= 1
			then do;
			     relation_modes = arg;
			     i = i + 1;
			     end;
			end;
		     end;
		else call ssu_$abort_line (sci_ptr, error_table_$badopt, "^/Argument ^i (^a) is unrecognized", i,
			arg);
	     else if db_path = ""
		then db_path = arg;
	          else call ssu_$abort_line (sci_ptr, 0, "Duplicate argument.^/A database_path has already been given. ^a",
		     arg);
	     i = i + 1;
	     end;					/* do while */

/*
   If the database path has not been supplied as an argument its  an
   error
*/

	if db_path = ""
	then call ssu_$abort_line (sci_ptr, error_table_$noarg,
		"^/The database path is required and has not been supplied");

/*
   If a quiesce_wait_time has not been supplied assume the  default
   value.
*/

	if ^quiesce_wait_time_supplied
	then quiesce_wait_time = mrds_data_$quiesce_wait;

/* Check validity of the relation type. If no relation type specified, default
   to vfile types */

	if relation_type = ""
	then relation_type = VFILE;
	else if relation_type = "dmf"
	     then relation_type = DATA_MANAGEMENT_FILE;
	     else if ^(relation_type = VFILE | relation_type = DATA_MANAGEMENT_FILE)
		then call ssu_$abort_line (sci_ptr, 0, "Invalid relation_type supplied. ^a^/^-Valid types are: ^a, ^a",
		relation_type, VFILE, DATA_MANAGEMENT_FILE);

/*
   Make the call that will prepare the database for restructuring.
*/

	rmdb_ctl.flags.database_readied_by_rmdb = ON;

	call rmdb_ready_db (db_path, quiesce_wait_time, addr (rmdb_ctl.relmgr_entries), rmdb_ctl.absolute_db_path,
	     rmdb_ctl.db_model_ptr, rmdb_ctl.saved_res_version_ptr, error_message, code);
	if code = mrds_error_$my_quiesced_db
	then rmdb_ctl.flags.database_readied_by_rmdb = OFF;
	else if code = mrds_error_$no_database
	     then do;
		call expand_pathname_$add_suffix (db_path, "db", db_dir, db_name, code);
		if code ^= 0
		     then call ssu_$abort_line (sci_ptr, code, "^a", db_path);
		db_path = pathname_ (db_dir, db_name);

		if ^force_sw
		then do;
		     call command_query_$yes_no (force_sw, mrds_error_$no_database, "restructure_mrds_db (ready_db)",
			"Answering yes will create an empty MRDS database.", "^/Do you wish to create ^a?",
			db_path);
		     if ^force_sw
		     then call ssu_$abort_line (sci_ptr, 0);
		     end;
		call rmdb_create_db (db_path, relation_type, relation_modes, rmdb_ctl.absolute_db_path,
		     rmdb_ctl.db_model_ptr, error_message, code);
		if code ^= 0
		then call ssu_$abort_line (sci_ptr, code, "^/The database ^a^/could not be created.^/^-^a", db_path,
			error_message);

		call rmdb_ready_db (db_path, quiesce_wait_time, addr (rmdb_ctl.relmgr_entries),
		     rmdb_ctl.absolute_db_path, rmdb_ctl.db_model_ptr, rmdb_ctl.saved_res_version_ptr, error_message,
		     code);

		end;
	     else if code ^= 0
		then call ssu_$abort_line (sci_ptr, code,
			"^/The database ^a^/^-could not be readied for restructuring^/^-^a", db_path, error_message)
			;

/*
   If the database is inconsistent it must be made consistent before
   the user can be told that it has been readied. Note at this point
   the database is really readied. rmdb_execute_undo will query  the
   user  about  running the undo request. If the user chooses not to
   run the undo request or the undo request fails  the  database  is
   freed and then the request line is aborted. If the database can't
   be freed the subsystem is aborted.
*/

	call mdbm_util_$inconsistent_get_info (rmdb_ctl.db_model_ptr, incon_value, incon_name, unused1, undo_request);
	if incon_value
	then call rmdb_execute_undo (sci_ptr, "ready_db", rmdb_ctl.absolute_db_path, rmdb_ctl.db_model_ptr, incon_name,
		undo_request);


	return;

     end rmdb_rq_ready_db;
