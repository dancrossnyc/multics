/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */

rmdb_execute_undo:
execute_undo:
	proc (sci_ptr, request_name, db_path, db_model_ptr, incon_name, undo_request);


/****^  HISTORY COMMENTS:
  1) change(86-01-27,Spitzer), approve(86-01-27,MCR7311),
     audit(86-09-15,Gilcrease), install(86-10-16,MR12.0-1187):
     added call to rmdb_salvage_db.
  2) change(86-10-21,Blair), approve(86-10-21,PBF7311), audit(86-10-23,Dupuis),
     install(86-10-23,MR12.0-1199):
     Add the entry name execute_undo so that display_mrds_dm can call this
     program through mrds_rst_ to clean things up when the user is trying to
     display the model.
                                                   END HISTORY COMMENTS */


/*
   .                        BEGIN_DESCRIPTION
   This routine will query the user to find  out  if  he  wants  the
   undo_request  to  be  executed.  If  the  answer  is yes the undo
   request is executed and  if  the  execution  was  ok  the  module
   returns  to  its  caller.  If the execution fails the database is
   freed, if it cannot be freed the subsystem  is  aborted.  If  the
   user  indicates that the undo request should not be executed then
   the database is just freed, if it cannot be freed  the  subsystem
   is  aborted.  If  the  execution of the undo request fails or the
   user does not request its execution but the  database  was  freed
   then  the ssu request line is aborted. Note that if the subsystem
   or request line is aborted this module will  not  return  to  its
   caller.  A  message  indicating  that the database has been freed
   will be printed on the users terminal.

   This module should  only  be  called  if  the  currently  readied
   database is inconsistent.
   .                        END_DESCRIPTION

   Known Bugs:
   .    1) ssu_$execute_string does not return if the execution fails

   Other Problems:

   .                        HISTORY
   82-05-26 Davids: Written

   82-06-23 Davids: removed call to get_shortest_path and declared
   .                some explicitly declared builtins.

   82-07-01  Roger Lackey : Modified the calls to mu_db_inconsistent to use
   mdbm_util_$inconsistent_* for binding.
*/

/* PARAMETERS */

	dcl     sci_ptr		 ptr;		/* (input) just passing through */
	dcl     request_name	 char (32);	/* (input) request being executed */
	dcl     db_path		 char (168);	/* (input) absolute path of the readied database */
	dcl     db_model_ptr	 ptr;		/* (input) pointer to the db_model seg of the readied database */
	dcl     incon_name		 char (32);	/* (input) request name that caused the db to be inconsistent */
	dcl     undo_request	 char (100);	/* (input) request that will make the db consistent */

/* AUTOMATIC */

	dcl     code		 fixed bin (35);	/* standard error code */
	dcl     explanation		 char (300);	/* explanatory text to the query */
          dcl     question               char (300);        /* initial query to user */
	dcl     answer		 char (3) varying;	/* user's answer to the query (yes | no) */

/* EXTERNAL STATIC */

	dcl     error_table_$action_not_performed fixed bin (35) ext static;
	dcl     iox_$user_input	 ptr ext static;
	dcl     iox_$user_output	 ptr ext static;

/* ENTRIES */

	dcl     command_query_	 entry () options (variable);
	dcl     mdbm_util_$inconsistent_reset entry (ptr);
	dcl     rmdb_salvage_db	 entry (char (*));
	dcl     ssu_$abort_line	 entry () options (variable);
	dcl     ssu_$abort_subsystem	 entry () options (variable);
	dcl     ssu_$execute_string	 entry (ptr, char (*), fixed bin (35));
          dcl     ssu_et_$null_request_line fixed bin(35) ext static;

/* BUILTINS */

	dcl     addr		 builtin;
	dcl     length		 builtin;
	dcl     null		 builtin;
	dcl     rtrim		 builtin;

/* INCLUDES */
%page;
%include query_info;

          if undo_request = "" 
	then explanation = "^/The database is inconsistent because the operation:" ||
	     "^/^-^a^s^/was interrupted.  The database must be made consistent" ||
	     "^/in order to perform additional restructuring requests. " ||
	     "^/^/Do you wish to continue ?";
	else explanation = "^/The database is inconsistent because the operation:" ||
	     "^/^-^a^s^/was interrupted. In order to undo the effects of this" ||
	     "^/the request ""^a"" must be executed." ||
	     "^/Until the database is made consistent it may not be restructured." ||
	     "^/^/Do you wish to run the request ?";
	query_info.version = query_info_version_5;
	query_info.switches.yes_or_no_sw = "1"b;
	query_info.switches.suppress_name_sw = "0"b;
	query_info.switches.cp_escape_control = "00"b;
	query_info.switches.suppress_spacing = "0"b;
	query_info.switches.padding = "0"b;
	query_info.status_code = 0;
	query_info.query_code = 0;
	query_info.question_iocbp = iox_$user_output;
	query_info.answer_iocbp = iox_$user_input;
	query_info.repeat_time = 0;
	query_info.explanation_ptr = addr (explanation);
	query_info.explanation_len = length (rtrim (explanation));
	if undo_request = ""
	then question = "^/The database ^s^a is inconsistent. " ||
	     "^/In order to ready or restructure the database it must first be made consistent." ||
	     "^/^/Do you wish to continue ?";
	else question = "^/The database ^s^a is inconsistent. " ||
	     "^/In order to ready or restructure the database the following " ||
	     "^/request which will make the database consistent must be run:" ||
	     "^/^-^a^/Do you wish to run it ?";
	call command_query_ (addr (query_info), answer, request_name, rtrim(question),
	     incon_name, db_path, undo_request);

	if answer = "yes"
	then do;
	          call rmdb_salvage_db (db_path);

		call ssu_$execute_string (sci_ptr, rtrim (undo_request), code);
		if (code ^= 0 & code ^= ssu_et_$null_request_line)
		then do;
			call ssu_$execute_string (sci_ptr, "free_db", code);
			if code ^= 0
			then call ssu_$abort_subsystem (sci_ptr, code,
				"Execution of the undo request failed and the db could not be freed.");
			call ssu_$abort_line (sci_ptr, code,
			     "Execution of the undo request failed, the database has been freed");
		     end;
		else call mdbm_util_$inconsistent_reset (db_model_ptr);
	     end;
	else do;
		call ssu_$execute_string (sci_ptr, "free_db", code);
		if code ^= 0
		then call ssu_$abort_subsystem (sci_ptr, code, "Could not free the database");
		call ssu_$abort_line (sci_ptr, error_table_$action_not_performed,
		     "^/The database is inconsistent and therefore may not be restructured, it has been freed.");
	     end;

     end rmdb_execute_undo;



