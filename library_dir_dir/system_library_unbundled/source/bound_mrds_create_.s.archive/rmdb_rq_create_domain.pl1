/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */

/* format: ^inddcls,^indattr,indnoniterend,^indnoniterdo,indend,tree,^case,insnl,comcol61,dclind5,declareind5,delnl */

/* BEGIN_DESCRIPTION

   This routine parses command arguments for the create_domain rmdb
   request.

   END_DESCRIPTION */

/****^  HISTORY COMMENTS:
  1) change(85-12-03,Spitzer), approve(85-12-03,MCR7311),
     audit(86-09-02,Blair), install(86-10-16,MR12.0-1187):
     written
                                                   END HISTORY COMMENTS */

rmdb_rq_create_domain:
     proc (I_sci_ptr, I_rmdb_ctl_ptr);

	sci_ptr = I_sci_ptr;
	rmdb_ctl_ptr = I_rmdb_ctl_ptr;

/* Determine the number of arguments. There must be an even number. */

	call ssu_$arg_count (sci_ptr, nargs);
	if (nargs = 0) | (mod (nargs, 2) ^= 0)
	then call ssu_$abort_line (sci_ptr, error_table_$wrong_no_of_args,
		"^/Usage:^/^-^a domain_name data_type {-control_args}", myname);

/* Check to see if we have an open database. */

	if rmdb_ctl.absolute_db_path = ""
	then call ssu_$abort_line (sci_ptr, error_table_$action_not_performed,
		"^/There is no currently readied database.");

/* Check to see if the database is consistent. If not, we must make it
consistent before we can create new attributes. Note that if for some reason
the database is not made consistent rmdb_execute_undo will not return. It
will either cause a request line or subsystem abort. */

	call mdbm_util_$inconsistent_get_info (rmdb_ctl.db_model_ptr, incon_value, incon_name, unused2, undo_request);
	if incon_value
	then call rmdb_execute_undo (sci_ptr, myname, rmdb_ctl.absolute_db_path, rmdb_ctl.db_model_ptr, incon_name,
		undo_request);

/* Create the structure that contains the info about the domain. */

	create_domain_info_count = 1;
	allocate create_domain_info in (my_area) set (create_domain_info_ptr);

/* Fill in our structure. */

	create_domain_info.version = create_domain_info_version_1;
	create_domain_info.domain (1).check_proc_path, create_domain_info.domain (1).decode_proc_path,
	     create_domain_info.domain (1).encode_proc_path = " ";

/* The first arg must be the domain name. */

	call ssu_$arg_ptr (sci_ptr, 1, argp, argl);
	if argl > 32
	then call ssu_$abort_line (sci_ptr, mrds_error_$long_ident, "^a", arg);
	if argl < 1
	then call ssu_$abort_line (sci_ptr, error_table_$noarg, "The domain name cannot be a null value. ^a", arg);
	if verify (arg, mrds_data_$valid_id_chars) ^= 0
	then call ssu_$abort_line (sci_ptr, mrds_error_$bad_ident, "^a", arg);
	if search (substr (arg, 1, 1), "-_") ^= 0
	then call ssu_$abort_line (sci_ptr, mrds_error_$inv_domain_name_first_char, "^a", arg);
	create_domain_info.domain (1).name = arg;

/* The second arg must be the domain type */

	call ssu_$arg_ptr (sci_ptr, 2, argp, argl);
	if argl < 1
	then call ssu_$abort_line (sci_ptr, error_table_$noarg, "The domain type cannot be a null value. ^a", arg);

/* Establish a cleanup handler. */

	Pseg = null;
	on cleanup call tidy_up;

	call translator_temp_$get_segment ((myname), Pseg, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, error_table_$action_not_performed,
		"Unable to allocate space in the process for a descriptor.");

	the_descriptor = "0"b;
	call rmdb_create_descriptor (arg, Pseg, addr (the_descriptor), code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code,
		"A valid descriptor could not be produced from the supplied data type declaration. ^a", arg);

	create_domain_info.domain (1).descriptor, create_domain_info.domain (1).decode_declare_data_descriptor =
	     the_descriptor;

/* Initialize for the control argument loop */

	args_used = 2;
	check_proc_exists, decode_dcl_exists, decode_proc_exists, encode_proc_exists = "0"b;

/* Now get the control arguments if there are any. */

	do while (args_used < nargs);

	     call ssu_$arg_ptr (sci_ptr, args_used + 1, argp, argl);
	     if /* case */ index (arg, "-") = 1
	     then if (arg = "-check_procedure") | (arg = "-check_proc")
		then do;
		     call common_to_all_args (check_proc_exists, "check_proc");
		     create_domain_info.domain (1).check_proc_path = pathname_ (I_dirname, I_entryname);
		     end;
		else if (arg = "-encode_procedure") | (arg = "-encode_proc")
		then do;
		     call common_to_all_args (encode_proc_exists, "encode_proc");
		     create_domain_info.domain (1).encode_proc_path = pathname_ (I_dirname, I_entryname);
		     end;
		else if arg = "-decode_procedure" | arg = "-decode_proc"
		then do;
		     call common_to_all_args (decode_proc_exists, "decode_proc");
		     create_domain_info.domain (1).decode_proc_path = pathname_ (I_dirname, I_entryname);
		     end;
		else if (arg = "-decode_dcl") | (arg = "-decode_declare")
		then do;
		     call common_to_all_args (decode_dcl_exists, "decode_dcl");
		     call rmdb_create_descriptor (arg, Pseg, addr (the_descriptor), code);
		     if code ^= 0
		     then call ssu_$abort_line (sci_ptr, code,
			     "^/A valid descriptor could not be produced from the supplied data type. ^a", arg);

		     create_domain_info.domain (1).decode_declare_data_descriptor = the_descriptor;
		     end;

		else call ssu_$abort_line (sci_ptr, error_table_$badopt, "^a", arg);
						/* invalid control arg */

	     else call ssu_$abort_line (sci_ptr, error_table_$bad_arg, "^a", arg);
						/* not a control arg */
	     end;					/* args_used = nargs */

/* Now we have all the args, so check for completeness and consistency */

	if (decode_proc_exists & ^decode_dcl_exists)
	then create_domain_info.domain (1).decode_declare_data_descriptor = create_domain_info.domain (1).descriptor;

	if (decode_dcl_exists & ^decode_proc_exists)
	then call ssu_$abort_line (sci_ptr, error_table_$noarg,
		"^/A -decode_declare type has been specified, but there was no decode_procedure specified.");

	call rmdb_create_domain (rmdb_ctl_ptr, create_domain_info_ptr, error_message, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code, "^a", error_message);

	call tidy_up;
	return;

%page;
/* * * * * * * * * * * * *  tidy_up * * * * * * * * * * * * * * * * * * * * * */

tidy_up:
     proc;

	if Pseg ^= null
	then call translator_temp_$release_all_segments (Pseg, code);
     end tidy_up;

%page;
/* * * * * * * * * * * * *  common_to_all_args  * * * * * * * * * * * * * * * */

common_to_all_args:
     proc (already_exists, which_arg);

dcl  already_exists bit (1) aligned;
dcl  which_arg char (*) parameter;

	if already_exists
	then call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
		"^/The ^a control argument was previously specified.", which_arg);

	args_used = args_used + 1;
	if args_used = nargs
	then call ssu_$abort_line (sci_ptr, error_table_$noarg,
		"^/A ^a argument is required following the -^a control argument.", which_arg, which_arg);

	call ssu_$arg_ptr (sci_ptr, args_used + 1, argp, argl);
	args_used = args_used + 1;
	if (argl < 1) | (index (arg, "-") = 1)
	then call ssu_$abort_line (sci_ptr, error_table_$noarg,
		"^/A ^a argument is required following the -^a control argument.", which_arg, which_arg);
	if (arg ^= "-decode_dcl") | (arg ^= "-decode_declare")
	then do;
	     call expand_pathname_ (arg, I_dirname, I_entryname, code);
	     if code ^= 0
	     then call ssu_$abort_line (sci_ptr, code, "^a", arg);
	     if (length (rtrim (I_entryname)) > 32) & (index (I_entryname, "$") = 0)
	     then call ssu_$abort_line (sci_ptr, error_table_$entlong, "^a", arg);
	     end;

	already_exists = "1"b;
	return;
     end common_to_all_args;
%page;
%include mrds_rmdb_ctl;
%include rmdb_create_domain_info;
%page;
dcl  addr builtin;
dcl  arg char (argl) based (argp);
dcl  argl fixed bin (21);
dcl  argp ptr;
dcl  args_used fixed bin;
dcl  check_proc_exists bit (1) aligned;
dcl  cleanup condition;
dcl  code fixed bin (35);
dcl  decode_dcl_exists bit (1) aligned;
dcl  decode_proc_exists bit (1) aligned;
dcl  empty builtin;
dcl  encode_proc_exists bit (1) aligned;
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  error_message char (500);
dcl  error_table_$action_not_performed fixed bin (35) ext static;
dcl  error_table_$bad_arg fixed bin(35) ext static;
dcl  error_table_$badopt fixed bin (35) ext static;
dcl  error_table_$entlong fixed bin (35) ext static;
dcl  error_table_$inconsistent fixed bin (35) ext static;
dcl  error_table_$noarg fixed bin (35) ext static;
dcl  error_table_$wrong_no_of_args fixed bin (35) ext static;
dcl  incon_name char (32);				/* name of the request that caused the db to become inconsistent */
dcl  incon_value bit (1);				/* true ::= the db is inconsistent */
dcl  I_dirname char (168);
dcl  I_entryname char (65);
dcl  I_rmdb_ctl_ptr ptr;
dcl  I_sci_ptr ptr;
dcl  index builtin;
dcl  length builtin;
dcl  mdbm_util_$inconsistent_get_info entry (ptr, bit (1), char (*), char (*), char (*));
dcl  mod builtin;
dcl  mrds_data_$valid_id_chars char (128) varying ext static;
dcl  mrds_error_$bad_ident fixed bin (35) ext static;
dcl  mrds_error_$long_ident fixed bin (35) ext static;
dcl  mrds_error_$inv_domain_name_first_char fixed bin (35) ext static;
dcl  my_area area;
dcl  myname char (32) int static options (constant) init ("create_domain");
dcl  nargs fixed bin;
dcl  null builtin;
dcl  pathname_ entry (char (*), char (*)) returns (char (168));
dcl  Pseg ptr;
dcl  rtrim builtin;
dcl  rmdb_create_descriptor entry (char (*), ptr, ptr, fixed bin (35));
dcl  rmdb_create_domain entry (ptr, ptr, char (*), fixed bin (35));
dcl  rmdb_execute_undo entry (ptr, char (32), char (168), ptr, char (32), char (100));
dcl  sci_ptr ptr;
dcl  search builtin;
dcl  ssu_$abort_line entry () options (variable);
dcl  ssu_$arg_count entry (ptr, fixed bin);
dcl  ssu_$arg_ptr entry (ptr, fixed bin, ptr, fixed bin (21));
dcl  substr builtin;
dcl  the_descriptor bit (36) aligned;
dcl  translator_temp_$get_segment entry (char (*) aligned, ptr, fixed bin (35));
dcl  translator_temp_$release_all_segments entry (ptr, fixed bin (35));
dcl  undo_request char (100);				/* rmdb request that will cause the db to become consistent */
dcl  unused2 char (200);				/* output from mdbm_util_$inconsistent_get_info */
dcl  verify builtin;

     end rmdb_rq_create_domain;
