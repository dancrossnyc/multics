/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_su_.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 03/31/77 by Bob Chang to fix the bug for tally count.	*/
/* Modified 03/27/76 by ORN to avoid initializing the tally parameter (tout) to zero. */
/* Modified since Version 2.0	*/

/* format: style3 */
cobol_su_:
     proc;

dcl	i		fixed bin;
dcl	k		fixed bin;
dcl	newk		fixed bin;

dcl	str		char (100000) based;


/*************************************/
tally:
     entry (tptr);

dcl	tptr		ptr;
dcl	tout_ptr		ptr;
dcl	tout		(512) fixed bin based (tout_ptr);

dcl	1 t		based (tptr),
	  2 ssp		ptr,
	  2 slen		fixed bin,
	  2 n		fixed bin,
	  2 tally		(0 refer (t.n)),
	    3 ccode	fixed bin,		/* 0=CHARACTERS, 1=LEADING, 2=ALL */
	    3 lcode	fixed bin,		/* 0=unspecified(enabled), 1=BEFORE, 2=AFTER, 3=disabled */
	    3 lpos	fixed bin,		/* char pos to enable after's or disable before's */
	    3 llen	fixed bin,		/* length of BEFORE/AFTER string */
	    3 lsp		ptr,			/* ptr to BEFORE/AFTER string (if lcode ^= 0) */
	    3 csp		ptr,			/* ptr to LEADING/ALL string (if ccode > 0) */
	    3 clen	fixed bin,		/* length of LEADING/ALL string */
	    3 tally_ind	fixed bin;		/* tally count	*/

start_tally:
	tout_ptr = addrel (tptr, t.n * 10 + 4);
	do i = 1 to t.n;
	     if t.lcode (i) ^= 0
	     then do;
		     k = index (substr (t.ssp -> str, 1, t.slen), substr (t.lsp (i) -> str, 1, t.llen (i)));
		     if k = 0
		     then t.lpos (i) = t.slen + 1;
		     else do;
			     if t.lcode (i) = 2
			     then t.lpos (i) = k + t.llen (i);
						/* AFTER */
			     else do;		/* BEFORE */
				     if t.ccode (i) ^= 0
				     then k = k - t.clen (i) + 1;
				     t.lpos (i) = k;
				end;
			end;
		end;
	end;

	do k = 1 to t.slen;
	     newk = k;
	     do i = 1 to t.n;
		if t.lcode (i) = 2
		then if k >= t.lpos (i)
		     then t.lcode (i) = 0;		/* enable AFTER tally */
		     else ;
		else if t.lcode (i) = 1
		then if k >= t.lpos (i)
		     then t.lcode (i) = 3;		/* disable BEFORE tally */
		if t.lcode (i) < 2
		then do;				/* if this tally is enabled */
			if t.ccode (i) = 0
			then do;			/* CHARACTERS */
				tout (t.tally_ind (i)) = tout (t.tally_ind (i)) + 1;
				do i = i + 1 to t.n;/* scrap any eligible LEADING's and discontinue search */
				     if t.lcode (i) < 2
				     then if t.ccode (i) = 1
					then t.lcode (i) = 3;
				end;
			     end;
			else do;
				if k + t.clen (i) - 1 ^> t.slen
				then do;		/* enough string left to compare */
					if substr (t.ssp -> str, k, t.clen (i))
					     = substr (t.csp (i) -> str, 1, t.clen (i))
					then do;
						tout (t.tally_ind (i)) = tout (t.tally_ind (i)) + 1;
						newk = k + t.clen (i) - 1;
						do i = i + 1 to t.n;
						     if t.lcode (i) < 2
						     then if t.ccode (i) = 1
							then t.lcode (i) = 3;
						end;
					     end;
					else if t.ccode (i) = 1
					then t.lcode (i) = 3;
						/* disable LEADING */
				     end;
				else if t.ccode (i) = 1
				then t.lcode (i) = 3;
			     end;
		     end;
	     end;
	     k = newk;
	end;
	return;


/*************************************/
replace:
     entry (rptr);

dcl	rptr		ptr;

dcl	1 r		based (rptr),
	  2 ssp		ptr,
	  2 slen		fixed bin,
	  2 n		fixed bin,
	  2 repl		(0 refer (r.n)),
	    3 ccode	fixed bin,		/* 3=FIRST */
	    3 lcode	fixed bin,
	    3 lpos	fixed bin,
	    3 llen	fixed bin,
	    3 lsp		ptr,
	    3 csp		ptr,
	    3 clen	fixed bin,
	    3 bsp		ptr;			/* ptr to BY string (length must = clen) */

start_replace:
	do i = 1 to r.n;
	     if r.lcode (i) ^= 0
	     then do;
		     k = index (substr (r.ssp -> str, 1, r.slen), substr (r.lsp (i) -> str, 1, r.llen (i)));
		     if k = 0
		     then r.lpos (i) = r.slen + 1;
		     else do;
			     if r.lcode (i) = 2
			     then r.lpos (i) = k + r.llen (i);
						/* AFTER */
			     else do;		/* BEFORE */
				     if r.ccode (i) ^= 0
				     then k = k - r.clen (i) + 1;
				     r.lpos (i) = k;
				end;
			end;
		end;
	end;

	do k = 1 to r.slen;
	     newk = k;
	     do i = 1 to r.n;
		if r.lcode (i) = 2
		then if k >= r.lpos (i)
		     then r.lcode (i) = 0;		/* enable AFTER tally */
		     else ;
		else if r.lcode (i) = 1
		then if k >= r.lpos (i)
		     then r.lcode (i) = 3;		/* disable BEFORE tally */
		if r.lcode (i) < 2
		then do;				/* if this tally enabled */
			if r.ccode (i) = 0
			then do;			/* CHARACTERS */
				substr (r.ssp -> str, k, 1) = substr (r.bsp (i) -> str, 1, 1);
				do i = i + 1 to r.n;/* scrap any eligible LEADING's and discontinue search */
				     if r.lcode (i) < 2
				     then if r.ccode (i) = 1
					then r.lcode = 3;
				end;
			     end;
			else do;
				if k + r.clen (i) - 1 ^> r.slen
				then do;		/* enought string left? */
					if substr (r.ssp -> str, k, r.clen (i))
					     = substr (r.csp (i) -> str, 1, r.clen (i))
					then do;
						substr (r.ssp -> str, k, r.clen (i)) =
						     substr (r.bsp (i) -> str, 1, r.clen (i));
						if r.ccode (i) = 3
						then r.lcode (i) = 3;
						/* FIRST - disable it now */
						newk = k + r.clen (i) - 1;
						do i = i + 1 to r.n;
						     if r.lcode (i) < 2
						     then if r.ccode (i) = 1
							then r.lcode (i) = 3;
						end;
					     end;
					else if r.ccode (i) = 1
					then r.lcode (i) = 3;
						/* disable LEADING */
				     end;
				else if r.ccode (i) = 1
				then r.lcode (i) = 3;
			     end;
		     end;
	     end;
	     k = newk;
	end;
	return;


/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

     end cobol_su_;
