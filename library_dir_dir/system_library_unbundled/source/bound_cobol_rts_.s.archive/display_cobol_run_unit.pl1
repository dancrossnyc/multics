/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 display_cobol_run_unit.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 10/24/79 by PRP [4.1-1] added bad_arg error check */
/* Modified on 10/08/77 by GM to fix spacing when dcr -lg was issued */
/* Modified on 10/25/76 by ORN to eliminate cobol_iocb include file and comply with error message standards */
/* Modified on 07/17/76 by ORN to support display of external switchs */
/* Recompiled on 7/14/76 by George Mercuri to utilize the new include files. */
/* format: style3 */
display_cobol_run_unit:
dcr:
     proc;

dcl	(i, j, k, n, nargs, arglen, len, code)
			fixed bin;
dcl	(count, icount)	fixed bin;
dcl	(mode, org, acc)	fixed bin;

dcl	(asw, lsw, fsw)	bit (1);

dcl	mode_con		(0:3) char (6) static init ("extend", "input", "i-o", "output");
dcl	org_con		(0:3) char (10) static init ("stream", "sequential", "relative", "indexed");
dcl	acc_con		(3) char (10) static init ("sequential", "random", "dynamic");

dcl	(acon, dcon)	char (6);
dcl	eicon		char (8);
dcl	fname		char (32);
dcl	programs		char (8);
dcl	times		char (5);

dcl	argptr		ptr;
dcl	arg		char (16) based (argptr);

dcl	get_pdir_		entry returns (char (168) aligned);
dcl	cu_$arg_count	entry (fixed bin);
dcl	cu_$arg_ptr	entry (fixed bin, ptr, fixed bin, fixed bin);
dcl	com_err_		entry options (variable);
dcl	ioa_		entry options (variable);
dcl	ioa_$nnl		entry options (variable);
dcl	hcs_$fs_get_seg_ptr entry (char (*), ptr, fixed bin);

dcl	error_table_$badopt fixed bin (35) ext static;
dcl	error_table_$bad_arg
			fixed bin (35) ext static;
dcl	cobol_control_$get_pointer
			entry returns (pointer);


/* *********************************** */
start:
	asw, lsw, fsw = "0"b;
	call cu_$arg_count (nargs);
	if nargs > 0
	then do i = 1 to nargs;
		call cu_$arg_ptr (i, argptr, arglen, code);
		if code ^= 0
		then go to multics_error;


/*[4.1-1]*/
		if substr (arg, 1, 1) ^= "-"
		then go to bad_arg_error;
		if (arglen = 3 & substr (arg, 1, 3) = "-lg") | (arglen = 5 & substr (arg, 1, 5) = "-long")
		then lsw = "1"b;
		else if (arglen = 2 & substr (arg, 1, 2) = "-a") | (arglen = 4 & substr (arg, 1, 4) = "-all")
		then asw = "1"b;
		else if arglen = 6 & substr (arg, 1, 6) = "-files"
		then fsw = "1"b;
		else go to invalid_arg_error;
	     end;


	controlp = cobol_control_$get_pointer ();
	if controlp = null ()
	then go to no_run_error;
	if control.no_of_segs < 1
	then if control.mpname = ""
	     then go to no_run_error;
	count, icount = 0;
	do i = 1 to control.no_of_segs;
	     stat_ptr = control.statptr (i);
	     if stat_ptr = null ()
	     then icount = icount + 1;
	     else if stat.call_cnt = -1
	     then icount = icount + 1;
	     else count = count + 1;
	end;
	if count = 1
	then programs = "program";
	else programs = "programs";
	call ioa_ ("^/Run-unit ^a contains ^d cobol ^a", control.name, count, programs);
	if control.mpname ^= ""
	then call ioa_ ("Main program: ^a", control.mpname);
	if asw
	then do;
		if icount = 1
		then programs = "program";
		else programs = "programs";
		call ioa_ ("Control segment at ^p^/^d inactive ^a^/", controlp, icount, programs);
	     end;
	else do;
		call ioa_ ("");
		if count = 0
		then return;
	     end;

	do i = 1 to control.no_of_segs;
	     stat_ptr = control.statptr (i);
	     if asw
	     then call ioa_$nnl ("^2d ", i);
	     if stat_ptr = null ()
	     then do;
		     if asw
		     then do;
			     call ioa_ ("***Permanently inactive");
			     if lsw
			     then call ioa_ ("");
			end;
		end;
	     else if stat.call_cnt = -1
	     then do;
		     if asw
		     then do;
			     if lsw
			     then call ioa_ ("Name: ^a  (inactive)^/  at ^p^/  data at ^p for ^d words",
				     substr (stat.prog_id, 1, stat.prog_id_len), stat.entry_pt_ptr, stat.data_ptr,
				     stat.data_len);
			     else call ioa_ ("^a   (inactive)", substr (stat.prog_id, 1, stat.prog_id_len));
			end;
		end;
	     else do;
		     if lsw
		     then do;
			     if stat.call_cnt = 1
			     then times = "time";
			     else times = "times";
			     call ioa_ (
				"Name: ^a^/  at ^p^/  invoked ^d ^a^/  data at ^p for ^d words^/  file_info at ^p",
				substr (stat.prog_id, 1, stat.prog_id_len), stat.entry_pt_ptr, stat.call_cnt,
				times, stat.data_ptr, stat.data_len, stat.file_info_ptr);
			end;
		     else call ioa_ ("^a	(^d)", substr (stat.prog_id, 1, stat.prog_id_len), stat.call_cnt);
		end;
	     if fsw
	     then do;
		     if stat_ptr = null ()
		     then if asw
			then call ioa_ ("  No active files");
			else ;
		     else if stat.call_cnt = -1
		     then if asw
			then call ioa_ ("  No active files");
			else ;
		     else if stat.file_info_ptr = null ()
		     then call ioa_ ("  No active files");
		     else do;
			     file_info_ptr = stat.file_info_ptr;
			     k = 0;
			     j = divide (file_info.n, 2, 17, 0);
			     do n = 1 to j;
				fsb_ptr = file_info.pt (n);
				if fsb_ptr ^= null ()
				then if fsb.iocb_ptr ^= null ()
				     then k = k + 1;
			     end;
			     if k = 1
			     then acon = "file";
			     else acon = "files";
			     if j = 1
			     then dcon = "file";
			     else dcon = "files";
			     call ioa_ ("  ^d ^a active, ^d ^a declared", k, acon, j, dcon);
			     do n = 1 to j;
				fsb_ptr = file_info.pt (n);
				if fsb_ptr ^= null ()
				then if fsb.iocb_ptr ^= null ()
				     then do;
					     if fsb.internal
					     then do;
						     eicon = "Internal";
						     len = index (fsb.iocb_ptr -> iocb.name, " ") - 17;
						     if len < 0
						     then len = 16;
						     fname = substr (fsb.iocb_ptr -> iocb.name, 1, len);
						end;
					     else do;
						     eicon = "External";
						     fname = fsb.iocb_ptr -> iocb.name;
						end;
					     if fsb.open_mode = 0
					     then call ioa_ ("     ^a file ^a at ^p^/      closed by ^a", eicon,
						     fname, fsb_ptr, fsb.open_close_name);
					     else do;
						     mode = fixed (substr (unspec (fsb.open_mode), 31, 2), 2);
						     org = fixed (substr (unspec (fsb.open_mode), 33, 2), 2);
						     acc = fixed (substr (unspec (fsb.open_mode), 35, 2), 2);
						     call ioa_ (
							"     ^a file ^a at ^p^/      opened by ^a for ^a with ^a organization and ^a access",
							eicon, fname, fsb_ptr, fsb.open_close_name,
							mode_con (mode), org_con (org), acc_con (acc));
						end;
					end;
			     end;
			end;
		end;
	     if lsw & stat_ptr ^= null ()
	     then call ioa_ ("");
	end;
	call ioa_ ("");
	k = 0;
	do i = 1 to 8;
	     if control.sense_sw (i) ^= 0
	     then do;
		     if k = 0
		     then do;
			     call ioa_$nnl (
				"External-switch status:   1   2   3   4   5   6   7   8^/                          "
				);
			     if i > 1
			     then do j = 1 to i - 1;
				     call ioa_$nnl ("OFF ");
				end;
			     k = 1;
			end;
		     call ioa_$nnl ("ON  ");
		end;
	     else if k ^= 0
	     then call ioa_$nnl ("OFF ");
	end;
	if k = 0
	then call ioa_ ("All external-switches off^/");
	else call ioa_ ("^/");
	return;


/* *********************************** */
multics_error:
	call com_err_ (code, "display_cobol_run_unit");
	return;

invalid_arg_error:
	call com_err_ (error_table_$badopt, "display_cobol_run_unit", substr (arg, 1, arglen));
	return;

no_run_error:
	call com_err_ (0, "display_cobol_run_unit", "There is no cobol run-unit currently active.");
	return;

/*[4.1-1]*/
bad_arg_error:
	call com_err_ (error_table_$bad_arg, "display_cobol_run_unit", substr (arg, 1, arglen));
	return;


/* *********************************** */
%include cobol_fixed_static;
%include cobol_control;
%include cobol_fsb;
%include iocb;
%include cobol_file_info;
     end display_cobol_run_unit;
