/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_SET_.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* format: style3 */
cobol_SET_:
     proc;					/* Versiin 2. */
						/* Set or print control variables for SORTM_. */
	Lp = addrel (addr (L), 1);
	call cu_$arg_count (i);
	if i < 1
	then do;
		L = "cobol_SET_ S S ...
Each S is a string: name=value  (no spaces).
Name from {sort_dir,disaster1,disaster2,SIi,SSi,MIi,max1,max2,max3,max4}.
Value is an integer except for sort_dir it is a string.";
		L = L || "
If S is ""default"" (only) the values are set to their default values.
If S is ""print"" (only) the current values are printed.
";						/* call ios_$write_ptr(Lp,0,length(L)); */
		return;
	     end;

	do j = 1 to i;
	     call cu_$arg_ptr (j, p, l, e);
	     if e > 0
	     then do;
		     call com_err_ (e, "cobol_SET_", " Could not obtain parameter ^d.", j);
		     return;
		end;


	     if arg = "print"
	     then do;
		     L = "	SORTM_ values  " || substr (L, 2, 24) || "
sort_dir=""" || cobol_SM_$sort_dir || """
";
		     L = L || "disaster1=" || cobol_NUMS_ (cobol_SM_$disaster1) || " disaster2="
			|| cobol_NUMS_ (cobol_SM_$disaster2) || " SIi=" || cobol_NUMS_ (cobol_SM_$SIi) || " SSi="
			|| cobol_NUMS_ (cobol_SM_$SSi) || " MIi=" || cobol_NUMS_ (cobol_SM_$MIi) || " TSIi="
			|| cobol_NUMS_ (cobol_SM_$TSIi) || " LTSIi=" || cobol_NUMS_ (cobol_SM_$LTSIi) || " max1="
			|| cobol_NUMS_ (cobol_SM_$max1) || " max2=" || cobol_NUMS_ (cobol_SM_$max2) || " max3="
			|| cobol_NUMS_ (cobol_SM_$max3) || " max4=" || cobol_NUMS_ (cobol_SM_$max4) || "
";
		     call FME (cobol_SM_$cmp, "cmp");
		     call FME (cobol_SM_$mcp, "mcp");
		     L = L || "SIp=" || cobol_FP_ (cobol_SM_$SIp) || " SRp=" || cobol_FP_ (cobol_SM_$SRp)
			|| " SSp=" || cobol_FP_ (cobol_SM_$SSp) || " MIp=" || cobol_FP_ (cobol_SM_$MIp) || "
";						/* call ios_$write_ptr(Lp,0,length(L)); */
		end;
	     else if arg = "default"
	     then do;
		     cobol_SM_$sort_dir = "";
		     cobol_SM_$disaster1 = 0;
		     cobol_SM_$disaster2 = 0;
		     cobol_SM_$SSi = 0;
		     cobol_SM_$SIi = 0;
		     cobol_SM_$MIi = 0;
		     cobol_SM_$max1 = 64 * 1024 * 36;
		     cobol_SM_$max2 = cobol_SM_$max1;
		     cobol_SM_$max3 = 30000;
		     cobol_SM_$max4 = 1000;
		end;
	     else do;

		     k = index (arg, "=");
		     if k < 1
		     then call err ("contains no ""="".");
		     else do;
			     m = index (/*
.        1        2        3  4  5  6   7   8   9
.1       9        18       27 30 33 36  40  44  48		*/
				"sort_dirdisaster1disaster2SIiSSiMIimax1max2max3max4", substr (arg, 1, (k - 1)));
			     if m < 1
			     then call err ("not a known name.");
			     else do;
				     if m = 1
				     then cobol_SM_$sort_dir = substr (arg, (k + 1), (l - k));
				     else call set_val;
				end;
			end;
		end;
	end;
	return;

CPP:
     entry (PT, PT2);				/* Save the pointer, "p", to the comparison procedure. */
	call cu_$arg_count (i);
	if (i < 1) | (i > 2)
	then do;
		call com_err_ (0, "CPP", " Pointer to comparison procedure required.");
		return;
	     end;

	cobol_SM_$cmp = PT;
	if i = 2
	then cobol_SM_$mcp = PT2;
	cobol_SM_$sort_dir = "";
	cobol_SM_$disaster1 = 0;
	cobol_SM_$disaster2 = 0;
	cobol_SM_$SSi = 0;
	cobol_SM_$SIi = 0;
	cobol_SM_$MIi = 0;
	cobol_SM_$max1 = 64 * 1024 * 36;
	cobol_SM_$max2 = cobol_SM_$max1;
	cobol_SM_$max3 = 30000;
	cobol_SM_$max4 = 1000;
	return;


FME:
     proc (e, n);					/* Format entry "e" named "n". */
	if p2 = null ()
	then do;
		L = L || n || "=(ext proc)" || cobol_FP_ (p1) || " ";
	     end;
	else do;
		L = L || n || "=(int proc)" || cobol_FP_ (p1) || "(in)" || cobol_FP_ (p2) || " ";
	     end;
	return;
dcl	e		entry parm,
	n		char (*) parm,
	1 E		aligned based (addr (e)),
	  2 p1		ptr,
	  2 p2		ptr,
	null		builtin;
     end FME;

set_val:
     proc;					/* Convert the "value" part of the argument and load
	   the specified variable. */

/* Convert the numeric string (unsigned). */
	v = 0;
	do k = (k + 1) to l;
	     c = substr (arg, k, 1);
	     if (c < "0") | (c > "9")
	     then do;
		     call err ("contains non-numeric character """ || c || """ in the numeric value field.");
		     return;
		end;
	     v = (v * 10) + fixed (c, 9) - 0;
	end;

/* Load the value. */
	goto set (red (m));
set (0):
	call err ("unknown name.");
	return;
set (1):
	cobol_SM_$disaster1 = v;
	return;
set (2):
	cobol_SM_$disaster2 = v;
	return;
set (3):
	cobol_SM_$SIi = v;
	return;
set (4):
	cobol_SM_$SSi = v;
	return;
set (5):
	cobol_SM_$MIi = v;
	return;
set (6):
	cobol_SM_$max1 = v;
	return;
set (7):
	cobol_SM_$max2 = v;
	return;
set (8):
	cobol_SM_$max3 = v;
	return;
set (9):
	cobol_SM_$max4 = v;
	return;
     end set_val;

err:
     proc (message);
	L = "cobol_SET_: Parameter " || cobol_NUMS_ (j) || ", """ || arg || """, " || message || "
";						/* call ios_$write_ptr(Lp,0,length(L)); */
	return;
dcl	message		char (*);
     end err;

dcl	(PT, PT2)		entry parm,
	(Lp, p)		ptr,
	L		char (1000) var,
	cu_$arg_count	entry (fixed bin (35)) ext,
	cu_$arg_ptr	entry (fixed bin (35), ptr, fixed bin (35), fixed bin (35)) ext,
						/* 	ios_$write_ptr	entry(ptr,fixed bin(35),fixed bin(35)) ext, */
	com_err_		entry options (variable) ext,
	cobol_NUMS_	entry (fixed bin (35)) ext returns (char (13) var),
	cobol_FP_		entry (ptr) ext returns (char (16) var),
	(i, j, k, m, l, e, v)
			fixed bin (35),
	red		(51) fixed bin (35) static internal
			init ((8) 0, 1, (8) 0, 2, (8) 0, 3, (2) 0, 4, (2) 0, 5, (2) 0, 6, (3) 0, 7, (3) 0, 8, (3) 0,
			9, (3) 0),
	arg		char (l) unaligned based (p),
	c		char (1) aligned,
	(unspec, substr, index, length)
			builtin,			/*	Static external (bindable as internal). */
	(
	cobol_SM_$cmp,
	cobol_SM_$mcp
	)		entry variable ext,
	(
	cobol_SM_$SIp,
	cobol_SM_$SRp,
	cobol_SM_$SSp,
	cobol_SM_$MIp
	)		ptr ext,
	(
	cobol_SM_$SIi,
	cobol_SM_$SSi,
	cobol_SM_$MIi,
	cobol_SM_$TSIi,
	cobol_SM_$LTSIi,
	cobol_SM_$max1,
	cobol_SM_$max2,
	cobol_SM_$max3,
	cobol_SM_$max4,
	cobol_SM_$disaster2,
	cobol_SM_$disaster1
	)		fixed bin (35) ext,
	cobol_SM_$sort_dir	char (168) var ext;
     end cobol_SET_;
