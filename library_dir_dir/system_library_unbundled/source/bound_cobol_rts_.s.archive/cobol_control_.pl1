/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8090),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8090 cobol_control_.pl1 Disallow duplicate prime keys in Indexed
     Sequential files.
                                                   END HISTORY COMMENTS */


/* Modified on 12/19/84 by FCH, [5.3-1], BUG573(phx16343), cobol_fsb_type_1.incl.pl1 now used */
/* Modified on 11/30/82 by FCH, [5.2-1], delete handlers for error and command_abort_, BUG545(phx14322) */
/* Modified on 09/08/81 by FCH, [5.0-1], rc fails if abs path name used, BUG499(phx11416) */
/* Modified on 06/09/81 by FCH, [4.4-2], cu_$cp used instead of cu_$ptr_call, BUG468 */
/* Modified on 10/24/80 by PRP, [4.4-1], bug451 phx07665 fix close with lock on internal files*/
/* Modified on 07/17/79 by PRP, [4.0-2], -db option added to rc, it sets sw 8*/
/* Modified on 06/14/79 by PRP, [4.0-2], output of detach messages eliminated except when scr is used */
/* Modified on 05/24/79 by FCH, [4.0-1], cobol_control_seg_ replaced by temp seg */
/* Modified on 01/22/79 by FCH, [3.0-1], on statements used */
/* Modified since Version 3.0	*/
/* { */



/* format: style3 */
cobol_control_:
     proc (pr4_save_ptr);

/*  This is a run-time support routine which provides
			   for getting space for all cobol programs.  It also maintains
			   a record of programs which are part of the current run-unit. */

dcl	control_1		fixed bin;		/* 1 = called by cobol_rts_; 0 = called directly by cobol program */

	call cu_$stack_frame_ptr (stack_frame_ptr);
	stack_frame_ptr = stack_frame.prev_stack_frame_ptr;
	control_1 = 0;
	call start;
	return;

/* Entry for the new control to interface with cobol_rts_ package.	*/


cobol_rts_control_:
     entry (pr4_save_ptr);

	call cu_$stack_frame_ptr (stack_frame_ptr);
	stack_frame_ptr = stack_frame.prev_stack_frame_ptr;
	control_1 = 1;
	call start;
	return;

dcl	pr4_save_ptr	ptr parameter;
dcl	statptr		ptr parameter;		/*
				   statptr		a pointer to the calling program's static
						   data area.  See the include file stat.inc.pl1
						   } */

declare	(stop_run, command_abort_, error, finish)
			condition;		/* [3.0-1] */


/*[4.0-1]*/
dcl	get_temp_segments_	entry (char (*), (*) ptr, fixed bin (35));
						/*[4.0-1]*/
dcl	release_temp_segments_
			entry (char (*), (*) ptr, fixed bin (35));

/*[4.0-1]*/
dcl	tp		(1) ptr static int;

dcl	1 cond		based (cond_ptr),
	  2 next_ptr	ptr,
	  2 action_ptr	ptr,
	  2 action_len	fixed bin (21),
	  2 cont		fixed bin,
	  2 name		char (32),
	  2 action	char (0 refer (cond.action_len));
dcl	mcode		fixed bin (35);
dcl	close_code	fixed bin (35);
dcl	stop_code		fixed bin;
dcl	(i, j, k, m, n)	fixed bin;
dcl	(jlen, klen)	fixed bin;
dcl	(nargs, bl_pos, dlr_pos)
			fixed bin;
dcl	len		fixed bin;
dcl	(arglen, arg1_len)	fixed bin (21);
dcl	rwds		fixed bin;
dcl	continue		fixed bin;
dcl	bc		fixed bin (21);

dcl	stop_run_command	static bit (1);
dcl	stop_run_sw	bit (1) static init ("0"b);
dcl	found		bit (1);
dcl	others_found	bit (1);

dcl	rseg		char (rwds) based (rsegptr);
dcl	nl		char (1) static init ("
");
dcl	dir		char (168);
dcl	error_name	char (3);
dcl	name1		char (32);
dcl	rname		char (32);
dcl	progname		char (32);
dcl	lineno		char (20);
dcl	cobol_data_area	(stat.data_len + 1) fixed bin (35) based;
						/* 08-26-77 */
						/* only need to run pre 3.0 cobol programs */
dcl	based_area	area based;
dcl	area_ptr		ptr;

dcl	evar		entry auto;
dcl	bptr		ptr based (addr (evar));
dcl	arg		char (arglen) based (argptr);

dcl	cond_ptr		ptr;
dcl	(argptr, arg1_ptr)	ptr;
dcl	save_cond_ptr	ptr;
dcl	rsegptr		ptr;
dcl	segptr		ptr;
dcl	error_ptr		ptr;
dcl	iox_$user_output	ptr ext;
dcl	iox_$error_output	ptr ext;
dcl	iox_$user_input	ptr ext;

dcl	condition_	entry (char (*), entry);
dcl	cobol_rts_handler_	entry (ptr, char (*), ptr, ptr, bit (1));
						/*[4.4-2]*/
dcl	add_epilogue_handler_
			entry (entry, fixed bin (35));
dcl	find_command_	entry (ptr, fixed bin (21), ptr, fixed bin (35));
dcl	cu_$cp		entry (ptr, fixed bin (21), fixed bin (35));
dcl	cu_$arg_count	entry (fixed bin);
dcl	cu_$arg_ptr	entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl	expand_path_	entry (ptr, fixed bin (21), ptr, ptr, fixed bin (35));
dcl	hcs_$terminate_noname
			entry (ptr, fixed bin (35));
dcl	hcs_$delentry_file	entry (char (*), char (*), fixed bin (35));
dcl	get_pdir_		entry returns (char (168));
dcl	hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (21), fixed bin (2), ptr, fixed bin (35));
dcl	hcs_$fs_get_ref_name
			entry (ptr, fixed bin, char (*), fixed bin (35));
dcl	hcs_$truncate_seg	entry (ptr, fixed bin, fixed bin (35));
dcl	hcs_$terminate_seg	entry (ptr, fixed bin, fixed bin (35));
dcl	hcs_$make_ptr	entry (ptr, char (*), char (*), ptr, fixed bin (35));
dcl	hcs_$make_seg	entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl	cobol_mcs_$stop_run entry;
dcl	com_err_		entry options (variable);
dcl	cobol_error_	entry (fixed bin, fixed bin (35), fixed bin, fixed bin, char (65) varying, ptr);
dcl	ioa_		entry options (variable);
dcl	ioa_$rsnnl	entry options (variable);
dcl	cobol_file_control_ entry (char (*), ptr, fixed bin, char (*), bit (1) aligned, fixed bin (35));
dcl	signal_		entry (char (*), ptr, ptr);
dcl	cu_$stack_frame_ptr entry (ptr);

dcl	error_table_$seg_not_found
			fixed bin (35) static ext;
dcl	error_table_$noarg	fixed bin (35) ext static;
dcl	error_table_$badopt fixed bin (35) ext static;


/* prologue */

start:
     proc;

/*[3.0-1]*/
	if controlp = null
	then call set_handlers (0);

/*[5.2-1]*/
/* on command_abort_ call COND ("command_abort_"); */
/*[5.2-1]*/
/* on error call COND ("error"); */
/*[4.0-1]*/
	on stop_run call COND ("stop_run");		/*[4.0-1]*/
	on finish call COND ("finish");

	if control_1 ^= 0
	then do;

		stat_ptr = addrel (pr4_save_ptr, 8);
		stack_frame_ptr = stack_frame.prev_stack_frame_ptr;
	     end;
	else stat_ptr = addrel (stack_frame.link_ptr, 8); /* initialize extended fixed_static area if new rts interface */
	if control_1 ^= 0
	then do;

		stat.user_output_ptr = iox_$user_output;
		stat.error_output_ptr = iox_$error_output;
		stat.user_input_ptr = iox_$user_input;
		stat.error_con = "";
	     end;



	j = index (stat.prog_id, "$");

	if j > 0
	then do;

		stat.prog_id_len = stat.prog_id_len - j;
		progname = substr (stat.prog_id, j + 1);
	     end;
	else progname = substr (stat.prog_id, 1, stat.prog_id_len);

	rname = "";

	do j = 1 to 1000 /* nominal */ while (rname = "");

	     if control_1 ^= 0
	     then call hcs_$fs_get_ref_name (pointer (stack_frame.new_return_ptr, 0), j, rname, mcode);
	     else call hcs_$fs_get_ref_name (pointer (stack_frame.return_ptr, 0), j, rname, mcode);

	     if mcode ^= 0
	     then go to control_error;

	end;

	if rname ^= stat.prog_id
	then do;

		j = index (rname, " ");
		if j = 0
		then j = 33;

		stat.prog_id = substr (rname, 1, j - 1) || "$" || progname;
		stat.prog_id_len = stat.prog_id_len + j;
	     end;

	if stat.entry_pt_ptr = control.main_prog_ptr
	then do;

		stat.main_prog_sw = 1;
		control.mpname = substr (stat.prog_id, 1, stat.prog_id_len);
	     end;
	else do;

		stat.main_prog_sw = 0;
		control.mpname = "";
	     end;

	if control.no_of_segs > 0
	then do i = 1 to control.no_of_segs;

		if control.statptr (i) = stat_ptr
		then go to set_data_ptr;

		if control.statptr (i) ^= null
		then do;

			j = index (control.statptr (i) -> stat.prog_id, "$");

			if j = 0
			then j = control.statptr (i) -> stat.prog_id_len;
			else j = j - 1;

			k = index (stat.prog_id, "$");

			if k = 0
			then k = stat.prog_id_len;
			else k = k - 1;

			if substr (control.statptr (i) -> stat.prog_id, 1, j) = substr (stat.prog_id, 1, k)
			then control.statptr (i) = null ();

		     end;
	     end;
	else control.name = stat.prog_id;		/* set run-unit name */

	control.no_of_segs = control.no_of_segs + 1;
	control.statptr (control.no_of_segs) = stat_ptr;
	stat.control_ptr = controlp;

	if sort_dir_len = 0
	then do;
		substr (sort_dir, 1, 168) = get_pdir_ ();
		sort_dir_len = index (sort_dir, " ") - 1;
	     end;

set_data_ptr:
	if stat.data_len > 0
	then if stat.data_ptr = null ()
	     then do;
		     area_ptr = ptr (addr (i), 0) -> stack_header.user_free_ptr;
		     allocate cobol_data_area set (stat.data_ptr) in (area_ptr -> based_area);
		end;

     end;

cobol_stop_run_:
     entry (statptr, rdsw, rfsw, code);


/* This is the entry called by the standard default
			   condition handler for the "stop_run" condition and
			   by the cancel command when the "-all" option is
			   specified.  It causes cancellation of every cobol program
			   in the current run-unit.  */

dcl	rdsw		fixed bin;		/* retain data segments */
dcl	rfsw		fixed bin;		/* retain files */

/* dcl statptr ptr parameter;

				   statptr		a pointer to the calling program's static
						   data area.  See the include file
						   stat.incl.pl1 (input).
						   } */

	stop_run_command = "0"b;
	call start_cobol_stop_run;
	return;


cobol_stop_run_command_:
     entry (statptr, rdsw, rfsw, code);

	stop_run_command = "1"b;
	call start_cobol_stop_run;
	return;

/* [4.0-2] */
/* this new entry point was added so that cobol_stop_run_ can tell
			   the difference between a call from command level and an
			   epilogue handler call.  thus some messages are suppressed unless
			   there is a stop_cobol_run command. */


start_cobol_stop_run:
     proc;

	if statptr ^= null ()
	then error_name = "ccp";
	else error_name = "scr";

	found = "0"b;

	if controlp ^= null ()
	then do;

		if sort_dir_len ^= 0
		then call hcs_$delentry_file (substr (sort_dir, 1, sort_dir_len), "cobol_temp_merge_file_", mcode);

	     end;

	if controlp ^= null ()
	then if control.no_of_segs > 0
	     then do i = 1 to control.no_of_segs;

		     stat_ptr = control.statptr (i);

		     if stat_ptr ^= null ()
		     then do;

			     stat.call_cnt = -1;	/* reset initialization switch */

			     if rfsw = 0
			     then if stat.file_info_ptr ^= null ()
				then do;

					call cobol_file_control_ ("-a", stat_ptr, 0, error_name, "1"b,
					     close_code);
					stat.file_info_ptr = null ();

				     end;

			     if rdsw = 0
			     then if stat.data_ptr ^= null ()
				then do;
					if stat.data_len > 0
					then free stat.data_ptr -> cobol_data_area;
					stat.data_ptr = null ();
				     end;

			     found = "1"b;

			end;
		end;

	stop_run_command = "0"b;

/* purge all communication partial files.	*/

/*[4.4-2]*/
/* 	call cobol_mcs_$stop_run; */

	if ^found
	then code = -1;
	else do;



		code = 0;

		if statptr ^= null ()
		then do;

			stat_ptr = statptr;

			if stat.line_no (1) = 0
			then lineno = "";
			else if stat.line_no (2) = 0
			then call ioa_$rsnnl (" (line ^d)", lineno, len, stat.line_no (1));
			else call ioa_$rsnnl (" (line ^d-^d)", lineno, len, stat.line_no (1), stat.line_no (2));

			call ioa_ ("^a: Run-unit ^a terminated^a.", statptr -> stat.prog_id, control.name, lineno);
		     end;

		call hcs_$truncate_seg (controlp, 0, mcode);
		if mcode ^= 0
		then go to multics_error;

/*		call hcs_$terminate_seg (controlp, 0, mcode);*/
/*[4.4-2]*/
		call release_temp_segments_ ("cobol_control_", tp, mcode);
		if mcode ^= 0
		then go to multics_error;

		controlp = null ();

		call signal_ ("command_abort_", null (), null ());

	     end;

     end;


/* *********************************** */

cobol_cancel_:
     entry (name);

dcl	cancel_code	fixed bin;		/* always ignored */
dcl	cobol_control_$cancel
			entry (char (*), fixed bin, fixed bin, fixed bin);

	cancel_code = 0;
	call cobol_control_$cancel (name, 0, 0, cancel_code);
	return;

cancel:
     entry (name, rdsw, rfsw, code);

/* This entry is called by the cancel command and by
			   object programs compiled by cobol to cancel a program
			   in the run-unit by name.  If the named program is not
			   currently active in the run-unit then an error code is
			   returned.  This condition is an error for the cancel command,
			   but is ignored by the code generated for the cancel verb. */

dcl	name		char (*) parameter;		/* dcl rfsw fixed bin;	/* retain files */
						/* dcl rdsw fixed bin;	/* retain data segment */
dcl	code		fixed bin;

/*
			   name		a character string up to 65 chars long
			   identifying the program to be cancelled.
			   This corresponds to the name recorded in
			   stat.prog_id i.e. if the Identification
			   Division prog-id = the segment name, then
			   stat.prog_id = segment name; otherwise, it
			   is segment name$prog-id (input).
			
			   code		set to 0 if program successfully cancelled;
			   otherwise set to 1 (output).
			   } */

	i = index (name, "$");
	if i > 0
	then rname = substr (name, 1, i - 1);
	else rname = name;

	call hcs_$make_ptr (null (), rname, substr (name, i + 1), segptr, mcode);
	if mcode ^= 0
	then go to return_multics_error;

	found, others_found = "0"b;
	if code = -3
	then others_found = "1"b;			/* special - don't ever stop run */
	code = -2;

	if controlp ^= null ()
	then if control.no_of_segs > 0
	     then do i = 1 to control.no_of_segs;

		     stat_ptr = control.statptr (i);

		     if stat_ptr ^= null ()
		     then do;

			     if stat.entry_pt_ptr = segptr & stat.call_cnt ^= -1
			     then do;

				     stat.call_cnt = -1;
						/* reset initialization switch */

				     if rfsw = 0
				     then if stat.file_info_ptr ^= null ()
					then do;

						call cobol_file_control_ ("-a", stat_ptr, 0, "ccp", "1"b,
						     close_code);
						stat.file_info_ptr = null ();

					     end;

				     if rdsw = 0
				     then if stat.data_ptr ^= null ()
					then do;

						if stat.data_len > 0
						then free stat.data_ptr
							-> cobol_data_area in (area_ptr -> based_area);

						stat.data_ptr = null ();

					     end;

				     control.statptr (i) = null ();
				     found = "1"b;
				end;

			     else if stat.call_cnt ^= -1
			     then others_found = "1"b;

			end;
		end;
	     else return;
	else return;

	if ^found
	then code = -1;
	else do;

		code = 0;

		if ^others_found
		then do;

			call com_err_ (0, "cancel_cobol_program",
			     "^a was the only active cobol program of the run-unit.^/Run-unit ^a terminated.", name,
			     control.name);

			call hcs_$truncate_seg (controlp, 0, mcode);
			if mcode ^= 0
			then go to multics_error;

/*		call hcs_$terminate_seg (controlp, 0, mcode);*/
/*[4.4-2]*/
			call release_temp_segments_ ("cobol_control_", tp, mcode);
			if mcode ^= 0
			then go to multics_error;

			controlp = null ();

			call signal_ ("command_abort_", null (), null ());

		     end;
	     end;

	return;


/* *********************************** */

cobol_stoprun_:
     entry;

	call cu_$stack_frame_ptr (stack_frame_ptr);

	stack_frame_ptr = stack_frame.prev_stack_frame_ptr;
	stat_ptr = addrel (stack_frame.link_ptr, 8);

	if controlp ^= null ()
	then if control.main_prog_sw ^= 0
	     then call signal_ ("stop_run", null (), stat_ptr);

	stop_code = 0;

	call cobol_stop_run_ (stat_ptr, 0, 0, stop_code);

	call signal_ ("command_abort_", null (), null ());

	return;


/* *********************************** */

cobol_finish_:
     entry;

	if controlp ^= null ()
	then call hcs_$delentry_file (substr (sort_dir, 1, sort_dir_len), "cobol_temp_merge_file_", mcode);

	if controlp ^= null ()
	then if control.no_of_segs > 0
	     then do i = 1 to control.no_of_segs;

		     stat_ptr = control.statptr (i);

		     if stat_ptr ^= null ()
		     then if stat.file_info_ptr ^= null ()
			then call cobol_file_control_ ("-a", stat_ptr, 0, "", "1"b, close_code);

		end;

	return;


/* *********************************** */


get_pointer:
     entry returns (pointer);

	return (controlp);


/* ************************************ */


rc:
run_cobol:
     entry;

	if controlp ^= null ()
	then go to recursion_error;

	call cu_$arg_count (nargs);
	if nargs < 1
	then go to missing_arg_error;

	call cu_$arg_ptr (1, argptr, arglen, mcode);
	if mcode ^= 0
	then go to rc_multics_error;

/*[4.4-2]*/
	arg1_ptr = argptr;
	arg1_len = arglen;

/*[5.0-1]*/
	call find_command_ (argptr, arglen, segptr, mcode);

/*[4.4-2]*/
	if mcode = error_table_$seg_not_found		/*[4.4-2]*/
	then do;
		call com_err_ (0, "run_cobol", "Segment ^a not found", arg);
		return;
	     end;

/* [3.0-1] */
	call set_handlers (1);

	sort_dir_len = 0;

	if nargs > 1
	then do i = 2 to nargs;

		call cu_$arg_ptr (i, argptr, arglen, mcode);
		if mcode ^= 0
		then go to rc_multics_error;

		if arg = "-cs" | arg = "-cobol_switch"
		then do;

switch_loop:
			i = i + 1;

			if i <= nargs
			then do;

				call cu_$arg_ptr (i, argptr, arglen, mcode);
				if mcode ^= 0
				then go to rc_multics_error;

				if substr (arg, 1, 1) = "-"
				then i = i - 1;
				else do;

					if arglen > 1 | arg < "1" | arg > "8"
					then go to bad_arg_error;

					control.sense_sw (fixed (arg, 17)) = 1;

					go to switch_loop;

				     end;
			     end;
		     end;
		else if arg = "-sd" | arg = "-sort_dir"
		then do;

			i = i + 1;

			if i <= nargs
			then do;

				call cu_$arg_ptr (i, argptr, arglen, mcode);
				if mcode ^= 0
				then go to rc_multics_error;

				if substr (arg, 1, 1) = "-"
				then i = i - 1;
				else do;

					call expand_path_ (argptr, arglen, addr (sort_dir), null (), mcode);
					sort_dir_len = index (sort_dir, " ") - 1;
				     end;
			     end;
		     end;
		else if arg = "-sfs" | arg = "-sort_file_size"
		then do;

			i = i + 1;

			if i <= nargs
			then do;
				call cu_$arg_ptr (i, argptr, arglen, mcode);
				if mcode ^= 0
				then go to rc_multics_error;

				if substr (arg, 1, 1) = "-"
				then i = i - 1;
				else sort_file_size = float (arg, 27);

			     end;
		     end;
		else if arg = "-ctu" | arg = "-continue"
		then control.ind_mask = "000000001"b;
		else if arg = "-nsr" | arg = "-no_stop_run"
		then stop_run_sw = "1"b;
		else if arg = "-db" | arg = "-debug"
		then control.sense_sw (8) = 1;
		else go to bad_arg_error;

	     end;

	control.main_prog_ptr = segptr;
	control.main_prog_sw = 1;

	if ^stop_run_sw
	then on stop_run call COND ("stop_run");	/* [3.0-1] */

/*[4.4-2]*/
	call cu_$cp (arg1_ptr, arg1_len, mcode);	/*[4.4-2]*/
	if mcode ^= 0
	then go to invalid_exit_error;		/*[4.4-2]*/
	return;


bad_arg_error:
	call com_err_ (error_table_$badopt, "run_cobol", arg);
	go to rc_error;

recursion_error:
	call com_err_ (0, "run_cobol",
	     "A cobol run-unit already exists; stop_cobol_run must be issued before another can be created.");
	return;

missing_arg_error:
	call com_err_ (error_table_$noarg, "run_cobol");
	go to rc_error;

invalid_exit_error:
	call com_err_ (0, "Error", "An invalid EXIT PROGRAM has been executed.");
	return;

rc_multics_error:
	call com_err_ (mcode, "run_cobol");

rc_error:
	controlp = null ();
	return;



COND:
     proc (cond_name);				/*[3.0-1]*/

declare	find_condition_info_
			entry (ptr, ptr, fixed bin (35));
						/*[3.0-1]*/
declare	code		fixed bin (35),
	cond_name		char (*);			/*[3.0-1]*/


	call find_condition_info_ (null (), addr (cond_info), code);
						/*[3.0-1]*/
	call cobol_hand (cond_name, cond_info.infoptr);	/*[3.0-1]*/
						/*
 call release_temp_segments_ ("cobol_control_", tp, mcode);
*/
     end;						/*[3.0-1]*/

/* called if controlp = null, 0(prologue), 1(run_cobol) */

set_handlers:
     proc (mode);					/*[3.0-1]*/

/**/
declare	mode		fixed bin;

/*[4.0-1]*/
	call get_temp_segments_ ("cobol_control_", tp, mcode);
						/*[4.0-1]*/
	if mcode ^= 0
	then go to control_error;

/*[4.0-1]*/
	controlp = tp (1);

/**/
	if mode ^= 0				/**/
	then do;
		call hcs_$truncate_seg (controlp, 0, mcode);
						/**/
		if mcode ^= 0
		then go to rc_multics_error;		/**/
	     end;

/**/
	evar = cobol_control_;

/**/
	call hcs_$make_ptr (bptr,			/**/
	     "cobol_rts_handler_",			/**/
	     "cobol_rts_handler_",			/**/
	     control.fofl_handler_ptr,		/**/
	     mcode);

/**/
	if mcode ^= 0
	then go to control_error;

/*[4.4-2]*/
	call add_epilogue_handler_ (cobol_finish_, mcode);/**/
	if mcode ^= 0
	then go to control_error;

     end;

/* [3.0-1] */



/* *********************************** */

cobol_handler_:
     entry;					/* This entry can be deleted but bound_cobol_rts_.bind must be altered */

	return;

cobol_hand:
     proc (cond_name, infoptr);			/* [3.0-1] */
	;

dcl	cond_name		char (*);
dcl	infoptr		ptr;

	if ^stop_run_sw
	then if cond_name = "stop_run"
	     then do;

		     stop_code = 0;
		     call cobol_stop_run_ (infoptr, 0, 0, stop_code);

		     call com_err_ (0, "Error", "No cobol run-unit exists - cannot STOP RUN.");
		     call signal_ ("command_abort_", null (), null ());


		end;

	call com_err_ (0, "Error", "^a condition raised - internal inconsistency in the run-unit.", cond_name);

     end;


/* *********************************** */
/* *********************************** */

cobol_file_control_:
     entry (ioname, statp, type, errorname, dtsw, cfc_code);

dcl	ioname		char (*);
dcl	statp		ptr;
dcl	type		fixed bin;		/* -1=nomes,0=norm,1=long: close; 2=norm,3=long: list */
dcl	errorname		char (*);
dcl	dtsw		bit (1) aligned;
dcl	cfc_code		fixed bin (35);

	begin;
dcl	statptr		ptr;
	     statptr = statp;

dcl	1 opened_files	static,
	  2 n		fixed bin init (0),
	  2 pt		(20) ptr;

dcl	1 dup,
	  2 n		fixed bin,
	  2 pt		(100) ptr;

dcl	mcode		fixed bin (35);
dcl	save_mode		fixed bin;
dcl	i		fixed bin;
dcl	j		fixed bin;
dcl	k		fixed bin;
dcl	m		fixed bin;
dcl	org		fixed bin;
dcl	acc		fixed bin;
dcl	mode		fixed bin;

dcl	odptr		ptr;
dcl	adptr		ptr;

dcl	anysw		bit (1);
dcl	nodupsw		bit (1);
dcl	command_sw	bit (1);

dcl	vstring		char (240) varying based;
dcl	save_od		char (240) varying;
dcl	save_ad		char (240) varying;
dcl	save_ocname	char (65);
dcl	pname		char (65);
dcl	file_name		char (32);
dcl	eicon		char (8);
dcl	pcon		char (69);
dcl	action_con	char (20);
dcl	oiscon		char (3);
dcl	aiscon		char (3);
dcl	mode_con		(0:3) char (6) static init ("extend", "input", "i-o", "output");
dcl	org_con		(0:3) char (10) static init ("stream", "sequential", "relative", "indexed");
dcl	acc_con		(3) char (10) static init ("sequential", "random", "dynamic");

dcl	iox_$close	entry (ptr, fixed bin (35));
dcl	iox_$detach_iocb	entry (ptr, fixed bin (35));	/* dcl ioa_ entry options(variable); */
						/* dcl com_err_ entry options(variable); */


	     cfc_code = -2;

	     if controlp = null ()
	     then return;
	     if control.no_of_segs < 1
	     then return;

	     cfc_code = -1;				/* until something is done */
	     nodupsw = "0"b;
	     dup.n = 0;

	     if substr (ioname, 1, 1) = "-"
	     then anysw = "1"b;
	     else anysw = "0"b;

	     if statptr ^= null ()
	     then do;

		     stat_ptr = statptr;
		     if stat.file_info_ptr = null ()
		     then return;

		     pname = stat.prog_id;
		     file_info_ptr = stat.file_info_ptr;

		     call look;
		end;
	     else do;

		     if anysw
		     then do;

			     nodupsw = "1"b;

			     do i = 1 to control.no_of_segs;

				stat_ptr = control.statptr (i);

				if stat_ptr ^= null ()
				then do;

					if stat.file_info_ptr ^= null ()
					then do;

						pname = stat.prog_id;
						file_info_ptr = stat.file_info_ptr;
						call look;
					     end;
				     end;
			     end;

			end;
		     else do;
			     call hcs_$make_ptr (null (), "cobol_fsb_", ioname, fsb_ptr, mcode);
			     if fsb_ptr = null ()
			     then return;
			     call action;
			end;

		end;

	     return;




/* *********************************** */
/* SUBROUTINES */
/* *********************************** */

/* *********************************** */

look:
     proc;

	do k = 1 to divide (file_info.n, 2, 17, 0);

	     if file_info.pt (k) ^= null ()
	     then do;
		     fsb_ptr = file_info.pt (k);
		     dtsw = ^fsb.attach_flag;

/*[5.3-1]*/
		     if fsb.fsb_skel.mod1
		     then fsb.last_key_read = "";

		     if anysw
		     then if ioname = "-a" | ioname = "-i" & fsb.internal | ioname = "-e" & ^fsb.internal
			then call action;
			else ;
		     else do;

			     if ioname = fsb.iocb_ptr -> iocb.name
			     then call action;

			     if fsb.internal
			     then do;
				     j = index (fsb.iocb_ptr -> iocb.name, " ") - 17;
				     if j < 0
				     then j = 16;
				     if ioname = substr (fsb.iocb_ptr -> iocb.name, 1, j)
				     then call action;
				end;

			end;
		end;
	end;

     end;


/* *********************************** */

action:
     proc;

	save_ocname = fsb.open_close_name;
	save_mode = fsb.open_mode;

	if nodupsw & pname ^= save_ocname
	then do;

		if substr (save_ocname, 1, 3) = "***" | save_ocname = ""
		then do;				/* by command or non-cobol prog */

			if dup.n > 0
			then do m = 1 to dup.n;

				if dup.pt (m) = fsb_ptr
				then return;
			     end;

			if dup.n < 100
			then dup.n = dup.n + 1;	/* don't be ridiculous */

			dup.pt (dup.n) = fsb_ptr;
			command_sw = "1"b;

		     end;
		else return;

	     end;
	else command_sw = "0"b;

	if fsb.iocb_ptr ^= null ()
	then do;
		if errorname = "scr"
		then if fsb.internal
		     then fsb.lock = "0"b;

		odptr = fsb.iocb_ptr -> iocb.open_descrip_ptr;
		adptr = fsb.iocb_ptr -> iocb.attach_descrip_ptr;

		if odptr ^= null ()
		then save_od = odptr -> vstring;

		if adptr ^= null ()
		then save_ad = adptr -> vstring;
	     end;
	else return;

	if type > 1
	then cfc_code = 0;				/* list only */
	else if pname = save_ocname | ^anysw | command_sw
	then do;

		if save_mode > 0
		then cfc_code = 0;

		if save_mode < 0
		then do;

			if ^anysw
			then do;

				call com_err_ (0, "close_cobol_file",
				     "Not closing external file ^a (it was opened by a non-cobol program).",
				     fsb.iocb_ptr -> iocb.name);
				cfc_code = 0;

			     end;

			return;

		     end;

		if save_mode ^= 0
		then do;

			call iox_$close (fsb.iocb_ptr, mcode);
			if mcode ^= 0
			then go to merror;

			cfc_code = 0;
			fsb.open_mode = 0;
			j = index (errorname, " ") - 1;

			if j < 0
			then j = length (errorname);

			fsb.open_close_name = "***" || substr (errorname, 1, j) || "***";
		     end;

		if dtsw
		then do;

			call iox_$detach_iocb (fsb.iocb_ptr, mcode);

			if mcode ^= 0
			then do;

				if save_mode ^= 0
				then go to merror;
				else return;
			     end;
			else cfc_code = 0;

		     end;
		else if save_mode = 0
		then return;

	     end;
	else return;

	if type < 0
	then return;				/* no message */

	if fsb.internal
	then do;

		j = index (fsb.iocb_ptr -> iocb.name, " ") - 17;

		if j < 0
		then j = 16;

		file_name = substr (fsb.iocb_ptr -> iocb.name, 1, j);
		eicon = "Internal";
		pcon = " in " || substr (stat.prog_id, 1, stat.prog_id_len);
	     end;
	else do;
		file_name = fsb.iocb_ptr -> iocb.name;
		eicon = "External";
		pcon = "";
	     end;

	if type < 2
	then do;

		if dtsw
		then do;
			if save_mode = 0
			then action_con = " detached";
			else action_con = " closed and detached";
		     end;
		else action_con = " closed";

		pcon = "";
	     end;
	else action_con = "";

	if stop_run_command
	then call ioa_ ("^a file ^a^a^a", eicon, file_name, action_con, pcon);
	else ;

	if save_mode = 0
	then if stop_run_command
	     then call ioa_ ("  closed by ^a", save_ocname);
	     else ;
	else do;

		if save_mode < 0
		then if stop_run_command
		     then call ioa_ ("  opened by a non-cobol program");
		     else ;
		else do;

			org = fixed (substr (unspec (save_mode), 33, 2), 2);
			acc = fixed (substr (unspec (save_mode), 35, 2), 2);
			mode = fixed (substr (unspec (save_mode), 31, 2), 2);

/* [4.0-2] */
			if stop_run_command
			then call ioa_ ("  opened by ^a for ^a with ^a organization and ^a access", save_ocname,
				mode_con (mode), org_con (org), acc_con (acc));

		     end;

	     end;

	if type = 0 | type = 2
	then return;				/* normal message */

	if stop_run_command
	then call ioa_ ("  file state block at ^p^/  io_control_block for io_switch ^a at ^p", fsb_ptr,
		fsb.iocb_ptr -> iocb.name, fsb.iocb_ptr);

	if type = 3
	then oiscon, aiscon = "is";
	else do;
		oiscon = "was";

		if dtsw
		then aiscon = "was";
		else aiscon = "is";

	     end;

	if stop_run_command
	then do;
		if odptr ^= null ()
		then call ioa_ ("  open description ^a:	""^a""", oiscon, save_od);

		if adptr ^= null ()
		then call ioa_ ("  attach description ^a:	""^a""", aiscon, save_ad);

		call ioa_ ("");

	     end;
	else ;
	return;
merror:
	call com_err_ (mcode, errorname);
	return;
     end;


/* *********************************** */

	end;					/* *********************************** */
						/* *********************************** */
control_error:
	call cu_$stack_frame_ptr (stack_frame_ptr);
	stack_frame_ptr = stack_frame.prev_stack_frame_ptr;
	error_ptr = addrel (stack_frame.return_ptr, -1);
	call cobol_error_ (0, mcode, 0, 0, "cobol_control_", error_ptr);
	return;

multics_error:
	call com_err_ (mcode, "stop_run");
	call signal_ ("command_abort_", null (), null ());
	return;

return_multics_error:
	code = mcode;
	return;


/* *********************************** */

/* ****	Declaration for builtin function	**** */

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index, float)
			builtin;

/* ****	End of declaration for builtin function	**** */

%include cobol_control;
%include cobol_fixed_static;
%include cobol_stack_frame;
%include cobol_fsb_type_1;
%include cobol_fsbskel;
%include iocb;
%include stack_header;
%include cobol_file_info;

dcl	1 cond_info,				/*[3.0-1]*/
%include cond_info;

     end;
