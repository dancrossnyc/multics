/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_RELEASE_.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* format: style3 */
cobol_RELEASE_:
     proc;					/* Version 2. */
						/* Input records while "l">0, then sort. */

	cobol_SM_$disaster1 = cobol_SM_$disaster1 + 1;
	if cobol_SM_$disaster1 > 1
	then do;					/* cobol_RELEASE_  called twice after cobol_SM_$disaster1. */
		cobol_SM_$ec = 1;
		signal condition (SORTM_STOP);
	     end;

	if cobol_SM_$RELbl > 0
	then do;					/* Input call. */
		if cobol_SM_$RELbl > cobol_SM_$max1
		then do;
			cobol_SM_$ec = 2;
			signal condition (SORTM_STOP);
		     end;
		if cobol_SM_$SSi = 0
		then do;				/* This is the initial call to cobol_RELEASE_.  */
			if cobol_FILE_$OUT ("SORTM_", (cobol_SM_$sort_dir), "SRTM.SI", "rwa", cobol_SM_$SIp)
			     | cobol_FILE_$OUT ("SORTM_", (cobol_SM_$sort_dir), "SRTM.SR", "rwa", cobol_SM_$SRp)
			     | cobol_FILE_$OUT ("SORTM_", (cobol_SM_$sort_dir), "SRTM.SS", "rwa", cobol_SM_$SSp)
			     | cobol_FILE_$OUT ("SORTM_", (cobol_SM_$sort_dir), "SRTM.MI", "rwa", cobol_SM_$MIp)
			then do;
				cobol_SM_$ec = 3;
				signal condition (SORTM_STOP);
			     end;
			cobol_SM_$MIi = 0;
			cobol_SM_$SSi = 1;
			cobol_SM_$SIi = 0;
			cobol_SM_$rp1 = cobol_SM_$SSp;
			cobol_SM_$rp2 = cobol_SM_$SSp;
			cobol_SM_$sn1 = 1;		/* Durning sort the merge string number is 1. */
			cobol_SM_$sn2 = 1;
		     end;
		if ((cobol_SM_$RELbl + cobol_SM_$SSi) > cobol_SM_$max2) | (cobol_SM_$SIi > cobol_SM_$max3)
		then do;				/* Sort the accumulated records. */
			call cobol_MSORT_;		/* cobol_SM_$LTSIi=cobol_SM_$TSIi; */
						/* One less than the first record to be sorted _n_e_x_t. */

/* Initialize the sort tables for next input. */
			cobol_SM_$SIi = 0;
			cobol_SM_$SSi = 1;
			if cobol_FILE_$LEN ("cobol_RELEASE_", (cobol_SM_$sort_dir), "SRTM.SI", 0)
			then ;			/* Assure file truncated. */
		     end;				/* Move the input record into the sort storage area. */
		substr (cobol_SM_$SSp -> S, cobol_SM_$SSi, cobol_SM_$RELbl) =
		     substr (input_rec, cobol_SM_$RELfb, cobol_SM_$RELbl);
		cobol_SM_$SIi = cobol_SM_$SIi + 1;	/* Count of the records for the next sort. */
						/* cobol_SM_$TSIi=cobol_SM_$TSIi+1; */
						/* Total record count. */
		cobol_SM_$SRp -> R.pt (cobol_SM_$SIi) = cobol_SM_$SSi;
						/* Location in sort storage segment of the record. */
		cobol_SM_$SRp -> R.ln (cobol_SM_$SIi) = cobol_SM_$RELbl;
						/* The length of the record. */
		cobol_SM_$SSi = cobol_SM_$SSi + cobol_SM_$RELbl;
						/* Update the next location
			   available in the sort storage segment. */
		cobol_SM_$SIp -> I (cobol_SM_$SIi) = cobol_SM_$SIi;
						/* Record index for sort. */
		cobol_SM_$disaster1 = 0;
		return;
	     end;

/* All records have been input.
	   Sort those in storage. Ready for merge output. */
	call cobol_MSORT_;
	return;					/*	Global declarations. */
dcl	input_rec		bit (2359296) based (cobol_SM_$RELp),
	cobol_FILE_$LEN	entry (char (*), char (*), char (*), fixed bin (35)) ext returns (bit (1)),
	cobol_FILE_$OUT	entry (char (*), char (*), char (*), char (*), ptr) ext returns (bit (1)),
	SORTM_STOP	condition ext,
	cobol_MSORT_	entry ext,
	(
	cobol_SM_$SIi,
	cobol_SM_$SSi,
	cobol_SM_$MIi,
	cobol_SM_$disaster1,
	cobol_SM_$TSIi,
	cobol_SM_$LTSIi,
	cobol_SM_$sn1,
	cobol_SM_$sn2,
	cobol_SM_$RELbl,
	cobol_SM_$RELfb,
	cobol_SM_$ec,
	cobol_SM_$max1,
	cobol_SM_$max2,
	cobol_SM_$max3,
	cobol_SM_$max4
	)		fixed bin (35) static external,
	(
	cobol_SM_$SIp,
	cobol_SM_$SRp,
	cobol_SM_$SSp,
	cobol_SM_$rp1,
	cobol_SM_$rp2,
	cobol_SM_$RELp,
	cobol_SM_$MIp,
	cobol_SM_$MRp	(1000),
	cobol_SM_$MSp	(1000)
	)		ptr static external,
	cobol_SM_$sort_dir	char (168) var static external,
						/* Based structures for sort and merge storage segments. */
	I		(65536) fixed bin (35) aligned based,
	S		bit (2359296) aligned based,
	1 R		(32768) aligned based,
	  2 pt		fixed bin (35),		/* Location in S or a record. */
	  2 ln		fixed bin (35),		/* Length of a record. */
	(substr)		builtin;
     end cobol_RELEASE_;
