/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_RETURN_.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* format: style3 */
cobol_RETURN_:
     proc;					/* Version 2. */
						/* Entry to return records from the SORTM_. */
	if cobol_SM_$disaster2 = 0
	then do;					/* Initial  call to cobol_RETURN_. */
		cobol_SM_$disaster2 = 1;
		cmpe = cobol_SM_$mcp;		/* Point to the merge comparison procedure. */
		call A0;
		return;
	     end;
	if cobol_SM_$RETbl < 1
	then do;					/* Delete all work files. */
		cobol_SM_$disaster2 = cobol_SM_$disaster2 + 1;
		if cobol_SM_$disaster2 > 2
		then do;
			cobol_SM_$ec = 6;
			signal condition (SORTM_STOP);
		     end;
		j = cobol_SM_$RETbl;
		if cobol_FILE_$LEN ("cobol_RETURN_", (cobol_SM_$sort_dir), "SRTM.SI", j)
		     | cobol_FILE_$LEN ("cobol_RETURN_", (cobol_SM_$sort_dir), "SRTM.SR", j)
		     | cobol_FILE_$LEN ("cobol_RETURN_", (cobol_SM_$sort_dir), "SRTM.SS", j)
		     | cobol_FILE_$LEN ("cobol_RETURN_", (cobol_SM_$sort_dir), "SRTM.MI", j)
		then do;
			cobol_SM_$ec = 7;
			signal condition (SORTM_STOP);
		     end;
		do i = 1 to cobol_SM_$MIi;
		     N = cobol_NUMS_ (i);
		     if cobol_FILE_$LEN ("cobol_RETURN_", (cobol_SM_$sort_dir), "SRTM.MR." || N, j)
			| cobol_FILE_$LEN ("cobol_RETURN_", (cobol_SM_$sort_dir), "SRTM.MS." || N, j)
		     then do;
			     cobol_SM_$ec = 7;
			     signal condition (SORTM_STOP);
			end;
		end;
		return;
	     end;

	if cobol_SM_$MIi < 2
	then do;					/* Single merge string. */
		if ns > n
		then do;
			cobol_SM_$disaster2 = 2;
			cobol_SM_$ec = 8;
			signal condition (SORTM_STOP);
		     end;
		else do;
			cobol_SM_$RETp = cobol_SM_$MSp (1);
			p1 = cobol_SM_$MRp (1);
			cobol_SM_$RETfb = p1 -> R.pt (ns);
			cobol_SM_$RETbl = p1 -> R.ln (ns);
			ns = ns + 1;
		     end;
		return;
	     end;

/* Multiple merge strings. */
	call A2;
	call A1;
	return;

A0:
     proc;					/* SORTM_ return "record" procedure (entry point cobol_RETURN_). */
	if cobol_SM_$MIi < 2
	then do;					/* Single sorted string. */
		n = cobol_SM_$MIp -> I (1);		/* Number of output records. */
		if n < 1
		then do;
			cobol_SM_$ec = 9;
			signal condition (SORTM_STOP);
		     end;
		else do;
			cobol_SM_$RETp = cobol_SM_$MSp (1);
			p1 = cobol_SM_$MRp (1);
			cobol_SM_$RETfb = p1 -> R.pt (1);
			cobol_SM_$RETbl = p1 -> R.ln (1);
			ns = 2;
		     end;
		return;
	     end;

/* Initialize for multiple merge strings. */
/* Truncate merge work files. */
	if (cobol_FILE_$LEN ("cobol_RETURN_", (cobol_SM_$sort_dir), "SRTM.SI", 0))
	     | (cobol_FILE_$LEN ("cobol_RETURN_", (cobol_SM_$sort_dir), "SRTM.SR", 0))
	then do;
		cobol_SM_$ec = 10;
		signal condition (SORTM_STOP);
	     end;

	do i = 1 to cobol_SM_$MIi;			/* Set indices for merge. */
	     cobol_SM_$SIp -> I (i) = i;
	     cobol_SM_$SRp -> I (i) = 1;
	end;

/*
	calculate the lengths of
	lists and their start pointers
	in a linear set.
	*/
	t = 0;
	l = cobol_SM_$MIi;
	do n = 1 by 1 while (l > 1);
	     cobol_SM_$s (n) = t;			/* start of the next list. */
	     if substr (unspec (l), 36, 1)
	     then l = l + 1;			/* make the length even. */
	     t = t + l;				/* accumulate the lengths. */
	     l = l / 2;				/* next list is 1/2 the length of the present list. */
	end;
	n = n - 1;

/* Set cobol_SM_$s(n) to (one more than) the index to the list
	   for the final 2 records to be compared. */
	do i = 2 to n;
	     lft = cobol_SM_$s (i - 1);
	     rit = cobol_SM_$s (i);
	     do j = 1 by 2 to (rit - lft);
		x = lft + j;
		v1 = cobol_SM_$SIp -> I (x);
		v2 = cobol_SM_$SIp -> I (x + 1);
		if v2 > 0
		then do;
			p1 = cobol_SM_$MRp (v1);
			p2 = cobol_SM_$MRp (v2);
			cobol_SM_$sn1 = v1;
			cobol_SM_$sn2 = v2;
			cobol_SM_$rp1 = cobol_SM_$MSp (v1);
			cobol_SM_$rp2 = cobol_SM_$MSp (v2);
			cobol_SM_$fb1 = p1 -> R.pt (1);
			cobol_SM_$fb2 = p2 -> R.pt (1);
			cobol_SM_$bl1 = p1 -> R.ln (1);
			cobol_SM_$bl2 = p2 -> R.ln (1);
			call cmpe;
			if (cobol_SM_$result = 1) | ((cobol_SM_$result = 2) & (v2 < v1))
			then v1 = v2;
		     end;
		rit = rit + 1;
		cobol_SM_$SIp -> I (rit) = v1;
	     end;
	end;
	i = cobol_SM_$s (n) + 2;
	do i = 1 to i;
	     N = cobol_NUMS_ (cobol_SM_$SIp -> I (i));
	end;

	y = cobol_SM_$s (n) + 1;
	call A1;
	return;
     end A0;

A1:
     proc;					/* Obtain the next record to output. */
	v1 = cobol_SM_$SIp -> I (y);
	v2 = cobol_SM_$SIp -> I (y + 1);
	if (v1 = 0) & (v2 = 0)
	then do;
		cobol_SM_$ec = 11;
		signal condition (SORTM_STOP);
		cobol_SM_$RETbl = 0;
		return;
	     end;
	if v1 = 0
	then do;
		v1 = v2;
		p1 = cobol_SM_$MRp (v2);
		i1 = cobol_SM_$SRp -> I (v2);
	     end;
	else if v2 = 0
	then do;
		p1 = cobol_SM_$MRp (v1);
		i1 = cobol_SM_$SRp -> I (v1);
	     end;
	else if v2 > 0
	then do;
		p1 = cobol_SM_$MRp (v1);
		p2 = cobol_SM_$MRp (v2);
		i1 = cobol_SM_$SRp -> I (v1);
		i2 = cobol_SM_$SRp -> I (v2);
		cobol_SM_$sn1 = v1;
		cobol_SM_$sn2 = v2;
		cobol_SM_$rp1 = cobol_SM_$MSp (v1);
		cobol_SM_$rp2 = cobol_SM_$MSp (v2);
		cobol_SM_$fb1 = p1 -> R.pt (i1);
		cobol_SM_$fb2 = p2 -> R.pt (i2);
		cobol_SM_$bl1 = p1 -> R.ln (i1);
		cobol_SM_$bl2 = p2 -> R.ln (i2);
		call cmpe;

		if (cobol_SM_$result = 1) | ((cobol_SM_$result = 2) & (v2 < v1))
		then do;				/* Second record first  |
						   Key fields equal but
						   2-nd merge string earlier. */
			v1 = v2;
			i1 = i2;
			p1 = p2;
		     end;
	     end;
	cobol_SM_$RETp = cobol_SM_$MSp (v1);
	cobol_SM_$RETfb = p1 -> R.pt (i1);
	cobol_SM_$RETbl = p1 -> R.ln (i1);
	return;
     end A1;
A2:
     proc;					/* Delete last record output. */
	i = cobol_SM_$SRp -> I (v1) + 1;
	if i > cobol_SM_$MIp -> I (v1)
	then cobol_SM_$SIp -> I (v1) = 0;		/* v1-th string depleted. */
	cobol_SM_$SRp -> I (v1) = i;			/* Update the index to which
			   record is next in the v1-th string. */
	do j = 2 to n;
	     lft = cobol_SM_$s (j - 1);
	     if substr (unspec (v1), 36, 1)
	     then v2 = v1 + 1;
	     else v2 = v1 - 1;
	     x = (v1 + 1) / 2;
	     v1 = cobol_SM_$SIp -> I (v1 + lft);
	     v2 = cobol_SM_$SIp -> I (v2 + lft);
	     if v1 = 0
	     then v1 = v2;
	     else if v2 > 0
	     then do;
		     p1 = cobol_SM_$MRp (v1);
		     p2 = cobol_SM_$MRp (v2);
		     i1 = cobol_SM_$SRp -> I (v1);
		     i2 = cobol_SM_$SRp -> I (v2);
		     cobol_SM_$sn1 = v1;
		     cobol_SM_$sn2 = v2;
		     cobol_SM_$rp1 = cobol_SM_$MSp (v1);
		     cobol_SM_$rp2 = cobol_SM_$MSp (v2);
		     cobol_SM_$fb1 = p1 -> R.pt (i1);
		     cobol_SM_$fb2 = p2 -> R.pt (i2);
		     cobol_SM_$bl1 = p1 -> R.ln (i1);
		     cobol_SM_$bl2 = p2 -> R.ln (i2);
		     call cmpe;
		     if (cobol_SM_$result = 1) | ((cobol_SM_$result = 2) & (v2 < v1))
		     then v1 = v2;
		end;
	     cobol_SM_$SIp -> I (x + cobol_SM_$s (j)) = v1;
	     v1 = x;
	end;
     end A2;
dcl	(
	cobol_SM_$SIp,
	cobol_SM_$MIp,
	cobol_SM_$rp1,
	cobol_SM_$rp2,
	cobol_SM_$RETp,
	cobol_SM_$MRp	(1000),
	cobol_SM_$MSp	(1000),
	cobol_SM_$SRp
	)		ptr ext,
	(
	cobol_SM_$disaster2,
	cobol_SM_$s	(36),
	cobol_SM_$sn1,
	cobol_SM_$sn2,
	cobol_SM_$fb1,
	cobol_SM_$fb2,
	cobol_SM_$bl1,
	cobol_SM_$bl2,
	cobol_SM_$result,
	cobol_SM_$RETfb,
	cobol_SM_$RETbl,
	cobol_SM_$ec,
	cobol_SM_$MIi
	)		fixed bin (35) ext,
	cobol_SM_$sort_dir	char (168) var ext,
	cobol_SM_$mcp	entry variable ext,
	S		bit (2359296) aligned based,
	I		(65536) fixed bin (35) aligned based,
	1 R		(32768) aligned based,
	  2 pt		fixed bin (35),
	  2 ln		fixed bin (35),
	N		char (13) var,
	cobol_NUMS_	entry (fixed bin (35)) ext returns (char (13) var),
	cobol_FILE_$LEN	entry (char (*), char (*), char (*), fixed bin (35)) ext returns (bit (1)),
	cobol_FILE_$OUT	entry (char (*), char (*), char (*), char (*), ptr) ext returns (bit (1)),
	cmpe		entry variable internal static,
	SORTM_STOP	condition ext,
	(p1, p2)		ptr,
	(t, n, v1, v2, i1, i2, l, x, j, y, ns, np, lft, rit, i)
			fixed bin (35) static internal;

/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

     end cobol_RETURN_;
