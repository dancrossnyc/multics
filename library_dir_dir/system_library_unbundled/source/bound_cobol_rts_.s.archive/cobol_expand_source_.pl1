/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_expand_source_.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 04/04/83 by FCH, [5.2-1], span changed to fixed bin(24), phx14809(BUG550) */
/* Modified on 12/29/81 by FCH, [5.1-2], ecs command makes COPY and REPLACE statements into comments, phx11818(BUG519) */
/* Modified on 10/27/81 by FCH, [5.1-1], include file cobol_ecs_info changed, phx11819(BUG517) */
/* Recompiled on 12/10/79 to fix problem with leveling diags on COPY statements */
/* Modified on 04/09/79 by FCH, [4.0-3], emit text manip statement */
/* Modified on 04/05/79 by FCH, [4.0-2], detect illegal pseudo-text */
/* Modified on 02/23/79 by FCH, [4.0-1], copy file name qualification */
/* created for Version 4.0 */






/* format: style3 */
cobol_expand_source_:
     proc;


replace:
     entry (ecs_info_ptr, bc, command, expand_cobol_source_area_ptr);

	call init;

/* Main	processing loop for replace statement */

replace_err:
	call clear_copy;

	do while ("1"b);

	     lexeme_env.error = 0;
	     call cobol_lexeme$find_replace (lexeme_ptr);
next_replace:
	     if lexeme_env.error = 1
	     then do;

		     call merge_to_end;
		     bc = (next_new_position - 1) * 9;
		     call finish;
		     return;
		end;
	     else do;

		     replace_active = "1"b;
		     save_copy_line = lexeme_env.token.line;
		     copy_line_length = lexeme_env.current_line.length;
		     save_copy_column = lexeme_env.token.column;
		     save_source_offset = lexeme_env.token.offset - 1;
		     copy_line_ptr = lexeme_env.current_line.loc;

		     call process_replace_statement;

		end;

	end;					/* end	processing loop for replace statement */

process_replace_statement:
     proc;

/*[4.0-3]*/
	state_pos = lexeme_env.token.offset;

	comp_str_used = 1;
	cr_used, cr_largest, semi_sw, comma_sw = 0;

	lexeme_env.indicators.copy_replace = "1"b;
	lexeme_env.pseudo_text = 1;


	call cobol_lexeme$cobol_lexeme (lexeme_ptr);

	if lexeme_env.error = 1
	then return;				/* replace off. */
	if lexeme_env.token.type = 3 & lexeme_env.token.string = "off"
	then do;

		call cobol_lexeme$cobol_lexeme (lexeme_ptr);
		if lexeme_env.error = 1
		then return;

		if lexeme_env.token.type = 4 & lexeme_env.token.string = "."
		then do;

			call merge_to_copy;
			last_source_offset = lexeme_env.token.offset + 2;
			return;
		     end;
	     end;					/* replace statement */
	if substr (word, 1, lexeme_env.token.string_size) ^= "=="
	then return;

	do while (lexeme_env.token.string ^= ".");

	     if (cr_used + 1) > cr_max
	     then do;

		     call T_alloc (addr (cr_control), "0"b);
		     cr_max = cr_cap / 3;
		end;
	     cr_used = cr_used + 1;

	     call pseudo_text ("L");

	     if lexeme_env.error = 1 | ^(lexeme_env.token.type = 3 & lexeme_env.token.string = "by")
	     then return;

	     call get_next_lexeme ("");

	     call pseudo_text ("R");

	end;

	call merge_to_copy;
	call replace_process;

	lexeme_env.indicators.copy_replace = "0"b;

     end process_replace_statement;

init:
     proc;

/*
				INITILIZATION
			*/

/*[5.1-2]*/
	if ecs_info_table_.command
	then char10 = "*******   ";
	else char10 = " ";

	next_new_position, last_source_offset = 1;
	last_copy_line, insert_space_span = 0;
	fill_last_ln = "0"b;
	replace_active = "0"b;

/*	Allocate Tables for Copy Replacement */

	call T_alloc (addr (cr_control), "1"b);
	cr_max = cr_cap / 3;

	call T_alloc (addr (lbw_control), "1"b);

	lbw_max = lbw_cap / 2;

	call T_alloc (addr (cs_control), "1"b);

	cs_max = cs_cap * 4;

	allocate lexeme_env in (expand_cobol_source_area) set (lexeme_ptr);

	call cobol_lexeme$open (lexeme_ptr);

	lexeme_env.ecs_ptr = expand_cobol_source_area_ptr;
	old_file_ptr = ecs_info_table_.input_ptr;
	new_file_ptr = ecs_info_table_.output_ptr;
	p1 = lexeme_ptr;

/*
				Make the old file known to cobol_lexeme.
			*/

	lexeme_ptr = p1;
	p1 -> lexeme_env.source_table.loc = old_file_ptr;
	lexeme_env.error = 0;

	call cobol_lexeme$set (p1, "file_name", old_file_ptr);

	if lexeme_env.error ^= 0
	then do;

		bc = (next_new_position - 1) * 9;
		call finish;

		return;
	     end;

     end init;

copy:
     entry (ecs_info_ptr, bc, command, expand_cobol_source_area_ptr);

	call init;

/*[4.0-4]*/
	last_char_nl = 0;

cpr_error:
	call clear_copy;

/*	Main	processing loop for copy replacing */

	do while ("1"b);

start:
	     lexeme_env.error = 0;
	     call cobol_lexeme$find_copy (lexeme_ptr);

	     if lexeme_env.error = 1			/* eof */
	     then do;

		     call merge_to_end;
		     bc = (next_new_position - 1) * 9;
		     call finish;
		     return;

		end;
	     else do;

		     save_copy_line = lexeme_env.token.line;
		     copy_line_length = lexeme_env.current_line.length;
		     save_copy_column = lexeme_env.token.column;
		     copy_line_ptr = lexeme_env.current_line.loc;
		     save_source_offset = lexeme_env.token.offset - 1;

		     call process_copy_statement;

		end;

	end;

process_copy_statement:
     proc;

	if lexeme_env.token.col_7 = "D" | lexeme_env.token.col_7 = "d"
	then return;


/*[4.0-3]*/
	state_pos = lexeme_env.token.offset;

	call get_lib_name;

/*
				get_lib_name returns with next word
			*/

	if lexeme_env.token.type = 3
	then if lexeme_env.token.string = "replacing"
	     then do;

/*
						We now have a COPY ... REPLACING statement to	process.
			
						Perform syntax on statement and generate tables.
			*/

		     lexeme_env.indicators.copy_replace = "1"b;
		     lexeme_env.pseudo_text = 1;
		     call rep_spec;

/*
						Merge the library file with the specified replacements.
			*/

		     if valid_lib
		     then call replace_process;
		     else goto cpr_error;

		end;

	     else goto cpr_error;

	else if lexeme_env.token.type = 4
	then if lexeme_env.token.string = "."
	     then do;

/*
					This is a simple COPY so merge the library and go back to start.
			*/

		     if valid_lib
		     then call merge_library;
		     else goto cpr_error;


		     return;

		end;

	     else goto cpr_error;

	else goto cpr_error;

     end process_copy_statement;

get_lib_name:
     proc;

/*
				Get copy file name without converting to lower case.
			*/

	lexeme_env.indicators.lc = "0"b;
	call get_next_lexeme ("");
	lexeme_env.indicators.lc = "1"b;

/*
				Save copy file name.
			*/

	lib_name = substr (word, 1, lexeme_env.token.string_size);

/*
				make library known to cobol_lexeme.
			*/

	allocate lexeme_env in (expand_cobol_source_area) set (lexeme_ptr);

	lexeme_env.ecs_ptr = expand_cobol_source_area_ptr;
	p2 = lexeme_ptr;
	p2 -> lexeme_env.error = 0;
	p2 -> lexeme_env.mem_tab_ptr = p1 -> lexeme_env.mem_tab_ptr;
	p2 -> lexeme_env.x_ptr = p1 -> lexeme_env.x_ptr;

	lexeme_ptr = p1;

/* 	call cobol_lexeme$reset(p1); */
/*
				Check for qualification of copy file name.
			*/

	call get_next_lexeme ("");

	if lexeme_env.token.string ^= "of" & lexeme_env.token.string ^= "in"
						/*[4.0-1]*/
	then qual_name = "";			/*[4.0-1]*/
	else do;

/*
				Get library name without converting to lower case.
			*/

		lexeme_env.indicators.lc = "0"b;

		call get_next_lexeme ("");

		lexeme_env.indicators.lc = "1"b;

/*[4.0-1]*/
		qual_name = substr (word, 1, lexeme_env.token.string_size);

/*[4.0-1]*/
	     end;

/*[4.0-1]*/
	call expand_cobol_source$find_incl_file /*[4.0-1]*/ (substr (lib_name, 1, length (lib_name)),
						/*[4.0-1]*/
	     substr (qual_name, 1, length (qual_name)),	/*[4.0-1]*/
	     old_file_ptr,				/*[4.0-1]*/
	     p2 -> lexeme_env.source_table.loc,		/*[4.0-1]*/
	     code /*[4.0-1]*/);


/*[4.0-1]*/
	call cobol_lexeme$envinit (p2);

/*[4.0-1]*/
	if code ^= 0
	then do;
		valid_lib = "0"b;			/*[4.0-1]*/
		free p2 -> lexeme_env;		/*[4.0-1]*/
	     end;					/*[4.0-1]*/
	else do;
		valid_lib = "1"b;			/*[4.0-1]*/
		lib_file_ptr = p2 -> lexeme_env.source_table.loc;
						/*[4.0-1]*/
	     end;

/*
				Call cobol_lexeme so when we return we will
				be looking at "REPLACING".
			*/

/*[4.0-1]*/
	if qual_name ^= ""
	then call get_next_lexeme ("");

     end get_lib_name;

rep_spec:
     proc;

/*
				Initialize text replacement control parameters.
			*/

	semi_sw, comma_sw = 0;
	cr_used, cr_largest = 0;
	comp_str_used = 1;


/*
				Get token after 'replacing'.
			*/

	call get_next_lexeme ("");

/*
				Main loop for	processing replacing specification.
			*/

	do while (lexeme_env.token.string ^= ".");

/*
			                    Check and see if tcr_table is full.
			*/

	     if (cr_used + 1) > cr_max
	     then do;

		     call T_alloc (addr (cr_control), "0"b);
		     cr_max = cr_cap / 3;
		end;

	     cr_used = cr_used + 1;

/*
			                    Process the left specitication and
			                      build the replacement table.
			*/

	     call left_spec;

/*
			                    Check for the word 'by'.
			*/

	     if lexeme_env.token.string ^= "by"
	     then do;

		     cr_used = cr_used - 1;
		     goto cpr_error;
		end;

	     call get_next_lexeme ("");

/*
			                    Scan off the word 'by' and
			                   	process the right specitication.
			*/

	     call right_spec;

/* put skip  edit ("key ->", substr(compare_string,comp_start(cr_used),comp_len(cr_used)),"<-") (a);  */

	end;					/* end of main loop */

	lexeme_env.indicators.copy_replace = "0"b;

     end rep_spec;

left_spec:
     proc;

/*	This routine calls substr_word with an indicator
				to	process the compare text
			*/

	call subst_word ("L");

     end left_spec;


right_spec:
     proc;

/*	This routine calls substr_word with an indicator
				to	process the replacement text
			*/

	call subst_word ("R");

     end right_spec;

subst_word:
     proc (mode);

dcl	mode		char (1);

/*
				This routines identifies
					==pseudo-text==
					identifier
					literal
					word
				and calls the appropiate subroutine for	process.
				On entry word contains the token.
			*/

	if substr (word, 1, lexeme_env.token.string_size) = "=="
						/* pseudo-text delimiter */
	then call pseudo_text (mode);
	else if token.type = 3			/* word*/
	then call ident (mode);
	else if token.type = 2
	then call literal (mode);
	else goto cpr_error;

     end subst_word;

pseudo_text:
     proc (mode);

dcl	mode		char (1);
dcl	c2		char (2);


	text_string = "";

	if mode = "R"
	then do;

		call cobol_lexeme$find_pseudo_text (lexeme_ptr);

		if lexeme_env.error = 1
		then goto cpr_error;

/*
					Save offset and span of replacement text.
			*/

		repl_offset (cr_used) = lexeme_env.token.offset;
		repl_span (cr_used) = lexeme_env.token.span;
	     end;

/*
				Process left specification pseudo-text.
			*/

	else do;

/*
					Scan past current '==' and get first token in psuedo-text.
			*/

		call get_next_lexeme ("text_word");

		if substr (word, 1, lexeme_env.token.string_size) = ","
		     | substr (word, 1, lexeme_env.token.string_size) = ";"
		then do;

/*
						Special	processing if comma or semi-colon.
			*/

			text_string = " " || substr (word, 1, lexeme_env.token.string_size);

			call get_next_lexeme ("");

			if substr (word, 1, lexeme_env.token.string_size) ^= "=="
			then text_string = "";

		     end;

		do while (substr (word, 1, lexeme_env.token.string_size) ^= "==");

		     text_string = text_string || " " || substr (word, 1, lexeme_env.token.string_size);
		     call get_next_lexeme ("");

/*[4.0-2]*/
		     if lexeme_env.error ^= 0
		     then go to cpr_error;

		end;

/*
					Insert pseudo-text into the compare_string
					and update the parameters in cr_table.
			*/

		text_string_length = length (text_string);
		comp_start (cr_used) = comp_str_used;

/*
					Check and see if text_string will fit into compare_string.
			*/

		do while ((text_string_length + comp_str_used) > cs_max);

		     call T_alloc (addr (cs_control), "0"b);
		     cs_max = cs_cap * 4;

		end;

		substr (compare_string, comp_str_used, text_string_length) = text_string;
		comp_len (cr_used) = text_string_length;
		comp_str_used = comp_str_used + text_string_length;

		if text_string_length > cr_largest
		then cr_largest = text_string_length;

/*
					Test and set an indicator if pseudo-text consists
					solely of a comma(,) or a semi-colon(;).
			*/

		if text_string_length = 2
		then do;

			c2 = substr (text_string, 1, 2);

			if c2 = " ;"
			then semi_sw = cr_used;
			else if c2 = " ,"
			then comma_sw = cr_used;

		     end;

	     end;

/*
				Position to 'by or '.' on return.
			*/

	call get_next_lexeme ("");

	return;

     end pseudo_text;

ident:
     proc (mode);

dcl	mode		char (1);
dcl	replacement_span	fixed bin;

/*	If this is the right specification save the offset of the source
				for replacement. */


	if mode = "R"
	then do;

		repl_offset (cr_used) = token.offset;
		replacement_span = (lexeme_env.token.offset - repl_offset (cr_used)) + lexeme_env.token.span;
	     end;

	else do;

		text_string = "";
		text_string = text_string || " " || substr (word, 1, string_size);
	     end;

	call get_next_lexeme ("");

/*
				Continue to scan and build text_string string as long
				as the identifier is qualified with an "of" or "in".
			*/

	do while (substr (word, 1, lexeme_env.token.string_size) = "in"
	     | substr (word, 1, lexeme_env.token.string_size) = "of");

	     if mode = "R"
	     then replacement_span = (lexeme_env.token.offset - repl_offset (cr_used)) + lexeme_env.token.span;
	     else text_string = text_string || " " || substr (word, 1, lexeme_env.token.string_size);

	     call get_next_lexeme ("");

	     if token.type ^= 3			/* type 3 = word */
	     then do;
		     call copy_error (1);

		     cr_used = cr_used - 1;
		     goto cpr_error;
		end;

	     if mode = "R"
	     then replacement_span = (lexeme_env.token.offset - repl_offset (cr_used)) + lexeme_env.token.span;
	     else text_string = text_string || " " || substr (word, 1, lexeme_env.token.string_size);

	     call get_next_lexeme ("");

	end;

/*
				Check and see if the identifier is subscripted.  If it is
				scan until a right paren ")" is found saving the tokens
				in text_string string;
			*/


	if substr (word, 1, lexeme_env.token.string_size) = "("
	then do;

		if mode = "R"
		then replacement_span = (lexeme_env.token.offset - repl_offset (cr_used)) + lexeme_env.token.span;
		else text_string = text_string || " (";

		call get_next_lexeme ("");

		do while (substr (word, 1, lexeme_env.token.string_size) ^= ")");

		     if mode = "R"
		     then replacement_span =
			     (lexeme_env.token.offset - repl_offset (cr_used)) + lexeme_env.token.span;
		     else text_string = text_string || " " || substr (word, 1, lexeme_env.token.string_size);

		     call get_next_lexeme ("");

		     if string = "by" | string = "copy" | string = "."
		     then do;

			     call copy_error (5);
			     goto cpr_error;

			end;
		end;

		if mode = "R"
		then replacement_span = (lexeme_env.token.offset - repl_offset (cr_used)) + lexeme_env.token.span;
		else text_string = text_string || " )";

		call get_next_lexeme ("");
	     end;


/*	If identifier is from right specification save the span in the source file.
				If the identifier is from the left specification insert the identifier into
				the compare string and make the entries is the cr_table for it.
			*/


	if mode = "R"
	then repl_span (cr_used) = replacement_span;
	else do;
		comp_start (cr_used) = comp_str_used;
		text_string_length = length (text_string);
		comp_len (cr_used) = text_string_length;


/*		Check and see if text_string will fit into compare_string */


		do while ((text_string_length + comp_str_used) > cs_max);

		     call T_alloc (addr (cs_control), "0"b);
		     cs_max = cs_cap * 4;
		end;

		substr (compare_string, comp_str_used, text_string_length) = text_string;
		comp_str_used = comp_str_used + text_string_length;

/*
				          Check and update cr_largest if necessary.
			*/

		if text_string_length > cr_largest
		then cr_largest = text_string_length;
	     end;

     end ident;

literal:
     proc (mode);

dcl	mode		char (1);

	if mode = "R"				/*
			          Process the left specification:  Save the offset and the
			          span of the replacement text from the source file.
			*/
	then do;
		repl_offset (cr_used) = lexeme_env.token.offset;
		repl_span (cr_used) = lexeme_env.token.span;
	     end;

/*
			          Process the right specification: insert the
			          literal into the compare_string and update the
			          cr_table parameters.
			*/

	else do;

		comp_start (cr_used) = comp_str_used;
		comp_len (cr_used) = lexeme_env.token.string_size + 1;
						/*
					Check and see if literal will fit into compare_string.
			*/
		do while ((comp_len (cr_used) + comp_str_used) > cs_max);

		     call T_alloc (addr (cs_control), "0"b);
		     cs_max = cs_cap * 4;
		end;

		substr (compare_string, comp_str_used, lexeme_env.token.string_size + 1) =
		     " " || substr (word, 1, lexeme_env.token.string_size);
		comp_str_used = comp_str_used + lexeme_env.token.string_size + 1;

		if (lexeme_env.token.string_size + 1) > cr_largest
		then cr_largest = (token.string_size + 1);
	     end;

/*
			          Call cobol_lexeme to position to the next word on return.
			*/

	call get_next_lexeme ("");

     end literal;

merge_library:
     proc;

/*
				Copy the old source into the new source up to the copy statement.
			*/

	call merge_to_copy;

	span = p2 -> lexeme_env.source_table.size;
	substr (new_file, next_new_position, span) = substr (lib_file, 1, span);


	next_new_position = next_new_position + span;

     end merge_library;


merge_to_end:
     proc;

/*
				Check and see in any remaining text was on the last copy line.
			*/

	if fill_last_ln
	then do;

		substr (new_file, next_new_position, insert_space_span) = substr (spaces, 1, insert_space_span);
		next_new_position = next_new_position + insert_space_span;
	     end;

	span = p1 -> lexeme_env.source_table.size - last_source_offset + 1;


	substr (new_file, next_new_position, span) = substr (old_file, last_source_offset, span);
	next_new_position = next_new_position + span;

     end merge_to_end;

merge_to_copy:
     proc;

/*
				Check and see if wee have to preserve  the column position of remaining
				text on a line with a copy statement.
			*/

/*[4.0-3]*/
	state_span = lexeme_env.token.offset - state_pos + 1;

	if (last_copy_line = lexeme_env.token.line) | fill_last_ln
	then do;
		span = save_source_offset - last_source_offset + 1;

		if substr (old_file, last_source_offset, span) ^= substr (spaces, 1, span)
		then do;
			substr (new_file, next_new_position, insert_space_span) =
			     substr (spaces, 1, insert_space_span);

			next_new_position = next_new_position + insert_space_span;
			if fill_last_ln
			then fill_last_ln = "0"b;

		     end;
	     end;					/*
				Is the copy the first word on the current line?
			*/

	if substr (source_line, 8, save_copy_column - 8) = substr (spaces, 1, save_copy_column - 8)
	then fill_sw = "0"b;
	else fill_sw = "1"b;

/*
				Do we want to include the beginning of the line
				to the copy.
			*/

	if fill_sw
	then span = save_source_offset - last_source_offset;
	else span = (save_source_offset - last_source_offset) - (save_copy_column - 2);

	if span > 0
	then do;


		substr (new_file, next_new_position, span) = substr (old_file, last_source_offset, span);
		next_new_position = next_new_position + span;

		if fill_sw
		then do;

			substr (new_file, next_new_position, 1) = new_line_character;
			next_new_position = next_new_position + 1;

		     end;

	     end;

	if lexeme_env.token.column < (lexeme_env.current_line.length - 1)
	then do;
		;

		last_source_offset = lexeme_env.token.offset + 1;
		fill_last_ln = "1"b;
	     end;
	else do;

		fill_last_ln = "0"b;
		last_source_offset = lexeme_env.token.offset + 2;
	     end;

	last_copy_line = lexeme_env.token.line;
	insert_space_span = lexeme_env.token.column;

/*[4.0-4]*/
	if ecs_info_table_.format_indicator
	then return;

/*[4.0-3]*/
	substr (new_file, next_new_position, state_span + 11) =
	     /* emit the statement */ /*[5.1-2]*/ char10 || substr (old_file, state_pos, state_span) || "
";

/*[4.0-3]*/
	STR_PTR = addr (new_array (next_new_position));	/*[4.0-3]*/
	SIZE = state_span + 11;

/*[4.0-3]*/
	do while ("1"b);

/*[4.0-3]*/
	     CR_LOC = index (STR, "
");

/*[4.0-3]*/
	     if CR_LOC = SIZE
	     then go to MC;

/*[4.0-3]*/
	     STR_PTR = addr (STR_ARRAY (CR_LOC + 1));	/*[4.0-3]*/
	     SIZE = SIZE - CR_LOC;			/*[5.1-2]*/
	     if ecs_info_table_.command
	     then substr (STR, 1, 7) = "*******";	/*[4.0-3]*/
	end;

MC:						/*[4.0-3]*/
	next_new_position = next_new_position + state_span + 11;



     end merge_to_copy;

T_alloc:
     proc (TT_ptr, first_time);

declare	1 TT_a		based (TT_ptr),
	  2 loc		ptr,
	  2 parity	fixed bin,
	  2 cap		fixed bin,
	  2 incr		fixed bin;

dcl	TT_0		(TABLE_SIZE) aligned fixed bin (35) based (TABLE_PTR);
dcl	TT_1		(TABLE_SIZE) aligned fixed bin (35) based (TABLE_PTR);
dcl	TABLE_SIZE	fixed bin;
dcl	(TT_ptr, TABLE_PTR) ptr;
dcl	first_time	bit (1);

	TABLE_SIZE = TT_a.cap + TT_a.incr;

	if TT_a.parity = 0
	then do;
		allocate TT_1 in (expand_cobol_source_area) set (TABLE_PTR);

		if ^first_time
		then do;
			do i = 1 to TT_a.cap;
			     TT_1 (i) = TT_0 (i);
			end;
			TT_a.loc = TABLE_PTR;
			free TT_0;
		     end;
		else TT_a.loc = TABLE_PTR;

		TT_a.parity = 1;

	     end;
	else do;
		allocate TT_0 in (expand_cobol_source_area) set (TABLE_PTR);

		if ^first_time
		then do;
			do i = 1 to TT_a.cap;
			     TT_0 (i) = TT_1 (i);
			end;
			TT_a.loc = TABLE_PTR;
			free TT_1;
		     end;
		else TT_a.loc = TABLE_PTR;

		TT_a.parity = 0;

	     end;

	TT_a.cap = TABLE_SIZE;
     end T_alloc;

T_free:
     proc (TT_ptr);

dcl	1 TT_a		based (TT_ptr),
	  2 loc		ptr,
	  2 parity	fixed bin,
	  2 cap		fixed bin,
	  2 incr		fixed bin;

dcl	TT_0		(TT_a.cap) aligned fixed bin (35) based (TT_a.loc);
dcl	TT_1		(TT_a.cap) aligned fixed bin (35) based (TT_a.loc);
dcl	TT_ptr		ptr;

	if TT_a.parity = 0
	then free TT_0;
	else free TT_1;

     end T_free;

clear_copy:
     proc;

	cr_used = 0;
	comp_str_used = 1;

	do i = 1 to cr_max;
	     cr_table (i) = 0;
	end;

	do i = 1 to cs_max;
	     substr (compare_string, i, 1) = " ";
	end;

     end clear_copy;

finish:
     proc;

	lexeme_ptr = p1;
	free lexeme_env;

	call cobol_lexeme$close (p1);
	call T_free (addr (cs_control));
	call T_free (addr (cr_control));
	call T_free (addr (lbw_control));

     end finish;

get_next_lexeme:
     proc (entry);

dcl	entry		char (9);

	if entry = "token"
	then call cobol_lexeme$token (lexeme_ptr);
	else if entry = "text_word"
	then call cobol_lexeme$text_word (lexeme_ptr);
	else call cobol_lexeme$cobol_lexeme (lexeme_ptr);

	if lexeme_env.error > 1
	then if ^replace_active
	     then goto cpr_error;
	     else goto replace_err;

     end get_next_lexeme;

replace_process:
     proc;

dcl	library_string	char (cr_largest);

/*
				Copy the old source into the new source up to the copy statement.
			*/

	if ^replace_active
	then do;

		call merge_to_copy;

/*
				          Make library file known to cobol lexeme.
			*/

		lexeme_ptr = p2;
	     end;

/*
				Initialize the replacemnt parameters and get the first library word.
			*/

	lbs_length, lbs_sum, lbw_used = 0;
	lbs_size = cr_largest;
	library_string = spaces;
	base_offset = 1;

	call build_library_string;

	read_more_text = "1"b;

	do while (read_more_text);			/* end of file indicator */

	     matched_word_pos, spec_index = 0;

	     call compare_text;			/*
					If matched_word_pos returns greater than zero it
					will point to the first word matched in the
					library_string and spec_index will be the
					index to the specification in cr_table.
			*/
						/* put skip  edit (matched_word_pos,"->",library_string,"<-") (f(4),x(2),3 a);   */

	     if matched_word_pos > 0
	     then call replace_text;

	     call build_library_string;

	end;					/* do while not end of file */

	if replace_active
	then do;

		replace_active = "0"b;
		goto next_replace;

	     end;

/*
				The remaining library text from the last replacement
				to the end of the segment must also be moved to the new source.
			*/

	move_span = (p2 -> lexeme_env.source_table.size - base_offset) + 1;

/*
			          Size contains the offset of the last character in the
			          library file.  Plus one is used to get the NL character.
			*/

	substr (new_file, next_new_position, move_span) = substr (lib_file, base_offset, move_span);
	next_new_position = next_new_position + move_span;

/*
			          Reset lexeme_ptr so cobol_lexeme will
			          get tokens from the source file.
			*/
	free lexeme_env;
	lexeme_ptr = p1;

/*
				Reset cr_table and clear compare_string.
			*/
	call clear_copy;

build_library_string:
     proc;

dcl	chr		char (1);

read_next_word:
	call cobol_lexeme$text_word (lexeme_ptr);

	if lexeme_env.error = 1 | (replace_active & lexeme_env.token.type = 3 & lexeme_env.token.string = "replace")
	then do;

		library_string = spaces;
		lbw_table (*), lbs_length, lbs_sum = 0;
		read_more_text = "0"b;

		return;

	     end;

/*	Is library word greater than largest compare search key
				if so no checking is needed and the words in the library
				string can be cleared */

	word_length = lexeme_env.token.string_size;

	if (word_length + 1) > cr_largest
	then do;

		do j = 1 to lbw_max;
		     lbw_table (j) = 0;
		end;

		lbw_used, lbs_length = 0;
		library_string = spaces;
		goto read_next_word;

	     end;

/*	check for special	processing for comma and semi */




	if word_length = 1
	then do;

		chr = substr (word, 1, 1);

		if (chr = "," & comma_sw < 1) | (chr = ";" & semi_sw < 1)
		then goto read_next_word;
	     end;

/*
			          The library word will be used for comparision.
			          Insert it into the library_string and update lbw_table.
			*/

	if lbw_used + 1 > lbw_max			/*
			                   The Library Word Table is new full, allocate more space .
			*/
	then do;

		call T_alloc (addr (lbw_control), "0"b);
		lbw_max = lbw_cap / 2;
	     end;

	lbw_used = lbw_used + 1;
	lbw_length (lbw_used) = lexeme_env.token.string_size + 1;
	lbw_offset (lbw_used) = token.offset;
	lbw_span (lbw_used) = token.span;
	substr (aword, 1, 1) = " ";
	substr (aword, 2, word_length) = substr (word, 1, word_length);
	word_length = word_length + 1;

/*
			          If the word will not fit into the library_string remove the
			          oldest word from the left.  Shift the remainging words to the
			          lift to make rome for the new word and insert the new word.
			*/

	do while (lbs_length + word_length > lbs_size);

	     lbs_sum = 0;

	     do j = 1 to (lbw_used - 1);
		lbs_sum = lbs_sum + lbw_length (j);
	     end;

	     lbs_sum = lbs_size - lbs_sum;

/*
		                    lbs_sum is now the size of the remaining space in the library_string
		*/

	     if lbs_sum < word_length			/*
			                               The space abailable in library_string is less
			                                than the length of the word.  Remove a word from
			                                  library-string
			*/
	     then do;

		     substr (library_string, lbs_sum + 1, lbw_length (1)) = substr (spaces, 1, lbw_length (1));
		     lbs_length = lbs_length - lbw_length (1);

		     do j = 1 to (lbw_used - 1);

			lbw_table (j) = lbw_table (j + 1);
		     end;

		     lbw_used = lbw_used - 1;

		end;				/* removing word from library_string */

	end;					/* do while */

/*
			                     Now we shift the library_string to the left
			                      to make room for the new word
			*/

	substr (library_string, 1, lbs_size) = substr (library_string, 1 + word_length, lbs_size - word_length);

/*
			                     Insert word in library_string
			*/

	lbs_length = lbs_length + word_length;
	substr (library_string, lbs_size + 1 - word_length, word_length) = substr (aword, 1, word_length);

     end build_library_string;





compare_text:
     proc;

dcl	ii		fixed bin;

	ii = 1;

start_compare:
	matched_word_pos = 0;

	do i = ii to cr_used while (matched_word_pos = 0);

	     spec_index = i;

	     if comp_len (spec_index) <= lbs_length
	     then matched_word_pos =
		     index (library_string, substr (compare_string, comp_start (spec_index), comp_len (spec_index)));
	end;					/*
				if matched_word_pos is greater than zero it
				points to the first word matched in the
				library_string.  The word matched in the
				library_string should be right justified.
				A check is made to see and if it is not
				the rest of the compare keys if any are used.
			*/

	if matched_word_pos > 0
	then if (cr_largest - matched_word_pos + 1) ^= comp_len (spec_index)
	     then do;
		     ii = i;
		     goto start_compare;
		end;

     end compare_text;


replace_text:
     proc;


/*	Locate the starting word of the matched phrase
				from the library_string.
			*/

	lbs_sum = lbs_size - lbs_length;		/* starting position of first word */
	i = 0;

	do j = 1 to lbw_used while (lbs_sum < matched_word_pos);

	     i = j;
	     lbs_sum = lbs_sum + lbw_length (i);
	end;

/*
				Move the library source from the last replacement to
				the current replacement to the new source
			*/

/* put skip edit ("REP ->", substr(old_file,repl_offset(spec_index),repl_span(spec_index)),"<-") (a);  */

	if replace_active
	then do;

		move_span = lbw_offset (i) - last_source_offset;
		substr (new_file, next_new_position, move_span) = substr (old_file, last_source_offset, move_span);

	     end;
	else do;

		move_span = lbw_offset (i) - base_offset;
		substr (new_file, next_new_position, move_span) = substr (lib_file, base_offset, move_span);

	     end;

/*
			Insert the replacement text from the source file
		*/

	next_new_position = next_new_position + move_span;
	substr (new_file, next_new_position, repl_span (spec_index)) =
	     substr (old_file, repl_offset (spec_index), repl_span (spec_index));

/*
				Update next_new_position and base_offset for next time
			*/

	next_new_position = next_new_position + repl_span (spec_index);

	if replace_active
	then last_source_offset = lbw_offset (i) + lbw_span (i);
	else base_offset = lbw_offset (lbw_used) + lbw_span (lbw_used);

/*
				Clear library string and library word table
			*/

	library_string = spaces;

	do i = 1 to lbw_max;
	     lbw_table (i) = 0;
	end;

	lbw_used, lbs_length = 0;

     end replace_text;


     end replace_process;








copy_error:
     proc (error_no);

dcl	error_no		fixed bin;
dcl	error_msg		(6) char (40)
			init ("A COBOL word is expected here", "End of text during error recovery",
			"The word BY is expected here", "Null or blank pseudo-text illegal",
			"Unmatched left parenthesis", "Error in finding include file");
dcl	source_line	char (current_line.length) based (current_line.loc);

	call ioa_ ("cobol: COPY REPLACING... ^a on line ^d.", error_msg (error_no), lexeme_env.token.line);

     end copy_error;

/* STRUCTURE */

dcl	01 ecs_info_table	aligned automatic structure like ecs_info_table_;

/* BUILTIN */

dcl	substr		builtin;
dcl	length		builtin;
dcl	addr		builtin;
dcl	index		builtin;


/* CHARACTER */

dcl	text_string	char (256) varying;
dcl	(lib_name, qual_name)
			char (128) varying;		/*[4.0-1]*/
dcl	source_line	char (copy_line_length) based (copy_line_ptr);
dcl	word		char (32) based (lexeme_env.token.string_ptr);
dcl	aword		char (265);
dcl	spaces		char (254) init ((254)" ");
dcl	old_file		char (1048576) based (old_file_ptr);
dcl	new_file		char (1048576) based (new_file_ptr);
						/*[4.0-3]*/
dcl	new_array		(1048576) char (1) based (new_file_ptr);
						/*[4.0-3]*/
dcl	STR		char (SIZE) based (STR_PTR);	/*[4.0-3]*/
dcl	STR_ARRAY		(SIZE) char (1) based (STR_PTR);

/*[5.1-2]*/
dcl	char10		char (10);
dcl	lib_file		char (1048576) based (lib_file_ptr);
dcl	new_line_character	char (1) init ("
");


/* POINTERS */

dcl	expand_cobol_source_area_ptr
			ptr;
dcl	lexeme_ptr	ptr;
dcl	old_file_ptr	ptr;
dcl	new_file_ptr	ptr;
dcl	lib_file_ptr	ptr;
dcl	(p1, p2)		ptr;
dcl	copy_line_ptr	ptr;

/* BIT */

dcl	read_more_text	bit (1);
dcl	replace_active	bit (1);
dcl	command		bit (1);
dcl	fill_sw		bit (1);
dcl	fill_last_ln	bit (1);
dcl	valid_lib		bit (1);

/* ENTRIES */

dcl	ioa_		entry options (variable);
dcl	expand_cobol_source$find_incl_file
			entry (char (*), char (*), ptr, ptr, fixed bin (35));
						/*[4.0-1]*/
dcl	cobol_lexeme$envinit
			entry (ptr);		/*[4.0-1]*/


/* AREA */

dcl	expand_cobol_source_area
			area based (expand_cobol_source_area_ptr);
						/* FIXED BINARY */

dcl	bc		fixed bin (24);
dcl	save_copy_line	fixed bin;
dcl	copy_line_length	fixed bin;
dcl	next_new_position	fixed bin (35);
dcl	cr_used		fixed bin;
dcl	cr_largest	fixed bin;
dcl	comma_sw		fixed bin;
dcl	semi_sw		fixed bin;		/* 550 */
dcl	(span, last_char_nl)
			fixed bin (24);
dcl	(i, j)		fixed bin;
dcl	comp_str_used	fixed bin init (1);
dcl	text_string_length	fixed bin;
dcl	cr_max		fixed bin;
dcl	lbw_max		fixed bin;
dcl	lbw_used		fixed bin;
dcl	cs_max		fixed bin;
dcl	code		fixed bin (35);		/*[4.0-1]*/
dcl	last_copy_line	fixed bin;
dcl	insert_space_span	fixed bin;
dcl	save_copy_column	fixed bin;
dcl	save_source_offset	fixed bin;
dcl	last_source_offset	fixed bin (35);
dcl	base_offset	fixed bin;
dcl	lbs_size		fixed bin;
dcl	lbs_length	fixed bin;
dcl	lbs_sum		fixed bin;
dcl	word_length	fixed bin;
dcl	move_span		fixed bin;
dcl	matched_word_pos	fixed bin;
dcl	spec_index	fixed bin;		/*[4.0-3]*/
dcl	(state_span, state_pos, SIZE, CR_LOC)
			fixed bin,
	STR_PTR		ptr;

/*

*/


/* Compare String */

dcl	compare_string	char (cs_max) aligned based (cs_ptr);

dcl /* Copy Replaceing Table */
	1 cr_table	(cr_max) aligned based (cr_ptr),
	  2 comp_start	unaligned fixed bin,	/* begin char pos in compare string */
	  2 comp_len	unaligned fixed bin,	/* length of compare key in string */
	  2 repl_offset	unaligned fixed bin (35),	/* offset of replacement text in source */
	  2 repl_span	unaligned fixed bin (35);	/* span of replacement text in source */


dcl /* Library Word Table */
	1 lbw_table	(lbw_max) aligned based (lbw_ptr),
	  2 lbw_length	unaligned fixed bin,	/* length of word */
	  2 lbw_offset	unaligned fixed bin (35),	/* offset of word in library */
	  2 lbw_span	unaligned fixed bin;	/* span of word in library */


dcl /* Control table for compare string */
	1 cs_control,
	  2 cs_ptr	ptr,
	  2 cs_parity	fixed bin init (1),
	  2 cs_cap	fixed bin init (100),	/* 400 bytes */
	  2 cs_incr	fixed bin init (10);	/* increase by 40 bytes */

dcl /* Control table for library word table */
	1 lbw_control,
	  2 lbw_ptr	ptr,
	  2 lbw_parity	fixed bin init (1),
	  2 lbw_cap	fixed bin init (40),	/* room for 25 library words */
	  2 lbw_incr	fixed bin init (10);	/* add space for 5 more library words */

dcl /* Control Table for Copy Replaceing Table */
	1 cr_control,
	  2 cr_ptr	ptr,
	  2 cr_parity	fixed bin initial (1),
	  2 cr_cap	fixed bin initial (60),	/* room for 25 entries in cr_table */
	  2 cr_incr	fixed bin initial (15);	/* increase cr_table by 5 entries */
						/*

*/
%include cobol_lexeme_env;
%include cobol_ecs_info;
     end cobol_expand_source_;
