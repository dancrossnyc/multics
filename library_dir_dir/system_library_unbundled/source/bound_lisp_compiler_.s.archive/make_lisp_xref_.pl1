/* **************************************************************
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1973 *
   *                                                            *
   ************************************************************** */
/* protect old protection notice */
/* (c) Copyright 1973, Massachusetts Institute of Technology.
       All rights reserved.					*/

make_lisp_xref_:
     procedure (a_table_p, stream);

declare	a_table_p		pointer parameter,
	stream		ptr parameter;

/* this procedure puts useful information about functions
   defined and referenced at the end of a listing made
   by make_lisp_listing.

   Written 1 Dec 1973 by DAM
   Modified 18 January 1980 by J. Spencer Love for PL/1 compiler changes.
 */

declare	tablep		pointer,
	(i, j, k, m, n)	fixed bin,
	null_name		char (4) varying static init (""),
	tp		unaligned pointer,
	defx		fixed bin,
	linkx		fixed bin,
	num_funs_def	fixed bin init (0),
	num_fns_ref	fixed bin init (0);

declare	1 name_struc	based aligned,
	  2 len		fixed bin,
	  2 name		char (0 refer (len)) unaligned;

declare	1 link_info	(1000) aligned based (link_table_ptr),
	  2 address	fixed bin (14) unaligned,
	  2 snap		bit (1) unaligned,
	  2 constant	bit (1) unaligned,
	  2 f		bit (1) unaligned,
	  2 nargs		bit (9) unaligned,
	  2 pad		bit (9) unaligned;		/* PL/I bug - can take out when EIS compiler is installed */

declare	1 table		aligned structure based (tablep),
	  2 stack_height	fixed bin (17),		/* add to ap offset to get 2 * temp number */
	  2 atom_table_size fixed bin,		/* size of atom_table array */
	  2 link_table_ptr	unaligned pointer,		/* -> array of itp link info */
	  2 link_table_lbound
			fixed bin (18),		/* first lp| offset of itp link */
	  2 link_table_hbound
			fixed bin (18),		/* last lp| offset of itp link */
	  2 array_link_table_ptr
			unaligned pointer,		/* -> array of array_link control words */
	  2 array_link_table_lbound
			fixed bin (18),		/* first lp| offset of array link */
	  2 array_link_table_hbound
			fixed bin (18),		/* last lp| offset of array link */
	  2 definition_table_size
			fixed bin,		/* size of definition_table array */
	  2 constant_table_size
			fixed bin,		/* size of constant_table array */
	  2 constant_table_lbound
			fixed bin (18),		/* first lp| offset of constant */
	  2 constant_table_hbound
			fixed bin (18),		/* last lp| offset of constant */
	  2 bind_stack_ptr	fixed bin,		/* index of first unused entry in bind_stack */
	  2 arg_twiddle	fixed bin (18),		/* eax5 hacker */
	  2 seg_ptr	unaligned pointer,		/* -> text section */
	  2 bind_stack	(100) fixed bin,		/* table of sizes of nested binding blocks */
	  2 atom_table	(0 refer (atom_table_size)),	/* pointers to atomic symbols */
	    3 ptr_to_name	unaligned pointer,		/* -> varying string */
	  2 definition_table
			(0 refer (definition_table_size)),
						/* entries defined... */
	    3 arg_pdl	bit (18) unaligned,		/* number of pdl cells occupied by args */
	    3 entrypoint	bit (18) unaligned,		/* location of entry */
	    3 ptr_to_name	unaligned pointer,		/* -> varying string */
	  2 constant_table	(0 refer (constant_table_size)),
	    3 atom_table_index
			fixed bin;		/* 0 if this constant not an atom */

declare	(divide, mod, addr, lbound, hbound)
			builtin;

declare	ioa_$ioa_switch	entry options (variable);


/* BEGIN */

	tablep = a_table_p;
	call list_defined_functions ();
	call list_referenced_functions ();
	return;

list_defined_functions:
     procedure ();

declare	(def_sn, def_sv)	fixed bin dimension (definition_table_size);
						/* definitions sorted by (name, value) */

	call ioa_$ioa_switch (stream, "^3-Functions Defined^2/Name^3-Offset^2-Offset^2-Name^2/");

/* sort the definitions by name and by value. */

	do defx = 1 to hbound (def_sn, 1);
	     def_sn (defx) = defx;
	     def_sv (defx) = defx;
	end;

/* simultaneous shell sort by name (def_sn) and by entry address (def_sv) */

	do m = divide (hbound (def_sn, 1), 2, 17, 0) repeat m - 1 while (m > 0);
	     n = hbound (def_sn, 1) - m;
	     do i = lbound (def_sn, 1) by 1 while (i <= n);
		if definition_table (def_sn (i)).ptr_to_name -> name
		     > definition_table (def_sn (i + m)).ptr_to_name -> name then do;
			k = def_sn (i);
			def_sn (i) = def_sn (i + m);
			def_sn (i + m) = k;
		     end;

		if definition_table (def_sv (i)).entrypoint > definition_table (def_sv (i + m)).entrypoint then do;
			k = def_sv (i);
			def_sv (i) = def_sv (i + m);
			def_sv (i + m) = k;
		     end;
	     end;
	end;

/* now print it out */

	do defx = lbound (def_sn, 1) to hbound (def_sn, 1);
	     call ioa_$ioa_switch (stream, "^29a^4x^o^2-^3x^o^2-^a", definition_table (def_sn (defx)).ptr_to_name -> name,
		fixed (definition_table (def_sn (defx)).entrypoint, 18),
		fixed (definition_table (def_sv (defx)).entrypoint, 18),
		definition_table (def_sv (defx)).ptr_to_name -> name);
	end;
     end list_defined_functions;

list_referenced_functions:
     procedure ();					/* now we generate a list of all the functions referenced */

declare	fn_ref		unaligned pointer dimension (3 + divide (link_table_hbound - link_table_lbound + 2, 2, 17, 0));
						/* -> names of referenced functions */
	call ioa_$ioa_switch (stream, "^5/^3-Functions Referenced^/");

	do linkx = lbound (fn_ref, 1) to hbound (fn_ref, 1) - 3;
	     if link_info (linkx).constant
	     then if link_info (linkx).snap
		then if link_info (linkx).address >= constant_table_lbound
		     then if link_info (linkx).address <= constant_table_hbound
			then if constant_table (1
				+ divide (link_info (linkx).address - constant_table_lbound, 2, 17, 0))
				.atom_table_index ^= 0 then do;
						/* if it meets all these conditions, it's OK to list */
				     num_fns_ref = num_fns_ref + 1;
				     fn_ref (num_fns_ref) =
					atom_table (
					constant_table (1
					+ divide (link_info (linkx).address - constant_table_lbound, 2, 17, 0))
					.atom_table_index).ptr_to_name;
				end;
	end;

/* we have found the referenced functions.  Next step is to sort this list */

	do m = divide (num_fns_ref, 2, 17, 0) by -1 while (m > 0);
	     n = num_fns_ref - m;
	     do i = 1 by 1 while (i <= n);
		if fn_ref (i) -> name > fn_ref (i + m) -> name then do;
			tp = fn_ref (i);
			fn_ref (i) = fn_ref (i + m);
			fn_ref (i + m) = tp;
		     end;
	     end;
	end;

/* now print it out, in three columns */

	n = divide (num_fns_ref, 3, 17, 0);
	go to case (num_fns_ref - 3 * n);

case (2):
	fn_ref (num_fns_ref + 1) = addr (null_name);
	n = n + 1;
	go to case_x;

case (1):						/* need two gaps in table.  have to open one up */
	n = n + 1;
	fn_ref (num_fns_ref + 2) = addr (null_name);
	do i = num_fns_ref + 1 by -1 to 2 * n + 1;
	     fn_ref (i) = fn_ref (i - 1);
	end;
	fn_ref (2 * n) = addr (null_name);
	go to case_x;

case (0):
case_x:
	do i = 1 by 1 while (i <= n);
	     call ioa_$ioa_switch (stream, "^38a^2x^38a^2x^a", fn_ref (i) -> name, fn_ref (i + n) -> name,
		fn_ref ((i + n) + n) -> name);
	end;
     end list_referenced_functions;
     end;
