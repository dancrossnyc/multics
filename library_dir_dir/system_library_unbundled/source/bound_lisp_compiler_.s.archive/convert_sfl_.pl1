/* **************************************************************
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1973 *
   *                                                            *
   ************************************************************** */
convert_sfl_:
	proc(input_value, precision) returns(char(*));



dcl
	F(-128:127) fixed bin(35) int static init(
/* -128 */	2938735877,
/* -127 */	5877471754,
/* -126 */	11754943508,
/* -125 */	2350988701,
/* -124 */	4701977403,
/* -123 */	9403954806,
/* -122 */	1880790961,
/* -121 */	3761581922,
/* -120 */	7523163845,
/* -119 */	1504632769,
/* -118 */	3009265538,
/* -117 */	6018531076,
/* -116 */	1203706215,
/* -115 */	2407412430,
/* -114 */	4814824860,
/* -113 */	9629649721,
/* -112 */	1925929944,
/* -111 */	3851859888,
/* -110 */	7703719777,
/* -109 */	1540743955,
/* -108 */	3081487911,
/* -107 */	6162975822,
/* -106 */	1232595164,
/* -105 */	2465190328,
/* -104 */	4930380657,
/* -103 */	9860761315,
/* -102 */	1972152263,
/* -101 */	3944304526,
/* -100 */	7888609052,
/* -99 */		1577721810,
/* -98 */		3155443620,
/* -97 */		6310887241,
/* -96 */		1262177448,
/* -95 */		2524354896,
/* -94 */		5048709793,
/* -93 */		10097419586,
/* -92 */		2019483917,
/* -91 */		4038967834,
/* -90 */		8077935669,
/* -89 */		1615587133,
/* -88 */		3231174267,
/* -87 */		6462348535,
/* -86 */		1292469707,
/* -85 */		2584939414,
/* -84 */		5169878828,
/* -83 */		10339757656,
/* -82 */		2067951531,
/* -81 */		4135903062,
/* -80 */		8271806125,
/* -79 */		1654361225,
/* -78 */		3308722450,
/* -77 */		6617444900,
/* -76 */		1323488980,
/* -75 */		2646977960,
/* -74 */		5293955920,
/* -73 */		10587911840,
/* -72 */		2117582368,
/* -71 */		4235164736,
/* -70 */		8470329472,
/* -69 */		1694065894,
/* -68 */		3388131789,
/* -67 */		6776263578,
/* -66 */		1355252715,
/* -65 */		2710505431,
/* -64 */		5421010862,
/* -63 */		10842021724,
/* -62 */		2168404344,
/* -61 */		4336808689,
/* -60 */		8673617379,
/* -59 */		1734723475,
/* -58 */		3469446951,
/* -57 */		6938893903,
/* -56 */		1387778780,
/* -55 */		2775557561,
/* -54 */		5551115123,
/* -53 */		11102230246,
/* -52 */		2220446049,
/* -51 */		4440892098,
/* -50 */		8881784197,
/* -49 */		1776356839,
/* -48 */		3552713678,
/* -47 */		7105427357,
/* -46 */		1421085471,
/* -45 */		2842170943,
/* -44 */		5684341886,
/* -43 */		11368683772,
/* -42 */		2273736754,
/* -41 */		4547473508,
/* -40 */		9094947017,
/* -39 */		1818989403,
/* -38 */		3637978807,
/* -37 */		7275957614,
/* -36 */		1455191522,
/* -35 */		2910383045,
/* -34 */		5820766091,
/* -33 */		11641532182,
/* -32 */		2328306436,
/* -31 */		4656612873,
/* -30 */		9313225746,
/* -29 */		1862645149,
/* -28 */		3725290298,
/* -27 */		7450580596,
/* -26 */		1490116119,
/* -25 */		2980232238,
/* -24 */		5960464477,
/* -23 */		1192092895,
/* -22 */		2384185791,
/* -21 */		4768371582,
/* -20 */		9536743164,
/* -19 */		1907348632,
/* -18 */		3814697265,
/* -17 */		7629394531,
/* -16 */		1525878906,
/* -15 */		3051757812,
/* -14 */		6103515625,
/* -13 */		1220703125,
/* -12 */		2441406250,
/* -11 */		4882812500,
/* -10 */		9765625000,
/* -9 */		1953125000,
/* -8 */		3906250000,
/* -7 */		7812500000,
/* -6 */		1562500000,
/* -5 */		3125000000,
/* -4 */		6250000000,
/* -3 */		1250000000,
/* -2 */		2500000000,
/* -1 */		5000000000,
/* 0 */		10000000000,
/* 1 */		2000000000,
/* 2 */		4000000000,
/* 3 */		8000000000,
/* 4 */		1600000000,
/* 5 */		3200000000,
/* 6 */		6400000000,
/* 7 */		1280000000,
/* 8 */		2560000000,
/* 9 */		5120000000,
/* 10 */		10240000000,
/* 11 */		2048000000,
/* 12 */		4096000000,
/* 13 */		8192000000,
/* 14 */		1638400000,
/* 15 */		3276800000,
/* 16 */		6553600000,
/* 17 */		1310720000,
/* 18 */		2621440000,
/* 19 */		5242880000,
/* 20 */		10485760000,
/* 21 */		2097152000,
/* 22 */		4194304000,
/* 23 */		8388608000,
/* 24 */		1677721600,
/* 25 */		3355443200,
/* 26 */		6710886400,
/* 27 */		1342177280,
/* 28 */		2684354560,
/* 29 */		5368709120,
/* 30 */		10737418240,
/* 31 */		2147483648,
/* 32 */		4294967296,
/* 33 */		8589934592,
/* 34 */		1717986918,
/* 35 */		3435973836,
/* 36 */		6871947673,
/* 37 */		1374389534,
/* 38 */		2748779069,
/* 39 */		5497558138,
/* 40 */		10995116277,
/* 41 */		2199023255,
/* 42 */		4398046511,
/* 43 */		8796093022,
/* 44 */		1759218604,
/* 45 */		3518437208,
/* 46 */		7036874417,
/* 47 */		1407374883,
/* 48 */		2814749767,
/* 49 */		5629499534,
/* 50 */		11258999068,
/* 51 */		2251799813,
/* 52 */		4503599627,
/* 53 */		9007199254,
/* 54 */		1801439850,
/* 55 */		3602879701,
/* 56 */		7205759403,
/* 57 */		1441151880,
/* 58 */		2882303761,
/* 59 */		5764607523,
/* 60 */		11529215046,
/* 61 */		2305843009,
/* 62 */		4611686018,
/* 63 */		9223372036,
/* 64 */		1844674407,
/* 65 */		3689348814,
/* 66 */		7378697629,
/* 67 */		1475739525,
/* 68 */		2951479051,
/* 69 */		5902958103,
/* 70 */		1180591620,
/* 71 */		2361183241,
/* 72 */		4722366482,
/* 73 */		9444732965,
/* 74 */		1888946593,
/* 75 */		3777893186,
/* 76 */		7555786372,
/* 77 */		1511157274,
/* 78 */		3022314549,
/* 79 */		6044629098,
/* 80 */		1208925819,
/* 81 */		2417851639,
/* 82 */		4835703278,
/* 83 */		9671406556,
/* 84 */		1934281311,
/* 85 */		3868562622,
/* 86 */		7737125245,
/* 87 */		1547425049,
/* 88 */		3094850098,
/* 89 */		6189700196,
/* 90 */		1237940039,
/* 91 */		2475880078,
/* 92 */		4951760157,
/* 93 */		9903520314,
/* 94 */		1980704062,
/* 95 */		3961408125,
/* 96 */		7922816251,
/* 97 */		1584563250,
/* 98 */		3169126500,
/* 99 */		6338253001,
/* 100 */		1267650600,
/* 101 */		2535301200,
/* 102 */		5070602400,
/* 103 */		10141204801,
/* 104 */		2028240960,
/* 105 */		4056481920,
/* 106 */		8112963841,
/* 107 */		1622592768,
/* 108 */		3245185536,
/* 109 */		6490371073,
/* 110 */		1298074214,
/* 111 */		2596148429,
/* 112 */		5192296858,
/* 113 */		10384593717,
/* 114 */		2076918743,
/* 115 */		4153837486,
/* 116 */		8307674973,
/* 117 */		1661534994,
/* 118 */		3323069989,
/* 119 */		6646139978,
/* 120 */		1329227995,
/* 121 */		2658455991,
/* 122 */		5316911983,
/* 123 */		10633823966,
/* 124 */		2126764793,
/* 125 */		4253529586,
/* 126 */		8507059173,
/* 127 */		1701411834);

dcl
	E(-128:127) fixed bin int static init(
/* -128 */		-59,
/* -127 */		-59,
/* -126 */		-59,
/* -125 */		-58,
/* -124 */		-58,
/* -123 */		-58,
/* -122 */		-57,
/* -121 */		-57,
/* -120 */		-57,
/* -119 */		-56,
/* -118 */		-56,
/* -117 */		-56,
/* -116 */		-55,
/* -115 */		-55,
/* -114 */		-55,
/* -113 */		-55,
/* -112 */		-54,
/* -111 */		-54,
/* -110 */		-54,
/* -109 */		-53,
/* -108 */		-53,
/* -107 */		-53,
/* -106 */		-52,
/* -105 */		-52,
/* -104 */		-52,
/* -103 */		-52,
/* -102 */		-51,
/* -101 */		-51,
/* -100 */		-51,
/* -99 */			-50,
/* -98 */			-50,
/* -97 */			-50,
/* -96 */			-49,
/* -95 */			-49,
/* -94 */			-49,
/* -93 */			-49,
/* -92 */			-48,
/* -91 */			-48,
/* -90 */			-48,
/* -89 */			-47,
/* -88 */			-47,
/* -87 */			-47,
/* -86 */			-46,
/* -85 */			-46,
/* -84 */			-46,
/* -83 */			-46,
/* -82 */			-45,
/* -81 */			-45,
/* -80 */			-45,
/* -79 */			-44,
/* -78 */			-44,
/* -77 */			-44,
/* -76 */			-43,
/* -75 */			-43,
/* -74 */			-43,
/* -73 */			-43,
/* -72 */			-42,
/* -71 */			-42,
/* -70 */			-42,
/* -69 */			-41,
/* -68 */			-41,
/* -67 */			-41,
/* -66 */			-40,
/* -65 */			-40,
/* -64 */			-40,
/* -63 */			-40,
/* -62 */			-39,
/* -61 */			-39,
/* -60 */			-39,
/* -59 */			-38,
/* -58 */			-38,
/* -57 */			-38,
/* -56 */			-37,
/* -55 */			-37,
/* -54 */			-37,
/* -53 */			-37,
/* -52 */			-36,
/* -51 */			-36,
/* -50 */			-36,
/* -49 */			-35,
/* -48 */			-35,
/* -47 */			-35,
/* -46 */			-34,
/* -45 */			-34,
/* -44 */			-34,
/* -43 */			-34,
/* -42 */			-33,
/* -41 */			-33,
/* -40 */			-33,
/* -39 */			-32,
/* -38 */			-32,
/* -37 */			-32,
/* -36 */			-31,
/* -35 */			-31,
/* -34 */			-31,
/* -33 */			-31,
/* -32 */			-30,
/* -31 */			-30,
/* -30 */			-30,
/* -29 */			-29,
/* -28 */			-29,
/* -27 */			-29,
/* -26 */			-28,
/* -25 */			-28,
/* -24 */			-28,
/* -23 */			-27,
/* -22 */			-27,
/* -21 */			-27,
/* -20 */			-27,
/* -19 */			-26,
/* -18 */			-26,
/* -17 */			-26,
/* -16 */			-25,
/* -15 */			-25,
/* -14 */			-25,
/* -13 */			-24,
/* -12 */			-24,
/* -11 */			-24,
/* -10 */			-24,
/* -9 */			-23,
/* -8 */			-23,
/* -7 */			-23,
/* -6 */			-22,
/* -5 */			-22,
/* -4 */			-22,
/* -3 */			-21,
/* -2 */			-21,
/* -1 */			-21,
/* 0 */			-21,
/* 1 */			-20,
/* 2 */			-20,
/* 3 */			-20,
/* 4 */			-19,
/* 5 */			-19,
/* 6 */			-19,
/* 7 */			-18,
/* 8 */			-18,
/* 9 */			-18,
/* 10 */			-18,
/* 11 */			-17,
/* 12 */			-17,
/* 13 */			-17,
/* 14 */			-16,
/* 15 */			-16,
/* 16 */			-16,
/* 17 */			-15,
/* 18 */			-15,
/* 19 */			-15,
/* 20 */			-15,
/* 21 */			-14,
/* 22 */			-14,
/* 23 */			-14,
/* 24 */			-13,
/* 25 */			-13,
/* 26 */			-13,
/* 27 */			-12,
/* 28 */			-12,
/* 29 */			-12,
/* 30 */			-12,
/* 31 */			-11,
/* 32 */			-11,
/* 33 */			-11,
/* 34 */			-10,
/* 35 */			-10,
/* 36 */			-10,
/* 37 */			-9,
/* 38 */			-9,
/* 39 */			-9,
/* 40 */			-9,
/* 41 */			-8,
/* 42 */			-8,
/* 43 */			-8,
/* 44 */			-7,
/* 45 */			-7,
/* 46 */			-7,
/* 47 */			-6,
/* 48 */			-6,
/* 49 */			-6,
/* 50 */			-6,
/* 51 */			-5,
/* 52 */			-5,
/* 53 */			-5,
/* 54 */			-4,
/* 55 */			-4,
/* 56 */			-4,
/* 57 */			-3,
/* 58 */			-3,
/* 59 */			-3,
/* 60 */			-3,
/* 61 */			-2,
/* 62 */			-2,
/* 63 */			-2,
/* 64 */			-1,
/* 65 */			-1,
/* 66 */			-1,
/* 67 */			0,
/* 68 */			0,
/* 69 */			0,
/* 70 */			1,
/* 71 */			1,
/* 72 */			1,
/* 73 */			1,
/* 74 */			2,
/* 75 */			2,
/* 76 */			2,
/* 77 */			3,
/* 78 */			3,
/* 79 */			3,
/* 80 */			4,
/* 81 */			4,
/* 82 */			4,
/* 83 */			4,
/* 84 */			5,
/* 85 */			5,
/* 86 */			5,
/* 87 */			6,
/* 88 */			6,
/* 89 */			6,
/* 90 */			7,
/* 91 */			7,
/* 92 */			7,
/* 93 */			7,
/* 94 */			8,
/* 95 */			8,
/* 96 */			8,
/* 97 */			9,
/* 98 */			9,
/* 99 */			9,
/* 100 */			10,
/* 101 */			10,
/* 102 */			10,
/* 103 */			10,
/* 104 */			11,
/* 105 */			11,
/* 106 */			11,
/* 107 */			12,
/* 108 */			12,
/* 109 */			12,
/* 110 */			13,
/* 111 */			13,
/* 112 */			13,
/* 113 */			13,
/* 114 */			14,
/* 115 */			14,
/* 116 */			14,
/* 117 */			15,
/* 118 */			15,
/* 119 */			15,
/* 120 */			16,
/* 121 */			16,
/* 122 */			16,
/* 123 */			16,
/* 124 */			17,
/* 125 */			17,
/* 126 */			17,
/* 127 */			18);


dcl
	input_value float bin(27),
	precision fixed bin,
	1 b_value based(addr(input_value)),
	   2 e fixed bin(7) unal,
	   2 bmantissa fixed bin(27) unal,
	mantissa fixed bin(28),
	two27 fixed bin(35) int static init(134217728),
	multiply builtin,
	divide builtin,
	v fixed bin(63),
	v1 fixed bin(63),
	factor fixed bin(63),
	round_factor fixed bin(35),
	two26 fixed bin(35) int static init(67108864),
	trail fixed bin,
	mostsig fixed bin,
	i fixed bin,
	n fixed bin,
	mod builtin,
	digits(0:9) char(1) int static init("0","1","2","3","4","5","6","7","8","9"),
	digit(11) char(1),
	Expt fixed bin,
	point fixed bin,
	min builtin,
	value char(32) var,
	substr builtin;


	if bmantissa=0 then return("0.0");

	if bmantissa<0 then mantissa = - bmantissa;
	else mantissa = bmantissa;

	v = divide(multiply(mantissa, F(e), 63, 0) + two26, two27, 63, 0);

	factor = 1;

	do i = 1 to precision;
	   factor = factor * 10;
	   if factor>v then go to rounded;
	   end;

	factor = factor * 10;

	round_factor = 5;

	do i = 1 to 10 while (factor<=v);
	   factor = factor * 10;
	   round_factor = round_factor * 10;
	   end;

	v = v + round_factor;
	v = v - mod(v, 2*round_factor);

rounded:
	trail, mostsig = 0;

	do i = 1 to 11;
	   n = mod(v, 10);
	   if n=0 then
	      if mostsig=0 then trail = i;
	      else;
	   else mostsig = i;
	   digit(i) = digits(n);
	   v = divide(v, 10, 63, 0);
	   end;

	Expt = E(e) + 11;

	point = mostsig + Expt;

	value = "";

	if point<=precision & (-Expt-trail)<=precision then do;

	   do i = max(mostsig, -Expt) to min(trail+1, -Expt) by -1;
	      if i=-Expt then value = value||".";
	      if i<trail+1 | i>mostsig then value = value||"0";
	      else value = value||digit(i);
	      end;

	   if substr(value,1,1)="." then value = "0"||value;
	   else if i=mostsig-point then value = value||".0";

	   if bmantissa<0 then value = "-"||value;

	   return(value);

	   end;


	value = value || digit(mostsig);

	do i = mostsig-1 to trail+1 by -1;
	   if i=mostsig-1 then value = value || ".";
	   value = value || digit(i);
	   end;

	value = value || "e";

	point = point - 1;

	if point<0 then do;
	   value = value || "-";
	   point = - point;
	   end;

	if point<10 then value = value || digits(point);
	else value = value || digits(divide(point, 10, 17, 0)) || digits(mod(point, 10));

	if bmantissa<0 then value = "-" || value;

	return(value);

end convert_sfl_;
