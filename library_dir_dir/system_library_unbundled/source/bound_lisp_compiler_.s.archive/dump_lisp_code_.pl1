/* **************************************************************
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1973 *
   *                                                            *
   ************************************************************** */
/* protect old protection notice */
/* (c) Copyright 1973, Massachusetts Institute of Technology.
       All rights reserved.					*/

dump_lisp_code_: proc (start, length, stream, tablep);

/* modified 73.11.24 by DAM for new subr blocks */

dcl
	start fixed bin,
	length fixed bin,
	stream ptr,
	estimated_number_of_labels fixed bin,
	tablep pointer;

dcl make_ioa_not_lose fixed bin(35);	/* I have to do this because someone gratuitously
				   changed ioa_ so that it no longer works properly */
dcl (convert, addr, divide, fixed, hbound, min, substr, unspec) builtin;

	/* declare various tables which are based on tablep */

dcl 1 table aligned structure based(tablep),
    2 stack_height fixed bin(17),			/* add to ap offset to get 2 * temp number */
    2 atom_table_size fixed bin,			/* size of atom_table array */
    2 link_table_ptr unaligned pointer,		/* -> array of itp link info */
    2 link_table_lbound fixed bin(18),			/* first lp| offset of itp link */
    2 link_table_hbound fixed bin(18),			/* last lp| offset of itp link */
    2 array_link_table_ptr unaligned pointer,		/* -> array of array_link control words */
    2 array_link_table_lbound fixed bin(18),		/* first lp| offset of array link */
    2 array_link_table_hbound fixed bin(18),		/* last lp| offset of array link */
    2 definition_table_size fixed bin,			/* size of definition_table array */
    2 constant_table_size fixed bin,			/* size of constant_table array */
    2 constant_table_lbound fixed bin(18),		/* first lp| offset of constant */
    2 constant_table_hbound fixed bin(18),		/* last lp| offset of constant */
    2 bind_stack_ptr fixed bin,			/* index of first unused entry in bind_stack */
    2 arg_twiddle fixed bin(18),			/* eax5 hacker */
    2 seg_ptr unaligned pointer,			/* -> text section */
    2 bind_stack (100) fixed bin,			/* table of sizes of nested binding blocks */
   2 atom_table (0 refer(atom_table_size)),		/* pointers to atomic symbols */
      3 ptr_to_name unaligned pointer,			/* -> varying string */
    2 definition_table(0 refer(definition_table_size)),	/* entries defined... */
      3 arg_pdl bit(18) unaligned,			/* number of pdl cells occupied by args */
      3 entrypoint bit(18) unaligned,			/* location of entry */
      3 ptr_to_name unaligned pointer,			/* -> varying string */
    2 constant_table(0 refer(constant_table_size)),
      3 atom_table_index fixed bin;			/* 0 if this constant not an atom */

%include lisp_nums;

	/* first pass - construct table of all locations referenced
	   by transfer instructions.  Since we don't know how big to make this
	   table, we guess and allocate it in a begin block.  If it turns
	   out to be too small, which shouldn't happen very often,
	   we will have to escape from the begin block,  and start over
	   with a bigger table */

	estimated_number_of_labels = 1 + divide(length, 10, 17, 0);
	go to allocate_tra_table;

reallocate_tra_table:		/* come here if it proved to be too small */

	estimated_number_of_labels = estimated_number_of_labels * 2;

allocate_tra_table:  begin;

dcl 1 tra_table aligned automatic structure,
    2 number_of_labels fixed bin init(0),	/* number of entries in use */
    2 label(estimated_number_of_labels) structure,/* array of entries */
      3 address fixed bin(18),		/* location of label */
      3 stack_ht fixed bin(18),		/* value of stack_height ta tra to label, -1 if not yet known */
      3 tra_from fixed bin(18),		/* location that transfers to this label */
      3 save_bind_stack_ptr fixed bin,		/* Value of binding stack ptr */
      3 tra_from_others bit(1);		/* 1 => it is not the only one */

dcl
	words(0:start+length-1) bit(36) aligned based(base),

	1 word_structure(0:start+length-1) aligned based(base),
	  2 bit3 bit(3) unal,
	  2 addr1 fixed bin(14) unal,
	  2 addr2 fixed bin(17) unal,

	addrf fixed bin(17) unaligned based(addr(words(ic))),	/* address field of current instruction */
	tag1 fixed bin,
	address_1 fixed bin,
	address_2 fixed bin,

	base pointer init(table.seg_ptr),

	mll_internal_error condition,

	curlabx fixed bin,				/* index in tra_table of next label we expect to see */
	curlabaddr fixed bin(18),			/* address of that label */
	others char(8),

	ioa_$ioa_switch entry options(variable),
	convert_sfl_ entry(bit(36) aligned, fixed bin) returns(char(*)),
	dump_lisp_instruction_ entry(bit(36) aligned, fixed bin(18), pointer, pointer) returns(char(*)),
	dump_lisp_binding_word_ entry(bit(36) aligned, fixed bin(18), pointer) returns(char(*)),

	bind_operator int static bit(36) init("001000000000010000010111010001010000"b),
	bb_size fixed bin(18),
	ref fixed bin(18),
	(labu, labx, labh) fixed bin,			/* for binary seach of label table */
	ic fixed bin(18);

	do ic = start repeat(ic+1) while(ic <= start+length-1);

	   if (substr(words(ic), 19, 18) & "111111000011111111"b) = "110000000000000100"b		/* conditional transfer,ic */
	    | substr(words(ic), 19, 18) = "111001000000000100"b then do;			/* unconditional transfer,ic */

		ref = ic + addrf;			/* location transferred to */

		/* search label array for previous instance or place to put this one */

		labu = 1;
		labh = number_of_labels;
		do while(labh >= labu);
		   labx = labu + divide(labh-labu, 2, 17, 0);
		   if label(labx).address = ref then go to found_label;
		   else if label(labx).address < ref then labu = labx+1;
		   else labh = labx-1;
		   end;
		/* now labh < label < labu */

		number_of_labels = number_of_labels + 1;		/* create new lanbel */
		if number_of_labels > hbound(label, 1)
		then go to reallocate_tra_table;		/* go get bigger table */

		do labx = number_of_labels by -1 while(labx > labu);	/* move upper part of table up 1 to open new slot in right place */
		   unspec(label(labx)) = unspec(label(labx-1));
		   end;

		/* fill in new label */

		label(labx).address = ref;
		label(labx).stack_ht = -1;		/* not yet known */
		label(labx).save_bind_stack_ptr = -1;	/* ditto */
		label(labx).tra_from = ic;
		label(labx).tra_from_others = "0"b;
		go to nextloop;

found_label:	/* another reference to previously-noted label */

		label(labx).tra_from_others = "1"b;

nextloop:		end;

	     else;		/* ignore instructions other than transfer instructions */

	     end;


	/* second pass - scan through code and display it */

	curlabx = 1;
	if number_of_labels = 0 then curlabaddr = -1;
	else curlabaddr = label(1).address;

	do ic = start repeat(ic+1) while(ic <= start+length-1);

	     /* insert a label if one is called for */

	     if ic = curlabaddr then do;
		if label(curlabx).stack_ht >= 0
		then stack_height = label(curlabx).stack_ht;
		if label(curlabx).save_bind_stack_ptr >= 0
		then bind_stack_ptr = label(curlabx).save_bind_stack_ptr;
		if label(curlabx).tra_from_others then others = ", et al.";
		else others = "";
		call ioa_$ioa_switch(stream, "tra from ^o^a", label(curlabx).tra_from, others);
		curlabx = curlabx + 1;
		if curlabx <= number_of_labels then curlabaddr = label(curlabx).address;
		else curlabaddr = -1;
		end;

	     if words(ic) = ""b then call ioa_$ioa_switch(stream, "^6o^-^w", ic, words(ic));
	     else if words(ic) = fixnum_type
		then do;
			call ioa_$ioa_switch(stream, "^6o^-^w^-"" fixed constant", ic, words(ic));
			call ioa_$ioa_switch(stream, "^6o^-^w^-dec     ^d", fixed(ic+1,17,0), words(ic+1), convert(make_ioa_not_lose, words(ic+1)));
			ic = ic + 1;
		     end;
	     else if words(ic) = flonum_type
		then do;
			call ioa_$ioa_switch(stream, "^6o^-^w^-"" float constant", ic, words(ic));
			call ioa_$ioa_switch(stream, "^6o^-^w^-dec     ^a", fixed(ic+1,17,0), words(ic+1), convert_sfl_(words(ic+1), 8));
			ic = ic+1;
		     end;

	     else do;
		     call ioa_$ioa_switch(stream, "^6o^-^w^-^a", ic, words(ic), dump_lisp_instruction_(words(ic), ic, tablep, addr(tra_table)));

		     if words(ic) = bind_operator
		     then if ic < start+length
			then do;
			     /* adjust stack height and push bind stack */

			     bb_size = fixed(substr(words(ic+1), 1, 18), 18);
			     stack_height = stack_height + bb_size;
			     if bind_stack_ptr > hbound(bind_stack, 1) then signal mll_internal_error;
			     bind_stack(bind_stack_ptr) = bb_size;
			     bind_stack_ptr = bind_stack_ptr + 1;

			     call ioa_$ioa_switch (stream, "^6o^-^w", fixed(ic+1,17,0), words(ic+1));

			     do ic = ic + 2 to min(start+length-1,fixed(substr(words(ic+1),1,16),17,0)+ic+1);
				tag1 = fixed(word_structure(ic).bit3, 3, 0);
				address_1 = word_structure(ic).addr1;
				address_2 = word_structure(ic).addr2;
				call ioa_$ioa_switch(stream, "^6o^-^1o ^5a ^6a^-^a",
						ic, tag1, substr(cv_word(address_1),8,5), substr(cv_word(address_2),7,6),
						dump_lisp_binding_word_(words(ic), ic, tablep));
			     end;

			     ic = ic - 1;	/* undo do loop slightly. */

			end;
		end;
	end;

	return;

cv_word:	proc(word) returns(char(12));

dcl ioa_$rsnpnnl entry options(variable),
    word fixed bin,
    temp char(12),
    templ fixed bin;

	call ioa_$rsnpnnl("^w",temp,templ,word);
	return (temp);

end cv_word;

end allocate_tra_table;

end dump_lisp_code_;
