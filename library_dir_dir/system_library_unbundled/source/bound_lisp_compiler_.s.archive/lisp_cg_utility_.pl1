/* **************************************************************
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1973 *
   *                                                            *
   ************************************************************** */
/* protect old protection notice */
/* (c) Copyright 1973, Massachusetts Institute of Technology.
       All rights reserved.					*/

lisp_cg_utility_:			/* procedure to make object segment for lisp compiler */
	procedure(a_segname, a_codelist, gen_version, source_seg_list, fixnum_list,
		flonum_list, string_list, bignum_list, atsym_list, cons_list,
		entry_list, constant_list, link_list, action_list,
		array_link_list, pl1_link_list);

					/* makes the obj seg out of various lists */
					/* D. Reed 11/11/72 */
   /* Modified 74.06.14 by DAM for new arrays.  This adds one more argument */
 /* again 74.09.29 by DAM for the defpl1 feature.  This provides the ability
       to create links and have relocatable text */
    /* modified 74.11.14 by DAM to make relocation work properly and to
       be called via defpl1, which eliminates any number of bugs */

dcl a_segname char(*) parameter,
    segname char(length(a_segname)) init(a_segname),
    gen_version char(*) parameter,
    a_codelist fixed bin(71) parameter,
    a_codelist_p pointer aligned based(addr(a_codelist)),
    source_seg_list fixed bin(71) parameter,
    source_seg_list_p pointer aligned based(addr(source_seg_list)),
    fixnum_list fixed bin(71) parameter,
    fixnum_list_p pointer aligned based(addr(fixnum_list)),
    flonum_list fixed bin(71) parameter,
    flonum_list_p pointer aligned based(addr(flonum_list)),
    string_list fixed bin(71) parameter,
    string_list_p pointer aligned based(addr(string_list)),
    bignum_list fixed bin(71) parameter,
    bignum_list_p pointer aligned based(addr(bignum_list)),
    atsym_list fixed bin(71) parameter,
    atsym_list_p pointer aligned based(addr(atsym_list)),
    cons_list fixed bin(71) parameter,
    cons_list_p pointer aligned based(addr(cons_list)),
    entry_list fixed bin(71) parameter,
    entry_list_p pointer aligned based(addr(entry_list)),
    constant_list fixed bin(71) parameter,
    constant_list_p pointer aligned based(addr(constant_list)),
    link_list fixed bin(71) parameter,
    link_list_p pointer aligned based(addr(link_list)),
    action_list fixed bin(71) parameter,
    action_list_p pointer aligned based(addr(action_list)),
    array_link_list fixed bin(71) parameter,
    array_link_list_p pointer aligned based(addr(array_link_list)),
    pl1_link_list fixed bin(71) parameter,
    pl1_link_list_p pointer aligned based(addr(pl1_link_list));
dcl codelist fixed bin(71) automatic,
    codelist_p pointer aligned based(addr(codelist));

dcl cleanup condition;

dcl object_pointer ptr,
    def_ptr ptr,
    defsect ptr,
    link_ptr ptr,
    link_head_ptr ptr,
    symbol_ptr ptr,
    rel_bits_ptr ptr,
    map_ptr ptr,
    area_top ptr,
    blockp ptr,
    thingp ptr,
    symrtp ptr,
    total_objects fixed bin(18),
    total_block_size fixed bin(18),

    codeitem fixed bin(71),

    rh_reloc fixed bin(5),
    relbits_length fixed bin(18),
    absolute_counter fixed bin(18),
    link_list_count fixed bin,
    link_list_ptr pointer,
    (segmentname, entryname) char(32) varying,
    (segmentname_relp, entryname_relp) bit(18),
    segname_length fixed bin,
    def_length_in_words fixed bin(18),
    text_length fixed bin(18),
    ic fixed bin(18),
    stat_length fixed bin(18),
    def_length fixed bin(18),
    code fixed bin(35),
    acinfo ptr init(null()),

    last_def bit(18),
    next_def bit(18),
    (lcp_semant_$symbol_table,
     lcp_cg_$symbol_table) ext fixed bin,

    text_section dim(0:262143) bit(36) aligned based (object_pointer),
    1 word_overlay based aligned,
      2 typ_information bit(36) aligned,
      2 word bit(36) aligned,
    1 def_hdr based(def_ptr) aligned,
      2 def_list bit(18) unal,
      2 unused bit(36) unal,
      2 flags like definition.flags unaligned,
      2 the_rest bit(3) unal,
      2 end_chain bit(36) unal,	/* zero word to end the definition chain. */
      2 segname_def like definition aligned,

    1 definition based(def_ptr) aligned,
      2 fore_thread bit(18) unal,
      2 back_thread bit(18) unal,
      2 value bit(18) unal,
      2 flags unal,
        3 new_format bit(1),
        3 ignore bit(1),
        3 entrypoint bit(1),
        3 retain bit(1),
        3 descr_sw bit(1),
        3 padding bit(10),
      2 class bit(3) unal,
      2 symbol_ptr bit(18) unal,
      2 segname_ptr bit(18) unal,
      2 symbol aligned,
        3 len fixed bin(8) unal,
        3 acc char(512) unal,	/* can't use refer here... */
    1 accstring based aligned like definition.symbol,
    1 link_hdr based(link_ptr) aligned,
      2 fword bit(36),
      2 def_section bit(18) unal,
      2 first_reference bit(18) unal,
      2 section_thread ptr,
      2 linkage_ptr ptr,
      2 begin_links bit(18) unal,
      2 section_length bit(18) unal,
      2 object_seg bit(18) unal,
      2 combined_length bit(18) unal,
      2 internal_static dim(0:262135) bit(36) aligned,
    1 symbol_block based(symbol_ptr) aligned,
      2 dcl_vers fixed bin,
      2 identifier char(8),
      2 gen_version_number fixed bin,
      2 gen_creation_time fixed bin(71),
      2 object_creation_time fixed bin(71),
      2 generator char(8),
      2 gen_version_name like stringpointer,
      2 userid like stringpointer,
      2 comment like stringpointer,
      2 text_boundary fixed bin(17) unal,
      2 stat_boundary fixed bin(17) unal,
      2 source_map bit(18) unal,
      2 area_pointer bit(18) unal,
      2 sectionbase_backpointer bit(18) unal,
      2 block_size bit(18) unal,
      2 next_block_thread bit(18) unal,
      2 rel_text bit(18) unal,
      2 rel_def bit(18) unal,
      2 rel_link bit(18) unal,
      2 rel_symbol bit(18) unal,
      2 default_truncate bit(18) unal,
      2 optional_truncate bit(18) unal,
      2 user_name char(32),			/* userid above locates this */
      2 version_string char(64),		/* gen_version_name above locates this */
    1 relocation_bits based(rel_bits_ptr) aligned,
      2 dcl_vers fixed bin,
      2 relbits bit(131072) varying,	/* based varying bit string.... */
    1 object_map based (map_ptr) aligned,
      2 dcl_vers fixed bin,
      2 identifier char(8),
      2 text_offset bit(18) unal,
      2 text_length bit(18) unal,
      2 definition_offset bit(18) unal,
      2 definition_length bit(18) unal,
      2 linkage_offset bit(18) unal,
      2 linkage_length bit(18) unal,
      2 symbol_offset bit(18) unal,
      2 symbol_length bit(18) unal,
      2 bmap_offset bit(18) unal,
      2 bmap_length bit(18) unal,
      2 format unal,
        3 bound bit(1),
        3 relocatable bit(1),
        3 procedure bit(1),
        3 standard bit(1),
        3 unused bit(32),
      2 map_offset bit(18) aligned,


    1 stringpointer based aligned,
      2 offset fixed bin(17) unal,
      2 length fixed bin(17) unal;

dcl 1 source_map based aligned,
      2 version fixed bin,			/* 1 */
      2 size fixed bin,			/* number of entries to follow */
      2 map( source_map_size refer(source_map.size)),
        3 pathname like stringpointer,		/* relp/length of pathname string */
        3 uid bit(36) aligned,		/* source-segment unique id */
        3 dtm fixed bin(71),			/* source-segment dtm */
    smdn char(168),
    smen char(32),
    smstr char(source_seg_list_p -> cons_ptrs.car -> lisp_string.string_length) unaligned based,
    source_map_size fixed bin;


dcl 1 expression_word based aligned,
    2 type_pair_relp bit(18) unaligned,
    2 expression fixed bin(17) unaligned,

    1 type_pair based aligned,
    2 type fixed bin(17) unaligned,
    2 trap_relp bit(18) unaligned,
    2 segmentname_relp bit(18) unaligned,
    2 entryname_relp bit(18) unaligned,

    1 link_pair based aligned,
    2 header_relp bit(18) unaligned,
    2 ignore1 bit(12) unaligned,
    2 fault_tag_2 bit(6) unaligned,
    2 expression_relp bit(18) unaligned,
    2 ignore2 bit(18) unaligned;

dcl expression_word_table(100) bit(18) aligned;





dcl get_wdir_ entry returns(char(168)aligned),
    get_pdir_ entry returns(char(168)aligned),
    get_dir_ entry variable returns(char(168)aligned),
    get_group_id_ entry returns(char(32) aligned),
    clock_ entry returns(fixed bin(71)),

    com_err_ entry options(variable),
    cu_$cl entry,
    tssi_$get_segment entry (char(*), char(*), ptr, ptr, fixed bin(35)),
    tssi_$clean_up_segment entry(ptr),
    tssi_$finish_segment entry(ptr, fixed bin(24), bit(36) aligned, ptr, fixed bin(35)),

    expand_path_ entry(pointer, fixed bin(17), pointer, pointer, fixed bin(35)),
    hcs_$status_long entry(char(*), char(*), fixed bin(1), pointer, pointer, fixed bin(35)),
    1 hcs_status_long_str aligned structure,
    2 (	type bit(2),		/* 00 link 01 segment 10 directory */
	nnames bit(16),		/* number of names */
	nrp bit(18),		/* names rel ptr */
	dtm bit(36),		/* date time modified */
	dtu bit(36),		/* date time used */
	mode bit(5),		/* effective access */
	pad1 bit(13),
	records bit(18),		/* records used */
	dtd bit(36),		/* date time dumped */
	dtem bit(36),		/* date time entry modified */
	pad2 bit(36),
	curlen bit(12),		/* current length */
	bitcnt bit(24),		/* bit count */
	did bit(4),		/* device id */
	pad3 bit(4),
	copysw bit(1),		/* copy switch */
	pad4 bit(9),
	rbs (0:2) bit(6),		/* ring brackets */
	uid bit(36)		/* unique id */
      ) unaligned;

dcl (addr, addrel, after, before, bit, divide, fixed, hbound, index, length,
     max, mod, null, rel, size, string, substr, unspec) builtin;

%include lisp_symb_tree;
%include lisp_bignum_fmt;
%include lisp_nums;
%include lisp_ptr_fmt;
%include lisp_string_fmt;
%include lisp_atom_fmt;
%include lisp_cons_fmt;


	on condition(cleanup)
		call tssi_$clean_up_segment(acinfo);

	get_dir_ = get_wdir_;			/* usual case */
	if length(segname) > 5
	then if substr(segname, 1, 5) = "[pd]>"
	then do;					/* special case - put in process dir */
	     get_dir_ = get_pdir_;
	     segname = substr(segname, 6);
	     end;

loop_back:
	call tssi_$get_segment (get_dir_(), segname, object_pointer, acinfo, code);
	if object_pointer = null() then do;
		call com_err_(code, "lisp_cg_utility_", "^a>^a^/Fix it and type start.", get_dir_(), segname);
		call cu_$cl;			/* give loser a chance to recover */
		go to loop_back;
		end;


	if pl1_link_list_p -> fixedb > hbound(expression_word_table, 1)
	then do;
	     call com_err_(0, "lisp_cg_utility_",
			"Too many outbound links.  Compilation aborted.");
	     return;
	     end;

	ic = 0;
	codelist = a_codelist;		/* don't clobber codelist, need later */
	do while(addr(codelist) -> lisp_ptr.type = Cons);
	      codeitem = codelist_p -> cons.car;
	      codelist = codelist_p -> cons.cdr;
	      if addr(codeitem) -> lisp_ptr_type & Numeric36 then;
	      else codeitem = addr(codeitem) -> based_ptr -> cons.cdr;	/* relocatable */
	      text_section(ic) = addr(codeitem) -> word_overlay.word;
	      ic = ic + 1;
	end;

	ic, text_length = 2*divide(ic+1,2,18,0);

	defsect, def_ptr = addr(text_section(ic));	/* get pointer to where to put def section*/

/* make definition section */

	def_hdr.def_list = "000000000000000011"b;	/* def hdr immediately followed by first def */
	def_hdr.flags.new_format,
	def_hdr.flags.ignore = "1"b;			/* ignore bit must be on in def header. */


	def_hdr.segname_def.symbol.len = length(segname);
	substr(def_hdr.segname_def.symbol.acc, 1, length(segname)) = segname;
	def_length_in_words = divide(length(segname),4,17,0) + 7;
	def_hdr.segname_def.fore_thread = bit(def_length_in_words,18);
	def_hdr.segname_def.back_thread = "000000000000000010"b;	/* pointer to end chain */
	def_hdr.segname_def.value = "000000000000000010"b;
	def_hdr.segname_def.flags.retain,
	def_hdr.segname_def.flags.new_format = "1"b;
	def_hdr.segname_def.class = "011"b;		/* segname definition */
	def_hdr.segname_def.symbol_ptr = "000000000000000110"b;	/* 6 offset from beginning of def section */
	def_hdr.segname_def.segname_ptr = def_hdr.segname_def.fore_thread;	/* defblock ptr actually */


	last_def = "000000000000000011"b;

	def_ptr = addrel(def_ptr, def_length_in_words);		/* move on to ename def */
	definition.fore_thread = bit(fixed(def_length_in_words+5,18,0),18);
	definition.back_thread = last_def;
	definition.value = ""b;
	definition.flags.new_format,
	definition.flags.retain = "1"b;
	definition.class = "000"b;
	definition.symbol_ptr = bit(fixed(3-text_length+fixed(rel(def_ptr),18,0),18,0),18);
	definition.segname_ptr = "000000000000000011"b;
	definition.symbol.len = 7;
	substr(definition.symbol.acc,1,7) = "*segtop";
	last_def = bit(fixed(def_length_in_words,18,0),18);
	def_length_in_words = 5;
	def_ptr = addrel(def_ptr, def_length_in_words);		/* move along structure */
	definition.symbol.len = 12;
	substr(definition.symbol.acc,1,12) = "symbol_table";	/* the symbol table defn */
	definition.fore_thread = "000000000000000010"b;		/* points to zero word */
	definition.back_thread = last_def;
	definition.value = ""b;
	definition.flags.retain,
	definition.flags.new_format = "1"b;			/* all other flags are already zero */
	definition.class = "010"b;
	definition.symbol_ptr = bit(fixed(3-text_length+fixed(rel(def_ptr),18,0),18,0),18);
	definition.segname_ptr = "000000000000000011"b;		/* pointer to segname definition */
	def_ptr = addrel(def_ptr, 8);

	/* make cruft for links - expression words, type pairs, names */

	link_list_count = pl1_link_list_p -> fixedb;
	link_list_ptr = pl1_link_list_p -> cons_ptrs.cdr;
	do while (link_list_count > 0);
/*	   segmentname = before(link_list_ptr -> cons_ptrs.car -> lisp_string.string, "$");	COMPILER BUG
	   entryname = after(link_list_ptr -> cons_ptrs.car -> lisp_string.string, "$");	*/
	dcl iiiii fixed bin;
		entryname = "";
		iiiii = index(link_list_ptr -> cons_ptrs.car -> lisp_string.string, "$");
		if iiiii = 0 then iiiii = length(link_list_ptr -> cons_ptrs.car -> lisp_string.string)+1;
		else entryname = substr(link_list_ptr -> cons_ptrs.car -> lisp_string.string, iiiii+1);
		segmentname = substr(link_list_ptr -> cons_ptrs.car -> lisp_string.string, 1, iiiii-1);
	   def_ptr -> accstring.len = length(segmentname);
	   substr(def_ptr -> accstring.acc, 1, length(segmentname)) = segmentname;
	   segmentname_relp = ptr_sub(def_ptr, defsect);
	   def_ptr = addrel(def_ptr, divide(length(segmentname)+4,4,18,0));
	   if entryname = "" then entryname_relp = segmentname_relp;
	   else do;
	        def_ptr -> accstring.len = length(entryname);
	        substr(def_ptr -> accstring.acc, 1, length(entryname)) = entryname;
	        entryname_relp = ptr_sub(def_ptr, defsect);
	        def_ptr = addrel(def_ptr, divide(length(entryname)+4,4,18,0));
	        end;
	   def_ptr -> type_pair.segmentname_relp = segmentname_relp;
	   def_ptr -> type_pair.entryname_relp = entryname_relp;
	   def_ptr -> type_pair.type = 4;
	   def_ptr -> type_pair.trap_relp = ""b;
	   entryname_relp = ptr_sub(def_ptr, defsect);		/* save for a second */
	   def_ptr = addrel(def_ptr, 2);
	   def_ptr -> expression_word.type_pair_relp = entryname_relp;
	   def_ptr -> expression_word.expression = 0;
	   expression_word_table(link_list_count) = ptr_sub(def_ptr, defsect);
	   def_ptr = addrel(def_ptr, 1);
	   link_list_ptr = link_list_ptr -> cons_ptrs.cdr;
	   link_list_count = link_list_count - 1;
	   end;
	def_length = fixed(rel(def_ptr), 18) - text_length;
	if mod(def_length, 2) ^= 0 then def_length = def_length + 1;	/* put linkage on double word boundary */

/* now make linkage section */

	link_ptr = addrel(object_pointer,text_length+def_length);
	link_ptr -> link_hdr.def_section = bit(text_length,18);

	stat_length = 8;		/* only exists linkage header */

	link_ptr -> link_hdr.begin_links,
	link_ptr -> link_hdr.section_length = bit(stat_length,18);	/* no links are present */
	link_ptr -> link_hdr.combined_length = ""b;		/* obsolete field must be zero or linker screws up */

	link_head_ptr = link_ptr;
	link_ptr = addrel(link_ptr, 8);		/* skip link header */
	link_list_count = pl1_link_list_p -> fixedb;
	do while(link_list_count > 0);
	   link_ptr -> link_pair.header_relp = ptr_sub(link_head_ptr, link_ptr);
	   link_ptr -> link_pair.fault_tag_2 = "100110"b;
	   link_ptr -> link_pair.expression_relp = expression_word_table(link_list_count);
	   link_ptr = addrel(link_ptr, 2);
	   link_list_count = link_list_count - 1;
	   end;
	link_head_ptr -> link_hdr.section_length = ptr_sub(link_ptr, link_head_ptr);

/* now make the symbol section, which is the hard part */

	symbol_ptr = link_ptr;
	symbol_block.dcl_vers = 1;
	symbol_block.identifier = "symbtree";
	symbol_block.gen_version_number = 2;
	symbol_block.gen_creation_time = max(addr(lcp_semant_$symbol_table)->symbol_block.object_creation_time,
				addr(lcp_cg_$symbol_table)->symbol_block.object_creation_time);
	symbol_block.object_creation_time = clock_();
	symbol_block.generator = "lisp";
	symbol_block.gen_version_name.offset = 28;
	symbol_block.gen_version_name.length = 64;
	symbol_block.userid.offset = 20;
	symbol_block.userid.length = 32;
	symbol_block.comment.offset, symbol_block.comment.length = 0;
	symbol_block.text_boundary, symbol_block.stat_boundary = 2;
	symbol_block.sectionbase_backpointer = "0"b;
	symbol_block.next_block_thread = "0"b;
	symbol_block.user_name = get_group_id_();
	symbol_block.version_string = gen_version;
	area_top = addrel(symbol_ptr,size(symbol_block));

	/* create source map */

	source_map_size = source_seg_list_p -> fixedb;
	thingp = sym_alloc(size(source_map));
	symbol_block.source_map = ptr_sub(thingp, symbol_ptr);
	thingp -> source_map.version = 1;
	thingp -> source_map.size = source_map_size;
	ic = 0;
	do while(source_map_size > 0);		/* process source seg list */
	   source_map_size = source_map_size - 1;
	   ic = ic + 1;
	   source_seg_list = source_seg_list_p -> cons.cdr;
	   call expand_path_(addr(source_seg_list_p -> cons_ptrs.car -> lisp_string.string),
			 source_seg_list_p -> cons_ptrs.car -> lisp_string.string_length,
			 addr(smdn),
			 addr(smen),
			 code);
	   if code ^= 0 then go to source_map_loss;
	   call hcs_$status_long(smdn, smen, 1 /*chase*/, addr(hcs_status_long_str), null, code);
	   if code ^= 0 then go to source_map_loss;
	   thingp -> source_map.map(ic).uid = hcs_status_long_str.uid;
	   thingp -> source_map.map(ic).dtm = fixed(hcs_status_long_str.dtm || (16)"0"b, 52);
source_map_loss:
	   symrtp = sym_alloc(divide(source_seg_list_p -> cons_ptrs.car -> lisp_string.string_length+7,8,17,0)*2);
	   thingp -> source_map.map(ic).pathname.offset = fixed(ptr_sub(symrtp, symbol_ptr), 18);
	   thingp -> source_map.map(ic).pathname.length = source_seg_list_p -> cons_ptrs.car -> lisp_string.string_length;
	   symrtp -> smstr = source_seg_list_p -> cons_ptrs.car -> lisp_string.string;
	   end;

	symrtp = sym_alloc(size(symbol_root));
	symbol_block.area_pointer = ptr_sub(symrtp, symbol_ptr);

	/* now make the lisp symbol tree */

	blockp = sym_alloc(fixnum_list_p -> fixedb+1);	/* number of fixnums */
	blockp -> fixnum_block.count, total_objects = fixnum_list_p -> fixedb;

	do ic = 1 to blockp -> fixnum_block.count;
	     fixnum_list = fixnum_list_p -> cons.cdr;
	     blockp -> fixnum_block.fixnums(ic) = fixnum_list_p -> fixedb;
	end;

	symrtp -> symbol_root.objects.fixnum_blockp = ptr_sub(blockp,symrtp);


	blockp = sym_alloc(flonum_list_p -> fixedb+1);	/* number of flonums */
	blockp -> flonum_block.count = flonum_list_p -> fixedb;
	total_objects = total_objects + blockp -> flonum_block.count;

	do ic = 1 to blockp -> flonum_block.count;
	     flonum_list = flonum_list_p -> cons.cdr;
	     blockp -> flonum_block.flonums(ic) = flonum_list_p -> floatb;
	end;

	symrtp -> symbol_root.objects.flonum_blockp = ptr_sub(blockp,symrtp);


	blockp = sym_alloc(divide(string_list_p ->fixedb+3,2,17,0));
	blockp -> string_block.count = string_list_p -> fixedb;
	total_objects = total_objects + blockp -> string_block.count;

	do ic = 1 to blockp -> string_block.count;

	     string_list = string_list_p -> cons.cdr;
	     thingp = sym_alloc(divide(string_list_p -> based_ptr -> lisp_string.string_length+7,4,17,0));

	     blockp -> string_block.string_offset(ic) = ptr_sub(thingp,symrtp);
	     thingp -> string_chars.length = string_list_p -> based_ptr -> lisp_string.string_length;
	     thingp -> string_chars.chars = string_list_p -> based_ptr -> lisp_string.string;

	end;

	symrtp -> symbol_root.objects.string_blockp = ptr_sub(blockp,symrtp);



	blockp = sym_alloc(divide(bignum_list_p -> fixedb+3,2,18,0));
	blockp -> bignum_block.count = bignum_list_p -> fixedb;
	total_objects = total_objects + blockp -> bignum_block.count;

	do ic = 1 to blockp -> bignum_block.count;
	     bignum_list = bignum_list_p -> cons.cdr;

	     thingp = sym_alloc(1+bignum_list_p -> based_ptr -> lisp_bignum.prec);
	     blockp -> bignum_block.bignum_offsets(ic) = ptr_sub(thingp,symrtp);
	     thingp -> lisp_bignum.sign = bignum_list_p -> based_ptr -> lisp_bignum.sign;
	     thingp -> lisp_bignum.prec = bignum_list_p -> based_ptr -> lisp_bignum.prec;
	     thingp -> lisp_bignum.words = bignum_list_p -> based_ptr -> lisp_bignum.words;
	end;
	symrtp -> symbol_root.objects.bignum_blockp = ptr_sub(blockp,symrtp);


	blockp = sym_alloc(divide(atsym_list_p -> fixedb+3,2,17,0));
	blockp -> atsym_block.count = atsym_list_p -> fixedb;
	total_objects = total_objects + blockp -> atsym_block.count;

	do ic = 1 to blockp -> atsym_block.count;
	     atsym_list = atsym_list_p -> cons.cdr;
	     thingp = sym_alloc(divide(atsym_list_p -> based_ptr -> atom.pnamel+7,4,17,0));
	     blockp -> atsym_block.atsym_offset(ic) = ptr_sub(thingp,symrtp);
	     thingp -> string_chars.length = atsym_list_p -> based_ptr -> atom.pnamel;
	     thingp -> string_chars.chars = atsym_list_p -> based_ptr -> atom.pname;
	end;

	symrtp -> symbol_root.objects.atsym_blockp = ptr_sub(blockp,symrtp);

	blockp = sym_alloc(cons_list_p -> fixedb+1);	/* size of cons block */

	blockp -> cons_block.count = cons_list_p -> fixedb;
	total_objects = total_objects + blockp -> cons_block.count;

	do ic = 1 to blockp -> cons_block.count;
	     cons_list = cons_list_p -> cons.cdr;
	     unspec(blockp -> cons_block.conses(ic)) = cons_list_p -> word_overlay.word;
	end;

	symrtp -> symbol_root.objects.cons_blockp = ptr_sub(blockp,symrtp);

	blockp = sym_alloc(entry_list_p ->fixedb+1);	/* size of entry descriptions */
	blockp -> entry_block.count, total_block_size = entry_list_p -> fixedb;

	do ic = 1 to blockp -> entry_block.count;
	     entry_list = entry_list_p -> cons.cdr;
	     string(blockp -> entry_block.entry_info(ic)) = entry_list_p -> word_overlay.word;
	end;
	symrtp -> symbol_root.subr_block_items.entry_blockp = ptr_sub(blockp,symrtp);

	blockp = sym_alloc(divide(constant_list_p -> fixedb+3,2,17,0));
	blockp -> const_block.count = constant_list_p -> fixedb;
	total_block_size = total_block_size + blockp -> const_block.count;

	do ic = 1 to blockp -> const_block.count;
	     constant_list = constant_list_p -> cons.cdr;
	     blockp -> const_block.constants(ic) = constant_list_p -> fixedb;
	end;
	symrtp -> symbol_root.subr_block_items.const_blockp = ptr_sub(blockp,symrtp);

	blockp = sym_alloc(1+link_list_p -> fixedb);
	blockp -> links_block.count = link_list_p -> fixedb;
	total_block_size = total_block_size+blockp -> links_block.count;
	do ic = 1 to blockp -> links_block.count;
	     link_list = link_list_p -> cons.cdr;
	     blockp -> links_block.link_info(ic)= substr(link_list_p -> word_overlay.word,10,27);
	end;
	symrtp -> symbol_root.subr_block_items.links_blockp = ptr_sub(blockp,symrtp);

	blockp = sym_alloc(1+ action_list_p -> fixedb);
	blockp -> action_block.count = action_list_p -> fixedb;
	do ic = 1 to blockp -> action_block.count;
	     action_list = action_list_p -> cons.cdr;
	     unspec(blockp -> action_block.actions(ic)) = action_list_p -> word_overlay.word;
	end;
	symrtp -> symbol_root.action_blockp = ptr_sub(blockp,symrtp);

	blockp = sym_alloc(1 + array_link_list_p -> fixedb);
	blockp -> array_links_block.count = array_link_list_p -> fixedb;
	do ic = 1 to blockp -> array_links_block.count;
	   array_link_list = array_link_list_p -> cons.cdr;
	   blockp -> array_links_block.array_link(ic).control_word =
		array_link_list_p -> word_overlay.word;
	   end;
	symrtp -> symbol_root.array_links_blockp = ptr_sub(blockp,symrtp);

/* now fill in lengths of various items */

	symrtp -> symbol_root.version = 2;
	symrtp -> symbol_root.number_objects = total_objects;
	symrtp -> symbol_root.subr_block_size = total_block_size;

	/* now make up the relocation bits */

	rel_bits_ptr = area_top;
	symbol_block.default_truncate,
	symbol_block.optional_truncate,
	symbol_block.rel_text = ptr_sub(rel_bits_ptr,symbol_ptr);
	relocation_bits.dcl_vers = 1;
	relbits = ""b;
	absolute_counter = 0;
	do codelist = a_codelist repeat codelist_p -> cons.cdr
		while (addr(codelist) -> lisp_ptr.type = Cons);		/* process codelist again */
	   if codelist_p -> cons_types.car
	   then absolute_counter = absolute_counter + 2;
	   else do;
		call put_rel;	/* relocatable word - a cons in codelist */
		relbits = relbits || bit(fixed(codelist_p -> cons_ptrs.car -> fixedb, 5), 5);	/* put out the relocation */
		rh_reloc = divide(codelist_p -> cons_ptrs.car -> fixedb, 262144, 17, 0);
		if rh_reloc = 0			/* if no rh relocation */
		then absolute_counter = 1;		/* then is 1 abs for right half */
		else relbits = relbits || bit(rh_reloc, 5);   /* else put out rh relocation */
		end;
	   end;
	call put_rel;
	relbits_length = divide(length(relbits)+107,36,35,0);	/* length of text relocation bits */
	rel_bits_ptr = addrel(rel_bits_ptr,relbits_length);
	symbol_block.rel_link = ptr_sub(rel_bits_ptr,symbol_ptr);
	relocation_bits.dcl_vers = 1;
	relbits = "00100000000000001001010010010010"b;
	relbits_length = divide(length(relbits)+107,36,35,0);
	rel_bits_ptr = addrel(rel_bits_ptr, relbits_length);

	relocation_bits.dcl_vers = 1;
	relbits = "11110"b || "0000011110"b || "101110"b;	/* up to section_base_backptr */
	absolute_counter = 2*(fixed(ptr_sub(area_top,symbol_ptr),18,0)-16);	/* first 16 words aready encoded */
	call put_rel;
	symbol_block.rel_symbol =  ptr_sub(rel_bits_ptr,symbol_ptr);

put_rel: proc;		/* put out some absolute relocation */
	   do while(absolute_counter > 1111111111b);	/* pack in absolute relocation */
	     relbits = relbits || "111101111111111"b;	/* max length of expanded absolute */
	     absolute_counter = absolute_counter - 1111111111b;
	     end;
	   if absolute_counter > 0 then do;
		relbits = relbits || "11110"b;
		relbits = relbits || bit(fixed(absolute_counter,10,0),10);
		end;
	   absolute_counter = 0;
	   end;

	map_ptr = addrel(rel_bits_ptr, divide(length(relbits)+107,36,35,0));
	symbol_block.block_size = ptr_sub(map_ptr, symbol_ptr);

	object_map.dcl_vers = 1;
	object_map.identifier = "obj_map";
	object_map.text_offset = ""b;
	object_map.text_length = bit(fixed(text_length,18,0),18);
	object_map.definition_offset = bit(text_length,18);
	object_map.definition_length = bit(fixed(def_length,18,0),18);
	object_map.linkage_offset = rel(link_head_ptr);
	object_map.linkage_length = ptr_sub(link_ptr, link_head_ptr);
	object_map.symbol_offset = rel(symbol_ptr);
	object_map.symbol_length = bit(fixed(symbol_block.block_size,18,0),18);
	object_map.bmap_offset = ""b;
	object_map.bmap_length = "0"b;
	object_map.format.bound = "0"b;
	object_map.format.relocatable, object_map.format.procedure = "1"b;
	object_map.format.standard = "1"b;
	object_map.map_offset = rel(map_ptr);

	call tssi_$finish_segment (object_pointer, 36*(10+fixed(symbol_block.block_size,18,0)+fixed(rel(symbol_ptr), 18)), "1100"b, acinfo, code);

	return;


ptr_sub:	proc(ap, bp)returns(bit(18));		/* subtracts bp from ap, returns offset of bp from ap as bit(18) */
    dcl (ap, bp) ptr;
    dcl diff fixed bin(19);

	diff = fixed(rel(ap), 18) - fixed(rel(bp), 18);
	if diff < 0 then diff = 262144+diff;		/* want 2's complement bitstring */
	return (bit(fixed(diff, 18), 18));
end ptr_sub;



sym_alloc: proc(space) returns(ptr);

dcl space fixed bin(18),
    tempp ptr;

	tempp = area_top;
	area_top = addrel(area_top,space);
	return(tempp);
end sym_alloc;
end lisp_cg_utility_;
