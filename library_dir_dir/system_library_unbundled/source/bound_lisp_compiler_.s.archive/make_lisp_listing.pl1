/* **************************************************************
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1973 *
   *                                                            *
   ************************************************************** */
/* protect old protection notice */
/* (c) Copyright 1973, Massachusetts Institute of Technology.
       All rights reserved.					*/

make_lisp_listing: mll:
	procedure;

/* modified 15 Nov 73 by DAM for new subr blocks */

dcl cu_$arg_ptr entry(fixed bin, ptr, fixed bin, fixed bin(35)),
    object_info_$brief entry ( ptr, fixed bin(24), ptr, fixed bin(35)),
    dump_lisp_code_ entry(fixed bin(18), fixed bin(18), ptr, pointer),
    make_lisp_xref_ entry(pointer, ptr),
    iox_$attach_ioname entry(char(*), ptr, char(*), fixed bin(35)),
    iox_$open entry(ptr, fixed bin, bit(1) unaligned, fixed bin(35)),
    iox_$close entry(ptr, fixed bin(35)),
    iox_$detach_iocb entry(ptr, fixed bin(35)),
    iox_$put_chars entry(ptr, ptr, fixed bin(21), fixed bin(35)),
    iox_$position entry(ptr, fixed bin, fixed bin(21), fixed bin(35)),
    hcs_$initiate_count entry(char(*), char(*), char(*), fixed bin(24), fixed bin(2), ptr, fixed bin(35)),
    unique_chars_ entry(bit(*)) returns(char(15)),
    error_table_$segknown fixed bin(35) external,
    hcs_$terminate_name entry(char(*), fixed bin(35)),
    hcs_$terminate_noname entry(pointer, fixed bin(35)),
    hcs_$make_ptr entry(pointer, char(*), char(*), pointer, fixed bin(35)),
    expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin(35)),
    date_time_ entry(fixed bin(71), char(*)),

    bitcount fixed bin (24),
    segptr ptr,
    dir char(168),
    ent char(32),
    unique_ref_name char(15),

    sdir char(168),
    sent char(32),
    sptr pointer,
    sbc fixed bin(24),
    slen fixed bin(21),
    snameptr pointer,
    snamelen fixed bin,
    soff fixed bin(21),
    nelemt fixed bin(21),

    s char(1),			/* singular/plural hackery */

    time_string char(24),
    based_string char(1000) based aligned,
    nameptr ptr,
    namelen fixed bin,
    name char(namelen) based(nameptr) unal,
    bword bit(36) aligned based,
    code fixed bin(35),
    1 status aligned,
      2 error_code fixed bin(35),
      2 statbits bit(36),

    atom_name char(10000) varying based aligned,
    listfile char(32),

    (mll_internal_error, cleanup) condition,

    size_of_text fixed bin(18),
    actionsp pointer,
    sblkp pointer,
    symrtp pointer,
    number_of_definitions fixed bin init(0),
    actionx fixed bin,
    atomsp pointer,
    number_of_atoms fixed bin init(0),
    constp pointer,
    number_of_constants fixed bin init(0),

   mll_list_stream ptr,
    def_ptr ptr,

    (addr, addrel, substr, null, bit, fixed, multiply, binary, lbound, hbound, length) builtin,

    1 acc aligned based,
      2 len fixed bin(8) unal,
      2 str char(0 refer(acc.len)) unal,

    com_err_ entry options(variable),
    ioa_$ioa_switch entry options(variable);

dcl brief_opt bit(1) init("0"b),
    object_opt bit(1) init("0"b),
    source_opt bit(1) init("0"b),
    one_fun_opt bit(1) init("0"b),		/* 1 => only list one function */
    one_fun char(256),			/* the one function to list's name. */
    not_a_lisp_seg bit(1) init("0"b),
    argx fixed bin,
    argptr pointer,
    arglen fixed bin,
    arg char(arglen) based(argptr) unaligned,
    error_table_$badopt fixed bin(35) external;

dcl source_map_ptr pointer;

dcl source_x fixed bin;

dcl source_pathname char(fixed(source_map_ptr -> source_map.pathname(source_x).size, 18)) unaligned
		based(addrel(sblkp, source_map_ptr -> source_map.pathname(source_x).offset));

%include lisp_symb_tree;
%include symbol_block;
%include source_map;
%include object_info;

dcl 1 oi like object_info aligned automatic;

	/* process arguments */

	do argx = 1 by 1;
	   call cu_$arg_ptr(argx, argptr, arglen, code);
	   if code ^= 0 then go to exitloop_get_args;
	   if arg = "" then;		/* ignore null args for sake of compiler */
	   else if substr(arg, 1, 1) = "-"
	   then if arg = "-brief" then brief_opt = "1"b;
	        else if arg = "-bf" then brief_opt = "1"b;
	        else if arg = "-function" | arg = "-fn" then do;
			one_fun_opt = "1"b;
			argx = argx + 1;
			call cu_$arg_ptr(argx, argptr, arglen, code);
			if code ^= 0 then do;
				call com_err_(code, "make_lisp_listing", "Function name required after -function.");
				return;
				end;
			one_fun = arg;
			end;
	        else do;
		call com_err_(error_table_$badopt, "make_lisp_listing", arg);
		return;
		end;
	   else if ^object_opt then do;	/* first pathname is object seg */
		object_opt = "1"b;
		nameptr = argptr;
		namelen = arglen;
		end;
	   else if ^source_opt then do;	/* second pathname is source seg */
		source_opt = "1"b;
		snameptr = argptr;
		snamelen = arglen;
		end;
	   else do;			/* a third pathname is not allowed */
		call com_err_(0, "make_lisp_listing", "^a is an extraneous argument.", arg);
		return;
		end;
	   end;
exitloop_get_args:

	if ^object_opt then do;
	   call com_err_(0, "make_lisp_listing",
		"Usage is:  make_lisp_listing object_seg^/	the -brief and -bf options are allowed.");
	   return;
	   end;

	call expand_path_(nameptr, namelen, addr(dir), addr(ent), code);
	if code ^= 0
	then do;
		call com_err_ (code, "make_lisp_listing", name);
		return;
	     end;


	unique_ref_name = unique_chars_(""b);
	call hcs_$initiate_count(dir, ent, unique_ref_name, bitcount, 0, segptr, code);
	if code ^= 0 then if code ^= error_table_$segknown
	then do;
		call com_err_(code, "make_lisp_listing", "Cannot initiate ^a>^a.", dir, ent);
		return;
		end;

	/* compute size of text section from rel of def section - needed later */

	call object_info_$brief(segptr, bitcount, addr(oi), code);
	if code ^= 0 then go to bad_code;
	size_of_text = fixed(rel(oi.defp), 18);


	/* find symbol section */

	call hcs_$make_ptr(null, unique_ref_name, "symbol_table", sblkp, code);
	if sblkp = null
	then do;
bad_code:		call com_err_(code, "make_lisp_listing", "^a>^a.", dir, ent);
		return;
		end;
	if sblkp -> sb.generator ^= "lisp" then do;
not_lisp:		if brief_opt then do;		/* allowed if not looking at code */
		   not_a_lisp_seg = "1"b;
		   go to skip_lisp_stuff;
		   end;
		call com_err_(0, "make_lisp_listing", "^a>^a is not an object segment produced by the LISP compiler.", dir, ent);
		return;
		end;
	if sblkp -> sb.area_ptr = ""b then go to not_lisp;	/* old format, with .defs file? */
	symrtp = addrel(sblkp, sblkp -> sb.area_ptr);

	/* determine number of functions defined in this object segment by scanning actions */

	actionsp = addrel(symrtp, symrtp -> symbol_root.action_blockp);
	number_of_definitions = 0;
	do actionx = 1 to actionsp -> action_block.count;
	   if actionsp -> action_block.action_code(actionx) > 0	/* def fcn of one type or another */
	   then number_of_definitions = number_of_definitions + 1;
	   end;

	atomsp = addrel(symrtp, symrtp -> symbol_root.atsym_blockp);
	number_of_atoms = atomsp -> atsym_block.count;

	constp = addrel(symrtp, symrtp -> symbol_root.const_blockp);
	number_of_constants = constp -> const_block.count;

skip_lisp_stuff:
	/* enter begin block to allocate various tables */

allocate_various_tables:  begin;

dcl defx fixed bin,
    entryp pointer,
    linksp pointer,
    atom_lbound fixed bin(18),
    actionx fixed bin,
    i fixed bin,
    codelength fixed bin(18);

dcl 1 table aligned automatic structure,
      2 stack_height fixed bin(17),		/* added to ap offset gives real offset */
      2 atom_table_size fixed bin(17) init(number_of_atoms),
      2 link_table_ptr unaligned pointer,	/* points at array of itp link info */
      2 link_table_lbound fixed bin(18),		/* first lp| offset of itp link */
      2 link_table_hbound fixed bin(18),		/* last lp| offset of itp link */
      2 array_link_table_ptr unaligned pointer,		/* -> array of array_link control words */
      2 array_link_table_lbound fixed bin(18),		/* first lp| offset of array link */
      2 array_link_table_hbound fixed bin(18),		/* last lp| offset of array link */
      2 definition_table_size fixed bin init(number_of_definitions),
      2 constant_table_size fixed bin(17) init(number_of_constants),
      2 constant_table_lbound fixed bin(18),	/* first lp| offset of constant */
      2 constant_table_hbound fixed bin(18),	/* last lp| offset of constant */
      2 bind_stack_ptr fixed bin,		/* index of first unused entry in the bind_stack */
      2 arg_twiddle fixed bin(18),		/* eax5 hacker */
      2 seg_ptr unaligned pointer,		/* -> object seg text section */
      2 bind_stack (100) fixed bin,		/* table of sizes of nested binding blocks */
      2 atom_table (number_of_atoms) structure,	/* pointers to atomic symbols */
        3 ptr_to_name unaligned pointer,	/* packed pointer to varying string which is name */
      2 definition_table (number_of_definitions) structure,
        3 arg_pdl bit(18) unaligned,		/* number of pdl cells occupied by args */
        3 entrypoint bit(18) unaligned,		/* location of entry */
        3 ptr_to_name unaligned pointer,	/* packed pointer to varying string */
      2 constant_table (number_of_constants) structure,
        3 atom_table_index fixed bin;		/* 0 if this constant not an atom */


	if not_a_lisp_seg then seg_ptr = segptr;
	else do;		/* only do lisp stuff if lisp seg */

	/* get pointer to text section */

	call hcs_$make_ptr(segptr, unique_ref_name, "*segtop", entryp, code);
	seg_ptr = entryp;

	/* set up handler for bind_stack overflow/underflow */

	on mll_internal_error begin;
	     dcl foo char(5);
	     if bind_stack_ptr <= 0 then foo = "under";
			        else foo = "over";
	     call com_err_(0, "make_lisp_listing", "Internal binding stack ^aflow while listing ^a.", foo, definition_table(defx).ptr_to_name -> atom_name);
	     call ioa_$ioa_switch(mll_list_stream, "^/BUST IT!  BUST IT!");		/* ?? */
	     go to flush_this;
	     end;

	/* fill in the tables:

		a t o m   t a b l e  */

	do i = lbound(atom_table, 1) to hbound(atom_table, 1);
	   atom_table(i).ptr_to_name = addrel(symrtp, atomsp -> atsym_block.atsym_offset(i));
	   end;

	/*      l i n k   t a b l e   */

	linksp = addrel(symrtp, symrtp -> symbol_root.links_blockp);
	link_table_lbound = 1 + 2*number_of_constants;				/* lp offset of first link */
	link_table_hbound = link_table_lbound + 2*linksp -> links_block.count - 2;	/* lp offset of last link */
	link_table_ptr = addr(linksp -> links_block.link_info);
	
	/*      d e f i n i t i o n   t a b l e   */

	atom_lbound = 1 + addrel(symrtp, symrtp -> symbol_root.fixnum_blockp) -> fixnum_block.count
		      + addrel(symrtp, symrtp -> symbol_root.flonum_blockp) -> flonum_block.count
		      + addrel(symrtp, symrtp -> symbol_root.string_blockp) -> string_block.count
		      + addrel(symrtp, symrtp -> symbol_root.bignum_blockp) -> bignum_block.count;
	defx = 0;
	entryp = addrel(symrtp, symrtp -> symbol_root.entry_blockp);
	do actionx = 1 to actionsp -> action_block.count;
	   if actionsp -> action_block.action_code(actionx) > 0	/* defining function */
	   then do;
		defx = defx + 1;
		if actionsp -> action_block.action_code(actionx) = 1	/* subr */
		then definition_table(defx).arg_pdl = bit(multiply(2, fixed(entryp -> entry_info(defx).nargs, 18),
							 18, 0), 18);
		else if actionsp -> action_block.action_code(actionx) = 2	/* lsubr */
		then definition_table(defx).arg_pdl = ""b;
		else definition_table(defx).arg_pdl = bit(binary(2, 18), 18);	/* fsubr */
		definition_table(defx).entrypoint = entryp -> entry_info(defx).entrypoint;
		definition_table(defx).ptr_to_name = atom_table(
			actionsp -> action_block.actions(actionx).operand - atom_lbound + 1).ptr_to_name;
		end;
	   end;

	/*      c o n s t a n t   t a b l e   */

	constant_table_lbound = 1;			/* lp offset of first constant */
	constant_table_hbound = 2*number_of_constants - 1;  /* lp offset of last constant */
	do i = 1 to number_of_constants;
	   actionx = constp -> const_block.constants(i);
	   if actionx >= atom_lbound
	   then if actionx - atom_lbound + 1 <= atom_table_size
	   then actionx = actionx - atom_lbound + 1;	/* constant is atom - this is index in atom table */
	   else actionx = 0;
	   else actionx = 0;

	   constant_table(i).atom_table_index = actionx;
	   end;


	/*     a r r a y   l i n k   t a b l e     */

	if symrtp -> symbol_root.version < 2 then array_link_table_ptr = null;
	else do;
	     array_link_table_ptr = addrel(symrtp, symrtp -> symbol_root.array_links_blockp);
	     array_link_table_lbound = constant_table_hbound + 2 + 2*entryp -> entry_block.count;
	     array_link_table_hbound = array_link_table_lbound + 4*(array_link_table_ptr -> array_links_block.count-1);
	     array_link_table_ptr = addr(array_link_table_ptr -> array_links_block.array_link(1));
	     end;

	end;		/* end of lisp only */
	/* NOW BEGIN GENERATING LISTING */

	listfile = substr(ent, 1, min(27, 1+length(ent)-verify(reverse(ent), " "))) || ".list";


	call iox_$attach_ioname("mll."||unique_chars_(""b), mll_list_stream, "vfile_ "||listfile, code);
	if code ^= 0 then do;

		call com_err_(code, "make_lisp_listing", "Trying to attach mll_list_stream to ^a.",
			listfile);
		return;
		end;

	call iox_$open(mll_list_stream, 2, "0"b, code);
	if code ^= 0 then do;
		call com_err_(code, "make_lisp_listing", "Trying to open iocb ^p.", mll_list_stream);
		return;
	end;
	on cleanup begin;
		call iox_$close(mll_list_stream, code);
		call iox_$detach_iocb(mll_list_stream, code);
	end;
	call ioa_$ioa_switch(mll_list_stream, "LISTING FOR  ^a>^a", dir, ent);
	call ioa_$ioa_switch(mll_list_stream, "COMPILED BY ^a", substr(addrel(sblkp, sblkp -> sb.gen_name_offset)
								->based_string, 1, fixed(sblkp -> sb.gen_name_length, 18)));
	call date_time_(sblkp -> sb.obj_creation_time, time_string);
	call ioa_$ioa_switch(mll_list_stream, "ON ^a", time_string);
	call ioa_$ioa_switch(mll_list_stream, "IN BEHALF OF ^a^3/",
		substr(addrel(sblkp, sblkp -> sb.uid_offset) -> based_string, 1,
			fixed(sblkp -> sb.uid_length, 18)));

	/* Insert listing of source if we were given a second argument,
	   the source path name */

	if source_opt then call insert_source_seg;

	else if one_fun_opt then;		/* suppress source */

	else if sb.source_map ^= ""b then do;	/* get source from source map */

	     source_map_ptr = addrel(sblkp, sb.source_map);
	     do source_x = 1 to source_map_ptr -> source_map.number;
	        if source_x > 1 then call ioa_$ioa_switch(mll_list_stream,
				"INCLUDE FILE ^a^/", source_pathname);
	        snameptr = addr(source_pathname);
	        snamelen = length(source_pathname);
	        call insert_source_seg;
	        end;
	     end;


	if brief_opt then go to dont_list_the_code;

	/* list the code:  do loop done once for each entry in definition table */

	do defx = 1 to number_of_definitions;
	   if one_fun_opt
	      then if definition_table(defx).ptr_to_name -> atom_name ^= one_fun
	              then go to skip_this_definition;
	   if definition_table(defx).arg_pdl = "000000000000000010"b	/* 2 */
	   then s = "";		/* 1 - singular */
	   else s = "s";		/* anything else - plural */

	   call ioa_$ioa_switch(mll_list_stream, "FUNCTION ^a^2x(^d arg-temp^a)^2/",
		definition_table(defx).ptr_to_name -> atom_name,
		divide(fixed(definition_table(defx).arg_pdl, 18), 2, 17, 0), s);
	   if defx = number_of_definitions
	   then codelength = size_of_text - fixed(definition_table(defx).entrypoint, 18);
	   else codelength = fixed(definition_table(defx+1).entrypoint, 18) - fixed(definition_table(defx).entrypoint, 18);

	   stack_height = 2 + fixed(definition_table(defx).arg_pdl, 18);
	   bind_stack_ptr = 1;

	   call dump_lisp_code_(fixed(definition_table(defx).entrypoint, 18),
		codelength, mll_list_stream, addr(table));
flush_this:
	   call ioa_$ioa_switch(mll_list_stream, "^|");
skip_this_definition:
	   end;

dont_list_the_code:

	/* now list the functions referenced and defined */

	if ^ (not_a_lisp_seg | one_fun_opt)
	then call make_lisp_xref_(addr(table), mll_list_stream);

	call iox_$close(mll_list_stream, code);
	call iox_$detach_iocb(mll_list_stream,  code);

	call hcs_$terminate_name(unique_ref_name, code);

	return;


insert_source_seg:  proc;

	     call expand_path_(snameptr, snamelen, addr(sdir), addr(sent), code);
	     if code = 0 then do;
		call hcs_$initiate_count(sdir, sent, "", sbc, 0, sptr, code);
		if sptr ^= null then do;
		     slen = divide(sbc, 9, 21, 0);
			call iox_$put_chars(mll_list_stream, sptr,  slen, code);
			if code ^= 0 then do;
				call com_err_(code, "make_lisp_listing", "Trying to write source segment ^a.", sent);
				return;
			end;
		     call hcs_$terminate_noname(sptr, code);
		     call ioa_$ioa_switch(mll_list_stream, "^|");
		     end;
		else;	/* source not there, ignore */
		end;
	     else;	/* crufty pathname, ignore */
     end insert_source_seg;
   end;	/* end begin block */
end;
