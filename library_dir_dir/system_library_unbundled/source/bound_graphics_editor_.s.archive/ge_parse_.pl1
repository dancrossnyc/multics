/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


ge_parse_: proc;

/* A parser for command lines to graphic_editor.
   Written 12/16/74 by C. D. Tavares. */
/* Modified 08/14/75 by CDT to be clever in a different way about fake_area;
   optimizer was generating insane "ic*" modifiers!! */
/* Modified 10/20/75 by CDT to make newlines not be read as semicolons if last character on
   input line was a comma. */
/* Last modified 05/25/76 by CDT to make macro replacements get pushed instead of returned,
   so one-to-many replacements would work (parenthesized macro args), and to correct problems
   with termination/non-termination of segments from which parse input strings are read. */

	return;

init:	entry;

dcl 1 in_use aligned static,
    2 stringp pointer initial (null),			/* pointer to string to be parsed */
    2 string_len fixed bin (21) initial (0),		/* length of string to be parsed */
    2 cur_char fixed bin (21) initial (1),		/* position at which to begin next parse */
    2 backup_sw bit (1) aligned initial (""b),		/* return old token, not new one */
    2 spaces_found bit (1) aligned initial (""b),		/* last character was a separator */
    2 already_got_rest bit (1) aligned initial (""b),	/* can't get rest_of_line twice */
    2 terminate_when_done bit (1) aligned initial (""b),	/* terminate (read) segment when done with it */
    2 info_ptr pointer initial (null),			/* pointer to macro args initial (null), if any */
    2 previous_type fixed bin,			/* type of previous token */
    2 previous_token char (200) varying initial ("");	/* previous token itself */

dcl  level fixed bin initial (0) static;

dcl (Dont_terminate initial ("0"b),
     Do_terminate initial ("1"b)) bit (1) static options (constant);

dcl 1 stack (0:20) static aligned,
    2 stringp pointer,			/* pointer to string to be parsed */
    2 string_len fixed bin (21),		/* length of string to be parsed */
    2 cur_char fixed bin (21),		/* position at which to begin next parse */
    2 backup_sw bit (1) aligned,		/* return old token, not new one */
    2 spaces_found bit (1) aligned,		/* last character was a separator */
    2 already_got_rest bit (1) aligned,	/* can't get rest_of_line twice */
    2 terminate_when_done bit (1) aligned,	/* terminate (read) segment when done with it */
    2 info_ptr pointer,			/* pointer to macro args initial (null), if any */
    2 previous_type fixed bin,			/* type of previous token */
    2 previous_token char (200) varying;	/* previous token itself */

	do level = 0 to 20;		/* initialize the array stack (0:20) */
	     stack (level) = in_use;
	end;
	level = 0;		/*do housekeeping and set back to 0*/


	do level = level to 1 by -1;			/* terminate leftover pointers if any */
	     if stack (level).terminate_when_done then
		call hcs_$terminate_noname (stack (level).stringp, code);

	     else if stack (level).info_ptr ^= null then
		free stack (level).info_ptr -> macro_info in (fake_area);
	end;

	in_use.stringp = null;
	in_use.string_len = 0;
	in_use.cur_char = 1;
	in_use.backup_sw, in_use.already_got_rest = ""b;
	in_use.info_ptr = null;
	in_use.previous_token = "";
	in_use.terminate_when_done = ""b;
	level = 0;
	return;

	
push_string: entry (stringp_arg, string_len_arg);		/* gives parser a string to parse */

dcl  stringp_arg pointer parameter,
     string_len_arg fixed bin (21) parameter;

	call common_push (stringp_arg, string_len_arg, null, Dont_terminate);

common_push: proc (stringp_arg, string_len_arg, info_ptr, terminate_switch);

dcl  stringp_arg pointer parameter,
     string_len_arg fixed bin (21) parameter,
     info_ptr pointer parameter,
     terminate_switch bit (1) parameter;

	     level = max (0, level);
	     in_use.already_got_rest = ""b;
	     stack (level) = in_use;
	     level = level + 1;
	     if level > hbound (stack, 1) then signal subscriptrange;
	     in_use.stringp = stringp_arg;		/* copy args into static */
	     in_use.string_len = string_len_arg;
	     in_use.cur_char = 1;			/* initialize other important variables */
	     in_use.info_ptr = info_ptr;
	     in_use.already_got_rest, in_use.backup_sw = ""b;
	     in_use.terminate_when_done = terminate_switch;
	     stack (level) = in_use;
	     return;
	end common_push;

	return;

	
push_string_and_terminate: entry (stringp_arg, string_len_arg);

	call common_push (stringp_arg, string_len_arg, null, Do_terminate);
	return;
	
push_macro: entry (stringp_arg, string_len_arg, info_ptr_arg);

dcl  info_ptr_arg pointer;

%include ge_macro_info;

dcl  fake_area area based (fake_area_p),
     fake_area_p pointer;

	call common_push (stringp_arg, string_len_arg, info_ptr_arg, Dont_terminate);
	return;
	
get_token: entry (token, type, ignore_nl);		/* returns next token and type */

dcl  token char (*) varying parameter,			/* token to be returned */
     type fixed bin parameter,			/* type of returned token */
     ignore_nl fixed bin parameter;

%include ge_token_types;

dcl (null, substr, index, search, verify) builtin;

dcl  subscriptrange condition;

dcl  NL char (1) static initial ("
");

dcl (i, j) fixed bin (21);				/* hack variables */

dcl  octal_sw bit (1) aligned,
     ioa_$rsnnl ext entry options (variable),
     cv_oct_ ext entry (char (*)) returns (fixed bin);

dcl  junk float bin,
     code fixed bin (35);

dcl  com_err_ ext entry options (variable),
     cv_float_ ext entry (char (*), fixed bin (35)) returns (float bin),
     ioa_ ext entry options (variable);

dcl  based_string char (1044480) based (in_use.stringp),	/* two templates for overlaying token */
     based_string_array (1044480) char (1) unaligned based (in_use.stringp);

dcl  terminators char (2) aligned static initial (";
"),						/* semi and NL can terminate lines */
     separator_table char (2) initial ("	 ") static,	/* tab and space can separate tokens */
     alphanumeric_table char (63) static initial		/* these chars only may comprise single names */
    ("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890_"),
     numeric_table char (11) static initial ("1234567890.");

dcl  iox_$get_line ext entry (pointer, pointer, fixed bin (21), fixed bin (21), fixed bin (35)),
     iox_$user_input ext pointer,
     buffer char (200) aligned static,
     nelemt fixed bin (21);

dcl  hcs_$terminate_noname ext entry (pointer, fixed bin (35));

dcl  temp_bit bit (1) aligned;

dcl  template_string char (template_len) based (template_ptr), /* more overlays */
     template_ptr pointer,
     template_len fixed bin (21);

	if in_use.backup_sw then do;			/* wants last token over again */
is_backup:
	     token = in_use.previous_token;		/* use previous token */
	     type = in_use.previous_type;
	     in_use.backup_sw = ""b;
	     return;
	end;

	in_use.backup_sw = ""b;			/* kill indicator */
	in_use.already_got_rest = ""b;

	if level = 0 then if in_use.stringp = null then do; /* no string ever been given */
read_another_line:
		buffer = "";
		call iox_$get_line (iox_$user_input, addr (buffer), length (buffer), nelemt, code);
		if code ^= 0 then do;
		     call com_err_ (code, "ge_parse_$get_token", "Attempting command read.");
		     token = "***ERROR ON READ****";
		     return;
		end;
		in_use.cur_char = 1;
		in_use.stringp = addr (buffer);
		in_use.string_len = nelemt;
		level = 0;
	     end;

get_another_token:
	if in_use.cur_char > in_use.string_len then do;	/* all done string */
pop_stack:     if level = 0 then goto read_another_line;
	     level = level - 1;
	     in_use = stack (level);
	     fake_area_p = null ();			/* just so as not to generate a link */
						/* to free_.   Nobody really uses this anyway! */
	     if stack (level+1).info_ptr ^= null then free stack (level+1).info_ptr -> macro_info in (fake_area);
						/* keeps link to free_ from being generated */
	     else do;
		if stack (level+1).terminate_when_done then
		     call hcs_$terminate_noname (stack (level+1).stringp, 0);
		if level = 0
		then if in_use.cur_char >= in_use.string_len
		     then call ioa_ ("Edit.");
	     end;

	     if in_use.backup_sw then goto is_backup;

	     goto get_another_token;
	end;

	type = Name;				/* assume next token will be name */

	temp_bit = in_use.spaces_found;		/* save this info */
	call strip_blanks;				/* otherwise leading blanks on new lines fail */
	in_use.spaces_found = in_use.spaces_found | temp_bit; /* if spaces found after last or before this */

	call setup_template;			/* lay template over current position */

/* find next character which can not be part of a token.  This is the next break character. */
/* set i to that char - 1, i.e. i = length of next good token. */

	if in_use.spaces_found then do;		/* Next token may be true float number */
	     if based_string_array (in_use.cur_char) = "." /* want to scan for numbers, but not a leading DP */
	     then j = 1;				/* search for numbers from next char, not this one */
	     else j = 0;				/* else try from first char */

	     if index ("1234567890", based_string_array (in_use.cur_char + j)) > 0 then do; /* got a number */
		i = verify (template_string, numeric_table) - 1; /* search for end of it */
		type = Number;			/* for now, anyway */
	     end;
	end;

	if type = Name then i = verify (template_string, alphanumeric_table) - 1; /* assume we have non-number */

	if i = -1 then i = template_len;		/* rest of string */

	else if i = 0 then do;			/* first char was a break, return that char instead */
	     i = 1;
	     type = Break;
	end;

	token = substr (based_string, in_use.cur_char, i); /* send it upstairs */

/* Of course, something made up of "+-." and digits may not be a true number!
   On the other hand, something which was not preceded by a space (which is a
   necessary condition for being a float number in GE) may by an integer numeric qualifier.
   So we prepare to see what the token REALLY is. */

	if type = Break then code = 1;		/* no chance! */
	else junk = cv_float_ ((token), code);		/* see what cv_float_ thinks of it */
	if (code ^= 0 & type = Number) then type = Name;	/* was illegally constructed for a number */
	else if (code = 0 & type = Name) then type = Number; /* was really an integer */

	if token = NL
	then if (ignore_nl ^= 0
	     | (in_use.previous_token = ","))
	     then do;
		in_use.cur_char = in_use.cur_char + 1;
		call strip_blanks;
		goto get_another_token;
	     end;
	     else token = ";";

	if i = 1 then do;				/* may be a special break char/sequence, check */

	     if based_string_array (in_use.cur_char) = ";"
	     then if based_string_array (in_use.cur_char+1) = NL /* no reason to ever return the NL then */
		then in_use.cur_char = in_use.cur_char + 1; /* skip NL */
		else;				/* nugatory */

	     else if based_string_array (in_use.cur_char) = """" then do; /* oh oh, quoted string */
		type = Name;
		in_use.cur_char = in_use.cur_char + 1;	/* prepare to search */
more_charstring:	call setup_template;
		j = index (template_string, """");	/* find next occurrence of quote */
		if j = 0 then j = template_len;	/* no matching quote, use rest of string */
		token = token || substr (template_string, 1, j); /* conc rest of found string */
		in_use.cur_char = in_use.cur_char + j - 1; /* set to what's done, is bumped by 1 later */
		if in_use.cur_char > in_use.string_len then goto exit_block; /* ran out of parsables */
		if based_string_array (in_use.cur_char+1) = """" then do; /* oops, last quote was part of double quote */
		     in_use.cur_char = in_use.cur_char + 2; /* jump to next piece to be searched */
		     goto more_charstring;		/* not concatenating, by the way, that other quote */
		end;
	     end;

	     else if based_string_array (in_use.cur_char) = "/"
	     then if based_string_array (in_use.cur_char+1) = "*" then do; /* is comment */
		     j = index (template_string, "*/"); /* find closing of comment */
		     if j = 0 then j = template_len - 1; /* no closing, use rest of string */
		     in_use.cur_char = in_use.cur_char + j + 2;
		     goto get_another_token;		/* ignore the comment */
		end;

		else;

	     else if based_string_array (in_use.cur_char) = "#" then do;
		type = Name;
		call setup_template;
		if based_string_array (in_use.cur_char+1) = "o" then do;
		     octal_sw = "1"b;
		     in_use.cur_char = in_use.cur_char + 1;
		end;
		else octal_sw = ""b;

		in_use.cur_char = in_use.cur_char + 1;
		call setup_template;

		if octal_sw then j = verify (template_string, "01234567") -1;
		else j = verify (template_string, "0123456789") - 1;

		if j = -1 then j = template_len;

		token = substr (based_string, in_use.cur_char, j);
		in_use.cur_char = in_use.cur_char + j - 1; /* will be bumped by 1 later */

		if octal_sw then do;
		     j = cv_oct_ ((token));
		     call ioa_$rsnnl ("^d", token, 0, j);
		end;

		token = "#" || token;
	     end;

exit_block: end;

	in_use.cur_char = in_use.cur_char + i;		/* go to next char to be looked at */

	call strip_blanks;

strip_blanks: proc;
	     call setup_template;			/* prepare to search */

	     in_use.spaces_found = "1"b;

	     i = verify (template_string, separator_table) - 1; /* skip all the blanks and tabs */
	     if i = -1 then i = template_len;

	     if i > 0 then in_use.cur_char = in_use.cur_char + i; /* if there were any */
	     else if token = "-" | token = "+"
	     then in_use.spaces_found = "1"b;
	     else if token ^= ";" then in_use.spaces_found = ""b;

	end strip_blanks;

	in_use.previous_token = token;
	in_use.previous_type = type;

	if in_use.info_ptr = null then return;		/* no macro substitution to do */
	if type = Break then return;

/* Macro substitution is done here. */

	do i = 1 to in_use.info_ptr -> macro_info.n_args
		while (token ^= in_use.info_ptr -> macro_info.argument (i));
	end;

	if i > in_use.info_ptr -> macro_info.n_args then return; /* no match */

	call common_push (addr (addr (in_use.info_ptr -> macro_info.replacement (i)) -> based_varying_string.string),
	     length (in_use.info_ptr -> macro_info.replacement (i)), null, Dont_terminate);
						/* we push it, because parenthesized macro args can
						   contain more than one token */

	in_use.spaces_found, stack (level).spaces_found = "1"b;
						/* in case next thing is a float number, we can't substitute for part of pathnames. */
	goto get_another_token;


	
backup:	entry;					/* to make us reuse last token */

	in_use.backup_sw = "1"b;			/* say we want to reuse previous token */
	return;


	
peek_rest_of_line: entry (token);			/* lookahead entry */

dcl  peek_entry bit (1) aligned initial (""b);

	peek_entry = "1"b;

get_rest_of_line: entry (token);			/* so spaces, tabs, etc. remain significant */

	if in_use.stringp = null then do;		/* no string set yet */
rest_null:     token = "";
	     return;
	end;

	if in_use.cur_char > in_use.string_len then goto rest_null;

	if in_use.already_got_rest then goto rest_null;

	call setup_template;			/* prepare to search */

	i = search (template_string, terminators);	/* find first NL or semi */
	if i = 0 then i = 1;
	token = substr (based_string, in_use.cur_char, i-1); /* return string up to that point */

	if peek_entry then return;

	in_use.already_got_rest = "1"b;
	in_use.backup_sw = ""b;

	in_use.cur_char = in_use.cur_char + i;
	call strip_blanks;
	return;

flush_rest_of_line: entry;

	in_use.cur_char = in_use.string_len + 1;	/* force EOF */
	in_use.backup_sw = ""b;
	in_use.already_got_rest = ""b;
	return;

setup_template: proc;				/* to set up based search string */

	     template_len = in_use.string_len - in_use.cur_char + 1; /* length of entire string remaining */
	     template_len = max (template_len, 0);
	     template_ptr = addr (based_string_array (in_use.cur_char)); /* pointer to unused portion of string */
	     return;

	end setup_template;

     end ge_parse_;
