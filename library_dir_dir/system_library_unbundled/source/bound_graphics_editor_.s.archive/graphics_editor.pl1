/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

graphics_editor: graphic_editor: ge: proc;

/* This procedure is an interactive editor which allows a user to construct, edit, modify, store,
   retrieve, and display graphic entities.
   Written about January 1975 by C. D. Tavares
   Modified 07/14/75 by CDT to make put and get behave better.
   Modified 08/08/75 by CDT to insert a return so that "remove" wouldn't run into "macro",
   to make explicit allocations into implicits, to add "replay -all".
   Modified 10/15/75 by CDT to add star processing to list command, make quit command
   check for anything else on command line, to presort commands and system symbols, and to make remove try to
   remove macros if it doesn't find a symbol of that name.
   Modified 06/25/76 by CDT to add system macros (circle, arc...)
   Modified 12/78 by CDT to add varying_text and vtext_type.
   Modified 08/20/79 by CDT to add "." request.
   Modified December 1982 by C. Hornig to add "increment" and "synchronize" requests.
*/

dcl  fatal bit (1) aligned;				/* if on, we will exit on any error */

dcl  p pointer;

/* Commands and system symbols should always be kept in alphabetical order in the following
   structures.  This makes the job of the list command much easier. */

/* NOTE:  The structuring of commands, system symbols, symbols, and macros are EXACTLY THE SAME as far as structuring
   of each element (1 or 2 varying strings interspersed with fixed bin).  This correspondence should
   not be changed without the changer taking a hard look at list_proc (internam proc) which treats
   them all largely the same. */

dcl 1 command_list aligned static options (constant),
    2 n_commands fixed bin initial (21),
    2 each_command (21) aligned,
      3 commands (2) char (32) varying initial
      (						/* index	vector	*/
     "alter", "al",					/* 1	19	*/
     "display", "di",				/* 2	1	*/
     "execute", "exec",				/* 3	3	*/
     "get", "get",					/* 4	10	*/
     "help", "?",					/* 5	16	*/
     "increment", "inc",				/* 6	20	*/
     "input", "input",				/* 7	13	*/
     "list", "ls",					/* 8	2	*/
     "macro", "macro",				/* 9	7	*/
     "put", "put",					/* 10	11	*/
     "quit", "q",					/* 11	14	*/
     "read", "read",				/* 12	12	*/
     "remove", "remove",				/* 13	6	*/
     "replay", "replay",				/* 14	5	*/
     "restart", "restart",				/* 15	15	*/
     "save", "save",				/* 16	9	*/
     "show", "show",				/* 17	4	*/
     "synchronize", "sync",				/* 18	21	*/
     "use", "use",					/* 19	8	*/
     "vtext_type", "vtype",				/* 20	17	*/
     ".", "."),					/* 21	18	*/
      3 command_vector fixed bin initial
 (19, 1, 3, 10, 16, 20, 13, 2, 7, 11, 14, 12, 6, 5, 15, 9, 4, 21, 8, 17, 18);

dcl 1 system_symbol_list aligned static options (constant),
    2 n_system_symbols fixed bin initial (17),
    2 each_system_symbol (17) aligned,
      3 system_symbols (2) char (32) varying initial
      (						/* index	vector	*/
     "array", "array",				/* 1	8	*/
     "blink", "blk",				/* 2	12	*/
     "color", "color",				/* 3	17	*/
     "datablock", "data",				/* 4	16	*/
     "intensity", "int",				/* 5	10	*/
     "linetype", "lin",				/* 6	11	*/
     "list", "list",				/* 7	9	*/
     "null", "null",				/* 8	6	*/
     "point", "pnt",				/* 9	5	*/
     "rotation", "rot",				/* 10	14	*/
     "scaling", "scl",				/* 11	15	*/
     "sensitivity", "sns",				/* 12	13	*/
     "setpoint", "spt",				/* 13	2	*/
     "setposition", "sps",				/* 14	1	*/
     "shift", "sft",				/* 15	4	*/
     "text", "text",				/* 16	7	*/
     "vector", "vec"),				/* 17	3	*/

      3 system_symbol_vector fixed bin initial
	     (8, 12, 17, 16, 10, 11, 9, 6, 5, 14, 15, 13, 2, 1, 4, 7, 3);

dcl 1 system_macro_list aligned static options (constant),
    2 n_system_macros fixed bin initial (6),
    2 each_system_macro (6) aligned,
      3 system_macros (2) char (32) varying initial
      (						/* index	vector	*/
     "arc", "arc",					/* 1	1	*/
     "box", "box",					/* 2	2	*/
     "circle", "crc",				/* 3	3	*/
     "ellipse", "ellipse",				/* 4	4	*/
     "polygon", "polygon",				/* 5	5	*/
     "varying_text", "vtext"),			/* 6	6	*/

      3 system_macro_vector fixed bin initial
 (1, 2, 3, 4, 5, 6);

dcl  char_count fixed bin (21),
     input_ptr pointer;

dcl  input_dir char (168),
     input_entry char (32),
     temp_string char (168),
     prog_dir char (168),
     prog_ent char (32),
     me_bc fixed bin (24),
     me_ptr pointer,
     library_description char (64),
     my_date_time char (24),
     mode fixed bin;

dcl 1 search_libraries (2) static options (constant),
    2 dir char (168) initial (">unbundled", ">exl>graphics_system"),
    2 description char (64) initial ("Installed", "Experimental");

dcl (ioa_, com_err_, com_err_$suppress_name) ext entry options (variable);

dcl  hcs_$initiate_count ext entry (char (*), char (*), char (*), fixed bin (35), fixed bin, pointer, fixed bin (35)),
     hcs_$initiate ext entry (char (*), char (*), char (*), fixed bin, fixed bin, pointer, fixed bin (35)),
     hcs_$terminate_noname ext entry (pointer, fixed bin (35)),
     hcs_$fs_get_path_name ext entry (pointer, char (*), fixed bin, char (*), fixed bin (35)),
     hcs_$status_mins ext entry (pointer, fixed bin, fixed bin (24), fixed bin (35)),
     hcs_$fs_get_mode ext entry (pointer, fixed bin, fixed bin (35)),
     date_time_ ext entry (fixed bin (71), char (*)),
     object_info_$display ext entry (pointer, fixed bin (24), pointer, fixed bin (35));

dcl  error_table_$moderr ext fixed bin (35);

dcl 1 definitive_environment aligned,
    2 stack_p pointer,
    2 command_p pointer,
    2 system_symbol_p pointer,
    2 system_macro_p pointer,
    2 sym_p pointer,
    2 mac_p pointer,
    2 areap pointer,
    2 at_ptr pointer,
    2 error_message char (100) varying,
    2 external_char_table aligned,
      3 dirname char (168) unaligned,
      3 ename char (32) unaligned,
    2 default_char_table aligned like external_char_table,
    2 cur_char_table aligned like external_char_table;

dcl  environment_ptr pointer;

dcl (i, file_count) fixed bin,
     bc fixed bin (35);

dcl (program_interrupt,
     cleanup) condition;

dcl  expand_pathname_ ext entry (char (*), char (*), char (*), fixed bin (35)),
     expand_pathname_$add_suffix ext entry (char (*), char (*), char (*), char (*), fixed bin (35));

dcl  cu_$arg_count ext entry (fixed bin),
     cu_$arg_ptr ext entry (fixed bin, pointer, fixed bin, fixed bin (35)),
     ap pointer,
     al fixed bin,
     arg based (ap) char (al),
     code fixed bin (35);

dcl  get_temp_segment_ ext entry (char (*), pointer, fixed bin (35)),
     release_temp_segment_ ext entry (char (*), pointer, fixed bin (35)),
     get_pdir_ ext entry returns (char (168)),
     area_ ext entry (fixed bin (35), pointer);

dcl  token char (200) varying,			/* active token from command line */
     input_line char (200) varying,			/* for peek_rest_of_line */
    (addr, baseno, baseptr, before, codeptr, dim, hbound, index, length, null, search, size, substr, verify) builtin,
    (ge_parse_$push_string, ge_parse_$push_string_and_terminate) ext entry (pointer, fixed bin (21)),
     ge_parse_$init ext entry,
     ge_parse_$get_rest_of_line ext entry (char (*) varying),
     ge_parse_$peek_rest_of_line ext entry (char (*) varying),
     ge_parse_$get_token ext entry (char (*) varying, fixed bin, fixed bin),
     type fixed bin,
     ge_parse_$backup ext entry;

dcl  default_pgs_dir char (168) initial (""),
     default_pgs_entry char (32) initial ("");

%include ge_data_structures;

%include ge_token_types;
	
%include gch_entry_dcls;

%include object_info;
dcl 1 oi like object_info aligned automatic;

	fatal = "1"b;				/* any errors now, we will exit */

	call get_temp_segment_ ("graphics_editor", areap, code);
	if areap = null then call crump (code, "While creating temp seg.");

	call area_ (261120, areap);

	call ge_parse_$init;

	call cu_$arg_count (file_count);		/* get number of input files to parse */

	if file_count > 0 then do i = file_count to 1 by -1; /* push the files */
	     call cu_$arg_ptr (i, ap, al, code);	/* get arg */
	     call expand_pathname_$add_suffix (arg, "ge", input_dir, input_entry, code); /* make abs. pathname */
	     if code ^= 0 then call crump (code, arg);	/* oops */
	     call hcs_$initiate_count (input_dir, input_entry, "", bc, 0, input_ptr, code);
	     if input_ptr = null then call crump (code, "^a>^a");
	     char_count = bc / 9;
	     call hcs_$fs_get_mode (input_ptr, mode, code);
	     if code ^= 0 then call crump (code, "^a>^a");
	     if mode < 1000b then call crump (error_table_$moderr, "^a>^a");
	     call ge_parse_$push_string_and_terminate (input_ptr, char_count);
	end;

	else call ge_parse_$push_string (null, 0);	/* force it to say "Edit." */

	call graphic_manipulator_$init (code);
	if code ^= 0 then call crump (code, "Initializing working graphic segment.");
	call graphic_chars_$init;
	call graphic_chars_$get_table (external_char_table.dirname, external_char_table.ename);
	default_char_table = external_char_table;
	cur_char_table = external_char_table;

	environment_ptr = addr (definitive_environment);

	max_macros = 10;
	allocate macros in (my_area);

	max_symbols = 50;
	allocate symbols in (my_area);

	cur_elements = 4093;
	allocate assembly_tuple in (my_area);

	max_frames = 50;
	allocate stack in (my_area);
	stack.level = 0;

	system_symbol_p = addr (system_symbol_list);
	system_macro_p = addr (system_macro_list);
	command_p = addr (command_list);

	on program_interrupt begin;
	     call ge_parse_$init;			/* clean out pending file reads */
	     call ge_parse_$push_string (null, 0);	/* Force it to say "Edit." */
	     goto listener_loop;
	end;

	on cleanup call cleanerup;

	fatal = ""b;

listener_loop:
	do while ("1"b);				/* forever */
	     do stack.level = stack.level to 1 by -1;
		free stack (level).tuple_ptr -> tuple in (my_area);
	     end;
	     code = 0;
	     call comline_eval;			/* evaluate command line */
	end;

returner:
	call cleanerup;
	return;

cleanerup: proc;

	     call release_temp_segment_ ("graphics_editor", areap, code);

	     call graphic_chars_$set_table (external_char_table.dirname, external_char_table.ename, code);

	end cleanerup;

comline_eval: proc;

dcl (i, j) fixed bin;


dcl  ge_eval_$tuple_evaluator ext entry (pointer, fixed bin (35)),
     ge_interpret_$show ext entry (pointer, fixed bin (35)),
     ge_interpret_$replay ext entry (pointer, fixed bin (35));

	     call ge_parse_$get_token (token, type, stack.level); /* test to see if this is a command */
	     if token = ";" then return;

	     do j = 2 to 1 by -1;			/* short name more probable match */
		do i = 1 to n_commands;
		     if token = commands (i, j) then goto command_label (command_vector (i));
		end;
	     end;

/* it is not a command; must be an assignment */

	     call ge_parse_$backup;

	     call ge_parse_$peek_rest_of_line (input_line);
	     if index (input_line, "=") = 0 then call crump (code, "Not a command.");

	     call ge_eval_$tuple_evaluator (environment_ptr, code);
	     if code ^= 0 then call complain;
	     return;

/* dispatch table for commands */

command_label (1):					/* display */

	     call ge_eval_$tuple_evaluator (environment_ptr, code);
	     if code ^= 0 then call complain;

	     tuple_p = stack.tuple_ptr (1);

	     do i = 1 to tuple.n_elements;
		if i = 1 then call graphic_compiler_$display (tuple.rvalue (1), code);
		else call graphic_compiler_$display_append (tuple.rvalue (i), code);
		if code ^= 0 then call crump (code, "While displaying.");
	     end;

	     return;

command_label (2):					/* list */

dcl (commands_bit, symbols_bit, system_symbols_bit, macros_bit, default_bit) bit (1) aligned;

dcl  arg_array (50) char (32),
     arg_matched (50) bit (1),
     arg_count fixed bin;

dcl  max_list_length fixed bin;

dcl  check_star_name_$entry ext entry (char (*), fixed bin (35)),
     match_star_name_ ext entry (char (*) aligned, char (*), fixed bin (35));

dcl  k fixed bin;

	     arg_count = 0;				/* initialize random variables */
	     commands_bit, symbols_bit, macros_bit, system_symbols_bit = ""b;
	     call ge_parse_$get_rest_of_line (input_line); /* parse the arguments as a big chunk */

	     do while (input_line ^= "");		/* knock off tokens using space and tab as only separators */

		i = verify (input_line, "	 ");	/* strip tabs and spaces */
		if i > 0
		then input_line = substr (input_line, i);
		i = search (input_line, "	 ;");	/* search for next tab, space, or semi */
		if i > 0 then do;			/* get one token */
		     token = substr (input_line, 1, i-1);
		     input_line = substr (input_line, i+1);
		end;
		else do;				/* rest of line is one token */
		     token = input_line;
		     input_line = "";
		end;

		if token = ";" then;		/* ignore and loop again */
		else if token = "-all" | token = "-a"
		then commands_bit, symbols_bit, macros_bit, system_symbols_bit = "1"b;
		else if token = "-symbols" | token = "-sym" then symbols_bit = "1"b;
		else if token = "-system" | token = "-sys" then system_symbols_bit = "1"b;
		else if token = "-commands" | token = "-com" then commands_bit = "1"b;
		else if token = "-macros" | token = "-mc" then macros_bit = "1"b;
		else if substr (token, 1, 1) = "-"	/* some unknown option */
		then call crump (0, "Bad option to list: " || token);

/* if we are here, it is a "starname". */

		else do;
		     arg_count = arg_count + 1;
		     if arg_count > hbound (arg_array, 1) then call crump (0, "Too many arguments to list command.");
		     arg_array (arg_count) = token;
		     call check_star_name_$entry (arg_array (arg_count), code); /* is star syntax ok? */
		     if code > 3 then call crump (code, arg_array (arg_count)); /* no */
		end;

	     end;

	     default_bit = ^ (commands_bit | symbols_bit | system_symbols_bit | macros_bit);
						/* on IFF no options explicitly specified */

	     if arg_count = 0 then do;
		arg_array (1) = "**";		/* use default of "everything" */
		arg_count = 1;
	     end;

	     if commands_bit
	     then call list_proc ("command", addr (commands (1, 1)), dim (commands, 1), 2, ""b, ""b, ""b);

	     if system_symbols_bit
	     then do;
		call list_proc ("system symbol", addr (system_symbols (1, 1)), dim (system_symbols, 1), 2, ""b, ""b, ""b);
		call list_proc ("system macro", addr (system_macros (1, 1)), dim (system_macros, 1), 2, ""b, ""b, ""b);
	     end;

	     if (symbols_bit | default_bit)
	     then call list_proc ("symbol", addr (symbol (1)), n_symbols, 1, "1"b, "1"b, "0"b);

	     if (macros_bit | default_bit)
	     then call list_proc ("macro", addr (macro (1)), n_macros, 1, "1"b, "1"b, default_bit);

	     call ioa_ ("");
	     return;


list_proc:     procedure (item_name, item_ptr, n_items, n_subitems, sort_necessary, print_pgs, ignore_nomatch);

dcl (item_name char (*),
     item_ptr pointer,
    (n_items, n_subitems) fixed bin,
    (sort_necessary, print_pgs, ignore_nomatch) bit (1) aligned) parameter;

dcl 1 based_item aligned based (item_ptr),
    2 xxx (n_items),
      3 string (n_subitems) char (32) varying,
      3 pad fixed bin;

dcl  suffix char (1);

dcl  based_chitem char (32) varying based,
     based_charray (2) char (32) varying based;

dcl  sort_items_$varying_char ext entry (pointer);

dcl 1 sort_structure aligned,
    2 useful_names fixed bin (24),
    2 sort_ptrs (n_items) pointer unaligned;

/* This list procedure acts in what looks like an inefficient way.  It runs down the symbols to be listed
   and checks ALL the starnames against EACH ONE, continuing even after a match is found.  This is
   done because we want to keep a record of which starnames have been satisfied and which haven't.
   This way, if a symbol satisfies more than one starname, both starnames earn brownie points
   for winning. */

		useful_names = 0;			/* to start out */
		arg_matched = ""b;

		do i = 1 to n_items;		/* search down table to match names */
		     found = ""b;
		     do j = 1 to arg_count;		/* match each name against ALL starnames */
			do k = 1 to n_subitems;	/* catches aliases of sys. symbs. and commands */
			     call match_star_name_ ((based_item.string (i, k)), arg_array (j), code);
			     if code = 0 then do;	/* it matched! */
				arg_matched (j) = "1"b; /* give this starname an OK */
				if ^found then do;	/* add name to the list to be sorted */
				     found = "1"b;
				     useful_names = useful_names + 1;
				     sort_ptrs (useful_names) = addr (based_item.string (i, 1));
				end;
			     end;
			end;
		     end;
		end;

		if useful_names = 0			/* nothing at all matched */
		then if ^ignore_nomatch
		     then call ioa_ ("^/No ^as selected.", item_name);

		     else;			/* do nothing; we were in default case, and looking for macros. */

		else do;
		     if useful_names = 1 then suffix = "";
		     else suffix = "s";

		     if print_pgs & (substr (default_pgs_dir, 1, 4) ^= "")
		     then call ioa_ ("^/^d ^a^a in ^a.pgs:^/", useful_names,
			item_name, suffix, before (default_pgs_entry, ".pgs"));
		     else call ioa_ ("^/^d ^a^a:^/", useful_names, item_name, suffix);

		     if sort_necessary		/* if not presorted list */
		     then call sort_items_$varying_char (addr (sort_structure));

		     found = ""b;
		     do j = 1 to arg_count;		/* print out starnames that didn't match anything */
			if ^arg_matched (j) then do;
			     call com_err_$suppress_name (0, "graphics_editor", "(^a not found)", arg_array (j));
			     found = "1"b;
			end;
		     end;

		     if found then call com_err_$suppress_name (0, "graphics_editor", "	");
						/* only way to get a blank line out of it! */

		     do i = 1 to useful_names;	/* list them */
			if n_subitems = 2 then do;
			     if sort_ptrs (i) -> based_charray (1) ^= sort_ptrs (i) -> based_charray (2) then
				call ioa_ ("^5x^14a (^a)", sort_ptrs (i) -> based_charray (1),
				sort_ptrs (i) -> based_charray (2));
			     else call ioa_ ("^5x^14a", sort_ptrs (i) -> based_charray (1));
			end;

			else call ioa_ ("^5x^a", sort_ptrs (i) -> based_chitem);
		     end;
		end;

		return;

	     end list_proc;


command_label (3):					/* exec */

dcl  cu_$cp ext entry (pointer, fixed bin, fixed bin),
     varying_command_line char (132) varying;

	     call ge_parse_$get_rest_of_line (varying_command_line);

	     begin;

dcl  command_line char (length (varying_command_line)) aligned;

		command_line = varying_command_line;

		call cu_$cp (addr (command_line), length (varying_command_line), 0);
	     end;

	     call ge_parse_$push_string (null, 0);	/* get an "Edit" to appear when all done */
	     return;

command_label (4):					/* show */

	     call ge_eval_$tuple_evaluator (environment_ptr, code);
	     if code ^= 0 then call complain;

	     call ge_interpret_$show (environment_ptr, code);
	     if code ^= 0 then call complain;

	     return;

command_label (5):					/* replay */

	     call ge_parse_$peek_rest_of_line (input_line);

	     if input_line = "-all" | input_line = "-a"	/* dump ALL symbols */
	     then begin;

dcl  v_all_names varying char (n_symbols * 34 + 2);
dcl  all_names char (n_symbols * 34 + 2);

		call ge_parse_$get_rest_of_line ("");	/* flush it without flushing EVERYTHING */

		v_all_names = "";

		do i = 1 to n_symbols;
		     v_all_names = v_all_names || symbols.name (i) || ", "; /* build line */
		end;

		if length (v_all_names) = 0 then call crump (0, "No defined symbols exist.");
		else all_names = substr (v_all_names, 1, length (v_all_names) - 2) || ";";

		call ge_parse_$push_string (addr (all_names), length (all_names));

		call ge_eval_$tuple_evaluator (environment_ptr, code);
						/* This done inside block so that storage for the */
						/* just-pushed string is still valid during evaluation */
	     end;

	     else call ge_eval_$tuple_evaluator (environment_ptr, code);
	     if code ^= 0 then call complain;

	     call ge_interpret_$replay (environment_ptr, code);
	     if code ^= 0 then call complain;
	     return;

command_label (6):					/* remove */

dcl  found bit (1) aligned;

	     found = ""b;

	     call ge_parse_$get_token (token, type, stack.level);
	     if token = ";" then call crump (0, "No arguments to remove.");

	     do while (token ^= ";");

		found = ""b;

		do i = 1 to n_symbols while (^found);

		     if symbol (i).name = token then do;
			do j = i to n_symbols - 1;
			     symbol (j) = symbol (j+1);
			end;

			n_symbols = n_symbols - 1;

			call graphic_manipulator_$remove_symbol ((token), code);
			if code ^= 0 then call com_err_$suppress_name (code, "graphics_editor", token);
			found = "1"b;
		     end;
		end;

		if ^found then do i = 1 to n_macros while (^found);

		     if macro (i).name = token then do;
			do j = i to n_macros - 1;
			     macro (j) = macro (j+1);
			end;

			n_macros = n_macros - 1;

			call graphic_manipulator_$remove_symbol ("!macro_" || token, code);
			if code ^= 0 then call com_err_$suppress_name (code, "graphics_editor", token);
			found = "1"b;
		     end;
		end;

		if ^found then call com_err_$suppress_name (0, "graphics_editor", """^a"" not found.", token);

		call ge_parse_$get_token (token, type, stack.level);
	     end;

	     return;

command_label (7):					/* macro */

dcl  macro_name char (32),
     arg_node (21) fixed bin (18),
     macro_node fixed bin (18),
     macro_arg (20) char (32) varying;

dcl  temp_p pointer;

dcl (ge_interpret_$show_macro,
     ge_interpret_$replay_macro) ext entry (pointer, fixed bin (35));

%include ge_macro_info;

	     call ge_parse_$get_token (token, type, stack.level);

	     if token = "show" then do;
		call ge_interpret_$show_macro (environment_ptr, code);
		if code ^= 0 then call complain;
		return;
	     end;

	     if token = "replay" then do;
		call ge_interpret_$replay_macro (environment_ptr, code);
		if code ^= 0 then call complain;
		return;
	     end;

/* If we are here, this is a macro assignment. */
	     do i = 1 to n_system_symbols while (token ^= system_symbols (i, 1) & token ^= system_symbols (i, 2));
	     end;

	     if i <= n_system_symbols then call crump (0, token || " is a system symbol.");

	     do i = 1 to n_system_macros while (token ^= system_macros (i, 1) & token ^= system_macros (i, 2));
	     end;

	     if i <= n_system_macros then call crump (0, token || " is a system macro.");

	     do i = 1 to n_symbols while (token ^= symbol.name (i));
	     end;

	     if i <= n_symbols then call crump (0, token || " has been previously defined as a symbol.");

	     macro_name = token;

	     call ge_parse_$get_token (token, type, stack.level);

	     do i = 1 to 20 while (type = Name);
		macro_arg (i) = token;
		call ge_parse_$get_token (token, type, stack.level);
	     end;

	     if i > 20 then call crump (0, "Too many args to macro " || macro_name);

	     if token ^= "=" then call crump (0, token || " encountered instead of ""="" in macro " || macro_name);

	     n_macro_args = i - 1;

	     macro_bits_l = size (macro_arg (1)) * 36;
	     do i = 1 to n_macro_args;
		macro_bits_p = addr (macro_arg (i));
		arg_node (i) = graphic_manipulator_$create_data (macro_bits_l, based_macro_bits, code);
		if code ^= 0 then
internal_macro_error:    call crump (code, "While assembling macro.");
	     end;

	     call ge_parse_$get_rest_of_line (macro_def);
	     macro_bits_p = addr (macro_def);
	     macro_bits_l = size (macro_def) * 36;

	     arg_node (i) = graphic_manipulator_$create_data (macro_bits_l, based_macro_bits, code);
	     if code ^= 0 then goto internal_macro_error;

	     do i = 1 to n_macros while (macro.name (i) ^= macro_name);
	     end;

	     if i > n_macros then n_macros = i;

	     if n_macros > cur_max_macros then do;
		max_macros = cur_max_macros + 30;
		temp_p = mac_p;
		allocate macros in (my_area);

		do j = 1 to temp_p -> n_macros - 1;
		     mac_p -> macros.macro (j) = temp_p -> macros.macro (j);
		end;

		mac_p -> n_macros = temp_p -> n_macros;

		free temp_p -> macros in (my_area);

	     end;

	     macro.name (i) = macro_name;
	     macro_name = "!macro_" || macro_name;

	     macro_node = graphic_manipulator_$create_array (arg_node, n_macro_args + 1, code);
	     if code ^= 0 then goto internal_macro_error;

	     macro.node_value (i) = graphic_manipulator_$assign_name (macro_name, macro_node, code);
	     if code ^= 0 then goto internal_macro_error;

	     return;


command_label (8):					/* use */

dcl  node_array (1000) fixed bin (18),
     varying_pathname char (168) varying;

	     call get_save_use_path ("use.");

/* ---------------------------------- */

get_save_use_path: proc (myname);

dcl  myname char (*);

		call ge_parse_$get_rest_of_line (varying_pathname);
		temp_string = varying_pathname;
		if temp_string = ""
		then if default_pgs_dir = ""
		     then call crump (0, "No file name supplied for " || myname);

		     else return;			/* use defaults we already have */

		call expand_pathname_ (temp_string, default_pgs_dir, default_pgs_entry, code);
		if code ^= 0 then do;
		     default_pgs_dir, default_pgs_entry = "";
		     call crump (code, temp_string);
		end;

		return;
	     end get_save_use_path;

/* ---------------------------------- */

	     call graphic_manipulator_$use_file (default_pgs_dir, default_pgs_entry, code);
	     if code ^= 0 then do;
		default_pgs_dir, default_pgs_entry = "";
		call crump (code, "Attempting to use PGS.");
	     end;

	     n_symbols = 0;

	     call pick_up_symbols;

/* ---------------------------------- */

pick_up_symbols: proc;

dcl (i, j, k) fixed bin;

		call graphic_manipulator_$examine_symtab (node_array, i, code);
		if code ^= 0 then call crump (code, "Examining symbol table");

		if i + 30 > cur_max_symbols then do;
		     free sym_p -> symbols in (my_area);
		     max_symbols = i + 50;
		     allocate symbols in (my_area);
		end;

		if i + 20 > cur_max_macros then do;
		     free mac_p -> macros in (my_area);
		     max_macros = i + 30;
		     allocate macros in (my_area);
		end;


		n_symbols, n_macros = 0;

		do k = 1 to i;
		     call graphic_manipulator_$examine_symbol (node_array (k), 0,
			j, temp_string, code);
		     if code ^= 0 then call crump (code, "While examining some symbol");
		     if substr (temp_string, 1, 7) = "!macro_" then do;
			n_macros = n_macros + 1;
			macro (n_macros).name = substr (temp_string, 8, j-7);
			macro (n_macros).node_value = node_array (k);
		     end;

		     else if substr (temp_string, 1, 10) = "!sysmacro." then; /* do nothing, system macro */

		     else do;
			n_symbols = n_symbols + 1;
			symbols.node_value (n_symbols) = node_array (k);
			symbols.name (n_symbols) = substr (temp_string, 1, j);
		     end;
		end;

	     end pick_up_symbols;

/* ---------------------------------- */

	     return;


command_label (9):					/* save */

	     call get_save_use_path ("save.");

	     call graphic_manipulator_$save_file (default_pgs_dir, default_pgs_entry, code);
	     if code ^= 0 then do;
		default_pgs_dir, default_pgs_entry = "";
		call crump (code, "Saving into PGS.");
	     end;

	     return;

command_label (10):					/* get */

dcl  merge_code fixed bin,
     error_table_$noentry ext fixed bin (35);

dcl  put_and_get_dirname char (168),
     put_and_get_entryname char (32);

	     call parse_get_put_options ("get.");

/* ---------------------------------- */

parse_get_put_options: proc (myname);

dcl  varying_pname char (168) varying,
     error_table_$badopt ext fixed bin (35),
     myname char (*) parameter;

		merge_code = On_dup_error;

		put_and_get_dirname = default_pgs_dir;	/* set up put/get PGS defaults */
		put_and_get_entryname = default_pgs_entry;

		do i = 1 to 2;
		     call ge_parse_$get_token (token, type, stack.level);

		     if token = "-" then do;		/* is an option */
			call ge_parse_$get_token (token, type, stack.level);
			if token = "safe" then merge_code = On_dup_error;
			else if token = "force" then merge_code = On_dup_source;
			else if token = "replace_only" then merge_code = On_dup_target_then_nulls;
			else if token = "rpo" then merge_code = On_dup_target_then_nulls;
			else if token = "replace_all" then merge_code = On_dup_target_then_source;
			else if token = "rpa" then merge_code = On_dup_target_then_source;
			else call crump (error_table_$badopt, "-" || token);
		     end;

		     else if substr (token, 1, 1) = "(" then do; /* is a pathname */
			varying_pname = "";

			call ge_parse_$get_token (token, type, stack.level);

			do while (token ^= ")");
			     varying_pname = varying_pname || token;
			     call ge_parse_$get_token (token, type, stack.level);
			end;

			call expand_pathname_ (substr (varying_pname, 1),
			     put_and_get_dirname, put_and_get_entryname, code);
			if code ^= 0 then call crump (code, (varying_pname));

		     end;

		     else do;
			call ge_parse_$backup;	/* must have been a symbol */
			i = 3;			/* kill looping */
		     end;

		end;

		return;
	     end parse_get_put_options;

/* ---------------------------------- */


	     call ge_parse_$get_token (token, type, stack.level);

	     if token = ";" then call crump (0, "No symbols to get.");

	     do while (token ^= ";");

		found = ""b;

		do i = 1 to 2 while (^found);		/* try symbol first, then as macro */
		     call graphic_manipulator_$get_struc (put_and_get_dirname, put_and_get_entryname,
			(token), merge_code, code);
		     if code = 0 then found = "1"b;	/* found symbol */

		     else if code = error_table_$noentry
		     then call crump (code, "Segment " || put_and_get_entryname);

		     else if code = graphic_error_table_$lsm_sym_search
		     then token = "!macro_" || token;	/* add the macro prefix, try again */

		     else call crump (code, "Getting symbol """ || token || """.");
		end;

		if ^found then call com_err_$suppress_name (code, "graphics_editor", "Getting symbol ""^a"".", substr (token, 15));

		call ge_parse_$get_token (token, type, stack.level);
	     end;

	     call pick_up_symbols;

	     return;

command_label (11):					/* put */

dcl  graphic_error_table_$lsm_sym_search fixed bin (35) external;

	     call parse_get_put_options ("put.");

	     call ge_parse_$get_token (token, type, stack.level);

	     if token = ";" then call crump (0, "No symbols to put.");

	     do while (token ^= ";");

		found = ""b;

		do i = 1 to 2 while (^found);		/* try symbol first, then as macro */
		     call graphic_manipulator_$put_struc (put_and_get_dirname, put_and_get_entryname,
			(token), merge_code, code);
		     if code = 0 then found = "1"b;

		     else if code = graphic_error_table_$lsm_sym_search
		     then token = "!macro_" || token;	/* Add the macro prefix, try again */

		     else call crump (code, "Putting symbol """ || token || """.");
		end;

		if ^found then call com_err_$suppress_name (code, "graphics_editor", "Putting symbol ""^a"".", substr (token, 15));

		call ge_parse_$get_token (token, type, stack.level);
	     end;

	     return;


command_label (13):					/* input */

dcl  device_type fixed bin,
     input_node fixed bin (18);

	     device_type = Any_device;

	     call ge_parse_$get_token (token, type, stack.level);

	     if token = ";" then call crump (0, "No arguments to input.");

	     do while (token ^= ";");

		if token = "(" then do;		/* parse device name */

		     call ge_parse_$get_token (token, type, stack.level);

		     if type ^= Name then
not_an_input_device:	call crump (0, "Not an input device name: " || token);

		     if token = "undefined" /* joker */ then goto not_an_input_device;

		     do device_type = 1 to 63 while (Input_device_names (device_type) ^= token);
		     end;

		     if device_type > 63 then goto not_an_input_device;

		     call ge_parse_$get_token (token, type, stack.level);
		     if token ^= ")" then call crump (0, "No "")"" before " || token);

		     call ge_parse_$get_token (token, type, stack.level);
		end;

		else if type = Name
		then do while (type = Name);

		     input_node = graphic_operator_$what (device_type, 0, code);
		     if code ^= 0 then call com_err_$suppress_name (code, "graphics_editor", "Input for ^a", token);

		     else do;
			input_node = graphic_manipulator_$assign_name ((token), (input_node), code);
			if code ^= 0 then call crump (code, "Internal error creating " || token);

			do i = 1 to n_symbols while (symbol (i).name ^= token);
			end;

			if i > n_symbols then n_symbols = i;

			if i > cur_max_symbols then do;
			     temp_p = sym_p;	/* prepare to extend symbol area */
			     max_symbols = cur_max_symbols + 50;
			     allocate symbols in (my_area);

			     do j = 1 to temp_p -> n_symbols;
				sym_p -> symbol (j) = temp_p -> symbol (j);
			     end;

			     sym_p -> n_symbols = temp_p -> n_symbols;

			     free temp_p -> symbols in (my_area);
			end;

			symbol (i).name = token;
			symbol (i).node_value = input_node;
		     end;

		     call ge_parse_$get_token (token, type, stack.level);
		end;

		else call crump (0, "Misplaced token: " || token);

	     end;
	     return;

command_label (12):					/* read */

	     call ge_parse_$get_rest_of_line (varying_pathname);
	     temp_string = varying_pathname;
	     if temp_string = "" then call crump (0, "No file name supplied for read.");

	     call expand_pathname_$add_suffix (temp_string, "ge", input_dir, input_entry, code);
	     if code ^= 0 then call crump (code, temp_string);

	     call hcs_$initiate_count (input_dir, input_entry, "", bc, 0, input_ptr, code);
	     if input_ptr = null then call crump (code, "^a>^a");
	     char_count = bc / 9;
	     call hcs_$fs_get_mode (input_ptr, mode, code);
	     if code ^= 0 then call crump (code, "^a>^a");
	     if mode < 1000b then call crump (error_table_$moderr, "^a>^a");
	     call ge_parse_$push_string_and_terminate (input_ptr, char_count);
	     return;


command_label (14):					/* quit */
	     call ge_parse_$get_token (token, type, stack.level);
	     if token ^= ";" then call crump (0, "Text follows ""quit"" request; request ignored.");
	     goto returner;

command_label (15):					/* restart */

	     call ge_parse_$init;			/* clear out any old reads or input lines */
	     call ge_parse_$push_string (null, 0);	/* force it to say "Edit." */
	     default_pgs_dir, default_pgs_entry = "";
	     n_macros, n_symbols = 0;
	     call graphic_manipulator_$init (code);
	     if code ^= 0 then call crump (code, "While re-initializing.");
	     call graphic_chars_$init;
	     call graphic_chars_$set_table (external_char_table.dirname, external_char_table.ename, code);
	     if code ^= 0 then call crump (code, "Resetting the default graphic char table.");
	     default_char_table = external_char_table;
	     cur_char_table = external_char_table;
	     return;

command_label (16):					/* help */

	     call ioa_ ("Available commands may be listed with ""list -commands"".
Available graphic entities may be listed with ""list -all"".
See the description of graphics_editor in the Graphic Reference Manual,
or type ""exec help graphics_editor"".^/");		/* That's what the GRM is for. */

	     return;


command_label (17):					/* vtext_type */

	     call ge_parse_$get_rest_of_line (varying_pathname);
	     temp_string = varying_pathname;
	     if temp_string = "" then do;
		call ioa_ ("Current graphic character table is ^a.", default_char_table.ename);
		return;
	     end;

	     if search (temp_string, "<>") > 0 then do;
		call expand_pathname_ (temp_string, input_dir, input_entry, code);
		if code ^= 0 then call crump (code, temp_string);
	     end;

	     else do;
		input_dir = "";
		input_entry = temp_string;
	     end;

	     call graphic_chars_$set_table (input_dir, input_entry, code);
	     if code ^= 0 then call crump (code, input_entry);

	     call graphic_chars_$get_table (cur_char_table.dirname, cur_char_table.ename);
	     default_char_table = cur_char_table;
	     return;

command_label (18):					/* "." */

	     me_ptr = baseptr (baseno (codeptr (command_label (18))));
						/* get pointer to base of my own segment */

	     library_description = "";

	     do i = 1 to dim (search_libraries, 1) while (library_description = "");
		call hcs_$initiate (search_libraries (i).dir, "graphics_editor", "", 0, 0, p, code);
		if p ^= null then do;
		     if p = me_ptr then library_description = search_libraries.description (i);
		     call hcs_$terminate_noname (p, 0);
		end;
	     end;

	     if library_description = "" then do;
		call hcs_$fs_get_path_name (me_ptr, prog_dir, 0, prog_ent, code);
		if code ^= 0 then call crump (code, "Determining pathname of this version of graphics_editor.");

		call ioa_ ("graphics_editor; ^a>^a (private version)",
		     prog_dir, prog_ent);
	     end;

	     else do;
		oi.version_number = object_info_version_2;

		call hcs_$status_mins (me_ptr, 0, me_bc, code);
		if code = 0 then
		     call object_info_$display (me_ptr, me_bc, addr (oi), code);
		if code ^= 0 then call crump (code, "Determining version of graphics_editor.");

		call date_time_ (oi.compile_time, my_date_time);

		call ioa_ ("graphics_editor; ^a version of ^a.", library_description,
		     my_date_time);
	     end;
	     return;

command_label(19): /* "alter" */

	     call crump (0, "alter not implemented.");

command_label(20): /* "increment" */

	     begin;
dcl inc_rv fixed bin (18);
dcl inc_ct fixed bin;
dcl incr_int float bin;

	     call ge_parse_$get_token(token, type, stack.level);
	     if type ^= Number then call crump(0, "Repetition count missing.");
	     inc_ct = fixed(token);

	     call ge_parse_$get_token(token, type, stack.level);
	     if type ^= Number then call crump(0, "Repetition delay missing.");
	     incr_int = float(token);

	     call ge_eval_$tuple_evaluator(environment_ptr, code);
	     if code ^= 0 then call complain;

	     call graphic_operator_$increment(stack.tuple_ptr(1) -> tuple.rvalue(1), inc_ct, incr_int, stack.tuple_ptr(1) -> tuple.rvalue (2), code);
	     if code ^= 0 then call crump(code, "While incrementing.");
	     end;
	     return;

command_label(21): /* "synchronize" */

	     call graphic_operator_$synchronize(code);
	     if code ^= 0 then call crump(code, "While synchronizing.");
	     return;

	end comline_eval;

crump:	proc (err_code, reason);			/* to bleep; perchance to scream. */

dcl  err_code fixed bin (35),
     reason char (*);

dcl  ge_parse_$flush_rest_of_line ext entry;

	     if fatal then do;
		call com_err_ (err_code, "graphics_editor", reason, input_dir, input_entry);
		goto returner;			/* Wave bye-bye */
	     end;

	     call ge_parse_$flush_rest_of_line;

	     call com_err_$suppress_name (err_code, "graphics_editor", reason, input_dir, input_entry);

	     goto listener_loop;			/* try it all over again */

complain:	     entry;

	     if code = -1 then code = 0;
	     call com_err_$suppress_name (code, "graphics_editor", "^a",
		definitive_environment.error_message);

	     call ge_parse_$flush_rest_of_line;

	     goto listener_loop;

	end crump;



%include gm_entry_dcls;

%include gc_entry_dcls;

%include go_entry_dcls;

%include graphic_etypes;

%include graphic_enames;

     end graphics_editor;
