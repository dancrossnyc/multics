/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_r_initialize.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 04/08/76 by Bob Chnag to take out the preset of pr5. It is set in operator. */
/* Modified on 3/19/76 by Bob Chang to interface with the cobol_operators_. */
/*{*/

/* revised 09-07-74 by wko*/

/* format: style3 */
cobol_r_initialize:
     proc;					/*
 1. Initialize structures containing information about the object
   time A register,Q register, index registers and pointer
   registers.
 2. Emit instructions to load the preset pointer registers to
   cobol data. ie pr3 and pr5 (if more than 32k of cobol data).
 3. Emit instruction to store pr3 and pr5 (if needed) in the
   object time stack.



 POINTER REGISTER ASSIGNMENTS:


	the current assignment of object time pointer
registers follows. The intent is to be able to change
these assignments by making changes to only this utility and
other pointer register management utilities, and making
no changes to the main body of the generator


 PR0:
  function - permanently set to cobol  operators
  obtained - pr6 |24
  representation - segment 4000, offset 0.


 PR1:
  function - temporary register


 PR2:
  function - temporary register


 PR3:
  function - permanently set to location 16k (words)
             of cobol data.
  obtained - initially pr4 | 8 contains the base address
             of cobol data. Subsequent to its initial
             setting it is obtained from pr6 | 64
  representation - segment 2, offset 40000 (octal)


 PR4:
  function - permanently set to the multics linkage section.
  obtained - pr6 | 36
  representation - segment 3002, offset 0


 PR5:
  function -
  (a) If there is more than 32k (words) of cobol data
      permanently set to location 48k (words) of cobol data
  (b) otherwise a temporary register
  obtained - initially pr4 |8 contains the base address of
             cobol data. Subsequent to its initial setting it
             is obtained from pr6 | 66
  representation - segment 2, offset 140000 (octal)


 PR6:
  function - this is always set to the stack frame of the
             object program. All components of the generator can
             assume this. There is no need to use the pointer
             register management utilities, but it will not
             hurt if the are used.
  representation - segment 1000, offset 0


 PR7:
  function - temporary register.
*/
						/*}*/
dcl	i		fixed bin;
dcl	cobol_emit	entry (ptr, ptr, fixed bin) ext;
dcl	reloc		(6) bit (5) aligned init ("11001"b, "00000"b, "00000"b, "00000"b, "00000"b, "00000"b);
						/* epp5 pr4|8,*     */
dcl	ld5		bit (36) aligned init ("100000000000001000011111001101010000"b);
						/* adwp5 49152,du    */
dcl	add5		bit (36) aligned init ("001100000000000000001101001000000011"b);
						/* spri5 pr6|66   */
dcl	st5		bit (36) aligned init ("110000000001000010110101001101000000"b);


dcl	save_stack_max_value
			fixed bin int static init (10);

	cobol_$ptr_status_ptr = addr (ptr_status (0));
	cobol_$reg_status_ptr = addr (reg_status (0));

/* clear pointer register structure */

	do i = 0 to 7;
	     usage (i) = 0;
	     contents_sw (i) = 0;
	     seg_num (i) = 0;
	     wd_offset (i) = 0;
	     p_lock (i) = 0;
	     p_priority (i) = 0;
	     p_reset (i) = 0;
	     reset_seg_num (i) = 0;
	     reset_wd_offset (i) = 0;
	     ptr_status.save_stack_max (i) = save_stack_max_value;
	     ptr_status.save_stack_count (i) = 0;
	end;

/* set up pr0 for cobol  operators */
/* the prologue generation process loads pr0 */

	i = 0;
	pointer_num (i) = "000"b;
	usage (i) = 1;
	contents_sw (i) = 1;
	seg_num (i) = 4000;
	p_reset (i) = 1;
	reset_seg_num (i) = seg_num (i);

/* set up pr1 as temporary register */

	i = i + 1;
	pointer_num (i) = "001"b;			/* set up pr2 as temporary register */

	i = i + 1;
	pointer_num (i) = "010"b;

/* set up pr3 to location 16k (words) of cobol data */

	i = i + 1;
	pointer_num (i) = "011"b;
	usage (i) = 1;
	contents_sw (i) = 1;
	seg_num (i) = 2;
	wd_offset (i) = 16384;
	p_reset (i) = 1;
	reset_seg_num (i) = seg_num (i);
	reset_wd_offset (i) = wd_offset (i);		/* emit instructions to load pr3 and save it */

/* set up pr4 as multics linkage */
/* the prologue generation process loads pr4 */

	i = i + 1;
	pointer_num (i) = "100"b;
	usage (i) = 1;
	contents_sw (i) = 1;
	seg_num (i) = 3002;
	p_reset (i) = 1;
	reset_seg_num (i) = seg_num (i);

/* set up pr5 to location 48k (words) of cobol data (if there is over 32k (words) of cobol data), or as a temporary register otherwise */
/* Commented out on cobol operator interface.	*/
/*-04/08/76-*/
	i = i + 1;
	pointer_num (i) = "101"b;
	if cobol_$cobol_data_wd_off > 32767
	then do;
		usage (i) = 1;
		contents_sw (i) = 1;
		seg_num (i) = 2;
		wd_offset (i) = 49152;
		p_reset (i) = 1;
		reset_seg_num (i) = seg_num (i);
		reset_wd_offset (i) = wd_offset (i);

/*
		call cobol_emit(addr(ld5),addr(reloc),3);
*/
	     end;

/* set up pr6 as stack frame */
/* the prologue generation process sets pr6 */

	i = i + 1;
	pointer_num (i) = "110"b;
	usage (i) = 1;
	contents_sw (i) = 1;
	seg_num (i) = 1000;

/* set up pr7 as temporary register */

	i = i + 1;
	pointer_num (i) = "111"b;


/* set up A,Q,index structure */


/*  Initialize register status structures for A,Q, and index registers 0 thru 7  */

	do i = 0 to 9;
	     reg_status.r_lock (i) = 0;
	     reg_status.r_priority (i) = 0;
	     reg_status.save_stack_max (i) = save_stack_max_value;
	     reg_status.save_stack_count (i) = 0;
	     if i < 8
	     then reg_status.register_num = "1"b || bit (fixed (i, 3), 3);
	     else if i < 9
	     then reg_status.register_num = "0001"b;	/*  A register  */
	     else reg_status.register_num = "0010"b;	/*  MUST BE Q  */
	end;



	return;
dcl	1 ptr_status	(0:7) static aligned,
%include cobol_ptr_status;

/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

dcl	1 reg_status	(0:9) static aligned,
%include cobol_reg_status;
%include cobol_;
     end cobol_r_initialize;
