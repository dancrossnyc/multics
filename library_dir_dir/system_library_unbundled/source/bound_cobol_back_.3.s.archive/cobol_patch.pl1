/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_patch.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 07/18/78 by RAL, [3.0-1], changed cobol_linkage_header.incl.pl1 */
/* Modified since 3.0 */
/*{*/
/* format: style3 */
cobol_patch:
     proc (value_ptr);

/* This procedure is called by cobol_fixup_driver_
to perform all fixed patches to the object segment.
These are as follows:

  In the text section:

     1) set instruction address field (offset 1, lower half)
        to maximum stack size used modulo 16.


     In the definition section:

     1) add to the value field in the Type 0 definition the
        word length of the constants.

     2) if flags.descr_sw = "1"b in the Type 0 definition,
        add to each descriptor relp the word length of the
        constants.


  In the linkage section:

     1) In the header, set def_section_relp to the word length
        of the constants plus the word length of the text section.

     2) In the header, set linkage_section_length to the word
        length of then linkage section.

     3) In the static data area, set stat.data_len to the word
        length of the cobol data used modulo 4.
/*}*/
dcl	utemp		fixed bin;
dcl	(i, temp)		fixed bin;


/*************************************/
start:
	utemp = cobol_$max_stack_off + 15;		/*6/14/76*/
	text_ptr = cobol_$text_base_ptr;
	substr (entry_seq.eax7, 1, 18) = substr (unspec (utemp), 19, 14) || "0000"b;
						/* modulo 16 */

	def_ptr = addrel (cobol_$def_base_ptr, fixed (def_header.def_list_relp, 18));
	do while (definition.class ^= "000"b);
	     def_ptr = addrel (cobol_$def_base_ptr, fixed (definition.forward_thread, 18));
	end;
	do while (definition.class = "000"b);
	     text_ptr = addrel (cobol_$text_base_ptr, fixed (definition.value, 28) - 2);
	     value.exec_off = fixed (definition.value, 28) - 2;
	     utemp = fixed (definition.value, 18) + value.con_len;
	     definition.value = substr (unspec (utemp), 19, 18);
	     if entry_seq.flags.has_descriptors
	     then do;
		     utemp = fixed (entry_seq.descr_relp_offset, 18) + 1;
		     parm_desc_ptr = addrel (cobol_$con_end_ptr, utemp);
		     do i = 1 to parm_desc.n_args;
			utemp = fixed (parm_desc.descriptor_relp (i), 18) + value.con_len;
			parm_desc.descriptor_relp (i) = substr (unspec (utemp), 19, 18);
		     end;
		     utemp = fixed (entry_seq.descr_relp_offset, 18) + value.con_len;
		     entry_seq.descr_relp_offset = substr (unspec (utemp), 19, 18);
		end;
	     def_ptr = addrel (cobol_$def_base_ptr, fixed (definition.forward_thread, 18));
	end;

	linkage_header.def_section_relp = substr (unspec (value.text_len), 19, 18);
	linkage_header.linkage_section_length = substr (unspec (value.link_len), 19, 18);
	stat_ptr = addrel (cobol_$link_base_ptr, 8);
	utemp = cobol_$cobol_data_wd_off + 3;		/*08-26-77*/
	stat.data_len = fixed (substr (unspec (utemp), 17, 18), 18) * 4;
						/* modulo 4 */

	return;

/*************************************/

/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

%include cobol_fixup_value;

%include cobol_entry_seq;
%include cobol_definitions;
%include cobol_linkage_header;
/* [3.0-1] */
%include cobol_fixed_static;
%include cobol_;
     end cobol_patch;
