/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_short_to_longbin.pl1 Added Trace statements.
                                                   END HISTORY COMMENTS */


/* Modified on 11/16/84 by FCH, [5.3...], trace added */
/* Modified on 10/19/84 by FCH, [5.3-1], BUG563(phx18381), new cobol_addr_tokens.incl.pl1 */
/* Modified since Version 5.3 */





/*{*/

/* format: style3 */
cobol_short_to_longbin:
     proc (source_token_ptr, target_token_ptr);

/*
This procedure generates code to convert a short binary datum
to a long binary datum using the hardware registers.
*/

/*  DECLARATION OF THE PARAMETERS  */

dcl	source_token_ptr	ptr;
dcl	target_token_ptr	ptr;

/*  DESCRIPTION OF THE PARAMETERS  */

/*
PARAMETER		DESCRIPTION

source_token_ptr	Pointer to a token that describes the short
		binary datum to be converted.  This token
		will always be a data name (type 9) token.
		(input)
target_token_ptr	Pointer to a token that describes the long
		binary result of the conversion.  The contents
		of this pointer on input to this procedure
		vary in meaning, depending on the entry
		point called.  See "Additional Details"
		below.

*/

/*

Additional Details

This procedure has two entry points:
	1. $register
	2. $temp

When called at the "register" entry point, code is  generated to
convert the short binary to a long binary, and leave the long
binary result in a hardware register. (either A orQ).  The
token poihted at by target_token_ptr will be a register (type100)
token.  The register containing the long binary value
will be locked.
If target_token_ptr is null on input, then this procedure
chooses the register in which the short binary value is converted.
Space for the register token in provided by this procedure.
If target_token_ptr is not null on input, then it must point to
a register token (type  100) that specifies the register into
which the short binary value is to be converted and returned.
This procedure acquires (loads) and locks the specified register.


When called at the "temp" entry point, code is generated to
convert the short binary to a long binary, and store the
result into a temporary in the stack.  The token pointed at by
target_token_ptr on exit will be a data name (type 9) token.
If target_token_ptr is null on input, then space for the data name
token is provided by this procedure.  If target_token_ptr
is not null, then it must point to a buffer in which the data name
token is to be built.


*/

/*  DECLARATION OF EXTERNAL ENTRIES  */

dcl	cobol_alloc$stack	ext entry (fixed bin, fixed bin, fixed bin (24));
dcl	cobol_make_type9$long_bin
			ext entry (ptr, fixed bin, fixed bin (24));
dcl	cobol_addr	ext entry (ptr, ptr, ptr);
dcl	cobol_emit	ext entry (ptr, ptr, fixed bin);
dcl	cobol_register$release
			ext entry (ptr);
dcl	cobol_register$load ext entry (ptr);

/*  DECLARATION OF INTERNAL STATIC DATA  */

dcl	shift_inst	bit (36) int static init ("000000000000010010000000000000000000"b);
						/*  18 in upper half  */

dcl	STA		bit (10) int static init ("1111011010"b);
						/*  755(0)  */
dcl	STQ		bit (10) int static init ("1111011100"b);
						/*  756(0)  */
dcl	LDA		bit (10) int static init ("0100111010"b);
						/*  235(0)  */
dcl	LDQ		bit (10) int static init ("0100111100"b);
						/*  236(0)  */
dcl	ALS		bit (10) int static init ("1110111010"b);
						/*  735(0)  */
dcl	QLS		bit (10) int static init ("1110111100"b);
						/*  736(0)  */
dcl	ARS		bit (10) int static init ("1110110010"b);
						/*  731(0)  */
dcl	QRS		bit (10) int static init ("1110110100"b);
						/*  732(0)  */


/*  DECLARATION OF INTERNAL VARIABLES  */

dcl	char_offset	fixed bin (24);
dcl	temp_target_ptr	ptr;

dcl	1 input_buff	aligned,
	  2 buff		(1:10) ptr;
dcl	1 inst_buff	aligned,
	  2 buff		(1:5) fixed bin;
dcl	1 reloc_buff	aligned,
	  2 buff		(1:6) bit (5) aligned;


dcl	1 register_struc,
	  2 what_reg	fixed bin,
	  2 reg_no	bit (4),
	  2 lock		fixed bin,
	  2 already_there	fixed bin,
	  2 contains	fixed bin,
	  2 tok_ptr	ptr,
	  2 literal	bit (36);

dcl	shift_inst_ptr	ptr;
dcl	any_register	bit (1);

dcl	dn_ptr		ptr;

/*************************************************/
/*	ENTRY POINT: register		*/
/**************************************************/

register:
     entry (source_token_ptr, target_token_ptr);

/*
This entry point generates code to convert a short binary datum
to a long binary datum, and leaves the long binary result in
a hardware register.  (either A or Q).
*/
	/***..... dcl LOCAL_NAME char (9) int static init ("$REGISTER");/**/
	/***.....	if Trace_Bit then call cobol_gen_driver_$Tr_Beg(MY_NAME||LOCAL_NAME);/**/


	any_register = "0"b;
	if target_token_ptr = null ()
	then do;					/*  Create space for the target token.  */
		target_token_ptr = cobol_$temp_token_ptr;
		cobol_$temp_token_ptr = addrel (cobol_$temp_token_ptr, 5);
		any_register = "1"b;
	     end;					/*  Create space for the target token.  */
	call common_processing (source_token_ptr, target_token_ptr, any_register);

/***************************************************/
/*	RETURN POINT: register		*/
/**************************************************/

clbx:	/***.....	if Trace_Bit then call cobol_gen_driver_$Tr_End(MY_NAME);/**/
	return;



/**************************************************/
/*	ENTRY POINT: temp			*/
/**************************************************/
temp:
     entry (source_token_ptr, target_token_ptr);
dcl	work_buff		(1:5) ptr;

	/***..... dcl LOCAL_NAME2 char (5) int static init ("$TEMP");/**/
	/***.....	if Trace_Bit then call cobol_gen_driver_$Tr_Beg(MY_NAME||LOCAL_NAME2);/**/


/*  Allocate space in the stack to hold the long binary result of the conversion.  */
	call cobol_alloc$stack (4, 0, char_offset);

/*  Make a long binary data name (type 9) token  */
	call cobol_make_type9$long_bin (target_token_ptr, 1000 /*stack*/, char_offset);

	temp_target_ptr = addr (work_buff (1));
	temp_target_ptr -> cobol_type100.type = 100;
	any_register = "1"b;
	call common_processing (source_token_ptr, temp_target_ptr, any_register);

/*  On returning from common_processing, code has been generated to convert
	the short binary in a register.  The result is in the register, and
	temp_target_ptr points to the register token that describes the
	register that contains the result.  */

	input_ptr = addr (input_buff);
	inst_ptr = addr (inst_buff);
	reloc_ptr = addr (reloc_buff);

	input_struc_basic.type = 1;
	input_struc_basic.operand_no = 0;
	input_struc_basic.lock = 0;
	input_struc_basic.segno = target_token_ptr -> data_name.seg_num;
	input_struc_basic.char_offset = target_token_ptr -> data_name.offset;

/*  Get the address of the temp in which to store the long fixed binary.  */
	call cobol_addr (input_ptr, inst_ptr, reloc_ptr);

	if register_struc.reg_no = "0001"b		/*  A register  */
	then inst_struc_basic.fill1_op = STA;
	else inst_struc_basic.fill1_op = STQ;		/*  Emit code to store the register into the temp  */
	call cobol_emit (inst_ptr, null (), 1);

/*  Unlock the register */
	call cobol_register$release (addr (register_struc));

/**************************************************/
/*	RETURN POINT: temp			*/
/**************************************************/

	go to clbx;


/**************************************************/
/*	INTERNAL PROCEDURE			*/
/*	common_processing			*/
/**************************************************/

common_processing:
     proc (source_tok_ptr, target_tok_ptr, any_register_flag);

/*
This internal procedure generates code to load a short binary value
into the A or Q register, and shift it as necessary to extend the sign, and
produce an equivalent long binary value in the same register.
*/

dcl	source_tok_ptr	ptr;
dcl	target_tok_ptr	ptr;
dcl	any_register_flag	bit (1);

/*  DESCRIPTION OF THE PARAMETERS  */

/*
PARAMETER		DESCRIPTION

source_tok_ptr	Pointer to the data name token (type9)
		for the short binary datum to be converted
		to long binary.  (input)
target_tok_ptr	Pointer to a register token (type 100)
		for the register which is to contain the
		converted value.  (input)
any_register_flag	A flag that indicates whether any register
		may be used for the conversion, or whether
		the input register token specifies a
		particular register to be used.  If "1"b,
		then any register may be used.


*/

/*  Establish addressability to the source of conversion  */
	input_ptr = addr (input_buff);
	inst_ptr = addr (inst_buff);
	reloc_ptr = addr (reloc_buff);

	input_struc.type = 2;
	input_struc.operand_no = 1;
	input_struc.operand.token_ptr (1) = source_tok_ptr;
	input_struc.operand.size_sw (1) = 0;
	call cobol_addr (input_ptr, inst_ptr, reloc_ptr);

	if any_register_flag
	then register_struc.what_reg = 4;		/*  A or Q  */
	else if target_token_ptr -> cobol_type100.register = "0001"b
	then register_struc.what_reg = 1;		/*  A  */
	else register_struc.what_reg = 2;		/*  Q  */

	register_struc.lock = 1;			/*  LOCK the register  */
	register_struc.contains = 0;
	call cobol_register$load (addr (register_struc));

	if register_struc.reg_no = "0001"b		/*  A  */
	then inst_struc_basic.fill1_op = LDA;
	else inst_struc_basic.fill1_op = LDQ;

	call cobol_emit (inst_ptr, reloc_ptr, 1);

	shift_inst_ptr = addr (shift_inst);
	if mod (source_tok_ptr -> data_name.offset, 4) ^= 0
	then do;					/*  source is half-word aligned, and is presently in A or Qlower  */

		if register_struc.reg_no = "0001"b
		then shift_inst_ptr -> inst_struc_basic.fill1_op = ALS;
		else shift_inst_ptr -> inst_struc_basic.fill1_op = QLS;

/*  Emit code to shift the short binary to upper of A or Q  */
		call cobol_emit (shift_inst_ptr, null (), 1);
	     end;					/*  Source is half-word aligned, and is presently in A or q lower.  */

	if register_struc.reg_no = "0001"b		/*  A  */
	then shift_inst_ptr -> inst_struc_basic.fill1_op = ARS;
	else shift_inst_ptr -> inst_struc_basic.fill1_op = QRS;
						/*  Emit code to shift the value in upper to lower, extending the sign  */
	call cobol_emit (shift_inst_ptr, null (), 1);

/*  Set the register number of the register containing the long binary value into the output token.  */
	target_tok_ptr -> cobol_type100.register = register_struc.reg_no;
	target_tok_ptr -> cobol_type100.type = 100;
     end common_processing;

	/***.....	dcl cobol_gen_driver_$Tr_Beg entry(char(*));/**/
	/***.....	dcl cobol_gen_driver_$Tr_End entry(char(*));/**/

	/***.....	dcl Trace_Bit bit(1) static external;/**/
	/***.....	dcl Trace_Lev fixed bin static external;/**/
	/***.....	dcl Trace_Line char(36) static external;/**/
	/***.....	dcl ioa_ entry options(variable); /**/
	/***..... dcl MY_NAME char (22) int static init ("COBOL_SHORT_TO_LONGBIN");/**/


/*  INCLUDE FILES USED BY THIS PROCEDRUE  */


/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

%include cobol_type9;

%include cobol_addr_tokens;

%include cobol_;

%include cobol_type100;


/**************************************************/
/*	END OF EXTERNAL PROCEDURE  		*/
/*	cobol_short_to_longbin		*/
/**************************************************/

     end cobol_short_to_longbin;
