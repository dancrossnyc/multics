/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_rewrite_gen.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 03/18/81 by FCH, [4.4-2], rewrite with alt rec keys can cause abort, BUG470 */
/* Modified on 02/18/81,[4.4-1], operator  87 replaced by operator 93 */
/* Modified on 06/27/79 by FCH,[4.0-1], not option added for debug */
/* Modified on 11/13/78 by FCH,[3.0-1], alt rec_keys added */
/* Modified since Version 3.0 */

/* format: style3 */
cobol_rewrite_gen:
     proc (mp_ptr, passed_tag);

dcl	passed_tag	fixed bin;		/* for  in-line error handling */
dcl	ptag		fixed bin;
dcl	mp_ptr		ptr;
dcl	1 mp		based (mp_ptr),
	  2 n		fixed bin,		/* from 3 to 4 */
	  2 pt		(0 refer (mp.n)) ptr;	/* pt(1) pts to type1 token for REWRITE */
						/* pt(2) pts to type9 token for record to be rewritten */
						/* pt(3) pts to type9 token for FROM data IF end_stmt.c = "1"b */
						/* pt(n) pts to type19 token (eos) */

dcl	1 args,
	  2 entryno	fixed bin,
	  2 arglist_off	fixed bin,
	  2 stacktemp_off	fixed bin,
	  2 n		fixed bin,
	  2 arg		(4),
	    3 pt		ptr,
	    3 type	fixed bin,
	    3 off1	fixed bin,
	    3 off2	fixed bin,
	    3 value	bit (18) unal,
	    3 indirect	bit (1) unal,
	    3 overlay	bit (1) unal,
	    3 repeat_nogen	bit (1) unal,
	    3 regsw	bit (1) unal,
	    3 regno	bit (3) unal;

dcl	adjust_recptr_sw	bit (1);
dcl	argb		(4) bit (216) based (addr (args.arg (1)));
dcl	text		(0:100000) bit (36) based (cobol_$text_base_ptr);

dcl	ft_ptr		ptr;
dcl	fkey_ptr		ptr;
dcl	name_ptr		ptr;
dcl	dn_ptr		ptr;
dcl	arg_ptr		ptr;
dcl	ioerror_ptr	ptr;			/*[3.0-1]*/
declare	alt_sw		bit (1);
dcl	temp		fixed bin;
dcl	aloff		fixed bin;
dcl	size		fixed bin;
dcl	buflen_off	fixed bin;
dcl	buf_off		fixed bin;
dcl	ntag		fixed bin;
dcl	unopened_error_tag	fixed bin;
dcl	stoff		fixed bin;
dcl	hold_keylen_sw	fixed bin;
dcl	hold_key_wdoff	fixed bin;

/*************************************/
/*************************************/
/* INITIALIZATION */
start:
	pr5_struct_ptr = addr (pr5_struct);
	adjust_recptr_sw = "0"b;
	rw_ptr = mp.pt (1);
	dn_ptr = mp.pt (2);
	eos_ptr = mp.pt (mp.n);
	ioerror_ptr = addr (ioerror);
	ioerror.cobol_code = 0;
	ioerror.type1_ptr = mp.pt (1);
	ioerror.is_tag = 0;
	ioerror.mode = 0;

	if end_stmt.b = "1"b
	then do;					/* in-line error coding follows */

		ioerror.is_tag = cobol_$next_tag;	/* to be defined at end of generated code for WRITE */
		ptag, passed_tag = cobol_$next_tag + 1; /* to be defined by gen driver at end of in-line coding */
		ioerror.ns_tag = ptag;
		cobol_$next_tag = cobol_$next_tag + 2;

	     end;
	else do;

		ioerror.is_tag = 0;
		ptag = 0;
		ioerror.ns_tag = cobol_$next_tag;	/* to be defined at end of generated code */
		cobol_$next_tag = cobol_$next_tag + 1;

	     end;

	arg_ptr = addr (args);

	call cobol_read_ft (data_name.file_num, ft_ptr);

	call cobol_alloc$stack (316, 2, aloff);		/* enough for 79 words - aloff is a wd offset */

	args.arglist_off = aloff;
	buflen_off = 80;


/*************************************/
/* START CODE GENERATION */
start_codegen:					/* MAKE SURE FILE IS OPEN */
	ioerror.retry_tag = cobol_$next_tag;
	unopened_error_tag = cobol_$next_tag + 1;
	cobol_$next_tag = cobol_$next_tag + 2;

	call cobol_define_tag (ioerror.retry_tag);

	call cobol_set_fsbptr (ft_ptr);


/* MOVE FROM DATANAME TO BUFFER IF NECESSARY */

	if end_stmt.c = "1"b
	then do;					/* FROM specified */

		mpout.pt1 = mp.pt (1);
		mpout.pt2 = mp.pt (3);
		mpout.pt3 = mp.pt (2);
		mpout.pt4 = addr (type19);

		call cobol_move_gen (addr (mpout));

	     end;

/* ESTABLISH RECORD LENGTH */
	if ^file_table.variable
	then do;

		temp = file_table.max_cra_size;

		call cobol_io_util$move_direct ("110"b, buflen_off * 4, 4, 1, substr (unspec (temp), 19, 18));

	     end;
	else do;

		if ^file_table.rec_do
		then call cobol_get_size (dn_ptr, buflen_off, reserved_word.line);
		else do;

			call cobol_read_rand (1, file_table.rec_do_info, fkey_ptr);

			addr (fkey_type9.file_key_info) -> file_key_desc = file_key.desc;

			call cobol_io_util$t9dec_to_bin ("110"b, buflen_off * 4, addr (fkey_type9));

		     end;

	     end;

/* CONVERT IF CODE SET INDICATES SO */
	if file_table.code_set_clause
	then if file_table.code_set = 12
	     then do;				/* 12 = ebcdic */

		     call cobol_alloc$stack (data_name.size + 1, 2, stoff);
						/*-10/07/76-*/

		     trans_type9.seg = 1000;		/* in stack */
		     trans_type9.off = stoff * 4;	/*-10/07/76-*/
		     trans_type9.size = data_name.size;

		     call cobol_trans_alphabet$io (dn_ptr, addr (trans_type9), fixed (file_table.code_set), 0);

		     dn_ptr = addr (trans_type9);	/* set to converted record for remainder of this generator */

		end;

/*[3.0-1]*/
	alt_sw = file_table.organization = 3 /* ind */ /*[3.0-1]*/ & /*[3.0-1]*/ file_table.alternate_keys ^= 0;

	if file_table.access < 2
	then do;					/* sequential access */

		ntag = cobol_$next_tag;
		cobol_$next_tag = cobol_$next_tag + 1;

		call cobol_io_util$bypass_seqerror (ntag);

		call cobol_ioop_util$set_x5 (rewrite_seq_errno);
						/* OPERATOR54(delete_error) */
		call cobol_call_op (54, ntag);	/* ERROR_OP */

		call cobol_gen_ioerror (ft_ptr, ioerror_ptr);

		call cobol_define_tag (ntag);

		if file_table.organization = 3	/* indexed */
		then do;				/* make sure key matches - always will for relative */

			call cobol_read_rand (1, file_table.r_key_info, fkey_ptr);

			addr (fkey_type9.file_key_info) -> file_key_desc = file_key.desc;

			ntag = cobol_$next_tag;
			cobol_$next_tag = cobol_$next_tag + 1;

			call cobol_io_util$compare_key (ntag, addr (fkey_type9));

			call cobol_io_util$move_direct ("001"b, fsb_keylen_sw, 4, 1, ""b);
						/* zero the switch */

			call cobol_ioop_util$set_x5 (key_mismatch_errno);
						/* OPERATOR54(delete_error) */
			call cobol_call_op (54, ntag);/* ERROR_OP */

			call cobol_gen_ioerror (ft_ptr, ioerror_ptr);

			call cobol_define_tag (ntag);

		     end;

		call cobol_io_util$move_direct ("001"b, fsb_keylen_sw, 4, 1, ""b);
						/* zero the switch */

		call rew_rec;

	     end;

	else do;					/* random or dynamic access - use specified key */


		call cobol_read_rand (1, file_table.r_key_info, fkey_ptr);

		addr (fkey_type9.file_key_info) -> file_key_desc = file_key.desc;
		mpout.pt1 = mp.pt (1);
		mpout.pt2 = addr (fkey_type9);

		if file_table.organization = 2
		then do;				/*relative */

			mpout.pt3 = addr (num_type9);
			size, num_type9.size, num_type9.places_left = 16;
			num_type9.seg = 5001;	/* from PR1 */
			num_type9.off = file_table.fsb.off + fsb_key;

		     end;
		else do;				/* indexed */

			if file_table.access = 3 & (file_table.external | file_table.open_out)
			then do;

				ntag = cobol_$next_tag;
				cobol_$next_tag = cobol_$next_tag + 1;

				call cobol_io_util$bypass_mode_error (ntag, "11"b);
						/* must cause error if in output mode */

				call cobol_ioop_util$set_x5 (output_errno);
						/* OPERATOR54(delete_error) */
				call cobol_call_op (54, ntag);
						/* ERROR_OP */

				call cobol_gen_ioerror (ft_ptr, ioerror_ptr);

				call cobol_define_tag (ntag);

/*[4.4-2]*/
/* call cobol_set_fsbptr(ft_ptr); */

			     end;

			mpout.pt3 = addr (alpha_type9);
			size, alpha_type9.size = fkey_type9.size;
			alpha_type9.seg = 5001;	/* from PR1 */
			alpha_type9.off = file_table.fsb.off + fsb_key;

		     end;

/*[4.4-2]*/
		call cobol_set_fsbptr (ft_ptr);	/*[4.4-2]*/
		call cobol_io_util$set_fsb_loc;

		if ^alt_sw & file_table.access = 3 & file_table.read_next
		then do;

/* read key */
			call cobol_alloc$stack (260, 2, stoff);
						/* area known as TEMP read key area */

			call cobol_ioop_util$lda_du (stoff);

			call cobol_ioop_util$set_icode;

			ntag = cobol_$next_tag;
			cobol_$next_tag = cobol_$next_tag + 1;

			call cobol_call_op (55, ntag);/* OPERATOR55(read_key) */

			call cobol_gen_ioerror (ft_ptr, ioerror_ptr);


			call cobol_define_tag (ntag);

			call cobol_set_fsbptr (ft_ptr);

			mpout.pt4 = addr (type19);

			call cobol_move_gen (addr (mpout));

			call cobol_io_util$move_direct ("001"b, fsb_keylen_sw, 4, 1, substr (unspec (size), 19, 18))
			     ;

			ntag = cobol_$next_tag;
			cobol_$next_tag = cobol_$next_tag + 1;

			call cobol_ioop_util$lda_du (stoff);

			call cobol_ioop_util$set_icode;

			call cobol_set_pr (pr5_struct_ptr, dn_ptr);
						/* OPERATOR58(special_rewrite) */
			call cobol_call_op (58, ntag);/* seek_key BUFF,rewrite_record,seek_key TEMP,position if EOF*/

			call cobol_gen_ioerror (ft_ptr, ioerror_ptr);

			call cobol_define_tag (ntag);

		     end;
		else do;
			ntag = cobol_$next_tag;
			cobol_$next_tag = cobol_$next_tag + 1;

/*[4.4-2]*/
/* call cobol_set_fsbptr(ft_ptr); */

			mpout.pt4 = addr (type19);

			call cobol_move_gen (addr (mpout));

			call cobol_io_util$move_direct ("001"b, fsb_keylen_sw, 4, 1, substr (unspec (size), 19, 18))
			     ;

/*[3.0-1]*/
			if alt_sw			/*[4.4-2]*/
			then do;
				call cobol_io_util$fsb_key_loc (6);
						/* epp1 pr1|6 */
						/*[3.0-1]*/
				call cobol_io_util$file_desc (file_table.file_desc_1_offset);

/*[3.0-1]*/
				call cobol_call_op (85, 0);
						/* OPERATOR85(alt_special_delete) */
						/*[3.0-1]*/
				call cobol_set_fsbptr (ft_ptr);
						/*[3.0-1]*/
			     end;

			call cobol_ioop_util$set_icode;

			call cobol_call_op (41, ntag);/* OPERATOR41(seek_key) */

			call cobol_gen_ioerror (ft_ptr, ioerror_ptr);

			call cobol_define_tag (ntag);

			call rew_rec;

		     end;

	     end;

	call cobol_reg_manager$after_op (4095 + ioerror.cobol_code);

/*[4.0-1]*/
	if end_stmt.f = "01"b			/*[4.0-1]*/
	then passed_tag = ioerror.is_tag;		/*[4.0-1]*/
	else call cobol_gen_ioerror$finish_up (ft_ptr, ioerror_ptr);

	return;

rew_rec:
     proc;

/*[3.0-1]*/
	if alt_sw					/*[3.0-1]*/
	then do;
		ntag = cobol_$next_tag;		/*[3.0-1]*/
		cobol_$next_tag = cobol_$next_tag + 1;	/*[4.4-1]*/
		call cobol_set_pr (pr5_struct_ptr, dn_ptr);
						/*[4.4-1]*/
		call cobol_call_op (93, ntag);	/* OPERATOR93(alt_rewrite) */
						/*[3.0-1]*/
		call cobol_gen_ioerror (ft_ptr, ioerror_ptr);
						/*[3.0-1]*/
		call cobol_define_tag (ntag);		/*[3.0-1]*/
		call cobol_set_fsbptr (ft_ptr);	/*[3.0-1]*/
	     end;

	ntag = cobol_$next_tag;
	cobol_$next_tag = cobol_$next_tag + 1;

	call cobol_set_fsbptr (ft_ptr);

	call cobol_set_pr (pr5_struct_ptr, dn_ptr);

	call cobol_ioop_util$set_icode;

	call cobol_call_op (59, ntag);		/* OPERATOR59(rewrite) */

	call cobol_gen_ioerror (ft_ptr, ioerror_ptr);

	call cobol_define_tag (ntag);

/*[3.0-1]*/
	if alt_sw					/*[3.0-1]*/
	then do;
		ntag = cobol_$next_tag;		/*[3.0-1]*/
		cobol_$next_tag = cobol_$next_tag + 1;

/*[3.0-1]*/
		call cobol_call_op (88, ntag);	/* OPERATOR88(alt_rewrite_add) */
						/*[3.0-1]*/
		call cobol_gen_ioerror (ft_ptr, ioerror_ptr);
						/*[3.0-1]*/
		call cobol_define_tag (ntag);		/*[3.0-1]*/
	     end;

     end;

/*************************************/

%include cobol_rewrite_gen_info;
%include cobol_rewrite_gen_data;
     end cobol_rewrite_gen;
