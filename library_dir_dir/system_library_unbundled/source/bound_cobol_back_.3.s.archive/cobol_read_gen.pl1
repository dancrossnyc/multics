/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_read_gen.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 06/27/79 by FCH, [4.0-1], not option added for debug */
/* Modified on 11/11/78 at 1111 by FCH,[3.0-2], alt rec keys */
/* Modified on 06/08/78 by FCH,[3.0-1], open i-o(ext,ind-seq) fixed */
/* Modified since Version 3.0 */

/* format: style3 */
cobol_read_gen:
     proc (mp_ptr, passed_tag);

dcl	passed_tag	fixed bin;		/* for  in-line error handling */
dcl	ptag		fixed bin;
dcl	mp_ptr		ptr;
dcl	1 mp		based (mp_ptr),
	  2 n		fixed bin,		/* from 3 or 4 */
	  2 pt		(0 refer (mp.n)) ptr;	/* pt(1) pts to type1 token for READ */
						/* pt(2) pts to type12 token for file to be read */
						/* pt(3) pts to type9 token for INTO data IF eos.b = "1"b */
						/* pt(n) pts to type19 token (eos) */

dcl	1 args,
	  2 entryno	fixed bin,
	  2 arglist_off	fixed bin,
	  2 stacktemp_off	fixed bin,
	  2 n		fixed bin,
	  2 arg		(5),
	    3 pt		ptr,
	    3 type	fixed bin,
	    3 off1	fixed bin,
	    3 off2	fixed bin,
	    3 value	bit (18) unal,
	    3 indirect	bit (1) unal,
	    3 overlay	bit (1) unal,
	    3 repeat_nogen	bit (1) unal,
	    3 regsw	bit (1) unal,
	    3 regno	bit (3) unal;

dcl	file_key_desc	char (40) based;
dcl	output_errno	fixed bin init (40);	/* Invalid I/O operation.  Attempt to read a file opened as output */

dcl	text		(0:10000) bit (36) based (cobol_$text_base_ptr);
dcl	argb		(5) bit (216) based (addr (args.arg (1)));
dcl	ft_ptr		ptr;
dcl	fkey_ptr		ptr;
dcl	dn_ptr		ptr;
dcl	name_ptr		ptr;
dcl	arg_ptr		ptr;
dcl	ioerror_ptr	ptr;

dcl	stoff		fixed bin;
dcl	aloff		fixed bin;
dcl	sbuf_off		fixed bin;
dcl	size		fixed bin;
dcl	offset		fixed bin;
dcl	reclen_off	fixed bin;
dcl	buflen_off	fixed bin;
dcl	buf_off		fixed bin;
dcl	declen_off	fixed bin;
dcl	keylen_off	fixed bin;
dcl	temp		fixed bin;
dcl	ntag		fixed bin;
dcl	(iosw, alt_sw, read_next_sw)
			bit (1);			/*[3.0-2]*/
dcl	char5		char (5),
	key_ctr		fixed bin,
	skip_read_tag	fixed bin;

/*************************************/
/*************************************/
/* INITIALIZATION */
start:
	pr5_struct_ptr = addr (pr5_struct);
	rw_ptr = mp.pt (1);
	eos_ptr = mp.pt (mp.n);
	ioerror_ptr = addr (ioerror);
	ioerror.cobol_code = 0;
	ioerror.type1_ptr = mp.pt (1);
	ioerror.is_tag = 0;
	ioerror.mode = 0;

	if end_stmt.a ^= "000"b
	then do;					/* in-line error coding follows */

		ioerror.is_tag = cobol_$next_tag;	/* to be defined at end of generated code for WRITE */
		ptag, passed_tag = cobol_$next_tag + 1; /* to be defined by gen driver at end of in-line coding */
		ioerror.ns_tag = ptag;
		cobol_$next_tag = cobol_$next_tag + 2;

	     end;
	else do;

		ioerror.is_tag = 0;
		ptag = 0;
		ioerror.ns_tag = cobol_$next_tag;	/* to be defined at end of generated code */
		cobol_$next_tag = cobol_$next_tag + 1;

	     end;

	arg_ptr = addr (args);
	iocb_arg.pt = addr (iocb_basic_struct);
	cra_arg.pt = addr (cra_basic_struct);

	call cobol_read_ft (mp.pt (2) -> fd_token.file_no, ft_ptr);

/*[3.0-3]*/
	read_next_sw = file_table.access < 2 /* seq */ /*[3.0-3]*/ | /*[3.0-3]*/ end_stmt.d = "01"b;
						/* read_next */

/*[3.0-2]*/
	alt_sw = file_table.organization = 3 /* ind */ /*[3.0-2]*/ & /*[3.0-2]*/ file_table.alternate_keys ^= 0;

/*[3.0-2]*/
	if read_next_sw & alt_sw			/*[3.0-2]*/
	then do;
		skip_read_tag = cobol_$next_tag;	/*[3.0-2]*/
		cobol_$next_tag = cobol_$next_tag + 1;	/*[3.0-2]*/
	     end;


	if file_table.organization = 5
	then file_table.organization = 4;		/* temporary */

	if file_table.code_set_clause & file_table.code_set = 12
	then do;					/* 12 = ebcdic */

		call cobol_alloc$stack (file_table.max_cra_size + 1, 2, stoff);

		alpha_type9.seg, trans_type9.seg = 1000;/* stack */
		alpha_type9.off, trans_type9.off = stoff * 4;
		trans_type9.size = file_table.max_cra_size;

	     end;
	else do;

		alpha_type9.seg = file_table.cra_seg;
		alpha_type9.off = file_table.cra_offset;


	     end;

	alpha_type9.size = file_table.max_cra_size;

	call cobol_alloc$stack (80, 2, aloff);		/* enough for 20 words - aloff is a wd offset */

	args.arglist_off = aloff;
	argb (1) = unspec (iocb_arg);
	buflen_off = 80;
	reclen_off = 47;
	declen_off = aloff + 16;
	keylen_off = aloff + 19;


/*************************************/
/* START CODE GENERATION */
start_codegen:					/* MAKE SURE FILE IS OPEN */
	ntag = cobol_$next_tag;
	ioerror.retry_tag = cobol_$next_tag + 1;

	call cobol_define_tag (ioerror.retry_tag);

	cobol_$next_tag = cobol_$next_tag + 2;

	call cobol_set_fsbptr (ft_ptr);		/* OPERATOR63(init_read) */
	call cobol_call_op (63, ntag);		/* INT_READ_OP */

	if end_stmt.a = "000"b
	then do;

		call cobol_emit (addr (opt_text), null, 2);
		call cobol_make_tagref (ntag, cobol_$text_wd_off - 1, null);

	     end;

	call cobol_gen_ioerror (ft_ptr, ioerror_ptr);

	call cobol_define_tag (ntag);


/* ESTABLISH MAXIMUM CURRENT RECORD AREA SIZE */
	temp = file_table.max_cra_size;

	if file_table.organization = 4
	then temp = temp + 1;			/* allow for the nl character */

	call cobol_io_util$move_direct ("110"b, buflen_off * 4, 4, 1, substr (unspec (temp), 19, 18));

/* STREAM INPUT */
	if file_table.organization = 4
	then do;

		call cobol_alloc$stack (file_table.max_cra_size + 1, 1, sbuf_off);

		ntag = cobol_$next_tag;
		cobol_$next_tag = cobol_$next_tag + 1;
		alpha_type9.size = file_table.max_cra_size;
		alpha_type9.seg = 1000;
		alpha_type9.off = sbuf_off * 4;

		call cobol_set_pr (pr5_struct_ptr, addr (alpha_type9));

/* OPERATOR64(get_line) */
		call cobol_call_op (64, ntag);	/* iox_$get_line */

		call cobol_gen_ioerror (ft_ptr, ioerror_ptr);

		call cobol_define_tag (ntag);

		alpha_type9.seg = file_table.cra_seg;
		alpha_type9.off = file_table.cra_offset;

		call cobol_io_util$move_from_varlen ("110"b, reclen_off * 4, addr (alpha_type9), "110"b, sbuf_off * 4)
		     ;

	     end;
	else do;

		if file_table.access = 3 /* dynamic - must prevent reads for output opening */
		     & (file_table.external | file_table.open_ext)
		then do;

			ntag = cobol_$next_tag;
			cobol_$next_tag = cobol_$next_tag + 1;

			call cobol_io_util$bypass_mode_error (ntag, "11"b);

/* OPERATOR54(delete_error) */
			call cobol_call_op (54, ntag);/* ERROR_OP */

			call cobol_gen_ioerror (ft_ptr, ioerror_ptr);

			call cobol_define_tag (ntag);

		     end;

		iosw = (file_table.external | file_table.delete | file_table.rewrite) & file_table.access < 2;

		if read_next_sw			/* FORMAT 1 READ */
		then do;				/* READ NEXT */

			if (file_table.organization > 1 & iosw & file_table.access < 2)
			     /* to verify rewrite and delete */
			     | (file_table.organization = 2 & file_table.relative_key)
						/* to set relative_key */
			then do;			/* remember key of next rec - i.e. the rec to be read */

/* PROVIDE FOE BYPASSING READ KEY IF WORTHWHILE */
				ntag = cobol_$next_tag;
				cobol_$next_tag = cobol_$next_tag + 1;

				if (file_table.open_in | file_table.external) & file_table.organization = 3
				then do;
					call cobol_io_util$bypass_readkey (ntag);

				     end;		/* READ KEY OF NEXT RECORD */

				call cobol_alloc$stack (260, 2, stoff);
						/* area know as TEMP read key area */

				call cobol_ioop_util$lda_du (stoff);
						/*OPERATOR69(read_key_for_read) */
				call cobol_call_op (69, ntag);
						/* iox_$read_key */

				call cobol_gen_ioerror (ft_ptr, ioerror_ptr);

				call cobol_define_tag (ntag);
						/*[3.0-1]*/

				if iosw
				then do;

					call cobol_set_fsbptr (ft_ptr);
					call cobol_io_util$move ("110"b, keylen_off * 4, 4, "001"b,
					     fsb_keylen_sw, 4);
					call cobol_io_util$move_direct ("001"b, fsb_keylen_sw, 4, 1, ""b);
						/* until successful read */

				     end;

			     end;
			else do;

				if iosw
				then do;

					if file_table.organization ^= 1
					then call cobol_io_util$move ("110"b, keylen_off * 4, 4, "001"b,
						fsb_keylen_sw, 4);

					call cobol_io_util$move_direct ("001"b, fsb_keylen_sw, 4, 1, ""b);
						/* until sucessful read */

				     end;

/*[3.0-2]*/
				if alt_sw		/*[3.0-2]*/
				then do;
					ntag = cobol_$next_tag;
						/*[3.0-2]*/
					cobol_$next_tag = cobol_$next_tag + 1;

/*[3.0-2]*/
					call cobol_io_util$file_desc (file_table.file_desc_1_offset);
						/*[3.0-2]*/
					call cobol_call_op$skip (92, ntag, skip_read_tag);
						/* OPERATOR92(alt_find_rec) */
						/*[3.0-2]*/
					call cobol_define_tag (ntag);
						/*[3.0-2]*/
					call cobol_set_fsbptr (ft_ptr);
						/*[3.0-2]*/
				     end;

			     end;

		     end;

		else do;				/* FORMAT 2 READ */

/*[3.0-2]*/
			if alt_sw & end_stmt.e ^= 511 /*[3.0-2]*/
			then do;
				char5 = file_table.alt_key_info;
						/*[3.0-2]*/
						/*[3.0-2]*/
				do key_ctr = 1 by 1 to end_stmt.e;
						/*[3.0-2]*/
						/*[3.0-2]*/
				     call cobol_read_rand (1, char5, fkey_ptr);
						/*[3.0-2]*/
						/*[3.0-2]*/
				     char5 = file_key.next_alt;
						/*[3.0-2]*/
				end;		/*[3.0-2]*/
			     end;

			else call cobol_read_rand (1, file_table.r_key_info, fkey_ptr);

			addr (fkey_type9.file_key_info) -> file_key_desc = file_key.desc;
			mpout.pt1 = mp.pt (1);
			mpout.pt2 = addr (fkey_type9);

			if file_table.organization = 2
			then do;			/* relative */

				mpout.pt3 = addr (num_type9);
				size, num_type9.size, num_type9.places_left = 16;
				num_type9.seg = 5001;
						/* from PR1 */
				num_type9.off = file_table.fsb.off + fsb_key;

			     end;
			else do;			/* indexed */

				mpout.pt3 = addr (alpha_type9);
				size, alpha_type9.size = fkey_type9.size;
				alpha_type9.seg = 5001;
						/* from PR1 */
				alpha_type9.off = file_table.fsb.off + fsb_key;

			     end;

			mpout.pt4 = addr (type19);

			call cobol_move_gen (addr (mpout));

			call cobol_io_util$move_direct ("001"b, fsb_keylen_sw, 4, 1, substr (unspec (size), 19, 18))
			     ;

/*[3.0-2]*/
			if alt_sw			/*[3.0-1]*/
			then do;
				call cobol_io_util$key_loc (0, 0);
						/*[3.0-2]*/
				call cobol_io_util$file_desc (file_table.file_desc_1_offset);
						/*[3.0-2]*/
				call cobol_io_util$key_num (end_stmt.e);
						/*[3.0-2]*/
				call cobol_call_op (84, 0);
						/*[3.0-2]*/
				call cobol_set_fsbptr (ft_ptr);
						/*[3.0-2]*/
			     end;

			ntag = cobol_$next_tag;

			cobol_$next_tag = cobol_$next_tag + 1;
						/* OPERATOR67(read_seek_key) */
			call cobol_call_op (67, ntag);/* iox_$seek_key */

			call cobol_gen_ioerror (ft_ptr, ioerror_ptr);

			call cobol_define_tag (ntag);


		     end;

/* PERFORM READ */
		ntag = cobol_$next_tag;
		cobol_$next_tag = cobol_$next_tag + 1;

		alpha_type9.size = file_table.max_cra_size;
		alpha_type9.seg = file_table.cra_seg;
		alpha_type9.off = file_table.cra_offset;

		call cobol_set_pr (pr5_struct_ptr, addr (alpha_type9));


/*[3.0-2]*/
		if read_next_sw			/*[3.0-2]*/
		then do;
			call cobol_call_op (65, ntag);/* OPERATOR65(read_record) */

/*[3.0-2]*/
			if alt_sw
			then call cobol_define_tag (skip_read_tag);
						/*[3.0-2]*/
		     end;				/*[3.0-2]*/
		else call cobol_call_op (66, ntag);	/* OPERATOR66(nonseq_read_key) */

		call cobol_gen_ioerror (ft_ptr, ioerror_ptr);

		call cobol_define_tag (ntag);


/*[3.0-2]*/
		if alt_sw				/*[3.0-2]*/
		then do;
			call cobol_io_util$file_desc (file_table.file_desc_1_offset);
						/*[3.0-2]*/
			call cobol_set_fsbptr (ft_ptr);

/*[3.0-2]*/
			if read_next_sw		/*[3.0-2]*/
			then call cobol_call_op (80, 0);
						/* OPERATOR80(alt_read_next) */
						/*[3.0-2]*/
			else call cobol_call_op (81, 0);
						/* OPERATOR81(alt_read_key) */
		     end;

/* SET KEY IN FSB IF NECESSARY */
		if iosw
		then do;

			call cobol_set_fsbptr (ft_ptr);

			if file_table.organization = 1
			then call cobol_io_util$move_direct ("001"b, fsb_keylen_sw, 4, 1, (18)"1"b);

			else call cobol_io_util$move ("001"b, fsb_keylen_sw, 4, "110"b, keylen_off * 4, 4);

		     end;

	     end;

	if file_table.rec_do
	then do;					/* must set depending-on variable */

		if file_table.organization = 4
		then call cobol_io_util$fixed_add ("110"b, reclen_off * 4, -1, ""b, 0);
						/*for nl*/

		call cobol_io_util$bin_to_dec ("110"b, declen_off * 4, 12, "110"b, reclen_off * 4, 4);

		call cobol_read_rand (1, file_table.rec_do_info, fkey_ptr);

		addr (fkey_type9.file_key_info) -> file_key_desc = file_key.desc;
		mpout.pt1 = mp.pt (1);
		mpout.pt2 = addr (num_type9);
		num_type9.size, num_type9.places_left = 12;
		num_type9.seg = 1000;		/* in stack */
		num_type9.off = declen_off * 4;
		mpout.pt3 = addr (fkey_type9);
		mpout.pt4 = addr (type19);

		call cobol_move_gen (addr (mpout));

	     end;

	if file_table.code_set_clause & file_table.code_set = 12
	then do;					/* 12 = ebcdic */

		call cobol_trans_alphabet$io (addr (trans_type9), addr (alpha_type9), fixed (file_table.code_set), 1);

	     end;

	if end_stmt.b = "1"b
	then do;					/* move record INTO variable */

		mpout.pt1 = mp.pt (1);
		mpout.pt2 = addr (alpha_type9);
		mpout.pt3 = mp.pt (3);
		mpout.pt4 = addr (type19);

		call cobol_move_gen (addr (mpout));

	     end;

/* SET RELATIVE KEY IF NECESSARY */
	if file_table.organization = 2 & (file_table.access < 2 | end_stmt.d = "01"b) & file_table.relative_key
	then do;

		call cobol_read_rand (1, file_table.r_key_info, fkey_ptr);

		addr (fkey_type9.file_key_info) -> file_key_desc = file_key.desc;

		call cobol_set_fsbptr (ft_ptr);

		mpout.pt1 = mp.pt (1);
		mpout.pt2 = addr (num_type9);
		num_type9.size, num_type9.places_left = 16;
		num_type9.seg = 5001;
		num_type9.off = file_table.fsb.off + fsb_key;
		mpout.pt3 = addr (fkey_type9);
		mpout.pt4 = addr (type19);
		call cobol_move_gen (addr (mpout));

	     end;

	call cobol_reg_manager$after_op (4095 + ioerror.cobol_code);

/*[4.0-1]*/
	if end_stmt.f = "01"b			/*[4.0-1]*/
	then passed_tag = ioerror.is_tag;		/*[4.0-1]*/
	else call cobol_gen_ioerror$finish_up (ft_ptr, ioerror_ptr);

	return;



%include cobol_read_gen_info;
%include cobol_read_gen_data;
     end cobol_read_gen;
