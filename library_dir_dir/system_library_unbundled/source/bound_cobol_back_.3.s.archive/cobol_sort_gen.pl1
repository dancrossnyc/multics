/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8072),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8072 cobol_sort_gen.pl1 Correct inverted sorts for some binary data
     types.
                                                   END HISTORY COMMENTS */


/* Modified on 10/23/84 by FCH, [5.3-1], BUG564(phx17268), sort can produce inverted results */
/* Modified on 11/15/76 by Bob Chang to cooperate with merge statement for setting static data.	*/
/* Modified since Version 2.0	*/
/* format: style3 */
cobol_sort_gen:
     proc (in_token_ptr);				/*  Code and relocation sequences.		*/

dcl	1 pr_struc	static,
	  2 what_ptr	fixed bin,
	  2 pointer_no	bit (3),
	  2 lock		fixed bin init (1),
	  2 switch	fixed bin init (0);
dcl	1 alpha_type9	static,
	  2 header	(4) fixed bin init (112, 0, 0, 9),
	  2 repl_ptr	(2) ptr init ((2) null ()),
	  2 fill1		bit (108) init (""b),
	  2 file_key_info,
	    3 fb1		(3) fixed bin init (0, 0, 0),
	    3 size	fixed bin init (0),
	    3 fb2		(2) fixed bin init (0, 0),
	    3 flags1	bit (36) init ("000000100100000000010000000100000000"b),
	    3 flags2	bit (36) init (""b),
	    3 seg		fixed bin init (0),
	    3 off		fixed bin,
	  2 fill2		(7) fixed bin init (0, 0, 0, 0, 0, 0, 0);
dcl	1 alpha_type9_based based,
	  2 header	(4) fixed bin,
	  2 repl_ptr	(2) ptr,
	  2 fill1		bit (108),
	  2 file_key_info,
	    3 fb1		(3) fixed bin,
	    3 size	fixed bin,
	    3 fb2		(2) fixed bin,
	    3 flags1	bit (36),
	    3 flags2	bit (36),
	    3 seg		fixed bin,
	    3 off		fixed bin,
	  2 fill2		(7) fixed bin;
dcl	1 type19		static,
	  2 header	(4) fixed bin init (38, 0, 0, 19),
	  2 verb		fixed bin init (0),
	  2 e		fixed bin init (0),
	  2 h		fixed bin init (0),
	  2 ij		(2) fixed bin init (0, 0),
	  2 abcdfgk	bit (16) init ("0000000000000000"b);
dcl	instr_seq		(2) bit (18) static init ("000000000000000000"b, "111001000000000100"b);
						/* tra	0,ic	*/

dcl	instr_seq7	(14) bit (18) static init ("000000000000000000"b, "000000000000000000"b,
						/* descr_relp_offset. */
			"000000000000000000"b, "000000000000000000"b, "000000000000000000"b, "110010111000000000"b,
						/* eax7	0	*/
			"111000000000101000"b, "011101010001010000"b,
						/* epp2	pr7|40,* 	*/
			"010000000000000110"b, "011101010101010000"b,
						/* epbp2	pr2|6,*	*/
			"010000000000001010"b, "010111010001000000"b,
						/* tsp2	pr2|10	*/
			"000000000000000000"b, "000000000000000000"b);
						/* no symbol table for compare routine. */
dcl	rel_seq7		(14) bit (5) aligned static
			init ("10000"b, "00000"b, "10101"b, "00000"b, "00000"b, "00000"b, "00000"b, "00000"b,
			"00000"b, "00000"b, "00000"b, "00000"b, "00000"b, "00000"b);
dcl	instr_seq8	(2) bit (18) static init ("000000000000000011"b, "111001000001000000"b);
						/* tra	pr0|3	*/
dcl	rel_seq8		(2) bit (5) aligned static init ("00000"b, "00000"b);
dcl	instr_seq11	(10) bit (18) static init ("000000000000000011"b, "110000010000000100"b,
						/* tnc 	3,ic	*/
			"000000100000010011"b, "010011110001000000"b,
						/* ldq pr0|2048+23 for -2 */
			"111000000000000110"b, "111101110001010000"b,
						/* stq	pr7|6,*	*/
			"111000000000000110"b, "000101100001010000"b,
						/* aos	pr7|6,*	*/
			"000000000000000000"b, "111001000000000100"b);
						/* tra	0,ic	*/
dcl	rel_seq10		(10) bit (5) aligned static
			init ("00000"b, "00000"b, "00000"b, "00000"b, "00000"b, "00000"b, "00000"b, "00000"b,
			"00000"b, "00000"b);
dcl	1 sort_in_token	static,
	  2 n		fixed bin init (3),
	  2 code		fixed bin init (0),
	  2 pt1		ptr,
	  2 pt2		ptr,
	  2 pt3		ptr;


dcl	mvt_ptr		ptr,
	mvt_table		char (512) based (mvt_ptr),
	to_offset		fixed bin;		/*
Automatic data		*/

dcl	workpt2		ptr,			/* work pointer */
	last_token	fixed bin,
	dn_ptr		ptr,			/* pointer to the type 9 token */
	alpha_ptr		ptr,
	ft_ptr		ptr,			/* pointer to the type 12 token */
	sort_file_ptr	ptr,			/* pointer to the type 12 token */
	sort_gen_ptr	ptr,
	line_temp		fixed bin,
	compare_hold_ic	fixed bin,
	hold_addr		bit (18) based,
	desc_off		(3) fixed bin,
	desc_ptr		ptr,
	object_name_len	fixed bin,
	name_ptr		ptr,
	object_name	char (32),
	first_call	fixed bin static init (0),
	sort_stack_off	fixed bin static init (0),	/* returned value of cobol_alloc$stack */
	temp		fixed bin,
	sort_gen_text_wd_off
			fixed bin,
	retry_tag		fixed bin,
	passed_tag	fixed bin,
	passed_tag1	fixed bin,
	i		fixed bin,		/* work variable */
	linkoff		fixed bin;		/* word offset of entry point link */
dcl	bit18		bit (18) based;


/*
Procedures Called		*/

dcl	cobol_compare_gen$sort
			entry (ptr, ptr),
	cobol_def_util	entry (fixed bin, char (32), fixed bin, ptr, fixed bin, ptr, ptr),
	cobol_sort_util	entry (ptr, ptr, char (32), fixed bin),
	cobol_emit	entry (ptr, ptr, fixed bin),
	cobol_alloc$stack	entry (fixed bin, fixed bin, fixed bin),
	cobol_pointer_register$priority
			ext entry (fixed bin, fixed bin, bit (3)),
	cobol_pointer_register$get
			ext entry (ptr),
	cobol_call_op	entry (fixed bin, fixed bin),
	cobol_define_tag	entry (fixed bin),
	cobol_reg_manager$after_op
			entry (fixed bin),
	cobol_pool	entry (char (*), fixed bin, fixed bin),
	cobol_define_tag_nc entry (fixed bin, fixed bin),
	cobol_make_tagref	entry (fixed bin, fixed bin, ptr),
	cobol_read_ft	entry (fixed bin (15), ptr),
	cobol_release_gen	entry (ptr);

start:
	eos_ptr = in_token.token_ptr (1);
	sort_file_ptr = in_token.token_ptr (2);

	desc_ptr = addr (desc_off (1));
	if first_call ^= cobol_$compile_count
	then do;
		first_call = cobol_$compile_count;
		call cobol_alloc$stack (56, 2, sort_stack_off);
		cobol_$init_stack_off = cobol_$stack_off;
	     end;


	if end_stmt.type = 19
	then if (end_stmt.verb = reswd_SORT & end_stmt.h = 91)
	     then call cobol_release_gen (null ());
	     else if end_stmt.h = 90
	     then do;
		     call cobol_call_op (18, 0);
		     call cobol_call_op (17, 0);
		end;
	     else ;
	else do;

		eos_ptr = in_token.token_ptr (in_token.n);
		call initiate;
		last_token = in_token.n - 1;
		alpha_name_ptr = null ();
		if end_stmt.d ^= "00"b
		then do;
			alpha_name_ptr = in_token.token_ptr (in_token.n - 1);
			last_token = in_token.n - 2;
			if alphabet_name.iw_key = 11	/* ascii */
			then do;
				alpha_name_ptr = null ();
				goto continue;
			     end;
			if alphabet_name.iw_key = 0
			then do;
				mvt_ptr = addr (alphabet_name.table);
				call cobol_pool (mvt_table, 2, to_offset);
				alphabet_name.offset = to_offset * 4;
				alphabet_name.segno = 3000;
			     end;
		     end;				/* CODE for internal procedure building  */
continue:
		dn_ptr = addr (alpha_type9);

		passed_tag = cobol_$next_tag;
		passed_tag1 = cobol_$next_tag + 1;
		cobol_$next_tag = cobol_$next_tag + 2;
		substr (instr_seq7 (3), 1, 18) = substr (cobol_$text_base_ptr -> bit18, 1, 18);
		call cobol_emit (addr (instr_seq), null (), 1);
		text_ptr = addrel (cobol_$text_base_ptr, cobol_$text_wd_off);
		call cobol_sort_util (sort_file_ptr, desc_ptr, object_name, object_name_len);
		call cobol_def_util (3, object_name, object_name_len, text_ptr, 0, desc_ptr, null ());
		entry_seq.flags.function = "1"b;
		instr_seq7 (1) = entry_seq.descr_relp_offset;
		instr_seq7 (3) = entry_seq.def_relp;
		instr_seq7 (4) = string (entry_seq.flags);
		call cobol_emit (addr (instr_seq7 (1)), addr (rel_seq7 (1)), 7);
		sort_gen_text_wd_off = cobol_$text_wd_off - 5;
		call cobol_make_tagref (passed_tag, cobol_$text_wd_off - 8, null ());

		call cobol_call_op (19, 0);

/* Lock the pointer register 1 2 and 7	*/
		pr_struc.what_ptr = 7;
		call cobol_pointer_register$get (addr (pr_struc));
		pr_struc.what_ptr = 1;
		call cobol_pointer_register$get (addr (pr_struc));
		pr_struc.what_ptr = 2;
		call cobol_pointer_register$get (addr (pr_struc));
						/*  INSERT compare code */
		do i = 3 to (last_token);
		     pt1 = in_token.token_ptr (i);
		     pt2 = addr (alpha_type9);
		     alpha_type9 = pt1 -> alpha_type9_based;
		     pt3 = addr (type19);
		     type19.e = 102;		/* EQUAL */
		     pt2 -> data_name.seg_num = 5002;
		     pt1 -> data_name.seg_num = 5001;
		     if data_name.numeric = "0"b
		     then do;			/* switch compare  operands around */
			     workpt2 = pt2;
			     pt2 = pt1;
			     pt1 = workpt2;
			end;
		     type19.h = cobol_$next_tag;
		     cobol_$next_tag = cobol_$next_tag + 1;
		     call cobol_compare_gen$sort (addr (sort_in_token), alpha_name_ptr);

/*[5.3-1]*/
		     ad_bit = data_name.ad_bit;

/*[5.3-1]*/
		     if data_name.display		/*[5.3-1]*/
		     then if data_name.numeric	/*[5.3-1]*/
			then call cmpn_test;	/*[5.3-1]*/
			else call cmpc_test;	/*[5.3-1]*/
		     else if data_name.bin_18 | data_name.bin_36
						/*[5.3-1]*/
		     then call cmpq_test;		/*[5.3-1]*/
		     else call cmpn_test;

/*[5.3-1]*/
		     substr (instr_seq11 (2), 7, 3) = op;

		     temp = fixed (op_con.zero_con, 18) - 2;
		     instr_seq11 (3) = substr (unspec (temp), 19, 18);
		     if i ^= last_token
		     then do;
			     call cobol_emit (addr (instr_seq11 (1)), null (), 5);
			     call cobol_make_tagref (passed_tag1, cobol_$text_wd_off - 1, null ());
			     call cobol_define_tag_nc (type19.h, cobol_$text_wd_off);
			end;
		     else call cobol_emit (addr (instr_seq11 (1)), null (), 4);
		     substr (instr_seq11 (2), 7, 3) = "010"b;
						/* reset */
		end;

		call cobol_pointer_register$priority (2, 0, "001"b);
		call cobol_pointer_register$priority (2, 0, "010"b);
		call cobol_pointer_register$priority (2, 0, "111"b);

		call cobol_define_tag (type19.h);
		call cobol_define_tag (passed_tag1);
		call cobol_emit (addr (instr_seq8 (1)), null (), 1);

		temp = cobol_$stack_off + 16;
		substr (unspec (temp), 33, 4) = "0000"b;
		sort_gen_ptr = addrel (cobol_$text_base_ptr, sort_gen_text_wd_off);
		substr (sort_gen_ptr -> bit18, 1, 18) = substr (unspec (temp), 19, 18);
		call cobol_define_tag (passed_tag);
	     end;
	return;

/*[5.3-1]*/
dcl	1 instr		static,			/*[5.3-1]*/
	  2 tmi		bit (3) init ("100"b),	/*[5.3-1]*/
	  2 tpl		bit (3) init ("101"b),	/*[5.3-1]*/
	  2 tnc		bit (3) init ("010"b),	/*[5.3-1]*/
	  2 trc		bit (3) init ("011"b);

/*[5.3-1]*/
dcl	ad_bit		bit (1) aligned,
	op		bit (3) aligned;

cmpn_test:
     proc;

/*[5.3-1]*/
	if ad_bit
	then op = tmi;
	else op = tpl;

     end;

cmpc_test:
     proc;

/*[5.3-1]*/
	if ad_bit
	then op = tnc;
	else op = trc;

     end;

cmpq_test:
     proc;

/*[5.3-1]*/
	if ad_bit
	then op = tpl;
	else op = tmi;

     end;




/* Interal procedure to generate codes to call sort_$initiate.
	The call is through the operator sort_initiate.	*/
initiate:
     proc;


dcl	inst_seq		(4) bit (18) init ("000000000000000000"b, "011101011100000100"b,
						/* epp3 compare,ic	*/
			"000000000000000000"b, "111010010000000111"b);
						/* lxl2 sort_stack_off,dl	*/
dcl	rel_seq		(4) bit (5) aligned init ("00000"b, "00000"b, "00000"b, "00000"b);


	call cobol_call_op (16, 0);
	retry_tag = cobol_$next_tag;
	call cobol_define_tag_nc (retry_tag, cobol_$text_wd_off);
	cobol_$next_tag = cobol_$next_tag + 1;
	if cobol_$same_sort_merge_proc ^= "0"b
	then temp = -sort_stack_off;
	else temp = sort_stack_off;
	inst_seq (3) = substr (unspec (temp), 19, 18);
	call cobol_emit (addr (inst_seq), addr (rel_seq), 2);

	compare_hold_ic = cobol_$text_wd_off - 2;
	call cobol_call_op (14, retry_tag);
	call cobol_reg_manager$after_op (14);

	temp = cobol_$text_wd_off + 3 - compare_hold_ic;
	addrel (cobol_$text_base_ptr, compare_hold_ic) -> hold_addr = substr (unspec (temp), 19, 18);

     end initiate;


/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

%include cobol_in_token;
%include cobol_op_con;

%include cobol_entry_seq;
%include cobol_fixed_static;
%include cobol_;
%include cobol_file_table;
%include cobol_type1;
%include cobol_type9;
%include cobol_type12;
%include cobol_type19;
%include cobol_type40;
%include cobol_reswd_values;
%include cobol_alpha_def;
%include cobol_ext_;
%include cobol_definitions;
     end cobol_sort_gen;
