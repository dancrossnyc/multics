/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_release_gen.pl1 Added Trace statements.
  2) change(89-04-23,Zimmerman), approve(89-04-23,MCR8072),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8072 cobol_release_gen.pl1 Correct inverted sorts for some binary data
     types.
                                                   END HISTORY COMMENTS */


/* Modified on 10/23/84 by FCH, [5.3-2], BUG564(phx17268), SORT statement produces ipc fault at run time */
/* Modified on 10/19/84 by FCH, [5.3-1], BUG563(phx18381), new cobol_addr_tokens.inal.pl1 */
/* Modified on 5/16/76  by Bob Chang to implement the retry after error.	*/
/* Modified on 05/05/76 by Bob Chang to use call_op. */
/* Modified on 05/03/76 by Bob Chang to interface with cobol_rts_. */
/* Modified on 04/07/76 by Bob Chang to interface with multics sort package.	*/
/* Modified on 3/19/76 by Bob Chang to interface with the cobol_operators_. */
/* format: style3 */
cobol_release_gen:
     proc (in_token_ptr);

/*
The procedure cobol_release_gen generates the code necessary to
implement the COBOL RELEASE statement. The format of the RELEASE
statement is as follows:

R_E_L_E_A_S_E_ record-name  [F_R_O_M_  identifier ]

The execution of a RELEASE statement causes the record named by
record-name to be released to the initial phase of a sort operation.
If the FROM phrase is used, the contents of the identifier data
area are moved to the record-name, then the contents of record-name
aare released to the sort file. Moving takes place according to the
rules specified for the MOVE statement without the CORRESPONDING phrase.
The information in the record area is no longer available, but the
information in the data area associated with identifier is available.

After the execution of the RELEASE statement, the logical record is no
longer available in the record area unless the associated sort file
is named in a SAME RECORD AREA clause. The logical record is also
available to the program as a record of other files referenced in
the same SAME RECORD AREA clause as the associated sort file,
as well as to the file associated with record-name.
*/

/*  Code and relocation sequences.		*/

dcl	1 mpout		static,
	  2 n		fixed bin init (4),
	  2 pt1		ptr,
	  2 pt2		ptr,
	  2 pt3		ptr,
	  2 pt4		ptr;
dcl	1 alpha_type9	static,
	  2 header	(4) fixed bin init (112, 0, 0, 9),
	  2 repl_ptr	(2) ptr init ((2) null ()),
	  2 fill1		bit (108) init (""b),
	  2 file_key_info,
	    3 fb1		(3) fixed bin init (0, 0, 0),
	    3 size	fixed bin init (0),
	    3 fb2		(2) fixed bin init (0, 0),
	    3 flags1	bit (36) init ("000000100100000000010000000100000000"b),
	    3 flags2	bit (36) init (""b),
	    3 seg		fixed bin init (0),
	    3 off		fixed bin,
	  2 fill2		(7) fixed bin init (0, 0, 0, 0, 0, 0, 0);
dcl	1 num_type9	static,
	  2 header	(4) fixed bin init (112, 0, 0, 9),
	  2 repl_ptr	(2) ptr init ((2) null ()),
	  2 fill1		bit (108) init (""b),
	  2 file_key_info,
	    3 fb1		(3) fixed bin init (0, 0, 0),
	    3 size	fixed bin init (0),
	    3 fb2		(2) fixed bin init (0, 0),
	    3 flags1	bit (36) init ("000000100100000001000000000100000000"b),
	    3 flags2	bit (36) init (""b),
	    3 seg		fixed bin init (0),
	    3 off		fixed bin,
	  2 fill2		(7) fixed bin init (0, 0, 0, 0, 0, 0, 0);
dcl	1 mlr_struct	static,
	  2 type		fixed bin init (4),
	  2 operand_no	fixed bin init (2),
	  2 lock		fixed bin init (0),
	  2 operand1,
	    3 token_ptr	ptr init (null ()),
	    3 sr		fixed bin init (0),
	    3 icmod	fixed bin init (0),
	    3 size_sw	fixed bin init (0),
	  2 operand2,
	    3 token_ptr	ptr,
	    3 sr		fixed bin init (1),
	    3 icmod	fixed bin,
	    3 size_sw	fixed bin init (0);

dcl	mlr_reg_to_reg	bit (36) init ("000100000001000000001000000101000000"b);
dcl	instr		(3) bit (36) unaligned static
			init ("000000000000000000000000000000000000"b, "000000000000000000000000000000000000"b,
			"000000000000000000000000000000000000"b);
dcl	rel_instr		(6) bit (5) aligned static
			init ("00000"b, "00000"b, "00000"b, "00000"b, "00000"b, "00000"b);

dcl	inst_seq		(4) bit (18) unaligned static init ("000000000000000000"b, "011101011100010000"b,
						/* epp3 data_name	*/
			"000000000000000000"b, "010011110000000111"b);
						/* ldq length,dl	*/
						/*
Automatic data		*/

dcl	retry_tag		fixed bin,
	dn_ptr		ptr;			/* pointer to type 9 token		*/
dcl	buff1		(10) ptr,
	buff2		(10) ptr,
	buff3		(10) ptr;

/*
Procedures Called		*/

dcl	cobol_call_op	entry (fixed bin, fixed bin),
	cobol_define_tag	entry (fixed bin),
	cobol_reg_manager$after_op
			entry (fixed bin),
	cobol_addr	entry (ptr, ptr, ptr),
	cobol_emit	entry (ptr, ptr, fixed bin);

start:						/* reserve space for input structure. */
	input_ptr = addr (buff1);
	inst_ptr = addr (buff2);
	reloc_ptr = addr (buff3);

	retry_tag = cobol_$next_tag;
	call cobol_define_tag (retry_tag);
	cobol_$next_tag = cobol_$next_tag + 1;

	if in_token_ptr ^= null ()
	then do;					/* Extract the data_name item from second token. */

		if in_token.n = 4
		then do;
			mlr_struct.operand1.token_ptr = in_token.token_ptr (3);
			mlr_struct.operand2.token_ptr = in_token.token_ptr (2);

			instr (1) = mlr_reg_to_reg;
			instr (2) = "0"b;
			instr (3) = "0"b;

/*[5.3-2]*/
			dn_ptr = in_token.token_ptr (2);
						/*[5.3-2]*/
			call elem_to_non_elem;	/*[5.3-2]*/
			dn_ptr = in_token.token_ptr (3);
						/*[5.3-2]*/
			call elem_to_non_elem;

			call cobol_addr (addr (mlr_struct), addr (instr (1)), null ());
			substr (instr (1), 1, 9) = "000100000"b;
			call cobol_emit (addr (instr (1)), null (), 3);
		     end;
	     end;


	if in_token_ptr = null ()
	then do;
		call cobol_call_op (22, retry_tag);
		call cobol_reg_manager$after_op (22);
	     end;


	else do;					/* Set up link_off and rel_stack_off for inseq to call sort_$release.	     */
		substr (inst_seq (3), 4, 15) =
		     substr (unspec (in_token.token_ptr (2) -> data_name.item_length), 22, 15);
		input_struc.operand_no = 1;
		input_struc.type = 2;
		input_struc.token_ptr (1) = in_token.token_ptr (2);
		input_struc.lock = 0;
		call cobol_addr (input_ptr, addr (inst_seq (1)), reloc_ptr);
		call cobol_emit (addr (inst_seq), null (), 2);
		call cobol_call_op (11, retry_tag);
		call cobol_reg_manager$after_op (11);
	     end;

/* Reset the registers.	*/
	return;

elem_to_non_elem:
     proc;					/* elem token to non-elem token */

/*[5.3-2]*/
	if data_name.non_elementary
	then return;				/* non-elementary token */
						/*[5.3-2]*/
						/*[5.3-2]*/
	data_name.non_elementary = "1"b;		/*[5.3-2]*/
	data_name.elementary = "0"b;			/*[5.3-2]*/
						/*[5.3-2]*/
	if data_name.display
	then return;				/* display data */
						/*[5.3-2]*/
						/*[5.3-2]*/
	data_name.display = "1"b;			/*[5.3-2]*/
	data_name.comp = "0"b;			/*[5.3-2]*/
	data_name.places_right = 0;			/*[5.3-2]*/
						/*[5.3-2]*/
	if data_name.ascii_packed_dec_h | data_name.ascii_packed_dec
						/*[5.3-2]*/
	then do;
		data_name.ascii_packed_dec_h = "0"b;	/* comp or comp-8 */
						/*[5.3-2]*/
		data_name.ascii_packed_dec = "0"b;	/*[5.3-2]*/
	     end;					/*[5.3-2]*/
	else /*[5.3-2]*/
	     if data_name.bin_18			/* half word binary */
						/*[5.3-2]*/
	then do;
		data_name.bin_18 = "0"b;		/*[5.3-2]*/
						/*[5.3-2]*/
		if data_name.sync			/* sychronized */
						/*[5.3-2]*/
		then data_name.item_length = 4;	/*[5.3-2]*/
		else data_name.item_length = 2;	/*[5.3-2]*/
						/*[5.3-2]*/
		data_name.sync = "0"b;		/*[5.3-2]*/
	     end;					/*[5.3-2]*/
	else /*[5.3-2]*/
	     if data_name.bin_36			/* full word binary */
						/*[5.3-2]*/
	then do;
		data_name.item_length = 4;		/*[5.3-2]*/
		data_name.bin_36 = "0"b;		/*[5.3-2]*/
	     end;					/*[5.3-2]*/
	else /*[5.3-2]*/
	     if data_name.usage_index			/* indexed data item */
						/*[5.3-2]*/
	then do;
		data_name.item_length = 6;		/*[5.3-2]*/
		data_name.usage_index = "0"b;		/*[5.3-2]*/
	     end;					/*[5.3-2]*/
						/*[5.3-2]*/
	data_name.places_left = data_name.item_length;

     end;
/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

%include cobol_in_token;
%include cobol_addr_tokens;
%include cobol_;
%include cobol_type1;
%include cobol_type9;
%include cobol_type19;
     end cobol_release_gen;
