/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_reloc.pl1 Added Trace statements.
                                                   END HISTORY COMMENTS */


/* Modified on 08/21/83 by FCH, [5.2 ...], trace added */
/* Modified on 01/14/77 by ORN to signal command_abort_ rather than cobol_compiler_error */
/* Modified since Version 2.0 */

/*{*/

/* format: style3 */
cobol_reloc:
     proc (reloc_ptr, count, code);

dcl	reloc_ptr		ptr;			/* pts to array of count bit(5)'s */
dcl	count		fixed bin;		/* number of half-words */
dcl	code		fixed bin;		/* internal segment code */

/*  This routine is called to append information to one of the
relocation blocks associated with either the text, linkage,
definition, or symbol section.  The argument code is the value
of the internal segment number of one of the above sections
(i.e. 3001, 3002, 3003, or 3004 respectively) or merely the
unit position digit (i.e. 1, 2, 3, or 4).

The relocation block for each of the four sections are declared
identically as follows:  */

%include cobol_relinfo;

/* If reloc_ptr is null then it is assumed that count half-words
of absolute relocation are to be added to the block.  Otherwise,
reloc_ptr points to the following array:  

dcl reloc (count) bit(5) aligned based(reloc_ptr);

Each bit(5) field contains the relocation code
for a half-word (with "00000"b indicating absolute relocation and
"11110"b invalid).  Compaction of absolute relocatable half-words
is handled automatically by cobol_reloc.   The relinfo.n_bits field in each
block is always kept up to date.  */

/*}*/
/*************************************/


dcl	creloc_ptr	ptr;
dcl	ccount		fixed bin;
dcl	reloc		(ccount) bit (5) aligned based (creloc_ptr);
						/* the real one */

dcl	1 seg		(4) static,
	  2 pt		ptr,
	  2 maxoff	fixed bin,
	  2 abscnt	fixed bin;

dcl	bits		bit (2359296) based;
dcl	bytes		char (262144) based;

dcl	(i, j, n)		fixed bin;
dcl	tcnt		fixed bin;
dcl	textbits		fixed bin;

dcl	null		builtin;
dcl	substr		builtin;
dcl	addr		builtin;

dcl	ioa_$rsnnl	entry options (variable);
dcl	signal_		entry (char (*), ptr, ptr);
dcl	bname		(4) char (10) init ("Text", "Definition", "Link", "Symbol");

/*************************************/
start:
start_reloc:
	creloc_ptr = reloc_ptr;
	ccount = count;

	if code > 3000
	then n = code - 3000;
	else n = code;

	if n = 2
	then n = 3;
	else if n = 3
	then n = 2;
join:						/* cobol_emit joins code here */
	if cobol_$reloc_sym_base_ptr -> relinfo.decl_vers ^= 2
	then do;					/* blocks truncated to zeros by cobol driver */
		seg.pt (1) = cobol_$reloc_text_base_ptr;
		seg.maxoff (1) = cobol_$reloc_text_max;
		seg.pt (2) = cobol_$reloc_def_base_ptr;
		seg.maxoff (2) = cobol_$reloc_def_max;
		seg.pt (3) = cobol_$reloc_link_base_ptr;
		seg.maxoff (3) = cobol_$reloc_link_max;
		seg.pt (4) = cobol_$reloc_sym_base_ptr;
		seg.maxoff (4) = cobol_$reloc_sym_max;
		do i = 1 to 4;
		     seg.abscnt (i) = 0;
		     seg.pt (i) -> relinfo.n_bits = 0;
		     seg.pt (i) -> relinfo.decl_vers = 2;
		end;
	     end;

	relptr = seg.pt (n);

	if creloc_ptr = null
	then do;					/* all absolute */
		if seg.abscnt (n) < 15
		then call start_abs (ccount);		/* no ongoing compaction */
		else call cont_abs (ccount);		/* increase compaction ccount */
	     end;

	else do i = 1 to ccount;			/* creloc_ptr is non-null */

		if reloc (i) ^= "00000"b
		then do;				/* relocation other than absolute */
			if n_bits + 5 > seg.maxoff (n)
			then go to overflow_error;
			substr (relbits, n_bits + 1, 5) = reloc (i);
			n_bits = n_bits + 5;
			seg.abscnt (n) = 0;
		     end;
		else do;
			do j = i + 1 to ccount while (reloc (j) = "00000"b);
			end;
			if seg.abscnt (n) < 15
			then call start_abs (j - i);
			else call cont_abs (j - i);
			i = j - 1;
		     end;
	     end;

	return;


/*************************************/

start_abs:
     proc (pnum);

dcl	pnum		fixed bin parameter;

	tcnt = pnum + seg.abscnt (n);

	if tcnt < 15
	then call add_abs (pnum);			/* no sense compacting */
	else do;
		n_bits = n_bits - seg.abscnt (n);
		if tcnt > 1023
		then call fill_abs;			/* 1023 is max for one compaction record */
		if tcnt < 15
		then call add_abs (tcnt);
		else do;
			if n_bits + 15 > seg.maxoff (n)
			then go to overflow_error;
			substr (relbits, n_bits + 1, 5) = "11110"b;
						/* compaction code */
			substr (relbits, n_bits + 6, 10) = substr (unspec (tcnt), 27, 10);
			seg.abscnt (n) = tcnt;
			n_bits = n_bits + 15;
		     end;
	     end;
	return;
     end start_abs;

cont_abs:
     proc (pnum);

dcl	pnum		fixed bin parameter;

	tcnt = seg.abscnt (n) + pnum;

	if tcnt > 1023
	then do;
		n_bits = n_bits - 15;
		call fill_abs;
		if tcnt < 15
		then do;
			call add_abs (tcnt);
			return;
		     end;
		if n_bits + 15 > seg.maxoff (n)
		then go to overflow_error;
		substr (relbits, n_bits + 1, 5) = "11110"b;
		n_bits = n_bits + 15;
	     end;

	substr (relbits, n_bits - 9, 10) = substr (unspec (tcnt), 27, 10);
	seg.abscnt (n) = tcnt;
	return;

     end cont_abs;

add_abs:
     proc (pnum);

dcl	pnum		fixed bin parameter;

	if pnum + n_bits > seg.maxoff (n)
	then go to overflow_error;

	substr (relbits, n_bits + 1, pnum) = "0"b;
	n_bits = n_bits + pnum;
	seg.abscnt (n) = seg.abscnt (n) + pnum;
	return;

     end add_abs;

fill_abs:
     proc;

	do while (tcnt > 1023);
	     if n_bits + 15 > seg.maxoff (n)
	     then go to overflow_error;
	     substr (relbits, n_bits + 1, 15) = "111101111111111"b;
	     tcnt = tcnt - 1023;
	     seg.abscnt (n) = 0;
	     n_bits = n_bits + 15;
	end;
	return;

     end fill_abs;


/*************************************/
/*{*/
constants:
     entry (con_len, seg_ptr);

/* This is a special entry for use by cobol_paste in order to
create the relocation block for the constant portion of the
text section and insert it in front of the text relocation block. */

dcl	con_len		fixed bin;		/* number of words in constant section (input) */
dcl	seg_ptr		ptr;			/* set to addr of seg array (output) */
						/*}*/

start_constants:
	relptr = seg.pt (1);
	n = 1;
	textbits = n_bits;
	n_bits = 0;
	seg.abscnt (1) = 0;
	substr (cobol_$reloc_work_base_ptr -> bits, 1, textbits) = substr (seg.pt (1) -> bits, 73, textbits);

	call start_abs (con_len * 2);

	substr (seg.pt (1) -> bits, 73 + n_bits, textbits) = substr (cobol_$reloc_work_base_ptr -> bits, 1, textbits);
	n_bits = n_bits + textbits;
	seg_ptr = addr (seg);
	return;


/*************************************/
/*{*/

cobol_emit:
     entry (wd_ptr, text_reloc_ptr, numb_wds);

/* This procedure emits one or more words of information
(plus relocation code) into the executable portion of the
text section. */

dcl	wd_ptr		ptr;
dcl	text_reloc_ptr	ptr;
dcl	numb_wds		fixed bin;

/* dcl words (numb_wds) bit(36) based(wd_ptr);  */
/* dcl text_reloc (2*numb_wds) bit(5) aligned based(text_reloc_ptr);  */

/*
wd_ptr		is a pointer to an array of words (input).

text_reloc_ptr	is a pointer to an array of relocation
		codes "text_reloc" (input).  If this pointer
		is null, absolute relocation is assumed for
		the next numb_wds words.

numb_wds		is the number of words to be emmitted (input).
*/

/*}*/

start_emit:
	if cobol_$text_wd_off + cobol_$con_wd_off + numb_wds > 131072
	then go to emit_error;

	i = numb_wds * 4;

	/***.....	if Trace_Bit then call T1;/**/

	substr (addrel (cobol_$text_base_ptr, cobol_$text_wd_off) -> bytes, 1, i) = substr (wd_ptr -> bytes, 1, i);
	cobol_$text_wd_off = cobol_$text_wd_off + numb_wds;
	creloc_ptr = text_reloc_ptr;			/* set common ptr */
	ccount = 2 * numb_wds;			/* set common count */
	n = 1;					/* text relocation block */

	go to join;

	/***.....	dcl Trace_Bit bit(1) static external;/**/
	/***.....	dcl Trace_Lev fixed bin static external;/**/
	/***.....	dcl Trace_Line char(36) static external;/**/
	/***.....	dcl cobol_display_text$trace entry(ptr,fixed bin);/**/
	/***.....	dcl ioa_ entry options(variable);/**/

	/***.....	T1: proc;/**/
	/***.....		dcl (wd,wdc) fixed bin;/**/
	/***.....		dcl code(64) bit(36) based(wd_ptr);/**/
	/***.....		wdc=divide(i,4,31,0);/**/
	/***.....		call cobol_display_text$trace(addr(code(1)),wdc);/**/
	/***.....	end;/**/


/*************************************/

emit_error:
	error_info.name = "cobol_emit";
	call ioa_$rsnnl ("Object instructions exceed 131072 words", message, message_len);
	go to error;

overflow_error:
	error_info.name = "cobol_reloc";
	call ioa_$rsnnl ("Overflow in ^a relocation block at ^d bits", message, message_len, bname (n), seg.maxoff (n));

error:
	call signal_ ("command_abort_", null, addr (error_info));

%include cobol_error_info;
%include cobol_;

/*************************************/
/*{*/
/* display: entry;
/*
/* This is an entry to be used for debugging purposes.
It is called from command level and continues to prompt the
user for the internal segment number of the relocation block he is
interested in.  It informs him of the current number of
bits in that block and then prompts for a starting offset
from which it will display the rest of the block in 5-bit units. */
/*}*/
/*
/*dcl read_list_$prompt entry options(variable);
/*dcl ioa_ entry options(variable);
/*dcl ioa_$nnl entry options(variable);
/*dcl write_list_ entry options(variable);
/*
/*	call read_list_$prompt("Enter segment number:  ",n);
/*	call ioa_("relinfo.n_bits for ^a relocation block is ^d",bname(n),seg.pt(n)->n_bits);
/*	call read_list_$prompt("Enter starting offset:  ",j);
/*	do i = j to seg.pt(n)->n_bits by 5;
/*	     call ioa_$nnl("^3d	",i);
/*	     call write_list_(substr(seg.pt(n)->relinfo.relbits,i+1,5));
/*	end;
/**/

     end cobol_reloc;
