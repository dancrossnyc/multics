/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_write_gen.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 12/07/80 by FCH, [4.4-1], report writer added */
/* modified on 08/15/79 by MHD, [4.0-2],  fixed problem in write with LINAGE clause */
/* modified on 06/27/79 by FCH, [4.0-1], not option added for debug */
/* Modified on 11/13/78 by FCH, [3.0-1], alt rec keys added */
/* Modified since Version 3.0 */

/* format: style3 */
cobol_write_gen:
     proc (mp_ptr, passed_tag);

dcl	stoff		fixed bin;
dcl	(good_tag, stream_tag, seek_tag, write_tag, skip_tag, alt_tag, alt_seek_tag)
			fixed bin;
dcl	passed_tag	fixed bin;		/* for  in-line error handling */
dcl	ptag		fixed bin;
dcl	linage_ptr	ptr;
dcl	mp_ptr		ptr;
dcl	1 mp		based (mp_ptr),
	  2 n		fixed bin,		/* from 3 - 5 */
	  2 pt		(0 refer (mp.n)) ptr;	/* pt(1) pts to type1 token for WRITE */
						/* pt(2) pts to type9 token (record name) or type12 token(file name) */
						/* pt(3) pts to type9 token for FROM data IF eos.c = "1"b */
						/* pt(n-1) pts to type9 token for ADVANCING data IF eos.d ^= "00"b */
						/* pt(n) pts to type19 token (eos) */

dcl	1 args,
	  2 entryno	fixed bin,
	  2 arglist_off	fixed bin,
	  2 stacktemp_off	fixed bin,
	  2 n		fixed bin,
	  2 arg		(4),
	    3 pt		ptr,
	    3 type	fixed bin,
	    3 off1	fixed bin,
	    3 off2	fixed bin,
	    3 value	bit (18) unal,
	    3 indirect	bit (1) unal,
	    3 overlay	bit (1) unal,
	    3 repeat_nogen	bit (1) unal;

dcl	file_key_desc	char (40) based;
dcl	extend_sw		bit (1) aligned;
dcl	(alt_sw, code_set_sw, var)
			bit (1);
dcl	text		(0:100000) bit (36) based (cobol_$text_base_ptr);
dcl	argb		(4) bit (216) based (addr (args.arg (1)));
dcl	save_mp2_ptr	ptr;
dcl	ft_ptr		ptr;
dcl	fkey_ptr		ptr;
dcl	dn_ptr		ptr;
dcl	name_ptr		ptr;
dcl	arg_ptr		ptr;
dcl	ioerror_ptr	ptr;

dcl	(temp, fn)	fixed bin;
dcl	aloff		fixed bin init (0);
dcl	size		fixed bin;
dcl	offset		fixed bin;
dcl	reclen_off	fixed bin;
dcl	buflen_off	fixed bin;
dcl	buf_off		fixed bin;
dcl	ntag		fixed bin;

/*************************************/
/*************************************/
/* INITIALIZATION */
start:
	pr5_struct_ptr = addr (pr5_struct);
	rw_ptr = mp.pt (1);

	eos_ptr = mp.pt (mp.n);
	ioerror.retry_tag = cobol_$next_tag;
	good_tag = cobol_$next_tag + 1;
	stream_tag = cobol_$next_tag + 2;
	seek_tag = cobol_$next_tag + 3;
	write_tag = cobol_$next_tag + 4;		/* [3.0-1] */
	alt_tag = cobol_$next_tag + 5;		/* [3.0-1] */
	alt_seek_tag = cobol_$next_tag + 6;
	cobol_$next_tag = cobol_$next_tag + 7;		/*[4.4-1]*/
	call set_up;
	arg_ptr = addr (args);
	ioerror.cobol_code = 0;
	ioerror.type1_ptr = mp.pt (1);
	ioerror.mode = 0;
	ioerror_ptr = addr (ioerror);
	iocb_arg.pt = addr (iocb_struct);

	if end_stmt.b = "1"b
	then do;
		passed_tag, ioerror.ns_tag = cobol_$next_tag;
		ioerror.is_tag = cobol_$next_tag + 1;
		cobol_$next_tag = cobol_$next_tag + 2;
	     end;
	else do;
		ioerror.is_tag = 0;
		ioerror.ns_tag = cobol_$next_tag;
		cobol_$next_tag = cobol_$next_tag + 1;
	     end;

/*[4.4-1]*/
	call cobol_read_ft (fn, ft_ptr);

	if file_table.organization = 5
	then file_table.organization = 4;		/* temporary */

	iocb_struct.seg = file_table.fsb.seg;
	iocb_struct.offset = file_table.fsb.off;

	call cobol_alloc$stack (56, 2, aloff);		/* enough for 14 words - aloff is a wd offset */

	args.arglist_off = aloff;
	args.n = 4;
	argb (1) = unspec (iocb_arg);
	argb (4) = unspec (status_arg);
	buflen_off = 80;


/*************************************/
/* START CODE GENERATION */
start_codegen:					/* MOVE FROM DATANAME TO BUFFER IF NECESSARY */
	if end_stmt.c = "1"b			/* FROM specified */
	then do;
		mpout.pt1 = mp.pt (1);
		mpout.pt2 = mp.pt (3);
		mpout.pt3 = mp.pt (2);
		mpout.pt4 = addr (type19);

		call cobol_move_gen (addr (mpout));

	     end;

/* MAKE SURE FILE IS OPEN */

	call cobol_define_tag (ioerror.retry_tag);

	call cobol_set_fsbptr (ft_ptr);		/* generates epp1 pr4|102,* */

/* OPERATOR39(init_write) */
	call cobol_call_op (39, good_tag);		/* INT_WRITE_OP */

	call cobol_gen_ioerror (ft_ptr, ioerror_ptr);

	call cobol_define_tag (good_tag);

	if file_table.linage			/* LINAGE TOP initialization */
	then do;
		call cobol_read_rand (1, file_table.linage_info, linage_ptr);

		if linage_rec.top > 0
		then do;
			if linage_rec.top ^= 5
			then call linage_init (linage_rec.top, 94 * 4);
			else call cobol_ioop_util$set_fsb (linage_rec.top_int, 94);

		     end;

	     end;					/*[4.4-1]*/
	if var					/*[4.4-1]*/
	then do;
		var = data_name.variable_length;
		temp = data_name.item_length;
	     end;					/*[4.4-1]*/
	else do;
		var = file_table.variable;
		temp = file_table.max_cra_size;
	     end;					/* ESTABLISH RECORD LENGTH */
						/*[4.4-1]*/
	if ^var
	then do;

		call cobol_io_util$move_direct ("110"b, buflen_off * 4, 4, 1, substr (unspec (temp), 19, 18));
	     end;

	else do;

		if ^file_table.rec_do
		then call cobol_get_size (dn_ptr, buflen_off, reserved_word.line);

		else do;

			call cobol_read_rand (1, file_table.rec_do_info, fkey_ptr);

			addr (fkey_type9.file_key_info) -> file_key_desc = file_key.desc;

			call cobol_io_util$t9dec_to_bin ("110"b, buflen_off * 4, addr (fkey_type9));

		     end;
	     end;

/* CONVERT IF CODE SET INDICATES SO */
	code_set_sw = file_table.code_set_clause & file_table.code_set = 12;

	if code_set_sw
	then do;
		call cobol_alloc$stack (data_name.size + 1, 2, stoff);
						/*-10/07/76-*/

		trans_type9.seg = 1000;		/* in stack */
		trans_type9.off = stoff * 4;		/*-10/07/76-*/
		trans_type9.size = data_name.size;

		call cobol_trans_alphabet$io (dn_ptr, addr (trans_type9), fixed (file_table.code_set), 0);

		dn_ptr = addr (trans_type9);		/* set to converted record for remainder of this generator */

	     end;

/* STREAM OUTPUT */

/* [3.0-1] */
	alt_sw = file_table.organization = 3 /* ind */ /* [3.0-1] */ & /* [3.0-1] */ file_table.alternate_keys ^= 0;

	if file_table.organization = 4 | file_table.device = 1 | file_table.device = 3
	then do;
		if end_stmt.b = "1"b
		then /* in-line error coding follows */
		     call cobol_ioop_util$set_icode;

		if code_set_sw
		then do;
			save_mp2_ptr = mp.pt (2);
			mp.pt (2) = addr (trans_type9);


		     end;

		call cobol_linage (ft_ptr, mp_ptr, buflen_off, buf_off, ioerror_ptr);

/* OPPERATOR52(LINAGE) */
		call init_linage;			/*[4.0-2]*/
		if code_set_sw
		then mp.pt (2) = save_mp2_ptr;

		call cobol_set_fsbptr (ft_ptr);

		call cobol_ioop_util$disp (buf_off);

/* OPERATOR68(write_stream_linage) */

		if file_table.linage
		then call cobol_call_op (68, stream_tag);
						/* write_stream_linage_op */

/* OPERATOR40(write_stream) */

		else call cobol_call_op (40, stream_tag);
						/* write_stream_op */

		call cobol_gen_ioerror (ft_ptr, ioerror_ptr);

	     end;

	else do;

		if file_table.access < 2
		then if file_table.external | file_table.open_io
		     then do;
			     ntag = cobol_$next_tag;
			     cobol_$next_tag = cobol_$next_tag + 1;

			     call cobol_io_util$bypass_mode_error (ntag, "10"b);

			     call cobol_define_tag (ntag);

			end;

/* SEEK KEY FOR RELATIVE OR INDEXED FILES */

		if file_table.organization ^= 1	/* not sequential */
		then do;
			if file_table.relative_key | file_table.record_key
			then do;

				call cobol_read_rand (1, file_table.r_key_info, fkey_ptr);

				addr (fkey_type9.file_key_info) -> file_key_desc = file_key.desc;
			     end;

			if file_table.organization = 2 & file_table.access < 2
						/* relative sequential */
			then do;
				call cobol_io_util$fixed_add ("001"b, fsb_relkey, 1, ""b, 0);
						/* must maintain own relkey */

				call cobol_io_util$bin_to_dec ("001"b, fsb_key, 16, "001"b, fsb_relkey, 4);

				call cobol_io_util$move_direct ("001"b, fsb_keylen_sw, 4, 1,
				     "000000000000010000"b);

			     end;
			else do;

				mpout.pt1 = mp.pt (1);
				mpout.pt2 = addr (fkey_type9);
				if file_table.organization = 2
				then do;
					mpout.pt3 = addr (num_type9);
					size, num_type9.size, num_type9.places_left = 16;
					num_type9.seg = 5001;
						/* from PR1 */
					num_type9.off = file_table.fsb.off + fsb_key;
				     end;
				else do;		/* indexed */
					mpout.pt3 = addr (alpha_type9);
					size, alpha_type9.size = fkey_type9.size;
					alpha_type9.seg = 5001;
						/* from PR1 */
					alpha_type9.off = file_table.fsb.off + fsb_key;
				     end;

				mpout.pt4 = addr (type19);

				call cobol_move_gen (addr (mpout));
						/* must always move reckey to varying string */

				call cobol_io_util$move_direct ("001"b, fsb_keylen_sw, 4, 1,
				     substr (unspec (size), 19, 18));

			     end;

			if alt_sw
			then call EMIT_OP_91;

			call cobol_call_op (41, seek_tag);
						/* OPERATOR41(seek_tag) */

			call cobol_gen_ioerror (ft_ptr, ioerror_ptr);

			call cobol_define_tag (seek_tag);


/* RESET "LAST-KEY-READ" IF NECESSARY */
			if file_table.access < 2 & (file_table.external | file_table.open_io)
			then do;
				call cobol_set_fsbptr (ft_ptr);
						/* set pr1 to fsb */

				call cobol_io_util$move_direct ("001"b, fsb_keylen_sw, 4, 1, ""b);
						/* zero fsb.keylen_sw */

			     end;

		     end;

		else if alt_sw
		then call EMIT_OP_91;

/* WRITE THE RECORD */

		call cobol_set_pr (pr5_struct_ptr, dn_ptr);

		if end_stmt.b = "1"b
		then call cobol_ioop_util$set_icode;

		call cobol_call_op (42, write_tag);	/* OPERATOR42(write_record) */

		call cobol_gen_ioerror (ft_ptr, ioerror_ptr);

		call cobol_define_tag (write_tag);

/* [3.0-1] */
		if alt_sw				/* [3.0-1] */
		then do;
			call cobol_io_util$file_desc (file_table.file_desc_1_offset);
						/* [3.0-1] */
			call cobol_call_op (90, stream_tag);
						/* OPERATOR90(alt_add_write_keys) */
						/* [3.0-1] */
			call cobol_gen_ioerror (ft_ptr, ioerror_ptr);
						/* [3.0-1] */
		     end;

/* SET RELATIVE KEY IF NECESSARY */
		if file_table.organization = 2 & file_table.access < 2 & file_table.relative_key
		then do;
			call cobol_set_fsbptr (ft_ptr);

			mpout.pt1 = mp.pt (1);
			mpout.pt2 = addr (num_type9);
			num_type9.size, num_type9.places_left = 16;
			num_type9.seg = 5001;	/* from PR1 */
			num_type9.off = file_table.fsb.off + fsb_key;
			mpout.pt3 = addr (fkey_type9);
			mpout.pt4 = addr (type19);

			call cobol_move_gen (addr (mpout));

		     end;

	     end;


	call cobol_define_tag (stream_tag);

/* [3.0-1] */
	if alt_sw
	then call cobol_set_fsbptr (ft_ptr);



	call cobol_reg_manager$after_op (4095 + ioerror.cobol_code);

/*[4.0-1]*/
	if end_stmt.f = "01"b			/*[4.0-1]*/
	then passed_tag = ioerror.is_tag;		/*[4.0-1]*/
	else call cobol_gen_ioerror$finish_up (ft_ptr, ioerror_ptr);


	return;

EMIT_OP_91:
     proc;

/* [3.0-1] */
	call cobol_io_util$file_desc (file_table.file_desc_1_offset);
						/* [3.0-1] */
	call cobol_set_pr (pr5_struct_ptr, dn_ptr);	/* [3.0-1] */
	call cobol_call_op (91, alt_seek_tag);		/* OPERATOR91(alt_seek_key) */
						/* [3.0-1] */
	call cobol_gen_ioerror (ft_ptr, ioerror_ptr);	/* [3.0-1] */
	call cobol_define_tag (alt_seek_tag);		/* [3.0-1] */
	call cobol_set_fsbptr (ft_ptr);

     end;

/**/
/****************************************/

linage_init:
     proc (index_value, fsb_offset);

dcl	index_value	fixed bin (15);
dcl	fsb_offset	fixed bin;

	addr (fkey_type9.file_key_info) -> file_key_desc = linage_rec.name_desc (index_value);

	mpout.n = 4;
	mpout.pt1 = mp.pt (1);
	mpout.pt2 = addr (fkey_type9);
	mpout.pt3 = addr (comp6_type9);

	comp6_type9.size, comp6_type9.places_left = 4;
	comp6_type9.seg = 5001;			/* TO PR1 */
	comp6_type9.off = file_table.fsb.off + fsb_offset;

	mpout.pt4 = addr (type19);

	call cobol_move_gen (addr (mpout));

	return;

     end linage_init;
init_linage:
     proc;					/*[4.0-2]*/
						/*     This block of code was made into a subroutine in order to fix a bug in the
  write using a LINAGE clause.  This is the code genetated that assigns the new
  Page-Size, Footing-Size, and Bottom-Size  */

	if file_table.linage			/* LINAGE initialization */
	then do;
		call cobol_set_fsbptr (ft_ptr);

		skip_tag = cobol_$next_tag;
		cobol_$next_tag = cobol_$next_tag + 1;

		call cobol_ioop_util$bypass_reset (skip_tag);

		call cobol_read_rand (1, file_table.linage_info, linage_ptr);

		if linage_rec.body > 0
		then do;
			if linage_rec.body ^= 5
			then call linage_init (linage_rec.body, 92 * 4);
			else call cobol_ioop_util$set_fsb (linage_rec.body_int, 92);

		     end;
		else do;

			linage_rec.body_int = 66;	/* default  should no reach this point. */
			linage_rec.body = 5;

			call cobol_ioop_util$set_fsb (linage_rec.body_int, 92);

		     end;

		if linage_rec.footing > 0
		then do;
			if linage_rec.footing ^= 5
			then call linage_init (linage_rec.footing, 93 * 4);

			else do;

				if linage_rec.footing_int = 0
				then call cobol_ioop_util$set_fsb (linage_rec.body_int, 135);

				else call cobol_ioop_util$set_fsb (linage_rec.footing_int, 93);

			     end;

		     end;
		else do;

			if linage_rec.body ^= 5
			then call linage_init (linage_rec.body, 93 * 4);
			else call cobol_ioop_util$set_fsb (linage_rec.body_int, 93);

		     end;

		if linage_rec.bottom > 0
		then do;
			if linage_rec.bottom ^= 5
			then call linage_init (linage_rec.bottom, 95 * 4);
			else call cobol_ioop_util$set_fsb (linage_rec.bottom_int, 95);

		     end;

		call cobol_define_tag (skip_tag);


	     end;

     end init_linage;

set_up:
     proc;

/*[4.4-1]*/
	if end_stmt.a = "010"b			/*[4.4-1]*/
	then do;
		end_stmt.c = "0"b;			/* write fn from dn (report) */
						/*[4.4-1]*/
		end_stmt.a = "001"b;		/*[4.4-1]*/
		dn_ptr = mp.pt (3);			/*[4.4-1]*/
		fn = mp.pt (2) -> fd_token.file_no;	/*[4.4-1]*/
		mp.pt (2) = mp.pt (3);		/*[4.4-1]*/
		var = "1"b;			/*[4.4-1]*/
	     end;					/*[4.4-1]*/
	else do;
		dn_ptr = mp.pt (2);			/*[4.4-1]*/
		fn = data_name.file_num;		/*[4.4-1]*/
		var = "0"b;			/*[4.4-1]*/
	     end;

     end;


%include cobol_write_gen_info;
%include cobol_write_gen_data;

declare	1 fd_token	based,
%include cobol_TYPE12;
     end cobol_write_gen;
