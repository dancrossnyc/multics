/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_stop_gen.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 06/11/81 by FCH, OPERATOR(94) used for STOP RUN if CD INITIAL */
/* Modified on 01/14/77 by ORN to signal command_abort_ rather than cobol_compiler_error */
/* Modified since Version 2.0 */

/*{*/
/* format: style3 */
cobol_stop_gen:
     proc (in_token_ptr);

/*
The procedure cobol_stop_gen generates the code necessary to imple-
ment the STOP statement.  The general format of the STOP state-
ment is:

	S_T_O_P_ {R_U_N_|literal}

If RUN is specified, execution of the run-unit ceases and control
is transferred to the operating system.  This is accomplished by
calling cobol_stoprun_, a program supplied as part of the run
time package.

If literal is specified, the execution of the run-unit is sus-
pended and the literal plus prog_id, as contained in the stat
structure of the program, is communicated to the terminal.  A
start command issued from the terminal reactivates the run-unit.
The DISPLAY generator is called to generate the code necessary to
transmit the desired message to the terminal and the system sub-
routine cu_$cl is called to reach command level.  Execution is
resumed with the instruction following the call to cu_$cl.

U__s_a_g_e:_

     declare cobol_stop_gen entry (ptr);

     call cobol_stop_gen(in_token_ptr);

						   */


/*
G__e_n_e_r_a_t_e_d_C__o_d_e:_

STOP RUN  -

For the STOP RUN statement, code is generated to place the line
number of the STOP RUN source statement in the program's stat
structure and to call cobol_stoprun_, a program supplied as part
of the run time package.  cobol_stoprun_ has no parameters.

The code generated to set line_no in stat and call cobol_stoprun_ is 
as follows:

loc_a lda    iln1,dl
      ldq    iln2,dl
      staq   pr4|36		stat.line_no
      eax1   pr6|46
      fld    0,dl
      epp2   pr4|ep_c_sr_,*
      tsx0   pr0|call_eo
      tra    loc_a_relp,ic

where:

iln1 and iln2 are the two parts of the internal line number of
	    the source line containing the STOP RUN statement
	    as determined at compile time.

ep_c_sr_	    is the offset, relative to the base of the Linkage
	    Section, of an execution time pointer (created as a
	    Type 4 link in the Object Segment) to the entry
	    point of cobol_stoprun_.

call_eo	    is the location, relative to the label operator_
	    table in cobol_operators_, of the first instruction
	    of the PLI call operator call_ext_out.  The current
	    value of call_eo is 6.

loc_a_relp    is the offset, relative to the instruction in which
	    it appears, of the first instruction generated to
	    implement the STOP RUN statement (it may be either
	    the instruction labeled loc_a in the above code or
	    an instruction generated to load pr4 to point to
	    the Linkage Section).

STOP literal  -

For the STOP literal statement, code is generated to print a mes-
sage comprising the program identification (stat.prog_id), a
colon space, and the literal on the terminal and to suspend the
execution of the run-unit.  Mc_stop_run calls cobol_display_gen to 
generate the code for printing the message at the terminal and 
itself generates the code for calling system subroutine cu_$cl 
which affects the required suspension of execution. A description 
of the functionality of cu_$cl may be found in the MPM.  The code 
generated to call cu_$cl, which has no arguments, is as follows:

      eax1   pr6|46
      fld    0,dl
      epp2   pr4|ep_cu_$cl,*
      tsx0   pr0|call_eo

where:

ep_cu_$cl is the offset, relative to the base of the Linkage Sec-
	tion, of an execution time pointer (created as a Type 4
	link in the Object Segment) to the entry point of 
	cu_$cl.
all_eo	is the location, relative to the label operator_table
	in cobol_operators_, of the first instruction of the PLI
	call operator call_ext_out.  The current value of
	call_eo is 6.

R__e_l_o_c_a_t_i_o_n_I__n_f_o_r_m_a_t_i_o_n:_

All instructions generated directly by cobol_stop_gen except those
referencing data in the Linkage Section of the Object Segment are
non-relocatable.  The relocation code generated for each half of
each non-relocatable instruction is "00000"b.

Instructions generated directly by cobol_stop_gen that reference
data in the Linkage Section i.e. those instructions in the code
sequence of the form
	<opcode>  pr4|<offset>
are relocatable with respect to their left hand half and non-re-
locatable with respect to thier right hand half.  The relocation
code generated for the relocatable half of each such instruction
is "11001"b, when the operand referenced by the instruction is 
internal data, and "10100"b, when it is a link. In either case, 
the code generated for the non_relocatable half is "00000"b.

D__a_t_a:_

     % include cobol_;

	Items in cobol_ include file used (u) and/or set (s) by
	cobol_stop_gen:

	     cobol_ptr (u)
	     temp_token_ptr (u)
	     text_wd_off (u)

						   */

dcl	inst_seq		(4) bit (18) unaligned static init ("000000000000000000"b, "010011101000000111"b,
						/* lda    iln1,dl	*/
			"000000000000000000"b, "010011110000000111"b);
						/* ldq    iln2,dl	*/

dcl	tra_ic		(2) bit (18) unaligned static init ("000000000000000000"b, "111001000000000100"b);
						/* tra    loc-a-relp,ic	*/

declare	1 token3		aligned static,
	  2 size		fixed bin aligned init (25),
	  2 line		fixed bin aligned init (0),
	  2 column	fixed bin aligned init (0),
	  2 type		fixed bin aligned init (3),
	  2 lit_type	bit (1) unaligned init ("0"b),
	  2 all_lit	bit (1) unaligned init ("0"b),
	  2 filler1	bit (6) unaligned init ((6)"0"b),
	  2 lit_size	fixed bin aligned init (2),
	  2 string	char (2) aligned init (": ");

declare	1 display_eos	aligned static,
	  2 size		fixed bin aligned init (38),
	  2 line		fixed bin aligned init (0),
	  2 column	fixed bin aligned init (0),
	  2 type		fixed bin aligned init (19),
	  2 verb		fixed bin aligned init (42),
	  2 e		fixed bin aligned init (3),
	  2 h		fixed bin aligned init (0),
	  2 i		fixed bin aligned init (0),
	  2 j		fixed bin aligned init (0),
	  2 a		bit (3) unaligned init ("001"b),
	  2 b		bit (1) unaligned init ("0"b),
	  2 c		bit (1) unaligned init ("0"b),
	  2 d		bit (2) unaligned init ("00"b),
	  2 f		bit (2) unaligned init ("00"b),
	  2 g		bit (2) unaligned init ("00"b),
	  2 k		bit (5) unaligned init ((5)"0"b);
						/*  Local Data					   */

declare	offset		fixed bin,		/* Word offset.		   */
	line_no		fixed bin,		/* Line number from type1 token. */
	local_in_token_ptr	ptr,			/* Ptr to in_token structure     */
						/* passed to display generator.  */
	type9_token_ptr	ptr;			/* Ptr to type 9 token for	   */
						/* stat.prog_id.		   */

dcl	next_tag1;

dcl	dn_ptr		ptr;			/* Ptr to data_name token.	   */


declare	1 seg_ovfl_error	aligned static,
	  2 my_name	char (32) init ("cobol_stop_gen"),
	  2 message_len	fixed bin init (40),
	  2 message	char (40) init ("temp_token_area segment length exceeded!");

/*
P__r_o_c_e_d_u_r_e_s_C__a_l_l_e_d:_
						   */

dcl	cobol_display_gen	entry (ptr),
	cobol_emit	entry (ptr, ptr, fixed bin),
	cobol_reg_manager$before_op
			entry (fixed bin),
	cobol_make_type9$alphanumeric
			entry (ptr, fixed bin, fixed bin, fixed bin),
	cobol_reg_manager$after_op
			entry (fixed bin),
	cobol_call_op	entry (fixed bin, fixed bin),
	cobol_define_tag	entry (fixed bin),
	signal_		entry (char (*), ptr, ptr);

/*
B__u_i_l_t-__i_n_F__u_n_c_t_i_o_n_s_U__s_e_d:_
						   */

dcl	addr		builtin,
	addrel		builtin,
	binary		builtin,
	null		builtin,
	rel		builtin,
	substr		builtin,
	unspec		builtin;

/*}*/

%include cobol_;
%include cobol_type1;
%include cobol_type9;
%include cobol_type19;
%include cobol_in_token;


/*************************************/

/*[4.4-1]*/
dcl	A		bit (3),
	op_num		fixed bin;
start:						/*[4.4-1]*/
	A = in_token.token_ptr (in_token.n) -> end_stmt.a;

/*[4.4-1]*/
	if A ^= "001"b
	then goto stop_run;

	else goto stop_literal;

/*  Implementation for STOP RUN statement		   */

stop_run:
	line_no = in_token.token_ptr (1) -> reserved_word.line;

/*  Insert table look-up to determine iln1 and iln2.  In mean- */
/*  time, use line_no as iln1 and 0 as iln2.		   */

/*[4.4-1]*/
	if A = "010"b
	then op_num = 94;
	else op_num = 48;

	inst_seq (1) = substr (unspec (line_no), 19, 18);
	next_tag1 = cobol_$next_tag;
	cobol_$next_tag = cobol_$next_tag + 1;
	call cobol_reg_manager$before_op (0);
	call cobol_define_tag (next_tag1);
	call cobol_emit (addr (inst_seq), null (), 2);	/*[4.4-1]*/
	call cobol_call_op (op_num, next_tag1);

	return;

/*  Implementation of STOP literal.			   */

stop_literal:
	if 262143 - binary (rel (temp_token_ptr), 17) < 40
	then goto signal_seg_ovfl;

	if substr (rel (temp_token_ptr), 18, 1) = "1"b
	then temp_token_ptr = addrel (temp_token_ptr, 1);

	local_in_token_ptr = temp_token_ptr;
	type9_token_ptr = addrel (local_in_token_ptr, 12);
	temp_token_ptr = addrel (local_in_token_ptr, 40);
	call cobol_make_type9$alphanumeric (type9_token_ptr, 3002, 76, 65);
	type9_token_ptr -> data_name.size_rtn = -1;
	type9_token_ptr -> data_name.variable_length = "1"b;
	local_in_token_ptr -> in_token.n = 5;
	local_in_token_ptr -> in_token.code = 0;
	local_in_token_ptr -> in_token.token_ptr (1) = in_token_ptr -> in_token.token_ptr (1);
	local_in_token_ptr -> in_token.token_ptr (2) = type9_token_ptr;
	local_in_token_ptr -> in_token.token_ptr (3) = addr (token3);
	local_in_token_ptr -> in_token.token_ptr (4) = in_token_ptr -> in_token.token_ptr (2);
	local_in_token_ptr -> in_token.token_ptr (5) = addr (display_eos);
	call cobol_display_gen (local_in_token_ptr);
	call cobol_reg_manager$after_op (0);
	call cobol_call_op (43, 0);

	return;

signal_seg_ovfl:
	call signal_ ("command_abort_", null, addr (seg_ovfl_error));
	return;

     end cobol_stop_gen;
