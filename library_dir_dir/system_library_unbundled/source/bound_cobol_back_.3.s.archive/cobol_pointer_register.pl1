/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_pointer_register.pl1 Added Trace statements.
                                                   END HISTORY COMMENTS */


/* Modified on 11/19/84 by FCH, [4.3-1}, BUG563(phx18381), new cobol_addr_tokens.incl.pl1 */
/* Modified on 09/08/83 by FCH, [5.2...], trace added */
/* Modified on 01/14/77 by ORN to signal command_abort rather than cobol_compiler_error */
/* Modified since Version 2.0 */

/*{*/
/* format: style3 */
cobol_pointer_register:
     proc;					/* the procedure is not a valid entry point */
						/*}*/
	return;


/*************************************/
/*{*/
call:
     entry;

/*
This entry is called immediately before a call is to be generated;
thus PR0 must point to cobol_operators, PR4 must point to linkage
section; and PR2 will be destroyed.
}*/
start_call:
	return;					/* for now */


/*************************************/
/*{*/
get:
     entry (struc_ptr);				/*
This entry obtains a pointer register for the caller.
	*/
dcl	struc_ptr		ptr;			/*
struc_ptr is a pointer to the following structure. (input)
 */

dcl	1 structure	based (struc_ptr),
	  2 what_pointer	fixed bin,
	  2 pointer_no	bit (3),
	  2 lock		fixed bin,
	  2 switch	fixed bin,
	  2 segno		fixed bin,
	  2 offset	fixed bin (24),
	  2 reset		fixed bin;

/*
 what_pointer specifies the pointer register to be obtained.
	(input)
	0-7 - get this pointer register.
	 10 - get any temporary pointer register.
 pointer_no is the register that is assigned, in the
	range 0-7. (output)
 lock	can have the following values. (input)
	0 - do not change the lock or unlock status
	    of this pointer.
	1 - lock the pointer register.
	2 - unlock all pointer registers.
	3 - unlock all pointer registers and A register
	    and Q register and all index registers.
 switch	has the following values. (input)
	0 - the register will not contain a value
	    that is meaningful for register optimization.
	    Segment number and offset are meaningless.
	1 - a segment number and word offset are supplied.
	2 - a segment number and character offset are supplied
 segno 	is the segment number. (input)
	values recognized are:
	    2 - cobol data.
	 1000 - stack.
	 3000 - constants.
	 3002 - multics linkage.
	 4000 - cobol operators.
	2nnnn - cobol linkage.
	   -n - link in multics linkage.
 offset	is the word or character offset (depending on switch).
	Any case when the offset is meaningless a 0 value
	must be used. 
	If a character offset is provided only the word
	portion is meaningful. (input)
 reset	specifies that the caller has requested a register
	that must have a preset value. For example a preset
	register to cobol data or the pointer to pl/1 operators
	(likely). This is only of interest to callers
	who request a specific register (what_pointer = 0-7)
	Such callers should test reset. If it is 1, a call to
	cobol_reset_r should be made in order
	to emit instructions to reload the register to
	its proper value.

 Notes:
 1. If switch has a non zero value and the pointer register
   does not contain the specified segno and offset this
   utility will emit instructions to load
   the pointer register.
 2. (a) Generally a register should not be locked.
   (b) Exceptions would be the case when  (1) several
	  calls must be make to this utility and the caller
	  does not wish to obtain the same register (2) Calls
	  to this utility are interspurced with calls to the
	  addressability utilities and the user does not wish to
	  obtain the same register.
 3. There is no need to call to get pointer register 6 (the
   stack frame). We can always assume this is set.
 4. If the caller requests a specific pointer register
   who's priority was lock a compile time error will occur.
   This may change if we need more sophisticated
   pointer register handling.
 */


/*}*/
dcl	1 reg_err		static,
	  2 name		char (32) init ("cobol_register$get"),
	  2 message_len	fixed bin (35) init (30),
	  2 message	char (30) init ("Unable to get a register");
dcl	1 ptr_err		static,
	  2 name		char (32) init ("cobol_register$get"),
	  2 message_len	fixed bin (35) init (30),
	  2 message	char (30) init ("unable to get pointer register");
dcl	1 contents_err	static,
	  2 name		char (32) init ("cobol_pointer_register$get"),
	  2 message_len	fixed bin init (53),
	  2 message	char (54) init ("Attempt to load invalid contents into pointer register");
dcl	(i, k, m)		fixed bin;
dcl	save_i		fixed bin;
dcl	best_yet		fixed bin;
dcl	best_current	fixed bin;
dcl	new_wd_off	fixed bin (24);
dcl	call_pr_num	bit (3);
dcl	reloc_ptr		ptr;
dcl	call_off		fixed bin (24);
dcl	1 inst		(10) aligned,
	  2 i_y		unaligned,
	    3 i_pr	bit (3) unaligned,
	    3 i_off	bit (15) unaligned,
	  2 i_op		bit (10) unaligned,
	  2 i_zero	bit (1) unaligned,
	  2 i_ar		bit (1) unaligned,
	  2 i_tm		bit (2) unaligned,
	  2 i_td		bit (4) unaligned;
dcl	1 reloc		(20) aligned,
	  2 r_left	bit (5) aligned,
	  2 r_right	bit (5) aligned;
dcl	cobol_emit	entry (ptr, ptr, fixed bin);	/*  DECLARATION OF EXTERNAL ENTRIES  */

dcl	cobol_register_util$restore_pointer
			ext entry (bit (4));
dcl	cobol_register_util$restore
			ext entry (bit (4));
dcl	cobol_register_util$save_pointer
			ext entry (bit (4));
dcl	cobol_register$load ext entry (ptr);

dcl	signal_		entry (char (*), ptr, ptr);
dcl	char_no		bit (2);
dcl	bit_4		bit (4);
dcl	temp_reg		fixed bin int static init (0);
dcl	r		fixed bin;
dcl	1 register_struc,
	  2 what_reg	fixed bin,
	  2 reg_no	bit (4),
	  2 lock		fixed bin,
	  2 already_there	fixed bin,
	  2 contains	fixed bin,
	  2 tok_ptr	ptr,
	  2 literal	bit (36);


	/***..... dcl LOCAL_NAME char (4) int static init ("$GET");/**/
	/***.....if Trace_Bit then call cobol_gen_driver_$Tr_Beg(MY_NAME||LOCAL_NAME);/**/
	reset = 0;
	if switch = 1
	then new_wd_off = offset;
	else if switch = 2
	then do;
		new_wd_off = binary (substr (unspec (offset), 1, 34));
		char_no = substr (unspec (offset), 35, 2);
	     end;
	if what_pointer = 10
	then do;

/* get any temporary pointer register */

		best_yet = 0;
		do i = 0 to 7;
		     if usage (i) = 0
		     then do;			/* the current register is temporary pointer */
			     best_current = 0;
			     if switch = 0
			     then do;

/* a specific value was not supplied by caller */

				     if p_lock (i) = 0
				     then do;	/* register not locked */
					     if p_priority (i) = 0 & contents_sw (i) = 0
					     then go to specific_1;
					     if p_priority (i) = 0 & contents_sw (i) = 1
					     then best_current = 3;
					     else if p_priority (i) = 1 & contents_sw (i) = 0
					     then best_current = 2;
					     else best_current = 1;
					end;
				end;
			     else do;

/* a specific value has been supplied by caller */

				     if contents_sw (i) ^= 0 & seg_num (i) = segno & wd_offset (i) = new_wd_off
				     then go to specific_1;
						/* contents do not match */
				     if p_lock (i) = 0
				     then do;	/* register not locked*/
					     if p_priority (i) = 0 & contents_sw (i) = 0
					     then best_current = 4;
					     else if p_priority (i) = 0 & contents_sw (i) = 1
					     then best_current = 3;
					     else if p_priority (i) = 1 & contents_sw (i) = 0
					     then best_current = 2;
					     else best_current = 1;
					end;
				end;

/* has a better register been found */

			     if best_current > best_yet
			     then do;
				     best_yet = best_current;
				     save_i = i;
				end;
			end;
		end;
		i = save_i;
		if best_yet = 0
		then do;				/* unable to get any temporary register */
						/*  Pick a temporary pointer register, and save it.  */
			temp_reg = mod (temp_reg + 1, 7);
			if temp_reg > 2
			then temp_reg = 7;
			bit_4 = substr (unspec (temp_reg), 33, 4);
			call cobol_register_util$save_pointer (bit_4);
			i = temp_reg;
			ptr_status.p_priority (i) = 0;
			ptr_status.contents_sw (i) = 0;
			ptr_status.seg_num (i) = 0;
			ptr_status.wd_offset (i) = 0;
		     end;
		go to specific_1;
	     end;
	else do;

/* a specific pointer register was requested */

		i = what_pointer;
		if p_lock (i) = 1
		then do;				/* the pointer register is locked */
						/*  Save the current contents of the register, and unlock it.  */
			call cobol_register_util$save_pointer (substr (unspec (i), 33, 4));
			ptr_status.p_lock (i) = 0;
			ptr_status.contents_sw (i) = 0;
			ptr_status.seg_num (i) = 0;
			ptr_status.wd_offset (i) = 0;
		     end;

specific_1:
		structure.pointer_no = pointer_num (i);
		if (structure.lock = 1) | (ptr_status.save_stack_count (i) > 0)
		then p_lock (i) = 1;
		if switch = 0
		then do;				/* caller has not supplied contents */
			contents_sw (i) = 0;
			reset = p_reset (i);
		     end;
		else do;
			if contents_sw (i) = 0
			then do;
				go to load;
			     end;
			else if (^(seg_num (i) = segno & wd_offset (i) = new_wd_off))
			then do;

load:						/* emit instructions to load pointer registers*/
				m = 0;
				reloc_ptr = null ();

/* cobol data */

				if segno = 2
				then do;
					if new_wd_off > 262143
					then do;
cont_err:
						call signal_ ("command_abort_", null (), addr (contents_err));
						return;
					     end;

/* epbpr pr6|110,*    */
/* 7/9/76*/
					call make_inst ("110"b, 110, "0111010001"b, "1"b, "01"b, "0"b);

/* adwpr call_off,du     */
					call_off = new_wd_off - 16384;
					call make_inst ("0"b, call_off, "0001010000"b, "0"b, "00"b, "0011"b);
					go to emit;
				     end;

/*  stack  */

				if segno = 1000
				then do;
					if new_wd_off > 16383
					then go to cont_err;
						/*   eppr pr6|new_wd_off    */
					call make_inst ("110"b, new_wd_off, "0111010000"b, "1"b, "00"b, "0000"b)
					     ;
					go to emit;
				     end;

/* constant portion of text segment  */

				if segno = 3000
				then do;
					call_off = (-(cobol_$text_wd_off + new_wd_off));
						/*   eppr call_off,ic   */
					call make_inst ("0"b, call_off, "0111010000"b, "0"b, "00"b, "0100"b);
					go to emit;
				     end;

/* multics linkage section  */

				if segno = 3002
				then do;
					if new_wd_off > 16383
					then go to cont_err;
					reloc_ptr = addr (reloc (1));
					if contents_sw (4) = 1 & seg_num (4) = 3002 & wd_offset (4) = 0
					then do;	/* pr4 is set to the multics linkage section */
						/* eppr pr4|new_wd_off     */
						call make_inst ("100"b, new_wd_off, "0111010000"b, "1"b,
						     "00"b, "0000"b);
						r_left (m) = "11001"b;
						/* internal static 15 */
						r_right (m) = "0"b;
					     end;
					else do;
						call_pr_num = pointer_num (i);
						/* eppr pr6|36,*    */
						call make_inst ("110"b, 36, "0111010000"b, "1"b, "01"b,
						     "0000"b);
						r_left (m) = "0"b;
						r_right (m) = "0"b;
						/*  eppr prr | new_wd_off   */
						call make_inst (call_pr_num, new_wd_off, "0111010000"b, "1"b,
						     "00"b, "0000"b);
						r_left (m) = "11001"b;
						/* internal static 18  */
						r_right (m) = "0"b;
					     end;
					go to emit;
				     end;

/* cobol operators */

				if segno = 4000
				then do;		/* eppr pr6|24,*    */
					call make_inst ("110"b, 24, "0111010000"b, "1"b, "01"b, "0000"b);
					go to emit;
				     end;

/*  cobol linkage section  */

				if segno >= 20000
				then do;		/* sets pointer reg to argument list */
						/*  eppr pr6|26,*   */
					call make_inst ("110"b, 26, "0111010000"b, "1"b, "01"b, "0000"b);
					if segno > 20000
					then do;	/* sets pointer reg  to the argument  */
						/* eppr   prr|2nnnn,*  */
						call_pr_num = pointer_num (i);
						call_off = 2 * (segno - 20000);
						call make_inst (call_pr_num, call_off, "0111010000"b, "1"b,
						     "01"b, "0000"b);
					     end;
					go to emit;
				     end;

/* link in multics linkage section */

				if segno < 0
				then do;
					if segno < -16384
					then go to cont_err;
					if new_wd_off > 262143
					then go to cont_err;
					call_off = (-(segno));
					reloc_ptr = addr (reloc (1));
					if contents_sw (4) = 1 & seg_num (4) = 3002 & wd_offset (4) = 0
					then do;	/* pr4 is set to multics linkage section  */
						/*   eppr pr4|n,*     */
						/*  put link into the register  */
						call make_inst ("100"b, call_off, "0111010000"b, "1"b, "01"b,
						     "0000"b);
						r_left (m) = "10100"b;
						/* link 15  */
						r_right (m) = "0"b;
					     end;
					else do;	/*  eppr  pr6|36,*      */
						/*  set ponter register to linkage section base  */
						call make_inst ("110"b, 36, "0111010000"b, "1"b, "01"b,
						     "0000"b);
						r_left (m) = "0"b;
						r_right (m) = "0"b;
						/*   eppr prr|n,*    put link into the register      */
						call_pr_num = pointer_num (i);
						call make_inst (call_pr_num, call_off, "0111010000"b, "1"b,
						     "01"b, "0000"b);
						r_left (m) = "10100"b;
						/* link 15  */
						r_right (m) = "0"b;
					     end;
					if new_wd_off ^= 0
					then do;	/*   adwpr new_wd_off,du    */
						call make_inst ("0"b, new_wd_off, "0001010000"b, "0"b, "00"b,
						     "0011"b);
						r_left (m) = "0"b;
						r_right (m) = "0"b;
					     end;
					go to emit;
				     end;

/* invalid segment number  */

				go to cont_err;

/* emit the instructions */

emit:						/* acount char offset if needed */
				if char_no ^= "00"b & switch ^= 1
				then do;		/* get a register */
						/*  Set up a register request structure to get any index register.  */
					register_struc.what_reg = 5;
						/*  Any index.  */
					register_struc.lock = 0;
					register_struc.contains = 0;
					call cobol_register$load (addr (register_struc));

load_char:					/* ldxn : load char no into register */
					m = m + 1;
					r_left (m) = "0"b;
					r_right (m) = "0"b;
					string (inst (m)) = "000000000000000000010010000000000011"b;
					substr (inst.i_y.i_off (m), 14, 2) = char_no;
					substr (inst.i_op (m), 7, 3) = substr (register_struc.reg_no, 2, 3);
						/* a9bd */
					m = m + 1;
					r_left (m) = "0"b;
					r_right (m) = "0"b;
					string (inst (m)) = "000000000000000000101000000101101000"b;
					substr (inst.i_td (m), 2, 3) = substr (register_struc.reg_no, 2, 3);
					inst.i_y.i_pr (m) = pointer_num (i);
					contents_sw (i) = 0;
				     end;

				else do;
					seg_num (i) = segno;
					wd_offset (i) = new_wd_off;
					contents_sw (i) = 1;
				     end;

				call cobol_emit (addr (inst (1)), reloc_ptr, m);




			     end;

reset_test:
			if p_reset (i) ^= 0
			then do;
				if seg_num (i) = reset_seg_num (i) & wd_offset (i) = reset_wd_offset (i)
				then go to lock_test;
				else reset = 1;
			     end;
		     end;

lock_test:
		if structure.lock > 1
		then do k = 0 to 7;			/* unlock all pointer registers */

			p_lock (k) = 0;
		     end;
		if structure.lock > 2
		then do k = 0 to 9;			/* unlock A, Q and index registers */
			r_lock (k) = 0;
		     end;
	     end;

	go to prx;


/*************************************/
/*{*/
priority:
     entry (lock_value, priority, reg_no);

	/***..... dcl LOCAL_NAME2 char (9) int static init ("$PRIORITY");/**/
	/***.....if Trace_Bit then call cobol_gen_driver_$Tr_Beg(MY_NAME||LOCAL_NAME2);/**/
/*
set the priority and/or lock of one or more registers.
	*/

dcl	lock_value	fixed bin;
dcl	priority		fixed bin;
dcl	reg_no		bit (3);			/*
 lock_value can have the following values (input)
	0 - do not change the lock or unlock status.
	1 - lock this pointer register.
	2 - unlock this pointer register.
	3 - unlock all pointer registers.
	4 - unlock all pointer registers and all index
	    registers, and the A and Q registers.
 priority  can have the following values (input)
	0 - do not change register priority.
	1 - set this pointer register to normal priority
	2 - set this pointer register to high priority.
	    The register handler will attempt to preserve
	    the contents of this register as long as possible
	3 - set all pointer registers to normal priority.
	4 - set all pointer registers and all index registers,
	    and the A and Q registers to normal priority.
 reg_no	is the pointer register number. (input)
	*/
						/*}*/

/* manage lock */

	if lock_value ^= 0
	then do;
		if lock_value = 1
		then p_lock (fixed (reg_no)) = 1;
		else if lock_value = 2
		then do;
			k = fixed (reg_no);
			if ptr_status.save_stack_count (k) ^= 0
			then do;			/*  Restore the pointer register.  */
				call cobol_register_util$restore_pointer ("0"b || substr (unspec (k), 34, 3));
				ptr_status.p_lock (k) = 1;
			     end;			/*  Restore the pointer register.  */

			else p_lock (k) = 0;
		     end;
		else do;
			do k = 0 to 7;

			     if ptr_status.save_stack_count (k) ^= 0
			     then do;		/*  Restore the pointer register.  */
				     call cobol_register_util$restore_pointer ("0"b || substr (unspec (k), 34, 3))
					;
				     ptr_status.p_lock (k) = 1;
				end;		/*  Restore the pointer register.  */

			     else p_lock (k) = 0;
			end;
			if lock_value = 4
			then do k = 0 to 9;
				if reg_status.save_stack_count (k) ^= 0
				then do;		/*  Restore the register.  */
					call cobol_register_util$restore ((get_bit_code (k)));
					reg_status.r_lock (k) = 1;
				     end;		/*  Restore the register.  */

				else r_lock (k) = 0;
			     end;
		     end;
	     end;

/* manage priority */

	if priority ^= 0
	then do;
		if priority = 1
		then p_priority (fixed (reg_no)) = 0;
		else if priority = 2
		then p_priority (fixed (reg_no)) = 1;
		else do;
			do k = 0 to 7;
			     p_priority (k) = 0;
			end;
			if priority = 4
			then do k = 0 to 9;
				r_priority (k) = 0;
			     end;
		     end;
	     end;

prx:	/***.....if Trace_Bit then call cobol_gen_driver_$Tr_End(MY_NAME);/**/
	return;

/* MAKE_INST PROC
	/* make an instruction */

make_inst:
     proc (pr, off, op, ar, tm, td);

dcl	pr		bit (3);
dcl	off		fixed bin (24);
dcl	op		bit (10);
dcl	ar		bit (1);
dcl	tm		bit (2);
dcl	td		bit (4);

/*  i must be set as index to ptr_status table */
/*  m must be set as index into inst table */
/*  op codes recognized are
	adwpr 050 (0)
	eppr 350 (0)
	epbpr 350 (1)
	*/


	m = m + 1;
	string (inst (m)) = "0"b;
	i_op (m) = op;
	i_ar (m) = ar;
	i_tm (m) = tm;
	i_td (m) = td;
	if ar = "0"b
	then string (i_y (m)) = substr (unspec (off), 19, 18);
	else do;
		i_pr (m) = pr;
		i_off (m) = substr (unspec (off), 22, 15);
	     end;
	if op = "0001010000"b
	then do;					/* adwpr */
		substr (i_op (m), 3, 1) = substr (pointer_num (i), 1, 1);
		substr (i_op (m), 8, 2) = substr (pointer_num (i), 2, 2);
	     end;
	else if op = "0111010000"b
	then do;					/* eppr */
		substr (i_op (m), 5, 1) = substr (pointer_num (i), 1, 1);
		substr (i_op (m), 8, 2) = substr (pointer_num (i), 2, 2);
		substr (i_op (m), 10, 1) = substr (pointer_num (i), 3, 1);
	     end;
	else if op = "0111010001"b
	then do;					/* epbpr */
		substr (i_op (m), 5, 1) = substr (pointer_num (i), 1, 1);
		substr (i_op (m), 8, 2) = substr (pointer_num (i), 2, 2);
		substr (i_op (m), 10, 1) = (^(substr (pointer_num (i), 3, 1)));
	     end;
	return;
     end make_inst;

get_bit_code:
     proc (fbin_code) returns (bit (4));

dcl	fbin_code		fixed bin;

dcl	bit_code		bit (4);

	if fbin_code = 9
	then bit_code = "0010"b;			/*  Q  */
	else if fbin_code = 8
	then bit_code = "0001"b;			/*  A  */
	else bit_code = "1"b || substr (unspec (fbin_code), 34, 3);

	return (bit_code);

     end get_bit_code;


	/***.....	dcl cobol_gen_driver_$Tr_Beg entry(char(*));/**/
	/***.....	dcl cobol_gen_driver_$Tr_End entry(char(*));/**/

	/***.....	dcl Trace_Bit bit(1) static external;/**/
	/***.....	dcl Trace_Lev fixed bin static external;/**/
	/***.....	dcl Trace_Line char(36) static external;/**/
	/***.....	dcl ioa_ entry options(variable); /**/
	/***..... dcl MY_NAME char (22) int static init ("COBOL_POINTER_REGISTER");/**/

dcl	1 ptr_status	(0:7) based (cobol_$ptr_status_ptr) aligned,
%include cobol_ptr_status;
dcl	1 reg_status	(0:9) based (cobol_$reg_status_ptr) aligned,
%include cobol_reg_status;
%include cobol_;

     end cobol_pointer_register;
