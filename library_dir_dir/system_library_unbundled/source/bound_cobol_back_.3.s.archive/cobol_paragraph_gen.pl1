/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_paragraph_gen.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/*{*/
/* format: style3 */
cobol_paragraph_gen:
     proc (in_token_ptr);				/*
The procedure cobol_paragraph_gen performs the following functions;

  1.  Generates an end-of-perform range alterable GO and incre-
      ments perform_para_index by 1 if the paragraph being ter-
      minated is at the end of a perform range as determined by
      examining para_eop_flag (1, it is; 0, it is not).

  2.  Determines if the paragraph being entered is at the end of
      a perform range by examining perform_list.perf.proc_num
      (perform_para_index) and if it is sets para_eop_flag to 1.
      If it is not, para_eop_flag is set to 0.

  3.  Determines if the paragraph being entered is alterable by
      examining alter_list.goto.proc_num(alter_index).  If it is,
      alter_flag is set to 1.  If it is not, alter_flag is set to
      0.

  4.  Associates the paragraph's procedure number with the text
      location into which the first instruction emitted by the
      next generator called will be placed (this is the first
      free text location following the code, if any, emitted by
      cobol_paragraph_gen).


U__s_a_g_e:_

     declare cobol_paragraph_gen entry (ptr);

     call cobol_paragraph_gen(in_token_ptr);

						   */
%include cobol_in_token;

/*
G__e_n_e_r_a_t_e_d_C__o_d_e:_

The following code is generated by cobol_paragraph_gen if the para-
graph just processed is at the end of a perform range i.e. if
para_eop_flag is 0 upon entry;

     lda  target_An
     tra  0,al

where:
target_An is a 36-bit variable allocated in the program's COBOL
	data segment.  Each target_An, for n = 1, 2, 3, ..., is
	uniquely associated with the procedure at whose end
	these instructions are generated.
						   */

/*
D__a_t_a:_

     % include cobol_;
	Items in cobol_$incl.pl1 used (u) and/or (s) by
	cobol_paragraph_gen;

	     cobol_ptr (u)
	     alter_flag (s)
	     alter_index (s)
	     alter_list_ptr (u)
	     para_eop_flag (u/s)
	     perform_list_ptr (u)
	     perform_para_index (u/s)
						   */

%include cobol_alter_list;
%include cobol_perform_list;
%include cobol_perform_altgo;
%include cobol_type7;

dcl	proc_no		fixed bin;		/* Tag number of  paragraph being
			   entered.		   */

/*
P__r_o_c_e_d_u_r_e_s_C__a_l_l_e_d:_
						   */
dcl	cobol_addr	entry (ptr, ptr, ptr),
	cobol_emit	entry (ptr, ptr, fixed bin),
	cobol_define_tag	entry (fixed bin),
	cobol_register$load entry (ptr);

/*
B__u_i_l_t-__i_n_F__u_n_c_t_i_o_n_s_U__s_e_d:_
						   */

dcl	addr		builtin,
	null		builtin;

/*}*/
%include cobol_;

start:						/*  Get procedure (tag) number of paragraph being entered. 	   */
	proc_no = in_token.token_ptr (1) -> proc_def.proc_num;

/*		Paragraph alterable?		   */

	if cobol_$alter_list_ptr ^= null
	then do;
		if cobol_$alter_index <= alter_list.n
		then if alter_list.goto.proc_num (cobol_$alter_index) = proc_no
		     then cobol_$alter_flag = 1;

		     else cobol_$alter_flag = 0;

		else cobol_$alter_flag = 0;
	     end;

/*       	     Paragraph at end-of-perform range?              */

	if cobol_$perform_list_ptr ^= null
	then do;					/*  Paragraph being terminated.  */
		if cobol_$para_eop_flag ^= 0
		then /*  Insert alterable GO  */
		     do;
			call cobol_register$load (addr (register_request));
			input_struc_basic.segno = perform_list.perf.target_a_segno (cobol_$perform_para_index);
			input_struc_basic.char_offset =
			     perform_list.perf.target_a_offset (cobol_$perform_para_index);
			call cobol_addr (addr (input_struc_basic), addr (prfrm_altgo_inst_pr), null);
			call cobol_emit (addr (prfrm_altgo_inst_pr), null, 2);
			call cobol_define_tag (perform_list.perf.int_tag_no (cobol_$perform_para_index));
			cobol_$para_eop_flag = 0;
			cobol_$perform_para_index = cobol_$perform_para_index + 1;
		     end;

/*  Paragraph being entered.  */
		if cobol_$perform_para_index <= perform_list.n
		then if proc_no = perform_list.perf.proc_num (cobol_$perform_para_index)
		     then cobol_$para_eop_flag = 1;

		     else cobol_$para_eop_flag = 0;

		else cobol_$para_eop_flag = 0;

	     end;

/*    Associate procedure number with next location in text.   */

	call cobol_define_tag (proc_no);

	return;

     end cobol_paragraph_gen;
