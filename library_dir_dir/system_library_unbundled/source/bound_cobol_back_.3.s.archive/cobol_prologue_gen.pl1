/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_prologue_gen.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified since Version 5.1 */

/* format: style3 */
cobol_prologue_gen:
     proc (in_token_ptr, binit_tag, fxs_tag, fxs_locno, decl_flag);

declare	(
	binit_tag		fixed bin,
	fxs_tag		fixed bin,
	fxs_locno		fixed bin,
	decl_flag		fixed bin
	)		parameter;

/*  CREATE CLASS-0 DEFINITION FOR PROGRAM'S ENTRY POINT AND    */
/*  RELOCATION INFORMATION FOR SAME			   */

	eos_ptr = in_token.token_ptr (in_token.n);

	if end_stmt.a = "000"b
	then n_args = 0;
	else n_args = end_stmt.e;

	object_name = (32)" ";
	substr (object_name, 1, 30) = fixed_common.prog_name;
	object_name_len = index (fixed_common.prog_name, " ") - 1;
	if object_name_len = -1
	then object_name_len = 30;

	text_ptr = cobol_$text_base_ptr;

	if fixed_common.init_cd
	then n_args = 1;

	call cobol_def_util (n_args, object_name, object_name_len, text_ptr, 1, null (), in_token_ptr);

/*  PREPARE AND EMIT ENTRY SEQUENCE CODE AND RELOCATION	   */
/*	 	INFORMATION			   */

	entry_seq.trace_cntrl_relp = "000000000000111111"b;

	if fixed_common.options.st = "1"b
	then do;
		call cobol_make_link$type_1 (offset, 2);

		if fixed_common.options.profile
		then do;
			fixup_directive.location.offset = cobol_$text_wd_off + 6;
			call cobol_make_fixup (addr (fixup_directive));
		     end;

		entry_seq.link_relp = substr (unspec (offset), 19, 18);
		entry_seq_reloc (13) = "10010"b;
		entry_seq_reloc (14) = "10110"b;
	     end;
	else do;
		entry_seq.link_relp = (18)"0"b;
		entry_seq.block_relp = (18)"0"b;
		entry_seq_reloc (13) = (5)"0"b;
		entry_seq_reloc (14) = (5)"0"b;
	     end;

	call cobol_emit (text_ptr, addr (entry_seq_reloc), 7);

/*  PREPARE AND EMIT INITIALIZATION CODE AND RELOCATION	   */
/*		    INFORMATION			   */

	fxs_tag = 0;				/*-11/30/76-*/

	if seg_init_flag ^= 0 | data_init_flag ^= 0
	then do;
		call cobol_r_initialize;

/* Reserve 80 words in stack for the run time package.	*/

		call cobol_alloc$stack (336, 2, offset);
		binit_tag = cobol_$next_tag;
		cobol_$next_tag = cobol_$next_tag + 1;
		call cobol_emit (addr (init_seq), null (), 1);
		call cobol_make_tagref (binit_tag, cobol_$text_wd_off - 1, null);
	     end;
	else do;
		binit_tag = 0;
		call cobol_emit (addr (aos_inst), addr (rel_aos), 1);
		call cobol_r_initialize;

/* Reserve 80 words in stack for the run time package.	*/

		call cobol_alloc$stack (336, 2, offset);

	     end;

	if fixed_common.options.profile
	then do;
		fixup_directive.location.offset = cobol_$text_wd_off;
		call cobol_make_fixup (addr (fixup_directive));
	     end;

	call cobol_emit (addr (inst_rts (1)), addr (rel_rts (1)), 1);
						/* Relocation info for cobol_rts_	*/

	if fixed_common.options.profile
	then call cobol_profile;

	if fixed_common.init_cd
	then do;
		alpha_type9.seg = fixed_common.init_cd_seg;
		alpha_type9.off = fixed_common.init_cd_offset;

		call cobol_set_pr (addr (pr_struc), addr (alpha_type9));
		call cobol_call_op (77, 0);
	     end;
	else if (fixed_common.options.oc & fixed_common.descriptor ^= "00"b)
	then call cobol_emit (addr (inst_oc), null (), 1);

	cobol_$init_stack_off = cobol_$stack_off;

	if decl_flag ^= 0
	then do;

		fxs_tag = cobol_$next_tag;
		cobol_$next_tag = cobol_$next_tag + 1;
		call cobol_emit (addr (init_seq1), null (), 1);

		fxs_locno = cobol_$text_wd_off;
		call cobol_make_tagref (fxs_tag, cobol_$text_wd_off - 1, null);

	     end;


	return;





dcl	n_args		fixed bin,		/* No of operands in USING phrase*/
	i		fixed bin,		/* Do loop index		   */
	object_name	char (32),
	object_name_len	fixed bin,
	offset		fixed bin,		/* Offset as returned by various */
						/* subroutines		   */
	n_con		fixed bin,		/* No of conditions		   */
	n_off		fixed bin,		/* Offset of 1st wd of stack     */
						/* allocation		   */
	name		(2) char (32),		/* Array of condition  names	   */
	ln_nm		(2) fixed bin,		/* Array of condition name lngths*/
	temp		fixed bin;



/* Entry sequence code				   */
dcl	entry_seq_reloc	(14) bit (5) aligned static
			init ("10000"b, "00000"b, "10000"b, "00000"b, "00000"b, "00000"b, "00000"b, "00000"b,
			"00000"b, "00000"b, "11001"b, "11000"b, "00000"b, "00000"b);



/* Initialization sequence code and relocation information     */

dcl	init_seq1		(2) bit (18) static init ("000000000000000000"b, "111001000000000100"b);
						/* tra	decl_loc,ic	*/

dcl	nop_instr		(2) bit (18) static init ("000000000000000000"b, "000001001000000000"b);
						/*	nop	*/

dcl	inst_oc		(2) bit (18) static init ("000000000000001100"b, "111000000001000000"b);
						/* tsx0 pr0|14 */
dcl	init_seq		(2) bit (18) unaligned static init ("000000000000000000"b, "111000000000000100"b);
						/* tsx0	init_data,ic	*/

dcl	aos_inst		(2) bit (18) static init ("100000000000001110"b, "000101100001000000"b);
						/* aos	pr4|16	*/
dcl	rel_aos		(2) bit (5) aligned static init ("11001"b, "00000"b);
dcl	inst_rts		(2) bit (18) static init ("000000000001000000"b, "000001001001000000"b);
						/* nop	100	*/
dcl	rel_rts		(2) bit (5) aligned static init ("10100"b, "00000"b);
						/* fixup directive for link, used when profile options is specified.	*/
dcl	1 fixup_directive	aligned static,
	  2 operation	bit (1) unal init ("0"b),
	  2 type		bit (4) unal init ("1111"b),
	  2 reserved	bit (9) unal init ("000000000"b),
	  2 location	unal,
	    3 half	bit (1) unal init ("0"b),
	    3 base	bit (3) unal init ("001"b),
	    3 offset	fixed bin unal,
	  2 tag_number	fixed bin aligned;

/* Declaration for static data.	*/
dcl	1 pr_struc	static,
	  2 what_ptr	fixed bin init (1),
	  2 pointer_no	bit (3),
	  2 lock		fixed bin init (0),
	  2 switch	fixed bin init (0);

dcl	1 alpha_type9	static,
	  2 header	(4) fixed bin init (112, 0, 0, 9),
	  2 repl_ptr	(2) ptr init ((2) null ()),
	  2 fill1		bit (108) init (""b),
	  2 file_key_info,
	    3 fb1		(3) fixed bin init (0, 0, 0),
	    3 size	fixed bin init (0),
	    3 fb2		(2) fixed bin init (0, 0),
	    3 flags1	bit (36) init ("000000100100000000010000000100000000"b),
	    3 flags2	bit (36) init (""b),
	    3 seg		fixed bin init (0),
	    3 off		fixed bin,
	  2 fill2		(7) fixed bin init (0, 0, 0, 0, 0, 0, 0);


/*
P__r_o_c_e_d_u_r_e_s_C__a_l_l_e_d:_
						   */

dcl	cobol_alloc$stack	entry (fixed bin, fixed bin, fixed bin),
	cobol_define_tag_nc entry (fixed bin, fixed bin),
	cobol_call_op	entry (fixed bin, fixed bin),
	cobol_set_pr	entry (ptr, ptr),
	cobol_profile	entry,
	cobol_emit	entry (ptr, ptr, fixed bin),
	cobol_make_link$type_1
			entry (fixed bin, fixed bin),
	cobol_make_link$type_4
			entry (fixed bin, char (*)),
	cobol_make_tagref	entry (fixed bin, fixed bin, ptr),
	cobol_make_fixup	entry (ptr),
	cobol_pool	entry (char (*), fixed bin, fixed bin),
	cobol_r_initialize	entry,
	cobol_reloc	entry (ptr, fixed bin, fixed bin),
	cobol_def_util	entry (fixed bin, char (32), fixed bin, ptr, fixed bin, ptr, ptr);




/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/


%include cobol_;
%include cobol_entry_seq;
%include cobol_fixed_common;
%include cobol_ext_;
%include cobol_fixed_static;
%include cobol_definitions;
%include cobol_type19;
%include cobol_in_token;

     end cobol_prologue_gen;
