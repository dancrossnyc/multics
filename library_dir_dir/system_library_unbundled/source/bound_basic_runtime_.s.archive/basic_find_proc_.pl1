/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Procedure to find subprogram for basic

   Initial Version: 21 October 1973 by BLW */
/* modified 12/75 by M. Weaver for FAST */

/* format: style2 */

basic_find_proc_:
     proc (bo_stack_pt);

	dcl     bo_stack_pt		 ptr;

	dcl     based_vs		 char (168) based varying,
	        (path, dir)		 char (168),
	        (seg, ent)		 char (32),
	        n			 fixed bin,
	        bo_pt		 ptr;

	dcl     (addr, index, length, null, search, substr)
				 builtin;

	dcl     fast_related_data_$in_dfast
				 bit (1) aligned ext;
	dcl     fast_related_data_$in_fast_or_dfast
				 bit (1) aligned ext;

	dcl     hcs_$make_ptr	 entry (ptr, char (*), char (*), ptr, fixed bin (35)),
	        dfast_run_unit_manager_$find_entry_value
				 entry (char (32), ptr, fixed bin (35)),
	        fast_run_unit_manager_$find_entry_value
				 entry (char (32), ptr, fixed bin (35)),
	        hcs_$initiate_count	 entry (char (*), char (*), char (*), fixed bin, fixed bin, ptr, fixed bin (35)),
	        expand_path_	 entry (ptr, fixed bin, ptr, ptr, fixed bin (35));

%include basic_operator_frame;

	bo_pt = bo_stack_pt;

	if search (pr (1) -> based_vs, "<>") ^= 0
	then do;

/* We have a path name, attempt to initiate specified segment */

		if fast_related_data_$in_fast_or_dfast
		then do;				/* don't allow pathnames in fast */
			pr (2) = null;
			return;
		     end;

		path = pr (1) -> based_vs;

		call expand_path_ (addr (path), length (pr (1) -> based_vs), addr (dir), addr (seg), q_reg);

		if q_reg ^= 0
		then return;

		call hcs_$initiate_count (dir, seg, seg, n, 1, pr (2), q_reg);

		if pr (2) = null
		then return;

		n = index (seg, "$");

		if n = 0
		then ent = seg;
		else do;
			ent = substr (seg, n + 1);
			substr (seg, n) = "";
		     end;
	     end;
	else do;

/* not a path name */

		n = index (pr (1) -> based_vs, "$");

		if n = 0
		then do;
			seg = pr (1) -> based_vs;
			ent = pr (1) -> based_vs;
		     end;
		else do;
			if fast_related_data_$in_fast_or_dfast
			then do;
				pr (2) = null;
				return;
			     end;
			seg = substr (pr (1) -> based_vs, 1, n - 1);
			ent = substr (pr (1) -> based_vs, n + 1);
		     end;
	     end;

	if fast_related_data_$in_dfast
	then call dfast_run_unit_manager_$find_entry_value (ent, pr (2), q_reg);
	else if fast_related_data_$in_fast_or_dfast
	then call fast_run_unit_manager_$find_entry_value (ent, pr (2), q_reg);
	else call hcs_$make_ptr (null, seg, ent, pr (2), q_reg);
     end;
