/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* format: style2 */

basic_matrix_:
     proc (bo_stack_pt);

/* modified 5/77 by Melanie Weaver  to increase internal precision */

	dcl     (bo_stack_pt, bo_pt, sink_pt, source_pt, p1, p2, p3)
				 ptr,
	        copy		 bit (1) aligned,
	        t			 float bin (63),
	        accuracy		 float bin (63) static,
	        (i, j, k, m, n, p, row_max, col_max)
				 fixed bin;

	dcl     (abs, addr, hbound, max, min)
				 builtin;

	dcl     basic_matrix_double_	 entry (ptr);

	dcl     string_area		 area (65536) based (string_segment);

	dcl     C			 (0:row_max, 0:col_max) float bin based,
	        C_transpose		 (0:col_max, 0:row_max) float bin based;

	dcl     vector_m		 (0:m) float bin based,
	        vector_n		 (0:n) float bin based,
	        vector_p		 (0:p) float bin based,
	        matrix_mn		 (0:m, 0:n) float bin based,
	        matrix_mp		 (0:m, 0:p) float bin based,
	        matrix_pn		 (0:p, 0:n) float bin based;

%include basic_operator_frame;
%include basic_symbols;

	bo_pt = bo_stack_pt;
	if precision_lng ^= 1
	then do;
		call basic_matrix_double_ (bo_stack_pt);
		return;
	     end;
	goto switch (q_reg);

/* inverse */

switch (1):
	row_max = pr (2) -> current_bounds (1) - 1;
	if row_max <= 0
	then goto array_error;

	begin;

	     dcl	   space		      (row_max * row_max),
		   LU		      (row_max, row_max) float bin (63) aligned based (addr (space));

	     dcl	   P		      (100) fixed bin,
		   (B, X, R, DX, scales)  dim (100) float bin (63),
		   (i, j, e, k, pividx)   fixed bin,
		   (ajj, norm_row, biggest, size, multiplier, pivot)
				      float bin (63);

	     dcl	   (
		   scale_factor	      init (1.0e6),
		   maxval		      init (1.0e6),
		   minval		      init (1.0e-6)
		   )		      float bin static;

	     dcl	   (ap, ainvp)	      ptr;

	     dcl	   A		      (0:row_max, 0:row_max) float bin based (ap),
		   A_inverse	      (0:row_max, 0:row_max) float bin based (ainvp);

	     if row_max > hbound (P, 1)
	     then goto array_error;

	     ap = pr (1) -> array_dope.data;

	     if pr (1) ^= pr (2)
	     then ainvp = pr (2) -> array_dope.data;
	     else allocate A_inverse in (string_area);

/* Initialize LU decomposition */

	     do i = 1 to row_max;
		P (i) = i;
		norm_row = 0.0e0;

		do j = 1 to row_max;
		     LU (i, j) = A (i, j);
		     norm_row = max (norm_row, abs (LU (i, j)));
		end;

		if norm_row = 0.0e0
		then goto singular;

		scales (i) = 1.0 / norm_row;
	     end;

/* Perform Gaussian elimination with partial pivoting and scaling */

	     determinant = 1.0e0;

	     do k = 1 to row_max - 1;
		biggest = 0.0e0;

		do i = k to row_max;
		     size = abs (LU (P (i), k)) * scales (P (i));

		     if size > biggest
		     then do;
			     biggest = size;
			     pividx = i;
			end;
		end;

		if biggest = 0.0e0
		then goto singular;

		if pividx ^= k
		then do;

/* Change sign of determinant and interchange
		        permutation elements */

			determinant = -determinant;

			j = P (k);
			P (k) = P (pividx);
			P (pividx) = j;
		     end;

		pivot = LU (P (k), k);

		do i = k + 1 to row_max;
		     LU (P (i), k), multiplier = LU (P (i), k) / pivot;

		     if multiplier ^= 0.0e0
		     then do j = k + 1 to row_max;
			     LU (P (i), j) = LU (P (i), j) - multiplier * LU (P (k), j);
			end;
		end;

	     end;

	     if LU (P (row_max), row_max) = 0
	     then goto singular;

/* Determine inverse and compute determinant */

	     e = 0;
	     do j = 1 to row_max;

		do i = 1 to row_max;
		     B (i) = 0;
		end;

		B (j) = 1.0e0;

/* Solve AX = B for X */

		call solve (X, B);

/* Improve the solution */

		call improve;

/* Solution is column j of inverse */

		do i = 1 to row_max;
		     A_inverse (i, j) = X (i);
		end;

		ajj = LU (P (j), j);

		if abs (determinant) > maxval / max (ajj, 1.0e0)
		then do;
			e = e + 1;
			determinant = determinant / scale_factor;
		     end;

		if abs (determinant) < minval / min (ajj, 1.0e0)
		then do;
			e = e - 1;
			determinant = determinant * scale_factor;
		     end;

		determinant = determinant * ajj;
	     end;

/* Correct exponent of determinant */

	     do i = 1 to e by +1;
		determinant = determinant * scale_factor;
	     end;

	     do i = -1 to e by -1;
		determinant = determinant / scale_factor;
	     end;

/* ALL THRU */

	     goto inverse_done;

solve:
     proc (X, B);

	dcl     (B, X)		 dim (100) float bin (63),
	        dot		 float bin (63),
	        (i, j)		 fixed bin;

	do i = 1 to row_max;
	     dot = 0.0e0;

	     do j = 1 to i - 1;
		dot = dot + LU (P (i), j) * X (j);
	     end;

	     X (i) = B (P (i)) - dot;
	end;

	do i = row_max by -1 to 1;
	     dot = 0.0e0;

	     do j = i + 1 to row_max;
		dot = dot + LU (P (i), j) * X (j);
	     end;

	     X (i) = (X (i) - dot) / LU (P (i), i);
	end;

     end;

improve:
     proc;

	dcl     (i, j, iterations)	 fixed binary,
	        (norm_x, norm_dx, t)	 float bin (63),
	        dot		 float bin (63);	/* MUST BE DOUBLE PRECISION */

	dcl     max_iterations	 float bin static init (16),
						/* about 2*log10(epsilon) */
	        epsilon		 float bin static init (1e-8);

	norm_x = 0.0e0;

	do i = 1 to row_max;
	     norm_x = max (norm_x, abs (X (i)));
	end;

	if norm_x = 0.0e0
	then do;
		accuracy = epsilon;
		return;
	     end;

	do iterations = 1 to max_iterations;
	     do i = 1 to row_max;

		dot = 0.0e0;

		do j = 1 to row_max;
		     dot = dot + A (i, j) * X (j);
		end;

		R (i) = B (i) - dot;
	     end;

	     call solve (DX, R);

	     norm_dx = 0.0e0;

	     do i = 1 to row_max;
		t = X (i);
		X (i) = X (i) + DX (i);
		norm_dx = max (norm_dx, abs (X (i) - t));
	     end;

	     if iterations = 1
	     then accuracy = max (norm_dx / norm_x, epsilon);

	     if norm_dx <= epsilon * norm_x
	     then return;
	end;

	goto singular;
     end;

singular:
	     determinant = 0.0e0;

inverse_done:
	     if pr (1) = pr (2)
	     then do;
		     pr (2) -> array_dope.data -> A_inverse = A_inverse;
		     free A_inverse in (string_area);
		end;
	end;

	q_reg = 0;
	return;

/* transpose */

switch (2):
	row_max = pr (2) -> current_bounds (1) - 1;
	if row_max <= 0
	then goto array_error;

	col_max = pr (2) -> current_bounds (2) - 1;
	if col_max <= 0
	then goto array_error;

	source_pt = pr (1) -> array_dope.data;

	if pr (1) ^= pr (2)
	then sink_pt = pr (2) -> array_dope.data;
	else allocate C set (sink_pt) in (string_area);

	do i = 1 to row_max;
	     do j = 1 to col_max;
		sink_pt -> C (i, j) = source_pt -> C_transpose (j, i);
	     end;
	end;

	if pr (1) = pr (2)
	then do;
		pr (2) -> array_dope.data -> C = sink_pt -> C;
		free sink_pt -> C in (string_area);
	     end;

	q_reg = 0;
	return;

/* vector (1 x n) = vector (1 x p) * matrix (p x n) */

switch (3):
	p = pr (3) -> array_dope.current_bounds (1) - 1;
	n = pr (3) -> array_dope.current_bounds (2) - 1;

	call get_matrix_pointers;

	if copy
	then allocate vector_n set (p2) in (string_area);

	do j = 1 to n;
	     t = 0.0e0;

	     do k = 1 to p;
		t = t + p1 -> vector_p (k) * p3 -> matrix_pn (k, j);
	     end;

	     p2 -> vector_n (j) = t;
	end;

	if copy
	then do;
		pr (2) -> array_dope.data -> vector_n = p2 -> vector_n;
		free p2 -> vector_n in (string_area);
	     end;

	q_reg = 0;
	return;

/* vector (m x 1) = matrix (m x p) * vector (p x 1) */

switch (4):
	m = pr (1) -> array_dope.current_bounds (1) - 1;
	p = pr (1) -> array_dope.current_bounds (2) - 1;

	call get_matrix_pointers;

	if copy
	then allocate vector_m set (p2) in (string_area);

	do i = 1 to m;
	     t = 0.0e0;

	     do k = 1 to p;
		t = t + p1 -> matrix_mp (i, k) * p3 -> vector_p (k);
	     end;

	     p2 -> vector_m (i) = t;
	end;

	if copy
	then do;
		pr (2) -> array_dope.data -> vector_m = p2 -> vector_m;
		free p2 -> vector_m in (string_area);
	     end;

	q_reg = 0;
	return;

/* matrix (m x n) = matrix (m x p) * matrix (p x n) */

switch (5):
	m = pr (2) -> array_dope.current_bounds (1) - 1;
	n = pr (2) -> array_dope.current_bounds (2) - 1;
	p = pr (1) -> array_dope.current_bounds (2) - 1;

	call get_matrix_pointers;

	if copy
	then allocate matrix_mn set (p2) in (string_area);
	do i = 1 to m;
	     do j = 1 to n;
		t = 0.0e0;

		do k = 1 to p;
		     t = t + p1 -> matrix_mp (i, k) * p3 -> matrix_pn (k, j);
		end;

		p2 -> matrix_mn (i, j) = t;
	     end;
	end;

	if copy
	then do;
		pr (2) -> array_dope.data -> matrix_mn = p2 -> matrix_mn;
		free p2 -> matrix_mn in (string_area);
	     end;

	q_reg = 0;
	return;

/* errors */

array_error:
	q_reg = 139;

get_matrix_pointers:
     proc;

	p1 = pr (1) -> array_dope.data;
	p3 = pr (3) -> array_dope.data;

	copy = (pr (1) = pr (2)) | (pr (3) = pr (2));

	if ^copy
	then p2 = pr (2) -> array_dope.data;

     end;

     end;
