/* ******************************************************
   *                                                    *
   * Copyright, (C) Honeywell Limited, 1983             *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   ****************************************************** */

/* format: style3,^delnl,linecom */
fort_cleanup_:
     proc (dp1, dc1, dp2, dp3, db1, sp);

/* This procedure is the cleanup controller for Fortran Large and Very Large
   arrays, and for fortran_io_ cleanup.  It is called by 'unwind_stack_' when
   'cleanup' is signaled to a fortran program. */

/* Modification History.

   Created:	August 30, 1982 by Tom Oke (UNCA). 

   Modified: 15 Novemeber 1982, TO - Change to 'fortran_storage_' and
	'fortran_storage_manager_' from 'fsd_' and 'fsm_'.
*/

/* SPECIAL ENTRY CONDITIONS REQUIRED FROM 'unwind_stack_'. */

/* 'unwind_stack_' uses an entry variable in which the label has been set to
   this routine, and the descripter pointer is set to the stack pointer
   of the frame in which the cleanup handler exists.  If this stack pointer
   functionality is changed then we have no way of knowing what the stack
   frame pointer is to do the cleanup with.

   The unwind_stack_ definition is:
dcl  entry_variable variable entry (ptr, char (*), ptr, ptr, bit (1) aligned);

   By adding an additional pointer to the expected parameters, we can find
   the address of this pointer (the argument block pointer) and thus find the
   stack pointer value left by unwind_stack_.  A bit kludgy, but functional and
   fast.
*/

dcl	(dp1, dp2, dp3)	ptr;			/* Dummy Pointers */
dcl	dc1		char (*);			/* Dummy Characters */
dcl	db1		bit (1) aligned;		/* Dummy bit */

dcl	sp		ptr;			/* stack pointer deferred */

dcl	fortran_storage_manager_$free
			entry (ptr);		/* Passed 'owning' stack ptr */


/* Find the stack frame pointer of the cleanup handler, then pass it to both
   the fortran_storage_manager_$free entry to free up Large and Very Large
   Arrays, and to fortran_io_$cleanup to free up files associated with that
   level. */


	call fortran_storage_manager_$free (addr (sp));

     end fort_cleanup_;
