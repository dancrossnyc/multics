/* ******************************************************
   *                                                    *
   * Copyright, (C) Honeywell Limited, 1983             *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   ****************************************************** */

/* format: style3,^delnl,linecom */
fortran_pause_:
     procedure (string) options (support);

/* This procedure is called to perform the function of the Fortran PAUSE statement. */

/* Modification History:

83-05-16 HH - 117: Implement a pause by signalling 'fortran_pause' rather
	than printing a message and entering a new command level.
83-06-16 TO - Implement options (support) and only force signal catching if
	interactive.  Also add "PAUSE" to output string.
*/


dcl	string		char (*);

dcl	fast_related_data_$in_fast_or_dfast
			bit (1) aligned ext static;

dcl	INTERACTIVE	fixed bin (17) static options (constant) initial (1);

dcl	process_type	fixed bin (17);

dcl	ioa_		external entry options (variable),
	signal_		entry options (variable),
	user_info_$process_type
			entry (fixed bin (17));

dcl	length		builtin,
	null		builtin;

%include condition_info_header;

dcl	01 condition_info	aligned like condition_info_header;

	if fast_related_data_$in_fast_or_dfast
	then call ioa_ ("^/PAUSE ^a", string);
	else do;					/*  Signal 'fortran_pause' condition.  */
		condition_info.length = size (condition_info);
		condition_info.version = 1;
		unspec (condition_info.action_flags) = ""b;

/* If we are not interactive then permit a default restart to let an absentee
   continue. */
		call user_info_$process_type (process_type);
		if process_type ^= INTERACTIVE
		then condition_info.default_restart = "1"b;

		condition_info.info_string = "PAUSE " ||
		     substr (string, 1, min (length (string), maxlength (condition_info.info_string)));
		condition_info.status_code = 0;
		call signal_ ("fortran_pause", null, addr (condition_info));
	     end;
     end fortran_pause_;
