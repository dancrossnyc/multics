/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(2017-01-19,Swenson), approve(2017-01-19,MCR10028),
     audit(2017-01-20,GDixon), install(2017-01-20,MR12.6f-0015):
     Remove spurious \015 character from source introduced when copied from
     ACTC/MIT tape.
                                                   END HISTORY COMMENTS */

basic_system: bsys: bs: procedure;


	/* A line numbered editor for use with the BASIC language, with facilities for
	   listing, deleting, and running programs.	J.M. Broughton  --  April 1973	*/


     declare

	hcs_$make_seg entry (aligned char(*), aligned char(*), aligned char(*),
	     fixed bin(5), ptr, fixed bin(35)),
	hcs_$initiate_count entry (aligned char(*), aligned char(*), aligned char(*),
	     fixed bin(24), fixed bin(12), ptr, fixed bin(35)),
	hcs_$set_bc_seg entry (ptr, fixed bin(24), fixed bin(35)),	/* sets bit count given pointer to segment */
	hcs_$truncate_seg entry (ptr, fixed bin, fixed bin(35)),	/* truncates segment given pointer */
	hcs_$terminate_noname entry (pointer, fixed bin(35)),	/* terminates a segment */
	hcs_$delentry_seg entry ( pointer, fixed bin(35)),	/* deletes a segment */
	ioa_ entry options (variable),			/* output formating routine */
	ioa_$rsnnl entry options (variable),			/* writes into a string */
	cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin(35)),     /* fetches arguments */
	cu_$cp entry (ptr, fixed bin, fixed bin(35)),		/* calls the command processor */
	cu_$cl entry,					/* forces return to command level */
	cu_$ptr_call entry(ptr),				/* calls routine specified by ptr */
	expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin(35)),     /* expands pathname */
	com_err_ entry options (variable),			/* error printing routine */
	timer_manager_$cpu_call entry(fixed bin(71),bit(2),entry),	/* sets up cpu timer */
	timer_manager_$reset_cpu_call entry(entry);		/* resets cpu timer */

     declare

	sys_info$max_seg_size ext fixed (35),
	iox_$user_input ext ptr,
	iox_$user_output ext ptr;

     declare

	basic_ entry(ptr, fixed bin, ptr, ptr, ptr, fixed bin),
	basic_resequence_ entry (fixed bin, fixed bin, ptr, ptr,	/* routine to sequence a program from n by m */
	     fixed bin, fixed bin, fixed bin(35));

     declare

	id char(12) aligned static init("basic_system"),		/* name of entry to this routine */
	language char(6) aligned static init(".basic");		/* suffix for program names */

     declare

	old_linum char(10) aligned;			/* keeps previous line num for get */

     declare

	1 segment based aligned,				/* temporary segment, allocated as follows: */
	  2 program (0:21503) fixed bin(35),			/* program as edited, for save or compilation */
	  2 text (0:44031) fixed bin(35),			/* area to place source while editing */

	1 table (0:99999) based aligned,			/* table of line information */
	  2 indx fixed bin(17) unal,				/* offset of line from start of "txt" */
	  2 chcount fixed bin(17) unal,			/* number of characters in line */

	long_string char(262144) aligned based,			/* string overlayed on lines */

	ch(0:262143) char(1) unaligned based,			/* string overlay */

	copy_overlay (count) fixed bin(35) based,		/* overlay for saving segment */
	count fixed bin(17);				/* word count of segment to be saved */

     declare

	name char(lname) based (np),				/* the name of the program to be edited (arg) */
	     lname fixed bin,				/* length of argument */
	     np pointer,					/* pointer to argument, returned by cu_ */
	dirname char(168) aligned,				/* directory part of segment pathname */
	ename char(32) aligned,				/* entry portion of pathname */
	source char(168) aligned,				/* relative pathname of program with ".basic" suffix */
	prog char(32) aligned,				/* entry name stripped of suffix */
	cs char(168) based aligned;				/* based input string, overlayed on "txt" */

     declare

	sptr pointer,					/* pointer to source */
	tptr pointer,					/* pointer to base of temporary segment */
	txt pointer,					/* points to part containing lines */
	tbl pointer,					/* points to table of line information */
	inp pointer,					/* pointer to input string */
	obj pointer,					/* pointer to object segment created by basic */
	main pointer;					/* pointer to entry point of basic program */

     declare

	(perm_tptr,					/* permanent pointers */
	 perm_tbl,
	 perm_obj) ptr static init(null);

     declare

	error_table_$noentry fixed bin(35) external,		/* system error code for none existant file */
	status bit(72) aligned,				/* i/o status code */
	code fixed bin(35),					/* error code */

	program_interrupt condition,				/* we must have a handler for this condition */
	cleanup condition,					/* must have a procedure called on non-local return */

	level fixed bin static init(0),			/* recursion level */

	(i, j) fixed bin,					/* omnipresent temporaries */
	k fixed bin(21),
	nl char(1) static aligned initial ("
"),	tab char(1) static aligned initial("	"),		/* newline and tab characters */
	chr char(1) aligned,				/* temporary used various places */
	s char(1),					/* used for plural(s) */
	time_limit fixed bin(71) initial (0),			/* limit on execution time, 0 -> none */
	(js, jt) fixed bin initial(0),			/* offsets from sptr, and txt */
	numl fixed bin,					/* length of line number */
	csize fixed bin(24),				/* size of source in characters */
	(first, last) fixed bin,				/* first and last line no. for list, delete */
	increment fixed bin defined (last),			/* increment for resequence command */
	linum fixed bin,					/* line number */
	err_count fixed bin,				/* number of errors in basic program */
	lmax fixed bin initial(1),				/* highest line number */
	(newline, compiling initial ("0"b), save_sw, known,	/* various flags -- guess */
	     resequencing initial ("0"b), reading initial ("0"b)) bit(1) aligned,
	(null, addr, fixed, divide, index, substr, mod, max,	/* helpful functions */
	     min, unspec, verify, search, string, convert) builtin;

     declare

	input_iocb ptr int static,			/* iox_ ptr for user_input */
	output_iocb ptr int static,			/* iox_ ptr for user_output */
	buffer char(159);

%include iocb;

/***************************************** Internal Subroutines ***********************************************/



     get_line_number: procedure (place) returns (fixed bin);	

	declare

	     place, d fixed bin(17),
	     error bit(1) initial ("1"b),			/* indicates if there are leading chars */
	     line fixed bin;				/* line number */

	line = 0;						/* initialize line number */

	do numl = 0 by 1;					/* scan line */
	     chr = txt->ch(place+numl);			/* get current line */
	     d = index("0123456789", chr) - 1;			/* compute the digit */
	     if d < 0					/* test if really a digit */
		then do;
		     if error				/* has a digit been found yet */
			then do;				/* number hasn't been started */
			     if (chr^=" ") & (chr^=tab)	/* flush leading white space */
				then return (-1);		/* indicate that something is wrong */
			     end;
			else do;				/* end of the line number */
			     newline = (chr = nl);		/* set newline indicator */
			     return (line);			/* finished */
			end;
		     end;
		else do;
		     line = (line*10)+d;			/* compute line number */
		     error = "0"b;				/* a digit has been found */
		end;
	end;						/* of do group */

     end get_line_number;



     get_lines: procedure (place);				/* sets "first" and "last" for list, delete */

	declare place fixed bin;				/* points to location in text */

	first = get_line_number (place);			/* get first line number */
	if first < 0 then go to mistake;
	if newline
	     then do;					/* set defaults */
		if resequencing				/* for rseq or list, delete */
		     then last = 10;			/* increment defined(last) */
		     else last = first;
		end;
	     else do;					/* get the other one */
		last = get_line_number (place+numl);		/* set "last" from next position */
		if last < 0 | ^newline then go to mistake;	/* format error */
		if resequencing then return;			/* don't set increment to ... */
		last = min(lmax, last);			/* so we don't have to do so much work */
	     end;
	return;

	mistake:
	     call error ("Bad line number specification.", "", "0"b);

     end get_lines;						/* finished */



     error: procedure (message, info, fatal);			/* generalized error routine */

	declare

	     message char(*) aligned,				/* error message -- "" -> code */
	     info char(*) aligned,				/* additional info on error */
	     fatal bit(1) aligned;				/* does this error terminate execution */

	resequencing, compiling = "0"b;			/* just to make sure */

	if message = ""
	     then call com_err_ (code, id, info);		/* use standard error code */
	     else call ioa_ ("^a ^a", message, info);		/* use ioa_ to tell user about error */

	if fatal
	     then call cu_$cl;				/* get back to command level */
	else if reading					/* are we gettting the source */
	     then go to move;				/* yes, continue */
	     else do;					/* no, reset and go on to next command */
		call input_iocb -> iocb.control (input_iocb, "resetread", null(), code);
		call ioa_ ("RESET");
		go to next;
	     end;

     end error;



     get_seg: proc(name,type,pt);

	declare

	     name char(*) aligned,				/* name of temporary */
	     type fixed bin(5),				/* access type */
	     pt ptr;					/* set to point at segment */

	call hcs_$make_seg("", name, "", type, pt, code);		/* make the segment */
	if pt = null then call error("", name, "1"b);		/* complain if error */

     end get_seg;



     clean_up: proc;

	if compiling & (time_limit ^= 0) then call timer_manager_$reset_cpu_call(cpu_limit);

	if level = 1
	then do;

	     /* truncate segs to zero length and leave initiated */

	     call hcs_$truncate_seg(tptr, 0, code);
	     call hcs_$truncate_seg(tbl, 0, code);
	     call hcs_$truncate_seg(obj, 0, code);
	     end;
	else do;

	     /* delete segs */


	     call hcs_$delentry_seg(tptr, code);
	     call hcs_$delentry_seg(tbl, code);
	     call hcs_$delentry_seg(obj, code);
	     end;

	level = level - 1;

     end clean_up;



     cpu_limit: proc;

	compiling = "1"b;
	call ioa_("Time limit exceeded.");
	goto edit;
	end;

/**************************************** Execution Begins Here ***********************************************/



start:				     /*  Begin Setup  */

     on program_interrupt begin;				/* return here after quits */
	if resequencing then do;				/* we were resequencing */
	     call ioa_ ("Resequencing aborted.");		/* tell the user */
	     resequencing = "0"b;				/* reset indicator */
	end;
	else if compiling then do;				/* were we compiling the program */
	     call ioa_ ("Execution aborted.");			/* ditto */
	     compiling = "0"b;
	     if time_limit ^= 0 then call timer_manager_$reset_cpu_call(cpu_limit);
	end;
	go to edit;
     end;


     level = level + 1;					/* bump recursion level */

     if level = 1
     then do;

	input_iocb = iox_$user_input;
	output_iocb = iox_$user_output;
	if perm_tptr = null
	then do;

	     /* first time at level 1, create permanent scratch segments */

	     call get_seg("basic_system_text_",01011b,perm_tptr);
	     call get_seg("basic_system_table_",01011b,perm_tbl);
	     call get_seg("basic_system_object_",01111b,perm_obj);
	     end;

	tptr = perm_tptr;
	tbl = perm_tbl;
	obj = perm_obj;
	end;
     else do;

	/* create temporary segments for recursion levels > 1 */

	call get_seg("",01011b,tptr);
	call get_seg("",01011b,tbl);
	call get_seg("",01111b,obj);
	end;

     on cleanup call clean_up;				/* cleanup temporaries in case of errors/quits */
     txt = addr(tptr->segment.text);				/* set pointer to program storage area */

				/* Get program to be edited */

     call cu_$arg_ptr (1, np, lname, code);			/* fetch the argument */
     if lname = 0 | code ^= 0 then do;				/* no name was specified */
	known = "0"b;					/* we must get a name before a save */
	call ioa_ ("Input.^/");				/* enter edit mode directly */
	go to next;
	end;
     known = "1"b;						/* we will not need a name */
     source = name;						/* align argument string */

get_source:						/* get source segment */
     k = index(source," ");
     if k ^= 0
     then if substr(source,k+1) ^= ""
	then do;
	     known = "0"b;
	     call error ("Improper segment name.", source, "0"b);
	end;
     if index (source, language) = 0				/* if no suffix then ... */
	then do;
	     substr(source, lname+1, 6) = language;		/* insert one */
	     lname = lname + 6;				/* adjust name length */
	end;
     call expand_path_ (addr(source), lname, addr(dirname), addr(ename), code);
	if code ^= 0 then call error ("", source, "0"b);		/* expand relative pathnames */
     prog = substr(ename, 1, index(ename, language)-1);		/* keep stripped name around for compiler */
     call ioa_$rsnnl ("^a>^a", source, i, dirname, ename);		/* remember full path name in "source" */
     call hcs_$initiate_count (dirname, ename, "", csize, 0, sptr, code);
	if sptr = null then do;				/* get pointer to and bit count of segment */
	     if code ^= error_table_$noentry
		then call error ("", source, "1"b);
		else do;
		     call ioa_ ("Program not found.^/Input.^/");
		     go to next;				/* go directly to next */
		end;
	end;
     csize = divide(csize,9,17,0);				/* compute character count */


			     /* Move source into temporary segment */


move:
     reading = "1"b;					/* indicate that we are reading source */
     old_linum = "-1";					/* initialize to before firt line */
     do while (js < csize);					/* scan the entire segment */
	k = index (substr(sptr->long_string, js+1), nl);	/* find the end of the line */
	if k = 0 then k = csize - js;				/* file does not have a newline at the end */
	substr (txt->long_string, jt+1, k) =	 		/* move line into text area */
	     substr (sptr->long_string, js+1, k);
	js = js + k;					/* increment pointer in source */
	linum = get_line_number (jt);				/* get this line's number */
	if linum < 0					/* invalid line number encountered? */
	     then call error ("Bad line number in source. Line deleted after line", old_linum, "0"b);
	else if linum > 99999				/* is line number too large? */
	     then call error ("Line number in source too large. Line deleted after line", old_linum, "0"b);
	lmax = max(lmax, linum);				/* highest ? */
	old_linum = substr(convert(old_linum, linum), 6);		/* save for possible diagnostic */
	tbl->table(linum).indx = jt;				/* "jt" is the index of the first char. */
	tbl->table(linum).chcount = k;			/* compute length in characters */
	jt = jt + k + 3;
	jt = jt - mod(jt,4);				/* align next line on word boundary */
     end;
     reading = "0"b;					/* reset */


				     /* Process input lines */

edit:
     call ioa_ ("Edit.^/");					/* enter edit mode */

next:
     inp = addr(txt->ch(jt));					/* get place to put next line */
     call input_iocb -> iocb.get_line (input_iocb, inp, 158, k, code);
     if code ^= 0 then do;
	call com_err_ (code, "basic_system");
	go to next;
     end;
     if k <= 1 then go to next;				/* blank line */
     j = verify(inp->cs," 	");				/* get index of first non-white character */
     if j > 1 then do;					/* if not first char, then get significant part */
	k = k - j + 1;					/* get new length */
	substr(inp->cs, 1, k) = substr(inp->cs, j, k);		/* move line back into alignment */
     end;

     if search(substr(inp->cs, 1, 1), "0123456789") > 0
	then do;
	     linum = get_line_number (jt);			/* find the line number */
	     if linum < 0 then call error ("Bad line number.", "", "0"b);
	     else if linum > 99999 then call error ("Line number too large.", "", "0"b);
	     if newline
		then tbl->table(linum).chcount = 0;		/* if just a line number, delete the line */
		else do;					/* else insert the line */
		     lmax = max(lmax, linum);			/* which is the highest */
		     tbl->table(linum).indx = jt;		/* set the index */
		     tbl->table(linum).chcount = k;		/* set the count */
		     jt = jt + k + 3;
		     jt = jt-mod(jt,4);			/* set the next jt */
		end;
	     go to next;					/* next line */
	end;

     if substr(inp->cs, 1, 3) = "run" then			/* is this the run command */
	if substr(inp->cs, 4, 1) = nl then go to run;		/* we not allow anything else */

     if substr(inp->cs, 1, 4) = "save" then go to save;		/* is this the save command? */

     if substr(inp->cs, 1, 4) = "list" then go to list;		/* is this the list command? */

     if substr(inp->cs, 1, 4) = "quit" then			/* is this the quit command? */
	if substr(inp->cs, 5, 1) = nl then go to quit;

     if substr(inp->cs, 1, 6) = "delete" then go to delete;		/* is this the delete command? */

     if substr(inp->cs, 1, 4) = "rseq" then go to resequence;	/* is this the command to resequence */

     if substr(inp->cs, 1, 4) = "exec"				/* execute a Multics command */
	then do;
	     call cu_$cp (addr(inp->ch(4)), k-4, code);		/* call the command processor */
	     go to next;
	end;

     if substr(inp->cs, 1, 4) = "time"				/* specify a run-time limit on the program */
	then do;
	     time_limit = get_line_number (jt+4);		/* use the line number routine to get the no. */
	     if time_limit < 0 then call error("Negative time limit given.","","0"b);
	     go to next;
	end;

     if substr(inp->cs, 1, 3) = "get"				/* clear buffers and get new source */
	then do;
	     known = "0"b;					/* we don't have a name for the file ... yet */
	     if substr (inp->cs, 4, 1) = nl			/* was a name given in the command */
		then call ioa_ ("Input.^/");			/* no -- get one later */
		else do;
		     j = verify (substr(inp->cs, 4), " 	") + 3;	/* find start of name */
			if j = 0 then call error ("Improper syntax in get command.", "", "0"b);
		     lname = index (substr(inp->cs, j), nl) - 1;	/* find out length of name */
		     source = substr (inp->cs, j , lname);	/* get name */
		     known = "1"b;			/* got it */
		end;

	     call hcs_$truncate_seg (tptr, 0, code);		/* zero out temporaries */
		if code ^= 0 then call error ("", "Temporary.", "1"b);
	     call hcs_$truncate_seg (tbl, 0, code);
		if code ^= 0 then call error ("", "Temporary.", "1"b);
	     lmax, js, jt = 0;				/* nothing left */

	     if known
		then go to get_source;			/* fetch the segment */
		else go to next;				/* otherwise enter edit mode directly */

	end;						/* of get command */

     call ioa_ ("Command not understood.");			/* all else has failed */
     call input_iocb -> iocb.control (input_iocb, "resetread", null(), code);
     call ioa_("RESET");
     go to next;


			/* Routines to list, delete, run, etc. */


run:
     save_sw = "0"b;					/* run, not save */

finish:							/* pack lines into base of segment */
     j = 1;						/* set character pointer */
     do k = 0 to lmax;					/* look at all possible lines */
	if tbl->table(k).chcount ^= 0 then
	substr (tptr->long_string, j, tbl->table(k).chcount) =		/* pack lines into base of segment */
	     substr (txt->long_string, tbl->table(k).indx+1, tbl->table(k).chcount);
	j = j + tbl->table(k).chcount;
     end;
     j = j - 1;

     if save_sw						/* how did we get here */
	then do;						/* save the program */
	     call hcs_$make_seg (dirname, ename, "", 01011b, sptr, code);	/* create the segment */
		if sptr = null then call error ("", source, "0"b);
	     count = divide(j+3,4,17,0);			/* get word count */
	     sptr->copy_overlay = tptr->copy_overlay;		/* copy the program */
	     call hcs_$set_bc_seg (sptr, fixed(j*9,24,0), code);	/* set a bit count consistant with its length */
		if code ^= 0 then call error ("", source, "0"b);
	     call hcs_$truncate_seg (sptr, count, code);		/* truncate it to its new size in words */
		if code ^= 0 then call error ("", source, "0"b);
	     go to edit;					/* continue */
	end;
	else do;						/* compile and run the program */
	     compiling = "1"b;				/* set the compile flag */
	     call hcs_$truncate_seg(obj,0,code);		/* truncate object segment */
	     if code ^= 0 then call error("","","0"b);

	     call basic_(tptr,j,obj,null,main,err_count);		/* run the compiler */

	     if err_count = 0
	     then if main = null
		then call ioa_("No main program.");		/* must have main program */
		else if time_limit = 0 then call cu_$ptr_call(main);
		     else do;
			call timer_manager_$cpu_call(time_limit,"11"b,cpu_limit);
			call cu_$ptr_call(main);
			call timer_manager_$reset_cpu_call(cpu_limit);
			end;
	     else do;
		if err_count = 1 then s = ""; else s = "s";
		call ioa_("^d error^a found, no execution.",err_count,s);
		end;

	     compiling = "0"b;				/* turn off flag */
	     go to edit;					/* resume editing */
	end;

save:							/* we want to save the program */
     save_sw = "1"b;					/* this is a save, not a run */
     if substr(inp->cs, 5, 1) = nl				/* test if a name was given */
	then if known 					/* no, check if a name has been given */
	     then go to finish;				/* assume orignal as the default */
	     else call error ("No name given.", "", "0"b);	/* we haven't been given a name */

     j = verify (substr(inp->cs, 5), " 	") + 4;			/* ignore leading white space */
	if j = 0 then call error ("Improper syntax in save command.", "", "0"b);
     lname = index (substr(inp->cs, j), nl) - 1;			/* get length of name */
     source = substr(inp->cs, j, lname);			/* remove it from the line */
     k = index(source, " ");
     if k ^= 0
     then if substr(source,k+1) ^= ""
	then do;
	     known = "0"b;					/* name is no longer valid */
	     call error ("Improper segment name.", source, "0"b);
	end;
     if index(source, language) = 0				/* is there a suffix */
	then do;
	     substr(source, lname+1, 6) = language;		/* insert one if not */
	     lname = lname + 6;				/* update length */
	end;
     call expand_path_ (addr(source), lname, addr(dirname), addr(ename), code);
	if code ^= 0 then call error ("", source, "0"b);		/* expand the pathname */
     prog = substr(ename, 1, index(ename, language)-1);		/* remember stripped entry name */
     call ioa_$rsnnl ("^a>^a", source, i, dirname, ename);		/* and full path name */
     known = "1"b;						/* we now have a name */
     go to finish;

list:							/* list some lines */
     if substr(inp->cs, 5, 1) = nl				/* no lines given, list all */
	then do;
	     first = 0;					/* set defaults, first to zero */
	     last = lmax;					/* and last to the maximum line number */
	     end;
	else call get_lines (jt + 4);				/* find out which lines were given */

     if first > last then do;					/* we can't allow this */
	i = last;						/* exchange */
	last = first;
	first = i;
     end;

     if first ^= last
	then call output_iocb -> put_chars (output_iocb, addr(nl), 1, code); /* a new line for looks */
     else if tbl->table.chcount(first) = 0			/* if only one line check if it exists */
	then call error ("No line.", "", "0"b);

     do i = first to last;					/* search all possible lines */
	k = tbl->table(i).chcount;				/* get character count */
	substr(buffer, 1, k+1) = substr(txt->long_string, tbl->table(i).indx + 1, k) || nl;
	if k ^= 0 then call output_iocb -> iocb.put_chars (output_iocb, addr(buffer), k, code);/* list only those lines with */
     end;							/*  none zero count */

   call output_iocb -> iocb.put_chars (output_iocb, addr(nl), 1, code);	/* another one */
     go to next;

quit: call clean_up;						/* clean up and return */
     return;						/* goodbye */

delete:							/* delete some lines */
     if substr(inp->cs, 7, 1) = nl				/* no lines specified */
	then call error ("No line numbers given.", "", "0"b);
	else do;
	     if substr(inp->cs, 7, 4) = " all"			/* delete all lines */
		then do;
		     first = 0;				/* like list, first set to zero */
		     last = lmax;				/* last to maximum */
		     end;
		else call get_lines (jt + 6);			/* get line numbers */
	end;

     do i = first to last;					/* delete these lines */
	tbl->table(i).chcount = 0;				/* count = 0 indicates null line */
     end;

     go to next;

resequence:						/* resequence the line numbers of a program */
     resequencing = "1"b;					/* turn indicator on in case of a quit */

     if substr(inp->cs, 5, 1) = nl				/* get values for resequencing */
	then do;
	     first = 100;					/* if none set defaults */
	     increment = 10;				/* start at 100 and go by 10 */
	     end;
	else call get_lines (jt + 4);

     call basic_resequence_ (first, increment, tbl, txt, jt, lmax, code);
	if code ^= 0 then call error ("", "Error occurred while resequencing.", "0"b);
     resequencing = "0"b;					/* finished */

     go to edit;

end basic_system;
