" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

" Procedure to process next input line for Multics Basic
"
" Initial Version: 25 February 1973 by BLW
" Modified: 22 September 1973 by BLW to use EIS
" Modified: 31 July 1980 by MBW to ignore blank lines
" Modified: 27 October 1980 by MBW to handle multiple statements per line
"
" Usage:
"	dcl basic_next_line entry(ptr);
"
"	call basic_next_line(addr(structure))
"
" where	structure		is our working storage, which is defined below
"
" If an error is found, structure.number is made negative:  the following codes are returned
"	-1	line too long
"	-2	no NL at end of segment
"	-3	string doesn't end with quote
"	-4	past end of segment at entry to basic_next_line
"	-5	no line number at beginning of line
"
"	Layout of our work area structure
"
	equ	input_pt,0
	equ	input_length,2
	equ	input_pos,3
	equ	line_number,4
	equ	number,5
	equ	class_tally,6
	equ	original_class_tally,7
	equ	ch_tally,8
	equ	original_ch_tally,9
	equ	save_ch_tally,10
	equ	char,11
	equ	statement_number,12
	equ	statement_ending,13
	equ	temp_ch,14
	equ	class,24
	equ	ch,24+256
"
"	The following character classes are used
"
	equ	plus,1
	equ	minus,2
	equ	times,3
	equ	divide,4
	equ	power,5
	equ	concat,6
	equ	letter,7
	equ	digit,8
	equ	decimal,9
	equ	dollar,10
	equ	punc,11
	equ	relation,12
	equ	assign,13
	equ	nl,14
	equ	quote,15
	equ	invalid,16
	equ	remark,17
	equ	backslash,18
"
	equ	max_length,256
"
	bool	NL,12
	bool	QUOTE,42
	bool	RIGHT_PAREN,51
"
	segdef	basic_next_line
basic_next_line:
	epp3	ap|2,*		get ptr to our structure
	epp3	3|0,*
"
next_line:
	eaa	3|class		get offset of class buffer
	sta	3|original_class_tally
	sta	3|class_tally	and save
"
	eaa	3|ch		also form ch buffer tally
	sta	3|original_ch_tally
	sta	3|ch_tally
"
	ldq	3|input_length	get number chars remaining in segment
	sbq	3|input_pos
	stq	3|input_length
	lxl1	3|input_pos
	epp2	3|input_pt,*
	a9bd	2|0,1		add in char offset
	spri2	3|input_pt	save new input ptr
	eax1	0		start at beginning of statement
	stz	3|input_pos	initialize in case there's no line num
	lda	3|statement_ending
	sta	3|statement_number
	tnz	scan_statement	only first statement has line number
"
	tct	(pr,rl)	scan over line number
	desc9a	2|0,ql
	arg	skip_table
	arg	3|char
	lxl1	3|char		get number of digits
	tze	no_line_number
	dtb	(pr,rl),(pr)	convert line number to binary
	desc9ns	2|0,x1
	desc9a	3|line_number,4
	sxl1	3|input_pos
	stz	3|char		so we can have leading zeros
"
scan_statement:
	ldq	3|input_length	get number of chars remaining in segment
	sbq	3|input_pos
	tmoz	past_end		error if past end of segment
	cmpq	max_length,dl	get min(left, max_length)
	tmi	2,ic
	ldq	max_length,dl
	qls	6		and fill in tally count
	orsq	3|class_tally
	orsq	3|ch_tally
"
loop1:	adx1	1,du		update for next character
	mlr	(pr,x1),(pr)	move char into word aligned buffer
	desc9a	2|-1(3),1
	desc9a	3|char(3),1
	lda	3|char		get right justified char into a
loop2:	lda	char_table,al	pick up table entry
	tze	loop1		zero means skip
	ldq	0,dl		clear q
	lrs	18		shift class to al, replacement char to qu
	cmpa	nl,dl		is this end of the line
	tze	eol		yes, finish up and return
	cmpa	remark,dl		is this start of remark
	tze	rem		yes, go process
	cmpa	backslash,dl	is this possible end of statement
	tze	check_backslash	yes, check further before returning
	sta	3|class_tally,id	store class in buffer
	ttf	ok1		and continue if end of buffer not reached
"
"	input line is too long, skip to next new line
"
runout:	sxl1	3|input_pos	save input position
	ldq	3|input_pos
	cmpq	3|input_length	did we read past end
	tmi	too_long
"
"	end of segment reached without NL
"
no_nl:	lcq	2,dl
	stq	3|number		return error code
	short_return
"
"	more characters than length of buffer, search for NL or BACKSLASH
"
too_long:	lcq	1,dl
"
nl_search:
	stq	3|number		save error code
	tsx3	search_subroutine
	cmpa	1,dl		check for blank line
	tze	next_line		ignore blank line
	short_return
"
"	have start of remark, ignore all characters up to next NL or BACKSLASH
"
rem:	tsx3	search_subroutine
	lda	3|statement_ending	check which case we have
	cmpa	0,dl
	tze	load_nl
	lda	backslash,dl	join normal termination
	ldq	=o134000000000,du
	tra	end_join+1
load_nl:	lda	nl,dl		join normal termination
	ldq	=o12000000000,du
	tra	end_join+1
"
"	common code to search for NL and then BACKSLASH
"
search_subroutine:
	sxl1	3|input_pos	save input position
	ldq	3|input_length	get number of chars remaining
	sbq	3|input_pos
	tmoz	no_nl
	scm	(pr,rl,x1),(du)	look for NL
	desc9a	2|0,ql
	vfd	o9/012,27/0
	arg	3|char
	ttn	no_nl		error if NL not found
"
"	search for backslash in the line
"
	lda	3|char		get number of chars we skipped
	scm	(pr,rl,x1),(du)	look for backslash in the line
	desc9a	2|0,al
	vfd	o9/134,27/0
	arg	3|char
	ttn	nl_case		no backslash found
	ldq	3|char		get number of characters skipped
	adq	1,dl
	asq	3|input_pos
	lls	36		move q to a
	aos	3|statement_ending	indicate statement ended by backslash
	tra	0,3		return
nl_case:
	ada	1,dl
	asa	3|input_pos
	stz	3|statement_ending	indicate statement ended by new_line
	tra	0,3		return
"
"	end of statement reached, determine number read and return
"
eos:	aos	3|statement_ending
	tra	end_join
"
"	end of line reached, determine number read and return
"
eol:	stz	3|statement_ending
end_join:	sxl1	3|input_pos	save input position
	sta	3|class_tally,id	save class
	stq	3|ch_tally,id	and character
	ldq	3|class_tally	get current tally word
	sblq	3|original_class_tally compute number of characters stored
	qrl	18		in lower
	stq	3|number		save for caller
	short_return		and exit
"
"	check for ) without updating input position
"	\) probably is part of asc function
"
check_backslash:
	eax2	0,1		copy current position
rparen_search:
	adx2	1,du		look at next character
	mlr	(pr,x1),(pr)
	desc9a	2|-1(3),2
	desc9a	3|temp_ch(3),2
	lda	3|temp_ch
	lda	char_table,al
	tze	rparen_search
	ldq	0,dl		clear q
	lrs	18		shift class to al, replacement char to qu
	eax3	0,qu		save char following \
	lda	backslash,dl	restore aq to continue processing
	ldq	=o134000000000,du
	cmpx3	RIGHT_PAREN,dl
	tnz	eos		must be end of statement
	sta	3|class_tally,id	store class in buffer
	ttf	ok1		and continue if end of buffer not reached
	tra	runout		input line is too long
"
"	already went to end of segment
"
past_end:
	sxl1	3|input_pos	save input position
	lcq	4,dl
	stq	3|number
	short_return
"
ok1:	stq	3|ch_tally,id	save character replacement
	cmpa	quote,dl		is this start of a character string constant
	tnz	loop1		no, continue main scan
"
"	have start of string constant
"
start_string:
	lda	3|ch_tally		save current character tally for later
	sta	3|save_ch_tally
"
string_loop:
	tsx0	next_char		get next character
	stz	3|class_tally,id	count number "stored"
	ttn	runout		error if tally runout
	cmpa	NL,dl		is this nl
	tze	string_error	yes, have string error
	cmpa	QUOTE,dl		is it a quote
	tze	end_string	yes, may be end of string
plop:	als	27		no, shift char to first byte
	sta	3|ch_tally,id	and save
	tra	string_loop	then do next char
end_string:
	tsx0	next_char		get character after quote
	cmpa	QUOTE,dl		is it another quote
	tze	plop		yes, put one quote in buffer
"
"	end of string reached, store number of characters in string
"	in character corresponding to first quote
"
	nop	3|class_tally,di	backup position in class buffer
	ldx2	3|ch_tally	get current position
	sbx2	3|save_ch_tally	compute number of characters stored
	eaq	0,2		number to qu
	qls	9		shift to first byte
	nop	3|save_ch_tally,di	backup character tally by 1
	stq	3|save_ch_tally,i	and store in buffer
	tra	loop2		and then join normal loop
"
"	reached NL without terminating string
"
string_error:
	sxl1	3|input_pos	save input position
	lcq	3,dl
	stq	3|number
	short_return
"
no_line_number:
	lcq	5,dl
	tra	nl_search
"
"	subroutine to get next character from input, entered on x0
"
next_char:
	adx1	1,du		update input position
	mlr	(pr,x1),(pr)
	desc9a	2|-1(3),1
	desc9a	3|char(3),1
	lda	3|char		get right justified character
	tra	0,0		and return
"
"	character table, format is 18/class,9/replacement,9/0
"
char_table:
	vfd	18/invalid,o9/000	000 NUL
	vfd	18/invalid,o9/001	001
	vfd	18/invalid,o9/002	002
	vfd	18/invalid,o9/003	003
	vfd	18/invalid,o9/004	004
	vfd	18/invalid,o9/005	005
	vfd	18/invalid,o9/006	006
	vfd	18/invalid,o9/007	007 BEL
	vfd	18/invalid,o9/010	010 BS
	vfd	36/0		011 HT
	vfd	18/nl,o9/012	012 NL
	vfd	18/invalid,o9/013	013 VT
	vfd	18/invalid,o9/014	014 NP
	vfd	36/0		015 CR (for compatibility with Dartmouth)
	vfd	18/invalid,o9/016	016 RRS
	vfd	18/invalid,o9/017	017 BRS
	vfd	18/invalid,o9/020	020
	vfd	18/invalid,o9/021	021
	vfd	18/invalid,o9/022	022
	vfd	18/invalid,o9/023	023
	vfd	18/invalid,o9/024	024
	vfd	18/invalid,o9/025	025
	vfd	18/invalid,o9/026	026
	vfd	18/invalid,o9/027	027
	vfd	18/invalid,o9/030	030
	vfd	18/invalid,o9/031	031
	vfd	18/invalid,o9/032	032
	vfd	18/invalid,o9/033	033
	vfd	18/invalid,o9/034	034
	vfd	18/invalid,o9/035	035
	vfd	18/invalid,o9/036	036
	vfd	18/invalid,o9/037	037
	vfd	36/0		040 space
	vfd	18/invalid,o9/041	041 !
	vfd	18/quote,o9/042	042 "
	vfd	18/punc,o9/043	043 #
	vfd	18/dollar,o9/044	044 $
	vfd	18/invalid,o9/045	045 %
	vfd	18/concat,o9/046	046 &
	vfd	18/remark,o9/047	047 '
	vfd	18/punc,o9/050	050 (
	vfd	18/punc,o9/051	051 )
	vfd	18/times,o9/052	052 *
	vfd	18/plus,o9/053	053 +
	vfd	18/punc,o9/054	054 ,
	vfd	18/minus,o9/055	055 -
	vfd	18/decimal,o9/056	056 .
	vfd	18/divide,o9/057	057 /
	vfd	18/digit,o9/060	060 0
	vfd	18/digit,o9/061	061 1
	vfd	18/digit,o9/062	062 2
	vfd	18/digit,o9/063	063 3
	vfd	18/digit,o9/064	064 4
	vfd	18/digit,o9/065	065 5
	vfd	18/digit,o9/066	066 6
	vfd	18/digit,o9/067	067 7
	vfd	18/digit,o9/070	070 8
	vfd	18/digit,o9/071	071 9
	vfd	18/punc,o9/072	072 :
	vfd	18/punc,o9/073	073 ;
	vfd	18/relation,o9/074	074 <
	vfd	18/assign,o9/075	075 =
	vfd	18/relation,o9/076	076 >
	vfd	18/invalid,o9/077	077 ?
	vfd	18/invalid,o9/100	100 @
	vfd	18/letter,o9/141	101 A
	vfd	18/letter,o9/142	102 B
	vfd	18/letter,o9/143	103 C
	vfd	18/letter,o9/144	104 D
	vfd	18/letter,o9/145	105 E
	vfd	18/letter,o9/146	106 F
	vfd	18/letter,o9/147	107 G
	vfd	18/letter,o9/150	110 H
	vfd	18/letter,o9/151	111 I
	vfd	18/letter,o9/152	112 J
	vfd	18/letter,o9/153	113 K
	vfd	18/letter,o9/154	114 L
	vfd	18/letter,o9/155	115 M
	vfd	18/letter,o9/156	116 N
	vfd	18/letter,o9/157	117 O
	vfd	18/letter,o9/160	120 P
	vfd	18/letter,o9/161	121 Q
	vfd	18/letter,o9/162	122 R
	vfd	18/letter,o9/163	123 S
	vfd	18/letter,o9/164	124 T
	vfd	18/letter,o9/165	125 U
	vfd	18/letter,o9/166	126 V
	vfd	18/letter,o9/167	127 W
	vfd	18/letter,o9/170	130 X
	vfd	18/letter,o9/171	131 Y
	vfd	18/letter,o9/172	132 Z
	vfd	18/punc,o9/133	133 [
	vfd	18/backslash,o9/134	134 \
	vfd	18/punc,o9/135	135 ]
	vfd	18/power,o9/136	136 ^
	vfd	18/invalid,o9/137	137 _
	vfd	18/invalid,o9/140	140 `
	vfd	18/letter,o9/141	141 a
	vfd	18/letter,o9/142	142 b
	vfd	18/letter,o9/143	143 c
	vfd	18/letter,o9/144	144 d
	vfd	18/letter,o9/145	145 e
	vfd	18/letter,o9/146	146 f
	vfd	18/letter,o9/147	147 g
	vfd	18/letter,o9/150	150 h
	vfd	18/letter,o9/151	151 i
	vfd	18/letter,o9/152	152 j
	vfd	18/letter,o9/153	153 k
	vfd	18/letter,o9/154	154 l
	vfd	18/letter,o9/155	155 m
	vfd	18/letter,o9/156	156 n
	vfd	18/letter,o9/157	157 o
	vfd	18/letter,o9/160	160 p
	vfd	18/letter,o9/161	161 q
	vfd	18/letter,o9/162	162 r
	vfd	18/letter,o9/163	163 s
	vfd	18/letter,o9/164	164 t
	vfd	18/letter,o9/165	165 u
	vfd	18/letter,o9/166	166 v
	vfd	18/letter,o9/167	167 w
	vfd	18/letter,o9/170	170 x
	vfd	18/letter,o9/171	171 y
	vfd	18/letter,o9/172	172 z
	vfd	18/punc,o9/173	173 {
	vfd	18/invalid,o9/174	174 |
	vfd	18/punc,o9/175	175 }
	vfd	18/invalid,o9/176	176 ~
	vfd	18/invalid,o9/177	177 PAD
"
"	Character table used to skip over string of digits
"
skip_table:
	dec	-1,-1		000 - 007
	dec	-1,-1		010 - 017
	dec	-1,-1		020 - 027
	dec	-1,-1		030 - 037
	dec	-1,-1		040 - 047
	dec	-1,-1		050 - 057
	dec	0,0		060 - 067
	vfd	18/0,18/-1,36/-1	070 - 077
	dec	-1,-1		100 - 107
	dec	-1,-1		110 - 117
	dec	-1,-1		120 - 127
	dec	-1,-1		130 - 137
	dec	-1,-1		140 - 147
	dec	-1,-1		150 - 157
	dec	-1,-1		160 - 167
	dec	-1,-1		170 - 177
"
	end
