" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

"	Modified: 15 May 1984 by DWL to add new string function mid$
"	Modified: 19 May 1984 by D. Leskiw to add new string function left$
"	Modified: 23 May 1984 by D. Leskiw to add new string function right$
"	Modified: 23 May 1984 by D. Leskiw to allow pos to have optional # of args
"	Modified: 25 May 1984 by D. Leskiw to fix problem when left$, right$, or pos is passed
"	          as functions argument, as on page 5-3 of basic manual
"
"	Table of valid BASIC statements
"
	segdef	statement_spelling
statement_spelling:
	dec	0,-1		a
	dec	0,-1		b
	dec	1,3		c
	dec	4,6		d
	dec	7,7		e
	dec	8,10		f
	dec	11,12		g
	dec	0,-1		h
	dec	13,14		i
	dec	0,-1		j
	dec	0,-1		k
	dec	15,17		l
	dec	18,19		m
	dec	20,20		n
	dec	21,21		o
	dec	22,22		p
	dec	0,-1		q
	dec	23,27		r
	dec	28,32		s
	dec	33,34		t
	dec	0,-1		u
	dec	0,-1		v
	dec	35,35		w
	dec	0,-1		x
	dec	0,-1		y
	dec	0,-1		z
"
	segdef	statement_list
statement_list:
	aci	"cal "		call
	aci	"l       "
	dec	1
	aci	"cha "		chain
	aci	"in      "
	dec	2
	aci	"cha "		change
	aci	"nge     "
	dec	3
	aci	"dat "		data
	aci	"a       "
	dec	1
	aci	"def "		def
	aci	"        "
	dec	0
	aci	"dim "		dim
	aci	"        "
	dec	0
	aci	"end "		end
	aci	"        "
	dec	0
	aci	"fil "		file
	aci	"e       "
	dec	1
	aci	"fne "		fnend
	aci	"nd      "
	dec	2
	aci	"for "		for
	aci	"        "
	dec	0
	aci	"got "		goto
	aci	"o       "
	dec	1
	aci	"gos "		gosub
	aci	"ub      "
	dec	2
	aci	"if  "		if
	aci	"        "
	dec	0
	aci	"inp "		input
	aci	"ut      "
	dec	2
	aci	"let "		let
	aci	"        "
	dec	0
	aci	"lib "		library
	aci	"rary    "
	dec	4
	aci	"lin "		linput
	aci	"put     "
	dec	3
	aci	"mar "		margin
	aci	"gin     "
	dec	3
	aci	"mat "		mat
	aci	"        "
	dec	0
	aci	"nex "		next
	aci	"t       "
	dec	1
	aci	"on  "		on
	aci	"        "
	dec	0
	aci	"pri "		print
	aci	"nt      "
	dec	2
	aci	"ran "		randomize
	aci	"domize  "
	dec	6
	aci	"rea "		read
	aci	"d       "
	dec	1
	aci	"rem "		rem
	aci	"        "
	dec	0
	aci	"res "		reset
	aci	"et      "
	dec	2
	aci	"ret "		return
	aci	"urn     "
	dec	3
	aci	"scr "		scratch
	aci	"atch    "
	dec	4
	aci	"set "		setdigits
	aci	"digits  "
	dec	6
	aci	"sto "		stop
	aci	"p       "
	dec	1
	aci	"sub "		sub
	aci	"        "
	dec	0
	aci	"sub "		subend
	aci	"end     "
	dec	3
	aci	"tea "		teach
	aci	"ch      "
	dec	2
	aci	"tim "		time
	aci	"e       "
	dec	1
	aci	"wri "		write
	aci	"te      "
	dec	2
"
	include	basic_xfer_vector
"
"	Information tables giving predefined BASIC functions
"
	equ	n.0,1		numeric	no arguments
	equ	n.n,2		numeric	one numeric arg
	equ	n.s,3		numeric	one string arg
	equ	n.f,4		numeric	one file arg
	equ	s.0,5		string	no arguments
	equ	s.n,6		string	one numeric arg
	equ	s.nn,7		string	two numeric args
	equ	n.nn,8		numeric	two numeric args
	equ	n.fs,9		numeric	one file arg, one string arg
	equ	n.ssn,10		numeric	two string args, one numeric arg
	equ	s.snn,11		string	one string arg, two numeric args
	equ	n.var,12		numeric	variable number of args
	equ	matrix,13		matrix function
	equ	print_fun,14	print function (tab & spc)
	equ	matrix_constant,15	con, idn, zer, nul$
	equ	s.sn,16		string	one string arg, one numeric arg
	equ	pos_args,17	pos$(a$,b$,[i])
"
"	Table of basic functions
"
	segdef	functions
"
"	Numeric valued functions
"
functions:
	aci	"abs "		abs(x)
	vfd	36/n.n
	tsx7	ap|abs_fun
	aci	"atn "		atn(x)
	vfd	36/n.n
	tsx7	ap|atn_fun
	aci	"clg "		clg(x)
	vfd	36/n.n
	tsx7	ap|clg_fun
	aci	"cnt "		cnt
	vfd	36/n.0
	tsx7	ap|argcnt_fun
	aci	"con "		con
	vfd	36/matrix_constant
	tsx7	ap|con_fun
	aci	"cos "		cos(x)
	vfd	36/n.n
	tsx7	ap|cos_fun
	aci	"cot "		cot(x)
	vfd	36/n.n
	tsx7	ap|cot_fun
	aci	"det "		det
	vfd	36/n.0
	tsx7	ap|det_fun
	aci	"exp "		exp(x)
	vfd	36/n.n
	tsx7	ap|exp_fun
	aci	"hps "		hps(#f)
	vfd	36/n.f
	tsx7	ap|hps_fun
	aci	"idn "		idn
	vfd	36/matrix_constant
	tsx7	ap|idn_fun
	aci	"int "		int(x)
	vfd	36/n.n
	tsx7	ap|int_fun
	aci	"inv "		inv
	vfd	36/matrix
	tsx7	ap|inv_fun
	aci	"len "		len(a$)
	vfd	36/n.s
	tsx7	ap|len_fun
	aci	"lin "		lin(#f)
	vfd	36/n.f
	tsx7	ap|lin_fun
	aci	"loc "		loc(#f)
	vfd	36/n.f
	tsx7	ap|loc_fun
	aci	"lof "		lof(#f)
	vfd	36/n.f
	tsx7	ap|lof_fun
	aci	"log "		log(x)
	vfd	36/n.n
	tsx7	ap|log_fun
	aci	"mar "		mar(#f)
	vfd	36/n.f
	tsx7	ap|mar_fun
	aci	"max "		max(x,y,...,z)
	vfd	36/n.var
	tsx7	ap|max_fun
	aci	"min "		min(x,y,...,z)
	vfd	36/n.var
	tsx7	ap|min_fun
	aci	"mod "		mod(x,y)
	vfd	36/n.nn
	tsx7	ap|mod_fun
	aci	"num "		num
	vfd	36/n.0
	tsx7	ap|num_fun
	aci	"per "		per(#f,a$)
	vfd	36/n.fs
	tsx7	ap|per_fun
	aci	"pos "		pos(a$,b$,x)
	vfd	36/pos_args
	tsx7	ap|pos_fun
	aci	"rnd "		rnd
	vfd	36/n.0
	tsx7	ap|rnd_fun
	aci	"sgn "		sgn(x)
	vfd	36/n.n
	tsx7	ap|sgn_fun
	aci	"sin "		sin(x)
	vfd	36/n.n
	tsx7	ap|sin_fun
	aci	"spc "		spc(x)
	vfd	36/print_fun
	tsx7	ap|spc_fun
	aci	"sqr "		sqr(x)
	vfd	36/n.n
	tsx7	ap|sqr_fun
	aci	"tab "		tab(x)
	vfd	36/print_fun
	tsx7	ap|tab_fun
	aci	"tan "		tan(x)
	vfd	36/n.n
	tsx7	ap|tan_fun
	aci	"tim "		tim
	vfd	36/n.0
	tsx7	ap|tim_fun
	aci	"trn "		trn
	vfd	36/matrix
	tsx7	ap|trn_fun
	aci	"tst "		tst(a$)
	vfd	36/n.s
	tsx7	ap|tst_fun
	aci	"typ "		typ(#f,a$)
	vfd	36/n.fs
	tsx7	ap|typ_fun
	aci	"val "		val(a$)
	vfd	36/n.s
	tsx7	ap|val_fun
	aci	"zer "		zer
	vfd	36/matrix_constant
	tsx7	ap|zer_fun
"
"	string valued functions
"
	aci	"arg "		arg$(x)
	vfd	36/s.n
	tsx7	ap|argval_fun
	aci	"chr "		chr$(x)
	vfd	36/s.n
	tsx7	ap|chr_fun
	aci	"clk "		clk$
	vfd	36/s.0
	tsx7	ap|clk_fun
	aci	"dat "		dat$
	vfd	36/s.0
	tsx7	ap|dat_fun
	aci	"nul "		nul$
	vfd	36/matrix_constant
	tsx7	ap|nul_fun
	aci	"seg "		seg$(a$,x,y)
	vfd	36/s.snn
	tsx7	ap|seg_fun
	aci	"sst "		sst$(a$,x,y)
	vfd	36/s.snn
	tsx7	ap|sst_fun
	aci	"str "		str$(x)
	vfd	36/s.n
	tsx7	ap|str_fun
	aci	"usr "		usr$
	vfd	36/s.0
	tsx7	ap|usr_fun
	aci	"mid "		mid$(a$,x,y)
	vfd	36/s.snn
	tsx7	ap|mid_fun
	aci	"left"		left$(a$,n)
	vfd	36/s.sn
	tsx7	ap|left_fun
	aci	"righ"		right$(a$,n)
	vfd	36/s.sn
	tsx7	ap|right_fun
"
"	Spelling table for numeric functions
"
	segdef	numeric_spelling
numeric_spelling:
	dec	1,2		a
	dec	0,-1		b
	dec	3,7		c
	dec	8,8		d
	dec	9,9		e
	dec	0,-1		f
	dec	0,-1		g
	dec	10,10		h
	dec	11,13		i
	dec	0,-1		j
	dec	0,-1		k
	dec	14,18		l
	dec	19,22		m
	dec	23,23		n
	dec	0,-1		o
	dec	24,25		p
	dec	0,-1		q
	dec	26,26		r
	dec	27,30		s
	dec	31,36		t
	dec	0,-1		u
	dec	37,37		v
	dec	0,-1		w
	dec	0,-1		x
	dec	0,-1		y
	dec	38,38		z
"
"	Spelling table for string functions
"
	segdef	string_spelling
string_spelling:
	dec	39,39		a
	dec	0,-1		b
	dec	40,41		c
	dec	42,42		d
	dec	0,-1		e
	dec	0,-1		f
	dec	0,-1		g
	dec	0,-1		h
	dec	0,-1		i
	dec	0,-1		j
	dec	0,-1		k
	dec	49,49		l, used for left$
	dec	48,48		m, used for mid$
	dec	43,43		n
	dec	0,-1		o
	dec	0,-1		p
	dec	0,-1		q
	dec	50,50		r, used for right$
	dec	44,46		s, used for seg$,sst$,str$
	dec	0,-1		t
	dec	47,47		u
	dec	0,-1		v
	dec	0,-1		w
	dec	0,-1		x
	dec	0,-1		y
	dec	0,-1		z
"
	segdef	function_templates
"
"	code templates for functions passed as subprogram arguments
"
function_templates:
	arg	numeric_0		n.0
	arg	numeric_n		n.n
	arg	numeric_s		n.s
	arg	numeric_f		n.f
	arg	string_0		s.0
	arg	string_n		s.n
	arg	0		s.nn
	arg	numeric_nn	n.nn
	arg	numeric_fs	n.fs
	arg	numeric_ssn	n.ssn
	arg	string_snn	s.snn
	arg	0		n.var
	arg	0		matrix
	arg	0		print_fun
	arg	0		matrix_constant
	arg	string_sn		s.sn
	arg	0		pos_args
	arg	d_numeric_0	n.0
	arg	d_numeric_n	n.n
	arg	d_numeric_s	n.s
	arg	d_numeric_f	n.f
	arg	string_0	s.0
	arg	d_string_n	s.n
	arg	0		s.nn
	arg	d_numeric_nn	n.nn
	arg	d_numeric_fs	n.fs
	arg	d_numeric_ssn	n.ssn
	arg	d_string_snn	s.snn
	arg	0		n.var
	arg	0		matrix
	arg	0		print_fun
	arg	0		matrix_constant
	arg	d_string_sn	s.sn
	arg	0		pos_args
"	numeric	no arguments
"
numeric_0:
	tra	7,ic
	oct	0
	oct	0
	tsx7	0
	fst	sp|0,6
	epp3	-4,ic
	tsx7	ap|fun_return_op
"
"	numeric	one numeric arg
"	numeric	one file arg
"
numeric_n:
numeric_f:
	tra	8,ic
	oct	020000000000
	oct	0
	fld	sp|1,6
	tsx7	0
	fst	sp|0,6
	epp3	-5,ic
	tsx7	ap|fun_return_op
"
"	numeric	one string arg
"
numeric_s:
	tra	8,ic
	oct	024000000000
	oct	0
	epp1	sp|1,6
	tsx7	0
	fst	sp|0,6
	epp3	-5,ic
	tsx7	ap|fun_return_op
"
"	string	no arguments
"
string_0:
	tra	8,ic
	oct	010000000000
	oct	0
	tsx7	0
	epp3	sp|0,6
	tsx7	ap|string_assign_op
	epp3	-5,ic
	tsx7	ap|fun_return_op
"
"	string	one numeric arg
"
string_n:
	tra	9,ic
	oct	030000000000
	oct	0
	fld	sp|1,6
	tsx7	0
	epp3	sp|0,6
	tsx7	ap|string_assign_op
	epp3	-6,ic
	tsx7	ap|fun_return_op
"
"	numeric	two numeric args
"
numeric_nn:
	tra	9,ic
	oct	040000000000
	oct	0
	fld	sp|1,6
	tsx7	0
	fld	sp|2,6
	fst	sp|0,6
	epp3	-6,ic
	tsx7	ap|fun_return_op
"
"	numeric one file arg, one string arg
"
numeric_fs:
	tra	9,ic
	oct	042000000000
	oct	0
	fld	sp|1,6
	epp1	sp|2,6
	tsx7	0
	fst	sp|0,6
	epp3	-6,ic
	tsx7	ap|fun_return_op
"
"	numeric	two string args, one numeric arg
"
numeric_ssn:
	tra	10,ic
	oct	066000000000
	oct	0
	fld	sp|3,6
	epp1	sp|1,6
	epp3	sp|2,6
	tsx7	0
	fst	sp|0,6
	epp3	-7,ic
	tsx7	ap|fun_return_op
"
"	string	one string arg, tw numeric args
"
string_snn:
	tra	11,ic
	oct	074000000000
	oct	0
	fld	sp|2,6
	epp1	sp|1,6
	tsx7	0
	fld	sp|3,6
	epp3	sp|0,6
	tsx7	ap|string_assign_op
	epp3	-8,ic
	tsx7	ap|fun_return_op
"	
"	string	string arg, numeric arg
"
string_sn:
	tra 	10,ic
	oct	054000000000
	oct	0
	fld	sp|2,6
	epp1	sp|1,6
	tsx7	0
	epp3 	sp|0,6
	tsx7	ap|string_assign_op
	epp3	-7,ic
	tsx7	ap|fun_return_op
	
"
"	numeric	no arguments
"
d_numeric_0:
	tra	7,ic
	oct	0
	oct	0
	tsx7	0
	dfst	sp|0,6
	epp3	-4,ic
	tsx7	ap|fun_return_op
"
"	numeric	one numeric arg
"	numeric	one file arg
"
d_numeric_n:
d_numeric_f:
	tra	8,ic
	oct	020000000000
	oct	0
	dfld	sp|2,6
	tsx7	0
	dfst	sp|0,6
	epp3	-5,ic
	tsx7	ap|fun_return_op
"
"	numeric	one string arg
"
d_numeric_s:
	tra	8,ic
	oct	024000000000
	oct	0
	epp1	sp|2,6
	tsx7	0
	dfst	sp|0,6
	epp3	-5,ic
	tsx7	ap|fun_return_op
"
"	string	one numeric arg
"
d_string_n:
	tra	9,ic
	oct	030000000000
	oct	0
	dfld	sp|2,6
	tsx7	0
	epp3	sp|0,6
	tsx7	ap|string_assign_op
	epp3	-6,ic
	tsx7	ap|fun_return_op
"
"	numeric	two numeric args
"
d_numeric_nn:
	tra	9,ic
	oct	040000000000
	oct	0
	dfld	sp|2,6
	tsx7	0
	dfld	sp|4,6
	dfst	sp|0,6
	epp3	-6,ic
	tsx7	ap|fun_return_op
"
"	numeric one file arg, one string arg
"
d_numeric_fs:
	tra	9,ic
	oct	042000000000
	oct	0
	dfld	sp|2,6
	epp1	sp|4,6
	tsx7	0
	dfst	sp|0,6
	epp3	-6,ic
	tsx7	ap|fun_return_op
"
"	numeric	two string args, one numeric arg
"
d_numeric_ssn:
	tra	10,ic
	oct	066000000000
	oct	0
	dfld	sp|6,6
	epp1	sp|2,6
	epp3	sp|4,6
	tsx7	0
	dfst	sp|0,6
	epp3	-7,ic
	tsx7	ap|fun_return_op
"
"	string	one string arg, tw numeric args
"
d_string_snn:
	tra	11,ic
	oct	074000000000
	oct	0
	dfld	sp|4,6
	epp1	sp|2,6
	tsx7	0
	dfld	sp|6,6
	epp3	sp|0,6
	tsx7	ap|string_assign_op
	epp3	-8,ic
	tsx7	ap|fun_return_op
"
"	string	one string args, one numeric arg
"
d_string_sn:
	tra 	10,ic
	oct	054000000000
	oct	0
	dfld	sp|4,6
	epp1	sp|2,6
	tsx7	0
	epp3 	sp|0,6
	tsx7	ap|string_assign_op
	epp3	-7,ic
	tsx7	ap|fun_return_op
	
"
"	Information table for use by ASC function
"
	segdef	ascii_table
ascii_table:
	vfd	9/0
	aci	"nul "
	vfd	9/1
	aci	"soh "
	vfd	9/2
	aci	"stx "
	vfd	9/3
	aci	"etx "
	vfd	9/4
	aci	"eot "
	vfd	9/5
	aci	"enq "
	vfd	9/6
	aci	"ack "
	vfd	9/7
	aci	"bel "
	vfd	9/8
	aci	"bs  "
	vfd	9/9
	aci	"ht  "
	vfd	9/10
	aci	"lf  "
	vfd	9/11
	aci	"vt  "
	vfd	9/12
	aci	"ff  "
	vfd	9/13
	aci	"cr  "
	vfd	9/14
	aci	"so  "
	vfd	9/15
	aci	"si  "
	vfd	9/16
	aci	"dle "
	vfd	9/17
	aci	"dc1 "
	vfd	9/18
	aci	"dc2 "
	vfd	9/19
	aci	"dc3 "
	vfd	9/20
	aci	"dc4 "
	vfd	9/21
	aci	"nak "
	vfd	9/22
	aci	"syn "
	vfd	9/23
	aci	"etb "
	vfd	9/24
	aci	"can "
	vfd	9/25
	aci	"em  "
	vfd	9/26
	aci	"sub "
	vfd	9/27
	aci	"esc "
	vfd	9/28
	aci	"fs  "
	vfd	9/29
	aci	"gs  "
	vfd	9/30
	aci	"rs  "
	vfd	9/31
	aci	"us  "
	vfd	9/32
	aci	"sp  "
	vfd	9/95
	aci	"bkr "
	vfd	9/95
	aci	"und "
	vfd	9/96
	aci	"gra "
	vfd	9/123
	aci	"lbr "
	vfd	9/124
	aci	"vln "
	vfd	9/125
	aci	"rbr "
	vfd	9/126
	aci	"til "
	vfd	9/34
	aci	"quo "
	vfd	9/34
	aci	"qt  "
	vfd	9/39
	aci	"apo "
"
	segdef	ascii_table_length
ascii_table_length:
	vfd	36/(*-ascii_table)/2
"
"	Table of valid relational operators
"
	segdef	relational_table
relational_table:
	aci	"=   "
	aci	"<   "
	aci	"<=  "
	aci	"=<  "
	aci	"<>  "
	aci	"><  "
	aci	">=  "
	aci	"=>  "
	aci	">   "
"
	segdef	relational_table_length
relational_table_length:
	vfd	36/*-relational_table
"
	segdef	normal_relational
normal_relational:
	tze	0		=
	tmi	0		<
	tmoz	0		<=
	tmoz	0		=<
	tnz	0		<>
	tnz	0		><
	tpl	0		>=
	tpl	0		=>
	tpnz	0		>
"
	segdef	inverse_relational
inverse_relational:
	tze	0		=
	tpnz	0		<
	tpl	0		<=
	tpl	0		>=
	tnz	0		<>
	tnz	0		><
	tmoz	0		>=
	tmoz	0		=>
	tmi	0		>
"
"	Addressing prototypes
"
	segdef	array_prototype
array_prototype:
	arg	bp|0
"
	segdef	constant_prototype
constant_prototype:
	arg	lp|0
"
	segdef	scalar_prototype
scalar_prototype:
	arg	sp|0		numeric
	arg	pr5|0		string
"
	segdef	param_prototype
param_prototype:
	arg	sp|0,*
"
	segdef	function_dummy
function_dummy:
	tsx7	0
"
	segdef	instruction_sequences
instruction_sequences:
add:	fad	0
"
change:	tsx7	ap|change_from_string
	tsx7	ap|change_to_string
"
check_eof:
	tsx7	ap|check_eof_op
"
compare:	fcmp	0
"
data_read:
	tsx7	ap|numeric_data_read
	tsx7	ap|string_data_read
"
divide:	fdv	0
"
divide_inv:
	fdi	0
"
end_input:
	tsx7	ap|end_input_op
"
end_print:
	tsx7	0|end_print_op
"
enter_main:
	tsp2	2|0,*
"
enter_proc:
	tsp2	2|2,*
"
error:	tsx7	ap|error_in_statement
	tsx7	ap|missing_line
	tsx7	ap|unclosed_for
	tsx7	ap|undefined_function
"
file:	tsx7	ap|file_fun
"
fneg:	fneg	0
"
fszn:	fszn	0
"
function_arg:
	epp2	0
	sprp2	0
	sprp6	0
	ldaq	0
	staq	0
"
function_call:
	epp3	0
	tsx7	0|fun_call_op
	tsx7	0|global_fun_call_op
"
function_return:
	epp3	0
	tsx7	0|fun_return_op
"
get_fcb_pt:
	lprp2	0
"
gosub:	tsx7	ap|gosub_op
"
inner_product:
	tsx7	0|dot_product
"
input:	tsx7	ap|numeric_input_op
	tsx7	ap|string_input_op
"
linput:	zero
	tsx7	0|linput_op
"
load:	fld	0		numeric
	epp1	0		string
	epp2	0		addressing
	epp3	0		string 2nd arg
	ldq	0,dl		used for variable arg functions
"
margin:	tsx7	ap|margin_op
"
mat_data_read:
	tsx7	0|mat_numeric_data_read
	tsx7	0|mat_string_data_read
"
mat_input:
	tsx7	0|mat_numeric_input_op
	tsx7	0|mat_string_input_op
"
mat_linput:
	zero
	tsx7	0|mat_linput_op
"
mat_print:
	tsx7	0|mat_numeric_print_op
	tsx7	0|mat_string_print_op
"
mat_print_using:
	tsx7	0|mat_print_using_numeric
	tsx7	0|mat_print_using_string
"
mat_read:
	tsx7	0|mat_numeric_read_op
	tsx7	0|mat_string_read_op
"
mat_write:
	tsx7	0|mat_numeric_write_op
	tsx7	0|mat_string_write_op
"
matrix_add_sub:
	tsx7	0|mat_add
	tsx7	0|mat_sub
"
matrix_assign_numeric:
	tsx7	0|mat_assign_numeric
"
matrix_assign_string:
	tsx7	0|mat_assign_string
"
matrix_mult:
	tsx7	0|mat_mult_vm
	tsx7	0|mat_mult_mv
	tsx7	0|mat_mult_mm
"
matrix_scalar_mult:
	tsx7	0|mat_scalar_mult
"
multiply:	fmp	0
"
on:	tsx7	ap|on_op
"
on_gosub:	tsx7	ap|on_gosub_op
"
power:	tsx7	ap|pwr_fun
"
power_inverse:
	tsx7	0|pwri_fun
"
print:	tsx7	ap|numeric_print_op
	tsx7	0|string_print_op
"
print_new_line:
	tsx7	0|print_new_line_op
"
print_using:
	tsx7	0|print_using_numeric_op
	tsx7	0|print_using_string_op
"
print_using_start:
	tsx7	0|print_using_start_op
"
print_using_end:
	tsx7	0|print_using_end_op
"
randomize:
	tsx7	0|randomize_fun
"
read:	tsx7	ap|numeric_read_op
	tsx7	0|string_read_op
"
redimension:
	tsx7	0|list_redim_op
	tsx7	0|table_redim_op
	tsx7	0|inv_table_redim_op
"
reset_ascii:
	tsx7	0|reset_ascii_op
"
reset_data:
	tsx7	0|reset_op
"
reset_random:
	tsx7	0|reset_random_op
"
return:	tsx7	ap|return_op
"
save_fcb_pt:
	sprpbp	0
"
scratch:	tsx7	ap|scratch_op
"
setdigits:
	tsx7	0|setdigits_op
"
stop:	tsx7	ap|stop_op
"
store:	fst	0		numeric
	spriab	0		string
	spribp	0		addressing
"
string_assign:
	eppbb	0
	tsx7	0|string_assign_op
"
string_compare:
	eppbb	0
	tsx7	0|string_compare_op
"
string_concatenate:
	eppbb	0
	tsx7	0|string_concatenate_op
"
subend:	tsx7	ap|subend_op
"
subprogram_call:
	tsx7	0|sub_call_op
"
subscript:
	tsx7	0|list_sub_op
	tsx7	0|table_sub_op
	tsx7	0|inv_table_sub_op
"
subtract:	fsb	0
"
tab_for_comma:
	tsx7	0|tab_for_comma_op
"
tmi:	tmi	0
"
tnz:	tnz	0
"
tpl:	tpl	0
"
tpnz:	tpnz	0
"
tra:	tra	0
"
tze:	tze	0
"
use_fcb:	tsx7	ap|use_fcb_op
"
use_file:	tsx7	ap|setup_fcb_op
"
use_tty:	tsx7	ap|use_tty_op
"
write:	tsx7	ap|numeric_write_op
	tsx7	0|string_write_op
"
d_add:	dfad	0
"
d_change:	tsx7	ap|change_from_string
	tsx7	ap|change_to_string
"
d_check_eof:
	tsx7	ap|check_eof_op
"
d_compare:
	dfcmp	0
"
d_data_read:
	tsx7	ap|numeric_data_read
	tsx7	ap|string_data_read
"
d_divide:	dfdv	0
"
d_divide_inv:
	dfdi	0
"
d_end_input:
	tsx7	ap|end_input_op
"
d_end_print:
	tsx7	0|end_print_op
"
d_enter_main:
	tsp2	2|0,*
"
d_enter_proc:
	tsp2	2|2,*
"
d_error:	tsx7	ap|error_in_statement
	tsx7	ap|missing_line
	tsx7	ap|unclosed_for
	tsx7	ap|undefined_function
"
d_file:	tsx7	ap|file_fun
"
d_fneg:	fneg	0
"
d_fszn:	fszn	0
"
d_function_arg:
	epp2	0
	sprp2	0
	sprp6	0
	ldaq	0
	staq	0
"
d_function_call:
	epp3	0
	tsx7	0|fun_call_op
	tsx7	0|global_fun_call_op
"
d_function_return:
	epp3	0
	tsx7	0|fun_return_op
"
d_get_fcb_pt:
	lprp2	0
"
d_gosub:	tsx7	ap|gosub_op
"
d_inner_product:
	tsx7	0|dot_product
"
d_input:	tsx7	ap|numeric_input_op
	tsx7	ap|string_input_op
"
d_linput:	zero
	tsx7	0|linput_op
"
d_load:	dfld	0		numeric
	epp1	0
	epp2	0
	epp3	0
	ldq	0,dl
"
d_margin:	tsx7	ap|margin_op
"
d_mat_data_read:
	tsx7	0|mat_numeric_data_read
	tsx7	0|mat_string_data_read
"
d_mat_input:
	tsx7	0|mat_numeric_input_op
	tsx7	0|mat_string_input_op
"
d_mat_linput:
	zero
	tsx7	0|mat_linput_op
"
d_mat_print:
	tsx7	0|mat_numeric_print_op
	tsx7	0|mat_string_print_op
"
d_mat_print_using:
	tsx7	0|mat_print_using_numeric
	tsx7	0|mat_print_using_string
"
d_mat_read:
	tsx7	0|mat_numeric_read_op
	tsx7	0|mat_string_read_op
"
d_mat_write:
	tsx7	0|mat_numeric_write_op
	tsx7	0|mat_string_write_op
"
d_matrix_add_sub:
	tsx7	0|mat_add
	tsx7	0|mat_sub
"
d_matrix_assign_numeric:
	tsx7	0|mat_assign_numeric
"
d_matrix_assign_string:
	tsx7	0|mat_assign_string
"
d_matrix_mult:
	tsx7	0|mat_mult_vm
	tsx7	0|mat_mult_mv
	tsx7	0|mat_mult_mm
"
d_matrix_scalar_mult:
	tsx7	0|mat_scalar_mult
"
d_multiply:
	dfmp	0
"
d_on:	tsx7	ap|on_op
"
d_on_gosub:
	tsx7	ap|on_gosub_op
"
d_power:	tsx7	ap|pwr_fun
"
d_power_inverse:
	tsx7	0|pwri_fun
"
d_print:	tsx7	ap|numeric_print_op
	tsx7	0|string_print_op
"
d_print_new_line:
	tsx7	0|print_new_line_op
"
d_print_using:
	tsx7	0|print_using_numeric_op
	tsx7	0|print_using_string_op
"
d_print_using_start:
	tsx7	0|print_using_start_op
"
d_print_using_end:
	tsx7	0|print_using_end_op
"
d_randomize:
	tsx7	0|randomize_fun
"
d_read:	tsx7	ap|numeric_read_op
	tsx7	0|string_read_op
"
d_redimension:
	tsx7	0|list_redim_op
	tsx7	0|table_redim_op
	tsx7	0|inv_table_redim_op
"
d_reset_ascii:
	tsx7	0|reset_ascii_op
"
d_reset_data:
	tsx7	0|reset_op
"
d_reset_random:
	tsx7	0|reset_random_op
"
d_return:	tsx7	ap|return_op
"
d_save_fcb_pt:
	sprpbp	0
"
d_scratch:
	tsx7	ap|scratch_op
"
d_setdigits:
	tsx7	0|setdigits_op
"
d_stop:	tsx7	ap|stop_op
"
d_store:	dfst	0		numeric
	spriab	0
	spribp	0
"
d_string_assign:
	eppbb	0
	tsx7	0|string_assign_op
"
d_string_compare:
	eppbb	0
	tsx7	0|string_compare_op
"
d_string_concatenate:
	eppbb	0
	tsx7	0|string_concatenate_op
"
d_subend:	tsx7	ap|subend_op
"
d_subprogram_call:
	tsx7	0|sub_call_op
"
d_subscript:
	tsx7	0|list_sub_op
	tsx7	0|table_sub_op
	tsx7	0|inv_table_sub_op
"
d_subtract:
	dfsb	0
"
d_tab_for_comma:
	tsx7	0|tab_for_comma_op
"
d_tmi:	tmi	0
"
d_tnz:	tnz	0
"
d_tpl:	tpl	0
"
d_tpnz:	tpnz	0
"
d_tra:	tra	0
"
d_tze:	tze	0
"
d_use_fcb:
	tsx7	ap|use_fcb_op
"
d_use_file:
	tsx7	ap|setup_fcb_op
"
d_use_tty:
	tsx7	ap|use_tty_op
"
d_write:	tsx7	ap|numeric_write_op
	tsx7	0|string_write_op
"
	use	internal_static
	join	/static/internal_static
	segdef	precision_length
precision_length:
	dec	1
"
	end
