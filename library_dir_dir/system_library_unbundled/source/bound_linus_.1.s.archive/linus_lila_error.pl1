/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

linus_lila_error:
     proc (lcb_ptr, lsh_ptr, code, message);

/* DESCRIPTION:

   This procedure prints an error diagnostic and signals the linus_lila_error_
   condition, allowing linus_lila_translate to cleanup and terminate.  
   
   

   HISTORY:

   77-07-01 J. A. Weeldreyer: Initially written.
   
*/

%include linus_lcb;
%page;
%include linus_ls_header;
%page;
%include linus_source;

	dcl     (code, sbeg, slen)	 fixed bin (35);
	dcl     lno		 fixed bin;
	dcl     message		 char (*);
	dcl     shorti		 char (8) aligned;
	dcl     msg		 char (100) aligned;

	dcl     iox_$error_output	 ptr ext;
	dcl     sys_info$max_seg_size	 fixed bin (35) ext;

	dcl     substr		 builtin;

	dcl     linus_lila_error_	 condition;

	dcl     convert_status_code_
				 entry (fixed bin (35), char (8) aligned, char (100) aligned);
	dcl     ioa_$ioa_switch	 entry options (variable);

	ls_header.trans_failed = "1"b;		/* if we ever handle more than 1 error */

	do lno = 1 to lcb.lila_count - 1
	     while (ls_header.cur_pos > ls_header.line_data.last_char (lno));
	end;					/* determine line number of error line */
	sbeg = ls_header.line_data.last_char (lno - 1) + 1;
	slen =
	     ls_header.line_data.last_char (lno)
	     - ls_header.line_data.last_char (lno - 1);

	call convert_status_code_ (code, shorti, msg);

	call
	     ioa_$ioa_switch (iox_$error_output, "^/ERROR IN LINE ^a.^/^a^/^a^/^a",
	     ls_header.line_data.lno (lno), msg, message,
	     substr (source_str, sbeg, slen));

	signal linus_lila_error_;
	return;

     end linus_lila_error;
