/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

linus_query:
	proc (lcb_ptr_parm, answer_parm, question_parm);
	
/*
     
     This module provides an interface to the command_query subroutine
     It handles most of the setup work for its callers. The following external
     entry points are available:

     linus_query - general question and answer entry
     linus_query$yes_no - allows only a yes or no response
*/
%page;
/*

     Known Bugs:

     Other Problems:

     History:

     Written - 82/01/10 - Dave Schimke


*/
%page;
	dcl answer_parm char(*) var parm;		/* output: user's response */
          dcl lcb_ptr_parm ptr parm;			/* input: ptr to linus control block */
	dcl question_parm char(*) var parm;		/* input: prompt */
	dcl yes_no_parm bit (1) aligned parm;		/* output: yes or no flag */
	
/* This entry is the basic question/answer mode. */

	answer_parm = "";
	lcb_ptr = lcb_ptr_parm;
	question = question_parm;
	
	query_information.switches.yes_or_no_sw = "0"b;
	call query;
	answer_parm = answer;
	return;

yes_no:	entry (lcb_ptr_parm, yes_no_parm, question_parm);

/* This entrypoint accepts only a yes or no response and returns a flag
   (yes_no_parm) where "1"b equals yes and "0"b equals no. */

	yes_no_parm = "0"b;
	lcb_ptr = lcb_ptr_parm;
	question = question_parm;

	query_information.switches.yes_or_no_sw = "1"b;
	call query;

	if substr (answer, 1, 1) = "y"
	     then yes_no_parm = "1"b;

	return;

query:	proc;
	query_information.version = query_info_version_5;
	query_information.switches.suppress_name_sw = "1"b;
	query_information.switches.cp_escape_control = "00"b;
	query_information.switches.suppress_spacing = "1"b;
	query_information.switches.padding = "0"b;
	query_information.status_code = 0;
	query_information.query_code = 0;
	query_information.question_iocbp = iox_$user_output;
	query_information.answer_iocbp = iox_$user_input;
	query_information.repeat_time = 0;
	query_information.explanation_ptr = null();
	query_information.explanation_len = 0;

/************************************************************************/
/* Code added to insure upward compatibility with pre_ssu_linus invoke. */
/* This can be removed if and when invoke is completely removed.        */

/* If attached though invoke then get input from terminal regardless.   */
	if lcb.is_ptr ^= iox_$user_input
	     then query_information.answer_iocbp = iox_$user_io;
/*                                                                      */
/************************************************************************/

	
call command_query_ (addr(query_information), answer, "linus_query", (question));

return;
end;
%page;
%include iocb;
%page;
%include linus_lcb;
%page;
%include query_info;

/* Automatic */
dcl answer char(linus_data_$buff_len) varying;
dcl 1 query_information like query_info;
dcl question char(linus_data_$buff_len) varying;

/* Builtin */
dcl (addr, fixed, null, rel, substr) builtin;

/* Static */
dcl iox_$user_input ptr ext static;
dcl iox_$user_io ptr ext static;
dcl iox_$user_output ptr ext static;
dcl linus_data_$buff_len fixed bin(35) ext static;
dcl sys_info$max_seg_size fixed bin(35) ext static;

/* Entries */
dcl command_query_ entry() options(variable);

end linus_query;


	
	
