/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-01-13,Dupuis), approve(86-05-23,MCR7404), audit(86-07-23,GWMay),
     install(86-07-29,MR12.0-1106):
     85-04-24 Al Dupuis: To correct a subscriptrange when expressions like
     "select a+b from temporary_relation" were being processed.
  2) change(90-04-23,Leskiw), approve(90-10-05,MCR8202),
     audit(90-10-11,Bubric), install(90-10-14,MR12.4-1039):
     Changed calls to assign_round_ from assign_ so that data is rounded.
                                                   END HISTORY COMMENTS */


linus_lila_build_expr_tab:
     proc (lcb_ptr, lsh_ptr, td_ptr, ed_ptr, code);

/* DESCRIPTION:

   This  procedure  is an Operator Precedence parser that is used by the select
   clause translator.



   HISTORY:

   77-08-01 J. C. C. Jagernauth: Initially written.

   78-04-01  J.   C.   C.   Jagernauth: Modified to update ls_set when new mrds
   items are encountered and eliminate the internal procedure "set_table_name".

   78-06-01  J.   C.  C.  Jagernauth: Modified to verify that expressions begin
   with column specifications.

   78-08-01 J. A. Weeldreyer: Modified to conform to new token data.

   79-02-01  J.   C.   C.   Jagernauth:  Modified to access version 4 resultant
   information.

   80-01-08  Rickie  E.   Brinegar:  Modified  to  pass  linus_lila_alloc_lit a
   descriptor  pointer  instead of an assign_ descriptor type and eliminate the
   assign_ length parameter.

   80-04-13  Rickie  E.   Brinegar:  Modified  to  use  a  work area defined on
   lcb.lila_area_ptr instead of getting system free area.

   80-09-16  Rickie  E.   Brinegar:  modified to use linus_rel_array instead of
   making calls to dsl_$get_rslt_info.

   81-02-03 Rickie E.  Brinegar: The rel builtin was added to the declarations.
   Changed to use the modified linus_rel_array structure.

   81-06-19 Rickie E. Brinegar: Removed calls to dsl_$get_(temp rslt)_desc.

   81-07-13 Rickie E.  Brinegar: Removed trapping of the conversion condition.
   This is now relegated to higher level routines.
   
   81-09-17  Rickie  E.   Brinegar: Moved the incrementing of stack.nargs from
   shift_function  to  both  shift_setf  and shift_sclf to eliminate subscript
   range conditions.
   
   81-11-06  Rickie  E.   Brinegar: Removed mdbm_util_$number_data_class as it
   was  only  being  used  in  conjunction with mdbm_util_$complex_data_class,
   which  makes  all  of  the  necessary  determinations  without  the need of
   checking  to  see  if  it  is  in  the number data class.  Added the unspec
   builtin to intialize the ef_data structure.

   82-02-09 Bertley G. Moberg: To allow expressions as the last element in
   a scalar function argument list


   ********* COMMENTS ABOUT CODE TO BE DELETED *********

   The code marked for deletion was inserted
   to make sure that all expressions begin with a column specification

   ********* END DELETED CODE COMMENTS ********* 
*/

%include linus_lcb;
%page;
%include linus_expression;
%page;
%include linus_ef_data;
%page;
%include linus_ls_block;
%page;
%include linus_ls_header;
%page;
%include linus_ls_set;
%page;
%include linus_rel_array;
%page;
%include linus_token_data;
%page;
%include linus_variables;
%page;
%include mrds_rslt_info;


	dcl     expr_type		 (11) fixed bin (4) unal int static options (constant) init (
				 /* Map token key to type or op_code */
				 0, 6,		/* Data base item */
				 2,		/* linus variable */
				 1,		/* constant */
				 4,		/* set function */
				 3,		/* scalar function */
				 0, 3,		/* multiply */
				 4,		/* divide */
				 1,		/* add */
				 2);		/* subtract */

	dcl     CHAR_DESC		 bit (36) aligned;

	dcl     REAL_FD		 bit (36) aligned;

	dcl     CMPX_FD		 bit (36) aligned;

	dcl     FD59		 bit (36) aligned int static options (constant)
				 init ("100101000000000000000000000000111011"b); /* Float decimal */

	dcl     CFD59		 bit (36) aligned int static options (constant)
				 init ("100110000000000000000000000000111011"b); /* Complex float decimal */

	dcl     (
	        EXPR_SET_FN		 init (4),
	        OPERATOR		 init (15),
	        EXPR_SCAL_FN	 init (3)
	        )			 fixed bin (4) int static options (constant);

	dcl     prec_relations	 (0:11, 0:11) fixed bin (4) int static
				 options (constant) init (/*
						   1 = reduce_op [( .> )  E op_code E ]
						   2 = reduce_paren [( .= )  (E)]
						   3 = shift_token [( <. )]
						   4 = end of expression [variable followed by variable]
						   5 = reduce_var [reduce to E]
						   6 = call set func. then shift_setf
						   7 = call scalar func. then shift_sclf
						   no need to push expression stack.
						   8 = error [LP followed by invalid token]
						   9 = make sure the first token shifted is not an operator or RP
						   10 = make sure you are not reducing E + ""
						   11 = end of expression

						   the generic term "variable" is used to represent
						   one of the following:
						   column specification
						   linus variable
						   constant
						   set function result
						   scalar function result

						   ROW and COLUMN names correspond in the table below */
        11, 11, (3) 3, 6, 7, 3, (4) 9,			/* NULL     11 11 3 3 3 6 7 3 9 9 9 9  */
				 (12) 2,		/* RP        2 2 2 2 2 2 2 2 2 2 2 2  */
				 (5) ((2) 5, (6) 4, (4) 5), /* COL_SPEC  5 5 4 4 4 4 4 4 5 5 5 5  */
						/* LINUS_VAR 5 5 4 4 4 4 4 4 5 5 5 5  */
						/* CONST     5 5 4 4 4 4 4 4 5 5 5 5  */
						/* SET_FN    5 5 4 4 4 4 4 4 5 5 5 5  */
						/* SCAL_FN   5 5 4 4 4 4 4 4 5 5 5 5  */
				 8, 9, (3) 3, 6, 7, 3, (4) 9, /* LP        8 9 3 3 3 6 7 3 9 9 9 9  */
				 (2) (10, 1, (3) 3, 6, 7, 3, (4) 1), /* STAR     10 1 3 3 3 6 7 3 1 1 1 1  */
						/* DIV      10 1 3 3 3 6 7 3 1 1 1 1  */
				 (2) (10, 1, (3) 3, 6, 7, (3) 3, (2) 1)); /* PLUS     10 1 3 3 3 6 7 3 3 3 1 1  */
						/* MINUS    10 1 3 3 3 6 7 3 3 3 1 1  */

	dcl     1 arg_len_bits	 based,
		2 pad		 bit (12) unal,
		2 length		 bit (24) unal;	/* arg_len for system standard argument list */

	dcl     1 stack		 aligned based (sk_ptr),
		2 nargs		 fixed bin,
		2 token_data	 (linus_data_$stk_depth refer (stack.nargs)),
		  3 key		 fixed bin (17) unal,
		  3 must_free	 bit (1) unal,
		  3 reduced	 bit (1) unal,	/* On if item has been reduced */
		  3 reserved	 bit (16) unal,
		  3 length	 fixed bin (35),
		  3 t_ptr		 ptr,
		  3 desc		 bit (36),
		  3 bit_length	 fixed bin (35),
		  3 assn_ptr	 ptr,
		  3 assn_type	 fixed bin,
		  3 assn_len	 fixed bin (35),
		  3 fn_ptr	 ptr,		/* Pointer to function structure */
		  3 type		 fixed bin (4) unal,
		  3 op_code	 fixed bin (3) unal;

	dcl     token_item		 char (token_data.length) based (token_data.t_ptr);
						/* For shifting */

	dcl     (i, j, source_type, target_type, temp_token_key, temp_stack_key, tos_key)
				 fixed bin;	/* Points to first terminal on top of the work stack */

	dcl     (bit_len, code, cs_len, icode, source_length, target_length) fixed
				 bin (35);

	dcl     constant_string	 char (cs_len) based (cs_ptr);

	dcl     (
	        test,				/* ********* BEGIN DELETE ********* */
	        first_token,			/* ********* END DELETE ********* */
	        cmpx
	        )			 bit (1);


	dcl     (addr, bit, fixed, null, rel, search, substr, unspec) builtin;

	dcl     (
	        cs_ptr		 init (null),
	        lit_ptr		 init (null),
	        sk_ptr		 init (null)
	        )			 ptr;

	dcl     1 ef_d		 like ef_data;

	dcl     (
	        linus_data_$max_expr_items,
	        linus_data_$max_pred_stack_size,
	        linus_data_$max_range_items,
	        linus_data_$max_set_stack_size,
	        linus_data_$stk_depth,
	        linus_error_$expr_ovfl,
	        linus_error_$first_expr_item,
	        linus_error_$inv_expr,
	        linus_error_$inv_tup_var,
	        linus_error_$op_follow_lp,
	        linus_error_$select_list_ovfl,
	        linus_error_$token_type_null,
	        mrds_data_$max_token_size,
	        mrds_data_$max_select_items,
	        sys_info$max_seg_size
	        )			 fixed bin (35) ext;

	dcl     assign_round_
				 entry (ptr, fixed bin, fixed bin (35), ptr, fixed bin, fixed bin (35));
	dcl     linus_assign_data	 entry (bit (36), fixed bin, fixed bin (35));
	dcl     linus_lila_alloc_lit	 entry (ptr, ptr, ptr, fixed bin (35));
	dcl     linus_lila_error	 entry (ptr, ptr, fixed bin (35), char (*));
	dcl     linus_lila_get_token	 entry (ptr, ptr, fixed bin (35), ptr, fixed bin (35));
	dcl     linus_lila_scal_fn	 entry (ptr, ptr, ptr, ptr, fixed bin (35));
	dcl     linus_lila_set_fn	 entry (ptr, ptr, ptr, ptr, fixed bin (35));
	dcl     mdbm_util_$complex_data_class entry (ptr) returns (bit (1));

	dcl     work_area		 area (sys_info$max_seg_size) based (lcb.lila_area_ptr);

	sk_ptr, ex_ptr, cs_ptr, rslt_ptr = null;

	linus_rel_array_ptr = lcb.rel_array_ptr;

	unspec (ef_d) = "0"b;

	CHAR_DESC = "101010100000000000000000000000000000"b;
	REAL_FD = "100101000000000000000000000000000000"b;
	CMPX_FD = "100110000000000000000000000000000000"b;
	nelems_init = linus_data_$stk_depth;		/* For expression structure allocation */
	ef_data.nmrds_items, icode, code, tos_key = 0;	/* Top of stack item that is not reduced */
	ef_data.var_name = "";
	cmpx, test = "0"b;
	first_token = "1"b;
	lv_ptr = lcb.lv_ptr;			/* Init linus_variables */
	allocate stack in (work_area);
	unspec (stack) = "0"b;
	stack.nargs = 0;				/* Work stack is empty */
	allocate expression in (work_area);
	unspec (expression) = "0"b;
	expression.nelems = 0;			/* Expression stack is empty */
	lsb_ptr = ls_header.cur_ptr;
	lss_ptr = ls_block.back_ptr;

/* ********* BEGIN DELETE ********* */

	if token_data.key > RP & token_data.key < SET_FN then do;
		first_token = "0"b;			/* we have the first token */
		if token_data.key ^= COL_SPEC then /* first token of expression must be column spec */
		     call error (linus_error_$first_expr_item, "");
	     end;

/* ********* END DELETE ********* */

	do while (^test);				/* MAIN LOOP */
	     if token_data.key > MINUS then
		temp_token_key = NULL;		/* invalid token */
	     else temp_token_key = token_data.key;	/* good token */
	     if tos_key = 0 then
		temp_stack_key = 0;
	     else temp_stack_key = stack.token_data.key (tos_key);
						/* take key off stack */

	     go to case (prec_relations (temp_stack_key, temp_token_key));

case (1):
	     call reduce_op;			/* E op E is on work stack */
	     go to end_case;

case (2):
	     call reduce_paren;			/* (E) is on work stack */
	     go to end_case;


case (3):
	     call shift_token;			/* place token on work stack */
	     call get_token;
	     go to end_case;

case (4):
	     call reduce_var;			/* end of expression -- variable followed by variable */
	     if tos_key > 1 then
		call reduce_op;			/* After this call only E should be on work stack */
	     test = "1"b;				/* Exit */
	     go to end_case;

case (5):
	     call reduce_var;			/* place variable on expression  stack */
	     go to end_case;

case (6):
	     call linus_lila_set_fn (lcb_ptr, lsh_ptr, td_ptr, addr (ef_d), icode);
						/* build set function table */
	     call update_efdata;
	     call shift_setf;			/* Push set function result on work stack */
	     call get_token;
	     go to end_case;

case (7):
	     call linus_lila_scal_fn (lcb_ptr, lsh_ptr, td_ptr, addr (ef_d), icode);
						/* build scalar function table */
	     call update_efdata;
	     call shift_sclf;			/* Push scalar function result on work stack */
	     call get_token;
	     go to end_case;

case (8):
	     call error (linus_error_$inv_expr, "");	/* LP followed by invalid token */
	     go to end_case;

case (9):
	     if tos_key = stack.nargs then /* make sure the first token shifted is not an operator or RP */
		call error (linus_error_$op_follow_lp, "");
	     else do;
		     call shift_token;		/* then place token on work stack */
		     call get_token;
		end;
	     go to end_case;

case (10):
	     if tos_key = stack.nargs then /* make sure you are not reducing E + "" */
		call error (linus_error_$inv_expr, "");
	     else call reduce_op;			/* E op E is on work stack */
	     go to end_case;

case (11):
	     test = "1"b;				/* end of expression */

end_case:
	end;					/* END MAIN LOOP */

	if ^(stack.nargs = 1 & stack.token_data.reduced (1)) then
	     /*
						   Make sure expression was good */
	     call error (linus_error_$inv_expr, "");

	if expression.nelems = 1 then
	     expression.rslt_desc = expression.elem.desc (1); /* only one item in expression */
	else if cmpx then
	     expression.rslt_desc = CFD59;		/* Init to complex float decimal 59 */
	else expression.rslt_desc = FD59;		/* Init to float decimal 59 */

	ef_data.ef_ptr = ex_ptr;			/* pass pointer to expression structure */
	ef_data.desc = expression.rslt_desc;		/* pass expression info in ef_data structure */
	call
	     linus_assign_data ((ef_data.desc), ef_data.assn_type, ef_data.assn_len)
	     ;
	call
	     linus_lila_alloc_lit (lcb_ptr, addr (ef_data.desc), ef_data.assn_ptr,
	     ef_data.bit_length);
	sk_ptr = null;
	rslt_ptr = null;



get_token:
     proc;

	call
	     linus_lila_get_token (lcb_ptr, lsh_ptr, ls_header.cur_pos, td_ptr,
	     icode);
	if token_data.key = NULL then
	     call error (linus_error_$token_type_null, "");

/* ********* BEGIN DELETE ********* */

	if first_token then /* is this first data token ? */
	     if token_data.key > RP & token_data.key < SET_FN then do;
		     first_token = "0"b;
		     if token_data.key ^= COL_SPEC then
			call error (linus_error_$first_expr_item, "");
		end;

/* ********* END DELETE ********* */

	if icode ^= 0 then
	     call error (icode, "");

     end get_token;

update_efdata:
     proc;


	if ef_d.var_name ^= "" then do;
		if ef_data.var_name = "" then
		     ef_data.var_name = ef_d.var_name;
		if ef_data.var_name ^= ef_d.var_name then
		     call error (linus_error_$inv_tup_var, "");
	     end;
	ef_data.bit_length = ef_d.bit_length;
	ef_data.desc = ef_d.desc;
	ef_data.assn_ptr = ef_d.assn_ptr;
	ef_data.assn_type = ef_d.assn_type;
	ef_data.assn_len = ef_d.assn_len;
	ef_data.ef_ptr = ef_d.ef_ptr;
	if ef_data.nmrds_items >= linus_data_$max_expr_items then
	     call error (linus_error_$expr_ovfl, "");
	if ef_d.nmrds_items ^= 0 then
	     do i = 1 to ef_d.nmrds_items;
		ef_data.nmrds_items = ef_data.nmrds_items + 1;
		ef_data.mrds_items.attr_name (ef_data.nmrds_items) =
		     ef_d.mrds_items.attr_name (i);
		ef_data.mrds_items.domain_name (ef_data.nmrds_items) =
		     ef_d.mrds_items.domain_name (i);
		ef_data.mrds_items.bit_length (ef_data.nmrds_items) =
		     ef_d.mrds_items.bit_length (i);
		ef_data.mrds_items.desc (ef_data.nmrds_items) =
		     ef_d.mrds_items.desc (i);
		ef_data.mrds_items.assn_ptr (ef_data.nmrds_items) =
		     ef_d.mrds_items.assn_ptr (i);
		ef_data.mrds_items.assn_type (ef_data.nmrds_items) =
		     ef_d.mrds_items.assn_type (i);
		ef_data.mrds_items.assn_len (ef_data.nmrds_items) =
		     ef_d.mrds_items.assn_len (i);
	     end;

     end update_efdata;

shift_token:
     proc;					/* Push token data onto work stack */
	stack.nargs = stack.nargs + 1;		/* push work stack */
	tos_key = stack.nargs;			/* set top of stack index */
	stack.token_data.fn_ptr (stack.nargs) = null;
	stack.token_data.reduced (stack.nargs) = "0"b;
	if token_data.key > LP then do;		/* Item is an operator */
		stack.token_data.type (stack.nargs) = OPERATOR;
		stack.token_data.op_code (stack.nargs) = expr_type (token_data.key);
	     end;
	else do;					/* item is not an operator */
		stack.token_data.op_code (stack.nargs) = NULL;
		stack.token_data.type (stack.nargs) = expr_type (token_data.key);
	     end;
	if token_data.key = LINUS_VAR then
	     call shift_linus_var;
	else if token_data.key = CONST then
	     call shift_const;
	else if token_data.key = COL_SPEC then
	     call shift_col_spec;
	call shift_comm;
     end shift_token;

shift_sclf:
     proc;					/* push scalar function data onto work stack */

	token_data.key = 6;				/* reset key */
	stack.nargs = stack.nargs + 1;
	stack.token_data.type (stack.nargs) = EXPR_SCAL_FN; /* type is known */
	stack.token_data.fn_ptr (stack.nargs) = ef_data.ef_ptr;
	call shift_function;
     end shift_sclf;

shift_setf:
     proc;					/* push set function data onto work stack */

	token_data.key = 5;				/* reset key */
	stack.nargs = stack.nargs + 1;
	stack.token_data.type (stack.nargs) = EXPR_SET_FN;
	stack.token_data.fn_ptr (stack.nargs) = ef_data.ef_ptr;
	call shift_function;
     end shift_setf;

reduce_op:
     proc;					/* E op_code E is on top of the work stack */
	call push_expression;
	tos_key = tos_key - 2;
	stack.nargs = stack.nargs - 2;		/* point to E */
     end reduce_op;

reduce_paren:
     proc;					/* (E) is on top of the work stack */
	stack.token_data.reduced (tos_key),
	     stack.token_data.reduced (tos_key - 2) = "1"b; /* pushed */
	tos_key = tos_key - 3;
	stack.nargs = stack.nargs - 2;
     end reduce_paren;

reduce_var:
     proc;					/* a variable is on the work stack */
	call push_expression;			/* place variable on expression stack */
	tos_key = tos_key - 1;
     end reduce_var;

push_expression:
     proc;					/* Data is removed from the work stack and pushed onto the expression stack */
	stack.token_data.reduced (tos_key) = "1"b;	/* Set flag to indicate that item was pushed */
	expression.nelems = expression.nelems + 1;	/* Point to new top of stack */
	expression.elem.type (expression.nelems) =
	     stack.token_data.type (tos_key);		/* Push data */
	expression.elem.op_code (expression.nelems) =
	     stack.token_data.op_code (tos_key);
	if expression.elem.type (expression.nelems) ^= OPERATOR then do;
		expression.elem.desc (expression.nelems) =
		     stack.token_data.desc (tos_key);
		expression.elem.bit_length (expression.nelems) =
		     stack.token_data.bit_length (tos_key);
		expression.elem.assn_ptr (expression.nelems) =
		     stack.token_data.assn_ptr (tos_key);
		expression.elem.assn_type (expression.nelems) =
		     stack.token_data.assn_type (tos_key);
		expression.elem.assn_len (expression.nelems) =
		     stack.token_data.assn_len (tos_key);
		expression.elem.fn_ptr (expression.nelems) =
		     stack.token_data.fn_ptr (tos_key);
	     end;

	if stack.token_data.must_free (tos_key) then
	     stack.token_data.t_ptr = null;
	if mdbm_util_$complex_data_class (
	     addr (expression.elem.desc (expression.nelems))) then
	     cmpx = "1"b;
     end push_expression;

shift_function:
     proc;					/* push token data onto work stack */
	tos_key = stack.nargs;
	stack.token_data.op_code (stack.nargs) = NULL;
	stack.token_data.reduced (stack.nargs) = "0"b;
	call
	     shift_common (ef_data.desc, ef_data.bit_length, ef_data.assn_ptr,
	     ef_data.assn_type, ef_data.assn_len);
     end shift_function;

shift_common:
     proc (desc, bit_length, assn_ptr, assn_type, assn_len);
	dcl     desc		 bit (36) aligned;
	dcl     (bit_length, assn_len) fixed bin (35);
	dcl     assn_ptr		 ptr;
	dcl     assn_type		 fixed bin;
	stack.token_data.desc (stack.nargs) = desc;
	stack.token_data.bit_length (stack.nargs) = bit_length;
	stack.token_data.assn_ptr (stack.nargs) = assn_ptr;
	stack.token_data.assn_type (stack.nargs) = assn_type;
	stack.token_data.assn_len (stack.nargs) = assn_len;
	call shift_comm;
     end shift_common;

shift_comm:
     proc;
	stack.token_data.key (stack.nargs) = token_data.key;
	stack.token_data.must_free (stack.nargs) = token_data.must_free;
	stack.token_data.length (stack.nargs) = token_data.length;
	stack.token_data.t_ptr (stack.nargs) = token_data.t_ptr;
     end shift_comm;

shift_linus_var:
     proc;

	do i = 1 to variables.nvars
	     while (variables.var_info.name (i) ^= token_item);
	end;					/* find linus variable */
	call
	     shift_common (variables.var_info.desc (i),
	     variables.var_info.bit_len (i), variables.var_info.var_ptr (i),
	     variables.var_info.assn_type (i), variables.var_info.assn_len (i));
     end shift_linus_var;

shift_const:
     proc;

	dcl     1 token_data_temp	 like token_data;

	dcl     first_char		 char (1) based (token_data_temp.t_ptr);
	dcl     offset		 (10) bit (1) based;
	dcl     repl_factor		 char (repl_len) based (repl_ptr);
	dcl     constant_desc	 bit (36);
	dcl     one_repl_ch		 char (1) based (orc_ptr);
	dcl     one_source_ch	 char (1) based (osc_ptr);

	dcl     (
	        ci_ptr		 init (null),
	        repl_ptr		 init (null),
	        orc_ptr		 init (null),
	        osc_ptr		 init (null),
	        source_ptr		 init (null)
	        )			 ptr;

	dcl     k			 fixed bin;


	dcl     repl_flag		 bit (1);

	dcl     (repl_fac, repl_len, ci_len) fixed bin (35);

	dcl     RIGHT_PAREN		 char (1) int static options (constant) init (")");
	dcl     LEFT_PAREN		 char (1) int static options (constant) init ("(");
	dcl     QUOTE		 char (1) int static options (constant) init ("""");
	dcl     BIT_DESC		 bit (36) init ("101001100000000000000000000000000000"b);

	token_data_temp = token_data;
	repl_flag = "0"b;
	source_length = token_data.length;
	source_ptr = token_data.t_ptr;
	if (search (token_item, "i")) > 0 then
	     constant_desc = CMPX_FD;
	else constant_desc = REAL_FD;
	addr (constant_desc) -> arg_len_bits.length =
	     substr (bit (token_data.length), 12, 24);	/* set length of float dec descriptor */
	if first_char = LEFT_PAREN then do;
		repl_flag = "1"b;			/* there is a replication factor */
		repl_ptr, token_data.t_ptr = addr (token_data.t_ptr -> offset (10));
		do j = 2 to token_data.length while (first_char ^= RIGHT_PAREN);
		     token_data.t_ptr = addr (token_data.t_ptr -> offset (10));
		end;
		repl_len = j - 2;
		token_data.length = token_data.length - j;
		token_data.t_ptr = addr (token_data.t_ptr -> offset (10));
		token_data_temp = token_data;
		repl_fac = fixed (repl_factor);
	     end;
	if first_char = QUOTE then do;
		ci_ptr, token_data_temp.t_ptr =
		     addr (token_data_temp.t_ptr -> offset (10));
		do j = 2 to token_data_temp.length while (first_char ^= QUOTE);
		     token_data_temp.t_ptr = addr (token_data_temp.t_ptr -> offset (10));
		end;
		ci_len = token_data_temp.length - 2;
		if j = token_data_temp.length then
		     constant_desc = CHAR_DESC;
		else do;
			ci_len = token_data_temp.length - 1;
			constant_desc = BIT_DESC;
		     end;
		addr (constant_desc) -> arg_len_bits.length =
		     addr (ci_len) -> arg_len_bits.length;
		source_ptr = ci_ptr;
		source_length = ci_len;
		if repl_flag then do;
			source_length, cs_len = repl_fac * ci_len;
			addr (constant_desc) -> arg_len_bits.length =
			     addr (cs_len) -> arg_len_bits.length;
			allocate constant_string in (work_area);
			source_ptr, orc_ptr = cs_ptr;
			do j = 1 to repl_fac;	/* to number of replication factor */
			     osc_ptr = ci_ptr;
			     do k = 1 to ci_len;	/* one for each character in string */
				one_repl_ch = one_source_ch;
				orc_ptr = addr (orc_ptr -> offset (10));
				osc_ptr = addr (osc_ptr -> offset (10));
			     end;
			end;
		     end;
	     end;
	call linus_assign_data (constant_desc, target_type, target_length);
						/* returns type and length */
	call
	     linus_lila_alloc_lit (lcb_ptr, addr (constant_desc), lit_ptr, bit_len);
						/* returns pointer to  literal pool and bit length */
	addr (CHAR_DESC) -> arg_len_bits.length =
	     substr (bit (token_data.length), 12, 24);	/* set length of char descriptor */
	call linus_assign_data ((CHAR_DESC), source_type, source_length);
						/* returns type and length */
	call
	     assign_round_ (lit_ptr, target_type, target_length, source_ptr, source_type,
	     source_length);
	call
	     shift_common ((constant_desc), bit_len, lit_ptr, target_type,
	     target_length);

	if cs_ptr ^= null then do;
		cs_ptr = null;
		cs_ptr = null;
	     end;

     end shift_const;

shift_col_spec:
     proc;

	dcl     (i, j)		 fixed bin;

	dcl     rel_name		 char (32);

	do i = 1 to ls_block.nselects
	     while (token_data.mvar || "." || token_item ^= ls_block.sel_items (i));
	end;					/* check if already selected */
	if ef_data.var_name = " " then
	     ef_data.var_name = token_data.mvar;
	if token_data.mvar ^= ef_data.var_name then
	     call error (linus_error_$inv_tup_var, "");
	if i <= ls_block.nselects then do;
		call
		     shift_common (ls_set.domain_info.desc (i),
		     ls_set.domain_info.bit_length (i), ls_set.domain_info.assn_ptr (i),
		     ls_set.domain_info.assn_type (i), ls_set.domain_info.assn_len (i));
	     end;
	else do;					/* get rel_name from ls_block */
		do i = 1 to ls_block.nritems
		     while (token_data.mvar ^= ls_block.range_items.mrds_var (i));
		end;
		if ls_block.range_items.rel_name (i) = ".V." then
		     rel_name = linus_rel_array.rels.rel_name (ls_block.range_items.rel_index (i));
		else rel_name = ls_block.range_items.rel_name (i);
		do j = 1 to linus_rel_array.num_of_rels
		     while (linus_rel_array.rels.rel_name (j) ^= rel_name);
		end;
		rslt_ptr = linus_rel_array.rels.rslt_info_ptr (j);
		do j = 1 to rslt_info.num_attr
		     while (token_item ^= rslt_info.attr.attr_name (j));
		end;				/* find info for attribute selected */
		call
		     linus_assign_data ((rslt_info.attr.descriptor (j)), source_type,
		     source_length);
		call
		     linus_lila_alloc_lit (lcb_ptr, addr (rslt_info.attr.descriptor (j)),
		     lit_ptr, bit_len);
		call
		     shift_common (rslt_info.attr.descriptor (j), bit_len, lit_ptr,
		     source_type, source_length);

/* pass mrds items data in ef_data and update ls_block & ls_set */

		ef_data.nmrds_items = ef_data.nmrds_items + 1;
		if ls_block.nselects >= mrds_data_$max_select_items then
		     call error (linus_error_$select_list_ovfl, "");
		else do;
			ls_block.nselects = ls_block.nselects + 1;
			ls_block.sel_items (ls_block.nselects) =
			     token_data.mvar || "." || token_item;
		     end;
		ls_set.nselects = ls_set.nselects + 1;
		if ls_set.nselects > mrds_data_$max_select_items then
		     call error (linus_error_$select_list_ovfl, "");
		ef_data.mrds_items.attr_name (ef_data.nmrds_items) = token_item;
		ls_set.domain_info.bit_length (ls_set.nselects),
		     ef_data.mrds_items.bit_length (ef_data.nmrds_items) = bit_len;
		ls_set.domain_info.assn_ptr (ls_set.nselects),
		     ef_data.mrds_items.assn_ptr (ef_data.nmrds_items) = lit_ptr;
		ls_set.domain_info.assn_type (ls_set.nselects),
		     ef_data.mrds_items.assn_type (ef_data.nmrds_items) = source_type;
		ls_set.domain_info.assn_len (ls_set.nselects),
		     ef_data.mrds_items.assn_len (ef_data.nmrds_items) = source_length;
		ls_set.domain_info.desc (ls_set.nselects),
		     ef_data.mrds_items.desc (ef_data.nmrds_items) =
		     rslt_info.attr.descriptor (j);
		ls_set.domain_info.name (ls_set.nselects),
		     ef_data.mrds_items.domain_name (ef_data.nmrds_items) =
		     rslt_info.attr.domain_name (j);
	     end;

     end shift_col_spec;

error:
     proc (err_code, string);

	dcl     err_code		 fixed bin (35);
	dcl     string		 char (*);

	call linus_lila_error (lcb_ptr, lsh_ptr, err_code, string);

     end error;

     end linus_lila_build_expr_tab;
