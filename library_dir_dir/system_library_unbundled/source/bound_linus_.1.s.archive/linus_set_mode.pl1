						/* 
/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

linus_set_mode:
     proc (sci_ptr, lcb_ptr);

/* DESCRIPTION:

   This procedure sets or resets the specified modes.



   HISTORY:

   77-08-01 J. A. Weeldreyer: Initially written.

   80-06-01  Jim Gray : Modified to correct prompt_string declaration to agree
   with it's usage in the command loop.
   
   81-11-12 Rickie E. Brinegar: Added the timing mode.

   81-12-12 Bert G. Moberg: Added print_search_order and no_optimize

   82-02-10 Paul W. Benjamin: ssu_ conversion.  Added iteration mode.

   82-10-27  David J. Schimke:  Modified the way iteration is controled
   to use the new ssu_$set_request_processor_options.  Deleted references
   to the replacement procedures: execute_line, evaluate_active_string, 
   invoke_request and unknown_request which were used to implement the 
   original iteration control under ssu_.
*/

%include linus_lcb;
%page;
%include cp_character_types;
%page;
%include linus_char_argl;
%page;
%include ssu_prompt_modes;
%page;
%include ssu_rp_options;

	dcl     sci_ptr		 ptr;		/* for ssu_ */
	dcl     code		 fixed bin (35);
	dcl     scode		 fixed bin (35);	/* used in calls to ssu_ */
	dcl     i			 fixed bin;
	dcl     arg		 char (char_argl.arg_len (i)) based (char_argl.arg_ptr (i));
          dcl     1 local_rpo            aligned like rp_options;
	dcl     mode_name		 char (32);
	dcl     mode_sw		 bit (1);
	dcl     prompt_string	 char (32) varying based;

	dcl     (
	        linus_error_$bad_mode,
	        linus_error_$long_id,
	        linus_error_$no_input_arg,
	        linus_data_$set_mode_id,
	        sys_info$max_seg_size,
	        linus_error_$too_few_args
	        )			 fixed bin (35) ext;

	dcl     cleanup		 condition;
	dcl     (fixed, rel, addr, null, rank, substr) builtin;

	dcl     linus$post_request_line entry (ptr);
	dcl     linus$pre_request_line entry (ptr);
	dcl     linus_convert_code	 entry (fixed bin (35), fixed bin (35), fixed bin (35));
	dcl     ssu_$abort_line	 entry options (variable);
	dcl     ssu_$arg_count	 entry (ptr, fixed bin);
	dcl     ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21));
	dcl     ssu_$get_request_processor_options 
                                         entry (ptr, char(8), ptr, fixed bin(35));
	dcl     ssu_$set_procedure	 entry (ptr, char (*), entry, fixed bin (35));
	dcl     ssu_$set_prompt	 entry (ptr, char (64) varying);
	dcl     ssu_$set_prompt_mode	 entry (ptr, bit (*));
	dcl     ssu_$set_request_processor_options entry (ptr, ptr, fixed bin(35));

	ca_ptr = null;
	call ssu_$arg_count (sci_ptr, nargs_init);
	if nargs_init = 0 then
	     call error (linus_error_$no_input_arg, "");
	allocate char_argl in (lcb.static_area);
	on cleanup begin;
		if ca_ptr ^= null
		then free char_argl;
	     end;
	do i = 1 to nargs_init;
	     call ssu_$arg_ptr (sci_ptr, i, char_argl.arg.arg_ptr (i), char_argl.arg.arg_len (i));
	end;
	do i = 1 to char_argl.nargs;			/* for each mode specified */
	     if substr (arg, 1, 1) = "^" then do;	/* turning off */
		     mode_sw = "0"b;
		     mode_name = substr (arg, 2);
		end;
	     else do;				/* turning on */
		     mode_sw = "1"b;
		     mode_name = arg;
		end;
	     if mode_name = "prompt"
	     then do;
		     lcb.prompt_flag = mode_sw;
		     if mode_sw
		     then call ssu_$set_prompt_mode (sci_ptr, PROMPT | DONT_PROMPT_AFTER_NULL_LINES | PROMPT_IF_TYPEAHEAD);
		     else call ssu_$set_prompt_mode (sci_ptr, DONT_PROMPT);
		end;
	     else if mode_name = "test" then
		lcb.test_flag = mode_sw;
	     else if mode_name = "pso" | mode_name = "print_search_order" then
		lcb.pso_flag = mode_sw;
	     else if mode_name = "no_ot" | mode_name = "no_optimize" then
		lcb.no_ot_flag = mode_sw;
	     else /* if invalid mode */
		if mode_name = "set_linus_prompt_string" | mode_name = "slups"
	     then do;
		     if i >= char_argl.nargs then
			call
			     error (linus_error_$too_few_args,
			     "set_linus_prompt_string needs a string");
		     i = i + 1;
		     if char_argl.arg_len (i) > 32 then
			call error (linus_error_$long_id, arg);
		     call ssu_$set_prompt (sci_ptr, (arg));
		end;
	     else if mode_name = "set_lila_prompt_string" | mode_name = "slaps"
	     then do;
		     if i >= char_argl.nargs then
			call
			     error (linus_error_$too_few_args,
			     "set_lila_prompt_string needs a string.");
		     i = i + 1;
		     if char_argl.arg_len (i) > 32 then
			call error (linus_error_$long_id, arg);
		     lcb.lila_promp_chars_ptr -> prompt_string = arg;
		end;
	     else if mode_name = "timing"
	     then do;
		     if mode_sw & lcb.timing_mode
		     then ;			/* no change */
		     else if ^mode_sw & ^lcb.timing_mode
		     then ;			/* no change */
		     else if ^mode_sw & lcb.timing_mode
		     then do;			/* turn timing off */
			     call ssu_$set_procedure (sci_ptr, "pre_request_line", lcb.ssu_pre_request_line, scode);
			     if scode ^= 0
			     then call error (scode, "");
			     call ssu_$set_procedure (sci_ptr, "post_request_line", lcb.ssu_post_request_line, scode);
			     if scode ^= 0
			     then call error (scode, "");
			     lcb.timing_mode = mode_sw;
			end;
		     else do;			/* turn timing on */
			     call ssu_$set_procedure (sci_ptr, "pre_request_line", linus$pre_request_line, scode);
			     if scode ^= 0
			     then call error (scode, "");
			     call ssu_$set_procedure (sci_ptr, "post_request_line", linus$post_request_line, scode);
			     if scode ^= 0
			     then call error (scode, "");
			     lcb.timing_mode = mode_sw;
			     lcb.request_time = -1;	/* Don't report timings this time */
			end;
		end;
	     else if mode_name = "iteration"
	     then do;
		     if mode_sw & lcb.iteration
		     then ;			/* no change */
		     else if ^mode_sw & ^lcb.iteration
		     then ;			/* no change */
		     else do;			/* change iteration*/
			call ssu_$get_request_processor_options (sci_ptr, RP_OPTIONS_VERSION_1, addr(local_rpo), scode);
			if scode ^= 0 then call error (scode, "");
			
			if mode_sw & ^lcb.iteration	
			     then local_rpo.language_info.non_standard_language = "0"b;  /* turn iteration on (go back to standard language) */

			else do;			/* turn iteration off */
			     local_rpo.language_info.non_standard_language = "1"b;
			     local_rpo.language_info.character_types (rank ("(")) = NORMAL_CHARACTER;
			     local_rpo.language_info.character_types (rank (")")) = NORMAL_CHARACTER;
			     end;
			call ssu_$set_request_processor_options (sci_ptr, addr(local_rpo), scode);
			if scode ^= 0 then call error (scode, "");	     
			lcb.iteration = mode_sw;
			end;				/* change iteration */
		     end;
	     else call error (linus_error_$bad_mode, arg);
	end;					/* mode loop */

	code = 0;
	if ca_ptr ^= null
	then free char_argl;
	return;

error:
     proc (icode, msg);

/* Error procedure, calls convert_code and print_error and then returns. */

	dcl     (icode, ucode)	 fixed bin (35);
	dcl     msg		 char (*);

	if ca_ptr ^= null
	then free char_argl;
	call linus_convert_code (icode, ucode, linus_data_$set_mode_id);
	call ssu_$abort_line (sci_ptr, ucode, msg);

     end error;

     end linus_set_mode;
