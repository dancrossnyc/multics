/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


linus_abort_line:
     proc () options (variable);

/*
     This module replaces the standard ssu_$abort_line called from
     linus modules. It calls linus_convert_code to change appropriate
     error_codes to more meaningful linus error_codes and then calls 
     ssu_$error_ with the new code. This allows the linus modules 
     to simple call abort_line and any conversion can be done here.
 
     Known Bugs:
 
     Other Problems:
 
     History:

     Written - 08/19/82 - Dave Schimke

*/
%page;
	call cu_$arg_count (arg_count);
	if arg_count = 0 then do;			/* there must be arguments */
RESIGNAL_NULL_POINTER:
	     call sub_err_ (error_table_$null_info_ptr, "linus_abort_line", CANT_RESTART, null (), (0), "sci_ptr");
	     go to RESIGNAL_NULL_POINTER;
	     end;

	call cu_$arg_list_ptr (arg_list_ptr);

/* Get the sci_ptr, first argument */
	call cu_$arg_ptr (1, arg_ptr, (0), (0));

	call decode_descriptor_ (arg_list_ptr, 1, arg_type, arg_packed, arg_ndims, arg_size, arg_scale);

	if (arg_type ^= pointer_dtype) | (arg_packed ^= "0"b) | (arg_ndims ^= 0)
	     then go to RESIGNAL_NULL_POINTER;		/* not a pointer */

	sci_ptr = arg_ptr -> based_pointer;		/* got it */

          lcb_ptr = ssu_$get_info_ptr (sci_ptr);
		
	if arg_count < 2 then			/* no error code given */
	     goto EXIT;

/* Pick up the error code argument */

	call cu_$arg_ptr (2, arg_ptr, (0), (0));
	call decode_descriptor_ (arg_list_ptr, 2, arg_type, arg_packed, arg_ndims, arg_size, arg_scale);

	if (arg_type = real_fix_bin_1_dtype) & (arg_packed = "0"b) then
	     error_code = arg_ptr -> based_fb35;	/* caller's code is a single-word fixed binary value */

	else do;					/* caller's code is something else: try to convert it */
	     if (arg_type >= bit_dtype) & (arg_type <= varying_char_dtype) then
		from_size = arg_size;
	     else from_size = (262144 * arg_scale) + arg_size;
	     to_size = 35;				/* target is fixed binary (35) */
	     call assign_ (arg_ptr, (2 * arg_type + binary (arg_packed, 1)), from_size, addr (error_code),
		(2 * real_fix_bin_1_dtype), to_size);
	end;

/* linus error code conversion */
	if (error_code ^= 0) then do;
	     call linus_convert_code (error_code, user_code, linus_data_$p_id);
	     if error_code ^= user_code		/* need to make new arg_list */
		then do;
                    arg_list_arg_count = arg_count;
		allocate arg_list set (new_arg_list_ptr);
		new_arg_list_ptr -> arg_list = arg_list_ptr -> old_arg_list;
                    new_arg_list_ptr -> arg_list.arg_ptrs(2) = addr(user_code);
		arg_list_ptr = new_arg_list_ptr;
		end;
	     end;

EXIT:	
	call cu_$generate_call (lcb.ssu_abort_line, arg_list_ptr);
	return;

%page;
dcl 1 old_arg_list like arg_list based (arg_list_ptr);
dcl  CANT_RESTART character (1) static options (constant) initial ("s");
dcl  (new_arg_list_ptr, arg_list_ptr, arg_ptr) pointer;
dcl  arg_count fixed binary;

dcl  arg_list_arg_count fixed bin;
dcl  arg_type fixed binary;
dcl  arg_packed bit (1) aligned;
dcl  arg_ndims fixed binary;
dcl  arg_size fixed binary;
dcl  arg_scale fixed binary;

dcl  based_fb35 fixed binary (35) aligned based;
dcl  based_pointer pointer aligned based;

dcl  error_code fixed binary (35);
dcl  (from_size, to_size) fixed bin (35);
dcl  sci_ptr ptr;
dcl  user_code fixed binary (35);

/* Entries */
dcl  assign_ entry (pointer, fixed binary, fixed binary (35), pointer, fixed binary, fixed binary (35));
dcl  cu_$arg_count entry (fixed binary);
dcl  cu_$arg_ptr entry (fixed binary, pointer, fixed binary (21), fixed binary (35));
dcl  cu_$arg_list_ptr entry (pointer);
dcl  cu_$generate_call entry (entry, ptr);
dcl  decode_descriptor_
	entry (pointer, fixed binary, fixed binary, bit (1) aligned, fixed binary, fixed binary, fixed binary);
dcl  error_table_$null_info_ptr fixed bin(35) ext static;
dcl  linus_convert_code entry (fixed bin(35), fixed bin(35), fixed bin(35));
dcl  linus_data_$p_id fixed bin (35);
dcl  ssu_$get_info_ptr entry (ptr) returns(ptr);
dcl  sub_err_ entry() options(variable);
dcl  sys_info$max_seg_size fixed bin(35) ext static;
dcl  (addr, binary, fixed, null, rel) builtin;

/**/
%page;
%include arg_list;
%page;
%include std_descriptor_types;
%page;
%include linus_lcb;

     end linus_abort_line;


