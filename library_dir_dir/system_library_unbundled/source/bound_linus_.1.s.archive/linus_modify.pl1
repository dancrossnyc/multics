/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(90-04-06,Leskiw), approve(90-10-05,MCR8202),
     audit(90-10-11,Bubric), install(90-10-14,MR12.4-1039):
     Changes calls to assign_round_ from assign_ so that rounding is performed
     on input values from user.
                                                   END HISTORY COMMENTS */


linus_modify:
     proc (sci_ptr, lcb_ptr);

/*  DESCRIPTION:

   This  request  modifies selected data in the data base.  Data to be modified
   must be contained within one table, and key columns cannot be modified.



   HISTORY:

   77-05-01 J. C. C. Jagernauth: Initially written.

   78-11-01  J.   C.   C.   Jagernauth: Modified to improve expression parsing.
   This  request  now does all quote stripping and all expressions are required
   to be parenthesized.

   80-02-05  Rickie  E.  Brinegar: Modified to permit null strings as arguments
   for character and varying bit string modifies.

   80-02-06  Rickie  E.   Brinegar:  Modified to initialize sel_info.se_vals so
   that .V.  arguments would be passed to mrds.

   80-03-14  Rickie  E.   Brinegar:  Modified  to  use  a  work area defined on
   lcb.linus_area_ptr instead of getting system free area.

   80-08-15  Rickie E.  Brinegar: Modified to fix some varying character string
   code to permit modifies of varying character strings.

   81-02-02  Rickie  E.   Brinegar:  The  declaration  for  the internal static
   debug_switch was moved from db_on entry to the main entry.

   81-02-20  Rickie E.  Brinegar: Changed the calls to mdb_display_value_ to be
   calls  to  mdb_display_data_value$ptr.   The  latter  allows  more  than 256
   characters to be displayed.

   81-06-25 Rickie E.  Brinegar: Changed to not attempt to use linus_variables
   when  the  linus  variable list pointer is null.  This is in response to TR
   10194.

   81-07-10   Rickie   E.    Brinegar:   Modified  to  not  assign  values  to
   sel_info.mrds_items  until after all expressions have been evaluated.  This
   permits  the  use  of  multiple  column specs in a expression, and avoids a
   Halloween effect.

   81-07-13 Rickie E.  Brinegar: Removed trapping of the conversion condition.
   This is done in the linus module.

   81-07-14  Rickie  E.   Brinegar:  Removed  the  useless cleanup handler and
   unreferenced variables.

   81-09-28 Davids: Changed the check for "!" from a substr to an index in the
   not_expr proc.
   
   81-11-16 Rickie E.  Brinegar: changed the call to cu_$gen_call to a call to
   cu_$generate_call  and  added  the  timing  of the calls to dsl_$modify and
   dsl_$retrieve.

   82-02-10 Paul W. Benjamin: ssu_ conversion.  This program ranks with the
   invoke request in the magnitude of the headaches that it caused in the
   conversion.  It allows its input to contain parens.  This convention caused
   the creation of the 'iteration mode'.  Further, it expected a parenthesized
   list to be a single argument.  With iteration on (not the default at this
   time) there is no problem, as the user had to quote the argument to get the
   parens in anyway, but with iteration off, the parenthesized list may well
   be several arguments.  Some rather clumsy code was implemented herein to
   get around that particular problem.

   82-06-23 Dave J. Schimke: cleaned up the code associated with the above
   mentioned conversion (from a parenthesized list to a single argument). 
   This was done to clarify the code and remove standards violations.

   82-07-02 Dave J. Schimke: Added simple_arg to fix a stringrange_error.

   82-09-03 Dave Schimke: Added a call to dsl_$get_pn to get the opening
   mode and report an error if user tries to modify with a retrieval opening.
   Declared mode, db_path, dsl_$get_path, and linus_error_$update_not_valid.
   This is in response to phx 13742.

   82-10-13 Dave Schimke: Added call to linus_table$async_retrieval before the
   first retrieve to keep linus_table from getting lost when loading in the
   incremental mode. 

   83-01-11 Dave Schimke: Replaced calls to linus_ok_response with calls to 
   linus_query. Deleted references to error_table_$long_record, out_code, 
   nread, buff_len, and linus_data_$m_id. Declared input, linus_query, prompt,
   prompt_len, linus_query$yes_no, and length. This is an fix for the ssu 
   conversion which broke input from the terminal during a linus macro and 
   answers TRs 12445 &  13342 (linus 73). Also changed arg_len_bits.length to
   arg_len_bits.len.

   83-08-30  Bert Moberg:  Added call to linus_translate_query$auto if no current
   select expression is available
*/

%include linus_lcb;
%page;
%include linus_char_argl;
%page;
%include linus_variables;
%page;
%include linus_select_info;
%page;
%include mdbm_arg_list;
%page;
%include linus_arg_list;
%page;
%include linus_token_data;
%page;
%include linus_expression;

	dcl     sci_ptr		 ptr;		/* for ssu_ */

 	dcl     1 sel_info		 aligned based (sel_ptr) like select_info;
	dcl     C_R		 char (1) int static options (constant) init ("
");
	dcl     DATA_BASE		 fixed bin (3) int static options (constant) init (6);
	dcl     EXPR		 fixed bin (2) int static options (constant) init (2);
	dcl     debug_switch	 bit (1) int static init ("0"b);

	dcl     1 arg_len_bits	 based,
		2 pad		 bit (12) unal,
		2 len		 bit (24) unal;	/* Length of argument to be passed in system standard arg list */

	dcl     combined_arg_idx	 (linus_data_$max_req_args) bit (1)
				 based (combined_arg_idx_ptr); /* map of allocated combined_args */
	dcl     combined_arg	 char
				 (mod_ch_argl.arg.arg_len (mod_ch_argl.nargs)) based; /* parenthesized list */

	dcl     input_arg		 char (char_argl.arg.arg_len (input_arg_num))
				 based (char_argl.arg.arg_ptr (input_arg_num)); /* template for arg in char_argl */
	dcl     input_buffer	 (linus_data_$buff_len) char (1) based (in_buf_ptr);
						/* Max length of input buffer */
          dcl     input                  char(linus_data_$buff_len) var;
          dcl     prompt char(40) var;
          dcl     prompt_len fixed bin;

          dcl     mod_buf		 char (mb_len) based (mb_ptr);
	dcl     mod_curr		 char (linus_data_$buff_len);
	dcl     sel_expr		 char (sel_info.se_len) based (sel_info.se_ptr);
	dcl     tmp_buf		 char (tb_len) based (tb_ptr);
	dcl     tmp_char		 char (mod_ch_argl.arg.arg_len (i))
				 based (mod_ch_argl.arg.arg_ptr (i));

	dcl     (interactive, expr_found, bf_flag, yes_no_flag, found_end_paren, simple_arg) bit (1);

	dcl     offset		 (10) bit (1) based;

	dcl     (ano_curr_len, caller, desc, i, in_buf_index, input_arg_num, k, l, m,
	        mb_len, source_type, tb_len, temp) fixed bin;

	dcl     initial_mrds_vclock	 float bin (63);
	dcl     db_path		 char (168) var;
	dcl     mode		 char (20);

	dcl     ANOTHER		 char (8) init ("-another");
	dcl     CURRENT		 char (8) init ("-current");
          dcl     NL                     char(1) int static options (constant) init ("
");

	dcl     (code, icode, mod_lit_offset, source_len) fixed bin (35);

	dcl     cleanup		 condition;

	dcl     (addr, addrel, after, before, fixed, index, length, null, rel, rtrim, string, substr, unspec, vclock)
				 builtin;

	dcl     (
	        interactive_ptr	 init (null),
	        in_buf_ptr		 init (null),
	        mb_ptr		 init (null),
	        tb_ptr		 init (null),
	        mod_ch_ptr		 init (null),
	        destination_ptr	 init (null),
	        start_ptr		 init (null),
	        mod_lit_ptr		 init (null),
	        arg_l_ptr		 init (null),
	        re_ptr		 init (null),
	        sel_ptr		 init (null),
	        renv_ptr		 init (null),
	        e_ptr		 init (null),
	        env_ptr		 init (null),
	        combined_arg_idx_ptr	 init (null)
	        )			 ptr;

	dcl     1 arg_l		 like arg_list based (arg_l_ptr);

	dcl     (
	        linus_data_$buff_len,
	        linus_data_$max_req_args,
	        linus_error_$bad_num_args,
	        linus_error_$linus_var_not_defined,
	        linus_error_$mod_not_valid,
	        linus_error_$no_db,
	        linus_error_$null_input,
	        linus_error_$unbal_parens,
	        linus_error_$update_not_allowed,
	        mrds_error_$tuple_not_found,
	        sys_info$max_seg_size
	        )			 fixed bin (35) ext;

	dcl     1 mod_ch_argl	 aligned based (mod_ch_ptr), /* like char_argl */
		2 nargs		 fixed bin,
		2 arg		 (nargs_init refer (mod_ch_argl.nargs)),
		  3 arg_ptr	 ptr,
		  3 arg_len	 fixed bin;

	dcl     work_area		 area (sys_info$max_seg_size) based (lcb.linus_area_ptr);

	dcl     assign_round_
				 entry (ptr, fixed bin, fixed bin (35), ptr, fixed bin, fixed bin (35));
	dcl     cu_$generate_call	 entry (entry, ptr);
	dcl     dsl_$get_pn		 entry (fixed bin (35), char (168) var, char (20), fixed bin (35));
	dcl     dsl_$modify		 entry options (variable);
	dcl     dsl_$retrieve	 entry options (variable);
	dcl     ioa_		 entry options (variable);
	dcl     ioa_$nnl		 entry options (variable);
          dcl     ioa_$rsnnl             entry() options(variable);
	dcl     linus_eval_expr
				 entry (ptr, ptr, ptr, fixed bin, fixed bin, fixed bin (35));
	dcl     linus_modify_build_expr_tab
				 entry (ptr, ptr, fixed bin, fixed bin, ptr, ptr, fixed bin (35), ptr,
				 fixed bin (35));
          dcl     linus_query            entry (ptr, char(*) var, char(*) var);     /* Linus subroutines */
	dcl     linus_query$yes_no     entry (ptr,bit(1), char(*) var);	
	dcl     linus_table$async_retrieval
				 entry (ptr, fixed bin (35));
	dcl     linus_translate_query$auto	 entry (ptr, ptr);
	dcl     mdb_display_data_value$ptr entry (ptr, ptr);

	dcl     (
	        mdbm_util_$character_data_class,
	        mdbm_util_$varying_data_class
	        )			 entry (ptr) returns (bit (1));
	dcl     ssu_$abort_line	 entry options (variable);
	dcl     ssu_$arg_count	 entry (ptr, fixed bin);
	dcl     ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21));

	mod_lit_ptr, sel_ptr, mod_ch_ptr, arg_l_ptr, ex_ptr, char_ptr, mb_ptr,
	     in_buf_ptr, ca_ptr, al_ptr = null;

	mb_len, icode, code = 0;
	ano_curr_len = 8;
	in_buf_index = 1;
	yes_no_flag = "1"b;
	interactive, expr_found, bf_flag = "0"b;
	source_type = 42;
	caller = 1;
	nargs_init = linus_data_$max_req_args;
	allocate mod_ch_argl in (work_area);
	allocate token_data in (work_area);
	token_data.mvar, token_data.lvar = "";
	mod_ch_argl.nargs = 0;

	if lcb.db_index = 0 then
	     call error (linus_error_$no_db);
	call dsl_$get_pn (lcb.db_index, db_path, mode, code);
	if substr (mode, 1, 9) = "retrieval" | substr (mode, 11, 9) = "retrieval" then
	     call error (linus_error_$update_not_allowed);
	if lcb.si_ptr = null then call linus_translate_query$auto (sci_ptr, lcb_ptr); /* try translating it */
	if lcb.si_ptr = null then return; /* No good?  Oh, well */

	si_ptr = lcb.si_ptr;			
	nsv_init = select_info.nsevals;
	nmi_init = select_info.n_mrds_items;
	nui_init = select_info.n_user_items;
	allocate sel_info in (work_area);
	destination_ptr = sel_ptr;

	sel_info.se_flags.val_mod = select_info.se_flags.val_mod;
						/* init sel_info */
	sel_info.se_ptr = select_info.se_ptr;
	sel_info.se_len = select_info.se_len;
	sel_info.nsevals = select_info.nsevals;
	sel_info.n_mrds_items = select_info.n_mrds_items;
	sel_info.n_user_items = select_info.n_user_items;
	do i = 1 to sel_info.nsevals;
	     sel_info.se_vals.arg_ptr (i) = select_info.se_vals.arg_ptr (i);
	     sel_info.se_vals.desc_ptr (i) = select_info.se_vals.desc_ptr (i);
	end;
	do i = 1 to sel_info.n_mrds_items;
	     sel_info.mrds_item.arg_ptr (i) = select_info.mrds_item.arg_ptr (i);
	     sel_info.mrds_item.bit_len (i) = select_info.mrds_item.bit_len (i);
	     sel_info.mrds_item.desc (i) = select_info.mrds_item.desc (i);
	     sel_info.mrds_item.assn_type (i) = select_info.mrds_item.assn_type (i);
	     sel_info.mrds_item.assn_len (i) = select_info.mrds_item.assn_len (i);
	end;
	do i = 1 to sel_info.n_user_items;
	     sel_info.user_item.name (i) = select_info.user_item.name (i);
	     sel_info.user_item.item_type (i) = select_info.user_item.item_type (i);
	     sel_info.user_item.rslt_desc (i) = select_info.mrds_item.desc (i);
	     sel_info.user_item.item_ptr (i) = select_info.user_item.item_ptr (i);
	end;
	lv_ptr = lcb.lv_ptr;			/* Init linus_variables pointer */
	if ^sel_info.se_flags.val_mod then
	     call error (linus_error_$mod_not_valid);
	in_buf_ptr = null;
	call ssu_$arg_count (sci_ptr, nargs_init);
	if nargs_init = 0 then /* No arguments passed */
	     call interactive_modify;			/* Data must be obtained interactively */
	else do;
		allocate char_argl in (lcb.static_area);
		on cleanup begin;
			if ca_ptr ^= null
			then free char_argl;
			if combined_arg_idx_ptr ^= null
			then do i = 1 to linus_data_$max_req_args;
				if combined_arg_idx (i)
				then free mod_ch_argl.arg.arg_ptr (i) -> combined_arg;
			     end;
		     end;
		do i = 1 to nargs_init;
		     call ssu_$arg_ptr (sci_ptr, i, char_argl.arg.arg_ptr (i), char_argl.arg.arg_len (i));
		end;

/* The following do-group exists solely for the purpose of putting multiple args
   that comprise a parenthesized list into a new, single argument.  It is only
   a problem when the user has iteration-mode off.  If it is on, the user has to
   quote a parenthesized list in which case it is a single argument anyway.  The
   programmer was suffering from a singular lack of creativity when this was 
   done.  Works, though.
*/
		if ^lcb.iteration
		then do;
			mod_ch_argl.nargs = 0;
			do i = 1 to nargs_init;
			     simple_arg = "0"b;
			     input_arg_num = i;
			     if (char_argl.arg.arg_len (i) = 0)
			     then simple_arg = "1"b;
			     else if (substr (input_arg, 1, 1) = "(") & (substr (input_arg, char_argl.arg.arg_len (i), 1) ^= ")")
			     then do;		/* beginning of parenthesized list */
				     found_end_paren = "0"b;
				     do k = i to nargs_init while (^found_end_paren);
					input_arg_num = k;
					if substr (input_arg, char_argl.arg.arg_len (k), 1) = ")"
					then do;	/* when ending paren found */
						found_end_paren = "1"b;
						mod_ch_argl.nargs = mod_ch_argl.nargs + 1;
						mod_ch_argl.arg.arg_len (mod_ch_argl.nargs) = 0;
						do l = i to k; /* accumulate lengths */
						     mod_ch_argl.arg.arg_len (mod_ch_argl.nargs)
							= mod_ch_argl.arg.arg_len (mod_ch_argl.nargs)
							+ char_argl.arg.arg_len (l) + 1;
						end;
						mod_ch_argl.arg.arg_len (mod_ch_argl.nargs)
						     = mod_ch_argl.arg.arg_len (mod_ch_argl.nargs) - 1;
						if combined_arg_idx_ptr = null
						then do;
							allocate combined_arg_idx in (lcb.static_area);
							unspec (combined_arg_idx) = "0"b;
						     end;
						allocate combined_arg set (mod_ch_argl.arg.arg_ptr (mod_ch_argl.nargs)) in (lcb.static_area);
						combined_arg_idx (mod_ch_argl.nargs) = "1"b;
						mod_ch_argl.arg.arg_ptr (mod_ch_argl.nargs) -> combined_arg = "";
						do l = i to k; /* create new arg_list */
						     input_arg_num = l;
						     if l = i
						     then mod_ch_argl.arg.arg_ptr (mod_ch_argl.nargs) -> combined_arg
							     = input_arg;
						     else mod_ch_argl.arg.arg_ptr (mod_ch_argl.nargs) -> combined_arg =
							     rtrim (mod_ch_argl.arg.arg_ptr (mod_ch_argl.nargs) -> combined_arg) || " " || input_arg;
						end;
					     end;
				     end;

				     if found_end_paren = "0"b
				     then call error (linus_error_$unbal_parens);
				     else i = k;
				end;		/* end parenthesized list */
			     else simple_arg = "1"b;
			     if (simple_arg) then do; /* vanilla argument */
				     mod_ch_argl.nargs = mod_ch_argl.nargs + 1;
				     mod_ch_argl.arg.arg_len (mod_ch_argl.nargs) = char_argl.arg.arg_len (i);
				     mod_ch_argl.arg.arg_ptr (mod_ch_argl.nargs) = char_argl.arg.arg_ptr (i);
				end;
			end;
		     end;
		else mod_ch_argl = char_argl;		/* iteration on */

		i = mod_ch_argl.nargs;		/* is last input arg "-bf" ? */
		if tmp_char = "-brief" | tmp_char = "-bf" then do;
			bf_flag = "1"b;		/* brief mode */
			mod_ch_argl.nargs = mod_ch_argl.nargs - 1; /* Remove "-brief" or "-bf" from char argl */
		     end;
		if mod_ch_argl.nargs = 0 then
		     call interactive_modify;
		else do;

/* place input arguments in buffer to be used by this request only */
			do i = 1 to mod_ch_argl.nargs;
			     mb_len = mb_len + mod_ch_argl.arg_len (i) + 1;
			end;
			mb_len = mb_len + 1;	/* for carriage return */
			allocate mod_buf in (work_area);
			mod_buf = "";
			tb_ptr = mb_ptr;
			do i = 1 to mod_ch_argl.nargs;
			     tb_len = mod_ch_argl.arg_len (i);
			     tmp_buf = tmp_char;
			     mod_ch_argl.arg_ptr (i) = tb_ptr;
			     do k = 1 to tb_len + 1;	/* bump ptr into the output buffer */
				tb_ptr = addr (tb_ptr -> offset (10));
			     end;
			end;
			tb_len = 1;
			tmp_buf = C_R;		/* place carriage return at end of line */

			call bf_modify;
		     end;
	     end;

	if ca_ptr ^= null
	then free char_argl;
	if combined_arg_idx_ptr ^= null
	then do i = 1 to linus_data_$max_req_args;
		if combined_arg_idx (i)
		then free mod_ch_argl.arg.arg_ptr (i) -> combined_arg;
	     end;
	return;

db_on:
     entry;

/* Usage:
   linus_modify$db_on

   Turns on a switch which causes the value of the current
   selection expression to be displayed at the terminal.
*/

	debug_switch = "1"b;
	return;
%skip (10);
db_off:
     entry;

/* Usage:
   linus_modify$db_off

   Turns off the switch which causes the value of the current
   selection expression to be displayed at the terminal.
*/

	debug_switch = "0"b;
	return;

interactive_modify:
     proc;

	call ioa_ ("");
	interactive = "1"b;
	allocate input_buffer in (work_area);
	do l = 1 to sel_info.n_user_items;
	     interactive_ptr = addr (input_buffer (in_buf_index));
	     call ioa_$rsnnl (" ^a?   ", prompt, prompt_len, sel_info.user_item.name (l));
	     call linus_query (lcb_ptr, input, prompt);
	     substr (string(input_buffer), in_buf_index, length (input)) = input;
	     mod_ch_argl.nargs = mod_ch_argl.nargs + 1;	/* Increment number of arguments */
	     mod_ch_argl.arg.arg_len (mod_ch_argl.nargs) = length (input);
						/* Set attribute length */
	     mod_ch_argl.arg.arg_ptr (mod_ch_argl.nargs) = interactive_ptr;
						/* Set pointer of attribute value or
						   expression */
	     i = mod_ch_argl.nargs;
	     in_buf_index = in_buf_index + mod_ch_argl.arg.arg_len (i) + 1;	/* Set up for next input */
	     substr (input_buffer (in_buf_index - 1), 1, 1) = " ";
	end;
	substr (input_buffer (in_buf_index - 1), 1, 1) = C_R;
	call bf_modify;

     end interactive_modify;



verbose_modify:
     proc;

	do i = 1 to sel_info.n_user_items;
	     call ioa_$nnl ("^/^a = ^a", sel_info.user_item.name (i), tmp_char);
	end;

     end verbose_modify;

bf_modify:
     proc;					/* modify data base */

	dcl     var_expr		 bit (1);

	if mod_ch_argl.nargs ^= sel_info.n_user_items	/* must be one mod arg for every user item */
	then call error (linus_error_$bad_num_args);

	call parse_expr;

	if ^bf_flag then do;
		call verbose_modify;
		call linus_query$yes_no (lcb_ptr, yes_no_flag, NL||" OK? ");
	     end;

	if yes_no_flag then do;
		if ^expr_found then
		     call const_mod;

		else do;				/* expression found */
			var_expr = "0"b;
			do l = 1 to sel_info.n_user_items;
			     if sel_info.user_item.item_type (l) = EXPR then do;
				     ex_ptr = sel_info.user_item.item_ptr (l);
				     do i = 1 to expression.nelems; /* find number of database items */
					if expression.elem.type (i) = DATA_BASE then
					     var_expr = "1"b;
				     end;
				     if ^var_expr then /* expression has constant result */
					call
					     linus_eval_expr (lcb_ptr,
					     sel_info.user_item.item_ptr (l), destination_ptr,
					     caller, l, icode);
				end;
			end;
			if ^var_expr then /* expression has constant result */
			     call const_mod;
			else do;			/* expression result varies with each tuple */
				call set_up;
				call expr_set_up;
				do while (icode = 0);
				     do l = 1 to sel_info.n_user_items;
					if sel_info.user_item.item_type (l) = EXPR then
					     call
						linus_eval_expr (lcb_ptr,
						sel_info.user_item.item_ptr (l), destination_ptr,
						caller, l, icode);
				     end;
				     do l = 1 to sel_info.n_user_items;
					if sel_info.user_item.item_type (l) = EXPR then
					     call
						assign_round_ (sel_info.mrds_item.arg_ptr (l),
						sel_info.mrds_item.assn_type (l),
						sel_info.mrds_item.assn_len (l),
						sel_info.user_item.rslt_assn_ptr (l),
						sel_info.user_item.rslt_assn_type (l),
						sel_info.user_item.rslt_assn_len (l));
					else call not_expr;
				     end;
				     if icode = 0 then do;
					     call bump_var_ptrs; /* increment (by 1) varying argument descriptor pointers */
					     if lcb.timing_mode then
						initial_mrds_vclock = vclock;
					     call cu_$generate_call (dsl_$modify, al_ptr);
						/* modify current */
					     if lcb.timing_mode then
						lcb.mrds_time =
						     lcb.mrds_time + (vclock - initial_mrds_vclock);
					     if icode = 0 then do;
						     call reset_var_ptrs; /* decrement (by 1) varying argument descriptor pointers */
						     call linus_table$async_retrieval (lcb_ptr, code);
						     if icode ^= 0 then
							call error (icode);
						     if lcb.timing_mode then
							initial_mrds_vclock = vclock;
						     call cu_$generate_call (dsl_$retrieve, arg_l_ptr);
						/* retrieve another */
						     if lcb.timing_mode then
							lcb.mrds_time =
							     lcb.mrds_time + (vclock - initial_mrds_vclock);
						end;
					end;
				end;
				if icode ^= mrds_error_$tuple_not_found then
				     call error (icode);
			     end;
		     end;
	     end;

const_mod:
     proc;

	call set_up;
	do l = 1 to sel_info.n_user_items;
	     if sel_info.user_item.item_type (l) = EXPR then
		call
		     assign_round_ (sel_info.mrds_item.arg_ptr (l),
		     sel_info.mrds_item.assn_type (l),
		     sel_info.mrds_item.assn_len (l),
		     sel_info.user_item.rslt_assn_ptr (l),
		     sel_info.user_item.rslt_assn_type (l),
		     sel_info.user_item.rslt_assn_len (l));
	     else call not_expr;
	end;
	call bump_var_ptrs;				/* increment (by 1) varying argument descriptor pointers */
	if lcb.timing_mode then
	     initial_mrds_vclock = vclock;
	call cu_$generate_call (dsl_$modify, al_ptr);	/* Call to MRDS modify */
	if lcb.timing_mode then
	     lcb.mrds_time = lcb.mrds_time + (vclock - initial_mrds_vclock);
	call reset_var_ptrs;			/* decrement (by 1) varying argument descriptor pointers */
	if icode ^= 0 then
	     call error (icode);

     end const_mod;

bump_var_ptrs:
     proc;

/* increment (by 1) the varying argument descriptor pointers in arg_list */

	dcl     (i, k)		 fixed bin;

	desc = arg_list.arg_count / 2;		/* number of descriptors */
	do i = 1 to desc;
	     k = desc + i;				/* point to descriptor */
	     if mdbm_util_$varying_data_class (arg_list.arg_des_ptr (k)) then
		arg_list.arg_des_ptr (i) = addrel (arg_list.arg_des_ptr (i), +1);
	end;

     end bump_var_ptrs;


reset_var_ptrs:
     proc;

/* increment (by 1) the varying argument descriptor pointers in arg_list */

	dcl     (i, k)		 fixed bin;

	desc = arg_list.arg_count / 2;		/* number of descriptors */
	do i = 1 to desc;
	     k = desc + i;				/* point to descriptor */
	     if mdbm_util_$varying_data_class (arg_list.arg_des_ptr (k)) then
		arg_list.arg_des_ptr (i) = addrel (arg_list.arg_des_ptr (i), -1);
	end;

     end reset_var_ptrs;

not_expr:
     proc;					/* set items that are not expressions */

	dcl     tmp_char		 char (mod_ch_argl.arg.arg_len (l))
				 based (mod_ch_argl.arg.arg_ptr (l));

	if sel_info.user_item.item_type (l) ^= EXPR then do;
		if tmp_char = ""
		     &
		     ^
		     mdbm_util_$character_data_class (addr (sel_info.mrds_item.desc (l)))
		     &
		     ^mdbm_util_$varying_data_class (addr (sel_info.mrds_item.desc (l)))
		then call error (linus_error_$null_input); /* check for null items */
		if index (tmp_char, "!") = 1 then do;	/* Process LINUS VARIABLES? */
			if lv_ptr = null then
			     call error (linus_error_$linus_var_not_defined);
			do m = 1 to variables.nvars
			     while (variables.var_info.name (m) ^= substr (tmp_char, 2));
			end;
			if m > variables.nvars then
			     call error (linus_error_$linus_var_not_defined);
			else call
				assign_round_ (sel_info.mrds_item.arg_ptr (l),
				sel_info.mrds_item.assn_type (l),
				sel_info.mrds_item.assn_len (l),
				variables.var_info.var_ptr (m),
				variables.var_info.assn_type (m),
				variables.var_info.assn_len (m));
		     end;
		else do;
			if tmp_char ^= sel_info.user_item.name (l) then do;
				source_len = mod_ch_argl.arg.arg_len (l); /* Used in call to assign_round_ */
				call
				     assign_round_ (sel_info.mrds_item.arg_ptr (l),
				     sel_info.mrds_item.assn_type (l),
				     sel_info.mrds_item.assn_len (l), mod_ch_argl.arg.arg_ptr (l),
				     source_type, source_len);
			     end;
		     end;
	     end;

     end not_expr;

set_up:
     proc;					/* common for all types of modify */

	n_chars_init = 2;				/* Number for allocate */
	allocate char_desc in (work_area);		/* Character descriptor */
	char_desc.arr.const (2) = char_desc.arr.const (1);
	desc = sel_info.n_mrds_items + sel_info.nsevals + 3; /* Offset for descriptors */
	num_ptrs = desc * 2;			/* Number of pointers to be passed in arg_list */
	allocate arg_list in (work_area);		/* System standard argument list */
	allocate arg_l in (work_area);
	arg_list.arg_des_ptr (desc) = addr (icode);	/* Pointer to icode */

	arg_list.arg_des_ptr (num_ptrs) = addr (char_desc.fb_desc);
						/* Return code descriptor */
	arg_list.arg_des_ptr (1) = addr (lcb.db_index);	/* Data base index */
	arg_list.arg_des_ptr (desc + 1) = addr (char_desc.fb_desc);
						/* Data base index descriptor */
	arg_list.arg_count, arg_list.desc_count = num_ptrs; /* Initialize argument list header */
	arg_list.code = 4;
	arg_list.pad = 0;

	char_desc.arr.var (1), char_desc.arr.var (2) =
	     addr (sel_info.se_len) -> arg_len_bits.len;
	arg_list.arg_des_ptr (2) = sel_info.se_ptr;
	arg_list.arg_des_ptr (desc + 2) = addr (char_desc.arr (2));
	if debug_switch then do;
		call ioa_ ("Selection expression:");

/* 81-02-20 Rickie E. Brinegar: Start changes ****************************** */

		call
		     mdb_display_data_value$ptr (select_info.se_ptr,
		     addr (char_desc.arr (1)));

/* 81-02-20 Rickie E. Brinegar: End changes ******************************** */

	     end;					/* if debug_switch */
	if sel_info.nsevals ^= 0 then
	     do l = 1 to sel_info.nsevals;
		arg_list.arg_des_ptr (2 + l) = sel_info.se_vals.arg_ptr (l);
		arg_list.arg_des_ptr (2 + l + desc) = sel_info.se_vals.desc_ptr (l);
	     end;
	i = 1;					/* mrds items index */
	do l = 3 + sel_info.nsevals
	     to 2 + sel_info.n_mrds_items + sel_info.nsevals; /* use sel_info.data */
	     arg_list.arg_des_ptr (l) = sel_info.mrds_item.arg_ptr (i);
	     arg_list.arg_des_ptr (l + desc) = addr (sel_info.mrds_item.desc (i));
	     i = i + 1;
	end;
	arg_l = arg_list;
	arg_l.arg_des_ptr (desc + 2) = addr (char_desc.arr (1));

     end set_up;


expr_set_up:
     proc;					/* called if expression was found */

	sel_expr =
	     before (sel_expr, "-select") || "-select -dup"
	     || substr (after (sel_expr, "-select"), 6);	/* must modify duplicates */
	call linus_table$async_retrieval (lcb_ptr, code);
	if icode ^= 0 then
	     call error (icode);
	if lcb.timing_mode then
	     initial_mrds_vclock = vclock;
	call cu_$generate_call (dsl_$retrieve, arg_l_ptr);
	if lcb.timing_mode then
	     lcb.mrds_time = lcb.mrds_time + (vclock - initial_mrds_vclock);
	sel_expr =
	     before (sel_expr, "-dup") || "    " || after (sel_expr, "-dup");
						/* remove "-dup" for modify "-current" */
	if icode ^= 0 then
	     call error (icode);
	char_desc.arr.var (1) = addr (ano_curr_len) -> arg_len_bits.len;
	arg_l.arg_des_ptr (2) = addr (ANOTHER);		/* for another retrieve */
	l = index (sel_expr, "-select");
	i = index (sel_expr, "-where") - 1;
	if i <= 0 then
	     i = sel_info.se_len;			/* no where clause exists */
	temp = i - l + 1;
	mod_curr = CURRENT || substr (sel_expr, l + 7, temp - 7);
	temp = temp + 1;
	char_desc.arr.var (2) = addr (temp) -> arg_len_bits.len;
	arg_list.arg_des_ptr (2) = addr (mod_curr);	/* for current modify */

     end expr_set_up;

     end bf_modify;

parse_expr:
     proc;					/* parse expression and build the modify expression table */

	expr_found = "0"b;
	do i = 1 to mod_ch_argl.nargs;
	     if index (tmp_char, "(") = 1 then do;	/* process expression */
		     expr_found = "1"b;
		     call
			linus_modify_build_expr_tab (lcb_ptr,
			mod_ch_argl.arg.arg_ptr (i), mod_ch_argl.arg.arg_len (i), i,
			td_ptr, mod_lit_ptr, mod_lit_offset, sel_ptr, icode);
		     if icode ^= 0 then
			call error (icode);
		     sel_info.user_item.item_type (i) = EXPR;
		end;
	end;

     end parse_expr;

error:
     proc (err_code);

	dcl     err_code		 fixed bin (35);

	if ca_ptr ^= null
	then free char_argl;
	if combined_arg_idx_ptr ^= null
	then do i = 1 to linus_data_$max_req_args;
		if combined_arg_idx (i)
		then free mod_ch_argl.arg.arg_ptr (i) -> combined_arg;
	     end;
	call ssu_$abort_line (sci_ptr, err_code);

     end error;
     end linus_modify;
