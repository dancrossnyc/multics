/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */

/*
     This is the main level procedure called by ssu_ to implement the
     linus list_scope request. It lists the current scope settings
     for permanent tables. Usage: "list_scope {-control_arg}", where
     -control_arg is -table (-tb) TABLE_NAME_1 ... TABLE_NAME_N. If this
     isn't supplied, all scope settings are displayed. */


/****^  HISTORY COMMENTS:
  1) change(86-01-13,Dupuis), approve(86-01-13,MCR7188), audit(86-07-23,GWMay),
     install(86-07-29,MR12.0-1106):
     Written by Al Dupuis in December 1984, as part of the rewrite of all
     linus scope modules.
  2) change(86-01-13,Dupuis), approve(86-05-23,MCR7404), audit(86-07-23,GWMay),
     install(86-07-29,MR12.0-1106):
     Changed to also work as an active request.
                                                   END HISTORY COMMENTS */

/* format: off */
%page;
linus_list_scope: proc (

	sci_ptr_parm,   /* input: ptr to the subsystem control info structure */
	lcb_ptr_parm    /* input: ptr to the linus control block info structure */
		     );
%skip(1);
dcl sci_ptr_parm ptr parm;
dcl lcb_ptr_parm ptr parm;
%skip(1);
	call initialize;
	on cleanup call terminate;
	call process_args;
	if no_scope_is_defined
	then if active_request_flag
	     then return_value = "false";
	     else call ssu_$print_message (sci_ptr, linus_error_$no_scope);
	else call list_scope;
	call terminate;
%skip(1);
	return;
%page;
initialize: proc;
%skip(3);
	sci_ptr = sci_ptr_parm;
	lcb_ptr = lcb_ptr_parm;
%skip(1);
	call ssu_$return_arg (sci_ptr, number_of_args_supplied,
	     active_request_flag, return_value_ptr, return_value_length);
	if active_request_flag
	then return_value = "";
%skip(1);
	if lcb.db_index = 0
	then call ssu_$abort_line (sci_ptr, linus_error_$no_db);
%skip(1);
	work_area_ptr = lcb.general_work_area_ptr;
	scope_ptr = null;
	scope_array_ptr = null;
%skip(1);
          return;
%skip(1);
     end initialize;
%page;
list_scope: proc;
%skip(1);
dcl ls_buffer char (64);
dcl ls_buffer_as_an_array (64) char (1) based (ls_buffer_as_an_array_ptr);
dcl ls_buffer_as_an_array_ptr ptr;
dcl ls_index fixed bin;
dcl ls_loop fixed bin;
dcl ls_permits char (10) defined (ls_buffer_as_an_array) position (36);
dcl ls_prevents char (4) defined (ls_buffer_as_an_array) position (46);
dcl ls_table_name char (35) defined (ls_buffer);
dcl ls_temporary_table_message char (29) defined (ls_buffer_as_an_array) position (36);
%skip(1);
	if ^active_request_flag
	then do;
	     ls_buffer_as_an_array_ptr = addr (ls_buffer);
	     ls_buffer = "";
	     call ioa_ ("^/Table^28xPermitted^xPrevented^/");
	end;
%skip(1);
	if all_scope_has_been_requested
	then do ls_loop = 1 to scope_info.nfiles;
	     if scope_info.scope.flags.touched (ls_loop)
	     then call emit_value (ls_loop);
	end;
	else do ls_loop = 1 to scope_array.number_of_relations;
	     ls_index = scope_array.relations.indexes (ls_loop);
	     if ^active_request_flag
	     then ls_buffer = "";
	     if ^scope_array.relations.temporary_table_name (ls_loop)
	     then call emit_value (ls_index);
	     else do;
		if active_request_flag
		then return_value = return_value || "temporary_table_with_no_scope" || " r " || "rsdm ";
		else do;
		     ls_table_name = temporary_table_names (ls_index);
		     ls_temporary_table_message = "Temporary table with no scope";
		     call ioa_ ("^a", ls_buffer);
		end;
	     end;
	end;
%skip(1);
	return;
%page;
emit_value: proc (

	ev_index_parm	/* input: index of relation we're working on */
	       );
dcl ev_index_parm fixed bin parm;
%skip(1);
	if active_request_flag
	then return_value = return_value
	     || rtrim (scope_info.scope.sm_name (ev_index_parm)) || " "
	     || get_permits (addr (scope_info.scope.flags.permits (ev_index_parm))) || " "
	     || get_permits (addr (scope_info.scope.flags.prevents (ev_index_parm))) || " ";
	else do;
	     ls_table_name = scope_info.scope.sm_name (ev_index_parm);
	     ls_permits = get_permits (addr (scope_info.scope.flags.permits (ev_index_parm)));
	     ls_prevents = get_permits (addr (scope_info.scope.flags.prevents (ev_index_parm)));
	     call ioa_ ("^a", ls_buffer);
	end;
%skip(1);
	return;
%skip(3);
get_permits: proc (gp_permissions_ptr_parm) returns (char (4) varying);
%skip(1);
dcl gp_permits char (4) varying;
dcl gp_permissions bit (4) unaligned based (gp_permissions_ptr_parm);
dcl gp_permissions_ptr_parm ptr parm;
%skip(1);
	gp_permits = "";
	if substr (gp_permissions, 1, 1)
	then gp_permits = "r";
	if substr (gp_permissions, 3, 1)
	then gp_permits = gp_permits || "d";
	if substr (gp_permissions, 4, 1)
	then gp_permits = gp_permits || "m";
	if substr (gp_permissions, 2, 1)
	then gp_permits = gp_permits || "s";
	if gp_permits = ""
	then gp_permits = "n";
%skip(1);
	return (gp_permits);
%skip(1);
        end get_permits;
%skip(1);
   end emit_value;
%skip(1);
end list_scope;
%page;
process_args: proc;
%skip(1);
dcl pa_code fixed bin (35);
dcl pa_current_arg_number fixed bin;
dcl pa_loop fixed bin;
dcl pa_not_found bit (1) aligned;
dcl pa_scope_index fixed bin;
%skip(1);
	if number_of_args_supplied = 1
	then call ssu_$abort_line (sci_ptr, error_table_$inconsistent, USAGE_MESSAGE);
	all_scope_has_been_requested = (number_of_args_supplied = 0);
	call dsl_$get_scope_info (lcb.db_index, work_area_ptr, scope_ptr, pa_code);
	if pa_code ^= 0
	then call ssu_$abort_line (sci_ptr, pa_code);
	no_scope_is_defined = (scope_info.active_scopes = 0);
	if no_scope_is_defined | all_scope_has_been_requested
	then return;
%skip(1);
	call ssu_$arg_ptr (sci_ptr, 1, arg_ptr, arg_length);
	if arg ^= "-table" & arg ^= "-tb"
	then call ssu_$abort_line (sci_ptr, error_table_$badopt,
	     "^/Expecting the ""-table"" or ""-tb"" control argument, not ^a."
	     || USAGE_MESSAGE, arg);
%skip(1);
	temporary_table_names_ptr = lcb.ttn_ptr;
	scope_array_init_number_of_relations = number_of_args_supplied - 1;
	allocate scope_array in (work_area) set (scope_array_ptr);
	unspec (scope_array.relations) = OFF;
	pa_scope_index = 1;
%skip(1);
	do pa_current_arg_number = 2 to number_of_args_supplied;
	     call ssu_$arg_ptr (sci_ptr, pa_current_arg_number, arg_ptr, arg_length);
	     if arg = " "
	     then call ssu_$abort_line (sci_ptr, linus_error_$inv_table,
		"^/A table name of only blanks is invalid.");
	     pa_not_found = ON;
	     do pa_loop = 1 to scope_info.nfiles while (pa_not_found);
		if scope_info.sm_name (pa_loop) = arg
		then do;
		     pa_not_found = OFF;
		     scope_array.relations.indexes (pa_scope_index) = pa_loop;
		end;
		else;
	     end;
	     if pa_not_found & temporary_table_names_ptr ^= null
	     then do pa_loop = 1 to mrds_data_$max_temp_rels while (pa_not_found);
		if temporary_table_names (pa_loop) = arg
		then do;
		     pa_not_found = OFF;
		     scope_array.relations.temporary_table_name (pa_scope_index) = ON;
		     scope_array.relations.indexes (pa_scope_index) = pa_loop;
		end;
		else;
	     end;
	     if pa_not_found
	     then call ssu_$abort_line (sci_ptr, linus_error_$undef_tab, "^x^a", arg);
	     pa_scope_index = pa_scope_index + 1;
	end;
%skip(1);
	return;
%skip(1);
     end process_args;
%page;
terminate: proc;
%skip(1);
	if scope_ptr ^= null
	then free scope_info;
	if scope_array_ptr ^= null
	then free scope_array;
%skip(1);
	return;
%skip(1);
     end terminate;
%page;
%skip(1);
dcl OFF bit (1) aligned internal static options (constant) init ("0"b);
dcl ON bit (1) aligned internal static options (constant) init ("1"b);
dcl USAGE_MESSAGE char (49) internal static options (constant) init (
"^/Usage: list_scope {-table TABLE_1 ... TABLE_N}");
%skip(1);
dcl active_request_flag bit (1) aligned;
dcl addr builtin;
dcl all_scope_has_been_requested bit (1) aligned;
dcl arg char (arg_length) based (arg_ptr);
dcl arg_length fixed bin (21);
dcl arg_ptr ptr;
%skip(1);
dcl cleanup condition;
%skip(1);
dcl dsl_$get_scope_info entry (fixed bin (35), ptr, ptr, fixed bin (35));
%skip(1);
dcl error_table_$badopt fixed bin(35) ext static;
dcl error_table_$inconsistent fixed bin(35) ext static;
%skip(1);
dcl fixed builtin;
%skip(1);
dcl ioa_ entry() options(variable);
%skip(1);
dcl linus_error_$inv_table fixed bin(35) ext static;
dcl linus_error_$no_db fixed bin(35) ext static;
dcl linus_error_$no_scope fixed bin(35) ext static;
dcl linus_error_$undef_tab fixed bin(35) ext static;
%skip(1);
dcl mrds_data_$max_temp_rels fixed bin (35) external;
%skip(1);
dcl no_scope_is_defined bit (1) aligned;
dcl null builtin;
dcl number_of_args_supplied fixed bin;
%skip(1);
dcl rel builtin;
dcl return_value char (return_value_length) varying based (return_value_ptr);
dcl return_value_length fixed bin (21);
dcl return_value_ptr ptr;
dcl rtrim builtin;
%skip(1);
dcl sci_ptr ptr;
dcl 1 scope_array aligned based (scope_array_ptr),
      2 number_of_relations fixed bin,
      2 relations (scope_array_init_number_of_relations refer (
	     scope_array.number_of_relations)),
        3 temporary_table_name bit (1),
        3 indexes fixed bin;
dcl scope_array_init_number_of_relations fixed bin;
dcl scope_array_ptr ptr;
dcl ssu_$abort_line entry() options(variable);
dcl ssu_$return_arg entry (ptr, fixed bin, bit(1) aligned, ptr, fixed bin(21));
dcl ssu_$arg_ptr entry (ptr, fixed bin, ptr, fixed bin(21));
dcl ssu_$print_message entry() options(variable);
dcl substr builtin;
dcl sys_info$max_seg_size fixed bin(35) ext static;
%skip(1);
dcl temporary_table_names (mrds_data_$max_temp_rels) char (32) based (temporary_table_names_ptr);
dcl temporary_table_names_ptr ptr;
%skip(1);
dcl unspec builtin;
%skip(1);
dcl work_area area (sys_info$max_seg_size) based (work_area_ptr);
dcl work_area_ptr ptr;
%page;
%include linus_lcb;
%page;
%include mdbm_scope_info;
%skip(3);
     end linus_list_scope;
