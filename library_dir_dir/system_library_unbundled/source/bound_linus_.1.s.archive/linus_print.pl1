/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(90-04-30,Leskiw), approve(90-10-05,MCR8202),
     audit(90-10-11,Bubric), install(90-10-14,MR12.4-1039):
     Changed calls to assign_round_ from assign_ so that data is rounded.
                                                   END HISTORY COMMENTS */


linus_print:
     proc (sci_ptr, lcb_ptr);



/* HISTORY:

   77-05-01 J. C. C. Jagernauth: Initially written.

   79-12-19 Rickie E.  Brinegar: Modified to output no data found message over
   user_output instead of over error_output.

   80-01-03  Rickie E.  Brinegar: Modified to truncate blanks off of the right
   hand end of the output line.

   80-01-10  Rickie  E.   Brinegar: Modified to use mdbm_util_$(binary complex
   fixed number string)_data_class entry points.

   80-02-04  Rickie  E.   Brinegar:  Modified  to add the -no_end, -ne control
   arguments.

   80-04-10  Rickie  E.  Brinegar: Modified to remove certain loops which were
   being  called  5,000 times for each line printed.  This increased the speed
   of linus_print by 30 percent.

   80-04-14  Rickie  E.   Brinegar:  Modified  to  use  a work area defined on
   lcb.i_o_area_ptr instead of getting system free area.

   80-06-01  Jim  Gray:  Modified to detect integer control argument args that
   are  too  large,  to  correct  -all, make -all and -max incompatible to fix
   effect  of  arg  ordering  bug, and fix error given when -col_widths had no
   additional argument given.

   80-06-02  Jim  Gray:  Modified  to  make -cw and -cwt incompatible, fix the
   detection  of too many/few args for -cw/-max, detect p.q column width given
   for  strings,  detect  when  max  buffer length exceeded, and improve error
   messages.

   80-06-24  Jim  Gray:  Modified  to  add  capabilty of printing fixed scaled
   numbers, where column has not been specified.

   80-10-21  Rickie  E.   Brinegar:  The  initialization of the buffers in the
   declaration  was changed to be done at the begining of the executable code,
   and  to  use  assignments  of one buffer to another using the string psuedo
   variable  and  builtin  function.  These changes were made as a performance
   improvement and were suggested by Matt Pierret.

   81-01-16  Rickie  E.   Brinegar:  Added a check of the error code after the
   call  to  linus_eval_set_func  to  catch  error returns rather than letting
   linus_print blow up ungracefully.
   
   81-07-15  Rickie E.  Brinegar: Removed the conversion and cleanup condition
   handlers.
   
   81-09-17  Rickie  E.   Brinegar:  Changed  the  assignment  of  num_ptrs to
   num_ptrs  to be an assignment of arg_list.arg_count to num_ptrs later on in
   the code to eliminate a size condition from occuring.
   
   81-11-12  Rickie  E.   Brinegar:  Added  timing  of  this  request  and its
   dsl_$retrieve call.

   82-02-10  Paul W. Benjamin:  ssu_ conversion

   82-06-15  Dave J. Schimke: added short names to the MORE? responses
   a = all, y = yes, n = no.

   82-06-18  Dave J. Schimke: Modified internal procedure overflow_check to
   avoid a stringsize condition when assign_ truncates. This occurred whenever 
   the -cw control arg was used to reduce the column widths. 

   82-10-13 Dave Schimke: Added call to linus_table$async_retrieval before the
   first retrieve to keep linus_table from getting lost when loading in the
   incremental mode. This call can be eliminated when all modules call 
   linus_table for their retrievals.

   83-01-11 Dave Schimke: Replace call to iox_$get_line and associated code in 
   the more_response internal proc with a call to linus_query. This fixes a ssu
   conversion bug for invoke and answers TRs 12445 & 13342 (linus 73). Also 
   changed arg_len_bits.length to arg_len_bits.len.

   83-08-30  Bert Moberg:  Added call to linus_translate_query$auto if no current
   select expression is available
*/

%include linus_lcb;
%page;
%include linus_char_argl;
%page;
%include linus_select_info;
%page;
%include linus_arg_list;
%page;
%include mdbm_arg_list;
%page;
%include mdbm_descriptor;

	dcl     sci_ptr		 ptr;		/* for ssu_ */

	dcl     1 one_line		 based (line_ptr),	/* Format for one print line */
		2 num_items	 fixed bin,
		2 item		 (select_info.n_user_items refer (one_line.num_items)),
		  3 len		 fixed bin (35),
		  3 ptr		 ptr;

	dcl     1 out_line		 based (out_line_ptr), /* like one_line  */
		2 num_items	 fixed bin,
		2 item		 (select_info.n_user_items refer (out_line.num_items)),
		  3 len		 fixed bin (35),
		  3 ptr		 ptr;

	dcl     1 user_item		 aligned based (user_item_ptr), /* valid when mrds item = user item */
		2 arg_ptr		 ptr,
		2 bit_len		 fixed bin (35),
		2 desc		 bit (36),
		2 assn_type	 fixed bin,
		2 assn_len	 fixed bin (35);

	dcl     1 arg_len_bits	 based,		/* Pick up length for descriptor */
		2 pad		 bit (12) unal,
		2 len		 bit (24) unal;

	dcl     tmp_char		 char (char_argl.arg.arg_len (i))
				 based (char_argl.arg.arg_ptr (i));

	dcl     (he_flag, print_end, first_retrieve, search_for_mrds_item, cwt_flag,
	        cw_flag)		 bit (1);

	dcl     (
	        e_ptr		 init (null),
	        out_line_ptr	 init (null),
	        source_ptr		 init (null),
	        prt_data_ptr	 init (null),
	        target_ptr		 init (null),
	        user_item_ptr	 init (null),
	        expr_results_ptr	 init (null),
	        stars_ptr		 init (null),
	        destination_ptr	 init (null),	/* Points to the scalar function init (null),
						   set function or select_info structure */
	        line_ptr		 init (null)
	        )			 ptr;

	dcl     iox_$user_output	 ptr ext;

	dcl     (item_length, float_dec_len, icode, code, out_code, constant_max_lines,
	        max_lines)		 fixed bin (35);

	dcl     expr_results	 float dec (59);
	dcl     char_61		 char (61);
	dcl     char_122		 char (122);

	dcl     out_item		 char (out_line.item.len (l)) aligned
				 based (out_line.item.ptr (l));
	dcl     picture_output	 char (one_line.item.len (l)) aligned
				 based (one_line.item.ptr (l));

	dcl     long_message	 char (100);
	dcl     short_message	 char (8);

	dcl     (abs, addr, after, before, ceil, char, copy, fixed, index, length, log10,
	        ltrim, null, rel, rtrim, search, string, substr, vclock, verify) builtin;

	dcl     cleanup		 condition;

	dcl     offset		 (10) bit (1) based;

	dcl     (
	        i,
	        j,
	        output_line_buf_index,
	        line_buf_index,
	        line_count,
	        out_line_index,
	        out_data_len,
	        prt_data_len,
	        target_type,
	        source_type,
	        another_len,
	        caller,				/* 1 = from request processor,
						   2 = from scalar function,
						   3 = from set function */
	        mrds_item_index,
	        temp,
	        cmpx_float_dec_type,
	        float_dec_type,
	        l
	        )			 fixed bin;

	dcl     n_bytes		 fixed bin (21);	/* for iox_ call */
	dcl     num_bytes		 fixed bin (35);

	dcl     initial_mrds_vclock	 float bin (63);

	dcl     (function_err, fatal_func_err) condition;

	dcl     float_dec_59_desc	 bit (36) int static options (constant)
				 init ("100101000000000000000000000000111011"b);
	dcl     fix_of_scale	 (linus_data_$max_user_items) fixed bin
				 init ((linus_data_$max_user_items) 3);
	dcl     ioars_string	 (linus_data_$max_user_items) char (8) var
				 init ((linus_data_$max_user_items) (1)"^.3f");
	dcl     ioars_len		 fixed bin (17);
	dcl     STARS		 char (100) int static options (constant) init ((100)"*");
	dcl     DEFAULT_EXPR_SIZE	 fixed bin (5) int static options (constant) init (17);
	dcl     expr_head		 char (36) var;
	dcl     ANOTHER		 char (8) int static options (constant) init ("-another");
	dcl     EXPR		 fixed bin (2) int static options (constant) init (2);
	dcl     stars_var		 char (one_line.item.len (l)) based (stars_ptr);

	dcl     (
	        linus_data_$p_id,
	        linus_data_$max_user_items,
	        linus_data_$print_col_spaces,
	        linus_data_$pr_buff_len,
	        linus_error_$dup_ctl_args,
	        linus_error_$func_err,
	        linus_error_$incons_args,
	        linus_error_$integer_too_small,
	        linus_error_$inv_arg,
	        linus_error_$integer_too_large,
	        linus_error_$no_data,
	        linus_error_$no_db,
	        linus_error_$no_max_lines,
	        linus_error_$non_integer,
	        linus_error_$print_buf_ovfl,
	        linus_error_$ret_not_valid,
	        linus_error_$too_few_args,
	        linus_error_$too_many_args,
	        mrds_error_$tuple_not_found,
	        sys_info$max_seg_size
	        )			 fixed bin (35) ext;

	dcl     all_seen		 bit (1);		/* on => -all control arg already given */
	dcl     max_seen		 bit (1);		/* on => -max control alreay given */
	dcl     temp_int		 fixed bin (35);	/* temp_int for -max 0 check */
	dcl     MRDS_ITEM		 fixed bin int static options (constant) init (1);
	dcl     temp_desc_ptr	 ptr;
	dcl     buffer_character_string char (out_line.item.len (l)) based;
	dcl     line_buf		 (linus_data_$pr_buff_len) char (1);
	dcl     temp_buf		 (linus_data_$pr_buff_len) char (1);
	dcl     out_buf		 (linus_data_$pr_buff_len) char (1);
	dcl     output_line_buf	 (linus_data_$pr_buff_len) char (1);

	dcl     linus_retrieve	 entry (ptr, ptr, ptr, ptr, ptr, fixed bin (35));
	dcl     linus_table$async_retrieval
				 entry (ptr, fixed bin (35));
	dcl     linus_translate_query$auto	 entry (ptr, ptr);
	dcl     linus_eval_expr
				 entry (ptr, ptr, ptr, fixed bin, fixed bin, fixed bin (35));
	dcl     linus_eval_set_func	 entry (ptr, ptr, fixed bin (35));
	dcl     convert_status_code_	 entry (fixed bin (35), char (8), char (100));
	dcl     cu_$generate_call	 entry (entry, ptr);
	dcl     ioa_		 entry options (variable);
	dcl     ioa_$ioa_switch	 entry options (variable);
	dcl     ioa_$rsnnl		 entry options (variable);
	dcl     iox_$put_chars	 entry (ptr, ptr, fixed bin (21), fixed bin (35));
	dcl     (
	        mdbm_util_$binary_data_class,
	        mdbm_util_$complex_data_class,
	        mdbm_util_$fixed_data_class,
	        mdbm_util_$number_data_class,
	        mdbm_util_$string_data_class
	        )			 entry (ptr) returns (bit (1));
	dcl     dsl_$retrieve	 entry options (variable);
	dcl     work_area		 area (sys_info$max_seg_size) based (lcb.i_o_area_ptr);
	dcl     linus_define_area	 entry (ptr, char (6), fixed bin (35));
	dcl     assign_round_
				 entry (ptr, fixed bin, fixed bin (35), ptr, fixed bin, fixed bin (35));
	dcl     linus_convert_code	 entry (fixed bin (35), fixed bin (35), fixed bin (35));
	dcl     ssu_$abort_line	 entry options (variable);
	dcl     ssu_$abort_subsystem	 entry options (variable);
	dcl     ssu_$arg_count	 entry (ptr, fixed bin);
	dcl     ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21));
	dcl     ssu_$print_message	 entry options (variable);

	ca_ptr, char_ptr, al_ptr, out_line_ptr, line_ptr = null;

	on function_err go to continue;
	on fatal_func_err call func_err;

	expr_results_ptr = addr (expr_results);
	stars_ptr = addr (STARS);
	string (line_buf) = copy (" ", linus_data_$pr_buff_len);
	string (out_buf), string (temp_buf), string (output_line_buf) =
	     string (line_buf);
	num_dims = 1;
	out_data_len, prt_data_len, code, line_count, icode = 0;
	cwt_flag, cw_flag = "0"b;
	first_retrieve, print_end, he_flag = "1"b;
	constant_max_lines, max_lines = 10;		/* Set default print lines */
	target_type = 43;				/* Char * 2  */
	source_type = 44;				/* Char_var * 2  */
	cmpx_float_dec_type = 24;
	desc_ptr = addr (float_dec_59_desc);
	float_dec_type = 2 * descriptor.type;
	float_dec_len =
	     fixed (descriptor.size.scale || "000000"b || descriptor.size.precision)
	     ;
	another_len = 8;				/* There are 8 characters in "-another" */
	caller = 1;				/* For linus_eval_expr */
	line_ptr = null;
	prt_data_ptr = addr (output_line_buf (1));	/* Init */

	if lcb.db_index = 0 then
	     call error (linus_error_$no_db, "");
	if lcb.si_ptr = null then call linus_translate_query$auto (sci_ptr, lcb_ptr); /* try translating it */
	if lcb.si_ptr = null then return; /* No good?  Oh, well */
	destination_ptr = lcb.si_ptr;			/* For linus_eval_expr */
	si_ptr = lcb.si_ptr;
	if ^select_info.se_flags.val_ret then
	     call error (linus_error_$ret_not_valid, "");
	call linus_define_area (lcb.i_o_area_ptr, "I_O_", code);
	if code ^= 0 then
	     call error (code, "");
	allocate one_line in (work_area);
	allocate out_line in (work_area);
	max_seen, all_seen = "0"b;
	i = 1;
	call ssu_$arg_count (sci_ptr, nargs_init);
	if nargs_init ^= 0 then do;
		allocate char_argl in (lcb.static_area);
		on cleanup begin;
			if ca_ptr ^= null
			then free char_argl;
		     end;
		do i = 1 to nargs_init;
		     call ssu_$arg_ptr (sci_ptr, i, char_argl.arg.arg_ptr (i), char_argl.arg.arg_len (i));
		end;
		i = 1;
		do while (i <= char_argl.nargs);
		     if tmp_char = "-no_header" | tmp_char = "-nhe" then
			he_flag = "0"b;		/* Set header flag */
		     else if tmp_char = "-max" then do;
			     if max_seen then
				call error (linus_error_$dup_ctl_args, "-max");
			     if i = char_argl.nargs then
				call error (linus_error_$no_max_lines, "");
			     else if all_seen then
				call error (linus_error_$incons_args, "-max and -all");
			     else do;
				     i = i + 1;
				     if substr (tmp_char, 1, 1) = "-" then
					call
					     error (linus_error_$no_max_lines,
					     "before " || tmp_char);
				     call integer_check ((char_argl.arg.arg_len (i)));
				     temp_int = fixed (tmp_char);
				     if temp_int = 0 then
					call
					     error (linus_error_$integer_too_small,
					     "for -max LINES");
				     constant_max_lines, max_lines = temp_int; /* Set if maximum print lines */
				     i = i + 1;
				     if i ^> char_argl.nargs then
					if substr (tmp_char, 1, 1) ^= "-" then
					     call
						error (linus_error_$too_many_args,
						"for -max LINES");
				     i = i - 1;
				     max_seen = "1"b;
				end;
			end;
		     else if tmp_char = "-all" | tmp_char = "-a" then do;
			     if max_seen then
				call error (linus_error_$incons_args, "-all and -max");
			     max_lines = 999999999;
			     all_seen = "1"b;
			end;
		     else if tmp_char = "-col_widths_trunc" | tmp_char = "-cwt" then do;
			     if cwt_flag then
				call error (linus_error_$dup_ctl_args, "-col_width_trunc");
			     if cw_flag then
				call
				     error (linus_error_$incons_args,
				     "-col_width_trunc and -col_width");
			     cwt_flag = "1"b;
			     call cw_specified;
			end;
		     else if tmp_char = "-col_widths" | tmp_char = "-cw" then do;
			     if cwt_flag then
				call
				     error (linus_error_$incons_args,
				     "-cold_width and -col_width_trunc");
			     if cw_flag then
				call error (linus_error_$dup_ctl_args, "-col_width");
			     cw_flag = "1"b;
			     call cw_specified;
			end;
		     else if tmp_char = "-no_end" | tmp_char = "-ne" then
			print_end = "0"b;
		     else call error (linus_error_$inv_arg, tmp_char);
						/* Print error */
		     i = i + 1;
		end;
	     end;
	if ^cw_flag then /* make sure ioa control string is blank */
	     do l = 1 to select_info.n_user_items;	/* so that no scale adjustment is made */
		if ^(select_info.user_item.item_type (l) = EXPR | select_info.set_fn)
		then ioars_string (l) = "";
	     end;

	call print_layout;				/* Fix format for print data */
	if select_info.prior_sf_ptr ^= null then
	     call linus_eval_set_func (lcb_ptr, select_info.prior_sf_ptr, icode);
						/* evaluate prior set functions */
	if icode ^= 0 & icode ^= mrds_error_$tuple_not_found then
	     call error (icode, "");
	if select_info.set_fn then do;		/* set function to be applied */
		call
		     linus_eval_set_func (lcb_ptr, select_info.user_item.item_ptr (1),
		     icode);
		if icode = 0 then
		     call print_line;
	     end;
	else do;
		call linus_table$async_retrieval (lcb_ptr, icode);
		if icode ^= 0 then
		     call error (icode, "");

		call linus_retrieve (lcb_ptr, ca_ptr, char_ptr, al_ptr, e_ptr, icode);
		char_desc.arr.var (1) = addr (another_len) -> arg_len_bits.len;
						/* Set up for additional retrievals */
		num_ptrs = arg_list.arg_count;
		arg_list.arg_des_ptr (2) = addr (ANOTHER);
		do while (icode = 0 & max_lines > line_count);
		     call print_line;
continue:
		     if lcb.timing_mode then
			initial_mrds_vclock = vclock;
		     call cu_$generate_call (dsl_$retrieve, al_ptr); /* Retrieve "-another" */
		     if lcb.timing_mode then
			lcb.mrds_time = lcb.mrds_time + vclock - initial_mrds_vclock;
		     if constant_max_lines ^= 0 & max_lines = line_count & icode = 0 then
			call more_response;
		end;
	     end;
	if icode ^= 0 & icode ^= mrds_error_$tuple_not_found then
	     call error (icode, "");
	if first_retrieve then
	     call no_data;
	if print_end then
	     call ioa_ ("(END)^/");

exit:
	if ca_ptr ^= null
	then free char_argl;
	return;

no_data:
     proc;
	call
	     convert_status_code_ (linus_error_$no_data, short_message,
	     long_message);
	call ioa_$ioa_switch (iox_$user_output, "^/^a^/", long_message);
	code = 0;
	goto exit;
     end no_data;

cw_specified:
     proc;

	dcl     dot_flag		 bit (1);

	out_line_index, line_buf_index = 1;
	cw_flag = "1"b;				/* Turn col_widths flag ON */
	do l = 1 to select_info.n_user_items;		/* Initialize one_line structure */
	     dot_flag = "0"b;			/* init */
	     i = i + 1;				/* Go to next item in char_argl structure */
	     if i > char_argl.nargs then
		call error (linus_error_$too_few_args, "column widths");
						/* Input argument error */
	     if substr (tmp_char, 1, 1) = "-" then
		call
		     error (linus_error_$too_few_args,
		     "column widths before " || tmp_char);
	     temp = search (tmp_char, ".");		/* search for user specified scale */
	     if temp = 0 then do;
		     temp = char_argl.arg.arg_len (i);
		     if select_info.user_item.item_type (l) ^= EXPR & ^select_info.set_fn
		     then ioars_string (l) = "";
		end;
	     else do;
		     ioars_string (l) =
			"^."
			|| substr (tmp_char, temp + 1, char_argl.arg.arg_len (i) - temp)
			|| "f";
		     if verify (after (tmp_char, "."), "-0123456789") ^= 0
			| length (after (tmp_char, ".")) > 4
			| (index (after (tmp_char, "."), "-") ^= 0
			& (index (substr (after (tmp_char, "."), 2), "-") ^= 0
			| substr (after (tmp_char, "."), 1, 1) ^= "-")) then
			call
			     error (linus_error_$non_integer,
			     "scale factor in column " || ltrim (char (l)) || " width");
		     fix_of_scale (l) = fixed (after (tmp_char, "."));
		     if fix_of_scale (l) < -128 | fix_of_scale (l) > 127 then
			call
			     error (linus_error_$inv_arg,
			     "scale > 127, or < -128 in column " || ltrim (char (l))
			     || " width");
		     temp = temp - 1;		/* number of column spaces or precision */
		     dot_flag = "1"b;		/* period found in this column specification */
		end;
	     call integer_check (temp);
	     out_line.item.len (l) = fixed (substr (tmp_char, 1, temp));
	     if out_line.item.len (l) = 0 then
		call
		     error (linus_error_$integer_too_small,
		     "column width argument " || ltrim (char (l)));
	     if dot_flag then do;
		     if select_info.user_item.item_type (l) = MRDS_ITEM then
			temp_desc_ptr =
			     addr (select_info.user_item.item_ptr (l) -> user_item.desc);
		     else temp_desc_ptr = addr (select_info.user_item.rslt_desc (l));
		     if ^mdbm_util_$number_data_class (temp_desc_ptr) then
			call
			     error (linus_error_$inv_arg,
			     "scale in column " || ltrim (char (l))
			     || " width for string data");
		     out_line.item.len (l) = out_line.item.len (l) + 1;
						/* for period */
		end;
	     out_line.item.ptr (l) = addr (out_buf (out_line_index));
	     out_line_index = out_line_index + out_line.item.len (l);
	     out_data_len =
		out_data_len + out_line.item.len (l) + linus_data_$print_col_spaces;
						/*
						   Set up for output */
	     if out_data_len > linus_data_$pr_buff_len - 1 then
		call
		     error (linus_error_$print_buf_ovfl,
		     "column widths total > max of "
		     || ltrim (char (linus_data_$pr_buff_len - 1)));
	end;

/* check for too many col_widths */

	i = i + 1;
	if i ^> char_argl.nargs then
	     if substr (tmp_char, 1, 1) ^= "-" then
		call error (linus_error_$too_many_args, tmp_char);
	i = i - 1;
     end cw_specified;

print_layout:
     proc;

	mrds_item_index = 0;
	search_for_mrds_item = "0"b;
	line_buf_index = 1;				/* Init index to line buffer */
	do l = 1 to select_info.n_user_items;		/* Find length of each item to be printed */
	     mrds_item_index = mrds_item_index + 1;
	     one_line.item.len (l) = 0;
	     if select_info.user_item.item_type (l) = EXPR | select_info.set_fn
	     then do;
		     one_line.item.len (l) = 3;	/* for F() */
		     search_for_mrds_item = "1"b;
		     if mdbm_util_$number_data_class (
			addr (select_info.user_item.rslt_desc (l))) then do;
			     if cw_flag then
				item_length = out_line.item.len (l);
			     else item_length = DEFAULT_EXPR_SIZE;
			end;
		     else item_length = select_info.user_item.rslt_assn_len (l);
		end;
	     else do;
		     if search_for_mrds_item then
			do mrds_item_index = mrds_item_index
			     to select_info.n_mrds_items
			     while (select_info.user_item.item_ptr (l)
			     ^= addr (select_info.mrds_item (mrds_item_index)));
			end;
		     call
			calc_len ((select_info.mrds_item.desc (mrds_item_index)),
			item_length);
		     search_for_mrds_item = "0"b;
		end;

	     one_line.item.len (l) =
		one_line.item.len (l) + length (select_info.user_item.name (l));
						/* Get number of characters in attribute
						   or function name */
	     if one_line.item.len (l) < item_length then
		one_line.item.len (l) = item_length;	/* Set width of column
						   to larger of header or data */
	     one_line.item.ptr (l) = addr (line_buf (line_buf_index));
	     line_buf_index = line_buf_index + one_line.item.len (l);
	     prt_data_len =
		prt_data_len + one_line.item.len (l) + linus_data_$print_col_spaces;
						/*
						   Init for tmp_print_data */
	     if prt_data_len > linus_data_$pr_buff_len - 1/* subtract one for newline character */
	     then call
		     error (linus_error_$print_buf_ovfl,
		     "print line exceeds maximum length of "
		     || ltrim (char (linus_data_$pr_buff_len - 1)));
	end;
     end print_layout;



calc_len:
     proc (descrip, length);

/* Calculate the length of a print field given a descriptor */

	dcl     descrip		 bit (36);
	dcl     length		 fixed bin (35);
	dcl     prec_len		 fixed bin;
	dcl     scale_len		 fixed bin (11);
	dcl     fixed_bin_11_ovrly	 fixed bin (11) unal based;


	desc_ptr = addr (descrip);			/* Point to descriptor */
	prec_len = fixed (descriptor.size.precision);
	if mdbm_util_$binary_data_class (desc_ptr) then
	     length = prec_len / 3 + 5;		/* binary */
	else if mdbm_util_$number_data_class (desc_ptr) then
	     length = prec_len + 3;			/* decimal */
	else if mdbm_util_$string_data_class (desc_ptr) then
	     length = fixed (descriptor.size.scale || descriptor.size.precision);
	else length = 20;
	if mdbm_util_$number_data_class (desc_ptr) then do;
		if mdbm_util_$fixed_data_class (desc_ptr) then do; /* fixed */
			scale_len = addr (descriptor.size.scale) -> fixed_bin_11_ovrly;
						/* get signed scale */
			if scale_len = 0 | (scale_len > 0 & prec_len >= scale_len) then
			     ;			/* no scale_len factor */
			else if cw_flag & ioars_string (l) ^= "" then
			     ;			/* use specified length instead */
			else length = length + ceil (log10 (abs (scale_len)));
						/* largest scale will be f-128 to f+127 */
		     end;
		else length = length + 5;		/* float */
	     end;
	if mdbm_util_$complex_data_class (desc_ptr) then
	     length = length * 2;

	if cw_flag & ioars_string (l) ^= "" then /* length has been specified */
	     if ^mdbm_util_$string_data_class (desc_ptr) then /* exclude string types */
		length = out_line.item.len (l);	/* use specified length */
     end calc_len;

print_header:
     proc;

	dcl     (type, j)		 fixed bin;

	search_for_mrds_item, he_flag = "0"b;
	mrds_item_index = 0;
	do l = 1 to select_info.n_user_items;
	     mrds_item_index = mrds_item_index + 1;
	     out_item = "";
	     item_length = length (select_info.user_item.name (l));
	     target_ptr = out_line.item.ptr (l);
	     if select_info.user_item.item_type (l) = EXPR then do;
		     search_for_mrds_item = "1"b;	/* the next data base user item will need to find desc */
		     expr_head = "F(" || select_info.user_item.name (l) || ")";
						/* add F to tuple attribute */
		     source_ptr = addr (expr_head);
		     item_length = item_length + 3;
		end;
	     else if select_info.set_fn then
		source_ptr = addr (select_info.user_item.name (l));
	     else do;				/* user item is selected from data base */
		     source_ptr = addr (select_info.user_item.name (l));
		     if search_for_mrds_item then /* the previous item was an expression */
			do mrds_item_index = mrds_item_index
			     to select_info.n_mrds_items
			     while (select_info.user_item.item_ptr (l)
			     ^= addr (select_info.mrds_item (mrds_item_index)));
			end;
		     desc_ptr = addr (select_info.mrds_item.desc (mrds_item_index));
		     search_for_mrds_item = "0"b;
		     type = descriptor.type;
		     if mdbm_util_$number_data_class (desc_ptr) & ioars_string (l) = ""
		     then
			do j = 1 to out_line.item.len (l) - item_length;
			     target_ptr = addr (target_ptr -> offset (10));
			end;
		end;
	     call
		assign_round_ (target_ptr, target_type, item_length, source_ptr,
		source_type, item_length);
	end;
	if ^cw_flag then
	     out_buf = line_buf;
	call set_up_output;
	call ioa_ ("");
	call print_a_line;				/* Print header */
	call ioa_ ("");
     end print_header;

print_line:
     proc;

	do l = 1 to select_info.n_user_items;
	     if select_info.user_item.item_type (l) = EXPR | select_info.set_fn
	     then do;				/* Evaluate expression */
		     if ^select_info.set_fn then
			call
			     linus_eval_expr (lcb_ptr,
			     select_info.user_item.item_ptr (l), destination_ptr, caller,
			     l, icode);
		     if icode ^= 0 then
			call error (icode, "");
		     picture_output = stars_var;	/* init */
		     if mdbm_util_$number_data_class (
			addr (select_info.user_item.rslt_desc (l))) then do;
						/* this is really an expr
						   -- not char or string scalar function */
			     if mdbm_util_$complex_data_class (
				addr (select_info.user_item.rslt_desc (l))) then do;
				     call
					assign_round_ (expr_results_ptr, cmpx_float_dec_type,
					float_dec_len, select_info.user_item.rslt_assn_ptr (l),
					select_info.user_item.rslt_assn_type (l),
					select_info.user_item.rslt_assn_len (l));
				     call
					ioa_$rsnnl (ioars_string (l), char_122, ioars_len,
					expr_results);
				end;
			     else do;
				     call
					assign_round_ (expr_results_ptr, float_dec_type, float_dec_len,
					select_info.user_item.rslt_assn_ptr (l),
					select_info.user_item.rslt_assn_type (l),
					select_info.user_item.rslt_assn_len (l));
				     call
					ioa_$rsnnl (ioars_string (l), char_61, ioars_len,
					expr_results);
				     ioars_len =
					length (before (char_61, ".")) + fix_of_scale (l) + 1;
				end;
			     if ioars_len <= one_line.item.len (l) | cwt_flag then
				call
				     ioa_$rsnnl (ioars_string (l), picture_output, ioars_len,
				     expr_results);
			     else /* adjust output format */
				if first_retrieve & ^cw_flag then do; /* adjust output format */
				     temp = ioars_len - one_line.item.len (l);
				     prt_data_len = prt_data_len + temp; /* output buffer length */
				     do i = l to select_info.n_user_items;
					one_line.item.len (l) = one_line.item.len (l) + temp;
					do j = 1 to temp while (l ^= select_info.n_user_items);
					     one_line.item.ptr (l + 1) =
						addr (one_line.item.ptr (l + 1) -> offset (10));
					end;
				     end;
				     call
					ioa_$rsnnl (ioars_string (l), picture_output, ioars_len,
					expr_results);
				end;

			     if cw_flag then
				call overflow_check;/* check column width with data retrieved */

			end;
		     else do;			/* output result of non-arithmetic scalar function */

			     call
				assign_round_ (one_line.item.ptr (l), target_type,
				one_line.item.len (l),
				select_info.user_item.rslt_assn_ptr (l),
				select_info.user_item.rslt_assn_type (l),
				select_info.user_item.rslt_assn_len (l));

			     if cw_flag then
				call overflow_check;/* check column width with data retrieved */

			end;
		end;
	     else do;
		     user_item_ptr = select_info.user_item.item_ptr (l);
						/* init user item structure */

/*		     temp = floor (user_item.assn_type / 2); */
		     if mdbm_util_$number_data_class (addr (user_item.desc))
			& ioars_string (l) ^= "" then do; /* make adjustment for specified scale */
			     call
				assign_round_ (expr_results_ptr, float_dec_type, float_dec_len,
				user_item.arg_ptr, user_item.assn_type, user_item.assn_len);

			     call
				ioa_$rsnnl (ioars_string (l), char_61, ioars_len,
				expr_results);
			     ioars_len =
				length (before (char_61, ".")) + fix_of_scale (l) + 1;
			     if ioars_len > one_line.item.len (l) & ^cwt_flag
						/* output data does not fit
						   in the space areserved */
			     then picture_output = stars_var; /* print asterisks */
			     else /* prepare data for output */
				call
				     ioa_$rsnnl (ioars_string (l), picture_output, ioars_len,
				     expr_results);
			end;
		     else call
			     assign_round_ (one_line.item.ptr (l), target_type,
			     one_line.item.len (l), user_item.arg_ptr,
			     user_item.assn_type, user_item.assn_len);

		     if cw_flag then
			call overflow_check;

		end;
	end;
	first_retrieve = "0"b;
	if ^cw_flag then do;
		out_buf = line_buf;
		out_line = one_line;
	     end;
	else prt_data_len = out_data_len;
	if he_flag then do;				/* print header */
		string (temp_buf) = string (out_buf);
		call print_header;
		string (out_buf) = string (temp_buf);
	     end;
	call set_up_output;
	call print_a_line;				/* print one line of data */
	line_count = line_count + 1;
     end print_line;

overflow_check:
     proc;


	dcl     t1_char		 char (t1_len) based (t1_ptr);
	dcl     t1_len		 fixed bin (35);
	dcl     type		 fixed bin;
	dcl     t1_ptr		 ptr;
	dcl     stringsize		 condition;

	t1_ptr = null;

	if out_line.item.len (l) < one_line.item.len (l) then do;
		t1_len = out_line.item.len (l) + 1;
		allocate t1_char in (work_area);
		t1_char = " ";
		if select_info.user_item.item_type (l) = EXPR | select_info.set_fn then
		     call
			assign_round_ (t1_ptr, target_type, t1_len,
			select_info.user_item.rslt_assn_ptr (l),
			select_info.user_item.rslt_assn_type (l),
			select_info.user_item.rslt_assn_len (l));
		else do;
			on condition (stringsize) ;
			call
			     assign_round_ (t1_ptr, target_type, t1_len, user_item.arg_ptr,
			     user_item.assn_type, user_item.assn_len);
			revert stringsize;
		     end;

		temp = one_line.item.len (l) - out_line.item.len (l);
		user_item_ptr = select_info.user_item.item_ptr (l);
		desc_ptr = addr (user_item.desc);
		type = descriptor.type;
		if mdbm_util_$string_data_class (addr (user_item.desc)) then do;
			if substr (t1_char, t1_len) ^= " " then
			     if ^cwt_flag then
				picture_output = stars_var;
			out_item = substr (picture_output, 1, out_line.item.len (l));
		     end;
		else do;
			if substr (picture_output, temp, 1) ^= " " then
			     if ^cwt_flag then
				picture_output = stars_var;
			out_item = substr (picture_output, temp + 1);
		     end;
	     end;
	else do;
		temp = out_line.item.len (l) - one_line.item.len (l);
		substr (out_item, temp + 1) = picture_output;
	     end;

	t1_ptr = null;

     end overflow_check;



set_up_output:
     proc;

/* Merge line_buf and output_line_buf leaving spaces between each column */

	out_line_index, output_line_buf_index = 1;	/* Init */
	do l = 1 to out_line.num_items;		/* Move data into output buffer for printing */
	     addr (output_line_buf (output_line_buf_index))
		-> buffer_character_string =
		addr (out_buf (out_line_index)) -> buffer_character_string;
	     out_line_index = out_line_index + out_line.item.len (l);
	     output_line_buf_index =
		output_line_buf_index + out_line.item.len (l)
		+ linus_data_$print_col_spaces;
	     if output_line_buf_index > linus_data_$pr_buff_len - 1
						/* subtract 1 for new line character */
	     then call
		     error (linus_error_$print_buf_ovfl,
		     "print line exceeds maximum length of "
		     || ltrim (char (linus_data_$pr_buff_len - 1)));
	end;


     end set_up_output;



integer_check:
     proc (no_of_intg);

	dcl     no_of_intg		 fixed bin;

/* Check for integer in char_argl */

	if verify (substr (tmp_char, 1, no_of_intg), "0123456789") ^= 0 then
	     call error (linus_error_$non_integer, "");
	else if no_of_intg > 9 then
	     call error (linus_error_$integer_too_large, "");

     end integer_check;




print_a_line:
     proc;

	dcl     print_line_character_string char (prt_data_len)
				 based (addr (output_line_buf (1)));
	dcl     NEWLINE		 char (1) int static options (constant) init ("
");

	n_bytes = length (rtrim (print_line_character_string)) + 1;
	output_line_buf (n_bytes) = NEWLINE;		/* add newline character */
	call iox_$put_chars (iox_$user_output, prt_data_ptr, n_bytes, icode);
	if icode ^= 0 then
	     call error (icode, "");

	num_bytes = n_bytes;
	output_line_buf (n_bytes) = " ";

     end print_a_line;



error:
     proc (err_code, msg);

	dcl     err_code		 fixed bin (35);
	dcl     msg		 char (*);

	if ca_ptr ^= null
	then free char_argl;
	call linus_convert_code (err_code, out_code, linus_data_$p_id);
	if code = 0
	then call ssu_$abort_line (sci_ptr, out_code, msg);
	else call ssu_$abort_subsystem (sci_ptr, out_code, msg);

     end error;



func_err:
     proc;


	call
	     linus_convert_code (linus_error_$func_err, out_code, linus_data_$p_id);
	call ssu_$print_message (sci_ptr, out_code);

	go to continue;

     end func_err;



more_response:
     proc;
	dcl     linus_query            entry (ptr, char(*) var, char(*) var);
	dcl     verify_more		 char (5) var;
	dcl     more_test		 bit (1) aligned;
          dcl     NL                     char(1) int static options (constant) init ("
");

	more_test = "0"b;
	call linus_query (lcb_ptr, verify_more, NL||"More? ");
	do while (^more_test);
	     more_test = "1"b;
	     if verify_more = "all" | verify_more = "a" then
		max_lines = 999999999;
	     else if verify_more = "yes" | verify_more = "y" then
		max_lines = max_lines + constant_max_lines;
	     else if verify_more = "no" | verify_more = "n" then
		print_end = "0"b;			/* do not print (END) */
	     else do;
		call linus_query (lcb_ptr, verify_more, "Please answer ""yes"", ""no"" or ""all""."||NL);
		more_test = "0"b;
		end;
	end;
	call ioa_ ("");
     end more_response;

     end linus_print;
