/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

linus_lila_build_scfn_str:
     proc (lcb_ptr, lsh_ptr, td_ptr, fn_ptr, fn_var, code);

/* DESCRIPTION:

   This  procedure  translates a linus scalar function into an equivalent MRDS
   scalar function string, suitable for inclusion in a MRDS -where clause.



   HISTORY:

   77-08-01 J. A. Weeldreyer: Initially written.

   78-04-01  J.   A.   Weeldreyer:  Modified  to  give  better diagnostics for
   constant expr.  of scalar fun.

   78-08-02 J. A. Weeldreyer: Modified to conform to new token data.

   80-03-13   Rickie   E.    Brinegar:   Modified  to  base  a  work  area  on
   lcb.lila_area_ptr instead of getting system free area.

   81-06-17    Rickie    E.    Brinegar:   Modified   to   remove   calls   to
   dsl_v1_$get_fn_info.
   
   81-07-15 Rickie E. Brinegar: Removed useless cleanup condition handler.

*/

%include linus_lcb;
%page;
%include linus_ls_header;
%page;
%include linus_ls_block;
%page;
%include linus_token_data;
%page;
%include linus_set_fn;
%page;
%include linus_ef_data;
%page;
%include linus_mrds_block;
%page;
%include linus_variables;
%page;
%include mrds_scalfn_info;
%page;
%include mdbm_descriptor;

	dcl     (
	        code,				/* Output: return code */
	        icode,				/* internal status code */
	        temp_pos
	        )			 fixed bin (35);	/* current pos. for look-ahead */

	dcl     (
	        nargs,				/* current fn. arg count */
	        i
	        )			 fixed bin;	/* internal index */

	dcl     initial_mrds_vclock	 float bin (63);

	dcl     (
	        done,				/* completion flag */
	        lp_flag,				/* on if need opening paren. */
	        rp_flag,				/* on if closing paren OK */
	        comma_flag,				/* on if comma OK */
	        arg_flag
	        )			 bit (1) unal;	/* on if arg OK */

	dcl     (
	        fn_ptr,				/* Output: ptr to mrds block for fun. */
	        fn_hd_ptr,
	        lss_ptr				/* pointer to ls_set structure */
	        )			 ptr;		/* pointer to last of fn. args */

	dcl     fn_var		 char (*);	/* Output: var. name for fn. */
	dcl     (
	        variable,				/* variable name */
	        master_var
	        )			 char (32);	/* master variable for comparison */
	dcl     fn_name		 char (32) var;	/* name of function */
	dcl     work_area		 area (sys_info$max_seg_size) based (lcb.lila_area_ptr);
	dcl     token		 char (token_data.length) based (token_data.t_ptr);
	dcl     1 temp_tok		 aligned like token_data; /* for look-ahead */
	dcl     temp_token		 char (temp_tok.length) based (temp_tok.t_ptr);
						/* for look-ahead */
	dcl     1 expr_data		 aligned like ef_data;

	dcl     (
	        linus_error_$scfn_syntax,
	        linus_error_$inv_tup_var,
	        linus_error_$scfn_nargs,
	        linus_error_$const_expr_fn,
	        linus_data_$lila_id,
	        linus_data_$max_range_items,
	        linus_data_$max_pred_stack_size,
	        linus_data_$max_expr_items,
	        mrds_data_$max_select_items,
	        mrds_data_$max_token_size,
	        sys_info$max_seg_size
	        )			 fixed bin (35) ext;

	dcl     (addr, addrel, fixed, length, null, rel, vclock) builtin;

	dcl     linus_lila_get_token	 entry (ptr, ptr, fixed bin (35), ptr, fixed bin (35));
	dcl     linus_lila_error	 entry (ptr, ptr, fixed bin (35), char (*));
	dcl     linus_lila_set_fn	 entry (ptr, ptr, ptr, ptr, fixed bin (35));
	dcl     linus_lila_build_expr_str
				 entry (ptr, ptr, ptr, ptr, char (*), fixed bin (35));
	dcl     linus_lila_build_scfn_str
				 entry (ptr, ptr, ptr, ptr, char (*), fixed bin (35));
	dcl     linus_convert_code	 entry (fixed bin (35), fixed bin (35), fixed bin (35));
	dcl     dsl_$get_fn_info
				 entry (fixed bin (35), char (*), ptr, ptr, fixed bin (35));

	sfi_ptr,					/* initialize */
	     fn_hd_ptr, mblk_ptr = null;
	master_var = "";
	num_dims, nargs = 0;
	lsb_ptr = ls_header.cur_ptr;
	lss_ptr = ls_block.back_ptr;

	fn_name = token;				/* save function name from passed in token */
	token_data.key = NULL;			/* force new token */

	lp_flag = "1"b;				/* init. state flags */
	arg_flag, comma_flag, rp_flag = "0"b;

	done = "0"b;				/* init completion flag */
	do while (^done);				/* main processing loop */

	     if token_data.key = NULL then do;		/* if need new token */
		     call
			linus_lila_get_token (lcb_ptr, lsh_ptr, ls_header.cur_pos,
			td_ptr, icode);
		     if icode ^= 0 then
			call linus_lila_error (lcb_ptr, lsh_ptr, icode, token);
		end;

	     go to token_proc (token_data.key);

token_proc (0):					/* null */
token_proc (8):					/* * */
token_proc (9):					/* / */
token_proc (10):					/* + */
token_proc (11):					/* - */
token_proc (12):					/* table name */
token_proc (13):					/* row table pair */
token_proc (14):					/* union */
token_proc (15):					/* inter */
token_proc (16):					/* differ */
token_proc (17):					/* row designator */
token_proc (18):					/* { */
token_proc (19):					/* } */
token_proc (20):					/* select */
token_proc (21):					/* ^ */
token_proc (22):					/* & */
token_proc (23):					/* | */
token_proc (24):					/* = */
token_proc (25):					/* ^= */
token_proc (26):					/* > */
token_proc (27):					/* >= */
token_proc (28):					/* < */
token_proc (29):					/* <= */
token_proc (30):					/* from */
token_proc (31):					/* where */
token_proc (32):					/* dup */
token_proc (33):					/* unique */
	     call
		linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$scfn_syntax, token)
		;				/* we should never see these */
	     done = "1"b;
	     go to next;

token_proc (1):					/* ) */
	     if ^rp_flag then /* not expected */
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$scfn_syntax,
		     token);
	     call finish;				/* finish the MRDS scal fn. string */
	     done = "1"b;
	     token_data.key = NULL;
	     go to next;

token_proc (2):					/* column spec. */
	     if ^arg_flag then /* if not expected */
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$scfn_syntax,
		     token);
	     temp_pos = ls_header.cur_pos;
	     call
		linus_lila_get_token (lcb_ptr, lsh_ptr, temp_pos, addr (temp_tok),
		icode);				/* look ahead at next token */
	     if icode ^= 0 then
		call linus_lila_error (lcb_ptr, lsh_ptr, icode, temp_token);
	     if temp_tok.key >= STAR & temp_tok.key <= MINUS then
		/* if is really expr. */
		call process_expr;			/* go process it */
	     else do;				/* is really column spec. */
		     call check_var ((token_data.mvar));/* make sure tup. var. is consistent */
		     call set_ord_arg (token_data.mvar || "." || token);
						/* make mrds block and add to arg list */
		     token_data.key = NULL;		/* force new token */
		end;				/* if column spec. */
	     comma_flag, rp_flag = "1"b;		/* can now accept ) */
	     arg_flag = "0"b;
	     go to next;

token_proc (3):					/* linus variable */
	     if ^arg_flag then /* not expected */
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$scfn_syntax,
		     token);
	     lv_ptr = lcb.lv_ptr;			/* get linus var. info */
	     do i = 1 to variables.nvars
		while (token ^= variables.var_info.name (i));
	     end;					/* guaranteed to find it */
	     call
		set_val_arg (variables.var_info.var_ptr (i),
		addr (variables.var_info.desc (i)));	/* add to arg list */
	     token_data.key = NULL;
	     comma_flag, rp_flag = "1"b;
	     arg_flag = "0"b;
	     go to next;

token_proc (4):					/* constant */
	     if ^arg_flag then /* not expected */
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$scfn_syntax,
		     token);
	     call set_ord_arg (token);		/* add to arg list */
	     token_data.key = NULL;
	     comma_flag, rp_flag = "1"b;
	     arg_flag = "0"b;
	     go to next;

token_proc (5):					/* set function */
	     if ^arg_flag then /* not expected */
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$scfn_syntax,
		     token);
	     call
		linus_lila_set_fn (lcb_ptr, lsh_ptr, td_ptr, addr (expr_data),
		icode);				/* translate the set fn. */
	     if icode ^= 0 then
		call linus_lila_error (lcb_ptr, lsh_ptr, icode, token);
	     call
		set_val_arg (expr_data.assn_ptr,
		addr (expr_data.ef_ptr -> linus_set_fn.rslt_desc));
						/* add to arg list */
	     comma_flag, rp_flag = "1"b;
	     arg_flag = "0"b;
	     go to next;

token_proc (6):					/* scalar function */
	     if ^arg_flag then /* not expected */
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$scfn_syntax,
		     token);
	     variable = "";
	     call
		linus_lila_build_scfn_str (lcb_ptr, lsh_ptr, td_ptr, mblk_ptr,
		variable, icode);			/* translate the fn. */
	     if icode ^= 0 then
		call linus_lila_error (lcb_ptr, lsh_ptr, icode, token);
	     call check_var (variable);		/* see if tup var consist. */
	     mrds_block.fwd_ptr = fn_hd_ptr;		/* chain fn. into arg list */
	     fn_hd_ptr = mblk_ptr;
	     mblk_ptr = null;
	     nargs = nargs + 1;
	     comma_flag, rp_flag = "1"b;
	     arg_flag = "0"b;
	     go to next;

token_proc (7):					/* ( */
	     if lp_flag then do;			/* if opening ( */
		     lp_flag,			/* reset state flags */
			comma_flag, rp_flag = "0"b;
		     arg_flag = "1"b;
		     token_data.key = NULL;
		end;
	     else if arg_flag then do;		/* if expr. */
		     call process_expr;
		     rp_flag = "1"b;
		end;
	     else call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$scfn_syntax,
		     token);
	     go to next;

token_proc (34):					/* , */
	     if comma_flag then do;
		     rp_flag, comma_flag = "0"b;
		     arg_flag = "1"b;
		     token_data.key = NULL;
		end;
	     else call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$scfn_syntax,
		     token);
	     go to next;

next:
	end;					/* main processing loop */

	fn_var = master_var;			/* pass info back to caller */
	fn_ptr = fn_hd_ptr;
	code = 0;
	return;

check_var:
     proc (var);

/* Procedure to ensure that scal. fn. uses only one tuple variable */

	dcl     var		 char (*);

	if var = "" then
	     call
		linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$const_expr_fn,
		"");
	if master_var = "" then /* if first time */
	     master_var = var;
	else if var ^= master_var then /* not same */
	     call
		linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$inv_tup_var, var)
		;

     end check_var;

finish:
     proc;

/* Procedure to finish up the MRDS function string */

	dcl     ucode		 fixed bin (35);

	if lcb.timing_mode then
	     initial_mrds_vclock = vclock;
	call
	     dsl_$get_fn_info (lcb.db_index, (fn_name), lcb.lila_area_ptr, sfi_ptr,
	     icode);
	if lcb.timing_mode then
	     lcb.mrds_time = lcb.mrds_time + (vclock - initial_mrds_vclock);
	if icode ^= 0 then do;			/* trouble getting info for fn. */
		call linus_convert_code (icode, ucode, linus_data_$lila_id);
		call linus_lila_error (lcb_ptr, lsh_ptr, ucode, (fn_name));
	     end;
	if scalfn_info.nargs > 0 then /* if fixed arg fun. */
	     if nargs ^= scalfn_info.nargs then
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$scfn_nargs,
		     (fn_name));
	sfi_ptr = null;
	do while (nargs > 1);			/* put all args into one arg list string */
	     call combine;
	end;
	ms_len_init =
	     length (fn_hd_ptr -> mrds_block.mrds_string) + length (fn_name) + 3;
	nval_args_init = fn_hd_ptr -> mrds_block.nval_args; /* alloc. and fill in final fn. string */
	allocate mrds_block in (work_area);
	mrds_block.fwd_ptr = null;
	mrds_block.mrds_string =
	     fn_name || " (" || fn_hd_ptr -> mrds_block.mrds_string || ")";
	mrds_block.val_args = fn_hd_ptr -> mrds_block.val_args;
	fn_hd_ptr = null;
	fn_hd_ptr = mblk_ptr;
	mblk_ptr = null;

combine:
     proc;

/* Procedure to combine top two strings in list into one */

	dcl     (b1p, b2p)		 ptr;
	dcl     i			 fixed bin;

	b2p = fn_hd_ptr;				/* top operand */
	b1p = b2p -> mrds_block.fwd_ptr;		/* prev. operand */
	ms_len_init = 1 + length (b1p -> mrds_block.mrds_string)
	     /* set up and fill in mrds block for combination */
	     + length (b2p -> mrds_block.mrds_string);
	nval_args_init =
	     b1p -> mrds_block.nval_args + b2p -> mrds_block.nval_args;
	allocate mrds_block in (work_area);
	mrds_block.fwd_ptr = b1p -> mrds_block.fwd_ptr;	/* replace top two terms */
	mrds_block.mrds_string =
	     b1p -> mrds_block.mrds_string || " " || b2p -> mrds_block.mrds_string;
	do i = 1 to b1p -> mrds_block.nval_args;	/* args from first operand */
	     mrds_block.val_args.arg_ptr (i) =
		b1p -> mrds_block.val_args.arg_ptr (i);
	     mrds_block.val_args.desc_ptr (i) =
		b2p -> mrds_block.val_args.desc_ptr (i);
	end;
	do i = b1p -> mrds_block.nval_args + 1 to mrds_block.nval_args;
						/* args from second operand */
	     mrds_block.val_args.arg_ptr (i) =
		b2p
		-> mrds_block.val_args.arg_ptr (i - b1p -> mrds_block.nval_args);
	     mrds_block.val_args.desc_ptr (i) =
		b2p
		-> mrds_block.val_args.desc_ptr (i - b1p -> mrds_block.nval_args);
	end;
	nargs = nargs - 1;
	fn_hd_ptr = mblk_ptr;			/* chain in new operand */
	mblk_ptr = null;
	b1p = null;
	b2p = null;

     end combine;

     end finish;

set_ord_arg:
     proc (str);

/* procedure to fill in a mrds block for arg with no values */

	dcl     str		 char (*);

	ms_len_init = length (str);
	nval_args_init = 0;
	allocate mrds_block in (work_area);
	mrds_block.fwd_ptr = fn_hd_ptr;
	mrds_block.mrds_string = str;
	fn_hd_ptr = mblk_ptr;
	mblk_ptr = null;
	nargs = nargs + 1;
	if token_data.must_free then
	     token_data.t_ptr = null;

     end set_ord_arg;

set_val_arg:
     proc (arg_ptr, desc_ptr);

/* Procedure to fill in and stack a mrds block for an operand with one value */

	dcl     (arg_ptr, desc_ptr)	 ptr;
	dcl     is_var		 (22) bit (1) int static unal options (constant)
				 init ((19) (1)"0"b, "1"b, "0"b, "1"b);

	ms_len_init = 3;
	nval_args_init = 1;
	allocate mrds_block in (work_area);
	mrds_block.fwd_ptr = fn_hd_ptr;
	mrds_block.mrds_string = ".V.";
	if is_var (desc_ptr -> descriptor.type) then
	     mrds_block.val_args.arg_ptr (1) = addrel (arg_ptr, 1);
	else mrds_block.val_args.arg_ptr (1) = arg_ptr;
	mrds_block.val_args.desc_ptr (1) = desc_ptr;
	fn_hd_ptr = mblk_ptr;
	mblk_ptr = null;
	nargs = nargs + 1;

     end set_val_arg;

process_expr:
     proc;

/* Procedure to translate an expression and add to arg. list. */

	variable = "";
	call
	     linus_lila_build_expr_str (lcb_ptr, lsh_ptr, td_ptr, mblk_ptr,
	     variable, icode);			/* trans. the expr. */
	if icode ^= 0 then
	     call linus_lila_error (lcb_ptr, lsh_ptr, icode, token);
	call check_var (variable);			/* ensure tup. var. consist. */
	mrds_block.fwd_ptr = fn_hd_ptr;		/* chain to arg. list */
	fn_hd_ptr = mblk_ptr;
	mblk_ptr = null;
	nargs = nargs + 1;

     end process_expr;

     end linus_lila_build_scfn_str;
