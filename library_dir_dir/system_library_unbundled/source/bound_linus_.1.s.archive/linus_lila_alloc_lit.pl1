/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

linus_lila_alloc_lit:
     proc (lcb_ptr, desc_ptr, lit_ptr, bit_len);

/* DESCRIPTION:

   Procedure  to  allocate  space  for a literal in the literal string, given a
   descriptor pointer.  A pointer and bit are returned.



   HISTORY:

   77-07-01 J. A. Weeldreyer: Initially written.

   80-01-09  Rickie E.  Brinegar: to accept a descriptor pointer rather than an
   assign_ descriptor type, and eliminate the need of a length parameter.

   81-02-24  Rickie  E.   Brinegar:  the  set  entry  point  was removed.  Both
   linus_set and linus_assign_values (the only two modules that referenced that
   entry point) were modified to do their own allocation and freeing.
   
   81-11-06 Rickie E. Brinegar: Removed unreferenced mod builtin function.

*/

%include linus_lcb;
%page;
%include linus_lit_string;

	dcl     (desc_ptr, lit_ptr)	 ptr;		/* INPUT POINTERS */

	dcl     bit_len		 fixed bin (35);

	dcl     desc		 bit (36) based (desc_ptr);

	dcl     initial_mrds_vclock	 float bin (63);

	dcl     mdbm_util_$align_data_item entry (ptr, fixed bin (35))
				 returns (fixed bin (35));
	dcl     mdbm_util_$get_data_bit_length entry (bit (36)) returns (fixed bin (35));

	dcl     (
	        linus_data_$lit_string_size,
	        sys_info$max_seg_size
	        )			 fixed bin (35) ext;

	dcl     (null, addr, fixed, rel, vclock) builtin;

	dcl     work_area		 area (sys_info$max_seg_size) based (lcb.lila_area_ptr);

	if lcb.lit_ptr = null then do;		/* if literal pool not yet allocated */
		allocate lit_string in (work_area);
		lit_string = "0"b;
		lcb.curr_lit_offset = 0;
	     end;

	if lcb.timing_mode then
	     initial_mrds_vclock = vclock;
	lcb.curr_lit_offset =
	     lcb.curr_lit_offset
	     + mdbm_util_$align_data_item (desc_ptr, lcb.curr_lit_offset);
	if lcb.timing_mode then
	     lcb.mrds_time = lcb.mrds_time + (vclock - initial_mrds_vclock);

	lit_ptr = addr (lit_array (lcb.curr_lit_offset));

	if lcb.timing_mode then
	     initial_mrds_vclock = vclock;
	bit_len = mdbm_util_$get_data_bit_length (desc);
	if lcb.timing_mode then
	     lcb.mrds_time = lcb.mrds_time + (vclock - initial_mrds_vclock);

	if lcb.curr_lit_offset + bit_len - 1 > linus_data_$lit_string_size then
	     lit_ptr = null;
	else lcb.curr_lit_offset = lcb.curr_lit_offset + bit_len;
						/* keep offset current */

	return;

     end linus_lila_alloc_lit;
