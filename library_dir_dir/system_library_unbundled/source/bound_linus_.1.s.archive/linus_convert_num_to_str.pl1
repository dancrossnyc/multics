/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

linus_convert_num_to_str:
     proc (value_ptr, desc_ptr, char_150_var_string, code);

/* DESCRIPTION:

   The  purpose  of  this  program  is  to  return  a  varying character string
   representation   of   a  numeric  value  with  leading  and  trailing  zeros
   surpressed.   If the input value is of type float or a fixed value with some
   scale other than 0, then at least a .0 will be returned in all cases.  
   


 PARAMETERS:
   value_ptr	    a pointer to the value to be converted.

   desc_ptr	    a  pointer  to  the  descriptor  of  the  value  to  be
   .                    converted.

   char_150_var_string  the character stringing to be returned.

   code		    a standard return code.



   HISTORY:
   
   80-02-18 Rickie E. Brinegar: Initially written.
   
*/

%include mdbm_arg_list;

	dcl     (
	        desc_ptr,				/* INPUT: pointer to the descriptor
						   of the value to be converted. */
	        value_ptr
	        )			 ptr;		/* INPUT: pointer to the value to be converted. */

	dcl     (append_len, i)	 fixed bin;

	dcl     char_150		 char (150);
	dcl     char_150_var_string	 char (150) varying;/* OUTPUT: the converted value. */
	dcl     char_150_var_desc	 bit (36) init ("101011000000000000000000000010010110"b);

	dcl     code		 fixed bin (35);	/* OUTPUT: a standard return code. */

	dcl     char_75_var_string	 char (75) varying;
	dcl     char_75_var_desc	 bit (36) init ("101011000000000000000000000001001011"b);

	dcl     edit_string		 char (10) init ("^[^d^;^f^]");
	dcl     edit_string_desc	 bit (36) init ("101010100000000000000000000000001010"b);

	dcl     (COMPLEX, INTEGER, FIXED) bit (1);

	dcl     INTEGER_desc	 bit (36) init ("101001100000000000000000000000000001"b);

	dcl     char_150_len	 fixed bin;
	dcl     char_150_len_desc	 bit (36) init ("100000100000000000000000000000000001"b);

	dcl     1 desc		 based (desc_ptr),
		2 flag		 bit (1),
		2 type		 bit (6),
		2 packed		 bit (1),
		2 num_dim		 bit (4),
		2 scale		 bit (12),
		2 precision	 bit (12);

	dcl     linus_error_$non_numeric_argument ext fixed bin (35);

	dcl     ioa_$general_rs
				 entry (ptr, fixed bin, fixed bin, char (*), fixed bin, bit (1) aligned,
				 bit (1) aligned);
	dcl     mdbm_util_$number_data_class entry (ptr) returns (bit (1));
	dcl     mdbm_util_$complex_data_class entry (ptr) returns (bit (1));
	dcl     mdbm_util_$fixed_data_class entry (ptr) returns (bit (1));

	i = 0;					/* Initialize. */
	append_len = 0;
	code = 0;
	COMPLEX = mdbm_util_$complex_data_class (desc_ptr);
	FIXED = mdbm_util_$fixed_data_class (desc_ptr);
	INTEGER = FIXED & fixed (desc.scale) = 0;

	if ^mdbm_util_$number_data_class (desc_ptr) then do; /* Was I called with a proper data type? */
		code = linus_error_$non_numeric_argument; /* No. */
		go to EXIT;
	     end;

	num_ptrs = 10;				/* Set up the argument list. */
	allocate arg_list;
	arg_list.arg_count = 10;
	arg_list.desc_count = 10;
	arg_list.pad = 0;
	arg_list.code = 4;
	arg_list.arg_des_ptr (1) = addr (edit_string);
	arg_list.arg_des_ptr (2) = addr (char_150_var_string);
	arg_list.arg_des_ptr (3) = addr (char_150_len);
	arg_list.arg_des_ptr (4) = addr (INTEGER);
	arg_list.arg_des_ptr (5) = value_ptr;
	arg_list.arg_des_ptr (6) = addr (edit_string_desc);
	arg_list.arg_des_ptr (7) = addr (char_150_var_desc);
	arg_list.arg_des_ptr (8) = addr (char_150_len_desc);
	arg_list.arg_des_ptr (9) = addr (INTEGER_desc);
	arg_list.arg_des_ptr (10) = desc_ptr;

	call ioa_$general_rs (al_ptr, 1, 4, char_150, char_150_len, "1"b, "0"b);
	char_150_var_string = substr (char_150, 1, char_150_len);

	if INTEGER then /* Do I need to insure proper scaling? */
	     if COMPLEX then /* No, Do I need to get the imaginary
						   part of a complex number? */
		call get_imaginary;
	     else /* No. */
		go to EXIT;

	if FIXED then do;				/* Do I have a scale to worry about? */
		append_len =
		     fixed (desc.scale)
		     - (char_150_len - index (char_150_var_string, "."));
						/* Yes. */
		do i = 1 to append_len while (append_len > 0);
		     char_150_var_string = char_150_var_string || "0";
		end;
	     end;

	if index (char_150_var_string, ".") = length (char_150_var_string) then
	     /* If the last char is a "." */
	     char_150_var_string =
		substr (char_150_var_string, 1, char_150_len) || "0";
						/* then add a "0" after it. */

	if COMPLEX then
	     call get_imaginary;

EXIT:
	return;

get_imaginary:
     proc;

	arg_list.arg_des_ptr (5) = addrel (value_ptr, 1); /* Update the argument list. */

	call ioa_$general_rs (al_ptr, 1, 4, char_150, char_150_len, "1"b, "0"b);
						/* Get the character string. */
	if substr (char_150, 1, 1) ^= "-" then
	     char_75_var_string = "+" || substr (char_150, 1, char_150_len);
	else char_75_var_string = substr (char_150, 1, char_150_len);
	char_150_var_string = char_150_var_string || char_75_var_string;

	if INTEGER then do;
		char_150_var_string = char_150_var_string || "i";
		go to EXIT;
	     end;

	if FIXED then do;
		append_len =
		     fixed (desc.scale)
		     - (char_150_len - index (char_150_var_string, "."));
		do i = 1 to append_len while (append_len > 0);
		     char_75_var_string = char_75_var_string || "0";
		     char_150_var_string = char_150_var_string || "0";
		end;
	     end;

	if index (char_75_var_string, ".") = length (char_75_var_string) then
	     char_150_var_string = char_150_var_string || "0";

	char_150_var_string = char_150_var_string || "i";

     end get_imaginary;

     end linus_convert_num_to_str;
