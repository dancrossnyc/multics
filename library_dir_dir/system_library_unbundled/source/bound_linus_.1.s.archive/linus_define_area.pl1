/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

linus_define_area:
     procedure (defined_area_ptr, area_name, error_code);

/* DESCRIPTION:

   This  is  a general routine to encapsulate the call to define_area_ and the
   initializing  of  the  area_info structure needed for that call.  Note that
   the area defined by this call must be deleted by a call to release_area_ to
   properly clean up any temp segments created. 
   
   

   PARAMETERS:

   defined_area_ptr  -  -  (input/output)  pointer, points to the start of the
   area   to   be   defined  by  this  call.   Also  the  address  pointed  by
   defined_area_ptr  must  be  even(0  mod  2).   If  null, then it's value is
   assigned, and a temp segment for the area is created.

   area_name  -  -  (input) char(6), a name for the area, it will be used with
   extensible areas to name added segments following the {unique_name}.MRDS

   error_code  -  -  (output)  fixed bin(35), 0 unless an error occured in the
   call to define_area_ 
   

   
   HISTORY:
   
   80-02-01 Jim Gray : Originally written.
   
   80-02-02 R. Lackey: Modified to add define_area entry name.
   
   80-03-10  Rickie  E.   Brinegar:  Modified  to  create areas with the first
   component of linus (was formerly mrds_dsl_define_area).  
   
   81-07-07  Rickie  E.   Brinegar:  Modified to call get_temp_segment_ if the
   input  pointer  was  null.  This was done so that LINUS could properly free
   temporary segments in the linus module's clean up handler.
   
*/

%include area_info;

	dcl     addr		 builtin;
	dcl     area_name		 char (6);	/* name to be given to area and extended segs */
	dcl     define_area_	 entry (ptr, fixed bin (35)); /* routine that defines an area */
	dcl     defined_area_ptr	 ptr;		/* points to area to be defined */
	dcl     error_code		 fixed bin (35);	/* error status encoding */
	dcl     get_temp_segment_	 entry (char (*), ptr, fixed bin (35));
	dcl     1 local_area_info	 like area_info;
	dcl     null		 builtin;
	dcl     rtrim		 builtin;
	dcl     sys_info$max_seg_size	 fixed bin (35) ext;

/* initialize the area_info, based on input parameters */

	if defined_area_ptr = null then
	     call get_temp_segment_ ("LINUS." || rtrim (area_name) || ".area", defined_area_ptr, error_code);

	local_area_info.version = 1;
	local_area_info.control.extend = "0"b;
	local_area_info.control.zero_on_alloc = "0"b;
	local_area_info.control.zero_on_free = "0"b;
	local_area_info.control.dont_free = "0"b;
	local_area_info.control.no_freeing = "1"b;
	local_area_info.control.system = "0"b;
	local_area_info.control.pad = "0"b;
	local_area_info.owner = "LINUS." || rtrim (area_name);
	local_area_info.n_components = 0;
	local_area_info.size = sys_info$max_seg_size;
	local_area_info.version_of_area = 1;
	local_area_info.areap = defined_area_ptr;
	local_area_info.allocated_blocks = 0;
	local_area_info.free_blocks = 0;
	local_area_info.allocated_words = 0;
	local_area_info.free_words = 0;

/* now make the call to define the area according to the parameters */

	call define_area_ (addr (local_area_info), error_code);

	return;

     end;
