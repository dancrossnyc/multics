/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

linus_canon_input:
     proc (lcb_ptr, lineptr, nread, code);

/* DESCRIPTION:

   This  procedure  canonized  an  input  line  by  removing  comments  and by
   substituting for macro arguments.  Substitution for linus variables is left
   to  the  request  handlers  to  eliminate possible conversions to character
   form.  
   
   

   HISTORY:

   77-06-01 J. A. Weeldreyer: Initially written.
   
   78-04-01  J.   A.   Weeldreyer:  Modified to properly handle /*'s in quoted
   strings -- April, 1978.
   
   82-02-18  Paul W. Benjamin: ssu_ conversion.  This procedure is now called
   only from the linus_invoke_ I/O module.  Calling sequence altered to reflect
   the fact that the variables line, and line_array now refer to the line as 
   read by iox_$get_line rather than something in the lcb.

*/

%include linus_lcb;
%page;
%include linus_char_argl;

	dcl     lineptr		 ptr parameter;	/* Input: ptr to input line. */
	dcl     nread		 fixed bin (21);	/* Input/Output:  No. of input chars. */
	dcl     code		 fixed bin (35);	/* Output:  status code */

	dcl     (
	        i,				/* internal indices */
	        start_pos
	        )			 fixed bin;	/* position in input line */

	dcl     arg_no		 fixed bin;	/* specified arg no. */
	dcl     canon_line		 char (lcb.rb_len) var; /* place to build canonized line */
	dcl     line		 char (nread) based (lineptr); /* old input line */
	dcl     line_array		 (nread) char (1) unal based (lineptr); /* array view */
	dcl     in_quote		 bit (1) unal;

	dcl     (
	        linus_error_$no_macro_arg,
	        linus_error_$bad_macro_arg,
	        linus_error_$bad_comment,
	        linus_error_$exp_line_len,
	        sys_info$max_seg_size
	        )			 fixed bin (35) ext;

	dcl     (fixed, rel, addr, search, verify, index, null, length, substr) builtin;

	start_pos = 1;				/* initialize */
	canon_line = "";
	in_quote = "0"b;

	do while (start_pos < nread);			/* look through entire input line */

	     i = search (substr (line, start_pos), """%/"); /* look for possible arg or comment */
	     if i <= 0 then do;			/* not found */
		     call add_to_line (addr (line_array (start_pos)), nread - start_pos + 1);
						/* add rest of line to output */
		     start_pos = nread;		/* finished */
		end;
	     else do;				/* found one */
		     call add_to_line (addr (line_array (start_pos)), i - 1);
						/* add scanned characters */
		     start_pos = start_pos + i - 1;	/* index of char just found */
		     if line_array (start_pos) = """" then do; /* if possible start of end of quoted string */
			     in_quote = ^in_quote;
			     call add_to_line (addr (line_array (start_pos)), 1);
			     start_pos = start_pos + 1;
			end;
		     else if line_array (start_pos) = "%" then do; /* if arg. */
			     if line_array (start_pos + 1) = "%" then do; /* just put in one % */
				     call add_to_line (addr (line_array (start_pos)), 1);
				     start_pos = start_pos + 2;
				end;
			     else do;		/* if not double % */
				     if lcb.cal_ptr = null then
					call error (linus_error_$no_macro_arg);
						/* if no args defined for macro */
				     i = verify (substr (line, start_pos + 1), "0123456789");
						/* look for end */
				     if i <= 1 then
					call error (linus_error_$bad_macro_arg);
						/* no number */
				     if line_array (start_pos + i) ^= "%" then
					call error (linus_error_$bad_macro_arg);
						/* no closing % */
				     arg_no = fixed (substr (line, start_pos + 1, i - 1));
						/* isolate arg number */
				     ca_ptr = lcb.cal_ptr; /* get args for this macro */
				     if arg_no < 1 | arg_no > char_argl.nargs then
					/* must be in range */
					call error (linus_error_$no_macro_arg);
				     call add_to_line (char_argl.arg.arg_ptr (arg_no), char_argl.arg.arg_len (arg_no));
						/* make subst. */
				     start_pos = start_pos + i + 1; /* first char. beyond % */
				end;		/* if not double % */
			end;			/* macro arg */
		     else if substr (line, start_pos, 2) = "/*" & ^in_quote then do;
						/* if comment */
			     i = index (substr (line, start_pos + 2), "*/");
						/* look for end of comment */
			     if i <= 0 then
				call error (linus_error_$bad_comment); /* not found */
			     start_pos = start_pos + i + 3; /* first char beyond comment */
			end;			/* if comment */
		     else do;			/* if was only / or slash-star in quote str.  */
			     call add_to_line (addr (line_array (start_pos)), 1);
						/* add the / to the output */
			     start_pos = start_pos + 1;
			end;
		end;				/* if spec char found */
	end;					/* main loop */

	nread = length (canon_line);
	line = canon_line;
	code = 0;

exit:
	return;

add_to_line:
     proc (c_ptr, c_len);

/* Procedure to add string to canon. line */

	dcl     c_ptr		 ptr;
	dcl     c_len		 fixed bin (21);
	dcl     c_string		 char (c_len) based (c_ptr);

	if length (canon_line) + c_len > lcb.rb_len then /* must stay in bounds */
	     call error (linus_error_$exp_line_len);
	canon_line = canon_line || c_string;

     end add_to_line;

error:
     proc (cd);

/* Error procedure */

	dcl     cd		 fixed bin (35);

	code = cd;
	go to exit;

     end error;

     end linus_canon_input;
