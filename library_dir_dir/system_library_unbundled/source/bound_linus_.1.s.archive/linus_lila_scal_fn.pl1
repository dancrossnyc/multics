/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(90-04-30,Leskiw), approve(90-10-05,MCR8202),
     audit(90-10-11,Bubric), install(90-10-14,MR12.4-1039):
     Changed calls to assign_round_ from assign_ so that data is rounded.
                                                   END HISTORY COMMENTS */


linus_lila_scal_fn:
     proc (lcb_ptr, lsh_ptr, td_ptr, ed_ptr, code);


/* HISTORY:

   77-08-01 J. C. C. Jagernauth: Initially written.

   78-04-01  J.   C.   C.   Jagernauth: Modified to update ls_set when new mrds
   items  are  encountered, to properly handle non-arithmetic scalar functions,
   and to properly handle recursively invoked scalar functions.

   78-08-01 J. A. Weeldreyer: Modified to conform to new token data.

   79-02-01  J.   C.   C.   Jagernauth:  Modified to access version 4 resultant
   information.

   80-01-08  Rickie  E.   Brinegar:  Modified  to  pass  linus_lila_alloc_lit a
   descriptor pointer instead of an assign_ descriptor type and to do away with
   the assign_ length.

   80-04-11  Rickie  E.   Brinegar:  Modified  to correctly check the number of
   arguments to a scalar function.

   80-04-14  Rickie  E.   Brinegar:  Modified  to  use  a  work area defined on
   lcb.lila_area_ptr instead of getting system free area.

   80-09-16  Rickie  E.   Brinegar:  Modified  to use linus_rel_array to obtain
   relation information instead of calling dsl_$get_rslt_info.

   81-02-03  Rickie  E.  Brinegar: Modified to use the modified linus_rel_array
   structure.  Added the rel builtin to the declarations.

   81-06-17 Rickie E. Brinegar: Modified to not call dsl_v1_$get_fn_info.

   81-06-19 Rickie E. Brinegar: Removed calls to dsl_$get_(rslt temp)_desc.
   
   81-07-13  Rickie  E.   Brinegar:  Removed  the  trapping  of the conversion
   condition.  This is now relegated to higher level modules.

   82-01-04 Bert Moberg: Fixed searching for temp relation names

   82-06-24 DJ Schimke: renamed variable "offset" to "bit_offset" and internal
   procedure "constant" to "process_constant" so these names are not confused 
   with pl1 builtins and keywords.
*/

%include linus_lcb;
%page;
%include linus_ef_data;
%page;
%include linus_ls_block;
%page;
%include linus_ls_header;
%page;
%include linus_ls_set;
%page;
%include linus_rel_array;
%page;
%include linus_scal_fn;
%page;
%include linus_temp_tab_names;
%page;
%include linus_token_data;
%page;
%include linus_variables;
%page;
%include mdbm_arg_list;
%page;
%include mrds_rslt_info;
%page;
%include mrds_scalfn_info;


	dcl     1 arg_len_bits	 based,
		2 pad		 bit (12) unal,
		2 length		 bit (24) unal;	/* arg length for system standard arg list */

	dcl     1 arg_descs		 aligned based (ad_ptr),
		2 ndescs		 fixed bin,
		2 desc		 (ndescs_init refer (arg_descs.ndescs)) bit (36);

	dcl     ndescs_init		 fixed bin;

	dcl     (
	        (
	        SETFN		 init (4)
	        ),
	        (
	        SCALFN		 init (3)
	        ),
	        (
	        EXPR		 init (5)
	        ),
	        (
	        BITVAR		 init (20)
	        ),
	        (
	        CHARVAR		 init (22)
	        ),
	        (
	        CONSTANT		 init (1)
	        ),
	        (
	        LINVAR		 init (2)
	        ),
	        (
	        DATABASE		 init (6)
	        )
	        )			 fixed bin int static options (constant);

	dcl     QUOTE		 char (1) int static options (constant) init ("""");
	dcl     LEFT_PAREN		 char (1) int static options (constant) init ("(");
	dcl     RIGHT_PAREN		 char (1) int static options (constant) init (")");

	dcl     (
	        (
	        PTR_DESC		 init ("100110100000000000000000000000000000"b)
	        ),
	        (
	        CMPX_FD		 init ("100110000000000000000000000000000000"b)
	        ),
	        (
	        REAL_FD		 init ("100101000000000000000000000000000000"b)
	        ),
	        (
	        BIT_DESC		 init ("101001100000000000000000000000000000"b)
	        ),
	        (
	        CHAR_DESC		 init ("101010100000000000000000000000000000"b)
	        ),
	        (
	        BIT36_DESC		 init ("101001100000000000000000000000100100"b)
	        )
	        )			 bit (36);

	dcl     1 token_data_temp	 like token_data;	/* for temporary storage of token data */

	dcl     token_item		 char (must_free_len) based (must_free_ptr);
	dcl     first_char		 char (1) based (token_data_temp.t_ptr);
	dcl     bit_offset		 (10) bit (1) based;
	dcl     repl_factor		 char (repl_len) based (repl_ptr);
	dcl     constant_desc	 bit (36);
	dcl     constant_string	 char (cs_len) based (cs_ptr);
	dcl     one_repl_ch		 char (1) based (orc_ptr);
	dcl     one_source_ch	 char (1) based (osc_ptr);

	dcl     (i, j, k, temp, target_type, source_type) fixed bin;

	dcl     temp_desc		 bit (36) based;

	dcl     (cur_pos_temp, bit_len, cs_len, ci_len, repl_fac, repl_len, must_free_len,
	        target_length, icode, code, source_length) fixed bin (35);

	dcl     initial_mrds_vclock	 float bin (63);

	dcl     (expression_test, check_min_num_of_args, get_comma, repl_flag) bit (1);

	dcl     (addr, addrel, fixed, null, rel, search, substr, vclock) builtin;

	dcl     (
	        NULL_PTR		 init (null),
	        ad_ptr		 init (null),
	        ci_ptr		 init (null),
	        cs_ptr		 init (null),
	        lit_ptr		 init (null),
	        must_free_ptr	 init (null),
	        orc_ptr		 init (null),
	        osc_ptr		 init (null),
	        repl_ptr		 init (null),
	        source_ptr		 init (null)
	        )			 ptr;

	dcl     1 ef_d		 like ef_data;

	dcl     (
	        linus_data_$max_expr_items,
	        linus_data_$max_pred_stack_size,
	        linus_data_$max_range_items,
	        linus_data_$max_sclf_items,
	        linus_data_$max_set_stack_size,
	        linus_error_$expr_ovfl,
	        linus_error_$func_args_parens,
	        linus_error_$inv_sclf_args,
	        linus_error_$inv_token_type,
	        linus_error_$inv_tup_var,
	        linus_error_$no_comma,
	        linus_error_$sclf_null_arg,
	        linus_error_$select_list_ovfl,
	        linus_error_$too_few_sclf_args,
	        linus_error_$too_many_sclf_args,
	        mrds_data_$max_select_items,
	        mrds_data_$max_temp_rels,
	        mrds_data_$max_token_size,
	        sys_info$max_seg_size
	        )			 fixed bin (35) ext;

	dcl     assign_round_
				 entry (ptr, fixed bin, fixed bin (35), ptr, fixed bin, fixed bin (35));
	dcl     cu_$ptr_call	 entry options (variable);
	dcl     dsl_$get_fn_info
				 entry (fixed bin (35), char (*), ptr, ptr, fixed bin (35));
	dcl     linus_assign_data	 entry (bit (36), fixed bin, fixed bin (35));
	dcl     linus_lila_alloc_lit	 entry (ptr, ptr, ptr, fixed bin (35));
	dcl     linus_lila_build_expr_tab entry (ptr, ptr, ptr, ptr, fixed bin (35));
	dcl     linus_lila_error	 entry (ptr, ptr, fixed bin (35), char (*));
	dcl     linus_lila_get_token	 entry (ptr, ptr, fixed bin (35), ptr, fixed bin (35));
	dcl     linus_lila_set_fn	 entry (ptr, ptr, ptr, ptr, fixed bin (35));
	dcl     work_area		 area (sys_info$max_seg_size) based (lcb.lila_area_ptr);

	NULL_PTR, cs_ptr, sfi_ptr, sclf_ptr, ad_ptr, al_ptr = null;

	linus_rel_array_ptr = lcb.rel_array_ptr;

	ttn_ptr = lcb.ttn_ptr;
	icode, ef_data.nmrds_items, code = 0;
	ef_data.var_name = "";
	must_free_len = token_data.length;
	must_free_ptr = token_data.t_ptr;
	token_data_temp = token_data;
	lv_ptr = lcb.lv_ptr;
	lsb_ptr = ls_header.cur_ptr;
	lss_ptr = ls_block.back_ptr;

	if lcb.timing_mode then
	     initial_mrds_vclock = vclock;
	call
	     dsl_$get_fn_info (lcb.db_index, token_item, lcb.lila_area_ptr, sfi_ptr,
	     icode);
	if lcb.timing_mode then
	     lcb.mrds_time = lcb.mrds_time + (vclock - initial_mrds_vclock);
	if icode ^= 0 then
	     call error (icode, "");			/* ok to continue */
	check_min_num_of_args = "1"b;
	if scalfn_info.nargs = 0 then do;
		nsclf_args_init = linus_data_$max_sclf_items;
		check_min_num_of_args = "0"b;
	     end;
	else nsclf_args_init = scalfn_info.nargs;
	allocate scal_fn in (work_area);
	scal_fn.nargs = 0;
	call get_token;
	if icode ^= 0 then
	     call error (icode, "");
	if token_data.key ^= LP then
	     call error (linus_error_$func_args_parens, "");
	scal_fn.entry_ptr = scalfn_info.entry_ptr;	/* init function entry pointer */
	call get_token;

	do while (token_data.key ^= RP & token_data.key ^= NULL);
	     if token_data.key = COMMA then
		call error (linus_error_$sclf_null_arg, ""); /* comma is an invalid token */
	     scal_fn.nargs = scal_fn.nargs + 1;
	     scal_fn.arg.ef_ptr (scal_fn.nargs) = null;
	     get_comma = "1"b;			/* skip comma */
	     if scalfn_info.info_ent_ptr = null then do;
		     call main_loop;
		     call assign_var;
		end;
	     else do;
		     call main_loop;
		     scal_fn.arg.must_convert (scal_fn.nargs) = "0"b; /* No conversion necessary */
		end;
	     if get_comma then
		call get_token;
	     if ^(token_data.key = RP | token_data.key = NULL) then
		if token_data.key = COMMA then
		     call get_token;		/* comma is scal_func arg delimeter */
		else call error (linus_error_$no_comma, "");
	     if scal_fn.nargs > nsclf_args_init then do;	/* too many arguments are being passed */
		     token_data.key = NULL;
		     call error (linus_error_$too_many_sclf_args, "");
		end;
	end;

	if scal_fn.nargs < nsclf_args_init & check_min_num_of_args then do;
		token_data.key = NULL;
		call error (linus_error_$too_few_sclf_args, "");
	     end;
	if token_data.key = NULL then
	     call error (linus_error_$sclf_null_arg, "");
	else token_data.key = NULL;
	num_ptrs = scal_fn.nargs * 2 + 2;		/* number of args * 2 */
	allocate arg_list in (work_area);
	scal_fn.arg_list_ptr = al_ptr;
	arg_list.pad = 0;
	arg_list.arg_count, arg_list.desc_count = num_ptrs;
	arg_list.code = 4;
	do i = 1 to scal_fn.nargs;			/* set argument and descriptor pointers in arg_list */
	     k = scal_fn.nargs + 1 + i;
	     if scal_fn.arg.must_convert (i) then do;
		     arg_list.arg_des_ptr (i) = scal_fn.arg.arg_assn_ptr (i);
		     arg_list.arg_des_ptr (k) = addr (scal_fn.arg.arg_desc (i));
		     call var_desc ((scal_fn.arg.arg_desc (i)));
		end;
	     else do;
		     arg_list.arg_des_ptr (i) = scal_fn.arg.assn_ptr (i);
		     arg_list.arg_des_ptr (k) = addr (scal_fn.arg.desc (i));
		     call var_desc ((scal_fn.arg.desc (i)));
		end;
	end;
	if scalfn_info.info_ent_ptr = null then
	     scal_fn.rslt_desc = scalfn_info.rslt_desc;
	else do;
		ndescs_init = scal_fn.nargs;		/* pass descriptors to info entry to obtain result desc */
		allocate arg_descs in (work_area);
		do i = 1 to arg_descs.ndescs;
		     arg_descs.desc (i) =
			arg_list.arg_des_ptr (i + 1 + ndescs_init) -> temp_desc;
		end;
		call
		     cu_$ptr_call (scalfn_info.info_ent_ptr, ad_ptr, scal_fn.rslt_desc);
						/* get result descriptor */
	     end;
	if ad_ptr ^= null then
	     ad_ptr = null;

	ef_data.ef_ptr = sclf_ptr;
	if scal_fn.rslt_desc = "0"b then
	     call
		linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$inv_sclf_args,
		(scalfn_info.name));
	ef_data.desc = scal_fn.rslt_desc;		/* set ef data */
	call
	     linus_assign_data ((scal_fn.rslt_desc), ef_data.assn_type,
	     ef_data.assn_len);
	call
	     linus_lila_alloc_lit (lcb_ptr, addr (scal_fn.rslt_desc),
	     ef_data.assn_ptr, ef_data.bit_length);
	arg_list.arg_des_ptr (arg_list.desc_count) = addr (scal_fn.rslt_desc);
	k = arg_list.desc_count / 2;
	arg_list.arg_des_ptr (k) = ef_data.assn_ptr;
	call var_desc ((scal_fn.rslt_desc));

	sfi_ptr = null;
	cs_ptr = null;

main_loop:
     proc;
	if ^(token_data.key > NULL & token_data.key < TAB_NAME) then
	     call error (linus_error_$inv_token_type, token_item);
	else do;
		expression_test = "0"b;
		if token_data.key = SET_FN then do;
			call
			     linus_lila_set_fn (lcb_ptr, lsh_ptr, td_ptr, addr (ef_d), icode);
			if icode ^= 0 then
			     call error (icode, "");
			call update_efdata;
			scal_fn.arg.type (scal_fn.nargs) = SETFN;
			call
			     init_sclf_source ((ef_d.desc), ef_d.assn_ptr, ef_d.assn_type,
			     ef_d.assn_len, ef_d.ef_ptr);
		     end;
		else if token_data.key = SCAL_FN then do;
			call
			     linus_lila_scal_fn (lcb_ptr, lsh_ptr, td_ptr, addr (ef_d), icode)
			     ;
			if icode ^= 0 then
			     call error (icode, "");
			call update_efdata;
			scal_fn.arg.type (scal_fn.nargs) = SCALFN;
			call
			     init_sclf_source ((ef_d.desc), ef_d.assn_ptr, ef_d.assn_type,
			     ef_d.assn_len, ef_d.ef_ptr);
		     end;
		else if token_data.key = LP then
		     call build_expr;
		else do;
			call expression_check;
			if expression_test then
			     call build_expr;	/* look ahead for expression */
			else do;			/* LIN_VAR, CONST or COL_SPEC  -- init ef_data structure */
				if token_data.key = COL_SPEC then
				     call sclf_col_spec; /* database item */
				else if token_data.key = LINUS_VAR then do;
					scal_fn.arg.type (scal_fn.nargs) = LINVAR;
					do i = 1 to variables.nvars
					     while (variables.var_info.name (i) ^= token_item);
					end;
					call
					     init_sclf_source (variables.var_info.desc (i),
					     variables.var_info.var_ptr (i),
					     variables.var_info.assn_type (i),
					     variables.var_info.assn_len (i), NULL_PTR);
				     end;
				else if token_data.key = CONST then
				     call process_constant; /* constant */
			     end;
		     end;
	     end;
     end main_loop;

var_desc:
     proc (desc);					/* find varying strings and bump arg_list ptr */

	dcl     desc		 bit (36);

	temp = fixed (substr (desc, 2, 6));
	if temp = BITVAR | temp = CHARVAR then
	     arg_list.arg_des_ptr (i) = addrel (arg_list.arg_des_ptr (i), 1);

     end var_desc;

build_expr:
     proc;
	call
	     linus_lila_build_expr_tab (lcb_ptr, lsh_ptr, td_ptr, addr (ef_d),
	     icode);
	if icode ^= 0 then
	     call error (icode, "");
	get_comma = "0"b;				/* build_expr routine stops at comma */
	call update_efdata;
	scal_fn.arg.type (scal_fn.nargs) = EXPR;
	call
	     init_sclf_source ((ef_d.desc), ef_d.assn_ptr, ef_d.assn_type,
	     ef_d.assn_len, ef_d.ef_ptr);
     end build_expr;

update_efdata:
     proc;


	if ef_d.var_name ^= "" then do;
		if ef_data.var_name = "" then
		     ef_data.var_name = ef_d.var_name;
		if ef_data.var_name ^= ef_d.var_name then
		     call error (linus_error_$inv_tup_var, "");
	     end;
	if ef_data.nmrds_items >= linus_data_$max_expr_items then
	     call error (linus_error_$expr_ovfl, "");
	if ef_d.nmrds_items ^= 0 then
	     do i = 1 to ef_d.nmrds_items;
		ef_data.nmrds_items = ef_data.nmrds_items + 1;
		ef_data.mrds_items.attr_name (ef_data.nmrds_items) =
		     ef_d.mrds_items.attr_name (i);
		ef_data.mrds_items.domain_name (ef_data.nmrds_items) =
		     ef_d.mrds_items.domain_name (i);
		ef_data.mrds_items.bit_length (ef_data.nmrds_items) =
		     ef_d.mrds_items.bit_length (i);
		ef_data.mrds_items.desc (ef_data.nmrds_items) =
		     ef_d.mrds_items.desc (i);
		ef_data.mrds_items.assn_ptr (ef_data.nmrds_items) =
		     ef_d.mrds_items.assn_ptr (i);
		ef_data.mrds_items.assn_type (ef_data.nmrds_items) =
		     ef_d.mrds_items.assn_type (i);
		ef_data.mrds_items.assn_len (ef_data.nmrds_items) =
		     ef_d.mrds_items.assn_len (i);
	     end;

     end update_efdata;

sclf_col_spec:
     proc;					/* database item */

	dcl     (i, j)		 fixed bin;

	dcl     rel_name		 char (32);

	scal_fn.arg.type (scal_fn.nargs) = DATABASE;	/* set item type */
	do i = 1 to ls_block.nselects
	     while (token_data.mvar || "." || token_item ^= ls_block.sel_items (i));
	end;					/* see if item has already been selected */
	if ef_data.var_name = "" then
	     ef_data.var_name = token_data.mvar;
	else if token_data.mvar ^= ef_data.var_name then
	     call error (linus_error_$inv_tup_var, "");
	if i <= ls_block.nselects then do;
		call
		     init_sclf_source (ls_set.domain_info.desc (i),
		     ls_set.domain_info.assn_ptr (i), ls_set.domain_info.assn_type (i),
		     ls_set.domain_info.assn_len (i), NULL_PTR);
	     end;
	else do;					/* get relation name */
		do i = 1 to ls_block.nritems
		     while (token_data.mvar ^= ls_block.range_items.mrds_var (i));
		end;
		if ls_block.range_items.rel_name (i) = ".V." then
		     rel_name = temp_tab_names (ls_block.range_items.rel_index (i));
		else rel_name = ls_block.range_items.rel_name (i);
		do j = 1 to linus_rel_array.num_of_rels
		     while (linus_rel_array.rels.rel_name (j) ^= rel_name);
		end;
		rslt_ptr = linus_rel_array.rels.rslt_info_ptr (j);
		do j = 1 to rslt_info.num_attr
		     while (token_item ^= rslt_info.attr.attr_name (j));
		end;				/* get info for attribute selected */
		call
		     linus_assign_data ((rslt_info.attr.descriptor (j)), source_type,
		     source_length);		/*
						   returns assign type and length */
		call
		     linus_lila_alloc_lit (lcb_ptr, addr (rslt_info.attr.descriptor (j)),
		     lit_ptr, bit_len);		/*
						   allocate in literal pool */
		call
		     init_sclf_source (rslt_info.attr.descriptor (j), lit_ptr,
		     source_type, source_length, NULL_PTR);
		if ls_block.nselects >= mrds_data_$max_select_items then
		     call error (linus_error_$select_list_ovfl, "");
		else do;
			ls_block.nselects = ls_block.nselects + 1;
			ls_block.sel_items (ls_block.nselects) =
			     token_data.mvar || "." || token_item;
		     end;
		ls_set.nselects = ls_set.nselects + 1;	/* update ls_set */
		if ls_set.nselects > mrds_data_$max_select_items then
		     call error (linus_error_$select_list_ovfl, "");
		ef_data.nmrds_items = ef_data.nmrds_items + 1; /* pass mrds item info in ef_data */
		ef_data.mrds_items.attr_name (ef_data.nmrds_items) = token_item;
		ls_set.domain_info.bit_length (ls_set.nselects),
		     ef_data.mrds_items.bit_length (ef_data.nmrds_items) = bit_len;
		ls_set.domain_info.assn_ptr (ls_set.nselects),
		     ef_data.mrds_items.assn_ptr (ef_data.nmrds_items) = lit_ptr;
		ls_set.domain_info.assn_type (ls_set.nselects),
		     ef_data.mrds_items.assn_type (ef_data.nmrds_items) = source_type;
		ls_set.domain_info.assn_len (ls_set.nselects),
		     ef_data.mrds_items.assn_len (ef_data.nmrds_items) = source_length;
		ls_set.domain_info.desc (ls_set.nselects),
		     ef_data.mrds_items.desc (ef_data.nmrds_items) =
		     rslt_info.attr.descriptor (j);
		ls_set.domain_info.name (ls_set.nselects),
		     ef_data.mrds_items.domain_name (ef_data.nmrds_items) =
		     rslt_info.attr.domain_name (j);
	     end;

     end sclf_col_spec;

init_sclf_source:
     proc (source_desc, source_ptr, source_type, source_len, fn_ptr);
	dcl     source_desc		 bit (36) aligned;
	dcl     (source_ptr, fn_ptr)	 ptr;
	dcl     source_type		 fixed bin;
	dcl     source_len		 fixed bin (35);

	scal_fn.arg.desc (scal_fn.nargs) = source_desc;
	scal_fn.arg.assn_ptr (scal_fn.nargs) = source_ptr;
	scal_fn.arg.assn_type (scal_fn.nargs) = source_type;
	scal_fn.arg.assn_len (scal_fn.nargs) = source_len;
	scal_fn.arg.ef_ptr (scal_fn.nargs) = fn_ptr;

     end init_sclf_source;				/* set assign data in scalar function structure */

assign_var:
     proc;
	scal_fn.arg.must_convert (scal_fn.nargs) = "1"b;	/* must convert */
	call
	     linus_assign_data ((scalfn_info.arg_desc (scal_fn.nargs)), target_type,
	     target_length);
	call
	     linus_lila_alloc_lit (lcb_ptr,
	     addr (scalfn_info.arg_desc (scal_fn.nargs)), lit_ptr, bit_len);
						/*
						   allocate in literal pool */
	scal_fn.arg.arg_desc (scal_fn.nargs) =
	     scalfn_info.arg_desc (scal_fn.nargs);
	scal_fn.arg.arg_assn_type (scal_fn.nargs) = target_type;
	scal_fn.arg.arg_assn_len (scal_fn.nargs) = target_length;
	scal_fn.arg.arg_assn_ptr (scal_fn.nargs) = lit_ptr;
     end assign_var;



get_token:
     proc;

	if token_data.must_free then /* must free */
	     must_free_ptr = null;
	call
	     linus_lila_get_token (lcb_ptr, lsh_ptr, ls_header.cur_pos, td_ptr,
	     icode);
	if icode ^= 0 then
	     call error (icode, "");
	must_free_len = token_data.length;
	must_free_ptr = token_data.t_ptr;

     end get_token;

expression_check:
     proc;

	cur_pos_temp = ls_header.cur_pos;		/* save current token data */
	token_data_temp = token_data;
	call
	     linus_lila_get_token (lcb_ptr, lsh_ptr, ls_header.cur_pos, td_ptr,
	     icode);
	must_free_len = token_data.length;
	must_free_ptr = token_data.t_ptr;
	if icode ^= 0 then
	     call error (icode, "");
	if token_data.key > LP & token_data.key < TAB_NAME then
	     /* an
						   expression was found */
	     expression_test = "1"b;
	else expression_test = "0"b;
	if token_data.must_free then /* reset token data */
	     must_free_ptr = null;
	ls_header.cur_pos = cur_pos_temp;
	token_data = token_data_temp;
	must_free_len = token_data.length;
	must_free_ptr = token_data.t_ptr;

     end expression_check;

error:
     proc (err_code, string);

	dcl     err_code		 fixed bin (35);
	dcl     string		 char (*);

	call linus_lila_error (lcb_ptr, lsh_ptr, err_code, string);

     end error;

process_constant:
     proc;
	scal_fn.arg.type (scal_fn.nargs) = CONSTANT;
	token_data_temp = token_data;
	repl_flag = "0"b;
	source_length = token_data.length;
	source_ptr = token_data.t_ptr;
	if (search (token_item, "i")) ^= NULL then
	     constant_desc = CMPX_FD;
	else constant_desc = REAL_FD;
	addr (constant_desc) -> arg_len_bits.length =
	     addr (token_data.length) -> arg_len_bits.length;
	if first_char = LEFT_PAREN then do;
		repl_flag = "1"b;			/* there is a replication factor */
		repl_ptr, token_data.t_ptr = addr (token_data.t_ptr -> bit_offset (10));
		do j = 2 to token_data.length while (first_char ^= RIGHT_PAREN);
		     token_data.t_ptr = addr (token_data.t_ptr -> bit_offset (10));
		end;
		repl_len = j - 2;
		token_data.length = token_data.length - j;
		token_data.t_ptr = addr (token_data.t_ptr -> bit_offset (10));
		token_data_temp = token_data;
		repl_fac = fixed (repl_factor);
	     end;
	if first_char = QUOTE then do;
		ci_ptr, token_data_temp.t_ptr =
		     addr (token_data_temp.t_ptr -> bit_offset (10));
		do j = 2 to token_data_temp.length while (first_char ^= QUOTE);
		     token_data_temp.t_ptr = addr (token_data_temp.t_ptr -> bit_offset (10));
		end;
		ci_len = token_data_temp.length - 2;
		if j = token_data_temp.length then
		     constant_desc = CHAR_DESC;
		else do;
			ci_len = token_data_temp.length - 1;
			constant_desc = BIT_DESC;
		     end;
		addr (constant_desc) -> arg_len_bits.length =
		     addr (ci_len) -> arg_len_bits.length;
		source_ptr = ci_ptr;
		source_length = ci_len;
		if repl_flag then do;
			source_length, cs_len = repl_fac * ci_len;
			addr (constant_desc) -> arg_len_bits.length =
			     addr (cs_len) -> arg_len_bits.length;
			allocate constant_string in (work_area);
			source_ptr, orc_ptr = cs_ptr;
			do j = 1 to repl_fac;	/* to number of replication factor */
			     osc_ptr = ci_ptr;
			     do k = 1 to ci_len;	/* one for each character in string */
				one_repl_ch = one_source_ch;
				orc_ptr = addr (orc_ptr -> bit_offset (10));
				osc_ptr = addr (osc_ptr -> bit_offset (10));
			     end;
			end;
		     end;
	     end;
	addr (CHAR_DESC) -> arg_len_bits.length =
	     addr (source_length) -> arg_len_bits.length;
	call linus_assign_data ((CHAR_DESC), source_type, source_length);
						/* returns type & length */
	call linus_assign_data (constant_desc, target_type, target_length);
	call
	     linus_lila_alloc_lit (lcb_ptr, addr (constant_desc), lit_ptr, bit_len);
	call
	     assign_round_ (lit_ptr, target_type, target_length, source_ptr, source_type,
	     source_length);
	call
	     init_sclf_source ((constant_desc), lit_ptr, target_type, target_length,
	     NULL_PTR);

	cs_ptr = null;

     end process_constant;

     end linus_lila_scal_fn;
