/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(90-04-23,Leskiw), approve(90-10-05,MCR8202),
     audit(90-10-11,Bubric), install(90-10-14,MR12.4-1039):
     Fixed rounding by changing calls from assign_ to assign_round_.
                                                   END HISTORY COMMENTS */


linus_builtin_:
     proc;


/* DESCRIPTION:
   
   This  procedure  contains  entries  that  implement  the  LINUS set builtin
   functions.  
   
   

   HISTORY:

   77-06-01 J. C. C. Jagernauth: Intially written.
   
   80-01-09   Rickie   E.    Brinegar:   Modified   to   make   use   of   the
   mdbm_util_$(complex number)_data_class entry points.
   
   80-02-04  Rickie E.  Brinegar: Modified to avoid a zero divide condition in
   avg_assign.
   
   81-07-10  Rickie  E.   Brinegar:  Modified  to  allow  the use of character
   strings for avg and sum.  This is in accordance with TR 9259.
   
   83-01-25 Dave Schimke: Added code to initialize num_ptrs which is the extent
   of the arg_list.arg_desc array to fix a subscript range error.

*/

%include mdbm_arg_list;

	dcl     1 arg_descs		 aligned based (ad_ptr),
		2 ndescs		 fixed bin,
		2 desc		 (0 refer (arg_descs.ndescs)) bit (36);

	dcl     assign_desc		 bit (36) based (arg_list.arg_des_ptr (2));
	dcl     rslt_desc		 bit (36) aligned;	/* Output: result descriptor */

	dcl     data_out1		 float dec (59) based (arg_list.arg_des_ptr (1));
	dcl     data_out2		 complex float dec (59) based (arg_list.arg_des_ptr (1));

	dcl     data_in1		 float dec (59);
	dcl     data_in2		 complex float dec (59);

	dcl     FD59		 bit (36) aligned int static options (constant) init ("100101000000000000000000000000111011"b);
						/* Float Decimal */
	dcl     CFD59		 bit (36) aligned int static options (constant) init ("100110000000000000000000000000111011"b);
						/*
						   Complex Float Decimal */
	dcl     FIB35		 bit (36) aligned int static options (constant) init ("100000100000000000000000000000100011"b);

	dcl     (
	        target_typeFD	 init (20),
	        target_typeCFD	 init (24)
	        )			 fixed bin int static options (constant);

	dcl     target_len		 fixed bin (35) int static options (constant) init (59);

	dcl     source_type		 fixed bin;
	dcl     source_len		 fixed bin (35);

	dcl     count_rslt		 fixed bin (35) based (arg_list.arg_des_ptr (1));

	dcl     ad_ptr		 ptr;		/* Input: points to input descriptors */

	dcl     count_calc		 fixed bin (35) int static init (0);
	dcl     set_fn_real_flag	 fixed bin (2) int static init (0);


	dcl     data_calc4		 float dec (59) int static init (-99999999999999999999999999999999999999999999999999999999);
	dcl     data_const4		 float dec (59) int static options (constant)
				 init (-99999999999999999999999999999999999999999999999999999999);

	dcl     data_calc1		 float dec (59) int static init (0);
	dcl     data_calc2		 complex float dec (59) int static init (0);

	dcl     data_calc3		 float dec (59) int static init (99999999999999999999999999999999999999999999999999999999);
	dcl     data_const3		 float dec (59) int static options (constant) init (99999999999999999999999999999999999999999999999999999999);

	dcl     cu_$arg_list_ptr	 entry (ptr);
	dcl     assign_round_		 entry (ptr, fixed bin, fixed bin (35), ptr, fixed bin, fixed bin (35));
	dcl     linus_assign_data	 entry (bit (36), fixed bin, fixed bin (35));
	dcl     (
	        mdbm_util_$complex_data_class,
	        mdbm_util_$number_data_class
	        )			 entry (ptr) returns (bit (1));

	dcl     addr		 builtin;

	return;					/* Should never use linus_builtin_ entry */

count_calc:
     entry;					/* Calc entry for the count set function */

	num_ptrs = 0;
	count_calc = count_calc + 1;			/* Perform count */
	return;


count_assign:
     entry;					/* Assign entry for the count set function */

	call cu_$arg_list_ptr (al_ptr);		/* Get pointer to argument list */
	count_rslt = count_calc;			/* Assign result */
	return;

count_init:
     entry;					/* Init for the this use of the count set function */
	count_calc = 0;
	return;


count_info:
     entry (ad_ptr, rslt_desc);			/* Info entry for the count set function */

	rslt_desc = FIB35;				/* Always return a count. */

	return;

avg_calc:
     entry;					/* Calc entry for the avg set function */

	call avg_sum_calc;				/* The avg and sum set functions use acommon procedure */
	count_calc = count_calc + 1;			/* Keep track of number of calls to calculate average value */
	return;


avg_assign:
     entry;					/* Assign entry for the avg set function */

	call cu_$arg_list_ptr (al_ptr);		/* Get pointer to argument list */
	if set_fn_real_flag = 1 then do;		/* Assign real result */
		if count_calc = 0 then
		     data_out1 = 0;
		else data_out1 = data_calc1 / count_calc;
	     end;
	else do;					/* Else assign complex result */
		if count_calc = 0 then
		     data_out2 = 0;
		else data_out2 = data_calc2 / count_calc;
	     end;
	return;

avg_init:
     entry;					/* Init for the this use of the avg set function */
	count_calc, data_calc1, data_calc2, set_fn_real_flag = 0;
	return;


avg_info:
sum_info:
     entry (ad_ptr, rslt_desc);			/* Info entry for the avg & sum set functions */

	if arg_descs.ndescs ^= 1 then
	     rslt_desc = "0"b;			/* Must be one desriptor */
	else if ^mdbm_util_$complex_data_class (addr (arg_descs.desc (1))) then
	     rslt_desc = FD59;			/* Result descriptor is Real Float Decimal (59) */
	else rslt_desc = CFD59;			/* Result descriptor is Complex Float Decimal (59) */
	return;

sum_calc:
     entry;					/* Calc entry for the sum set function */

	call avg_sum_calc;				/* The avg and sum set functions use a common procedure */
	return;

sum_assign:
     entry;					/* Assign entry for the sum set function */

	call cu_$arg_list_ptr (al_ptr);		/* Get pointer to argument list */
	if set_fn_real_flag = 1 then
	     data_out1 = data_calc1;			/* Assign real result */
	else data_out2 = data_calc2;			/* Assign complex result */
	return;

sum_init:
     entry;					/* Init for the this use of the sum set function */
	data_calc1, data_calc2, set_fn_real_flag = 0;
	return;

max_calc:
     entry;					/* Calc entry for the max set function */

	call cu_$arg_list_ptr (al_ptr);		/* Get pointer to argument list */
	num_ptrs = arg_list.arg_count;
	call linus_assign_data (assign_desc, source_type, source_len);
	call assign_round_ (addr (data_in1), target_typeFD, target_len, arg_list.arg_des_ptr (1), source_type, source_len);
	if data_calc4 < data_in1 then
	     data_calc4 = data_in1;			/* Find max value */
	return;


max_assign:
     entry;					/* Assign entry for max set function */

	call cu_$arg_list_ptr (al_ptr);
	data_out1 = data_calc4;			/* Assign max value */
	return;

max_init:
     entry;					/* Init for the this use of the max set function */
	data_calc4 = data_const4;
	return;


max_info:
min_info:
     entry (ad_ptr, rslt_desc);			/* Info entry for the max & min set functions */

	if arg_descs.ndescs ^= 1 then
	     rslt_desc = "0"b;			/* Must be one descriptor. */
	else do;
		if ^mdbm_util_$number_data_class (addr (arg_descs.desc (1))) then
		     rslt_desc = "0"b;		/* Type must be arithmetic */
		else if ^mdbm_util_$complex_data_class (addr (arg_descs.desc (1))) then
		     rslt_desc = FD59;		/* Result descriptor is Real Float Decimal (59) */
		else rslt_desc = "0"b;		/* Complex Float Decimal is not valid */
	     end;
	return;

min_calc:
     entry;					/* Calc entry for the min set function */

	call cu_$arg_list_ptr (al_ptr);		/* Get pointer to the argument list */
	num_ptrs = arg_list.arg_count;
	call linus_assign_data (assign_desc, source_type, source_len);
	call assign_round_ (addr (data_in1), target_typeFD, target_len, arg_list.arg_des_ptr (1), source_type, source_len);
	if data_calc3 > data_in1 then
	     data_calc3 = data_in1;			/* Find min value */
	return;


min_assign:
     entry;					/* Assign entry for the min set function */

	call cu_$arg_list_ptr (al_ptr);
	data_out1 = data_calc3;			/* Assign min value */
	return;

min_init:
     entry;					/* Init for this use of the min set function */
	data_calc3 = data_const3;
	return;

avg_sum_calc:
     proc;					/* Calc procedure for both avg and sum entries. */
	call cu_$arg_list_ptr (al_ptr);		/* Get pointer to argument list */
	num_ptrs = arg_list.arg_count;
	if set_fn_real_flag = 0 then do;		/* First time through? */
		if ^mdbm_util_$complex_data_class (arg_list.arg_des_ptr (2)) then
		     set_fn_real_flag = 1;		/* Type is real */
		else set_fn_real_flag = 2;		/* Type is complex */
	     end;
	call linus_assign_data (assign_desc, source_type, source_len);
	if set_fn_real_flag = 1 then do;
		call assign_round_ (addr (data_in1), target_typeFD, target_len, arg_list.arg_des_ptr (1), source_type, source_len);
		data_calc1 = data_calc1 + data_in1;	/* Sum real values */
	     end;
	else do;
		call assign_round_ (addr (data_in2), target_typeCFD, target_len, arg_list.arg_des_ptr (1), source_type, source_len);
		data_calc2 = data_calc2 + data_in2;	/* Sum complex values */
	     end;

     end avg_sum_calc;


     end linus_builtin_;
