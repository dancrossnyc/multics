/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-01-13,Dupuis), approve(86-01-13,MCR7188), audit(86-07-23,GWMay),
     install(86-07-29,MR12.0-1106):
     84-12-28 Matthew Pierret: Changed to use linus_lila_tokens_ external
     variables instead of hard-coding reserved words into the code.
                                                   END HISTORY COMMENTS */


linus_lila_get_token:
     proc (lcb_ptr, lsh_ptr, start_pos, td_ptr, code);

/* DESCRIPTION:

   This procedure is the lexical analizer for the LILA translator.  It isolates
   the  next  token  after  the start_pos, returns its key and a pointer to and
   length  of  its  value.   The  start_pos  is adjusted to the first character
   following the token just isolated.



   HISTORY:

   77-07-01 J. A. Weeldreyer: Initially written.

   77-12-01  J.   A.   Weeldreyer:  Modified  to correctly parse complex arith.
   constants.

   78-02-01 J. A. Weeldreyer: Modified to better handle hyphenated idents.

   78-06-01 J. A. Weeldreyer: Modified to properly detect keywords.

   78-07-01 J. A. Weeldreyer: Modified to properly parse row designators.

   78-07-01 J. A. Weeldreyer: Modified to properly parse linus variables.

   79-02-01  J.   C.   C.   Jagernauth:  Modified to access version 4 resultant
   information.

   80-04-13  Rickie  E.   Brinegar:  Modified  to  use  a  work area defined on
   lcb.lila_area_ptr instead of getting system free area.

   81-01-14  Rickie  E.   Brinegar:  Modified to use linus_rel_array instead of
   using the resultant model.

   81-02-02  Rickie  E.   Brinegar: moved the internal static debug_switch from
   the db_on entry to the main entry.

   81-02-03 Rickie E.  Brinegar: the builtins char, fixed and rel were added to
   the  declarations.   The  unused  variables  i,  k, rindex were removed from
   various  procedures.   The valid_rel procedure was modified to add temp_rels
   to the linus_rel_array structure by the LINUS temp_table_name.

   81-06-03  Rickie  E.   Brinegar: Modified to remember temporary tables as a
   result of TR9817.
   
   81-07-15 Rickie E. Brinegar: Removed useless cleanup condition handler.
   
   81-10-05  Rickie  E.   Brinegar:  Changed  the  valid_attr procedure to use
   ls_block.range_items.rel_index (tv_index) as a subscript for temp_tab_names
   when  instead  of tv_index.  This alleviates the losing of temporary tables
   when  they do not appear in the order that they are defined in.  This is in
   response to TRs 11494, 11626 and 11645
   
   81-10-07  Rickie  E.   Brinegar: Modified the ident_proc proc to only check
   for    valid    relations    when    being    called   by   linus_lila_from
   (ls_header.from_token = "1"b). This is in response to TR11628.
   
   81-10-19   Rickie   E.    Brinegar:   Modified   the   error  proc  to  set
   ls_header.cur_pos  to cur_pos before returning to the caller.  This permits
   linus_lila_error  to  correctly  determine the line that the error occurred
   in.  This is in response to TR8988.

   81-10-30  DJ  Schimke:  Modified  is_const internal function to use verify
   instead of index.

   81-11-05  DJ  Schimke:  Modified  to  permit unary operators in constants.
   This includes both leading +- signs and parenthesized constants.  Declared
   first_op and first_dp. This is in response to TR6446.

   81-11-25 Rickie E. Brinegar: Modified to time calls to MRDS (dsl_ calls).

   83-06-16  DJ  Schimke:  Modified to permit single constants as arguments to
   functions. This amounts to letting (1) through as an expression rather than
   as a constant. This is in response to TR15411.

*/

%include linus_lcb;
%page;
%include linus_ls_block;
%page;
%include linus_ls_header;
%page;
%include linus_rel_array;
%page;
%include linus_set_fn_info;
%page;
%include linus_source;
%page;
%include linus_temp_tab_names;
%page;
%include linus_token_data;
%page;
%include linus_variables;
%page;
%include mrds_rslt_info;


	dcl     (
	        code,				/* Output:  status code */
	        cur_pos,				/* current position in string */
	        i,				/* internal index */
	        icode,				/* internal status code */
	        j,				/* internal index */
	        start_pos				/* Input/Output:  position at which to start scan */
	        )			 fixed bin (35);

	dcl     initial_mrds_vclock	 float bin (63);

	dcl     found		 bit (1);

	dcl     ARITH_CHARS		 char (16) int static options (constant)
				 init (".eib0123456789+-");
	dcl     CONS_PREC		 char (9) int static options (constant) init ("(,+-*/<>=");
	dcl     ARITH_START		 char (14) int static options (constant)
				 init (".0123456789+-(");
	dcl     DELIMS		 char (3) int static options (constant) init ("
	 ");
	dcl     ID_CHARS		 char (64) int static options (constant)
				 init (
				 "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-");
	dcl     BLOCK		 fixed bin int static options (constant) init (4);
	dcl     debug_switch	 bit (1) int static init ("0"b);
	dcl     sfi_ptr		 ptr;		/* pointer to scalfn_info structure */

	dcl     (
	        linus_data_$max_pred_stack_size,
	        linus_data_$max_range_items,
	        linus_error_$dup_row_des,
	        linus_error_$inv_string_const,
	        linus_error_$invalid_token,
	        linus_error_$linus_var_not_defined,
	        linus_error_$long_id,
	        linus_error_$long_lv_name,
	        linus_error_$unbal_parens,
	        linus_error_$undef_col,
	        linus_error_$undef_id,
	        linus_error_$undef_row_des,
	        linus_error_$undef_tab,
	        mrds_data_$max_id_len,
	        mrds_data_$max_select_items,
	        mrds_data_$max_temp_rels,
	        mrds_data_$max_token_size,
	        sys_info$max_seg_size
	        )			 fixed bin (35) ext;
dcl (linus_lila_tokens_$first_chars,
linus_lila_tokens_$differ,
linus_lila_tokens_$dup,
linus_lila_tokens_$from,
linus_lila_tokens_$inter,
linus_lila_tokens_$select,
linus_lila_tokens_$union,
linus_lila_tokens_$unique,
linus_lila_tokens_$where) char (32) varying ext;

	dcl     (addr, collate, char, fixed, index, length, null, rel, search, substr,
                  translate, vclock, verify)
                                         builtin;

	dcl     dsl_$get_fn_info
				 entry (fixed bin (35), char (*), ptr, ptr, fixed bin (35));
	dcl     dsl_$get_rslt_info
				 entry (fixed bin (35), char (*), ptr, ptr, fixed bin (35));
	dcl     dsl_$get_temp_info
				 entry (fixed bin (35), fixed bin (35), ptr, ptr, fixed bin (35));
	dcl     ioa_		 entry options (variable);
	dcl     ioa_$nnl		 entry options (variable);
	dcl     first_op		 fixed bin;	/* position of first unary operator in a constant */
	dcl     first_dp		 fixed bin;	/* position of first decimal point in a constant */

	ttn_ptr = lcb.ttn_ptr;
	linus_rel_array_ptr = lcb.rel_array_ptr;
	rslt_ptr = null;

	if start_pos > lcb.lila_chars then /* nothing left */
	     token_data.key = NULL;
	else do;					/* if have something left */

		i = verify (substr (source_str, start_pos), DELIMS);
						/* skip white space */
		if i > 0 then do;			/* if possible token */
			cur_pos = start_pos + i - 1;	/* first char of poss. token */
			go to char_proc (index (collate (), source_array (cur_pos)));
						/* see what we have */

char_proc (1):					/* special characters */
char_proc (2):
char_proc (3):
char_proc (4):
char_proc (5):
char_proc (6):
char_proc (7):
char_proc (8):
char_proc (9):
char_proc (10):
char_proc (11):
char_proc (12):
char_proc (13):
char_proc (14):
char_proc (15):
char_proc (16):
char_proc (17):
char_proc (18):
char_proc (19):
char_proc (20):
char_proc (21):
char_proc (22):
char_proc (23):
char_proc (24):
char_proc (25):
char_proc (26):
char_proc (27):
char_proc (28):
char_proc (29):
char_proc (30):
char_proc (31):
char_proc (32):
char_proc (33):					/* space */
char_proc (36):					/* # */
char_proc (37):					/* $ */
char_proc (38):					/* % */
char_proc (40):					/* ' */
char_proc (59):					/* : */
char_proc (60):					/* ; */
char_proc (64):					/* ? */
char_proc (65):					/* @ */
char_proc (92):					/* [ */
char_proc (93):					/* \ */
char_proc (94):					/* ] */
char_proc (96):					/* _ */
char_proc (97):					/* ` */
char_proc (127):					/* ~ */
char_proc (128):					/* PAD */
			token_data.length = 1;	/* so user knows what caused problem */
			token_data.t_ptr = addr (source_array (cur_pos));
			token_data.must_free = "0"b;
			call error (linus_error_$invalid_token); /* none of these chars. can start a token */

char_proc (34):					/* ! */
			token_data.key = LINUS_VAR;	/* this is a linus variable */
			token_data.must_free = "0"b;	/* wont alloc. */
			cur_pos = cur_pos + 1;	/* first char past ! */
			token_data.t_ptr = addr (source_array (cur_pos));
			i = verify (substr (source_str, cur_pos), ID_CHARS);
						/* find end of token */
			if i <= 0 then
			     i = lcb.lila_chars - cur_pos + 2;
			token_data.length = i - 1;
			if lcb.lv_ptr = null then /* if no variables defined */
			     call error (linus_error_$linus_var_not_defined);
			lv_ptr = lcb.lv_ptr;
			if variables.nvars <= 0 then /* if no variables */
			     call error (linus_error_$linus_var_not_defined);
			do j = 1 to variables.nvars
			     while (variables.var_info.name (j)
			     ^= substr (source_str, cur_pos, token_data.length));
						/* look for var. */
			end;
			if j > variables.nvars then do; /* if didn't find it */
				i = index (substr (source_str, cur_pos, token_data.length), "-");
						/* look for imbedded hyphen */
				if i <= 0 then
				     call error (linus_error_$linus_var_not_defined);
						/* not there */
				token_data.length = i - 1; /* found one, check first part */
				do j = 1 to variables.nvars
				     while (variables.var_info.name (j)
				     ^= substr (source_str, cur_pos, token_data.length));
				end;
				if j > variables.nvars then
				     call error (linus_error_$linus_var_not_defined);
			     end;			/* if didn't find it first time */
			if token_data.length > mrds_data_$max_id_len then
			     /* if too long */
			     call error (linus_error_$long_lv_name);
			start_pos = cur_pos + token_data.length; /* adjust scan start pos. */
			go to exit;		/* end ! */

char_proc (35):					/* " */
			token_data.key = CONST;	/* this is a string constant */
			token_data.must_free = "0"b;	/* not allocating */
			token_data.t_ptr = addr (source_array (cur_pos));
			found = "0"b;		/* init for end search */
			cur_pos = cur_pos + 1;
			token_data.length = 1;
			i = index (substr (source_str, cur_pos), """"); /* look for next " */
			do while (i > 0 & ^found);	/* search for single quote */
			     token_data.length = token_data.length + i; /* increment length */
			     cur_pos = cur_pos + i;	/* first char beyond */
			     if cur_pos > lcb.lila_chars then
				found = "1"b;	/* single quote at end of string */
			     else if source_array (cur_pos) = """" then do;
				     cur_pos = cur_pos + 1;
				     token_data.length = token_data.length + 1;
				     if cur_pos <= lcb.lila_chars then
					i = index (substr (source_str, cur_pos), """");
				     else i = 0;
				end;		/* if double " */
			     else found = "1"b;	/* if single " */
			end;			/* single " search loop */
			if ^found then
			     call error (linus_error_$inv_string_const);
			if cur_pos ^> lcb.lila_chars then
			     if source_array (cur_pos) = "b" then do; /* if bit string */
				     cur_pos = cur_pos + 1;
				     token_data.length = token_data.length + 1;
				end;
			start_pos = cur_pos;
			go to exit;		/* end " */

char_proc (39):					/* & */
			call set_token (AND, 1);	/* return AND token */
			go to exit;

char_proc (41):					/* ( */
			token_data.key = LP;	/* assume LP unless proven other */
			i = verify (substr (source_str, cur_pos + 1), "0123456789");
						/* is possible string const */
			if source_array (cur_pos + i) = ")" & i > 1 then do;
						/* good chance of string const */
				j = verify (substr (source_str, cur_pos + i + 1), DELIMS);
						/* skip white space */
				if source_array (cur_pos + i + j) = """" then do;
						/* have string const */
					token_data.key = CONST;
					token_data.length = i + j + 1; /* init for quote search loop */
					token_data.t_ptr = addr (source_array (cur_pos));
					cur_pos = cur_pos + i + j + 1;
					found = "0"b;
					i = index (substr (source_str, cur_pos), """");
						/* find next quote */
					do while (i > 0 & ^found); /* until we find a single quote */
					     token_data.length = token_data.length + i;
						/* incr. length */
					     cur_pos = cur_pos + i; /* first char beyond */
					     if cur_pos > lcb.lila_chars then
						call error (linus_error_$inv_string_const);
					     if source_array (cur_pos) = """" then do;
						/* if double quote */
						     cur_pos = cur_pos + 1;
						     token_data.length = token_data.length + 1;
						     if cur_pos <= lcb.lila_chars then
							i = index (substr (source_str, cur_pos), """");
						     else i = 0; /* terminate if past end of string */
						end; /* if double quote */
					     else do; /* if single quote */
						     found = "1"b;
						     cur_pos = cur_pos + i;
						     token_data.length = token_data.length + i;
						end; /* if single quote */
					end;	/* single quote search loop */
					if ^found then
					     call error (linus_error_$inv_string_const);
					if source_array (cur_pos) = "b" then do; /* if bit string */
						cur_pos = cur_pos + 1;
						token_data.length = token_data.length + 1;
					     end;
					token_data.must_free = "0"b;
					start_pos = cur_pos;
				     end;		/* if string const */
			     end;			/* if good chance */
			i = verify (substr (source_str, cur_pos + 1), ARITH_CHARS || DELIMS);			
			if source_array (cur_pos + i) = ")" then do; /* possible arith constant */
			     first_op = search (substr (source_str, cur_pos + 1, i), "+-");
			     /* find first unary operator */
			     if first_op ^= 0
			          & search (substr (source_str, cur_pos + first_op + 1, i - first_op),
			          "+-") = 0
			          & search (substr (source_str, cur_pos + 1, first_op),
			          "1234567890") = 0 then do; /* valid unary */
			               first_dp = index (substr (source_str, cur_pos + 1, i), ".");
				     /* find first period */
				     if search (
				          substr (source_str, cur_pos + first_dp + 1, i - first_dp),
				          ".") = 0 then
				          call arith_const;
				     end;		/* is valid unary */
				  end;			/* possible arith constant */

			if token_data.key = LP then
			     call set_token (LP, 1);	/* if wasn't const */
			go to exit;		/* end ( */

char_proc (42):					/* ) */
			call set_token (RP, 1);
			go to exit;

char_proc (43):					/* * */
			call set_token (STAR, 1);
			go to exit;

char_proc (44):					/* + */
			if is_const () = "1"b then
			     call arith_const;	/* is arith const = "1"b */
			else call set_token (PLUS, 1);/* is operator */
			go to exit;

char_proc (45):					/* , */
			call set_token (COMMA, 1);
			go to exit;

char_proc (46):					/* - */
			if is_const () = "1"b then
			     call arith_const;
			else call set_token (MINUS, 1);
			go to exit;

char_proc (47):					/* . */
char_proc (49):					/* 0 */
char_proc (50):					/* 1 */
char_proc (51):					/* 2 */
char_proc (52):					/* 3 */
char_proc (53):					/* 4 */
char_proc (54):					/* 5 */
char_proc (55):					/* 6 */
char_proc (56):					/* 7 */
char_proc (57):					/* 8 */
char_proc (58):					/* 9 */
						/* these characters begin an arith. const. */
			call arith_const;
			go to exit;

char_proc (48):					/* / */
			call set_token (DIV, 1);
			go to exit;

char_proc (61):					/* < */
			if source_array (cur_pos + 1) = "=" then
			     call set_token (LE, 2);
			else call set_token (LT, 1);
			go to exit;

char_proc (62):					/* = */
			call set_token (EQ, 1);
			go to exit;

char_proc (63):					/* > */
			if source_array (cur_pos + 1) = "=" then
			     call set_token (GE, 2);
			else call set_token (GT, 1);
			go to exit;

char_proc (66):					/* A */
char_proc (67):					/* B */
char_proc (68):					/* C */
char_proc (69):					/* D */
char_proc (70):					/* E */
char_proc (71):					/* F */
char_proc (72):					/* G */
char_proc (73):					/* H */
char_proc (74):					/* I */
char_proc (75):					/* J */
char_proc (76):					/* K */
char_proc (77):					/* L */
char_proc (78):					/* M */
char_proc (79):					/* N */
char_proc (80):					/* O */
char_proc (81):					/* P */
char_proc (82):					/* Q */
char_proc (83):					/* R */
char_proc (84):					/* S */
char_proc (85):					/* T */
char_proc (86):					/* U */
char_proc (87):					/* V */
char_proc (88):					/* W */
char_proc (89):					/* X */
char_proc (90):					/* Y */
char_proc (91):					/* Z */
			call ident_proc;		/* determine identifier type, and set up token data */
			go to exit;

char_proc (98):					/* a */
char_proc (99):					/* b */
char_proc (100):					/* c */
char_proc (101):                                            /* d */
char_proc (102):					/* e */
char_proc (103):                                            /* f */
char_proc (104):					/* g */
char_proc (105):					/* h */
char_proc (106):                                            /* i */
char_proc (107):					/* j */
char_proc (108):					/* k */
char_proc (109):					/* l */
char_proc (110):					/* m */
char_proc (111):					/* n */
char_proc (112):					/* o */
char_proc (113):					/* p */
char_proc (114):					/* q */
char_proc (115):					/* r */
char_proc (116):                                            /* s */
char_proc (117):					/* t */
char_proc (118):                                            /* u */
char_proc (119):					/* v */
char_proc (120):                                            /* w */
char_proc (121):					/* x */
char_proc (122):					/* y */
char_proc (123):					/* z */
			if verify (substr (source_str, cur_pos, 1), linus_lila_tokens_$first_chars) ^= 0
			then do;
			     call ident_proc;		/* determine identifier type, and set up token data */
			     go to exit;
			end;
			else do;
			     i = verify (substr (source_str, cur_pos + 1), ID_CHARS);
			     if substr (source_str, cur_pos, i) = linus_lila_tokens_$from
			     then call set_token (FROM, length(linus_lila_tokens_$from));
			     else if substr (source_str, cur_pos, i) = linus_lila_tokens_$select
			     then call set_token (SELECT, length(linus_lila_tokens_$select));
			     else if substr (source_str, cur_pos, i) = linus_lila_tokens_$where 
			     then call set_token (WHERE, length(linus_lila_tokens_$where));
			     else if substr (source_str, cur_pos, i) = linus_lila_tokens_$differ
			     then call set_token (DIFFER, length(linus_lila_tokens_$differ));
			     else if substr (source_str, cur_pos, i) = linus_lila_tokens_$dup
			     then call set_token (DUP, length(linus_lila_tokens_$dup));
			     else if substr (source_str, cur_pos, i) = linus_lila_tokens_$inter
			     then call set_token (INTER, length(linus_lila_tokens_$inter));
			     else if substr (source_str, cur_pos, i) = linus_lila_tokens_$unique
			     then call set_token (UNIQUE, length(linus_lila_tokens_$unique));
			     else if substr (source_str, cur_pos, i) = linus_lila_tokens_$union
			     then call set_token (UNION, length (linus_lila_tokens_$union));
			     else call ident_proc;
			end;
			go to exit;

char_proc (95):					/* ^ */
			if source_array (cur_pos + 1) = "=" then
			     call set_token (NE, 2);
			else call set_token (NOT, 1);
			go to exit;

char_proc (124):					/* { */
			call set_token (LB, 1);
			go to exit;

char_proc (125):					/* | */
			call set_token (OR, 1);
			go to exit;

char_proc (126):					/* } */
			call set_token (RB, 1);
			go to exit;

exit:
		     end;				/* token section */

		else do;				/* ran out of tokens */
			token_data.key = NULL;
			start_pos = lcb.lila_chars + 1;
		     end;
	     end;					/* if something to do */

	code = 0;
	if debug_switch then do;
		if cur_pos >= 1 & start_pos > cur_pos then
		     call
			ioa_ ("Token: ""^a""",
			substr (source_str, cur_pos, start_pos - cur_pos));
		else call
			ioa_ ("Token: start_pos = ^i; cur_pos = ^i", start_pos,
			cur_pos);
		call ioa_ ("^2-key = ^i", token_data.key);

		call ioa_$nnl ("^2-Flags: ");
		if ^token_data.must_free then
		     call ioa_$nnl ("^^");
		call ioa_$nnl ("must_free,");
		if ^token_data.temp_tab then
		     call ioa_$nnl ("^^");
		call ioa_ ("temp_tab");

		call ioa_ ("^2-mvar = ""^a""^/^2-lvar = ""^a""", mvar, lvar);
		call ioa_ ("^2-length = ^i", token_data.length);

		call ioa_ ("^2-t_ptr = ^p", token_data.t_ptr);
	     end;					/* if debug_switch */

real_exit:
	;
	return;

db_on:
     entry;

/* Usage:
   linus_lila_get_token$db_on

   Turns on a switch which causes the value of the current
   token to be displayed at the terminal.
*/

	debug_switch = "1"b;
	return;

db_off:
     entry;

/* Usage:
   linus_lila_get_token$db_off

   Turns off the switch which causes the value of the current
   token to be displayed at the terminal.
*/

	debug_switch = "0"b;
	return;

set_token:
     proc (key, length);

/* Procedure to set up token_data given a key value and token length */

	dcl     (key, length)	 fixed bin;

	token_data.key = key;
	token_data.length = length;
	token_data.temp_tab, token_data.must_free = "0"b; /* didn't allocate */
	token_data.mvar, token_data.lvar = "";
	token_data.t_ptr = addr (source_array (cur_pos));
	start_pos = cur_pos + length;

     end set_token;

set_id_token:
     proc (key, mvar, lvar, length);

/* Procedure to set up an ident. token data */

	dcl     (key, length)	 fixed bin;
	dcl     (mvar, lvar)	 char (32) var;

	token_data.key = key;
	token_data.length = length;
	token_data.temp_tab, token_data.must_free = "0"b; /* didn't allocate */
	token_data.t_ptr = addr (source_array (cur_pos));
	token_data.mvar = mvar;
	token_data.lvar = lvar;
	start_pos = cur_pos + length;

     end set_id_token;

set_tab_name:
     proc (temp_flag, length);

/* procedure to set up table name token */

	dcl     length		 fixed bin;
	dcl     temp_flag		 bit (1);

	token_data.key = TAB_NAME;
	token_data.length = length;
	token_data.must_free = "0"b;
	token_data.t_ptr = addr (source_array (cur_pos));
	token_data.temp_tab = temp_flag;
	token_data.mvar, token_data.lvar = "";
	start_pos = cur_pos + length;

     end set_tab_name;

is_const:
     proc returns (bit (1));

/* Procedure to determine if token at cur_pos is an arithmetic constant or
   is an operator. */

	dcl     i			 fixed bin;
	dcl     flag		 bit (1);

	if verify (source_array (cur_pos + 1), ARITH_START) = 0 then do;
						/* possible const. */
		do i = cur_pos - 1 to 1 by -1
		     while (verify (source_array (i), DELIMS) = 0);
		end;				/* search for end of prev token */
		if i < 1 then
		     flag = "1"b;			/* first token, must be const */
		else if verify (source_array (i), CONS_PREC) = 0 then
		     flag = "1"b;			/* if predecessor forces constant */
		else flag = "0"b;			/* is operator */
	     end;					/* possible constant */
	else flag = "0"b;				/* if no chance of constant */
	return (flag);
     end is_const;

arith_const:
     proc;

/* Procedure to isolate an arithmetic constant, and set up the resulting token
   data */

	dcl     i			 fixed bin;	/* length of constant */
	dcl     j			 fixed bin;	/* location of LP */

	token_data.key = CONST;
	token_data.t_ptr = addr (source_array (cur_pos));
	token_data.must_free = "0"b;
	i = verify (substr (source_str, cur_pos + 1), ARITH_CHARS);
	if i <= 0 then
	     i = lcb.lila_chars - cur_pos + 1;
	else if source_array (cur_pos + i - 1) = "+" /* see if ended with operator */
		| source_array (cur_pos + i - 1) = "-" then
	     i = i - 1;

	j = index (substr (source_str, cur_pos), "(");	/* find lp position (if any)*/
	if (j = 1) | (j = 2 & search (substr (source_str, cur_pos, 2), "-+") = 1)
	then do;					/* constant enclosed in parentheses */
		i = index (substr (source_str, cur_pos), ")"); /* must end in matching parentheses */
		if search (substr (source_str, cur_pos + j, i - j - 1), "()") ^= 0 then
		     call error (linus_error_$unbal_parens); /* no others allowed */
		if j = 1 then
		     substr (source_str, cur_pos, i) =
			substr (source_str, cur_pos + 1, i - 1);
		else substr (source_str, cur_pos, i) =
			source_array (cur_pos)
			|| substr (source_str, cur_pos + 2, i - 2); /* strip out lp */
		substr (source_str, cur_pos, i) =
		     translate (substr (source_str, cur_pos, i), "", " +)");
						/* strip out spaces, rp, and plus */
	     end;					/* enclosed constant */

	token_data.length = i;			/* set length constant */
	token_data.mvar, token_data.lvar = "";
	start_pos = cur_pos + i;

     end arith_const;

ident_proc:
     proc;

/* Procedure to determine identifier type.  The following items are checked for,
   in the order specified: row_designator, relation name, column name, set function,
   scalar function. */

	dcl     (i, j, k, vindex)	 fixed bin;
	dcl     temp_flag		 bit (1);
	dcl     f_choice		 char (i) based (addr (source_array (cur_pos)));
	dcl     s_choice		 char (j) based (addr (source_array (cur_pos)));
          dcl     ip_character_string_length fixed bin;
	dcl     ip_character_string char (ip_character_string_length) based (addr (source_array (cur_pos + i + 1)));

	j = 0;					/* init */
	i = verify (substr (source_str, cur_pos), ID_CHARS); /* find end of id. */
	if i <= 0 then
	     i = lcb.lila_chars - cur_pos + 1;
	else i = i - 1;				/* i is length */
	token_data.length = i;			/* init. token in case of error */
	token_data.t_ptr = addr (source_array (cur_pos));
	token_data.must_free = "0"b;
	if i > mrds_data_$max_id_len then do;		/* too long, may have hidden - */
		j = index (substr (source_str, cur_pos, i), "-");
		if j <= 0 then
		     call error (linus_error_$long_id); /* is bad */
		if j > mrds_data_$max_id_len then
		     call error (linus_error_$long_id); /* if first part too long */
		else do;				/* first part ok */
			i = j - 1;
			j = 0;
		     end;
	     end;					/* if orig. id. too long */
	else j = index (substr (source_str, cur_pos, i), "-"); /* see if there is second choice */
	if j > 0 then
	     j = j - 1;				/* yes, set true length */

	lsb_ptr = ls_header.cur_ptr;			/* point to current lila stack frame */
	if ls_block.type = BLOCK then do;		/* if in lila block */
		if source_array (cur_pos + i) = ":" then do; /* row tab pair */
			if valid_var (f_choice, vindex) then
			     call error (linus_error_$dup_row_des); /* was prev. defined */
			j = verify (substr (source_str, cur_pos + i + 1), ID_CHARS);
						/* isolate rel name */
			ip_character_string_length = j - 1;
			if ^valid_rel (ip_character_string, temp_flag) then
			     call error (linus_error_$undef_tab);
			call set_token (ROW_TAB_PAIR, i + j); /* is valid row tab pair */
			token_data.temp_tab = temp_flag; /* remember if it was a temp table */
		     end;				/* if : */
		else if ls_block.nritems > 0 then do;	/* if range started */
			if source_array (cur_pos + i) = "." then do; /* possible col. spec. */
				if source_array (cur_pos + i + 1) = "*" then /* select. of entire tuple */
				     if valid_var (f_choice, vindex) then do;
					     call
						set_id_token (ROW_DES,
						ls_block.range_items.mrds_var (vindex),
						ls_block.range_items.tup_var (vindex), i);
					     start_pos = start_pos + 2; /* adjust beyond * */
					end;
				     else call error (linus_error_$undef_row_des);
				else do;		/* if not entire tuple */
					do k = ls_block.nritems by -1 to 1
					     while (f_choice ^= ls_block.range_items.tup_var (k));
					end;	/* look for tuple var. */
					if k < 1 then
					     call error (linus_error_$undef_row_des);
					vindex = k; /* save var. index */
					j = verify (substr (source_str, cur_pos + i + 1), ID_CHARS);
						/* get attr. name */
					if j <= 0 then
					     j = lcb.lila_chars - cur_pos - i;
					ip_character_string_length = j - 1;
					if ^valid_attr (vindex,
					     ip_character_string) then do;
						/* may be - */
						k = index (substr (source_str, cur_pos + i + 1, j - 1),
						     "-");
						if k <= 0 then
						     call error (linus_error_$undef_col);
						ip_character_string_length = k - 1;
						if ^valid_attr (vindex,
						    ip_character_string) then
						     call error (linus_error_$undef_col);
						j = k; /* first part ok */
					     end; /* failed first attr. choice */
					cur_pos = cur_pos + i + 1;
					call
					     set_id_token (COL_SPEC,
					     ls_block.range_items.mrds_var (vindex),
					     ls_block.range_items.tup_var (vindex), j - 1);
				     end;		/* if not entire tuple */
			     end;			/* if col. spec. */
			else if ls_header.from_token then do;
				if valid_rel (f_choice, temp_flag) then
				     call set_tab_name (temp_flag, i);
				else if valid_rel (s_choice, temp_flag) then
				     call set_tab_name (temp_flag, j);
				else call error (linus_error_$undef_tab);
			     end;
			else if valid_attr (0, f_choice) then
			     call set_col_spec (i);
			else if valid_var (f_choice, vindex) then
			     call
				set_id_token (ROW_DES,
				ls_block.range_items.mrds_var (vindex),
				ls_block.range_items.tup_var (vindex), i);
			else if valid_rel (f_choice, temp_flag) then
			     call set_tab_name (temp_flag, i);
			else if valid_set_fn (f_choice) then
			     call set_token (SET_FN, i);
			else if valid_scal_fn (f_choice) then
			     call set_token (SCAL_FN, i);
			else if valid_attr (0, s_choice) then
			     call set_col_spec (j);
			else if valid_var (s_choice, vindex) then
			     call
				set_id_token (ROW_DES,
				ls_block.range_items.mrds_var (vindex),
				ls_block.range_items.tup_var (vindex), j);
			else if valid_rel (s_choice, temp_flag) then
			     call set_tab_name (temp_flag, j);
			else call error (linus_error_$undef_id);
		     end;				/* if have range start */

		else if valid_rel (f_choice, temp_flag) then /* if first item in range */
		     call set_tab_name (temp_flag, i);
		else call error (linus_error_$undef_id);
	     end;					/* if in lila block */
	else if valid_set_fn (f_choice) then
	     call set_token (SET_FN, i);
	else call error (linus_error_$undef_id);

valid_rel:
     proc (rel_name, temp_flag) returns (bit (1));

/* Procedure to determine if a relation is defined in the database */

	dcl     rel_name		 char (*);
	dcl     (result, temp_flag)	 bit (1);
	dcl     (i, j)		 fixed bin (35);

	temp_flag, result = "0"b;

	if length (rel_name) > 0 then do;		/* make sure is non-null */
		do j = 1 to linus_rel_array.num_of_rels
		     while (linus_rel_array.rels.rel_name (j) ^= rel_name);
		end;
		if j ^> linus_rel_array.num_of_rels then
		     result = "1"b;
		if ^result & linus_rel_array.num_of_rels < linus_data_$max_range_items
		then do;				/* not referenced, check database */
			rslt_ptr = null;
			if lcb.timing_mode then
			     initial_mrds_vclock = vclock;
			call
			     dsl_$get_rslt_info (lcb.db_index, rel_name, lcb.lila_area_ptr,
			     rslt_ptr, icode);	/* see if defined in db. */
			if lcb.timing_mode then
			     lcb.mrds_time = lcb.mrds_time + (vclock - initial_mrds_vclock);
			if icode = 0 then do;	/* was found in db */
				result = "1"b;
				linus_rel_array.num_of_rels = linus_rel_array.num_of_rels + 1;
				linus_rel_array.rels.rel_name (linus_rel_array.num_of_rels) =
				     rel_name;
				linus_rel_array.rels
				     .rslt_info_ptr (linus_rel_array.num_of_rels) = rslt_ptr;
				rslt_ptr = null;
			     end;
		     end;				/* data base search */
		if ^result & linus_rel_array.num_of_rels < linus_data_$max_range_items
		then do;				/* not found, check temps */
			if ttn_ptr ^= null then do;	/* if temps defined */
				do i = 1 to mrds_data_$max_temp_rels
				     while (temp_tab_names (i) ^= rel_name);
				end;		/* search through temp tab table */
				if i <= mrds_data_$max_temp_rels then do; /* if found */
					if lcb.timing_mode then
					     initial_mrds_vclock = vclock;
					call
					     dsl_$get_temp_info (lcb.db_index, i, lcb.lila_area_ptr,
					     rslt_ptr, icode);
					if lcb.timing_mode then
					     lcb.mrds_time =
						lcb.mrds_time + (vclock - initial_mrds_vclock);
					if icode = 0 then do;
						linus_rel_array.num_of_rels =
						     linus_rel_array.num_of_rels + 1;
						linus_rel_array.rels
						     .rel_name (linus_rel_array.num_of_rels) = rel_name;
						linus_rel_array.rels
						     .rslt_info_ptr (linus_rel_array.num_of_rels) = rslt_ptr;
						rslt_ptr = null;
						result, temp_flag = "1"b;
					     end;
				     end;
			     end;			/* if temps defined */
		     end;				/* temps search */
	     end;					/* if non-null */

	return (result);

     end valid_rel;

valid_attr:
     proc (tv_index, attr_name) returns (bit (1));

/* Procedure to determine if an attribute is defined in the
   specified relation.  If tv_index is zero, the current default
   relation is chosen */

	dcl     rname		 char (32);
	dcl     attr_name		 char (*);
	dcl     result		 bit (1);
	dcl     (i, j, tv_index)	 fixed bin;

	result = "0"b;
	icode = 0;

	if tv_index <= 0 then
	     tv_index = ls_block.dflt_ritem;
	if tv_index > 0 then do;
		rslt_ptr = null;
		rname = ls_block.range_items.rel_name (tv_index);
		if rname = ".V." then do;
			rname = char (ls_block.range_items.rel_index (tv_index));
			do j = 1 to linus_rel_array.num_of_rels
			     while (linus_rel_array.rels.rel_name (j)
			     ^= temp_tab_names (ls_block.range_items.rel_index (tv_index)));
			end;
		     end;
		else
		     do j = 1 to linus_rel_array.num_of_rels
			while (linus_rel_array.rels.rel_name (j) ^= rname);
		     end;
		if j ^> linus_rel_array.num_of_rels then do; /* if found */
			rslt_ptr = linus_rel_array.rels.rslt_info_ptr (j);
			do i = 1 to rslt_info.num_attr
			     while (attr_name ^= rslt_info.attr.attr_name (i));
			end;			/* search for attr info */
			if i <= rslt_info.num_attr then
			     result = "1"b;		/* found it */
		     end;				/* found rel */
		rslt_ptr = null;
	     end;					/* search for rel info */

	return (result);

     end valid_attr;

valid_var:
     proc (var_name, i) returns (bit (1));

/* Procedure to determine is a tuple variable has been defined */

	dcl     var_name		 char (*);
	dcl     result		 bit (1);
	dcl     i			 fixed bin;

	result = "0"b;

	if ls_block.type = BLOCK then /* need search only if in block */
	     if ls_block.nritems > 0 then do;		/* if some range items defined */
		     do i = ls_block.nritems by -1 to 1
			while (var_name ^= ls_block.range_items.tup_var (i));
		     end;				/* search for tuple var */
		     if i >= 1 then
			result = "1"b;		/* was found */
		end;

	return (result);

     end valid_var;

valid_set_fn:
     proc (fn_name) returns (bit (1));

/* Procedure to determine if a set function is defined */

	dcl     fn_name		 char (*);
	dcl     result		 bit (1);

	result = "0"b;

	do linus_set_fn_info_ptr = lcb.setfi_ptr
	     repeat linus_set_fn_info.fwd_ptr
	     while (linus_set_fn_info.fwd_ptr ^= null
	     & linus_set_fn_info.name ^= fn_name);
	end;					/* search for set fn name */
	if linus_set_fn_info.name = fn_name then
	     result = "1"b;

	return (result);

     end valid_set_fn;

valid_scal_fn:
     proc (fn_name) returns (bit (1));

/* Procedure to determine if a scalar function has been defined */

	dcl     fn_name		 char (*);
	dcl     result		 bit (1);

	if lcb.timing_mode then
	     initial_mrds_vclock = vclock;
	call
	     dsl_$get_fn_info (lcb.db_index, fn_name, lcb.lila_area_ptr, sfi_ptr,
	     icode);
	if lcb.timing_mode then
	     lcb.mrds_time = lcb.mrds_time + (vclock - initial_mrds_vclock);
	if icode = 0 then
	     result = "1"b;
	else result = "0"b;

	return (result);

     end valid_scal_fn;

     end ident_proc;

set_col_spec:
     proc (length);

/* Procedure to create a tuple var . attr token */

	dcl     length		 fixed bin;

	token_data.must_free = "0"b;			/* not allocated this time */
	token_data.key = COL_SPEC;
	token_data.t_ptr = addr (source_array (cur_pos));
	token_data.length = length;
	token_data.mvar = ls_block.range_items.mrds_var (ls_block.dflt_ritem);
	token_data.lvar = ls_block.range_items.tup_var (ls_block.dflt_ritem);
	start_pos = cur_pos + length;

     end set_col_spec;

error:
     proc (cd);

/* Error procedure */

	dcl     cd		 fixed bin (35);

	code = cd;
	ls_header.cur_pos = cur_pos;
	go to real_exit;

     end error;

     end linus_lila_get_token;
