/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

linus_dtt:
     proc (sci_ptr, lcb_ptr);


/* DESCRIPTION:

   Temporary tables are defined by calling dsl_define_temp_rel.  This procedure
   will  identify  key columns and insert a "*" in the select_info structure as
   required.



   HISTORY:

   77-06-01 J. C. C. Jagernauth: Initially written.

   80-04-14  Rickie  E.   Brinegar:  Modified  to  use  a  work area defined on
   lcb.linus_area_ptr instead of getting system free area.

   80-12-02 Rickie E.  Brinegar: Entry points db_on and db_off added.

   81-02-05  Rickie  E.  Brinegar: Changed to check the temporary relation name
   against the permanent relation names and to not allow the temporary relation
   name to duplicate a permanent relation name.

   81-02-17  Rickie  E.  Brinegar: Added return statement for main entry.  This
   had been neglected when the db_(on off) entry points were added.

   81-02-20  Rickie E.  Brinegar: Changed the calls to mdb_display_value_ to be
   calls  to  mdb_display_data_value$ptr.   The  latter  allows  more  than 256
   characters to be displayed.
   
   81-07-15 Rickie E. Brinegar: Removed useless cleanup condition handler.
   
   81-10-09 Rickie E.  Brinegar: Modified to look for a the key attribute name
   with  a  space  concatenated on the end of it to guarantee that it does not
   put  the astericks in the middle of another string.  This is in response to
   TR11720.
   
   81-11-13 Rickie E. Brinegar: Added the timing of the dsl entries.

   82-02-10 Paul W. Benjamin: ssu_ conversion

   83-08-30  Bert Moberg:  Added call to linus_translate_query$auto if no current
   select expression is available

*/

%include linus_lcb;
%page;
%include linus_char_argl;
%page;
%include linus_select_info;
%page;
%include linus_arg_list;
%page;
%include mdbm_arg_list;
%page;
%include linus_temp_tab_names;

	dcl     sci_ptr		 ptr;		/* for ssu_ */

	dcl     KEY		 char (1) options (constant) int static init ("*");

	dcl     sel_items		 char (select_info.sel_items_len)
				 based (select_info.sel_items_ptr);
	dcl     table_name		 char (char_argl.arg.arg_len (1))
				 based (char_argl.arg.arg_ptr (1));
	dcl     temp_char		 char (mrds_data_$max_token_size + 1) varying;
	dcl     tmp_char		 char (char_argl.arg.arg_len (i))
				 based (char_argl.arg.arg_ptr (i));

	dcl     1 arg_len_bits	 based,
		2 pad		 bit (12) unal,
		2 length		 bit (24);	/* Length of argument for arg_list */

	dcl     (test, val_key)	 bit (1);

	dcl     debug_switch	 bit (1) int static init ("0"b);

	dcl     (
	        e_ptr		 init (null),
	        env_ptr		 init (null),
	        rslt_ptr		 init (null)
	        )			 ptr;

	dcl     (addr, char, fixed, index, length, null, rel, rtrim, substr, vclock)
				 builtin;

	dcl     cleanup		 condition;

	dcl     (code, icode, rel_index, out_code) fixed bin (35);

	dcl     (curr_pos, desc, i, l) fixed bin;

	dcl     initial_mrds_vclock	 float bin (63);

	dcl     (
	        linus_data_$dtt_id,
	        linus_error_$dtt_key_select,
	        linus_error_$dtt_max_tabs,
	        linus_error_$dtt_no_key,
	        linus_error_$dtt_not_valid,
	        linus_error_$no_db,
	        linus_error_$no_input_arg,
	        linus_error_$table_exist,
	        mrds_data_$max_temp_rels,
	        mrds_data_$max_token_size,
	        mrds_error_$undef_rel,
	        sys_info$max_seg_size
	        )			 fixed bin (35) ext;

	dcl     cu_$generate_call	 entry (entry, ptr);
	dcl     dsl_$define_temp_rel	 entry options (variable);
	dcl     dsl_$get_rslt_info
				 entry (fixed bin (35), char (*), ptr, ptr, fixed bin (35));
	dcl     ioa_		 entry options (variable);
	dcl     linus_convert_code	 entry (fixed bin (35), fixed bin (35), fixed bin (35));
	dcl     linus_translate_query$auto	 entry (ptr, ptr);
	dcl     mdb_display_data_value$ptr entry (ptr, ptr);
	dcl     ssu_$abort_line	 entry options (variable);
	dcl     ssu_$arg_count	 entry (ptr, fixed bin);
	dcl     ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21));
	dcl     work_area		 area (sys_info$max_seg_size) based (lcb.linus_area_ptr);

	val_key = "0"b;
	al_ptr, ca_ptr, char_ptr = null;

	icode, code = 0;

	if lcb.db_index = 0 then
	     call error (linus_error_$no_db, "");
	else do;
		call ssu_$arg_count (sci_ptr, nargs_init);
		if nargs_init = 0
		then call error (linus_error_$no_input_arg, "");
	     end;
	allocate char_argl in (lcb.static_area);
	on cleanup begin;
		if ca_ptr ^= null
		then free char_argl;
	     end;
	do i = 1 to nargs_init;
	     call ssu_$arg_ptr (sci_ptr, i, char_argl.arg.arg_ptr (i), char_argl.arg.arg_len (i));
	end;
	if char_argl.nargs <= 1 then
	     call error (linus_error_$dtt_no_key, "");
	if lcb.si_ptr = null then call linus_translate_query$auto (sci_ptr, lcb_ptr); /* try translating it */
	if lcb.si_ptr = null then return; /* No good?  Oh, well */
	si_ptr = lcb.si_ptr;			/* Activate select_info structure */
	if ^select_info.se_flags.val_dtt then
	     call error (linus_error_$dtt_not_valid, "");
	if lcb.timing_mode then
	     initial_mrds_vclock = vclock;
	call
	     dsl_$get_rslt_info (lcb.db_index, table_name, lcb.linus_area_ptr,
	     rslt_ptr, icode);
	if lcb.timing_mode then
	     lcb.mrds_time = lcb.mrds_time + vclock - initial_mrds_vclock;
	if icode = 0 then
	     icode = linus_error_$table_exist;
	if icode ^= mrds_error_$undef_rel then
	     call error (icode, table_name);
	do i = 2 to char_argl.nargs;
	     if char_argl.arg_len (i) > mrds_data_$max_token_size then
		call
		     error (linus_error_$dtt_key_select,
		     "^/" || tmp_char || " is longer than "
		     || char (mrds_data_$max_token_size) || " characters.");
	     temp_char = rtrim (tmp_char) || " ";
	     curr_pos = 1;
	     test = "0"b;
	     do while (curr_pos <= select_info.sel_items_len & ^test);
		curr_pos = index (sel_items, temp_char);
		if curr_pos > 0 then do;
			curr_pos = curr_pos + length (temp_char) - 2; /* -1 for the added space and
		                                            -1 for the add producing a value one to large */
			val_key = "1"b;
			test = "1"b;
			if select_info.sel_items_len > curr_pos then
			     sel_items = /* replace the blank following the attribute */
				substr (sel_items, 1, curr_pos) || KEY
				|| substr (sel_items, curr_pos + 2);
			else sel_items = substr (sel_items, 1, curr_pos) || KEY;
		     end;
		else call error (linus_error_$dtt_key_select, "^/" || tmp_char);
	     end;
	end;

	if ^val_key then
	     call error (linus_error_$dtt_key_select, "");

	rel_index = 0;				/* Init for mrds define temp rel */
	if lcb.ttn_ptr ^= null then do;
		ttn_ptr = lcb.ttn_ptr;
		do l = 1 to mrds_data_$max_temp_rels;
		     if temp_tab_names (l) = table_name then
			rel_index = l;		/* redefine temporary tables */
		end;
	     end;
	else do;
		allocate temp_tab_names in (lcb.static_area);
		lcb.ttn_ptr = ttn_ptr;
		do i = 1 to mrds_data_$max_temp_rels;
		     temp_tab_names (i) = "";
		end;
	     end;
	desc = 4 + select_info.nsevals;		/* There are 4 (+ se_vals) arguments in the call
	 to define temp rel */
	num_ptrs = desc * 2;			/* Number of pointers in arg_list */
	allocate arg_list in (work_area);		/* System standard arg_list */
	arg_list.arg_des_ptr (desc) = addr (icode);	/* Pointer to return code */
	n_chars_init = 1;				/* Number to allocate */
	allocate char_desc in (work_area);		/* Character descriptors */

	arg_list.arg_des_ptr (num_ptrs) = addr (char_desc.fb_desc);
						/* Return code descriptor */
	arg_list.arg_des_ptr (1) = addr (lcb.db_index);	/* Data base index */
	arg_list.arg_des_ptr (desc + 1) = addr (char_desc.fb_desc);
						/* Data base index descriptor */
	arg_list.arg_count, arg_list.desc_count = num_ptrs; /* Initialize argument list header */
	arg_list.code = 4;
	arg_list.pad = 0;

/* Fill in remainder of arg_list */
	char_desc.arr.var (1) = addr (select_info.se_len) -> arg_len_bits.length;
						/* Get length of selection expression */
	arg_list.arg_des_ptr (2) = select_info.se_ptr;	/* Pointer to selection expression */
	arg_list.arg_des_ptr (desc + 2) = addr (char_desc.arr (1));
						/* Selection expression descriptor */
	arg_list.arg_des_ptr (desc - 1) = addr (rel_index); /* Index returned by define_temp_rel */
	arg_list.arg_des_ptr (num_ptrs - 1) = addr (char_desc.fb_desc);
						/* Index descriptor */
	if select_info.nsevals ^= 0 then
	     do l = 1 to select_info.nsevals;
		arg_list.arg_des_ptr (2 + l) = select_info.se_vals.arg_ptr (l);
		arg_list.arg_des_ptr (2 + l + desc) = select_info.se_vals.desc_ptr (l);
	     end;

	if debug_switch then do;
		call ioa_ ("Selection expression:");
		call
		     mdb_display_data_value$ptr (select_info.se_ptr,
		     addr (char_desc.arr (1)));
	     end;

	if lcb.timing_mode then
	     initial_mrds_vclock = vclock;
	call cu_$generate_call (dsl_$define_temp_rel, al_ptr); /* Call define_temp_rel */
	if lcb.timing_mode then
	     lcb.mrds_time = lcb.mrds_time + vclock - initial_mrds_vclock;
	if rel_index > mrds_data_$max_temp_rels then
	     call error (linus_error_$dtt_max_tabs, "");
	if icode = 0 then
	     temp_tab_names (rel_index) = table_name;	/* Save temporary table name */
	else call error (icode, "");
	do i = 2 to char_argl.nargs;
	     if char_argl.arg_len (i) > mrds_data_$max_token_size then
		call
		     error (linus_error_$dtt_key_select,
		     "^/" || tmp_char || " is longer than "
		     || char (mrds_data_$max_token_size) || " characters.");
	     temp_char = rtrim (tmp_char) || "*";
	     curr_pos = 1;
	     test = "0"b;
	     curr_pos = index (sel_items, temp_char);
	     if curr_pos > 0 then do;
		     curr_pos = curr_pos + length (temp_char) - 2; /* -1 for the added "*" and
		                                            -1 for the add producing a value one to large */
		     if select_info.sel_items_len > curr_pos then
			sel_items = /* replace the "*" following the attribute */
			     substr (sel_items, 1, curr_pos) || " "
			     || substr (sel_items, curr_pos + 2);
		     else sel_items = substr (sel_items, 1, curr_pos) || " ";
		end;
	     else call error (linus_error_$dtt_key_select, "^/" || tmp_char);
	end;

	if ca_ptr ^= null
	then free char_argl;
	return;

db_on:
     entry;

/* Usage:

   linus_dtt$db_on

   Turns on a switch which cause the value of the current selection
   expression to be displayed at the terminal.
*/

	debug_switch = "1"b;
	return;

db_off:
     entry;

/* Usage:

   linus_dtt$db_off

   Turns off the switch shich causes the value of the current
   selection expression to be displayed at the terminal.
*/

	debug_switch = "0"b;
	return;

error:
     proc (err_code, string);

	dcl     err_code		 fixed bin (35);
	dcl     string		 char (*);

	if ca_ptr ^= null
	then free char_argl;
	call linus_convert_code (err_code, out_code, linus_data_$dtt_id);
	call ssu_$abort_line (sci_ptr, out_code, string);

     end error;

     end linus_dtt;
