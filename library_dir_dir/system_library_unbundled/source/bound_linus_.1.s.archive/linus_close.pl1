/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-01-13,Dupuis), approve(86-01-13,MCR7188), audit(86-07-23,GWMay),
     install(86-07-29,MR12.0-1106):
     84-12-01 Al Dupuis: Renamed sfr_ptr to force_retrieve_scope_info_ptr and
     force_ret structure to forced_retrieve_scope_info.
                                                   END HISTORY COMMENTS */


linus_close:
     proc (sci_ptr, lcb_ptr);

/*  DESCRIPTION:

   The data base is closed in the user specified mode via a call to dsl_$close.

   Linus Command:     close (c)


   HISTORY:

   77-03-01 J. C. C. Jagernauth: Initially written.

   78-09-01 J. C. C. Jagernauth: Modified for MR7.0.

   80-06-01  Jim  Gray  :  Modified  to allow close to work even when database
   already  closed outside of linus, without blowing up, and to clean up close
   processing.

   81-11-06  Rickie  E.   Brinegar:  Removed  calls  to  linus_free_se  as the
   selection expression is now allocated in the lila temporary segment.

   82-02-09  Paul W. Benjamin: ssu_ conversion.

   82-06-03  DJ Schimke: Added code to set si_ptr to null denying any
   succeeding opening access to the processed selection expression from
   this opening (TR phx13269).

*/

%include linus_lcb;
%page;
%include linus_forced_scope_info;
%page;
%include linus_ready_data;
%page;
%include linus_ready_table;
%page;
%include linus_temp_tab_names;
%page;

	dcl     sci_ptr		 ptr;		/* for ssu_ */

	dcl     dsl_$close		 entry options (variable); /*  MRDS Subroutine  */
	dcl     (
	        linus_data_$c_id,			/* Linus data */
	        linus_error_$no_db,			/* Linus error code */
	        linus_error_$no_input_arg_reqd,
	        mrds_data_$max_temp_rels,
	        sys_info$max_seg_size
	        )			 ext fixed bin (35);

	dcl     initial_mrds_vclock	 float bin (63);

	dcl     cleanup		 condition;

	dcl     i			 fixed bin;

	dcl     (addr, fixed, null, rel, vclock) builtin;

	dcl     nargs		 fixed;

	dcl     (icode, code, out_code) fixed bin (35);

	dcl     linus_print_error	 entry (fixed bin (35), char (*));
	dcl     linus_convert_code	 entry (fixed bin (35), fixed bin (35), fixed bin (35));
	dcl     ssu_$arg_count	 entry (ptr, fixed bin);

	on cleanup call clean_up;

	icode, code = 0;
	call ssu_$arg_count (sci_ptr, nargs);
	if nargs ^= 0 then
	     call linus_print_error (linus_error_$no_input_arg_reqd, "");
						/* No argument should be
						   passed */
	else if lcb.db_index = 0 then
	     call linus_print_error (linus_error_$no_db, "");
	else call main_close;

main_close:
     proc;

	declare temp_index		 fixed bin (35);

	if lcb.db_index ^= 0 then do;
		temp_index = lcb.db_index;		/* use force close philosophy */
		lcb.db_index = 0;
		if lcb.timing_mode then
		     initial_mrds_vclock = vclock;
		call dsl_$close (temp_index, icode);	/* Try to close data base */
		if lcb.timing_mode then
		     lcb.mrds_time = lcb.mrds_time + vclock - initial_mrds_vclock;
	     end;


	if icode ^= 0 then do;
		call linus_convert_code (icode, out_code, linus_data_$c_id);
						/* Convert system error code */
		call linus_print_error (out_code, "");	/* Print linus error */
	     end;

	if lcb.force_retrieve_scope_info_ptr ^= null then do;
		free lcb.force_retrieve_scope_info_ptr -> forced_retrieve_scope_info;
		lcb.force_retrieve_scope_info_ptr = null;
	     end;

	lcb.si_ptr = null;				/* delete processed selection expression */

	if lcb.ttn_ptr ^= null then do;
		ttn_ptr = lcb.ttn_ptr;
		do i = 1 to mrds_data_$max_temp_rels;
		     temp_tab_names (i) = "";
		end;
	     end;

	if lcb.rd_ptr ^= null then do;
		free lcb.rd_ptr -> ready_data;
		lcb.rd_ptr = null;
	     end;
	if lcb.rt_ptr ^= null then do;
		free lcb.rt_ptr -> ready_table;
		lcb.rt_ptr = null;
	     end;

     end main_close;



clean_up:
     proc;

	call main_close;

     end clean_up;


     end linus_close;
