/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-12-08,Hergert), approve(88-09-20,MCR7995),
     audit(88-09-21,Blair), install(88-09-26,MR12.2-1119):
     Fixed bug that caused FPE when no data was found by MRDS. This happened
     because error was called when the error was detected (correctly), but
     error called ssu_abort_line which signalled cleanup which called cleanup
     which had already been called by error. We just null the file_info_ptr
     and ca_ptr now after cleanup.
                                                   END HISTORY COMMENTS */


linus_create_list:
     proc (sci_ptr, lcb_ptr);

/* DESCRIPTION:

   Data  retrieved  from  the  data  base  are  written to a multics file to be
   manipulated subsequently by LISTER.



   HISTORY:

   77-09-01 J.  C.  C.  Jagernauth: Originaly written.

   78-08-01  J.  C.  C.  Jagernauth: Modified to handle unlimited length output
   buffers.

   79-12-19  Rickie  E.   Brinegar:  Modified  to trim all leading and trailing
   blanks using a one line modification suggestted by Chris Tavares.

   80-01-15 Rickie E.  Brinegar: Modified to use mdbm_util_$string_data_class.

   80-03-14  Rickie  E.   Brinegar:  Modified  to  use  a  work area defined on
   lcb.i_o_area_ptr instead of getting system free area.

   80-06-01  Jim  Gray:  Modified  to  correctly  detect no db open, or no args
   given.

   80-10-17  Rickie  E.   Brinegar:  Corrected the calculation of the directory
   length in the input argument.

   80-10-22  Rickie  E.   Brinegar: Modified to reuse the output_buffer and the
   target  items  pointed at by ti.ptr (l).  Also removed the free_target_items
   procedure, as it was no longer needed.

   80-10-27  Rickie  E.   Brinegar: Replaced the if statement to figure out the
   directory  length and segment length and starting places of each with a call
   expand_pathname_.   At the same time dir_name and seg_name were changed from
   based to automatic variables and from calculated lengths to char (168).

   80-11-21  Rickie  E.   Brinegar:  The  acceptable control argument for field
   names  was  changed  from  -fieldnames  to  -field_names  to  agree with the
   documentation.  This answers TR8415.

   80-11-25  Rickie  E.   Brinegar:  The  call  to  lister_$get_fieldnames  was
   modified  to use lcb.i_o_area_ptr instead of the uninitialized area_ptr.  As
   area_ptr was no longer referenced, it was deleted from the source.  Also, if
   the extend control argument was used and the file did not exsist, it was not
   created.   That  has now been changed so that the file will be created if it
   does not exist.
   
   81-09-21  Rickie  E.   Brinegar:  Changed  the  assignment  of  num_ptrs to
   num_ptrs  to  be  an  assignment  of  arg_list.arg_count to num_ptrs.  This
   avoids the subscript range condition.
   
   81-10-09    Rickie    E.     Brinegar:    Changed    expand_pathname_    to
   expand_pathname_$add_suffix   to   allow   for   segements   of   the  form
   a.b.lister.
   
   81-11-06  Rickie  E.   Brinegar:  Removed  declaration  of the unused after
   builtin.

   81-11-16 Rickie E. Brinegar: Added timing of dsl calls.

   82-02-09 Paul W. Benjamin: ssu_ conversion

   82-02-19 Paul W. Benjamin: trapping linkage error when the site has no 
   Lister.

   82-06-21 Al Dupuis: Changed error msg from linkage_error trap noted above.
   Removed useless label, goto, and ssu_$abort_subsystem call.

   82-10-13 Dave Schimke: Added call to linus_table$async_retrieval before the
   first retrieve to keep linus_table from getting lost when loading in the
   incremental mode. This call can be eliminated when all modules call 
   linus_table for their retrievals.

   82-11-15 Dave Schimke: Removed unreferenced declaration of 
   ssu_$abort_subsystem.

   83-05-19 Dave Schimke: Modified to use mdbm_util_$define_area rather than 
   linus_define_area so the work_area can be a freeing area. This is because 
   lister allocates and frees in the area and therefore expects a freeing 
   area. The structures allocated in work_area are not freed because the area
   is redefined by every module that uses this particular temp_segment. 
   This is in response to TR14246.	

   83-05-19 Dave Schimke: Modified to use linus_data_$max_user_items as the
   bounds for field_names. It was incorrectly using linus_data_$max_lvars.
   This is in response to TR14054.  Also changed the code to check for the
   correct number of field names given with the -field_names control_arg and
   insist on the -field_names when the select clause contains an expression.
   This makes the create_list request match its documentation. 

   83-08-30  Bert Moberg:  Added call to linus_translate_query if no current
   select expression is available

   83-09-12  Al Dupuis: Changed 83-05-19 fix above back to a non-freeing area,
   as the rest of linus that shares this area was not ready to deal with a
   freeing area. Lister now allocates and frees in it's own area.

   83-10-11  Al Dupuis: Added else to if statement before collecting field
   names in the arg processing loop. Before this fix it found "-extend" and
   because there was no else it started executing the -field_names code.

*/

%include linus_lcb;
%page;
%include linus_char_argl;
%page;
%include linus_select_info;
%page;
%include linus_arg_list;
%page;
%include mdbm_arg_list;

	dcl     sci_ptr		 ptr;		/* ssu_ needs this */

	dcl     1 arg_len_bits	 based,		/* Pick up length for descriptor */
		2 pad		 bit (12) unal,
		2 length		 bit (24) unal;

	dcl     1 fieldname_info	 aligned based (fn_info_ptr),
		2 version		 fixed bin,	/* (INPUT) =1 */
		2 n_fieldnames	 fixed bin,	/* (INPUT) number of fields in every record */
		2 name		 (n refer (fieldname_info.n_fieldnames)) char (32);
						/* (INPUT) actual field names. */

	dcl     1 fn_info		 aligned based (fieldname_info_ptr), /* like fieldname_info */
		2 version		 fixed bin,
		2 n_fieldnames	 fixed bin,
		2 name		 (n refer (fn_info.n_fieldnames)) char (32);

	dcl     1 open_info		 aligned,
		2 version		 fixed bin,	/* =1 */
		2 flags		 aligned,
		  3 create	 bit (1) unal,	/* ON ==> create file if not found */
		  3 discard_records	 bit (1) unal,	/* ON ==> throw away all records in file */
		  3 assign_fieldnames bit (1) unal,	/* ON ==> initialize fieldnames in file */
		  3 mbz		 bit (33) unal,	/* must be zero */
		2 fieldname_info_ptr ptr;		/* ptr to fieldname_info structure */

/*  NOTE:

   The flags are interrelated in the following way:

   If the file is successfully created (create=ON), then assign_fieldnames
   must  be  ON,  and  filename_info_ptr  must  point  to  a filename_info
   structure.

   The  discard_records  flag  causes all existing records (if any) in the
   file  to  be  thrown  away.  This flag does not depend on either of the
   other flags.

   The  assign_fieldnames flag must be ON for newly created files, and may
   be  ON for old files only if the discard_records flag is also ON.  This
   flag   causes   new   fieldnames   to  be  stored  in  the  file.   The
   fieldname_info_ptr must point to a fieldname_info structure.

*/

	dcl     1 record_info	 aligned based (rec_info_ptr),
		2 version		 fixed bin,	/* (INPUT) =1 */
		2 n_fields	 fixed bin,	/* (INPUT) number of fields in this record */
		2 field		 (n refer (record_info.n_fields)) aligned,
		  3 field_ptr	 ptr,		/* (INPUT) ptr to first char of Nth record */
		  3 field_len	 fixed bin (21);	/* (INPUT) len in chars of Nth record */

/*  NOTE:

   This  entry  adds a new record to a lister file.  The order of the fields is
   the   same   as   the   order   in   the   fieldname_info   structure   (see
   lister_$open_file, or lister_$get_fieldnames).  The number of fields in each
   record  must  match  the number of fields in every other record in the file.
   If  the  file  is  full  a non-zero code will be returned.  If the number of
   fields  is  incorrect  a non-zero code will be returned.  Zero-length fields
   are OK.

*/

	dcl     1 ti		 (select_info.n_user_items) aligned based (ti_ptr),
		2 ptr		 ptr,
		2 len		 fixed bin (35);

	dcl     ANOTHER		 char (8) options (constant) int static init ("-another");
	dcl     path_name		 char (char_argl.arg.arg_len (1))
				 based (char_argl.arg.arg_ptr (1)); /* Pathname of output file */
	dcl     tmp_char		 char (char_argl.arg.arg_len (i))
				 based (char_argl.arg.arg_ptr (i)); /* Temp location */

	dcl     dir_name		 char (168);
	dcl     seg_name		 char (168);

	dcl     (clcb_extend, field_names, first_retrieve) 
                                         bit (1) aligned;

	dcl     (
	        destination_ptr	 init (null),	/* Points to the scalar function, set function or
                                                               select_info structure */
	        e_ptr		 init (null),
	        env_ptr		 init (null),
	        fieldname_info_ptr	 init (null),
	        file_info_ptr	 init (null),
	        fn_info_ptr		 init (null),
	        out_buf_ptr		 init (null),
	        rec_info_ptr	 init (null),
	        ref_ptr		 init (null),
	        ti_ptr		 init (null),
	        user_item_ptr	 init (null)
	        )			 ptr;

	dcl     (
	        another_len,
	        caller,				/* 1 = from the request processor,
						   2 = from a scalar function,
						   3 = from a set function */
	        i,
	        l,
	        n,
	        n_bytes,
	        ob_len,				/* length of output buffer */
	        target_type
	        )			 fixed bin;

	dcl     initial_mrds_vclock	 float bin (63);

	dcl     test_entry		 entry variable;

	dcl     (addr, fixed, null, rel, substr, vclock) builtin;

	dcl     (code, icode, out_code) fixed bin (35);

	dcl     1 user_names	 aligned,
		2 n_names		 fixed bin (35),
		2 name		 (linus_data_$max_user_items) char (32) var;

	dcl     (
	        error_table_$noentry,
	        linus_data_$create_list_id,
	        linus_data_$max_user_items,
	        linus_error_$conv,
	        linus_error_$inv_arg,
	        linus_error_$inval_ctl_arg,
	        linus_error_$lister_col_nums,
	        linus_error_$lister_col_names,
	        linus_error_$no_data,
	        linus_error_$no_db,
	        linus_error_$no_input_arg,
	        linus_error_$ret_not_valid,
	        mrds_error_$tuple_not_found,
	        sys_info$max_seg_size
	        )			 fixed bin (35) ext;

	dcl     (cleanup, conversion, linkage_error) condition;

	dcl     cu_$decode_entry_value entry (entry, ptr, ptr);
	dcl     cu_$generate_call	 entry (entry, ptr);
	dcl     dsl_$retrieve	 entry options (variable);
	dcl     expand_pathname_$add_suffix
				 entry (char (*), char (*), char (*), char (*), fixed bin (35));
	dcl     linus_convert_code	 entry (fixed bin (35), fixed bin (35), fixed bin (35));
	dcl     linus_define_area      entry (ptr, char(6), fixed bin(35));
	dcl     linus_eval_set_func	 entry (ptr, ptr, fixed bin (35));
	dcl     linus_output$create_list
				 entry (ptr, fixed bin (35), ptr, ptr, ptr, ptr, fixed bin, ptr,
				 fixed bin, fixed bin (35));
	dcl     linus_translate_query$auto	 entry (ptr, ptr);
	dcl     linus_retrieve	 entry (ptr, ptr, ptr, ptr, ptr, fixed bin (35));
	dcl     linus_table$async_retrieval
				 entry (ptr, fixed bin (35));
	dcl     lister_$close_file	 entry (ptr, fixed bin (35));
	dcl     lister_$get_fieldnames entry (ptr, ptr, ptr, fixed bin (35));
	dcl     lister_$open_file	 entry (char (*), char (*), ptr, ptr, fixed bin (35));
	dcl     ssu_$abort_line	 entry options (variable);
	dcl     ssu_$arg_count	 entry (ptr, fixed bin);
	dcl     ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21));
	dcl     work_area		 area (sys_info$max_seg_size) based (lcb.i_o_area_ptr);

	on linkage_error call ssu_$abort_line (sci_ptr, error_table_$noentry,
		"Your site hasn't purchased the Lister Facility.");

	test_entry = lister_$open_file;		/* Test to see if these guys bought Lister */
	revert linkage_error;

	icode, user_names.n_names, code = 0;
	field_names = "0"b;

	al_ptr, ca_ptr, char_ptr = null;

	on cleanup call clean_up;
	on conversion call error (linus_error_$conv, "");

	if lcb.db_index = 0 then
	     call error (linus_error_$no_db, "");
	call ssu_$arg_count (sci_ptr, nargs_init);
	if nargs_init = 0 then
	     call error (linus_error_$no_input_arg, "");

	call linus_define_area (lcb.i_o_area_ptr, "I_O_", code);
	if code ^= 0 then
	     call error (code, "");
	open_info.flags.create, open_info.flags.discard_records,
	     open_info.flags.assign_fieldnames = "1"b;
	clcb_extend = "0"b;
	n_bytes = 0;
	first_retrieve = "1"b;
	another_len = 8;
	target_type = 44;				/* char var * 2 */
	caller = 1;				/* Init for linus_eval_expr */
	if lcb.si_ptr = null then call linus_translate_query$auto (sci_ptr, lcb_ptr); /* try translating it */
	if lcb.si_ptr = null then return; /* No good?  Oh, well */
	destination_ptr = lcb.si_ptr;			/* Init for linus_eval_expr */
	si_ptr = lcb.si_ptr;			/* Activate select_info data */

	allocate char_argl in (lcb.static_area);
	do i = 1 to nargs_init;
	     call ssu_$arg_ptr (sci_ptr, i, char_argl.arg.arg_ptr (i), char_argl.arg.arg_len (i));
	end;

	i = 1;

	call
	     expand_pathname_$add_suffix (path_name, "lister", dir_name, seg_name,
	     icode);
	if icode ^= 0 then
	     call error (icode, "");

	if char_argl.nargs > 1 then
	     do i = 2 to char_argl.nargs;
		if substr (tmp_char, 1, 1) = "-" then do;
			if tmp_char = "-extend" then do;
				open_info.flags.create, open_info.flags.assign_fieldnames,
				     open_info.flags.discard_records = "0"b;
				clcb_extend = "1"b;
			     end;
			else if tmp_char = "-fn" | tmp_char = "-field_names" then do;
			          field_names = "1"b;
				do i = i + 1 to char_argl.nargs
				     while (substr (tmp_char, 1, 1) ^= "-");
				     user_names.n_names = user_names.n_names + 1;
				     if user_names.n_names > select_info.n_user_items
				     then call error (0, "Too many field names were specified for the current selection expression.");

				     user_names.name (user_names.n_names) = tmp_char;
				end;
				i = i - 1;	/* pick up next item */
			     end;
			else call error (linus_error_$inval_ctl_arg, (tmp_char));
		     end;
		else call error (linus_error_$inv_arg, (tmp_char));
	     end;

	if ^select_info.se_flags.val_ret then
	     call error (linus_error_$ret_not_valid, "");
	allocate ti in (work_area);
	do l = 1 to select_info.n_user_items;
	     ti.ptr (l) = null;
	end;
	call cu_$decode_entry_value (linus_create_list, ref_ptr, env_ptr);

	if ^field_names then do;
	     n = select_info.n_user_items;
	     do l = 1 to n;
	        if select_info.user_item(l).item_type = 2	/* if expression */
		 then call error (0, "Field names must be supplied when the select clause ^/contains expressions. Use the -field_names control_arg.");
	     end;
	end;
	else n = user_names.n_names;
	if n < select_info.n_user_items
	   then call error (0, "Not enough field names were specified for the current selection expression.");
	allocate fieldname_info in (work_area);
	open_info.fieldname_info_ptr = fn_info_ptr;
	fieldname_info.version = 1;
	if ^field_names then
	     do i = 1 to select_info.n_user_items;
		fieldname_info.name (i) = select_info.user_item.name (i);
	     end;
	else
	     do i = 1 to user_names.n_names;
		fieldname_info.name (i) = user_names.name (i);
	     end;

	allocate record_info in (work_area);
	open_info.version, record_info.version = 1;
	open_info.flags.mbz = "0"b;
	call
	     lister_$open_file (dir_name, seg_name, addr (open_info), file_info_ptr,
	     icode);
	if icode = error_table_$noentry & clcb_extend then do;
		open_info.flags.create, open_info.flags.assign_fieldnames = "1"b;
		icode = 0;
		call
		     lister_$open_file (dir_name, seg_name, addr (open_info),
		     file_info_ptr, icode);
	     end;

	if icode ^= 0 then
	     call error (icode, "");

	if clcb_extend then do;
		call
		     lister_$get_fieldnames (file_info_ptr, lcb.i_o_area_ptr,
		     fieldname_info_ptr, icode);
		if icode ^= 0 then
		     call error (icode, "");
		if fn_info.n_fieldnames ^= fieldname_info.n_fieldnames then
		     call error (linus_error_$lister_col_nums, "");
		do i = 1 to fn_info.n_fieldnames
		     while (fn_info.name (i) = fieldname_info.name (i));
		end;
		if i <= fn_info.n_fieldnames then
		     call error (linus_error_$lister_col_names, "");
	     end;

	if select_info.prior_sf_ptr ^= null then
	     call linus_eval_set_func (lcb_ptr, select_info.prior_sf_ptr, icode);
	if select_info.set_fn then do;
		call
		     linus_eval_set_func (lcb_ptr, select_info.user_item.item_ptr (1),
		     icode);
		if icode = 0 then do;
			call
			     linus_output$create_list (lcb_ptr, linus_data_$create_list_id,
			     file_info_ptr, rec_info_ptr, si_ptr, ti_ptr, target_type,
			     out_buf_ptr, ob_len, icode);
			if icode ^= 0 then
			     call error (icode, "");
		     end;
	     end;
	else do;
		call linus_table$async_retrieval (lcb_ptr, icode);
		if icode ^= 0 then
		     call error (icode, "");

		call linus_retrieve (lcb_ptr, ca_ptr, char_ptr, al_ptr, e_ptr, icode);

		if al_ptr ^= null then
		     num_ptrs = arg_list.arg_count;
		char_desc.arr.var (1) = addr (another_len) -> arg_len_bits.length;
						/* Get ready for "another"
						   retrieve */
		arg_list.arg_des_ptr (2) = addr (ANOTHER);
		if icode = 0 then
		     first_retrieve = "0"b;
		do while (icode = 0);		/* Retrieve all */
		     call
			linus_output$create_list (lcb_ptr, linus_data_$create_list_id,
			file_info_ptr, rec_info_ptr, si_ptr, ti_ptr, target_type,
			out_buf_ptr, ob_len, icode);
		     if icode ^= 0 then
			call error (icode, "");
		     if lcb.timing_mode then
			initial_mrds_vclock = vclock;
		     call cu_$generate_call (dsl_$retrieve, al_ptr); /* Retrieve another */
		     if lcb.timing_mode then
			lcb.mrds_time = lcb.mrds_time + (vclock - initial_mrds_vclock);
		end;
		if icode ^= mrds_error_$tuple_not_found then
		     call error (icode, "");
		if first_retrieve then
		     call error (linus_error_$no_data, "");
	     end;

	call clean_up;
	return;

error:
     proc (err_code, msg);

	dcl     err_code		 fixed bin (35);
          dcl     msg                    char(*) var;

	call clean_up;
	call linus_convert_code (err_code, out_code, linus_data_$create_list_id);
	call ssu_$abort_line (sci_ptr, out_code, msg);


     end error;

clean_up:
     proc;

	if ca_ptr ^= null
	then do;
	     free char_argl;
	     ca_ptr = null;
	end;
	if file_info_ptr ^= null then do;
	     call lister_$close_file (file_info_ptr, icode);
	     file_info_ptr = null;
	end;

     end clean_up;


     end linus_create_list;
