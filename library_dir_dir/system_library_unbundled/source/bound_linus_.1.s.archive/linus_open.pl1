/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-01-10,Dupuis), approve(86-01-10,MCR7188), audit(86-07-23,GWMay),
     install(86-07-29,MR12.0-1106):
     Corrected the following problems: (1) No usage message when 0 args are
     supplied. (2) No usage message when 1 arg is supplied. (3) No usage
     message when more than 2 args are supplied, and an incorrect message
     is printed. (4) No usage message when an invalid opening mode is supplied.
  2) change(86-01-10,Dupuis), approve(86-05-23,MCR7404), audit(86-07-23,GWMay),
     install(86-07-29,MR12.0-1106):
     Changed to work as an active request and cleaned up minor problems.
     Returns true if database could be opened, false otherwise.
                                                   END HISTORY COMMENTS */


linus_open:
     proc (sci_ptr, lcb_ptr);

/* DESCRIPTION:

   The data base is opened in the user specified mode via a call to dsl_$open.
   Multiple data base opens are not allowed.

   LINUS request:     open data_path mode, o data_path mode

   data_path is the pathname of a MRDS data base or a data submodel associated
   with that data data base.

   mode is one of the following:

   retrieval, r
   update, u
   exclusive_retrieval, er
   exclusive_update, eu


   HISTORY:

   77-03-01 J. C. C. Jagernauth: Initially written.

   78-09-01 J. C. C. Jagernauth: Modified for MR7.0.

   79-11-28  Rickie E.  Brinegar: Modified to determine old or new data models
   from the data model headers through the rm_db_info structure.

   79-12-18  Rickie  E.  Brinegar: Modified to set scope for exclusive opening
   modes, and to require an opening mode.

   80-03-12 Rickie E.  Brinegar: Modified to use the temporary segment defined
   on lcb.linus_area_ptr rather than getting system free area.

   80-06-01  Jim Gray : Modified to capture a bad opening mode itself, instead
   of  passing a phony mode to dsl_$open, and getting a error message that has
   little meaning to the linus user.

   80-12-22  Jim Gray : changed r-u scope file modes to r-s-m-d usage now that
   mrds    handles    these    modes    for   real.    Also   added   use   of
   mrds_opening_modes_.incl

   80-12-31 Jim Gray : added init of touched bit in scope_data structure.

   81-01-12  Jim Gray : changed handling of touched bit now that part of flags
   section of scope_data.

   81-01-27  Jim  Gray  : removed reference to mdbm_data_$current_version, and
   replace with a constant instead.

   81-05-12 Rickie E.  Brinegar: Modified to not call mdbm_util_$get_rslt_info
   to   get  the  version  number  but  to  use  dsl_$get_db_version  instead.
   mdbm_util_$get_rslt_info  should  not  be  available  outside  of  MRDS for
   security reasons.

   81-05-13  Rickie  E.   Brinegar:  Added  the code to set the secured_db and
   administrator bits in lcb structure.

   81-06-19 Rickie E. Brinegar: Removed call to dsl_$get_rels.
     
   81-11-16 Rickie E. Brinegar: added timing of dsl calls.

   82-02-05 Paul W. Benjamin: ssu_ conversion

   83-02-04 Al Dupuis: Changed call to com_err_ to ssu_$print_message.

*/

%include linus_lcb;
%page;
%include linus_char_argl;
%page;
%include linus_ready_data;
%page;
%include linus_ready_table;
%page;
%include linus_scal_fn_info;
%page;
%include linus_set_fn_info;
%page;
%include mrds_model_relations;
%page;
%include mrds_opening_modes_;
%page;
%include mrds_security_info;

	dcl     sci_ptr		 ptr;		/* needed by ssu_ */
	dcl     (
	        db_version,
	        i,
	        j,
	        open_mode,
	        retrieval_mode	 init (2)
	        )			 fixed bin;

	dcl     code fixed bin (35);

	dcl     error_codes (2) fixed bin (35);

	dcl     initial_mrds_vclock	 float bin (63);

	dcl     cleanup		 condition;
          dcl     cleanup_has_been_signalled bit (1) aligned;

	dcl     (
	        data_model_ptr	 init (null),
	        free_setfi_ptr	 init (null),
	        last_setfi_ptr	 init (null)
	        )			 ptr;

	dcl     mode		 char (char_argl.arg.arg_len (2)) based (char_argl.arg.arg_ptr (2));
						/* Mode for linus open */
	dcl     open_mode_value	 (9) fixed bin int static options (constant) init (
				 /* Codes for valid open modes */
				 1, 1, 2, 2, 3, 3, 4, 4, 5); /* 5 is the only invalid open mode */
	dcl     opened_mode		 char (20);	/* need to call dsl_$get_pn */
	dcl     path_name		 char (char_argl.arg.arg_len (1))
				 based (char_argl.arg.arg_ptr (1)); /* Path_Name for linus open */

	dcl     (
	        db_path_name,			/* the absolute path name of the db */
	        out_path_name
	        )			 char (168);	/* a dummy argument to dsl_$get_db_version */

	dcl     valid_open_mode	 (8) char (19) int static options (constant) init (
				 /* Valid open modes */
				 "r", "retrieval", "u", "update", "er", "exclusive_retrieval", "eu",
				 "exclusive_update");

	dcl     active_request_flag bit (1) aligned;
	dcl     return_value char (return_value_length) varying based (return_value_ptr);
	dcl     return_value_length fixed bin (21);
	dcl     return_value_ptr ptr;

	dcl     (addr, fixed, hbound, null, rel, vclock) builtin;

	dcl     (
	        linus_error_$cant_ref_fun,		/* Linus error codes */
	        linus_error_$inv_mode,
	        linus_error_$no_input_arg,
	        linus_error_$too_few_args,
	        linus_error_$too_many_dbs,
	        mrds_error_$db_busy,
	        mrds_error_$quiesced_db,
	        sys_info$max_seg_size
	        )			 ext fixed bin (35);

	dcl     error_table_$too_many_args fixed bin(35) ext static;
	dcl     dsl_$close		 entry() options(variable);
	dcl     dsl_$declare	 entry options (variable);
	dcl     dsl_$get_db_version
				 entry (char (168), char (168), fixed bin, fixed bin (35));
	dcl     dsl_$get_rslt_rels	 entry (fixed bin (35), ptr, ptr, fixed bin (35));
	dcl     dsl_$get_pn		 entry (fixed bin (35), char (168), char (20), fixed bin (35));
	dcl     dsl_$get_security_info entry (fixed bin (35), ptr, ptr, fixed bin (35));
	dcl     dsl_$open		 entry options (variable); /* MRDS Subroutine */
	dcl     linus_stifle_mrds_sub_error entry ((*) fixed bin(35));
	dcl     ssu_$abort_line	 entry options (variable);
	dcl     ssu_$return_arg entry (ptr, fixed bin, bit(1) aligned, ptr, fixed bin(21));
	dcl     ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21));
	dcl     ssu_$print_message     entry() options(variable);
	dcl     sub_error_		 condition;
	dcl     USAGE char (36) internal static options (constant) init (
"^/Usage: open pathname opening_mode");


	ca_ptr = null;
	mr_ptr = null;

	on cleanup begin;
	     cleanup_has_been_signalled = "1"b;
	     call clean_up;
	end;

	lcb.trans_id, rd_nfiles_init = 0;
	call ssu_$return_arg (sci_ptr, nargs_init,
	     active_request_flag, return_value_ptr, return_value_length);
	if active_request_flag
	then return_value = "false";
	if lcb.db_index ^= 0 then
	     call ssu_$abort_line (sci_ptr, linus_error_$too_many_dbs);	/* Only one data base can
						   be open */
	if nargs_init = 0 then
	     call ssu_$abort_line (sci_ptr, linus_error_$no_input_arg, USAGE);  /* Some argument must
						   be passed */
	if nargs_init < 2 then
	     call ssu_$abort_line (sci_ptr, linus_error_$too_few_args, USAGE);
	if nargs_init > 2 then
	     call ssu_$abort_line (sci_ptr, error_table_$too_many_args, USAGE);
	allocate char_argl in (lcb.static_area);
	do i = 1 to 2;
	     call ssu_$arg_ptr (sci_ptr, i, char_argl.arg.arg_ptr (i), char_argl.arg.arg_len (i));
	end;
	do i = 1 to 8 while (mode ^= valid_open_mode (i));/* Find open mode */
	end;
	if i > hbound (valid_open_mode, 1) then
	     call
		ssu_$abort_line (sci_ptr, linus_error_$inv_mode,
		"Unrecognizable opening mode ^a.^a", mode, USAGE);
	open_mode = open_mode_value (i);		/* Set open mode for MRDS call */
	if active_request_flag
	then do;
	     error_codes (1) = mrds_error_$db_busy;
	     error_codes (2) = mrds_error_$quiesced_db;
	     on sub_error_ call linus_stifle_mrds_sub_error (error_codes);
	end;
	if lcb.timing_mode then
	     initial_mrds_vclock = vclock;
	call dsl_$open (path_name, lcb.db_index, open_mode, code);
						/* Try to open data base */
	if lcb.timing_mode then
	     lcb.mrds_time = lcb.mrds_time + (vclock - initial_mrds_vclock);
	if active_request_flag
	then revert sub_error_;
	if code ^= 0
	then if active_request_flag & (code = mrds_error_$db_busy | code = mrds_error_$quiesced_db)
	     then do;
		call clean_up;
		return;
	     end;
	     else call ssu_$abort_line (sci_ptr, code);
	else if active_request_flag
	     then return_value = "true";
	     else;

	if lcb.timing_mode then
	     initial_mrds_vclock = vclock;
	call dsl_$get_pn (lcb.db_index, db_path_name, opened_mode, code);
	if lcb.timing_mode then
	     lcb.mrds_time = lcb.mrds_time + (vclock - initial_mrds_vclock);
	if code ^= 0 then
	     call ssu_$abort_line (sci_ptr, code);

	if lcb.timing_mode then
	     initial_mrds_vclock = vclock;
	call dsl_$get_db_version (db_path_name, out_path_name, db_version, code);
	if lcb.timing_mode then
	     lcb.mrds_time = lcb.mrds_time + (vclock - initial_mrds_vclock);
	if code ^= 0 then
	     call ssu_$abort_line (sci_ptr, code);
	if db_version > 3 then
	     lcb.new_version = "1"b;
	else lcb.new_version = "0"b;

	if lcb.timing_mode then
	     initial_mrds_vclock = vclock;
	call
	     dsl_$get_security_info (lcb.db_index, lcb.linus_area_ptr,
	     mrds_security_info_ptr, code);
	if lcb.timing_mode then
	     lcb.mrds_time = lcb.mrds_time + (vclock - initial_mrds_vclock);
	if code ^= 0 then
	     call ssu_$abort_line (sci_ptr, code);
	lcb.administrator = mrds_security_info.administrator;
	lcb.secured_db = mrds_security_info.db_secure;

	if lcb.sclfi_ptr ^= null then do;		/* Declare user defined scalar functions */
		sclfi_ptr = lcb.sclfi_ptr;
		do while (sclfi_ptr ^= null);
		     if lcb.timing_mode then
			initial_mrds_vclock = vclock;
		     call dsl_$declare (lcb.db_index, scal_fn_info.name, code);
		     if lcb.timing_mode then
			lcb.mrds_time = lcb.mrds_time + (vclock - initial_mrds_vclock);
		     if code ^= 0 then
			call ssu_$abort_line (sci_ptr, code);
		     sclfi_ptr = scal_fn_info.fwd_ptr;
		end;
	     end;

	if lcb.setfi_ptr ^= null then do;
		free_setfi_ptr = null;
		last_setfi_ptr = lcb.setfi_ptr;
		linus_set_fn_info_ptr = lcb.setfi_ptr;
		do linus_set_fn_info_ptr = lcb.setfi_ptr
		     repeat linus_set_fn_info.fwd_ptr
		     while (linus_set_fn_info.fwd_ptr ^= null);
		     if ^linus_set_fn_info.init_entry_set then do;
			     call
				ssu_$print_message (linus_error_$cant_ref_fun, "open",
				"^/The set function ^a does not have an ""_init"" entry ^/point and has been removed from the declared set functions list."
				, linus_set_fn_info.name);
			     if lcb.setfi_ptr = last_setfi_ptr then do;
				     lcb.setfi_ptr = linus_set_fn_info.fwd_ptr;
				     last_setfi_ptr = linus_set_fn_info.fwd_ptr;
				end;
			     linus_set_fn_info.fwd_ptr = free_setfi_ptr;
			     free_setfi_ptr = linus_set_fn_info_ptr;
			end;
		     else last_setfi_ptr = linus_set_fn_info_ptr;
		end;
		do linus_set_fn_info_ptr = free_setfi_ptr repeat free_setfi_ptr
		     while (free_setfi_ptr ^= null);
		     free_setfi_ptr = linus_set_fn_info.fwd_ptr;
		     free linus_set_fn_info;
		end;
	     end;

	lcb.rt_ptr, lcb.rd_ptr = null;

	if lcb.timing_mode then
	     initial_mrds_vclock = vclock;
	call dsl_$get_rslt_rels (lcb.db_index, lcb.linus_area_ptr, mr_ptr, code);
	if lcb.timing_mode then
	     lcb.mrds_time = lcb.mrds_time + (vclock - initial_mrds_vclock);
	if code ^= 0 then
	     call ssu_$abort_line (sci_ptr, code);

	call init_ready_data;
	call init_ready_table;

	return;

init_ready_data:
     proc;

/* fill ready_data structure */

	rd_nfiles_init = model_relations.nrels;
	allocate ready_data in (lcb.static_area);
	lcb.rd_ptr = rd_ptr;
	ready_data.mode = RETRIEVAL;

	do j = 1 to model_relations.nrels;
	     ready_data.file.name (j) = model_relations.relation_name (j);
	     ready_data.file.active (j) = "0"b;
	end;


     end init_ready_data;

init_ready_table:
     proc;

	ntabs_init = model_relations.nrels;
	allocate ready_table in (lcb.static_area);
	lcb.rt_ptr = rt_ptr;
	do i = 1 to ntabs_init;
	     ready_table.tab.name (i) = model_relations.relation_name (i);
	     ready_table.tab.active (i) = "0"b;
	end;
	mr_ptr = null;

     end init_ready_table;

clean_up:
     proc;

	if ca_ptr ^= null
	then free char_argl;
	if lcb.db_index ^= 0 & cleanup_has_been_signalled
	then call dsl_$close (lcb.db_index, code);

     end clean_up;


     end linus_open;
