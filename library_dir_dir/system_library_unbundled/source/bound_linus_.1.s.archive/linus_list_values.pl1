/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-01-06,Dupuis), approve(86-05-23,MCR7404), audit(86-07-23,GWMay),
     install(86-07-29,MR12.0-1106):
     Changed to also work as an active request. Rewritten to make the program
     easier to understand.
                                                   END HISTORY COMMENTS */


/* format: off */
%skip(1);
/*   DESCRIPTION: 

     This is the main level procedure called by ssu_ to implement the
     linus list_values request. It prints or returns the values of linus
     variables that are named as arguments. If no arguments are given (for
     request usage) all variable values are printed.
*/
%page;
linus_list_values: proc (

	sci_ptr_parm,    /* input: ptr to the ssu_ info structure */
	lcb_ptr_parm     /* input: points to the linus control block */
		     );
%skip(1);
dcl lcb_ptr_parm ptr parm;
dcl sci_ptr_parm ptr parm;
%skip(1);
	call initialize;
%skip(1);
	if number_of_args_supplied = 0
	then do loop = 1 to variables.nvars;
	     call print_value (loop);
	end;
	else do loop = 1 to number_of_args_supplied;
	     call print_value (lookup_argument_number (loop));
	end;
%skip(1);
	return;
%page;
initialize: proc;
%skip(1);
	sci_ptr = sci_ptr_parm;
	lcb_ptr = lcb_ptr_parm;
	lv_ptr = lcb.lv_ptr;
%skip(1);
	call ssu_$return_arg (sci_ptr, number_of_args_supplied,
	     active_request_flag, return_value_ptr, return_value_length);
	if active_request_flag
	then return_value = "";
%skip(1);
	if lcb.db_index = 0
	then call ssu_$abort_line (sci_ptr, linus_error_$no_db);
%skip(1);
	if lv_ptr = null
	then call ssu_$abort_line (sci_ptr, linus_error_$no_linus_var);
%skip(1);
	if active_request_flag
	then if number_of_args_supplied = 0
	     then call ssu_$abort_line (sci_ptr, error_table_$noarg, ACTIVE_REQUEST_USAGE_MESSAGE);
	     else if number_of_args_supplied > 1
		then call ssu_$abort_line (sci_ptr, error_table_$too_many_args, ACTIVE_REQUEST_USAGE_MESSAGE);
	          else;
	else;
%skip(1);
          return;
%skip(1);
     end initialize;
%page;
lookup_argument_number: proc (

	lan_argument_number_parm) /* input: number of current argument */
	returns (fixed bin);      /* output: position in variables.var_info array of argument */
%skip(1);
dcl lan_argument_number_parm fixed bin parm;
dcl lan_loop fixed bin;
%skip(1);
	call ssu_$arg_ptr (sci_ptr, lan_argument_number_parm, arg_ptr, arg_length);
	if arg_length ^> 1
	then call ssu_$abort_line (sci_ptr, linus_error_$linus_var_not_defined);
	else if substr (arg, 1, 1) ^= "!"
	     then call ssu_$abort_line (sci_ptr, linus_error_$inv_linus_var, "^a", arg);
%skip(1);
	do lan_loop = 1 to variables.nvars;
	     if substr (arg, 2) = variables.var_info.name (lan_loop)
	     then return (lan_loop);
	end;
%skip(1);
	call ssu_$abort_line (sci_ptr, linus_error_$linus_var_not_defined, "^x^a", arg);
%skip(1);
     end lookup_argument_number;
%page;
print_value: proc (

	pv_variable_index_parm /* input: index of variable in variables.var_info array */
	        );
%skip(1);
dcl pv_based_char_string char (4096) based (pv_based_char_string_ptr);
dcl pv_based_char_string_ptr ptr;
dcl pv_bit_dtype bit (1) aligned;
dcl pv_bit_string bit (pv_bit_string_length) based (pv_bit_string_ptr);
dcl pv_bit_string_length fixed bin;
dcl pv_bit_string_ptr ptr;
dcl pv_char_dtype bit (1) aligned;
dcl pv_char_string char (4096) varying;
dcl pv_char_string_redefined_smaller char (150) varying based (addr (pv_char_string));
dcl pv_code fixed bin (35);
dcl pv_length_doesnt_matter fixed bin (21);
dcl pv_numeric_dtype bit (1) aligned;
dcl pv_variable_index_parm fixed bin parm;
%skip(1);
	arg_descriptor_ptr = addr (variables.var_info.desc (pv_variable_index_parm));
%skip(1);
	pv_bit_dtype = (arg_descriptor.type = bit_dtype | arg_descriptor.type = varying_bit_dtype);
	pv_char_dtype = (arg_descriptor.type = char_dtype | arg_descriptor.type = varying_char_dtype);
	pv_numeric_dtype = ^(pv_bit_dtype | pv_char_dtype);
%skip(1);
	if pv_char_dtype
	then do;
	     if arg_descriptor.type = char_dtype
	     then pv_based_char_string_ptr = variables.var_info.var_ptr (pv_variable_index_parm);
	     else pv_based_char_string_ptr = addrel (variables.var_info.var_ptr (pv_variable_index_parm), 1);
	     pv_char_string = rtrim (substr (pv_based_char_string, 1, arg_descriptor.size));
	end;
	else if pv_numeric_dtype
	     then do;
		call linus_convert_num_to_str (variables.var_info.var_ptr (pv_variable_index_parm),
		     arg_descriptor_ptr, pv_char_string_redefined_smaller, pv_code);
		if pv_code ^= 0
		then call ssu_$abort_line (sci_ptr, pv_code);
	     end;
	     else do;
		if arg_descriptor.type = varying_bit_dtype
		then pv_bit_string_ptr = addrel (variables.var_info.var_ptr (pv_variable_index_parm), 1);
		else pv_bit_string_ptr = variables.var_info.var_ptr (pv_variable_index_parm);
		pv_bit_string_length = arg_descriptor.size;
		call ioa_$rsnnl ("^b", pv_char_string, pv_length_doesnt_matter, pv_bit_string);
	     end;
%skip(1);
	if active_request_flag
	then return_value = pv_char_string;
	else call ioa_ ("!^a^x=^x^a", variables.var_info.name (pv_variable_index_parm), pv_char_string);
%skip(1);
	return;
%skip(1);
     end print_value;
%page;
dcl ACTIVE_REQUEST_USAGE_MESSAGE char (34) internal static options (constant) init ("Usage: [list_values VARIABLE_NAME]");
%skip(1);
dcl active_request_flag bit (1) aligned;
dcl addr builtin;
dcl addrel builtin;
dcl arg char (arg_length) based (arg_ptr);
dcl arg_length fixed bin (21);
dcl arg_ptr ptr;
%skip(1);
dcl error_table_$noarg fixed bin(35) ext static;
dcl error_table_$too_many_args fixed bin(35) ext static;
%skip(1);
dcl fixed builtin;
%skip(1);
dcl ioa_ entry() options(variable);
dcl ioa_$rsnnl entry() options(variable);
%skip(1);
dcl linus_convert_num_to_str entry (ptr, ptr, char(150) var, fixed bin(35));
dcl linus_error_$inv_linus_var fixed bin(35) ext static;
dcl linus_error_$linus_var_not_defined fixed bin(35) ext static;
dcl linus_error_$no_db fixed bin(35) ext static;
dcl linus_error_$no_linus_var fixed bin(35) ext static;
dcl loop fixed bin;
%skip(1);
dcl null builtin;
dcl number_of_args_supplied fixed bin;
%skip(1);
dcl rel builtin;
dcl return_value char (return_value_length) varying based (return_value_ptr);
dcl return_value_length fixed bin (21);
dcl return_value_ptr ptr;
dcl rtrim builtin;
%skip(1);
dcl sci_ptr ptr;
dcl ssu_$abort_line entry() options(variable);
dcl ssu_$arg_ptr entry (ptr, fixed bin, ptr, fixed bin(21));
dcl ssu_$return_arg entry (ptr, fixed bin, bit(1) aligned, ptr, fixed bin(21));
dcl substr builtin;
dcl sys_info$max_seg_size fixed bin(35) ext static;
%skip(1);
%page;
%include arg_descriptor;
%page;
%include linus_lcb;
%page;
%include linus_variables;
%page;
%include std_descriptor_types;
%skip(1);
     end linus_list_values;
