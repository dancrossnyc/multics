/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

linus_thread_fn_list:
     proc (lcb_ptr, calc_entry, input_file_name, function_name, code);

/* DESCRIPTION:

   Procedure  to  fill  in a linus_set_fn_info block for a builtin or declared
   set  function,  given  a pointer to the calc.  entry in the text portion of
   the object segment.
   
   

   HISTORY:

   76-06-01 J. A. Weeldreyer: Initially written.

   80-11-03  Rickie  E.   Brinegar:  changed  cent_ptr,  a  entry  pointer, to
   calc_entry,  a  link snapped entry.  The purpose was to allow path names to
   be  handled  and not use cv_ptr_, which does not set up appropriate linkage
   information.
   
*/

%include linus_lcb;
%page;
%include definition;
%page;
%include entry_sequence_info;
%page;
%include object_info;
%page;
%include linus_set_fn_info;

	dcl     (
	        b_ptr,				/* pointer to base of object */
	        d_ptr,				/* ptr to definition block */
	        e_ptr,				/* pointer to entry sequence */
	        pd_ptr,				/* pointer to parameter descriptor offsets */
	        s_ptr
	        )			 ptr;		/* pointer to seg. definition block */

	dcl     calc_entry		 entry variable;	/* Input: snapped calc entry in object */
	dcl     i			 fixed bin;	/* internal index */

	dcl     (
	        code,				/* Output: status code */
	        icode
	        )			 fixed bin (35);	/* internal status code */

	dcl     function_name	 char (32) var;
	dcl     (file_name, input_file_name) char (168) varying; /* where to look for the function */
	dcl     1 obj_info		 aligned like object_info; /* place for object information */
	dcl     bc		 fixed bin (24);	/* bit count of object seg */
	dcl     stype		 fixed bin (2);	/* type code of object seg */
	dcl     1 acc		 aligned based,	/* template for acc string */
		2 len		 fixed bin (8) unal,
		2 string		 char (0 refer (acc.len)) unal;
	dcl     bit36		 bit (36) based;	/* template for descriptor */

	dcl     (
	        linus_error_$cant_ref_fun,
	        linus_error_$incons_fun,
	        sys_info$max_seg_size
	        )			 ext fixed bin (35);

	dcl     cleanup		 condition;

	dcl     (addr, addrel, codeptr, fixed, null, ptr, rel, string) builtin;

	dcl     cv_entry_		 entry (char (*), ptr, fixed bin (35)) returns (entry);
	dcl     hcs_$status_mins
				 entry (ptr, fixed bin (2), fixed bin (24), fixed bin (35));
	dcl     object_info_$brief	 entry (ptr, fixed bin (24), ptr, fixed bin (35));

	linus_set_fn_info_ptr = null;			/* initiallize */

	on cleanup call tidy_up;

	file_name = input_file_name || "$";

	b_ptr = ptr (codeptr (calc_entry), 0);		/* point to base of object */
	call hcs_$status_mins (b_ptr, stype, bc, icode);	/* get bit count of object */
	if icode ^= 0 then
	     call error (linus_error_$cant_ref_fun);
	call object_info_$brief (b_ptr, bc, addr (obj_info), icode);
						/* get info on obj seg */
	if icode ^= 0 then
	     call error (linus_error_$cant_ref_fun);
	e_ptr = addrel (codeptr (calc_entry), -2);	/* point to entry sequence */
	if e_ptr -> entry_sequence.flags.has_descriptors then do;
						/* if have args */
		pd_ptr =
		     addrel (obj_info.textp, e_ptr -> entry_sequence.descr_relp_offset);
						/* point to parameter descriptors */
		initial_number_of_set_fn_info_args =
		     fixed (pd_ptr -> parm_desc_ptrs.n_args); /* no. input args */
	     end;
	else initial_number_of_set_fn_info_args = 0;
	alloc linus_set_fn_info in (lcb.static_area);	/* alloc. an info block */
	string (linus_set_fn_info.flags) = "0"b;	/* fill in the block */
	linus_set_fn_info.fwd_ptr = lcb.setfi_ptr;
	linus_set_fn_info.calc_entry = calc_entry;
	linus_set_fn_info.calc_entry_set = "1"b;

	d_ptr = addrel (obj_info.defp, e_ptr -> entry_sequence.def_relp);
						/* point to def. block */
	linus_set_fn_info.name = function_name;

	s_ptr = addrel (obj_info.defp, d_ptr -> definition.segname);
						/* point to def. block for seg. */

	linus_set_fn_info.assign_entry =
	     cv_entry_ (file_name || function_name || "_assign", null, icode);
						/* set up assignment entry */
	if icode ^= 0 then
	     call error (icode);
	linus_set_fn_info.assign_entry_set = "1"b;

	if lcb.db_index ^= 0 & ^lcb.new_version then
	     linus_set_fn_info.init_entry_set = "0"b;
	else do;
		linus_set_fn_info.init_entry =
		     cv_entry_ (file_name || function_name || "_init", null, icode);
						/* set up initial entry */
		if icode ^= 0 then
		     call error (icode);
		linus_set_fn_info.init_entry_set = "1"b;

	     end;

	if e_ptr -> entry_sequence.flags.has_descriptors then do;
						/* if fixed input */
		linus_set_fn_info.info_entry_set = "0"b;/* no info entry in this case */
		do i = 1 to linus_set_fn_info.nargs;	/* fill in input descriptors */
		     linus_set_fn_info.arg_desc (i) =
			addrel (obj_info.textp,
			pd_ptr -> parm_desc_ptrs.descriptor_relp (i)) -> bit36;
		end;
		e_ptr = addrel (codeptr (linus_set_fn_info.assign_entry), -2);
						/* entry seq. for assign ent. */
		if e_ptr -> entry_sequence.flags.has_descriptors then
		     /* get ptr to rslt descr. */
		     pd_ptr =
			addrel (obj_info.textp,
			e_ptr -> entry_sequence.descr_relp_offset);
		else call error (linus_error_$incons_fun);
		linus_set_fn_info.rslt_desc =
		     addrel (obj_info.textp,
		     pd_ptr -> parm_desc_ptrs.descriptor_relp (1)) -> bit36;
	     end;					/* if fixed args */

	else do;					/* no descriptors, variable args */
		linus_set_fn_info.rslt_desc = "0"b;
		linus_set_fn_info.nargs = 0;
		linus_set_fn_info.info_entry =
		     cv_entry_ (file_name || function_name || "_info", null, icode);
		if icode ^= 0 then
		     call error (linus_error_$cant_ref_fun);
		linus_set_fn_info.info_entry_set = "1"b;
	     end;					/* if variable args */

	lcb.setfi_ptr = linus_set_fn_info_ptr;		/* put block at head of list */
	code = 0;
exit:
	return;

error:
     proc (cd);

/* error procedure */

	dcl     cd		 fixed bin (35);

	code = cd;
	call tidy_up;
	go to exit;

     end error;

tidy_up:
     proc;

/* Procedure to clean up our mess */

	if setfi_ptr ^= null & setfi_ptr ^= lcb.setfi_ptr then
	     free linus_set_fn_info;

     end tidy_up;

     end linus_thread_fn_list;
