/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
linus_self_identify:
     proc (sci_ptr, lcb_ptr);

/* This procedure is called in place of the standard ssu_$self_identify 
   procedure.  It prints the subsystem name and version number along with 
   the pathname and opening mode of the currently open database if there 
   is one. */

/* History: 
   82-11-02 Dave Schimke Written from ssu_misc_requests_$self_identify
*/

%include linus_lcb;

	dcl     abbrev_switch	 bit (1) aligned;
	dcl     addr		 builtin;
	dcl     code		 fixed bin (35);
	dcl     dsl_$get_pn		 entry (fixed bin (35), char (168) var, char (20), fixed bin (35));
	dcl     fixed		 builtin;
	dcl     ioa_		 entry () options (variable);
	dcl     level		 fixed bin;
	dcl     n_arguments		 fixed bin;
	dcl     null		 builtin;
	dcl     opening_mode	 char (20);
	dcl     pathname		 char (168) var;
	dcl     rel		 builtin;
	dcl     sci_ptr		 ptr;
	dcl     ssu_$abort_line	 entry () options (variable);
	dcl     ssu_$arg_count	 entry (ptr, fixed bin);
	dcl     ssu_$get_abbrev_info	 entry (ptr, ptr, ptr, bit (1) aligned);
	dcl     ssu_$get_invocation_count entry (ptr, fixed bin, fixed bin);
	dcl     ssu_$get_subsystem_name entry (ptr) returns (char (32));
	dcl     ssu_$get_subsystem_version entry (ptr) returns (char (32));
	dcl     sys_info$max_seg_size	 fixed bin (35) ext static;

	call ssu_$arg_count (sci_ptr, n_arguments);
	if n_arguments ^= 0
	then call ssu_$abort_line (sci_ptr, 0, "No arguments may be given.");

	call ssu_$get_abbrev_info (sci_ptr, (null ()), (null ()), abbrev_switch);
	call ssu_$get_invocation_count (sci_ptr, level, (0));

	if lcb.db_index ^= 0
	then do;
		call dsl_$get_pn (lcb.db_index, pathname, opening_mode, code);
		if code ^= 0
		then call ssu_$abort_line (sci_ptr, code);
	     end;

	call ioa_ ("^a ^a^[ (abbrev)^]^[ (level ^d)^]", ssu_$get_subsystem_name (sci_ptr),
	     ssu_$get_subsystem_version (sci_ptr), abbrev_switch, (level > 1), level);
	call ioa_ ("^[Database: ^a^;No database open.^]^[^/open for ^a.^;]",
	     (lcb.db_index ^= 0), pathname, (lcb.db_index ^= 0), opening_mode);
	return;
     end linus_self_identify;
