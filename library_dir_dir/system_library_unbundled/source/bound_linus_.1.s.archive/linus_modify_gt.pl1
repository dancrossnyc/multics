/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

linus_modify_gt:
     proc (lcb_ptr, start_ptr, string_len, start_pos, td_ptr, si_ptr, code);

/* DESCRIPTION: 

   This procedure is the lexical analizer for the MODIFY request expr parser.
   A key, pointer and length are returned for a CONSTANT.
   A  key and index into the linus variable structure are returned for a linus
   variable.
   A  key and index into the select info structure are returned for a database
   item.



   HISTORY:

   77-08-01 J. C. C. Jagernauth: Initially written.

   80-03-14  Rickie  E.   Brinegar:  Modified  to  use  a work area defined on
   lcb.linus_area_ptr instead of getting system free area.

*/

%include linus_lcb;
%page;
%include linus_select_info;
%page;
%include linus_token_data;
%page;
%include linus_variables;

	dcl     start_ptr		 ptr;

	dcl     (
	        code,				/* Output:  status code */
	        start_pos,				/* Input/Output:  position at which to start scan */
	        i,				/* internal indexes */
	        j,
	        cur_pos
	        )			 fixed bin (35);	/* current position in string */

	dcl     string_len		 fixed bin;

	dcl     found		 bit (1);

	dcl     ARITH_CHARS		 char (14) int static options (constant)
				 init (".eib0123456789");
	dcl     DELIMS		 char (3) int static options (constant) init ("
	 ");
	dcl     CONS_PREC		 char (5) int static options (constant) init ("(+-*/");
	dcl     ARITH_START		 char (11) int static options (constant) init (".0123456789");
	dcl     ID_CHARS		 char (64) int static options (constant)
				 init (
				 "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-");
	dcl     tmp_char		 char (string_len) based (start_ptr);
	dcl     tmp_char_arr	 (string_len) char (1) based (start_ptr);

	dcl     (
	        linus_error_$invalid_token,
	        linus_error_$long_id,
	        linus_error_$linus_var_not_defined,
	        linus_error_$long_lv_name,
	        linus_error_$inv_string_const,
	        mrds_data_$max_id_len,
	        sys_info$max_seg_size
	        )			 fixed bin (35) ext;

	dcl     (rel, fixed, addr, verify, index, substr, null, collate)
				 builtin;

	token_data.must_free = "0"b;
	if start_pos > string_len then
	     token_data.key = NULL;
	else do;					/* if have something left */
		i = verify (substr (tmp_char, start_pos), DELIMS); /* skip white spaces */
		if i > 0 then do;
			cur_pos = start_pos + i - 1;

			go to char_proc (index (collate (), tmp_char_arr (cur_pos)));
						/* see what we have */

char_proc (1):					/* special characters */
char_proc (2):
char_proc (3):
char_proc (4):
char_proc (5):
char_proc (6):
char_proc (7):
char_proc (8):
char_proc (9):
char_proc (10):
char_proc (11):
char_proc (12):
char_proc (13):
char_proc (14):
char_proc (15):
char_proc (16):
char_proc (17):
char_proc (18):
char_proc (19):
char_proc (20):
char_proc (21):
char_proc (22):
char_proc (23):
char_proc (24):
char_proc (25):
char_proc (26):
char_proc (27):
char_proc (28):
char_proc (29):
char_proc (30):
char_proc (31):
char_proc (32):
char_proc (33):					/* space */
char_proc (36):					/* # */
char_proc (37):					/* $ */
char_proc (38):					/* % */
char_proc (39):					/* & */
char_proc (40):					/* ' */
char_proc (45):					/* , */
char_proc (59):					/* : */
char_proc (60):					/* ; */
char_proc (61):					/* < */
char_proc (62):					/* = */
char_proc (63):					/* > */
char_proc (64):					/* ? */
char_proc (65):					/* @ */
char_proc (92):					/* [ */
char_proc (93):					/* \ */
char_proc (94):					/* ] */
char_proc (95):					/* ^ */
char_proc (96):					/* _ */
char_proc (97):					/* ` */
char_proc (124):					/* { */
char_proc (125):					/* | */
char_proc (126):					/* } */
char_proc (127):					/* ~ */
char_proc (128):					/* PAD */
			call error (linus_error_$invalid_token); /* none of these chars. can start a token */

char_proc (34):					/* ! */
			token_data.key = LINUS_VAR;	/* this is a linus variable */
			cur_pos = cur_pos + 1;	/* first char past ! */
			i = verify (substr (tmp_char, cur_pos), ID_CHARS);
						/* find end of token */
			token_data.length = i - 1;
			if lcb.lv_ptr = null then /* if no variables defined */
			     call error (linus_error_$linus_var_not_defined);
			lv_ptr = lcb.lv_ptr;
			if variables.nvars <= 0 then /* if no variables */
			     call error (linus_error_$linus_var_not_defined);
			do j = 1 to variables.nvars
			     while (variables.var_info.name (j)
			     ^= substr (tmp_char, cur_pos, token_data.length));
						/* look for var. */
			end;
			if j > variables.nvars then do; /* if didn't find it */
				i = index (substr (tmp_char, cur_pos, token_data.length), "-");
						/* look for imbedded hyphen */
				if i <= 0 then
				     call error (linus_error_$linus_var_not_defined);
						/* not there */
				token_data.length = i - 1; /* found one, check first part */
				do j = 1 to variables.nvars
				     while (variables.var_info.name (j)
				     ^= substr (tmp_char, cur_pos, token_data.length));
				end;
				if j > variables.nvars then
				     call error (linus_error_$linus_var_not_defined);
			     end;			/* if didn't find it first time */
			if token_data.length > mrds_data_$max_id_len then
			     /* if too long */
			     call error (linus_error_$long_lv_name);
			start_pos = cur_pos + token_data.length; /* adjust scan start pos. */
			token_data.length = j;	/* pass index to linus variable structure */
			go to exit;		/* end ! */

char_proc (35):					/* " */
			token_data.key = CONST;	/* this is a string constant */
			token_data.t_ptr = addr (tmp_char_arr (cur_pos));
			found = "0"b;		/* init for end search */
			cur_pos = cur_pos + 1;
			token_data.length = 1;
			i = index (substr (tmp_char, cur_pos), """"); /* look for next " */
			do while (i > 0 & ^found);	/* search for single quote */
			     token_data.length = token_data.length + i; /* increment length */
			     cur_pos = cur_pos + i;	/* first char beyond */
			     if cur_pos > string_len then
				found = "1"b;	/* single quote at end of string */
			     else if tmp_char_arr (cur_pos) = """" then do;
				     cur_pos = cur_pos + 1;
				     token_data.length = token_data.length + 1;
				     if cur_pos <= string_len then
					i = index (substr (tmp_char, cur_pos), """");
				     else i = 0;
				end;		/* if double " */
			     else found = "1"b;	/* if single " */
			end;			/* single " search loop */
			if ^found then
			     call error (linus_error_$inv_string_const);
			if tmp_char_arr (cur_pos) = "b" then do; /* if bit string */
				cur_pos = cur_pos + 1;
				token_data.length = token_data.length + 1;
			     end;
			start_pos = cur_pos;
			go to exit;		/* end " */


char_proc (41):					/* ( */
			token_data.key = LP;	/* assume LP unless proven other */
			i = verify (substr (tmp_char, cur_pos + 1), "0123456789");
						/* is possible string const */
			if tmp_char_arr (cur_pos + i) = ")" & i > 1 then do;
						/* good chance of string const */
				j = verify (substr (tmp_char, cur_pos + i + 1), DELIMS);
						/* skip white space */
				if tmp_char_arr (cur_pos + i + j) = """" then do;
						/* have string const */
					token_data.key = CONST;
					token_data.length = i + j + 1; /* init for quote search loop */
					token_data.t_ptr = addr (tmp_char_arr (cur_pos));
					cur_pos = cur_pos + i + j + 1;
					found = "0"b;
					i = index (substr (tmp_char, cur_pos), """");
						/* find next quote */
					do while (i > 0 & ^found); /* until we find a single quote */
					     token_data.length = token_data.length + i;
						/* incr. length */
					     cur_pos = cur_pos + i; /* first char beyond */
					     if cur_pos > string_len then
						call error (linus_error_$inv_string_const);
					     if tmp_char_arr (cur_pos) = """" then do;
						/* if double quote */
						     cur_pos = cur_pos + 1;
						     token_data.length = token_data.length + 1;
						     if cur_pos <= string_len then
							i = index (substr (tmp_char, cur_pos), """");
						     else i = 0; /* terminate if passed end of string */
						end; /* if double quote */
					     else do; /* if single quote */
						     found = "1"b;
						     cur_pos = cur_pos + i;
						     token_data.length = token_data.length + i;
						end; /* if single quote */
					end;	/* single quote search loop */
					if ^found then
					     call error (linus_error_$inv_string_const);
					if tmp_char_arr (cur_pos) = "b" then do; /* if bit string */
						cur_pos = cur_pos + 1;
						token_data.length = token_data.length + 1;
					     end;
					start_pos = cur_pos;
				     end;		/* if string const */
			     end;			/* if good chance */
			if token_data.key = LP then
			     call set_token (LP, 1);	/* if wasn't const */
			go to exit;		/* end ( */

char_proc (42):					/* ) */
			call set_token (RP, 1);
			go to exit;

char_proc (43):					/* * */
			call set_token (STAR, 1);
			go to exit;

char_proc (44):					/* + */
			if is_const () = "1"b then
			     call arith_const;	/* is arith const = "1"b */
			else call set_token (PLUS, 1);/* is operator */
			go to exit;

char_proc (46):					/* - */
			if is_const () = "1"b then
			     call arith_const;
			else call set_token (MINUS, 1);
			go to exit;

char_proc (47):					/* . */
char_proc (49):					/* 0 */
char_proc (50):					/* 1 */
char_proc (51):					/* 2 */
char_proc (52):					/* 3 */
char_proc (53):					/* 4 */
char_proc (54):					/* 5 */
char_proc (55):					/* 6 */
char_proc (56):					/* 7 */
char_proc (57):					/* 8 */
char_proc (58):					/* 9 */
						/* these characters begin an arith. const. */
			call arith_const;
			go to exit;

char_proc (48):					/* / */
			call set_token (DIV, 1);
			go to exit;


char_proc (66):					/* A */
char_proc (67):					/* B */
char_proc (68):					/* C */
char_proc (69):					/* D */
char_proc (70):					/* E */
char_proc (71):					/* F */
char_proc (72):					/* G */
char_proc (73):					/* H */
char_proc (74):					/* I */
char_proc (75):					/* J */
char_proc (76):					/* K */
char_proc (77):					/* L */
char_proc (78):					/* M */
char_proc (79):					/* N */
char_proc (80):					/* O */
char_proc (81):					/* P */
char_proc (82):					/* Q */
char_proc (83):					/* R */
char_proc (84):					/* S */
char_proc (85):					/* T */
char_proc (86):					/* U */
char_proc (87):					/* V */
char_proc (88):					/* W */
char_proc (89):					/* X */
char_proc (90):					/* Y */
char_proc (91):					/* Z */
char_proc (98):					/* a */
char_proc (99):					/* b */
char_proc (100):					/* c */
char_proc (101):					/* d */
char_proc (102):					/* e */
char_proc (103):					/* f */
char_proc (104):					/* g */
char_proc (105):					/* h */
char_proc (106):					/* i */
char_proc (107):					/* j */
char_proc (108):					/* k */
char_proc (109):					/* l */
char_proc (110):					/* m */
char_proc (111):					/* n */
char_proc (112):					/* o */
char_proc (113):					/* p */
char_proc (114):					/* q */
char_proc (115):					/* r */
char_proc (116):					/* s */
char_proc (117):					/* t */
char_proc (118):					/* u */
char_proc (119):					/* v */
char_proc (120):					/* w */
char_proc (121):					/* x */
char_proc (122):					/* y */
char_proc (123):					/* z */
			call ident_proc;		/* determine identifier type, and set up token data */
			go to exit;


exit:
		     end;				/* token section */

		else do;				/* ran out of tokens */
			token_data.key = NULL;
			start_pos = string_len + 1;
		     end;
	     end;					/* if something to do */

	code = 0;
real_exit:
	return;

set_token:
     proc (key, length);

/* Procedure to set up token_data given a key value and token length */

	dcl     (key, length)	 fixed bin;

	token_data.key = key;
	token_data.length = length;
	token_data.t_ptr = addr (tmp_char_arr (cur_pos));
	start_pos = cur_pos + length;

     end set_token;

is_const:
     proc returns (bit (1));

/* Procedure to determine if token at cur_pos is an arithmetic constant or
   is n operator. */

	dcl     i			 fixed bin;
	dcl     flag		 bit (1);

	if index (ARITH_START, tmp_char_arr (cur_pos + 1)) ^= 0 then do;
						/* possible const. */
		do i = cur_pos - 1 to 1 by -1
		     while (index (DELIMS, tmp_char_arr (i)) ^= 0);
		end;				/* search for end of prev token */
		if i < 1 then
		     flag = "1"b;			/* first token, must be const */
		else if index (CONS_PREC, tmp_char_arr (i)) ^= 0 then
		     flag = "1"b;			/* if predecessor forces constant */
		else flag = "0"b;			/* is operator */
	     end;					/* possible constant */
	else flag = "0"b;				/* if no chance of constant */

	return (flag);

     end is_const;

arith_const:
     proc;

/* Procedure to isolate an arithmetic constant, and set up the resultind token
   data */

	dcl     (i, j)		 fixed bin;

	token_data.key = CONST;
	token_data.t_ptr = addr (tmp_char_arr (cur_pos));
	j = 0;					/* init */
	i = verify (substr (tmp_char, cur_pos + 1), ARITH_CHARS);
	if i <= 0 then
	     i = string_len - cur_pos + 1;
	else do;					/* see if found real end */
		if tmp_char_arr (cur_pos + i) = "+" | tmp_char_arr (cur_pos + i) = "-"
		then /* check for exponent */
		     if tmp_char_arr (cur_pos + i - 1) ^= "e" then
			;			/* not exp */
		     else do;			/* is exp, scan further */
			     j = verify (substr (tmp_char, cur_pos + i + 1), ARITH_CHARS);
			     if j <= 0 then
				i = string_len - cur_pos + 1;
			     else i = i + j;
			end;			/* if exponent */
	     end;					/* checking for real end */
	token_data.length = i;
	start_pos = cur_pos + i;

     end arith_const;

ident_proc:
     proc;

/* Procedure to determine identifier type.  */

	dcl     (i, j, k, tmp_len)	 fixed bin;
	dcl     f_choice		 char (i) based (addr (tmp_char_arr (cur_pos)));
	dcl     s_choice		 char (j) based (addr (tmp_char_arr (cur_pos)));

	j = 0;					/* init */
	i = verify (substr (tmp_char, cur_pos), ID_CHARS);/* find end of id. */
	if i <= 0 then
	     i = string_len - cur_pos + 1;
	else i = i - 1;				/* i is length */
	if i > mrds_data_$max_id_len then do;		/* too long, may have hidden - */
		j = index (substr (tmp_char, cur_pos, i), "-");
		if j <= 0 then
		     call error (linus_error_$long_id); /* is bad */
		if j > mrds_data_$max_id_len then
		     call error (linus_error_$long_id); /* if first part too long */
		else do;				/* first part ok */
			i = j - 1;
			j = 0;
		     end;
	     end;					/* if orig. id. too long */
	else j = index (substr (tmp_char, cur_pos, i), "-"); /* see if there is second choice */
	if j > 0 then do;				/* yes, set true length */
		j = j - 1;
		tmp_len = j + 1;			/* remember -- you may have to back up start_pos */
		call set_token (COL_SPEC, j);
	     end;
	else do;
		call set_token (COL_SPEC, i);
		tmp_len = i + 1;			/* remember -- you may have to back up start_pos */
	     end;

	do k = 1 to select_info.n_user_items
	     while (select_info.user_item.name (k) ^= f_choice);
	end;
	if k > select_info.n_user_items then do;
		do k = 1 to select_info.n_user_items
		     while (select_info.user_item.name (k) ^= s_choice);
		end;
	     end;

	if k > select_info.n_user_items then do;
		start_pos = start_pos - tmp_len;
		if tmp_len = i + 1			/* length of first choice */
		then do;
			token_data.key = NULL;
			start_pos = string_len + 1;
		     end;
	     end;

	token_data.length = k;			/* return index to mrds item */

     end ident_proc;

error:
     proc (cd);

/* Error procedure */

	dcl     cd		 fixed bin (35);

	code = cd;
	go to real_exit;

     end error;


     end linus_modify_gt;
