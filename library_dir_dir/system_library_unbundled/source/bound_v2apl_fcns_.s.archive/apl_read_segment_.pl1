/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* APL External Function to read a segment as a character string. */
/* This segment must have the bitcount correctly set. */
/* Written 790215 by PG (from apl_pickup_float_bin_2_). */

apl_read_segment_:
	procedure (operators_argument);

/* automatic */

declare	bitcount fixed bin (24),	/* bitcount of segment named by right argument */
	code fixed bin (35),	/* Multics status code */
	dname char (168),		/* directory name for segment */
	ename char (32),		/* entry name of segment */
	n_words fixed bin (19),	/* number of words to allocate on value stack */
	result ptr,		/* pointer to result data array */
	result_vb ptr,		/* pointer to result value bead */
	right ptr,		/* pointer to right data array */
	right_vb ptr,		/* pointer to right value bead */
	seg_ptr ptr;		/* ptr to segment named by right argument */

/* based */

declare	right_arg_string char (data_elements) based (right);

/* builtins */

declare	(addrel, divide, null, size, string) builtin;

/* entries */

declare	expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35)),
	hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin, ptr, fixed bin (35)),
	hcs_$terminate_noname entry (ptr, fixed bin (35));

/* include files */

%include apl_external_function;

/* program */

	/* Usage in APL:
		)MFN READ_SEGMENT APL_READ_SEGMENT_
		RESULT -< READ_SEGMENT 'PATH'		*/

	right_vb = operators_argument.operands (2).value;	/* Get ptr to right argument */
	if ^right_vb -> value_bead.value		/* Make sure argument is a value bead */
	then go to domain_error_right;

	if ^right_vb -> value_bead.character_value	/* Make sure argument is character */
	then go to domain_error_right;

	right = right_vb -> value_bead.data_pointer;	/* Point to data array */
	data_elements = right_vb -> value_bead.total_data_elements;

	/* Pop right arg off value stack, if necessary. */

	if operators_argument.operands (2).on_stack
	then ws_info.value_stack_ptr = right_vb;

	call expand_pathname_ (right_arg_string, dname, ename, code);
	if code ^= 0
	then go to set_code;

	call hcs_$initiate_count (dname, ename, "", bitcount, 1, seg_ptr, code);
	if seg_ptr = null
	then go to set_code;

	/* put result on value stack */
	/* Calculate size of result bead. Note that result data array */
	/* must be double-word aligned. */

	number_of_dimensions = 1;			/* We will return a vector */
	data_elements = divide (bitcount + 8, 9, 24, 0);	/* Length of vector is number of bytes in segment. */
	n_words = size (value_bead) + size (character_string_overlay);

	result_vb = apl_push_stack_ (n_words);

	/* Set pointer to data array. */

	result = addrel (result_vb, size (value_bead));

	/* Initialize new value bead. */

	string (result_vb -> value_bead.bead_type) = value_type;
	result_vb -> value_bead.total_data_elements = data_elements;
	result_vb -> value_bead.rhorho = number_of_dimensions;
	result_vb -> value_bead.rho (1) = data_elements;
	result_vb -> value_bead.data_pointer = result;

	/* Give result bead the correct type */

	string (result_vb -> value_bead.type) = character_value_type;

	/* The result value bead is all set up.  Perform the operation */

	result -> character_string_overlay = seg_ptr -> character_string_overlay;

	/* Terminate the segment */

	call hcs_$terminate_noname (seg_ptr, code);

	operators_argument.result = result_vb;
	return;

domain_error_right:
	operators_argument.where_error = operators_argument.where_error - 1;	/* Mark right operand */
	operators_argument.error_code = apl_error_table_$domain;
	return;

set_code:
	operators_argument.error_code = code;
	return;

/* Internal procedures */

%include apl_push_stack_fcn;
     end;
