/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* APL External Function to read a segment full of numbers that are in
   character form suitable for list-directed input. The numbers are converted
   to float bin (63) and returned as a vector.

   Written 790318 by PG (from apl_pickup_float_bin_2_).
   Modified 790622 by PG to fix 406 (did not check for reading > 130560 elements)
	Future enhancements: (1) when the lineno builtin is changed
	to work for stream input files, have the error messages from
	this program include the line number of the input file, (2) get
	a maximum-sized vector from APL at the beginning (get a whole
	value stack, in other words), rather than using a temp seg.
	This will use 255K less in the pdir, in the limiting case.
*/

apl_get_list_nums_:
     procedure (operators_argument);

/* automatic */

declare	code		fixed bin (35),		/* Multics status code */
	dname		char (168),		/* directory name for segment */
	ename		char (32),		/* entry name of segment */
	file_title	char (200) varying,		/* title of input file */
	n_words		fixed bin (19),		/* number of words to allocate on value stack */
	n_values		fixed bin,		/* number of values read */
	result		ptr,			/* pointer to result data array */
	result_vb		ptr,			/* pointer to result value bead */
	right		ptr,			/* pointer to right data array */
	right_vb		ptr,			/* pointer to right value bead */
	seg_ptr		ptr,			/* ptr to temp segment */
	temp_numeric_datum	float;			/* temporary apl value */

/* based */

declare	right_arg_string	char (data_elements) based (right);

/* builtins */

declare	(addrel, divide, null, onsource, rtrim, size, string, substr, rel)
			builtin;

/* conditins */

declare	(cleanup, conversion, endfile, transmit, undefinedfile)
			condition;

/* entries */

declare	expand_pathname_	entry (char (*), char (*), char (*), fixed bin (35)),
	get_temp_segment_	entry (char (*), ptr, fixed bin (35)),
	ioa_		entry options (variable),
	pl1_io_$error_code	entry (file) returns (fixed bin (35)),
	release_temp_segment_
			entry (char (*), ptr, fixed bin (35));

/* files */

declare	apl_get_list_nums	file;

/* include files */

%include apl_external_function;

/* program */

/* Usage in APL:
		)MFN GET_LIST_NUMS APL_GET_LIST_NUMS_
		R -< GET_LIST_NUMS 'PATH'		*/

	right_vb = operators_argument.operands (2).value; /* Get ptr to right argument */
	if ^right_vb -> value_bead.value		/* Make sure argument is a value bead */
	then go to domain_error_right;

	if ^right_vb -> value_bead.character_value	/* Make sure argument is character */
	then go to domain_error_right;

	right = right_vb -> value_bead.data_pointer;	/* Point to data array */
	data_elements = right_vb -> value_bead.total_data_elements;

/* Pop right arg off value stack, if necessary. */

	if operators_argument.operands (2).on_stack
	then ws_info.value_stack_ptr = right_vb;

	call expand_pathname_ (right_arg_string, dname, ename, code);
	if code ^= 0
	then go to set_code;

/* Get a temp segment to hold the numbers in until we know how many there are. */

	seg_ptr = null;
	on cleanup
	     call clean_up;

	call get_temp_segment_ ("apl_get_list_nums_", seg_ptr, code);
	if code ^= 0
	then go to set_code;

/* Open the file and setup handlers for various errors that can happen. */

	file_title = "vfile_ " || rtrim (dname) || ">" || rtrim (ename) || " -extend";

	on undefinedfile (apl_get_list_nums)
	     go to cant_open;
	open file (apl_get_list_nums) title (file_title) stream input;

	on endfile (apl_get_list_nums)
	     go to end_of_file;
	on transmit (apl_get_list_nums)
	     go to transmit_trouble;
	on conversion
	     begin;
		call ioa_ ("apl_get_list_nums_: value ^d (^a) non-numeric. 0 assumed.", n_values, onsource ());
		onsource = "0";
	     end;

/* Everything is set up. Read data until eof. */

	get file (apl_get_list_nums) list ((seg_ptr -> numeric_datum (n_values - 1) do n_values = 1 to 130560 by 1));

/* If we get here, we have read as many values as will fit in one segment.
   It is just possible that this coincides with the end-of-file on
   the input file. If so, there is no error. */

	get file (apl_get_list_nums) list (temp_numeric_datum);

/* No end-of-file. Tell user it is just too big. */

	code = apl_error_table_$result_size;
	go to set_code;

/* put result on value stack */
/* Calculate size of result bead. Note that result data array */
/* must be double-word aligned. */

end_of_file:
	number_of_dimensions = 1;			/* We will return a vector */
	data_elements = n_values - 1;
	n_words = size (value_bead) + size (numeric_datum) + 1;

	result_vb = apl_push_stack_ (n_words);

/* Set pointer to data array.  Double-word align it. */

	result = addrel (result_vb, size (value_bead));

	if substr (rel (result), 18, 1)
	then result = addrel (result, 1);

/* Initialize new value bead. */

	result_vb -> value_bead.total_data_elements = data_elements;
	result_vb -> value_bead.rhorho = number_of_dimensions;
	result_vb -> value_bead.rho (1) = data_elements;
	result_vb -> value_bead.data_pointer = result;

/* Give result bead the correct type */

	string (result_vb -> value_bead.type) = numeric_value_type;

/* The result value bead is all set up.  Copy the data into the apl workspace */

	result -> numeric_datum (*) = seg_ptr -> numeric_datum (*);

	call clean_up;

	operators_argument.result = result_vb;
	return;

domain_error_right:
	operators_argument.where_error = operators_argument.where_error - 1;
						/* Mark right operand */
	operators_argument.error_code = apl_error_table_$domain;
	return;

set_code:
	operators_argument.error_code = code;
	return;

cant_open:
transmit_trouble:
	operators_argument.error_code = pl1_io_$error_code (apl_get_list_nums);
	call clean_up;
	return;

/* Internal procedures */

clean_up:
     procedure;

	close file (apl_get_list_nums);
	call release_temp_segment_ ("apl_get_list_nums_", seg_ptr, code);

     end clean_up;

%include apl_push_stack_fcn;
     end;
