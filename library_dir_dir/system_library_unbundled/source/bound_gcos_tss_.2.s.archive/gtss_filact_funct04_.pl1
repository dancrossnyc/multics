/* *************************************************************
   *                                                           *
   * Copyright, (C) Honeywell Information Systems Inc., 1984   *
   *                                                           *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *                                                           *
   ************************************************************* */

gtss_filact_funct04_: proc (mcp_val, high_val, gseg_val, arg_ptr_val, buffer_ptr_val, code);

/* *	Derail FILACT function 04 (AF - Access File).

   All parameters are input parameters except code.

   code retuurned 0 => Successful.
   code returned 4 => GCOS err4 (see gtss_pnterr structure).
   code returned other => multics error code.

   Authors: Robert J. Grimes	Created
   -	  Albert N. Kepner	  1978
   -	  Robert M. May
   -	  David B. Ward
   Change:  Dave Ward	02/24/79 db_ debug switch.
   Change:  Dave Ward	08/14/79 does not exist return.
   Change:  Dave Ward	08/31/79 ret status from ascii_file_name.
   Change:  Paul Benjamin     09/26/79 "Permissions denied" in lower half of 1st status word
   Change:  Bob Alvarado	10/25/79 added check to aft, files cannot be accessed if already busy.
   Change:  Mel Wilson	11/20/79  Reworked optimized hash function eliminating overflow with BCD name
   Change:  Paul Benjamin	11/27/79 to call gtss_expand_pathname_$verify_umc
   Change:  Bob Alvarado	12/14/79 Re-coded the check to the aft, files
   cannot be accessed if already busy.
   Change:  Mel Wilson	01/18/80 Changed busy-in-aft check to use modified mcfc
   Change:  Bilal Qureshi     80 02 12  if any file is grown, it is reflected in aft.
   Change:  Sandy Bartlet	80 03 14  move verify_umc to correct place
   Change:  Bilal Qureshi     80 02 12  to pass file size in blocks instead of links.
   Change:  Bilal Qureshi	80 03 24  call gtss_expand_pathname_$verify instead of gtss_expand_pathname_
   Change:  Dave Perks	80 04 18	handle temp files properly.
   Change:  Sandy Bartlet	80 05 22  handle pd properly.
   Change:  Sandy Bartlet	80 06 10	size = 0 if current_size > 16383 llinks.
   Change:  Bilal Qureshi	80 08 28  while setting runtime attributes structure for ios also set
   gtss_file_attributes.descriptor.fill to "0"b.
   Change:  R. Barstad        82-06-10  removed stringsize condition by inserting substr function in arglist of call put_in_aft
   Change:  R. Barstad	84-02-17  Fixed resave of file in sub-cat giving busy message
                                        fixed condition where file removed from aft but not closed
   * */
%page;
dcl  mcp_val ptr parm;
dcl  high_val bit (18)parm;
dcl  gseg_val ptr parm;
dcl  arg_ptr_val ptr parm;
dcl  buffer_ptr_val ptr parm;
dcl  code fixed bin (35)parm;
	mcp = mcp_val;
	high_b = high_val;
	high_i = fixed (high_b, 18);
	gseg = gseg_val;
	arg_ptr = arg_ptr_val;
	buffer_ptr = buffer_ptr_val;

	status, code = 0;				/* Successful. */
	mc.regs.a = "0"b;				/* Clear the A register. */

/* *	Obtain access file arglist. */
	if					/* (AF_args.L_arglist < low_b) | */
	((fixed (AF_args.L_arglist, 18) +2) > high_i) then do;
return_err4:   ;
	     code = 4;
	     return;
	end;
	arglist_ptr = addrel (gseg, AF_args.L_arglist);

/* *	Obtain return status.	* */
	call validate_status (AF_arglist.L_status_return, status_ptr);

/* *	Obtain permissions.		* */
	if					/* (AF_arglist.L_permissions < low_b) | */
	(AF_arglist.L_permissions > high_b) then goto return_err4;
	permissions_ptr = addrel (gseg, AF_arglist.L_permissions);

	access_mode = permissions.read ||
	     permissions.write ||
	     permissions.append ||
	     permissions.execute ||
	     permissions.test ||
	     permissions.query;
	if access_mode = "0"b then
	     access_mode = "000001"b;			/* zero req. permissions defaults to query */

	if AF_args.L_altname ^= "0"b then do;		/* Altname is available. */
	     if AF_args.L_altname > high_b then
		goto return_err4;			/* 2 word altname not within memory. */
	     altnp = addrel (gseg, AF_args.L_altname);	/* Set pointer to altname. */
	     if altnp -> bit36 = "0"b then goto no_altname;
						/* There is an altname. */
	     altnl = search (altn8, " ")-1;
	     if altnl = -1 then altnl = length (altn8);


	     file_name_in_ascii = "0"b;		/* Name is in BCD. */
	end;
	else
no_altname:
	file_name_in_ascii = "1"b;

	if get_ascii_file_name (
	file_name_in_ascii
	, AF_arglist.L_cat_filedescr
	, addr (ascii_cat_file)
	, status_word.status
	) then do;
	     if status_word.status = "4034"b3 then
		status_word.status = "4000"b3;
	     else goto could_not_open;
	end;

	call gtss_expand_pathname_ (
	     addr (ascii_cat_file)
	     , gtss_file_values.dname
	     , gtss_file_values.ename
	     , code
	     );
	if code ^= 0 then return;


	if file_name_in_ascii then			/* => There was not an altname. */
	     call put_in_aft
                   ((substr((ascii_cat_file.name (ascii_cat_file.nn)),1,8)));
	else call put_in_aft ((altn));
	if substr (status_word.status, 2, 11) ^= "0"b then
	     goto could_not_open;

	gtss_file_values.version = 1;
	gtss_file_values.change_name = "0"b;
	gtss_file_values.new_ename = " ";

	call gtss_attributes_mgr_$get (addr (gtss_file_values), code);
	if code ^= 0 then do;
	     if code = error_table_$no_dir | code = error_table_$noentry
	     then call gtss_expand_pathname_$verify_umc (
		addr (ascii_cat_file)
		, gtss_file_values.dname
		, gtss_file_values.ename
		, status_word.status
		, code
		);
	     else status_word.status = gtss_filact_error_status_ (code);
	     goto could_not_open;
	end;

	gtss_file_values.set_switch = "0"b;
	gtss_file_values.set_switch.number_allocations = "1"b;
	gtss_file_values.data_fields.number_allocations = 1; /* Increment by one. */
	call gtss_attributes_mgr_$set (addr (gtss_file_values), code);
	if code ^= 0 then do;
	     status_word.status = gtss_filact_error_status_ (code);
	     goto could_not_open;
	end;

	if gtss_file_values.catalog then do;
	     code = error_table_$not_seg_type;
	     status_word.status = "4005"b3;
	     goto could_not_open;
	end;

/* *	Set runtime attributes structure for ios. * */
	gtss_file_attributes_ptr = addr (gtss_tfa_ext_$file_attributes.temp_file (file_no));
	gtss_file_attributes.max_size = gtss_file_values.data_fields.maxll;
	gtss_file_attributes.current_size = gtss_file_values.data_fields.curll;
	gtss_file_attributes.user_attributes.non_null = ^gtss_file_values.data_flags.null_file;
	gtss_file_attributes.user_attributes.user_attr = gtss_file_values.attributes.attr;
	gtss_file_attributes.descriptor.device_type = "64"b3; /* => disk. */
	if gtss_file_values.data_flags.mode_random then
	     gtss_file_attributes.descriptor.words_block = "0100"b3; /* 64 (100oct) words per block. */
	else
	gtss_file_attributes.descriptor.words_block = "0500"b3; /* 320 (500oct) words per block. */
	gtss_file_attributes.descriptor.llink_flag = "1"b; /* size is in llinks (320words) */
	gtss_file_attributes.descriptor.mode = gtss_file_values.data_flags.mode_random | (AF_arglist.random_linked ^= "0"b);
	gtss_file_attributes.descriptor.perm = "1"b;	/* Permanent file. */
	gtss_file_attributes.descriptor.fill = "0"b;
	call gtss_adjust_size_ (gtss_file_attributes_ptr);

	call gtss_ios_open_ (
	     file_no
	     , gtss_file_values.dname
	     , gtss_file_values.ename
	     , access_mode
	     , (gtss_file_attributes.descriptor.mode)
	     , gtss_file_attributes_ptr
	     , addr (status_word)
	     , code);
	if addr (status_word) -> bit12 ^= "4000"b3 then do;
could_not_open: ;
	     call gtss_aft_$delete (aft_name, file_no, aft_code);
	     if status_word.status = "4000"b3 then
		status_word.status = gtss_filact_error_status_ (code);
	     if status_word.pd = "0"b then status_word.pd = get_faulty_cat_file_entry ();
	     if code ^= error_table_$noentry then
		if db_filact_funct04 then
		     call com_err_ (
		     code
		     , "gtss_filact_funct04_"
		     , "AFT (^i) ""^a"" gtss_ios_open_ status ^w"
		     , file_no
		     , aft_name
		     , status_word
		     );
	     goto ret;
	end;

	status_word.status = "400000"b3;		/* set status as ok */
	mc.regs.a = unspec (gtss_file_attributes.descriptor);
	status_word.null_bit = gtss_file_attributes.user_attributes.non_null; /* set null bit */
	status_word.user_attributes = gtss_file_attributes.user_attributes.user_attr; /* set attribute word */
ret:
	if db_filact_funct04 then
	     call ioa_ ("filact_funct04 return status ^6o^6o", status_word.status, status_word.pd);
	return;

%page;
/* *	Access File Declarations.	* */
dcl  altnp ptr init (null ());
dcl  altnl fixed bin (24);
dcl  altn8 char (8)based (altnp);
dcl  altn char (altnl)based (altnp);
dcl  file_name_in_ascii bit (1);
dcl  bit72 bit (72)aligned based;
dcl  bit36 bit (36)aligned based;
dcl  nic fixed bin (24);

dcl 1 AF_args aligned based (arg_ptr)
     , 3 word1
     , 4 L_altname bit (18)unal
     , 4 L_arglist bit (18)unal
     , 3 word2
     , 4 AF_function_no fixed bin (17)unal
     , 4 L_buffer bit (18)unal
     ;

dcl 1 AF_arglist aligned based (arglist_ptr)
     , 3 word1
     , 4 L_status_return bit (18)unal
     , 4 random_linked bit (18)unal
     , 3 word2
     , 4 L_cat_filedescr bit (18)unal
     , 4 L_permissions bit (18)unal
     ;
%page;
%include gtss_filact_intp1;
%page;
%include gtss_filact_intp2;
%page;
%include gtss_filact_intp3;
%page;
put_in_aft: proc (n);

/* *	Put name n in aft (or return from derail).
   * */
dcl  n char (8)parm;
	     call gtss_aft_$add (
		n
		, file_no
		, code
		);

	     if code = 1 then do;			/* name already in aft */

/* *	Make sure permissions that user is asking for are a subset of those
   he already has. */
		status_word.status = "403700"b3;	/* File in aft */
		gtss_file_attributes_ptr = gtss_disk.attributes_ptr (file_no);
		call gtss_adjust_size_ (gtss_file_attributes_ptr);
		mc.regs.a = unspec (gtss_file_attributes.descriptor);
		status_word.null_bit = gtss_file_attributes.user_attributes.non_null; /* set null bit */
		status_word.user_attributes = gtss_file_attributes.user_attributes.user_attr; /* set attribute word */
		if ((access_mode & gtss_disk (file_no).access_mode) = "0"b)
		& ^(substr (access_mode, 6, 1) & substr (gtss_disk (file_no).access_mode, 1, 1))
		then
		     status_word.pd = "400300"b3;	/* But permission denied */
						/* Put 400300 in LOWER HALF of status word */
		if db_filact_funct04 then
		     call ioa_ ("""^a"" Req. access ^b   AFT access ^b", n, access_mode, gtss_disk (file_no).access_mode);
		goto ret;
	     end;

	     if code = 2 then do;			/* aft full */
		status_word.status = "403600"b3;
		goto ret;
	     end;
	     aft_name = n;				/* Record last name placed in aft. */
	     return;

	end put_in_aft;
%page;
/* * Declarations for gtss_drl_filact_:
   IDENTIFIER		ATTRIBUTES	* */
dcl  access_mode bit (6);
dcl  addr builtin;
dcl  addrel builtin;
dcl  aft_code fixed bin (35);
dcl  aft_name char (8);
dcl  altname char (8) aligned based (altname_ptr);
dcl  altname_ptr ptr init (null ());
dcl  arglist_ptr ptr init (null ());
dcl  arg_ptr ptr init (null ());
dcl  attribute_segment_ptr ptr init (null ());
dcl  bit builtin;
dcl  bit12 bit (12)aligned based;
dcl  cat_filedescr_name_offset bit (18);
dcl  descriptor_ptr ptr init (null ());
dcl  entry_name char (12) init (" ");
dcl  error_table_$noentry fixed bin (35) ext;
dcl  error_table_$no_dir fixed bin (35) ext;
dcl  error_table_$not_seg_type fixed bin (35)ext;
dcl  file_no fixed bin (24);
dcl  fixed builtin;
dcl  FMS_block_ptr ptr init (null ());
dcl  gseg ptr init (null ());
dcl  high_b bit (18)aligned;
dcl  high_i fixed bin (18)aligned;
dcl  i fixed bin (24);
dcl  ioa_ entry options (variable);
dcl  length builtin;
dcl  low_i fixed bin (18)aligned static int options (constant)init (100);
dcl  null builtin;
dcl  p ptr init (null ());
dcl  rings (3) fixed bin (3) static int options (constant)init (4, 4, 4);
dcl  rtrim builtin;
dcl  search builtin;
dcl  smc_entry_ptr ptr init (null ());
dcl  status fixed bin (24);
dcl  status_ptr ptr init (null ());
dcl  string builtin;
dcl  substr builtin;
dcl  translate builtin;
dcl  two_words bit (72) based;
dcl  unspec builtin;
dcl  verify builtin;
dcl  words380 bit (13680)aligned based;
%page;
/* * Structures:	* */

dcl 1 status2 aligned based (status_ptr)
     , 3 word1
     , 4 status_code bit (12)unal
     , 4 zero1 bit (06)unal
     , 4 zero2 bit (18)unal
     , 3 word2
     , 4 L_bcd_message bit (18)unal
     , 4 message_words fixed bin (17)unal
     ;

dcl 1 bcdname aligned based (p),
    2 first8 bit (48)unal,
    2 last4 bit (24)unal;


dcl 1 filact_args aligned based (arg_ptr),
    2 altname_address bit (18) unaligned,
    2 arglist_address bit (18) unaligned,
    2 function_no fixed bin (17) unaligned,
    2 buffer_address bit (18) unaligned;


dcl 1 arglist aligned based (arglist_ptr),
    2 status_address bit (18) unaligned,
    2 record_address bit (18) unaligned,
    2 descriptor_address bit (18) unaligned,
    2 permissions_address bit (18) unaligned,
    2 options_address bit (18) unaligned,
    2 fill1 bit (18) unaligned;


dcl 1 lib_arglist aligned based (arglist_ptr),
    2 status_address bit (18) unaligned,
    2 fill bit (17) unaligned,
    2 mode bit (1) unaligned,
    2 fill1 bit (24) unaligned,
    2 file_code bit (12) unaligned;



dcl 1 status_word aligned based (status_ptr),
    2 status bit (18) unaligned,
    2 pd bit (18) unaligned,
    2 null_bit bit (1) unaligned,
    2 user_attributes bit (35) unaligned;



dcl 1 descriptor (0:8) aligned based (descriptor_ptr),
    2 name bit (72) aligned,
    2 password bit (72) aligned;

dcl 1 FMS_block aligned based (FMS_block_ptr),
    2 address bit (18) unaligned;


dcl 1 FMS_data_block aligned based (buffer_ptr),
    2 restore_switch bit (36) aligned,
    2 file_id char (8) aligned,
    2 fill (3:24) bit (36) aligned,
    2 record_type fixed bin (5) unaligned,
    2 fill2 bit (30) unaligned;

dcl 1 permissions aligned based (permissions_ptr),
    2 read bit (1) unaligned,
    2 write bit (1) unaligned,
    2 append bit (1) unaligned,
    2 execute bit (1) unaligned,
    2 purge bit (1) unaligned,
    2 modify bit (1) unaligned,
    2 lock bit (1) unaligned,
    2 fill bit (1) unaligned,
    2 create bit (1) unaligned,
    2 recovery bit (1) unaligned,
    2 fill1 bit (8) unaligned,
    2 test bit (1) unaligned,
    2 query bit (1) unaligned,
    2 fill2 bit (16) unaligned;



dcl 1 options aligned based (options_ptr),
    2 contigous bit (1) unaligned,
    2 random bit (1) unaligned,
    2 TSS_create bit (1) unaligned,
    2 I_D_S bit (1) unaligned,
    2 llink_allocated bit (1) unaligned,
    2 nostructured_device bit (1) unaligned,
    2 fill1 bit (1) unaligned,
    2 attribute_present bit (1) unaligned,
    2 user_attribute bit (1) unaligned,
    2 fill2 bit (4) unaligned,
    2 FMS_protection bit (1) unaligned,
    2 fill3 bit (4) unaligned,
    2 device_name bit (18) unaligned,
    2 initial_size bit (18) unaligned,
    2 max_size bit (18) unaligned,
    2 specific_permissions (0:max_options) aligned,
      3 userid bit (72) aligned,
      3 read bit (1) unaligned,
      3 write bit (1) unaligned,
      3 append bit (1) unaligned,
      3 execute bit (1) unaligned,
      3 purge bit (1) unaligned,
      3 modify bit (1) unaligned,
      3 lock bit (1) unaligned,
      3 fill bit (1) unaligned,
      3 create bit (1) unaligned,
      3 recovery bit (1) unaligned;


dcl 1 smc_arglist aligned based (arglist_ptr),
    2 status_address bit (18) unaligned,
    2 entry_address bit (18) unaligned;




dcl 1 smc_entry aligned based (smc_entry_ptr),
    2 userid bit (72) unaligned,
    2 fill1 bit (36) aligned,
    2 fill2 bit (36) aligned,
    2 space_time fixed bin (35) aligned,
    2 llinks_used fixed bin (17) unaligned,
    2 llinks_allowed fixed bin (17) unaligned,
    2 fill3 bit (36) aligned,
    2 resources fixed bin (17) unaligned,
    2 lodx bit (1) unaligned,
    2 cardin bit (1) unaligned,
    2 talk bit (1) unaligned,
    2 lods bit (1) unaligned,
    2 fill4 bit (2) unaligned,
    2 urgency bit (12) unaligned,
    2 password bit (72) unaligned,
    2 reserved bit (36) aligned,
    2 fill5 bit (10) unaligned,
    2 resources_used fixed bin (25) unaligned;
%page;
%include gtss_tfa_ext_;
%page;
%include gtss_dfd_ext_;
%page;
%include gtss_ust_ext_;
%page;
%include gtss_ext_;
%page;
%include gtss_filact_status;
%page;
%include gtss_pnterr;
%page;
%include mc;
%page;
%include gtss_entry_dcls;
%page;
%include gtss_ascii_file_names;
%page;
%include gtss_file_values;
%page;
%include gtss_FMS_catalog;
%page;
%include status_info;
%page;
%include gtss_filact_options;
%page;
%include gse_ext_;
%page;
%include gtss_db_names;
     end						/* gtss_filact_funct04_ */;
