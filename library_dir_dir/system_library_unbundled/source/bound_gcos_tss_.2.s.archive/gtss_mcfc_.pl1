/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(2021-05-27,GDixon), approve(2021-05-27,MCR10090),
     audit(2021-06-03,Swenson), install(2021-06-08,MR126g-0057):
     Fix ioa_ controls in com_err_ calls.
                                                   END HISTORY COMMENTS */



gtss_mcfc_: proc;

/* Procedure to regulate a multiple number of callers
   to a gcos file (mcfc).

   Author: Dave Ward	07/28/79
   Change: Dave Ward	11/02/79 "delete" entry.
   Change: Dave Ward	12/03/79 Inserted use of debug switch "mcfc/del".
   Change: R. Barstad         11/03/82 Delete IDS2 concurrency control seg
                                       if it exists
*/

/* Declaration of parmameters. */
dcl  access                   bit(6)parm	/* See DD17, FILACT function 4. */;
dcl  code                     fixed bin(35)parm;
dcl  dirname                  char(*)parm;
dcl  diskx                    fixed bin(24)parm;
dcl  entname                  char(*)parm;
dcl  mlid                     bit(36)aligned parm;
dcl  statp                    ptr parm;
	return;					/* Non-used entry. */

open:	entry (
	     dirname				/* Multics directory of file. (input) */
	     , entname				/* Multics file entry name. (input). */
	     , access				/* GCOS access (runtime) mode requested (input). */
	     , mlid				/* Caller's multics lock id. (input). */
	     , statp				/* Pointer to callers's 2 word fms status value. (input). */
	     , code);				/* Return status code);. (output).
						   0 => successful.
						   >0 => failure (expand).
						   */
	ENTRY = "gtss_mcfc_$open";
	if db_mcfc then
	     call com_err_ (
	     0
	     , ENTRY
	     , """^a>^a"" mlid ^w"
	     , dirname
	     , entname
	     , mlid
	     );
	if get_uid (fuid) then return;

	h = mod (fuid, hbound (mcfc.start_list, 1)+1);

	if can_not_lock ("chain", h, mcfc.start_list (h).files.lock) then do;
busy:	     ;
	     fms_status.bit12 = "4004"b3;		/* File busy. */

conclude:	     ;

	     code = 1;				/* This caller can not use the file. */
	     if db_mcfc then
		call com_err_ (
		0
		, ENTRY
		, """^a>^a"" can not be opened by ^w at this time."
		, dirname
		, entname
		, mlid
		);
	     return;
	end;

	i = mcfc.start_list (h).files.first;
	do while (i>0);
	     if unspec (fuid) = file_entry (i).unique_id then do; /* File is currently accessed. */
		if can_not_lock ("file", i, file_entry (i).file_lock) then do;

/* IMPOSSIBLE! All files in chain are locked but can not lock
   particular file.
*/
		     call com_err_ (
			0
			, ENTRY
			, "ALL FILES LOCKED, BUT CAN NOT LOCK FILE (^i) ""^a>^a""."
			, i
			, dirname
			, entname
			);
		     signal cond (gtss_fail);
		end;
		call unlock_entry ("chain", h, mcfc.start_list (h).files.lock);
		if cant_use (i, mlid, access) then do;
		     call unlock_entry ("file", i, file_entry (i).file_lock);
		     goto conclude;
		end;
		call record_caller (i, mlid, access);
		code = 0;
		call unlock_entry ("file", i, file_entry (i).file_lock);
		return;
	     end;

	     i = file_entry (i).link;			/* Link to next file name in hash chain. */
	end;

/* File not currently accessed by any callers,
   obtain an entry. */
	call obtain_entry (h, u);

/* Record new file access. */
	fn = rtrim (dirname)||">"||entname;

	if can_not_lock ("name", u, mcfc_names.names_lock) then do;
	     call unlock_entry ("chain", h, mcfc.start_list (h).files.lock);
	     goto busy;
	end;
	allocate ns in (names) set (nsp);
	call unlock_entry ("name", u, mcfc_names.names_lock);

	nsp -> ns = fn;
	file_entry (u).link = mcfc.start_list (h).files.first;
	file_entry (u).nameo = offset (nsp, names);
	file_entry (u).namel = length (fn);
	file_entry (u).unique_id = unspec (fuid);
	file_entry (u).number_callers = 0;		/* This is 1st caller. */
	mcfc.start_list (h).files.first = u;
	if can_not_lock ("file", u, file_entry (u).file_lock) then do;

/* IMPOSSIBLE: Chain is locked, this is a new file entry,
   but it is locked?
*/
	     call com_err_ (
		0
		, ENTRY
		, "ALL FILES LOCKED, BUT CAN NOT LOCK FILE (^i) ""^a""."
		, u
		, fn
		);
	     signal cond (gtss_fail);
	end;
	call unlock_entry ("chain", h, mcfc.start_list (h).files.lock);
	call record_caller (u, mlid, access);
	call unlock_entry ("file", u, file_entry (u).file_lock);
	code = 0;
	return;

close:	entry (
	     dirname				/* Multics directory of file. (input) */
	     , entname				/* Multics file entry name. (input). */
	     , mlid				/* Caller's multics lock id. (input). */
	     , statp
	     , code);				/* Return status code);. (output).
						   0 => successful.
						   >0 => failure (expand).
						   */
	ENTRY = "gtss_mcfc_$close";
	if db_mcfc then
	     call com_err_ (
	     0
	     , ENTRY
	     , """^a>^a"" mlid ^w"
	     , dirname
	     , entname
	     , mlid
	     );
	if get_uid (fuid) then return;
	h = mod (fuid, hbound (mcfc.start_list, 1)+1);
	if can_not_lock ("chain", h, mcfc.start_list (h).files.lock) then goto busy;
	i = mcfc.start_list (h).files.first;
	li = -i;
	do while (i>0);
	     if unspec (fuid) = file_entry (i).unique_id then do; /* File is currently accessed. */
		if can_not_lock ("file", i, file_entry (i).file_lock) then do;

/* IMPOSSIBLE! All files locked bu can not lock
   particular file.
*/
		     call com_err_ (
			0
			, ENTRY
			, "ALL FILES LOCKED, BUT CAN NOT LOCK FILE (^i) ""^a>^a""."
			, i
			, dirname
			, entname
			);
		     signal cond (gtss_fail);
		end;

		call unlock_entry ("chain", h, mcfc.start_list (h).files.lock);
		call remove_caller (i, mlid, h, li, code);
		return;
	     end;

	     li = i;				/* Remember previous i. */
	     i = file_entry (i).link;			/* Link to next file name in hash chain. */
	end;

/* Closing a file that is not open. */
	call unlock_entry ("chain", h, mcfc.start_list (h).files.lock);
	code = 1;					/* file name not in mcfc data base. */
	fms_status.bit12 = "4100"b3;			/* ?? */
	if db_mcfc then
	     call com_err_ (
	     0
	     , ENTRY
	     , "Attempting to close (^w) ""^a>^a"" but it is not open."
	     , fuid
	     , dirname
	     , entname
	     );
	return;

delete:	entry (
	     diskx				/* >0 => index to gtss_disk to file. */
	     , dirname				/* Multics directory of file. (input) */
	     , entname				/* Multics file entry name. (input). */
	     , mlid				/* Caller's multics lock id. (input). */
	     , statp
	     , code);				/* Return status code);. (output).
						   0 => successful.
						   >0 => failure (expand).
						   */
	ENTRY = "gtss_mcfc_$delete";
	if db_mcfc then
	     call com_err_ (
	     0
	     , ENTRY
	     , """^a>^a"" mlid ^w"
	     , dirname
	     , entname
	     , mlid
	     );
	if get_uid (fuid) then return;
	h = mod (fuid, hbound (mcfc.start_list, 1)+1);
	if can_not_lock ("chain", h, mcfc.start_list (h).files.lock) then goto busy;
	i = mcfc.start_list (h).files.first;
	li = -i;
	do while (i>0);
	     if unspec (fuid) = file_entry (i).unique_id then do; /* File is currently accessed. */
		if can_not_lock ("file", i, file_entry (i).file_lock) then do;

/* IMPOSSIBLE! All files locked bu can not lock
   particular file.
*/
		     call com_err_ (
			0
			, ENTRY
			, "ALL FILES LOCKED, BUT CAN NOT LOCK FILE (^i) ""^a>^a""."
			, i
			, dirname
			, entname
			);
		     signal cond (gtss_fail);
		end;

		call unlock_entry ("chain", h, mcfc.start_list (h).files.lock);

/* Deletion of file must be deferred.
   Mark mcfc data base to provide for
   deleting file at gtss_mcfc_$close,
   file renamed (Multics) to make name
   available for delete caller, while
   other (concurrent) callers retain
   reference to deleted file.
*/
		call defer_delete (i, mlid, code);
		return;
	     end;

	     li = i;				/* Remember previous i. */
	     i = file_entry (i).link;			/* Link to next file name in hash chain. */
	end;

/* File not currently accessed by any callers,
   delete the file immediately,
   the whole chain is locked during the file
   deletion process.
*/
	call delete_file;

	call unlock_entry ("chain", h, mcfc.start_list (h).files.lock);
	return;

delete_file: proc;

/* Delete the file. */

	     control_seg_ename = rtrim(entname)||".CONCURRENCY";
	     call delete_$path(dirname, control_seg_ename,
		"100100"b, "gtss", code /* irrelevant */);
	     code = 0;
	     call delete_$path (
		dirname
		, entname
		, "0"b				/* (use next bit). */
		||"1"b				/* Query caller if file protected . */
		||"0"b				/* Deletion of directory not allowed. */
		||"1"b				/* Delete segment or msf. */
		||"0"b				/* (examine next switch). */
		||"1"b				/* Chase link and delete entry linked to. */
		, "gtss"				/* Identifies who is questioning. */
		, code
		);

	     if db_mcfc then
		call com_err_ (code, "mcfc/del", """^a>^a""", dirname, entname);

	     if code ^= 0 then do;
		if code = error_table_$noentry then
		     fms_status.bit12 = "4005"b3;	/* NON-EXISTENT. */
		else
		fms_status.bit12 = gtss_filact_error_status_ (code); /* Unknown error. */
		if db_mcfc then
		     call com_err_ (
		     code
		     , ENTRY
		     , "Can not delete ""^a>^a""."
		     , dirname
		     , entname
		     );
	     end;
	     return;
	end					/* delete_file */;

obtain_entry: proc (h, u);

/* Obtain a file_entry from the "closest"
   chain of available entries to entry h.
   Set u to the index of the obtained entry.
*/
dcl  h                        fixed bin(24) parm;
dcl  u                        fixed bin(24) parm;
	     do i = h to hbound (mcfc.start_list, 1),
		     lbound (mcfc.start_list, 1) to (h-1);
		if ^can_not_lock ("avail", i, mcfc.start_list (i).avail.lock) then do;
		     if mcfc.start_list (i).avail.first = 0 then do;
			call unlock_entry ("avail", i, mcfc.start_list (i).avail.lock);
			goto cont;
		     end;
		     u = mcfc.start_list (i).avail.first;
		     mcfc.start_list (i).avail.first = file_entry (u).link;
		     call unlock_entry ("avail", i, mcfc.start_list (i).avail.lock);
		     return;
		end;

cont:		;
	     end;

/* Could not find ANY available entries. */
	     call com_err_ (
		0
		, ENTRY
		, "NO AVAILABLE CHAIN TO OBTAIN FROM (from ^i for ^i)"
		, h
		, u
		);
	     signal cond (gtss_fail);
	     return;
dcl  i                        fixed bin(24);
	end					/* obtain_entry */;

return_entry: proc (h, u);

/* Return file entry u to an available list. */
dcl  h                        fixed bin(24) parm;
dcl  u                        fixed bin(24) parm;
	     do i = h to hbound (mcfc.start_list, 1),
		     lbound (mcfc.start_list, 1) to (h-1);
		if ^can_not_lock ("avail", i, mcfc.start_list (i).avail.lock) then do;
		     if mcfc.start_list (i).avail.first = 0 then do;
			call unlock_entry ("avail", i, mcfc.start_list (i).avail.lock);
			goto cont;
		     end;
		     unspec (file_entry (u)) = "0"b;
		     file_entry (u).link = mcfc.start_list (i).avail.first;
		     mcfc.start_list (i).avail.first = u;
		     call unlock_entry ("avail", i, mcfc.start_list (i).avail.lock);
		     return;
		end;

cont:		;
	     end;

/* Could not find ANY available entries. */
	     call com_err_ (
		0
		, ENTRY
		, "NO AVAILABLE CHAIN TO RETURN TO (from ^i for ^i)"
		, h
		, u
		);
	     signal cond (gtss_fail);
	     return;
dcl  i                        fixed bin(24);
	end					/* return_entry */;

get_uid:	proc (fuid) returns (bit (1));

/* Obtain the unique id of the file to be accessed.
   Return "1"b if the unique id can NOT be obtained.
*/
dcl  fuid                     fixed bin(35)parm;

	     call hcs_$status_long (			/* Obtain uniqued file id. */
		dirname
		, entname
		, 1				/* Chase links. */
		, addr (br)
		, null ()				/* Return no name information. */
		, code
		);

	     if code ^= 0 then do;			/* Can not access the file. */
		if code = error_table_$noentry then
		     fms_status.bit12 = "4005"b3;	/* NON-EXISTENT. */
		else
		fms_status.bit12 = "4100"b3;
		return ("1"b);
	     end;

	     unspec (fuid) = br.uid;
	     return ("0"b);
	end					/* get_uid */;

remove_caller: proc (
		f				/* Index to file_entry to file accessed by caller. */
		, i				/* Name of caller (multics lock id). */
		, si				/* Index to start list for file chain. */
		, li				/* <0 => abs(li)=si. >0 => index of file
						   entry linked to this file entry. */
		, code				/* Return code. */
		);

/* Remove i as a caller for file.
   If last caller remove the file.
*/
dcl  f                        fixed bin(24)parm;
dcl  i                        bit(36)aligned parm;
dcl  si                       fixed bin(24) parm;
dcl  li                       fixed bin(24) parm;
dcl  code                     fixed bin(35)parm;
	     call get_caller_index (f, caller_ptr, k);

/* Search files caller list for "this" caller
   (i.e., the one with same multics lock id).
*/
	     n = file_entry (f).number_callers;
	     do j = 1 to n;
		if caller (k).lock_id (j) = i then do;	/* Caller located. */
		     n = n-1;			/* Reduce number of callers for file by one. */
		     file_entry (f).number_callers = n; /* Record reduced number. */
		     if j< (n+1) then do;		/* Compact the list of callers. */
			caller (k).lock_id (j) = caller (k).lock_id (n+1);
			caller (k).gcos_access (j) = caller (k).gcos_access (n+1);
		     end;
		     if n<1 then do;

/* There are no more callers accessing this file,
   remove the file entry.
*/

			if file_entry (f).delete then call delete_file;

			if can_not_lock ("name", f, mcfc_names.names_lock) then do;
			     call unlock_entry ("file", f, file_entry (f).file_lock);
			     goto busy;
			end;
			free ptr (file_entry (f).nameo, names) -> ns;
			call unlock_entry ("name", f, mcfc_names.names_lock);

			if can_not_lock ("chain", si, mcfc.start_list (si).files.lock) then do;
			     if db_mcfc then
				call com_err_ (
				0
				, ENTRY
				, """^a>^a"" can not be opened by ^w at this time."
				, dirname
				, entname
				, mlid
				);
/**CHANGE**/
			     signal cond (gtss_fail);
			end;
			call unlock_entry ("file", f, file_entry (f).file_lock);

			if (li>0) | (file_entry (f).link>0) then do;

/* There are more files on this chain,
   just remove this (f) file entry.
*/
			     if li<1 then		/* Entry f is 1st in chain. */
				mcfc.start_list (si).files.first = file_entry (f).link;
			     else			/* Entry f not 1st, link around f. */
			     file_entry (li).link = file_entry (f).link;
			end;
			else			/* No more files in chain. */
			mcfc.start_list (si).files.first = 0;

			call return_entry (si, f);
			call unlock_entry ("chain", si, mcfc.start_list (si).files.lock);
		     end;
		     else
		     call unlock_entry ("file", f, file_entry (f).file_lock);
		     code = 0;
		     return;
		end;
	     end;

/* Caller not in list of callers for file f? */
	     code = 1;				/* file name not in mcfc data base. */
	     fms_status.bit12 = "4100"b3;		/* ?? */
	     if db_mcfc then
		call com_err_ (
		0
		, ENTRY
		, "Attempting to close (^i ^w) ""^a>^a"" but not open by ^w."
		, f
		, file_entry (f).unique_id
		, dirname
		, entname
		, i
		);
	     call unlock_entry ("file", f, file_entry (f).file_lock);
	     return;
dcl  n                        fixed bin(24);
dcl  k                        fixed bin(24);
dcl  j                        fixed bin(24);
	end					/* remove_caller */;

defer_delete: proc (
		f				/* Index to file_entry to file accessed by caller. */
		, i				/* Name of caller (multics lock id). */
		, code				/* Return code. */
		);

/* Mark mcfc data base for deferred deletion.
*/
dcl  f                        fixed bin(24)parm;
dcl  i                        bit(36)aligned parm;
dcl  code                     fixed bin(35)parm;

	     code = 0;
	     call get_caller_index (f, caller_ptr, k);

/* Examine if deleter is a caller.
*/
	     n = file_entry (f).number_callers;
	     do j = 1 to n;
	     end;

/* Deleter is NOT a caller,
   i.e., not using the file.
*/
	     file_entry (f).delete = "1"b;

/* Rename the file to allow the deleter to
   reuse the file name, but preserving the
   file for other (concurrent) users.
*/
	     gtss_file_values.version = 1;
	     gtss_file_values.dname = dirname;
	     gtss_file_values.ename = entname;
	     gtss_file_values.new_ename = unique_chars_ (unique_bits_ ());
	     gtss_file_values.change_name = "1"b;
	     unspec (gtss_file_values.set_switch) = "0"b;
	     call gtss_attributes_mgr_$set (addr (gtss_file_values), code);
dcl  gtss_attributes_mgr_$set entry(ptr,fixed bin(35));
	     if code = 0 then
		if diskx>0 then			/* Rename entry in gtss_disk data base. */
		     gtss_disk (diskx).entry_name = gtss_file_values.new_ename;

	     call unlock_entry ("file", f, file_entry (f).file_lock);
	     return;
dcl  j                        fixed bin(24);
dcl  n                        fixed bin(24);
dcl  k                        fixed bin(24);
	end					/* defer_delete */;

cant_use:	proc (f, i, a)returns (bit (1));

/* return "1"b if caller (multics lock id i) can NOT
   use file (file_entry index f) with gcos access a.
*/
dcl  f                        fixed bin(24) parm;
dcl  i                        bit(36)aligned parm;
dcl  a                        bit(6)parm;
	     call get_caller_index (f, caller_ptr, c);
retry:	     ;
	     do k = 1 to file_entry (f).number_callers;
		if i ^= caller (c).lock_id (k) then
						/* always allow caller to access his own files */
		     if compare_access (a, (caller (c).gcos_access (k))) then do;
			if nonexistent_process (caller (c).lock_id (k)) then do;
			     call restore_file (f);
			     goto retry;
			end;
			fms_status.bit12 = "4003"b3;	/* Permissions denied. */
			return ("1"b);
		     end;

	     end;
	     return ("0"b);
dcl  c                        fixed bin(24);
dcl  k                        fixed bin(24);
	end					/* cant_use */;

nonexistent_process: proc (id)returns (bit (1));

/* Return "1"b if lock id (id) does belong to
   a process that no longer exists.
*/
dcl  id                       bit(36)aligned parm;
	     lid = id;				/* Move to local variable, assures input not altered. */
	     call set_lock_$lock (
		lid
		, 0				/* Wait 0 seconds to attempt lock. */
		, c
		);
	     if (c = 0) | (c = error_table_$invalid_lock_reset) then return ("1"b);
	     return ("0"b);
dcl  c                        fixed bin(35);
dcl  lid                      bit(36)aligned;
	end					/* nonexistent_process */;

compare_access: proc (ca, ea)returns (bit (1));

dcl  ca                       bit(6)parm;
dcl  ea                       bit(6)parm ;
	     if calla.changing then return ("0"b);	/* Caller access allowing file to change. */
	     if exista.write then return ("1"b);	/* Already a writer. (fail). */
	     return ("0"b);

dcl 1 calla defined(ca),
      2 (
      read
,     write
,     append
,     execute
,     test
,     changing
        ) bit(1)unal;

dcl 1 exista defined(ea),
      2 (
      read
,     write
,     append
,     execute
,     test
,     changing
        ) bit(1)unal;
	end					/* comapre_access */;

record_caller: proc (f, i, a);

/* Record gcos caller (multics lock id i) as a caller
   accessing file (index f into file_entry) with gcos
   access a.
*/
dcl  f                        fixed bin(24) parm;
dcl  i                        bit(36)aligned parm;
dcl  a                        bit(6)parm;

	     call get_caller_index (f, caller_ptr, k);
	     j = file_entry (f).number_callers+1;
	     if j>hbound (caller.lock_id, 2) then do;
		if db_mcfc then
		     call com_err_ (
		     0
		     , ENTRY
		     , "Over ^i callers for file ^i"
		     , hbound (caller.lock_id, 2)
		     , f
		     );
		file_entry (f).number_who_could_not_call = file_entry (f).number_who_could_not_call+1;
		call unlock_entry ("file", f, file_entry (f).file_lock);
		goto busy;
	     end;
	     file_entry (f).number_callers = j;
	     caller (k).lock_id (j) = i;
	     caller (k).gcos_access (j) = a;

	     return;

dcl  u                        fixed bin (24);
dcl  k                        fixed bin (24);
dcl  j                        fixed bin (24);
	end					/* record_caller */;

%include gtss_mcfc_gci;

restore_file: proc (f);

/* Remove all callers for file f whose
   process no longer exist.
*/
dcl  f                        fixed bin(24) parm;
	     sp = caller_ptr;
	     call get_caller_index (f, caller_ptr, k);
	     n = file_entry (f).number_callers;
	     j = 1;
	     do while (j <= n);
		call set_lock_$lock (
		     caller (k).lock_id (j)
		     , 0				/* Wait 0 seconds to attempt lock. */
		     , c
		     );
		if (c = 0) | (c = error_table_$invalid_lock_reset) then do;

/* Remove this caller, his lock id was able to
   be reset => his process is defunct.
*/
		     if j<n then do;		/* Replace j-th caller with n-th. */
			caller (k).lock_id (j) = caller (k).lock_id (n);
			caller (k).gcos_access (j) = caller (k).gcos_access (n);
		     end;
		     n = n-1;
		end;
		else
		if c = error_table_$lock_wait_time_exceeded then

/* This caller has lock id for current
   process so retain the caller.
*/
		     j = j+1;
		else do;

/* Unexpected error attempting to test lock id.
*/
		     call com_err_ (
			c
			, ENTRY
			, "Attempting to restore file ^i caller ^i"
			, f
			, j
			);
		     signal cond (gtss_fail);
		end;
	     end;

/* Reset number of callers. */
	     file_entry (f).number_callers = n;

/* Reset save pointer value. */
	     caller_ptr = sp;
	     return;

dcl  sp                       ptr;
dcl  k                        fixed bin(24);
dcl  j                        fixed bin(24);
dcl  n                        fixed bin(24);
dcl  c                        fixed bin(35);
	end					/* restore_file */;

can_not_lock: proc (en, e, lw)returns (bit (1));

/* Lock word lw, for list named en at entry e.
   Return "1"b if can NOT lock, else return "0"b.
*/
dcl  en                       char(*)parm;
dcl  e                        fixed bin(24) parm;
dcl  lw                       bit(36)aligned;
	     if db_mcfc then
		call com_err_ (
		0
		, ENTRY
		, "^/  LOCK ^5a ^4i ^p ^a>^a"
		, en
		, e
		, addr (lw)
		, dirname
		, entname
		);
	     call set_lock_$lock (
		lw
		, gtss_ext_$mcfc.wait_time
		, c
		);
	     if c = 0 then return ("0"b);

	     if c = error_table_$invalid_lock_reset then do;
		if en = "file" then call restore_file (e);
		return ("0"b);
	     end;

/* Could not lock. */
	     if c = error_table_$lock_wait_time_exceeded then do;
		if db_mcfc then
		     call com_err_ (c, ENTRY, "(^a ^i)", en, e);
		return ("1"b);
	     end;
	     if c = error_table_$locked_by_this_process then do;
		call com_err_ (c, ENTRY,
		     "BUG? Will not proceed (^a ^i).", en, e);
		signal cond (gtss_fail);
		return ("1"b);
	     end;
	     call com_err_ (c, ENTRY,
		"UNEXPECTED LOCK ERROR? (^a ^i)", en, e);
	     signal cond (gtss_fail);
	     return ("1"b);
dcl  c                        fixed bin(35);
	end					/* can_not_lock */;

unlock_entry: proc (en, e, lw);

/* Unlock word lw. In en named chain, entry e.
*/
dcl  en                       char(*)parm;
dcl  e                        fixed bin(24)parm;
dcl  lw                       bit(36)aligned parm;
	     if db_mcfc then
		call com_err_ (
		0
		, ENTRY
		, "^/UNLOCK ^5a ^4i ^p ^a>^a"
		, en
		, e
		, addr (lw)
		, dirname
		, entname
		);
	     call set_lock_$unlock (
		lw
		, c
		);
	     if c = 0 then return;

/* Could not unlock. */
	     if (c = error_table_$lock_not_locked) |
	     (c = error_table_$locked_by_other_process) then
		call com_err_ (c, ENTRY,
		"BUG? Will not proceed (^a ^i).", en, e);
	     else
	     call com_err_ (c, ENTRY,
		"UNEXPECTED LOCK ERROR? (^a ^i)", en, e);
	     signal cond (gtss_fail);
dcl  c                        fixed bin(35);
	end					/* unlock_entry */;

/* Variables for gtss_mcfc_
   IDENTIFIER		ATTRIBUTES */
dcl  addr                     builtin;
dcl  control_seg_ename char(32);
dcl  delete_$path             entry(char(*),char(*),bit(6),char(*),fixed bin(35));
dcl  divide                   builtin;
dcl  empty                    builtin;
dcl  ENTRY                    char(17);
dcl  error_table_$invalid_lock_reset fixed bin(35)ext;
dcl  error_table_$locked_by_other_process fixed bin(35)ext;
dcl  error_table_$locked_by_this_process fixed bin(35)ext;
dcl  error_table_$lock_not_locked fixed bin(35)ext;
dcl  error_table_$lock_wait_time_exceeded fixed bin(35)ext;
dcl  error_table_$noentry     fixed bin(35)ext;
dcl  fn                       char(168)var;
dcl  fni                      char(file_entry(i).namel) unal based(pointer(file_entry(i).nameo,names));
dcl  fuid                     fixed bin(35);
dcl  gtss_fail                condition ext;
dcl  h                        fixed bin(24);
dcl  hbound                   builtin;
dcl  hcs_$status_long         entry(char(*),char(*),fixed bin(1),ptr,ptr,fixed bin(35));
dcl  i                        fixed bin(24);
dcl  lbound                   builtin;
dcl  length                   builtin;
dcl  li                       fixed bin(24);
dcl  mod                      builtin;
dcl  n                        fixed bin(24);
dcl  ns                       char(length(fn))based;
dcl  nsp                      ptr;
dcl  null                     builtin;
dcl  offset                   builtin;
dcl  pointer                  builtin;
dcl  ptr                      builtin;
dcl  rtrim                     builtin;
dcl  set_lock_$lock           entry(bit(36)aligned,fixed bin,fixed bin(35));
dcl  set_lock_$unlock         entry(bit(36)aligned,fixed bin(35));
dcl  u                        fixed bin(24);
dcl  unique_bits_             entry returns(bit(70));
dcl  unique_chars_            entry(bit(*)) returns(char(15));
dcl  unspec                   builtin;
	

dcl 1 fms_status aligned based(statp)
,     2 bit12 bit(12)unal
,     2 bit60 bit(60)unal
;

%include gtss_mcfc;

%include gtss_ext_;

%include gtss_db_names;

dcl 1 br aligned like branch;
%include status_info;

%include gtss_file_values;

%include gtss_entry_dcls;

%include gtss_dfd_ext_;
     end						/* gtss_mcfc_ */;
