/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

gtss_mcfc_dump: mcfcd: proc;

/* Dump the GCOS mcfc data base.

   Author: Dave Ward	08/08/79
*/
	nhe = "0"b;				/* => Do print header info. */

	call cu_$arg_ptr (1, ap, al, c);
	if c = 0 then do;
	     if arg = "-nhe" | arg = "-no_header" then nhe = "1"b;
	     else do;
		call com_err_ (
		     c
		     , "gtss_mcfc_dump"
		     , "Only -nhe (-no_header) allowed ""^a"""
		     , arg
		     );
		return;
	     end;
	end;

	call gtss_mcfc_init_ (rs);
	if rs = "false" then return;

	if ^nhe then do;
	     call ioa_ ("DUMP OF MULTIPLE CALLER'S FILE CONTROL (wait ^i, lock_id ^w):"
		, gtss_ext_$mcfc.wait_time
		, gtss_ext_$mcfc.multics_lock_id
		);

/* Print pathnames of mcfc segments. */
	     do i = 1 to hbound (mo, 1);
		call hcs_$fs_get_path_name (
		     mo (i)
		     , dn
		     , dnl
		     , en
		     , c
		     );
		if c ^= 0 then do;
		     call com_err_ (
			c
			, "gtss_mcfc_dump"
			, "Pointer ^i (^p)"
			, i
			, mo (i)
			);
		     return;
		end;
		call ioa_ ("^a>^a", substr (dn, 1, dnl), en);
	     end;
	end;


/* Measure available chains. */
	cul, cl, count = 0;
	do i = lbound (mcfc.start_list, 1) to hbound (mcfc.start_list, 1);
	     if mcfc.start_list (i).files.first ^= 0 then nfiu = "0"b; /* Atleast 1 chain. */
	     if mcfc.start_list (i).avail.lock = "0"b then do;
		cul = cul+1;
		l = trace (mcfc.start_list (i).avail.first);
		count (l) = count (l)+1;
	     end;
	     else
	     cl = cl+1;
	end;

/* Print available statistics. */
	call ioa_ ("Available: locked ^i unlocked ^i length distribution"
	     , cl
	     , cul
	     );
	do i = lbound (count, 1) to hbound (count, 1);
	     if count (i) ^= 0 then
		call ioa_$nnl (" ^i-^i", i, count (i));
	end;
	if nfiu then call ioa_$nnl (" NO FILES IN USE.");
	call ioa_$nnl ("^/");

/* Print file chains. */
	do i = lbound (mcfc.start_list, 1) to hbound (mcfc.start_list, 1);
	     if mcfc.start_list (i).files.first>0 then do;
		call ioa_$nnl ("^/[Chain ^4i]", i);
		if mcfc.start_list (i).files.lock = "0"b then call ioa_$nnl ("     locked");
		else call ioa_$nnl (" not locked");
		n = mcfc.start_list (i).files.first;
		mn = 0;
		do while ((n ^= 0)& (mn <= 100));
		     call ioa_$nnl (" uid ^w lock ^w del ^1b ^i>100^/(^4i) ""^a""^/"
			, file_entry (n).unique_id
			, file_entry (n).file_lock
			, file_entry (n).delete
			, file_entry (n).number_who_could_not_call
			, n
			, fnn
			);

/* Print list of callers. */
		     call get_caller_index (n, caller_ptr, e);
		     do k = 1 to file_entry (n).number_callers;
			call ioa_$nnl (" (^i ^w ^2o)"
			     , k
			     , caller (e).lock_id (k)
			     , caller (e).gcos_access (k)
			     );
		     end;
		     call ioa_$nnl ("^/");

		     mn = mn+1;
		     n = file_entry (n).link;
		end;
	     end;
	end;
	return;

trace:	proc (i)returns (fixed bin);

/* Trace length of chain starting at i. */
dcl  i                        fixed bin(24) parm;
	     n = i;
	     k = 0;
	     do while ((n ^= 0)& (k<hbound (count, 1)));
		k = k+1;
		n = file_entry (n).link;
	     end;
	     return (k);
dcl  n                        fixed bin(24);
dcl  k                        fixed bin(24);
	end					/* trace */;

%include gtss_mcfc_gci;

/* Variables for gtss_mcfc_dump:
   IDENTIFIER		ATTRIBUTES	*/
dcl  al                       fixed bin(24);
dcl  ap                       ptr;
dcl  arg                      char(al)unal based(ap);
dcl  c                        fixed bin(35);
dcl  cl                       fixed bin(24);
dcl  com_err_                 entry options(variable);
dcl  count                    (0:8000)fixed bin(24);
dcl  cul                      fixed bin(24);
dcl  cu_$arg_ptr              entry(fixed bin(24),ptr,fixed bin(24),fixed bin(35));
dcl  dn                       char(168);
dcl  dnl                      fixed bin;
dcl  e                        fixed bin(24);
dcl  en                       char(32);
dcl  fnn                      char(namel(n))unal based(pointer(nameo(n),names));
dcl  gtss_mcfc_init_          entry(char(*)var);
dcl  hcs_$fs_get_path_name    entry(ptr,char(*),fixed bin,char(*),fixed bin(35));
dcl  i                        fixed bin(24);
dcl  ioa_                     entry options(variable);
dcl  ioa_$nnl                 entry options(variable);
dcl  j                        fixed bin(24);
dcl  k                        fixed bin(24);
dcl  l                        fixed bin(24);
dcl  mn                       fixed bin(24);
dcl  mo                       (6)ptr based(addr(gtss_ext_$mcfc.files_ptr));
dcl  n                        fixed bin(24);
dcl  nfiu                     bit(1)init("1"b);
dcl  nhe                      bit(1);
dcl  rs                       char(5)var;

%include gtss_mcfc;

%include gtss_ext_;
     end						/* gtss_mcfc_dump */;
