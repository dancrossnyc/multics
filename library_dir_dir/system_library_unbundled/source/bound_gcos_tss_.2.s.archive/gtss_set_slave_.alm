"  ***********************************************************
"  *                                                         *
"  *                                                         *
"  * Copyright, (C) Honeywell Information Systems Inc., 1981 *
"  *                                                         *
"  *                                                         *
"  ***********************************************************

	name	gtss_set_slave_
	entry	gtss_set_slave_
	entry	load_bar
"
"	gtss routine to provide for setting  the BAR
"	and transferring to GCOS code in a simulated
"	memory segment.
"
"	dcl gtss_set_slave_ entry(fixed bin aligned,ptr,bit(1)aligned);
"	Arg 1	base address register value.
"	Arg 2	pointer to code to transfer to.
"
"	The base address register is loaded with the value passed in arg 1
"	and a TSS instruction is executed to cause control to go to the
"	tss slave program in BAR mode.
"
"	There is an additional entry to this program called load_bar. This
"	entry is called to load the bar and then return.
"
"
"	(gcos_set_slave contributors:)
"	WRITTEN BY DICK SNYDER, JANUARY 31, 1973 for the 6180
"	MODIFIED BY T. CASEY, MAY 1974  TO ADD no_bar ENTRY
"	MODIFIED BY D. KAYDEN DECEMBER 1974, JUNE 1975
"	Modified by M. R. Jordan, August 1977
"
"	(gtss contributors:)
"	Modified by D. B. Wardd, June 23, 1978
"	Modified by A. Kepner, August 29, 1978
"
	temp	temp
"
	include	stack_header
"
	include	stack_frame
"
gtss_set_slave_:
	push
	sprisp	sb|stack_header.bar_mode_sp save sp so signaller can reset
"				 it in case tss uses adr6
	lda	ap|2,*		get the BAR setting
	als	18		position it
	sta	temp
	lbar	temp		set the BAR
	eppbp	ap|4,*		get the ptr
	eppbp	bp|0,*		..

	stz	sp|stack_frame.entry_ptr  make stack traces look nice
	stz	sp|stack_frame.entry_ptr+1
"	In order to cause machine registers
"	to be loaded from the safe-store
"	region in the user's slave prefix
"	the following code wequence will
"	be set up and executed starting
"	at location 26 (decimal) in the
"	user's slave prefix.
"26	lreg	32	load index regs, a, q, etc.
"27	lareg	40	load addres registers
"28	tra	(to first executable instruction)
	epbpbb	bp|0	bb points to beginning of slave prefix
	ldaq	lreg	move lreg and lareg inst. to slave prefix
	staq	bb|26
	epaq	bp|0	isolate transfer address in q upper
	anq	-1,du
	orq	tra	build transfer instruction
	stq	bb|28	and move to prefix
	tss	bb|26	set BAR mode and start slave execution with
"			the 3 instructions provided.


load_bar:
	push
	lda	ap|2,*		get the BAR setting
	als	18		position it
	sta	temp
	lbar	temp		set the BAR
	return		that's it

	eight
lreg:	lreg	32
	lareg	40
tra:	tra	0
	end
