/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */

gtss_filact_funct02_: proc (mcp_val, high_val, gseg_val, arg_ptr_val, buffer_ptr_val, code);

/**	Derail FILACT function 02 (CC - Create Catalog).

	All parameters are input parameters except code.

	code returned 0 => Successful.
	code returned 4 => GCOS err4 (see gtss_pnterr structure).
	code returned other => multics error code.

   Authors: Robert J. Alvarado	Created	1979
   Change:  Paul Benjamin	10/08/79	Enable setting of permissions
   Change:  Paul Benjamin     12/14/79  New acls for propagation of permissions
   Change:  Ron Barstad       06/11/82  Fixed stringsize conditions on assign to pstr
**/
dcl  mcp_val                  ptr parm;
dcl  high_val                 fixed bin(18)unsigned unal parm;
dcl  gseg_val                 ptr parm;
dcl  arg_ptr_val              ptr parm;
dcl  buffer_ptr_val           ptr parm;
dcl  code                     fixed bin(35)parm;
	mcp = mcp_val;
	mem_top = high_val;
	gseg = gseg_val;
	arg_ptr = arg_ptr_val;
	buffer_ptr = buffer_ptr_val;

	code = 0;					/* Successful. */

/**	Obtain create catalog arglist. */
	if (CC_args.L_arglist < mem_bottom) |
	((CC_args.L_arglist +3) > mem_top) then do;
return_err4:   ;
	     code = 4;
	     return;
	end;
	arglist_ptr = addrel (gseg, CC_args.L_arglist);

/**	Obtain return status.	**/
	call validate_status (CC_arglist.L_status_return, status_ptr);

	if CC_arglist.L_permissions ^= 0 then
	     if (CC_arglist.L_permissions < mem_bottom)
	     | (CC_arglist.L_permissions > mem_top) then
		goto return_err4;

	if get_ascii_file_name ("0"b, CC_arglist.L_cat_filedescr, addr (ascii_cat_file)) then do;
	     status_word.status = "4005"b3;
could_not_create_catalog: ;
	     call bcd_message (
		status2.L_bcd_message
		, status2.message_words
		, buffer_ptr
		, "Could not create catalog."||rtrim (gtss_file_values.dname)||">"||rtrim (gtss_file_values.ename)
		);
	     status_word.pd = get_faulty_cat_file_entry ();
	     status_word.status = "400500"b3;		/* Could not access catalog specified. */
ret:	     ;
	     return;
	end;


	call gtss_expand_pathname_ (
	     addr (ascii_cat_file)
	     , gtss_file_values.dname
	     , gtss_file_values.ename
	     , code
	     );
	if code ^= 0 then goto could_not_create_catalog;
/**  Create Catalog now **/

	call hcs_$append_branchx (
	     dname
	     , ename
	     , fixed ("01011"b, 5)
	     , rings
	     , "*.*.*"
	     , 1b
	     , 0
	     , 0
	     , code
	     );
	if code ^= 0 then
	     goto could_not_create_catalog;

/** NOTE: permissions are not being checked with this release, however
SMA will be set for *.*.*		**/
	call set_general_permissions;

	call set_specific_permissions;


	status_word.status = "400000"b3;
	goto ret;

set_general_permissions: proc;

/* Set general permissions
   => Multics *.*.* access.
*/

/**	Obtain permissions.	**/
	     if CC_arglist.L_permissions = 0 then return;
	     if (CC_arglist.L_permissions < mem_bottom) |
	     (CC_arglist.L_permissions > mem_top) then goto return_err4;
	     pp = addrel (gseg, CC_arglist.L_permissions);
	     if pp -> b36 = (36)"1"b then return;
	     if pp -> fb18 = 0 then;

/* Deletes ignored for create catalog */
	     else do;

/* => Set specific general permissions. */
		if code ^= 0 then goto could_not_create_catalog;
		pstr = substr(char (pp -> b36),1,10);
		access_name = pstr||".*.g";		/* Create propagation acl. */
		modes = "0"b;
		status_code = 0;
		call hcs_$add_dir_acl_entries (
		     dname
		     , ename
		     , addr (dir_acl)
		     , 1
		     , code
		     );
		if code ^= 0 then goto could_not_create_catalog;
	     end;
	     return;

dcl  pp                       ptr;
dcl  fb18                     fixed bin(18)unsigned unal based;
dcl  b36                      bit(36)aligned based;
dcl  bits                     (0:35)bit(1)unal based;
dcl  pstr char(10);

dcl 1 dir_acl,
      2 access_name char(32),
      2 modes       bit(36),
      2 status_code fixed bin(35);
	end					/* set_general_permissions */;

set_specific_permissions: proc;
	     if (L_options<mem_bottom) |
	     ((L_options+2)>mem_top) then goto return_err4;
	     op = addrel (gseg, L_options);

/* Determine number of specific user permissions. */
	     do n = 0 by 1 while (end_of_list ^= -1);
		if (L_options + 3 + (3*n))>mem_top then goto could_not_create_catalog;
	     end;

	     if n < 1 then return;

/* User specific permissions. */
	     acl_count = n;
	     allocate dir_acl set (acl_ptr);
	     acl_count = 0;
	     rp_sw = "0"b;
	     a = empty ();
	     call hcs_$list_dir_acl (
		dname
		, ename
		, gtss_ext_$hcs_work_area_ptr
		, da_ptr
		, null ()
		, da_count
		, code
		);
	     if code ^= 0 then goto could_not_create_catalog;
	     c = da_count;
	     do k = 1 to n;
		found_sw = "0"b;
		pp = addr (user (k).specific_permission);
		if pp -> b36 ^= (36)"1"b then do;
		     call gtss_bcd_ascii_ (
			addr (user.id (k))
			, 12
			, addr (ascii_id)
			);
		     if pp -> fb18 = 0 then do i = 1 to da_count; /* delete */
			if index (da_name (i), "."||rtrim (ascii_id)||".g") ^= 0 then do;
			     acl_count = acl_count + 1;
			     del_name (acl_count) = da_name (i);
			     i = da_count;
			end;
		     end;
		     else do i = 1 to c;		/* Replace */
			if index (da_name (i), "."||rtrim (ascii_id)||".g") ^= 0 then do;
			     found_sw = "1"b;
			     pstr = substr(char (pp -> b36),1,10);
			     da_name (i) = pstr||"."||rtrim (ascii_id)||".g";
			     rp_sw = "1"b;
			     i = c;
			end;
		     end;
		     if pp -> fb18 ^= 0 & found_sw = "0"b then do;
			da_count = da_count + 1;
			pstr = substr(char (pp -> b36),1,10);
			da_name (da_count) = pstr||"."||rtrim (ascii_id)||".g";
			da_modes (da_count) = "0"b;
			rp_sw = "1"b;
		     end;
		end;
	     end;					/* of do k = 1 to n ... */
	     if rp_sw = "1"b then do;
		call hcs_$replace_dir_acl (
		     dname
		     , ename
		     , da_ptr
		     , da_count
		     , "1"b
		     , code
		     );
		if code ^= 0 then goto could_not_create_catalog;
	     end;
	     if acl_count ^= 0 then do;
		call hcs_$delete_dir_acl_entries (
		     dname
		     , ename
		     , acl_ptr
		     , acl_count
		     , code
		     );
		if code ^= 0 then goto could_not_create_catalog;
	     end;
	     free dir_acl;
	     return;

dcl a area(1000) based (gtss_ext_$hcs_work_area_ptr);

dcl da_ptr ptr;

dcl da_count fixed bin;

dcl 1 da_array (da_count) based (da_ptr),
     2 da_name char(32),
     2 da_modes bit(36),
     2 da_code fixed bin(35);
dcl  acl_count                fixed bin;
dcl  acl_ptr                  ptr init(null());
dcl  ascii_id                 char(12);
dcl  b36                      bit(36)aligned based;
dcl  c                        fixed bin;
dcl  fb18                     fixed bin(18)unsigned unal based;
dcl  found_sw		bit(1);
dcl  k                        fixed bin;
dcl  n                        fixed bin(24);
dcl  op                       ptr;
dcl  pp                       ptr;
dcl  pstr			char(10);
dcl  rp_sw		bit(1);

dcl 1 option_args aligned based(op)
,     2 word1
,       3 opt (0:35)bit(1)unal
,     2 word2
,       3 initial_size fixed bin(18)unsigned unal
,       3 max_size     fixed bin(18)unsigned unal
,     2 user (n)
,       3 id           bit(72)
,       3 specific_permission bit(36)
,     2 end_of_list    fixed bin(35)
,     2 user_attributes bit(36)
;

dcl 1 delete_acl  (acl_count) aligned based(acl_ptr),
      2 del_name char(32),
      2 status_code2 fixed bin(35);

dcl 1 dir_acl (acl_count)aligned based(acl_ptr),
      2 access_name char(32),
      2 modes       bit(36),
      2 status_code fixed bin(35);
	end					/* set_specific_permissions */;

/*	(CC) Create Catalog Declarations.	*/
dcl  new_name_ptr             ptr init(null());

dcl 1 CC_new_name		aligned based(new_name_ptr)
,     3 newname		bit(72)
,     3 newpassword		bit(72)
;

dcl 1 CC_args		aligned based(arg_ptr)
,     3 word1
,       4 zero		fixed bin(18)unsigned unal
,       4 L_arglist		fixed bin(18)unsigned unal
,     3 word2
,       4 CC_function_no	fixed bin(18)unsigned unal
,       4 L_buffer		fixed bin(18)unsigned unal
;

dcl 1 CC_arglist		aligned based(arglist_ptr)
,     3 word1
,       4 L_status_return	fixed bin(18)unsigned unal
,       4 zero		fixed bin(18)unsigned unal
,     3 word2
,       4 L_cat_filedescr	fixed bin(18)unsigned unal
,       4 L_permissions	fixed bin(18)unsigned unal
,     3 word3
,       4 L_options		fixed bin(18)unsigned unal
,       4 L_newname		fixed bin(18)unsigned unal
;

%include gtss_filact_intp3x;

%include gtss_filact_intp7x;


%include gtss_filact_intp2x;

%include gtss_filact_intp1x;

/** Declarations for gtss_drl_filact_:
     IDENTIFIER		ATTRIBUTES	**/
dcl  fcb_ptr                  ptr init(null());
dcl  access_mode              bit (6);
dcl  addr                     builtin;
dcl  addrel                   builtin;
dcl  aft_code                 fixed bin (35);
dcl  aft_name                 char (8);
dcl  altname                  char (8) aligned based (altname_ptr);
dcl  altname_ptr              ptr init(null());
dcl  append_mode              bit (36) static int options(constant)init ("100000000000"b3);
dcl  arglist_ptr              ptr init(null());
dcl  arg_ptr                  ptr init(null());
dcl  attribute_segment_ptr    ptr init(null());
dcl  bit                      builtin;
dcl  bit72                    bit(72)aligned based;
dcl  bit_count                fixed bin (24);
dcl  cat_filedescr_name_offset fixed bin(18)unsigned unal ;
dcl  cdate                    fixed bin (71);
dcl  clim                     float bin;
dcl  crf                      fixed bin(24);
dcl  csp                      float bin;
dcl  delete_$path             entry (char (*), char (*), bit (6), char (*), fixed bin (35));
dcl  descriptor_address       fixed bin(18)unsigned unal ;
dcl  descriptor_ptr           ptr init(null());
dcl  dir_name                 char (168);
dcl  divide                   builtin;
dcl  entry_name               char (12) init (" ");
dcl  error_table_$incorrect_access fixed bin (35) ext;
dcl  error_table_$moderr      fixed bin (35) ext;
dcl  error_table_$namedup     fixed bin (35) ext;
dcl  error_table_$noentry     fixed bin (35) ext;
dcl  error_table_$nomatch     fixed bin (35) ext;
dcl  error_table_$not_seg_type fixed bin(35)ext;
dcl  error_table_$no_dir      fixed bin (35) ext;
dcl  error_table_$segknown    fixed bin (35) ext;
dcl  error_table_$seg_not_found fixed bin (35) ext;
dcl  execute_mode             bit (36) static int options(constant)init ("200000000000"b3);
dcl  file_name_in_ascii       bit(1);
dcl  file_no                  fixed bin (24);
dcl  fixed                    builtin;
dcl  FMS_block_ptr            ptr init(null());
dcl  four_NULS                char (4)static int options (constant)init ((4)" ") /* 4 octal 000's */;
dcl  gseg                     ptr init(null());
dcl  gtss_fail                condition;
dcl  have_file                bit(1);
dcl  hbound                   builtin;
dcl  hcs_$add_acl_entries     entry (char (*), char (*), ptr, fixed bin(24), fixed bin (35));
dcl  hcs_$add_dir_acl_entries entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
dcl  hcs_$add_inacl_entries   entry (char (*), char (*), ptr, fixed bin, fixed bin (3), fixed bin (35));
dcl  hcs_$append_branchx      entry (char (*), char (*), fixed bin (5), (3) fixed bin (3), char (*), fixed bin (1), fixed bin (1), fixed bin (24), fixed bin (35));
dcl  hcs_$delentry_file       entry(char(*),char(*),fixed bin(35));
dcl  hcs_$delete_dir_acl_entries entry (char(*), char(*), ptr, fixed bin, fixed bin(35));
dcl  hcs_$initiate            entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$list_dir_acl	entry (char(*), char(*), ptr, ptr, ptr, fixed bin, fixed bin(35));
dcl  hcs_$make_seg            entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$quota_read          entry (char (*), fixed bin (18), fixed bin (71), bit (36) aligned, bit (36), fixed bin (1), fixed bin (18), fixed bin (35));
dcl  hcs_$replace_dir_acl	entry (char(*), char(*), ptr, fixed bin, bit(1), fixed bin(35));
dcl  hcs_$status_long         entry (char (*), char (*), fixed bin (1), ptr,ptr, fixed bin (35));
dcl  mem_top                  fixed bin(18)unsigned aligned;
dcl  i                        fixed bin(24);
dcl  increment                fixed bin(24);
dcl  ioa_                     entry options (variable);
dcl  k                        fixed bin(24);
dcl  l                        fixed bin(24);
dcl  lbound                   builtin;
dcl  mem_bottom               fixed bin(18)unsigned aligned static int options(constant)init(103);
dcl  max_options              fixed bin static int options(constant)init (100);
dcl  max_resources            fixed bin static int options(constant)init (99999);
dcl  minus_one                bit (36) static int options(constant)init ((36)"1"b);
dcl  mlim                     float bin;
dcl  mod                      builtin;
dcl  modify_mode              bit (36) static int options(constant)init ("200000000000"b3);
dcl  msp                      float bin;
dcl  multics_access_mode      fixed bin(5);
dcl  nic                      fixed bin(24);
dcl  p                        ptr init(null());
dcl  path_name                char (168) varying;
dcl  permission_word          bit(36)aligned based;
dcl  person_id                char (22);
dcl  quota                    fixed bin (18);
dcl  read_mode                bit (36) static int options(constant)init ("400000000000"b3);
dcl  rel                      builtin;
dcl  rings                    (3) fixed bin (3) static int options(constant)init (4, 4, 4);
dcl  shlim                    (0:7) float bin;
dcl  shsp                     (0:7) float bin;
dcl  size                     builtin;
dcl  smc_entry_ptr            ptr init(null());
dcl  sons_lvid                bit (36);
dcl  status                   fixed bin (24);
dcl  status_mode              bit (36) static int options(constant)init ("400000000000"b3);
dcl  status_ptr               ptr init(null());
dcl  substr                   builtin;
dcl  switches                 bit (6) static int options(constant)init ("37"b3);
dcl  tacc_sw                  fixed bin (1);
dcl  trp                      fixed bin (71);
dcl  tup                      bit (36) aligned;
dcl  two_words                bit (72) based;
dcl  type                     fixed bin (2);
dcl  used                     fixed bin (18);
dcl  user_attribute_word      bit (35);
dcl  user_info_$limits        entry (float bin, float bin, fixed bin (71), fixed bin(24), (0:7) float bin, float bin, float bin, (0:7) float bin);
dcl  words380                 bit(13680)aligned based;
dcl  write_mode               bit (36) static int options(constant)init ("100000000000"b3);

dcl 1 status2		aligned based(status_ptr)
,     3 word1
,       4 status_code	bit(12)unal
,       4 zero1		bit(06)unal
,       4 zero2		fixed bin(18)unsigned unal
,     3 word2
,       4 L_bcd_message	bit(18) unal
,       4 message_words	fixed bin(18)unsigned unal
;

dcl 1 bcdname aligned based(p),
    2 first8 bit(48)unal,
    2 last4  bit(24)unal;


dcl 1 status_word aligned based (status_ptr),
    2 status bit(18) unal,
    2 pd fixed bin(18)unsigned unal,
    2 null_bit bit (1) unal,
    2 user_attributes bit (35) unal;

%include gtss_ust_ext_;

%include gtss_ext_;

%include gtss_filact_status;

%include gtss_pnterr;

%include mc;

%include gtss_entry_dcls;

%include gtss_ascii_file_names;

%include gtss_file_values;

%include gtss_FMS_catalog;

%include status_info;

%include gtss_filact_options;

%include gse_ext_;

%include gtss_db_names;
     end						/* gtss_filact_funct02_ */;
