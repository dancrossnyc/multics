/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */
gtss_filact_funct18_: proc (mcp_val, high_val, gseg_val, arg_ptr_val, buffer_ptr_val, code);

/**	Derail FILACT function 18 (Get Current).

	All parameters are input parameters except code.

	code retuurned 0 => Successful.
	code returned 4 => GCOS err4 (see gtss_pnterr structure).
	code returned othr => multics error code.

   Authors: Robert J. Grimes	Created
   -	  Albert N. Kepner	  1978
   -	  Robert M. May
   -	  David B. Ward
   Change:  Dave Ward	02/24/79 $db debug switch.
   Change:  Bob Alvarado	08/08/79 reworked gcos_catalog proc.
   Change:  Dave Ward	08/31/79 ret status from ascii_file_name.
   Change:  Paul Benjamin     09/12/79 reinit deferred_catalog.nl to zero.
   Change:  Paul Benjamin	10/25/79 change status returned when expand_path says some directory non-existent
   Change:  Paul Benjamin	10/29/79 return "DSK" as device_name, and fill in some catalog information
   Change:  Paul Benjamin     11/05/79 Fix bug when doing cata when need both type1 and type 4 records
   Change:  Paul Benjamin	12/17/79 Interpret propagation acls.
**/
dcl  mcp_val                  ptr parm;
dcl  high_val                 bit(18)parm;
dcl  gseg_val                 ptr parm;
dcl  arg_ptr_val              ptr parm;
dcl  buffer_ptr_val           ptr parm;
dcl  code                     fixed bin(35)parm;
	mcp = mcp_val;
	high_b = high_val;
	high_i = fixed (high_b, 18);
	gseg = gseg_val;
	arg_ptr = arg_ptr_val;
	buffer_ptr = buffer_ptr_val;

	code = 0;					/* Successful. */

/**	Obtain get current catalog or file arglist. */
	if					/* (Get_Current_args.L_arglist < low_b) | */
	((fixed (Get_Current_args.L_arglist, 18) +1) > high_i) then do;
return_err4:   ;
	     code = 4;
	     return;
	end;
	arglist_ptr = addrel (gseg, Get_Current_args.L_arglist);

/**	Obtain return status.	**/
	call validate_status (Get_Current_arglist.L_status_return, status_ptr);

	if get_ascii_file_name (
	"0"b
	, Get_Current_arglist.L_cat_filedescr
	, addr (ascii_cat_file)
	, grc
	) then do;
could_not_get_current_file: ;
	     status_word.pd = get_faulty_cat_file_entry ();
	     status_word.status = grc;		/* Could not access file specified. */
	     return;
	end;

	call gtss_expand_pathname_ (
	     addr (ascii_cat_file)
	     , gtss_file_values.dname
	     , gtss_file_values.ename
	     , code
	     );
	if code ^= 0 then
	     goto could_not_get_current_file;

/**	Return catalog or file FMS description in caller's buffer. **/

	FMS_cat_ptr = addr (callers_buffer.W43_FSBFER);
	Get_Current_arglist.L_record = rel (FMS_cat_ptr);

	Get_Current_arglist.device_name = "246242"b3;	/* DSK */

	gtss_file_values.version = 1;

	call gtss_attributes_mgr_$get (addr (gtss_file_values), code);
	if code ^= 0 then do;
	     if code = error_table_$no_dir then grc = "400100"b3;
	     goto could_not_get_current_file;
	end;
	info_ptr = gtss_file_values.info_ptr;

	if gtss_file_values.catalog then call gcos_catalog;
	else call gcos_file;

	code = 0;
	status_word.status = "400000"b3;
	return;


store_temp_name: proc (c, n);

/**	Store name (n) in compact name list, of type (c).
**/
dcl  c                        bit(1)parm;
dcl  n                        char(*)parm;

	     deferred_catalog.cat = c;
	     deferred_catalog.rec_type = 2;		/* => FMS file description record (to result). */
	     deferred_catalog.nl = length (n);
	     deferred_catalog.ns = n;
	     deferred_catalog.next_nl = 0;		/* Marks end of list. */
	     def_cat_fill_len = def_cat_fill_len+1+divide (length (n)+3, 4, 17); /* Position to next name available. */
	     return;
	end					/* store_temp_name */;

gcos_catalog: proc;


/**	Accumulate the names of all Multics directories
	as GCOS catalog entries (store in temporary name list).
**/

/**	Initialize compact name list.	**/
	     def_cat_ptr = gtss_ext_$deferred_catalogs_ptr;
	     def_cat_fill_len = 0;
	     deferred_catalog.nl = 0;			/* make sure not to re-cycle old stuff */
	     name_info = empty ();
	     call hcs_$star_ (
		(rtrim (gtss_file_values.dname)||">"||gtss_file_values.ename)
		, "**"				/* All segments and directories. */
		, 3				/* Directories and segments (and links). */
		, addr (name_info)
		, entry_count
		, entry_ptr
		, n_ptr
		, code);
	     if code ^= 0 then do;
		if code = error_table_$nomatch then goto get_files;
star_failed:	;
		call com_err_ (
		     code
		     , "gtss_drl_filact_|function(18)"
		     , "dname=^a ename=^a"
		     , gtss_file_values.dname
		     , gtss_file_values.ename
		     );
		goto could_not_get_current_file;
	     end;

dcl  cat_file_string          bit(cfdl)aligned based;
dcl  cfdl                     fixed bin(35);

/**	Move caller's catalog/file description to the
	deferred catalog store.
**/
	     cfdl = 4*36*ascii_cat_file.nn;
	     deferred_catalog.cat_file_len = ascii_cat_file.nn;
	     addr (deferred_catalog.cat_file) -> cat_file_string =
		addrel (gseg, Get_Current_arglist.L_cat_filedescr) -> cat_file_string;

/**	Calculate total number of names. **/
	     total_names = 0;

get_files:
	     do i = 1 to entry_count;
		total_names = total_names+entries (i).nnames;
	     end;

/** locate gcos file  and catalog entries and store in temporary name list **/
/** this section should be re-written to use gtss_attributes_mgr_ because it is
    sloppy and because it could show a non-gcos msf as a catalog **/
	     do i = 1 to entry_count;
		if entries (i).nnames = 9 then do;	/* if added names not 9 don`t bother checking */
		     do k = entries (i).nindex to entries (i).nindex + entries (i).nnames;
			file_name = names (k);
			ll = search (reverse (file_name), "."); /* find first occurence of . */
			if ll = 0 then goto not_add_name;
			ll = length (file_name) - ll;
			file_name = substr (file_name, 1, ll); /* drop last two chars  */
			ll = search (reverse (file_name), "."); /* find next occurence of . */
			if ll = 0 then goto not_add_name;
			ll = length (file_name) - ll + 2;
			if substr (file_name, ll, 4) = "mode" then do;
			     file_name = substr (file_name, 1, ll-2); /* save name only */
			     call store_temp_name ("0"b, rtrim (file_name));
			     goto next_entry;
			end;			/* end file name entry */
not_add_name:
		     end;				/* end get file name */
		end;
/*  store entry if it is a directory */
		if entries (i).type = "10"b then
		     call store_temp_name ("1"b, rtrim (names (entries (i).nindex)));
next_entry:
	     end;

names_accumulated: ;

	     FSnTYP_0.bits00_05 = "00"b3;		/* => catalog. */
	     call gtss_ascii_bcd_ (
		addr (ascii_cat_file.name (ascii_cat_file.nn))
		, 12
		, addr (FS0_CNM_06_07)
		);
	     FS0_MOD_15 = BCD_date (branch.dtbm);

	     number_of_catalog_entries = 0;
	     cont_ptr = addr (FS0_CBK_04);		/* Location sector number of continuation record. */
	     last_sector_no = 0;

/**	Store names in type 0 record and for up to
	4 type 1 records as is necessary.
**/
	     def_cat_type_1_ptr = addrel (def_cat_ptr, size (deferred_catalog));
	     def_cat_fill_len = 0;
	     do while (deferred_catalog.nl>0);
		call catalog_entry (
		     deferred_catalog.cat
		     , deferred_catalog.ns
		     , rel (addr (deferred_catalog.type2_3))
		     );
		def_cat_fill_len = def_cat_fill_len+1+divide (deferred_catalog.nl+3, 4, 17); /* Next name. */
	     end;
catalog_finished: ;
	     FS0_ORG_10_11 = author (gtss_file_values.dname, gtss_file_values.ename);
	     call get_permissions (
		gtss_file_values.dname
		, gtss_file_values.ename
		, FS0_PER_17.bits00_11
		, FS0_PBK_05.bits00_17
		);
	     return;

catalog_entry: proc (c, n, dsn);

/**	Add name (n) to GCOS catalog record names list.
	Parameter (c)=1 => entry is a catalog | (c)=0 => entry is file.
	Parameter (dsn) is the deferred record sector number.
**/
dcl  c                        bit(1)parm;
dcl  n                        char(*)parm;
dcl  dsn                      bit(18)parm;
		number_of_catalog_entries = number_of_catalog_entries+1;
		if db_filact_funct18 then
		     call ioa_ ("^3i. ^1b ^a", number_of_catalog_entries, c, n);
		if number_of_catalog_entries <= hbound (FS0_VAR_22_76, 1) then do; /* Name for initial catalog record. */
		     FS0_VAR_22_76 (number_of_catalog_entries).FS0_SNM_00_01 = (12)"20"b3;
		     call gtss_ascii_bcd_ (
			addr (n)
			, min (length (n), 12)
			, addr (FS0_VAR_22_76 (number_of_catalog_entries).FS0_SNM_00_01)
			);
		     FS0_VAR_22_76 (number_of_catalog_entries).FS0_SPT_02.bit01 = c;
		     FS0_VAR_22_76 (number_of_catalog_entries).FS0_SPT_02.bits18_35 = dsn;
		end;
		else do;				/* Name for continuation catalog record. */
		     j = number_of_catalog_entries-hbound (FS0_VAR_22_76, 1)-1;
		     i = divide (j, hbound (FS1_VAR_06_76, 1), 17)+1; /* Current sector no. 0,1,... */
		     if i>4 then do;		/* Remaining names provided in deferred type 1 record. */
			cont_ptr -> bit18,		/* Link last type 1 record to 1st llink (deferred type 1 rec). */
			     FS0_NLL_01.bits00_17 = rel (def_cat_type_1_ptr); /* Link type 0 record to 1st llink. */
			def_cat_type_1.cat = "1"b;
			def_cat_type_1.zero = "0"b;
			def_cat_type_1.rec_type = 1;
			def_cat_type_1.sn = dsn;
			goto catalog_finished;
		     end;
		     j = mod (j, hbound (FS1_VAR_06_76, 1))+1; /*  Name index 1,2,...,19 */
		     if j = 1 then do;		/* Another catalog continuation record required. */
			Type_1_ptr = addrel (FMS_cat_ptr, size (Type_0_Catalog)+ ((i-1)*size (Type_1_Catalog)));
			cont_ptr -> bit18 = bit (fixed (i, 18)); /* Sector number (0,1,2,...). */
			cont_ptr = addr (FS1_CBK_04); /* Reset to continuation link. */
			FS1_PTP_03.bits00_17 = last_sector_no;
			last_sector_no = i;
			Type_1_ptr -> FSnTYP_0.bits00_05 = "01"b3; /* => catalog continuation. */
		     end;
		     FS1_VAR_06_76 (j).FS1_SNM_00_01 = (12)"20"b3;
		     call gtss_ascii_bcd_ (
			addr (n)
			, min (length (n), 12)
			, addr (FS1_VAR_06_76 (j).FS1_SNM_00_01)
			);
		     FS1_VAR_06_76 (j).FS1_SPT_02.bit01 = c;
		     FS1_VAR_06_76 (j).FS1_SPT_02.bits18_35 = dsn;
		end;
		return;

dcl  i                        fixed bin;
dcl  j                        fixed bin;
dcl  k                        fixed bin;
	     end					/* catalog_entry */;

dcl  file_name		char(32);
	end					/* gcos_catalog */;

gcos_file: proc;
	     FSnTYP_0.bits00_05 = "02"b3;		/* => file. */
	     call gtss_ascii_bcd_ (addr (ascii_cat_file.name (ascii_cat_file.nn)), 12, addr (FS2_FNM_06_07));
	     FS2_ORG_10_11 = author (gtss_file_values.dname, gtss_file_values.ename);
	     FS2_PWD_12_13 = (12)"20"b3;		/* Password is (BCD) blanks. */
	     call gtss_ascii_bcd_ (addr (gtss_file_values.creation_date), 6, addr (FS2_CDT_14));
	     FS2_MOD_15 = BCD_date (branch.dtbm);
	     call get_permissions (
		gtss_file_values.dname
		, gtss_file_values.ename
		, FS2_PER_17.bits00_11
		, FS2_PBK_05.bits00_17
		);
	     FS2_PER_17.bits18_35 = gfv.maxll18_35;
	     call gtss_ascii_bcd_ (addr (ascii_cat_file.name (1)), 12, addr (FS2_MTR_20_21));
	     FS2_FU1_22.bit01 = gtss_file_values.data_flags.mode_random;
	     FS2_FU1_22.bit04 = "1"b;			/* => Max. file size in llinks. */
	     FS2_FU1_22.bit05 = "0"b;			/* File on structured device (see VAR field). */
	     if gtss_file_values.attributes.attr ^= "0"b then do;
		FS2_FU1_22.bit08 = "1"b;
		FS2_FU1_22.bits12_17 = "64"b3;	/* => Disk. */
		FS2_USI_24.bits01_35 = gtss_file_values.attributes.attr;
	     end;
	     FS2_FU1_22.bits18_35 = gfv.noal18_35;	/* Number of allocations. */
	     FS2_FUS_23.bits30_35 = "05"b3;		/* Sectors in page. */
	     FS2_USI_24.bit00 = ^gtss_file_values.data_flags.null_file;
	     FS2_FU2_25.bit16 = "1"b;			/* Catalog or file on removable device. */
	     FS2_FU2_25.bits18_35 = millsec512 (branch.dtm);
	     FS2_LCD_26 = BCD_date (branch.dtm);
	     FS2_LAD_27 = BCD_date (branch.dtu);
	     FS2_VAR_44_75.Device_descriptor.bits00_03 = "0101"b; /* => device descriptor. */
	     FS2_VAR_44_75.Device_descriptor.bits06_35 = device_name (branch.device_id);
	     FS2_VAR_44_75.Space_descriptor.bit00 = "0"b; /* => Last space device. */
	     FS2_VAR_44_75.Space_descriptor.bit01 = "0"b; /* Differentiates space from device descriptor. */
	     FS2_VAR_44_75.Space_descriptor.bit02 = "0"b; /* Space is NOT defective. */
	     FS2_VAR_44_75.Space_descriptor.bits03_17 = gfv.curll21_35;
	     FS2_VAR_44_75.Space_descriptor.bits18_35 = "0"b; /* Starting llink number. */
	     return;
	end					/* gcos_file */;

device_name: proc (did)returns (bit (30));

/**	Convert Multics divice id to GCOS device name. **/
dcl  did                      bit(4)parm;
/**	Multics does not provide device type.
	     c5 = char (did);
	     call gtss_ascii_bcd_ (addr (c5), 5, addr (bcd5));
	     return (bcd5);
dcl  c5                       char(5);
dcl  bcd5                     bit(30);
**/
	     return ("2431624220"b3);			/* => "DISK " bcd */

	end					/* device_name */;

get_permissions: proc (dn, en, gp, sps);

/**	Obtain GCOS general permissions (gp) from
	Multics segment access for *.*.*.
	Obtain GCOS specific permissions as GCOS catalog
	type 4 (permissions) record from the
	Multics accesses set for particular projects, *.proj.*.
	Set (sps) to appropriate sector (of caller's return buffer catalog records)
	if there are specifiec permissions.
	Ignore all other Multics access.
**/
dcl  dn                       char(*)parm;
dcl  en                       char(*)parm;
dcl  gp                       bit(12)parm;
dcl  sps                      bit(18)parm;

	     acl_ptr = null ();
	     gp = "0"b;
	     sps = "0"b;
	     a = empty ();
	     if gtss_file_values.catalog then do;
		call hcs_$list_dir_acl (
		     dn
		     , en
		     , addr (a)
		     , acl_ptr
		     , null ()
		     , acl_count
		     , code
		     );
		if code ^= 0 then do;
		     call com_err_ (
			code
			, "gtss_drl_filact_|get_permissions",
			"""^a>^a""", dn, en);
		     return;
		end;
	     end;
	     else do;
		call hcs_$list_acl (
		     dn
		     , en
		     , addr (a)
		     , acl_ptr			/* Pointer to start of ACL list. */
		     , null ()			/* Not requesting particular access. */
		     , acl_count			/* Number of access entries on segment. */
		     , code
		     );
		if code ^= 0 then do;
		     if code = error_table_$dirseg then
			call hcs_$list_acl (
			rtrim (dn)||">"||en
			, "0"			/* Use msf 0 component. */
			, addr (a)
			, acl_ptr			/* Pointer to start of ACL list. */
			, null ()			/* Not requesting particular access. */
			, acl_count		/* Number of access entries on segment. */
			, code
			);
		     if code ^= 0 then do;
			call com_err_ (code
			     , "gtss_drl_filact_/get_permissions",
			     """^a>^a""", dn, en);
			return;
		     end;
		end;
	     end;
	     spx = 0;
	     do i = 1 to acl_count;
		if gtss_file_values.catalog then do;
		     if dir_acl.status_code (i) ^= 0 then do;
			call com_err_ (
			     dir_acl.status_code (i)
			     , "gtss_drl_filact_|get_permissions");
			goto next;
		     end;
		     n32 = dir_acl.access_name (i);
		end;
		else do;
		     if segment_acl.status_code (i) ^= 0 then do;
			call com_err_ (
			     segment_acl.status_code (i)
			     , "gtss_drl_filact_|get_permissions");
			goto next;
		     end;
		     n32 = segment_acl.access_name (i);
		end;
						/* Isolate Multics access person, project and tag names. */
		l1 = search (n32, ".");
		l2 = search (reverse (n32), ".");
		if (l1 = 0)| (l2 = 0) then do;
		     call com_err_ (0, "gtss_drl_filact_|get_permissions", "Bad name, ""^a""", n);
		     goto next;
		end;
		l3 = l2-verify (reverse (n32), " ");
		l2 = length (n32)-l2-l1;
		l1 = l1-1;

							/* Ignore lower case acls */
		if n.person = "*" & ^gtss_file_values.catalog & search(n.project,"qwertyuiopasdfghjklzxcvbnm") = 0 then do;
		     string (m) = segment_acl.modes (i);
		     if n.project = "*" then do;	/* => GCOS general permissions. */
			gp = m.read||m.write||"0"b||m.execute;
			goto next;
		     end;
		     spx = spx+1;
		     if spx<23 then do;
			if spx = 1 then do;		/* First specific permission. */
			     if Type_1_ptr = null () then var_ptr = FMS_cat_ptr;
			     else var_ptr = Type_1_ptr;
			     Type_4_ptr = addrel (var_ptr, size (Type_2_Catalog));
			     unspec (Type_4_Catalog) = "0"b;
			     Type_4_ptr -> FMS_catalog = FMS_catalog; /* First 5 words from file record. */
			     FS4_CBK_04 = "0"b;
			     Type_4_ptr -> FSnTYP_0.bits00_05 = "04"b3; /* => permissions. */
			     sps = bit ((fixed (rel (Type_4_ptr), 17, 0)-fixed (rel (FMS_cat_ptr), 17, 0))/64);
			     upp = addr (Type_4_Catalog.FS4_VAR_07_75); /* Pointer to 1st specific permissions name pair. */
			end;

			if mod (spx, 2) = 1 then do;	/* 1st of name pair. */
			     user_permission.n1 = (12)"20"b3; /* 12 bcd blanks. */
			     call gtss_ascii_bcd_ (
				addr (n.project)
				, min (12, l2)
				, addr (user_permission.n1)
				);
			     user_permission.n1p = m.read||m.write||"0"b||m.execute;
			end;
			else do;			/* 2nd of name pair */
			     user_permission.n2 = (12)"20"b3; /* 12 bcd blanks. */
			     call gtss_ascii_bcd_ (
				addr (n.project)
				, min (12, l2)
				, addr (user_permission.n2)
				);
			     user_permission.n2p = m.read||m.write||"0"b||m.execute;
			     upp = addr (user_permission.nxn); /* Next name pair. */
			end;

		     end;
		     else				/* Over 22 names. */
		     if spx = 23 then		/* Issue error message once. */
			call com_err_ (
			0
			, "gtss_drl_filact_|get_permissions"
			, "Exceeded 22 specific permissions, remainder ignored."
			);
		end;
		else if verify (n.person, "10") = 0 & gtss_file_values.catalog then do;
		     string (m) = dir_acl.dir_modes (i);
		     if n.tag ^= "g" then goto next;
		     if n.project = "*" then do;
			gp = bit (person); /* personid contains GCOS permissions. */
			goto next;
		     end;
		     spx = spx+1;
		     if spx<23 then do;
			if spx = 1 then do;		/* First specific permission. */
			     if Type_1_ptr = null () then var_ptr = FMS_cat_ptr;
			     else var_ptr = Type_1_ptr;
			     Type_4_ptr = addrel (var_ptr, size (Type_2_Catalog));
			     unspec (Type_4_Catalog) = "0"b;
			     Type_4_ptr -> FMS_catalog = FMS_catalog; /* First 5 words from file record. */
			     FS4_CBK_04 = "0"b;
			     Type_4_ptr -> FSnTYP_0.bits00_05 = "04"b3; /* => permissions. */
			     sps = bit ((fixed (rel (Type_4_ptr), 17, 0)-fixed (rel (FMS_cat_ptr), 17, 0))/64);
			     upp = addr (Type_4_Catalog.FS4_VAR_07_75); /* Pointer to 1st specific permissions name pair. */
			end;

			if mod (spx, 2) = 1 then do;	/* 1st of name pair. */
			     user_permission.n1 = (12)"20"b3; /* 12 bcd blanks. */
			     call gtss_ascii_bcd_ (
				addr (n.project)
				, min (12, l2)
				, addr (user_permission.n1)
				);
			     user_permission.n1p = bit (person);
			end;
			else do;			/* 2nd of name pair */
			     user_permission.n2 = (12)"20"b3; /* 12 bcd blanks. */
			     call gtss_ascii_bcd_ (
				addr (n.project)
				, min (12, l2)
				, addr (user_permission.n2)
				);
			     user_permission.n2p = bit (person);
			     upp = addr (user_permission.nxn); /* Next name pair. */
			end;

		     end;
		     else				/* Over 22 names. */
		     if spx = 23 then		/* Issue error message once. */
			call com_err_ (
			0
			, "gtss_drl_filact_|get_permissions"
			, "Exceeded 22 specific permissions, remainder ignored."
			);
		end;
next:		;
	     end;
	     return;

dcl  hcs_$list_acl            entry(char(*),char(*),ptr,ptr,ptr,fixed bin,fixed bin(35));
dcl  hcs_$list_dir_acl        entry(char(*),char(*),ptr,ptr,ptr,fixed bin,fixed bin(35));
dcl  upp                      ptr init(null());
dcl  i                        fixed bin;
dcl  spx                      fixed bin;
dcl  spe                      (100)fixed bin;
dcl  a                        area(261120)aligned based(gtss_ext_$hcs_work_area_ptr);
dcl  l1                       fixed bin;
dcl  l2                       fixed bin;
dcl  l3                       fixed bin;
dcl  n32                      char(32)aligned;

dcl  1 m aligned,
    2 read	bit(01)unal,
    2 execute	bit(01)unal,
    2 write	bit(01)unal,
    2 zero	bit(33)unal;

dcl  1 n aligned based(addr(n32)),
    2 person	char(l1)unal,
    2 period1	char(1)unal,
    2 project	char(l2)unal,
    2 period2	char(1)unal,
    2 tag		char(l3)unal;

dcl 1 user_permission aligned based(upp),
    2 n1	bit(72),
    2 n1p	bit(18)unal,
    2 n2p bit(18)unal,
    2 n2	bit(72),
    2 nxn	bit(36);
	end					/* get_permissions */;

millsec512: proc (d)returns (bit (18));

/**	Given the date (d) in Multics 36bit storage system time
	format calculate the number of milliseconds / 512
	since midnight (return value).
**/
dcl  d                        bit(36)parm;

	     cv = 0;
	     cv36 = d;

	     call datebin_$preceding_midnight (cv, mcv);
	     return (bit (divide (cv-mcv, 512000, 18)));

dcl  datebin_$preceding_midnight entry(fixed bin(71),fixed bin(71));
dcl  mcv                      fixed bin(71)	/* Preceding midnight clock value. */;
dcl  cv                       fixed bin(71)aligned	/* Multics clock value. */;

dcl 1 cv2 aligned based(addr(cv)),
    2 fill20	bit(20)unal,
    2 cv36	bit(36)unal,
    2 fill16	bit(16)unal;
	end					/* millsec512 */;

author:	proc (dn, en)returns (bit (72));

/**	Obtain file originator from Multics author value. **/
dcl  dn                       char(168)parm;
dcl  en                       char(032)parm;

	     call hcs_$get_author (
		dn
		, en
		, 1b				/* Chase link. */
		, a				/* Multics author (returned). */
		, code
		);
	     if code ^= 0 then
no_name:		r = "4046513127314521634651"b3;	/* "^ORIGINATOR"bcd */
	     else do;
		p1 = search (a, ".");
		if p1 = 0 then goto no_name;
		p2 = search (reverse (a), ".");
		if p2 = 0 then goto no_name;
		al = length (a)-p1-p2;
		if al<1 then goto no_name;
		call gtss_ascii_bcd_ (addr (ac (p1+1)), al, addr (r));
	     end;
	     return (r);

dcl  r                        bit(72)init((12)"20"b3);
dcl  p1                       fixed bin;
dcl  p2                       fixed bin;
dcl  ac                       (32)char(1)unal based(addr(a));
dcl  hcs_$get_author          entry(char(*),char(*),fixed bin(1),char(*),fixed bin(35));
dcl  a                        char(32);
dcl  al                       fixed bin;
	end					/* author */;

BCD_date:	proc (md)returns (bit (36));

/**	Convert Multics (36 bit) date value
	to GCOS bcd MMDDYY.
**/
dcl  md                       bit(36)parm;
	     call date_time_$fstime ((md), d24);
	     d6 = mm||dd||yy;
dcl  d24                      char(24);
dcl 1 d24_0vl based(addr(d24)),
    2 mm char(2),
    2 slash1 char(1),
    2 dd char(2),
    2 slash2 char(1),
    2 yy char(2);
dcl  d6                       char(6);
dcl  b36                      bit(36);
	     call gtss_ascii_bcd_ (addr (d6), 6, addr (b36));
	     return (b36);

dcl  date_time_$fstime        entry(bit(36)aligned, char(*));
	end					/* BCD_date */;

%include gtss_filact_intp1;

%include gtss_filact_intp2;

%include gtss_filact_intp3;

/** Declarations for gtss_drl_filact_:
     IDENTIFIER		ATTRIBUTES	**/
dcl  addr                     builtin;
dcl  addrel                   builtin;
dcl  arglist_ptr              ptr init(null());
dcl  arg_ptr                  ptr init(null());
dcl  bit                      builtin;
dcl  bit18                    bit(18)based;
dcl  bit72                    bit(72)aligned based;
dcl  cat_filedescr_name_offset bit(18);
dcl  cont_ptr                 ptr init(null());
dcl  descriptor_ptr           ptr init(null());
dcl  divide                   builtin;
dcl  empty                    builtin;
dcl  entry_count              fixed bin;
dcl  entry_ptr                ptr init(null());
dcl  error_table_$dirseg      fixed bin (35) ext;
dcl  error_table_$no_dir      fixed bin (35) ext;
dcl  error_table_$nomatch     fixed bin (35) ext;
dcl  fixed                    builtin;
dcl  grc			bit(18)init("400500"b3);
dcl  gseg                     ptr init(null());
dcl  gtss_fail                condition;
dcl  hbound                   builtin;
dcl  hcs_$star_               entry(char(*),char(*),fixed bin(2),ptr,fixed bin,ptr,ptr,fixed bin(35));
dcl  high_b                   bit(18)aligned;
dcl  high_i                   fixed bin(18)aligned;
dcl  i                        fixed bin(24);
dcl  ioa_                     entry options (variable);
dcl  k                        fixed bin(24);
dcl  last_sector_no           fixed bin;
dcl  length                   builtin;
dcl  ll			fixed bin(17);
dcl  low_b                    bit(18)aligned static int options(constant)init("000147"b3) /* 103 dec. */;
dcl  low_i                    fixed bin(18)aligned static int options(constant)init(103);
dcl  min                      builtin;
dcl  mod                      builtin;
dcl  names                    (total_names)char(32)aligned based(n_ptr);
dcl  name_info                area(261120)aligned based(gtss_ext_$hcs_work_area_ptr);
dcl  nic                      fixed bin(24);
dcl  null                     builtin;
dcl  number_of_catalog_entries fixed bin;
dcl  n_ptr                    ptr init(null());
dcl  rel                      builtin;
dcl  reverse                  builtin;
dcl  search                   builtin;
dcl  size                     builtin;
dcl  status_ptr               ptr init(null());
dcl  string                   builtin;
dcl  substr                   builtin;
dcl  rtrim		builtin;
dcl  total_names              fixed bin;
dcl  unspec                   builtin;
dcl  var_ptr		pointer;
dcl  verify                   builtin;

dcl 1 entries (entry_count)aligned based(entry_ptr),
    2 type	bit(2)unal,
    2 nnames	fixed bin(15)unal,
    2 nindex	fixed bin(17)unal;

dcl 1 gfv aligned based(addr(gtss_file_values.data_fields)),
    2 curll_val,
      3 curll00_20 bit(21)unal,
      3 curll21_35 bit(15)unal,
    2 maxll_val,
      3 maxll00_17 bit(18)unal,
      3 maxll18_35 bit(18)unal,
    2 nail_val,
      3 noal00_17  bit(18)unal,
      2 noal18_35 bit(18)unal;

dcl 1 status_word aligned based (status_ptr),
    2 status bit (18) unaligned,
    2 pd bit (18) unaligned,
    2 null_bit bit (1) unaligned,
    2 user_attributes bit (35) unaligned;

%include gtss_filact18_args;

%include gtss_ust_ext_;

%include gtss_ext_;

%include mc;

%include gtss_entry_dcls;

%include gtss_ascii_file_names;

%include gtss_file_values;

%include gtss_FMS_catalog;

/**	>ldd>include>status_info.incl.pl1	**/
%include status_info;

%include acls;

%include gtss_filact_options;

%include gtss_filact_status;

%include  gtss_deferred_catalog;

%include gse_ext_;

%include gtss_db_names;
     end						/* gtss_filact_funct18_ */;
