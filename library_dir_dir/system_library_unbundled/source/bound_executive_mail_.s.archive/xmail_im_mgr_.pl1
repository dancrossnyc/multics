/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-02-27,Blair), approve(86-02-27,MCR7358),
     audit(86-04-18,RBarstad), install(86-05-28,MR12.0-1062):
      85-04-15 JG Backs: Written from xforum_im_mgr.pl1
     
      85-04-17 JG Backs: Added a print_messages entry to allow for restoring
      original without printing messages in the case of restore_original
      being called during a cleanup condition.  Deleted the call to
      print_unseen_messages from restore_original entry.
     
      85-04-23 JG Backs: Cleanup code for standards.
  2) change(86-06-04,Blair), approve(86-07-15,MCR7447),
     audit(86-07-18,LJAdams), install(86-07-21,MR12.0-1100):
     Delete xim_defer_message structure, have defer_messages always set things
     up with the accept_messages structure and use dummy wakeup_handler entries
     to take advantage of message_facility_ changes which make processing
     faster.
  3) change(88-04-06,Blair), approve(88-05-02,MCR7882),
     audit(88-05-13,LJAdams), install(88-05-31,MR12.2-1050):
     Make the print_unseen_messages routine call xmail_area_$create to define
     the area that the msg_array structure will be placed in.
                                                   END HISTORY COMMENTS */

xmail_im_mgr: proc;

/*
   BEGIN DESCRIPTION

   function:
      This module manages interactive message handling for the Executive Mail
      subsystem.

   description of entry points:
      xmail_im_mgr: This entry point should never be called.

      init: This entry obtains a pointer to the msg_facility_mailbox structure
      to the users default mailbox (>udd>PROJECT_ID>PERSON_ID>PERSON_ID.mbx.
      It also records the message handling state of that mailbox and sets the 
      message handling states for the xmail message handling accept and
      defer states. This entry must be called before any other entry in this
      module. Note that if the original_wakeup_flags = "0"b it means that
      messages have never been accepted. There is a ring 1 restriction
      that prevents the wakeup_state_flags from being reset to "0"b once they
      have been set to something else. Because of this the original
      wakeup_state_flags will be changed to "72"b3 (defer messages) if they
      are "0"b

      accept_messages: This entry changes the message handling state of the
      users default mailbox to the Executive Mail accept messages state.
      This state looks like the system standard accept message state except
      that all messages are held. It will also print out all unseen messages
      by calling the print_unseen_messages procedure.

      defer_messages: This entry changes the message handling state to the
      Executive Mail defer messages state. This state looks like the system
      standard defer message state.

      restore_original: This entry will change the message handling
      state to the state it was in before the call to the init entry.
      If not a cleanup condition, a call to the print_messages entrypoint
      should be made before calling this entrypoint.

      print_messages: This entry will print out all unseen messages by
      calling the print_unseen_messages procedure.

   description of internal procedures:
      set_message_facility_data: Given a structure that defines a message
      handling state this procedure calls the appropriate message_facility
      entry points to set that state.

      print_unseen_messages: This procedure causes all unseen messages to be
      printed over user_io. It then marks those messages as printed. In the
      event of an error while printing a message an error message is output and
      printing of other unseen messages is aborted.  This procedure uses
      the message_facility entrypoints.

      print_error: This procedure will print an error message explaining that
      an error occurred while printing messages and that the messages may be
      read after Xmail is exited. A timer puts the process to sleep for 4
      seconds so that the message may be read.
      
      error: This procedure will call xmail_error_ with "quit" action after 
      logging the error.  It will be called if an error is returned from one
      of the message_facility_ calls. It will also be called if the main
      entry point xmail_im_mgr$xmail_im_mgr is called.

   known bugs:

   notes:

   END DESCRIPTION
*/

/* PARAMETERS */

/* EXTERNAL STATIC */

	dcl     iox_$user_io	 ptr ext static;

/* ENTRIES */

	dcl     ioa_		 entry () options (variable);
	dcl     message_facility_$get_alarm_handler entry (ptr, entry, ptr, fixed bin (71), fixed bin (35));
	dcl     message_facility_$get_message_format entry (ptr, bit (1) aligned, fixed bin (35));
	dcl     message_facility_$get_msg_array_ptr entry (ptr, ptr, ptr, fixed bin, fixed bin (35));
	dcl     message_facility_$get_msgf_mbx_ptr entry (char (*), char (*), ptr, fixed bin (35));
	dcl     message_facility_$get_prefix entry (ptr, char (32) var, bit (1) aligned, fixed bin (35));
	dcl     message_facility_$get_wakeup_handler entry (ptr, entry, ptr, fixed bin (35));
	dcl     message_facility_$get_wakeup_state entry (ptr, bit (*), fixed bin (35));
	dcl     message_facility_$print_message entry (ptr, ptr, bit (72) aligned, ptr, fixed bin (35));
	dcl     message_facility_$set_alarm_handler entry (ptr, entry, ptr, fixed bin (71), fixed bin (35));
	dcl     message_facility_$set_message_format entry (ptr, bit (1) aligned, fixed bin (35));
	dcl     message_facility_$set_prefix entry (ptr, char (32) var, bit (1) aligned, fixed bin (35));
	dcl     message_facility_$set_seen_switch entry (ptr, bit (72) aligned, bit (*), fixed bin (35));
	dcl     message_facility_$set_wakeup_handler entry (ptr, entry, ptr, fixed bin (35));
	dcl     message_facility_$set_wakeup_state entry (ptr, bit (*), fixed bin (35));
	dcl     xmail_im_mgr_$dummy    entry ();
	dcl     timer_manager_$sleep	 entry (fixed bin (71), bit (2));
	dcl     user_info_		 entry (char (*), char (*), char (*));

/* CONDITIONS */

/* INTERNAL AUTOMATIC */

/* INTERNAL STATIC */

	dcl     first_time             bit (1) aligned init ("1"b) internal static;
          dcl     pum_work_area_ptr      ptr;
	dcl     (
	        xim_msg_facility_mbx_ptr ptr,
	        01 xim_accept_messages like message_facility_data,
	        01 xim_original	 like message_facility_data
	        )			 internal static;

/* CONSTANTS */

	dcl     NAME                   char (13) init ("xmail_im_mgr_") internal static options (constant);
	dcl     QUIT                   char (1) init ("q") internal static options (constant);
	dcl     xim_512_SPACES	 char (512) init (" ") internal static options (constant);

/* BUILTINS */

	dcl     (addr, null, rtrim, substr) builtin;

/* BASED */

	dcl     01 message_facility_data based,
		02 wakeup_state_flags bit (36),
		02 prefix_string	 char (32) varying,
		02 short_prefix	 bit (1) aligned,
		02 short_format	 bit (1) aligned,
		02 alarm_entry	 entry,
		02 alarm_info_ptr	 ptr,
		02 alarm_time	 fixed bin (71),
		02 wakeup_entry	 entry,
		02 wakeup_info_ptr	 ptr;


/* INCLUDE FILES */

%include msg_array;
%page;
%include msg_print_flags;

/* BEGIN */

	call error (0, "Program logic error, main entry point in xmail_im_mgr called.");

/* ENTRYPOINTS */

init: entry ();

/* AUTOMATIC */

	dcl     i_code		 fixed bin (35);
	dcl     i_dir		 char (168) varying;
	dcl     i_entry		 char (32);
	dcl     i_user_name		 char (32);
	dcl     i_user_project	 char (32);
	dcl     i_unused_c32	 char (32);

/* BEGIN */

	call user_info_ (i_user_name, i_user_project, i_unused_c32);
	i_dir = ">udd>" || rtrim (i_user_project);
	i_dir = i_dir || ">";
	i_dir = i_dir || rtrim (i_user_name);
	i_entry = rtrim (i_user_name) || ".mbx";

	call message_facility_$get_msgf_mbx_ptr ((i_dir), i_entry, xim_msg_facility_mbx_ptr, i_code);
	if i_code ^= 0
	then call error (i_code, "Could not get msg facility mbx ptr.");

	call message_facility_$get_wakeup_state (xim_msg_facility_mbx_ptr, xim_original.wakeup_state_flags, i_code);
	if i_code ^= 0
	then call error (i_code, "Could not get original wakeup state.");

	call message_facility_$get_prefix (xim_msg_facility_mbx_ptr,
	     xim_original.prefix_string, xim_original.short_prefix, i_code);
	if i_code ^= 0
	then call error (i_code, "Could not get original msg prefix information.");

	call message_facility_$get_message_format (xim_msg_facility_mbx_ptr, xim_original.short_format, i_code);
	if i_code ^= 0
	then call error (i_code, "Could not get original short format flag.");

	call message_facility_$get_alarm_handler (xim_msg_facility_mbx_ptr,
	     xim_original.alarm_entry, xim_original.alarm_info_ptr, xim_original.alarm_time, i_code);
	if i_code ^= 0
	then call error (i_code, "Could not get original alarm handler information.");

	call message_facility_$get_wakeup_handler (xim_msg_facility_mbx_ptr,
	     xim_original.wakeup_entry, xim_original.wakeup_info_ptr, i_code);
	if i_code ^= 0
	then call error (i_code, "Could not get original wakeup handler information.");

	if xim_original.wakeup_state_flags = "0"b
	then xim_original.wakeup_state_flags = "72"b3;

	xim_accept_messages.wakeup_state_flags = "74"b3;
	xim_accept_messages.prefix_string = "";
	xim_accept_messages.short_prefix = "0"b;
	xim_accept_messages.short_format = "0"b;
	xim_accept_messages.alarm_entry = xmail_im_mgr_$dummy;
	xim_accept_messages.alarm_info_ptr = null ();
	xim_accept_messages.alarm_time = 0;
	xim_accept_messages.wakeup_entry = xmail_im_mgr_$dummy;
	xim_accept_messages.wakeup_info_ptr = addr (xim_512_SPACES);

/* in case state changed during multics mode */
	if ^first_time 
	then if substr(xim_original.wakeup_state_flags,4,2) = "10"b
	     then xim_accept_messages.wakeup_state_flags = xim_original.wakeup_state_flags;
	     else xim_accept_messages.wakeup_state_flags = "74"b3;
	return;

accept_messages: entry ();

	if first_time then do;
	     xim_accept_messages.wakeup_state_flags = "74"b3;
	     first_time = "0"b;
	     end;
	else if substr(xim_original.wakeup_state_flags,4,2) = "01"b
	     then xim_accept_messages.wakeup_state_flags = "74"b3;
	     else xim_accept_messages.wakeup_state_flags = xim_original.wakeup_state_flags;
	call set_message_facility_data (xim_accept_messages);
	call print_unseen_messages;

	return;

dummy: entry ();
	return;

defer_messages: entry ();

	call set_message_facility_data (xim_accept_messages);

	return;

print_messages: entry ();

	call print_unseen_messages;

	return;

restore_original: entry ();

	call set_message_facility_data (xim_original);

	return;

/* INTERNAL PROCEDURES */

set_message_facility_data: proc (smfd_message_facility_data);

/* PARAMETERS */

	dcl     01 smfd_message_facility_data like message_facility_data;

/* AUTOMATIC */

	dcl     smfd_code		 fixed bin (35);

/* BEGIN */

	call message_facility_$set_wakeup_state (xim_msg_facility_mbx_ptr,
	     smfd_message_facility_data.wakeup_state_flags, smfd_code);
	if smfd_code ^= 0
	then call error (smfd_code, "Could not set xmail accept wakeup state.");

	call message_facility_$set_prefix (xim_msg_facility_mbx_ptr,
	     smfd_message_facility_data.prefix_string, smfd_message_facility_data.short_prefix, smfd_code);
	if smfd_code ^= 0
	then call error (smfd_code, "Could not set xmail accept msg prefix information.");

	call message_facility_$set_message_format (xim_msg_facility_mbx_ptr,
	     smfd_message_facility_data.short_format, smfd_code);
	if smfd_code ^= 0
	then call error (smfd_code, "Could not set xmail accept short format flag.");

	call message_facility_$set_alarm_handler (xim_msg_facility_mbx_ptr,
	     smfd_message_facility_data.alarm_entry, smfd_message_facility_data.alarm_info_ptr,
	     smfd_message_facility_data.alarm_time, smfd_code);
	if smfd_code ^= 0
	then call error (smfd_code, "Could not set xmail accept alarm handler information.");

	call message_facility_$set_wakeup_handler (xim_msg_facility_mbx_ptr,
	     smfd_message_facility_data.wakeup_entry, smfd_message_facility_data.wakeup_info_ptr, smfd_code);
	if smfd_code ^= 0
	then call error (smfd_code, "Could not set xmail accept wakeup handler information.");

	return;

     end set_message_facility_data;

print_unseen_messages: proc;

/* AUTOMATIC */

	dcl     pum_code		 fixed bin (35);
	dcl     pum_i		 fixed bin;
	dcl     pum_work_area_ptr      ptr;
	dcl     01 pum_msg_print_flags like msg_print_flags;
          dcl     cleanup                condition;

          dcl     get_temp_segment_      entry (char(*), ptr, fixed bin(35));
          dcl     xmail_area_$create     entry (ptr, fixed bin(35));

/* BEGIN */

	pum_work_area_ptr = null;
	on cleanup begin;
	     call CLEANUP;
	     end;

	call get_temp_segment_ (NAME, pum_work_area_ptr, pum_code);
	call xmail_area_$create (pum_work_area_ptr, pum_code); 
	if pum_code ^= 0 
	then do;
	     call print_error;
	     goto exit_print_unseen_messages;
	     end;
	call message_facility_$get_msg_array_ptr (xim_msg_facility_mbx_ptr,
	     pum_work_area_ptr, msg_array_ptr, n_messages, pum_code);
	if pum_code ^= 0
	then do;
	     call print_error;
	     goto exit_print_unseen_messages;
	end;

	pum_msg_print_flags.print_prefix = "1"b;
	pum_msg_print_flags.print_ename = "0"b;
	pum_msg_print_flags.print_sender = "1"b;
	pum_msg_print_flags.print_date_and_time = "1"b;
	pum_msg_print_flags.print_time = "0"b;
	pum_msg_print_flags.print_last_message = "0"b;
	pum_msg_print_flags.mbz = "0"b;

	do pum_i = 1 to n_messages;
	     if ^msg_array (pum_i).printed
	     then do;
		call message_facility_$print_message (xim_msg_facility_mbx_ptr, iox_$user_io,
		     msg_array (pum_i).message_id, addr (pum_msg_print_flags), pum_code);
		if pum_code ^= 0
		then do;
		     call print_error;
		     goto exit_print_unseen_messages;
		end;
		call message_facility_$set_seen_switch (xim_msg_facility_mbx_ptr,
		     msg_array (pum_i).message_id, DELETE_UNHELD, pum_code);
		if pum_code ^= 0
		then do;
		     call print_error;
		     goto exit_print_unseen_messages;
		end;
	     end;
	end;
          
          call CLEANUP;

exit_print_unseen_messages:
	return;

     end print_unseen_messages;

print_error: proc;

	call ioa_ ("An error has occured while trying to print newly arrived messages." ||
	     "^/You may print these messages after exiting Executive Mail with^/the ""print_messages -new"" command.");
	call timer_manager_$sleep (4, "11"b);

	return;

     end print_error;

error: proc (e_code, e_message);

/* PARAMETERS */

	dcl     e_code		 fixed bin (35);
	dcl     e_message		 char (*);

/* ENTRIES */

          dcl     xmail_error_$code_first entry () options (variable);

/* BEGIN */

	call xmail_error_$code_first (e_code, NAME, QUIT, e_message);

     end error;

CLEANUP:  proc;

          dcl code                  fixed bin (35);
          dcl release_temp_segment_ entry (char(*), ptr, fixed bin(35));

	if pum_work_area_ptr ^= null
          then call release_temp_segment_ (NAME, pum_work_area_ptr, code);

    end CLEANUP;

    end xmail_im_mgr;
