/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-02-03,Blair), approve(86-02-26,MCR7358),
     audit(86-04-21,RBarstad), install(86-05-28,MR12.0-1062):
     85-01-18 JG Backs: Replaced call to SELECT_NEW_FILE at OPT (6) with a call
     to xmail_select_file_$caller_msg to eliminate opening the mailbox before
     renaming it.  Opening is not necessary and wastes time if a large file.
     Choosing this option will close the previous mailbox but only after the
     file to be renamed is accepted.
     85-04-22 JG Backs: Modified SELECT_NEW_FILE proc, adding call to ioa_ to
     display a message to user that the file is being worked on.  If the file
     is large, opening will take some time and the user should know something
     is happening.
     85-04-22 JG Backs: Deleted the P_default_file parameter from this module
     which was not being used.  Also modified xmail_Executive_Mail_.pl1 to
     call this module without a parameter, since it was only passing a null
     string and it is the only module to call this one.  Trimmed the suffix
     from star_names before listing the mail files and increasing the size
     of the space by one for each file.  This was a bug where there was no
     space between files names if a file of max size (25 char) was listed in
     the first column.
  2) change(86-02-03,Blair), approve(86-02-26,MCR7358),
     audit(86-04-21,RBarstad), install(86-05-28,MR12.0-1062):
     Free the star_entry structures and comment out an unnecessary call to
     select_msgs_$all so that there aren't a lot of things hanging around
     in the process_dir (with no way to get to them) which got allocated
     when various options were looped through in succession.  Error_list
     entry 116.
  3) change(87-01-19,Blair), approve(87-02-05,MCR7618),
     audit(87-04-10,RBarstad), install(87-04-26,MR12.1-1025):
     Add code to allow the user to discriminate between interactive and
     ordinary messages when listing them, but always select all and don't give
     him a choice if he is emptying, discarding or archiving his mailfile.
  4) change(87-01-21,Blair), approve(87-02-05,MCR7618),
     audit(87-04-10,RBarstad), install(87-04-26,MR12.1-1025):
     Check the width of the window to figure out how many columns are needed
     when we print a list of mail files.  Error_list #121.
                                                   END HISTORY COMMENTS */


xmail_Mail_File_Maint_: proc ;

/* BEGIN DESCRIPTION

history:
   Written by R. Ignagni Nov 1981 

   82-12-10 Schimke: Changed the code to use star_names (nindex(idx))
   rather than star_names (idx) so addnames on mail files don't cause errors
   when listing mail files. Also changed loop boundary from star_entry_count
   to sum(star_entries(*).nnames) so addnames can be used to delete the files.
   TRs: 13951, 13793, 13958, 12803

   83-06-27  DJ Schimke: Modified to use new mail_system calls and version 2
   mailboxes.

   83-10-12  DJ Schimke: Replaced call to xmail_archive_msgs_ by a call to the
   enhanced xmail_file_msgs_$current_msgs_. The only user-visible change is in
   the error messages which will say "file" rather than "archive". 

   83-11-01  DJ Schimke: Changed the calling sequence of xmail_select_file_.

   84-04-13  DJ Schimke: Deleted the call to mail_system_$get_message_count
   before opening a new mail file to allow opening of a mailbox without status
   permission to the mailbox. The message count obtained here wasn't even used.
   The opening mode was also changed to ACCESSIBLE_MESSAGES rather than
   ALL_MESSAGES. This allows reading of any mailbox that you have at least
   "o" or "r" access to. 

   84-07-03  DJ Schimke: Modified the call to xmail_create_menu_ to add the
   N_COLUMNS parameter for three-column menu format. 

   84-08-29  JG Backs: Modified SELECT_NEW_FILE proc to test for 0 messages
   in a new file immediately after opening mailbox.  If there are no messages,
   the file is closed and not displayed.  This prevents a fatal error if the
   user tries to retrieve deleted messages from someone elses mailbox when
   there are no accessible messages.


END DESCRIPTION   
*/

/* CONSTANTS */

	dcl     OPTION_NAMES	 int static options (constant) init (
				 "List Files",
				 "Create",
				 "Archive",
				 "Print",
				 "Empty",
				 "Rename",
				 "List Messages",
				 "Discard File",
				 "Retrieve Messages"
				 ) dim (9) char (20) var;

	dcl     ALLOW_NEW		 bit (1) aligned init ("1"b) int static options (constant);
	dcl     ALLOW_OLD		 bit (1) aligned init ("1"b) int static options (constant);
	dcl     DONT_ALLOW_NEW	 bit (1) aligned init ("0"b) int static options (constant);
	dcl     DONT_ALLOW_OLD	 bit (1) aligned init ("0"b) int static options (constant);
	dcl     FULL_MFILE_SUFFIX	 char (7) init (".sv.mbx") int static options (constant);
	dcl     MFILE_SUFFIX	 char (6) init ("sv.mbx") int static options (constant);
          dcl     MSGS_AS_MAIL           char (15) int static options (constant) init ("msgs_as_mail_yn");
	dcl     NAME		 char (22) init ("xmail_Mail_File_Maint_") int static options (constant);
	dcl     NL		 init ("
")				 char (1) int static options (constant);
	dcl     NO_FILE_MSG		 char (23) init ("You have no mail files.") int static options (constant);
	dcl     NO_SELECTION	 bit (1) aligned init ("0"b) int static options (constant);
	dcl     N_COLUMNS		 fixed bin int static options (constant) init (3);
	dcl     TITLE		 char (19) init (" Review Mail Files ") int static options (constant);

/* AUTOMATIC */

	dcl     choice		 fixed bin;
	dcl     code		 fixed bin (35);
	dcl     default_file	 char (24) varying;
	dcl     dir		 char (168);
	dcl     display_needed	 bit (1) aligned;
	dcl     file		 char (32) varying;
	dcl     file_indicator	 char (32) var;
	dcl     file_info		 char (256) var;
	dcl     file_is_empty	 bit (1);
	dcl     last_file_used	 char (24) varying;
	dcl     last_opt		 fixed bin;
	dcl     multiple_msgs	 bit (1) aligned;
	dcl     new_dir		 char (168);
	dcl     new_file		 char (32) varying;
	dcl     pos_line		 char (256);
	dcl     position		 char (256) var;
          dcl     response               char (3)varying;
          dcl     treat_msgs_as_mail     bit (1) aligned;
	dcl     unused_bit		 bit (1) aligned;
	dcl     unused_bit2		 bit (1) aligned;
          dcl     yes_sw                 bit (1) aligned;
	dcl     1 auto_open_options	 like open_options;
	dcl     1 auto_close_options	 like close_options;

/* BUILTINS */

	dcl     (addr, before, char, divide, ltrim, null, rtrim, substr, sum, translate, trunc) builtin;

/* CONDITIONS */

	dcl     (cleanup, quit, program_interrupt, xmail_redisplay_menu) condition;

/* ENTRIES */

	dcl     get_system_free_area_	 entry () returns (ptr);
	dcl     hcs_$star_		 entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35));
	dcl     ioa_		 entry options (variable);
	dcl     ioa_$nnl		 entry () options (variable);
	dcl     ioa_$rsnnl		 entry options (variable);
	dcl     mail_system_$close_mailbox entry (ptr, ptr, fixed bin (35));
	dcl     mail_system_$open_mailbox entry (char (*), char (*), ptr, char (8), ptr, fixed bin (35));
	dcl     mailbox_$chname_file	 entry (char (*), char (*), char (*), char (*), fixed bin (35));
          dcl     xmail_error_$code_first entry() options(variable);
	dcl     xmail_error_$code_last entry () options (variable);
	dcl     xmail_error_$no_code	 entry () options (variable);
	dcl     xmail_error_$no_print	 entry () options (variable);
	dcl     xmail_get_choice_	 entry (ptr, char (*), char (*), char (*), char (*), bit (1) aligned, char (*), fixed bin, fixed bin (35));
          dcl     xmail_get_str_$yes_no entry (char(*) var, bit(1) aligned);
	dcl     xmail_select_file_$caller_msg entry (char (*), char (*), char (*), bit (1) aligned, bit (1) aligned,
				 char (168), char (32) var, char (*), bit (1) aligned, bit (1) aligned, fixed bin (35));
	dcl     xmail_select_msgs_$all entry (ptr, ptr, char (*));
	dcl     xmail_create_menu_	 entry (char (*), (*) char (*) var, fixed bin, ptr, fixed bin (35));
          dcl     xmail_value_$get_with_default entry (char(*), char(*) var, char(*) var, fixed bin(35));
		    	   

/* EXTERNAL STATIC */

	dcl     error_table_$moderr	 fixed bin (35) ext static;
	dcl     iox_$user_output	 ptr external static;
	dcl     xmail_err_$exit_now	 ext static fixed bin (35);
	dcl     xmail_err_$help_requested ext static fixed bin (35);

/* INTERNAL STATIC */

	dcl     menup		 int static ptr init (null);

/* INCLUDE FILES */

%include star_structures;
%page;
%include xmail_windows;
%page;
%include menu_dcls;
%page;
%include xmail_data;
%page;
%include window_dcls;
%page;
%include mlsys_open_options;
%page;
%include mlsys_close_options;
%page;
%include mlsys_mailbox;
%page;
%include mlsys_message;
%page;
%include xmail_curr_msg_info;
%page;
%include xmail_responses;

/* BEGIN */

	on condition (xmail_redisplay_menu) begin;
		if menup ^= null
		then call menu_$display (xmail_windows.menu.iocb, menup, code);
		if code ^= 0 then call xmail_error_$no_code (code, NAME, "l", "Unable to display menu. This is an internal programming error.");
	     end;

	menup = null ();
	last_opt = 0;
	default_file = "";
	mailbox_ptr = null;
	curr_msgsp = null;
	file_info = " ";
	position = " ";
	file = "";
	star_names_ptr = null ();
	star_entry_ptr = null ();

	on condition (cleanup) begin;
		call CLEAN_UP ();
	     end;

	if menup = null then do;
		call xmail_create_menu_ (TITLE, OPTION_NAMES, N_COLUMNS, menup, code);
		if code ^= 0 then call xmail_error_$no_code (code, NAME, "q", "Unable to get menu. This is an internal programming error.");
	     end;

	on condition (program_interrupt) go to START;
	on condition (quit)
	     begin;
		dcl     xmail_window_manager_$reconnect entry ();
		call xmail_window_manager_$reconnect ();
		go to START;
	     end;

START:	display_needed = "1"b;

	do while ("1"b);

	     if star_names_ptr ^= null () then free star_names;/* order is important */
	     if star_entry_ptr ^= null () then free star_entries;
	     star_entry_ptr, star_names_ptr = null;
	     call hcs_$star_ ((xmail_data.mail_dir), "**" || FULL_MFILE_SUFFIX, star_ALL_ENTRIES, get_system_free_area_ (), star_entry_count, star_entry_ptr, star_names_ptr, (0));

	     if mailbox_ptr = null ()
	     then do;
		     file_indicator = " ";
		     file_info = " ";
		     go to skipit;
		end;

	     call ioa_$rsnnl ("Total messages: ^d", file_info, (0), mailbox.n_messages - mailbox.n_deleted_messages);
	     if (mailbox.n_messages - mailbox.n_deleted_messages) > 0 then
		file_is_empty = "0"b;
	     else file_is_empty = "1"b;
	     if curr_msgsp ^= null     
	     then if curr_msgs.count > 1 then multiple_msgs = "1"b;
		else multiple_msgs = "0"b;
	     file_indicator = "File: " || file;
skipit:	     position = " ";
	     call xmail_get_choice_ (menup,
		(file_indicator),
		(file_info),
		(position),
		xmail_data.normal_usage,
		display_needed,
		"",
		choice,
		code);
	     display_needed = "0"b;
	     if code = 0 then call PERFORM_OPTION (choice, display_needed);
	     else if code = xmail_err_$help_requested then call EXPLAIN_OPTION (choice);
	     else if code = xmail_err_$exit_now
	     then go to EXIT;
	     else do;
		     call window_$bell (iox_$user_output, code);
		     if code ^= 0 then call xmail_error_$no_print (code, NAME, "l", "Cannot ring terminal bell. This is an internal programming error.");
		end;
	end;

EXIT:	call CLEAN_UP ();
	return;
%page;

/* INTERNAL PROCEDURES */

PERFORM_OPTION: proc (opt, redisplay);

/* Auto */

	dcl     discarded		 bit (1) aligned;
	dcl     entry_is_link	 bit (1);
	dcl     i			 fixed bin;
	dcl     idx		 fixed bin;
	dcl     mbx_name		 char (32);
	dcl     msg_pointer		 ptr;
	dcl     opt		 fixed bin;
	dcl     redisplay		 bit (1) aligned;

/* Entries */

	dcl     mlsys_utils_$create_mailbox entry (char (*), char (*), fixed bin (35));
	dcl     xmail_delete_msgs_	 entry (ptr, ptr, char (*), char (*));
	dcl     xmail_discard_file_	 entry (ptr, ptr, char (*), bit (1) aligned);
	dcl     xmail_discard_file_$link entry (ptr, ptr, char (*), bit (1) aligned);
	dcl     xmail_dprint_msgs_	 entry (ptr, ptr);
	dcl     xmail_file_msgs_$current_msgs entry (ptr, ptr, char (32) var, bit (1) aligned);
	dcl     xmail_list_msgs_	 entry (ptr, ptr, ptr);
	dcl     xmail_undelete_msgs_	 entry (ptr, ptr, char (*), char (*));



/* BEGIN PERFORM OPTION */

	call window_$clear_window (iox_$user_output, code);

	if code ^= 0 then call xmail_error_$no_print (code, NAME, "l", "Cannot clear user_io window. This is an internal programming error.");


	entry_is_link = "0"b;

	if opt = last_opt then last_file_used = "";
	else last_file_used = default_file;
	go to OPT (opt);

OPT (1):						/* List mail files option */

	if star_entry_count = 0
	then do;
		call ioa_ ("^a", NO_FILE_MSG);
		return;
	     end;

	call ioa_ ("You have ^d mail files:", star_entry_count);

	begin;
	     dcl	   mail_file_list	      char (star_entry_count * 27);
	     dcl	   char_count	      fixed bin;
	     dcl     no_columns             fixed bin;

	     mail_file_list = "";
	     char_count = 0;
/* How many columns will fit across our line width? */
	     no_columns = trunc(divide(xmail_windows.bottom.extent.width,26,2));
	     	     
	     do i = 1 to star_entry_count;                /* strip off suffix */
		star_names (star_entries.nindex (i)) = rtrim (before (star_names (star_entries.nindex (i)), FULL_MFILE_SUFFIX));
	     end;

	     do i = 1 by no_columns to star_entry_count;          /* put a newline char in front of each set of 3 files */

		star_names (star_entries.nindex (i)) = NL || substr (star_names (star_entries.nindex (i)), 1, 31);
	     end;

	     do i = 1 to star_entry_count;

		mail_file_list = substr (mail_file_list, 1, char_count) || (star_names (star_entries.nindex (i)));

		char_count = char_count + 27;
	     end;					/* end of do loop */
	     call ioa_ ("^a", mail_file_list);
	end;					/* end of begin block */
	return;



OPT (2):						/* Create mail file option */
	call xmail_select_file_$caller_msg ("mail file", MFILE_SUFFIX, "", DONT_ALLOW_OLD, ALLOW_NEW, new_dir, new_file, "Enter name of mail file you wish to create", unused_bit, unused_bit2, code);
	if code ^= 0
	then do;
		call ioa_ ("Unable to create mail file. This is an internal programming error.");
		return;
	     end;
	mbx_name = rtrim (new_file) || FULL_MFILE_SUFFIX;
	call mlsys_utils_$create_mailbox (new_dir, mbx_name, code);
	if code = 0
	then call ioa_ ("Mail file ""^a"" created.", new_file);
	else call ioa_ ("Unable to create mail file ""^a"".^/This is an internal programming error.", new_file);
	return;

OPT (3):						/*  Archive file option */

	if star_entry_count = 0
	then do;
		call ioa_ (NO_FILE_MSG);
		return;
	     end;
	if default_file = "xmail_archive" | file_is_empty then call SELECT_NEW_FILE ("archive", "");
	else call SELECT_NEW_FILE ("archive", (last_file_used));
	last_opt = opt;
	if file = "xmail_archive"
	then do;
		call ioa_ ("Sorry, but you cannot archive your archive file.");
		return;
	     end;

	if file_is_empty
	then do;
		call ioa_ ("Mail file ""^a"" is empty.", file);
		return;
	     end;
	call xmail_file_msgs_$current_msgs (mailbox_ptr, curr_msgsp, "xmail_archive", NO_SELECTION);
	call xmail_delete_msgs_ (mailbox_ptr, curr_msgsp, pos_line, (file));
	file_is_empty = "1"b;
	return;

OPT (4):						/* Print all messages option */

	if star_entry_count = 0
	then do;
		call ioa_ (NO_FILE_MSG);
		return;
	     end;

	if file_is_empty then last_file_used = "";
	call SELECT_NEW_FILE ("print", (last_file_used));
	last_opt = opt;
	if file_is_empty
	then do;
		call ioa_ ("Mail file ""^a"" is empty.", file);
		return;
	     end;
	call xmail_dprint_msgs_ (mailbox_ptr, curr_msgsp);
	return;


OPT (5):						/* Empty File Option */

	if star_entry_count = 0
	then do;
		call ioa_ (NO_FILE_MSG);
		return;
	     end;

	if file_is_empty then last_file_used = "";
	call SELECT_NEW_FILE ("empty", (last_file_used));
	last_opt = opt;
	if file_is_empty
	then do;
		call ioa_ ("Mail file ""^a"" is already empty.", file);
		return;
	     end;
	call xmail_select_msgs_$all (mailbox_ptr, curr_msgsp, pos_line);
	call xmail_delete_msgs_ (mailbox_ptr, curr_msgsp, pos_line, (file));
	file_is_empty = "1"b;
	return;

OPT (6):						/* Rename Option */

	if default_file = "outgoing" then last_file_used = "";

	call xmail_select_file_$caller_msg ("mail file", "sv.mbx", (last_file_used), ALLOW_OLD, DONT_ALLOW_NEW, new_dir, new_file, "Enter name of file you wish to rename", unused_bit, unused_bit2, code);

	if new_file = "outgoing"
	then do;
		call ioa_ ("Sorry, but the ""^a"" mail file is required and cannot be renamed.", new_file);
		return;
	     end;

	call done_with_file ();			/* close prev mailbox */
						/* but do not open new one */
	dir = new_dir;
	file = new_file;
	default_file = file;

	call ioa_$nnl ("Renaming ""^a"": ", file);
	call xmail_select_file_$caller_msg ("mail file", "sv.mbx", "", DONT_ALLOW_OLD, ALLOW_NEW, new_dir, new_file, "New name", unused_bit, unused_bit2, code);
	if code ^= 0
	then do;
		call ioa_ ("Selection of new mail file name not successful.");
		return;
	     end;

	call mailbox_$chname_file (rtrim (new_dir), file || "." || MFILE_SUFFIX, file || "." || MFILE_SUFFIX, rtrim (new_file) || "." || MFILE_SUFFIX, code);
	if code ^= 0 then call xmail_error_$code_last (code, NAME, "q", "Renaming of mail file failed.");
	call ioa_ ("Mail file name changed from ""^a"" to ""^a"".", file, new_file);
	file = new_file;
	dir = new_dir;
	default_file = file;
	last_opt = opt;
	return;

OPT (7):						/* Display Summary of Messages Option */

	if star_entry_count = 0
	then do;
		call ioa_ (NO_FILE_MSG);
		return;
	     end;

	if file_is_empty then last_file_used = "";
	call SELECT_NEW_FILE ("list", (last_file_used));
	last_opt = opt;
	if file_is_empty
	then do;
		call ioa_ ("Mail file ""^a"" is empty.", file);
		return;
	     end;
	call xmail_list_msgs_ (mailbox_ptr, curr_msgsp, iox_$user_output);
	return;

OPT (8):						/* Discard mail file option */

	if star_entry_count = 0
	then do;
		call ioa_ (NO_FILE_MSG);
		return;
	     end;
	if default_file = "outgoing" then call SELECT_NEW_FILE ("discard", "");
	else call SELECT_NEW_FILE ("discard", (last_file_used));
	if file = "outgoing"
	then do;
		call ioa_ ("Sorry, but the ""^a"" mail file is required and cannot be discarded.", file);
		return;
	     end;
	last_opt = opt;
	msg_pointer = curr_msgsp;
	if file_is_empty then msg_pointer = null ();
/*	else call xmail_select_msgs_$all (mailbox_ptr, msg_pointer, pos_line);     this is redundant because selection is done above  */
	do idx = 1 to star_entry_count;
	     do i = star_entries (idx).nindex to star_entries (idx).nindex + star_entries (idx).nnames - 1;
		if rtrim (file) = before (star_names (i), FULL_MFILE_SUFFIX) then go to success;
	     end;
	end;
	call xmail_error_$no_code (code, NAME, "q", "Sorry, but an internal programming error has occurred.^/Mail file ""^a"" could not be discarded.", file);

success:
	if star_entries (idx).type = 0
	then call xmail_discard_file_$link (mailbox_ptr, msg_pointer, (file), discarded);
	else call xmail_discard_file_ (mailbox_ptr, msg_pointer, (file), discarded);
/*	curr_msgsp = null;    */

	if discarded = "0"b then return;
	mailbox_ptr = null ();
	file_info = "";
	default_file = "";
	file = "";
	if (star_entry_count - 1) < 1
	then call ioa_ ("You have no more mail files.");
	return;

OPT (9):						/* Retrieve option */

	if mailbox_ptr = null ()
	then do;
		call ioa_ ("Sorry, but no messages can be retrieved for one
or more reasons:
 1. You have not discarded any messages
 2. You have changed mail file since you last discarded messages
 3. You have discarded the mail file");
		return;
	     end;
	call xmail_undelete_msgs_ (mailbox_ptr, curr_msgsp, pos_line, "all");
	return;


     end PERFORM_OPTION;
%page;

EXPLAIN_OPTION: proc (opt);

	dcl     opt		 fixed bin;

	dcl     xmail_display_help_	 entry (char (*), char (*), fixed bin (35));

	call window_$clear_window (iox_$user_output, code);
	if code ^= 0 then call xmail_error_$no_print (code, NAME, "l", "Cannot clear user_io window. This is an internal programming error.");
	call xmail_display_help_ (NAME || ".gi.info",
	     translate (OPTION_NAMES (opt), "_", " "), code);
	if code ^= 0 then call xmail_error_$no_print (code, NAME, "l", "Unable to display help. This is an internal programming error.");

     end EXPLAIN_OPTION;

done_with_file: proc ();

	if mailbox_ptr ^= null
	then do;
		auto_close_options.version = CLOSE_OPTIONS_VERSION_2;
		auto_close_options.flags.perform_deletions = "1"b;
		auto_close_options.flags.report_deletion_errors = "0"b;
		auto_close_options.flags.mbz = "0"b;
		call mail_system_$close_mailbox (mailbox_ptr, addr (auto_close_options), code);
		if code ^= 0 then call xmail_error_$no_code (code, NAME, "l", "Unable to close user mailbox. This is an internal programming error.");
	     end;

	if curr_msgsp ^= null then do;
	     free curr_msgs;
	     curr_msgsp = null;
	     end;
	return;

     end done_with_file;

SELECT_NEW_FILE: proc (P_text, P_default_file);

	dcl     P_text		 char (*) parameter;
	dcl     P_default_file	 char (*) parameter;
	dcl     user_message	 char (78) varying;

	dcl     xmail_sw_$update_file	 entry (char (*));
	dcl     xmail_sw_$update_file_info entry (char (*));
	dcl     xmail_sw_$redisplay	 entry ();

	user_message = "Enter name of file you wish to " || P_text || " ";

	call xmail_select_file_$caller_msg ("file", "sv.mbx", (P_default_file), ALLOW_OLD, DONT_ALLOW_NEW, new_dir, new_file, (user_message), unused_bit, unused_bit2, code);
	if code = 0 then do;
		                                        /* msg to user */
	          call ioa_ ("The ""^a"" file has been selected...", new_file); 
		call done_with_file ();
		dir = new_dir;
		file = new_file;

/* Determine if we want all msgs or just ordinary ones */
		call xmail_value_$get_with_default (MSGS_AS_MAIL, (NO), response, code);
		if code ^= 0 then call xmail_error_$code_first (code, NAME, "q",
		     "^/Unable to get a value for ""^a"" in the xmail value segment.", MSGS_AS_MAIL);

		treat_msgs_as_mail = "0"b;
		if response = YES | choice = 3 | choice = 5 | choice = 8
		     then do;
		     treat_msgs_as_mail = "1"b;
		     xmail_data.msgs_as_mail = "1"b;
		     end;
		else if response = ASK
		     then do;
			call xmail_get_str_$yes_no ("Do you wish to treat interactive msgs as mail? ", yes_sw);
			if yes_sw then do;
			     treat_msgs_as_mail = "1"b;
			     xmail_data.msgs_as_mail = "1"b;
			     end;
			end;
		     else xmail_data.msgs_as_mail = "0"b;
		     
/* Open the mailbox and set the first current message to one */

		auto_open_options.version = OPEN_OPTIONS_VERSION_2;
		if treat_msgs_as_mail  then
		auto_open_options.message_selection_mode = ALL_MESSAGES;
		else auto_open_options.message_selection_mode = ORDINARY_MESSAGES;
		auto_open_options.sender_selection_mode = ACCESSIBLE_MESSAGES;
		auto_open_options.message_reading_level = READ_KEYS;

		call mail_system_$open_mailbox (dir, file || ".sv", addr (auto_open_options), MAILBOX_VERSION_2, mailbox_ptr, code);
		if code = error_table_$moderr then call xmail_error_$no_code (code, NAME, "i", "You do not have access to the ""^a"" mail file.", new_file);
		if code ^= 0 then call xmail_error_$no_code (code, NAME, "q", "Unable to open mail file. This is an internal programming error.");

		                                        /* clear msg */
	          call window_$clear_window (iox_$user_output, code);
	          if code ^= 0 then call xmail_error_$no_print (code, NAME, "l", "Cannot clear user_io window. This is an internal programming error.");

		if mailbox.n_messages = 0
		then do;
			call done_with_file;
			file_is_empty = "1"b;
		     end;
		else do;
			call xmail_select_msgs_$all (mailbox_ptr, curr_msgsp, pos_line);

			call xmail_sw_$update_file ("File: " || (file));
			call xmail_sw_$update_file_info (rtrim ("Total messages: " || ltrim (char (mailbox.n_messages - mailbox.n_deleted_messages))));
			call xmail_sw_$redisplay ();
			if (mailbox.n_messages - mailbox.n_deleted_messages) > 0
			then file_is_empty = "0"b;
			else file_is_empty = "1"b;
			default_file = file;
		     end;
	     end;

SELECT_NEW_FILE_EXIT:
	return;

     end SELECT_NEW_FILE;

CLEAN_UP: proc ();
	call done_with_file;
	if star_names_ptr ^= null () then free star_names;/* order is important */
	if star_entry_ptr ^= null () then free star_entries;
	return;
     end CLEAN_UP;

    end xmail_Mail_File_Maint_;

