/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* Begin xmail_send_mail_print_msg_   */
/* Written by R. Ignagni    July 1981  

   83-06-20  DJ Schimke: Modified to use new mail_system calls and version 2
   mailboxes. Changed code to use xmail_data.mail_dir rather than determining
   this pathname for itself.
*/
xmail_send_mail_print_msg_: proc ();

/*  Proc called as consequence of user having selected the "Print" option
in the Send Mail menu. The message is first placed in a temporary "screech" 
mailbox and then dprinted. It is initially placed in a mailbox so that the 
printing of all Exec Mail messages (from whatever menu) look exactly the same,
i.e., the format of a msg in mailbox.  */

/* Constant */

	dcl     CREATE_IF_NOT_FOUND	 bit (1) aligned static options (constant) init ("1"b);
	dcl     DELETE_SEG_FORCE_CHASE bit (6) static options (constant) init ("100101"b);
	dcl     NAME		 char (26) static options (constant) init ("xmail_send_mail_print_msg_");
	dcl     STOP		 char (1) static options (constant) init ("q");
	dcl     ERROR_MESSAGE	 char (65) static options (constant) init ("A program error has occurred. Cannot continue. Returning to menu.");

/* Automatic */

	dcl     code		 fixed bin (35);
	dcl     svmbx_dir		 char (168);
	dcl     temporary_mailbox_name char (15);

	dcl     1 auto_open_options	 like open_options;
	dcl     1 auto_close_options	 like close_options;

/* Entries */

	dcl     delete_$path	 entry (char (*), char (*), bit (6), char (*), fixed bin (35));
	dcl     ioa_		 entry () options (variable);
	dcl     mail_system_$close_mailbox entry (ptr, ptr, fixed bin (35));
	dcl     mail_system_$open_mailbox entry (char (*), char (*), ptr, char (8), ptr, fixed bin (35));
	dcl     mail_system_$save_message entry (ptr, char (*), char (*), bit (1) aligned, fixed bin (35));
	dcl     unique_chars_	 entry (bit (*)) returns (char (15));
	dcl     xmail_error_$no_code	 entry () options (variable);
	dcl     xmail_dprint_msgs_	 entry (ptr, ptr);
	dcl     xmail_select_msgs_$first entry (ptr, ptr, char (*));

/*  Builtin  */

	dcl     (addr, null)	 builtin;

/* Error codes */

	dcl     mlsys_et_$savebox_created ext static fixed bin (35);

/* Conditions */

	dcl     (quit, cleanup)	 condition;

/* Include */

%page;
%include xmail_send_mail;
%page;
%include xmail_data;
%page;
%include mlsys_mailbox;
%page;
%include mlsys_open_options;
%page;
%include mlsys_message;
%page;
%include xmail_curr_msg_info;
%page;
%include mlsys_close_options;
%page;

/* BEGIN */

	temporary_mailbox_name = unique_chars_ ("0"b);
	svmbx_dir = "";

	on condition (cleanup) call CLEAN_UP;
	on condition (quit)
	     begin;
		dcl     xmail_window_manager_$reconnect entry ();
		call xmail_window_manager_$reconnect ();
		call ioa_ ("""Print Sent Message"" terminated.");
		go to EXIT;
	     end;

/* See if message exits for "printing" */

	if send_mail_info.msg_exists = "0"b | send_mail_info.emacs_seg_ptr = null ()
	then do;
	     call ioa_ ("There is no message to print.");
	     go to EXIT;
	end;

	svmbx_dir = xmail_data.mail_dir;

/* Save msg the temporary mbx so it can be dprinted */

	call mail_system_$save_message (send_mail_info.new_msg_ptr, svmbx_dir, temporary_mailbox_name, CREATE_IF_NOT_FOUND, code);

	if code ^= 0 & code ^= mlsys_et_$savebox_created
	then call xmail_error_$no_code (code, NAME, STOP, "^a", ERROR_MESSAGE);

/* Open mbx */

	auto_open_options.version = OPEN_OPTIONS_VERSION_2;
	auto_open_options.message_selection_mode = ALL_MESSAGES;
	auto_open_options.sender_selection_mode = ALL_MESSAGES;
	auto_open_options.message_reading_level = READ_MESSAGES;
	mailbox_ptr = null ();
	call mail_system_$open_mailbox (svmbx_dir, temporary_mailbox_name || ".sv.mbx", addr (auto_open_options), MAILBOX_VERSION_2, mailbox_ptr, code);
	if code ^= 0 then call xmail_error_$no_code (code, NAME, STOP, "^a", ERROR_MESSAGE);

/* Determine the msg ptr so that the xmail_dprint_msgs_ proc can be called to
   actully request the dprint of the msg */

	curr_msgsp = null ();
	call xmail_select_msgs_$first (mailbox_ptr, curr_msgsp, "");
	call xmail_dprint_msgs_ (mailbox_ptr, curr_msgsp);

/* Close mbx */

	auto_close_options.version = CLOSE_OPTIONS_VERSION_2;
	auto_close_options.flags.perform_deletions = "0"b;
	auto_close_options.flags.report_deletion_errors = "0"b;
	auto_close_options.flags.mbz = "0"b;
	call mail_system_$close_mailbox (mailbox_ptr, addr (auto_close_options), code);
	if code ^= 0 then call xmail_error_$no_code (code, NAME, STOP, "^a", ERROR_MESSAGE);

EXIT:	call CLEAN_UP;
	return;

CLEAN_UP: proc ();
	if svmbx_dir ^= ""
	then call delete_$path (svmbx_dir, temporary_mailbox_name || ".sv.mbx", DELETE_SEG_FORCE_CHASE, NAME, (0)); /* ignore code */
	return;
     end CLEAN_UP;

     end xmail_send_mail_print_msg_;
