/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-02-27,Blair), approve(86-02-27,MCR7358),
     audit(86-04-21,RBarstad), install(86-05-28,MR12.0-1062):
     85-03-22 Joanne Backs: Modified to add 3 new entrypoints to $get_ and
     $set_: copies, left_margin, and notify.  Added the conversion and size
     conditions and the CONVERT internal procedure to support these new
     printing options which can be set in the Personalize Exec Mail menu.
     
     85-04-01 Joanne Backs: Added a short CONFIRM_FIRST internal procedure to
     display a prompt for changing the printing options before actually doing
     printing, but if the answer to the prompt is yes, just inform the user the
     option is not implemented yet.
     
     85-04-02 Joanne Backs: Added calls to ioa_ to display a message to the user
     if the dprint was sucessfully submitted.  A short message will be seen if
     the confirm option is set and the printing options have already been
     displayed, but the longer message at all other times.  These messages were
     extracted from xmail_dprint_msgs_ and xmail_dprint_mlist_ to be consistant.
     
     85-04-25 Joanne Backs: Added new internal procedures TEMP_CHANGE and
     PERFORM_CHANGE to allow the user to temporarily change any of the print
     options via a lower window dynamic menu.  PERFORM_CHANGE will call the
     respective entrypoint in xmail_Review_Defaults_ to get the new value
     but will not permanently change the value in the value segment.
     
     85-04-26 JG Backs: Modified CONFIRM_FIRST to output one prompt the first
     time the printing options are listed and output a different prompt after
     changes are made.
  2) change(87-05-10,Gilcrease), approve(87-05-14,MCR7686),
     audit(88-02-01,Farley), install(88-02-02,MR12.2-1019):
     Update to version 9 dprint_arg.
                                                   END HISTORY COMMENTS */


xmail_print_: proc;
	return;

/* BEGIN DESCRIPTION 

function:
			xmail_print_

	The xmail_print_ subroutine is a utility for requesting hard
	copy output in the xmail environment.  It has entrypoints for
	creating a segment to contain the output until it is printed,
	submitting the segment to be printed, and for deleting a segment
	if the need to print it goes away before it is printed.  Entries
	are also provided for manipulation of the stored attributes used
	to route output.

	Once a segment is submitted for printing it becomes the
	responsibility of xmail_print_.  It determines the method of
	output delivery most suitable for the current user, delivers the
	output, and deletes the segment when delivery is known to have
	been accomplished.  Future versions will actually interogate the
	user as to the delivery status of requested output and re-issue
	requests for lost output.  The initial version will deliver
	output via dprint_ and depend upon the daemon to delete segments
	when they have been printed.

history: 
   Written  7/8/81 by Paul Kyzivat 

   81-07-20 Paul Kyzivat: Add the get/set entries.

   82-10-11 Dave Schimke: Modified to use dp_args version 7.

   84-09-27 Joanne Backs: Modified to use dp_args version 8.
   
END DESCRIPTION
*/

/* PARAMETERS */

	dcl     id		 char (*) parameter,
	        dir		 char (*) parameter,
	        ent		 char (*) parameter,
	        description		 char (*) parameter,
	        value		 char (*) parameter,
	        seg_ptr		 ptr parameter,
	        dprint_arg_ptr	 ptr parameter,
	        code		 fixed bin (35);

/* AUTOMATIC */

	dcl     bc		 fixed bin (24),
	        local_ent		 char (32),
	        local_dir		 char (168),
	        name_len		 fixed bin,
	        suffix		 char (32),
	        type		 fixed bin (2),
	        yes_sw                 bit (1) aligned;

/* CONSTANTS */

	dcl     CHASE		 init (1) fixed bin (1) static options (constant);
	dcl     1 CREATED_FILE_FORMAT	 static options (constant),
		2 PREFIX		 char (3) init ("dp."),
		2 UNIQUE		 char (15) init ("!??????????????"),
		2 SUFFIX		 char (3) init (".**");
	dcl     DELETE_SEG		 init ("000100"b) bit (6) static options (constant);
	dcl     NAME                   init ("xmail_print_") char (12) static options (constant);
	dcl     NO		 char (2) init ("no") static options (constant);
	dcl     RW_MODE		 fixed bin (5) init (01010b) static options (constant);
	dcl     RW_MODE_INIT_FILE	 bit (3) init ("101"b) static options (constant);
	dcl     YES		 char (3) init ("yes") static options (constant);

/* EXTERNAL STATIC */

	dcl     error_table_$oldnamerr fixed bin (35) ext static,
	        error_table_$bad_conversion fixed bin (35) ext static,
	        error_table_$smallarg	 fixed bin (35) ext static;

/* ENTRIES */

	dcl     delete_$path	 entry (char (*), char (*), bit (6), char (*), fixed bin (35)),
	        delete_$ptr		 entry (ptr, bit (6), char (*), fixed bin (35)),
	        hcs_$append_branch	 entry (char (*), char (*), fixed bin (5), fixed bin (35)),
	        hcs_$fs_get_path_name	 entry (ptr, char (*), fixed bin, char (*), fixed bin (35)),
	        hcs_$status_minf	 entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35)),
	        hcs_$status_mins	 entry (ptr, fixed bin (2), fixed bin (24), fixed bin (35)),
	        hcs_$terminate_noname	 entry (ptr, fixed bin (35)),
	        ioa_                   entry() options(variable),
	        initiate_file_	 entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35)),
	        unique_chars_	 entry (bit (*)) returns (char (15)),
	        xmail_get_str_$yes_no  entry (char (*) var, bit (1) aligned);

/* CONDITIONS */

	dcl     cleanup		 condition;

/* BUILTINS */

	dcl     (convert, length, min, null, rtrim, substr) builtin;

/* INCLUDE FILES */

%include dprint_arg;
%page;
%include window_dcls;
%page;
%include xmail_data;

/* ENTRYPOINTS */

/*
			xmail_print_$create_file

	This entry creates a file to be used for generation of hardcopy
	output.  The directory is chosen automatically, and the
	entryname is generated uniquely but containing a caller
	specified identification.  The directory and entrynames are
	returned to the caller.  It is the responsibility of the caller
	to either request printing of the file or request its deletion.

     id
	is a brief (16 characters or less) identification of file
	contents.  It will become part of the file name.

     dir
	(OUTPUT) is the directory containing the file.

     ent
	(OUTPUT) is the entryname of the created file.

     code
	(OUTPUT) is a system status code.
*/

create_file: entry (id, dir, ent, code);

	if id ^= "" then suffix =
		"." || substr (id, 1, min (length (id), 16));
	else suffix = "";

	ent = CREATED_FILE_FORMAT.PREFIX || unique_chars_ (""b) || suffix;
	dir = xmail_data.mail_dir;

	call hcs_$append_branch (dir, ent, RW_MODE, code);
	return;

/*
			xmail_print_$create_seg

	This entry creates a segment to be used for generation of
	hardcopy output.  The directory is chosen automatically, and the
	entryname is generated uniquely but containing a caller
	specified identification.  The segment is initiated with a null
	reference name and a pointer returned to the caller.  It is the
	responsibility of the caller to either request printing of the
	segment or request its deletion.

     id
	is a brief (16 characters or less) identification of
	segment contents.  It will become part of the file name.

     seg_ptr
	(OUTPUT) is a pointer to the created segment.

     code
	See above.
*/

create_seg: entry (id, seg_ptr, code);

	seg_ptr = null;
	local_dir, local_ent = "";

	on condition (cleanup) call delete_file (local_dir, local_ent, (0));

	call create_file (id, local_dir, local_ent, code);
	if code = 0 then call initiate_file_ (local_dir, local_ent, RW_MODE_INIT_FILE, seg_ptr, bc, code);
	return;

/*
			xmail_print_$submit_file

	This entry point requests that a file (identified by pathname)
	be printed.  The file need not have been created by
	xmail_print_$create_file.  Options controlling the printing are
	specified via a dprint_arg structure identical to that used in
	calling dprint_.  A text description of the file or its contents
	is required, for use in conversing with the user about the file.
	This will be necessary in order to determine whether a file has
	been received by the user.

     dir
	(INPUT) is the directory containing the file to be printed.

     ent
	(INPUT) is the entryname of the file to be printed.

     description
	(INPUT) is a short (one line) description of the contents of the
	file, for purposes of communication with the user about it.

     dprint_arg_ptr
	(INPUT)
	is a pointer to a standard dprint arg structure.  The following
	fields are ignored because they are determined internally: queue,
	pt_pch, heading, output_module, bit_count, destination, request_type,
	copies, lmargin, and notify.  In addition, delete is assumed if
          the file being printed was created by xmail_print_$create_file or
          xmail_print_$create_seg.  A null pointer may be passed, in which
          case defaults are used for all fields.

     code
	See above.
*/

submit_file: entry (dir, ent, description, dprint_arg_ptr, code);

	call hcs_$status_minf (dir, ent, CHASE, type, bc, code);
	if code = 0 then call SUBMIT
		(dir, ent, bc, description, dprint_arg_ptr, code);
	return;

/*
			xmail_print_$submit_seg

	This entry point requests that a segment (identified by pointer)
	be printed.  The segment need not have been created by
	xmail_print_$create_seg.  Options controlling the printing are
	specified via a dprint_arg structure identical to that used in
	calling dprint_.  A text description of the segment or its
	contents is required, for use in conversing with the user about
	the segment.  This will be necessary in order to determine
	whether a segment has been received by the user.  The segment
	will be terminated and seg_ptr set to null if and only if a zero
	is returned in code.

     seg_ptr
	is a pointer to the file to be printed.

     description
	See above.

     dprint_arg_ptr
	See above.

     code
	See above.
*/

submit_seg: entry (seg_ptr, description, dprint_arg_ptr, code);

	call hcs_$fs_get_path_name (seg_ptr, local_dir, name_len, local_ent, code);
	if code = 0 then call hcs_$status_mins (seg_ptr, type, bc, code);
	if code = 0 then call SUBMIT
		(local_dir, local_ent, bc, description, dprint_arg_ptr, code);
	if code = 0 then do;
		call hcs_$terminate_noname (seg_ptr, (0)); /* ignore error code */
		seg_ptr = null;
	     end;
	return;

/*
			xmail_print_$delete_file

	This entry point is used to delete a file created by
	xmail_print_$create_file when it is determined that the file is
	not needed and will not be printed.  This entry would normally
	be called from the cleanup condition handler of the procedure
	which requests the file.	

     dir
	is the directory containing the file to be deleted, as
	returned by xmail_print_$create_file.

     ent
	is the entry name of the file to be deleted, as returned by
	xmail_print_$create_file.

     code
	See above.
*/

delete_file: entry (dir, ent, code);

	call delete_$path (dir, ent, DELETE_SEG, "", code);
	return;

/*
			xmail_print_$delete_seg

	This entry point is used to delete a segment created by
	xmail_print_$create_seg when it is determined that the segment
	is not needed and will not be printed.  This entry would
	normally be called from the cleanup condition handler of the
	procedure which requests the segment.

     seg_ptr
	is a pointer to the segment to be deleted, as returned by
	xmail_print_$create_seg.

     code
	See above.
*/

delete_seg: entry (seg_ptr, code);

	call delete_$ptr (seg_ptr, DELETE_SEG, "", code);
	if code = 0 then seg_ptr = null;
	return;

/*
		xmail_print_$get_{heading destination request_type
		                  copies left_margin notify}

	These entries return the identified piece of information.
	They look for it in the value segment, and if not found they
	supply a default (if appropriate.)
*/

	dcl     (
	        DP_HEAD_VAR		 init ("dprint_heading"),
	        DP_DEST_VAR		 init ("dprint_destination"),
	        DP_RQT_VAR		 init ("dprint_request_type"),
	        DP_COPIES_VAR	 init ("dprint_copies"),
	        DP_LMARGIN_VAR	 init ("dprint_left_margin"),
	        DP_NOTIFY_VAR	 init ("dprint_notify")
	        )			 char (20) static options (constant);

get_heading: entry (value, code);

	call GET (DP_HEAD_VAR);
	if code = error_table_$oldnamerr
	then do;
	     if length (value) >= length (xmail_data.actee.person)
	     then do;
		value = xmail_data.actee.person;
		code = 0;
	     end;
	     else do;
	          value = "";
	          code = error_table_$smallarg;
	     end;
	end;
	return;

get_destination: entry (value, code);

	call GET (DP_DEST_VAR);
	if code = error_table_$oldnamerr
	then do;
	     value = "";
	     code = 0;
	end;
	return;

get_request_type: entry (value, code);

	call GET (DP_RQT_VAR);
	if code = error_table_$oldnamerr
	then do;
	     value = "";
	     code = 0;
	end;
	return;

get_copies: entry (value, code);

	call GET (DP_COPIES_VAR);

	if code = error_table_$oldnamerr
	then do;
	     value = "1";                                 /* default = 1 */
	     code = 0;
	end;
	return;

get_left_margin: entry (value, code);

	call GET (DP_LMARGIN_VAR);

	if code = error_table_$oldnamerr
	then do;
	     value = "0";                                 /* default = 0 */
	     code = 0;
	end;
	return;

get_notify: entry (value, code);

	call GET (DP_NOTIFY_VAR);

	if code = error_table_$oldnamerr
	then do;
	     value = NO;                                  /* default = no */
	     code = 0;
	end;

	return;

/*
		xmail_print_$set_{heading destination request_type
		                  copies left_margin notify}

	These entries redefine the identified piece of information in the
	value seg.
*/

set_heading: entry (value, code);

	call SET (DP_HEAD_VAR);
	return;

set_destination: entry (value, code);

	call SET (DP_DEST_VAR);
	return;

set_request_type: entry (value, code);

	call SET (DP_RQT_VAR);
	return;

set_copies: entry (value, code);

	call SET (DP_COPIES_VAR);
	return;

set_left_margin: entry (value, code);

	call SET (DP_LMARGIN_VAR);
	return;

set_notify: entry (value, code);

	call SET (DP_NOTIFY_VAR);
	return;

SUBMIT: proc (print_dir, print_file, bitcount, desc, dp_args_param, status);

/* PARAMETERS */

	dcl     print_dir		 char (*),
	        print_file		 char (*),
	        bitcount		 fixed bin (24),
	        desc		 char (*),
	        dp_args_param	 ptr,
	        status		 fixed bin (35);

/* AUTOMATIC */

	dcl     user_heading	 char (64),
	        user_destination	 char (24),
	        user_request_type	 char (24),
	        user_copies 	 char (2),
	        user_copies_bin 	 fixed bin,
	        user_lmargin	 char (2),
	        user_lmargin_bin 	 fixed bin,
	        user_notify 	 char (3),
	        user_notify_bin 	 fixed bin,
	        matched		 fixed bin (35),
	        dp_args_p		 ptr,
	        1 dp_args		 aligned like dprint_arg based (dp_args_p),
	        1 default_dp_args	 aligned like dprint_arg;

/* CONSTANTS */

          dcl     COPIES_LIMIT           fixed bin static options (constant) init (30);
          dcl     LEFT_MARGIN_LIMIT      fixed bin static options (constant) init (20);

/* EXTERNAL STATIC */

	dcl     error_table_$unimplemented_version fixed bin (35) ext static;

/* ENTRIES */

	dcl     match_star_name_	 entry (char (*), char (*), fixed bin (35)),
	        dprint_		 entry (char (*), char (*), ptr, fixed bin (35));

/* BUILTINS */

	dcl     (addr, null, string, unspec) builtin;

/* BEGIN */

	call get_heading (user_heading, status);
	if status = 0 then call get_destination (user_destination, status);
	if status = 0 then call get_request_type (user_request_type, status);
	if status = 0 then call get_copies (user_copies, status);
	if status = 0 then call get_left_margin (user_lmargin, status);
	if status = 0 then call get_notify (user_notify, status);

	if status ^= 0 then return;

/*  Convert and check values of copies, lmargin, and notify  */

          call CONVERT (user_copies, user_copies_bin, status);
	if status ^= 0 then return;
          if user_copies_bin > COPIES_LIMIT
          then do;
     	     user_copies = "1";                           /* use default */
	     user_copies_bin = 1;
	end;

          call CONVERT (user_lmargin, user_lmargin_bin, status);
	if status ^= 0 then return;
          if user_lmargin_bin > LEFT_MARGIN_LIMIT
          then do;
     	     user_lmargin = "0";                          /* use default */
	     user_lmargin_bin = 0;
	end;

	if user_notify = YES
	     then user_notify_bin = 1;
	     else user_notify_bin = 0;                    /* use default */

	if dp_args_param = null then do;
		dp_args_p = addr (default_dp_args);
		unspec (dp_args) = ""b;
		dp_args.version = dprint_arg_version_9;
		dp_args.delete = 0;
		string (dp_args.carriage_control) = ""b;
		dp_args.line_lth = -1;
		dp_args.page_lth = -1;
		dp_args.top_label = "";
		dp_args.bottom_label = "";
		dp_args.form_name = "";
		dp_args.chan_stop_path = "";
	     end;
	else do;
		dp_args_p = dp_args_param;
		if dp_args.version ^= dprint_arg_version_9 then do;
			status = error_table_$unimplemented_version;
			return;
		     end;
	     end;

	if xmail_data.confirm_print
	then call CONFIRM_FIRST;

	dp_args.queue = 0;				/* default */
	dp_args.pt_pch = 1;				/* print */
	dp_args.output_module = 1;			/* print */
	dp_args.bit_count = bitcount;
	dp_args.heading = user_heading;
	dp_args.destination = user_destination;
	dp_args.request_type = user_request_type;
	dp_args.defer_until_process_termination = 0;
	dp_args.copies = user_copies_bin;
	dp_args.lmargin = user_lmargin_bin;
	dp_args.notify = user_notify_bin;

	call match_star_name_ (print_file, string (CREATED_FILE_FORMAT), matched);
	if matched = 0 then dp_args.delete = 1;

	call dprint_ (print_dir, print_file, dp_args_p, status);

	if xmail_data.confirm_print
	then call ioa_ ("Print request has been submitted.");
	else do;
	     if user_request_type = "" then user_request_type = "system default printer";
	     if user_destination = "" then user_destination = "not specified";
	     call ioa_ ("Request for printed copy has been submitted to printer: ^a^/Printed copy to be delivered to: ""^a"".   Location: ""^a""", user_request_type, user_heading, user_destination);
	end;
     
SUBMIT_EXIT:
	return;

CONFIRM_FIRST: proc;                                        /* within SUBMIT */

/* AUTOMATIC */

	dcl     cf_first_time          bit (1) aligned;   /*first time flag*/

/* BEGIN */

	cf_first_time = "1"b;

	do while ("1"b);
	     call ioa_ ("  Header:        ^a", user_heading);
	     call ioa_ ("  Destination:   ^[not specified^;^a^]", user_destination = "", user_destination);
	     call ioa_ ("  Station:       ^[system default printer^;^a^]", user_request_type= "", user_request_type);
	     call ioa_ ("  Left Margin:   ^a", user_lmargin);
	     call ioa_ ("  Copies:        ^a", user_copies);
	     call ioa_ ("  Notify:        ^a^/", user_notify);
	     if cf_first_time
	     then do;
		call xmail_get_str_$yes_no ("Do you wish to temporarily change any options before printing?", yes_sw);
		cf_first_time = "0"b;
	     end;
	     else call xmail_get_str_$yes_no ("Do you wish to make any more changes?", yes_sw);
	     if ^yes_sw then go to CONFIRM_EXIT;
	     call TEMP_CHANGE;
	end;

CONFIRM_EXIT:
	return;

     end CONFIRM_FIRST;

TEMP_CHANGE: proc ();

/*
     Produces a dynamic menu in the lower window providing options to
     temporarily change the printing options from the personalization
     menu
*/

/* CONSTANTS */

	dcl     TEMP_CHANGE_CHOICES	 dim (6) char (26) int static options (constant)init
                                        ("Set Header",
				 "Set Destination",
				 "Set Station",
				 "Set Left Margin",
				 "Set Number of Copies",
				 "Notify After Printing") aligned var;

/* AUTOMATIC */

	dcl     tc_choice		 fixed bin;
	dcl     tc_code		 fixed bin (35);
	dcl     tc_selected_done       bit (1) aligned;
	dcl     temp_change_menup	 ptr init (null) int static;

/* ENTRIES */

	dcl     get_system_free_area_	 entry () returns (ptr);
	dcl     xmail_dyn_menu_$create_w_trailer entry ((*) char (*) aligned, char (*), ptr, ptr, ptr, fixed bin (35));
	dcl     xmail_error_$no_code	 entry () options (variable);
	dcl     xmail_get_dyn_choice_$trailer entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
	dcl     xmail_get_str_$yes_no	 entry (char (*) var, bit (1) aligned);
	dcl     xmail_sw_$update_usage entry (char (*));
	dcl     xmail_sw_$redisplay	 entry ();

/* EXTERNAL STATIC */

	dcl     iox_$user_output       ptr ext static;

/* BEGIN */

	if temp_change_menup = null
	then do;
	     call xmail_dyn_menu_$create_w_trailer ((TEMP_CHANGE_CHOICES), "<List changes>", temp_change_menup, null, get_system_free_area_ (), tc_code);
	     if tc_code ^= 0
	     then call xmail_error_$no_code (tc_code, NAME, "q", "Unable to create temporary print change menu.^/  This is an internal programming error.");
	end;

	do while ("1"b);
	     call xmail_sw_$update_usage ("");
	     call xmail_sw_$redisplay ();
	     call window_$clear_window (iox_$user_output, (0));
	     call xmail_get_dyn_choice_$trailer (temp_change_menup, tc_choice, tc_selected_done, tc_code);

	     if tc_selected_done then go to TEMP_CHANGE_EXIT;
	     if tc_code ^= 0
	     then call xmail_error_$no_code (tc_code, NAME, "q", "Unable to display temporary print change menu.^/  This is an internal programming error.");
	     call window_$clear_window (iox_$user_output, (0));
	     call PERFORM_CHANGE (tc_choice);

	     call xmail_get_str_$yes_no ("More changes?", yes_sw);
	     if ^yes_sw then go to TEMP_CHANGE_EXIT;
	end;

TEMP_CHANGE_EXIT:
          call window_$clear_window (iox_$user_output, (0));
	return;


PERFORM_CHANGE: proc (opt);

/* PARAMETERS */

	dcl     opt		 fixed bin parameter;/* input */

/* AUTOMATIC */

	 dcl    name                   char (26) varying;
           dcl    new_value              char (200) varying;
           dcl    new_value_bin          fixed bin;

/* ENTRIES */

	dcl     xmail_Review_Defaults_$get_new_copies entry (char (*), char (*) var, fixed bin);
	dcl     xmail_Review_Defaults_$get_new_destination entry (char (*), char (*) var);
	dcl     xmail_Review_Defaults_$get_new_header entry (char (*), char (*) var);
	dcl     xmail_Review_Defaults_$get_new_margin entry (char (*), char (*) var, fixed bin);
	dcl     xmail_Review_Defaults_$get_new_notify entry (char (*), char (*), char(*) var);
	dcl     xmail_Review_Defaults_$get_new_station entry (char (*), char (*) var);

/* BEGIN PERFORM_CHANGE */

	name = TEMP_CHANGE_CHOICES (opt);                  /* include name of option*/
	go to OPT (opt);

OPT (1):	
	call xmail_Review_Defaults_$get_new_header (user_heading, new_value);
	if length (new_value) ^= 0
	then user_heading = new_value;
	go to OPT_EXIT;

OPT (2):	
	call xmail_Review_Defaults_$get_new_destination (user_destination, new_value);
	if length (new_value) ^= 0
	then user_destination = new_value;
	go to OPT_EXIT;

OPT (3):	
	call xmail_Review_Defaults_$get_new_station (user_request_type, new_value);
	if new_value = "default"
	then user_request_type = "";                    /* null for default*/
	else if length (new_value) ^= 0
	     then user_request_type = new_value;
	go to OPT_EXIT;

OPT (4):	
	call xmail_Review_Defaults_$get_new_margin (user_lmargin, new_value, new_value_bin);
	if length (new_value) ^= 0
	then do;
	     user_lmargin = new_value;                    /* for message */
	     user_lmargin_bin = new_value_bin;            /* for dprint_ */
	end;
	go to OPT_EXIT;

OPT (5):	
	call xmail_Review_Defaults_$get_new_copies (user_copies, new_value, new_value_bin);
	if length (new_value) ^= 0
	then do;
	     user_copies = new_value;                     /* for message */
	     user_copies_bin = new_value_bin;             /* for dprint_ */
	end;
	go to OPT_EXIT;

OPT (6):	
	call xmail_Review_Defaults_$get_new_notify ((name), user_notify, new_value);
	if length (new_value) ^= 0
	then do;
	     user_notify = new_value;                     /* for message */
	     if new_value = YES
	     then user_notify_bin = 1;                    /* for dprint_ */
	     else user_notify_bin = 0;
	end;
	go to OPT_EXIT;

OPT_EXIT: return;
     end PERFORM_CHANGE;

     end TEMP_CHANGE;

     end SUBMIT;

CONVERT: proc (c_value_char, c_value_bin, c_status);

/*
     Converts a character value to a binary value so it can be tested
     against limits and inserted in the dprint_ structure.
*/

/* PARAMETERS */

          dcl     c_value_char          char (*);           /* input */
          dcl     c_value_bin           fixed bin;          /* output */
          dcl     c_status              fixed bin (35);     /* output */

/* CONDITIONS */

          dcl     (conversion, size) condition;

/* BEGIN */

          c_status = 0;

          on conversion, size 
	     c_status = error_table_$bad_conversion;

          c_value_bin = convert (c_value_bin, c_value_char);

	revert conversion, size;
	return;

     end CONVERT;

GET: proc (name);

	dcl     name		 char (20);
	dcl     result		 char (64) varying;
	dcl     xmail_value_$get	 entry (char (*), char (*) var, fixed bin (35)),
	        xmail_value_$set	 entry (char (*), char (*) var, char (*) var, fixed bin (35));

	call xmail_value_$get (name, result, code);
	if code = 0 then do;
		if length (value) >= length (result)
		then value = result;
		else do;
			value = "";
			code = error_table_$smallarg;
		     end;
	     end;
	return;

SET: entry (name);

	call xmail_value_$set (name, rtrim (value), result, code);
	return;

     end GET;
	      
    end xmail_print_;
