/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-01-13,Blair), approve(86-02-26,MCR7358),
     audit(86-04-18,RBarstad), install(86-05-28,MR12.0-1062):
     85-04-17 JG Backs: Replaced all the Message Facility commands
     (accept_messages, defer_messages, print_messages) with calls to the new
     xmail_im_mgr_ module which uses the new Message Facility entrypoints for
     these functions.
  2) change(86-01-13,Blair), approve(86-02-26,MCR7358),
     audit(86-04-18,RBarstad), install(86-05-28,MR12.0-1062):
     Add cleanup handler to set flag which will allow messages marked for
     deletion to be unmarked.
  3) change(86-07-18,Blair), approve(86-07-18,MCR7447),
     audit(86-07-18,LJAdams), install(86-07-21,MR12.0-1100):
     Add a call to xmail_im_mgr_$init before returning back to xmail so we can
     detect when the user has changed his processing options for interactive
     msgs while in multics mode.
                                                   END HISTORY COMMENTS */


xmail_multics_mode_: proc;

/* BEGIN DESCRIPTION

function:
			xmail_multics_mode_

	This program is called to invoke multics mode in the bottom
	window during the execution of xmail.  It tells the user
	what is happenning (in case he doesn't know) and how to get
	back to the menu.  Then it calls the command processor.
	Upon return, it clears the window and returns to its caller.

history:
   Written 7/17/81 by Paul Kyzivat

   Modified 7/21/81 by Paul Kyzivat to only print help once per process

   83-07-07 DJ Schimke: Removed unreferenced dcl of quit condition.
   Added code to selectively disable the interactive message handling. This
   option should eventually be available from the personalize menu as
   suggested by phx12801.

   83-09-20 DJ Schimke: Add call to xmail_window_manager_$reconnect to clear 
   window_status_pending on any windows after returning to xmail. phx 14080

   84-05-30 DJ Schimke: Changed the multics mode interface to use the whole
   screen (original user_io) when necessary by forming overlapping windows.
   There are two advantages to this approach: users have more room for multics 
   commands and the previous contents of the bottom window are preserved for
   the user (in case there is a useful pathname etc.).

   84-09-24 JG Backs: Added "-brief" control argument to print_messages 
   command so the message "You have no messages" would not print. This is to
   make xmail compatible with the new message facility for mr11.

   84-11-13 JG Backs: Initialized code to 0 at the beginning of the module.
   Without initialization, an error was being logged if it was not the
   first time multics mode was called in a process.

END DESCRIPTION
*/

/* AUTOMATIC */

	dcl     code		 fixed bin (35);
	dcl     delta		 fixed bin;
	dcl     mm_status_msg	 char (80) var;
	dcl     restoration_required	 bit (1) aligned;
	dcl     rs_length		 fixed bin;
	dcl     saved_bwi_height	 fixed bin;
	dcl     saved_bwi_line	 fixed bin;
	dcl     1 bottom_window_info	 like window_position_info;

/* BUILTINS */

	dcl     (addr, divide, length, substr) builtin;

/* CONDITIONS */

	dcl     any_other		 condition;
          dcl     cleanup                condition;
	dcl     program_interrupt	 condition;

/* CONSTANTS */

	dcl     NAME		 char (19) int static init ("xmail_multics_mode_") options (constant);
	dcl     MM_STATUS_MSG	 char (39) int static init ("Type ""pi"" to return to Executive Mail") options (constant);

/* EXTERNAL STATIC */

	dcl     iox_$user_output	 ptr ext static;

/* INTERNAL STATIC */

	dcl     first_time		 bit (1) int static init ("1"b); /* indicates if first invocation */

/* ENTRIES */

	dcl     continue_to_signal_	 entry (fixed bin (35));
	dcl     cu_$cl		 entry () options (variable);
	dcl     ioa_$rsnnl		 entry () options (variable);
	dcl     iox_$control	 entry (ptr, char (*), ptr, fixed bin (35));
	dcl     xmail_display_help_	 entry (char (*), char (*), fixed bin (35));
	dcl     xmail_error_$no_print	 entry () options (variable);
	dcl     xmail_redisplay_$menu	 entry;
	dcl     xmail_window_manager_$reconnect entry ();
	dcl     xmail_im_mgr_$defer_messages entry ();
	dcl     xmail_im_mgr_$init entry ();
	dcl     xmail_im_mgr_$print_messages entry ();
	dcl     xmail_im_mgr_$restore_original entry ();

/* INCLUDE FILES */

%include xmail_data;
%page;
%include xmail_help_infos;
%page;
%include xmail_windows;
%page;
%include window_dcls;
%page;
%include window_status;

/* BEGIN */

	code = 0;					/* initialize code */

	if first_time then call xmail_display_help_ (MULTICS_MODE_HELP, "", code);
	if code ^= 0 then call xmail_error_$no_print (code, NAME, "l", "Cannot get help for multics mode. This is an internal programming error.");
	if xmail_data.interactive_msgs then do;
		call xmail_im_mgr_$print_messages;
		call xmail_im_mgr_$restore_original;
	     end;

	restoration_required = "0"b;
	on cleanup begin;
	     call CLEANUP;
	     end;
	on program_interrupt begin;
		call restore_menu;
		if xmail_data.interactive_msgs
		then do;
		     call xmail_im_mgr_$init ();
		     call xmail_im_mgr_$defer_messages ();
		     end;
		call continue_to_signal_ ((0));
	     end;
	call window_$clear_window (xmail_windows.mm_status.iocb, code);
	call ioa_$rsnnl ("^vt^a", mm_status_msg, rs_length, divide ((xmail_windows.mm_status.position.width - length (MM_STATUS_MSG)), 2, 17, 0) + 2, MM_STATUS_MSG);
	call window_$overwrite_text (xmail_windows.mm_status.iocb, substr (mm_status_msg, 1, rs_length), code);
	call xmail_redisplay_$menu ();
	first_time = "0"b;
	call suppress_menu;
	on any_other system;
	call cu_$cl;
	call xmail_window_manager_$reconnect ();
	call window_$clear_window (iox_$user_output, code);
	if code ^= 0 then call xmail_error_$no_print (code, NAME, "l", "Cannot clear user_io window. This is an internal programming error.");
	if xmail_data.interactive_msgs
	then call xmail_im_mgr_$defer_messages ();
	call xmail_redisplay_$menu ();

suppress_menu: proc;
	bottom_window_info = xmail_windows.bottom.position;
	saved_bwi_height = bottom_window_info.height;
	saved_bwi_line = bottom_window_info.origin.line;
	delta = xmail_windows.menu.height + xmail_windows.status.height - 1;
	bottom_window_info.height = bottom_window_info.height + delta;
	bottom_window_info.origin.line = bottom_window_info.origin.line - delta;

	call iox_$control (xmail_windows.bottom.iocb, "set_window_info", addr (bottom_window_info), code);
	restoration_required = "1"b;
	return;
     end suppress_menu;

restore_menu: proc;
	if restoration_required then do;
		bottom_window_info.height = saved_bwi_height;
		bottom_window_info.origin.line = saved_bwi_line;
		call iox_$control (xmail_windows.bottom.iocb, "set_window_info", addr (xmail_windows.bottom.position), (0));
	     end;
	return;
     end restore_menu;

CLEANUP: proc;
         xmail_data.cleanup_signalled = "1"b;
         end;
  

    end xmail_multics_mode_;
