/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* Author unknown

   84-07-03  DJ Schimke: Modified the call to xmail_create_menu_ to add the
   N_COLUMNS parameter.
*/

xmail_Getting_Started_: proc ();

/* Automatic */

	dcl     choice		 fixed bin;
	dcl     code		 fixed bin (35);
	dcl     display_needed	 bit (1) aligned;
	dcl     initial_menu_help	 char (32) var;
	dcl     saw_lifetime_init_info char (3) var init ("");

/* Entries */

	dcl     menu_$display	 entry (ptr, ptr, fixed bin (35));
	dcl     window_$bell	 entry (ptr, fixed bin (35));
	dcl     window_$clear_window	 entry (ptr, fixed bin (35));
	dcl     xmail_error_$no_code	 entry () options (variable);
	dcl     xmail_error_$no_print	 entry () options (variable);
	dcl     xmail_display_help_	 entry (char (*), char (*), fixed bin (35));
	dcl     xmail_Executive_Mail_	 entry options (variable);
	dcl     xmail_get_choice_$dm	 entry (ptr, char (*), char (*), char (*), char (*), bit (1) aligned, char (*), fixed bin, fixed bin (35));
	dcl     xmail_value_$get_with_default entry (char (*), char (*) var, char (*) var, fixed bin (35));
	dcl     xmail_value_$set	 entry (char (*), char (*) var, char (*) var, fixed bin (35));

/* Builtin */

	dcl     (null, translate)	 builtin;

/* Condition */

	dcl     (program_interrupt, xmail_leave_menu, xmail_redisplay_menu, quit) condition;

/* Constant */

	dcl     NAME		 char (22) init ("xmail_Getting_Started_") int static options (constant);
	dcl     N_COLUMNS		 fixed bin static options (constant) init (2);
	dcl     OPTION_NAMES	 (7) char (29) var int static options (constant)
				 init ("Getting to Know Your Terminal",
				 "How to Get Help",
				 "How to Get Out",
				 "Getting Around",
				 "How to Correct Typos",
				 "Personalizing Executive Mail",
				 "Go To Executive Mail Menu");

	dcl     BEGIN_USAGE		 char (59) init ("Press a number and the associated action will be performed.") int static options (constant);

/* External Static */

	dcl     iox_$user_output	 ptr ext static;

	dcl     (xmail_err_$exit_now,
	        xmail_err_$help_requested) fixed bin (35) ext static;

/* Internal Static */

	dcl     menup		 ptr init (null) int static;

	on condition (xmail_leave_menu) ;

	on condition (xmail_redisplay_menu) begin;
		if menup ^= null
		then call menu_$display (xmail_windows.menu.iocb, menup, (0));
	     end;

	if menup = null
	then call GET_MENU ();

	call xmail_value_$get_with_default ("saw_lifetime_init_info", "no", saw_lifetime_init_info, code);
	if code ^= 0
	then do;
	     call xmail_error_$no_code (code, NAME, "l", "Unable to get info from user value segment. This is an internal programming error.");
	     saw_lifetime_init_info = "no";
	end;

	if saw_lifetime_init_info = "yes"
	then initial_menu_help = "";
	else initial_menu_help = INITIAL_HELP;

	on condition (program_interrupt) go to START;
	on condition (quit)
	     begin;
		dcl     xmail_window_manager_$reconnect entry ();
		call xmail_window_manager_$reconnect ();
		go to START;
	     end;

	call window_$clear_window (iox_$user_output, code);
	if code ^= 0 then call xmail_error_$no_print (code, NAME, "l", "Unable to clear user_io window. This is an internal programming error.");

START:

	display_needed = "1"b;

	do while ("1"b);
	     call xmail_get_choice_$dm (menup, "", "", "", BEGIN_USAGE, display_needed, (initial_menu_help), choice, code);
	     if saw_lifetime_init_info = "no"
	     then do;
		call xmail_value_$set ("saw_lifetime_init_info", "yes", "", code);
		if code ^= 0
		then call xmail_error_$no_code (code, NAME, "l", "Unable to set info in user value segment. This is an internal programming error.");
		initial_menu_help = "";
		saw_lifetime_init_info = "yes";
	     end;
	     display_needed = "0"b;
	     if code = 0 then call PERFORM_OPTION (choice, display_needed);
	     else if code = xmail_err_$help_requested then call EXPLAIN_OPTION (choice);
	     else if code = xmail_err_$exit_now then return;
	     else do;
		call window_$bell (iox_$user_output, code);
		if code ^= 0 then call xmail_error_$no_print (code, NAME, "l", "Unable to ring terminal bell. This is an internal programming error.");
	     end;
	end;
%page;
PERFORM_OPTION: proc (opt, redisplay);

	dcl     opt		 fixed bin;
	dcl     redisplay		 bit (1) aligned;
	dcl     code		 fixed bin (35);

	call window_$clear_window (iox_$user_output, code);
	if code ^= 0 then call xmail_error_$no_print (code, NAME, "l", "Unable to clear user_io window. This is an internal programming error.");
	go to OPT (opt);

OPT (1): OPT (2): OPT (3): OPT (4): OPT (5): OPT (6):

	call xmail_display_help_ (GETTING_STARTED_HELP, translate (OPTION_NAMES (opt), "_", " "), code);
	if code ^= 0 then call xmail_error_$no_print (code, NAME, "l", "Unable to get help. This is an internal programming error.");

	return;

OPT (7):

	call xmail_Executive_Mail_ ();
	redisplay = "1"b;

	return;

     end PERFORM_OPTION;

EXPLAIN_OPTION: proc (opt);

	dcl     opt		 fixed bin;
	dcl     code		 fixed bin (35);

	call window_$clear_window (iox_$user_output, code);
	if code ^= 0 then call xmail_error_$no_print (code, NAME, "l", "Unable to clear user_io window. This is an internal programming error.");
	call xmail_display_help_ (NAME || ".gi.info", translate (OPTION_NAMES (opt), "_", " "), code);
	if code ^= 0 then call xmail_error_$no_print (code, NAME, "l", "Unable to get help. This is an internal programming error.");

     end EXPLAIN_OPTION;
%page;
GET_MENU: proc ();

	dcl     title		 char (15) init ("Getting Started");
	dcl     code		 fixed bin (35);
	dcl     xmail_create_menu_	 entry (char (*), (*) char (*) var, fixed bin, ptr, fixed bin (35));

	call xmail_create_menu_ (title, OPTION_NAMES, N_COLUMNS, menup, code);
	if code ^= 0 then call xmail_error_$no_code (code, NAME, "q",
		"A programming error has been detected which prevents the use of the ^a menu.", title);

     end GET_MENU;


%page;
%include xmail_help_infos;
%page;
%include xmail_windows;

     end xmail_Getting_Started_;
