/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-01-07,Blair), approve(86-02-26,MCR7358),
     audit(86-05-19,RBarstad), install(86-05-28,MR12.0-1062):
     Added a new entrypoint to handle the case when both the original
     and the reply are to be filed.
  2) change(86-01-17,Blair), approve(86-02-26,MCR7358),
     audit(86-05-19,RBarstad), install(86-05-28,MR12.0-1062):
     Call xmail_error_ with disposition "c" instead of "i" when the user types
     "no" to creating a new file. TR 20028.
  3) change(87-01-19,Blair), approve(87-02-05,MCR7618),
     audit(87-04-10,RBarstad), install(87-04-26,MR12.1-1025):
     Check to see whether or not we're dealing with all the messages in a
     mailbox or only the ordinary ones as indicatd by xmail_data.msgs_as_mail.
                                                   END HISTORY COMMENTS */


xmail_file_msgs_: proc ();


/* BEGIN DESCRIPTION

history:       Author unknown.

   83-07-05  DJ Schimke: Modified to use new mail_system calls and version 2
   mailboxes.

   83-10-06  DJ Schimke: Changed call to xmail_get_str_ to call to new entry
   xmail_get_str_$yes_no. Reorganized the code into two separate entrypoints:
   1) current_msgs to provide the old function of filing all messages in 
      the current_msgs structure.
   2) single_msg to provide a new message filing function for xmail_reply, 
      xmail_send_msg etc. 

   83-11-01  DJ Schimke: Changed the calling sequence of xmail_select_file_.

   84-08-21  JG Backs: Modified the error code handling of mail_system_$save_
   message call within file_message internal procedure to report a better 
   message if there was incorrect access to a save mailbox. phx18059.

   84-10-24  JG Backs: Modified the error code handling of mail_system_$save_
   message call within file_message internal procedure to report a better
   message if the file becomes full during filing.  This also required that
   the entrypoint $single_msg always set the message_num to 1, so if the file
   is full on the 1st message, internal proc print_filed_msg is not called.

   84-10-29  JG Backs: Added three new internal procedures, save_message_count,
   backout_filed_msgs, and close_file, to better handle the "mailbox_full"
   situation.  If a file becomes full during the filing of more than one
   message, the user is informed and the messages already filed are backed out.

   84-11-26  JG Backs: Modified the save_message_count internal procedure to 
   test smc_code for error_table_$noentry rather than mlsys_et_$no_savebox
   after calling mail_system_$get_message_counts.  This is the code that is 
   returned when a file does not exist and is being created.


END DESCRIPTION
*/

/* PARAMETERS */

	dcl     P_curr_msgsp	 ptr parm;	/* ptr to current msgs structure */
	dcl     P_default_file	 char (32) var parm;/* default target file           */
	dcl     P_mailbox_ptr	 ptr parm;	/* ptr to source mailbox         */
	dcl     P_msg_ptr		 ptr parm;	/* ptr to msg to be filed        */
	dcl     P_orig_msg_ptr         ptr parm;          /* ptr to original msg to file   */
          dcl     P_reply_msg_ptr        ptr parm;          /* ptr to the reply msg          */
	dcl     P_allow_selection	 bit (1) aligned parm;
						/* do we use the default file or */
						/* can we select another?        */


/* ENTRIES */

	dcl     continue_to_signal_	 entry (fixed bin (35));
	dcl     ioa_		 entry () options (variable);
	dcl     ioa_$rsnnl		 entry () options (variable);
	dcl     mail_system_$close_mailbox entry (ptr, ptr, fixed bin (35));
	dcl     mail_system_$get_message_counts entry (char (*), char (*), bit (1) aligned, fixed bin, fixed bin, fixed bin, fixed bin (35));
	dcl     mail_system_$mark_message_for_deletion entry (ptr, fixed bin (35));
	dcl     mail_system_$open_mailbox entry (char (*), char (*), ptr, char (8), ptr, fixed bin (35));
	dcl     mail_system_$read_message entry (ptr, fixed bin, fixed bin (35));
	dcl     mail_system_$save_message entry (ptr, char (*), char (*), bit (1) aligned, fixed bin (35));
	dcl     timer_manager_$sleep	 entry (fixed bin (71), bit (2));
	dcl     xmail_error_$no_code	 entry () options (variable);
	dcl     xmail_error_$code_first entry () options (variable);
	dcl     xmail_get_str_$yes_no	 entry (char (*) var, bit (1) aligned);
	dcl     xmail_select_file_	 entry (char (*), char (*), char (*), bit (1) aligned, bit (1) aligned, char (168),
				 char (32) var, bit (1) aligned, bit (1) aligned, fixed bin (35));
	dcl     xmail_validate_$curr_msgs entry (ptr, fixed bin (35));
	dcl     xmail_validate_$mbx	 entry (ptr, fixed bin (35));

/* CONSTANTS */

	dcl     ACCEPT_OLD		 bit (1) aligned int static options (constant) init ("1"b);
	dcl     ACCEPT_NEW		 bit (1) aligned int static options (constant) init ("1"b);
	dcl     CURRENT		 bit (1) aligned int static options (constant) init ("1"b);
	dcl     MY_NAME		 char (16) static options (constant) init ("xmail_file_msgs_");
	dcl     SECONDS		 bit (2) int static options (constant) init ("11"b);
	dcl     SINGLE		 bit (1) aligned int static options (constant) init ("0"b);
	dcl     SP		 char (1) aligned int static options (constant) init (" ");
	dcl     MORE_MSG		 char (12) aligned int static options (constant) init (" ... <MORE> ");

/* EXTERNAL STATIC */

	dcl     error_table_$badcall	 fixed bin (35) ext static;
	dcl     error_table_$noentry	 fixed bin (35) ext static;
	dcl     error_table_$rqover	 fixed bin (35) ext static;
	dcl     iox_$user_output	 ptr ext static;
	dcl     mlsys_et_$mailbox_full fixed bin (35) ext static;
	dcl     mlsys_et_$no_a_permission fixed bin (35) ext static;
	dcl     mlsys_et_$no_r_permission fixed bin (35) ext static;
	dcl     mlsys_et_$no_savebox	 fixed bin (35) ext static;
	dcl     mlsys_et_$savebox_created fixed bin (35) ext static;
	dcl     xmail_err_$no_curr_msgs fixed bin (35) ext static;
	dcl     xmail_err_$no_savebox	 fixed bin (35) ext static;

/* AUTOMATIC */

	dcl     add_more_msg	 bit (1) aligned;
	dcl     allow_selection	 bit (1) aligned;
	dcl     code		 fixed bin (35);
	dcl     create_if_not_found	 bit (1) aligned;
	dcl     default_file	 char (32) var;
	dcl     dir		 char (168);
	dcl     file_mode		 bit (1) aligned;
	dcl     i			 fixed bin;
	dcl     prefix		 char (32) var;
	dcl     message_count	 fixed bin;
	dcl     message_num		 fixed bin;
	dcl     message_no_string	 char (200) var;
	dcl     message_ptr		 ptr init (null);
          dcl     msg_filed_sw           bit (1) aligned;        
	dcl     needs_filing	 bit (1);
	dcl     original_message_count fixed bin;
	dcl     prompt_string	 char (256) var;
	dcl     unused_return_length	 fixed bin;
	dcl     yes_sw		 bit (1) aligned;
	dcl     unused_bit		 bit (1) aligned;

	dcl     1 auto_open_options	 like open_options;
	dcl     1 auto_close_options	 like close_options;

/* BUILTIN */

	dcl     (addr, char, length, ltrim, maxlength, null)
				 builtin;

/* CONDITIONS */

	dcl     (quit)		 condition;

/* INCLUDE FILES */

%include mlsys_mailbox;
%page;
%include mlsys_open_options;
%page;
%include mlsys_close_options;
%page;
%include window_dcls;
%page;
%include xmail_curr_msg_info;
%page;
%include xmail_data;

/* BEGIN */

	call xmail_error_$code_first (error_table_$badcall, MY_NAME, "q",
	     "This is an internal programming error.");

/* ENTRY POINTS */

current_msgs: entry (P_mailbox_ptr, P_curr_msgsp, P_default_file, P_allow_selection);

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *

   This entrypoint attempts to file all messages in the current message
   structure.  If P_allow_selection is "on", the user is prompted for a
   mailfile to file into with P_default_file (if given) as the default
   choice. It is invalid to call this entry with P_allow_selection "off"
   and P_default_file = "".
   The main work is done by the call to the file_message internal proc.
   On mailbox_full error, the user is informed, the messages already filed
   are backed out, and processing aborted by calling xmail_error_.  This
   signals quit and returns to the menu.
   On any other error, file_message prints the messages that have
   successfully been filed and then aborts by calling xmail_error_.
							
  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

	call xmail_validate_$mbx (P_mailbox_ptr, code);
	if code ^= 0
	then call xmail_error_$no_code (code, MY_NAME, "q", "Invalid mailbox structure.  This is an internal programming error.");

	if P_curr_msgsp = null
	then call xmail_error_$code_first (xmail_err_$no_curr_msgs, MY_NAME, "i");
	else do;
	     call xmail_validate_$curr_msgs (P_curr_msgsp, code);
	     if code ^= 0
	     then call xmail_error_$no_code (code, MY_NAME, "q", "Invalid message structure.  This is an internal programming error.");

	end;

	curr_msgsp = P_curr_msgsp;
	mailbox_ptr = P_mailbox_ptr;
	default_file = P_default_file;
	allow_selection = P_allow_selection;
	file_mode = CURRENT;
	msg_filed_sw = "0"b;

	if allow_selection then do;
	     call xmail_select_file_ ("mail file", "sv.mbx", (default_file), ACCEPT_OLD, ACCEPT_NEW, dir, prefix, create_if_not_found, unused_bit, code);
	     if code ^= 0 then go to CURRENT_EXIT;	/* Diagnostic msg already issued by xmail_select_file_. */
	end;
	else do;					/* for archive etc */
	     dir = xmail_data.mail_dir;
	     prefix = default_file;
	     create_if_not_found = "1"b;
	end;

	message_no_string = "";
	add_more_msg = "0"b;
	message_count = curr_msgs.count;

/* If there is more than 1 message, save total count of messages before
   filing in case mail file becomes full and messages have to be deleted. */

	if message_count > 1
	then call save_message_count;

/* Loop for every message to be filed */

	do i = 1 to curr_msgs.count;
	     message_num = curr_msgs.numbers (i);
	     if mailbox.messages (message_num).message_ptr = null
	     then do;
		call mail_system_$read_message (mailbox_ptr, message_num, code);
		if code ^= 0
		then call xmail_error_$no_code (code, MY_NAME, "l", "Unable to read message ^d. This is an internal programming error.", message_num);
	     end;
	     message_ptr = mailbox.messages (message_num).message_ptr;
	     call file_message;			/* this call does the work */
	     if length (message_no_string) + length (ltrim (char (message_num))) + length (SP) > maxlength (message_no_string)
	     then add_more_msg = "1"b;
	     else message_no_string = message_no_string || ltrim (char (message_num)) || SP;
	end;

          if msg_filed_sw
	     then call print_filed_msg;
	P_default_file = prefix;
	
CURRENT_EXIT:
	return;

single_msg: entry (P_msg_ptr, P_default_file, P_allow_selection);

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
/*								        */
/* This entry point performs the same function as the above entry except that	        */
/* it takes a single message ptr as input and files only that message. This	        */
/* allows send_message, reply_message etc. to call a common routine for filing.	        */
/*								        */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

  

	file_mode = SINGLE;
	msg_filed_sw = "0"b;
	
	message_count = 1;				/* always 1 in case of problems in filing */
	message_ptr = P_msg_ptr;
	default_file = P_default_file;
	allow_selection = P_allow_selection;

	if allow_selection then do;
	     call xmail_select_file_ ("mail file", "sv.mbx", (default_file), ACCEPT_OLD, ACCEPT_NEW, dir, prefix, create_if_not_found, unused_bit, code);
	     if code ^= 0 then go to SINGLE_EXIT;	/* Diagnostic msg already issued by xmail_select_file_. */
	end;
	else do;					/* for archive etc */
	     dir = xmail_data.mail_dir;
	     prefix = default_file;
	     create_if_not_found = "1"b;
	end;

	call file_message;

	if msg_filed_sw 
	     then call ioa_ ("Message filed in ""^a"".", prefix);
	P_default_file = prefix;

SINGLE_EXIT:

	return;

original_and_reply: entry (P_orig_msg_ptr, P_reply_msg_ptr, P_default_file, P_allow_selection);
		

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* This entry point performs the same function as the above entry except that it takes	*/
	/* two message pointers as input; the pointer to the original message and the pointer to	*/
	/* the message created from the reply. This entry is called only by reply_message when	*/
	/* the original is to be filed before the reply. Because of the need to preserve backing	*/
	/* out previously filed messages when a file is full ( which makes two calls to		*/
	/* single_msg useless), and the fact that both messages aren't in the same mailbox) this	*/
	/* entry point seems to be the only alternative.					*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	file_mode = SINGLE;

	msg_filed_sw = "0"b;
	message_count = 1;
	message_ptr = P_orig_msg_ptr;
	default_file = P_default_file;
	allow_selection = P_allow_selection;
	
	if allow_selection then do;
	     call xmail_select_file_ ("mail file", "sv.mbx", (default_file), ACCEPT_OLD, ACCEPT_NEW, dir, prefix,create_if_not_found, unused_bit, code);
	     if code ^= 0 then go to ORIG_AND_REPLY_EXIT;
	     end;
	else do;
	     dir = xmail_data.mail_dir;
	     prefix = default_file;
	     create_if_not_found = "1"b;
	     end;
	
	call file_message;
	if msg_filed_sw
	     then call ioa_ ("Original filed in ""^a"".", prefix);
	else
	     call ioa_ ("Original was not filed.");
		
	message_count = 2;
	message_ptr = P_reply_msg_ptr;
	msg_filed_sw = "0"b;
		
	call file_message;
	if msg_filed_sw
	     then do;
	     call ioa_ ("Message filed in ""^a"".", prefix);
	     P_default_file = prefix;
	     end;
	else
	     P_default_file = "";
		
	
ORIG_AND_REPLY_EXIT:
	
	return;

/* INTERNAL PROCEDURES */

file_message: proc;


	needs_filing = "1"b;
	do while (needs_filing);
	     call mail_system_$save_message (message_ptr, dir, (prefix), create_if_not_found, code);
	     if code = 0
	     then do;
		needs_filing = "0"b;
		msg_filed_sw = "1"b;
		end;
	     
	     else if code = mlsys_et_$no_savebox
	     then do;
		call ioa_$rsnnl ("The specified mail file ""^a"" does not exist.^/Do you wish to create it?  ", prompt_string, unused_return_length, prefix);
		call xmail_get_str_$yes_no (prompt_string, yes_sw);
		if yes_sw then create_if_not_found = "1"b;
		else if xmail_data.cleanup_signalled
		then call xmail_error_$no_code (xmail_err_$no_savebox, MY_NAME, "i",
		     "No messages have been filed.");
		else do;
		     call xmail_error_$no_code (xmail_err_$no_savebox, MY_NAME, "c", "No messages have been filed.");
		     needs_filing = "0"b;
		     msg_filed_sw = "0"b;
		     P_default_file = "";
		     goto CURRENT_EXIT;
		     end;
	     end;

	     else if code = mlsys_et_$savebox_created
	     then do;
		call ioa_ ("The mail file ""^a"" has been created.", prefix);
		msg_filed_sw = "1"b;
		needs_filing = "0"b;
	     end;

/* If directory or file has become full, inform user and backout previosly
   filed messages if no. of messages was greater than one.   */

	     else if code = error_table_$rqover
	     then do;
		if message_count = 1
		then call xmail_error_$no_code (code, MY_NAME, "q", "Unable to file message.  Your directory is full.");
		else do;
		     call ioa_ ("Unable to continue filing.  Your directory is full.");
		     call backout_filed_msg;
		     call xmail_error_$no_code (code, MY_NAME, "q", "Filing terminated because the directory was full.^/  No messages were filed.");
		end;
	     end;

	     else if code = mlsys_et_$mailbox_full
	     then do;
		if message_count = 1
		then call xmail_error_$no_code (code, MY_NAME, "q", "Unable to file message. The ""^a"" file is full.", prefix);
		else do;
		     call ioa_ ("Unable to continue filing.  The ""^a"" file is full.", prefix);
		     call backout_filed_msg;
		     call xmail_error_$no_code (code, MY_NAME, "q", "Filing terminated because the ""^a"" file was full.^/  No messages were filed.", prefix);
		end;
	     end;

	     else if code = mlsys_et_$no_a_permission
	     then call xmail_error_$no_code (code, MY_NAME, "q", "  Unable to file message.  You do not have access to the ""^a"" mail file.", prefix);

	     else do;
		if file_mode = CURRENT then do;
		     call print_filed_msg;
		     call xmail_error_$no_code (code, MY_NAME, "q", "Unable to file msg^[ ^d.^;.^] This is an internal programming error.", (message_num > 0), message_num);
		end;
		else call xmail_error_$no_code (code, MY_NAME, "q", "Unable to file msg. This is an internal programming error.");
		needs_filing = "0"b;
	     end;
	end;					/* while need filing */

     end file_message;

print_filed_msg: proc;

/* Lists the messages that have been successfully filed. */

	call ioa_ ("Message^[s^;^] ^a ^[^a^;^s^] filed in ""^a"".", (curr_msgs.count > 1), message_no_string, add_more_msg, MORE_MSG, prefix);
     end print_filed_msg;

save_message_count: proc ();

/* This new internal procedure will save the original message count where 
   messages are to be filed, to be used in case file becomes full  */

	dcl     smc_code		 fixed binary (35);

/* BEGIN */

	smc_code = 0;
	original_message_count = 0;

	call mail_system_$get_message_counts (dir, (prefix || ".sv"), "1"b, (0), original_message_count, (0), smc_code);
	if smc_code = mlsys_et_$no_r_permission
	then call xmail_error_$no_code (smc_code, MY_NAME, "q", "You do not have access to read the ""^a"" mail file.", prefix);
	else if smc_code = error_table_$noentry
	then original_message_count = 0;
	else if smc_code ^= 0
	then call xmail_error_$no_code (smc_code, MY_NAME, "q", "Unable to determine message count on ""^a"" mail file.  This file cannot be used.", prefix);
	return;

     end save_message_count;

backout_filed_msg: proc ();

/* This new internal procedure will delete all the current messages, if more
   than one, that were filed just before the mailbox full error. It uses the
   original message count determined in save_message_count proc.   */

	dcl     bfm_code		 fixed binary (35);
	dcl     bfm_mailbox_ptr	 ptr;
	dcl     bfm_message_ptr	 ptr;

/* BEGIN */

	call ioa_ ("^/  Backing out partially stored messages.  This may take awhile...");
	bfm_code = 0;
	bfm_mailbox_ptr = null ();
	bfm_message_ptr = null ();

	on condition (quit)
	     begin;
		if bfm_mailbox_ptr ^= null ()
		then do;
		     call ioa_ ("Closing file.  Partially stored messages may not be all backed out.");
		     call close_file;
		end;
		call continue_to_signal_ ((0));
	     end;

/* Set up to open mailbox to discard the already filed messages. */

	if xmail_data.msgs_as_mail then
	auto_open_options.message_selection_mode = ALL_MESSAGES;
	else auto_open_options.message_selection_mode = ORDINARY_MESSAGES;
	auto_open_options.version = OPEN_OPTIONS_VERSION_2;
	auto_open_options.sender_selection_mode = ACCESSIBLE_MESSAGES;
	auto_open_options.message_reading_level = READ_KEYS;

	call mail_system_$open_mailbox (dir, (prefix || ".sv"), addr (auto_open_options), MAILBOX_VERSION_2, bfm_mailbox_ptr, bfm_code);
	if bfm_code ^= 0
	then call xmail_error_$no_code (bfm_code, MY_NAME, "q", "Unable to open ""^a"" mail file to backout partially filed messages.", prefix);

	do i = original_message_count + 1 to bfm_mailbox_ptr -> mailbox.n_messages;
	     if bfm_mailbox_ptr -> mailbox.messages (i).message_ptr = null ()
	     then do;
		call mail_system_$read_message (bfm_mailbox_ptr, i, bfm_code);
		if bfm_code ^= 0
		then call xmail_error_$no_code (bfm_code, MY_NAME, "l", "Unable to read message ^d while backing out partially filed messages.", i);
	     end;
	     bfm_message_ptr = bfm_mailbox_ptr -> mailbox.messages (i).message_ptr;
	     call mail_system_$mark_message_for_deletion (bfm_message_ptr, bfm_code);
	     if bfm_code ^= 0
	     then call xmail_error_$no_code (bfm_code, MY_NAME, "l", "Unable to backout filed message ^d from ""^a"" mail file.", i, prefix);
	end;

/* After all messages are discarded, close mailbox, which will actually delete
   the messages, then clear window */

	call close_file;
	call timer_manager_$sleep (4, SECONDS);		/* give user time to read */
	call window_$clear_window (iox_$user_output, (0));/* ignore code */
	return;

close_file: proc;

/* Internal procedure to close mail file that was opened to delete messages.
   Called from backout_filed_msg and if quit during backout_filed_msg. */

	auto_close_options.version = CLOSE_OPTIONS_VERSION_2;
	auto_close_options.flags.perform_deletions = "1"b;
	auto_close_options.flags.report_deletion_errors = "0"b;
	auto_close_options.flags.mbz = "0"b;

	call mail_system_$close_mailbox (bfm_mailbox_ptr, addr (auto_close_options), bfm_code);
	if bfm_code ^= 0
	then call xmail_error_$no_code (bfm_code, MY_NAME, "l", "Unable to close ""^a"" mail file after backing out partially filed messages.", prefix);
	return;

     end close_file;

     end backout_filed_msg;

     end xmail_file_msgs_;

