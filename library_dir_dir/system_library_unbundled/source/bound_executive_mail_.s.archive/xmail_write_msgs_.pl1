/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */

xmail_write_msgs_: proc (xwm_mailbox_ptr, xwm_curr_msgsp);

/* BEGIN DESCRIPTION

function: This procedure writes a copy of the current message(s) to a
          Multics segment in a format similar to that which is
          displayed with the "Display" request.  It is executed when
          the "Write" request on either the "Process Incoming Mail"
          or "Process Filed Mail" menu is selected.

description: The user is prompted for a file name. If the segment does
             not exist, it is created and the current message(s) are
             written to it. If it does exist, the current message(s)
             will be appended to the end.

known bugs:  This code does not check for the remote possibility that
             the user has rw permission on the segment to be written,
             but null access to the directory containing that segment.
             Call to adjust_bit_count_ will fail. JG Backs 84-07-18.

history:  

   84-07-12  JG Backs: Written from xmail_dprint_msgs_.pl1 

   84-11-07  JG Backs: Deleted "This is an internal programming error."
   from the error message at the call to subroutine adjust_bit_count_.
   Audit change.

END DESCRIPTION
*/

/* PARAMETERS */

	dcl     (xwm_mailbox_ptr, xwm_curr_msgsp) ptr;	/* input pointers to mailbox and current messages */


/* EXTERNAL STATIC */

	dcl     error_table_$incorrect_access fixed bin (35) ext static;
	dcl     error_table_$noentry	 fixed bin (35) ext static;
	dcl     xmail_err_$no_curr_msgs fixed bin (35) ext static;

/* ENTRIES */

	dcl     adjust_bit_count_	 entry (char (168) aligned, char (32) aligned, bit (1) aligned,
				 fixed bin (35), fixed bin (35));
	dcl     delete_$ptr		 entry (ptr, bit (6) aligned, char (*), fixed bin (35));
	dcl     expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     hcs_$append_branch	 entry (char (*), char (*), fixed bin (5), fixed bin (35));
	dcl     hcs_$set_bc		 entry (char (*), char (*), fixed bin (24), fixed bin (35));
	dcl     hcs_$status_minf	 entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35));
	dcl     initiate_file_	 entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
	dcl     ioa_		 entry () options (variable);
	dcl     ioa_$ioa_switch_nnl	 entry () options (variable);
	dcl     iox_$attach_name	 entry (char (*), ptr, char (*), ptr, fixed bin (35));
	dcl     iox_$close		 entry (ptr, fixed bin (35));
	dcl     iox_$destroy_iocb	 entry (ptr, fixed bin (35));
	dcl     iox_$detach_iocb	 entry (ptr, fixed bin (35));
	dcl     iox_$open		 entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
	dcl     iox_$user_io	 ptr ext static;
	dcl     unique_chars_	 entry (bit (*)) returns (char (15));
	dcl     window_$clear_window	 entry (ptr, fixed bin (35));
	dcl     xmail_display_msgs_$ff entry (ptr, ptr, ptr);
	dcl     xmail_error_$code_first entry () options (variable);
	dcl     xmail_get_str_	 entry (char (*) var, (*) char (*) var, char (*), char (*), char (*) var);
	dcl     xmail_validate_$curr_msgs entry (ptr, fixed bin (35));
	dcl     xmail_validate_$mbx	 entry (ptr, fixed bin (35));


/* CONDITIONS */

	dcl     cleanup		 condition;	/* QUIT handling */


/* INTERNAL AUTOMATIC */

	dcl     xwm_bit_count	 fixed bin (24);	/* bit count of segment */
	dcl     xwm_code		 fixed bin (35);	/* for output of status code during calls */
	dcl     xwm_dname		 char (168);	/* directory of segment */
	dcl     xwm_ename		 char (32);	/* entry name of segment */
	dcl     xwm_iocb_ptr	 ptr;		/* pointer to control block for I/O switch */
	dcl     xwm_new_seg		 bit (1);		/* flag; ON => new segment to be created */
	dcl     xwm_new_path	 char (200) varying;/* pathname of segment */
	dcl     xwm_seg_ptr		 ptr;		/* pointer to segment */
	dcl     xwm_type		 fixed bin (2);	/* for output of type during calls, not queried */
	dcl     xwm_unused_return_bc	 fixed bin (35);	/* for output of bit count during calls, not queried */


/* CONSTANTS */

	dcl     xwm_CHASE		 fixed bin (1) init (1) int static options (constant);
	dcl     xwm_DELETE_SEG	 bit (6) aligned init ("000100"b) int static options (constant);
	dcl     xwm_FILE_PROMPT	 char (27) varying init ("Enter the name of the file:") int static options (constant);
	dcl     xwm_LAST_CHAR	 bit (1) aligned init ("1"b) int static options (constant);
	dcl     xwm_ME_CHAR		 char (17) init ("xmail_write_msgs_") int static options (constant);
	dcl     xwm_ME_ENTRY	 entry init (xmail_write_msgs_) options (variable);
	dcl     xwm_PATH_NAME	 char (9) init ("path_name") int static options (constant);
	dcl     xwm_PROMPT_REPLIES_HELP char (28) init ("xmail_prompt_replies.gi.info") int static options (constant);
	dcl     xwm_UNUSED_BIT	 bit (1) aligned init ("0"b) int static options (constant);


/* BUILTINS */

	dcl     (codeptr, null, rtrim) builtin;


%page;
/* INCLUDE FILES */

%include access_mode_values;
%page;
%include iox_modes;
%page;
%include mlsys_mailbox;
%page;
%include mlsys_message;
%page;
%include xmail_curr_msg_info;
%page;
%include xmail_data;
%page;
%include xmail_responses;

/* BEGIN */

	xwm_iocb_ptr, xwm_seg_ptr = null;
	xwm_new_seg = "0"b;

	on cleanup call CLEANUP;

/* Validate input parameters */

	call xmail_validate_$mbx (xwm_mailbox_ptr, xwm_code);
	if xwm_code ^= 0
	then call xmail_error_$code_first (xwm_code, xwm_ME_CHAR, "q",
		"^/  Invalid mailbox structure.  This is an internal programming error.");

	if xwm_curr_msgsp = null
	then call xmail_error_$code_first (xmail_err_$no_curr_msgs, xwm_ME_CHAR, "i");
	else do;
	     call xmail_validate_$curr_msgs (xwm_curr_msgsp, xwm_code);
	     if xwm_code ^= 0
	     then call xmail_error_$code_first (xwm_code, xwm_ME_CHAR, "q",
		     "^/  Invalid message structure. This is an internal programming error.");
	end;

	curr_msgsp = xwm_curr_msgsp;
	mailbox_ptr = xwm_mailbox_ptr;

/* Request input of file name (segment) */

	xwm_new_path = "";
	do while (xwm_new_path = "");
	     call xmail_get_str_ (xwm_FILE_PROMPT, "", xwm_PROMPT_REPLIES_HELP, xwm_PATH_NAME, xwm_new_path);
	     if xwm_new_path = ""
	     then call ioa_ ("^/  You must provide a file name.");
	     if xwm_new_path = LIST
	     then do;
		call ioa_ ("^/  A list of all possible files you can write to is not available with ??");
		xwm_new_path = "";
	     end;
	end;					/* do while */

	call expand_pathname_ ((xwm_new_path), xwm_dname, xwm_ename, xwm_code);
	if xwm_code ^= 0
	then call xmail_error_$code_first (xwm_code, xwm_ME_CHAR, "q",
		"^/  ""^a"" is not a valid file name.", xwm_new_path);

/* Determine status of segment name */

	call hcs_$status_minf (xwm_dname, xwm_ename, xwm_CHASE, xwm_type, xwm_bit_count, xwm_code);
	if xwm_code ^= 0
	then do;
	     if xwm_code = error_table_$noentry
	     then do;
						/* Segment does not exist; create new segment */

		xwm_new_seg = "1"b;

		call hcs_$append_branch (xwm_dname, xwm_ename, RW_ACCESS_BIN, xwm_code);
		if xwm_code ^= 0
		then if xwm_code = error_table_$incorrect_access
		     then call xmail_error_$code_first (xwm_code, xwm_ME_CHAR, "q",
			     "^/  You do not have correct access to directory ""^a"" to create file ""^a"".",
			     xwm_dname, xwm_ename);
		     else call xmail_error_$code_first (xwm_code, xwm_ME_CHAR, "q",
			     "^/  Unable to create new file ""^a"" in directory ""^a"".",
			     xwm_ename, xwm_dname);
	     end;
	     else if xwm_code = error_table_$incorrect_access
	     then call xmail_error_$code_first (xwm_code, xwm_ME_CHAR, "q",
		     "^/  You do not have correct access to file ""^a"" in directory ""^a"".",
		     xwm_ename, xwm_dname);
	     else call xmail_error_$code_first (xwm_code, xwm_ME_CHAR, "q",
		     "^/  There is an error with file ""^a"" in directory ""^a"".",
		     xwm_ename, xwm_dname);

	end;					/* do */

/* Now try to write to segment */

	call initiate_file_ (xwm_dname, xwm_ename, RW_ACCESS, xwm_seg_ptr, xwm_bit_count, xwm_code);
	if xwm_code ^= 0
	then call xmail_error_$code_first (xwm_code, xwm_ME_CHAR, "q",
		"^/  Unable to initiate file ""^a"" in directory ""^a"".",
		xwm_ename, xwm_dname);
	call iox_$attach_name (unique_chars_ ("0"b), xwm_iocb_ptr,
	     "vfile_ " || rtrim (xwm_dname) || ">" || (xwm_ename) || " -extend", codeptr (xwm_ME_ENTRY), xwm_code);
	if xwm_code = 0
	then call iox_$open (xwm_iocb_ptr, Stream_input_output, xwm_UNUSED_BIT, xwm_code);
	if xwm_code ^= 0
	then call xmail_error_$code_first (xwm_code, xwm_ME_CHAR, "q",
		"^/  Unable to prepare output switch to file. This is an internal programming error.");

	if ^xwm_new_seg
	then call ioa_$ioa_switch_nnl (xwm_iocb_ptr, "^|");

	call xmail_display_msgs_$ff (mailbox_ptr, curr_msgsp, xwm_iocb_ptr);

	call adjust_bit_count_ ((xwm_dname), (xwm_ename), xwm_LAST_CHAR, xwm_unused_return_bc, xwm_code);
	if xwm_code ^= 0
	then call xmail_error_$code_first (xwm_code, xwm_ME_CHAR, "q",
		"^/  Unable to adjust bit count of file.");

/* Complete by destroying I/O control block pointer, clearing screen, & writing message  to user */

	call close_detach_and_destroy (xwm_iocb_ptr);

	call window_$clear_window (iox_$user_io, xwm_code);
	if xwm_code ^= 0
	then call xmail_error_$code_first (xwm_code, xwm_ME_CHAR, "q",
		"^/  Unable to clear window. This is an internal programming error.");

	call ioa_ ("Message^[s^] ^v(^d ^)^[written^;appended^] to ^a.", (curr_msgs.count > 1),
	     curr_msgs.count, curr_msgs.numbers, xwm_new_seg, xwm_ename);

	return;
%page;
/* Internal procedures */

close_detach_and_destroy: proc (cdad_iocb_ptr);

/* Internal procedure to finish with the control block pointer for the I/O switch */

/* PARAMETERS */

	dcl     cdad_iocb_ptr	 ptr;		/* input pointer to I/O control block */

/* BEGIN */

	if cdad_iocb_ptr ^= null
	then do;
	     call iox_$close (cdad_iocb_ptr, (0));	/* ignore code */
	     call iox_$detach_iocb (cdad_iocb_ptr, (0));	/* ignore code */
	     call iox_$destroy_iocb (cdad_iocb_ptr, (0)); /* ignore code */
	end;

     end close_detach_and_destroy;

CLEANUP: proc;

/* Internal procedure for cleanup condition:
            to delete non-null segment pointer if a new file,
            or restore bit count if existing file             */

/* BEGIN */

	call close_detach_and_destroy (xwm_iocb_ptr);

	if xwm_seg_ptr ^= null
	then if xwm_new_seg
	     then do;
		call delete_$ptr (xwm_seg_ptr, xwm_DELETE_SEG, "", xwm_code);
		if xwm_code = 0
		then xwm_seg_ptr = null;
	     end;
	     else call hcs_$set_bc (xwm_dname, xwm_ename, xwm_bit_count, (0)); /* ignore code */

     end CLEANUP;


     end xmail_write_msgs_;
