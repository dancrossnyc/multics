/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Begin xmail_review_defers_ */
/* Written by R. Ignagni  1/7/82 

   83-07-07 DJ Schimke: Removed unreferenced dcl of date and declared
   addr, divide, null, rtrim, and sum builtin functions.

   83-10-06 DJ Schimke: Replaced all calls to xmail_get_str_ with calls to
   xmail_get_str_$yes_no.

   84-06-21 JAFalksen: replaced date_time_$fstime/convert_date_to_binary_
		with cv_fstime_
*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
/*								        */
/* The purpose of this proc is to see if there are deferred replies in the xmail        */
/* directory that are over a certain time limit. If so, the user is querired to see if  */
/* he/she wishes to review them. If so these  will be displayed and the user will be    */
/* asked if he/she wishes to delete them				        */
/*								        */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

xmail_review_defers_: proc (file_type, file_suffix, delta);

/* Parameter */

	dcl     file_type		 char (*) parameter;
	dcl     file_suffix		 char (*) parameter;
	dcl     delta		 fixed bin;

/* External Static */

	dcl     iox_$user_output	 ptr ext static;

/* Constant */

	dcl     DELETE_SEG_FORCE	 bit (6) int static options (constant) init ("100100"b);
	dcl     NAME		 char (20) static options (constant) init ("xmail_review_defers_");
	dcl     N_MICROSECONDS_PER_DAY fixed bin (71) int static options (constant) init (86400000000); /* (60000000 * 60 * 24) */

/* Condition */

	dcl     cleanup		 condition;

/* Automatic */

	dcl     clock_now		 fixed bin (71);
	dcl     clock_then		 fixed bin (71);
	dcl     code		 fixed bin (35);
	dcl     difference		 fixed bin;
	dcl     idx		 fixed bin;
	dcl     prompt_string	 char (100) var;
	dcl     yes_sw		 bit (1) aligned;


	dcl     1 auto_status_branch	 like status_branch;

/* Entries */

	dcl     convert_date_to_binary_ entry (char (*), fixed bin (71), fixed bin (35));
	dcl     cv_fstime_		 entry (bit (36) aligned) returns (fixed bin (71));
	dcl     delete_$ptr		 entry (ptr, bit (6), char (*), fixed bin (35));
	dcl     get_system_free_area_	 entry () returns (ptr);
	dcl     hcs_$make_seg	 entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
	dcl     hcs_$star_		 entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35));
	dcl     hcs_$status_mins	 entry (ptr, fixed bin (2), fixed bin (24), fixed bin (35));
	dcl     hcs_$status_	 entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
	dcl     ioa_		 entry () options (variable);
	dcl     ioa_$rsnnl		 entry () options (variable);
	dcl     iox_$control	 entry (ptr, char (*), ptr, fixed bin (35));
	dcl     xmail_get_str_$yes_no	 entry (char (*) var, bit (1) aligned);

/* Builtin */

	dcl     (addr, divide, null, rtrim, sum) builtin;

/* Include */

%page;
%include access_mode_values;
%page;
%include status_structures;
%page;
%include star_structures;
%page;
%include xmail_data;
%page;
%include xmail_responses;

	star_entry_ptr, star_names_ptr = null;

	on condition (cleanup) call CLEANUP;

	call hcs_$star_ ((xmail_data.mail_dir), "*." || file_suffix, star_BRANCHES_ONLY, get_system_free_area_ (), star_entry_count, star_entry_ptr, star_names_ptr, (0));
	if star_entry_count > 0
	then do;
	     call convert_date_to_binary_ ("", clock_now, code); /* get current time */
	     do idx = 1 to star_entry_count;
		call hcs_$status_ ((xmail_data.mail_dir), (rtrim (star_names (idx))), 0, addr (auto_status_branch), null (), code);
		clock_then = cv_fstime_ ((auto_status_branch.short.dtu));
		difference = divide ((clock_now - clock_then), N_MICROSECONDS_PER_DAY, 17, 0);
		if difference > delta
		then do;
		     call iox_$control (iox_$user_output, "reset_more", null (), (0));
		     call ioa_$rsnnl ("You have a deferred ^a at least ^d days old. Do you wish to review it? ", prompt_string, (0), file_type, difference);
		     call xmail_get_str_$yes_no (prompt_string, yes_sw);
		     if yes_sw then call review_this_seg;
		end;
	     end;					/* end of do loop */
	end;
	call CLEANUP;
	return;

review_this_seg:
     proc;
	dcl     seg_string		 char (siz) based (seg_ptr);
	dcl     siz		 fixed bin;
	dcl     seg_ptr		 ptr;
	dcl     no_of_bits		 fixed bin (24);

	call hcs_$make_seg ((xmail_data.mail_dir), (rtrim (star_names (idx))), "", RW_ACCESS_BIN, seg_ptr, (0));
	call hcs_$status_mins (seg_ptr, 1, no_of_bits, (0));
	siz = divide (no_of_bits, 9, 17, 0);
	call ioa_ ("^/^a ^/", seg_string);
	call iox_$control (iox_$user_output, "reset_more", null (), (0));
	call ioa_$rsnnl ("Do you wish to discard the deferred ^a? ", prompt_string, (0), file_type, code);
	call xmail_get_str_$yes_no (prompt_string, yes_sw);
	if yes_sw then call delete_$ptr (seg_ptr, DELETE_SEG_FORCE, NAME, (0));
     end review_this_seg;

CLEANUP: proc;

	if star_names_ptr ^= null () then free star_names;
	if star_entry_ptr ^= null () then free star_entries;

     end CLEANUP;
     end xmail_review_defers_;

