/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-01-10,Blair), approve(86-02-26,MCR7358),
     audit(86-04-18,RBarstad), install(86-05-28,MR12.0-1062):
     Set switch to allow processing of your mail in other users' mailboxes when
     the option to Select Filed Mail is chosen.
  2) change(87-01-13,Blair), approve(87-02-05,MCR7618),
     audit(87-04-10,RBarstad), install(87-04-26,MR12.1-1025):
     Create a new option for printing deferred messages and update the prompt
     for deleting deferred messages to distinguish between deferred files and
     save files.  Error list entries 131, 132.
  3) change(87-01-19,Blair), approve(87-02-05,MCR7618),
     audit(87-04-10,RBarstad), install(87-04-26,MR12.1-1025):
     Determine whether we've been looking at all msgs or ordinary ones only
     before checking to see if we have any messages in the mailbox.
  4) change(87-08-10,Blair), approve(87-12-10,MCR7818),
     audit(87-12-23,LJAdams), install(88-01-12,MR12.2-1013):
     Initialize the reply-to field in the message header of a new
     message.
                                                   END HISTORY COMMENTS */


xmail_Send_Mail_: proc (what_next);

/* BEGIN DESCRIPTION

function:

history:     Written by P. Kizivat, format: style1

             Extensively modified by R. Ignagni 

   83-06-27  DJ Schimke: Modified to use new mail_system calls and version 2
   mailboxes.

   83-10-04  DJ Schimke: Added calls to xmail_get_str_$yes_no to handle all
   yes/no type questions. Restructured the code to remove coding standards
   violations and satisfy audit.

   83-11-01  DJ Schimke: Changed the calling sequence of xmail_select_file_.

   84-07-03  DJ Schimke: Modified to use a three-column menu format changing
   the calls to xmail_create_emnu_ to include a N_COLUMNS parameter.

   84-08-08  JG Backs: Modified for the addition of blind carbon copies (bcc).

   84-10-02  JG Backs: Modified the code at OPT (7) in PERFORM_OPTION proc to
   stay in Send Mail Menu if there are no messages in "incoming" mailbox.

   84-11-14  JG Backs: Deleted a call to window_$clear_window in the internal
   procedure CLEAN_UP, so there would be no screen output if cleanup condition.

END DESCRIPTION
*/

/* PARAMETERS */

	dcl     what_next		 char (9);

/* AUTOMATIC */

	dcl     choice		 fixed bin;
	dcl     code		 fixed bin (35);
	dcl     display_needed	 bit (1) aligned;
	dcl     message_count, ordinary_message_count, total_message_count fixed bin;
	dcl     return_to_caller	 bit (1) aligned;
	dcl     sm_area_ptr		 ptr;
	dcl     yes_sw		 bit (1) aligned;
	dcl     unused_bit		 bit (1) aligned;
	dcl     unused_bit2		 bit (1) aligned;

/* BASED */

	dcl     send_mail_area	 area based (sm_area_ptr);

/* BUILTINS */

	dcl     (null, rtrim, translate) builtin;

/* CONDITIONS */

	dcl     (cleanup, program_interrupt, xmail_redisplay_menu, quit) condition;

/* CONSTANTS */

	dcl     ACCEPT_OLD		 init ("1"b) bit (1) aligned
				 int static options (constant);
	dcl     ALLOW_SELECTION	 init ("1"b) bit (1) aligned
				 int static options (constant);
	dcl     COUNT_BY_TYPE	 init ("1"b) bit (1) aligned
				 int static options (constant);
	dcl     DELETE_SEGMENT_FORCE	 init ("100100"b) bit (6)
				 int static options (constant);
	dcl     DELETE_SEGMENT_FORCE_CHASE
				 init ("100101"b) bit (6)
				 int static options (constant);
	dcl     DONT_ACCEPT_NEW	 init ("0"b) bit (1) aligned
				 int static options (constant);
	dcl     MENU_HEADING	 init ("Send Mail") char (9)
				 int static options (constant);
	dcl     NAME		 init ("xmail_Send_Mail_") char (16)
				 int static options (constant);
	dcl     N_COLUMNS		 init (3) fixed bin
				 int static options (constant);
	dcl     OPTION_NAMES	 int static options (constant) init (
				 "New Message",
				 "Deferred Message",
				 "File Sent Message",
				 "Print Sent Message",
	                               "Print Deferred Msg",
				 "Discard Deferred Msg",
				 "Mailing Lists",
				 "Process Incoming Mail",
				 "Process Filed Mail"
				 ) dim (9) char (30) varying;

/* EXTERNAL STATIC */

	dcl     iox_$user_output	 ptr external static;
	dcl     xmail_err_$help_requested ext static fixed bin (35);
	dcl     xmail_err_$exit_now	 ext static fixed bin (35);

/* ENTRIES */

	dcl     delete_$ptr		 entry (ptr, bit (6), char (*), fixed bin (35));
	dcl     get_system_free_area_	 entry () returns (ptr);
	dcl     ioa_		 entry options (variable);
	dcl     ioa_$rsnnl		 entry () options (variable);
	dcl     mail_system_$free_message entry (ptr, fixed bin (35));
	dcl     mail_system_$free_address_list entry (ptr, fixed bin (35));
	dcl     mail_system_$get_message_counts entry (char (*), char (*), bit (1) aligned, fixed bin, fixed bin, fixed bin, fixed bin (35));
	dcl     xmail_create_menu_	 entry (char (*), (*) char (*) var,
				 fixed bin, ptr, fixed bin (35));
	dcl     xmail_display_help_	 entry (char (*), char (*), fixed bin (35));
	dcl     xmail_error_$no_code	 entry options (variable);
	dcl     xmail_get_choice_	 entry (ptr, char (*), char (*), char (*), char (*), bit (1) aligned, char (*), fixed bin, fixed bin (35));
	dcl     xmail_get_str_$yes_no	 entry (char (*) var, bit (1) aligned);
	dcl     xmail_select_file_$caller_msg entry (char (*), char (*), char (*), bit (1) aligned, bit (1) aligned, char (168), char (32) var, char (*), bit (1) aligned, bit (1) aligned, fixed bin (35));
	dcl     xmail_window_manager_$reconnect entry ();

/* INTERNAL STATIC */

	dcl     menup		 int static ptr init (null);

/* INCLUDE FILES */

%include area_info;
%page;
%include menu_dcls;
%page;
%include xmail_help_infos;
%page;
%include xmail_send_mail;
%page;
%include xmail_windows;
%page;
%include xmail_data;
%page;
%include window_dcls;
%page;
%include star_structures;

/* BEGIN */

	on condition (xmail_redisplay_menu) begin;
		if menup ^= null ()
		then call menu_$display (xmail_windows.menu.iocb, menup, (0)); /* error ignored, no recovery */
	     end;

	if menup = null then do;
	     call xmail_create_menu_ (MENU_HEADING, OPTION_NAMES, N_COLUMNS, menup, code);
	     if code ^= 0 then call xmail_error_$no_code (code, NAME, "q", "A program error has occurred which prevents the use of the ^a menu.", MENU_HEADING);
	     if menup = null then go to EXIT;
	end;

	call window_$clear_window (iox_$user_output, (0));/* ignore error */

	sm_area_ptr = get_system_free_area_ ();

	send_mail_info_ptr = null ();
	on condition (cleanup) call CLEAN_UP;

	allocate send_mail_info in (send_mail_area) set (send_mail_info_ptr);

/* Initialize the message status  */

	send_mail_info.send_mail_area_ptr = sm_area_ptr;
	send_mail_info.msg_exists = "0"b;
	send_mail_info.emacs_seg_ptr = null ();
	send_mail_info.stored_seg_ptr = null ();
	send_mail_info.new_msg_ptr = null ();
          send_mail_info.reply_to_list_ptr = null ();
	send_mail_info.to_list_ptr = null ();
	send_mail_info.cc_list_ptr = null ();
	send_mail_info.bcc_list_ptr = null ();
	send_mail_info.emacs_seg_pathname = "";


	on condition (program_interrupt) goto START;
	on condition (quit)
	     begin;
		call xmail_window_manager_$reconnect ();
		go to START;
	     end;


START:

	display_needed = "1"b;
	return_to_caller = "0"b;
	do while ("1"b);
	     if return_to_caller then goto EXIT;
	     call xmail_get_choice_ (menup, "", "", "", xmail_data.normal_usage, display_needed, "", choice, code);
	     display_needed = "0"b;
	     if code = 0
	     then call PERFORM_OPTION (choice, display_needed);
	     else if code = xmail_err_$help_requested then call EXPLAIN_OPTION (choice);

	     else if code = xmail_err_$exit_now then go to EXIT;

	     else call window_$bell (xmail_windows.menu.iocb, (0)); /* ignore error */
	end;

EXIT:	return;

/* INTERNAL PROCEDURES */

PERFORM_OPTION: proc (opt, redisplay);

/* PARAMETERS */
	dcl     opt		 fixed bin;
	dcl     redisplay		 bit (1) aligned;

/* AUTOMATIC */

	dcl     prompt_string	 char (80) var;
	dcl     star_entry_count	 fixed bin;
	dcl     defer_dir		 char (168);
	dcl     defer_file		 char (32) var;

/* ENTRIES */

	dcl     xmail_Consult_Files_	 entry ();
	dcl     xmail_Review_Mlist_	 entry ();
          dcl     xmail_dprint_mlist_ entry (char(*), char(*));
	dcl     xmail_file_msgs_$single_msg entry (ptr, char (32) var, bit (1) aligned);
	dcl     xmail_prepare_msg_	 entry (bit (1));
	dcl     xmail_send_mail_print_msg_ entry ();
	dcl     xmail_send_stored_msg_ entry ();
	dcl     iox_$control	 entry (ptr, char (*), ptr, fixed bin (35));
	dcl     hcs_$star_		 entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35));
	dcl     delete_$path	 entry (char (*), char (*), bit (6), char (*), fixed bin (35));

/* BEGIN */

	call window_$clear_window (iox_$user_output, (0));
	go to OPT (opt);

OPT (1):	redisplay = "0"b;
	call xmail_prepare_msg_ ("0"b);
	go to OPT_EXIT;

OPT (2):	redisplay = "0"b;
	call xmail_send_stored_msg_ ();
	go to OPT_EXIT;

OPT (3):	redisplay = "0"b;
	if send_mail_info.msg_exists
	then call xmail_file_msgs_$single_msg (send_mail_info.new_msg_ptr, "", ALLOW_SELECTION);
	else call ioa_ ("There is no message to file.");
	go to OPT_EXIT;

OPT (4):	redisplay = "0"b;
	call xmail_send_mail_print_msg_ ();
	go to OPT_EXIT;

OPT (5):	redisplay = "0"b;

	call xmail_select_file_$caller_msg ("deferred message", "defer", "", ACCEPT_OLD, DONT_ACCEPT_NEW, defer_dir, defer_file, "Enter name of ""deferred"" message to be printed (or ?? for list)", unused_bit, unused_bit2, code);
	if code ^= 0 then goto OPT_EXIT;
	call xmail_dprint_mlist_ (defer_dir, rtrim(defer_file) || "." || "defer");
	goto OPT_EXIT;

OPT (6):	redisplay = "0"b;
	call xmail_select_file_$caller_msg ("deferred message", "defer", "", ACCEPT_OLD, DONT_ACCEPT_NEW, defer_dir, defer_file, "Enter name of ""deferred"" message to be discarded (or ?? for list)", unused_bit, unused_bit2, code);
	if code ^= 0 then go to OPT_EXIT;
	call ioa_$rsnnl ("Do you wish to discard the deferred message ""^a""? ", prompt_string, (0), defer_file, code);
	call xmail_get_str_$yes_no (prompt_string, yes_sw);
	if yes_sw then do;
	     call delete_$path (defer_dir, rtrim (defer_file) || ".defer", DELETE_SEGMENT_FORCE, NAME, code);
	     if code ^= 0 then call xmail_error_$no_code (code, NAME, "q", "Sorry, the ""deferred"" message not discarded. An internal error.");
	     call ioa_ ("Deferred message ""^a"" discarded.", defer_file);
	end;
	go to OPT_EXIT;

OPT (7):	redisplay = "1"b;
	call xmail_Review_Mlist_ ();
	go to OPT_EXIT;

OPT (8):
	xmail_data.mail_in_incoming = "1"b;
	call mail_system_$get_message_counts ((mail_dir), "incoming", COUNT_BY_TYPE, total_message_count, ordinary_message_count, (0), code);
	if xmail_data.msgs_as_mail then
	     message_count = total_message_count;
	     else message_count = ordinary_message_count;
	if message_count = 0
	then do;					/* mailbox is empty */

	     xmail_data.mail_in_incoming = "0"b;
	     call iox_$control (iox_$user_output, "reset_more", null, (0));
	     call ioa_ ("There are no messages in your ""incoming"" mailbox.");
	     call hcs_$star_ ((xmail_data.mail_dir), "*.mbx", star_ALL_ENTRIES, null (),
		star_entry_count, (null ()), (null ()), (0)); /* ignore code since star_entry_count tells us want we need to know */

	     if star_entry_count > 1
	     then do;				/* may want another incoming mailbox */
		call xmail_get_str_$yes_no ("Still wish to go to ""Process Incoming Mail""?", yes_sw);
		if ^yes_sw then go to OPT_EXIT;
	     end;
	     else go to OPT_EXIT;			/* stay in Send Mail Menu */

	end;
	call window_$clear_window (iox_$user_output, (0));
	what_next = "proc_mail";
	return_to_caller = "1"b;
	go to OPT_EXIT;

OPT (9):	redisplay = "1"b;
	xmail_data.foreign_mailbox = "1"b;
	call xmail_Consult_Files_ ();
	xmail_data.foreign_mailbox = "0"b;
	go to OPT_EXIT;

OPT_EXIT:
	return;
     end PERFORM_OPTION;

EXPLAIN_OPTION: proc (opt);

/* PARAMETERS */

	dcl     opt		 fixed bin;

/* BEGIN */

	call window_$clear_window (iox_$user_output, (0));
	call xmail_display_help_ (NAME || ".gi.info", translate (OPTION_NAMES (opt), "_", " "), (0));

     end EXPLAIN_OPTION;

CLEAN_UP: proc ();

	if send_mail_info_ptr ^= null
	then do;
	     if send_mail_info.emacs_seg_ptr ^= null ()
	     then do;
		call delete_$ptr (send_mail_info.emacs_seg_ptr, DELETE_SEGMENT_FORCE_CHASE, NAME, code);
		send_mail_info.emacs_seg_ptr = null ();
	     end;

	     if send_mail_info.new_msg_ptr ^= null ()
	     then do;
		call mail_system_$free_message (send_mail_info.new_msg_ptr, code);
		send_mail_info.new_msg_ptr = null ();
	     end;

	     if send_mail_info.to_list_ptr ^= null ()
	     then do;
		call mail_system_$free_address_list (send_mail_info.to_list_ptr, code);
		send_mail_info.to_list_ptr = null ();
	     end;

	     if send_mail_info.reply_to_list_ptr ^= null ()
	     then do;
		call mail_system_$free_address_list (send_mail_info.reply_to_list_ptr, code);
		send_mail_info.reply_to_list_ptr = null ();
	     end;

	     if send_mail_info.cc_list_ptr ^= null ()
	     then do;
		call mail_system_$free_address_list (send_mail_info.cc_list_ptr, code);
		send_mail_info.cc_list_ptr = null ();
	     end;

/* Add for bcc */

	     if send_mail_info.bcc_list_ptr ^= null ()
	     then do;
		call mail_system_$free_address_list (send_mail_info.bcc_list_ptr, code);
		send_mail_info.bcc_list_ptr = null ();
	     end;

	end;

	return;
     end CLEAN_UP;

     end xmail_Send_Mail_;
