/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


xmail_get_dyn_choice_: proc (P_dyn_menup, P_index, P_code);

/* Author unknown

   83-07-07  DJ Schimke: Removed unreferenced dcl of FIRST_MENU, HELP, 
   PREV_MENU, QUIT.
*/

/* Parameter */

	dcl     P_code		 fixed bin (35);
	dcl     P_dyn_menup		 ptr;
	dcl     P_index		 fixed bin;
	dcl     P_trailer		 bit (1) aligned;

/* Automatic */

	dcl     choice		 fixed bin;
	dcl     fkey		 bit (1) aligned;
	dcl     menu_index		 fixed bin;
	dcl     n_trailers		 fixed bin;
	dcl     option_index	 fixed bin;
	dcl     total_options	 fixed bin;
	dcl     trailer_included	 bit (1) aligned;

	dcl     1 auto_dyn_menu_req	 like dyn_menu_req;

/* Entries */

	dcl     window_$bell	 entry (ptr, fixed bin (35));
	dcl     window_$clear_window	 entry (ptr, fixed bin (35));
	dcl     xmail_dyn_menu_$display entry (ptr, fixed bin, fixed bin (35));
	dcl     xmail_dyn_menu_$get_choice entry (ptr, fixed bin, fixed bin, bit (1) aligned, fixed bin (35));
	dcl     xmail_dyn_menu_$info	 entry (ptr, ptr, fixed bin (35));
	dcl     xmail_redisplay_$all	 entry options (variable);

/* Constant */

	dcl     REDISPLAY		 init (5) fixed bin int static options (constant);
	dcl     SCROLL_UP		 init (7) fixed bin int static options (constant);
	dcl     SCROLL_DOWN		 init (6) fixed bin int static options (constant);

/* Builtin */

	dcl     (addr, divide, mod)	 builtin;

	trailer_included = "0"b;
	call MAIN;
	return;

trailer: entry (P_dyn_menup, P_index, P_trailer, P_code);

	trailer_included = "1"b;
	call MAIN;
	return;

MAIN: proc ();
	call xmail_dyn_menu_$info (P_dyn_menup, addr (auto_dyn_menu_req), P_code);
	if P_code ^= 0 then go to EXIT;

	menu_index = 0;

	do while ("1"b);
	     call xmail_dyn_menu_$display (P_dyn_menup, menu_index, P_code);
	     if P_code ^= 0 then go to EXIT;
	     call xmail_dyn_menu_$get_choice (P_dyn_menup, menu_index, choice, fkey, P_code);
	     if P_code ^= 0 then go to EXIT;
	     if ^fkey
	     then do;
		option_index = menu_index * auto_dyn_menu_req.options_per_menu + choice;
		if ^trailer_included
		then do;
		     P_index = option_index;
		     go to EXIT;
		end;
		total_options = auto_dyn_menu_req.options_per_menu * (auto_dyn_menu_req.n_menus - 1) + auto_dyn_menu_req.options_last_menu;
		if option_index = total_options
		then do;				/* trailer opt selected */
		     P_index = 0;
		     P_trailer = "1"b;
		     go to EXIT;
		end;
		if mod (option_index, auto_dyn_menu_req.options_per_menu) = 0
		then do;				/* trailer opt selected */
		     P_index = 0;
		     P_trailer = "1"b;
		     go to EXIT;
		end;
						/* regular opt selected */
		n_trailers = divide (option_index, auto_dyn_menu_req.options_per_menu, 17, 0);
		P_index = option_index - n_trailers;
		P_trailer = "0"b;
		go to EXIT;
	     end;
	     else if choice = REDISPLAY
	     then call xmail_redisplay_$all ();
	     else if choice = SCROLL_UP
	     then menu_index = mod (menu_index + 1, auto_dyn_menu_req.n_menus);
	     else if choice = SCROLL_DOWN
	     then menu_index = mod (menu_index - 1, auto_dyn_menu_req.n_menus);
	     else call window_$bell (xmail_windows.bottom.iocb, (0)); /* ignore code */
	end;					/* do while ...*/

EXIT:

	call window_$clear_window (xmail_windows.bottom.iocb, (0)); /* ignore code */
     end MAIN;

%page;
%include xmail_data;
%page;
%include xmail_windows;
%page;
%include xmail_dyn_menu_dcls;

     end xmail_get_dyn_choice_;
