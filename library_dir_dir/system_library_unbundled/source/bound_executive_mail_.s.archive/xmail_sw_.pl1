/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-02-27,Blair), approve(86-02-27,MCR7358),
     audit(86-04-21,RBarstad), install(86-05-28,MR12.0-1062):
     85-03-08 JGBacks: Deleted two unused entrypoints $update_actee and
     $update_date, plus variables, external entries, and the clock builtin
     used by them.  Format statement was also removed because it was wrong.
                                                   END HISTORY COMMENTS */


xmail_sw_:
initialize: proc ();

/* BEGIN DESCRIPTION 
history:

  Written before June 81 by S. Krupp 

  Modified  June 81 by P. Kyzivat during extensive changes to xmail 

  83-07-27 Dave Schimke: Delete dcls for unreferenced items: code, 
  convert_date_to_binary_, timer_manager_$alarm_call, and
  timer_manager_$reset_alarm_call.

  83-10-15 DJ Schimke: Cleanup the code to satisfy audit.

END DESCRIPTION
*/

/* ENTRIES */

	dcl     window_display_	 entry (ptr, (*) char (*), fixed bin (35));
	dcl     xmail_error_$no_print	 entry () options (variable);

/* BASED */

	dcl     display_window	 (xmail_windows.status.height) char (window_image_width) based (window_image_ptr);
	dcl     window_image	 (3) char (window_image_width) based (window_image_ptr);

/* BUILTINS */

	dcl     (addr, copy, divide, length, ltrim, min, string, rtrim) builtin;

/* CONSTANTS */

	dcl     LOG		 char (1) int static options (constant) init ("l");
	dcl     NAME		 char (9) int static options (constant) init ("xmail_sw_");


/* INTERNAL STATIC */

	dcl     file_field_len	 fixed bin int static;
	dcl     file_info_field_len	 fixed bin int static;
	dcl     pos_field_len	 fixed bin int static;
	dcl     usage_field_len	 fixed bin int static;
	dcl     window_image_ptr	 ptr int static;
	dcl     window_image_width	 fixed bin int static;
	dcl     static_window_image	 (3) char (132) unal static;


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
/*								        */
/* This entry is called only once per xmail invocation to initialize the status window. */
/* It sets all the internal static variables used in the other entry points.	        */
/*								        */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


	static_window_image (*) = "";
	window_image_ptr = addr (static_window_image);
	window_image_width = min (length (static_window_image (1)),
	     xmail_windows.status.width);
	string (window_image) = "";

	file_field_len, file_info_field_len = 0;
	usage_field_len = window_image_width - (file_field_len + file_info_field_len);
	pos_field_len = window_image_width;

	return;

update_file: entry (str);

	dcl     str		 char (*);

	if str ^= "" then file_field_len = 20;

	call UPDATE (1, 1, file_field_len, str);	/* file name goes on line 1, col 1 */

	if str = "" then file_field_len = 0;

	return;

update_file_info: entry (str);

	if str ^= "" then file_info_field_len = 20;

	begin;

	     dcl	   field		      char (file_info_field_len);
	     dcl	   trimmed_value	      char (length (str)) var;
	     dcl	   trimmed_len	      fixed bin;
	     dcl	   starting_col	      fixed bin;

	     starting_col = window_image_width - file_info_field_len + 1;

	     trimmed_value = ltrim (rtrim (str));
	     trimmed_len = length (trimmed_value);

	     if trimmed_len < file_info_field_len
	     then do;
		     call RIGHT_JUSTIFY ((trimmed_value), field);
		     call UPDATE (1, starting_col, file_info_field_len, field);
		end;
	     else call UPDATE (1, starting_col, file_info_field_len, str);

	     if str = "" then file_info_field_len = 0;

	     return;

	end;					/* begin */

update_position: entry (str);

	begin;

	     dcl	   field		      char (pos_field_len);
	     dcl	   trimmed_value	      char (length (str)) var;
	     dcl	   trimmed_len	      fixed bin;

	     trimmed_value = ltrim (rtrim (str));
	     trimmed_len = length (trimmed_value);

	     if trimmed_len < pos_field_len
	     then do;
		     call CENTER ((trimmed_value), field);
		     call UPDATE (2, 1, pos_field_len, field);
		end;
	     else call UPDATE (2, 1, pos_field_len, str);

	     return;

	end;					/* begin */

update_usage: entry (str);

	dcl     used_cols		 fixed bin;
	dcl     rused_cols		 fixed bin;

	if file_field_len ^= 0 & file_info_field_len ^= 0
	then used_cols = file_field_len + file_info_field_len;
	else used_cols = 2 * (file_field_len + file_info_field_len);
	rused_cols = divide (used_cols, 2, 17, 0);

	usage_field_len = window_image_width - used_cols;

	begin;

	     dcl	   field		      char (usage_field_len);
	     dcl	   trimmed_value	      char (length (str)) var;
	     dcl	   trimmed_len	      fixed bin;
	     dcl	   starting_col	      fixed bin;

	     starting_col = window_image_width - (rused_cols + usage_field_len) + 1;

	     trimmed_value = ltrim (rtrim (str));
	     trimmed_len = length (trimmed_value);

	     if trimmed_len < usage_field_len
	     then do;
		     call CENTER ((trimmed_value), field);
		     call UPDATE (1, starting_col, usage_field_len, field);
		end;
	     else call UPDATE (1, starting_col, usage_field_len, str);

	     return;

	end;					/* begin */

redisplay: entry ();

	dcl     code		 fixed bin (35);

	call window_display_ (xmail_windows.status.iocb, display_window, code);
	if code ^= 0 then call xmail_error_$no_print (code, NAME, LOG);
	return;

CENTER: proc (P_str, P_field);

	dcl     (P_str, P_field)	 char (*);
	dcl     (field_len, str_len, n_pad, l_pad) fixed bin;

	field_len = length (P_field);
	str_len = length (P_str);

	n_pad = field_len - str_len;
	l_pad = divide (n_pad, 2, 17, 0);
	P_field = copy (" ", l_pad) || P_str;

     end CENTER;

RIGHT_JUSTIFY: proc (P_str, P_field);

	dcl     (P_str, P_field)	 char (*);
	dcl     (field_len, str_len, n_pad) fixed bin;

	field_len = length (P_field);
	str_len = length (P_str);

	n_pad = field_len - str_len;

	P_field = copy (" ", n_pad) || P_str;


     end RIGHT_JUSTIFY;

UPDATE: proc (line, col, len, new_value);

	dcl     (line, col, len)	 fixed bin,
	        new_value		 char (*);
	dcl     short_new_value	 defined (new_value) char (len),
	        trunc_new_value	 defined (new_value)
				 char (len - length (TRUNCATION_STRING));
	dcl     TRUNCATION_STRING	 init (" ...") char (4) static options (constant);
	dcl     (length, rtrim)	 builtin;

	if len >= length (new_value)
	then call RAW_UPDATE (line, col, len, new_value);
	else if len <= length (TRUNCATION_STRING) | len >= length (rtrim (new_value))
	then call RAW_UPDATE (line, col, len, short_new_value);
	else do;
		call RAW_UPDATE (line, col,
		     length (trunc_new_value), trunc_new_value);
		call RAW_UPDATE (line,
		     col + length (trunc_new_value),
		     length (TRUNCATION_STRING), TRUNCATION_STRING);
	     end;


     end UPDATE;

RAW_UPDATE: proc (line, col, len, new_value);

	dcl     (line, col, len)	 fixed bin,
	        new_value		 char (*);

	dcl     field_p		 ptr,
	        field_l		 fixed bin,
	        field		 char (field_l) based (field_p);


	dcl     (addr, char, substr)	 builtin;

	field_p = addr (substr (window_image (line), col));
	field_l = len;
	if char (new_value, len) ^= field
	then field = new_value;

     end RAW_UPDATE;

%include xmail_data;
%page;
%include xmail_windows;
%page;
%include window_dcls;

     end xmail_sw_;
