/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(85-12-23,LJAdams), approve(86-03-06,MCR7358),
     audit(86-04-21,RBarstad), install(86-05-28,MR12.0-1062):
     85-04-08  JG Backs: Modified to add 4 new topics to the general help menu:
     Summary of Function-Escape Keys, User Mailbox, Date Selection, and Deferred
     Messages.  These 4 were added to GEN_HELP_CHOICES.
     85-04-17 JG Backs: Replaced all the Message Facility commands
     (accept_messages, defer_messages, print_messages) with calls to the new
     xmail_im_mgr_ module which uses the new Message Facility entrypoints for
     these functions.
  2) change(85-12-23,LJAdams), approve(86-03-06,MCR7358),
     audit(86-04-21,RBarstad), install(86-05-28,MR12.0-1062):
     Added check of xmail_data.general_help to determine if General Help is
     being displayed.  Changed "Done with Help" option to actual menu name to
     go to; i.e., "Executive Mail".  "Help" topics are now displayed as a
     separate screen.
  3) change(86-03-06,Blair), approve(86-03-06,MCR7358),
     audit(86-04-21,RBarstad), install(86-05-28,MR12.0-1062):
     Turn off the flag for cleanup_signalled when we come back to the command
     loop.  If we come back from a cleanup condition, then we know that the
     user did not type rl from multics_mode (pi also comes through the cleanup
     handler where the bit gets set).
                                                   END HISTORY COMMENTS */


/* BEGIN DESCRIPTION

History:         Written in June 81 by Paul Kyzivat 

   83-07-07  DJ Schimke: Removed several unreferenced dcl's and declared
   builtin translate.

   83-09-14  DJ Schimke: Added code to check the value of more_mode for the 
   bottom window before doing the clear_to_end_of_window call. The call to
   clear_to_end_of_window was added for more_mode=wrap (phx11860) and should
   not be done for fold mode. phx12565

   83-10-06  DJ Schimke: Replaced the call to xmail_get_str_ in GEN_HELP with
   a call to xmail_get_str_$yes_no.

   84-09-18  JG Backs: Added uppercase constants for escape sequences in main
   and GET_HELP_CHOICE procedures.

   84-09-24  JG Backs: Added "-brief" control argument to print_messages 
   command so the message "You have no messages" would not print. This is to
   make xmail compatible with the new message facility for mr11.

   84-10-16  JG Backs: Modified GET_HELP_CHOICE proc to allow actual keystrokes
   of function keys or escape sequences in getting help, instead of requiring
   the user to enter the character representations.  Code was lifted from
   xforum to make xmail more compatible with xforum.

END DESCRIPTION
*/

xmail_get_choice_: proc (menu, file, file_info, position, usage, display_needed, initial_help, choice, code);

	accepting_messages = "1"b;
	call MAIN;
	return;

/* ENTRYPOINTS */

dm:  entry (menu, file, file_info, position, usage, display_needed, initial_help, choice, code);

	accepting_messages = "0"b;
	call MAIN;
	return;

/* PARAMETERS */

	dcl     menu		 ptr;
	dcl     file		 char (*);
	dcl     file_info		 char (*);
	dcl     position		 char (*);
	dcl     usage		 char (*);
	dcl     initial_help	 char (*);
	dcl     display_needed	 bit (1) aligned;
	dcl     choice		 fixed bin;
	dcl     code		 fixed bin (35);


/* AUTOMATIC */

	dcl     redisplay		 bit (1) aligned;
	dcl     fkey		 bit (1) aligned;
	dcl     selected_create	 bit (1) aligned;
	dcl     accepting_messages	 bit (1) aligned;
	dcl     1 auto_mode_value	 automatic like mode_value;
	dcl     mode_str		 char (512);

/* CONSTANTS */

	dcl     COMMAND_LEVEL	 init (8) fixed bin static options (constant);
	dcl     COMMAND_LEVEL_C	 init (15) fixed bin static options (constant);
	dcl     FIRST_MENU		 init (2) fixed bin static options (constant);
	dcl     FIRST_MENU_C	 init (9) fixed bin static options (constant);
	dcl     HELP		 init (1) fixed bin static options (constant);
	dcl     NAME		 init ("xmail_get_choice_") char (17) static options (constant);
	dcl     PREV_MENU		 init (3) fixed bin static options (constant);
	dcl     PREV_MENU_C		 init (10) fixed bin static options (constant);
	dcl     QUIT		 init (4) fixed bin static options (constant);
	dcl     QUIT_C		 init (11) fixed bin static options (constant);
	dcl     REDISPLAY		 init (5) fixed bin static options (constant);
	dcl     REDISPLAY_C		 init (12) fixed bin static options (constant);


/* EXTERNAL STATIC */

	dcl     iox_$user_io	 ptr ext static;
	dcl     iox_$user_output	 ptr ext static;
	dcl     xmail_err_$exit_now	 ext static fixed bin (35);
	dcl     xmail_err_$help_requested ext static fixed bin (35);
	dcl     xmail_err_$gen_help_req ext static fixed bin (35);

/* ENTRIES */

	dcl     continue_to_signal_	 entry (fixed bin (35));
	dcl     iox_$control	 entry (ptr, char (*), ptr, fixed bin (35));
	dcl     iox_$modes		 entry (ptr, char (*), char (*), fixed bin (35));
	dcl     mode_string_$get_mode	 entry (char (*), char (*), ptr, fixed bin (35));
	dcl     xmail_display_help_	 entry (char (*), char (*), fixed bin (35));
	dcl     xmail_im_mgr_$accept_messages	 entry ();
	dcl     xmail_im_mgr_$defer_messages	 entry ();
	dcl     xmail_redisplay_$all	 entry ();
	dcl     xmail_multics_mode_	 entry ();
	dcl     xmail_error_$code_last entry options (variable);
	dcl     xmail_sw_$update_file	 entry (char (*));
	dcl     xmail_sw_$update_file_info entry (char (*));
	dcl     xmail_sw_$update_position entry (char (*));
	dcl     xmail_sw_$update_usage entry (char (*));
	dcl     xmail_sw_$redisplay	 entry();
	dcl     xmail_redisplay_$menu	entry options(variable);
	
/* BUILTINS */

	dcl     (addr, null) builtin;

/* CONDITIONS */

	dcl     (cleanup, xmail_leave_menu, quit) condition;

/* INCLUDE FILES */

%include function_key_data;
%page;
%include xmail_data;
%page;
%include xmail_windows;
%page;
%include menu_dcls;
%page;
%include window_dcls;
%page;
%include xmail_help_infos;
%page;
%include xmail_responses;
%page;
%include mode_string_info;

/* BEGIN */

MAIN: proc;

	on condition (cleanup) begin;
		if accepting_messages & xmail_data.interactive_msgs
		then call xmail_im_mgr_$defer_messages;
		xmail_data.general_help = "0"b;
	     end;

	code = 0;
	redisplay = display_needed;

	call xmail_sw_$update_file (file);
	call xmail_sw_$update_file_info (file_info);
	call xmail_sw_$update_position (position);
	call xmail_sw_$update_usage (usage);
	call xmail_sw_$redisplay ();

	do while (code = 0);
               if redisplay then call DISPLAY (code);
	     if code ^= 0 then go to ERROR;
	     xmail_data.cleanup_signalled = "0"b;        /* in case we came back from cleanup */
	     redisplay = "0"b;

	     if accepting_messages & xmail_data.interactive_msgs
	     then	call xmail_im_mgr_$accept_messages;

	     call iox_$modes (xmail_windows.bottom.iocb, "", mode_str, code);
	     if code ^= 0 then go to ERROR;
	     auto_mode_value.version = mode_value_version_3;
	     call mode_string_$get_mode (mode_str, "more_mode", addr (auto_mode_value), code);
	     if code ^= 0 then go to ERROR;
	     if auto_mode_value.char_value ^= "fold" then
		call window_$clear_to_end_of_window (xmail_windows.bottom.iocb, (0));

	     call menu_$get_choice (
		xmail_windows.menu.iocb,
		menu,
		xmail_data.function_key_data_ptr,
		fkey,
		choice,
		code);
	     if code ^= 0 then go to ERROR;

	     if accepting_messages & xmail_data.interactive_msgs
	     then call xmail_im_mgr_$defer_messages;

	     /*** user must have read bottom window by now ***/
	     call iox_$control (iox_$user_io, "reset_more", null, (0));

	     if ^fkey
	     then go to EXIT;

	     if choice = HELP
	     then do;
	          call GET_HELP;
		call xmail_sw_$update_usage (usage);
		call xmail_sw_$redisplay();
	     end;
	     else if choice = PREV_MENU | choice = PREV_MENU_C
	     then do;
		call window_$clear_window (iox_$user_output, (0));
		code = xmail_err_$exit_now;
	     end;
	     else if choice = FIRST_MENU | choice = FIRST_MENU_C
	     then do;
		call window_$clear_window (iox_$user_output, (0));
		signal xmail_leave_menu;
		goto xmail_data.first_label;
	     end;
	     else if choice = QUIT | choice = QUIT_C
	     then do;
		call window_$clear_window (iox_$user_output, (0));
		signal xmail_leave_menu;
		goto xmail_data.quit_label;
	     end;
	     else if choice = REDISPLAY | choice = REDISPLAY_C
	     then call xmail_redisplay_$all ();
	     else if (choice = COMMAND_LEVEL) & (xmail_data.multics_mode)
	     then call xmail_multics_mode_;
	     else if (choice = COMMAND_LEVEL_C) & (xmail_data.multics_mode)
	     then call xmail_multics_mode_;
	     else call window_$bell (xmail_windows.menu.iocb, (0));
	end;
	go to EXIT;

ERROR:	call xmail_error_$code_last (code, NAME, "s",
	     "A program error has occurred for which no " ||
	     "automatic correction is known.");

EXIT:	return;
     end MAIN;

/* INTERNAL PROCEDURES */

GET_HELP: proc;

	dcl     FUNCTION_KEY_INFO	 init ("xmail_function_keys.gi") char (22)
				 static options (constant);

	dcl     info_name		 char (2);

	dcl     xmail_display_help_	 entry (char (*), char (*), fixed bin (35)),
	        xmail_error_$code_first entry () options (variable),
	        ioa_$rsnnl		 entry () options (variable);


	call GET_HELP_CHOICE (fkey, choice, code);
	if code = xmail_err_$gen_help_req
	then do;
	     code = 0;
	     call GEN_HELP ();
	end;
	else if code ^= 0 then go to GH_EXIT;
	else do;

	     call window_$clear_window (iox_$user_output, (0));

	     if fkey then do;
		call ioa_$rsnnl ("F^d", info_name, (0), choice);
		call xmail_display_help_ (FUNCTION_KEY_INFO, info_name, code);
		if code ^= 0
		then call xmail_error_$code_first (code, NAME, "l", "Function Key ^d", choice);
		code = 0;
	     end;
	     else code = xmail_err_$help_requested;
	end;
GH_EXIT:
          xmail_data.general_help = "0"b;
	return;

     end GET_HELP;

GET_HELP_CHOICE: proc (ghc_fkey, ghc_choice, ghc_code);

/* PARAMETERS */

	dcl     ghc_code		 fixed bin (35);	/* output */
	dcl     ghc_choice		 fixed bin;	/* output */
	dcl     ghc_fkey		 bit (1) aligned;	/* output */

/* AUTOMATIC */

	dcl     ghc_highest		 fixed bin;
	dcl     ghc_prompt		 char (256) var;
	dcl     ghc_special_fkey_data_ptr ptr;
	dcl     ghc_special_fkey_data_sequence_seq_len fixed bin;
	dcl     ghc_special_fkey_seqs_ptr ptr;

/* BUILTINS */

	dcl     (index)                builtin;

/* EXTERNAL STATIC */

	dcl     xmail_err_$invalid_response ext static fixed bin (35);

/* ENTRIES */

	dcl     ioa_		 entry () options (variable);
	dcl     ioa_$rsnnl		 entry () options (variable);

/* BASED */

	dcl     ghc_special_fkey_seqs	 char (ghc_special_fkey_data_sequence_seq_len) based (ghc_special_fkey_seqs_ptr);

/* BEGIN GET_HELP_CHOICE */

	ghc_code = 0;
	ghc_special_fkey_data_ptr = null ();
	ghc_special_fkey_seqs_ptr = null ();
	function_key_data_ptr = xmail_data.function_key_data_ptr;

	on condition (cleanup) call CLEANUP;

	on condition (quit)
	     begin;
		call CLEANUP;
		call continue_to_signal_ ((0));
	     end;

	call window_$clear_window (iox_$user_output, (0));

	call ioa_$rsnnl ("Press the option or "
	     || "^[function key ^;"
	     || "escape sequence ^] "
	     || "for which you want help ^/  (or ?? for a menu of general help topics):",
	     ghc_prompt, (0), (index (xmail_data.normal_usage, "ESC") = 0));

	call ioa_ (ghc_prompt);

	function_key_data_highest = function_key_data_ptr -> function_key_data.highest + 1;
	ghc_highest = function_key_data_highest;

	allocate function_key_data set (ghc_special_fkey_data_ptr);

	ghc_special_fkey_data_ptr -> function_key_data.highest = ghc_highest - 1;
	ghc_special_fkey_data_ptr -> function_key_data = function_key_data_ptr -> function_key_data;
	ghc_special_fkey_data_ptr -> function_key_data.highest = ghc_highest;

	ghc_special_fkey_data_ptr -> function_key_data.sequence.seq_len = ghc_special_fkey_data_ptr -> function_key_data.sequence.seq_len + 2;
	ghc_special_fkey_data_sequence_seq_len = ghc_special_fkey_data_ptr -> function_key_data.sequence.seq_len;

	allocate ghc_special_fkey_seqs;

	ghc_special_fkey_seqs = function_key_seqs || "??";
	ghc_special_fkey_data_ptr -> function_key_data.function_keys (ghc_highest, KEY_PLAIN).sequence_index = ghc_special_fkey_data_sequence_seq_len - 1;
	ghc_special_fkey_data_ptr -> function_key_data.function_keys.sequence_length = 2;
	ghc_special_fkey_data_ptr -> function_key_data.sequence.seq_ptr = ghc_special_fkey_seqs_ptr;

	call menu_$get_choice (
	     xmail_windows.menu.iocb,
	     menu,
	     ghc_special_fkey_data_ptr,
	     ghc_fkey,
	     ghc_choice,
	     ghc_code);

	if ghc_code ^= 0				/* error */
	then go to GHC_EXIT;

	if ^ghc_fkey				/* option number */
	then go to GHC_EXIT;

	if ghc_choice = ghc_highest			/* ?? answer */
	then do;
	     ghc_code = xmail_err_$gen_help_req;
	     go to GHC_EXIT;
	end;

	else if ghc_choice < 9			/* first 8 choices ok */
	then go to GHC_EXIT;

	if index (xmail_data.normal_usage, "ESC") = 0

	then do;					/* function key > 8 */
	     call ioa_ ("Function key F^d has no function within Executive Mail", ghc_choice);
	     ghc_code = xmail_err_$invalid_response;
	     go to GHC_EXIT;
	end;

/* Now check for escape sequences with capital letters and switch */

	else
	     if ghc_choice = 9
	then ghc_choice = 2;
	else
	     if ghc_choice = 10
	then ghc_choice = 3;
	else
	     if ghc_choice = 11
	then ghc_choice = 4;
	else
	     if ghc_choice = 12
	then ghc_choice = 5;
	else
	     if ghc_choice = 13
	then ghc_choice = 6;
	else
	     if ghc_choice = 14
	then ghc_choice = 7;
	else
	     if ghc_choice = 15
	then ghc_choice = 8;

	else do;
	     call ioa_ ("Escape sequence has no function within Executive Mail", ghc_choice);
	     ghc_code = xmail_err_$invalid_response;
	end;

GHC_EXIT:
	call CLEANUP;
	return;

CLEANUP: proc ();

        	if ghc_special_fkey_data_ptr ^= null ()
	then free ghc_special_fkey_data_ptr -> function_key_data.sequence.seq_ptr -> ghc_special_fkey_seqs;

	if ghc_special_fkey_seqs_ptr ^= null ()
	then free ghc_special_fkey_data_ptr -> function_key_data;

     end CLEANUP;

     end GET_HELP_CHOICE;

GEN_HELP: proc ();

	dcl     GEN_HELP_CHOICES	 dim (1:20) char (31) int static options (constant)init
                                        ("Exiting Executive Mail",
				 "Function Keys",
				 "Summary of Function-Escape Keys",
				 "Help With a Prompt",
				 "Editing Mail",
				 "Summary of Editor Requests",
				 "Retrieving Erased Text",
				 "Right Margins",
				 "BREAK Key",
				 "Mail Files",
				 "User Mailbox",
				 "Current Messages",
				 "Selecting Messages",
				 "Keywords",
				 "Specifying Ranges",
				 "Searching Messages",
				 "Date Selection",
				 "Scrolling",
				 "User Names",
				 "Deferred Messages") aligned var;

	dcl     choice		 fixed bin;
	dcl     code		 fixed bin (35);
	dcl     gen_help_menup	 ptr init (null) int static;
	dcl     yes_sw		 bit (1) aligned;

	dcl     get_system_free_area_	 entry () returns (ptr);
	dcl     xmail_dyn_menu_$create_w_trailer entry ((*) char (*) aligned, char (*), ptr, ptr, ptr, fixed bin (35));
	dcl     xmail_error_$no_code	 entry () options (variable);
	dcl     xmail_error_$no_print	 entry () options (variable);
	dcl     xmail_display_help_	 entry (char (*), char (*), fixed bin (35));
	dcl     xmail_get_dyn_choice_$trailer entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
	dcl     xmail_get_str_$yes_no	 entry (char (*) var, bit (1) aligned);
	dcl     xmail_window_manager_$reconnect
				entry options(variable);
	dcl     xmail_window_manager_$suppress_menu
				entry options(variable);
	dcl     xmail_window_manager_$restore_menu 
				entry options(variable);

	dcl     (null, translate)	builtin;

	on condition (quit)
	   begin;
	   call xmail_window_manager_$reconnect;
	   goto GEN_HELP_EXIT;
	   end;
	
          xmail_data.general_help = "1"b;

	if gen_help_menup = null
	then do;
	     call xmail_dyn_menu_$create_w_trailer ((GEN_HELP_CHOICES), "<Executive Mail>", gen_help_menup, null, get_system_free_area_ (), code);
	     if code ^= 0
	     then call xmail_error_$no_code (code, NAME, "q", "Unable to create general help menu. This is an internal programming error.");
	end;

	do while ("1"b);
	     call xmail_window_manager_$suppress_menu ();
	     call xmail_get_dyn_choice_$trailer (gen_help_menup, choice, selected_create, code);
	     if selected_create then
	        go to GEN_HELP_EXIT;
	     if code ^= 0
	     then call xmail_error_$no_code (code, NAME, "q", "Unable to get general help choice. This is an internal programming error.");
	     call xmail_display_help_ (GENERAL_HELP_HELP, translate (GEN_HELP_CHOICES (choice), "_", " "), code);
	     if code ^= 0
	     then call xmail_error_$no_print (code, NAME, "l", "Unable to get help. This is an internal programming error.");
	     call xmail_get_str_$yes_no ("More help?", yes_sw);
	     if ^yes_sw then go to GEN_HELP_EXIT;
	end;

GEN_HELP_EXIT:
          call xmail_window_manager_$restore_menu ();
	call xmail_redisplay_$menu ();
	return;
     end GEN_HELP;

DISPLAY: proc (code);

	dcl     1 actual_menu_rqmts	 aligned like menu_requirements;

	dcl     xmail_err_$insuff_room_for_window ext static fixed bin (35);

	dcl     xmail_window_manager_$set_menu_window_size entry (fixed bin, fixed bin (35));
	dcl     xmail_window_manager_$set_sw_size entry (fixed bin, fixed bin (35));
	dcl     xmail_redisplay_$status_window entry ();
	dcl     xmail_redisplay_$menu	 entry ();

	dcl     (addr)		 builtin;
	dcl     code		 fixed bin (35);

	actual_menu_rqmts.version = menu_requirements_version_1;
	call menu_$describe (menu, addr (actual_menu_rqmts), code);
	if code ^= 0 then goto DISPLAY_EXIT;

	if actual_menu_rqmts.width_needed > xmail_windows.menu.width
	then code = xmail_err_$insuff_room_for_window;
	else do;
	     if position = ""
	     then call xmail_window_manager_$set_sw_size (1, code);
	     else call xmail_window_manager_$set_sw_size (2, code);
	     if code = 0
	     then do;
		call xmail_redisplay_$status_window ();
		call xmail_window_manager_$set_menu_window_size
		     (actual_menu_rqmts.lines_needed, code);
	     end;
	     if code = 0
	     then do;
		call xmail_redisplay_$menu ();
		if initial_help ^= ""
		then do;
		     call window_$clear_window (iox_$user_output, (0));
		     call xmail_display_help_ (initial_help, "", (0));
		end;
	     end;
	end;
DISPLAY_EXIT:
	return;

     end DISPLAY;

     end xmail_get_choice_;
