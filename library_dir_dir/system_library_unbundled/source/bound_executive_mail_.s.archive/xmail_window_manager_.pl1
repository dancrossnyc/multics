/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-01-28,Blair), approve(86-02-26,MCR7358),
     audit(86-04-21,RBarstad), install(86-05-28,MR12.0-1062):
     Signal reissue_query from the quit handler so that the choice menu will
     be redrawn or the question the user quit out of will be reprompted after
     a quit or a disconnect.  TRs 18711 18974.
  2) change(87-02-10,Blair), approve(87-02-10,MCR7618),
     audit(87-04-15,RBarstad), install(87-04-26,MR12.1-1025):
     Adjust the screen after a reconnect so that we don't attempt to rebuild
     menus on a reply and we print the "Editing..." line when the menus are
     suppressed on a send.  Error_list #114.
                                                   END HISTORY COMMENTS */


xmail_window_manager_: proc ();

/************************************************************************/

/* BEGIN DESCRIPTION

function:

     This subroutine handles xmail window management.  It contains the
     following entrypoints:

          create_windows       -- creates the windows needed by xmail.
			    These windows are created in the user_io
			    window.
          destroy_windows      -- destroys all of the windows created by
			    the create_windows entrypoint.
	set_sw_size          -- alters the size of the status window and
			    has the surrounding windows compensate.
	set_menu_window_size -- alters the size of the menu window and
			    has the surrounding windows compensate.
          reconnect            -- resets the window status on all windows
			    and redisplays the whole screen if it
			    was found that there is "window status
			    pending".
          reconnect_test       -- like reconnect but also returns a bit
			    indicating whether the current quit condition
			    is a reconnect quit ("1"b = reconnect).
          quit_handler         -- like reconnect_test but also queries the
   			    user if the quit is not a reconnect quit.
			    Returns "1"b  if the quit is not a reconnect
			    AND if the user says he really wants to quit.
	suppress_menu        -- resizes the bottom window to all but the
                                  size of the status window, which will display
	                        an editing message. The whole bottom window
	                        can then be used for editing. Used before
                                  call to emacs_.
	restore_menu         -- restores the previous bottom window that was
	                        saved in suppress_menu.  Used after call to 
	                        emacs_.
*/

/************************************************************************/

/* history:          Written 1/8/82 by Suzanne Krupp

   83-07-28 DJ Schimke: Removed unreferenced dcl of video_data_$terminal_iocb.
  
   83-09-14 DJ Schimke: Modified to save the original user_io iocb in xmail 
   data rather than an internal static. This allows xmail_redisplay_ to clear
   xmail's portion of the user's screen. TR 12413

   84-04-06 DJ Schimke: Corrected the reference to error_table_$badcall which 
   was incorrectly spelled "bad_call". TR 17252

   84-06-22 DJ Schimke: Changed xmail to resize user_i/o rather than syning
   user_i/o to xmail_bottom_window. This allows user specified keybindings and
   more prompts to be supported from within xmail. The code that cleared the
   overlapping regions after resizing the windows was simplified by a single
   call to clear the bottom window. xmail error list #92

   84-09-20 JG Backs: Added 2 new entrypoints, suppress_menu and restore_menu,
   to support the new personalization option "Remove Menu While Editing".

   84-11-13 JG Backs: Added a 1 bit input parameter "condition_signalled"
   to entrypoint destroy_windows, which is "1" if procedure is called during
   condition cleanup and "0" all other times.  This bit is tested to prevent
   the screen from being cleared during a true cleanup condition.  The xmail
   module was also modified because it calls this entrypoint when the user
   exits xmail, and the parameter indicates if screen output should be avoided.

END DESCRIPTION
*/

/* PARAMETERS */

	dcl     code		 fixed bin (35);
	dcl     new_window_height	 fixed bin parameter;

/* AUTOMATIC */

	dcl     any_window_status_pending
				 bit (1) aligned;
	dcl     delta		 fixed bin;
	dcl     np_code		 fixed bin (35);
	dcl     reconnect_sw	 bit (1) aligned;
	dcl     stack_ptr		 ptr;
	dcl     yes_sw		 bit (1) aligned;

	dcl     1 auto_window_status_info aligned like window_status_info;
	dcl     1 bottom_window_info	 like window_position_info;
	dcl     1 cond_info		 like condition_info;
	dcl     1 menu_window_info	 like window_position_info;
	dcl     1 status_window_info	 like window_position_info;


/* BUILTINS */

	dcl     (addr, null)	 builtin;

/* ENTRIES */

	dcl     find_condition_frame_	 entry (ptr) returns (ptr);
	dcl     find_condition_info_	 entry (ptr, ptr, fixed bin (35));
	dcl     iox_$control	 entry (ptr, char (*), ptr, fixed bin (35));
	dcl     window_$overwrite_text entry (ptr, char (*), fixed bin (35));
	dcl     window_$clear_window	 entry (ptr, fixed bin (35));
	dcl     window_$position_cursor entry (ptr, fixed bin, fixed bin, fixed bin (35));
	dcl     xmail_error_$no_code	 entry () options (variable);
	dcl     xmail_error_$no_print	 entry () options (variable);
	dcl     xmail_get_str_$yes_no	 entry (char (*) var, bit (1) aligned);
	dcl     xmail_redisplay_$all	 entry ();
	dcl     xmail_window_manager_$destroy_windows entry (bit (1));

/* CONSTANTS */

	dcl     COL1		 fixed bin init (1) int static options (constant);
	dcl     LINE1		 fixed bin init (1) int static options (constant);
	dcl     LOG		 char (1) init ("l") int static options (constant);
	dcl     MAX_SW_HEIGHT	 fixed bin init (2) int static options (constant);
	dcl     MENU_WINDOW_HEIGHT	 fixed bin init (1) int static options (constant);
	dcl     MIN_SW_HEIGHT	 fixed bin init (1) int static options (constant);
	dcl     NAME		 char (21) init ("xmail_window_manager_") int static options (constant);
	dcl     STATUS_WINDOW_HEIGHT	 fixed bin init (1) int static options (constant);
	dcl     XWMSM_HEADER	 char (45) init ("                                   Editing...") int static options (constant);

/* EXTERNAL STATIC */

	dcl     error_table_$bad_arg	 fixed bin (35) ext static;
	dcl     error_table_$badcall	 fixed bin (35) ext static;
	dcl     iox_$user_io	 ptr ext static;
	dcl     video_data_$terminal_iocb ptr ext static;
	dcl     video_et_$window_status_pending fixed bin (35) ext static;
	dcl     xmail_err_$insuff_room_for_xmail fixed bin (35) ext static;

/* INTERNAL STATIC */

	dcl     1 user_io_window_info	 like window_position_info int static;

/* BEGIN */

	call xmail_error_$no_print (error_table_$badcall, NAME, LOG);

create_windows: entry (code);

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
/*								        */
/* This entry creates the xmail windows in the user_io window. There are four xmail     */
/* windows created: a status window (top), a multics mode status window (overlaps line  */
/* 1 of status window), a menu window (middle), and a user_io window                    */
/* (bottom).							        */
/*								        */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

	code = 0;
	xmail_windows.status.iocb, xmail_windows.mm_status.iocb, xmail_windows.menu.iocb, xmail_windows.bottom.iocb = null;

	user_io_window_info.version = window_position_info_version;
	call iox_$control (iox_$user_io, "get_window_info", addr (user_io_window_info), code);
	if code ^= 0 then go to CREATE_EXIT;

	if user_io_window_info.height < xmail_windows.min_lines_needed
	then do;
	     code = xmail_err_$insuff_room_for_xmail;
	     go to CREATE_EXIT;
	end;

	call make_window ("xmail_status_window",	/* window name */
	     user_io_window_info.line,		/* line origin */
	     STATUS_WINDOW_HEIGHT,			/* height */
	     user_io_window_info.width,		/* width */
	     xmail_windows.status,			/* window info */
	     code);
	if code ^= 0
	then do;
	     call xmail_window_manager_$destroy_windows ("0"b); /* 0 = not cleanup condition */
	     go to CREATE_EXIT;
	end;

	call make_window ("xmail_mm_status_window",	/* window name */
	     user_io_window_info.line,		/* line origin */
	     1,					/* height */
	     user_io_window_info.width,		/* width */
	     xmail_windows.mm_status,			/* window info */
	     code);
	if code ^= 0
	then do;
	     call xmail_window_manager_$destroy_windows ("0"b); /* 0 = not cleanup condition */
	     go to CREATE_EXIT;
	end;

	call make_window ("xmail_menu_window",
	     user_io_window_info.line + STATUS_WINDOW_HEIGHT,
	     MENU_WINDOW_HEIGHT,
	     user_io_window_info.width,
	     xmail_windows.menu,
	     code);
	if code ^= 0 then do;
	     call xmail_window_manager_$destroy_windows ("0"b); /* 0 = not cleanup condition */
	     go to CREATE_EXIT;
	end;

	xmail_windows.bottom.iocb = iox_$user_io;
	xmail_windows.bottom.position.version = window_position_info_version_1;
	xmail_windows.bottom.position.line = user_io_window_info.line +
	     STATUS_WINDOW_HEIGHT + MENU_WINDOW_HEIGHT;
	xmail_windows.bottom.position.width = user_io_window_info.width;
	xmail_windows.bottom.position.height = user_io_window_info.height
	     - (STATUS_WINDOW_HEIGHT + MENU_WINDOW_HEIGHT);
	call iox_$control (xmail_windows.bottom.iocb, "set_window_info",
	     addr (xmail_windows.bottom.position), code);
	if code ^= 0 then do;
	     call xmail_window_manager_$destroy_windows ("0"b); /* 0 = not cleanup condition */
	     go to CREATE_EXIT;
	end;

CREATE_EXIT:
	return;					/* create_windows entry */

destroy_windows: entry (condition_signalled);

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
/*								        */
/* This entry destroys all xmail windows.				        */
/*    Input parameter indicates the following:			                  */
/*    condition_signalled = 1 to signal cleanup condition.			        */
/*    condition_signalled = 0 to signal no condition.			        */
/*								        */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/* PARAMETERS */

	dcl     condition_signalled	 bit (1);		/* input parameter */
						/* 1 = cleanup condition */
						/* 0 = no condition */

/* BEGIN */

	xmail_windows.bottom.iocb = iox_$user_io;
	xmail_windows.bottom.position.version = window_position_info_version_1;
	xmail_windows.bottom.position.line = user_io_window_info.line;
	xmail_windows.bottom.position.width = user_io_window_info.width;
	xmail_windows.bottom.position.height = user_io_window_info.height;
	call iox_$control (xmail_windows.bottom.iocb, "set_window_info",
	     addr (xmail_windows.bottom.position), (0));

/* Do not clear screen if cleanup condition was signalled */

	if ^condition_signalled
	then call window_$clear_window (xmail_windows.bottom.iocb, (0)); /* ignore error */
	call unmake_window (xmail_windows.status.iocb);
	call unmake_window (xmail_windows.mm_status.iocb);
	call unmake_window (xmail_windows.menu.iocb);

	return;					/* destroy_windows entry */

set_sw_size: entry (new_window_height, code);

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
/*								        */
/* This entry sets the size of the status window taking or giving space from/to the     */
/* menu window.							        */
/*								        */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

	code = 0;

	if new_window_height = xmail_windows.status.height
	then go to SET_SW_EXIT;

	if new_window_height < MIN_SW_HEIGHT | new_window_height > MAX_SW_HEIGHT
	then do;
	     code = error_table_$bad_arg;
	     go to SET_SW_EXIT;
	end;

	delta = new_window_height - xmail_windows.status.height;

	status_window_info = xmail_windows.status.position;
	status_window_info.height = status_window_info.height + delta;

	menu_window_info = xmail_windows.menu.position;
	menu_window_info.origin.line = menu_window_info.origin.line + delta;

	bottom_window_info = xmail_windows.bottom.position;
	bottom_window_info.height = bottom_window_info.height - delta;
	bottom_window_info.origin.line = bottom_window_info.origin.line + delta;

	call iox_$control (xmail_windows.status.iocb, "set_window_info", addr (status_window_info), code);
	if code ^= 0
	then do;
	     call reset_window_sizes ();
	     go to SET_SW_EXIT;
	end;

	call iox_$control (xmail_windows.menu.iocb, "set_window_info", addr (menu_window_info), code);
	if code ^= 0
	then do;
	     call reset_window_sizes ();
	     go to SET_SW_EXIT;
	end;

	call iox_$control (xmail_windows.bottom.iocb, "set_window_info", addr (bottom_window_info), code);
	if code ^= 0
	then do;
	     call reset_window_sizes ();
	     go to SET_SW_EXIT;
	end;

	call window_$clear_window (xmail_windows.bottom.iocb, (0)); /* ignore any error */

	xmail_windows.status.position = status_window_info;
	xmail_windows.menu.position = menu_window_info;
	xmail_windows.bottom.position = bottom_window_info;

SET_SW_EXIT:
	return;					/* set_sw_size entry */

set_menu_window_size: entry (new_window_height, code);


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
/*								        */
/* This entry sets the size of the menu window taking or giving space to/from the       */
/* bottom window.							        */
/*								        */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

	code = 0;

	if new_window_height = xmail_windows.menu.height
	then go to SET_MENU_EXIT;

	if new_window_height < 1 | new_window_height >= xmail_windows.menu.height + xmail_windows.bottom.height
	then do;
	     code = error_table_$bad_arg;
	     go to SET_MENU_EXIT;
	end;

	delta = new_window_height - xmail_windows.menu.height;

	menu_window_info = xmail_windows.menu.position;
	menu_window_info.height = menu_window_info.height + delta;

	bottom_window_info = xmail_windows.bottom.position;
	bottom_window_info.height = bottom_window_info.height - delta;
	bottom_window_info.origin.line = bottom_window_info.origin.line + delta;

	call iox_$control (xmail_windows.menu.iocb, "set_window_info", addr (menu_window_info), code);
	if code ^= 0
	then do;
	     call reset_window_sizes ();
	     go to SET_MENU_EXIT;
	end;

	call iox_$control (xmail_windows.bottom.iocb, "set_window_info", addr (bottom_window_info), code);
	if code ^= 0
	then do;
	     call reset_window_sizes ();
	     go to SET_MENU_EXIT;
	end;

	call window_$clear_window (xmail_windows.bottom.iocb, (0)); /* ignore any error */

	xmail_windows.menu.position = menu_window_info;
	xmail_windows.bottom.position = bottom_window_info;

SET_MENU_EXIT:
	return;					/* set_menu_window_size entry */

quit_handler: entry returns (bit (1) aligned);

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
/*								        */
/* This entry is called by the xmail pl1 modules that call emacs_.  It is called on a   */
/* quit condition to protect the user from accidentally quitting before the current     */
/*  action is finished (ie. the message is not saved or sent.) It returns true only if  */
/* the quit is not a reconnect quit and the user says yes to the prompt.  Either way    */
/* this entry also checks status pending for any of the windows and resets it.  If any  */
/* window had a status pending xmail_redisplay_$all is called to reset the display of   */
/*  all windows.							        */
/*								        */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

dcl  reissue_query condition;
	    

	call check_window_status;
	call check_for_reconnect (reconnect_sw);

	if reconnect_sw then do;
	     yes_sw = "0"b;		/* reconnect, don't quit */
	     signal reissue_query;
	     end;
	else do;
	     call xmail_get_str_$yes_no ("Any pending work will be lost."
		|| "  Do you really want to quit?", yes_sw); /* BREAK hit, query before quitting */
	     if ^yes_sw then
		signal reissue_query;
	     end;
			     
	return (yes_sw);

reconnect: entry ();

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
/*								        */
/* This entry is called to test for window status pending on the xmail windows and      */
/* reset it on any window that needs resetting. If any window status is pending the     */
/* xmail windows are redisplayed.					        */
/*								        */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

	call check_window_status;
	return;					/* reconnect entry */

reconnect_test: entry returns (bit (1) aligned);

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
/*								        */
/* This entry is called only by the xmail emacs extensions to determine if the quit     */
/* that they have detected is really a quit or whether it is actually a reconnect quit. */
/* It returns true if the quit is a reconnect quit, false otherwise.	                  */
/* Either way this entry also checks status pending for any of the windows and resets   */
/* it. If any window had a status pending xmail_redisplay_$all is called to reset the   */
/* display of all windows.     					        */
/*								        */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

dcl  ioa_$ioa_switch_nnl entry() options(variable);
dcl  xmail_value_$get_with_default entry options(variable);
dcl  response char (3) var;

	call check_window_status;

	call check_for_reconnect (reconnect_sw);
          if reconnect_sw then  do;
	     if (xmail_data.remove_menus & ^xmail_data.reply_request) then do;
	          call window_$clear_window (xmail_windows.status.iocb, (0));
		call window_$overwrite_text (xmail_windows.status.iocb, XWMSM_HEADER, code);
		end;
	     if xmail_data.reply_request then do;
		call xmail_value_$get_with_default ("original_up_window_yn", "yes", response, (0));
/* The following literal is found in xmail_reply_msg_ and must be duplicated here to make the screen 
   look the same.  It only appears when the original message is in an upper window and the reply is
   in a second window.  */
		if response = "yes" then call ioa_$ioa_switch_nnl (xmail_windows.menu.iocb, "     *** Use ESC l  to view previous page,  ESC h  to view next page ***");
		end;
	     end;
		     	     
	return (reconnect_sw);			/* reconnect_test entry */

suppress_menu: entry ();

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
/*                                                                          */
/*  This entry is called by xmail pl1 modules that call emacs_ with the     */
/*  personalization option "Remove Menu While Editing" in force.  The only  */
/*  exception is xmail_reply_msgs_, since that always removes the menu.     */
/*                                                                          */
/*  This entry resizes the bottom window so the previous window info can be */
/*  restored via a call to another entrypoint, restore_menu, immediately    */
/*  after emacs_ call.  By resizing the bottom window, emacs can use all    */
/*  but the status window to do the editing.                                */
/*                                                                          */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/* AUTOMATIC */

	dcl     xwmsm_code		 fixed bin (35);

/* CONSTANTS */

	dcl     XWMSM_ERROR		 char (31) init ("Cannot remove menu as requested") int static options (constant);

/* BEGIN xmail_window_manager_$suppress_menu */

	call window_$clear_window (xmail_windows.status.iocb, (0)); /* ignore code */
	call window_$overwrite_text (xmail_windows.status.iocb, XWMSM_HEADER, xwmsm_code);
	if xwmsm_code ^= 0
	then call xmail_error_$no_code (xwmsm_code, NAME, "s", XWMSM_ERROR);
	bottom_window_info = xmail_windows.bottom.position;
	delta = xmail_windows.menu.height + xmail_windows.status.height - 1;
	bottom_window_info.height = bottom_window_info.height + delta;
	bottom_window_info.origin.line = bottom_window_info.origin.line - delta;

	call iox_$control (xmail_windows.bottom.iocb, "set_window_info", addr (bottom_window_info), xwmsm_code);

	if xwmsm_code ^= 0
	then call xmail_error_$no_code (xwmsm_code, NAME, "s", XWMSM_ERROR);

	call window_$clear_window (iox_$user_io, (0));	/* ignore code */

suppress_menu_EXIT:
	return;					/* suppress_menu entry */

restore_menu: entry ();

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
/*                                                                          */
/*  This entry is used to restore the menu window by resizing the bottom    */
/*  window from the previous information.  It is called immediately         */
/*  following the call to emacs_ in those xmail modules that use the editor.*/
/*                                                                          */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/* AUTOMATIC */

	dcl     xwmrm_code		 fixed bin (35);

/* BEGIN xmail_window_manager_$restore_menu */

	call iox_$control (xmail_windows.bottom.iocb, "set_window_info", addr (xmail_windows.bottom.position), xwmrm_code);
	if xwmrm_code ^= 0
	then call xmail_error_$no_code (xwmrm_code, NAME, "s", "Cannot restore menu information");


restore_menu_EXIT:
	return;					/* restore_menu entry */

/* I N T E R N A L  P R O C E D U R E S */

check_for_reconnect: proc (reconnect_quit);

	dcl     reconnect_quit	 bit (1) aligned parameter;

	reconnect_quit = "0"b;
	cond_info.version = condition_info_version_1;
	cond_info.info_ptr = null ();
	cond_info.flags.pad1 = "0"b;
	cond_info.pad2 = "0"b;
	cond_info.pad3 = "0"b;
	stack_ptr = find_condition_frame_ (null ());
	if stack_ptr ^= null () then do;
	     call find_condition_info_ (stack_ptr, addr (cond_info), (0)); /* test cond_info.info_ptr rather than code */
	     if cond_info.info_ptr ^= null () then do;
		quit_info_ptr = cond_info.info_ptr;
		reconnect_quit = quit_info.switches.reconnection_quit;
	     end;
	end;
     end check_for_reconnect;

check_window_status: proc;

	any_window_status_pending = "0"b;

	call window_$position_cursor (xmail_windows.status.iocb, LINE1, COL1, np_code);
	if np_code = video_et_$window_status_pending
	then do;
	     call fix_status (xmail_windows.status.iocb);
	     any_window_status_pending = "1"b;
	end;
	else if np_code ^= 0 then call xmail_error_$no_print (np_code, NAME, LOG);

	call window_$position_cursor (xmail_windows.mm_status.iocb, LINE1, COL1, np_code);
	if np_code = video_et_$window_status_pending
	then do;
	     call fix_status (xmail_windows.mm_status.iocb);
	     any_window_status_pending = "1"b;
	end;
	else if np_code ^= 0 then call xmail_error_$no_print (np_code, NAME, LOG);

	call window_$position_cursor (xmail_windows.menu.iocb, LINE1, COL1, np_code);
	if np_code = video_et_$window_status_pending
	then do;
	     call fix_status (xmail_windows.menu.iocb);
	     any_window_status_pending = "1"b;
	end;
	else if np_code ^= 0 then call xmail_error_$no_print (np_code, NAME, LOG);

	call window_$position_cursor (xmail_windows.bottom.iocb, LINE1, COL1, np_code);
	if np_code = video_et_$window_status_pending
	then do;
	     call fix_status (xmail_windows.bottom.iocb);
	     any_window_status_pending = "1"b;
	end;
	else if np_code ^= 0 then call xmail_error_$no_print (np_code, NAME, LOG);

	if any_window_status_pending then call xmail_redisplay_$all ();
     end check_window_status;

fix_status: proc (P_iocb_ptr);
	dcl     P_iocb_ptr		 ptr parameter;

	auto_window_status_info.version = window_status_version;
	call iox_$control (P_iocb_ptr, "get_window_status", addr (auto_window_status_info), np_code);
	if np_code ^= 0 then call xmail_error_$no_print (np_code, NAME, LOG);
     end;

make_window: proc (name, line_origin, height, width, window, code);

/* Automatic */

	dcl     code		 fixed bin (35);
	dcl     height		 fixed bin;
	dcl     line_origin		 fixed bin;
	dcl     name		 char (*);
	dcl     width		 fixed bin;
	dcl     1 window		 aligned like xmail_window_info_format;

/* Builtin */

	dcl     (addr, null)	 builtin;

/* Entry */

	dcl     iox_$find_iocb	 entry (char (*), ptr, fixed bin (35));
	dcl     window_$create	 entry (ptr, ptr, ptr, fixed bin (35));

	window.iocb = null;
	window.position.version = window_position_info_version;
	window.position.line = line_origin;
	window.position.height = height;
	window.position.width = width;

	call iox_$find_iocb (name, window.iocb, code);
	if code = 0
	then call window_$create (video_data_$terminal_iocb, addr (window.position), window.iocb, code);

	return;
     end make_window;

unmake_window: proc (window_iocbp);

/* Parameter */

	dcl     window_iocbp	 ptr;

/* Builtin */

	dcl     null		 builtin;

/* Entries */

	dcl     window_$destroy	 entry (ptr, fixed bin (35));

	if window_iocbp ^= null
	then do;
	     call window_$destroy (window_iocbp, (0));	/* ignore code */
	     window_iocbp = null;
	end;
	return;

     end unmake_window;

reset_window_sizes: proc ();

	call iox_$control (xmail_windows.status.iocb, "set_window_info", addr (xmail_windows.status.position), (0)); /* ignore error */
	call iox_$control (xmail_windows.menu.iocb, "set_window_info", addr (xmail_windows.menu.position), (0));
	call iox_$control (xmail_windows.bottom.iocb, "set_window_info", addr (xmail_windows.bottom.position), (0));

     end reset_window_sizes;

%include condition_info;
%page;
%include condition_info_header;
%page;
%include quit_info;
%page;
%include xmail_windows;
%page;
%include window_status;
%page;
%include xmail_data;

     end xmail_window_manager_;
