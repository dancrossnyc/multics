/****^  ******************************************************
        *                                                    *
        * Copyright, (C) Honeywell Bull Inc., 1988           *
        *                                                    *
        * Copyright (c) 1986 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        * Copyright (c) 1972 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        ****************************************************** */


/****^  HISTORY COMMENTS:
  1) change(85-12-23,LJAdams), approve(86-02-26,MCR7358),
     audit(86-04-18,RBarstad), install(86-05-28,MR12.0-1062):
     85-03-12 JG Backs: Changed the "Do you wish to continue? (y/n)" message
     to "Do you still wish to enter executive_mail?" for clarity when there
     are no messages in the incoming mailbox.  Took out constants YES and NO
     and literals of "yes" and "no".  Replaced by the include file
     xmail_responses.incl.pl1.
     85-04-17 JG Backs: Replaced all the Message Facility commands
     (accept_messages, defer_messages, print_messages) with calls to the new
     xmail_im_mgr_ module which uses the new Message Facility entrypoints for
     these functions.
     85-04-18 JG Backs: Added code to check new personalization option
     confirm_print_yn, set default to yes, and set the flag in xmail_data.
  2) change(85-12-23,LJAdams), approve(86-02-26,MCR7358),
     audit(86-04-18,RBarstad), install(86-05-28,MR12.0-1062):
     Added initialization of xmail_data.general_help switch.
  3) change(86-02-27,Blair), approve(86-02-27,MCR7358),
     audit(86-04-18,RBarstad), install(86-05-28,MR12.0-1062):
     Change the auto_xmail_data structure to refere to the value seg pathname
     rather than the value seg ptr.  This change is being made so that the
     structure is initiated each time it is used and we don't have to worry
     about having an invalid pointer.
  4) change(87-01-19,Blair), approve(87-02-05,MCR7618),
     audit(87-04-14,RBarstad), install(87-04-26,MR12.1-1025):
     Check the total_messages in mailbox, not just ordinary ones so we'll
     have the ability to treat interactive msgs as mail.
  5) change(88-06-28,Blair), approve(88-07-27,MCR7959),
     audit(88-08-25,RBarstad), install(88-09-02,MR12.2-1098):
     Initialize the fkey_data_ptr to null before we enable the cleanup handler
     to avoid out_of_bounds error if we go through the handler before the ptr
     is set.
     Add code to the cleanup procedure to check for whether the xmail.error
     segment is in the pdir.  If so, and if its' bit_count is greater than 0,
     then warn the user that it exists.  XServices error-list #153.
                                                   END HISTORY COMMENTS */


xmail:
executive_mail: proc ();

/* BEGIN DESCRIPTION

function: This is the main executive mail procedure.  It sets up the user's
          xmail directory, the video system, interactive message handling
          and all data structures that are shared among the various xmail
          routines. It then calls the first menu. 

comments: Throughout xmail, the calls to the Message Facility's commands
          (accept_messages, print_messages, etc) should be changed to calls
          to the new entrypoints as soon as it is practical.

history:         Written by S. Krupp 12/14/81 

   83-06-21  DJ Schimke: Modified to use new mail_system calls and version 2
   mailboxes. Added -nim/-im (undocumented) to disable/enable the interactive
   message handling. This option should eventually be available from the
   personalize menu as suggested by phx12801. 

   83-09-14 DJ Schimke: Modified the error output from a bad control arg to 
   print the arg as well as the help message. phx13258 

   83-09-18 DJ Schimke: Modified xmail's cleanup handler to do a much better 
   job and avoid the cleanup window that existed. phx15800 phx13944
   Also added ssu_$record_usage call so the new version's use can be 
   monitored.

   83-10-05 DJ Schimke: Modified to call xmail_get_str_$yes_no rather than
   rolling its own question code. Since xmail_get_str_ uses command_query_,
   users who wish to enter xmail regardless of the fact that they have no 
   incoming mail may use answer to bypass this question. phx 15963

   83-11-04 DJ Schimke: Added undocumented control arg "-escape_sequences"
   ("-esc" for short) to control the use of escape sequences when function 
   keys are available (intended primarily for debugging purposes). 

   83-12-07 DJ Schimke: Added cleanup for the ssu invocation and fixed the
   ssu_exit entry to do nothing.

   84-09-06 JG Backs: Modified  to check for personalization options and
   set flags after call to xmail_dir_manager_$open_dir and before control
   arguments are checked.  Added checks for new personalization options:
   Display Lists As Menus, Process Interactive Messages, Always Use Escape
   Keys, Multics Command Mode.

   84-09-18 JG Backs: Modified code to make internal procedure default_fkeys
   into a separate xmail module which can be called from both xmail.pl1 and
   xmail_Review_Defaults_.pl1.  This allows function key information to be
   changed during processing.  Also modified cleanup to free ptr to function
   key data.

   84-09-24 JG Backs: Added "-brief" control argument to print_messages 
   command so the message "You have no messages" would not print. This is to
   make xmail compatible with the new message facility for mr11.

   84-10-09 JG Backs: Added a test to make sure the function_key_data_ptr
   is not null before attempting to free it, in preparation for setting up
   the default function keys.

   84-10-20 JG Backs: Modified processing of control arguments to include
   messages to the user that indicate the control argument is obsolete, but
   will be supported for MR11 release, and to please use the personalization
   options.

   84-11-04 JG Backs: Added a trailing underscore to the name of external
   procedure xmail_default_fkeys_ to coincide with the name change of that
   module.  Audit change.

   84-11-13 JG Backs: Added a 1 bit input parameter "condition_signalled"
   to internal CLEANUP proc, which is "1" if procedure is called during
   cleanup condition and "0" all other times.  This bit is tested to prevent
   any screen output during a true cleanup condition.  The call and
   declaration of xmail_window_manager_$destroy_windows was also modified
   to include an input parameter, to indicate if screen output should be
   avoided.

   84-11-28 JG Backs: Added code in the CLEANUP internal procedure to
   reset the user_io modes "more_mode=fold" if it had been previously set
   by xmail to "more_mode=wrap" in the main procedure.  The code to set
   wrap mode had been present for a long time, but did not cause any
   problems until a change was made to xmail to let the user-specified
   modes be allowed within xmail.  Also changed the initializing of the
   old_modes variable from within the declaration to a statement.  TR18542.

END DESCRIPTION
*/

/* AUTOMATIC */

	dcl     answer_yn		 char (3) var;	/* answer of yes or no */
	dcl     arg_index		 fixed bin;
	dcl     arg_len		 fixed bin (21);
	dcl     arg_ptr		 ptr;
	dcl     bit_count              fixed bin (35);
	dcl     code		 fixed bin (35);
	dcl     interactive_msgs_yn	 bit (1) aligned;
	dcl     lifetime_first_invocation char (3) var;
	dcl     messages_need_cleanup	 bit (1) aligned;
	dcl     multics_yn		 bit (1) aligned;
	dcl     no_of_args		 fixed bin;
	dcl     old_modes		 char (256);
	dcl     xmail_dir_opened	 bit (1) aligned;
	dcl     (total_message_count, ordinary_message_count ) fixed bin;
	dcl     person		 char (32);
	dcl     project		 char (32);
	dcl     prompt_string	 char (160) var;
	dcl     reason		 char (128);
	dcl     sci_ptr		 ptr;
	dcl     use_default_fkeys	 bit (1) aligned;
	dcl     video_needs_cleanup	 bit (1) aligned;
	dcl     video_was_on	 bit (1) aligned;
	dcl     yes_sw		 bit (1) aligned;

	dcl     1 auto_xmail_data	 like xmail_data;
	dcl     1 ti		 like terminal_info;

/* BASED */

	dcl     arg		 char (arg_len) based (arg_ptr);

/* BUILTINS */

	dcl     (addr, bin, codeptr, index, null, rtrim) builtin;

/* CONDITIONS */

	dcl     (cleanup, program_interrupt, quit) condition;

/* ENTRIES */

          dcl     adjust_bit_count_      entry (char(168), char(32), bit(1) aligned, fixed bin(35), fixed bin(35));
	dcl     com_err_		 entry () options (variable);
	dcl     cu_$arg_count	 entry (fixed bin, fixed bin (35));
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
          dcl     get_pdir_              entry() returns(char(168));
          dcl     ioa_		 entry () options (variable);
	dcl     ioa_$rsnnl		 entry () options (variable);
	dcl     iox_$control	 entry (ptr, char (*), ptr, fixed bin (35));
	dcl     iox_$modes		 entry (ptr, char (*), char (*), fixed bin (35));
	dcl     mail_system_$get_message_counts entry (char (*), char (*), bit (1) aligned, fixed bin, fixed bin, fixed bin, fixed bin (35));
	dcl     ssu_$destroy_invocation entry (ptr);
	dcl     ssu_$record_usage	 entry (ptr, ptr, fixed bin (35));
	dcl     ssu_$standalone_invocation entry (ptr, char (*), char (*), ptr, entry, fixed bin (35));
	dcl     timer_manager_$sleep	 entry (fixed bin (71), bit (2));
	dcl     ttt_info_$function_key_data entry (char (*), ptr, ptr, fixed bin (35));
	dcl     user_info_$whoami	 entry (char (*), char (*), char (*));
	dcl     video_utils_$turn_off_login_channel entry (fixed bin (35));
	dcl     video_utils_$turn_on_login_channel entry (fixed bin (35), char (*));
	dcl     window_$clear_window	 entry (ptr, fixed bin (35));
	dcl     xmail$ssu_exit	 entry ();
	dcl     xmail_Executive_Mail_	 entry ();
	dcl     xmail_Getting_Started_ entry ();
	dcl     xmail_default_fkeys_	 entry () returns (ptr);
	dcl     xmail_dir_manager_$close_dir entry options (variable);
	dcl     xmail_dir_manager_$open_dir entry (fixed bin (35));
	dcl     xmail_error_$no_print	 entry () options (variable);
	dcl     xmail_get_str_$yes_no	 entry (char (*) var, bit (1) aligned);
	dcl     xmail_im_mgr_$defer_messages entry ();
	dcl     xmail_im_mgr_$init     entry ();
	dcl     xmail_im_mgr_$print_messages entry ();
	dcl     xmail_im_mgr_$restore_original entry ();
	dcl     xmail_review_defers_	 entry (char (*), char (*), fixed bin);
	dcl     xmail_sw_$initialize	 entry ();
          dcl     xmail_value_$get_no_validate entry (char (*), char (*) var, fixed bin (35));
	dcl     xmail_value_$get_with_default entry (char (*), char (*) var, char (*) var, fixed bin (35));
	dcl     xmail_value_$set	 entry (char (*), char (*) var, char (*) var, fixed bin (35));
	dcl     xmail_window_manager_$create_windows entry (fixed bin (35));
	dcl     xmail_window_manager_$destroy_windows entry (bit (1));

/* EXTERNAL STATIC */

	dcl     error_table_$badopt	 fixed bin (35) ext static;
	dcl     error_table_$invalid_device fixed bin (35) ext static;
	dcl     error_table_$no_table	 fixed bin (35) ext static;
	dcl     iox_$user_io	 ptr ext static;
	dcl     video_data_$terminal_iocb ptr ext static;
	dcl     xmail_err_$exit_now	 fixed bin (35) ext static;
	dcl     xmail_err_$insuff_room_for_xmail fixed bin (35) ext static;

/* CONSTANTS */

	dcl     ALWAYS_ESCAPE	 char (21) init ("always_escape_keys_yn") int static options (constant);
	dcl     CONFIRM_PRINT	 char (16) init ("confirm_print_yn") int static options (constant);
          dcl     ERROR_LOG_SEGMENT      char (11) init ("xmail.error") int static options (constant);
	dcl     FOLD_MODE		 char (14) init ("more_mode=fold") int static options (constant);
	dcl     HELP_LINE		 char (36) init ("If you need help, type ""help xmail"".") int static options (constant);
	dcl     INT_ERR		 char (38) init ("This is an internal programming error.") int static options (constant);
	dcl     INTERACTIVE_MSGS	 char (19) init ("interactive_msgs_yn") int static options (constant);
	dcl     LISTS_AS_MENUS	 char (17) init ("lists_as_menus_yn") int static options (constant);
	dcl     MIN_LINES_NEEDED	 fixed bin init (20) int static options (constant);
          dcl     MSGS_AS_MAIL           char (15) init ("msgs_as_mail_yn") int static options (constant);
	dcl     MULTICS_MODE	 char (15) init ("multics_mode_yn") int static options (constant);
	dcl     NAME		 char (14) init ("executive_mail") int static options (constant);
	dcl     N_FKEYS_USED	 fixed bin init (7) int static options (constant);
	dcl     PERSONALIZE_STATEMENT	 char (139) init ("^/  It will be supported in the MR11 release.^/  The Personalize Executive Mail menu can be used to set this function.^/Continuing setup...") int static options (constant);
	dcl     REMOVE_MENUS	 char (15) init ("remove_menus_yn") int static options (constant);
	dcl     WRAP_MODE		 char (14) init ("more_mode=wrap") int static options (constant);

/* INCLUDE FILES */

%include function_key_data;
%page;
%include terminal_info;
%page;
%include query_info;
%page;
%include xmail_data;
%page;
%include xmail_responses;
%page;
%include xmail_windows;
%page;

/* BEGIN*/

/* Make sure that xmail is not being recursively invoked. */

	if xmail_data_ptr ^= null
	then do;
	     call com_err_ (0, NAME, "Previous invocation still active.");
	     goto EXIT;
	end;

/* Establish cleanup handler */

	xmail_data_ptr = null ();
	sci_ptr = null ();
	xmail_dir_opened = "0"b;
	video_needs_cleanup = "0"b;
	messages_need_cleanup = "0"b;
	old_modes = "";
	on condition (cleanup) call CLEANUP ("1"b);	/* signal condition */

/* Log usage (ignoring any errors) */

	call ssu_$standalone_invocation (sci_ptr, NAME, (xmail_version), null (), xmail$ssu_exit, code);
	call ssu_$record_usage (sci_ptr, codeptr (xmail), code);
	call ssu_$destroy_invocation (sci_ptr);

/***** Init common data structures. *****/

	auto_xmail_data.mail_dir = "";
	auto_xmail_data.first_label = MAIN_MENU;
	auto_xmail_data.quit_label = QUIT;
	auto_xmail_data.value_seg_pathname = "";
	auto_xmail_data.function_key_data_ptr = null;

/* Get person name and project. */

	call user_info_$whoami (person, project, "");
	auto_xmail_data.person = rtrim (person);
	auto_xmail_data.project = rtrim (project);

	xmail_data_ptr = addr (auto_xmail_data);

/* Set up xmail directory. */
	auto_xmail_data.error_seg_in_pdir = "0"b;
	call xmail_dir_manager_$open_dir (code);
	if code = xmail_err_$exit_now then do;
	     call xmail_dir_manager_$close_dir ();
	     xmail_data_ptr = null;
	     goto EXIT;
	end;
	else if code ^= 0
	then goto COMPLAIN;
	xmail_dir_opened = "1"b;			/* for cleanup */

/* Check for personalization options first and set defaults & flags */

	call xmail_value_$get_no_validate (ALWAYS_ESCAPE, answer_yn, code);
	if code = 0 & answer_yn = YES
	then use_default_fkeys = "1"b;
	else use_default_fkeys = "0"b;

	call xmail_value_$get_no_validate (MULTICS_MODE, answer_yn, code);
	if code = 0 & answer_yn = YES
	then multics_yn = "1"b;
	else multics_yn = "0"b;

	call xmail_value_$get_no_validate (LISTS_AS_MENUS, answer_yn, code);
	if code = 0 & answer_yn = YES
	then auto_xmail_data.lists_as_menus = "1"b;
	else auto_xmail_data.lists_as_menus = "0"b;

	call xmail_value_$get_no_validate (INTERACTIVE_MSGS, answer_yn, code);
	if code = 0 & answer_yn = NO
	then interactive_msgs_yn = "0"b;
	else interactive_msgs_yn = "1"b;

	call xmail_value_$get_no_validate (REMOVE_MENUS, answer_yn, code);
	if code = 0 & answer_yn = YES
	then auto_xmail_data.remove_menus = "1"b;
	else auto_xmail_data.remove_menus = "0"b;

	call xmail_value_$get_no_validate (CONFIRM_PRINT, answer_yn, code);
	if code = 0 & answer_yn = NO
	then auto_xmail_data.confirm_print = "0"b;
	else auto_xmail_data.confirm_print = "1"b;

	call xmail_value_$get_no_validate (MSGS_AS_MAIL, answer_yn, code);
	if code = 0 & answer_yn = YES
	then auto_xmail_data.msgs_as_mail = "1"b;
	else auto_xmail_data.msgs_as_mail = "0"b;

/* Initialize general help switch and foreign mailbox switch					*/
	auto_xmail_data.general_help, auto_xmail_data.foreign_mailbox = "0"b;

/* Now check control arguments which can overide the settings for this
   invocation of xmail.  Also print obsolete warning message. */

	call cu_$arg_count (no_of_args, code);
	if code ^= 0
	then goto COMPLAIN;

	if no_of_args > 0
	then do arg_index = 1 to no_of_args;
		call cu_$arg_ptr (arg_index, arg_ptr, arg_len, code);
		if code ^= 0
		then goto COMPLAIN;

		if arg = "-mm" | arg = "-multics_mode"
		then do;
		     multics_yn = "1"b;
		     call ioa_ ("Control argument ""-multics_mode"" is now obsolete." || PERSONALIZE_STATEMENT);
		     call timer_manager_$sleep (5, "11"b);
		end;

		else if arg = "-nim" | arg = "-no_interactive_messages"
		then do;
		     interactive_msgs_yn = "0"b;
		     call ioa_ ("Control argument ""-no_interactive_messages"" is now obsolete." || PERSONALIZE_STATEMENT);
		     call timer_manager_$sleep (5, "11"b);
		end;

		else if arg = "-im" | arg = "-interactive_messages"
		then do;
		     interactive_msgs_yn = "1"b;
		     call ioa_ ("Control argument ""-interactive_messages"" is now obsolete." || PERSONALIZE_STATEMENT);
		     call timer_manager_$sleep (5, "11"b);
		end;

		else if arg = "-esc" | arg = "-escape_sequences"
		then do;
		     use_default_fkeys = "1"b;
		     call ioa_ ("Control argument ""-escape_sequences"" is now obsolete." || PERSONALIZE_STATEMENT);
		     call timer_manager_$sleep (5, "11"b);
		end;
		else do;
		     call com_err_ (error_table_$badopt, NAME, "^a^/^a", arg, HELP_LINE);
		     xmail_data_ptr = null;
		     goto EXIT;
		end;
	     end;

	auto_xmail_data.multics_mode = multics_yn;
	auto_xmail_data.interactive_msgs = interactive_msgs_yn;

/* Check number of messages to decide if continuing */

	call mail_system_$get_message_counts ((xmail_data.mail_dir), "incoming", "1"b, total_message_count, ordinary_message_count, (0), code); /* ignore code */
	if total_message_count < 1
	then do;
	     call ioa_$rsnnl ("^/You have no messages in the ""incoming"" mailbox.^/Do you still wish to enter executive_mail?", prompt_string, (0));
	     call xmail_get_str_$yes_no (prompt_string, yes_sw);
	     if ^yes_sw
	     then do;
		call xmail_dir_manager_$close_dir ();
		xmail_data_ptr = null;
		goto EXIT;
	     end;
	end;


/* Get terminal data (function keys etc.). */

	auto_xmail_data.n_fkeys_used = N_FKEYS_USED + bin (auto_xmail_data.multics_mode, 1, 0);

	ti.version = terminal_info_version;
	call iox_$control (iox_$user_io, "terminal_info", addr (ti), code);
	if code ^= 0
	then goto COMPLAIN;

	call ttt_info_$function_key_data (ti.term_type, null, function_key_data_ptr, code);
	if code ^= 0
	then use_default_fkeys = "1"b;
	else if function_key_data.highest < auto_xmail_data.n_fkeys_used
	then use_default_fkeys = "1"b;

	if use_default_fkeys
	then do;
	     if function_key_data_ptr ^= null ()
	     then free function_key_data_ptr -> function_key_data;
	     auto_xmail_data.function_key_data_ptr = xmail_default_fkeys_ ();
	     auto_xmail_data.normal_usage = "(For help, press ESC, then ""?"")";
	end;
	else do;
	     auto_xmail_data.function_key_data_ptr = function_key_data_ptr;
	     auto_xmail_data.normal_usage = "(For help, press F1)";
	end;



/* Window info */

	xmail_windows.min_lines_needed = MIN_LINES_NEEDED;/* For now. */
	xmail_windows.status.iocb,
	     xmail_windows.menu.iocb,
	     xmail_windows.bottom.iocb = null;

	xmail_windows.status.position,
	     xmail_windows.menu.position,
	     xmail_windows.bottom.position = 0;

	xmail_windows.initial_position = 0;

/* Find out if the video system is already on. */

	if video_data_$terminal_iocb ^= null
	then video_was_on = "1"b;
	else video_was_on = "0"b;

/***** Now really start setting things up. *****/

/* Set up interactive message handling. */

          call xmail_im_mgr_$init;                          /* always init */

	if xmail_data.interactive_msgs then do;
	     messages_need_cleanup = "1"b;		/* for cleanup */
	     call xmail_im_mgr_$defer_messages;
	end;

/* Find out if xmail has ever been invoked by this user before. */

	call xmail_value_$get_with_default ("lifetime_first_invocation", (YES), lifetime_first_invocation, code);
	if code ^= 0
	then do;
	     call xmail_error_$no_print (code, NAME, "l", "^a", INT_ERR);
	     lifetime_first_invocation = YES;
	end;

/* Turn on the video system. */

	if ^video_was_on
	then do;
	     call video_utils_$turn_on_login_channel (code, reason);
	     if code ^= 0
	     then do;
		if code = error_table_$no_table
		then call com_err_ (error_table_$invalid_device, NAME, "This command cannot operate with your current terminal type.");
		else call com_err_ (code, NAME, "^a", reason);
		goto ERROR_EXIT;
	     end;
	end;

/* Set up needed windows. */

	call xmail_window_manager_$create_windows (code);
	if code = xmail_err_$insuff_room_for_xmail
	then do;
	     call com_err_ (code, NAME, "^/The minimum number of lines needed is ^d.", xmail_windows.min_lines_needed);
	     goto ERROR_EXIT;
	end;
	else if code ^= 0
	then goto COMPLAIN;
	video_needs_cleanup = "1"b;			/* for cleanup */

	call iox_$modes (iox_$user_io, "", old_modes, code);
	if code ^= 0
	then call com_err_ (code, NAME, "Unable to get bottom window modes.  ^a", INT_ERR);
	else do;
	     if index (old_modes, FOLD_MODE) > 0
	     then do;
		call iox_$modes (iox_$user_io, WRAP_MODE, old_modes, code);
		if code ^= 0
		then call com_err_ (code, NAME, "Unable to set wrap mode in bottom window.  ^a", INT_ERR);
	     end;
	end;

	call xmail_sw_$initialize ();

	on condition (program_interrupt) begin;
		call window_$clear_window (iox_$user_io, code);
		goto xmail_data.first_label;
	     end;

	on condition (quit)
	     begin;
		dcl     xmail_window_manager_$reconnect entry ();
		call xmail_window_manager_$reconnect ();
		call window_$clear_window (iox_$user_io, code);
		goto xmail_data.first_label;
	     end;

MAIN_MENU:

	if lifetime_first_invocation = YES
	then call xmail_Getting_Started_ ();
	else call xmail_Executive_Mail_;

	goto MAIN_MENU;

QUIT:
	if lifetime_first_invocation = YES
	then do;
	     call xmail_value_$set ("lifetime_first_invocation", (NO), "", code);
	     if code ^= 0
	     then call xmail_error_$no_print (code, NAME, "l", "^a", INT_ERR);
	end;
	call xmail_review_defers_ ("message", "defer", 30);
	call xmail_review_defers_ ("reply", "reply", 30);
	call CLEANUP ("0"b);			/* not cleanup condition */
	goto EXIT;

COMPLAIN:
	call com_err_ (code, NAME, "^a", INT_ERR);

ERROR_EXIT:
	call CLEANUP ("0"b);			/* not cleanup condition */

EXIT:
	return;

ssu_exit: entry;

/* This entry doesn't do anything but it is needed by the ssu standalone */
/* invocation. It would be used by ssu_$print_message or 
/* ssu_$abort_subsystem if it were ever called during the invocation.    */

	return;

/* INTERNAL PROCEDURES */

CLEANUP: proc (condition_signalled);

/* PARAMETERS */

	dcl     condition_signalled	 bit (1);
          dcl prompt                     char (46) init ("                    Press <RETURN> to continue") int static options (constant);
	dcl 1 auto_query_info          like query_info;
          dcl been_thru_this_before      bit (1) aligned;
	dcl line                       char (80) var;
          dcl iox_$user_output           ptr ext static;
          dcl command_query_             entry() options(variable);
	dcl ENABLE_ESCAPE             bit (2) aligned init ("11"b) int static options (constant);         

						/* input parameter */
						/* 1 = cleanup condition */
						/* 0 = no condition */
						/* BEGIN */

	if sci_ptr ^= null ()
	then call ssu_$destroy_invocation (sci_ptr);
	if xmail_data_ptr = null then return;
	if xmail_data.error_seg_in_pdir & ^condition_signalled then do;

	     call adjust_bit_count_ ((get_pdir_()),(ERROR_LOG_SEGMENT), "0"b, bit_count, code);
	     if code = 0 & bit_count > 0 then do;
		call ioa_ ("^/               Xmail is closing down.");
		call ioa_ ("^/          An xmail error log was created in your process");
		call ioa_ ("     directory.  It will only exist for the duration of your");
		call ioa_ ("     process.  If you wish to save the error_messages that were");
		call ioa_ ("     written to the xmail.error segment, you should copy it from");
		call ioa_ ("     your process directory to another directory before");
		call ioa_ ("     you logout.");

	auto_query_info.version = query_info_version_6;
	auto_query_info.switches.yes_or_no_sw = "0"b;
	auto_query_info.switches.suppress_name_sw = "1"b;
	auto_query_info.switches.cp_escape_control = ENABLE_ESCAPE;
	auto_query_info.switches.suppress_spacing = "1"b;
	auto_query_info.switches.literal_sw = "0"b;
	auto_query_info.switches.prompt_after_explanation = "0"b;
	auto_query_info.switches.padding = "0"b;
	auto_query_info.status_code = 0;
	auto_query_info.query_code = 0;
	auto_query_info.question_iocbp = null ();	/* default: user_i/o */
	auto_query_info.answer_iocbp = null ();		/* default: user_input */
	auto_query_info.repeat_time = 0;		/* don't repeat */
	auto_query_info.explanation_ptr = null ();
	auto_query_info.explanation_len = 0;

	been_thru_this_before = "0"b;
	do while ("1"b);
	     call iox_$control (iox_$user_output, "reset_more", null, (0)); /* ignore code */

	     call command_query_ (addr (auto_query_info), line, "", "^[^/^]^a^2x", been_thru_this_before, prompt);
	     been_thru_this_before = "1"b;

	     if line = "" then goto CONTINUE;
	     end;
		end;
	     end;
CONTINUE: 
	if xmail_dir_opened then call xmail_dir_manager_$close_dir ();

	if video_needs_cleanup then do;

/* Reset fold mode if previously changed to wrap, do not ouput error 
   message if cleanup was signalled by condition                     */

	     if index (old_modes, FOLD_MODE) > 0
	     then do;
		call iox_$modes (iox_$user_io, FOLD_MODE, old_modes, code);
		if code ^= 0 & ^condition_signalled
		then call com_err_ (code, NAME, "Unable to reset fold mode in bottom window.  ^a", INT_ERR);
	     end;

/* pass parameter to flag condition */

	     call xmail_window_manager_$destroy_windows (condition_signalled);
	     if ^video_was_on then call video_utils_$turn_off_login_channel (0);
	end;

	if messages_need_cleanup & xmail_data.interactive_msgs then do;
	     if ^condition_signalled			/* only print if not condition */
	     then call xmail_im_mgr_$print_messages;
	     call xmail_im_mgr_$restore_original;         /* restore users method of handling messages when leaving */
	end;

	if xmail_data.function_key_data_ptr ^= null ()
	then free xmail_data.function_key_data_ptr -> function_key_data;
	     
	xmail_data_ptr = null;


     end CLEANUP;

     end xmail;
