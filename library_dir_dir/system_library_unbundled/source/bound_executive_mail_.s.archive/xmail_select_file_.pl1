/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-01-07,Blair), approve(86-02-26,MCR7358),
     audit(86-04-18,RBarstad), install(86-05-28,MR12.0-1062):
     Add a new entrypoint for when the user is allowed to read mail from
     other users' mailboxes ($foreign_mailboxes).
  2) change(86-01-28,Blair), approve(86-02-26,MCR7358),
     audit(86-04-18,RBarstad), install(86-05-28,MR12.0-1062):
     Establish an on unit for reissue_query so that the choice menu can be
     redrawn or the question which the user typed quit after can be repeated.
     TRs 18711 18974.
  3) change(86-06-02,Blair), approve(86-06-02,MCR7358),
     audit(86-06-04,RBarstad), install(86-06-04,MR12.0-1069):
     Rearrange code in get_menu_choice to keep track of which menu we selected
     create from, the one where create means a file name or the one where
     create means a user mbx. PBF.
  4) change(88-06-16,Blair), approve(88-07-27,MCR7931),
     audit(88-08-25,RBarstad), install(88-09-02,MR12.2-1098):
     Change the call that gets the file type from hcs_$status_minf to
     fs_util_$get_type so that we don't need 's' access on the containing
     directory.  This will allow us to access a mailbox through a link when
     that mailbox is in a dir to which we have no access.  Error list #141.
                                                   END HISTORY COMMENTS */


/*
			xmail_select_file_

	This program is called to select a file for processing.
	Input parameters give a text description of the type of
	file desired, the suffix, whether old and/or new files
	are acceptable.  A directory name, entry name prefix,
	and status code are returned.

	The file is intended to come from the xmail directory,
	and is so restricted in this version.  (General pathnames
	might someday be allowed.)  

	When new files are not allowed and only a single candidate
	exists in the xmail directory, it is returned without comment.
	In all other cases the user is asked to make the selection.
	This is first done with a simple prompt and text reply.
	By responding to the prompt with "??" the user can switch to
	menu selection from the available choices.

	Error Returns:

        0
	Dir & Prefix have been set for the file selected by the user.
	If New_ok was true the file may not exist.

        other
	The selection was unsuccessful for some reason.  A diagnostic
	will already have been issued about the problem, but not what
	is to be done about it.  Generally the caller should abort the
	current menu selection and let the user choose what to do next.

          There are three entrypoints:

               xmail_select_file_
	          allows the user to select a file as described above.

	     xmail_select_file_$exclude
	          allows the user to select a file as described above,
		excluding  certain names from the users list
		of possible selections.

	     xmail_select_file_$caller_msg
	          works like xmail_select_file_ except that the caller
		has control over the content of the filename prompt.
*/

/* Written February 1982 by Suzanne Krupp */
/* Modified:
   82-12-15 Dave Schimke: Changed the format of the list internal proc output
   to a multiple-column output more consistant with xmail_Mail_File_Maint_. 
   Also added a test for code = 0 before reporting a link inconsistency. This
   prevents messages of the type "A link points to nowhere" when in fact no
   link exists.

   83-05-31 Dave Schimke: Changed all references to the nonexistent error code
   error_table_$badarg to error_table_$bad_arg. TR15273
  
   83-09-14 Dave Schimke: Removed the restriction that files be single 
   component names since the code which creates files doesn't enforce this 
   anyway. This, however, required the addition of code to prevent "**.sv.mbx"
   from being selected as "**.mbx". TR11956 TR13411

   83-10-11 Dave Schimke: Replaced call to xmail_get_line with call to 
   xmail_get_str_. Added cleanup handler to free allocated structures.
   Added Create and Exists flags to the calling sequences. Create means
   the user selected create on the dynamic menu. Exists tells the state of
   the selected file ("1"b = file exists).

   84-09-06 JG Backs: Modified to allow lists as menus personalization option
   to be checked before prompt.

   84-10-26 JG Backs: Modified get_menu_choice internal procedure to indicate
   the caller needs to create a file if there are no menu items and lists 
   as menus personalization option is set to yes.

   84-10-31 JG Backs: Modified to check response from call to xmail_get_str 
   in MAIN procedure to make sure file name is not too long.

   85-01-06 JG Backs: Modified get_menu_choice and validate_file procedures
   to add calls to timer_manager_$sleep after printing some error messages if
   the lists as menus personalization option is set to yes.  This allows the
   message to remain on the screen long enough to read before the menu is
   redisplayed.  In get_menu_choice, two errors (unable to get a list of
   files or create a dynamic menu), were changed to interrupt processing if
   the lists as menus personalization option is set to yes.  Also added code
   in validate_file to test for incorrect access.  Bugfix.

   85-01-18 JG Backs: Modified all the calls to timer_manager_$sleep to delay
   5 seconds instead of 3 so the user has more time to read the message on
   the screen.  Audit change.

*/
xmail_select_file_: proc (File_type, Suffix, Default, Old_ok, New_ok, Dir, Prefix, Create, Exists, code);

	Own_msg = "0"b;
	Excluding_some_names = "0"b;
	call MAIN;
	return;

exclude: entry (File_type, Suffix, Default, Old_ok, New_ok, Exclude_array, Dir, Prefix, Create, Exists, code);

	Own_msg = "0"b;
	Excluding_some_names = "1"b;
	call MAIN;
	return;

caller_msg: entry (File_type, Suffix, Default, Old_ok, New_ok, Dir, Prefix, Caller_message, Create, Exists, code);

	Own_msg = "1"b;
	Excluding_some_names = "0"b;
	call MAIN;
	return;


foreign_mailboxes: entry (File_type, Suffix, Default, Old_ok, New_ok, Dir, Prefix, Caller_message, User, Exists, code);

	dcl     user_id		 char (60);
	dcl     foreign_user_addr_ptr	 ptr;          
          dcl     full_pathname          char (168);         
	dcl     mt_address_ptr         ptr;
          dcl     absolute_pathname_ entry (char(*), char(*), fixed bin(35));
	dcl     mlsys_et_$invalid_address_syntax fixed bin(35) ext static;

	code = 0;
	Dir = "";
	Prefix, entryname = "";
	Names_ptr, Dyn_menup, star_names_ptr, star_entry_ptr = null;
	N_names = 0;
	Selected_dir = xmail_data.mail_dir;
	Default_file = Default;
	User, Exists = "0"b;
	new_ok = New_ok;
	old_ok = Old_ok;

	Area_ptr = get_system_free_area_ ();

	on condition (cleanup) call CLEANUP;

	starname = "**." || Suffix;

	Cant_get_list = "0"b;

	call get_candidates (Selected_dir, starname, Names_ptr, N_names, code);

	if code = error_table_$nomatch then ;
	else if code ^= 0
	then do;
		Cant_get_list = "1"b;
		code = 0;
	     end;

	Prompt = get_caller_msg ();

	selecting = "1"b;
	do while (selecting);
RETRY (2):	     
	     opt = 2;
	     Selected_file = "";
	     if xmail_data.lists_as_menus & old_ok
	     then call get_menu_choice (Selected_file);	/* Always list as menu */
	     else do;
		     call xmail_get_str_ (Prompt, "", PROMPT_REPLIES_HELP, explain_question (),
			response);
		     if response = "??"
		     then call get_menu_choice (Selected_file);
/*		     else if search (response, INVALID_CHARS) ^= 0
		     then do;
			     call ioa_ ("The character ""^a"" is invalid in a ^a name.", substr (response, search (response, INVALID_CHARS), 1), File_type);
			     Selected_file = "";
			end;

		     else if length (response) > (VALID_LENGTH - length (Suffix) - 1)
		     then do;
			     call ioa_ ("The ""^a"" name is too long.", File_type);
			     Selected_file = "";
			end;                                   */
		     else Selected_file = response;
		end;

	     if Selected_file ^= ""
	     then do;
		if Selected_file = USER_MAILBOX
		     then do;
			     call xmail_get_str_ ("Enter user name of mailbox to be processed: ", "", PROMPT_REPLIES_HELP, "user_mailbox", response);

TRY_AGAIN:		     user_id = rtrim (response);
			     call mlsys_utils_$parse_address_text (rtrim (user_id), foreign_user_addr_ptr, code);
			     if code = mlsys_et_$invalid_address_syntax then do;
				if index (rtrim(response), "{") = 0 then do;
				     call absolute_pathname_ (rtrim(response), full_pathname, code);
				     if code = 0 then begin;
     dcl temp_address        char (length (rtrim (full_pathname)) + 6);
					 temp_address = "{mbx " || rtrim(full_pathname) || "}";
					 call mlsys_utils_$parse_address_text (temp_address, foreign_user_addr_ptr, code);
					 if code ^= 0 then do;
					      call xmail_error_$no_code (code, NAME, "i", "Can't locate a mailbox with this pathname, ^a.", response);
					      goto EXIT_FOREIGN_MAILBOX;
					      end;
					 end;
				      else do;
					 call xmail_error_$no_code (code, NAME, "i", "Can't locate a mailbox with this pathname, ^a.", response);
					 goto EXIT_FOREIGN_MAILBOX;
					 end;
				      end;
				 else do;
				      call ioa_ ("The character ""{"" is invalid in a mailbox name.");
				      goto EXIT_FOREIGN_MAILBOX;
				      end;
				 end;
			     else if code ^= 0 then do;                /* not a savebox or user */
				     call xmail_error_$no_code (code, NAME, "i", " Can't get a mail table address for this user ^a.", response);
				     goto EXIT_FOREIGN_MAILBOX;
				end;
			     call GET_PATHNAME (foreign_user_addr_ptr, code);
			     if code ^= 0 then do;
				     call xmail_error_$no_code (code, NAME, "i", "Can't get mail table address for this user_id, ^a.", response);
				     goto EXIT_FOREIGN_MAILBOX;
				end;
			     else do;
				     Prefix = rtrim (entryname);
				     selecting = "0"b;
				     User = "1"b;
				end;
			end;
		     else do;
			     call validate_file (Selected_file, Exists, code);
			     if code = 0
			     then do;
				     Prefix = rtrim (Selected_file);
				     Dir = Selected_dir;
				     selecting = "0"b;
				end;
			     else do;
				Selected_file = USER_MAILBOX;
				goto TRY_AGAIN;
				end;
			end;
		end;
	end;

EXIT_FOREIGN_MAILBOX:
	call CLEANUP;
	return;

GET_PATHNAME: procedure (P_address_ptr, code);

dcl  P_address_ptr	        pointer parameter;
dcl  code	        fixed binary (35) parameter;
dcl  mlsys_et_$no_address_pathname fixed bin(35) ext static;
dcl  address_type           fixed bin;

	call mail_system_$get_address_type (P_address_ptr, address_type, code);
	if code ^= 0 then return;

	if (address_type = INVALID_ADDRESS | address_type = NAMED_GROUP_ADDRESS | address_type = MAILING_LIST_ADDRESS | address_type = FOREIGN_ADDRESS | address_type = FORUM_ADDRESS) then do;
	     code = mlsys_et_$no_address_pathname;
	end;
	else if address_type = USER_MAILBOX_ADDRESS | address_type = LOGBOX_ADDRESS | address_type = SAVEBOX_ADDRESS | address_type = MAILBOX_ADDRESS then do;
	     call mail_system_$get_address_pathname (P_address_ptr, Dir, entryname, ((32)" "), code);

	end;
	else do;					/* *** mail table address */
	     call mail_system_$get_mail_table_address (P_address_ptr, mt_address_ptr, code);
	     if code = 0 then call GET_PATHNAME (mt_address_ptr, code);
	end;

     end GET_PATHNAME;


	/*** Global variables ***/

/* Parameter */

	dcl     Caller_message	 char (*);
	dcl     Cant_get_list	 bit (1) aligned;
	dcl     Create		 bit (1) aligned;
	dcl     Default		 char (*);
	dcl     Dir		 char (168);
	dcl     Exists		 bit (1) aligned;
	dcl     Exclude_array	 (*) char (32) aligned;
	dcl     File_type		 char (*);
	dcl     New_ok		 bit (1) aligned;
	dcl     Old_ok		 bit (1) aligned;
	dcl     Prefix		 char (32) var;
          dcl     User                   bit (1) aligned;
	dcl     Suffix		 char (*);

/* Automatic */

	dcl     Area_ptr		 ptr;
	dcl     Default_file	 char (32);
	dcl     Dyn_menup		 ptr;
	dcl     entryname		 char (32);
	dcl     Excluding_some_names	 bit (1) aligned;
	dcl     N_names		 fixed bin;
	dcl     Names_ptr		 ptr;
	dcl     new_ok		 bit (1) aligned;
	dcl     old_ok		 bit (1) aligned;
          dcl     opt                    fixed bin;
	dcl     Own_msg		 bit (1) aligned;
	dcl     Prompt		 char (256) var;
	dcl     Selected_dir	 char (168);
	dcl     Selected_file	 char (32);

/* Based */

	dcl     Based_area		 area based (Area_ptr);
	dcl     Names		 (N_names) char (32) aligned based (Names_ptr);

/* Condition */

	dcl     cleanup		 condition;
          dcl     reissue_query          condition;

	/*** Non-global ***/

/* Automatic */

	dcl     code		 fixed bin (35);
	dcl     response		 char (256) var;
	dcl     selecting		 bit (1) aligned;
	dcl     starname		 char (32);

/* Builtin */

	dcl     (index, length, null, rtrim, search, substr, sum)
				 builtin;

/* Entries */

	dcl     get_system_free_area_	 entry () returns (ptr);
	dcl     ioa_		 entry () options (variable);
	dcl     ioa_$rsnnl		 entry () options (variable);
	dcl     mail_system_$get_address_pathname entry (ptr, char (*), char (*), char (*), fixed bin (35));
          dcl     mail_system_$get_address_type entry (pointer, fixed bin (17), fixed bin (35));
          dcl     mail_system_$get_mail_table_address entry (ptr, ptr, fixed bin(35));
	dcl     mlsys_utils_$parse_address_text entry (char (*), ptr, fixed bin (35));
	dcl     timer_manager_$sleep	 entry (fixed bin (71), bit (2));
	dcl     xmail_error_$no_code	 entry () options (variable);
	dcl     xmail_error_$no_print	 entry () options (variable);
	dcl     xmail_get_str_	 entry (char (*) var, (*) char (*) var, char (*), char (*), char (*) var);

/* Static */

	dcl     DEFER		 char (5) init ("defer") int static options (constant);
	dcl     error_table_$bad_arg	 fixed bin (35) ext static;
	dcl     error_table_$nomatch	 fixed bin (35) ext static;
	dcl     INVALID_CHARS	 char (12) init ("<>#()[]{}*,;") int static options (constant);
	dcl     MLIST		 char (3) init ("mls") int static options (constant);
	dcl     NAME		 char (18) init ("xmail_select_file_") int static options (constant);
	dcl     SAVE		 char (6) init ("sv.mbx") int static options (constant);
	dcl     USER_MAILBOX	 char (14) init ("<user mailbox>") int static options (constant);
	dcl     VALID_LENGTH	 fixed bin init (32) int static options (constant);

MAIN: proc ();

      on reissue_query begin;
	 goto RETRY (opt);
	 end;

	code = 0;
	Dir = "";
	Prefix = "";
	Names_ptr, Dyn_menup, star_names_ptr, star_entry_ptr = null;
	N_names = 0;
	Selected_dir = xmail_data.mail_dir;
	Default_file = Default;
	Create, Exists = "0"b;
	new_ok = New_ok;
	old_ok = Old_ok;

	if ^new_ok & ^old_ok
	then do;
		code = error_table_$bad_arg;
		call xmail_error_$no_code (code, NAME, "c", "Cannot choose new or old file." ||
		     "^/This is an internal error.");
		goto EXIT;
	     end;

	Area_ptr = get_system_free_area_ ();

	on condition (cleanup) call CLEANUP;

	starname = "**." || Suffix;

	Cant_get_list = "0"b;

	call get_candidates (Selected_dir, starname, Names_ptr, N_names, code);

	if code = error_table_$nomatch
	then ;					/* Process this later */
	else if code ^= 0
	then do;
		Cant_get_list = "1"b;
		code = 0;
	     end;

	if ^new_ok				/* Must have at least 1 old file */
	then do;
		if code = error_table_$nomatch	/* No old files found */
		then do;
			call xmail_error_$no_code (0, NAME, "c", "You do not have any ^as.", File_type);
			goto EXIT;
		     end;
		else if N_names = 1			/* One old file found, choose it automatically */
		then do;
			Prefix = rtrim (Names (1));
			Dir = Selected_dir;
			if Suffix = SAVE | Suffix = MLIST | Suffix = DEFER /* Print msg only for certain files */
			then do;
				Exists = "1"b;
				call ioa_ ("The ^a ""^a"" automatically selected - it is your only one.", File_type, Prefix);
				call timer_manager_$sleep (5, "11"b);
			     end;
			goto EXIT;
		     end;
	     end;

	if Own_msg
	then Prompt = get_caller_msg ();
	else Prompt = get_default_msg ();

	selecting = "1"b;
	do while (selecting);
RETRY (1):    
	     opt = 1;
	     Selected_file = "";

	     if xmail_data.lists_as_menus & old_ok
	     then call get_menu_choice (Selected_file);	/* always list as menu */

	     else do;
		     call xmail_get_str_ (Prompt, "", PROMPT_REPLIES_HELP, explain_question (), response);

		     if response = ""
		     then Selected_file = Default_file;
		     else if response = "??"
		     then do;
			     if old_ok
			     then call get_menu_choice (Selected_file); /* wants to choose from menu */
			     else call list ();	/* just wants list */
			end;
		     else if search (response, INVALID_CHARS) ^= 0
		     then do;			/* filter garbage */
			     call ioa_ ("The character ""^a"" is invalid in a ^a name.", substr (response, search (response, INVALID_CHARS), 1), File_type);
			     Selected_file = "";
			end;

		     else if length (response) > (VALID_LENGTH - length (Suffix) - 1)
		     then do;			/* check length of response */
			     call ioa_ ("The ""^a"" name is too long", File_type);
			     Selected_file = "";
			end;

		     else Selected_file = response;

		end;

	     if Selected_file ^= ""			/* we have chosen a file */
	     then do;
		     call validate_file (Selected_file, Exists, code);
		     if code = 0
		     then do;
			     Prefix = rtrim (Selected_file);
			     Dir = Selected_dir;
			     selecting = "0"b;
			end;
		end;
	end;					/* do while */

EXIT:
	call CLEANUP;
	return;
     end MAIN;

get_candidates: proc (dir, starname, names_ptr, n_names, code);

/* Automatic */

	dcl     exclude_map		 (500) bit (1);
	dcl     i			 fixed bin;
	dcl     j			 fixed bin;
	dcl     seg_name		 char (32);

/* Based */

	dcl     names		 (n_names) char (32) based (names_ptr);

/* Entries */

	dcl     hcs_$star_		 entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35));

/* Parameter */

	dcl     code		 fixed bin (35);
	dcl     dir		 char (*);
	dcl     n_names		 fixed bin;
	dcl     names_ptr		 ptr;
	dcl     starname		 char (*);

	j = 0;
	code = 0;

	call hcs_$star_ (dir, starname, star_ALL_ENTRIES, Area_ptr, star_entry_count, star_entry_ptr, star_names_ptr, code);

	if code ^= 0				/* no match or other error */
	then return;

	do i = 1 to star_entry_count;
	     if exclude_this_segment (star_names (star_entries (i).nindex))
	     then exclude_map (i) = "1"b;
	     else do;
		     exclude_map (i) = "0"b;
		     n_names = n_names + 1;
		end;
	end;

	allocate names in (Based_area) set (names_ptr);

	do i = 1 to star_entry_count;
	     seg_name = star_names (star_entries (i).nindex);
	     if ^exclude_map (i)
	     then do;
		     j = j + 1;
		     names (j) = minus_suffix (seg_name, Suffix);
		end;
	end;

     end get_candidates;

minus_suffix: proc (name, suffix) returns (char (*) var);

/* Automatic */

	dcl     reverse_name	 char (length (name)) var;
	dcl     reverse_suffix	 char (length (suffix)) var;

/* Builtin */

	dcl     (after, index, length, reverse, rtrim) builtin;

/* Parameter */

	dcl     name		 char (*);
	dcl     suffix		 char (*);

	reverse_name = reverse (rtrim (name));
	reverse_suffix = reverse (rtrim (suffix));

	if index (reverse_name, reverse_suffix || ".") ^= 1
	then return (name);
	else return (reverse (after (reverse_name, reverse_suffix || ".")));

     end minus_suffix;

get_default_msg: proc () returns (char (256) var);

/* Automatic */

	dcl     prompt		 char (256) var;

	if new_ok & old_ok
	then call ioa_$rsnnl ("Enter a new or existing ^a name" || /* Msg for both new and old */
		"^[ (for ""^a"", press RETURN)^]: ",
		prompt, (0), File_type, Default_file ^= "", Default_file);
	else call ioa_$rsnnl ("Enter the name of ^[a new^;an existing^] ^a" || /* Msg for either new or old */
		"^[ (for ""^a"", press RETURN)^]: ",
		prompt, (0), new_ok, File_type, Default_file ^= "", Default_file);

	return (prompt);

     end get_default_msg;

get_caller_msg: proc () returns (char (256) var);

/* Automatic */

	dcl     prompt		 char (256) var;

	call ioa_$rsnnl ("^a^[ (for ""^a"" press RETURN)^]: ", prompt, (0), Caller_message, Default_file ^= "", Default_file);

	return (prompt);

     end get_caller_msg;

get_menu_choice: proc (filename);

/* Automatic */

	dcl     code		 fixed bin (35);
	dcl     filename		 char (*);
	dcl     index		 fixed bin;
	dcl     selected_create	 bit (1) aligned;

/* Builtin */

	dcl     null		 builtin;

/* Entries */

	dcl     xmail_dyn_menu_$create entry ((*) char (*) aligned, ptr, ptr, ptr, fixed bin (35));
	dcl     xmail_error_$no_code	 entry () options (variable);
	dcl     xmail_dyn_menu_$create_w_trailer entry ((*) char (*) aligned, char (*), ptr, ptr, ptr, fixed bin (35));
	dcl     xmail_get_dyn_choice_	 entry (ptr, fixed bin, fixed bin (35));
	dcl     xmail_get_dyn_choice_$trailer entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));

	filename = "";

	if Cant_get_list
	then do;
		if xmail_data.lists_as_menus		/* interrupt if auto menu */
		then call xmail_error_$no_code (0, NAME, "i", "Unable to get a list of your ^as.", File_type);
		else call xmail_error_$no_code (0, NAME, "c", "Unable to get a list of your ^as.", File_type);
		return;
	     end;

/* If there are no menu items, a new file is allowed, and Display Lists As
   Menus option is yes, allow caller to create */

	if N_names = 0 & new_ok & xmail_data.lists_as_menus
	then do;
		filename = "";
		old_ok = "0"b;
		Default_file = "";
		Prompt = get_default_msg ();
		Create = "1"b;			/* caller should create */
		return;
	     end;

	if N_names = 0 & ^xmail_data.foreign_mailbox
	then do;
		call xmail_error_$no_code (0, NAME, "c", "You have no existing ^as.", File_type);
		if xmail_data.lists_as_menus		/* delay if automatic list */
		then call timer_manager_$sleep (5, "11"b);
		return;
	     end;

	if new_ok
	then call xmail_dyn_menu_$create_w_trailer (Names, "<Create new " || File_type || ">", Dyn_menup, null, Area_ptr, code);
	else if xmail_data.foreign_mailbox then
	     if N_names > 0
	     then call xmail_dyn_menu_$create_w_trailer (Names, "<user mailbox>", Dyn_menup, null, Area_ptr, code);
	     else do;
		     N_names = 1;
		     allocate Names in (Based_area) set (Names_ptr);
		     Names (1) = "<user mailbox>";
		     call xmail_dyn_menu_$create (Names, Dyn_menup, null, Area_ptr, code);
		end;
	else call xmail_dyn_menu_$create (Names, Dyn_menup, null, Area_ptr, code);

	if code ^= 0
	then do;
		if xmail_data.lists_as_menus
		then call xmail_error_$no_code (code, NAME, "i", "Unable to select a ^a via a menu.", File_type);
		else call xmail_error_$no_code (code, NAME, "c", "Unable to select a ^a via a menu.", File_type);
		return;
	     end;

	do while ("1"b);

	     selected_create = "0"b;

	     if new_ok | xmail_data.foreign_mailbox
	     then call xmail_get_dyn_choice_$trailer (Dyn_menup, index, selected_create, code);
	     else call xmail_get_dyn_choice_ (Dyn_menup, index, code);

	     if code ^= 0
	     then do;
		     call xmail_error_$no_code (code, NAME, "c", "Unable to use your ""^a"" selection.^/This is an internal error.", File_type);
		     if xmail_data.lists_as_menus	/* delay if automatic list */
		     then call timer_manager_$sleep (5, "11"b);
		end;
	     else do;
		     if selected_create
		     then do;
			if new_ok
			then do;
				filename = "";
				old_ok = "0"b;
				Default_file = "";
				Prompt = get_default_msg ();
				Create = "1"b;	/* caller should create */
			     end;
			else if xmail_data.foreign_mailbox
			     then filename = USER_MAILBOX;
			end;
		     else filename = Names (index);
		end;
	     return;
	end;					/* do while */

     end get_menu_choice;

list: proc ();

/* Automatic */

	dcl     index		 fixed bin;

/* Builtin */

	dcl     mod		 builtin;

/* Entries */

	dcl     ioa_		 entry () options (variable);
	dcl     ioa_$nnl		 entry () options (variable);
	dcl     xmail_error_$no_code	 entry () options (variable);

	if Cant_get_list
	then do;
		call xmail_error_$no_code (0, NAME, "c", "Unable to get a list of your ^as.", File_type);
		return;
	     end;

	if N_names = 0
	then do;
		call xmail_error_$no_code (0, NAME, "c", "You have no existing ^as.", File_type);
		return;
	     end;

	call ioa_ ("^/You have ^d ^as:", N_names, File_type);

	do index = 1 to N_names;
	     if (mod (index, 3) = 0)
	     then call ioa_$nnl ("^a^/", Names (index));
	     else call ioa_$nnl ("^26a", Names (index));
	end;
	call ioa_ ("^/");
     end list;

validate_file: proc (prefix, exists, code);

/* Automatic */

	dcl     filename		 char (32);
	dcl     link_type		 bit (1) aligned;
          dcl     entry_type             char (32);
	dcl     type		 fixed bin (2);

/* Builtin */

	dcl     rtrim		 builtin;

/* Entries */
	dcl     fs_util_$get_type      entry (char(*), char(*), char(*), fixed bin(35));
	dcl     hcs_$status_minf	 entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35));
	dcl     xmail_error_$no_code	 entry () options (variable);

/* Parameter */

	dcl     code		 fixed bin (35);
	dcl     exists		 bit (1) aligned;
	dcl     prefix		 char (*);

/* Static */

	dcl     error_table_$dirseg	 fixed bin (35) ext static;
	dcl     error_table_$namedup	 fixed bin (35) ext static;
	dcl     error_table_$noentry	 fixed bin (35) ext static;
	dcl     error_table_$no_info	 fixed bin (35) ext static;
	dcl     LINK		 fixed bin (2) init (0) int static options (constant);
	dcl     NO_CHASE		 fixed bin (1) init (0) int static options (constant);
	dcl     SEGMENT		 fixed bin (2) init (1) int static options (constant);

	code = 0;

	if Suffix = ""
	then filename = prefix;
	else filename = rtrim (prefix) || "." || Suffix;

	if exclude_this_segment (filename)
	then do;
		code = error_table_$noentry;
		call xmail_error_$no_code (code, NAME, "c", "This name must be excluded from your choice. ""^a""", prefix);
		goto EXIT_VALIDATE;
	     end;

	link_type = "0"b;

	call hcs_$status_minf (Selected_dir, filename, NO_CHASE, type, (0), code);

	if (code = 0) & (type = LINK)
	then do;
		call fs_util_$get_type (Selected_dir, filename, entry_type, code);
		link_type = "1"b;
	     end;

	if code = error_table_$noentry		/* Process this later */
	then do;
		exists = "0"b;
		if link_type			/* Check for inconsistency */
		then do;
			call xmail_error_$no_code (code, NAME, "c",
			     "Unable to use the ^a ""^a"" because of an inconsistency in your xmail directory." ||
			     "^/A link points to nowhere.", File_type, prefix);
			if xmail_data.lists_as_menus	/* delay if automatic list */
			then call timer_manager_$sleep (5, "11"b);

			goto EXIT_VALIDATE;
		     end;
	     end;
	else if code = error_table_$no_info
	then do;
		call xmail_error_$no_code (code, NAME, "c", " You do not have access to use the ""^a"" ^a.", prefix, File_type);
		if xmail_data.lists_as_menus		/* delay if automatic list */
		then call timer_manager_$sleep (5, "11"b);
		goto EXIT_VALIDATE;
	     end;
	else if code ^= 0
	then do;
		call xmail_error_$no_code (code, NAME, "c", "Unable to use the ^a ""^a"".^/This is an internal error.", File_type, prefix);
		if xmail_data.lists_as_menus		/* delay if automatic list */
		then call timer_manager_$sleep (5, "11"b);
		goto EXIT_VALIDATE;
	     end;
	else exists = "1"b;				/* code = 0 */

	if new_ok & old_ok				/* accept any name NEW or OLD */
	then do;
		code = 0;
		goto EXIT_VALIDATE;
	     end;

	if new_ok					/* Need a NEW file name */
	then do;
		if code = error_table_$noentry
		then do;
			code = 0;
			goto EXIT_VALIDATE;
		     end;
		else do;
			code = error_table_$namedup;
			call xmail_error_$no_code (code, NAME, "c", "The ^a name ""^a"" is already used." ||
			     "^/Please specify another name.", File_type, prefix);
			goto EXIT_VALIDATE;
		     end;
	     end;

	if code = error_table_$noentry		/* Must be OLD file */
	then do;
	          if ^xmail_data.foreign_mailbox
		then call xmail_error_$no_code (code, NAME, "c",
		     "Unable to use the ^a ""^a""." ||
		     " It does not exist.", File_type, prefix);
		goto EXIT_VALIDATE;
	     end;

	if (type ^= SEGMENT & entry_type ^= "mbx")
	then do;
		code = error_table_$dirseg;
		call xmail_error_$no_code (code, NAME, "c",
		     "Unable to use ""^a"".^/It is not of expected type (^a)." ||
		     "  This is an inconsistency in your xmail directory.", prefix, File_type);
		if xmail_data.lists_as_menus		/* delay if automatic list */
		then call timer_manager_$sleep (5, "11"b);
	     end;

EXIT_VALIDATE:
	return;

     end validate_file;



explain_question: proc returns (char (32) var);

/* Automatic */

	dcl     info_name		 char (32) var;

/* Builtin */

	dcl     translate		 builtin;

	call ioa_$rsnnl ("^[^4s^;^[^a^x^2s^;^s^[^a^x^;^s^]^]^]^a", info_name, (0), new_ok & old_ok, new_ok, "new", old_ok, "old", File_type);
	info_name = translate (info_name, "_", " ");
	return (info_name);
     end explain_question;

exclude_this_segment: proc (seg_name) returns (bit (1) aligned);

/* Automatic */

	dcl     exclude_flag	 bit (1) aligned;
	dcl     i			 fixed bin;
	dcl     match_code		 fixed bin (35);

/* Entry */

	dcl     match_star_name_	 entry (char (*), char (*), fixed bin (35));

/* Builtin */

	dcl     hbound		 builtin;

/* Parameter */

	dcl     seg_name		 char (*);

	exclude_flag = "0"b;

	if Suffix = "mbx" then do;
		call match_star_name_ (seg_name, "**.sv.mbx", match_code);
		if match_code = 0 then do;
			exclude_flag = "1"b;
			goto EXCLUDE_EXIT;
		     end;
	     end;

	if ^Excluding_some_names
	then goto EXCLUDE_EXIT;

	do i = 1 to hbound (Exclude_array, 1);
	     if seg_name = Exclude_array (i)
	     then do;
		     exclude_flag = "1"b;
		     goto EXCLUDE_EXIT;
		end;
	end;

EXCLUDE_EXIT:
	return (exclude_flag);

     end exclude_this_segment;

CLEANUP: proc ();

	dcl     xmail_dyn_menu_$free	 entry (ptr, fixed bin (35));
	dcl     cleanup_code	 fixed bin (35);

	if star_names_ptr ^= null () then free star_names;/* order is important */
	if star_entry_ptr ^= null () then free star_entries;
	if Names_ptr ^= null () then free Names;
	if Dyn_menup ^= null () then do;
		call xmail_dyn_menu_$free (Dyn_menup, cleanup_code);
		if cleanup_code ^= 0
		then call xmail_error_$no_print (cleanup_code, NAME, "c",
			"Unable to free the dynamic menu.");
	     end;
     end CLEANUP;

/* Include */

%include xmail_data;
%page;
%include xmail_help_infos;
%page;
%include star_structures;
%page;
%include mlsys_address_types;

     end xmail_select_file_;
