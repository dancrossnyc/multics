/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

fst_run_: proc (edit_ptr, arg_path);

/* * This procedure implements the run command.
   *
   *	1. If arg_path = null, the temporary text is used.
   *	2. Otherwise the segment specified by arg_path is used.
   *
   * If the segment is not an object segment, it is compiled.  The language suffix determines the compiler.  If the
   * compilation is successful, the object code is run.
   *
   * Written 3/76 by S.E. Barr
   * Modified 12/76 by M. Weaver to use version 2 compiler_source_info
   * Modified 02/80 by C R Davis to move fast_mask to include file.
   * Modified 10/25/83 by C Spitzer. remove call to basic_$precision_length.
*/
dcl  edit_ptr ptr;
dcl  arg_path char (*) var;

/* automatic */

dcl  bit_count fixed bin (24);
dcl  code fixed bin (35);
dcl  directory char (168);
dcl  directory_length fixed bin aligned;
dcl  entry char (32);
dcl 1 f aligned like fst_edit_info based (edit_ptr);
dcl 1 fort_opt aligned like fortran_options;
dcl  i fixed bin;
dcl  main_ename char (32) var;			/* main_ for FORTRAN or BASIC */
dcl  path char (168);
dcl 1 oi aligned like object_info;
dcl  object_length fixed bin;				/* word length from compilers */
dcl  object_bc fixed bin (24);			/* bit cound for run unit */
dcl  object_ptr ptr;
dcl 1 run_flags aligned,
    2 just_compiled bit (1) unal,
    2 brief bit (1) unal init ("0"b),
    2 probe bit (1) unal init ("0"b),
    2 pad bit (33) unal init ("0"b);
dcl 1 s aligned like compiler_source_info;
dcl  seg_ptr ptr;

dcl (addr, divide, fixed, index, length, null, reverse, substr, unspec, verify) builtin;

dcl  cleanup condition;

/* external */

dcl  basic_$compile entry (ptr, ptr, fixed bin, fixed bin (35));
dcl  dfast_error_ entry (fixed bin (35), char (*), char (*));
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  fast_run_unit_manager_ entry (ptr, fixed bin (24), 1 aligned, 2 bit (1) unal, 2 bit (1) unal, 2 bit (1) unal, 2 bit (33) unal, char (*) var, fixed bin (35));
dcl  fort_$compile entry (ptr, ptr, fixed bin, ptr, fixed bin (35));
dcl  hcs_$fs_get_path_name entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
dcl  hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$set_bc_seg entry (ptr, fixed bin (24), fixed bin (35));
dcl  hcs_$status_long entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  hcs_$truncate_seg entry (ptr, fixed bin (18), fixed bin (35));
dcl  object_info_$brief entry (ptr, fixed bin (24), ptr, fixed bin (35));

%include fst_edit_info;
%include fort_options;
%include object_info;

%include branch_status;

%include compiler_source_info;


/*  */
	seg_ptr = null;

	on cleanup begin;
	     if seg_ptr ^= null then call hcs_$terminate_noname (seg_ptr, code);
	end;

	if arg_path = "" then do;
	     path = f.pathname;
	     s.input_pointer = f.text_ptr;
	     s.input_lng = f.text_length;
	     i = index (reverse (f.pathname), ">");
	     if i = 0 then i = 1;
	     else i = length (f.pathname) - i+ 2;
	     call compile (substr (f.pathname, i));
	     object_bc = 36*object_length;
	end;
	else do;
	     path = arg_path;
	     call expand_pathname_ (path, directory, entry, code);
	     if code ^= 0 then call abort ("");
	     call hcs_$initiate_count (directory, entry, "", bit_count, 1, seg_ptr, code);
	     if seg_ptr ^= null then do;
		oi.version_number = object_info_version_2;
		call object_info_$brief (seg_ptr, bit_count, addr (oi), code);
		if code = 0 then do;
		     main_ename = substr (entry, 1, length (entry) + 1 - verify (reverse (entry), " "));
		     object_bc = bit_count;
		     run_flags.just_compiled = "0"b;
		     object_ptr = seg_ptr;
		end;
		else do;
		     s.input_pointer = seg_ptr;
		     s.input_lng = divide (bit_count, 9, 21, 0);
		     i = length (entry) + 1 - verify (reverse (entry), " ");
		     call compile (substr (entry, 1, i));
		     object_bc = 36*object_length;
		end;
	     end;
	     else do;
		i = index (directory, " ") -1;
		if i = -1 then i = length (directory);
		if directory = ">" then path = ">" || entry;
		else path = substr (directory, 1, i) || ">" || entry;
		call dfast_error_ (code, "run", path);
	     end;
	end;

	if code = 0 then call fast_run_unit_manager_ (object_ptr, object_bc, run_flags, main_ename, code);

RETURN:
	if seg_ptr ^= null then call hcs_$terminate_noname (seg_ptr, code);
	return;

/*  */
abort:	proc (message);

dcl  message char (*);


	     i = index (path, " ") -1;
	     if i = -1 then i = length (path);
	     call dfast_error_ (code, "run", message || "  """|| substr (path, 1, i) || """");

	     goto RETURN;

	end abort;
						/*  */
compile:	proc (name);

dcl  name char (*);

	     code = 0;
	     s.version = compiler_source_info_version_2;
	     s.given_ename = name;
	     call hcs_$fs_get_path_name (s.input_pointer, directory, directory_length, entry, code);
	     s.dirname = substr (directory, 1, directory_length);
	     s.segname = substr (entry, 1, length (entry) + 1 - verify (reverse (entry), " "));
	     call hcs_$status_long (directory, entry, 1, addr (branch_status), null, code);
	     s.date_time_modified = fixed (branch_status.date_time_modified || (16) "0"b, 71);
	     s.unique_id = branch_status.unique_id;
	     run_flags.just_compiled = "1"b;
	     main_ename = "main_";
	     object_ptr = f.alt_ptr;
	     call hcs_$truncate_seg (object_ptr, 0, code);

	     if length (name) > 6 then do;
		if substr (name, length (name) - 5, 6) = ".basic" then do;
		     call basic_$compile (addr (s), object_ptr, object_length, code);
		     return;
		end;
		else do;
		     if length (name) > 8 & substr (name, length (name) -7, 8) = ".fortran" then do;
			unspec (fort_opt) = fast_mask;
			call fort_$compile (addr (s), object_ptr, object_length, addr (fort_opt), code);
			if code = 0 then call hcs_$set_bc_seg (object_ptr, object_length * 36, code);
			return;
		     end;
		end;
	     end;

	     call abort ("name must have a suffix of .basic or .fortran");

	end compile;

     end fst_run_;
