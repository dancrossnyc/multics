/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

fst_compile_: proc;

/* This procedure contains two entry points to compile source programs.
   The source program must have the proper language suffix and the object segment is creatted in the working directory.

   basic	path	no options
   fortran  path  [-no_line_numbers]

   Written 3/76 by S.E. Barr
   Modified 12/76 by M. Weaver to use version 2 compiler_source_info
   Modified 02/80 by C R Davis to move fast_mask to include file.
   Modified 1 Nov 1983 by C Spitzer: add ep_basic and sp_basic entry points.
*/

/* automatic */

dcl  acl_info_ptr ptr;
dcl  arg_length fixed bin;
dcl  arg_ptr ptr;
dcl  code fixed bin (35);
dcl  i fixed bin;
dcl  nargs fixed bin;
dcl  object_length fixed bin;
dcl  object_ptr ptr;
dcl  path char (168) var;
dcl  proc_name char (7);				/* basic or fortran */
dcl 1 fort_opt aligned like fortran_options;
dcl 1 s aligned like compiler_source_info;
dcl  source_ptr ptr;				/* ptr to source segment */

/* based */

dcl  arg char (arg_length) based (arg_ptr);

dcl (addr, divide, fixed, length, null, reverse, substr, unspec, verify) builtin;

dcl  cleanup condition;

/* constant */

dcl  RE_ACCESS bit (36) aligned internal static options (constant) initial ("1100"b);

/* external  */

dcl  basic_$compile entry (ptr, ptr, fixed bin, fixed bin (35));
dcl  basic_$precision_length ext fixed bin;
dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  error_table_$badopt fixed bin (35) ext;
dcl  error_table_$noarg fixed bin (35) ext;
dcl  error_table_$wrong_no_of_args fixed bin (35) ext;
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  fort_$compile entry (ptr, ptr, fixed bin, ptr, fixed bin (35));
dcl  get_wdir_ entry () returns (char (168));
dcl  hcs_$fs_get_path_name entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
dcl  hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$status_long entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  tssi_$clean_up_segment entry (ptr);
dcl  tssi_$finish_segment entry (ptr, fixed bin (24), bit (36) aligned, ptr, fixed bin (35));
dcl  tssi_$get_segment entry (char (*), char (*), ptr, ptr, fixed bin (35));

/*  */
%include branch_status;
%include  compiler_source_info;
%include fort_options;

/*  */
basic:	entry;

	proc_name = "basic";
	call cu_$arg_count (nargs);
	if nargs = 1 then do;
	     call cu_$arg_ptr (1, arg_ptr, arg_length, code);
	     if code = 0 then do;

		source_ptr = null;
		if set_up (arg, ".basic") then do;

		     on cleanup call cleanup_handler;

		     call basic_$compile (addr (s), object_ptr, object_length, code);
		     if code ^= 0 then do;
			object_length = 0;
			call com_err_ (code, "basic");
		     end;
		     call tssi_$finish_segment (object_ptr, object_length*36, RE_ACCESS, acl_info_ptr, code);
		end;
		if source_ptr ^= null then call hcs_$terminate_noname (source_ptr, code);
	     end;
	     else call com_err_ (code, "basic");
	end;
	else call com_err_ (error_table_$wrong_no_of_args, "basic");

	return;

fortran: ft: entry;

	proc_name = "fortran";
	code = 0;
	call cu_$arg_count (nargs);
	if nargs > 0 then do;
	     path = "";
	     unspec (fort_opt) = fast_mask;
	     do i = 1 to nargs while (code = 0);
		call cu_$arg_ptr (i, arg_ptr, arg_length, code);
		if code = 0 then do;
		     if substr (arg, 1, 1) = "-" then do;
			if arg = "-nln" | arg = "-no_line_numbers" then fort_opt.has_line_numbers = "0"b;
			else code = error_table_$badopt;
		     end;
		     else if path = "" then path = arg;
		     else code = error_table_$badopt;
		end;
	     end;

	     if code = 0 then do;

		if path ^= "" then do;
		     source_ptr = null;
		     if set_up ((path), ".fortran") then do;
			on cleanup call cleanup_handler;

			call fort_$compile (addr (s), object_ptr, object_length, addr (fort_opt), code);
			if code ^= 0 then do;
			     object_length = 0;
			     call com_err_ (code, "fortran");
			end;
			call tssi_$finish_segment (object_ptr, object_length*36, RE_ACCESS, acl_info_ptr, code);
		     end;
		     if source_ptr ^= null then call hcs_$terminate_noname (source_ptr, code);
		end;
		else call com_err_ (error_table_$noarg, "fortran");
	     end;
	     else call com_err_ (code, "fortran", arg);
	end;
	else call com_err_ (error_table_$wrong_no_of_args, "fortran");

	return;

/*   */

ep_basic: entry;

	basic_$precision_length = 2;
	return;

sp_basic: entry;

	basic_$precision_length = 1;
	return;

/*   */
set_up:	proc (arg, suffix) returns (bit (1) unal);

dcl  arg char (*);
dcl  suffix char (*);

/* automatic */

dcl  i fixed bin;
dcl  len_suffix fixed bin;
dcl  object_name char (32);
dcl  bit_count fixed bin (24);
dcl  directory_name char (168);
dcl  entry_name char (32);
dcl  path char (168);


/* set path to arg and add suffix, if not present.  */

	     i = length (arg);
	     len_suffix = length (suffix);
	     if i <= len_suffix then path = arg || suffix;
	     else if substr (arg, i - len_suffix + 1, len_suffix) = suffix then path = arg;
	     else path = arg || suffix;
	     i = length (path) + 1 - verify (reverse (path), " ");

/* get source, and fill in compiler_info structure */

	     call expand_pathname_ (path, directory_name, entry_name, code);
	     if code = 0 then do;

		call hcs_$initiate_count (directory_name, entry_name, "", bit_count, 0, source_ptr, code);
		if source_ptr ^= null then do;	/* ignore code if have ptr */
		     call hcs_$status_long (directory_name, entry_name, 1, addr (branch_status), null, code);
		     if code = 0 then do;
			s.version = compiler_source_info_version_2;
			s.input_pointer = source_ptr;
			s.input_lng = divide (bit_count+8, 9, 21, 0);
			s.given_ename = substr (entry_name, 1, length (entry_name) + 1-verify (reverse (entry_name), " "));
			call hcs_$fs_get_path_name (source_ptr, directory_name, i, entry_name, code);
			s.dirname = substr (directory_name, 1, i);
			s.segname = substr (entry_name, 1, length (entry_name) + 1-verify (reverse (entry_name), " "));
			s.date_time_modified = fixed (branch_status.date_time_modified || (16) "0"b, 71);
			s.unique_id = branch_status.unique_id;
			object_name = substr (s.given_ename, 1, length (s.given_ename) - len_suffix);
			directory_name = get_wdir_ ();
			call tssi_$get_segment (directory_name, object_name, object_ptr, acl_info_ptr, code);
			if code = 0 then return ("1"b);
			call print_err (directory_name, object_name);
		     end;
		     else call print_err (directory_name, entry_name);
		end;
		else call print_err (directory_name, entry_name);
	     end;
	     else call print_err (path, "");

	     return ("0"b);

	end set_up;

/*  */
cleanup_handler: proc;

	     call tssi_$clean_up_segment (acl_info_ptr);
	     if source_ptr ^= null then call hcs_$terminate_noname (source_ptr, code);

	end cleanup_handler;

/* This procedure calls com_err_ and returns from fst_basic */

print_err: proc (directory, entry);

dcl  directory char (*);
dcl  entry char (*);

	     if directory = ">" | entry = "" then call com_err_ (code, proc_name, "^a^a", directory, entry);
	     else call com_err_ (code, proc_name, "^a>^a", directory, entry);

	end print_err;
     end fst_compile_;
