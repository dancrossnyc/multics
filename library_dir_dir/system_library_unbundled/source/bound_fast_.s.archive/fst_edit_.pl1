/****^  ******************************************************
        *                                                    *
        * Copyright, (C) Honeywell Bull Inc., 1987           *
        *                                                    *
        * Copyright (c) 1972 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        ****************************************************** */



/****^  HISTORY COMMENTS:
  1) change(87-12-02,TLNguyen), approve(87-12-02,MCR7806),
     audit(87-12-10,Lippard), install(88-01-19,MR12.2-1015):
     Implementing SCP6357 and correct deviations from coding standards found
     while researching the problems.
     - fixed stringrange condition raised in the edit internal procedure
       and in the parse_pathname internal procedure.
     - replace the (get, release) temp_segments_ with (get, release) temp_
       segment_ system routines in the merge_add internal procedure.
     - replace the "Changes will be lost if you continue.  Do you want to
       continue?" queried message with "Changes will be lost if you quit.
       Do you want to quit?"
     - Remove the acode, ioa_$ioa_switch_nnl, iox_$get_line, iox_$user_input
       and len from the source because they are not referenced anywhere
       within it.
                                                   END HISTORY COMMENTS */


fst_edit_: proc (edit_ptr, line, continue, print_prompt_char);

/*  This procedure implements all the edit commands for FAST

   Written 3/76 by S.E. Barr
   Fix bug in save request that adds null chars 06/24/81 S. Herbst
   Fix bug in locate request, bad substr lengths phx12352 10/25/83 C Spitzer
	add cleanup of temp segments.
*/
/* parameters */

dcl  edit_ptr ptr;					/* ptr to edit_info structure */
dcl  line char (*);					/* input:  user input line */
dcl  continue fixed bin;				/* output:  -1 = quit;  0 = was edit;  1 = not edit  */
dcl  print_prompt_char bit (1) unal;			/* output:  ON = print;  OFF = don't print */

/* automatic */

dcl  arg char (150) var;				/* argument from command line */
dcl  code fixed bin (35);
dcl  end_line fixed bin;				/* last line number in text usually = f.end_line_number */
dcl  i fixed bin;
dcl  increment fixed bin;				/* used to derive numbers for resequencing */
dcl  input_line_length fixed bin;			/* length of command line:  get_arg */
dcl  input_line_start fixed bin;			/* index into input line of unparsed characters  */
dcl  message char (150);				/* error message */
dcl  seq_number fixed bin;				/* first number to be used in resequencing */
dcl  num fixed bin;					/* line number from command line */
dcl  path char (168) var;				/* pathname for OLD, SAVE, or RUN commands */
dcl  request fixed bin;				/* number of edit request */
dcl  seg_length fixed bin (21);
dcl  seg_ptr ptr;
dcl  t_length fixed bin (21);				/* length of text usually = text_length */
dcl  t_ptr ptr;					/* ptr to text usually = text_ptr */
dcl  temp_length fixed bin (21);			/* length of the buffer contianing modifications */
dcl  temp_ptr ptr;					/* ptr to edit buffer */
dcl  temp_ptr_is_temp_seg bit (1) aligned;

dcl (addr, addrel, divide, hbound, index, length, null, search, substr, reverse, verify) builtin;


/* constants */

dcl  ADD_TEXT fixed bin int static options (constant) init (0);
dcl  command_names (-1:32) char (11) int static options (constant) init (
     "fast", "",
     "change", "c",					/* 1 */
     "delete_text", "dt",				/* 2 */
     "info", "info",				/* 3 */
     "input", "input",				/* 4 */
     "locate", "l",					/* 5 */
     "merge_text", "mgt",				/* 6 */
     "move_text", "mt",				/* 7 */
     "new", "new",					/* 8 */
     "old", "old",					/* 9 */
     "print_text", "pt",				/* 10 */
     "quit", "q",					/* 11 */
     "ready_off", "rdf",				/* 12 */
     "ready_on", "rdn",				/* 13 */
     "resequence", "rsq",				/* 14 */
     "run", "run",					/* 15 */
     "save", "save");				/* 16 */
dcl  legal_path_chars char (65) int static options (constant) init ("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.>_");
dcl  DIGIT char (10) int static options (constant) init ("0123456789");
dcl  NEW_LINE char (1) int static options (constant) init ("
");
dcl  WHITE_SPACE char (2) int static options (constant) init ("	 "); /* tab blank */
dcl  SET bit (1) unal int static options (constant) init ("1"b); /* ON if should set end_line number */
dcl  QUERY int static options (constant) init (1);	/* query if changes will be lost */
dcl  NOT_EMPTY fixed bin int static options (constant) init (2); /* must have some text */
dcl  CREATE bit (1) unal int static options (constant) init ("1"b); /* ON if should create, if not found;  get_seg_ptr */
dcl  DEFAULT fixed bin int static options (constant) init (1); /* use entire text:  get_block */
dcl  NO_DEFAULT fixed bin int static options (constant) init (2); /* line must be specified:  get_block */
dcl  DEFAULT_LOC fixed bin int static options (constant) init (3); /* use end of text if last number not given:  get_block */
dcl  max_num_digits fixed bin int static options (constant) init (5); /* max number = 99999 */

/* based */

dcl  alt char (f.alt_length) based (f.alt_ptr);		/* buffer containing new text lines */
dcl 1 f aligned based (edit_ptr) like fst_edit_info;	/* per process data for editing */
dcl  text char (t_length) based (t_ptr);		/* text being modified */
dcl  seg char (seg_length) based (seg_ptr);		/* segment to add to  text  */
dcl  temp char (f.max_seg_size) based (temp_ptr);		/* new copy of text with modifications */

/* external */

dcl  command_query_ entry() options(variable);
dcl  get_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  dfast_error_ entry (fixed bin (35), char (*), char (*));
dcl  fst_cv_line_num_ entry (char (*), fixed bin, fixed bin (35)) returns (bit (1) unal);
dcl  fst_info_ entry (ptr);
dcl  fst_info_$header entry (ptr, char (*) var);
dcl  fst_run_ entry (ptr, char (*) var);
dcl  fst_util_$change entry (ptr, fixed bin (21), fixed bin (21), char (*) var, char (*) var, fixed bin (21), fixed bin (35));
dcl  fst_util_$input entry (ptr, fixed bin (21), fixed bin, fixed bin, fixed bin, fixed bin (21), fixed bin (35));
dcl  fst_util_$merge entry (ptr, char (*), fixed bin (21), fixed bin, fixed bin (21), fixed bin (35));
dcl  fst_util_$move entry (ptr, fixed bin (21), fixed bin (21), fixed bin (21), fixed bin, fixed bin (21), fixed bin (35));
dcl  fst_util_$resequence entry (ptr, fixed bin, fixed bin, fixed bin (21), fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  ioa_$ioa_switch entry options (variable);
dcl  iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  iox_$user_output ptr ext;
dcl  release_temp_segment_ entry (char (*), ptr, fixed bin (35));

%include fst_edit_info;
%include dfast_error_codes;
%include query_info;

/*  */

	message = "";
	code = 0;
	request = -1;

	input_line_length = length (line);
	if verify (substr (line, 1, 1), DIGIT) = 0 then request = ADD_TEXT;
	else do;
	     input_line_start = 1;
	     input_line_length = input_line_length - 1;
	     if get_arg (arg) then do;
		do i = 1 to hbound (command_names, 1) while (request = -1);
		     if arg = command_names (i) then request = divide (i + 1, 2, 17, 0);
		end;

		if request = -1 then do;
		     if arg = "logout" & ^f.subsystem then do;
			continue = 0;
			call ioa_$ioa_switch (iox_$user_output, "Use quit");
		     end;
		     else continue = 1;
		     return;
		end;
	     end;
	end;

	call edit (request);

	if request ^= ADD_TEXT then print_prompt_char = f.prompt;
	if code ^= 0 | message ^= "" then call dfast_error_ (code, command_names (request *2 -1), message);

	return;


/*  */
edit:	proc (request);

dcl  request fixed bin;

/* automatic */

dcl  done bit (1) unal;
dcl  i fixed bin;
dcl  string_found bit (1) unal;			/* ON if string was_found at least once */
dcl  k fixed bin (21);
dcl  input_length_save fixed bin;			/* length of user's command line */
dcl  target_index fixed bin (21);
dcl  num_chars fixed bin (21);
dcl  old_string char (150) var;
dcl  new_string char (150) var;
dcl  start fixed bin (21);
dcl  j fixed bin (21);
dcl  cleanup condition;

	     temp_ptr = f.alt_ptr;
	     temp_ptr_is_temp_seg = "0"b;
	     temp_length = 0;
	     t_ptr = f.text_ptr;
	     t_length = f.text_length;
	     end_line = f.end_line_number;

	     seg_ptr = null;
	     on cleanup call term_seg;

	     goto label (request);

/*   */
/* Line number text was input.  It is added to a temporary buffer to be processed laster.  If the line number
   is greater than 99999 then the code is set.
*/
label (0):

dcl next_position fixed bin;

	     next_position = 0;

	     i = verify (line, DIGIT) -1;
	     if i <= max_num_digits then do;
		next_position = f.alt_length + 1;
		f.alt_length = f.alt_length + input_line_length;
		substr (alt, next_position, input_line_length) = line;
	     end;
	     else code = error_max_num;

	     print_prompt_char = "0"b;
	     return;

/*  */

/*  *	change  /<old_string>/<new_string>/  <first>  [<last>]
   *
   *  If the string could not be replaced at least once, an error code is set by fst_util_.
   */
label (1):
	     if merge_add (NOT_EMPTY) then do;
		if parse_strings ("1"b, old_string, new_string) then do;
		     if get_block (NO_DEFAULT, start, num_chars) then do;

			call fst_util_$change (edit_ptr, start, num_chars, old_string, new_string, temp_length, code);
			if code = 0 then call switch_buffers (^SET);
			else message = old_string;
		     end;
		end;
	     end;

	     return;



/* *	delete_text  first  [last]
   *
   * This request deletes one or more lines from the temporary  text
*/
label (2):

dcl  num_left fixed bin (21);

	     if merge_add (NOT_EMPTY) then do;
		if get_block (NO_DEFAULT, start, num_chars) then do;
		     num_left = f.text_length - start - num_chars + 1;
		     if num_left > 0 then substr (text, start, num_left) = substr (text, start + num_chars, num_left);
		     f.text_length = f.text_length - num_chars;
		     f.text_modified = "1"b;
		     if num_left = 0 then if set_end_number () then;
		end;
	     end;

	     return;




/* Info prints the pathname of the segment being modified, quota and money spent */
label (3):
	     call fst_info_ (edit_ptr);

	     return;

/*  */
/* *	input  [<after_line>]  [<increment>]
   *
   *	num	is the line number of the line after which the input will be put.
   *		This also determines the first number  (num  + increment - mod (num, increment)  )
   *
   *	start	is the index for first new line.
   *
   *  These defaults are used:
   *	1.  If the increment is not given, it is 10.
   *	2.  If after_line is not given, input is at the end of the text and f.end_line_number is used.
   *	3.  If the buffer is empty and no arguments are specified the first number will be 100.
   */
label (4):
	     if merge_add (0) then do;
		start = f.text_length + 1;
		seq_number = f.end_line_number;
		increment = 10;
		if parse_number (seq_number) then do;
		     if find_first_line (1, "0"b, seq_number, start, num_chars) then do;
			start = start + num_chars;
			if parse_number (increment) then;
		     end;
		end;
		else if f.text_length = 0 then seq_number = 90;
		if start > f.text_length then num = 100000;
		else if get_number (start, num) then;

		if message = "" then do;
		     call fst_util_$input (edit_ptr, start, seq_number, increment, num, temp_length, code);
		     call switch_buffers (^SET);
		end;
	     end;

	     return;

/*   */
/* *locate  /<string>/ [<first>]  [<last>]
   *
   * This request prints out all lines containing a given string.  The entire line is scanned for the string,
   * including the line number.  It uses these defaults:
   *
   *	1.  If "last" is omitted, the text between "first" and the end of the text is used.
   *	2.  If both "first" and "last" are omitted, the entire text is used.
   *
   * If the string is not found at least once, an error message is printed.
   */
label (5):
	     if merge_add (NOT_EMPTY) then do;
		if parse_strings ("0"b, old_string, "") then do;
		     if get_block (DEFAULT_LOC, start, num_chars) then do;

			string_found = "0"b;
			do while (num_chars > 0);
			     k = index (substr (text, start, num_chars), old_string);
			     if k > 0 then do;
				j = index (reverse (substr (text, start, k)), NEW_LINE) -1;
				if j > 0 then do;
				     start = start + k - j;
				     num_chars = num_chars + j - k;
				end;

				j = index (substr (text, start, num_chars), NEW_LINE);
				if j = 0 then j = num_chars;
				call iox_$put_chars (iox_$user_output, addr (substr (text, start, 1)), j, code);
				if code ^= 0 then return;
				start = start + j;
				num_chars = num_chars - j;
				string_found = "1"b;
			     end;
			     else num_chars = 0;
			end;
			if ^string_found then message = "could not find " || old_string;
		     end;
		end;
	     end;

	     return;

/*  */
/*	merge_text  <path>	[<line_number>]
   *
   * This request merges the contents on an ascii segment into the temporary text after the line specified with
   * line_number.  If line_number is not given, the segment is appended to the end of the temporary text.
   * The segment specified will be resequenced so it must have line numbers.  The temporary text following the
   * the merged text may be resequenced.  This is only done in cases where overlap of line numbers would
   * have occured.
*/
label (6):
	     if merge_add (0) then do;
		if parse_pathname (NO_DEFAULT, path) then do;
		     if get_seg_ptr (^CREATE, path) then do;
			if parse_number (num) then do;
			     if find_first_line (1, "0"b, num, start, num_chars) then do;
				start = start + num_chars;
				seq_number = num;
			     end;
			end;
			else do;
			     start = f.text_length + 1;
			     if start = 1 then seq_number = 90;
			     else seq_number = f.end_line_number;
			end;

			if message = "" then do;
			     call fst_util_$merge (edit_ptr, seg, start, seq_number, temp_length, code);
			     call switch_buffers (SET);
			end;
			call term_seg;
		     end;
		end;
		else if message = "" then message = "no pathname given";
	     end;

	     return;

/*  */
/* *	move_text <first>  [<last>] ,  [<after_line>]
   *
   * The block of lines specified by first and last is moved to a location following the line specified by
   * after_line.  The lines that are moved are resequenced.
*/
label (7):
	     if merge_add (NOT_EMPTY) then do;
		i = index (line, ",");
		if i > 0 then do;
		     input_length_save = input_line_length;
		     input_line_length = i -1;
		     if get_block (NO_DEFAULT, start, num_chars) then do;
			input_line_length = input_length_save;
			input_line_start = i + 1;
			if parse_number (num) then do;
			     if find_first_line (1, "0"b, num, target_index, j) then do;
				target_index = target_index + j -1;
				if target_index < start | target_index >= start + num_chars - 1 then do;
				     call fst_util_$move (edit_ptr, start, num_chars, target_index,
					num, temp_length, code);
				     call switch_buffers (SET);
				end;
				else message = "target of move is inside range";
			     end;
			end;
			else message = "line number missing";
		     end;
		end;
		else message = "comma is missing";
	     end;
	     return;

/*  */
/* *	new  [<path>]
   *
   * This request causes the text to be truncated.  The merge_add procedure queries the user if this action
   * would cause changes made to the text to be lost.  If path is not given, the default path is set to null.
*/
label (8):
	     if merge_add (QUERY) then do;
		if parse_pathname (0, path) then do;
		     f.pathname = path;
		     call set_basic_source;
		     f.text_length = 0;
		     f.end_line_number = 0;
		end;
	     end;

	     return;



/* *	old  <path>
   *
   * This request causes text to be replaced with the contents of the segment specified. The merge_add
   * procedure queries the user if this action would cause changes made to the text to be lost.
   * The new text must be line numbered source code.
*/
label (9):
	     if merge_add (QUERY) then do;
		if parse_pathname (NO_DEFAULT, path) then do;
		     if get_seg_ptr (^CREATE, path) then do;
			f.text_length, t_length = seg_length;
			f.text_ptr -> text = seg_ptr -> text;
			call term_seg;
			f.pathname = path;
			call set_basic_source;

/*  This code sets the last line number for use later */

			if f.text_length <= 1 then f.end_line_number = 0;
			else if ^set_end_number () then do;
			     f.text_length = 0;
			     f.pathname = "";
			end;

		     end;
		end;
	     end;

	     return;

/*  */
/* *	print_text  [-pn]  [<path>]  [-nhe]   [<first>]  [<last>]
*/
label (10):

dcl  header bit (1) unal;				/* ON if should print header  (no line numbers given) */

/*  This code parses the arguments.  If the path is not given (path = "") then the temporary text is used */

	     header = "1"b;
	     path = "";
	     done = "0"b;
	     do while (^done & message = "");
		if get_arg (arg) then do;
		     if arg = "-pn" | arg = "-pathname" then do;
			if ^get_arg (path) then message = "pathname is missing";
		     end;
		     else if arg = "-nhe" | arg = "-no_header" then header = "0"b;
		     else if verify (substr (arg, 1, 1), DIGIT) > 0 then do;
			if path = "" then path = arg;
			else message = "syntax error in line number";
		     end;
		     else do;
			input_line_start = input_line_start - length (arg);
			done = "1"b;
		     end;
		end;
		else done = "1"b;
	     end;

	     if message = "" then do;

/* The segment is initiated and temp is changed to be new segment instead of temporary text for get_block
   and other search routines. If the segment doesn't have line numbers, it can be printed if no lines were
   specified.
*/

		if path ^= "" then do;
		     if verify (path, legal_path_chars) = 0 then do;
			if get_seg_ptr (^CREATE, path) then do;
			     t_ptr = seg_ptr;
			     t_length = seg_length;
			     if t_length = 0 then message = "segment is empty " || path;
			     else if t_length > 1 then do;
				j = index (reverse (substr (text, 1, t_length -1)), NEW_LINE);
				if j = 0 then j = 1;
				else j = t_length - j + 1;
				if ^get_number (j, end_line) then do;
				     if input_line_start > input_line_length | substr (line, input_line_start) = ""
				     then message = "";
				end;
			     end;
			end;
		     end;
		     else message = "illegal character in pathname " || path;
		end;
		else if merge_add (NOT_EMPTY) then;

		if message = "" then do;
		     if input_line_start <= input_line_length
		     then if substr (line, input_line_start) ^= "" then header = "0"b;
		     if get_block (DEFAULT, start, num_chars) then do;
			if path = "" then path = f.pathname;
			if header then call fst_info_$header (edit_ptr, path);;
			call iox_$put_chars (iox_$user_output, addr (substr (text, start, 1)), num_chars, code);
		     end;
		end;
		call term_seg;
	     end;

	     return;

/*  */
/*  The quit request is allowed for the FAST command, but not the subsystem.  It queries the user if the text has been 
   modified since the last save.  It sets the parameter continue to -1 which causes the caller of fst_edit_ to quit.
*/
label (11):

	     if ^f.subsystem then do;
		if merge_add (QUERY) then continue = -1;
	     end;

	     else message = "use logout";

	     return;



/* ready_off sets the parameter print_prompt_char so the listener will not prompt */
label (12):

	     f.prompt = "0"b;
	     return;

/* ready_on sets the parameter print_ready_char so the listener will prompt
*/
label (13):

	     f.prompt = "1"b;
	     return;

/*  */
/* *	resequence  [<seq_number>]  [<increment>]
*/
label (14):
	     if merge_add (NOT_EMPTY) then do;
		if parse_number (seq_number) then do;
		     if ^parse_number (increment) then increment = 10;
		end;
		else do;
		     seq_number = 100;
		     increment = 10;
		end;

		if message = "" then do;
		     call fst_util_$resequence (edit_ptr, seq_number, increment, temp_length, code);
		     call switch_buffers (SET);
		end;

	     end;

	     return;




/* *	run  [<path>]
   *
   * If path is not given, the temporary text is run
*/
label (15):

	     if parse_pathname (0, path) then;
	     if path = "" then if merge_add (NOT_EMPTY) then;

	     if message = "" then call fst_run_ (edit_ptr, path);

	     return;

/*  */
/* *	save	[<path>]
   *
   * This request causes text to be copied into the segment specified.  If the segment doesn't exist, it will
   * be created.  If path is not given, the default pathname is used.  If the request is successful,
   * the default pathname is changed.
*/
label (16):

dcl  hcs_$set_bc_seg entry (ptr, fixed bin (24), fixed bin (35));
dcl  hcs_$truncate_seg entry (ptr, fixed bin (21), fixed bin (35));

	     if merge_add (NOT_EMPTY) then do;
		if parse_pathname (0, path) then do;
		     if path = "" then path = f.pathname;
		     if get_seg_ptr (CREATE, path) then do;
			seg_ptr -> text = f.text_ptr -> text;
			f.pathname = path;
			call set_basic_source;
			f.text_modified = "0"b;
			call hcs_$set_bc_seg (seg_ptr, f.text_length * 9, code);
			if code = 0 then call hcs_$truncate_seg
			     (seg_ptr, divide (f.text_length + 3, 4, 21, 0), code);
			call term_seg;
		     end;
		end;
	     end;

	     return;

	end edit;

/*  */
/* *  This procedure finds the next token on the line.  Tokens are separated by blanks or tabs.
   *  It uses the global variables:
   *
   *	line		parameter ;  user's input line
   *	input_line_start	index to begin searching
   *	input_line_length	number of characters in input line
   *
   *  If it finds a token, it returns "1"b after setting:
   *	arg		token
   *	input_line_start	index following token
   *
   *  Otherwise it returns "0"b
*/
get_arg:	proc (arg) returns (bit (1));

/* parameters */

dcl  arg char (*) var;

/* automatic */

dcl  i fixed bin;
dcl  len fixed bin;

	     len = input_line_length - input_line_start + 1;

	     if len > 0 then do;
		i = verify (substr (line, input_line_start, len), WHITE_SPACE);
		if i > 0 then do;
		     input_line_start = input_line_start + i -1;
		     len = len - i + 1;
		     i = search (substr (line, input_line_start, len), WHITE_SPACE);
		     if i = 0 then i = len;
		     else i = i - 1;
		     arg = substr (line, input_line_start, i);
		     input_line_start = input_line_start + i;
		     return ("1"b);
		end;
	     end;

	     return ("0"b);

	end get_arg;

/*  */
/* * This procedure gets the next tokens which should be first and last line numbers.  It returns an index into
   * text and the number of characters in the block covered by the range.  There must be at least one line in the
   * range.
   * Default actions depend on default_code as follows:
   *
   *	NO_DEFAULT	range specification must be present
   *	DEFAULT		use entire text
   *	DEFAULT_LOC	if last line is not specified then the end of the text is assumed.
*/
get_block: proc (default_code, block_start, block_length) returns (bit (1) unal);

/* parameters */

dcl  default_code fixed bin;
dcl  block_start fixed bin (21);
dcl  block_length fixed bin (21);

/* automatic */

dcl  equal bit (1) unal;
dcl  line_start fixed bin (21);			/* index in text of line being compared */
dcl  j fixed bin (21);
dcl  num fixed bin;
dcl  num_1 fixed bin;
dcl  num_2 fixed bin;

	     if parse_number (num_1) then do;
		if parse_number (num_2) then do;
		     equal = "0"b;
		     if num_1 > num_2 then do;
			message = "lines must be in increasing order";
			return ("0"b);
		     end;
		end;

		else if default_code = DEFAULT_LOC then do;
		     equal = "0"b;
		     num_2 = 99999;
		end;
		else equal = "1"b;

		if find_first_line (1, equal, num_1, block_start, block_length) then do;

		     if equal then return ("1"b);
		     if num_2 >= end_line then block_length = t_length - block_start + 1;
		     else do;
			line_start = block_start;
			block_length = 0;
			do while (block_length = 0 & message = "");

			     if get_number (line_start, num) then do;
				if num_2 < num then do;
				     block_length = line_start - block_start;
				     if block_length = 0 then message = "line not found in text";
				end;
			     end;
			     j = index (substr (text, line_start), NEW_LINE);
			     if j = 0 then j = t_length - line_start + 1;
			     line_start = line_start + j;
			end;
		     end;
		end;
	     end;

	     else if default_code ^= NO_DEFAULT then do;
		block_start = 1;
		block_length = t_length;
	     end;
	     else message = "line number must be given";

	     if message = "" then do;
		if block_length > 0 then return ("1"b);
		else message = "line not found in text";
	     end;

	     return ("0"b);

	end get_block;

/*  */
/* * This procedure gets the next token and converts it to a line number.  It returns:
   *
   *	"1"b	if the next token was a number.
   *	"0"b	if there was a syntax error or no more tokens.
*/
parse_number: proc (num) returns (bit (1) unal);

dcl  num fixed bin;					/* the number found */

	     if get_arg (arg) then do;
		if fst_cv_line_num_ ((arg), num, code) then return ("1"b);
		message = arg;
	     end;

	     return ("0"b);

	end parse_number;

/*  */
/* * This procedure is given a line number and it sets line start to the index in text of the line with taht line
   * number or the next higher line.  If the exact line is  found, line_length is set.  Otherwise
   * line_length is 0.
*/
find_first_line: proc (index_start, must_be_equal, line_number, line_start, line_length) returns (bit (1) unal);

/* parameters  */

dcl  index_start fixed bin (21);
dcl  must_be_equal bit (1) unal;
dcl  line_start fixed bin (21);
dcl  line_number fixed bin;
dcl  line_length fixed bin (21);

/* automatic */

dcl  num fixed bin;

	     line_start = index_start;

	     do while (line_start <= t_length & message = "");
		if get_number (line_start, num) then do;
		     line_length = index (substr (text, line_start), NEW_LINE);
		     if line_length = 0 then line_length = t_length - line_start + 1;
		     if line_number <= num then do;
			if line_number = num then return ("1"b);
			if ^must_be_equal then do;
			     line_length = 0;
			     return ("1"b);
			end;
			message = "line not found in text";
		     end;
		     line_start = line_start + line_length;
		end;
	     end;

	     line_length = 0;

	     if message = "" then do;
		if ^must_be_equal then return ("1"b);
		else message = "line not found in text";
	     end;

	     return ("0"b);

	end find_first_line;

/*   */
/* * This procedure is given an index into text and it sets the line number */
get_number: proc (start, line_number) returns (bit (1) unal);

dcl  start fixed bin (21);
dcl  line_number fixed bin;
dcl  i fixed bin (21);

	     i = verify (substr (text, start), DIGIT);
	     if i = 0 then i = t_length - start + 1;
	     else i = i - 1;
	     if i > 0 then do;
		if fst_cv_line_num_ (substr (text, start, i), line_number, code) then return ("1"b);
		message = substr (text, start, i);
	     end;
	     else message = "un-numbered line found in text";

	     return ("0"b);

	end get_number;

/*  */
/* * This procedure gets the next token from the command line and checks it for valid characters.
   * It returns "1"b if the path was given and is valid or there are no more tokens.
   * Otherwise it returns "0"b.
   */
parse_pathname: proc (default, path) returns (bit (1) unal);

dcl  default fixed bin;				/* 0 = OK  if path  not specified;  NO_DEFAULT = erorr */
dcl  path char (168) var;

	     path = "";

	     if get_arg (path) then do;
		if verify (path, legal_path_chars) = 0 then return ("1"b);
		message = "illegal character in pathname " || path;
	     end;
	     else if default ^= NO_DEFAULT then return ("1"b);

	     else message = "pathname is missing";

	     return ("0"b);

	end parse_pathname;



set_basic_source: proc;

dcl reverse_pathname char (168) varying;

dcl before builtin;

	     reverse_pathname = reverse (f.pathname);
	     if index (reverse_pathname, ".") > 1 then f.basic_source = (reverse (before (reverse_pathname, ".")) = "basic");
	     else f.basic_source = "0"b;
	     
	     return;

	end set_basic_source;



/* This procedure sets end_line_number to the number of the last line in the segment.  */
set_end_number: proc returns (bit (1) unal);

dcl  start fixed bin (21);

	     if f.text_length > 0 then do;
		start = index (reverse (substr (text, 1, f.text_length -1)), NEW_LINE);
		if start = 0 then start = 1;
		else start = f.text_length - start + 1;
		return (get_number (start, f.end_line_number));
	     end;

	     return ("0"b);

	end set_end_number;

/*   */
/*  This procedure is given a pathname and it gets a pointer to the segment.
   If create_if_not_found is set, it creates the segment.
   If it is not set, it assumes the segment exists and contains line numbered text.
   It returns "1"b if seg_ptr can be set and contains valid text.
   If an error occurs message is set.
*/
get_seg_ptr: proc (create_if_not_found, path) returns (bit (1));

dcl  create_if_not_found bit (1);			/* ON if should create if it doesn't exist */
dcl  path char (168) var;				/* path of the segment */

dcl  fst_get_segment_ entry (bit (1) unal, char (*) var, char (*) var, ptr, fixed bin (21), fixed bin (35));

	     if path ^= "" then do;
		call fst_get_segment_ (create_if_not_found, path, f.working_dir, seg_ptr, seg_length, code);
		if code = 0 then return ("1"b);
		else message = path;
	     end;
	     else message = "pathname missing";

	     return ("0"b);


	end get_seg_ptr;

/*  */
/* * This procedure merges the pending changes to the temporary text.  If check is set, and there
   * have been changes, since the last save, the user is queried, since editing will be lost.
   *
   * These conventions are followed in inserting the pending changes:
   *
   *	1.  If the new line appears in text, it replaces the old line.
   *	2.  If the new line has num_chars = 0, it causes the old line in text to be deleted.
   *	3.  If the new line does not appear in text, it is inserted.
*/
merge_add: proc (check) returns (bit (1) unal);

dcl  check fixed bin;

/* automatic */

dcl  answer char (20) var;				/* yes or no */
dcl  i fixed bin (21);
dcl  last_index fixed bin (21);
dcl  line_length fixed bin (21);
dcl  line_start fixed bin (21);
dcl  save_ptr ptr;
dcl  table_ptr ptr;

dcl 1 t aligned based (table_ptr) like dfast_line_table;


dcl  dfast_get_table_ entry (bit (1) unal, ptr, fixed bin (21), ptr, fixed bin (35));
%include dfast_line_table;

/*  */
	     if check = QUERY then do;
		if (f.text_modified & f.text_length > 0) | f.alt_length > 0 then do;
		     query_info.version = query_info_version_6;
		     query_info.yes_or_no_sw = "1"b;
		     query_info.suppress_name_sw = "1"b;
		     query_info.cp_escape_control = "10"b;
		     call command_query_ (addr (query_info), answer, "fast",
			"Changes will be lost if you quit.  Do you want to quit ? ");
		     if answer = "yes" then do;
			f.text_modified = "0"b;
			f.alt_length = 0;
			return ("1"b);
		     end;
		     else if answer = "no" then return ("0"b);
		end;
	     end;


	     if f.alt_length > 0 then do;
		table_ptr = addrel (f.alt_ptr, divide (f.alt_length + 3, 4, 21));
		t.table_length = 0;
		call dfast_get_table_ ("1"b, f.alt_ptr, f.alt_length, table_ptr, 0);
		temp_length = 0;
		temp_ptr = null;
		call get_temp_segment_ ("fast", temp_ptr, code);
		if code = 0 then do;
		     temp_ptr_is_temp_seg = "1"b;
		     last_index = 0;
		     do i = 1 to t.table_length while (message = "");
			if find_first_line (last_index + 1, "0"b, (t.line (i).number), line_start, line_length) then do;
			     if last_index < line_start -1 then call copy
				(substr (text, last_index + 1, line_start - 1 - last_index ));
			     if t.line (i).num_chars > 0 then call copy (substr (alt, t.line (i).start,
				t.line (i).num_chars));
			     last_index = line_start + line_length - 1;
			end;
		     end;
		     if message = "" then do;
			if last_index < f.text_length then
			     call copy (substr (text, last_index + 1, f.text_length - last_index));

/* Exchange ptrs so temp will become text.  temp_ptr is set so a buffer (previously text_ptr) can be freed. */

			save_ptr = f.text_ptr;
			f.text_ptr = temp_ptr;
			f.text_length = temp_length;
			temp_ptr = save_ptr;

			f.alt_length = 0;
			f.text_modified = "1"b;
			temp_length = 0;
			t_ptr = f.text_ptr;
			t_length = f.text_length;
			if t.line (t.table_length).number >= f.end_line_number then do;
			     if t.line (t.table_length).num_chars > 0 then f.end_line_number = t.line (t.table_length).number;
			     else if set_end_number () then;
			     end_line = f.end_line_number;
			end;
		     end;
		     if temp_ptr ^= null then call release_temp_segment_ ("fast", temp_ptr, code);
		     temp_ptr_is_temp_seg = "0"b;
		     temp_ptr = f.alt_ptr;
		end;
	     end;


	     if check = NOT_EMPTY then do;
		if t_length = 0 then do;
		     message = "buffer is empty";
		     return ("0"b);
		end;
	     end;
	     return ("1"b);

	end merge_add;

/*  */
/* This procedure switches the pointers so the temporary buffer becomes the temporary text.  The temp_ptr
   and the alter ptr are the same.
*/

switch_buffers: proc (set_last_number);

dcl  set_last_number bit (1) unal;			/* ON if should set the last number */

	     if code = 0 then do;
		f.alt_ptr = f.text_ptr;
		t_ptr, f.text_ptr = temp_ptr;
		t_length, f.text_length = temp_length;
		f.text_modified = "1"b;

		if set_last_number then if set_end_number () then;
	     end;

	     return;

	end switch_buffers;

/*  */
/* * This procedure parse two strings of the form:
   *
   *	/old_string/new_string/
   *
   *	where / can be any delimitor except blank or tab
*/
parse_strings: proc (two_strings, old_string, new_string) returns (bit (1) unal);

dcl  two_strings bit (1) unal;			/* ON if should set both strings */
dcl  old_string char (*) var;
dcl  new_string char (*) var;

dcl  delimitor char (1);
dcl  start fixed bin;
dcl  i fixed bin;

	     if input_line_start <= input_line_length then do;
		start = input_line_start;
		i = verify (substr (line, start, input_line_length-start+1), WHITE_SPACE) - 1;
		if i > -1 then do;
		     delimitor = substr (line, start + i, 1);
		     start = start + i + 1;
		     i = index (substr (line, start, input_line_length-start+1), delimitor) -1;
		     if i > 0 then do;
			old_string = substr (line, start, i);
			if two_strings then do;
			     start = start + i + 1;
			     i = index (substr (line, start, input_line_length-start+1), delimitor) -1;
			     if i>0 then new_string = substr (line, start, i);
			     else if i = 0 then new_string = "";
			     else message = "delimitor is missing  " || delimitor;
			end;
		     end;

		     else if i = 0 then message = "string is missing";
		     else message = "delimitor missing " || delimitor;
		end;
		else message = "string is missing";

		if message = "" then do;
		     input_line_start = start + i +1;
		     return ("1"b);
		end;
	     end;
	     else message = "string is missing";

	     return ("0"b);

	end parse_strings;

/*  */
copy:	proc (string);

dcl  string char (*);

	     if temp_length + length (string) <= f.max_seg_size then do;
		substr (temp, temp_length + 1, length (string)) = string;
		temp_length = temp_length + length (string);
	     end;
	     else message = "segment would exceed max segment size";

	     return;

	end copy;


term_seg: proc;

	if seg_ptr ^= null then call hcs_$terminate_noname (seg_ptr, (0));
	if temp_ptr ^= null & temp_ptr_is_temp_seg then call release_temp_segment_ ("fast", temp_ptr, (0));

	end term_seg;

     end fst_edit_;
