dfast_get_table_: proc (convert, seg_ptr, seg_length, table_ptr, code);

/* * This procedure fills in the line table and checks the segment to be sure it is ordered.
   * If the segment is out of order and convert is not set then an error code is set.
   * Otherwise the table is set up and sorted so that the lines will be in order when copied.
   *
   *	If the segment doesn't end with a new line it the characters following the last new line will
   *	be discarded.  (The whole file if necessary).
   *
   *	If lines do not begin with line numbers they will be deleted.
   */

dcl  convert bit (1) unal;				/* ON if illegal lines should be converted */
dcl  seg_ptr ptr;					/* points to segment with source code */
dcl  seg_length fixed bin (21);			/* number of characters in segment */
dcl  table_ptr ptr;					/* points to table structure */
dcl  code fixed bin (35);

/* automatic */

dcl  seg_index fixed bin (21);			/* seg_index from 1 on segment */
dcl  new_number fixed bin;
dcl  last_num fixed bin;
dcl  i fixed bin (21);
dcl  sorted bit (1) unal;
dcl  blank bit (1) unal;				/* ON if line with just a number */
dcl  len fixed bin (21);

dcl 1 temp_line,
    2 temp_num fixed bin (21),			/* for moving lines around */
    2 temp_start fixed bin (21),
    2 temp_num_chars fixed bin (21);

dcl  (index, substr, verify) builtin;

/* external */

dcl  dfast_error_ entry (fixed bin (35), char (*), char (*));

/*  constants */

dcl  new_line char (1) int static options (constant) init ("
");

/* based */

dcl  seg char (seg_length) based (seg_ptr);
dcl 1 t aligned based (table_ptr) like dfast_line_table;

%include dfast_line_table;
%include dfast_error_codes;

/*  */
	last_num = -1;
	seg_index = 1;
	sorted = "1"b;
	t.table_length = 0;

	do while (seg_index <= seg_length);

	     len = index (substr (seg, seg_index, seg_length - seg_index + 1), new_line);
	     if len = 0 then do;
		if convert then seg_index = seg_length + 1;	/* discard line fragment */
		else code = error_no_nl;
	     end;

	     else do;
		if get_number (substr (seg, seg_index, len), new_number, blank, code) then do;
		     if new_number > last_num then t.table_length = t.table_length +1;

		     else do;
			if ^convert then code = error_bad_sort;

/*  If the lines have the same number the index is not incremented and so the earlier line is ignored. */

			else do;
			     if new_number < last_num then do;
				t.table_length = t.table_length +1;
				sorted = "0"b;
			     end;
			end;
		     end;

		     if code = 0 then do;
			t.line (t.table_length).number = new_number;
			t.line (t.table_length).start = seg_index;
			if blank then t.line (t.table_length).num_chars = 0;
			else t.line (t.table_length).num_chars = len;
		     end;
		     last_num = new_number;
		end;
	     end;
	     if code ^= 0 then do;
		call dfast_error_ (code, "sort", substr (seg, seg_index, len));
		return;
	     end;
	     seg_index = seg_index + len;
	end;


	do i = 1 to t.table_length -1 while (^sorted);
	     sorted = "1"b;
	     do seg_index = 1 to t.table_length -i;
		if t.line (seg_index).number > t.line (seg_index+1).number then do;
		     sorted = "0"b;
		     temp_line = t.line (seg_index);
		     t.line (seg_index) = t.line (seg_index+1);
		     t.line (seg_index+1) = temp_line;
		end;

		else if t.line (seg_index).number = t.line (seg_index +1).number then t.line (seg_index).num_chars = 0;
	     end;
	end;

	return;

/*  */
/* This procedure is given a string of characters ending with a new_line character.
   It returns the line number of the line and if it is a blank line.  A blank line
   contains a line number followed by a new_line character.  If the line contains blanks or tabs it is
   not considered blank.
   If convert is 0 then code is set.
*/
get_number: proc (string, number, blank, code) returns (bit (1) unal);

dcl  string char (*);
dcl  number fixed bin;
dcl  blank bit (1) unal;				/* On if the line only contains a number */
dcl  code fixed bin (35);

dcl  fst_cv_line_num_ entry  (char (*), fixed bin, fixed bin (35)) returns (bit (1) unal);

dcl  i fixed bin (21);

	     i = verify (string, "0123456789");
	     if i = 1 then code = error_bad_line;
	     else do;
		if fst_cv_line_num_ (substr (string, 1, i-1), number, code) then do;
		     if substr (string, i, 1) = new_line then blank = "1"b;
		     else blank = "0"b;
		     return ("1"b);
		end;
	     end;

	     if convert then code = 0;
	     return ("0"b);

	end get_number;
     end dfast_get_table_;
