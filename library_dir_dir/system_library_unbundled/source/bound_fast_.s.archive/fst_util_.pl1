/****^  ******************************************************
        *                                                    *
        * Copyright, (C) Honeywell Bull Inc., 1987           *
        *                                                    *
        * Copyright (c) 1972 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        ****************************************************** */



/****^  HISTORY COMMENTS:
  1) change(87-12-03,TLNguyen), approve(87-12-03,MCR7806),
     audit(87-12-10,Lippard), install(88-01-19,MR12.2-1015):
      - Fixed subscript range condition occured in the fst_util_$merge entry.
      - Fixed substring range condition occured in the fst_util_$change entry.
      - Replace the num_lines subscript of the t array field in the
        basic_rsq_table based record with basic_rsq_table.num_lines as
        coding standards.
                                                   END HISTORY COMMENTS */


fst_util_: proc;

/*  This procedure implements the merge_text, move_text, change, input, and renumber commands.

   Written 3/76 by S.E. Barr
   Modified 11/76 by S.E. Barr to prevent change request from operationg on the entire text
   Bug fixed in merging of non-basic text 06/24/81 S. Herbst
   Modified 10/31/83 by C Spitzer. add cleanup handlers.
*/
/*   parameters */

dcl  arg_increment fixed bin;				/* increment for resequencing */
dcl  code fixed bin (35);				/* fast error code */
dcl  edit_ptr ptr;					/* ptr to structure with edit information */
dcl  next_number fixed bin;				/* numbers generated for input must be less than this */
dcl  new_string char (*) var;				/* replacement string for change entry */
dcl  num_chars fixed bin (21);			/* number of characters in block to be moved */
dcl  old_string char (*) var;				/* old string for change entry */
dcl  seg char (*);					/* contents of segment to be inserted */
dcl  seq_number fixed bin;				/* first vaule for renumbering */
dcl  start fixed bin (21);				/* index in text of block to be moved */
dcl  table_ptr ptr;					/* ptr to basic_rsq_table */
dcl  table_1_ptr ptr;				/* ptr to 1st table for MERGE */
dcl  table_2_ptr ptr;				/* ptr to  2nd table for MERGE */
dcl  target fixed bin (21);				/* index in text before the new location of block */
dcl  temp_length fixed bin (21);			/* number of characters in modified version of text */

/* automatic */

dcl  change_ok bit (1) unal;				/* ON if change is allowed */
dcl  check bit (1) unal;				/* ON to prevent substitution of line numbers */
dcl  check_null bit (1) unal;				/* ON to prevent forming a line number with a null string  */
dcl  done bit (1) unal;
dcl  i fixed bin (21);
dcl  increment fixed bin;
dcl  j fixed bin (21);
dcl  len_new_string fixed bin;			/* number of characters in newstring */
dcl  len_old_string fixed bin;			/* number  of characters in old_string */
dcl  last_index fixed bin (21);			/* index in text of last character copied into temp */
dcl  number_pic pic "99999";
dcl  number_pic_blank pic "99999vb";
dcl  temp_ptr ptr;

/* based */

dcl 1 basic_rsq_table aligned based (table_ptr),
    2 num_lines fixed bin,
    2 t (basic_rsq_table.num_lines) aligned,
      3 old_number fixed bin (17) unal,
      3 new_number fixed bin (17) unal;
dcl 1 f aligned based (edit_ptr) like fst_edit_info;
dcl  ptr_array (1) ptr based;
dcl  text char (f.text_length) based (f.text_ptr);
dcl  temp char (f.max_seg_size) based (temp_ptr);

/* constants */

dcl  check_line_number bit (1) unal int static options (constant) init ("1"b); /* ON if line numbers should be checked.
						   OFF if only line references are checked */
dcl  conditional bit (1) unal int static options (constant) init ("1"b); /* ON if renumber to prevent overlap.
						   OFF must renumber */
dcl  DIGIT char (10) int static init ("0123456789");
dcl  NEW_LINE char int static init ("
");
dcl  max_line_num fixed bin int static options (constant) init (99999);

dcl (addr, addrel, index, substr, verify, length, mod, null, reverse) builtin;
dcl  cleanup condition;

/* external */

dcl  dfast_basic_resequence_ entry (fixed bin (21), ptr, char (*), bit (1) unal, ptr, fixed bin (21), fixed bin (35));
dcl  fst_cv_line_num_ entry (char (*), fixed bin, fixed bin (35)) returns (bit (1));
dcl  ioa_ entry options (variable);
dcl  iox_$get_line entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  iox_$user_input ptr ext;
dcl  iox_$user_output ptr ext;
dcl  get_temp_segments_ entry (char (*), (*) ptr, fixed bin (35));
dcl  release_temp_segments_ entry (char (*), (*) ptr, fixed bin (35));

/*  */
%include fst_edit_info;
%include dfast_error_codes;
/*  */
/*  This entry resequences the temporary text.
*/
resequence: entry (edit_ptr, seq_number, arg_increment, temp_length, code);

	temp_length = 0;
	increment = arg_increment;
	temp_ptr = f.alt_ptr;
	if f.basic_source then do;
	     table_ptr = null;

	     on cleanup begin;
		if table_ptr ^= null then call release_temp_segments_ ("fst_util_", addr (table_ptr) -> ptr_array, code);
		end;

	     call get_temp_segments_ ("fst_util_", addr (table_ptr) -> ptr_array, code);
	     if code = 0 then do;
		basic_rsq_table.num_lines = 0;
		call fill_basic_table (^conditional, text);
		if code = 0 then call dfast_basic_resequence_ (f.max_seg_size, table_ptr, text,
		     "1"b, temp_ptr, temp_length, code);
	     end;

	     if table_ptr ^= null then call release_temp_segments_ ("fst_util_", addr (table_ptr) -> ptr_array, (0));
	end;

	else call renumber (^conditional, text);

	return;

/*   */
/*  This entry inserts the segment "seg" into the temporary text after location start -1.  The segment to be
   inserted is resequenced beginning with seq_number and incrementing by 10 to derive subsequent numbers.  If
   the segment is inserted before the end of the temporary text, the text following seg will be resequenced, if
   necessary, to prevent overlap.
*/
merge:	entry (edit_ptr, seg, start, seq_number, temp_length, code);

	temp_ptr = f.alt_ptr;
	temp_length = 0;
	increment = 10;
	seq_number = seq_number + increment - mod (seq_number, increment);
	if f.basic_source then do;
	     table_ptr = null;

	     on cleanup begin;
		if table_ptr ^= null then call release_temp_segments_ ("fst_util_", addr (table_ptr) -> ptr_array, code);
		end;

	     call get_temp_segments_ ("fst_util_", addr (table_ptr) -> ptr_array, code);
	     if code = 0 then do;
		basic_rsq_table.num_lines = 0;

/* There is no temporary text or the new segment is put at the end so the temporary text doesn't need to be changed. */

		if f.text_length = 0 | start > f.text_length then do;
		     if f.text_length > 0 then call copy (text);
		     call fill_basic_table (^conditional, seg);
		     call copy_rsq (check_line_number, seg);
		end;

/* segment is inserted at the beginning. */

		else if start = 1 then do;
		     call fill_basic_table (^conditional, seg);
		     if code = 0 then do;
			call copy_rsq (check_line_number, seg);
			if code = 0 then do;
			     basic_rsq_table.num_lines = 0;
			     call fill_basic_table (conditional, text);
			     if code = 0 then call copy_rsq (check_line_number, text);
			end;
		     end;
		end;

/* segment is inserted in the middle. */

		else do;
		     table_1_ptr = table_ptr;
		     call fill_basic_table (^conditional, seg);
		     if code = 0 then do;
			table_2_ptr, table_ptr = addrel (addr (basic_rsq_table.t (basic_rsq_table.num_lines).old_number), 1);
			call fill_basic_table (conditional, substr (text, start, f.text_length - start + 1));

/* If the text didn't have to resequenced, it can be copied. */

			if table_2_ptr -> basic_rsq_table.num_lines = 0 then do;
			     call copy (substr (text, 1, start -1));
			     table_ptr = table_1_ptr;
			     call copy_rsq (check_line_number, seg);
			     call copy (substr (text, start, f.text_length - start + 1));
			end;

/* text has to edited for line number reference changes. */

			else do;
			     call copy_rsq (^check_line_number, substr (text, 1, start-1));
			     table_ptr = table_1_ptr;
			     call copy_rsq (check_line_number, seg);
			     table_ptr = table_2_ptr;
			     call copy_rsq (check_line_number, substr (text, start, f.text_length - start + 1));
			end;
		     end;
		end;
	     end;
	     if table_ptr ^= null then call release_temp_segments_ ("fst_util_", addr (table_ptr) -> ptr_array, (0));
	end;
	else do;
	     if start > 1 then call copy (substr (text, 1, start -1));
	     call renumber (^conditional, seg);
	     if code = 0 then do;
		if start <= f.text_length then call renumber (conditional, substr (text, start,
		     f.text_length - start + 1));
	     end;
	end;
	return;

/*  */
/* This entry moves a block of lines to a new location (target + 1) in the temporary text.  The block of lines
   that are moved are resequenced beginning with seq_number and incrementing by 10.  Lines following the new location
   of the moved lines will be resequenced, if necessary to prevent overlap
   The block is not empty and there is no overlap of the target and the block.
   *
   *
   *			___________			___________
   *		1	|	|		1	|	|
   *			|	|			|	|
   *			___________			___________
   *		target	|	|		start	|/////////|
   *			|	|			|/////////|
   *			___________			___________
   *		start	|/////////|	start+num_chars	|	|
   *			|/////////|			|	|
   *			___________			___________
   *	  start+num_chars	|	|		target	|	|
   *			|	|			|	|
   *			___________			___________
   *	  f.text_length			f.text_length
*/
move:	entry (edit_ptr, start, num_chars, target, seq_number, temp_length, code);

	temp_ptr = f.alt_ptr;
	temp_length = 0;
	increment = 10;
	seq_number = seq_number + increment - mod (seq_number, increment);
	if f.basic_source then do;
	     table_ptr = null;

	     on cleanup begin;
		if table_ptr ^= null then call release_temp_segments_ ("fst_util_", addr (table_ptr) -> ptr_array, code);
		end;

	     call get_temp_segments_ ("fst_util_", addr (table_ptr) -> ptr_array, code);
	     if code = 0 then do;
		call fill_basic_table (^conditional, substr (text, start, num_chars));
		if target < start then do;
		     if start - target - 1 > 0 then call fill_basic_table (conditional, substr (text, target+1,
			start - target - 1));
		     i = start + num_chars;
		     if i <= f.text_length then call fill_basic_table (conditional, substr (text, i,
			f.text_length - i + 1));

		     if target > 0 then call copy_rsq (^check_line_number, substr (text, 1, target));
		     call copy_rsq (check_line_number, substr (text, start, num_chars));
		     if start - target -1 > 0 then call copy_rsq (check_line_number, substr (text, target+1,
			start - target - 1));
		     if i <= f.text_length then call copy_rsq (check_line_number, substr (text, i, f.text_length - i + 1));
		end;
		else do;
		     if target < f.text_length then
			call fill_basic_table (conditional, substr (text, target+1, f.text_length - target));

		     if start > 1 then call copy_rsq (^check_line_number, substr (text, 1, start -1));
		     i = start + num_chars;
		     if i <= target then call copy_rsq (^check_line_number, substr (text, i, target - i + 1));
		     call copy_rsq (check_line_number, substr (text, start, num_chars));
		     if target < f.text_length then call copy_rsq (check_line_number, substr (text, target + 1,
			f.text_length - target));
		end;

		if table_ptr ^= null then call release_temp_segments_ ("fst_util_", addr (table_ptr) -> ptr_array,
		     (0));
	     end;
	end;

	else do;
	     if target < start then do;
		if target > 0 then call copy (substr (text, 1, target));
		call renumber (^conditional, substr (text, start, num_chars));
		if start - target - 1 > 0 then call renumber (conditional, substr (text, target +1, start - target - 1));
		i = start + num_chars;
		if i <= f.text_length then call renumber (conditional, substr (text, i, f.text_length - i + 1));
	     end;
	     else do;
		if start > 1 then call copy (substr (text, 1, start - 1));
		i = start + num_chars;
		if i <= target then call copy (substr (text, i, target - i +1));
		call renumber (^conditional, substr (text, start, num_chars));
		if target < f.text_length then call renumber (conditional, substr (text, target+1, f.text_length - target));
	     end;
	end;

	return;

/*  */
/* * This entry replaces old_string with new_string within a block of lines.  A check to prevent changing line
   * number is made if:
   *
   *	1.  old_string begins with a digit:
   *		c/20/y/
   *		20 x = 20 	->	20 x = y
   *
   *	2.  new_string begins with a digit:
   *		c/ x/0/
   *		20 x = x		->	20 x =0
   *
   *	3.  new_string is null:
   *		c/  //
   *		20  40  50	->	20  4050
*/
change:	entry (edit_ptr, start, num_chars, old_string, new_string, temp_length, code);

	len_new_string = length (new_string);
	len_old_string = length (old_string);
	temp_ptr = f.alt_ptr;

/* set up checks if old_string or new_string begins with a digit or new_string is null. */

	change_ok = "1"b;
	
	if len_new_string = 0 then do;
	     if len_old_string = 0 then check = "0"b;
	     else  check = (verify (substr (old_string, 1, 1), DIGIT) = 0);
	end;
          else if len_old_string ^= 0 then check = (verify (substr (old_string, 1, 1), DIGIT) = 0) | (verify (substr (new_string, 1, 1), DIGIT) = 0);
	else check = (verify (substr (new_string, 1, 1), DIGIT) = 0);

	check_null = (len_new_string = 0);


	last_index = 0;
	do while (num_chars > 0);
	     i = index (substr (text, start, num_chars), old_string) -1;
	     if i > -1 then do;

/* The check verifies back for the first non-digit.  If this is a new_line character or the start of the text,
   the change is not allowed.  In the following case replacement is not allowed.
   *
   *	c /25/30/		abcdefgh(nl)1025 abc	(nl) = new line  character
   *			|
   *			start		(i = 12, j = 4)
*/
		if check | check_null then do;
		     j = verify (reverse (substr (text, 1, start+ i -1)), DIGIT);
		     if j > 0 then do;
			change_ok = (substr (text, start + i - j, 1) ^= NEW_LINE);
		     end;
		     else change_ok = "0"b;		/* all characters were digits (1st line) */

/* This check overrides the previous one, if: 1) the second string was null, 2) the first string did not begin
   with a digit and 3) the concationation will not form a line number.
   *
   *	c /ab//	 for "20abc"	-> "20c"		overrides
   *		 for "20ab7"	-> "20ab7"	doesn't override previous check
*/
		     if check_null & ^check then do;
			if verify (substr (text, start + i + len_old_string, 1), DIGIT) > 0 then change_ok = "1"b;
		     end;
		end;

		if change_ok then do;
		     num_chars = num_chars - i - len_old_string;
		     i = start + i -1;
		     if i > last_index then call copy (substr (text, last_index + 1, i - last_index));
		     if temp_length + len_new_string <= f.max_seg_size then do;
			substr (temp, temp_length + 1, len_new_string) = new_string;
			temp_length = temp_length + len_new_string;
			last_index = i + len_old_string;
			start = last_index + 1;
		     end;
		     else code = error_max_size;
		end;
		else do;
		     change_ok = "1"b;
		     start = start + i + 1;
		     num_chars = num_chars - i - 1;
		end;
	     end;

	     else num_chars = 0;
	end;

	if last_index = 0 then code = error_no_string;
	else if last_index < f.text_length then call copy (substr (text, last_index+1, f.text_length - last_index));

	return;

/*   */
/* * This entry implements input mode:  a line number is printed and the user completes the line.
   * This mode is terminated when:
   *
   *	1.  The user types a line with only the new_line character.
   *	2.  The next input line number would be equal or exceed next_number.
*/
input:	entry (edit_ptr, start, seq_number, arg_increment, next_number, temp_length, code);

	temp_ptr = f.alt_ptr;
	increment = arg_increment;
	seq_number = seq_number + increment - mod (seq_number, increment);


	if start > 1 then call copy (substr (text, 1, start -1));

	done = "0"b;
	do while (seq_number < next_number & ^done);
	     number_pic_blank = seq_number;
	     call iox_$put_chars (iox_$user_output, addr (number_pic_blank), length (number_pic_blank), code);
	     call copy ((number_pic_blank));
	     call iox_$get_line (iox_$user_input, addr (substr (temp, temp_length + 1, 1)), 150, i, code);
	     if code = 0 then do;
		if i = 1 then do;
		     temp_length = temp_length - 6;	/* remove last number and blank */
		     seq_number = seq_number - increment;
		     done = "1"b;
		end;
		else temp_length = temp_length + i;
	     end;
	     else done = "0"b;
	     seq_number = seq_number + increment;
	end;

	if code = 0 then do;
	     if start <= f.text_length then call copy (substr (text, start, f.text_length - start + 1));
	     else f.end_line_number = seq_number - increment;
	     if ^done then call ioa_ ("end of input mode.  Next line number is  ^d", next_number);
	end;

	return;


/*  */
/*  This procedure copies text from seg into the temporary buffer temp.  It renumbers the lines.

   1.  If the line begins with a number, the number is replaced.
   2.  If the line does not begin with a number, a number is added.
*/

renumber:	proc (conditional, seg);


dcl  conditional bit (1) unal;			/* ON if renumber only if necessary */
dcl  seg char (*);


dcl  line_start fixed bin (21);			/* index of line to be copied */
dcl  num_chars fixed bin (21);			/* length of line without number */
dcl  i fixed bin (21);
dcl  len fixed bin (21);
dcl  num fixed bin;


	     len = length (seg);
	     line_start = 1;

	     do while (line_start <= len & code = 0);
		i = verify (substr (seg, line_start), DIGIT) - 1;
		if i = -1 then line_start = len + 1;
		else do;
		     if conditional & i > 0 then do;
			if fst_cv_line_num_ (substr (seg, line_start, i), num, code) then do;
			     if num > seq_number then do;
				call copy (substr (seg, line_start, len - line_start + 1));
				return;
			     end;
			end;
		     end;
		     line_start = line_start + i;
		     num_chars = index (substr (seg, line_start), NEW_LINE);
		     if num_chars = 0 then num_chars = len - line_start + 1;
		     if seq_number <= max_line_num then do;
			number_pic = seq_number;
			call copy ((number_pic));
			call copy (substr (seg, line_start, num_chars));
			line_start = line_start + num_chars;
			seq_number = seq_number + increment;
		     end;
		     else code = error_edit_max_num;
		end;
	     end;

	     return;
	end renumber;



/*  */
/* This procedure copies the segment into the temporary buffer.
*/
copy:	proc (seg);

dcl  seg char (*);

dcl  i fixed bin (21);

	     i = length (seg);
	     if i > 0 then do;
		if temp_length + i <= f.max_seg_size then do;
		     substr (temp, temp_length + 1, i) = seg;
		     temp_length = temp_length + i;
		end;
		else code = error_max_size;
	     end;

	     return;

	end copy;



/* *  This procedure calls dfast_basic_resequence_ which edits seg to use the new line numbers in the table.
   *  The output is is stored in temp.
   *
   *	check_line_numbers	= "1"b	ON if line numbers should be edited also.
   *			= "0"b	OFF if only line number references are changed.
*/
copy_rsq:	proc (check_line_numbers, seg);

dcl  check_line_numbers bit (1) unal;
dcl  seg char (*);

	     call dfast_basic_resequence_ (f.max_seg_size, table_ptr, seg, check_line_numbers, temp_ptr, temp_length,
		code);

	     return;

	end copy_rsq;

/*  */
/* * This procedure adds to a table to be used to resequence a basic source segment.  It uses these global variables:
   *
   *	table_ptr		ptr to table
   *	num_lines		number of lines in table
   *	seq_number	new_number
   *	increment		value to derive subsequent numbers
   *
   * If conditional is set, it puts the number in the table only if it is less than the seq_number.
*/
fill_basic_table: proc (conditional, seg);

dcl  conditional bit (1) unal;
dcl  seg char (*);

/* automatic */

dcl  start fixed bin (21);
dcl  i fixed bin (21);
dcl  old_num fixed bin;

	     start = 1;
	     do while (start <= length (seg) & code = 0);
		i = verify (substr (seg, start), DIGIT) - 1;
		if i > 0 then do;
		     if fst_cv_line_num_ (substr (seg, start, i), old_num, code) then do;

/* conditional test.  If the next number is greater or equal to the sequence number, no more lines need to be added to
   the table.
*/
			if conditional then if old_num >= seq_number then return;

			basic_rsq_table.num_lines = basic_rsq_table.num_lines + 1;

			basic_rsq_table.t (basic_rsq_table.num_lines).old_number = old_num;
			basic_rsq_table.t (basic_rsq_table.num_lines).new_number = seq_number;
			seq_number = seq_number + increment;
			start = start + i;
			i = index (substr (seg, start), NEW_LINE);
			if i = 0 then i = length (seg) - start + 1;
			start = start + i;
		     end;
		end;
		else code = error_un_num_text;
	     end;

	     return;

	end fill_basic_table;

     end fst_util_;
