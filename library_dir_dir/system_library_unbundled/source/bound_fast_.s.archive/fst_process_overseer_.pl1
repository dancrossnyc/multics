/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(87-12-02,TLNguyen), approve(87-12-02,MCR6357),
     audit(87-12-10,Lippard), install(88-01-19,MR12.2-1015):
     - Asign null to f.alt_ptr and "0"b to the f.flags.pad fields
       to meeting coding standards.
     - Remove the hcs_$get_system_search_rules from the source because
       it is not referenced anywhere within the source.
     - Declare the empty as builtin type because it is referenced
       within the source.
                                                   END HISTORY COMMENTS */


fst_process_overseer_: proc;

/* * This procedure is the listener for the FAST subsystem and the command fast.
   *  A line is read from user_input and leading blanks and tabs are ignored.
   *	1.  Blank lines are ignored.
   *	2.  The line is assumed to be an edit request and fst_edit_ is called.
   *	3.  If fst_edit_ sets continue to 1, then the command has not be processed and
   *	    fst_command_processor_ is called.
*/
/* Modified 1/77 by S.E. Barr to use FAST */
/* Modified 10/31/83 by C Spitzer to add cleanup handler, default to sp_basic if used as process_overseer_ */
/* Modified 1984-08-20 BIM for pit instead of pitmsg. */

/* automatic */

dcl  bit_count fixed bin (24);			/* bit coun of message of the day */
dcl  code fixed bin (35);				/* standard Multics code */
dcl  continue fixed bin;				/* 0= edit;  1= not edit;  -1= quit */
dcl  edit_ptr ptr;					/* ptr to edit_info structure */
dcl  entry_value entry init (cp_handler);		/* contrivance to get proc_ptr to cp_handler */
dcl 1 f aligned like fst_edit_info;
dcl  line char (150);				/* line typed by user */
dcl  line_length fixed bin (21);			/* number of characters in line */
dcl  line_start fixed bin;				/* index in line of first non blank */
dcl  pp ptr;
dcl  mothd_ptr ptr;
dcl  print_prompt_char bit (1) unal;
dcl  quit_prompt bit (1);
dcl  saved_precision_length fixed bin;
dcl 1 search_rules aligned,
    2 number fixed bin init (1),
    2 names (1) char (168) aligned init ("fast");
dcl 1 saved_search_rules aligned,			/* FAST as a command saves the old search rules */
	2 number fixed bin,
	2 names (21) char (168) aligned;
dcl  saved_cp_ptr ptr;			/* FAST as a command save the old value for cu_$cp */


dcl (addr, divide, empty, null, length, index, reverse, substr, verify) builtin;

dcl  proc_ptr ptr based (addr (entry_value));		/* contrivance to get proc_ptr to cp_handler */
dcl  ptr_array (2) ptr based;

dcl  (cleanup, quit) condition;

/* constants */

dcl  WHITE_SPACE char (2) int static options (constant) init ("	 "); /* blank tab */

/* external */

dcl  basic_$precision_length ext fixed bin;
dcl cu_$get_cp entry (ptr);
dcl  cu_$set_cp entry (ptr);
dcl  clock_ entry () returns (fixed bin (71));
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  dfast_error_ entry (fixed bin (35), char (*), char (*));
dcl  condition_ entry (char (*) aligned, entry);
dcl  hcs_$get_search_rules entry (ptr);
dcl  hcs_$initiate_search_rules entry (ptr, fixed bin (35));
dcl  hcs_$initiate_count entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (24), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$make_seg entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  iox_$control entry (ptr, char (*), ptr, fixed bin (35));
dcl  iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  iox_$user_output ptr ext;
dcl  fast_related_data_$in_fast_or_dfast bit (1) aligned ext;
dcl  fast_related_data_$in_dfast bit (1) aligned ext;
dcl  fst_command_processor_ entry (char (*), bit (1)unal);
dcl  fst_edit_ entry (ptr, char (*), fixed bin, bit (1) unal);
dcl  get_temp_segments_ entry (char (*), (*) ptr, fixed bin (35));
dcl  get_wdir_ entry () returns (char (168));
dcl  release_temp_segments_ entry (char (*), (*) ptr, fixed bin (35));
dcl  ioa_$ioa_switch entry options (variable);
dcl  iox_$get_line entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  iox_$user_input ptr ext;
dcl  sys_info$max_seg_size fixed bin (35) ext;

/*  */
%include user_attributes;
%include pit;
%include fst_edit_info;

/*  */
/* print message of the day, if the user did not use the -brief option. */

	call hcs_$make_seg ("", "pit", "", 01000b, pp, code);
	if ^pp -> pit.at.brief then do;
	     call hcs_$initiate_count (">system_control_1", "message_of_the_day", "", bit_count, 1, mothd_ptr, code);
	     if mothd_ptr ^= null then do;
		call iox_$put_chars (iox_$user_output, mothd_ptr, divide (bit_count, 9, 21, 0), code);
		call hcs_$terminate_noname (mothd_ptr, code);
	     end;
	end;

/* setup quit and condition handler;  set default vaules for edit_info */

	f.working_dir = substr (pp -> pit.homedir, 1, length (pp -> pit.homedir) + 1 - verify (reverse (pp ->
	     pit.homedir), " "));
	call hcs_$terminate_noname (pp, code);

	f.subsystem = "1"b;
	basic_$precision_length = 1;

COMMON:
	f.text_ptr = null;
	f.alt_ptr = null;
	saved_precision_length = basic_$precision_length;
	on cleanup begin;
	     if f.text_ptr ^= null then call release_temp_segments_ ("fast", addr (f.text_ptr) -> ptr_array, (0));
	     basic_$precision_length = saved_precision_length;
	     end;

	call initial (code);
	if code ^= 0 & f.subsystem then goto RETURN;

	call condition_ ("any_other", any_other_handler);
	call cu_$set_cp (proc_ptr);		/* Prevent the execution of an E request in edm */

	on quit begin;
	     call iox_$control (iox_$user_input, "resetread", addr (line), code);
	     call ioa_$ioa_switch (iox_$user_output, "QUIT");
	     quit_prompt = "1"b;
	     goto READ_LOOP;
	end;

/* If the FAST search rules can't be set, then use the default ones. */
	call hcs_$initiate_search_rules (addr(search_rules), code);
	if code ^= 0 then do;
	     search_rules.names(1) = "default";
	     call hcs_$initiate_search_rules (addr(search_rules), code);
	end;
	if f.subsystem then call iox_$control (iox_$user_input, "quit_enable", addr (line), code);

/* When FAST is entered from command level, the loop terminates when the "quit" command sets continue to -1.
   When FAST is entered as a subsystem, the loop terminates when the user logs out.
   fst_edit_ is called with the entire line.  fst_command_processor_ is called without the new line character.
*/

READ_LOOP:
	continue = 0;
	do while (continue > -1);
	     continue = 0;

	     if print_prompt_char | quit_prompt then do;
		call date_time_ (clock_ (), line);
		call ioa_$ioa_switch (iox_$user_output, "r  ^a^/", substr (line, 11, 4));
		quit_prompt = "0"b;
	     end;
	     call iox_$get_line (iox_$user_input, addr (line), length (line), line_length, code);
	     if code = 0 then do;

		line_start = verify (substr (line, 1, line_length), WHITE_SPACE);
		if line_start < line_length then do;
		     line_length = line_length - line_start + 1;
		     call fst_edit_ (edit_ptr, substr (line, line_start, line_length), continue, print_prompt_char);
		     if continue = 1 then call fst_command_processor_ (substr (line, line_start, line_length - 1),
			(f.alt_length > 0 | f.text_modified));
		end;
		else print_prompt_char = "0"b;
	     end;
	     else call dfast_error_ (code, "fast", "");
	end;

RETURN:
	call release_temp_segments_ ("fast", addr (f.text_ptr) -> ptr_array, code);
	if code ^= 0 then call dfast_error_ (code, "fast", "Could not release temporary segments");
	fast_related_data_$in_dfast, fast_related_data_$in_fast_or_dfast = "0"b;
	call hcs_$initiate_search_rules (addr (saved_search_rules), code);
	call cu_$set_cp (saved_cp_ptr);
	if code ^= 0 then call dfast_error_ (code, "fast", "");
	basic_$precision_length = saved_precision_length;

	return;


/* FAST command.  The current search rules and command processor are saved, as FAST will change them. 
  The flag f.subsystem is set off, so the "quit" command will be allowed.
*/
fast:	entry;

	f.subsystem = "0"b;
	f.working_dir = get_wdir_ ();
	call hcs_$get_search_rules (addr (saved_search_rules));
	call cu_$get_cp (saved_cp_ptr);

	goto COMMON;

/*  */
/*  This procedure is called when the user attempts to execute a command line from edm.
   It prints an error message and returns to edm.
*/
cp_handler: proc;

	     call ioa_$ioa_switch (iox_$user_output, "Illegal entry to command level");

	     return;

	end cp_handler;


/*   */
initial:	proc (arg_code);

dcl  arg_code fixed bin (35);


	     arg_code = 0;
	     edit_ptr = addr (f);
	     fast_related_data_$in_dfast = "0"b;	/* switches for BASIC */
	     fast_related_data_$in_fast_or_dfast = "1"b;

	     print_prompt_char, f.prompt = "1"b;
	     quit_prompt = "0"b;
	     f.pathname = "";
	     f.text_length = 0;
	     f.alt_length = 0;
	     f.text_modified = "0"b;
	     f.basic_source = "0"b;
	     f.max_seg_size = sys_info$max_seg_size;
	     f.end_line_number = 0;
	     f.flags.pad = "0"b;
	     call get_temp_segments_ ("fast", addr (f.text_ptr) -> ptr_array, arg_code);
	     if arg_code ^= 0 then call dfast_error_ (arg_code, "fast", "temp segments");

	     return;

	end initial;


/*  */
any_other_handler: proc (mcptr, cond_name, wcptr, info_ptr, cont);

dcl  mcptr ptr,
     cond_name char (*),
     wcptr ptr,
     info_ptr ptr,
     cont bit (1) aligned;
dcl  area area (300);
dcl (i, l) fixed bin;
dcl  NEW_LINE char (1) init ("
");
dcl  message_len fixed bin (21);
dcl  message char (message_len) based (message_ptr);
dcl  message_ptr ptr;

dcl  condition_interpreter_ entry (ptr, ptr, fixed bin (21), fixed bin, ptr, char (*), ptr, ptr);

%include condition_info;
%include condition_info_header;

	     if cond_name = "command_error" |
	     cond_name = "command_question" | cond_name = "string_size" then return;

	     call condition_interpreter_ (addr (area), message_ptr, message_len, 1, mcptr, cond_name, wcptr, info_ptr);
	     if cond_name = "command_abort_" then goto READ_LOOP;
	     if message_len > 0 then do;

/* * This code modifies the error message to remove the shriek name and the phrase "(in process dir)"
   *
   *	Error: ... condition by !BBBJFbDjnMccfW.temp.0310$main_|50 (line 20) (in process dir)
   *
   *	Error: ... condition by main_|50 (line 20)
*/
		if substr (message, 2, 6) = "Error:" then do;
		     l = index (substr (message, 2), NEW_LINE);
		     if l > 0 then do;
			i = index (substr (message, 2, l), "by !");
			if i = 0 then i = index (substr (message, 2, l), "at !");
			if i > 0 then do;
			     i = i + 4;
			     if substr (message, i+15, 5) = ".temp" & substr (message, i + 25, 1) = "$" then do;
				substr (message, i) = substr (message, i+26, message_len - i -26+1);
				message_len = message_len - 26;
				i = index (substr (message, 1, l+1), "(in process dir)");
				if i > 0 then do;
				     substr (message, i) = substr (message, i+16);
				     message_len = message_len - 16;
				end;
			     end;
			end;
		     end;
		end;

		call iox_$put_chars (iox_$user_output, message_ptr, message_len, code);
	     end;

	     if cond_name = "finish" then return;

	     if info_ptr ^= null
	     then do;				/* can we see if it's eligable to restart? */
		condition_info_header_ptr = info_ptr -> condition_info.info_ptr;
		if condition_info_header.length > 0	/* is it filled in? */
		then if condition_info_header.default_restart | condition_info_header.quiet_restart
		     then return;			/* no further action besides printing error msg */
		     else if condition_info_header.cant_restart
			then goto READ_LOOP;	/* can't do anything further with error */
		          else if ask_for_continue ()
			     then return;
			     else goto READ_LOOP;
		else if ask_for_continue ()
		     then return;
		     else goto READ_LOOP;
		end;
	     else if ask_for_continue ()
		then return;
	          else goto READ_LOOP;


ask_for_continue:
     proc () returns (bit (1) aligned);

dcl  answer char (4) varying;
dcl  maxlength builtin;

dcl  command_query_ entry() options(variable);

dcl  EXPLAIN_MSG char (120) int static options (constant) init (
"If you answer ""yes"", the user program will be ""start""ed.
If you answer ""no"", the user program will be aborted.");

%include query_info;

	query_info.version = query_info_version_6;
	query_info.yes_or_no_sw = "1"b;
	query_info.suppress_name_sw = "1"b;
	query_info.cp_escape_control = "10"b;
	query_info.prompt_after_explanation = "1"b;
	query_info.explanation_ptr = addr (EXPLAIN_MSG);
	query_info.explanation_len = maxlength (EXPLAIN_MSG);
	call command_query_ (addr (query_info), answer, "fast", "Do you wish to continue the user program? ");
	if answer = "yes"
	then return ("1"b);				/* return to user program */
	else return ("0"b);				/* abort the user program */

	end ask_for_continue;

	end any_other_handler;

     end fst_process_overseer_;
