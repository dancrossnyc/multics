/* **************************************************************
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1984 *
   *                                                            *
   ************************************************************** */

forum_add_participant:
fapt:
     proc;

/* v2 support for v1 access control commands/requests
   removed from v1 forum_create 7/13/83 Jay Pattin
   added v2 xobj hacking 4/15/84 Jay Pattin */

declare	ioa_			entry options (variable),
	com_err_			entry options (variable),
	com_err_$suppress_name	entry options (variable),
	active_fnc_err_		entry options (variable),
	forum_requests_$find_forum	entry (char (*), char (*), char (*), fixed bin, fixed bin (35)),
	cu_$af_return_arg		entry (fixed bin, ptr, fixed bin(21)) returns (fixed bin (35)),
	cu_$arg_count		entry (fixed bin),
	cu_$arg_list_ptr		entry returns (ptr),
	cu_$arg_ptr		entry (fixed bin, ptr, fixed bin (21), fixed bin (35)),

	forum_$open_forum		entry (char (*), char (*), fixed bin, fixed bin (35)),
	forum_$close_forum		entry (fixed bin, fixed bin (35)),
	forum_$set_switch_idx	entry (fixed bin, char (*), char (*), bit (1) aligned, fixed bin (35)),
	forum_$delete_forum		entry (char (*), char (*), fixed bin (35)),
	forum_$set_forum_acl	entry (char(*), char(*), ptr, fixed bin, fixed bin (35)),
	forum_$set_v1_forum_acl	entry (fixed bin, char (*), bit (1) aligned, bit (1) aligned, bit (1) aligned,
				fixed bin (35)),
	ssu_$abort_line		entry options (variable),
	ssu_$arg_count		entry (ptr, fixed bin),
	ssu_$arg_ptr		entry (ptr, fixed bin, ptr, fixed bin(21)),
	ssu_$return_arg		entry (ptr, fixed bin, bit(1) aligned, ptr, fixed bin(21)),
	ssu_$destroy_invocation	entry (ptr),
	ssu_$standalone_invocation	entry (ptr, char(*), char(*), ptr, entry, fixed bin(35));

declare	(P_ssu_ptr, P_passport_info_ptr)
				ptr parameter;

declare	code			fixed bin (35),
	arg_idx			fixed bin,
	whoami			char (32),
	forum_name		char (168),
	full_forum_name		char (32),
	forum_no			fixed bin,
	ssu_ptr			ptr,
	subsystem_entry		bit (1) aligned,
	forum_directory		char (168),
	name_len			fixed bin,
	person_id			char (22),
	argp			ptr,
	argl			fixed bin (21),
	argument			char (argl) based (argp),
	nargs			fixed bin,
	chairman			bit (1) aligned init (""b),
	public_switch		bit (1) aligned init (""b),
	person_switch		bit (1) aligned init (""b),
	read_only			bit (1) aligned init (""b),
	add_switch		bit (1) aligned,
	v2			bit (1) aligned,
	cleanup			condition,
	(index, null, substr)	builtin;

declare	1 acl			aligned,
	2 access_name		char (32),
	2 modes			bit (36) aligned,
	2 xmodes			bit (36) aligned,
	2 code			fixed bin (35);

declare	(RWC_XACL			init ("111"b),
	 RW_XACL			init ("110"b),
	 R_XACL			init ("100"b))
				bit (36) static aligned options (constant);

declare	(forum_et_$no_forum,
	forum_et_$no_such_user,
	error_table_$not_act_fnc,
	error_table_$inconsistent,
	error_table_$badopt)	external fixed binary (35);
%page;
%include forum_passport;
%page;
%include access_mode_values;
%page;
	whoami = "forum_add_participant";
	call create_subsystem ();
	if nargs < 2 then
	     call ssu_$abort_line (ssu_ptr, 0, "Usage: fapt meeting_name person_id {-control_arg}");
	person_switch, add_switch = "1"b;
	goto common;

forum_add_participant$add_participant:
     entry (P_ssu_ptr, P_passport_info_ptr);

	whoami = "add_participant";
	call setup_request ();
	if nargs < 1 then
	     call ssu_$abort_line (ssu_ptr, 0, "Usage: apt person_id {-control_arg}");
	person_switch, add_switch = "1"b;

common:
	forum_no = 0;
	chairman, read_only = ""b;

	on cleanup begin;
	     if ^subsystem_entry then do;
		call forum_$close_forum (forum_no, (0));
		call ssu_$destroy_invocation (ssu_ptr);
	     end;
	end;

	if ^subsystem_entry then do;
	     call ssu_$arg_ptr (ssu_ptr, 1, argp, argl);

	     call forum_requests_$find_forum (argument, forum_directory, full_forum_name, name_len, code);
	     if code ^= 0 then call ssu_$abort_line (ssu_ptr, code, "^a", argument);
	     forum_name = substr (full_forum_name, 1, name_len);

	     if public_switch then arg_idx = 2;
	     else arg_idx = 3;
	end;

	do arg_idx = arg_idx to nargs;
	     call ssu_$arg_ptr (ssu_ptr, arg_idx, argp, argl);

	     if add_switch & (argument = "-read_only" | argument = "-ro") then read_only = "1"b;
	     else if add_switch & (argument = "-chairman" | argument = "-cm") then chairman = "1"b;
	     else call ssu_$abort_line (ssu_ptr, error_table_$badopt, "^a", argument);
	end;

	if chairman & read_only then
	     call ssu_$abort_line (ssu_ptr, error_table_$inconsistent, """-chairman"" and ""-read_only""");

	if subsystem_entry then do;
	     forum_no = passport.forum_idx;
	     forum_directory = passport.forum_dir;
	     full_forum_name = passport.forum_name;
	     forum_name = no_suffix_name;
	     if forum_no = 0 then
		call ssu_$abort_line (ssu_ptr, forum_et_$no_forum);
	end;
	else do;
	     call forum_$open_forum (forum_directory, full_forum_name, forum_no, code);
	     if code ^= 0 then
		call ssu_$abort_line (ssu_ptr, code, "Unable to open the ^a meeting.", forum_name);
	end;

	v2 = (forum_no < 0);
	if ^v2 & chairman then
	     call ssu_$abort_line (ssu_ptr, 0, "The -chairman control argument may not be used with version 1 meetings.");	

	acl.modes = RW_ACCESS;
	if ^add_switch then acl.xmodes = N_ACCESS;
	else if chairman then acl.xmodes = RWC_XACL;
	else if read_only then acl.xmodes = R_XACL;
	else acl.xmodes = RW_XACL;
	acl.code = 0;

	if public_switch then do;
	     if v2 then do;
		acl.access_name = "*.*.*";
		call forum_$set_forum_acl (forum_directory, full_forum_name, addr (acl), 1, code);
	     end;
	     else call forum_$set_v1_forum_acl (forum_no, "*", "1"b, add_switch, ^read_only, code);
	     if code ^= 0 then
		call ssu_$abort_line (ssu_ptr, code, "Unable to make ^a meeting ^[public^;private^].", forum_name, add_switch);
	end;

	else do;
	     if subsystem_entry then arg_idx = 1;
	     else arg_idx = 2;
	     call ssu_$arg_ptr (ssu_ptr, arg_idx, argp, argl);

	     if index (argument, "*") > 0 | index (argument, ".") > 0 then
		call ssu_$abort_line (ssu_ptr, 0, "^[Person^;Project^]_ids may not contain ""."" or ""*"".", person_switch);
	     person_id = argument;

	     if v2 then do;
		if person_switch then acl.access_name = argument || ".*.*";
		else acl.access_name = "*." || argument || ".*";
		call forum_$set_forum_acl (forum_directory, full_forum_name, addr (acl), 1, code);
	     end;
	     else call forum_$set_v1_forum_acl (forum_no, person_id, person_switch, add_switch, ^read_only, code);

	     if code ^= 0 then
		call ssu_$abort_line (ssu_ptr, code, "Unable to ^[add ^a to^;remove ^a from^] ^a meeting.", add_switch,
		     person_id, forum_name);

	     if ^add_switch then do;
		call forum_$set_switch_idx (forum_no, person_id, "participating", "0"b, code);
		if code ^= 0 then
		     if code ^= forum_et_$no_such_user then
			call ssu_$abort_line (ssu_ptr, code, "Unable to turn off participating switch for ^a.", person_id);
			else code = 0;
	     end;
	end;
	if ^subsystem_entry then call forum_$close_forum (forum_no, (0));

	if public_switch then
	     call ioa_ ("The ^a meeting is ^[now^;no longer^] public^[ly readable^].", forum_name, (add_switch), (read_only));
	else call ioa_ ("^[^a^;The ^a project^] ^[may now read^s^;has been ^[added to^;removed from^]^] the ^a meeting.",
	     person_switch, person_id, (read_only), (add_switch), forum_name);

	return;

PUNT:	if ssu_ptr ^= null () & ^subsystem_entry then call ssu_$destroy_invocation (ssu_ptr);

	if ^subsystem_entry & forum_no ^= 0 then call forum_$close_forum (forum_no, 0);
	return;
%page;
forum_add_project: fapj:				/* Entry to add project to existing forum */
     entry ();

	whoami = "forum_add_project";
	call create_subsystem ();
	if nargs < 2 then
	     call ssu_$abort_line (ssu_ptr, 0, "Usage: fapj meeting_name project_id {-control_arg}");

	person_switch = "0"b;
	add_switch = "1"b;
	goto common;

forum_add_participant$add_project:
     entry (P_ssu_ptr, P_passport_info_ptr);

	whoami = "add_project";
	call setup_request ();
	if nargs < 1 then
	     call ssu_$abort_line (ssu_ptr, 0, "Usage: apj project_id {-control_arg}");
	person_switch = "0"b;
	add_switch = "1"b;
	goto common;
%page;
forum_remove_project: frpj:				/* Entry to remove project to existing forum */
     entry ();

	whoami = "forum_remove_project";
	call create_subsystem ();
	if nargs ^= 2 then
	     call ssu_$abort_line (ssu_ptr, 0, "Usage: frpj meeting_name project_id.");
	person_switch, add_switch = "0"b;
	goto common;

forum_add_participant$remove_project:
     entry (P_ssu_ptr, P_passport_info_ptr);

	whoami = "remove_project";
	call setup_request ();
	if nargs ^= 1 then
	     call ssu_$abort_line (ssu_ptr, 0, "Usage: rpj project_id");
	person_switch, add_switch = "0"b;
	goto common;
%page;
forum_remove_participant: frpt:				/* Entry to remove participant to existing forum */
     entry ();

	whoami = "forum_remove_participant";
	call create_subsystem ();
	if nargs ^= 2 then
	     call ssu_$abort_line (ssu_ptr, 0, "Usage: frpt meeting_name person_id");
	person_switch = "1"b;
	add_switch = "0"b;

	goto common;

forum_add_participant$remove_participant:
     entry (P_ssu_ptr, P_passport_info_ptr);

	whoami = "remove_participant";
	call setup_request ();
	if nargs ^= 1 then
	     call ssu_$abort_line (ssu_ptr, 0, "Usage: rpt person_id");
	person_switch = "1"b;
	add_switch = "0"b;
	goto common;
%page;						
forum_make_public: fmp:				/* Entry to make public an existing forum */
     entry ();

	whoami = "forum_make_public";
	call create_subsystem ();
	if nargs < 1 then
	     call ssu_$abort_line (ssu_ptr, 0, "Usage: fmp meeting_name {-control_arg}");

	add_switch, public_switch = "1"b;
	goto common;

forum_add_participant$make_public:
     entry (P_ssu_ptr, P_passport_info_ptr);

	whoami = "make_public";
	call setup_request ();
	arg_idx = 1;
	public_switch, add_switch = "1"b;
	goto common;
%page;
forum_unmake_public: fump:				/* Entry to unmake public an existing forum */
     entry ();

	whoami = "forum_unmake_public";
	call create_subsystem ();
	if nargs ^= 1 then
	     call ssu_$abort_line (ssu_ptr, 0, "Usage: fump meeting_name");

	add_switch = "0"b;
	public_switch = "1"b;
	goto common;

forum_add_participant$unmake_public:
     entry (P_ssu_ptr, P_passport_info_ptr);

	whoami = "unmake_public";
	call setup_request ();
	if nargs ^= 0 then
	     call ssu_$abort_line (ssu_ptr, 0, "Usage: ump");
	public_switch = "1"b;
	add_switch = "0"b;
	goto common;
%page;
forum_delete: fdl:
     entry ();

	whoami = "forum_delete";
	call cu_$arg_count (nargs);
	if nargs ^= 1 then do;
	     call com_err_$suppress_name (0, whoami, "Usage: fdl meeting_name.");
	     return;
	end;

	call cu_$arg_ptr (1, argp, argl, (0));

	call forum_requests_$find_forum (argument, forum_directory, forum_name, name_len, code);
	if code ^= 0 then do;
	     call com_err_ (code, whoami, "^a", argument);
	     return;
	end;

	call forum_$delete_forum (forum_directory, forum_name, code);
	if code ^= 0 then do;
	     call com_err_ (code, whoami, "Unable to delete the ^a meeting.", substr (forum_name, 1, name_len));
	     return;
	end;
	return;
%page;
setup_request:
   procedure ();

	subsystem_entry = "1"b;
	passport_info_ptr = P_passport_info_ptr;
	ssu_ptr = P_ssu_ptr;

	forum_name = no_suffix_name;
	call ssu_$arg_count (ssu_ptr, nargs);
	arg_idx = 2;

	return;
     end setup_request;


create_subsystem:
     procedure ();

declare	active_function		bit (1) aligned;

	call ssu_$standalone_invocation (ssu_ptr, whoami, "1", cu_$arg_list_ptr (), punt, code);
	if code ^= 0 then do; 	/* UGH */
	     if cu_$af_return_arg ((0), null (), (0)) = 0 then
		call active_fnc_err_ (code, whoami, "Unable to create subsystem invocation.");
	     else call com_err_ (code, whoami, "Unable to create subsystem invocation.");
	     goto PUNT;
	end;

	subsystem_entry = "0"b;
	call ssu_$return_arg (ssu_ptr, nargs, active_function, null (), (0));
	if active_function then
	     call ssu_$abort_line (ssu_ptr, error_table_$not_act_fnc);

	return;
     end create_subsystem;

punt:	proc ();

	go to PUNT;

     end punt;

end forum_add_participant;
