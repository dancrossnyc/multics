/****^  **************************************************************
        *                                                            *
        * Copyright, (C) BULL HN Information Systems Inc., 1990      *
        *                                                            *
        * Copyright, (C) Massachusetts Institute of Technology, 1983 *
        *                                                            *
        ************************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-07-29,Pattin), approve(86-07-29,MCR7354),
     audit(86-08-03,Margolin), install(86-08-16,MR12.0-1128):
     Renamed -subject to -new_subject to avoid conflict with trans_spec
     ctl_arg.  Removed dont_compress_sw from filling.
  2) change(91-09-05,Huen), approve(91-09-05,MCR8249),
     audit(92-01-08,Zimmerman), install(92-04-27,MR12.5-1014):
     phx20946: Generate correct info for mailed unproc trans header.
                                                   END HISTORY COMMENTS */


forum_mailer_$mail:
     proc (P_ssu_ptr, P_passport_info_ptr);

/* This module contains the Forum request to mail transactions.

   Jay Pattin 6/24/83 */

	declare (P_ssu_ptr,
	        P_passport_info_ptr)	 ptr parameter;

	declare acknowledge		 bit (1) aligned,
	        address_ptr		 ptr,
	        arg_count		 fixed bin,
	        arg_idx		 fixed bin,
	        arg_ptr		 ptr,
	        arg_len		 fixed bin (21),
	        arg		 char (arg_len) based (arg_ptr),
	        brief		 bit (1) aligned,
	        code		 fixed bin (35),
	        fill		 bit (1) aligned,
	        forum_idx		 fixed bin,
	        header		 char (256),
	        header_len		 fixed bin (21),
	        idx		 fixed bin,
	        line_len		 fixed bin,
	        local_bcc		 ptr,
	        local_cc		 ptr,
	        local_reply_to	 ptr,
	        local_to		 ptr,
	        name		 char (32) varying,
	        ssu_ptr		 ptr,
	        subject		 char (256),
	        trans_pic		 pic "zz9999",
	        trans_time		 fixed bin (71),
	        user		 char (32) varying;

	declare 1 fdoc		 aligned like format_document_options,
	        1 (aufp, dufp, tufp)	 aligned like message_user_field_parameter,
	        1 mbsp		 aligned like message_body_section_parameter,
	        1 do		 aligned like deliver_options,
	        1 pca		 aligned like parse_ca_options,
	        1 ri		 aligned,
		2 header		 like recipients_info.header,
		2 lists		 (3) like recipients_info.lists;

	declare (addr, index, ltrim, null, rtrim, string, substr)
				 builtin,
	        cleanup		 condition;

	declare (error_table_$bad_conversion,
	        error_table_$badopt,
	        error_table_$noarg,
	        error_table_$recoverable_error)
				 fixed bin (35) external;

	declare cv_dec_check_	 entry (char (*), fixed bin (35)) returns (fixed bin (35)),
	        format_document_$string entry (char (*), char (*), fixed bin (21), ptr, fixed bin (35)),
	        forum_trans_specs_$parse_specs
				 entry (ptr, fixed bin, bit (36) aligned, entry, fixed bin, char (*),
				 char (*), ptr),
	        forum_trans_util_$read_trans entry (ptr, fixed bin, fixed bin, ptr, fixed bin (35)),
	        ioa_$rsnnl		 entry options (variable),
	        mail_system_$add_address entry (ptr, ptr, char (8), fixed bin (35)),
	        mail_system_$add_user_field entry (ptr, ptr, fixed bin, bit (1) aligned, fixed bin (35)),
	        mail_system_$create_message entry (char (8), ptr, fixed bin (35)),
	        mail_system_$create_user_mailbox_address
				 entry (char (*) varying, char (*) varying, char (*) varying, ptr,
				 fixed bin (35)),
	        mail_system_$deliver_message entry (ptr, ptr, ptr, fixed bin (35)),
	        mail_system_$free_address_list
				 entry (ptr, fixed bin (35)),
	        mail_system_$free_message entry (ptr, fixed bin (35)),
	        mail_system_$get_user_field_id
				 entry (char (*) varying, bit (36) aligned, char (*) varying, fixed bin (35)),
	        mail_system_$replace_bcc entry (ptr, ptr, fixed bin (35)),
	        mail_system_$replace_body entry (ptr, ptr, fixed bin (35)),
	        mail_system_$replace_cc entry (ptr, ptr, fixed bin (35)),
	        mail_system_$replace_reply_to entry (ptr, ptr, fixed bin (35)),
	        mail_system_$replace_subject entry (ptr, char (*), fixed bin (35)),
	        mail_system_$replace_to entry (ptr, ptr, fixed bin (35)),
	        mail_system_$replace_user_field
				 entry (ptr, fixed bin, ptr, bit (1) aligned, fixed bin (35)),
	        mlsys_utils_$free_delivery_results
				 entry (ptr, fixed bin (35)),
	        mlsys_utils_$parse_address_list_control_args
				 entry (ptr, fixed bin, ptr, char (8), ptr, ptr, fixed bin (35)),
	        mlsys_utils_$print_delivery_results
				 entry (ptr, bit (1) aligned, ptr, fixed bin (35)),
	        pathname_		 entry (char (*), char (*)) returns (char (168)),
	        ssu_$abort_line	 entry options (variable),
	        ssu_$arg_count	 entry (ptr, fixed bin),
	        ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21));
%page;
%include forum_passport;
%page;
%include forum_trans_list;
%page;
%include forum_user_trans;
%page;
%include format_document_options;
%page;
%include mlsys_message;
%page;
%include mlsys_address_list;
%page;
%include mlsys_deliver_info;
%page;
%include mlsys_parse_ca_options;
%page;
	ssu_ptr = P_ssu_ptr;
	passport_info_ptr = P_passport_info_ptr;

	call ssu_$arg_count (ssu_ptr, arg_count);
	if arg_count = 0 then
USAGE:	     call ssu_$abort_line (ssu_ptr, 0, "Usage:  mail {trans_specs} -control_args");

	forum_idx = passport.forum_idx;
	acknowledge, brief, fill = "0"b;
	subject = "";
	line_len = 72;

	local_to, local_cc, local_bcc, local_reply_to, address_list_ptr, forum_trans_list_ptr, message_ptr = null ();
	ri.version = "";				/* prevents free_delivery_results from doing anything */
	on cleanup call cleanup_handler ();

	pca.version = PARSE_CA_OPTIONS_VERSION_1;
	pca.logbox_creation_mode = CREATE_AND_ANNOUNCE_MAILBOX;
	pca.savebox_creation_mode = QUERY_TO_CREATE_MAILBOX;
	string (pca.flags) = ""b;
	pca.validate_addresses, pca.abort_on_errors = "1"b;

	parse_flags_word = DISALLOW_MTG | DISALLOW_REV | DEFAULT_TO_UNPROC | DISALLOW_BYCHAIN | DISALLOW_CMSG;
	call forum_trans_specs_$parse_specs (passport_info_ptr, 1, parse_flags_word, args, 0, "", "",
	     forum_trans_list_ptr);

	call mail_system_$create_message (MESSAGE_VERSION_2, message_ptr, code);
	if code ^= 0 then call ssu_$abort_line (ssu_ptr, code, "Unable to create message.");

	call mail_system_$replace_to (message_ptr, local_to, code);
	if code ^= 0 then
	     call ssu_$abort_line (code, ssu_ptr, "Unable to initalize To field.");

	call mail_system_$replace_cc (message_ptr, local_cc, code);
	if code ^= 0 then
	     call ssu_$abort_line (code, ssu_ptr, "Unable to initalize cc field.");

	call mail_system_$replace_bcc (message_ptr, local_bcc, code);
	if code ^= 0 then
	     call ssu_$abort_line (code, ssu_ptr, "Unable to initalize bcc field.");

	call mail_system_$replace_reply_to (message_ptr, local_reply_to, code);
	if code ^= 0 then
	     call ssu_$abort_line (code, ssu_ptr, "Unable to initalize reply_to field.");

	aufp.version, dufp.version, tufp.version = MESSAGE_USER_FIELD_PARAMETER_VERSION_2;

	call mail_system_$get_user_field_id ("Forum-Transaction", tufp.field_id, user, code);
	if code ^= 0 then
BADID:	     call ssu_$abort_line (code, ssu_ptr, "Unable to get user field id.");
						/* phx20946: Generate correct info for mailed unproc trans header. */
	if forum_trans_list.trans_num (1) = 0 & passport_info_ptr -> unprocessed_trans_ptr ^= null () then
	     call mail_system_$get_user_field_id ("Transaction-Written-Date", dufp.field_id, user, code);
	else call mail_system_$get_user_field_id ("Transaction-Entered-Date", dufp.field_id, user, code);

	if code ^= 0 then goto BADID;

	if forum_trans_list.trans_num (1) = 0 & passport_info_ptr -> unprocessed_trans_ptr ^= null () then
	     call mail_system_$get_user_field_id ("Transaction-Written-By", aufp.field_id, user, code);
	else call mail_system_$get_user_field_id ("Transaction-Entered-By", aufp.field_id, user, code);

	if code ^= 0 then goto BADID;

	tufp.field_type = MESSAGE_TEXT_USER_FIELD;
	addr (tufp.user_field) -> message_text_user_field.text_ptr = addr (header);
	addr (tufp.user_field) -> message_text_user_field.text_lth = 0;

	dufp.field_type = MESSAGE_DATE_USER_FIELD;
	addr (dufp.field_type) -> message_date_user_field.date_time = 0;

	aufp.field_type = MESSAGE_ADDRESS_LIST_USER_FIELD;
	addr (aufp.user_field) -> message_address_list_user_field.address_list_ptr = null ();
						/* add dummies so that we can replace them for each piece of mail */
	call mail_system_$add_user_field (message_ptr, addr (tufp), 1, "0"b, code);
	if code ^= 0 then call ssu_$abort_line (ssu_ptr, code, "Unable to initialize transaction header.");

	call mail_system_$add_user_field (message_ptr, addr (aufp), 2, "0"b, code);
	if code ^= 0 then call ssu_$abort_line (ssu_ptr, code, "Unable to initialize author header.");

	call mail_system_$add_user_field (message_ptr, addr (dufp), 3, "0"b, code);
	if code ^= 0 then call ssu_$abort_line (ssu_ptr, code, "Unable to initialize date header.");

	mbsp.version = MESSAGE_BODY_SECTION_PARAMETER_VERSION_2;
	mbsp.section_type = MESSAGE_PREFORMATTED_BODY_SECTION;

	ri.area_ptr = passport.area_ptr;
	ri.expanded_recipients_result_list_ptr = null ();
	idx = 1;
	ri.lists (1).address_list_ptr = message.to;
	ri.lists (1).recipients_result_list_ptr = null ();

	if message.cc -> address_list.n_addresses > 0 then do;
		idx = idx + 1;
		ri.lists (idx).address_list_ptr = message.cc;
		ri.lists (idx).recipients_result_list_ptr = null ();
	     end;
	if message.bcc -> address_list.n_addresses > 0 then do;
		idx = idx + 1;
		ri.lists (idx).address_list_ptr = message.bcc;
		ri.lists (idx).recipients_result_list_ptr = null ();
	     end;
	ri.n_lists = idx;
	ri.version = RECIPIENTS_INFO_VERSION_2;

	do.version = DELIVER_OPTIONS_VERSION_2;
	do.delivery_mode = ORDINARY_DELIVERY;
	do.queueing_mode = ALWAYS_QUEUE_FOREIGN;
	do.queued_notification_mode = NOTIFY_ON_ERROR;

	string (do.flags) = ""b;
	do.abort, do.recipient_notification = "1"b;
	do.acknowledge = acknowledge;

	if fill then do;
		fdoc.version_number = format_document_version_2;
		fdoc.line_length = line_len;
		fdoc.indentation = 0;
		string (fdoc.switches) = ""b;
		fdoc.galley_sw, fdoc.literal_sw, fdoc.dont_break_indented_lines_sw = "1"b;
	     end;

	do idx = 1 to forum_trans_list.size;
	     call send_the_mail (forum_trans_list.trans_num (idx));
	end;

	call cleanup_handler ();
	return;
%page;
args:
     proc (P_arg_idx);

	declare P_arg_idx		 fixed bin parameter;

	arg_idx = P_arg_idx;
	call ssu_$arg_ptr (ssu_ptr, arg_idx, arg_ptr, arg_len);

	if index (arg, "-") ^= 1 then goto USAGE;
	if arg = "-acknowledge" | arg = "-ack" then acknowledge = "1"b;
	else if arg = "-no_acknowlege" | arg = "-nack" then acknowledge = "0"b;
	else if arg = "-fill" | arg = "-fi" then fill = "1"b;
	else if arg = "-no_fill" | arg = "-nfi" then fill = "0"b;
	else if arg = "-brief" | arg = "-bf" then brief = "1"b;
	else if arg = "-long" | arg = "-lg" then brief = "0"b;

	else if arg = "-new_subject" | arg = "-newsj" then do;
		arg_idx = arg_idx + 1;
		if arg_idx > arg_count then
NOARG:		     call ssu_$abort_line (ssu_ptr, error_table_$noarg, "Following ^a.", arg);
		call ssu_$arg_ptr (ssu_ptr, arg_idx, arg_ptr, arg_len);
		subject = arg;
	     end;
	else if arg = "-line_length" | arg = "-ll" then do;
		arg_idx = arg_idx + 1;
		if arg_idx > arg_count then goto NOARG;
		fill = "1"b;

		call ssu_$arg_ptr (ssu_ptr, arg_idx, arg_ptr, arg_len);
		line_len = cv_dec_check_ (arg, code);
		if code ^= 0 then call ssu_$abort_line (ssu_ptr, error_table_$bad_conversion, "^a", arg);
		if line_len < 40 then
		     call ssu_$abort_line (ssu_ptr, 0, "The line length must be at least 40.");
	     end;

	else if arg = "-to" then call collect_addresses (local_to);
	else if arg = "-bcc" then call collect_addresses (local_bcc);
	else if arg = "-cc" then call collect_addresses (local_cc);
	else if arg = "-reply_to" then call collect_addresses (local_reply_to);
	else call ssu_$abort_line (ssu_ptr, error_table_$badopt, "^a", arg);

	P_arg_idx = arg_idx;
	return;

collect_addresses:
     proc (address_list_ptr);

	declare address_list_ptr	 ptr parameter;

	arg_idx = arg_idx + 1;

	call mlsys_utils_$parse_address_list_control_args (ssu_ptr, arg_idx, addr (pca), ADDRESS_LIST_VERSION_2,
	     address_list_ptr, local_bcc, code);
	if code ^= 0 then
	     call ssu_$abort_line (ssu_ptr, code, "Parsing addresses following ^a.", arg);

	arg_idx = arg_idx - 1;
	return;
     end collect_addresses;

     end args;
%page;
send_the_mail:
     proc (trans_idx);

	declare trans_idx		 fixed bin;
	declare clock		 builtin;

	call forum_trans_util_$read_trans (passport_info_ptr, forum_idx, trans_idx, forum_user_trans_ptr, code);
	if code ^= 0 then call ssu_$abort_line (ssu_ptr, code, "Reading transaction #^d.", trans_idx);

	if trans_idx = 0 then do;			/* we have an unprocessed transaction */
		call ioa_$rsnnl ("[????] **UNPROCESSED** in the ^a meeting", header, header_len,
		     pathname_ (passport.forum_dir, no_suffix_name));
	     end;
	else do;
		trans_pic = trans_idx;
		call ioa_$rsnnl ("[^a] in the ^a meeting", header, header_len, ltrim (trans_pic),
		     pathname_ (passport.forum_dir, no_suffix_name));
	     end;

	addr (tufp.user_field) -> message_text_user_field.text_lth = header_len;
	call mail_system_$replace_user_field (message_ptr, 1, addr (tufp), "0"b, code);
	if code ^= 0 then call ssu_$abort_line (ssu_ptr, code, "Unable to set transaction header.");

	if trans_idx = 0 then do;			/* we have an unprocessed transaction */
		trans_time = clock ();		/* unproc. trans. gets current date */
	     end;
	else do;
		trans_time = forum_user_trans.time;
	     end;

	addr (dufp.user_field) -> message_date_user_field.date_time = trans_time;
	call mail_system_$replace_user_field (message_ptr, 3, addr (dufp), "0"b, code);
	if code ^= 0 then call ssu_$abort_line (ssu_ptr, code, "Unable to set date header.");

	if substr (forum_user_trans.person_id, 1, 1) = "*" then do;
		user = "anonymous";
		name = rtrim (forum_user_trans.person_id);
	     end;
	else do;
		user = forum_user_trans.person_id;
		name = "";
	     end;

	user = rtrim (user) || "." || rtrim (forum_user_trans.project_id);
	call mail_system_$create_user_mailbox_address (user, name, "", address_ptr, code);
	if code ^= 0 then call ssu_$abort_line (ssu_ptr, code, "Unable to create author header.");

	call mail_system_$add_address (address_list_ptr, address_ptr, ADDRESS_LIST_VERSION_2, code);
	if code ^= 0 then call ssu_$abort_line (ssu_ptr, code, "Unable to create address list header.");

	addr (aufp.user_field) -> message_address_list_user_field.address_list_ptr = address_list_ptr;
	call mail_system_$replace_user_field (message_ptr, 2, addr (aufp), "0"b, code);
	if code ^= 0 then call ssu_$abort_line (ssu_ptr, code, "Unable to set author header.");

	if subject = "" then
	     call mail_system_$replace_subject (message_ptr, forum_user_trans.subject, code);
	else call mail_system_$replace_subject (message_ptr, subject, code);
	if code ^= 0 then call ssu_$abort_line (ssu_ptr, code, "Unable to set mail subject.");

	begin;
	     declare text		      char (2 * forum_user_trans.text_length);

	     if ^fill then do;
		     addr (mbsp.section) -> message_preformatted_body_section.text_ptr = addr (forum_user_trans.text);
		     addr (mbsp.section) -> message_preformatted_body_section.text_lth = forum_user_trans.text_length;
		end;
	     else do;
		     call format_document_$string (forum_user_trans.text, text, header_len, addr (fdoc), code);
		     if code ^= 0 then
			if code ^= error_table_$recoverable_error then
			     call ssu_$abort_line (ssu_ptr, code, "Filling transaction.");

		     addr (mbsp.section) -> message_preformatted_body_section.text_ptr = addr (text);
		     addr (mbsp.section) -> message_preformatted_body_section.text_lth = header_len;
		end;

	     call mail_system_$replace_body (message_ptr, addr (mbsp), code);
	     if code ^= 0 then call ssu_$abort_line (ssu_ptr, code, "Unable to set message text.");
	end;					/* BEGIN block */

	call mail_system_$deliver_message (message_ptr, addr (ri), addr (do), code);
	call mlsys_utils_$print_delivery_results (ssu_ptr, brief, addr (ri), (0));
	call mlsys_utils_$free_delivery_results (addr (ri), (0));
	if code ^= 0 then call ssu_$abort_line (ssu_ptr, code, "Message not sent.");

	call mail_system_$free_address_list (address_list_ptr, code);
	if code ^= 0 then call ssu_$abort_line (ssu_ptr, code, "Unable to free Entered-By address list.");

	return;
     end send_the_mail;
%page;
cleanup_handler:
     proc ();

	if forum_trans_list_ptr ^= null () then free forum_trans_list;

	if local_to ^= null () then
	     call mail_system_$free_address_list (local_to, (0));
	if local_cc ^= null () then
	     call mail_system_$free_address_list (local_cc, (0));
	if local_bcc ^= null () then
	     call mail_system_$free_address_list (local_bcc, (0));
	if local_reply_to ^= null () then
	     call mail_system_$free_address_list (local_reply_to, (0));

	if address_list_ptr ^= null () then
	     call mail_system_$free_address_list (address_list_ptr, (0));

	if message_ptr ^= null () then
	     call mail_system_$free_message (message_ptr, (0));

	call mlsys_utils_$free_delivery_results (addr (ri), (0));

	return;
     end cleanup_handler;

     end forum_mailer_$mail;
