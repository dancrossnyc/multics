/****^  ***************************************************************
        *                                                             *
        * Copyright, (C) Massachusetts Institute of Technology, 1986  *
        *                                                             *
        * Copyright (c) 1982 by Massachusetts Institute of Technology *
        *                                                             *
        *************************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-07-29,Pattin), approve(86-07-29,MCR7354),
     audit(86-08-07,Margolin), install(86-08-16,MR12.0-1128):
     Added -no_notify, -sort last_seen.  Use date_time_$format
     Fixed -eligible for v1 meetings.
                                                   END HISTORY COMMENTS */


flsu:
forum_list_users:
     proc ();

/* forum_list_users: prints out information on participants in a CONTINUUM forum
   This is accessible both as a command/active_function and as a subsystem
   request. As an active function it returns a string of usernames
   Jay Pattin 6/21/81 updates from code by M. Auerbach
   Jay Pattin 8/21/81 for ssu_
   Jay Pattin 1/16/82 added -seen, -unseen, changes for new continuum_
   Jay Pattin 01/21/82 renamed forum_list_users, added -total
   Jay Pattin 02/16/82 added -eligible
   Jay Pattin 02/28/82 added standalone_invocation
   Jay Pattin 05/05/82 added -read_only, -no_read_only
   Jay Pattin 10/2/82 added -sort
   Jay Pattin 7/1/83 added -asc, -dsc, -after, -before, -names_only, -part, -npart,  */

declare	(P_ssu_ptr, P_passport_info_ptr)
				ptr parameter;

declare	(all_switch, person_switch, project_switch, attending_switch, temp_forum, brief_switch, active_function, command,
	no_notify, notify_switch, header_switch, total_switch, unseen_switch, eligible_switch, read_only, no_read_only, 
	forum_opened, ascending, descending, names_only, part, no_part)
				bit (1) aligned init ("0"b);

declare	me			char (32),
	(after_time, before_time)	fixed bin (71),
	forum_dir			char (168),
	trans_time		char (250) varying,
	trans_pic			pic "zz9999",
	attendee_name		char (256) varying,
	project_name		char (256) varying,
	forum_name		char (32),
	full_forum_name		char (32),
	name_len			fixed bin,
	temp_idx			fixed bin,
	code			fixed bin (35);

declare	(acl_count, seen_idx, no_selected, messlen, i, forum_idx, argument_idx, arg_count, arg_len, ret_len, count,
				sort, delete_type)
				fixed bin;
declare	(acl_ptr, based_area_ptr, arg_ptr, ret_ptr, ssu_ptr)
				ptr;

declare	argument			char (arg_len) based (arg_ptr),
	ret_arg			char (ret_len) varying based (ret_ptr);

declare	(addr, after, before, char, index, length, ltrim, maxlength, mod, null, rtrim, substr, unspec)
				builtin,
	cleanup			condition;

declare	1 acl			(acl_count) aligned based (acl_ptr),
	2 access_name		char (32),
	2 modes			bit (36),
	2 xmodes			bit (36),
	2 status_code		fixed bin (35);

declare	(SORT_BY_NAME		init (1),
	SORT_BY_TIME		init (2),
	SORT_BY_SEEN		init (3),
	ONLY_NONDELETED		init (0),
	INCLUDE_DELETED		init (1),
	ONLY_DELETED		init (2))
				fixed bin static options (constant);

declare	(error_table_$badopt,
	error_table_$bad_conversion,
	error_table_$inconsistent,
	error_table_$noarg,
	forum_et_$no_forum,
	forum_et_$old_format)	fixed bin (35) external;

declare	(ioa_, ioa_$nnl, ioa_$rsnnl)	entry options (variable),
	(com_err_, active_fnc_err_)	entry options (variable),
	com_err_$suppress_name	entry options (variable),
	active_fnc_err_$af_suppress_name
				entry options (variable),
	convert_date_to_binary_	entry (char (*), fixed bin (71), fixed bin (35)),
	date_time_$format		entry (char (*), fixed bin (71 ), char (*), char (*)) returns (char(250) varying),
	get_system_free_area_	entry returns (ptr),
	forum_requests_$find_forum	entry (char (*), char (*), char (*), fixed bin, fixed bin (35)),
	forum_trans_specs_$parse_specs
				entry (ptr, fixed bin, bit (36) aligned, entry, fixed bin, char (*), char (*), ptr),
	forum_trans_util_$clear_cache entry (ptr),
	forum_$close_forum		entry (fixed bin, fixed bin (35)),
	forum_$get_transaction_map_idx
				entry (fixed bin, char (*), bit (*) aligned, fixed bin (35)),
	forum_$list_forum_acl	entry (char (*), char (*), ptr, ptr, ptr, fixed bin, fixed bin (35)),
	forum_$list_v1_forum_acl	entry (char (*), char (*), ptr, ptr, fixed bin, fixed bin (35)),
	forum_$list_users		entry (char (*), char (*), ptr, ptr, fixed bin (35)),
	forum_$open_forum		entry (char (*), char (*), fixed bin, fixed bin (35)),
	cu_$arg_list_ptr		entry returns (ptr),
	cu_$af_return_arg		entry (fixed bin, ptr, fixed bin) returns (fixed bin (35)),
	sort_items_$char		entry (ptr, fixed bin (24)),
	sort_items_indirect_$char	entry (ptr, ptr, fixed bin),
	sort_items_indirect_$fixed_bin
				entry (ptr, ptr),
     	sort_items_indirect_$general	entry (ptr, ptr, entry),
	ssu_$abort_line		entry options (variable),
	ssu_$standalone_invocation	entry (ptr, char (*), char (*), ptr, entry, fixed bin (35)),
	ssu_$return_arg		entry (ptr, fixed bin, bit (1) aligned, ptr, fixed bin),
	ssu_$arg_ptr		entry (ptr, fixed bin, ptr, fixed bin),
	ssu_$print_message		entry options (variable),
	ssu_$destroy_invocation	entry (ptr);
%page;
%include forum_user_list;
%page;
%include forum_passport;
%page;
%include forum_trans_list;
%page;
%include access_mode_values;
%page;
	command = "1"b;
	forum_idx = 0;
	me = "forum_list_users";

	call ssu_$standalone_invocation (ssu_ptr, me, "1", cu_$arg_list_ptr (), punt, code);
	if code ^= 0 then do;	/* UGH */
	     if cu_$af_return_arg ((0), null (), (0)) = 0 then
		call active_fnc_err_ (code, me, "Unable to create subsystem invocation.");
	     else call com_err_ (code, me, "Unable to create subsystem invocation.");
	     return;
	end;
	passport_info_ptr = null ();
	goto common;


list_users_request:					/* Entry for use as a forum request */
     entry (P_ssu_ptr, P_passport_info_ptr);

	ssu_ptr = P_ssu_ptr;
	passport_info_ptr = P_passport_info_ptr;

	me = "list_users";
	forum_idx = passport.forum_idx;
	forum_dir = passport.forum_dir;
	forum_name = no_suffix_name;
	full_forum_name = passport.forum_name;

common:
	header_switch = "1"b;
	forum_trans_list_ptr, user_list_ptr = null ();
	based_area_ptr = get_system_free_area_ ();
	on cleanup call cleanup_handler;
	seen_idx, temp_idx = 0;

	call ssu_$return_arg (ssu_ptr, arg_count, active_function, ret_ptr, ret_len);
	if active_function then ret_arg = "";

	if command & arg_count = 0 then go to USAGE;

	argument_idx = 0;
	if arg_count > 0 then do;
	     call get_arg ();
	     if substr (argument, 1, 1) ^= "-" then call get_forum (argument);
	     else argument_idx = 0;
	end;

	sort = SORT_BY_NAME;
	delete_type = ONLY_NONDELETED;
	attendee_name, project_name = "";
	count, after_time, before_time = 0;

	do while (argument_idx < arg_count);
	     call get_arg ();
	     if index (argument, "-") = 1 then do;
		if argument = "-user" then argument_idx = collect_ids (attendee_name, "1"b);
		else if argument = "-after" | argument = "-af" then call get_date (after_time);
		else if argument = "-before" | argument = "-be" then call get_date (before_time);
		else if argument = "-at" | argument = "-attending" then attending_switch = "1"b;
		else if argument = "-all" | argument = "-a" then all_switch = "1"b;
		else if argument = "-brief" | argument = "-bf" then brief_switch = "1"b;
		else if argument = "-long" | argument = "-lg" then brief_switch = "0"b;
		else if argument = "-include_deleted" | argument = "-idl" then delete_type = INCLUDE_DELETED;
		else if argument = "-only_deleted" | argument = "-odl" then delete_type = ONLY_DELETED;
		else if argument = "-only_non_deleted" | argument = "-ondl" then delete_type = ONLY_NONDELETED;
		else if argument = "-meeting" | argument = "-mtg" then do;
		     if temp_forum then
			call ssu_$abort_line (ssu_ptr, error_table_$inconsistent, "Only one meeting name may be specified.");
		     call get_arg ();
		     call get_forum (argument);
		end;
		else if argument = "-participating" | argument = "-part" then part = "1"b;
		else if argument = "-no_participating" | argument = "-npart" then no_part = "1"b;
		else if argument = "-project" | argument = "-pj" then argument_idx = collect_ids (project_name, "0"b);
		else if argument = "-read_only" | argument = "-ro" then read_only = "1"b;
		else if argument = "-no_read_only" | argument = "-nro" then no_read_only = "1"b;
		else if argument = "-seen" then argument_idx, seen_idx = argument_idx + 1;
		else if argument = "-unseen" then do;
		     argument_idx, seen_idx = argument_idx + 1;
		     unseen_switch = "1"b;
		end;
		else if argument = "-notify" | argument = "-nt" then notify_switch = "1"b;
		else if argument = "-no_notify" | argument = "-nnt" then no_notify = "1"b;
		else if active_function then goto BADOPT;
		else if argument = "-ascending" | argument = "-asc" then do;
		     ascending = "1"b;
		     descending = "0"b;
		end;
		else if argument = "-descending" | argument = "-dsc" then do;
		     ascending = "0"b;
		     descending = "1"b;
		end;
		else if argument = "-eligible" | argument = "-elig" then eligible_switch = "1"b;
		else if argument = "-header" | argument = "-he" then header_switch = "1"b;
		else if argument = "-no_header" | argument = "-nhe" then header_switch = "0"b;
		else if argument = "-names_only" then names_only = "1"b;
		else if argument = "-sort" then do;
		     call get_arg ();
		     if argument = "name" then sort = SORT_BY_NAME;
		     else if argument = "date_time_attended" | argument = "dta" then sort = SORT_BY_TIME;
		     else if argument = "last_seen" | argument = "ls" then sort = SORT_BY_SEEN;
		     else call ssu_$abort_line (ssu_ptr, 0, "Unknown sort type: ""^a"".", argument);
		end;
		else if argument = "-total" | argument = "-tt" then total_switch = "1"b;
		else
BADOPT:		     call ssu_$abort_line (ssu_ptr, error_table_$badopt, "^a", argument);
	     end;
	     else if temp_forum then
		call ssu_$abort_line (ssu_ptr, error_table_$inconsistent, "Only one meeting may be specified. ^a", argument);
	     else call get_forum (argument);
	end;

	if forum_idx = 0 & ^temp_forum then 
	     if command then call ssu_$abort_line (ssu_ptr, error_table_$noarg, "No meeting_name was given.");
	     else call ssu_$abort_line (ssu_ptr, forum_et_$no_forum);

	if read_only & no_read_only then
	     call ssu_$abort_line (ssu_ptr, error_table_$inconsistent, "-read_only and -no_read_only");

	if notify_switch & no_notify then
	     call ssu_$abort_line (ssu_ptr, error_table_$inconsistent, "-notify and -no_notify");

	if part & no_part then
	     call ssu_$abort_line (ssu_ptr, error_table_$inconsistent, "-participating and -no_participating");

	if after_time ^= 0 & before_time ^= 0 then
	     call ssu_$abort_line (ssu_ptr, error_table_$inconsistent, "-before and -after");

	if person_switch & (all_switch | count > 0 | notify_switch | no_notify | total_switch | attending_switch | read_only |
	     no_read_only | after_time > 0 | before_time > 0 | part | no_part) then
	     call ssu_$abort_line (ssu_ptr, error_table_$inconsistent, "The -all, -after, -attending, -before, -notify, -no_notify, -no_participating, -no_read_only, -participating, -read_only, -seen, -total, and -unseen arguments may not be used with -user.");

	if seen_idx > 0 then call get_count (ssu_ptr, forum_dir, full_forum_name);

	if eligible_switch then do;
	     if attending_switch | notify_switch | no_notify | all_switch | count > 0 | person_switch | project_switch |
		total_switch | read_only | no_read_only | ascending | descending | after_time > 0 |
		before_time > 0 | part | no_part then
		call ssu_$abort_line (ssu_ptr, error_table_$inconsistent,
		     "No other control arguments may be used with -eligible.");

	     call list_the_acl ();
	end;

	else do;
	     attendee_name = attendee_name || ".";
	     project_name = project_name || ".";

	     call forum_$list_users (forum_dir, full_forum_name, based_area_ptr, user_list_ptr, code);
	     if code ^= 0 then call ssu_$abort_line (ssu_ptr, code, "Getting user list.");

	     if ^part & ^no_part & delete_type = ONLY_NONDELETED then part = "1"b;
	     if ^ascending & ^descending then ascending = (sort = SORT_BY_NAME);
	     call name_list_ ();
	end;
EXIT:
	call cleanup_handler ();
	return;

USAGE:
	if active_function then
	     call active_fnc_err_$af_suppress_name (0, me, "Usage: [flsu meeting_name {-control_args}]");
	else call com_err_$suppress_name (0, me, "Usage: flsu meeting_name {-control_args}");
	return;
%page;
get_arg:
     proc ();

	argument_idx = argument_idx + 1;
	if argument_idx > arg_count then
	     call ssu_$abort_line (ssu_ptr, error_table_$noarg, "Following ^a.", argument);
	call ssu_$arg_ptr (ssu_ptr, argument_idx, arg_ptr, arg_len);

	return;
     end get_arg;

get_count:
     proc (sci_ptr, dir, name);			/* avoid #@&%$ name conflicts */

declare	sci_ptr			ptr,
	(dir, name)		char (*),
	1 pp			aligned like passport;

	call forum_$open_forum (dir, name, temp_idx, code);
	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Opening meeting.");
	forum_opened = "1"b;

	unspec (pp) = ""b;
	pp.ssu_ptr = sci_ptr;
	pp.forum_idx = temp_idx;
	if passport_info_ptr = null () then pp.current_trans = 0;
	else pp.current_trans = passport.current_trans;
	pp.area_ptr = based_area_ptr;
	pp.unprocessed_trans_ptr, pp.first_trans_ptr, pp.last_trans_ptr = null ();

     	parse_flags_word = NON_NULL | ONLY_ONE | ALLOW_DELETED | DISALLOW_UNPROC | DISALLOW_MTG | DISALLOW_REV |
	     DISALLOW_IDL | DISALLOW_INITIAL | DISALLOW_CMSG | DISALLOW_BYCHAIN;

	call forum_trans_specs_$parse_specs (addr (pp), seen_idx, parse_flags_word, dummy, (0), (""), (""),
	     forum_trans_list_ptr);
	count = forum_trans_list.trans_num (1);

	call forum_trans_util_$clear_cache (addr (pp));	/* in case any got read out */
	return;

dummy:	proc (P_arg_idx);

declare	P_arg_idx		fixed bin;

	P_arg_idx = arg_count + 1;			/* we're done now */

	return;
     end dummy;

     end get_count;
%page;
get_forum:
     proc (forum);

	declare forum		 char (*);

	call forum_requests_$find_forum (forum, forum_dir, full_forum_name, name_len, code);
	if code ^= 0 then
	     call ssu_$abort_line (ssu_ptr, code,  "Finding the ""^a"" meeting.", forum);
	forum_name = substr (full_forum_name, 1, name_len);
	temp_forum = "1"b;
	return;
     end get_forum;


get_date:
     proc (time);

declare	time			fixed bin (71);

	call get_arg ();
	call convert_date_to_binary_ (argument, time, code);
	if code ^= 0 then call ssu_$abort_line (ssu_ptr, code, "^a", argument);

	return;
     end get_date;


collect_ids:
     procedure (id_string, person) returns (fixed bin);

declare	(person, found)		bit (1) aligned,
	id_string			char (*) varying;

	if argument_idx >= arg_count then
NOARG:	     call ssu_$abort_line (ssu_ptr, error_table_$noarg, "Following ^a.", argument);

	found = "0"b;
	if person then person_switch = "1"b;
	else project_switch = "1"b;

	do while (argument_idx < arg_count);
	     call get_arg ();
	     if char (argument, 1) = "-" then do;
		if ^found then goto NOARG;
		return (argument_idx - 1);
	     end;
	     found = "1"b;
	     if length (id_string) + arg_len > maxlength (id_string) then
		call ssu_$abort_line (ssu_ptr, 0, "Too many names.");
	     if index (argument, ".") > 0 | index (argument, "*") > 0 then
		call ssu_$abort_line (ssu_ptr, 0, "Invalid ^[user^;project^] name ""^a"".", person, argument);
	     id_string = id_string || "." || argument;
	end;
	return (argument_idx);
     end collect_ids;
%page;
list_the_acl:
     procedure ();

	acl_ptr = null ();
	on cleanup begin;
	     if acl_ptr ^= null then free acl;
	end;

	call forum_$list_forum_acl (forum_dir, full_forum_name, based_area_ptr, acl_ptr,
	     null (), acl_count, code);
	if code ^= 0 then
	     if code = forum_et_$old_format then do;
		call list_v1_acl ();
		return;
	     end;
	     else call ssu_$abort_line (ssu_ptr, code, "Listing acl for the ""^a"" meeting.", forum_name);

	if header_switch then call print_name_header ();

	do i = 1 to acl_count;
	     call ioa_ ("^[r^]^[w^]^[c^]^[null^]^-^a", substr (acl.xmodes (i), 1, 1), substr (acl.xmodes (i), 2, 1),
		substr (acl.xmodes (i), 3, 1), acl.xmodes (i) = ""b, acl.access_name (i));
	end;
	free acl;

	return;
     end list_the_acl;
%page;
list_v1_acl:
     procedure ();

declare	public			bit (1) aligned,
	public_ro			bit (1) aligned,
	one_acl_ptr		ptr,
	1 one_acl			aligned based (one_acl_ptr),
	2 access_name		char (32),
	2 modes			bit (36),
	2 xmodes			bit (36),
	2 status_code		fixed bin (35);

	call forum_$list_v1_forum_acl (forum_dir, rtrim (forum_name) || ".control", based_area_ptr, acl_ptr, acl_count, code);
	if code ^= 0 then
	     call ssu_$abort_line (ssu_ptr, code, "Listing acl for the ""^a"" meeting.", forum_name);

	if header_switch then call print_name_header ();

	if acl (acl_count).access_name = "*.*.*" then do;
	     public = (acl (acl_count).modes ^= "0"b);
	     public_ro = (acl (acl_count).modes = "100"b);
	     acl_count = acl_count - 1;		/* avoid printing '*' as a project */
	end;
	else public, public_ro = "0"b;

	begin;
declare	1 v			aligned,
	2 n			fixed bin,
	2 vector			(acl_count) pointer unaligned;

	     v.n = acl_count;
	     do i = 1 to acl_count;
		v.vector (i) = addr (acl (i).access_name);
	     end;
	     call sort_items_$char (addr (v), 44);

	     call ioa_  ("The meeting is ^[not ^s^;^[read-only ^]^]public.", ^public, public_ro);

	     if acl_count > 0 then do;
		if public then do;
		     if public_ro then call list_it (RW_ACCESS, "0"b, "0"b);
		     else call list_it (R_ACCESS, "0"b, "1"b);
		     call list_it (N_ACCESS, "0"b, "1"b);
		end;
		else call list_it (R_ACCESS, "1"b, "0"b);
	     end;
	     free acl;
	     return;
%page;
list_it:						/* Still inside BEGIN block */
     procedure (match_acl, at_least, not_switch);

declare	(at_least, not_switch, done)	bit (1) aligned,
	match_acl			bit (3);

     	done, header_switch = "0"b;
	count = 0;
	do i = 1 to acl_count while (^done);
	     one_acl_ptr = v.vector (i);
	     if substr (one_acl.access_name, 1, 2) ^= "*." then done = "1"b;
	     else if one_acl.access_name ^= "*.SysDaemon.*" then do;
		if (one_acl.modes = match_acl) | (at_least & one_acl.modes > match_acl) then do;
		     if ^header_switch then do;
			call ioa_ ("^/The following projects are ^[not ^]eligible to ^[write^;participate^]:",
			     not_switch, ^at_least & (match_acl ^= N_ACCESS));
			header_switch = "1"b;
		     end;
		     if mod (count, 4) = 0 then call ioa_ ();
		     count = count + 1;
		     call ioa_$nnl ("^[*^; ^]^15a", (at_least & ^(substr (one_acl.modes, 3, 1))), before (after (one_acl.access_name, "."), "."));
		end;
	     end;
	end;

	if header_switch then call ioa_ ();
	header_switch = "0"b;
	count = 0;
	do i = i - 1 to acl_count;
	     one_acl_ptr = v.vector (i);
	     if (one_acl.modes = match_acl) | (at_least & one_acl.modes > match_acl) then do;
		if ^header_switch then do;
		     call ioa_ ("^/The following users are ^[not ^]eligible to ^[write^;participate^]:",
			not_switch, ^at_least & (match_acl ^= N_ACCESS));
		     header_switch = "1"b;
		end;
		if mod (count, 4) = 0 then call ioa_ ();
		count = count + 1;
		call ioa_$nnl ("^[*^; ^]^15a",
		     (at_least & ((one_acl.modes & W_ACCESS) = "000"b)),
		     before (one_acl.access_name, "."));
	     end;
	end;

	if header_switch then call ioa_ ();
	return;
     end list_it;

	end;					/* BEGIN block */
     end list_v1_acl;
%page;
name_list_:
     proc ();

declare	name_array		(user_list.no_attendees) char (78),
	bit_map			bit (user_list.transaction_count) aligned,
	1 v			aligned,
	2 n			fixed bin,
	2 vector			(user_list.no_attendees) ptr unaligned,
	1 idxs			aligned,
	2 n			fixed bin,
	2 vector			(user_list.no_attendees) fixed bin (18);

	no_selected = 0;
	do i = 1 to user_list.no_attendees;

	     if all_switch then goto accept_name;

	     if person_switch then
		if index (attendee_name, "." || rtrim (user_list.attendees (i).person_id) || ".") ^= 0 then
		     goto accept_name;
		else goto reject_name;

	     if project_switch then
		if index (project_name, "." || rtrim (user_list.attendees (i).project_id) || ".") ^= 0 then
		     goto accept_name;
		else goto reject_name;

	     if part & user_list.attendees (i).removed then goto reject_name;
	     if no_part & ^user_list.attendees (i).removed then goto reject_name;
	     if user_list.attendees (i).deleted & delete_type = ONLY_NONDELETED then goto reject_name;
	     if ^user_list.attendees (i).deleted & delete_type = ONLY_DELETED then goto reject_name;

	     if attending_switch & ^user_list.attendees (i).attending then goto reject_name;

	     if notify_switch & ^user_list.attendees (i).notify then goto reject_name;
	     if no_notify & user_list.attendees (i).notify then goto reject_name;
	     if read_only & ^user_list.attendees (i).read_only then goto reject_name;
	     if no_read_only & user_list.attendees (i).read_only then goto reject_name;

	     if before_time ^= 0 & user_list.attendees (i).last_time_attended > before_time then goto reject_name;

	     if user_list.attendees (i).last_time_attended < after_time then goto reject_name;

accept_name:
	     if count > 0 then do;
		call forum_$get_transaction_map_idx (temp_idx, user_list.attendees (i).person_id, bit_map, code);
		if code ^= 0 then
		     if code = forum_et_$old_format then do;
			if unseen_switch then
			     if user_list.attendees (i).highest_trans_seen >= count then goto reject_name;
			     else;
			else if user_list.attendees (i).highest_trans_seen < count then goto reject_name;
		     end;
		     else call ssu_$abort_line (ssu_ptr, code, "Getting transaction map.");
		else if unseen_switch then
		     if substr (bit_map, count, 1) then goto reject_name;
		     else;
		else if ^substr (bit_map, count, 1) then goto reject_name;
	     end;

	     no_selected = no_selected + 1;
	     if active_function then
		ret_arg = ret_arg || user_list.attendees (i).person_id;
	     else if ^total_switch then do;
		if ^names_only then
		     if user_list.attendees (i).attending then trans_time = "NOW ATTENDING";
		     else if user_list.attendees (i).last_time_attended ^= 0 then
			trans_time = date_time_$format ("date_time", user_list.attendees (i).last_time_attended,
			     "", "");
		     else trans_time = "NEVER ATTENDED";

		trans_pic = user_list.attendees (i).highest_trans_seen;
		call ioa_$rsnnl ("^[^4s^; ^[^[d^;r^]^;^s ^]^[n^; ^]^[o^; ^]^3x^]^a^[.^a^;^s^]^[^43t^[[^a]^; *END*^s^]^52t^a^]",
		     name_array (no_selected), messlen, names_only, (user_list.attendees (i).deleted |
		     user_list.attendees (i).removed), user_list.attendees (i).deleted, 
		     (user_list.attendees (i).notify), (user_list.attendees (i).read_only),
		     rtrim (user_list.attendees (i).person_id), (user_list.attendees (i).project_id ^= ""),
		     user_list.attendees (i).project_id, ^names_only,
		     (user_list.attendees (i).highest_trans_seen < user_list.transaction_count),
		     ltrim (trans_pic), trans_time);

		if sort = SORT_BY_NAME then
		     if names_only then v.vector (no_selected) = addr (name_array (no_selected));
		     else v.vector (no_selected) = addr (substr (name_array (no_selected), 8));
		else if sort = SORT_BY_SEEN then
		     v.vector (no_selected) = addr (user_list.attendees (i).highest_trans_seen);
		else v.vector (no_selected) = addr (user_list.attendees (i).last_time_attended);
	     end;
reject_name:
	end;

	if no_selected = 0 & ^active_function then do;
	     if ^brief_switch then
		call ssu_$print_message (ssu_ptr, 0, "No participants were selected.");
	     return;
	end;

	else if ^active_function then do;
	     if header_switch then call print_name_header ();
	     if total_switch then
		call ioa_ ("Total users ^[selected ^]=  ^d.", (attending_switch | notify_switch | person_switch | count > 0),
		     no_selected);
	     else do;
		idxs.n, v.n = no_selected;
		do i = 1 to no_selected;
		     idxs.vector (i) = i;
		end;
		if sort = SORT_BY_NAME then
		     call sort_items_indirect_$char (addr (v), addr (idxs), 75 - sort);
		else if sort = SORT_BY_SEEN then
		     call sort_items_indirect_$fixed_bin (addr (v), addr (idxs));
		else call sort_items_indirect_$general (addr (v), addr (idxs), compare_fb71);

		if ascending then
		     do i = 1 to no_selected;
			call ioa_ ("^a", name_array (idxs.vector (i)));
		     end;
		else do i = no_selected to 1 by -1;
		     call ioa_ ("^a", name_array (idxs.vector (i)));
		end;
	     end;

	end;
	return;
     end name_list_;

compare_fb71:
     proc (p1, p2) returns (fixed bin (1));

declare	(p1, p2)			ptr unaligned,
	fb71			fixed bin (71) based;

	if p1 -> fb71 > p2 -> fb71 then return (1);
	else if p1 -> fb71 = p2 -> fb71 then return (0);
	else return (-1);

     end compare_fb71;


print_name_header:
     proc ();

	call ioa_ ("^[Eligible u^;U^]sers of the ^a>^a meeting.", eligible_switch, forum_dir, forum_name);
	if names_only | total_switch | eligible_switch then return;

	trans_pic = user_list.transaction_count;
	call ioa_("Flags  Person                        Last [^a]^52tLast time attended", ltrim (trans_pic));

	return;
     end print_name_header;
%page;
cleanup_handler:
     proc ();

	if forum_opened then call forum_$close_forum (temp_idx, (0));
	if user_list_ptr ^= null () then free user_list;
	if forum_trans_list_ptr ^= null () then free forum_trans_list;
	if command then call ssu_$destroy_invocation (ssu_ptr);

	return;
     end cleanup_handler;

punt:
     proc ();

	goto EXIT;

     end punt;

     end forum_list_users;
