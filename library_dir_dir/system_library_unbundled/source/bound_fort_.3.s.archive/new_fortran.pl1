/* ******************************************************
   *                                                    *
   * Copyright, (C) Honeywell Limited, 1983             *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   ****************************************************** */

/* format: style3,^delnl,linecom */
new_fortran:
     proc;
fortran:
     entry;
ft:
     entry;

/* Modified:
	12 Jul 83, MM - 380: Prevent -check from truncating existing object
		segments.
	12 Jul 83, MM - Prevent -version from displaying the version twice.
	12 Jul 83, MM - 379: Change argument handling to use fort_defaults_.
	10 May 83, RG - 174: Allow source to be an archive component.
	31 Jan 83, HH - Install LA/VLA support.
	17 December 1982, TO - Add "long_profile" option.
	21 June  1982, TO - Conform to MPM standards with:
	     "-nstrg", "-nsubr", "-ckmpy", "-nckmpy", "-ntb".
	 3 April 1982, TO - Conform to mr10 info seg with:
	     "-no_strg", "-no_subrg", "-ck_mpy" and "-no_ck_mpy".
	28 May 1982, TO - Make "-check_multiply", "-stringrange",
	     "-subscriptrange" defaults for ansi77 with no optimize.
	28 May 1982, TO - Add controls "-nsubrg", "-nstrg",
	      "-no_stringrange", "-no_subscriptrange".
	 3 May 1982, TO  - Add "-check_multiply" and "-no_check_multiply".
	 3 May 1982, TO  - Add "-table" as default if not optimizing.
	 3 May 1982, TO  - Add "-no_table"/"-ntb" option.
	 3 May 1982, TO  - Add "-auto_zero"/"-no_auto_zero".
	 1 Apr 1982, TO  - fix bug 205.
	 1 Apr 1982, TO  - fix bug 259.
	26 Sep 1980, CRD - use new cu_$arg_count with code.
	26 Feb 1979, PES - add -version and -no_version control args.
	06 Nov 1979, SRH - arguments made non-positional.
	13 Sep 1979, PES - add -ansi66/-ansi77 control args.  Default to 66.
		fix usage message.
	12 Jul 1979, PES - Make -relocatable the default.  Add -non_relocatable.
	07 Apr 1979, RAB - Make -time_ot NOT imply -time
	18 Dec 1978, PES - Make auto_zero the default.  Broken by change of 29 Nov.
	30 Nov 1978, PES - Add undocumented control args -truncate and -round.
	29 Nov 1978, PES - Changes to control arguments for MR7.0--Remove -consolidate and -super,
		add -safe_ot and -top_down, change -optimize to include -consolidate -super.
	27 Sep 1978, PES - Don't announce compiler until after all checking of command line is done
		and it is known that fort_ will be invoked.
	27 Jul 1978, PES - Remove simple and full control arguments (introduced as special optimizer
		control arguments).
	13 Jun 1978, DSL - Implement v2 opt features; set bit count of obj seg to zero if compilation
		fails;  have special optimizer control args also set optimize bit.
	18 May 1978, DSL - Print name of given entry name if compilation fails.
	26 Jan 1978, RAB - add special loop optimizer control_args.
	30 Aug 1977, DSL - implement fortran_severity_.
	10 Feb 1977, DSL - add -optimize (-ot); use temp seg if user specifies -check
		instead of real obj seg.
	09 Dec 1976, DSL - Standardize the listing options; change -rel to -rlc;
		use new version of compiler_source_info.incl.pl1; ref fort_version_info$greeting.
	30 Aug 1976, DSL - to allow new listing options.
*/

dcl	acl_ptr		pointer;
dcl	archive_$get_component
			entry (ptr, fixed bin (24), char (*), ptr, fixed bin (24), fixed bin (35));
dcl	arg_count		fixed bin;
dcl	arg_error		bit (1) aligned init ("0"b);
dcl	arg_len		fixed bin;
dcl	arg_list_ptr	ptr;
dcl	arg_no		fixed bin;
dcl	arg_pt		pointer;
dcl	arg_string	char (arg_len) based (arg_pt);
dcl	binary_file	(1:o_len) bit (36) aligned based;
dcl	cleanup		condition;
dcl	code		fixed bin (35);
dcl	com_err_		entry options (variable);
dcl	compiler_suffix	char (7) int static options (constant) init ("fortran");
dcl	cu_$arg_count	entry (fixed bin, fixed bin (35));
dcl	cu_$arg_list_ptr	entry (ptr);
dcl	cu_$arg_ptr	entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl	cu_$make_entry_value
			entry (pointer, entry);
dcl	comp_name		char (32);
dcl	dir_name		char (256);
dcl	ent_binary_name	char (256);
dcl	ent_name		char (66);
dcl	error_table_$badopt fixed bin (35) ext static;
dcl	error_table_$entlong
			fixed bin (35) ext static;
dcl	error_table_$pathlong
			fixed bin (35) ext static;
dcl	find_source_file_	entry (char (*), char (*), char (*), ptr, fixed bin (24), fixed bin (35));
dcl	fort_		entry (ptr, ptr, fixed bin (19), ptr, ptr, entry, entry, fixed bin (35));
dcl	fort_defaults_$check_args
			entry (ptr, aligned bit (1));
dcl	fort_defaults_$argument
			entry (ptr, fixed bin, fixed bin, ptr, ptr, aligned bit (1));
dcl	fort_defaults_$set	entry (ptr, ptr);
dcl	fort_version_info$greeting
			char (16) aligned ext static;
dcl	fort_version_info$version_number
			char (16) aligned ext static;
dcl	fortran_severity_	fixed bin (35) ext static;
dcl	get_temp_segments_	entry (char (*), dim (*) ptr, fixed bin (35));
dcl	get_pdir_		entry returns (char (168));
dcl	get_wdir_		entry returns (char (168));
dcl	got_path		bit (1) aligned init ("0"b);
dcl	hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24),
			fixed bin, ptr, fixed bin (35));
dcl	hcs_$terminate_noname
			entry (pointer, fixed bin (35));
dcl	ioa_		entry options (variable);
dcl	len		fixed bin (24);
dcl	library_entry	entry variable;
dcl	next_source_seg_entry
			entry variable;
dcl	o_len		fixed bin (19);
dcl	o_ptr		pointer;
dcl	p_array		(1) ptr;			/* used in calls to (get release)_temp_segments_ */
dcl	path		char (path_len) based (path_pt) unaligned;
dcl	path_len		fixed bin;
dcl	path_pt		pointer;
dcl	program_name	char (11) int static options (constant) init ("new_fortran");
dcl	release_temp_segments_
			entry (char (*), dim (*) ptr, fixed bin (35));
dcl	src_ptr		pointer;
dcl	translator_info_$component_get_source_info
			entry (ptr, char (*), char (*), char (*), fixed bin (71), bit (36) aligned,
			fixed bin (35));
dcl	tssi_$clean_up_segment
			entry (ptr);
dcl	tssi_$finish_segment
			entry (ptr, fixed bin (24), bit (36), ptr, fixed bin (35));
dcl	tssi_$get_segment	entry (char (*), char (*), ptr, ptr, fixed bin (35));
dcl	1 csi		aligned like compiler_source_info;
dcl	1 fo		aligned like fortran_options;
dcl	1 fd		aligned like fortran_declared;
dcl	(addr,
	baseno,
	divide,
	index,
	length,
	null,
	rtrim,
	string,
	substr,
	unspec)		builtin;
%include compiler_source_info;
%include fort_options;

	fortran_severity_ = 5;			/* initialize ext static status word */

/* the following initializations affect the cleanup handler */

	acl_ptr = null;				/* There is no ACL list to clean up */
	o_ptr = null;				/* There is no object segment to terminate */
	src_ptr = null;				/* There is no source segment to terminate */

/* Set the default fortran options */
	unspec (fd) = "0"b;
	unspec (fo) = "0"b;
	fo.auto_zero = "1"b;
	fo.do_rounding = "1"b;
	fo.relocatable = "1"b;

/* get options */

	call cu_$arg_count (arg_count, code);
	if code ^= 0
	then do;
		call com_err_ (code, program_name);
		return;
	     end;

	if arg_count = 0
	then do;
		call com_err_ (0, program_name, "Usage: new_fortran source_path {-control_args}");
		return;
	     end;

	call cu_$arg_list_ptr (arg_list_ptr);		/* get pointer to arguments for fort_defaults_ */

	do arg_no = 1 to arg_count;

	     call cu_$arg_ptr (arg_no, arg_pt, arg_len, code);

	     if code ^= 0
	     then do;
		     call com_err_ (code, program_name, "While processing ""^a"".", arg_string);
		     arg_error = "1"b;
		end;

	     else if index (arg_string, "-") ^= 1
	     then if got_path
		then do;
			call com_err_ (0, program_name, "Hyphen missing from ^a.", arg_string);
			arg_error = "1"b;
		     end;
		else do;
			got_path = "1"b;
			path_pt = arg_pt;
			path_len = arg_len;
		     end;
	     else call fort_defaults_$argument (arg_pt, arg_len, arg_no, arg_list_ptr, addr (fd), arg_error);
	end;					/* loop thru arguments */

	if ^got_path
	then if arg_count > 1 | ^fd.version
	     then do;
		     call com_err_ (0, program_name, "User has not supplied a source segment path name.");
		     arg_error = "1"b;
		end;
	     else do;
		     call identify_version;
		     return;
		end;

	call fort_defaults_$check_args (addr (fd), arg_error);
	call fort_defaults_$set (addr (fd), addr (fo));

	if arg_error
	then do;
		if fd.version
		then call identify_version;
		return;
	     end;

/* find the source */

	call find_source_file_ (path, compiler_suffix, ent_name, src_ptr, len, code);
	if src_ptr = null
	then do;
		call com_err_ (code, program_name, "^a", path);
		if fd.version
		then call identify_version;
		return;
	     end;

/* store entry name as given by the user in structure for the compiler */

	csi.given_ename = before (ent_name, "." || compiler_suffix);

/* establish a clean up handler */

	on condition (cleanup)
	     begin;
		call truncate ();
	     end;

	p_array (1), acl_ptr = null ();
	ent_binary_name = csi.given_ename;
	dir_name = get_wdir_ ();
	call hcs_$initiate_count (dir_name, ent_binary_name, "", (0), 1, o_ptr, code);

	if baseno (src_ptr) = baseno (o_ptr)
	then do;
		call com_err_ (0, program_name,
		     "Source and object segment are the same segment.");
		o_ptr, acl_ptr = null ();
		go to abort;
	     end;
	call hcs_$terminate_noname (o_ptr, code);

/* get pointer to temporary object segment or just temp seg (for -check option) */

	call get_temp_segments_ (program_name, p_array, code);
	if code ^= 0
	then do;
		call com_err_ (code, program_name, "Getting temp seg for compiler.");
		go to abort;
	     end;
	o_ptr = p_array (1);

/* get actual pathname, unique id, and date time modified; store in structure for compiler. */

	call translator_info_$component_get_source_info (src_ptr, dir_name, ent_name, comp_name,
	     csi.date_time_modified, csi.unique_id, code);
	if code ^= 0
	then do;
		call com_err_ (code, program_name, ent_name);
		go to abort;
	     end;

/* Set segname to "" and the entire pathname is put into dirname */
	csi.dirname = rtrim (dir_name, "> ") || ">" || rtrim (ent_name);
	if comp_name ^= ""
	then if length (csi.dirname) + length (rtrim (comp_name)) - length (".archive") + 1 > maxlength (csi.dirname)
	     then do;
		     call com_err_ (error_table_$pathlong, program_name, "^a::^a", before (csi.dirname, ".archive"),
			comp_name);
		     goto abort;
		end;
	     else csi.dirname = before (csi.dirname, ".archive") || "::" || rtrim (comp_name);
	csi.segname = "";

	csi.input_lng = divide (len + 8, 9, 21, 0);	/* Convert length to chars. */
	csi.input_pointer = src_ptr;

	csi.version = compiler_source_info_version_2;


/* CALL THE COMPILER */

	call cu_$make_entry_value (null (), next_source_seg_entry);
	call cu_$make_entry_value (null (), library_entry);

/* announce the compiler */

	if ^fd.no_version
	then call identify_version;

	fortran_severity_ = 0;			/* For call to the compiler. it sets actual severity */

	call fort_ (addr (csi), o_ptr, o_len, addr (fo), addr (fd), next_source_seg_entry, library_entry, code);

	if code ^= 0
	then call com_err_ (code, program_name, "^a.fortran", csi.given_ename);
	else if ^fo.check
	then do;

/* Create the object segment, and copy the binary. */

		dir_name = get_wdir_ ();
		call tssi_$get_segment (dir_name, ent_binary_name, o_ptr, acl_ptr, code);
		if o_ptr = null			/* cannot create binary */
		then do;
			call com_err_ (code, program_name, "Cannot create ^a in working directory.",
			     ent_binary_name);
			dir_name = get_pdir_ ();
			call tssi_$get_segment (dir_name, ent_binary_name, o_ptr, acl_ptr, code);

			if o_ptr = null
			then do;
				call com_err_ (code, program_name, "Cannot create ^a in process directory.",
				     ent_binary_name);
				go to abort;
			     end;
			else call com_err_ (0, program_name, "^a created in process_directory.", ent_binary_name);
		     end;
		unspec (o_ptr -> binary_file) = unspec (p_array (1) -> binary_file);
	     end;

/* clean up and return */
abort:
	if src_ptr ^= null
	then call hcs_$terminate_noname (src_ptr, code);

	if o_ptr ^= null & o_ptr ^= p_array (1)
	then call tssi_$finish_segment (o_ptr, o_len * 36, "1100"b, acl_ptr, code);
	if p_array (1) ^= null
	then call release_temp_segments_ (program_name, p_array, code);
	return;

identify_version:
     procedure ();

	call ioa_ (rtrim (fort_version_info$greeting) || substr (fort_version_info$version_number, 10));
	return;
     end;


truncate:
     procedure;					/* cleans up after to compiler */

	if src_ptr ^= null
	then call hcs_$terminate_noname (src_ptr, code);
	src_ptr = null;

	if p_array (1) ^= null ()
	then call release_temp_segments_ (program_name, p_array, code);

	if acl_ptr ^= null
	then call tssi_$clean_up_segment (acl_ptr);

	acl_ptr, o_ptr = null ();
     end /* truncate */;
     end /* new fortran */;
