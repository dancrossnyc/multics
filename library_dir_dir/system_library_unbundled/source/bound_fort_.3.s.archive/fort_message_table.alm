" ******************************************************
" *                                                    *
" * Copyright, (C) Honeywell Limited, 1983             *
" *                                                    *
" * Copyright (c) 1972 by Massachusetts Institute of   *
" * Technology and Honeywell Information Systems, Inc. *
" *                                                    *
" ******************************************************

" HISTORY COMMENTS:
"  1) change(86-07-14,BWong), approve(86-07-14,MCR7286),
"     audit(86-07-17,Ginter), install(86-07-28,MR12.0-1105):
"     Fix fortran bug 452.
"  2) change(86-07-14,BWong), approve(86-07-14,MCR7382),
"     audit(86-07-17,Ginter), install(86-07-28,MR12.0-1105):
"     Fix fortran bugs 389, 411, 470, 476, and 481.
"  3) change(86-07-14,BWong), approve(86-07-14,MCR7442),
"     audit(86-07-17,Ginter), install(86-07-28,MR12.0-1105):
"     Fix fortran bug 498.
"  4) change(87-04-15,Huen), approve(87-04-15,MCR7651),
"     audit(87-04-15,RWaters), install(87-05-08,MR12.1-1031):
"     Fix fortran bug 479.
"                                                      END HISTORY COMMENTS


" Written:
"
" Modified:
"	13 Mar 86, NS - 498: Add message 194 for invalid unit numbers.
"	12 Dec 85, NS, MM, & BW - 389/481/482: Add message 366 for real
"		and double precision declarations that are not supported.
"		Add message 365 for complex declarations that are not
"		supported.
"	07 Nov 85, SH & MM - 476: Change message 422 from severity 3 to 
"		a warning.
"	29 Oct 85, BW - 411: Reword message 426 to specify word or character
"		units.
"	26 Sep 85, BW - 470: Reword messages 36 and 120.  Only significant
"		digits count in real and double precision constants.
"	13 May 85, BW - 452: Change messages 329 and 358 to severity 3.
"	05 Oct 84, MM - hfp_acs: Add message 522.
"	22 Jun 84, MM - Install typeless functions support.  Added messages
"		359, 360, 361, 362, 363, and 364.
"	13 Apr 84, MM - 419 Remove obsolete messages 2 and 7.
"	19 Sep 83, RG & MM - 242/370: Update messages 400 & 401.
"	24 Aug 83, TO - 401: Update message 136 for VLA mods.
"	14 Aug 83, HH - 387: Change message 155.
"	12 Jul 83, MM - Add 193 for illegal %globals
"	12 Jul 83, MM - Add 191, 192 for compilation option conflicts.
"	19 Jun 83, HH - 145: Add message 190.
"	17 Jun 83, HH - 383: Change messages 019 and 169.
"	31 Jan 83, TO & HH - Install LA/VLA support.
"	19 May 82, TO  - Make 468 a level 2 warning.
"	13 Apr 82, TO  - Modify message 384 to list line range.
"	 5 Apr 82, TO  - Add 189 for parameter list limit warning.
"	16 Nov 81, MEP - Add 188 for no s permission on directory containing include file
"	27 October 1981, CRD - Add 356, 357 for inquire statement.
"	20 October 1981, CRD - Add message 303 for internal files.
"	8 September 1981, CRD - Improve message 338.
"	23 June 1981, MEP - Added message 187, for invalid specification(s) in new I/O statements.
"	12 June 1981, MEP - Added message 40, for a missing, but indeterminate, keyword.  Made message 31 more general, 
"		with caller supplying the refinement.
"	11 June 1981, MEP - Changed the severity of error 48 to 3, as it is a bone fide error.
"	2 June 1981, MEP - Removed message 40, as fortran no longer requires at least one parameter for a function.
"	14 May 1981, MEP - Added message 186 for SAVE /foo/ for foo not a common-block name
"	11 May 1981, MEP - Revised wording of 93 for once per statement.
"	30 April 1981, MEP - Revised wording of message 15 for named block data subprogramsss.
"	16 April 1981, MEP - Revised wording of message 19 to include common blocks.
"	21 March 1981, MEP - Revised messages 78 and 136, added messages 166 - 168, 
"	          and 198 -199, all for new array bounds.
"	13 March 1981, CRD - Added message 468.
"	21 January 1981, CRD - Removed message 392.
"	29 December 1980, MEP - Reworded messages 178 -181 for block if.
"	18 December 1980, CRD - Reworded message 324 for block IF.
"	16 December 1980, MEP - Added messages 178 thru 181 for block if.
"	23 October 1980, CRD - Added message 314.
"	1 October 1980, CRD - Added message 392.
"	16 September 1980, CRD - Added message 391.
"	27 June 1980, CRD - Added message 355, for *-length parameter functions.
"	26 June 1980, CRD - Added message 159, for invalid substring dt.
"		Many changes and additions by PES and CRD went unrecorded.
"	03 Dec 1979, PES - Change msg 96 to be more precise.  Add msgs 153
"		thru 155 for ANSI77 character mode.
"	01 Oct 1979, PES - Added msg 147 for *-length misuse.
"	12 Sep 1979, CRD - Added msg 503 in fixing bug 241 (symbol nodes
"		too far apart to chain runtime_symbol.next).
"	18 Jul 1979, PES - Added msg 144 for change to exponentiation precedence.
"	12 Jul 1979, PES - Changed msgs 29 and 305 to reflect relaxed restriction on encode/decode
"		string--change phrase end line to end statement in recognition of ANSI 77.
"	02 Jun 1979, RAB - New messages for optimizer
"	21 Mar 1979, PES - New messages for %include and %(global options).
"	05 Dec 1978, PES - New messages for %global and %options.
"	26 Sep 1978, RAB - fixes 187 (add a new error message)
"	28 Jul 1978, PES - bug in entry for error 443 fixed.
"	30 May 1978, PES - converter error messages
"	18 Jan 1978, RAB - loop optimizer error messages
"	04 Jan 1978, DSL - implement print_once_per_(stmnt subpgm).
"	27 Dec 1977, DSL - change format of table to allow bit values to be associated with
"		each error message.
"	Previous changes went unrecorded.
	maclist	off
	macro	message
	vfd	9/&2,9/&l3,18/&n
	use	.message_area.
&u:	aci	"&3"
	use	.text.
	&end

	bool	print_once,400	" print only once per compilation
	bool	print_once_per_stmnt,200+print_once
	bool	print_once_per_subpgm,100+print_once
	bool	save_opnd3,060
	bool	save_opnd2,040
	bool	save_opnd1,020

	name	fort_message_table

	segdef	fort_message_table

fort_message_table:
	zero	0,message_text-1

	message	001,3,(This segment contains no FORTRAN statements, just comment lines.)
	message	002,0,()
	message	003,3,(Main program must be the first program unit in the segment.)
	message	004,2+print_once_per_subpgm,
		     (Executable statements cannot appear in a block data subprogram.)
	message	005,1,(This statement is preceded by an unconditional transfer of control and cannot be referenced.)
	message	006,3,(Syntax error in ^a statement. Text follows logical end of statement.)
	message	007,0,()
	message	008,3,(The do loop ending with ^a has not been terminated.)
	message	009,2,(Return value of function ^a has not been set.)
	message	010,3,(Syntax error. A variable name is required in place of ^a.)
	message	011,3,(Syntax error. A right parenthesis is required in place of ^a.)
	message	012,3,(The label ^a has been referenced but not declared.)
	message	013,3,(Syntax error. A slash is required in place of ^a.)
	message	014,3,(^a is declared with variable bounds but is not a parameter.)
	message	015,1+print_once,
		     (More than one unnamed block data subprogram.)
	message	016,3,(A ^a statement cannot terminate a do loop.)
	message	017,2,(A ^a statement cannot appear in a main program.)
	message	018,3,(^a is the index of two or more nested implied do loops.)
	message	019,3,(^a appears in a bound of ^a, but is not a common or parameter, scalar, integer variable.)
	message	020,3,(^a cannot be declared as a member of the common block ^a.)
	message	021,3,(^a cannot be referenced as a subroutine.)
	message	022,3,(Syntax error. A left parenthesis is required in place of ^a.)
	message	023,3,(Syntax error. A statement label is required in place of ^a.)
	message	024,3,(Syntax error. An unsigned integer constant is required in place of ^a.)
	message	025,3,(Syntax error. A reference to a scalar variable is required in place of ^a.)
	message	026,3,(Syntax error. A comma is required in place of ^a.)
	message	027,3,(Implementation restriction: Do loop and block if nesting has exceeded ^a.)
	message	028,3,(Syntax error. An equivalence group must contain at least two members.)
	message	029,2,(An ^a statement file must be a variable, array, or array element of arithmetic or character type.)
	message	030,3,(The ^a attribute is redundant or conflicting for ^a and is ignored.)
	message	031,3,(A ^a statement must have a ^a specification.)
	message	032,3,(This is not an assignment statement and ^a is not a known keyword.)
	message	033,3,(A global save statement must be the only save statement in a program unit.)
	message	034,3,(Syntax error. A left parenthesis encountered that does not delimit an implied do loop.)
	message	035,3,(A ^a statement cannot appear in a main program.)
	message	036,1+print_once_per_stmnt+save_opnd1,
		     (The real constant ^a has more than ^a significant digits and has been converted to double precision.)
	message	037,3,(Syntax error. A format statement must have a statement label.)
	message	038,3,(A program unit cannot contain both automatic statements and save statements.)
	message	039,3,(^a can only appear in this parameter list once.)
	message	040,3,(Syntax error. A keyword is required in place of ^a.)
	message	041,3,(Syntax error. A label, variable name, or list of labels is required in place of ^a.)
	message	042,3,(A ^a statement cannot be the second part of a logical if statement.)
	message	043,1,(^a has been referenced but not set.)
	message	044,3,(Syntax error. The keyword ^a is required in place of ^a.)
	message	045,3,(Syntax error. A single letter is required in place of ^a.)
	message	046,3,(Syntax error. The letter range specified must be in ascending alphabetical order.)
	message	047,3,(Syntax error. The letters in the letter range must be in the same case.)
	message	048,3,(The ^a keyword has been specified more than once in this statement.)
	message	049,3,(Syntax error. An equals sign is required in place of ^a.)
	message	050,3,(Syntax error. A constant is required in place of ^a.)
	message	051,3,(Syntax error. Only arithmetic constants can be signed.)
	message	052,3,(Syntax error. The characters ^a are out of place.)
	message	053,3,(Syntax error. A character string constant is required in place of ^a.)
	message	054,3,(Pathname in library statement is not acceptable.)
	message	055,3,(Implementation restriction: A statement function is limited to ^a arguments.)
	message	056,3,(This ^a statement is out of sequence and is ignored.)
	message	057,1,(Adding a word to common block ^a in order to store ^a on a double word boundary.)
	message	058,3,(^a is a member of common and cannot have variable bounds.)
	message	059,3,(Storage class for ^a conflicts with storage class of the equivalence group.)
	message	060,3,(Attempt to equivalence ^a to more than one location.)
	message	061,3,(Attempt to change the address of common block ^a.)
	message	062,3,(Cannot equivalence a member of a common block, ^a, to another common block, ^a.)
	message	063,3,(Alignment requirements for equivalence group containing ^a cannot be resolved.)
	message	064,3,(^a cannot appear in an equivalence group.)
	message	065,3,(^a cannot appear in an equivalence group because it has variable bounds.)
	message	066,3,(Syntax error. ^a is not a valid keyword for the ^a statement.)
	message	067,4,(Implementation restriction: ^a has overflowed its limit of ^a words.)
	message	068,1,(^a, which is a formal parameter of the statement function ^a, has not been referenced.)
	message	069,2+print_once_per_stmnt+save_opnd1,
		     (The statement label ^a is less than 1 or greater than 99999.)
	message	070,3,(The statement label ^a has been previously defined. This definition is ignored.)
	message	071,3,(This executable statement label is used as a format specification.)
	message	072,3,(This format statement label is used in an executable context.)
	message	073,3,(The statement label on this statement cannot be referenced.)
	message	074,3,(A reference to an executable statement label is required in place of ^a.)
	message	075,3,(A reference to a format statement label is required in place of ^a.)
	message	076,3,(A subscripted reference to ^a is not possible.)
	message	077,3,(This reference to ^a is not valid because it has variable bounds.)
	message	078,3,(The subscript ^a exceeds the corresponding ^a bound for ^a.)
	message	079,3,(A reference to ^a has ^a subscripts.)
	message	080,3,(Initialization of common blocks can only occur in a block data subprogram. ^a not initialized.)
	message	081,2+print_once_per_stmnt+save_opnd1,
		     (More than one initial value assigned to an element of ^a.)
	message	082,3,(Fewer constants than variables in a data specification.)
	message	083,3+print_once_per_stmnt+save_opnd2,
		     (The mode of ^a is not compatible with the mode of ^a.)
	message	084,3,(More constants than variables in a data specification.)
	message	085,3,(Implementation restriction: Format specification is longer than ^a characters.)
	message	086,3,(Syntax error in a format specification. ^a)
	message	087,3,(Implementation restriction: The character length of ^a exceeds ^a.)
	message	088,3,(Syntax error. A format or namelist reference is required in place of ^a.)
	message	089,3,(Implementation restriction: Implied do loop nesting exceeds ^a.)
	message	090,3,(Syntax error. Parentheses do not balance.)
	message	091,3,(Syntax error in an implied do loop.)
	message	092,3,(^a is not a keyword or variable name and cannot start a FORTRAN statement.)
	message	093,3+print_once_per_stmnt+save_opnd1,(^a cannot be declared as a builtin function.)
	message	094,3,(Syntax error. An operand is required in place of ^a.)
	message	095,3,(Only scalar variables and array elements may appear in a set context.)
	message	096,3+print_once_per_stmnt+save_opnd1,
		     (The function ^a cannot appear in a set context.)
	message	097,3,(^a is followed by a parenthesized list but is not dimensioned and cannot be a function.)
	message	098,3,(^a is dimensioned and must appear in this context with subscripts.)
	message	099,3,(^a is an entry value and cannot appear in this context.)
	message	100,3,(^a cannot appear in this context.)
	message	101,3,(Syntax error. A binary operator is required in place of ^a.)
	message	102,3,(Syntax error. Unexpected occurance of ^a.)
	message	103,1,(Implementation restriction: The line number ^a must be less than 16384.)
	message	104,2,(Missing end statement. One will be supplied by the compiler.)
	message	105,2,(Syntax error. Statement consisting of only a statement label.)
	message	106,3,(The character ^a is not a member of the FORTRAN character set or is out of place.)
	message	107,3,(Invalid use of ^a.)
	message	108,2,(Character string constant whose length is zero.)
	message	109,2,(A character string constant has been terminated by the end of the statement.)
	message	110,3,(Implementation restriction: More than ^a constants in this statement.)
	message	111,3,(Text of this statement exceeds ^a characters.)
	message	112,3,(A continuation line was encountered that was not preceded by an initial line.)
	message	113,3,(There is no line number on this line:^5x^a)
	message	114,3,(The rightmost six digits of ^a will be used as the line number.)
	message	115,3,(The line number ^a is not greater than ^a.)
	message	116,3,(Syntax error. Decimal point missing from end of an operator or logical constant.)
	message	117,3,(.^a. is not an operator or constant known to this compiler.)
	message	118,3,(Missing or incomplete exponent field. The value zero will be used.)
	message	119,3+print_once_per_stmnt+save_opnd1,
		     (Integer constant ^a cannot be represented internally.)
	message	120,3+print_once_per_stmnt+save_opnd2,
		     (More than ^a significant digits in the floating point constant ^a.)
	message	121,3+print_once_per_stmnt+save_opnd1,
		     (Exponent overflow while converting the floating point constant ^a.)
	message	122,3+print_once_per_stmnt+save_opnd1,
		     (Exponent underflow while converting the floating point constant ^a.)
	message	123,3,(Implementation restriction: More than ^a tokens in this statement.)
	message	124,3,(Implementation restriction: Tokens are limited to ^a characters.)
	message	125,2,(The data type of ^a must be the same as that of ^a.)
	message	126,3,(^a cannot be assigned an initial value.)
	message	127,3,(The name ^a cannot be used as an entry point name.)
	message	128,3,(^a is a member of blank common and cannot be assigned an initial value.)
	message	129,2,(The letter range specified in this statement overlaps a previous range.)
	message	130,3,(^a is contained in an octal constant but is not an octal digit.)
	message	131,3,(A statement label appears on a line without any other text.)
	message	132,1,(This statement contains a line with more than 80 characters.)
	message	133,3,(A non-numeric character was encountered in a label field.)
	message	134,2,(Text appears after the closing right parenthesis of a format specification.)
	message	135,3,(The variable ^a must be the index variable of a containing implied do loop.)
	message	136,3,(Implementation restriction: The ^a of ^a exceeds ^a.)
	message	137,3+print_once_per_stmnt+save_opnd1,
		     (A prefix minus cannot precede ^a.)
	message	138,3,(Implementation restriction: There are more than ^a arguments in this reference to ^a.)
	message	139,2,(A character constant used to initialize ^a is longer than ^a characters.)
	message	140,3,(Variable ^a has already been defined, and cannot appear in a ^a statement.)
	message	141,2,(^a must be a scalar integer reference.)
	message	142,3,(The named constant ^a must not appear in this context.)
	message	143,3,(The expression starting with ^a must be a scalar or subscripted variable.)
	message	144,1+print_once_per_stmnt,
		     (Warning: the meaning of multiple exponentiation has been changed from a previous release.)
	message	145,3,(This ^a statement cannot have an input-output list.)
	message	146,3,(This ^a statement must have an input-output list.)
	message	147,2,(Variable ^a was declared with *-length, but is not a parameter or external function--length has been set to ^a.)
	message	148,1,(Line ^a^a was interpreted as a comment, but a legal non-space character follows the initial c.)
	message	149,3,(Asterisks designating external units are not permitted in ^a statements.)
	message	150,1,(Unknown keyword ^a found in %global statement.)
	message	151,1,(Unknown keyword ^a found in %options statement.)
	message	152,3,(The terminating semicolon is missing from a %options or %global statement.)
	message	153,3+print_once_per_subpgm,
		     (The concatenation operator may only be used if the ansi77 control argument or option was specified.)
	message	154,3+print_once_per_subpgm,
		     (The substring operation may only be used if the ansi77 control argument or option was specified.)
	message	155,3,(Invalid substring of ^a:  ^a.)
	message	156,3+print_once_per_stmnt+save_opnd1,
		     (^a cannot contain both ansi77 character variables and other data types.)
	message	157,3+print_once_per_stmnt,
		     (An equivalence group cannot contain both ansi77 character variables and other data types.)
	message	158,3+print_once_per_stmnt,
		     (Star-extent character strings may only be used if the ansi77 control argument or option was specified.)
	message	159,3,(This statement contains a substring reference to ^a, which is not of the character data type.)
	message	160,3,(The %include statement does not contain a file name.)
	message	161,3,(The include file name ^a is longer than 19 characters.  Statement ignored.)
	message	162,3,(Include file ^a not found.  Statement ignored.)
	message	163,3,(Implementation restriction: only 255 include files allowed per compilation.  Include file ^a ignored.)
	message	164,3,(Implementation restriction:  include file ^a exceeds the nesting limit of 32.  Statement ignored.)
	message	165,3,(This reference to ^a would cause infinite recursion of include files.  Statement ignored.)
	message	166,3,(An assumed-size array is not permitted in an ^a statement.)
	message	167,3,(The array ^a has an assumed-size declarator in other than the upper bound of the last dimension.)
	message	168,3,(A lower dimension bound of ^a is greater than the corresponding upper bound.)
	message	169,3,(A dimension bound of ^a is not an arithmetic expression of integer constants and scalar variables.)
	message	170,4,(Compiler error:  An invalid data type has been encountered during evaluation of a parameter expression.)
	message	171,3,(A non-constant operand ^a was found while evaluating ^a.)
	message	172,3,(An operator whose operands are of invalid type was found while evalating ^a .)
	message	173,3,(An attempt was made to use an unimplemented operation while evaluating ^a.)
	message	174,3,(The ^a condition was raised during evaluation of ^a.)
	message	175,3,(An invalid operator was found during evaluation of ^a.)
	message	176,3,(An operand of invalid data type was found during evaluation of ^a.)
	message	177,4,(Compiler error:  the parameter statement work area has overflowed.)
	message	178,3,(The block if beginning at line ^a has not been terminated.)
	message	179,3,(The keyword ^a is missing in a ^a statement.)
	message	180,3,(There is no block if statement corresponding to this ^a statement.)
	message	181,3,(This ^a statement has followed an else statement in the same block if.)
	message	182,3,(The do loop ending at ^a must be ended before this ^a statement.)
	message	183,3,(This statement ends a do loop, but the do loop ending at ^a must be ended first.)
	message	184,3,(This statement ends a do loop, but the block if at line ^a must be ended first.)
	message	185,3,(The label ^a is on a statement that must not be referenced.)
	message	186,2,(^a is not the name of a common block.)
	message	187,3,(Invalid specification or combination of specifications in a ^a statement:  ^a.)
	message	188,2,(The compiler is unable to get status information on source or include file ^a.^/The object segment will be nonstandard.)
	message	189,2,(Implementation restriction:  There are more than ^a arguments in this parameter list.)
	message	190,3,(The label ^a is referenced from outside the do loop ending with ^a.)
	message	191,2,(The ^a ^a supercedes ^a.)
	message	192,2,(The control argument ^a supercedes the %global option ^a.)
	message	193,2,(An invalid %global has been found and will be ignored.  All %globals must be^/at the beginning of the program.)
	message	194,3,(Invalid unit number ^a.  Unit numbers must be in the range from 0 to 99.)
	message	195,0,()
	message	196,0,()
	message	197,0,()
	message	198,0,()
	message	199,0,()
	message	200,4,(Compiler error: the converter has encountered an unexpected operator with the op_code ^a.)
	message	201,4,(Compiler error: attempt to increment_polish beyond end of polish input stack.)
	message	202,4,(Compiler error: the converter work segment has overflowed while adding an entry to the ^a list.)
	message	203,3+print_once_per_subpgm,
		(Compiler error: an sf dummy arg has been found which does not match a known invocation.)
	message	204,3+print_once_per_stmnt,
		(Implementation restriction: an operator cannot use more than ^a operands.)
	message	205,4,(Compiler error: converter work stack pointer has become negative.)
	message	206,4,(Compiler error: converter work stack pointer has exceeded its upper bound of ^a.)
	message	207,0,()
	message	208,0,()
	message	209,0,()
	message	210,0,()
	message	211,0,()
	message	212,0,()
	message	213,0,()
	message	214,0,()
	message	215,0,()
	message	216,0,()
	message	217,0,()
	message	218,0,()
	message	219,0,()
	message	220,0,()
	message	221,0,()
	message	222,0,()
	message	223,0,()
	message	224,0,()
	message	225,0,()
	message	226,0,()
	message	227,0,()
	message	228,0,()
	message	229,3,(Constant type not implemented.)
	message	230,0,()
	message	231,0,()
	message	232,0,()
	message	233,0,()
	message	234,0,()
	message	235,0,()
	message	236,0,()
	message	237,0,()
	message	238,0,()
	message	239,0,()
	message	240,0,()
	message	241,0,()
	message	242,0,()
	message	243,0,()
	message	244,0,()
	message	245,0,()
	message	246,0,()
	message	247,0,()
	message	248,0,()
	message	249,0,()
	message	250,0,()
	message	251,0,()
	message	252,0,()
	message	253,0,()
	message	254,0,()
	message	255,0,()
	message	256,0,()
	message	257,0,()
	message	258,0,()
	message	259,0,()
	message	260,0,()
	message	261,0,()
	message	262,0,()
	message	263,0,()
	message	264,0,()
	message	265,0,()
	message	266,0,()
	message	267,0,()
	message	268,0,()
	message	269,0,()
	message	270,0,()
	message	271,0,()
	message	272,0,()
	message	273,0,()
	message	274,0,()
	message	275,0,()
	message	276,0,()
	message	277,0,()
	message	278,0,()
	message	279,0,()
	message	280,0,()
	message	281,0,()
	message	282,0,()
	message	283,0,()
	message	284,0,()
	message	285,0,()
	message	286,0,()
	message	287,0,()
	message	288,0,()
	message	289,0,()
	message	290,0,()
	message	291,0,()
	message	292,0,()
	message	293,0,()
	message	294,0,()
	message	295,0,()
	message	296,0,()
	message	297,0,()
	message	298,0,()
	message	299,0,()
	message	300,1,
		     (^a must be a scalar integer variable.)
	message	301,3,
		     (^a must be a scalar integer variable.)
	message	302,3,(The data type of a file expression, ^a, must be integer.)
	message	303,3,(An internal file must have the character data type.)
	message	304,3,(The record number expression, ^a, must be integer.)
	message	305,2,(The encode or decode string may not be of logical data type.)
	message	306,3,(Error detected in the definition of the statement function ^a.)
	message	307,3,(Insufficient number of arguments in a reference to the statement function ^a.)
	message	308,3,(Too many arguments supplied in a reference to the statement function ^a.)
	message	309,3,(The data type of ^a is not compatible with its use.)
	message	310,3,(The data type of ^a is not compatible with its use.)
	message	311,3,(^a is complex and ^a is double precision in an expression.)
	message	312,3,(^a is double precision and ^a is complex in an expression.)
	message	313,3,(The data type of ^a must be logical.)
	message	314,3,(The arguments to the builtin function ^a must have the same data type.)
	message	315,3,(^a does not have an arithmetic data type.)
	message	316,3,(The do-loop control variable ^a cannot be complex.)
	message	317,3,(^a in a do statement must be arithmetic.)
	message	318,3,(The do-loop control variable ^a must be arithmetic.)
	message	319,3,(Wrong number of arguments in a reference to the builtin function ^a.)
	message	320,3,(The builtin function ^a has an argument, ^a, that has an invalid data type.)
	message	321,3,(Error in the use of the builtin function ^a. ^a has an invalid data type.)
	message	322,3,(Error in the use of the builtin function ^a. ^a and ^a are complex values.)
	message	323,3,(The complex value ^a cannot be used in this comparison.)
	message	324,3,(^a in a logical if, block if, or else if statement must be a logical value.)
	message	325,3,(^a in an arithmetic if statement must be an arithmetic value.)
	message	326,3,(^a in a computed if statement must be an arithmetic value.)
	message	327,3,(Insufficient number of labels in a computed goto statement.)
	message	328,3,(The complex values ^a and ^a cannot be used in this comparison.)
	message	329,3,(The format item ^a must be an integer array or a character variable.)
	message	330,4,
		     (Compiler error: obsolete macro ^a occurs in the text.)
	message	331,3,(The margin setting ^a must have the integer data type.)
	message	332,3,(The filename ^a must be a character string.)
	message	333,3,(The filetype ^a must be a character string.)
	message	334,3,(In the use of the statement function ^a, ^a does not have the correct data type.)
	message	335,3,(The file to be chained to ^a must be a character string or an integer array.)
	message	336,3,(The system to be chained to ^a must be a character string or an integer array.)
	message	337,3,
		     (The character variable ^a cannot be assigned to an arithmetic variable.)
	message	338,3,(^a cannot be assigned to ^a, because it is not a logical variable.)
	message	339,3,
		     (The logical value ^a cannot be an operand of a relational operator.)
	message	340,3,
		     (The arithmetic value ^a can only be compared to another arithmetic value or a hollerith constant.)
	message	341,3,(^a does not have the character or integer data type and cannot be compared with ^a.)
	message	342,3,(Error in processing the label list in a computed goto statement.)
	message	343,3+print_once_per_subpgm+save_opnd1,
		     (The data type of the statement function ^a must be arithmetic or logical.)
	message	344,3,(Cannot convert a double precision expression to complex in the statement function ^a.)
	message	345,3,(Cannot convert a complex expression to double precision in the statement function ^a.)
	message	346,3,(Cannot convert the defining expression to the data type of the statement function ^a.)
	message	347,3,(The statement function ^a does not have the proper data type.)
	message	348,1+print_once_per_subpgm+save_opnd1,
		     (This reference to ^a contains a character argument that may require descriptors.)
	message	349,3,(An error has been detected in the processing of an open field.)
	message	350,3,(The iostat variable ^a must have the integer data type.)
	message	351,3,(The argument ^a used in this field must have the character data type.)
	message	352,3,(The argument ^a used in this field must have the integer data type.)
	message	353,3,(The argument ^a used in this field must have the logical data type.)
	message	354,3,(^a is used in a character expression but does not have the character data type.)
	message	355,3+print_once_per_stmnt+save_opnd1,
		(The character valued function parameter ^a may not be declared to have *-length.)
	message	356,3,(An error has been detected in the processing of an inquire statement field.)
	message	357,4,(Compiler error: Invalid field number ^a encountered in inquire statement.)
	message	358,3,(The format item ^a cannot be a Very Large Array.)
	message	359,3,(The fld function has an argument, ^a, that must have an integer data type.)
	message	360,3,(The fld function has an argument, ^a, that must have a one word data type.)
	message	361,3,(The value assigned to the fld function must be a one word data type.)
	message	362,3,(^a has an invalid data type.  Typeless expressions can only be compared with typeless or integer values.)
	message	363,2,(The first argument to the fld function must be an integer value in the range 0 to 35.)
	message	364,2,(The second argument to the fld function must be an integer value in the range 1 to 36.)
	message	365,2,(Implementation restriction: only precision of *8 supported for complex types - variables will acquire single precision *8 instead of *^a.)
	message	366,2,(Implementation restriction: only precisions of *4 and *8 are supported for real types - variables will acquire ^a precision instead of *^a.)
	message	367,0,()
	message	368,0,()
	message	369,0,()
	message	370,0,()
	message	371,0,()
	message	372,0,()
	message	373,0,()
	message	374,0,()
	message	375,0,()
	message	376,0,()
	message	377,0,()
	message	378,0,()
	message	379,0,()
	message	380,3,(An undefined label has been found in this program.)
	message	381,4,(Compiler error: the output from the optimizer overwrites the next statement.)
	message	382,4,(Compiler error: ^a does not agree with ^a.)
	message	383,4,(Compiler error: The optimizer has encountered an unexpected operator with the op_code ^a.)
	message	384,1,(The code from LINE ^a to LINE ^a is unreachable or unnecessary.  It will not be compiled.)
	message	385,4,(Implementation restriction: optimization has terminated due to lack of available bits in the masks.)
	message	386,4,(Compiler error: Inconsistency found between an operator and the inputs chain of one of its inputs.)
	message	387,1,(This loop has been eliminated because, after optimization, it has no effect on the result of the program.)
	message	388,4,(Implementation restriction: flow_unit table overflow.  Simplify flow of control:  use do statements for looping.)
	message	389,1,(This loop has no exit.)
	message	390,4,(Implementation restriction: optimizer has created too many new operators.)
	message	391,4,(Compiler error: an expression unthreaded by strength reduction is input to other expressions.)
	message	392,0,()
	message	393,0,()
	message	394,0,()
	message	395,0,()
	message	396,0,()
	message	397,0,()
	message	398,0,()
	message	399,0,()
	message	400,2,(^a has been called with an inconsistent number of arguments.)
	message	401,2,(^a is inconsistent with the corresponding argument type used in ^a.)
	message	402,4,(Compiler error: an invalid index has been used with a ^a macro.)
	message	403,4,(Compiler error: a return macro without arguments has been used to return from a func.)
	message	404,4,(Compiler error: a return macro with an argument has been used to return from a proc.)
	message	405,4,(Compiler error: an exit macro has been used to return from a func.)
	message	406,4,(Compiler error: an exit macro has been used in a proc not invoked by scan.)
	message	407,4,(Compiler error: ^a overflows its maximum of ^a words.)
	message	408,4,(Compiler error: an s_return has been used when no matching s_call exists.)
	message 	409,4,(Compiler error: an ind_jump macro was used when the eaq was not in an indicator substate.)
	message	410,4,(Compiler error: an if_ind or unless_ind macro was used when the eaq was in an invalid state.)
	message	411,4,(Compiler error: an add_to_address macro was used with non-rel_constant ^a.)
	message	412,4,(Compiler error: an attempt was made to get the character length of the non-character operand ^a.)
	message	413,4,(Compiler error: there was an attempt to execute a nonexecutable macro.)
	message	414,4,(Implementation restriction: ^a has overflowed its limit of ^a words.)
	message	415,4,(Compiler error: the reference count of ^a has become less than 0.)
	message	416,4,(Compiler error: ^a has an invalid address field.)
	message	417,4,(Compiler error: ^a needs a pointer register for addressing, but is neither a parameter nor in common.)
	message	418,4,(Compiler error: no index or pointer registers are available for allocation.)
	message	419,4,(Compiler error: the offset of ^a cannot be found in storage.)
	message	420,4,(Compiler error: an attempt was made to update the eaq with ^a to the ind state.)
	message	421,4,(Compiler error: an attempt was made to load ^a into an invalid eaq state.)
	message	422,1,(The subscript ^a of ^a is out of range.)
	message	423,3,(The number of subscripts of ^a does not equal the number of its bounds.)
	message	424,4,(Compiler error: ^a not implemented.)
	message	425,4,(Compiler error: operand stack in improper state at end of subprogram.)
	message	426,1,
		     (The length for common block ^a has been increased to ^a ^a.)
	message	427,4,(Compiler error: the address of ^a has been lost.)
	message	428,3,(The entry point ^a has been multiply declared.)
	message	429,2,(Multics restriction: The common block name ^a contains a dollar-sign and cannot be initialized.)
	message	430,3,(Compiler error: the value of ^a should be in the index register, but it has been lost.)
	message	431,1+print_once_per_subpgm+save_opnd2,
		     (The subscript ^a of parameter ^a is out of range.)
	message	432,2+print_once+save_opnd1,
		     (The common block ^a is initialized more than once. The first initialization is used.)
	message	433,4,
		     (Implementation restriction: the product of ^a and ^a cannot be stored in the stack.)
	message	434,1+print_once+save_opnd1,
		     (Common block ^a is declared with more than one length.)
	message	435,4,
		     (Compiler error: ^a must be a temporary or an array ref.)
	message	436,4,
		     (Compiler error: obsolete macro ^a occurs in the text.)
	message	437,4,
		     (Compiler error: a var proc is invoked by a call macro.)
	message	438,4,
		     (Compiler error: proc arg count not equal to actual arg count. ^a ^a)
	message	439,4,
		     (Compiler error: eaq not loaded by load_for_test macro.)
	message	440,4,
		     (Compiler error: eaq not loaded correctly for ^a.)
	message	441,4,
		     (Compiler error: operand ^a in return macro is not a temporary node.)
	message	442,4,
		     (Compiler error: temporary already has an address.)
	message	443,1+print_once_per_stmnt+save_opnd2,
		     (Only the first ^a characters of ^a can be used.)
	message	444,4,(Compiler error: This statement cannot have a machine state associated with it.)
	message	445,4,(Compiler error: ^a has an invalid ^a field.)
	message	446,4,(Compiler error: ^a has an uninitialized address field.)
	message	447,4,(Compiler error:  an increment cannot be added to the address of ^a.)
	message	448,4,(Compiler error: Could not put operand into EAQ machine state.)
	message	449,4,(Compiler error: Both A and Q found already locked by eaq_man.)
	message	450,4,(Compiler error: An operand which should be in the eaq was not found by get_eaq_name.)
	message	451,1+print_once_per_subpgm,
		     (Implementation restriction: Global ^a table overflows. Optimization may be degraded.)
	message	452,4,
		     (Compiler error: data type ^a undefined for a call to create_constant.)
	message	453,4,(Compiler error: attempt to load global item in a reserved register.)
	message	454,4,(Compiler error: attempt to set up ^a while it has a non-positive reference count.)
	message	455,4,(Compiler error: an operator appears in the polish that should only appear in the quadruples.)
	message	456,3,(Compiler error: the reference count of ^a was left too high.)
	message	457,3,(The ^a appears in a substring reference to ^a, but falls outside the range of a legal character index.)
	message	458,3,(The ^a which appears as a subscript of ^a does not have a numerical data type.)
	message	459,3,(The ^a which appears in a substring reference to ^a does not have a numerical data type.)
	message	460,3,(A substring reference to ^a has a constant length which is less than 1.)
	message	461,3,(The ^a intrinsic function may not be used as an external function.)
	message	462,4,(Compiler error: No integer constant was present on the operand stack when the int_to_char1 macro was invoked.)
	message	463,4,(Compiler error: No character constant was present on the operand stack when the char1_to_int macro was invoked.)
	message	464,4,(Compiler error: The optimizing code generator encountered the ^a intrinsic function.)
	message	465,4,(Compiler error: The output of an operator called from a scan is not a temporary.)
	message	466,4,(Compiler error: An emit_eis macro with the equal_lengths flag was encountered in which the length of the second operand was nonzero.)
	message	467,4,(Compiler error: base_man_store_temp cannot find a usable pointer register.)
	message	468,2,(^a requires argument descriptors and may not be passed the assumed size array ^a.)
	message	469,2,(Implementation restriction: Cannot initialize /^a/ the definition section would overflow its limit of ^a words.)

	message	470,4,(Compiler error: ^a is not a valid operand for ^a.)
	message	471,0,()
	message	472,0,()
	message	473,0,()
	message	474,0,()
	message	475,0,()
	message	476,0,()
	message	477,0,()
	message	478,0,()
	message	479,0,()
	message	480,0,()
	message	481,0,()
	message	482,0,()
	message	483,0,()
	message	484,0,()
	message	485,0,()
	message	486,0,()
	message	487,0,()
	message	488,0,()
	message	489,0,()
	message	490,0,()
	message	491,0,()
	message	492,0,()
	message	493,0,()
	message	494,0,()
	message	495,0,()
	message	496,0,()
	message	497,0,()
	message	498,0,()
	message	499,0,()
	message	500,2,(Cannot get pointer to subsequent source segment.)
	message	501,2,(Number of symbols exceeds ^a. Symbol table will be processed in sections.)
	message	502,2,(Compiler Error: Unknown node ^a discovered in symbol table.)
	message	503,2,(The symbol ^a cannot be chained to others of the same name because the symbol table is too large.)
	message	504,0,()
	message	505,0,()
	message	506,0,()
	message	507,0,()
	message	508,0,()
	message	509,0,()
	message	510,0,()
	message	511,0,()
	message	512,0,()
	message	513,0,()
	message	514,0,()
	message	515,0,()
	message	516,0,()
	message	517,0,()
	message	518,0,()
	message	519,0,()
	message	520,0,()
	message	521,0,()
	message	522,4,(Compiler request to enter Hexadecimal Floating Point mode was denied.)
	message	523,4,(Compiler error: VLA ^a has been encountered which is neither auto, static, common, nor parameter.)
	message	524,3,(Development compiler error:  ^a)
	message	525,4,
		     (Compiler error: unknown error ^a.)

message_text:
	join	/text/.message_area.

	end
