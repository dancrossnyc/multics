/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


compile_gct: proc;

/* This routine will compile a graphic character table. */
/* Hacked out of compile_gdt on 01/19/78 by C. D. Tavares */

dcl  cu_$arg_ptr ext entry (fixed bin, pointer, fixed bin, fixed bin (35)),
     cu_$arg_count ext entry returns (fixed bin (35)),
     ap pointer,
     al fixed bin,
     arg based (ap) char (al),
     com_err_ ext entry options (variable),
     code fixed bin (35);

dcl  error_table_$translation_failed ext fixed bin (35),
     error_table_$inconsistent ext fixed bin (35),
     error_table_$badopt ext fixed bin (35);

dcl  expand_pathname_$add_suffix ext entry (char (*), char (*), char (*), char (*), fixed bin (35)),
     suffixed_name_$new_suffix ext entry (char (*), char (*), char (*), char (*), fixed bin (35)),
     get_wdir_ ext entry returns (char (168)),
     dirname char (168),
     ename char (33) initial (""),
     object_ename char (32);

dcl  tssi_$get_segment entry (char (*), char (*), pointer, pointer, fixed bin (35)),
     tssi_$finish_segment ext entry (pointer, fixed bin, bit (36) aligned, pointer, fixed bin (35)),
     tssi_$clean_up_segment ext entry (pointer),
     cleanup condition;

dcl  parse_file_$parse_file_init_name ext entry (char (*), char (*), pointer, fixed bin (35)),
     parse_file_$parse_file_cur_line ext entry (fixed bin, fixed bin),
     parse_file_$parse_file_unset_break ext entry (char (*));

dcl  acl_ptr pointer initial (null),
    (null, hbound, substr, length, before, collate, divide, max, index) builtin;

dcl  outdx fixed bin,
     segp pointer,
    (i, j, k) fixed bin,
     char_number fixed bin,
     char_name char (8) varying,
     found bit (1) aligned,
     vec_sw bit (1) aligned,
     metric_char char (1),
     metric_dimensions (3) fixed bin,
     margin (2) fixed bin,
     coords (2) fixed bin;

%include gct_char_names;

dcl (cur_x, cur_y) fixed bin;

dcl 1 invis_struc aligned,
    2 (min_x, max_x, min_y, max_y) fixed bin;

dcl 1 vis_struc like invis_struc aligned;

dcl (character_name, character_type, main_proc) char (32) aligned varying initial (""),
     token char (32) aligned varying,
     explanation char (80) varying aligned initial (""),
     default_flags char (168) aligned varying initial (""),
     temp_string char (400) varying;

dcl  title_string char (100) aligned varying initial
    (""" Created by:  compile_gct, Version of 17 February 1978.
") static options (constant),

     header_string char (200) aligned varying initial
    ("	name	^a^/
	segdef	char_ptr
	segdef	character_sizes^/
	use	char_structures^/
character_sizes:
^3(	dec	^d
^)") static options (constant),

     finishing_string char (40) static options (constant) varying initial ("
	include	gct_trap_proc

	end
");


dcl (SPACE initial (" "),
     TAB initial ("	"),
     UNDERSCORE initial ("_"),
     COLON initial (":"),
     CR initial (""),
     BS initial (""),
     NL initial ("
")) char (1) static options (constant);

dcl  sys_info$max_seg_size ext fixed bin (35),
     max_string_size fixed bin (21) initial (sys_info$max_seg_size * 4);

dcl 1 based_char_description aligned based (cp),
    2 next_p pointer,
    2 char_number fixed bin,
    2 header aligned,
      3 (n_elements,
     width,
     left_margin,
     right_margin) fixed bin (8) unaligned,
    2 word_align aligned,
      3 move_type bit (nelem refer (based_char_description.n_elements)) unaligned,
    2 coord_pairs (nelem refer (based_char_description.n_elements)) unaligned,
      3 (x,
     y) fixed bin (8) unaligned;

dcl (cp, tp, last_p, start_p) pointer;

dcl (gct_charbits, tempbits, desirable_chars) bit (128) aligned,
     special_bits bit (128) aligned internal static options (constant) initial
    ("000000001110010000000000000000001000000000000000000000000000000000000000000000000000000000000001"b);

dcl  movetype bit (144) aligned,
     nelem fixed bin,
    (x, y) fixed bin dimension (144);

dcl (ioa_$ioa_stream, ioa_$rsnp, ioa_, ioa_$rsnpnnl) ext entry options (variable),
     pf_ptr pointer initial (null),
     pf_string char (max_string_size) aligned based (pf_ptr);

dcl  delete_$path ext entry (char (*), char (*), bit (6), char (*), fixed bin (35)),
    (list_switch, no_assembly) bit (1) aligned,
     alm ext entry options (variable);



	start_p = null;

	call ioa_ ("COMPILE_GCT");			/* crow */
	call cu_$arg_ptr (1, ap, al, code);		/* get name of input file */
	if code ^= 0 then do;			/* not there */
	     call com_err_ (code, "compile_gct",	/* give advice */
		"Usage is 'compile_gct segname' where segname.gct is a graphic character table.");
returner:
	     call clean_up;				/* close out output file */
	     return;
	end;

	call expand_pathname_$add_suffix (arg, "gct", dirname, ename, code);
	if code ^= 0 then call error ((arg), ""b);	/* couldn't */

	list_switch, no_assembly = ""b;

	do i = 2 to cu_$arg_count ();
	     call cu_$arg_ptr (i, ap, al, code);
	     if substr (arg, 1, 1) ^= "-" then goto badopt;
	     if arg = "-check" | arg = "-ck" then no_assembly = "1"b;
	     else if arg = "-list" | arg = "-ls" then list_switch = "1"b;
	     else do;
badopt:		call com_err_ (error_table_$badopt, "compile_gct", "");
		goto returner;
	     end;
	end;

	if list_switch & no_assembly then do;
	     call com_err_ (error_table_$inconsistent, "compile_gct", "-check, -list");
	     goto returner;
	end;

	call suffixed_name_$new_suffix (ename, "gct", "alm", object_ename, code); /* make new name */
	if code ^= 0 then call error ((object_ename), ""b);

	on cleanup call clean_up;

	call parse_file_$parse_file_init_name (dirname, ename, pf_ptr, code); /* initiate parsing program */
	if code ^= 0 then call error ((ename), ""b);

	call tssi_$get_segment (get_wdir_ (), (object_ename), segp, acl_ptr, code); /* create output segment */
	if code ^= 0 then call error ((object_ename), ""b);

	call parse_file_$parse_file_unset_break ("_-.");	/* we want "_-." to be valid in a token */

	gct_charbits = special_bits;

	metric_char = "O";				/* good default */
	metric_dimensions (*) = -1;

	outdx = 1;				/* output string index */
	call get_token;

	if token = "metric" then do;
	     call get_token;
	     metric_char = token;

	     do char_number = 1 to hbound (gct_charnames, 1) while (gct_charnames (char_number) ^= token);
	     end;

	     if char_number > hbound (gct_charnames, 1) then call error ("Unrecognized character: " || token, "1"b);

	     call get_token;
	end;

	do while (token ^= " EOF ");

	     do char_number = 1 to hbound (gct_charnames, 1) while (gct_charnames (char_number) ^= token);
	     end;

	     if char_number > hbound (gct_charnames, 1) then call error ("Unrecognized character: " || token, "1"b);

	     if substr (gct_charbits, char_number, 1) then call error ("Character already defined: " || token, "1"b);

	     substr (gct_charbits, char_number, 1) = "1"b; /* mark character as defined */

	     call get_break (COLON, crump);

	     char_name = token;
	     margin = -1;
	     nelem = 0;
	     movetype = ""b;

	     call get_token;

	     cur_x, cur_y, vis_struc, invis_struc = 0;

	     do i = 1 by 1 while (token ^= "end");
		if token = "shift" then vec_sw = "0"b;
		else if token = "vector" then do;
		     substr (movetype, i, 1) = "1"b;
		     vec_sw = "1"b;
		     call maxmin (vis_struc);
		end;
		else call error ("Neither shift nor vector:  " || token, "1"b);
		coords = getvals ();
		cur_x = cur_x + coords (1);
		cur_y = cur_y + coords (2);
		call maxmin (invis_struc);
		if vec_sw then call maxmin (vis_struc);
		if substr (movetype, 1, i) = "0"b then do; /* shifts so far, nothing visible yet */
		     vis_struc.min_x, vis_struc.max_x = cur_x;
		     vis_struc.min_y, vis_struc.max_y = cur_y;
		end;
		nelem = nelem + 1;
		x (nelem) = coords (1);
		y (nelem) = coords (2);

		call get_token;
	     end;

maxmin:	     proc (struc);

dcl 1 struc like invis_struc aligned parameter;

		if cur_x < struc.min_x then struc.min_x = cur_x;
		if cur_x > struc.max_x then struc.max_x = cur_x;
		if cur_y < struc.min_y then struc.min_y = cur_y;
		if cur_y > struc.max_y then struc.max_y = cur_y;
		return;
	     end maxmin;

	     invis_struc.min_x = max (invis_struc.min_x, 0); /* fix boundary conditions for */
	     invis_struc.max_x = min (invis_struc.max_x, cur_x); /* chars with "negative margins" */

	     if char_name = metric_char then do;
		metric_dimensions (1) = vis_struc.max_y - vis_struc.min_y;
		metric_dimensions (2) = invis_struc.max_x - invis_struc.min_x;
		metric_dimensions (3) = invis_struc.min_x - vis_struc.min_x + vis_struc.max_x - invis_struc.max_x;
						/* this is the negative of the sum of the margins */
	     end;

	     if cur_x < 0 then call ioa_ ("WARNING: Character ""^a"" has net X offset of ^d.", char_name, cur_x);
	     if cur_y ^= 0 then call ioa_ ("WARNING: Character ""^a"" has net Y offset of ^d.", char_name, cur_y);

	     allocate based_char_description;
	     based_char_description.char_number = char_number;
	     based_char_description.width = invis_struc.max_x - invis_struc.min_x;
	     based_char_description.left_margin = vis_struc.min_x - invis_struc.min_x;
	     based_char_description.right_margin = invis_struc.max_x - vis_struc.max_x;
	     based_char_description.move_type = movetype;

	     do i = 1 to nelem;
		based_char_description.x (i) = x (i);
		based_char_description.y (i) = y (i);
	     end;

	     last_p = null;
	     found = ""b;

	     do tp = start_p repeat (tp -> based_char_description.next_p)
		     while (tp ^= null & ^found);
		if tp -> based_char_description.char_number < char_number then last_p = tp;
		else found = "1"b;
	     end;

	     if last_p = null then do;
		cp -> based_char_description.next_p = start_p;
		start_p = cp;
	     end;
	     else do;
		cp -> based_char_description.next_p = last_p -> based_char_description.next_p;
		last_p -> based_char_description.next_p = cp;
	     end;


	     call get_token;
	end;

	if metric_dimensions (1) = -1 then call error ("Metric character not found: " || metric_char, ""b);

	desirable_chars = ""b;
	substr (desirable_chars, 33, 126 - 33 + 1) = copy ("1"b, 128);
	tempbits = ^gct_charbits & desirable_chars;
	if tempbits then do;
	     temp_string = "";
	     do while (tempbits);
		i = index (tempbits, "1"b);
		if length (temp_string) ^= 0 then temp_string = temp_string || ", ";
		temp_string = temp_string || gct_charnames (i);
		substr (tempbits, i, 1) = "0"b;
	     end;

	     call ioa_ ("Warning:  Definitions were not found for the following characters:");
	     call ioa_ (temp_string);
	end;

	call put_out (title_string);

	call ioa_$rsnpnnl (header_string, temp_string, 0, before (ename, ".gct"), metric_dimensions (*));
	call put_out (temp_string);

	do cp = start_p repeat (cp -> based_char_description.next_p) while (cp ^= null);

	     call ioa_$rsnp ("^/^a:", temp_string, 0, gct_charnames (cp -> based_char_description.char_number));
	     call put_out (temp_string);

	     call ioa_$rsnp ("^-vfd^-9/^d,9/^d,9/^d,9/^d", temp_string, 0,
		cp -> based_char_description.n_elements,
		cp -> based_char_description.width,
		cp -> based_char_description.left_margin,
		cp -> based_char_description.right_margin);

	     call put_out (temp_string);

	     do i = 1 to cp -> based_char_description.n_elements by 36;
		call ioa_$rsnp ("^-oct^-^.3b", temp_string, 0, substr (cp -> based_char_description.move_type, i, 36));
		call put_out (temp_string);
	     end;

	     do i = 1 to cp -> based_char_description.n_elements by 2;
		j = i + 1;
		call ioa_$rsnpnnl ("^-vfd^-9/^d,9/^d", temp_string, 0,
		     cp -> based_char_description.x (i),
		     cp -> based_char_description.y (i));
		if j ^> cp -> based_char_description.n_elements then
		     call ioa_$rsnpnnl ("^a,9/^d,9/^d", temp_string, 0, (temp_string),
		     cp -> based_char_description.x (j),
		     cp -> based_char_description.y (j));

		k = max (divide (34 - length (temp_string), 10, 17, 0) + 1, 0);

		call ioa_$rsnpnnl ("^a^v-"" ^[vector^;shift ^] ^3d ^3d", temp_string, 0, (temp_string), k,
		     substr (cp -> based_char_description.move_type, i, 1),
		     cp -> based_char_description.x (i),
		     cp -> based_char_description.y (i));
		if j ^> cp -> based_char_description.n_elements then
		     call ioa_$rsnpnnl ("^a, ^[vector^;shift ^] ^3d ^3d", temp_string, 0, (temp_string),
		     substr (cp -> based_char_description.move_type, j, 1),
		     cp -> based_char_description.x (j),
		     cp -> based_char_description.y (j));

		temp_string = temp_string || NL;
		call put_out (temp_string);
	     end;

	     call put_out ((NL));
	end;

	do j = 0 to -1 by -1;
	     if j = 0 then tempbits = ^gct_charbits;
	     else tempbits = special_bits;

	     if tempbits then do;
		do while (tempbits);
		     i = index (tempbits, "1"b);
		     call ioa_$rsnp ("^a:^-null", temp_string, 0, gct_charnames (i));
		     call put_out (temp_string);
		     substr (tempbits, i, 1) = "0"b;
		end;

		call ioa_$rsnp ("^-vfd^-9/^d,9/0,9/0,9/0^/", temp_string, 0, j);
		call put_out (temp_string);
	     end;
	end;

	call put_out (finishing_string);

	call tssi_$finish_segment (segp, outdx * 9 - 9, "1011"b, acl_ptr, code); /* shine it up */
	acl_ptr = null;
	revert cleanup;
	if code ^= 0 then call error ((ename), ""b);	/* too bad. after all that. */

	if no_assembly then goto returner;

	if list_switch then call alm (object_ename, "-list");
	else call alm (object_ename);

	call delete_$path (get_wdir_ (), object_ename, "100111"b, "compile_gct", code);
	if code ^= 0 then call error ("Cannot delete " || object_ename, ""b);

	call clean_up;
	return;

crump:						/* here is where errors go */
	call error (explanation, "1"b);		/* confess */


clean_up:	proc;

	     if acl_ptr ^= null then call tssi_$clean_up_segment (acl_ptr);

	     do cp = start_p repeat (tp) while (cp ^= null);
		tp = cp -> based_char_description.next_p;
		free cp -> based_char_description;
	     end;

	end;


error:	proc (explanation, print_line);		/* the snitcher */

dcl  explanation char (*) varying aligned parameter,
     print_line bit (1) aligned parameter;

dcl (ci, cc) fixed bin;

	     call com_err_ (code, "compile_gct", explanation); /* report the error */

	     if print_line then do;			/* print out the source line of input file */
		call parse_file_$parse_file_cur_line (ci, cc);
		call ioa_$ioa_stream ("error_output", "^-SOURCE: ^a", substr (pf_string, ci, cc));
	     end;
	     call com_err_ (error_table_$translation_failed, "compile_gct", ""); /* one chance is all we give */
	     goto returner;
	end;


get_token: proc;					/* gets tokens from input file */

dcl  parse_file_$parse_file_ptr ext entry (pointer, fixed bin, fixed bin, fixed bin),
     tokenp pointer,
     b_token char (count) based (tokenp),
     count fixed bin,
     break fixed bin,
     eof fixed bin;

loop:
	     call parse_file_$parse_file_ptr (tokenp, count, break, eof); /* get a token */

	     if eof > 0 then token = " EOF ";

	     else do;
		token = b_token;
		if break > 0 then if token = SPACE then goto loop; /* harmless */
		     else if token = TAB then goto loop; /* harmless */
		     else if token = NL then goto loop; /* harmless */
		     else call error ("Illegal character " || token || " encountered", "1"b); /* yell */
	     end;

	     return;

get_break:     entry (char, errlab);			/* gets break tokens, goes to errlab if fails */

dcl  char char (1),
     errlab label;

bloop:
	     call parse_file_$parse_file_ptr (tokenp, count, break, eof); /* get a token */

	     if eof > 0 then call error ("Unexpected end of file encountered", ""b); /* oops */

	     if break > 0 then if b_token = SPACE then goto bloop; /* harmless */
		else if b_token = TAB then goto bloop;	/* harmless */
		else if b_token = NL then goto bloop;	/* harmless */
		else if b_token = char then return;	/* it's the one we wanted */
		else do;				/* it's not */
bad_break:
		     explanation = "Illegal token " || b_token || " found instead of expected token " || char;
		     goto errlab;			/* we don't call error, because */
						/* it may not be an error condition. */
		end;

	     else goto bad_break;			/* wasn't a break token */
	     return;


	end get_token;

getvals:	proc returns (fixed bin dimension (2));

dcl  temp (2) fixed bin,
     i fixed bin,
     cv_dec_check_ ext entry (char (*), fixed bin (35)) returns (fixed bin);

	     do i = 1 to 2;
		call get_token;
		temp (i) = cv_dec_check_ ((token), code);
		if code ^= 0 then call error ("Non numeric token in numeric position:  " || token, "1"b);
	     end;

	     return (temp);
	end getvals;

put_out:	proc (string);				/* writes string into output file */

dcl  string char (*) varying;

dcl  outstring char (65536) based (segp);

	     substr (outstring, outdx, length (string)) = string; /* copy into output file */
	     outdx = outdx + length (string);

	     return;
	end;

     end compile_gct;
