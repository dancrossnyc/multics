/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


compile_gdt: cg: proc;

/* This routine will compile a graphic device table. */
/* Written June 30, 1973 by C. D. Tavares */
/* Last modified 03/26/75 by CDT to add open and close keywords */

dcl  cu_$arg_ptr ext entry (fixed bin, pointer, fixed bin, fixed bin),
     cu_$arg_count ext entry returns (fixed bin),
     ap pointer,
     al fixed bin,
     arg based (ap) char (al),
     com_err_ ext entry options (variable),
     code fixed bin;

dcl  error_table_$translation_failed ext fixed bin (35),
     error_table_$inconsistent ext fixed bin (35),
     error_table_$badopt ext fixed bin (35);

dcl  expand_path_ ext entry (pointer, fixed bin, pointer, pointer, fixed bin),
     suffixed_name_$make ext entry (char (*), char (*), char (*), fixed bin),
     suffixed_name_$new_suffix ext entry (char (*), char (*), char (*), char (*), fixed bin),
     get_wdir_ ext entry returns (char (168)),
     dirname char (168),
     ename char (33) initial (""),
     object_ename char (32);

dcl  tssi_$get_segment entry (char (*), char (*), pointer, pointer, fixed bin),
     tssi_$finish_segment ext entry (pointer, fixed bin, bit (36) aligned, pointer, fixed bin),
     tssi_$clean_up_segment ext entry (pointer),
     cleanup condition;

dcl  parse_file_$parse_file_init_name ext entry (char (*), char (*), pointer, fixed bin),
     parse_file_$parse_file_cur_line ext entry (fixed bin, fixed bin),
     parse_file_$parse_file_unset_break ext entry (char (*));

dcl  acl_ptr pointer initial (null),
    (null, hbound, substr, length) builtin;

dcl  outdx fixed bin,
     segp pointer,
    (i, j) fixed bin,
     semicolon char (1) static options (constant) initial (";"),
     colon char (1) static options (constant) initial (":"),
     comma char (1) static options (constant) initial (",");

%include graphic_device_table;

dcl  keywords (32 : 70) static options (constant) char (12) initial
    ("not used",
     "not used",
     "not used",
     "not used",
     "pause",
     "reference",
     "increment",
     "alter",
     "node_begin",
     "node_end",
     "control",
     "display",
     "query",
     "erase",
     "synchronize",
     "delete",
     "setposition",
     "setpoint",
     "vector",
     "shift",
     "point",
     "scaling",
     "rotation",
     "clipping",
     "intensity",
     "line_type",
     "blinking",
     "sensitivity",
     "color",
     "symbol",
     "text",
     "data",
     "input",
     "graphic_mode",
     "text_mode",
     "expansion",
     "open",
     "close",
     "modes");

dcl  major_keywords (7) char (17) static options (constant) initial
    ("Name",
     "Type",
     "Default",
     "Procedure",
     "Character_size",
     "Message_size",
     "Points_per_inch");

dcl  values (6) char (12) static options (constant) initial
    ("pass",
     "expand",
     "call",
     "ignore",
     "error",
     "flush");

dcl (device_name, device_type, main_proc) char (32) aligned varying initial (""),
     token char (32) aligned varying,
     explanation char (80) varying aligned initial (""),
     default_flags char (168) aligned varying initial (""),
     temp_string char (400) varying;

dcl  title_string char (100) aligned varying initial
    (""" Created by:  compile_gdt, Version of 22 December 1977.
") static options (constant),

     header_string char (200) aligned varying initial
    ("
	name	^a_table

	segdef	table_start

table_start:
	dec	^d		""version number
	aci	""^32a""
	aci	""^a""
	dec	^e,^e,^e	""character parameters
	dec	^d		""message size
	dec	^a		""points per inch
	bss	.pad,^d
") static options (constant),

     flag_string char (40) varying aligned static options (constant) initial
    ("	arg	^32a "" ^a"),

     transfer_header char (100) static options (constant) varying aligned initial
    ("
	entry	gdt_proc

gdt_proc:
	ldq	ap|2,*
	sbq	31,dl
	tra	*,ql
"),

     transfer_string char (40) static options (constant) varying aligned initial
    ("	tra	<^30a	""^a"),
     finishing_string char (8) static options (constant) varying initial ("
	end
"),

     NL char (1) static options (constant) initial ("
");

dcl  charsizes float bin dimension (3) initial ((3) -1),
     sys_info$max_seg_size ext fixed bin (35),
     max_string_size fixed bin (21) initial (sys_info$max_seg_size * 4),
     message_size fixed bin (21) initial (sys_info$max_seg_size * 4),
     points_per_inch float bin (63) initial (-1e0),
     ppi_string char (32);

dcl 1 effector_table (32 : hbound (keywords, 1)) aligned,
    2 flags char (168) aligned varying,
    2 proc_name char (32) aligned varying,
    2 entry_name char (32) aligned varying;

dcl (ioa_$ioa_stream, ioa_$rs, ioa_, ioa_$rsnnl) ext entry options (variable),
     pf_ptr pointer initial (null),
     pf_string char (max_string_size) aligned based (pf_ptr);

dcl  delete_$path ext entry (char (*), char (*), bit (6), char (*), fixed bin),
    (list_switch, no_assembly) bit (1) aligned,
     bitstring bit (36) aligned,
     alm ext entry options (variable);

dcl  conversion condition,
    (binary, float) builtin;



	call ioa_ ("COMPILE_GDT");			/* crow */
	call cu_$arg_ptr (1, ap, al, code);		/* get name of input file */
	if code ^= 0 then do;			/* not there */
	     call com_err_ (code, "compile_gdt",	/* give advice */
		"Usage is 'compile_gdt segname' where segname.gdt is a graphic device table.");
returner:
	     call clean_up;				/* close out output file */
	     return;
	end;

	call expand_path_ (ap, al, addr (dirname), addr (ename), code); /* get full pathname of input file */
	if code ^= 0 then call error ((arg), ""b);	/* couldn't */

	call suffixed_name_$make ((ename), "gdt", ename, code);
	if code ^= 0 then call error ((ename), ""b);

	list_switch, no_assembly = ""b;

	do i = 2 to cu_$arg_count ();
	     call cu_$arg_ptr (i, ap, al, code);
	     if substr (arg, 1, 1) ^= "-" then goto badopt;
	     if arg = "-check" | arg = "-ck" then no_assembly = "1"b;
	     else if arg = "-list" | arg = "-ls" then list_switch = "1"b;
	     else do;
badopt:		call com_err_ (error_table_$badopt, "compile_gdt", "");
		goto returner;
	     end;
	end;

	if list_switch & no_assembly then do;
	     call com_err_ (error_table_$inconsistent, "compile_gdt", "-check, -list");
	     goto returner;
	end;

	call suffixed_name_$new_suffix (ename, "gdt", "alm", object_ename, code); /* make new name */
	if code ^= 0 then call error ((object_ename), ""b);

	on cleanup call clean_up;

	call parse_file_$parse_file_init_name (dirname, ename, pf_ptr, code); /* initiate parsing program */
	if code ^= 0 then call error ((ename), ""b);

	call tssi_$get_segment (get_wdir_ (), (object_ename), segp, acl_ptr, code); /* create output segment */
	if code ^= 0 then call error ((object_ename), ""b);

	call parse_file_$parse_file_unset_break ("_.");	/* we want "_." to be valid in a token */

	outdx = 1;				/* output string index */
	do while ("1"b);				/* "forever" until we encounter non-major keywords */

	     call get_token;			/* get a keyword */

	     do i = 1 to hbound (major_keywords, 1) while (major_keywords (i) ^= token); /* look it up */
	     end;

	     if i > hbound (major_keywords, 1) then goto end_major_keywords; /* not a major keyword, assume minor keyword */

	     call get_break (colon, crump);

	     goto major_label (i);			/* process individually */

major_label (1):					/* Name */
	     if length (device_name) ^= 0 then call error ("Multiple 'Name' statements encountered.", "1"b);

	     call get_token;			/* get the device name */

	     device_name = token;
	     call get_break (semicolon, crump);		/* get expected semicolon */

	     goto major_loop_end;

major_label (2):					/* Type */

	     if length (device_type) ^= 0 then call error ("Multiple 'Type' statements encountered.", "1"b);

	     call get_token;			/* get device type */

	     device_type = token;
	     call get_break (semicolon, crump);

	     goto major_loop_end;

major_label (3):					/* Default */
	     if default_flags ^= "" then call error ("Multiple 'Default' statements encountered.", "1"b);

more_defaults:
	     call get_token;			/* get a default */

	     do i = 1 to hbound (values, 1) while (values (i) ^= token); /* find it */
	     end;

	     if i > hbound (values, 1) then call error ("Unrecognized default '" || token || "'.", "1"b);

	     if token = "call" then call error ("The 'call' keyword is not allowed as a default.", "1"b);
						/* No real reason, if it is useful, we may take */
						/* this restriction out. */

	     if length (default_flags) > 0 then default_flags = default_flags || "+";
	     default_flags = default_flags || token;

	     call get_break (semicolon, more_defaults);	/* if next break not semi, assume it is comma. */
	     goto major_loop_end;

major_label (4):
	     if length (main_proc) > 0 then call error ("Multiple 'Procedure' statements encountered.", "1"b);

	     call get_token;
	     main_proc = token;			/* get procedure name */

	     call get_break (semicolon, crump);
	     goto major_loop_end;

major_label (5):
	     if charsizes (1) ^= -1 then call error ("Multiple 'Character_size' statements encountered.", "1"b);

	     on conversion call error ("Non-numeric character in Character_size specification.", "1"b);

	     do i = 1 to 3;
		call get_token;
		charsizes (i) = float (token);
		if i = 3 then call get_break (semicolon, crump);
		else call get_break (comma, crump);
	     end;

	     revert conversion;
	     goto major_loop_end;

major_label (6):
	     if message_size ^= sys_info$max_seg_size * 4
	     then call error ("Multiple 'Message_size' statements encountered.", "1"b);

	     on conversion call error ("Non-numeric character in message size specification.", "1"b);

	     call get_token;
	     message_size = binary (token);

	     call get_break (semicolon, crump);

	     revert conversion;
	     goto major_loop_end;

major_label (7):					/* points per inch */
	     if points_per_inch ^= -1 then call error ("Multiple 'Points_per_inch' statements encountered.", "1"b);

	     on conversion call error ("Non-numeric character in Points_per_inch statement.", "1"b);

	     call get_token;
	     points_per_inch = float (token);

	     call get_break (semicolon, crump);

	     revert conversion;
	     goto major_loop_end;

major_loop_end:
	end;

end_major_keywords:
	if length (device_name) = 0 then call error ("Graphic device table contains no 'Name' statement.", ""b);

	if length (device_type) = 0 then call error ("Graphic device table contains no 'Type' statement.", ""b);

	if length (main_proc) = 0 then main_proc = device_name || "_util_"; /* again no real reason -- */
						/* a really intelligent graphics processor needs no */
						/* supporting procedure! */

	if charsizes (1) = -1 then call ioa_ ("Warning:  no 'Character_size' statement encountered.");
	if points_per_inch = -1 then call ioa_ ("Warning:  no 'Points_per_inch' statement encountered.");

/* Begin to create source segment for ALM assembler. */

	call put_out ((title_string), length (title_string));

	call ioa_$rsnnl ("^e", ppi_string, 0, points_per_inch);
	ppi_string = translate (ppi_string, "d", "e");	/* make exponent signify "double precision" */

	call ioa_$rs (header_string, temp_string, i, device_name, gdt_version_2,
	     device_name, substr (device_type, 1, 4), charsizes (1), charsizes (2), charsizes (3),
	     message_size, ppi_string, hbound (null -> graphic_device_table.pad, 1));
						/* if I don't put null there, compiler says */
						/* gdt_pointer referenced & unset! */
						/* output happy header */
	call put_out (temp_string, i);

	do i = 1 to hbound (values, 1);
	     bitstring = ""b;
	     if i > 1 then substr (bitstring, 17+i, 1) = "1"b;
	     j = binary (bitstring, 35);
	     call ioa_$rs ("^w", temp_string, 0, j);
	     call ioa_$rs ("	bool	^a,^a", temp_string, j, values (i), substr (temp_string, 7, 6));
	     call put_out (temp_string, j);
	end;

	call put_out ((NL), 1);

	effector_table (*).flags = default_flags;	/* set up defaults for all effectors */
	effector_table (*).proc_name = "graphic_dim_";	/* default is error */
	effector_table (*).entry_name = "no_entry";	/* error entry */

	do while ("1"b);				/* again "forever" until we see "end" */

	     if token = "end" then do;		/* finish up parse */
		call get_break (semicolon, crump);	/* a parting check on the poor user */
		goto output_info;
	     end;

	     do i = 32 to hbound (keywords, 1) while (keywords (i) ^= token); /* find the token */
	     end;

	     if i > hbound (keywords, 1) then call error ("Unrecognized keyword '" || token || "'.", "1"b);

	     call get_break (colon, crump);

	     effector_table (i).flags = "";		/* erase defaults, use only ones specified */
more_values:
	     call get_token;			/* get an action for this effector */

	     do j = 1 to hbound (values, 1) while (values (j) ^= token); /* look it up */
	     end;

	     if j > hbound (values, 1) then call error ("Unrecognized value '" || token || "'.", "1"b);

	     if length (effector_table (i).flags) > 0 then
		effector_table (i).flags = effector_table (i).flags || "+";
	     effector_table.flags (i) = effector_table.flags (i) || token;

	     if token = "call" then do;		/* one more token expected before comma or semi */
		call get_token;
		effector_table (i).proc_name = main_proc; /* construct auxiliary procedure name */
		effector_table (i).entry_name = token;
	     end;

	     call get_break (semicolon, more_values);	/* if not semi, assume comma */
	     call get_token;			/* prepare for next looparound */

	end;

output_info:
	do i = 32 to hbound (keywords, 1);		/* output all effectors in ALM */
	     if length (effector_table (i).flags) = 0 then effector_table (i).flags = values (1);
	     call ioa_$rs (flag_string, temp_string, j, effector_table (i).flags, keywords (i));
						/* format one flag indicator block */
	     call put_out (temp_string, j);		/* put it out */
	end;

	call ioa_$rs (transfer_header, temp_string, j);
	call put_out (temp_string, j);

	do i = 32 to hbound (keywords, 1);
	     call ioa_$rs (transfer_string, temp_string, j,
		effector_table (i).proc_name || ">|[" || effector_table (i).entry_name || "]", keywords (i));
						/* format one instruction in transfer vector */
	     call put_out (temp_string, j);
	end;

	call put_out (finishing_string, length (finishing_string)); /* cap it off */

	call tssi_$finish_segment (segp, outdx * 9 - 9, "1011"b, acl_ptr, code); /* shine it up */
	revert cleanup;
	if code ^= 0 then call error ((ename), ""b);	/* too bad. after all that. */

	if no_assembly then return;

	if list_switch then call alm (object_ename, "-list");
	else call alm (object_ename);

	call delete_$path (get_wdir_ (), object_ename, "100111"b, "compile_gdt", code);
	if code ^= 0 then call error ("Cannot delete " || object_ename, ""b);

	return;

crump:						/* here is where errors go */
	call error (explanation, "1"b);		/* confess */


clean_up:	proc;

	     if acl_ptr ^= null then call tssi_$clean_up_segment (acl_ptr);

	end;


error:	proc (explanation, print_line);		/* the snitcher */

dcl  explanation char (*) varying aligned parameter,
     print_line bit (1) aligned parameter;

dcl (ci, cc) fixed bin;

	     call com_err_ (code, "compile_gdt", explanation); /* report the error */

	     if print_line then do;			/* print out the source line of input file */
		call parse_file_$parse_file_cur_line (ci, cc);
		call ioa_$ioa_stream ("error_output", "^-SOURCE:  ^a", substr (pf_string, ci, cc));
	     end;
	     call com_err_ (error_table_$translation_failed, "compile_gdt", ""); /* one chance is all we give */
	     goto returner;
	end;


get_token: proc;					/* gets tokens from input file */

dcl  parse_file_$parse_file_ptr ext entry (pointer, fixed bin, fixed bin, fixed bin),
     tokenp pointer,
     b_token char (count) based (tokenp),
     count fixed bin,
     break fixed bin,
     eof fixed bin;

dcl (space initial (" "),
     tab initial ("	"),
     nl initial ("
")) char (1) aligned static options (constant);

loop:
	     call parse_file_$parse_file_ptr (tokenp, count, break, eof); /* get a token */

	     token = b_token;

	     if eof > 0 then call error ("Unexpected end of file encountered", ""b); /* oops */

	     if break > 0 then if token = space then goto loop; /* harmless */
		else if token = tab then goto loop;	/* harmless */
		else if token = nl then goto loop;	/* harmless */
		else call error ("Illegal character " || token || " encountered", "1"b); /* yell */

	     return;

get_break:     entry (char, errlab);			/* gets break tokens, goes to errlab if fails */

dcl  char char (1),
     errlab label;

bloop:
	     call parse_file_$parse_file_ptr (tokenp, count, break, eof); /* get a token */

	     if eof > 0 then call error ("Unexpected end of file encountered", ""b); /* oops */

	     if break > 0 then if b_token = space then goto bloop; /* harmless */
		else if b_token = tab then goto bloop;	/* harmless */
		else if b_token = nl then goto bloop;	/* harmless */
		else if b_token = char then return;	/* it's the one we wanted */
		else do;				/* it's not */
bad_break:
		     explanation = "Illegal token " || b_token || " found instead of expected token " || char;
		     goto errlab;			/* we don't call error, because */
						/* it may not be an error condition. */
		end;

	     else goto bad_break;			/* wasn't a break token */

	end;

put_out:	proc (string, string_len);			/* writes string into output file */

dcl  string char (*) varying,
     string_len fixed bin;

dcl  outstring char (65536) based (segp);

	     substr (outstring, outdx, string_len) = string; /* copy into output file */
	     outdx = outdx + string_len;

	     return;
	end;

     end;
