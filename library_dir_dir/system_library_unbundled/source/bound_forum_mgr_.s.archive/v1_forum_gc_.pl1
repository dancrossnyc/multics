/* ***************************************************************
   *                                                             *
   * Copyright (c) 1982 by Massachusetts Institute of Technology *
   *                                                             *
   *************************************************************** */


v1_forum_gc_$expunge:
     proc  (P_forum_idx, P_switches_word, P_participants_deleted, P_trans_deleted, P_participants_damaged, 
	P_trans_damaged, P_status);

/* Garbage collector for forum meetings
   6/23/82 Jay Pattin */

declare	(P_forum_idx, P_participants_deleted, P_trans_deleted, P_participants_damaged, P_trans_damaged)
				fixed bin parameter,
	P_switches_word		bit (36) aligned,
	P_status			fixed bin (35) parameter;

declare	attendee_count		fixed bin,
	current_loc		fixed bin (19),
	deleted_count		fixed bin,
	forum_idx			fixed bin,
	idx			fixed bin,
	inner_ring		fixed bin (3),
	new_control_ptr		ptr,
	new_proc_len		fixed bin (19),
	new_proc_ptr		ptr,
	new_trans_ptr		ptr,
	project			char (9),
	trans_deleted		fixed bin,
	users_deleted		fixed bin,
	users_damaged		fixed bin,
	trans_damaged		fixed bin,
	old_trans_ptr		ptr,
	seg_len			fixed bin (21),
	seg			(seg_len) fixed bin based,
	status			fixed bin (35),
	trans_len			fixed bin (21),
	trans			char (trans_len) based,
	user_name			char (22),
	user_ring			fixed bin (3);

declare	1 new_control		aligned like forum_control based (new_control_ptr),
	1 damaged_transaction	aligned like one_transaction;

declare	1 switches		based (addr (P_switches_word)),
	2 transactions		bit (1) unaligned,
	2 users			bit (1) unaligned;

declare	(any_other, cleanup, out_of_bounds)
				condition,
	(addr, clock, collate, currentsize, min, null, ptr, string, substr, unspec, verify)
				builtin;

declare	me			char (12) static options (constant) init ("v1_forum_gc_");

declare	(error_table_$out_of_bounds,
	forum_error_table_$chairman_only,
	forum_error_table_$unexpected_fault)
				fixed bin (35) external;

declare	v1_forum_mgr_$get_ptrs		entry (fixed bin, ptr, ptr, fixed bin, bit (1) aligned, fixed bin (35)),
	v1_forum_mgr_$unlock		entry (ptr),
	get_lock_id_		entry returns (bit (36) aligned),
	get_ring_			entry returns (fixed bin (3)),
	get_temp_segment_		entry (char (*), ptr, fixed bin (35)),
	hcs_$level_get		entry returns (fixed bin (3)),
	hcs_$level_set		entry (fixed bin (3)),
	hcs_$truncate_seg		entry (ptr, fixed bin (19), fixed bin (35)),
	release_temp_segment_	entry (char (*), ptr, fixed bin (35)),
	user_info_$whoami		entry (char(*), char(*), char(*));
%page;
%include v1_forum_structures;
%page;
	forum_idx = P_forum_idx;
	trans_deleted, users_deleted, trans_damaged, users_damaged = 0;
	attendee_count, deleted_count, current_loc, new_proc_len = 0;
	status = 0;
	forum_control_ptr, new_proc_ptr, new_control_ptr = null ();
	inner_ring = get_ring_ ();
	user_ring = hcs_$level_get ();
	
	on any_other call error (forum_error_table_$unexpected_fault);
	on out_of_bounds call error (error_table_$out_of_bounds);
	on cleanup begin;
	     call v1_forum_mgr_$unlock (forum_control_ptr);
	     call release_temp_segment_ (me, new_control_ptr, (0));
	     call release_temp_segment_ (me, new_proc_ptr, (0));
	     call hcs_$level_set (user_ring);
	end;

	call v1_forum_mgr_$get_ptrs (forum_idx, forum_control_ptr, proceedings_ptr, (0), ("0"b), status);
	if status ^= 0 then call error (status);

	call user_info_$whoami (user_name, project, "");
	if forum_control.chairman.person_id ^= user_name then call error (forum_error_table_$chairman_only);

	call hcs_$level_set (inner_ring);

	call get_temp_segment_ (me, new_control_ptr, status);
	if status ^= 0 then call error (status);

	call get_temp_segment_ (me, new_proc_ptr, status);
	if status ^= 0 then call error (status);

	/* First build the control header */

	new_control.forum_lock = get_lock_id_ ();	/* just to be safe */
	new_control.no_deleted, new_control.no_attendees, new_control.next_trans_loc = 0;    /* yet to be determined */
	new_control.flags = forum_control.flags;
	string (new_control.flags.mbz0) = ""b;
	string (new_control.flags.mbz1) = ""b;
	new_control.no_transactions = forum_control.no_transactions;     /* this won't change */
	new_control.mbz2 = ""b;
	new_control.chairman = forum_control.chairman;

	if forum_control.msg_init then do;		/* put cmsg at front of proceedings */
	     new_control.message_loc = 0;
	     new_proc_len = 64;
	     trans_len = 256;
	     old_trans_ptr = ptr (proceedings_ptr, forum_control.message_loc);
	     new_proc_ptr -> trans = old_trans_ptr -> trans;
	end;
%page;	
	/* now let's gc the participants */

	do idx = 1 to forum_control.no_attendees;
	     if damaged_user (idx) then users_damaged = users_damaged + 1;
	     else if ^switches.users | ^forum_control.attendee (idx).deleted then do;
		attendee_count = attendee_count + 1;
		unspec (new_control.attendee (attendee_count)) = unspec (forum_control.attendee (idx));
		new_control.attendee (attendee_count).unused_flags = "0"b;

		if forum_control.attendee (idx).highest_trans_seen < 0 then
		     new_control.attendee (attendee_count).highest_trans_seen = forum_control.no_transactions;
		else new_control.attendee (attendee_count).highest_trans_seen =
		     min (forum_control.attendee (idx).highest_trans_seen, forum_control.no_transactions);
	     end;
	     else users_deleted = users_deleted + 1;
	end;
	
	new_control.no_attendees = attendee_count;


	/* and now the proceedings */

	unspec (damaged_transaction) = ""b;
	damaged_transaction.gone, damaged_transaction.deleted = "1"b;

	do idx = 1 to forum_control.no_transactions;
	     if unspec (forum_control.transactions (idx)) = unspec (damaged_transaction) then
		 unspec (new_control.transactions (idx)) = unspec (damaged_transaction);
	     else if damaged (idx) then do;
		trans_damaged = trans_damaged + 1;
		unspec (new_control.transactions (idx)) = ""b;
		new_control.transactions (idx).gone, new_control.transactions (idx).deleted = "1"b;
	     end;
	     else do;
		unspec (new_control.transactions (idx)) = unspec (forum_control.transactions (idx));
		if switches.transactions & forum_control.transactions (idx).deleted then do;
		     deleted_count = deleted_count + 1;
		     if ^forum_control.transactions (idx).gone then do;
			trans_deleted = trans_deleted + 1;
			if forum_control.transactions (idx).prior_ref_index > 0 then
			     new_control.transactions (forum_control.transactions (idx).prior_ref_index).next_ref_index =
				forum_control.transactions (idx).next_ref_index;
			if forum_control.transactions (idx).next_ref_index > 0 then
			     forum_control.transactions (forum_control.transactions (idx).next_ref_index).prior_ref_index =
				forum_control.transactions (idx).prior_ref_index;
		     end;
		     new_control.transactions (idx).gone = "1"b;
		     new_control.transactions (idx).offset, new_control.transactions (idx).length = 0;
		end;
		else do;
		     new_control.transactions (idx).offset = new_proc_len;
		     trans_len = forum_control.transactions (idx).length;
		     new_trans_ptr = ptr (new_proc_ptr, new_proc_len);
		     current_loc = forum_control.transactions (idx).offset;
		     old_trans_ptr = ptr (proceedings_ptr, current_loc);
		     
		     new_trans_ptr -> trans = old_trans_ptr -> trans;
		     new_proc_len = new_proc_len + (trans_len + 3)/4;
		end;
	     end;
	end;

	new_control.no_deleted = deleted_count;
	new_control.next_trans_loc = new_proc_len;

	/* COPY THE MEETING BACK HERE */

	seg_len = currentsize (new_control);
	forum_control_ptr -> seg = new_control_ptr -> seg;
	seg_len = new_proc_len;
	proceedings_ptr -> seg = new_proc_ptr -> seg;
%page;
	/* Now truncate proceedings segment and clean up */

	call hcs_$truncate_seg (proceedings_ptr, new_proc_len, status);
	if status ^= 0 then call error (status);

	call v1_forum_mgr_$unlock (forum_control_ptr);

	call release_temp_segment_ (me, new_proc_ptr, status);
	if status ^= 0 then call error (status);

	call release_temp_segment_ (me, new_control_ptr, status);
	if status ^= 0 then call error (status);

	call hcs_$level_set (user_ring);

	P_participants_deleted = users_deleted;
	P_trans_deleted = trans_deleted;
	P_participants_damaged = users_damaged;
	P_trans_damaged = trans_damaged;
	P_status = 0;
	return;

	
PUNT:	P_status = status;
	call hcs_$level_set (user_ring);
	P_participants_deleted, P_trans_deleted, P_participants_damaged, P_trans_damaged = 0;
	return;
%page;
damaged_user:
     proc (idx) returns (bit (1) aligned);

declare	idx			fixed bin;

	if verify (forum_control.attendee (idx).project_id, substr (collate (), 9)) ^= 0 then return ("1"b);

	if verify (forum_control.attendee (idx).project_id, substr (collate (), 9)) ^= 0 then return ("1"b);

	if forum_control.attendee (idx).project_id = "" | forum_control.attendee (idx).person_id = "" then
	     return ("1"b);

	return ("0"b);
     end damaged_user;


/* Check to see if a transaction looks like a transaction */

damaged:
     proc (idx) returns (bit (1) aligned);

declare	idx			fixed bin;

	if verify (forum_control.transactions (idx).person_id, substr (collate (), 9)) ^= 0 then return ("1"b);

	if verify (forum_control.transactions (idx).project_id, substr (collate (), 9)) ^= 0 then return ("1"b);

	if forum_control.transactions (idx).prior_ref_index < 0 |
	     forum_control.transactions (idx).prior_ref_index >= idx then return ("1"b);

	if (forum_control.transactions (idx).next_ref_index <= idx & forum_control.transactions (idx).next_ref_index > 0) |
	     forum_control.transactions (idx).next_ref_index > forum_control.no_transactions then return ("1"b);
	
	if forum_control.transactions (idx).offset >= 1044480 then return ("1"b);
	if forum_control.transactions (idx).offset < current_loc &
	     ^(forum_control.transactions (idx).offset = 0 & forum_control.transactions (idx).gone) then return ("1"b);
	if forum_control.transactions (idx).length >= 1044480 then return ("1"b);

	if forum_control.transactions (idx).time > clock () then return ("1"b);
	return ("0"b);
     end damaged;


error:
     proc (P_status);
     
declare	P_status			fixed bin (35);

          call v1_forum_mgr_$unlock (forum_control_ptr);
	status = P_status;
	goto PUNT;
     end error;

end v1_forum_gc_$expunge;
