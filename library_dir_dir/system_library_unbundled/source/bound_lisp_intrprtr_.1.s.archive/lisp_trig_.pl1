/* **************************************************************
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1973 *
   *                                                            *
   ************************************************************** */
lisp_trig_:  procedure;		/* miscellaneous trig and arith functions for lisp. 25 Jan 73, dam */


dcl (fn, fn2) float bin,
    n fixed bin(35),
    timeup fixed bin(71) static init(0),
    stack ptr,
    lisp_error_ entry,
    errcode(2) fixed bin(35) aligned based,
    myname fixed bin,
    timer_manager_$sleep ext entry (fixed bin(71), bit(2)),
    system_info_$timeup ext entry(fixed bin(71)),
    (addrel, float, fixed, null, multiply, atan, cos, exp, sqrt, log, sin) builtin;

%include lisp_common_vars;
%include lisp_stack_fmt;
%include lisp_nums;
%include lisp_name_codes;
%include lisp_error_codes;


/*
 * Internal proc to get flonum value from top word on stack
 */

floval:	proc;

	stack = addrel(stack_ptr, -2);
floval0:	if stack -> flonum_fmt.type_info = flonum_type then fn = stack -> floatb;
	else if stack -> fixnum_fmt.type_info = fixnum_type then fn = float(stack -> fixedb);
	else do;
		call erro;
		go to floval0;
		end;
	end;



/*
 * Internal proc to get fixnum value from top word on stack
 */

fixval:	proc;

	stack = addrel(stack_ptr, -2);
fixval0:	if stack -> flonum_fmt.type_info = flonum_type then n = fixed(stack -> floatb);
	else if stack -> fixnum_fmt.type_info = fixnum_type then n = stack -> fixedb;
	else do;
		call erro;
		go to fixval0;
		end;
	end;


	/* Signal wrng-type-arg error */

erro:	proc;

	dcl unm ptr;


	unm = unmkd_ptr;
	unmkd_ptr = addrel(unm, 2);
	unm -> errcode(1) = bad_arg_correctable;
	unm -> errcode(2) = myname;
	call lisp_error_;
	end;


	/*** One Argument Trig Subrs ***/

cos:	entry;

	myname = fn_cos;
	call floval;
	fn = cos(fn);

floret:	stack -> flonum_fmt.type_info = flonum_type;
	stack -> floatb = fn;
	return;


sin:	entry;

	myname = fn_sin;
	call floval;
	fn = sin(fn);
	go to floret;


exp:	entry;

	myname = fn_exp;
exp0:	call floval;
	if fn > 88.028 then do;
	     call erro;
	     go to exp0;
	     end;
	else if fn > -88.028 then fn = exp(fn);
	else fn = 0;
	go to floret;


log:	entry;

	myname = fn_log;
log0:	call floval;
	if fn <= 0 then do;
	     call erro;
	     go to log0;
	     end;
	fn = log(fn);
	go to floret;


sqrt:	entry;

	myname = fn_sqrt;
sqrt0:	call floval;
	if fn < 0 then do;
	     call erro;
	     go to sqrt0;
	     end;
	fn = sqrt(fn);
	go to floret;


isqrt:	entry;

	myname = fn_isqrt;
isqrt0:	call fixval;
	if n < 0 then do;
	     call erro;
	     go to isqrt0;
	     end;
	n = sqrt(n);
fixret:	stack -> fixnum_fmt.type_info = fixnum_type;
	stack -> fixedb = n;
	return;

	/*** Arc Tangent Lsubr, allows 1 or 2 arguments ***/

atan:	entry;

	myname = fn_atan;
	stack = addrel(stack_ptr, -2);
	n = stack -> fixedb;			/* arg count */
	stack_ptr = stack;
	if n = -2 then do;		/* 1 arg */
		call floval;
		fn = atan(fn);
		end;
	else if n = -4 then do;	/* 2 args */
		call floval;	/* 2nd arg */
		fn2 = fn;
		stack_ptr = stack;
		call floval;	/* 1st arg */
		if fn = 0 then if fn2 = 0 then do;		/* (atan 0 0) is not allowed */
			dcl unm ptr;
			unm = unmkd_ptr;
			unmkd_ptr = addrel(unm, 2);
			unm -> errcode(1) = atan_0_0_err;
			unm -> errcode(2) = fn_atan;
			call lisp_error_;			/* this is fatal error for now */
			end;
		fn = atan(fn, fn2);
		end;
	else stack_ptr = addrel(stack, 2+n);	/* wna - just fiddle stack ptr so no lose */

	go to floret;



sleep:	entry;		/*** Subr to cause delay for specified length of time */

	myname = fn_sleep;
sleep0:
	call floval;
	if fn < 0 then go to abs_sleep;	/* absolute time */
rel_sleep:				/* relative time */
	call timer_manager_$sleep(fixed(fn*1e6,71), "10"b);		/* convert seconds (floating) to
								   microseconds (fixed) */
	return;

abs_sleep:	/* absolute time - in terms of (status time) */


	if timeup = 0 then call system_info_$timeup(timeup);	/* find out when the system came up */
	call timer_manager_$sleep(timeup-fixed(fn*1e6,71), "00"b);
					/* sleep until system has been up for 'arg' number of microseconds */
	return;

expt_assistance:  entry;

	/* do expt of a flonum and a flonum for lisp_bignums_ */

	call floval;
	fn2 = fn;
	stack_ptr = stack;
	call floval;

	fn = fn ** fn2;
	go to floret;
end lisp_trig_;
