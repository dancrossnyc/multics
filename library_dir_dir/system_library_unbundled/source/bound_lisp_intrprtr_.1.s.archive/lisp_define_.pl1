/* **************************************************************
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1973 *
   *                                                            *
   ************************************************************** */
defun:	proc;		/* fsubr for defining functions */

/*
 *  originally coded by David Reed
 *  recoded by D. Moon 6-JUN-72, for v2pl1 and new lisp_ptr format
 *  modified 7-JUN-72 for new stack discipline.  DAM
 *  converted to correctable error scheme;
 *     constants moved to lisp_static_vars_ DAM 8 Aug 72
*	Fixed defprop to return its first argument. AS 10/4/72
 */

	/* lisp constants */

dcl (	lisp_static_vars_$lambda,
	lisp_static_vars_$expr_hash,
	lisp_static_vars_$expr,
	lisp_static_vars_$fexpr,
	lisp_static_vars_$macro
    ) fixed bin(71) aligned external,
     lisp_static_vars_$defun external ptr,

    (lambda   def  (lisp_static_vars_$lambda),
     expr     def  (lisp_static_vars_$expr),
     fexpr    def  (lisp_static_vars_$fexpr),
     macro    def  (lisp_static_vars_$macro)
    ) fixed bin(71) aligned,

	/* temporaries on the stack -- used by define */

	argl ptr,
	r_ptr ptr based (addr(stack -> temp(2))),
	Aptr ptr based (addr(stack -> temp(3))),
	Bptr ptr based (addr(stack -> temp(4))),
	Nptr ptr based (addr(stack -> temp(5))),
	A fixed bin (71) aligned based (addr(stack -> temp(3))),
	B fixed bin (71) aligned based (addr(stack -> temp(4))),
	N fixed bin (71) aligned based (addr(stack -> temp(5))),

	/* declarations for defun and defprop */


     args ptr def (stack -> temp_ptr(1)),		/* to list of args of fsubr */
     stack ptr,			/* copy of stack_ptr */
     foo fixed bin(71) aligned;	/* a lisp-object holder */

/* ENTRY POINTS CALLED */

dcl lisp_error_ ext entry,
	lisp_utils_$pl1_sxhash ext entry,
    unm ptr,
    ercode(2) fixed bin aligned based(unm);
dcl lisp_alloc_ entry(fixed bin, ptr);
dcl lisp_get_atom_ ext entry (char(*), fixed bin(71) aligned);
dcl lisp_special_fns_$cons ext entry;
dcl lisp_property_fns_$get ext entry;
dcl lisp_property_fns_$putprop ext entry;
dcl lisp_property_fns_$remprop ext entry;

%include lisp_atom_fmt;
%include lisp_error_codes;
%include lisp_name_codes;
%include lisp_common_vars;
%include lisp_cons_fmt;
%include lisp_ptr_fmt;
%include lisp_stack_fmt;

/* DEFUN FSUBR */

	/* works by generating args on the stack for a call to putprop */

	stack = addrel(stack_ptr, -2);			/* for efficiency */
	stack_ptr = addr(stack -> temp(6));			/* room for temp's */

	if  stack -> temp_type(1) then
						/* ensure there is a list of args */
too_few:	do;
		/* too few args correctable error */

	     stack_ptr = stack;
	     unm = unmkd_ptr;
	     unmkd_ptr = addrel(unm, 2);
	     unm -> ercode(1) = too_few_args;
	     unm -> ercode(2) = fn_defun;
	     call lisp_error_;
	     return;		/* lisp_error_ pushes a suitable return value onto marked pdl */
	     end;

	stack -> temp(2) = args -> cons.car;		/* atom to get fcn property */

	/* see if there is a 2nd arg */

	if args -> cons_types.cdr then go to too_few;

	/* check for indicator as first arg */

	if stack -> temp(2) ^= expr
	then if stack -> temp(2) ^= fexpr
	     then if stack -> temp(2) ^= macro
		then go to check_second;		/* normal case */

	stack -> temp(3) = stack -> temp(2);
	stack -> temp(2) = args -> cons_ptrs.cdr -> cons.car;
	go to get_body;

check_second:

	/* see whether 2nd arg is lambda-list or a p-list indicator (expr, fexpr, macro) */

	stack -> temp(3) = args -> cons_ptrs.cdr -> cons.car;
	if stack -> temp(3) ^= expr
	then if stack -> temp(3) ^= fexpr
	then if stack -> temp(3) ^= macro
	then do;
		stack -> temp(3) = expr;
		stack -> temp(5) = args -> cons.cdr;
		go to make_lambda_exp;
	     end;
get_body:	stack -> temp(5) = args -> cons_ptrs.cdr -> cons.cdr;
make_lambda_exp:
	stack -> temp(4) = lambda;		/* cons up a lambda - expression */
	call lisp_special_fns_$cons;

	if stack -> temp_type(2) = Cons	/* (defun (foo bar baz) ...) */
	then do;
		stack -> temp(3) = stack -> temp_ptr(2) -> cons_ptrs.cdr -> cons.car;
		stack -> temp(2) = stack -> temp_ptr(2) -> cons.car;
	     end;

	/* do expr-hash feature */

	if lisp_static_vars_$defun -> atom.value ^= 0
	  & lisp_static_vars_$defun -> atom.value ^= nil
	then do;
		stack_ptr = addr(stack->temp(7));
		stack->temp(5) = stack->temp(2);
		stack->temp(6) = lisp_static_vars_$expr_hash;
		call lisp_property_fns_$get;
		if stack->temp(5) ^= nil
		then do;
			stack_ptr = addr(stack->temp(7));
			stack -> temp(6) = stack -> temp(4);	/* lambda expression */
			call lisp_utils_$pl1_sxhash;
			if stack -> temp(6) = stack->temp(5)
			then go to done_defun;
			stack->temp(5) = stack->temp(2);
			stack->temp(6) = lisp_static_vars_$expr_hash;
			call lisp_property_fns_$remprop;
		     end;
	     end;

	/* put args in right order for putprop */

	stack_ptr = addr(stack -> temp(8));	/* lisp_special_fns_$cons has randomized stack_ptr */
	stack -> temp(5), stack -> temp(7) = stack -> temp(3);	/* the indicator is third arg */
					/* the property is second arg */
	stack -> temp(3), stack -> temp(6) = stack -> temp(2);	/* the atom is first arg */
dremprop:
	call  lisp_property_fns_$remprop;
	if stack->temp(6) ^= nil	/* more to remprop? */
	then do;
		stack_ptr = addr(stack->temp(8));
		stack -> temp(6) = stack->temp(2);
		stack -> temp(7) = stack->temp(3);
		go to dremprop;
	     end;
	stack_ptr = addr(stack -> temp(6));
	call lisp_property_fns_$putprop;
done_defun:
	stack -> temp(1) = stack -> temp(2);		/* return the atom that was defun'ed */
	stack_ptr = addr(stack -> temp(2));	/* clear the stack - return the atom that was defun'ed */
	return;

		/* defprop is unevaluated form of putprop.
		   This is just an interface to putprop */

defprop:	entry;
	stack = addrel(stack_ptr, -2);;
	stack_ptr = addr(stack -> temp(7));			/* so can pass 3 args to putprop, 2 to remprop. */
							/* and also save the first argument */
	if stack ->  temp(1) = nil | stack -> temp_type(1) then go to too_few;
	if stack -> temp_ptr(1) -> cons.cdr = nil | stack -> temp_ptr(1) -> cons_types.cdr then go to too_few;
	if stack -> temp_ptr(1) -> cons_ptrs.cdr -> cons.cdr = nil |
		stack -> temp_ptr(1) -> cons_ptrs.cdr -> cons_types.cdr then go to too_few;


	/* arguments validated (at least that there are 3 ), so set up call to putprop */

	stack -> temp(4), stack -> temp(6) = stack -> temp_ptr(1) -> cons_ptrs.cdr -> cons_ptrs.cdr -> cons.car;
	stack -> temp(3) = stack -> temp_ptr(1) -> cons_ptrs.cdr -> cons.car;
	stack -> temp(1),
	stack -> temp(5),
	stack -> temp(2) = stack -> temp_ptr(1) -> cons.car;
dfremprop:
	call lisp_property_fns_$remprop;
	if stack->temp(5) ^= nil
	then do;
		stack_ptr =addr(stack->temp(7));
		stack->temp(5) = stack->temp(2);
		stack->temp(6) = stack->temp(4);
		go to dfremprop;
	     end;
	stack_ptr = addr(stack->temp(5));
	call lisp_property_fns_$putprop;
	stack_ptr = addr(stack -> temp(2));			/* clear the stack */
	return;


	end;
