/****^  **************************************************************
        *                                                            *
        * Copyright, (C) Honeywell Bull Inc., 1988                   *
        *                                                            *
        * Copyright, (C) Massachusetts Institute of Technology, 1973 *
        *                                                            *
        ************************************************************** */

/* format: style3,^ifthenstmt,indthenelse,^indnoniterdo,^indprocbody,dclind5,idind32,ll130 */


/****^  HISTORY COMMENTS:
  1) change(73-11-03,DAM), approve(), audit(), install():
     This module (lisp_segment_manager_) manages all temporary segments
     used by LISP. Completely rewritten.
  2) change(80-01-18,JSpencerLove), approve(), audit(), install():
     For changes in the PL/1 compiler.
  3) change(88-04-06,RBarstad), approve(88-04-17,MCR7874),
     audit(88-05-31,GWMay), install(88-05-31,MR12.2-1050):
     Standardize set_list_temp_dir entry for SCP6377.
                                                   END HISTORY COMMENTS */

%page;
get_lists:
     proc (sptr);					/* entry to get a seg of lists space */

     type = ListsSeg;
     mode = RWA;

     /*** search for pre-existing segment of correct type */

     unallocated_entry = -1;
     do segx = lbound (lists_table, 1) to hbound (lists_table, 1);
	if lists_table (segx).segno = ""b
	     then if unallocated_entry < 0
		     then unallocated_entry = segx;
		     else ;
	else /* segno ^= ""b */
	     if ^lists_table (segx).allocated
	     then do;

		/*** found segment that can be reused */

		lists_table (segx).allocated = "1"b;
		sptr = baseptr (lists_table (segx).segno);
		return;
	     end;
     end;

     if unallocated_entry < 0
	then call table_full;

     /*** create new segment */

     segx = unallocated_entry;
     call create_new_segment;
     lists_table (segx).segno = segno;
     lists_table (segx).allocated = "1"b;
     return;
%page;
free_lists:
     entry (sptr);					/* entry to dispose of a seg of lists space */

     type = ListsSeg;
     segno = baseno (sptr);

     do segx = lbound (lists_table, 1) to hbound (lists_table, 1);
	if lists_table (segx).segno = segno
	     then do;				/* found it - free it */

		call flush_seg;
		lists_table (segx).allocated = "0"b;
		return;
	     end;
     end;

     /*** not found in table ?? */

     call internal_error;
%page;
get_stack:
     entry (sptr);

/* entry to allocate a seg for stack purposes.
   the max length is set so stack overflow can be detected
   before it's too late */

     type = StackSeg;
     mode = RWA;

     /*** search for pre-existing segment of correct type */

     unallocated_entry = -1;
     do segx = lbound (stack_table, 1) to hbound (stack_table, 1);
	if stack_table (segx).segno = ""b
	     then if unallocated_entry < 0
		     then unallocated_entry = segx;
		     else ;
	else /* segno ^= ""b */
	     if ^stack_table (segx).allocated
	     then do;

		/*** found segment that can be reused */

		stack_table (segx).allocated = "1"b;
		sptr = baseptr (stack_table (segx).segno);
		if stack_table (segx).single_bound ^= InitialStackSize
		     then call set_initial_max_length;
		return;
	     end;
     end;

     if unallocated_entry < 0
	then call table_full;

     /*** create new segment */

     segx = unallocated_entry;
     call create_new_segment;
     call set_initial_max_length;
     stack_table (segx).segno = segno;
     stack_table (segx).allocated = "1"b;
     return;


set_initial_max_length:
     proc;

     call hcs_$set_max_length_seg (sptr, InitialStackSize, 0);
     stack_table (segx).single_bound = InitialStackSize;

     end;
%page;
free_stack:
     entry (sptr);					/* entry to dispose of a stack seg */


     type = StackSeg;
     segno = baseno (sptr);

     do segx = lbound (stack_table, 1) to hbound (stack_table, 1);
	if stack_table (segx).segno = segno
	     then do;				/* found it - free it */
		call flush_seg;
		stack_table (segx).allocated = "0"b;
		return;
	     end;
     end;

     /*** not found in table ?? */

     call internal_error;
%page;
get_array:
     entry (sptr);					/* entry to get a segment of array space */

     type = ArraySeg;
     mode = REWA;					/* arrays and subr blocks contain executable code and go in this seg */


     /*** search for pre-existing segment of correct type */

     unallocated_entry = -1;
     do segx = lbound (array_table, 1) to hbound (array_table, 1);
	if array_table (segx).segno = ""b
	     then if unallocated_entry < 0
		     then unallocated_entry = segx;
		     else ;
	else /* segno ^= ""b */
	     if ^array_table (segx).allocated
	     then do;

		/*** found segment that can be reused */

		array_table (segx).allocated = "1"b;
		sptr = baseptr (array_table (segx).segno);
		return;
	     end;
     end;

     if unallocated_entry < 0
	then call table_full;

     /*** create new segment */

     segx = unallocated_entry;
     call create_new_segment;
     array_table (segx).segno = segno;
     array_table (segx).allocated = "1"b;
     return;
%page;
free_array:
     entry (sptr);					/* entry to dispose of a segment of arrays space */

     type = ArraySeg;
     segno = baseno (sptr);

     do segx = lbound (array_table, 1) to hbound (array_table, 1);
	if array_table (segx).segno = segno
	     then do;				/* found it - free it */
		call flush_seg;
		array_table (segx).allocated = "0"b;
		return;
	     end;
     end;

     /*** not found in table ?? */

     call internal_error;
%page;
/* subroutines used by the above */

flush_seg:
     proc;

     call hcs_$truncate_seg (sptr, 0, 0);		/* next guy who uses seg wants it to be all 0,
						   plus save space in process directory */
     end;



create_new_segment:
     proc;

dcl  1 ename_struc		       automatic unaligned structure,
						/* construct entry name here */
       2 lisp		       char (5) init ("lisp."),
       2 stype		       char (5),		/* filled in with user-specified type */
       2 dot		       char (1) init ("."),
       2 unique		       char (15),		/* "!BBBsdhasfwhatever" */
     ename		       char (26) unaligned def (ename_struc) pos (1);

     ename_struc.stype = TypeString (type);
     ename_struc.unique = unique_chars_ (unique_bits_ ());

     if lisp_temp_dir = ""
	then lisp_temp_dir = get_pdir_ ();		/* initialization/bug in make_seg */
     call hcs_$make_seg (lisp_temp_dir, ename, "", mode, sptr, code);
     if sptr = null
	then call cannot_make_seg;

     segno = baseno (sptr);
     sptr = baseptr (segno);				/* Goddamn hardcore does not set ring number in pointer */

     end;
%page;
/* error routines */

table_full:
     proc;

     call ioa_$ioa_switch (iox_$error_output, "^/Error:  ^a segment table full in lisp_segment_manager_", TypeString (type));
     go to fatal_loss;


internal_error:
     entry;

     call ioa_$ioa_switch (iox_$error_output,
	"^/Error:  internal inconsistency in ^a segment table found by lisp_segment_manager_", TypeString (type));
     go to fatal_loss;


cannot_make_seg:
     entry;

dcl  long_msg		       char (100) aligned,
     brief_msg		       char (8) aligned;

     call convert_status_code_ (code, brief_msg, long_msg);
     call ioa_$ioa_switch (iox_$error_output, "^/Error:  ^a  Trying to create lisp ^a segment in ^a.", long_msg,
	TypeString (type), lisp_temp_dir);
     go to fatal_loss;


fatal_loss:
     call cu_$cl ("1"b);
     call ioa_$ioa_switch (iox_$error_output, "lisp_segment_manager_:  start after fatal error not allowed.  Try pi.");
     go to fatal_loss;

     end;
%page;
/* entries to set and get the maxlength of a stack seg */

get_stack_size:
     entry (st_ptr, st_size);

dcl  st_ptr		       pointer parameter,
     st_size		       fixed bin (18) parameter;

     call find_this_stack;
     st_size = stack_table (segx).single_bound;
     return;


set_stack_size:
     entry (st_ptr, st_size);

     call find_this_stack;
     cursize = divide (st_size + 1023, 1024, 18, 0) * 1024; /* must be in pages */
     if cursize > MaximumStackSize
	then go to cant_set_stack_size;
     stptr = st_ptr;
     call adjust_max_len;
     if code ^= 0
	then
cant_set_stack_size:
	     st_size = stack_table (segx).single_bound;	/* lost - tell caller */
     return;

find_this_stack:
     proc;

     segno = baseno (st_ptr);
     do segx = lbound (stack_table, 1) to hbound (stack_table, 1) while (stack_table (segx).segno ^= segno);
     end;
     if segx > hbound (stack_table, 1)
	then do;
	     type = StackSeg;
	     call internal_error;
	end;

     end find_this_stack;

adjust_max_len:
     proc;

/* set max len of stack(segx). stptr ->, to cursize */

dcl  truncsize		       fixed bin (18);

     if baseno (stptr) = baseno (lisp_static_vars_$stack_ptr)
	then truncsize = fixed (rel (lisp_static_vars_$stack_ptr), 18);
     else if baseno (stptr) = baseno (lisp_static_vars_$unmkd_ptr)
	then truncsize = fixed (rel (lisp_static_vars_$unmkd_ptr), 18);
     else go to notrunc;				/* ?? */

     call hcs_$truncate_seg (stptr, truncsize, code);	/* needed before can  decrease the max length */
notrunc:
     call hcs_$set_max_length_seg (stptr, cursize, code);
     if code = 0
	then stack_table (segx).single_bound = cursize;
     end adjust_max_len;
%page;
grow_stacks:
     entry (a_code);

/* this entry is called when a stack overflows.  an attempt
   is made to grow the stacks so that a user interrupt
   may be taken.  if the attempt fails, a non-zero code will
   be returned. */

     do stptr = lisp_static_vars_$stack_ptr, lisp_static_vars_$unmkd_ptr;

	segno = baseno (stptr);
	cursize = fixed (rel (stptr), 18);
	do segx = lbound (stack_table, 1) to hbound (stack_table, 1) while (stack_table (segx).segno ^= segno);
	end;
	if segx > hbound (stack_table, 1)
	     then do;
		type = StackSeg;
		call internal_error;
	     end;
	if cursize > stack_table (segx).single_bound - StackSizeIncrement
	     then do;				/* this stack needs to be grown */
		cursize = stack_table (segx).single_bound + StackSizeIncrement;
		if cursize > MaximumStackSize
		     then do;			/* barf!! we don't want stacks this big */
			a_code = error_table_$stack_overflow;
			return;
		     end;
		call adjust_max_len;
		a_code = code;
		if code ^= 0
		     then return;			/* you have lost */
						/* prob. up to max size */
	     end;

     end;

     a_code = 0;					/* apparently we won */
     return;
%page;
shrink_stacks:
     entry;

/* this entry is called after a stack overflow has been processed
   to put the stacks back to normal max length so that stack
   overflow can be detected again */

     do stptr = lisp_static_vars_$stack_ptr, lisp_static_vars_$unmkd_ptr;

	segno = baseno (stptr);
	do segx = lbound (stack_table, 1) to hbound (stack_table, 1) while (stack_table (segx).segno ^= segno);
	end;
	if segx > hbound (stack_table, 1)
	     then return;				/* Oh, well.  catch error later if really error */
	cursize = fixed (rel (stptr), 18);
	do while (stack_table (segx).single_bound > InitialStackSize
	     & stack_table (segx).single_bound - StackSizeIncrement >= cursize);
	     stack_table (segx).single_bound = stack_table (segx).single_bound - StackSizeIncrement;
	end;
	cursize = stack_table (segx).single_bound;
	call adjust_max_len;
     end;
     return;
%page;
set_lisp_temp_dir:
     entry;

/* command to change the directory in which lisp temp segs are created.
   does not move any temp segs that already exist */

dcl  expand_pathname_	       entry (char (*), char (*), char (*), fixed bin (35));
dcl  pathname_		       entry (char (*), char (*)) returns (char (168));
dcl  cu_$arg_ptr		       entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  cu_$arg_count		       entry (fixed bin, fixed bin (35));
dcl  error_table_$bad_arg	       fixed bin (35) ext static;
dcl  arg_length		       fixed bin (21);
dcl  arg_count		       fixed bin;
dcl  arg			       char (arg_length) based (arg_ptr);
dcl  arg_ptr		       ptr;
dcl  arg_dir		       char (168);
dcl  arg_entry		       char (32);
/**** dcl  ioa_			entry() options(variable); for debug ****/

     arg_length = 0;
     arg_count = 0;
     arg_ptr = null;
     arg_dir = "";
     arg_entry = "";
     code = 0;

     call cu_$arg_count (arg_count, code);
     if (code ^= 0) | (arg_count > 1)
	then goto sltd_usage_error;

     if arg_count = 0				/* default to process dir */
	then lisp_temp_dir = get_pdir_ ();
	else do;					/* arg_count must be 1 now */
	     call cu_$arg_ptr (1, arg_ptr, arg_length, code);
	     if code ^= 0
		then goto sltd_usage_error;

	     if (arg = "-pd") | (arg = "-process_dir")
		then lisp_temp_dir = get_pdir_ ();
	     else if (arg = "-wd") | (arg = "-working_dir")
		then lisp_temp_dir = get_wdir_ ();
/****	     else if (arg = "-pr") | (arg = "-print")
		then call ioa_ ("lisp_temp_dir = ""^a"".", lisp_temp_dir);  for debug ****/
	     else if substr (arg, 1, 1) = "-"
		then do;
		     code = error_table_$bad_arg;
		     goto sltd_usage_error;
		end;
	     else do;
		call expand_pathname_ (arg, arg_dir, arg_entry, code);
		if code ^= 0
		     then goto sltd_arg_error;
		lisp_temp_dir = pathname_ (arg_dir, arg_entry);
	     end;
	end;
     goto set_lisp_temp_dir_exit;

sltd_usage_error:
     call com_err_ (code, "set_lisp_temp_dir", "^/Usage: set_lisp_temp_dir {PATHNAME | -working_dir | -process_dir}");
     goto set_lisp_temp_dir_exit;

sltd_arg_error:
     call com_err_ (code, "set_lisp_temp_dir", "^a", arg);

set_lisp_temp_dir_exit:
     ;
     return;
%page;
/* D E C L A R A T I O N S */

/* Parameters */

dcl  sptr			       aligned pointer parameter,
						/* may be (input) seg to free, or (output) seg that is allocated */
     a_code		       fixed bin (35) parameter;
						/* (output) if non-zero, grow_stacks did not succeed */

/* Automatic Variables */

dcl  type			       fixed bin,		/* type of segment - StackSeg, ListsSeg, or ArraySeg */
     mode			       fixed bin (5),	/* desired access mode (when creating a segment) */
     unallocated_entry	       fixed bin,		/* used to remember first free slot in table when searching for new seg */
     segno		       bit (18),		/* segment number of segment being gotten or freed */
     code			       fixed bin (35),	/* Multics status code */
     segx			       fixed bin,		/* index in a segment table */
     stptr		       pointer,		/* a stack pointer (in grow_stacks) */
     cursize		       fixed bin (18);	/* current (or next) size of segment */

/* External Static */

dcl  lisp_static_vars_$stack_ptr     external static pointer,
     lisp_static_vars_$unmkd_ptr     external static pointer;

dcl  error_table_$stack_overflow     fixed bin (35) external;


/* Manifest Constants */

dcl  (
     ListsSeg		       fixed bin init (1),	/* code for list-space segment */
     ArraySeg		       fixed bin init (2),	/* code for array/subr-block space segment */
     StackSeg		       fixed bin init (3),	/* code for stack segment */
     TypeString		       (3) char (5)
			       init (/* printable strings corresponding to above codes */ "lists", "array", "stack"),
     InitialStackSize	       fixed bin (18) init (51200),
						/* 50K - initial max length for stack segments - should be plenty */
     StackSizeIncrement	       fixed bin (18) init (2048),
						/* two pages should be enough to handle a stack overflow user intr */
     MaximumStackSize	       fixed bin (18) init (65536),
						/* stack segs limited to this size so can detect oob errors
					   even with 256K segs we don't need that much and this helps to find bugs */
     RWA			       fixed bin (5) init (01011b),
						/* access mode for stack and lists segments */
     REWA			       fixed bin (5) init (01111b)
						/* access mode for array segments */
     )			       internal static;


/* Builtin Functions */

dcl  (baseno, baseptr, divide, fixed, hbound, lbound, null, rel, substr)
			       builtin;


/* External Entries Called */

dcl  convert_status_code_	       entry (fixed bin (35), char (8) aligned, char (100) aligned),
     hcs_$truncate_seg	       entry (pointer, fixed bin (18), fixed bin (35)),
     hcs_$set_max_length_seg	       entry (pointer, fixed bin (18), fixed bin (35)),
     ioa_$ioa_switch	       entry options (variable),
     iox_$error_output	       ext ptr,
     unique_bits_		       entry () returns (bit (70)),
     unique_chars_		       entry (bit (*)) returns (char (15)),
     cu_$cl		       entry (bit (1) aligned),
     get_pdir_		       entry () returns (char (168)),
     get_wdir_		       entry () returns (char (168)),
     com_err_		       entry options (variable),
     hcs_$make_seg		       entry (char (*), char (*), char (*), fixed bin (5), pointer, fixed bin (35));


/* Internal Static Data -- segment tables */

dcl  1 lists_table		       (0:395) aligned static,/* Enough for 100,000 records of lists */
       2 segno		       bit (18) unaligned init ((396) (""b)),
						/* segment number */
       2 allocated		       bit (1) unaligned init ((396) ("0"b));
						/* "1"b if someone is using the segment */

dcl  1 array_table		       (0:60) aligned static, /* Enough for 10,000 records of arrays */
       2 segno		       bit (18) unaligned init ((61) (""b)),
						/* segment number */
       2 allocated		       bit (1) unaligned init ((61) ("0"b));
						/* "1"b if someone is using the segment */

dcl  1 stack_table		       (0:11) aligned static, /* Enough for six lisps */
       2 segno		       bit (18) unaligned init ((12) (""b)),
						/* segment number */
       2 allocated		       bit (1) unaligned init ((12) ("0"b)),
						/* "1"b if someone is using the segment */
       2 single_bound	       fixed bin (16, -2) unaligned;
						/* the current setting of the maximum length of this segment */

dcl  lisp_temp_dir		       char (168) static init ("");
						/* pathname of directory in which to keep temp segs.
						   needed since process directory quota is non-negotiable.
						 */
     end;
