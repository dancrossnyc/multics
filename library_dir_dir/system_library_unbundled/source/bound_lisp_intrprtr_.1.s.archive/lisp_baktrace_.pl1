/* **************************************************************
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1973 *
   *                                                            *
   ************************************************************** */

	/* lisp baktrace functions */

baktrace: proc;

/*
 * this proc contains the type 2 lsubrs baktrace, baktrace1, baktrace2.
 *
 * these are the same except that baktrace lists only function names,
 * while baktrace1 also lists the a-list pdl ptr for bindings just
 * _b_e_f_o_r_e that function was invoked, and baktrace2 gives both the
 * a-list pdl ptr and the evalframe pdl ptr.
 *
 * these functions may be called with 0, 1, or 2 evaluated arguments.
 * 0 arguments is equivalent to 1 argument of nil.
 * the first argument is a pdl ptr, or else nil which means
 *  start at the top of the pdl. If the pdl ptr is negative the search
 *  for the first evalframe is down, if positive it is up, but in
 *  either case the actual tracing is downwards in the pdl.
 *  A pdl ptr argument of 0 is not supported.
 * If a second argument is given, it is a fixnum giving the
 *  maximum number of lines to be typed out, i.e. the maximum depth
 *  in the pdl to be traced.
 *
 *
 * Coded 2 Sept. 1972 by D. A. Moon
 */

dcl stack ptr,
    unm ptr,
    unm2 ptr,
    posf bit(1),
    esw fixed bin,
    nargs fixed bin,
    first bit(1),
    loc bit(18),
    kludge_fixed_bin fixed bin(18),
    1 loc_ovly based (addr(loc)),
      2 locfb fixed bin(17) unaligned,
      2 unused_bits bit(18) unaligned,
    st ptr,
    lisp_static_vars_$print_atom fixed bin(71) external,
    lisp_print_$type_string entry (char(*)),
    lisp_static_vars_$prin1_atom fixed bin(71) external,
    lisp_$apply entry,
    lisp_special_fns_$ncons entry,
    count fixed bin,
    lisp_error_ entry,
    i fixed bin;

dcl (lisp_error_table_$not_pdl_ptr, lisp_error_table_$bad_arg_correctable) fixed bin(35) external;

%include lisp_atom_fmt;
%include lisp_name_codes;
%include lisp_stack_seg;
%include lisp_ptr_fmt;
%include lisp_cons_fmt;
%include lisp_stack_fmt;
%include lisp_common_vars;
%include lisp_nums;
%include lisp_unmkd_pdl;

	esw = 0;
	go to join;

baktrace1: entry;

	esw = 1;
	go to join;

baktrace2: entry;

	esw = 2;
	go to join;

join:	/* begin by analyzing arguments */

	stack = addrel(stack_ptr, -2);	/* -> -2*nargs */
	nargs = stack -> fixedb;
	stack = addrel(stack, nargs);				/* -> our first arg */
	if nargs = 0 then do;

		/* no args, simulate 1 arg of nil */

		stack -> temp(1) = nil;
		stack_ptr = addr(stack -> temp(3));
		nargs = -2;
		end;
	if nargs = -2 then do;

		/* 1 arg, simulate second arg of very big number */

		addr(stack -> temp(2)) -> fixnum_fmt.type_info = fixnum_type;
		addr(stack -> temp(2)) -> fixedb = binary(999999999, 35);
		end;

retry:
	stack_ptr = addr(stack -> temp(3));		/* just 2 args allowed */
	posf = "0"b;
	if stack -> temp(1) = nil then do;
		loc = rel(eval_frame);
		if loc then locfb = locfb + 1;
		end;
	else if stack -> temp_type36(1) & Fixed36 then
		if stack -> fixedb < 0 then
			loc = substr(unspec(stack -> fixedb), 19, 18);
		else do;
		     kludge_fixed_bin = -stack -> fixedb;
		     loc = substr(unspec(kludge_fixed_bin), 19, 18);
		     posf = "1"b;
		     end;

	else do;	/* not a fixnum, you lose */
baktrace_bad_pdl_ptr:
	     unm = unmkd_ptr;
	     unmkd_ptr = addrel(unm, 2);
	     stack_ptr = addr(stack -> temp(4));
	     stack -> temp(3) = stack -> temp(1);	/* move losing pdl ptr to top of marked pdl */
	     unm -> errcode(1) = lisp_error_table_$not_pdl_ptr;
	     unm -> errcode(2) = fn_baktrace;
	     call lisp_error_;
	     stack -> temp(1) = stack -> temp(3);		/* move replacement value back down */
	     go to retry;
	     end;

	/* make sure pdl ptr lies in the stack */

	if loc >= rel(unmkd_ptr) then go to baktrace_bad_pdl_ptr;

	if loc = ""b then if posf then go to baktrace_00;
		else go to baktrace_nothing;

	if loc < rel(ptr(unmkd_ptr,""b)->stack_seg.unmkd_stack_bottom)
		then go to baktrace_bad_pdl_ptr;


	/* make sure second arg was a fixnum */

	if stack -> temp_type36(2) & Fixed36 then count = addr(stack -> temp(2)) -> fixedb;
	     else do;
		unm = unmkd_ptr;
		unmkd_ptr = addrel(unm, 2);
		unm -> errcode(1) = lisp_error_table_$bad_arg_correctable;
		unm -> errcode(2) = fn_baktrace;
		call lisp_error_;
		go to retry;
		end;

	/* arguments have been validated, find first place to baktrace from */

	if stack -> temp(1) = nil
	   then if addr(lisp_static_vars_$star_rset) -> based_ptr -> atom.value ^= nil
	      then first = "1"b;
					/* avoid listing ourselves in the baktrace */
	     else first = "0"b;

baktrace_00:
	unm2 = null();
	do unm = eval_frame repeat (ptr(unm, unm -> frame.prev_frame)) while (rel(unm));
		if rel(unm) < loc then go to baktrace_01;
		if posf then if rel(unm) = loc then go to baktrace_01;
		unm2 = unm;
		end;
	if posf then go to baktrace_01;

	/* nothing there - just return nil */

baktrace_nothing:
	stack -> temp(1) = nil;
	stack_ptr = addr(stack -> temp(2));
	return;


baktrace_01:
	if posf then do;
		if unm2 = null then go to baktrace_nothing;
		unm = unm2;			/* make it look like we did an upward search */
		end;

	/* begin baktraceing, unm -> frame */

	stack_ptr = addr(stack -> temp(3));
	i = 0;
	do unm = unm repeat(ptr(unm, unm -> frame.prev_frame)) while (rel(unm));
	     if first then first = ""b;
   	     else do;
		st = ptr(stack_ptr, unm -> frame.stack_ptr);
		stack -> temp(2) = st -> temp(1);		/* get form being evaled
							   or function being applied or mapped. */
		if (unm -> frame.dat1 & "000000000000000001"b) = ""b then	/* if apply bit is off, */
			stack -> temp(2) = stack -> temp_ptr(2) -> cons.car;  /* is list of fcn . args */
		if stack -> temp_type36(2) & Atsym36 then do;	/* omit lambda expressions
							   because they take too long to type out */
		     stack -> temp(1) = lisp_static_vars_$print_atom;
		     call lisp_special_fns_$ncons;
		     call lisp_$apply;
		     stack_ptr = addr(stack -> temp(3));
		    if esw ^= 0 then do;
			call lisp_print_$type_string("	");	/* give a-list */
			addr(stack -> temp(2)) -> fixnum_fmt.type_info = fixnum_type;
			addr(stack -> temp(2)) -> fixedb = fixed("111111111111111110"b||unm -> frame.stack_ptr, 36);
			stack -> temp(1) = lisp_static_vars_$prin1_atom;
			call lisp_special_fns_$ncons;
			call lisp_$apply;
			stack_ptr = addr(stack -> temp(3));
			if esw = 2 then do;
			     call lisp_print_$type_string("   ");	/* give pdl ptr */
			     addr(stack -> temp(2)) -> fixnum_fmt.type_info = fixnum_type;
			     addr(stack -> temp(2)) -> fixedb = fixed("111111111111111111"b||rel(unm), 36);
			     stack -> temp(1) = lisp_static_vars_$prin1_atom;
			     call lisp_special_fns_$ncons;
			     call lisp_$apply;
			     stack_ptr = addr(stack -> temp(3));
			     end;
			end;
		     i = i + 1;
		     if i >= count then go to baktrace_nothing;	/* done, return nil */
		     end;
		end;
	     end;
	go to baktrace_nothing;		/* reached base of stack, return nil */

end;
