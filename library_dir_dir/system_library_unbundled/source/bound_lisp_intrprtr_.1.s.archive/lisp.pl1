/* **************************************************************
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1973 *
   *                                                            *
   ************************************************************** */
lisp:	proc;



/* command interface to the Multics LISP subsystem.
   First coded for the second version of the Multics
   LISP implementation on 3/15/71.
   Modified for use of standard Multics linkage mechanism, 7/15/71.
   D. Reed 
   Changed for new definition of (status toplevel) and to add cleanup
   handler for new I/O system, 24 Mar 1973, DAM
   Modified to allow recursive entry of the lisp subsystem, 6/2/73 by DAM
   Modified 74.11.01 by DAM to remove references to establish_cleanup_proc_ and default_handler_
   Modified 74.12.09 by DAM for (sstatus cleanup) feature
   Modified 78.12.08 by BSG for (sstatus mulpi) feature
 */


dcl level static init(0) fixed bin;		/* level of recursion */

dcl (lisp_static_vars_$template fixed bin,
    lisp_static_vars_$template_size fixed bin,
    lisp_static_vars_$cur_stat_seg ptr,
    lisp_static_vars_$cur_stat_pos fixed bin(19),
    lisp_static_vars_$subsys_recurse_save_size fixed bin) external static;

dcl lisp_static_vars_$property_list_of_nil fixed bin(71) external,
    lisp_error_table_$bad_arg_correctable fixed bin external;

dcl ioa_$ioa_switch external entry options(variable),
    iox_$error_output external ptr,
    lisp_static_vars_$ignore_faults bit(36) ext aligned,
    lisp_static_vars_$mulpi_state fixed bin (17) ext aligned,
    lisp_static_vars_$quit_handler_flag bit(1) external,
    lisp_static_vars_$gc_time fixed bin(71) ext aligned,
    lisp_static_vars_$emptying_buffers fixed bin external,
    lisp_static_vars_$hi_random bit(72) ext aligned,
    saved_ignore_faults bit(36) aligned;
dcl cu_$arg_ptr_rel entry(fixed bin,ptr,fixed bin,fixed bin, ptr),
    lisp_fault_handler_$init entry,
    1 unmask aligned like masked,
    lisp_segment_manager_$get_stack entry(ptr),
    lisp_segment_manager_$free_stack entry(ptr),
    lisp_segment_manager_$get_lists entry(ptr),
    lisp_segment_manager_$free_lists entry(ptr),
    arg_list_ptr ptr,
    cu_$arg_list_ptr entry(ptr),
    save_area_size fixed bin,
    foo fixed bin(71)aligned,
    tempp ptr,
    lisp_error_ entry,
    errcode(2) fixed bin based aligned,
    lisp_get_atom_ entry(char(*)aligned,fixed bin(71)aligned),
    condition_ entry (char(*), entry),
    reversion_ entry(char(*)),
    program_interrupt condition,
    lisp_default_handler_$program_interrupt entry,
    lisp_default_handler_ entry,
    lisp_io_control_$empty_all_buffers entry,
    lisp_io_control_$clear_input entry,
    lisp_io_control_$cleanup entry,
    lisp_io_control_$init entry,
    lisp_boot_ entry,
    lisp_save_$unsave entry(char(*),ptr,fixed bin(18),fixed bin),
    lisp_save_ entry(char(*) aligned),
    lisp_reader_$read entry,
    lisp_print_$type_nl entry,
    lisp_static_vars_$print_atom fixed bin(71) external,
    lisp_static_vars_$prin1 ptr external,
    lisp_special_fns_$ncons entry,
    lisp_$apply entry,
    lisp_$eval entry,
    our_stack ptr,
    stack ptr,
    i fixed bin,
    lisp_get_atom_$init_ht entry,
    subr_type fixed bin(2) aligned,
    lisp_static_man_$free_stat_segs entry,
    finishup label static,
    (null,ptr,addr,rel,bit,fixed,mod,substr,addrel,string) builtin;

dcl lisp_static_vars_$evalhook_status bit(36) aligned external,
    lisp_static_vars_$evalhook_atom fixed bin(71) external,
    lisp_$evalhook_off_status bit(36) aligned external;

	dcl lisp_oprs_$init entry;

dcl 1 cclist based,	/* overlay for header of compiled constant list block
		   which is a type of internal static storage known to the
		   lisp garbage collector */
      2 next_ccl_entry ptr,
      2 init_flag fixed bin;



dcl lisp_static_vars_$cleanup_list_exists bit(1) aligned external,
    lisp_static_vars_$cleanup_list fixed bin(71) external,
    lisp_static_vars_$i_am_gcing bit(1) aligned external;

/* The structure of the lisp stack segment -- as known only to this and one other program */

%include lisp_stack_seg;
%include lisp_free_storage;
%include lisp_io;

%include lisp_stack_fmt;
%include lisp_nums;
%include lisp_initial_atoms;
%include lisp_common_vars;
%include lisp_faults;
dcl unm pointer;		/* useless */
%include lisp_name_codes;
%include lisp_atom_fmt;
%include lisp_cons_fmt;
%include lisp_string_fmt;
%include lisp_ptr_fmt;
%include lisp_subr_fmt;
/**/
	/* for the benefit of losers who use uread, add the reference name lisp_old_io_ to us */

	call hcs_$fs_get_path_name(addr(lisp$), xdn, 0, xen, 0);
	call hcs_$initiate(xdn, xen, "lisp_old_io_", 0, 0, null, 0);

		dcl xdn char(168),
		    xen char(32),
		    lisp$ external,
		    hcs_$fs_get_path_name entry(pointer, char(*), fixed bin, char(*), fixed bin(5)),
		     hcs_$initiate entry(char(*), char(*), char(*), fixed bin, fixed bin, pointer, fixed bin(35));


	/* begin by getting arg list ptr and computing size of save area
	   needed.  Then enter begin block */

	call cu_$arg_list_ptr(arg_list_ptr);
	level = level + 1;
	if level >= 2 then save_area_size = lisp_static_vars_$subsys_recurse_save_size;
	    else save_area_size = 0;	/* if first entry, no need to save anything */

first_stack_frame_for_lisp: begin;

dcl arglen fixed bin,
    argptr ptr,
    argname char(arglen) based (argptr),
    code fixed bin,
    old_stat_size fixed bin(18),
    old_stat_ptr ptr,
    old_alloc_info bit(288) aligned,			/* to save lisp_alloc_$allo_info in */
    oldfinishup automatic label variable,
    our_stack pointer,
    stack pointer;

dcl save_area bit(36) aligned dimension(save_area_size);
dcl words_to_be_moved_sas bit(36) aligned based dimension (save_area_size),
    words_to_be_moved_ts bit(36) aligned based dimension(lisp_static_vars_$template_size);

	/* save lisp_static_vars_ in our stack frame */

	if save_area_size ^= 0 then
	     save_area = addr(lisp_static_vars_$lisp_static_vars_) -> words_to_be_moved_sas;

	/* init first part of lisp_static_vars_ from template */

	addr(lisp_static_vars_$lisp_static_vars_) -> words_to_be_moved_ts =
	   addr(lisp_static_vars_$template) -> words_to_be_moved_ts;


/* make a segment for the push down list */

	call lisp_segment_manager_$get_stack(our_stack);
	prog_frame, err_frame, catch_frame, unwp_frame, binding_top, err_recp, eval_frame = our_stack;
	unmkd_ptr = addr(our_stack->stack_seg.begin_unmkd_stack);
	call lisp_segment_manager_$get_stack(stack_ptr);
	stack_ptr = addrel(stack_ptr,2);			/* kludge for pdl ptrs */
	our_stack->stack_seg.marked_stack_bottom = stack_ptr;
	our_stack->stack_seg.stack_ptr_ptr = addr(stack_ptr);
	our_stack->stack_seg.unmkd_stack_bottom = addr(our_stack->begin_unmkd_stack);
	our_stack->stack_seg.in_pl1_code = "1"b;
	our_stack->stack_seg.unmkd_ptr_ptr = addrel(addr(unmkd_ptr),1);	/* so can store only offset */

	/* set addresses of lisp operators in the stack header */

	call lisp_oprs_$init;


	old_alloc_info = lisp_alloc_$alloc_info;
	oldfinishup = finishup;	/* just in case we quit out of an old lisp invocation */
	finishup = done;	/* return for top level return or go to, and return for cleanup handler is"done" */
	lisp_static_vars_$top_level = top_level_err;	/* error return */

	/* save ptr to arg list for (status jcl), (status arg _n) */

	dcl lisp_static_vars_$arg_list_ptr external pointer;

	lisp_static_vars_$arg_list_ptr = arg_list_ptr;

/* now look at argument, and decide what is to be done about unsaving an environment */

	call cu_$arg_ptr_rel(1,argptr,arglen,code, arg_list_ptr);
	if code = 0 then do;
	     if argname = "-boot" then do;	/* if we want bootstrap environment generate it */
		lisp_static_vars_$cur_stat_seg = null;	/* start with no static segs */
		lisp_static_vars_$cur_stat_pos = 262144;/* causes immediate allocation of a static seg
						   on first call to lisp_static_man_ */
		call lisp_segment_manager_$get_lists(lisp_alloc_$cur_seg);	/* get a free storage segment */
		lisp_alloc_$cur_seg -> alloc_segment.next_seg = null();
		lisp_alloc_$cur_seg -> alloc_segment.tally_word.seg_offset = "000000000000000100"b;
		lisp_alloc_$cur_seg -> alloc_segment.tally_word.tally = "111100000000"b;
		lisp_alloc_$cur_seg -> alloc_segment.tally_word.delta = 4;
		lisp_alloc_$consptr = addr(lisp_alloc_$cur_seg->alloc_segment.tally_word);
		consptr_ovly.mod = "101011"b;
		lisp_alloc_$gc_blk_cntr = -1;				/* one 16k block before gc */
		lisp_alloc_$seg_blk_cntr = -16;			/* 16 16k blocks per segment */
		/* make sure garbage collect doesn't occur until initialization done */
		lisp_static_vars_$garbage_collect_inhibit = "1"b;
		call lisp_boot_;
	     end;
	     else do;
	          call lisp_save_$unsave(argname,old_stat_ptr, old_stat_size, code);
				/*      unsave indicated saved environment */
		go to unsaved;
	     end;
	end;
	else do;
		call lisp_save_$unsave("",old_stat_ptr,old_stat_size,code);
			/* 	unsave standard enviroment */
unsaved:		if code ^= 0 then return;	/* 	if error then return to caller */
		lisp_static_vars_$cur_stat_seg = old_stat_ptr;		/* tell lisp_static_man_ about the */
		lisp_static_vars_$cur_stat_pos = old_stat_size;		/* static segs what were just unsaved */
	     end;

	call condition_("cleanup", cleanup_handler);

cleanup_handler: proc;

	if lisp_static_vars_$cleanup_list_exists then do;	/* cleanup feature */
	   if lisp_static_vars_$i_am_gcing
	   then call ioa_$ioa_switch(iox_$error_output,
			"lisp:  Sorry, unable to execute (sstatus cleanup) list.");
				/* should have been done already by lisp_fault_handler_ and lisp_garbage_collector_ */
	   else do;
		dcl stack pointer;
		lisp_static_vars_$cleanup_list_exists = "0"b;	/* once only */
		stack = stack_ptr;
		stack_ptr = addr(stack -> temp(3));
		do stack -> temp(1) = lisp_static_vars_$cleanup_list
		     repeat (stack -> temp_ptr(1) -> cons.cdr)
		     while (stack -> temp_type(1) = Cons);
		   stack -> temp(2) = stack -> temp_ptr(1) -> cons.car;
		   call lisp_$eval;
		   end;
		end;
	   end;

	lisp_static_vars_$ignore_faults = "1"b;		/* ignore while throwing away environment */
	call lisp_io_control_$cleanup;
	call lisp_segment_manager_$free_stack(our_stack);	/* free push down list segment */
	stack = ptr(stack_ptr,0);
	call lisp_segment_manager_$free_stack(stack);
	finishup = oldfinishup;	/* reset finishup to old value */
	do while(lisp_alloc_$cur_seg ^= null());
	     stack = lisp_alloc_$cur_seg;
	     lisp_alloc_$cur_seg = stack -> alloc_segment.next_seg;
	     call lisp_segment_manager_$free_lists(stack);
	end; 
	lisp_alloc_$alloc_info = old_alloc_info;
	call lisp_static_man_$free_stat_segs;		/* free any static segs we were using */
	if level >= 2 then			/* this was recursive entry, restore contents of lisp_static_vars_ */
		addr(lisp_static_vars_$lisp_static_vars_) -> words_to_be_moved_sas = save_area;
	level = level - 1;
  end cleanup_handler;
	our_stack -> stack_seg.true = t_atom;
	our_stack -> stack_seg.nil = nil;
	lisp_static_vars_$property_list_of_nil = nil;	/* clear nil's strange property list */
	lisp_static_vars_$cleanup_list = nil;		/* clear cleanup list */

	call lisp_io_control_$init;
	lisp_static_vars_$emptying_buffers = -1;	/* init variable used by lisp_default_handler_ */

	/* allow garbage collections and initialize the reader */

	dcl lisp_static_vars_$garbage_collect_inhibit bit(1) aligned external,
	    lisp_static_vars_$rdr_state fixed bin aligned external;

	lisp_static_vars_$garbage_collect_inhibit = "0"b;
	lisp_static_vars_$rdr_state = 0;

	/* initialize the random number memory */

	lisp_static_vars_$hi_random =
	     "010110111111110010001001011011011111001101101010101110000111001001001010"b;

	call lisp_fault_handler_$init;		/* set up the fault and quit mechanism */
	lisp_static_vars_$quit_handler_flag = "0"b;	/* allow lisp to handle quits */
	call condition_("any_other", lisp_default_handler_);
	addr(SLASH)->based_ptr -> atom.value = addr(errlist)->based_ptr -> atom.value;	/* for auto-start */
	lisp_static_vars_$ignore_faults = "0"b;

	/* establish pi handler */

	on program_interrupt begin;
		dcl damage bit(1) aligned,
		    lisp_fault_handler_$check_for_damage entry(bit(1)aligned);

		call lisp_fault_handler_$check_for_damage(damage);	/* stacks may have been screwed,
								   since we probably took a fault */
	
ask_ctrl:		if lisp_static_vars_$masked.against.tty then
		     if damage then call ioa_$ioa_switch(iox_$error_output, "Warning: was in (nointerrupt t) mode at the time");
			else if lisp_static_vars_$mulpi_state ^= -1 then; /*Let it get queued */
			else do;
			/* Don't allow pi here, especially since might have  been collecting garbage */
			call ioa_$ioa_switch(iox_$error_output, "lisp: (nointerrupt t) mode, unable to accept pi.");
			go to leave_pi;
			end;
		lisp_static_vars_$quit_handler_flag = "0"b;
		if ^lisp_static_vars_$masked.against.tty then
		string(lisp_static_vars_$masked.against) = ""b;	/* so ctrl chars will be accepted */
		call lisp_default_handler_$program_interrupt;	/* ask for a ctrl char */
		/* if fault handler returns, on unit returns and program will restart */
leave_pi:		end;

/* eval supervisor loop */

	read_print_nl_sync = "1"b;
	stack = stack_ptr;
	addr(ctrlR)->based_ptr->atom.value = nil;

enter_loop:
	lisp_static_vars_$evalhook_status = lisp_$evalhook_off_status;
	addr(lisp_static_vars_$evalhook_atom)->based_ptr->atom.value,
	addr(ctrlQ)->based_ptr->atom.value,
	addr(ctrlW)->based_ptr->atom.value = nil;	/* set i/o switches */

	stack_ptr = addr(stack->temp(3));
	stack -> temp(1) = addr(SLASH)->based_ptr->atom.value;
	do while(stack->temp(1)^=nil);		/* eval all errlist items */
	     stack->temp(2) = stack->temp_ptr(1)->cons.car;
	     stack->temp(1) = stack->temp_ptr(1)->cons.cdr;
	     call lisp_$eval;
	end;
	stack->temp(1) = STAR;
loop:	stack_ptr = addr(stack->temp(3));
	addr(STAR)->based_ptr->atom.value = stack->temp(1);
	if toplevel ^= nil
	then stack->temp(1) = toplevel;
	else do;
		stack -> temp(2) = stack -> temp(1);	/* apply print to it */
		if lisp_static_vars_$prin1->atom.value = nil | lisp_static_vars_$prin1->atom.value = 0
		then stack -> temp(1) = lisp_static_vars_$print_atom;
		else stack -> temp(1) = lisp_static_vars_$prin1->atom.value;
		call lisp_special_fns_$ncons;
		call lisp_$apply;
		if addr(ctrlQ) -> based_ptr -> atom.value = nil	/* if input to be got from console */
		then do;
tty_loop:			call lisp_print_$type_nl;		/* so prompt the user */
			stack_ptr = addr(stack -> temp(2));
			stack -> fixnum_fmt.type_info = fixnum_type;
			stack -> fixedb = 0;		/* tell reader its argcount */
			call lisp_reader_$read;
			end;
		else do;					/* input from file (unless near eof) */
uread_loop:		stack_ptr = addr(stack -> temp(3));
			addr(stack -> temp(2))->fixnum_fmt.type_info = fixnum_type;
			addr(stack -> temp(2))->fixedb = -2;	/* giving reader one arg, which is */
			stack -> flonum_fmt.type_info = flonum_type;
			stack -> fixedb = 0;		/* an impossible flonum */
			call lisp_reader_$read;
			if stack -> flonum_fmt.type_info = flonum_type
			 then if stack -> fixedb = 0		/* this file has come to the end, switch */
			  then go to tty_loop;		/* back to the tty. Prompt user then call
							   read again to close the file, clear ^q,
							   and switch to the tty */
			end;
		addr(PLUS)->based_ptr -> atom.value = addr(MINUS)->based_ptr -> atom.value;
		addr(MINUS)->based_ptr -> atom.value = stack -> temp(1);
	     end;
	stack_ptr = addr(stack -> temp(2));
	call lisp_$eval;
	go to loop;

	/*** come here when err'ing all the way back to top level ***/
	/*** resets the reader then re-enters the top-level loop ****/

top_level_err:
	stack = stack_ptr;
	stack_ptr = addr(stack -> temp(2));
	stack -> temp(1) = nil;
	call lisp_io_control_$clear_input;		/* flush tty buffer & resetread the stream */
	string(unmask.against) = ""b;
	if lisp_static_vars_$pending_ctrl then call lisp_fault_handler_$set_mask(unmask);
	go to enter_loop;



done:	call reversion_("cleanup");		/* don't want cleanup handler executed twice */
	lisp_static_vars_$cleanup_list_exists = "0"b;	/* don't do user cleanup handler */
	call cleanup_handler;
	return;			/* escape out of begin block and proc */


end first_stack_frame_for_lisp;		/* end of big begin block */

save:	entry;

/* entry for "save" function, which saves environments */

	call lisp_io_control_$empty_all_buffers;
	stack = addrel(stack_ptr,-2);

	stack -> temp(1) = stack -> temp_ptr(1) -> cons.car;	/* error trapped by fault here */
retry_save:						/* come here to try with better arg */
	if stack -> temp_type36(1) & String36 then call lisp_save_(stack -> temp_ptr(1) -> lisp_string.string);
	else if stack -> temp_type36(1) & Atsym36 then call lisp_save_(stack -> temp_ptr(1) -> atom.pname);
	else do;
		our_stack = unmkd_ptr;
		unmkd_ptr = addrel(our_stack,2);
		our_stack -> errcode(1) = lisp_error_table_$bad_arg_correctable;
		our_stack -> errcode(2) = fn_save;
		call lisp_error_;
		go to retry_save;
	     end;
	if lisp_static_vars_$ignore_faults then;
		else return;				/* save crapped out before munging environment,
							   give loser another chance to save */

	/* otherwise, save won so cleanup and quit */


lisp$quit:	entry;

/* this is the "quit"  function, which causes a return out of the LISP subsystem */


	call lisp_io_control_$empty_all_buffers;
	goto finishup;	/* finishup is set to "done", via non-local go to */


     end;
