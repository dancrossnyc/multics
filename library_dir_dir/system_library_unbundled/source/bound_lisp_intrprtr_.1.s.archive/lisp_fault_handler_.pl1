/* **************************************************************
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1973 *
   *                                                            *
   ************************************************************** */
lisp_fault_handler_:
	procedure (a_fault_code, pbr, action);


/* modified 14 Nov 73 by DAM to change ^h to ^b and get rid of echofiles cruft */
/* modified 74.06.03 by DAM for new arrays */
/* Modified 78.01.05 by BSG for mulquit/mulpi */



dcl a_fault_code fixed bin,
    fault_code fixed bin,
    pbr ptr,
    action fixed bin,		/* what to do when we return */
    chr char(1),
     lisp_static_vars_$ignore_faults bit(1) static external,
    lisp_static_vars_$space_names_atom external pointer,
    lisp_static_vars_$zunderflow fixed bin(71) external,
    lisp_static_vars_$quotient fixed bin(71) external,
    lisp_static_vars_$transparent bit(1) static external,
    transparent bit(1) def (lisp_static_vars_$transparent),	/* "1"b makes lisp transparent to quits, for (ioc z) */
	lisp_static_vars_$quit_handler_flag bit(1) external,
    qitf bit(1) def (lisp_static_vars_$quit_handler_flag),	/* detects re-entrance of quit handler */
    ctrls(100) char(4) aligned static,			/* buffer for deferred ctrl chars */
    (firstctrl, lastctrl) fixed bin static init(1),	/* ptrs into the circular buffer ctrls */
    deferred_alrm_timer bit(1) static init("0"b),		/* buffer for deferred timer */
    deferred_cput_timer bit(1) static init("0"b),		/* .. */
    inbuf char(132) aligned,
    nelemt fixed bin,

    ctlchars char(50) static varying init(	/* defined ctrl chars */
		"acdghqrstvwxz$.@\]^b?"),	/* - z quits, $ calls db, others are standard */
					/* 0,1,2 cause user interrupt on channel 0,1,2 respectively */
					/* . is a no-op for quit-start-ing */
    unm ptr,
    iog_unm ptr,
    errcode(2) fixed bin(35) aligned based(unm),
    unmtop ptr,
    ercode fixed bin aligned based,
    stack ptr,
    tstack ptr,
    1 array_head based aligned,
      2 ndims fixed bin(17) unaligned,
      2 infop fixed bin(17) unaligned,
      2 first_instr bit(36) aligned,
    ndims fixed bin,
    i fixed bin,
    argsp ptr,
    iocidx fixed bin,
    esw fixed bin,				/* entry switch, 0 = quit, 1 = ioc/iog,
					   2 = from gc, -1 = ctrl_from_reader */
    iogsw bit(1),				/* 1 = iog, 0 = ioc */
    intrp ptr,			/* -> interrupt fcn for ctrl_b_break */

	/* entry points called */

    (ioa_$ioa_switch, ioa_$ioa_switch_nnl) ext entry options(variable),
    lisp_get_atom_ entry(char(*) aligned, fixed bin(71)),
    rdr_save_f bit(1),
    lisp_$eval entry,
    debug ext entry,
    lisp_prog_fns_$lisp_err entry(bit(1)aligned),			/* direct interface to the unwinder */
    iox_$control entry(ptr, char(*), ptr, fixed bin(35)),
    iox_$get_line entry(ptr, ptr, fixed bin, fixed bin, fixed bin(35)),
    iox_$put_chars entry(ptr, ptr, fixed bin, fixed bin(35)),
    iox_$user_io ptr external,
    iox_$error_output ptr external,
    io_status fixed bin(35),
    lisp_error_  entry,
    lisp_alloc_ entry(fixed bin, fixed bin(71)),
    lisp_$apply entry,
    lisp_segment_manager_$shrink_stacks entry,
    lisp_io_control_$opena entry,
    lisp_io_control_$close entry,
    lisp_special_fns_$xcons entry,
    lisp_special_fns_$ncons entry,
    lisp_special_fns_$cons entry,

	/* variables in lisp_static_vars_ */

    lisp_static_vars_$question_mark fixed bin(71) aligned external,
    lisp_static_vars_$array fixed bin(71) aligned external,
    array fixed bin(71) aligned defined (lisp_static_vars_$array),
    lisp_static_vars_$arrayindex fixed bin(71) aligned external,
    arrayindex fixed bin(71) aligned defined(lisp_static_vars_$arrayindex),
   (lisp_static_vars_$mulquit_state, lisp_static_vars_$mulpi_state) fixed bin (17) external,

	/* obarray format */

    htptr ptr,
    htpos fixed bin,
    1 obarray_struct based(htptr)aligned,
      2 array_accessing_code(14)bit(36)aligned,
      2 ht (0:510) fixed bin(71),
      2 char_objects (0:127) fixed bin(71);


	/* dcl for the CTRL/? feature */

dcl 1 v based aligned,
      2 lngth fixed bin(21),
      2 string char(36),
    lisp_static_vars_$i_am_gcing bit(1) external aligned,
    (ms_tti init(";waiting for input from terminal.
"),  ms_run init(";running.
"),  ms_gc  init(";garbage collection.
"),  ms_masked init(";in (nointerrupt t) mode.
")  ) static char(36) varying options (constant),
     NL char (1) static options (constant) init ("
");

dcl (null, addr, addrel, ptr, index, substr, hbound, lbound, length, rel, size, binary, fixed, unspec, string) builtin;

dcl conversion condition;

	/* Error Codes */

dcl (lisp_error_table_$bad_arg_correctable,
     lisp_error_table_$car_cdr_error,
     lisp_error_table_$stack_loss_error,
     lisp_error_table_$store_function_misused,
     lisp_error_table_$underflow_fault,
     lisp_error_table_$zerodivide_fault) fixed bin external,
    bad_arg_correctable fixed bin defined lisp_error_table_$bad_arg_correctable,
    car_cdr_error fixed bin defined lisp_error_table_$car_cdr_error,
    stack_loss_error fixed bin defined lisp_error_table_$stack_loss_error,
    store_function_misused fixed bin defined lisp_error_table_$store_function_misused,
    underflow_fault fixed bin defined lisp_error_table_$underflow_fault,
    zerodivide_fault fixed bin defined lisp_error_table_$zerodivide_fault;

	/* Declarations for cleanup feature */

dcl lisp_static_vars_$cleanup_list_exists bit(1) aligned external,
    lisp_static_vars_$gc_unwinder_kludge external label,
    lisp_static_vars_$activate_gc_unwinder_kludge bit(1) aligned external,
    1 argument_list based aligned,
      2 argument_count fixed bin(17) unaligned,
      2 argument_list_format fixed bin(17) unaligned,
      2 descriptor_count fixed bin(17) unaligned,
      2 padding fixed bin(17) unaligned,
      2 argument_pointer (1) pointer,
    cleanup condition,
    based_label_var based label variable,
    cu_$stack_frame_ptr entry () returns(pointer);

%include stack_frame;
%include lisp_faults;
%include lisp_stack_seg;
%include lisp_array_fmt;
%include lisp_io;
%include lisp_nums;
%include lisp_name_codes;
%include lisp_stack_fmt;
%include lisp_common_vars;
%include lisp_ptr_fmt;
%include lisp_atom_fmt;
%include lisp_string_fmt;
%include lisp_cons_fmt;

	fault_code = a_fault_code;
	call save_state;

save_state:  proc;

	/* save status of key variables, rdr, ... */

	stack = stack_ptr;
	call save_state_only;

	/* reset these statuses */

	gc_inhibit = "1"b;			/* shut off gc since the routine we interrupted
					   might have a lisp object in the aq or bp or
					   even a lisp object on the pdl without type bits */
	lisp_static_vars_$rdr_state = 0;	/* reset reader to normal state */
end save_state;


save_state_only:  procedure;

	unm = unmkd_ptr;
	unmkd_ptr = addrel(unm, size(fault_save));
	fault_save.prev_frame = rel(err_recp);
	fault_save.stack_ptr = rel(stack);
	fault_save.sv_gc_inhibit = gc_inhibit;
	fault_save.sv_masked = masked;
	fault_save.code1 = 0;			/* no err msg yet */
	unspec(fault_save.sv_array_info) = unspec(ptr(unm, ""b) -> stack_seg.array_info_for_store);
	fault_save.sv_array_offset = ptr(unm, ""b) -> stack_seg.array_offset_for_store;
	fault_save.sv_rdr_label = rdr_label;
	fault_save.sv_rdr_ptr = rdr_ptr;
	fault_save.sv_rdr_state = rdr_state;
	err_recp = unm;

end save_state_only;

	/* determine what kind of fault we took, and go handle it */

	unmtop = unmkd_ptr;			/* for pushing error codes */
	if fault_code = Alarmclock_fault then go to alarm;
	else if fault_code = Cput_fault then go to alarm;
	else if fault_code = Car_cdr_fault then go to car_cdr_of_num;
	else if fault_code = Quit_fault then go to Quit;
	else if fault_code = Array_fault then go to array_lossage;
	else if fault_code = Old_store_fault then go to emulate_old_style_store;
	else if fault_code = Zerodivide_fault then go to handle_zerodivide;
	else if fault_code = Underflow_fault then go to handle_underflow;
	else if fault_code = Pi_fault then go to handle_pi;

	/* undefined fault code, barf and take as quit */

	call ioa_$ioa_switch(iox_$user_io, "^/lisp_fault_handler_: undefined fault code ^d.", fault_code);

	/* quit handler, accepts 1 "control" character */

Quit:	/* if this is 2nd quit, previous invocation of quit handler must have
   	   lost, so pass this quit on to standard system quit handler */

	if transparent then do;		/* transparent quit - pass it along & clear flag */
	     transparent = "0"b;
	     action = 2;
	     go to exit_nzq;
	     end;
	if qitf then do;
	     action = 2;
	     go to exit_nzq;
	     end;
	qitf = "1"b;		/* remember that we are in lisp quit routine */
	esw = 0;
	if masked.against.tty then go to masked_quit;



	/* check for user quit-control */

	lisp_static_vars_$read_print_nl_sync = "1"b;	/* Get newlines flushed */
	if fault_code = Pi_fault then;		/* program_interrupt falls through */
	else if lisp_static_vars_$mulquit_state = -1 then; /* Fall through to ITS-like handling */
	else if lisp_static_vars_$mulquit_state = -2 then go to ctrl_z_handler; /* Let it go through */
	else do;					/* Signal user interrupt */
	     i = lisp_static_vars_$mulquit_state;
	     go to ioc_num_not_2;
	end;

	/* ask for a control character */

ask_for_ctrl:
	lisp_static_vars_$read_print_nl_sync = "1"b;		/* user hit newline after typing the ctrl char */
	call ioa_$ioa_switch_nnl(iox_$user_io, "CTRL/");
	call iox_$get_line(iox_$user_io, addr(inbuf),  length(inbuf), nelemt, io_status);
ctrl_aa:
	chr = substr(inbuf, 1, 1);
	if nelemt < 2 then go to ask_for_ctrl;
	else if chr >= "0" & chr <= "9" then go to ctrl_num;
	else if nelemt > 2 then do;
not_ctrl:		call ioa_$ioa_switch(iox_$user_io, "lisp: ""^a"" is not a control character.", 
					substr(inbuf, 1, nelemt-1));
		go to ask_for_ctrl_0;			/* reject it and try again */
						/* this keeps the user from screwing himself by
						   typing <QUIT> start */
		end;


dispatch:	/* Make the character lower case if it as a letter */

	if chr < "A" then go to dispatch_1;
	if chr > "Z" then go to dispatch_1;
	  unspec(chr) = unspec(chr) | "000100000"b;		/* or in 40 */
dispatch_1:
	go to proc(index(ctlchars, chr));



	/* number entered -- is number of user interrupt to signal */

ctrl_num:	on conversion go to not_ctrl;
	i = binary(substr(inbuf, 1, nelemt-1), 17);
	revert conversion;

ioc_num:	if i = 2 then go to proc(1);	/* CTRL/2 handle specially as CTRL/a */
ioc_num_not_2:

	/* signal user interrupt on channel i with argument 'ioc */

	stack_ptr = addr(stack -> temp(4));
	if i < 0 then go to bad_int_num;
	 else if i >= 21 then go to bad_int_num;
	stack -> temp(1) = user_intr_array(i);
	if stack -> temp(1) = nil then go to bad_int_num;
	stack -> temp(1) = stack -> temp_ptr(1) -> atom.value;
	qitf = "0"b;
	if stack -> temp(1) = nil then go to exit1;	/* not anabled */
	call lisp_get_atom_("ioc", stack -> temp(2));
	stack -> temp(3) = nil;
	call lisp_special_fns_$cons;
	call lisp_$apply;
bad_int_num:	/* just ignore */
	go to exit1;


proc(0):	if esw = 1 then go to ioc_retn;		/* ignore unknown chars from ioc, since other sys might have */
	call ioa_$ioa_switch(iox_$user_io, "lisp: undefined control character ""^1a""", chr);
	if esw < 0 then go to exitv(-1);		/* ctrl_from_reader - that's all */
ask_for_ctrl_0:
	if esw = 2 then if firstctrl ^= lastctrl then go to exitv(2);	/* for deferred chars from gc,
								   allow retry only for last */
	go to ask_for_ctrl;


proc(2):	/* CTRL/c gags the gc messages */

	addr(ctrlD) -> based_ptr -> atom.value = nil;
	go to exit1;

proc(3):	/* CTRL/d turns on the gc messages */

	addr(ctrlD) -> based_ptr -> atom.value = t_atom;
	go to exit1;


proc(15):	/* CTRL/. is a no-op which allows you to speed
	   up a slow multics by causing fake interactions */

exit1:	go to exitv(esw);
exitv(0):	action = 0;
	go to exit;


proc(4):	/* CTRL/g causes quit all the way up to top level */
ctrl_g_handler:
	call ioa_$ioa_switch(iox_$user_io, "Quit");
unwind_to_top_level:
	err_frame = ptr(unmkd_ptr, ""b);			/* get rid of errsets so we can can unwind
							   all the way up to top level */
quitter:	tty_input_chan -> iochan.ioindex = 0;
	tty_input_chan -> iochan.iolength = 0;	/* clear input buffer */
	tty_output_chan -> iochan.ioindex = 0;			/* clear the printer's output buffer */
	qitf = "0"b;
	call lisp_prog_fns_$lisp_err("0"b);				/* unwind */

proc(12):	/* CTRL/x causes quit to first errset */

	call ioa_$ioa_switch(iox_$user_io, "quit");		/* note difference between this and the ^g msg */
	go to quitter;

proc(13): /* CTRL/z causes standard Multics QUIT */
ctrl_z_handler:

	qitf = "0"b;				/* allow pi'ing back in */

	if esw ^= 0 then do;			/* not already in a quit, must make one */
	     dcl quit condition;
do_ctrl_z:
	     transparent = "1"b;			/* make the quit fall through lisp */
	     lisp_static_vars_$ignore_faults = "1"b;
	     on cleanup transparent, lisp_static_vars_$ignore_faults = "0"b;
	     signal quit;
	     lisp_static_vars_$ignore_faults = "0"b;
	     transparent = "0"b;
	     go to exit1;
	     end;
	action = 2;
	go to exit;				/* action 2 is pass quit to next on-unit */

proc(14): /* CTRL/$ causes debug to be called */

	lisp_static_vars_$ignore_faults = "1"b;
	call ioa_$ioa_switch(iox_$user_io, "db");
	call debug;
	lisp_static_vars_$ignore_faults = "0"b;
	go to exit1;


proc(5):	/* CTRL/h causes user interrupt number 1 -- obsolete but keep around for a while */
proc(20):  /* CTRL/b causes a break on user interrupt 1 */

	intrp = addr(user_intr_array(1)) -> based_ptr;

ctrl_b_break:
	tty_input_chan -> iochan.ioindex = 0;		/* clear input buffer */
	tty_input_chan -> iochan.iolength = 0;
	tty_output_chan -> iochan.ioindex = 0;			/* clear printer buffer */
	stack_ptr = addr(stack -> temp(4));
	stack -> temp(1) = intrp -> atom.value;
	if stack -> temp(1) ^= nil then do;
		stack -> temp(2) = nil;
		stack -> temp(3) = nil;		/* make the arg list */
		call lisp_special_fns_$cons;
		qitf = "0"b;
		call lisp_$apply;
		end;
	go to exit1;


	/* control characters that change i/o switches -- q, r, s, t, w, v */

proc(6): /* CTRL/q switches the rdr to input from uread channel */

	addr(ctrlQ) -> based_ptr -> atom.value = t_atom;
	go to exit1;		/* make sure the rdr doesn't get stuck
				   in tty input wait after ^q is issued */
				/* this assurance is now done by people who unwind err asynchronously
				   created fault_save's (i.e. our 'exit' routine) */

proc(8):  /* CTRL/s switches the reader back to input from the tty */

	addr(ctrlQ) -> based_ptr -> atom.value = nil;
	go to exit1;					/* let the reader finish what it is doing
							   before stopping since user won't notice
							   delay anyway.... */

proc(7):	/* CTRL/r activates output to uwrite channel from printer */

	addr(ctrlR) -> based_ptr -> atom.value = t_atom;
	go to exit1;					/* on next character output, printer
							   will notice the switch */

proc(9):	/* CTRL/t shuts off the uwrite channel */

	addr(ctrlR) -> based_ptr -> atom.value = nil;
	go to exit1;					/* the printer will soon gag itself */

proc(10):	/* CTRL/v turns on output to the tty */

	addr(ctrlW) -> based_ptr -> atom.value = nil;
	go to exit1;					/* printer will start typing out on next char */

proc(11):	/* CTRL/w turns off output to the tty */

	addr(ctrlW) -> based_ptr -> atom.value = t_atom;
	if esw ^= 0 then go to exit1;	/* suppress resetwrite unless entered by quit */
	call iox_$control(iox_$user_io, "start", null(), io_status);
	call iox_$control(iox_$user_io, "resetwrite", null(), io_status);
	tty_output_chan -> iochan.ioindex = 0;			/* if he quit in the middle of printing a long
							   list, make sure it stops right away */
	go to exit1;


proc(1):  /* CTRL/a updates the value of the atomic symbol ^a */
	/* and causes an interrupt to channel 2 */

	dcl lisp_static_vars_$ctrlA fixed bin(71) aligned external,
	    ctrlA fixed bin(71) aligned defined (lisp_static_vars_$ctrlA);




	if addr( addr(ctrlA)->based_ptr->atom.value) -> lisp_ptr_type & Fixed36
		then addr(ctrlA)->based_ptr->fixedb =
		     addr(ctrlA) -> based_ptr->fixedb + 1;		/* if its a number, add 1 to it */
	else do;
		addr(ctrlA) -> based_ptr -> fixnum_fmt.type_info = fixnum_type;
		addr(ctrlA) -> based_ptr -> fixedb = 0;			/* otherwise, set it to 0 */
		end;
	intrp = addr(user_intr_array(2)) -> based_ptr;
	go to ctrl_b_break;


proc(16):	/* CTRL/@ causes user interrupt 0 */

	intrp = addrel(addr(user_intr_array(1)),-2) -> based_ptr;	/* user_intr_array(0) */
	go to ctrl_b_break;


proc(17):	/* CTRL/\\ causes user interrupt 14. */

	intrp = addr(user_intr_array(14)) -> based_ptr;
	go to ctrl_b_break;

proc(18):	/* CTRL/] causes user interrupt 15. */

	intrp = addr(user_intr_array(15)) -> based_ptr;
	go to ctrl_b_break;

proc(19):	/* CTRL/^ causes user interrupt 16. */

	intrp = addr(user_intr_array(16)) -> based_ptr;
	go to ctrl_b_break;

proc(21):	/* CTRL/? finds out what the hell is going on. */
	/* If we get here, at least it wasn't garbage collection */

	if esw = 0 then if fault_save.sv_rdr_state = 1 then go to proc_21_aa;
	 			else go to proc_21_bb;
	 else if rdr_state = 1 then do;
proc_21_aa:	intrp = addr(ms_tti);
		nelemt = length(ms_tti);
		end;
	 else do;
proc_21_bb:	intrp = addr(ms_run);
		nelemt = length(ms_run);
		end;
whats_going_on:
	call iox_$put_chars(iox_$error_output, addr(intrp->v.string), nelemt, io_status);
	go to exit1;

	/* the lisp ioc fsubr */

ioc:	 entry;

	iogsw = "0"b;
	stack = addrel(stack_ptr, -2);
	stack -> temp(1) = stack -> temp_ptr(1) -> cons.car;	/* get argument */
iogjoin:
	esw = 1;
	if stack -> temp(1) = nil then				/* special case nil */
		go to ioc_exit;
	else if stack -> temp_type36(1) & Fixed36 then do;		/* numeric arg, signal user interrupt */
	     iocidx = -1;
	     i = stack -> fixedb;
	     go to ioc_num;
	     end;
	 else if stack -> temp_type36(1) & Atsym36 then;
	  else go to ioc_exit;					/* invalid arg, just ignore since is fsubr */

	/* split up pname of atom into characters, apply them as if typed in as ctrl characters */

	iocidx = 1;
exitv(1):
ioc_retn:	if iocidx < 0 then go to ioc_exit;			/* return from ioc_num */
	if iocidx > stack -> temp_ptr(1) -> atom.pnamel then
				go to ioc_exit;		/* done the whole pname */
	chr = substr(stack -> temp_ptr(1) -> atom.pname, iocidx, 1);
	iocidx = iocidx + 1;
	go to dispatch;

ioc_exit:	if iogsw then go to iog_aa;
	stack_ptr = addr(stack -> temp(2));
	stack -> temp(1) = t_atom;
	return;


	/* we just went into (nointerrupt nil) mode and there were
	   deferred ctrl characters.  We can now process them */

do_ctrl:
	esw = 2;
exitv(2):
	if firstctrl = lastctrl then go to do_ctrl_ret;
	substr(inbuf, 1, 4) = ctrls(firstctrl);		/* If we get interrupted here, the worst that
							   can happen is a ctrl char will get done
							   twice, which is not so bad. */
	if firstctrl < hbound(ctrls, 1) then firstctrl = firstctrl + 1;
	  else firstctrl = lbound(ctrls, 1);
	nelemt = index(substr(inbuf, 1, 4), NL);
	if nelemt = 0 then nelemt = 4;
	go to ctrl_aa;			/* process this ctrl char & return to exitv(2) for next */

handle_zerodivide:
	stack_ptr = addr(stack -> temp(4));
	stack -> temp(3) = nil;
	stack -> temp(1) = lisp_static_vars_$quotient;
	addr(stack -> temp(2)) -> fixnum_fmt.type_info = fixnum_type;
	addr(stack -> temp(2)) -> fixedb = 0;
	call lisp_special_fns_$cons;
	call lisp_special_fns_$cons;
	unmkd_ptr = addrel(unmtop, 2);
	fault_save.code1, unmtop -> ercode = zerodivide_fault;
	call lisp_error_;
	action = 0;		/* return means hack like divov t mode */
	go to exit_nzq;


handle_underflow:
	stack_ptr = addr(stack -> temp(2));
	stack -> temp(1) = lisp_static_vars_$zunderflow;
	call lisp_special_fns_$ncons;
	unmkd_ptr = addrel(unmtop, 2);
	fault_save.code1, unmtop -> ercode = underflow_fault;
	call lisp_error_;
	action = 0;		/* return means hack like zunderflow t mode */
	go to exit_nzq;

handle_pi:

	if lisp_static_vars_$mulpi_state = -1 then go to Quit;	/* Normal ITS-like lisp */
	if masked.against.tty
	then do;
		if lisp_static_vars_$mulpi_state = -2
		then inbuf = "g" || NL;
		else inbuf = cv_interruptno (lisp_static_vars_$mulpi_state) || NL;
		go to masked_ctrl_save;
	     end;
	if lisp_static_vars_$mulpi_state = -2 then go to unwind_to_top_level; /* Signal ^g */

	/* Must be interrupt number */

	i = lisp_static_vars_$mulpi_state;
	go to ioc_num;


	
/* some code for handling stack overflows */

stack_loss:  entry(which_stack);	/* non-fatal stack overflow, give fail-act */

dcl which_stack fixed bin parameter;

	call save_state;		/* push a fault frame */

	on condition(cleanup) call lisp_segment_manager_$shrink_stacks;	/* if guy (ioc g)'s out,
									   set stacks back to norm
									   size so can detect again */
	unmtop = unmkd_ptr;
	unmkd_ptr = addrel(unmtop, 2);
	fault_save.code1, unmtop -> ercode = stack_loss_error;

	/* push name of pdl that overflew onto stack */

	tstack = stack_ptr;
	stack_ptr = addr(tstack -> temp(2));
	tstack -> temp(1) = lisp_static_vars_$space_names_atom -> atom.value;
	do while(which_stack > 1);
	   tstack -> temp(1) = tstack -> temp_ptr(1) -> cons.cdr;
	   which_stack = which_stack - 1;
	   end;
	tstack -> temp(1) = tstack -> temp_ptr(1) -> cons.car;

	call lisp_error_;

	stack_ptr = tstack;
	go to exit_nzq;



wipe_stack:  entry;		/* fatal stack overflow, cleanup as best we can and ctrl/g */
			/* note that this routine is only called when the stack is
			   so full that it cannot be expanded (i.e. several pdl-overflow's have occurred */

dcl damage bit(1) aligned;

	call undamage_the_stacks;

undamage_the_stacks:  proc;


dcl stattic_ptr (0:6) ptr aligned based(addr(unmkd_ptr)),
    our_stack ptr,
    stattic_bound bit(18) static init("001111111111110011"b),	/* 12 down from 64K */
					/**** Note this kludgey stuff must be coordinated with lisp_segment_manager_ ****/
    stack_ptr_max bit(18) static init("001111111111111110"b),	/* 2 down from 64K */
    stack_ptr_kludge bit(18) static init("001111111111111110"b);
dcl ioa_$ioa_stream entry options (variable),
    hcs_$truncate_seg entry(pointer, fixed bin(18), fixed bin(35)),
    lisp_static_vars_$top_level external label;

	damage = "0"b;			/* assume that we are winning */
	do i = 0 to 6;			/* check for fatal damage */
	   if rel(stattic_ptr(i)) > stattic_bound then damage = "1"b;	/* this would be fatal damage */
	   end;
	if damage then do;
	   call ioa_$ioa_switch(iox_$error_output,
		"lisp:  Fatal stack damage.  Major restart undertaken.  Bindings will not be restored.");
	   if string(masked.against)
	   then call ioa_$ioa_switch(iox_$error_output,
		"Warning:  Either a garbage collection was in progress or (nointerrupt t) mode was in effect.");
	   our_stack = ptr(unmkd_ptr, 0);	/* base of unmkd pdl */
	   prog_frame, err_frame, catch_frame, binding_top, 	/* "major restart" */
		err_recp, eval_frame = our_stack;
	   unmkd_ptr = addr(our_stack -> stack_seg.begin_unmkd_stack);
	   stack_ptr = ptr(stack_ptr, 2);
	   call hcs_$truncate_seg(unmkd_ptr, fixed(rel(unmkd_ptr), 18), 0);
	   call hcs_$truncate_seg(stack_ptr, fixed(rel(stack_ptr), 18), 0);
	   lisp_static_vars_$garbage_collect_inhibit = "0"b;
	   lisp_static_vars_$rdr_state = 0;
	   go to lisp_static_vars_$top_level;					/* "major restart" */
	   end;

	/* now check for non fatal damage - stack_ptr or unmkd_ptr slightly out of bounds */

	if rel(stack_ptr) >= stack_ptr_max then do;
		stack_ptr = ptr(stack_ptr, stack_ptr_kludge);
		damage = "1"b;
		end;
	if rel(unmkd_ptr) >= stack_ptr_max then do;
		unmkd_ptr = ptr(unmkd_ptr, stack_ptr_kludge);
		damage = "1"b;
		end;
	if damage then call ioa_$ioa_switch(iox_$error_output,
		"Warning:  There was minor damage to the lisp stacks.");

end undamage_the_stacks;

	/* attempt to ctrl/g.  If we were in garbage collector, will lose big,
	   but have already warned loser in that case so I guess it's all right */

	err_frame = ptr(unmkd_ptr, ""b);
	go to quitter;



check_for_damage: entry(a_damage);		/* called by lisp pi handler */

dcl a_damage bit(1) aligned parameter;

	call undamage_the_stacks;
	a_damage = damage;
	return;

	/* The lisp iog fsubr:
	    binds ^q, ^r, ^w
	    then do first arg like ioc
	     then eval remaining args
	    then unbind & return value of last arg */

iog:	entry;

	iogsw = "1"b;
	stack = addrel(stack_ptr, -2);		/* -> arg list for fsubr */
	stack_ptr = addr(stack -> temp(9));		/* room for binding block */
	stack -> temp(8) = stack -> temp_ptr(1) -> cons.car;	/* get 1st arg */

	/* Make binding block for ^q, ^r, ^w */

	stack -> temp(3) = ctrlQ;
	stack -> temp(2) = stack -> temp_ptr(3) -> atom.value;
	stack -> temp(5) = ctrlR;
	stack -> temp(4) = stack -> temp_ptr(5) -> atom.value;
	stack -> temp(7) = ctrlW;
	stack -> temp(6) = stack -> temp_ptr(7) -> atom.value;
	iog_unm = unmkd_ptr;
	unmkd_ptr = addrel(iog_unm, 2);
	iog_unm -> binding_block.bot_block = rel(addr(stack -> temp(2)));
	iog_unm -> binding_block.top_block = rel(addr(stack -> temp(8)));
	iog_unm -> binding_block.back_ptr = rel(binding_top);
	iog_unm -> binding_block.rev_ptr = ""b;
	binding_top = iog_unm;

	/* Now rebind them to nil */

	stack -> temp_ptr(3) -> atom.value,
	 stack -> temp_ptr(5) -> atom.value,
	 stack -> temp_ptr(7) -> atom.value = nil;

	/* save reader status.  If in a macro char function in readlist
	    he says (iog s ...) we want to leave the readlist and get out to the tty */

	if rdr_state = 2 then do;
	     rdr_save_f = "1"b;		/* so we can undo this later */
	     call save_state_only;
	     rdr_state = 0;
	     end;
	  else rdr_save_f = "0"b;

	stack = addr(stack -> temp(8));
	go to iogjoin;

	/* comes back here after doing ioc to our first arg */

iog_aa:	stack = addrel(stack, -14);		/* unbump ptr */
	stack -> temp(1) = stack -> temp_ptr(1) -> cons.cdr;
					/* is list of forms to eval */
	do while (stack -> temp_type(1) = Cons);
	     stack -> temp(8) = stack -> temp_ptr(1) -> cons.car;
	     call lisp_$eval;
	     stack -> temp(1) = stack -> temp_ptr(1) -> cons.cdr;
	     end;
	stack -> temp(1) = stack -> temp(8);	/* value is value of last form evaled */

	if rdr_save_f then do;		/* restore the state of the reader */
	     rdr_label = fault_save.sv_rdr_label;
	     rdr_ptr = fault_save.sv_rdr_ptr;
	     rdr_state = fault_save.sv_rdr_state;
	     err_recp = ptr(unm, fault_save.prev_frame);
	     end;

	/* restore the bindings of ^q, ^r, ^w */

	stack -> temp_ptr(7) -> atom.value = stack -> temp(6);
	stack -> temp_ptr(5) -> atom.value = stack -> temp(4);
	stack -> temp_ptr(3) -> atom.value = stack -> temp(2);

	/* get rid of the binding block */

	binding_top = ptr(iog_unm, binding_top -> binding_block.back_ptr);
	unmkd_ptr = iog_unm;
	stack_ptr = addr(stack -> temp(2));
	return;

	/* car or cdr of a number --- at present this is an uncorrectable error */

car_cdr_of_num:
	unmkd_ptr = addrel(unmtop, 2);
	fault_save.code1,
	 unmtop -> ercode = car_cdr_error;
	call lisp_error_;				/* never returns */


	/* alarmclock interrupt, apply the alarmclock user
	   inyerrupt service function to 'time or 'runtime */

alarm:	if masked.against.alarm then go to masked_alarm;

	call alarm_proc;
	action = 0;
	go to exit_nzq;


do_alarm:
	call alarm_proc;		/* deferred alarm comes here when unmasked */
	go to do_ctrl_ret;

alarm_proc:  proc;

	stack_ptr = addr(stack->temp(4));
	string(new_mask.against) = copy("1"b,length(string(new_mask.against)));
	call lisp_fault_handler_$set_mask(new_mask);	/* alarmclock interrupt handler is supposed to be run masked.
						   this version of the code has a slight window.  If it causes any problems
						   it can be fixed by kludging around with inhibited alarm calls and ips masks */
	stack -> temp(1) = addr(user_intr_array(3)) -> based_ptr -> atom.value;
	if stack -> temp(1) ^= nil then do;
		if fault_code = Alarmclock_fault then stack -> temp(2) = time;
		else /* if fault_code = Cput_fault then */ stack -> temp(2) = runtime;
		stack -> temp(3) = nil;		/* make the arg list (nil) */
		call lisp_special_fns_$cons;
		call lisp_$apply;
		end;
end alarm_proc;

	/* routine to exit, action must be set before coming here */

exit:	qitf = "0"b;
	call unsave_state;
	if action ^= 0 then return;			/* if special action being taken,
						   must go through lisp_default_handler_ */
	if rdr_state = 1 then do;			/* returning into an i/o wait, so
						   wake up the reader and make it
						   look at the ^q flag */
	     go to rdr_label;
	     end;
	return;

exit_nzq:
	call unsave_state;
	return;

unsave_state:  proc;		/* unsave at any speed */
	call iox_$control (iox_$user_io, "start", null(), io_status);

	/* restore the key variables that we saved */

	gc_inhibit = fault_save.sv_gc_inhibit;
	stack_ptr = addr(stack -> temp(2));
	call lisp_fault_handler_$set_mask((fault_save.sv_masked));
	unspec(ptr(unm, ""b) -> stack_seg.array_info_for_store) = unspec(fault_save.sv_array_info);
	ptr(unm, ""b) -> stack_seg.array_offset_for_store = fault_save.sv_array_offset;
	rdr_label = fault_save.sv_rdr_label;
	rdr_ptr = fault_save.sv_rdr_ptr;
	rdr_state = fault_save.sv_rdr_state;
	err_recp = ptr(unm, fault_save.prev_frame);
	stack_ptr = stack;				/* now clr pdl's */
	unmkd_ptr = unm;
end unsave_state;

array_lossage:	/* store was misused in such a way that the array moved between
		   the time the subscripts were processed and the time the store
		   was actually done */

	unmkd_ptr = addrel(unmtop, 2);	/* signal uncorrectable error */
	fault_save.code1, unmtop -> ercode = store_function_misused;
	call lisp_error_;

emulate_old_style_store:	/* an old-arrays compiled program tried to store
			   using in-line code */

dcl haventbarfedatthisyet bit(1) static init("1"b),
    patchingmode bit(1) static init("0"b),
    based_inst bit(36) aligned based,
    call_store_operator bit(36) static init("001000000001001110010111010001010000"b);

	if haventbarfedatthisyet then do;
	   call ioa_$ioa_switch(iox_$error_output, "lisp:  A program is being run which contains old compiled ""store""s.  Execution will proceed, but slowly.");
	   call ioa_$ioa_switch_nnl(iox_$user_io, "Do you want to go into patching mode?  ");
	   call iox_$get_line(iox_$user_io, addr(inbuf), length(inbuf), nelemt, io_status);
	   if substr(inbuf, 1, nelemt-1) = "yes" then patchingmode = "1"b;
	   haventbarfedatthisyet = "0"b;
	   end;

	if patchingmode then do;		/* patch it to call new array store op */
	   call ioa_$ioa_switch(iox_$error_output, "lisp_fault_handler_:  Patching ^p to call new store operator.", pbr);
	   pbr -> based_inst = call_store_operator;
	   end;

	argsp = addrel(ptr(unm, ""b) -> stack_seg.array_info_for_store, -2) -> array_info.array_data_ptr;
	argsp = addrel(argsp, ptr(unm, ""b) -> stack_seg.array_offset_for_store);	/* assume not a number array */
	action = 3;			/* force instruction to be retried with new address */
	pbr = argsp;			/* kludgily pass the address back */
	call unsave_state;
	return;

	/***** the alarmclock subr, for setting and resetting timers *****/

alarmclock: entry;

/*
 * function to implement the lisp alarmclock function, using timer_manager_
 * coded by D. A. Moon, 18 Aug 72
 *
 * changed to make alarmclock a cpu timer rather than an alarm timer,
 * for compatiblity with pdp-10 lisp, 9 Sep 72 by DAM
 *
 * Major Rewrite 1 Feb 1973 by DAM for new alrm system
 *
 * modified 17 Jan 74 by DAM to stop hacking ips masks
 */

dcl lisp_default_handler_$alarm entry(ptr, char(*)),	/* handler for both types of timer intr */
    lisp_static_vars_$time_atom fixed bin(71) external,
    time fixed bin(71) def (lisp_static_vars_$time_atom),
    lisp_static_vars_$runtime_atom fixed bin(71) external,
    runtime fixed bin(71) def (lisp_static_vars_$runtime_atom),
    1 old_mask aligned like masked,
    1 new_mask aligned like masked,
    timer_manager_$cpu_call  ext entry(fixed bin(71), bit(2), entry),
    timer_manager_$alarm_call  ext entry(fixed bin(71), bit(2), entry),
    timer_manager_$reset_cpu_call ext entry(entry),
    timer_manager_$reset_alarm_call ext entry(entry),
    stack2 ptr,
    alarm_time fixed bin(71);



alarmclock0:
	stack = addrel(stack_ptr, -4);		/* subr of 2 args */

	stack2 = addr(stack -> temp(2));
	if stack -> temp(1) = time then go to alrm;
	else if stack -> temp(1) = runtime then go to cput;
	else do;				/*** ERROR ***/
	     unm = unmkd_ptr;
	     unmkd_ptr = addrel(unm, 2);
	     unm -> errcode(1) = bad_arg_correctable;
	     unm -> errcode(2) = fn_alarmclock;
	     stack_ptr = addr(stack -> temp(4));
	     stack -> temp(3) = stack -> temp(1);
	     call lisp_error_;
	     stack -> temp(1) = stack -> temp(3);
	     go to alarmclock0;
	     end;


	/*** real time interrupt, second arg is time in seconds */

alrm:	call timer_manager_$reset_alarm_call(lisp_default_handler_$alarm);	/* get rid of any pending interrupt */

	if stack2 -> lisp_ptr_type & Fixed36 then alarm_time = stack2 -> fixedb*1000000;
	else if stack2 -> lisp_ptr_type & Float36 then alarm_time = stack2 -> floatb*1000000e0;
	else go to ret_nil;		/** any other arg just shuts off timer and returns nil **/

	if alarm_time < 0 then go to ret_nil;	/** negative arg does too due to ITS kludgery **/

	call timer_manager_$alarm_call(alarm_time, "10"b,	/* relative microseconds */
		lisp_default_handler_$alarm);

ret_t:	stack -> temp(1) = t_atom;
ret:	stack_ptr = addr(stack -> temp(2));
	return;


	/*** cpu time interrupt, second arg is time in microseconds ***/

cput:	call timer_manager_$reset_cpu_call(lisp_default_handler_$alarm);

	if stack2 -> lisp_ptr_type & Fixed36 then alarm_time = stack2 -> fixedb;
	else if stack2 -> lisp_ptr_type & Float36 then alarm_time = stack2 -> floatb;
	else go to ret_nil;

	if alarm_time < 0 then go to ret_nil;

	call timer_manager_$cpu_call(alarm_time, "10"b,	/* relative usec */
		lisp_default_handler_$alarm);

	go to ret_t;

ret_nil:	stack -> temp(1) = nil;
	go to ret;



	/*** The nointerrupt subr, which turns on or off cput and alrm timer
	     interrupts and ctrl chars other than ., z, and $ ***/

nointerrupt: entry;

	stack = addrel(stack_ptr, -2);		/* subr of one arg */
nointerrupt00:
	if stack -> temp(1) = nil then string(new_mask.against) = ""b;
	else if stack -> temp(1) = t_atom then string(new_mask.against) = copy("1"b,length(string(new_mask.against)));
	else if stack -> temp(1) = tty_atom then do;
			new_mask.against.alarm = "0"b;
			new_mask.against.tty = "1"b;
			end;
	else do;	/* error */
	     unm = unmkd_ptr;
	     unmkd_ptr = addrel(unm, 2);
	     unm -> errcode(1) = bad_arg_correctable;
	     unm -> errcode(2) = fn_nointerrupt;
	     call lisp_error_;
	     go to nointerrupt00;
	     end;

	/* encode old state of mask */

	if masked.against.alarm then stack -> temp(1) = t_atom;
	else if masked.against.tty then stack -> temp(1) = tty_atom;
	else stack -> temp(1) = nil;
	go to nointr_join;

interrupt_poll:
	entry ();

	new_mask = masked;
	go to nointr_join;

set_mask:	entry(a_new_mask);

	dcl 1 a_new_mask aligned like masked;

	new_mask = a_new_mask;
nointr_join:
	stack = stack_ptr;

	old_mask = masked;				/* going to return previous value of the mask */
						/**** we assume anyone who interrupts us will
						      restore this mask to its previous state before rtn ***/
	if new_mask.against.tty = "0"b then do;		/* UNMASK CTRL CHARS */

do_ctrl_ret:	pending_ctrl = "1"b;			/* so if we process a ctrl/g it doesn't screw us up */
		if deferred_alrm_timer then do;
			fault_code = Alarmclock_fault;
			deferred_alrm_timer = "0"b;
			go to do_alarm;
			end;
		if deferred_cput_timer then do;
			fault_code = Cput_fault;
			deferred_cput_timer = "0"b;
			go to do_alarm;
			end;
		if lastctrl ^= firstctrl then go to do_ctrl;	/* if there are chars in the circular buffer,
							   go process them */
		deferred_interrupt,			/* no deferred interrupts left */
		pending_ctrl = "0"b;		/* ok, we processed all the stacked-up ctrl chars */
		end;

	masked = new_mask;			/* SET THE MASK */

	stack_ptr = stack;		/* either flush stack or leave argument */
	return;

	/***** SPECIAL TIMER HANDLER USED WHEN MASKED *****/

masked_alarm:
	deferred_interrupt = "1"b;
	if fault_code = Alarmclock_fault then deferred_alrm_timer = "1"b;
	else if fault_code = Cput_fault then deferred_cput_timer = "1"b;
	action = 0;
	go to exit_nzq;


	/***** SPECIAL QUIT HANDLER USED WHEN MASKED *****/

masked_quit:
	if lisp_static_vars_$mulquit_state = -1
	then;
	else if lisp_static_vars_$mulquit_state = -2
	     then go to do_ctrl_z;
	     else do;
		     inbuf = cv_interruptno (lisp_static_vars_$mulquit_state);
		     go to masked_ctrl_save;
		end;

	if lisp_static_vars_$cleanup_list_exists	/* cleanup feature */
	then if lisp_static_vars_$i_am_gcing		/* has to do strange things if gc in progress and unwind */
	then on condition(cleanup) begin;
		dcl sp pointer;
		sp = cu_$stack_frame_ptr();		/* find target of unwindage */
	        g0001:
		sp = sp -> stack_frame.prev_sp;
		if sp -> stack_frame.arg_ptr -> argument_list.argument_count ^= 2 then go to g0001;	/* 1 arg */
		lisp_static_vars_$gc_unwinder_kludge =
		    sp -> stack_frame.arg_ptr -> argument_list.argument_pointer(1) -> based_label_var;
		lisp_static_vars_$activate_gc_unwinder_kludge = "1"b;
		action = 0;			/* restart fault */
		go to exit;			/* so finish gc and cleanup */
		end;

	substr(inbuf, 1, 4) = "    ";
masked_ctrl_ask:
	call ioa_$ioa_switch_nnl(iox_$user_io, "CTRL/");	/* really should tell user is (nointerrupt t) mode right now */
	lisp_static_vars_$read_print_nl_sync = "1"b;	/* user will hit newline after the ctrl char */
	call iox_$get_line(iox_$user_io, addr(inbuf), length(inbuf), nelemt , io_status);
	if nelemt < 2 then go to masked_ctrl_ask;

	/* check for control characters done immediately */

	if substr(inbuf, 1, 1) = "Z" | substr(inbuf, 1, 1) = "z" then do;
		go to do_ctrl_z;
		end;
	else if substr(inbuf, 1, 1) = "$" then go to proc(14);
	else if substr(inbuf, 1, 1) = "." then go to proc(15);
	else if substr(inbuf, 1, 1) = "?" then 			/* user wants to know what's going on */
		if lisp_static_vars_$i_am_gcing then do;
			intrp = addr(ms_gc);
			nelemt = length(ms_gc);
			go to whats_going_on;
			end;
		else do;
			intrp = addr(ms_masked);
			nelemt = length(ms_masked);
			go to whats_going_on;
			end;

	/* Can't be done immediately, save it up for when (nointerrupt nil) is done */

masked_ctrl_save:
	deferred_interrupt = "1"b;
	ctrls(lastctrl) = substr(inbuf, 1, 4);		/* fortunately we can't get interrupted here since qitf is on */
	if lastctrl < hbound(ctrls, 1) then lastctrl = lastctrl + 1;
	 else lastctrl = lbound(ctrls, 1);
	if lastctrl = firstctrl then call ioa_$ioa_switch(iox_$user_io,
		"lisp: Control character buffer overflow.  While in (nointerrupt t) mode. Oldest chars lost.");
	action = 0;
	go to exit;

cv_interruptno:
	procedure (intno) returns (char (2));

dcl intno fixed binary;
dcl intno_pic picture "99";

	return (convert (intno_pic, intno));
     end;


init:	entry;		/* Called when the lisp command is entered */

	pending_ctrl = "0"b;
	lisp_static_vars_$i_am_gcing = "0"b;
	firstctrl, lastctrl = 1;				/* clear this stupid buffer, in case he quat
							   out of a previous lisp at an awkward time */
	deferred_alrm_timer, deferred_cput_timer = "0"b;
	ctrls = ".
  ";							/* fill this up with nops */
	string(masked.against) = ""b;		/* unmask */


	return;

	/* routine to process control characters noticed in the
	   input stream by the reader.  These are characters
	   prefixed by \036 */

ctrl_from_reader: entry(ctrl_from_rdr);

dcl ctrl_from_rdr char(1) aligned parameter;

	chr = ctrl_from_rdr;		/* copy arg into same place as other entries */
	esw = -1;
	stack = stack_ptr;
	go to dispatch;		/* hence numbers don't work in this mode */

exitv(-1):
	stack_ptr = stack;
	return;

ctrl_g_function: entry;				/* ^g subr */

	go to ctrl_g_handler;

end;
