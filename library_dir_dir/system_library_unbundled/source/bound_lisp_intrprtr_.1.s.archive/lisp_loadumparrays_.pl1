/* **************************************************************
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1973 *
   *                                                            *
   ************************************************************** */
dumparrays:  proc;

/* lisp_loadumparrays_
 * This modules contains the loadarrays and dumparrays subrs for LISP
 * Written 74.08.09 by DAM
 * do not compile with the optimize option
 */


/* Declarations for format of a dumped array file */

dcl 1 dumped_array_file based aligned,
    2 type fixed bin(17) unaligned,	/* negative for pdp-10, positive for Multics  */
    2 count fixed bin(17) unaligned,	/* number of words (10) or characters (Multics) in pname */
    2 pname char(p -> dumped_array_file.count) unaligned,
    2 data;

      /* the above structure is followed by the below,
         and the pair is repeated once for each array dumped */

dcl 1 dumped_array_data based aligned,
    2 word_count fixed bin(17) unaligned,	/* minus number of words in array */
    2 array_type fixed bin(17) unaligned,	/* 1=fixnum, 2=flonum */
    2 data(- p->dumped_array_data.word_count) bit(36);

      /* the following special mark falls after the last dumped array */

dcl end_of_file_mark bit(36) static init((5)"0000011"b),
    word bit(36) aligned based;

/* pointer to current data in the file */

dcl p pointer;

/* declarations for PDP-10 compatibility */

dcl byte7 (0:4) bit(7) unaligned based,

    1 PDP10_flonum based aligned,
      2 sign bit(1) unaligned,
      2 exponent fixed bin(7) unaligned,
      2 mantissa bit(27) unaligned,
    1 H6180_flonum based aligned,
      2 exponent fixed bin(7) unaligned,
      2 mantissa fixed bin(27) unaligned,
    a_word fixed bin(35) aligned;

/* flag for Multics format */

dcl Multics_flag fixed bin(17) static init(000001100000100100b);	/* 014044 octal */


/* misc dcl */

dcl stack pointer,
    myname fixed bin(35),
    (i, j, n) fixed bin(18),
    ch char(1),
    words (n) bit(36) aligned based,
    pdp10_compatibility bit(1),
    convert_flonums bit(1),
    lisp_property_fns_$get entry,
    lisp_property_fns_$putprop entry,
    lisp_get_atom_ entry(char(*), fixed bin(71)),
    lisp_special_fns_$xcons entry,
    lisp_special_fns_$cons entry,
    lisp_array_fcns_$star_array entry,
    lisp_special_fns_$gensym entry;

dcl unm pointer,
    pnamebuf char(i) based(unm);

dcl hcs_$terminate_noname entry(pointer, fixed bin(35)),
    hcs_$truncate_seg entry(pointer, fixed bin(18), fixed bin(35)),
    hcs_$set_bc_seg entry(pointer, fixed bin(24), fixed bin(35)),
    hcs_$make_seg entry(char(*), char(*), char(*), fixed bin(5), pointer, fixed bin(35)),
    hcs_$initiate entry(char(*), char(*), char(*), fixed bin(1), fixed bin(2), pointer, fixed bin(35)),
    expand_path_ entry(pointer, fixed bin, pointer, pointer, fixed bin(35)),
    dn char(168),
    en char(32),
    code fixed bin(35);

dcl fp pointer,
    bflonum float bin(27) aligned based,
    fsign float bin(1);

/* LISP constants */

dcl (lisp_static_vars_$array,
     lisp_static_vars_$fixnum,
     lisp_static_vars_$flonum) fixed bin(71) external;

/* error codes */

dcl (lisp_error_table_$bad_argument,
     lisp_error_table_$file_sys_fun_err,
     lisp_error_table_$argument_must_be_array,
     lisp_error_table_$special_array_type) fixed bin(35) external;

/* Builtin */

dcl (addr, addrel, size, unspec, fixed, bit, substr, null, divide, rel, translate) builtin;

/* include files */

%include lisp_common_vars;
%include lisp_stack_fmt;
%include lisp_cons_fmt;
%include lisp_nums;
%include lisp_ptr_fmt;
%include lisp_array_fmt;
%include lisp_atom_fmt;
%include lisp_string_fmt;
%include lisp_name_codes;

/* dumparrays subr.  first arg is list of arrays, second is pathname.
   if pathname is (pdp10 pathname), pdp10 format is used */


	myname = fn_dumparrays;
	stack = addrel(stack_ptr, -4);	/* 2 args */
	if stack -> temp_type(2) = Cons then do;
	   if stack -> temp_ptr(2) -> cons_ptrs.car -> atom.pname ^= "pdp10" then go to wta;
	   pdp10_compatibility = "1"b;
	   stack -> temp(2) = stack -> temp_ptr(2) -> cons_ptrs.cdr -> cons.car;
	   end;
	else pdp10_compatibility = "0"b;

	/* create the output file */

	if stack -> temp_type36(2) & Atsym36 then p = addr(stack -> temp_ptr(2) -> atom.pnamel);
	else if stack -> temp_type36(2) & String36 then p = stack -> temp_ptr(2);
	else go to wta;

	call expand_path_(addr(p -> lisp_string.string), p -> lisp_string.string_length,
		addr(dn), addr(en), code);
	if code ^= 0 then go to fserr;
	call hcs_$make_seg(dn, en, "", 1011b, p, code);
	if p = null then go to fserr;

	/* begin dumping arrays */

	do while(stack -> temp(1) ^= nil);
	   stack -> temp(2) = stack -> temp_ptr(1) -> cons.car;	/* an array */

	   /* put out the pname */

	   if ^ pdp10_compatibility then do;
		p -> dumped_array_file.type = Multics_flag;
		p -> dumped_array_file.count = stack -> temp_ptr(2) -> atom.pnamel;
		p -> dumped_array_file.pname = stack -> temp_ptr(2) -> atom.pname;
		p = addr(p -> dumped_array_file.data);
		end;
	   else do;
		n = divide(4 + stack -> temp_ptr(2) -> atom.pnamel, 5, 17, 0);
		p -> dumped_array_file.type = -n;
		p -> dumped_array_file.count = n;
		p = addr(p -> dumped_array_file.pname);
		j = 0;
		do i = 1 by 1 while(i <= stack -> temp_ptr(2) -> atom.pnamel);
		   ch = substr(stack -> temp_ptr(2) -> atom.pname, i, 1);
		   ch = translate(ch, "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
		   	         "abcdefghijklmnopqrstuvwxyz");
		   p -> byte7(j) = substr(unspec(ch), 3, 7);
		   j = j + 1;
		   if j > 4 then do;
			j = 0;
			p = addrel(p, 1);
			end;
		   end;
		end;

	   /* put out the array data */

	   stack_ptr = addr(stack -> temp(4));
	   stack -> temp(3) = lisp_static_vars_$array;
	   call lisp_property_fns_$get;
	   if stack -> temp(2) = nil then call err1(lisp_error_table_$argument_must_be_array);
	   convert_flonums = "0"b;
	   if stack -> temp_ptr(2) -> array_info.type = Fixnum_array then p -> dumped_array_data.array_type = 1;
	   else if stack -> temp_ptr(2) -> array_info.type = Flonum_array then do;
		p -> dumped_array_data.array_type = 2;
		convert_flonums = pdp10_compatibility;
		end;
	   else call err1(lisp_error_table_$special_array_type);

	   /* compute array size */

	   n = 1;
	   do i = 1-stack -> temp_ptr(2) -> array_info.ndims by 1 to 0;
	      n = n * stack -> temp_ptr(2) -> array_info.array_data_ptr -> array_data.dope_vector(i).bounds;
	      end;
	   p -> dumped_array_data.word_count = -n;

	   /* put it out */

/*	   p -> dumped_array_data.data = stack -> temp_ptr(2) -> array_info.array_data_ptr -> words;     */
	   addr(p -> dumped_array_data.data)->words = stack -> temp_ptr(2) -> array_info.array_data_ptr -> words;
	   if convert_flonums then do i = 1 by 1 while(i <= n);
		fp = addr(p -> dumped_array_data.data(i));
		a_word = 0;
		if fp -> bflonum ^= 0.0 then do;
			addr(a_word) -> PDP10_flonum.exponent =
			   fp -> H6180_flonum.exponent + 128;
			if fp -> H6180_flonum.mantissa >= 0
			then addr(a_word) -> PDP10_flonum.mantissa = bit(fp -> H6180_flonum.mantissa, 27);
			else do;
			     if substr(fp -> word, 9) = "1"b then do;
				addr(a_word)->PDP10_flonum.mantissa = "1"b;
				addr(a_word) -> PDP10_flonum.exponent = addr(a_word) -> PDP10_flonum.exponent + 1;
				end;
			     else addr(a_word) -> PDP10_flonum.mantissa = bit(fixed(-fp -> H6180_flonum.mantissa,27),27);
			     a_word = -a_word;
			     end;
			end;
		fp -> word = unspec(a_word);
		end;

	   /* advance pointer to after this array's stuff */

	   p = addrel(p, size(dumped_array_data));
	   stack -> temp(1) = stack -> temp_ptr(1) -> cons.cdr;
	   end;

	/* put end of file marker */

	p -> word = end_of_file_mark;

	n = 1+fixed(rel(p),18);
	call hcs_$truncate_seg(p, n, code);
	call hcs_$set_bc_seg(p, 36*n, code);
	call hcs_$terminate_noname(p, code);
exit:	stack_ptr = addr(stack -> temp(2));
	return;

loadarrays:  entry;

/* loadarrays subr.  arg is pathname.  will load either a pdp10
   or a Multics file. */

	myname = fn_loadarrays;
	stack = addrel(stack_ptr, -2);	/* 1 arg */
	if stack -> temp_type36(1) & Atsym36 then p = addr(stack -> temp_ptr(1) -> atom.pnamel);
	else if stack -> temp_type36(1) & String36 then p = stack -> temp_ptr(1);
	else go to wta;

	/* open the file */

	call expand_path_(addr(p -> lisp_string.string), p -> lisp_string.string_length, addr(dn), addr(en), code);
	if code ^= 0 then go to fserr;
	call hcs_$initiate(dn, en, "", 0, 0, p, code);
	if p = null then go to fserr;

	/* begin processing */

	pdp10_compatibility = "0"b;
	if p -> dumped_array_file.type < 0 then pdp10_compatibility = "1"b;
	stack -> temp(1) = nil;		/* initialize return list */
	do while(p -> word ^= end_of_file_mark);

	   /* get old pname */

	   stack_ptr = addr(stack -> temp(3));
	   addr(stack -> temp(2)) -> fixnum_fmt.type_info = fixnum_type;
	   addr(stack -> temp(2)) -> fixedb = 0;
	   call lisp_special_fns_$gensym;
	   stack_ptr = addr(stack -> temp(6));
	   if ^ pdp10_compatibility
	   then do;
		call lisp_get_atom_(p -> dumped_array_file.pname, stack -> temp(3));
		p = addr(p -> dumped_array_file.data);
		end;
	   else do;
		unm = unmkd_ptr;
		unmkd_ptr = addrel(unm, 2*divide(7 + 5* p->dumped_array_file.count, 8, 18, 0));
		fp = addr(p -> dumped_array_file.pname);
		i = 0;
		do j = 1 to p -> dumped_array_file.count;
		   do n = 0 to 4;
		      if fp -> byte7(n) then do;
			unspec(ch) = "00"b || fp -> byte7(n);
			ch = translate(ch, "abcdefghijklmnopqrstuvwxyz",
			 "ABCDEFGHIJKLMNOPQRSTUVWXYZ");
			substr(unm -> pnamebuf, i+1, 1) = ch;
			i = i + 1;
			end;
		      end;
		   fp = addrel(fp, 1);
		   end;
		p = addrel(p, j);
		call lisp_get_atom_(unm -> pnamebuf, stack -> temp(3));
		unmkd_ptr = unm;
		end;
	   stack_ptr = addr(stack -> temp(11));

	   /* compute size & type of array and create it */

	   if p -> dumped_array_data.array_type = 2
	   then do;
		convert_flonums = pdp10_compatibility;
		stack -> temp(8) = lisp_static_vars_$flonum;
		end;
	   else do;
		convert_flonums = "0"b;
		stack -> temp(8) = lisp_static_vars_$fixnum;
		end;
	   addr(stack -> temp(4)) -> fixnum_fmt.type_info,
	   addr(stack -> temp(9)) -> fixnum_fmt.type_info,
	   addr(stack -> temp(10)) -> fixnum_fmt.type_info = fixnum_type;
	   n = - p -> dumped_array_data.word_count;
	   addr(stack -> temp(4)) -> fixedb,
	   addr(stack -> temp(9)) -> fixedb = n;
	   addr(stack -> temp(10)) -> fixedb = -6;	/* passing 3 args */
	   stack -> temp(7) = nil;
	   call lisp_array_fcns_$star_array;
/*	   stack -> temp_ptr(7) -> array_info.array_data_ptr -> words = p -> dumped_array_data.data;     */
	   stack -> temp_ptr(7) -> array_info.array_data_ptr -> words = addr(p -> dumped_array_data.data)->words;
	   if convert_flonums then do i = 1 by 1 while(i <= n);
	      fp = addr(stack -> temp_ptr(7) -> array_info.array_data_ptr -> words(i));
	      unspec(a_word) = fp -> word;
	      if a_word = 0 then fp -> bflonum = 0.0;
	      else do;
	        if a_word > 0 then do;
		fsign =1.0;
		end;
	        else do;
		fsign = -1.0;
		a_word = -a_word;
		end;
	        fp -> H6180_flonum.exponent = addr(a_word) -> PDP10_flonum.exponent - 128;
	        fp -> H6180_flonum.mantissa = fixed(addr(a_word)->PDP10_flonum.mantissa, 27);
	        fp -> bflonum = fp -> bflonum * fsign;
	        end;
	      end;
	   p = addrel(p, size(dumped_array_data));
	   stack_ptr = addr(stack -> temp(9));
	   stack -> temp(6) = stack -> temp(2);
	   stack -> temp(8) = lisp_static_vars_$array;
	   call lisp_property_fns_$putprop;

	   /* cons up return list */

	   stack_ptr = addr(stack -> temp(6));
	   stack -> temp(5) = nil;
	   do i = 0 to 2;
	      call lisp_special_fns_$cons;
	      end;
	   call lisp_special_fns_$xcons;
	   end;
	call hcs_$terminate_noname(p, code);
	go to exit;

	/* error handlers */

dcl 1 error_push aligned based,
    2 (code1, code2) fixed bin(35),
    lisp_error_ entry;

wta:	call err(lisp_error_table_$bad_argument);

fserr:	myname = code;
	call err(lisp_error_table_$file_sys_fun_err);

err1:  proc(ecode);

	 stack -> temp(2) = stack -> temp_ptr(1) -> cons.car;	/* retrieve the bad array name */

err:  entry(ecode);

dcl ecode fixed bin(35);

	unm = unmkd_ptr;
	unmkd_ptr = addrel(unm, size(error_push));
	unm -> code1 = ecode;
	unm -> code2 = myname;
	call lisp_error_;

	/* in case it returns, return what it returned */

	stack -> temp(1) = addrel(stack_ptr, -2) -> temp(1);
	go to exit;
end;

end;
