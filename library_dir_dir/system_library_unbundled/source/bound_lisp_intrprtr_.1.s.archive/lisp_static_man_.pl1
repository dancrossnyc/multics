/* **************************************************************
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1974 *
   *                                                            *
   ************************************************************** */
lisp_static_man_:  procedure;

/* This module manages static space for LISP.  It replaces make_lisp_subr_block_
   Written 74.05.14 by DAM */



dcl cur_stat_seg pointer defined lisp_static_vars_$cur_stat_seg,
    stat_top fixed bin(18) defined lisp_static_vars_$cur_stat_pos,
    lisp_static_vars_$cur_stat_seg external pointer,
    lisp_static_vars_$cur_stat_pos fixed bin(18) external;

dcl space pointer,
    Size fixed bin(18);

dcl sys_info$max_seg_size fixed bin(18) external;


dcl 1 static_seg aligned based,
      2 chain pointer,
      2 def_ptr pointer;
dcl lisp_segment_manager_$free_array entry(pointer);

dcl (addr, addrel, null, rel, divide, unspec, substr, size) builtin;


%include lisp_common_vars;
%include lisp_ptr_fmt;
/* Entry to free all the static segments (when LISP is exited) */

free_stat_segs:  entry;

	do while(cur_stat_seg ^= null);
	   space = cur_stat_seg;
	   cur_stat_seg = space -> static_seg.chain;
	   call lisp_segment_manager_$free_array(space);
	   end;
	return;


/* Entry to allocate a block of static storage.  It was always be aligned on a double-word boundary */

allocate:  entry(block_ptr, block_size);

dcl block_ptr pointer parameter,		/* (Output) -> allocated block */
    block_size fixed bin(18) parameter;		/* (Input) number of words required */

	Size = block_size;
	if substr(unspec(Size), 36, 1) then Size = Size + 1;	/* make sure is even number of words */

	call alloc_static;
	block_ptr = space;
	return;

/* Internal procedure to allocate by appending to static segment */

alloc_static:  proc;

dcl new_top fixed bin(18),
    lisp_segment_manager_$get_array entry(pointer),
    new_stat_seg pointer;

dcl 1 static_seg_header_template aligned static structure,		/* initial value for header of static segment */
      2 chain pointer init(null),
      2 link_header,
        3 def_ptr pointer init(null),			/* must point to base of segment */
        3 thread pointer init(null),
        3 virgin_link_pointer pointer init(null),
        3 must_be_zero fixed bin(71) init(0),
    1 static_seg_header aligned based structure like static_seg_header_template;


	new_top = stat_top + Size;
	if new_top <= sys_info$max_seg_size		/* fits in current segment */
	then do;
		space = addrel(cur_stat_seg, stat_top);
		stat_top = new_top;
		return;
		end;

	/* new segment required */

	call lisp_segment_manager_$get_array(new_stat_seg);

	new_stat_seg -> static_seg_header = static_seg_header_template;
	new_stat_seg -> static_seg_header.chain = cur_stat_seg;
	new_stat_seg -> static_seg_header.def_ptr = new_stat_seg;
	cur_stat_seg = new_stat_seg;
	stat_top = size(static_seg_header);
	space = addrel(new_stat_seg, stat_top);
	stat_top = stat_top + Size;
	return;
end alloc_static;

end lisp_static_man_;
