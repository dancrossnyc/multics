/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

gcos_abs_control: proc;

/* This procedure is invoked by a gcos absentee job.  Its stack frame remains below the
   stack frame of each gcos absentee command.  It contains the record quota overflow handler
   for gcos absentee jobs */


/* DECLARATIONS */
/* ------------ */


/* fixed bin */

dcl (
     code						/* error code */
     ) fixed bin (35) aligned;

dcl (
     gcos_daemon_stat_$overflow_channel ext
     ) fixed bin (71) aligned;


/* bit strings */

dcl (
     gcos_daemon_stat_$process_id ext			/* process id of gcos_daemon */
     ) bit (36) aligned;


/* character strings */

dcl (
     gcos_daemon_stat2_$overflow_dir ext
     ) char (168) aligned;


/* conditions */

dcl (
     cleanup,
     record_quota_overflow
     ) condition;


/* external entries */

dcl  get_wdir_ ext entry
     returns (char (168) aligned);

dcl  hcs_$wakeup ext entry
    (bit (36) aligned, fixed bin (71) aligned, fixed bin (71) aligned, fixed bin (35) aligned);

dcl  listen_$release_stack ext entry
    (bit (1) aligned);

dcl  logout ext entry;

/*  */

	on condition (record_quota_overflow)		/* if an overflow occurrs */
	begin;

	     gcos_daemon_stat2_$overflow_dir = get_wdir_ (); /* set dir name for printing by daemon */

	     call hcs_$wakeup (gcos_daemon_stat_$process_id, gcos_daemon_stat_$overflow_channel, 0, code);
						/* print it */

	     call logout;				/* log absentee process out */

	end;

next:	on condition (cleanup) go to next;		/* process next command line */
	call listen_$release_stack ("0"b);

	return;

     end gcos_abs_control;
