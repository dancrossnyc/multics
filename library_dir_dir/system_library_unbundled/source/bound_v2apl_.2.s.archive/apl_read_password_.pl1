/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* Program to read a password off of a console.  The code is stolen from the
   system routine "get_password_", except that a "read_back_input" order call is used
   to the APL DIM, and upper case letters are not used (since they cause underlines
   and backspaces when printed).

   Written by some anonymous person, summer 1973.
   Modified by PG on 740211 to use correct order call.
   Modified 781208 by PG to switch to clock builtin
*/

apl_read_password_:
read_password_:
     procedure (word);

declare  word char (8) parameter,
         the_password char (nelemt-i) based (addr (buffer.char (i)));

declare  user_info_$tty_data entry (char (*), fixed bin, char (*)),
         ios_$write_ptr entry (pointer, fixed bin, fixed bin),
         ios_$read entry (char (*), pointer, fixed bin, fixed bin, fixed bin, bit (72) aligned),
         ios_$order entry (char (*), char (*), pointer, bit (72) aligned),
         nelemt fixed bin,
        (printer_on_char init ("000000110"b),
         printer_off_char init ("000010101"b),
         carriage_return_char init ("000001101"b),
         newline_char init ("000001010"b),
         red_shift_char init ("000001110"b),
         black_shift_char init ("000001111"b)) bit (9) static,

         1 buffer aligned,
         2 char char (1) unaligned dimension (150),

         time fixed bin (71),
         ubits bit (72) aligned,
         RANDOM char (32) static aligned init ("etaiosqwertyuioplkjkgfdsazxcvbnm"),
         i fixed bin,
         old_read_back_state char (32),
         additional_garbage char (12);

dcl  buffer_1_to_12 char (12) unaligned based (addr (buffer.char (1))),
     buffer_3_to_15 char (13) unaligned based (addr (buffer.char (3))),
     buffer_14_to_25 char (12) unaligned based (addr (buffer.char (14))),
     buffer_27_to_38 char (12) unaligned based (addr (buffer.char (27))),
     buffer_40_to_51 char (12) unaligned based (addr (buffer.char (40))),
     buffer_53_to_64 char (12) unaligned based (addr (buffer.char (53)));

declare  idcode char (4),
         type fixed bin,
         channel char (8);

declare	(addr, bit, clock, fixed, null, substr, unspec) builtin;

/* program */

	call user_info_$tty_data (idcode, type, channel);

	unspec (buffer.char (1)) = printer_on_char;
	unspec (buffer.char (2)) = red_shift_char;
	buffer_3_to_15 = "apl password:";
	unspec (buffer.char (16)) = newline_char;
	unspec (buffer.char (17)) = black_shift_char;
	unspec (buffer.char (18)) = printer_off_char;

	call ios_$write_ptr (addr (buffer), 0, 18);
	if type < 0 then go to mask_it;
	if type > 7 then go to mask_it;
	go to device (type);

device (2): if substr (idcode, 1, 1) < "A" then go to no_mask;
device (0): device (6): device (7): mask_it:
	time = clock ();
	substr (ubits, 1, 36) = bit (fixed (time, 36), 36);
	substr (ubits, 37, 36) = bit (fixed (fixed (time, 35) * 99991, 36), 36);
	do i = 2 to 13;
	     substr (additional_garbage, i-1, 1) = substr (RANDOM, fixed (substr (ubits, 1+5*i, 5), 17)+1, 1);
	end;

/* assemble password mask */
	buffer_1_to_12 = "TypePassword";
	buffer_14_to_25 = "xwxwxwxwxwxw";
	buffer_27_to_38 = "986986986986";
	buffer_40_to_51 = "wgxwgxwgxwgx";
	unspec (buffer.char (13)) = carriage_return_char;
	unspec (buffer.char (26)) = carriage_return_char;
	unspec (buffer.char (39)) = carriage_return_char;
	unspec (buffer.char (52)) = carriage_return_char;
	buffer_53_to_64 = additional_garbage;
	unspec (buffer.char (65)) = carriage_return_char;

	call ios_$write_ptr (addr (buffer), 0, 65);

device (1): device (3): device (4): device (5): no_mask:
	call ios_$order ("user_i/o", "read_back_input", addr (old_read_back_state), ""b);
	call ios_$read ("apl_input_", addr (buffer), 0, 150, nelemt, ""b);
	if nelemt <= 1 then go to blank;

/* remove extraneous chars */

	do i = 1 by 1 while (buffer.char (i) = " ");
	end;
	if i = nelemt then go to blank;
	word = the_password;
	go to return;
blank:	word = "*";

return:	unspec (buffer.char (1)) = printer_on_char;
	call ios_$write_ptr (addr (buffer), 0, 1);	/* click click */
	call ios_$order ("user_i/o", old_read_back_state, null, ""b);
	return;
     end;
