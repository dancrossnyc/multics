/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* Program to implement monadic and dyadic APL format operators.
   Written November 1978 by PG.
   Modified 780312 by PG to fix 366 (monadic format miscalculates the number of columns required if one of
	the elements rounds to zero, and some other element is nonzero.) The fix was to always reserve a
	column for a possible leading zero. Bug 372 was fixed (format reserves a column for a negative sign
	based on the sign of the unrounded value). Bug 371 (empty right args cause format to blow up) was
	lessened by having format temporarily reject empty right arguments. Additionally, SCIENTIFIC_FMT was
	modified to suppress the leading zero of an exponent.
   Modified 790607 by PG to fix 400 (format should use same width for each column if a single format pair is used).
   Modified 790809 by PG to fix 373 (format is supposed to return a result having the same rank as
	the argument, for nonscalars).
   Modified 790815 by PG to fix 371 (not handling empty arrays).
   Modified 790913 by PG to add apl_print_value_ functions. All formatted output now goes thru this routine.
   Modified 791127 by PG to recode scientific picture conversion so that it is inline.
   Modified 800201 by PG to fix 444 (apl_print_value_ entry could reference beyond end of output buffer
	if a vector_overflow occured, because the end-of-the-buffer test was skipped).
   Modified 811210 by TO to make 'apl_print_value_' print integers of more
	than qPP digits in scientific.
   Modified 811210 by TO to use integer format if a column is fuzz-integral.
*/

/* Known differences between this program and the IBM implementation:
   1. We always print a leading zero for FIXED_DEC format. IBM always
      prints one for monadic format; never prints one for dyadic format.
   2. We keep leading whitespace after a vector_overflow, IBM does not.
   3. We use either one or two digits in the exponent for SCIENTIFIC.
      IBM always uses two.
   4. We return empty results if given empty arguments. I'm not sure what
      IBM does.
   5. IBM assumes that each character occupies one print position (even BS).
      We calculate the effect of each character separately.
*/

/* format: style3 */
apl_monadic_format_:
     procedure (operators_argument);

/* automatic */

declare	fmt_info_ptr	ptr,
	check_if_column_fuzz_integral bit (1),
	column_base	fixed bin,
	column_length	fixed bin,
	column_top	fixed bin,
	colx		fixed bin,
	current_rho_value	fixed bin (21),
	data_elements	fixed bin (21),
	dyadic		bit (1) aligned,
	float_temp	float,
	format		bit (1) aligned,		/* ON if format, OFF if print_value */
	interval_between_elements
			fixed bin,
	interval_between_planes
			fixed bin,
	largest_possible_value
			float,
	left_pos		fixed bin,
	left		ptr,
	left_data_elements	fixed bin (21),
	left_vb		ptr,
	listx		fixed bin,		/* subscript of current member in list bead */
	n_cols		fixed bin,
	n_lines		fixed bin,
	n_words		fixed bin (19),
	plane_base	fixed bin,
	pseudo_column_length
			fixed bin,
	result		ptr,
	result_cols	fixed bin (21),
	result_data_elements
			fixed bin (21),
	result_pos	fixed bin (21),
	result_vb		ptr,
	rhox		fixed bin,
	right		ptr,
	right_data_elements fixed bin (21),
	right_rho_ptr	ptr,
	right_rhorho	fixed bin,
	right_vb		ptr,
	round_buffer	char (21),
	temp_result	ptr,
	valx		fixed bin;

/* based */

declare	1 fmt_info	aligned based (fmt_info_ptr),
	  2 global_max_value
			float,			/* template value for entire array */
	  2 global_negative_element
			bit (1) aligned,		/* ON if any elements in array negative */
	  2 col		(n_cols),
	    3 max_value	float,			/* maximum absolute value */
	    3 min_value	float,			/* minimum absolute value */
	    3 max_abs_value float,			/* template value */
	    3 negative_element
			bit (1) aligned,		/* ON if any elements in column negative */
	    3 fuzz_integral bit (1) aligned,		/* ON if all elements of column fuzz-integral */
	    3 field_width	fixed bin,		/* number of columns total */
	    3 precision	fixed bin,		/* number of digits (varies with type) */
	    3 type	fixed bin;		/* which output format to use */

declare	left_numeric_datum	(0:left_data_elements - 1) float based (left),
	right_numeric_datum (0:right_data_elements - 1) float based (right),
	right_rho		(right_rhorho) fixed bin (21) based (right_rho_ptr),
	word_copy_overlay	(n_words) fixed bin (35) based;

/* builtins */

declare	(abs, addrel, binary, copy, currentsize, divide, floor, hbound, lbound, length, max, min, mod, null, rank, rtrim,
	sign, size, string, substr, sum, trunc, verify)
			builtin;

/* conditions */

declare	cleanup		condition;

/* entries */

declare	apl_system_error_	entry (fixed bin (35));

/* external static */

declare	(
	apl_error_table_$domain,
	apl_error_table_$length,
	apl_error_table_$no_type_bits,
	apl_error_table_$not_within_int_fuzz,
	apl_error_table_$rank
	)		fixed bin (35) external static;

/* internal static */

declare	(
	SCIENTIFIC_FMT	initial (0),		/* use exponential form */
	INTEGER_FMT	initial (1),		/* use integer form */
	FIXED_DEC_FMT	initial (2)
	)		fixed bin internal static;	/* use decimal form */

declare	one_e		(0:38) float internal static
			initial (1e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13, 1e14, 1e15,
			1e16, 1e17, 1e18, 1e19, 1e20, 1e21, 1e22, 1e23, 1e24, 1e25, 1e26, 1e27, 1e28, 1e29, 1e30, 1e31,
			1e32, 1e33, 1e34, 1e35, 1e36, 1e37, 1e38);

/* include files */

%include apl_number_data;
%include apl_bead_format;
%include apl_characters;
%include apl_list_bead;
%include apl_operator_bead;
%include apl_operators_argument;
%include apl_value_bead;
%include apl_ws_info;

/* program */

/* apl_monadic_format_:
     entry (operators_argument); */

/* Perform argument validation and special-casing unique to the entry of invocation */

	dyadic = "0"b;
	go to join;

apl_dyadic_format_:
     entry (operators_argument);

	left_vb = operators_argument.operands (1).value;
	left = left_vb -> value_bead.data_pointer;
	left_data_elements = left_vb -> value_bead.total_data_elements;

	if ^left_vb -> value_bead.numeric_value
	then go to domain_error_left;

	if left_vb -> value_bead.rhorho > 1
	then go to rank_error_left;

	dyadic = "1"b;

/* Monadic and Dyadic Format merge here */

join:
	format = "1"b;
	right_vb = operators_argument.operands (2).value;
	right = right_vb -> value_bead.data_pointer;
	right_data_elements = right_vb -> value_bead.total_data_elements;

	if right_vb -> value_bead.character_value
	then if dyadic
	     then go to domain_error_right;
	     else do;
		     if operators_argument.operands (2).on_stack
		     then do;
			     operators_argument.result = right_vb;
			     return;
			end;

		     n_words = binary (right_vb -> value_bead.size, 18);
		     result_vb = apl_push_stack_ (n_words);
		     result = addrel (result_vb, currentsize (right_vb -> value_bead));
		     result_vb -> word_copy_overlay (*) = right_vb -> word_copy_overlay (*);
		     result_vb -> value_bead.data_pointer = result;
		     operators_argument.result = result_vb;
		     return;
		end;
	else if ^right_vb -> value_bead.numeric_value
	then go to domain_error_right;		/* neither chars nor numbers */

	if dyadic
	then if (left_data_elements ^= 1) & (left_data_elements ^= 2)
	     then if right_vb -> value_bead.rhorho > 0
		then if (left_data_elements ^= 2 * right_vb -> value_bead.rho (right_vb -> value_bead.rhorho))
			| (left_data_elements = 0)
		     then go to length_error;		/* right nonscalar */
		     else ;
		else go to length_error;		/* right scalar */

	go to join2;

apl_print_value_:
     entry (P_bead_ptr, P_add_nl, P_flush_buffer);

/* parameters */

declare	(
	P_bead_ptr	ptr unal,
	P_add_nl		bit (1) aligned,
	P_flush_buffer	bit (1) aligned
	)		parameter;

/* automatic */

declare	need_nl		bit (1) aligned;		/* ON if previous element was last one in the row */

/* based */

declare	right_chars	char (right_data_elements) based (right);

/* program */

	right_vb = P_bead_ptr;

	if right_vb = null
	then return;

	if right_vb -> general_bead.list_value
	then do;
		do listx = lbound (right_vb -> list_bead.member_ptr, 1) to hbound (right_vb -> list_bead.member_ptr, 1);
		     call apl_print_value_ (right_vb -> list_bead.member_ptr (listx), "0"b, "0"b);
		end;

		call print_value_epilogue;
		return;
	     end;

	if ^right_vb -> general_bead.value
	then call apl_system_error_ (apl_error_table_$no_type_bits);

	if ^right_vb -> value_bead.character_value & ^right_vb -> value_bead.numeric_value
	then call apl_system_error_ (apl_error_table_$no_type_bits);

	right = right_vb -> value_bead.data_pointer;
	right_data_elements = right_vb -> value_bead.total_data_elements;

	on cleanup call clean_up;

	if right_vb -> value_bead.character_value
	then do;
		if right_vb -> value_bead.rhorho = 0	/* scalar */
		then call append_any_char (substr (right_chars, 1, 1));
		else if right_vb -> value_bead.rhorho = 1
		then do;				/* vector */
			do valx = 1 to right_data_elements;
			     call append_any_char (substr (right_chars, valx, 1));
			end;
		     end;
		else do;				/* array */
			column_length = right_vb -> value_bead.rho (right_vb -> value_bead.rhorho - 1);
			n_cols, interval_between_elements = right_vb -> value_bead.rho (right_vb -> value_bead.rhorho);
			interval_between_planes = interval_between_elements * column_length;

/* walk through planes, then rows of right arg, then columns */

			colx = 1;
			need_nl = "0"b;
			do plane_base = 0 repeat (plane_base + interval_between_planes)
			     while (plane_base < right_data_elements);
			     do valx = plane_base repeat (valx + 1) while (valx < plane_base + interval_between_planes);
				if need_nl
				then do;
					call append_newline;
					need_nl = "0"b;
				     end;

				call append_any_char (substr (right_chars, valx + 1, 1));
				colx = colx + 1;

				if colx > n_cols
				then do;
					colx = 1;
					need_nl = "1"b;
				     end;
			     end;

/* We have just finished one plane. Compute number of blank rows to put out. */

			     call compute_blank_rows;

			     do rhox = 1 to n_lines;
				call append_newline;
			     end;
			end;
		     end;

		call print_value_epilogue;
		return;
	     end;

	format = "0"b;
	dyadic = "0"b;

/* join format function to handle numeric cases */

/* The format function and the numeric cases of print_value merge here.

   Compute number of columns, and number of 'rows'  (hyper-rows in the
   case of a multi-dimensional array */

join2:
	if right_vb -> value_bead.rhorho = 0
	then n_cols, interval_between_elements = 1;
	else n_cols, interval_between_elements = right_vb -> value_bead.rho (right_vb -> value_bead.rhorho);

	pseudo_column_length = 1;

	do rhox = 1 to right_vb -> value_bead.rhorho - 1;
	     pseudo_column_length = pseudo_column_length * right_vb -> value_bead.rho (rhox);
	end;

/* Note: either n_cols or pseudo_column_length, or both, can be zero; this indicates a null array */

	n_words = size (fmt_info);
	fmt_info_ptr = apl_push_stack_ (n_words);

/* Save a copy of the right rho vector if right value_bead is on the stack,
   because the right vb will get popped before the result is built, and we
   want to be able to fill in the result bead completely, even though in one case
   the result rho will be in exactly the same location as the right rho. It's easier
   to make a copy than to figure it all out... */

	if format
	then do;
		right_rhorho = right_vb -> value_bead.rhorho;

		if operators_argument.operands (2).on_stack & right_rhorho > 0
		then do;
			n_words = size (right_rho);
			right_rho_ptr = apl_push_stack_ (n_words);
			right_rho (*) = right_vb -> value_bead.rho (*);
		     end;
		else right_rho_ptr = null;
	     end;

/* Scan the right argument one column at a time, computing the maximum absolute value,
   the minimum absolute value, and the template value. Also determine if the column
   is fuzz-integral.  */

	if right_vb -> value_bead.zero_or_one_value
	then do;
		fmt_info.global_max_value = 1e0;	/* safe assumption */
		fmt_info.global_negative_element = "0"b;

		do colx = 1 to n_cols;
		     fmt_info.col (colx).max_value = 1e0;
						/* we assume... */
		     fmt_info.col (colx).min_value = 0e0;
						/* .. */
		     fmt_info.col (colx).max_abs_value = 1e0;
						/* .. */
		     fmt_info.col (colx).negative_element = "0"b;
						/* this one we are sure of  */
		     fmt_info.col (colx).fuzz_integral = "1"b;
		end;
	     end;
	else do;
		fmt_info.global_max_value = -TheBiggestNumberWeveGot;
		fmt_info.global_negative_element = "0"b;

		do colx = 1 to n_cols;
		     fmt_info.col (colx).max_value = -TheBiggestNumberWeveGot;
		     fmt_info.col (colx).min_value = TheBiggestNumberWeveGot;
		     fmt_info.col (colx).negative_element = "0"b;
		     fmt_info.col (colx).fuzz_integral = "1"b;
		     check_if_column_fuzz_integral = ^right_vb -> value_bead.integral_value;
		     column_base = colx - 1;
		     column_top = column_base + interval_between_elements * pseudo_column_length;

		     do valx = column_base repeat (valx + interval_between_elements) while (valx < column_top);
			if right_numeric_datum (valx) < 0e0
			then fmt_info.col (colx).negative_element = "1"b;

			fmt_info.col (colx).max_value =
			     max (fmt_info.col (colx).max_value, abs (right_numeric_datum (valx)));
			fmt_info.col (colx).min_value =
			     min (fmt_info.col (colx).min_value, abs (right_numeric_datum (valx)));
			if check_if_column_fuzz_integral
			then if abs (right_numeric_datum (valx) -
			     floor (right_numeric_datum (valx) + 0.5)) > ws_info.integer_fuzz
			     then check_if_column_fuzz_integral, fmt_info.col (colx).fuzz_integral = "0"b;
		     end;

		     fmt_info.col (colx).max_abs_value = fmt_info.col (colx).max_value;
		     fmt_info.global_max_value = max (fmt_info.global_max_value, fmt_info.col (colx).max_value);

		     if fmt_info.col (colx).negative_element = "1"b
		     then fmt_info.col (colx).max_abs_value = -abs (fmt_info.col (colx).max_abs_value);

		     fmt_info.global_negative_element =
			fmt_info.global_negative_element | fmt_info.col (colx).negative_element;
		end;
	     end;

	if fmt_info.global_negative_element = "1"b
	then fmt_info.global_max_value = -abs (fmt_info.global_max_value);

/* Convert the user-specified formatting parameters (in the left argument) into field width,
   precision, and type. If the user did not specify a field width, compute the default width. */

	if dyadic
	then if left_vb -> value_bead.total_data_elements <= 2
						/* scalar, 1, or 2 elements */
	     then begin;

/* automatic temps */

declare	(precision_temp, type_temp, width_temp)
			fixed bin,
	(precision_temp_fl, width_temp_fl)
			float;

		     if left_vb -> value_bead.total_data_elements = 1
		     then do;
			     width_temp_fl = 0e0;
			     precision_temp_fl = left_numeric_datum (0);
			end;
		     else do;
			     width_temp_fl = left_numeric_datum (0);
			     precision_temp_fl = left_numeric_datum (1);
			end;

		     type_temp = 1 + sign (integerize (precision_temp_fl));
		     precision_temp = abs (integerize (precision_temp_fl));

		     if (type_temp = SCIENTIFIC_FMT & precision_temp > 19)
			| (type_temp = FIXED_DEC_FMT & precision_temp > 57)
		     then go to domain_error_left;

		     width_temp = integerize (width_temp_fl);

		     if (width_temp < 0) | (width_temp > 255)
		     then go to domain_error_left;

		     if width_temp = 0
		     then width_temp = 1 + min_field_width (fmt_info.global_max_value, precision_temp, type_temp);

		     do colx = 1 to n_cols;
			fmt_info.col (colx).type = type_temp;
			fmt_info.col (colx).precision = precision_temp;
			fmt_info.col (colx).field_width = width_temp;
		     end;
		end;
	     else do;
		     left_pos = 0;
		     do colx = 1 to n_cols;
			float_temp = left_numeric_datum (left_pos + 1);
			fmt_info.col (colx).type = 1 + sign (integerize (float_temp));
			fmt_info.col (colx).precision = abs (integerize (float_temp));

			if (fmt_info.col (colx).type = SCIENTIFIC_FMT & fmt_info.col (colx).precision > 19)
			     | (fmt_info.col (colx).type = FIXED_DEC_FMT & fmt_info.col (colx).precision > 57)
			then go to domain_error_left;

			fmt_info.col (colx).field_width = integerize (left_numeric_datum (left_pos));

			if (fmt_info.col (colx).field_width < 0) | (fmt_info.col (colx).field_width > 255)
			then go to domain_error_left;

			if fmt_info.col (colx).field_width = 0
						/* user wants us to choose */
			then fmt_info.col (colx).field_width =
				1
				+
				min_field_width (fmt_info.col (colx).max_abs_value, fmt_info.col (colx).precision,
				fmt_info.col (colx).type);

			left_pos = left_pos + 2;
		     end;
		end;
	else if ^right_vb -> value_bead.zero_or_one_value
	then do;
		largest_possible_value = one_e (ws_info.digits);
						/* = 10 ** ws_info.digits */
		do colx = 1 to n_cols;
		     if (largest_possible_value <= fmt_info.col (colx).max_value)
			| (fmt_info.col (colx).min_value < 1e-4 & fmt_info.col (colx).min_value > 0e0)
			| (simple_log10 (fmt_info.col (colx).max_value) - simple_log10 (fmt_info.col (colx).min_value)
			> 4)
		     then do;
			     fmt_info.col (colx).type = SCIENTIFIC_FMT;
			     fmt_info.col (colx).precision = ws_info.digits;
			end;
		     else if fmt_info.col (colx).fuzz_integral
		     then do;
			     fmt_info.col (colx).type = INTEGER_FMT;
			     fmt_info.col (colx).precision = 0;
			end;
		     else do;
			     fmt_info.col (colx).type = FIXED_DEC_FMT;
			     fmt_info.col (colx).precision = ws_info.digits;
			end;

		     fmt_info.col (colx).field_width =
			1
			+
			min_field_width (fmt_info.col (colx).max_abs_value, fmt_info.col (colx).precision,
			fmt_info.col (colx).type);
		end;
	     end;
	else do colx = 1 to n_cols;
		fmt_info.col (colx).type = INTEGER_FMT;
		fmt_info.col (colx).precision = 0;
		fmt_info.col (colx).field_width = 2;
	     end;

/* Compute the size of the result character matrix. We cannot overlay the
   input operands, so it will be placed at the end of the stack. The size we
   compute is correct for all dyadic cases, and for monadic arrays.
   It is a little too large for monadic scalars and vectors, since they do
   not include any leading white space (and dyadic does). The size of the
   temporary is not that critical, and the result size will be corrected later. */

	if (n_cols = 0) | (pseudo_column_length = 0)
	then result_cols = 0;
	else result_cols = sum (fmt_info.col (*).field_width);

	if format
	then do;
		data_elements, result_data_elements = pseudo_column_length * result_cols;
		n_words = size (character_data_structure);
		temp_result = apl_push_stack_ (n_words);
		result_pos = 1;
	     end;

/* Perform the conversion */

	if right_vb -> value_bead.rhorho = 0		/* scalar */
	then do;
		colx = 1;
		valx = 0;
		call format_value (colx, valx, ^dyadic, ^dyadic, ^dyadic);

		if format
		then result_cols = result_pos - 1;	/* fixup for monadic case, noop for dyadic */
	     end;
	else if right_vb -> value_bead.rhorho = 1	/* vector */
	then do;
		do valx = 0 by 1 while (valx < right_data_elements);
		     colx = valx + 1;
		     call format_value (colx, valx, ^dyadic & (colx = 1), ^dyadic, ^dyadic & (colx = n_cols));
		end;

		if format
		then result_cols = result_pos - 1;	/* fixup for monadic case, noop for dyadic */
	     end;
	else do;					/* array */
		column_length = right_vb -> value_bead.rho (right_vb -> value_bead.rhorho - 1);
		interval_between_planes = interval_between_elements * column_length;

/* walk through planes, then rows of right arg, then columns */

		colx = 1;
		need_nl = "0"b;
		do plane_base = 0 repeat (plane_base + interval_between_planes) while (plane_base < right_data_elements);
		     do valx = plane_base repeat (valx + 1) while (valx < plane_base + interval_between_planes);
			if need_nl
			then do;
				call append_newline;
				need_nl = "0"b;
			     end;

			call format_value (colx, valx, "0"b, ^dyadic, "0"b);

			colx = colx + 1;
			if colx > n_cols
			then do;
				colx = 1;
				need_nl = ^format;
			     end;
		     end;

/* We have just finished one plane. Compute number of blank rows to put out in the print_value case. */

		     if ^format
		     then do;
			     call compute_blank_rows;

			     do rhox = 1 to n_lines;
				call append_newline;
			     end;
			end;
		end;
	     end;

/* Pop input operands and temporary working space */

	if ^format
	then do;
		call print_value_epilogue;
		ws_info.value_stack_ptr = fmt_info_ptr;
		return;
	     end;

	if operators_argument.operands (2).on_stack
	then ws_info.value_stack_ptr = right_vb;
	else if operators_argument.operands (1).on_stack
	then ws_info.value_stack_ptr = left_vb;
	else ws_info.value_stack_ptr = fmt_info_ptr;	/* Well, pop stuff we put there */

/* Allocate result bead. Value_bead header is guaranteed not to overlay temp_result because fmt_info
   is in between, and has at least one element of 10 words. */

	if right_rhorho = 0
	then number_of_dimensions = 1;
	else number_of_dimensions = right_rhorho;

	data_elements = result_pos - 1;
	n_words = size (value_bead) + size (character_data_structure);
	result_vb = apl_push_stack_ (n_words);
	string (result_vb -> value_bead.type) = character_value_type;
	result_vb -> value_bead.rhorho = number_of_dimensions;

	if right_rhorho > 0
	then if right_rho_ptr = null
	     then result_vb -> value_bead.rho (*) = right_vb -> value_bead.rho (*);
	     else result_vb -> value_bead.rho (*) = right_rho (*);

	result_vb -> value_bead.rho (number_of_dimensions) = result_cols;

	result_vb -> value_bead.total_data_elements = data_elements;
	result = addrel (result_vb, size (value_bead));
	result_vb -> value_bead.data_pointer = result;
	result -> character_string_overlay = temp_result -> character_string_overlay;

	operators_argument.result = result_vb;
	return;

/* Entrypoint to write out the current contents of the output buffer */

apl_flush_buffer_:
     entry ();

	on cleanup call clean_up;

	call flush_buffer;
	return;

/* Entrypoint to append a newline to the output buffer, and then write it out */

apl_flush_buffer_nl_:
     entry ();

	on cleanup call clean_up;

	call append_newline;
	call flush_buffer;
	return;

/* Entrypoint to append a newline to the output buffer */

apl_print_newline_:
     entry ();

	on cleanup call clean_up;

	call append_newline;
	return;

/* Entrypoint to print character data mixed in with normal APL output.
   When called multiple times before apl_print_newline_, each additional
   string is tabbed to the next margin. Assumptions: tabbing wanted, every char
   takes one column to print (no BS, HT, NL in argument). */

apl_print_string_:
     entry (P_string);

/* parameters */

declare	P_string		char (*);

/* automatic */

declare	n_pads		fixed bin (21);		/* number of blanks to insert to get to margin */

/* program */

	on cleanup call clean_up;

	if ws_info.output_buffer_ll > 0		/* already stuff on line? */
	then do;
		n_pads = 8 - mod (ws_info.output_buffer_ll, 8);

		if ws_info.output_buffer_ll + n_pads + length (P_string) > ws_info.width
		then call append_newline;
		else do;
			if ws_info.output_buffer_pos + n_pads > length (output_buffer)
			then call flush_buffer;

			substr (output_buffer, ws_info.output_buffer_pos, n_pads) = "";
			ws_info.output_buffer_pos = ws_info.output_buffer_pos + n_pads;
			ws_info.output_buffer_ll = ws_info.output_buffer_ll + n_pads;
		     end;
	     end;

	if ws_info.output_buffer_pos + length (P_string) > length (output_buffer)
	then call flush_buffer;

	substr (output_buffer, ws_info.output_buffer_pos, length (P_string)) = P_string;
	ws_info.output_buffer_pos = ws_info.output_buffer_pos + length (P_string);
	ws_info.output_buffer_ll = ws_info.output_buffer_ll + length (P_string);
	return;

/* Error exits. These actions are for the use of the format function
   only...this mechanism does not work for apl_print_value_. */

domain_error_left:
	operators_argument.where_error = operators_argument.where_error + 2;

domain_error_right:
	operators_argument.where_error = operators_argument.where_error - 1;
	operators_argument.error_code = apl_error_table_$domain;
	return;

length_error:
	operators_argument.error_code = apl_error_table_$length;
	return;

not_within_int_fuzz_left:
	operators_argument.where_error = operators_argument.where_error + 1;
	operators_argument.error_code = apl_error_table_$not_within_int_fuzz;
	return;

rank_error_left:
	operators_argument.where_error = operators_argument.where_error + 1;
	operators_argument.error_code = apl_error_table_$rank;
	return;

/* Internal procedures */

/* Subroutine to append a single character to the output buffer, incrementing output_buffer_ll appropriately */

append_any_char:
     procedure (P_char);

/* parameters */

declare	P_char		char (1) parameter;

/* automatic */

declare	delta		fixed bin;

/* internal static */

declare	width		(0:511) fixed bin (8) unal internal static init ((6) 4, 0, 0, -1, -2, 0, 4, 0, -3, (2) 0,
						/* 000-017 */
			(5) 4, 0, (10) 4,		/* 020-037 */
			(2) 1, (2) 4, 1, (2) 4, (9) 1,/* 040-057 */
			(16) 1,			/* 060-077 */
			4, (15) 1,		/* 100-117 */
			(14) 1, 4, 1,		/* 120-137 */
			4, (15) 1,		/* 140-157 */
			(15) 1, 0,		/* 160-177 */
			(48) 1,			/* 200-257 */
			(11) 1, 0, (4) 1,		/* 260-277 */
			0, 0, 1, (13) 4,		/* 300-317 */
			(48) 4,			/* 320-377 */
			(256) 4);			/* 400-777 */

/* program */

	if P_char = QNewLine
	then do;
		call append_newline;
		return;
	     end;

	delta = width (rank (P_char));

	if delta = -2				/* HT */
	then delta = ws_info.tab_width - mod (ws_info.output_buffer_ll, ws_info.tab_width);
						/* NB: should be ws_info.tab_width */
	else if delta = -3				/* CR */
	then delta = -ws_info.output_buffer_ll;

	if ws_info.output_buffer_ll + delta > ws_info.width
	then call vector_overflow;

	if ws_info.output_buffer_pos > length (output_buffer)
	then call flush_buffer;

	substr (output_buffer, ws_info.output_buffer_pos, 1) = P_char;
	ws_info.output_buffer_pos = ws_info.output_buffer_pos + 1;
	ws_info.output_buffer_ll = ws_info.output_buffer_ll + delta;
	return;

     end /* append_any_char */;

/* Subroutine to append a newline to the output buffer */

append_newline:
     procedure ();

	if ws_info.output_buffer_pos > length (output_buffer)
	then call flush_buffer;

	substr (output_buffer, ws_info.output_buffer_pos, 1) = QNewLine;
	ws_info.output_buffer_pos = ws_info.output_buffer_pos + 1;
	ws_info.output_buffer_ll = 0;
	return;

     end /* append_newline */;

/* Subroutine to cancel any pending (unwritten) output if a nonlocal
   goto is performed around us. Happens if user hits ATTN during output. */

clean_up:
     procedure ();

	ws_info.output_buffer_pos = 1;
	ws_info.output_buffer_ll = 0;

     end /* clean_up */;

/* Macro-subroutine to compute the number of blank rows to put
   out between the planes of a multi-dimensional array. */

compute_blank_rows:
     procedure ();

	current_rho_value = divide (valx, interval_between_planes, 21, 0);
	n_lines = 1;
	do rhox = right_vb -> value_bead.rhorho - 2 to 1 by -1
	     while (mod (current_rho_value, right_vb -> value_bead.rho (rhox)) = 0);

	     current_rho_value = divide (current_rho_value, right_vb -> value_bead.rho (rhox), 21, 0);
	     n_lines = n_lines + 1;
	end;

	if rhox < 1				/* no blank lines after last row */
	then n_lines = 0;

     end /* compute_blank_rows */;

/* Subroutine to write out the output buffer. Called when buffer fills
   up, or when all output has been copied into the buffer */

flush_buffer:
     procedure ();

/* automatic */

declare	code		fixed bin (35);

/* entries */

declare	iox_$put_chars	entry (ptr, ptr, fixed bin (21), fixed bin (35));

/* internal static */

declare	apl_static_$apl_output
			ptr external static;

/* program */

	call iox_$put_chars (apl_static_$apl_output, (ws_info.output_buffer_ptr), ws_info.output_buffer_pos - 1, code);
	ws_info.output_buffer_pos = 1;

	return;

     end /* flush_buffer */;

/* Subroutine to convert a single float bin (63) number to one of three character forms. */

format_value:
     procedure (bv_colx, bv_valx, bv_suppress_leading_blanks, bv_blank_trailing_zeroes, bv_suppress_trailing_blanks);

/* parameters */

declare	(
	bv_colx		fixed bin,
	bv_valx		fixed bin,
	bv_suppress_leading_blanks
			bit (1) aligned,
	bv_blank_trailing_zeroes
			bit (1) aligned,
	bv_suppress_trailing_blanks
			bit (1) aligned
	)		parameter;

/* automatic */

declare	char_value	char (60) varying,
	decimal_value	float decimal (19),
	exponent		fixed bin,
	exponent_picture	picture "z9",
	field_width	fixed bin,
	1 fixed_picture,
	  2 whole_part	picture "(38)z9v",
	  2 dot		char (1),
	  2 fractional_part picture "(57)9",
	integer_picture	picture "-(38)z9",
	integer_value	fixed dec (19),
	n_leading_blanks	fixed bin (21),
	new_value_width	fixed bin (21),		/* also used to hold n trailing blanks */
	precision		fixed bin,
	scientific_picture	picture "9.(18)9",
	start_pos		fixed bin (21),
	type		fixed bin,
	value_width	fixed bin (21);

/* entries */

declare	apl_format_util_$round
			entry (float decimal (19), fixed bin, char (21)),
	apl_format_util_$round_fixed
			entry (float decimal (19), fixed bin, char (21)),
	apl_format_util_$split
			entry (float decimal (19), fixed decimal (19), fixed bin, char (21));

/* program */

	field_width = fmt_info.col (bv_colx).field_width;
	precision = fmt_info.col (bv_colx).precision;
	type = fmt_info.col (bv_colx).type;

	decimal_value = right_numeric_datum (bv_valx);

	go to case (type);

case (0):						/* SCIENTIFIC FORMAT */
	if precision < 19			/* it is already rounded to 19 places... */
	then call apl_format_util_$round (decimal_value, precision, round_buffer);

	call apl_format_util_$split (decimal_value, integer_value, exponent, round_buffer);

	scientific_picture = integer_value;
	exponent_picture = exponent;

	if integer_value < 0
	then char_value = QUpperMinus;
	else char_value = "";

	if precision = 1
	then do;
		char_value = char_value || substr (scientific_picture, 1, 1);
		new_value_width = 0;
	     end;
	else if bv_blank_trailing_zeroes
	then do;
		new_value_width = length (rtrim (scientific_picture, "0"));

		if substr (scientific_picture, new_value_width, 1) = "."
		then new_value_width = new_value_width - 1;

		char_value = char_value || substr (scientific_picture, 1, new_value_width);
		new_value_width = precision + 1 - new_value_width;
						/* compute number of trailing blanks */
	     end;
	else do;
		char_value = char_value || substr (scientific_picture, 1, precision + 1);
		new_value_width = 0;
	     end;

	char_value = char_value || QLetterE;

	if exponent < 0
	then char_value = char_value || QUpperMinus;
	else new_value_width = new_value_width + 1;	/* remember to pad char_value later. */

	if substr (exponent_picture, 1, 1) = " "
	then do;
		char_value = char_value || substr (exponent_picture, 2, 1);
		new_value_width = new_value_width + 1;	/* remember to pad char_value later. */
	     end;
	else char_value = char_value || exponent_picture;

	if ^bv_suppress_trailing_blanks
	then if new_value_width > 0
	     then char_value = char_value || copy (" ", new_value_width);
	     else ;
	else field_width = field_width - new_value_width; /* shorten field by the missing blanks */

	go to end_case;

case (1):						/* INTEGER FORMAT */
	if ^right_vb -> value_bead.integral_value
	then call apl_format_util_$round_fixed (decimal_value, 0, round_buffer);

	integer_picture = decimal_value;

	if substr (integer_picture, 1, 1) = "-"
	then char_value = QUpperMinus;
	else char_value = "";

	n_leading_blanks = verify (substr (integer_picture, 2), " ") - 1;
	start_pos = 2 + n_leading_blanks;
	char_value = char_value || substr (integer_picture, start_pos);

	go to end_case;

case (2):						/* FIXED_DEC FORMAT */
	if ^right_vb -> value_bead.integral_value
	then call apl_format_util_$round_fixed (decimal_value, precision, round_buffer);

	if decimal_value < 0e0
	then char_value = QUpperMinus;
	else char_value = "";

	fixed_picture.whole_part = decimal_value;

	if ^right_vb -> value_bead.integral_value
	then /* rescale fractional part to be an integer (a little extra hair here is worth
		   it to be able to use a simpler picture and get inline code). */
	     fixed_picture.fractional_part = (decimal_value - trunc (decimal_value)) * 1e57;
	else string (fixed_picture.fractional_part) = (57)"0";

	fixed_picture.dot = ".";

	n_leading_blanks = verify (string (fixed_picture), " ") - 1;
	start_pos = n_leading_blanks + 1;		/* step over leading blanks */

/* Number of characters in result is #whole_digits + decimal point + #fractional_digits */

	value_width = (length (fixed_picture.whole_part) - n_leading_blanks) + 1 + precision;

	if bv_blank_trailing_zeroes
	then do;
		new_value_width = length (rtrim (substr (string (fixed_picture), start_pos, value_width), "0"));
		if substr (string (fixed_picture), start_pos + new_value_width - 1, 1) = "."
		then new_value_width = new_value_width - 1;

		char_value = char_value || substr (string (fixed_picture), start_pos, new_value_width);

		new_value_width = value_width - new_value_width;
						/* compute n trailing blanks */

		if ^bv_suppress_trailing_blanks
		then if new_value_width > 0
		     then char_value = char_value || copy (" ", new_value_width);
		     else ;
		else field_width = field_width - new_value_width;
						/* shorten field by the missing blanks */
	     end;
	else char_value = char_value || substr (string (fixed_picture), start_pos, value_width);

end_case:
	value_width = length (char_value);

	if value_width > field_width
	then go to domain_error_right;

	if bv_suppress_leading_blanks
	then field_width = value_width;

	n_leading_blanks = field_width - value_width;

	if ^format
	then do;
		if ws_info.output_buffer_ll + (n_leading_blanks + value_width) > ws_info.width
						/* Room on output line? */
		then call vector_overflow;

		if ws_info.output_buffer_pos + (n_leading_blanks + value_width) > length (output_buffer)
						/* Room in buffer? */
		then call flush_buffer;

		if n_leading_blanks > 0
		then do;
			substr (output_buffer, ws_info.output_buffer_pos, n_leading_blanks) = "";
			ws_info.output_buffer_pos = ws_info.output_buffer_pos + n_leading_blanks;
		     end;

		substr (output_buffer, ws_info.output_buffer_pos, value_width) = char_value;
		ws_info.output_buffer_pos = ws_info.output_buffer_pos + value_width;

		ws_info.output_buffer_ll = ws_info.output_buffer_ll + (n_leading_blanks + value_width);
	     end;
	else do;
		if n_leading_blanks > 0
		then do;
			substr (temp_result -> character_string_overlay, result_pos, n_leading_blanks) = "";
			result_pos = result_pos + n_leading_blanks;
		     end;

		substr (temp_result -> character_string_overlay, result_pos, value_width) = char_value;
		result_pos = result_pos + value_width;
	     end;

	return;

     end /* format_value */;

/* Function to convert a floating-point value to a floating-point representation
   of an integer, in the usual APL way, or complain if it can't. */

integerize:
     procedure (bv_value) reducible returns (float);

/* parameters */

declare	bv_value		float;

/* automatic */

declare	trial_val		float;

/* program */

	trial_val = floor (bv_value + .5e0);
	if abs (bv_value - trial_val) < ws_info.integer_fuzz
	then return (trial_val);

	go to not_within_int_fuzz_left;

     end /* integerize */;

/* Function to compute the minimum number of columns it would take to represent
   a floating point argument in APL decimal format. */

min_field_width:
     procedure (bv_value, bv_digits, bv_type) returns (fixed bin);

/* parameters */

declare	(
	bv_value		float,
	bv_digits		fixed bin,
	bv_type		fixed bin
	)		parameter;

/* automatic */

declare	decimal_value	float dec (19),
	min_width		fixed bin,
	rounded_value	float;

/* entries */

declare	apl_format_util_$round_fixed
			entry (float decimal (19), fixed bin, char (21));

/* program */

	if (bv_digits ^= 0) & ^(bv_digits = 1 & bv_type = SCIENTIFIC_FMT)
	then min_width = 1;				/* account for decimal point */
	else min_width = 0;				/* no decimal point */

	min_width = min_width + bv_digits;		/* account for fractional digits */

	if bv_type = SCIENTIFIC_FMT
	then do;
		min_width = min_width + 4;		/* account for E+00 */

		if bv_value < 0e0			/* account for sign; */
		then min_width = min_width + 1;	/* it cannot be rounded away */
	     end;
	else do;
		decimal_value = bv_value;		/* perform rounding in decimal to avoid overflows */
		call apl_format_util_$round_fixed (decimal_value, bv_digits, round_buffer);

		if decimal_value > 1.701411834604692317e38
		then rounded_value = TheBiggestNumberWeveGot;
		else if decimal_value < -1.701411834604692317e38
		then rounded_value = -TheBiggestNumberWeveGot;
		else if (decimal_value < 1.469367938527859385e-39) & (decimal_value > 0e0)
		then rounded_value = TheSmallestNumberWeveGot;
		else if (decimal_value > -1.469367938527859385e-39) & (decimal_value < 0e0)
		then rounded_value = -TheSmallestNumberWeveGot;
		else rounded_value = decimal_value;

/* account for digits in integer part...reserve one column for a possible leading zero,
   in case any elements in the column round to zero. Currently, we cannot tell if this
   will happen, so we are forced to assume it will. */

		min_width = min_width + 1 + simple_log10 (abs (rounded_value));

/* account for the sign. We know that if the sign rounds away on the template value,
   then it will round away on all values in the column, so it is proper (and necessary)
   to check the sign on the rounded value. */

		if rounded_value < 0e0
		then min_width = min_width + 1;
	     end;

	return (min_width);

     end /* min_field_width */;

/* Subroutine to perform actions common to the end of the apl_print_value_ cases. */

print_value_epilogue:
     procedure;

	if P_add_nl
	then call append_newline;

	if P_flush_buffer
	then call flush_buffer;

     end /* print_value_epilogue */;

/* Internal procedure to return (max (0, floor (log10 (value)))) */

simple_log10:
     procedure (bv_value) returns (fixed bin);

/* parameters */

declare	bv_value		float parameter;

/* automatic */

declare	result		fixed bin,
	value		float;

/* program */

	value = bv_value;

	if value < 1e0				/* would result be negative? */
	then return (0);				/* yes */

	do result = lbound (one_e, 1) to hbound (one_e, 1) - 1 while (value >= one_e (result + 1));
	end;

	return (result);

     end /* simple_log10 */;

/* Subroutine to perform the actions necessary when a line of (numeric)
   output exceeds the line length */

vector_overflow:
     procedure ();

	call append_newline;

	if ws_info.output_buffer_pos + 6 > length (output_buffer)
	then call flush_buffer;

	substr (output_buffer, ws_info.output_buffer_pos, 6) = "";
	ws_info.output_buffer_pos = ws_info.output_buffer_pos + 6;
	ws_info.output_buffer_ll = ws_info.output_buffer_ll + 6;
	return;

     end /* vector_overflow */;

%include apl_push_stack_fcn;
     end /* apl_monadic_format_ */;
