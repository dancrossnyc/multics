/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* format: style3 */
apl_translate_pathname_:
     procedure (a_wsid, a_dname, a_ename, a_fcbp, a_code);

/* procedure to translate an APL wsid into a Multics pathname and find the entry.
   Written August 1973 by RSL.
   Modified 15 Sep 1973 by DAM for user numbers as directory names, special-case "continue"
   Modified 740201 by PG to change continue to Username.sv.apl, and allow V1 ws names.
   Modified 740423 by PG to make V1 & V2 names mutually exclusive.
   Modified 790110 by William York to add file system expansion capability.
   Modified 800307 by PG to fix 459 (did not strip existing suffixes).
   Modified 811210 by TO to add 'use_search_paths' entrypoint.
 */

declare	a_wsid		char (*) parameter,		/* (Input) the APL workspace name */
	a_dname		char (*) parameter,		/* (Output) The Multics directory pathname */
	a_ename		char (*) parameter,		/* (Output) The Multics entry name */
	a_fcbp		pointer parameter,		/* (Output) if non-null, points at the msf_manager_ file control block */
	a_code		fixed bin (35) parameter;	/* (Output) 0 means ws exists, /=0 means non-exist or error */

/* Code starts here for normal call. */

	component_file = "0"b;			/* ws id, not file system file */
	may_use_search_paths = "0"b;			/*  Ignore APL search paths. */
	version_one = "0"b;				/* version 2, not 1 */
	goto common_code;

file_system_pathname:				/* called by apl_file_system_ */
     entry (a_wsid, a_dname, a_ename, a_fcbp, a_code);

	component_file = "1"b;			/* file system file, not WS */
	may_use_search_paths = "0"b;			/*  Ignore APL search paths. */
	version_one = "0"b;				/* version 2 names, not version 1 */
	goto common_code;

allow_version_one:					/* called by )V1COPY and )V1PCOPY */
     entry (a_wsid, a_dname, a_ename, a_fcbp, a_code);

	component_file = "0"b;
	may_use_search_paths = "0"b;			/*  Ignore APL search paths. */
	version_one = "1"b;
	goto common_code;


use_search_paths:					/*  Called by ')LOAD'.  */
	entry (a_wsid, a_dname, a_ename, a_fcbp, a_code);

	component_file = "0"b;			/*  ws id, not file system file  */
	may_use_search_paths = "1"b;			/*  Allow use of APL search paths.  */
	version_one = "0"b;				/*  version 2 names, not version 1  */
	goto common_code;

common_code:
	a_fcbp = null;

/* check for an APL/360 style wsid; i.e. a number and an optional name (optional for )LIB.) */

/* If there is a leading digit, it is a library number. V1 wsid's
	   have no library numbers, so ignore it. */

	idx = verify (a_wsid, whitespace);		/* flush leading blanks and tabs */

	if ^version_one & index ("0123456789", substr (a_wsid, idx, 1)) ^= 0
	then do;

		number_from_wsid = cv_dec_check_ (substr (a_wsid, idx), end_of_number);
		end_of_number = end_of_number + idx - 1;
		idx = end_of_number;

		start_of_name = idx + verify (substr (a_wsid, idx), whitespace) - 1;

		if start_of_name > end_of_number
		then do;
			if component_file
			then call ioa_$rsnnl (">^a.cf.apl", entry_name_part, (0), substr (a_wsid, start_of_name));
			else call ioa_$rsnnl (">^a.sv.apl", entry_name_part, (0), substr (a_wsid, start_of_name));
			absolute_path = "0"b;
		     end;
		else do;				/* just a number, return directory pathname for ")LIB" */
			entry_name_part = " ";
			absolute_path = "1"b;
			a_ename = " ";		/* will be changed to ".sv.apl", an illegal name which will be 
				if this is )LIB, which is what we expect */

		     end;

		call user_info_$whoami (user_name, user_project);

/* the user number may refer either to a public library
	        (in >apl) or a private library belonging to a member
	        of the user's project */

		if number_from_wsid >= 1000
		then call ioa_$rsnnl (">udd>^a>apl_directories>^d^a", Multics_wsid, length_Multics_wsid, user_project,
			number_from_wsid, entry_name_part);
		else call ioa_$rsnnl (">apl>library_^d^a", Multics_wsid, length_Multics_wsid, number_from_wsid,
			entry_name_part);

		if absolute_path
		then call absolute_pathname_ (Multics_wsid, dname, a_code);
		else call expand_pathname_ (Multics_wsid, dname, ename, a_code);
		if a_code ^= 0
		then return;

		if length (a_ename) = 0
		then do;				/* )LIB - return now without going through msf_manager_ cruft */
			a_dname = dname;
			return;
		     end;
	     end;

	else if length (a_ename) = 0			/* ")LIB" - just get directory pathname from argument */
	then do;
		call absolute_pathname_ (a_wsid, dname, a_code);
		a_dname = dname;
		return;
	     end;

/* check for the continue workspace, punting for file system */

	else do;
		if version_one
		then suffix = "apl";
		else if component_file
		then suffix = "cf.apl";
		else suffix = "sv.apl";

		call expand_pathname_$add_suffix (a_wsid, suffix, dname, ename, a_code);
		if a_code ^= 0
		then return;

/* Handle the continue ws */

		if ename = "continue.sv.apl"
		then do;
			call user_info_$whoami (user_name, user_project);
			call user_info_$homedir (dname);

			ename = rtrim (user_name) || ".sv.apl";
		     end;
		else if (version_one & ename = "continue.apl")
		then do;
			dname = get_wdir_ ();
		     end;
		else if may_use_search_paths & search (a_wsid, "<>") = 0
		then do;
	
/* Use search paths if path is relative and we were supposed to try search paths. */
		     if apl_dir = "" then
			call hcs_$fs_get_path_name (codeptr (apl_translate_pathname_), apl_dir, (0), (dname), a_code);
		     call search_paths_$find_dir ("apl", null (), ename, apl_dir, dname, a_code);
		     if a_code ^= 0
		     then dname = get_wdir_ ();
		end;
	     end;

/* dname and ename have been set up.  Now find the entry and
   see what kind it is */

	call msf_manager_$open (dname, ename, a_fcbp, a_code);

	if a_code ^= 0
	then if a_code ^= error_table_$noentry		/* this code is OK; msf_manager_$get_ptr will */
	     then if a_fcbp ^= null			/* create the SSF/MSF later. Any other code we */
		then do;				/* treat as fatal. */
			call msf_manager_$close (a_fcbp);
			a_fcbp = null;
		     end;

	a_dname = dname;
	a_ename = ename;
	return;

/* Entries */

dcl	ioa_$rsnnl	entry options (variable);
dcl	get_wdir_		entry returns (char (168));
dcl	user_info_$whoami	entry (char (*), char (*));
dcl	user_info_$homedir	entry (char (*));
dcl	expand_pathname_	entry (char (*), char (*), char (*), fixed bin (35));
dcl	hcs_$fs_get_path_name entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
dcl	expand_pathname_$add_suffix
			entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl	absolute_pathname_	entry (char (*), char (*), fixed bin (35));
dcl	msf_manager_$open	entry (char (*), char (*), pointer, fixed binary (35));
dcl	msf_manager_$close	entry (pointer);
dcl search_paths_$find_dir entry (char (*), ptr, char (*), char (*), char (*), fixed bin (35));
dcl	cv_dec_check_	entry (char (*), fixed bin (35)) returns (fixed bin (35));

/* Automatic */

dcl	suffix		char (6);
dcl	user_project	char (9);
dcl	user_name		char (24);
dcl	(component_file, may_use_search_paths, version_one)
			bit (1) aligned;
dcl	absolute_path	bit (1) aligned;
dcl	apl_dir		char (168) static init ("");
dcl	number_from_wsid	fixed bin (35);
dcl	idx		fixed bin;
dcl	end_of_number	fixed bin (35);
dcl	start_of_name	fixed bin;
dcl	entry_name_part	char (33);		/* blank or ">" and the ename (for number-format wsid) */
dcl	Multics_wsid	char (168);
dcl	length_Multics_wsid fixed bin;
dcl	dname		char (168);
dcl	ename		char (32);

/* Builtins */

dcl	(index, length, null, rtrim, substr, verify)
			builtin;

/* External static */

dcl	error_table_$noentry
			fixed bin (35) external static;

/* Internal Static */

dcl	whitespace	char (2) init (" 	") internal static;
						/* space, tab */

     end apl_translate_pathname_;
