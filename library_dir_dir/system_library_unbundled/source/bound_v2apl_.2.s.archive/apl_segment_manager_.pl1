/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


/* The following module is used to manage temporary segments in APL. These segments are used for stacks,
   editor, save and load temporaries, etc.  The get entry is called with no arguments and will return a pointer which
   will be set to point to the base of a temporary segment.  The free entry takes such a pointer, but it need not point
   at the base of the segment.   This module replaces an earlier version that did not attempt to reuse
   the segments.  Here a table is kept of pointers to the segments, along with a table of bits telling if the
   segment is in use.  If no previously-created segments are in use, a new one is created with the name
   "apl_seg_NNN" where NNN is a three-digit decimal number starting and zero and increasing for each new segment
   created.

	Created 11/28/73 by G. Gordon Benedict.
	Modified 761007 by PG to have set_temp_dir do a reset when directory is changed.
*/

apl_segment_manager_$get:				/* entry to get pointer to temporary segment */
	procedure () returns (pointer);	/* pointer will be filled in with pointer to base of segment */

declare	a_seg_ptr pointer parameter;
declare	seg_ptr pointer;		/* just a random pointer */
declare	packed_seg_ptr pointer unaligned;	/* for fast compares with packed ptrs in seg table */

declare	segment_counter	/* contains NNN (last three digits of temporary segment next to be allocated) */
	     fixed decimal precision (3,0) internal static initial (0);

declare	segment_counter_picture picture "999";

declare	segment_pointers		/* contains pointers to all segments so far created (which are NEVER deleted) */
	     dimension (0 : 31) pointer unaligned internal static initial ( (32) null () );

declare	segment_used		/* contains one bit for every segment, allocated or not. 1 = in use
				   (i.e. allocated but not yet freed) 0 = not in use or not allocated */
	     dimension (0 : 31) bit (1) internal static unaligned initial ( (32) (1) "0"b);

declare	(apl_error_table_$temp_seg_already_exists,	/* happens if segment_used says not existent but does */
	 apl_error_table_$cant_create_seg,		/* happens if in dir without modify access */
	 apl_error_table_$wsfull_out_of_segs,			/* happens if more than 32 segments are needed */
	 apl_error_table_$attempt_to_free_not_temp,	/* Attempt to free segment not known to storage manager */
	 apl_error_table_$cant_truncate_seg)		/* hcs_$truncate_seg refuses to truncate */
	     fixed binary precision (35) external static;

declare	segment_index		/* used to loop thru segment_pointers table */
	     fixed binary;

declare	temp_dir	/* contains name of directory into which to place temporary segments */
	     character (168) internal static initial ("");

declare	(hbound,
	 index,
	 null,
	 pointer,
	 string) builtin;

declare	apl_system_error_		/* used to signal all of those gruesome errors above */
	     entry (fixed binary precision (35));

declare	hcs_$make_seg		/* used to create temp segs when no unused segs are in existence */
	     entry (character (*), character (*), character (*), fixed binary precision (4), pointer,
		fixed binary precision (35));

declare	unique_chars_		/* used to guarantee unique names */
	     entry (bit (*)) returns (char (15));
declare	hcs_$delentry_seg		/* used to delete temp segs when clear command (reset entry) is used */
	     entry (pointer, fixed binary precision (35));

declare	hcs_$truncate_seg		/* used to reduce freed segments to zero length */
	     entry (pointer, fixed binary, fixed binary precision (35));

declare	code			/* error code */
	     fixed binary precision (35);

/* Now comes main code for get entry.  See if there is an unused segment with a non-null pointer */

	segment_index = index (string (segment_used), "0"b) - 1;	/* find first unused bit */
	if segment_index < 0 then do;	/* unfortunately all entries in table are used up, so... */
	      call apl_system_error_ (apl_error_table_$wsfull_out_of_segs);	/* if you get this one, tell me 
							   to increase size of this table */
	      return;
	end;

	seg_ptr = segment_pointers (segment_index);	/* fetch pointer for unused segment */

	if seg_ptr = null () then do;	/* segment does not exist, no unused segments were available. get one */
	     segment_counter_picture = segment_counter;		/* convert to 001, 002, etc. */
	     call hcs_$make_seg (temp_dir,	/* use this dir */
		unique_chars_ (""b) || ".apl_seg_" || segment_counter_picture, "", 1011b, seg_ptr, code);

	     if seg_ptr = null () then do;	/* for some reason make_seg refused to make it */
		call apl_system_error_ (apl_error_table_$cant_create_seg);
		return;
	     end;

	     if code ^= 0 then do;		/* uhoh... there's another apl running in this losers process who is
					   using his own table... los,e, lose, lose */
		call apl_system_error_ (apl_error_table_$temp_seg_already_exists);
		return;
	     end;

	     segment_counter =	/* increment NNN suffix for next time */
		segment_counter + 1;
	     segment_pointers (segment_index) = seg_ptr;	/* fill in for next time */
	end;

	segment_used (segment_index) = "1"b;	/* indicate in use */
	return (seg_ptr);		/* return pointer to allocated segment */


/* Now comes the free entry.  Mostly system-error checking */

apl_segment_manager_$free:
	entry (a_seg_ptr);		/* pointer into segment to free */

	packed_seg_ptr,		/* more efficient to compare packed to packed than packed to unpacked */
	seg_ptr = pointer (a_seg_ptr, 0);	/* copy and get ptr to base of segment */

/* search thru the segment table for one which matches */

	do segment_index = 0 by 1 while (segment_index <= hbound (segment_pointers, 1));	/* thru whole table */

	     if segment_pointers (segment_index) = packed_seg_ptr then do;	/* found it! */
		segment_used (segment_index) = "0"b;	/* indicate not used for next allocate */
		call hcs_$truncate_seg (seg_ptr, 0, code);	/* reduce to zero length */
		if code ^= 0 then do;	/* truncate refuses */
		     segment_pointers (segment_index) = null ();	/* do not let APL re-use this segment */
		     call apl_system_error_ (apl_error_table_$cant_truncate_seg);
		     return;
		end;

		return;
	     end;
	end;

/* The loser gave me a segment I couldn't find in my segment table */

	call apl_system_error_ (apl_error_table_$attempt_to_free_not_temp);
	return;

/* This entry is used to initialize the temp_dir to some directory, or to change to a new directory. */

apl_segment_manager_$set_temp_dir:
	entry (directory);

declare	directory character (*) parameter;	/* the new directory */

	if temp_dir ^= ""				/* If temp_dir is initialized */
	then if temp_dir ^= directory			/* And we are changing directories */
	     then do;
		     call apl_segment_manager_$reset;	/* delete old temp segs */
		     temp_dir = directory;
		end;
	     else;				/* directory is staying the same */
	else temp_dir = directory;			/* just initialize temp_dir first time thru */
	return;

/* This entry is used to tell the segment manager to get rid of all apl temporary segments and clear the
   table of segments, and reset the segment counter to zero. */

apl_segment_manager_$reset:
	entry ();

	segment_counter = 0;	/* reset to zero */
	string (segment_used) = ""b;		/* no segments are in use */

	do segment_index =0 by 1 while (segment_index <= hbound (segment_pointers, 1));
	     if segment_pointers (segment_index) ^= null () then do;	/* delete this segment */
		seg_ptr = segment_pointers (segment_index);
		segment_pointers (segment_index) = null ();	/* will be no segment there soon */
		call hcs_$delentry_seg (seg_ptr, code);		/* delete this temp seg */
	     end;
	end;
	return;

/* This entry is used to inquire the segment manager to give the name of the current temp_dir and value
   of the segment_counter */

apl_segment_manager_$get_dir_and_count:
	entry (directory, count);

declare	count fixed decimal (3, 0) parameter;

	directory = temp_dir;
	count = segment_counter;

     end apl_segment_manager_$get;
