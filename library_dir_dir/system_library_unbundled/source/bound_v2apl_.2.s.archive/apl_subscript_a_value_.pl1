/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* Program to implement APL subscripting and subscripted assignment.
   Written by Dan Bricklin, Summer, 1973.
   Modified 740909 by PG for new value bead declaration.
   Modified 741125 by PG to allow an effective scalar on the right-hand-size of a subscripted assignment
	to be extended to cover the shape of the left-hand-side.
   Modified 770301 by PG to fix bug 270 (giving RANK ERROR instead of LENGTH ERROR).
   Modified 780210 by PG to fix bug 278 by calling apl_push_stack_.
*/

apl_subscript_a_value_:
	procedure (operators_argument);

/* builtins */

declare	(abs, addr, addrel, bool, fixed, floor, null, rel, size, substr, string) builtin;

/* declarations */

dcl
	increment fixed bin,
	from_subscript fixed bin (21),
	parse_frame_ptr ptr,
	value_ptr ptr,
	list_ptr ptr,
	old_rhorho fixed bin,
	n_words fixed bin (19),
	subscript_scratch_ptr ptr,

	1 subscript_scratch (old_rhorho) aligned based (subscript_scratch_ptr),
	   2 entry fixed bin,
	   2 multiplier fixed bin,
	   2 subscripted_value_rho fixed bin,
	   2 value_bead_data_ptr ptr unaligned,
	   2 max_value fixed bin,
	   2 null_entry bit (1) aligned,
	   2 is_integer bit (1) aligned,

	value_is_numeric bit (1) aligned,
	new_rhorho fixed bin,
	data_elements fixed bin (21),
	i fixed bin (21),
	multiplier_temp fixed bin,
	temp_member_ptr ptr,
	temp_ptr ptr,
	float_index_origin float,
	integer_fuzz float,
	from_data_ptr ptr,
	which_element fixed bin (21),
	carry bit (1) aligned,
	j fixed bin,
	float_subscript float,
	float_temp float,
	fixed_subscript fixed bin (21),
	result_data_ptr ptr,
	result_ptr ptr,
	counter fixed bin,
	final_ptr ptr,
	apl_free_bead_ entry (ptr unaligned),
	apl_copy_value_ entry (ptr unaligned, ptr unaligned),
	final_data_ptr ptr,

	assigner fixed bin int static init (-1),
	assignee fixed bin int static init (1),
	list fixed bin int static init (0),
	assigner_ptr ptr,
	assignee_ptr ptr;

/* external static */

dcl	(apl_error_table_$index,
	apl_error_table_$length,
	apl_error_table_$value,
	apl_error_table_$assign_to_value,
	apl_error_table_$domain,
	apl_error_table_$rank) fixed bin (35) external static;

/* include files */

%include apl_number_data;
%include apl_ws_info;
%include apl_parse_frame;
%include apl_bead_format;
%include apl_operator_bead;
%include apl_symbol_bead;
%include apl_lexed_function_bead;
%include apl_operators_argument;
%include apl_value_bead;
%include apl_list_bead;

/* program */

	value_ptr = operators_argument.value (1);
	list_ptr = operators_argument.value (2);

	old_rhorho = list_ptr -> list_bead.number_of_members;

	if old_rhorho^=value_ptr -> value_bead.rhorho then go to rank_error;

	n_words = size (subscript_scratch);
	subscript_scratch_ptr = apl_push_stack_ (n_words);

	value_is_numeric = value_ptr -> value_bead.numeric_value;
	call fill_in_scratch;

	call stack_allocate;

	float_index_origin = ws_info.index_origin;
	integer_fuzz = ws_info.integer_fuzz;
	from_data_ptr = value_ptr -> value_bead.data_pointer;

	entry (old_rhorho) = 0;

	do i = 0 by 1 while (i < data_elements);
	   call do_subscripting;

	   if value_is_numeric then result_data_ptr -> numeric_datum (i) = from_data_ptr -> numeric_datum (which_element);
	   else result_data_ptr -> character_datum (i) = from_data_ptr -> character_datum (which_element);

	end;

	call clean_up_list_bead;

	call copy_up;

	return;

fill_in_scratch:
	proc;

	new_rhorho = 0;
	data_elements = 1;
	multiplier_temp = 1;

	do i = old_rhorho to 1 by -1;
	   multiplier (i) = multiplier_temp;
	   entry (i) = 1;

	   temp_member_ptr = list_ptr -> list_bead.member_ptr (i);

	   if temp_member_ptr=null then do;
	      subscripted_value_rho (i), max_value (i) = value_ptr -> value_bead.rho (i);
	      data_elements = data_elements * max_value (i);
	      new_rhorho = new_rhorho + 1;
	      null_entry (i) = "1"b;
	      end;
	   else do;
	      max_value (i) = temp_member_ptr -> value_bead.total_data_elements;
	      data_elements = data_elements * max_value (i);
	      value_bead_data_ptr (i) = temp_member_ptr -> value_bead.data_pointer;
	      subscripted_value_rho (i) = value_ptr -> value_bead.rho (i);
	      if temp_member_ptr -> value_bead.integral_value then is_integer (i) = "1"b;
	      else if temp_member_ptr -> value_bead.character_value then go to domain_error;
	      else is_integer (i) = "0"b;
	      new_rhorho = new_rhorho + temp_member_ptr -> value_bead.rhorho;
	      null_entry (i) = "0"b;
	      end;

	   multiplier_temp = multiplier_temp * subscripted_value_rho (i);

	   end;

	return;

	end;

stack_allocate:
	proc;

	if value_is_numeric then n_words = size (numeric_datum) + 1;
	else n_words = size (character_string_overlay);

	number_of_dimensions = new_rhorho;
	n_words = n_words + size (value_bead);
	result_ptr = apl_push_stack_ (n_words);

	result_data_ptr = addr (result_ptr -> value_bead.rho (new_rhorho + 1));
	if value_is_numeric then if substr (rel (result_data_ptr),18,1) then
	   result_data_ptr = addrel (result_data_ptr, 1);

	result_ptr -> value_bead.data_pointer = result_data_ptr;
	string (result_ptr -> value_bead.type) = string (value_ptr -> value_bead.type);
	result_ptr -> value_bead.total_data_elements = data_elements;
	result_ptr -> value_bead.rhorho = new_rhorho;

	counter = 0;
	do i = 1 to old_rhorho;
	   if null_entry (i) then do;
	      counter = counter + 1;
	      result_ptr -> value_bead.rho (counter) = subscripted_value_rho (i);
	      end;
	   else do;
	      temp_member_ptr = list_ptr -> list_bead.member_ptr (i);
	      do j = 1 to temp_member_ptr -> value_bead.rhorho;
	         counter = counter + 1;
	         result_ptr -> value_bead.rho (counter) = temp_member_ptr -> value_bead.rho (j);
	         end;
	      end;
	   end;

	return;

	end;

do_subscripting:
	proc;

	which_element = 0;
	carry = "1"b;

	do j = old_rhorho to 1 by -1;

	   if carry then do;
	      entry (j) = entry (j) + 1;
	      if entry (j)>max_value (j) then entry (j) = 1;
	      else carry = "0"b;
	      end;

	   if null_entry (j) then which_element = which_element + (entry (j) - 1) * multiplier (j);
	   else do;
	      float_subscript = value_bead_data_ptr (j) -> numeric_datum (entry (j) - 1) - float_index_origin;
	      if is_integer (j) then fixed_subscript = fixed (float_subscript);
	      else do;
		  float_temp = floor (float_subscript + 0.5);
		  if abs (float_temp - float_subscript) > integer_fuzz then go to index_error;
		  if abs (float_temp) > 1e21b then go to index_error;
		  fixed_subscript = fixed (float_temp);
		  end;
	      if fixed_subscript<0 then go to index_error;
	      if fixed_subscript>=subscripted_value_rho (j) then go to index_error;
	      which_element = which_element + fixed_subscript * multiplier (j);
	      end;

	   end;


	end;

clean_up_list_bead:
	proc;


	final_ptr = list_ptr;

	do i = 1 to list_ptr -> list_bead.number_of_members;
	     temp_member_ptr = list_ptr -> list_bead.member_ptr (i);
	     if temp_member_ptr ^= null
	     then if list_ptr -> list_bead.bits (i).semantics_on_stack
		then final_ptr = temp_member_ptr;
		else do;
			temp_member_ptr -> general_bead.reference_count = temp_member_ptr -> general_bead.reference_count - 1;
			if temp_member_ptr -> general_bead.reference_count < 1
			then call apl_free_bead_ ((temp_member_ptr));
		     end;
	end;

	ws_info.value_stack_ptr = final_ptr;		/* pop list bead & friends */
	return;

	end;

copy_up:
	proc;

	final_ptr = apl_push_stack_ (n_words);

	string (final_ptr -> value_bead.type) = string (result_ptr -> value_bead.type);
	final_ptr -> value_bead.total_data_elements = result_ptr -> value_bead.total_data_elements;
	final_ptr -> value_bead.total_data_elements = data_elements;
	final_ptr -> value_bead.rhorho = new_rhorho;
	do i = 1 to new_rhorho;
	   final_ptr -> value_bead.rho (i) = result_ptr -> value_bead.rho (i);
	   end;

	final_data_ptr = addr (final_ptr -> value_bead.rho (new_rhorho + 1));
	if value_is_numeric then do;
	   if substr (rel (final_data_ptr),18,1) then final_data_ptr = addrel (final_data_ptr, 1);
	   final_data_ptr -> numeric_datum (*) = result_data_ptr -> numeric_datum (*);
	   end;
	else final_data_ptr -> character_string_overlay = result_data_ptr -> character_string_overlay;

	final_ptr -> value_bead.data_pointer = final_data_ptr;

	operators_argument.result = final_ptr;

	return;

	end;

rank_error:
	operators_argument.error_code = apl_error_table_$rank;
	return;

index_error:
	operators_argument.error_code = apl_error_table_$index;
	return;

domain_error:
	operators_argument.error_code = apl_error_table_$domain;
	return;

cant_assign_to_value:
	operators_argument.error_code = apl_error_table_$assign_to_value;
	return;

length_error:
	operators_argument.error_code = apl_error_table_$length;
	return;

value_error_right:
	operators_argument.where_error = operators_argument.where_error - 2;

value_error_left:
	operators_argument.where_error = operators_argument.where_error + 1;
	operators_argument.error_code = apl_error_table_$value;
	return;

apl_subscripted_assignment_:
	entry (operators_argument, rs_ptr);


dcl
	rs_ptr ptr,
	1 rs (1000) aligned based (rs_ptr),
	   2 type fixed bin,
	   2 bits unaligned like operator_bead.bits_for_parse,
	   2 semantics ptr unaligned,
	   2 lexeme fixed bin;

	if rs (assigner).semantics = null
	then go to value_error_right;

	if rs (assignee).semantics = null
	then go to value_error_left;

	if rs (assignee).semantics_on_stack then go to cant_assign_to_value;
	temp_ptr = current_parse_frame_ptr -> parse_frame.lexed_function_bead_ptr -> lexed_function_bead.lexeme_array_ptr ->
	   lexed_function_lexeme_array (rs (assignee).lexeme);
	if ^temp_ptr -> general_bead.symbol then go to cant_assign_to_value;
	if temp_ptr -> meaning_pointer -> general_bead.reference_count>2 then do;
	   temp_ptr -> meaning_pointer -> general_bead.reference_count =
	      temp_ptr -> meaning_pointer -> general_bead.reference_count - 1;
	   call apl_copy_value_ ( (temp_ptr -> meaning_pointer), temp_ptr -> meaning_pointer);
	   temp_ptr -> meaning_pointer -> general_bead.reference_count =
	      temp_ptr -> meaning_pointer -> general_bead.reference_count + 1;
	   rs (assignee).semantics = temp_ptr -> meaning_pointer;
	   end;

	assigner_ptr = rs (assigner).semantics;
	assignee_ptr = rs (assignee).semantics;
	list_ptr = rs (list).semantics;

	old_rhorho = list_ptr -> list_bead.number_of_members;
	if old_rhorho^=assignee_ptr -> value_bead.rhorho then go to rank_error;

	/* Allocate scratch vector. It will get popped when list bead is popped */

	n_words = size (subscript_scratch);
	subscript_scratch_ptr = apl_push_stack_ (n_words);

	value_is_numeric = assignee_ptr -> value_bead.numeric_value;
	if bool (value_is_numeric, assigner_ptr -> value_bead.numeric_value, "0110"b) then go to domain_error;

	string (assignee_ptr -> value_bead.data_type) = string (assignee_ptr -> value_bead.data_type) &
	     string (assigner_ptr -> value_bead.data_type);

	value_ptr = assignee_ptr;

	call fill_in_scratch;

	if assigner_ptr -> value_bead.total_data_elements = 1	/* an effective scalar */
	then increment = 0;
	else do;
		counter = 0;
		do i = 1 to old_rhorho;
		     if null_entry (i)
		     then do;
			     counter = counter + 1;
			     if subscripted_value_rho (i)^=assigner_ptr -> value_bead.rho (counter)
			     then go to length_error;
			end;
		     else do;
			     temp_member_ptr = list_ptr -> list_bead.member_ptr (i);
			     do j = 1 to temp_member_ptr -> value_bead.rhorho;
grace_to_one_rhos:
				counter = counter + 1;
				if assigner_ptr -> value_bead.rho (counter)^=temp_member_ptr -> value_bead.rho (j)
				then do;
					if assigner_ptr -> value_bead.rho (counter)=1
					then go to grace_to_one_rhos;
					go to length_error;
				     end;
			     end;
			end;
		end;
		increment = 1;
	     end;

	float_index_origin = ws_info.index_origin;
	integer_fuzz = ws_info.integer_fuzz;
	from_data_ptr = assigner_ptr -> value_bead.data_pointer;
	result_data_ptr = assignee_ptr -> value_bead.data_pointer;

	entry (old_rhorho) = 0;
	from_subscript = 0;

	do i = 0 by 1 while (i < data_elements);
	     call do_subscripting;

	     if value_is_numeric
	     then result_data_ptr -> numeric_datum (which_element) = from_data_ptr -> numeric_datum (from_subscript);
	     else result_data_ptr -> character_datum (which_element) = from_data_ptr -> character_datum (from_subscript);

	     from_subscript = from_subscript + increment;
	end;

	call clean_up_list_bead;

	assignee_ptr -> general_bead.reference_count = assignee_ptr -> general_bead.reference_count - 1;

	return;

%include apl_push_stack_fcn;
     end /* apl_subscript_a_value_ */;
