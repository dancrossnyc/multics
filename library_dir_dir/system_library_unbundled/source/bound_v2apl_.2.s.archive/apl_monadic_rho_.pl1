/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* This module implements monadic iota, monadic rho, and dyadic rho

   Created by G. Gordon Benedict on 06/23/73
   Modified 740910 by PG for error marker.
   Modified 780210 by PG to fix bug 278 by calling apl_push_stack_.
   Modified 780214 by PG to fix bug 312 (iEXPR, where expr is boolean, failed). Bug was introduced 780210.
   Modified 790313 by William M. York to fix bug 311 (some programs are
	double-word aligning character data, bug 364 (reshape does not check
	for negative args), and bug 332 (reshape computes number of elements
	in result before rounding left arguments).
   Modified 790316 by WMY to fix the last fix.
   Modified 790321 by WMY to fix bug 383 (reshape does not always re-protect very
	large result values).
*/

apl_monadic_rho_:
	procedure (operators_argument);

/* based */

declare	1 value_bead_overlay aligned based,	/* overlay so I can pass descriptor to procedure */
	  2 header aligned like general_bead,
	  2 total_data_elements fixed binary (21),
	  2 rhorho fixed binary,
	  2 data_pointer pointer unaligned,
	  2 rho_sub_1 fixed binary (21);

dcl	saved_left_arg (left_data_elements) fixed binary(21) based (saved_left_arg_ptr);
dcl	saved_left_arg_ptr pointer aligned init (null());

/* automatic */

dcl	(
	right_vb,				/* pointer to value bead for operand to right of operator */
	right_array,			/* ptr to right operand itself (data ptr from right v.b.) */
	left_vb,				/* ptr to v.b. to left of operator */
	left_array,			/* ptr to left operand */
	result_vb,			/* ptr to result v.b. */
	result_array			/* where result array will be stored */
			) pointer aligned;

dcl	(
	data_elements,			/* number of elements in result */
	right_data_elements,		/* number of elements in right array */
	left_data_elements			/* number of elements in left array */
			) fixed binary precision (21);

declare (	data_words_needed,			/* to tell stack_allocate_known how many words needed */
	number_to_copy,			/* number of words in word_copy_overlay for copying */
	words_needed,			/* words needed to get from value stack. set by stack_allocate_known */
	words_needed_in_bead		/* words needed in value bead to be allocated. */
			) fixed bin (19);

declare	(left_rhorho,			/* copy of value_bead.rhorho for left arg */
	right_rhorho,			/* same for right */
	rhorho,				/* used to tell stack_allocate_known how much space needed in value bead */
	rho_subscript,			/* steps thru rho arrays */
	count				/* random counter */
			) fixed binary;

dcl	numeric_result bit(1);

dcl	(single_element_fl_1,		/* used to hold one arg if it is a scalar and the other an array */
	fuzz,				/* copy of fuzz in ws_info for efficiency */
	integer_fuzz,			/* copy of integer_fuzz */
	result_accumulator,			/* another random temp */
	float_temp			/* temporary for float -> integer conversions */
		) float;

dcl	1 free_type aligned like general_bead.type;

/* entries */

declare	apl_iota_appendage_ entry (float bin (63), float bin (63), fixed bin (21), pointer);
declare	apl_rho_appendage_ entry (1 aligned like value_bead_overlay, 1 aligned like value_bead_overlay,
	     (8) fixed binary (35));
/* external static */

dcl	(apl_error_table_$rank,
	apl_error_table_$length,
	apl_error_table_$domain
	) fixed bin (35) ext static;			/* error codes */

/* builtins */

dcl	(
	abs,
	addrel,
	divide,
	fixed,
	float,
	floor,
	prod,
	rel,
	substr,
	size,
	string	) builtin;

declare	automatic_storage dimension (8) fixed binary (35);	/* temps for rho_appendage */

dcl	word_copy_overlay based dimension (number_to_copy) fixed bin (35);	/* for aggregate array copies */

dcl	numeric_datum_or1 (data_elements) based float;	/* numeric data but with an origin of 1 */

/* include files */

%include apl_number_data;
%include apl_operators_argument;
%include apl_bead_format;
%include apl_value_bead;
%include apl_ws_info;

/* The following subroutine is used to allocate a result value bead and a result array on the value stack.
   The rhorho of the result v.b. is given in variable rhorho, and the number of data elements in the result array
   is given in data_elements.  It sets result_vb to point to allocated value_bead and result_array to point to the
   array.  All fields in the value bead are filled in except value_bead.header.type and value_bead.rho.
   The bead is allocated on such a boundary that the next word after it (the first word of the result array) is
   doubleword aligned. */

stack_allocate_numeric:
	procedure ();

	numeric_result = "1"b;
	data_words_needed = size (numeric_datum_or1);	/* get result length from data_elements */
	goto stack_allocate_known_common;	/* common code */

stack_allocate_char:			/* entry to assume thing to alloc is char */
	entry ();

	numeric_result = "0"b;
	data_words_needed = size (character_string_overlay);


stack_allocate_known:
	entry ();				/* if caller has already loaded data_words_needed with number needed */

stack_allocate_known_common:		/* to transfer from above */
	number_of_dimensions = rhorho;
	words_needed_in_bead = size (value_bead);
	words_needed = words_needed_in_bead + data_words_needed + 1;	/* addition of 1 to doubleword align */
	result_vb = apl_push_stack_ (words_needed);
	result_array = addrel (result_vb, words_needed_in_bead);
	if numeric_result
	     then if substr (rel (result_array), 18, 1)
		then result_array = addrel (result_array, 1);		/* if next word is odd-aligned, bump by 1 word */

	result_vb -> value_bead.total_data_elements = data_elements;
	result_vb -> value_bead.rhorho = rhorho;		/* make result conform with original operand */
	result_vb -> value_bead.data_pointer = result_array;	/* pointer to actual array */
	operators_argument.result = result_vb;		/* let parse know where I put result when I return */

end stack_allocate_numeric;

/* procedure to extract information from operators_argument */

dyadic_extract:
	procedure ();

/* copy information from argument structure */

	left_vb = operators_argument.operands (1).value;
	left_array = left_vb -> value_bead.data_pointer;
	left_data_elements = left_vb -> value_bead.total_data_elements;
	left_rhorho = left_vb -> value_bead.rhorho;

monadic_extract:			/* repeat for right operand */
	entry ();

	right_vb = operators_argument.operands (2).value;
	right_array = right_vb -> value_bead.data_pointer;
	right_data_elements = right_vb -> value_bead.total_data_elements;
	right_rhorho = right_vb -> value_bead.rhorho;

	fuzz = ws_info.fuzz;		/* extract for efficiency */
	integer_fuzz = ws_info.integer_fuzz;
end dyadic_extract;

/* procedure to implement monadic rho */

	call monadic_extract ();

	if operators_argument.operands (2).on_stack	/* pop right arg so it can be overlayed */
	then ws_info.value_stack_ptr = right_vb;

	rhorho = 1;				/* rho operator always returns a vector */
	data_elements = right_rhorho;		/* as many elements as dimensions in argument */
	call stack_allocate_numeric ();			/* get storage for result */     
	do rho_subscript = right_rhorho - 1 to 0 by -1;	/* backwards because operands may overlay each other */
	     result_array -> numeric_datum (rho_subscript)	/* change each rho vector element in operand to a data element */
		= float (right_vb -> value_bead.rho (rho_subscript + 1), 63);
	end;
	result_vb -> value_bead.rho (1)		/* set vector bound */
	     = right_rhorho;
	string (result_vb -> value_bead.header.type) = integral_value_type;	/* always numeric */
	return;

/* this module implements the monadic iota operator in apl */

apl_monadic_iota_:
	entry (operators_argument);

	call monadic_extract ();
	string (free_type) = string (right_vb -> value_bead.header.type);	/* cpy type field for efficiency */

	if operators_argument.operands (2).on_stack /* pop right arg so it can be overlayed */
	then ws_info.value_stack_ptr = right_vb;

	if right_data_elements ^= 1 then goto length_error_right;	/* must be effective scalar */
	rhorho = right_data_elements;			/* as with rho, iota produces a vector always */
	if free_type.zero_or_one_value then do;	/* either 0 or 1, optimize */     
	     if right_array -> numeric_datum (0) = 0 then do;	/* iota 0 */
		data_elements,
		data_words_needed = 0;	/* nothing for null vector */
	     end;     
	     else do;			/* must be iota 1 */
		data_elements = 1;
		data_words_needed = size (numeric_datum_or1);
	     end;     
	     call stack_allocate_known ();     
	     string (result_vb -> value_bead.header.type) = zero_or_one_value_type;
	     result_vb -> value_bead.rho (1) = data_elements;
	     if data_elements = 0 then return;	/* none to fill in */
	     result_array -> numeric_datum (0) = 	/* put in index origin */
		ws_info.values.float_index_origin;
	     return;
	end;     
	if free_type.data_type.character_value then
	     goto domain_error_right;     
	result_accumulator = right_array -> numeric_datum (0);	/* put in temp for efficiency */
	if result_accumulator < 0 then goto domain_error_right;		/* cannot be negative */
	single_element_fl_1 = floor (result_accumulator + 0.5);	/* generate fixed number */
	if ^ free_type.data_type.integral_value then	/* check if integer */
	     if abs(single_element_fl_1 - result_accumulator) > integer_fuzz then	/* not integer */
		goto domain_error_right;
	if abs(single_element_fl_1) >= 1e21b then go to domain_error_right;
	data_elements = fixed (single_element_fl_1, 21, 0);	/* fix it to index easily */
	call stack_allocate_numeric ();		/* get storage for result */
	result_vb -> value_bead.rho (1) = data_elements;
	string (result_vb -> value_bead.header.type) = integral_value_type;	/* iota always returns integers */     
	call apl_iota_appendage_ (ws_info.values.float_index_origin, 1, data_elements, result_array);
	return;
/* This module implements the dyadic rho operator in apl */

apl_dyadic_rho_:
	entry (operators_argument);

/* extract data from args */
	call dyadic_extract ();

	if left_rhorho > 1 then
	     goto rank_error_left;

	data_elements,		/* set this so prod builtin below will work (dimension of numeric_datum_or1) */
	rhorho =			/* number of elements in left operand will be number of elements in result */
	     left_data_elements;

	saved_left_arg_ptr = null();

	if rhorho = 0 then
	     data_elements = 1;		/* null left vector means return first element of right */
	else do;
	     if ^ left_vb -> value_bead.header.type.data_type.numeric_value then
		goto domain_error_left;

	     saved_left_arg_ptr = apl_push_stack_ ((left_data_elements));

	     do count = lbound (left_array -> numeric_datum_or1, 1) to hbound (left_array -> numeric_datum_or1, 1);

	     /* Round and fix each element of the left argument. */

		if left_array -> numeric_datum_or1(count) + integer_fuzz < 0
		     then goto domain_error_left;	/* no negative args allowed */

		float_temp = floor (left_array -> numeric_datum_or1(count) + 0.5);
		if abs (float_temp - (left_array -> numeric_datum_or1(count))) > integer_fuzz
		     then goto domain_error_left;
		if abs (float_temp) >= 1e21b
		     then goto domain_error_left;
	     
		saved_left_arg(count) = fixed (float_temp, 21);
	     end;

	     data_elements = prod (saved_left_arg);

	end;

	/* get storage for bead and result at end of stack */

	if right_vb -> value_bead.header.type.data_type.character_value	/* char operand */
	     then call stack_allocate_char ();
	     else call stack_allocate_numeric ();

/* now copy rho vector from data in left operand */

	do rho_subscript = 1 to rhorho;

	     result_vb -> value_bead.rho (rho_subscript) = saved_left_arg(rho_subscript);
	end;

	string (result_vb -> value_bead.header.type) =	/* copy type from right hand arg */
	     string (right_vb -> value_bead.header.type);

	if data_elements = 0 then
	     goto copy_up_stack;			/* return null vector */

	if right_data_elements = 0 then
	     goto domain_error_right;		/* attempt to create a vector out of nothing (null right operand) */

	/* program to actually do rho */

	call apl_rho_appendage_ (right_vb -> value_bead_overlay, result_vb -> value_bead_overlay, automatic_storage);

	goto copy_up_stack;		/* goto routine to copy stuff up stack */

/* procedure to copy garbage up stack. assumes variable words_needed_in_bead contains number of words
   in bead, data_words_needed contains words in data */

copy_up_stack:		/* not really a subroutine, just gone to */

	if ^(operators_argument.operands (2).on_stack)	/* right is not on stack */
	     then if ^(operators_argument.operands (1).on_stack)	/* left is not on stack */
		then if saved_left_arg_ptr = null()	/* no temp storage */
		     then do;			/* nothing is above result on stack */
			operators_argument.result = result_vb;	/* leave answer where it is */
			return;
		     end;
		     else result_array = saved_left_arg_ptr; /* use result_array as temp ptr */
		else result_array = left_vb;	/* left is on stack and right is not -- overlay on left operand */
	     else result_array = right_vb;	/* right and left on stack */

	/* If result will not fit in current value stack, leave it where it
	   is, as it will just end up back where it started. */

	if fixed (rel (result_array), 18, 0) + words_needed > maximum_value_stack_size
	     then do;
		operators_argument.result = result_vb;	/* result will be where it is */
		return;
	     end;

	     /* otherwise unprotect all of the stack values */

	     else ws_info.value_stack_ptr = result_array;

/* the following kludges are used to copy the result operand lowest in the stack. Kludgy code using overlays
   and unspecs will be used until such time as the PL/I compiler can generate structure assignments
   without moving one bit at a time. */

/* now find the next doubleword boundary on which to put the result data. Note that if decimal data is
   someday used, alignment will not be necessary; in that case both the bead and data can be copied in one move */

	result_array = result_vb -> value_bead.data_pointer;

	right_vb = apl_push_stack_ (words_needed);
	number_to_copy = words_needed_in_bead;	/* the words in the bead for the result, from stack_allocate */
	right_vb -> word_copy_overlay =	/* copy words from bead to end bead */
	     result_vb -> word_copy_overlay;

	right_array = addrel (right_vb, words_needed_in_bead);	/* try next word after bead */
	if right_vb -> value_bead.numeric_value
	     then if substr (rel (right_array), 18, 1)		/* if a 1 in low order bit, odd aligned */
		then right_array = addrel (right_array, 1);
	right_vb -> value_bead.data_pointer = right_array;	/* pointer to data */

	number_to_copy = data_words_needed;			/* number of data words to move */
	if number_to_copy > 0 then				/* zero length arrays are illegal PL/I */
	     right_array -> word_copy_overlay =		/* move in data */
		result_array -> word_copy_overlay;
	operators_argument.result = right_vb;
	return;

/* places to go to when an error is found */

rank_error_left:
	operators_argument.error_code = apl_error_table_$rank;
	operators_argument.where_error = operators_argument.where_error + 1;
	return;

domain_error_left:
	operators_argument.where_error = operators_argument.where_error + 2;

domain_error_right:
	operators_argument.where_error = operators_argument.where_error - 1;
	operators_argument.error_code = apl_error_table_$domain;
	return;

length_error_right:
	operators_argument.error_code = apl_error_table_$length;
	operators_argument.where_error = operators_argument.where_error - 1;
	return;

%include apl_push_stack_fcn;
end apl_monadic_rho_;
