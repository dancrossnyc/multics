/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_c_list.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 06/13/79 by MHD, [4.0-3] , check for leveling diagnostic first */
/* Modified on 04/28/79 by FCH, [4.0-2], if leveling then suppress sev 1 ,2 */
/* Modified on 04/25/79 by FCH, [4.0-1],  debug phase added */
/* Modified since Version 4.0 */

/* format: style3 */
cobol_c_list:
     proc (message_ptr);

dcl	(i, sv)		fixed bin;
dcl	diag_text_ptr	ptr;
dcl	diag_text		char (100000) based (diag_text_ptr);

dcl	1 last_message	static,
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,
	  2 run		fixed bin init (0),
	  2 number	fixed bin,
	  2 info		bit (9),
	  2 module	bit (27),
	  2 image_size	fixed bin,
	  2 image		char (256);

dcl	phase_con		(10) char (13) static
			init ("lexical", "ID/ED syntax", "DD syntax", "RW syntax", "PD syntax", "replacement",
			"report writer", "corresponding",
						/*[4.0-1]*/
			"leveling",		/*[4.0-1]*/
			"debug");

dcl	signal_		entry (char (*), ptr, ptr);
dcl	cobol_swf_put	entry (ptr, bit (32), ptr, fixed bin);
dcl	st		bit (32);


/*************************************/
	if message_ptr ^= null ()
	then if message.type = 5
	     then do;

/******************************************************************************/
/*    Modified on 6/13/79 by MHD.  This modification is to aid in the readibility */
/*  of this program.  The first check is checking if the diagonistic is a      */
/*  leveling diagnostic error.  If not then it checks the severity of the error */
/******************************************************************************/

/*[4.0-3]*/
		     if message.run = 9		/*[4.0-3]*/
		     then do;			/*[4.0-3]*/
			     call cobol_swf_put (cobol_ext_$cobol_dfp, st, message_ptr, message.size);
						/*[4.0-3]*/
			     if substr (fixed_common.levsv, 3, 1)
						/*[4.0-3]*/
						/*[4.0-3]*/
			     then fixed_common.fatal_no = fixed_common.fatal_no + 1;
						/*[4.0-3]*/
						/*[4.0-3]*/
			     else /* do nothing */
				;

/*[4.0-3]*/
			     return;
			end /* then do */;

		     i = diag_file.run_table.base (message.run) + message.number;

/*[4.0-2]*/
		     sv = diag_file.diag_table.d_type (i);
						/*[4.0-2]*/
		     if fixed_common.comp_level < "5"	/*[4.0-2]*/
		     then if sv = 1 | sv = 2
			then return;

		     if sv ^= 1
		     then do;

			     call cobol_swf_put (cobol_ext_$cobol_dfp, st, message_ptr, message.size);

			     if sv = 3
			     then do;
				     fixed_common.fatal_no = fixed_common.fatal_no + 1;
				end;
			     else if sv = 4
			     then do;

				     error_info.name = phase_con (message.run);
				     error_info.message_len = diag_file.diag_table.d_len (i);
				     diag_text_ptr = addr (diag_file.diag_table (diag_file.d_t_size + 1));
				     error_info.message = substr (diag_text, d_start (i), d_len (i));
				     message.run = 1;
				     message.number = 32;

/* Syntax checking discontinued good */

				     call cobol_swf_put (cobol_ext_$cobol_dfp, st, message_ptr, message.size);
				     call signal_ ("command_abort_", null (), addr (error_info));

				end;

			end;

		     else do;

			     if (message.run = 1 & message.number = 11) | (message.run = 2 & message.number = 104)
				| (message.run = 3 & message.number = 152)
				| (message.run = 5 & message.number = 164)
				| (message.run = 8 & message.number = 7)
			     then last_message = message;

			     else if (message.run = 1 & message.number = 12)
				| (message.run = 2 & message.number = 89)
				| (message.run = 3 & message.number = 154)
				| (message.run = 5 & message.number = 165)
				| (message.run = 8 & message.number = 8)
			     then if (message.line ^= last_message.line | message.column ^= last_message.column)
				     & last_message.run ^= 0
				then do;

					call cobol_swf_put (cobol_ext_$cobol_dfp, st, addr (last_message),
					     last_message.size);
					call cobol_swf_put (cobol_ext_$cobol_dfp, st, message_ptr, message.size)
					     ;

					last_message.run = 0;
				     end;

				else ;

			     else call cobol_swf_put (cobol_ext_$cobol_dfp, st, message_ptr, message.size);

			end;

		end;


/*************************************/
/* INCLUDE FILES */
%include cobol_error_info;
%include cobol_diag_file;
%include cobol_type5;
%include cobol_;
%include cobol_ext_;
%include cobol_fixed_common;

     end cobol_c_list;
