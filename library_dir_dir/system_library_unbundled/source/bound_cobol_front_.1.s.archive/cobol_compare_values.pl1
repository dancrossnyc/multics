/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_compare_values.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 08/02/76 by ORN to allow for user-defined alphabets */
/* Modified on 2/3/76 by John O'Neil to make ascii the default collating sequence and eliminate call to
	cobol_est_cs_table (routine no longer needed). */

/* format: style3 */
cobol_compare_values:
     proc (v1ptr, v2ptr, dnlength, char_tbl_ptr) returns (fixed bin (15));

/* This procedure compares two initial value extensions on a level 88 item
   to determine that the second is greater than the first */




dcl	cobol_read_rand_$fixed_bin
			entry (fixed bin, fixed bin, ptr);

/*************************************/
start:
	status = 0;
	first = "1"b;
	first_is_zero = "0"b;
	first_is_num = "0"b;
	coll_seq_on = "0"b;
	if fixed_common.prog_coll_seq ^= 0
	then do;					/* if not native, i.e. ASCII */
						/*-08/02/76-*/
		call cobol_read_rand_$fixed_bin (2, fixed_common.prog_coll_seq, alpha_name_ptr);
						/*-08/02/76-*/
		cst_ptr = addr (alphabet_name.table);	/*-08/02/76-*/
		coll_seq_on = "1"b;
	     end;
	if substr (v1ptr -> any_init.type, 1, 1)
	then do;
		first_is_num = "1"b;
		goto setup_num;
	     end;
	if substr (v1ptr -> any_init.type, 3, 1) & substr (v1ptr -> any_init.info, 2, 7) = "0000001"b
	then first_is_zero = "1"b;

get_second:
	first = "0"b;
	if substr (v2ptr -> any_init.type, 1, 1)
	then do;
		if first_is_num | first_is_zero
		then goto comp_num;
		else goto retrn;
	     end;
	if substr (v2ptr -> any_init.type, 3, 1) & substr (v2ptr -> any_init.info, 2, 7) = "0000001"b
	then do;
		if substr (v1ptr -> any_init.type, 1, 1)
		     | (substr (v1ptr -> any_init.type, 3, 1) & substr (v1ptr -> any_init.info, 2, 7) = "0000001"b)
		then goto comp_num;
	     end;

	if substr (v2ptr -> any_init.type, 2, 1)
	then do;
		if ^first_is_num
		then goto comp_non_num;
		else goto retrn;
	     end;

comp_non_num:
	first_time_in_compare = "1"b;
	rcode = "0"b;

get_call:
	call get_char;

/********************/
get_char:
     proc;

/*This procedure gets the next characters to be compared in a
comparison between a pair of condition values. Operands
may be alphanumeric literals or figurative constants*/

dcl	max_sofar		fixed bin (31);		/*maximum number of characters that have to be
			   compared*/
dcl	sofar		fixed bin (31);		/*number of characters that have been compared*/
dcl	item_index	fixed bin (15);		/*in the following dcl, implicit ptr qualification
			  is required for references to the string subfield*/
dcl	1 a_init		based (v3ptr),
	  2 type		bit (8),
	  2 info		bit (8),
	  2 length	fixed bin (15),
	  2 string	char (a_init.length);

dcl	l		fixed bin (7);

	if first_time_in_compare
	then do;
		if substr (v1ptr -> a_init.type, 4, 1)
		then goto all_1;
		if substr (v1ptr -> a_init.type, 3, 1)
		then goto fig_1;
		goto alpha_1;

alpha_1:
		if substr (v2ptr -> a_init.type, 4, 1)
		then goto alpha_all;
		if substr (v2ptr -> a_init.type, 3, 1)
		then goto alpha_fig;
		goto alpha_alpha;

fig_1:
		if substr (v2ptr -> a_init.type, 4, 1)
		then goto fig_all;
		if substr (v2ptr -> a_init.type, 3, 1)
		then goto fig_fig;
		goto fig_alpha;

all_1:
		if substr (v2ptr -> a_init.type, 4, 1)
		then goto all_all;
		if substr (v2ptr -> a_init.type, 3, 1)
		then goto all_fig;
		goto all_alpha;

all_alpha:
		;
alpha_all:
		;
alpha_alpha:
		if v1ptr -> a_init.length > v2ptr -> a_init.length
		then max_sofar = v1ptr -> a_init.length;
		else max_sofar = v2ptr -> a_init.length;
		goto out;

alpha_fig:
		;
all_fig:
		max_sofar = v1ptr -> a_init.length;
		goto out;


fig_alpha:
		;
fig_all:
		max_sofar = v2ptr -> a_init.length;
		goto out;

fig_fig:
		max_sofar = 1;
		goto out;

all_all:
		max_sofar = v1ptr -> a_init.length * v2ptr -> a_init.length;

out:
		sofar = 0;
		item.field_index (1) = 0;
		item.field_index (2) = 0;
		if ^substr (v1ptr -> a_init.type, 3, 1)
		then item.length (1) = v1ptr -> a_init.length;
		if ^substr (v2ptr -> a_init.type, 3, 1)
		then item.length (2) = v2ptr -> a_init.length;
	     end;
	if sofar > max_sofar
	then do;
		rcode = "1"b;
		goto retrn;
	     end;
	sofar = sofar + 1;

	v3ptr = v1ptr;
	item_ptr1 = addr (item (1));

start:
	if substr (v3ptr -> a_init.type, 4, 1)
	then goto all_lit;
	if substr (v3ptr -> a_init.type, 2, 1)
	then goto alpha;

fig_con:
	if first_time_in_compare
	then do;
		l = fixed (substr (v3ptr -> any_init.info, 2, 7), 15);
		itemb.char = char_tbl (l);
	     end;
	goto got_char;

all_lit:
	if itemb.field_index = itemb.length
	then itemb.field_index = 0;
	itemb.field_index = itemb.field_index + 1;
	itemb.char = substr (v3ptr -> a_init.string, itemb.field_index, 1);
	goto got_char;

alpha:
	if itemb.field_index = itemb.length
	then do;
		itemb.char = " ";
		goto got_char;
	     end;
	itemb.field_index = itemb.field_index + 1;
	itemb.char = substr (v3ptr -> a_init.string, itemb.field_index, 1);
	goto got_char;

got_char:
	if v3ptr = v1ptr
	then do;
		v3ptr = v2ptr;
		item_ptr1 = addr (item (2));
		goto start;
	     end;

retrn:
     end get_char;
/********************/

	first_time_in_compare = "0"b;
	if rcode
	then goto issue_equal_diag;
	if item.char (1) = item.char (2)
	then goto get_call;
	if coll_seq_on
	then do;
		item.char (1) = coll_seq_tbl (fixed (unspec (item.char (1)), 17));
		item.char (2) = coll_seq_tbl (fixed (unspec (item.char (2)), 17));
	     end;
	if item.char (1) > item.char (2)
	then goto issue_lt_diag;
	goto retrn;

setup_num:					/*set up num struc for first operand*/
	call make_num (v1ptr, 1);
	goto get_second;

comp_num:
	call make_num (v2ptr, 2);
	if first_is_zero
	then call make_num (v1ptr, 1);

/********************/
make_num:
     proc (v4ptr, num_index);

/*This procedure sets up the work structure num from an
initial value extension for numeric literal or fig con zero */

dcl	v4ptr		ptr;			/*in the following dcl, implicit ptr qualification
			  is required for references to the string subfield*/
dcl	1 n_init		based (v4ptr),
	  2 type		bit (8),
	  2 info		bit (8),
	  2 sign		char (1),
	  2 expsign	char (1),
	  2 explaces	fixed bin (7),
	  2 places_left	fixed bin (7),
	  2 places_right	fixed bin (7),
	  2 length	fixed bin (7),
	  2 string	char (n_init.length);

dcl	lit_count		fixed bin (15);
dcl	fld_count		fixed bin (15);
dcl	num_index		fixed bin (15);
dcl	pnt		bit (1);
dcl	sigdig		bit (1);



	num_ptr1 = addr (num (num_index));

	num_ptr1 -> numb.sign = "+";
	num_ptr1 -> numb.exp = 0;
	num_ptr1 -> numb.compfld = "000000000000000000000000000000";

	if substr (v4ptr -> n_init.type, 1, 1)
	then goto numeric_ext;			/*fig con zero*/
	if num_index = 1
	then num_ptr2 = addr (num (2));
	else num_ptr2 = addr (num (1));
	num_ptr1 -> numb.sign = num_ptr2 -> numb.sign;
	num_ptr1 -> numb.exp = num_ptr2 -> numb.exp;
	goto retrn;

numeric_ext:
	lit_count = 1;
	fld_count = 1;
	pnt = "0"b;
	sigdig = "0"b;
	num_ptr1 -> numb.sign = v4ptr -> n_init.sign;
	if num_ptr1 -> numb.sign = " "
	then num_ptr1 -> numb.sign = "+";

select_char:
	if substr (v4ptr -> n_init.string, lit_count, 1) >= "1" & substr (v4ptr -> n_init.string, lit_count, 1) <= "9"
	then do;
		sigdig = "1"b;
		if ^pnt
		then num_ptr1 -> numb.exp = num_ptr1 -> numb.exp + 1;
		substr (num_ptr1 -> numb.compfld, fld_count, 1) = substr (v4ptr -> n_init.string, lit_count, 1);
		fld_count = fld_count + 1;
		goto increment_count;
	     end;
	if substr (v4ptr -> n_init.string, lit_count, 1) = "0"
	then do;
		if sigdig
		then do;
			substr (num_ptr1 -> numb.compfld, fld_count, 1) = "0";
			if ^pnt
			then num_ptr1 -> numb.exp = num_ptr1 -> numb.exp + 1;
			fld_count = fld_count + 1;
		     end;
		else if pnt
		then num_ptr1 -> numb.exp = num_ptr1 -> numb.exp + 1;
		goto increment_count;
	     end;
	if substr (v4ptr -> n_init.string, lit_count, 1) = "."
	then do;
		pnt = "1"b;
		goto increment_count;
	     end;

/*falls through if not a "0123456789."*/
increment_count:
	lit_count = lit_count + 1;
	if lit_count > v4ptr -> n_init.length
	then goto retrn;
	goto select_char;

retrn:
	;
     end make_num;
/********************/

	if num.sign (1) ^= num.sign (2)
	then do;
		if num.sign (2) ^= "+"
		then goto issue_lt_diag;		/*signs are different and opnd 2 is positive*/
		goto retrn;
	     end;
	if num.sign (1) = "+"
	then do;
		num_index1 = 1;
		num_index2 = 2;
	     end;
	else do;
		num_index1 = 2;
		num_index2 = 1;
	     end;
	if num.exp (num_index2) < num.exp (num_index1)
	then goto issue_lt_diag;
	if num.exp (num_index2) > num.exp (num_index1)
	then goto retrn;				/*exponents are equal, signs are equal, num_index1  indexes whichever
should be the lesser of the pair according to the sign*/
	if num.compfld (num_index2) > num.compfld (num_index1)
	then goto retrn;
issue_equal_diag:
	;
issue_lt_diag:
	status = 181;
	goto retrn;
retrn:
	return (status);



dcl	v1ptr		ptr;			/*ads->first extension*/
dcl	v2ptr		ptr;			/*ads->second extension*/
dcl	v3ptr		ptr;			/*ads->init val ext for get_char*/
dcl	first		bit (1);
dcl	first_is_zero	bit (1);
dcl	first_is_num	bit (1);
dcl	dnlength		fixed bin (31);		/*input: length of conditional variable (bytes)*/
dcl	char_tbl_ptr	ptr;
dcl	char_tbl		(7) char (1) based (char_tbl_ptr);
dcl	1 any_init	based (v3ptr),
	  2 type		bit (8),
	  2 info		bit (8);
dcl	1 a_init		based (v3ptr),
	  2 type		bit (8),
	  2 info		bit (8),
	  2 length	fixed bin (15),
	  2 string	char (a_init.length);
dcl	num_index1	fixed bin (15);
dcl	num_index2	fixed bin (15);
dcl	first_time_in_compare
			bit (1);
dcl	status		fixed bin (15);		/*return value: zero or diag number*/
dcl	rcode		bit (1);
dcl	1 num		(2),
	  2 sign		char (1),
	  2 exp		fixed bin (15),
	  2 compfld	char (30);

dcl	num_ptr1		ptr,
	num_ptr2		ptr;
dcl	1 numb		based (num_ptr1),
	  2 sign		char (1),
	  2 exp		fixed bin (15),
	  2 compfld	char (30);

dcl	1 item		(2),
	  2 length	fixed bin (31),
	  2 field_index	fixed bin (31),
	  2 char		char (1);
dcl	item_ptr1		ptr,
	item_ptr2		ptr;
dcl	1 itemb		based (item_ptr1),		/*not always*/
	  2 length	fixed bin (31),
	  2 field_index	fixed bin (31),
	  2 char		char (1);
dcl	cst_ptr		ptr;
dcl	coll_seq_tbl	(0:511) char (1) based (cst_ptr);
dcl	coll_seq_on	bit (1);

dcl	addr		builtin;
dcl	fixed		builtin;
dcl	null		builtin;
dcl	substr		builtin;
dcl	unspec		builtin;


%include cobol_ext_;
%include cobol_fixed_common;
%include cobol_type40;

     end cobol_compare_values;
