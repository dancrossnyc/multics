/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_allo_tm.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* format: style3 */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* 4/19/77, FCH, P7 exorcised */

cobol_allo_tm:
     proc (r_ptr, in_sz);

dcl	(in_sz, pi)	fixed bin (15);
dcl	(sz, szt)		fixed bin (15) static;
dcl	t_ptr		ptr static;
dcl	aptr		(10) ptr static;
dcl	asz		fixed bin (18) static;
dcl	(p_sw, ci)	fixed bin (15) static;
dcl	1 slot		based (cfa_ptr),
	  2 nfa_ptr	ptr,
	  2 na_ptr	ptr,
	  2 sz		fixed bin (17),
	  2 st		char (1);
dcl	(lfa_ptr, r_ptr)	ptr;
dcl	cfa_ptr		ptr static;

dcl	ioa_		entry options (variable);

declare	(divide, mod, null, addrel)
			builtin;


	if cobol_allo_init_sw = "1"b
	then do;
		cobol_allo_init_sw = "0"b;
		aptr (1) = cobol_$allo1_ptr;
		pi = 1;
		asz = cobol_$allo1_max;
		ci = 1;
		cfa_ptr = aptr (pi);
		slot.nfa_ptr = addrel (cfa_ptr, 2);
		cfa_ptr = slot.nfa_ptr;
		slot.na_ptr = null ();
		slot.nfa_ptr = null ();
		slot.sz = asz - 8;
		slot.st = "0";
	     end;
	sz = in_sz + 24;
	szt = mod (sz, 8);
	if szt ^= 0
	then sz = sz + 8 - szt;
	if sz <= 0
	then do;
		call ioa_ ("cobol-allo_tm: Item size is zero or negative.");
		go to cobol_lex_exit;
	     end;
	p_sw = 0;
	pi = 1;
recheck:
	cfa_ptr = aptr (ci);
	lfa_ptr = cfa_ptr;
next_slot:
	cfa_ptr = slot.nfa_ptr;
	if cfa_ptr = null ()
	then goto purge;
	if slot.sz >= sz
	then do;
		slot.st = "1";
		if slot.sz <= sz + 24
		then do;
			lfa_ptr -> slot.nfa_ptr = slot.nfa_ptr;
			r_ptr = addrel (cfa_ptr, 6);
			return;
		     end;
		t_ptr = addrel (cfa_ptr, divide (sz, 4, 17, 0));
		lfa_ptr -> slot.nfa_ptr = t_ptr;
		t_ptr -> slot.na_ptr = slot.na_ptr;
		t_ptr -> slot.nfa_ptr = slot.nfa_ptr;
		t_ptr -> slot.sz = slot.sz - sz;
		t_ptr -> slot.st = "0";
		slot.na_ptr = t_ptr;
		slot.sz = sz;
		r_ptr = addrel (cfa_ptr, 6);
		return;
	     end;
	lfa_ptr = cfa_ptr;
	goto next_slot;

purge:
	if p_sw = 1
	then do;
		p_sw = 0;
		pi = pi + 1;
		if pi > 10
		then do;
			call ioa_ ("cobol-allo_tm: Input size is too large for remaining allocatable areas.");
			go to cobol_lex_exit;
		     end;
		ci = pi;
	     end;

/* combine all freed up slots into allocatable slots in the current area */

	else p_sw = 1;
	lfa_ptr = aptr (ci);
	cfa_ptr = addrel (lfa_ptr, 2);
next_slot_p:
	if cfa_ptr = null ()
	then goto recheck;
	if slot.st = "1"
	then /* if allocated slot... */
	     do;
		cfa_ptr = slot.na_ptr;
		goto next_slot_p;
	     end;
	if slot.st = "2"
	then /* if freeable slot... */
	     do;
		slot.st = "0";
		slot.nfa_ptr = lfa_ptr -> slot.nfa_ptr;
		lfa_ptr -> slot.nfa_ptr = cfa_ptr;
next_slot_p3:
		lfa_ptr = cfa_ptr;
next_slot_p2:
		t_ptr = slot.na_ptr;
		if t_ptr = null ()
		then goto recheck;
		if t_ptr -> slot.st = "1"
		then do;
			cfa_ptr = t_ptr -> slot.na_ptr;
			goto next_slot_p;
		     end;
		slot.na_ptr = t_ptr -> slot.na_ptr;
		slot.sz = slot.sz + t_ptr -> slot.sz;
		if t_ptr -> slot.st = "0"
		then slot.nfa_ptr = t_ptr -> slot.nfa_ptr;
		goto next_slot_p2;
	     end;
	goto next_slot_p3;				/* unused slot */



free_tm:
     entry (r_ptr);

	cfa_ptr = addrel (r_ptr, -6);
	slot.st = "2";
	r_ptr = null ();
	return;

free_all:
     entry;

	if cobol_allo_init_sw = "1"b
	then return;
	cfa_ptr = aptr (ci);
	slot.nfa_ptr = addrel (cfa_ptr, 2);
	cfa_ptr = slot.nfa_ptr;
	slot.na_ptr = null ();
	slot.nfa_ptr = null ();
	slot.sz = asz - 4;
	slot.st = "0";
	return;

%include cobol_;
%include cobol_ext_lex;

     end cobol_allo_tm;
