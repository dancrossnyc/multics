/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_IVAL.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 08/24/76 by GM to fix problem with call to b_to_d in cobol_ddalloc. */
/* format: style3 */
cobol_IVAL:
     proc (dn_ptr);

declare	(mod, unspec, substr, addr, fixed)
			builtin;
dcl	name_ptr		ptr;
dcl	temp_val		fixed bin (15);

/*	This procedure  initializes a value  into a field
  described by the type 9 token.
*/

dcl	spaces		char (256);


	spaces = " ";
	tempptr = addr (temp);
	hg_ptr1 = null ();
	hg_field2 = 0;

/* process data name with valuse only */
	do while (data_name.type = 9 & initial_ptr ^= 0);

	     if data_name.numeric
	     then do;				/* code NUMERIC data extention. */
		     valueptr = addr (dn (initial_ptr));/* points to the numeric data extension */
		     if ascii_packed_dec_h
		     then return;			/* NOT CODED YET */
		     else if ascii_packed_dec
		     then return;			/* NOT CODED YET */
		     else if bin_16 | bin_18
		     then do;			/* comp-1 or comp-7 */
			     hg_field3 = 2;
			     hg_field4 = 3;
			     goto true_fixbin;
			end;
		     else if bin_32 | bin_36
		     then do;			/* comp-2 or comp-6 */
			     hg_field4 = 1;
			     hg_field3 = 4;
true_fixbin:
			     if numinit.figcon
			     then if numinit.sign = "-"
				then hg_field1 = hg_field2;
				else hg_field1 = 0;
			     else hg_field1 = cobol_ddalloc$b_to_d ((numinit.length), addr (numinit.literal));
			     hg_ptr1 = addr (hg_field1);
			     lnval = data_name.item_length;
			     value = substr (hg_field5, hg_field4, hg_field3);
			     goto CP;
			end;
		     if numinit.figcon = "1"b
		     then do;			/* 0 = only legal numeric figcon value */
			     numinit.length = 1;	/* make the input initial value extension */
			     numinit.literal = "0";	/* look like a valid figcon zero initial value */
			     numinit.ltdp = 1;
			     numinit.sign = " ";
			end;
		     work = numinit.literal;
		     substr (work, numinit.length + 1) = zeros;
		     if ebcdic_packed_dec
		     then do;			/*[comp3rtn:]*/
			     d_ptr = addr (substr (comp3init, 16, 1));
			     m = 18 + numinit.ltdp + data_name.places_right;
			     n = m - (data_name.places_left + data_name.places_right);
			     workptr = addr (substr (temp1, m, 1));
			     if numinit.sign = "-"
			     then substr (initchar, VC_5, 4) = "1101"b;
			     else substr (initchar, VC_1, 4) = "1011"b;
			     substr (initchar, VC_1, 4) = substr (lit_char, VC_5, 4);
			     i = 1;
loop_comp3init:
			     m = m - 1;
			     if m = n
			     then goto end_init;
			     workptr = addr (substr (temp1, m, 1));
			     d_ptr = addr (substr (temp1, m, 1));
			     initchar = "00000000"b;
			     substr (initchar, VC_5, 4) = substr (lit_char, VC_5, 4);
			     m = m - 1;
			     if m = n
			     then goto end_init;
			     workptr = addr (substr (temp1, m, 1));
			     substr (initchar, VC_1, 4) = substr (lit_char, VC_5, 4);
			     i = i + 1;
			     goto loop_comp3init;
end_init:
			     lnval = data_name.item_length;
			     value = substr (comp3init, 17 - data_name.item_length, data_name.item_length);
			     goto CP;
			end;
		     signptr =
			addr (substr (temp1, 18 + numinit.ltdp - data_name.places_left + data_name.item_length, 1));
		     lnval = data_name.item_length;
		     if item_signed
		     then value = numinit.sign || substr (temp1, 19 + numinit.ltdp - data_name.places_left, lnval);
		     else value = substr (temp1, 19 + numinit.ltdp - data_name.places_left, lnval);
CP:
		     numrep = 1;
		     temp_val = data_name.seg_num - 1;
		     res = substr (unspec (temp_val), 29, 8);
						/* enter seg no. as a sort key for finishrtn */
		     reladdinseg = substr (unspec (data_name.offset), 13, 24);
						/* enter offset of this value */

		     call st_val;
		     return;

		end;

aninitrtn:
	     valueptr = addr (dn (initial_ptr));	/* points to the non-numeric data extension. */
	     if alphainit.length > data_name.item_length
	     then alphainit.length = data_name.item_length;
	     if alphainit.figcon = "1"b
	     then do;				/*[figconrtn:]*/
		     alphainit.length = 1;		/* input contents for figcons is BAD. */
		     alphainit.string = figcon (fixed (figconindex, 7));
						/* set CORRECT value. */
		     goto allrtn;
		end;
	     else if alphainit.allit = "1"b
	     then do;
allrtn:
		     lnval = alphainit.length;	/* set length of value */
		     value = alphainit.string;	/* move data into initial value area */
		     numrep = divide (data_name.item_length, alphainit.length, 15, 0);
		     temp_val = data_name.seg_num - 1;
		     res = substr (unspec (temp_val), 29, 8);
						/* enter seg no. as a sort key for finishrtn */
		     reladdinseg = substr (unspec (data_name.offset), 13, 24);

		     call st_val;

		     lnval = mod (data_name.item_length, alphainit.length);
		     if lnval = 0
		     then return;			/* does it fit? */
		     numrep = 1;
		     temp_val = data_name.offset + data_name.item_length - lnval;
		     reladdinseg = substr (unspec (temp_val), 13, 24);

		     return;
		end;

	     lnval = alphainit.length;
	     value = alphainit.string;

	     temp_val = data_name.seg_num - 1;
	     res = substr (unspec (temp_val), 29, 8);
	     reladdinseg = substr (unspec (data_name.offset), 13, 24);
CP1:
	     if alphainit.length = data_name.item_length
	     then ;				/* fall through if space fill required */
	     else do;				/* make length = 1, and no of repetitions = no of spaces reqd */
		     lnval = data_name.item_length;
		     substr (value, 1, lnval) = spaces;
		     substr (value, 1, alphainit.length) = alphainit.string;
		     temp_val = data_name.seg_num - 1;
		     res = substr (unspec (temp_val), 29, 8);
		     temp_val = data_name.offset + alphainit.length;
		     reladdinseg = substr (unspec (temp_val), 13, 24);

		end;

	     call st_val;

	     return;
	end;					/* no type 9 */
	if data_name.level = 01 | data_name.level = 77
	then do;
		parea.lnval = data_name.item_length;
		call st_val;
	     end;

	return;					/* ======STORE VALUE============================== */

st_val:
     proc;

dcl	s		char (262144) aligned based (text_base_ptr),
	j		fixed bin,
	dummy		bit (36) based (addr (j)),
	p_ptr		ptr;


	substr (dummy, 19, 18) = rel (con_end_ptr);	/* mark the end of the text segment */
	j = j * 4;
	if data_name.level ^= 01 & data_name.level ^= 77
	then do;
		if data_name.offset > 0
		then do;
			substr (s, j - ((con_wd_off - 1) * 4) + 1 + data_name.offset, lnval) = value;
			target_ptr = addr (substr (s, j - ((con_wd_off - 1) * 4) + 1 + data_name.offset, lnval));
		     end;
		else do;
			substr (s, j - ((con_wd_off - 1) * 4) + 1, lnval) = value;
			target_ptr = addr (substr (s, j - ((con_wd_off - 1) * 4) + 1, lnval));
		     end;
		if data_name.ascii_packed_dec = "1"b
		     | (data_name.display = "1"b & data_name.item_signed = "1"b & data_name.sign_separate = "0"b)
		then call cobol_opch_is (dn_ptr, target_ptr);

		return;
	     end;
	temp_val = parea.lnval;
	if substr (unspec (temp_val), 35, 2) ^= "00"b
	then con_wd_off = con_wd_off + 1;
	con_wd_off = con_wd_off + (fixed (substr (unspec (temp_val), 1, 34), 36));
						/* set initial value in TEXT segment */
	if initial_ptr ^= 0
	then substr (s, j - ((con_wd_off - 1) * 4) + 1, lnval) = value;
	if data_name.ascii_packed_dec = "1"b
	     | (data_name.display = "1"b & data_name.item_signed = "1"b & data_name.sign_separate = "0"b)
	then do;
		target_ptr = addr (substr (s, j - ((con_wd_off - 1) * 4) + 1, lnval));
		call cobol_opch_is (dn_ptr, target_ptr);
	     end;
dcl	target_ptr	ptr;
dcl	cobol_opch_is	entry (ptr, ptr) ext;

	return;

     end st_val;

/* ======END STORE VALUE ===================== */

dcl	cobol_ddalloc$b_to_d
			entry (fixed bin (15), ptr) returns (fixed bin (31));

%include cobol_IVAL;
%include cobol_type9;
%include cobol_ext_nonnum;
%include cobol_ext_num;
%include cobol_;
     end cobol_IVAL;
