/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style3,linecom,ifthenstmt,indthenelse,^indnoniterdo,indend,initlm3,dclind5,idind32 */
l6_ftf:
     proc ();

/*

   D_E_S_C_R_I_P_T_I_O_N_

   This command sets up a file transfer server on the specified channel
   that talks Level 6 FTF protocol.  It continues listening to the channel until
   the user types "q" or "quit".


   J_O_U_R_N_A_L_I_Z_A_T_I_O_N_

   1) Written 6/79 by R.J.C. Kissel.
*/

dcl  cu_$af_arg_count	       entry (fixed bin, fixed bin (35));
dcl  nargs		       fixed bin;
dcl  code			       fixed bin (35);
dcl  com_err_		       entry options (variable);
dcl  com_name		       char (6) internal static options (constant) init ("l6_ftf");
dcl  error_table_$wrong_no_of_args   fixed bin (35) external;
dcl  cu_$arg_ptr		       entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  argp			       ptr;
dcl  argl			       fixed bin (21);
dcl  arg			       char (argl) based (argp);
dcl  channel_name		       char (32);
dcl  error_table_$bigarg	       fixed bin (35) external;
dcl  length		       builtin;
dcl  dial_manager_$privileged_attach entry (ptr, fixed bin (35));
dcl  1 dial_manager_arg	       aligned,
       2 version		       fixed bin,
       2 dial_qualifier	       char (22),
       2 dial_channel	       fixed bin (71),
       2 channel_name	       char (32);
dcl  ipc_$create_ev_chn	       entry (fixed bin (71), fixed bin (35));
dcl  dial_event_chn		       fixed bin (71);
dcl  convert_ipc_code_	       entry (fixed bin (35));
dcl  iox_$attach_name	       entry (char (*), ptr, char (*), ptr, fixed bin (35));
dcl  l6_switch_ptr		       ptr;
dcl  null			       builtin;
dcl  error_table_$not_detached       fixed bin (35) external;
dcl  iox_$open		       entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  error_table_$not_closed	       fixed bin (35) external;
dcl  iox_$user_input	       ptr external;
dcl  user_input_ptr		       ptr;
dcl  iox_$control		       entry (ptr, char (*), ptr, fixed bin (35));
dcl  1 read_status_info	       aligned,
       2 event_chn		       fixed bin (71),
       2 input_available	       bit (1);
dcl  get_temp_segment_	       entry (char (*), ptr, fixed bin (35));
dcl  release_temp_segment_	       entry (char (*), ptr, fixed bin (35));
dcl  iobp			       ptr;
dcl  io_buf		       char (sys_info$max_seg_size * 4) based aligned;
dcl  sys_info$max_seg_size	       fixed bin (19) external;
dcl  user_event_chn		       fixed bin (71);
dcl  l6_event_chn		       fixed bin (71);
dcl  l6_input_rdy		       bit (1);
dcl  1 wait_list		       aligned,
       2 nchan		       fixed bin,
       2 pad		       fixed bin,
       2 channel_id		       (3) fixed bin (71);
dcl  1 event_info		       aligned,
       2 channel_id		       fixed bin (71),
       2 message		       fixed bin (71),
       2 sender		       bit (36),
       2 origin,
         3 dev_signal	       bit (18) unaligned,
         3 ring		       bit (18) unaligned,
       2 channel_idx	       fixed bin;
dcl  ipc_$block		       entry (ptr, ptr, fixed bin (35));
dcl  ioa_			       entry options (variable);
dcl  iox_$get_line		       entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  cleanup		       condition;
dcl  l6_ftf_switch		       char (13) internal static options (constant) init ("l6_ftf_switch");
dcl  user_output_ptr	       ptr;
dcl  error_output_ptr	       ptr;
dcl  iox_$user_output	       ptr external;
dcl  iox_$error_output	       ptr external;
dcl  dialed		       bit (1);
dcl  l6_attached		       bit (1);
dcl  l6_open		       bit (1);
dcl  iobl			       fixed bin (21);
dcl  error_table_$not_act_fnc	       fixed bin (35) external;
dcl  arg_idx		       fixed bin;
dcl  long_flag		       bit (1);
dcl  error_flag		       bit (1);
dcl  iox_$modes		       entry (ptr, char (*), char (*), fixed bin (35));
dcl  user_input_rdy		       bit (1);
dcl  user_done		       bit (1);
dcl  error_table_$badopt	       fixed bin (35) external;
dcl  iox_$close		       entry (ptr, fixed bin (35));
dcl  iox_$detach_iocb	       entry (ptr, fixed bin (35));
dcl  dial_manager_$release_channel   entry (ptr, fixed bin (35));
dcl  ipc_$delete_ev_chn	       entry (fixed bin (71), fixed bin (35));
dcl  l6_ftf_		       entry (ptr, ptr, fixed bin (21), ptr, bit (1), ptr, bit (1), char (168), fixed bin (35));
dcl  addr			       builtin;
dcl  substr		       builtin;
dcl  error_table_$noarg	       fixed bin (35) external;
dcl  target_dir		       char (168);
dcl  get_wdir_		       entry () returns (char (168));

/*
   Initialize everything for cleanup.
*/

	user_input_ptr = iox_$user_input;
	user_output_ptr = iox_$user_output;
	error_output_ptr = iox_$error_output;

	dial_channel = 0;
	dialed = "0"b;

	l6_attached = "0"b;
	l6_open = "0"b;

	iobp = null ();
	iobl = 0;

	long_flag = "0"b;
	target_dir = get_wdir_ ();
	channel_name = "";

	on cleanup call Cleanup_Handler ();

/*
   Processs the command arguments.
*/

	call cu_$af_arg_count (nargs, code);
	if code ^= error_table_$not_act_fnc then goto ERROR_actfncall;

	if nargs > 4 | nargs < 1 then goto ERROR_wrongargs;

	do arg_idx = 1 to nargs by 1;

	     call cu_$arg_ptr (arg_idx, argp, argl, code);
	     if code ^= 0 then goto ERROR_arg;

	     if substr (arg, 1, 1) = "-"
		then do;				/* Process a control argument. */
		     if arg = "-long" | arg = "-lg" then long_flag = "1"b;

		     else if arg = "-target_dir" | arg = "-td"
			then do;
			     arg_idx = arg_idx + 1;
			     if arg_idx > nargs then goto ERROR_missarg;

			     call cu_$arg_ptr (arg_idx, argp, argl, code);
			     if code ^= 0 then goto ERROR_arg;

			     target_dir = arg;

			     if target_dir = ">" then target_dir = "";
						/* Special case the root. */
			     end;

		     else goto ERROR_controlarg;
		     end;

		else do;				/* Process the channel name. */
		     if argl > length (channel_name) then goto ERROR_longchn;

		     channel_name = arg;
		     end;
	end;

	if channel_name = "" then goto ERROR_wrongargs;	/* This _m_u_s_t be specified. */



/*
   Now create an event channel for dial_manager_ to use and make
   the call to get the specified channel attached.  At this point we will
   get the user input event channel and an IO buffer and then block waiting for either a
   dialup wakeup or some input from the user.
*/

	call ipc_$create_ev_chn (dial_event_chn, code);
	if code ^= 0 then goto ERROR_createchn;

	dial_manager_arg.version = 1;
	dial_manager_arg.dial_qualifier = "";
	dial_manager_arg.dial_channel = dial_event_chn;
	dial_manager_arg.channel_name = channel_name;

	call dial_manager_$privileged_attach (addr (dial_manager_arg), code);
	if code ^= 0
	     then dialed = "1"b;			/* Assume it is already dialed. */
	     else dialed = "0"b;

	call iox_$control (user_input_ptr, "read_status", addr (read_status_info), code);
	if code ^= 0 then goto ERROR_userstatus;

	user_event_chn = read_status_info.event_chn;
	user_input_rdy = read_status_info.input_available;

	wait_list.nchan = 2;
	wait_list.pad = 0;
	wait_list.channel_id (1) = user_event_chn;
	wait_list.channel_id (2) = dial_event_chn;

	event_info.channel_id = 0;			/* Initialize this for the first time through the loop. */

	call get_temp_segment_ (com_name, iobp, code);
	if code ^= 0 then goto ERROR_getseg;

	do while (^dialed);
	     if user_input_rdy
		then do;
		     call Process_User_Input (user_done);
		     if user_done then goto DONE;

		     call iox_$control (user_input_ptr, "read_status", addr (read_status_info), code);
		     if code ^= 0 then goto ERROR_userstatus;

		     user_input_rdy = read_status_info.input_available;
		     end;

	     else if event_info.channel_id = dial_event_chn then dialed = "1"b;

	     else do;
		call ipc_$block (addr (wait_list), addr (event_info), code);
		if code ^= 0 then goto ERROR_block;

		if user_event_chn = event_info.channel_id
		     then do;
			call iox_$control (user_input_ptr, "read_status", addr (read_status_info), code);
			if code ^= 0 then goto ERROR_userstatus;

			user_input_rdy = read_status_info.input_available;
			end;
		end;
	end;

/*
   Attach, open, and set the modes for the Level 6 channel, and
   get a temp segment to use as an IO buffer.
*/

	call iox_$attach_name (l6_ftf_switch, l6_switch_ptr, "tty_ " || channel_name, null (), code);
	if code ^= 0 & code ^= error_table_$not_detached then goto ERROR_l6attach;

	l6_attached = "1"b;				/* Set this for use by cleanup. */

	call iox_$open (l6_switch_ptr, 3, "0"b, code);	/* For stream_input_output. */
	if code ^= 0 & code ^= error_table_$not_closed then goto ERROR_l6open;

	l6_open = "1"b;				/* Set this for use by cleanup. */

	call iox_$modes (l6_switch_ptr, "rawi,rawo", "", code);
	if code ^= 0 then goto ERROR_modes;

/*
   Read status on both the L6 and user switches in order to
   initialize the variables to be used in the transfer loop.
*/

	call iox_$control (user_input_ptr, "read_status", addr (read_status_info), code);
	if code ^= 0 then goto ERROR_userstatus;

	user_input_rdy = read_status_info.input_available;

	call iox_$control (l6_switch_ptr, "read_status", addr (read_status_info), code);
	if code ^= 0 then goto ERROR_l6status;

	l6_event_chn = read_status_info.event_chn;
	l6_input_rdy = read_status_info.input_available;

	wait_list.nchan = 3;
	wait_list.pad = 0;
	wait_list.channel_id (1) = user_event_chn;
	wait_list.channel_id (2) = l6_event_chn;
	wait_list.channel_id (3) = dial_event_chn;

	error_flag = "1"b;				/* Allow l6_ftf_ to print on error_output. */

/*
   This loop runs until the user types quit or q on his terminal.
*/

	do while ("1"b);				/* Exit when user says he is done. */

/*
   This loop checks the input ready flags for both the L6 switch
   and the user switch and processes any input it finds.  It continues
   until no input is available on either switch at which point we block
   on both switches, waiting for input.
*/

	     do while (l6_input_rdy | user_input_rdy);

		if l6_input_rdy
		     then do;
			call l6_ftf_ (l6_switch_ptr, iobp, length (iobp -> io_buf), user_output_ptr, long_flag,
			     error_output_ptr, error_flag, target_dir, code);
						/* Any messages have already been printed. */
			if code ^= 0 then call iox_$control (l6_switch_ptr, "abort", null (), code);
			if code ^= 0
			     then call com_err_ (code, com_name, "Failed to abort L6 channel, continuing processing.");

			call iox_$control (l6_switch_ptr, "read_status", addr (read_status_info), code);
			if code ^= 0 then goto ERROR_l6status;

			l6_input_rdy = read_status_info.input_available;
			end;

		if user_input_rdy
		     then do;
			call Process_User_Input (user_done);
			if user_done then goto DONE;	/* Exit the outermost do loop. */

			call iox_$control (user_input_ptr, "read_status", addr (read_status_info), code);
			if code ^= 0 then goto ERROR_userstatus;

			user_input_rdy = read_status_info.input_available;
			end;
	     end;

/*
   Block here.  When we wake up, verify that the switch which
   caused the wakeup actually has input available and then reenter the
   input processing loop.
*/

	     call ipc_$block (addr (wait_list), addr (event_info), code);
	     if code ^= 0 then goto ERROR_block;

	     if l6_event_chn = event_info.channel_id
		then do;
		     call iox_$control (l6_switch_ptr, "read_status", addr (read_status_info), code);
		     if code ^= 0 then goto ERROR_l6status;

		     l6_input_rdy = read_status_info.input_available;
		     end;

	     else if user_event_chn = event_info.channel_id
		then do;
		     call iox_$control (user_input_ptr, "read_status", addr (read_status_info), code);
		     if code ^= 0 then goto ERROR_userstatus;

		     user_input_rdy = read_status_info.input_available;
		     end;

	     else if dial_event_chn = event_info.channel_id then goto ERROR_hangup;

	     else goto ERROR_fatal;			/* Not an event channel we know about. */
	end;

DONE:
	call Cleanup_Handler ();
	return;

ERROR_actfncall:
	if code = 0
	     then call com_err_ (0, com_name, "May not be called as an active function.");
	     else call com_err_ (code, com_name);
	goto DONE;

ERROR_wrongargs:
	call com_err_ (error_table_$wrong_no_of_args, com_name,
	     "Usage: ^a channel_name {-long, -lg } {-target_dir path, -td path}", com_name);
	goto DONE;

ERROR_arg:
	call com_err_ (code, com_name, "Accessing argument ^d.", arg_idx);
	goto DONE;

ERROR_controlarg:
	call com_err_ (error_table_$badopt, com_name, "^a", arg);
	goto DONE;

ERROR_longchn:
	call com_err_ (error_table_$bigarg, com_name, "^a", arg);
	goto DONE;

ERROR_createchn:
	call convert_ipc_code_ (code);
	call com_err_ (code, com_name, "Creating event channel for dial_manager_ to use.");
	goto DONE;

ERROR_l6attach:
	call com_err_ (code, com_name, "Attaching ^a to tty_ through ^a.", channel_name, l6_ftf_switch);
	goto DONE;

ERROR_l6open:
	call com_err_ (code, com_name, "Opening ^a.", l6_ftf_switch);
	goto DONE;

ERROR_modes:
	call com_err_ (code, com_name, "Setting rawi and rawo on ^a.", l6_ftf_switch);
	goto DONE;

ERROR_getseg:
	call com_err_ (code, com_name, "Getting IO buffer segment.");
	goto DONE;

ERROR_userstatus:
	call com_err_ (code, com_name, "Reading status of user input.");
	goto DONE;

ERROR_l6status:
	call com_err_ (code, com_name, "Reading status of ^a.", l6_ftf_switch);
	goto DONE;

ERROR_block:
	call convert_ipc_code_ (code);
	call com_err_ (code, com_name, "Waiting for input.");
	goto DONE;

ERROR_fatal:
	call com_err_ (0, com_name, "Wakeup on unknown event channel ^o, from process ^.3b", event_info.channel_id,
	     event_info.sender);
	goto DONE;

ERROR_missarg:
	call com_err_ (error_table_$noarg, com_name, "For the ^a control argument.", arg);
	goto DONE;

ERROR_hangup:
	call com_err_ (0, com_name, "Hangup signalled on ^a.", l6_ftf_switch);
	goto DONE;

Process_User_Input:
     proc (finished);

dcl  finished		       bit (1);
dcl  n_read		       fixed bin (21);

	call iox_$get_line (user_input_ptr, iobp, length (iobp -> io_buf), n_read, code);

	if n_read <= 1
	     then do;
		call ioa_ ("You may type quit or q to exit this invocation of ^a.", com_name);
		finished = "0"b;
		end;

	else if substr (iobp -> io_buf, 1, n_read - 1) = "quit" | substr (iobp -> io_buf, 1, n_read - 1) = "q"
	     then finished = "1"b;

	else do;
	     call ioa_ ("You may type quit or q to exit this invocation of ^a.", com_name);
	     finished = "0"b;
	     end;
     end Process_User_Input;

Cleanup_Handler:
     proc ();

/*
   Notice that these if statements must be kept in their current order.
*/

	if l6_open then call iox_$close (l6_switch_ptr, code);

	if l6_attached then call iox_$detach_iocb (l6_switch_ptr, code);

	if dialed then call dial_manager_$release_channel (addr (dial_manager_arg), code);

	if dial_event_chn ^= 0 then call ipc_$delete_ev_chn (dial_channel, code);

	if iobp ^= null () then call release_temp_segment_ (com_name, iobp, code);

     end Cleanup_Handler;
     end l6_ftf;
