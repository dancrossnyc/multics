" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	load_fnp_util_: stuff forload_fnp_ best done in ALM.
"
"	fnp_parity: to compute two odd parity bits on the
"		two 18 bit halves of a word.
"
"	checksum: to add up a checksum of a bunch of 36
"		bit words. used while bootloading an FNP.
"
"
"	Created for new tty DIM on 01/13/75 by Mike Grady.
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

	name	load_fnp_util_

" 

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	FNP_PARITY ENTRY
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

	segdef	fnp_parity

fnp_parity:
	epp2	ap|2,*		get ptr to arg ptr
	epp2	pr2|0,*		get ptr to arg
	lda	pr2|0		get the word to do parity on
	arl	18		shift down high 18 bits
	gtb	0		this does the parity
	cana	1,dl		is it odd now?
	tnz	3,ic		yes, do other half

	lda	bit21,dl		get the parity bit
	orsa	pr2|0		put into word

	lda	pr2|0		get the  word again
	ana	-1,dl		leave only lower bits
	gtb	0		do parity again
	cana	1,dl		is this half odd?
	tnz	3,ic		yes, we are done

	lda	bit22,dl		get other parity bit
	orsa	pr2|0		put into word

	short_return		done

	bool	bit21,040000	parity for first 18 bits
	bool	bit22,020000	parity for second 18 or all 36

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	CHECKSUM ENTRY
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

	entry	checksum

	temp	temp

checksum:	push
	epp2	ap|2,*		get the ptr to the arg
	epp2	pr2|0,*		get the ptr to the data to checksum

	ldq	ap|4,*		get the count

	ldi	indic,dl		set the overflow mask
	sti	temp		setup indicator register

	lda	pr2|0		get the first word
	sbq	1,dl		decrement count
	awd	pr2|1		bump ptr

loop:	ldi	temp		restore indicators
	awca	pr2|0		add in next word
	sti	temp		save indicators

	awd	pr2|1		bump ptr
	sbq	1,dl		decrement count
	tnz	loop		do more

	sta	ap|6,*		return the checksum
	return

	bool	indic,004000

	end
