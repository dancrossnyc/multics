/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


pps_control: proc (iocb_ptr_arg, order_arg, info_ptr, code);



/*		PARAMETERS		*/


dcl  code fixed bin (35);
dcl  info_ptr ptr;
dcl  iocb_ptr_arg ptr;
dcl  order_arg char (*);


/*		ENTRY CONSTANTS		*/


dcl  iox_$control entry (ptr, char (*), ptr, fixed bin (35));
dcl  iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  pps_print$flush entry (ptr, fixed bin (35));
dcl  pps_report_man_$attach entry (ptr, fixed bin (35));
dcl  pps_report_man_$init entry (ptr, fixed bin (35));
dcl  pps_report_man_$start entry (ptr, fixed bin (35));
dcl  pps_report_man_$stop entry (ptr, fixed bin (35));


/*		EXTERNAL DATA		*/


dcl  error_table_$bad_arg fixed bin (35) ext;
dcl  error_table_$inconsistent fixed bin (35) ext;
dcl  error_table_$no_operation fixed bin (35) ext;
dcl  error_table_$not_open fixed bin (35) ext;


/*		BUILTIN FUNCTIONS		*/


dcl  addr builtin;
dcl  divide builtin;
dcl  hbound builtin;
dcl  length builtin;
dcl  min builtin;
dcl  null builtin;
dcl  rtrim builtin;
dcl  substr builtin;


/*		AUTOMATIC STORAGE		*/


dcl  cpi fixed dec (5, 1);
dcl  i fixed bin;
dcl  iocb_ptr ptr;
dcl  lpi fixed dec (5, 1);
dcl  ppscbd_ptr ptr;
dcl  sheet_length fixed dec (5, 1);
dcl  sheet_width fixed dec (5, 1);


/*		CONSTANTS			*/


dcl  NL char (1) static internal options (constant) init ("
");
dcl  ORDER_NAME_ARRAY (19) char (24) static internal options (constant) init (
     "io_call",
     "page_labels",
     "get_ppscb_info",
     "set_ppscb_info",
     "retain_all",
     "retain_none",
     "inside_page",
     "outside_page",
     "end_of_page",
     "reset",
     "get_count",
     "get_position",
     "set_position",
     "channel_stops",
     "paper_info",
     "runout",
     "get_error_count",
     "pps_paper_info",
     "new_report");


/*		INTERNAL STATIC		*/




/*		BASED VARIABLES		*/

	iocb_ptr = iocb_ptr_arg -> iocb.actual_iocb_ptr;
	ppsab_ptr = iocb.attach_data_ptr;
	code = 0;


	do i = 1 to hbound (ORDER_NAME_ARRAY, 1);
	     if order_arg = ORDER_NAME_ARRAY (i) then goto PROCESS_ORDER (i);
	end;
	code = error_table_$no_operation;
	return;


PROCESS_ORDER (1):					/* io_call */

	return;


PROCESS_ORDER (2):					/* page_labels */

	if info_ptr = null () then do;
	     pps_pci.top_label_length,
		pps_pci.bot_label_length = 0;
	end;
	else if pps_pci.modes.overflow_off then
	     code = error_table_$inconsistent;
	else do;
	     orderp = info_ptr;
	     pps_pci.bot_label_line = page_labels.bottom_label;
	     pps_pci.bot_label_length = min (length (rtrim (page_labels.bottom_label)), length (pps_pci.bot_label_line));
	     pps_pci.top_label_line = page_labels.top_label;
	     pps_pci.top_label_length = min (length (rtrim (page_labels.top_label)), length (pps_pci.top_label_line));
	end;
	return;


PROCESS_ORDER (3):					/* get_ppscb_info */

	ppscbd_ptr = info_ptr;
	ppscb_data.dir_name = ppsab.ppscb_dir;
	ppscb_data.entry_name = ppsab.ppscb_entry;
	ppscb_data.name = ppsab.ppscb_name;
	ppscb_data.ppscb_ptr = ppsab.ppscb_ptr;
	return;


PROCESS_ORDER (4):					/* set_ppscb_info */

	ppscbd_ptr = info_ptr;
	ppsab.ppscb_dir = ppscb_data.dir_name;
	ppsab.ppscb_entry = ppscb_data.entry_name;
	ppsab.ppscb_name = ppscb_data.name;
	ppsab.ppscb_ptr = ppscb_data.ppscb_ptr;
	return;


PROCESS_ORDER (5):					/* retain_all */

	if iocb.open_descrip_ptr ^= null () then do;
	     call iox_$control (ppsab.target_iocb_ptr, "retain_all", null (), code);
	     if code ^= 0 then return;
	end;
	ppsab.retain_option = "all";
	return;


PROCESS_ORDER (6):					/* retain_none */

	if iocb.open_descrip_ptr ^= null () then do;
	     call iox_$control (ppsab.target_iocb_ptr, "retain_none", null (), code);
	     if code ^= 0 then return;
	end;
	ppsab.retain_option = "none";
	return;


PROCESS_ORDER (7):					/* inside_page */


PROCESS_ORDER (8):					/* outside_page */

	if iocb.open_descrip_ptr = null () then goto NOT_OPEN;
	pps_pci.func = 1;
	call iox_$put_chars (ppsab.target_iocb_ptr, addr (NL), length (NL), code);
	pps_pci.func = 0;
	return;


PROCESS_ORDER (9):					/* end_of_page */

	if iocb.open_descrip_ptr = null () then goto NOT_OPEN;
	pps_pci.func = 3;
	call iox_$put_chars (ppsab.target_iocb_ptr, addr (NL), length (NL), code);
	pps_pci.func = 0;
	return;


PROCESS_ORDER (10):					/* reset */

	ppsab.modes.no_print = "0"b;
	ppsab.modes.single_page = "0"b;
	ppsab.stop_every = 0;
	ppsab.chars_printed = 0;
	return;


PROCESS_ORDER (11):					/* get_count */

	orderp = info_ptr;
	counts.line = pps_pci.line;
	counts.page_length = pps_pci.page_length;
	counts.lmarg = pps_pci.lmarg;
	counts.rmarg = pps_pci.rmarg;
	counts.line_count = pps_pci.line_count;
	counts.page_count = pps_pci.page_count * pps_pci.sheets_per_page;
	return;


PROCESS_ORDER (12):					/* get_position */

	orderp = info_ptr;
	position_data.line_number = pps_pci.line;	/* which line we are printing */
	position_data.page_number = pps_pci.page_count * pps_pci.sheets_per_page; /* which  phys page number */
	position_data.total_lines = pps_pci.line_count;	/* lines printed since "reset" order */
	position_data.total_chars = ppsab.chars_printed;
	return;


PROCESS_ORDER (13):					/* set_position */

	pps_pci.line_count = position_data.total_lines;
	pps_pci.page_count = divide (position_data.page_number, pps_pci.sheets_per_page, 17);
	ppsab.chars_printed = position_data.total_chars;
	return;


PROCESS_ORDER (14):					/* channel_stops */

	do i = 1 to hbound (pps_pci.form_stops, 1);
	     pps_pci.form_stops (i).lbits = "0"b || substr (channel_stops (i), 1, 8);
	     pps_pci.form_stops (i).rbits = "1"b || substr (channel_stops (i), 9, 8);
	end;
	return;


PROCESS_ORDER (15):					/* paper_info */

	lpi = paper_info.lines_per_inch;
	cpi = 12.5;
	sheet_length = divide (paper_info.phys_page_length, lpi, 5, 1);
	sheet_width = divide (paper_info.phys_line_length, cpi, 5, 1);
	call Set_Page_Size ();
	return;


PROCESS_ORDER (16):					/* runout */

	call pps_print$flush (iocb_ptr, code);
	return;


PROCESS_ORDER (17):					/* get_error_count */

	orderp = info_ptr;
	ret_error_count = 0;
	return;


PROCESS_ORDER (18):					/* pps_paper_info */

	ppspip = info_ptr;
	sheet_length = pps_paper_info.sheet_length;
	sheet_width = pps_paper_info.sheet_width;
	lpi = pps_paper_info.lines_per_inch;
	cpi = pps_paper_info.chars_per_inch;
	call Set_Page_Size ();
	return;


PROCESS_ORDER (19):					/* new_report */

if ppsab.retain_option = "none" then do;
call iox_$control(ppsab.target_iocb_ptr,"retain_all",null(),code);
if code ^= 0 then return;
end;

	call pps_report_man_$stop (iocb_ptr, code);
	if code ^= 0 then goto RESET_RETAIN;

	ppsab.file_number = ppsab.file_number+1;

	call pps_report_man_$attach (iocb_ptr, code);
	if code ^= 0 then goto RESET_RETAIN;
	call pps_report_man_$init (iocb_ptr, code);
	if code ^= 0 then goto RESET_RETAIN;
	call pps_report_man_$start (iocb_ptr, code);


RESET_RETAIN:

if ppsab.retain_option = "none" then
call iox_$control(ppsab.target_iocb_ptr,"retain_none",null(),(0));

	return;


NOT_OPEN:

	code = error_table_$not_open;
	return;

Set_Page_Size: proc ();


dcl  cpii fixed bin;
dcl  lpii fixed bin;
dcl  sli fixed bin;
dcl  swi fixed bin;


	     do cpii = 1 to hbound (CPI, 1);
		if CPI (cpii) = cpi then goto CPI_OK;
	     end;
	     code = error_table_$bad_arg;
	     return;


CPI_OK:

	     do lpii = 1 to hbound (LPI, 1);
		if LPI (lpii) = lpi then goto LPI_OK;
	     end;
	     code = error_table_$bad_arg;
	     return;


LPI_OK:

	     do swi = 1 to hbound (PAPER_WIDTH, 1);
		if PAPER_WIDTH (swi) = sheet_width then goto PW_OK;
	     end;
	     code = error_table_$bad_arg;
	     return;


PW_OK:

	     do sli = 1 to hbound (PAPER_LENGTH, 1);
		if PAPER_LENGTH (sli) = sheet_length then goto PL_OK;
	     end;
	     code = error_table_$bad_arg;
	     return;


PL_OK:

	     pps_pci.phys_page_length = sheet_length*lpi-4;
	     pps_pci.phys_line_length = min (132, sheet_width*cpi-4);
	     pps_pci.lpi = 4;
	     ppsab.cpii = cpii;
	     ppsab.lpii = lpii;
	     ppsab.swi = swi;
	     ppsab.sli = sli;
	     return;


	end Set_Page_Size;

%include iocbv;

%include pps_attach_block;

%include prt_order_info;

%include pps_paper_info;
	
%include pps_paper_sizes;

%include pps_control_block_info;


     end pps_control;
