/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


pps_util_: proc ();


	return;

/*		PARAMETERS		*/


dcl  a_ppscb_dir char (*);
dcl  a_ppscb_entry char (*);
dcl  a_ppscb_name char (*);
dcl  a_ppscb_ptr ptr;
dcl  a_ppscb_rec_len fixed bin;
dcl  a_ppscb_rec_ptr ptr;
dcl  code fixed bin (35);


/*		ENTRY CONSTANTS		*/


dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));


/*		EXTERNAL DATA		*/




/*		BUILTIN FUNCTIONS		*/


dcl  null builtin;


/*		AUTOMATIC STORAGE		*/




/*		CONSTANTS			*/




/*		INTERNAL STATIC		*/




/*		BASED VARIABLES		*/

find_ppscb: entry (a_ppscb_dir, a_ppscb_entry, a_ppscb_name, a_ppscb_ptr, code);


	a_ppscb_ptr = null ();
	code = 0;


/*

   First we need the segment in which the control block supposedly resides.

*/


	call hcs_$initiate (a_ppscb_dir, a_ppscb_entry, "", 0, 0, ppscb_ptr, code);
	if code ^= 0 then return;


/*

   Now find the particular control block in the spcified segment.

*/


	code = 99;				/* Not yet implemented. */


	return;

make_ppscb_record: entry (a_ppscb_ptr, a_ppscb_rec_ptr, a_ppscb_rec_len, code);


	ppscb_ptr = a_ppscb_ptr;
	ppscb_rec_ptr = a_ppscb_rec_ptr;


/* move data from the ppscb structure to ppscb_rec structure */


	a_ppscb_rec_len = 0;


	return;

%include pps_control_block;

%include pps_control_block_rec;


     end pps_util_;
