/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


pps_close: proc (iocb_ptr_arg, code);



/*		PARAMETERS		*/


dcl  code fixed bin (35);
dcl  iocb_ptr ptr;


/*		ENTRY CONSTANTS		*/


dcl  default_handler_$set entry (entry);
dcl  hcs_$reset_ips_mask entry (fixed bin (35), fixed bin (35));
dcl  hcs_$set_ips_mask entry (fixed bin (35), fixed bin (35));
dcl  iox_$propagate entry (ptr);
dcl  pps_control entry (ptr, char (*), ptr, fixed bin (35));
dcl  pps_detach entry (ptr, fixed bin (35));
dcl  pps_open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  pps_report_man_$stop entry (ptr, fixed bin (35));


/*		EXTERNAL DATA		*/




/*		BUILTIN FUNCTIONS		*/


dcl  addr builtin;
dcl  null builtin;


/*		AUTOMATIC STORAGE		*/


dcl  iocb_ptr_arg ptr;
dcl  mask fixed bin (35);


/*		CONSTANTS			*/




/*		INTERNAL STATIC		*/




/*		BASED VARIABLES		*/

/*

   Initialize necessary data.

*/


	code = 0;
	mask = 0;
	iocb_ptr = iocb_ptr_arg -> iocb.actual_iocb_ptr;
	ppsab_ptr = iocb.attach_data_ptr;

	call default_handler_$set (Default_Condition_Handler);


/*

   Now close the I/O switch.

*/


	call hcs_$set_ips_mask (0, mask);

	iocb.open_descrip_ptr = null ();
	iocb.open = pps_open;
	iocb.detach_iocb = pps_detach;
	iocb.control = pps_control;
	call iox_$propagate (iocb_ptr);

	call hcs_$reset_ips_mask (mask, mask);


/*

   Terminate the current output report (close and detach target I/O switch).

*/


	call pps_report_man_$stop (iocb_ptr, code);


	return;

/*

   Internal procedure to handle faults while IPS interrupts are masked. While not masked, any signals are simply
   passed on up the stack to their normal handlers. For a fault while masked, the process is terminated (with the
   reason "unable to do critical I/O") because the I/O control blocks are in an inconsistent state, and we can
   tolerate neither spawning a command loop with interrupts masked nor a restart with a possibly changed mask.

*/


Default_Condition_Handler: proc (p1, name, p2, p3, continue);


dcl  continue bit (1) aligned;
dcl  error_table_$unable_to_do_io fixed (35) ext;
dcl  name char (*);
dcl  p1 ptr;
dcl  p2 ptr;
dcl  p3 ptr;
dcl  terminate_process_ entry (char (*), ptr);

dcl 1 ti aligned,
    2 version fixed,
    2 code fixed (35);


	     if mask ^= 0 then do;
		ti.version = 0;
		ti.code = error_table_$unable_to_do_io;
		call terminate_process_ ("fatal_error", addr (ti));
	     end;
	     if name ^= "cleanup" then continue = "1"b;
	     return;


	end Default_Condition_Handler;

%include iocbv;

%include pps_attach_block;


     end pps_close;
