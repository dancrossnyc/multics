/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


pps_attach: proc (iocb_ptr_arg, option_array, com_err_switch, code);

/* Modified 84-08-22 to call unique_chars_... -E. A. Ranzenbach */

/*		PARAMETERS		*/


dcl  code fixed bin (35);
dcl  com_err_switch bit (1) aligned;
dcl  iocb_ptr_arg ptr;
dcl  option_array (*) char (*) varying;


/*		ENTRY CONSTANTS		*/


dcl  com_err_ entry options (variable);
dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  cv_entry_ entry (char (*), ptr, fixed bin (35)) returns (entry);
dcl  cv_ptr_ entry (char (*), fixed bin (35)) returns (ptr);
dcl  default_handler_$set entry (entry);
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$reset_ips_mask entry (fixed bin (35), fixed bin (35));
dcl  hcs_$set_ips_mask entry (fixed bin (35), fixed bin (35));
dcl  iox_$propagate entry (ptr);
dcl  mvt_entry entry (char (*), char (*)) variable;
dcl  ppf6023$ppf6023_move entry (char (*), char (*));
dcl  pps_$pps_attach entry (ptr, (*) char (*), bit (1) aligned, fixed bin (35));
dcl  pps_control entry (ptr, char (*), ptr, fixed bin (35));
dcl  pps_detach entry (ptr, fixed bin (35));
dcl  pps_modes entry (ptr, char (*), char (*), fixed bin (35));
dcl  pps_open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  pps_util_$find_ppscb entry (char (*), char (*), char (*), ptr, fixed bin (35));
dcl  requote_string_ entry (char (*)) returns (char (*));
dcl  unique_chars_ entry (bit (*)) returns (char (15));


/*		EXTERNAL DATA		*/


dcl  error_table_$bad_arg fixed bin (35) ext;
dcl  error_table_$bad_conversion fixed bin (35) ext;
dcl  error_table_$badopt fixed bin (35) ext;
dcl  error_table_$noarg fixed bin (35) ext;
dcl  error_table_$not_detached fixed bin (35) ext;
dcl  error_table_$unimplemented_version fixed bin (35) ext;
dcl  ppf6023$ppf6023_table ext;
dcl  pps_conv_$pps_conv_ ext;


/*		BUILTIN FUNCTIONS		*/


dcl  addr builtin;
dcl  hbound builtin;
dcl  length builtin;
dcl  ltrim builtin;
dcl  null builtin;
dcl  rtrim builtin;
dcl  substr builtin;

/*		AUTOMATIC STORAGE		*/


dcl  bottom_label char (132);
dcl  file_number pic "9999999999";
dcl  i fixed bin;
dcl  iocb_ptr ptr;
dcl  j fixed bin;
dcl  mask fixed bin (35);
dcl  may_be_volid bit (1);
dcl  modes_index fixed bin;
dcl  n fixed bin;
dcl  n_opts fixed bin;
dcl  ppscb_dir char (168);
dcl  ppscb_entry char (32);
dcl  ppscb_name char (32);
dcl  ppscb_ptr ptr;
dcl  retain_option char (4) varying;
dcl  string_len fixed bin (21);
dcl  string_ptr ptr;
dcl  table_ptr ptr;
dcl  tape_density pic "99999";
dcl  top_label char (132);
dcl  volids char (256) varying;


/*		CONSTANTS			*/


dcl  DEFAULT_TARGET_ATTACH_DESCRIP char (121) static internal options (constant) init ("tape_ibm_ ^a -create -name FILE^d -number ^d -format fb -record 133 -block 1596 -density ^d -retain ^a -force -mode ascii");
dcl  ME char (4) static internal options (constant) init ("pps_");
dcl  OPT_NAME_ARRAY (20) static internal char (16) varying options (constant) init (
     "-bottom_label",
     "-blbl",
     "-char_table",
     "-ct",
     "-control_block",
     "-cblk",
     "-density",
     "-den",
     "-label",
     "-lbl",
     "-modes",
     "-mds",
     "-number",
     "-nb",
     "-retain",
     "-ret",
     "-top_label",
     "-tlbl",
     "-volume",
     "-vol");
dcl  OPT_INDEX_ARRAY (20) static internal fixed bin options (constant) init (
     1, 1, 6, 6, 2, 2, 3, 3, 4, 4, 5, 5, 9, 9, 10, 10, 7, 7, 8, 8);

/*		INTERNAL STATIC		*/




/*		BASED VARIABLES		*/


dcl  string char (string_len) based (string_ptr) varying;

/*

   Initialize necessary data items.

*/


	code = 0;
	mask = 0;
	iocb_ptr = iocb_ptr_arg;

	call default_handler_$set (Default_Condition_Handler);


/*

   Now check to see if the I/O switch is attached. If so, complain. If not, then process the options and, if no errors
   are found, attach the I/O switch.

*/


	if iocb.attach_descrip_ptr ^= null () then do;
	     code = error_table_$not_detached;
	     if com_err_switch then
		call com_err_ (code, ME, "^a", iocb.name);
	     return;
	end;


/*

   Process the attach description arguments from left to right.

*/


	call Process_Options ();
	if code ^= 0 then return;


/*

   Now get the attach data in order.

*/


	call Update_Attach_Block ();
	if code ^= 0 then return;

/*

   Now, very carefully, update the IOCB.

*/


	call hcs_$set_ips_mask (0, mask);

	iocb.attach_data_ptr = ppsab_ptr;
	iocb.attach_descrip_ptr = addr (ppsab.attach_descrip);
	iocb.control = pps_control;
	iocb.modes = pps_modes;
	iocb.open = pps_open;
	iocb.detach_iocb = pps_detach;
	call iox_$propagate (iocb_ptr);

	call hcs_$reset_ips_mask (mask, mask);


/*

   If there were modes specified in the attach description, try to put them in effect.

*/


	if modes_index > 0 then do;
	     call pps_modes (iocb_ptr, (option_array (modes_index)), "", code);
	     if code ^= 0 then
		if com_err_switch then
		     call com_err_ (code, ME, "^a^/Default modes remain in effect.", option_array (modes_index));
	end;


	return;

Update_Attach_Block: proc ();


dcl  string char (512) varying;
dcl  init_ppsab bit (1) aligned;


/*

   Make sure we have an attach data block and determine the proper file number from this data block and the file
   number which may have been specified in the attach description.

*/


	     call hcs_$make_seg ("", (rtrim (iocb.name)||".ppsseg"), "", 01010b, ppsab_ptr, code);
	     if ppsab_ptr = null () then do;		/* ERROR - cannot create ppsseg. */
		if com_err_switch then
		     call com_err_ (code, ME, "Cannot create ppsseg in process directory.");
		return;
	     end;
	     if code ^= 0 then do;			/* Must have already been there. */
		code = 0;
		if ppsab.version = pps_attach_block_version_1 then init_ppsab = "0"b;
		else if ppsab.version = 0 then init_ppsab = "1"b;
		else do;
		     code = error_table_$unimplemented_version;
		     if com_err_switch then
			call com_err_ (code, ME, "^a.ppsseg in process directory has bad version.", iocb.name);
		     return;
		end;
	     end;
	     else init_ppsab = "1"b;


	     if file_number ^= 0 then do;
		if file_number > ppsab.file_number+1 then do;
		     code = error_table_$bad_arg;
		     if com_err_switch then
			call com_err_ (code, ME, "File number specified is beyond end of volume.");
		     return;
		end;
	     end;
	     else file_number = ppsab.file_number+1;

/*

   Compose an attach description for the iocb.attach_descrip_ptr.

*/


	     string = "pps_ -volume " || rtrim (volids) || " -density " || ltrim (tape_density, "0")
		|| " -number " || ltrim (file_number, "0") || " -retain " || retain_option;
	     if top_label ^= "" then do;
		string = string || " -top_label ";
		string = string || requote_string_ (rtrim (top_label));
	     end;
	     if bottom_label ^= "" then do;
		string = string || " -bottom_label ";
		string = string || requote_string_ (rtrim (bottom_label));
	     end;
	     if ppscb_entry ^= "" then do;
		string = string || " -ppscb ";
		if ppscb_dir ^= ">" then string = string || ppscb_dir;
		string = string || ">";
		string = string || ppscb_entry;
		string = string || " ";
		string = string || ppscb_name;
	     end;


/*

   Fill in the appropriate items in the attach data block.

*/


	     ppsab.attach_descrip = string;
	     ppsab.file_number = file_number;
	     ppsab.ppscb_dir = ppscb_dir;
	     ppsab.ppscb_entry = ppscb_entry;
	     ppsab.ppscb_name = ppscb_name;
	     ppsab.ppscb_ptr = ppscb_ptr;
	     ppsab.retain_option = retain_option;
	     ppsab.table_ptr = table_ptr;
	     ppsab.mvt_entry = mvt_entry;
	     ppsab.target_iocb_ptr = null ();
	     ppsab.open_descrip = "";


	     if ^init_ppsab then return;


	     ppsab.version = pps_attach_block_version_1;
	     ppsab.target_name = "pps_"||unique_chars_ ("0"b);
	     ppsab.target_attach_descrip = DEFAULT_TARGET_ATTACH_DESCRIP;
	     ppsab.tape_density = tape_density;
	     ppsab.volids = volids;

/*

   Initialize the prt_conv_info structure.

*/


	     ppsab.pps_pci.cv_proc = addr (pps_conv_$pps_conv_);
	     ppsab.pps_pci.lmarg = 0;			/* default indent = 0 */
	     ppsab.pps_pci.rmarg = 132;		/* default line length = 132 */
	     ppsab.pps_pci.page_length = 58;		/* default page_length = physical_page_length - pages_per_inch */
	     ppsab.pps_pci.phys_line_length = 132;	/* for 11 inch paper */
	     ppsab.pps_pci.phys_page_length = 58+6;	/* for 8.5 inch paper */
	     ppsab.pps_pci.lpi = 6;			/* the default */
	     ppsab.pps_pci.sheets_per_page = 1;
	     ppsab.pps_pci.line_count = 0;
	     ppsab.pps_pci.page_count = 0;
	     ppsab.pps_pci.func = 0;
	     ppsab.pps_pci.modes.overflow_off = "0"b;
	     ppsab.pps_pci.modes.single_space = "0"b;
	     ppsab.pps_pci.modes.non_edited = "0"b;
	     ppsab.pps_pci.modes.truncate = "0"b;
	     ppsab.pps_pci.modes.esc = "0"b;
	     ppsab.pps_pci.modes.ctl_char = "0"b;
	     ppsab.pps_pci.coroutine_modes.upper_case = "0"b;
	     ppsab.pps_pci.coroutine_modes.ht = "0"b;
	     ppsab.pps_pci.coroutine_modes.slew_table_idx = "000"b;
	     ppsab.pps_pci.top_label_line = top_label;
	     ppsab.pps_pci.bot_label_line = bottom_label;
	     ppsab.pps_pci.top_label_length = length (rtrim (top_label));
	     ppsab.pps_pci.bot_label_length = length (rtrim (bottom_label));
	     do i = 1 to hbound (ppsab.pps_pci.form_stops, 1);
		ppsab.pps_pci.form_stops (i).lbits = (9)"0"b;
		ppsab.pps_pci.form_stops (i).rbits = (9)"0"b;
	     end;
	     ppsab.pps_pci.level = 0;
	     ppsab.pps_pci.pos = 0;
	     ppsab.pps_pci.line = 0;
	     ppsab.pps_pci.slew_residue = 0;
	     ppsab.pps_pci.label_nelem = 0;
	     ppsab.pps_pci.label_wksp = null ();
	     ppsab.pps_pci.sav_pos = 0;
	     ppsab.pps_pci.esc_state = 0;
	     ppsab.pps_pci.esc_num = 0;
	     ppsab.pps_pci.temp = (36)"0"b;


	     return;


	end Update_Attach_Block;

Process_Options: proc ();


/*

   Initialize data items for pps_attach_block structure later.

*/


	     bottom_label = "";
	     file_number = 0;
	     may_be_volid = "1"b;
	     modes_index = 0;
	     mvt_entry = ppf6023$ppf6023_move;
	     ppscb_dir = "";
	     ppscb_entry = "";
	     ppscb_name = "";
	     ppscb_ptr = null ();
	     retain_option = "none";
	     table_ptr = addr (ppf6023$ppf6023_table);
	     tape_density = 1600;
	     top_label = "";
	     volids = "";


/*

   Now, process the options in the option_array.

*/


	     n_opts = hbound (option_array, 1);
	     i = 1;
	     do while (i <= n_opts);


/*

   Look up the option in the name array.

*/


		if substr (option_array (i), 1, 1) ^= "-" then do;
		     if ^may_be_volid then goto bad_opt;
		     volids = volids || option_array (i) || " ";
		     goto next_opt;
		end;

		may_be_volid = "0"b;

		do j = 1 to hbound (OPT_NAME_ARRAY, 1);
		     if OPT_NAME_ARRAY (j) = option_array (i) then
			goto OPTION (OPT_INDEX_ARRAY (j));
		end;


bad_opt:

		code = error_table_$badopt;
		if com_err_switch then
		     call com_err_ (code, ME, "^a", option_array (i));
		return;


OPTION (1):					/*  -bottom_label XX, -blbl XX */

		call Get_Next_String ();
		bottom_label = string;
		goto next_opt;


OPTION (2):					/*  -control_block cbpath cbname, -cblk cbpath cbname */


		call Get_Next_String ();
		call expand_pathname_ ((string), ppscb_dir, ppscb_entry, code);
		if code ^= 0 then do;
		     if com_err_switch then
			call com_err_ (code, ME, "^a", string);
		     return;
		end;
		call Get_Next_String ();
		ppscb_name = string;
		call pps_util_$find_ppscb (ppscb_dir, ppscb_entry, ppscb_name, ppscb_ptr, code);
		if ppscb_ptr = null () then do;
		     if com_err_switch then
			call com_err_ (code, ME, "Could not find PPS control block ^a in ^a^[>^]^a.",
			ppscb_name, ppscb_dir, (ppscb_dir ^= ">"), ppscb_entry);
		     return;
		end;
		goto next_opt;


OPTION (3):					/*  -density _n, -den _n  */

		call Get_Next_Dec ();
		if (n ^= 800) & (n ^= 1600) then do;
		     code = error_table_$bad_arg;
		     if com_err_switch then
			call com_err_ (code, ME, "Illegal density specification.  ^d", n);
		     return;
		end;
		tape_density = n;
		goto next_opt;


OPTION (4):					/*  -label XX, -lbl XX  */

		call Get_Next_String ();
		top_label, bottom_label = string;
		goto next_opt;

OPTION (5):					/*  -modes XX, -mds XX  */

		call Get_Next_String ();
		modes_index = i;
		goto next_opt;


OPTION (6):					/*  -char_table XX, -ct XX  */

		call Get_Next_String ();
		mvt_entry = cv_entry_ ((string||"$"||string||"_move"), addr (pps_$pps_attach), code);
		if code ^= 0 then do;
		     if com_err_switch then
			call com_err_ (code, ME, "^a|^a_move", string, string);
		end;
		table_ptr = cv_ptr_ ((string||"$"||string||"_table"), code);
		if code ^= 0 then do;
		     if com_err_switch then
			call com_err_ (code, ME, "^a|^a_table", string, string);
		     return;
		end;
		goto next_opt;


OPTION (7):					/*  -top_label XX, -tlbl XX  */

		call Get_Next_String ();
		top_label = string;
		goto next_opt;


OPTION (8):					/*  -volume XX, -vol XX  */

		call Get_Next_String ();
		if string = "" then do;
		     code = error_table_$bad_arg;
		     if com_err_switch then
			call com_err_ (code, ME, "Invalid volume idetifier specified.  ^a", string);
		     return;
		end;
		volids = volids||string||" ";
		goto next_opt;


OPTION (9):					/* -number N, -nb N  */

		call Get_Next_Dec ();
		file_number = n;
		goto next_opt;


OPTION (10):					/*  -retain XX, -ret XX  */

		call Get_Next_String ();
		if string ^= "all"
		& string ^= "none" then do;
		     code = error_table_$bad_arg;
		     if com_err_switch then
			call com_err_ (code, ME, "Invalid retain specification.  ^a",
			string);
		     return;
		end;
		else retain_option = string;
		goto next_opt;


next_opt:

		i = i+1;
	     end;


	     if volids = "" then do;
		code = error_table_$noarg;
		if com_err_switch then
		     call com_err_ (code, ME, "No volume identifer(s) specified.");
		return;
	     end;


fatal_opt_err:

	     return;

Get_Next_Dec:  proc ();


		if i >= n_opts then do;
		     code = error_table_$noarg;
		     if com_err_switch then
			call com_err_ (code, ME, "Missing decimal integer following ^a control argument.",
			option_array (i));
		     goto fatal_opt_err;
		end;
		i = i+1;
		n = cv_dec_check_ ((option_array (i)), code);
		if code ^= 0 then do;
		     code = error_table_$bad_conversion;
		     if com_err_switch then
			call com_err_ (code, ME, "Bad decimal integer following ^a control argument.  ^a",
			option_array (i-1), option_array (i));
		     goto fatal_opt_err;
		end;
		return;


	     end Get_Next_Dec;

Get_Next_String: proc ();


		if i >= n_opts then do;
		     code = error_table_$noarg;
		     if com_err_switch then
			call com_err_ (code, ME, "String missing following ^a control argument.", option_array (i));
		     goto fatal_opt_err;
		end;
		i = i+1;
		string_ptr = addr (option_array (i));
		string_len = length (option_array (i));
		return;


	     end Get_Next_String;


	end Process_Options;

/*

   Internal procedure to handle faults while IPS interrupts are masked. While not masked, any signals are simply
   passed on up the stack to their normal handlers. For a fault while masked, the process is terminated (with the
   reason "unable to do critical I/O") because the I/O control blocks are in an inconsistent state, and we can
   tolerate neither spawning a command loop with interrupts masked nor a restart with a possibly changed mask.

*/


Default_Condition_Handler: proc (p1, name, p2, p3, continue);


dcl  continue bit (1) aligned;
dcl  error_table_$unable_to_do_io fixed (35) ext;
dcl  name char (*);
dcl  p1 ptr;
dcl  p2 ptr;
dcl  p3 ptr;
dcl  terminate_process_ entry (char (*), ptr);

dcl 1 ti aligned,
    2 version fixed,
    2 code fixed (35);


	     if mask ^= 0 then do;
		ti.version = 0;
		ti.code = error_table_$unable_to_do_io;
		call terminate_process_ ("fatal_error", addr (ti));
	     end;
	     if name ^= "cleanup" then continue = "1"b;
	     return;


	end Default_Condition_Handler;

%include iocbv;

%include pps_attach_block;


     end pps_attach;
