/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


pps_report_man_: proc (); return;



/*		PARAMETERS		*/


dcl  code fixed bin (35);


/*		ENTRY CONSTANTS		*/


dcl  ioa_ entry options (variable);
dcl  ioa_$rsnnl entry options (variable);
dcl  iox_$attach_ioname entry (char (*), ptr, char (*), fixed bin (35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  iox_$write_record entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  pps_print$init entry ();
dcl  pps_print$flush entry (ptr, fixed bin (35));
dcl  pps_put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  pps_util_$make_ppscb_record entry (ptr, ptr, fixed bin, fixed bin (35));


/*		EXTERNAL DATA		*/




/*		BUILTIN FUNCTIONS		*/


dcl  addr builtin;
dcl  divide builtin;
dcl  length builtin;
dcl  null builtin;
dcl  substr builtin;
dcl  unspec builtin;


/*		AUTOMATIC STORAGE		*/


dcl  i fixed bin;
dcl  iocb_ptr ptr;
dcl  my_ppscb_rec_len fixed bin;
dcl  string char (256);
dcl  string_len fixed bin;


dcl 1 my_ppscb_rec aligned,
    2 line (100) char (133);


/*		CONSTANTS			*/


dcl  FF char (1) static internal options (constant) init ("");
dcl  SEQ_OUT fixed bin static internal options (constant) init (5);


/*		INTERNAL STATIC		*/




/*		BASED VARIABLES		*/

/*

   This entry provides the attachment of the target I/O switch.

*/


attach: entry (iocb_ptr, code);


	code = 0;
	ppsab_ptr = iocb.attach_data_ptr;
	ppscb_ptr = ppsab.ppscb_ptr;


/*

   Create the attach description for the target I/O switch.

*/


	call ioa_$rsnnl (ppsab.target_attach_descrip, string, string_len, ppsab.volids, ppsab.file_number,
	     ppsab.file_number, ppsab.tape_density, ppsab.retain_option);


/*

   Attach the target I/O switch.

*/


	if ppsab.modes.debug then call ioa_ ("Attaching target iocb as ""^a"".", substr (string, 1, string_len));
	else call iox_$attach_ioname (ppsab.target_name, ppsab.target_iocb_ptr, substr (string, 1, string_len), code);
	if code ^= 0 then return;


/*

   Open the target I/O switch.

*/


	if ppsab.modes.debug then call ioa_ ("Opening target iocb.");
	else call iox_$open (ppsab.target_iocb_ptr, SEQ_OUT, "0"b, code);
	if code ^= 0 then return;			/* may need to detach */


/*

   Now, if we have a control block, convert it to a ppscb record and write it to tape.

*/


	if ppscb_ptr = null () then ppscb_ptr = addr (DEFAULT_PPS_CONTROL_BLOCK);
	unspec (my_ppscb_rec) = "0"b;
	call pps_util_$make_ppscb_record (ppscb_ptr, addr (my_ppscb_rec), my_ppscb_rec_len, code);
	if code ^= 0 then return;


	do i = 1 to divide ((my_ppscb_rec_len+3), 4, 17, 0);
	     call iox_$write_record (ppsab.target_iocb_ptr, addr (my_ppscb_rec.line (i)), length (my_ppscb_rec.line (i)), code);
	     if code ^= 0 then return;
	end;

	return;

/*

   This entry is called to initialize certain values in the attach data after
   the target I/O switch has been attached.

*/


init: entry (iocb_ptr,code);


	code = 0;
	ppsab_ptr = iocb.attach_data_ptr;

	ppsab.pps_pci.level = 0;
	ppsab.pps_pci.pos = 0;
	ppsab.pps_pci.line = ppsab.pps_pci.phys_page_length*ppsab.pps_pci.sheets_per_page
	     -divide (ppsab.pps_pci.lpi, 2, 17, 0)+1;
	ppsab.pps_pci.slew_residue = 0;
	ppsab.pps_pci.label_wksp = null ();
	ppsab.pps_pci.label_nelem = 0;
	ppsab.pps_pci.sav_pos = 0;
	ppsab.pps_pci.temp = (36)"0"b;

	return;

/*

   This entry is called to start a new report.  It must be called after the two
   preceeding entries.

*/


start: entry (iocb_ptr,code);


	code = 0;


/*

   Initialize the kludge module which will handle the overprinting.

*/


	call pps_print$init ();


/*

   Now we must initialize the output procedure, prt_conv_, to get him to the top of his output page.

*/


	call pps_put_chars (iocb_ptr, addr (FF), length (FF), code);


	return;

stop: entry (iocb_ptr, code);


      code = 0;
      ppsab_ptr = iocb.attach_data_ptr;


/*

   Flush any buffered output.

*/


	call pps_print$flush (ppsab.target_iocb_ptr, code);


/*

   Now close and detach the target I/O switch.

*/


	if ppsab.modes.debug then call ioa_ ("Closing and detaching target.");
	else do;
	     call iox_$close (ppsab.target_iocb_ptr, code);
	     call iox_$detach_iocb (ppsab.target_iocb_ptr, code);
	end;


	return;


%include iocbv;

%include pps_attach_block;

%include pps_control_block;


     end pps_report_man_;
