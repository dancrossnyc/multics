/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
dfast_directory_: proc (action, arg_pathname, edit_info_ptr, copy_info_ptr, code);

/*  This procedure is used to read and write the current segment and to delete segments.
   *
   *	(1)  read		Read into the current segment.  If successful, it sets:
   *
   *			basic_system	ON	Basic source or object code.
   *					OFF	Fortran source or object code.
   *					(not set)	Could not tell type of segment or segment was neither
   *						Fortran nor Basic.
   *
   *			source_segment	ON	Segment is not an object segment.
   *					OFF	Segment is an object segment.
   *
   *			current_length	Number of characters in new current segment.
   *
   *			current_name	Set to the entry name.  If pathname contained an absolute pathname
   *					on entry, current_name will contain just the entry name on exit.
   *
   *	(2)  save		Store only if the segment does not exist.
   *
   *	(3)  replace	Store only if the segment does exist.
   *
   *	(4)  delete	Delete the segment.
   *
   *	(5)  copy		Add the segment onto the end of a segment supplied with the copy_info structure
   *
   *	(6)  truncate	Truncate the segment.  (scratch request)
   *
*/
/*  parameters */

dcl  action fixed bin;				/* requested action: save, old etc. */
dcl  arg_pathname char (*);				/* pathname */
dcl  edit_info_ptr ptr;				/* ptr to dfast_edit_info structure */
dcl  copy_info_ptr ptr;				/* ptr to copy_info structure (for COPY request only) */
dcl  code fixed bin (35);

/* automatic */
dcl  line char (256) var;				/* TEST */

dcl  bit_count fixed bin (24);			/* length of segment */
dcl  i fixed bin (35);
dcl  directory_name char (168);
dcl  access fixed bin (5);
dcl  entry_name char (32);
dcl  seg_ptr ptr;					/* ptr. to segment in directory */
dcl  system bit (1) unal;
dcl  system_name char (7);
dcl  pathname char (256) var;				/* complete pathname */
dcl  program_header_pt ptr;				/* ONLY to prevent warn. (%include basic_program_header) */
dcl  message char (256) var;


dcl (addr, divide, index, length, null, reverse, substr) builtin;

/* external */

dcl  iox_$user_output ptr ext;
dcl  error_table_$incorrect_access fixed bin (35) ext;
dcl  error_table_$noentry fixed bin (35) ext;
dcl  error_table_$segknown fixed bin (35) ext;
dcl  dfast_error_ entry (fixed bin (35), char (*), char (*));
dcl  dfast_merge_ entry (bit (1) unal, ptr, fixed bin (35));
dcl  hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (12), ptr, fixed bin (35));
dcl  hcs_$delentry_seg entry (ptr, fixed bin (35));
dcl  hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$set_bc_seg entry (ptr, fixed bin (24), fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  hcs_$truncate_seg entry (ptr, fixed bin (18), fixed bin (35));
dcl  ioa_$ioa_switch entry options (variable);
dcl  com_err_$convert_status_code_ entry (fixed bin (35), char (*) aligned, char (*) aligned);
dcl  object_info_$display entry (ptr, fixed bin (24), ptr, fixed bin (35));

/* constants */

dcl  READ fixed bin int static init (1) options (constant);
dcl  SAVE fixed bin int static init (2) options (constant);
dcl  REPLACE fixed bin int static init (3) options (constant);
dcl  DELETE fixed bin int static init (4) options (constant);
dcl  COPY fixed bin int static init (5) options (constant);
dcl  TRUNCATE fixed bin int static init (6) options (constant);
dcl  MERGE fixed bin int static init (9) options (constant);
dcl  RW_access fixed bin (5) int static init (01010b) options (constant);
dcl  REW_access fixed bin (5) int static init (01110b) options (constant);
dcl  request_id (6) char (7) int static init ("old", "save", "replace", "unsave", "edit", "scratch") options (constant);

/* based */

dcl  cur_seg char (f.current_length) based;
dcl  string char (f.max_seg_size) based;
						/* based */

dcl 1 oi like object_info aligned;
dcl 1 f aligned based (edit_info_ptr) like dfast_edit_info;
dcl 1 copy_info aligned based (copy_info_ptr),
    2 copy_ptr ptr,					/* ptr to base of target segment */
    2 old_length fixed bin (21),			/* length of segment before the copy */
    2 new_length fixed bin (21);			/* length of segment after the copy */

/* include files */

%include dfast_error_codes;
%include basic_program_header;
%include dfast_edit_info;
%include object_info;

/*  */
	seg_ptr = null;
	if substr (arg_pathname, 1, 1) = ">" then pathname = arg_pathname;
	else pathname = f.home_dir || ">" || arg_pathname;
	i = length (pathname) - index (reverse (pathname), ">");
	directory_name = substr (pathname, 1, i);
	message = pathname;
	entry_name = substr (pathname, i + 2);

	if action ^= SAVE then do;			/* SAVE requires hcs_$make_seg */
	     call hcs_$initiate_count (directory_name, entry_name, "", bit_count, 0, seg_ptr, code);

	     if code = error_table_$segknown then code = 0;
	end;

	if code = 0 then do;
	     if action = READ then do;


/*  If the segment is object, the f.source_segment and f.basic_system can be set with assurance.
   If the segment is not object, it is assumed to be a source segment.
*/
		oi.version_number = 2;
		call object_info_$display (seg_ptr, bit_count, addr (oi), code);
		if code = 0 then do;
		     if oi.compiler = "basic" then do;
			system = "1"b;

/* version is -1 if the language is dbasic (extended precision basic) */

			if oi.textp -> basic_program_header.version_number = -1 then f.dbasic =  "1"b;
		     end;
		     else if oi.compiler = "fortran2" then system = "0"b;
		     else do;
			code = error_unkn_sys;
			message = oi.compiler;
		     end;
		     if code = 0 then do;
			if system ^= f.basic_system then do;
			     system_name = oi.compiler;	/* 'fortran2' gets shortened to 'fortran' */
			     call ioa_$ioa_switch (iox_$user_output, "system changed to ^a", system_name);
			     f.basic_system = system;
			end;
			f.source_segment = "0"b;
		     end;
		end;
		else do;
		     code = 0;
		     f.source_segment = "1"b;
		end;

		if code = 0 then do;
		     i = divide (bit_count, 9, 17, 0);
		     if i > f.max_seg_size then code = error_max_size;
		     else do;
			f.current_length = i;
			f.current_ptr -> cur_seg = seg_ptr -> cur_seg;
			i = index (entry_name, " ");	/* ignore trailing blanks */
			f.current_name = substr (entry_name, 1, i -1);
			f.alter_length = 0;		/* ignore previous edit */
			f.edit_done = "0"b;
		     end;
		end;
	     end;

	     else if action = DELETE then do;
		call hcs_$delentry_seg (seg_ptr, code);
		seg_ptr = null;
	     end;

	     else if action = TRUNCATE then do;
		call hcs_$truncate_seg (seg_ptr, 0, code);
		if code = 0 then call hcs_$set_bc_seg (seg_ptr, 0, code);
	     end;

	     else if action = COPY then do;
		i = divide (bit_count, 9, 17, 0);
		if i + copy_info.old_length > f.max_seg_size then code = error_max_size;

		else do;
		     substr (copy_info.copy_ptr -> string, copy_info.old_length +1, i) =
			substr (seg_ptr -> string, 1, i);
		     copy_info.new_length = copy_info.old_length +i;
		end;
	     end;

	     else do;
		if f.alter_length > 0 then call dfast_merge_ ("0"b, edit_info_ptr, code);
		if code = 0 then do;
		     if action = SAVE then do;
			if f.source_segment then access = RW_access;
			else access = REW_access;
			call hcs_$make_seg (directory_name, entry_name, "", access, seg_ptr, code);
			if code = error_table_$segknown then code = error_name_dup;
		     end;

		     if code = 0 then do;
			seg_ptr -> cur_seg = f.current_ptr -> cur_seg;
			bit_count = f.current_length * 9;
			call hcs_$set_bc_seg (seg_ptr, bit_count, code);
			if code = 0 then call hcs_$truncate_seg (seg_ptr, divide (f.current_length + 3, 4, 18), code);
		     end;
		end;
	     end;
	end;


	if code ^= 0 then do;
	     if code = error_table_$noentry then code = error_not_saved;
	     i = index (directory_name, " ");
	     if i = 0 then i = length (directory_name) +1;
	     call dfast_error_ (code, request_id (action), (message));
	end;

/*  This code keps track of the pathname of the last OLD, SAVE, REPLACE for use with COMPILE command */

	else if action = READ | action = SAVE | action = REPLACE then do;
	     f.source_directory = directory_name;
	     f.source_entryname = entry_name;
	end;

	if seg_ptr ^= null then call hcs_$terminate_noname (seg_ptr, i);

	return;

     end dfast_directory_;
