/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

apl_storage_meters:
asm:
     procedure ();

/*
 * command to display the meters kept by apl_storage_manager_
 *
 * written 73.8.04 by DAM
 * Modified 731206 by PG for modified include file format.
 * Modified 740617 by PG to print more info.
 * Modified 750911 by PG to rename from meter_apl_storage to apl_storage_meters
 * Modified 750330 by PG to re-format output
 */




dcl	com_err_		entry options (variable),
	error_table_$badopt fixed bin (35) external,
	cu_$arg_ptr	entry (fixed bin, ptr, fixed bin, fixed bin (35)),
	argp		ptr,
	argl		fixed bin,
	code		fixed bin (35),
	arg		char (argl) based (argp),
	brief		bit (1),
	ioa_		entry options (variable);

dcl	(addr, null, divide, sum, lbound, hbound, baseno, float, unspec, fixed, rel, max)
			builtin;

/* automatic */

dcl	sli		fixed bin,
	(alloc_count, free_count)
			fixed bin,
	global_storage_system_data_pointer
			ptr,
	vst		char (1),
	end_vs		bit (1),
	sgt		char (10),
	n_map_ent		fixed bin,
	i		fixed bin,
	rangex		fixed bin,
	rx		fixed bin,
	upper		fixed bin (18),
	range_break	fixed bin;

/* include files */

%include apl_number_data;
%include apl_ws_info;
%include apl_storage_system_data;

	if ws_info_ptr = null
	then do;
		call com_err_ (0, "apl_storage_meters", "No active workspace in this process.");
		return;
	     end;
	else if unspec (ws_info_ptr) = ""b		/* blasted type-6 links do this */
	then do;
		call com_err_ (0, "apl_storage_meters", "Search rules did not find apl_static_.");
		return;
	     end;

	call cu_$arg_ptr (1, argp, argl, code);
	if code ^= 0
	then brief = "0"b;
	else if arg = "-bf"
	then brief = "1"b;
	else if arg = "-brief"
	then brief = "1"b;
	else do;
		call com_err_ (error_table_$badopt, "apl_storage_meters", "^a", arg);
		return;
	     end;

dcl	1 lrange		(range_break - 1) aligned based (addr (metric.range)) like metric.range;
dcl	1 brange		(hbound (metric.range, 1) - range_break + 1) aligned
			based (addr (metric.range (range_break))) like metric.range;


	global_storage_system_data_pointer = ws_info.alloc_free_info_ptr;

	if metric.big_seg_balance.count ^= 0
	then call ioa_
		(
		"big-bead seg_maps balanced ^d times, avg time = ^.3f, avg map size after = ^d,
	^d beads had to be thrown away, avg ^d words^/"
		, metric.big_seg_balance.count,
		divide (float (metric.big_seg_balance.time_spent_balancing), 1e3 * metric.big_seg_balance.count, 27),
		divide (metric.big_seg_balance.space_left, metric.big_seg_balance.count, 18, 0),
		metric.big_seg_balance.thrown_away,
		divide (metric.big_seg_balance.amt_thrown_away, max (1, metric.big_seg_balance.thrown_away), 18, 0));

	if metric.little_seg_balance.count ^= 0
	then call ioa_
		(
		"little-bead seg_maps balanced ^d times, avg time = ^.3f, avg map size after = ^d,
	^d beads had to be thrown away, avg ^d words^/"
		, metric.little_seg_balance.count,
		divide (float (metric.little_seg_balance.time_spent_balancing), 1e3 * metric.little_seg_balance.count, 27)
		, divide (metric.little_seg_balance.space_left, metric.little_seg_balance.count, 18, 0),
		metric.little_seg_balance.thrown_away,
		divide (metric.little_seg_balance.amt_thrown_away, max (1, metric.little_seg_balance.thrown_away), 18, 0))
		;

	if get_next_value_stack_seg_calls ^= 0
	then call ioa_ ("value stack crossed segments ^d times^/", get_next_value_stack_seg_calls);

	if copy_apl_value_calls ^= 0
	then call ioa_ ("^d value beads copied into heap, avg time ^.3f milliseconds per bead^/", copy_apl_value_calls,
		divide (float (copy_apl_value_time), 1e3 * copy_apl_value_calls, 27));

	if brief
	then return;

	call ioa_ (
	     "Alloc/Free Meters^/Size range    Nfreed Nmapped Avg ms Avg size Nalloc Nfm end Nnew seg Avg ms Avg size");

	do rx = lbound (metric.range, 1) to hbound (metric.range, 1);
	     upper = 2 * range (rx).size - 1;
	     if range (rx).free_count ^= 0
	     then free_count = range (rx).free_count;
	     else free_count = 1;

	     if range (rx).alloc_count ^= 0
	     then alloc_count = range (rx).alloc_count;
	     else alloc_count = 1;

	     if (range (rx).free_count ^= 0) | (range (rx).alloc_count ^= 0)
	     then call ioa_ ("^6d-^6d ^6d  ^6d ^6.3f   ^6d ^6d  ^6d   ^6d ^6.3f ^6d", range (rx).size, upper,
		     range (rx).free_count, range (rx).map_free_count, float (range (rx).free_time) / (1e3 * free_count),
		     divide (range (rx).words_freed, free_count, 18, 0), range (rx).alloc_count,
		     range (rx).alloc_end_count, range (rx).alloc_new_count,
		     float (range (rx).alloc_time) / (1e3 * alloc_count),
		     divide (range (rx).words_alloced, alloc_count, 18, 0));
	end;


	do range_break = lbound (metric.range, 1) to hbound (metric.range, 1);
	     if metric.range (range_break).size = 64	/* BreakSize in apl_storage_mngr_.pl1 */
	     then go to g0001;
	end;

g0001:
	call ioa_ ("Summaries:^/^6d-^6d ^6d  ^6d ^6.3f   ^6d ^6d  ^6d   ^6d ^6.3f ^6d", 0, 63,
	     fixed (sum (lrange.free_count), 35), sum (lrange.map_free_count),
	     divide (float (sum (lrange.free_time)), max (sum (lrange.free_count), 1) * 1e3, 27),
	     divide (sum (lrange.words_freed), max (sum (lrange.free_count), 1), 18, 0),
	     fixed (sum (lrange.alloc_count), 35), sum (lrange.alloc_end_count), sum (lrange.alloc_new_count),
	     divide (float (sum (lrange.alloc_time)), max (sum (lrange.alloc_count), 1) * 1e3, 27),
	     divide (sum (lrange.words_alloced), max (sum (lrange.alloc_count), 1), 18, 0));

	call ioa_ ("^6d-^6d ^6d  ^6d ^6.3f   ^6d ^6d  ^6d   ^6d ^6.3f ^6d", 64, 262143, fixed (sum (brange.free_count), 35),
	     sum (brange.map_free_count),
	     divide (float (sum (brange.free_time)), max (sum (brange.free_count), 1) * 1e3, 27),
	     divide (sum (brange.words_freed), max (sum (brange.free_count), 1), 18, 0),
	     fixed (sum (brange.alloc_count), 35), sum (brange.alloc_end_count), sum (brange.alloc_new_count),
	     divide (float (sum (brange.alloc_time)), max (sum (brange.alloc_count), 1) * 1e3, 27),
	     divide (sum (brange.words_alloced), max (sum (brange.alloc_count), 1), 18, 0));

	call ioa_ ("^6d-^6d ^6d  ^6d ^6.3f   ^6d ^6d  ^6d   ^6d ^6.3f ^6d", 0, 262143, fixed (sum (range.free_count), 35),
	     sum (range.map_free_count), divide (float (sum (range.free_time)), max (sum (range.free_count), 1) * 1e3, 27),
	     divide (sum (range.words_freed), max (sum (range.free_count), 1), 18, 0), fixed (sum (range.alloc_count), 35),
	     sum (range.alloc_end_count), sum (range.alloc_new_count),
	     divide (float (sum (range.alloc_time)), max (sum (range.alloc_count), 1) * 1e3, 27),
	     divide (sum (range.words_alloced), max (sum (range.alloc_count), 1), 18, 0));
						/* whew!! */

     end;
