/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_pic_val_comp.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 04/13/778 by FCH, [3.0-1], fig con in level 88 item */
/* Modified since version 3.0 */

/* format: style3 */
cobol_pic_val_comp:
     proc (dn_ptr, veptr) returns (fixed bin);

/*This procedure compares the data attributes in the type 9 token
  addressed by dn_ptr against the attributes of the value in the
  initial value extension addressed by veptr*/



	status = 0;

	if ^dn_ptr -> data_name.numeric
	then do;

/*non_numeric dn*/

		if init.numeric			/* [3.0-1] */
		then do;				/*non-numeric dn, numeric value*/
			status = 185;
		     end;

		else if init.fig_con & init.non_numeric /* [3.0-1] */
		then do;
			substr (alpha.type, 6, 2) = substr (a_init.type, 6, 2);
						/* [3.0-1] */
			substr (veptr -> based_char_string, 1, 9) = /* [3.0-1] */ addr (alpha) -> alpha_string;
						/* [3.0-1] */

			status = -1;		/* [3.0-1] */


		     end;				/* [3.0-1] */

		else if init.non_numeric		/* [3.0-1] */
						/*alpha init val or ALL literal*/
		then if dn_ptr -> data_name.item_length < veptr -> a_init.length
		     then status = 182;

	     end;

	else do;

		if init.numeric & ^init.fig_con	/* [3.0-1] */
		then do;

/*numeric dn, numeric lit val*/

			if dn_ptr -> data_name.places_left < veptr -> n_init.places_left
			then do;
				if dn_ptr -> data_name.places_left >= 0
				then do;
					status = 182;
					go to retrn;
				     end;
			     end;

			if dn_ptr -> data_name.places_right < veptr -> n_init.places_right
			then do;
				if dn_ptr -> data_name.places_right >= 0
				then do;
					status = 182;
					go to retrn;
				     end;
			     end;

			if veptr -> n_init.sign ^= " "
			then do;
				if (^dn_ptr -> data_name.bin_18 | ^dn_ptr -> data_name.bin_36
				     | ^dn_ptr -> data_name.bin_16 | ^dn_ptr -> data_name.bin_32)
				     & dn_ptr -> data_name.item_signed = "0"b
				then do;

/* warning: pic no sign value sign */

					status = 211;
					go to retrn;
				     end;

			     end;

		     end;

/*numeric dn, val not numeric lit*/

		else if init.fig_con		/* [3.0-1] */
		then do;				/*val is fig con*/

			if substr (veptr -> a_init.info, 2, 7) ^= "0000001"b
			then status = 184;		/*numeric item has non-numeric value*/

/*val is fig con zero*/
/*change alphanumeric initial value extension to numeric*/

			else do;			/* [3.0-1] */
				substr (zero_ext.type, 6, 2) = substr (a_init.type, 6, 2);

				substr (veptr -> based_char_string, 1, 21) = addr (zero_ext) -> zero_ext_string;

/*tell caller that token needs update to Name Table*/

				status = -1;
			     end;
		     end;

/*numeric dn, val not numeric lit or fig con zero*/

		else if init.non_numeric		/* [3.0-1] */
						/*numeric dn, alphanumeric literal value*/
		then status = 184;

	     end;

retrn:
	return (status);





declare	dn_ptr		ptr,
	veptr		ptr;			/*input*/
%include cobol_type9;




declare	1 init		based (veptr),		/* [3.0-1] */
	  2 numeric	bit (1),			/* [3.0-1] */
	  2 non_numeric	bit (1),			/* [3.0-1] */
	  2 fig_con	bit (1),			/* [3.0-1] */
	  2 all_lit	bit (1),			/* [3.0-1] */
	  2 single	bit (1),			/* [3.0-1] */
	  2 thru1		bit (1),			/* [3.0-1] */
	  2 thru2		bit (1),			/* [3.0-1] */
	  2 filler	bit (1);			/* [3.0-1] */

declare	1 a_init		based (veptr),
	  2 type		bit (8),
	  2 info		bit (8),
	  2 length	fixed bin,
	  2 string	char (0 refer (a_init.length));

declare	1 n_init		based (veptr),
	  2 type		bit (8),
	  2 info		bit (8),
	  2 sign		char (1),
	  2 expsign	char (1),
	  2 explaces	fixed bin,
	  2 places_left	fixed bin,
	  2 places_right	fixed bin,
	  2 places	fixed bin,
	  2 string	char (0 refer (n_init.places));

declare	based_char_string	char (1000) based;
declare	zero_ext_constant	fixed bin internal static init (21);

declare	zero_ext_string	char (21) based;
declare	alpha_string	char (9) based;		/* [3.0-1] */

declare	1 zero_ext	internal static,
	  2 type		bit (8) init ("10000000"b),
	  2 info		bit (8) init ("00000000"b),
	  2 sign		char (1) init (" "),
	  2 expsign	char (1) init (" "),
	  2 explaces	fixed bin init (0),
	  2 places_left	fixed bin init (1),
	  2 places_right	fixed bin init (0),
	  2 places	fixed bin init (1),
	  2 string	char (1) init ("0");

declare	1 alpha		static internal,		/* [3.0-1] */
	  2 type		bit (8) init ("0"b),	/* [3.0-1] */
	  2 info		bit (8) init ("0"b),	/* [3.0-1] */
	  2 length	fixed bin init (1),		/* [3.0-1] */
	  2 string	char (1) init ("0");	/* [3.0-1] */

declare	tempbin		fixed bin;
declare	status		fixed bin;		/*output: zero or diagnostic number*/
declare	addr		builtin;
declare	substr		builtin;

     end cobol_pic_val_comp;
