/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_pd_code.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 01/12/78 by FCH, [3.0-1], sort statement bug */
/* Changes made since version 3.0 */

/* format: style3 */
cobol_pd_code:
     proc (env_ptr);

initialize:
     entry (env_ptr);

	p = env_ptr;
	q = args.arg_6;

	data.end_stmt_ptr = arg_1;
	end_stmt_size = size (end_stmt_ptr -> end_stmt);
	end_stmt_ptr -> end_stmt.size = 4 * end_stmt_size;
	end_stmt_ptr -> end_stmt.type = 19;

	data.eos_ptr = arg_2;
	eos_size = size (eos_ptr -> end_stmt);
	eos_ptr -> end_stmt.size = 4 * eos_size;
	eos_ptr -> end_stmt.type = 19;

	data.proc_ref_ptr = arg_3;
	proc_ref_size = size (proc_ref_ptr -> proc_ref);
	proc_ref_ptr -> proc_ref.size = 4 * proc_ref_size;
	proc_ref_ptr -> proc_ref.type = 18;

	data.arg_ptr = arg_4;
	data.DATA_ptr = args.arg_6;

	data.option_ptr = arg_5;

	first_use = 0;

	return;

code:
     entry;

	p = data.arg_ptr;
	q = data.DATA_ptr;

	if first_use = 0
	then call code_alloc;

	go to G (option_ptr -> mode);

G (1):						/* sort_statement, giving file */
	if ^first_sort
	then call sort_alloc;

	call sort_merge_giving (49);
	return;

G (2):						/* sort statement, using file */
	call sort_using;
	return;

G (3):						/* sort procedure, p1 thru p2 */
	call sort_proc (arg_1, arg_2, 49, 91);
	return;

G (4):						/* sort procedure, p1 thru p1 */
	call sort_proc (arg_1, arg_1, 49, 91);
	return;

G (5):						/* alter */
	call alter_proc;
	return;

G (6):						/* cancel */
	call cancel_proc;
	return;

G (7):						/* initiate */
	call initiate_proc;
	return;

G (8):						/* close eos */
	call close_eos_proc;
	return;

G (9):						/* OPEN EOS */
	call open_eos_proc;
	return;

G (10):						/* OPEN EOS */
	call open_eos_proc;

	end_stmt_ptr -> end_stmt.d = "01"b;

	return;

G (11):						/* OPEN EOS */
	call open_eos_proc;

	end_stmt_ptr -> end_stmt.d = "10"b;

	return;

G (12):						/* OPEN EXT EOS */
	call open_ext_proc;

	return;

G (13):						/* SUSPEND */
	call suspend_proc;

	return;

G (14):						/* TERMINATE */
	call terminate_proc;

	return;

G (15):						/* THEN */
	call then_proc;

	return;

G (16):						/* GO TO */
	call go_proc;

	return;

G (17):						/* add */
	end_stmt_ptr -> end_stmt.h = end_stmt_ptr -> end_stmt.h + 1;

	call emit_code (arg_1);

	return;

G (18):						/* SORT EOS */
	call sort_eos_proc;

	return;

G (19):						/* SEARCH EOS */
	call search_eos_proc;

	return;

G (20):						/* SEARCH EOS4 */
	if ^first_search
	then call search_alloc;

	end_stmt_ptr -> end_stmt.e = 4;

	call emit_code (end_stmt_ptr);
	return;

G (21):						/* SEARCH EOS4 */
	if ^first_search
	then call search_alloc;

	end_stmt_ptr -> end_stmt.b = "1"b;
	end_stmt_ptr -> end_stmt.e = 4;

	call emit_code (end_stmt_ptr);
	return;

G (22):						/* SEARCH EOS2 */
	if ^first_search
	then call search_alloc;

	end_stmt_ptr -> end_stmt.c = "1"b;
	end_stmt_ptr -> end_stmt.verb = 26;
	end_stmt_ptr -> end_stmt.e = 2;

	call emit_code (end_stmt_ptr);
	return;

G (23):						/* SEARCH EOS2 */
	if ^first_search
	then call search_alloc;

	end_stmt_ptr -> end_stmt.verb = 26;
	end_stmt_ptr -> end_stmt.e = 2;
	end_stmt_ptr -> end_stmt.b = "1"b;

	call emit_code (end_stmt_ptr);
	return;

G (24):						/* SEARCH EOS2 */
	if ^first_search
	then call search_alloc;

	bit3 = end_stmt_ptr -> end_stmt.a;
	call set_end (26);

	end_stmt_ptr -> end_stmt.a = bit3;
	end_stmt_ptr -> end_stmt.e = 2;

	call emit_code (end_stmt_ptr);
	return;

G (25):						/* SEARCH EOS3 */
	if ^first_search
	then call search_alloc;

	call set_end (26);

	end_stmt_ptr -> end_stmt.a = "001"b;
	end_stmt_ptr -> end_stmt.e = 3;

	call emit_code (end_stmt_ptr);
	return;

G (26):						/* SEARCH EOS3 */
	if ^first_search
	then call search_alloc;

	call set_end (26);

	end_stmt_ptr -> end_stmt.b = "1"b;
	end_stmt_ptr -> end_stmt.a = "001"b;
	end_stmt_ptr -> end_stmt.e = 3;

	call emit_code (end_stmt_ptr);
	return;

G (27):						/* SEARCH */
	if ^first_search
	then call search_alloc;

	end_stmt_ptr -> end_stmt.verb = 26;
	end_stmt_ptr -> end_stmt.e = 2;
	end_stmt_ptr -> end_stmt.b = "1"b;
	end_stmt_ptr -> end_stmt.c = "1"b;


	call emit_code (end_stmt_ptr);
	return;

G (28):						/* merge_giving */
	if ^first_merge
	then call merge_alloc;

	call sort_merge_giving (15);
	return;

G (29):						/* default device, accept */
	if fixed_common.accept_device = 0
	then end_stmt_ptr -> end_stmt.e = 10;		/* sysin */
	else end_stmt_ptr -> end_stmt.e = 9;		/* console */

	call emit_code (end_stmt_ptr);

	return;

G (30):						/* default device, display */
	if fixed_common.display_device = 0
	then end_stmt_ptr -> end_stmt.a = "001"b;	/* sysout */
	else end_stmt_ptr -> end_stmt.a = "000"b;	/* console */

	call emit_code (end_stmt_ptr);

	return;

G (31):						/* divide */
	call emit_code (arg_1);

	end_stmt_ptr -> end_stmt.h = end_stmt_ptr -> end_stmt.h + 1;

	return;

G (32):						/* compute */
	call emit_code (arg_1);

	return;

G (33):
	call emit_code (arg_1);

	end_stmt_ptr -> end_stmt.e = end_stmt_ptr -> end_stmt.e + 1;

	return;

G (34):
	if end_stmt_ptr -> end_stmt.a = "001"b
	then end_stmt_ptr -> end_stmt.a = "011"b;
	else end_stmt_ptr -> end_stmt.a = "100"b;

	call emit_code (arg_1);

	return;

G (35):
	proc_ref_ptr -> proc_ref.type = 18;

	call emit_code (arg_1);

	call emit_code (end_stmt_ptr);

	return;

G (36):
	end_stmt_ptr -> end_stmt.a = "000"b;

	call emit_code (arg_1);

	return;

G (37):
	call emit_code (arg_1);

	call emit_code (end_stmt_ptr);

	return;

G (38):
	end_stmt_ptr -> end_stmt.b = "1"b;

	call emit_code (arg_1);

	call emit_code (end_stmt_ptr);

	return;

G (39):
	call sort_proc (arg_1, arg_2, 49, 90);

	return;

G (40):
	call sort_proc (arg_1, arg_1, 49, 90);

	return;

G (41):
	if ^first_merge
	then call merge_alloc;

	if end_stmt_ptr -> end_stmt.d = "10"b
	then do;
		call set_end (15);
		end_stmt_ptr -> end_stmt.d = "10"b;
	     end;
	else call set_end (15);

	end_stmt_ptr -> end_stmt.e = arg_1 -> mode;
	end_stmt_ptr -> end_stmt.i = arg_2 -> mode;

	call emit_code (end_stmt_ptr);

	call set_end (15);

	end_stmt_ptr -> end_stmt.h = 91;

	call emit_code (end_stmt_ptr);

	return;

G (42):
	call emit_code (arg_1);

	call emit_code (arg_2);

	call set_end (15);
	end_stmt_ptr -> end_stmt.h = 92;

	call emit_code (end_stmt_ptr);

	end_stmt_ptr -> end_stmt.h = 90;

	call emit_code (end_stmt_ptr);

	return;

G (43):
	call sort_proc (arg_1, arg_1, 15, 90);

	return;

G (44):
	call sort_proc (arg_1, arg_2, 15, 90);

	return;

/* CODE GENERATION PROCEDURES */

sort_merge_giving:
     proc (verb_num);

declare	verb_num		fixed bin;

	call emit_code (open_ptr);			/* OPEN */

	call emit_code (arg_1);			/* FILENAME */

	call set_end (19);				/* EOS */

	end_stmt_ptr -> end_stmt.d = "01"b;

	call emit_code (end_stmt_ptr);

	proc_ref_ptr -> proc_ref.type = 30;		/* PROCDEF */
	proc_ref_ptr -> proc_ref.proc_num = arg_2 -> spec_tag_counter - 1;

	call emit_code (proc_ref_ptr);

	call emit_code (return_ptr);			/* RETURN */

	call emit_code (arg_3);			/* FILENAME */

	call emit_code (arg_4);			/* RECORDNAME */

	end_stmt_ptr -> end_stmt.verb = 25;		/* EOS */
	end_stmt_ptr -> end_stmt.d = "00"b;
	end_stmt_ptr -> end_stmt.b = "1"b;		/*	end_stmt_ptr -> end_stmt.c = "1"b;	*/
						/*[3.0-1]*/

	call emit_code (end_stmt_ptr);

	eos_ptr -> end_stmt.verb = 13;		/* GOTOPROC */
	eos_ptr -> end_stmt.e = 63;
	eos_ptr -> end_stmt.h = arg_2 -> spec_tag_counter;

	call emit_code (eos_ptr);

	end_stmt_ptr -> end_stmt.verb = 3;		/* EOSATEND */
	end_stmt_ptr -> end_stmt.b = "0"b;
	end_stmt_ptr -> end_stmt.c = "0"b;

	call emit_code (end_stmt_ptr);

	call emit_code (write_ptr);			/* WRITE */

	call emit_code (arg_4);			/* RECORDNAME */

	end_stmt_ptr -> end_stmt.verb = 38;		/* EOS */

	call emit_code (end_stmt_ptr);

	eos_ptr -> end_stmt.h = arg_2 -> spec_tag_counter - 1;
						/* GOTOPROC */
	eos_ptr -> end_stmt.verb = 13;
	eos_ptr -> end_stmt.e = 63;

	call emit_code (eos_ptr);

	proc_ref_ptr -> proc_ref.type = 30;		/* PROCDEF */
	proc_ref_ptr -> proc_ref.proc_num = arg_2 -> spec_tag_counter;

	call emit_code (proc_ref_ptr);

	call emit_code (close_ptr);			/* CLOSE */

	call emit_code (arg_1);			/* FILENAME */

	end_stmt_ptr -> end_stmt.verb = 8;		/* EOS */

	call emit_code (end_stmt_ptr);

	end_stmt_ptr -> end_stmt.verb = verb_num;	/* EOS90 */
	end_stmt_ptr -> end_stmt.h = 90;

	call emit_code (end_stmt_ptr);

     end;

sort_using:
     proc;

	if ^first_sort
	then call sort_alloc;

	call emit_code (open_ptr);			/* OPEN */

	call emit_code (arg_1);			/* FILENAME */

	call set_end (19);

	call emit_code (end_stmt_ptr);

	proc_ref_ptr -> proc_ref.type = 30;		/* PROCDEF */
	proc_ref_ptr -> proc_ref.proc_num = arg_2 -> spec_tag_counter - 1;

	call emit_code (proc_ref_ptr);

	call emit_code (read_ptr);			/* READ */

	call emit_code (arg_1);			/* FILENAME */

	end_stmt_ptr -> end_stmt.verb = 21;		/* EOS */
	end_stmt_ptr -> end_stmt.a = "001"b;

	call emit_code (end_stmt_ptr);

	eos_ptr -> end_stmt.verb = 13;		/* GOTOPROC */
	eos_ptr -> end_stmt.e = 63;
	eos_ptr -> end_stmt.h = arg_2 -> spec_tag_counter;

	call emit_code (eos_ptr);

	end_stmt_ptr -> end_stmt.verb = 3;		/* EOSATEND */
	end_stmt_ptr -> end_stmt.a = "000"b;

	call emit_code (end_stmt_ptr);

	call emit_code (release_ptr);			/* RELEASE */

	call emit_code (arg_3);			/* SORTREC */

	call emit_code (arg_4);			/* FILEREC */

	end_stmt_ptr -> end_stmt.verb = 24;		/* EOS */
	end_stmt_ptr -> end_stmt.b = "1"b;		/*	end_stmt_ptr -> end_stmt.c = "1"b;	*/
						/*[3.0-1]*/

	call emit_code (end_stmt_ptr);

	eos_ptr -> end_stmt.verb = 13;		/* GOTOPROC */
	eos_ptr -> end_stmt.e = 63;
	eos_ptr -> end_stmt.h = arg_2 -> spec_tag_counter - 1;

	call emit_code (eos_ptr);

	proc_ref_ptr -> proc_ref.type = 30;		/* PROCDEF */
	proc_ref_ptr -> proc_ref.proc_num = arg_2 -> spec_tag_counter;

	call emit_code (proc_ref_ptr);

	call emit_code (close_ptr);			/* CLOSE */

	call emit_code (arg_1);			/* FILENAME */

	end_stmt_ptr -> end_stmt.verb = 8;		/* EOS */
	end_stmt_ptr -> end_stmt.b = "0"b;
	end_stmt_ptr -> end_stmt.c = "0"b;

	call emit_code (end_stmt_ptr);

     end;

sort_proc:
     proc (ptr_1, ptr_2, val1, val2);

declare	(ptr_1, ptr_2)	ptr;
declare	(val1, val2)	fixed bin;

	if ^first_sort
	then call sort_alloc;

	call emit_code (perform_ptr);			/* PERFORM */

	call emit_code (ptr_1);			/* PROCNAME */

	call emit_code (ptr_2);			/* PROCNAME */

	call set_end (20);

	end_stmt_ptr -> end_stmt.h = 1;

	call emit_code (end_stmt_ptr);

	end_stmt_ptr -> end_stmt.verb = val1;		/* EOS)  */
	end_stmt_ptr -> end_stmt.h = val2;

	call emit_code (end_stmt_ptr);

     end;

alter_proc:
     proc;

	if ^first_alter
	then call alter_alloc;

	addr (alter_ptr -> reserved_word.verb) -> bit36 = "1001001000000000001"b;

	call emit_code (alter_ptr);

     end;

cancel_proc:
     proc;

	if ^first_cancel
	then call cancel_alloc;

	call emit_code (cancel_ptr);

     end;

initiate_proc:
     proc;

	if ^first_initiate
	then call initiate_alloc;

	call emit_code (initiate_ptr);

     end;

close_eos_proc:
     proc;

	if ^first_close
	then call close_alloc;

	end_stmt_ptr -> end_stmt.a = "001"b;		/* EOS */

	call emit_code (end_stmt_ptr);

	alter_ptr -> reserved_word.key = 8;
	addr (alter_ptr -> reserved_word.verb) -> bit36 = "10010010000000000011"b;

	call set_end (0);

	addr (end_stmt_ptr -> end_stmt.a) -> bit18 = "0"b;

	end_stmt_ptr -> end_stmt.verb = alter_ptr -> reserved_word.key;

	call emit_code (alter_ptr);

     end;

set_end:
     proc (num);

declare	num		fixed bin;

	end_stmt_ptr -> end_stmt.verb = num;
	end_stmt_ptr -> end_stmt.e = 0;
	end_stmt_ptr -> end_stmt.h = 0;
	end_stmt_ptr -> end_stmt.i = 0;
	end_stmt_ptr -> end_stmt.j = 0;

	addr (end_stmt_ptr -> end_stmt.a) -> bit18 = "0"b;

     end;

suspend_proc:
     proc;

	if ^first_suspend
	then call suspend_alloc;

	call emit_code (eos_ptr);

	call emit_code (suspend_ptr);

	call set_end (35);

     end;

terminate_proc:
     proc;

	if ^first_terminate
	then call terminate_alloc;

	call emit_code (terminate_ptr);

     end;

then_proc:
     proc;

	if ^first_then
	then call then_alloc;

	call emit_code (then_ptr);

     end;

go_proc:
     proc;

	if ^first_go
	then call go_alloc;

	call set_end (go_ptr -> reserved_word.key);

	end_stmt_ptr -> end_stmt.e = 2;

	call emit_code (go_ptr);

	call emit_code (arg_1);

	call emit_code (arg_2);

     end;

open_eos_proc:
     proc;

	if ^first_open
	then call open_alloc;

	end_stmt_ptr -> end_stmt.a = "001"b;

	call emit_code (end_stmt_ptr);

	call OPEN;

	call set_end (19);

     end;

OPEN:
     proc;

	addr (open_ptr -> reserved_word.verb) -> bit36 = "10010010000000000011"b;

	call emit_code (open_ptr);

     end;

open_ext_proc:
     proc;

	if ^first_open
	then call open_alloc;

	end_stmt_ptr -> end_stmt.a = "001"b;

	call emit_code (end_stmt_ptr);

	call OPEN;

	call set_end (19);

	end_stmt_ptr -> end_stmt.d = "11"b;

     end;

sort_eos_proc:
     proc;

	if ^first_sort
	then call sort_alloc;

	call set_end (49);

	end_stmt_ptr -> end_stmt.h = 91;

	call emit_code (end_stmt_ptr);

     end;

search_eos_proc:
     proc;

	if ^first_search
	then call search_alloc;

	call set_end (26);

	end_stmt_ptr -> end_stmt.e = 3;

	call emit_code (end_stmt_ptr);

     end;

/* EMIT TOKEN */

emit_code:
     proc (code_loc);

declare	code_loc		ptr;

declare	st		bit (32);

declare	1 record		based (code_loc),
	  2 code_size	fixed bin;

	call cobol_swf_put (cobol_pdofp, st, code_loc, code_size);

     end;


/* FORM RESERVED WORD TOKEN */


res_word:
     proc (key, class);

declare	key		fixed bin,
	class		bit (36);

	call alloc (reserved_word_size);

	area_ptr -> reserved_word.size = reserved_byte_size;
	area_ptr -> reserved_word.type = 1;
	area_ptr -> reserved_word.key = key;
	addr (area_ptr -> reserved_word.verb) -> bit36 = class;

     end;

/* ALLOCATE SPACE IN CODE AREA */


alloc:
     proc (size);

declare	size		fixed bin;
declare	(i, j)		fixed bin;

	area_ptr = addr (code_area (code_area_loc + 1));
	j = code_area_loc;

	do i = 1 by 1 to size;

	     code_area (j + i) = 0;

	end;

	code_area_loc = code_area_loc + size;

     end;

/* INITIALIZATION PROCEDURES */


code_alloc:
     proc;

declare	i		fixed bin;

	first_use = 1;

	ind_ptr = addr (data.indicators);
	data.indicators = "0"b;

	code_area_loc = 0;

	do i = 1 by 1 to 100;

	     DATA.ptr (i) = null ();

	end;

	ptr_area_ptr = addr (DATA.ptr (1));

	reserved_word_size = size (ptr_area_ptr -> reserved_word);

	reserved_byte_size = reserved_word_size * 4;

     end;

alloc_test:
     proc (mode);

declare	mode		fixed bin;

	go to A (mode);

A (1):
	return;

A (2):
	if open_ptr = null ()
	then do;
		call res_word (19, "1"b);
		open_ptr = area_ptr;
	     end;

	return;


A (3):
	if close_ptr = null ()
	then do;
		call res_word (8, "1"b);
		close_ptr = area_ptr;
	     end;

	return;


A (4):
	if return_ptr = null ()
	then do;
		call res_word (25, "1"b);
		return_ptr = area_ptr;
	     end;

	return;


A (5):
	if write_ptr = null ()
	then do;
		call res_word (38, "1"b);
		write_ptr = area_ptr;
	     end;

	return;


A (6):
	if read_ptr = null ()
	then do;
		call res_word (21, "1"b);
		read_ptr = area_ptr;
	     end;

	return;


A (7):
	if release_ptr = null ()
	then do;
		call res_word (24, "1"b);
		release_ptr = area_ptr;
	     end;

	return;

A (8):
	return;

A (9):
	return;

A (10):
	if perform_ptr = null ()
	then do;
		call res_word (20, "1"b);
		perform_ptr = area_ptr;
	     end;

A (11):
	if alter_ptr = null ()
	then do;
		call res_word (4, "0"b);
		alter_ptr = area_ptr;
	     end;

	return;

A (12):
	if cancel_ptr = null ()
	then do;
		call res_word (7, "10010010000000000011"b);
		cancel_ptr = area_ptr;
	     end;

	return;

A (13):
	if initiate_ptr = null ()
	then do;
		call res_word (16, "0"b);
		initiate_ptr = area_ptr;
	     end;

	return;

A (14):
	if suspend_ptr = null ()
	then do;
		call res_word (35, "0"b);
		suspend_ptr = area_ptr;
	     end;

	return;

A (15):
	if terminate_ptr = null ()
	then do;
		call res_word (36, "0"b);
		terminate_ptr = area_ptr;
	     end;

	return;

     end;

A (16):
	if then_ptr = null ()
	then do;
		call res_word (194, "0"b);
		then_ptr = area_ptr;
	     end;

	return;

A (17):
	if go_ptr = null ()
	then do;
		call res_word (14, "01001001000000000001"b);
		go_ptr = area_ptr;
	     end;

	return;

sort_alloc:
     proc;

	call sort_merge_alloc;

	first_sort = "1"b;

     end;

sort_merge_alloc:
     proc;


	call alloc_test (2);
	call alloc_test (3);
	call alloc_test (4);
	call alloc_test (5);
	call alloc_test (6);
	call alloc_test (7);
	call alloc_test (10);


     end;

merge_alloc:
     proc;

	call sort_merge_alloc;

	first_merge = "1"b;

     end;

alter_alloc:
     proc;

	call alloc_test (11);
	first_alter = "1"b;

     end;

cancel_alloc:
     proc;

	call alloc_test (12);
	first_cancel = "1"b;

     end;

initiate_alloc:
     proc;

	call alloc_test (13);
	first_initiate = "1"b;

     end;

close_alloc:
     proc;

	call alloc_test (11);
	first_close = "1"b;

     end;

open_alloc:
     proc;

	call alloc_test (2);
	first_open = "1"b;

     end;

suspend_alloc:
     proc;

	call alloc_test (14);
	first_suspend = "1"b;

     end;

terminate_alloc:
     proc;

	call alloc_test (15);
	first_terminate = "1"b;

     end;

then_alloc:
     proc;

	call alloc_test (16);
	first_then = "1"b;

     end;

go_alloc:
     proc;

	call alloc_test (17);
	first_go = "1"b;

     end;

search_alloc:
     proc;

	first_search = "1"b;

     end;

declare	(addr, size, null)	builtin;

declare	(p, q, env_ptr)	ptr;

declare	(proc_ref_size, end_stmt_size, eos_size)
			fixed bin;

declare	cobol_swf_put	entry (ptr, bit (32), ptr, fixed bin);


declare	1 data		static internal,
	  2 first_use	fixed bin,
	  2 indicators	bit (72),
	  2 reserved_word_size
			fixed bin,
	  2 reserved_byte_size
			fixed bin,
	  2 area_ptr	ptr,
	  2 ptr_area_ptr	ptr,
	  2 end_stmt_ptr	ptr,
	  2 option_ptr	ptr,
	  2 arg_ptr	ptr,
	  2 eos_ptr	ptr,
	  2 proc_ref_ptr	ptr,
	  2 ind_ptr	ptr,
	  2 DATA_ptr	ptr,
	  2 code_area_loc	fixed bin;

declare	bit3		bit (3);

declare	1 args		based (p),
	  2 arg_1		ptr,
	  2 arg_2		ptr,
	  2 arg_3		ptr,
	  2 arg_4		ptr,
	  2 arg_5		ptr,
	  2 arg_6		ptr;


declare	1 DATA		based (q),
	  2 ptr		(100) ptr,
	  2 code_area	(5000) fixed bin (35);

declare	1 ptr_area	based (ptr_area_ptr),
	  2 open_ptr	ptr,
	  2 close_ptr	ptr,
	  2 return_ptr	ptr,
	  2 write_ptr	ptr,
	  2 read_ptr	ptr,
	  2 release_ptr	ptr,
	  2 perform_ptr	ptr,
	  2 alter_ptr	ptr,
	  2 cancel_ptr	ptr,
	  2 initiate_ptr	ptr,
	  2 suspend_ptr	ptr,
	  2 terminate_ptr	ptr,
	  2 then_ptr	ptr,
	  2 go_ptr	ptr;

declare	1 indicators	based (ind_ptr),
	  2 first_sort	bit (1),
	  2 first_alter	bit (1),
	  2 first_close	bit (1),
	  2 first_open	bit (1),
	  2 first_suspend	bit (1),
	  2 first_terminate bit (1),
	  2 first_then	bit (1),
	  2 first_go	bit (1),
	  2 first_search	bit (1),
	  2 first_initiate	bit (1),
	  2 first_cancel	bit (1),
	  2 first_merge	bit (1);

declare	bit18		bit (18) based;
declare	spec_tag_counter	fixed bin based;
declare	bit36		bit (36) based;
declare	mode		fixed bin based;


declare	1 reserved_word	based,
%include cobol_TYPE1;

declare	1 proc_ref	based,
%include cobol_TYPE18;

declare	1 end_stmt	based,
%include cobol_TYPE19;

%include cobol_ext_;

%include cobol_fixed_common;

     end;
