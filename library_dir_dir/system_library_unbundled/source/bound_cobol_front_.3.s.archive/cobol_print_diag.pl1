/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_print_diag.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 10/29/82 by FCH, [5.1-3], last diag was being suppressed, BUG542(phx13372) */
/* Modified on 12/28/81 by FCH, [5.1-2], print generated RW source line if diags, phx12121(BUG525) */
/* Modified on 11/25/81 by FCH, [5.1-1], add main prog to include file table, BUG519(phx11818) */
/* Modified on 09/01/81 by FCH, [5.0-1], check for eof while ignoring report writer lines, BUG498 */
/* Modified on 12/26/79 by MHD, [4.2-3], change to aid readability */
/* Modified on 12/06/79 by MHD, [4.2-2], set 1INX leveling message to high */
/* Modified on 11/20/79 by MHD, [4.2-1], check for eof when ignoring debug lines */
/* Modified on 10/18/79 by MHD, [4.1-1], deleted unused parameter */
/* Modified on 07/11/79 by FCH, [4.0-3], debug statement */
/* Modified on 04/09/78 by FCH, [4.0-2], [3.0-2] wiped out */
/* Modified on 02/26/79 by FCH, [4.0-1], option -levsv added */
/* Modified on 10/31/78 by RAL, [3.0-2], Added leveling from expand_cobol_source for listing */
/* Modified on 07/26/78 by RAL, [3.0-1], Corrected length of diag */
/* Modified since Version 3.0.     */







/* format: style3 */
cobol_print_diag:
     proc;


/* This program accepts as input a pointer to a source or diag token.  Information from the source token starts */
/* a stack, and all diags for that source line are added to the stack  in column number, diag number order. */
/* When a new source token is encountered, the stack is put out  as a source line, diag reference line and */
/* diags(if any), and the new source starts another stack.  The diags are looked up in a separate diag */
/* file, which is creates and maintained by a separate program ("dfile").  A diag may contain 1 parameter. */
/* Page headers are put out as required.  Any diags not associated with the current source line are put out */
/* immediatly after the line number and column number. */

/*	1	1NUC(1)		2	2NUC(3)
	3	1TBL(1)		4	2TBL(3)
	5	1SRT(3)		6	2SRT(4)
	7	1SEG(2)		8	2SEG(4)
	9	1LIB(2)		10	2LIB(4)
	11	1DEB(2)		12	2DEB(3)
	13	1IPC(2)		14	2IPC(3)
	15	1SEQ(1)		16	2SEQ(3)
	17	1REL(2)		18	2REL(3)
	19	1INX(4)		20	2INX(4)
	21	1RPW(4)		22	2RPW(4)
	23	1COM(3)		24	2COM(3)
	25	1EXT(5)		26	2EXT(5)
*/

declare	fm_name		(26) char (4)
			init ("1NUC", "2NUC", "1TBL", "2TBL", "1SRT", "2SRT", "1SEG", "2SEG", "1LIB", "2LIB",
			"1DEB", "2DEB", "1IPC", "2IPC", "1SEQ", "2SEQ", "1REL", "2REL", "1INX", "2INX", "1RPW",
			"2RPW", "1COM", "2COM", "1EXT", "2EXT");

declare	level_num		(26) fixed bin init (1, 3, 1, 3, 3, 4, 2, 4, 2, 4, 2, 3, 2, 3, 1, 3,
						/*[4.2-2]*/
			2, 3, 4, 4, 4, 4, 3, 3, 5, 5);



	pbuf_ptr = addr (p_buf);
	st_ptr = addr (status);

	do i = 1 to 8;
	     dno_run_index (i) = 0;
	end;

	dno_count = 0;
	t_flag = "0"b;
	run_no = 0;
	all_done = "0"b;
	eof_prt = "0"b;
	no_diag = "0"b;
	addr (new_line_character) -> bit9 = "000001010"b;

	i = 0;
	s = 1;

	call sort_diag;

	if no_diag & ^fixed_common.options.exs
	then return;

	d_ref = "0"b;
	l_first = null ();
	l_current = null ();
	ad_nl = addr (nl);
	ad_hof = addr (hof);

	d_string_ptr = addr (diag_file.diag_table (d_t_size + 1));

	if fixed_common.options.exs
	then do;

		call cobol_version$header (multics_hdr, multics_hdr_len);
		call cobol_put_rec (st, cobol_ext_$cobol_hfp, 0, addr (multics_hdr), multics_hdr_len);

	     end;

	i_limit = i;
	i = 1;

	do while ("1"b);

rd:
	     call cobol_swf_get (cobol_pfp, status, in_ptr, ln);

/*[4.2-1]*/
	     if status_right ^= "0"b			/*[4.2-1]*/
	     then eof_prt = "1"b;			/*[4.2-1]*/
	     else if substr (source.image, 1, 6) = "~~~~~~"
						/*[4.2-1]*/
	     then go to rd;				/*[5.1-3]*/
	     else if i <= i_limit			/*[5.1-2]*/
	     then if substr (source.image, 1, 6) = "::::::"
						/*[5.1-2]*/
		then if ^sev3 ()			/*[5.1-2]*/
		     then go to rd;			/*[5.1-2]*/
		     else ;			/*[5.1-2]*/
		else ;				/*[5.1-2]*/
	     else if substr (source.image, 1, 6) = "::::::"
						/*[5.1-2]*/
	     then go to rd;

	     call proc_source;

	     if status_right ^= "0"b
	     then do;
		     call close_it;
		     return;
		end;

/*[5.1-3]*/
	     if i <= i_limit
	     then if ptr_array (i) -> message.line = l_source.line
		then call proc_diag;

	end;					/* END MAIN LOOP */

sev3:
     proc returns (bit (1));

/*[5.1-2]*/
dcl	(j, N, R)		fixed bin,
	P		ptr;

/*[5.1-2]*/
	do j = i by 1 to i_limit;

/*[5.1-2]*/
	     P = ptr_array (j);

/*[5.1-2]*/
	     if source.line > P -> message.line
	     then return ("0"b);

/*[5.1-2]*/
	     R = P -> message.run;			/*[5.1-2]*/
	     N = P -> message.number;

/*[5.1-2]*/
	     if diag_file.diag_table.d_type (diag_file.run_table.base (R) + N) = 3
	     then return ("1"b);

/*[5.1-2]*/
	end;

/*[5.1-2]*/
	return ("0"b);

     end;


proc_diag:
     proc;

/* Process diagnostic token. */

	l_current = l_first;

	do while ("1"b);

	     diag_cnt = diag_cnt + 1;

	     if diag_cnt > 9
	     then do while ("1"b);

		     i = i + 1;

/*[5.1-3]*/
		     if i > i_limit
		     then return;

		     if ptr_array (i) -> message.line ^= l_diag.line
		     then return;

		end;

	     p = l_current;
	     l_current = l_diag.next;

	     if l_current = null ()
	     then do;
		     p2 = l_current;
		     old_sw = "1"b;

		     call al_dt;

		     p -> l_diag.next = l_current;
		     l_diag.next = p2;
		end;

	     i = i + 1;

/*[5.1-3]*/
	     if i > i_limit
	     then return;

	     if ptr_array (i) -> message.line ^= l_diag.line
	     then return;

	end;

     end;



proc_source:
     proc;


	if l_first ^= null ()
	then do;					/* Put out the previous source and diagnostics. */

		call start_proc_source;

/* Construct the diagnostic in a temp. */

		l_current = l_source.next;
		diag_sw = "0"b;

		if l_current = null ()
		then call last_diag;
		else call next_diag;

	     end;					/* Start a new stack with a new source line. */

	if eof_prt
	then do;
		status_right = "1"b;
		return;
	     end;

	if in_ptr = null ()
	then return;

	if fixed_common.date_comp_ln ^= 0
	then if source.line = fixed_common.date_comp_ln
	     then do;

		     call date_time_ (cobol_$sym_base_ptr -> symbol_block_header.object_creation_time, date_time);

		     s_start = index (source.image, "-") + 9;
		     s_length = s_start + 27;

		end;

	     else s_length = source.length;

	else s_length = source.length;

	call cobol_allo_tm (l_ptr, 24 + s_length);

	l_first = l_ptr;
	l_source.next = null ();
	l_source.type = source.type;
	l_source.line = source.line;
	l_source.info = source.info;
	l_source.length = s_length;

	substr (l_source.image, 1, s_length) = substr (source.image, 1, s_length);

	if fixed_common.date_comp_ln ^= 0
	then if source.line = fixed_common.date_comp_ln
	     then substr (l_source.image, s_start, 28) = ". " || date_time || "." || new_line_character;

	diag_cnt = 0;

     end;

sort_diag:
     proc;

declare	(LINE, ICOL, JCOL, ILEN, JLEN)
			fixed bin;

declare	p		ptr;

declare	1 fake_message,
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin;

	p = addr (fake_message);
	p -> message.line = 0;
	p -> message.column = 0;
	ptr_array (0) = p;

/*[4.2-3]*/
/* Rewrote to aid readability */

	do i = 1 by 1 to 3000;

	     LINE = 0;

	     do while (LINE = 0);

		call cobol_swf_get (cobol_dfp, status, in_ptr, ln);

		if status_right ^= "0"b
		then do;
			if i = 1
			then no_diag = "1"b;	/*[5.3-1]*/
			i = i - 1;
			return;
		     end;

		LINE = in_ptr -> message.line;


	     end;


	     if i ^= 1
	     then do;
		     j = i - 1;

		     ILEN = in_ptr -> message.line;
		     JLEN = ptr_array (j) -> message.line;
		     ICOL = in_ptr -> message.column;
		     JCOL = ptr_array (j) -> message.column;

		     do while (ILEN < JLEN | (ILEN = JLEN & ICOL < JCOL));

			ptr_array (j + 1) = ptr_array (j);

			j = j - 1;

			JLEN = ptr_array (j) -> message.line;
			JCOL = ptr_array (j) -> message.column;

		     end;

		     ptr_array (j + 1) = in_ptr;
		end;

	     else ptr_array (1) = in_ptr;

	end;

	call ioa_ ("cobol: There are over 3000 diagnostics in this program, only the first 3000 will be printed");

     end;


start_proc_source:
     proc;

/* set up the print line */

	string (source_ln.front) = "";

	if l_source.line > 0
	then do;
		eln_index = l_source.line;
		reln_ptr = addr (eln_tab (eln_index));
		part1 = " ";
		t_fno = eln_tab.fno (eln_index);

		if t_fno ^= 0
		then call ioa_$rsnnl ("^d", part1, 4, t_fno);

		source_ln.margin = part1;
		t_lno = eln_tab.lno (eln_index);

		call ioa_$rsnnl ("^d", source_ln.isn, 7, t_lno);

	     end;

	if l_source.next ^= null ()			/* set up diag reference line */
	then do;
		l_current = l_source.next;
		diag_ref = 0;
		save_col = 0;
		ref_line = " ";

		do while (l_current ^= null ());	/* scan the diags in the stack */

		     if l_diag.col = 0
		     then l_diag.col = 1;

		     if save_col ^= l_diag.col
		     then do;			/* set a ref no if col no different */

			     diag_ref = diag_ref + 1;
			     call ioa_$rsnnl ("^d", ch1, ioa_len, diag_ref);

			     substr (ref_line, l_diag.col, 1) = ch1;
			     save_col = l_diag.col;

			end;

		     call ioa_$rsnnl ("^d", l_diag.ref, ioa_len, diag_ref);

		     l_current = l_diag.next;
		end;

		ref_cur_char = 1;

	     end;

	cur_char = 1;

/* put the source line in as many print lines as necessary */

	do while ("1"b);

	     str_len = l_source.length;
	     substr (source_ln.text, 1, str_len) = substr (l_source.image, cur_char, str_len);
	     pbuf_len = str_len + 12;

	     if fixed_common.options.exs
	     then do;

		     if substr (l_source.image, 7, 1) = "/"
		     then if str_len > 6
			then call cobol_put_rec (st, cobol_ext_$cobol_hfp, 0, addr (ff_char), 1);

		     call cobol_put_rec (st, cobol_ext_$cobol_hfp, 0, pbuf_ptr, pbuf_len);

		end;

	     if l_source.next ^= null ()
	     then do;				/* Put source and diag reference line out. */

		     t_buf = p_buf;
		     len_t1 = pbuf_len;		/* [3.0-1] */
		     t_flag = "1"b;
		     string (source_ln.front) = "";

		     substr (source_ln.text, 1, str_len) = substr (ref_line, ref_cur_char, str_len);

		     pbuf_len = str_len + 12;

/*[4.0-1]*/
		     if fixed_common.options.exs & diag_ref > 0
		     then call cobol_put_rec (st, cobol_ext_$cobol_hfp, 0, pbuf_ptr, pbuf_len);

		     len_t2 = pbuf_len;
		     ref_cur_char = ref_cur_char + str_len;

		end;

	     l_source.length = l_source.length - str_len;

	     if l_source.length = 0
	     then return;

	     string (source_ln.front) = "";
	     cur_char = cur_char + str_len;
	end;

     end;

next_diag:
     proc;

	do while ("1"b);

	     if l_current = null ()
	     then do;
		     call last_diag;
		     return;
		end;
	     else call proc_dt;

	end;
     end;

last_diag:
     proc;

	if l_first ^= null ()
	then do;
		l_ptr = l_first;
		call cobol_allo_tm$free_tm (l_ptr);

	     end;

	if diag_sw
	then do;
		string (source_ln.front) = "";

/*[4.0-1]*/
		if fixed_common.options.exs & diag_ref > 0
		then call cobol_put_rec (st, cobol_ext_$cobol_hfp, 0, pbuf_ptr, 1);

	     end;

     end;

proc_dt:
     proc;

/* This routine formats and issues a diagnostic to the listing file */

	run_no = l_diag.run;

	if run_no < 0 | run_no > diag_file.r_t_size
	then do;
		call DEL_DIAG_ENTRY;
		return;
	     end;

	if l_diag.num > diag_file.run_table.size (run_no) | l_diag.num < 0
	then do;
		call DEL_DIAG_ENTRY;
		return;
	     end;

	ac_diag = diag_file.run_table.base (run_no) + l_diag.num;

	if l_diag.num ^= 0
	then if diag_table.d_len (ac_diag) = 0
	     then do;
		     call DEL_DIAG_ENTRY;
		     return;
		end;

/* Set up beginning of print line. */

	string (source_ln.front) = "";

/*	if ^diag_sw
/*	then do;
/*		pbuf_len = 2;
/*		if  fixed_common.options.exs
/*			then call cobol_put_rec(st,cobol_ext_$cobol_hfp,0,pbuf_ptr,pbuf_len);
/*		end;
/* */

	diag_sw = "1"b;
	diag_line.ref = l_diag.ref;

	if run_no ^= 9				/*[4.0-3]*/
	then do;
		if run_no > 15
		then run_no = 15;			/*[4.0-3]*/
		diag_line.run = substr ("12345678LDXXXXX", run_no, 1);
						/*[4.0-3]*/
	     end;
	else do;
		diag_line.run = "L";
		mod_num = fixed (l_diag.info, 27);

		if mod_num = 0
		then mod_num = diag_table.d_type (ac_diag);
	     end;

	diag_line.dash = "-";

	call ioa_$rsnnl ("^d", diag_line.diag_no, ioa_len, l_diag.num);

	if l_diag.num = 0
	then do;					/* Pick up diag text from the stack entry. */

		d_temp = substr (l_diag.image, 1, l_diag.length);
		d_temp_len = l_diag.length;
		diag_line.type = "   *";

		call put_diag;

		return;

	     end;

	if run_no ^= 9				/*[4.0-1]*/
	then do;
		diag_ref = diag_table.d_type (ac_diag);

/*[4.0-1]*/
		if fixed_common.comp_level < "5"	/*[4.0-1]*/
		then if diag_ref < 3
		     then diag_ref = 0;		/*[4.0-1]*/
	     end;					/*[4.0-1]*/
	else do;
		if substr (fixed_common.levsv, 1, 1)	/*[4.0-1]*/
		then diag_ref = 1;			/*[4.0-1]*/
		else if substr (fixed_common.levsv, 2, 1)
						/*[4.0-1]*/
		then diag_ref = 2;			/*[4.0-1]*/
		else diag_ref = 3;			/*[4.0-1]*/
	     end;

	if diag_ref = 2
	then fixed_common.warn_no = fixed_common.warn_no + 1;

	diag_line.type = substr ("   ****", diag_ref, 4);
	dline_1_sw = "1"b;

	if substr (l_diag.info, 1, 1)
	then do;					/* Insert the parameter. */

		if diag_table.d_param (ac_diag) = 0
		then do;
			call no_param;
			return;
		     end;

		if l_diag.run = 6 & l_diag.num = 39
		then do;
			d_temp =
			     substr (d_string, diag_table.d_start (ac_diag), diag_table.d_param (ac_diag) - 1)
			     || substr (l_diag.image, 1, l_diag.length) || " IS "
			     || substr (l_diag.image, 1, l_diag.length)
			     ||
			     substr (d_string, diag_table.d_start (ac_diag) + diag_table.d_param (ac_diag),
			     diag_table.d_len (ac_diag) - diag_table.d_param (ac_diag));

			d_temp_len = diag_table.d_len (ac_diag) + l_diag.length * 2 + 4;

			call put_diag;

			return;

		     end;

		if l_diag.run = 3 & l_diag.num = 9	/* ddsyntax special diag */
		then do;
			substr (char_13, 4, 11) = l_diag.image;
			BL = " ";

			do k = 1 to 28 while (BL = " ");

			     bsi = 28 - k;

			     BL = substr (d3_9p (cobol_d3_9.p1), bsi, 1);

			end;

			l_diag.length = bsi + 4;
			l_diag.image = d3_9p (cobol_d3_9.p1);
			l_diag.image = substr (l_diag.image, 1, bsi) || ":
		";
			do jj = 1 to 83;

			     if cobol_d3_9.pv (jj)
			     then do;

				     BL = " ";

				     do k = 1 to 28 while (BL = " ");

					bsi = 28 - k;
					BL = substr (d3_9p (jj), bsi, 1);

				     end;

				     plen = bsi + 4;

				     if l_diag.length + plen <= 200
				     then do;
					     substr (l_diag.image, l_diag.length + 1, plen) = d3_9p (jj) || ",";
					     l_diag.length = l_diag.length + plen;
					end;

				end;
			end;

			substr (l_diag.image, l_diag.length - 1, 1) = ".";

		     end;

		d_temp =
		     substr (d_string, diag_table.d_start (ac_diag), diag_table.d_param (ac_diag) - 1)
		     || substr (l_diag.image, 1, l_diag.length)
		     ||
		     substr (d_string, diag_table.d_start (ac_diag) + diag_table.d_param (ac_diag),
		     diag_table.d_len (ac_diag) - diag_table.d_param (ac_diag));

		d_temp_len = diag_table.d_len (ac_diag) + l_diag.length;

	     end;

	else do;
		call no_param;
		return;
	     end;

	call put_diag;

     end;

no_param:
     proc;

	d_temp_len = diag_table.d_len (ac_diag);
	d_temp_st = diag_table.d_start (ac_diag);

	if run_no ^= 9
	then d_temp = substr (d_string, d_temp_st, d_temp_len);
	else call lev_diag;

	call put_diag;

     end;

lev_diag:
     proc;

declare	lev_nam		char (20) varying;
declare	lev_mess		char (256) varying;

	lev_mess = substr (d_string, d_temp_st, d_temp_len);

	sev_lev = level_num (mod_num);

	go to L (sev_lev);

L (1):						/* low */
	lev_nam = "low";

	go to L1;

L (2):						/* low intermediate */
	lev_nam = "low intermediate";

	go to L1;

L (3):						/* high intermediate */
	lev_nam = "high intermediate";

	go to L1;

L (4):						/* high */
	lev_nam = "high";

	go to L1;

L (5):						/* extension */
	lev_mess = "FIPS level restriction [extension]: " || lev_mess;

	go to L2;

L1:
	lev_mess = "FIPS level restriction [" || fm_name (mod_num) || "- " || lev_nam || " level]: " || lev_mess;

L2:
	d_temp_len = length (lev_mess);
	d_temp = substr (lev_mess, 1, d_temp_len);

     end;

put_diag:
     proc;

/* put the diag in as many print lines as necessary */

	cur_char = 1;
	dup = "0"b;

	if m_bf
	then do;
		not_done = "1"b;
		di = dno_run_index (run_no);

		if di = 0				/* first diag */
		then do;
			dno_count = dno_count + 1;

			if dno_count <= 60		/* start diag number chain */
			then do;
				dno_run_index (run_no) = dno_count;
				dno (dno_count) = l_diag.num;
				dno_next (dno_count) = 0;

			     end;
		     end;

		else do while (not_done);		/* search chain for match */

			if dno (di) = l_diag.num
			then do;
				not_done = "0"b;
				dup = "1"b;
			     end;
			else if dno_next (di) = 0	/* search exhausted */
			then do;
				not_done = "0"b;
				dno_count = dno_count + 1;

				if dno_count <= 60
				then do;
					dno_next (di) = dno_count;
					dno (dno_count) = l_diag.num;
					dno_next (dno_count) = 0;
				     end;
			     end;

			else di = dno_next (di);	/* continue search */

		     end;
	     end;

	do while ("1"b);

	     str_len = d_temp_len;
	     substr (diag_line.text, 1, str_len) = substr (d_temp, cur_char, str_len);
	     diag_line.fill2 = " ";
	     pbuf_len = str_len + 13;

/*[4.0-1]*/
	     if fixed_common.options.exs & diag_ref > 0
	     then call cobol_put_rec (st, cobol_ext_$cobol_hfp, 0, pbuf_ptr, pbuf_len);

	     if dup
	     then do;
		     pbuf_len = 13;
		     str_len = 13;
		     d_temp_len = 13;
		end;

	     if (m_fat & diag_ref = 3) | (m_wn & diag_ref = 2) | (m_obs & diag_ref = 1)
	     then do;				/* Print the diag on the user-console. */

		     if t_flag = "1"b
		     then do;
			     t_flag = "0"b;
			     call ioa_ ("^/^a", substr (t_buf, 1, len_t1));
			     call ioa_ ("^12x^a", substr (ref_line, 1, len_t2));

			end;

		     call ioa_ ("^a", substr (p_buf, 1, pbuf_len));
		end;

	     d_temp_len = d_temp_len - str_len;

	     if d_temp_len = 0
	     then do;
		     call del_diag_entry;
		     return;
		end;

	     string (source_ln.front) = "";
	     cur_char = cur_char + str_len;

	end;

     end;

DEL_DIAG_ENTRY:
     proc;

	call del_diag_entry;

	string (source_ln.front) = "";
	cur_char = cur_char + str_len;

     end;

del_diag_entry:
     proc;

	p = l_diag.next;
	l_ptr = l_current;

/* remove this diag entry from stack */

	call cobol_allo_tm$free_tm (l_ptr);

	l_current = p;

     end;

al_dt:
     proc;

/* This routine allocates a token in the current or out-of-line diagnostic stack. */

dcl	tempbit		bit (1);
dcl	tempmno		fixed bin;

	tempbit = substr (ptr_array (i) -> message.info, 1, 1);
	tempmno = ptr_array (i) -> message.number;

	if tempbit | tempmno = 0
	then do;					/* get diag parameter or whole diag */

		call cobol_allo_tm (l_ptr, 232);	/* 200 is for DDSYNTAX special diags */

		l_current = l_ptr;
		l_diag.length = ptr_array (i) -> message.image_size;
		l_diag.image = substr (ptr_array (i) -> message.image, 1, ptr_array (i) -> message.image_size);

	     end;
	else do;
		call cobol_allo_tm (l_ptr, 32);
		l_current = l_ptr;
		l_diag.length = 0;
	     end;


	l_diag.next = null ();
	l_diag.line = ptr_array (i) -> message.line;

	if (ptr_array (i) -> message.column < 0) | (ptr_array (i) -> message.column > l_source.length)
	then l_diag.col = 0;
	else l_diag.col = ptr_array (i) -> message.column;


	l_diag.run = ptr_array (i) -> message.run;

	if l_diag.run ^= 9
	then l_diag.info = ptr_array (i) -> message.info;
	else l_diag.info = ptr_array (i) -> message.module;

	l_diag.num = ptr_array (i) -> message.number;
	l_diag.ref = " ";

     end al_dt;

close_it:
     proc;

	if cobol_$include_cnt > 0
	then if fixed_common.options.exs
	     then do;

		     call cobol_put_rec (st, cobol_ext_$cobol_hfp, 0, addr (incl_hdr), 73);

/*[5.1-1]*/
		     do i = 0 to cobol_$include_cnt;

			call hcs_$fs_get_path_name (include_ptr (i), dirname, ldn, ename, code);
			call hcs_$fs_get_ref_name (include_ptr (i), 1, rname, code);

			if rname = (32)" "
			then rname = ename;

			call ioa_$rs ("^7d^3x^6d^4x^40a^a", incl_line, incl_line_len,
			     fixed (rel (include_ptr (i)), 17), i, rname, substr (dirname, 1, ldn) || ">" || ename);

			call cobol_put_rec (st, cobol_ext_$cobol_hfp, 0, addr (incl_line), incl_line_len);

		     end;

		end;

     end;

declare	(BL, ch1)		char (1);
declare	dbin		char (13);
declare	(sev_lev, mod_num)	fixed bin;

dcl	1 source		based (in_ptr),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,		/* = 6 */
	  2 info		bit (8),
	  2 length	fixed bin,
	  2 image		char (120);

dcl	diag_sw		bit (1) static;
dcl	old_sw		bit (1) static;

dcl	hof		bit (9) static init ("000001100"b);

dcl	ad_hof		pointer static;
dcl	st		bit (32);
dcl	cobol_allo_tm	entry (ptr, fixed bin) ext;
dcl	cobol_allo_tm$free_tm
			entry (ptr) ext;
dcl	date_time_	entry (fixed bin (71), char (*));
dcl	date_time		char (24);
dcl	new_line_character	char (1);
dcl	bit9		bit (9) based;

dcl	s_length		fixed bin;
dcl	s_start		fixed bin;
dcl	(l_current, l_first, p, p2)
			pointer static;
dcl	l_ptr		ptr;
dcl	1 l_source	based (l_first),		/* stack source entry */
	  2 next		pointer,
	  2 type		fixed bin,
	  2 line		fixed bin,
	  2 info		bit (8),
	  2 length	fixed bin,
	  2 image		char (120);
dcl	1 l_diag		based (l_current),		/* stack diag entry */
	  2 next		pointer,
	  2 line		fixed bin,
	  2 col		fixed bin,
	  2 run		fixed bin,
	  2 num		fixed bin,
	  2 ref		char (1),
	  2 info		bit (27),
	  2 length	fixed bin,
	  2 image		char (120);

dcl	p_buf		char (255);


dcl	nl		bit (9) static init ("000001010"b);

dcl	ad_nl		pointer static;
dcl	dline_1_sw	bit (1) static;
dcl	1 source_ln	based (pbuf_ptr),		/* source print line */
	  2 front,
	    3 margin	char (4),
	    3 isn		char (7),
	    3 fill	char (1),
	  2 text		char (247);
dcl	1 diag_line	based (pbuf_ptr),		/* diag print line */
	  2 type		char (4),
	  2 fill1		char (1),
	  2 ref		char (1),
	  2 fill3		char (1),
	  2 run		char (1),
	  2 dash		char (1),
	  2 diag_no	char (3),
	  2 fill2		char (1),
	  2 text		char (1);
dcl	ref_line		char (200);
dcl	ref_cur_char	fixed bin static;
dcl	(diag_ref, cur_char, str_len, save_col)
			fixed bin static;
dcl	db_len		fixed bin;
dcl	t_flag		bit (1);
dcl	(len_t1, len_t2, ioa_len)
			fixed bin;

dcl	t_buf		char (255);
dcl	d_string		char (100000) based (d_string_ptr);
dcl	d_string_ptr	ptr;

dcl	d_ref		bit (64) static;
dcl	(run_no, d_temp_len, d_temp_st, ac_diag, diag_cnt, plen, bsi)
			fixed bin static;
dcl	1 cobol_d3_9	static,
	  2 p1		fixed bin init (0),
	  2 pv		(88) bit (1) init ((88) (1)""b);
dcl	char_13		char (15) based (addr (cobol_d3_9.p1));


dcl	d3_9p		(88) char (28) static
			init ("FILE section item", "WORKING-STORAGE section item", "CONSTANT section item",
			"LINKAGE section item", "COMMUNICATION section item", "REPORT section item", "77 level",
			"01 level", "non-elementary", "elementary", "FILLER", "subject of redefines",
			"object of redefines", "usage comp-7", "usage comp-6", "picture contains l",
			"picture is depending on", "numeric", "numeric-edited", "alphanumeric",
			"alphanumeric-edited", "alphabetic", "alphabetic-edited", "picture contains p",
			"* suppresion", "signed", "sign is separate", "usage display", "usage comp", "usage comp-8",
			"usage comp-5", "usage comp-3", "usage comp-1", "usage comp-2", "usage index",
			"justified right", "level 88", "sync", "temporary", "blank when zero", "variable length",
			"subscripted", "occurences depending on", "key ascending", "key descending", "indexed by",
			"numeric value", "non-numeric value", "signed value", " ", " ", " ", "integer",
			"asterisk when zero", "label", " ", "occurs key data-name", "subject of key is clause",
			"subject of redefines clause", "synchronized", "rounded", "sort on ascending key",
			"debug all", "overlap", "sum counter", "occurrence", "linage counter",
			"level 01 object of renames", "aligned", "not user writable", "database key",
			"database data item", "unsigned", "picture clause exists", "sign clause exists",
			"code set class 1", "value clause exists", "usage clause exists", "no picture clause",
			"no value clause", "figurative zero value", "value clause applies",
			"FD has code-set clause", "associated with picture s", " ", " ", " ", " ");


dcl	d_temp		char (200) static;
dcl	t_isn		char (13) static;
dcl	temp_ptr		ptr;
dcl	eof_prt		bit (1);
dcl	(t_fno, t_lno)	fixed bin;
dcl	part1		char (4);

/*  EXTERNAL COBOL I/O ENTRIES  */

dcl	cobol_swf_get	ext entry (ptr, bit (32), ptr, fixed bin);

/*  DECLARATION OF SOME VARIABLES USED IN COMPILER I/O CALLS  */

dcl	keyno		char (5);
dcl	key1		char (5);
dcl	curr_input	ptr;
dcl	curr_output	ptr;
dcl	recsize		fixed bin;
dcl	recsize2		fixed bin;
dcl	status		bit (32);
dcl	1 status_word	based (st_ptr),
	  2 status_left	bit (16),
	  2 status_right	bit (16);

dcl	st_ptr		ptr;

dcl	sarea		char (10000) based (sarea_ptr),
	ptr_array		(0:3000) ptr,
	(sarea_ptr, in_ptr) ptr,
	template		char (ln) based (sarea_ptr),
	in_record		char (ln) based (in_ptr),
	(ln, i, j, k, s, i_limit, jj)
			fixed bin;
dcl	no_diag		bit (1);
dcl	all_done		bit (1);

declare	(addr, divide, fixed, rel, string, index, mod, null)
			builtin;
declare	(substr, length)	builtin;

declare	ioa_$rs		entry options (variable);
declare	ioa_$rsnnl	entry options (variable);

dcl	dup		bit (1);
dcl	not_done		bit (1);
dcl	di		fixed bin;
dcl	dno_run_index	(8) fixed bin;
dcl	dno_count		fixed bin;
dcl	1 dno_element	(60),
	  2 dno		fixed bin,
	  2 dno_next	fixed bin;

dcl	elng_sw		bit (1);
dcl	reln_ptr		ptr;
dcl	code		fixed bin (35);
dcl	ioa_		entry options (variable);

dcl	pbuf_ptr		ptr;
dcl	pbuf_len		fixed bin;
dcl	ff_char		char (1) static options (constant) init ("");
dcl	multics_hdr	char (256);
dcl	multics_hdr_len	fixed bin;
dcl	cobol_version$header
			entry (char (*), fixed bin);
dcl	cobol_put_rec	entry (bit (32), ptr, fixed bin, ptr, fixed bin);
dcl	hcs_$fs_get_path_name
			entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
dcl	hcs_$fs_get_ref_name
			entry (ptr, fixed bin, char (*), fixed bin (35));
						/*[5.1-1]*/
dcl	include_ptr	(0:1000) ptr based (cobol_$include_info_ptr);
dcl	dirname		char (168),
	ename		char (32),
	rname		char (32),
	incl_line		char (150),
	incl_line_len	fixed bin,
	ldn		fixed bin;
dcl	incl_hdr		char (73) static init ("	INCLUDE FILES USED IN THIS COMPILATION.

  LINE	NUMBER	NAME				PATHNAME");



/*************************************/
/* INCLUDE FILES */
%include cobol_diag_file;
%include cobol_type5;
%include cobol_ext_;
%include cobol_;
%include cobol_sbh;
%include cobol_eln_table;
%include cobol_fixed_common;

     end cobol_print_diag;
