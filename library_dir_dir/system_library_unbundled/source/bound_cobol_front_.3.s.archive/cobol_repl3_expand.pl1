/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_repl3_expand.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 03/28/79 by FCH, [4.0-1], flag AND,OR as genereted code */
/* Modified since Version 4.0 */

/* format: style3 */
cobol_repl3_expand:
     proc (cname_ptr, cvar_ptr, ss_stack_ptr, curr_line, curr_column);

/*  This procedure is called by the replacement phase to expand a condition name to a
conditional expression that references the conditional variable associated with the
condition name.  When called, the reference to the condition name has been syntactically
checked, and if any subscripts were present, they have also been syntactically checked
and stored in a subscript stack.
*/


/*  DECLARATION OF THE PARAMETERS  */

dcl	cname_ptr		ptr;			/*  points to the condition name entry in the name table to be expanded  */

dcl	cvar_ptr		ptr;			/*  points to the condition variable entry in the name table associated with the
		condition name  */

dcl	ss_stack_ptr	ptr;			/*  points to the subscript stack  */

dcl	curr_line		fixed bin;		/*  contains the line on which the token being expanded occurs  */

dcl	curr_column	fixed bin;		/*  contains the column in which the token being expanded starts  */

/*  numeric initial value extension  */

dcl	extension_ptr	ptr;

dcl	1 no_in		based (extension_ptr),
	  2 inittype	bit (8),
	  2 info		bit (8),
	  2 sign		char (1),
	  2 exp_sign	char (1),
	  2 exp_places	fixed bin,
	  2 places_left	fixed bin,
	  2 places_right	fixed bin,
	  2 places	fixed bin,
	  2 literal	char (30);




/*  NUMERIC LITERAL TOKEN IMAGE  */

dcl	1 numeric_lit	based (cbuff_ptr),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,
	  2 info		bit (8),
	  2 sign		char (1),
	  2 exp_sign	char (1),
	  2 exp_places	fixed bin,
	  2 places_left	fixed bin,
	  2 places_right	fixed bin,
	  2 places	fixed bin,
	  2 literal	char (30);


/*  ALPHANUMERIC LITERAL TOKEN IMAGE  */

dcl	1 alphanum_lit	based (cbuff_ptr),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,
	  2 info		bit (8),
	  2 length	fixed bin,
	  2 string	char (256);


/*  RESERVED WORD TOKEN IMAGE  */

dcl	1 reserved_word	based (cbuff_ptr),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,
	  2 key		fixed bin,
	  2 class		bit (26),
	  2 jump_index	fixed bin;


/*  alphanumeric initial value extension  */

dcl	1 al_in		based (extension_ptr),
	  2 inittype	bit (8),
	  2 info		bit (8),
	  2 length	fixed bin,
	  2 string	char (256);

/*  Common work buffer in which output records are built  */

dcl	cbuff		char (100);
dcl	cbuff_ptr		ptr;
dcl	cbuff_size	fixed bin;



/*  initial condition name  */

dcl	1 c_n		based (cname_ptr),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,
	  2 string_ptr	ptr,
	  2 prev_rec	ptr,
	  2 info		bit (8),
	  2 def_line	fixed bin,
	  2 level		fixed bin,
	  2 num_lits	fixed bin,
	  2 name_size	fixed bin,
	  2 name		char (30);

/*  relational reserved word structure  */

/*  USED TO CREATE THE FOLLOWING RESERVED WORDS:  EQUAL, LESS, GREATER  */

dcl	1 relational_res_word
			int static,
	  2 size		fixed bin init (0),
	  2 line		fixed bin init (0),
	  2 column	fixed bin init (0),
	  2 type		fixed bin init (1),
	  2 key		fixed bin init (0),
	  2 class1	bit (8) init ("00000100"b),
	  2 class2	bit (8) init ("0"b),
	  2 class3	bit (4) init ("0001"b),
	  2 class4	bit (4) init ("0"b),
	  2 jump_index	fixed bin init (0);


/*  logical reserved word structure  */

/*  USED TO CREATE THE FOLLOWING RESERVED WORD TOKENS:  AND, OR, NOT  */

dcl	1 logical_res_word	int static,
	  2 size		fixed bin init (0),
	  2 line		fixed bin init (0),
	  2 column	fixed bin init (0),
	  2 type		fixed bin init (1),
	  2 key		fixed bin init (0),
	  2 class1	bit (16) init ("000000001"b), /*[4.0-1]*/
	  2 class2	bit (4) init ("0001"b),
	  2 class3	bit (4) init ("0"b),
	  2 jump_index	fixed bin init (0);



/*  INTERNAL VARIABLES  */

dcl	exp_counter	fixed bin;
dcl	template1		char (500) based (cname_ptr);
dcl	template2		(500) char (1) based (cname_ptr);

dcl	lrw_ptr		ptr;			/*  logical reserved word pointer  */
dcl	rrw_ptr		ptr;			/*  relational reserved word pointer  */
dcl	nlit_ptr		ptr;			/*   numericeric literal pointer  */

dcl	s		fixed bin;
dcl	y		fixed bin;
dcl	t1		fixed bin;

dcl	save_line		fixed bin;
dcl	save_column	fixed bin;


dcl	i		fixed bin;
dcl	ss_ptrtable	(1:50) ptr based (tptr1);
dcl	tptr1		ptr;
dcl	tptr2		ptr;
dcl	1 header		based (tptr2),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin;

dcl	1 ss_stack	based (ss_stack_ptr),
	  2 no_entries	fixed bin,
	  2 dummy_ptr	ptr,
	  2 stack		char (500);

dcl	addr		builtin;
dcl	fixed		builtin;
dcl	mod		builtin;
dcl	substr		builtin;

dcl	1 switch_type9	static,
	  2 header,
	    3 length	fixed bin init (112),
	    3 line	fixed bin,
	    3 column	fixed bin,
	    3 type	fixed bin init (9),
	  2 repl_ptr	(2) ptr init ((2) null ()),
	  2 fill1		bit (108) init (""b),
	  2 file_key_info,
	    3 fb1		(3) fixed bin init (0, 0, 0),
	    3 size	fixed bin init (4),
	    3 fb2		(2) fixed bin init (0, 0),
	    3 flags1	bit (36) init ("010000100100000000010000000100000000"b),
	    3 flags2	bit (36) init (""b),
	    3 seg		fixed bin init (-10),	/* cobol_fixed_static.controlp */
	    3 off		fixed bin,		/* offset from cobol_control_seg_|0 */
	  2 fill2		(7) fixed bin init (0, 0, 0, 0, 0, 0, 0);


unload_ss:
     proc;

	tptr1 = ss_stack.dummy_ptr;

	do i = 1 to ss_stack.no_entries;		/*  unload the subscript stack  */
	     tptr2 = ss_ptrtable (i);
	     call cobol_swf_put (cobol_ext_$cobol_curr_out, status, tptr2, header.size);
	end;					/*  unload the subscript stack  */

     end unload_ss;



load_nlit:
     proc;


	numeric_lit.size = numeric_literal_size + no_in.places;

	numeric_lit.line = curr_line;
	numeric_lit.column = curr_column;
	numeric_lit.type = 2;
	numeric_lit.info = "0"b;
	numeric_lit.sign = no_in.sign;
	numeric_lit.exp_sign = no_in.exp_sign;
	numeric_lit.exp_places = no_in.exp_places;
	numeric_lit.places_left = no_in.places_left;
	numeric_lit.places_right = no_in.places_right;
	numeric_lit.places = no_in.places;
	substr (numeric_lit.literal, 1, no_in.places) = substr (no_in.literal, 1, no_in.places);


	t1 = numeric_extension_size + no_in.places;
	y = mod (t1, 4);
	if y ^= 0
	then y = 4 - y;
	s = s + t1 + y;

	cbuff_size = numeric_lit.size;

     end load_nlit;


load_alit:
     proc;


	alphanum_lit.size = alphanumeric_literal_size + al_in.length;


	alphanum_lit.line = curr_line;
	alphanum_lit.column = curr_column;
	alphanum_lit.type = 3;
	alphanum_lit.info = "0"b;
	alphanum_lit.length = al_in.length;
	substr (alphanum_lit.string, 1, al_in.length) = substr (al_in.string, 1, al_in.length);



	t1 = alpha_extension_size + al_in.length;
	y = mod (t1, 4);
	if y ^= 0
	then y = 4 - y;
	s = s + t1 + y;

	cbuff_size = alphanum_lit.size;

     end load_alit;


load_resword:
     proc;

dcl	keytab		(1:7) fixed bin int static init (180,
						/*  ZERO  */
			192,			/*  SPACE  */
			256,			/*  UPPER-BOUND  */
			566,			/*  LOWER-BOUND  */
			221,			/*  HIGH-VALUE  */
			229,			/*  LOW-VALUE  */
			235 /*  QUOTE  */);


	reserved_word.size = reserved_word_size;

	reserved_word.line = curr_line;
	reserved_word.column = curr_column;
	reserved_word.type = 1;
	reserved_word.class = "001"b;			/*  set "figurative constant" bit  */
	reserved_word.key = keytab (fixed (substr (al_in.info, 6, 3), 3));
	reserved_word.jump_index = 0;


	t1 = alpha_extension_size;

	y = mod (t1, 4);
	if y ^= 0
	then y = 4 - y;
	s = s + t1 + y;

	cbuff_size = reserved_word.size;

     end load_resword;


load_all_lit:
     proc;


	alphanum_lit.size = alphanumeric_literal_size + al_in.length;

	alphanum_lit.line = curr_line;
	alphanum_lit.column = curr_column;
	alphanum_lit.type = 3;
	alphanum_lit.info = "01"b;			/*  set "preceded by ALL" bit  */
	alphanum_lit.length = al_in.length;
	substr (alphanum_lit.string, 1, al_in.length) = substr (al_in.string, 1, al_in.length);


	t1 = alpha_extension_size + al_in.length;
	y = mod (t1, 4);
	if y ^= 0
	then y = 4 - y;
	s = s + t1 + y;

	cbuff_size = alphanum_lit.size;

     end load_all_lit;





expand:
	exp_counter = 0;
	cbuff_ptr = addr (cbuff);

	lrw_ptr = addr (logical_res_word);
	rrw_ptr = addr (relational_res_word);

	logical_res_word.size = reserved_word_size;
	relational_res_word.size = reserved_word_size;

	if cname_ptr -> mnemonic_name.type = 17
	then do;					/*-07/01/76-*/
		switch_type9.line = curr_line;
		switch_type9.column = curr_column;
		switch_type9.off = 4 * (cname_ptr -> mnemonic_name.iw_key - 1);
						/* seg4|4*switchno */
		call cobol_swf_put (cobol_ext_$cobol_curr_out, status, addr (switch_type9),
		     switch_type9.header.length);

		logical_res_word.line, relational_res_word.line = curr_line;
		logical_res_word.column, relational_res_word.column = curr_column;
		if ^cname_ptr -> mnemonic_name.off_status
		then do;
			logical_res_word.key = reswd_NOT;
			call cobol_swf_put (cobol_ext_$cobol_curr_out, status, lrw_ptr, logical_res_word.size);
		     end;
		relational_res_word.key = reswd_EQUAL;
		call cobol_swf_put (cobol_ext_$cobol_curr_out, status, rrw_ptr, relational_res_word.size);

		cbuff_size, alphanum_lit.size = alphanumeric_literal_size + 4;
		alphanum_lit.line = curr_line;
		alphanum_lit.column = curr_column;
		alphanum_lit.type = 3;
		alphanum_lit.info = ""b;
		alphanum_lit.length = 4;
		substr (alphanum_lit.string, 1, 4) = "    ";
		call cobol_swf_put (cobol_ext_$cobol_curr_out, status, cbuff_ptr, cbuff_size);

		return;

	     end;


/*  calculate the character offset of the 1st numeric extension in the condition name entry  */


	t1 = numeric_extension_offset + c_n.name_size;

	y = mod (t1, 4);
	if y ^= 0
	then y = 4 - y;
	s = t1 + y + 1;

exp_loop:
	if exp_counter = c_n.num_lits
	then goto expand_cleanup;

	extension_ptr = addr (template2 (s));

	if exp_counter ^= 0
	then do;					/*  write  out the reserved word "OR"  */
		logical_res_word.line = curr_line;
		logical_res_word.column = curr_column;
		logical_res_word.key = 135;		/*  OR  */

		call cobol_swf_put (cobol_ext_$cobol_curr_out, status, lrw_ptr, logical_res_word.size);

	     end;					/*  write out the reserved word"OR"  */

/*  write out the name table entry for the conditional variable  */

	dn_ptr = cvar_ptr;

/*  save the line and column info from the name table entry  */

	save_line = data_name.line;
	save_column = data_name.column;
	data_name.column = curr_column;
	data_name.line = curr_line;


	call cobol_swf_put (cobol_ext_$cobol_curr_out, status, dn_ptr, data_name.size);

	if ss_stack.no_entries ^= 0
	then call unload_ss;			/*  unload the subscript stack  */

	if substr (no_in.inittype, 6, 2) = "00"b
	then do;					/*  This literal not associated with a "THRU"  clause  */

/*  write out the reserved word token "EQUAL"  */

		relational_res_word.line = curr_line;
		relational_res_word.column = curr_column;
		relational_res_word.key = 102;	/*  EQUAL  */

		call cobol_swf_put (cobol_ext_$cobol_curr_out, status, rrw_ptr, relational_res_word.size);

/*  write out the literal value  */


		if substr (no_in.inittype, 1, 1)	/*  numeric literal extension  */
		then call load_nlit;

		else if substr (no_in.inittype, 2, 1) & ^substr (no_in.inittype, 4, 1)
						/*  alphanumeric literal extension  */
		then call load_alit;

		else if substr (no_in.inittype, 3, 1)	/*  figurative constant extension  */
		then call load_resword;

		else call load_all_lit;		/*  assume an "ALL" literal  */

/*  write out the record just built in the common buffer  */

		call cobol_swf_put (cobol_ext_$cobol_curr_out, status, cbuff_ptr, cbuff_size);

		exp_counter = exp_counter + 1;


		goto exp_loop;

	     end;					/*  This literal not associated with a "THRU" clause  */

	else do;					/*  Must be associated with a "THRU" clause  */

/*  write out "NOT LESS"  (2 tokens)  */

		logical_res_word.line = curr_line;
		logical_res_word.column = curr_column;
		logical_res_word.key = 130;		/*  NOT  */

		call cobol_swf_put (cobol_ext_$cobol_curr_out, status, lrw_ptr, logical_res_word.size);

		relational_res_word.line = curr_line;
		relational_res_word.column = curr_column;
		relational_res_word.key = 123;	/*  LESS  */

		call cobol_swf_put (cobol_ext_$cobol_curr_out, status, rrw_ptr, relational_res_word.size);

/*  write out the literal value  */


		if substr (no_in.inittype, 1, 1)	/*  numeric literal extension  */
		then call load_nlit;

		else if substr (no_in.inittype, 2, 1) & ^substr (no_in.inittype, 4, 1)
						/*  alphanumeric literal extension  */
		then call load_alit;

		else if substr (no_in.inittype, 3, 1)	/*  figurative constant extension  */
		then call load_resword;

		else call load_all_lit;		/*  assume an "ALL" literal  */

/*  write out the record just built in the common buffer  */

		call cobol_swf_put (cobol_ext_$cobol_curr_out, status, cbuff_ptr, cbuff_size);



		extension_ptr = addr (template2 (s));

/*  write out "AND"  */

		logical_res_word.key = 77;		/*  AND  */

		call cobol_swf_put (cobol_ext_$cobol_curr_out, status, lrw_ptr, logical_res_word.size);

/*  write out the name table entry for the conditional variable  */

		dn_ptr = cvar_ptr;
		call cobol_swf_put (cobol_ext_$cobol_curr_out, status, dn_ptr, data_name.size);

		if ss_stack.no_entries ^= 0
		then call unload_ss;		/*  unload the subscript stack  */

/*  Write out  "NOT GREATER"  (2 tokens)  */

		logical_res_word.key = 130;		/*  NOT  */

		call cobol_swf_put (cobol_ext_$cobol_curr_out, status, lrw_ptr, logical_res_word.size);

		relational_res_word.key = 113;	/*  GREATER  */

		call cobol_swf_put (cobol_ext_$cobol_curr_out, status, rrw_ptr, relational_res_word.size);

/*  Write out the literal  */


		if substr (no_in.inittype, 1, 1)	/*  numeric literal extension  */
		then call load_nlit;

		else if substr (no_in.inittype, 2, 1) & ^substr (no_in.inittype, 4, 1)
						/*  alphanumeric literal extension  */
		then call load_alit;

		else if substr (no_in.inittype, 3, 1)	/*  figurative constant extension  */
		then call load_resword;

		else call load_all_lit;		/*  assume an "ALL" literal  */

/*  write out the record just built in the common buffer  */

		call cobol_swf_put (cobol_ext_$cobol_curr_out, status, cbuff_ptr, cbuff_size);

/*  increment literal processed counter  */

		exp_counter = exp_counter + 2;

		goto exp_loop;

	     end;					/*  must be associated with a "THRU" clause  */

expand_cleanup:					/*  restore the line and column info to the name table entry  */
	if c_n.num_lits > 0
	then do;					/* otherwise dn_ptr won't be set */
		data_name.line = save_line;
		data_name.column = save_column;
	     end;
exit:
	return;


/* INCLUDE FILES */
dcl	dn_ptr		ptr;
%include cobol_type9;
%include cobol_ext_;
%include cobol_io_info;
%include cobol_repl_unique;
dcl	name_ptr		ptr;
%include cobol_type17;
%include cobol_reswd_values;

     end cobol_repl3_expand;
