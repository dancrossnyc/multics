/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* format: style1,^inddcls,ifthenstmt,ifthendo,ifthen,indcomtxt,dclind5 */
graphic_gsp_utility_: proc;
	return;

/* This program implements common utility functions so that writers of
   graphic support procedures (GSP's) have a source of easy-to-use
   algorithms. */

/* Written 10/17/80 by C. D. Tavares */
%page;
%include graphic_etypes;
%page;
clip_line: entry (from, to, limits, shifting,
	goto_new_from, new_from, goto_new_to, new_to);

/* This entry clips a line to the screen boundaries using a rather simple
   algorithm copped from "Principles of Interactive Computer Graphics" by
   Newman and Sproull. */

/* PARAMETERS */
/* INPUT args: */
dcl  (from,					/* one endpoint */
     to)		        (2) float bin parameter,	/* the other */
     limits	        (2, 2) float bin parameter,	/* screen boundaries */
     shifting	        bit (1) parameter,		/* on if shift as opposed to vector */
						/* OUTPUT args: */
     (new_from,					/* clipped version */
     new_to)	        (2) float bin parameter,	/* clipped version */
     (goto_new_from,				/* on if user should explicitly move to there */
     goto_new_to)	        bit (1) parameter;		/* ditto */

/* AUTOMATIC */

dcl  (from_code, to_code)   bit (4);

/* CONSTANTS */

dcl  (Off_left	        initial ("1000"b),
     Off_right	        initial ("0100"b),
     Off_low	        initial ("0010"b),
     Off_high	        initial ("0001"b)) bit (4) static options (constant);

	new_from = from;
	new_to = to;

	from_code = compute_code (from, limits);
	to_code = compute_code (to, limits);

/* If the AND of these codes is not zero, the line is totally offscreen. */

	if (from_code & to_code) ^= "0000"b then do;
		goto_new_from, goto_new_to = "0"b;
		return;
	     end;

/* If we're shifting, the location of the start point is moot anyway. */

	if shifting then goto_new_from = ""b;

/* If not shifting, compute new start point.  If different from current
   position, tell the caller to go there.  (We assume he's already AT the
   point he gives as the current position.) */

	else do;
		if from_code ^= "0000"b then do;
			call crush (from, from_code, to, limits,
			     new_from);
			goto_new_from = "1"b;
		     end;
		else goto_new_from = "0"b;
	     end;

/* If we are shifting to a point onscreen OR we are drawing a visible vector
   that crosses the screen (even if it doesn't end onscreen) then we want the
   caller to go to the end point.  (If we are drawing a vector and we get here,
   we KNOW at least part of it is onscreen because we handled the totally
   offscreen case previously.) */

	if ^shifting | (to_code = "0000"b) then do;
		if to_code ^= "0000"b then
		     call crush (to, to_code, from, limits, new_to);
		goto_new_to = "1"b;
	     end;
	else goto_new_to = ""b;

	return;
%skip (5);
compute_code: proc (coords, limits) returns (bit (4));

dcl  coords	        (2) float bin parameter,
     limits	        (2, 2) float bin parameter;

dcl  code		        bit (4);

	code = "0000"b;

	if coords (1) < limits (1, 1) then code = Off_left;
	else if coords (1) > limits (2, 1) then code = Off_right;
	if coords (2) < limits (1, 2) then code = code | Off_low;
	else if coords (2) > limits (2, 2) then code = code | Off_high;

	return (code);
     end compute_code;
%skip (5);
crush: proc (point, code, otherpoint, limits, new_point);

dcl  (point,
     otherpoint,
     new_point)	        (2) float bin parameter,
     code		        bit (4) parameter,
     limits	        (2, 2) float bin parameter;

dcl  (delta_x, delta_y)     float bin;

	new_point = point;
	delta_x = otherpoint (1) - point (1);
	delta_y = otherpoint (2) - point (2);

	if (code & Off_left) ^= "0000"b then do;
		new_point (2) = new_point (2) +
		     (limits (1, 1) - new_point (1)) * delta_y / delta_x;
		new_point (1) = limits (1, 1);
		code = compute_code (new_point, limits);
	     end;

	if (code & Off_right) ^= "0000"b then do;
		new_point (2) = new_point (2) +
		     (limits (2, 1) - new_point (1)) * delta_y / delta_x;
		new_point (1) = limits (2, 1);
		code = compute_code (new_point, limits);
	     end;

	if (code & Off_low) ^= "0000"b then do;
		new_point (1) = new_point (1) +
		     (limits (1, 2) - new_point (2)) * delta_x / delta_y;
		new_point (2) = limits (1, 2);
		code = compute_code (new_point, limits);
	     end;

	if (code & Off_high) ^= "0000"b then do;
		new_point (1) = new_point (1) +
		     (limits (2, 2) - new_point (2)) * delta_x / delta_y;
		new_point (2) = limits (2, 2);
	     end;

	return;
     end crush;
%page;
clip_text: entry (text_string, alignment, charsizes, curpos, limits,
	hw_origin, init_shift, str_origin, str_len);

/* This entry clips a text string given the current position, the relevant
   alignments, and some other things.  It tells the user how much of the
   string should be eventually output and where. */

/* PARAMETERS */
/* INPUT args: */
dcl  (text_string	        char (*),			/* the string to be clipped */
     alignment	        fixed bin,			/* the desired alignment */
     charsizes	        (3) float bin,		/* characteristic of the terminal */
     curpos	        (2) float bin,		/* the current graphic position */
						/* parameter "limits" declared above */
     hw_origin	        fixed bin,			/* where the hardware aligns its strings */
						/* OUTPUT args: */
     init_shift	        (2) float bin,		/* user must shift this much before emitting string */
     str_origin	        fixed bin,			/* first char of string to emit */
     str_len	        fixed bin) parameter;		/* length of portion to emit */

/* AUTOMATIC */

dcl  char_width	        float bin,
     str_width	        float bin,
     flatsize	        fixed bin,
     realign	        (2) float bin,
     string_pos	        (2) float bin;

/* BUILTINS */

dcl  (divide, hbound, lbound, length, mod, rank, substr) builtin;


	str_origin = 1;
	str_len = length (text_string);
	init_shift = 0;

	flatsize = compute_flatsize (text_string);

	char_width = charsizes (2) + charsizes (3);

	str_width = flatsize * char_width - charsizes (3);
						/* subtract final intercharacter space */

/* We do all out clipping computations from the upper left-hand corner of
   the string (alignment 1). */

	realign (1) = -mod (alignment - 1, 3) / 2e0 * str_width;
	realign (2) = divide (alignment - 1, 3, 17) / 2e0 * charsizes (1);

	string_pos = curpos + realign;

/* If this string is clipped off the screen, just ignore it. */

/* Check for top of string over top of screen... */

	if string_pos (2) > limits (2, 2) then str_len = 0;

/* ... bottom of string under bottom of screen... */

	else if string_pos (2) - charsizes (1) < limits (1, 2) then
	     str_len = 0;

/* ... left edge of string past right edge of screen... */

	else if string_pos (1) >= limits (2, 1) then str_len = 0;

/* ... and right edge of string past left edge of screen */

	else if string_pos (1) + str_width <= limits (1, 1) then
	     str_len = 0;

	if str_len = 0 then return;

/* Now check for the case where we have to clip somewhere in mid-string. */

/* Check for right edge of string past right edge of screen */

	if string_pos (1) + str_width > limits (2, 1) then
	     call clip_right_edge (text_string, str_len, string_pos (1),
		limits (2, 1), charsizes (2), charsizes (3));

/* and left edge of string past left edge of screen */

	else if string_pos (1) < limits (1, 1) then
	     call clip_left_edge (text_string, str_origin, str_len,
		string_pos (1), limits (1, 1), charsizes (2),
		charsizes (3));

	init_shift = string_pos - curpos;
	if hw_origin = Left then
	     init_shift (2) = init_shift (2) - (charsizes (1) / 2e0);
	else if hw_origin = Lower_left then
	     init_shift (2) = init_shift (2) - charsizes (1);

	return;
%skip (5);
compute_flatsize: proc (str) returns (fixed bin);

dcl  str		        char (*) parameter;

/* AUTOMATIC */

dcl  flatsize	        fixed bin,
     i		        fixed bin;

	flatsize = 0;

	do i = 1 to length (str);
	     flatsize = flatsize +
		compute_colwidth (substr (str, i, 1), i);
	end;

	return (flatsize);
%skip (2);
clip_right_edge: entry (str, strlen, startpos, edge, charwidth, charspace);

dcl  (strlen	        fixed bin,
     startpos	        float bin,
     edge		        float bin,
     (charwidth,
     charspace)	        float bin) parameter;

dcl  temp_float	        float bin,
     fullwidth	        float bin;

/* set up a position counter; adjust to ignore trailing intercharacter space */

	temp_float = startpos - charspace;
	fullwidth = charwidth + charspace;

	do i = 1 to length (str) while (temp_float <= edge);
	     temp_float = temp_float +
		compute_colwidth (substr (str, i, 1), i) * fullwidth;
	end;

	strlen = i - 2;

	return;
%skip (2);
clip_left_edge:
     entry (str, strorig, strlen, startpos, edge, charwidth, charspace);

dcl  strorig	        fixed bin parameter;

	fullwidth = charwidth + charspace;

	do i = 1 to length (str) while (startpos < edge);
	     startpos = startpos +
		compute_colwidth (substr (str, i, 1), i) * fullwidth;
	end;

	strlen = strlen - i + 1;
	strorig = i;

	return;
%skip (5);
compute_colwidth: proc (ch, idx) returns (fixed bin);

dcl  ch		        char (1) parameter,
     idx		        fixed bin parameter;

/* AUTOMATIC */

dcl  colwidth	        fixed bin,
     i		        fixed bin;

/* CONSTANTS */

dcl  Columns_taken	        (0:127) fixed bin static options (constant) initial
		        ((8) 0,			/* NUL- BEL */
		        -1, 1, (6) 0,		/* BS - 017 */
		        (8) 0,			/* DLE - ETX */
		        (3) 0, -2, (4) 0,		/* CAN - US */
		        (95) 1, 0);			/* printing chars and PAD */

	i = rank (ch);
	if i > hbound (Columns_taken, 1) then
	     i = lbound (Columns_taken, 1);
	colwidth = Columns_taken (i);
	if colwidth = -2 then do;			/* ESC-anything takes no column */
		colwidth = -1;
		idx = idx + 1;
	     end;

	return (colwidth);
     end compute_colwidth;
     end compute_flatsize;

     end graphic_gsp_utility_;
