/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1987 *
        *                                                         *
        *********************************************************** */

/* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
ws_timer_:
     proc ();


/* PROGRAM FUNCTION

These are the timeout handlers which recover for lost packets.
*/


/* NOTES
*/

/****^  HISTORY COMMENTS:
  1) change(87-06-10,Flegel), approve(87-06-23,MCR7649),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Created.
  2) change(87-09-02,RBarstad), approve(87-09-02,PBF7649),
     audit(87-09-02,LJAdams), install(87-09-02,MR12.1-1096):
     Fixed to not reset timer if timers not being used.
                                                   END HISTORY COMMENTS */

/* INPUT PARAMETERS */
dcl p_wakeup	       fixed bin (71) parameter;  /* When a sleeper is to wake */
dcl p_channel	       fixed bin parameter;	    /* Channel ID */
dcl p_mio_data_ptr	       ptr parameter;	    /* Control structure info */

/* OUTPUT PARAMETERS */

/* MISC VARIABLES */
dcl timer_id	       fixed bin;		    /* Which timer is being handled */

/* STATIC */
dcl mio_data_ptr	       ptr int static;

/* STRUCTURES */
dcl 01 mio_data	       like mowse_io_data based (mio_data_ptr);

/* SYSTEM CALLS */
dcl ioa_$rsnnl	       entry () options (variable);
dcl timer_manager_$alarm_call entry (fixed bin (71), bit (2), entry);
dcl timer_manager_$reset_alarm_call entry (entry);

/* SYSTEM CALL SUPPORT */

/* EXTERNAL CALLS */
dcl ws_channel_$wait_wakeup
		    entry (ptr, ptr);
dcl ws_packet_transmitter_$supervisory entry (ptr, char (1));
dcl ws_packet_transmitter_$resend entry (ptr, fixed bin);
dcl ws_packet_transmitter_$ack entry (fixed bin, ptr);
dcl ws_debug_$line	       entry () options (variable);

/* EXTERNAL CALL SUPPORT */

/* BUILTINS */
dcl addr		       builtin;
dcl byte		       builtin;
dcl mod		       builtin;
dcl null		       builtin;
dcl clock		       builtin;
dcl divide	       builtin;

/* CONDITIONS */

/* CONSTANTS */
dcl False		   bit(1) int static options (constant) init ("0"b);
dcl ABSOLUTE_SECONDS       bit (2) int static options (constant) init ("01"b);
dcl NO_TIMER	       fixed bin int static options (constant) init (0);
dcl TRUE		       bit (1) int static options (constant) init ("1"b);
dcl FALSE		       bit (1) int static options (constant) init ("0"b);
dcl TIMER_INTERVALS	       (8) fixed bin int static options (constant) init (30, 30, 7, 7, 30, 15, 15, 60);
dcl NUMBER_OF_TIMERS       fixed bin int static options (constant) init (8);
dcl CONNECT_TIMER	       fixed bin int static options (constant) init (8);
dcl FG_SENDER_TIMER	       fixed bin int static options (constant) init (7);
dcl BG_SENDER_TIMER	       fixed bin int static options (constant) init (6);
dcl RESET_TIMER	       fixed bin int static options (constant) init (5);
dcl FG_RECEIVER_TIMER      fixed bin int static options (constant) init (4);
dcl BG_RECEIVER_TIMER      fixed bin int static options (constant) init (3);
dcl DISCONNECT_TIMER       fixed bin int static options (constant) init (2);
dcl BREAK_TIMER	       fixed bin int static options (constant) init (1);

/**/

/* INITIALIZATION */

/* MAIN */

	return;

/**/

%page;

/* INTERNAL ENTRIES */


/* *** Entry: initialize - Internal entry for ws_timer_  *** */

initialize:
     entry (p_mio_data_ptr);


/* ENTRY FUNCTION

Initialize the timer.
*/

/* NOTES
*/

/* The pointer is kept static because the timers wakeup on their own and need
   to have the information and nobody is there to give it */

	mio_data_ptr = p_mio_data_ptr;

/* Turn all timer control data off */

	mio_data.timer_info (*).wakeup = 0;
	mio_data.timer_info (*).timer_id = NO_TIMER;

	return;

/**/

/* *** Entry: sleep_processor - Internal entry for ws_timer_  *** */

sleep_processor:
     entry ();


/* ENTRY FUNCTION

Handle the awakening of a sleeping application.
*/

/* NOTES
*/

	mio_data.dozers = mio_data.dozers + 1;
	return;

/**/

/* *** Entry: timer_processor - Internal entry for ws_timer_  *** */

timer_processor:
     entry ();

/* ENTRY FUNCTION

This is the handler for timer wakeups.
*/

/* NOTES
*/

	call dequeue_timer ();
	call reset_alarm ();

	return;

/**/

/* *** Entry: queue_sleeper - Internal entry for ws_timer_  *** */

queue_sleeper:
     entry (p_wakeup);


/* ENTRY FUNCTION

Queue a sleeper wakeup.
*/

/* NOTES

The queue is already assumed to be formed.  If the next wakeup on the queue
is to occur AFTER the one just inserted, then a wakeup is to be scheduled for
the new time.
*/

/* Nothing to schedule */

	if mio_data.sleepers = null then
	     return;

/* Let's have some debug stuff */

	if mio_data.debug_iocb_ptr ^= null then
	     call ws_debug_$line (mio_data.debug_iocb_ptr,
		"   sleeping: ^d (^d)",
		mio_data.sleepers -> mowse_io_sleep_node.major,
		mio_data.sleepers -> mowse_io_sleep_node.when);

/* First node */

	if mio_data.sleepers -> mowse_io_sleep_node.next = null then do;
	     call reset_wakeup ();
	     return;
	end;

/* Rescheduling required */

	if mio_data.sleepers -> mowse_io_sleep_node.next -> mowse_io_sleep_node.when > p_wakeup then do;
	     call reset_wakeup ();
	     return;
	end;

	return;

/**/

/* *** Entry: reset_(*) - Internal entry for ws_timer_  *** */

/* ENTRY FUNCTION

These are entry points into the queue management for generating alarm calls
when a specified time period has elapsed.
*/

/* NOTES
*/

reset_break:
     entry ();

	timer_id = BREAK_TIMER;
	goto JOIN_RESET;

reset_connect:
     entry ();

	timer_id = CONNECT_TIMER;
	goto JOIN_RESET;

reset_disconnect:
     entry ();

	timer_id = DISCONNECT_TIMER;
	goto JOIN_RESET;

reset_receiver:
     entry (p_channel);

	timer_id = BG_RECEIVER_TIMER + p_channel;
	goto JOIN_RESET;

reset_reset:
     entry ();

	timer_id = RESET_TIMER;
	goto JOIN_RESET;

reset_sender:
     entry (p_channel);

	timer_id = BG_SENDER_TIMER + p_channel;
	goto JOIN_RESET;

JOIN_RESET:

	call queue_timer (timer_id);

	return;

/**/

/* *** Entry: terminate - Internal entry for ws_timer_  *** */

terminate:
     entry ();


/* ENTRY FUNCTION

Turn off all alarm calls as we are shutting down.
*/

/* NOTES
*/

	call timer_manager_$reset_alarm_call (timer_processor);
	mio_data.timer_info (*).timer_id = NO_TIMER;
	mio_data.timer_info (*).wakeup = 0;

	return;

/**/

%page;

/* INTERNAL PROCEDURES */


/* *** Procedure: dequeue_timer - Internal proc for ws_timer_  *** */

dequeue_timer:
     proc ();


/* PROCEDURE FUNCTION

Remove an entry from the timer queue - that which caused this alarm wakeup
to occur - and perform the necessary functions associated with the timer
type being dequeued.
*/

/* NOTES
*/

/* INPUT PARAMETERS */

/* OUTPUT PARAMETERS */

/* MISC VARIABLES */
dcl request_type	       fixed bin;		    /* Request or Confirmation */
dcl channel	       fixed bin;		    /* Channel ID */
dcl i		       fixed bin;
dcl current_time	       fixed bin (71);

/* STRUCTURES */

/* INITIALIZATION */
	current_time = divide (clock, 1000000, 71);

/* MAIN */

/* Process all timer_ids that were to wakup at this moment */

	do while (mio_data.timer_info (1).wakeup <= current_time
	     & mio_data.timer_info (1).timer_id ^= NO_TIMER);

/* Get timer ID and upshift the remaining entries */

	     timer_id = mio_data.timer_info (1).timer_id;

	     do i = 1 to NUMBER_OF_TIMERS - 1;
		mio_data.timer_info (i).timer_id
		     = mio_data.timer_info (i + 1).timer_id;
		mio_data.timer_info (i).wakeup
		     = mio_data.timer_info (i + 1).wakeup;
	     end;
	     mio_data.timer_info (NUMBER_OF_TIMERS).timer_id = NO_TIMER;
	     mio_data.timer_info (NUMBER_OF_TIMERS).wakeup = 0;

/* Switch on the timer id */

	     channel = BG;
	     goto case (timer_id);

case (1):					    /* BREAK */
	     if mio_data.switches.br_pending then do;
		call ws_packet_transmitter_$supervisory (mio_data_ptr,
		     byte (FGBrk + Confirm));
		call reset_break ();
	     end;
	     goto end_case;

case (2):					    /* DISCONNECT */
	     if mio_data.switches.ds_pending (1)
		| mio_data.switches.ds_pending (2)
	     then do;
		if mio_data.switches.ds_pending (1) then
		     request_type = Request;
		else
		     request_type = Confirm;

		call ws_packet_transmitter_$supervisory (mio_data_ptr,
		     byte (DisCon + request_type));
		call reset_disconnect ();
	     end;
	     goto end_case;

case (4):	     channel = FG;			    /* FG_RECEIVER */
case (3):					    /* BG RECEIVER */
	     if mio_data.s.nasn (channel) ^= mio_data.s.lasn (channel) then
		call ws_packet_transmitter_$ack (channel, mio_data_ptr);
	     call reset_receiver (channel);
	     goto end_case;

case (5):					    /* RESET */
	     if mio_data.switches.rs_pending (1)
		| mio_data.switches.rs_pending (2)
	     then do;
		if mio_data.switches.rs_pending (1) then
		     request_type = Request;
		else
		     request_type = Confirm;

		call ws_packet_transmitter_$supervisory (mio_data_ptr,
		     byte (RstOff + request_type));
		call reset_reset ();
	     end;
	     goto end_case;

case (7):	     channel = FG;			    /* FG_SENDER */
case (6):					    /* BG_SENDER */
	     call ws_packet_transmitter_$resend (mio_data_ptr, channel);
	     goto end_case;

case (8):	     if mio_data.connect_active then do;    /* CONNECT */
		mio_data.switches.connect_active = False;
		call ws_channel_$wait_wakeup (mio_data_ptr,
		     addr (mio_data.channel_info.user_input));
	     end;

	     goto end_case;
end_case:
	     if mio_data.debug_iocb_ptr ^= null then
		call display_queue ("dequeue", timer_id, current_time);

	end;

     end dequeue_timer;

/**/

/* *** Procedure: display_queue - Internal proc for ws_timer_  *** */

display_queue:
     proc (p_request, p_timer_id, p_wakeup);


/* PROCEDURE FUNCTION

Write the timer queue to the debug file, if it is attached.
*/

/* NOTES
*/

/* INPUT PARAMETERS */
dcl p_wakeup	       fixed bin (71) parameter;  /* When processing occurs */
dcl p_timer_id	       fixed bin parameter;	    /* Who is being processed */
dcl p_request	       char (*) parameter;	    /* Who called */

/* OUTPUT PARAMETERS */

/* MISC VARIABLES */
dcl j		       fixed bin;
dcl temp_string	       char (32) var;
dcl debug_string	       char (256) var;

/* STRUCTURES */

/* INITIALIZATION */

/* MAIN */

	if mio_data.debug_iocb_ptr = null then
	     return;

	debug_string = "";
	do j = 1 to 7;
	     if mio_data.timer_info (j).timer_id ^= NO_TIMER then do;
		call ioa_$rsnnl (
		     " (^[   ^;BRK^;DSC^;BGr^;FGr^;RST^;BGs^;FGs^;CON^],^d)",
		     temp_string, (0), mio_data.timer_info (j).timer_id + 1,
		     mod (mio_data.timer_info (j).wakeup, 1000));
		debug_string = debug_string || temp_string;
	     end;
	end;

	call ws_debug_$line (mio_data.debug_iocb_ptr,
	     "   ^a (^[BRK^;DSC^;BGr^;FGr^;RST^;BGs^;FGs^;CON^],^d):^a",
	     p_request, p_timer_id, mod (p_wakeup, 1000), debug_string);

     end display_queue;

/**/

/* *** Procedure: queue_timer - Internal proc for ws_timer_  *** */

queue_timer:
     proc (p_timer_id);


/* PROCEDURE FUNCTION

Place a request in the timer_info structure for a wakeup of the specified
type.
*/

/* NOTES
*/

/* INPUT PARAMETERS */
dcl p_timer_id	       fixed bin parameter;	    /* Timer to queue */

/* OUTPUT PARAMETERS */

/* MISC VARIABLES */
dcl swap_wake	       fixed bin (71);	    /* Swapping holding place */
dcl swap_id	       fixed bin;		    /* Space for swapping */
dcl temp_wake	       fixed bin (71);	    /* Temporary holding */
dcl when_wakeup	       fixed bin (71);	    /* When a wakeup occurs */
dcl current_seconds	       fixed bin (71);	    /* Current time in seconds */
dcl temp_id	       fixed bin;		    /* Temp ID for swapping */
dcl j		       fixed bin;
dcl done		       bit (1);		    /* Search control flag */
dcl i		       fixed bin;

/* STRUCTURES */

/* INITIALIZATION */

/* MAIN */
	current_seconds = divide (clock, 1000000, 71);
	when_wakeup = current_seconds + TIMER_INTERVALS (p_timer_id);
	i = 1;
	done = FALSE;
	do while (^done);

/* Add wakeup */

	     if mio_data.timer_info (i).timer_id = NO_TIMER then do;
		mio_data.timer_info (i).timer_id = p_timer_id;
		mio_data.timer_info (i).wakeup = when_wakeup;
		done = TRUE;
	     end;

/* Replace wakeup */

	     else if mio_data.timer_info (i).timer_id = p_timer_id then do;
		do j = i + 1 to NUMBER_OF_TIMERS;

/* Empty slot, so it's the end of the queue */

		     if mio_data.timer_info (j).timer_id = NO_TIMER then do;
			mio_data.timer_info (j - 1).timer_id = p_timer_id;
			mio_data.timer_info (j - 1).wakeup = when_wakeup;
			j = NUMBER_OF_TIMERS;
		     end;

/* Last slot */

		     else if j = NUMBER_OF_TIMERS then do;
			mio_data.timer_info (j).timer_id = p_timer_id;
			mio_data.timer_info (j).wakeup = when_wakeup;
		     end;

/* Found the position */

		     else if mio_data.timer_info (j).wakeup > when_wakeup then do;
			mio_data.timer_info (j - 1).timer_id = p_timer_id;
			mio_data.timer_info (j - 1).wakeup = when_wakeup;
			j = NUMBER_OF_TIMERS;
		     end;

/* Upshift slots */

		     else do;
			mio_data.timer_info (j - 1).timer_id
			     = mio_data.timer_info (j).timer_id;
			mio_data.timer_info (j - 1).wakeup
			     = mio_data.timer_info (j).wakeup;
		     end;
		end;

		done = TRUE;
	     end;

/* Insert wakeup */

	     else if when_wakeup < mio_data.timer_info (i).wakeup then do;
		temp_id = mio_data.timer_info (i).timer_id;
		temp_wake = mio_data.timer_info (i).wakeup;
		mio_data.timer_info (i).timer_id = p_timer_id;
		mio_data.timer_info (i).wakeup = when_wakeup;

		do j = i + 1 to NUMBER_OF_TIMERS;

/* No duplicates */

		     if mio_data.timer_info (j).timer_id = p_timer_id then do;
			mio_data.timer_info (j).timer_id = temp_id;
			mio_data.timer_info (j).wakeup = temp_wake;
			j = NUMBER_OF_TIMERS;
		     end;

/* Downshift slots */

		     else do;
			swap_id = mio_data.timer_info (j).timer_id;
			swap_wake = mio_data.timer_info (j).wakeup;
			mio_data.timer_info (j).timer_id = temp_id;
			mio_data.timer_info (j).wakeup = temp_wake;
			temp_id = swap_id;
			temp_wake = swap_wake;
		     end;
		end;

		done = TRUE;
	     end;

	     else
		i = i + 1;
	end;

/* Lets see some debugging */

	if mio_data.debug_iocb_ptr ^= null then
	     call display_queue ("  queue", p_timer_id, when_wakeup);

/* If terminated on first iteration, then the actual alarm needs to be reset */

	if i = 1 then
	     call reset_alarm ();

     end queue_timer;

/**/

/* *** Procedure: reset_alarm - Internal proc for ws_timer_  *** */

reset_alarm:
     proc ();


/* PROCEDURE FUNCTION

Set the timer_manager_ up with a new wakeup (the next one in the timer_info
queue).
*/

/* NOTES
*/

/* INPUT PARAMETERS */

/* OUTPUT PARAMETERS */

/* MISC VARIABLES */

/* STRUCTURES */

/* INITIALIZATION */

/* MAIN */
     if mio_data.timer_info (1).timer_id ^= NO_TIMER    /* hcom #2 */
	then do;
	call timer_manager_$reset_alarm_call (timer_processor);
	call timer_manager_$alarm_call (mio_data.timer_info (1).wakeup,
	     ABSOLUTE_SECONDS, timer_processor);
     end;

     end reset_alarm;

/**/

/* *** Procedure: reset_wakeup - Internal proc for ws_timer_  *** */

reset_wakeup:
     proc ();


/* PROCEDURE FUNCTION

Reschedule a wakeup for handling the sleepers queue.
*/

/* NOTES
*/

/* INPUT PARAMETERS */

/* OUTPUT PARAMETERS */

/* MISC VARIABLES */

/* STRUCTURES */

/* INITIALIZATION */

/* MAIN */

	call timer_manager_$reset_alarm_call (sleep_processor);
	call timer_manager_$alarm_call (
	     mio_data.sleepers -> mowse_io_sleep_node.when,
	     ABSOLUTE_SECONDS, sleep_processor);

     end reset_wakeup;

/**/

%page;

/* INCLUDE FILES */
%include mowse_io_structures;
%include mowse;
%include mowse_io_constants;
%include mowse_messages;
%include mowse_io_data;

     end;
