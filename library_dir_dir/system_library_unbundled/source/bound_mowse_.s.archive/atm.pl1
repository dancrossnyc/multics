/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-08-14,Flegel), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Created.
  2) change(86-08-28,Flegel), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Extracted get_at_ to separate module.
  3) change(86-10-07,Flegel), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Added syn_mowse_i/o to allow easy location of the switch attached to
     mowse_io_ module.
  4) change(86-10-08,Flegel), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Renamed attachments.
  5) change(86-10-09,Flegel), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Masked around critical switch movements.
  6) change(86-11-27,Flegel), approve(86-11-27,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Approved.
  7) change(87-01-19,Flegel), approve(87-01-19,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Added check for WSTERM terminal type before attaching MOWSE.
  8) change(87-02-25,Flegel), approve(87-02-25,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Corrected terminal type setting test, installed the
     clean_up_init_mowse_info routine, and added the force request to the
     command.
  9) change(87-03-24,Flegel), approve(87-03-24,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Changed call to iox_$open_file in order to pass escape and EOP character
     information to mowse_io_.
                                                   END HISTORY COMMENTS */

/* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
atm:
attach_mowse:
     proc ();

/* : PROGRAM FUNCTION

Attach the MOWSE environment to the user's process.
*/

/* : NOTES

The MOWSE environment is to be used only by the user when (s)he has logged
into Multics through the MOWSE environment on a Personal Computer.  Failure to
do so will result in a "hung" terminal.

MOWSE will be attached before tty_.  If tty_ does not exist, then attachment
will fail.

Below is a before/after look of the io switch attachments:

  --|
  --+--...--<foo_i/o>-- tty_
  --|

  --|
  --+--...--<foo_i/o>-- syn_ --<mowse_i/o>-- mowse_io_ --<mowse_tty>-- tty_
  --|
*/


/* MISC VARIABLES */
dcl open_descrip	       char (32);		    /* Open description arguments */
dcl err_string	       char (512) var;
dcl iocb_ptr	       ptr;
dcl switch_name	       char (32);		    /* Switch name to attach to */
dcl arg_count	       fixed bin;		    /* Number of arguments */
dcl arg_list_ptr	       ptr;		    /* Pointer to argument list */
dcl mowse_iocb_ptr	       ptr;		    /* Pointer to Mowse control block */
dcl syn_iocb_ptr	       ptr;		    /* Pointer to Syn Mowse control block */
dcl code		       fixed bin (35);	    /* Error code */
dcl old_mask	       bit (36) aligned;	    /* IPS mask */
dcl new_mask	       bit (36) aligned;	    /* IPS mask */

/* STRUCTURES */
dcl 01 term_info	       like terminal_info aligned automatic;
dcl 01 info	       like mowse_io_info automatic;

/* SYSTEM CALLS */
dcl iox_$open_file	       entry (ptr, fixed bin, char (*), bit (1) aligned, fixed bin (35));
dcl ioa_$ioa_switch	       entry () options (variable);
dcl hcs_$set_ips_mask      entry (bit (36) aligned, bit (36) aligned);
dcl hcs_$reset_ips_mask    entry (bit (36) aligned, bit (36) aligned);
dcl ioa_$rsnnl	       entry () options (variable);
dcl iox_$detach_iocb       entry (ptr, fixed bin (35));
dcl iox_$destroy_iocb      entry (ptr, fixed bin (35));
dcl iox_$look_iocb	       entry (char (*), ptr, fixed bin (35));
dcl cu_$arg_count	       entry (fixed bin, fixed bin (35));
dcl cu_$arg_list_ptr       entry (ptr);
dcl iox_$control	       entry (ptr, char (*), ptr, fixed bin (35));
dcl com_err_	       entry () options (variable);
dcl iox_$move_attach       entry (ptr, ptr, fixed bin (35));
dcl iox_$find_iocb	       entry (char (*), ptr, fixed bin (35));
dcl iox_$attach_ptr	       entry (ptr, char (*), ptr, fixed bin (35));


/* SYSTEM CALL SUPPORT */
dcl iox_$error_output      ptr ext static;
dcl ws_error_$unsupported_ws_terminal
		       fixed bin (35) ext static;
dcl iox_$user_io	       ptr ext static;	    /* User_i/o IOCB */


/* EXTERNAL CALLS */
dcl get_at_	       entry (char (*), char (*), ptr, fixed bin (35));
dcl init_mowse_	       entry (ptr, ptr, fixed bin (35));
dcl startup_parser_	       entry (ptr, fixed bin, ptr, char (*) var,
		       fixed bin (35));


/* EXTERNAL CALL SUPPORT */


/* BUILTINS */
dcl addr		       builtin;
dcl length	       builtin;
dcl null		       builtin;
dcl index		       builtin;

/* CONDITIONS */


/* CONSTANTS */
dcl MY_NAME	       char (12) int static options (constant)
		       init ("attach_mowse");


/**/
/* INITIALIZATION */
	open_struc_ptr = addr (open_descrip);
	init_mowse_info_ptr = null;
	new_mask = ""b;

/* MAIN */

/* : MOWSE already attached? */

	call iox_$look_iocb ("mowse_i/o", iocb_ptr, code);
	if iocb_ptr ^= null then do;
	     call ioa_$ioa_switch (iox_$error_output,
		"^a: MOWSE has already been invoked.", MY_NAME);
	     return;
	end;

/* : Parse the arglist */

	call cu_$arg_list_ptr (arg_list_ptr);
	call cu_$arg_count (arg_count, code);
	if code ^= 0 then do;
	     call com_err_ (code, MY_NAME, "Getting arg count.");
	     return;
	end;

/* : Call arg_list parser routine */

	call startup_parser_ (arg_list_ptr, arg_count, init_mowse_info_ptr,
	     err_string, code);
	if code ^= 0 then do;
	     call com_err_ (code, MY_NAME, err_string);
	     call clean_up_init_mowse_info (init_mowse_info_ptr);
	     return;
	end;

/* : See if we are on an acceptable terminal type */

	if ^init_mowse_info.flags.force_sw then do;
	     term_info.version = 1;
	     call iox_$control (iox_$user_io, "terminal_info",
		addr (term_info), code);
	     if code ^= 0 then do;
		call com_err_ (code, MY_NAME, "Getting terminal type.");
		call clean_up_init_mowse_info (init_mowse_info_ptr);
		return;
	     end;

	     if index (term_info.term_type, "MOWSE") = 0 then do;
		call com_err_ (ws_error_$unsupported_ws_terminal,
		     MY_NAME, "Use MOWSE.");
		call clean_up_init_mowse_info (init_mowse_info_ptr);
		return;
	     end;
	end;

/* : Find the iocb of the switch (if specified) under which to attach,
     otherwise next to tty_ */

	if ^init_mowse_info.flags.io_switch_sw then do;
	     call get_at_ ("tty_", "", iocb_ptr, code);
	     if code ^= 0 then do;
		call com_err_ (code, MY_NAME, "Finding tty_.");
		call clean_up_init_mowse_info (init_mowse_info_ptr);
		return;
	     end;
	end;
	else do;
	     switch_name = init_mowse_info.io_switch;
	     call iox_$look_iocb (switch_name, iocb_ptr, code);
	     if code ^= 0 then do;
		call com_err_ (code, MY_NAME, "Finding ^a",
		     switch_name);
		call clean_up_init_mowse_info (init_mowse_info_ptr);
		return;
	     end;
	end;

/* : Create mowse_tty control block */

	call iox_$find_iocb ("mowse_tty", mowse_iocb_ptr, code);
	if code ^= 0 then do;
	     call com_err_ (code, MY_NAME, "Finding mowse_tty.");
	     call clean_up_init_mowse_info (init_mowse_info_ptr);
	     return;
	end;

/* : Create mowse_i/o control block */

	call iox_$find_iocb ("mowse_i/o", syn_iocb_ptr, code);
	if code ^= 0 then do;
	     call iox_$destroy_iocb (mowse_iocb_ptr, (0));
	     call com_err_ (code, MY_NAME, "Finding mowse_i/o.");
	     call clean_up_init_mowse_info (init_mowse_info_ptr);
	     return;
	end;

/* : Move mowse_i/o onto the iocb above tty_ */

	new_mask = ""b;
	call hcs_$set_ips_mask (new_mask, old_mask);
	call iox_$move_attach (iocb_ptr, syn_iocb_ptr, code);
	if code ^= 0 then do;
	     call hcs_$reset_ips_mask (old_mask, new_mask);
	     call ioa_$rsnnl ("Moving ^a attachment to mowse_i/o.",
		err_string, length (err_string), iocb_ptr -> iocb.name);
	     goto DESTROY_IOCB_SYN;
	end;

/* : Attach the syn_ */

	call iox_$attach_ptr (iocb_ptr, "syn_ mowse_i/o", null, code);
	if code ^= 0 then do;
	     call hcs_$reset_ips_mask (old_mask, new_mask);
	     call ioa_$rsnnl ("Attaching ^a to mowse_i/o.", err_string,
		length (err_string), iocb_ptr -> iocb.name);
	     goto UNMOVE_ATTACH_SYN;
	end;
	call hcs_$reset_ips_mask (old_mask, new_mask);

/* : Move mowse_i/o to mowse_io_ */

	new_mask = ""b;
	call hcs_$set_ips_mask (new_mask, old_mask);
	call iox_$move_attach (syn_iocb_ptr, mowse_iocb_ptr, code);
	if code ^= 0 then do;
	     call hcs_$reset_ips_mask (old_mask, new_mask);
	     call ioa_$rsnnl ("Moving ^a attachment to mowse_i/o.",
		err_string, length (err_string), syn_iocb_ptr -> iocb.name)
		;
	     goto DESTROY_IOCB;
	end;

/* : Attach mowse_io_ to tty_ */

	call iox_$attach_ptr (syn_iocb_ptr, "mowse_io_ mowse_tty", null,
	     code);
	if code ^= 0 then do;
	     call hcs_$reset_ips_mask (old_mask, new_mask);
	     call ioa_$rsnnl ("Attaching ^a to mowse_tty.", err_string,
		length (err_string), syn_iocb_ptr -> iocb.name);
	     goto UNMOVE_ATTACH;
	end;
	call hcs_$reset_ips_mask (old_mask, new_mask);

/* : Open mowse_io_ */

	open_struc.flags.network_sw = "0"b;
	open_struc.flags.escape_sw = "0"b;
	if init_mowse_info.flags.escape_sw then do;
	     open_struc.flags.escape_sw = "1"b;
	     open_struc.escape.switches = init_mowse_info.escape.chars;
	end;
	if init_mowse_info.flags.network_sw then
	     open_struc.flags.network_sw = "1"b;

	call iox_$open_file (syn_iocb_ptr, Stream_input_output,
	     open_descrip, "0"b, code);
	if code ^= 0 then do;
	     err_string = "Opening mowse_tty.";
	     goto UNATTACH;
	end;

/* : Initialization of mowse */

	info.version = mowse_io_info_version_1;
	call iox_$control (syn_iocb_ptr, "get_mowse_info", addr (info),
	     code);
	if code ^= 0 then do;
	     call com_err_ (code, MY_NAME, "Getting mowse mcb.");
	     call clean_up_init_mowse_info (init_mowse_info_ptr);
	     return;
	end;

/* : Set up the mowse_info_ structure */

	call init_mowse_ (info.mcb_ptr, init_mowse_info_ptr, code);
	if code ^= 0 then do;
	     call com_err_ (code, MY_NAME, "Initializing mowse.");
	     call clean_up_init_mowse_info (init_mowse_info_ptr);
	     return;
	end;

	return;

/**/

/* : Label entries to transfer control to when a failure occurs during the
     attachment / movement of the iocbs */

UNATTACH:
	call iox_$detach_iocb (syn_iocb_ptr, (0));

UNMOVE_ATTACH:
	call iox_$move_attach (mowse_iocb_ptr, syn_iocb_ptr, (0));

DESTROY_IOCB:
	call iox_$destroy_iocb (mowse_iocb_ptr, (0));

UNMOVE_ATTACH_SYN:
	call iox_$detach_iocb (iocb_ptr, (0));
	call iox_$move_attach (syn_iocb_ptr, iocb_ptr, (0));

DESTROY_IOCB_SYN:
	call iox_$destroy_iocb (syn_iocb_ptr, (0));

	call com_err_ (code, MY_NAME, err_string);
	call clean_up_init_mowse_info (init_mowse_info_ptr);

	return;

/**/

/* INTERNAL PROCEDURES */

/* : *** Procedure clean_up_init_mowse_ptr: internal procedure for atm *** */

clean_up_init_mowse_info:
     proc (p_info_ptr);

/* : PROCEDURE FUNCTION

Free the init_mowse_info structure if the pointer is not null.
*/

/* INPUT PARAMETERS */
dcl p_info_ptr	       ptr parameter;

/* INITIALIZATION */

	if p_info_ptr ^= null then
	     free p_info_ptr -> init_mowse_info;
	p_info_ptr = null;

     end clean_up_init_mowse_info;

/**/

%page;
/* INCLUDE FILES */
%include iox_modes;
%include terminal_info;
%include mowse_info;
%include iocbv;
%include mowse_io_control_info;

/* : END */
     end;
