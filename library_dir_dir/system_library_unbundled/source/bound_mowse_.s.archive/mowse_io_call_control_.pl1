/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-08-14,Flegel), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Created.
  2) change(86-10-08,Flegel), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Added flush_subchannel control order to be
     disallowed.
  3) change(86-11-27,Flegel), approve(86-11-27,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Approved.
                                                   END HISTORY COMMENTS */

/* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
mowse_io_call_control_:
     proc (p_iocb_ptr, p_io_call_order, p_io_call_info_ptr, p_code);

/* : PROGRAM FUNCTION

Sets up info structures to execute mowse_io_ control orders on behalf of the
io_call command.
*/

/* : NOTES

The following orders are supported for io_call:

	store_id id
	set_term_type
	line_length N

The following orders are supported for io_call_af:

	read_status
	write_status
	terminal_info terminal_type
	terminal_info baud
	terminal_info id
	terminal_info line_type

This procedure is primarily an extraction of tty_io_call_control_ with minor
modifications in order to supply support for MOWSE.
*/

/* INPUT PARAMETERS */
dcl p_iocb_ptr	       ptr;		    /* Pointer to the iocb */
dcl p_io_call_order	       char (*);		    /* "io_call" or "io_call_af" */
dcl p_io_call_info_ptr     ptr;		    /* Info pointer */


/* OUTPUT PARAMETERS */
dcl p_code	       fixed bin (35);


/* MISC VARIABLES */
dcl line_length	       fixed bin (9);
dcl i		       fixed bin (35);
dcl new_type	       fixed bin (35);	    /* Index into device table */
dcl new_id	       char (4);		    /* Info for store_id */
dcl temp_type	       char (16);		    /* Temporary line type */
dcl caller	       char (32);		    /* Name of calling procedure */
dcl n_args	       fixed bin;		    /* Number of control args */
dcl order		       char (32);		    /* Control order requested */
dcl report	       entry variable options (variable);
					    /* io_call report handler */
dcl error		       entry variable options (variable);
					    /* io_call error handler */
dcl af_flag	       bit (1);		    /* If the call was from "io_call_af" */


/* STRUCTURES */
dcl 01 write_status	       aligned like tty_read_status_info;
dcl 01 read_status	       aligned like tty_read_status_info;
dcl 01 info	       like terminal_info automatic;


/* SYSTEM CALLS */
dcl cv_dec_check_	       entry (char (*), fixed bin (35))
		       returns (fixed bin (35));
dcl ioa_$rsnnl	       entry () options (variable);
dcl iox_$control	       entry (ptr, char (*), ptr, fixed bin (35));


/* SYSTEM CALL SUPPORT */
dcl error_table_$undefined_order_request
		       fixed bin (35) ext static;
dcl error_table_$noarg     fixed bin (35) ext static;
dcl error_table_$badopt    fixed bin (35) ext static;


/* BUILTINS */
dcl addr		       builtin;
dcl hbound	       builtin;
dcl lbound	       builtin;
dcl null		       builtin;
dcl rtrim		       builtin;
dcl translate	       builtin;
dcl unspec	       builtin;

/* CONSTANTS */
dcl info_orders	       (34) char (32) int static options (constant)
		       init ("set_delay",
		       "get_channel_info",
		       "get_delay",
		       "set_editing_chars",
		       "get_editing_chars",
		       "set_input_translation",
		       "set_input_conversion",
		       "set_output_translation",
		       "set_output_conversion",
		       "get_input_translation",
		       "get_input_conversion",
		       "get_output_translation",
		       "get_output_conversion",
		       "set_special",
		       "get_special",
		       "set_framing_chars",
		       "get_framing_chars",
		       "send_initial_string",
		       "set_default_modes",
		       "set_input_message_size",
		       "get_input_message_size",
		       "input_flow_control_chars",
		       "output_flow_control_chars",
		       "get_echo_break_table",
		       "set_wakeup_table",
		       "set_prompt",
		       "hangup_proc",
		       "get_terminal_emulator_state",
		       "get_mowse_info",
		       "put_to_sleep",
		       "send_message",
		       "send_local_message",
		       "store_mowse_info",
		       "flush_subchannel");

/**/
/* INITIALIZATION */

/* : Load information from the io_call_info structure into local storage */

	io_call_infop = p_io_call_info_ptr;
	caller = io_call_info.caller_name;
	n_args = io_call_info.nargs;
	order = io_call_info.order_name;
	report = io_call_info.report;
	error = io_call_info.error;
	af_flag = (p_io_call_order = "io_call_af");
	p_code = 0;

/* MAIN */

/* : read_status */

	if rtrim (order) = "read_status" then do;
	     call iox_$control (p_iocb_ptr, "read_status",
		addr (read_status), p_code);
	     if p_code = 0 then do;
		if af_flag then
		     if read_status.input_pending then
			io_call_af_ret = "true";
		     else
			io_call_af_ret = "false";
		else
		     call report (
			"^a: Event channel=^24.3b, input is ^[^;"
			|| "not ^]available.", caller,
			unspec (read_status.event_channel),
			read_status.input_pending);
	     end;
	end;

/* : write_status */

	else if rtrim (order) = "write_status" then do;
	     call iox_$control (p_iocb_ptr, "write_status",
		addr (write_status), p_code);
	     if p_code = 0 then do;
		if af_flag then
		     if write_status.input_pending then
			io_call_af_ret = "true";
		     else
			io_call_af_ret = "false";
		else
		     call report (
			"^a: Event channel=^24.3b, output is ^[^;"
			|| "not ^]pending.", caller,
			unspec (write_status.event_channel),
			write_status.input_pending);
	     end;
	end;

/* : terminal_info */

	else if rtrim (order) = "terminal_info" then do;
	     info.version = 1;
	     call iox_$control (p_iocb_ptr, "terminal_info", addr (info),
		p_code);
	     if p_code = 0 then do;
		if info.line_type < lbound (line_types, 1)
		     | info.line_type > hbound (line_types, 1) then
		     call ioa_$rsnnl ("^d", temp_type, (0),
			info.line_type);
		else
		     temp_type = line_types (info.line_type);

		if af_flag then do;
		     if n_args = 0 then
			io_call_af_ret = rtrim (info.term_type);
		     else if io_call_info.args (1) = "id" then
			io_call_af_ret = rtrim (info.id);
		     else if io_call_info.args (1) = "baud" then
			call ioa_$rsnnl ("^d", io_call_af_ret, (0),
			     info.baud_rate);
		     else if io_call_info.args (1) = "terminal_type"
			then
			io_call_af_ret = rtrim (info.term_type);
		     else if io_call_info.args (1) = "line_type" then
			io_call_af_ret = rtrim (temp_type);
		     else
			call error (error_table_$badopt, caller,
			     "^a",
			     io_call_info.args (1));
		end;
		else
		     call report (
			"^a: Terminal id=""^a"", baud_rate=^d, "
			|| "term_type = ""^a"", line_type=""^a""",
			caller, info.id, info.baud_rate,
			info.term_type,
			temp_type);
	     end;
	end;

/* : Remaining orders are active functions only */

	else if af_flag then
	     call error (0, caller,
		"The ^a order is not valid as an active function.",
		order);

/* : store_id */

	else if rtrim (order) = "store_id" then do;
	     if n_args <= 0 then
		call error (error_table_$noarg, caller, "ID.");
	     else do;
		new_id = io_call_info.args (1);
		call iox_$control (p_iocb_ptr, "store_id",
		     addr (new_id),
		     p_code);
	     end;
	end;

/* : set_term_type */

	else if rtrim (order) = "set_term_type" then do;
	     if n_args <= 0 then
		call error (error_table_$noarg, caller, "Type.");
	     else do;

/* : -- Convert the new type into fixed bin format, if error then the type
        is of an ascii sequence and it must be hunted down in the tables */

		new_type = cv_dec_check_ ((io_call_info.args (1)), i);
		if i ^= 0 then do;
		     temp_type =
			translate (io_call_info.args (1),
			"ABCDEFGHIJKLMNOPQRSTUVWXYZ",
			"abcdefghijklmnopqrstuvwxyz");

/* : -- Hunt down terminal type in tty_dev_type table */

		     do new_type = lbound (tty_dev_type, 1)
			to hbound (tty_dev_type, 1);

/* : --- Got match */

			if tty_dev_type (new_type) = temp_type
			then do;
			     call iox_$control (p_iocb_ptr,
				"set_type",
				addr (new_type), p_code);
			     return;
			end;
		     end;

		     call error (0, caller, "Invalid type: ^a",
			io_call_info.args (1));
		     p_code = 0;
		end;
		else
		     call iox_$control (p_iocb_ptr, "set_type",
			addr (new_type), p_code);
	     end;
	end;

/* : line_length */

	else if rtrim (order) = "line_length" then do;
	     if n_args ^> 0 then
		call error (error_table_$noarg, caller, "Linelength.");
	     else do;
		line_length =
		     cv_dec_check_ ((io_call_info.args (1)), i);
		if i ^= 0 then
		     call error (0, caller, "Invalid line length: ^a",
			io_call_info.args (1));
		else
		     call iox_$control (p_iocb_ptr, "line_length",
			addr (line_length), p_code);
	     end;
	end;

/* : Otherwise see if the order can be passed on (null info_ptr allowed) */

	else do;
	     do i = 1 to hbound (info_orders, 1)
		while (order ^= info_orders (i));
	     end;

/* : If on the disapproved list then it's an error */

	     if i <= hbound (info_orders, 1) then
		call error (error_table_$undefined_order_request,
		     caller,
		     order);
	     else
		call iox_$control (p_iocb_ptr, (order), null (),
		     p_code);
	end;

%page;
/* INCLUDE FILES */
%include tty_read_status_info;
%include ttyp;
%include set_term_type_info;
%include line_types;
%include terminal_info;
%include io_call_info;

/* : END */
     end mowse_io_call_control_;
