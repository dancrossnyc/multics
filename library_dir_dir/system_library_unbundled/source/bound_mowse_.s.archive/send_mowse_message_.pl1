/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-07-01,Smith), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Created.
  2) change(86-11-21,Flegel), approve(86-12-10,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Approved.
  3) change(86-12-10,Flegel), approve(86-12-10,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Replaced signalling of mowse_fatal_error with a call to fatal_mowse_trap_.
                                                   END HISTORY COMMENTS */

/* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
send_mowse_message_:
     proc (p_mcb_ptr, p_local_system, p_local_major, p_remote_system,
	p_remote_major, p_remote_minor, p_msg_type, p_data_ptr,
	p_data_length, p_channel, p_code);


/* : PROGRAM FUNCTION

Send a message for an application on the remote machine; the message includes
local and remote major capability numbers, a minor capability number, and
possibly data.  There are 3 possible formats for the messages, depending on
its use:

format 1) message composed of major capability on remote machine followed by
minor capability on remote machine followed by major capability on local
machine followed by data

format 2) message composed of major capability on remote machine followed by
WS_SENT_MORE value followed by minor capability on remote machine followed by
major capability on local machine followed by data

format 3) message composed of major capability on local machine followed by
WS_REQUEST_MORE value followed by major capability on remote machine followed
by minor capability on remote machine
*/

/* : NOTES
*/

/* INPUT PARAMETERS */
dcl p_mcb_ptr	       ptr parameter;	    /* pointer to sender's mcb */
dcl p_local_system	       fixed bin parameter;	    /* local system id */
dcl p_local_major	       fixed bin parameter;	    /* senders major */
dcl p_remote_system	       fixed bin parameter;	    /* remote system id */
dcl p_remote_major	       fixed bin parameter;	    /* receiver's major */
dcl p_remote_minor	       fixed bin parameter;	    /* receiver's minor */
dcl p_msg_type	       fixed bin parameter;	    /* type of message */
dcl p_data_ptr	       ptr parameter;	    /* message pointer */
dcl p_data_length	       fixed bin parameter;	    /* length of message */
dcl p_channel	       fixed bin parameter;	    /* Channel of message */


/* OUTPUT PARAMETERS */
dcl p_code	       fixed bin (35);	    /* Error code */

/* MISC VARIABLES */
dcl mowse_info_ptr	       ptr;		    /* Pointer to Mowse info */
dcl local_data_ptr	       ptr;
dcl data		       char (p_data_length) based (p_data_ptr);
dcl message	       char (PACKET_SIZE);
dcl message_length	       fixed bin (17);
dcl some_space	       char (1);


/* STRUCTURES */
dcl 01 mowse_io_msg	       like mowse_io_message automatic;


/* SYSTEM CALLS */
dcl iox_$control	       entry (ptr, char (*), ptr, fixed bin (35));


/* SYSTEM CALL SUPPORT */
dcl ws_error_$invalid_continue_message
		       fixed bin (35) ext static;
dcl ws_error_$invalid_last_message
		       fixed bin (35) ext static;
dcl ws_error_$invalid_data_ptr
		       fixed bin (35) ext static;
dcl ws_error_$invalid_more_message
		       fixed bin (35) ext static;
dcl ws_error_$invalid_message
		       fixed bin (35) ext static;

/* EXTERNAL CALLS */
dcl get_mowse_info_ptr_    entry (ptr, ptr, fixed bin (35));
dcl trace_message_	       entry (ptr, ptr);
dcl fatal_mowse_trap_      entry (fixed bin (35));

/* EXTERNAL CALL SUPPORT */

/* BUILTINS */
dcl null		       builtin;
dcl addr		       builtin;
dcl byte		       builtin;
dcl rank		       builtin;
dcl substr	       builtin;

/* CONDITIONS */

/* CONSTANTS */
dcl TRUE		       bit (1) int static options (constant) init ("1"b);

/**/
/* INITIALIZATION */

	local_data_ptr = p_data_ptr;
	p_code = 0;
	call get_mowse_info_ptr_ (p_mcb_ptr, mowse_info_ptr, p_code);
	if p_code ^= 0 then
	     return;

/* MAIN */

/* : check for a null p_data_ptr given if the message type can contain data
     and the data length is not 0 */

	if p_data_ptr = null & p_data_length ^= 0 &
	     (p_msg_type = LAST | p_msg_type = MORE) then do;
	     p_code = ws_error_$invalid_data_ptr;
	     return;
	end;

/* : check for data exceeding packet size for last packet message type */

	if p_channel = BG then do;
	     if ((p_data_length - 5) > PACKET_SIZE) & (p_msg_type = LAST)
		then
		p_code = ws_error_$invalid_last_message;

/* : check for data exceeding packet size for other message type */

	     else if ((p_data_length - 6) > PACKET_SIZE) &
		(p_msg_type = CONTINUE) then
		p_code = ws_error_$invalid_continue_message;

	     else if (p_data_length ^= 6) & (p_msg_type = MORE) then
		p_code = ws_error_$invalid_more_message;
	end;
	else if p_channel = FG then do;
	     if ((p_data_length - 3) > PACKET_SIZE) then
		p_code = ws_error_$invalid_last_message;
	end;



/* : data lengths are okay, process message
     - assign a valid value in case ptr gets referenced */

	if local_data_ptr = null & p_data_length = 0 then
	     local_data_ptr = addr (some_space);

/* : - use p_msg_type to determine which message type to send
     - if p_msg_type = MORE then
     -- make a "MORE" message */

	if p_msg_type = MORE then do;
	     substr (message, 1, 1) = byte (p_local_system);
	     substr (message, 2, 1) = byte (p_local_major);
	     substr (message, 3, 1) = byte (MORE);
	     substr (message, 4, 1) = byte (p_remote_system);
	     substr (message, 5, 1) = byte (p_remote_major);
	     substr (message, 6, 1) = byte (p_remote_minor);
	     message_length = 6;

	     if mowse_info_ptr -> mowse_info.mowse_flags.trace = TRUE
	     then do;
		trace_message_info.direction = SEND;
		trace_message_info.from_system = p_remote_system;
		trace_message_info.from_major = p_remote_major;
		trace_message_info.dest_system = p_local_system;
		trace_message_info.dest_major = p_local_major;
		trace_message_info.dest_minor = -1;
		trace_message_info.msg_type = p_msg_type;
		trace_message_info.message = "<null>";
		call trace_message_ (
		     mowse_info_ptr
		     -> mowse_info.mowse_flags.trace_file_iocb,
		     addr (trace_message_info));
	     end;

/* : -- initialize the structure required to make the control order
     to send the message. */

	     mowse_io_msg.version = mowse_io_info_version_1;
	     mowse_io_msg.channel = p_channel;
	     mowse_io_msg.io_message_ptr = addr (message);
	     mowse_io_msg.io_message_len = message_length;
	end;

/* : - else if p_msg_type = CONTINUE then
     -- make a message with data specifying more to come */

	else if p_msg_type = CONTINUE then do;
	     substr (message, 1, 1) = byte (p_remote_system);
	     substr (message, 2, 1) = byte (p_remote_major);
	     substr (message, 3, 1) = byte (CONTINUE);
	     substr (message, 4, 1) = byte (p_remote_minor);
	     substr (message, 5, 1) = byte (p_local_system);
	     substr (message, 6, 1) = byte (p_local_major);
	     substr (message, 7, p_data_length) =
		substr (data, 1, p_data_length);
	     message_length = p_data_length + 6;

	     if mowse_info_ptr
		-> mowse_info.mowse_flags.trace = TRUE then do;

		trace_message_info.direction = SEND;
		trace_message_info.from_system = p_local_system;
		trace_message_info.from_major = p_local_major;
		trace_message_info.dest_system = p_remote_system;
		trace_message_info.dest_major = p_remote_major;
		trace_message_info.dest_minor = p_remote_minor;
		trace_message_info.msg_type = p_msg_type;
		trace_message_info.message =
		     substr (message, 7, p_data_length);
		call trace_message_ (mowse_info_ptr
		     -> mowse_info.mowse_flags.trace_file_iocb,
		     addr (trace_message_info));
	     end;

/* : -- allocate and initialize the structure required to make
        the control order to send the message. */

	     mowse_io_msg.version = mowse_io_info_version_1;
	     mowse_io_msg.channel = p_channel;
	     mowse_io_msg.io_message_ptr = addr (message);
	     mowse_io_msg.io_message_len = message_length;
	end;

/* : - else if p_msg_type = LAST then
     -- make final message to be send */

	else if p_msg_type = LAST then do;
	     if p_channel = FG then do;
		substr (message, 1, 1) = byte (p_remote_minor);
		substr (message, 2, 1) = byte (p_local_system);
		substr (message, 3, 1) = byte (p_local_major);
		substr (message, 4, p_data_length) =
		     substr (data, 1, p_data_length);
		message_length = p_data_length + 3;
	     end;
	     else do;
		substr (message, 1, 1) = byte (p_remote_system);
		substr (message, 2, 1) = byte (p_remote_major);
		substr (message, 3, 1) = byte (p_remote_minor);
		substr (message, 4, 1) = byte (p_local_system);
		substr (message, 5, 1) = byte (p_local_major);
		substr (message, 6, p_data_length) =
		     substr (data, 1, p_data_length);
		message_length = p_data_length + 5;
	     end;

	     if mowse_info_ptr
		-> mowse_info.mowse_flags.trace = TRUE then do;

		trace_message_info.direction = SEND;
		trace_message_info.from_system = p_local_system;
		trace_message_info.from_major = p_local_major;
		trace_message_info.dest_system = p_remote_system;
		trace_message_info.dest_major = p_remote_major;
		trace_message_info.dest_minor = p_remote_minor;
		trace_message_info.msg_type = p_msg_type;

		if p_remote_minor = PUT_TO_BACKGROUND_BUFFER |
		     p_remote_minor = PUT_TO_QUERY_MESSAGE_BUFFER then

		     trace_message_info.message =
			substr (message, 4, p_data_length);
		else
		     trace_message_info.message =
			substr (message, 6, p_data_length);

		call trace_message_ (mowse_info_ptr
		     -> mowse_info.mowse_flags.trace_file_iocb,
		     addr (trace_message_info));
	     end;

/* : -- allocate and initialize the structure required to make
        the control order to send the message. */

	     mowse_io_msg.version = mowse_io_info_version_1;
	     mowse_io_msg.channel = p_channel;
	     mowse_io_msg.io_message_ptr = addr (message);
	     mowse_io_msg.io_message_len = message_length;
	end;

/* : otherwise the message type specified is invalid
     (This should never happen) */

	else do;
	     call fatal_mowse_trap_ (ws_error_$invalid_message);
	     return;
	end;

/* : Perform iox_$control call to send message to destination */

/* COMPILER BUG AS THIS ALWAYS FAILED WHEN COMPILED WITH subscriptrange PREFIX */
(nosubscriptrange):
(nosize):
(nostringsize):
(nosubrg):
	if rank (substr (message, 1, 1)) = LOCAL_SYSTEM then do;
	     call iox_$control (p_mcb_ptr -> mcb.iocb_ptr,
		"send_local_message", addr (mowse_io_msg), p_code);
	end;
	else
	     call iox_$control (p_mcb_ptr -> mcb.iocb_ptr,
		"send_message", addr (mowse_io_msg), p_code);

	if p_code ^= 0 then do;
	     call fatal_mowse_trap_ (p_code);
	     return;
	end;

%page;
/* INCLUDE FILES */

%include mowse;
%include mowse_messages;
%include mowse_mcb;
%include mowse_io_control_info;
%include mowse_info;

/* : END */
     end;
