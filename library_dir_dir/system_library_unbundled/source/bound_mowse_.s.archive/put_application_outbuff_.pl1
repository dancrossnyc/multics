/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-07-03,Smith), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Created.
  2) change(86-11-27,Flegel), approve(86-11-27,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Approved.
                                                   END HISTORY COMMENTS */

/* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
put_application_outbuff_:
     proc (p_mcb_ptr, p_destination_system, p_destination_major,
	p_destination_minor, p_data_ptr, p_data_length, p_code);

/* : PROGRAM FUNCTION

Places data into the applicatio'n's output buffer and updates the required
field in the mcb of the application.
*/

/* : NOTES
*/


/* INPUT PARAMETERS */
dcl p_data_ptr	       ptr parameter;	    /* pointer to data to be placed in the buffer */
dcl p_mcb_ptr	       ptr parameter;	    /* Pointer to mcb of application */
dcl p_data_length	       fixed bin parameter;	    /* length of data to place in buffer */
dcl p_destination_system   fixed bin parameter;	    /* system destination of message */
dcl p_destination_major    fixed bin parameter;	    /* major capability destination */
dcl p_destination_minor    fixed bin parameter;	    /* minor destination */


/* OUTPUT PARAMETERS */
dcl p_code	       fixed bin (35);	    /* Error code */


/* MISC VARIABLES */
dcl output_buffer_ptr      ptr;
dcl data		       char (p_data_length) based (p_data_ptr);
					    /* data to be placed in buffer */
dcl bytes_to_copy	       fixed bin (17);	    /* length of data */
dcl system_free_area       area based (system_free_area_ptr);
dcl data_space	       char (bytes_to_copy) based;



/* STRUCTURES */


/* SYSTEM CALLS */


/* SYSTEM CALL SUPPORT */
dcl ws_error_$invalid_data_ptr
		       fixed bin (35) ext static;
dcl ws_error_$output_buffer_overflow
		       fixed bin (35) ext static;
dcl ws_error_$invalid_mcb  fixed bin (35) ext static;


/* EXTERNAL CALLS */
dcl get_system_free_area_  entry () returns (ptr);


/* EXTERNAL CALL SUPPORT */
dcl system_free_area_ptr   ptr;


/* BUILTINS */
dcl null		       builtin;
dcl byte		       builtin;
dcl min		       builtin;
dcl substr	       builtin;


/* CONDITIONS */


/* CONSTANTS */


/**/
/* INITIALIZATION */

	output_buffer_ptr = null;
	system_free_area_ptr = get_system_free_area_ ();

/* MAIN */

/* : if mcb_ptr is invalid, set error code */

	if p_mcb_ptr = null then
	     p_code = ws_error_$invalid_mcb;

/* : else if data_ptr is invalid, set error code */

	else if p_data_ptr = null then
	     p_code = ws_error_$invalid_data_ptr;

/* : else okay to copy
     - determine the amount characters to copy given the 
       size of the output buffer as upper limit */

	else do;
	     bytes_to_copy =
		min (p_mcb_ptr -> mcb.outbuff_length, p_data_length);

/* : - if all the data can be copied then set the code to 0 to indicate no
       errors otherwise set the code to indicate some data is truncated */

	     if bytes_to_copy = p_data_length then
		p_code = 0;
	     else
		p_code = ws_error_$output_buffer_overflow;

/* : allocate the output buffer is system space */

	     allocate output_buffer in (system_free_area)
		set (output_buffer_ptr);
	     output_buffer_ptr -> output_buffer.buffer_position = 0;
	     output_buffer_ptr -> output_buffer.buffer_length =
		bytes_to_copy;
	     output_buffer_ptr -> output_buffer.next_buffer = null;
	     output_buffer_ptr -> output_buffer.destination_system =
		byte (p_destination_system);
	     output_buffer_ptr -> output_buffer.destination_major =
		byte (p_destination_major);
	     output_buffer_ptr -> output_buffer.destination_minor =
		byte (p_destination_minor);
	     allocate data_space in (system_free_area)
		set (output_buffer_ptr -> output_buffer.data);

/* : copy the data into the output buffer set the data length field for
     the output buffer in the mcb */

	     substr (output_buffer_ptr -> output_buffer.data
		-> data_space, 1, bytes_to_copy) =
		substr (data, 1, bytes_to_copy);

/* : Attach the new buffer to the lists of buffers to be sent
     as messages to other capabilities. */

	     if p_mcb_ptr -> mcb.outbuff_list_start = null then do;
		p_mcb_ptr -> mcb.outbuff_list_start = output_buffer_ptr;
		p_mcb_ptr -> mcb.outbuff_list_end = output_buffer_ptr;
	     end;
	     else do;
		p_mcb_ptr -> mcb.outbuff_list_end
		     -> output_buffer.next_buffer = output_buffer_ptr;
		p_mcb_ptr -> mcb.outbuff_list_end = output_buffer_ptr;
	     end;
	end;

%page;
/* INCLUDE FILES */
%include "mowse";
%include "mowse_mcb";

/* : END */
     end;
