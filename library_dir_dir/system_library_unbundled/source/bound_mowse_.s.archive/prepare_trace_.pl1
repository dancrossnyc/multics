/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-11-04,Flegel), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Created.
  2) change(86-11-27,Flegel), approve(86-11-27,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Approved.
                                                   END HISTORY COMMENTS */

/* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
prepare_trace_:
     proc (p_message_ptr, p_message_len, p_trace_iocb_ptr, p_minor);

/* : PROGRAM FUNCTION

Prepare the trace message to be sent.
*/

/* : NOTES
*/

/* INPUT PARAMETERS */
dcl p_message_len	       fixed bin parameter;	    /* Length of message */
dcl p_message_ptr	       ptr;		    /* Message */
dcl p_trace_iocb_ptr       ptr;		    /* Trace IOCB */
dcl p_minor	       fixed bin parameter;	    /* Destination minor */


/* OUTPUT PARAMETERS */


/* MISC VARIABLES */


/* STRUCTURES */

/* First 2 fields in all messages */
dcl 01 message_overlay     based (p_message_ptr),
       02 system	       char (1) unal,
       02 major	       char (1) unal;

/* SYSTEM CALLS */


/* SYSTEM CALL SUPPORT */


/* EXTERNAL CALLS */
dcl trace_message_	       entry (ptr, ptr);


/* EXTERNAL CALL SUPPORT */


/* BUILTINS */
dcl addr		       builtin;
dcl rank		       builtin;
dcl substr	       builtin;

/* CONDITIONS */


/* CONSTANTS */


/**/
/* INITIALIZATION */


/* MAIN */
	trace_message_info.dest_system = rank (message_overlay.system);
	trace_message_info.dest_major = rank (message_overlay.major);
	trace_message_info.msg_type =
	     rank (p_message_ptr -> event_message.header.msg_type);
	trace_message_info.direction = RECEIVE;

	if rank (p_message_ptr -> event_message.header.msg_type)
	     = MORE then do;

	     trace_message_info.from_system =
		rank (p_message_ptr
		-> request_more_message.header.source_system);
	     trace_message_info.from_major =
		rank (p_message_ptr
		-> request_more_message.header.source_major);
	     trace_message_info.dest_minor = p_minor;
	     trace_message_info.message =
		p_message_ptr -> request_more_message.header.source_minor;
	     call trace_message_ (p_trace_iocb_ptr,
		addr (trace_message_info));
	end;

	else if rank (p_message_ptr -> event_message.header.msg_type)
	     = CONTINUE then do;

	     trace_message_info.from_system =
		rank (p_message_ptr
		-> more_remaining_message.header.source_system);
	     trace_message_info.from_major =
		rank (p_message_ptr
		-> more_remaining_message.header.source_major);
	     trace_message_info.dest_minor =
		rank (p_message_ptr
		-> more_remaining_message.header.minor);
	     trace_message_info.message =
		substr (p_message_ptr
		-> more_remaining_message.data.data_buf, 1,
		p_message_len - 6);
	     call trace_message_ (p_trace_iocb_ptr,
		addr (trace_message_info));
	end;

	else do;
	     trace_message_info.from_system =
		rank (p_message_ptr
		-> last_message.header.source_system);
	     trace_message_info.from_major =
		rank (p_message_ptr -> last_message.header.source_major);
	     trace_message_info.dest_minor =
		rank (p_message_ptr -> last_message.header.minor);
	     trace_message_info.message =
		substr (p_message_ptr
		-> last_message.data.data_buf, 1, p_message_len - 5);
	     trace_message_info.msg_type = LAST;
	     call trace_message_ (p_trace_iocb_ptr,
		addr (trace_message_info));
	end;

%page;
/* INCLUDE FILES */
%include mowse;
%include mowse_messages;

     end;
