/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-07-01,Smith), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Created.
  2) change(86-10-22,Smith), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Change code handling delete_from_remote_cat_ request so that no
     capability_name is expected in the alter_cat_message.  Include code
     for the handling of connect request messages.  Handled messages received
     with an invalid minor specified.
  3) change(86-11-27,Flegel), approve(86-11-27,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Approved.
                                                   END HISTORY COMMENTS */

/* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
internal_mowse_:
     proc (p_mcb_ptr, p_mess_len, p_minor, p_mess_ptr, p_ecode);


/* : PROGRAM FUNCTION

Determine the destination of the internal narc message depending on the minor
capability number and direct control appropriately. */

/* : NOTES
*/

/* INPUT PARAMETERS */
dcl p_mcb_ptr	       ptr parameter;	    /* mcb pointer of mowse_io_ */
dcl p_mess_len	       fixed bin parameter;	    /* Length of message */
dcl p_minor	       fixed bin parameter;	    /* Minor capability */
dcl p_mess_ptr	       ptr parameter;	    /* Pointer to message */
dcl p_ecode	       fixed bin (35) parameter;  /* Error code */


/* EXTERNAL CALLS */
dcl internal_connect_request_
		       entry (ptr, ptr, fixed bin, fixed bin (35));
dcl prepare_trace_	       entry (ptr, fixed bin, ptr, fixed bin);
dcl capability_$pack       entry (fixed bin, fixed bin, fixed bin,
		       fixed bin (35));
dcl send_msg_	       entry (ptr, fixed bin, fixed bin, ptr, fixed bin,
		       fixed bin, fixed bin (35));
dcl add_to_remote_cat_     entry (ptr, fixed bin, char (*), fixed bin (35));
dcl delete_from_remote_cat_
		       entry (ptr, fixed bin, fixed bin (35));
dcl get_mowse_info_ptr_    entry (ptr, ptr, fixed bin (35));
dcl ws_$put_background_message
		       entry () options (variable);
dcl execom_	       entry (ptr, fixed bin, char (*), fixed bin,
		       fixed bin, fixed bin, fixed bin (35));


/* MISC VARIABLES */
dcl cap_num	       fixed bin;
dcl destination	       fixed bin;		    /* source of message */
dcl major_name	       char (32);		    /* Capability name */
dcl old_modes	       char (256);		    /* returned from iox_$modes call */
dcl mowse_info_ptr	       ptr;		    /* Pointer to mowse info structure */
dcl command_id	       fixed bin;
dcl major_num	       fixed bin;


/* CONDITIONS */


/* BUILTINS */
dcl null		       builtin;
dcl substr	       builtin;
dcl rank		       builtin;

/* CONSTANTS */
dcl TRUE		       bit (1) int static options (constant) init ("1"b);
dcl FALSE		       bit (1) int static options (constant) init ("0"b);

/* SYSTEM CALLS */
dcl iox_$modes	       entry (ptr, char (*), char (*), fixed bin (35));

/* EXTERNAL CALL SUPPORT */


/**/

/* INITIALIZATION */

	p_ecode = 0;
	message_ptr = p_mess_ptr;
	message_len = p_mess_len;
	mowse_info_ptr = null;
	call get_mowse_info_ptr_ (p_mcb_ptr, mowse_info_ptr, p_ecode);
	if p_ecode ^= 0 then
	     return;

/* : MAIN */

/* : Call trace message to print message received */

	if mowse_info_ptr -> mowse_info.mowse_flags.trace = TRUE then
	     call prepare_trace_ (message_ptr, message_len,
		mowse_info_ptr -> mowse_info.mowse_flags.trace_file_iocb,
		0);

/* : - case SET_SLEEP_FLAG
     -- set the sleep flag of the source capability */

	if (p_minor = SET_SLEEP_FLAG) then do;
	     cap_num
		= rank (message_ptr -> last_message.header.source_major);
	     if cap_num < MINIMUM_CAT_ENTRY | cap_num > MAXIMUM_CAT_ENTRY
		then
		return;

	     mowse_info_ptr -> mowse_info.remote_cat (cap_num).sleep_time
		= "1"b;
	     return;
	end;

/* : - case RESET_SLEEP_FLAG
     -- clear the sleep flag of the source capability */

	if (p_minor = RESET_SLEEP_FLAG) then do;
	     cap_num
		= rank (message_ptr -> last_message.header.source_major);
	     if cap_num < MINIMUM_CAT_ENTRY | cap_num > MAXIMUM_CAT_ENTRY
		then
		return;

	     mowse_info_ptr -> mowse_info.remote_cat (cap_num).sleep_time
		= "0"b;
	     return;
	end;

/* : - case RESET_REPLY
     -- clear the reset flag on the source application (RESET_REPLYs only come
        from the remote system */

	if p_minor = RESET_REPLY then do;
	     cap_num
		= rank (message_ptr -> last_message.header.source_major);
	     if cap_num < MINIMUM_CAT_ENTRY | cap_num > MAXIMUM_CAT_ENTRY
		then
		return;

	     mowse_info_ptr -> mowse_info.remote_cat (cap_num).flags.reset
		= FALSE;
	     return;
	end;

/* : - case SET_SUSPEND
     -- set the suspend flag on the destination application (only come
        from the remote system) */

	if p_minor = SET_SUSPEND then do;
	     cap_num
		= rank (message_ptr -> last_message.header.source_major);
	     if cap_num < MINIMUM_CAT_ENTRY | cap_num > MAXIMUM_CAT_ENTRY
		then
		return;

	     mowse_info_ptr
		-> mowse_info.remote_cat (cap_num).flags.suspended
		= TRUE;
	     return;
	end;

/* : - case RESET_SUSPEND
     -- clear the suspend flag on the specified application (these only come
        from the remote system */

	if p_minor = RESET_SUSPEND then do;
	     cap_num
		= rank (message_ptr -> last_message.header.source_major);
	     if cap_num < MINIMUM_CAT_ENTRY | cap_num > MAXIMUM_CAT_ENTRY
		then
		return;

	     mowse_info_ptr
		-> mowse_info.remote_cat (cap_num).flags.suspended
		= FALSE;
	     return;
	end;

/* : - case EXECUTE_COMMAND:
     -- call procedure execom_ which will handle the execution of the command
        originating from some other system. */

	if (p_minor = EXECUTE_COMMAND) then do;
	     command_id = message_ptr -> execom_message.data.cmd_id;
	     call execom_ (p_mcb_ptr, message_len - 7,
		message_ptr -> execom_message.data.command, command_id,
		rank (message_ptr -> execom_message.header.source_system),
		rank (message_ptr -> execom_message.header.source_major),
		p_ecode);
	     p_ecode = 0;
	     return;
	end;

/* : - case EXECUTE_COMMAND_REPLY:
       (Execution of an application by mowse on startup failed)
     -- put a background message indicating the status of the execution
        (only if it failed) to the user. */

	if (p_minor = EXECUTE_COMMAND_REPLY) then do;
	     if (message_ptr -> execom_reply_msg.data.cmd_id = 0) &
		(rank (message_ptr -> execom_reply_msg.data.status) =
		STATUS_FAILED) then do;

		call ws_$put_background_message (p_mcb_ptr, 0, "MOWSE",
		     "Start up failed");
	     end;
	     p_ecode = 0;
	     return;
	end;

/* : - case ADD_TO_REMOTE_CAT:
     -- call procedure add_to_remote_cat_ with the capability_number and
        the name of the capability to be added to the remote CAT table. */

	if (p_minor = ADD_TO_REMOTE_CAT) then do;
	     if substr (message_ptr -> alter_cat_message.data.major_name, 1,
		6)
		= "WSTERM"
		then
		call iox_$modes (p_mcb_ptr -> mcb.iocb_ptr,
		     "", old_modes, p_ecode);

	     major_num = rank (message_ptr -> alter_cat_message.data.major);
	     major_name =
		substr (message_ptr -> alter_cat_message.data.major_name,
		1, p_mess_len - 6);
	     call add_to_remote_cat_ (p_mcb_ptr, major_num, major_name,
		p_ecode);

	     return;
	end;

/* : - case DELETE_FROM_REMOTE_CAT:
     -- call procedure delete_from_remote_cat_ with the capability_number and
        the name of the capability to be deleted from the remote CAT table. */

	if (p_minor = DELETE_FROM_REMOTE_CAT) then do;
	     cap_num =
		rank (message_ptr -> alter_cat_message.data.major);
	     call delete_from_remote_cat_ (p_mcb_ptr, cap_num, p_ecode);
	     return;
	end;

/* : - case REQUEST_CONNECT */

	if p_minor = REQUEST_CONNECT then do;
	     call internal_connect_request_ (p_mcb_ptr, p_mess_ptr,
		p_mess_len, p_ecode);
	     return;
	end;

/* : - case FAIL_CAPABILITY
       ignore it */

	if p_minor = FAIL_CAPABILITY then
	     return;

/* : Send execute_capability_failed message to source of illegal message */

	call capability_$pack (
	     rank (message_ptr -> input_message.header.source_system),
	     rank (message_ptr -> input_message.header.source_major),
	     destination, p_ecode);

/* : if source of message is illegal then ignore message
     else send execute_capability_reply message to source */

	if p_ecode ^= 0 then do;
	     p_ecode = 0;
	     return;
	end;

	call send_msg_ (p_mcb_ptr, destination, FAIL_CAPABILITY,
	     null, 0, BG, p_ecode);
	return;

%page;

/* INCLUDE FILES */
%include mowse_mcb;
%include mowse;
%include mowse_messages;
%include mowse_info;

/* : END internal_mowse_ */
     end internal_mowse_;
