/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1987 *
        *                                                         *
        *********************************************************** */

/* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
ws_packet_dispatcher_:
     proc (p_mio_data_ptr);


/* PROGRAM FUNCTION

This procedure is respoinsible for dispatching background packets to MOWSE
itself.  It actually works with packets and lets MOWSE do all of the assembly
of packets into complete messages and also lets MOWSE dispatch the message to
the appropriate background handler.
*/


/* NOTES

This procedure is to be called ONLY when the background processing flags have
been set - ie. there are no other invocations of ws_packet_dispatcher_
executing.
*/

/****^  HISTORY COMMENTS:
  1) change(87-04-16,Flegel), approve(87-06-23,MCR7649),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Created.
                                                   END HISTORY COMMENTS */

/* INPUT PARAMETERS */
dcl p_mio_data_ptr	       ptr parameter;	    /* MOWSE data */

/* OUTPUT PARAMETERS */
dcl p_code	       fixed bin (35) parameter;

/* MISC VARIABLES */
dcl buffer	       char (data_len) based (data_ptr);
dcl data_ptr	       ptr;
dcl code		       fixed bin (35);
dcl data		       (MaxDatLen) char (1);	    /* Data */
dcl data_len	       fixed bin (21);	    /* Data length */
dcl mio_data_ptr	       ptr int static;	    /* Local copy of mowse_io_data_ptr */

/* STRUCTURES */
dcl 01 mio_data	       like mowse_io_data based (mio_data_ptr);
dcl 01 fatal_error_info    aligned,
       02 version	       fixed bin,
       02 status_code      fixed bin (35);

/* SYSTEM CALLS */
dcl ipc_$delete_ev_chn     entry (fixed bin (71), fixed bin (35));
dcl ipc_$create_event_channel entry (ptr, fixed bin (71), fixed bin (35));

/* SYSTEM CALL SUPPORT */
dcl error_table_$no_table  fixed bin (35) ext static;

/* EXTERNAL CALLS */
dcl ws_tools_$getldat      entry (ptr, fixed bin, ptr) returns (fixed bin (21));
dcl ws_tools_$getdat       entry (ptr, fixed bin, ptr, fixed bin) returns (fixed bin);
dcl terminate_process_     entry (char (*), ptr);
dcl ws_packet_transmitter_$supervisory entry (ptr, char (1));
dcl rcvdat_	       entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl ws_debug_$line	       entry () options (variable);
dcl wake_up_sleeper_       entry (ptr, fixed bin);

/* EXTERNAL CALL SUPPORT */

/* BUILTINS */
dcl divide	       builtin;
dcl byte		       builtin;
dcl null		       builtin;
dcl addr		       builtin;
dcl clock		       builtin;

/* CONDITIONS */
dcl cleanup	       condition;
dcl mowse_io_error	       condition;

/* CONSTANTS */

/**/

/* INITIALIZATION */

/* MAIN */

	return;

/**/

%page;

/* INTERNAL ENTRIES */


/* *** Entry: initialize - Internal entry for ws_packet_dispatcher_  *** */

initialize:
     entry (p_mio_data_ptr, p_code);


/* ENTRY FUNCTION

Initialize the packet dispatcher.
*/

/* NOTES
*/

	mio_data_ptr = p_mio_data_ptr;

	call setup_channel (p_code);

	return;

/**/

/* *** Entry: processor - Internal entry for ws_packet_dispatcher_  *** */

processor:
     entry ();


/* ENTRY FUNCTION

This is the main entry into the dispatcher.  Entry is through an event
signalled on a call event channel.
*/

/* NOTES
*/

/* If already processing, then quit */

	if mio_data.task.active (BG_task) then
	     return;

	mio_data.task.active (BG_task) = ^Idle;
	on cleanup mio_data.task.active (BG_task) = Idle;

/* Process sleepers */

	if mio_data.sleepers ^= null then do;
	     if mio_data.info_ptr = null then
		goto NULL_MOWSE_TABLES;
	     call wakeup ();
	end;

/* Process each pending packet from the local system until all of the
   messages currently pending are processed, leaving any new messages
   for the next scheduler interrupt */

	data_len = ws_tools_$getldat (mio_data_ptr, BG, data_ptr);
	do while (data_len > 0);
	     if mio_data.info_ptr = null then
		goto NULL_MOWSE_TABLES;

	     call ws_debug_$line (mio_data.debug_iocb_ptr,
		"   ****** START LOCAL MESSAGE ******");

	     call rcvdat_ (mio_data.mcb_ptr, data_ptr, data_len, code);
	     free data_ptr -> buffer;

	     call ws_debug_$line (mio_data.debug_iocb_ptr,
		"   ****** DONE  LOCAL MESSAGE ******");

	     if code ^= 0 then do;
		signal mowse_io_error;
		mio_data.task.active (BG_task) = Idle;
		return;
	     end;

	     data_len = ws_tools_$getldat (mio_data_ptr, BG, data_ptr);
	end;

/* Process each pending packet from the remote system */

	data_len = ws_tools_$getdat (mio_data_ptr, BG, addr (data), MaxDatLen);
	do while (data_len > 0);
	     if mio_data.info_ptr = null then
		goto NULL_MOWSE_TABLES;

	     call ws_debug_$line (mio_data.debug_iocb_ptr,
		"****** START REMOTE MESSAGE ******");
	     call rcvdat_ (mio_data.mcb_ptr, addr (data), data_len, code);
	     call ws_debug_$line (mio_data.debug_iocb_ptr,
		"****** DONE  REMOTE MESSAGE ******");
	     if code ^= 0 then do;
		signal mowse_io_error;
		mio_data.task.active (BG_task) = Idle;
		return;
	     end;

	     data_len = ws_tools_$getdat (mio_data_ptr, BG, addr (data),
		MaxDatLen);
	end;

	mio_data.task.active (BG_task) = Idle;
	return;

/* If mowse_info has become null then MOWSE data base is screwed up
   and there is a real problem with MOWSE, so tell the PC to disconnect
   and signal FATAL PROCESS ERROR */

NULL_MOWSE_TABLES:
	mio_data.task.active (BG_task) = Idle;
	call ws_packet_transmitter_$supervisory (mio_data_ptr,
	     byte (FastDis));

	fatal_error_info.version = 0;
	fatal_error_info.status_code = error_table_$no_table;
	call terminate_process_ ("fatal_error", addr (fatal_error_info));

	return;

/**/

/* *** Entry: terminate - Internal entry for ws_packet_dispatcher_  *** */

terminate:
     entry ();


/* ENTRY FUNCTION

Shutdown all stuff associated with the dispatchig process.
*/

/* NOTES
*/

	if mio_data.channel_info.packet_dispatcher.async_channel ^= 0 then
	     call ipc_$delete_ev_chn (
		mio_data.channel_info.packet_dispatcher.async_channel,
		(0));

	if mio_data.channel_info.packet_dispatcher.sync_channel ^= 0 then
	     call ipc_$delete_ev_chn (
		mio_data.channel_info.packet_dispatcher.sync_channel, (0));

	mio_data_ptr = null;
	return;

/**/

%page;

/* INTERNAL PROCEDURES */


/* *** Procedure: setup_channel - Internal proc for ws_packet_dispatcher_  *** */

setup_channel:
     proc (p_code);


/* PROCEDURE FUNCTION

Setup a call channel where events are to be generated when there is something
to do.
*/

/* NOTES
*/

/* INPUT PARAMETERS */

/* OUTPUT PARAMETERS */
dcl p_code	       fixed bin (35) parameter;

/* MISC VARIABLES */

/* STRUCTURES */
dcl 01 ipc_arg	       like ipc_create_arg_structure aligned automatic;

/* INITIALIZATION */
	mio_data.channel_info.packet_dispatcher.async_channel = 0;
	mio_data.channel_info.packet_dispatcher.sync_channel = 0;

/* MAIN */
	ipc_arg.version = ipc_create_arg_structure_v1;
	ipc_arg.channel_type = CALL_EVENT_CHANNEL_TYPE;
	ipc_arg.call_entry = processor;
	ipc_arg.call_data_ptr = null;
	ipc_arg.call_priority = 0;
	call ipc_$create_event_channel (addr (ipc_arg),
	     mio_data.packet_dispatcher.async_channel, p_code);

	ipc_arg.version = ipc_create_arg_structure_v1;
	ipc_arg.channel_type = ASYNC_CALL_EVENT_CHANNEL_TYPE;
	ipc_arg.call_entry = processor;
	ipc_arg.call_data_ptr = null;
	ipc_arg.call_priority = 0;
	call ipc_$create_event_channel (addr (ipc_arg),
	     mio_data.packet_dispatcher.sync_channel, p_code);

     end setup_channel;

/**/

/* *** Procedure: wakeup - Internal proc for ws_packet_dispatcher_  *** */

wakeup:
     proc ();


/* PROCEDURE FUNCTION

Look through the list of currently sleeping applications and generate a call
to wak_up_sleeper_ if an appllication is to be awoken.
*/

/* NOTES
*/

/* INPUT PARAMETERS */

/* OUTPUT PARAMETERS */

/* MISC VARIABLES */
dcl temp_ptr	       ptr;		    /* Search reference ptr */
dcl current_time	       fixed bin (71);

/* STRUCTURES */
dcl 01 node	       like mowse_io_sleep_node based;

/* INITIALIZATION */
	current_time = divide (clock, 1000000, 0);

/* MAIN */

/* If none sleeping then return */

	if mio_data.sleepers = null then
	     return;

/* Wake up each of the sleepers who are to be awoken and remove the node
   from the list */

	do while (mio_data.sleepers -> node.when <= current_time);
	     temp_ptr = mio_data.sleepers;
	     mio_data.sleepers = mio_data.sleepers -> node.next;
	     if mio_data.sleepers ^= null then
		mio_data.sleepers -> node.last = null;

	     call ws_debug_$line (mio_data.debug_iocb_ptr,
		"   ****** START WAKEUP ******");
	     call wake_up_sleeper_ (mio_data.mcb_ptr, temp_ptr -> node.major);
	     call ws_debug_$line (mio_data.debug_iocb_ptr,
		"   ****** DONE WAKEUP *******");

	     free temp_ptr -> node;
	     temp_ptr = null;
	     if mio_data.sleepers = null then
		return;
	end;

     end wakeup;

/**/

%page;

/* INCLUDE FILES */
%include ipc_create_arg;
%include mowse_io_structures;
%include mowse_messages;
%include mowse_io_constants;
%include mowse;
%include mowse_io_data;

     end;
