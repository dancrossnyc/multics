/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-08-27,Smith), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Created.
  2) change(86-11-27,Flegel), approve(86-11-27,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Approved.
                                                   END HISTORY COMMENTS */

/* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
message_manager_:
     proc (p_mcb_ptr, p_msg_type, p_source_major, p_msg_ptr, p_msg_len,
	p_code);

/* : PROGRAM FUNCTION

This module manages incoming partial messages holding them until the entire
message is recieved and then passing the entire message to the destination
application.
*/

/* : NOTES
*/

/* INPUT PARAMETERS */
dcl p_mcb_ptr	       ptr;		    /* pointer to destination's mcb */
dcl p_msg_type	       fixed bin parameter;	    /* last, more or continue */
dcl p_source_major	       fixed bin parameter;
dcl p_msg_ptr	       ptr parameter;	    /* Pointer to message */
dcl p_msg_len	       fixed bin parameter;	    /* Length of message */



/* OUTPUT PARAMETERS */
dcl p_code	       fixed bin (35);	    /* Error code */

/* MISC VARIABLES */
dcl mowse_info_ptr	       ptr;		    /* Pointer to mowse info structure */
dcl 01 xtn	       like message_node based (xtn_ptr);
					    /* node space to be deallocated */
dcl xtn_ptr	       ptr;		    /* pointer to node space to be freed */
dcl 01 xtpm	       like partial_message based (xtpm_ptr);
dcl xtpm_ptr	       ptr;		    /* pointer to space to be freed */
dcl tpm_ptr	       ptr;		    /* temp partial message pointer */
dcl temp_msg	       char (p_msg_len) based (p_msg_ptr);
					    /* temp message overlay */
dcl tn_ptr	       ptr;		    /* temp pointer */
dcl found		       bit (1);		    /* loop control */
dcl done		       bit (1);		    /* loop control */
dcl new_msg	       ptr;		    /* pointer to space allocated for the new partial message */


/* STRUCTURES */


/* SYSTEM CALLS */
dcl get_system_free_area_  entry () returns (ptr);


/* SYSTEM CALL SUPPORT */
dcl system_free_area_ptr   ptr;		    /* pointer to system free area */
dcl system_free_area       area based (system_free_area_ptr);
					    /* system free area */


/* EXTERNAL CALLS */
dcl get_mowse_info_ptr_    entry (ptr, ptr, fixed bin (35));
dcl append_inbuff_	       entry (ptr, ptr, fixed bin, fixed bin (35));


/* EXTERNAL CALL SUPPORT */


/* BUILTINS */
dcl addr		       builtin;
dcl null		       builtin;
dcl substr	       builtin;


/* CONDITIONS */


/* CONSTANTS */
dcl TRUE		       bit (1) int static options (constant) init ("1"b);
dcl FALSE		       bit (1) int static options (constant) init ("0"b);

/**/
/* INITIALIZATION */

	system_free_area_ptr = get_system_free_area_ ();
	message_ptr = p_msg_ptr;
	message_len = p_msg_len;
	call get_mowse_info_ptr_ (p_mcb_ptr, mowse_info_ptr, p_code);
	if p_code ^= 0 then
	     return;

/* MAIN */

/* : If the message type is CONTINUE */

	if p_msg_type = CONTINUE then do;

/* : - If pointer to the head of the list is null then create
       a message node and attach to it the message */

	     if (mowse_info_ptr
		-> mowse_info.message_manager_info.head_list_ptr
		= null) then do;
		allocate message_node in (system_free_area);
		mowse_info_ptr
		     -> mowse_info.message_manager_info
		     .head_list_ptr =
		     msg_node_ptr;
		mowse_info_ptr
		     -> mowse_info.message_manager_info
		     .tail_list_ptr =
		     msg_node_ptr;
		mowse_info_ptr
		     -> mowse_info.message_manager_info
		     .pending_messages
		     = mowse_info_ptr
		     -> mowse_info.message_manager_info
		     .pending_messages
		     + 1;
		msg_node_ptr -> message_node.major = p_source_major;
		allocate partial_message in (system_free_area);
		msg_node_ptr -> message_node.partial_msg_list_ptr =
		     part_msg_ptr;
		msg_node_ptr -> message_node.last_part_msg =
		     part_msg_ptr;
		msg_node_ptr -> message_node.next_node = null;
		msg_node_ptr -> message_node.prev_node = null;
		part_msg_length = p_msg_len;
		allocate part_msg in (system_free_area) set (new_msg);
		part_msg_ptr -> partial_message.msg_ptr = new_msg;
		substr (new_msg -> part_msg, 1, p_msg_len) =
		     substr (p_msg_ptr -> temp_msg, 1, p_msg_len);
		part_msg_ptr -> partial_message.msg_len = part_msg_length;
		part_msg_ptr -> partial_message.next_msg = null;
	     end;

/* : - Else search through the list of nodes for one which has 
     the same source major as the message just received */

	     else do;
		done = FALSE;
		found = FALSE;
		tn_ptr =
		     mowse_info_ptr
		     -> mowse_info.message_manager_info.
		     head_list_ptr;
		do while (tn_ptr ^= null & ^done & ^found);
		     if tn_ptr -> message_node.major > p_source_major then
			done = TRUE;
		     else if tn_ptr -> message_node.major = p_source_major
		     then do;
			done = TRUE;
			found = TRUE;
		     end;
		     else
			tn_ptr = tn_ptr -> message_node.next_node;
		end;

/* : - If it is found then add the message to the list attached to
     this node */

		if found = TRUE then do;
		     allocate partial_message in (system_free_area);
		     part_msg_length = p_msg_len;
		     allocate part_msg in (system_free_area)
			set (new_msg);
		     part_msg_ptr -> partial_message.msg_ptr = new_msg;
		     substr (new_msg -> part_msg, 1, p_msg_len) =
			substr (p_msg_ptr -> temp_msg, 1, p_msg_len);
		     part_msg_ptr -> partial_message.msg_len =
			part_msg_length;
		     part_msg_ptr -> partial_message.next_msg = null;

		     if tn_ptr -> message_node.last_part_msg = null
		     then do;
			tn_ptr -> message_node.partial_msg_list_ptr =
			     part_msg_ptr;
			tn_ptr -> message_node.last_part_msg =
			     part_msg_ptr;
		     end;
		     else do;
			tn_ptr -> message_node.last_part_msg
			     -> partial_message.next_msg = part_msg_ptr;
			tn_ptr -> message_node.last_part_msg =
			     part_msg_ptr;
		     end;
		end;

/* : Else make a new message node and start a partial message list on the
     node */

		else do;
		     allocate message_node in (system_free_area);
		     mowse_info_ptr -> mowse_info.
			message_manager_info.pending_messages
			= mowse_info_ptr -> mowse_info.
			message_manager_info.pending_messages + 1;
		     msg_node_ptr -> message_node.major =
			p_source_major;
		     allocate partial_message in (system_free_area);
		     msg_node_ptr
			-> message_node.partial_msg_list_ptr =
			part_msg_ptr;
		     part_msg_length = p_msg_len;
		     allocate part_msg in (system_free_area)
			set (new_msg);
		     part_msg_ptr -> partial_message.msg_ptr = new_msg;
		     substr (new_msg -> part_msg, 1, p_msg_len) =
			substr (p_msg_ptr -> temp_msg, 1, p_msg_len);
		     part_msg_ptr -> partial_message.msg_len =
			part_msg_length;
		     part_msg_ptr -> partial_message.next_msg = null;

		     if mowse_info_ptr
			-> mowse_info.message_manager_info.head_list_ptr
			= tn_ptr then do;	    /* add to head */
			msg_node_ptr -> message_node.next_node = tn_ptr;
			msg_node_ptr -> message_node.prev_node = null;
			tn_ptr -> message_node.prev_node = msg_node_ptr;
			mowse_info_ptr -> mowse_info.
			     message_manager_info.head_list_ptr =
			     msg_node_ptr;
		     end;
		     else if tn_ptr = null then do;
					    /* append to end */
			msg_node_ptr -> message_node.next_node = null;
			msg_node_ptr -> message_node.prev_node =
			     mowse_info_ptr -> mowse_info.
			     message_manager_info.tail_list_ptr;
			mowse_info_ptr -> mowse_info.
			     message_manager_info.tail_list_ptr
			     -> message_node.next_node = msg_node_ptr;
			mowse_info_ptr -> mowse_info.
			     message_manager_info.tail_list_ptr =
			     msg_node_ptr;
		     end;
		     else if tn_ptr ^= null then do;
					    /* insert */
			tn_ptr -> message_node.prev_node
			     -> message_node.next_node = msg_node_ptr;
			msg_node_ptr -> message_node.next_node = tn_ptr;
			msg_node_ptr -> message_node.prev_node =
			     tn_ptr -> message_node.prev_node;
			tn_ptr -> message_node.prev_node = msg_node_ptr;
		     end;
		end;
	     end;
	end;

/* : Else if the message type is LAST
     - Search through the list of nodes for one with the same
       source major. */

	else if p_msg_type = LAST then do;
	     done = FALSE;
	     found = FALSE;
	     tn_ptr = mowse_info_ptr -> mowse_info.message_manager_info.
		head_list_ptr;
	     do while (tn_ptr ^= null & ^done & ^found);
		if tn_ptr -> message_node.major > p_source_major then
		     done = TRUE;
		else if tn_ptr -> message_node.major = p_source_major
		then do;
		     done = TRUE;
		     found = TRUE;
		end;
		else
		     tn_ptr = tn_ptr -> message_node.next_node;
	     end;

/* : - If a node is not found the place the last message is the
     input buffer of the application */

	     if found = FALSE then do;
		call append_inbuff_ (p_mcb_ptr,
		     addr (message_ptr -> last_message.data.data_buf),
		     message_len - 5, p_code);
	     end;

/* : - Else place all messages in the list attached to the node
     into the buffer of the application and then place the last
     message into the buffer */

	     else do;
		tpm_ptr = tn_ptr -> message_node.partial_msg_list_ptr;
		do while (tpm_ptr ^= null);
		     message_ptr = tpm_ptr -> partial_message.msg_ptr;
		     message_len = tpm_ptr -> partial_message.msg_len;
		     call append_inbuff_ (p_mcb_ptr,
			addr (message_ptr
			-> more_remaining_message.data.data_buf),
			message_len - 6, p_code);
		     xtpm_ptr = tpm_ptr;
		     tpm_ptr = tpm_ptr -> partial_message.next_msg;

		     free xtpm;
		     xtpm_ptr = null;
		end;
		xtn_ptr = tn_ptr;
		if mowse_info_ptr -> mowse_info.
		     message_manager_info.head_list_ptr = tn_ptr
		then do;			    /* delete from head of list */
		     mowse_info_ptr -> mowse_info.
			message_manager_info.head_list_ptr =
			tn_ptr -> message_node.next_node;
		     if tn_ptr -> message_node.next_node ^= null then
			tn_ptr -> message_node.next_node
			     -> message_node.prev_node = null;
		end;
		else if mowse_info_ptr -> mowse_info.
		     message_manager_info.tail_list_ptr = tn_ptr
		then do;			    /* delete from tail of list */
		     mowse_info_ptr -> mowse_info.
			message_manager_info.tail_list_ptr =
			tn_ptr -> message_node.prev_node;
		     if tn_ptr -> message_node.next_node ^= null then
			tn_ptr -> message_node.prev_node
			     -> message_node.next_node = null;
		end;
		else do;			    /* delete from middle of list */
		     tn_ptr -> message_node.prev_node
			-> message_node.next_node = tn_ptr
			-> message_node.next_node;
		     tn_ptr -> message_node.next_node
			-> message_node.prev_node = tn_ptr
			-> message_node.prev_node;
		end;

		free xtn;
		xtn_ptr = null;

/* : Send the last part of message to application buffer */

		message_ptr = p_msg_ptr;
		message_len = p_msg_len;

		call append_inbuff_ (p_mcb_ptr,
		     addr (message_ptr -> last_message.data.data_buf),
		     message_len - 5, p_code);
	     end;
	end;

%page;
/* INCLUDE FILES */
%include mowse;
%include mowse_mcb;
%include mowse_info;
%include mowse_messages;

/* : END */
     end;
