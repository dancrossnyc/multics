/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-08-27,Smith), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Created.
  2) change(86-11-27,Flegel), approve(86-11-27,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Approved.
                                                   END HISTORY COMMENTS */
/* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
append_inbuff_:
     proc (p_mcb_ptr, p_data, p_data_length, p_code);

/* PROGRAM FUNCTION

Append p_data to the application program's input buffer and update mcb input
buffer fields.
*/

/* : NOTES
*/


/* INPUT PARAMETERS */
dcl p_mcb_ptr	       ptr parameter;	    /* mcb contains inbuff info */
dcl p_data	       ptr parameter;	    /* data to append */
dcl p_data_length	       fixed bin (17) parameter;  /* length of data */

/* OUTPUT PARAMETERS */
dcl p_code	       fixed bin (35);	    /* Error code */


/* SYSTEM CALL SUPPORT */
dcl ws_error_$input_buffer_overflow
		       fixed bin (35) ext static;


/* MISC VARIABLES */
dcl input_data	       char (p_data_length) based (p_data);
dcl p		       ptr;		    /* pointer to application's buffer */
dcl input_buffer	       char (p_mcb_ptr -> mcb.inbuff_length) based (p);
dcl effective_data_length  fixed bin;
dcl buffer_space_left      fixed bin;

/* BUILTINS */
dcl substr	       builtin;

/**/

/* INITIALIZATION */
	p_code = 0;
	effective_data_length = p_data_length;

/* MAIN */

/* : determine amount of space left in the input buffer */

	buffer_space_left = p_mcb_ptr -> mcb.inbuff_length -
	     p_mcb_ptr -> inbuff_position_index;

/* : if amount of space left is less than amount of p_data to append set
     amount to copy to the amount of buffer space left  set p_code to indicate
     input buffer overflow took place  */

	if buffer_space_left < p_data_length then do;
	     effective_data_length = buffer_space_left;
	     p_code = ws_error_$input_buffer_overflow;
	end;

/* : - if there is space in buffer to copy p_data then copy p_data into the
       input buffer update the position index in the mcb for next time */

	if buffer_space_left > 0 then do;
	     p = p_mcb_ptr -> mcb.inbuff;
	     substr (input_buffer,
		p_mcb_ptr -> mcb.inbuff_position_index + 1,
		effective_data_length) =
		substr (input_data, 1, effective_data_length);

	     p_mcb_ptr -> mcb.inbuff_position_index =
		p_mcb_ptr -> mcb.inbuff_position_index
		+ effective_data_length;
	end;

%page;

/* INCLUDE FILES */

%include "mowse";
%include "mowse_mcb";

/* : END */
     end append_inbuff_;
