/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-07-01,Smith), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Created.
  2) change(86-11-27,Flegel), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Corrected minor capability number sending for multiple long messages
     pending when sending the current message.
  3) change(86-11-27,Flegel), approve(86-11-27,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Approved.
  4) change(86-11-27,Flegel), approve(86-11-27,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Corrected handling of multiple long messages (although these aren't
     properly supported in MOWSE protocol of long messages).
                                                   END HISTORY COMMENTS */

/* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
send_outbuff_data_:
     proc (p_mcb_ptr, p_system, p_major, p_minor, p_ecode);

/* : PROGRAM FUNCTION

Sends the contents of the output buffer to an application on the remote
machine.  Only one packet of data is sent per call to this routine.  If the
data exceeds the packet size, as much of the data as possible is sent in a
SENT_MORE type format 2) message otherwise all the data is sent in a SENT_LAST
type (format 1) message.  The pointers and fields in the mcb indicating the
location of the output buffer and where to sent the next batch of data will be
updated.  See mowse>mu_side>d>long_message_format for formats.
*/

/* : NOTES
*/


/* INPUT PARAMETERS */
dcl p_mcb_ptr	       ptr parameter;	    /* mcb contains outbuff info */
dcl p_system	       fixed bin (17) parameter;  /* system to send data to */
dcl p_major	       fixed bin parameter;	    /* capability to send data to */
dcl p_minor	       fixed bin parameter;	    /* minor of data */
dcl p_ecode	       fixed bin (35) parameter;  /* error code */


/* MISC VARIABLES */
dcl minor		       fixed bin;		    /* Minor cap of message protion */
dcl data_space	       (p_mcb_ptr -> mcb.outbuff_length) char
		       based (data_ptr);
dcl message_data	       ptr;
dcl data_ptr	       ptr;
dcl mowse_info_ptr	       ptr;		    /* Pointer to mowse info structure */
dcl system	       fixed bin;
dcl major		       fixed bin;
dcl channel	       fixed bin;
dcl chars_left	       fixed bin;
dcl chars_to_send	       fixed bin;
dcl used_output_buffer_len fixed bin;
dcl used_output_buffer     char (used_output_buffer_len) based (temp_ptr);
dcl temp_ptr	       ptr;


/* SYSTEM CALL SUPPORT */
dcl ws_error_$invalid_system_id
		       fixed bin (35) ext static;
dcl ws_error_$input_buffer_empty
		       fixed bin (35) ext static;
dcl ws_error_$invalid_capability_number
		       fixed bin (35) ext static;

/* EXTERNAL CALLS */
dcl send_mowse_message_    entry (ptr, fixed bin, fixed bin, fixed bin,
		       fixed bin, fixed bin, fixed bin, ptr,
		       fixed bin, fixed bin, fixed bin (35));
dcl get_mowse_info_ptr_    entry (ptr, ptr, fixed bin (35));
dcl capability_$unpack     entry (fixed bin, fixed bin, fixed bin,
		       fixed bin (35));

/* BUILTINS */
dcl addr		       builtin;
dcl null		       builtin;
dcl rank		       builtin;


/**/

/* INITIALIZATION */
	call get_mowse_info_ptr_ (p_mcb_ptr, mowse_info_ptr, p_ecode);
	if p_ecode ^= 0 then
	     return;

/* MAIN */

	channel = BG;
	if p_major < MINIMUM_CAT_ENTRY |
	     p_major > MAXIMUM_CAT_ENTRY then do;
	     p_ecode = ws_error_$invalid_capability_number;
	     return;
	end;

	if (p_system = REMOTE_SYSTEM) then
	     if (mowse_info_ptr
		-> mowse_info.remote_cat (p_major).major_capability = 0)
		|
		(p_mcb_ptr = null) then do;
		p_ecode = ws_error_$invalid_capability_number;
		return;
	     end;
	     else if (p_system = LOCAL_SYSTEM) then
		if (mowse_info_ptr
		     -> mowse_info.local_cat (p_major).mcb_ptr
		     ^= p_mcb_ptr)
		then do;
		     p_ecode = ws_error_$invalid_capability_number;
		     return;
		end;
		else do;
		     p_ecode = ws_error_$invalid_system_id;
		     return;
		end;

	call capability_$unpack (system, major,
	     (p_mcb_ptr -> mcb.major_capability), p_ecode);
	if p_ecode ^= 0 then
	     return;

/* : if the list of buffers to be sent is empty then return */

	if p_mcb_ptr -> mcb.outbuff_list_start = null then do;
	     p_ecode = 0;
	     return;
	end;

/* : get total number of characters left in message  */

	chars_left = p_mcb_ptr -> mcb.outbuff_list_start
	     -> output_buffer.buffer_length
	     - p_mcb_ptr -> mcb.outbuff_list_start
	     -> output_buffer.buffer_position;

/* : if the list is not empty then send a portion of the mesaage
     which is at most PACKET_SIZE long */

	if chars_left <= 0 then do;
	     p_ecode = ws_error_$input_buffer_empty;
	     return;
	end;

	if (chars_left <= (PACKET_SIZE - 6)) then
	     chars_to_send = chars_left;
	else
	     chars_to_send = PACKET_SIZE - 6;

/* : Get the data to send */

	data_ptr
	     = p_mcb_ptr -> mcb.outbuff_list_start -> output_buffer.data;
	message_data =
	     addr (data_ptr -> data_space
	     (p_mcb_ptr -> mcb.outbuff_list_start
	     -> output_buffer.buffer_position + 1));

/* : Figure out if this is the last or there is more in the message and
     then send it */

	if chars_to_send < chars_left then
	     minor = CONTINUE;
	else
	     minor = LAST;

	call send_mowse_message_ (p_mcb_ptr, system, major,
	     rank (p_mcb_ptr -> mcb.outbuff_list_start
	     -> output_buffer.destination_system),
	     rank (p_mcb_ptr -> mcb.outbuff_list_start
	     -> output_buffer.destination_major),
	     rank (p_mcb_ptr -> mcb.outbuff_list_start
	     -> output_buffer.destination_minor),
	     minor, message_data, chars_to_send, channel, p_ecode);
	if p_ecode ^= 0 then
	     return;

/* : Adjust the indexes in the outbuff data, there are two different
     circumstances of update depending on the length of the message that was
     sent */

	if chars_to_send < chars_left then do;
	     p_mcb_ptr -> mcb.outbuff_list_start
		-> output_buffer.buffer_position
		=
		p_mcb_ptr -> mcb.outbuff_list_start
		-> output_buffer.buffer_position
		+ chars_to_send;
	end;
	else do;
	     temp_ptr = p_mcb_ptr -> mcb.outbuff_list_start;
	     p_mcb_ptr -> mcb.outbuff_list_start
		= temp_ptr -> output_buffer.next_buffer;
	     used_output_buffer_len
		= temp_ptr -> output_buffer.buffer_length;
	     free temp_ptr -> output_buffer.data -> used_output_buffer;
	     free temp_ptr -> output_buffer;
	     temp_ptr = null;
	end;

%page;

/* INCLUDE FILES */

%include mowse;
%include mowse_info;
%include mowse_mcb;
%include mowse_messages;

/* : END send_outbuff_data_ */
     end send_outbuff_data_;
