/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-09-01,Flegel), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Created.
  2) change(86-10-07,Flegel), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Allowed to provide a match to a second parameter in the attach
     description for searching.
  3) change(86-11-27,Flegel), approve(86-11-27,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Approved.
                                                   END HISTORY COMMENTS */
/* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
get_at_:
     proc (p_io_name, p_attached_to, p_iocb_ptr, p_code);

/* : PROGRAM FUNCTION

Find the iocb attached to before p_io_name.
*/

/* : NOTES

If none can be found, p_code is set to error_table_$no_iocb and iocb_ptr
is null.
*/


/* INPUT PARAMETERS */
dcl p_io_name	       char (*);		    /* IO module name to look for */
dcl p_attached_to	       char (*);		    /* Second name in description to look for */


/* OUTPUT PARAMETERS */
dcl p_code	       fixed bin (35);
dcl p_iocb_ptr	       ptr;		    /* Pointer to iocb which is above p_io_name */


/* MISC VARIABLES */
dcl right		       fixed bin;		    /* Right index into attach descript */
dcl left		       fixed bin;		    /* Left index into attach descript */
dcl atd_ptr	       ptr;		    /* Temp pointer to attach description */
dcl atd		       char (256) var based (atd_ptr);
					    /* Attach description */
dcl switch_name	       char (256) var;
dcl found		       bit (1);
dcl code		       fixed bin (35);
dcl iocb_ptr	       ptr;		    /* IOCB pointer */


/* SYSTEM CALLS */
dcl iox_$look_iocb	       entry (char (*), ptr, fixed bin (35));


/* SYSTEM CALL SUPPORT */
dcl error_table_$no_iocb   fixed bin (35) ext static;
dcl iox_$user_io	       ptr ext static;


/* BUILTINS */
dcl null		       builtin;
dcl index		       builtin;
dcl length	       builtin;
dcl ltrim		       builtin;
dcl rtrim		       builtin;
dcl substr	       builtin;

/**/

/* INITIALIZATION */
	p_code = 0;

/* MAIN */

/* : Traverse the attach descriptions to find tty_ */

	iocb_ptr = iox_$user_io;
	atd_ptr = iocb_ptr -> iocb.attach_descrip_ptr;
	found = "0"b;
	do while (^found);

/* : - If found who is attached to p_io_name and p_attached_to if not null */

	     found = (ltrim (rtrim (substr (atd, 1, index (atd, " ") - 1)))
		= p_io_name);
	     if found & p_attached_to ^= "" then
		found = (ltrim (rtrim (substr (atd, index (atd, " ") + 1,
		     length (p_attached_to)))) = p_attached_to);

/* : - Else get the next iocb
     -- Calculate the name of the next iocb */

	     if ^found then do;
		left = index (atd_ptr -> atd, " ");
		switch_name = ltrim (substr (atd_ptr -> atd, left));
		right = index (switch_name, " ");
		if right ^= 0 then
		     switch_name = rtrim (substr (switch_name, 1, right));

/* : -- Find next iocb, if none then error */

		call iox_$look_iocb (
		     substr (switch_name, 1, length (switch_name)),
		     iocb_ptr, code);
		if code ^= 0 | atd_ptr = null then do;
		     p_code = error_table_$no_iocb;
		     p_iocb_ptr = null;
		     return;
		end;
		atd_ptr = iocb_ptr -> iocb.attach_descrip_ptr;
	     end;
	end;

/* : Found switch name */

	p_iocb_ptr = iocb_ptr;

%page;
/* INCLUDE FILES */
%include iocbv;

/* : END */
     end get_at_;
