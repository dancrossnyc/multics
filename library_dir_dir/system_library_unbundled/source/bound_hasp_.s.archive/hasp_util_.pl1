/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: off */

/* Support functions for use by user-ring HASP I/O modules */

/* Created:  December 1979 by G. Palter */
/* Modified: 13 January 1980 by G. Palter to have the character to be treated as a space for compression/expansion be a
      parameter rather than fixed as the EBCDIC space character */
/* Modified: 22 July 1981 by G. Palter to compress only spaces in order to increase the performance of HASP I/O switches */
/* Modified: 15 December 1982 by G. Palter to return error_table_$short_record if the expand_text entry reaches the end of
      the input buffer normally without finding an end-of-record indicator */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen */


hasp_util_:
     procedure ();

	return;					/* not an entry */


/* Error returns */

OUTPUT_BUFFER_OVERFLOWS:
	if expand_entry then			/* reflect what part was processed */
	     P_input_text_used = input_text_used - 1;
	else P_input_text_used = input_text_used;
	P_output_buffer_used = output_buffer_used;
	P_code = error_table_$long_record;
	return;

BAD_DATA_FORMAT:
	P_input_text_used = input_text_used - 1;	/* this much processed successfully */
	P_output_buffer_used = output_buffer_used;
	P_code = error_table_$improper_data_format;
	return;


/* Parameters */

dcl  P_input_text_ptr pointer parameter;		/* -> text to be compressed or decompressed (I) */
dcl  P_input_text_lth fixed binary (21) parameter;	/* length of above text (I) */
dcl  P_input_text_used fixed binary (21) parameter;	/* amount of above text processed (I/O) */

dcl  P_output_buffer_ptr pointer parameter;		/* -> buffer to hold resulting text (I) */
dcl  P_output_buffer_lth fixed binary (21) parameter;	/* size of above buffer (I) */
dcl  P_output_buffer_used fixed binary (21) parameter;	/* amount of above buffer used (I/O) */

dcl  P_space character (1) aligned parameter;		/* treated as a space for compression/expansion (I) */

dcl  P_code fixed binary (35) parameter;		/* status code (O) */


/* Local copies of parameters */

dcl  input_text_ptr pointer;
dcl  (input_text_lth, input_text_used) fixed binary (21);

dcl  output_buffer_ptr pointer;
dcl  (output_buffer_lth, output_buffer_used) fixed binary (21);

dcl  space character (1);


/* Remaining declarations */

dcl  input_text character (input_text_lth) unaligned based (input_text_ptr);
dcl  input_text_array (input_text_lth) character (1) unaligned based (input_text_ptr);

dcl  output_buffer character (output_buffer_lth) unaligned based (output_buffer_ptr);
dcl  output_buffer_array (output_buffer_lth) character (1) unaligned based (output_buffer_ptr);

dcl  scb_char character (1) unaligned based (scb_char_ptr);
dcl  1 scb unaligned based (scb_char_ptr) like hasp_scb_byte;
dcl  1 not_compressed_scb unaligned based (scb_char_ptr) like hasp_not_compressed_scb_byte;
dcl  1 compressed_scb unaligned based (scb_char_ptr) like hasp_compressed_scb_byte;
dcl  scb_char_ptr pointer;

dcl  expand_entry bit (1) aligned;			/* ON => expand_text entry; OFF => compress_text entry */

dcl  space_space character (2);

dcl  the_character character (1) unaligned;
dcl  is_space bit (1) aligned;

dcl  (amount_to_scan, first_duplicate_idx, compression_count, count) fixed binary (21);

dcl  found_eor bit (1) aligned;			/* found end-of-record while expanding */

/* format: off */
dcl (error_table_$improper_data_format, error_table_$long_record, error_table_$short_record)
	fixed binary (35) external;
/* format: on */

dcl  (addr, index, min, substr, verify) builtin;
%page;
/* Compress text:  apply HASP compression algorithm on the supplied text, placing result into given output buffer */

compress_text:
     entry (P_input_text_ptr, P_input_text_lth, P_input_text_used, P_output_buffer_ptr, P_output_buffer_lth,
	P_output_buffer_used, P_space, P_code);

	expand_entry = "0"b;

	input_text_ptr = P_input_text_ptr;
	input_text_lth = P_input_text_lth;
	input_text_used = P_input_text_used;

	output_buffer_ptr = P_output_buffer_ptr;
	output_buffer_lth = P_output_buffer_lth;
	output_buffer_used = P_output_buffer_used;

	space = P_space;
	space_space = space || space;


	call add_scb_char ();			/* add an initial SCB for this piece of text */

	do while (input_text_used < input_text_lth);

	     amount_to_scan =
		min ((input_text_lth - input_text_used),
		(HASP_MAX_NOT_COMPRESSED_TEXT_LTH - not_compressed_scb.count));

	     first_duplicate_idx = index (substr (input_text, (input_text_used + 1), amount_to_scan), space_space);

/*	     do first_duplicate_idx = 1 to (amount_to_scan - 1) */
/*		while (substr (input_text, (input_text_used+first_duplicate_idx), 1) */
/*		      ^= substr (input_text, (input_text_used+first_duplicate_idx+1), 1)); */
/*	     end; */
/* search for first duplicated character */


/*	     if first_duplicate_idx = amount_to_scan */
	     if first_duplicate_idx = 0 then do;

/* No duplicates found: in this portion of the text, no duplicate characters were found so this portion will be copied
   directly to the output buffer.  The size of this substring was computed to not overflow the possibly partially-used SCB
   already at the end of the output buffer */

		call copy_for_compression (amount_to_scan);
		if input_text_used < input_text_lth then call add_scb_char ();
	     end;


	     else do;

/* Duplicate characters found: copy any portion of the string before these characters; if more than two of this character
   appears in the string, use the compressed form of the SCB to save space in the output buffer */

		if first_duplicate_idx > 1 then	/* some text appears before the duplicates */
		     call copy_for_compression (first_duplicate_idx - 1);

		the_character = substr (input_text, (input_text_used + 1), 1);
		is_space = (the_character = space);
		compression_count = verify (substr (input_text, (input_text_used + 1)), the_character) - 1;
		if compression_count = -1 then	/* rest of string is the same character */
		     compression_count = input_text_lth - input_text_used;

		if compression_count > 2 then do;	/* compression is possible */
		     if not_compressed_scb.count = 0 then output_buffer_used = output_buffer_used - 1;
		     count = compression_count;
		     do while (count > 0);
			call add_scb_char ();
			scb.not_compressed = "0"b;
			compressed_scb.not_blank = ^is_space;
			compressed_scb.count = min (count, HASP_MAX_COMPRESSED_TEXT_LTH);
			if ^is_space then do;
			     if output_buffer_used = output_buffer_lth then do;
				output_buffer_used = output_buffer_used - 1;
				go to OUTPUT_BUFFER_OVERFLOWS;
			     end;			/* be sure to flush the SCB before returning */
			     output_buffer_used = output_buffer_used + 1;
			     substr (output_buffer, output_buffer_used, 1) = the_character;
			end;
			count = count - compressed_scb.count;
			input_text_used = input_text_used + compressed_scb.count;
		     end;
		     if input_text_used < input_text_lth then call add_scb_char ();
		end;

		else do;				/* duplicate is too short to benifit from compression */
		     call copy_for_compression (compression_count);
		     if (not_compressed_scb.count = HASP_MAX_NOT_COMPRESSED_TEXT_LTH)
			& (input_text_used < input_text_lth) then
			call add_scb_char ();
		end;
	     end;
	end;


	P_input_text_used = input_text_used;		/* reflect what was done to caller */
	P_output_buffer_used = output_buffer_used;
	P_code = 0;

	return;
%page;
/* Expand text:  apply the inverse of the HASP compression algorithm on the supplied text, placing the result into the
   given output buffer.  If the entire input text is successfully processed but an end-of-record string control byte (SCB)
   is not found, error_table_$short_record will be returned */

expand_text:
     entry (P_input_text_ptr, P_input_text_lth, P_input_text_used, P_output_buffer_ptr, P_output_buffer_lth,
	P_output_buffer_used, P_space, P_code);

	expand_entry = "1"b;			/* for output overflow error handling */

	input_text_ptr = P_input_text_ptr;
	input_text_lth = P_input_text_lth;
	input_text_used = P_input_text_used;

	output_buffer_ptr = P_output_buffer_ptr;
	output_buffer_lth = P_output_buffer_lth;
	output_buffer_used = P_output_buffer_used;

	space = P_space;

	found_eor = "0"b;				/* haven't seen EOR yet */


	do while (input_text_used < input_text_lth);

	     input_text_used = input_text_used + 1;	/* have picked up an SCB */
	     scb_char_ptr = addr (input_text_array (input_text_used));

	     if scb_char = HASP_EOR_SCB then do;	/* found the end of a record */
		found_eor = "1"b;
		go to RETURN_FROM_EXPAND_TEXT;
	     end;


	     else if scb.not_compressed then do;

/* A piece of not compressed text:  simply copy it to the output buffer */

		count = not_compressed_scb.count;

		if (input_text_used + count) > input_text_lth then go to BAD_DATA_FORMAT;
						/* not enough text in input stream */
		if (output_buffer_used + count) > output_buffer_lth then go to OUTPUT_BUFFER_OVERFLOWS;

		substr (output_buffer, (output_buffer_used + 1), count) =
		     substr (input_text, (input_text_used + 1), count);

		input_text_used = input_text_used + count;
		output_buffer_used = output_buffer_used + count;
	     end;


	     else do;

/* A piece of compressed text:  duplicate the requested character in the output buffer */

		count = compressed_scb.count;

		if compressed_scb.not_blank then do;	/* not space: get the character */
		     if (input_text_used + 1) > input_text_lth then go to BAD_DATA_FORMAT;
		     input_text_used = input_text_used + 1;
		     the_character = substr (input_text, input_text_used, 1);
		end;

		else the_character = space;		/* compressed character is a space */

		if (output_buffer_used + count) > output_buffer_lth then go to OUTPUT_BUFFER_OVERFLOWS;

		substr (output_buffer, (output_buffer_used + 1), count) = copy (the_character, count);

		output_buffer_used = output_buffer_used + count;
	     end;
	end;


RETURN_FROM_EXPAND_TEXT:
	P_input_text_used = input_text_used;
	P_output_buffer_used = output_buffer_used;

	if found_eor then				/* processing terminated at end-of-record */
	     P_code = 0;
	else P_code = error_table_$short_record;	/* processing terminated at end of input text */

	return;
%page;
/* Add an SCB character to the output buffer */

add_scb_char:
     procedure ();

	if output_buffer_used = output_buffer_lth then go to OUTPUT_BUFFER_OVERFLOWS;

	output_buffer_used = output_buffer_used + 1;

	scb_char_ptr = addr (output_buffer_array (output_buffer_used));

	scb.not_eor = "1"b;
	scb.not_compressed = "1"b;
	not_compressed_scb.count = 0;

	return;

     end add_scb_char;



/* Copy a piece of text from the input string to the output buffer and update the SCB character count */

copy_for_compression:
     procedure (P_n_characters);

dcl  P_n_characters fixed binary (21) parameter;
dcl  n_characters fixed binary (21);

	n_characters = P_n_characters;

	if (output_buffer_used + n_characters) > output_buffer_lth then go to OUTPUT_BUFFER_OVERFLOWS;

	substr (output_buffer, (output_buffer_used + 1), n_characters) =
	     substr (input_text, (input_text_used + 1), n_characters);
	output_buffer_used = output_buffer_used + n_characters;

	not_compressed_scb.count = not_compressed_scb.count + n_characters;

	input_text_used = input_text_used + n_characters; /* advance "pointer" past text already compressed */

	return;

     end copy_for_compression;
%page;
%include hasp_srcb_scb_bytes;

     end hasp_util_;
