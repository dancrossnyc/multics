/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/* IO Daemon Driver Module - designed to run as a HASP workstation for one of the devices associated with the station.
   The possible devices are:

   READER - send jobs to the host as if this pgm is a card reader.
   PRINTER - receive print files from the host.
   PUNCH - receive punch files (card decks) from the host.

   The device to be run by the process is specified in the minor_args with the dev= key as follows:
   "reader_out" => READER device, "printer_in" => PRINTER device, "punch_in" => PUNCH device.

   The process can only run one of the possible HASP devices.  There must be a separate process for each active device.
*/

/* format: style4 */

/* Created by J. C. Whitmore, Feb. 1980. */
/* Modified: September 1980 by G. Palter to make auto_queue the default, eliminate ident= minor_args keyword and ident
   command, and add request_type= minor_args keyword and request_type command */
/* Modified: 30 September 1981 by G. Palter to use proper maximum length for the request type name (24 characters) */
/* Modified: 24 November 1981 by G. Palter to implement the auto_receive parameter */
/* Modified: February 23, 1985 by C. Marker to use version 5 message segments */


/****^  HISTORY COMMENTS:
  1) change(87-05-10,Gilcrease), approve(87-05-13,MCR7686),
     audit(88-02-01,Farley), install(88-02-02,MR12.2-1019):
     Update to version 4 dprint_msg.
  2) change(88-08-19,Brunelle), approve(88-08-19,MCR7911),
     audit(88-10-21,Wallman), install(88-10-28,MR12.2-1199):
     Upgraded to version 5 iod tables.
  3) change(88-08-25,Farley), approve(88-08-19,MCR7911),
     audit(88-10-18,Wallman), install(88-10-28,MR12.2-1199):
     Updated to allow for version 5 dprint_msg.
  4) change(89-06-15,Brunelle), approve(89-09-18,MCR8129),
     audit(89-09-29,Beattie), install(89-10-03,MR12.3-1083):
     Correct generation of major/minor_args_ptr when using offset into the I/O
     daemon tables string area.
                                                   END HISTORY COMMENTS */


hasp_ws_sim_driver_:
     procedure ();

	return;					/* not an entry */


/* Parameters */

dcl  a_argp ptr parameter;
dcl  a_source fixed bin parameter;			/* 1 = master console, 2 = slave */
dcl  a_state fixed bin parameter;			/* 0 = not quite ready to handle a request */
						/* 1 = drivers are ready */
						/* 2 = command entered after a quit */
dcl  a_stream char (*) parameter;
dcl  a_banner_type fixed bin parameter;			/* type of banner to be written  */
						/* 1 = heading banner            */
						/* 2 = tail banner               */
						/* 3 = error message             */

dcl  a_data_ptr ptr parameter;			/* pointer to output request data or  */
						/* to char(256) varying string error msg */

dcl  a_code fixed bin (35) parameter;			/* error code */


/* Other declarations */

dcl  age fixed bin;
dcl  argp ptr;
dcl  banner_type fixed bin;
dcl  code fixed bin (35);
dcl  date_string char (24);
dcl  device_type char (32);
dcl  element_size fixed bin;
dcl  format_code fixed bin;
dcl  generic_type character (32);
dcl  ignore fixed bin (35);
dcl  last fixed bin;
dcl  local_request_type character (24);
dcl  iocbp ptr;
dcl  major_args char (major_args_length) based (major_args_ptr);
dcl  major_args_ptr ptr;
dcl  major_args_length fixed bin;
dcl  major_args_name char (256) varying;
dcl  minor_args char (minor_args_length) based (minor_args_ptr);
dcl  minor_args_ptr ptr;
dcl  minor_args_length fixed bin;
dcl  minor_args_name char (256) varying;
dcl  omode char (256);
dcl  p ptr;
dcl  p2 ptr;
dcl  save_code fixed bin (35);
dcl  source fixed bin;
dcl  state fixed bin;
dcl  value fixed bin;
dcl  value_string character (256) varying;

dcl  1 term_info aligned like terminal_info;

dcl  1 hangup_info aligned,				/* structure used to set hangup_info proc */
       2 entry entry,
       2 data_ptr ptr,
       2 priority fixed bin;

dcl  1 read_info aligned,
       2 read_ev_chan fixed bin (71),
       2 input_ready bit (1) unal;

dcl  1 ev_chan_list aligned based,
       2 number fixed bin,
       2 channel (12) fixed bin (71);

dcl  1 static_receive_data aligned int static like receive_file_data;
dcl  static_default_request_type character (32) internal static initial (""); /* request type specified in iod_tables */

dcl  sys_dir char (168) based;

dcl  1 arg_list aligned based (argp),			/* parse_command_ structure */
       2 max_tokens fixed bin,			/* space allocated, do not change */
       2 n_tokens fixed bin,				/* number of tokens from command line (including cmd) */
       2 command char (64) var,			/* the first token is the command */
       2 arg (n_tokens - 1) char (64) var;		/* the other tokens are args to the command */

dcl  add_char_offset_ entry (ptr, fixed bin (21)) returns (ptr) reducible;
dcl  continue_to_signal_ entry (fixed bin (35));
dcl  expand_pathname_$component entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl  iod_info_$generic_type entry (character (*), character (32), fixed binary (35));
dcl  initiate_file_$component entry (char (*), char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
dcl  iodd_msg_ entry options (variable);
dcl  iodd_parse_$args entry (char (*) var, char (*)) returns (char (256) var);
dcl  iodd_hangup_$iodd_hangup_ entry;
dcl  set_iod_val entry (char (*), char (*));
dcl  iox_$attach_ioname entry (char (*), ptr, char (*), fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (36), fixed bin (35));
dcl  iox_$control entry (ptr, char (*), ptr, fixed bin (35));
dcl  iox_$modes entry (ptr, char (*), char (*), fixed bin (35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  iodd_listen_ entry (ptr);
dcl  output_request_ entry (char (*), fixed bin, ptr, entry, fixed bin (35));
dcl  output_request_$set_single_copy entry ();
dcl  output_request_$error_during_request entry (char (*));
dcl  pool_manager_$init entry (char (*), fixed bin, bit (36) aligned, fixed bin (35));
dcl  pool_manager_$clean_pool entry (char (*), fixed bin, fixed bin, fixed bin (35));
dcl  receive_file_ entry (char (*), ptr, char (*), ptr, fixed bin (35));
dcl  timer_manager_$sleep entry (fixed bin (71), bit (2) aligned);

dcl  space char (1) int static options (constant) init (" ");
dcl  master fixed bin int static options (constant) init (1);
dcl  slave fixed bin int static options (constant) init (2);
dcl  both fixed bin int static options (constant) init (0); /* master and slave for iodd_msg_ */
dcl  log fixed bin int static options (constant) init (0);
dcl  normal fixed bin int static options (constant) init (1);
dcl  error fixed bin int static options (constant) init (2);

dcl  punch_rmcc_mode fixed bin int static options (constant) init (3);

dcl  initial_punch_rate fixed bin int static options (constant) init (500); /* same for the punch */

dcl  head_banner fixed bin int static options (constant) init (1);

dcl  default_request_types (2) character (32) static options (constant) /* default for dprinting received files */
	initial ("printer", "punch");

dcl  myname char (19) int static init ("hasp_ws_sim_driver_") options (constant);

dcl  time fixed bin (71) int static init (10);
dcl  pool_dir char (168) int static init ("");
dcl  station char (32) int static;

dcl  1 static_sw_info aligned int static like sw_info;	/* allocate a copy of this structure */

dcl  (addr, character, clock, convert, divide, length, ltrim, null, rtrim) builtin;

dcl  (cleanup, command_level, re_init, no_coord, daemon_new_device, daemon_logout, daemon_slave_logout, conversion)
	condition;

dcl  (error_table_$action_not_performed, error_table_$bigarg, error_table_$fatal_error, error_table_$io_no_permission,
     error_table_$undefined_order_request, error_table_$ionmat, error_table_$not_detached, error_table_$not_closed)
	fixed binary (35) external;

/**/

/* Initialize the driver */

init:
     entry (a_argp);

	stat_p = a_argp;				/* put the arg into static for easy reference */
	station = "Undefined!";			/* clear station name for any messages */
	text_strings_ptr = iodd_static.text_strings_ptr;	/* get ptr to i/o daemon table text area */

	if iodd_static.attach_type ^= ATTACH_TYPE_TTY then do; /* this driver expects a tty channel */
	     call iodd_msg_ (error, master, error_table_$fatal_error, myname,
		"The HASP workstation simulator driver requires a line: statement in iod_tables.");
	     return;				/* quit now */
	end;

	if iodd_static.assigned_devices > 1 then do;	/* remember, we can only use one device per process */
	     call iodd_msg_ (error, master, error_table_$fatal_error, myname,
		"The HASP workstation simulator driver only supports one minor device per process.");
	     return;
	end;

	iodd_static.dev_io_stream,
	     iodd_static.dev_in_stream = "Undefined_stream!"; /* we don't use these in this proc */

	on daemon_logout call drop_device;
	on daemon_slave_logout go to logout_slave;
	on daemon_new_device call drop_device;
	on no_coord call drop_device;
	on cleanup call detach_device;

/* locate major args for this device in the i/o daemon tables text area */
	major_args_ptr = add_char_offset_ (addr (text_strings.chars), iodd_static.major_args.first_char - 1);
	major_args_length = iodd_static.major_args.total_chars;

/* see if user wants major args to be found in a segment */
	major_args_name = iodd_parse_$args ("indirect=", major_args);
	if major_args_name ^= "" then do;		/* yes, grab that segment */
	     call initiate_the_file (major_args_name, major_args_ptr, major_args_length, "major_args", code);
	     if code ^= 0 then
		go to clean_out;
	end;

	station = iodd_parse_$args ("station=", major_args);	/* station in major must be defined */
	if station = "" then do;			/* station not defined */
	     call iodd_msg_ (error, master, error_table_$fatal_error, myname,
		"No station specified in major args.");
	     go to clean_out;
	end;

	static_receive_data.version = receive_file_data_version_1;
	static_receive_data.flags = "0"b;		/* clear the default operating modes */
	static_receive_data.testing = iodd_static.test_entry; /* copy the testing bit */
	static_receive_data.request_type = "Undefined!";
	static_receive_data.device_type = 0;		/* illegal value */
	term_info.version = terminal_info_version;	/* set version number once for all possible calls */
	term_info.baud_rate = 0;			/* initialize to no-op just in case */

	p = iodd_static.driver_ptr;			/* this was set by iodd_ */

	p -> driver_status.dev_out_iocbp = null ();
	p -> driver_status.dev_ctl_ptr = null ();

	p -> driver_status.bit_rate_est = 0;		/* no output rate defined yet */
	p -> driver_status.defer_time_limit = 0;	/* make operator specify */
	p -> driver_status.dev_out_stream = "null_stream";

/* locate minor args for this minor device in the i/o daemon tables text area */
	minor_args_ptr = add_char_offset_ (addr (text_strings.chars), p -> driver_status.minor_args.first_char -1);
	minor_args_length = p -> driver_status.minor_args.total_chars;

/* see if user wants minor args to be found in a segment */
	minor_args_name = iodd_parse_$args ("indirect=", minor_args);
	if minor_args_name ^= "" then do;		/* yes, grab that segment */
	     call initiate_the_file (minor_args_name, minor_args_ptr, minor_args_length,
		"minor_args", code);
	     if code ^= 0 then
		go to clean_out;
	end;

	device_type = iodd_parse_$args ("dev=", minor_args);	/* copy for easy reference */

	if device_type = "reader_out" then do;
	     p -> driver_status.attached = "1"b;	/* we will get requests from coord for this one */
	     call iodd_msg_ (normal, both, 0, "", "^/Initializing reader output device: ^a", p -> driver_status.device_id);

	     p -> driver_status.generic_type = "punch";	/* we expect user dpunch functions for this one */

	     call minor_attach (device_type);

	     p -> driver_status.elem_size = 9;		/* in this driver, this is just a place holder */
	     p -> driver_status.message_type = 2;	/* type of dprint msg expected */
	     p -> driver_status.ready = "1"b;		/* mark as ready to save operator cmd */

	     call iox_$control (p -> driver_status.dev_out_iocbp, "terminal_info", addr (term_info), code);
	     if code = 0
	     then p -> driver_status.bit_rate_est = term_info.baud_rate;
	     else p -> driver_status.bit_rate_est = initial_punch_rate;

	     if p -> driver_status.rqti_ptr ^= null then
		call iodd_msg_ (normal, master, 0, myname, "This driver cannot decode an rqti seg.");
	end;
	else if device_type = "printer_in" | device_type = "punch_in" then do;
	     p -> driver_status.attached = "0"b;	/* it is never attached as far as coord knows */

	     call iodd_msg_ (normal, both, 0, "", "^/Initializing ^[printer^;punch^] input device: ^a",
		(device_type = "printer_in"), p -> driver_status.device_id);

	     p -> driver_status.generic_type = device_type;

	     call minor_attach (device_type);

	     call iox_$control (p -> driver_status.dev_in_iocbp, "read_status", addr (read_info), code);
	     if code ^= 0 then go to clean_out;

	     sw_info_p = addr (static_sw_info);		/* init the local switch info for receive_file_ */
	     sw_info.version = sw_info_version_1;
	     sw_info.iocbp (1) = iodd_static.master_in;
	     sw_info.ev_chan (1) = iodd_static.chan_list_ptr -> ev_chan_list.channel (1);
	     last = 2;				/* default to 2 channels: master & device */
	     if iodd_static.slave.active then do;	/* 3 channels if there is a slave */
		sw_info.iocbp (last) = iodd_static.slave_in; /* put the salve after the master */
		sw_info.ev_chan (last) = iodd_static.slave_ev_chan; /* for lower priority */
		last = last + 1;			/* bump index of where the last iocbp will go */
	     end;
	     sw_info.iocbp (last) = p -> driver_status.dev_in_iocbp; /* put the device in the last place */
	     sw_info.ev_chan (last) = read_info.read_ev_chan;
	     sw_info.wait_list.n_channels = last;	/* set the list count to the index */
	     sw_info.n_iocb_ptrs = last;		/* also here */

	     value_string = iodd_parse_$args ("auto_queue=", minor_args);
	     if (value_string = "") | (value_string = "yes") then /* defaults to auto_queue if not given */
		static_receive_data.no_ident, static_receive_data.auto_queue = "1"b;
	     else if (value_string = "no") then
		static_receive_data.no_ident, static_receive_data.auto_queue = "0"b;
	     else do;				/* bad value for the keyword */
		call iodd_msg_ (normal, master, 0, myname,
		     "Invalid ""auto_queue="" argument ""^a"" for minor device ^a.",
		     value_string, p -> driver_status.device_id);
		go to clean_out;
	     end;

	     if device_type = "printer_in" then		/* set device_type before checking for request types */
		static_receive_data.device_type = printer_input_device;
	     else static_receive_data.device_type = punch_input_device;

	     value_string = iodd_parse_$args ("request_type=", minor_args);
	     if (value_string = "") then		/* not specified: try rqt keyword */
		value_string = iodd_parse_$args ("rqt=", minor_args);

	     if (value_string = "") then		/* use default request type */
		static_default_request_type,
		     static_receive_data.request_type = default_request_types (static_receive_data.device_type);

	     else do;				/* request type was specified */
		if length (value_string) > length (local_request_type) then do;
		     call iodd_msg_ (normal, master, error_table_$bigarg, myname,
			"For minor device ^a: request type name must be less than ^d characters long; not ""^a"".",
			p -> driver_status.device_id, (length (local_request_type) + 1), value_string);
		     go to clean_out;
		end;
		local_request_type = value_string;
		call iod_info_$generic_type (local_request_type, generic_type, code);
		if code ^= 0 then do;
		     call iodd_msg_ (normal, master, code, myname, """^a"" for minor device ^a.",
			local_request_type, p -> driver_status.device_id);
		     go to clean_out;
		end;
		if ((static_receive_data.device_type = printer_input_device) & (generic_type ^= "printer")) |
		     ((static_receive_data.device_type = punch_input_device) & (generic_type ^= "punch"))
		then do;				/* wrong type of request type for this driver */
		     call iodd_msg_ (normal, master, 0, myname,
			"For minor device ^a: request type ""^a"" must be of generic type ^[printer^;punch^]; not ""^a"".",
			p -> driver_status.device_id, local_request_type,
			static_receive_data.device_type, generic_type);
		     go to clean_out;
		end;
		static_default_request_type,
		     static_receive_data.request_type = local_request_type;
	     end;

	     if iodd_static.test_entry then		/* use a dummy pool root under pool_dir for test */
		pool_dir = rtrim (iodd_static.sys_dir_ptr -> sys_dir) || ">card_pool"; /* the test pool root */
	     else pool_dir = "System_Card_Pool";	/* otherwise use the one coded in */

	     call pool_manager_$init (pool_dir, 10, "1000"b, code); /* use 10 pages of quota initially */
						/* and set s *.*.* on initial acl of access class pool */
	     if code ^= 0 then do;			/* oops! */
		call iodd_msg_ (normal, master, code, myname, "Unable to initialize card pool.");
		go to clean_out;
	     end;
	end;
	else do;					/* someone slipped in a zinger */
	     call iodd_msg_ (normal, master, 0, myname, "Invalid ""dev="" arg ""^a"" for minor device ^a.",
		device_type, p -> driver_status.device_id);
	     go to clean_out;
	end;

	call set_iod_val ("station_id", rtrim (station));

	iodd_static.admin_ec_name = rtrim (station) || "_admin.ec";

	iodd_static.slave_hold = "1"b;		/* we override the rqti on auto_go */


	call date_time_ (clock (), date_string);	/* get set for ready message */
	call iodd_msg_ (normal, both, 0, "", "^/^a driver on channel ^a ready at ^16a^/",
	     iodd_static.major_device, iodd_static.attach_name, date_string);

	if (device_type = "printer_in") | (device_type = "punch_in")
	then do;					/* check for auto_receive */
	     value_string = iodd_parse_$args ("auto_receive=", minor_args);
	     if (value_string = "yes")
	     then do;
		call iodd_msg_ (normal, source, 0, "", "Waiting for file input.");
		on command_level goto abort_auto_receive; /* grab control after record quota overflow */
		call receive_file_ (pool_dir, addr (static_sw_info), station, addr (static_receive_data), code);
		if code ^= 0 then call iodd_msg_ (normal, source, myname, code, "From receive_file_ ");
abort_auto_receive:
	     end;					/* and go to command level afterwards */
	     else if (value_string = "no")
	     then ;				/* nothing special need be done here */
	     else do;
		call iodd_msg_ (normal, master, 0, myname,
		     "Invalid ""auto_receive="" value ""^a"" for minor device ^a.",
		     value_string, p -> driver_status.device_id);
		go to clean_out;
	     end;
	end;
	else do;					/* don't accept auto_receive for readers */
	     if iodd_parse_$args ("auto_receive=", minor_args) ^= ""
	     then do;
		call iodd_msg_ (normal, master, 0, myname,
		     "auto_receive parameter may not be specified for the reader_in minor device ^a.",
		     p -> driver_status.device_id);
		go to clean_out;
	     end;
	end;

	call iodd_listen_ (stat_p);


clean_out:

/*  This is only for error recovery during initialization.  The listener will never return here. */

	call drop_device;

	return;

logout_slave:					/* logout the slave device but not the process */

	iodd_static.re_init_in_progress = "1"b;		/* we do this by re-initializing the driver */

	call date_time_ (clock (), date_string);	/* get set for message */
	iodd_static.slave.log_msg = "1"b;		/* send to log and slave */
	call iodd_msg_ (log, both, 0, "", "Logout for station: ^a at ^a", station, date_string);

	call iox_$control (iodd_static.slave_out, "runout", null, code);

	call iox_$control (iodd_static.slave_out, "end_write_mode", null, code);

	call drop_device;

	call iodd_msg_ (normal, master, 0, "", "Driver starting re-initialization.");

	go to iodd_static.re_init_label;		/* this will do everything */
%page;
/* Issue a hangup to the device before detaching */

drop_device:
     procedure ();

dcl  send_hangup bit (1);
dcl  p ptr;

	send_hangup = "1"b;				/* tell close_and_detach proc to send hangup */
	go to device_common;

detach_device:
     entry ();

          send_hangup = "0"b;				/* tell close_and_detach proc to not send hangup */
device_common:
	p = iodd_static.driver_ptr;

	call close_and_detach (p -> driver_status.dev_out_iocbp, send_hangup);

	call continue_to_signal_ ((0));		/* in case this is called from a handler */

	return;

     end drop_device;
%page;
/* This entry is called by iodd_listen_ when a request has been received from the coordinator for the remote device.  Here
   we just check to be sure that we can understand the request format and the requested punch data format.  Then the
   request is passed on to output_request_ which actually handles processing of the request */

request:
     entry ();

	p = iodd_static.driver_ptr;			/* find the current driver */
	p2 = addr (p -> driver_status.descriptor);	/* find the request descriptor */
	dmp = addr (p -> driver_status.message);	/* get ptr to message */

	if dmp -> queue_msg_hdr.hdr_version ^= queue_msg_hdr_version_1 then do; /* trouble */
	     call iodd_msg_ (log, both, 0, "", "Invalid message header.  Cannot read request ^d.^d.",
		p2 -> request_descriptor.seq_id, p2 -> request_descriptor.q);
	     p2 -> request_descriptor.keep_in_queue = "1"b; /* save for conversion later */
	     go to be_nice;
	end;
	if dmp -> queue_msg_hdr.message_type ^= p -> driver_status.message_type then do;
	     call iodd_msg_ (log, both, 0, "",		/* log the error */
		"Incorrect message type.^/Request ^d.^d for ^a (segment ^a) not processed.",
		p2 -> request_descriptor.seq_id, p2 -> request_descriptor.q,
		p2 -> request_descriptor.mseg_message_info_copy.sender_id,
		dmp -> queue_msg_hdr.ename);
	     p2 -> request_descriptor.cancelled = "1"b;	/* we don't want this one again */
be_nice:	     p2 -> request_descriptor.dont_delete = "1"b; /* save the user's data */
	     p2 -> request_descriptor.finished = "1"b;	/* mark it done */
	     return;				/* it wasn't for us after all */
	end;
	if dprint_msg.version ^= dprint_msg_version_5	/* Current version */
	& dprint_msg.version ^= dprint_msg_version_4	/* Previous version */
	& dprint_msg.version ^= dprint_msg_version_3	/* Previous version */
	then do;					/* other trouble? */
	     call iodd_msg_ (log, both, 0, "",
		"Wrong message version found.^/Request ^d.^d for ^a (segment ^a) not processed",
		p2 -> request_descriptor.seq_id, p2 -> request_descriptor.q,
		p2 -> request_descriptor.mseg_message_info_copy.sender_id,
		dmp -> queue_msg_hdr.ename);
	     p2 -> request_descriptor.keep_in_queue = "1"b;
	     go to be_nice;
	end;
	if dprint_msg.version < dprint_msg_version_4 then /* Disallow line numbers before version 4 */
	     dprint_msg.control.line_nbrs = "0"b;

	format_code = dprint_msg.output_module;		/* get the user defined format */

	if format_code = punch_rmcc_mode then do;	/* for character output */
	     element_size = 9;			/* for output_request_ */
	end;
	else do;					/* be sure it is defined */
	     call iodd_msg_ (log, both, 0, "",
		"Illegal output format in user request.^/Request ^d.^d for ^a (segment ^a) not processed",
		p2 -> request_descriptor.seq_id, p2 -> request_descriptor.q,
		p2 -> request_descriptor.mseg_message_info_copy.sender_id,
		dmp -> queue_msg_hdr.ename);
	     p2 -> request_descriptor.cancelled = "1"b;	/* we don't want this one again */
	     go to be_nice;
	end;

	iodd_static.quit_during_request = "0"b;		/* start clean */
%page;
	on cleanup begin;
	     call iox_$control (p -> driver_status.dev_out_iocbp, "end_write_mode", null, (0));
	end;

	call output_request_ ((p -> driver_status.dev_out_stream), element_size, stat_p, print_banner, code);
	if code ^= 0 then do;
	     iodd_static.slave_hold = "1"b;		/* on errors go to command level for guidance */
	     if code = error_table_$io_no_permission then do; /* in case of hangup... */
		call iodd_msg_ (error, master, code, myname,
		     "Device in inconsistent state or hungup.  Must re-initialize.");
		signal re_init;
	     end;
	end;

	call iox_$control (p -> driver_status.dev_out_iocbp, "end_write_mode", null, code);
	if code = 0 then do;			/* we were able to release the line */
	     call timer_manager_$sleep (time, "11"b);	/* sleep a few seconds */
						/* so remote device can send if needed */
	end;
	else if code = error_table_$undefined_order_request then do; /* this is ok also */
	     if iodd_static.test_entry then		/* be able to set a reasonable pace */
		if time > 1 then call timer_manager_$sleep (time, "11"b); /* simulate device */
	end;
	else do;					/* this is a real error */
	     call iodd_msg_ (error, master, code, myname, "From ""end_write_mode"" control");
	     iodd_static.slave_hold = "1"b;
	end;

	if iodd_static.slave.active then		/* flush any messages */
	     call iox_$control (iodd_static.slave_out, "runout", null, code);

	return;
%page;
/* For this driver, this entry is almost a no-op:  we do not send banners around our reader output to the host */

print_banner:
     entry (a_stream, a_banner_type, a_data_ptr, a_code);

	banner_type = a_banner_type;
	a_code, code = 0;

	p = iodd_static.driver_ptr;			/* save driver_ptr in short name variable */
	p2 = addr (p -> driver_status.descriptor);	/* get descriptor ptr just in case */

	if banner_type = head_banner then do;		/* reset the accounting data for each request copy */
	     call iox_$control (p -> driver_status.dev_out_iocbp, "reset", null, code);
	end;


	a_code = code;
	if code ^= 0 then
	     p2 -> request_descriptor.keep_in_queue = "1"b; /* defer the request */

	return;
%page;
/* Process a driver command */

command:
     entry (a_source, a_state, a_argp, a_code);

	argp = a_argp;				/* define the arg_list structure which contains "command" */
	source = a_source;
	state = a_state;

	on conversion begin;			/* handler for conversion errors */
	     call iodd_msg_ (normal, source, 0, "", "Argument conversion error. Try again.");
	     go to cmd_error;
	end;

	save_code = a_code;				/* save the called value */
	a_code, code = 0;				/* say we handled it for now */

	if command = "help" then do;
	     call iodd_msg_ (normal, source, 0, "", "^/** Commands for the HASP workstation simulator driver **^/");
	     if static_receive_data.device_type ^= 0 then do; /* an input device (printer or punch) */
		call iodd_msg_ (normal, source, 0, "", "receive");
		call iodd_msg_ (normal, source, 0, "", "auto_queue  yes | no");
		call iodd_msg_ (normal, source, 0, "", "request_type  rqt_name");
		call iodd_msg_ (normal, source, 0, "", "clean_pool  <days allowed to remain>");
	     end;
	     else do;				/* output device (reader) */
		call iodd_msg_ (normal, source, 0, "", "pause_time [<delay_time_between_requests>]");
		call iodd_msg_ (normal, source, 0, "", "single");
	     end;
	     go to end_cmd;
	end;


	if command = "pause_time" | command = "pausetime" then do;
	     if static_receive_data.device_type ^= 0 then do; /* only valid for output devices */
		call iodd_msg_ (normal, source, 0, "", "Invalid command for this type of device.");
		go to cmd_error;
	     end;
	     if arg_list.n_tokens > 1 then do;
		value = convert (value, arg_list.arg (1));
		if value < 0 | value > 30 then do;
		     call iodd_msg_ (normal, source, 0, "", "pause_time range: 0 to 30 seconds ");
		     go to cmd_error;
		end;
		time = value;
		go to end_cmd;
	     end;
	     else do;
		time = 10;			/* return to the default */
		go to end_cmd;
	     end;
	end;


	if command = "single" then do;		/* make a single copy of the current request */
	     if static_receive_data.device_type ^= 0 then do; /* only valid for output devices */
		call iodd_msg_ (normal, source, 0, "", "Invalid command for this type of device.");
		go to cmd_error;
	     end;
	     if iodd_static.request_in_progress then do;
		iocbp = iodd_static.driver_ptr -> driver_status.dev_out_iocbp;
		call iox_$modes (iocbp, "single", omode, ignore); /* set single mode */
		call output_request_$set_single_copy ();
	     end;
	     else call iodd_msg_ (normal, source, 0, "", "No current request.");
	     go to end_cmd;
	end;


	if command = "receive" then do;
	     if static_receive_data.device_type = 0 then do; /* only valid for input devices */
		call iodd_msg_ (normal, source, 0, "", "Invalid command for this type of device.");
		go to cmd_error;
	     end;

	     call iodd_msg_ (normal, source, 0, "", "Waiting for file input.");

	     on command_level goto abort_read;		/* grab control after record quota overflow */

	     call receive_file_ (pool_dir, addr (static_sw_info), station, addr (static_receive_data), code);
	     if code ^= 0 then call iodd_msg_ (normal, source, myname, code, "From receive_file_ ");

	     go to end_cmd;

abort_read:    call iodd_msg_ (normal, source, 0, "", "Use the ""clean_pool"" command and retry card input.");
	     go to cmd_error;
	end;


	if command = "auto_queue" | command = "autoqueue" then do;
	     if static_receive_data.device_type = 0 then do; /* wrong driver type */
		call iodd_msg_ (normal, source, 0, "", "Invalid command for this type of device.");
		go to cmd_error;
	     end;

	     if arg_list.n_tokens < 2 then do;		/* must define what he wants */
		call iodd_msg_ (normal, source, 0, "", "Argument yes or no must be given.");
		go to cmd_error;
	     end;

	     if arg_list.arg (1) = "yes" then
		static_receive_data.no_ident,		/* don't look for ++IDENT */
		     static_receive_data.auto_queue = "1"b; /* queue request to print/punch file */
	     else if arg_list.arg (1) = "no" then
		static_receive_data.no_ident,		/* look gor ++IDENT */
		     static_receive_data.auto_queue = "0"b; /* don't queue request to print/punch file */
	     else do;
		call iodd_msg_ (normal, source, 0, "", "Argument must be either yes or no.");
		go to cmd_error;
	     end;
	     go to end_cmd;
	end;


	if command = "request_type" | command = "requesttype" | command = "rqt" then do;
	     if static_receive_data.device_type = 0 then do; /* wrong type of driver (input only) */
		call iodd_msg_ (normal, source, 0, "", "Invalid command for this type of device.");
		go to cmd_error;
	     end;

	     if arg_list.n_tokens < 2 then do;		/* default to the type specified in iod_tables */
		static_receive_data.request_type = static_default_request_type;
		go to end_cmd;
	     end;

	     if length (arg_list.arg (1)) > length (local_request_type) then do;
		call iodd_msg_ (normal, source, error_table_$bigarg, myname,
		     "Request type name must be less than ^d characters long; not ""^a"".",
		     (length (local_request_type) + 1), arg_list.arg (1));
		go to cmd_error;
	     end;

	     local_request_type = arg_list.arg (1);	/* get the request type */
	     call iod_info_$generic_type (local_request_type, generic_type, code);
	     if code ^= 0 then do;
		call iodd_msg_ (normal, source, code, myname, "^a", local_request_type);
		go to cmd_error;
	     end;

	     if ((static_receive_data.device_type = printer_input_device) & (generic_type ^= "printer")) |
		((static_receive_data.device_type = punch_input_device) & (generic_type ^= "punch"))
	     then do;				/* wrong type of request type for this driver */
		call iodd_msg_ (normal, source, 0, "",
		     "Request type ""^a"" must be of generic type ^[printer^;punch^]; not ""^a"".",
		     local_request_type, static_receive_data.device_type, generic_type);
		go to cmd_error;
	     end;

	     static_receive_data.request_type = local_request_type;
	     go to end_cmd;
	end;


	if command = "clean_pool" | command = "cleanpool" then do; /* garbage collect the card pool */
	     if static_receive_data.device_type = 0 then do; /* only valid for input devices */
		call iodd_msg_ (normal, source, 0, "", "Invalid command for this type of device.");
		go to cmd_error;
	     end;
	     if source = slave then do;
		call iodd_msg_ (normal, source, 0, "", "The clean_pool command is restricted to the master terminal.");
		go to cmd_error;
	     end;
	     if arg_list.n_tokens < 2 then do;		/* we must have an age arg */
		call iodd_msg_ (normal, source, 0, "", "Argument missing: days allowed to remain in the pool.");
		go to cmd_error;
	     end;
	     age = convert (age, arg_list.arg (1));	/* convert to binary */
	     if age < 1 then do;			/* be sure the value is right */
		call iodd_msg_ (normal, source, 0, "", "Invalid argument: ^a", arg_list.arg (1));
		go to cmd_error;
	     end;

	     call pool_manager_$clean_pool (pool_dir, age, 10, code); /* let pool_manager_ do the work */
	     if code ^= 0 then
		call iodd_msg_ (normal, source, code, myname, "Unable to clean up pool storage.");
	     go to end_cmd;
	end;


/* When control passes here, the command is unknown: just return and let iodd_command_processor_ handle it */

	a_code = save_code;
	return;

end_cmd:

	a_code = code;				/* pass back any defined errors */
	return;

cmd_error:

	a_code = error_table_$action_not_performed;	/* cause a resetread */
	return;

default_handler: entry (condition_info_ptr);

dcl  condition char (32);				/* fixed string for the call */

	condition = condition_info.condition_name;	/* this will indent funny */
	if iodd_static.request_in_progress then
	     call output_request_$error_during_request (condition); /* take it away */

	return;					/* output_request_ should not return, but.... */

close_and_detach: proc (a_iocbp, send_hangup);

dcl  a_iocbp ptr;
dcl  send_hangup bit (1);
dcl  code fixed bin (35);				/* local error code */

	if a_iocbp = null then return;

	if send_hangup then call iox_$control (a_iocbp, "hangup", null, code);

	call iox_$close (a_iocbp, code);
	call iox_$detach_iocb (a_iocbp, code);

	a_iocbp = null;

	return;

     end close_and_detach;

minor_attach: procedure (Device);

dcl  Device char (*) parameter;
dcl  desc char (256) varying;
dcl  io_module char (32) var;
dcl  dev_opt char (32) var;
dcl  mode fixed bin;

	if Device = "reader_out" then do;		/* for this one we are simulating a reader to the host */
	     io_module = "remote_punch_";		/* use the special feature of the punch io module */
	     dev_opt = "reader_simulator";		/* by the special -device option */
	     mode = Stream_output;			/* open mode is for stream output */
	end;
	else do;					/* otherwise, we are receiving print/punch files */
	     io_module = "remote_input_";		/* so use the other type io module */
	     dev_opt = rtrim (Device);		/* this will be printer_in or punch_in, don't care which */
	     mode = Stream_input;			/* open mode is for stream input */
	end;

	desc = io_module || " -tty " || rtrim (iodd_static.attach_name); /* build the attach description */
	desc = desc || space || iodd_parse_$args ("desc=", major_args);
	desc = desc || space || iodd_parse_$args ("desc=", minor_args);

	desc = desc || " -device " || dev_opt;		/* be sure this is last */

	p -> driver_status.dev_out_stream = get_switch_name (Device);

	call iox_$attach_ioname ((p -> driver_status.dev_out_stream), p -> driver_status.dev_out_iocbp,
	     (desc), code);
	if code ^= 0 & code ^= error_table_$not_detached & code ^= error_table_$ionmat then goto attach_error;

	call iox_$open (p -> driver_status.dev_out_iocbp, mode, ""b, code);
	if code ^= 0 & code ^= error_table_$not_closed then do;
attach_error:  call iodd_msg_ (error, master, code, myname,
		"Attaching minor device:  ^a^/Attach desc:  ^a.", p -> driver_status.device_id, desc);
	     goto clean_out;
	end;

	p -> driver_status.dev_in_iocbp = p -> driver_status.dev_out_iocbp; /* make them the same */

	call set_hangup_proc (p -> driver_status.dev_out_iocbp);

     end minor_attach;



get_switch_name: procedure (Device) returns (character (32));

declare  index fixed bin internal static init (0);
declare  Device char (*);

	index = index + 1;
	if index > 999 then index = 1;		/* keep it reasonable */
	return (Device || "_" || ltrim (character (index)));

     end get_switch_name;

set_hangup_proc: proc (iocbp);

dcl  iocbp ptr;

/* this internal proc will set the device hangup procedure for the specified switch */

	hangup_info.entry = iodd_hangup_$iodd_hangup_;
	hangup_info.data_ptr = stat_p;
	hangup_info.priority = 1;

	call iox_$control (iocbp, "hangup_proc", addr (hangup_info), code);
	if code ^= 0 then do;
	     call iodd_msg_ (error, master, code, myname, "Fatal error.  Unable to set hangup proc.");
	     goto clean_out;
	end;

	return;

     end set_hangup_proc;
%page;

initiate_the_file:
     proc (pathname_string, args_ptr, args_length, message, code);

dcl  pathname_string char (256) varying;
dcl  args_ptr ptr;
dcl  args_length fixed bin;
dcl  message char (*);
dcl  code fixed bin (35);

dcl  dirname char (168);
dcl  entname char (32);
dcl  compname char (32);
dcl  args_bc fixed bin (24);

	call expand_pathname_$component ((pathname_string), dirname, entname, compname, code);
	if code ^= 0 then
	     return;
	call initiate_file_$component (dirname, entname, compname, R_ACCESS, args_ptr, args_bc, code);
	if code ^= 0 then
	     return;
	args_length = divide (args_bc + 8, 9, 17, 0);

     end initiate_the_file;
%page; %include access_mode_values;
%page; %include condition_info;
%page; %include dprint_msg;
%page; %include driver_ptr_list;
%page; %include driver_status;
%page; %include find_input_sw_info;
%page; %include iod_tables_hdr;
%page; %include iod_constants;
%page; %include iodd_static;
%page; %include iox_modes;
%page; %include mseg_message_info;
%page; %include output_request_data;
%page; %include queue_msg_hdr;
%page; %include receive_file_data;
%page; %include request_descriptor;
%page; %include terminal_info;

     end hasp_ws_sim_driver_;
