/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


find_input_switch_: proc (a_info_p, a_block, a_sw_idx, a_code);

/* This procedure accepts a list of IO switches and searches for the first one in the list which has input
   available for a successful read operation (get_chars)  without blocking.  The index of this iocbp
   in the info structure is returned.  If no switch currently has input available,  the procedure will
   either block until input is available or return an index of zero as determined by the a_block bit.
*/

/* Written by J. C. Whitmore, Feb 1980 */

dcl  a_info_p ptr parameter;				/* pointer to the switch info structure (INPUT) */
dcl  a_block bit (1);				/* TRUE - if we are to block until input is available (INPUT) */
dcl  a_sw_idx fixed bin;				/* index of iocbp to be read (OUTPUT) */
dcl  a_code fixed bin (35);				/* system error code (OUTPUT) */


dcl  max_switches fixed bin;
dcl  idx fixed bin;

dcl 1 read_info aligned,				/* for the read_status control order */
    2 read_ev_chan fixed bin (71),
    2 input_available bit (1) unal;

dcl 1 wait_info aligned,				/* data returned from ipc_$block */
    2 ev_chan fixed bin (71),
    2 ev_msg fixed bin (71),
    2 sender_proc_id bit (36),
    2 origin fixed bin,
    2 wait_list_idx fixed bin;

dcl  convert_ipc_code_ entry (fixed bin (35));
dcl  ipc_$block entry (ptr, ptr, fixed bin (35));
dcl  iox_$control entry (ptr, char (*), ptr, fixed bin (35));

dcl  error_table_$bad_arg fixed bin (35) ext;
dcl  error_table_$unimplemented_version fixed bin (35) ext;

dcl  addr builtin;

%include find_input_sw_info;



	a_sw_idx, a_code = 0;			/* clear the output values */
	sw_info_p = a_info_p;			/* set up automatic based references */

	if sw_info.version ^= sw_info_version_1 then do;	/* enforce the version number */
	     a_code = error_table_$unimplemented_version;
	     return;
	end;

	max_switches = sw_info.n_iocb_ptrs;		/* there is one ipc_ channel per iocbp */
	if max_switches ^= sw_info.n_channels then do;	/* just a consistency check */
no_go:	     a_code = error_table_$bad_arg;
	     return;
	end;

check_for_input:

	read_info.input_available = "0"b;		/* because some IO modules forget to clear this */

	do idx = 1 to max_switches;

	     call iox_$control (sw_info.iocbp (idx), "read_status", addr (read_info), a_code);
	     if a_code ^= 0 then return;

	     if read_info.input_available then do;
		a_sw_idx = idx;
		return;
	     end;
	end;

	if ^a_block then return;

	call ipc_$block (addr (sw_info.wait_list), addr (wait_info), a_code);
	if a_code ^= 0 then do;
	     call convert_ipc_code_ (a_code);
	     return;
	end;

	go to check_for_input;

     end find_input_switch_;
