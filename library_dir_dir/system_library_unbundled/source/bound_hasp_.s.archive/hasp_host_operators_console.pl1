/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Command for a Multics process to communicate with a foreign HASP host as a HASP workstation's operator's console:

      Usage:  hasp_host_operators_console channel {-control_args} {attach_arguments}

      where:
         channel -- is the name of the HASP operator's channel (eg: a.h014.opr),
         control_args -- may be either "-no_signon" or "-signon STR", and
         attach_arguments -- are optional arguments to supply in the attach description */

/* Created:  February 1980 by G. Palter */
/* Modified: 15 October 1980 by G. Palter to establish a hangup handler */
/* Modified: 22 July 1981 by G. Palter to support -signon/-no_signon directly */


hasp_host_operators_console:
hhoc:
     procedure () options (variable);


dcl  n_arguments fixed binary;

dcl  argument character (argument_lth) unaligned based (argument_ptr);
dcl  argument_lth fixed binary (21);
dcl  argument_ptr pointer;

dcl  tty_channel character (32);			/* MCS channel for the operator's console */

dcl 1 sri aligned like signon_record_info;
dcl  signon_record bit (1) aligned;			/* ON => caller wants a SIGNON record transmitted */
dcl  signon_response fixed binary (71);			/* results of sending the SIGNON record */

dcl  operators_console pointer;			/* -> IOCB for the console */
dcl  switch_name character (32);
dcl  attach_description character (512) varying;		/* attach description for operator's console */

dcl  terminal_io_record_header_lth fixed binary (21);	/* needed to compute size of buffer to read from user_input */

dcl  code fixed binary (35);

dcl  idx fixed binary;

dcl  processing bit (1) aligned;

dcl 1 hangup_info aligned,				/* structure to establish handler for hangups */
    2 entry entry variable,				/* the procedure to call */
    2 data_ptr pointer,				/* -> arbitrary data to pass to the procedure */
    2 priority fixed binary;				/* IPC priority of handler */

dcl 1 ui_status aligned,				/* result of "read_status" on user_input */
    2 event_channel fixed binary (71),
    2 input_available bit (1);			/* ON => something is available to be read from user_input */

dcl 1 oc_status aligned,				/* result of "read_status" on operator's console channel */
    2 event_channel fixed binary (71),
    2 input_available bit (1);			/* ON => foreign system has something to print */

dcl 1 event_wait_list aligned,			/* for waiting for input from either user_input or host */
    2 n_channels fixed binary,
    2 pad bit (36),
    2 channels (2) fixed binary (71);

dcl 1 local_event_wait_info aligned like event_wait_info;

dcl  NO_CONTROL_CHARS character (512) initial (copy (SP, 32) || substr (collate, 33) || copy (SP, 384));

dcl  NAME character (32) static options (constant) initial ("hasp_host_operators_console");
dcl (MAJOR_VERSION	initial (2),
     MINOR_VERSION	initial (0))
	fixed binary static options (constant);

dcl (UPPERCASE	initial ("ABCDEFGHIJKLMNOPQRSTUVWXYZ"),
     LOWERCASE	initial ("abcdefghijklmnopqrstuvwxyz"))
	character (26) static options (constant);

dcl (NL	initial ("
"),
     SP	initial (" "))
	character (1) static options (constant);
    
dcl (iox_$user_input, iox_$user_output) pointer external;

dcl  sys_info$max_seg_size fixed binary (19) external;

dcl (error_table_$bigarg, error_table_$invalid_state, error_table_$noarg, error_table_$out_of_sequence)
	fixed binary (35) external;

dcl (com_err_, com_err_$suppress_name) entry () options (variable);
dcl  convert_ipc_code_ entry (fixed binary (35));
dcl  cu_$arg_count entry (fixed binary, fixed binary (35));
dcl  cu_$arg_ptr entry (fixed binary, pointer, fixed binary (21), fixed binary (35));
dcl  cu_$cp entry (pointer, fixed binary (21), fixed binary (35));
dcl  get_temp_segment_ entry (character (*), pointer, fixed binary (35));
dcl (ioa_, ioa_$nnl) entry () options (variable);
dcl  iox_$attach_name entry (character (*), pointer, character (*), pointer, fixed binary (35));
dcl  iox_$destroy_iocb entry (pointer, fixed binary (35));
dcl  iox_$detach_iocb entry (pointer, fixed binary (35));
dcl  iox_$close entry (pointer, fixed binary (35));
dcl  iox_$control entry (pointer, character (*), pointer, fixed binary (35));
dcl  iox_$get_line entry (pointer, pointer, fixed binary (24), fixed binary (24), fixed binary (35));
dcl  iox_$open entry (pointer, fixed binary, bit (1) aligned, fixed binary (35));
dcl  iox_$put_chars entry (pointer, pointer, fixed binary (24), fixed binary (35));
dcl  iox_$read_record entry (pointer, pointer, fixed binary (24), fixed binary (24), fixed binary (35));
dcl  iox_$write_record entry (pointer, pointer, fixed binary (24), fixed binary (35));
dcl  ipc_$block entry (pointer, pointer, fixed binary (35));
dcl  ipc_$create_ev_chn entry (fixed binary (71), fixed binary (35));
dcl  ipc_$delete_ev_chn entry (fixed binary (71), fixed binary (35));
dcl  release_temp_segment_ entry (character (*), pointer, fixed binary (35));
dcl  requote_string_ entry (character (*)) returns (character (*));
dcl  unique_chars_ entry (bit (*)) returns (character (15));

dcl (addr, binary, codeptr, collate, copy, currentsize, length, min, null, rel, rtrim, substr, string, translate, unspec)
	builtin;

dcl (cleanup, hhoc_hangup_, program_interrupt) condition;
%page;
%include terminal_io_record;
%page;
%include hasp_signon_record_info;
%page;
%include iox_modes;
%page;
%include event_wait_info;
%page;
	call cu_$arg_count (n_arguments, code);
	     if code ^= 0 then do;			/* not invoked as command */
		call com_err_ (code, NAME);
		return;
	     end;

	if n_arguments = 0 then do;
	     call com_err_$suppress_name (0, NAME, 
				    "Usage: hasp_host_operators_console tty_channel {-control_args} {attach_arguments}");
	     return;
	end;

	signon_record = "0"b;			/* assume caller doesn't want to send a SIGNON record */

	call cu_$arg_ptr (1, argument_ptr, argument_lth, (0));

	if index (argument, "-") = 1 then do;
	     call com_err_ (0, NAME,
		          "First argument must be a channel name; not the control argument ""^a"".",
			argument);
	     return;
	end;

	if argument_lth > length (tty_channel) then do;
	     call com_err_ (error_table_$bigarg, NAME, "Channel name must be 32 characters or less; not ""^a"".",
		          tty_channel);
	     return;
	end;

	tty_channel = argument;

	attach_description = "hasp_host_ -comm hasp -tty ";
	attach_description = attach_description || requote_string_ (rtrim (tty_channel));
	attach_description = attach_description || " -device teleprinter";


/* Process optional arguments: -signon/-no_signon may be freely intermixed with the attach options (if any) */

	do idx = 2 to n_arguments;

	     call cu_$arg_ptr (idx, argument_ptr, argument_lth, (0));

	     if (argument = "-no_signon") then		/* caller doesn't want a SIGNON record sent */
		signon_record = "0"b;

	     else if (argument = "-signon")
	     then do;				/* caller supplies a SIGNON record */
		if idx = n_arguments then do;
		     call com_err_ (error_table_$noarg, NAME, "Character string after ""-signon"".");
		     return;
		end;
		idx = idx + 1;			/* move on to next the argument */
		call cu_$arg_ptr (idx, argument_ptr, argument_lth, (0));
		if argument_lth > length (sri.record) then do;
		     call com_err_ (error_table_$bigarg, NAME,
			          "SIGNON record can not be longer than ^d characters; not ""^a"".",
				length (sri.record), argument);
		     return;
		end;
		sri.record = argument;
		signon_record = "1"b;		/* now will send a SIGNON record */
	     end;

	     else do;				/* anything else goes into the attach description */
		attach_description = attach_description || " ";
		attach_description = attach_description || requote_string_ (argument);
	     end;
	end;


/* Attach the operator's console */

	operators_console,				/* for cleanup handler */
	     terminal_io_record_ptr = null ();
	sri.event_channel = -1;

	on condition (cleanup)
	     call release_console ();

	call get_temp_segment_ (NAME, terminal_io_record_ptr, code);
	     if code ^= 0 then do;
		call com_err_ (code, NAME, "Obtaining buffer space.");
		return;
	     end;

	terminal_io_record_header_lth = 4 * binary (rel (addr (terminal_io_record.data)), 18, 0);

	terminal_io_record.version = terminal_io_record_version_1;
	terminal_io_record.device_type = TELEPRINTER_DEVICE;
	terminal_io_record.slew_type = SLEW_BY_COUNT;
	terminal_io_record.slew_count = 1;
	string (terminal_io_record.flags) = ""b;
	terminal_io_record.element_size = 9;

	switch_name = substr (tty_channel, 1, min (length (rtrim (tty_channel)), 16)) || "." || unique_chars_ (""b);

	call iox_$attach_name (switch_name, operators_console, (attach_description), codeptr (hasp_host_operators_console), code);
	     if code ^= 0 then do;
		call com_err_ (code, NAME, "^/^-Attaching ^a using attach description: ^a", switch_name,
			     attach_description);
		go to RETURN_FROM_COMMAND;
	     end;

	call iox_$open (operators_console, Sequential_input_output, "0"b, code);
	     if code ^= 0 then do;
		call com_err_ (code, NAME, "Opening ^a (channel ^a) for sequential input/output.", switch_name,
			     tty_channel);
		go to RETURN_FROM_COMMAND;
	     end;


/* Validate the caller specified SIGNON processing: transmits the SIGNON record if need be */

	if signon_record
	then do;					/* send the SIGNON */
	     call ioa_ ("Sending the SIGNON record: ^a", translate (sri.record, UPPERCASE, LOWERCASE));
	     sri.version = SIGNON_RECORD_INFO_VERSION_1;
	     call ipc_$create_ev_chn (sri.event_channel, code);
		if code ^= 0 then call convert_ipc_code_ (code);
		if code ^= 0 then do;
		     call com_err_ (code, NAME, "Creating event channel for SIGNON record control order.");
		     go to RETURN_FROM_COMMAND;
		end;
	     sri.pad = ""b;
	     call iox_$control (operators_console, "signon_record", addr (sri), code);
	     if (code = 0)
	     then do;				/* multiplexer accepted the call: wait for response */
		event_wait_list.n_channels = 1;
		event_wait_list.channels (1) = sri.event_channel;
RETRY_WAIT_FOR_RESPONSE:
		call ipc_$block (addr (event_wait_list), addr (local_event_wait_info), code);
		     if code ^= 0 then call convert_ipc_code_ (code);
		     if code ^= 0 then do;
			call com_err_ (code, NAME, "Blocking to await response to SIGNON record control order.");
			go to RETURN_FROM_COMMAND;
		     end;
		if local_event_wait_info.ring ^= 0 then do;
		     call com_err_ (0, NAME,
			          "Ignoring extraneous wakeup while waiting for response to SIGNON record control order.");
		     go to RETRY_WAIT_FOR_RESPONSE;
		end;
		signon_response = local_event_wait_info.message;
		if (signon_response = HASP_SIGNON_OK) then
		     call ioa_$nnl ("SIGNON record accepted... ");
		else if (signon_response = HASP_SIGNON_REJECTED) | (signon_response = HASP_SIGNON_HANGUP)
		then do;				/* foreign system didn't like what we sent */
		     call com_err_ (0, NAME,
				   "Foreign system rejected SIGNON record^; ^[ please retry^;foreign system has disconnected^].",
				   (signon_response = HASP_SIGNON_REJECTED));
		     go to RETURN_FROM_COMMAND;
		end;
		else do;				/* unknown response */
		     call com_err_ (0, NAME, "Unknown reponse to SIGNON control record order: ^d", signon_response);
		     go to RETURN_FROM_COMMAND;
		end;
	     end;
	     else if (code = error_table_$out_of_sequence)
	     then do;				/* SIGNON record was sent once before... */
		call com_err_ (0, NAME,
			     "A SIGNON record was previously transmitted to this remote system.");
		call ioa_$nnl ("SIGNON record ignored... ");
	     end;					/* ... but that's not fatal */
	     else do;				/* multiplexer rejected the control order: explain why */
		if (code = error_table_$invalid_state) then
		     call com_err_ (0, NAME, "Local multiplexer is not configured to transmit a SIGNON record.");
		else call com_err_ (code, NAME, "Requesting SIGNON record transmission.");
		go to RETURN_FROM_COMMAND;
	     end;
	end;

	else do;					/* caller doesn't want a SIGNON record transmitted */
	     call iox_$control (operators_console, "no_signon_record", null (), code);
	     if code ^= 0 then do;			/* ... but the multiplexer doesn't like that */
		if (code = error_table_$invalid_state) then
		     call com_err_ (0, NAME, "Local multiplexer is configured to transmit a SIGNON record.");
		else call com_err_ (code, NAME, "Validating that no SIGNON record need be transmitted.");
		go to RETURN_FROM_COMMAND;
	     end;
	end;


/* Establish a handler for hangup to terminate the command */

	hangup_info.entry = hhoc_hangup_handler_;
	hangup_info.data_ptr = null ();
	hangup_info.priority = 1;

	call iox_$control (operators_console, "hangup_proc", addr (hangup_info), code);
	     if code ^= 0 then do;
		call com_err_ (code, NAME, "Attempting to establish hangup handler for ^a (channel ^a)", switch_name,
			     tty_channel);
		go to RETURN_FROM_COMMAND;
	     end;

	on condition (hhoc_hangup_)
	     begin;				/* signaled when a hangup occurs */
		call com_err_ (0, NAME, "Hangup detected on channel ^a.", tty_channel);
		go to RETURN_FROM_COMMAND;
	     end;


/* Main processing loop */

	call ioa_ ("Input:");

	processing = "1"b;

	on condition (program_interrupt)
	     go to CONTINUE_TO_READ_FROM_SWITCHES;

	do while (processing);

CONTINUE_TO_READ_FROM_SWITCHES:
	     call iox_$control (iox_$user_input, "read_status", addr (ui_status), code);
		if code ^= 0 then do;
		     call com_err_ (code, NAME, "Performing ""read_status"" on user_input.");
		     go to RETURN_FROM_COMMAND;
		end;

	     call iox_$control (operators_console, "read_status", addr (oc_status), code);
		if code ^= 0 then do;
		     call com_err_ (code, NAME, "Performing ""read_status"" on channel ^a.", tty_channel);
		     go to RETURN_FROM_COMMAND;
		end;

	     if ui_status.input_available then do;	/* process input (if any) */
		call iox_$get_line (iox_$user_input, addr (terminal_io_record.data),
			          (4 * sys_info$max_seg_size - terminal_io_record_header_lth),
				terminal_io_record.n_elements, code);
		     if code ^= 0 then do;
			call com_err_ (code, NAME, "Reading from user_input.");
			go to RETURN_FROM_COMMAND;
		     end;
		terminal_io_record.n_elements = terminal_io_record.n_elements - 1;	/* ignore the newline */
		if terminal_io_record.n_elements > 0 then
		     if (substr (terminal_io_record_data_chars, 1, 1) = "!") then
			call interpret_escape_request ();  /* user requests to do something special */
		terminal_io_record_data_chars = translate (terminal_io_record_data_chars, NO_CONTROL_CHARS);
						/* convert control characters and non-ASCII to spaces */
		call iox_$write_record (operators_console, terminal_io_record_ptr,
				    (4 * currentsize (terminal_io_record)), code);
		     if code ^= 0 then do;
			call com_err_ (code, NAME, "Writing to channel ^a.", tty_channel);
			go to RETURN_FROM_COMMAND;
		     end;
	     end;

CHECK_FOR_FOREIGN_MESSAGES:
	     if oc_status.input_available then do;	/* process messages from foreign host */
		call iox_$read_record (operators_console, terminal_io_record_ptr, (4 * sys_info$max_seg_size), (0),
				   code);
		     if code ^= 0 then do;
			call com_err_ (code, NAME, "Reading from channel ^a.", tty_channel);
			go to RETURN_FROM_COMMAND;
		     end;
		call iox_$put_chars (iox_$user_output, addr (terminal_io_record.data), terminal_io_record.n_elements, (0));
		call iox_$put_chars (iox_$user_output, addr (NL), length (NL), (0));
	     end;

	     if ^ui_status.input_available & ^oc_status.input_available
	     then do;				/* no input from anywhere right now: wait for some */
		event_wait_list.n_channels = 2;
		event_wait_list.channels (1) = ui_status.event_channel;
		event_wait_list.channels (2) = oc_status.event_channel;
		call ipc_$block (addr (event_wait_list), addr (local_event_wait_info), code);
		     if code ^= 0 then call convert_ipc_code_ (code);
		     if code ^= 0 then do;
			call com_err_ (code, NAME, "Attempting to wait for input from user_input or ^a.",
				     tty_channel);
			go to RETURN_FROM_COMMAND;
		     end;
	     end;
	end;

RETURN_FROM_COMMAND:
	call release_console ();
	return;



/* Invoked when the operator's console channel hangs up: abort the command */

hhoc_hangup_handler_:
     entry ();

	signal condition (hhoc_hangup_);

	return;					/* shouldn't get here... */
%page;
/* Interpret escape requests:  Currently, the only defined escape requests are --

      !e command_line  -- execute the given Multics command line,
      !..command_line  -- execute the given Multics command line,
      !.               -- identify this program and the channel being used, or
      !quit            -- disconnect the channel and return to Multics command level */

interpret_escape_request:
	procedure ();

	     if terminal_io_record.n_elements < 2 then do;     /* must have more than just "!" */
		call com_err_ (0, NAME, "No request supplied after ""!"".");
		go to CHECK_FOR_FOREIGN_MESSAGES;
	     end;

	     if (substr (terminal_io_record_data_chars, 2, 2) = "e ") |
	        (substr (terminal_io_record_data_chars, 2, 2) = "..")
		then call cu_$cp (addr (terminal_io_record.data.bits (4)), (terminal_io_record.n_elements - 3), (0));

	     else if (terminal_io_record.n_elements = 2) & (terminal_io_record_data_chars = "!.")
		then call ioa_ ("^a version ^d.^d; connected to channel ^a.", NAME, MAJOR_VERSION, MINOR_VERSION,
			      tty_channel);

	     else if (terminal_io_record.n_elements = length ("!quit")) & (terminal_io_record_data_chars = "!quit")
		then go to RETURN_FROM_COMMAND;	/* WARNING: this method can lose messages from host */

	     else call com_err_ (0, NAME, "Unrecognized request line: ^a", terminal_io_record_data_chars);

	     go to CHECK_FOR_FOREIGN_MESSAGES;

	end interpret_escape_request;
%page;
/* Release operator's console (if attached) and perform other necessary cleanup */

release_console:
	procedure ();

	     if terminal_io_record_ptr ^= null () then do;
		call release_temp_segment_ (NAME, terminal_io_record_ptr, (0));
		terminal_io_record_ptr = null ();
	     end;

	     if operators_console ^= null () then do;	/* have the I/O switch */
		call iox_$close (operators_console, (0));
		call iox_$detach_iocb (operators_console, (0));
		call iox_$destroy_iocb (operators_console, (0));
		operators_console = null ();
	     end;

	     if sri.event_channel ^= -1 then do;	/* created an IPC channel for SIGNON records */
		call ipc_$delete_ev_chn (sri.event_channel, (0));
		sri.event_channel = -1;
	     end;

	     return;

	end release_console;

     end hasp_host_operators_console;
