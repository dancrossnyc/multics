/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* 
   ********************************************************************************
   ********************************************************************************
   *
   *
   *	M M E   G E B O R T
   *
   *  MME GEBORT is used to abort the execution of the current slave activity
   *  by the user.	The abort code passed in the Q register is used in messages
   *  displayed on the execution report and at the users terminal.
   *
   *  This module also processes requests from the GES system to abort the
   *  slave activity.  These requests are handled by .mbrt1,3 in real GCOS.
   *  This entry (gcos_mme_bort_$system) is called passing some system defined
   *  error code (from gcos_et_).  The short message associated with this error
   *  code is the GCOS system abort number which is to be placed in the
   *  slave prefix.
   *
   *  After the processing of the appropriate abort request, gcos_mme_bort_ will
   *  fill in the proper words in the slave prefix and return to gcos_run_activity_
   *  by way of a non-local goto through gcos_ext_stat_$mme_rtrn.
   *
   *	CALLING SEQUENCE:
   *
   *	MME	GEBORT
   *
   *	C(Q) 24-35	BCD abort code
   *
   *
   *	WRITTEN BY DICK SNYDER, 1971.
   *	MODIFIED BY T. CASEY - DECEMBER 1973, MARCH 1974, AUGUST 1974.
   *	Modified by M. R. Jordan, January 1977, August 1977
   *	Modified by S. C. Akers, December 1981. Change \014 to %page;
   *					Fix bug to stuff abort reason
   *					and address of faulting instruction
   *					in Word 13 (octal) of slave prefix.
   *
   ********************************************************************************
   ********************************************************************************
*/
%page;
gcos_mme_bort_: procedure (mcp, increment);
/* 


   The data item gcos_ext_stat_$termination_code is of special importance in that it tells the user
   what type of abort (system or user) and exactly which abort he got.  This information
   is typicaly used in a wrapup routine to make decisions.	The data item
   is declared as a bit(18).	The following assignments are made within it:

   0-3	MBZ
   4-5	=1 system abort; =2 user abort
   6-17	system abort number or user abort code (BCD)

*/
%page;
/* 

   This entry will be called as a result of a MME GEBORT in a slave activity.
   After extracting the abort code from the Q register, a message will be
   printed at the users terminal and wrapup will be looked into.

*/

	substr (abort_code, 1, 1) = xlate (fixed (substr (mc.regs.q, 25, 6), 7));
	substr (abort_code, 2, 1) = xlate (fixed (substr (mc.regs.q, 31, 6), 6));

/* 

   Set the termination code to reflect the specified abort code and the
   fact that this is a GEBORT rather than a fault.

*/

	substr (gcos_ext_stat_$termination_code, 1, 6) = "000010"b;
	substr (gcos_ext_stat_$termination_code, 7, 12) = substr (mc.regs.q, 25, 12);

/* 

   Now print a message at the users terminal and continue.

*/

	gcos_ext_stat_$abort_reason = "Users " || abort_code || " MME GEBORT.";
	call ioa_$ioa_stream ("error_output", "^a", gcos_ext_stat_$abort_reason);
	goto continue_termination;
%page;
/* 

   The following entry provides for system termination of the slave
   activity due to a system detected error.  This entry expects a
   code  from the gcos_et_ (or any valid error table code) as its first
   argument.  The remaining arguments are passed to ioa_ for printing.

*/
%page;
system:	entry (abort_ecode);

	ecode = abort_ecode;

system_error: ;

/* 

   Prepare the termination code value from the information given
   in the gcos error table (gcos_et_).

*/


	call get_abort_info ();
	substr (gcos_ext_stat_$termination_code, 1, 6) = "000001"b;
	substr (gcos_ext_stat_$termination_code, 7, 12) = substr (addr (abort_number) -> bit36, 25, 12);

/* 

   Now prepare the message for the user to tell him what went wrong.
   The message consists of the long message from the gcos_et_ and an
   additional message formatted from the remaining arguments passed to
   gcos_mme_bort_$system.

*/

	call ioa_$ioa_stream ("error_output", "^a", long_message);
	call cu_$arg_count (nargs);
	if nargs > 1 then do;
	     call cu_$arg_list_ptr (arg_list_ptr);
	     call ioa_$general_rs (arg_list_ptr, 2, 3, rtn_string, rtn_string_len, "0"b, "0"b);
	     if rtn_string_len > 0 then
		if substr (rtn_string, 1, rtn_string_len) ^= "" then
		     call ioa_$ioa_stream ("error_output", "^a", substr (rtn_string, 1, rtn_string_len));
	end;


/* 

   Now pass the abort message on to gcos_run_activity_ by continuing.

*/


	gcos_ext_stat_$abort_reason = rtrim (long_message);
	goto continue_termination;
%page;
abort_number: entry (abort_ecode, return_code);


	ecode = abort_ecode;
	call get_abort_info ();
	return_code = abort_number;

	return;
%page;
continue_termination:;

/* 

   Set up pointers needed later.

*/

	scup = addr (gcos_ext_stat_$mc.scu);


/* 

   Initialize the proper locations in the slave prefix.  Some of the
   values to be set are offset by 1 if the most recent termination
   occured during wrapup.

*/


	slave_prefix_ptr = gcos_ext_stat_$gcos_slave_area_seg;
	slave_prefix.word_30 = (36)"0"b;
	slave_prefix.words_60_thru_65 = (216)"0"b;
	if gcos_ext_stat_$save_data.wrapup then slave_prefix_ptr = addrel (slave_prefix_ptr, 1);
	slave_prefix.termination_info = gcos_ext_stat_$termination_code;
	slave_prefix.ic_and_i = addr (scu.ilc) -> bit36;
	slave_prefix.ic_value = scu.ilc;

/* 

   Now if the user has specified the -debug control argument, do it.

*/


	if gcos_ext_stat_$save_data.debug then do;
	     call ioa_$ioa_stream ("error_output", "CALLING DEBUG:");
	     call db;
	end;


/* 

   Prepare to return to gcos_run_activity by setting the activity abort
   flag and the "run only compilations till next $ BREAK" flag.  Bit 5
   of the program switch word gets reset and the abort code is passed
   back to gcos_run_activity.

*/


	gcos_ext_stat_$save_data.this_act_abort = "1"b;
	gcos_ext_stat_$save_data.prev_act_abort = "1"b;
	substr (save_data.psw, 6, 1) = "0"b;
	goto gcos_ext_stat_$mme_rtrn;
%page;
/* 

   This entry is called to inform the user of a bad MME number in his
   program.  This is an i1 system abort.

*/


not_imp:	entry (mcp, increment, mme_number);


	if mme_number = 0 then
	     call gcos_mme_bort_$system (gcos_et_$unimp_mme, "0 is not a valid MME number.");
	else
	call gcos_mme_bort_$system (gcos_et_$unimp_mme, "GE^a", MME_NAME (mme_number));
%page;
/* 

   This entry process run-time "system" detected fatal errors.
   The calling sequence is essentially options(variable), but the first
   argument must be a char(2) for the abort code.  Other arguments that
   follow are passed to ioa_ to be printed.

*/


simulator: entry (code);

	abort_code = code;
	call cu_$stack_frame_ptr (p);
	p = backp;				/* get caller's frame */
	unspec (offset) = (18)"0"b||substr (rel (ret), 1, 18);
	call pl1_frame_$name (p, z, j);		/* get caller name */
	call ioa_ ("Abort ^a from ^a at ^o ", code, name, offset);
	call cu_$arg_list_ptr (p);			/* get ptr to my arg list */
	ii, i = arg_count;				/* get no of args */
	if i = 2 then goto continue_termination;	/* only one arg */
	ii, i = i-2;				/* decrement arg count */
	arg_count = i;				/* put new count in arg list */
	i = descriptor_count;			/* get no. of descriptors */
	if i ^= 0 then do;				/* adjust descriptors and count if necessary */
	     descriptor_count = fixed (i-2, 18);
	     do j = divide (ii+4, 2, 18, 0) to ii+2;	/* shift descriptors left one to */
						/* wipe out descriptor for arg 1 (abort cause) */
		arg_pointers (j) = arg_pointers (j+1);
	     end;

	end;
	else ii = divide (ii, 2, 18, 0);		/* no descriptors so adjust move variable */
	do j = 1 to ii;
	     arg_pointers (j) = arg_pointers (j+1);	/* move arg pointers */
	end;
	call cu_$gen_call (ioa_, p);			/* let ioa_ print out any other info */
	gcos_ext_stat_$termination_code = "000001000000000000"b;
	gcos_ext_stat_$abort_reason = abort_code;
	goto continue_termination;


dcl 1 arg_list aligned based (p),
    2 arg_count fixed bin(17) unaligned,
    2 display bit (18) unaligned,
    2 descriptor_count fixed bin(17) unaligned,
    2 fill bit (18) unaligned,
    2 arg_pointers (1) fixed bin(71);
dcl  code char (*);
dcl  cu_$gen_call ext entry (entry, pointer);
dcl  cu_$stack_frame_ptr ext entry (pointer);
dcl  divide builtin;
dcl 1 frame based (p),
    2 ab (4) fixed bin(24),
    2 lp pointer,
    2 sp pointer,
    2 regs (8) fixed bin(24),
    2 backp pointer,
    2 nxt pointer,
    2 ret pointer;
dcl  i fixed bin(24);
dcl  ii fixed bin(24);
dcl  j fixed bin(24);
dcl  name char (j) aligned based (z);
dcl  offset fixed bin(24);
dcl  p pointer;
dcl  pl1_frame_$name ext entry (ptr, ptr, fixed bin(24));
dcl  rel builtin;
dcl  unspec builtin;
dcl  z pointer;
%page;
get_abort_info: procedure ();


/* 

   This internal procedure obtains the short_message, long_message, and abort_number
   given the ecode value passed to  the gcos_mme_bort_ entry point that has been called.

   To begin with, using the convert_status_code_ subroutine get the message for this
   code value.

*/

	     call convert_status_code_ (ecode, short_message, long_message);

/* 

   Prepare the abort number from the ecode value.

*/

	     if substr (short_message, 1, 4) = "GCOS" then do ;
		abort_number = cv_dec_check_ (substr (short_message, 5, 4), ecode);
		if ecode ^= 0 then abort_number = 0;
	     end;
	     else abort_number = 0;

	     return;

end get_abort_info;
%page;
dcl  abort_code char (2);				/* the ASCII abort code  */
dcl  abort_ecode fixed bin(35);			/* error code value for system aborts  */
dcl  abort_number fixed bin(24);			/* GCOS system abort number  */
dcl  null builtin;
dcl  addr builtin;
dcl  addrel builtin;
dcl  arg_list_ptr ptr;				/* ptr to the system entry points arg list  */
dcl  bit36 bit (36) based;				/* a based word for bit manipulation  */
dcl  convert_status_code_ entry (fixed bin(35), char (8) aligned, char (100) aligned);
dcl  cu_$arg_count entry (fixed bin(24));
dcl  cu_$arg_list_ptr entry (ptr);
dcl  cv_dec_check_ entry (char (*), fixed bin(35)) returns (fixed bin(35));
dcl  db ext entry;
dcl  ecode fixed bin(35);				/* local error code value  */
dcl  fixed builtin;
dcl  gcos_et_$unimp_mme fixed bin(35) ext;
dcl  gcos_mme_bort_$system entry options (variable);
dcl  increment fixed bin(24);				/* number of arg words to this MME  */
dcl  ioa_ ext entry options (variable);
dcl  ioa_$ioa_stream entry options (variable);
dcl  ioa_$general_rs entry (ptr, fixed bin(24), fixed bin(24), char (*), fixed bin(24), bit (1), bit (1));
dcl  long_message char (100) aligned;			/* long message for ecode  */
dcl  mme_number fixed bin(24);			/* the MME number for non-implemented MMEs  */
dcl  nargs fixed bin(24);
dcl  return_code fixed bin(24);			/* returned abort number for return_abort_number entry  */
dcl  rtn_string char (256);				/* output string for ioa_$general_rs  */
dcl  rtn_string_len fixed bin(24);			/* output string length from ioa_$general_rs  */
dcl  rtrim builtin;
dcl  short_message char (8) aligned;			/* short message for ecode  */
dcl 1 slave_prefix aligned based (slave_prefix_ptr),
    2 filler_1 (11) bit (36),
    2 ic_value bit (18) unal,
    2 termination_info bit (18) unal,
    2 filler_2 (6) bit (36),
    2 ic_and_i bit (36),
    2 filler_3 (5) bit (36),
    2 word_30 bit (36),
    2 filler_4 (23) bit (36),
    2 words_60_thru_65 bit (216);
dcl  slave_prefix_ptr ptr;				/* ptr to slave jobs prefix  */
dcl  substr builtin;
%page;
%include gcos_ext_stat_;
%page;
%include gcos_mme_names;
%page;
%include gcos_xlate_bcd_ascii_;
%page;
%include query_info;

end gcos_mme_bort_;
