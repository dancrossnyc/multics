/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gcos_mme_fcon_: proc (mcpp, increment);

/*
   *  MME GEFCON is used by GEFRC to obtain information about a particular file. This
   *  information is placed in the file control block or file control blocks if
   *  several are linked together. The address of the first file control block is found
   *  in the caller's Q register.
   *
   *
   Author: DICK SNYDER OCTOBER 26, 1970
   Change: D. KAYDEN  APRIL 1974, JULY 1974, AUGUST 1974, JANUARY 1975
   Change: R.H.MORRISON  MARCH 2, 1976
   Change: M. R. Jordan, October 1977
   Change: Dave Ward	09/14/81 arrayed fib usage.
*/
dcl  increment                fixed bin(24)parm	/* no. of param words to skip */;
dcl  mcpp                     ptr parm;
	mcp = mcpp;
	increment = 0;				/* => no arguments to MME. */
	j = fixed (substr (mc.regs.q, 1, 18));		/* get fcb offset */

loop:	;
	if j >= gcos_ext_stat_$storage_limit then return; /* out of bounds ? */
	if j < 8 then return;

	fcbp = addrel (gcos_ext_stat_$gcos_slave_area_seg, j-8); /* get ptr to -8 in fcb */
	i = fixed (substr (fcb.filecode, 1, 6));	/* pick up first letter of bcd filecode */
	substr (fc, 1, 1) = xlate (i);		/* put ascii equiv. in fc */
	i = fixed (substr (fcb.filecode, 7, 6));	/* get second bcd letter */
	substr (fc, 2, 1) = xlate (i);		/* put ascii equivalent in */


	do i = 1 to hbound (save_data.fibs, 1);
	     if fct.filecode (i) = fc then do;
		fibptr = fct (i).fibptr;
		if substr (mc.regs.q, 19, 2) ^= "00"b then do; /* alternate function requested */
		     if ^fib.tape then return;

		     if substr (mc.regs.q, 19, 1) then	/* set serial number in fib */
			fib.serial_no = substr (fcb.file_size, 1, 30);
		     else fib.density = substr (mc.regs.q, 33, 4); /* set new tape density in fib */

		     return;
		end;

		fcb.file_present = "1"b;		/* indicate file present */
		string (fcb.group) = "0"b;		/* clear */
		if fct.sysout (i) then goto sysout;

		fibptr = fct.fibptr (i);		/* get pointer to fib */
		fcb.dev_add = fib.plud;		/* copy log. unit info */

		if fib.tape then goto tape;		/* tape ? */
		if fib.console then goto console;
		if fib.print then goto printer;
		if fib.reader then goto reader;

		fcb.dev_type = "0110"b;		/* device is 64 word sector disk */
		fcb.random = fib.type;		/* copy random indicator */

		llinks = divide (fib.size, 320, 23, 0);
		if llinks > 16383 then fcb.file_size = unspec (llinks) | "400000000000"b3;
		else do;
		     b = mod (llinks-1, 12)+1;
		     c = b+divide (llinks+11, 12, 23, 0)-1;
		     fcb.file_size = unspec (bc);
		end;

		goto next_fcb;			/* get next fcb */


tape:		;
		fcb.dev_type = "0010"b;
		if fib.tracks = "01"b then fcb.random = "0"b; /* 7 track tape */
		else fcb.random = "1"b;		/* 9 track tape or default */
		fcb.file_size = fib.serial_no;	/* plug in serial no */
		fcb.reel_seq_no = substr (unspec (fib.seq_no), 10, 9); /* plug in sequence no */

		if fib.disp = "11"b | fib.disp = "00"b then fcb.int_cntrl = "1"b; /* set special bit */
		goto next_fcb;			/* get next fcb */

console:		;
		fcb.dev_type = "1101"b;
		goto next_fcb;

printer:		;
		fcb.dev_type = "1010"b;
		goto next_fcb;

reader:		;
		fcb.dev_type = "1000"b;
		goto next_fcb;

sysout:		;
		if fct.dac (i) then goto dac;
		fcb.sysout = "1"b;
		goto next_fcb;

dac:		;
		fcb.dev_type = "0111"b;
		goto next_fcb;
	     end;
	end;

next_fcb:	;
	j = fixed (fcb.fcbptr);			/* get next fcb address */
	if j = 0 then return;			/* no more ? */
	if j = fixed (substr (mc.regs.q, 1, 18)) then return; /* end of loop ? */
	goto loop;				/* no...process more */
%page;
/*   Variables for gcos_mme_fcon_:		 */
/*   IDENTIFIER		ATTRIBUTES	 */
dcl  addr                     builtin;
dcl  addrel                   builtin;
dcl  divide                   builtin;
dcl  fc                       char(2)	/* holder for file code */;
dcl  fcbp                     ptr	/* pointer to fcb */;
dcl  fixed                    builtin;
dcl  i                        fixed bin(24);
dcl  j                        fixed bin(24);
dcl  llinks                   fixed bin(23);
dcl  mod                      builtin;
dcl  string                   builtin;
dcl  substr                   builtin;
dcl  temp                     bit(12) aligned	/* holder for bcd filecode */;
dcl  unspec                   builtin;

dcl 1 bc aligned,
    2 b fixed bin(17)unaligned,
    2 c fixed bin(17)unaligned;


dcl 1 fcb aligned based (fcbp),			/* fcb model */

/* 	-8		 */

    2 fill1 bit(27) unaligned,
    2 reel_seq_no bit(9) unaligned,			/* tape reel sequence no */

/* 	-7		 */
    2 file_size bit(36) unaligned,			/* for disk - file size */
						/* for tape - file serial number */

/* 	-6		 */

    2 fill2 bit(36) unaligned,

/* 	-5		 */

    2 fill3 bit(18) unaligned,
    2 file_present bit(1) unaligned,
    2 fill4 bit(10) unaligned,
    2 int_cntrl bit(1) unaligned,			/* bit used if tape */
    2 fill5 bit(6) unaligned,

/* 	-4		 */

    2 pat bit(18) unaligned,
    2 zero1 bit(6) unaligned,
    2 filecode bit(12) unaligned,

/* 	-3		 */

    2 fill6 bit(36),

/* 	-2		 */

    2 fill7 bit(36),

/* 	-1		 */

    2 fcbptr bit(18) unaligned,
    2 dev_add bit(18) unaligned,

/* 	0		 */

    2 fill8 bit(24) unaligned,
    2 group unaligned,
      3 random bit(1) unaligned,
      3 sysout bit(1) unaligned,
      3 dev_type bit(4) unaligned,
      3 zero2 bit(6) unaligned;
%page;
%include gcos_ext_stat_;
%page;
%include gcos_xlate_bcd_ascii_;
     end gcos_mme_fcon_;
