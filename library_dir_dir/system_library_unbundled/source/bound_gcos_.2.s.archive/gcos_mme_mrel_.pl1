/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/*
   ********************************************************************************************
   ********************************************************************************************
   *
   *
   *	M M E  G E M R E L
   *
   *
   *  MME GEMREL  is used to deallocate a specified amount of memory from a requesting
   *  program's total assigned memory. Actual memory deallocation is in multiples of 1024
   *  words. Memory may be released from either the upper bound or the lower bound or
   *  both. Lower memory release will cause address relocation.
   *
   *	CALLING SEQUENCE:
   *
   *	MME     GEMREL
   *
   *	C(A) 0-17		return address relative to the new base address
   *	C(Q) 0-17		number of words of lower memory to release
   *	C(Q) 18-35	number of words of upper memory to release
   *
   *
   *	WRITTEN BY DICK SNYDER, NOVEMBER 18,1970
   *	MODIFIED BY T. CASEY, OCTOBER 1973
   *	MODIFIED BY D. KAYDEN, MAY 1974
   *	Modified by M. R. Jordan, January 1977
   *
   *
   ********************************************************************************************
   ********************************************************************************************
*/



gcos_mme_mrel_: procedure (mcp, increment);

dcl  addr builtin;
dcl  addrel builtin;
dcl  code fixed bin(35);						/*  error code from called support routines  */
dcl  divide builtin;
dcl  fixed builtin;
dcl  gcos_error_ entry options (variable);
dcl  gcos_et_$bad_mme_addr fixed bin(35) ext;
dcl  gcos_mme_bort_$system entry options (variable);
dcl  gcos_set_slave_$load_bar entry (fixed bin(18));
dcl  gseg char (length_in_bytes) based;						/*  gcos_slave are segment mask  */
dcl  hcs_$set_max_length_seg entry (ptr, fixed bin(19), fixed bin(35));
dcl  hcs_$truncate_seg entry (ptr, fixed bin(19), fixed bin(35));
dcl  increment fixed bin(18);						/*  number of arguments to this MME  */
dcl  length_in_bytes fixed bin(20);						/*  length of the GCOS job segment in bytes  */
dcl  lower fixed bin(18);						/*	number of words to release on the low end  */
dcl  new_storage_limit fixed bin(18);						/*  new slave storage limit  */
dcl  substr builtin;
dcl  upper fixed bin(18);						/*	number of words to release on the upper end  */
dcl  word bit (36) aligned ;						/*  a one word mask  */

/*

   First initialize the pointer to the SCU data.	Then determine
   how much memory is to be released from the upper and lower ends.

*/


	scup = addr (mc.scu);
	word = (36)"0"b;
	substr (word, 19, 8) = substr (mc.regs.q, 1, 8);
	lower = fixed (word, 18);
	substr (word, 19, 8) = substr (mc.regs.q, 19, 8);
	upper = fixed (word, 18);


/*

   Calculate the new memory size as the old size minus the total
   amount released.  There must be at least 1K to continue.

*/


	new_storage_limit = gcos_ext_stat_$storage_limit-upper-lower;
	if new_storage_limit < 1024 then
	     call gcos_mme_bort_$system (gcos_et_$bad_mme_addr, "Less than 1K memory remaining.");


/*

   Now that we have the new memory limit, save it and load the
   BAR with it.

*/


	gcos_ext_stat_$storage_limit = new_storage_limit;
	call gcos_set_slave_$load_bar (divide (gcos_ext_stat_$storage_limit, 512, 9, 0));


/*

   Now, if there is any memory released on the low end, we will move everything
   down by "lower" words so that we can avoid any base value other than
   zero in the BAR.  This will allow execution with the -no_bar argument to allow
   the user to user debug.

*/


	if lower ^= 0 then do;
	     length_in_bytes = new_storage_limit * 4 ;
	     gcos_ext_stat_$gcos_slave_area_seg -> gseg = addrel (gcos_ext_stat_$gcos_slave_area_seg, lower) -> gseg;
	end ;


/*

   Now truncate the gcos_slave_area_seg to the new size.

*/


	call hcs_$truncate_seg (gcos_ext_stat_$gcos_slave_area_seg, gcos_ext_stat_$storage_limit, code);
	if code ^= 0 then call gcos_error_ (code, "Unable to truncate gcos_slave_area_seg.");
	call hcs_$set_max_length_seg (gcos_ext_stat_$gcos_slave_area_seg, gcos_ext_stat_$storage_limit, code);
	if code ^= 0 then call gcos_error_ (code, "Unable to set max length of gcos_slave_area_seg.");


/*

   Now caculate the proper offset to be applied to scu.ilc to get the user
   back to the location specified in AU.  To do so we take the desired
   location minus the ilc value minus a fudge factor of one.

*/


	increment = fixed (substr (mc.regs.a, 1, 18), 18)-fixed (scu.ilc, 18)-1;

	return;

%include gcos_ext_stat_;


     end gcos_mme_mrel_;
