/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* *******************************************************************************************
   *******************************************************************************************
   *
   *
   * 		M M E   G E R O U T
   *
   *	MME GEROUT enables a user program to send output to and receive input
   *	from a remote terminal and to request terminal type.
   *
   *	The following operations are implemented -
   *
   *		3 (octal)  -	Direct Access Output
   *		4 (octal)  -	Direct Access Output, Then Input
   *		5 (octal)  -	User Program Inquiry to Terminal
   *		6 (octal)  -	Program Requests Terminal Type
   *		17 (octal) -	Program Requests Line Disconnect
   *		20 (octal) -	Direct Access Current Line Status
   *
   *	All operations not implemented fall into the categories of paper tape
   *	manipulation or line switching.
   *
   *	Output is written to the stream "user_output" and input is read from
   *	the stream "user_input".  Data is translated to and from the Multics
   *	standard data format.  This allows the stream names to be associated
   *	with any type of device.  The edited i/o mode is used for output to
   *	suppress escape printing.
   *
   *	A terminal break is simulated by a QUIT followed by the command
   *	"program_interrupt".
   *
   *	Direct access is established (if not already) on any correct call with
   *	operation code 3, 4, or 5.
   *
   *	WRITTEN BY DAVID KAYDEN  JANUARY 1974
   *	Modified by M. R. Jordan, October 1977
   *      Modified by A. N. Kepner, March 1978 to allow courtesy call i/o  within cc routines
   *
   *******************************************************************************************
   ****************************************************************************************** */

gcos_mme_rout_: proc (mcp, increment);




/*    	D E C L A R A T I O N S				*/




%include gcos_ext_stat_;

/*	External Entries			*/


dcl  continue_to_signal_      ext entry (fixed bin(35));
dcl  gcos_et_$bad_cc_ptr      fixed bin(35) ext;
dcl  gcos_et_$bad_mme_in_cc   fixed bin(35) ext;
dcl  gcos_et_$bad_rmt_station_id fixed bin(35) ext;
dcl  gcos_et_$bad_rout_op_code fixed bin(35) ext;
dcl  gcos_et_$bad_rout_pgm_id fixed bin(35) ext;
dcl  gcos_et_$bad_status_ret_ptr fixed bin(35) ext;
dcl  gcos_et_$invalid_dcw_ptr fixed bin(35) ext;
dcl  gcos_et_$rmt_term_rec_size fixed bin(35) ext;
dcl  gcos_mme_bort_$system    ext entry options (variable);
dcl  ioa_                     ext entry options (variable);
dcl  ios_$changemode          entry (char (*), char (*), char (*), bit (72) aligned);
dcl  ios_$read_ptr            ext entry (pointer, fixed bin(24), fixed bin(24));
dcl  ios_$write_ptr           ext entry (pointer, fixed bin(24), fixed bin(24));


/*	Work Variables			*/


dcl  increment                fixed bin(24);						/* number of words in mme request 	*/

dcl 1 gerout_word aligned based (opptr),		/* model of word following mme	*/
    2 buffp bit (18) unaligned,			/* buffer pointer			*/
    2 op bit (6) unaligned,				/* operation code of request		*/
    2 id bit (12) unaligned;						/* terminal id of request		*/

dcl 1 gerout_word_ aligned based (opptr),		/* gerout word overlay for op = 20	*/
    2 term_type bit (6) unaligned,			/* terminal type field		*/
    2 pad bit (30) unaligned;

dcl 1 output_buffer aligned based (buffptr),		/* model of output buffer		*/
    2 word_count bit (18) unaligned,			/* number of words to send		*/
    2 inputp bit (18) unaligned,			/* input buffer location		*/
    2 char_count bit (18) unaligned,			/* output character count		*/
    2 control_bits bit (18) unaligned,			/* output control bits		*/
    2 data (1280) bit (9) unaligned;						/* output character data		*/

dcl 1 input_buffer aligned based (inptr),		/* model of input buffer		*/
    2 char_count bit (18) unaligned,			/* input character count		*/
    2 control_bits bit (18) unaligned,			/* input control bits		*/
    2 data (1280) bit (9) unaligned;						/* input character data		*/

dcl 1 return_word aligned based (sptr),			/* model of return word		*/
    2 status_return bit (18) unaligned,			/* status word pointer		*/
    2 courtesy_call bit (18) unaligned;						/* pointer to courtesy call rtn.	*/

dcl 1 status_word aligned based (statptr),		/* model of status word	*/
    2 pad bit (30) unaligned,				/* unused portion of word		*/
    2 wait bit (1) unaligned,				/* line waiting to connect to pgm.	*/
    2 idle bit (1) unaligned,				/* terminal is idle			*/
    2 busy bit (1) unaligned,				/* terminal is involved in I/O	*/
    2 complete bit (1) unaligned,			/* I/O transmission is complete	*/
    2 disconnected bit (1) unaligned,			/* terminal is not connected		*/
    2 break bit (1) unaligned;						/* operator sent BREAK (quit key) 	*/

dcl  inquiry_name             bit (36) aligned based (nameptr);						/* program inquiry identification	*/

dcl 1 table (2) aligned internal static,		/* tabled inquiry requests - 2 allowed	*/
    2 name bit (36) aligned,				/* inquiry name of request		*/
    2 routptr ptr;						/* pointer to inquiry request mme	*/

dcl (buffptr, inptr, gseg, opptr, nameptr, sptr, statptr) ptr;

dcl  1 courtesy_call_conditions            like save_machine_conditions based (mcp);
dcl  code                     fixed bin(35);
dcl  iosbuf                   (1297) bit (9);
dcl  new_next_avail           fixed bin(24);
dcl  scratch_word             bit (36) aligned;
dcl  slave_limit              fixed bin(19);
dcl  status                   bit (72) aligned;
dcl (i, j, k) fixed bin(24);

/*	Internal Static Variables		*/

dcl  dac_id                   bit (12) aligned internal static;						/* line id of current direct access	*/
dcl  ackno_break              bit (1) internal static;
dcl  old_mode                 char (128) internal static;
dcl  skip                     bit (1) internal static;
dcl  skip_loc                 label internal static;

/*	Constants				*/

dcl  CR                       bit (9) internal static init ("015"b3     );
dcl  LF                       bit (9) internal static init ("012"b3     );
dcl  NULL                     bit (9) internal static init ("177"b3     );
dcl  zero_word                bit (36) aligned internal static init ((36)"0"b);

dcl (addr, addrel, fixed, substr, unspec) builtin;



/*	P  R  O  C  E  D  U  R  E				*/




	if ^gcos_ext_stat_$save_data.rout then do;	/* once per activity initialization	*/
	     dac_id = (12)"0"b;			/* not in direct access now		*/
	     table.name (1) = zero_word;		/* and no requests tabled		*/
	     table.name (2) = zero_word;
	     ackno_break = "0"b;
	     skip = "0"b;
	     call ios_$changemode ("user_output", "edited", old_mode, status);
	     gcos_ext_stat_$save_data.rout = "1"b;	/* initialization complete		*/
	end;

	gseg = gcos_ext_stat_$gcos_slave_area_seg;	/* get local pointer to slave area	*/
	slave_limit = gcos_ext_stat_$storage_limit;	/* copy slave storage limit, too	*/
	increment = 2;				/* initialize parameter length	*/
	scup = addr (mc.scu);			/* get pointer to scu data		*/
	i = fixed (scu.ilc)+1;			/* get offset of first parameter word	*/
	opptr = addrel (gseg, i);

	k = fixed (gerout_word.op);			/* extract operation code		*/

	if k = 5 then go to inquiry;			/* remote inquiry requested		*/

	if gerout_word.id = (12)"0"b then go to err75;	/* zero terminal id is illegal	*/

	if k = 6 then go to terminal_type;		/* program requests terminal type	*/

	if k ^= 3 then				/* check remaining implemented codes	*/
	     if k ^= 4 then
		if k ^= 15 then			/* if no match then operation is	*/
		     if k ^= 16 then go to err72;	/* undefined or not implemented	*/
						/* not implemented			*/
	sptr = addrel (opptr, 1);			/* return word follows operation word	*/
	if fixed (return_word.status_return) >= slave_limit then go to err41;
	if fixed (return_word.courtesy_call) >= slave_limit then go to err44;
	statptr = addr (scratch_word);		/* allows no status word pointer	*/
	if return_word.status_return ^= (18)"0"b then
	     statptr = addrel (gseg, return_word.status_return);

	unspec (status_word) = zero_word;		/* clear status word		*/

	if k = 3 then go to in_out;			/* output only request		*/

	if k = 4 then go to in_out;			/* output then input request		*/

	if k = 15 then go to disconnect;		/* disconnect request		*/


/*	terminal status request				*/



	if dac_id ^= gerout_word.id then do;		/* if program uses a different id, then	*/
disc:	     status_word.disconnected = "1"b;		/* tell him line is disconnected	*/
	     return;
	end;
	if ackno_break then do;			/* if a "break" has occurred		*/
	     status_word.break = "1"b;		/* then acknowledge it		*/
	     ackno_break = "0"b;
	end;
	else status_word.idle = "1"b;			/* otherwise, the line is idle	*/
	go to type;				/* get the terminal type, too		*/




/*	terminal type request				*/



terminal_type: if dac_id ^= gerout_word.id then do;	/* if id does not match, then 	*/
	     increment = 1;				/* take disconnect return		*/
	     return;
	end;

type:	term_type = "04"b3 ;			/* if id matches, then terminal type	*/
	return;					/* is teleprinter			*/




/*	line disconnect request				*/



disconnect: status_word.disconnected = "1"b;		/* status is always disconnected	*/
	if dac_id ^= gerout_word.id then go to cc_check;	/* if not connected to this id, then 	*/
						/* nothing to do			*/
	dac_id = (12)"0"b;
	ackno_break = "0"b;				/* partial reinitialization		*/

	if ^gcos_ext_stat_$save_data.brief then
	     call ioa_ ("direct access disconnect");

	do i = 1, 2;				/* now check for tabled request	*/
	     if table.name (i) ^= zero_word then do;	/* tabled entry found		*/
		table.name (i) = zero_word;		/* clear table entry		*/
		opptr = table.routptr (i);		/* point to remembered inquiry mme	*/
		dac_id = (2)"22"b3 ;		/* set new terminal id		*/
		gerout_word.id = dac_id;		/* tell program the terminal id	*/
		if ^gcos_ext_stat_$save_data.brief then
		     call ioa_ ("direct access established"); /* this could be removed if not wanted	*/
		go to cc_check;
	     end;
	end;
	go to cc_check;				/* nothing found - not in direct access	*/


/*	remote inquiry request				*/



inquiry:	nameptr = addrel (opptr, 1);			/* set pointer to inquiry name	*/
	if inquiry_name = zero_word then go to err76;	/* zero inquiry name is illegal	*/

	if dac_id = (12)"0"b then do;			/* if not already in direct access,	*/
						/* then establish it		*/
	     dac_id = (2)"21"b3 ;			/* set terminal id			*/
inq1:	     gerout_word.id = dac_id;			/* tell program the terminal id	*/
	     if ^gcos_ext_stat_$save_data.brief then
		call ioa_ ("direct access established"); /* this could be removed if not wanted	*/
	     return;
	end;

/* request must be tabled		*/
	do i = 1, 2;				/* check against tabled inquiries	*/
	     if table.name (i) ^= zero_word then do;
		if inquiry_name = table.name (i) then	/* check for same name already in table	*/
		     if table.routptr (i) = opptr then return; /* if so, location of mme must match	*/
		     else go to err76;		/* otherwise abort			*/
		if table.routptr (i) = opptr then go to err76; /* different names at the same	*/
	     end;					/* location is also illegal		*/
	end;
	do i = 1, 2;				/* now attempt to table the request	*/
	     if table.name (i) = zero_word then do;	/* found a slot			*/
		table.name (i) = inquiry_name;	/* save inquiry name		*/
		table.routptr (i) = opptr;		/* and mme location			*/
		return;
	     end;
	end;
	go to err76;				/* table is full			*/


/*	output or output - input request			*/



in_out:	if dac_id = (12)"0"b then dac_id = gerout_word.id; /* connect by terminal id match	*/

	if dac_id ^= gerout_word.id then go to disc;	/* i/o request to wrong terminal id	*/
	i = fixed (gerout_word.buffp);		/* get address of output buffer	*/
	if i > slave_limit then go to err43;
	buffptr = addrel (gseg, i);			/* pointer to output buffer		*/
	j = fixed (output_buffer.char_count);		/* output character count		*/

	if j > 1296 then go to err74;			/* is buffer size too big (GCOS limit)	*/

	if (fixed (output_buffer.word_count)-1)*4 < j then go to err74; /* check word count	*/

	if k = 4 then
	     if fixed (output_buffer.inputp) + 324 > slave_limit
	     then go to err74;			/* check input buffer against limits	*/

	do i = 1 to j;				/* copy output buffer		*/
	     iosbuf (i) = output_buffer.data (i);
	end;

	skip_loc = return_break;			/* save stack frame for nonlocal transfer */
	skip = "1"b;				/* indicate i/o in progress		*/
	if ackno_break then do;			/* was there a previous break		*/
return_break:  skip = "0"b;				/* then skip i/o			*/
	     status_word.break = "1"b;		/* acknowledge break		*/
	     ackno_break = "0"b;			/* acknowledgement done		*/
	     go to cc_check;
	end;

	do i = 1 to j;				/* convert GCOS buffer to Multics	*/
	     if iosbuf (i) = LF then do;		/* remove initial line feed, if there	*/
		iosbuf (i) = NULL;			/* replace it with a null character	*/
		go to append_lf;
	     end;
	     if iosbuf (i) ^= CR then			/* stop search for line feed on first	*/
		if iosbuf (i) ^= NULL then go to append_lf; /* printable character		*/
	end;

append_lf: if k = 3 then do;				/* now append a "new line" to the end	*/
	     j = j + 1;				/* if this is output only		*/
	     iosbuf (j) = LF;
	end;

	call ios_$write_ptr (addr (iosbuf), 0, j);	/* send output to "user_output"	*/

	if k = 3 then go to io_done;			/* if output only, then skip input	*/

	inptr = addrel (gseg, output_buffer.inputp);	/* get pointer to input buffer	*/

	call ios_$read_ptr (addr (input_buffer.data), 1296, j); /* read from user_input		*/

	if input_buffer.data (j) = LF then		/* there should be a line feed on end	*/
	     input_buffer.data (j) = CR;		/* so replace it with carriage return	*/

	input_buffer.char_count = substr (unspec (j), 19, 18); /* record input character count	*/

io_done:	skip = "0"b;				/* i/o complete			*/
	status_word.complete = "1"b;			/* normal status to program		*/


cc_check:	if return_word.courtesy_call = (18)"0"b then return; /* check for user courtesy call	*/
	if gcos_ext_stat_$save_data.cc then do;		/* Already in courtesy call */

/* Check courtesy call queue for overflow */
	     new_next_avail = mod (courtesy_call.next_avail,
		hbound (courtesy_call.queue, 1))+1;
	     if courtesy_call.next_out = new_next_avail then
		call gcos_mme_bort_$system (gcos_et_$bad_mme_in_cc,
		"Maximum of ^i simultaneous outstanding courtesy calls has been exceeded.",
		hbound (courtesy_call.queue, 1)-1);

/* Add cc address to queue */
	     courtesy_call.queue (courtesy_call.next_avail) =
		fixed (return_word.courtesy_call);
	     courtesy_call.next_avail = new_next_avail;
	end;

	else do;					/* Not in courtesy call yet. */

	     gcos_ext_stat_$save_data.cc = "1"b;	/* indicate that courtesy call in progress */


/* 	Save machine conditions and increment value for return to the caller of	 */
/* 	MME GEINOS when the MME GEENDC is executed. Put courtesy call address		 */
/* 	in increment to cause control to go to courtesy call routine.		 */


	     gcos_ext_stat_$increment_hold = increment;	/* save increment */
	     courtesy_call.hold = courtesy_call_conditions.save_space; /* save MME GEINOS conditions */
	     i = fixed (return_word.courtesy_call);	/* get courtesy call address */
	     j = fixed (scu.ilc);			/* get loc of MME GEINOS */
	     increment = i-j-1;			/* compute increment value to cause control to go to cc rtn */
	end;
	return;


/*	error messages				*/


/*	standard GCOS error messages are used		*/

err41:	code = gcos_et_$bad_status_ret_ptr;
	go to abort;
err43:	code = gcos_et_$invalid_dcw_ptr;
	go to abort;
err44:	code = gcos_et_$bad_cc_ptr;
	go to abort;
err72:	code = gcos_et_$bad_rout_op_code;
	go to abort;
err74:	code = gcos_et_$rmt_term_rec_size;
	go to abort;
err75:	code = gcos_et_$bad_rmt_station_id;
	go to abort;
err76:	code = gcos_et_$bad_rout_pgm_id;
abort:	call gcos_mme_bort_$system (code);


/*	process a terminal break			*/


/*	(simulated by a QUIT followed by the command "program_interrupt") */

rout_interrupt: entry ();


	if gcos_ext_stat_$save_data.rout & dac_id ^= (12)"0"b then do; /* are we in direct access		*/

	     if skip then go to skip_loc;		/* if i/o in progress - abort it	*/
	     ackno_break = "1"b;			/* otherwise remember break		*/
	     return;				/* and tell program later		*/
	end;

	call continue_to_signal_ (code);		/* not in direct access now		*/
	return;					/* so pretend we didn't set handler	*/


/*	restore "user_output" edited/normal mode after an activity	*/


rout_cleanup: entry ();

	call ios_$changemode ("user_output", old_mode, "", status); /* restore edited/normal mode	*/
	old_mode = "";				/* prevent mode from being reset twice	*/
	gcos_ext_stat_$save_data.rout = "0"b;		/* reset direct access flag		*/
	return;

     end gcos_mme_rout_;
