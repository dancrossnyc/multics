/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/*
   ********************************************************************************************
   ********************************************************************************************
   *
   *
   *	M M E   G E S Y O T
   *
   *
   *  MME GESYOT is used to transmit output records to the SYSOUT collector media
   *  for subsequent printing or punching.  SYSOUT collects these records, which may
   *  constitute several different reports for each concurrent activity.
   *
   *
   *	CALLING SEQUENCE
   *
   *      MME       GESYOT
   *      ZERO      FCB,0
   *	return
   *
   *  where FCB is the location (word 0) of the file control block for the file
   *  containing to records to be transmitted.  FCB+2 contains the DCW location.
   *  The DCW contains the buffer location and length.
   *
   *
   *  or to request backdoor file processing:
   *
   *	MME	GESYOT
   *	BCI	1,000FC
   *	BCI	1,AAAAAB
   *	denial return
   *	normal return
   *
   *  where FC is the file code of the users mass storage file;
   *  AAAAA is the banner string used to identify the output;
   *  and B is the type of output (1=punch,2=bcd print,3=ascii print).
   *
   *
   *      WRITTEN BY DICK SNYDER  NOVEMBER 30, 1970
   *      RETYPED BY T.CASEY DECEMBER 1972
   *      MODIFIED BY T.CASEY DECEMBER 1972, MAY 1974
   *	MODIFIED BY D. KAYDEN  MARCH 1974, APRIL 1974, AUGUST 1974
   *	Modified by M. R. Jordan,  April 1977
   *	Modified by S. C. Akers December 1981 Change \014 to %page
   *
   ********************************************************************************************
   ********************************************************************************************
*/


gcos_mme_syot_: proc (mcp, increment);
%page;
dcl  addr builtin;
dcl  addrel builtin;
dcl  bit36 bit (36) aligned based;
dcl  block_end fixed bin(24);
dcl  buffer_size fixed bin(24);
dcl  dcw_loc fixed bin(24);
dcl  dcw_ptr ptr;
dcl  execution_report_flag bit (1) aligned init ("0"b);
dcl  fc char (2);
dcl  fcb_loc fixed bin(24);
dcl  fcword_ptr ptr;
dcl  file_ptr ptr;
dcl  fixed builtin;
dcl  gcos_et_$bad_syot_buffer_ptr fixed bin(35) ext;
dcl  gcos_et_$bad_syot_media_code fixed bin(35) ext;
dcl  gcos_et_$bad_syot_status_ptr fixed bin(35) ext;
dcl  gcos_et_$no_reason fixed bin(35) ext;
dcl  gcos_et_$output_limit_exceeded fixed bin(35) ext;
dcl  gcos_et_$syot_alloc_err fixed bin(35) ext;
dcl  gcos_et_$syot_buffer_too_high fixed bin(35) ext;
dcl  gcos_et_$syot_rec_size_err fixed bin(35) ext;
dcl  gcos_mme_bort_$system entry options (variable);
dcl  gcos_write_$record_ptr ext entry (ptr, char (*), bit (8));
dcl  gseg_ptr ptr;
dcl  i fixed bin(24);
dcl  increment fixed bin(24);
dcl  last_file_ptr ptr;
dcl  null builtin;
dcl  rcw_loc fixed bin(24);
dcl  rcw_ptr ptr;
dcl  rec_len fixed bin(24);
dcl  record_string char (record_string_len) based (record_string_ptr);
dcl  record_string_len fixed bin(20);
dcl  record_string_ptr ptr;
dcl  storage_limit fixed bin(24);
dcl  substr builtin;
dcl  total_rec_len fixed bin(24);
%page;
dcl 1 dcw aligned based (dcw_ptr),
    2 address bit (18) unaligned,
    2 fill bit (6) unaligned,
    2 count bit (12) unaligned;


dcl 1 fcword aligned based (fcword_ptr),
    2 pad bit (24) unaligned,
    2 fc1 bit (6) unaligned,
    2 fc2 bit (6) unaligned;


dcl 1 rcw aligned based (rcw_ptr),
    2 record_len fixed bin(17) unaligned,
    2 processed bit (1) unaligned,
    2 control bit (5) unaligned,
    2 media_code bit (6) unaligned,
    2 report_code bit (6) unaligned;


dcl 1 word aligned based,
    2 upper bit (18) unaligned,
    2 lower bit (18) unaligned;
%page;
/*

   Make sure we have SYSOUT limits left.

*/


	if gcos_ext_stat_$sysout_lines > gcos_ext_stat_$sysout_limit then do;
	     call gcos_mme_bort_$system (gcos_et_$output_limit_exceeded);
	     gcos_ext_stat_$sysout_limit = gcos_ext_stat_$sysout_limit+10000;
	end;


/*

   Now that we know we have the SYSOUT limits to proceed,
   initialize some needed data items and continue.

*/


	increment = 1;
	gseg_ptr = gcos_ext_stat_$gcos_slave_area_seg;
	storage_limit = gcos_ext_stat_$storage_limit;
	scup = addr (mc.scu);


/*

   Get the FCB location from the first word after the MME.  If the FCB location is
   zero, this is a request for a "backdoor" file print.  We do not support this, so
   return the status to say no backdoor file allocated.

*/


	fcb_loc = fixed (addrel (gseg_ptr, fixed (scu.ilc, 18)+1) -> word.upper, 18);
	if fcb_loc = 0 then do;
	     mc.a = (33)"0"b || "101"b;
	     increment = 2;
	     return;
	end;


/*

   Validate the location of word -3 of the FCB.  If good then zero the
   word, as it is used later for a status return;


*/


	if fcb_loc - 3 >= storage_limit then
	     call gcos_mme_bort_$system (gcos_et_$bad_syot_status_ptr,
	     "MME GESYOT status return word is outside slave limits.");
	addrel (gseg_ptr, fcb_loc-3) -> bit36 = (36)"0"b;


/*

   Now we must get the file code from the FCB and look it up in the file code
   table.  If the file code is "00" or "  ", however, we know it is to go on the
   execution report.  Also, if the file code is not found in the file code table
   the output is to be put on the execution report.

*/


	if fcb_loc-4 >= storage_limit then
	     call gcos_mme_bort_$system (gcos_et_$no_reason, "MME GESYOT file code word is outside slave limits.");
	fcword_ptr = addrel (gseg_ptr, fcb_loc-4);
	substr (fc, 1, 1) = xlate (fixed (fc1, 6));
	substr (fc, 2, 1) = xlate (fixed (fc2, 6));


	if fc ^= "00" & fc ^= "  " then do;

	     do i = 1 to hbound (save_data.fibs, 1);
		if fct.filecode (i) = fc then do;
		     if fct.sysout (i) & ^fct.dac (i) then go to hit;
		     call gcos_mme_bort_$system (gcos_et_$syot_alloc_err,
			"MME GESYOT file ^a is not assigned to SYSOUT.", fc);
		end;
	     end;

	end;


	execution_report_flag = "1"b;


/*

   Verify the locations of the DCW word, and buffer.  Also check the buffer size.
   If the buffer is empty (size = 0) then don't waste any time on this request.

*/


hit: ;

	dcw_loc = fixed (addrel (gseg_ptr, fcb_loc+2) -> word.lower, 18);
	if dcw_loc >= storage_limit then
	     call gcos_mme_bort_$system (gcos_et_$bad_syot_buffer_ptr, "MME GESYOT buffer is outside slave limits.");
	dcw_ptr = addrel (gseg_ptr, dcw_loc);


	buffer_size = fixed (dcw.count, 12);
	if buffer_size > 320 then
	     call gcos_mme_bort_$system (gcos_et_$syot_rec_size_err,
	     "MME GESYOT buffer length is greater than 320 words.");
	if buffer_size = 0 then go to return_stat;


	block_end = fixed (dcw.address, 18) + buffer_size;
	if block_end >= storage_limit then
	     call gcos_mme_bort_$system (gcos_et_$syot_buffer_too_high,
	     "MME GESYOT buffer not entirely within slave limits.");


/*

   Now we can process the data buffer passed by the slave job.  But first
   let's initialize some data items.

*/

	last_file_ptr = null;


/*

   NOTE:  The GCOS SYSOUT module assumes that the buffer is located
   two words beyond the DCW word.  This assumption is duplicated in
   the following statement.

*/


	rcw_loc = dcw_loc + 2 + 2;


/*

   Position to the next record in the buffer and verify it's length.

*/


next: ;

	rcw_ptr = addrel (gseg_ptr, rcw_loc);		/* move pointer to rcw of next record */
	rec_len = rcw.record_len;
	if rec_len > 320 then
	     call gcos_mme_bort_$system (gcos_et_$syot_rec_size_err,
	     "MME GESYOT Record Control Word (RCW) specifies record length greater than 320 words.");


/*

   Now see if the record is to be processed.  Check the bit that tells us
   it has already been processed and check for zero media code or record
   length.

*/


	if rcw.processed | rcw.media_code = "00"b3 | rec_len = 0 then do;
	     call write;
	     last_file_ptr = null;
	     go to bump;
	end;


/*

   Process the special media codes for COBOL-74.  These records have some information in the
   first two characters that must be done away with.  These are media codes 9 and 13.

*/


	if rcw.media_code = "11"b3 then do;
	     substr (addrel (rcw_ptr, 1) -> bit36, 1, 12) = "1717"b3;
	     rcw.media_code = "03"b3;
	end;
	else if rcw.media_code = "15"b3 then do;
	     substr (addrel (rcw_ptr, 1) -> bit36, 1, 18) = "177177"b3;
	     rcw.media_code = "07"b3;
	end;


/*

   If this data is to be put on the execution report, then do so.  Only one record will
   be processed from the buffer.

*/


	if execution_report_flag then do;
	     last_file_ptr = gcos_ext_stat_$er;
	     record_string_ptr = rcw_ptr;
	     total_rec_len = rec_len + 1;
	     call write;
	     go to return_stat;
	end;


/*

   Verify the media code of the record.  It must be print or punch.
   If a bad media code is encountered, abort the slave job.  Print
   media codes are 3 and 7, punch media codes are 1, 2, and 10.

*/


	if fixed (rcw.media_code, 6, 0) < 11 then goto media (fixed (rcw.media_code, 6, 0));
	else goto bad_media;


media (1): ;
media (2): ;
media (10): ;

	file_ptr = gcos_ext_stat_$pch;
	goto media_ok;


media (3): ;
media (7): ;

	file_ptr = gcos_ext_stat_$prt;
	goto media_ok;


media (0): ;
media (4): ;
media (5): ;
media (6): ;
media (8): ;
media (9): ;
bad_media: ;

	call gcos_mme_bort_$system (gcos_et_$bad_syot_media_code, "MME GESYOT media code not print or punch.");


media_ok: ;

/*

   If this record has the same destination as the last record, then simply
   add it to the accumulated length.  If not, write it and start a new
   accumulation.  Make sure we count the lines/cards produced to enforce
   SYSOUT limits.

*/


	if last_file_ptr = file_ptr then total_rec_len = total_rec_len+rec_len+1;
	else do;
	     call write;
	     last_file_ptr = file_ptr;
	     record_string_ptr = rcw_ptr;
	     total_rec_len = rec_len + 1;
	end;
	gcos_ext_stat_$sysout_lines = gcos_ext_stat_$sysout_lines + 1;


/*

   After marking the record as processed, calculate the new RCW location and see
   if we are, finished with the current buffer.  If we are, make sure all records
   have been written to the collection file.

*/


bump: ;

	rcw.processed = "1"b;
	rcw_loc = rcw_loc + rec_len + 1;
	if rcw_loc < block_end then go to next;
	call write;


/*

   At this point we are ready to return to the slave job.  Make sure we mark
   the status work to show a termination status with no errors.

*/


return_stat: ;

	addrel (gseg_ptr, fcb_loc-3) -> bit36 = "400000000000"b3;

	return;
%page;
/*

   The write procedure acctually writes the accumulated records to the proper collection
   file for later processing by gcos_sysprint or gcos_syspunch.

*/


write: 	proc;


/*

   Check first to see if we have anything to write...
   If not, then simply exit.

*/


	if last_file_ptr ^= null
	then do;

	     record_string_len = total_rec_len * 4;
	     call gcos_write_$record_ptr (last_file_ptr, record_string, "0"b);
	     end;

	return;


end write;
%page;
%include gcos_ext_stat_;
%page;
%page;
%include gcos_xlate_bcd_ascii_;


     end gcos_mme_syot_;
