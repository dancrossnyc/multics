/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/*
   ********************************************************************************************
   ********************************************************************************************
   *
   *
   *	M M E  G E F R C E
   *
   *
   *	MME GEFRCE is used to produce ISP abort messages or perform
   *	UFAS label processing.
   *
   *
   *	CALLING SEQUENCE
   *
   *	MME	GEFRCE
   *	ZERO	Function,Abort_message_number
   *	ZERO	Parameter_list_ptr,Number_of_ptrs_in_list
   *	return
   *
   *	For function < 0 ISP abort processing is invoked.  Function ^= -1 is in error.
   *
   *
   *	For Function >= 0 unimplemented label processing is called.  This always
   *	results in an abort of the slave job.
   *
   *
   *	Written by M. R. Jordan,  August 1977
   *
   ********************************************************************************************
   ********************************************************************************************
*/



gcos_mme_frce_: procedure (mcp, increment);

dcl  BAD_FUNCTION_CODE char (48) static internal options (constant) init ("invalid function code specified for 'mme gefrce'");
dcl  BAD_MESSAGE_NUMBER char (31) static internal options (constant) init ("undefined error message number ");
dcl  BAD_PARAM_LOC char (38) static internal options (constant) init ("invalid 'mme gefrce' parameter address");
dcl  addr builtin;
dcl  addrel builtin;
dcl  fb35 fixed bin(35) aligned based;
dcl  divide builtin;
dcl  fixed builtin;
dcl  function fixed bin(24);
dcl  gcos_cv_gebcd_ascii_ entry (ptr, fixed bin(24), ptr);
dcl  gcos_et_$bad_mme_param fixed bin(35) ext;
dcl  gcos_et_$isp_sys_term fixed bin(35) ext;
dcl  gcos_et_$unimp_mme fixed bin(35) ext;
dcl  gcos_mme_bort_$system entry options (variable);
dcl  gseg_ptr ptr;
dcl  hbound builtin;
dcl  i fixed bin(24);
dcl  increment fixed bin(18);
dcl  ioa_$rsnnl entry options (variable);
dcl  last_loc fixed bin(18);
dcl  lbound builtin;
dcl  length builtin;
dcl  message char (128) varying;
dcl  message_num fixed bin(24);
dcl  min builtin;
dcl  mme_arg_ptr ptr;
dcl  param (3) character (48) varying;
dcl  param_len fixed bin(24);
dcl  param_list_len fixed bin(24);
dcl  param_list_loc fixed bin(18);
dcl  param_list_ptr ptr;
dcl  param_loc fixed bin(18);
dcl  param_pic picture "999999";
dcl  param_ptr ptr;
dcl  storage_limit fixed bin(18);
dcl  substr builtin;
dcl  temp_param char (48);

/*

   The following declaration is the argument list to the MME for ISP abort processing.

*/


dcl 1 mme_args aligned based (mme_arg_ptr),
    2 function fixed bin(17) unal,
    2 message_num fixed bin(17) unal,
    2 param_list_loc bit (18) unal,
    2 param_list_len fixed bin(17) unal;


/*

   The following is the parameter list used in ISP abort processing.

*/


dcl 1 param_list (param_list_len) aligned based (param_list_ptr),
    2 param_loc bit (18) unal,
    2 param_len fixed bin(17) unal;


/*

   The following are message texts and number of parameters expected.

*/


dcl 1 MESSAGE (0:33) aligned static internal options (constant),
    2 TEXT char (48) init (
     "^a",
     "file code '^a' is already open",
     "not enough memory to open data file '^a'",
     "file code '^a' requested but not present",
     "file code '^a' is not random",
     "key outside of record area for data file '^a'",
     "file '^a' record size ^6o > 1024 words",
     "file '^a' record size ^6o+3 >page size ^6o",
     "descriptor card file '^a' content error",
     "data file '^a' key size = 0",
     "index file '^a' and data file '^a' do not match",
     "protection error on file code '^a'",
     "data file '^a' is not open",
     "file code '^a' is not a data file",
     "data file '^a' was not opened by 'nopen'",
     "index file '^a' is too small",
     "journalization requested - journal file missing",
     "unrecoverable i/o error on file code '^a'",
     "page ^6o out of range of data file '^a'",
     "unable to locate required key in index file '^a'",
     "data file '^a' was not opened by 'iopen'",
     "not enough memory to run journal restore",
     "contents of journal tape file 't1' are not valid",
     "descriptor card file '.x' content error",
     "more than 20 data file codes specified",
     "unrecoverable read error on journal tape 't1'",
     "invalid file code for additional data file",
     "file code 'in' or 'ot' must be present for xutil",
     "file '^a' is not a valid isp index file",
     "no records have been stored in file '^a'",
     "file '^a' is not a valid isp data file",
     ".qpbg buffer is too small",
     "file '^a' page size discrepancy between isp/fms",
     "xckptp not taken before xrolbp executed"),
    2 NUM_PARAMS fixed bin(24)init ((6)1, 2, 3, (10)1, 2, (2)1, (7)0, (3)1, 0, (2)1);

/*

   Do some initialization and make sure the first argument word to the MME is accessable.

*/


	gseg_ptr = gcos_ext_stat_$gcos_slave_area_seg;
	storage_limit = gcos_ext_stat_$storage_limit;
	scup = addr (mc.scu);

	if fixed (scu.ilc, 18)+1 >= storage_limit then
	     call gcos_mme_bort_$system (gcos_et_$bad_mme_param, "MME GEFRCE parameter word is outside slave limits.");


/*

   Determine the function requested and attempt to process it.

*/


	mme_arg_ptr = addrel (gseg_ptr, fixed (scu.ilc, 18)+1);
	function = mme_args.function;


	if function >= 0 then call UFAS_Label_Processing ();
	else call ISP_Abort_Processing ();


	return;

UFAS_Label_Processing: procedure ();


	     increment = 1;
	     call gcos_mme_bort_$system (gcos_et_$unimp_mme, "MME GEFRCE does not support UFAS calls.");


	     return;


	end UFAS_Label_Processing;

/*

   This internal procedure controls the simulation of the ISP abort processing
   subfunction of MME GEFRCE.  Assumtions are as follows:  (1) function < 0;
   (2) mme_arg_ptr is valid.

*/


ISP_Abort_Processing: procedure ();


/*

   Initialize the number of parameters and make sure they're accessable.

*/


	     increment = 2;
	     if fixed (scu.ilc, 18)+2 >= storage_limit then
		call gcos_mme_bort_$system (gcos_et_$bad_mme_param, "MME GEFRCE parameter word is outside slave limits.");


/*

   Make sure the function is -1.  If its not, use the precanned message to say so.

*/


	     if function = -1 then do ;


/*

   Get the necessary items from the parameter list.

*/


		message_num = mme_args.message_num;
		param_list_loc = fixed (mme_args.param_list_loc, 18);
		param_list_len = mme_args.param_list_len;


/*

   Initialize the parameters.

*/


		do i = 1 to hbound (param, 1);
		     param (i) = "";
		end;


/*

   Make sure the parameter list is entirely accessable.

*/


		if param_list_len+param_list_loc > storage_limit then message = BAD_PARAM_LOC;


/*

   If the message number is bad, say so.  Otherwise, get the proper message.

*/


		else if message_num > hbound (MESSAGE, 1) | message_num < lbound (MESSAGE, 1) then do;
		     param_pic = message_num;
		     message = BAD_MESSAGE_NUMBER || param_pic;
		end;
		else call Get_Message ();


	     end;
	     else message = BAD_FUNCTION_CODE;


/*

   ... at last ... abort the user.

*/


	     call gcos_mme_bort_$system (gcos_et_$isp_sys_term, "^a^/", message);


	     return;


	end ISP_Abort_Processing;

/*


   This internal procedure gets the 'message' text.  Editing of parameters is also
   performed.  Assumtions are as follows:  (1) param(*) = "";  (2) message_num is valid;
   (3) param_list_loc+param_list_len-1 is a valid location.

*/


Get_Message: procedure ();


/*

   If parameters exist, process them.

*/


	     if param_list_len ^= 0 then do;


/*

   After obtaining a pointer to the parameter list, process those needed and present.

*/


		param_list_ptr = addrel (gseg_ptr, param_list_loc);
		do i = 1 to min (MESSAGE (message_num).NUM_PARAMS, param_list_len);


		     param_loc = fixed (param_list (i).param_loc, 18);
		     param_len = param_list (i).param_len;


/*

   If the length is negative we use only one word.  Otherwise, calculate how many we will need.

*/


		     if param_len <= 0 then last_loc = param_loc;
		     else do;
			param_len = min (param_len, 48);
			last_loc = param_loc+divide (param_len+5, 6, 18, 0)-1;
		     end;


/*

   If the last word needed is not accessable complain.

*/


		     if last_loc >= storage_limit then do;
			message = BAD_PARAM_LOC;
			return;
		     end;
		     param_ptr = addrel (gseg_ptr, param_loc);


/*

   If param_len < 0, use the rightmost -param_len digits from the integer at location  aram_loc.

*/


		     if param_len < 0 then do;
			param_len = min (-param_len, 6);
			param_pic = param_ptr -> fb35;
			param (i) = substr (param_pic, length (param_pic)+1-param_len, param_len);
		     end;


/*

   Otherwise, use the first param_len characters (GBCD).

*/


		     else if param_len > 0 then do;
			call gcos_cv_gebcd_ascii_ (param_ptr, param_len, addr (temp_param));
			param (i) = substr (temp_param, 1, param_len);
		     end;


		end;


	     end;


/*

   Now format the text for the message.

*/


	     call ioa_$rsnnl (MESSAGE (message_num).TEXT, message, 0, param);


	     return;


	end Get_Message;

%include gcos_ext_stat_;


     end gcos_mme_frce_;
