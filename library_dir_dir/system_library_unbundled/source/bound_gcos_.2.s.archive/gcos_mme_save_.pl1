/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gcos_mme_save_: proc (mcp, increment);

/*
   MME GESAVE is used to  write out a program in system loadable format (loadable
   by a MME GECALL).

   CALLING SEQUENCE:

   MME	GESAVE
   BCI	1,XXXXXX	BCD PROGRAM NAME
   ZERO	L(FIRST WORD),NO OF WORDS	FIRST WORD AND NUMBER OF WORDS TO SAVE
   ZERO	XFER ADDR,LOAD INCREMENT	PLACE TO GO WHEN RELOADED,NUMBER TO
   BE SUBTRACTED FROM LOC OF FIRST WORD
   AND XFER ADDR WHEN RELOADED
   RETURN

   IN ADDITION, THE Q REQ MUST CONTAIN THE FILE CODE OF THE FILE ON WHICH
   THE SAVE IS TO BE DONE. THIS FILE MUST BE RANDOM DRUM OR DISK.
   Q upper can also contain an error return location.

   Author: DICK SNYDER OCTOBER 9,1971
   Change: D. KAYDEN  APRIL 1974
   Change: M. R. Jordan, October 1977
   Change: Dave Ward	06/30/81 Revised instituted, fixed bin(24)unsigned instituted, bugs corrected.
*/
	scup = addr (mc.scu);			/* get addr of scu data */
	i = instruction_counter+1;			/* offset to MME GECALL parameter location. */
	callp = addrel (gcos_ext_stat_$gcos_slave_area_seg, i); /* get pointer to params */
	call gcos_cv_gebcd_ascii_ (addr (mc.regs.q), 6, addr (fc)); /* get file code in ascii */

	do i = 1 to hbound (save_data.fibs, 1);
	     if fct.filecode (i) = substr (fc, 5, 2) then go to hit; /* look for file */
	end;

	message = "No device assigned to file code ""^a"".";
	ecode = gcos_et_$bad_call_save_device;
die:	;
	if substr (mc.regs.q, 1, 18) ^= (18)"0"b then do;
return_code:   ;
	     increment = q_reg_left_half + instruction_counter;
	     fb35 = gcos_mme_bort_$abort_number (ecode);
	     q_reg_right_half = addr (fb35) -> word.r18;
	     return;
	end;
	else
	call gcos_mme_bort_$system (ecode, message, substr (fc, 5, 2));

hit:	if fct.sysout (i) then go to not_rand;
	fibptr = fct.fibptr (i);
	fib.iocount = fib.iocount + 1;
	if ^fib.type then do;			/* not random disk */
not_rand:
	     message = "File code ""^a"" is not assigned to a random mass-storage file.";
	     ecode = gcos_et_$bad_call_save_device;
	     goto die;
	end;

	if (gesave.first+gesave.count) > gcos_ext_stat_$storage_limit then do;
	     ecode = gcos_et_$io_lim_call_save;
	     message = "";
	     goto die;
	end;

	if gesave.count = 0 then do;
	     ecode = gcos_et_$zero_save_word_cnt;
	     message = "";
	     goto die;
	end;

	if substr (save_data.psw, 16, 1) then do;	/* first time save on this file */

	     call ios_$seek (fib.stream, "last", "first", 1000, status); /* seek just after catalog */
	     if code ^= 0 then do;			/* ios error? */
ioerror:		call check_fs_errcode_ (code, "xxxxxxxx", longerror); /* get error message equivalent to code */
		if substr (mc.regs.q, 1, 18) ^= (18)"0"b then goto return_code;
		else
		call gcos_mme_bort_$system (code, "file code=""^a""^/^a", substr (fc, 5, 2), longerror);
	     end;

	     call ios_$seek (fib.stream, "write", "first", 1000, status); /* seek write also */
	     if code ^= 0 then go to ioerror;

	end;

	preface.name = gesave.prog_name;		/* set up preface data */
	preface.rel_check, preface.rel_abs = 0;
	preface.reloc_words = 0;
	preface.entry = gesave.xfer_addr - gesave.load_incr;
	preface.origin = gesave.first - gesave.load_incr;
	preface.data_words = gesave.count;

/* Calculate checksum. */

	checker_ptr = addrel (gcos_ext_stat_$gcos_slave_area_seg, gesave.first); /* point at it */
	accum = 0;
	do i = 1 to gesave.count;
	     accum = accum + checker (i);
	     if accum > 68719476735 then		/* test for 36 bit overflow */
		accum = accum-68719476736+1;		/* preform end around carry and add */
	end;
	preface.data_check = substr (unspec (accum), 37, 36); /* Save checksum. */

	add = gesave.first - gesave.load_incr;
	cnt = gesave.count;
	ndcw = 0;

loop:	;
	ndcw = ndcw+1;
	preface.dcws (ndcw).data_addr = add + 1024;

	if cnt <= 4096 then do;			/* last one */
	     if cnt = 4096 then
		preface.dcws (ndcw).count = 0;
	     else
	     preface.dcws (ndcw).count = cnt;
	     preface.dcws (ndcw).action = "0"b;		/* indicate that this is last dcw */
	     go to done;				/* fini */
	end;

	preface.dcws (ndcw).count = 0;		/* max count of 4096 */
	cnt = cnt-4096;				/* subtract this from count */
	preface.dcws (ndcw).data_addr = add +1024;
	add = add+4096;				/* kick up address */
	preface.dcws (ndcw).action = "001"b;		/* this isn't the last */
	go to loop;				/* so do more */

done:	call ios_$tell (fib.stream, "write", "first", seek_save, status); /* find out where preface will go */
	if code ^= 0 then go to ioerror;

	call ios_$write (fib.stream, addr (preface), 0, 6+ndcw, i, status); /* write out preface */
	j = gesave.count;				/* get count of words to write */
	if code ^= 0 then go to ioerror;		/* io error, die */

	fib.last = seek_save + 6 + ndcw + j;		/* update end of valid data */
	call ios_$write (fib.stream, checker_ptr, 0, j, i, status); /* write out prog */
	if code ^= 0 then go to ioerror;		/* die */


/* Fill in the catalog. */
	call ios_$seek (fib.stream, "read", "first", 0, status); /* set up to read catalog */
	if code ^= 0 then go to ioerror;		/* oops */

	call ios_$read (fib.stream, addr (catblk), 0, 1000, i, status); /* read catalog */
	if code ^= 0 then go to ioerror;

	if substr (save_data.psw, 16, 1) then catblk.no_ent = 0; /* init catalog if first time */
	substr (save_data.psw, 16, 1) = "0"b;		/* turn off flag */
	i, catblk.no_ent = catblk.no_ent+1;		/* bump no of entries */
	catblk.elblock (i).element = gesave.prog_name;	/* put name in catalog */
	catblk.elblock (i).address = seek_save;		/* put in seek address */

/* Write out the catalog. */
	call ios_$seek (fib.stream, "write", "first", 0, status); /* seek to start of file */
	if code ^= 0 then go to ioerror;		/* lose */

	call ios_$write (fib.stream, addr (catblk), 0, 1000, i, status); /* write out catalog */
	if code ^= 0 then go to ioerror;

	call ios_$seek (fib.stream, "write", "last", 0, status); /* reset write pointer */
	if code ^= 0 then go to ioerror;

	increment = 3;				/* skip 3 param words */
	return;
%page;
/*   Variables for gcos_mme_save_:		 */
/*   IDENTIFIER		ATTRIBUTES	 */
dcl  accum                    fixed bin(71)	/* accumulator for checksum */;
dcl  add                      fixed bin(24);
dcl  addr                     builtin;
dcl  addrel                   builtin;
dcl  bit                      builtin;
dcl  callp                    ptr;
dcl  checker                  (gesave.count) fixed bin(36)unsigned unal based (checker_ptr)	/* overlay for computing chksum */;
dcl  checker_ptr              ptr;
dcl  check_fs_errcode_ entry (fixed bin(35), char(8) aligned, char(100) aligned);
dcl  cnt                      fixed bin(24);
dcl  ecode                    fixed bin(35);
dcl  fb35                     fixed bin(35);
dcl  fc                       char (6);
dcl  fixed                    builtin;
dcl  gcos_cv_gebcd_ascii_     ext entry (pointer, fixed bin(24), pointer);
dcl  gcos_et_$bad_call_save_device fixed bin(35) ext;
dcl  gcos_et_$io_lim_call_save fixed bin(35) ext;
dcl  gcos_et_$zero_save_word_cnt fixed bin(35) ext;
dcl  gcos_mme_bort_$abort_number entry (fixed bin(35)) returns (fixed bin);
dcl  gcos_mme_bort_$system    entry options(variable);
dcl  i                        fixed bin(21);
dcl  increment                fixed bin(24);
dcl  instruction_counter      fixed bin(18)unsigned unal based(addr(scu.ilc));
dcl  ioa_                     entry() options(variable);
dcl  j                        fixed bin(21);
dcl  k                        fixed bin(24);
dcl  longerror                char (100)aligned;
dcl  message                  char (62);
dcl  ndcw                     fixed bin(24);
dcl  prog_name                char (6);
dcl  seek_save                fixed bin(21);
dcl  substr                   builtin;
dcl  unspec                   builtin;

dcl 1 word	aligned based
,2 l18		bit(18)unal
,2 r18		bit(18)unal
;

dcl 1 q_register		aligned based(addr(mc.regs.q))
,2 q_reg_left_half		fixed bin(18)unsigned unal
,2 q_reg_right_half		bit(18)unal
;

dcl 1 gesave aligned based (callp),			/* overlay for gesave parameters */
    2 prog_name	bit(36) unal,			/* name under whcih file to be saved */
    2 first	fixed bin(18)unsigned unal,			/* addr of first word to be saved */
    2 count	fixed bin(18)unsigned unal,			/* no. of words to be saved */
    2 xfer_addr	fixed bin(18)unsigned unal,			/* transfer address */
    2 load_incr	fixed bin(18)unsigned unal		/* loading increment */
;

dcl 1 preface aligned,				/* model of preface record */
    2 data_check	bit(36),				/* checksum of following data words */
    2 rel_check	fixed bin(24),				/* checksum of following reloc. words */
    2 rel_abs	fixed bin(24),				/* 0=absolute|^0=relocatable */
    2 name	bit(36) unal,			/* name of pgm */
    2 entry	fixed bin(18)unsigned unal,			/* entry address */
    2 origin	fixed bin(18)unsigned unal,			/* origin */
    2 reloc_words	fixed bin(18)unsigned unal,			/* no. of relocation words */
    2 data_words	fixed bin(18)unsigned unal,			/* no. of data words */
    2 dcws (64) like dcw_model		/* dcw(s) to load following data records */
;

dcl 1 dcw_model aligned based,			/* model of dcw */
    2 data_addr	fixed bin(18)unsigned unal,
    2 zero	bit(3) unal,
    2 action	bit(3) unal,
    2 count	fixed bin(12)unsigned unal;						/* number of words to xfer */

dcl 1 catblk aligned,
    2 nxt	fixed bin(24),				/* pointer to next calalog block */
    2 no_ent	fixed bin(24),				/* number of entries in catalog */
    2 elblock (499),				/* room for 499 entries */
      3 element	bit(36) unal,			/* prog name */
      3 address	fixed bin(24)			/* offset in file of preface data */
;
%page;
%include gcos_dcl_ios_;
%page;
%include gcos_ext_stat_;
     end gcos_mme_save_;
