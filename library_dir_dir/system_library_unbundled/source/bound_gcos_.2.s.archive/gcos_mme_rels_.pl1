/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gcos_mme_rels_: proc (mcp, increment);

/*
   *  MME GERELS is used to deallocate peripherals from a program. In addition, it may be
   *  used to alter the disposition code. The calling sequence is as follows:
   *
   *		MME	GERELS
   *		ZERO	No of files in upper half. Alter flag in lower half.
   *			If flag = 0,following words hold filecodes of
   *			files to be deallocated:
   *
   *		BCI	1,0000F1
   *		BCI	1,0000F2
   *		etc
   *
   *
   *			If flag = 1,following words hold filecodes
   *			preceeded by new disposition code:
   *
   *		BCI	1,000SF1
   *		BCI	1,000RF2
   *
   *
   *	WRITTEN BY DICK SNYDER JANUARY 18,1971
   *	WRITTEN BY D. KAYDEN  APRIL 1974
   *	MODIFIED BY R.H. MORRISON MAY 1975
   *	Modified by Mel Wilson, November 1979 to clear released fct & fib entries,
   preventing erroneous re-allocation
*/
	scup = addr (mc.scu);			/* get addr of scu data */
	i = instruction_counter+1;			/* get offset of first parma */
	wordp = addrel (gcos_ext_stat_$gcos_slave_area_seg, i); /* point to param 1 */
	cnt = fixed (word.upper);			/* get file count */
	if word.lower = "0"b then alter = "0"b;		/* set disp alter flag */
	else alter = "1"b;

	if i+cnt >= gcos_ext_stat_$storage_limit then
	     call gcos_mme_bort_$system (gcos_et_$bad_rels_rqst,
	     "File code list is not completely within slave limits.");


	do j = 1 to cnt;				/* loop to process files */

	     wordp = addrel (wordp, 1);		/* bump pointer to next param word */
	     substr (fc, 1, 1) = xlate (fixed (word1.ch5, 6)); /* get 1st filecode character in ascii */
	     substr (fc, 2, 1) = xlate (fixed (word1.ch6, 6)); /* get 2nd filecode character in ascii */

/*  Look up file code in file code table for match 		 */
	     do fct_index = 1 to hbound (save_data.fibs, 1);
		if fc = fct.filecode (fct_index) then go to hit; /* match ? */
	     end;
	     go to bump;				/* no hit...ignore this one */

hit:	     ;
	     if fct.sysout (fct_index) then go to bump;	/* sysout file - same as no hit */
	     fibptr = fct.fibptr (fct_index);

	     if ^alter then do;			/* Release files request */
		space_to_release = fixed (word.upper);	/* check for partial release */
		if space_to_release = 0 | fib.print | fib.punch | fib.read
		| fib.tape | fib.console then do;	/* total release */
		     released_fibs.nrf = released_fibs.nrf+1;
		     if released_fibs.nrf > hbound (released_fib, 1) then
			call gcos_mme_bort_$system (	/* Exceeded number released fibs. */
			gcos_et_$rel_fibs_exceeded
			, "Over ^i fibs released."
			, hbound (released_fib, 1)
			);
		     saved_fib_ptr = addr (released_fib (released_fibs.nrf));
		     unspec (saved_fib_ptr -> fib) = unspec (fib); /* copy fib data */
		     substr (saved_fib_ptr -> fib.pathnm, 1, 2) = fc; /* stick in the file code */

		     call gcos_close_file_ (fibptr);

		     fib.stream, fib.pathnm = "";	/* clear names from fib */
		     fct (fct_index).filecode = "";	/* clear feleased fct entry */
		     fct (fct_index).fibptr = null ();

		     if ^gcos_ext_stat_$save_data.nosave then do; /* save/restart  */
			temp_file = ^(fib.perm | fib.print | fib.punch | fib.reader | fib.tape | fib.console);
			if temp_file & ^substr (fib.disp, 1, 1) then
			     restart_control.cant_do = "1"b; /* can't do because temp_file not saved */
		     end;
		end;
		else do;				/* partial release */
		     fib.size = fib.size - 3840 * space_to_release;
		     if fib.size <= 0 then
			fib.size = 3840;		/* be sure something is left */

		     if fib.last > fib.size then do;
			fib.last = fib.size;
			call ios_$seek ((fib.stream), "last", "first", fib.last, status);
			if code ^= 0 then
			     call gcos_mme_bort_$system (code,
			     "attempting to truncate mass storage file ""^a""", fc);
		     end;
		end;
	     end;

	     else do;

/* 	Come here if disposition is to be altered. If the disposition is being	 */
/* 	set to save or continue, check for an existing nonzero plud in the fib.	 */
/* 	If the plud is zero, set it = to the filecode. By this means, a file 	 */
/* 	may be created by MME GEMORE, set to S dispositon by MME GERELS and		 */
/* 	referred to in a subsequent activity by using the original file code as	 */
/* 	as the LUD in a file assignment card.					 */


		dis = word1.ch4;			/* get new displacement */
		check = "0"b;			/* turn off check switch */

		if dis = "51"b3 then
		     fib.disp = "01"b;		/* R */
		else
		if dis = "24"b3 then
		     fib.disp = "00"b;		/* D */
		else
		if dis = "62"b3 then do;		/* S */
		     fib.disp = "10"b;
		     check = "1"b;			/* remember to check plud */
		end;
		else
		if dis = "23"b3 then do;		/* C */
		     fib.disp = "11"b;
		     check = "1"b;			/* remember to check plud */
		end;
		else
		if dis = "47"b3 then
		     fib.purge = "1"b;		/* P */
		else
		if dis = "43"b3 then
		     fib.purge = "0"b;		/* L */
		else
		if dis = "44"b3 then do;		/* M */
		     if word1.ch3 = "51"b3 then
			fib.type = "1"b;		/* R = random */
		     else fib.type = "0"b;		/* otherwise linked */
		end;

		else call gcos_mme_bort_$system (gcos_et_$bad_rels_rqst,
		     "Bad disposition specified in request for file code ""^a"".", fc);


		if check then do;			/* check plud if C or S disp */
		     if fib.plud ^= "0"b then go to bump; /* fib.plud already assigned */
		     if verify (substr (fc, 2, 1), "*0123456789") ^= 0 then
			call gcos_mme_bort_$system (gcos_et_$bad_rels_rqst,
			"Cannot make LUD from file code without * or digit as second character.  ""^a""",
			fc);
		     fib.plud = substr (word.lower, 7, 12); /* put filecode in as plud */
		end;

	     end;
bump:	     ;
	end;

	increment = 1+cnt;				/* compute no of param words to skip */
	return;
%page;
/*   Variables for gcos_mme_rels_:		 */
/*   IDENTIFIER		ATTRIBUTES	 */
dcl  addr                     builtin;
dcl  addrel                   builtin;
dcl  alter                    bit (1)	/* switch to control disp change */;
dcl  check                    bit (1)	/* switch */;
dcl  cnt                      fixed bin(24);
dcl  dis                      bit (6)	/* holder for dispositon char */;
dcl  fc                       char (2)	/* holder for ascii filecode */;
dcl  fct_index                fixed bin(24);
dcl  fixed                    builtin;
dcl  gcos_close_file_         ext entry (ptr);
dcl  gcos_et_$bad_rels_rqst   fixed bin(35) ext;
dcl  gcos_et_$rel_fibs_exceeded fixed bin(35) ext static;
dcl  gcos_mme_bort_$system    entry options (variable);
dcl  i                        fixed bin(24);
dcl  increment                fixed bin(24)/* no.param words to skip over */;
dcl  instruction_counter      fixed bin(18)unsigned unal based(addr(scu.ilc));
dcl  j                        fixed bin(24);
dcl  null                     builtin;
dcl  saved_fib_ptr            ptr;
dcl  size                     builtin;
dcl  space_to_release         fixed bin(18);
dcl  substr                   builtin;
dcl  temp_file                bit (1) aligned	/* flag for temporary file */;
dcl  verify                   builtin;
dcl  wordp                    pointer;

dcl 1 word aligned based (wordp),			/* model of a word */
    2 upper bit (18) unaligned,
    2 lower bit (18) unaligned;

dcl 1 word1 aligned based (wordp),
    2 ch1 bit (6) unaligned,
    2 ch2 bit (6) unaligned,
    2 ch3 bit (6) unaligned,
    2 ch4 bit (6) unaligned,
    2 ch5 bit (6) unaligned,
    2 ch6 bit (6) unaligned;
%page;
%include gcos_ext_stat_;
%page;
%include gcos_restart_control_;
%page;
%include gcos_xlate_bcd_ascii_;
%page;
%include gcos_dcl_ios_;
%page;
%include gcos_fibs;
     end gcos_mme_rels_;
