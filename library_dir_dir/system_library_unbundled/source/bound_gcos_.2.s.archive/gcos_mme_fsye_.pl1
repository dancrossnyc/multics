/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* ****************************************************************************************
   ******************************************************************************************
   *
   *
   *
   *		M  M  E       G  E  F  S  Y  E
   *
   *
   *	This procedure processes the file system mme, mme gefsye.
   *	Currently, creating, deleting, and purging a file, and
   *	creating a catalog are the only calls accepted.
   *
   *
   *	WRITTEN:	D. Kayden		MAR 75
   *	CHANGED:	S.C. Akers	NOV 81	Use gcos_build_pathname_
   *					to expand pathnames instead
   *					of doing it internally.
   *      Changed:  R. Barstad          Nov 1982  delete IDS2 concurrency
   *                                              lock control seg if exists
   *
   *
   ******************************************************************************************
   **************************************************************************************** */
%page;
gcos_mme_fsye_: proc (mcp, increment);
%page;
/*	P R O C E D U R E			*/

	increment = 2;
	scup = addr (mcp -> mc.scu);
	gseg = gcos_ext_stat_$gcos_slave_area_seg;
	ap1 = addrel (gseg, fixed (scu.ilc)+1);
	ap2 = addrel (gseg, fixed (arglst1.al2));
	rap = addrel (gseg, fixed (arglst2.ra));
	return.code = "1"b;

	fnc = fixed (arglst1.fn);

	if fnc > 22 then go to err2;
	if fnc_map (fnc) = 0 then go to err2;		/* illegal or unimplemented function */


/*	Get the pathname of catalog/file description */

	nameptr = addr (name);
	CSEQ_ptr = addrel (gseg, fixed (scu.ilc,18));
	call gcos_build_pathname_ (nameptr, addrel (gseg, BUFFER),
			       dirname, entryname, status);
	dirlen = length (rtrim (dirname));
	if dirlen = 0 then go to err1;		/* operations in UMC not allowed */
	pname = rtrim (dirname)
	      ||">"
	      ||entryname;

	go to fnc_proc (fnc_map (fnc));		/* process specific function */

fnc_proc (1):					/* create catalog request */
	dirsw = 1;
	mode = 01011b;				/* access = sma */
	bitcount = 0;
	go to create_entry;


fnc_proc (2):					/* create file request */
	op = addrel (gseg, fixed (arglst2.opt));	/* get pointer to options area */
	if opt.nonstruct | opt.userinfo then go to err4;	/* illegal file characteristics */
	if opt.spec_perms ^= (36) "1"b then go to err4;	/* specific permissions not handled */

	bitcount = fixed (opt.initial_size) * 36 * 320;

	if ^opt.llsize then bitcount = bitcount * 12;

	dirsw = 0;
	mode = 01010b;				/* access = rw */

create_entry: call modefn;				/* get mode and access name */

	call hcs_$append_branchx (dirname, entryname, mode, ring_br, access_name, dirsw, 0, bitcount, code);
	if code ^= 0 then go to err3;

	if fnc = 2 then go to exit;			/* done if create catalog */

	if opt.ids & opt.attrib_present then do;

	     entryname = substr (pname, dirlen+2) || ".ids_attributes";

	     call hcs_$make_seg (dirname, entryname, "", 01010b, attribptr, code);
	     if attribptr = null then go to err3;

	     attributes = opt.attrib;

	end;

	go to exit;



fnc_proc (3):					/* delete or purge file request */
	call delete_$path (dirname, entryname, "000100"b, "gcos_mme_fsye_", code);
	if code ^= 0 then go to err5;

	call gcos_ids2_concur_$delete_control(dirname,entryname,code); /* just try to delete, if can't --code bad-- don't care */

	entryname = substr (pname, dirlen+2) || ".ids_attributes";

	call delete_$path (dirname, entryname, "000100"b, "gcos_mme_fsye_", code);

exit:	return;


modefn:	proc;

	     access_name = get_group_id_$tag_star ();

	     ring_br = fixed (cu_$level_get (), 6);

	     return;
	end modefn;



/*	Error returns */

err1:	return.code = "100000111101"b;
	msg = "operations on the UMC not allowed";
	go to err_common;

err2:	return.code = "100000111101"b;		/* 4075 = illegal gefsye function */
	msg = "illegal or unimplemented function";
	go to err_common;

err3:	return.code = "100000111111"b;		/* 4077 = cannot create entry */
	go to get_msg;

err4:	return.code = "100000111110"b;		/* 4076 = illegal file characteristics */
	msg = "unimplemented file options";
	go to err_common;

err5:	return.code = "100001000100"b;		/* 4104 = unable to delete entry */

get_msg:	call convert_status_code_ (code, "xxxxxxxx", msg1);
	msg = msg1;				/* move char (100) to char (102) */

err_common: return.messaddr = arglst1.buf;

	call gcos_cv_ascii_gebcd_ (addr (msg), length (msg), addrel (gseg, fixed (arglst1.buf)), i);
	return.messlen = divide (length (msg), 6, 17, 0);
	return;
%page;

/*	External Entries	*/


dcl  convert_status_code_ ext entry (fixed bin(35), char (8), char (100));
dcl  cu_$level_get ext entry returns (fixed bin(24));
dcl  cv_oct_ entry (char (*), fixed bin(35));
dcl  date_time_$fstime ext entry (fixed bin(35), char (13));
dcl  delete_$path ext entry (char (*), char (*), bit (6), char (*), fixed bin(35));
dcl  expand_path_ entry (ptr, fixed bin(24), ptr, ptr, fixed bin(35));
dcl  gcos_build_pathname_ ext entry (ptr, ptr, char(*), char (*), bit (72) aligned);
dcl  gcos_cv_ascii_gebcd_ ext entry (ptr, fixed bin(24), ptr, fixed bin(24));
dcl  gcos_cv_gebcd_ascii_ ext entry (ptr, fixed bin(24), ptr);
dcl  gcos_ids2_concur_$delete_control ext entry (char(*),char(*),fixed bin(35));
dcl  get_group_id_$tag_star ext entry returns (char (32) aligned);
dcl  get_default_wdir_ ext entry returns (char (168));
dcl  hcs_$append_branchx ext entry (char (*), char (*), fixed bin(5), (3) fixed bin(6),
     char (*), fixed bin(1), fixed bin(1), fixed bin(24), fixed bin(35));
dcl  hcs_$chname_file ext entry (char (*), char (*), char (*), char (*), fixed bin(35));
dcl  hcs_$initiate_count ext entry (char (*), char (*), char (*), fixed bin(24), fixed bin(2), ptr, fixed bin(35));
dcl  hcs_$make_seg ext entry (char (*), char (*), char (*), fixed bin(5), ptr, fixed bin(35));


/* 	Work Variables */


dcl  access_name char (32);
dcl  bitcount fixed bin(24);
dcl  bitmode bit (5) aligned;
dcl  code fixed bin(35);
dcl  CSEQ_ptr ptr;
dcl  date char (13);
dcl  dirname char (168);
dcl  dirsw fixed bin(1);
dcl  ecount fixed;
dcl  entryname char (32);
dcl  increment fixed bin;				/* number of argument words to skip over */
dcl  msg char (102);
dcl  msg1 char (100);
dcl  mode fixed bin(5);
dcl  name char (32);
dcl  pname char (168) varying;
dcl  ring_br (3) fixed bin(6);
dcl  status bit (72) aligned;
dcl (dirlen, fnc, i, j, k) fixed bin(24);

dcl  word bit (36) aligned based;

dcl (ap1, ap2, attribptr, cdp, gseg, nameptr, nnp, op, pp, rap, radp, sp) ptr;



/*	Structures and overlays */

dcl 1 arglst1 aligned based (ap1),			/* structure for the arg list following the mme */
    2 ccal bit (18) unal,				/* 0 or courtesy call address */
    2 al2 bit (18) unal,				/* location of arg list 2 */
    2 fn bit (18) unal,				/* function code */
    2 buf bit (18) unal;						/* working buffer address */

dcl 1 arglst2 aligned based (ap2),			/* structure for the main argument list */
    2 ra bit (18) unal,				/* address of the return area */
    2 pad1 bit (18) unal,
    2 catdesc bit (18) unal,				/* address of the cataog description */
    2 perms bit (18) unal,				/* address of the permissions word */
    2 opt bit (18) unal,				/* address of the options area */
    2 newname bit (18) unal;						/* address of the newname for modify functions */

dcl 1 opt aligned based (op),				/* the options area */
    2 contig bit (1) unal,				/* file must be contiguous */
    2 rand bit (1) unal,				/* define file as random */
    2 tss bit (1) unal,				/* file is tss-created */
    2 ids bit (1) unal,				/* file is IDS */
    2 llsize bit (1) unal,				/* file sizes specified in llinks */
    2 nonstruct bit (1) unal,				/* file on tape or nonstructured disk pack */
    2 pad bit (1) unal,
    2 attrib_present bit (1) unal,			/* attributes present */
    2 userinfo bit (1) unal,				/* user specified information present */
    2 pad1 bit (4) unal,
    2 protect bit (1) unal,				/* protection options specified */
    2 pad2 bit (22) unal,

    2 initial_size bit (18) unal,			/* initial file size */
    2 max_size bit (18) unal,				/* maximum file size (zero if unlimited) */
    2 spec_perms bit (36) unal,			/* specific permissions */
    2 attrib bit (180) unal;						/* attributes for IDS files */

dcl  attributes bit (180) aligned based (attribptr);

	/* MME GEFSYE Calling Sequence */

dcl 1 CALL_SEQ			aligned   based (CSEQ_ptr),
    2 CC		bit (18)		unaligned,
    2 ARGLIST	bit (18)		unaligned,
    2 FUNCTION	bit (18)		unaligned,
    2 BUFFER	fixed bin (18)	unaligned unsigned;

dcl 1 return aligned based (rap),			/* return area for error indicators */
    2 code bit (12) unal,				/* error code or zero */
    2 pad bit (24) unal,
    2 messaddr bit (18) unal,				/* address of error message */
    2 messlen fixed bin(17) unal;						/* length of error message (in words) */

dcl  fnc_map (22) fixed bin(24)aligned int static init (	/* map gefsye function codes to processors */
     0,						/* 1 = unimplemented */
     1,						/* 2 = ccreat */
     2,						/* 3 = fcreat */
    (5) 0,					/* 4 to 8 = unimplemented */
     3,						/* 9 = freles */
    (12) 0,					/* 10 to 21 = unimplemented */
     3);						/* 22 = fpurge */

dcl (addr, addrel, bit, divide, fixed, index, length, null, substr, unspec) builtin;
%page;
%include gcos_ext_stat_;
end gcos_mme_fsye_;
