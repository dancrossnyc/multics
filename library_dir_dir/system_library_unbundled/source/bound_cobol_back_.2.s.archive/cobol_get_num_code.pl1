/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_get_num_code.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/*{*/
/* format: style3 */
cobol_get_num_code:
     proc (token_ptr, token_typecode);

/*
This procedure maps a data name tokne for a numeric data
item into a code, according to the following table:

numeric data type	| type code (returned)
---------------------------------------------
unpacked decimal	|  1
packed decimal	|  2
short binary	|  3
long binary	|  4
overpunch decimal	|  5
---------------------------------------------

*/

/*  DECLARATION OF THE PARAMETERS  */

dcl	token_ptr		ptr;
dcl	token_typecode	fixed bin;

/*  DESCRIPTION OF THE PARAMETERS  */

/*
PARAMETER		DESCRIPTION
token_ptr		Pointer to the numeric data name token
		which is to be mapped into a type code.(input)
token_typecode	Variable in which the typecode is
		returned.  (output)  The output value
		is described above.
*/
/*}*/


/*  DECLARATIONS OF INTERNAL VARIABLES  */

dcl	dn_ptr		ptr;			/*  referenced in type9 include file, but not declared there!!!  */

start:
	if token_ptr -> data_name.sign_separate
	     | (token_ptr -> data_name.numeric & token_ptr -> data_name.display
	     & token_ptr -> data_name.sign_type = "000"b /* not specified */
	     & token_ptr -> data_name.item_signed = "0"b) /*  Probably an unsigned, pooled constant  */
	then token_typecode = 1;			/*  unpacked decimal  */

	else if token_ptr -> data_name.ascii_packed_dec
	then token_typecode = 2;

	else if token_ptr -> data_name.bin_18
	then token_typecode = 3;

	else if token_ptr -> data_name.bin_36
	then token_typecode = 4;

	else token_typecode = 5;			/*  MUST BE OVERPUNCH!!  */


/*  INCLUDE FILES USED BY THIS PROCEDURE  */


/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

%include cobol_type9;


     end cobol_get_num_code;
