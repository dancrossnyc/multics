/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_multiply2_binary.pl1 Added Trace statements.
                                                   END HISTORY COMMENTS */


/* Modified on 11/16/84 by FCH, [5.3...], trace added */
/* Modified on 10/19/84 by FCH, [4.3-1], BUG563(phx18381), new cobol_addr_tokens.incl.pl1 */
/* Modified on 01/17/77 by ORN to call cobol_make_reg_token instead of cobol_make_register_token */
/* Modified since Version 2.0 */





/*{*/
/* format: style3 */
cobol_multiply2_binary:
     proc (lop_token_ptr, rop_token_ptr, result_token_ptr, operation_code);
						/*
This procedure generates code to multiply or divide two fixed
binary data items in the hardware registers (A and Q).
*/

/*  DECLARATIONS OF THE PARAMETERS  */

dcl	lop_token_ptr	ptr;
dcl	rop_token_ptr	ptr;
dcl	result_token_ptr	ptr;
dcl	operation_code	fixed bin;

/*  DESCRIPTION OF THE PARAMETERS  */

/*
PARAMETER		DESCRIPTION

lop_token_ptr	Pointer to a token that describes the
		multiplicand (for multiplication) or the
		dividend (for division).  This token may
		be a data name token (type 9) , a numeric
		literal token (type 2) or a toekn for the
		reserved word  ZERO.  (input)
rop_token_ptr	Pointer to a token that describes the
		multiplier (for multiplication) or the
		divisor (for division).  This token may be
		a data name token (type 9), a numeric
		literal token (type 2), or a reserved
		word token (type 1) for the figurative
		constant ZERO.  (input)
result_token_ptr	Pointer to a register token (type  100) that
		describes the register containing the
		result of the computation.  (output)
operation_code	A code that identifies the operation for
		which code is to be generated.  This code is
		defined in the following table:
		code value	|  operation
		=========================================
		   1		|   multiplication
		   2		|   division
		========================================

*/

/*  DECLARATION OF EXTERNAL ENTRIES  */

dcl	cobol_register$load ext entry (ptr);
dcl	cobol_make_bin_const
			ext entry (ptr, ptr, fixed bin);
dcl	cobol_make_reg_token
			ext entry (ptr, bit (4));
dcl	cobol_load_register ext entry (ptr, ptr);
dcl	cobol_short_to_longbin$temp
			ext entry (ptr, ptr);
dcl	cobol_addr	ext entry (ptr, ptr, ptr);
dcl	cobol_emit	ext entry (ptr, ptr, fixed bin);

/*  Declaration of Internal Static Variables.  */

dcl	MPY		bit (10) int static init ("1000000100"b);
						/*  402(0)  */
dcl	DIV		bit (10) int static init ("1010001100"b);
						/*  506(0)  */

dcl	direct_lower_inst	bit (36) int static init ("000000000000000000000000000000000111"b);
						/*  zero,dl  */



dcl	1 dec_zero_token	int static,
	  2 size		fixed bin (15),
	  2 line		fixed bin (15),
	  2 column	fixed bin (15),
	  2 type		fixed bin (15) init (2),
	  2 integral	bit (1) init ("1"b),
	  2 floating	bit (1) bit (1) init ("0"b),
	  2 filler1	bit (5),
	  2 subscript	bit (1) init ("0"b),
	  2 sign		char (1) init (" "),
	  2 exp_sign	char (1) init (" "),
	  2 exp_places	fixed bin (15),
	  2 places_left	fixed bin (15) init (1),
	  2 places_right	fixed bin (15) init (0),
	  2 places	fixed bin (15) init (1),
	  2 literal	char (1) init ("0");

/*  DECLARATION OF INTERNAL VARIABLES  */


/*  DECLARATION OF INTERNAL VARIABLES  */

dcl	1 input_buff	aligned,
	  2 buff		(1:10) ptr;

dcl	1 inst_buff	aligned,
	  2 buff		(1:2) fixed bin;

dcl	1 reloc_buff	aligned,
	  2 buff		(1:10) bit (5) aligned;

dcl	dn_ptr		ptr;


dcl	1 register_struc,
	  2 what_reg	fixed bin,
	  2 reg_no	bit (4),
	  2 lock		fixed bin,
	  2 already_there	fixed bin,
	  2 contains	fixed bin,
	  2 tok_ptr	ptr,
	  2 literal	bit (36);


dcl	temp_ptr		ptr;
dcl	reg_temp		bit (4);


/**************************************************/
start:	/***.....	if Trace_Bit then call cobol_gen_driver_$Tr_Beg(cmb);/**/
	if lop_token_ptr -> data_name.type = rtc_resword
	then lop_token_ptr = addr (dec_zero_token);
	if rop_token_ptr -> data_name.type = rtc_resword	/*  Right operand token is fig const ZERO  */
	then rop_token_ptr = addr (dec_zero_token);

	if lop_token_ptr -> data_name.type = rtc_numlit
	then do;					/*  Left operand is a numeric literal  */
						/*  Make a binary constant for the numeric literal.  */
		temp_ptr = null ();
		call cobol_make_bin_const (lop_token_ptr, temp_ptr, 2);
		lop_token_ptr = temp_ptr;
	     end;					/*  Left operand is a numeric literal.  */

	if rop_token_ptr -> data_name.type = rtc_numlit
	then do;					/*  Right operand is a numeric literal.  */
						/*  Make a binary constant from the numeric literal token.  */
		temp_ptr = null ();
		call cobol_make_bin_const (rop_token_ptr, temp_ptr, 2);
		rop_token_ptr = temp_ptr;
	     end;					/*  Right operand is a numeric literal.  */

	if (rop_token_ptr -> data_name.type = rtc_dataname & rop_token_ptr -> data_name.bin_18)
	then do;					/*  Right operand is a short binary.  */
						/*  Convert from short to long binary into a temporary.  */
		temp_ptr = null ();
		call cobol_short_to_longbin$temp (rop_token_ptr, temp_ptr);
		rop_token_ptr = temp_ptr;
	     end;					/*  Right operand is a short binary.  */

/*  Make a register token that references the Q register.  */
	temp_ptr = null ();
	call cobol_make_reg_token (temp_ptr, "0010"b);	/*  Generate code to load the left operand into the Q register.  */
	call cobol_load_register (lop_token_ptr, temp_ptr);


	if rop_token_ptr -> data_name.type = rtc_dataname
	then do;					/*  Right operand is a data name.  */
						/*  Establish addressability to the data name.  */
		input_ptr = addr (input_buff);
		inst_ptr = addr (inst_buff);
		reloc_ptr = addr (reloc_buff);
		input_struc.type = 2;
		input_struc.operand_no = 1;
		input_struc.lock = 0;
		input_struc.operand.size_sw (1) = 0;
		input_struc.operand.token_ptr (1) = rop_token_ptr;
		call cobol_addr (input_ptr, inst_ptr, reloc_ptr);
	     end;					/*  Right operand is a data name.  */

	else do;					/*  Right operand is an immediate constant.  */
						/*  Insert the immediate value into the instruction.  */
		substr (direct_lower_inst, 1, 18) =
		     substr (unspec (rop_token_ptr -> immed_const.const_value), 19, 18);
		inst_ptr = addr (direct_lower_inst);
		reloc_ptr = null ();
	     end;					/*  Right operand is an immediate constant.  */

	if operation_code = 1
	then inst_struc_basic.fill1_op = MPY;
	else inst_struc_basic.fill1_op = DIV;

/*  Lock the A register, because multiplication or division uses the A for
	the computation.  */
	register_struc.what_reg = 1;			/*  A  */
	register_struc.lock = 1;
	register_struc.contains = 0;
	call cobol_register$load (addr (register_struc));

/*  Emit the MPY or DIV instruction.  */
	call cobol_emit (inst_ptr, reloc_ptr, 1);

/*  Make a register token that describes the result of the multiply or divide.  */
	if operation_code = 1			/*  MPY  */
	then reg_temp = "0011"b;			/*  Product of multiply is in A and Q  */
	else reg_temp = "0010"b;			/*  Quotient of divide is in Q. (remainder is in A )  */
	call cobol_make_reg_token (result_token_ptr, reg_temp);

	/***.....	if Trace_Bit then call cobol_gen_driver_$Tr_End(cmb);/**/

	return;

	/***.....	dcl cmb char(22) init("COBOL_MULTIPLY2_BINARY");/**/

	/***.....	dcl cobol_gen_driver_$Tr_Beg entry(char(*));/**/
	/***.....	dcl cobol_gen_driver_$Tr_End entry(char(*));/**/

	/***.....	dcl Trace_Bit bit(1) static external;/**/
	/***.....	dcl Trace_Lev fixed bin static external;/**/
	/***.....	dcl Trace_Line char(36) static external;/**/
	/***.....	dcl ioa_ entry options(variable); /**/


/*  INCLUDE FILES USED BY THIS PROCEDURE  */

/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

%include cobol_type9;
%include cobol_record_types;
%include cobol_addr_tokens;
%include cobol_type102;

     end cobol_multiply2_binary;
