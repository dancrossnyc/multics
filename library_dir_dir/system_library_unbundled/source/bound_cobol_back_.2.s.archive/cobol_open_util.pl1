/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_open_util.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 01/29/77 by Bob Chang to implement profile option.	*/
/* Modified on 11/11/76 by Bob Chang to change mft into file_table.	*/
/* Modified since Version 2.0.	*/
/* format: style3 */
cobol_open_util:
     proc;

dcl	1 ioerror		based (ioerror_ptr),
	  2 lineno	fixed bin,
	  2 restartad	fixed bin,
	  2 forward_tag	fixed bin,
	  2 no_error_tag	fixed bin,
	  2 no_error_ptr	ptr,
	  2 unopen	fixed bin,
	  2 special_tag	fixed bin,
	  2 special_ptr	ptr,
	  2 error_ptr	ptr;

dcl	check_noncobol_instr
			(7) bit (36) static init ("010000000000010000010011111001000000"b,
						/* ldaq	pr2|20	(iocb.open_descrip_ptr)*/
			"000000000000000000110111111000000100"b,
						/* eraq	[nullptr],ic		*/
			"000000000000000000011111111000000100"b,
						/* anaq	[ptrmask],ic		*/
			"000000000000000100110000000000000100"b,
						/* tze	4,ic	(goto open)	*/
			"111111111111111111010011101000000011"b,
						/* lda	-1,du	(noncobol open status) */
			"001000000000000010111101101001000000"b,
						/* sta	pr1|2	(fsb.open_mode)	*/
			"000000000000000000111001000000000100"b);
						/* tra	<NEXT STATEMENT via fixup>	*/

dcl	ext_open_instr	(4) bit (36) static init ("001000000000000010010011101001000000"b,
						/* lda	pr1|2	(fsb.open_mode)	*/
			"000000000000000000110000100100000100"b,
						/* tmoz	[bypass_error],ic		*/
			"000000000000000000001001101000000111"b,
						/* cmpa	[cobol_mode],dl		*/
			"000000000000000000110000000000000000"b);
						/* tze	<NEXT STATEMENT via fixup>	*/

dcl	int_open_instr	(2) bit (36) static init ("001000000000000010010011100001000000"b,
						/* szn	pr1|2	(fsb.open_mode)	*/
			"000000000000000000110000000000000100"b);
						/* tze	[bypass_error],ic		*/

dcl	ext_close_instr	(2) bit (36) static init ("001000000000000010010011100001000000"b,
						/* szn	pr1|2	(fsb.open_mode)	*/
			"000000000000000000110000100100000100"b);
						/* tmoz	<NEXT STATEMENT via fixup>	*/

dcl	int_close_instr	(2) bit (36) static init ("001000000000000010010011100001000000"b,
						/* szn	pr1|2	(fsb.open_mode)	*/
			"000000000000000000110000001000000100"b);
						/* tnz	[bypass_error],ic		*/

dcl	check_attach_instr	(5) bit (36) static init ("001000000000000000011101010001010000"b,
						/* epp2	pr1|0,*	(fsb.iocb_ptr)	*/
			"010000000000001100010011111001000000"b,
						/* ldaq	pr2|14	(iocb.attach_descrip_ptr)*/
			"000000000000000000110111111000000100"b,
						/* eraq	[nullptr],ic		*/
			"000000000000000000011111111000000100"b,
						/* anaq	[ptrmask],ic		*/
			"000000000000000000110000001000000100"b);
						/* tnz	<open file>,ic		*/

dcl	check_reattach_instr
			(9) bit (36) static init ("001000000000000000011101010001010000"b,
						/* epp2	pr1|0,*	(fsb.iocb_ptr)	*/
			"010000000000001100010011111001000000"b,
						/* ldaq	pr2|14	(iocb.attach_descrip_ptr)*/
			"000000000000000000110111111000000100"b,
						/* eraq	[nullptr],ic		*/
			"000000000000000000011111111000000100"b,
						/* anaq	[ptrmask],ic		*/
			"000000000000000000110000000000000100"b,
						/* tze	<attach file>,ic		*/
			"010000000000010000010011111001000000"b,
						/* ldaq	pr2|20	(iocb.open_descrip_ptr)*/
			"000000000000000000110111111000000100"b,
						/* eraq	[nullptr],ic		*/
			"000000000000000000011111111000000100"b,
						/* anaq	[ptrmask],ic		*/
			"000000000000000000110000000000000100"b);
						/* tze	<detach file>,ic		*/

dcl	pdir_path_instr	(15) bit (36) static init ("000000000000111110010011101000000111"b,
						/* lda	076,dl	(">")		*/
			"110000000000000000111101101001000000"b,
						/* sta	pr6|[uchars_off-1]		*/
			"000000000000000011001010100101000000"b,
						/* scm	(with zero mask)		*/
			"110000000000000000000000000010101000"b,
						/* desc1	pr6|[pname_off](0)->168	*/
			"000100000000100000000000000000000000"b,
						/* desc2	"/b/b"			*/
			"110000000000000000000000000001000000"b,
						/* desc3	pr6|[len_off]		*/
			"000000000000000011110000111000000100"b,
						/* ttf	3,ic			*/
			"000000000010100000010011101000000111"b,
						/* lda	240,dl	(168, pname length)	*/
			"110000000000000000111101101001000000"b,
						/* sta	pr6|[len_off]		*/
			"110000000000000000111010101001000000"b,
						/* lxl5	pr6|[len_off]		*/
			"000000000011001010010011101000000111"b,
						/* lda	312,dl	(202, atd max len)	*/
			"110000000000000000001111101001000000"b,
						/* sba	pr6|[len_off]		*/
			"000100000001101101001000000101000000"b,
						/* mlr	(with blank fill)		*/
			"110000000000000000110000000000000000"b,
						/* desc1	pr6|[uchars_off-1](3)->[namelen+1]	*/
			"110000000000000000000000000000000101"b);
						/* desc2	pr6|[pname_off](X5)->AL	*/

dcl	fsb_open_mode_instr (2) bit (36) static init ("000000000000000000010011101000000111"b,
						/* lda	[cobol_mode],dl		*/
			"001000000000000010111101101001000000"b);
						/* sta	pr1|2	(fsb.open_mode)	*/
dcl	fsb_close_mode_instr
			bit (36) static init ("001000000000000010100101000001000000"b);
						/* stz	pr1|2	(fsb.open_mode)	*/
dcl	fsb_name_instr	(4) bit (36) static init ("100000000000010010111010101001000000"b,
						/* lxl5	pr4|22	(stat.id_len)	*/
			"000100000001000000001000000101100000"b,
						/* mlr	(with blank fill)		*/
			"100000000000010011000000000000001101"b,
						/* desc1	pr4|23(0)->X5	(stat.id)	*/
			"001000000001000111000000000001000001"b);
						/* desc2	pr1|107(0)->65	(fsb.open_name)*/
dcl	fsb_name_reloc	(8) bit (5) aligned static init ("11001"b, ""b, ""b, ""b, "11001"b, ""b, ""b, ""b);
dcl	fsb_relkey_instr	bit (36) static init ("001000000000000101100101000001000000"b);
						/* stz	pr1|5	(fsb.relkey)	*/
dcl	fsb_keylen_instr	bit (36) static init ("001000000000000110100101000001000000"b);
						/* stz	pr1|6	(fsb.keylen_sw)	*/
dcl	fsb_linage_counter_instr
			(2) bit (36) static init ("000000000000000000010011111000000100"b,
						/* ldaq	["00000001"],ic		*/
			"001000000001011000010011111001000000"b);
						/* staq	pr1|130	(fsb.linage_counter)*/
dcl	fsb_optional_instr	(2) bit (36) static init ("001111111111111111010010101000000011"b,
						/* ldx5	177777,du			*/
			"001000000001011010011100101001000000"b);
						/* ansx5	pr1|132	(fsb.optional)	*/
dcl	fsb_opened_ext_instr
			(2) bit (36) static init ("001000000000000000010010101000000011"b,
						/* ldx5	100000,du			*/
			"001000000001011010010100101001000000"b);
						/* orsx5	pr1|132	(fsb.opened)	*/
dcl	fsb_opened_int_instr
			(2) bit (36) static init ("001100000000000000010010101000000011"b,
						/* ldx5	140000,du			*/
			"001000000001011010010100101001000000"b);
						/* orsx5	pr1|132	(fsb.opened,internal) */

dcl	noentry_instr	(4) bit (36) static init ("110000000000000000010011101001000000"b,
						/* lda	pr6|mcode_off		*/
			"000000000000000000110000000000000100"b,
						/* tze	[bypass_error],ic		*/
			"100000000000000000001001101001010000"b,
						/* cmpa	pr4|error_table_$noentry],*	*/
			"000000000000000000110000000000000100"b);
						/* tze	[open_output],ic		*/
						/* fixup directive for link, used when profile options is specified.	*/
dcl	1 fixup_directive	aligned static,
	  2 operation	bit (1) unal init ("0"b),
	  2 type		bit (4) unal init ("1111"b),
	  2 reserved	bit (9) unal init ("000000000"b),
	  2 location	unal,
	    3 half	bit (1) unal init ("0"b),
	    3 base	bit (3) unal init ("001"b),
	    3 offset	fixed bin unal,
	  2 tag_number	fixed bin aligned;
dcl	noentry_reloc	(8) bit (5) aligned static init (""b, ""b, ""b, ""b, "10100"b, ""b, ""b, ""b);

dcl	tra_instr		bit (36) static init ("000000000000000000111001000000000100"b);
						/* tra	[somewhere],ic		*/

dcl	text		(0:100000) bit (36) based (cobol_$text_base_ptr);

dcl	temp		fixed bin;
dcl	utemp		fixed bin;
dcl	off		fixed bin;
dcl	i		fixed bin;
dcl	ic		fixed bin;
dcl	patch_ic		fixed bin;
dcl	nulloff		fixed bin;
dcl	maskoff		fixed bin;

dcl	save_ic		fixed bin static;
dcl	save_retry	fixed bin static;

dcl	sp_uchars		bit (18) aligned;
dcl	sp_pname		bit (18) aligned;
dcl	sp_len		bit (18) aligned;

dcl	cobol_set_fsbptr	entry (ptr);
dcl	cobol_pool	entry (char (*), fixed bin, fixed bin);
dcl	cobol_make_tagref	entry (fixed bin, fixed bin, ptr);
dcl	cobol_make_fixup	entry (ptr);
dcl	cobol_emit	entry (ptr, ptr, fixed bin);
dcl	cobol_make_link$type_4
			entry (fixed bin, char (*));

dcl	cobol_ioerror	entry (ptr, fixed bin, fixed bin, ptr);
dcl	cobol_ioerror$preset
			entry (ptr);
dcl	cobol_process_error entry (fixed bin, fixed bin, fixed bin);
dcl	cobol_io_util$move_lit
			entry (bit (3) aligned, fixed bin, fixed bin, char (*));


start:
/*************************************/
check_noncobol:
     entry (ft_ptr, define_open, ioerror_ptr, ft_ptr);

start_check_noncobol:
	temp = cobol_$text_wd_off - define_open;
	if file_table.external | file_table.ao_len > 0
	then do;
		if file_table.ao_len ^> 0
		then do;				/* an ext file with no attach-options; if attach made
						   here, can bypass noncobol open check */
			temp = temp + 1;
			substr (tra_instr, 1, 18) = "000000000000001000"b;
			call cobol_emit (addr (tra_instr), null (), 1);
		     end;
		else do;				/* an int or ext file with attach-options; must
						   reset pr1 and pr2 in case attach made here */
			call cobol_set_fsbptr (ft_ptr);
			call cobol_emit (addr (check_attach_instr (1)), null (), 1);
		     end;
		call pool_nullptr;
		utemp = nulloff - 1;
		substr (check_noncobol_instr (2), 1, 18) = substr (unspec (utemp), 19, 18);
		utemp = maskoff - 2;
		substr (check_noncobol_instr (3), 1, 18) = substr (unspec (utemp), 19, 18);
		call cobol_make_tagref (ioerror.forward_tag, cobol_$text_wd_off + 6, addr (check_noncobol_instr (7)));
		call cobol_emit (addr (check_noncobol_instr), null (), 7);
	     end;
	if define_open ^= 0
	then substr (text (define_open), 1, 18) = substr (unspec (temp), 19, 18);
exit_chexk_nonocobol:
	return;


/*************************************/
check_open:
     entry (ft_ptr, cobol_mode, ioerror_ptr);

dcl	ft_ptr		ptr;			/* pointer to the file_table */
dcl	ioerror_ptr	ptr;			/* ptr to ioerror structure */
dcl	cobol_mode	fixed bin;		/* cobol open mode */

start_check_open:
	call cobol_ioerror$preset (ft_ptr);
	call cobol_set_fsbptr (ft_ptr);
	patch_ic = cobol_$text_wd_off + 1;
	if cobol_mode = 0
	then do;					/* check for close */
		if file_table.external
		then do;
			call cobol_make_tagref (ioerror.forward_tag, cobol_$text_wd_off + 1,
			     addr (ext_close_instr (2)));
			call cobol_emit (addr (ext_close_instr), null (), 2);
			i = 0;
		     end;
		else do;
			call cobol_emit (addr (int_close_instr), null (), 2);
			i = 17;
		     end;
	     end;
	else if cobol_mode > 0
	then do;					/* check for open request */
		if file_table.external
		then do;
			substr (ext_open_instr (3), 1, 18) = substr (unspec (cobol_mode), 19, 18);
			call cobol_make_tagref (ioerror.forward_tag, cobol_$text_wd_off + 3,
			     addr (ext_open_instr (4)));
			call cobol_emit (addr (ext_open_instr), null (), 4);
			i = 8;
		     end;
		else do;
			call cobol_emit (addr (int_open_instr), null (), 2);
			i = 9;
		     end;
	     end;
	else do;					/* check for other io request */
		call cobol_emit (addr (int_close_instr), null (), 2);
		i = 24;
	     end;
	if i ^= 0
	then do;
		utemp = ioerror.unopen;
		if i = 24
		then ioerror.unopen = 1;
		call cobol_ioerror (ft_ptr, i, 0, ioerror_ptr);
		ioerror.unopen = utemp;
		utemp = cobol_$text_wd_off - patch_ic;
		substr (text (patch_ic), 1, 18) = substr (unspec (utemp), 19, 18);
	     end;
exit_chexk_open:
	return;


/*************************************/
check_attach:
     entry (ft_ptr, define_open);

dcl	define_open	fixed bin;		/* instr loc of "tra if attached" */

start_check_attach:
	call cobol_set_fsbptr (ft_ptr);
	call pool_nullptr;
	utemp = nulloff - 2;
	substr (check_attach_instr (3), 1, 18) = substr (unspec (utemp), 19, 18);
	utemp = maskoff - 3;
	substr (check_attach_instr (4), 1, 18) = substr (unspec (utemp), 19, 18);
	define_open = cobol_$text_wd_off + 4;
	call cobol_emit (addr (check_attach_instr), null (), 5);
exit_check_attach:
	return;


/*************************************/
check_reattach:
     entry (ft_ptr, define_attach, define_detach);

dcl	define_attach	fixed bin;		/* instr loc of "tra if not attached" */
dcl	define_detach	fixed bin;		/* instr loc of "tra if not open" */

start_check_reattach:
	call cobol_set_fsbptr (ft_ptr);
	call pool_nullptr;
	utemp = nulloff - 2;
	substr (check_reattach_instr (3), 1, 18) = substr (unspec (utemp), 19, 18);
	utemp = maskoff - 3;
	substr (check_reattach_instr (4), 1, 18) = substr (unspec (utemp), 19, 18);
	utemp = nulloff - 6;
	substr (check_reattach_instr (7), 1, 18) = substr (unspec (utemp), 19, 18);
	utemp = maskoff - 7;
	substr (check_reattach_instr (8), 1, 18) = substr (unspec (utemp), 19, 18);
	define_attach = cobol_$text_wd_off + 4;
	define_detach = cobol_$text_wd_off + 8;
	call cobol_emit (addr (check_reattach_instr), null (), 9);
exit_check_reattach:
	return;


/*************************************/
make_pdir_path:
     entry (pname_off, len_off, uchars_off, namelen);

dcl	pname_off		fixed bin;		/* wd offset in stack of space for pname */
dcl	len_off		fixed bin;		/* wd offset in stack of space for pname length */
dcl	uchars_off	fixed bin;		/* wd offset in stack of location of uchars char(25) */
						/* preceding word from uchars_off must be available */
dcl	namelen		fixed bin;		/* length of segment portion of name */

start_make_pdir_path:
	utemp = uchars_off - 1;
	sp_uchars = "110"b || substr (unspec (utemp), 22, 15);
	sp_pname = "110"b || substr (unspec (pname_off), 22, 15);
	sp_len = "110"b || substr (unspec (len_off), 22, 15);

	substr (pdir_path_instr (2), 1, 18) = sp_uchars;
	substr (pdir_path_instr (4), 1, 18) = sp_pname;
	substr (pdir_path_instr (6), 1, 18) = sp_len;
	substr (pdir_path_instr (9), 1, 18) = sp_len;
	substr (pdir_path_instr (10), 1, 18) = sp_len;
	substr (pdir_path_instr (12), 1, 18) = sp_len;
	substr (pdir_path_instr (14), 1, 18) = sp_uchars;
	utemp = namelen + 1;			/* for the leading > */
	substr (pdir_path_instr (14), 28, 9) = substr (unspec (utemp), 28, 9);
	substr (pdir_path_instr (15), 1, 18) = sp_pname;
	call cobol_emit (addr (pdir_path_instr), null (), 15);
exit_make_pdir_path:
	return;


/*************************************/
check_noentry1:
     entry (ft_ptr, cobol_code, ioerror_ptr, mcode_off);

dcl	cobol_code	fixed bin;
dcl	mcode_off		fixed bin;

	save_retry = ioerror.restartad;
	save_ic = cobol_$text_wd_off + 1;
	patch_ic = cobol_$text_wd_off + 3;
	substr (noentry_instr (1), 4, 15) = substr (unspec (mcode_off), 22, 15);
	call cobol_make_link$type_4 (off, "error_table_$noentry");
	if fixed_common.options.profile
	then do;
		fixup_directive.location.offset = cobol_$text_wd_off;
		call cobol_make_fixup (addr (fixup_directive));
	     end;
	substr (noentry_instr (3), 4, 15) = substr (unspec (off), 22, 15);
	call cobol_emit (addr (noentry_instr), addr (noentry_reloc), 4);
	call cobol_ioerror (ft_ptr, cobol_code, mcode_off, ioerror_ptr);
	call cobol_emit (addr (tra_instr), null (), 1);
	utemp = cobol_$text_wd_off - patch_ic;
	substr (text (patch_ic), 1, 18) = substr (unspec (utemp), 19, 18);
exit_check_noentry1:
	return;
check_noentry2:
     entry;
	utemp = save_retry - cobol_$text_wd_off;
	substr (tra_instr, 1, 18) = substr (unspec (utemp), 19, 18);
	call cobol_emit (addr (tra_instr), null (), 1);
	utemp = cobol_$text_wd_off - save_ic;
	substr (text (save_ic), 1, 18) = substr (unspec (utemp), 19, 18);
exit_chexk_noentry2:
	return;


/*************************************/
set_fsb:
     entry (ft_ptr, cobol_mode);

start_set_fsb:
	call cobol_set_fsbptr (ft_ptr);
	if cobol_mode = 0
	then do;					/* closing file */
		call cobol_emit (addr (fsb_close_mode_instr), null (), 1);
		if file_table.external
		then call cobol_emit (addr (fsb_name_instr), addr (fsb_name_reloc), 4);
	     end;
	else do;
		substr (fsb_open_mode_instr (1), 1, 18) = substr (unspec (cobol_mode), 19, 18);
		call cobol_emit (addr (fsb_open_mode_instr), null (), 2);
		call cobol_emit (addr (fsb_name_instr), addr (fsb_name_reloc), 4);
		if file_table.organization = 2
		then call cobol_emit (addr (fsb_relkey_instr), null (), 1);
		else if file_table.organization = 3
		then call cobol_emit (addr (fsb_keylen_instr), null (), 1);
		else if file_table.organization = 1 & file_table.device = 1
		then do;
			call cobol_pool ("00000001", 2, off);
			utemp = -off - cobol_$text_wd_off;
			substr (fsb_linage_counter_instr (1), 1, 18) = substr (unspec (utemp), 19, 18);
			call cobol_emit (addr (fsb_linage_counter_instr), null (), 2);
		     end;
		call cobol_emit (addr (fsb_optional_instr), null (), 2);
		if file_table.external
		then call cobol_emit (addr (fsb_opened_ext_instr), null (), 2);
		else call cobol_emit (addr (fsb_opened_int_instr), null (), 2);
	     end;
exit_set_fsb:
	return;


/*************************************/
/* SUBROUTINES */
/*************************************/

/*************************************/
pool_nullptr:
     proc;

dcl	nullcon		bit (72) aligned static
			init ("111111111111111111000000000000100011000000000000000001000000000000000000"b);
dcl	maskcon		bit (72) aligned static
			init ("000111111111111111000000000000111111111111111111111111000111111000111111"b);
dcl	char8b		char (8) based;

	call cobol_pool (addr (nullcon) -> char8b, 2, off);
	nulloff = -off - cobol_$text_wd_off;
	call cobol_pool (addr (maskcon) -> char8b, 2, off);
	maskoff = -off - cobol_$text_wd_off;
exit_pool_nullptr:
	return;
     end pool_nullptr;

exit:
	return;

/*************************************/

/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

%include cobol_file_table;
%include cobol_;
%include cobol_fixed_common;
%include cobol_ext_;
     end cobol_open_util;
