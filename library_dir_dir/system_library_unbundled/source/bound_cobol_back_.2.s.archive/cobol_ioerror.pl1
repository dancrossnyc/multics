/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_ioerror.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 01/31/77 by Bob Chang to implement profile option.	*/
/* Modified since Version 2.0.	*/
/* format: style3 */
cobol_ioerror:
     proc (ft_ptr, cobol_code, mcode_off, ioerror_ptr);

dcl	ft_ptr		ptr;			/* ptr to the file table */
dcl	cobol_code	fixed bin;		/* cobol error code */
dcl	mcode_off		fixed bin;		/* wd offset in stack of multics status code or 0 if none */
dcl	ioerror_ptr	ptr;			/* ptr to additional error information */

/* fixup directive for link, used when profile options is specified.	*/
dcl	1 fixup_directive	aligned static,
	  2 operation	bit (1) unal init ("0"b),
	  2 type		bit (4) unal init ("1111"b),
	  2 reserved	bit (9) unal init ("000000000"b),
	  2 location	unal,
	    3 half	bit (1) unal init ("0"b),
	    3 base	bit (3) unal init ("001"b),
	    3 offset	fixed bin unal,
	  2 tag_number	fixed bin aligned;
dcl	1 ioerror		based (ioerror_ptr),
	  2 lineno	fixed bin,
	  2 restartad	fixed bin,
	  2 forward_tag	fixed bin,
	  2 no_error_tag	fixed bin,
	  2 no_error_ptr	ptr,
	  2 unopen	fixed bin,
	  2 special_tag	fixed bin,
	  2 special_ptr	ptr,
	  2 error_ptr	ptr;
dcl	1 s		based,
	  2 n		fixed bin,
	  2 link		(0 refer (s.n)),
	    3 name	char (32),
	    3 status2	char (4) aligned,
	    3 status1	char (2);

dcl	1 mpout		static,
	  2 n		fixed bin init (0),
	  2 pt1		ptr,
	  2 pt2		ptr,
	  2 pt3		ptr,
	  2 pt4		ptr;
dcl	file_key_desc	char (40) based;
dcl	1 fkey_type9	static,
	  2 header	(4) fixed bin init (112, 0, 0, 9),
	  2 repl_ptr	(2) ptr init ((2) null ()),
	  2 fill1		bit (108) init (""b),
	  2 file_key_info,
	    3 fb		(6) fixed bin init (0, 0, 0, 0, 0, 0),
	    3 flags1	bit (36) init (""b),
	    3 flags2	bit (36) init (""b),
	    3 seg		fixed bin,
	    3 off		fixed bin,
	  2 fill2		(7) fixed bin init (0, 0, 0, 0, 0, 0, 0);
dcl	1 type1		static,
	  2 size		fixed bin init (28),
	  2 line		fixed bin,		/* line number */
	  2 column	fixed bin init (0),
	  2 type		fixed bin init (1),
	  2 key		fixed bin init (0),		/* verb number */
	  2 bits		bit (36) init ("1"b),
	  2 jump_index	fixed bin init (0);
dcl	1 type19		static,
	  2 size		fixed bin init (38),
	  2 line		fixed bin init (0),
	  2 column	fixed bin init (0),
	  2 type		fixed bin init (19),
	  2 verb		fixed bin init (0),		/* verb number */
	  2 e		fixed bin init (1),		/* for both perform and move */
	  2 h		fixed bin init (0),
	  2 i		fixed bin init (0),
	  2 j		fixed bin init (0),
	  2 a		bit (3) init (""b),
	  2 b		bit (1) init (""b),
	  2 c		bit (1) init (""b),
	  2 d		bit (2) init (""b),
	  2 f		bit (2) init (""b),
	  2 g		bit (2) init (""b),
	  2 k		bit (5) init (""b);
dcl	1 type3		static,
	  2 size		fixed bin init (28),
	  2 line		fixed bin init (0),
	  2 column	fixed bin init (0),
	  2 type		fixed bin init (3),
	  2 lit_type	bit (1) init ("0"b),	/* character string */
	  2 all_lit	bit (1) init ("0"b),	/* not ALL lit */
	  2 lit_size	fixed bin init (4),
	  2 string	char (4) init ("");
dcl	1 type7		static,
	  2 size		fixed bin init (52),
	  2 line		fixed bin init (0),
	  2 column	fixed bin init (0),
	  2 type		fixed bin init (7),
	  2 string_ptr	ptr init (null ()),
	  2 prev_rec	ptr init (null ()),
	  2 bits1		bit (4) init (""b),
	  2 section_name	bit (1) init ("1"b),
	  2 declarative_proc
			bit (1) init ("1"b),
	  2 bits2		bit (3) init (""b),
	  2 priority	char (2) init ("00"),
	  2 bits3		bit (9) init (""b),
	  2 section_num	fixed bin init (0),
	  2 proc_num	fixed bin init (0),
	  2 def_line	fixed bin init (0),
	  2 name_size	fixed bin init (0);

dcl	1 default_error_status
			static,
	  2 n		fixed bin init (1),
	  2 link,
	    3 name	char (32) init (""),
	    3 status2	char (4) init ("0030"),
	    3 status1	char (2) init ("30");
dcl	1 no_error_status	static,
	  2 n		fixed bin init (1),
	  2 link,
	    3 name	char (32) init (""),
	    3 status2	char (4) init ("0000"),
	    3 status1	char (2) init ("00");
dcl	tra_instr		bit (36) static init ("000000000000000000111001000000000100"b);
dcl	tze_instr		bit (36) static init ("000000000000000000110000000000000100"b);
dcl	tnz_instr		bit (36) static init ("000000000000000000110000001000000100"b);
dcl	cmpa_dl_instr	bit (36) static init ("000000000000000000001001101000000111"b);
dcl	cmpa_ind_instr	bit (36) static init ("100000000000000000001001101001010000"b);
dcl	lda_instr		bit (36) static init ("110000000000000000010011101001000000"b);
dcl	lda_mode		(2) bit (36) static
			init ("001000000000000010010011101001000000"b, "000000000000110000011111101000000111"b);

dcl	link_reloc	(2) bit (5) aligned static init ("10100"b, "00000"b);

dcl	preset_sw		bit (1);			/* used to comm between set_status and preset entry. */
dcl	restart_ic	fixed bin;
dcl	perform_ic	fixed bin;
dcl	tag		fixed bin;
dcl	next_instr_tag	fixed bin;
dcl	ntag		fixed bin;
dcl	pntag		fixed bin;
dcl	temp		fixed bin;
dcl	i		fixed bin;
dcl	mode_count	fixed bin;
dcl	off		fixed bin;
dcl	line_no		fixed bin;

dcl	fkey_ptr		ptr;

dcl	lda_sw		bit (1);
dcl	fsbptr_sw		bit (1);
dcl	perform_mode_sw	bit (1);
dcl	io_sw		bit (1);
dcl	s1set		bit (1);
dcl	s2set		bit (2);
dcl	s1default		char (2);
dcl	s1		char (2);

dcl	cobol_emit	entry (ptr, ptr, fixed bin);
dcl	cobol_read_rand	entry (fixed bin, char (5), ptr);
dcl	cobol_make_tagref	entry (fixed bin, fixed bin, ptr);
dcl	cobol_make_link$type_4
			entry (fixed bin, char (*));
dcl	cobol_make_fixup	entry (ptr);
dcl	cobol_define_tag	entry (fixed bin);		/* sub-generators */
dcl	cobol_process_error entry (fixed bin, fixed bin, fixed bin);
dcl	cobol_process_error$use
			entry (fixed bin, fixed bin, fixed bin);
dcl	cobol_perform_gen	entry (ptr);
dcl	cobol_move_gen	entry (ptr);
dcl	cobol_set_fsbptr	entry (ptr);


/*************************************/
start:
	preset_sw = "0"b;				/* set to zero unless preset entry is used. */
	s1default = "**";
	s1set, s2set = "0"b;
	line_no = ioerror.lineno;
	perform_ic = 0;
	next_instr_tag = cobol_$next_tag;
	cobol_$next_tag = cobol_$next_tag + 1;

	if mcode_off = 0
	then do;					/* an error exists - no checking necessary */
		if ioerror.special_ptr ^= null ()
		then do;				/* info assumed at ioerror.special_ptr->s.link(1) */
			call set_status (ioerror.special_ptr, 1);
			if ioerror.special_tag ^= 0
			then do;			/* in-line errror coding specified */
				call cobol_emit (addr (tra_instr), null (), 1);
				call cobol_make_tagref (ioerror.special_tag, cobol_$text_wd_off - 1, null ());
			     end;
			else call produce_error;
		     end;
		else if ioerror.error_ptr ^= null ()
		then do;				/* info assumed at ioerror.error_ptr->s.link(1) */
			call set_status (ioerror.error_ptr, 1);
			call produce_error;
		     end;
		else do;
			call set_status (addr (default_error_status), 1);
			call produce_error;
		     end;
	     end;

	else do;					/* must do error checking */
		if ioerror.unopen = 2
		then call set_status (addr (no_error_status), 1);
						/* a misnomer , means set 0 */
		substr (lda_instr, 4, 15) = substr (unspec (mcode_off), 22, 15);
		call cobol_emit (addr (lda_instr), null (), 1);
		if ioerror.no_error_tag ^= 0
		then tag = ioerror.no_error_tag;
		else tag = next_instr_tag;
		if ioerror.no_error_ptr = null ()
		then do;				/* only 0 signifies non-error code */
			call cobol_emit (addr (tze_instr), null (), 1);
			call cobol_make_tagref (tag, cobol_$text_wd_off - 1, null ());
		     end;
		else do i = 1 to ioerror.no_error_ptr -> s.n;
			if ioerror.no_error_ptr -> s.link.name (i) = ""
			then do;			/* indicates zero code */
				substr (cmpa_dl_instr, 1, 18) = ""b;
				call cobol_emit (addr (cmpa_dl_instr), null (), 1);
			     end;
			else do;			/* must compare code to error_table_ value */
				call cobol_make_link$type_4 (off,
				     "error_table_$" || ioerror.no_error_ptr -> s.link.name (i));
				if fixed_common.options.profile
				then do;
					fixup_directive.location.offset = cobol_$text_wd_off;
					call cobol_make_fixup (addr (fixup_directive));
				     end;
				substr (cmpa_ind_instr, 4, 15) = substr (unspec (off), 22, 15);
				call cobol_emit (addr (cmpa_ind_instr), addr (link_reloc (1)), 1);
			     end;
			s1set = ^file_table.file_status | ioerror.no_error_ptr -> s.link.status1 (i) = "00";
			s2set = ^file_table.extra_status | ioerror.no_error_ptr -> s.link.status2 (i) = "0000";
			if s1set & s2set
			then do;			/* status already set, so transfer out */
				call cobol_emit (addr (tze_instr), null (), 1);
				call cobol_make_tagref (tag, cobol_$text_wd_off - 1, null ());
			     end;
			else do;
				ntag = cobol_$next_tag;
				cobol_$next_tag = cobol_$next_tag + 1;
				call cobol_emit (addr (tnz_instr), null (), 1);
				call cobol_make_tagref (ntag, cobol_$text_wd_off - 1, null ());
				call set_status (ioerror.no_error_ptr, i);
				call cobol_emit (addr (tra_instr), null (), 1);
				call cobol_make_tagref (tag, cobol_$text_wd_off - 1, null ());
				call cobol_define_tag (ntag);
			     end;
		     end;
		s1set, s2set = "0"b;
		if file_table.file_status | ioerror.special_tag ^= 0
		then do;
			s2set = "1"b;		/* not really, just don't bother setting it now */
			call set_status (addr (default_error_status), 1);
			s2set = "0"b;
			s1default = default_error_status.link.status1;
			if ioerror.special_ptr ^= null ()
			then do i = 1 to ioerror.special_ptr -> s.n;
				ntag = cobol_$next_tag;
				cobol_$next_tag = cobol_$next_tag + 1;
				if ioerror.special_ptr -> s.link.name (i) = ""
				then do;
					substr (cmpa_dl_instr, 1, 18) = ""b;
					call cobol_emit (addr (cmpa_dl_instr), null (), 1);
				     end;
				else do;
					call cobol_make_link$type_4 (off,
					     "error_table_$" || ioerror.special_ptr -> s.link.name (i));
					if fixed_common.options.profile
					then do;
						fixup_directive.location.offset = cobol_$text_wd_off;
						call cobol_make_fixup (addr (fixup_directive));
					     end;
					substr (cmpa_ind_instr, 4, 15) = substr (unspec (off), 22, 15);
					call cobol_emit (addr (cmpa_ind_instr), addr (link_reloc (1)), 1);
				     end;
				call cobol_emit (addr (tnz_instr), null (), 1);
				call cobol_make_tagref (ntag, cobol_$text_wd_off - 1, null ());
				call set_status (ioerror.special_ptr, i);
				if ioerror.special_tag ^= 0
				then do;
					call cobol_emit (addr (tra_instr), null (), 1);
					call cobol_make_tagref (special_tag, cobol_$text_wd_off - 1, null ());
				     end;
				else call produce_error;
				call cobol_define_tag (ntag);
			     end;
			if file_table.extra_status
			then do;
				if ioerror.error_ptr ^= null ()
				then do i = 1 to ioerror.error_ptr -> s.n;
					ntag = cobol_$next_tag;
					cobol_$next_tag = cobol_$next_tag + 1;
					if ioerror.error_ptr -> s.link.name (i) ^= ""
					then do;	/* otherwise the default */
						call cobol_make_link$type_4 (off,
						     "error_table_$" || ioerror.error_ptr -> s.link.name (i));
						substr (cmpa_ind_instr, 4, 15) =
						     substr (unspec (off), 22, 15);
						if fixed_common.options.profile
						then do;
							fixup_directive.location.offset =
							     cobol_$text_wd_off;
							call cobol_make_fixup (addr (fixup_directive));
						     end;
						call cobol_emit (addr (cmpa_ind_instr), addr (link_reloc (1)),
						     1);
						call cobol_emit (addr (tnz_instr), null (), 1);
						call cobol_make_tagref (ntag, cobol_$text_wd_off - 1, null ())
						     ;
					     end;
					call set_status (ioerror.error_ptr, i);
					call produce_error;
					call cobol_define_tag (ntag);
				     end;
				else do;		/* shouldn't be necessary */
					call set_status (addr (default_error_status), 1);
					call produce_error;
				     end;
			     end;
			else if ioerror.special_ptr = null () | ioerror.special_tag ^= 0
			then do;
				call set_status (addr (default_error_status), 1);
				call produce_error; /* will have been done id special_ptr ^= null */
			     end;
		     end;
		else call produce_error;
	     end;

	call cobol_define_tag (next_instr_tag);
	return;


/*************************************/
/* SUBROUTINES */
/*************************************/

produce_error:
     proc;
	if perform_ic ^= 0
	then do;
		temp = perform_ic - cobol_$text_wd_off;
		substr (tra_instr, 1, 18) = substr (unspec (temp), 19, 18);
		call cobol_emit (addr (tra_instr), null (), 1);
	     end;
	else do;
		perform_ic = cobol_$text_wd_off;
		if file_table.error_exit ^= 0
		then call perform_use (file_table.error_exit);
						/* specific use proc */
		else do;
			mode_count = 0;
			if ^file_table.external
			then do;			/* can skip check for int file opened in only 1 mode */
				if file_table.open_ext
				then mode_count = mode_count + 1;
				if file_table.open_in
				then mode_count = mode_count + 1;
				if file_table.open_out
				then mode_count = mode_count + 1;
				if file_table.open_io
				then mode_count = mode_count + 1;
			     end;
			lda_sw, fsbptr_sw, perform_mode_sw, io_sw = "0"b;
			if fixed_common.extend_error_exit ^= 0 & ioerror.unopen ^= 1
			then if (^file_table.external & file_table.open_ext)
				| (file_table.external & file_table.organization = 1
				& (file_table.write | file_table.close | file_table.open_ext))
			     then call perform_mode (fixed_common.extend_error_exit, 0);
			if fixed_common.input_error_exit ^= 0 & ioerror.unopen ^= 1
			then if (^file_table.external & file_table.open_in)
				| (file_table.external
				& (file_table.read | file_table.start | file_table.close | file_table.open_in))
			     then call perform_mode (fixed_common.input_error_exit, 16);
			if fixed_common.output_error_exit ^= 0 & ioerror.unopen ^= 1
			then if (^file_table.external & file_table.open_out)
				| (file_table.external
				& (file_table.write | file_table.close | file_table.open_out))
			     then call perform_mode (fixed_common.output_error_exit, 48);
			if fixed_common.i_o_error_exit ^= 0 & ioerror.unopen ^= 1
			then if (^file_table.external & file_table.open_io)
				| (file_table.external
				& (file_table.read | file_table.rewrite | file_table.start | file_table.delete
				| file_table.close | file_table.open_io))
			     then do;
				     io_sw = "1"b;
				     call perform_mode (fixed_common.i_o_error_exit, 32);
				end;

			if (mode_count ^= 1 & mode_count ^= 4) | ^perform_mode_sw
			then do;			/* must provide fall-thru */
				if ioerror.restartad ^= 0
				then restart_ic = ioerror.restartad;
				else restart_ic = cobol_$text_wd_off;
				call cobol_process_error (cobol_code, line_no, mcode_off);
				temp = restart_ic - cobol_$text_wd_off;
				substr (tra_instr, 1, 18) = substr (unspec (temp), 19, 18);
				call cobol_emit (addr (tra_instr), null (), 1);
			     end;
		     end;
	     end;
	return;

perform_mode:
     proc (procno, mode);
dcl	procno		fixed bin (17);
dcl	mode		fixed bin;

	perform_mode_sw = "1"b;			/* if not at least once, then must provide fall-thru */
	if mode_count ^= 1
	then do;
		pntag = cobol_$next_tag;
		cobol_$next_tag = cobol_$next_tag + 1;
		if mcode_off ^= 0 & ^fsbptr_sw
		then do;
			call cobol_set_fsbptr (ft_ptr);
			fsbptr_sw = "1"b;
		     end;
		if ^lda_sw
		then do;
			call cobol_emit (addr (lda_mode), null (), 2);
			lda_sw = "1"b;
		     end;
		if ^(mode_count = 4 & io_sw)
		then do;				/* no need to compare - can just fall in */
			substr (cmpa_dl_instr, 1, 18) = substr (unspec (mode), 19, 18);
			call cobol_emit (addr (cmpa_dl_instr), null (), 1);
			call cobol_emit (addr (tnz_instr), null (), 1);
			call cobol_make_tagref (pntag, cobol_$text_wd_off - 1, null ());
		     end;
	     end;
	call perform_use (procno);
	if mode_count ^= 1
	then call cobol_define_tag (pntag);
	return;
     end perform_mode;


perform_use:
     proc (procno);
dcl	procno		fixed bin;

	call cobol_process_error$use (cobol_code, line_no, mcode_off);
						/* record error message */
	mpout.n = 4;
	mpout.pt1 = addr (type1);
	mpout.pt2, mpout.pt3 = addr (type7);
	mpout.pt4 = addr (type19);
	mpout.pt1 -> reserved_word.line = line_no;
	mpout.pt2 -> proc_def.proc_num = procno;
	mpout.pt3 -> end_stmt.verb = 20;		/* perform */
	call cobol_perform_gen (addr (mpout));
	call cobol_emit (addr (tra_instr), null (), 1);
	if ioerror.forward_tag ^= 0
	then tag = ioerror.forward_tag;
	else tag = next_instr_tag;
	call cobol_make_tagref (tag, cobol_$text_wd_off - 1, null ());
	return;
     end perform_use;

     end produce_error;


set_status:
     proc (type_ptr, eno);
dcl	type_ptr		ptr;
dcl	eno		fixed bin;

	if ^file_table.file_status
	then return;
	call cobol_read_rand (1, file_table.file_status_info, fkey_ptr);
	addr (fkey_type9.file_key_info) -> file_key_desc = file_key.desc;
	mpout.n = 4;
	mpout.pt1 = addr (type1);
	mpout.pt2 = addr (type3);
	mpout.pt3 = addr (fkey_type9);
	mpout.pt4 = addr (type19);
	mpout.pt1 -> reserved_word.line = line_no;
	mpout.pt2 -> alphanum_lit.size = 26;
	mpout.pt2 -> alphanum_lit.line = line_no;
	mpout.pt2 -> alphanum_lit.lit_size = 2;
	s1 = type_ptr -> s.link.status1 (eno);
	substr (mpout.pt2 -> alphanum_lit.string, 1, 2) = s1;
	mpout.pt4 -> end_stmt.verb = 18;		/* move */
	if ^s1set & s1default ^= s1
	then call cobol_move_gen (addr (mpout));
	if ^file_table.extra_status | s2set
	then goto end_set_status;
	call cobol_read_rand (1, file_table.extra_status_info, fkey_ptr);
	addr (fkey_type9.file_key_info) -> file_key_desc = file_key.desc;
	mpout.pt2 -> alphanum_lit.size = 28;
	mpout.pt2 -> alphanum_lit.lit_size = 4;
	substr (mpout.pt2 -> alphanum_lit.string, 1, 4) = type_ptr -> s.link.status2 (eno);
	call cobol_move_gen (addr (mpout));		/*set status entered by preset entry don't execute next two instr's. */
end_set_status:
	if ^preset_sw
	then do;
		substr (lda_instr, 4, 15) = substr (unspec (mcode_off), 22, 15);
		call cobol_emit (addr (lda_instr), null (), 1);
	     end;
	return;
     end set_status;


/*************************************/
preset:
     entry (ft_ptr);

	preset_sw = "1"b;				/* set to signal set_status to skip two instr's. */
	s1set, s2set = "0"b;
	s1default = "**";
	line_no = 0;
	call set_status (addr (no_error_status), 1);
	return;


/*************************************/

/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

%include cobol_file_table;
%include cobol_file_key;
%include cobol_type1;
%include cobol_type3;
%include cobol_type7;
%include cobol_type19;
%include cobol_;
%include cobol_ext_;
%include cobol_fixed_common;
     end cobol_ioerror;
