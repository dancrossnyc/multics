/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_ioerror_abort.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 02/10/81 by FCH, [4.4-1], tra instr not emitted in certain cases, [4.4-1], BUG462(TR8970) */

/* format: style3 */
cobol_ioerror_abort:
     proc (mesno, lineno, stoff, restartad, exlink);

dcl	mesno		fixed bin;		/* number of cobol error message */
dcl	lineno		fixed bin;		/* line on which error occurred */
dcl	stoff		fixed bin;		/* word offset in stack of code */
dcl	restartad		fixed bin;		/* restartad for restart transfer */
dcl	exlink		fixed bin;		/* extra error code to check */

dcl	1 pr4_struct	static,
	  2 pr4		fixed bin init (4),
	  2 pointer_no	bit (3),
	  2 lock		fixed bin init (0),
	  2 switch	fixed bin init (1),
	  2 segno		fixed bin init (3002),
	  2 offset	fixed bin init (0),
	  2 reset		fixed bin;

dcl	1 areg_struct	static,
	  2 areg		fixed bin init (1),
	  2 reg_no	bit (4),
	  2 lock		fixed bin init (0),
	  2 already_there	fixed bin,
	  2 contains	fixed bin init (0),
	  2 null_ptr	ptr init (null ()),
	  2 lit		fixed bin;

dcl	instr		(3) bit (36);
dcl	reloc		(6) bit (5) aligned static
			init ("10100"b, "00000"b, "00000"b, "00000"b, "00000"b, "00000"b);

dcl	szn		bit (12) static init ("010011100001"b);
dcl	cmpa		bit (12) static init ("001001101001"b);
dcl	lda		bit (12) static init ("010011101001"b);
dcl	tra_icmod		bit (18) static init ("111001000000000100"b);
dcl	tnz_icmod		bit (18) static init ("110000001000000100"b);
dcl	full_tze_icmod	bit (36) static init ("000000000000000100110000000000000100"b);
dcl	indmod		bit (6) static init ("010000"b);

dcl	utemp		fixed bin;
dcl	hold_ic		fixed bin static init (0);
dcl	hold_addr		bit (18) based;
dcl	instr_ptr		ptr;

dcl	cobol_process_error entry (fixed bin, fixed bin, fixed bin);
dcl	cobol_emit	entry (ptr, ptr, fixed bin);
dcl	cobol_pointer_register$get
			entry (ptr);
dcl	cobol_register$load entry (ptr);


/*************************************/
start:
	instr_ptr = addr (instr);
	instr (1) = "110"b || substr (unspec (stoff), 22, 15) || szn;
	if restartad = 0
	then do;
		if exlink > 0
		then instr (2) = full_tze_icmod;
		else do;
			utemp = hold_ic - cobol_$text_wd_off;
			instr (2) = substr (unspec (utemp), 19, 18) || tnz_icmod;
		     end;
		if stoff > 0
		then call cobol_emit (instr_ptr, null (), 2);
		if exlink > 0
		then do;
			call cobol_pointer_register$get (addr (pr4_struct));
			call cobol_register$load (addr (areg_struct));
			instr (2) = substr (instr (1), 1, 18) || cmpa;
			instr (1) = "100"b || substr (unspec (exlink), 22, 15) || lda || indmod;
			utemp = hold_ic + 2 - cobol_$text_wd_off;
			instr (3) = substr (unspec (utemp), 19, 18) || tnz_icmod;
			call cobol_emit (instr_ptr, addr (reloc), 3);
		     end;
	     end;
	else do;
		if stoff > 0
		then do;
			instr (2) = full_tze_icmod;
			hold_ic = cobol_$text_wd_off + 1;
			call cobol_emit (instr_ptr, null (), 2);
			if exlink > 0
			then do;
				call cobol_pointer_register$get (addr (pr4_struct));
				call cobol_register$load (addr (areg_struct));
				instr (2) = substr (instr (1), 1, 18) || cmpa;
				instr (1) = "100"b || substr (unspec (exlink), 22, 15) || lda || indmod;
				instr (3) = full_tze_icmod;
				call cobol_emit (instr_ptr, addr (reloc), 3);
			     end;
		     end;
		call cobol_process_error (mesno, lineno, stoff);
		utemp = restartad - cobol_$text_wd_off;
		instr (1) = substr (unspec (utemp), 19, 18) || tra_icmod;
						/*[4.4-1]*/
		if stoff ^= 0 | exlink ^= 0
		then call cobol_emit (instr_ptr, null (), 1);
		if stoff > 0
		then do;
			utemp = cobol_$text_wd_off - hold_ic;
			addrel (cobol_$text_base_ptr, hold_ic) -> hold_addr = substr (unspec (utemp), 19, 18);
			utemp = utemp - 3;
			if exlink > 0
			then addrel (cobol_$text_base_ptr, hold_ic + 3) -> hold_addr =
				substr (unspec (utemp), 19, 18);
		     end;
	     end;
	return;


/*************************************/

/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

%include cobol_;

     end cobol_ioerror_abort;
