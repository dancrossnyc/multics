/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8091),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8091 cobol_open_gen.pl1 Stop VALUE OF FILE-ID and VALUE OF RETENTION
     from being ignored.
                                                   END HISTORY COMMENTS */


/* Modified on 12/10/84 by FCH, [5.3-1], BUG574(phx18559), VALUE OF FILE-ID and RETENTION */
/* Modified on 11/28/84 by FCH, [5.3...], trace added */
/* Modified on 10/28/82 by FCH, [5.1-1], length of attach options string incorrect, BUG544(phx12991) */
/* Modified on 09/30/80 by FCH, [4.4-1], density is 6250 supported, BUG447(TR7681) */
/* Modified on 09/08/79 by FCH, [4.0-2], implement apply attach-options are data-name */
/* Modified on 03/12/79 by FCH, [4.0-1], fix preattach for internal files */
/* Modified on 10/31/78 by witches and hobgoblins, [3.0-3], alt rec keys */
/* Modified on 12/15/77 by FCH, [3.0-2], ioa_ used in NUMS */
/* Modified on 12/13/77 by FCH, [3.0-1], org is ibm-(os,dos) implemented */
/* Modified since version 3.0 */




/* format: style3 */
cobol_open_gen:
     proc (mp_ptr);

dcl	mp_ptr		ptr;

dcl	1 mp		based (mp_ptr),
	  2 n		fixed bin,		/* always 3 */
	  2 pt1		ptr,			/* pts to type1 token for OPEN */
	  2 pt2		ptr,			/* pts to type12 token for the file */
	  2 pt3		ptr;			/* pts to type19 token */

dcl	1 args,
	  2 entryno	fixed bin,
	  2 arglist_off	fixed bin,
	  2 stacktemp_off	fixed bin,
	  2 n		fixed bin,
	  2 arg		(5),
	    3 pt		ptr,
	    3 type	fixed bin,
	    3 off1	fixed bin,
	    3 off2	fixed bin,
	    3 value	bit (18) unal,
	    3 indirecy	bit (1) unal,
	    3 overlay	bit (1) unal,
	    3 repeat_nogen	bit (1) unal;


dcl	1 mpout,
	  2 n		fixed bin,
	  2 pt1		ptr,
	  2 pt2		ptr,
	  2 pt3		ptr,
	  2 pt4		ptr;

dcl	file_key_desc	char (40) based;
dcl	atd_string	char (150) varying init ((150)" ");
dcl	buf_off		fixed bin;
dcl	ft_max_cra_size	fixed bin;
dcl	ft_work		char (6) init ((6)" ");
dcl	ft_format		char (4) var init (" fb ");
dcl	ft_protect	char (5) var init ((5)" ");
dcl	ft_retain		char (11) var init (" -ret none ");
dcl	ft_force		char (5) var init ((5)" ");
dcl	ft_output_mode	char (17) var init ((17)" ");
dcl	ft_density_num	fixed bin init (800);
dcl	ft_position_num	fixed bin init (1);
dcl	ft_block_num	fixed bin init (1);
dcl	ft_device_num	fixed bin init (1);
dcl	ft_extend		char (8) var init ((8)" ");
dcl	mcode_off		fixed bin static init (40);
dcl	good_tag		fixed bin;
dcl	iocb_tag		fixed bin;
dcl	attach_tag	fixed bin;
dcl	open_tag		fixed bin;
dcl	open_tag1		fixed bin;
dcl	open_tag2		fixed bin;
dcl	stream_tag	fixed bin;
dcl	ioname_off	fixed bin static init (46);
dcl	ubits_off		fixed bin static init (42);
dcl	uchars_off	fixed bin static init (44);
dcl	len_off		fixed bin static init (52);

/*[5.3-1]*/
dcl	ft_expire		char (9) var init ((9)" ");	/*[5.3-1]*/
dcl	handler		char (12) init ((12)" ");	/*[6.3-1]*/
dcl	om		char (6) var init ((6)" ");

dcl	argb		(5) bit (216) based (addr (args.arg (1)));
dcl	instr		(0:10000) bit (36) based (cobol_$text_base_ptr);
dcl	char4b		char (4) based;
dcl	char8b		char (8) based;

dcl	(extend_sw, alt_sw, alt_output)
			bit (1) aligned;

dcl	arg_ptr		ptr;
dcl	linage_ptr	ptr;
dcl	com2_ptr		ptr;
dcl	ioerror_ptr	ptr;
dcl	ft_ptr		ptr;
dcl	fkey_ptr		ptr;
dcl	basic_ptr		ptr;
dcl	name_ptr		ptr;
dcl	dn_ptr		ptr;

dcl	segname		char (36) init ("");
declare	append_size	fixed bin,
	append_string	char (16) var init ((16)" ");

dcl	namelen		fixed bin;
dcl	atd_len		fixed bin;
dcl	atd_off		fixed bin;
dcl	atd_charoff	fixed bin;
dcl	aloff		fixed bin;
dcl	buflen_off	fixed bin;
dcl	define_detach	fixed bin;
dcl	ioname_len	fixed bin;
dcl	cobol_mode	fixed bin;
dcl	multics_mode	fixed bin;
dcl	file_id		char (17) var init ((17)" ");
dcl	cata_name		char (200) var init ((200)" ");
dcl	key_sz		fixed bin;
dcl	temp		fixed bin;
dcl	utemp		fixed bin;
dcl	(i, typ)		fixed bin;

/*[5.3-1]*/
dcl	clock_		entry returns (fixed bin (71));
						/*[5.3-1]*/
dcl	date_time_	entry (fixed bin (71), char (*));

/*[5.3-1]*/
dcl	f_ifn		char (16) var;		/*[5.3-1]*/
dcl	f_nm		char (32) var;		/*[5.3-1]*/
dcl	fc_nm		char (30) var;		/*[5.3-1]*/
dcl	vf		char (12) init ("vfile_");	/*[5.3-1]*/
dcl	(cata_name_loc, atd_string_loc, append_string_loc)
			ptr;


/*************************************/
/* INITIALIZATION */

start:						/* set up  return tags. */
	/***.....	if Trace_Bit then call cobol_gen_driver_$Tr_Beg(cog);/**/
						/*[5.3-1]*/
	cata_name_loc = addr (cata_name);
	atd_string_loc = addr (atd_string);
	append_string_loc = addr (append_string);
	ioerror.retry_tag = cobol_$next_tag;
	ioerror.ns_tag = cobol_$next_tag + 1;
	good_tag = cobol_$next_tag + 2;
	iocb_tag = cobol_$next_tag + 3;
	attach_tag = cobol_$next_tag + 4;
	open_tag = cobol_$next_tag + 5;
	open_tag1 = cobol_$next_tag + 6;
	open_tag2 = cobol_$next_tag + 7;
	cobol_$next_tag = cobol_$next_tag + 8;		/* initialize ioerror structure for cobol_gen_ioerror. */
	ioerror_ptr = addr (ioerror);
	ioerror.cobol_code = 0;
	ioerror.type1_ptr = mp.pt1;
	ioerror.is_tag = 0;
	ioerror.mode = 0;
	basic_ptr, basic_arg.pt = addr (basic_struct);

	call cobol_read_ft (mp.pt2 -> fd_token.file_no, ft_ptr);

	basic_struct.seg = file_table.fsb.seg;
	basic_struct.offset = file_table.fsb.off;

	call cobol_iomode (ft_ptr, mp.pt3, cobol_mode, multics_mode, extend_sw);

	call cobol_alloc$stack (500, 2, aloff);		/* for both max arglist and atd */

	atd_off = aloff;
	atd_len = 0;
	ioname_off = aloff;
	buflen_off = 80;

/*[5.3-1]*/
	call cv (addr (file_table.ifn), 16, addr (f_ifn));/*[5.3-1]*/
	call cv (addr (fixed_common.prog_name), 30, addr (fc_nm));
						/*[5.3-1]*/
	call cv (addr (file_table.cat_nm), 200, addr (cata_name));

/*[5.3-1]*/
	f_nm = substr (file_table.name, 1, file_table.name_size);

/*[5.3-1]*/
	if file_table.catalogued = 2
	then call test_cata_name;


/*************************************/
/* START CODE GENERATION */

start_codegen:					/* CHECK CURRENT FILE STATUS */
						/* [3.0-3] */
	alt_sw = file_table.organization = 3 /* ind */ /* [3.0-3] */ & /* [3.0-3] */ file_table.alternate_keys ^= 0;
						/* [3.0-3] */
	alt_output = alt_sw /* [3.0-3] */ & /* [3.0-3] */ cobol_mode = 61;

	call cobol_define_tag (ioerror.retry_tag);
	call cobol_set_fsbptr (ft_ptr);		/* generates  epp1  pr4|54,*  */

	if file_table.external			/* EXT_OPEN_OP */
	then do;
		call cobol_ioop_util$lda (cobol_mode);	/* OPERATOR 30: open_ext_file */
		call cobol_call_op (30, good_tag);
		call cobol_ioop_util$tra (ioerror.ns_tag);
		call cobol_make_tagref (ioerror.ns_tag, cobol_$text_wd_off - 1, null ());

	     end;					/* OPERATOR 31: open_int_file */
	else call cobol_call_op (31, good_tag);

	call cobol_gen_ioerror (ft_ptr, ioerror_ptr);
	call cobol_define_tag (good_tag);

	ioname_len = index (file_table.id, " ") - 1;
	if ioname_len < 0
	then ioname_len = 16;

	temp = divide (ioname_len + 3, 4, 17, 0) * 4;	/* make it easy for cobol_io_util */
	call ML (4 * (ioname_off + 4), temp, addr (file_table.id));
	call cobol_ioop_util$ldaldx5 (ioname_len, ioname_off);
						/* generates  lda/ldx5 ioname_len/stack_offset  */

/* LOCATE OR CREATE IOCB VIA iox_$find_iocb */
/* OPERATOR 32: find_iocb */

	call cobol_call_op (32, iocb_tag);
	call cobol_gen_ioerror (ft_ptr, ioerror_ptr);	/* cobol code=7 unable to establish IOCb */
	call cobol_define_tag (iocb_tag);

/* CHECK CURRENT ATTACHMENT OF IO-SWITCH */
/* Operator 33: check_attach */

/*[4.0-1]*/
	call cobol_call_op (33, attach_tag);


/* GENERATE ERROR FOR "DEVICE IS UNATTACHED" */

	if file_table.device = 7
	then do;
		ioerror.cobol_code = 10;		/* error if not attached */
		call cobol_gen_ioerror (ft_ptr, ioerror_ptr);
		call opfin;
		go to cogx;
	     end;					/* PREPARE FOR ATTACHING IO-SWITCH */

	atd_charoff = 4 * atd_off;

	if file_table.ao_len > 0
	then typ = 1;
	else if file_table.attach_options_info ^= "00000"
	then typ = 2;
	else typ = 3;

	go to op (typ);


op (1):
	atd_len = file_table.ao_len;
	call ML (atd_charoff + 16, atd_len, addr (file_table.ao_string));

	go to opx;

op (2):						/*[4.0-2]*/
	call MOVE (file_table.attach_options_info, 16);	/*[4.0-2]*/
	atd_len = key_sz;

	go to opx;

op (3):						/* BUILD ATTACH DESCRIPTION - "vfile_  <name> [-extend]" */
	if file_table.catalogued < 2 & file_table.device ^= 5
						/* no pathname given */
	then do;
		segname = fc_nm || "." || f_ifn;
		namelen = length (fc_nm) + length (f_ifn) + 1;

		if file_table.temp & file_table.device ^= 1 & file_table.device ^= 3
		then do;
			temp = 4 * divide (namelen + 4, 4, 35, 0);

			call cobol_alloc$stack (80, 2, len_off);

			uchars_off = len_off + 2;
			call ML (uchars_off * 4, temp, addr (segname));

/* USE CURRENT PROCESS DIRECTORY || ">" || UNIQUE_SEGNAME */

			args.entryno = 0;		/* entry constant */
			args.arglist_off = uchars_off + 8;
			argb (1) = unspec (name_arg);
			argb (2) = unspec (temp_arg);
			args.n = 2;
			arg.pt (1) = addr (get_pdir_vstring);
			arg.off1 (2) = atd_off + 7;
			arg.repeat_nogen (2) = "0"b;

			call cobol_iocall (addr (args), null ());
			call cobol_set_fsbptr (ft_ptr);
			call cobol_open_util$make_pdir_path (atd_off + 7, len_off, uchars_off, namelen);

			atd_len = 202;

		     end;
		else do;

/* USE UNIQUE_SEGNAME ONLY (vfile_ will expand it at execution) */

			atd_len = namelen;
			call ML (atd_charoff + 28, atd_len, addr (segname));

		     end;
	     end;
	else do;					/* cat name specified */
						/* USE PATHNAME GIVEN */

		if file_table.catalogued = 2		/* given as a literal */
		then do;
			atd_len = 4 * divide (length (cata_name) + 3, 4, 35, 0);

			call ML (atd_charoff + 28, atd_len, addr (cata_name_loc -> vch.ch));

		     end;
		else if file_table.catalogued = 3
		then do;				/* given as a data_name */

			if file_table.device = 5
			then do;
				atd_type9.file_key_info.fb (4) = 6;
				atd_len = 6;
			     end;
			else atd_len = 200;


/*[4.0-2]*/
			call MOVE (file_table.cat_id_info, 28);

		     end;

	     end;

	if file_table.device = 5
	then do;
		atd_len = atd_len + 12;

		if file_table.catalogued < 2 | file_table.temp
		then ft_work = "work  ";
		if multics_mode = 5
		then ft_output_mode = " -cr ";

		ft_max_cra_size = file_table.max_cra_size;

		if file_table.block_desc = 1
		then ft_block_num = divide (file_table.block_max, ft_max_cra_size, 17, 0);
		if file_table.spanned_recs
		then do;
			ft_format = " s  ";
			ft_max_cra_size = ft_max_cra_size + 5;
		     end;
		else if file_table.variable
		then do;
			ft_format = " d  ";
			ft_max_cra_size = ft_max_cra_size + 4;
		     end;
		else ft_format = " f  ";

		if file_table.block_desc ^= 0
		then substr (ft_format, 3, 1) = "b";

		if file_table.open_out | file_table.open_ext | multics_mode = 5
		then ft_protect = " -rg ";
		if file_table.tape.protect
		then ft_protect = "";

		if file_table.tape.retain
		then ft_retain = " -ret all ";
		if file_table.tape.force
		then ft_force = " -fc ";

		if file_table.tape.density
		then ft_density_num = 1600;		/*[4.4-1]*/
		else if file_table.tape.den_6250
		then ft_density_num = 6250;

		if file_table.mult_position_no > 0
		then ft_position_num = file_table.mult_position_no;

		if file_table.block_desc = 0
		then ft_block_num = ft_max_cra_size;
		else if file_table.block_desc = 1
		then if file_table.spanned_recs
		     then ft_block_num = file_table.block_max;
		     else ft_block_num = ft_block_num * ft_max_cra_size;
		else ft_block_num = file_table.block_max * ft_max_cra_size;

		if file_table.output_mode < 5
		then do;
			go to o_m (file_table.output_mode);

o_m (1):
			om = " -gen ";		/* generation */
			go to omx;

o_m (2):
			om = " -mod ";		/* modification */
			go to omx;

o_m (3):
o_m (4):						/* replacement */
			call set_replacement_info;
			go to omx;

o_m (0):
omx:
		     end;

		if file_table.tape_device > 0
		then if file_table.tape_device = 1
		     then ft_device_num = file_table.tape_device_num;
		     else ;
		else ft_device_num = 1;

		if extend_sw
		then do;
			ft_extend = " -extend";
			ft_output_mode = "";	/* extend and create don't mix. */
		     end;

/*[5.3-1]*/
		if file_table.retention_info ^= "00000"
		then call set_retention_info;

/*[5.3-1]*/
		if file_table.catalogued = 2		/*[5.3-1]*/
		then if file_id = ""		/*[5.3-1]*/
		     then call set_file_id;		/*[5.3-1]*/
		     else ;			/*[5.3-1]*/
		else call set_file_id;

/*[5.3-1]*/
		atd_string = ft_work;

/*[5.3-1]*/
		if file_table.label_format = 1
		then call set_atd1;
		else call set_atd2;			/*[5.3-1]*/
		temp = length (atd_string);
		call ML (atd_charoff + 16 + atd_len, temp, addr (atd_string_loc -> vch.ch));
						/*[5.3-1]*/
		if file_table.org_qual ^= 5 & file_table.org_qual ^= 7 & file_table.label_format = 1
						/*[5.3-1]*/
		then handler = "tape_ansi_  ";	/*[5.3-1]*/
		else handler = "tape_ibm_  ";

/*[5.3-1]*/
		call ML (atd_charoff + 16, 12, addr (handler));
						/*[5.3-1]*/
		atd_len = atd_len + length (atd_string);

	     end;
	else do;

/*[3.0-3]*/
		if file_table.dupl_alt | extend_sw	/*[3.0-3]*/
		then do;
			if file_table.dupl_alt & extend_sw
						/*[3.0-3]*/
			then append_string = " -extend -dup_ok";
						/*[3.0-3]*/
			else /*[3.0-3]*/
			     if extend_sw		/*[3.0-3]*/
			then append_string = " -extend";
						/*[3.0-3]*/
			else append_string = " -dup_ok";
						/*[3.0-3]*/
						/*[3.0-3]*/
			append_size = length (append_string);
						/*[3.0-3]*/
			atd_len = atd_len + append_size;
						/*[3.0-3]*/
						/*[3.0-3]*/
			call ML (atd_charoff + atd_len + 20, append_size, addr (append_string_loc -> vch.ch));

/**/
		     end;

		call ML (atd_charoff + 16, 12, addr (vf));
		atd_len = atd_len + 12;

	     end;

	go to opx;





opx:						/* ATTACH THE IO-SWITCH VIA iox_$attach_iocb */
	temp = divide (atd_charoff, 4, 17, 0);
	call cobol_ioop_util$ldaldx5 (atd_len, temp);

	if file_table.ao_len > 0
	then temp = 14;				/* Unable to attach I/O switch with specified options */
	else if file_table.catalogued < 2
	then temp = 13;				/* Unable to attach I/O switch */
	else temp = 51;				/* - possible invalid catalogue-name */

	call opfin;
	go to cogx;

opfin:
     proc;

/* operator 34: attach_iocb */
	call cobol_call_op (34, attach_tag);		/*ATTACH_IOCB_OP*/

	ioerror.cobol_code = temp;
	call cobol_gen_ioerror (ft_ptr, ioerror_ptr);
	call cobol_define_tag (attach_tag);		/* OPEN THE FILE VIA iox_$open */
						/* OPERATOR37(check_file) */

	call cobol_call_op (37, open_tag1);		/*CHECK_NONCOBOL_OP*/

	if alt_output | cobol_mode = 59 | cobol_mode = 63 /* open output; close; then open update */
	then do;					/* OPERATOR36(open_close_file) */

		call cobol_call_op (36, open_tag2);	/*OPEN_OP output*/
		call cobol_gen_ioerror (ft_ptr, ioerror_ptr);


	     end;

	call cobol_define_tag (open_tag2);
	call cobol_set_fsbptr (ft_ptr);

	if (multics_mode = 6 & extend_sw = "1"b & file_table.device = 5)
	then multics_mode = 5;			/* [3.0-3] */
	if alt_output
	then multics_mode = 10;

	call cobol_ioop_util$open_clean_up (ft_ptr, cobol_mode, multics_mode);
						/* operator 35: open_file */
	call cobol_call_op (35, open_tag1);

	if alt_output | multics_mode = 10 | (multics_mode = 13 & cobol_mode < 48) | multics_mode = 7
	then do;					/* OPEN FILE VIA iox_$open FOR INDEXED_SEQUENTIAL_OUTPUT or DIRECT OUTPUT */

		temp = multics_mode - 1;
		if temp = 6
		then temp = 5;

/* CLOSE FILE VIA iox_$close */

		call cobol_ioop_util$set_stz;
		call cobol_set_fsbptr (ft_ptr);
		call cobol_ioop_util$open_clean_up (ft_ptr, cobol_mode, temp);

/* OPERATOR 29: close_op_file */

		call cobol_call_op (29, open_tag2);

	     end;

	call cobol_gen_ioerror (ft_ptr, ioerror_ptr);
	call cobol_define_tag (open_tag1);

/* [3.0-3] */
	if alt_sw					/* [3.0-3] */
	then do;
		call cobol_io_util$file_desc (file_table.file_desc_1_offset);

/* [3.0-3] */
		call cobol_call_op (78, 0);		/* [3.0-3] */
		call cobol_set_fsbptr (ft_ptr);	/* [3.0-3] */
	     end;

/* RECORD OPENING IN FSB RUN_UNIT CONTROL_SEG */

	if file_table.linage			/* LINAGE initialization */
	then do;
		call cobol_set_fsbptr (ft_ptr);
		call cobol_read_rand (1, file_table.linage_info, linage_ptr);

		stream_tag = cobol_$next_tag;
		cobol_$next_tag = cobol_$next_tag + 1;

		if linage_rec.body > 0
		then if linage_rec.body ^= 5
		     then call linage_init (linage_rec.body, 92 * 4);
		     else call cobol_ioop_util$set_fsb (linage_rec.body_int, 92);
		else do;
			linage_rec.body_int = 66;	/* default  should no reach this point. */
			linage_rec.body = 5;
			call cobol_ioop_util$set_fsb (linage_rec.body_int, 92);
		     end;

		if linage_rec.footing > 0
		then if linage_rec.footing ^= 5
		     then call linage_init (linage_rec.footing, 93 * 4);
		     else if linage_rec.footing_int = 0
		     then call cobol_ioop_util$set_fsb (linage_rec.body_int, 135);
		     else call cobol_ioop_util$set_fsb (linage_rec.footing_int, 93);
		else if linage_rec.body ^= 5
		then call linage_init (linage_rec.body, 93 * 4);
		else call cobol_ioop_util$set_fsb (linage_rec.body_int, 93);

		if linage_rec.top > 0
		then do;
			if linage_rec.top ^= 5
			then call linage_init (linage_rec.top, 94 * 4);
			else call cobol_ioop_util$set_fsb (linage_rec.top_int, 94);

			call cobol_alloc$stack (120, 2, buf_off);
			call cobol_ioop_util$disp (buf_off);
		     end;
		else call cobol_ioop_util$set_fsb (0, 94);

		if linage_rec.bottom > 0
		then if linage_rec.bottom ^= 5
		     then call linage_init (linage_rec.bottom, 95 * 4);
		     else call cobol_ioop_util$set_fsb (linage_rec.bottom_int, 95);
		else call cobol_ioop_util$set_fsb (0, 95);
						/* OPERATOR24(set_line_file_status) */
		call cobol_file_util$open (mp.pt2, 1);

	     end;					/* OPERATOR25(set_file_status) */
	else call cobol_file_util$open (mp.pt2, 0);

	call cobol_reg_manager$after_op (4095 + ioerror.cobol_code);
	call cobol_gen_ioerror$finish_up (ft_ptr, ioerror_ptr);

     end;

cogx:	/***.....	if Trace_Bit then call cobol_gen_driver_$Tr_End(cog);/**/
	return;


set_atd1:
     proc;					/* STANDARD LABELS */

/*[5.3-1]*/
	atd_string = atd_string || " -nm " || file_id;	/*[5.3-1]*/
	atd_string = atd_string || om;		/*[5.3-1]*/
	atd_string = atd_string || ft_retain || ft_force || ft_extend;
						/*[5.3-1]*/
	atd_string = atd_string || " -rec " || NUMS (ft_max_cra_size);
						/*[5.3-1]*/
	atd_string = atd_string || ft_output_mode;

/*[5.3-1]*/
	call set_atd;

     end;



set_atd2:
     proc;					/* NO LABELS */

/*[5.3-1]*/
	ft_format = " u ";				/*[5.3-1]*/
	call set_atd;

     end;



set_atd:
     proc;					/* initialize attach descr */

/*[5.3-1]*/
	if ft_expire ^= ""
	then atd_string = atd_string || " -exp " || ft_expire;

/*[5.3-1]*/
	atd_string = atd_string || " -fmt " || ft_format;

/*[5.3-1]*/
	if ft_protect ^= ""
	then atd_string = atd_string || ft_protect;

/*[5.3-1]*/
	atd_string = atd_string || " -den " || NUMS (ft_density_num);
						/*[5.3-1]*/
	atd_string = atd_string || " -nb " || NUMS (ft_position_num);
						/*[5.3-1]*/
	atd_string = atd_string || " -bk " || NUMS (ft_block_num);
						/*[5.3-1]*/
	atd_string = atd_string || " -dv " || NUMS (ft_device_num);

/*[5.3-1]*/
	if file_table.org_qual = 5
	then atd_string = atd_string || " -dos ";

     end;

ML:
     proc (off, len, str_loc);

/*[5.3-1]*/
dcl	(off, len)	fixed bin,
	str_loc		ptr;

/*[5.3-1]*/
dcl	str		char (1024) based (str_loc);

/*[5.3-1]*/
	call cobol_io_util$move_lit ("110"b, off, len, substr (str, 1, len));

     end;


get_info:
     proc (ch5);

/*[5.3-1]*/
dcl	ch5		char (5);

/*[5.3-1]*/
	call cobol_read_rand (1, ch5, fkey_ptr);

     end;

set_file_id:
     proc;					/* FILE-ID clause */

/*[5.3-1]*/
	if file_table.file_id_info = "00000"		/* not present */
						/*[5.3-1]*/
	then do;
		if file_table.mult_position_no = 0	/*[5.3-1]*/
		then file_id = f_ifn;		/*[5.3-1]*/
		else file_id = f_nm;

/*[5.3-1]*/
		return;				/*[5.3-1]*/
	     end;

/*[5.3-1]*/
	call get_info (file_table.file_id_info);

/*[5.3-1]*/
	if file_key.key_type = 113			/* literal */
						/*[5.3-1]*/
	then do;
		file_id = substr (file_key.name, 1, file_key.name_size);

/*[5.3-1]*/
		return;				/*[5.3-1]*/
	     end;

     end;

set_retention_info:
     proc;					/* RETENTION cluse */

/*[5.3-1]*/
dcl	tm		fixed bin (71);		/*[5.3-1]*/
dcl	dt		char (32);

/*[5.3-1]*/
	call get_info (file_table.retention_info);

/*[5.3-1]*/
	if file_key.key_type = 114			/* literal */
						/*[5.3-1]*/
	then do;
		tm = clock_ ();

/*[5.3-1]*/
		tm = tm + 24 * 3600 * 1000000 * fixed (substr (file_key.name, 1, file_key.name_size));

/*[5.3-1]*/
		call date_time_ (tm, dt);		/*[5.3-1]*/
		ft_expire = substr (dt, 1, 9);	/*[5.3-1]*/
	     end;

     end;

set_replacement_info:
     proc;					/* REPLACEMENT phrase */

/*[5.3-1]*/
	om = " -rpl ";

/*[5.3-1]*/
	if file_table.replacement_info = "00000"	/* no phrase */
						/*[5.3-1]*/
	then do;
		ft_output_mode = f_ifn;		/*[5.3-1]*/
		return;				/*[5.3-1]*/
	     end;

/*[5.3-1]*/
	call get_info (file_table.replacement_info);

/*[5.3-1]*/
	if file_key.key_type = 109			/* literal */
						/*[5.3-1]*/
	then do;
		ft_output_mode = substr (file_key.name, 1, file_key.name_size);
						/*[5.3-1]*/
		return;				/*[5.3-1]*/
	     end;

     end;

cv:
     proc (fch_loc, sz, vch_loc);			/* convert to char varying */

/*[5.3-1]*/
dcl	(fch_loc, vch_loc)	ptr,
	(i, sz)		fixed bin;

/*[5.3-1]*/
dcl	fch		char (2048) based (fch_loc);	/*[5.3-1]*/
dcl	vch		char (2048) varying based (vch_loc);

/*[5.3-1]*/
	do i = sz by -1 to 1;

/*[5.3-1]*/
	     if substr (fch, i, 1) ^= " "		/*[5.3-1]*/
	     then do;
		     vch = substr (fch, 1, i);	/*[5.3-1]*/
		     return;			/*[5.3-1]*/
		end;

/*[5.3-1]*/
	end;

/*[5.3-1]*/
	vch = "";

     end;

test_cata_name:
     proc;					/* test for ` in cata name (obsolete) */

/*[5.3-1]*/
dcl	(l, i)		fixed bin;

/*[5.3-1]*/
	l = length (cata_name);
	if l = 0
	then return;				/*[5.3-1]*/
	i = index (cata_name, "`");
	if i = 0
	then return;

/*[5.3-1]*/
	if i = l					/*[5.3-1]*/
	then do;
		if l = 1				/*[5.3-1]*/
		then cata_name = "";		/*[5.3-1]*/
		else cata_name = substr (cata_name, 1, l - 1);

/*[5.3-1]*/
		return;				/*[5.3-1]*/
	     end;

/*[5.3-1]*/
	if i = 1					/*[5.3-1]*/
	then do;
		file_id = substr (cata_name, 2);	/*[5.3-1]*/
		cata_name = "";

/*[5.3-1]*/
		return;				/*[5.3-1]*/
	     end;

/*[5.3-1]*/
	file_id = substr (cata_name, i + 1);		/*[5.3-1]*/
	cata_name = substr (cata_name, 1, i - 1);

     end;

linage_init:
     proc (index_value, fsb_offset);

dcl	index_value	fixed bin (15);
dcl	fsb_offset	fixed bin;

	addr (fkey_type9.file_key_info) -> file_key_desc = linage_rec.name_desc (index_value);

	mpout.n = 4;
	mpout.pt1 = mp.pt1;
	mpout.pt2 = addr (fkey_type9);
	mpout.pt3 = addr (comp6_type9);

	comp6_type9.size, comp6_type9.places_left = 4;
	comp6_type9.seg = 5001;			/* TO PR1 */
	comp6_type9.off = file_table.fsb.off + fsb_offset;

	mpout.pt4 = addr (type19);

	call cobol_move_gen (addr (mpout));
	return;

     end linage_init;

MOVE:
     proc (ch5, offset);

/*[4.0-2]*/
declare	ch5		char (5),
	offset		fixed bin;		/*[4.0-2]*/
declare	p		ptr;

/*[4.0-2]*/
declare	1 desc		based (p),		/*[4.0-2]*/
	  2 linkage	fixed bin,		/*[4.0-2]*/
	  2 file_num	fixed bin,		/*[4.0-2]*/
	  2 size_rtn	fixed bin,		/*[4.0-2]*/
	  2 item_length	fixed bin (24),		/*[4.0-2]*/
	  2 places_left	fixed bin,		/*[4.0-2]*/
	  2 places_right	fixed bin;

/*[4.0-2]*/
	call cobol_read_rand (1, ch5, fkey_ptr);

/*[4.0-2]*/
	mpout.n = 4;				/*[4.0-2]*/
	mpout.pt1 = mp.pt1;				/*[4.0-2]*/
	mpout.pt2 = addr (catid_type9);		/*[4.0-2]*/
	mpout.pt3 = addr (atd_type9);			/*[4.0-2]*/
	mpout.pt4 = addr (type19);

/*[4.0-2]*/
	unspec (catid_type9.file_key_info) = unspec (file_key.desc);
						/*[4.0-2]*/
	mpout.pt3 -> data_name.offset = atd_charoff + offset;

/*[4.0-2]*/
	call cobol_move_gen (addr (mpout));

/*[4.0-2]*/
	p = addr (file_key.desc);			/*[5.1-1]*/
	key_sz = desc.item_length;

     end;

NUMS:
     proc (v) returns (char (13) var);

declare	v		fixed bin;		/*[3.0-2]*/
declare	ioa_$rsnnl	entry options (variable);	/*[3.0-2]*/
declare	S		char (13) varying,
	len		fixed bin;		/*[3.0-2]*/

	call ioa_$rsnnl ("^d", S, len, v);		/*[3.0-2]*/

	return (substr (S, 1, len));			/*[3.0-2]*/

     end;

/*[5.3-1]*/
dcl	1 vch		based,			/*[5.3-1]*/
	  2 sz		fixed bin (35),		/*[5.3-1]*/
	  2 ch		char (1);

	/***.....	dcl cog char(14) init("COBOL_OPEN_GEN");/**/

	/***.....	dcl cobol_gen_driver_$Tr_Beg entry(char(*));/**/
	/***.....	dcl cobol_gen_driver_$Tr_End entry(char(*));/**/

	/***.....	dcl Trace_Bit bit(1) static external;/**/
	/***.....	dcl Trace_Lev fixed bin static external;/**/
	/***.....	dcl Trace_Line char(36) static external;/**/
	/***.....	dcl ioa_ entry options(variable); /**/




/* STATIC DECLARATIONS */

dcl	1 basic_arg	static,
	  2 pt		ptr init (null ()),		/* initialized to address of basic structure */
	  2 zeros		bit (144) init (""b);
dcl	1 name_arg	static,
	  2 pt		ptr init (null ()),		/* set each time to pt to varying char string containing name of program to be called */
	  2 type		fixed bin init (6),
	  2 zeros		bit (108) init (""b);
dcl	1 temp_arg	static,
	  2 pt		ptr init (null ()),		/* always null */
	  2 type		fixed bin init (3),
	  2 zeros		bit (108) init (""b);
dcl	1 value_arg	static,
	  2 pt		ptr init (null ()),		/* always null */
	  2 type		fixed bin init (1),
	  2 zeros		bit (108) init (""b);
dcl	1 upper_value_arg	static,
	  2 pt		ptr init (null ()),		/* always null */
	  2 type		fixed bin init (2),
	  2 zeros		bit (108) init (""b);
dcl	1 status_arg	static,
	  2 pt		ptr init (null ()),		/* always null */
	  2 type		fixed bin init (3),
	  2 off1		fixed bin init (40),
	  2 zeros		bit (72) init (""b);

dcl	1 pr1_struct	static,
	  2 pr1		fixed bin init (1),
	  2 pointer_no	bit (3),
	  2 lock		fixed bin init (0),
	  2 switch	fixed bin init (0),
	  2 segno		fixed bin,
	  2 offset	fixed bin,
	  2 reset		fixed bin;
dcl	1 x5_struct	static,
	  2 x5		fixed bin init (15),
	  2 reg_no	bit (4),
	  2 lock		fixed bin init (0),
	  2 already_there	fixed bin,
	  2 contains	fixed bin init (0),
	  2 null_ptr	ptr init (null ()),
	  2 fill		bit (18) unaligned init ((18)"0"b),
	  2 literal	bit (18) unaligned;
dcl	1 aq_struct	static,
	  2 aq		fixed bin init (3),
	  2 reg_no	bit (4),
	  2 lock		fixed bin init (0),
	  2 already_there	fixed bin,
	  2 contains	fixed bin init (0),
	  2 null_ptr	ptr init (null ()),
	  2 fill		bit (18) unaligned init ((18)"0"b),
	  2 literal	bit (18) unaligned;

dcl	1 basic_struct	static,
	  2 type		fixed bin init (1),
	  2 operand_no	fixed bin init (0),
	  2 lock		fixed bin init (0),
	  2 seg		fixed bin,
	  2 offset	fixed bin,
	  2 send_receive	fixed bin init (0);
dcl	1 atd_type9	static,
	  2 header	(4) fixed bin init (112, 0, 0, 9),
	  2 repl_ptr	(2) ptr init ((2) null ()),
	  2 fill1		bit (108) init (""b),
	  2 file_key_info,
	    3 fb		(6) fixed bin init (0, 0, 0, 200, 0, 0),
	    3 flags1	bit (36) init ("000000100100000000010000000100000000"b),
	    3 flags2	bit (36) init (""b),
	    3 seg		fixed bin init (1000),
	    3 off		fixed bin,
	  2 fill2		(7) fixed bin init (0, 0, 0, 0, 0, 0, 0);
dcl	1 catid_type9	static,
	  2 header	(4) fixed bin init (112, 0, 0, 9),
	  2 repl_ptr	(2) ptr init ((2) null ()),
	  2 fill1		bit (108) init (""b),
	  2 file_key_info,
	    3 fb		(6) fixed bin init (0, 0, 0, 0, 0, 0),
	    3 flags1	bit (36) init (""b),
	    3 flags2	bit (36) init (""b),
	    3 seg		fixed bin,
	    3 off		fixed bin,
	  2 fill2		(7) fixed bin init (0, 0, 0, 0, 0, 0, 0);
dcl	1 comp6_type9	static,
	  2 header	(4) fixed bin init (112, 0, 0, 9),
	  2 repl_ptr	(2) ptr init ((2) null ()),
	  2 fill1		bit (108) init (""b),
	  2 file_key_info,
	    3 fb1		(3) fixed bin init (0, 0, 0),
	    3 size	fixed bin init (0),
	    3 places_left	fixed bin,
	    3 places_right	fixed bin init (0),
	    3 flags1	bit (36) init ("010000100100001001000000000000000000"b),
	    3 flags2	bit (36) init (""b),
	    3 seg		fixed bin init (0),
	    3 off		fixed bin,
	  2 fill2		(7) fixed bin init (0, 0, 0, 0, 0, 0, 0);
dcl	1 fkey_type9	static,
	  2 header	(4) fixed bin init (112, 0, 0, 9),
	  2 repl_ptr	(2) ptr init ((2) null ()),
	  2 fill1		bit (108) init (""b),
	  2 file_key_info,
	    3 fb1		(3) fixed bin init (0, 0, 0),
	    3 size	fixed bin init (0),
	    3 fb2		(2) fixed bin init (0, 0),
	    3 flags1	bit (36) init (""b),
	    3 flags2	bit (36) init (""b),
	    3 seg		fixed bin,
	    3 off		fixed bin,
	  2 fill2		(7) fixed bin init (0, 0, 0, 0, 0, 0, 0);
dcl	1 type19		static,
	  2 wd0		fixed bin init (38),
	  2 wd1		fixed bin init (0),
	  2 wd2		fixed bin init (0),
	  2 wd3		fixed bin init (19),
	  2 wd4		fixed bin init (18),	/* verb number */
	  2 e		fixed bin init (1),		/* one operand after TO */
	  2 h		fixed bin,
	  2 j		fixed bin,
	  2 a		bit (3),
	  2 b		bit (1),
	  2 c		bit (1),
	  2 d		bit (2),
	  2 f		bit (2),
	  2 g		bit (2),
	  2 k		bit (5);

dcl	1 ioerror		static,
	  2 cobol_code	fixed bin,
	  2 retry_tag	fixed bin,
	  2 is_tag	fixed bin,
	  2 ns_tag	fixed bin,
	  2 type1_ptr	ptr,
	  2 mode		fixed bin;

dcl	unique_bits_vstring char (12) varying static init ("unique_bits_");
dcl	unique_chars_vstring
			char (13) varying static init ("unique_chars_");
dcl	get_pdir_vstring	char (9) varying static init ("get_pdir_");


/* EXTERNAL ENTRY NAMES */

dcl	cobol_ioop_util$set_stz
			entry;
dcl	cobol_make_tagref	entry (fixed bin, fixed bin, ptr);
dcl	cobol_ioop_util$disp
			entry (fixed bin);
dcl	cobol_ioop_util$lda entry (fixed bin);
dcl	cobol_ioop_util$tra entry (fixed bin);
dcl	cobol_ioop_util$open_clean_up
			entry (ptr, fixed bin, fixed bin);
dcl	cobol_ioop_util$ldaldx5
			entry (fixed bin, fixed bin);
dcl	cobol_ioop_util$set_fsb
			entry (fixed bin (31), fixed bin);
dcl	cobol_gen_ioerror	entry (ptr, ptr);
dcl	cobol_gen_ioerror$finish_up
			entry (ptr, ptr);
dcl	cobol_call_op	entry (fixed bin, fixed bin);
dcl	cobol_reg_manager$after_op
			entry (fixed bin);
dcl	cobol_set_fsbptr	entry (ptr);
dcl	cobol_alloc$stack	entry (fixed bin, fixed bin, fixed bin);
dcl	cobol_read_ft	entry (fixed bin, ptr);
dcl	cobol_read_rand	entry (fixed bin, char (5), ptr);
dcl	cobol_define_tag	entry (fixed bin);
dcl	cobol_iomode	entry (ptr, ptr, fixed bin, fixed bin, bit (1) aligned);

/* sub-generators */
dcl	cobol_move_gen	entry (ptr);
dcl	cobol_file_util$open
			entry (ptr, fixed bin);
dcl	cobol_io_util$move_lit
			entry (bit (3) aligned, fixed bin, fixed bin, char (*));
dcl	cobol_iocall	entry (ptr, ptr);
dcl	cobol_io_util$move	entry (bit (3) aligned, fixed bin, fixed bin, bit (3) aligned, fixed bin, fixed bin);
dcl	cobol_io_util$file_desc
			entry (fixed bin (24));
dcl	cobol_open_util$make_pdir_path
			entry (fixed bin, fixed bin, fixed bin, fixed bin);

/* BUILTIN FUNCTIONS */

/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;





%include cobol_file_table;
%include cobol_file_key;
%include cobol_linage_rec;
%include cobol_type1;
%include cobol_type9;
%include cobol_type12;
%include cobol_type19;
%include cobol_fixed_common;
%include cobol_ext_;
%include cobol_;

     end cobol_open_gen;
