/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_merge_gen.pl1 Added Trace statements.
                                                   END HISTORY COMMENTS */


/* Modified on 01/20/85 by FCH, [5.3...], trace added */
/* Modified on 10/19/84 by FCH, [5.3-1], BUG563(phx18381), new cobol_addr_tokens.incl.pl1 */
/* Modified on 11/20/76 by Bob Chang to cooperate with alphabet_name token.	*/
/* Modified on 11/15/76 by Bob Chang to cooperate with sort statement for setting static data.	*/
/* Created on 10/11/76 by Bob Chang for merge statemnet. */







/* format: style3 */
cobol_merge_gen:
     proc (in_token_ptr);				/*  Code and relocation sequences.		*/

dcl	1 pr_struc	static,
	  2 what_ptr	fixed bin,
	  2 pointer_no	bit (3),
	  2 lock		fixed bin init (1),
	  2 switch	fixed bin init (0);
dcl	1 alpha_type9	static,
	  2 header	(4) fixed bin init (112, 0, 0, 9),
	  2 repl_ptr	(2) ptr init ((2) null ()),
	  2 fill1		bit (108) init (""b),
	  2 file_key_info,
	    3 fb1		(3) fixed bin init (0, 0, 0),
	    3 size	fixed bin init (0),
	    3 fb2		(2) fixed bin init (0, 0),
	    3 flags1	bit (36) init ("000000100100000000010000000100000000"b),
	    3 flags2	bit (36) init (""b),
	    3 seg		fixed bin init (0),
	    3 off		fixed bin,
	  2 fill2		(7) fixed bin init (0, 0, 0, 0, 0, 0, 0);
dcl	an_type9_based	char (112) based (addr (an_type9));
dcl	an_type9_init_based char (112) based (addr (an_type9_init));
dcl	1 an_type9_init	static,
	  2 header	(4) fixed bin init (112, 0, 0, 9),
	  2 repl_ptr	(2) ptr init ((2) null ()),
	  2 fill1		bit (108) init (""b),
	  2 file_key_info,
	    3 fb1		(3) fixed bin init (0, 0, 0),
	    3 size	fixed bin init (0),
	    3 fb2		(2) fixed bin init (0, 0),
	    3 flags1	bit (36) init ("000000100100000000010000000100000000"b),
	    3 flags2	bit (36) init (""b),
	    3 seg		fixed bin init (0),
	    3 off		fixed bin,
	  2 fill2		(7) fixed bin init (0, 0, 0, 0, 0, 0, 0);
dcl	1 an_type9,
	  2 header	(4) fixed bin,
	  2 repl_ptr	(2) ptr,
	  2 fill1		bit (108),
	  2 file_key_info,
	    3 fb1		(3) fixed bin,
	    3 size	fixed bin,
	    3 fb2		(2) fixed bin,
	    3 flags1	bit (36),
	    3 flags2	bit (36),
	    3 seg		fixed bin,
	    3 off		fixed bin,
	  2 fill2		(7) fixed bin;
dcl	1 alpha_type9_based based,
	  2 header	(4) fixed bin,
	  2 repl_ptr	(2) ptr,
	  2 fill1		bit (108),
	  2 file_key_info,
	    3 fb1		(3) fixed bin,
	    3 size	fixed bin,
	    3 fb2		(2) fixed bin,
	    3 flags1	bit (36),
	    3 flags2	bit (36),
	    3 seg		fixed bin,
	    3 off		fixed bin,
	  2 fill2		(7) fixed bin;
dcl	1 type19_out	static,
	  2 header	(4) fixed bin init (38, 0, 0, 19),
	  2 verb		fixed bin init (0),
	  2 e		fixed bin init (0),
	  2 h		fixed bin init (0),
	  2 ij		(2) fixed bin init (0, 0),
	  2 abcdfgk	bit (16) init ("0000001000000000"b);
dcl	1 type19		static,
	  2 header	(4) fixed bin init (38, 0, 0, 19),
	  2 verb		fixed bin init (0),
	  2 e		fixed bin init (0),
	  2 h		fixed bin init (0),
	  2 ij		(2) fixed bin init (0, 0),
	  2 abcdfgk	bit (16) init ("0000000000000000"b);
dcl	1 return_type19	static,
	  2 header	(4) fixed bin init (38, 0, 0, 19),
	  2 verb		fixed bin init (0),
	  2 e		fixed bin init (0),
	  2 h		fixed bin init (0),
	  2 ij		(2) fixed bin init (0, 0),
	  2 abcdfgk	bit (16) init ("0000000000000000"b);
dcl	1 type19_read_into	static,
	  2 header	(4) fixed bin init (38, 0, 0, 19),
	  2 verb		fixed bin init (0),
	  2 e		fixed bin init (0),
	  2 h		fixed bin init (0),
	  2 ij		(2) fixed bin init (0, 0),
	  2 abcdfgk	bit (16) init ("0011000000000000"b);
dcl	1 type19_read	static,
	  2 header	(4) fixed bin init (38, 0, 0, 19),
	  2 verb		fixed bin init (0),
	  2 e		fixed bin init (0),
	  2 h		fixed bin init (0),
	  2 ij		(2) fixed bin init (0, 0),
	  2 abcdfgk	bit (16) init ("0010000000000000"b);
dcl	stz_inst		(2) bit (18) static init ("110000000000000000"b, "100101000001000000"b);
						/* stz	pr6|tree(i)	*/


dcl	spr		(2) bit (18) static init ("110000000000000000"b, "010101001101000000"b);
						/* spri1	pr6|record_ptr(i)	*/
dcl	tra_inst		(2) bit (18) static init ("000000000000000000"b, "111001000000000100"b);
						/* tra	0,ic	*/

dcl	instr_seq7	(14) bit (18) static init ("000000000000000000"b, "000000000000000000"b,
						/* descr_relp_offset. */
			"000000000000000000"b, "000000000000000000"b, "000000000000000000"b, "110010111000000000"b,
						/* eax7	0	*/
			"111000000000101000"b, "011101010001010000"b,
						/* epp2	pr7|40,* 	*/
			"010000000000000110"b, "011101010101010000"b,
						/* epbp2	pr2|6,*	*/
			"010000000000001010"b, "010111010001000000"b,
						/* tsp2	pr2|10	*/
			"000000000000000000"b, "000000000000000000"b);
						/* no symbol table for compare routine. */
dcl	rel_seq7		(14) bit (5) aligned static
			init ("10000"b, "00000"b, "10101"b, "00000"b, "00000"b, "00000"b, "00000"b, "00000"b,
			"00000"b, "00000"b, "00000"b, "00000"b, "00000"b, "00000"b);
dcl	instr_seq8	(2) bit (18) static init ("000000000000000011"b, "111001000001000000"b);
						/* tra	pr0|3	*/

dcl	epp_inst		(4) bit (18) static init ("000000000000000000"b, "011101010000000100"b,
						/* epp2	open_tag(i+1),ic	*/
			"110000000000000000"b, "010101010001000000"b);
						/* spri2	pr6|ret_off	*/
dcl	ret_inst		(2) bit (18) static init ("110000000000000000"b, "111001000001010000"b);
						/* tra	pr6|ret_off,*	*/
dcl	instr_seq11	(10) bit (18) static init ("000000000000000011"b, "110000010000000100"b,
						/* tnc 	3,ic	*/
			"000000100000010011"b, "010011110001000000"b,
						/* ldq pr0|2048+23 for -2 */
			"111000000000000110"b, "111101110001010000"b,
						/* stq	pr7|6,*	*/
			"111000000000000110"b, "000101100001010000"b,
						/* aos	pr7|6,*	*/
			"000000000000000000"b, "111001000000000100"b);
						/* tra	0,ic	*/
dcl	1 merge_in_token	static,
	  2 n		fixed bin init (3),
	  2 code		fixed bin init (0),
	  2 pt1		ptr,
	  2 pt2		ptr,
	  2 pt3		ptr;
dcl	1 read_in_token	static,
	  2 n		fixed bin init (3),
	  2 code		fixed bin init (0),
	  2 pt1		ptr,
	  2 pt2		ptr,
	  2 pt3		ptr;
dcl	1 read_into_token	static,
	  2 n		fixed bin init (4),
	  2 code		fixed bin init (0),
	  2 pt1		ptr,
	  2 pt2		ptr,
	  2 pt3		ptr,
	  2 pt4		ptr;
dcl	1 return_in_token	static,
	  2 n		fixed bin init (4),
	  2 code		fixed bin init (0),
	  2 pt1		ptr,
	  2 pt2		ptr,
	  2 pt3		ptr,
	  2 pt4		ptr;
dcl	1 close_in_token	static,
	  2 n		fixed bin init (3),
	  2 code		fixed bin init (0),
	  2 pt1		ptr,
	  2 pt2		ptr,
	  2 pt3		ptr;
dcl	1 open_in_token	static,
	  2 n		fixed bin init (3),
	  2 code		fixed bin init (0),
	  2 pt1		ptr,
	  2 pt2		ptr,
	  2 pt3		ptr;
dcl	1 open_out_token	static,
	  2 n		fixed bin init (3),
	  2 code		fixed bin init (0),
	  2 pt1		ptr,
	  2 pt2		ptr,
	  2 pt3		ptr;
dcl	1 write_in_token	static,
	  2 n		fixed bin init (3),
	  2 code		fixed bin init (0),
	  2 pt1		ptr,
	  2 pt2		ptr,
	  2 pt3		ptr;

dcl	file_ptr		(256) ptr,
	read_tag		(256) fixed bin,
	bgn_tag		fixed bin,
	open_tag		(256) fixed bin,
	end_tag		fixed bin,
	not_end_tag	fixed bin,
	file_n		fixed bin static,		/* no of using files */
	key_n		fixed bin static;		/* no of keys. */

dcl	mvt_ptr		ptr,
	mvt_table		char (512) based (mvt_ptr),
	to_offset		fixed bin;		/*
Automatic data		*/

dcl	workpt2		ptr,			/* work pointer */
	last_token	fixed bin,
	ft_ptr		ptr,			/* pointer to the type 12 token */
	merge_file_ptr	ptr,			/* pointer to the type 12 token */
	merge_gen_ptr	ptr,
	ret_off		fixed bin,
	line_temp		fixed bin,
	compare_hold_ic	fixed bin,
	hold_addr		bit (18) based,
	desc_off		(3) fixed bin,
	desc_ptr		ptr,
	object_name_len	fixed bin,
	name_ptr		ptr,
	object_name	char (32),
	first_call	fixed bin static init (0),
	merge_stack_off	fixed bin static init (0),	/* returned value of cobol_alloc$stack */
	temp		fixed bin,
	merge_gen_text_wd_off
			fixed bin,
	alphabet_flag	fixed bin,
	retry_tag		fixed bin,
	passed_tag	fixed bin,
	passed_tag1	fixed bin,
	k		fixed bin,
	i		fixed bin,		/* work variable */
	j		fixed bin,
	l		fixed bin,
	linkoff		fixed bin;		/* word offset of entry point link */
dcl	dn_ptr		ptr,			/* pointer to the type 9 token */
	alpha_ptr		ptr;
dcl	in_buff		char (24),		/*input struc buffer */
	inst_buff		char (8),			/* inst_struc buffer */
	reloc_buff	char (8);			/* reloc_struc bufer  */
dcl	bit18		bit (18) based;



dcl	temp_type12	char (60) static,
	temp_file_ptr	ptr static,
	temp_type12_ptr	ptr static,
	temp_type9_ptr	ptr static;




/*	Procedures Called		*/


dcl	cobol_compare_gen$sort
			entry (ptr, ptr),
	cobol_addr	entry (ptr, ptr, ptr),
	cobol_write_gen	entry (ptr, fixed bin),
	cobol_open_gen	entry (ptr),
	cobol_close_gen	entry (ptr),
	cobol_read_gen	entry (ptr, fixed bin),
	cobol_def_util	entry (fixed bin, char (32), fixed bin, ptr, fixed bin, ptr, ptr),
	cobol_sort_util	entry (ptr, ptr, char (32), fixed bin),
	cobol_emit	entry (ptr, ptr, fixed bin),
	cobol_alloc$stack	entry (fixed bin, fixed bin, fixed bin),
	cobol_pointer_register$priority
			ext entry (fixed bin, fixed bin, bit (3)),
	cobol_pointer_register$get
			ext entry (ptr),
	cobol_call_op	entry (fixed bin, fixed bin),
	cobol_define_tag	entry (fixed bin),
	cobol_reg_manager$after_op
			entry (fixed bin),
	cobol_pool	entry (char (*), fixed bin, fixed bin),
	cobol_define_tag_nc entry (fixed bin, fixed bin),
	cobol_make_tagref	entry (fixed bin, fixed bin, ptr),
	cobol_read_ft	entry (fixed bin, ptr),
	cobol_make_merge_file
			entry (ptr, ptr, ptr, ptr);

start:	/***.....	if Trace_Bit then call cobol_gen_driver_$Tr_Beg(MY_NAME);/**/
	eos_ptr = in_token.token_ptr (1);

	if end_stmt.type = 19
	then do;
		if end_stmt.h = 91
		then go to mex;
		else if end_stmt.h = 90
		then do;
			close_in_token.pt2 = temp_type12_ptr;
			call cobol_close_gen (addr (close_in_token));

			go to mex;
		     end;

		go to mex;
	     end;

	eos_ptr = in_token.token_ptr (in_token.n);

	if end_stmt.h = 92
	then do;
		call giving;
		go to mex;
	     end;

	merge_file_ptr = in_token.token_ptr (2);
	desc_ptr = addr (desc_off (1));
	file_n = end_stmt.i;
	key_n = end_stmt.e;

	if first_call ^= cobol_$compile_count
	then do;
		first_call = cobol_$compile_count;
		i = 16 * (file_n + 2);
		call cobol_alloc$stack (i, 2, merge_stack_off);
		cobol_$init_stack_off = cobol_$stack_off;
	     end;

	input_ptr = addr (in_buff);
	inst_ptr = addr (inst_buff);
	reloc_ptr = addr (reloc_buff);

	call initiate;
	alpha_name_ptr = null ();

	if end_stmt.d ^= "00"b
	then do;

		alphabet_flag = 1;
		alpha_name_ptr = in_token.token_ptr (key_n + 3);
		if alphabet_name.iw_key = 11
		then do;				/* ascii */
			alpha_name_ptr = null ();
			goto continue;
		     end;
		if alphabet_name.iw_key = 0
		then do;
			mvt_ptr = addr (alphabet_name.table);
			call cobol_pool (mvt_table, 2, to_offset);
			alphabet_name.offset = to_offset * 4;
			alphabet_name.segno = 3000;
		     end;
	     end;
	else alphabet_flag = 0;

/* CODE for internal procedure building  */

continue:
	dn_ptr = addr (alpha_type9);

	passed_tag = cobol_$next_tag;
	passed_tag1 = cobol_$next_tag + 1;
	cobol_$next_tag = cobol_$next_tag + 2;
	substr (instr_seq7 (3), 1, 18) = substr (cobol_$text_base_ptr -> bit18, 1, 18);
	call cobol_emit (addr (tra_inst), null (), 1);
	text_ptr = addrel (cobol_$text_base_ptr, cobol_$text_wd_off);

	call cobol_sort_util (merge_file_ptr, desc_ptr, object_name, object_name_len);
	call cobol_def_util (3, object_name, object_name_len, text_ptr, 0, desc_ptr, in_token_ptr);

	entry_seq.flags.function = "1"b;
	instr_seq7 (1) = entry_seq.descr_relp_offset;
	instr_seq7 (3) = entry_seq.def_relp;
	instr_seq7 (4) = string (entry_seq.flags);
	call cobol_emit (addr (instr_seq7 (1)), addr (rel_seq7 (1)), 7);

	merge_gen_text_wd_off = cobol_$text_wd_off - 5;
	call cobol_make_tagref (passed_tag, cobol_$text_wd_off - 8, null ());

	call cobol_call_op (19, 0);

/* Lock the pointer register 1 2 and 7	*/

	pr_struc.what_ptr = 7;
	call cobol_pointer_register$get (addr (pr_struc));

	pr_struc.what_ptr = 1;
	call cobol_pointer_register$get (addr (pr_struc));

	pr_struc.what_ptr = 2;
	call cobol_pointer_register$get (addr (pr_struc));

/*  INSERT compare code */

	last_token = key_n + 2;

	do i = 3 to last_token;

	     merge_in_token.pt1 = in_token.token_ptr (i);
	     merge_in_token.pt2 = addr (alpha_type9);
	     alpha_type9 = merge_in_token.pt1 -> alpha_type9_based;
	     merge_in_token.pt3 = addr (type19);
	     type19.e = 102;			/* EQUAL */
	     merge_in_token.pt2 -> data_name.seg_num = 5002;
	     merge_in_token.pt1 -> data_name.seg_num = 5001;

	     if data_name.numeric = "0"b
	     then do;				/* switch compare  operands around */
		     workpt2 = merge_in_token.pt2;
		     merge_in_token.pt2 = merge_in_token.pt1;
		     merge_in_token.pt1 = workpt2;
		end;

	     type19.h = cobol_$next_tag;
	     cobol_$next_tag = cobol_$next_tag + 1;

	     call cobol_compare_gen$sort (addr (merge_in_token), alpha_name_ptr);

	     if data_name.ad_bit = "0"b
	     then substr (instr_seq11 (2), 7, 3) = "011"b;/* make TRC */
	     if data_name.numeric = "1"b
	     then substr (instr_seq11 (2), 7, 3) = "100"b;/* make TMI */
	     if data_name.numeric = "1"b & data_name.ad_bit = "0"b
	     then substr (instr_seq11 (2), 7, 3) = "101"b;/* make TPL */

	     temp = fixed (op_con.zero_con, 18) - 2;
	     instr_seq11 (3) = substr (unspec (temp), 19, 18);

	     if i ^= last_token
	     then do;
		     call cobol_emit (addr (instr_seq11 (1)), null (), 5);
		     call cobol_make_tagref (passed_tag1, cobol_$text_wd_off - 1, null ());
		     call cobol_define_tag_nc (type19.h, cobol_$text_wd_off);
		end;
	     else call cobol_emit (addr (instr_seq11 (1)), null (), 4);

	     substr (instr_seq11 (2), 7, 3) = "010"b;	/* reset */
	end;

	call cobol_pointer_register$priority (2, 0, "001"b);
	call cobol_pointer_register$priority (2, 0, "010"b);
	call cobol_pointer_register$priority (2, 0, "111"b);

	call cobol_define_tag (type19.h);
	call cobol_define_tag (passed_tag1);
	call cobol_emit (addr (instr_seq8 (1)), null (), 1);

	temp = cobol_$stack_off + 16;
	substr (unspec (temp), 33, 4) = "0000"b;
	merge_gen_ptr = addrel (cobol_$text_base_ptr, merge_gen_text_wd_off);
	substr (merge_gen_ptr -> bit18, 1, 18) = substr (unspec (temp), 19, 18);
	call cobol_define_tag (passed_tag);

/*	open and read the using files */

	open_out_token.pt3 = addr (type19_out);
	open_out_token.pt1 = in_token.token_ptr (1);
	close_in_token.pt3 = addr (type19);
	close_in_token.pt1 = in_token.token_ptr (1);
	write_in_token.pt3 = addr (type19);
	write_in_token.pt1 = in_token.token_ptr (1);
	open_in_token.pt1 = in_token.token_ptr (1);
	open_in_token.pt3 = addr (type19);
	read_in_token.pt1 = in_token.token_ptr (1);
	return_in_token.pt1 = in_token.token_ptr (1);
	return_in_token.pt2 = in_token.token_ptr (2);
	return_in_token.pt4 = addr (return_type19);
	read_in_token.pt3 = addr (type19_read);
	read_into_token.pt4 = addr (type19_read_into);
	read_into_token.pt1 = in_token.token_ptr (1);

	if alphabet_flag = 0
	then k = key_n + 1;
	else k = key_n + 2;

	j = merge_stack_off + 2 * file_n - 1;

/*	set up return address for return statement. */

	open_tag (1) = cobol_$next_tag;
	cobol_$next_tag = cobol_$next_tag + 1;
	ret_off = merge_stack_off + 4 * file_n + 4;
	substr (epp_inst (3), 4, 15) = substr (unspec (ret_off), 22, 15);
	substr (ret_inst (1), 4, 15) = substr (unspec (ret_off), 22, 15);

	do i = 1 to file_n;

/* set return address for return statement */

	     open_tag (i + 1) = cobol_$next_tag;
	     read_tag (i) = cobol_$next_tag + 1;
	     passed_tag = cobol_$next_tag + 2;
	     cobol_$next_tag = cobol_$next_tag + 3;

	     call cobol_define_tag (open_tag (i));
	     call cobol_emit (addr (epp_inst (1)), null (), 2);
	     call cobol_make_tagref (open_tag (i + 1), cobol_$text_wd_off - 2, null ());

	     open_in_token.pt2 = in_token.token_ptr (i * 2 + k);
	     file_ptr (i) = open_in_token.pt2;
	     call cobol_open_gen (addr (open_in_token));

/*	read */

	     call cobol_define_tag (read_tag (i));
	     call cobol_read_ft (file_ptr (i) -> fd_token.file_no, ft_ptr);

	     an_type9_based = an_type9_init_based;
	     an_type9.seg = file_table.cra_seg;
	     an_type9.off = file_table.cra_offset;
	     an_type9.size = file_table.max_cra_size;

	     input_struc.type = 2;
	     input_struc.operand_no = 1;
	     input_struc.lock = 0;
	     input_struc.operand.token_ptr (1) = addr (an_type9);
	     input_struc.operand.size_sw (1) = 0;

	     call cobol_addr (input_ptr, inst_ptr, reloc_ptr);
	     inst_struc_basic.fill1_op = "0111010011"b;	/* epp1 */
	     call cobol_emit (inst_ptr, reloc_ptr, 1);

	     l = merge_stack_off + 2 * (i - 1);
	     substr (spr (1), 4, 15) = substr (unspec (l), 22, 15);
	     call cobol_emit (addr (spr (1)), null (), 1);

	     read_in_token.pt2 = file_ptr (i);
	     call cobol_read_gen (addr (read_in_token), passed_tag);

/* stz	pr6|tree(i)	*/

	     l = j + i;
	     substr (stz_inst (1), 4, 15) = substr (unspec (l), 22, 15);

	     call cobol_emit (addr (stz_inst (1)), null (), 1);
	     call cobol_define_tag (passed_tag);
	     call cobol_emit (addr (ret_inst (1)), null (), 1);
	end;


	call cobol_define_tag (open_tag (file_n + 1));

/* call compare routine through cobol_rts. */

	call cobol_call_op (61, 0);
	call cobol_make_merge_file (in_token.token_ptr (2), temp_file_ptr, temp_type12_ptr, temp_type9_ptr);
	call create_temp_file;

	do i = 1 to file_n;
	     close_in_token.pt2 = file_ptr (i);
	     call cobol_close_gen (addr (close_in_token));
	end;

mex:	/***.....	if Trace_Bit then call cobol_gen_driver_$Tr_End(MY_NAME);/**/
	return;

	/***.....	dcl cobol_gen_driver_$Tr_Beg entry(char(*));/**/
	/***.....	dcl cobol_gen_driver_$Tr_End entry(char(*));/**/

	/***.....	dcl Trace_Bit bit(1) static external;/**/
	/***.....	dcl Trace_Lev fixed bin static external;/**/
	/***.....	dcl Trace_Line char(36) static external;/**/
	/***.....	dcl ioa_ entry options(variable); /**/
	/***..... dcl MY_NAME char (15) int static init ("COBOL_MERGE_GEN");/**/








/*	BEGIN	create_temp_file	*/
create_temp_file:
     proc;

	open_out_token.pt2 = temp_type12_ptr;
	call cobol_open_gen (addr (open_out_token));

	return_in_token.pt3 = temp_type9_ptr;
	bgn_tag = cobol_$next_tag;
	end_tag = cobol_$next_tag + 1;
	cobol_$next_tag = cobol_$next_tag + 2;
	call cobol_define_tag (bgn_tag);
	call return_proc (not_end_tag);

	call cobol_emit (addr (tra_inst), null (), 1);
	call cobol_make_tagref (end_tag, cobol_$text_wd_off - 1, null ());
	call cobol_define_tag (not_end_tag);

	write_in_token.pt2 = temp_type9_ptr;
	call cobol_write_gen (addr (write_in_token), 0);
	call cobol_emit (addr (tra_inst), null (), 1);
	call cobol_make_tagref (bgn_tag, cobol_$text_wd_off - 1, null ());
	call cobol_define_tag (end_tag);

	close_in_token.pt2 = temp_type12_ptr;
	call cobol_close_gen (addr (close_in_token));

	open_in_token.pt2 = temp_type12_ptr;
	call cobol_open_gen (addr (open_in_token));

     end create_temp_file;				/*	END create_temp_file	*/









/*	BEGIN	giving	*/

giving:
     proc;

/*	open output giving file	*/

	open_out_token.pt2 = in_token.token_ptr (2);
	call cobol_open_gen (addr (open_out_token));
	end_tag = cobol_$next_tag;
	passed_tag = cobol_$next_tag + 1;
	passed_tag1 = cobol_$next_tag + 2;
	cobol_$next_tag = cobol_$next_tag + 3;
	call cobol_define_tag (passed_tag1);

/*	read	temp file	*/

	read_into_token.pt2 = temp_type12_ptr;
	read_into_token.pt3 = in_token.token_ptr (1);

	call cobol_read_gen (addr (read_into_token), passed_tag);
	call cobol_emit (addr (tra_inst), null (), 1);
	call cobol_make_tagref (end_tag, cobol_$text_wd_off - 1, null ());
	call cobol_define_tag (passed_tag);

/*	write giving file	*/

	write_in_token.pt2 = in_token.token_ptr (1);
	call cobol_write_gen (addr (write_in_token), 0);
	call cobol_emit (addr (tra_inst), null (), 1);
	call cobol_make_tagref (passed_tag1, cobol_$text_wd_off - 1, null ());
	call cobol_define_tag (end_tag);

/*	close output giving file	*/

	close_in_token.pt2 = in_token.token_ptr (2);
	call cobol_close_gen (addr (close_in_token));

     end giving;					/*	END	giving	*/

/*	BEGIN	return_proc	*/
return_proc:
     proc (passed_tag);


dcl	1 mlr_struct	static,
	  2 type		fixed bin init (5),
	  2 operand_no	fixed bin init (2),
	  2 lock		fixed bin init (0),
	  2 operand1,
	    3 token_ptr	ptr init (null ()),
	    3 sr		fixed bin init (0),
	    3 icmod	fixed bin init (0),
	    3 size_sw	fixed bin init (0),
	  2 operand2,
	    3 token_ptr	ptr,
	    3 sr		fixed bin init (1),
	    3 icmod	fixed bin,
	    3 size_sw	fixed bin init (0);

dcl	mlr_reg_to_reg	bit (36) init ("000100000001010000001000000101000000"b);

dcl	instr		(3) bit (36) unaligned static
			init ("000000000000000000000000000000000000"b, "000000000000000000000000000000000000"b,
			"000000000000000000000000000000000000"b);

dcl	ldq_inst		(16) bit (18) static init ("110000000000000000"b, "010011110001000000"b,
						/* ldq	pr6|tree(2n-1)	*/
			"000000000000000000"b, "110000000000000100"b,
						/* tze	end_tag,ic	*/
			"000000000000000001"b, "001111110000000111"b,
						/* sbq	1,dl	*/
			"000000000000000100"b, "100000010000000111"b,
						/* mpy	4,dl	*/
			"000000000000000000"b, "011101010000000100"b,
						/* epp2	def_tag,ic	*/
			"110000000000000000"b, "010101010001000000"b,
						/* spri2	pr6|ret_off	*/
			"000000000000000010"b, "011101010000000100"b,
						/* epp2	2,ic	*/
			"010000000000000000"b, "111001000001000110"b);
						/* tra	pr2|0,ql	*/

dcl	tra_read_inst	(2) bit (18) static init ("000000000000000000"b, "111001000000000100"b);
						/* tra	read_tag(i),ic	*/

dcl	inst_seq2		(2) bit (18) static init ("000000000000000000"b, "111001000000000100"b);
						/* tra	0,ic	*/
dcl	rel_seq2		(2) bit (5) aligned static init ("00000"b, "00000"b);

dcl	1 mpout		static,
	  2 n		fixed bin init (4),
	  2 pt1		ptr,
	  2 pt2		ptr,
	  2 pt3		ptr,
	  2 pt4		ptr;
dcl	file_key_desc	char (40) based;
dcl	eos_buff		(5) ptr;

dcl	passed_tag	fixed bin,
	def_tag		fixed bin,
	end_tag		fixed bin;
start:
	eos_ptr = addr (eos_buff);
	name_ptr = return_in_token.pt2;
	passed_tag = cobol_$next_tag;
	def_tag = cobol_$next_tag + 1;
	end_tag = cobol_$next_tag + 2;
	cobol_$next_tag = cobol_$next_tag + 3;

/*	check tree(2n-1)	*/
	i = merge_stack_off + 4 * file_n - 2;
	substr (ldq_inst (1), 4, 15) = substr (unspec (i), 22, 15);
	i = i + 6;
	substr (ldq_inst (11), 4, 15) = substr (unspec (i), 22, 15);
	call cobol_emit (addr (ldq_inst (1)), null (), 8);
	call cobol_make_tagref (def_tag, cobol_$text_wd_off - 4, null ());
	call cobol_make_tagref (end_tag, cobol_$text_wd_off - 7, null ());
						/*	set up mlr instruction for the move of record(i) to merge cra. */
	mlr_struct.operand2.token_ptr = return_in_token.pt3;
	instr (1) = mlr_reg_to_reg;
	instr (2) = ""b;
	instr (3) = ""b;

	an_type9_based = an_type9_init_based;
	do i = 1 to file_n;
	     call cobol_read_ft (file_ptr (i) -> fd_token.file_no, ft_ptr);
	     an_type9.seg = file_table.cra_seg;
	     an_type9.off = file_table.cra_offset;
	     an_type9.size = file_table.max_cra_size;
	     mlr_struct.operand1.token_ptr = addr (an_type9);
	     call cobol_addr (addr (mlr_struct), addr (instr (1)), null ());
	     call cobol_emit (addr (instr (1)), null (), 3);
	     call cobol_emit (addr (tra_read_inst (1)), null (), 1);
	     call cobol_make_tagref (read_tag (i), cobol_$text_wd_off - 1, null ());
	end;
	call cobol_define_tag (def_tag);



	call cobol_call_op (62, 0);
	call cobol_reg_manager$after_op (62);

	call cobol_emit (addr (inst_seq2 (1)), addr (rel_seq2), 1);

/* AT END processing		*/

	call cobol_make_tagref (passed_tag, cobol_$text_wd_off - 1, null ());

	call cobol_define_tag (end_tag);




     end return_proc;				/*	END	return_proc	*/





/* Interal procedure to generate codes to call merge_$initiate.
	The call is through the operator merge_initiate.	*/
initiate:
     proc;


dcl	inst_seq		(6) bit (18) init ("000000000000000000"b, "011101011100000100"b,
						/* epp3 compare,ic	*/
			"000000000000000000"b, "111010010000000111"b,
						/* lxl2 merge_stack_off,dl	*/
			"000000000000000000"b, "111010011000000111"b);
						/* lxl3 file_n,dl	*/
dcl	rel_seq		(6) bit (5) aligned init ("00000"b, "00000"b, "00000"b, "00000"b, "00000"b, "00000"b);


/* merge_initiate */
	retry_tag = cobol_$next_tag;
	call cobol_define_tag_nc (retry_tag, cobol_$text_wd_off);
	cobol_$next_tag = cobol_$next_tag + 1;
	if cobol_$same_sort_merge_proc ^= "0"b
	then temp = -merge_stack_off;
	else temp = merge_stack_off;
	inst_seq (3) = substr (unspec (temp), 19, 18);
	inst_seq (5) = substr (unspec (file_n), 19, 18);
	call cobol_emit (addr (inst_seq), addr (rel_seq), 3);

	compare_hold_ic = cobol_$text_wd_off - 3;
	call cobol_call_op (60, 0);
	call cobol_reg_manager$after_op (60);

	temp = cobol_$text_wd_off + 3 - compare_hold_ic;
	addrel (cobol_$text_base_ptr, compare_hold_ic) -> hold_addr = substr (unspec (temp), 19, 18);

     end initiate;


/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

%include cobol_in_token;

%include cobol_addr_tokens;

%include cobol_entry_seq;
%include cobol_;
%include cobol_file_table;
%include cobol_type9;
%include cobol_type12;
%include cobol_type19;
%include cobol_type40;
%include cobol_alpha_def;
%include cobol_ext_;
%include cobol_fixed_common;
%include cobol_op_con;

     end cobol_merge_gen;
