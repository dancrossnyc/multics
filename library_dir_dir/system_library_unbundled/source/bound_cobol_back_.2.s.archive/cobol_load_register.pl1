/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_load_register.pl1 Added Trace statements.
                                                   END HISTORY COMMENTS */


/* Modified on 10/19/85 by FCH, [5.3-1], BUG563(phx18381), new cobol_addr_tokens.incl.pl1 */
/* Modified on 01/17/77 by ORN to call cobol_make_reg_token instead of cobol_make_register_token */
/* Modified since Version 2.0 */

/*{*/
/* format: style3 */
cobol_load_register:
     proc (operand_token_ptr, register_token_ptr);

/*
This procedure generates code to load a value into either the A
or Q register.
*/

/*  DECLARATION OF THE PARAMETERS  */

dcl	operand_token_ptr	ptr;
dcl	register_token_ptr	ptr;

/*  DESCRIPTION OF THE PARAMETERS  */

/*
PaRaMETER		DEsCRIPTION

operand_token_ptr	Pointer to a token that describes the operand
		to be loaded into the register.  This token
		can be on of the following types:
		  1.  data name token (type 9) for a short
		   or long binary data item.
		  2. immediate constant token (type 102)
register_token_ptr	Pointer to a register token (type 100) that
		describes the register into which the operand
		is loaded.  If this pointer is null() on
		entry, then space for the token is provided
		to the user, and the value is
		loaded into either the A or Q register.
		(whichever is available)  If this pointer is not
		null, it must point to a register token
		(type 100) whose entry cobol_type100.register
		specifies the register which is to be loaded.
*/



/*}*/

/*  DECLARATION OF EXTERNAL ENTRIES  */

dcl	cobol_register$load ext entry (ptr);
dcl	cobol_make_reg_token
			ext entry (ptr, bit (4));
dcl	cobol_short_to_longbin$register
			ext entry (ptr, ptr);
dcl	cobol_addr	ext entry (ptr, ptr, ptr);
dcl	cobol_emit	ext entry (ptr, ptr, fixed bin);



/*  DECLARATION OF INTERNAL STATIC DATA  */

dcl	LDA		bit (10) int static init ("0100111010"b);
						/*  LDA  */
dcl	LDQ		bit (10) int static init ("0100111100"b);
						/*  LDQ  */
dcl	direct_lower_inst	bit (36) int static init ("000000000000000000000000000000000111"b);
						/*  zero,dl  */


/*  DECLARATION OF INTERNAL VARIABLES  */

dcl	1 input_buff	aligned,
	  2 buff		(1:10) ptr;

dcl	1 inst_buff	aligned,
	  2 buff		(1:2) fixed bin;

dcl	1 reloc_buff	aligned,
	  2 buff		(1:10) bit (5) aligned;

dcl	dn_ptr		ptr;


dcl	1 register_struc,
	  2 what_reg	fixed bin,
	  2 reg_no	bit (4),
	  2 lock		fixed bin,
	  2 already_there	fixed bin,
	  2 contains	fixed bin,
	  2 tok_ptr	ptr,
	  2 literal	bit (36);


/**************************************************/
start:
	if operand_token_ptr -> data_name.type = rtc_dataname
	then do;					/*  Operand to be loaded is long or short binary cobol data item.  */
		if operand_token_ptr -> data_name.bin_18
		then /*  Operand to be loaded is short binary.  */
		     call cobol_short_to_longbin$register (operand_token_ptr, register_token_ptr);

		else do;				/*  Operand to be loaded is a long binary data item.  */
						/*  Establish addressability to the operand.  */
			input_ptr = addr (input_buff);
			inst_ptr = addr (inst_buff);
			reloc_ptr = addr (reloc_buff);
			input_struc.type = 2;
			input_struc.operand_no = 1;
			input_struc.lock = 0;
			input_struc.operand.size_sw (1) = 0;
			input_struc.operand.token_ptr (1) = operand_token_ptr;
			call cobol_addr (input_ptr, inst_ptr, reloc_ptr);

			if register_token_ptr = null ()
			then register_struc.what_reg = 4;
						/*  A or Q  */
			else if register_token_ptr -> cobol_type100.register = "0001"b
			then register_struc.what_reg = 1;
						/*  A  */
			else register_struc.what_reg = 2;
						/*  Q  */

			register_struc.lock = 1;	/*  lock it  */
			register_struc.contains = 0;

			call cobol_register$load (addr (register_struc));

			if register_struc.reg_no = "0001"b
						/*  A  */
			then inst_struc_basic.fill1_op = LDA;
			else inst_struc_basic.fill1_op = LDQ;
			call cobol_emit (inst_ptr, reloc_ptr, 1);

			if register_token_ptr = null ()
			then call cobol_make_reg_token (register_token_ptr, register_struc.reg_no);
		     end;				/*  Operand to be loaded is a long binary data item.  */


	     end;					/*  Operand to be loaded is long or short binary cobol data item.  */

	else do;					/*  Operand to be loaded is an immediate constant.  */
		if register_token_ptr = null ()
		then register_struc.what_reg = 4;	/*  A or Q  */
		else if register_token_ptr -> cobol_type100.register = "0001"b
		then register_struc.what_reg = 1;	/*  A  */
		else register_struc.what_reg = 2;	/*  Q  */

		register_struc.lock = 1;
		register_struc.contains = 0;
		call cobol_register$load (addr (register_struc));

		if register_struc.reg_no = "0001"b	/*  A  */
		then substr (direct_lower_inst, 19, 10) = LDA;
		else substr (direct_lower_inst, 19, 10) = LDQ;
						/*  Insert the immediate value into the instruction  */
		substr (direct_lower_inst, 1, 18) =
		     substr (unspec (operand_token_ptr -> immed_const.const_value), 19, 18);
		call cobol_emit (addr (direct_lower_inst), null (), 1);

		if register_token_ptr = null ()
		then call cobol_make_reg_token (register_token_ptr, register_struc.reg_no);

	     end;					/*  Operand to be loaded is an immediate constant.  */

/*  INCLUDE FILES USED BY THIS PROCEDURE  */


/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

%include cobol_type9;
%include cobol_addr_tokens;
%include cobol_type102;
%include cobol_record_types;
%include cobol_type100;

     end cobol_load_register;
