/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_fixup.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 04/01/81 by FCH, fix decl for map_data_table, [4.4-1], BUG472(TR8869,8970) */
/* Modified on 5/16/80 by FCH, [4.2-1], compute size of DEF table */
/* Modified on 11/07/78 by FCH, [3.0-1], type31 evaluation */
/* Modified since Version 3.0 */

/* format: style3 */
cobol_fixup:
     proc (value_ptr);

dcl	val		(7) fixed bin aligned based (value_ptr);
dcl	segptr		(4) ptr;

dcl	wptr		ptr;			/* points to word to be set in cobol_text */
dcl	halfword		(0:1) bit (18) based (wptr);
dcl	1 instr		based (wptr) aligned,
	  2 address	bit (18) unaligned,
	  2 fill		bit (14) unaligned,
	  2 reg		bit (4) unaligned;


dcl	bytes		char (8) based;

dcl	(i, j, k)		fixed bin;
dcl	utemp		fixed bin;
dcl	1 map_data_table	aligned based (cobol_$map_data_ptr),
	  2 no_source_stmts fixed bin aligned,
	  2 data		(0 refer (map_data_table.no_source_stmts)),
	    3 line_no	fixed bin unaligned,
	    3 text_addr	fixed bin unaligned,	/*[4.4-1]*/
	    3 col		fixed bin unal,		/*[4.4-1]*/
	    3 label	bit unal;


/*************************************/
start_fixup:					/* [3.0-1] */
	call eval_equate;

	segptr (1) = cobol_$text_base_ptr;
	segptr (2) = cobol_$def_base_ptr;
	segptr (3) = cobol_$link_base_ptr;
	segptr (4) = cobol_$sym_base_ptr;

	if fixup_table.count > 0
	then do i = 1 to fixup_table.count;

		if table.type (i) = (4)"0"b
		then do;				/* tag type fixup */

			wptr = addrel (cobol_$text_base_ptr, table.offset (i));
			j = table.tag_number (i);	/* [3.0-1]
		if TAG.tag_table(j) < 0 then do while(TAG.tag_table(j) < 0);
		     j = -TAG.tag_table(j);
		end;
*/
			k = TAG.tag_table (j);	/* the real offset in cobol_text_seg */

			if k = 0
			then go to fixup_error;

			utemp = fixed (instr.address, 18) + k;
			instr.address = substr (unspec (utemp), 19, 18);

		     end;
		else do;				/* general "section-related" fixup */

			j = fixed (table.location.half (i), 1);
			k = fixed (table.type (i), 4);
			wptr = addrel (segptr (fixed (table.base (i), 3)), table.offset (i));
			utemp = fixed (halfword (j), 18);

			if k ^= 15
			then do;
				if table.operation (i)
				then utemp = utemp - val (k);
				else utemp = utemp + val (k);
			     end;
			else utemp = utemp + map_data_table.no_source_stmts * 2 + 2;

			halfword (j) = substr (unspec (utemp), 19, 18);
		     end;

fix_cont:
	     end;

	return;

/* [3.0-1] */

eval_equate:
     proc;

/**/
declare	(i, new, old, tt, tn, val)
			fixed bin;		/**/
						/**/
	if DEF.tag_max = 0
	then return;				/**/
						/**/
	do while ("1"b);				/**/
						/**/
	     new, old = 0;				/**/
						/**/
	     do i = 1 by 1 to DEF.tag_max;		/**/
						/**/
		tt = TAG.tag_table (i);		/**/
		tn = TAG.tag_no (i);		/**/
						/**/
		if tt = 0				/**/
		then if tn ^= 0			/**/
		     then do;
			     val = TAG.tag_table (tn);/**/
						/**/
						/**/
			     if val ^= 0		/**/
			     then do;
				     TAG.tag_table (i) = val;
						/**/
				     new = 1;	/**/
				end;		/**/
			end;			/**/
		old = 1;				/**/
	     end;					/**/
						/**/
	     if new = 0 | old = 0
	     then return;				/**/
						/**/
	end;
     end;

/* [3.0-1] */

/*************************************/

cobol_define_tag:
     entry (tagno);

/* dcl tagno fixed bin;	/* internal tag number (input) */

start_define_tag:					/*[3.0-1]*/
	if tagno = 0
	then return;

	if TAG.tag_table (tagno) > 0
	then go to define_error;

	TAG.tag_table (tagno) = cobol_$text_wd_off;
	call cobol_reset_r$in_line;

/*[4.2-1]*/
	DEF.tag_max = max (DEF.tag_max, tagno);

	return;


/*************************************/

cobol_define_tag_nc:
     entry (tagno, locno);

dcl	tagno		fixed bin;		/* internal tag number (input) */
dcl	locno		fixed bin;		/* wd offset in cobol_text_seg (input) */

start_define_tag_nc:				/*[3.0-1]*/
	if tagno = 0
	then return;

	if TAG.tag_table (tagno) > 0
	then go to define_error;
	TAG.tag_table (tagno) = locno;

/*[4.2-1]*/
	DEF.tag_max = max (DEF.tag_max, tagno);

	return;


/*************************************/

cobol_equate_tag:
     entry (token31_ptr);

dcl	token31_ptr	ptr;			/* ptr to a type 31 token (input)*/


dcl	1 token31		based (token31_ptr),
	  2 header,
	    3 size	fixed bin (15),
	    3 line	fixed bin (15),
	    3 column	fixed bin (7),
	    3 type	fixed bin (7),
	  2 body,
	    3 verb	fixed bin (15),
	    3 tagno1	fixed bin (15),
	    3 tagno2	fixed bin (15);

start_equate_tag:					/* [3.0-1] */
	if TAG.tag_table (token31.tagno1) = 0		/* [3.0-1] */
	then TAG.tag_table (token31.tagno1) = TAG.tag_table (token31.tagno2);

/* [3.0-1] */
	TAG.tag_no (token31.tagno1) = token31.tagno2;

/*[4.2-1]*/
	DEF.tag_max = max (DEF.tag_max, token31.tagno1, token31.tagno2);

	return;


/*************************************/

cobol_make_tagref:
     entry (tagno, locno, instr_ptr);

/* dcl tagno fixed bin;	/* internal tag number (input) */
/* dcl locno fixed bin;	/* wd offset in cobol_text_seg (input) */
dcl	instr_ptr		ptr;			/* ptr to instr wd if non-null (input) */

start_make_tagref:
	if instr_ptr = null ()
	then wptr = addrel (cobol_$text_base_ptr, locno);
	else wptr = instr_ptr;
	instr.reg = "0100"b;			/* IC modification */

	if TAG.tag_table (tagno) > 0
	then do;
		utemp = TAG.tag_table (tagno) - locno;
		instr.address = substr (unspec (utemp), 19, 18);
	     end;
	else do;					/* tag not yet defined - make fixup */
		fixdef.wd1 = locno;
		fixdef.wd2 = tagno;
		utemp = -locno;
		instr.address = substr (unspec (utemp), 19, 18);
		i = fixup_table.count * 8 + 5;
		substr (cobol_$fixup_ptr -> bytes, i, 8) = substr (addr (fixdef) -> bytes, 1, 8);
		fixup_table.count = fixup_table.count + 1;
	     end;

/*[4.2-1]*/
	DEF.tag_max = max (DEF.tag_max, tagno);
	return;


/*************************************/
cobol_make_fixup:
     entry (fix_ptr);

dcl	fix_ptr		ptr;			/* pointer to fixup directive (input) */

start_make_fixup:
	i = fixup_table.count * 8 + 5;
	substr (cobol_$fixup_ptr -> bytes, i, 8) = substr (fix_ptr -> bytes, 1, 8);
	fixup_table.count = fixup_table.count + 1;
	return;


/*************************************/
fixup_error:
	error_info.name = "cobol_fixup";
	call ioa_$rsnnl ("Inconsistency in fixup table entry^d->^d at location ^o (before fixup)", message, message_len,
	     i, j, table.offset (i));
	call signal_ ("command_abort_", null (), addr (error_info));
	go to fix_cont;

define_error:
	error_info.name = "cobol_define_tag";
	call ioa_$rsnnl ("Attempt to multiply define tag #^d", message, message_len, tagno);
	go to error;

equate_error:
	error_info.name = "cobol_equate_error";
	call ioa_$rsnnl ("Inconsistency in Type 31 token -  setting ^d = ^d", message, message_len, token31.tagno1,
	     token31.tagno2);
	go to error;

error:
	call signal_ ("command_abort_", null (), addr (error_info));

/*************************************/
%include cobol_fixup_info;
%include cobol_fixup_data;
     end cobol_fixup;
