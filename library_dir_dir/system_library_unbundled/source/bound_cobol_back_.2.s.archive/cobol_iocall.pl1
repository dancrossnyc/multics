/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_iocall.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 02/22/77 by Bob Chang to fix the bug for reloc bit.	*/
/* Modified on 01/31/77 by Bob Chang to implement profile option.	*/
/* Modified since Version 2.0.	*/

/* format: style3 */
cobol_iocall:
     proc (argptr, descptr);

dcl	argptr		ptr;
dcl	descptr		ptr;

/* fixup directive for link, used when profile options is specified.	*/
dcl	1 fixup_directive	aligned static,
	  2 operation	bit (1) unal init ("0"b),
	  2 type		bit (4) unal init ("1111"b),
	  2 reserved	bit (9) unal init ("000000000"b),
	  2 location	unal,
	    3 half	bit (1) unal init ("0"b),
	    3 base	bit (3) unal init ("001"b),
	    3 offset	fixed bin unal,
	  2 tag_number	fixed bin aligned;
dcl	1 args		based (argptr),
	  2 entryno	fixed bin,
	  2 arglist_off	fixed bin,
	  2 stacktemp_off	fixed bin,
	  2 n		fixed bin,
	  2 arg		(0 refer (args.n)),
	    3 pt		ptr,
	    3 type	fixed bin,
	    3 seg		fixed bin,
	    3 off		fixed bin,
	    3 value	bit (18) unaligned,
	    3 indirect	bit (1) unaligned,
	    3 overlay	bit (1) unaligned,
	    3 repeat_nogen	bit (1) unaligned,
	    3 reg_sw	bit (1) unaligned,
	    3 reg		bit (3) unaligned;
dcl	desc		(20) bit (36) based (descptr);

dcl	type9		char (144) static aligned;	/* enough to hold 36 words */
dcl	1 data_name	based,
	  2 size		fixed bin (15),
	  2 line		fixed bin (15),
	  2 column	fixed bin (15),
	  2 type		fixed bin (15);

dcl	1 addr_struct	static,
	  2 type		fixed bin init (2),
	  2 operand_no	fixed bin init (1),
	  2 lock		fixed bin init (0),
	  2 operand,
	    3 token_ptr	ptr,
	    3 send_receive	fixed bin init (0),
	    3 ic_mod	fixed bin,
	    3 size_sw	fixed bin init (1);

dcl	1 basic_struct	based,
	  2 type		fixed bin,
	  2 count		fixed bin,
	  2 lock		fixed bin,
	  2 seg		fixed bin,
	  2 offset	fixed bin,
	  2 sr		fixed bin;

dcl	evad		(16) bit (18) static init ("010000000000010110"b,
						/* (1)  detach_iocb */
			"010000000000011010"b,	/* (2)  open */
			"010000000000011110"b,	/* (3)  close */
			"010000000000100010"b,	/* (4)  get_line */
			"010000000000100110"b,	/* (5)  get_chars */
			"010000000000101010"b,	/* (6)  put_chars */
			"010000000000101110"b,	/* (7)  modes */
			"010000000000110010"b,	/* (8)  position */
			"010000000000110110"b,	/* (9)  control */
			"010000000000111010"b,	/* (10) read_record */
			"010000000000111110"b,	/* (11) write_record */
			"010000000001000010"b,	/* (12) rewrite_record */
			"010000000001000110"b,	/* (13) delete_record */
			"010000000001001010"b,	/* (14) seek_key */
			"010000000001001110"b,	/* (15) read_key */
			"010000000001010010"b);	/* (16) read_length */

/* THE FOLLOWING DECLARATION TO TEMPORARILY CALL iox_$name */
dcl	ename		(16) char (20) static
			init ("iox_$detach_iocb", "iox_$open", "iox_$close", "iox_$get_line", "iox_$get_chars",
			"iox_$put_chars", "iox_$modes", "iox_$position", "iox_$control", "iox_$read_record",
			"iox_$write_record", "iox_$rewrite_record", "iox_$delete_record", "iox_$seek_key",
			"iox_$read_key", "iox_$read_length");

/* Change to interface the cobol operators_ */
/*-04/05/76-*/
dcl	entry_op		(4) bit (18) static
			init ("000000000000000000"b, "000000000000000001"b, "000000000000000101"b,
			"000000000000000110"b);

dcl	icmod		bit (6) static init ("000100"b);
dcl	indmod		bit (6) static init ("010000"b);
dcl	dlmod		bit (6) static init ("000111"b);
dcl	dmod		(2) bit (6) static init ("000111"b, "000011"b);

dcl	stz		bit (12) static init ("100101000001"b);
dcl	fld_		bit (12) static init ("100011001000"b);
dcl	tsx0		bit (12) static init ("111000000001"b);
dcl	eax1		bit (12) static init ("110010001001"b);
dcl	epp2		bit (12) static init ("011101010001"b);
dcl	epp2_		bit (12) static init ("011101010000"b);
dcl	spri2		bit (12) static init ("010101010001"b);
dcl	st		(2) bit (12) static init ("111101101001"b, "111101110001"b);
dcl	ld_		(2) bit (12) static init ("010011101000"b, "010011110000"b);
dcl	full_epp2		bit (36) static init ("000000000000000000011101010000000000"b);

dcl	instr		(8) bit (36) static aligned;
dcl	reloc		(12) bit (5) aligned static
			init ("00000"b, "00000"b, "00000"b, "00000"b, "00000"b, "00000"b, "00000"b, "00000"b,
			"00000"b, "00000"b, "00000"b, "00000"b);

dcl	1 pr0_struct	static,
	  2 pr0		fixed bin init (0),
	  2 pointer_no	bit (3),
	  2 lock		fixed bin init (0),
	  2 switch	fixed bin init (1),
	  2 segno		fixed bin init (4000),
	  2 offset	fixed bin init (0),
	  2 reset		fixed bin;
dcl	1 pr2_struct	static,
	  2 pr2		fixed bin init (2),
	  2 pointer_no	bit (3),
	  2 lock		fixed bin init (0),
	  2 switch	fixed bin init (0),
	  2 segno		fixed bin,
	  2 offset	fixed bin,
	  2 reset		fixed bin;
dcl	1 pr4_struct	static,
	  2 pr4		fixed bin init (4),
	  2 pointer_no	bit (3),
	  2 lock		fixed bin init (0),
	  2 switch	fixed bin init (1),
	  2 segno		fixed bin init (3002),
	  2 offset	fixed bin init (0),
	  2 reset		fixed bin;

dcl	1 reg_struct	static,
	  2 either_a_or_q	fixed bin init (4),
	  2 reg_no	bit (4),
	  2 lock		fixed bin init (0),
	  2 already_there	fixed bin,
	  2 contains	fixed bin init (0),
	  2 null_ptr	ptr init (null ()),
	  2 fill		bit (18) unaligned init ((18)"0"b),
	  2 literal	bit (18) unaligned;

dcl	char4b		char (4) based;
dcl	linkstring	char (65);
dcl	varstring		char (65) varying based (arg.pt (1));

dcl	(i, j)		fixed bin;
dcl	k		fixed bin;
dcl	conoff		fixed bin;
dcl	aloff		fixed bin;
dcl	stoff		fixed bin;
dcl	a_or_q		fixed bin;
dcl	ic		fixed bin;
dcl	opno		fixed bin;
dcl	linkoff		fixed bin;
dcl	seg		fixed bin;
dcl	off		fixed bin;
dcl	utemp		fixed bin;

dcl	linksw		bit (1);
dcl	firsttime		bit (1) static init ("1"b);
dcl	loc		bit (18) aligned;
dcl	reg		bit (3) aligned;

dcl	instr_ptr		ptr static;
dcl	instr3_ptr	ptr static;
dcl	reloc_ptr		ptr static;
dcl	reloc5_ptr	ptr static;
dcl	pr0_struct_ptr	ptr static;
dcl	pr2_struct_ptr	ptr static;
dcl	pr4_struct_ptr	ptr static;
dcl	reg_struct_ptr	ptr static;
dcl	type9_ptr		ptr static;
dcl	addr_struct_ptr	static ptr;

dcl	cobol_reset_r$after_call
			entry;
dcl	cobol_pool	entry (char (*), fixed bin, fixed bin);
dcl	cobol_make_link$type_4
			entry (fixed bin, char (*));
dcl	cobol_make_fixup	entry (ptr);
dcl	cobol_alloc$stack	entry (fixed bin, fixed bin, fixed bin);
dcl	cobol_register$load entry (ptr);
dcl	cobol_emit	entry (ptr, ptr, fixed bin);
dcl	cobol_pointer_register$get
			entry (ptr);
dcl	cobol_pointer_register$call
			entry;
dcl	cobol_addr	entry (ptr, ptr, ptr);
dcl	cobol_make_type9$type2_3
			entry (ptr, ptr);
dcl	cobol_set_pr	entry (ptr, ptr);


/*************************************/
start:
	if firsttime
	then do;
		instr_ptr = addr (instr);
		instr3_ptr = addr (instr (3));
		reloc_ptr = addr (reloc);
		reloc5_ptr = addr (reloc (5));
		pr0_struct_ptr = addr (pr0_struct);
		pr2_struct_ptr = addr (pr2_struct);
		pr4_struct_ptr = addr (pr4_struct);
		reg_struct_ptr = addr (reg_struct);
		type9_ptr = addr (type9);
		addr_struct_ptr = addr (addr_struct);
		firsttime = "0"b;
	     end;

	if args.entryno = 0
	then k = 1;
	else k = 0;				/* 0=iocall; 1=other */
	if args.arglist_off <= 0
	then do;
		i = 8 * (args.n + 1 - k);
		if descptr ^= null ()
		then i = 2 * i;
		call cobol_alloc$stack (i, 2, aloff);
	     end;
	else aloff = args.arglist_off;
	call cobol_pointer_register$get (pr2_struct_ptr);
	stoff = args.stacktemp_off;
	do j = 1 to 11 by 2;
	     reloc (j) = "00000"b;
	end;
	ic = 1;

	if args.n > k
	then do i = 2 to args.n;			/* set up argument list */
		if arg.type (i) = 0
		then do;				/* arg.pt points to basic structure */
			instr (1) = full_epp2;
			call cobol_addr (arg.pt (i), instr_ptr, reloc_ptr);
			call cobol_pointer_register$get (pr2_struct_ptr);
			ic = 2;
		     end;
		else if arg.type (i) < 4
		then do;				/* direct lower (1) or upper (2) in in arg.value(i) */
			if arg.reg_sw (i)
			then reg = arg.reg (i);
			else reg = "110"b;		/* use stack by default */
			if arg.seg (i) = 0
			then do;
				loc = reg || substr (unspec (stoff), 22, 15);
				if arg.overlay (i)
				then arg.seg (i) = stoff;
				stoff = stoff + 1;
			     end;
			else loc = reg || substr (unspec (arg.seg (i)), 22, 15);
			if arg.type (i) < 3
			then do;
				if arg.value (i) = (18)"0"b
				then instr (1) = loc || stz;
				else do;
					reg_struct.literal = arg.value (i);
					call cobol_register$load (reg_struct_ptr);
					a_or_q = fixed (reg_struct.reg_no, 4);
					if reg_struct.already_there = 0
					then do;
						instr (1) =
						     arg.value (i) || ld_ (a_or_q) || dmod (arg.type (i));
						ic = ic + 1;
					     end;
					instr (ic) = loc || st (a_or_q);
				     end;
				ic = ic + 1;
			     end;
			instr (ic) = loc || epp2;
			ic = ic + 1;
		     end;
		else if arg.type (i) = 4
		then do;				/* link in seg|off */
			call cobol_pointer_register$get (pr4_struct_ptr);
			instr (1) = "100"b || substr (unspec (arg.seg (i)), 22, 15) || epp2 || indmod;
			reloc (1) = "10100"b;
			if fixed_common.options.profile
			then do;
				fixup_directive.location.offset = cobol_$text_wd_off;
				call cobol_make_fixup (addr (fixup_directive));
			     end;
			if arg.off (i) ^= 0
			then do;
				instr (2) = "010"b || substr (unspec (arg.off (i)), 22, 15) || epp2;
				ic = 3;
			     end;
			else ic = 2;
		     end;
		else if arg.type (i) = 5
		then do;				/* arg.pt points to a token */
			if arg.pt (i) -> data_name.type = 9
			then type9_ptr = arg.pt (i);
			else call cobol_make_type9$type2_3 (type9_ptr, arg.pt (i));
			if arg.indirect (i) | args.arglist_off <= 0 | ^arg.repeat_nogen (i)
			then call cobol_set_pr (pr2_struct_ptr, type9_ptr);
		     end;
		else if arg.type (i) = 6
		then do;
			call cobol_pool (substr (arg.pt (i) -> varstring, 1, length (arg.pt (i) -> varstring)), 1,
			     conoff);
			utemp = -(conoff + cobol_$text_wd_off);
			instr (1) = substr (unspec (utemp), 19, 18) || epp2_ || icmod;
			ic = 2;
		     end;

		if arg.indirect (i)
		then do;				/* not legal for type 4 */
			if arg.off (i) = 0
			then do;
				if mod (stoff, 2) = 1
				then stoff = stoff + 1;
				loc = "110"b || substr (unspec (stoff), 22, 15);
				if arg.overlay (i)
				then arg.off (i) = stoff;
				stoff = stoff + 2;
			     end;
			else loc = "110"b || substr (unspec (arg.off (i)), 22, 15);
			instr (ic) = loc || spri2;
			instr (ic + 1) = loc || epp2;
			ic = ic + 2;
		     end;

		utemp = aloff + 2 * (i - k);
		instr (ic) = "110"b || substr (unspec (utemp), 22, 15) || spri2;

		if args.arglist_off > 0
		then if arg.repeat_nogen (i)
		     then ic = ic - 2;		/* arglist already loaded */
		if ic > 0
		then call cobol_emit (instr_ptr, reloc_ptr, ic);
		do j = 1 to 11 by 2;
		     reloc (j) = "00000"b;
		end;
		ic = 1;
	     end;


	if descptr ^= null
	then do;
		ic = 1;
		j = aloff + 2 * (args.n + 1 - 2 * k);
		do i = k + 1 to args.n;
		     call cobol_pool (addr (desc (i)) -> char4b, 1, off);
		     utemp = -cobol_$text_wd_off - off - ic + 1;
		     instr (ic) = substr (unspec (utemp), 19, 18) || epp2_ || icmod;
						/* THE FOLLOWING LINE (FOR PLACEMENT OF ARGUMENT DESCRIPTORS):
		utemp = j+2*(i-k);
   IS TEMPORARILY CHANGED (TO NEVER ALLOW FOR THE "OPTIONAL POINTER" FOR ENTRY VARIABLE CALLS) BY: */
		     utemp = j + 2 * i - 2;		/*-04/02/76-*/
		     instr (ic + 1) = "110"b || substr (unspec (utemp), 22, 15) || spri2;
		     ic = ic + 2;
		end;
		call cobol_emit (instr_ptr, null (), ic - 1);
	     end;


	call cobol_pointer_register$call;
	instr (1) = "110"b || substr (unspec (aloff), 22, 15) || eax1;
	utemp = args.n - k;
	instr (2) = substr (unspec (utemp), 30, 7) || (11)"0"b || fld_ || dlmod;

	if k = 1
	then do;					/* non-io call */
		if arg.type (1) = 6
		then call cobol_make_link$type_4 (linkoff, substr (varstring, 1, length (varstring)));
		else linkoff = arg.seg (1);
		if fixed_common.options.profile
		then do;
			fixup_directive.location.offset = cobol_$text_wd_off + 2;
			call cobol_make_fixup (addr (fixup_directive));
		     end;
		instr (3) = "100"b || substr (unspec (linkoff), 22, 15) || epp2 || indmod;
		reloc (5) = "10100"b;
		ic = 4;
		opno = 3;
	     end;
	else do;					/* call to an iocb entry variable */
		linksw = "0"b;
		if arg.type (1) = 4
		then do;
			seg = arg.seg (1);
			off = arg.off (1);
			linksw = "1"b;
		     end;
		else if arg.pt (1) -> basic_struct.seg < 0
		then do;
			seg = -arg.pt (1) -> basic_struct.seg;
			off = -arg.pt (1) -> basic_struct.offset;
			linksw = "1"b;
		     end;
		if linksw
		then do;				/* external file - link to fsb */
						/* THE FOLLOWING LINES TEMPORARILY DELETED (TO CALL iox_$name) */
						/*		instr(3) = "100"b||substr(unspec(seg),22,15)||epp2||indmod;
/*		reloc(5) = "10100"b;
*/
			if args.arglist_off <= 0 | ^arg.repeat_nogen (1)
			then do;			/* THE FOLLOWING LINES TEMPORARILY ADDED (TO CALL iox_$name) */
						/**/
				instr (3) = "100"b || substr (unspec (seg), 22, 15) || epp2 || indmod;
						/**/
				reloc (5) = "10100"b;
				if fixed_common.options.profile
				then do;
					fixup_directive.location.offset = cobol_$text_wd_off + 2;
					call cobol_make_fixup (addr (fixup_directive));
				     end;
				utemp = aloff + 2;
				instr (4) = "110"b || substr (unspec (utemp), 22, 15) || spri2;
				ic = 5;
			     end;			/*		else ic = 4;
*/
						/**/
			else ic = 3;		/* THE FOLLOWING LINES TEMPORARILY DELETED (TO CALL iox_$name) */
						/*		instr(ic) = "010"b||substr(unspec(off),22,15)||epp2||indmod;
/*		ic = ic+1;
*/
		     end;
		else do;				/* internal file - fsb in cobol data segment */
			instr (3) = full_epp2;
			call cobol_addr (arg.pt (1), instr3_ptr, reloc5_ptr);
			if args.arglist_off <= 0 | ^arg.repeat_nogen (1)
			then do;
				utemp = aloff + 2;
				instr (4) = "110"b || substr (unspec (utemp), 22, 15) || spri2;
				ic = 5;
			     end;
			else ic = 4;
		     end;				/* THE FOLLOWING LINES (FOR TRANSFERRING THROUGH THE ENTRY VARIABLE) */
						/*	     instr(ic) = evad(args.entryno)||epp2;
/*	     opno = 1;
/* ARE TEMPORARILY REPLACED (TO CALL iox_$name) BY: */
						/**/
		call cobol_make_link$type_4 (linkoff, ename (args.entryno));
		if fixed_common.options.profile
		then do;
			fixup_directive.location.offset = cobol_$text_wd_off + ic - 1;
			call cobol_make_fixup (addr (fixup_directive));
		     end;				/**/
		instr (ic) = "100"b || substr (unspec (linkoff), 22, 15) || epp2 || indmod;
		j = i * 2 - 1;			/**/
		reloc (j) = "10100"b;		/**/
		opno = 3;
		ic = ic + 1;
	     end;

	if descptr = null ()
	then opno = opno + 1;
	instr (ic) = entry_op (opno) || tsx0;

	call cobol_emit (instr_ptr, reloc_ptr, ic);
	call cobol_reset_r$after_call;
	if args.arglist_off < 0
	then arglist_off = aloff;			/* special meaning (for reuse of stack space) */
	return;


/*************************************/

/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

%include cobol_;
%include cobol_fixed_common;
%include cobol_ext_;

     end cobol_iocall;
