/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_multiply_bin_gen.pl1 Added Trace statements.
                                                   END HISTORY COMMENTS */


/* Modified on 11/22/84 by FCH, [5.3...], trace added */
/* Modified on 10/19/84 by FCH, [4.3-1],  BUG563(phx18381), new cobol_addr_tokens.incl.pl1 */
/* Modified on 06/29/79 by FCH, [4.0-1], not option added for debug */
/* Modified since Version 4.0 */

/*{*/
/* format: style3 */
cobol_multiply_bin_gen:
     proc (in_token_ptr, next_stmt_tag);

/*
This procedure generates code for the multiply statement
which uses the hardware registers ( A and Q ) instead
of using EIS instructions.  */

/*  DECLARATION OF THE PARAMETERS  */

/* dcl in_token_ptr ptr;  */
/*  Declared below in an include file.  */
dcl	next_stmt_tag	fixed bin;

/*  DESCRIPTION OF THE PARAMETERS  */

/*
PARAMETER		DESCRIPTION

in_token_ptr	Pointer to a structurre that contains data
		and pointers that describes the multiply
		statement for which code is to be
		implemented.  (input)  See description
		below for more details.
next_stmt_tag	A tag that is to be defined at the next
		cobol statement by cobol_gen_driver_.
		(output)  See below for details.
*/


/*  DECLARATION OF EXTERNAL ENTRIES  */

dcl	cobol_short_to_longbin$temp
			ext entry (ptr, ptr);
dcl	cobol_alloc$stack	ext entry (fixed bin, fixed bin, fixed bin (24));
dcl	cobol_make_type9$long_bin
			ext entry (ptr, fixed bin, fixed bin (24));
dcl	cobol_store_binary	ext entry (ptr, ptr, bit (1));
dcl	cobol_register$release
			ext entry (ptr);
dcl	cobol_addr	ext entry (ptr, ptr, ptr);
dcl	cobol_emit	ext entry (ptr, ptr, fixed bin);
dcl	cobol_fofl_mask$on	ext entry;
dcl	cobol_fofl_mask$off ext entry;
dcl	cobol_multiply2_binary
			ext entry (ptr, ptr, ptr, fixed bin);
dcl	cobol_make_tagref	ext entry (fixed bin, fixed bin, ptr);
dcl	cobol_define_tag	ext entry (fixed bin);
dcl	cobol_register$load ext entry (ptr);

/*  DECLARATION OF INTERNAL STATIC DATA  */

dcl	STZ		bit (10) int static init ("1001010000"b);
						/*  450(0)  */
dcl	AOS		bit (10) int static init ("0001011000"b);
						/*  054(0)  */
dcl	LDA		bit (10) int static init ("0100111010"b);
						/*  235(0)  */
dcl	LDQ		bit (10) int static init ("0100111100"b);
						/*  236	(0)  */

dcl	tov_inst		bit (36) int static init ("000000000000000000110001111000000000"b);
	;					/*  tov 0  */

dcl	tra_inst		bit (36) int static init ("000000000000000000111001000000000000"b);
						/*  tra 0  */

dcl	tnz_inst		bit (36) int static init ("000000000000000000110000001000000000"b);
						/*  tnz 0  */


dcl	1 dec_zero_token	int static,
	  2 size		fixed bin (15),
	  2 line		fixed bin (15),
	  2 column	fixed bin (15),
	  2 type		fixed bin (15) init (2),
	  2 integral	bit (1) init ("1"b),
	  2 floating	bit (1) bit (1) init ("0"b),
	  2 filler1	bit (5),
	  2 subscript	bit (1) init ("0"b),
	  2 sign		char (1) init (" "),
	  2 exp_sign	char (1) init (" "),
	  2 exp_places	fixed bin (15),
	  2 places_left	fixed bin (15) init (1),
	  2 places_right	fixed bin (15) init (0),
	  2 places	fixed bin (15) init (1),
	  2 literal	char (1) init ("0");

/*  DECLARATION OF INTERNAL VARIABLES  */

dcl	1 input_buff,
	  2 buff		(1:10) fixed bin;

dcl	1 reloc_buff,
	  2 buff		(1:10) bit (5) aligned;



dcl	1 register_struc,
	  2 what_reg	fixed bin,
	  2 reg_no	bit (4),
	  2 lock		fixed bin,
	  2 already_there	fixed bin,
	  2 contains	fixed bin,
	  2 tok_ptr	ptr,
	  2 literal	bit (36);
dcl	result_token_ptr	ptr;
dcl	work_token_ptr	ptr;
dcl	addend_token_ptr	ptr;
dcl	receive_count	fixed bin;
dcl	ret_offset	fixed bin (24);
dcl	ovflo_flag_inst	bit (36);
dcl	ovflo_tag		fixed bin;
dcl	no_ovflo_tag	fixed bin;
dcl	imperative_stmt_tag fixed bin;
dcl	ix		fixed bin;
dcl	temp_target_code	fixed bin;
dcl	multiplier_token_ptr
			ptr;
dcl	multiplicand_token_ptr
			ptr;
dcl	remainder_token_ptr ptr;
dcl	ose_flag		bit (1);
dcl	tlength		fixed bin;
dcl	temp_ptr		ptr;
dcl	skipped_some	bit (1);
dcl	temp_lop_token_ptr	ptr;
dcl	temp_rop_token_ptr	ptr;


dcl	call_again	bit (1);


dcl	dn_ptr		ptr;


/*************************************/
start:	/***.....	if Trace_Bit then call cobol_gen_driver_$Tr_Beg(cmbg);/**/
						/*  Extract useful information from the EOS token.  */
	eos_ptr = in_token.token_ptr (in_token.n);
	ose_flag = end_stmt.b;

	if ose_flag
	then do;					/*  Reserve two tags for on size error processing.  */
		imperative_stmt_tag = cobol_$next_tag;
		next_stmt_tag = imperative_stmt_tag + 1;
		cobol_$next_tag = cobol_$next_tag + 2;
	     end;					/*  Reserve two tags for on size error processing.  */
	result_token_ptr = null ();

	if end_stmt.a = "000"b
	then call format1_multiply;
	else call format2_multiply;

	/***.....	if Trace_Bit then call cobol_gen_driver_$Tr_End(cmbg);/**/

	return;


/*************************************/
format1_multiply:
     proc;

	/***.....	if Trace_Bit then call ioa_("^a^a",substr(Trace_Line,Trace_Lev+1,1),"FORMAT1_MULTIPLY");/**/

/*
This internal procedure generates code using the hardware
registers ( A and Q ) for format 1 multiply statements.  */

	receive_count = end_stmt.e;
	multiplier_token_ptr = in_token.token_ptr (2);


	if (multiplier_token_ptr -> data_name.type = rtc_dataname & receive_count > 1)
	then do;					/*  Divisor is long binary, and more than one multiplynd/receiving field.  */
						/*  Generate code to store the multiplier into a temp, because if one of
		the multiplynds is the multiplier (i.e. MULTIPLY A BY A B C) then the original
		multiplier value will be destroyed.  */

/*  Allocate space for the temporary in the stack.  */
		call cobol_alloc$stack (4, 0, ret_offset);
		temp_ptr = null ();			/*  Make a data name token for the temp.  */
		call cobol_make_type9$long_bin (temp_ptr, 1000, ret_offset);
						/*  Store the multiplier into the temporary.  */
		call cobol_store_binary (multiplier_token_ptr, temp_ptr, call_again);
						/*  Release the register that was used in storing the multiplier.  */
		register_struc.reg_no = multiplier_token_ptr -> cobol_type100.register;
		call cobol_register$release (addr (register_struc));
		multiplier_token_ptr = temp_ptr;
	     end;					/*  Divisor is long binary, and move than one multiplynd/receiving field.  */

	if ose_flag
	then do;					/*  On size error clause was present.  */
		if receive_count > 1
		then do;				/*  Multiple multiplynd/receiving fields.  */
						/*  Allocate space on the stack for an overflow flag,
			and emit code to initialize it to zero.  */
			call cobol_alloc$stack (4, 0, ret_offset);

			input_ptr = addr (input_buff);
			reloc_ptr = addr (reloc_buff);
			inst_ptr = addr (ovflo_flag_inst);

			input_struc_basic.type = 1;
			input_struc_basic.operand_no = 0;
			input_struc_basic.lock = 0;
			input_struc_basic.segno = 1000;
						/*  stack  */
			input_struc_basic.char_offset = ret_offset;

			call cobol_addr (input_ptr, inst_ptr, reloc_ptr);
			inst_struc_basic.fill1_op = STZ;
			call cobol_emit (inst_ptr, reloc_ptr, 1);

/*  Define some tags to be used in the overflow testing  */
			ovflo_tag = cobol_$next_tag;
			no_ovflo_tag = ovflo_tag + 1;
			cobol_$next_tag = cobol_$next_tag + 2;

		     end;				/*  Multiple multiplynd/receiving fields.  */

		else ovflo_tag = imperative_stmt_tag;


/*  Generate code to turn on the fixed overflow mask in the indicator register.  */
		call cobol_fofl_mask$on;
	     end;					/*  On size error clause was present.  */


/*  Generate code to multiply the multiplier into each multiplynd/receiving field.  */
	do ix = 3 to in_token.n - 1;			/*  Do all the multiplys.  */

	     call cobol_multiply2_binary (in_token.token_ptr (ix), multiplier_token_ptr, result_token_ptr, 1);


	     call cobol_store_binary (result_token_ptr, in_token.token_ptr (ix), call_again);
	     if call_again
	     then do;				/*  Must call the store procedure again to get the results stored.  */
		     if ose_flag
		     then do;			/*  Must test for overflow again.  */
			     call cobol_emit (addr (tov_inst), null (), 1);
			     call cobol_make_tagref (ovflo_tag, cobol_$text_wd_off - 1, null ());
			end;			/*  Must test for overflow again.  */


		     call cobol_store_binary (result_token_ptr, in_token.token_ptr (ix), call_again);
		end;				/*  Must call the store procedure again to get the results stored.  */
	     if result_token_ptr -> data_name.type = rtc_register
	     then do;				/*  Release the register containing the result just stored.  */
		     register_struc.reg_no = result_token_ptr -> cobol_type100.register;
		     call cobol_register$release (addr (register_struc));
		end;				/*  Release the register containing the result just stored.  */

	     if ose_flag & receive_count ^= 1
	     then do;				/*  On size error and multiple multiplynds.  */
						/*  Emit code to transfer to the next multiply sequence.  */
		     call cobol_emit (addr (tra_inst), null (), 1);
		     call cobol_make_tagref (no_ovflo_tag, cobol_$text_wd_off - 1, null ());

/*  Define the ovflo_tag at the next instructiin location.  */
		     call cobol_define_tag (ovflo_tag); /*  Emit code to increment the overflow flag.  */
		     inst_struc_basic.fill1_op = AOS;
		     call cobol_emit (inst_ptr, reloc_ptr, 1);

/*  Define the no_ovflo_tag at the next instruction location.  */
		     call cobol_define_tag (no_ovflo_tag);


		     if ix ^= in_token.n - 1
		     then do;			/*  Not the last multiply, define new ovflo and no_ovflo tags.  */
			     ovflo_tag = cobol_$next_tag;
			     no_ovflo_tag = ovflo_tag + 1;
			     cobol_$next_tag = cobol_$next_tag + 2;
			end;			/*  Not the last multiply, define new ovflo, no_ovflo tags  */

		end;				/*  On size error and multiple multiplynds.  */

	end;					/*  Do all the multiplys.  */

	if ose_flag
	then do;					/*  On size error clause was present.  */

/*  Generate code to turn off the fixed overflow mask in the indicator registers.  */
		call cobol_fofl_mask$off;
		if receive_count > 1
		then do;				/*  More that one multiplynd/receiving field.  */
						/*  Generate code to load the overflow flag, and test it for zero.  */
			register_struc.what_reg = 4;	/*  A or Q  */
			register_struc.lock = 0;
			register_struc.contains = 0;
			call cobol_register$load (addr (register_struc));

			if register_struc.reg_no = "0001"b
			then inst_struc_basic.fill1_op = LDA;
			else inst_struc_basic.fill1_op = LDQ;
			call cobol_emit (inst_ptr, reloc_ptr, 1);

/*  Generate code to test for non-zero, and transfer to the imperative statement tag
				if not zero.  */
			call cobol_emit (addr (tnz_inst), null (), 1);
			call cobol_make_tagref (imperative_stmt_tag, cobol_$text_wd_off - 1, null ());

		     end;				/*  More than one multiplynd/receiving field.  */

/*[4.0-1*/
		if end_stmt.f = "01"b		/*[4.0-1*/
		then next_stmt_tag = imperative_stmt_tag;
						/*[4.0-1*/
		else do;

/*  Generate code to transfer to the next cobol statement ( the one
			following the imperative statement. )  */
			call cobol_emit (addr (tra_inst), null (), 1);
			call cobol_make_tagref (next_stmt_tag, cobol_$text_wd_off - 1, null ());

/*  Define the imperative statement tag at the next instruction location.  */
			call cobol_define_tag (imperative_stmt_tag);

/*[4.0-1*/
		     end;

	     end;					/*  On size error clause was present.  */

     end format1_multiply;


/*************************************/
format2_multiply:
     proc;

	/***.....	if Trace_Bit then call ioa_("^a^a",substr(Trace_Line,Trace_Lev+1,1),"FORMAT2_MULTIPLY");/**/

/*
This internal procedure generates code using the hardware
registers (A and Q) for format 2,3,4, and 5 multiply statements.  */
	multiplicand_token_ptr = in_token.token_ptr (2);
	multiplier_token_ptr = in_token.token_ptr (3);


/*  Generate code to do the division.  */
	call cobol_multiply2_binary (multiplicand_token_ptr, multiplier_token_ptr, result_token_ptr, 1 /*multiply */);


/*  Generate code to store the product into all long binary receiving fields.  */
/*  Note that there is no possibliity of overflow, since result is long binary, and so are targets.  */
	skipped_some = "0"b;
	if ose_flag
	then call cobol_fofl_mask$on;			/*  Generate code to turn on the fixed overflow
		mask bit in the indicator register.  */

	do ix = 4 to in_token.n - 1;			/*  Store product into all long binary targets.  */

	     if in_token.token_ptr (ix) -> data_name.bin_18
	     then skipped_some = "1"b;
	     else do;				/*  Long binary target.  */
		     call cobol_store_binary (result_token_ptr, in_token.token_ptr (ix), call_again);
		     if call_again
		     then do;			/*  REsult has been moved to a temp in an attempt to force
			overflow.  */

			     if ose_flag
			     then do;		/*  On size error clause present.  */
						/*  Must test for overflow.  */
				     call cobol_emit (addr (tov_inst), null (), 1);
				     call cobol_make_tagref (imperative_stmt_tag, cobol_$text_wd_off - 1, null ())
					;
				end;		/*  On size error clause present.  */

/*  Generate code to store the temp into the target.  */
			     call cobol_store_binary (result_token_ptr, in_token.token_ptr (ix), call_again);
			end;			/*  Result has been moved to a temp in an attempt to force
				overflow.  */
		end;				/*  Long binary target.  */
	end;					/*  Store product into all long binary targets.  */



	if skipped_some
	then do;					/*  Store the product into all short binary receiving fields.  */

		do ix = 4 to in_token.n - 1;		/*  Scan the targets.  */

		     if in_token.token_ptr (ix) -> data_name.bin_18
		     then do;			/*  Short binary target.  */
			     call cobol_store_binary (result_token_ptr, in_token.token_ptr (ix), call_again);
			     if call_again
			     then do;		/*  REsult has been moved to a temp in an attempt to force
				overflow.  */

				     if ose_flag
				     then do;	/*  On size error clause present.  */
						/*  Must test for overflow.  */
					     call cobol_emit (addr (tov_inst), null (), 1);
					     call cobol_make_tagref (imperative_stmt_tag,
						cobol_$text_wd_off - 1, null ());
					end;	/*  On size error clause present.  */

/*  Generate code to store the temp into the target.  */
				     call cobol_store_binary (result_token_ptr, in_token.token_ptr (ix),
					call_again);
				end;		/*  Result has been moved to a temp in an attempt to force
					overflow.  */

			end;			/*  Short binary target.  */
		end;				/*  Scan the targets.  */

	     end;					/*  Store the product into all short binary receiving fields.  */


	if ose_flag
	then do;					/*  On size error clause was present.  */
						/*  Generate code to turn off the fixed overflow mask bit.  */
		call cobol_fofl_mask$off;

/*[4.0-1*/
		if end_stmt.f = "01"b		/*[4.0-1*/
		then next_stmt_tag = imperative_stmt_tag;
						/*[4.0-1*/
		else do;

/*  Emit code to transfer to the next cobol statement.  (The statement
		following the imperative statement.)  */
			call cobol_emit (addr (tra_inst), null (), 1);
			call cobol_make_tagref (next_stmt_tag, cobol_$text_wd_off - 1, null ());
						/*  Define the imperative statement tag at the next instruction location.  */
			call cobol_define_tag (imperative_stmt_tag);

/*[4.0-1*/
		     end;

/*  Generate code to turn off the fixed overflow mask bit  */
		call cobol_fofl_mask$off;
	     end;					/*  On size error clause was present.  */

	if result_token_ptr -> data_name.type = rtc_register
	then do;					/*  Result token describes a register.  */
						/*  Release the register, since the value there has been stored into all receiving fields. */
		register_struc.reg_no = result_token_ptr -> cobol_type100.register;
		call cobol_register$release (addr (register_struc));
	     end;					/*  Result token describes a register.  */

     end format2_multiply;

	/***.....	dcl cmbg char(22) init("COBOL_MULTIPLY_BIN_GEN");/**/

	/***.....	dcl cobol_gen_driver_$Tr_Beg entry(char(*));/**/
	/***.....	dcl cobol_gen_driver_$Tr_End entry(char(*));/**/

	/***.....	dcl Trace_Bit bit(1) static external;/**/
	/***.....	dcl Trace_Lev fixed bin static external;/**/
	/***.....	dcl Trace_Line char(36) static external;/**/
	/***.....	dcl ioa_ entry options(variable); /**/


/*  INCLUDE FILES USED IN THIS PROCEDURE  */


/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

%include cobol_type9;
%include cobol_addr_tokens;
%include cobol_;
%include cobol_in_token;
%include cobol_record_types;
%include cobol_type100;
%include cobol_type19;

     end cobol_multiply_bin_gen;
