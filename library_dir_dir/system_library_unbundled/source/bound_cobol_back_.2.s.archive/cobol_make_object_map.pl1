/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */





/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_make_object_map.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 04/01/81 by FCH, fix decl for map_data_table, [4.4-1], BUG472(TR8869,8970) */
/* Modified since Version 4.4 */

/* format: style3 */
cobol_make_object_map:
     proc;

/* Produces an Object Map in the List segment when "map" option is specified. */

dcl	p		ptr;
dcl	q		ptr;
dcl	(ff, nl)		char (1);
dcl	c		char (4) based (addr (s));
dcl	bit9		bit (9) based;
dcl	(i, j, t)		fixed bin;
dcl	char_off		fixed bin (21);
dcl	number		fixed bin (35);
dcl	s		fixed bin (35);
dcl	mcode		fixed bin (35);
dcl	char_string	char (1048576) based (cobol_$list_ptr);
dcl	print_line	char (120) unaligned based;

dcl	1 map_line	unaligned based,
	  2 map_field	(7) unaligned,
	    3 line_field	char (7),
	    3 sp1		char (1),
	    3 loc_field	char (6),
	    3 sp2		char (3),
	  2 new_line_char	char (1) unaligned;

dcl	1 file_line	unaligned based (q),
	  2 file_fld	char (2),
	  2 sp1		char (1),
	  2 line_fld	char (4);

dcl	1 header_line	unaligned based,
	  2 form_feed_char	char (1),
	  2 new_line_char1	char (1),
	  2 header_field	char (119),
	  2 new_line_char2	char (1);

dcl	1 map_data_table	aligned based (cobol_$map_data_ptr),
	  2 no_source_stmts fixed bin aligned,
	  2 data		(0 refer (map_data_table.no_source_stmts)),
	    3 line_no	fixed bin unaligned,
	    3 text_addr	fixed bin unaligned,	/*[4.4-1]*/
	    3 col		fixed bin unal,		/*[4.4-1]*/
	    3 label	bit unal;

dcl	hcs_$set_bc_seg	entry (ptr, fixed bin (24), fixed bin (35));

dcl	addr		builtin;
dcl	divide		builtin;
dcl	mod		builtin;
dcl	substr		builtin;

	addr (ff) -> bit9 = "000001100"b;		/* form feed char */
	addr (nl) -> bit9 = "000001010"b;		/* new line char */
	char_off = cobol_$list_off;

	p = addr (substr (char_string, char_off, 1));
	p -> header_line.form_feed_char = ff;
	p -> header_line.new_line_char1 = nl;
	p -> header_line.header_field = (7)"   LINE    LOC   ";
	p -> header_line.new_line_char2 = nl;
	char_off = char_off + 122;
	p = addr (substr (char_string, char_off, 1));
	p -> print_line = " ";
	j = 1;

	do i = 1 to no_source_stmts;
	     eln_index = line_no (i);
	     if eln_index > 0
	     then do;
		     number = eln_tab.fno (eln_index);

		     if number > 0
		     then do;			/* copy file */

			     q = addr (p -> line_field (j));

			     do t = 2 to 1 by -1 while (number > 0);

				s = mod (number, 10) + 48;
						/* "0" = 48(decimal) */
				substr (file_fld, t, 1) = substr (c, 4, 1);
				number = divide (number, 10, 35, 0);
			     end;
			     number = eln_tab.lno (eln_index);
			     do t = 4 to 1 by -1 while (number > 0);
				s = mod (number, 10) + 48;
						/* "0" = 48(decimal) */
				substr (line_fld, t, 1) = substr (c, 4, 1);
				number = divide (number, 10, 35, 0);

			     end;
			end;
		     else do;			/* normal source */

			     number = eln_tab.lno (eln_index);

			     do t = 6 to 1 by -1 while (number > 0);

				s = mod (number, 10) + 48;
						/* "0" = 48(decimal) */
				substr (p -> line_field (j), t, 1) = substr (c, 4, 1);
				number = divide (number, 10, 35, 0);

			     end;
			end;

/* Fill location field. */

		     number = text_addr (i) + cobol_$constant_offset;
		     p -> loc_field (j) = "000000";

		     do t = 6 to 1 by -1 while (number > 0);

			s = mod (number, 8) + 48;	/* "0" = 48(decimal) */
			substr (p -> loc_field (j), t, 1) = substr (c, 4, 1);
			number = divide (number, 8, 35, 0);
		     end;
		     if j = 7
		     then do;
			     p -> map_line.new_line_char = nl;
			     char_off = char_off + 120;
			     j = 1;
			     p = addr (substr (char_string, char_off, 1));
			     p -> print_line = " ";

			end;

		     else j = j + 1;

		end;

	end;

	if j > 1
	then do;					/* print last partial line */

		number = 17 * (j - 1) + 1;
		substr (p -> char_string, number, 1) = nl;
		char_off = char_off + number;

	     end;

	cobol_$list_off = char_off;

	call hcs_$set_bc_seg (cobol_$list_ptr, 9 * (cobol_$list_off - 1), mcode);

%include cobol_;
%include cobol_eln_table;

     end cobol_make_object_map;
