/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_make_type9.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 04/20/77 by Bob Chang to add new entry copy_sub.	*/
/* Modified on 01/14/77 by ORN to signal command_abort_ rather than cobol_compiler_error */
/* Modified since Version 2.0 */

/*{*/
/* format: style3 */
cobol_make_type9:
     proc (new9_ptr, ptr2_3);				/* the procedure is not a valid entry point*/
						/*}*/
						/*  DECLARATIONS OF BUILTIN FUNCTIONS  */

dcl	addr		builtin;
dcl	addrel		builtin;
dcl	binary		builtin;
dcl	null		builtin;
dcl	rel		builtin;
dcl	substr		builtin;



/*{*/

/* TYPE2_3 ENTRY */

type2_3:
     entry (new9_ptr, ptr2_3);			/*
create a type 9 token, using a type 2 token (numeric literal)
or a type3 token (alphanumeric literal) as a model. Pool the
literal in the type 2 or type 3 token.
*/
dcl	new9_ptr		ptr;
dcl	old9_ptr		ptr;
dcl	ptr2_3		ptr;			/*
 new9_ptr	is a pointer to the type 9 token. (input/output)
	(a) If not null the caller will provide the space
	    to hold the token.
	(b) If null this utility will provide the space and
	    will return the address of the
	    token in this parameter.
 ptr2_3	is a pointer to a type 2 or a type 3 token. (input)
*/
						/*}*/
dcl	1 token_overflow	static,
	  2 name		char (32) init ("cobol_make_type9"),
	  2 message_len	fixed bin (35) init (58),
	  2 message	char (58) init ("The temporary token area has run over the end of a segment");
dcl	1 con_overflow	static,
	  2 name		char (32) init ("cobol_make_type9"),
	  2 message_len	fixed bin (35) init (60),
	  2 message	char (60) init ("object time instructions plus constants exceed 262,144 words");
dcl	cobol_pool$search_op
			entry (char (*), fixed bin, fixed bin (24), fixed bin);
dcl	signal_		entry (char (*), ptr, ptr);
dcl	1 clear_t9	aligned based (dn_ptr),
	  2 clear_t9_wd	(t9_wd_size) fixed bin;
dcl	1 clear_t9_sub	aligned based (dn_ptr),
	  2 clear_t9_sub_wd (t9_sub_wd_size) fixed bin;
dcl	t9_string		char (t9_char_size) based;
dcl	t9_sub_string	char (t9_sub_char_size) based;
dcl	hold_lit		char (4096);
dcl	lit_size		fixed bin;
dcl	lit_wds		fixed bin;
dcl	t9_char_size	static fixed bin init (112);	/* size of type 9 token in chars */
dcl	t9_sub_char_size	static fixed bin init (176);	/* size of type 9 token in chars */
dcl	t9_wd_size	static fixed bin init (28);	/* size of type 9 token in words */
dcl	t9_sub_wd_size	static fixed bin init (44);	/* size of type 9 token in words */
dcl	dn_ptr		ptr;
dcl	i		fixed bin;
/**** change to 1048576 when get release 1.0  ***/
dcl	pool		char (262144) based (pool_ptr);
dcl	pool_ptr		ptr;
dcl	pool_index	fixed bin (24);
dcl	pool_remainder	fixed bin (24);
dcl	index_result	fixed bin (24);
dcl	temp		fixed bin (24);
dcl	in_op		fixed bin;

/* get space for type 9 token (if not provided) */
	call get_token9_space;

/* put information in the token */

/* setup basic information in the token */
	call basic_info;
	data_name.display = "1"b;
	alit_ptr = ptr2_3;
	nlit_ptr = ptr2_3;
	data_name.seg_num = 3000;			/* constants */
	if numeric_lit.type = 2
	then do;					/* numeric literal (type 2) */
		data_name.places_left = numeric_lit.places_left;
		data_name.places_right = numeric_lit.places_right;
		data_name.numeric = "1"b;
		if numeric_lit.sign ^= " "
		then do;				/* signed literal */
			data_name.item_signed = "1"b;
			data_name.sign_separate = "1"b;
			data_name.sign_type = "100"b;
			lit_size = numeric_lit.places + 1;
			hold_lit = numeric_lit.sign || numeric_lit.literal;
		     end;
		else do;
			lit_size = numeric_lit.places;
			hold_lit = numeric_lit.literal;
		     end;
		data_name.item_length = lit_size;
	     end;
	else do;					/* alphanumeric literal (type 3) */
		lit_size = alphanum_lit.lit_size;
		hold_lit = alphanum_lit.string;
		data_name.alphanum = "1"b;
		data_name.item_length = alphanum_lit.lit_size;
	     end;

	call cobol_pool$search_op (substr (hold_lit, 1, lit_size), 0, temp, in_op);
						/*6/10/76*/
	if in_op = 1
	then data_name.seg_num = 3;
	data_name.offset = temp;
	return;					/*{*/

/* COPY ENTRY*/

copy:
     entry (new9_ptr, old9_ptr);			/*
This entry creates a type 9 token by copying another
type 9 token.
*/
						/*
 new9_ptr	is a pointer to the new type 9 token.
	See cobol_make_type9$type2_3 for additional
	details. (input/output)
 old9_ptr	is a pointer to the original type 9
	token. (input)
*/
						/*}*/

/* get space for type 9 token (if not provided) */
	call get_token9_space;			/* copy the token */
	substr (new9_ptr -> t9_string, 1, t9_char_size) = substr (old9_ptr -> t9_string, 1, t9_char_size);
	return;


copy_sub:
     entry (new9_ptr, old9_ptr);			/*
This entry creates a type 9 token by copying another
type 9 token.
*/
						/*
 new9_ptr	is a pointer to the new type 9 token.
	See cobol_make_type9$type2_3 for additional
	details. (input/output)
 old9_ptr	is a pointer to the original type 9
	token. (input)
*/
						/*}*/

/* get space for type 9 token (if not provided) */
	call get_token9_sub_space;			/* copy the token */
	substr (new9_ptr -> t9_sub_string, 1, t9_sub_char_size) =
	     substr (old9_ptr -> t9_sub_string, 1, t9_sub_char_size);
	return;					/*{*/

/* ALPHANUMERIC ENTRY*/

alphanumeric:
     entry (new9_ptr, segno, char_offset, size);		/* create a type 9 token for an alphanumeric data item. */

dcl	segno		fixed bin;
dcl	char_offset	fixed bin (24);
dcl	size		fixed bin (24);

/*
 new9_ptr	is a pointer to the type 9 token.
	See cobol_make_type9$type2_3 for additional details.
	(input/output)
 segno	is the artificial internal segment number, that can
	represent cobol data, stack, constant, multics linkage
	section. (including an offset from the link),
	definition section, symbol section, cobol linkage
	section.
	(input)
 char_offset is the character offset. If segno represents a
	constant, then char_offset represents the
	offset from the end of the constants.
	(input)
 size	is the size, in characters. (input)

 Notes:	the token will be cleared to zeros initially.
 */
/*}*/

/* get space for type 9 token (if not provided) */
	call get_token9_space;			/* set up basic information in the token */
	call basic_info;
	data_name.display = "1"b;
	data_name.seg_num = segno;
	data_name.offset = char_offset;
	data_name.alphanum = "1"b;
	data_name.item_length = size;
	return;					/*{*/

/* DECIMAL_9BIT ENTRY */

decimal_9bit:
     entry (new9_ptr, segno, char_offset, places_left, places_right);
						/* create a type 9 token for a 9 bit decimal data item */

/*dcl	segno fixed bin; */
/*dcl	char_offset fixed bin (24); */
dcl	places_left	fixed bin;
dcl	places_right	fixed bin;		/*
 new9_ptr	see "cobol_make_type9$alphanumeric",
	(input/output)
 segno	is the artificial internal segment number,
	that can represent cobol data, stack,constant,
	cobol linkage section. (input)
 char_offset  See "cobol_make_type9$alphanumeric".
	(input)
 places_left is the number of digits left of the decimal point.
	Does not include sign.
	(input)
 places_right is the number of digits right of the
	decimal point. (input)

 Notes:
 1. The sign is assumed to be leading and seperate.
   the size of the data item is assumed to be
   places_left + places_right + 1.
   The caller can modify this if the need arises.
 2. The token will be cleared to zeros initially.
 */
						/*}*/

/* get space for type 9 token (if not provided) */
	call get_token9_space;			/* set up basic information in the token */
	call basic_info;
	data_name.display = "1"b;
	data_name.seg_num = segno;
	data_name.offset = char_offset;
	data_name.places_left = places_left;
	data_name.places_right = places_right;
	data_name.item_length = places_left + places_right + 1;
	data_name.numeric = "1"b;
	data_name.item_signed = "1"b;
	data_name.sign_separate = "1"b;
	data_name.sign_type = "100"b;			/*  leading separate  */
	return;					/*{*/

/*FIXED_BIN_35 ENTRY */

fixed_bin_35:
     entry (new9_ptr, segno, char_offset);		/* create a type 9 token for  a fixed bin 35 data item */

/*dcl	segno fixed bin; */
/*dcl	char_offset fixed bin (24); */

/*
See "cobol_make_type9$decimal_9bit" for definitions of
the above.

 Notes:
 The token will be cleared to zeros initially.

*/
/*}*/

/* get space for a type 9 token (if not provided) */
	call get_token9_space;			/* set up basic information in the token */
	call basic_info;
	data_name.seg_num = segno;
	data_name.offset = char_offset;

/****** Note, need to set data_name.comp_8 ****/

	return;


/* the following is used as a non local go to */

non_local:
	return;



/*{*/

/*  SHORT BINARY ENTRY  */

short_bin:
     entry (new9_ptr, segno, char_offset);

/*  Create a type 9 token for a short binary (18 bit) data item.  */


/*  new9_ptr,segno, and char_offset are the same as for all
other entry points in this procedure.  */

/*}*/

/*  Get space for type 9 token (if requested)  */
	if new9_ptr = null ()
	then call get_token9_space;

/*  Set up basic information in the token.  */
	call basic_info;

/*  Set up particular information in the token.  */
	data_name.numeric = "1"b;
	data_name.bin_18 = "1"b;
	data_name.half_word = "1"b;
	data_name.seg_num = segno;
	data_name.offset = char_offset;
	data_name.item_length = 2;
	data_name.places_left = 6;

	return;

/*{*/

/*  LONG BINARY ENTRY  */

long_bin:
     entry (new9_ptr, segno, char_offset);

/*  Create a type 9 token for a long binary (36 bit) data item.  */


/*  Get space for type 9 token (if requested.)  */
	if new9_ptr = null ()
	then call get_token9_space;

/*  Set up basic information in the token.  */
	call basic_info;

/*  Set up particular information in the token.  */
	data_name.numeric = "1"b;
	data_name.bin_36 = "1"b;
	data_name.word = "1"b;
	data_name.seg_num = segno;
	data_name.offset = char_offset;
	data_name.item_length = 4;
	data_name.places_left = 11;

	return;

/* GET_TOKEN9_SPACE PROC */

get_token9_space:
     proc;

/* get space for type 9 token (if not provided) */

	if new9_ptr = null ()
	then do;
		if (binary (rel (cobol_$temp_token_ptr)) + t9_wd_size) > 262143
		then do;				/* token will not fit in temp token area */
			call signal_ ("command_abort_", null (), addr (token_overflow));
			go to non_local;
		     end;
		new9_ptr = cobol_$temp_token_ptr;
		cobol_$temp_token_ptr = addrel (cobol_$temp_token_ptr, t9_wd_size);
	     end;
	return;
     end get_token9_space;
get_token9_sub_space:
     proc;

/* get space for type 9 token (if not provided) */

	if new9_ptr = null ()
	then do;
		if (binary (rel (cobol_$temp_token_ptr)) + t9_sub_wd_size) > 262143
		then do;				/* token will not fit in temp token area */
			call signal_ ("command_abort_", null (), addr (token_overflow));
			go to non_local;
		     end;
		new9_ptr = cobol_$temp_token_ptr;
		cobol_$temp_token_ptr = addrel (cobol_$temp_token_ptr, t9_sub_wd_size);
	     end;
	return;
     end get_token9_sub_space;

/* BASIC_INFO PROC */

basic_info:
     proc;					/* setp basic information in type 9 token */
	dn_ptr = new9_ptr;				/* clear  token to zeros */
	do i = 1 to t9_wd_size;
	     clear_t9_wd (i) = 0;
	end;
	data_name.type = 9;
	data_name.elementary = "1"b;
	data_name.size = t9_char_size;
	return;
     end basic_info;
%include cobol_type2;
%include cobol_type3;
%include cobol_;
%include cobol_type9;
     end cobol_make_type9;
