/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_get_size.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/*{*/

/* format: style3 */
cobol_get_size:
     proc (dn_ptr, stoff, lineno);


/* This procedure is used to generate the instructions which will load the
	   A register with the item_length of a type 9 token.
	   If the input stoff is not equal to 0, the A register is stored into the memory
	   location pr6|stoff.				*/


dcl	dn_ptr		ptr;
dcl	stoff		fixed bin;
dcl	lineno		fixed bin;

dcl	1 size_basic_struct static,
	  2 type		fixed bin init (1),
	  2 operand_no	fixed bin init (0),
	  2 lock		fixed bin init (0),
	  2 seg		fixed bin,
	  2 offset	fixed bin,
	  2 send_receive	fixed bin init (0);

dcl	1 mpout		static,
	  2 n		init (4),
	  2 pt1		ptr,
	  2 pt2		ptr,
	  2 pt3		ptr,
	  2 pt4		ptr;

dcl	1 type1		static,			/* reserve word */
	  2 size		fixed bin init (28),
	  2 line		fixed bin,		/* line number */
	  2 column	fixed bin init (0),
	  2 type		fixed bin init (1),
	  2 key		fixed bin init (20),	/* perform */
	  2 bits		bit (36) init ("1"b),
	  2 jump_index	fixed bin init (0);

dcl	1 type7		static,			/*  procedure definition */
	  2 size		fixed bin init (52),
	  2 line		fixed bin init (0),
	  2 column	fixed bin init (0),
	  2 type		fixed bin init (7),
	  2 string_ptr	ptr init (null ()),
	  2 prev_rec	ptr init (null ()),
	  2 bits1		bit (4) init (""b),
	  2 section_name	bit (1) init ("0"b),
	  2 declarative_proc
			bit (1) init ("0"b),
	  2 bits2		bit (3) init (""b),
	  2 priority	char (2) init ("00"),
	  2 bits3		bit (9) init (""b),
	  2 section_num	fixed bin init (0),
	  2 proc_num	fixed bin init (0),
	  2 def_line	fixed bin init (0),
	  2 name_size	fixed bin init (0);

dcl	1 type19		static,			/*  eos */
	  2 size		fixed bin init (38),
	  2 line		fixed bin init (0),
	  2 column	fixed bin init (0),
	  2 type		fixed bin init (19),
	  2 verb		fixed bin init (20),	/* verb number */
	  2 e		fixed bin init (0),
	  2 h		fixed bin init (0),
	  2 i		fixed bin init (0),
	  2 j		fixed bin init (0),
	  2 a		bit (3) init ("111"b),
	  2 b		bit (1) init (""b),
	  2 c		bit (1) init (""b),
	  2 d		bit (2) init (""b),
	  2 f		bit (2) init (""b),
	  2 g		bit (2) init (""b),
	  2 k		bit (5) init (""b);

dcl	instr		(3) bit (36);

dcl	instr_ptr		ptr;
dcl	input_ptr		ptr static;
dcl	mpout_ptr		ptr static;

dcl	ic		fixed bin;
dcl	temp		fixed bin;

dcl	firsttime		bit (1) static init ("1"b);
dcl	omit_sign		bit (1);

dcl	sta		bit (12) static init ("111101101001"b);
dcl	lda_dlmod		bit (18) static init ("010011101000000111"b);
dcl	ada_dlmod		bit (18) static init ("000111101000000111"b);
dcl	full_lca_		bit (36) static init ("000000000000000000011011101000000000"b);
dcl	full_lda_		bit (36) static init ("000000000000000000010011101000000000"b);

dcl	cobol_perform_gen	entry (ptr);
dcl	cobol_addr	entry (ptr, ptr, ptr);
dcl	cobol_emit	entry (ptr, ptr, fixed bin);


/*}*/

/*************************************/
	omit_sign = "0"b;
	go to start;
omit_sign:
     entry (dn_ptr, stoff, lineno);
	omit_sign = "1"b;
start:
	instr_ptr = addr (instr);
	ic = 2;
	if data_name.variable_length
	then do;
		if data_name.size_rtn = -1
		then do;				/* special - varying char string */
			size_basic_struct.seg = data_name.seg_num;
			size_basic_struct.offset = data_name.offset - 4;
						/* word alignment assumed */
			instr (1) = full_lda_;
			call cobol_addr (addr (size_basic_struct), instr_ptr, null ());
			ic = 2;
		     end;
		else do;
			if firsttime
			then do;
				mpout_ptr = addr (mpout);
				mpout.pt1 = addr (type1);
				mpout.pt2, mpout.pt3 = addr (type7);
				mpout.pt4 = addr (type19);
				input_ptr = addr (size_basic_struct);
				firsttime = "0"b;
			     end;
			mpout.pt1 -> reserved_word.line = lineno;
			mpout.pt2 -> proc_def.proc_num = data_name.size_rtn;
			call cobol_perform_gen (mpout_ptr);
			size_basic_struct.seg = fixed_common.size_seg;
			size_basic_struct.offset = fixed_common.size_offset;
			instr (1) = full_lca_;
			call cobol_addr (input_ptr, instr_ptr, null ());
			instr (2) = substr (unspec (data_name.item_length), 19, 18) || ada_dlmod;
			ic = 3;
		     end;
	     end;
	else do;
		temp = data_name.item_length;
		if omit_sign
		then if data_name.sign_separate
		     then temp = temp - 1;		/* may be changed for release 1.5 */
		instr (1) = substr (unspec (temp), 19, 18) || lda_dlmod;
	     end;
	if stoff = 0
	then ic = ic - 1;				/* don't store value in memory */
	else instr (ic) = "110"b || substr (unspec (stoff), 22, 15) || sta;
	call cobol_emit (instr_ptr, null (), ic);
	return;


/*************************************/

/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

%include cobol_type1;
%include cobol_type7;
%include cobol_type9;
%include cobol_fixed_common;
%include cobol_ext_;
%include cobol_;

     end cobol_get_size;
