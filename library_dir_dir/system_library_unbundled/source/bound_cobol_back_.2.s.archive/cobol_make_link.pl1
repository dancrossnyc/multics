/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_make_link.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 07/02/79 by FCH, [4.0-1], more than one size allowed for FSBs */
/* Modified on 12/29/78 by FCH, [3.0-2], size check for initialization data */
/* Modified on 07/18/78 by RAL, [3.0-1], changed linkage_header */
/* Modified since Version 3.0	*/

/* format: style3 */
cobol_make_link:
     proc;

/* this is an improper entry point */

	type = 0;
	module_name = "cobol_make_link";
	reset_loc = def_wd_off;
	call error (msg_9);
	return;

dcl	1 acc_string	aligned based (ds_wrk_ptr),
	  2 nam_lnth	bit (9) unaligned,
	  2 char_string	char (32) unaligned;

dcl	ds_strng		char (ds_lnth) based (def_base_ptr);
dcl	nam_strng		char (32) based (ds_wrk_ptr);

dcl	1 type_pair	aligned based (ds_wrk_ptr),
	  2 link_type	bit (18) unaligned,
	  2 trap_relp	bit (18) unaligned,
	  2 seg_name_relp	bit (18) unaligned,
	  2 ent_name_relp	bit (18) unaligned;

dcl	typ_pr_strng	char (8) based (ds_wrk_ptr);

dcl	1 expression_word	aligned based (ds_wrk_ptr),
	  2 type_pair_relp	bit (18) unaligned,
	  2 expression	bit (18) unaligned;

dcl	1 link		aligned based (ls_wrk_ptr),
	  2 header_relp	bit (18) unaligned,
	  2 ignore_1	bit (12) unaligned,
	  2 tag		bit (6) unaligned,
	  2 expr_word_relp	bit (18) unaligned,
	  2 ignore_2	bit (12) unaligned,
	  2 modifier	bit (6) unaligned;

dcl	1 linkage_header	aligned based (ls_wrk_ptr),
	  2 pad		bit (36),
	  2 def_sect_relp	bit (18) unaligned,
	  2 first_ref_relp	bit (18) unaligned,
	  2 obsolete_ptr	ptr unal,			/* [3.0-1] */
	  2 original_linkage_ptr
			ptr unal,			/* [3.0-1] */
	  2 unused	bit (72),			/* [3.0-1] */
	  2 links_relp	bit (18) unaligned,
	  2 link_sect_lgth	bit (18) unaligned,
	  2 object_seg	bit (18) unaligned,
	  2 obsolete_length bit (18) unaligned;

dcl	1 initialization_info
			aligned based (init_ptr),
	  2 n_words	fixed bin,
	  2 code		fixed bin,
	  2 info		(0 refer (n_words)) aligned bit (36);

dcl	init_info		char (262144) aligned based;

dcl	1 error_info	aligned,
	  2 module_name	char (32),
	  2 err_msg_lnth	fixed bin,
	  2 error_msg	char (168);

dcl	err_sw		fixed bin init (-1);

/*[4.0-1]*/
declare	1 init_areas	static internal,		/*[4.0-1]*/
	  2 size		fixed bin,		/* table size */
						/*[4.0-1]*/
	  2 entry		(16),			/*[4.0-1]*/
	    3 nwords	fixed bin,		/* area size */
						/*[4.0-1]*/
	    3 def_off	fixed bin;		/* offset in def section */

/*[4.0-1]*/
declare	res		fixed bin;

dcl	(ds_wrk_ptr, ls_wrk_ptr, init_ptr, type_pr_reloc_ptr)
			ptr;
dcl	(init_info_loc, seg_name_loc, ent_name_loc)
			fixed bin;
dcl	(lnk_typ, reset_loc, est_init_info_loc, express_loc)
			fixed bin;
dcl	(type_pair_loc, expr_word_loc, linkoff)
			fixed bin;
dcl	(i, j, type, x, segl, first, seg_code)
			fixed bin;
dcl	(nl, nwrds, next_loc, nchar, entl, name_sw)
			fixed bin;
dcl	(beg_link_loc, cur_link_loc, end_link_loc)
			fixed bin;
dcl	(exp_wd_loc, typ_pr_loc, name_loc, ds_lnth)
			fixed bin;
dcl	(n_lnks, n_args, code)
			fixed bin;
dcl	(ds_srch_ptr, ls_srch_ptr)
			ptr;
dcl	save_name_loc	fixed bin;
dcl	(lnk_offset, ln_lnth)
			fixed bin init (0);
dcl	name		char (*);
dcl	(linkoff_char, num_links_char)
			char (6);
dcl	(lo_lnth, nl_lnth)	fixed bin;
dcl	lo_char		char (lo_lnth) based (lo_ptr);
dcl	nl_char		char (nl_lnth) based (nl_ptr);
dcl	(lo_ptr, nl_ptr)	ptr;
dcl	ck_name		char (64);
dcl	link_name		char (ln_lnth) based (addr (ck_name));
dcl	temp		fixed bin;

type_5:
     entry (linkoff, name, init_ptr, est_init_info_loc);

	type = 5;
	module_name = "cobol_make_link$type_5 ";
	reset_loc = def_wd_off;			/* ck if space for type-5 link already established */
						/*[4.0-1]*/
	res = 1;					/*[4.0-1]*/
	nwrds = initialization_info.n_words;

/*[4.0-1]*/
	if est_init_info_loc = 0			/*[4.0-1]*/
	then do;
		est_init_info_loc = 1;		/*[4.0-1]*/
		init_areas.size = 0;		/*[4.0-1]*/
	     end;					/*[4.0-1]*/
	else do i = 1 by 1 to init_areas.size while (res = 1);

/*[4.0-1]*/
		if nwrds = init_areas.entry.nwords (i)
		then res = 0;

/*[4.0-1]*/
	     end;

/*[4.0-1]*/
	if res = 1				/*[4.0-1]*/
	then do;
		init_areas.size = init_areas.size + 1;	/*[4.0-1]*/
		init_areas.entry.nwords (init_areas.size) = nwrds;
						/*[4.0-1]*/
		init_areas.entry.def_off (init_areas.size) = def_wd_off;
						/*[4.0-1]*/
		init_info_loc = def_wd_off;		/*[4.0-1]*/
	     end;					/*[4.0-1]*/
	else init_info_loc = init_areas.entry.def_off (i - 1);

/*[4.0-1]*/
	ds_wrk_ptr = addrel (def_base_ptr, init_info_loc);

/*[4.0-1]*/
	nwrds = nwrds + 2;

	call ds_size_ck (nwrds);
	if (err_sw = 0)
	then return;

	nchar = fixed (substr (unspec (nwrds), 3, 36), 36);
	substr (ds_wrk_ptr -> init_info, 1, nchar) = substr (init_ptr -> init_info, 1, nchar);
						/* ck if init_info structure is being posted */
	if (init_info_loc = def_wd_off)
	then do;					/* yes, update def_wd_off and emit relocation info */
		def_wd_off = def_wd_off + nwrds;
		call cobol_reloc (null (), (2 * nwrds), 3003);
	     end;

	type_pr_reloc_ptr = addr (type_pr6_reloc);

	call create_acc_string;

	return;

type_4:
     entry (linkoff, name);

	type = 4;
	module_name = "cobol_make_link$type_4";
	reset_loc = def_wd_off;
	init_info_loc = 0;
	type_pr_reloc_ptr = addr (type_pr4_reloc);

	call create_acc_string;

	return;

create_acc_string:
     proc;

	if type = 5
	then seg_name_loc = 5;
	else seg_name_loc = def_wd_off;
	save_name_loc = def_wd_off;

	nl = index (name, " ") - 1;

	if (nl < 0)
	then nl = length (name);
	i = index (name, "$");

	if (i = 0)
	then do;
		entl = 0;
		segl = nl;
	     end;
	else do;
		entl = nl - i;
		segl = i - 1;
	     end;

	name_sw = 0;
	nchar = segl;
	first = 1;

	do while ("1"b);

	     ds_wrk_ptr = addrel (def_base_ptr, def_wd_off);
	     nam_lnth = substr (unspec (nchar), 28, 9);
	     nwrds = 1 + fixed (substr (unspec (nchar), 1, 34), 36);
						/* = 1+(nchar/4) */

	     call ds_size_ck (nwrds);
	     if (err_sw = 0)
	     then return;

	     substr (char_string, 1, nchar) = substr (name, first, nchar);
						/* before posting acc string, search def section to see
						   if an acc string for this "name" already exists  */
	     ds_lnth = def_wd_off * 4;
	     name_loc = index (ds_strng, substr (nam_strng, 1, nchar + 1)) - 1;

	     if (name_loc > -1)
	     then do;				/* acc strng for this name found,
						   ck whether seg_name or ent_name */
		     name_loc = divide (name_loc, 4, 17, 0);

		     if (name_sw = 0)
		     then if type ^= 5
			then seg_name_loc = name_loc;
			else do;
				seg_name_loc = 5;
				save_name_loc = name_loc;
			     end;
		     else ent_name_loc = name_loc;

		end;
	     else do;
		     def_wd_off = def_wd_off + nwrds;
		     call cobol_reloc (null (), (2 * nwrds), 3003);
		end;

	     if name_sw ^= 0
	     then do;
		     call create_type_pair;
		     return;
		end;

	     if (entl = 0)
	     then do;				/* link requested contains segment name only */
		     if type = 5
		     then ent_name_loc = save_name_loc;
		     else ent_name_loc = seg_name_loc;

		     call create_type_pair;

		     return;
		end;				/* link requested contains entry name,
						   reset parameters for entry name processing */
	     name_sw = 1;
	     nchar = entl;
	     first = i + 1;
	     ent_name_loc = def_wd_off;

	end;

     end;

type_1:
     entry (linkoff, seg_code);

	type = 1;
	module_name = "cobol_make_link$type_1";
	reset_loc = def_wd_off;
	seg_name_loc = seg_code;
	ent_name_loc, init_info_loc = 0;
	type_pr_reloc_ptr = addr (type_pr1_reloc);

	call create_type_pair;
	return;

create_type_pair:
     proc;

/*   The following operations are common to ALL link types    */

	ds_wrk_ptr = addrel (def_base_ptr, def_wd_off);
	type_pair_loc = def_wd_off;

	call ds_size_ck (3);
	if (err_sw = 0)
	then return;

	link_type = substr (unspec (type), 19, 18);
	trap_relp = substr (unspec (init_info_loc), 19, 18);
	seg_name_relp = substr (unspec (seg_name_loc), 19, 18);
	ent_name_relp = substr (unspec (ent_name_loc), 19, 18);
						/* before posting type-pair and expression word to
						   def section, check to see if a type 4 or 5 link
						   has already been made for this "name" */
	ds_lnth = def_wd_off * 4;
	typ_pr_loc = index (ds_strng, typ_pr_strng) - 1;

	if (typ_pr_loc > -1)
	then do;					/* type-pair for this link-type and "name" found,
						   calculate expr wrd loc for this type-pair
						   search link section to find link to this expr word
						   return offset of this already made link */
		typ_pr_loc = divide (typ_pr_loc, 4, 17, 0);
		exp_wd_loc = typ_pr_loc + 2;
		ls_wrk_ptr = link_base_ptr;
		beg_link_loc, cur_link_loc = fixed (substr (links_relp, 1, 18), 36);
		end_link_loc = beg_link_loc + fixed (substr (link_sect_lgth, 1, 18), 36);

/* bypass search until AFTER 1st link has been made */

		if ^(link_wd_off = beg_link_loc)
		then do;

srch_lp:
			ls_srch_ptr = addrel (link_base_ptr, cur_link_loc);
			expr_word_loc = fixed (substr (ls_srch_ptr -> expr_word_relp, 1, 18), 36);

			if (exp_wd_loc = expr_word_loc)
			then do;			/* link found, return offset to this link */
				linkoff = cur_link_loc;
				return;
			     end;

			cur_link_loc = cur_link_loc + 2;

			if (cur_link_loc < end_link_loc)
			then goto srch_lp;

		     end;
	     end;

/* link not found, post type-pair, update def_wd_off
				   and emit relocation information for this link type */
	def_wd_off = def_wd_off + 2;
	call cobol_reloc (type_pr_reloc_ptr, 4, 3003);

	ds_wrk_ptr = addrel (def_base_ptr, def_wd_off);
	expr_word_loc = def_wd_off;
	type_pair_relp = substr (unspec (type_pair_loc), 19, 18);
	expression = (18)"0"b;
	def_wd_off = def_wd_off + 1;

	call cobol_reloc (addr (expr_word_reloc), 2, 3003);


	ls_wrk_ptr = link_base_ptr;
	if (link_sect_lgth = "0"b)
	then link_sect_lgth = links_relp;

	ls_wrk_ptr = addrel (link_base_ptr, link_wd_off);

	linkoff = link_wd_off;

	call ls_size_ck (2);
	if (err_sw = 0)
	then return;

	string (link) = "000000000000000000000000000000100110"b;
	temp = -link_wd_off;
	header_relp = substr (unspec (temp), 19, 18);
	expr_word_relp = substr (unspec (expr_word_loc), 19, 18);
	link_wd_off = link_wd_off + 2;
	ls_wrk_ptr = link_base_ptr;
	temp = fixed (link_sect_lgth, 18) + 2;
	link_sect_lgth = substr (unspec (temp), 19, 18);

	call cobol_reloc (addr (link_reloc), 4, 3002);

     end;

size_ck:
     proc;
dcl	(ds_size_ck, ls_size_ck)
			entry;
dcl	block_size	fixed bin;

ds_size_ck:
     entry (block_size);

	next_loc = def_wd_off + block_size;

	if (next_loc > def_max)
	then do;
		call error (msg_5);
		return;
	     end;
	return;

ls_size_ck:
     entry (block_size);

	next_loc = link_wd_off + block_size;

	if (next_loc > link_max)
	then do;
		call error (msg_6);
		return;
	     end;
     end size_ck;

error:
     proc (err_msg);

dcl	err_msg		char (*);
dcl	l_name		char (68);

	if (type = 1)
	then l_name = "type-1";
	else if ((type = 4) | (type = 5))
	then l_name = name;
	else if (type = 0)
	then l_name = "";

	call ioa_$rsnnl ("^a ABORTING type ^o link -> ""^a""", error_msg, err_msg_lnth, err_msg, type, l_name);
	call signal_ ("command_error", null, addr (error_info));

	linkoff = 0;
	err_sw = 0;
	def_wd_off = reset_loc;
     end error;

%include cobol_make_link_info;
%include cobol_make_link_data;

     end cobol_make_link;
