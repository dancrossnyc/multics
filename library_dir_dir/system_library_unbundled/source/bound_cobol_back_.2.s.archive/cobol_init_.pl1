/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_init_.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 04/27/78 by FCH, [3.0-1], symbol section(source module path name) */
/* Modified since Version 3.0.	*/

/* format: style3 */
cobol_init_:
     proc (fpath, rtbuff_ptr);

dcl	fpath		char (168),
	tpath		char (168) aligned;		/*[3.0-1] */
dcl	rtbuff_ptr	ptr;			/* for use by replacement */

dcl	segname		char (32);
dcl	path		char (168);
dcl	segptr		ptr;
dcl	mcode		fixed bin (35);

dcl	evar		entry auto;
dcl	bptr		ptr based (addr (evar));

dcl	cobol_def_init	entry;
dcl	cobol_link_init	entry;
dcl	cobol_sym_init	entry (char (168) aligned);	/* [3.0-1] */
dcl	com_err_		entry options (variable);
dcl	hcs_$make_seg	entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl	hcs_$make_ptr	entry (ptr, char (*), char (*), ptr, fixed bin (35));
dcl	hcs_$initiate	entry (char (*) aligned, char (*), char (*), fixed bin (1), fixed bin (2), ptr,
			fixed bin (35));
dcl	hcs_$truncate_seg	entry (ptr, fixed bin, fixed bin (35));


/*************************************/
start:
	evar = cobol_init_;
	cobol_$scratch_dir = fpath;

	segname = "cobol_seg1_";
	call hcs_$make_seg (fpath, segname, "", 01011b, segptr, mcode);

	if segptr = null ()
	then go to merror1;

	if mcode ^= 0
	then do;
		call hcs_$truncate_seg (segptr, 0, mcode);
		if mcode ^= 0
		then go to merror1;
	     end;

	cobol_$misc_base_ptr, cobol_$misc_end_ptr = segptr;
	cobol_$misc_max = 32767;
	cobol_$pd_map_ptr = pointer (segptr, 32768);
	cobol_$pd_map_max = 32767;
	cobol_$pd_map_index = 0;
	cobol_$map_data_ptr = pointer (segptr, 65536);
	cobol_$map_data_max = 32767;
	cobol_$tag_table_ptr = pointer (segptr, 98304);
	cobol_$tag_table_max = 32767;
	cobol_$fixup_ptr = pointer (segptr, 131072);
	cobol_$fixup_max = 32767;
	cobol_$token_block1_ptr = pointer (segptr, 172032);
	cobol_$token_block2_ptr = pointer (segptr, 173056);
	cobol_$include_info_ptr = pointer (segptr, 174080);
	cobol_$allo1_max = 86000;
	cobol_$allo1_ptr = pointer (segptr, 176080);

	segname = "cobol_seg2_";
	call hcs_$make_seg (fpath, segname, "", 01011b, segptr, mcode);

	if segptr = null ()
	then go to merror1;

	if mcode ^= 0
	then do;
		call hcs_$truncate_seg (segptr, 0, mcode);
		if mcode ^= 0
		then go to merror1;
	     end;

	cobol_$text_base_ptr = segptr;
	cobol_$text_wd_off = 0;
	cobol_$con_end_ptr = pointer (segptr, 131071);
	cobol_$con_wd_off = 1;
	cobol_$link_base_ptr = pointer (segptr, 131072);
	cobol_$link_max = 12287;
	cobol_$link_wd_off = 0;
	cobol_$def_base_ptr = pointer (segptr, 155648);
	cobol_$def_max = 32767;
	cobol_$def_wd_off = 0;
	cobol_$reloc_text_base_ptr = pointer (segptr, 188416);
	cobol_$reloc_text_max = 147429;
	cobol_$reloc_def_base_ptr = pointer (segptr, 192512);
	cobol_$reloc_def_max = 73692;
	cobol_$reloc_link_base_ptr = pointer (segptr, 194560);
	cobol_$reloc_link_max = 147429;
	cobol_$reloc_sym_base_ptr = pointer (segptr, 198656);
	cobol_$reloc_sym_max = 147429;
	cobol_$reloc_work_base_ptr = pointer (segptr, 202752);
	cobol_$reloc_work_max = 221148;
	cobol_$sym_base_ptr = pointer (segptr, 208896);
	cobol_$sym_max = 65535;
	cobol_$sym_wd_off = 0;

	cobol_$perform_list_ptr, cobol_$alter_list_ptr, cobol_$seg_init_list_ptr, cobol_$temp_token_area_ptr,
	     cobol_$temp_token_ptr, cobol_$ptr_status_ptr, cobol_$reg_status_ptr = null ();

	segname = "cobol_seg3_";
	call hcs_$make_seg (fpath, segname, "", 01011b, segptr, mcode);

	if segptr = null ()
	then go to merror1;

	if mcode ^= 0
	then do;
		call hcs_$truncate_seg (segptr, 0, mcode);
		if mcode ^= 0
		then go to merror1;
	     end;

	cobol_$eln_ptr = pointer (segptr, 0);
	cobol_$eln_max = 65535;
	cobol_$statement_info_ptr = pointer (segptr, 65536);
	cobol_$xref_token_ptr = pointer (segptr, 131072);
	cobol_$xref_chain_ptr = pointer (segptr, 196608);

	segname = "cobol_ntbuff_";
	call hcs_$make_seg (fpath, segname, "", 01011b, segptr, mcode);

	if segptr = null ()
	then go to merror1;

	if mcode ^= 0
	then do;
		call hcs_$truncate_seg (segptr, 0, mcode);
		if mcode ^= 0
		then go to merror1;
	     end;

	rtbuff_ptr = segptr;
	cobol_$ntbuf_ptr = segptr;

	cobol_$cobol_data_wd_off, cobol_$debug_enable, cobol_$data_init_flag, cobol_$include_cnt, cobol_$fs_charcnt,
	     cobol_$ws_charcnt, cobol_$coms_charcnt, cobol_$ls_charcnt, cobol_$cons_charcnt, cobol_$value_cnt,
	     cobol_$cd_cnt, cobol_$fs_wdoff, cobol_$ws_wdoff, cobol_$coms_wdoff = 0;
	cobol_$same_sort_merge_proc = "0"b;

	segname = "cobol_diag_table_";
	call hcs_$make_ptr (bptr, segname, segname, cobol_$diag_ptr, mcode);

	if cobol_$diag_ptr = null ()
	then go to merror3;

	segname = "cobol_reswd_table_";
	call hcs_$make_ptr (bptr, segname, segname, cobol_$reswd_ptr, mcode);

	if cobol_$reswd_ptr = null ()
	then go to merror3;

	segname = "cobol_operators_";
	call hcs_$make_ptr (bptr, segname, segname, cobol_$op_con_ptr, mcode);

	if cobol_$op_con_ptr = null ()
	then go to merror3;
	cobol_$op_con_ptr = addrel (cobol_$op_con_ptr, 2048);

	return;


/*************************************/
segs:
     entry (code, tpath);				/* [3.0-1] */

dcl	code		fixed bin (35);

start_segs:
	call cobol_def_init;
	call cobol_link_init;
	call cobol_sym_init (tpath);			/* [3.0-1] */

	cobol_$initval_flag = 0;
	segname = "cobol_initval_";

	call hcs_$initiate (cobol_$scratch_dir, segname, "", 0b, 00b, cobol_$initval_base_ptr, mcode);

	if cobol_$initval_base_ptr = null ()
	then go to merror2;

	code = 0;
	return;


/*************************************/
merror1:
	path = fpath;
	rtbuff_ptr = null ();			/* signal to driver */
	go to merror;

merror2:
	path = cobol_$scratch_dir;
	code = mcode;				/* signal to driver */

merror:
	call com_err_ (mcode, "cobol", " ^a>^a", path, segname);
	return;
merror3:
	rtbuff_ptr = null ();

	call com_err_ (mcode, "cobol", " ^a$^a", segname, segname);

	return;

/*************************************/

/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

%include cobol_;

     end cobol_init_;
