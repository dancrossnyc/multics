/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_make_xref_.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 11/03/81 by FCH, char6 replaced by char8, [5.1-1], phx10955(BUG496) */
/* Modified on 05/16/80 by FCH, [4.2-1], decl for tag_addr corrected */
/* Modified on 07/08/77 by GM to fix  binary output on cross ref. */
/* Modified on 02/10/77 by ORN to include cd-name info and misc changes */
/* Modified on 01/19/77 by ORN to give occurs info and full class description */
/* Modified since Version 2.0 */

/* format: style3 */
cobol_make_xref_:
     proc;

/* Produces an Cross-Reference Listing in the List segment when "symbols" option is specified. */

dcl	(p, q)		ptr;
dcl	line_ptr		ptr;
dcl	dn_ptr		ptr;
dcl	name_ptr		ptr;
dcl	ft_ptr		ptr;
dcl	(ff, nl)		char (1);			/*[5.1-1]*/
dcl	char8		char (8);
dcl	char9		char (9);
dcl	p_type		char (1);
dcl	picture_string	char (15);
dcl	noxref		char (35);
dcl	c		char (4) based (q);
dcl	name_string	char (30) varying;
dcl	bit9		bit (9) based;
dcl	bit36		bit (36) based (addr (number));
dcl	(i, n, t)		fixed bin;
dcl	char_off		fixed bin (21);
dcl	char_offset	fixed bin;
dcl	c_off		fixed bin;
dcl	cv_length		fixed bin;
dcl	fl_length		fixed bin;
dcl	cv_off		fixed bin;
dcl	name_length	fixed bin;
dcl	left		fixed bin;
dcl	tag_loc		fixed bin;
dcl	number		fixed bin (35);
dcl	s		fixed bin (35);
dcl	mcode		fixed bin (35);		/*[4.2-1]*/
declare	1 DEF		aligned based (cobol_$tag_table_ptr),
						/*[4.2-1]*/
	  2 tag_max	fixed bin,		/*[4.2-1]*/
	  2 TAG		(32767),			/*[4.2-1]*/
	    3 tag_addr	fixed bin (17) unal,	/*[4.2-1]*/
	    3 tag_no	fixed bin (17) unal;
dcl	code_generated	bit (1);
dcl	alpha		bit (1);
dcl	numeric		bit (1);
dcl	edited		bit (1);
dcl	varying		bit (1);
dcl	fixed_binary	bit (1);
dcl	char_string	char (1048576) based (cobol_$list_ptr);
dcl	line		char (120) based (line_ptr);
dcl	maxlen_id		char (23) based (line_ptr);
dcl	1 print_line	unaligned based (line_ptr),
	  2 identifier	char (18),
	  2 filler1	char (2),
	  2 level_no	char (2),
	  2 filler2	char (2),
	  2 type		char (4),
	  2 filler3	char (2),
	  2 offset	char (6),
	  2 bit_offset	char (4),
	  2 redef		char (1),
	  2 filler4	char (1),
	  2 usage		char (15),
	  2 filler5	char (1),
	  2 occ		char (2),
	  2 filler6	char (2),
	  2 pic_string	char (15),
	  2 filler7	char (2);
dcl	def_ref		char (100) based (line_ptr);
dcl	1 header_line	unaligned based (line_ptr),
	  2 form_feed_char	char (1),
	  2 new_line_char1	char (1),
	  2 header_field	char (82),
	  2 new_line_char2	char (1),
	  2 new_line_char3	char (1);
dcl	1 token		based,
	  2 size		fixed bin (15),
	  2 line		fixed bin (15),
	  2 column	fixed bin (15),
	  2 type		fixed bin (15);
dcl	1 c_n		based (p),
	  2 size		fixed bin (15),
	  2 line		fixed bin (15),
	  2 column	fixed bin (7),
	  2 type		fixed bin (7),		/* type = 11 */
	  2 string_ptr	ptr,
	  2 prev_rec	ptr,
	  2 info		bit (8),
	  2 def_line	fixed bin (15),
	  2 level		fixed bin (7),
	  2 num_lits	fixed bin (15),
	  2 name_size	fixed bin (7),
	  2 name		char (c_n.name_size);

dcl	display_sign	(0:4) char (6) static init ("eric", " trovr", " ldovr", " trsep", " ldsep");

dcl	hcs_$set_bc_seg	entry (ptr, fixed bin (24), fixed bin (35));
dcl	cobol_read_ft	entry (fixed bin, ptr);
dcl	ioa_		entry options (variable);

dcl	addr		builtin;
dcl	addrel		builtin;
dcl	divide		builtin;
dcl	fixed		builtin;
dcl	length		builtin;
dcl	mod		builtin;
dcl	substr		builtin;

dcl	dn		(1000) char (1) based (dn_ptr);
						/* used for calculating type 9 extension offsets */



/*************************************/
start:
	call sort_tokens;

	addr (ff) -> bit9 = "000001100"b;		/* form feed char */
	addr (nl) -> bit9 = "000001010"b;		/* new line char */
	q = addr (s);
	code_generated = fixed_common.fatal_no = 0;
	char_off = cobol_$list_off;
	line_ptr = addr (substr (char_string, char_off, 1));
	if cobol_$xref_bypass
	then do;
		noxref = "NO CROSS-REFERENCE LISTING PRODUCED";
		line = nl || noxref || nl;
		char_off = char_off + 37;
		go to finish_up;
	     end;
	header_line.form_feed_char = ff;
	header_line.new_line_char1 = nl;
	header_line.header_field =
	     "IDENTIFIER	LN  TYPE  OFFSET	  USAGE/CLASS     DM  PICTURE          DEF. REF. LINES";
	header_line.new_line_char2 = nl;
	header_line.new_line_char3 = nl;
	char_off = char_off + 86;
	line_ptr = addr (substr (char_string, char_off, 1));
	line = " ";
	do i = 1 to token_count;
	     p = token_ptr (i);
	     go to token_type (p -> token.type);

token_type (7):					/* Procedure Definition (label) */
token_type (18):					/* Procedure Reference (label reference) */
	     proc_def_ptr = p;
	     name_string = proc_def.name;
	     call fill_identifier (23);
	     print_line.type = "TEXT";
	     if code_generated
	     then do;
		     tag_loc = cobol_$tag_table_ptr -> tag_addr (proc_def.proc_num);
		     do while (tag_loc < 0);
			tag_loc = cobol_$tag_table_ptr -> tag_addr (-tag_loc);
		     end;
		     number = cobol_$constant_offset + tag_loc;
		     call convert_word_offset;
		end;
	     if proc_def.section_name
	     then print_line.usage = "section-name";
	     else print_line.usage = "paragraph-name";
	     eln_index = proc_def.def_line;
	     go to next;

token_type (9):					/* Data-Name */
	     dn_ptr = p;
	     if data_name.name = "FILLER"
	     then go to token_type (0);
	     if data_name.name = "SYSTEM-STATUS" | data_name.name = "TALLY" | data_name.name = "LINAGE-COUNTER"
	     then go to token_type (0);
	     fixed_binary = "0"b;
	     name_string = data_name.name;
	     call fill_identifier (19);
	     number = data_name.level;
	     call convert10;			/*[5.1-1]*/
	     print_line.level_no = substr (char8, 7, 2);
	     if data_name.working_storage
	     then do;
		     print_line.type = "DATA";
		     number = data_name.offset;
		     call convert_offset;
		end;
	     else if data_name.constant_section
	     then do;
		     print_line.type = "CNST";
		     if code_generated
		     then do;
			     number = data_name.offset;
			     char_offset = fixed (substr (bit36, 35, 2), 17);
			     number = cobol_$constant_offset - fixed (substr (bit36, 1, 34), 35);
			     call convert_word_offset;
			     call convert_bit_offset;
			end;
		end;
	     else if data_name.file_section
	     then do;
		     print_line.type = "FREC";
		     number = data_name.offset;
		     call convert_offset;
		end;
	     else if data_name.communication_section
	     then do;
		     print_line.type = "CREC";
		     number = data_name.offset;
		     call convert_offset;
		end;
	     else if data_name.linkage_section
	     then do;
		     print_line.type = "PARM";
		     number = data_name.offset;
		     call convert_offset;
		     number = data_name.linkage;
		     call convert10;
		     if data_name.level = 01 | data_name.level = 77
		     then do;
			     print_line.bit_offset = "";
			     print_line.offset = substr (char8, cv_off, cv_length);
			end;
		     else if substr (print_line.offset, 1, cv_length + 1) = substr ("000000", 1, cv_length + 1)
		     then substr (print_line.offset, 1, cv_length + 1) = substr (char8, cv_off, cv_length) || "/";
		     else do;
			     print_line.bit_offset = "";
			     print_line.offset = substr (char8, cv_off, cv_length) || "/.....";
			end;
		end;
	     if data_name.display
	     then do;
		     if data_name.numeric
		     then print_line.usage = "DSPLY num" || display_sign (fixed (data_name.sign_type, 17));
		     else if data_name.alphanum
		     then print_line.usage = "DSPLY alphanum";
		     else if data_name.numeric_edited
		     then print_line.usage = "DSPLY num-edit";
		     else if data_name.alphabetic
		     then print_line.usage = "DSPLY alphabet";
		     else print_line.usage = "DSPLY alph-edit";
		end;
	     else if data_name.non_elementary
	     then print_line.usage = "GROUP alphanum";
	     else if data_name.usage_index
	     then print_line.usage = "INDEX";
	     else if data_name.ascii_packed_dec_h
	     then print_line.usage = "COMP8 numeric";
	     else if data_name.ascii_packed_dec
	     then print_line.usage = "COMP5 numeric";
	     else if data_name.bin_18
	     then do;
		     print_line.usage = "COMP7 numeric";
		     print_line.pic_string = "S9(6)  bin(17)";
		     fixed_binary = "1"b;
		end;
	     else if data_name.bin_36
	     then do;
		     print_line.usage = "COMP6 numeric";
		     print_line.pic_string = "S9(11)  bin(35)";
		     fixed_binary = "1"b;
		end;
	     else if data_name.ebcdic_packed_dec
	     then print_line.usage = "COMP3 numeric";
	     else if data_name.bin_16
	     then do;
		     print_line.usage = "COMP1 numeric";
		     print_line.pic_string = "S9(5)  bin(15)";
		     fixed_binary = "1"b;
		end;
	     else if data_name.bin_32
	     then do;
		     print_line.usage = "COMP2 numeric";
		     print_line.pic_string = "S9(9)  bin(31)";
		     fixed_binary = "1"b;
		end;
	     if data_name.occurs_ptr ^= 0
	     then do;
		     occurs_ptr = addr (dn (data_name.occurs_ptr));
		     if occurs.dimensions = 1
		     then print_line.occ = " 1";
		     else if occurs.dimensions = 2
		     then print_line.occ = " 2";
		     else print_line.occ = " 3";
		     if data_name.occurs_do
		     then substr (print_line.occ, 1, 1) = "*";
		end;
	     else print_line.occ = "";

	     if data_name.s_of_rdf
	     then print_line.redef = "r";
	     else print_line.redef = "";

	     if ^fixed_binary
	     then do;
		     edited = data_name.alphanum_edited | data_name.alphabetic_edited | data_name.numeric_edited;
		     varying = data_name.pic_has_l | data_name.pic_is_do;
		     if edited & varying
		     then print_line.pic_string = "EDITED,VARYING";
		     else do;
			     alpha = "0"b;
			     numeric = "0"b;
			     if data_name.alphanum | data_name.alphanum_edited | data_name.non_elementary
			     then do;
				     alpha = "1"b;
				     picture_string = "X(";
				     c_off = 3;
				end;
			     else if data_name.alphabetic | data_name.alphabetic_edited
			     then do;
				     alpha = "1"b;
				     picture_string = "A(";
				     c_off = 3;
				end;
			     else do;
				     numeric = data_name.numeric | data_name.numeric_edited;
				     picture_string = " ";
				     c_off = 1;
				end;
			     if alpha
			     then do;
				     number = data_name.item_length;
				     call convert10;
				     substr (picture_string, c_off, cv_length + 1) =
					substr (char8, cv_off, cv_length) || ")";
				     c_off = c_off + cv_length + 1;
				end;
			     else if numeric
			     then do;
				     left = data_name.places_left;
				     if data_name.numeric
				     then if data_name.item_signed
					then if data_name.display | data_name.ascii_packed_dec
						| data_name.ascii_packed_dec_h
					     then do;
						     substr (picture_string, c_off, 1) = "S";
						     c_off = 2;
						end;
				     if left < 0
				     then do;
					     p_type = "P";
					     number = -left;
					     call fill_pic_field;
					end;
				     else if left > 0 & data_name.places_right > 0
				     then do;
					     p_type = "9";
					     number = left;
					     call fill_pic_field;
					     left = 0;
					end;
				     if left = 0
				     then do;
					     substr (picture_string, c_off, 1) = "V";
					     c_off = c_off + 1;
					end;
				     p_type = "9";
				     number = left + data_name.places_right;
				     call fill_pic_field;
				     if data_name.places_right < 0
				     then do;
					     p_type = "P";
					     number = -data_name.places_right;
					     call fill_pic_field;
					end;
				end;
			     if edited
			     then if c_off > 12
				then picture_string = "EDITED";
				else if c_off > 10
				then substr (picture_string, c_off) = "EDIT";
				else substr (picture_string, c_off) = "EDITED";
			     else if varying
			     then if c_off > 13
				then picture_string = "VARYING";
				else if c_off > 9
				then substr (picture_string, c_off) = "VAR";
				else substr (picture_string, c_off) = "VARYING";
			     print_line.pic_string = picture_string;
			end;
		end;
	     eln_index = data_name.def_line;
	     go to next;


token_type (10):					/* Index-Name */
	     ind_ptr = p;
	     name_string = substr (index_name.name, 1, index_name.name_size);
	     call fill_identifier (23);
	     print_line.type = "DATA";
	     number = index_name.offset;
	     call convert_offset;
	     print_line.usage = "index-name";
	     eln_index = index_name.def_line;
	     go to next;

token_type (11):					/* Condition Name */
	     name_string = c_n.name;
	     call fill_identifier (19);
	     print_line.level_no = "88";
	     print_line.usage = "CONDITION NAME";
	     eln_index = c_n.def_line;
	     go to next;

token_type (12):					/* File Name */
	     print_line.level_no = "FD";
join_file:
	     name_ptr = p;
	     name_string = fd_token.name;
	     call fill_identifier (19);
	     call cobol_read_ft (fd_token.file_no, ft_ptr);
	     print_line.type = "FILE";
	     number = file_table.cra_offset;
	     call convert_offset;
	     if p -> token.type = 16
	     then print_line.usage = "SORT";
	     else do;				/* Fill in file organization and access. */
		     go to org (file_table.organization);
org (0):
org (1):
		     print_line.usage = "SEQ";
		     go to fill_access;
org (2):
		     print_line.usage = "REL";
		     go to fill_access;
org (3):
		     print_line.usage = "INX";
		     go to fill_access;
org (4):
org (5):
		     print_line.usage = "STR";
		     go to fill_access;
fill_access:
		     go to acc (file_table.access);
acc (0):
acc (1):
		     substr (print_line.usage, 4, 4) = "/SEQ";
		     go to fill_device;
acc (2):
		     substr (print_line.usage, 4, 4) = "/RND";
		     go to fill_device;
acc (3):
		     substr (print_line.usage, 4, 4) = "/DYN";
		     go to fill_device;
fill_device:
		     go to dev (file_table.device);
dev (0):
dev (6):
		     substr (print_line.usage, 8, 8) = " virtual";
		     go to end_fd;
dev (1):
		     substr (print_line.usage, 8, 8) = " printer";
		     go to end_fd;
dev (2):
		     substr (print_line.usage, 8, 8) = " cardrdr";
		     go to end_fd;
dev (3):
		     substr (print_line.usage, 8, 8) = " cardpch";
		     go to end_fd;
dev (4):
		     substr (print_line.usage, 8, 8) = " disk";
		     go to end_fd;
dev (5):
		     substr (print_line.usage, 8, 8) = " tape";
		     go to end_fd;
dev (7):
dev (8):
dev (9):
dev (10):
end_fd:
		     if file_table.external
		     then substr (print_line.usage, 14, 3) = "ext";
		     picture_string = "X(";
		     c_off = 3;
		     number = file_table.max_cra_size;
		     call convert10;
		     substr (picture_string, c_off, cv_length + 1) = substr (char8, cv_off, cv_length) || ")";
		     c_off = c_off + cv_length + 1;
		     print_line.pic_string = picture_string;
		end;
	     eln_index = fd_token.def_line;
	     go to next;

token_type (13):
	     cdtoken_ptr = p;
	     print_line.level_no = "CD";
	     name_string = cdtoken.name;
	     call fill_identifier (19);
	     print_line.type = "COMM";
	     if cdtoken.options.input
	     then print_line.usage = "cd-name(input)";
	     else print_line.usage = "cd-name(output)";
	     eln_index = cdtoken.def_line;
	     go to next;
token_type (16):
	     print_line.level_no = "SD";
	     go to join_file;

token_type (17):
	     name_ptr = p;
	     name_string = mnemonic_name.name;
	     call fill_identifier (23);
	     print_line.type = "SYS";
	     print_line.usage = "mnemonic-name";
	     eln_index = mnemonic_name.def_line;
	     go to next;

token_type (40):
	     alpha_name_ptr = p;
	     name_string = alphabet_name.name;
	     call fill_identifier (23);
	     if alphabet_name.iw_key ^= 0
	     then print_line.type = "SYS";
	     else print_line.type = "CNST";
	     print_line.usage = "alphabet-name";
	     eln_index = alphabet_name.def_line;
	     go to next;


next:
	     call fill_def_ref;
	     line_ptr = addr (substr (char_string, char_off, 1));
	     line = " ";

token_type (0):
token_type (1):
token_type (2):
token_type (3):
token_type (4):
token_type (5):
token_type (6):
token_type (8):
token_type (14):
token_type (15):
token_type (19):
token_type (20):
	end;

finish_up:
	cobol_$list_off = char_off;
	call hcs_$set_bc_seg (cobol_$list_ptr, 9 * (cobol_$list_off - 1), mcode);
exit:
	return;



/*************************************/
fill_def_ref:
     proc;

	char_off = char_off + 79;
	line_ptr = addr (substr (char_string, char_off, 1));
	substr (def_ref, 1, 4) = "def ";
	call file_line;
	substr (def_ref, 5, fl_length) = substr (char9, 1, fl_length);
	c_off = fl_length + 6;
	n = addrel (p, divide (p -> token.size + 3, 4, 17, 0)) -> xref_chain.first;
	if n = 0
	then do;
		substr (def_ref, c_off, 5) = "NOREF";
		c_off = c_off + 5;
	     end;
	else do;
		substr (def_ref, c_off, 3) = "ref";
		c_off = c_off + 3;
		do while (n > 0);
		     eln_index = ref_line (n);
		     call file_line;
		     if c_off + fl_length > 39
		     then do;			/* close this line and start new line */
			     substr (def_ref, c_off, 1) = nl;
			     char_off = char_off + c_off;
			     substr (char_string, char_off, 16) = (7)"	" || (9)" ";
						/* 7 tabs + 9 spaces */
			     char_off = char_off + 16;
			     line_ptr = addr (substr (char_string, char_off, 1));
			     def_ref = " ";
			     c_off = 1;
			end;
		     else c_off = c_off + 1;		/* insert space between def-ref line nos */
		     substr (def_ref, c_off, fl_length) = substr (char9, 1, fl_length);
		     c_off = c_off + fl_length;
		     n = chain_area.next (n);
		end;
	     end;
	substr (def_ref, c_off, 1) = nl;
	char_off = char_off + c_off;

     end fill_def_ref;

file_line:
     proc;

	fl_length = 0;
	if eln_index ^= 0
	then number = eln_tab.fno (eln_index);
	else number = 0;
	if number > 0
	then do;
		call convert10;
		substr (char9, 1, cv_length) = substr (char8, cv_off, cv_length);
		fl_length = cv_length + 1;
		substr (char9, fl_length, 1) = "-";
	     end;
	if eln_index ^= 0
	then number = eln_tab.lno (eln_index);
	else number = 1;
	call convert10;
	substr (char9, fl_length + 1, cv_length) = substr (char8, cv_off, cv_length);
	fl_length = fl_length + cv_length;

     end file_line;

fill_pic_field:
     proc;

	substr (picture_string, c_off, 1) = p_type;
	c_off = c_off + 1;
	substr (picture_string, c_off, 1) = "(";
	c_off = c_off + 1;
	call convert10;
	substr (picture_string, c_off, cv_length) = substr (char8, cv_off, cv_length);
	c_off = c_off + cv_length;
	substr (picture_string, c_off, 1) = ")";
	c_off = c_off + 1;

     end fill_pic_field;

fill_identifier:
     proc (max);
dcl	max		fixed bin parameter;

	name_length = length (name_string);
	if name_length > max
	then do;
		line = name_string || nl;
		char_off = char_off + name_length + 1;
		line_ptr = addr (substr (char_string, char_off, 1));
		line = " ";
	     end;
	else substr (maxlen_id, 1, max) = name_string;

     end fill_identifier;

convert_offset:
     proc;

	char_offset = fixed (substr (bit36, 35, 2), 17);
	number = fixed (substr (bit36, 1, 34), 35);
	call convert_word_offset;

convert_bit_offset:
     entry;
	if p -> data_name.type = 9
	then if data_name.bit_offset ^= ""b
	     then go to half_byte_off (char_offset);
	go to byte_off (char_offset);
byte_off (1):
	print_line.bit_offset = "(9)";
	return;
half_byte_off (1):
	print_line.bit_offset = "(14)";
	return;
byte_off (2):
	print_line.bit_offset = "(18)";
	return;
half_byte_off (2):
	print_line.bit_offset = "(23)";
	return;
byte_off (3):
	print_line.bit_offset = "(27)";
	return;
half_byte_off (3):
	print_line.bit_offset = "(32)";
	return;
byte_off (0):
	return;
half_byte_off (0):
	print_line.bit_offset = "(5)";
	return;

     end convert_offset;

convert_word_offset:
     proc;

	print_line.offset = "000000";
	do t = 6 to 1 by -1 while (number > 0);
	     s = fixed (substr (bit36, 34, 3), 35) + 48;
	     substr (print_line.offset, t, 1) = substr (c, 4, 1);
	     number = fixed (substr (bit36, 1, 33), 35);
	end;

     end convert_word_offset;

convert10:
     proc;

	char8 = (8)"0";				/*[5.1-1]*/
	do t = 8 to 1 by -1 while (number > 0);
	     s = mod (number, 10) + 48;
	     substr (char8, t, 1) = substr (c, 4, 1);
	     number = divide (number, 10, 35, 0);
	     cv_off = t;
	end;					/*[5.1-1]*/
	cv_length = 9 - cv_off;

     end convert10;

sort_tokens:
     proc;

/* This routine sorts the array of ptrs to Name-Table tokens.
		   It does a Shell sort alphabetizing on the name in the token. */

dcl	(d, i, j, k)	fixed bin;
dcl	(p, p1, p2)	ptr;
dcl	name_string	char (30) varying based;

	d = token_count;

down:
	d = 2 * divide (d, 4, 17, 0) + 1;

	do i = 1 to token_count - d;
	     k = i + d;
	     p2 = token_area.name_ptr (k);

up:
	     j = k - d;
	     p1 = token_area.name_ptr (j);

	     if p1 -> name_string > p2 -> name_string
	     then do;
		     token_area.name_ptr (k) = p1;
		     token_area.name_ptr (j) = p2;
		     p = token_ptr (k);
		     token_ptr (k) = token_ptr (j);
		     token_ptr (j) = p;

		     if j > d
		     then do;
			     k = j;
			     go to up;
			end;
		end;
	end;

	if d > 1
	then go to down;

     end sort_tokens;

%include cobol_;
%include cobol_ext_;
%include cobol_fixed_common;
%include cobol_xref;
%include cobol_eln_table;
%include cobol_type7;
%include cobol_type9;
%include cobol_type10;
%include cobol_type12;
%include cobol_file_table;
%include cobol_type13;
%include cobol_type17;
%include cobol_type40;
%include cobol_occurs_ext;

     end cobol_make_xref_;
