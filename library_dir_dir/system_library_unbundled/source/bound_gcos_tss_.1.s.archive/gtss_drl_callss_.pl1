/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */
gtss_drl_callss_: proc (mcpp, increment);

/*	Internal call to another subsystem.

   Authors: Robert J. Grimes	Created
   -	  Albert N. Kepner	  1978
   -	  Robert M. May
   -	  David B. Ward
   Changed: Dave Ward	05/17/79 Debug display of ss name.
   Changed: Bob Alvarado	11/26/79 Added callss_pound_sign_comd entry.
   Changed: Dave Ward         1981     sorted dcl, added %page
*/
dcl  increment                fixed bin parm;
dcl  mcpp                     ptr parm;
	mcp = mcpp;

/*

   DRL CALLSS, INTERNAL CALL TO ANOTHER SUBSYSTEM (octal 30)


   8_________1_6_____________________

   DRL      CALLSS
   ASCII    1,name

   (See TSS SYSTEM PROGRAMMER'S
   REFERENCE MANUAL DD17C, Rev. 0, July 1977
   Page 3-9)

*/
%page;
	increment = 1 ;				/* One argument */
	scup = addr (mc.scu);
	gseg = gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_);
	arg_list_ptr = addrel (gseg, fixed (scu.ilc)+1);	/* get addres of arg_list */

/* Check for DRL RETURN following the DRL CALLSS. If found,
   the combination is treated as a DRL T.GOTO */
	if next_instruction = "000005002000"b3 then do;	/* DRL RETURN */
	     if db_drl_callss then
		call ioa_ ("gtss_drl_callss_: DRL T.GOTO ""^a""", ss_name);
	     call gtss_interp_prim_$t_goto (ss_name);
	end;

/* The above call does not return. The t_goto entry point causes
   the process stack to be unwound to the previous invocation of
   the primitive interpreter. */
	goto cont;
%page;
callss_pound_sign_comd: entry (ap, increment);
dcl  ap                       ptr parm;
	mcp = null ();
	arg_list_ptr = ap;
cont:

/* Call a new subsystem */
/* But first save the bar mode stack pointer */

	sb = baseptr (baseno (addr (bar_mode_stack_ptr))); /* Get ptr to stack_4 */
	bar_mode_stack_ptr = stack_header.bar_mode_sp;

	if db_drl_callss then
	     call ioa_ ("gtss_drl_callss_: DRL CALLSS ""^a""", ss_name);
	call gtss_interp_prim_$callss (ss_name, mcp);

/* Restore bar mode stack pointer */
	stack_header.bar_mode_sp = bar_mode_stack_ptr;
	return;
%page;
/*   Variables for gtss_drl_callss_:		 */
/*   IDENTIFIER		ATTRIBUTES	 */
dcl  arg_list_ptr             ptr init(null());
dcl  bar_mode_stack_ptr       ptr auto	/* This variable must be automatic */;
dcl  gseg                     ptr init(null());
dcl  ioa_                     entry options(variable);

dcl 1 arg_list aligned based (arg_list_ptr),
    2 ss_name char (4) unal,
    2 next_instruction bit (36);
%page;
%include gtss_ext_;
%page;
%include mc;
%page;
%include gtss_entry_dcls;
%page;
%include stack_header;
%page;
%include gtss_db_names;
     end gtss_drl_callss_;
