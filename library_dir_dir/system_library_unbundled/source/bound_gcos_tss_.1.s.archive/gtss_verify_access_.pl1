/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */

/****^  HISTORY COMMENTS:
  1) change(2019-06-01,Swenson), approve(2019-06-01,MCR10061),
     audit(2019-06-01,GDixon), install(2019-06-01,MR12.6g-0025):
     Removed trailing null character at end of this segment.
                                                   END HISTORY COMMENTS */

gtss_verify_access_: proc (dname, ename, fn, permissions, gcos_status);

/* This program attempts to simulate the method in which GCOS propagates permissions
   thru catalogs.  On each catalog created by gtss, the 10-bit permissions word passed
   to filact is converted to a character string and placed in the person field of an acl.
   The project field is either "*" for general permissions or an all upper-case project
   name for specific permissions.  The tag field is always "g".  On files, filact puts
   the permissions in a more typical Multics acl with *.*.* for general and *.project.*
   for specific, project again being all upper case.  Because of the way GCOS does things,
   and because of the way in which we have implemented this on Multics, it is possible
   that a user may be able to access a file on which he does not have the appropriate
   Multics access.  In such a case, the appropriate access is forced for that individual
   (person.project.*), a bit is set in the aft to indicate that this has been done, and
   at gtss_ios_close_ time, a call is made to gtss_verify_access_$check_forced_access
   who removes that forced access if it is there.

   Author:  Paul W. Benjamin	12/14/79

   Change:  Paul Benjamin	01/10/79	Resolve problems when accessing libraries.
   Change:  Paul Benjamin     04/03/80  Additional error checking.
*/

dcl (dname, ename) char (*) parameter;
dcl  fn fixed bin (24) parameter;
dcl  permissions bit (6) parameter;
dcl  gcos_status bit (12) aligned parameter;

	gtss_ext_$aft.aft_entry.forced (fn) = "0"b;
	call user_info_ (person, umc, acct);
	UMC = translate (umc, "QWERTYUIOPASDFGHJKLZXCVBNM", "qwertyuiopasdfghjklzxcvbnm");
	call hcs_$get_author (
	     dname
	     , ename
	     , 1b
	     , originator
	     , code
	     );
	if code ^= 0 then do;
	     gcos_status = "4003"b3;
	     return;
	end;
	originator = substr (originator, index (originator, ".")+1);
	originator = substr (originator, 1, index (originator, ".")-1);
	if originator = umc then do;
	     a = empty ();
	     call msf_manager_$acl_list (
		fcb_ptr (fn)
		, gtss_ext_$hcs_work_area_ptr
		, sa_ptr
		, null ()
		, sa_count
		, code
		);
	     if code ^= 0 then do;
		gcos_status = "4003"b3;
		return;
	     end;
	     mu_need = "10"b||substr (permissions, 2, 1);
	     goto force_access;
	end;
	drm_len = length (rtrim (gtss_ext_$drm_path));
	temp_dir = gtss_ext_$drm_path;
	temp_name = substr (dname, drm_len+2);

	do i = 1 to 10;				/* Find levels betwixt umc and files */
	     if index (temp_name, ">") ^= 0 then do;
		cat_dir (i) = temp_dir;
		cat_name (i) = substr (temp_name, 1, index (temp_name, ">")-1);
		temp_dir = rtrim (temp_dir)||">"||cat_name (i);
		temp_name = substr (temp_name, index (temp_name, ">")+1);
	     end;
	     else do;
		cat_dir (i) = temp_dir;
		cat_name (i) = temp_name;
		cat_dir (i+1) = "";
		cat_num = i;
		i = 10;
	     end;
	end;

	do i = 1 to cat_num;			/* Find propagation acls for general and specific at each level.  */
	     a = empty ();
	     call hcs_$list_dir_acl (
		cat_dir (i)
		, cat_name (i)
		, gtss_ext_$hcs_work_area_ptr
		, da_ptr
		, null ()
		, da_count
		, code
		);
	     found_sp, found_gp = "0"b;
	     if code ^= 0 then do;
		gcos_status = "4003"b3;
		return;
	     end;
	     do j = 1 to da_count;
		if index (da_name (j), "."||rtrim (UMC)||".g") ^= 0 then do;
		     cat.sp (i) = substr (da_name (j), 1, 10);
		     found_sp = "1"b;
		end;
		else if index (da_name (j), ".*.g") ^= 0 then do;
		     cat.gp (i) = substr (da_name (j), 1, 10);
		     found_gp = "1"b;
		end;
		if found_gp & found_sp then j = da_count;
		if j = da_count & ^found_gp then cat.gp (i) = "NONE";
		if j = da_count & ^found_sp then cat.sp (i) = "NONE";
	     end;
	end;
	gp_result, sp_result = "0000000000"b;		/* Initialize accumulated permissions to empty. */
	exclude = "0"b;

	do i = 1 to cat_num;			/* Accumulate permissions thru each catalog level. */
	     if cat.gp (i) ^= "NONE" then gp_result = bit (cat.gp (i), 10)|gp_result;
	     if cat.sp (i) ^= "NONE" then do;
		if cat.sp (i) = "0000000000" then do;
		     exclude = "1"b;
		     sp_result = "0"b;
		end;
		else sp_result = bit (cat.sp (i), 10)|sp_result;
	     end;
	end;

	request = bin (permissions);			/* Determine needed access. */
	goto check_request (request);
check_request (5):
check_request (6):
check_request (7):
check_request (9):
check_request (10):
check_request (11):
check_request (12):
check_request (13):
check_request (14):
check_request (15):
check_request (18):
check_request (19):
check_request (21):
check_request (22):
check_request (23):
check_request (24):
check_request (25):
check_request (26):
check_request (27):
check_request (28):
check_request (29):
check_request (30):
check_request (31):
check_request (34):
check_request (35):
check_request (36):
check_request (37):
check_request (38):
check_request (39):
check_request (41):
check_request (42):
check_request (43):
check_request (45):
check_request (46):
check_request (47):
check_request (50):
check_request (51):
check_request (52):
check_request (53):
check_request (54):
check_request (55):
check_request (56):
check_request (57):
check_request (58):
check_request (59):
check_request (61):
check_request (62):
check_request (63):
	gcos_status = "4044"b3;			/* Illegal options combination. */
	return;
check_request (0):
check_request (1):
check_request (2):
check_request (3):
check_request (32):
check_request (33):
check_request (44):
	gc_need = "1000000000"b;			/* GCOS r, Multics r */
	mu_need = "100"b;
	goto check_end;
check_request (4):
	gc_need = "0001000000"b;			/* GCOS e, Multics r */
	mu_need = "100"b;
	goto check_end;
check_request (8):
	gc_need = "0010000000"b;			/* GCOS a, Multics r */
	mu_need = "100"b;
	goto check_end;
check_request (16):
check_request (17):
check_request (20):
check_request (48):
check_request (49):
	gc_need = "0100000000"b;			/* GCOS w, Multics rw */
	mu_need = "101"b;
	goto check_end;
check_request (40):
	gc_need = "1010000000"b;			/* GCOS ra, Multics r */
	mu_need = "100"b;
	goto check_end;
check_request (60):
	gc_need = "0000000001"b;			/* GCOS x, Multics rw */
	mu_need = "101"b;
check_end:

	a = empty ();				/* Look at segment acl */
	call msf_manager_$acl_list (
	     fcb_ptr (fn)
	     , gtss_ext_$hcs_work_area_ptr
	     , sa_ptr
	     , null ()
	     , sa_count
	     , code
	     );
	if code ^= 0 then do;
	     gcos_status = "4003"b3;
	     return;
	end;
	found_gp, found_sp = "0"b;
	do i = 1 to sa_count;
	     if sa_name (i) = "*.*.*" then do;
		sa_gp = substr (sa_modes (i), 1, 3);
		found_gp = "1"b;
	     end;
	     else if sa_name (i) = "*."||rtrim (UMC)||".*" then do;
		sa_sp = substr (sa_modes (i), 1, 3);
		found_sp = "1"b;
	     end;
	     if found_gp & found_sp then i = sa_count;
	end;

	if exclude | sp_result ^= "0"b | found_sp then do; /* Must check SPECIFIC permissions. */

	     if (^gc_need | sp_result) ^= "1111111111"b then do; /* Have NOT accumulated enough permission thru catalogs. */
		if (^(mu_need) | sa_sp) ^= "111"b then goto permission_denied; /* Haven't on file, either */
		else goto force_access;		/* Do have access to file but acl may be upper case. */
	     end;
						/* HAVE accumulated enough permission thru catalogs */
	     else if ^found_sp then goto force_access;	/* But not on file, go force */
	     else if sa_sp = "000"b then goto permission_denied; /* Specifically excluded from file */
	     else if (^(mu_need) | sa_sp) ^= "111"b then goto force_access; /* Not enough on file, force */
	     else goto force_access;			/* Again acl may be upper case */
	end;
	else do;					/* Must check GENERAL permissions. */
	     if (^gc_need | gp_result) ^= "1111111111"b then do; /* Have NOT accumulated enough permission thru catalogs. */
		if (^(mu_need) | sa_gp) ^= "111"b then goto permission_denied; /* Haven't on file either. */
		else goto permission_granted;		/* Do have the access on the file */
	     end;
						/* HAVE accumulated enough permissions thru catalogs. */
	     else if ^found_gp then goto force_access;
	     else if sa_gp = "000"b then goto permission_denied; /* Specifically excluded. */
	     else if (^(mu_need) | sa_gp) ^= "111"b then goto force_access; /* Not enough on file, force. */
	     goto permission_granted;			/* Everything's cool */
	end;
permission_denied:
	gcos_status = "4003"b3;			/* Permissions denied. */
	return;
permission_granted:
	gcos_status = "4000"b3;			/* Successful. */
	return;
force_access:
	gtss_ext_$aft.aft_entry.forced (fn) = "1"b;
	do i = 1 to sa_count;			/* Check for real (upper&lower case) acl */
	     if sa_name (i) = "*.*.*"
	     | sa_name (i) = "*."||rtrim (umc)||".*"
	     | sa_name (i) = rtrim (person)||"."||rtrim (umc)||".*"
	     | sa_name (i) = rtrim (person)||".*.*" then do;

/* Found it and don't need to force access. */
		if (^(mu_need)|substr (sa_modes (i), 1, 3)) = "111"b then do;
		     gtss_ext_$aft.aft_entry.forced (fn) = "0"b;
		     i = sa_count;
		end;
	     end;
	end;
	if gtss_ext_$aft.aft_entry.forced (fn) = "1"b then do;
	     sa_count = 1;
	     sa_name (1) = rtrim (person)||"."||rtrim (umc)||".*";
	     sa_modes (1) = mu_need;
	     call msf_manager_$acl_add (		/* FORCE IT! */
		fcb_ptr (fn)
		, sa_ptr
		, 1
		, code
		);
	     if code ^= 0 then goto permission_denied;
	end;
	goto permission_granted;

check_forced_access: entry (dname, ename, fn);

/* Remove forced acl, if set. */

	if gtss_ext_$aft.aft_entry.forced (fn) then do;
	     call user_info_ (
		person
		, umc
		, acct
		);
	     dl_name = rtrim (person)||"."||rtrim (umc)||".*";
	     call msf_manager_$acl_delete (
		fcb_ptr (fn)
		, addr (dl_array)
		, 1
		, code
		);
	end;
	return;

dcl  a area (1000) based (gtss_ext_$hcs_work_area_ptr);
dcl  acct char (32);
dcl 1 cat (7),
    2 cat_dir char (168),
    2 cat_name char (32),
    2 gp char (10),
    2 sp char (10);
dcl  cat_num fixed;
dcl  code fixed bin (35);
dcl 1 da_array (da_count) based (da_ptr),
    2 da_name char (32),
    2 da_modes bit (36),
    2 da_code fixed bin (35);
dcl  da_count fixed bin;
dcl  da_ptr ptr;
dcl 1 dl_array,
    2 dl_name char (32),
    2 dl_code fixed bin (35);
dcl  drm_len fixed;
dcl  exclude bit (1);
dcl (found_gp, found_sp) bit (1);
dcl  gc_need bit (10);
dcl  gp_result bit (10);
dcl  hcs_$get_author entry (char (*), char (*), fixed bin (1), char (*), fixed bin (35));
dcl  hcs_$list_dir_acl entry (char (*), char (*), ptr, ptr, ptr, fixed bin, fixed bin (35));
dcl (i, j) fixed bin;
dcl  msf_manager_$acl_add entry (ptr, ptr, fixed bin, fixed bin (35));
dcl  msf_manager_$acl_delete entry (ptr, ptr, fixed bin, fixed bin (35));
dcl  msf_manager_$acl_list entry (ptr, ptr, ptr, ptr, fixed bin, fixed bin (35));
dcl  mu_need bit (3);
dcl  originator char (32);
dcl  person char (22);
dcl  request fixed bin;
dcl 1 sa_array (sa_count) based (sa_ptr),
    2 sa_name char (32),
    2 sa_modes bit (36),
    2 sa_pad bit (36),
    2 sa_code fixed bin (35);
dcl  sa_count fixed bin;
dcl  sa_gp bit (3);
dcl  sa_ptr ptr;
dcl  sa_sp bit (3);
dcl  sp_result bit (10);
dcl  temp_dir char (168);
dcl  temp_name char (32);
dcl (umc, UMC) char (9);
dcl  user_info_ entry (char (*), char (*), char (*));

%include gtss_ext_;

%include gtss_dfd_ext_;
     end;
