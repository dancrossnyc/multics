/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(2016-01-15,Swenson), approve(2016-01-15,MCR10003):
     Fix to support 4-character time zone abbreviations.
                                                   END HISTORY COMMENTS */

gcos_tss: gtss: proc;

/**	GCOS TIME-SHARING on Multics

   Authors: Robert J. Grimes	Created
   -	  Albert N. Kepner	  1978
   -	  Robert M. May
   -	  David B. Ward
   Change:  Dave Ward	02/24/79 db entry.
   Change:  Dave Ward	03/20/79 get_line init.
   Change:  Mel Wilson	03/26/79 set ust CARD permission and urgency.
   Change:  Dave Ward	03/28/79 db switches by name.
   Change:  Al Kepner	03/30/79 to allow gtss to be called under file outpuut.
   Change:  Al Dupuis         06/01/79 to init bits used for command file processing.
   Change:  Dave Ward	06/28/79 Set gcos terminal type.
   Change:  Dave Ward	07/28/79 Set mcfc structure pointers.
   Change:  Bob Alvarado	08/01/79 added ll190 to output modes.
   Change:  Al Dupuis	08/02/79 added drun entry.
   Change:  Dave Ward	08/12/79 mcfc entry.
   Change:  Al Dupuis	08/20/79 added call to timer_manager and gtss_abs_$cpu_runout, so that
			         when gtss$drun is called, it sets an execution time limit.
   Change:  Paul Benjamin	09/21/79 removed setting gtss_ust.lflg2.b6 from initialize
   Change:  Al Dupuis	09/25/79 moved timer_manager_ stuff to gtss_drun_,
			         added call to gtss_drun_ from init
			         and term, and begin block for finish.
   Change:  Paul Benjamin     10/03/79 inhibit quits when logging out
   Change:  Dave Ward	11/06/79 cleanup freeing of work space repositioned.
   Change:  Al Dupuis	11/10/79 initialize gtss_ext_$drun_jid, set gtss_ext_$process_type.
   Change:  Dave Ward	12/18/79 prevent clean_up from getting in loop.
   Change:  Al Dupuis         01/15/80 site-settable drun_start_time.
   Change:  Scott C. Akers    08/14/81 Reset tty_modes on QUITs.
   Change:  Scott C. Akers	11/24/81 Prevent looping on uninitialiazed AFT.
   Change:  Scott C. Akers	01/05/82 Don't require GSE before GTSS. Use defaults instead.
   Change:  Ron Barstad  3.0  82-08-11 Change 4J to 4JS3
   Change:  Ron Barstad  3.1  83-02-22 Delete call to cu_$cp for GSE, defaults set in gse_ext_
   Change:  Ron Barstad  3.2  83-03-31 Added function code 8 to drl T.CFIO
   Change:  Ron Barstad  3.3  83-06-29 Brought drls PASUST and T.CMVO to 4js3
                                       Fix drm rule init to zero by gse
   **/

	if gtss_already_called then do;
	     call com_err_ (			/* gtss called recursively. */
		0
		, "gtss("||gtss_constants$version||")"
		, "gtss can not be recursively called.^/release or new_proc if not already in gtss.");
	     return;
	end;

/**       Set default directory mapping. **/
	if gse_ext_$drm_rule = 0 then gse_ext_$drm_rule = 2; /* make it wd */

/**	Obtain list of arguments pointers and lengths. **/
	call cu_$arg_count (nargs);
	if nargs > 0 then do;
	     call com_err_ (			/* gtss called with arguments, none allowed. */
		error_table_$arg_ignored
		, "gtss("||gtss_constants$version||")"
		, "^/Use gcos_set_environment command to set parameters for gtss.");
	     return;
	end;
start:	;
	unspec (gtss_ext_$flags) = "0"b;

	gtss_already_called = "1"b;

/**	Set on blocks (except any_other).		**/
	on cleanup call clean_up;
	on cond (gtss_fail) begin;
	     call com_err_ (
		0
		, "gtss("||gtss_constants$version||")"
		, "Cannot continue. Quitting."
		);
	     goto termination;
	end;
	on cond (command_error) begin;
	     if gtss_ext_$put_chars = gtss_CFP_output_
	     then call gtss_com_err_;
	end;
	on cond (finish) begin;
	     if execute_drun ^= 0 then do;
						/* Determine if drun termination was complete */
		call hcs_$initiate_count (gtss_ext_$homedir,
		     "drun_restart." || gtss_ext_$drun_jid, "",
		     bit_count, 1, gtss_ext_$restart_seg_ptr, code);
		if gtss_ext_$restart_seg_ptr ^= null () then do;
		     call delete_$ptr (gtss_ext_$restart_seg_ptr, code);
		     call com_err_ (
			0
			, "gtss$drun"
			, "When simulator termination took place the catalog entry was marked as still executing");
		end;
	     end;
	end;

	if initialize () then do;
	     AFT_INITIALIZED = "1"b;

	     if db_drl_kin then
		if gtss_dump_kin_$init () then goto abort;

	     if gse_ext_$modes.gdb then do;
		call gcos_debug_$initial (code);
		gse_ext_$modes.gdb = (code = 0);
	     end;
	     on any_other call gtss_fault_processor_;
	     call ioa_ ("GTSS 4JS3 (^a)", gtss_constants$version);

/**	Process GCOS TSS input		**/
	     call gtss_interp_prim_;
termination:   ;

	     if db_drl_kin then call gtss_dump_kin_$fin;
	end;
abort:	;
	on quit call gtss_fix_tty_modes_;		/* Don't let him screw anything up now.
						   Just fix the tty modes and keep going. */
	call clean_up;
	return;

unset_drl_rtrn: ;
	call com_err_ (
	     0
	     , "gtss("||gtss_constants$version||")"
	     , "goto gtss_ext_$drl_rtrn(^i) or gtss_ext_$restart_from_pi or gtss_ext_$popup_from_pi" ||
	     "^/or gtss_ext_$dispose_of_drl returned to gtss unset_drl_rtrn.",
	     gtss_ext_$stack_level_);
	signal cond (gtss_fail);
	return;
%page;
get_mem:	entry (sap, slp)returns (bit (1));

/**	Entry to provide pointers to slave area pointers and
   the stack level index (used by gcos_debug).
   **/
dcl  sap                      ptr parm;
dcl  slp                      ptr parm;
	sap = addr (gtss_ext_$gtss_slave_area_seg);
	slp = addr (gtss_ext_$stack_level_);
	return ("0"b);				/* Successful. */
%page;
db:	entry;

/**	Regulate and display debug switch bits. **/
dcl  args_ptr                 ptr;
dcl  cu_$arg_list_ptr         entry(ptr);
	call cu_$arg_list_ptr (args_ptr);
	call gtss_set_db_$arg_ptr (db_bits, args_ptr);
	return;
dcl  gtss_set_db_$arg_ptr     entry((72)bit(1),ptr);
%page;
init:	entry;
	if initialize () then ;
	return;
%page;
mcfc:	entry;

/* Perform various mcfc functions:
   -wait n	Set wait time to n seconds.
*/
	call cu_$arg_count (nargs);
	if (nargs<1)| (nargs>5) then do;
	     call com_err_ (0, "gtss$mcfc",
		"Allowable args: -wait n, -print.");
	     return;
	end;
dcl  need_n                   bit(1);
	need_n = "0"b;
	do i = 1 to nargs;
	     call cu_$arg_ptr (i, ap, al, code);
	     if code ^= 0 then do;
		call com_err_ (code, "gtss$mcfc", "Arg ^i.", i);
		return;
	     end;
	     if need_n then do;
		need_n = "0"b;
		if verify (cmd_arg, "0123456789")>0 then
		     call com_err_ (0, "gtss$mcfc",
		     "Arg ^i, ""^a"", not integer number of seconds.", i, cmd_arg);
		else
		gtss_ext_$mcfc.wait_time = fixed (cmd_arg, 24);
	     end;
	     else
	     if cmd_arg = "-wait" then need_n = "1"b;
	     else
	     if cmd_arg = "-print" then do;
		call com_err_ (0, "gtss$mcfc",
		     "mcfc wait seconds ^i", gtss_ext_$mcfc.wait_time);
	     end;
	     else
	     call com_err_ (0, "gtsmcfc",
		"Arg ^i, ""^a"", not from -wait n or -print.", i, cmd_arg);
	end;
	if need_n then
	     call com_err_ (0, "gtss$mcfc", "-wait not followed by n, number of seconds.");
	return;
%page;
drun:	entry;

/** Check for one valid DRUN ID (nnnnD) **/

	call cu_$arg_count (nargs);
	if nargs ^= 1 then do;
	     call com_err_ (0, "gtss$drun",
		"Correct usage is gtss$drun drun_job_id");
	     return;
	end;

	call cu_$arg_ptr (1, arg_ptr, argl, code);
	if code ^= 0 then do;
	     call com_err_ (code, "gtss$drun");
	     return;
	end;

	if (argl ^= 5)
	| ((d1 < "0") | (d1 > "9"))
	| ((d2 < "0") | (d2 > "9"))
	| ((d3 < "0") | (d3 > "9"))
	| ((d4 < "0") | (d4 > "9"))
	| ^((d5 = "d") | (d5 = "D"))
	then do;
	     call com_err_ (0, "gtss$drun",
		"^a is not a valid drun job id", argument);
	     return;
	end;

/** Tell DRUN it's time to execute **/
	djid = argument;
	call gtss_ascii_bcd_ (arg_ptr, 5, addr (drun_job_id));
	execute_drun = 17;

	goto start;

%page;
clean_up:	proc;
						/**	gtss cleanup condition procedure.	**/

	     on cleanup goto fin_cleanup;

	     if db_drl_kin then call gtss_dump_kin_$clean;
	     if AFT_INITIALIZED
	     then if ((gtss_ust.lcjid ^= "0"b) | (drun_term_req))
		then call gtss_drun_ (error);		/* DRUN termination */
	     do i = 1 to hbound (temp_segment_ptr, 1);
		if temp_segment_ptr (i) ^= null () then do; /* Maximize segment length. */
		     call hcs_$set_max_length_seg (
			temp_segment_ptr (i)
			, sys_info$max_seg_size
			, code);
		     if code ^= 0 then
			call com_err_ (code, "gtss$clean_up",
			"Could not maximize temp segment ^i (^p)",
			i, temp_segment_ptr (i));
		end;
	     end;


	     if gtss_ext_$sig_ptr ^= null () then do;	/* pointer was diddled */
		call sct_manager_$set (derail_sct_index, gtss_ext_$sig_ptr, code);
		if code ^= 0 then
		     call com_err_ (code, "gtss$clean_up", "Reseting static handler.");
		gtss_ext_$sig_ptr = null ();		/* reinitialize */
	     end;

/**	Close any files indicated open in AFT.	**/
	     on cleanup goto fin_close;
	     if AFT_INITIALIZED then
	     do i = 1 to hbound (aft_entry, 1);
		if aft_entry (i).used then do;
		     call gtss_ios_close_ (
			(i)
			, addr (fms_status)
			, code
			);
		     if fms_status.bit12 ^= "4000"b3 then
			call com_err_ (
			code
			, "gtss$clean_up"
			, "File (^i) ""^a"" won't close. Status=^w."
			, i
			, aft_entry (i).altname
			, fms_status
			);
		end;
fin_close:	;
	     end;
	     revert cleanup;

/**	Clear AFT table (of what can cause problems). **/
	     gtss_ext_$aft.start_list = 0;
	     gtss_ext_$aft.aft_entry.used = "0"b;
	     gtss_ext_$aft.free_space = 1;
	     gtss_ext_$aft.first_added, gtss_ext_$aft.last_added = 0;

	     if reattach then do;
		call iox_$modes (iox_$user_output, current_modes, old_modes, code);
		if code ^= 0 then
		     call com_err_ (code, "gtss$cleanup");
	     end;

	     call null_label (gtss_ext_$finished);
	     call null_label (gtss_ext_$bad_drl_rtrn);
	     do i = 1 to hbound (gtss_ext_$drl_rtrn, 1);
		call null_label (gtss_ext_$drl_rtrn (i));
	     end;

	     call release_temp_segments_ (
		"gtss("||gtss_constants$version||")"
		, temp_segment_ptr
		, code);
	     if code ^= 0 then call com_err_ (code, "gtss$clean_up", "Releasing temp segments.");
	     gtss_ext_$gtss_slave_area_seg = null ();
	     gtss_ext_$work_area_ptr = null ();

	     if gtss_ext_$fast_lib.fast_lib_fcb ^= null () then
		call msf_manager_$close (fast_lib_fcb); /* Free space allocated for msf control block. */
	     gtss_already_called = "0"b;

fin_cleanup:   ;
	     return;

dcl  code                     fixed bin (35)static int;
dcl  i                        fixed bin (24)static int;
dcl  status                   fixed bin (24)static int;
dcl 1 fms_status aligned,
      2 bit12 bit(12)unal,
      2 bit60 bit(60)unal;
	end clean_up ;
%page;
initialize: proc returns (bit (1));

/**	Return "1"b if successful, else "0"b.
   **/
	     call gtss_derail_processor_$set;

/**	Retain following assignments at top of
   initialization to assure clean_up handler
   can function.
   **/
	     gtss_ext_$gtss_slave_area_seg = null ();
	     gtss_ext_$work_area_ptr = null ();
	     temp_segment_ptr = null ();
	     gtss_ext_$fast_lib.fast_lib_fcb = null ();
	     gtss_ext_$sig_ptr = null ();
	     call gtss_ios_initialize_;
	     aft_entry.used = "0"b;
	     reattach = "1"b;

/**	End of sensitive assignments.	**/

/**	Set debugging switches OFF. */
	     string (gtss_ext_$db) = string (db_bits);

	     gtss_ext_$last_k_was_out = "0"b;		/* Last tty i/o not output. */
	     gtss_ext_$aem = 5;			/* Force additional error messages displayed. */

/**	Set label variables.	**/
	     gtss_ext_$finished = termination;
	     gtss_ext_$bad_drl_rtrn = unset_drl_rtrn;
	     gtss_ext_$drl_rtrn = unset_drl_rtrn;
	     gtss_ext_$popup_from_pi = unset_drl_rtrn;
	     gtss_ext_$restart_from_pi = unset_drl_rtrn;
	     gtss_ext_$dispose_of_drl = unset_drl_rtrn;

/* Initialize mcfc data base. */
	     call gtss_mcfc_init_ (rs);
dcl  rs                       char(5)var;
	     if rs = "false" then return ("0"b);

/**	Initialize statistics data.		**/
	     gtss_ext_$statistics.total_time = 0;
	     gtss_ext_$statistics.count = 0;
	     gtss_ext_$gdb_name = " ";
	     gtss_ext_$stack_level_ = 1;

/**	Establish library of objects
   for installed subsystems.
   **/
	     gtss_ext_$fast_lib.fast_lib_fcb = null ();
	     gtss_ext_$fast_lib.fast_lib_ncp = 0;	/* Number of components. */
	     gtss_ext_$fast_lib.comp_ptr = null ();
	     gtss_ext_$fast_lib.comp_wds = 0;
dummy_label:   ;					/* Get directory where code is currently executing. */
	     me_ptr = codeptr (dummy_label);
	     call hcs_$fs_get_path_name (me_ptr,
		installation_directory,
		0,
		"",
		code);
	     if code ^= 0 then do;
		call com_err_ (code, "gtss$initialize",
		     "Can not obtain directory containing installed subsystem library.");
		return ("0"b);
	     end;
	     call msf_manager_$open (
		(installation_directory)
		, (gtss_install_values_$fast_msf)
		, gtss_ext_$fast_lib.fast_lib_fcb
		, code);
	     if code ^= 0 then do;
		call com_err_ (code, "gtss$initialize",
		     "Can not obtain installed subsystem library ^a>^a.",
		     installation_directory, gtss_install_values_$fast_msf);
		return ("0"b);
	     end;

/**	Obtain component pointers. **/
	     do i = 0 by 1 while (code = 0);
		call msf_manager_$get_ptr (
		     gtss_ext_$fast_lib.fast_lib_fcb
		     , i
		     , use_existing_components
		     , gtss_ext_$fast_lib.comp_ptr (i)
		     , l
		     , code);
		if code = 0 then			/* Set component length. */
		     gtss_ext_$fast_lib.comp_wds (i) = divide (l, 36, 24, 0);
		else
		if code ^= error_table_$noentry then do;
		     call com_err_ (code, "gtss$initialize",
			"Failed attempting to get component ^i of library ^a>^a.",
			i, installation_directory, gtss_install_values_$fast_msf);
		     return ("0"b);
		end;
	     end;
	     if i<1 then do;
		call com_err_ (0, "gtss$initialize",
		     "No components for library ^a>^a.",
		     installation_directory, gtss_install_values_$fast_msf);
		return ("0"b);
	     end;
	     gtss_ext_$fast_lib.fast_lib_ncp = i-1;

/**	Initialize bits used in command file processing */
	     unspec (gtss_ext_$CFP_bits) = "0"b;
	     unspec (gtss_ext_$com_reg) = "0"b;		/* init communication region */
	          /** Set drun cpu limit and preferred start time in 64ths of milsec **/
	     gtss_ext_$com_reg.tsdpt = drun_cpu_limit;
	     gtss_ext_$com_reg.tsddt = drun_start_time;

/**	Initialize user status table.		**/
	     unspec (gtss_ust_ext_$ust) = "0"b;
	     call decode_clock_value_ (clock (), m, d, y, time, w, z);
	     time = divide (time, 1000, 71, 0) * 64;
	     gtss_ust.ltalc.tod = time53;		/* => time / 2**18. */
	     gtss_ust.lrtll.char_length = 81;
	     gtss_ust.lrtll.word_length = 21;
	     gtss_ust.lflg2.b24 = "0"b;		/* Auto blank indicator off. */
	     gtss_ust.lflg2.b25 = "0"b;		/* Auto mode off. */
	     gtss_ust.linno = 10;			/* Default auto[x] initial line number. */
	     gtss_ust.lincr = 10;			/* Default auto[x] line number increment. */
	     gtss_ust.lacpt.cardin,			/* Permission to use CARDIN, BPRINT, BPUNCH */
		gtss_ust.lacpt.lods,		/* Permission to use LODS */
		gtss_ust.lacpt.lodx = "1"b;		/* Permission to use LODX */
	     gtss_ust.lacpt.cardin_urgency = "00000000000101"b; /* default cardin urgency of 05 */

/* Initialize remote i/o buffer. */
	     gtss_ust.current_line_pointer = bit (fixed (fixed (rel (addr (gtss_ust.count_of_characters_transmitted)))
		- fixed (rel (addr (gtss_ust))), 18), 18);
	     gtss_ust.buffer_threshold_address = bit (fixed (
		fixed (rel (addr (gtss_ust.word_after_ust)))-
		fixed (rel (addr (gtss_ust))), 18), 18);
	     gtss_ust.number_words_transmitted, count_of_characters_transmitted = 1;
	     string (gtss_ust.characters_transmitted) = " ";
	     gtss_ust.characters_transmitted (1),
		gtss_ust.characters_transmitted (2),
		gtss_ust.characters_transmitted (3),
		gtss_ust.characters_transmitted (4) = CR; call gtss_ascii_bcd_ (addr (ascii_channel_id), 2, addr (gtss_ust.lbuf.station_id));
	     gtss_ust.lbuf.address = bit (fixed (fixed (rel (addr (gtss_ust.remote_io_buffer)))-
		fixed (rel (addr (gtss_ust))), 18), 18);
	     gtss_ust.lbuf.tally = "1"b;
	     gtss_ust.lcals.b18_35 = bit (fixed (
		fixed (rel (addr (gtss_ust.lcals)))-fixed (rel (addr (gtss_ust)))
		+2*hbound (gtss_ust.subsystems, 1), 18), 18);
	     gtss_ust.lcals.b0_17 = fixed (rel (addr (gtss_ust.lcals))) -
		fixed (rel (addr (gtss_ust)));
	     gtss_ust.lfile.program_stack, gtss_ust.lxxx.b0_17 =
		fixed (rel (addr (gtss_ust.lxxx)))- fixed (rel (addr (gtss_ust)));

	     call set_terminal_type (
		gtss_ust.lbuf.terminal_type
		, gtss_ust.lbuf.station_id
		);

	     call user_info_ (person_id, proj, acct);
	     gtss_ext_$user_id = rtrim (proj);
	     call user_info_$homedir (gtss_ext_$homedir);
	     call user_info_$process_type (gtss_ext_$process_type);

/* No longer used by mcfc.
   dcl user_info_$process_type entry(fixed bin);
   dcl pt fixed bin;
   call user_info_$process_type (pt);
   dcl amz (3)char(1)static int options(constant)init("a","m","z");
   gtss_ext_$multics_access_id = rtrim (person_id)||"."
   ||rtrim (proj)||"."
   ||amz (pt);
*/

	     if gse_ext_$drm_rule = 2 then do;		/* wd mapping rule */
						/* .LID in the UST will be set to the first
						   12 characters of the working_dir name. */
		call expand_pathname_ (get_wdir_ (), "", wd_name, code);
		if code ^= 0 then do;
		     call com_err_ (code, "gtss$initialize",
			"Failed attempting to get entry name portion of working_dir");
		     return ("0"b);
		end;
		call gtss_ascii_bcd_ (addr (wd_name), 12, addr (gtss_ust.lid));
	     end;
	     else do;				/* umc or smc mapping rule */
		call gtss_ascii_bcd_ (addr (gse_ext_$umc_name), 12, addr (gtss_ust.lid));
	     end;
/* Put local values in UST (set if gtss$drun called) */
	     if drun_job_id ^= "0"b then do;
		gtss_ust.lcjid = drun_job_id;
		call gtss_bcd_ascii_ (addr (drun_job_id), 5, addr (gtss_ext_$drun_jid));
	     end;
	     else gtss_ext_$drun_jid = " ";
	     gtss_ust.lcfst.start_term = execute_drun;
	     ascii_channel_id = substr (unique_chars_ ("0"b), 13, 2); /* get a substr(unique_chars_("0"b) set */


/**	Provide process directory work segments.	**/
	     call get_temp_segments_ (
		"gtss("||gtss_constants$version||")"
		, temp_segment_ptr
		, code);
	     if code ^= 0 then do;
		call com_err_ (code, "gtss$initialize", "Could not obtain slave area segs. Quitting.");
		return ("0"b);
	     end;

/**	Assign to external variables. **/
	     gtss_ext_$gtss_slave_area_seg (1) = temp_segment_ptr (1);
	     gtss_ext_$gtss_slave_area_seg (2) = temp_segment_ptr (2);
	     gtss_ext_$gtss_slave_area_seg (3) = temp_segment_ptr (3);
	     gtss_ext_$gtss_slave_area_seg (4) = temp_segment_ptr (4);

/**	Provide empty based area for allocation.	**/
	     gtss_ext_$work_area_ptr = temp_segment_ptr (5);
	     work_area = empty ();

/**	Provide temp segment for deferred (FMS) catalog records.	**/
	     gtss_ext_$deferred_catalogs_ptr = temp_segment_ptr (6);

/**	Provide segment for multics acl area (hcs_).	**/
	     gtss_ext_$hcs_work_area_ptr = temp_segment_ptr (7);

/**	Obtain of caller's process directory.	**/
	     pd = get_pdir_ ();
	     gtss_ext_$pdir = rtrim (pd);

	     call gtss_aft_$initialize (code);
	     if code ^= 0 then do;
		call com_err_ (0, "gtss$initialize",
		     "Could not initialize aft.");
		return ("0"b);
	     end;

/* Set iox_$get_line as initial build mode input routine. */
	     gtss_ext_$get_line = iox_$get_line;

/* Set iox_$put_chars as initial terminal output routine. */
	     gtss_ext_$put_chars = iox_$put_chars;

/**	Open SY** file.	**/
dcl  arg_space                (size (arg))bit (36)aligned;
dcl  mc_space                 (size (mc))bit (36)aligned;

	     arg_ptr = addr (arg_space);
	     arg.ascii_file_name = "sy**";
	     arg.arg2.a = "64"b3;			/* MSU0400 (disk)?  */
	     arg.arg2.b = "0"b;			/* Use standare TSS temp file device. */
	     arg.arg2.c = "1"b;			/* Random. */
	     arg.arg2.d = "0001"b3;			/* 1 link. */

	     call gtss_drl_defil_$subr (
		arg_ptr
		, addr (dfsw)
		, addr (mc_space)
		);

dcl 1 dfsw aligned,
    2 sw1 fixed bin (24),
    2 sw2 fixed bin (24);

	     if dfsw.sw1 ^= 0 then do;
		call com_err_ (0, "gtss$initialize",
		     "Can not open SY**. DRL DEFIL status ^i.", sw1);
		return ("0"b);
	     end;
	     gtss_ext_$SYstarstar_file_no = arg_ptr -> fixed_bin24; /* Record AFT entry for SY** (it doesn't move). */

/**	Initialize SY** accumulator data base
   (used by gtss_build_).
   **/
	     unspec (gtss_SYstarstar_$FILE) = "0"b;
	     gtss_SYstarstar_$FILE.OP1.Device_Command = seek_cmd;
	     gtss_SYstarstar_$FILE.OP1.Count = "02"b3;	/* 2 => two operations, seek and write. */
	     gtss_SYstarstar_$FILE.OP2.Device_Command = write_cmd;
						/* Word offset to gtss_SYstarstar_$FILE.Seek_Word. */
	     gtss_SYstarstar_$FILE.ID1.DCW_list_loc = rel (addr (gtss_SYstarstar_$FILE.Seek_Word));
	     gtss_SYstarstar_$FILE.ID2.DCW_list_loc = rel (addr (gtss_SYstarstar_$FILE.DCW));
						/* Word offset to Seek_Address. */
	     gtss_SYstarstar_$FILE.Seek_loc = rel (addr (gtss_SYstarstar_$FILE.Seek_Address));
	     gtss_SYstarstar_$FILE.Status_loc = rel (addr (gtss_SYstarstar_$FILE.STATUS));
	     gtss_SYstarstar_$FILE.Seek_count = 1;	/* => 1 word of Seek_Address. */
	     gtss_SYstarstar_$FILE.DCW.word_count = "1200"b3; /* 1200 octal = 640 decimal (words). */
						/* Word offset to gtss_SYstarstar_$FILE.RECORD. */
	     gtss_SYstarstar_$FILE.DCW.memory_loc = rel (addr (gtss_SYstarstar_$FILE.RECORD));
	     gtss_SYstarstar_$FILE.SYss = "sy**";
	     gtss_SYstarstar_$FILE.ID1.fcb_loc
		, gtss_SYstarstar_$FILE.ID2.fcb_loc
		= rel (addr (gtss_SYstarstar_$FILE.SYss));

/** Initialize ios select sequence to provide
   for reading the command processing file.
   **/
	     unspec (gtss_starCF_$FILE) = "0"b;
						/* "0"b => cf stack is empty. */
	     gtss_starCF_$FILE.OP1.Device_Command = seek_cmd;
	     gtss_starCF_$FILE.OP1.Count = 2;		/* 2 => two operations (seek read) */
						/* Word offset to gtss_starCF_$FILE.Seek_Word. */
	     gtss_starCF_$FILE.ID1.DCW_list_loc = rel (addr (gtss_starCF_$FILE.Seek_Word));
	     gtss_starCF_$FILE.ID2.DCW_list_loc = rel (addr (gtss_starCF_$FILE.DCW));
						/* Word offset to Seek_Address. */
	     gtss_starCF_$FILE.Seek_loc = rel (addr (gtss_starCF_$FILE.Seek_Address));
	     gtss_starCF_$FILE.Status_loc = rel (addr (gtss_starCF_$FILE.STATUS));
	     gtss_starCF_$FILE.Seek_count = 1;		/* => 1 word of Seek_Address. */
	     gtss_starCF_$FILE.DCW.word_count = 64;
						/* Word offset to gtss_starCF_$FILE.RECORD. */
	     gtss_starCF_$FILE.DCW.memory_loc = rel (addr (gtss_starCF_$FILE.RECORD));
/** Initialize ios select sequence for reading #D **/
	     unspec (gtss_def_q_$FILE) = "0"b;
	     gtss_def_q_$FILE.OP1.Device_Command = seek_cmd;
	     gtss_def_q_$FILE.OP1.Count = 2;		/* 2 => two operations (seek read) */
						/* Word offset to gtss_def_q_$FILE.Seek_Word. */
	     gtss_def_q_$FILE.ID1.DCW_list_loc = rel (addr (gtss_def_q_$FILE.Seek_Word));
	     gtss_def_q_$FILE.ID2.DCW_list_loc = rel (addr (gtss_def_q_$FILE.DCW));
						/* Word offset to Seek_Address. */
	     gtss_def_q_$FILE.Seek_loc = rel (addr (gtss_def_q_$FILE.Seek_Address));
	     gtss_def_q_$FILE.Status_loc = rel (addr (gtss_def_q_$FILE.STATUS));
	     gtss_def_q_$FILE.Seek_count = 1;		/* => 1 word of Seek_Address. */
	     gtss_def_q_$FILE.DCW.word_count = 64;
						/* Word offset to gtss_def_q_$FILE.RECORD. */
	     gtss_def_q_$FILE.DCW.memory_loc = rel (addr (gtss_def_q_$FILE.RECORD));
	     gtss_def_q_$FILE.ID1.fcb_loc,
		gtss_def_q_$FILE.ID2.fcb_loc
		= rel (addr (gtss_def_q_$FILE.DQ));


/**	Initialize data base used for file IO by
   gtss_drl_drlsav_ and gtss_drl_restor_. **/

	     unspec (gtss_save_restore_data_$IO) = "0"b;
	     gtss_save_restore_data_$IO.OP1.Device_Command = seek_cmd;
	     gtss_save_restore_data_$IO.OP1.Count = "02"b3; /* 2 => two operations. */
	     gtss_save_restore_data_$IO.OP2.Device_Command = write_cmd;
						/* Word offset to gtss_save_restore_data_$IO.Seek_Word. */
	     gtss_save_restore_data_$IO.ID1.DCW_list_loc = rel (addr (gtss_save_restore_data_$IO.Seek_Word));
	     gtss_save_restore_data_$IO.ID2.DCW_list_loc = rel (addr (gtss_save_restore_data_$IO.DCW));
						/* Word offset to Seek_Address. */
	     gtss_save_restore_data_$IO.Seek_loc = rel (addr (gtss_save_restore_data_$IO.Seek_Address));
	     gtss_save_restore_data_$IO.Status_loc = rel (addr (gtss_save_restore_data_$IO.STATUS));
	     gtss_save_restore_data_$IO.Seek_count = 1;	/* => 1 word of Seek_Address. */

/**	Record current static handler for derails (reset at conclusion of gtss).	**/
	     call sct_manager_$get (derail_sct_index, gtss_ext_$sig_ptr, code);
	     if code ^= 0 then do;
sct_fail:		;
		call com_err_ (code, "gtss$initialize", "Can't set static handler for derails");
		return ("0"b);
	     end;

/**	Reset static handler for derails to gtss's handler.	**/

	     call sct_manager_$set (derail_sct_index, addr (gtss_derail_processor_), code);
	     if code ^= 0 then goto sct_fail;

	     call iox_$modes (iox_$user_output, "edited,^can,ll190", current_modes, code);
	     if code ^= 0 then do;
		reattach = "0"b;
		if code = error_table_$no_operation
		then current_modes = "";
		else if code ^= error_table_$not_attached then do;
		     call com_err_ (code, "gtss$initialize",
			"Could not obtain terminal modes");
		     return ("0"b);
		end;
	     end;

/* If gtss$drun has been called, or a DRUN has been done before (the
   deferred queue file ([hd]>drun_#d_q) exists, do DRUN initialization */
	     if gtss_ust.lcjid ^= "0"b then
		call gtss_drun_ (error);
	     else do;
		call hcs_$status_minf (gtss_ext_$homedir, "drun_#d_q",
		     1, type, bit_count, code);
		if code ^= error_table_$noentry then do;
		     call gtss_drun_ (error);
		     drun_term_req = "1"b;
		end;
	     end;
	     if error then do;
		call com_err_ (0, "gtss$initialize",
		     "Couldn't do DRUN initialization");
		return ("0"b);
	     end;


	     return ("1"b);
	end initialize ;
%page;
null_label: proc (l);

/**	Set label variable unusable.	**/
dcl  l                        label parm;
	     l = null_null;
	     return;

dcl  null_null                label based (addr (two_nulls));
dcl  two_nulls                (2)ptr static int init ((2)null ());
	end null_label ;
%page;
set_terminal_type: proc (tt, sid);

/* Map Multics caller's terminal type and channel
   to GCOS terminal type and station id.
*/
dcl  sid                      bit(12)unal parm;
dcl  tt                       bit(5)unal parm;
	     call user_info_$terminal_data (
		term_id_code
		, term_type
		, term_channel
		, term_line_type
		, term_charge_type
		);

/* Translate Multics terminal types
   to gcos types.

   Note: multics_type type table not in use
   (see below).
*/
	     if substr (term_type, 1, 1) = "V" then do;	/* => CRT (see multics type table). */
		tt = "01101"b;			/* 15octal => CRT. */
		gtss_ust.lflg2.b20 = "1"b;		/* => VIP. */
	     end;
	     else tt = "00100"b;			/* 4octal => teleprinter | command file. */

/* Interpret Multics channel value
   as 12bits (2 bcd chars) gcos value.
*/
	     sid =
		bit (fixed (search ("abcdefghijklmnopqrstuvwxyz", substr (term_channel, 1, 1)), 6))
		||
		bit (fixed (search ("0123456789", substr (term_channel, 6, 1)), 6));
	     return;

dcl  i                        fixed bin;
dcl  term_channel             char(8);
dcl  term_charge_type         char(8);
dcl  term_id_code             char(4);
dcl  term_line_type           fixed bin;
dcl  term_type                char(12);
dcl  user_info_$terminal_data entry(char(*),char(*),char(*),fixed bin,char(*));

dcl 1 multics_term (79)static int options(constant)
,     2 type char(18) init(
  /* 01 */	"1050"
, /* 02 */	"2741"
, /* 03 */	"AJ630"
, /* 04 */	"ARDS"
, /* 05 */	"ASCII"
, /* 06 */	"ASCII_CAPS"
, /* 07 */	"ASCII_CRT"
, /* 08 */	"ASCII_CRT_CAPS"
, /* 09 */	"BMARK"
, /* 10 */	"CDC713"
, /* 11 */	"CORR2741"
, /* 12 */	"DELTA4000"
, /* 13 */	"DIABLO1620"
, /* 14 */	"DTC300S"
, /* 15 */	"DTC300SE"
, /* 16 */	"DTC302"
, /* 17 */	"DTC302E"
, /* 18 */	"DTC302_12"
, /* 19 */	"DTC302_12E"
, /* 20 */	"EX300"
, /* 21 */	"FOX1100"
, /* 22 */	"G115"
, /* 23 */	"G115_UPPER"
, /* 24 */	"GENCOM"
, /* 25 */	"HCCT102"
, /* 26 */	"HC_SPOOL"
, /* 27 */	"IBM2780"
, /* 28 */	"IBM2780_FULL"
, /* 29 */	"IBM3780"
, /* 30 */	"IBM3780_FULL"
, /* 31 */	"L6TCF"
, /* 32 */	"LA120"
, /* 33 */	"LA120_10C6L_14X11"
, /* 34 */	"LA120_16C6L_8X11"
, /* 35 */	"LA36"
, /* 36 */	"LA36E"
, /* 37 */	"LA36_TABS"
, /* 38 */	"LED120"
, /* 39 */	"LED120E"
, /* 40 */	"PHXTST"
, /* 41 */	"ROSY"
, /* 42 */	"ROSYE"
, /* 43 */	"ROSYI"
, /* 44 */	"ROSY_TABS"
, /* 45 */	"SARA"
, /* 46 */	"SYSTEM75"
, /* 47 */	"TEK4013"
, /* 48 */	"TEK4015"
, /* 49 */	"TEK4015E"
, /* 50 */	"TEK4023"
, /* 51 */	"TELERAY1061"
, /* 52 */	"TELERAY1061E"
, /* 53 */	"TELERAY1061_ECHO"
, /* 54 */	"TELERAY3700"
, /* 55 */	"TI725"
, /* 56 */	"TI735"
, /* 57 */	"TI745"
, /* 58 */	"TN300"
, /* 59 */	"TN300I"
, /* 60 */	"TTY33"
, /* 61 */	"TTY37"
, /* 62 */	"TTY38"
, /* 63 */	"TTY43"
, /* 64 */	"VIP7200"
, /* 65 */	"VIP7200E"
, /* 66 */	"VIP7700R"
, /* 67 */	"VIP7700_CLUSTER"
, /* 68 */	"VIP7705"
, /* 69 */	"VIP7714"
, /* 70 */	"VIP7760"
, /* 71 */	"VIP7760_CONTROLLER"
, /* 72 */	"VIP7801"
, /* 73 */	"VIP7801E"
, /* 74 */	"VIP7804"
, /* 75 */	"VIP7804_CLUSTER"
, /* 76 */	"VT100"
, /* 77 */	"VT100W"
, /* 78 */	"VT100WS"
, /* 79 */	"VT52"
			)
,     2 gcos_type bit(5)
;
	end set_terminal_type ;
%page;
/*   Variables for gcos_tss:			 */
/*   IDENTIFIER		ATTRIBUTES	 */
dcl  acct                     char (32);
dcl  addr                     builtin;
dcl  addrel                   builtin;
dcl  AFT_INITIALIZED	bit (1) init ("0"b);
dcl  al                       fixed bin(24);
dcl  any_other                condition ext;
dcl  ap                       ptr;
dcl  argl                     fixed bin (24);
dcl  argument                 char (argl) based (arg_ptr);
dcl  arg_ptr                  ptr init (null ());
dcl  ascii_channel_id         char (2);
dcl  bit_count                fixed bin (24);
dcl  cat_entry                fixed bin (18) unsigned;
dcl  cleanup                  condition ext;
dcl  clock                    builtin;
dcl  cmd_arg                  char(al)unal based(ap);
dcl  cmd_line		char (132);
dcl  code                     fixed bin (35);
dcl  command_error            condition;
dcl  copy                     builtin;
dcl  current_modes            char (400)static int init (" ");
dcl  cu_$arg_count            ext entry (fixed bin (24));
dcl  cu_$arg_ptr              entry(fixed bin(24),ptr,fixed bin(24),fixed bin(35));
dcl  cu_$cp		entry (ptr, fixed bin(21), fixed bin(35));
dcl  d                        fixed bin (24);
dcl  db_bits                  (72)bit (1)static int init ((72) (1)"0"b);
dcl  dc_ptr                   ptr init (null());
dcl  decode_clock_value_      ext entry (fixed bin (71), fixed bin (24), fixed bin (24), fixed bin (24), fixed bin (71), fixed bin (24), char (4) aligned);
dcl  delete_$ptr              entry (ptr, fixed bin (35));
dcl  djid                     char (5);
dcl  drun_cpu_limit           fixed bin (36) unsigned init (34000 * 64 * 1000);
dcl  drun_job_id              bit (36) init ("0"b);
dcl  empty                    builtin;
dcl  error                    bit (1) init ("0"b);
dcl  error_table_$arg_ignored fixed bin (35) ext;
dcl  error_table_$noentry     fixed bin (35)ext;
dcl  error_table_$not_attached fixed bin (35)ext;
dcl  error_table_$no_operation fixed bin (35)ext;
dcl  error_table_$out_of_sequence fixed bin (35) ext;
dcl  expand_pathname_         entry (char (*), char (*), char (*), fixed bin (35));
dcl  finish                   condition ext;
dcl  fixed_bin24              fixed bin (24) based;
dcl  fn                       fixed bin (24);
dcl  gcos_debug_$initial      entry (fixed bin (35));
dcl  get_pdir_                ext entry returns (char (168)aligned);
dcl  get_temp_segments_       entry (char (*), (*)ptr, fixed bin (35));
dcl  get_wdir_                ext entry returns (char (168));
dcl  gtss_already_called      bit (1)static int init ("0"b);
dcl  gtss_dump_kin_$clean     entry options(variable);
dcl  gtss_dump_kin_$fin       entry options(variable);
dcl  gtss_dump_kin_$init      entry() returns(bit(1));
dcl  gtss_fail                condition ext;
dcl  gtss_fix_tty_modes_	ext entry;
dcl  hbound                   builtin;
dcl  hcs_$fs_get_path_name    entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
dcl  hcs_$initiate_count      entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$set_max_length_seg  entry (ptr, fixed bin (35), fixed bin (35));
dcl  hcs_$status_minf         entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35));
dcl  i                        fixed bin (24);
dcl  installation_directory   char (168);
dcl  ioa_                     ext entry options (variable);
dcl  iox_$get_line            entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35))ext;
dcl  iox_$modes               entry (ptr, char (*), char (*), fixed bin (35));
dcl  iox_$put_chars           entry (ptr, ptr, fixed bin (24), fixed bin (35)) ext;
dcl  iox_$user_output         ptr ext;
dcl  k                        fixed bin (71);
dcl  l                        fixed bin (24);
/** To have druns run at 5:00PM when the user does not specify a start time,
simply change the commented out portion of the next dcl. Change 17 to
?? (hour number) if you want some other time. **/
dcl  drun_start_time          fixed bin (36) unsigned init (0); /**  init (17*60*60*64*1000) **/
dcl  drun_term_req            bit (1) auto init ("0"b);
dcl  execute_drun             fixed bin (18) unsigned init (0);
dcl  length                   builtin;
dcl  m                        fixed bin (24);
dcl  me_ptr                   ptr init (null ());
dcl  msf_manager_$adjust      entry (ptr, fixed bin (24), fixed bin (24), bit (3), fixed bin (35));
dcl  msf_manager_$close       entry (ptr);
dcl  msf_manager_$get_ptr     entry (ptr, fixed bin (24), bit (1), ptr, fixed bin (24), fixed bin (35));
dcl  msf_manager_$open        entry (char (*), char (*), ptr, fixed bin (35));
dcl  nargs                    fixed bin (24);
dcl  null                     builtin;
dcl  old_modes                char (400);
dcl  one_word                 bit (36) based;
dcl  pd                       char (168);
dcl  person_id                char (22);
dcl  proj                     char (9);
dcl  quit                     condition;
dcl  reattach                 bit (1);
dcl  rel                      builtin;
dcl  release_temp_segments_   entry (char (*), (*)ptr, fixed bin (35));
dcl  rtrim                    builtin;
dcl  sct_manager_$get         entry (fixed bin, ptr, fixed bin (35));
dcl  sct_manager_$set         entry (fixed bin, ptr, fixed bin (35));
dcl  search                   builtin;
dcl  size                     builtin;
dcl  status                   fixed bin (24)init (0);
dcl  substr                   builtin;
dcl  subsystem_name           char (4);
dcl  sys_info$max_seg_size    fixed bin (35)ext;
dcl  temp_segment_ptr         (7)ptr static int;
dcl  time                     fixed bin (71);
dcl  type                     fixed bin (2);
dcl  unique_chars_            entry (bit (*))returns (char (15));
dcl  unspec                   builtin;
dcl  user_info_               ext entry (char (*), char (*), char (*));
dcl  user_info_$homedir       entry (char (*));
dcl  user_info_$process_type  entry (fixed bin (17));
dcl  use_existing_components  bit (1)static int options (constant)init ("0"b);
dcl  w                        fixed bin (24);
dcl  wd_name                  char (32);
dcl  work_area                area (sys_info$max_seg_size)aligned based (gtss_ext_$work_area_ptr);
dcl  y                        fixed bin (24);
dcl  z                        char (4) aligned;

dcl 1 time2	aligned based(addr(time))
,     2 time53	fixed bin(53)unal
,     2 fill	bit(18)unal
;

dcl
     CR char (1)static int options (constant)init ("");

dcl 1 args (100),
    2 arg_p ptr,
    2 arg_l fixed bin (24);

dcl 1 drun_jid defined argument,
      2 d1 char (1),
      2 d2 char (1),
      2 d3 char (1),
      2 d4 char (1),
      2 d5 char (1);
%page;
%include gtss_ext_;
%page;
%include gtss_install_values_;
%page;
%include static_handlers;
%page;
%include gtss_ust_ext_;
%page;
%include gtss_SYstarstar_;
%page;
%include gtss_save_restore_data_;
%page;
%include gtss_dfd_ext_;
%page;
%include gtss_entry_dcls;
%page;
%include gtss_device_cmds;
%page;
%include gtss_defil_arg;
%page;
%include mc;
%page;
%include gse_ext_;
%page;
%include gtss_starCF_;
%page;
%include gtss_def_q_;
%page;
%include gtss_deferred_queue;
%page;
%include gtss_constants;
%page;
%include gtss_db_names;
     end gtss ;
