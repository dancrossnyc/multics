/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */

gtss_build_: proc;

/**	gtss "build" mode.

   Authors: Robert J. Grimes	Created
   -	  Albert N. Kepner	  1978
   -	  Robert M. May
   -	  David B. Ward
   Changed: Dave Ward		02/21/79 New get_line.
   Changed: Dave Ward		03/27/79 Convert put_chars.
   Changed: Al Kepner		03/30/79 fix problem with
   				an cc driving gtss which exits with &quit.
   Changed: Bob Alvarado		05/15/79 added return back to primitive
   				interp. for processing of #(commands).
   Changed: Al Dupuis		06/21/79 add call to gtss_CFP_break_
   Changed: Al Dupuis		06/14/79 to set external indicator to
   			          show if in build mode.
   Changed: Dave Ward		06/27/79 Corrected quit handling.
   Changed: Dave Ward		06/30/79 Retransmit message.
   Changed: Bob Alvarado		08/23/79 commented out ref to lswth.b10.
				08/31/79 added #auto and #autox code.
				09/04/79 reworked #auto code to accept
				line count and line incr.
   Changed: Bob Alvarado		11/26/79 removed all code simulating
				#auto and added a call to drl_callss.
				The auto subsystem is now processing 
				#auto.
   Changed: Scott C. Akers		08/17/81 Reset tty_modes on QUIT.
 **/

/**	gtss_build_ accumulates all input terminal line
   (up to the capacity of the SY** accumulator structure)
   and only writes the data to the SY** under two
   circumstances:

   1. Returning to the primitive interpreter
   (i.e., a non-line number input).

   2. SY** accumulator full (2 llinks, i.e., 640 words).
   **/
	in_pound_sign_build = "0"b;
	i = gtss_ust.lxxx.b0_17 - fixed (rel (addr (gtss_ust.lxxx)))+ fixed (rel (addr (gtss_ust)));
	if gtss_ust.lprgs (i).b0_17 = gtss_prgdes_ext_$edbn then do;

	/**	Build is being called by the editor. **/
	     in_edit = "1"b;
	end;
	else in_edit = "0"b;
	build_mode = "1"b;
	first8 = " ";

/**	Initialize gtss_SYstarstar.	**/
	unspec (gtss_SYstarstar_$FILE.RECORD) = "0"b;	/* Clear all SY** records. */
	call init_RECORD (1);
	rx = 1;					/* Current RECORD. */
	line_numb_len = 0;				/* => Auto[x] mode not on yet. */
	star_count = 0;				/* No begin of line star output yet. */
/* b10 will not be set by build  */
	/*	gtss_ust.lswth.b10, */ gtss_ust.lswth.b17 = "0"b; /* No data on SY** */

	on quit begin;
	     on quit call gtss_fix_tty_modes_;
	     call gtss_fix_tty_modes_;
	     gtss_ext_$restart_from_pi = restart;
	     gtss_ext_$last_k_was_out = "0"b;
	     gtss_ust.lbuf.tally = "0"b;
/* if in command file processing and break label specified set it's sector no */
	     if gtss_ust.lflg2.b8 then call gtss_CFP_break_;
	     if gse_ext_$modes.mquit then do;
		call ioa_ ("QUIT");
		call cu_$cl ();
	     end;
	     else signal program_interrupt;
restart:	     ;
	     gtss_ext_$restart_from_pi = gtss_ext_$bad_drl_rtrn;
	end;

	on program_interrupt go to next_asterisk;

next_line: ;

/**	Examine if SY** "full".	**/
	if rx >= hbound (gtss_SYstarstar_$FILE.RECORD, 1) then /* In final SY** record. */
	     if ((hbound (tty_data, 2)-tdw)*4) < gtss_ust.lrtll.char_length then do;
/* Not enough room in SY** for a maximum length record. */
		call write_SYstarstar;		/* Move tty lines to SY** file. */

/**	Place the SY** full "command" in UST remove i/o buffer. **/
		count_of_characters_transmitted = divide (length (SYstarstar_full)+8, 9, 17, 0);
		number_words_transmitted = divide (length (SYstarstar_full)+35, 17, 0);
		addr (characters_transmitted (1)) -> full_bits = SYstarstar_full;
		build_mode = "0"b;
		return;
	     end;

	if star_count = 0 then
	     if gtss_ext_$last_k_was_out then
		call gtss_ext_$put_chars (		/* Extra LF needed. */
		iox_$user_output
		, addr (LF)
		, 1
		, code);

next_asterisk: ;
	if gse_ext_$modes.ast then do;
	     call gtss_ext_$put_chars (		/* Output "*" on caller's terminal at the beginning of a line. */
		iox_$user_output
		, addr (CR_ASTERISK)
		, 2
		, code);
	     star_count = star_count+1;
	end;

after_asterisk: ;

	if gtss_ust.lflg2.b25 then do;		/* => AUTO[X] mode => provide line number. */
	     l = gtss_ust.linno;
	     if gtss_ust.lflg2.b24 then do;		/* No space => autox. */
		if l>99999999 then do;
		     call com_err_ (0, "gtss_build_", "mode terminated. line number too long.");
		     gtss_ust.lflg2.b25 = "0"b;
		     line_numb_len = 0;
		     goto next_line;
		end;
		if l>9999 then do;
		     p8 = l;
		     line_numb_ptr = addr (p8);
		     line_numb_len = 8;
		end;
		else do;
		     p4 = l;
		     line_numb_ptr = addr (p4);
		     line_numb_len = 4;
		end;
	     end;
	     else do;				/* Space => auto. */
		if l>9999999 then do;
		     call com_err_ (0, "gtss_build_", "mode terminated. line number too long.");
		     gtss_ust.lflg2.b25 = "0"b;
		     line_numb_len = 0;
		     goto next_line;
		end;
		if l>999 then do;
		     p7 = l;
		     line_numb_ptr = addr (p7space);
		     p7space.space = " ";
		     line_numb_len = 8;
		end;
		else do;
		     p3 = l;
		     line_numb_ptr = addr (p3space);
		     p3space.space = " ";
		     line_numb_len = 4;
		end;
	     end;
	     gtss_ust.linno = l + gtss_ust.lincr;	/* Increment the line number. */

	     call gtss_ext_$put_chars (		/* Print the line number on the caller's terminal. */
		iox_$user_output
		, line_numb_ptr
		, (line_numb_len)
		, code);

	     addr (characters_transmitted) -> MLN = line_numb_ptr -> MLN; /* Move line number to remote buffer. */
	end;

	gtss_ext_$last_k_was_out = "0"b;
	gtss_ust.lbuf.tally = "0"b;

reinput:	;
	call gtss_ext_$get_line (			/* Obtain next input line. */
	     iox_$user_input
	     , addr (characters_transmitted (line_numb_len+1))
	     , min (gtss_ust.lrtll.char_length, hbound (characters_transmitted, 1))-line_numb_len
	     , bytes_input
	     , code);
	if code ^= 0 then do;
	     if code = error_table_$end_of_info then go to after_asterisk;
	     if code = error_table_$long_record then do;
		call iox_$control (
		     iox_$user_input
		     , "resetread"
		     , null ()
		     , code
		     );
dcl  iox_$control             entry (ptr, char (*), ptr, fixed bin (35));
		call gtss_ext_$put_chars (		/* Print retry message. */
		     iox_$user_output
		     , addr (retry_message)
		     , length (retry_message)
		     , code);
		goto reinput;
	     end;
	     call com_err_ (code, "gtss_build_", "Terminal failure.");
	     signal cond (gtss_fail);
	end;

	if bytes_input = 0 then go to after_asterisk;

	if bytes_input = 1 then do;			/* No characters input (just a newline). */
	     if gtss_ust.lflg2.b25 then do;		/* Turn auto[x] mode off. */
		gtss_ust.linno = gtss_ust.linno-gtss_ust.lincr; /* Use current linno as next. */
		gtss_ust.lflg2.b25 = "0"b;
		line_numb_len = 0;
	     end;
	     count_of_characters_transmitted = length (CR4);
	     number_words_transmitted = divide (length (CR4)+3, 4, 17, 0);
	     addr (characters_transmitted (1)) -> CR4chars = CR4;
	     goto fin;
	end;

	if in_edit then do;
	     if bytes_input>1 then
		if characters_transmitted (1) = "#" then /* Special processing. */
		     if bytes_input>2 then
			if characters_transmitted (2) ^= "#" then do; /* Examine for command. */
check_for_command:		     ;
			     build_mode = "0"b;
			     pound_sign_cmd = substr (string (characters_transmitted), 2, 4);
			     if pound_sign_cmd ^= "auto" then do;
				call write_SYstarstar;
				return;
			     end;
			     count_of_characters_transmitted = bytes_input;
			     gtss_ext_$stack_level_ = gtss_ext_$stack_level_ - 1;
			     characters_transmitted (bytes_input) = CR;
			     call gtss_drl_callss_$callss_pound_sign_comd (addr (pound_sign_cmd), 1);
			     gtss_ext_$stack_level_ = gtss_ext_$stack_level_ + 1;
			     in_pound_sign_build = "1"b;
			     goto next_line;

/*
   if gtss_interp_prim_$is_command(substr(string(characters_transmitted),1,4)) then goto fin;
*/
			end;
			else			/* 2nd character is a "#". */
/**  ??
if terminal type = VIP
     &
   in CF mode then goto check_for_command;
*/			;
	end;
	else					/* => Not in editor. */
	if gse_ext_$modes.mcmd then
	     if bytes_input>2 then			/* Examine for escape to multics line. */
		if characters_transmitted (line_numb_len+1) = "e" then
		     if search (SP_TAB, characters_transmitted (line_numb_len+2))>0 then begin;
			call cu_$cp (addr (characters_transmitted (line_numb_len+3)), bytes_input-2, code);
			if gtss_ust.lflg2.b25 then
			     gtss_ust.linno = gtss_ust.linno-gtss_ust.lincr; /* Use current linno as next. */

/* Update gtss_ust.lid in case user has changed working_directory or
   used the gcos_set_environment command. */
			if gse_ext_$drm_rule = 2 then do; /* wd mapping rule */
						/* .LID in the UST will be set to the first
						   12 characters of the working_dir name. */
			     call expand_pathname_ (get_wdir_ (), "", wd_name, code);
			     if code ^= 0 then do;
				call com_err_ (code, "gtss_build_",
				     "Failed attempting to get entry name portion of working_dir");
				signal cond (gtss_fail);
			     end;
			     call gtss_ascii_bcd_ (addr (wd_name), 12, addr (gtss_ust.lid));
			end;
			else do;			/* umc or smc mapping rule */
			     call gtss_ascii_bcd_ (addr (gse_ext_$umc_name), 12, addr (gtss_ust.lid));
			end;
			goto next_line;
		     end;

	count_of_characters_transmitted,
	     bytes_read = line_numb_len + bytes_input;
	number_words_transmitted =
	     divide ((bytes_read+3), 4, 17, 0);
	characters_transmitted (bytes_read) = CR;

	if ^in_edit then
	     if line_numb_len = 0 then do;		/* Check if caller typed line number. */
		i = verify (first8, " ");
		if i <= 0 then do;			/* First 8 character of terminal line blank. */
fin:		     ;
		     if in_pound_sign_build then do;
			in_pound_sign_build = "0"b;
			goto next_line;
		     end;
		     call write_SYstarstar;
		     build_mode = "0"b;
		     return;
		end;
		if (search (characters_transmitted (i), "0123456789") = 0) then goto fin; /* Terminal line not numbered. */
	     end;

/**	Move terminal line into SY** accumulator.	**/

/**	Indicate SY** contains data.	**/
	bytes_read = bytes_read-1;			/* Exclude CR from SY** record. */
	tw =					/* Total words to SY** record. */
	     divide ((bytes_read+3), 4, 24, 0);
	if (tw+2)> (hbound (tty_data, 2)-tdw) then do;	/* Proceed to next SY**. */
	     RECORD (rx).number_words = tdw;		/* Record number of words in record. */
	     rx = rx+1;
	     call init_RECORD (rx);
	end;
	p = addr (RECORD (rx).tty_data (tdw));		/*  => start where file mark was. */
	p -> number_record_words = tw;
	j = mod (bytes_read, 4);
	p -> next_available_char_in_last_word = j2;	/* j2 => j. */
	p -> file_mark = "0"b;
	p -> zeroes = "0"b;
	p -> media_code = "0110"b;			/* => 6 => ASCII. */
	p -> report_code = "0"b;
	addrel (p, tw) -> b36 = (4)"177"b3;		/* First fill last data word with octal 177's. */
	addrel (p, 1) -> MS = addr (characters_transmitted) -> MS; /* Move data characters to remote buffer. */
	tdw = tdw+tw+1;				/* Data words + 1 RCW. */

	goto next_line;

init_RECORD: proc (r);

/**	Initialize RECORD( r )	**/
dcl  r                        fixed bin (24)parm;
	     tdw = 1;				/* Current tty_data word. */
	     RECORD (r).relative_block_count = r-1;
	     return;
	end					/* init_RECORD */;

write_SYstarstar: proc;

/**	Write the SY** accumulator out to the SY** file.	**/
	     if (rx = 1) & (tdw = 1) then return;	/* Still no data on SY**. */
/* b10 will not be set by build */
	     /* gtss_ust.lswth.b10, */ gtss_ust.lswth.b17 = "1"b; /* Data to merge in SY**. */
	     gtss_SYstarstar_$FILE.Seek_Address = 0;
	     RECORD (rx).number_words = tdw;		/* Record number words for final record. */
	     tty_data (rx, tdw) = "0"b;
	     addr (tty_data (rx, tdw)) -> file_mark = "1111"b; /* Provide file mark in final word. */
	     call gtss_ios_io_ (
		gtss_ext_$SYstarstar_file_no
		, addr (gtss_SYstarstar_$FILE.select_sequence)
		, addr (gtss_SYstarstar_$FILE.select_sequence)
		, fixed (rel (addr (tty_data (hbound (tty_data, 1), hbound (tty_data, 2))))) /* Last word of accumulator (offset) available. */
		, status
		, code);
	     if status ^= 0 then do;
		call com_err_ (code, "gtss_build_",
		     "Unable to write SY**, gtss_ios_ status=^i", status);
		signal cond (gtss_fail);
	     end;

/**	Initialize gtss_SYstarstar.	**/
	     call init_RECORD (1);
	     rx = 1;				/* Current RECORD. */
	     return;
	end					/* write_SYstarstar */;

/**	Variables for gtss_build_
   IDENTIFIER	ATTRIBUTES	**/
dcl  addr                     builtin;
dcl  pound_sign_cmd		char(4);
dcl  b36                      bit (36)aligned based;
dcl  bytes_input              fixed bin (21);
dcl  bytes_read               fixed bin (21);
dcl  code                     fixed bin (35);
dcl  CR4chars                 char(length(CR4))based;
dcl  cu_$cl                   ext entry ();
dcl  cu_$cp                   ext entry (ptr, fixed bin, fixed bin (35));
dcl  divide                   builtin;
dcl  error_table_$end_of_info fixed bin (35) ext;
dcl  error_table_$long_record fixed bin (35) ext;
dcl  expand_pathname_         entry (char(*), char(*), char(*), fixed bin(35));
dcl  first3                   pic"(3)9" based (addr (characters_transmitted));
dcl  first7                   pic"(7)9" based (addr (characters_transmitted));
dcl  first8                   char (8)aligned based (addr (characters_transmitted));
dcl  full_bits                bit(length(SYstarstar_full))based;
dcl  get_wdir_                entry returns(char(168));
dcl  gtss_fail                condition ext;
dcl  gtss_fix_tty_modes_	ext entry;
dcl  gtss_interp_prim_$re_enter_prim entry;
dcl  gtss_prgdes_ext_$edbn    fixed bin (24)ext;
dcl  i                        fixed bin;
dcl  in_pound_sign_build		bit(1);
dcl  in_edit                  bit(1);
dcl  ioa_                     ext entry options (variable);
dcl  ioa_$nnl                 ext entry options (variable);
dcl  iox_$get_line            entry (ptr, ptr,fixed bin(21),fixed bin(21),fixed bin(35));
dcl  iox_$user_input          ext ptr;
dcl  iox_$user_output         ext ptr;
dcl  j                        fixed bin (35);
dcl  l                        fixed bin (24);
dcl  line_numb_len            fixed bin (24);
dcl  line_numb_ptr            ptr init(null());
dcl  min                      builtin;
dcl  MLN                      char (line_numb_len)aligned based;
dcl  MS                       char (bytes_read)aligned based;
dcl  p                        ptr init(null());
dcl  p4                       pic"(4)9";
dcl  p8                       pic"(8)9";
dcl  program_interrupt        cond ext;
dcl  gtss_drl_callss_$callss_pound_sign_comd	entry(ptr,fixed bin);
dcl  quit                     condition ext;
dcl  rel                      builtin;
dcl  rtrim		builtin;
dcl  rx                       fixed bin (24);
dcl  search                   builtin;
dcl  SP                       char (1)static int options (constant)init (" ");
dcl  SP_TAB                   char (2)static int options (constant)init (" 	");
dcl  star_count               fixed bin (24);
dcl  status                   fixed bin (24);
dcl  substr                   builtin;
dcl  SYstarstar_full          bit(72)static int options(constant)init("004004004001015015015015"b3);
dcl  tdw                      fixed bin (24);
dcl  tw                       fixed bin (24);
dcl  wd_name                  char (32);

dcl  retry_message            char(21)static int options(constant)init("RETRANSMIT LAST LINE
");

dcl 1 p3space aligned
     , 3 p3 pic"(3)9" unal
     , 3 space char (1)unal
     ;

dcl 1 p7space aligned
     , 3 p7 pic"(7)9" unal
     , 3 space char (1)unal
     ;

dcl 1 j_overlay aligned based (addr (j)),
    2 l_34 bit (34)unal,
    2 j2 bit (2)unal;

dcl  HTAB			char(1)static int options(constant)init("	");
dcl
	CR4 char(4)static int options(constant)init((4)"");

dcl
     CR_ASTERISK char (2) static int options (constant) init ("*");
dcl
     CR char (1) static int options (constant) init ("");
dcl  LF                       char (1)static int options (constant)init ("
");

%include gtss_ust_ext_;

%include gtss_ext_;

%include mc;

%include gtss_SYstarstar_;

%include gtss_rec_control_word;

%include gtss_entry_dcls;

%include gse_ext_;
/**  **/
%include gtss_starCF_;
     end						/* gtss_build_ */;
