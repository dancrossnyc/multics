/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */

gtss_drl_gwake_: proc (mcp, increment);

/**
   DRL GWAKE, WAKE ME LATER (octal 66)


   8_________1_8_______

   LDQ      L(time)
   DRL      GWAKE


   Where:


   time - contains the number of seconds, right  justified  the
   user wishes to sleep.


   This  derail  causes  the calling program to be set inactive
   and eligible for swap for the number of seconds specified in  the
   Q-register.   There is an inherent delay of 1 to 2 seconds in the
   derail.  Breaks will cause the user to  be  awakened  before  the
   sleep time has elapsed.

   Authors:	Robert J. Grimes	Created
		Albert N. Kepner	  1978
		Robert M. May
		David B. Ward
   Changed:  	Paul Benjamin 10/22/79 	Removed pi handler
   Changed:	Al Dupuis 10/25/79		Added quit handler.
   Changed:	Scott C. Akers 08/17/81	Reset tty_modes on QUIT.
   **/
						/* externals */
dcl quit condition ext;
dcl  timer_manager_$sleep	ext entry (fixed bin (71), bit (2));
dcl  gtss_fix_tty_modes_	ext entry;
/* work variables */
dcl  time fixed bin (71);
dcl  increment fixed bin;
dcl (fixed, addr) builtin;

	increment = 0;
	scup = addr (mc.scu);
						/* time in relative secondes */
	time = fixed (mc.regs.q, 71);
						/* if time > 24 hours no go */
	if time/3600 > 24 then do;
	     call gtss_abort_subsystem_ (mcp, "gtss_drl_gwake_", 58, gtss_pnterr.err58,
		fixed (scu.ilc, 18));
	end;
	gtss_ust.lback.gwake = time;			/* save in ust for some reason */

/* If user is handling breaks, let him, otherwise abort subsystem */
	on quit begin;
	     call gtss_fix_tty_modes_;
	     if gtss_break_vector_$status ()
	     then do;
		call gtss_break_vector_ ();
		gtss_ext_$flags.dispose_of_drl_on_pi = "1"b;
		gtss_ext_$flags.unfinished_drl = "1"b;
		goto gtss_ext_$dispose_of_drl;
	     end;
	     else do;
		call gtss_abort_subsystem_ (
		     mcp,
		     "gtss_drl_gwake_",
		     0,
		     "");
		return;
	     end;
	end;

	call timer_manager_$sleep (time, "11"b);
	return;

%include gtss_pnterr;

%include gtss_ust_ext_;

%include gtss_ext_;
%include mc;

%include gtss_entry_dcls;
     end gtss_drl_gwake_;
