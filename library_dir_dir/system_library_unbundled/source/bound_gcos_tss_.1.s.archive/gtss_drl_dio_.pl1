/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/**************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   **************************************************************/
gtss_drl_dio_: proc (mcpp, increment);

/**	gtss user's disk i/o.

   Authors: Robert J. Grimes	Created
   -	  Albert N. Kepner	  1978
   -	  Robert M. May
   -	  David B. Ward
   Change:  Dave Ward	3/30/79 Debug display dio action.
   Change:  Bob Alvarado      08/22/79 added io  count to ust.
   Change:  Paul Benjamin	09/26/79 Error message for attempt to write to read-only file
   Change:  Dave Ward	10/30/79 Failure for quota overflow.
*/
dcl  mcpp                     ptr parm;
dcl  increment                fixed bin parm;
	mcp = mcpp;

/**

   DRL DIO, DO I/O ON USER'S FILE (octal 1)


   8_________1_6_____________________

   DRL      DIO
   Seek command
   ZERO     L(fileid),L(dcw1)
   Read/Write command
   ZERO     L(fileid),L(dcw2)
   ZERO     L(status),0

   (See TSS SYSTEM PROGRAMMER'S
   REFERENCE MANUAL DD17B, Rev. 0, July 1976
   Page 3-35)

*/

	increment = 5 ;				/* Five arguments */
	scup = addr (mc.scu);
	gseg = gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_);
	arg_list_ptr = addrel (gseg, fixed (scu.ilc, 18)+1); /* get address of arglist */

/**	Obtain name of file on which to do i/o.	**/
	if seek_locs.L_fileid >= gtss_ust.lsize.limit then do;
	     call gtss_abort_subsystem_ (mcp,
		"gtss_drl_dio_",
		4,
		"DIO: file name outside memory at (^6o)",
		fixed (scu.ilc, 18));
	     return;
	end;
	afn_ptr = addrel (gseg, seek_locs.L_fileid);

/**	Obtain pointer to return status word.	**/
	if L_status >= gtss_ust.lsize.limit then do;
	     call gtss_abort_subsystem_ (mcp,
		"gtss_drl_dio_",
		4,
		"DIO: Status word outside memory at (^6o)",
		fixed (scu.ilc, 18));
	     return;
	end;
	status_words_ptr = addrel (gseg, L_status);
	unspec (status_words.WORD1) = "0"b;		/* => Major status = 0. */
	Termination_indicator = "1"b;

/**	Obtain (fn) the AFT index to the file.	**/
	call gtss_aft_$find (ascii_file_name, fn, code);

	if code = 1 then do;			/* Unknown file (i.e., not in AFT). */
	     Major_status = "0001"b;			/* Device busy. */
	     return;
	end;
	if db_drl_dio then
	     call com_err_ (
	     0
	     , "gtss_drl_dio_"
	     , "^a on file ""^a"" (aft ^i)"
	     , iocmd (read_write_cmd.device_command)
	     , translate (ascii_file_name, UPPER, lower)
	     , fn
	     );

	call gtss_ios_io_ (
	     fn
	     , arg_list_ptr
	     , arg_list_ptr
	     , fixed (gtss_ust.lsize.limit, 24)
	     , status
	     , code);
	if (status ^= 0) & (status ^= 1) then do;	/* Not success and not eof. */
	     if db_drl_dio then
		call com_err_ (
		code
		, "gtss_drl_dio_"
		, "File ""^a"" (aft ^i) gtss_ios_io_ status=^i"
		, translate (ascii_file_name, UPPER, lower)
		, fn
		, status
		);
	     if (status = 2) then
		call gtss_abort_subsystem_ (
		mcp
		, "gtss_drl_dio_"
		, 0
		, "DIO(^6o) WRITE ATTEMPTED ON READ-ONLY FILE - ^a"
		, fixed (scu.ilc, 18)
		, translate (ascii_file_name, UPPER, lower)
		);
	     else
	     if (status = 16) then
		call gtss_abort_subsystem_ (
		mcp
		, "gtss_drl_dio_"
		, 0
		, "DIO(^6o) ^a EXCEEDED LLINKS AVAILABLE - ^a"
		, fixed (scu.ilc, 18)
		, iocmd (read_write_cmd.device_command)
		, translate (ascii_file_name, UPPER, lower)
		);
	     else
	     call gtss_abort_subsystem_ (
		mcp
		, "gtss_drl_dio_"
		, 0
		, "DIO (^6o) ^a FAILED FILE ""^a"" (AFT ^i)"
		, fixed (scu.ilc, 18)
		, iocmd (read_write_cmd.device_command)
		, translate (ascii_file_name, UPPER, lower)
		, fn
		);
	     return;
	end;
	no_of_disk_io = no_of_disk_io + 1;
	return;

/**	Variables for gtss_drl_dio_:
   IDENTIFIER		ATTRIBUTES	**/
dcl  addrel                   builtin;
dcl  afn_ptr                  ptr init(null());
dcl  arg_list_ptr             ptr init(null());
dcl  ascii_file_name          char (8)based (afn_ptr);
dcl  code                     fixed bin (35);
dcl  fn                       fixed bin (24);
dcl  gseg                     ptr init(null());
dcl  lower                    char(26)aligned static int options(constant)init("abcdefghijklmnopqrstuvwxyz");
dcl  status                   fixed bin (24);
dcl  UPPER                    char(26)aligned static int options(constant)init("ABCDEFGHIJKLMNOPQRSTUVWXYZ");

dcl 1 arg_list aligned based (arg_list_ptr)
     , 3 seek_cmd
     , 4 device_command bit (06)unal
     , 4 zeroes_1 bit (12)unal
     , 4 IOC_Command bit (05)unal
     , 4 zeroes_2 bit (01)unal
     , 4 control bit (06)unal
     , 4 count bit (06)unal

     , 3 seek_locs
     , 4 L_fileid bit (18)unal
     , 4 L_dcw1 bit (18)unal

     , 3 read_write_cmd
     , 4 device_command bit (06)unal
     , 4 zeroes_1 bit (12)unal
     , 4 IOC_Command bit (05)unal
     , 4 zeroes_2 bit (01)unal
     , 4 control bit (06)unal
     , 4 count bit (06)unal

     , 3 read_write_locs
     , 4 L_fileid bit (18)unal
     , 4 L_dcw2 bit (18)unal

     , 3 L_status bit (18)unal
     , 3 zeroes_3 bit (18)unal
     ;

%include gtss_ext_;

%include mc;


%include gtss_io_status_words;

%include gtss_ust_ext_;

%include gtss_entry_dcls;

%include gtss_device_cmds;

%include gtss_db_names;

%include gtss_iocmd;
     end						/* gtss_drl_dio_ */;
