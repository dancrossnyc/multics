/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */
gtss_aft_: proc;

/**	Provide gtss AFT (Available File Table) functions.

	Authors:	Robert J. Grimes	Created
		Albert N. Kepner	  1978
		Robert M. May
		David B. Ward
 **/

/**	Declaration of parameters for all
	entry points.
 **/
dcl	status		fixed bin(24)parm;
dcl	name		char(8)parm;
dcl	file_no		fixed bin(24)parm;
	call com_err_ (0, "gtss_aft_",
	     "See gtss_aft_ documentation for meaningful entries.");
	return;

initialize: entry (status);
/**	Initialize gtss_ext_$aft structure (external)
	to make all entries available.
 **/
	status = 0;				/* => successful. */
	start_list = 0;				/* => start list empty. */
	used = "0"b;				/* => AFT empty. */
	altname = " ";
	previous_add = 0;
	next_add = 0;
	do i = 2 to hbound (aft_entry, 1);		/* Link all entries available. */
	     next_entry (i-1) = i;
	end;
	next_entry (hbound (aft_entry, 1)) = 0;		/* End of available chain. */
	free_space = 1;				/* 1st aft_entry available. */
	first_added, last_added = 0;			/* No entries yet. */
	return;

add:	entry (name, file_no, status);
	n = translate (name, lower, upper);
	i = mod (n_fb72, hbound (start_list, 1)+1);
	k = start_list (i);
	do while (k>0);				/* Examine for name in aft table. */
	     if n = altname (k) then do;		/* Already in table. */
		file_no = k;
		status = 1;
		return;
	     end;
	     k = next_entry (k);			/* Link to next entry. */
	end;
/* (good) name not in table. */
	k = free_space;
	if k = 0 then do;				/* No entries available. */
	     file_no = 0;
	     status = 2;
	     return;
	end;

	free_space = next_entry (k);			/* Set free_space to next available. */
	altname (k) = n;				/* Place new name in aft. */
	next_entry (k) = start_list (i);		/* Link name into hash chain. */
	used (k) = "1"b;				/* => in use. */
	start_list (i) = k;				/* Reset start of hash chain. */

/**	Update order added chain.	**/
	if last_added = 0 then do;			/* First aft entry. */
	     first_added, last_added = k;
	     previous_add (k), next_add (k) = 0;
	end;
	else do;					/* Not the first entry. */
	     previous_add (k) = last_added;		/* The current last is before me. */
	     next_add (last_added) = k;		/* Place me at end of order added chain. */
	     next_add (k) = 0;			/* I am the last. */
	     last_added = k;			/* Now I'm the last. */
	end;

	file_no = k;
	status = 0;				/* New name successfully added. */
	return;

find:	entry (name, file_no, status);
	n = translate (name, lower, upper);
	k = start_list (mod (n_fb72, hbound (start_list, 1)+1));
	do while (k>0);
	     if n = altname (k) then do;		/* Found. */
		file_no = k;
		status = 0;
		return;
	     end;
	     k = next_entry (k);			/* Link to next entry in hash chain. */
	end;
/* Not found. */
	file_no = 0;
	status = 1;
	return;

delete:	entry (name, file_no, status);
	n = translate (name, lower, upper);
	i = mod (n_fb72, hbound (start_list, 1)+1);
	k = start_list (i);
	p = addr (start_list (i));			/* To be reset. */
	do while (k>0);
	     if n = altname (k) then do;		/* Found. */
		p -> fb = next_entry (k);		/* Link around k-th entry. */
		next_entry (k) = free_space;		/* Make k-th entry available. */
		used (k) = "0"b;			/* => not in use. */
		free_space = k;			/* Reset start of free entry chain. */

/**	Adjust add order chain.		**/
		goto FL (fixed ((first_added = k)|| (last_added = k)));

FL(0):;	/** Neither first nor last. **/
		previous_add (next_add (k)) = previous_add (k);
		next_add (previous_add (k)) = next_add (k);
		goto fin_FL;

FL(1):;	/** Not the first but is the last. **/
		i = previous_add (k);
		last_added = i;
		next_add (i) = 0;
		goto fin_FL;

FL(2):;	/** First but not last. **/
		i = next_add (k);
		first_added = i;
		previous_add (i) = 0;
		goto fin_FL;

FL(3):;	/** First and last. **/
		first_added, last_added = 0;		/* Final name deleted. */

fin_FL:		;

		file_no = k;
		status = 0;
		return;
	     end;
	     p = addr (next_entry (k));		/* To be reset. */
	     k = next_entry (k);			/* Link to next entry in hash chain. */
	end;
/* Not found. */
	file_no = 0;
	status = 1;
	return;

/**	Variables for gtss_aft_:
	IDENTIFIER	ATTRIBUTES	**/
dcl	com_err_		entry options(variable);
dcl	fb		fixed bin(24)based;
dcl	hbound		builtin;
dcl	i		fixed bin(24);
dcl	k		fixed bin(24);
dcl	lower		char(26)aligned static int options(constant)init("abcdefghijklmnopqrstuvwxyz");
dcl	mod		builtin;
dcl	n		char(8)aligned	/* Local name value. */;
dcl	n_fb72		fixed bin(71)aligned based(addr(n))	/* Name as numeric value. */;
dcl	p		ptr;
dcl	translate		builtin;
dcl	upper		char(26)aligned static int options(constant)init("ABCDEFGHIJKLMNOPQRSTUVWXYZ");

%include	gtss_ext_;
     end						/* gtss_aft_ */;
