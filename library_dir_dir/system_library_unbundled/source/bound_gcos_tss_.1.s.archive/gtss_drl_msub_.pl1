/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

gtss_drl_msub_: proc (mcpp, increment);

/**	gtss call a Multics subroutine.

	Author:	Dave Ward			05/04/79
 **/
dcl  mcpp                     ptr parm;
dcl  increment                fixed bin parm;
	mcp = mcpp;

/**

   DRL msub, CALL A MULTICS SUBROUTINE (octal -12)


   8_________1_6_____________________

   DRL      msub
   ZERO	L(status),version
   ZERO	L(entry),name-length
   ZERO	L(input),input-length
   ZERO	L(output),output-length

   A one word status is returned (offset L_status):
   0 => success.
   1 => failure.

   Version is a half word (2 ascii characters)
   indicating the version of this derail.

   L(entry) is an offset to an ascii string
   (name-length characters) naming a Multics
   entry to call.

   L(input & output) are offsets to corresponding
   input and output spaces in the GCOS caller's
   memory (limited by input & output -length). Their
   interpretation is particular to each subroutine
   usage.

	This derail is particular to gtss.

*/

	increment = 4 ;				/* 4 arguments */
	scup = addr (mc.scu);
	gseg = gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_);
	msub_arg_list_ptr = addrel (gseg, fixed (scu.ilc, 18)+1); /* get address of msub_arg_list */
	if (fixed (scu.ilc, 18)+3) >= fixed (gtss_ust.lsize.limit, 18) then
	     call gtss_abort_subsystem_ (mcp,
	     "gtss_drl_msub_",
	     0,
	     "File name outside memory (^o)",
	     fixed (scu.ilc, 18)
	     );

/* Check name, input, output and
   status within memory.
*/
	np = pointer (msub_arg_list_ptr, L_entry);
dcl  pointer                  builtin;
	if db_drl_msub then do;			/* Print arguments. */
	     call ioa_ ("PARM    OFFSET^-VALUE (parms at ^p)", msub_arg_list_ptr);
	     call ioa_ ("entry  ^6o^-^i^-""^a""", L_entry, en, name);
	     call ioa_ ("input  ^6o^-^i", L_input, in);
	     call ioa_ ("output ^6o^-^i", L_output, in);
	     call ioa_ ("status ^6o", L_status);
	     call ioa_ ("version^-^-^i", version);
	end;

/* Obtain a pointer to the Multics entry
   named in the caller's arguments.
*/
dcl  hcs_$make_ptr            entry(ptr,char(*),char(*),ptr,fixed bin(35));

/* Obtain segment and entry names. */
	i = search (name, "$");
	if i = 0 then				/* Both the same. */
	     seg_name, entry_name = name;
	else do;					/* Different. */
	     seg_name = substr (name, 1, i-1);
	     entry_name = substr (name, i+1);
	end;

	call hcs_$make_ptr (
	     null ()				/* no calling dir. */
	     , seg_name
	     , entry_name
	     , ep
	     , code
	     );
	if code ^= 0 then do;
	     call com_err_ (code, "gtss_drl_msub_",
		"For ""^a$^a""", seg_name, entry_name);
	     status = 1;
	     return;
	end;

	call cu_$ptr_call (ep, msub_arg_list_ptr);
	status = 0;
	return;

/**	Variables for gtss_drl_msub_:
     IDENTIFIER		ATTRIBUTES	**/
dcl  addrel                   builtin;
dcl  code                     fixed bin(35);
dcl  cu_$ptr_call             entry options(variable);
dcl  entry_name               char(32);
dcl  ep                       ptr init(null());
dcl  fn                       fixed bin(24);
dcl  gseg                     ptr;
dcl  i                        fixed bin;
dcl  ioa_                     entry options(variable);
dcl  name                     char(en) aligned based(np);
dcl  np                       ptr;
dcl  seg_name                 char(32);
dcl  status                   fixed bin(35) based(pointer(msub_arg_list_ptr,L_status));

%include gtss_msub_args;

%include mc;

%include gtss_ext_;

%include gtss_entry_dcls;

%include gtss_ust_ext_;

%include gtss_db_names;
     end						/* gtss_drl_msub_ */;
