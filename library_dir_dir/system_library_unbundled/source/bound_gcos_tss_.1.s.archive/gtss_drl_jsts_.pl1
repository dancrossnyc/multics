/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

gtss_drl_jsts_: proc (mcpp, increment);

/**	gtss obtain job status.

	Author:	Mel Wilson			29mar79
 **/
dcl  mcpp                     ptr parm;
dcl  increment fixed bin parm;
	mcp = mcpp;

/**

   DRL JSTS, OBTAIN JOB STATUS (octal ('drl_code'))


   8_________1_6_____________________

   DRL      JSTS
on input:
word_1
   BCI     1,snumb
word_2 (optional)
   VFD     18/L_buffer,9/0,6/,3/n

on output:
word_1
   VFD     9/status_code,9/activity_number,18/
word_2, if present, is not affected


    (See TSS SYSTEM PROGRAMMER'S
         REFERENCE MANUAL DD17C, Rev. 0, July 1976
         Page 3-13)

*/

	scup = addr (mc.scu);
	gseg = gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_);
	if fixed (scu.ilc, 18) + 1 >= fixed (gtss_ust.lsize.limit, 18) then
	     call gtss_abort_subsystem_ (mcp, "gtss_drl_jsts_", 0,
	     "DRL parameter list outside memory (^o)", fixed (scu.ilc, 18));
	arg_list_ptr = addrel (gseg, fixed (scu.ilc, 18) + 1);

	call gtss_bcd_ascii_$lc (arg_list_ptr, 5, addr (given_snumb));

	call gtss_get_user_state_ (u_state_ptr);
	do i = 1 to entry_count while (snumb (i) ^= given_snumb);
	end;
	if i > entry_count then do;			/* given snumb not known */
	     return_status = 18;
	     return_activity = 0;
	end;
	else do;					/* set up status from gtss_user_state_ entry */
	     return_status = status (i);
	     return_activity = activity (i);
	end;
	return_filler = "0"b;

	if opcode ^= "0"b then			/* no optional buffer supplied */
	     increment = 1;
	else do;					/* return status message into buffer, if all is legal */
	     increment = 2;
	     if L_buffer > fixed (gtss_ust.lsize.limit, 18) - max (320, 320*buf_n) then
		call gtss_abort_subsystem_ (mcp, "gtss_drl_jsts_", 0,
		"Buffer outside memory (^o)", fixed (scu.ilc, 18));
	     call gtss_ascii_bcd_ (addr (status_msg (return_status)),length (rtrim (status_msg (return_status))),
		addrel (gseg, L_buffer));
	     ret_tally_adr = L_buffer;		/* set up buffer tally for return */
	     ret_tally_cnt = length (rtrim (status_msg (return_status)));
	     ret_tally_off = 0;
	end;

	return;

/** gtss_drl_jsts_ local declarations */

dcl  arg_list_ptr ptr;
dcl 1 arg_list based (arg_list_ptr),
   2 bcd_snumb unal,
      3 return_status fixed bin (9) unsigned unal,
      3 return_activity fixed bin (9) unsigned unal,
      3 return_filler bit (18),
   2 optional_word_2 unal,
      3 L_buffer fixed bin (18) unsigned unal,
      3 opcode bit (9) unal,
      3 filler1 bit(6) unal,
      3 buf_n fixed bin (3) unsigned unal;

dcl  gseg ptr;
dcl  given_snumb char (5) init ("");
dcl  i fixed bin;

dcl  status_msg (0:20) int static char (16) 
        init ( /* msg_0  */ "status changing",
	     /* msg_1  */ "reading-cr",
	     /* msg_2  */ "reading-mt",
	     /* msg_3  */ "reading-rmt",
	     /* msg_4  */ "wait-aloc",
	     /* msg_5  */ "wait-perip",
	     /* msg_6  */ "wait-core",
	     /* msg_7  */ "in hold",
	     /* msg_8  */ "in limbo",
	     /* msg_9  */ "executing",
	     /* msg_10 */ "swapped",
	     /* msg_11 */ "wait-media",
	     /* msg_12 */ "too-big",
	     /* msg_13 */ "overdue",
	     /* msg_14 */ "in restart",
	     /* msg_15 */ "terminating",
	     /* msg_16 */ "output waiting",
	     /* msg_17 */ "output complete",
	     /* msg_18 */ "not accesible",
	     /* msg_19 */ "not your job",
	     /* msg_20 */ "aborted" );

dcl 1 local_q based (addr(mc.q)),
   2 ret_tally_adr fixed bin (18) unsigned unal,
   2 ret_tally_cnt fixed bin (12) unsigned unal,
   2 ret_tally_off fixed bin (6) unsigned unal;

dcl  gtss_get_user_state_ entry (ptr);

%include gtss_ext_;

%include gtss_snumb_xref_;

%include mc;

%include gtss_ust_ext_;

%include gtss_entry_dcls;
     end gtss_drl_jsts_;
