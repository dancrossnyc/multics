/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */
gtss_drl_rew_: proc (mcpp, increment);

/**	gtss rewind a linked (sequential) file.

   Authors: Robert J. Grimes	Created
   -	  Albert N. Kepner	  1978
   -	  Robert M. May
   -	  David B. Ward
   Change:  Dave Ward	02/24/79 $db debug switch.
   Change:  Dave Ward	09/17/79 New gtss_ios_position_ usage.
   **/
dcl  mcpp                     ptr parm;
dcl  increment                fixed bin parm;
	mcp = mcpp;

/**

   DRL REW, REWIND A LINKED FILE (octal 12)


   8_________1_6_____________________

   DRL      REW
   ZERO     L(fileid),L(stat)

   (See TSS SYSTEM PROGRAMMER'S
   REFERENCE MANUAL DD17B, Rev. 0, July 1976
   Page 3-54)

*/

	increment = 1 ;				/* One arguments */
	scup = addr (mc.scu);
	gseg = gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_);
	arg_list_ptr = addrel (gseg, fixed (scu.ilc)+1);	/* get addres of arg_list */

/**	Obtain name of file to rewind.	**/
	if L_fileid >= gtss_ust.lsize.limit then do;
	     call gtss_abort_subsystem_ (mcp,
		"gtss_drl_rew_",
		4,
		"REW: file name outside memory at (^o)",
		fixed (scu.ilc, 18));
	     return;
	end;
	afn_ptr = addrel (gseg, L_fileid);
	if db_drl_rew then
	     call ioa_ ("REW: file ^a", ascii_file_name);

/**	Obtain pointer to return status word.	**/
	if L_stat >= gtss_ust.lsize.limit then do;
	     call gtss_abort_subsystem_ (mcp,
		"gtss_drl_rew_",
		4,
		"REW: Status word outside memory at (^6o)",
		fixed (scu.ilc, 18));
	     return;
	end;
	status_word_ptr = addrel (gseg, L_stat);
	unspec (status_word) = "0"b;
	gcs = "4002"b3;				/* => success (at load point). */

/**	Obtain (fn) the AFT index to the file.	**/
	call gtss_aft_$find (ascii_file_name, fn, code);
	if code = 1 then do;			/* Unknown file (i.e., not in AFT). */
	     gcs = "4100"b3;			/* Device busy. */
	     return;
	end;

/**	Rewind the file.	**/
	call gtss_ios_position_ (
	     fn
	     , -1					/* Position to beginning. */
	     , 0
	     , rcr				/* record count residue (not used). */
	     , status_word_ptr
	     );
	if gcs ^= "4002"b3 then do;
	     if db_drl_rew then
		call com_err_ (
		code
		, "gtss_drl_rew_"
		, "File ""^a"" (aft ^i) gtss_ios_position_ status=^w"
		, ascii_file_name
		, fn
		, gcs
		);
	     call gtss_abort_subsystem_ (
		mcp
		, "gtss_drl_rew_"
		, 0
		, "REW: Unable to position"
		);
	end;
	return;

/**	Variables for gtss_drl_rew_:
   IDENTIFIER		ATTRIBUTES	**/
dcl  addrel                   builtin;
dcl  afn_ptr                  ptr init(null());
dcl  arg_list_ptr             ptr init(null());
dcl  ascii_file_name          char (8)based (afn_ptr);
dcl  code                     fixed bin (35);
dcl  fn                       fixed bin (24);
dcl  gseg                     ptr init(null());
dcl  ioa_			entry options(variable);
dcl  rcr			bit(6)unal;
dcl  status                   fixed bin (24);

dcl  status_word_ptr	ptr;
dcl 1 status_word aligned based(status_word_ptr),
      2 gcs bit(12)unal,
      2 fill bit(24)unal;

dcl 1 arg_list aligned based (arg_list_ptr)
     , 2 L_fileid bit (18)unal
     , 2 L_stat bit (18)unal
     ;

%include gtss_ext_;

%include mc;

%include gtss_ust_ext_;

%include gtss_entry_dcls;

%include gtss_db_names;
     end						/* gtss_drl_rew_ */;
