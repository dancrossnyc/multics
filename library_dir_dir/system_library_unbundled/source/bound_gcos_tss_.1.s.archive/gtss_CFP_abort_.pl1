/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

gtss_CFP_abort_: proc;


/**
	Author: Al Dupuis 06/21/79

	This procedure is called by gtss_abort_subsystem_ when an error
	has occured which will terminate command file processing (CFP).
	A given *CF file (of which there may be *CFP *CFQ *CFR *CFS and *CFT)
	will contain it's own bcd label table, and the information to
	restore the previous (more inner) file. This procedure sets
	the restore information to the ..abort label sector number,
	if it is present, if not, it sets it to the COUT sector so that
	the file will terminate.
**/



/* read the current *CF file's COUT sector */
	gtss_starCF_$FILE.OP2.Device_Command = read_cmd;
	file_number = gtss_starCF_$FILE.cf.aft_indx;
	gtss_starCF_$FILE.Seek_Address = gtss_ust.lcfst.initial_sect_out - 1;
	call read_cout;
	if status ^= 0 then return;
	cout_ptr = addr (no_characters);
	scp = addr (save_cout);

/* set the next input sector to be the $*$lbl ..abort sector if present,
   if not set it to the COUT sector so this *CF file will terminate */
	if label_present ()
	then gtss_ust.lcfio.sect_in = new_sect_in;
	else gtss_ust.lcfio.sect_in = gtss_ust.lcfst.initial_sect_out - 1;

	i = 1;
	highest_level = 0;

/* if we're not in nested CFP then we're done */
	do a = "Q", "R", "S", "T";
	     call gtss_aft_$find ("*CF" || a, fn, code);
	     if code = 0 then do;
		file_no (i) = fn;
		highest_level = highest_level + 1;
	     end;
	     i = i + 1;
	end;

	if highest_level = 0 then return;

	highest_level = highest_level + 1;
	file_no (highest_level) = gtss_starCF_$FILE.cf.aft_indx;

/* save the current COUT sector */
	save_cout = cout_ptr -> cout;
	old_seek_no = gtss_ust.lcfst.initial_sect_out - 1;

	do i = highest_level to 2 by -1;

/* read the previous (more inner) COUT sector */
	     file_number = file_no (i - 1);
	     new_seek_no = scp -> c_lcfst.init_sect_out - 1;
	     gtss_starCF_$FILE.Seek_Address = scp -> c_lcfst.init_sect_out - 1;
	     gtss_starCF_$FILE.OP2.Device_Command = read_cmd;
	     call read_cout;
	     if status ^= 0 then return;

/* if it has a ..abort label, set the saved COUT restore information
   to reflect it, else set the restore info to it's COUT sector */
	     if label_present ()
	     then scp -> c_lcfio.sector_in = new_sect_in;
	     else scp -> c_lcfio.sector_in = scp -> c_lcfst.init_sect_out - 1;
	     temp_buffer = cout_ptr -> cout;
	     cout_ptr -> cout = save_cout;

/* and write the COUT sector with restore information */
	     gtss_starCF_$FILE.OP2.Device_Command = write_cmd;
	     file_number = file_no (i);
	     gtss_starCF_$FILE.Seek_Address = old_seek_no;
	     call write_cout;
	     if status ^= 0 then return;
	     old_seek_no = new_seek_no;
	     save_cout = temp_buffer;
	end;

label_present: proc returns (bit (1));

	     do idx = 1 to hbound (cout_ptr -> label_table, 1);
		if abort_label = cout_ptr -> label_name (idx) then do;
		     new_sect_in = cout_ptr -> label_pos (idx);
		     cout_ptr -> label_name (idx) = "0"b;
		     cout_ptr -> label_pos (idx) = 0;
		     return ("1"b);
		end;
	     end;
	     return ("0"b);

dcl idx fixed bin (24);
	end;					/* label_present */

read_cout: write_cout: proc;

	     status = 0;
	     call gtss_ios_io_ (			/* read/write the cout sector from *CFP */
		file_number,
		addr (select_sequence),
		addr (select_sequence),
		fixed (rel (addr (gtss_starCF_$FILE.cf))),
		status,
		code);
	     if status ^= 0
	     then call ioa_ ("gtss_CFP_abort_:" ||
		"Unable to read/write cout sector (status ^i)",
		status);

	end;					/* read_write_cout */

dcl  a char (1);
dcl  abort_label bit (54) static int options (constant) init ("333321224651632020"b3);						/* bcd ..ABORT */
dcl  code fixed bin (35);
dcl  cout char (253) based;
dcl  cout_ptr ptr init (null());
dcl  file_name (5) char (4) init ("*CFP", "*CFQ", "*CFR", "*CFS", "*CFT");
dcl  file_no (5) fixed bin (24);
dcl  file_number fixed bin (24);
dcl  fn fixed bin (24);
dcl  gtss_fail condition ext;
dcl  highest_level fixed bin (24);
dcl  i fixed bin (24);
dcl  ioa_ entry options (variable);
dcl  new_sect_in fixed bin (18) unsigned;
dcl  new_seek_no fixed bin (18) unsigned;
dcl  old_seek_no fixed bin (18) unsigned;
dcl  save_cout char (253);
dcl  scp ptr init (null());
dcl  status fixed bin (24);
dcl  temp_buffer char (253);

%include gtss_deferred_queue;

%include gtss_starCF_;

%include gtss_entry_dcls;

%include gtss_ust_ext_;

%include gtss_device_cmds;
     end;						/* gtss_CFP_abort_ */
