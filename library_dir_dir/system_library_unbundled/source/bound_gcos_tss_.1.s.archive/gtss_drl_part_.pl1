/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */
gtss_drl_part_: proc (mcpp, increment);

/*	gtss release portion of temporary file.

   Authors: Robert J. Grimes	Created
   -	  Albert N. Kepner	  1978
   -	  Robert M. May
   -	  David B. Ward
   Change:  Dave Ward		09/17/79 New ios$position usage.
   Change:  Dave Ward	10/31/79 Record quota overflow specific.
   */
dcl  mcpp                     ptr parm;
dcl  increment                fixed bin parm;
	mcp = mcpp;

/*

   DRL PART, PARTIAL RELEASE OF TEMPORARY FILEoctal 47)


   8_________1_6_____________________

   DRL      PART
   ZERO     L(fileid),n

   (See TSS SYSTEM PROGRAMMER'S
   REFERENCE MANUAL DD17B, Rev. 0, July 1976
   Page 3-53)

*/

	increment = 1 ;				/* One arguments */
	scup = addr (mc.scu);
	gseg = gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_);
	arg_list_ptr = addrel (gseg, fixed (scu.ilc)+1);	/* get addres of arg_list */

/*	Obtain name of file to release.	*/
	if L_fileid >= gtss_ust.lsize.limit then do;
	     call gtss_abort_subsystem_ (
		mcp
		, "gtss_drl_part_"
		, 4
		, "PART: FILE NAME OUTSIDE MEMORY AT (^6o)"
		, fixed (scu.ilc, 18)
		);
	     return;
	end;
	afn_ptr = addrel (gseg, L_fileid);

/*	Obtain (fn) the AFT index to the file.	*/
	call gtss_aft_$find (ascii_file_name, fn, code);
	if code = 1 then do;			/* Unknown file (i.e., not in AFT). */
failed:	     ;
	     AU = 1;
	     return;
	end;

/*	Check that the file is temporary.		*/
	if gtss_disk (fn).pat_body.perm then goto failed;

/*	Change size.	*/
	call gtss_ios_change_size_ (
	     fn
	     , -n
	     , "1"b				/* Size in links (not llinks). */
	     , status
	     , code);
	if status>1 then do;
	     if db_drl_part then
		call com_err_ (
		code
		, "gtss_drl_part_"
		, "gtss_ios_change_size_ status ^i."
		, status
		);
	     if code = error_table_$rqover then
		call gtss_abort_subsystem_ (
		mcp
		, "gtss_drl_part_"
		, 0
		, "PART(^6o) EXCEEDED AVAILABLE LINKS ^a"
		, fixed (scu.ilc, 18)
		, translate (ascii_file_name, UPPER, lower)
		);
	     call gtss_abort_subsystem_ (
		mcp
		, "gtss_drl_part_"
		, 0
		, "PART(^6o) FILE ^a"
		, fixed (scu.ilc, 18)
		, translate (ascii_file_name, UPPER, lower)
		);
	     return;
	end;

/*	Rewind the file.	*/
	call gtss_ios_position_ (
	     fn
	     , -1					/* Position to beginning. */
	     , 0
	     , rcr				/* record count residue (not used). */
	     , addr (gstats)
	     );
	if gsc ^= "4002"b3 then do;
	     if db_drl_part then
		call com_err_ (
		code
		, "gtss_drl_part_"
		, "File ""^a"" (aft ^i) gtss_ios_position_ status=^w"
		, ascii_file_name
		, fn
		, gsc
		);
	     call gtss_abort_subsystem_ (
		mcp
		, "gtss_drl_part_"
		, 0
		, "PART: UNABLE TO REWIND AT (^6o)"
		, fixed (scu.ilc, 18)
		);
	     return;
	end;
	AU = 0;					/* Request satisfied. */
	return;

/*	Variables for gtss_drl_part_:
   IDENTIFIER		ATTRIBUTES	*/
dcl  addrel                   builtin;
dcl  afn_ptr                  ptr init(null());
dcl  arg_list_ptr             ptr init(null());
dcl  ascii_file_name          char (8)based (afn_ptr);
dcl  code                     fixed bin (35);
dcl  error_table_$rqover	fixed bin(35)ext;
dcl  fn                       fixed bin (24);
dcl  gseg                     ptr init(null());
dcl  lower                    char(26)aligned static int options(constant)init("abcdefghijklmnopqrstuvwxyz");
dcl  rcr                      bit(6)unal;
dcl  status                   fixed bin (24);
dcl  UPPER                    char(26)aligned static int options(constant)init("ABCDEFGHIJKLMNOPQRSTUVWXYZ");

dcl 1 gstats aligned,
      2 gsc bit(12)unal,
      2 fill bit(60)unal;

dcl 1 A_reg aligned based (addr (mc.regs.a)),
    2 AU fixed bin (17)unal,
    2 AL fixed bin (17)unal;

dcl 1 arg_list aligned based (arg_list_ptr)
     , 2 L_fileid bit (18)unal
     , 2 n fixed bin (17)unal
     ;

%include gtss_ext_;

%include mc;

%include gtss_dfd_ext_;

%include gtss_entry_dcls;

%include gtss_ust_ext_;

%include gtss_db_names;
     end						/* gtss_drl_part_ */;
