/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

gtss_drl_pseudo_: proc (mcpp, increment);

/* *	gtss pseudo terminal input

   Author:	Bob Grimes		06/09/78
   Changed:	Dave Ward			06/23/78
   Corrected usage of remote io buffer.
   Changed:	Paul Benjamin		10/25/79
   Turn off lbuf.tally
   * */
dcl  mcpp ptr parm;
dcl  increment fixed bin parm;
	mcp = mcpp;

/* *

   DRL PSEUDO, SIMULATED KEYBOARD INPUT (octal 64)


   8_________1_6_____________________

   DRL      PSEUDO
   ZERO     L(tally),L(stat)

   (See TSS SYSTEM PROGRAMMER'S
   REFERENCE MANUAL DD17B, Rev. 0, July 1976
   Page 3-20)

*/


/*	External Entries 		*/


/*	Work Variables		*/

dcl  gesg ptr init(null());
dcl  move_string char (number_chars) based;
dcl  initial_tally_char (0:number_chars+3)char (1)based (addrel (gseg, tally.address));
dcl  number_chars fixed bin (17);
dcl  number_words fixed bin (17);

dcl  arg_ptr ptr init(null());
dcl 1 arglist aligned based (arg_ptr),
    2 tally fixed bin (17) unaligned,
    2 status fixed bin (17) unaligned;

dcl  tally_ptr ptr init(null());
dcl 1 tally aligned based (tally_ptr),
    2 address fixed bin (17) unaligned,
    2 chars fixed bin (11) unaligned,
    2 type bit (3) unaligned,
    2 offset fixed bin (2) unaligned;

dcl  gseg ptr init(null());

dcl (addr, addrel, substr) builtin;


	scup = addr (mc.scu);
						/* only one arguement */
	increment = 1;
						/* get pointer to segment */
	gseg = gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_);
	arg_ptr = addrel (gseg, fixed (scu.ilc)+1);
						/* check bounds for the arguments */
	if arglist.tally > fixed (gtss_ust.lsize.limit, 18) then do;
	     call gtss_abort_subsystem_ (mcp,
		"gtss_drl_pseudo_",
		4,
		gtss_pnterr.err4,
		fixed (scu.ilc, 18));
	     return;
	end;

	if arglist.status > fixed (gtss_ust.lsize.limit, 18) then do;
	     call gtss_abort_subsystem_ (mcp,
		"gtss_drl_pseudo_",
		4,
		gtss_pnterr.err4,
		fixed (scu.ilc, 18));
	     return;
	end;

/*	Set up to find his tally */
	tally_ptr = addrel (gseg, arglist.tally);
						/* check for only tallyb */
	if tally.type ^= "100"b then do;
	     call gtss_abort_subsystem_ (mcp,
		"gtss_drl_pseudo_",
		49,
		gtss_pnterr.err49,
		fixed (scu.ilc, 18));
	     return;
	end;
						/* allow no more than 244 characters to be placed */
	if tally.chars > 244 then do;
	     call gtss_abort_subsystem_ (mcp,
		"gtss_drl_pseudo_",
		49,
		gtss_pnterr.err49,
		fixed (scu.ilc, 18));
	     return;
	end;
						/* make sure the tally address doesn't go out of bounds */
	if tally.address > fixed (gtss_ust.lsize.limit, 18) then do;
	     call gtss_abort_subsystem_ (mcp,
		"gtss_drl_pseudo_",
		4,
		gtss_pnterr.err4,
		fixed (scu.ilc, 18));
	     return;
	end;

	number_chars = tally.chars;
	number_words = divide ((number_chars+3), 4, 24, 0);

/* also look at the end of his string to move for boundry check */
	if (tally.address+ number_words) > fixed (gtss_ust.lsize.limit, 18) then do;
	     call gtss_abort_subsystem_ (mcp,
		"gtss_drl_pseudo_",
		4,
		gtss_pnterr.err4,
		fixed (scu.ilc, 18));
	     return;
	end;
	number_words_transmitted = number_words;
	count_of_characters_transmitted = number_chars;
	addr (characters_transmitted) -> move_string =
	     addr (initial_tally_char (tally.offset)) -> move_string;
	gtss_ust_ext_$ust.gtss_ust.lbuf.tally = "0"b;
	return;

%include gtss_ust_ext_;

%include gtss_pnterr;

%include gtss_ext_;

%include mc;

%include gtss_entry_dcls;
     end gtss_drl_pseudo_;
