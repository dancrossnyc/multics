/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

gtss_ios_io_: proc (file_no, select_ptr, memory_ptr, memory_limit, status, code);

/*
   "		     This entry performs random or sequential input or output  on
   "		the  designated file according to the select sequence provided by
   "		the user.

   Author: Dave Ward	03/04/80 (derived from gtss_ios_)
*/
dcl  code                     fixed bin (35) parm;
dcl  file_no                  fixed bin (24) parm;
dcl  memory_limit             fixed bin (24) parm;
dcl  memory_ptr               ptr parm;
dcl  select_ptr               ptr parm;
dcl status fixed bin(24)parm;

	fn = file_no;				/* Use local variables */
	sp = select_ptr;
	storlimit = memory_limit+1;			/* The memory_limit parameter passed to gtss_ios_io_
						   is the address of the highest location in the segment which
						   may be accessed.  The storlimit variable represents the
						   number of words at the beginning of te segment which
						   may be accessed. */
	ap = gtss_disk.attributes_ptr (fn);

	status = 0;				/* Initialize status to indicate no error */
	code = 0;

	seeksw = "0"b;
	slave_status = "400000000000"b3;
	idptr = addrel (sp, 1);			/* get pointer to first identifier word */
	ta_seg_ptr = baseptr (baseno (memory_ptr));	/* get pointer to beginning of
						   user's memory segment */
	select_seg_ptr = baseptr (baseno (sp));		/* get pointer to beginning of
						   segment containing select sequence */
	select_seq_in_memory = (select_seg_ptr = ta_seg_ptr);
	opptr = addrel (idptr, -1);			/* build pointer to operation word */
	sptr = addrel (idptr, 1);			/* build pointer to return word */
	dcw_offset = fixed (id_word.dcwp);		/* get dcw list pointer */
	count = 1;
	if db_ios then
	     call ioa_ ("Select Sequence for file ^i:", fn);
						/* Make sure file number is valid and file is open */
	if bad_file_status (fn, status) then do;
	     call return_stat;
	     return;
	end;
	data_moved = 0;
	da_residue = 0;
	wc_residue = 0;

lookup:	;

	do i = 1 to hbound (io_commands, 1);
	     cmd_word = io_commands (i);		/* get command */
	     if substr (cmd_word, 1, 6) = op_word.dev_com then /* are device and */
		if substr (cmd_word, 19, 5) = op_word.ioc_com then do; /* ioc commands = ? */

		     on cond (record_quota_overflow) begin;
			gtss_disk (fn) = gtss_disk (41); /* Restore file fn to state before change_size. */
			if db_ios then
			     call ioa_ ("gtss_ios_io_: record quota overflow.");
			code = error_table_$rqover;
			call return_stat;
			status = 16;		/* Record quota overflow. */
			goto fin_io;
		     end;
		     gtss_disk (41) = gtss_disk (fn);	/* Save state of file fn. */
		     goto com_proc (i);		/* goto processing rtn */
		end;
	end;					/* no...continue */


	status = 3;				/* unsupported I/O command */
	call return_stat;
fin_io:	;

	return;

com_proc (1): ;					/* disk or drum seek */

	if count >= 2 then do;
	     status = 13;				/* second I/O command cannot be seek */
	     call return_stat;
	     return;
	end;

	seeksw = "1"b;				/* indicate seek to be done */


	if pat_body (fn).random then do;		/* no seek necessary for sequential file */

	     if select_seq_in_memory then
		if dcw_offset >= storlimit then do;	/* dcw addr OOB? */
		     status = 4;			/* DCW is outside of slave limits */
		     if db_ios then call ioa_ ("dcw_offset = ^i; storlimit = ^i",
			dcw_offset, storlimit);
		     call return_stat;
		     return;
		end;

	     dcw_ptr = addrel (select_seg_ptr, dcw_offset); /* get address of dcw */
	     if select_seq_in_memory then
		if fixed (dcw.data_addr) >= storlimit	/* data address OOB? */
		then do;
		     status = 5;			/* DCW points outside of slave limits */
		     call return_stat;
		     return;
		end;

	     if fixed (dcw.count) ^= 1 then do;
		status = 6;			/* Seek DCW count is not 1 */
		call return_stat;
		return;
	     end;

	     seek_ptr = addrel (select_seg_ptr, dcw.data_addr);
	     i = seek_ptr -> seek_address;		/* grab seek address */
	     file_position (fn) = i*64;		/* multiply by block size */
	     seek_ptr -> seek_address = 0;		/* Clobber user's seek address */
	end;

	if db_ios then
	     if pat_body (fn).random then
		call ioa_ ("SDIA seek_address = ^o", i);
	     else call ioa_ ("SDIA (linked file)");

	component (fn) = divide (file_position (fn), sys_info$max_seg_size, 24, 0);
	last_component = (component (fn) + 1 >= no_components (fn));
	if last_component then
	     if file_size (fn) <= 0
	     then seg_length = 0;
	     else
	     seg_length = mod (file_size (fn)-1, sys_info$max_seg_size)+1;
	else seg_length = sys_info$max_seg_size;
	offset (fn) = mod (file_position (fn), sys_info$max_seg_size);
	if msf (fn) then
	     file_ptr = msf_array_ptr (fn) -> msf_components (component (fn));
	else file_ptr = single_segment_ptr (fn);
	file_ptr = addrel (file_ptr, offset (fn));

	if ^pat_body (fn).random then do;
	     if mod (file_position (fn), 320) ^= 0 then do;
		call com_err_ (0, "gtss_ios_", "Bug: file_position = ^i; not a multiple of 320",
		     file_position (fn));
dcl  gtss_ios_bug             condition;
		signal condition (gtss_ios_bug);
	     end;
	end;


bump:	;

	idptr = addrel (idptr, 2);			/* get ptr to new id word */
	opptr = addrel (idptr, -1);			/* build pointer to operation word */
	sptr = addrel (idptr, 1);			/* build pointer to return word */
	dcw_offset = fixed (id_word.dcwp);		/* get dcw list pointer */
	count = count + 1;
	goto lookup;

com_proc (2): ;					/* read disk continuous */

	if db_ios then call ioa_ ("RDIC");
	if ^seeksw then do;				/* read must be preceded by a seek */
	     status = 7;				/* Disk read or write not preceeded by a seek */
	     call return_stat;
	     return;
	end;

/* A null file cannot be read */
	if ^ap -> non_null then do;
	     status = 0;				/* eof encountered */
	     substr (slave_status, 7, 12) = "1700"b3;	/* set null file bit */

/* * ADD status word 1 record count residue setting? * */
	     call return_stat;
	     return;
	end;

	if select_seq_in_memory then
	     if dcw_offset >= storlimit then do;	/* dcw addr OOB? */
		status = 4;			/* DCW is outside of slave limits */
		call return_stat;
		return;
	     end;

	dcw_ptr = addrel (select_seg_ptr, dcw_offset);	/* get address of dcw */


/* Read Operation */

	disconnect = "0"b;
	tdcw_previous = "1"b;			/* Insure that the first DCW
						   will be rejected if a TDCW. */

read_loop: do dcw_number = 1 to 4096;

/* At this point dcw_ptr points to the next
   DCW to be interpreted. */

	     goto read_case (fixed (dcw.action));

read_case (4): ;
read_case (5): ;
read_case (6): ;
read_case (7): ;
	     status = 10;				/* Bad action code in DCW */
	     call return_stat;
	     return;

read_case (0): ;					/* IOTD */
	     disconnect = "1"b;

read_case (1): ;					/* IOTP */
	     if db_ios then do;
		if disconnect then call ioa_
		     ("IOTD count = ^o, address = ^o", fixed (dcw.count), fixed (dcw.data_addr));
		else call ioa_
		     ("IOTP count = ^o, address = ^o", fixed (dcw.count), fixed (dcw.data_addr));
	     end;
	     ta_offset = fixed (dcw.data_addr);
	     l = fixed (dcw.count);
	     if l = 0 then l = 4096;

restart_read:  ;
	     ta_ptr = addrel (ta_seg_ptr, ta_offset);
	     if ta_offset + l > storlimit | offset (fn) + l > seg_length
	     then do;

/* Control is transferred here when either
   1. The current DCW references outside the user's slave memory limits.
   or
   2. The end of file will be crossed by the current DCW.
   or
   3. The end of a file component will be crossed by the current DCW.
*/

		if read_memory_fault () then do;
		     call return_stat;
		     return;
		end;
		if read_end_of_file ("1"b) then do;
		     call return_stat;
		     return;
		end;
		call read_next_component ("1"b);
		goto restart_read;
	     end;
	     ta_ptr -> M = file_ptr -> M;		/* Data transfer */

/* Remember last address + 1 of data transferred */
	     da_residue = ta_offset + l;

read_file_posit: ;					/* Update position in file */
	     offset (fn) = offset (fn) + l;
	     file_ptr = addrel (file_ptr, l);
	     data_moved = data_moved +l;

	     if disconnect then do;
		wc_residue = 0;
		call return_stat;
		return;
	     end;

/* Move to next DCW */
	     dcw_offset = dcw_offset + 1;
	     if select_seq_in_memory then
		if dcw_offset > storlimit then do;
		     status = 4;			/* DCW is outside of slave limits */
		     call return_stat;
		     return;
		end;
	     dcw_ptr = addrel (select_seg_ptr, dcw_offset);
	     tdcw_previous = "0"b;
	     goto finished_read_dcw;

read_case (3): ;					/* IONTP */
	     if db_ios then
		call ioa_ ("IONTP count = ^o", fixed (dcw.count));
	     l = fixed (dcw.count);
	     if l = 0 then l = 4096;
restart_nonread: ;
	     if offset (fn) + l > seg_length then do;
		if read_end_of_file ("0"b) then do;
		     call return_stat;
		     return;
		end;
		call read_next_component ("0"b);
		goto restart_nonread;
	     end;
	     goto read_file_posit;			/* Update position in file */

read_case (2): ;					/* TDCW */
	     if db_ios then
		call ioa_ ("TDCW address = ^o", fixed (dcw.data_addr));
	     if tdcw_previous then do;
		status = 11;			/* Two TDCW's in a row */
		wc_residue = 0;
		call return_stat;
		return;
	     end;
	     tdcw_previous = "1"b;
	     dcw_offset = fixed (dcw.data_addr);
	     if select_seq_in_memory then
		if dcw_offset > storlimit then do;
		     status = 4;			/* DCW is outside of slave limits */
		     wc_residue = 0;
		     call return_stat;
		     return;
		end;
	     dcw_ptr = addrel (select_seg_ptr, dcw_offset);

finished_read_dcw: ;
	end read_loop;

	status = 12;				/* Maximum of 4096 DCW's exceeded */
	call return_stat;
	return;

com_proc (3): ;					/* write disk continuous */

	if db_ios then call ioa_ ("WDIC");
	if ^seeksw then do;				/* write must be preceded by a seek */
	     status = 7;				/* Disk read or write not preceeded by a seek */
	     call return_stat;
	     return;
	end;

	if ^permissions (fn).write then do;		/* write not allowed ? */
	     status = 2;				/* a write was attempted on a file which was
						   opened in read mode */
	     call return_stat;
	     return;
	end;

	if select_seq_in_memory then
	     if dcw_offset >= storlimit then do;	/* dcw addr OOB? */
		status = 4;			/* DCW is outside of slave limits */
		call return_stat;
		return;
	     end;

	dcw_ptr = addrel (select_seg_ptr, dcw_offset);	/* get address of dcw */

/* Write Operation */

	if ^ap -> non_null then do;
	     ap -> non_null = "1"b;
	     if pat_body.perm (fn) then do;		/* Perm File */
		gtss_file_attributes_ptr = gtss_dfd_ext_$disk_file_data (fn).gtss_disk.attributes_ptr;
		gtss_file_values.version = 1;
		gtss_file_values.change_name = "0"b;
		gtss_file_values.dname = gtss_dfd_ext_$disk_file_data (fn).gtss_disk.dir_name;
		gtss_file_values.ename = gtss_dfd_ext_$disk_file_data (fn).gtss_disk.entry_name;
		gtss_file_values.new_ename = " ";	/* Set values for current entry. */
		string (gtss_file_values.set_switch) = "0"b;
		gtss_file_values.set_switch.null_file = "1"b;
		gtss_file_values.data_flags.null_file = "0"b;

		call gtss_attributes_mgr_$set (addr (gtss_file_values), code);
		if code ^= 0 then status = 16;	/* $set failed. */
	     end;

	end;
	write_performed (fn) = "1"b;
	disconnect = "0"b;
	tdcw_previous = "1"b;			/* Insure that the first DCW
						   will be rejected if a TDCW. */

	do dcw_number = 1 to 4096;

/* At this point dcw_ptr points to the next
   DCW to be interpreted. */

	     i = fixed (dcw.action);
	     goto write_case (i);

write_case (4): ;
write_case (5): ;
write_case (6): ;
write_case (7): ;
	     status = 10;				/* Bad action code in DCW */
	     call return_stat;
	     return;

write_case (0): ;					/* IOTD */
	     disconnect = "1"b;

write_case (1): ;					/* IOTP */
	     if db_ios then do;
		if disconnect then call ioa_
		     ("IOTD count = ^o, address = ^o", fixed (dcw.count), fixed (dcw.data_addr));
		else call ioa_
		     ("IOTP count = ^o, address = ^o", fixed (dcw.count), fixed (dcw.data_addr));
	     end;
	     ta_offset = fixed (dcw.data_addr);
	     l = fixed (dcw.count);
	     if l = 0 then l = 4096;

restart_write: ;
	     ta_ptr = addrel (ta_seg_ptr, ta_offset);
	     if ta_offset + l > storlimit | offset (fn) + l > seg_length
	     then do;

/* Control is transferred here when either
   1. The current DCW references outside the user's slave memory limits.
   or
   2. The end of file will be crossed by the current DCW.
   or
   3. The end of a file component will be crossed by the current DCW.
*/

		if write_memory_fault () then do;
		     call return_stat;
		     return;
		end;
		if write_end_of_file ("1"b) then do;
		     call return_stat;
		     return;
		end;
		call write_next_component ("1"b);
		goto restart_write;
	     end;
	     file_ptr -> M = ta_ptr -> M;		/* Data transfer */

/* Remember last address + 1 of data transferred */
	     da_residue = ta_offset + l;

write_file_posit: ;					/* Update position in file */
	     offset (fn) = offset (fn) + l;
	     file_ptr = addrel (file_ptr, l);
	     data_moved = data_moved +l;

	     if disconnect then do;
		wc_residue = 0;
		call write_to_end_of_sector;
		call return_stat;
		return;
	     end;

/* Move to next DCW */
	     dcw_offset = dcw_offset + 1;
	     if select_seq_in_memory then
		if dcw_offset > storlimit then do;
		     status = 4;			/* DCW is outside of slave limits */
		     call return_stat;
		     return;
		end;
	     dcw_ptr = addrel (select_seg_ptr, dcw_offset);
	     tdcw_previous = "0"b;
	     goto finished_write_dcw;

write_case (3): ;					/* IONTP */
	     if db_ios then
		call ioa_ ("IONTP count = ^o", fixed (dcw.count));
	     l = fixed (dcw.count);
	     if l = 0 then l = 4096;
restart_nonwrite: ;
	     if offset (fn) + l > seg_length then do;
		if write_end_of_file ("0"b) then do;
		     call return_stat;
		     return;
		end;
		call write_next_component ("0"b);
		goto restart_nonwrite;
	     end;
	     unspec (file_ptr -> M) = "0"b;		/* Nondata transfer */
	     goto write_file_posit;			/* Update position in file */

write_case (2): ;					/* TDCW */
	     if db_ios then
		call ioa_ ("TDCW address = ^o", fixed (dcw.data_addr));
	     if tdcw_previous then do;
		status = 11;			/* Two TDCW's in a row */
		wc_residue = 0;
		call return_stat;
		return;
	     end;
	     tdcw_previous = "1"b;
	     dcw_offset = fixed (dcw.data_addr);
	     if select_seq_in_memory then
		if dcw_offset > storlimit then do;
		     status = 4;			/* DCW is outside of slave limits */
		     wc_residue = 0;
		     call return_stat;
		     return;
		end;
	     dcw_ptr = addrel (select_seg_ptr, dcw_offset);

finished_write_dcw: ;
	end;					/* End write loop do. */

	status = 12;				/* Maximum of 4096 DCW's exceeded */
	call return_stat;
	return;


com_proc (4): ;					/* rewind disk/drum */

	if db_ios then call ioa_ ("REW");
	if pat_body (fn).random then do;		/* abort if random */
	     status = 8;				/* attempt to space or rewind random file */
	     call return_stat;
	     return;
	end;

	file_position (fn) = 0;
	call return_stat;
	return;

com_proc (5): ;					/* backspace disk/drum */

	bksp_sw = "1"b;				/* remember backspace */
	if db_ios then
	     call ioa_ ("BSR count = ^o", fixed (op_word.count));


bksp_share:

	if pat_body (fn).random then do;		/* abort if random */
	     status = 8;				/* attempt to space or rewind random file */
	     call return_stat;
	     return;
	end;
	if ^ap -> non_null then do;			/* is this a null file ? */
	     status = 1;				/* eof encountered */

/* * ADD status word 1 record count residue setting? * */
	     call return_stat;
	     return;
	end;

	j = fixed (op_word.count);			/* extract fixed(op_word.count) */
	if j = 0 then j = 64;			/* zero count means 64 */
	j = 320*j;
	if bksp_sw then j = -j;

	file_position (fn) = file_position (fn) + j;

/* * NOTE:  Add code to provide:
   1) load point status of positioned off front of file.
   2) setting status word 1 record count residue (right 6bits)
   if positioned off either end of the file.
   * */
	if file_position (fn) < 0 then file_position (fn) = 0; /* allow for backspace too far */
	if file_position (fn) > file_size (fn) then do;	/* check for end of file */
	     status = 1;				/* end of file encountered */

	     rec_ct_residue = divide (file_position (fn) - file_size (fn), 320, 17, 0);
	     substr (slave_status, 31, 6) = substr (unspec (rec_ct_residue), 31, 6);

	     file_position (fn) = file_size (fn);

	end;


	call return_stat;
	return;					/* process status */

com_proc (6): ;					/* forward space disc/drum */

	bksp_sw = "0"b;				/* remember forward space */
	if db_ios then
	     call ioa_ ("FSR count = ^o", fixed (op_word.count));

	goto bksp_share;				/* now go share backspace code */

com_proc (7): ;					/* reset status for disk/drum */

	if db_ios then call ioa_ ("RESS");
	call return_stat;
	return;

com_proc (8): ;					/* request status for disk/drum */

	if db_ios then call ioa_ ("REQS");
	call return_stat;
	return;
/* INTERNAL PROCEDURES */

bad_file_status: proc (fn, status) returns (bit (1));

/* This routine is called to verify that
   the file number input parameter corresponds
   to a valid open file.  If so, "0"b is returned.
   Otherwise , "1"b is returned. */

dcl  fn                       fixed bin (24) parm;
dcl  status                   fixed bin (24) parm;

	     if fn < lbound (gtss_disk, 1) | fn >= hbound (gtss_disk, 1) then do;
		status = 15;			/* Bad file number */
		return ("1"b);
	     end;
	     if gtss_disk.fcb_ptr (fn) = null () then do;
		status = 14;			/* File not open  */
		return ("1"b);
	     end;
	     return ("0"b);
	end bad_file_status;

read_end_of_file: proc (data_transfer) returns (bit (1) aligned);

dcl  data_transfer            bit (1) aligned parm	/* Input parameter which indicates
				whether data is to be transferred to memory ("1"b)
				or skipped ("0"b). */;


/* This routine checks to see if the current DCW causes the end of file boundary
   to be crossed.  If so, and the data_transfer flag is on, this routine
   transfers as much data as possible.	The end of file is indicated for random files by
   returning "1"b.	If no end of file, no data is transferred and "0"b is returned.
*/

/* Determine whether end of file is the problem */
	     wc_residue = l;
	     l = seg_length - offset (fn);
	     data_moved = data_moved +l;
	     if last_component then do;
		status = 1;			/* eof encountered */
		if l < 1 then return ("1"b);		/* Indicate end of file */;
		if data_transfer then do;
		     ta_ptr -> M = file_ptr -> M;	/* Data transfer */
		     da_residue = ta_offset + l;
		end;
		wc_residue = wc_residue - l;
dcl  x                        fixed bin;
		x = divide (wc_residue, 320, 17);
		if db_ios then call ioa_ ("ios: wc_residue=^i (mod 320 ^a) rec_count_residue=^i"
		     , wc_residue
		     , substr ("no yes", (fixed (mod (wc_residue, 320) = 0, 17)*3)+1, 3)
		     , x);
		substr (slave_status, 31, 6) = bit (fixed (x, 6)); /* => Record count residue. */
		return ("1"b);			/* Indicate end of file */
	     end;
	     return ("0"b);				/* Not end of file */
	end read_end_of_file;

read_memory_fault: proc returns (bit (1) aligned);


/* This routine checks to see if the current DCW would cause
   data to be transferred outside of the user's slave memory limits.
   If so this routine transfers as much data as possible and
   returns "1"b.  If not, no data is transferred and "0"b is returned.
   In the special case that the current DCW would cause the end of
   file to be encountered before exceeding memory limits, then no data
   is transferred and "0"b is returned.
*/

	     if ta_offset - storlimit > offset (fn) - seg_length
	     then do;				/* Slave memory is the most severe
						   limitation on this read. */
		status = 5;			/* DCW references outside of slave limits */
		wc_residue = l;
		l = storlimit - ta_offset;
		if l < 1 then return ("1"b);		/* Indicate memory fault */;
		wc_residue = wc_residue -l;
		ta_ptr -> M = file_ptr -> M;		/* Data transfer */
		da_residue = ta_offset + l;
		data_moved = data_moved +l;
		return ("1"b);			/* Indicate memory fault */
	     end;
	     return ("0"b);				/* No memory fault */
	end read_memory_fault;

read_next_component: proc (data_transfer);

dcl  data_transfer            bit (1) aligned parm	/* Input parameter which indicates
				whether data is to be transferred to memory ("1"b)
				or skipped ("0"b). */;

/* This routine handles the case that the end of the current component
   of a multisegment file will be crossed by the current DCW when
   the current component is not the last one.  The remaining data in
   the current component is transferred to slave memory (if the data_transfer
   flag is on) and the next component is made current.
*/

	     if l >= 1 & data_transfer then do;
		ta_ptr -> M = file_ptr -> M;		/* Data Transfer */
		da_residue, ta_offset = ta_offset + l;
	     end;

	     l = wc_residue - l;
	     component (fn) = component (fn) + 1;
	     last_component = (component (fn) + 1 >= no_components (fn));
	     file_ptr = msf_array_ptr (fn) -> msf_components (component (fn));
	     offset (fn) = 0;
	     if last_component then
		seg_length = mod (file_size (fn)-1, sys_info$max_seg_size)+1;
	     else seg_length = sys_info$max_seg_size;
	     return;
	end read_next_component;

return_stat: proc;


/* If this is a five word select sequence then the pointer to the status return address,
   sptr, may have to be adjusted. */
	     if count = 1 then do;
		cmd_word = io_commands (1);		/* seek command */
		if substr (cmd_word, 1, 6) = op_word.dev_com then /* are device and */
		     if substr (cmd_word, 19, 5) = op_word.ioc_com then /* ioc commands = ? */
			sptr = addrel (sptr, 2);
	     end;
	     if ^pat_body (fn).random then do;
		file_position (fn) = file_position (fn) + data_moved;
		i = mod (file_position (fn), 320);
		if i > 0 then file_position (fn) = file_position (fn) + 320 - i;
	     end;
	     if db_ios then
		call ioa_ ("Status return address = ^o", fixed (return_word.status_return));
	     if select_seq_in_memory &
	     fixed (return_word.status_return) >= storlimit then do;
		if status = 0 then status = 9;	/* Status return address is
						   outside of slave limits */
		swptr = addr (scratch_status);
	     end;
	     else do;
		if return_word.status_return = (18)"0"b then /* program doesn't want status */
		     swptr = addr (scratch_status);	/* so fake a return area */

		else swptr = addrel (select_seg_ptr, return_word.status_return); /* get address of status words */
	     end;

	     sw1 = slave_status;			/* move status into slave */
	     sw2 = "0"b;

	     substr (sw2, 25, 12) = substr (unspec (wc_residue), 25, 12); /* return word count */
	     substr (sw2, 1, 18) = substr (unspec (da_residue), 19, 18); /* and data address residues */
	     if status < lbound (err_case, 1) | status > hbound (err_case, 1) then return;
	     goto err_case (status);

err_case (0):  ;
err_case (2):  ;
err_case (3):  ;
err_case (4):  ;
err_case (5):  ;
err_case (6):  ;
err_case (7):  ;
err_case (8):  ;
err_case (9):  ;
err_case (10): ;
err_case (13): ;
	     goto done_stat;

err_case (1):  ;					/* End of file was encountered */
	     substr (sw1, 3, 4) = "1111"b;
	     goto done_stat;

err_case (11): ;					/* Two TDCW's in a row */
	     substr (sw1, 22, 3) = "010"b;
	     goto done_stat;

err_case (12): ;					/* Maximum of 4096 DCW's exceeded */
	     substr (sw1, 22, 3) = "001"b;
	     goto done_stat;

done_stat:     ;
	     if db_ios then
		call ioa_ ("Status =  Word1: ^12o Word2: ^12o", fixed (sw1), fixed (sw2));

	     return;
dcl  i                        fixed bin (24);
	end					/* return_stat */;

write_end_of_file: proc (data_transfer) returns (bit (1) aligned);

dcl  data_transfer            bit (1) aligned parm	/* Input parameter which indicates
				whether data is to be transferred to memory ("1"b)
				or skipped ("0"b). */;


/* This routine checks to see if the current DCW causes the end of file boundary
   to be crossed.  If so, and the data_transfer flag is on, this routine
   transfers as much data as possible.	The end of file is indicated by
   returning "1"b.	If no end of file, no data is transferred and "0"b is returned.
*/

/* Determine whether end of file is the problem */
	     wc_residue = l;
	     l = seg_length - offset (fn);
	     data_moved = data_moved +l;
	     if last_component then do;
		status = 1;			/* eof encountered */
		if l < 1 then return ("1"b);		/* Indicate end of file */;
		if data_transfer then do;
		     file_ptr -> M = ta_ptr -> M;	/* Data transfer */
		     da_residue = ta_offset + l;
		end;
		else unspec (file_ptr -> M) = "0"b;	/* Nondata transfer */
		wc_residue = wc_residue - l;
dcl  x                        fixed bin;
		x = divide (wc_residue, 320, 17);
		if db_ios then call ioa_ ("ios: wc_residue=^i (mod 320 ^a) rec_count_residue=^i"
		     , wc_residue
		     , substr ("no yes", (fixed (mod (wc_residue, 320) = 0, 17)*3)+1, 3)
		     , x);
		substr (slave_status, 31, 6) = bit (fixed (x, 6)); /* => Record count residue. */
		return ("1"b);			/* Indicate end of file */
	     end;
	     return ("0"b);				/* Not end of file */
	end write_end_of_file;

write_memory_fault: proc returns (bit (1) aligned);


/* This routine checks to see if the current DCW would cause
   data to be transferred outside of the user's slave memory limits.
   If so this routine transfers as much data as possible and
   returns "1"b.  If not, no data is transferred and "0"b is returned.
   In the special case that the current DCW would cause the end of
   file to be encountered before exceeding memory limits, then no data
   is transferred and "0"b is returned.
*/

	     if ta_offset - storlimit > offset (fn) - seg_length
	     then do;				/* Slave memory is the most severe
						   limitation on this write. */
		status = 5;			/* DCW references outside of slave limits */
		wc_residue = l;
		l = storlimit - ta_offset;
		if l < 1 then return ("1"b);		/* Indicate memory fault */;
		wc_residue = wc_residue -l;
		file_ptr -> M = ta_ptr -> M;		/* Data transfer */
		da_residue = ta_offset + l;
		data_moved = data_moved +l;
		return ("1"b);			/* Indicate memory fault */
	     end;
	     return ("0"b);				/* No memory fault */
	end write_memory_fault;

write_next_component: proc (data_transfer);

dcl  data_transfer            bit (1) aligned parm	/* Input parameter which indicates
				whether data is to be transferred to memory ("1"b)
				or skipped ("0"b). */;

/* This routine handles the case that the end of the current component
   of a multisegment file will be crossed by the current DCW when
   the current component is not the last one.  The remaining data in
   the current component is transferred from slave memory (if the data_transfer
   flag is on) and the next component is made current.
*/

	     if l >= 1 & data_transfer then do;
		file_ptr -> M = ta_ptr -> M;		/* Data Transfer */
		da_residue, ta_offset = ta_offset + l;
	     end;
	     else unspec (file_ptr -> M) = "0"b;	/* Nondata transfer */

	     l = wc_residue - l;
	     component (fn) = component (fn) + 1;
	     last_component = (component (fn) + 1 >= no_components (fn));
	     file_ptr = msf_array_ptr (fn) -> msf_components (component (fn));
	     offset (fn) = 0;
	     if last_component then
		seg_length = mod (file_size (fn)-1, sys_info$max_seg_size)+1;
	     else seg_length = sys_info$max_seg_size;
	     return;
	end write_next_component;

write_to_end_of_sector: proc;

/* This routine writes zeros from the current file position to the
   nearest sector (64 word) boundary.  If the file is currently
   positioned at a sector boundary, no writing is done.
*/

	     i = mod (offset (fn), 64);
	     if i > 0 then do;
		l = 64 - i;
		unspec (file_ptr -> M) = "0"b;
	     end;
	     return;

dcl  i                        fixed bin (24);

	end write_to_end_of_sector;

/* VARIABLES FOR GTSS_IOS_ */
dcl  hcs_$fs_get_path_name    entry(ptr,char(*),fixed bin,char(*),fixed bin(35));
dcl file_dir char(168);
dcl file_dir_len fixed bin;
dcl file_ent char(32);
dcl  gcos_status              bit(12)aligned based(gsp);
dcl  bit72                    bit(72)aligned based;
dcl  gsp                      ptr;

dcl  acl_ptr                  ptr	/* pointer to segment_acl passed
				as a parameter to msf_manager_$acl_list */;
dcl  ap                       ptr	/* Pointer to the attributes structure for the current file */;
dcl  bc                       fixed bin (24)	/* Used as a sink for bit counts returned by
				msf_manager_$get_ptr */;
dcl  bit_count                fixed bin (24)	/* The bit count of the last segment of an msf.
				Passed as a parameter to msf_manager_$adjust. */;
dcl  bksp_sw                  bit (1)	/* Distinguishes between backspacing
				"1"b and forward spacing "0"b a linked file. */;
dcl  cmd_word                 bit (36) aligned	/* temp */;
dcl  count                    fixed bin (24)	/* Counts io commands processed
				for current io select sequence */;
dcl  da_residue               fixed bin	/* Address of last memory location
				accessed during I/O.  Used in building
				return status words for I/O. */;
dcl  data_moved               fixed bin (24)	/* number of words moved or skipped over by
				the current read or write operation. */;
dcl  dcw_number               fixed bin (24)	/* Used to count DCW's in
				the current select sequence */;
dcl  dcw_offset               fixed bin (24)	/* slave offset of current dcw */;
dcl  dcw_ptr                  ptr	/* Multics pointer to the current dcw */;
dcl  disconnect               bit (1)	/* Indicator that the last DCW has been encountered. */;
dcl  error_table_$namedup     fixed bin (35) ext;
dcl  error_table_$rqover      fixed bin(35)ext;
dcl  error_table_$segknown    fixed bin (35) ext;
dcl  fcb_ptr                  ptr init (null ())	/* pointer to file control block
				used by msf_manager_ */;
dcl  file_ptr                 ptr	/* pointer to current positoion in file */;
dcl  fn                       fixed bin (24)	/* Index in gtss_ext_$disk_file_data of
				information about the file to be processed. */;
dcl  get_mode                 fixed bin (5)	/* User's access mode to segment as
				returned by hcs_$fs_get_mode */;
dcl  gsc                      fixed bin(24);
dcl  i                        fixed bin (24);
dcl  idptr                    ptr	/* Pointer to the current id
				word of the I/O select sequence. */;
dcl  j                        fixed bin (24);
dcl  l                        fixed bin (24)	/* The length in words of the current
				piece of data to be moved to or from the file */;
dcl  largest_file             fixed bin (24)	/* Max no. of llinks a file can grow to */;
dcl  last_component           bit (1)	/* When on, indicates that the
				current component is the last component of the file */;
dcl  li                       bit (1)	/* variable for the parameter link_indicator */;
dcl  M                        char (l*4) based	/* A template used for moving data
				to or from the file. */;
dcl  max_change               fixed bin (24)	/* The maximum amount that
				the size of a file can be increased
				expressed in llinks (320 word blocks) */;
dcl  msf_components           (0:499) ptr based	/* An array of pointers for each msf.
				Each component which has been accessed has a
				corresponding initialized pointer. */;

dcl  msf_save                 bit (1)	/* A flag used to remember whether
				the file was a msf before its size
				was changed. */;
dcl  no_components_save       fixed bin (24)	/* Used to remember the number
				of components a file had before its
				size was changed */;
dcl  pat_body_overlay         bit (180) based	/* used for initializing the
				pat body to all zeros */;
dcl  opptr                    ptr	/* Pointer to the current operation
				word of the I/O select sequence. */;
dcl  rec_ct_residue           fixed bin (24)	/* holds no of unskipped records */;
dcl  record_quota_overflow    condition ext;
dcl  sc                       fixed bin (24)	/* local variable for the parameter size_change */;
dcl  scratch_status           bit (72) aligned	/* temp */;
dcl  seek_address             fixed bin (24) based	/* user seek address for disk or drum */;
dcl  seek_ptr                 ptr	/* Pointer to the word containing
				the io seek address */;
dcl  seeksw                   bit (1)	/* sw controlling disk or drum seeks */;
dcl  seg_length               fixed bin (24)	/* length in words of current component of file */;
dcl  select_seg_ptr           ptr	/* Pointer to beginning of
				segment containing select sequence */;
dcl  select_seq_in_memory     bit (1)	/* 1 => the select sequence is in the
				same segment that is used for Gcos memory.
				In this case the addresses of DCW's, seek address data word, and
				status return words will be checked against the
				memory_limit parameter. */;
dcl  slave_status             bit (36) aligned;
dcl  sp                       ptr	/* Pointer to user's select sequence for this I/O */;
dcl  storlimit                fixed bin (24)	/* slave core boundary */;
dcl  sptr                     ptr	/* pointer to return word of select sequence */;
dcl  swptr                    ptr	/* Pointer to status return words */;
dcl  sys_info$max_seg_size    fixed bin (35) ext;
dcl  ta_offset                fixed bin (24)	/* Offset in the user's slave memory
				of the transmission area for the current DCW. */;
dcl  ta_ptr                   ptr	/* pointer to the transmission area for
				the current DCW. */;
dcl  ta_seg_ptr               ptr	/* pointer to the user's slave
				memory segment */;
dcl  tdcw_previous            bit (1)	/* Indicator that the last DCW processed was a TDCW */;
dcl  tfp                      fixed bin (71);
dcl  wc_residue               fixed bin (24)	/* Number of words remaining to be transferred
				in the current dcw when eof or
				memory fault occurs. Used in building
				return status words for I/O. */;
dcl  work_area                area (sys_info$max_seg_size) aligned
		     based (gtss_ext_$work_area_ptr)	/* Area used to store arrays of pointers to
			components of msf's. */;
dcl  delete_$path             entry (char (*), char (*), bit (6), char (*), fixed bin (35));
dcl  hcs_$fs_get_mode         entry (ptr, fixed bin (5), fixed bin (35));
dcl  hcs_$make_seg            entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  ioa_                     entry options (variable);
dcl  msf_manager_$adjust      entry (ptr, fixed bin, fixed bin (24), bit (3), fixed bin (35));
dcl  msf_manager_$close       entry (ptr);
dcl  msf_manager_$get_ptr     entry (ptr, fixed bin, bit (1), ptr, fixed bin (24), fixed bin (35));
dcl  msf_manager_$open        entry (char (*), char (*), ptr, fixed bin (35));

/* STRUCTURES */

dcl 1 dcw aligned based (dcw_ptr),			/* dcw model */
    2 data_addr bit (18) unaligned,			/* data address */
    2 zero bit (3) unaligned,				/* fill */
    2 action bit (3) unaligned,			/* action */
    2 count bit (12) unaligned;						/* word count for transfer */

dcl 1 id_word aligned based (idptr),			/* model of identification word */
    2 filep bit (18) unaligned,			/* file control block pointer */
    2 dcwp bit (18) unaligned;						/* dcw list pointer */


dcl 1 op_word aligned based (opptr),			/* model of operation word */
    2 dev_com bit (6) unaligned,			/* device command */
    2 zero1 bit (12) unaligned,			/* zeros */
    2 ioc_com bit (5) unaligned,			/* ioc command */
    2 zero2 bit (1) unaligned,			/* zero */
    2 control bit (6) unaligned,			/* control */
    2 count bit (6) unaligned;						/* count */

dcl 1 return_word aligned based (sptr),			/* model of status return word */
    2 status_return bit (18) unaligned,			/* pointer to return words */
    2 courtesy_call bit (18) unaligned;						/* pointer to courtesy call rtn */

dcl 1 stat_words aligned based (swptr),			/* model of status words */
    2 sw1 bit (36) aligned,				/* word 1 */
    2 sw2 bit (36) aligned;						/* word 2 */



dcl  decode_mode              (0:63) bit (3) aligned			/* Permissions are read, execute, write */
     static init (					/* OCTAL */
     "100"b,					/* 0 -- Zero access mode maps to Query permission */
     "100"b,					/* 1 */
    (2) (1)"000"b,					/* 2-3 */
     "110"b,					/* 4 */
    (3) (1)"000"b,					/* 5-7 */
     "100"b,					/* 10 */
    (7) (1)"000"b,					/* 11-17 */
    (2) (1)"101"b,					/* 20-21 */
    (2) (1) "000"b,					/* 22-23 */
     "101"b,					/* 24 */
    (11) (1)"000"b,					/* 25-37 */
    (2) (1) "100"b,					/* 40-41 */
    (6) (1)"000"b,					/* 42-47 */
     "100"b,					/* 50 */
    (3) (1)"000"b,					/* 51-53 */
     "100"b,					/* 54 */
    (3) (1)"000"b,					/* 55-57 */
    (2) (1)"101"b,					/* 60-61 */
    (10) (1)"000"b,					/* 62-73 */
     "101"b,					/* 74 */
    (3) (1)"000"b);						/* 75-77 */

dcl  io_commands              (8) bit (36) internal static aligned init (


/* 	Disk Command Table						 */

     "340000000002"b3,				/* 34 - seek disk address */
     "250000002400"b3,				/* 25 - read disk continuous */
     "310000002400"b3,				/* 31 - write disk continuous */
     "700000020001"b3,				/* 70 - rewind */
     "460000020001"b3,				/* 46 - backspace record(s) */
     "440000020001"b3,				/* 44 - forward space record(s) */
     "400000020001"b3,				/* 40 - reset status */
     "000000020001"b3);						/* 00 - request status */

%include gtss_dfd_ext_;

%include gtss_file_attributes;

%include gtss_ext_;

%include gtss_file_values;

%include gtss_entry_dcls;

%include gtss_db_names;
     end						/* gtss_ios_io_ */;
