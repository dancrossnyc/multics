/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

gtss_dump_filact_args_: proc (apv);

/** Dump conplete arguments for filact drl.

    Author: Dave Ward  07/14/79
**/
dcl apv ptr parm;
	ap = apv;
	if (fn >= lbound (f, 1))& (fn <= hbound (f, 1)) then do;
	     call ioa_$nnl ("DRL FILACT (function ^2i)^/", fn);
	     goto f (fn);
	end;
	call com_err_ (0, "gtss_dump_filcat_args_",
	     "Function # ^i out of range ^i to ^i",
	     fn,
	     lbound (f, 1),
	     hbound (f, 1));
	return;

f (11):	; /** Modify file. **/
	alp = pointer (ap, all);
	cfp = pointer (ap, cfl);

/* Display file/catalog description. */
	nu = 1;
more_name: ;
	if nu = 1 then do;
	     if user (1).id ^= (72)"1"b then do;
		call gtss_bcd_ascii_ (addr (user (1).id), 12, addr (nascii));
		call ioa_$nnl ("^a", nascii);
	     end;
	end;
	else do;
	     call ioa_$nnl ("/");
	     call gtss_bcd_ascii_ (addr (user (nu).id), 12, addr (nascii));
	     call ioa_$nnl ("^a", nascii);
	end;
	if cf.eol ^= -1 then do;
	     nu = nu+1;
	     goto more_name;
	end;
	call ioa_$nnl ("^/");

/* Display general permissions. */
	call ioa_$nnl ("General permissions:");
	pp = pointer (ap, pl);
	if string (pp -> b36) = (36)"1"b then
	     call ioa_$nnl (" UNCHANGED.^/");
	else
	if pp -> fb18 = 0 then
	     call ioa_$nnl (" DELETED.^/");
	else
	call pr_perms (pp);
	call ioa_$nnl ("012345678901234567890123456789012345^/^36b^/^/", string (pp -> b36));

/* Display new name. */
	nnp = pointer (ap, nnl);
	if nn.name = (72)"1"b then
	     call ioa_$nnl ("Name not changed.^/");
	else do;
	     call gtss_bcd_ascii_ (addr (nn.name), 12, addr (nascii));
	     call ioa_$nnl ("New name ""^a""^/", nascii);
	end;

/* Display options. */
	op = pointer (ap, ol);
	if string (ob) = "0"b then
	     call ioa_$nnl ("No option bits set.^/");
	else do;
	     call ioa_$nnl ("Option bit:");
	     do i = 0 to 17;
		if ob (i) then call ioa_$nnl (" ^i", i);
	     end;
	     if ob (4) then
		if max_size = -1 then call ioa_$nnl ("  New nax size UNLIMITED.");
		else call ioa_$nnl ("  New max size ^i", max_size);
	     call ioa_$nnl ("^/");
	end;

/* Display specific permissions. */
	nsp = 0;
next_sp:	;
	if nsp = 1 then call ioa_$nnl ("Specific permissions:^/");
	if nsp>0 then do;
	     call gtss_bcd_ascii_ (addr (userid (nsp)), 12, addr (nascii));
	     call ioa_$nnl ("  ^a", nascii);
	     pp = addr (usp (nsp, 0));
	     if pp -> fb19 = 1 then
		call ioa_$nnl (" retain name permissions NONE.^/");
	     else
	     if pp -> fb19 = 0 then
		call ioa_$nnl (" DELETED.^/");
	     else
	     call pr_perms (pp);
	     call ioa_$nnl ("012345678901234567890123456789012345^/^36b^/^/", string (pp -> b36));
	end;
	if o.eol ^= -1 then do;
	     nsp = nsp+1;
	     goto next_sp;
	end;
	if nsp = 0 then
	     call ioa_$nnl ("No user specific permissions.^/");

/* Display user attributes. */
	if ob (8) then
	     call ioa_$nnl ("User attributes ^35b^/", user_attr);
	else
	call ioa_$nnl ("No user specified attributes.^/");
	return;

pr_perms:	proc (pp);

/* Print permissions. */
dcl pp ptr parm;
	     if pp -> b36 (0) then call ioa_$nnl (" read");
	     if pp -> b36 (1) then call ioa_$nnl (" write");
	     if pp -> b36 (2) then call ioa_$nnl (" append");
	     if pp -> b36 (3) then call ioa_$nnl (" execute");
	     if pp -> b36 (4) then call ioa_$nnl (" purge");
	     if pp -> b36 (5) then call ioa_$nnl (" modify");
	     if pp -> b36 (6) then call ioa_$nnl (" lock");
	     if pp -> b36 (8) then call ioa_$nnl (" create");
	     if pp -> b36 (9) then call ioa_$nnl (" recovery");
	     call ioa_$nnl ("^/");
	end					/* pr_perms */;

dcl alp ptr;
dcl ap ptr;
dcl b36 (0:35)bit(1)unal based;
dcl cfp ptr;
dcl com_err_ entry options(variable);
dcl fb18 fixed bin(18)unsigned unal based;
dcl fb19 fixed bin(19)unsigned unal based;
dcl gtss_bcd_ascii_ entry(ptr,fixed bin(24),ptr);
dcl i fixed bin;
dcl ioa_$nnl entry options(variable);
dcl nascii char(12);
dcl nnp ptr;
dcl nsp fixed bin init(0);
dcl nu fixed bin;
dcl op ptr;
dcl pp ptr;

dcl 1 a aligned based(ap),
      2 v1 fixed bin(17)unal,
      2 all fixed bin(18)unsigned unal,
      2 fn fixed bin(17)unal,
      2 bl  fixed bin(18)unsigned unal;

dcl 1 al aligned based(alp),
      2 sl fixed bin(18)unsigned unal,
      2 v2 bit(18)unal,
      2 cfl fixed bin(18)unsigned unal,
      2 pl fixed bin(18)unsigned unal,
      2 ol fixed bin(18)unsigned unal,
      2 nnl fixed bin(18)unsigned unal;

dcl 1 cf aligned based(cfp),
      2 user (nu),
        3 id bit(72),
        3 passwrd bit(72),
      2 eol fixed bin(35);

dcl 1 nn aligned based(nnp),
      2 name bit(72),
      2 passwrd bit(72);

dcl 1 o aligned based(op),
      2 w1,
        3 ob (0:17)bit(1)unal,
        3 dn bit(12)unal,
        3 v3 bit(6)unal,
      2 w2,
        3 init_size fixed bin(18)unsigned unal,
        3 max_size  fixed bin(17) unal,
      2 specific_permission (nsp),
        3 userid bit(72),
        3 usp (0:35)bit(1)unal,
      2 eol fixed bin(35),
      2 user_attr,
        3 b1 bit(1)unal,
        3 b35 bit(35)unal;
     end						/* gtss_dump_filact_agrs_ */;
