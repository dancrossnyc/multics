/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */

gtss_derail_processor_: proc (mcpp, fault_name, dummy1, dummy2, continue);
dcl  mcpp ptr parm;
dcl  fault_name char (*)parm;
dcl  dummy1 ptr parm;
dcl  dummy2 ptr parm;
dcl  continue bit (1)aligned parm;
	mcp = mcpp;

/*
   This procedure is called by sct_manager_ when a DRL condition is
   raised  in  the  current ring. This procedure will make sure the
   DRL is in the GCOS slave segment and then process it.

   The  faulting  instruction  (DRL)  is  located  in  the  machine
   conditions,  and  is  examined for request type (as given in the
   computed address.) The
   appropriate drl handler is called with a
   ptr to the machine conditions. When  the  drl  handler  returns,
   this  procedure  will  modify  the machine conditions to force a
   transfer to the proper location,  skipping  over  any  parameter
   words  that  followed  the drl, and then it will return, causing
   the modified machine conditions to be restored and the execution
   of the slave program to be resumed.


   Author:	Robert J. Grimes	Created
   Albert N. Kepner	  1978
   Robert M. May
   David B. Ward
   Changed:	Dave Ward		02/23/79 t.cfio
   Changed:         Mel Wilson          March/79 drl jsts, snumb, spawn
   Changed:	Al Dupuis		June/79 drl pdio.
   Changed:	Ron Barstad	83-07-25  To 4JS3 with DRLs to  71
   * */
%page;
/*
   This procedure is called as a static handler for the condition DRL in the current ring.
   After making sure the DRL is in the GCOS segment and initializing some data
   items we process the DRL.
*/

	scup = addr (mc.scu);
	gseg = gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_);

	if fixed (baseno (gseg), 18, 0) ^= fixed (scu.ppr.psr, 15, 0) then do;
	     if gtss_ext_$sig_ptr ^= null () then
		call cu_$ptr_call (gtss_ext_$sig_ptr, mcp, fault_name, dummy1, dummy2, continue);
	     return;
	end;
	continue = "0"b;

	derail_ptr = addrel (gseg, scu.ilc);
	drl_number = drl_numb;			/* Local value. Note derails are signed integers. */

/*
   Check to see if the DRL number is in the ball park.  If not abort the user.
*/
	if drl_number < lbound (drl_handler, 1) | drl_number > hbound (drl_handler, 1) then do;
	     call gtss_abort_subsystem_ (mcp,
		"gtss_derail_processor_",
		5,
		gtss_pnterr.err5,
		fixed (scu.ilc, 18));
	     scu.rfi = "1"b;
	     scu.if = "1"b;
	     return;
	end;

/* Print name and location of derail if appropriate */
	if gse_ext_$modes.drl then do;
	     on quit;
	     call ioa_ ("Derail ^7a at ^6o", DRL_NAME (drl_number), fixed (scu.ilc, 18));
	     revert quit;
	end;

/* save registers */
	gtss_spa.lostr.regs = mc.regs;
						/* save eis registers */
	gtss_spa.leisa = mc.eis_info;
						/* save drl type and location */
	gtss_ust.ldrl.code = drl_number;
	gtss_ust.ldrl.ilc = scu.ilc;
	gtss_spa.losti.ilc = scu.ilc;
						/* save indicator registers */
	gtss_spa.losti.ir = scu.ir;
						/* do some accounting for the guy -- to be done */
	increment = 0;
	gtss_ext_$statistics.count (drl_number) = gtss_ext_$statistics.count (drl_number) + 1; /* bump usage count */
	initial_cpu_time = virtual_cpu_time_ ();

/* Save instruction counter value. On return if it has been changed
   it indicates a user's wrapup routine is to be called. */
	saved_ilc = scu.ilc;

	gtss_ext_$dispose_of_drl = dispose_of_derail;
	gtss_ext_$flags.drl_in_progress = "1"b;
	gtss_ext_$flags.dispose_of_drl_on_pi = disposable_derail (drl_number);

/*
   Call the appropriate DRL processor .
*/
	if drl_handler (drl_number) = gtss_abort_subsystem_$not_imp
	then increment = drl_number;
	call drl_handler (drl_number) (mcp, increment);

/* put code in here to measure drl activity */
	gtss_ext_$statistics.total_time (drl_number) = gtss_ext_$statistics.total_time (drl_number) +
	     virtual_cpu_time_ ()- initial_cpu_time;	/* count total time used by a drl */

/*
   Modify the machine conditions to skip the DRL and any arguments
   to it.  This is accomplished by modifying the IC (scu.ilc) and forcing
   the processor to refetch the instruction pair.
*/
/* However, if scu.ilc has already been changed, it will be left alone,
   since this means user's wrapup code is about to be executed. */
	if saved_ilc = scu.ilc then do;
	     increment = increment + 1 + fixed (scu.ilc, 18);
	     scu.ilc = substr (unspec (increment), 19, 18);
	end;

/* Update saved machine registers in user's slave prefix. */
	call gtss_update_safe_store_ (mcp);
dispose_of_derail: ;
	scu.rfi = "1"b;
	scu.if = "1"b;
	gtss_ext_$dispose_of_drl = gtss_ext_$bad_drl_rtrn;
	gtss_ext_$restart_from_pi = gtss_ext_$bad_drl_rtrn;
	gtss_ext_$flags.dispose_of_drl_on_pi = "0"b;
	gtss_ext_$flags.drl_in_progress = "0"b;
	if gtss_ext_$flags.popup_from_pi then do;
	     gtss_ext_$flags.popup_from_pi = "0"b;
	     gtss_ext_$flags.unfinished_drl = "0"b;
	     go to gtss_ext_$popup_from_pi;
	end;
	if gtss_ext_$flags.unfinished_drl then do;
	     gtss_ext_$flags.unfinished_drl = "0"b;
	     call gtss_break_vector_ ();
	end;
	return;
%page;
set: entry;

/* *	Entry to set drl_handler entry variable.	* */

/*    octal name
   ===== ==== */
	drl_handler (-10) = gtss_drl_msub_;		/* DRL -012 Call Multics sub. */
	drl_handler (-09) = gtss_abort_subsystem_$not_imp; /* DRL -011 */
	drl_handler (-08) = gtss_abort_subsystem_$not_imp; /* DRL -010 */
	drl_handler (-07) = gtss_abort_subsystem_$not_imp; /* DRL -007 */
	drl_handler (-06) = gtss_abort_subsystem_$not_imp; /* DRL -006 */
	drl_handler (-05) = gtss_abort_subsystem_$not_imp; /* DRL -005 */
	drl_handler (-04) = gtss_abort_subsystem_$not_imp; /* DRL -004 */
	drl_handler (-03) = gtss_abort_subsystem_$not_imp; /* DRL -003 */
	drl_handler (-02) = gtss_abort_subsystem_$not_imp; /* DRL -002 */
	drl_handler (-01) = gtss_abort_subsystem_$not_imp; /* DRL -001 */
	drl_handler (000) = gtss_abort_subsystem_$not_imp; /* DRL 0000 -not available- */
	drl_handler (001) = gtss_drl_dio_;		/* DRL 0001 dio */
	drl_handler (002) = gtss_drl_kotnow_$gtss_drl_kout_; /* DRL 0002 kout */
	drl_handler (003) = gtss_drl_koutn_;		/* DRL 0003 koutn */
	drl_handler (004) = gtss_drl_kin_;		/* DRL 0004 kin */
	drl_handler (005) = gtss_drl_return_;		/* DRL 0005 return */
	drl_handler (006) = gtss_drl_defil_;		/* DRL 0006 defil */
	drl_handler (007) = gtss_drl_abort_;		/* DRL 0007 abort */
	drl_handler (008) = gtss_drl_setswh_;		/* DRL 0010 setswh */
	drl_handler (009) = gtss_drl_rstswh_;		/* DRL 0011 rstswh */
	drl_handler (010) = gtss_drl_rew_;		/* DRL 0012 rew */
	drl_handler (011) = gtss_drl_filsp_;		/* DRL 0013 filsp */
	drl_handler (012) = gtss_drl_retfil_;		/* DRL 0014 retfil */
	drl_handler (013) = gtss_drl_relmem_;		/* DRL 0015 relmem */
	drl_handler (014) = gtss_drl_addmem_;		/* DRL 0016 addmem */
	drl_handler (015) = gtss_drl_corfil_;		/* DRL 0017 corfil */
	drl_handler (016) = gtss_drl_snumb_;		/* DRL 0020 snumb */
	drl_handler (017) = gtss_drl_time_;		/* DRL 0021 time */
	drl_handler (018) = gtss_drl_pasaft_;		/* DRL 0022 pasaft */
	drl_handler (019) = gtss_drl_termtp_;		/* DRL 0023 termtp */
	drl_handler (020) = gtss_drl_pdio_;		/* DRL 0024  */
	drl_handler (021) = gtss_drl_restor_;		/* DRL 0025 restor */
	drl_handler (022) = gtss_drl_spawn_;		/* DRL 0026 spawn */
	drl_handler (023) = gtss_drl_tapein_;		/* DRL 0027 */
	drl_handler (024) = gtss_drl_callss_;		/* DRL 0030 callss */
	drl_handler (025) = gtss_abort_subsystem_$not_imp; /* DRL 0031 */
	drl_handler (026) = gtss_abort_subsystem_$not_imp; /* DRL 0032 */
	drl_handler (027) = gtss_drl_pasust_;		/* DRL 0033  pasust */
	drl_handler (028) = gtss_drl_morlnk_;		/* DRL 0034 morlnk */
	drl_handler (029) = gtss_abort_subsystem_$not_imp; /* DRL 0035 */
	drl_handler (030) = gtss_drl_filact_;		/* DRL 0036 filact */
	drl_handler (031) = gtss_drl_setlno_;		/* DRL 0037 setlno */
	drl_handler (032) = gtss_drl_sysret_;		/* DRL 0040 sysret */
	drl_handler (033) = gtss_abort_subsystem_$not_imp; /* DRL 0041 */
	drl_handler (034) = gtss_abort_subsystem_$not_imp; /* DRL 0042 */
	drl_handler (035) = gtss_abort_subsystem_$not_imp; /* DRL 0043 */
	drl_handler (036) = gtss_drl_pasdes_;		/* DRL 0044 pasdes */
	drl_handler (037) = gtss_drl_jsts_;		/* DRL 0045 jsts */
	drl_handler (038) = gtss_abort_subsystem_$not_imp; /* DRL 0046 */
	drl_handler (039) = gtss_drl_part_;		/* DRL 0047 part */
	drl_handler (040) = gtss_drl_grow_;		/* DRL 0050 grow */
	drl_handler (041) = gtss_abort_subsystem_$not_imp; /* DRL 0051 */
	drl_handler (042) = gtss_abort_subsystem_$not_imp; /* DRL 0052 */
	drl_handler (043) = gtss_drl_switch_;		/* DRL 0053 */
	drl_handler (044) = gtss_drl_drlimt_;		/* DRL 0054 drlimt */
	drl_handler (045) = gtss_abort_subsystem_$not_imp; /* DRL 0055 */
	drl_handler (046) = gtss_drl_kotnow_;		/* DRL 0056 kotnow */
	drl_handler (047) = gtss_drl_objtim_;		/* DRL 0057 objtim */
	drl_handler (048) = gtss_drl_spawn_$gtss_drl_pasflr_; /* DRL 0060 pasflr */
	drl_handler (049) = gtss_drl_stoppt_;		/* DRL 0061 */
	drl_handler (050) = gtss_drl_drlsav_;		/* DRL 0062 drlsav */
	drl_handler (051) = gtss_drl_task_;		/* DRL 0063 task */
	drl_handler (052) = gtss_drl_pseudo_;		/* DRL 0064 pseudo */
	drl_handler (053) = gtss_drl_prgdes_;		/* DRL 0065 prgdes */
	drl_handler (054) = gtss_drl_gwake_;		/* DRL 0066 gwake */
	drl_handler (055) = gtss_abort_subsystem_$not_imp; /* DRL 0067 */
	drl_handler (056) = gtss_abort_subsystem_$not_imp; /* DRL 0070 */
	drl_handler (057) = gtss_abort_subsystem_$not_imp; /* DRL 0071 */
	drl_handler (058) = gtss_drl_t_goto_;		/* DRL 0072 t.goto */
	drl_handler (059) = gtss_drl_t_cmov_;		/* DRL 0073 t.cmov */
	drl_handler (060) = gtss_drl_t_linl_;		/* DRL 0074 t.linl */
	drl_handler (061) = gtss_abort_subsystem_$not_imp; /* DRL 0075 */
	drl_handler (062) = gtss_abort_subsystem_$not_imp; /* DRL 0076 */
	drl_handler (063) = gtss_drl_t_cfio_;		/* DRL 0077 t.cfio */
	drl_handler (064) = gtss_abort_subsystem_$not_imp; /* DRL 0100 */
	drl_handler (065) = gtss_drl_t_rscc_;		/* DRL 0101 t.rscc */
	drl_handler (066) = gtss_abort_subsystem_$not_imp; /* DRL 0102 */
	drl_handler (067) = gtss_drl_t_err_;		/* DRL 0103 t.err */
	drl_handler (068) = gtss_abort_subsystem_$not_imp; /* DRL 0104 */
	drl_handler (069) = gtss_abort_subsystem_$not_imp; /* DRL 0105 */
	drl_handler (070) = gtss_abort_subsystem_$not_imp; /* DRL 0106 */
	drl_handler (071) = gtss_abort_subsystem_$not_imp; /* DRL 0107 */
	return;
%page;
/* *  Declarations for gtss_derail_processor_:
   IDENTIFIER		ATTRIBUTES	* */
dcl  addr builtin;
dcl  baseno builtin;
dcl  cu_$ptr_call entry options (variable);
dcl 1 derail aligned based (derail_ptr),
    2 drl_numb fixed bin (17) unal,			/* drl_numb is fixed bin(17) to allow for negative derails */
    2 drl_op bit (18) unal;
dcl  derail_ptr ptr init (null ());
dcl  drl_number fixed bin (17);
dcl  drl_handler (-10:71)entry (ptr, fixed bin (24))static;
dcl  fixed builtin;
dcl  gseg ptr init (null ());
dcl  hbound builtin;
dcl  increment fixed bin (24);
dcl  initial_cpu_time fixed bin (71);
dcl  ioa_ entry options (variable);
dcl  lbound builtin;
dcl  quit_flag bit (1);
dcl  quit condition;
dcl  saved_ilc bit (18);
dcl  substr builtin;
dcl  unspec builtin;
dcl  virtual_cpu_time_ entry returns (fixed bin (71));

dcl  disposable_derail (-10:71)
     bit (1) unal static int options (constant) init (
    (12) (1)"0"b,					/* -12 to +01 (octal) */
     "1"b,					/* DRL KOUT (02 octal) */
     "1"b,					/* DRL KOUTN (03 octal) */
    (42) (1)"0"b,					/* 04 to 55 (octal) */
     "1"b,					/* DRL KOTNOW (56 octal) */
    (25) (1)"0"b);						/* 57 to 107 (octal) */
%page;
%include gtss_spa;
%page;
%include gtss_ust_ext_;
%page;
%include gtss_drl_names;
%page;
%include gtss_pnterr;
%page;
%include gtss_ext_;
%page;
%include mc;
%page;
%include gtss_entry_dcls;
%page;
%include gse_ext_;

end gtss_derail_processor_;
