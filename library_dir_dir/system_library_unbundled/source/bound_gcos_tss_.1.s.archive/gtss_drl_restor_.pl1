/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/**************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   **************************************************************/

gtss_drl_restor_: proc (mcpp, increment);

/**	gtss bring on overlay for current subsystem.

   Authors: Robert J. Grimes	Created
   -	  Albert N. Kepner	  1978
   -	  Robert M. May
   -	  David B. Ward
   Changed: Dave Ward	5/29/79  h* gdb name parm.
   **/
dcl  mcpp                     ptr parm;
dcl  increment                fixed bin parm;
	mcp = mcpp;

/**

   DRL RESTOR, OVERLAY-LOAD A SUBSYSTEM (octal 25)


   8_________1_6_____________________

   DRL	  RESTOR
   ASCII    1,name
   ZERO     loc,0 or non-0
   ZERO     tra,0

   or

   DRL	  RESTOR
   ZERO	  nameloc,0 or 1
   ZERO     loc,0 or non-0
   ZERO	  tra,bufloc

   (See TSS SYSTEM PROGRAMMER'S
   REFERENCE MANUAL DD17B, Rev. 0, July 1976
   Page 3-21)

*/

	scup = addr (mc.scu);
	gseg = gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_);
	arg_list_ptr = addrel (gseg, fixed (scu.ilc)+1);	/* get addres of arg_list */

/* Update saved machine registers in user's slave prefix. */
	call gtss_update_safe_store_ (mcp);

	if substr (arg_list2.not_first_name, 1, 17) ^= "0"b then do;

/**	Cause an overlay to be placed in the current memory
   for the current executing subsystem. Transfer execution
   back into the current subsystem.
   **/

	     prog_name = ascii_program_name;		/* Local value. */
	     do i = 1 to hbound (gtss_prgdes_ext_$prgdes, 1); /* Lookup name in program descriptors. */
		if prog_name = gtss_prgdes_ext_$prgdes (i).ss_name then do; /* Found */
		     call gtss_run_subsystem_$restor (i, arg_list_ptr); /* AND DO NOT RETURN! */
		     call gtss_abort_subsystem_ (
			mcp
			, "gtss_drl_restor_"
			, 0
			, "RESTOR: Improper return? at (^6o)"
			, fixed (scu.ilc, 18)
			);
		     return;
		end;
	     end;
						/* Not found. */
	     call com_err_ (0, "gtss_drl_restor_",
		"""^a"" not found as a program descriptor name.", prog_name);
	     call gtss_abort_subsystem_ (
		mcp
		, "gtss_drl_restor_"
		, 0
		, "RESTOR: ??? at (^6o)"
		, fixed (scu.ilc, 18)
		);
	     return;
	end;

/**	Overlay-load a permanent file or a program
   from a multiprogram permanent file.
   **/

/**	Verify 3 word name list available.	**/
	if (fixed (nameloc)+2) > fixed (gtss_ust.lsize.limit, 18)
	| fixed (nameloc) < 100 then do;
	     call gtss_abort_subsystem_ (
		mcp
		, "gtss_drl_restor_"
		, 4
		, "RESTOR: 3 word name list outside memory at (^60)"
		, fixed (scu.ilc, 18)
		);
	     return;
	end;
	name_list_ptr = addrel (gseg, nameloc);

/**	Verify name of perm file is in AFT.	**/
	call gtss_aft_$find ((ascii_file_name), fn, code);
	if code = 1 then do;			/* Not in AFT. */
	     call gtss_abort_subsystem_ (
		mcp
		, "gtss_drl_restor_"
		, 0
		, "RESTOR: SAVE/RESTOR FILE NAME (^a) NOT IN AFT at (^6o)"
		, ascii_file_name
		, fixed (scu.ilc, 18)
		);
	     return;
	end;
	temp = divide (file_size (fn), 64, 24, 0);
	if temp > max_for_18_bits
	then file_size_in_blocks = max_for_18_bits;
	else file_size_in_blocks = temp;

/* Make sure file is not null */

	if ^gtss_disk (fn).pat_body.write_performed
	then do;
not_initialized: ;
	     call gtss_abort_subsystem_ (
		mcp
		, "gtss_drl_restor_"
		, 51
		, err51				/* H* file not initialized */
		, fixed (scu.ilc, 18)
		, ascii_file_name
		);
	     return;
	end;

/* Make sure the buffer is within memory */
	if fixed (arg_list2.bufloc)+63 >= fixed (gtss_ust.lsize.limit)
	| fixed (arg_list2.bufloc, 18) < 100 then do;
bad_arg:	     ;
	     call gtss_abort_subsystem_ (
		mcp
		, "gtss_drl_restor_"
		, 4
		, err4				/* Bad derail argument */
		, fixed (scu.ilc, 18)
		);
	     return;
	end;
	buffer_ptr = addrel (gseg, arg_list2.bufloc);

/* Make sure file name is not within buffer */
	call check (fixed (nameloc), fixed (nameloc)+1);

/* Make sure Derail call sequence is not within buffer */
	call check (fixed (scu.ilc), fixed (scu.ilc)+3);


/* At this point the arguments have been checked and the restore of
   the user's H* can proceed. */

	if arg_list2.not_first_name then do;
	     last_catalog = "0"b;
	     next_catalog = 0;
	     control_block = 0;
	     do while (^last_catalog);
		call read_buffer (next_catalog, fixed (arg_list2.bufloc));
		call search_for_object (next_catalog, control_block);
		if control_block ^= 0 then go to read_control_block;
		last_catalog = (next_catalog <= 0);
		if next_catalog >= file_size_in_blocks then go to undefined;
	     end;

undefined:     ;
	     gtss_ext_$gdb_name = " ";
	     call gtss_bcd_ascii_$lc (addr (bcd_program_name), 6, addr (gtss_ext_$gdb_name));
	     call gtss_abort_subsystem_ (
		mcp
		, "gtss_drl_restor_"
		, 47
		, err47				/* H* program name undefined */
		, fixed (scu.ilc, 18)
		, gtss_ext_$gdb_name
		);
	     return;
	end;
	else control_block = 2;

read_control_block: ;
	if control_block >= file_size_in_blocks then go to undefined;
	call read_buffer (control_block, fixed (arg_list2.bufloc));
	call analyze_control_block;
	call read_data (control_block+1, memory_loc);
	call gtss_update_safe_store_ (mcp);
	call gtss_run_subsystem_$restor_perm (0, arg_list_ptr, fixed (entry_address, 18));
ret:	;
	return;

analyze_control_block: proc;

/* Place entry address and load origin in the Q register. */
	     mc.regs.q = data_control_block.entry_address||
		data_control_block.load_origin;

/* Determine where to resume execution. */
	     entry_address = data_control_block.entry_address;
	     if arg_list2.tra ^= "0"b
	     then entry_address = arg_list2.tra;
	     if entry_address >= gtss_ust.lsize.limit
	     then go to bad_arg;

/* Determine where in memory to put data being restored. */
	     if arg_list2.program_0_at_loc
	     then load_origin = "0"b;
	     else do;
		if data_control_block.load_origin > "0"b
		then load_origin = data_control_block.load_origin;
		else do;
		     temp = fixed (data_control_block.dcws (1).memory_loc, 18)-1024;
		     if temp < 0 then go to undefined;
		     load_origin = bit (fixed (temp, 18), 18);
		end;
	     end;
	     memory_loc = fixed (load_origin, 18)+fixed (arg_list2.loc, 18);

/* Determine length of data block to be restored. */
	     words_in_element = 0;
	     do i = 1 to hbound (data_control_block.dcws, 1);

/* Check for IONTP */
		if dcws (i).action_code = "011"b then do;
		     call gtss_abort_subsystem_ (
			mcp
			, "gtss_drl_restor_"
			, 4			/* Bad derail arg */
			, "Unimplemented function: IONTP DCW by DRL RESTOR at (^6o)"
			, fixed (scu.ilc, 18)
			);
		     go to ret;
		end;

		if data_control_block.dcws (i).word_count = "0"b
		then words_in_element = words_in_element + 4096;
		else words_in_element = words_in_element +
		     fixed (data_control_block.dcws (i).word_count);

/* Check for IOTD. */
		if dcws (i).action_code = "000"b
		then go to last_dcw;

/* Check for IOTP */
		if dcws (i).action_code ^= "001"b then do;
		     call gtss_abort_subsystem_ (
			mcp
			, "gtss_drl_restor_"
			, 3
			, err3			/* Invalid DCW */
			, fixed (scu.ilc, 18)
			);
		     go to ret;
		end;
	     end;

last_dcw:	     ;
	     mc.regs.a =
		bit (fixed (words_in_element+fixed (load_origin, 18), 18), 18)||
		load_origin;
	     if words_in_element+memory_loc >= fixed (gtss_ust.lsize.limit) then
		go to bad_arg;
	end analyze_control_block;

check:	proc (l1, l2);

/* This routine verifies that the range of addresses from l1 to l2
   does not overlap the user's buffer */
dcl (l1, l2) fixed bin (18) parm;

	     if l2 < fixed (arg_list2.bufloc) then return;
	     if l1 > fixed (arg_list2.bufloc) then return;
	     call gtss_abort_subsystem_ (
		mcp
		, "gtss_drl_restor_"
		, 4
		, err4				/* Bad derail argument */
		, fixed (scu.ilc, 18)
		);
	     go to ret;
	end check;

search_for_object: proc (next_catalog, control_block);
dcl  next_catalog             fixed bin (18) parm;
dcl  control_block            fixed bin (18) parm;
	     next_catalog = fixed (catalog_block.continue_catalog, 18);
	     do i = 1 to hbound (cat, 1);
		if bcd_program_name = cat (i).bcd_name then do;
		     gtss_ext_$gdb_name = " ";
		     call gtss_bcd_ascii_$lc (addr (bcd_program_name), 6, addr (gtss_ext_$gdb_name));
		     control_block = fixed (cat (i).initial_block, 18);
		     return;
		end;
	     end;
	end search_for_object;

/**	Variables for gtss_drl_restor_:
   IDENTIFIER		ATTRIBUTES	**/
dcl  addrel                   builtin;
dcl  arg_list_ptr             ptr init(null());
dcl  code                     fixed bin (35);
dcl  control_block            fixed bin (18);
dcl  entry_address            bit (18);
dcl  fixed                    builtin;
dcl  fn                       fixed bin (24);
dcl  gseg                     ptr init(null());
dcl  last_catalog             bit (1);
dcl  load_origin              bit (18);
dcl  me                       char (32) int static options (constant) init ("gtss_drl_restor_");
dcl  name_list_ptr            ptr init(null());
dcl  next_catalog             fixed bin (18);
dcl  prog_name                char (4)aligned;
dcl  status                   fixed bin (24);
dcl  to_from                  char (17) int static options (constant) init ("read program from");

%include gtss_restor_arg_list1;

dcl 1 arg_list2 aligned based (arg_list_ptr)
     , 2 nameloc bit (18)unal
     , 2 not_first_name bit (18)unal
     , 2 loc bit (18)unal
     , 2 program_0_at_loc bit (18)unal
     , 2 tra bit (18)unal
     , 2 bufloc bit (18)unal
     ;

dcl 1 name_list aligned based (name_list_ptr)
     , 2 ascii_file_name char (8)
     , 2 bcd_program_name bit (36)
     ;

%include gtss_ext_;

%include mc;

%include gtss_pnterr;
%include gtss_prgdes_;

%include gtss_ust_ext_;

%include gtss_entry_dcls;

%include gtss_dfd_ext_;

%include gtss_device_cmds;

%include gtss_hstar;

%include gtss_save_restore_data_;
     end						/* gtss_drl_restor_ */;
