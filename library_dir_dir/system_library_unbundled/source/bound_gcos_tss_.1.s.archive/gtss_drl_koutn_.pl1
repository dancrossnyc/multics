/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */
gtss_drl_koutn_: proc (mcpp, increment);

/**	Terminal output then input.

   Authors: Robert J. Grimes	Created
   -	  Albert N. Kepner	  1978
   -	  Robert M. May
   -	  David B. Ward
   Changed: Al Dupuis 05/08/79
                              To have gtss_ext_$get_line called instead
                              of iox_$get_line. Also bytes_read and code
                              to match gtss_ext_'s declares.
   Changed: Dave Ward	07/01/79 Long input lines.

*/
dcl  mcpp                     ptr parm;
dcl  increment                fixed bin parm;
	mcp = mcpp;

/*

   DRL KOUTN, KEYBOARD OUTPUT THEN INPUT (octal 3)


   8_________1_6_____________________

   DRL      KOUTN
   ZERO     L(tally),L(char)


   This derail sends output to  the  keyboard  device  with  an
   anticipated reply.  The L(tally) and L(char) fields are identical
   to  those  for  the  KOUT  sequence.   In this case, however, the
   Executive  adds  this  output  message  to  any  data  that   has
   accumulated  in  the  keyboard  output  buffer and sends the data
   directly to the keyboard device.  The transfer  of  data  differs
   from  that for KOUT in that the line is left open for a response.
   The response can be retrieved by means of DRL KIN.

*/

	scup = addr (mc.scu);

/**	Print caller's data on terminal. **/
	call gtss_drl_kotnow_ (mcp, increment);

/**	Refill remote i/o buffer with
	terminal input line. (like build mode).
 **/
reinput:	;
	call gtss_ext_$get_line (iox_$user_input
	     , addr (characters_transmitted)
	     , min (gtss_ust.lrtll.char_length, hbound (characters_transmitted, 1))
	     , bytes_read
	     , code);
	if code ^= 0 then do;
	     if code = error_table_$long_record then do;
		call iox_$control (
		     iox_$user_input
		     , "resetread"
		     , null ()
		     , code
		     );
dcl iox_$control entry (ptr, char (*), ptr, fixed bin (35));
dcl  error_table_$long_record fixed bin (35) ext;
dcl  iox_$user_output         ext ptr;

dcl  retry_message            char(21)static int options(constant)init("RETRANSMIT LAST LINE
");
		call gtss_ext_$put_chars (		/* Print retry message. */
		     iox_$user_output
		     , addr (retry_message)
		     , length (retry_message)
		     , code);
		goto reinput;
	     end;
	     call com_err_ (code, "gtss_drl_koutn_", "Terminal failure.");
	     signal cond (gtss_fail);
	end;
	count_of_characters_transmitted = bytes_read;
	number_words_transmitted =
	     divide ((bytes_read+3), 4, 24, 0);
	characters_transmitted (bytes_read) = CR;

	increment = 1;
	gtss_ext_$last_k_was_out = "0"b;		/* Last tty i/o was not output. */
	gtss_ust.lbuf.tally = "0"b;
	return;

/**	Variables for gtss_drl_koutn_:
     IDENTIFIER		ATTRIBUTES	**/
dcl  bytes_read               fixed bin (21);
dcl  code                     fixed bin (35);
dcl  gtss_fail                condition ext;
dcl  iox_$user_input          ext ptr;

dcl
	CR char (1) static int options(constant) init ("");

%include gtss_ext_;

%include gtss_ust_ext_;

%include mc;

%include gtss_entry_dcls;
     end						/* gtss_drl_koutn_ */;
