/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */

gtss_drl_drlsav_: proc (mcpp, increment);

/* *	gtss save a program on a permanemt file.

   Authors:	Robert J. Grimes	Created
		Albert N. Kepner	  1978
		Robert M. May
		David B. Ward

   Changed:  Ron Barstad    11/06/82  Remove stringsize condition from word_count assign 
*/
dcl  mcpp ptr parm;
dcl  increment fixed bin parm;
	mcp = mcpp;

/**

   DRL DRLSAV, SAVE PROGRAM ON PERMANEMT FILE (octal 62)


   8_________1_6_____________________

   DRL      DRLSAV
   ZERO	  nameloc,0 or 1
   ZERO	  loc 1, loc 2
   ZERO	  entry addr,load org
   ZERO	  tra,bufloc

   (See TSS SYSTEM PROGRAMMER'S
   REFERENCE MANUAL DD17B, Rev. 0, July 1976
   Page 3-23)

*/

	scup = addr (mc.scu);
	gseg = gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_);
	arg_list_ptr = addrel (gseg, fixed (scu.ilc, 18)+1); /* get addres of arg_list */

/**	Verify 3 word name list available.	**/
	if (fixed (nameloc)+2) > fixed (gtss_ust.lsize.limit, 18) then do;
	     call gtss_abort_subsystem_ (mcp,
		"gtss_drl_drlsav_",
		4,
		"DRLSAV: 3 word name list outside memory at (^6o)",
		fixed (scu.ilc, 18));
	     return;
	end;
	name_list_ptr = addrel (gseg, nameloc);


/**	Verify name of perm file is in AFT.	**/
	call gtss_aft_$find ((ascii_file_name), fn, code);
	if code = 1 then do;			/* Not in AFT. */
	     call gtss_abort_subsystem_ (mcp,
		"gtss_drl_drlsav_",
		42,
		err42,				/* H* file name not in aft. */
		fixed (scu.ilc, 18),
		ascii_file_name);
	     return;
	end;
	temp = divide (file_size (fn), 64, 24, 0);
	if temp > max_for_18_bits
	then file_size_in_blocks = max_for_18_bits;
	else file_size_in_blocks = temp;

	if name_list.bcd_program_name = "0"b then do;
	     call gtss_abort_subsystem_ (
		mcp,
		"gtss_drl_drlsav_",
		54,
		err54,				/* H* File program name required */
		fixed (scu.ilc, 18),
		ascii_file_name);
	     return;
	end;

	if ^gtss_disk (fn).permissions.write then do;
	     call gtss_abort_subsystem_ (
		mcp,
		"gtss_drl_drlsav_",
		25,
		err25,				/* Write attempted on read only file */
		fixed (scu.ilc, 18),
		ascii_file_name);
	     return;
	end;

	if ^gtss_disk (fn).pat_body.random then do;
	     call gtss_abort_subsystem_ (
		mcp,
		"gtss_drl_drlsav_",
		52,
		err52,				/* H* file must be random */
		fixed (scu.ilc, 18),
		ascii_file_name);
	     return;
	end;
	if arg_list.loc_1 >= gtss_ust.lsize.limit then do;
	     call gtss_abort_subsystem_ (
		mcp,
		"gtss_drl_drlsav_",
		4,				/* Invalid derail argument */
		"DRLSAV: Initial data address outside memory at (^6o)",
		fixed (scu.ilc, 18));
	     return;
	end;
	if arg_list.loc_2 >= gtss_ust.lsize.limit then do;
	     call gtss_abort_subsystem_ (
		mcp,
		"gtss_drl_drlsav_",
		4,				/* Invalid derail argument */
		"DRLSAV: Final data address outside memory at (^6o)",
		fixed (scu.ilc, 18));
	     return;
	end;
	words_in_element = fixed (loc_2) - fixed (loc_1) + 1;
	blocks_in_element = divide (words_in_element+63, 64, 18, 0);
	if words_in_element < 1 then do;
	     call gtss_abort_subsystem_ (
		mcp,
		"gtss_drl_drlsav_",
		50,
		err50,				/* Bad DRL DRLSAV data loc */
		fixed (scu.ilc, 18));
	     return;
	end;

/* Return 0 in A register if successful */
	mc.regs.a = "0"b;

	if arg_list.tra >= gtss_ust.lsize.limit
	| fixed (arg_list.tra) < 100 then do;
	     call gtss_abort_subsystem_ (
		mcp,
		"gtss_drl_drlsav_",
		4,
		err4,				/* Bad derail argument */
		fixed (scu.ilc, 18));
	     return;
	end;
	if fixed (arg_list.bufloc)+63 >= fixed (gtss_ust.lsize.limit)
	| fixed (arg_list.bufloc, 18) < 100 then do;
	     call gtss_abort_subsystem_ (
		mcp,
		"gtss_drl_drlsav_",
		4,
		err4,				/* Bad derail argument */
		fixed (scu.ilc, 18));
	     return;
	end;
	buffer_ptr = addrel (gseg, arg_list.bufloc);

/* Now all the arguments have been verified and the
   actual save processing starts. */

	if arg_list.not_first_name then do;
	     call locate_catalog_entry;
	end;
	else do;					/* First program on H* file */

/* Clear buffer */
	     unspec (catalog_block) = "0"b;
	     catalog_block.blk_num = 1;
	     catalog_entry = 1;
	     initial_block_of_element = 2;
	end;
	call add_element_to_catalog_block;
	call update_available_space_block;
	call make_data_block;

final_transfer: ;
	increment = fixed (arg_list.tra, 18) - fixed (scu.ilc, 18) - 1;
ret:	;
	return;


add_element_to_catalog_block: proc;

/* When this routine is called catalog_entry must indicate where to add the new element in the
   catalog. initial_block_of_element indicates where in the file the data element will be
   placed.  blocks_in_element indicates the number of 64 word blocks needed for the
   program being added excluding the data control block. */

	     cat (catalog_entry).bcd_name = name_list.bcd_program_name;

/* Add one for control block when computing element size */
	     cat (catalog_entry).element_size = bit (fixed (blocks_in_element+1, 18), 18);
	     cat (catalog_entry).initial_block = bit (initial_block_of_element, 18);

/* Determine if file is large enough */
	     temp = blocks_in_element + initial_block_of_element+1;
	     if temp > max_for_18_bits then do;
program_too_large:	;
		mc.regs.a = (35)"0"b||"1"b;
		go to final_transfer;
	     end;
	     else blocks_used_in_file = temp;
	     if blocks_used_in_file > file_size_in_blocks then go to program_too_large;

/* Do not include old checksum in new => check first 63 words. */
	     catalog_block.checksum = checksum (buffer_ptr, 63);
	     call write_buffer (0, fixed (arg_list.bufloc));
	end add_element_to_catalog_block;

locate_catalog_entry: proc;

/* This routine reads the catalog block and determines where in the H* file
   the new program will be placed. */

	     if ^gtss_disk (fn).pat_body.write_performed
	     then do;
not_initialized:	;
		call gtss_abort_subsystem_ (
		     mcp,
		     "gtss_drl_drlsav_",
		     51,
		     err51,			/* H* file not initialized */
		     fixed (scu.ilc, 18),
		     ascii_file_name);
		go to ret;
	     end;

/* Read the catalog block */
	     call read_buffer (0, fixed (arg_list.bufloc));

/* Make sure this looks like a catalog */
	     if catalog_block.blk_num ^= 1 | catalog_block.fill2 ^= "0"b
	     then go to not_initialized;

/* Find the first empty slot in the catalog */
	     element_name = "1"b;
	     do i = 1 to hbound (cat, 1);
		element_name = cat (i).bcd_name;
		if element_name = "0"b then go to found_slot;
	     end;

/* If we fall through the catalog is full */
	     call gtss_abort_subsystem_ (
		mcp,
		"gtss_drl_drlsav_",
		48,
		err48,				/* H* file catalog full */
		fixed (scu.ilc, 18),
		ascii_file_name);
	     goto ret;

found_slot:    ;
	     catalog_entry = i;

/* Guard against first name on catalog being zero */
	     if i < 1 then go to not_initialized;
	     i = i-1;
	     initial_block_of_element = fixed (cat (i).element_size)+fixed (cat (i).initial_block);
	end locate_catalog_entry;

make_data_block: proc;

/* When this routine is called initial_block_of_element must indicate the
   block within the file where the data control block for this element is to be
   written.  words_in_element indicates the number of words in the program
   element being added. */

/* Clear the buffer again */
	     unspec (data_control_block) = "0"b;

	     data_control_block.number_of_data_blocks = bit (blocks_in_element, 18);
	     data_control_block.entry_address = arg_list.entry_address;
	     data_control_block.load_origin = arg_list.load_origin;
	     data_control_block.bcd_name = name_list.bcd_program_name;

/* Make DCW's for control block */

/* For some reason Gcos offsets the address field of each DCW by
   2000 octal = 1024 from the load origin. */
	     memory_loc = fixed (arg_list.load_origin, 18)+1024;
	     words_remaining = words_in_element;
	     word_count = "7400"b3;			/* 7400 octal = 3840 = one link */
	     do i = 1 to hbound (data_control_block.dcws, 1);
		if words_remaining < 3841 then go to last_dcw;
		data_control_block.dcws (i).memory_loc = bit (memory_loc, 18);
		data_control_block.dcws (i).action_code = "001"b; /* IOTP */
		data_control_block.dcws (i).word_count = substr(word_count,1,12);
		memory_loc = memory_loc+3840;
		words_remaining = words_remaining - 3840;
	     end;

/* If we fall through, the program is too large to save. */

	     call gtss_abort_subsystem_ (
		mcp,
		"gtss_drl_drlsav_",
		4,				/* Bad drl argument */
		"DRL DRLSAV (^6o) program size ^i words exceeds maximum 58 links",
		fixed (scu.ilc, 18),
		words_in_element);
	     return;

last_dcw:	     ;
	     data_control_block.dcws (i).memory_loc =
		bit (memory_loc, 18);
	     data_control_block.dcws (i).action_code = "000"b; /* IOTD */
	     data_control_block.dcws (i).word_count = bit (fixed (words_remaining, 12), 12);

/* Checksum the data */
	     data_ptr = addrel (gseg, arg_list.loc_1);
	     data_control_block.data_checksum = checksum (data_ptr, words_in_element);

/* Checksum the control block */
	     data_control_block.control_block_checksum = checksum (buffer_ptr, 64);
	     call write_buffer (initial_block_of_element, fixed (arg_list.bufloc));
	     call write_data (initial_block_of_element+1, fixed (arg_list.loc_1));
	end make_data_block;

update_available_space_block: proc;

/* When this routine is called blocks_used_in_file must reflect the space used in
   the file including the new program being added.  file_size_in_blocks must be the total
   size of the file in 64  word blocks. */

/* Clear the buffer */
	     unspec (available_space_block) = "0"b;

/* Fill in the available space block */
	     available_space_block.blocks_used = bit (blocks_used_in_file, 18);
	     available_space_block.blocks_remaining =
		bit (fixed (file_size_in_blocks - blocks_used_in_file, 18), 18);
	     available_space_block.checksum =
		available_space_block.blocks_used||available_space_block.blocks_remaining;
	     call write_buffer (1, fixed (arg_list.bufloc));
	end update_available_space_block;

%include gtss_checksum;

/**	Variables for gtss_drl_drlsav_:
   IDENTIFIER		ATTRIBUTES	**/
dcl  addrel builtin;
dcl  arg_list_ptr ptr init (null ());
dcl  blocks_in_element fixed bin (18);
dcl  blocks_used_in_file fixed bin (18);
dcl  catalog_entry fixed bin (18);
dcl  code fixed bin (35);
dcl  data_ptr ptr init (null ());
dcl  fixed builtin;
dcl  fn fixed bin (24);
dcl  gseg ptr init (null ());
dcl  gtss_fail condition;
dcl  initial_block_of_element fixed bin (18);
dcl  me char (32) static int options (constant) init ("gtss_drl_drlsav_");
dcl  name_list_ptr ptr init (null ());
dcl  status fixed bin (24);
dcl  to_from char (16) static int options (constant) init ("write program to");
dcl  word_count bit (18);

dcl 1 arg_list aligned based (arg_list_ptr)
     , 2 nameloc bit (18)unal
     , 2 not_first_name bit (18) unal
     , 2 loc_1 bit (18)unal
     , 2 loc_2 bit (18)unal
     , 2 entry_address bit (18)unal
     , 2 load_origin bit (18)unal
     , 2 tra bit (18)unal
     , 2 bufloc bit (18)unal
     ;

dcl 1 name_list aligned based (name_list_ptr)
     , 2 ascii_file_name char (8)
     , 2 bcd_program_name bit (36)
     ;


%include gtss_ext_;

%include mc;

%include gtss_pnterr;

%include gtss_ust_ext_;

%include gtss_entry_dcls;

%include gtss_save_restore_data_;

%include gtss_device_cmds;

%include gtss_dfd_ext_;

%include gtss_hstar;
     end						/* gtss_drl_drlsav_ */;
