/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */

gtss_drun_: proc (error);

/*	Author: Al Dupuis 09/13/79

   When this procedure is called the first time, it sets
   up the necessary environment for the subsystem DRUN to
   execute, if it is being called under absentee. If the process
   is an interactive one, it checks for any jobs that were executing
   and the system crashed (jobs that were not entered with restart
   argument). If one of these are found, it changes it's catalog entry
   in the #D queue to reflect it.
   When it is called the second time, it resets the environment
   expecting the absentee process to terminate, or the simulator to terminate if interactive.
   It is called the first time from gtss intialize procedure,
   and the second time from gtss termination procedure.
*/





	if first_time_called then do;
	     first_time_called = "0"b;
	     second_time_called = "1"b;
	     if gtss_ust.lcjid = "0"b then call inter_init;
	     else call abs_init;
	end;
	else if second_time_called then do;
	     second_time_called = "0"b;
	     first_time_called = "1"b;
	     call terminate;
	end;
	else do;
	     call com_err_ (0, caller,
		"Bug, first_time and second_time indicators were not set");
	     error = "1"b;
	end;

	return;

abs_init:	proc;

/* Open the deferred queue file (#D)		*/
	     call gtss_dq_$open_exc (error_occured);
	     if error_occured then do;
		call com_err_ (0, caller,
		     "Couldn't open the #D file");
		error = "1"b;
		return;
	     end;

/* Create restart file in homedir, put ipc_ event channel id in it */
	     call hcs_$make_seg (gtss_ext_$homedir, "drun_restart."
		|| gtss_ext_$drun_jid, "", 10, gtss_ext_$restart_seg_ptr, code);
	     if code = error_table_$namedup then
		call gtss_dq_$mod_js (gtss_ext_$drun_jid, 2, error_occured); /* change to resheduled due to system crash */
	     call hcs_$status_mins (gtss_ext_$restart_seg_ptr, type,
		bit_count, code);
	     if bit_count = 0 then do;
		call ipc_$create_ev_chn (event_info.channel_id, code);
		if code ^= 0 then do;
		     call convert_ipc_code_ (code);
		     call com_err_ (code, caller,
			"Couldn't create event channel.");
		     error = "1"b;
		     return;
		end;
		event_info.sender = get_process_id_ ();
		call hcs_$set_bc_seg (gtss_ext_$restart_seg_ptr, 72*2+36, code);
		if code ^= 0 then do;
		     call com_err_ (code, caller,
			"Couldn't set bit count.");
		     error = "1"b;
		     return;
		end;
	     end;
	     gtss_ext_$event_channel = event_info.channel_id;
	     call timer_manager_$cpu_call (30, "11"b, gtss_abs_$dabt_check);


/* Intialize communication region		*/
	     gtss_ext_$com_reg.tsdgt.ust_loc = 1;
	     gtss_ext_$com_reg.tsdmx.dit = 180;
	     call gtss_bcd_ascii_ (addr (gtss_ust.lcjid), 5, addr (gtss_ext_$drun_jid));
	     call gtss_dq_$catp (gtss_ext_$drun_jid, dc_ptr, cat_entry);
	     if dc_ptr = null () then do;
		call com_err_ (0, caller,
		     "Couldn't read ^a #D catalog entry", gtss_ext_$drun_jid);
		error = "1"b;
		return;
	     end;

	     gtss_ext_$com_reg.tsdid = dc_ptr -> dq_catalog.dcuid;
	     gtss_ext_$com_reg.tsdsd = dc_ptr -> dq_catalog.dcdsd;
	     gtss_ext_$com_reg.tsdst = dc_ptr -> dq_catalog.dcdst;
	     addr (gtss_ext_$com_reg.tsdjb) -> one_word = gtss_ust.lcjid;

/* If the user has a ..init file, reset lcjid and start_term so that it
   will be processed under crun. When crun shuts down these indicators
   will be reset by gtss_abandon_CFP_ and DRUN execution will then begin.
   Otherwise DRUN execution will begin now.		*/
	     string = gtss_abs_$get_drm ();
	     string = after (string, "gse -drm ");
	     if substr (string, 1, 2) = "wd"
	     then dir_name = rtrim (get_wdir_ ());
	     else if substr (string, 1, 3) = "smc"
	     then dir_name =
		rtrim (gse_ext_$smc_pathname) || ">"
		|| rtrim (gse_ext_$umc_name);
	     else if substr (string, 1, 3) = "umc"
	     then dir_name =
		">udd>" || rtrim (gse_ext_$umc_name)
		|| ">" || rtrim (gse_ext_$umc_name);
	     else do;
		call com_err_ (0, caller,
		     "Bug, couldn't get dir_mapping (^a)",
		     string);
		signal condition (gtss_fail);
	     end;
	     call hcs_$initiate_count (dir_name, "..init",
		"", bit_count, 1, seg_ptr, code);
	     if seg_ptr = null ()
	     then return;
	     gtss_ust.lcjid = "0"b;
	     gtss_ust.lcfst.start_term = 0;
	     gtss_ext_$put_chars = gtss_CFP_output_;
	     
	end;					/* abs_init */

inter_init: proc;

/*
   If a DRUN job id, and a Multics absentee request id both exist there is no
   action taken. If a DRUN job id exists, a Multics id doesn't,
   and the catalog status in the #D queue file is marked as still executing,
   the following takes place. If the drun restart file exists
   the entry is marked as aborted due to a system crash. (This means the user
   entered the request without the restart argument, and the catalog entry
   is changed now, versus real Gcos where it would be changed as soon as Gcos
   came back up). If the restart file did not exist, it was deleted by the
   finish condition begin block in gtss (examples of this would be if a user
   did an escape logout while under the simulator (normally the
   caleanup condition handler would change the catalog status, but it is not
   signaled in this case.)) In this case the catalog status would be changed
   to terminated abnormally. (Has to be done from here because finish condition
   handler is invoked after gtss_ios goodies are destroyed).
*/

/* Open the deferred queue file (#D) for read while writers */
	     call gtss_dq_$open_gen (error_occured);
	     if error_occured then do;
		call com_err_ (0, caller,
		     "Couldn't open the #D file");
		error = "1"b;
		return;
	     end;
	     call gtss_dq_$entries_info (addr (dq_info), 315, no_of_entries_found);
	     if no_of_entries_found ^= 0
	     then do;

/* Reopen the file for exclusive use as we may have to update it */
		call gtss_dq_$open_exc (error_occured);
		if error_occured then do;
		     call com_err_ (0, caller,
			"Couldn't open the #D file");
		     error = "1"b;
		     return;
		end;
		do i = 1 to no_of_entries_found;
		     if ((dq_info.js (i) = 3) & (dq_info.aid (i) = " ")) then do;
			call hcs_$initiate_count (gtss_ext_$homedir,
			     "drun_restart." || dq_info.did (i), "",
			     bit_count, 1, gtss_ext_$restart_seg_ptr, code);
			if gtss_ext_$restart_seg_ptr ^= null () then do;
			     call delete_$ptr (gtss_ext_$restart_seg_ptr, "100100"b, caller, code);
			     if code ^= 0 then do;
				call com_err_ (code, caller,
				     "Couldn't delete [hd]>drun_restart.^a", dq_info.did (i));
				error = "1"b;
				return;
			     end;
			     call gtss_dq_$mod_js (dq_info.did (i), 7, error_occured);
			end;
			else do;
			     call gtss_dq_$mod_js (dq_info.did (i), 6, error_occured);
			     call com_err_ (0, "",
				"^a terminated abnormally, check ^a>drun_control.^a.absout please.",
				dq_info.did (i), rtrim (gtss_ext_$homedir), dq_info.did (i));
			end;
		     end;
		end;
/* And revert opening back to read while changing	*/
		call gtss_dq_$open_gen (error_occured);
		if error_occured then do;
		     call com_err_ (0, caller,
			"Couldn't open the #D file");
		     error = "1"b;
		     return;
		end;
	     end;

/* Delete any absout files that don't have a corresponding entry in the
   deferred queue file.			*/
	     hdir = gtss_ext_$homedir;
	     call check_star_name_$entry (star_name, code);
	     if code ^= 1
	     then do;
		call com_err_ (code, caller,
		     "Bug, star name was ^a.", star_name);
		return;
	     end;
	     call hcs_$star_ (hdir, star_name,
		star_BRANCHES_ONLY, addr (our_area),
		star_entry_count, star_entry_ptr,
		star_names_ptr, code);
	     if code = error_table_$notalloc
	     then do;
		call com_err_ (code, caller,
		     "Bug, not enough room in our_area.");
		return;
	     end;
	     if code = error_table_$nomatch
	     then return;
	     in_def_q = "0"b;
	     do i = 1 to star_entry_count;
		if no_of_entries_found ^= 0
		then do j = 1 to no_of_entries_found;
		     if star_names (star_entries (i).nindex) =
		     "drun_control."
		     || dq_info.did (j)
		     || ".absout"
		     then do;
			in_def_q = "1"b;
			j = no_of_entries_found;
		     end;
		end;
		if ^ in_def_q
		then call delete_$path (hdir,
		     star_names (star_entries (i).nindex),
		     "010100"b, caller, code);
		else in_def_q = "0"b;
	     end;
	end;					/* inter_init */

terminate: proc;


	     call timer_manager_$reset_cpu_call (gtss_abs_$dabt_check);
	     call timer_manager_$reset_cpu_call (gtss_abs_$cpu_runout);
	     if gtss_ext_$flags.ss_time_limit_set then
		call timer_manager_$reset_cpu_call (gtss_fault_processor_$timer_runout);

/* If executing under absentee, clean things up */
	     if gtss_ust.lcjid ^= "0"b then do;
		call ipc_$delete_ev_chn (gtss_ext_$event_channel, code);
		call delete_$ptr (gtss_ext_$restart_seg_ptr, "100100"b, caller, code);
		call gtss_dq_$catp (gtss_ext_$drun_jid, dc_ptr, cat_entry);
		if dc_ptr -> dq_catalog.dcjid.job_status = 3 then do;
/* Open the deferred queue file (#D)		*/
		     call gtss_dq_$open_exc (error_occured);
		     if error_occured then do;
			call com_err_ (0, caller,
			     "Couldn't open the #D file");
			error = "1"b;
			return;
		     end;
		     call gtss_dq_$mod_js (gtss_ext_$drun_jid, 6, error_occured);
		     call com_err_ (0, caller,
			"When simulator termination occured, the catalog job status was marked as still executing.");
		end;
	     end;

	end;					/* termination */

/* gtss_drun_ declares		*/

dcl  addr			builtin;
dcl  binary		builtin;
dcl  bit_count		fixed bin (24);
dcl  caller		char (10) static int options (constant) init ("gtss_drun_");
dcl  cat_entry		fixed bin (18) unsigned;
dcl  check_star_name_$entry	entry (char (*), fixed bin (35));
dcl  code			fixed bin (35);
dcl  convert_ipc_code_	entry (fixed bin (35));
dcl  dc_ptr		ptr init (null());
dcl  dir_name		char (168);
dcl  delete_$path		entry (char (*), char (*), bit (6), char (*), fixed bin (35));
dcl  delete_$ptr		entry (ptr, bit (6), char (*), fixed bin (35));
dcl  error		bit (1) parm;
dcl  error_occured		bit (1);
dcl  error_table_$namedup	fixed bin (35) ext;
dcl  error_table_$nomatch	fixed bin (35) ext;
dcl  error_table_$notalloc	fixed bin (35) ext;
dcl  first_time_called	bit (1) static int init ("1"b);
dcl  get_process_id_	entry returns (bit (36));
dcl  get_wdir_		entry returns (char (168));
dcl  gtss_fail		condition ext;
dcl  hcs_$initiate_count	entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$make_seg		entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$set_bc_seg	entry (ptr, fixed bin (24), fixed bin (35));
dcl  hcs_$star_		entry (char(*),char(*),fixed bin(2),ptr, fixed bin,ptr,ptr,fixed bin(35));
dcl  hcs_$status_mins	entry (ptr, fixed bin (2), fixed bin (24), fixed bin (35));
dcl  hdir			char (64);
dcl  i			fixed bin (18) unsigned;
dcl  in_def_q		bit (1);
dcl  ipc_$create_ev_chn	entry (fixed bin (71), fixed bin (35));
dcl  ipc_$delete_ev_chn	entry (fixed bin (71), fixed bin (35));
dcl  j			fixed bin (18) unsigned;
dcl  no_of_entries_found	fixed bin (18) unsigned;
dcl  one_word		bit (36) based;
dcl  our_area		area (1024*5);
dcl  second_time_called	bit (1) static int init ("0"b);
dcl  seg_ptr		ptr init (null());
dcl  star_name		char (21) static int options (constant) init ("drun_control.*.absout");
dcl  string		char (256) varying;
dcl  sum			builtin;
dcl  time			fixed bin (71);
dcl  timer_manager_$cpu_call	entry (fixed bin (71), bit (2), entry);
dcl  timer_manager_$reset_cpu_call	entry (entry);
dcl  type			fixed bin (2);

dcl 1 event_info based (gtss_ext_$restart_seg_ptr),
      2 channel_id fixed bin (71),
      2 message fixed bin (71),
      2 sender bit (36),
      2 origin,
        3 dev_signal bit (18) unal,
        3 ring bit (18) unal,
      2 channel_index fixed bin;

dcl 1 dq_info (315),
      2 did char (5),
      2 aid char (19),
      2 js fixed bin (6) unsigned;

%include gtss_entry_dcls;

%include gtss_ext_;

%include gtss_deferred_queue;

%include gtss_ust_ext_;

%include gse_ext_;

%include star_structures;
     end;						/* gtss_drun_ */
