/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(2016-01-15,Swenson), approve(2016-01-15,MCR10003):
     Fix to support 4-character time zone abbreviations.
                                                   END HISTORY COMMENTS */

gtss_drl_t_cfio_: proc (mcpp, increment);

/**          CRUN and DRUN support functions. (7 distinct functions)

   Author:  Dave Ward          03/20/79.
   Changed: Al Dupuis          12/04/79. Rewritten to use cout term codes.
   Changed: Ron Barstad        83-03-31  Added function 8
**/

dcl mcpp ptr parm;
dcl increment fixed bin parm;

	mcp = mcpp;
	increment = 1;
	scup = addr (mc.scu);
	gseg = gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_);
	drl_args_ptr = addrel (gseg, fixed (scu.ilc, 18) + 1);
	if ((drl_args.function_no < 1)
	| (drl_args.function_no > 8))
	then do;
	     err_mess = "INVALID USE OF DRL T.CFIO";
	     gtss_ust.lcfst.start_term = 5;
	     call common_error;
	     return;
	end;
	if db_drl_t_cfio
	then call ioa_ (
	     "gtss_drl_t_cfio_: function ^i.", drl_args.function_no);
	call function (drl_args.function_no);
	return;

function_1: proc;


	     call verify_arglist (3);
	     if code ^= 0 then return;
	     call gtss_aft_$find ("*CFP", fn, code);
	     if code ^= 0
	     then do;
		err_mess = "COMMAND FILE NONEXISTENT";
		gtss_ust.lcfst.start_term = 1;
		call common_error;
		return;
	     end;
	     gtss_starCF_$FILE.cf.aft_indx = fn;
	     gtss_starCF_$FILE.ID1.fcb_loc,
		gtss_starCF_$FILE.ID2.fcb_loc
		= rel (addr (gtss_starCF_$FILE.cf));
	     CFP_in_progress = "1"b;
	     n_words = 3;
	     addr (gtss_ust.lcfio) -> words
		= addrel (gseg, drl_args.L_arglist) -> words;
	     if gtss_ext_$get_line ^= iox_$get_line
	     then do;
		if ^cout_called | ^cpos_called
		then gtss_starCF_$FILE.cf.first_time = "1"b;
		else;
	     end;
	     else do;
		gtss_ext_$get_line = gtss_CFP_input_;
		gtss_ext_$put_chars = gtss_CFP_output_;
		if gtss_ust.lcmpt ^= "0"b   /** Set any execution timer **/
		then do;
		     time = fixed (gtss_ust.lcmpt, 36)
			- (gtss_ust.lsprt + gtss_ust.lspts);
		     time = divide (divide (time, 64, 36), 1000, 36);
		     call timer_manager_$cpu_call (
			time, "11"b, gtss_abs_$cpu_runout);
		end;
		else;
		if gtss_ust.lcjid ^= "0"b
		then do;
		     /** If drun is executing under absentee, skip the line
                             intended for Gcos login and generate banner **/
		     gtss_ust.lcfio.sect_in = gtss_ust.lcfio.sect_in + 1;
		     gcos_banner = gtss_abs_login_banner_ ();
		     gtss_starCF_$FILE.RECORD.chars = gcos_banner;
		     call gtss_write_starCFP_ (
			null (), addr (gtss_starCF_$FILE.RECORD.chars),
			length (gcos_banner), code);
		     if code ^= 0 then return;
		     else;
		end;
		else;
	     end;
	     return;
	end;

function_2: proc;


	     cout_called = "0"b;
	     call gtss_abandon_CFP_;
	     gtss_ust.lswth.b7 = "0"b;
	     if gtss_ust.lcjid = "0"b then return;
		/** drun is executing, terminate it and read bye from absin **/
	     call gtss_abort_subsystem_ (
		mcp,
		"gtss_drl_t_cfio_",
		0);
	     return;
	     
	end;

function_3: proc;

	     call verify_arglist (9);
	     if code ^= 0 then return;
	     if drl_args.L_arglist > 0
	     then do;
		if gtss_ext_$com_reg.tsdmx.dit = 0
		then call init_dq;
		call gtss_aft_$find ("#D", fn, code);
		if code ^= 0
		then do;
		     call gtss_dq_$open_gen (error);
		     if error
		     then do;
			err_mess = "Couldn't find #D";
			gtss_ust.lcfst.start_term = 5;
			call common_error;
			return;
		     end;
		     call gtss_aft_$find ("#D", fn, code);
		end;
		n_words = 1;
		if gtss_disk.attributes_ptr (fn) ^= null ()
		then gtss_ext_$com_reg.tcdfr =
		     addr (gtss_disk.attributes_ptr (fn) -> gtss_file_attributes.descriptor) -> words;
		else do;
		     err_mess = "Attributes pointer was null.";
		     gtss_ust.lcfst.start_term = 2;
		     call common_error;
		     return;
		end;
		addrel (gseg, drl_args.L_arglist) -> nine_words (*) =
		     addr (gtss_ext_$com_reg) -> nine_words (*);
		addrel (gseg, drl_args.L_arglist) -> nine_words (9) =
		     gtss_ext_$com_reg.tcdfr;
	     end;
	     call decode_clock_value_ (
		clock_ (),
		month,
		day_of_month,
		year,
		time_of_day,
		day_of_week,
		time_zone);
	     ascii_date.yr = mod (year, 100);
	     ascii_date.mo = month;
	     ascii_date.dy = day_of_month;
	          /** Place bcd date in A register (yymmdd) **/
	     call gtss_ascii_bcd_ (addr (ascii_date), 6, addr (mc.regs.a));
		/** Place time of day in 64ths of mil in Q register **/
	     milsec = divide (time_of_day, 1000, 71);
	     milsec64ths = milsec * 64;
	     mc.regs.q = unspec (milsec64ths);
	     return;
	end;

function_4: proc;

	     call verify_arglist (5);
	     if code ^= 0 then return;
	     n_words = 5;
	     addr (gtss_ext_$com_reg.tsdid) -> words =
		addrel (gseg, drl_args.L_arglist) -> words;
	     return;
	end;

function_5: proc;

	     if gtss_ext_$com_reg.tsdmx.dit = 0
	     then call init_dq;
	     if gtss_ext_$com_reg.tsdgt.ust_loc ^= 1
	     then do;
		call gtss_dq_$open_exc (error);
		if error
		then do;
		     err_mess = "Couldn't open #D.";
		     gtss_ust.lcfst.start_term = 5;
		     call common_error;
		     return;
		end;
		gtss_ext_$com_reg.tsdgt.ust_loc = 1;
	     end;
	     return;
	end;

function_6: proc;

	     if gtss_ext_$com_reg.tsdgt.ust_loc ^= 0
	     then do;
		call gtss_dq_$open_gen (error);
		if error
		then do;
		     err_mess = "Couldn't open #D.";
		     gtss_ust.lcfst.start_term = 5;
		     call common_error;
		     return;
		end;
		gtss_ext_$com_reg.tsdgt.ust_loc = 0;
	     end;
		/** Perform the equivalent absentee function **/
	     call gtss_abs_$abs_equiv;
	     return;
	end;

function_7: proc;

	     call verify_arglist (1);
	     if code ^= 0 then return;
	     call gtss_bcd_ascii_ (addrel (gseg, drl_args.L_arglist),
		5, addr (ascii_lcjid));
	     call hcs_$initiate_count (gtss_ext_$homedir, "drun_restart."
		|| ascii_lcjid, "", bit_count, 1, rp, code);
	     if (rp ^= null ()) & (bit_count > 0)
	     then do;
		my_message = 1;
		process_id = rp -> event_info.sender;
		call hcs_$wakeup (process_id, rp -> event_info.channel_id,
		     my_message, code);
		if code ^= 0
		then do;
		     if code ^= error_table_$invalid_channel
		     then call convert_ipc_code_ (code);
		     call com_err_ (code, "gtss_drl_t_cfio_",
			"Sending DABT signal to ^a.", ascii_lcjid);
		     err_mess = "INVALID USE OF DRL T.CFIO";
		     gtss_ust.lcfst.start_term = 5;
		     call common_error;
		     return;
		end;
	     end;
	     if code ^= 0
	     then call com_err_ (code, "gtss_drl_t_cfio_",
		"drun_restart.^a is zero length segment.", ascii_lcjid);
	     if rp ^= null ()
	     then call hcs_$terminate_noname (rp, code);
	     return;
	end;
%page;
function_8: proc;
/** A dummy function intended for ETS (extended Time Sharing) 
    this routines simply returns the expected status
    The subfunction is the upper half of the word pointed to by L_arglist
    and the return status is the lower half.
    For subfunction 1 and 2 set the first bit of status on (bit 18 of word)
    and for subfunction 3 set status to zero. 
**/
	  arg_list_ptr = addrel(gseg, drl_args.L_arglist);
	  if (sub_function = 1) | (sub_function = 2)
	       then return_status = "100000000000000000"b;
	  else if sub_function = 3
	       then return_status = "0"b;
	  /* if not sub_function 1,2 or 3 do nothing */
	  return;
	  
dcl arg_list_ptr ptr;
dcl 1 function_8_arg_list aligned based(arg_list_ptr),
	  2 sub_function fixed bin(17) unaligned,
	  2 return_status bit(18) unaligned;
       end;
%page;
verify_arglist: proc (no_of_words);

	     code = 0;
	     if (drl_args.L_arglist + no_of_words)
	     > fixed (gtss_ust.lsize.limit, 18)
	     then do;
		code = 1;
		call com_err_$suppress_name (0, "gtss_drl_t_cfio_",
		     "drl_t_cfio arglist outside of memory at (^60)",
		     fixed (scu.ilc, 18));
		err_mess = "INVALID USE OF DRL T.CFIO";
		gtss_ust.lcfst.start_term = 5;
		call common_error;
		return;
	     end;
dcl no_of_words fixed bin (24) parm;
	end;


common_error: proc;


	     if err_mess ^= ""
	     then call gtss_abort_subsystem_ (
		mcp,
		"gtss_drl_t_cfio_",
		0,
		err_mess);
	     else call gtss_abort_subsystem_ (
		mcp,
		"gtss_drl_t_cfio_",
		0);
	     return;
	end;

init_dq:	proc;

	     gtss_ext_$com_reg.tsdmx.dit = 180;
	     gtss_ext_$com_reg.tsdjb = -1;
	     call hcs_$status_minf (gtss_ext_$homedir, "drun_#d_q",
		1, type, bit_count, code);
	     if code = error_table_$noentry
	     then do;
		call gtss_dq_$create (error);
		if error
		then do;
		     err_mess = "Couldn't create #D file.";
		     gtss_ust.lcfst.start_term = 5;
		     call common_error;
		     return;
		end;
	     end;
	     call gtss_dq_$open_gen (error);
	     if ^error then return;
	     err_mess = "Couldn't open #D file.";
	     gtss_ust.lcfst.start_term = 5;
	     call common_error;
	     return;
	end;

/** Variables for gtss_drl_t_cfio_ **/

dcl ascii_lcjid char (5);
dcl bit_count fixed bin (24);
dcl clock_ entry returns (fixed bin (71));
dcl code fixed bin (35) init (0);
dcl com_err_$suppress_name entry options (variable);
dcl convert_ipc_code_ entry (fixed bin (35));
dcl day_of_month fixed bin;
dcl day_of_week fixed bin;
dcl decode_clock_value_ entry (fixed bin (71), fixed bin, fixed bin, fixed bin, fixed bin (71), fixed bin, char (4) aligned);
dcl drl_args_ptr ptr;
dcl err_mess char (250) init ("");
dcl error bit (1) init ("0"b);
dcl error_table_$invalid_channel fixed bin (35) ext static;
dcl error_table_$noentry fixed bin (35) ext static;
dcl fn fixed bin (24);
dcl function (1:8) entry init (
	function_1,
	function_2,
	function_3,
	function_4,
	function_5,
	function_6,
	function_7,
	function_8);
dcl gcos_banner char (256) varying;
dcl gseg ptr;
dcl gtss_fail condition ext;
dcl hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35));
dcl hcs_$status_minf entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35));
dcl hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl hcs_$wakeup entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35));
dcl ioa_ entry options (variable);
dcl iox_$get_line entry;
dcl iox_$put_chars entry;
dcl milsec fixed bin (71);
dcl milsec64ths fixed bin (35);
dcl month fixed bin;
dcl my_message fixed bin (71);
dcl n_words fixed bin (24);
dcl nine_words (9) bit (36) based;
dcl process_id bit (36) aligned;
dcl rp ptr init (null());
dcl status fixed bin (24);
dcl time fixed bin (71);
dcl time_of_day fixed bin (71);
dcl timer_manager_$cpu_call entry (fixed bin (71), bit (2), entry);
dcl time_zone char (4) aligned;
dcl type fixed bin (2);
dcl words bit (36 * n_words) based;
dcl year fixed bin;

dcl 1 ascii_date aligned,
      2 yr pic "99" unaligned,
      2 mo pic "99" unaligned,
      2 dy pic "99" unaligned;

dcl 1 drl_args aligned based (drl_args_ptr),
      2 L_arglist fixed bin (18) unsigned unaligned,
      2 function_no fixed bin (18) unsigned unaligned;

dcl 1 event_info based (rp),
      2 channel_id fixed bin (71),
      2 message fixed bin (71),
      2 sender bit (36),
      2 origin,
        3 dev_signal bit (18) unaligned,
        3 ring bit (18) unaligned,
      2 channel_index fixed bin;

%include gtss_CFP_bits;

%include gtss_starCF_;

%include gtss_ext_;

%include mc;

%include gtss_ust_ext_;

%include gtss_entry_dcls;

%include gtss_db_names;

%include gtss_deferred_queue;

%include gtss_dfd_ext_;

%include gtss_device_cmds;

%include gtss_file_attributes;
     end;

