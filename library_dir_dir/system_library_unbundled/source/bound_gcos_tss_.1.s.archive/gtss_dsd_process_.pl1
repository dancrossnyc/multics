/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

gtss_dsd_process_: proc (up, bp, ml, rl, ec);

/**      Process the $*$ request line from CRUN/DRUN application.

	Author:   Al Dupuis  04/20/79
	Changed:	Al Dupuis  09/26/79 To display blank line to terminal when
				line contains only $*$mark.

**/


	rll = rl;
	if rll >= 4
	then do;
	     cp = index (string_3, "$*$");
	     rls = substr (string_3, cp + 3);		/* all of line after $*$ */
	     rls = substr (rls, 1, length (rls) - 1);	/* get rid of NL */
	     rls = ltrim (rls);			/* get rid of any leading blanks */
	     if length (rls) > 3 then cs = substr (rls, 1, 4); /* pick up keyword */
	     else cs = substr (rls, 1, 3);
	     save_cs = cs;
	     cs = translate (cs, "ABCDEFGHIJKLMNOPQRSTUVWXYZ", /* make it upper */
		"abcdefghijklmnopqrstuvwxyz");
	     type = gtss_dsd_lookup_ (cs);		/* find out which one */
	end;
	else type = 0;				/* line contains only $*$ */

	proper_rtn = rtn_table (type);		/* set up with the desired proc */
	call proper_rtn;				/* and call it */


/** 
**/
dsd_error: proc;

/** Unrecognizable $*$ request
**/

/* Apparently Gcos just treats it as data	*/
	     no_input_yet = "0"b;

	end					/* dsd_error */;

/**  **/

dsd_build: proc;

	     if ^build_mode then do;
		call gtss_write_starCFP_ (up, bp, rl, ec);
		if ec ^= 0 then call gtss_abort_subsystem_ (
		     null (),
		     "gtss_dsd_process_$dsd_build",
		     0,
		     "Couldn't write to *CFP: ^a",
		     string_3
		     );
		call gtss_abort_subsystem_ (
		     null (),
		     "gtss_dsd_process_$dsd_build",
		     0,
		     "<67>BUILD LEVEL SYNCHRONIZATION ERROR"
		     );
	     end;

	end /* dsd_build */ ;
/**
**/
dsd_brk:	proc;

/** Behaves as though the break key was pressed
**/

	     break_flag = "1"b;
	     signal condition (quit);

	end					/* dsd_brk */;

/** 
**/

dsd_copy:	proc;

	     if gtss_ust.lcjid ^= (36)"0"b then return;	/* DRUN in progress */

	     i = index (string_3, save_cs);
	     if i = 0 then				/* copy shouldn' have been called if copy not present */
		call gtss_abort_subsystem_ (
		null (),
		"gtss_dsd_process_$dsd_copy",
		0,
		"Copy not present in line, bug: ^a",
		string_3
		);
	     if (rll >= i + 8) then do;
		rls = substr (string_3, i + 4);	/* everything after copy */
		rls = ltrim (rls);			/* get rid of any blanks before second keyword */
		if length (rls) >= 4 then do;		/* long enough for "off" */
		     if (substr (rls, 1, 3) = "off") | (substr (rls, 1, 3) = "OFF")
		     then copy_on = "0"b;
		     else copy_on = "1"b;
		end;
		else copy_on = "1"b;		/* not long enough */
	     end;
	     else copy_on = "1"b;			/* string not long enough to contain off */

	end					/* dsd_copy */;
/** 
**/

dsd_dele:	proc;

	     i = index (string_3, save_cs);
	     if i = 0 then				/* dele shouldn' have been called if dele not present */
		call gtss_abort_subsystem_ (
		null (),
		"gtss_dsd_process_$dsd_dele",
		0,
		"Copy not present in line, bug: ^a",
		string_3
		);
	     if (rll >= i + 8) then do;
		rls = substr (string_3, i + 4);	/* everything after dele */
		rls = ltrim (rls);			/* get rid of any blanks before second keyword */
		if length (rls) >= 4 then do;		/* long enough for "off" */
		     if (substr (rls, 1, 3) = "off") | (substr (rls, 1, 3) = "OFF")
		     then dele_on = "0"b;
		     else dele_on = "1"b;
		end;
		else dele_on = "1"b;		/* not long enough */
	     end;
	     else dele_on = "1"b;			/* string not long enough to contain off */

	end					/* dsd_dele */;
/**  **/


dsd_exec:	proc;

	     if ^user_code then do;
		call gtss_write_starCFP_ (up, bp, rl, ec);
		if ec ^= 0 then call gtss_abort_subsystem_ (
		     null (),
		     "gtss_dsd_process_$dsd_exec",
		     0,
		     "Couldn't write to *CFP: ^a",
		     string_3
		     );
		call gtss_abort_subsystem_ (
		     null (),
		     "gtss_dsd_process_$dsd_exec",
		     0,
		     "<67>EXECUTION LEVEL SYNCHRONIZATION ERROR"
		     );
	     end;

	end					/* dsd_exec */;
/**  **/
dsd_file:	proc;

	     talk_on = "0"b;			/* go back to *CFP input */

	end					/* dsd_file */;
/**  **/


dsd_lbl:	proc;

	     call com_err_ (0, "gtss_dsd_process_$dsd_lbl",
		"Label line encountered ^a", string_3);

	end					/* dsd_lbl */;
/**  **/

dsd_mark:	proc;


						/* display the line to user as soon as encountered */
	     if rll < 9 then do;			/* line contains only $*$mark */
		rll = 10;
		string_1 (9) = " ";			/* fill line out with blank and CR */
		string_1 (10) = string_1 (8);
	     end;
	     sp2 = addr (string_1 (9));		/* overlay from position 9 */
/* If under drun processing ..init file, write to *CFP */
	     if gtss_ext_$process_type = 2
	     & gtss_ust.lcjid = "0"b
	     & gtss_ext_$drun_jid ^= " "
	     then call gtss_write_starCFP_ (up, sp2, rll - 8, code);
	     else call iox_$put_chars (iox_$user_output, sp2, rll - 8, code);
	     if code ^= 0 then
		call gtss_abort_subsystem_ (
		null (),
		"gtss_dsd_process_$dsd_mark",
		0,
		"Unable to write MARK info to terminal ^a",
		string_3);

	end					/* dsd_mark */;
/**  **/

dsd_nbuild: proc;

	     if build_mode then do;
		call gtss_write_starCFP_ (up, bp, rl, ec);
		if ec ^= 0 then call gtss_abort_subsystem_ (
		     null (),
		     "gtss_dsd_process_$dsd_nbuild",
		     0,
		     "Couldn't write to *CFP: ^a",
		     string_3
		     );
		call gtss_abort_subsystem_ (
		     null (),
		     "gtss_dsd_process_$dsd_nbuild",
		     0,
		     "<67>BUILD LEVEL SYNCHRONIZATION ERROR"
		     );
	     end;

	end /* dsd_nbuild */ ;
/**  **/


dsd_nexec: proc;

	     if user_code then do;
		call gtss_write_starCFP_ (up, bp, rl, ec);
		if ec ^= 0 then call gtss_abort_subsystem_ (
		     null (),
		     "gtss_dsd_process_$dsd_nexec",
		     0,
		     "Couldn't write to *CFP: ^a",
		     string_3
		     );
		call gtss_abort_subsystem_ (
		     null (),
		     "gtss_dsd_process_$dsd_nexec",
		     0,
		     "<67>EXECUTION LEVEL SYNCHRONIZATION ERROR"
		     );
	     end;

	end					/* dsd_nexec */;
/**  **/

dsd_nsys:	proc;

		/** IGNORED IN GCOS 4J **/

	end					/* dsd_nsys */;
/**  **/

dsd_null:	proc;

	     rll, rl = 2;				/* send null line (CR) to caller */
	     string_3 = CR || NL;
	     if ((^dele_on) & (^gtss_starCF_$FILE.cf.exclude_on))
	     then call gtss_write_starCFP_ (up, bp, rl, ec); /* and send it to *CFP */
	     if ec ^= 0 then call gtss_abort_subsystem_ (
		null (),
		"gtss_dsd_process_$dsd_nbuild",
		0,
		"Couldn't write to *CFP: ^a",
		string_3
		);
	     no_input_yet = "0"b;

	end					/* dsd_null */;
/**  **/

dsd_quit:	proc;


	     if gtss_ust.lcjid ^= (36)"0"b then do;	/* DRUN in progress */
		cout_called = "0"b;
		call gtss_abandon_CFP_;
		lswt2.b6 = "0"b;
		no_input_yet = "0"b;
		return;
	     end;

						/* determine if =text option being used */
	     i = index (string_3, save_cs || "=");
	     if i ^= 0 then do;			/* yes, put text prompt in buffer */
		string_3 = substr (string_3, i + 5);
		rll = rll - (i + 4);
		bl = rll;
		call iox_$put_chars (iox_$user_output, bp, bl, ec); /* display msg to user */
		if ec ^= 0 then call gtss_abort_subsystem_ (
		     null (),
		     "gtss_dsd_process_$dsd_quit",
		     0,
		     "Unable to write QUIT info to terminal ^a",
		     string_3);
	     end;

	     if (^dele_on) then do;			/* if there was a prompt */
		call gtss_read_starCFP_$last_os (up, bp, ml, rl, ec); /* get it */
		if ec ^= 0 then call gtss_abort_subsystem_ (
		     null (),
		     "gtss_dsd_process_$dsd_dsd_quit",
		     0,
		     "Can't read last output sector on *CFP"
		     );
		call iox_$put_chars (iox_$user_output, bp, rl, ec); /* and display it to user */
		if ec ^= 0 then call gtss_abort_subsystem_ (
		     null (),
		     "gtss_dsd_process_$dsd_quit",
		     0,
		     "Unable to write last prompt to terminal ^a",
		     string_3);
	     end;
	     cout_called = "0"b;
	     call gtss_abandon_CFP_;			/* quitting command file processing */
	     lswt2.b6 = "0"b;			/* DD17C, page 3-33.2 */
	     call iox_$get_line (iox_$user_input, bp, ml, rl, ec); /* get his response */
	     no_input_yet = "0"b;			/* and let gtss_CFP_input_ know we have our input */

	end					/* dsd_quit */;
/**  **/

dsd_rem:	proc;

	     call com_err_ (0, "gtss_dsd_process_$dsd_rem",
		"Remark line encountered ^a", string_3);

	end					/* dsd_rem */;
/**  **/

dsd_system: proc;

		/** IGNORED IN GCOS 4J **/

	end					/* dsd_system */;
/**  **/


dsd_talk: dsd_user: proc;

	     if gtss_ust.lcjid ^= (36)"0"b then return;	/* DRUN in progress */

	     if cs = "TALK" then talk_on = "1"b;
						/* determine if user is using =text option */
	     i = index (string_3, save_cs || "=");
	     if i ^= 0 then do;			/* yes, put text prompt in buffer */
		string_3 = substr (string_3, i + 5);
		rll = rll - (i + 4);
	     end;
	     else do;				/* no, it will come from *CFP */
		if ^dele_on then do;		/* if dele_on there is no output file */
						/* get the prompt from *CFP's last output sector */
		     call gtss_read_starCFP_$last_os (up, bp, ml, rl, ec);
		     if ec ^= 0 then call gtss_abort_subsystem_ (
			null (),
			"gtss_dsd_process_$dsd_talk/dsd_user",
			0,
			"Can't read last output sector on *CFP"
			);
		     else rll = rl;
		end;
	     end;
						/* write prompt to terminal */
	     if ((i ^= 0) | (^dele_on)) then do;	/* there is a prompt */
		bl = rll;
		call iox_$put_chars (iox_$user_output, bp, bl, ec);
		if ec ^= 0 then
		     call gtss_abort_subsystem_ (
		     null (),
		     "gtss_dsd_process_$dsd_talk/dsd_user",
		     0,
		     "Can't display prompt to user"
		     );
	     end;
	     else;				/* there was no prompt */
	     if ^talk_on then do;
		talk_on = "1"b;			/* user request, so fudge talk_on for one input */
		call gtss_CFP_input_ (up, bp, ml, rl, ec); /* get line from terminal */
		talk_on = "0"b;			/* turn off fudged mode */
		no_input_yet = "0"b;		/* let gtss_CFP_input_ know we have our line */
	     end;
	     else;				/* let gtss_CFP_input_ get line normally */
	end					/* dsd_user dsd_talk */;
/*  * */


dsd_trap:	proc;


	     i = index (string_3, save_cs);
	     if i = 0 then				/* trap shouldn' have been called if trap not present */
		call gtss_abort_subsystem_ (
		null (),
		"gtss_dsd_process_$dsd_trap",
		0,
		"Trap not present in line, bug: ^a",
		string_3
		);
	     if (rll >= i + 8) then do;
		rls = substr (string_3, i + 4);	/* everything after trap */
		rls = ltrim (rls);			/* get rid of any blanks before second keyword */
		if length (rls) >= 4 then do;		/* long enough for "off" */
		     if (substr (rls, 1, 3) = "off") | (substr (rls, 1, 3) = "OFF")
		     then trap_off = "1"b;
		     else trap_off = "0"b;
		end;
		else trap_off = "0"b;		/* not long enough */
	     end;
	     else trap_off = "0"b;			/* string not long enough to contain off */

	end					/* dsd_trap */;


/**        gtss_dsd_process_ local dcl's
**/
dcl  up                       ptr parm /* (NOT USED. Needed for iox_ compatibility). */;
dcl  bp                       ptr parm /* (input) Callers buffer. */;
dcl  ml                       fixed bin(21)parm /* (input) Buffer length limit. */;
dcl  rl                       fixed bin(21)parm /* (output) Number characters returned. */;
dcl  ec                       fixed bin(35)parm /* (output) Multics error ec. */;
dcl  CR                       char(1)static int options(constant) init("");
dcl NL			char(1) static int options(constant) init ("
");
dcl  rls char (252) varying;
dcl string_1 (rll) char (1) based (bp);
dcl string_2 (rll - 9) char (1) based (sp2);
dcl  string_3 char (rll) based (bp);
dcl sp2 ptr init (null());
dcl (cs, save_cs) char (8) varying;
dcl (rll, cp, type, i) fixed bin (24);
dcl bl fixed bin (21);
dcl code fixed bin (35) init (0);
dcl (ltrim, null, substr, index, addr, length, translate) builtin;
dcl quit condition external;
dcl iox_$get_line entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl iox_$user_input ptr ext;
dcl iox_$user_output ptr ext;
dcl proper_rtn entry int variable;
dcl rtn_table (0:18) entry init (
	dsd_error,
	dsd_brk,
	dsd_build,
	dsd_copy,
	dsd_dele,
	dsd_exec,
	dsd_file,
	dsd_lbl,
	dsd_mark,
	dsd_nbuild,
	dsd_nexec,
	dsd_nsys,
	dsd_null,
	dsd_quit,
	dsd_rem,
	dsd_system,
	dsd_talk,
	dsd_trap,
	dsd_user);


%include gtss_CFP_bits;
/** 
**/
%include gtss_starCF_;
/** 
**/
%include gtss_ust_ext_;
/** 
**/
%include gtss_ext_;
/** 
**/
%include gtss_entry_dcls;
finish:	;
     end						/* gtss_dsd_process_ */;
