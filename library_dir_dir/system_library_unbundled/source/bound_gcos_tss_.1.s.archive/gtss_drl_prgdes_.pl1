/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */
gtss_drl_prgdes_: proc (mcpp, increment);

/* *	gtss move program descriptor information to caller.

	Authors:	Robert J. Grimes	Created
		Albert N. Kepner	  1978
		Robert M. May
		David B. Ward
   * */
dcl  mcpp ptr parm;
dcl  increment fixed bin parm;
	mcp = mcpp;

/* *

   DRL PRGDES, PASS PROGRAM DESCRIPTOR TO SUBSYSTEM (octal 65)


   8_________1_6_____________________

   DRL      PRGDES
   ASCII    1,ssname
   ZERO     L(buf),0

   (See TSS SYSTEM PROGRAMMER'S
   REFERENCE MANUAL DD17C, Rev. 0, July 1976
   Page 3-19)

*/

	increment = 2 ;				/* Two arguments */
	scup = addr (mc.scu);
	gseg = gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_);
	arg_list_ptr = addrel (gseg, fixed (scu.ilc)+1);	/* get addres of arg_list */

/* *	Obtain pointer to caller's buffer.	* */
	if (fixed (L_buf, 18)+8) > fixed (gtss_ust.lsize.limit, 18) then do;
	     call gtss_abort_subsystem_ (mcp,
		"gtss_drl_prgdes_",
		4,
		"DRL_PRGDES: Buffer outside memory at (^6o)",
		fixed (scu.ilc, 18));
	     return;
	end;
	buf_ptr = addrel (gseg, L_buf);

	addr (A_reg) -> b36 = "0"b;			/* A register zero as default. */

/* *	Look up callers subsystem name.	* */
	sub_system = ssname;			/* Local value. */
	do i = 1 to hbound (gtss_prgdes_ext_$prgdes, 1);
	     if sub_system = ss_name (i) then do;	/* Found. */
		buf = first_9_words (i);

/* *	Examine name of first primitive.	* */

/* Locate command language for this subsystem */
		cmd_list_len = gtss_prgdes_ext_$prgdes (i).cmd_lang_len;
		cmd_list_ptr = addr (gtss_prgdes_ext_$primitives
		     (gtss_prgdes_ext_$prgdes (i).cmd_lang_offset));
		cmd_prim_list_ptr = addrel (cmd_list_ptr, 2*cmd_list_len);

/* get 1st primitive */
		primitive = gtss_prgdes_ext_$primitives (cmd_list_len+1);
		if primitive_overlay.prim_op = 1 then	/* CALLP primitive. */
		     A_reg =
		     gtss_prgdes_ext_$prgdes (callp_desc).ss_name;
		return;
	     end;
	end;

/* *	Not found.	* */
	buf_9_zeroes = 0;
	return;

/* *	Variables for gtss_drl_prgdes_:
   IDENTIFIER		ATTRIBUTES	* */
dcl  addrel builtin;
dcl  arg_list_ptr ptr init(null());
dcl  A_reg char (4)aligned based (addr (mc.regs.a));
dcl  b36 bit (36)aligned based;
dcl  buf char (36)aligned based (buf_ptr);
dcl  buf_9_zeroes (9)fixed bin (24)aligned based (buf_ptr);
dcl  buf_ptr ptr init(null());
dcl  code fixed bin (35);
dcl  gseg ptr init(null());
dcl  i fixed bin (24);
dcl  status fixed bin (24);
dcl  sub_system char (4)aligned;

dcl 1 arg_list aligned based (arg_list_ptr)
     , 2 ssname char (4)
     , 2 L_buf bit (18)unal
     , 2 zero fixed bin (17)unal
     ;

%include gtss_ext_;

%include mc;

%include gtss_primitives_;

%include gtss_prgdes_;

%include gtss_entry_dcls;

%include gtss_ust_ext_;
     end						/* gtss_drl_prgdes_ */;
