/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

gtss_drl_task_: proc (mcpp, increment);

/**	gtss spawn a special batch activity.

	Author:	Mel Wilson			06/01/79
 **/
dcl  mcpp                     ptr parm;
dcl  increment                fixed bin parm;
	mcp = mcpp;

/**

   DRL TASK, SPAWN A SPECIAL BATCH ACTIVITY (octal 63)


   8_________1_6_____________________

   DRL      TASK
   ZERO     L_SSA_buf,L_filelist	offsets of ssa buffer and file list

    (See TSS SYSTEM PROGRAMMER'S
         REFERENCE MANUAL DD17C, Rev. 0, July 1976
         Page 3-27.1)

*/

	scup = addr (mc.scu);
	increment = 1;
	gseg = gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_);
	arg_list_ptr = addrel (gseg, fixed (scu.ilc, 18) + 1);

	if fixed (scu.ilc, 18) > fixed (gtss_ust.lsize.limit) -3 then
	     call gtss_abort_subsystem_ (mcp, "gtss_drl_task_", 0,
	     "Calling sequence outside memory at ^o.", fixed (scu.ilc, 18));

	if L_SSA_buf > fixed (gtss_ust.lsize.limit) - 965 then
	     call gtss_abort_subsystem_ (mcp, "gtss_drl_task_", 0,
	     "SSA buffer outside memory (at ^o).", L_SSA_buf);
	SSA_buf_ptr = addrel (gseg, L_SSA_buf);

	if L_filelist >= fixed (gtss_ust.lsize.limit) then
	     call gtss_abort_subsystem_ (mcp, "gtss_drl_task_", 0,
	     "File list outside memory (at ^o).", L_filelist);
	filelist_ptr = addrel (gseg, L_filelist);

	if L_filelist >= fixed (gtss_ust.lsize.limit) - filelist_entries * 3 - 1 then
	     call gtss_abort_subsystem_ (mcp, "gtss_drl_task_", 0,
	     "File list extends outside memory (^o+^o).", L_filelist, filelist_entries * 3);



	call gtss_bcd_ascii_$lc (addr (snumb), 5, addr (asc_snumb));
	call gtss_bcd_ascii_$lc (addr (actname), 6, addr (asc_actname));
	call gtss_bcd_ascii_$lc (addr (ident_text), 60, addr (asc_ident));
	call gtss_bcd_ascii_$lc (addr (comment_text), 60, addr (asc_comment));

	call ioa_ ("SSA_buf_ptr -> ^p^/File list ptr -> ^p", SSA_buf_ptr, filelist_ptr);
	call ioa_ ("Urgency ^i (^o)^/Snumb ^a^/Activity name ^a", urgc, urgc, asc_snumb, asc_actname);
	call ioa_ ("IO time limit ^f^/Job time limit ^f^/Job io time limit ^f",
	     float (io_limit)/ (64000*3600), float (job_time)/ (64000*3600), float (job_io_time)/ (64000*3600));
	call ioa_ ("PSW ^w^/Geload limit ^w", switch, geload_lim);
	call ioa_ ("$ ident   ^a^/$ comment ^a", asc_ident, asc_comment);
	call ioa_ ("^/file list .. ^i entries", filelist_entries);
	do i = 1 to filelist_entries;
	     call gtss_bcd_ascii_ (addr (filecode (i)), 2, addr (asc_filecode));
	     call ioa_ ("^a ^a", filename (i), asc_filecode);
	end;

	call hcs_$make_seg (get_pdir_ (), "gtss_task", "", fixed ("01010"b), tx_ptr, code);
	if tx_ptr = null () then
	     call gtss_abort_subsystem_ (mcp, "gtss_drl_task_", 0,
	     "Can't create temporary jcl segment.");
	call hcs_$truncate_seg (tx_ptr, 0, code);
	if code ^= 0 then
	     call gtss_abort_subsystem_ (mcp, "gtss_drl_task_", 0,
	     "Can't truncate jcl segment ^a>^a .", rtrim (get_pdir_ ()), "gtss_task");

	call append_jcl (dollar || snumbc || asc_snumb || newline
	     || dollar || identc || asc_ident || newline
	     || dollar || programc || asc_actname || newline);

	if SSA_buf.switch ^= (36) "0"b then do;
	     set_sws = "";
	     do swx = 0 to 35;
		if substr (switch, swx+1, 1) then
		     set_sws = set_sws || "," || char (swx);
	     end;
	     call append_jcl (dollar || setc || substr (set_sws, 2) || newline);
	end;

	do i = 1 to filelist_entries;
	     call gtss_bcd_ascii_$lc (addr (filecode (i)), 2, addr (asc_filecode));
	     if asc_filecode = "*j" then goto next_file;
	     call gtss_aft_$find (filename (i), fn, code);
	     if code ^= 0 then do;
		if asc_filecode = "l*" | asc_filecode = "*l" then goto next_file;
		call gtss_abort_subsystem_ (mcp, "gtss_drl_task_", 0,
		     "Can't locate file named ^a .", filename (i));
	     end;


	     call adjust_bit_count_ ((gtss_disk (fn).dir_name), (gtss_disk (fn).entry_name), "0"b, bit_count, code);

	     call append_jcl (dollar || prmflc || asc_filecode || ","
		|| asc_prms (fixed (gtss_disk.write (fn))) || "," || asc_mode (fixed (gtss_disk.pat_body.random (fn))) || ","
		|| rtrim (gtss_disk (fn).dir_name) || ">" || newline
		|| dollar || etcc || rtrim (gtss_disk (fn).entry_name) || newline);
next_file:
	end;

	call append_jcl (dollar || endjobc || newline);
	call hcs_$set_bc_seg (tx_ptr, (jx - 1) * 9, code);
	if code ^= 0 then
	     call gtss_abort_subsystem_ (mcp, "gtss_drl_task_", 0,
	     "Can't set bit count on ^a .", rtrim (get_pdir_ ()) || ">" || "gtss_task");

/* save bar mode stack pointer before calling another bar mode program i.e. gcos */
	sb = baseptr (baseno (addr (bar_mode_stack_ptr)));
	bar_mode_stack_ptr = stack_header.bar_mode_sp;


	cmd_stg = "gcos$task [pd]>gtss_task -aci -ls -sd [pd]";
	call cu_$cp (addr (cmd_stg), length (rtrim (cmd_stg)), code);

/* restore bar mode stack pointer after gcos return */
	stack_header.bar_mode_sp = bar_mode_stack_ptr;

	if code ^= 0 then
	     call gtss_abort_subsystem_ (mcp, "gtss_drl_task_", 0,
	     "Can't issue gcos command ^a .", cmd_stg);

	mc.a = "0"b; /* set good status */

	return;

append_jcl: proc (newstg);
dcl newstg char(*);

	     substr (jcl_stg, jx, length (newstg)) = newstg;
	     jx = jx + length (newstg);
	     return;


	end append_jcl;

dcl  SSA_buf_ptr ptr;
dcl 1 SSA_buf based (SSA_buf_ptr),
   2 fill0 (0:14) bit (36),
   2 urgc fixed bin,
   2 fill16 (16:55) bit (36),
   2 snumb bit (36),
   2 fill57 bit (36),
   2 actname bit (36),
   2 fill59 (59:624) bit (36),
   2 io_limit fixed bin (35),
   2 fill626 (626:892) bit (36),
   2 job_time fixed bin (35),
   2 fill894 bit(36),
   2 job_io_time fixed bin (35),
   2 fill896 (896:928) bit (36),
   2 switch bit (36),
   2 fill930 (930:938) bit (36),
   2 geload_lim fixed bin (35),
   2 ident_text (10) bit(36),
   2  comment_text (10) bit (36),
   2  fill960 (960:964) bit (36);


dcl filelist_ptr ptr;
dcl 1 filelist based (filelist_ptr) aligned,
   2 filelist_entries fixed bin (35) unal,
   2 filelist_entry (filelist_entries) unal,
      3 filename char (8) unal,
      3 fill1 bit(24) unal,
      3 filecode bit (12) unal;


dcl  arg_list_ptr ptr;
dcl 1 arg_list based (arg_list_ptr) aligned,
   2 L_SSA_buf fixed bin (18) unsigned unal,
   2 L_filelist fixed bin (18) unsigned unal;


dcl  asc_snumb char (5);
dcl  asc_actname char (6);
dcl  asc_ident char (60);
dcl  asc_comment char (60);
dcl  asc_filecode char (2);

dcl  bar_mode_stack_ptr ptr auto;
dcl  bit_count fixed bin (35);

dcl  cmd_stg char (100);
dcl  set_sws char (57) varying;
dcl (newline init (substr (collate(), 11, 1)) char (1),
     dollar init ("$" || substr (collate (), 10, 1)) char (2),
    (snumbc init ("snumb"),
     identc init ("ident"),
     setc init ("set"),
     limitc init ("limit"),
     prmflc init ("prmfl"),
     etcc init ("etc"),
     programc init ("program"),
     endjobc init ("endjob")) char (8)
     );
dcl  asc_prms (0:1) char (1) init ("r", "w") int static options (constant);
dcl  asc_mode (0:1) char (1) init ("s", "r") int static options (constant);

dcl  gseg ptr;
dcl  tx_ptr ptr;
dcl  jcl_stg char (100000) based (tx_ptr);
dcl  jx fixed bin init (1);
dcl  i fixed bin;
dcl  swx pic "99";
dcl  fn fixed bin (24);
dcl  code fixed bin (35);

dcl  adjust_bit_count_ entry (char (168) aligned, char (32) aligned, bit aligned, fixed bin (35), fixed bin (35));
dcl  cu_$cp entry (ptr, fixed bin, fixed bin (35));
dcl  get_pdir_ entry returns (char (168));
dcl  hcs_$make_seg entry (char(*), char(*), char(*), fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$set_bc_seg entry (ptr, fixed bin (24), fixed bin (35));
dcl  hcs_$truncate_seg entry (ptr, fixed bin (18), fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  ioa_$rs entry options (variable);

dcl (addr, addrel, baseno, baseptr, char, collate, fixed, float, length, null, rtrim, substr) builtin;

%include gtss_dfd_ext_;

%include gtss_entry_dcls;

%include gtss_ext_;

%include gtss_io_status_words;

%include gtss_ust_ext_;

%include mc;
%include stack_header;
     end gtss_drl_task_;
