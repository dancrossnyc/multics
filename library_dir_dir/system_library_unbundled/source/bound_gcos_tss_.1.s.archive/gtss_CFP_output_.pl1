/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

gtss_CFP_output_: proc (up, bp, rl, ec);

/**      This program is called to do all output when doing
         CRUN/DRUN processing. Depending on the modes in
         effect as a result of processing $*$ requests, the
         appropriate output actions are performed.

         Author: Al Dupuis 05/05/79.
  Changed:  Ron Barstad  83-03-31  Fixed size of substr on debub output to rl, was rl-1
  Changed:  Ron Barstad  84-11-29  Start off by setting error code to zero.

	ACTION		MEANING

	action_1		terminal write
	action_2		*CFP write
	action_3		terminal write, *CFP write
	action_4		no write
	action_5		terminal write, terminal write



	DELE_ON	COPY_ON	TALK_ON		ACTION

	   0	   0	   0		action_2
	   0	   0	   1		action_3
	   0	   1	   0		action_3
	   0	   1	   1		action_3
	   1	   0	   0		action_4
	   1	   0	   1		action_1
	   1	   1	   0		action_1
	   1	   1	   1		action_5


**/
/**  **/

	ec = 0;
	rtn_bits = "0"b || dele_on || copy_on || talk_on;
	proper_rtn = rtn_table (fixed (rtn_bits, 4));
	call proper_rtn;
	if db_CFP_input then call ioa_ (
	     "output sector no was (^d)"
	     || "    no of chars written was (^d)"
	     || "^/chars written were (^a)",
	     gtss_ust.lcfio.sect_out - 1,
	     rl,
	     substr (RECORD.chars, 1, rl));


/** 
**/
action_1:	proc;

	     call iox_$put_chars (iox_$user_output, bp, rl, ec);
	     if ec ^= 0 then call bug_complaint;
	end					/* action_1 */;
/** 
**/
action_2:	proc;

	     call gtss_write_starCFP_ (up, bp, rl, ec);
	     if ec ^= 0 then call bug_complaint;
	end					/* action_2 */;
/** 
**/
action_3:	proc;

	     call iox_$put_chars (iox_$user_output, bp, rl, ec);
	     if ec = 0 then
		call gtss_write_starCFP_ (up, bp, rl, code);
	     if code ^= 0 | ec ^= 0 then call bug_complaint;

	end					/* action_3 */;
/**  **/

action_4:	proc;

	end					/* action_4 (very quick proc) */;
/**  **/
action_5:	proc;

	     call iox_$put_chars (iox_$user_output, bp, rl, ec);
	     if ec = 0 then
		call iox_$put_chars (iox_$user_output, bp, rl, code);
	     if code ^= 0 | ec ^= 0 then call bug_complaint;

	end					/* action_5 */;
/**  **/

bug_complaint: proc;


	     gtss_ust.lcfst.start_term = 2;
	     call gtss_abort_subsystem_ (
		gtss_find_cond_frame_ ("derail"),
		"gtss_CFP_output_",
		0,
		"Encountered a bad i/o to terminal or *CFP");
	     return;
	end					/* bug_complaint */;
/**  **/


/*	Variables for gtss_CFP_output_
*/

dcl ioa_ entry options (variable);
dcl iox_$get_line entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl iox_$user_input ptr ext;
dcl iox_$user_output ptr ext;
dcl  up                       ptr parm /* (NOT USED. Needed for iox_ compatibility). */;
dcl  bp                       ptr parm /* (input) Callers buffer. */;
dcl  rl                       fixed bin(21)parm /* (output) Number characters returned. */;
dcl  ec                       fixed bin(35)parm /* (output) Multics error code. */;
dcl code fixed bin (35) init (0);
dcl (null, fixed) builtin;
dcl proper_rtn entry int variable;
dcl rtn_table (0:7) entry init (
    action_2,
    action_3,
    action_3,
    action_3,
    action_4,
    action_1,
    action_1,
    action_5);
/**  */

%include gtss_entry_dcls;
/**  **/
%include gtss_CFP_bits;
/**  **/
%include gtss_starCF_;
/**  **/
%include gtss_ext_;
/**  **/
%include gtss_ust_ext_;

%include gtss_db_names;
     end						/* gtss_CFP_output_ */;
