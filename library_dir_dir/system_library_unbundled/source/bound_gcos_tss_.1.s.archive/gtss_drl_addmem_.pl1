/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */

gtss_drl_addmem_: proc (mcpp, increment);

/**	gtss add memory.

   Authors: Robert J. Grimes	Created
   -	  Albert N. Kepner	  1978
   -	  Robert M. May
   -	  David B. Ward
   Change:  Dave Ward	02/24/79 $db switch.
   Change:  Ron Barstad  02/07/83  Remove changing gtss_spa.lhole.total--the
                                   real drl does not do this. Will allow B
                                   program to run.
   **/
dcl  mcpp                     ptr parm;
dcl  increment                fixed bin parm;
	mcp = mcpp;

/**

   DRL ADDMEM, ADD MEMORY (octal 16)


   8_________1_6_____________________

   DRL      ADDMEM
   C(A)     return location,0
   C(Q)     0,number words high

   (See TSS SYSTEM PROGRAMMER'S
   REFERENCE MANUAL DD17C, Rev. 0, July 1976
   Page 3-08)

*/

	increment = 0 ;				/* Zero arguments */
	scup = addr (mc.scu);
	gseg = gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_);

	if (AU > gtss_ust.lsize.limit) /* remove? | (fixed (AU, 18) < 100) | (AL ^= "0"b) */ then do;
	     if db_drl_addmem then
		call ioa_ (
		"gtss_drl_addmem_"
		, "Improper return address: AU=^6o AL=^6o lisize.limit=^6o"
		, AU
		, AL
		, gtss_ust.lsize.limit
		);

/* Improper return address. */
	     call gtss_abort_subsystem_ (
		mcp
		, "gtss_drl_addmem_"
		, 4
		, gtss_pnterr.err4
		, fixed (scu.ilc, 18)
		);
	     return;
	end;

	nl = divide (fixed (QL, 18, 0), 1024, 24)*1024;	/* Number of additional memory words requested. */
	ZERO_l = nl*36;				/* Number of bits to zero. */
	ml = fixed (gtss_ust.lsize.limit, 18, 0) + nl;	/* set up the new limit */

	if ml > gtss_install_values_$memory_limit then do;

/* Exceeds installation limit. */
	     call gtss_abort_subsystem_ (
		mcp
		, "gtss_drl_addmem_"
		, 0
		, gtss_pnterr.err100
		, fixed (scu.ilc, 18)
		);
	     return;
	end;
	addrel (gseg, gtss_ust.lsize.limit) -> ZERO = "0"b;
	gtss_ust.lswap.size, gtss_ust.lsize.limit = ml_r18; /* Save new limit in ust */
/*	gtss_spa.lhole.total = ml;	NO! */		/* Save new limit in slave prefix */

	gtss_ust.lsize.bar = divide (ml+511, 512, 17, 0);
	call gtss_set_slave_$load_bar (fixed (gtss_ust.lsize.bar, 18, 0)); /* Reset BAR register. */

	gtss_spa.losti.ilc = AU;			/* set up the return address in the slave area */
	gtss_spa.losti.ir = "0"b;			/* zero the indicators */

	increment = fixed (AU, 18, 0) - fixed (scu.ilc, 18, 0) -1; /* Restart execution of user's code at return location. */

	if db_drl_addmem then
	     call ioa_ (
	     "gtss_drl_addmem_:  words added ^i, limit ^i, A-reg ^w, Q-reg ^w."
	     , nl
	     , ml
	     , Afix
	     , Qfix);
	return;


/**  Variables for gtss_drl_addmem_:
     IDENTIFIER		ATTRIBUTES	**/
dcl  Afix                     fixed bin (35)aligned based (addr (A_reg));
dcl  Qfix                     fixed bin (35)aligned based (addr (Q_reg));
dcl  ioa_                     entry options (variable);
dcl  ZERO                     bit (ZERO_l)based;
dcl  ZERO_l                   fixed bin (24);
dcl  nl                       fixed bin (35);
dcl  ml                       fixed bin (35);
dcl  gseg                     ptr init(null());
dcl  status                   fixed bin (35);

dcl 1 ml_overlay aligned based (addr (ml)),
    2 ml_l18 bit (18)unal,
    2 ml_r18 bit (18)unal;

dcl 1 Q_reg aligned based (addr (mc.regs.q)),
    2 QU bit (18)unal,
    2 QL bit (18)unal;

dcl 1 A_reg aligned based (addr (mc.regs.a)),
    2 AU bit (18)unal,
    2 AL bit (18)unal;

%include gtss_spa;

%include gtss_ust_ext_;

%include gtss_pnterr;

%include gtss_ext_;

%include mc;

%include gtss_entry_dcls;

%include gtss_install_values_;

%include gtss_db_names;
     end						/* gtss_drl_addmem_ */;
