/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */
gtss_drl_kin_: proc (mcpp, increment);

/* gtss terminal input.

   DRL KIN, KEYBOARD INPUT LAST LINE (octal 4)

   8_________1_6_____________________

   DRL      KIN
   ZERO     L(dat),L(count)
   ZERO     L(status)

   This derail retrieves the last line of input.  Normally this
   sequence would follow immediately the  KOUTN  sequence;  however,
   this  is not necessary.  KIN may be repeated to retrieve the same
   line of input as many times  as  desired.   The  last  line  will
   remain  in  the  buffer  until  some  output  or additional input
   destroys it.  Dat is the location at which the  string  of  input
   characters  is  to be stored.  Count is a word in which the count
   of characters moved is in the lower part of  the  word.   A  zero
   character  count  is  returned  if  there is no data in the input
   buffer.  The parameter L(status) is not used by current  software
   release.  The purpose of the status word is to receive the status
   of  the  line when it is passed back to the subsystem for certain
   conditions, such as  break,  disconnect,  etc.   In  the  present
   implementation  the  handling  of these conditions is done by the
   Executive, and the status word in the subsystem is  not  altered.

   Authors: Robert J. Grimes	Created
   -	  Albert N. Kepner	  1978
   -	  Robert M. May
   -	  David B. Ward
   Changed: Dave Ward	08/19/81 Replace \ as final character with CR.
                                       add %page, dcl percission, format changes
*/
dcl  increment                fixed bin parm;
dcl  mcpp                     ptr parm;
	mcp = mcpp;
	increment = 2 ;				/* two arguments */
	scup = addr (mc.scu);
	gseg = gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_);
	arg_ptr = addrel (gseg, fixed (scu.ilc)+1);	/* get addres of arglist */
	waste_count, ntc = count_of_characters_transmitted; /* Number of characters available in terminal buffer. */
	if L_count = 0 then count_ptr = addr (waste_count); /* Caller's has not supplied count word. */
	else do;					/* Caller has provided count word. */
	     if L_count > fixed (gtss_ust.lsize.limit, 18) then do;
		call gtss_abort_subsystem_ (mcp,
		     "gtss_drl_kin_",
		     4,
		     gtss_pnterr.err4,
		     fixed (scu.ilc, 18));
		return;
	     end;
	     count_ptr = addrel (gseg, L_count);
	end;
	if ntc<1 then do;				/* No character to provide caller. */
	     if db_drl_kin then
		call gtss_dump_kin_ ("");
	     count_word = 0;
	     return;
	end;
						/* check for addres violations */
	if L_buffer > fixed (gtss_ust.lsize.limit, 18) then do;
	     call gtss_abort_subsystem_ (mcp,
		"gtss_drl_kin_",
		4,
		gtss_pnterr.err4,
		fixed (scu.ilc, 18));
	     return;
	end;
	buffer_ptr = addrel (gseg, L_buffer);
	count_word = ntc;

/*	Check that buffer fits within caller's memory. */
	if (L_buffer + divide ((ntc+3), 4, 17, 0)-1) > fixed (gtss_ust.lsize.limit, 18) then do;
	     call gtss_abort_subsystem_ (mcp,
		"gtss_drl_kin_",
		4,
		gtss_pnterr.err4,
		fixed (scu.ilc, 18));
	     return;
	end;
						/* move the data */
	buffer_ptr -> MS = addr (characters_transmitted) -> MS;
	if ntc > 0 then				/* Examine final character. */
	     if substr (buffer_ptr -> MS, ntc, 1) = "\" then
		substr (buffer_ptr -> MS, ntc, 1) = CR; /* Replace \ with carriage return. */
	if db_drl_kin then
	     call gtss_dump_kin_ (buffer_ptr -> MS);
	return;
%page;
/*   Variables for gtss_drl_kin_:		 */
/*   IDENTIFIER		ATTRIBUTES	 */
dcl  addr                     builtin;
dcl  addrel                   builtin;
dcl  arg_ptr                  ptr init(null());
dcl  buffer_ptr               ptr init(null());
dcl  count_ptr                ptr init(null());
dcl  count_word               fixed bin(24) based (count_ptr);
dcl  fixed                    builtin;
dcl  gseg                     ptr init(null());
dcl  gtss_dump_kin_           entry(aligned char(*));
dcl  i                        fixed bin;
dcl  MS                       aligned char(ntc)based;
dcl  ntc                      fixed bin;
dcl  waste_count              fixed bin(18)unsigned unal;

dcl  CR                       char(1)static int options(constant)init("");

dcl 1 arglist	aligned based(arg_ptr)
,     2 L_buffer	fixed bin(18)unsigned unal
,     2 L_count	fixed bin(18)unsigned unal
,     2 L_status	fixed bin(18)unsigned unal
,     2 not_used	bit(18)unal
;
%page;
%include gtss_pnterr;
%page;
%include gtss_ext_;
%page;
%include mc;
%page;
%include	gtss_ust_ext_;
%page;
%include gtss_entry_dcls;
%page;
%include gtss_db_names;
     end						/* gtss_drl_kin_ */;
