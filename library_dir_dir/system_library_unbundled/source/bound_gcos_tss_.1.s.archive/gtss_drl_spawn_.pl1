/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

gtss_drl_spawn_: proc (mcpp, increment);

/* *	gtss  pass file to batch processor.

   Author:	Mel Wilson			19mar79
  Modified:  Ron Barstad  83-04-25  Add -userlib to gcos command line
   * */
dcl  mcpp                     ptr parm;
dcl  increment                fixed bin parm;

/* *

   DRL SPAWN,  PASS FILE TO BATCH PROCESSOR (octal 26)
   DRL PASFLR, PASS FILE TO REMOTE BATCH PROCESSOR (octal 60, jout option)


   8_________1_6_____________________

   DRL      SPAWN
   ZERO     L(snumb),L(buffer)

   or

   DRL      PASFLR
   ZERO     L(snumb),L(buffer)

   additionally, on entry:
   mc.a bits 0..11 if non-zero give the id for output,
   mc.a bit 35 if non-zero indicates return after batch job complete
   mc.q bits 0..17 point to the name of the bcd source-image file.
   on exit:
   mc.q gives a status code in the range 0..6 .

   (See TSS SYSTEM PROGRAMMER'S
   REFERENCE MANUAL DD17C, Rev. 0, July 1976
   Pages 3-19, 3-26)

*/

/*
   drl snumb local declarations
*/
dcl  arg_list_ptr             ptr;
dcl 1 arg_list aligned based (arg_list_ptr),
    2 L_snumb fixed bin (18) unsigned unal,
    2 L_buffer fixed bin (18) unsigned unal;

dcl 1 local_a based (addr (mc.a)),
      3 output_id bit (12) unal,
      3 fill bit (6) unal,
      3 fill1 bit (17) unal,
      3 wait_flag bit (1) unal;

dcl 1 local_q based (addr (mc.q)),
      3 L_filename fixed bin (18) unsigned unal,
      3 fill3 bit (18) unal;

dcl  snumb_ptr                ptr;
dcl  bcd_snumb                bit (36) based (snumb_ptr);
dcl  given_snumb              char (5) init ("");

dcl  filename_ptr             ptr;
dcl  given_filename           char (8) based (filename_ptr);

dcl  c                        fixed bin (35);
dcl  fn                       fixed bin (24);
dcl  gseg                     ptr;
dcl  home_path                char (128);
dcl  i                        fixed bin;
dcl  jout_request             bit;

dcl  bar_mode_stack_ptr       ptr auto;						/* local storage for bar mode ptr during gcos call */

/* gtss_drl_spawn_ entry (mcpp, increment); */
	jout_request = "0"b;
	goto common;



gtss_drl_pasflr_: entry (mcpp, increment);
	jout_request = "1"b;



common:
	mcp = mcpp;
	increment = 1 ;				/* One argument */
	scup = addr (mc.scu);
	gseg = gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_);
	arg_list_ptr = addrel (gseg, fixed (scu.ilc, 18)+1); /* get addres of arg_list */

/* *	Obtain snumb.	* */
	if L_snumb >= fixed (gtss_ust.lsize.limit, 18) then
	     call gtss_abort_subsystem_ (mcp, "gtss_drl_spawn_", 0,
	     "Snumb outside memory (^o)", fixed (scu.ilc, 18));
	snumb_ptr = addrel (gseg, L_snumb);
	call gtss_bcd_ascii_$lc (snumb_ptr, 5, addr (given_snumb));

/* *	Validate file_name pointer */
	if L_filename >= fixed (gtss_ust.lsize.limit, 18) - 1 then
	     call gtss_abort_subsystem_ (mcp, "gtss_drl_spawn_", 0,
	     "File name outside memory (^o)", fixed (scu.ilc, 18));
	filename_ptr = addrel (gseg, L_filename);

/** Validate file name */
	call gtss_aft_$find (given_filename, fn, c);
	if c = 1 then
	     call spawn_error (1);			/* 'undefined file' */

	call gtss_get_user_state_ (u_state_ptr);
	do i = 1 to entry_count;
	     if snumb (i) = given_snumb & status (i) ^= COMPLETE then
		call spawn_error (3);		/* 'duplicate snumb' */
	end;

	do i = 1 to entry_count while (status (i) ^= COMPLETE);
	end;
	if i > hbound (snumb_entry, 1) then
	     call spawn_error (5);			/* 'no program_number available' */

	call user_info_$homedir (home_path);		/* set base directory path for gtss segment creation */

/* * copy formatted temp file to gcos jcl file */
	if gtss_disk (fn).msf then
	     call gtss_abort_subsystem_ (mcp, "gtss_drl_spawn_", 0,
	     "Can't handle multi_segment jcl files yet.");

	else call copy_single_segment;

/* * build gcos absin file */
/* * call command processor with absentee instructions */
	call make_gcos_request;

/** Set job id in snumb table */
	if i > entry_count then entry_count = i;
	snumb (i) = given_snumb;			/* initialize new snumb entry */
	jout_id (i) = output_id;
	activity (i) = 0;
	status (i) = INITIATED;
/** wrap-up derail processing */
	gtss_ust.lsnub, llsnb = bcd_snumb;
	mc.q = "0"b;				/* set status code OK */

exit_drl_spawn:
	return;

/* gtss_drl_spawn_ miscellaneous declarations */

dcl  gtss_get_user_state_     entry (ptr);

dcl  cu_$cp                   entry (ptr, fixed bin, fixed bin (35));
dcl  hcs_$make_seg            entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$set_bc_seg          entry (ptr, fixed bin(24), fixed bin (35));
dcl  hcs_$terminate_noname    entry (ptr, fixed bin (35));
dcl  user_info_$homedir       entry (char (*));

spawn_error: proc (error_number);
dcl  error_number             parm;

	     mc.q = bit (error_number);
	     goto exit_drl_spawn;
	end spawn_error;

copy_single_segment: proc;

	     s = addrel (single_segment_ptr (fn), 320);	/* s -> temp jcl file */

	     call hcs_$make_seg (home_path, given_snumb || ".gtss.gcos", "",
		fixed ("01010"b), d, c);
	     if d = null () then
		call gtss_abort_subsystem_ (mcp, "gtss_drl_spawn_", 0,
		"Error allocating .gtss.gcos, hcs_$make_path returned ^i.", c);

	     prior_blk, prior_recx = 0;
	     do blk = 1 by 1;			/* for each block in given file */
		if rcw_size (blk, blk_size (blk)) = 0 then /* may be end_of_file */
		     do recx = 1 repeat recx + rcw_size (blk, recx) + 1 while (recx <= blk_size (blk));
		     if rcw_size (blk, recx) = 0 then goto found_eof_rec; /* it is */
		     else do;			/* save location in case this is "***eof" */
			prior_blk = blk;
			prior_recx = recx;
		     end;
		end;
	     end;

found_eof_rec:
	     if prior_blk = 0 then			/* input file is null */
		call gtss_abort_subsystem_ (mcp, "gtss_drl_spawn_", 0,
		"Null file passed to spawn.");

	     file_size = prior_blk;
	     d -> source_file = s -> source_file;

	     d -> blk_size (prior_blk) = blk_size (prior_blk) - rcw_size (prior_blk, prior_recx) - 1; /* replace last record ("***eof") with file mark */
	     d -> rcw_size (prior_blk, prior_recx) = 0;
	     d -> rcw_bits (prior_blk, prior_recx) = "170000"b3;

	     call hcs_$set_bc_seg (d, file_size * 320 * 36, c);
	     call hcs_$terminate_noname (d, c);

	     return;



dcl  file_size                fixed bin init ( ((262144-320)/320) );
dcl  s                        ptr;						/* pointer to input jcl */
dcl  d                        ptr;						/* pointer to result jcl */
dcl (recx, prior_recx) fixed bin;
dcl (blk, prior_blk) fixed bin;

dcl 1 source_file based (s),
   2 source_block (file_size),
      3 blk_serial fixed bin (18) unsigned unal,
      3 blk_size fixed bin (18) unsigned unal,
      3 block_rcw (319),
         4 rcw_size fixed bin (18) unsigned unal,
         4 rcw_bits bit (18) unal;

	end copy_single_segment;

make_gcos_request: proc;

	     if wait_flag then
		gcos_req_ptr = addr (gcos_direct_req);
	     else do;
		call hcs_$make_seg (home_path, given_snumb || ".gtss.absin", "",
		     fixed ("01010"b, 5), gcos_req_ptr, c);
		if gcos_req_ptr = null () then
		     call gtss_abort_subsystem_ (mcp, "gtss_drl_spawn_", 0,
		     "Error allocating .gtss.absin");
	     end;

	     gcos_req = "gcos$spawn " || rtrim (home_path) || ">" || given_snumb || ".gtss.gcos -ident -userlib";
	     if jout_request then
		gcos_req = rtrim (gcos_req) || " -hd";

	     if wait_flag then do;
		gcos_req = rtrim (gcos_req) || " -bf";

/* save bar mode stack pointer before calling gcos */
		sb = baseptr (baseno (addr (bar_mode_stack_ptr)));
		bar_mode_stack_ptr = stack_header.bar_mode_sp;
	     end;
	     else do;
		gcos_req = rtrim (gcos_req) || substr (collate (), 11, 1); /* append newline to absin segment */
		call hcs_$set_bc_seg (gcos_req_ptr, length (rtrim (gcos_req)) * 9, c);
		call hcs_$terminate_noname (gcos_req_ptr, c);
		gcos_req_ptr = null;
		gcos_direct_req = "ear " || rtrim (home_path) || ">" || given_snumb || ".gtss.absin -bf" ||
		     substr (collate (), 11, 1);
	     end;

	     call cu_$cp (addr (gcos_direct_req), length (rtrim (gcos_direct_req)), c);

/* restore bar mode stack pointer if necessary */
	     if wait_flag then
		stack_header.bar_mode_sp = bar_mode_stack_ptr;

	     if c ^= 0 then
		call gtss_abort_subsystem_ (mcp, "gtss_drl_spawn_", 0,
		"Error returned by cu_$cp for command^/^-^a^/", gcos_direct_req);

	     return;



dcl  gcos_req_ptr             ptr;
dcl  gcos_req                 char (256) based (gcos_req_ptr);

dcl  gcos_direct_req          char (256);

	end make_gcos_request;

%include gtss_dfd_ext_;

%include gtss_entry_dcls;

%include gtss_ext_;

%include gtss_snumb_xref_;

%include gtss_ust_ext_;

%include mc;
%include stack_header;

dcl (addr, addrel, baseno, baseptr, bit, collate, fixed, hbound, length, null, rtrim, substr) builtin;

     end gtss_drl_spawn_;
