/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
gtss_drl_pasust_: proc (mcpp, increment);

/**	gtss pass UST or SY** information to caller.

	Authors:	Al Kepner
	Authors:	Robert J. Grimes	Created
		Albert N. Kepner	  1978
		Robert M. May
		David B. Ward
		Bob Alvarado	08/22/79 added cpu time to ust.
		Paul Benjamin 	08/31/79 corrected upper bound of SPA.
  Modified: Ron Barstad  83-06-29  To 4js3 version where Num words is an offset and number of words
 **/
dcl  mcpp                     ptr parm;
dcl  increment                fixed bin parm;
	mcp = mcpp;

/**

   DRL PASUST, PASS UST TO SUBSYSTEM (octal 33)


   8________16_____________________

   DRL      PASUST
   ZERO     L(buffer),N

    (See TSS Reference Manual
         DJ31-A, Sept. 1980, page 6-58)

*/
%page;
	increment = 1 ;				/* One arguments */
	scup = addr (mc.scu);
	gseg = gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_);
	arg_list_ptr = addrel (gseg, fixed (scu.ilc, 18)+1); /* get addres of arg_list */
	n = arg_list.N;				/* Number of words to move from UST. */
	gtss_ust.lsprt = gtss_ust.lsprt + (total_cpu_time_ ()/1000);
	if n = -1 then do;				/* => Move SY** to caller's buffer. */
	     n = 640;				/* Size of SY** */
	     n4 = n*4;				/* "n" words in characters. */
	     if (arg_list.L_buffer < "000144"b3) |	/* 144oct = 100dec. */
	     ((fixed (arg_list.L_buffer, 18)+n)> fixed (gtss_ust.lsize.limit, 18)) then goto failed;
	     addrel (gseg, arg_list.L_buffer) -> n_words =
		gtss_disk (gtss_ext_$SYstarstar_file_no).single_segment_ptr -> n_words;
	     return;
	end;

	n = arg_list_2.YYY;
	offset = arg_list_2.XXX;
	if (n>size (gtss_ust_ext_$ust)-1) | (n<1) then n = size (gtss_ust_ext_$ust)-1;
	if (arg_list.L_buffer < "000144"b3) |		/* 144oct = 100dec. */
	((fixed (arg_list.L_buffer, 18)+n)> fixed (gtss_ust.lsize.limit, 18)) then do;
failed:	     ;
	     call gtss_abort_subsystem_ (
		mcp
		, "gtss_drl_pasust"
		, 4
		, gtss_pnterr.err4
		, fixed (scu.ilc, 18)
		);
	     return;
	end;
	n4 = n*4;					/* "n" words in characters. */
	addrel (gseg, arg_list.L_buffer) -> n_words = addrel (addr(gtss_ust), offset) -> n_words;
	return;
%page;
/**	Variables for gtss_drl_pasust_:
     IDENTIFIER		ATTRIBUTES	**/
dcl  (addr,
      addrel,
      fixed,
      null,
      size)                   builtin;
dcl  arg_list_ptr             ptr init(null());
dcl  gseg                     ptr init(null());
dcl  n                        fixed bin(24);
dcl  n4                       fixed bin(24);
dcl  n_words                  char(n4)aligned based;
dcl  offset                   fixed bin(24);

dcl 1 arg_list		aligned based(arg_list_ptr)
,     2 L_buffer		bit(18)unal
,     2 N			fixed bin(17)unal
;

dcl 1 arg_list_2		aligned based(arg_list_ptr)
,     2 L_buffer		bit(18)unal
,     2 N			unal
,       3 XXX                 unsigned fixed bin(9) unal  /* offset into UST */
,       3 YYY                 unsigned fixed bin(9) unal  /* number of words to move */
;

dcl  total_cpu_time_          entry returns (fixed bin (71));
%page;
%include gtss_pnterr;
%page;
%include gtss_dfd_ext_;
%page;
%include gtss_ext_;
%page;
%include gtss_ust_ext_;
%page;
%include mc;
%page;
%include gtss_entry_dcls;
     end gtss_drl_pasust_;
