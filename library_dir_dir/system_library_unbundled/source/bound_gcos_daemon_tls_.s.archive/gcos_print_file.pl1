/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


gcos_print_file: gpf: proc;


/* DECLARATIONS */
/* ------------ */



/* fixed bin */
/* ----- --- */

dcl (
     al,						/* argument length */
     arg_count,					/* argument count */
     i,						/* loop index */
     line_length					/* length of line read */
     ) fixed bin aligned;

dcl (
     bitcnt					/* bit count returned from status_mins */
     ) fixed bin (24) aligned;

dcl (
     code,					/* error code */
     error_table_$noarg ext,
     error_table_$badopt ext
     ) fixed bin (35) aligned;


/* bit strings */
/* --- ------- */

dcl (
     brief init ("0"b),				/* ON if brief option specified */
     data_type,					/* from gcos_read_line_: "1"b = bcd, "0"b = binary */
     end_of_input,					/* ON when end of input is read */
     input_is_a_file init ("1"b),			/* ON if input is from a file */
     input_is_attached init ("0"b),			/* ON if input device is attached */
     nine_track_read_wanted init ("0"b),		/* ON if nine-track tape is to be read */
     no_arguments_were_found init ("1"b),		/* ON until a non-option argument is found */
     input_was_read init ("0"b),			/* ON after first successful write call */
     read_init_was_called init ("0"b)			/* ON after gsr_read_init is called */
     ) bit (1) aligned;

dcl (
     status_bits					/* returned status from ios_ calls */
     ) bit (72) aligned;

dcl (
     line						/* bit equivalent of line read by gcos_read_line_ */
     ) bit (980) aligned;


/* character strings */
/* --------- ------- */

dcl (
     option					/* fixed location for option arguments */
     ) char (4) aligned;

dcl (
     device_name init ("file_")			/* attach name for input device */
     ) char (8) aligned;

dcl (
     input_pn					/* input path-name or tape label */
     ) char (168) aligned;


/* pointers */
/* -------- */

dcl (
     ap,						/* argument pointer */
     line_ptr,					/* pointer to bit string read by gcos_read_line_ */
     sp						/* pointer to returned status bits from ios_ */
     ) ptr aligned;


/* conditions */
/* ---------- */

dcl (
     cleanup
     ) condition;


/* built in functions */
/* ----- -- --------- */

dcl (
     addr,
     null,
     substr
     ) builtin;


/* masks */
/* ----- */

dcl  arg_mask char (al) unaligned based (ap);		/* argument mask */

dcl 1 status aligned based (sp),			/* for checking returned status from ios_ calls */
    2 scode fixed bin (35) aligned;			/* error code portion of status */


/* external entries */
/* -------- ------- */

dcl  com_err_ ext entry
     options (variable);

dcl  cu_$arg_count ext entry
    (fixed bin aligned);

dcl  cu_$arg_ptr ext entry
    (fixed bin aligned, ptr aligned, fixed bin aligned, fixed bin (35) aligned);

dcl  gcos_read_line_ ext entry
    (ptr aligned, fixed bin aligned, bit (1) aligned, bit (1) aligned, fixed bin (35) aligned);

dcl  gcos_read_line_$read_line_init ext entry
    (bit (1) aligned, fixed bin (35) aligned);

dcl  gcos_write_line_ ext entry
    (ptr aligned, bit (1) aligned, bit (1) aligned, fixed bin (35) aligned);

dcl  gcos_gsr_read_$gsr_read_close ext entry
    (char (*) aligned, fixed bin (35) aligned);

dcl  ios_$attach ext entry
    (char (*) aligned, char (*) aligned, char (*) aligned, char (*) aligned, bit (72) aligned);

dcl  ios_$detach ext entry
    (char (*) aligned, char (*) aligned, char (*) aligned, bit (72) aligned);

dcl  ios_$setsize ext entry
    (char (*) aligned, fixed bin aligned, bit (72) aligned);

/*  */
	line_ptr = addr (line);			/* pointer to bit string read by gcos_read_line_ */
	sp = addr (status_bits);			/* pointer to returned status bits from ios_ */

	on condition (cleanup)			/* establish cleanup handler */
	     call detach_input;

	call cu_$arg_count (arg_count);		/* get number of arguments */
	if arg_count = 0				/* error, no arguments */
	then do;
	     call com_err_ (error_table_$noarg, "gcos_print_file", "");
	     return;
	end;


/*  */

	do i = 1 to arg_count;			/* ARGUMENT LOOP */

	     call cu_$arg_ptr (i, ap, al, code);	/* fetch an argument */
	     if code ^= 0				/* fatal error */
	     then do;
		call com_err_ (code, "gcos_print_file", "Error fetching argument (^d)", i);
		call detach_input;
		return;
	     end;

	     if substr (arg_mask, 1, 1) = "-"		/* argument is an option */
	     then do;

		option = arg_mask;			/* fix the argument */

		if option = "-ti"			/* input is from tape */
		then do;
		     input_is_a_file = "0"b;
		     device_name = "nstd_";
		end;

		else
		if option = "-fi"			/* input is from a file */
		then do;
		     input_is_a_file = "1"b;
		     device_name = "file_";
		end;

		else
		if option = "-9"			/* request to read nine-track tape */
		then nine_track_read_wanted = "1"b;

		else
		if option = "-7"			/* request to read seven-track tape */
		then nine_track_read_wanted = "0"b;

		else
		if option = "-bf"			/* brief option */
		then brief = "1"b;			/* remember */

		else
		if option = "-lg"			/* long option */
		then brief = "0"b;			/* remember */

		else				/* unrecognized option */
		do;
		     call com_err_ (error_table_$badopt, "gcos_print_file", option);
		     return;
		end;

	     end;

	     else					/* argument is not an option */
	     do;

		no_arguments_were_found = "0"b;

		call detach_input;
		if input_is_a_file
		then do;
		     if nine_track_read_wanted	/* error, tape option on file request */
		     then do;
			call com_err_ (0, "gcos_print_file", "Nine track read specified for file input:  ^a", input_pn);
			go to END_LOOP;
		     end;
		     input_pn = arg_mask;		/* set path-name of input file */

		end;

		else				/* tape input */
		do;
		     input_pn = arg_mask||",7track";	/* make up tape label */
		     if nine_track_read_wanted
		     then substr (input_pn, al+2, 1) = "9";
		end;

		call ios_$attach ("input_stream", device_name, input_pn, "r", status_bits);
		if scode ^= 0			/* error attaching input stream */
		then do;
		     call com_err_ (scode, "gcos_print_file", "Error attaching ^a", input_pn);
		     return;
		end;
		else				/* input stream attached */
		input_is_attached = "1"b;		/* remember */

		if input_is_a_file			/* input is from a file */
		then do;
		     call ios_$setsize ("input_stream", 36, status_bits); /* set input size to full word */
		     if scode ^= 0			/* error setting input size */
		     then do;
			call com_err_ (scode, "gcos_print_file", "Error setting element size on input_stream");
			call detach_input;
			return;
		     end;
		end;

		call gcos_read_line_$read_line_init (input_is_a_file, code); /* initialization for reads */
		if code ^= 0
		then do;
		     call com_err_ (0, "gcos_print_file", "Error in read initialization call");
		     call detach_input;
		     return;
		end;
		read_init_was_called = "1"b;		/* remember call was made */

		end_of_input = "0"b;
		do while (^end_of_input);

		     call gcos_read_line_ (line_ptr, line_length, data_type, end_of_input, code);
						/* read a line of output */
		     if code ^= 0			/* error reading line */
		     then do;
			call com_err_ (code, "gcos_print_file", "Error reading from ^a", input_pn);
			call detach_input;
			return;
		     end;

		     if line_length ^= 0		/* something was read */
		     then do;
			input_was_read = "1"b;	/* remember */

			call gcos_write_line_ (line_ptr, data_type, brief, code); /* write the line */
			if code > 1		/* error writing line */
			then do;
			     call com_err_ (code, "gcos_print_file", "Error writing into user_output");
			     call detach_input;
			     return;
			end;

		     end;

		end;

		if ^input_was_read			/* implies no input was read */
		then call com_err_ (0, "gcos_print_file", "Zero length input: ^a", input_pn);

	     end;

END_LOOP:

	end;					/* END OF ARGUMENT LOOP */

	if no_arguments_were_found			/* all arguments were options */
	then call com_err_ (error_table_$noarg, "gcos_print_file", "");

	call detach_input;

	return;

/*  */

/* INTERNAL PROCEDURES */



detach_input: proc;

	     if input_is_attached
	     then do;

		call ios_$detach ("input_stream", input_pn, "", status_bits);
		if scode ^= 0
		then call com_err_ (scode, "gcos_print_file", "Error detaching ^a", input_pn);

	     end;

	     input_is_attached = "0"b;

	     if read_init_was_called
	     then do;
		call gcos_gsr_read_$gsr_read_close ("input_stream", code);
		read_init_was_called = "0"b;
	     end;

	     return;

	end detach_input;



     end gcos_print_file;
