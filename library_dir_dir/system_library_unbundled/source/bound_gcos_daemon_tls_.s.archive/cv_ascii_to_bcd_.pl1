/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* ******************************************************************************
   *								*
   *	Modified by RH Morrison 6/22/76				*
   *								*
   ***************************************************************************** */

cv_ascii_to_bcd_: proc (a_input_ptr, a_output_ptr, a_code);

/* Procedure to convert Multics ascii to GCOS 14 bit binary.

   Arguments are:

   a_input_ptr	pointer to an 80 character aligned input string (input)
   a_output_ptr	pointer to a 14 word aligned output string (input)
   a_code		0 = successful, 1 = unsuccessful (output)

   */


/* DECLARATIONS */

/* fixed bin */

dcl (i,						/* loop index */
     index,					/* index into character arrays */
     interval,					/* half interval search interval */
     j						/* loop index */
     ) fixed bin aligned;

dcl (
     a_code,					/* error code (argument) */
     code init (0)					/* error code (internal) */
     ) fixed bin (35) aligned;


/* pointers */

dcl (
     a_input_ptr,					/* pointer to ascii input string (argument) */
     a_output_ptr,					/* pointer to bcd output string (argument) */
     input_ptr,					/* pointer to ascii input string (internal) */
     output_ptr					/* pointer to bcd output string (internal) */
     ) ptr aligned;


/* bit strings */

dcl (
     ascii_char_not_found				/* ON until match is found with current input char */
     ) bit (1) aligned;


/* built in functions */

dcl (
     divide,
     fixed,
     unspec
     ) builtin;


/* structures */

dcl  a_table (64) char (1) aligned init (		/* ascii table */
     " ",
     "!",
     """",
     "#",
     "$",
     "%",
     "&",
     "'",
     "(",
     ")",
     "*",
     "+",
     ",",
     "-",
     ".",
     "/",
     "0",
     "1",
     "2",
     "3",
     "4",
     "5",
     "6",
     "7",
     "8",
     "9",
     ":",
     ";",
     "<",
     "=",
     ">",
     "?",
     "@",
     "[",
     "\",
     "]",
     "^",
     "_",
     "a",
     "b",
     "c",
     "d",
     "e",
     "f",
     "g",
     "h",
     "i",
     "j",
     "k",
     "l",
     "m",
     "n",
     "o",
     "p",
     "q",
     "r",
     "s",
     "t",
     "u",
     "v",
     "w",
     "x",
     "y",
     "z"
     );

dcl  b_table (64) bit (6) aligned init (		/* bcd table */
     "010000"b,
     "111111"b,
     "111110"b,
     "001011"b,
     "101011"b,
     "111100"b,
     "011010"b,
     "101111"b,
     "011101"b,
     "101101"b,
     "101100"b,
     "110000"b,
     "111011"b,
     "101010"b,
     "011011"b,
     "110001"b,
     "000000"b,
     "000001"b,
     "000010"b,
     "000011"b,
     "000100"b,
     "000101"b,
     "000110"b,
     "000111"b,
     "001000"b,
     "001001"b,
     "001101"b,
     "101110"b,
     "011110"b,
     "111101"b,
     "001110"b,
     "001111"b,
     "001100"b,
     "001010"b,
     "011111"b,
     "011100"b,
     "100000"b,
     "111010"b,
     "010001"b,
     "010010"b,
     "010011"b,
     "010100"b,
     "010101"b,
     "010110"b,
     "010111"b,
     "011000"b,
     "011001"b,
     "100001"b,
     "100010"b,
     "100011"b,
     "100100"b,
     "100101"b,
     "100110"b,
     "100111"b,
     "101000"b,
     "101001"b,
     "110010"b,
     "110011"b,
     "110100"b,
     "110101"b,
     "110110"b,
     "110111"b,
     "111000"b,
     "111001"b
     );


/* masks */

dcl 1 ascii_string aligned based (input_ptr),		/* for looking at ascii string */
    2 ascii_char (80) char (1) unaligned;

dcl 1 bcd_string aligned based (output_ptr),		/* for looking at bcd string */
    2 bcd_char (80) bit (6) unaligned,
    2 bcd_pad bit (24) unaligned;			/* for filling out to last word boundary */

/*  */

	input_ptr = a_input_ptr;			/* copy arguments */
	output_ptr = a_output_ptr;

	do i = 1 to 80 while (code = 0);		/* per character loop */

	     if ascii_char (i) = " "			/* make quick check for blank */
	     then do;
		bcd_char (i) = "010000"b;
		ascii_char_not_found = "0"b;
	     end;

	     else					/* character is not a blank */
	     do;

		ascii_char_not_found = "1"b;		/* set search flag */
		index = 32;			/* index into character arrayx */
		interval = 32;			/* and search interval */

		do j = 1 to 6 while (ascii_char_not_found); /* half-interval search loop */

		     if ascii_char (i) = a_table (index) /* match found */
		     then do;
			ascii_char_not_found = "0"b;
			bcd_char (i) = b_table (index);
		     end;

		     else				/* match not found */
		     do;
			interval = divide (interval, 2, 17, 0); /* split search interval */
			if fixed (unspec (ascii_char (i)), 9) < fixed (unspec (a_table (index)), 9)
						/* set direction of search */
			then index = index - interval;
			else
			index = index + interval;
		     end;

		end;

		if ascii_char_not_found		/* error, invalid input character */
		then code = 1;

	     end;

	     if code = 0				/* conversion was successful */
	     then bcd_pad = "010000010000010000010000"b;

	     a_code = code;				/* return error code */

	end;

	return;

     end cv_ascii_to_bcd_;
