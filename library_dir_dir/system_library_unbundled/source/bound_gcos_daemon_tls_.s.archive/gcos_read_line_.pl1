/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


gcos_read_line_: proc (a_line_ptr, a_line_len, a_data_type, a_eof, a_code);



/* DECLARATIONS */
/* ------------ */


/* fixed bin */
/* ----- --- */

dcl (
     a_line_len,					/* length of read line in words (argument) */
     i,						/* loop index */
     j,						/* word count from ios_$read call */
     junk (14)					/* buffer for ios_$read call */
     ) fixed bin aligned;

dcl (
     a_code					/* error code (argument) */
     )fixed bin (35) aligned;


/* bit strings */
/* --- ------- */

dcl (
     a_data_type,					/* 1 = bcd, 2 = binary (argument) */
     a_eof,					/* ON when eof is encountered (argument) */
     a_input_is_a_file				/* ON when input is a file (argument) */
     ) bit (1) aligned;

dcl (
     record_hdr					/* record header from imcv format */
     ) bit (12) aligned;

dcl  status_bits bit (72) aligned;			/* returned status from ios_ */


/* pointers */
/* -------- */

dcl (
     a_line_ptr,					/* pointer to read line (argument) */
     line_ptr,					/* pointer to read line (internal) */
     rh_ptr,					/* pointer to record header data */
     sp						/* pointer to status returned from ios_ */
     ) ptr aligned;


/* built in functions */
/* ----- -- --------- */

dcl (
     addr,
     null,
     substr
     ) builtin;


/* masks */
/* ----- */

dcl 1 record_hdr_mask aligned based (rh_ptr),		/* for looking at record header */
    2 pad bit (2) unaligned,
    2 media_code bit (4) unaligned;

dcl 1 status aligned based (sp),			/* ios_ status mask */
    2 scode fixed bin (35) aligned;			/* error code portion */

dcl  line bit (a_line_len*36) aligned based (line_ptr);	/* for returning read line as bit string */


/* external entries */
/* -------- ------- */

dcl  gcos_gsr_read_ ext entry
    (char (*) aligned, ptr aligned, fixed bin aligned, bit (12) aligned, bit (1) aligned, fixed bin (35) aligned);

dcl  gcos_gsr_read_$gsr_read_init ext entry
    (char (*) aligned, fixed bin (35) aligned);

dcl  ios_$read ext entry
    (char (*) aligned, ptr aligned, fixed bin aligned, fixed bin aligned, fixed bin aligned, bit (72) aligned);

/*  */

	rh_ptr = addr (record_hdr);			/* pointer to record header data */
	sp = addr (status_bits);			/* pointer to status returned from ios_ */
	call gcos_gsr_read_ ("input_stream", line_ptr, a_line_len, record_hdr, a_eof, a_code); /* read a line */
	if a_code ^= 0
	then return;

	if a_eof					/* an end of file was encountered */
	then do;
	     line_ptr = null;			/* return appropriate arguments */
	     a_line_len = 0;
	     return;
	end;

	a_line_ptr -> line = line;			/* return line as bit string */

	if media_code = "0010"b			/* bcd line */
	then a_data_type = "1"b;
	else					/* binary line */
	a_data_type = "0"b;

	return;



read_line_init: entry (a_input_is_a_file, a_code);

	rh_ptr = addr (record_hdr);			/* pointer to record header data */
	sp = addr (status_bits);			/* pointer to status returned from ios_ */
	call gcos_gsr_read_$gsr_read_init ("input_stream", a_code);
	if a_code = 0				/* successful initialization */
	then if ^a_input_is_a_file			/* input is system standard tape */
	     then do i = 1 to 2;			/* get rid of tape label, tape mark */
		call ios_$read ("input_stream", addr (junk (1)), 0, 14, j, status_bits);
		if substr (status_bits, 1, 3) ^= "100"b /* not an EOF mark */
		then if scode ^= 0			/* actual error */
		     then do;
			a_code = scode;		/* return error code */
			return;
		     end;
	     end;

	return;



     end gcos_read_line_;
