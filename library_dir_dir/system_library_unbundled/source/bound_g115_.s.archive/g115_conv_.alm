"  ******************************************************
"  *                                                    *
"  *                                                    *
"  * Copyright (c) 1972 by Massachusetts Institute of   *
"  * Technology and Honeywell Information Systems, Inc. *
"  *                                                    *
"  *                                                    *
"  ******************************************************

" G115_CONV_ - Conversion for G115 remote printer.
"	coded 12/12/74 by Noel I. Morris
"	Modified 6/23/75 by Noel I. Morris
"	Modified 04/10/77 by Bob Franklin to change top of inside page char
"		and dont slew on punch
"	Modified by D. Vinograd, 7/78, to separate the teleprinter, printer, and punch entries
"	Modified by J. C. Whitmore, 11/78, to make all top of page slews the same
"	Modified by J. C. Whitmore, 9/79, to move protocol features to g115_protocol_.pl1

" This module performs the necessary conversion for printing on the
" G115 remote printer.
"
" The manner in which this procedure is utilized is described in detail
" in the listing of prt_conv_.
"
" A media code character will be inserted at the beginning of each
" output line.  


	name	g115_conv_

	segdef	teleprinter
	segdef	printer
	segdef	punch


	even
	temp	char
	temp	device_code	1 = printer, 0 = all others



teleprinter:
punch:
	tra	g115_send_init
	tra	g115_send_chars
	tra	g115_send_slew_pattern
	tra	g115_send_slew_count

printer:
	tra	g115_send_printer_init
	tra	g115_send_chars
	tra	g115_send_slew_pattern
	tra	g115_send_slew_count


" 
	include	prt_conv_info
" 

g115_send_init:

	ldq	0,du		set the all other device code
	stq	device_code	and save for later

	tra	end_init

g115_send_printer_init:

	ldq	1,du		set the printer code
	stq	device_code	and save for later

end_init:

	tra	sb|0		return to caller
" 

g115_send_chars:

	eaq	0,2		white space count in QU
	tmoz	nospace		skip if no white space

"	insert spaces as requested, compression is done at the next level

	mlr	(),(pr,rl),fill(040)  insert requisite number of blanks
	desc9a	*,0		..
	desc9a	bb|0,qu		..

	a9bd	bb|0,qu		bump output pointer

nospace:
	mlr	(pr,rl),(pr,rl)	copy characters into bb -> out_string
	desc9a	bp|0,au		..
	desc9a	bb|0,au		..

	a9bd	bp|0,au		step input and output pointers
	a9bd	bb|0,au		..
	eax2	0		make sure X2 now zero
	tra	pr7|0		return to caller


" 

g115_send_slew_pattern:

	ldq	device_code	see if this is a printer
	tze	return_to_caller	if not, there is no slew

	ldq	=1a ,du		load the FF slew code

set_slew:

	stq	char		save the slew code
	eax7	1		we will add one char to the output

	mlr	(pr,rl),(pr,rl)	copy into output
	desc9a	char,x7		..
	desc9a	bb|0,x7		..

	a9bd	bb|0,7		..

return_to_caller:
	tra	sb|0		return to caller
" 

g115_send_slew_count:

	ldq	device_code	see if this is a printer
	tze	no_slew		if not, there is no slew

	eaq	0,al		count in QU
	sbla	15,dl		decrement A by 15, residue will come later
	tmoz	*+2		can only take 15 lines at a time
	ldq	15,du		if > 15, take 15 for now
	ldq	skip,qu		get correct skip character
	tra	set_slew		join common code

no_slew:
"				just say we did it and return
	lda	0,dl		clear the residue count
	tra	sb|0		and return


"	GRTS codes for slew of N lines

skip:	aci	"0"		slew  0 lines
	aci	"1"		slew  1 line
	aci	"2"		slew  2 lines
	aci	"3"		slew  3 lines
	aci	"4"		slew  4 lines
	aci	"5"		slew  5 lines
	aci	"6"		slew  6 lines
	aci	"7"		slew  7 lines
	aci	"8"		slew  8 lines
	aci	"9"		slew  9 lines
	aci	"["		slew 10 lines
	aci	"#"		slew 11 lines
	aci	"@"		slew 12 lines
	aci	":"		slew 13 lines
	aci	">"		slew 14 lines
	aci	"?"		slew 15 lines

	end
