/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

g115_as_: proc;


/* g115_as_ - procedure to interface answering service when it needs to communicate VIA G115 protocol.

   The tty_index entry must be called first to establish a data structure for the device.
   The other entries rely on the presence of this data structure. */


/* coded 07/11/75 by Bob Adsit */
/* Modified by J. C. Whitmore, 9/79, during restructure of g115_ I/O module. */

dcl  a_asw fixed bin parameter;
dcl  a_bufp ptr parameter;
dcl  a_code fixed bin (35);
dcl  a_device char (*) parameter;
dcl  a_devx fixed bin parameter;
dcl  a_dflag fixed bin parameter;
dcl  a_event fixed bin (71) parameter;
dcl  a_nelem fixed bin parameter;
dcl  a_nelemt fixed bin parameter;
dcl  a_new_mode char (*) parameter;
dcl  a_offset fixed bin parameter;
dcl  a_old_mode char (*) parameter;
dcl  a_order char (*) parameter;
dcl  a_orderp ptr parameter;
dcl  a_proc_id bit (36) aligned;
dcl  a_state fixed bin parameter;

dcl  io_buff char (322) aligned;
dcl  io_data char (322) var;
dcl  dd_idx fixed bin;
dcl  pos fixed bin;
dcl  state fixed bin;
dcl  idx fixed bin;

dcl  based_string char (322) based;

dcl (addr, addrel, index, length, rtrim, substr, translate, null, hbound) builtin;

dcl  error_table_$namedup fixed bin (35) ext;
dcl  error_table_$noentry fixed bin (35) ext;
dcl  error_table_$notalloc fixed bin (35) ext;
dcl  error_table_$io_no_permission ext fixed bin (35);

dcl  NL char (1) int static options (constant) init ("
");



dcl 1 dd aligned static,				/* device data structure on active channels */
    2 last_used fixed bin init (0),			/* last entry defined in the array */
    2 free_idx fixed bin init (-1),			/* head of the free list of entries */
    2 entries (100),				/* array of entries larger than ever needed */
      3 next_idx fixed bin init ((100) 0),		/* next entry in the chain - (100) 0 = end */
      3 devx fixed bin init ((100) 0),			/* the device index for Ring 0 */
      3 adp ptr init ((100) null),			/* pointer to the attach data structure for devx */
      3 ddp ptr init ((100) null);			/* pointer to the device data structure for devx */


dcl 1 modes aligned,
    2 len fixed bin,
    2 str char (256);

dcl (lower_case init ("abcdefghijklmnopqrstuvwxyz"),
     upper_case init ("ABCDEFGHIJKLMNOPQRSTUVWXYZ")) char (26) int static options (constant);

dcl  ipc_$create_ev_chn entry (fixed bin (71), fixed bin (35));
dcl  ipc_$delete_ev_chn entry (fixed bin (71), fixed bin (35));
dcl  g115_$as_init entry (fixed bin, ptr, ptr, fixed bin (35));
dcl  g115_$as_detach entry (fixed bin, ptr, ptr, fixed bin (35));
dcl  g115_protocol_$read entry (ptr, ptr, ptr, fixed bin, fixed bin, fixed bin (35));
dcl  g115_protocol_$write entry (ptr, ptr, ptr, fixed bin, fixed bin (35));
dcl  hcs_$tty_index entry (char (*), fixed bin, fixed bin, fixed bin (35));
dcl  hcs_$tty_event entry (fixed bin, fixed bin (71), fixed bin, fixed bin (35));
dcl  hcs_$tty_abort entry (fixed bin, fixed bin, fixed bin, fixed bin (35));
dcl  hcs_$tty_state entry (fixed bin, fixed bin, fixed bin (35));
dcl  hcs_$tty_order entry (fixed bin, char (*), ptr, fixed bin, fixed bin (35));
dcl  hcs_$tty_detach_new_proc entry (fixed bin, bit (36) aligned, fixed bin, fixed bin (35));

%include g115_device_data;

%include g115_attach_data;

%include remote_ttt_info;

as_index:	entry (a_device, a_devx, a_state, a_code);

/* This is the entry first called by answering service to set up the attachment through g115 */

	call hcs_$tty_index (a_device, a_devx, a_state, a_code); /* get the device index of the channel */
	if a_code ^= 0 then return;

	call make_dd_entry (a_devx, dd_idx, a_code);	/* get a place to save attachment data ptrs */
	if a_code ^= 0 then return;

	call g115_$as_init (a_devx, device_data_p, adp, a_code);
	if a_code ^= 0 then do;
drop_entry:    call delete_dd_entry (dd_idx);		/* remove the entry we made */
	     if device_data_p ^= null then
		call g115_$as_detach (a_devx, device_data_p, adp, (0));
	     return;
	end;

	dd.ddp (dd_idx) = device_data_p;		/* save these for the future */
	dd.adp (dd_idx) = adp;

	g115_attach_data.device = a_device;		/* record the device name given us */

	call ipc_$create_ev_chn (g115_device_data.tty_ev_channel, a_code); /* create ev chan for ring 0 */
	if a_code ^= 0 then go to drop_entry;

	call ipc_$create_ev_chn (g115_device_data.timeout_ev_channel, a_code); /* and one for timeout on blocking */
	if a_code ^= 0 then go to drop_entry;

	return;


as_event:	entry (a_devx, a_event, a_state, a_code);

/* This entry defines the event channel that AS will block on (listen to) */

	call find_dd_entry (a_devx, dd_idx, a_code);	/* get the structure ptr info */
	if a_code ^= 0 then return;

	device_data_p = dd.ddp (dd_idx);		/* get the pointer to g115_device_data */

	g115_device_data.as_ev_chan = a_event;		/* save the event channel for g115_io_ */

	call hcs_$tty_event (a_devx, a_event, a_state, a_code); /* set the AS event channel in ring  0 */

	return;

as_detach: entry (a_devx, a_dflag, a_state, a_code);

	call find_dd_entry (a_devx, dd_idx, a_code);	/* get the device data index */
	if a_code ^= 0 then return;

	device_data_p = dd.ddp (dd_idx);		/* copy the structure pointers */
	adp = dd.adp (dd_idx);

	call ipc_$delete_ev_chn (g115_device_data.tty_ev_channel, a_code); /* don't check the code, just try */
	call ipc_$delete_ev_chn (g115_device_data.timeout_ev_channel, a_code);

	call g115_$as_detach (a_devx, device_data_p, adp, a_code);

	a_state = 1;

	call delete_dd_entry (dd_idx);

	return;


as_detach_new_proc: entry (a_devx, a_proc_id, a_state, a_code);

	call hcs_$tty_detach_new_proc (a_devx, a_proc_id, a_state, a_code);
	return;


as_order:	entry (a_devx, a_order, a_orderp, a_state, a_code);

	call hcs_$tty_order (a_devx, a_order, a_orderp, a_state, a_code);
	return;


as_changemode: entry (a_devx, a_new_mode, a_old_mode, a_code);

	modes.len = length (modes.str);		/* set the max size for return info */
	modes.str = a_new_mode;

	call hcs_$tty_order (a_devx, "modes", addr (modes), state, a_code);
	if state ^= 5 then a_code = error_table_$io_no_permission;

	a_old_mode = modes.str;			/* copy back the old modes from Ring 0 */

	return;


as_state:	entry (a_devx, a_state, a_code);

	call hcs_$tty_state (a_devx, a_state, a_code);
	return;


as_abort:	entry (a_devx, a_asw, a_state, a_code);

	call hcs_$tty_abort (a_devx, a_asw, a_state, a_code);
	return;

as_write:
as_write_force: entry (a_devx, a_bufp, a_offset, a_nelem, a_nelemt, a_state, a_code);

	call find_dd_entry (a_devx, dd_idx, a_code);	/* get the device data index */
	if a_code ^= 0 then return;

	device_data_p = dd.ddp (dd_idx);		/* define the structure pointers */
	adp = dd.adp (dd_idx);

	io_buff = substr (addrel (a_bufp, a_offset) -> based_string, 1, a_nelem); /* be sure we fit into a message */

	call g115_protocol_$write (adp, device_data_p, addr (io_buff), a_nelem, a_code);

	a_nelemt = a_nelem;

	return;


as_read:	entry (a_devx, a_bufp, a_offset, a_nelem, a_nelemt, a_state, a_code);

	call find_dd_entry (a_devx, dd_idx, a_code);
	if a_code ^= 0 then return;

	device_data_p = dd.ddp (dd_idx);		/* define the structure pointers */
	adp = dd.adp (dd_idx);

	call g115_protocol_$read (adp, device_data_p, addr (io_buff), length (io_buff), a_nelemt, a_code);

	if a_code ^= 0 | a_nelemt = 0 then return;	/* none yet */

	io_buff = substr (io_buff, 1, a_nelemt);	/* remove any cruft */
	io_data = "";				/* clear the output string */
	pos = 1;					/* go through io_buff starting with char 1 */
	idx = index (io_buff, "\");			/* look for upper case escapes */

	do while (idx > 0);				/* loop processing all escapes */
	     io_data = io_data || translate (substr (io_buff, pos, idx - 1), lower_case, upper_case) ||
		substr (io_buff, pos + idx, 1);	/* omit the backslash and take following char as is */
	     pos = pos + idx + 1;
	     idx = index (substr (io_buff, pos), "\");	/* look for next one */
	end;

	io_data = io_data || translate (substr (io_buff, pos), lower_case, upper_case); /* add in the last part */
	io_data = rtrim (io_data) || NL;		/* and make it look like tty input */

	if length (io_data) > a_nelem then a_nelemt = a_nelem; /* only give back up to limit */
	else a_nelemt = length (io_data);

	substr (addrel (a_bufp, a_offset) -> based_string, 1, a_nelemt) = io_data; /* return the data */

	return;

make_dd_entry: proc (a_devx, dd_idx, ec);

dcl  a_devx fixed bin;
dcl  dd_idx fixed bin;
dcl  ec fixed bin (35);
dcl  idx fixed bin;

	     dd_idx = 0;				/* initialize output index */

	     do idx = 1 to dd.last_used while (dd_idx = 0); /* look for a duplicate entry */
		if dd.next_idx (idx) = 0 then		/* not in free list */
		     if dd.devx (idx) = a_devx then dd_idx = idx; /* found a match */
	     end;

	     if dd_idx = 0 then do;			/* must make an entry */
		if dd.free_idx < 0 then do;		/* no free entries, extend max used */
		     if dd.last_used = hbound (dd.entries, 1) then do;
			ec = error_table_$notalloc;
			return;
		     end;
		     dd_idx, dd.last_used = dd.last_used + 1; /* bump the count */
		end;
		else do;				/* take a free entry */
		     dd_idx = dd.free_idx;
		     dd.free_idx = dd.next_idx (dd_idx); /* shorten chain by one link */
		     dd.next_idx (dd_idx) = 0;	/* remove this from the chain */
		end;
		dd.devx (dd_idx) = a_devx;		/* assign the new device index */
	     end;
	     else ec = error_table_$namedup;		/* found a match!  WHY? */

	     return;


find_dd_entry: entry (a_devx, dd_idx, ec);

	     dd_idx = 0;				/* initialize output index */

	     do idx = 1 to dd.last_used while (dd_idx = 0); /* look for a duplicate entry */
		if dd.next_idx (idx) = 0 then		/* not in free list */
		     if dd.devx (idx) = a_devx then dd_idx = idx; /* found a match */
	     end;

	     if dd_idx = 0 then ec = error_table_$noentry;

	     return;

delete_dd_entry: entry (dd_idx);

	     dd.devx (dd_idx) = 0;			/* make the entry invalid */
	     dd.ddp (dd_idx) = null;
	     dd.adp (dd_idx) = null;

	     dd.next_idx (dd_idx) = dd.free_idx;	/* put at the head of the free chain */
	     dd.free_idx = dd_idx;

	     return;

	end make_dd_entry;




     end g115_as_;
