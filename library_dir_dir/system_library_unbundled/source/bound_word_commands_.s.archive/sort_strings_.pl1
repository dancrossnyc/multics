/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


sort_strings_: proc (pm_Ap, pm_count);

/*
   Algorithm 347
   AN EFFICIENT ALGORITHM FOR SORTING WITH MINIMAL STORAGE
   Richard C. Singleton
   CACM 12, Number 3, March 1969, pp. 185-7

   Converted to Multics PL/I by Paul A. Green - April 6, 1974

   Modified to sort adjustable character strings instead of fixed binary numbers
   by Jerry Stern - May 30, 1974

   Modified 10/19/77 by J. Stern to add $indirect entry
*/

/* Parameters */

dcl  pm_Ap ptr;					/* ptr to array of string descriptors */
dcl  pm_count fixed bin (24);				/* number of strings to sort */
dcl  pm_Ip ptr;					/* ptr to array of "indirect" data */


/* Automatic */

dcl  ind_sw bit (1) aligned;
dcl (Ap, Ip) ptr;
dcl (first, last, median, low, high) fixed bin (24);
dcl  depth fixed bin;

dcl 1 stack (0:20) aligned,
    2 first fixed bin (24),
    2 last fixed bin (24);

dcl 1 A_temp aligned like A_entry;

dcl  I_temp fixed bin (71);


/* Based */

dcl  cstring char (262144) based;

dcl 1 A_entry aligned based,
    2 p ptr unal,
    2 l fixed bin;

dcl 1 A (pm_count) aligned based (Ap) like A_entry;

dcl  I (pm_count) fixed bin (71) based (Ip);


/* Builtins */

dcl (divide, substr) builtin;

	ind_sw = "0"b;
	go to join;


indirect:	entry (pm_Ap, pm_count, pm_Ip);

	ind_sw = "1"b;
	Ip = pm_Ip;

join:	Ap = pm_Ap;
	depth = 0;
	first = 1;
	last = pm_count;
	go to L4;


L1:	median = divide (first + last, 2, 24, 0);
	low = first;
	high = last;

	if substr (A (first).p -> cstring, 1, A (first).l) > substr (A (median).p -> cstring, 1, A (median).l)
	then call swap (first, median);

	if substr (A (last).p -> cstring, 1, A (last).l) < substr (A (median).p -> cstring, 1, A (median).l)
	then do;
	     call swap (last, median);

	     if substr (A (first).p -> cstring, 1, A (first).l) > substr (A (median).p -> cstring, 1, A (median).l)
	     then call swap (first, median);

	end;

	A_temp = A (median);

L2:	do high = high -1 by -1
		while (substr (A (high).p -> cstring, 1, A (high).l) > substr (A_temp.p -> cstring, 1, A_temp.l));
	end;

	do low = low +1 by 1
		while (substr (A (low).p -> cstring, 1, A (low).l) < substr (A_temp.p -> cstring, 1, A_temp.l));
	end;

	if low <= high then do;
	     call swap (high, low);
	     go to L2;
	end;

	if (high - first) > (last - low) then do;
	     stack.first (depth) = first;
	     stack.last (depth) = high;
	     first = low;
	end;

	else do;
	     stack.first (depth) = low;
	     stack.last (depth) = last;
	     last = high;
	end;

	depth = depth +1;

L4:	if (last - first) > 10 then go to L1;

	if first = 1 then
	     if first < last then go to L1;

	do first = first +1 to last;
	     A_temp = A (first);
	     if ind_sw then I_temp = I (first);
	     do low = first -1 by -1
		     while (substr (A (low).p -> cstring, 1, A (low).l) > substr (A_temp.p -> cstring, 1, A_temp.l));
		A (low +1) = A (low);
		if ind_sw then I (low +1) = I (low);
	     end;
	     A (low +1) = A_temp;
	     if ind_sw then I (low +1) = I_temp;
	end;


	depth = depth -1;
	if depth >= 0 then do;
	     first = stack.first (depth);
	     last = stack.last (depth);
	     go to L4;
	end;
	return;


swap:	proc (i, j);

dcl (i, j) fixed bin (24);
dcl 1 A_swap aligned like A_entry;
dcl  I_swap fixed bin (71);


	     A_swap = A (i);
	     A (i) = A (j);
	     A (j) = A_swap;

	     if ind_sw
	     then do;
		I_swap = I (i);
		I (i) = I (j);
		I (j) = I_swap;
	     end;

	end swap;


     end sort_strings_;
