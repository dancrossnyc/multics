/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


alphabetize_strings_: proc (pm_data_p, pm_count);

/* A procedure to sort a collection of strings into alphabetical order. */

/* Coded 10/19/77 by J. Stern */


/* Parameters */

dcl  pm_data_p ptr;					/* ptr to an array of string descriptors */
dcl  pm_count fixed bin (21);				/* number of strings to alphabetize */


/* Automatic */

dcl  code fixed bin (35);
dcl  temp_ptrs (3) ptr;
dcl (data_p, new_data_p) ptr;
dcl  buffer_p ptr;
dcl  max_seglen fixed bin (21);
dcl  buffer_len fixed bin (21);
dcl  str_p ptr;
dcl  str_len fixed bin (21);
dcl  i fixed bin (21);
dcl  saved_blen fixed bin (21);


/* Based */

dcl 1 sort_data (pm_count) aligned based (data_p) like sort_entry;

dcl 1 new_sort_data (pm_count) aligned based (new_data_p) like sort_entry;

dcl 1 sort_entry aligned based,
    2 string_p ptr unal,
    2 string_len fixed bin (21);

dcl  buffer char (buffer_len) based (buffer_p);
dcl  buf_vector (buffer_len) char (1) based (buffer_p);
dcl  cstring char (str_len) based (str_p);


/* Static */

dcl  sys_info$max_seg_size fixed bin (21) ext;
dcl  error_table_$action_not_performed fixed bin (35) ext;

dcl  capital_letters char (26) int static options (constant) init ("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
dcl  small_letters char (26) int static options (constant) init ("abcdefghijklmnopqrstuvwxyz");


/* Conditions */

dcl  cleanup condition;


/* Builtins */

dcl (substr, addr, search, translate, null, verify) builtin;


/* Entries */

dcl  get_temp_segments_ entry (char (*), (*) ptr, fixed bin (35));
dcl  release_temp_segments_ entry (char (*), (*) ptr, fixed bin (35));
dcl  sub_err_ entry options (variable);
dcl  sort_strings_$indirect entry (ptr, fixed bin (21), ptr);
dcl  ascii_to_abcdef_ entry (char (*), char (*));

/* get some temporary segments */

	temp_ptrs (*) = null;
	on cleanup call cleaner;

retry:	call get_temp_segments_ ("alphabetize_strings_", temp_ptrs, code);
	if code ^= 0
	then do;
	     call sub_err_ (code, "alphabetize_strings_", "h", null, (0), "Cannot get temporary segments.");
	     go to retry;
	end;

/* build a new array of string descriptors */
/* transform strings containing control chars or capital letters */

	new_data_p = temp_ptrs (1);
	buffer_p = temp_ptrs (2);
	data_p = pm_data_p;
	max_seglen = 4 * sys_info$max_seg_size;
	buffer_len = 0;

	do i = 1 to pm_count;
	     str_p = sort_data (i).string_p;
	     str_len = sort_data (i).string_len;
	     if verify (cstring, small_letters) = 0
	     then do;				/* plain vanilla string, use in place */
		new_sort_data (i) = sort_data (i);
		go to next_string;
	     end;

	     if buffer_len + 2*str_len + 1 > max_seglen	/* buffer is full */
	     then do;				/* switch to next temp seg */
		if buffer_p = temp_ptrs (3)		/* already used spare temp seg */
		then call sub_err_ (error_table_$action_not_performed, "alphabetize_strings_", "s", null, (0),
		     "Temporary storage limit exceeded.");

		call ascii_to_abcdef_ (buffer, buffer); /* rearrange char codes so letters precede all else */
		buffer_p = temp_ptrs (3);
		buffer_len = 0;
	     end;

	     saved_blen = buffer_len;
	     if search (cstring, capital_letters) ^= 0
	     then do;
		substr (buffer, buffer_len + 1, str_len + 1) = translate (cstring, small_letters, capital_letters);
		buffer_len = buffer_len + str_len + 1;	/* extra +1 to insert SPACE */
	     end;

	     substr (buffer, buffer_len+1, str_len) = cstring;
	     buffer_len = buffer_len + str_len;

	     new_sort_data (i).string_p = addr (buf_vector (saved_blen+1));
	     new_sort_data (i).string_len = buffer_len - saved_blen;
next_string:
	end;

	call ascii_to_abcdef_ (buffer, buffer);		/* rearrange char codes so letters precede all else */

	call sort_strings_$indirect (new_data_p, pm_count, data_p);

	call cleaner;

	return;

cleaner:	proc;

	     if temp_ptrs (1) ^= null
	     then call release_temp_segments_ ("alphabetize_strings_", temp_ptrs, code);

	end cleaner;


     end alphabetize_strings_;
