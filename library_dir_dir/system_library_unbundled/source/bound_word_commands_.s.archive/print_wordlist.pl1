/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(85-09-13,Spitzer), approve(85-09-13,MCR6618),
     audit(85-10-30,Blair), install(85-12-16,MR12.0-1001):
     Allow to read/write
     MSFs.
                                                   END HISTORY COMMENTS */

print_wordlist: pwl: proc;

/* Coded 11/14/77 by J. Stern */
/* Modified 10/06/83 by Charlie Spitzer. make -of use equal names. phx14967
		 make empty wordlist not print error. phx13055
*/

/* Automatic */

dcl  component fixed bin;
dcl  ring_brackets (3) fixed bin (6);
dcl  max_seg_size fixed bin (24);
dcl  msf bit (1) aligned;
dcl  type fixed bin (2);
dcl (seg_output, got_pname, first_time) bit (1) aligned init ("0"b);
dcl  atd char (256) varying;
dcl  argno fixed bin;
dcl  ap ptr;
dcl (input_ptr, output_ptr) ptr init (null);
dcl  nargs fixed bin;
dcl  al fixed bin;
dcl  (fcb_ptr, temp_ptr) ptr;
dcl  isaved fixed bin;
dcl (cols, rows) fixed bin (21);
dcl  max_cols fixed bin;
dcl  last_col_rows fixed bin;
dcl  code fixed bin (35);
dcl (dname, of_dname) char (168);
dcl (ename, of_ename) char (32);
dcl  bc fixed bin (24);
dcl (c, r, i) fixed bin (21);
dcl (input_len, output_len) fixed bin (21);
dcl  word_ptr ptr;
dcl (word_len, real_len) fixed bin (21);
dcl (nwords, words_per_page) fixed bin (21);
dcl (end_of_col, ntabs, nspaces, line_position) fixed bin (21);
dcl  col_width fixed bin (21);
dcl (page_len, vert_margin, input_idx) fixed bin (21);
dcl (system_area_ptr, words_ptr) ptr;
dcl (first_word_row, word_index) fixed bin;
		 

/* Based */

dcl  arg char (al) based (ap);
dcl  input_cs char (input_len) based (input_ptr);
dcl  output_cs char (output_len) based (temp_ptr);
dcl  word char (word_len) based (word_ptr);
dcl  words (words_per_page) char (col_width * 3) based (words_ptr);	/* holds words (possibly underlined) from file */
dcl  system_area area based (system_area_ptr);


/* Conditions */

dcl  cleanup condition;


/* Static */

dcl  BS char (1) int static options (constant) init ("");
dcl  NL char (1) int static options (constant) init ("
");
dcl  HT char (1) int static options (constant) init ("	");
dcl  NP char (1) int static options (constant) init ("");
dcl  whoami char (32) int static options (constant) init ("print_wordlist");

dcl (error_table_$badopt,
     error_table_$dirseg,
     error_table_$wrong_no_of_args,
     error_table_$noarg,
     error_table_$long_record,
     error_table_$short_record,
     error_table_$end_of_info) ext fixed bin (35);
dcl  iox_$user_output ext ptr;
dcl  sys_info$max_seg_size fixed bin(35) ext static;

/* Builtins */

dcl (addr, copy, divide, hbound, index, length, max, mod, null, rtrim, search, substr) builtin;


/* Entries */

dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr ext entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  com_err_ ext entry options (variable);
dcl  get_system_free_area_ entry() returns(ptr);
dcl  get_equal_name_ entry (char(*), char(*), char(32), fixed bin(35));
dcl  expand_pathname_$add_suffix ext entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  iox_$attach_name entry (char(*), ptr, char(*), ptr, fixed bin(35));
dcl  iox_$open entry (ptr, fixed bin, bit(1) aligned, fixed bin(35));
dcl  iox_$close entry (ptr, fixed bin(35));
dcl  iox_$detach_iocb entry (ptr, fixed bin(35));
dcl  iox_$destroy_iocb entry (ptr, fixed bin(35));
dcl  iox_$get_line entry (ptr, ptr, fixed bin(21), fixed bin(21), fixed bin(35));
dcl  unique_chars_ entry (bit(*)) returns(char(15));
dcl  cv_dec_check_ ext entry (char (*), fixed bin (35)) returns (fixed bin);
dcl  get_line_length_$switch entry (ptr, fixed bin (35)) returns (fixed bin);
dcl  get_temp_segment_ entry (char(*), ptr, fixed bin(35));
dcl  release_temp_segment_ entry (char(*), ptr, fixed bin(35));
dcl  hcs_$make_seg entry (char(*), char(*), char(*), fixed bin(5), ptr, fixed bin(35));
dcl  hcs_$status_minf entry (char(*), char(*), fixed bin(1), fixed bin(2), fixed bin(24), fixed bin(35));
dcl  initiate_file_ entry (char(*), char(*), bit(*), ptr, fixed bin(24), fixed bin(35));
dcl  terminate_file_ entry (ptr, fixed bin(24), bit(*), fixed bin(35));
dcl  pathname_ entry (char(*), char(*)) returns(char(168));
dcl  make_msf_ entry (char(*), char(*), (3) fixed bin(6), fixed bin(35));
dcl  unmake_msf_ entry (char(*), char(*), bit(1), (3) fixed bin(6), fixed bin(35));
dcl  msf_manager_$open entry (char(*), char(*), ptr, fixed bin(35));
dcl  msf_manager_$close entry (ptr);
dcl  msf_manager_$get_ptr entry (ptr, fixed bin, bit(1), ptr, fixed bin(24), fixed bin(35));


/* examine arguments */

	call cu_$arg_count (nargs);
	if nargs = 0 then do;
noarg:	     code = error_table_$noarg;
usage:	     call com_err_ (code, whoami,
		"^/Usage: print_wordlist path {-columns N} {-page_length N} {-vertical_margin N} {-output_file path}");
	     return;
	end;

	cols, page_len, vert_margin = -1;
	col_width = 20;
	do argno = 1 to nargs;
	     call cu_$arg_ptr (argno, ap, al, code);

	     if index (arg, "-") ^= 1 then do;		/* not an option, must be pathname */
		if got_pname then do;		/* already have pathname => error */
		     code = error_table_$wrong_no_of_args;
		     go to usage;
		end;
		call expand_pathname_$add_suffix (arg, "wl", dname, ename, code);
		if code ^= 0 then do;
bad_path:		     call com_err_ (code, whoami, arg);
		     return;
		end;
		got_pname = "1"b;
	     end;
	     else if arg = "-cols" | arg = "-columns"
	     then do;
		call next_arg_num (cols);
		if code ^= 0 | cols < 1 then do;
		     call com_err_ (0, whoami, "Invalid column count.  ^a", arg);
		     return;
		end;
	     end;
	     else if arg = "-cw" | arg = "-column_width"
	     then do;
		call next_arg_num (col_width);
		if code ^= 0 | col_width < 2
		then do;
		     call com_err_ (0, whoami, "Invalid column width.  ^a", arg);
		     return;
		end;
	     end;
	     else if arg = "-pl" | arg = "-page_length"
	     then do;
		call next_arg_num (page_len);
		if code ^= 0 | page_len < 1
		then do;
		     call com_err_ (0, whoami, "Invalid page length.  ^a", arg);
		     return;
		end;
	     end;
	     else if arg = "-vm" | arg = "-vertical_margin"
	     then do;
		call next_arg_num (vert_margin);
		if code ^= 0 | vert_margin < 0
		then do;
		     call com_err_ (0, whoami, "Invalid vertical margin.  ^a", arg);
		     return;
		end;
	     end;
	     else if arg = "-of" | arg = "-output_file"
	     then do;
		call next_arg;
		call expand_pathname_ (arg, of_dname, of_ename, code);
		if code ^= 0 then go to bad_path;
		if search (rtrim (of_ename), "%=") ^= 0 then do;
		     call get_equal_name_ (ename, (of_ename), of_ename, code);
		     if code ^= 0 then go to bad_path;
		     end;
		seg_output = "1"b;
	     end;
	     else do;
		call com_err_ (error_table_$badopt, whoami, arg);
		return;
	     end;
	end;
	if ^got_pname				/* no pathname given */
	then go to noarg;

	if page_len = -1
	then if seg_output
	     then page_len = 60;
	     else page_len = 66;
	if vert_margin = -1
	then if seg_output
	     then vert_margin = 0;
	     else vert_margin = 3;

	rows = page_len - 2 * vert_margin;
	if rows < 1
	then do;
	     call com_err_ (0, whoami, "Page length of ^d too small for vertical margin of ^d.", page_len, vert_margin);
	     return;
	end;

	if seg_output
	then if cols = -1
	     then cols = max (divide (136, col_width, 17, 0), 1); /* set default cols for seg output */
	     else;
	else do;					/* not seg output, check line length */
	     i = get_line_length_$switch (iox_$user_output, code);
	     max_cols = max (divide (i, col_width, 17, 0), 1);
	     if code = 0
	     then if cols > max_cols then do;
		     call com_err_ (0, whoami, "Line length too small for specified number of columns.");
		     return;
		end;
	     if cols = -1 then cols = max_cols;		/* set default for user_output */
	end;

/* open input segment */

	fcb_ptr, temp_ptr, input_ptr, output_ptr, words_ptr = null;
	system_area_ptr = get_system_free_area_ ();
	component = 0;

	on cleanup call cleaner;

	call hcs_$status_minf (dname, ename, 1, type, bc, code);
	if code ^= 0 then call input_seg_error;
	if type = 2
	then if bc = 0
	     then do;
		code = error_table_$dirseg;
		call input_seg_error;
		end;
	     else msf = "1"b;
	else msf = "0"b;

	if msf then do;
	     atd = "vfile_ " || rtrim (dname);
	     atd = atd || ">";
	     atd = atd || ename;
	     call iox_$attach_name (unique_chars_ (""b)||".pwl", input_ptr, (atd), null, code);
	     if code ^= 0 then call input_seg_error;
	     call iox_$open (input_ptr, 1, "0"b, code);	/* open for input */
	     if code ^= 0 then call input_seg_error;

	     if seg_output then do;			/* make output seg */
		atd = "vfile_ " || rtrim (of_dname);
		atd = atd || ">";
		atd = atd || of_ename;

		call iox_$attach_name (unique_chars_ (""b)||".pwl", output_ptr, (atd), null, code);
		if code ^= 0 then call output_seg_error;
		call iox_$open (output_ptr, 2, "0"b, code);  /* open for output */
		if code ^= 0 then call output_seg_error;
		end;
	     else output_ptr = null;
	     end;
	else do;
	     call initiate_file_ (dname, ename, R_ACCESS, input_ptr, bc, code);
	     if input_ptr = null then call input_seg_error;

	     input_len = divide (bc+8, 9, 24, 0);	/* get character count */
	     input_idx = 1;				/* character index */

	     if seg_output then do;
		call hcs_$make_seg (of_dname, of_ename, "", RW_ACCESS_BIN, output_ptr, code);
		if output_ptr = null
		then if code ^= error_table_$dirseg
		     then call output_seg_error;
		     else do;
			call hcs_$status_minf (of_dname, of_ename, 1, type, bc, code);
			if code ^= 0 then call output_seg_error;
			if type = 2
			then if bc = 0
			     then do;
				code = error_table_$dirseg;
				call output_seg_error;
				end;

/* make a SSF from the MSF, but don't save any contents. */

			call unmake_msf_ (of_dname, of_ename, "0"b, ring_brackets, code);
			if code ^= 0 then call output_seg_error;

			call initiate_file_ (of_dname, of_ename, RW_ACCESS, output_ptr, bc, code);
			if code ^= 0 then call output_seg_error;
			end;

		if output_ptr = input_ptr then do;
		     call com_err_ (0, whoami, "Input and output files are the same. ^a and ^a",
			pathname_ (dname, ename), pathname_ (of_dname, of_ename));
		     goto error;
		     end;
		temp_ptr = output_ptr;		/* build output segment directly in segment, not temp seg. */
		end;
	     end;

	if temp_ptr = null then do;
	     call get_temp_segment_ (whoami, temp_ptr, code);
	     if code ^= 0
	     then do;
		call com_err_ (code, whoami, "Cannot get temporary segment.");
		go to error;
		end;
	     end;

	if output_ptr = null
	then output_ptr = iox_$user_output;		/* writing to terminal */
	output_len = 0;


/* now build the output segment one page at a time */

	first_time = "1"b;
	words_per_page = rows * cols;
	allocate words in (system_area) set (words_ptr);

	max_seg_size = sys_info$max_seg_size * 4;

	do while ("1"b);
	     call fill_word_array (nwords);
	     if nwords = 0
	     then if first_time
		then do;
		     call com_err_ (0, whoami, "Wordlist empty. ^a", pathname_ (dname, ename));
		     goto error;
		     end;
		else goto EOF;			/* end of file */
	     else first_time = "0"b;

	     if nwords < cols
	     then do;
		cols = nwords;
		rows = 1;
		end;

	     word_index, first_word_row = 1;
	     call output (copy (NL, vert_margin), vert_margin);

	     if rows * cols > nwords
	     then rows = divide (nwords + cols -1, cols, 17, 0); /* minimize length of last page */
	     last_col_rows = rows - (rows * cols - nwords);

	     do r = 1 to rows;
		if r > 1
		then call output (NL, 1);
		if r = last_col_rows + 1
		then cols = cols - 1;

		do c = 1 to cols;
		     if first_word_row > rows then goto EOP;
		     word_ptr = addr (words (word_index));
		     word_len = length (rtrim (words (word_index)));
		     word_index = word_index + rows;
		     if word_index > nwords
		     then word_index, first_word_row = first_word_row + 1;

		     i = index (word, BS);		/* check for backspace */
		     if i ^= 0
		     then do;
			isaved = col_width - 2;
			real_len = i - 2;
			do i = i + 1 to word_len while (real_len <= col_width-1);
			     if substr (word, i, 1) = BS
			     then real_len = real_len - 1;
			     else do;
				real_len = real_len + 1;
				if real_len = col_width - 2
				then isaved = i;
			     end;
			end;
			if real_len > col_width - 1
			then word_len = isaved;
		     end;
		     else do;			/* no backspaces */
			real_len = word_len;
			if word_len > col_width - 1
			then word_len = col_width - 2;
		     end;

		     call output (word, word_len);
		     if real_len > col_width - 1
		     then do;
			real_len = col_width - 1;
			call output ("*", 1);
		     end;

		     if c < cols
		     then do;
			end_of_col = c * col_width;
			line_position = end_of_col - col_width + real_len;
			ntabs = divide (end_of_col, 10, 17, 0) - divide (line_position, 10, 17, 0);
			if ntabs > 0
			then do;
			     call output (copy (HT, ntabs), ntabs);
			     line_position = line_position - mod (line_position, 10) + 10 * ntabs;
			end;

			nspaces = end_of_col - line_position;
			if nspaces > 0
			then call output (copy ("", nspaces), nspaces);
		     end;
		end;				/* do cols */
next_row:						/* end of line */
	     end;					/* do rows */

EOP:
	     if seg_output
	     then if vert_margin = 0
		then call output (NP, length (NP));
	          else call output (copy (NL, vert_margin - length (NP))||NP, vert_margin);
	     else do;
		call output (copy (NL, vert_margin+1), vert_margin+1);
		call iox_$put_chars (output_ptr, temp_ptr, output_len, code);
		if code ^= 0
		then call com_err_ (code, whoami, "Attempting to write on user_output switch.");
		output_len = 0;			/* start at beginning of segment again */
		end;

	end;					/* do forever */

EOF:						/* come here on end of input file */
	if output_len > 0
	then if msf
	     then do;
		call iox_$put_chars (output_ptr, temp_ptr, output_len, code);
		if code ^= 0 then call com_err_ (code, whoami, "Attempting to write on user_output switch.");
		end;
	     else do;
		call terminate_file_ (output_ptr, output_len * 9, TERM_FILE_TRUNC_BC_TERM, code);
		if code ^= 0 then call com_err_ (code, whoami, "^a", pathname_ (dname, ename));
		end;

error:
	call cleaner;
	return;

input_seg_error:
     proc;

input_seg:
          call com_err_ (code, whoami, "^a", pathname_ (dname, ename));
	go to error;

output_seg_error:
     entry;

	dname = of_dname;
	ename = of_ename;
	go to input_seg;

	end input_seg_error;

cleaner:	proc;					/* cleanup handler */

	     if output_ptr = iox_$user_output | output_ptr = temp_ptr
	     then output_ptr = null;

	     if temp_ptr ^= null
	     then if ^msf & seg_output
		then ;
		else call release_temp_segment_ (whoami, temp_ptr, (0));

	     do input_ptr = input_ptr, output_ptr;
		if input_ptr ^= null
		then if msf then do;
			call iox_$close (input_ptr, (0));
			call iox_$detach_iocb (input_ptr, (0));
			call iox_$destroy_iocb (input_ptr, (0));
			end;
		     else call terminate_file_ (input_ptr, 0, TERM_FILE_TERM, (0));
		end;

	if fcb_ptr ^= null
	then call msf_manager_$close (fcb_ptr);

	if words_ptr ^= null then free words in (system_area);
	return;

	end cleaner;



next_arg:	proc;					/* gets next argument */


	     argno = argno + 1;
	     if argno > nargs
	     then go to noarg;
	     call cu_$arg_ptr (argno, ap, al, code);

	end next_arg;



next_arg_num: proc (num);				/* gets next argument, converts to fixed bin */

dcl  num fixed bin (21);


	     call next_arg;
	     num = cv_dec_check_ (arg, code);

	end next_arg_num;

fill_word_array:
     proc (cnt);

dcl  cnt fixed bin (21);
dcl  nread fixed bin (21);

	cnt = 1;
	do while (cnt ^> hbound (words, 1));
	     if msf then do;
		call iox_$get_line (input_ptr, addr (words (cnt)), length (words (cnt)), nread, code);
		if code ^= 0
		then if code = error_table_$end_of_info
		     then do;
END_OF_INPUT:		cnt = cnt - 1;
			return;
			end;
		     else if code = error_table_$long_record | code = error_table_$short_record
			then ;			/* ok to get this one */
		     else call input_seg_error;
		else if nread = 1
		     then goto read_next_word;	/* blank line */
		else substr (words (cnt), nread) = "";	/* take out NL + leftover junk */
		end;
	     else do;
		if input_idx > input_len then goto END_OF_INPUT;
		word_len = index (substr (input_cs, input_idx), NL) -1;
		if word_len = 0
		then do;
		     input_idx = input_idx + 1;
		     goto read_next_word;		/* blank line */
		     end;
		if word_len = -1
		then word_len = input_len - input_idx + 1;   /* final newline missing */
		words (cnt) = substr (input_cs, input_idx, word_len);
		input_idx = input_idx + word_len + 1;	/* bump character index over this word */
		end;

	     cnt = cnt + 1;
read_next_word:
	     end;

	cnt = cnt - 1;
	return;

	end fill_word_array;
%page;
output:
     proc (str, len) recursive;

dcl  str char (*) parameter;				/* string to output */
dcl  len fixed bin (21) parameter;			/* how long it is */
dcl  chars_that_fit fixed bin (21);

	if seg_output
	then if msf
	     then do;
		call iox_$put_chars (output_ptr, addr (str), len, code);
		if code ^= 0 then call output_seg_error;
		return;
		end;
	     else if output_len + len + 1 > max_seg_size
		then do;				/* output segment grows to an MSF */

/* Fill end of segment with whatever fits from the input string */

		     chars_that_fit = max_seg_size - output_len;
		     substr (output_cs, output_len + 1, chars_that_fit) = str;

		     if component = 0 then do;

/* Terminate the output file, make it into an MSF, then open using
   msf_manager_. Continue to use pointer I/O on each component which has to
   be more efficient than using vfile_. */

			call terminate_file_ (output_ptr, max_seg_size * 9, TERM_FILE_BC | TERM_FILE_TERM, code);
			if code ^= 0 then call output_seg_error;

			call make_msf_ (of_dname, of_ename, ring_brackets, code);
			if code ^= 0 then call output_seg_error;

			call msf_manager_$open (of_dname, of_ename, fcb_ptr, code);
			if code ^= 0 then call output_seg_error;

			call msf_manager_$get_ptr (fcb_ptr, 1, "1"b, output_ptr, bc, code);
			if code ^= 0 then call output_seg_error;
			component = 1;

			temp_ptr = output_ptr;
			end;
		     else do;

			call terminate_file_ (output_ptr, max_seg_size * 9, TERM_FILE_BC | TERM_FILE_TERM, code);
			if code ^= 0 then call output_seg_error;

			call msf_manager_$get_ptr (fcb_ptr, component+1, "1"b, output_ptr, bc, code);
			if code ^= 0 then call output_seg_error;

			component = component + 1;
			temp_ptr = output_ptr;
			end;

		     output_len = 0;		/* empty output file */

/* Put rest of input string at the head of the output buffer. Since the string
   passed might not be len chars long, pad with spaces if the difference is
   negative. */

		     if len > chars_that_fit
		     then call output (substr (str, chars_that_fit + 1), len - chars_that_fit);
		     return;
		     end;

	substr (output_cs, output_len + 1, len) = str;
	output_len = output_len + len;

	return;
	end output;
%page;
%include access_mode_values;
%include terminate_file;

     end print_wordlist;
