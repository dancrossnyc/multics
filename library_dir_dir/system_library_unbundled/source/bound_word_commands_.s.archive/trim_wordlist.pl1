/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(85-09-13,Spitzer), approve(85-09-13,MCR6618),
     audit(85-10-30,Blair), install(85-12-16,MR12.0-1001):
     Allow to read/write
     MSFs.
  2) change(88-01-01,Gilcrease), approve(88-02-05,MCR7834),
     audit(88-02-05,Blair), install(88-02-16,MR12.2-1023):
               Fix trim error when first letter cap, and contains '.
                                                   END HISTORY COMMENTS */

trim_wordlist: twl: proc;

/* The trim_wordlist command removes from a specified wordlist all
   words found in a specified sequence of dictionaries.  The dictionaries
   are consulted in order.  If the "notrim" attribute is enabled
   for a word found in a dictionary,  the word is not deleted and
   subsequent dictionaries in the sequence, if any, are not consulted
   for that word.
*/

/* Coded 9/28/77 by J. Stern */
/* Modified 7/7/81 by P. Benjamin to fix bug where bad dict in search list stops processing */

/* Automatic */

dcl  msf bit (1) aligned;
dcl (nargs, argno) fixed bin;
dcl  ap ptr;
dcl  al fixed bin;
dcl  code fixed bin (35);
dcl  system_area_ptr ptr;
dcl  ndict fixed bin;
dcl  temp_ndict fixed bin;
dcl (brief, exact_match, have_wl_path) bit (1) aligned;
dcl  (temp_dir, dname) char (168);
dcl  (temp_name, ename) char (32);
dcl  temp_ptr ptr;
dcl  type fixed bin (2);
dcl  bc fixed bin (24);
dcl  wl_ptr ptr;
dcl (wl_len, wl_ix) fixed bin (21);
dcl  switch char (32);
dcl  atd char (256) varying;
dcl  dictx fixed bin;
dcl (nwords, saved_nwords, original_nwords) fixed bin (21);
dcl  eof bit (1) aligned;
dcl  wordx fixed bin (21);
dcl  word_ptr ptr;
dcl  word_len fixed bin (21);
dcl  notrim bit (1) aligned;
dcl  new_wl_len fixed bin (21);
dcl  dip ptr;

dcl 1 get_key_info,
    2 flags like gk_header.flags,
    2 descriptor,
      3 hpoints bit (32) unal,
      3 notrim bit (1) unal,
      3 pad bit (3) unal,
    2 key_len fixed bin,
    2 key char (256);


/* Based */

dcl  arg char (al) based (ap);
dcl  system_area area based (system_area_ptr);
dcl  dict_iocbps (ndict) ptr based (dip);
dcl  wl_cs char (wl_len) based (wl_ptr);
dcl  wl_vec (wl_len) char (1) unal based (wl_ptr);
dcl  word char (word_len) based (word_ptr);

dcl  1 trim_data (nwords) aligned based (temp_ptr),
     2 wordp ptr unal,
     2 notrim bit (1) unal,
     2 pad bit (10) unal,
     2 wordl fixed bin (24) unal;

/* Static */

dcl  error_table_$dirseg fixed bin(35) ext static;
dcl  error_table_$short_record fixed bin(35) ext static;
dcl  error_table_$end_of_info fixed bin(35) ext static;
dcl  error_table_$fatal_error fixed bin (35) ext;
dcl  error_table_$noarg fixed bin (35) ext;
dcl  error_table_$zero_length_seg fixed bin (35) ext;
dcl  error_table_$badopt fixed bin (35) ext;
dcl  error_table_$no_record fixed bin (35) ext;
dcl  error_table_$no_key fixed bin (35) ext;

dcl  whoami char (13) int static options (constant) init ("trim_wordlist");
dcl  capital_letters char (26) int static options (constant) init ("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
dcl  small_letters char (26) int static options (constant) init ("abcdefghijklmnopqrstuvwxyz");
dcl  NL char (1) int static options (constant) init ("
");


/* Conditions */

dcl  cleanup condition;


/* Builtins */

dcl (substr, divide, null, rtrim, index, addr, verify, translate, search, mod, length, unspec) builtin;


/* Entries */

dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  com_err_ entry options (variable);
dcl  get_system_free_area_ entry (ptr);
dcl  get_pdir_ entry() returns(char(168));
dcl  expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl  absolute_pathname_ entry (char(*), char(*), fixed bin(35));
dcl  absolute_pathname_$add_suffix entry (char (*), char (*), char (*), fixed bin (35));
dcl  initiate_file_ entry (char(*), char(*), bit(*), ptr, fixed bin(24), fixed bin(35));
dcl  (get_temp_segment_, release_temp_segment_) entry (char (*), ptr, fixed bin (35));
dcl  hcs_$status_minf entry (char(*), char(*), fixed bin(1), fixed bin(2), fixed bin(24), fixed bin(35));
dcl  unique_chars_ entry (bit (*)) returns (char (15));
dcl  pathname_ entry (char(*), char(*)) returns(char(168));
dcl  iox_$attach_name entry (char(*), ptr, char(*), ptr, fixed bin(35));
dcl  iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  iox_$control entry (ptr, char (*), ptr, fixed bin (35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  iox_$destroy_iocb entry (ptr, fixed bin(35));
dcl  iox_$put_chars entry (ptr, ptr, fixed bin(21), fixed bin(35));
dcl  iox_$get_line entry (ptr, ptr, fixed bin(21), fixed bin(21), fixed bin(35));
dcl  delete_$path entry (char(*), char(*), bit(36) aligned, char(*), fixed bin(35));
dcl  ioa_ entry options (variable);
dcl  terminate_file_ entry (ptr, fixed bin(24), bit(*), fixed bin(35));
dcl  search_paths_$get entry (char (*), bit (36), char (*), ptr, ptr, fixed bin, ptr, fixed bin (35));
dcl  copy_ entry (ptr);

	wl_ptr, temp_ptr, dip, sl_info_p = null;	/* initialize ptrs */

/* find out how many args we have */

	call cu_$arg_count (nargs);
	if nargs < 1
	then do;
noarg:	     call com_err_ (error_table_$noarg, whoami, "^/Usage:  trim_wordlist wl_path {dict_paths} {-brief} {-exact_match}");
	     go to finish;
	end;

	on cleanup call cleaner;

/* allocate space for dictionary pathnames */

	sl_info_num_paths = nargs - 1;			/* upper limit on number of dict paths */
	call get_system_free_area_ (system_area_ptr);
	allocate sl_info in (system_area);

/* examine arguments */

	ndict = 0;
	brief, exact_match, have_wl_path = "0"b;
	temp_dir = get_pdir_ ();

	do argno = 1 to nargs;
	     call cu_$arg_ptr (argno, ap, al, code);
	     if index (arg, "-") ^= 1			/* not a control arg */
	     then if ^have_wl_path			/* don't have wordlist pathname yet */
		then do;
		     call expand_pathname_$add_suffix (arg, "wl", dname, ename, code);
		     if code ^= 0
		     then do;
			call com_err_ (code, whoami, arg);
			go to finish;
		     end;
		     have_wl_path = "1"b;		/* remember we have the wordlist pathname */
		end;
		else do;				/* must be a dictionary pathname */
		     ndict = ndict + 1;
		     call absolute_pathname_$add_suffix (arg, "dict", sl_info.pathname (ndict), code);
		     if code ^= 0
		     then do;
			call com_err_ (code, whoami, arg);
			go to finish;
		     end;
		end;

	     else if arg = "-td" | arg = "-temp_dir"
		then do;
		     call cu_$arg_ptr (argno+1, ap, al, code);
		     if code ^= 0 then do;
			call com_err_ (code, whoami, "After -temp_dir");
			return;
			end;
		     call absolute_pathname_ (arg, temp_dir, code);
		     if code ^= 0 then do;
			call com_err_ (code, whoami, "^a", arg);
			return;
			end;
		     argno = argno + 1;
		     end;

	     else if arg = "-bf" | arg = "-brief"
	     then brief = "1"b;

	     else if arg = "-exm" | arg = "-exact_match"
	     then exact_match = "1"b;

	     else do;
		call com_err_ (error_table_$badopt, whoami, arg);
		go to finish;
	     end;
	end;

	if ^have_wl_path
	then go to noarg;

/* if no dictionaries specified, get search list */

	if ndict = 0
	then do;
	     free sl_info in (system_area);
	     sl_info_p = null;

	     call search_paths_$get ("dict", "111111"b, "", null, system_area_ptr, sl_info_version_1, sl_info_p, code);
	     if code ^= 0
	     then do;
		call com_err_ (code, whoami, "Cannot get ""dict"" search list.");
		go to finish;
	     end;

	     ndict = sl_info.num_paths;
	end;

	call hcs_$status_minf (dname, ename, 1, type, bc, code);
	if code ^= 0 then goto bad_seg;

	if type = 2
	then if bc = 0
	     then do;
		code = error_table_$dirseg;
		goto bad_seg;
		end;
	     else msf = "1"b;
	else msf = "0"b;

	if msf
	then do;
/* open original word list */
	     switch = unique_chars_ ("0"b) || "." || whoami;
	     atd = "vfile_ " || rtrim (dname);
	     atd = atd || ">";
	     atd = atd || ename;

	     call iox_$attach_name (switch, wl_ptr, (atd), null, code);
	     if code ^= 0 then goto bad_seg;
	     
	     call iox_$open (wl_ptr, Stream_input, "0"b, code);
	     if code ^= 0 then goto bad_seg;

/* open temp file in [pd] to hold trimmed list */

	     temp_name, switch = unique_chars_ ("0"b) || "." || whoami;
	     atd = "vfile_ " || rtrim (temp_dir);
	     atd = atd || ">";
	     atd = atd || temp_name;

	     call iox_$attach_name (switch, temp_ptr, (atd), null, code);
	     if code ^= 0 then do;
		call com_err_ (code, whoami, "Attempting to attach temp file in [pd].");
		goto finish;
		end;

	     call iox_$open (temp_ptr, Stream_output, "0"b, code);
	     if code ^= 0 then do;
		call com_err_ (code, whoami, "Attempting to open a temp file in [pd].");
		goto finish;
		end;
	     end;
	else do;					/* get ptr to and length of the wordlist */
	     call initiate_file_ (dname, ename, RW_ACCESS, wl_ptr, bc, code);
	     if wl_ptr = null
	     then do;
bad_seg:		call com_err_ (code, whoami, "^a", pathname_ (dname, ename));
		go to finish;
		end;

	     wl_len = divide (bc, 9, 24, 0);		/* convert bit count to char count */
	     if wl_len = 0
	     then do;
		code = error_table_$zero_length_seg;
		go to bad_seg;
		end;
	     end;

/* if more than 1 dictionary, create temporary workspace */

	if ndict > 1 & ^msf
	then do;
	     call get_temp_segment_ (whoami, temp_ptr, code);
	     if code ^= 0
	     then do;
		call com_err_ (code, whoami, "Cannot get temp segment.");
		go to finish;
	     end;
	end;

/* open all of the dictionaries */

	allocate dict_iocbps in (system_area);
	dict_iocbps (*) = null;

	temp_ndict = 1;
	do dictx = 1 to ndict;
	     switch = unique_chars_ (""b) || "." || whoami;    /* use unique name for I/O switch */
	     atd = "vfile_ " || rtrim (sl_info.pathname (dictx));
	     atd = atd || " -share"; /* build attach description */
	     call iox_$attach_name (switch, dict_iocbps (temp_ndict), (atd), null, code);
	     if code ^= 0
		then call com_err_ (code, whoami, "Cannot attach switch.  ^a", switch);

	     else do;
		call iox_$open (dict_iocbps (temp_ndict), Keyed_sequential_input, "0"b, code);
		if code ^= 0
		     then do;
		     call com_err_ (code, whoami, "Cannot open file.  ^a", sl_info.pathname (dictx));
		     call iox_$detach_iocb (dict_iocbps (temp_ndict), code);
		end;
		else temp_ndict = temp_ndict + 1;
	     end;
	end;
	if temp_ndict = 1				/* No usable dicts */
	     then do;
	     call com_err_ (error_table_$fatal_error, whoami);
	     goto finish;
	end;
	ndict = temp_ndict - 1;			/* Now ndict is the number of usable dicts */
	
	get_key_info.flags.input_key = "1"b;
	get_key_info.input_desc = "0"b;
	get_key_info.desc_code = 0;
	get_key_info.rel_type = 0;
	get_key_info.head_size = 256;
	get_key_info.reset_pos = "0"b;
	get_key_info.flags.pad = ""b;
	get_key_info.version = gk_info_version_0;

/* now do the real work */

	if msf then call process_msf;
	else call process_non_msf;

/* report results if brief option not specified */

	if ^brief
	then call ioa_ ("number of words trimmed = ^d^/number of words remaining = ^d", original_nwords-nwords, nwords);

/* clean up and go home */

	if ^msf then do;
	    if new_wl_len + 1 <= wl_len then	         /* set to NUL */
  	       substr (wl_cs, new_wl_len + 1, 4 - mod (new_wl_len, 4)) = "   ";
	     call terminate_file_ (wl_ptr, 9 * new_wl_len, TERM_FILE_TRUNC_BC_TERM, code);
	     if code ^= 0
	     then call com_err_ (code, whoami, "^a", pathname_ (dname, ename));
	     end;

finish:	call cleaner;
	return;

cleaner:	proc;					/* cleanup procedure */

	     if dip ^= null
	     then do dictx = 1 to ndict;
		if dict_iocbps (dictx) ^= null
		then call close_file (dict_iocbps (dictx));
	     end;

	     if msf
	     then do;
		if wl_ptr ^= null then call close_file (wl_ptr);
		if temp_ptr ^= null then call close_file (temp_ptr);
		call delete_$path (temp_dir, temp_name, "101111"b, whoami, (0));
		wl_ptr, temp_ptr = null;
		end;
	     else do;
		if temp_ptr ^= null
		then call release_temp_segment_ (whoami, temp_ptr, (0));
		if wl_ptr ^= null
		then call terminate_file_ (wl_ptr, 0, TERM_FILE_TERM, (0));
		end;

	     if dip ^= null
	     then free dict_iocbps in (system_area);

	     if sl_info_p ^= null
	     then free sl_info in (system_area);

	end cleaner;

close_file:
     proc (iocbp);

dcl  iocbp ptr parameter;

	call iox_$close (iocbp, (0));
	call iox_$detach_iocb (iocbp, (0));
	call iox_$destroy_iocb (iocbp, (0));
	iocbp = null;

	return;
	end close_file;
%page;
process_non_msf:
     proc;

/* consult the dictionaries one at a time (in order) */
/* for each dictionary, look up all wordlist words */
/* for each word, either trim or retain as appropriate */
/* for the first dictionary, parse the wordlist as we go */
/* for the last dictionary, build the new trimmed wordlist as we go */

	wl_ix = 1;
	new_wl_len = 0;
	saved_nwords = wl_len;			/* upper limit on number of words in wordlist */

	do dictx = 1 to ndict;
	     eof = "0"b;
	     nwords = 0;

	     do wordx = 1 to saved_nwords while (^eof);

		if dictx = 1			/* first dictionary */
		then do;				/* find next word in wordlist */
		     word_len = index (substr (wl_cs, wl_ix), NL) -1;
		     if word_len = 0		/* a blank line, not legal but we'll tolerate it */
		     then go to advance_index;
		     if word_len = -1		/* wordlist does not end in NL, be kind */
		     then word_len = wl_len -wl_ix + 1; /* last word is rest of segment */
		     word_ptr = addr (wl_vec (wl_ix));
		     if word_len > 256		/* cannot be in dictionary */
		     then notrim = "1"b;		/* so don't bother looking */
		     else notrim = "0"b;
advance_index:	     wl_ix = wl_ix + word_len + 1;
		     if wl_ix > wl_len
		     then eof = "1"b;		/* end of wordlist reached */
		     if word_len = 0
		     then do;
			wordx = wordx - 1;		/* don't count this word */
			go to next_word;
		     end;
		end;

		else do;				/* get saved word description */
		     word_ptr = trim_data (wordx).wordp;
		     word_len = trim_data (wordx).wordl;
		     notrim = trim_data (wordx).notrim;
		end;

		if ^trim_word ()			/* retain this word */
		then do;
		     nwords = nwords + 1;
		     if dictx < ndict		/* not last dictionary */
		     then do;			/* save word description */
			trim_data (nwords).wordp = word_ptr;
			trim_data (nwords).wordl = word_len;
			trim_data (nwords).notrim = notrim;
		     end;
		     else do;			/* last dictionary, put word in new wordlist */
			substr (wl_cs, new_wl_len + 1, word_len) = word;
			new_wl_len = new_wl_len + word_len;
			substr (wl_cs, new_wl_len + 1, 1) = NL;
			new_wl_len = new_wl_len + 1;
		     end;
		end;
next_word:
	     end;

	     if dictx = 1
	     then original_nwords = wordx - 1;
	     saved_nwords = nwords;
	end;

          return;
	end process_non_msf;
%page;
process_msf:
     proc;

/* For each word, consult the dictionaries. If it is not to be trimmed, write
   the word out to the output temp file in [pd]. When done and if there has
   been at least one word changed, copy_ the temp file over the original. */

dcl  buffer char (256);
dcl  word_max_len fixed bin (21);
dcl  1 co like copy_options;

          word_ptr = addr (buffer);
	word_max_len = length (buffer);
	notrim = "0"b;
	nwords, original_nwords = 0;

	call iox_$get_line (wl_ptr, word_ptr, word_max_len, word_len, code);
	do while (code ^= error_table_$end_of_info);
	     if code ^= 0
	     then if code ^= error_table_$short_record
		then goto bad_seg;
	          else ;
	     else word_len = word_len - 1;

	     if word_len = 0 then goto skip_word;
	     original_nwords = original_nwords + 1;

	     do dictx = 1 to ndict;
		if trim_word ()
		then goto skip_word;
		end;

	     call iox_$put_chars (temp_ptr, word_ptr, word_len, code);
	     if code = 0 then do;
		call iox_$put_chars (temp_ptr, addr (NL), length (NL), code);
		nwords = nwords + 1;
		end;
	     if code ^= 0 then call com_err_ (code, whoami, "Writing word ""^a"" to temp file.", word);
	     
skip_word:
	     call iox_$get_line (wl_ptr, word_ptr, word_max_len, word_len, code);
	     end;

	if original_nwords = 0 then do;
	     code = error_table_$zero_length_seg;
	     goto bad_seg;
	     end;

	call close_file (temp_ptr);
	call close_file (wl_ptr);

	if nwords ^= original_nwords then do;		/* some got trimmed */
	     co.version = COPY_OPTIONS_VERSION_1;
	     co.caller_name = whoami;
	     co.source_dir = temp_dir;
	     co.source_name = temp_name;
	     co.target_dir = dname;
	     co.target_name = ename;
	     unspec (co.flags) = "0"b;
	     co.flags.delete = "1"b;			/* delete source when done */
	     co.flags.force = "1"b;			/* try to force access if needed */

	     unspec (co.copy_items) = "0"b;
	     co.copy_items.update = "1"b;

	     call copy_ (addr(co));			/* copy work file to input file */
	     if co.target_err_switch
	     then goto finish;			/* errors reported by sub_err_ */
	     end;

	return;
	end process_msf;

/* This procedure determines whether or not the current word should be trimmed.
   It first looks for the current word in the current dictionary.  If found,
   the word is trimmed unless it has the notrim attribute.  If the word is
   not found and the exact_match option was not specified, the word is checked
   for standard capitalization.  If the current word has only its first letter
   capitalized, it can be trimmed by the equivalent de-capitalized word if
   found in the dictionary.  If the current word has all letters capitalized,
   it can be trimmed by either a "first-cap" or "no-cap" equivalent
   word if found in the dictionary.
*/

trim_word: proc returns (bit (1) aligned);


	     if notrim
	     then return ("0"b);

	     get_key_info.key = word;
	     if known_word ()
	     then return ("1"b);

	     if exact_match
	     then return ("0"b);

	     if verify (word, capital_letters) = 0
	     then do;
		if word_len > 1
		then do;
		     substr (get_key_info.key, 2) = translate (substr (word, 2), small_letters, capital_letters);
		     if known_word ()
		     then return ("1"b);
		end;
check_no_cap:
		get_key_info.key = translate (word, small_letters, capital_letters);
		if known_word ()
		then return ("1"b);
	     end;
	     else if word_len > 1
	     then if search (substr (word, 1, 1), capital_letters) = 1
		& verify (substr (word, 2), small_letters) = 0
		then go to check_no_cap;
	     else if index (word, "'") ^= 0 then go to check_no_cap;

skip_word:     return ("0"b);

/* This procedure determines whether or not a specified word is "known",
   i.e., whether or not the word is defined in the current dictionary.
   Each dictionary is an indexed file.  A dictionary contains a word
   if the word is a key for the file.  A record descriptor is associated
   with each key.  The notrim flag (as well as other data) is kept in the
   record descriptor.
*/

known_word:    proc returns (bit (1) aligned);


		get_key_info.key_len = 256;
		call iox_$control (dict_iocbps (dictx), "get_key", addr (get_key_info), code);
		if code ^= 0
		then if code = error_table_$no_record | code = error_table_$no_key
		     then return ("0"b);
		     else do;
			call com_err_ (code, whoami, "Referencing dictionary ^a.  Word not trimmed.  ^a",
			     sl_info.pathname (dictx), word);
			go to dont_trim;
		     end;

		if get_key_info.notrim
		then do;
dont_trim:	     notrim = "1"b;
		     go to skip_word;
		end;

		return ("1"b);

	     end known_word;


	end trim_word;
%page;
/* include files */

%include ak_info;
%include sl_info;
%include copy_options;
%include copy_flags;
%include access_mode_values;
%include terminate_file;
%include iox_modes;

     end trim_wordlist;
