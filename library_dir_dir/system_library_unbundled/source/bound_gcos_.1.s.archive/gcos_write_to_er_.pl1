/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/*
   ********************************************************************************************
   ********************************************************************************************
   *
   *
   *	G C O S   W R I T E   T O   E R
   *
   *
   *	This procedure is called to write messages on the execution report
   *	of the executing GCOS job.  Its arguments are the same as ioa_.
   *	Multiple line messages are handled and case is preserved.
   *
   *
   *	Written by M. R. Jordan,  August 1977
   *
   ********************************************************************************************
   ********************************************************************************************
*/



gcos_write_to_er_: procedure ();



dcl  NL char (1) static int options (constant) init ("
");
dcl  arg_list_ptr ptr;
dcl  cu_$arg_count entry (fixed bin(24));
dcl  cu_$arg_list_ptr entry (ptr);
dcl  gcos_write_$ascii_ptr entry (ptr, char (*), bit (8));
dcl  index builtin;
dcl  ioa_$general_rs entry (ptr, fixed bin(24), fixed bin(24), char (*), fixed bin(24), bit (1), bit (1));
dcl  len fixed bin(24);
dcl  nargs fixed bin(24);
dcl  rtn_string char (257);
dcl  rtn_string_len fixed bin(24);
dcl  start fixed bin(24);
dcl  substr builtin;

/*

   If called with no arguments, return imediately.

*/


	call cu_$arg_count (nargs);
	if nargs <= 0 then return;


/*

   Get ready and call ioa_ to format the message.

*/


	call cu_$arg_list_ptr (arg_list_ptr);
	call ioa_$general_rs (arg_list_ptr, 1, 2, rtn_string, rtn_string_len, "0"b, "1"b);


/*

   If the returned string does not contain any useful information, then just quit.

*/


	if rtn_string_len = 0 then return;
	if substr (rtn_string, 1, rtn_string_len) = "" then return;


/*

   Now write the message to the execution report one line at a time.

*/


	start = 1;
	do while (rtn_string_len > 0);
	     len = index (substr (rtn_string, start, rtn_string_len), NL);
	     if len = 0 then len = rtn_string_len;
	     call gcos_write_$ascii_ptr (gcos_ext_stat_$er, substr (rtn_string, start, len), "11111100"b);
	     start = start+len;
	     rtn_string_len = rtn_string_len-len;
	end;


	return;

%include gcos_ext_stat_;


     end gcos_write_to_er_;
