/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* ******************************************************************************************
   *******************************************************************************************
   *
   *
   *	G C O S  F I L E  C A R D  P R O C E S S I N G
   *
   *
   *  This is the main driving module for the processing of the various gcos file
   *  assignment control cards. Cards processed by this module are the following:
   *
   *	$  PRINT  FC,LUD
   *	$  PUNCH  FC,LUD
   *	$  READ		(dummy entry - not really implemented )
   *	$  DISK   FC,LUD,ACCESS
   *	$  MASS   FC,LUD,ACCESS
   *  	$  FILE   FC,LUD,ACCESS
   *	$  DRUM   FC,LUD,ACCESS
   *	$  TAPE	FC,LUD,MULTIREEL,SERIAL NO,SEQ NO,FILE NAME,CLASS,DENSITY
   *	$  PRMFL  FC,ACC,MODE,PATH
   *	$  PRMFL  FC/LUD,ACC,MODE,PATH
   *	$  DAC  	FC
   *	$  SYSOUT	FC
   *
   *
   *	CONTROL CARD FIELDS
   *
   *	FC	FILE CODE
   *
   *	LUD	LOGICAL UNIT DESIGNATOR
   *		Channel letter
   *		followed by a channel number
   *		1-99 followed by the disposition
   *		and optional abort disposition
   *		(R=release,S=save,D=dismount,
   *		P=purge and release,
   *		C=continue,or blank = R).
   *
   *	ACCESS	FILE LENGTH AND ACCESS
   *		Length of file in 3840 word
   *		links followed by "l" or "r".
   *		"l" stands for linked or sequential files
   *		and "r" stands for random access files.
   *
   *	MULTIREEL	Any non-blank character used to denote a second tape.
   *		(This is referred to as the secondary logical unit
   *		designator in the fib.)
   *
   *	SERIAL-NO	Serial number of first tape
   *
   *	SEQ-NO	The number to the reel within a given file at
   *		which processing is to begin.
   *
   *	FILE-NAME	An external name given to the file. Used in giving
   *		mounting instructions to the operator.

   *	DENSITY	Tape density for MPC driven tape units.
   *
   *	ACC	FILE PERMISSION
   *		Letters w,r,a,x, or e for the type
   *		of access to be given to the file (write, read,
   *		append or execute. Multiple access codes are
   *		separated by slashs.
   *
   *	MODE	FILE ACCESS
   *		The letter "l" or "r", indicating linked or random, as described above .
   *
   *	PATH	FILE PATHNAME
   *		Full or partial pathname or GCOS file string of the file to be
   *		associated with the filecode.
   *
   *
   *	WRITTEN BY DICK SNYDER DECEMBER 7, 1970
   *	MODIFIED BY T. CASEY DECEMBER 1973, JUNE 1974
   *	MODIFIED BY D. KAYDEN APRIL 1974, JULY 1974, DECEMBER 1974, MARCH 1975
   *	Change: Dave Ward	07/28/81 Allow period in name (By Dick Hemes)
   *      Modified: Ron Barstad 83-05-12  Improve test for path running over cc 72
   *      Modified: Ron Barstad 83-08-02  Added 6250 tape den as per GCOS
   *
   *
   ********************************************************************************************
   ****************************************************************************************** */


gcos_cc_file_cards_: proc (card);


/* 	D E C L A R A T I O N S					 */


%include gcos_ext_stat_;


/* 	External Entries						 */


dcl  gcos_cv_ascii_gebcd_ ext entry (ptr, fixed bin(24), ptr, fixed bin(24));
dcl  gcos_open_file_ ext entry (char (*), char (*), ptr, bit (1));
dcl  gcos_open_file_$sysout ext entry (char (*), bit (1));
dcl  gcos_get_cc_field_ ext entry (char (80), char (*), fixed bin(24));
dcl  gcos_get_cc_field_$asis entry (char (80), char (*), fixed bin(24));
dcl  gcos_error_ ext entry options (variable);
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin(35));
dcl  gcos_interpret_file_string_ entry (char (*) varying, char (*), fixed bin(24), char (80));
dcl  ioa_ entry options (variable);
dcl  gcos_write_to_er_ entry options (variable);
dcl  gcos_et_$cc_unimp fixed bin(35) ext;
dcl  gcos_et_$cc_bad_field fixed bin(35) ext;
dcl  gcos_et_$cc_missing_field fixed bin(35) ext;
dcl  gcos_et_$cc_bad_fc fixed bin(35) ext;
dcl  gcos_et_$cc_bad_lud fixed bin(35) ext;



/* 	Work Variables						 */


dcl  card char (80);						/* input card image */
dcl  message char (50);
dcl  dac_sw bit (1);
dcl  present bit (1);
dcl (null_file, type_file, file_file) bit (1) init ("0"b);
dcl  fc char (2);						/* file code */
dcl  lud char (6) init (" ");						/* logical unit designator */
dcl  disp char (1) ;						/* normal disposition */
dcl  adisp char (1) ;						/* abort disposition */
dcl  cfdesc_field char (50);

dcl  field char (6);						/* holder for a field from a card */
dcl  tape_name char (12);
dcl  tape_serial_number char (5);
dcl  prmfl_fc_field char (8);
dcl  temp_tracks bit (2);						/* temporary for fib.tracks */
dcl (i, j, k, digit, cp) fixed bin(24);						/* temps */
dcl  code fixed bin(35);
dcl  result fixed bin(24);						/* holds result code from gcos_get_cc_field_ */
dcl  abs bit (72) aligned;						/* an aligned string for xlation */

dcl  x char (1);						/* temp */
dcl  path char (200) ;						/* holds pathname of permanent file */
dcl  prmfl_path char (168*2) varying ;						/* to hold the path or file string before we know which it is */
dcl  path_type fixed bin(24);						/* 0=dont know; 1=path;2=file string */
dcl  etc_next_sw bit (1) aligned ;						/* if path continued on etc card */
dcl  dirname char (168);
dcl  ename char (32);

dcl  DENS_CHARS (6) char (5) static internal options (constant) 
     init ("den2", "den5", "den8", "den9", "den16", "den62");
dcl  DENS_BITS (6) bit (4) static internal options (constant) 
     init ("0001"b, "0010"b, "0100"b, "0000"b, "1001"b, "1100"b);
dcl  END_OF_CARD fixed bin(24)static internal options (constant) init (2);
dcl  MULTICS_PATHNAME fixed bin(24)static internal options (constant) init (1);
dcl  GCOS_CFDESC fixed bin(24)static internal options (constant) init (2);
dcl 1 PERM (18) aligned static internal options (constant),
    2 NAME char (8) init ("r", "w", "a", "e", "x", "rec", "r/c", "w/c", "q", "t", "t/c", "c", "l", "r/w/c", "r/a", "r/w", "a/r", "w/r"),
    2 READ bit (1) init ("1"b, "1"b, "1"b, "1"b, "1"b, "0"b, "0"b, "0"b, "1"b, "0"b, "0"b, "0"b, "1"b, "0"b, "1"b, "1"b, "1"b, "1"b),
    2 WRITE bit (1) init ("0"b, "1"b, "1"b, "0"b, "0"b, "0"b, "0"b, "0"b, "0"b, "0"b, "0"b, "0"b, "1"b, "0"b, "1"b, "1"b, "1"b, "1"b),
    2 SUPPORTED bit (1) init ("1"b, "1"b, "1"b, "1"b, "1"b, "0"b, "0"b, "0"b, "1"b, "0"b, "0"b, "0"b, "1"b, "0"b, "1"b, "1"b, "1"b, "1"b);

dcl (addr, fixed, index, length, null, substr, unspec, verify) builtin;

cc_read:	entry (card);

	call gcos_error_ (gcos_et_$cc_unimp, "^/^a^2x^a", gcos_ext_stat_$card_num, card);

cc_print:	entry (card);

	call Open_File;				/* set up fib */
	fib.print = "1"b;				/* indicate printfile */
	return;

cc_punch:	entry (card);

	call Open_File;				/* set up fib */
	fib.punch = "1"b;				/* indicate punch file */
	fib.write = "1"b;
	return;

cc_file:	entry (card);

	file_file = "1"b;
	call Open_File;				/* set up fib */
	if null_file then return;

	cp = 1;					/* init scan counter */
	call gcos_get_cc_field_ (card, field, result);	/* get access field */
	if result ^= 0 then fib.size = 3840;
	else do;
	     j = 0;				/* clear accumulator */

loop:	     i = fixed (unspec (substr (field, cp, 1)), 17); /* get next col in numeric form */

	     if i >= 48 then if i <= 57 then do;	/* ascii numeral ? */
		     cp = cp+1;			/* advance col indicator */
		     j = j*10+i-48;			/* shift accumulator */
		     go to loop;			/* see if any more digits */
		end;

	     if j ^= 0 then fib.size = 3840*j;		/* set specified no. of links */
	     else do;
		call gcos_write_to_er_ ("Warning:  File size specified is zero.  Assuming 1 link.^/^a^2x^a",
		     gcos_ext_stat_$card_num, card);
		fib.size = 3840;
	     end;
	     if substr (field, cp) = "r" then		/* random file ? */
		fib.type = "1"b;			/* yes...indicate such */
	     else if substr (field, cp) = "l" then;
	     else call gcos_write_to_er_ (
		"Warning:  Unknown access mode ""^a"" specified.  Assuming ""l"".^/^a^2x^a",
		substr (field, cp), gcos_ext_stat_$card_num, card);
	end;


/*  at this point some test should be made for NEW or OLD in the next field  */


	fib.read, fib.write = "1"b;			/* turn on indicators */
	return;

cc_tape7:	entry (card);

	temp_tracks = "01"b;			/* indicates 7 track */
	goto tape_common;

cc_tape9:	entry (card);

	temp_tracks = "10"b;			/* indicates 9 track */
	goto tape_common;

cc_tape:	entry (card);

/* GCOS default is 7track tape; Multics default is installation dependent,
   and is often 9track, with NO 7track drives installed in the system.


   /*	temp_tracks = "01"b;	*/
tape_common:
	call Open_File;				/* set up fib */
	fib.tape = "1"b;				/* indicate tape */

	fib.tracks = temp_tracks;			/* save tape type requested */

	fib.serial_no = (5)"010000"b;			/* blank(bcd) serial no */
	fib.tape_name = (12)"010000"b;		/* and tape name */
	fib.seq_no = 1;				/* default reel sequence number */

	if index (card, " -noring") = 0 &		/* see if "no ring" option is present */
	index (card, " -nr") = 0 then fib.write = "1"b;	/* default is to use a ring */

/* 	For now, the secondary logical unit designator will be ignored since	 */
/* 	multi-reel files won't be needed for awhile.			 */

	call gcos_get_cc_field_ (card, field, result);	/* skip slud */

	call gcos_get_cc_field_ (card, tape_serial_number, result); /* get serial no. */

	if result = END_OF_CARD then return;		/* done if end of card */
	if result = 0 then do;
	     call gcos_cv_ascii_gebcd_ (addr (tape_serial_number), 5, addr (abs), i); /* convert serial no to bcd */
	     fib.serial_no = substr (abs, 1, 30);	/* fill in fib with returned value */
	end;


/* 	Come here to extract reel sequence number 			 */

	call gcos_get_cc_field_ (card, field, result);	/* get it */
	if result = END_OF_CARD then return;		/* done if end of card */
	if result = 0 then do;			/* if null field, go get tape name */

	     i = index (field, " ")-1;		/* get length of seq_no */
	     if i < 0 then i = length (field);
	     k = 0;				/* init accumulator */

	     do j = 1 to i;				/* loop to convert char string to binary */
		digit = index ("0123456789", substr (field, j, 1)); /* look up digit */
		if digit = 0 then call gcos_error_ (gcos_et_$cc_bad_field,
		     """^a""^/^a^2x^a", field,
		     gcos_ext_stat_$card_num, card);
		k = k*10+digit-1;			/* add to accumulator */
	     end;

	     fib.seq_no = k;			/* store in fib */
	end;


/* 	Come here to extract tape name				 */

	call gcos_get_cc_field_ (card, tape_name, result); /* get name */
	if result = END_OF_CARD then return;		/* done if end of card */
	if result = 0 then do;
	     call gcos_cv_ascii_gebcd_ (addr (tape_name), 12, addr (abs), i); /* convert to bcd */
	     fib.tape_name = abs;			/* move to fib */
	end;

	fib.density = "1111"b;			/* set density default */
	call gcos_get_cc_field_ (card, field, result);	/* skip class field */
	if result = END_OF_CARD then return;

	call gcos_get_cc_field_ (card, field, result);	/* get density field */
	if result ^= 0 then return;			/* done if not there */

	do i = lbound (DENS_CHARS, 1) to hbound (DENS_CHARS, 1);
	     if field = DENS_CHARS (i) then do;
		fib.density = DENS_BITS (i);
		return;				/* that's all */
	     end;
	end;

	call gcos_error_ (gcos_et_$cc_bad_field,
	     "Illegal density specification.^/^a^2x^a""",
	     gcos_ext_stat_$card_num, card);

cc_type:	entry (card);

	type_file = "1"b;
	call Open_File;
	return;

cc_dac:	entry (card);

	dac_sw = "1"b;				/* share code with cc_sysout */
	go to sysout_open;

cc_sysout: entry (card);

	dac_sw = "0"b;

sysout_open: ;
	if ^gcos_ext_stat_$save_data.activ then call gcos_write_to_er_ (
	     "Warning:  The following $ SYSOUT control card has been found outside an activity definition and is being ignored.^/^a^2x^a",
	     gcos_ext_stat_$card_num, card);

	call gcos_get_cc_field_ (card, field, result);
	if result ^= 0 then call gcos_error_ (gcos_et_$cc_missing_field,
	     "File code missing.^/^a^2x^a",
	     gcos_ext_stat_$card_num, card);

	fc = substr (field, 1, length (fc));

	if verify (fc, "0123456789.abcdefghijklmnopqrstuvwxyz*") ^= 0 | fc = "00" then
	     call gcos_error_ (gcos_et_$cc_bad_fc, """^a""^/^a^2x^a", fc,
	     gcos_ext_stat_$card_num, card);

	call gcos_open_file_$sysout (field, dac_sw);
	return;

cc_prmfl:	entry (card);

/*  Pick up the filecode and open the file */

	call gcos_get_cc_field_ (card, prmfl_fc_field, result);
	if result ^= 0 then call gcos_error_ (gcos_et_$cc_missing_field,
	     "File code missing.^/^a^2x^a", gcos_ext_stat_$card_num, card);

	fc = substr (prmfl_fc_field, 1, 2);		/* pick up filecode */
	if verify (fc, "0123456789.abcdefghijklmnopqrstuvwxyz*") ^= 0 | fc = "00" then
	     call gcos_error_ (gcos_et_$cc_bad_fc,
	     """^a"" is not a valid file code.^/^a^2x^a", fc,
	     gcos_ext_stat_$card_num, card);

	x = substr (prmfl_fc_field, 3, 1);		/* must be blank or slash */
	if x ^= " " then if x ^= "/" then
		call gcos_error_ (gcos_et_$cc_bad_fc, "^a^2x^a",
		gcos_ext_stat_$card_num, card);

/* If FC/LUD was given, process the LUD */

	if x = "/" then lud = substr (prmfl_fc_field, 4);

	call Open_Prmfl;				/* get a fib and decode lud */

	fib.perm = "1"b;

/* Set access bits from permit field.			 */

	call gcos_get_cc_field_ (card, field, result);
	if result ^= 0 then call gcos_error_ (gcos_et_$cc_missing_field,
	     "Access field missing from $ PRMFL card.^/^a^2x^a",
	     gcos_ext_stat_$card_num, card);

	do i = lbound (PERM, 1) to hbound (PERM, 1);
	     if PERM (i).NAME = field then do;
		if ^PERM (i).SUPPORTED then call gcos_error_ (gcos_et_$cc_bad_field,
		     "Unsupported access mode.  ""^a""^/^a^2x^a", field,
		     gcos_ext_stat_$card_num, card);
		fib.write = PERM (i).WRITE;
		fib.read = PERM (i).READ;
		goto permissions_done;
	     end;
	end;
	call gcos_error_ (gcos_et_$cc_bad_field,
	     "Unrecognized permission ""^a"".^/^a^2x^a", field,
	     gcos_ext_stat_$card_num, card);


permissions_done:

	call gcos_get_cc_field_ (card, field, result);
	if result ^= 0 then call gcos_error_ (gcos_et_$cc_missing_field,
	     "An access mode is required.^/^a^2x^a",
	     gcos_ext_stat_$card_num, card);

	if substr (field, 2, 1) ^= " " then call gcos_error_ (gcos_et_$cc_bad_field,
	     """^a"" is not a valid access mode.^/^a^2x^a", field, gcos_ext_stat_$card_num, card);
	if substr (field, 1, 1) = "r" then fib.type = "1"b; /* turn on random bit */
	else if substr (field, 1, 1) = "l" then fib.type = "0"b; /* turn off random bit */
	else if substr (field, 1, 1) = "s" then fib.type = "0"b; /* same as "l" */
	else call gcos_error_ (gcos_et_$cc_bad_field, "Access not ""r"", ""s"", or ""l"".^/^a^2x^a",
	     gcos_ext_stat_$card_num, card);

/* Process pathname field of the card. Here we deviate from the    gcos format of:

   catalog1$password1/...catalogn$passwordn/filename$password

   and allow full or partial Multics pathnames to be supplied as an alternative. Continuation
   of the pathname via a $ etc card is possible by following a > or / with a blank. */

	path_type = 0;
	prmfl_path = "";


get_path:	call gcos_get_cc_field_$asis (card, cfdesc_field, result);
	if result ^= 0 then do;
	     if etc_next_sw then call gcos_error_ (gcos_et_$cc_missing_field,
		"A $ ETC card is in error or missing at card number ^a.",
		gcos_ext_stat_$card_num);
	     else call gcos_error_ (gcos_et_$cc_missing_field,
		"^a^2x^a",
		gcos_ext_stat_$card_num, card);
	end;

	i = index (cfdesc_field, " ")-1;		/* find the end */
	if (i < 0) | (index(substr(card,16,73-15)," ")=0) then do;
	     call gcos_write_to_er_ ("Warning:  Check for a pathname or catalog/filename description overflow into column 73.^a^2x^a",
		gcos_ext_stat_$card_num, card);
	     if ^gcos_ext_stat_$save_data.brief then call ioa_ ("Warning:  Check for a pathname or catalog/filename description overflow into column 73.^/^a^2x^a",
		gcos_ext_stat_$card_num, card);
	     i = length (cfdesc_field);
	end;
	x = substr (cfdesc_field, i, 1);		/* look at last character */
	if x = ">" then do;				/* if continued Multics pathname */
	     etc_next_sw = "1"b;			/* remember continuation */
	     if path_type = GCOS_CFDESC then call gcos_error_ (gcos_et_$cc_bad_field,
		"Terminator on this $ ETC card is incompatable with the previous card.^/^a^2x^a",
		gcos_ext_stat_$card_num, card);
	     path_type = MULTICS_PATHNAME;		/* remember its a pathname */
	end;

	else if x = "/" then do;			/* if continued GCOS file string */
	     etc_next_sw = "1"b;			/* remember continuation */
	     if path_type = MULTICS_PATHNAME then call gcos_error_ (gcos_et_$cc_bad_field,
		"Terminator on this $ ETC card is incompatable with the previous card.^/^a^2x^a",
		gcos_ext_stat_$card_num, card);
	     path_type = GCOS_CFDESC;			/* remember its a file string */
	end;
	else etc_next_sw = "0"b;

	if length (prmfl_path) >= 168*2 then call gcos_error_ (gcos_et_$cc_bad_field,
	     "Pathname or Catalog/Filename description is too long.  ""^a""^/^a^2x^a", prmfl_path,
	     gcos_ext_stat_$card_num, card);
	prmfl_path = prmfl_path || substr (cfdesc_field, 1, i); /* save (partial?) pathname */

	if etc_next_sw then do;			/* if continuation was indicated */
	     gcos_ext_stat_$gf = 3;			/* fool gcos_get_cc_cfdesc_field_ into reading a $ ETC card */
	     goto get_path;				/* and go call it */
	end;

	if path_type = 0 then do;			/* if we don't know what kind of path it is
						   we will have to figure it out heuristically */
	     i = index (prmfl_path, "/");		/* a file string must have at least one slash */
	     if i = 0 then path_type = MULTICS_PATHNAME;	/* if it doesn't, it has to be a pathname */
	     else do;				/* otherwise, we are still not sure, since
						   a pathname could contain a slash */
		i = search (prmfl_path, "<>");	/* see if it has a < or > in it */
		if i = 0 then path_type = GCOS_CFDESC;	/* if not, assume a file string */
		else				/* but if it does, Multics is going to treat it as a pathname */
		path_type = MULTICS_PATHNAME;		/* even if the user intended it to be a file string */
	     end;

	end;

	if path_type = GCOS_CFDESC then call gcos_interpret_file_string_ (prmfl_path, path, k, card);
	else path = prmfl_path;


/* Path holds pathname of file at this point 		 */

	call expand_pathname_ (path, dirname, ename, code);
	if code ^= 0 then call gcos_error_ (code, """^a""^/^a^2x^a", path,
	     gcos_ext_stat_$card_num, card);
	if dirname = ">" then fib.pathnm = ">" || ename;
	else fib.pathnm = rtrim (dirname) || ">" || ename;

exit:	return;					/* no more to do */


/*	I N T E R N A L   P R O C E D U R E S			*/


/* 	get file code and lud from control card		*/

Open_File: proc;

	     call gcos_get_cc_field_ (card, field, result); /* get file code from card */
	     if result ^= 0 then call gcos_error_ (gcos_et_$cc_missing_field, "File code missing.^/^a^2x^a",
		gcos_ext_stat_$card_num, card);

	     fc = substr (field, 1, length (fc));	/* save file code */
	     if fc = "00" | verify (fc, ".abcdefghijklmnopqrstuvwxyz0123456789*") ^= 0 then
		call gcos_error_ (gcos_et_$cc_bad_fc, """^a""^/^a^2x^a", fc, gcos_ext_stat_$card_num, card);

/* 	Process logical unit designator 				 */

	     lud = "";
	     call gcos_get_cc_field_ (card, field, result); /* get logical unit designator */
	     if result = 0 then do;			/* if no lud supplied, use defaults */
		if field = "null" & file_file then null_file = "1"b;
		else lud = field;
	     end;


/*	Get a fib and process the logical unit designator and disposition 	*/

Open_Prmfl:    entry;

	     if ^gcos_ext_stat_$save_data.activ then do;
		call gcos_write_to_er_ (
		     "Warning:  The following file card has been found outside an activity and is being ignored.^/^a^2x^a",
		     gcos_ext_stat_$card_num, card);
		goto exit;
	     end;

	     disp, adisp = "";
	     if lud ^= " " then do;			/* check for no lud specified */
		if substr (lud, 6, 1) ^= " " then call gcos_error_ (gcos_et_$cc_bad_lud,
		     """^a""^/^a^2x^a", lud, gcos_ext_stat_$card_num, card);
		if verify (substr (lud, 1, 1), "abcdefghijklmnopqrstuvwxyz0123456789") ^= 0 then
		     call gcos_error_ (gcos_et_$cc_bad_lud,
		     "The first character of a LUD must be alphanumeric.  ""^a""^/^a^2x^a", lud,
		     gcos_ext_stat_$card_num, card);
		cp = verify (substr (lud, 2), "01234567890*")-1; /* separate dispositiin from lud */

		if cp = 0 then call gcos_error_ (gcos_et_$cc_bad_lud,
		     "Device name LUDs are not supported by the Multics GCOS Environment.  ""^a""^/^a^2x^a",
		     lud, gcos_ext_stat_$card_num, card);

		disp = substr (lud, cp+2, 1);
		if cp+3 < length (lud) then
		     adisp = substr (lud, cp+3, 1);
		lud = substr (lud, 1, cp+1);
	     end;

	     if type_file then do;			/* $ TYPE card */
		lud = "ty1";			/* "ty1" is always present for t* */
		disp, adisp = "s";
	     end;

	     call gcos_open_file_ (fc, lud, fibptr, present);

	     if null_file then do;			/* is this $ FILE FC,NULL ? */
		fib.null = "1"b;
		goto exit;			/* bypass setting of type and access */
	     end;

	     fib.disp = decode_disp (disp);		/* decode normal disposition */

	     if adisp ^= " " then			/* abort disposition present ? */
		fib.adisp = decode_disp (adisp);	/* yes - decode it */

	     else fib.adisp = fib.disp;		/* no - make it the same as the normal disposition */

	     if present then go to exit;		/* do not set other attributes for an existing file */
	     return;

decode_disp:   proc (dsp) returns (bit (2));


dcl  dsp char (1);


decode_disp:	if dsp = " " then return ("01"b);	/* blank = release */
		if dsp = "r" then return ("01"b);	/* R = release */
		if dsp = "s" then return ("10"b);	/* S = save */
		if dsp = "c" then return ("11"b);	/* C = continue */
		if dsp = "d" then return ("00"b);	/* D = dismount */
		if dsp = "p" then do;		/* P = purge */
		     fib.purge = "1"b;
		     return ("01"b);
		end;
		call gcos_write_to_er_ (
		     "Warning:  ""^a"" is a bad disposition character.  A disposition of ""r"" is being assumed.", dsp);
		return ("01"b);

	     end decode_disp;


	end Open_File;


     end gcos_cc_file_cards_;
