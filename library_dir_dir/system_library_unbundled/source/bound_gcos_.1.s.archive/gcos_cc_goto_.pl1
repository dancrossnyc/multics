/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


gcos_cc_goto_: proc (card);

/* This procedure processes the $ GOTO, $ IF, and $ WHEN cards.
   If the Operator is true, or for $ GOTO, always, the Label to be
   transferred to is saved in gcos_ext_stat_$sought_label, and gcos_ext_stat_$save_data.seeking
   is set to "1"b; for $ WHEN, gcos_ext_stat_$save_data.seeking_terminator is also set to "1"b,
   so that gein will not go past the end of an activity looking for the label.

   For $ GOTO and $ IF, a Label of ENDJOB causes an immediate call to
   gcos_cc_endjob_ from this procedure, which exits via a non-local goto,
   rather than returning here.

   For $ IF ABORT, gcos_ext_stat_$save_data.this_act_abort is tested, and if it is "1"b,
   gcos_cc_misc_cards_$cc_break is called to reset the PSW and abort
   switches, before the search for the specified Label is begun.

   WRITTEN BY T. CASEY, DECEMBER 1973
   MODIFIED BY R.H. MORRISON, SEPTEMBER 1974, JULY 14, 1975
   Modified by M. R. Jordan, August 1977

   */


dcl  NL char (1) init ("
");						/* newline character */
dcl  addr builtin;
dcl  bool builtin;
dcl  card char (80);
dcl  field char (66);						/* returned field from get_cc_field_ */
dcl  gcos_cc_endjob_ ext entry;
dcl  gcos_cc_misc_cards_$cc_break ext entry;
dcl  gcos_error_ ext entry options (variable);
dcl  gcos_et_$cc_bad_field fixed bin(35) ext;
dcl  gcos_et_$cc_missing_field fixed bin(35) ext;
dcl  gcos_get_cc_field_ ext entry (char (80), char (*), fixed bin(24));
dcl  gcos_write_to_er_ entry options (variable);
dcl  index builtin;
dcl  result fixed bin(24);
dcl  substr builtin;
dcl  var_msg char (j) based (addr (err_msg));						/* variable length overlay */

/*

   Process a $ GOTO control card.

*/



/* Come here from $ IF and $ WHEN as well, to get label field */

get_label: call gcos_get_cc_field_ (card, field, result);

/* see if it's ok */

	if result ^= 0 then call gcos_error_ (gcos_et_$cc_missing_field, "Label field missing.^/^a^2x^a",
	     gcos_ext_stat_$card_num, card);

/* ENDJOB? */
	if ^gcos_ext_stat_$save_data.seeking_terminator then /* if not $ WHEN card */
	     if field = "endjob" then			/* it could legally be ENDJOB */
		call gcos_cc_endjob_;		/* if it is, end the job */

/* set up to look for the label in the rest of the job deck */

	gcos_ext_stat_$sought_label = substr (field, 1, length (gcos_ext_stat_$sought_label));
	gcos_ext_stat_$save_data.seeking = "1"b;
	call gcos_write_to_er_ ("Note:^-$ card is true; sw=^w; skipping to ""^a"".^/^a^2x^a",
	     save_data.psw, field, gcos_ext_stat_$card_num, card);

	return;

/*

   Process a $ IF control card.

*/


cc_if:	entry (card);


	if operator () then goto get_label;		/* operator is an internal procedure,
						   that returns its value as a function. If the operator is
						   true, it will return "1"b, otherwise "0"b */

	return;					/* it must not have been true */

/*

   Process a $ WHEN control card.

*/


cc_when:	entry (card);


	if ^operator () then return;			/* evaluate operator and return if false */

	gcos_ext_stat_$save_data.seeking_terminator = "1"b;
	goto get_label;

/*

   The following is an internal procedure to evaluate the operator expression.

*/


operator:	proc returns (bit (1));

dcl (term_flag, elem_flag, not_flag, elem_val, psw_val) bit (1);
dcl (plus_indx, star_indx, not_indx) fixed bin(24);
dcl code fixed bin(35);
dcl  term char (52);
dcl  elem char (3);
dcl  ex_or bit (4) init ("0110"b);
dcl  cv_dec_check_ entry (char(*), fixed bin(35)) returns(fixed bin(35));
dcl  psw_pos fixed bin(35);
dcl  field char (72-15-1);

	     call gcos_get_cc_field_ (card, field, result);

	     if result ^= 0 then call gcos_error_ (gcos_et_$cc_missing_field, "Operator field missing.^/^a^2x^a",
		gcos_ext_stat_$card_num, card);

	     if field = "abort" then do;		/* see if activity aborted */

		if gcos_ext_stat_$save_data.this_act_abort then do; /* if it did */

		     call gcos_cc_misc_cards_$cc_break; /* reset psw and abort gcos_ext_stat_$save_data */
		     return ("1"b);			/* tell main procedure that the operator is true */
		end;

		return ("0"b);			/* no abort - operator is false */
	     end;

/* evaluate operator expression */

next_term:
	     plus_indx = index (field, "+");		/* find next infix "+" operator */
	     if plus_indx = 0 then
		do;
		term_flag = "0"b;			/* reset flag to indicate no more terms in field */
		term = substr (field, 1, length (term)); /* field has only one term */
	     end;
	     else do;
		term_flag = "1"b;			/* set flag for more terms */
		term = substr (field, 1, plus_indx-1);	/* extract current field */
		if plus_indx = length (field) then call gcos_error_ (gcos_et_$cc_bad_field,
		     "Illegal expression.^/^a^2x^a",
		     gcos_ext_stat_$card_num, card);
		field = substr (field, plus_indx+1);	/* remaining terms in field */
	     end;

next_elem:
	     star_indx = index (term, "*");		/* find next infix "*" operator */

	     if star_indx = 0 then do;
		elem_flag = "0"b;			/* reset flag to indicate no more elements in current term */
		elem = substr (term, 1, length (elem)); /* term has only one element */
	     end;
	     else do;
		elem_flag = "1"b;			/* set flag for more elements */
		elem = substr (term, 1, star_indx-1);	/* extract current element */
		if star_indx = length (term) then call gcos_error_ (gcos_et_$cc_bad_field,
		     "Illegal expression.^/^a^2x^a",
		     gcos_ext_stat_$card_num, card);
		term = substr (term, star_indx+1);	/* leave remaining elements in term */
	     end;

/* evaluate element */

	     not_indx = index (elem, "/");		/* see if element is complemented */
	     if not_indx = 0 then not_flag = "0"b;	/* reset flag, element not complemented */
	     else if not_indx = 1 then
		do;
		not_flag = "1"b;			/* element is complemented */
		elem = substr (elem, 2);		/* get rid of "/" */
	     end;

	     else call gcos_error_ (gcos_et_$cc_bad_field,
		"Illegal switch word bit specification.  ""^a""^/^a^2x^a",
		elem, gcos_ext_stat_$card_num, card);
	     psw_pos = cv_dec_check_ (elem, code);	/* convert character string element to numeric */
	     if code ^= 0 then
		call gcos_error_ (gcos_et_$cc_bad_field,
		"Illegal switch word bit specification.  ""^a""^/^a^2x^a",
		elem, gcos_ext_stat_$card_num, card);
	     if psw_pos > 35 | psw_pos < 0 then		/* bad */
		call gcos_error_ (gcos_et_$cc_bad_field,
		"Switch word bit specification must be 0 through 35.  ""^a""^/^a^2x^a",
		elem, gcos_ext_stat_$card_num, card);
	     psw_val = substr (save_data.psw, psw_pos+1, 1); /* psw bit value */

	     elem_val = bool (psw_val, not_flag, ex_or);	/* logical value of term so far */

/* decide where to go */
	     if elem_val & ^elem_flag then goto return_1; /* some term is true */
	     if ^elem_val & ^term_flag then goto return_0; /* no term is true */
	     if elem_val & elem_flag then goto next_elem; /* this element is true, test next element */
	     if ^elem_val & term_flag then goto next_term; /* this element not true, test next term */

return_0:	     return ("0"b);				/* return operator is false */

return_1:	     return ("1"b);				/* return operator is true */


	end operator;

%include gcos_ext_stat_;


     end gcos_cc_goto_;
