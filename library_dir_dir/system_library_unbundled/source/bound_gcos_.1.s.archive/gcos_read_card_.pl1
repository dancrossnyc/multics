/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gcos_read_card_: proc (return_gcos_ptr, return_gcos_len, return_ascii_card, return_dollar_sw);

/*
   *	This procedure is called to read a card from the gcos job stream file.
   *
   *	It returns:
   *		1) a pointer to the (rcw of the) gcos format record (bcd or binary);
   *		2) the length, in ascii characters, (i.e. 4 times length in words)
   *		   of the record, including the rcw. (This is to provide a convenient
   *		   interface with gcos_write_, which is called with a char(*) argument,
   *		   even when writing a gcos record.)
   *
   *
   *	If the card is a $ control card, it returns the ascii image (80
   *	characters, padded with blanks, and NOT ending in a newline), and a "1"b in
   *	dollar_sw; otherwise, it returns "0"b in dollar_sw, and blanks in the ascii image.
   *
   *	If end of file occurs on gcos_job_stream_, it calls gcos_error_ to abort the
   *	job: a $ ENDJOB card should end the deck, and no more calls should be made
   *	after that card is read.
   *
   *	If the job stream file is small enough to be a segment, rather than a msf, it
   *	is initiated, and "read" by moving a pointer through it, instead of
   *	being read by ios_$read, in order to save time.
   *
   *
   Author: T. CASEY     APRIL 1973
   Change: T. CASEY FEBRUARY 1974
   Change: D.KAYDEN  MARCH 1975
   Change: M. R. Jordan, August 1977
   Change: Dave Ward	08/11/81 Reorganized.
*/
dcl  return_gcos_len          fixed bin(24)parm	/* returned length of gcos record  */;
dcl  return_gcos_ptr          ptr parm	/* returned pointer to gcos record */;
	return_dollar_sw = "0"b;			/* turn off "this is dollar card" switch */
	return_ascii_card = "";			/* and blank out the ascii card image */
	save_data.jd_rem_block_len = remaining_block_len;
	save_data.jd_position = block_position;

reread:	;					/* come here to read bcd dollar card,
						   if we just read ascii copy of it */
	if remaining_block_len = 0 then do;		/* if no more records in this block */
/* get next one */

	     block_position = block_position + 320;

	     if msf then do;			/* if this is a msf */
		record_ptr = addr (buffer);
		call ios_$read ("gcos_job_stream_", record_ptr, 0, 320, words_read, status);

		if code ^= 0 then do;
		     err_msg = "from ios_$read ^a";
read_error:	     ;
		     call gcos_error_ (code, err_msg, "gcos_job_stream_", err_num);
		end;
	     end;
	     else do;				/* must be a segment */
		record_ptr = addrel (save_data.job_deck, block_position);
		words_read = min (320, save_data.jd_size - block_position);
	     end;

	     if words_read < 320 then do;

		if words_read = 0 then do;		/* but if there are no more blocks to get */
eof_error:	     ;
		     code = 0;			/* should never happen. complain */
		     err_msg = "end of file on ^a";
		     goto read_error;
		end;

		code = 0;
		err_num = words_read;
		err_msg = "ios_$read ^a returned ^d words";
		goto read_error;
	     end;

/* get first record of block */
	     remaining_block_len = fixed (bcw.length);	/* initialize block length from bcw */

	     if remaining_block_len > 319 then do;
		code = 0;
		err_num = remaining_block_len;
		err_msg = "block from ^a contained ^d words";
		goto read_error;
	     end;

	     record_ptr = addrel (record_ptr, 1);
	end;

/* process record */
	if rcw.eof = bcd_eof then goto eof_error;	/* should never happen */
	record_len = fixed (rcw.length);
	remaining_block_len = remaining_block_len - record_len - 1;

	if remaining_block_len < 0 then do;		/* should never happen */
	     code = 0;
	     err_num = remaining_block_len;
	     err_msg = "^a remaining_block_len negative: ^d";
	     goto read_error;
	end;

	if rcw.media_code = "0110"b then do;		/* if ascii record */

	     if return_dollar_sw then do;		/* should never happen */
		code = 0;
		err_msg = "two consecutive ascii records from ^a";
		goto read_error;
	     end;

	     return_ascii_card = ascii_record.chars;	/* copy ascii card into argument from caller */
	     return_dollar_sw = "1"b;			/* remember that we read a dollar card */
	     record_ptr = addrel (record_ptr, record_len + 1);
	     goto reread;				/* go read the bcd image of this card */
	end;

	return_gcos_ptr = record_ptr;			/* must be a regular gcos record */
	return_gcos_len = (record_len + 1) * 4;

	record_ptr = addrel (record_ptr, record_len + 1);

	if gcos_ext_stat_$card_num = 9999 then gcos_ext_stat_$card_num = 0;
	else gcos_ext_stat_$card_num = gcos_ext_stat_$card_num+1;

	return;					/* normal return */
%page;
read_init: entry (restartsw);

dcl  restartsw                bit (1) aligned parm;

	gcos_ext_stat_$card_num = 0;

	msf = save_data.job_deck = null;

	if ^restartsw then do;
	     save_data.jd_position = -320;
	     save_data.jd_rem_block_len = 0;
	     go to init_done;
	end;

/*	Restart in process - reposition job stream */
	if msf then if save_data.jd_position >= 0 then
		call ios_$seek ("gcos_job_stream_", "read", "first", save_data.jd_position, status);

	if save_data.jd_rem_block_len ^= 0 then do;
	     if msf then do;
		record_ptr = addr (buffer);
		call ios_$read ("gcos_job_stream_", record_ptr, 0, 320, words_read, status);
	     end;
	     else record_ptr = addrel (save_data.job_deck, save_data.jd_position);
	     record_ptr = addrel (record_ptr, 1 + fixed (bcw.length) - save_data.jd_rem_block_len);
	end;

init_done: ;
	block_position = save_data.jd_position;
	remaining_block_len = save_data.jd_rem_block_len;

	return;
%page;
/*   Variables for gcos_read_card_:		 */
/*   IDENTIFIER		ATTRIBUTES	 */
dcl  addr                     builtin;
dcl  addrel                   builtin;
dcl  bcd_eof                  bit (6) unaligned int static init ("001111"b);
dcl  block_position           fixed bin(24)int static;
dcl  buffer                   (320) bit (36) aligned int static;
dcl  code                     fixed bin(35) aligned based (addr (status));
dcl  err_msg                  char (100) aligned;
dcl  err_num                  fixed bin(24);
dcl  fixed                    builtin;
dcl  gcos_error_              ext entry options (variable);
dcl  ios_$read                ext entry (char (*), ptr, fixed bin(24), fixed bin(24), fixed bin(24), bit (72) aligned);
dcl  ios_$seek                ext entry (char (*), char (*), char (*), fixed bin(24), bit (72) aligned);
dcl  min                      builtin;
dcl  msf                      bit (1) aligned int static	/* on when file is a msf */;
dcl  null                     builtin;
dcl  record_len               fixed bin(24);
dcl  record_ptr               ptr int static;
dcl  remaining_block_len      fixed bin(24)int static;
dcl  return_ascii_card        char (80) parm	/* returned ascii image of dollar card */;
dcl  return_dollar_sw         bit (1) parm	/* switch on if this is a dollar card */;
dcl  status                   bit (72) aligned;
dcl  words_read               fixed bin(24);

dcl 1 ascii_record aligned based (record_ptr),
    2 rcw bit (36) aligned,
    2 chars char (80) unaligned;

dcl 1 bcw aligned based (record_ptr),
    2 bsn bit (18) unaligned,
    2 length bit (18) unaligned;

dcl 1 rcw aligned based (record_ptr),
    2 length bit (18) unaligned,
    2 eof bit (6) unaligned,
    2 zeroes bit (2) unaligned,
    2 media_code bit (4) unaligned,
    2 report_code bit (6) unaligned;
%page;
%include gcos_ext_stat_;
     end gcos_read_card_;
