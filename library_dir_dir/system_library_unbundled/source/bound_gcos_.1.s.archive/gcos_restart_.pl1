/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* ********************************************************************#
   **
   *							*
   *	Save and Restart Procedure				*
   *							*
   *							*
   *  This procedure saves selected data from gcos_ext_stat_ needed	*
   *  to restart a GCOS job from the current actvity when a system	*
   *  interruption occurs.  If an activity restart is specified,	*
   *  this procedure restores the necessary data in gcos_ext_stat_.	*
   *  							*
   *	WRITTEN BY D.A. KAYDEN  JANUARY 1975			*
   *	MODIFIED BY D.A. KAYDEN  JUNE 1975
   *	MODIFIED BY R.H. MORRISON  JULY 14,1975
   *	Modified by M. R. Jordan, October 1977
   *							*
   ******************************************************************** */

gcos_restart_: proc (n);

/*	D E C L A R A T I O N S 	*/

%include gcos_ext_stat_;
%include gcos_restart_control_;


dcl n fixed bin(24)parm;
dcl  ioa_ ext entry options (variable);
dcl size builtin;
dcl  gcos_attach_file_$reattach ext entry (ptr, fixed bin(35));
dcl  gcos_gein_pass1_$job_stream_restart ext entry (fixed bin(35));
dcl  gcos_write_$ptr ext entry (ptr, char (*), bit (8));
dcl  gcos_write_$force_ptr ext entry (ptr);
dcl  gcos_error_ ext entry options (variable);
dcl  gcos_cc_endjob_$restart ext entry;
dcl  gcos_close_file_ ext entry (pointer);
dcl  gcos_et_$no_restart fixed bin(35) ext;

dcl  save_area (size(save_data_entry)) bit (36) aligned based;

dcl i fixed bin;
dcl  code fixed bin(35);

dcl 1 flags_copy like flags;
dcl  no_job_restart bit (1) aligned;

dcl  NL char (1) int static init ("
");


dcl (addr, addrel, null, substr) builtin;



/*	P R O C E D U R E		*/


	fibptr = addr (save_data.fibs);
	no_job_restart = "0"b;			/* initialize flag */

/*  Check for no activity restart */

	if restart_control.na_restart			/* NREST card option */
	| restart_control.cant_do			/* can't do activity restart */
	then
	     if restart_control.nj_restart		/* no job restart - NJREST card option */
	     | save_data.activity_no = 1		/* no job restart special case */
	     then
		do;
		no_job_restart = "1"b;
		if ^gcos_ext_stat_$save_data.brief then call ioa_ ("neither activity nor job is restartable");
		go to restore;
	     end;

	     else do;
		n = 4;
		if ^gcos_ext_stat_$save_data.brief then call ioa_ ("job restarted");
		return;
	     end;


/* Restore gcos_ext_stat_  */
restore:


	unspec (flags_copy) = unspec (gcos_ext_stat_$save_data.flgs); /* save the curren flags. */

	addr (gcos_ext_stat_$save_data) -> save_area = restart_control.restart_data;
						/* copy saved data */

	flags_copy.snumb = gcos_ext_stat_$save_data.snumb; /* change several current gcos_ext_stat_$save_data to saved values */
	flags_copy.ident = gcos_ext_stat_$save_data.flgs.ident;
	flags_copy.prev_act_abort = gcos_ext_stat_$save_data.prev_act_abort;
	flags_copy.endjob = gcos_ext_stat_$save_data.endjob;
	unspec (gcos_ext_stat_$save_data.flgs) = unspec (flags_copy); /* Restore flags. */

	fibptr = addr (save_data.fibs);

	if gcos_ext_stat_$save_data.endjob then go to endjob_restart; /* crashed during endjob processing */
	if no_job_restart then go to job_term;


/*  Activity restart initialization */

	do i = 1 to hbound (save_data.fibs, 1);
	     if ^fib.used then go to next_fib;
	     if fib.tape then go to act_fail;		/* cannot do activity restart presently if tapes */
						/* are saved because we cannot reposition them */
	     if fib.stream = "sysprint" then gcos_ext_stat_$prt = fibptr;
	     else if fib.stream = "syspunch" then gcos_ext_stat_$pch = fibptr;
	     else if fib.stream = "exec_rpt" then gcos_ext_stat_$er = fibptr;
	     else if fib.stream = "rstar" | substr (fib.stream, 4) = "rstar" then
		if ^fib.gein then gcos_ext_stat_$rs = fibptr;

	     fib.buffer = null;
	     if fib.attached then
		do;
		call gcos_attach_file_$reattach (fibptr, code);
		if code ^= 0 then go to act_fail;
	     end;

next_fib:	     fibptr = addrel (fibptr, size (fib));
	end;

	call gcos_gein_pass1_$job_stream_restart (code);
	if code ^= 0 then go to act_fail;

/*  Activity restart */

	call gcos_write_$ptr (gcos_ext_stat_$er, NL, "11111100"b);
	call gcos_write_$ptr (gcos_ext_stat_$er,
	     "****** system interruption, job restarted here ******
", "11111100"b);
	call gcos_write_$ptr (gcos_ext_stat_$er, NL, "11111100"b);
	call gcos_write_$force_ptr (gcos_ext_stat_$er);

	if save_data.activity_no = 0 then n = 2;	/* restarting at first activity */
	else n = 3;				/* restarting at later activity */

	if ^gcos_ext_stat_$save_data.brief then call ioa_ ("performing activity restart");

	return;

act_fail:
	if ^gcos_ext_stat_$save_data.brief then call ioa_ ("activity restart failed, code = ^o", code);

job_restart:					/* Restart job if card option is JREST; otherwise abort it */

	gcos_ext_stat_$save_data.flgs.snumb, gcos_ext_stat_$save_data.flgs.ident, gcos_ext_stat_$save_data.flgs.prev_act_abort, gcos_ext_stat_$save_data.flgs.endjob = "0"b;
						/* clear gcos_ext_stat_$save_data that may have been set during restart attempt */
	if restart_control.nj_restart			/* test job restart options */
	| save_data.activity_no = 1 then
	     goto job_term;				/* terminate job */
	else do;					/* restart job */
	     n = 1;
	     if ^gcos_ext_stat_$save_data.brief then call ioa_ ("job restarted");

/* Files that we were able to attach must be detached again - this is done by gcos_gein_ calling gein_cleanup */

	     return;

	end;

job_term:						/* reattach sysout files and terminate job */

	do i = 1 to hbound (save_data.fibs, 1);
	     if ^fib.used then go to nextfib;
	     if fib.stream = "sysprint" then gcos_ext_stat_$prt = fibptr;
	     else if fib.stream = "syspunch" then gcos_ext_stat_$pch = fibptr;
	     else if fib.stream = "exec_rpt" then gcos_ext_stat_$er = fibptr;
	     else do;
		fib.disp = "01"b;
		call gcos_close_file_ (fibptr);
		go to nextfib;
	     end;

	     fib.buffer = null;
	     if fib.attached
	     then
		do;
		call gcos_attach_file_$reattach (fibptr, code);
		if code ^= 0 then gcos_ext_stat_$save_data.endjob = "1"b;
	     end;

nextfib:	     fibptr = addrel (fibptr, size (fib));

	end;

	call gcos_write_$ptr (gcos_ext_stat_$er, NL, "11111100"b);
	call gcos_write_$ptr (gcos_ext_stat_$er,
	     "****** system interruption, job terminated here ******
", "11111100"b);
	call gcos_write_$ptr (gcos_ext_stat_$er, NL, "11111100"b);
	call gcos_write_$force_ptr (gcos_ext_stat_$er);

	call gcos_error_ (gcos_et_$no_restart);


endjob_restart:
	do i = 1 to hbound (save_data.fibs, 1);		/* we must null the buffer pointers */

	     fib.buffer = null;

	     fibptr = addrel (fibptr, size (fib));
	end;

	if ^gcos_ext_stat_$save_data.brief then
	     call ioa_ ("restarting end of job processing");

	call gcos_cc_endjob_$restart;			/* does not return here */


/*		Entry to save the necessary portions of gcos_ext_stat_		*/



save:	entry;

	restart_control.cant_do = "1"b;		/* don't try to restart an incomplete save */

	restart_control.restart_data = addr (gcos_ext_stat_$save_data) -> save_area;

	restart_control.saved = "1"b;			/* set flag */

	restart_control.na_restart = "0"b;		/* default card option is REST */

	restart_control.cant_do = "0"b;		/* save completed */

	return;

     end gcos_restart_;
