/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gcos_fault_processor_: proc;

/*
   This procedure handles all faults occurring in a gcos program
   except the MME. Once the fault cause is interpreted, the gcos
   slave program prefix fault vector is examined to see if the gcos
   program has set up a handler for this fault. Each fault vector
   consists of two words except for lockup. The first word is used
   to store the instruction counter and indicators at the time of
   the fault. The second word contains the address of where to go in
   the gcos program to process the fault. If the location is 0, the
   program will be aborted. If a fault processing routine is
   specified, the scu data will be modified to cause control to
   return to the gcos program at that location.

   Author: DICK SNYDER OCTOBER 2, 1970
   Change: T. CASEY SEPTEMBER 1973, FEBRUARY 1974, APRIL 1974
   Change: D. KAYDEN  JUNE 1974, DECEMBER 1974
   Change: T. CASEY AUGUST 1975
   Change: M. R. Jordan, October 1977
   Change: Dave Ward	06/03/81 hashed fault name list.
   Change: Dave Ward	06/03/81 RSW (2) provision.
*/
	cond_info.version = 1;			/* expect version 1 of info structure */
	call find_condition_info_ (null, addr (cond_info), code);
	mcp = cond_info.mcptr;			/* Location of machine conditions at fault time. */
	scup = addr (mc.scu);			/* Corresponding SCU data. */

/* Hash the condition name. */
	unspec (hv) =
	     cn.l					/* Length of condition name, */
	     ||cn.b (1)				/* leftmost character, */
	     ||cn.b (divide (length (condition_name)+1, 2, 17)) /* middle character, */
	     ||cn.b (length (condition_name));		/* rightmost character. */
	i = THL (mod (hv, hbound (THL, 1)+1));		/* Probe the hash start list. */
	if i>0 then				/* Name possibly in hash list. */
	     if condition_name = substr (string (TC), TL (i).fc, TL (i).ln) then do; /* Fault name found. */
		if scu.ppr.psr ^= substr (baseno (gcos_ext_stat_$gcos_slave_area_seg), 4, 15) then
		     goto general_abort;		/* abort if fault occurred outside gcos segment */
		faultv.ic = instruction_counter+1;	/* get IC */
		faultv.ind = string (scu.ir);		/* and I */
		goto fault (i);			/* handle fault if we want */
	     end;
	if condition_name = "simfault_" then goto general_abort;

pass_it_on:
	call continue_to_signal_ (code);		/* let's pass it on */

return_to_gcos_code: ;
	return;
%page;
/* 	Come here on a wide class of faults we won't take specific action on */

/* "page" fault. */
fault (10):
general_abort:

/* to avoid aborting job because of something like a missing segment, or
   bad access (which Multics normally allows users to recover from) we will
   ask the user if he wants to abort or let Multics handle it - but only if -db was given */

	if gcos_ext_stat_$save_data.debug then do;
	     query_info.yes_or_no_sw = "1"b;
	     call command_query_ (
		addr (query_info)
		, answer
		, "gcos"
		, "fault: ^a occurred while running an activity."
		||"^/Do you wish to invoke the Multics fault handlers ?"
		, cond_info.condition_name
		);
	     if answer = "yes" then goto pass_it_on;
	end;

	abort_code = gcos_et_$non_gcos_fault;		/* abort */
	goto abrt1;
%page;
/* derail					 */

fault (01):

	abort_code = gcos_et_$derail_flt;		/* abort type */
	fault_vector = 12;				/* vector offset */
	goto user_fault;				/* see if user has handler for fault */
%page;
/* fault tag 1				 */

fault (04):

	abort_code = gcos_et_$fault_tag_flt;		/* abort type */
	fault_vector = 4;				/* vector offset */
	goto user_fault;				/* see if user has handler */
%page;
/* Illegal procedure fault (used for RSW recognition). */
fault (05): ;
	if baseno (cond_info.loc_ptr)
	=
	baseno (gcos_ext_stat_$gcos_slave_area_seg) then	/* Fault occured in gcos memory segment. */
	     if cond_info.loc_ptr -> INS.OPCODE = "231"b3 then /* => RSW instruction. */
		if cond_info.loc_ptr -> INS.ADDRESS.r3b = 2 then do; /* Switches selected. */
		     instruction_counter = instruction_counter+1; /* Increment to instruction after RSW. */
		     scu.rfi = "1"b;		/* Refetch instruction. */
		     scu.if = "0"b;			/* Reset fault indicator. */

/* Set the A register to reflect switch info. */
		     mc.regs.a =

/* (A-reg bits) */
/* (0-3) Port address expansion option:		*/ (4)"0"b
/* (4-5) Reserved for future use:		*/ || (2)"0"b
/* (6-12) Processor fault base address switches:	*/ || (7)"0"b
/* (13-16) L66 peripheral connectability:	*/ || (4)"0"b
/* (17) Future use (must be zero):		*/ || (1)"1"b
/* (18) BCD option installed:			*/ || (1)"1"b
/* (19) DPS type processor:			*/ || (1)"0"b
/* (20) 8K cache option installed:		*/ || (1)"0"b
/* (21) Gear shift model processor:		*/ || (1)"0"b
/* (22) Power pach option installed:		*/ || (1)"0"b
/* (23) VMS-CU option installed - 66B' proc:	*/ || (1)"0"b
/* (24) VMS-VU option installed - 66B proc:	*/ || (1)"0"b
/* (25) Type processor (0) CPL, (1) DPSE-NPL:	*/ || (1)"0"b
/* (26) 6025, 6605 or 6610 type processor:	*/ || (1)"0"b
/* (27) 2K cache option installed:		*/ || (1)"0"b
/* (28) Extended memory option installed:	*/ || (1)"0"b
/* (29-30) cabinet (00) 8/70, (01) 8/52, (10) 862, (11) 846:	*/ || (2)"0"b
/* (31) EIS option installed:			*/ || (1)"1"b
/* (32) (1) slow memory access, (0) fast memory:	*/ || (1)"0"b
/* (33) (1) no instruction overlap, (0) overlap:	*/ || (1)"0"b
/* (34-35) Processor number:			*/ ||unspec (mc.cpu_type);
			goto return_to_gcos_code;
		end;
	goto illegal_proc;
%page;
/* MME3 fault. */
fault (02):
	if gcos_ext_stat_$save_data.debug then goto pass_it_on; /* user must say -db in order to use the debugger */

/* MME4 fault. */
fault (03):

/* Illegal modifier. */
fault (06):

/* Linkage error. */
fault (07):

/* Fault tag 3. */
fault (08):

/* Segment fault error. */
fault (09):

/* Gate error. */
fault (11):

/* Illegal opcode. */
fault (21):

illegal_proc: ;
	abort_code = gcos_et_$illegal_procedure;	/* abort type */
	fault_vector = 0;				/* vector offset */
	goto user_fault;				/* see if user has handler */
%page;
/* attempt to read or write out of partition bounds 	 */

/* Store fault. */
fault (12):

/* Out_of_bounds fault. */
fault (20):

	abort_code = gcos_et_$mem_addr_flt;		/* abort type */
	fault_vector = 2;				/* vector offset */
	goto user_fault;				/* see if user has handler */
%page;
/* overflow				 */

fault (16):
	fault_flags = "020000"b3 ;			/* turn on bit 22 of accum. fault status */
	goto common_flow;
%page;
/* fixedoverflow */

fault (15):
	fault_flags = "040000"b3 ;			/* turn on bit 21 of accum. fault status */
	goto common_flow;
%page;
/* underflow */

fault (14):

	fault_flags = "010000"b3 ;			/* turn on bit 23 of accum. fault status */

common_flow:

	abort_code = gcos_et_$over_or_under_flow;	/* abort type */
	fault_vector = 8;				/* vector offset */
	goto user_faultx;				/* see if user has handler */
%page;
/* zero divide 				 */

fault (17):

	abort_code = gcos_et_$divide_check_flt;		/* abort type */
	fault_vector = 6;				/* vector offset */
	fault_flags = "000100"b3 ;			/* turn on bit 29 of accum. fault status */

/* 	Come here with a fault which the gcos user can potentially handle.  */
/* 	"fault_vector" holds the offset from the base of the gcos segment where	 */
/* 	the user's fault vector for the particular fault which occurred is located.	 */
/* 	If the user has no address specifed to which control should go on a fault	 */
/* 	of the type which occurred, "abort_code" holds the type of abort to	  */
/* 	be taken.						  */

/* Put the accumulated fault status into word 25 of prefix */
user_faultx:
	p = addrel (gcos_ext_stat_$gcos_slave_area_seg, 25); /* get pointer to it */
	p -> accum_stat = p -> accum_stat | ((6)"0"b3 || fault_flags); /* or in the gcos_ext_stat_$save_data */

user_fault:

	prefix_vector (fault_vector) = ic_i;		/* copy ic and indicators into fault vector */

	if prefix_vector (fault_vector+1) = (36)"0"b then do; /* if user has no handler, abort the job */

abrt:	     unspec (gcos_ext_stat_$mc) = unspec (mc);	/* save fault data for gcos_mme_bort_ */
abrt1:	     call condition_interpreter_ (null, p, i, 3, mcptr, (condition_name), wcptr, infoptr);
	     call gcos_mme_bort_$system (abort_code);
	     goto return_to_gcos_code;		/* just in case */
	end;

/* 	Set scu data to cause processor to resume execution at the 	 */
/*	second word of the fault vector. This is done by setting the ilc to */
/*	the address of that word and turning on "rfi" and "if "in the */
/*	scu data, to force the cpu to refetch the instruction from the */
/*	word pointed to by the ilc. */

/* Useg instruction in gcos code at 2nd word of fault entry. */
	instruction_counter = fault_vector+1;
	scu.rfi = "1"b;				/* Refetch this instruction. */
	scu.if = "0"b;				/* Turn off indicator indicating instruction caused fault. */
	goto return_to_gcos_code;			/* goto return_to_gcos_code to the gcos program */
%page;
/* HANDLERS FOR FAULTS THAT THE USER'S FAULT VECTOR CAN NOT HANDLE */

/* parity */

fault (13):

	abort_code = gcos_et_$mem_parity_flt;
	fault_vector = 6;				/* say where to put IC and I */
	goto ic_and_i;				/* and go do it */
%page;
/* op_not_complete				 */

fault (19):

	abort_code = gcos_et_$op_not_complete_flt;	/* abort */
	fault_vector = 4;				/* say where to put IC and I */
	goto ic_and_i;				/* and go do it */
%page;
/* lockup					 */

fault (18):

	abort_code = gcos_et_$lockup_flt;		/* abort */
	fault_vector = 2;				/* say where to put IC and I */

/* 	Come here to put IC and I in word 10 and one other word (specified by fault_vector) */

ic_and_i:

	prefix_vector (10) = ic_i;			/* put it into word 10 */
	prefix_vector (fault_vector) = ic_i;		/* and also word 2, 4, or 6 */

	goto abrt;				/* and go abort the activity */
%page;
timer_runout: entry (mcp_val, fault_name);

/* 	Come here if fault is a timer runout				 */
dcl  fault_name               char(*)parm	/* fault name from fim */;
dcl  mcp_val                  ptr parm;
	mcp = mcp_val;
	scup = addr (mc.scu);


	abort_code = gcos_et_$out_of_time;		/* abort */

	unspec (gcos_ext_stat_$mc) = unspec (mc);	/* save fault data for gcos_mme_bort_ */

abrt2:	call gcos_mme_bort_$system (abort_code);
	goto return_to_gcos_code;			/* just in case */
%page;
/*   Variables for gcos_fault_processor_:	 */
/*   IDENTIFIER		ATTRIBUTES	 */
dcl  abort_code               fixed bin(35)	/* abort code for this fault */;
dcl  accum_stat               bit(36) aligned based	/* overlay for accumulated */;
dcl  addr                     builtin;
dcl  addrel                   builtin;
dcl  answer                   char(4) varying;
dcl  baseno                   builtin;
dcl  code                     fixed bin(35);
dcl  command_query_           ext entry options (variable);
dcl  condition_interpreter_   ext entry (ptr, ptr, fixed bin(24), fixed bin(24), ptr, char(*), ptr, ptr);
dcl  continue_to_signal_      ext entry (fixed bin(35));
dcl  divide                   builtin;
dcl  fault_flags              bit(18)	/* gcos_ext_stat_$save_data to set accumulated */;
dcl  fault_vector             fixed bin(24)/* offset from base of gcos segment */;
dcl  find_condition_info_     ext entry (ptr, ptr, fixed bin(35));
dcl  fixed                    builtin;
dcl  gcos_et_$derail_flt      fixed bin(35) ext;
dcl  gcos_et_$divide_check_flt fixed bin(35) ext;
dcl  gcos_et_$fault_tag_flt   fixed bin(35) ext;
dcl  gcos_et_$illegal_procedure fixed bin(35) ext;
dcl  gcos_et_$lockup_flt      fixed bin(35) ext;
dcl  gcos_et_$mem_addr_flt    fixed bin(35) ext;
dcl  gcos_et_$mem_parity_flt  fixed bin(35) ext;
dcl  gcos_et_$non_gcos_fault  fixed bin(35) ext;
dcl  gcos_et_$op_not_complete_flt fixed bin(35) ext;
dcl  gcos_et_$out_of_time     fixed bin(35) ext;
dcl  gcos_et_$over_or_under_flow fixed bin(35) ext;
dcl  gcos_mme_bort_$system    ext entry options (variable);
dcl  hbound                   builtin;
dcl  hv                       fixed bin(35);
dcl  i                        fixed bin(24);
dcl  ic_i                     bit(36) aligned;
dcl  instruction_counter      fixed bin(18)unsigned unal based(addr(scu.ilc));
dcl  length                   builtin;
dcl  mod                      builtin;
dcl  null                     builtin;
dcl  p                        pointer;
dcl  prefix_vector            (0:13) bit(36) aligned based (gcos_ext_stat_$gcos_slave_area_seg);
dcl  string                   builtin;
dcl  substr                   builtin;
dcl  unspec                   builtin;

dcl 1 INS	aligned based
,2 ADDRESS	unal
,  3 fill		bit(15)unal
,  3 r3b		fixed bin(3)unsigned unal
,2 OPCODE		bit(10)unal
,2 I		bit(1)unal
,2 T		bit(1)unal
,2 TAG		bit(6)unal
;


/* Structure overlays varying string "condition name"
   to provide formation of hash value.
*/
dcl 1 cn	aligned based(addr(condition_name))
,2 f bit(27)unal
,2 l bit( 9)unal
,2 b (32)bit(9)unal
;

dcl 1 faultv aligned based (addr (ic_i))	/* overlay for ic_i */,
    2 ic fixed bin(18)unsigned unaligned	/* instruction counter */,
    2 ind bit(18) unaligned			/* indicators */;
%page;
dcl 1 cond_info aligned,
%include cond_info;
%page;
%include gcos_fault_names;
%page;
%include query_info;
%page;
%include gcos_ext_stat_;
     end gcos_fault_processor_;
