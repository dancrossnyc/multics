/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gcos_open_file_: proc (filecode, lud, newfib, present);

/*
   This procedure will initialize a fib (file info block) and
   return a pointer to it. If called with a non-null lud
   (logical unit designator), a search is made for an existing
   fib with a matching lud. If a match is found, a pointer to
   that lud is returned and the "present" argument is set on.

   If called with a file code, an entry is made in the file
   code table pointing to the fib. If the file code is already
   entered in the file code table, it is removed.

   The sysout entry to this routine places the requested file
   code in a file code table entry, sets the sysout and dac
   flags, but does not allocate a fib.

   INPUT PARAMETERS:
   =  file_code 2 character file code of file to be opened.
   =  lud       2 or 3 character logical unit designator.

   OUTPUT PARAMETERS:
   =  fibptr    pointer to fib assigned to opened file.
   =  present   set to 1 if file was already open.

   Author: DICK SNYDER AUGUST 7, 1970
   Change: T. CASEY JULY 1973, FEBRUARY 1974
   Change: D. KAYDEN  MAY 1974, MARCH 1975
   Change: M. R. Jordan, October 1977
   Change: Mel Wilson, November 1979 for gtss compatibility
   Change: Dave Ward	09/13/81 structured.
*/
dcl  dac_sw                   bit(1)parm	/* dac/sysout switch */;
dcl  filecode                 char(*)parm	/* file code of file to be opened */;
dcl  lud                      char(*)parm	/* logical unit designator of file */;
dcl  newfib                   ptr parm		/* returns pointer to found fib */;
dcl  present                  bit(1)parm	/* set to 1 if file open already */;

	sysout_call = "0"b;
	if filecode = "" then goto no_fc;
	goto common;

sysout:	entry (filecode, dac_sw);

	sysout_call = "1"b;

common:	;
	do fctno = 1 to hbound (save_data.fibs, 1);	/* search for matching file code */
	     if fct.filecode (fctno) = filecode then go to fc_hit;
	end;

	do fctno = 1 to hbound (save_data.fibs, 1);	/* no match on file codes */
	     if fct.filecode (fctno) = "" then go to set_fc; /* find an unused entry */
	end;

	call gcos_error_ (gcos_et_$no_free_fibs);	/* bad news */

fc_hit:	;
	if fct.sysout (fctno) then go to set_fc;	/* check for sysout file code */
	fibptr = fct.fibptr (fctno);			/* save pointer to fib */
	fct.fibptr (fctno) = null ();			/* detach file code from fib */

	do i = 1 to hbound (save_data.fibs, 1);		/* see if this fib has any file codes left */
	     if fct.filecode (i) ^= "" & ^fct.sysout (i) then
		if fct.fibptr (i) = fibptr then go to set_fc; /* yes - leave file alone */
	end;

	if ^fib.gein & fib.attached then do;		/* if file was saved from a previous activity, */
	     fib.disp = "10"b;			/* then restore its disposition and save it */
	     go to set_fc;
	end;

	if fib.attached then
	     call gcos_close_file_ (fibptr);		/* detach if attached */
	else fib.used = "0"b;

set_fc:	;
	fct.filecode (fctno) = filecode;
	if sysout_call then do;
	     fct.sysout (fctno) = "1"b;		/* set sysout flag */
	     fct.dac (fctno) = dac_sw;		/* set dac flag from parameter */
	     return;				/* done */
	end;

	fct.sysout (fctno) = "0"b;

no_fc:	;
	if lud ^= "" then do;
	     asc_lud = lud;				/* conversion routine requires aligned string */
	     call gcos_cv_ascii_gebcd_ (addr (asc_lud), length (asc_lud), addr (bcd_lud), i);
	end;

	do i = 1 to hbound (save_data.fibs, 1);
	     fibptr = addr (save_data.fibs (i));
	     if bcd_lud ^= "0"b & fib.used then

		if fib.plud = bcd_lud then do;	/* fib with matching lud found */
		     newfib = fibptr;		/* set return pointer to this fib */
		     present = "1"b;		/* indicate not a new file */
		     go to lud_hit;
		end;

	     if ^fib.used & sw then do;		/* find an available fib */
		sw = "0"b;			/* yes. set sw to indicate available fib found */
		newfib = fibptr;			/* set return pointer to this fib */
	     end;					/* continue search */
	end;

	if sw then call gcos_error_ (gcos_et_$no_free_fibs); /* fatal error if no available fib */

	present = "0"b;				/* indicate fib newly opened */
	fibptr = newfib;				/* reset fib pointer to found fib */
	string (fib.indicators) = "0"b;		/* clear fib.indicators */
	fib.disp = "01"b;				/* default disp release */
	fib.used = "1"b;				/* set fib used */
	fib.pathnm = " ";				/* blank pathname */
	fib.unique_file_id = "0"b;			/* multics unique segment id for multi-user control */
	fib.command_index = 0;			/* init for mme_inos_ */
	fib.buffer = null ();			/* set pointer to null */
	fib.size = 0;				/* init file size */
	fib.init_size = 0;
	fib.current = 0;				/* set file in rewound position */
	fib.slud = "0"b;				/* clear log.unit desigs */
	fib.plud = bcd_lud;
	fib.stream = " ";				/* blank attach name */

lud_hit:	;
	if filecode ^= "" then
	     fct.fibptr (fctno) = fibptr;		/* set fib pointer in file code entry */

	if dbs_open_file then do;
	     if lud = "" then
		call ioa_ ("gcos_open_file_ fc=^a, fibnewfib=^p", filecode, newfib);
	     else
	     call ioa_ ("gcos_open_file_ fc=^a, fibnewfib=^p, lud=^a ^[^;not^] present", filecode, newfib, lud, present);
	end;

	return;					/* all done */
%page;
/*   Variables for gcos_open_file_:		 */
/*   IDENTIFIER		ATTRIBUTES	 */
dcl  addr                     builtin;
dcl  addrel                   builtin;
dcl  asc_lud                  char(3) aligned;
dcl  bcd_lud                  bit(18) aligned init ("0"b);
dcl  fctno                    fixed bin(17);
dcl  gcos_close_file_         ext entry (pointer);
dcl  gcos_cv_ascii_gebcd_     ext entry (ptr, fixed bin(24), ptr, fixed bin);
dcl  gcos_error_              entry options (variable);
dcl  gcos_et_$no_free_fibs    fixed bin(35) ext;
dcl  hbound                   builtin;
dcl  i                        fixed bin(17);
dcl  ioa_                     ext entry options (variable);
dcl  length                   builtin;
dcl  null                     builtin;
dcl  size                     builtin;
dcl  string                   builtin;
dcl  sw                       bit(1) initial ("1"b)	/* switch used in fib search */;
dcl  sysout_call              bit(1);
%page;
%include gcos_ext_stat_;
%page;
%include gcos_dbs_names;
     end gcos_open_file_;
