/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


gcos_cc_misc_cards_: proc;

/* *  THIS PROCEDURE IS USED TO HANDLE SEVERAL CARDS THAT REQUIRE LITTLE OR NO
   *  PROCESSING IN THIS PASS OF THE SIMULATOR
   *
   *  WRITTEN BY T. CASEY NOVEMBER 1973
   *  MODIFIED BY T. CASEY FEBRUARY 1974
   *  Modified by M. R. Jordan, October 1977
   *  Modified:  Ron Barstad  83-08-03  Added "." and "_" as valid fms characters
   *  Modified:  Ron Barstad  84-02-21  Fixed length of userid if no password 
   *
   */

dcl  FMS_VALID_CHARS char (65) static internal options (constant) init (".-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz");
dcl  (index, rtrim, verify)  builtin;
dcl  card char (80);						/* ascii card image */
dcl  field char (5);
dcl  gcos_error_ entry options (variable);
dcl  gcos_et_$cc_bad_field fixed bin(35) ext;
dcl  gcos_et_$cc_missing_field fixed bin(35) ext;
dcl  gcos_et_$cc_unimp fixed bin(35) ext;
dcl  gcos_get_cc_field_ entry (char (80), char (*), fixed bin(24));
dcl  gcos_record char (*);						/* bcd card image, overlayed by char (*) variable */
dcl  gcos_write_$record ext entry (char (*), char (*), bit (8));
dcl  gcos_write_to_er_ ext entry options (variable);
dcl  i fixed bin(24);
dcl  indx fixed bin(24);						/* position in card table - not used here */
dcl  ioa_ ext entry options (variable);
dcl  length builtin;
dcl  result fixed bin(24);
dcl  substr builtin;
dcl  userid_field char (25);

/*  These cards get printed on operators console (user's console, for Multics)
   at the time the activity is run */

cc_msg2:
cc_comment:
	entry (card);

	call ioa_ ("^a", substr (card, 8, 72));		/* print the card */
	return;

/* These cards are acted upon in earlier passes, and are ignored in this pass */

cc_msg1:
cc_msg3:
	entry;
						/* do nothing */
	return;

cc_userid: entry (card);


	call gcos_get_cc_field_ (card, userid_field, result);
	if result ^= 0 then call gcos_error_ (gcos_et_$cc_missing_field,
	     "Userid missing.^/^a^2x^a",
	     gcos_ext_stat_$card_num, card);


	i = index (userid_field, "$")-1;
	if i < 0 then i = length (rtrim(userid_field));


	if i > 12 then call gcos_error_ (gcos_et_$cc_bad_field,
	     "Userid longer than 12 characters.^/^a^2x^a",
	     gcos_ext_stat_$card_num, card);
	if i <= 1 then call gcos_error_ (gcos_et_$cc_bad_field,
	     "Userid missing.^/^a^2x^a",
	     gcos_ext_stat_$card_num, card);


	if verify (substr (userid_field, 1, i-1), FMS_VALID_CHARS) ^= 0 then call gcos_error_ (gcos_et_$cc_bad_field,
	     "Illegal charater(s) in userid.^/^a^2x^a",
	     gcos_ext_stat_$card_num, card);


	gcos_ext_stat_$userid = substr (userid_field, 1, i);


	return;

/* The $ BREAK card resets the abort flag, and psw bit 5,
   to allow executions to be run after an abort */

cc_break:	entry;


	if gcos_ext_stat_$save_data.prev_act_abort then do;		/* if an abort occurred */

	     gcos_ext_stat_$save_data.prev_act_abort = "0"b;		/* turn off abort flag */
						/* and set PSW bit 5 */
	     if save_data.activity_no		/* if the next activity */
	     < save_data.last_execute_act_no	/* is before the last execution activity */
	     then save_data.psw = save_data.psw | "000001"b; /* then turn on psw bit 5 */
	end;

	return;

/* The etc card might be a continuation of a card that the simulator writes
   on a file without interpreting. If so, we will write it on the same file.
   If not, the etc card is out of place - a nonfatal error */

cc_etc:
	entry (card, indx, gcos_record);


	if gcos_ext_stat_$save_data.write_etc then do;			/* if previous card was written on a file */
	     call gcos_write_$record (gcos_ext_stat_$etc_filecode, gcos_record, (8)"0"b);
	     return;
	end;

/* else fall thru to the out-of-place-card processing, which follows */

/* The following cards have showed up out of context, or we would not be here */
cc_alter:
cc_endcopy:
	entry (card);


	call gcos_write_to_er_ ("Warning:  The following $ card has been encountered out of context.  It will be ignored.^/^a^2x^a",
	     gcos_ext_stat_$card_num, card);
						/* gcos_error_ does not return */
	if gcos_ext_stat_$save_data.long then				/* print warning if -long was given */
	     call ioa_ ("Warning:  The following $ card has been encountered out of context.  It will be ignored.^/^a^2x^a",
	     gcos_ext_stat_$card_num, card);

	return;

cc_need:	entry (card);


	call gcos_get_cc_field_ (card, field, result);

	if result ^= 0 then call gcos_error_ (gcos_et_$cc_missing_field,
	     "^a^2x^a", gcos_ext_stat_$card_num, card);

	if field = "any" then return;

	if substr (field, 1, 3) = "sys" then call gcos_error_ (gcos_et_$cc_unimp,
	     "Only $ NEED ANY is allowed.^/^a^2x^a", gcos_ext_stat_$card_num, card);
	else call gcos_error_ (gcos_et_$cc_bad_field, """^a""^/^a^2x^a", field,
	     gcos_ext_stat_$card_num, card);

%include gcos_ext_stat_;


     end gcos_cc_misc_cards_;
