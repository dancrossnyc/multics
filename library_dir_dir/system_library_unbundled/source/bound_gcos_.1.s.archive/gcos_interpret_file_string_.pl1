/* *************************************************************
   *                                                           *
   * Copyright, (C) Honeywell Information Systems Inc., 1982   *
   *                                                           *
   * Copyright (c) 1974 by Honeywell Information Systems, Inc. *
   *                                                           *
   ************************************************************* */


/* **************************************************************************
   **************************************************************************
   *
   *
   * This routine receives gcos_cfdesc and returns the corresponding multics_path
   * and path_len.  gcos_cfdesc is the gcos catalog/file description containing
   * slashes and dollar signs.  multics_path is the corresponding Multics absolute pathname.
   * path_len is the length of the returned multics_path.
   *
   *  Written by G. Novak Feb. 21,1974
   *  MODIFIED BY R.H. MORRISON ON APRIL 15, 1974
   *  MODIFIED BY T. CASEY ON MAY 8, 1974
   *  MODIFIED BY R.H. MORRISON ON JULY 18,1975
   * Modified by M. R. Jordan, September 1976
   * Modified:  Ron Barstad  83-08-02  Fixed spelling of "pathname" in ioa_
   *
   *
   **************************************************************************
   *********************************************************************** */




gcos_interpret_file_string_: procedure (gcos_cfdesc, a_multics_path, path_len, card); ;

dcl  LOWER_CASE char (26) static internal options (constant) init ("abcdefghijklmnopqrstuvwxyz");
dcl  card char (80);
dcl  cv_dec_check_ entry (char (*), fixed bin(35)) returns (fixed bin(35));
dcl  gcos_error_ entry options (variable);
dcl  UPPER_CASE char (26) static internal options (constant) init ("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
dcl  a_multics_path char (*);
dcl  addr builtin;
dcl  cat_len fixed bin(24);
dcl  cat_start fixed bin(24);
dcl  cfname char (80) varying;
dcl  code fixed bin(35);
dcl  dollar fixed bin(24);
dcl  err_msg char (150);
dcl  err_msg_len fixed bin(24);
dcl  gcos_cfdesc char (*) varying;
dcl  gcos_et_$cc_bad_field fixed bin(35) ext;
dcl  gcos_write_$ascii_ptr entry (ptr, char (*), bit (8));
dcl  gcos_write_to_er_ entry options (variable);
dcl  i fixed bin(24);
dcl  index builtin;
dcl  ioa_ entry options (variable);
dcl  ioa_$nnl entry options (variable);
dcl  ioa_$rs entry options (variable);
dcl  length builtin;
dcl  message char (34) static internal init ("invalid GCOS catalog/file string") options (constant);
dcl  multics_path char (168) varying;
dcl  param_num fixed bin(24);
dcl  path_len fixed bin(24);
dcl  slash fixed bin(24);
dcl  stop bit (1);
dcl  substr builtin;
dcl  var_err_msg char (err_msg_len) based (addr (err_msg)) ;

/*  Initialize and report the GCOS catalog/file description.  */


	call ioa_$rs ("Comment: GCOS catalog/file string is ^a", err_msg, err_msg_len, gcos_cfdesc) ;
	if gcos_ext_stat_$save_data.long then call ioa_$nnl ("^a", var_err_msg) ;
	call gcos_write_$ascii_ptr (gcos_ext_stat_$er, var_err_msg, "11111100"b) ;


/*  Get the pathname prefix and, if necessary, the UMC name.  */


	multics_path = save_data.pathname_prefix ;
	stop = "0"b ;
	i = 1 ;
	call Get_Name_Component () ;
	if ^save_data.skip_umc then do ;
	     multics_path = multics_path || ">" || cfname ;
	end ;


/*  Process the remaining catalog(s)/file(s).  */


	do while (^stop) ;
	     call Get_Name_Component () ;
	     multics_path = multics_path || ">" || cfname ;
	end ;


/*  Report the absolute Multics pathname developed.  */


	call ioa_$rs ("Comment: Multics pathname is ^a", err_msg, err_msg_len, multics_path) ;
	if gcos_ext_stat_$save_data.long then call ioa_$nnl ("^a", var_err_msg) ;
	call gcos_write_$ascii_ptr (gcos_ext_stat_$er, var_err_msg, "11111100"b) ;


/*  Prepare to return by setting the return values.  */


	a_multics_path = multics_path ;
	path_len = length (multics_path) ;


exit:

	return ;

Get_Name_Component: procedure () ;


	     cat_start = i ;


	     slash = index (substr (gcos_cfdesc, i), "/") ;
	     dollar = index (substr (gcos_cfdesc, i), "$") ;


	     if slash = 0 then do ;
		stop = "1"b ;
		slash = length (gcos_cfdesc)+2-i ;
	     end ;
	     if dollar = 0 then dollar = slash ;


	     if dollar < slash then cat_len = dollar-1 ;
	     else cat_len = slash-1 ;
	     if cat_len = 0 then call gcos_error_ (gcos_et_$cc_bad_field,
		"Catalog/filename element is null.^/^a^2x^a",
		gcos_ext_stat_$card_num, card);


	     i = i+slash ;


	     if substr (gcos_cfdesc, cat_start, 1) = "#" then do;
		if cat_len = 1 then cfname = "#";
		else if substr (gcos_cfdesc, cat_start+1, 1) = "#" then cfname = substr (gcos_cfdesc, cat_start+1, cat_len-1);
		else do;
		     param_num = cv_dec_check_ (substr (gcos_cfdesc, cat_start+1, cat_len-1), code);
		     if code ^= 0 then call gcos_error_ (gcos_et_$cc_bad_field,
			"Parameter numbers must be decimal constants.  ""^a""^/^a^2x^a", substr (gcos_cfdesc, cat_start, cat_len),
			gcos_ext_stat_$card_num, card);
		     if param_num < lbound (save_data.param, 1) | param_num > hbound (save_data.param, 1) then
			call gcos_error_ (gcos_et_$cc_bad_field,
			"Parameter number values must be from ^d to ^d.^/^a^2x^a",
			lbound (save_data.param, 1), hbound (save_data.param, 1),
			gcos_ext_stat_$card_num, card);
		     cfname = save_data.param (param_num);
		end;
	     end;
	     else cfname = substr (gcos_cfdesc, cat_start, cat_len);


	     if length (cfname) > 12 then call gcos_error_ (gcos_et_$cc_bad_field,
		"Catalog/filename element is longer than 12 characters.  ""^a""^/^a^2x^a",
		cfname, gcos_ext_stat_$card_num, card);
	     cfname = translate (cfname, LOWER_CASE, UPPER_CASE);
	     if verify (cfname, "0123456789abcdefghijklmnopqrstuvwxyz.-") ^= 0 then
		call gcos_error_ (gcos_et_$cc_bad_field,
		"Catalog/filename element contains illegal character.  ""^a""^/^a^2x^a",
		cfname, gcos_ext_stat_$card_num, card);


	     return ;


	end Get_Name_Component ;

%include	gcos_ext_stat_ ;



     end gcos_interpret_file_string_ ;
