/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

/*

   This  module  will attach a file and associate it with a fib.
   The fib is assumed to have been  initialized  by  a  call  to
   gcos_open_file_.

   The parameter is a pointer to the fib defining the file.  For
   a perm file, fib.pathnm is the full pathname (168 characters)
   of  a  file  to  be  associated  with  the fib.  Otherwise, a
   scratch file will be created.   This  file  will  be  created
   in  the  sysout  directory  if  the  file  is print or punch.
   Otherwise, it will be created  in  the  temporary  directory.
   (The  sysout directory is, by default, the working directory,
   and the temporary  directory,  the  process  directory.   The
   user  can  set  them to any other directories, such as a pool
   directory reserved for  short  term  storage  of  vary  large
   output files.)

   If  the file size has not been specified in fib.size, it will
   be set to 3840 words (one GCOS link).  The file will  be  set
   to the rewound position.

*/
%page;
/*

   Author: Dick Snyder	Dec 15, 1970
   Change: T. Casey	Apr 1973, Feb 1974
   Change: D. Kayden	May 1974, Jul 1974, Jan 1975, Mar 1975
   Change: R.H. Morrison	Jun 1975
   Change: M. R. Jordan	Sep 1976
   Change: Mel Wilson	Oct 1979 for gtss compatibility, Jan 1980 for gtss 2.4
   Change: S.C. Akers	Aug 1981 Clean up format
			Dec 1981 Fix sysout bug. Put printer & punch files
			         in SYSOUT directory, not SAVE directory.
			FEB 1982 Add tape-buffer size checking, and pass buffer
			         size to tape DIM.
   Change: R. Barstad         Oct 1982 Provide concurrent access control for IDS2 files
   Channge: R. Barstad         Nov 1982 Fix format of actid for console msgs
*/
%page;
gcos_attach_file_: proc (fp);

dcl  a_code		fixed bin(35)	parm;
dcl  fp			ptr		parm;


	fibptr = fp;
	reattachsw = "0"b;
	if fib.console | fib.null then goto done;	/* this device does not get attached */

	if fib.stream ^= "" then
	     file_id = fib.stream;			/* file id is provided by caller */
	else
	do i = 1 to hbound (save_data.fibs, 1);		/* otherwise use file code for file id */
	     if fct.fibptr (i) = fibptr then do;	/* find first file code for this file */
		file_id = fct.filecode (i);
		goto set_actid;
	     end;
	end;					/* a match must always be found */

set_actid: ;
	if save_data.activity_no = 0
	| substr (file_id, 6) ^= "" then actid = "";	/* don't put actid with syspunch, etc. */
	else
	if substr (save_data.actid, 7, 1) = "0" then	/* activity no. < 10 */
	     actid = "a" || substr (save_data.actid, 8, 1); /* yes - remove leading zero */
	else
	actid = "a" || substr (save_data.actid, 7, 2);	/*  ascii activity number */

	if length (actid) > 0 then name = actid || "_" || file_id; /* now construct stream name */
	else name = file_id;
	fib.stream = name;				/* save stream name */

	if fib.perm then goto attch;			/* perm file has a complete pathname already specified */

	if fib.tape then goto attach_tape;

/* CONSTRUCT A PATHNAME FOR THE FILE
   Put print and punch files in a permanent directory so that they
   can be printed or punched at a later date without disappearing
   with the process directory when the user is logged out
   Put other files in a temporary directory (might be process directory or a "pool" directory)
*/

	if fib.print | fib.punch then
	     fib.pathnm = save_data.syot_dir;		/* Find the SYSOUT directory. */
	else
	if substr (fib.disp, 1, 1) then
	     fib.pathnm = gcos_ext_stat_$save_dir;
	else fib.pathnm = gcos_ext_stat_$temp_dir;

/* CONSTRUCT ENTRY NAME OF THE FORM:

   <job id>.a<activity number>.<+filecode>

   where the < and > are part of the description - not part of the entry name, and

   <job id> 		was determined during command argument processing;

   <activity number>	is the current activity number (omitted if act. no. = 0);

   <+filecode>		is the filecode, with *'s replaced by +'s.
   (or a name placed in fib.pathnm by the caller)

*/
	fib.pathnm =
	     rtrim (fib.pathnm)
	     || ">"

	     || rtrim (gcos_ext_stat_$job_id)
	     || "."
	     || actid
	     || translate (file_id, "+", "*")
	     ;



/* Attach file */


attch:	;
	if gcos_ext_stat_$save_data.gtssflag then	/* create the new entry, setting ring brackets */
	     if fib.perm | fib.print | fib.punch then do;
		call expand_pathname_ ((fib.pathnm), dir_name, entryname, code);
		if code ^= 0 then do;
		     err_msg = "from expand_pathname_ ^a";
		     goto error_rtrn;
		end;
		call user_info_ (persid, projid, acct);
		call hcs_$append_branchx (dir_name, entryname, 01010b, gcos_ext_stat_$seg_rings
		     , "*." || rtrim (projid) || ".*", 0b, 0b, 0, code);
		if (code ^= 0) & (code ^= error_table_$namedup) & (code ^= error_table_$incorrect_access) then do;
		     err_msg = "from hcs_$append_branchx ^a";
		     goto error_rtrn;
		end;
						/* do gtss allocation */

		if fib.perm & (fib.plud ^= "435453"b3) then do;
		     call gcos_verify_tss_access_ (dir_name, entryname, fib.read || fib.write || "0000"b
			, null (), fib.forced_acl_flag, gcs_status_bits);
		     if gcs_status.status = "4003"b3 then do;
			code = error_table_$notalloc;
			err_msg = "No permission on ^a .";
			goto error_rtrn;
		     end;
		     else
		     if gcs_status.status ^= "4000"b3 then do;
			err_msg = "Error verifying access on ^a .";
			goto error_rtrn;
		     end;

/* FOLLOWING CODE BLOCKED FOR 9.0. Provides concurrent access control.
   call get_lock_id_ (lock_id);
   call random_$set_seed (fixed (substr (bit(clock (), 72), 38, 35), 35, 0));
   alloc_count = 0;
   alloc_start_blocked = clock ();
   try_allocation:;
   call gtss_mcfc_$open (dir_name, entryname, fib.read||fib.write, lock_id, fib.unique_file_id
   , addr (gcs_status), code);
   if gcs_status.status = "4004"b3 then do; / * file busy * /
   alloc_count = alloc_count + 1;
   if mod (alloc_count, 5) = 0 then do;
   call date_time_ (alloc_start_blocked, ascii_time);
   call ioa_ ("Allocation of ^a>^a blocked since ^a, for ^i attempts."
   , dir_name, entryname, ascii_time, alloc_count);
   end;
   call random_$normal (flt_delay);
   call timer_manager_$sleep (fixed (flt_delay*10.0, 71, 0)+61, "11"b); / * wait 60 seconds average * /
   gcs_status.status = "4000"b3;
   goto try_allocation;
   end;
   else
   if code ^= 0 then do;
   err_msg = "from gtss_mcfc_$open ^a";
   goto error_rtrn;
   end;
*/
		end;

	     end;

          /* check for IDS2 file */
          if fib.perm & fib.type /* random */ 
             then do;
	     call expand_pathname_ ((fib.pathnm), dir_name, entryname, code);
	     if code ^= 0 then do;
		err_msg = "from expand_pathname_ ^a";
		goto error_rtrn;
		end;
               /* check for IDS2 file being initialized in Q2UTIL activity */
               if gcos_ext_stat_$activity_name = "q2util" 
                 then do;
                   call gcos_ids2_concur_$create_control(dir_name,entryname,code);
	         if code = error_table_$namedup | code = error_table_$segknown
		    then goto try_allocation;
	         if code ^= 0
		    then do;
		       err_msg = "from gcos_ids2_concur_$create_control ^a";
		       goto error_rtrn;
	              end;
	         end;
                 else /* check if this IDS2 file has an extrinsic id */
                   if gcos_ids2_concur_$have_xid(dir_name,entryname,code)
                     then do;
		       if code ^= 0 then do;
			  err_msg = "from gcos_ids2_concur_$have_xid ^a";
			  goto error_rtrn;
			  end;
try_allocation:	   alloc_count = 0;
		   ascii_snumb = substr(gcos_ext_stat_$save_data.actid,1,5);
try_alloc_again:	   call gcos_ids2_concur_$allocate
                            (dir_name, entryname, fib.read, fib.write,
                             busy_status,code);
                       if code^=0 then do;
                         err_msg = "from gcos_ids2_concur_$allocate ^a";
                         goto error_rtrn;
		     end;
                       if busy_status /* busy */ then do;
		        alloc_count = alloc_count +1;
		        if mod(alloc_count,5) = 0 then do;
			   call date_time_(clock(), ascii_date_time);
			   ascii_time = substr(ascii_date_time, 11,6);
			   call ioa_("*S^5a NEEDS ^2a PRMFL @ ^a",
			        ascii_snumb, file_id, ascii_time);
			   end; 
		        call timer_manager_$sleep(50, "11"b);
		        goto try_alloc_again;
		        end;
                     end;
          end;

	if fib.read & ^fib.write then
	     mode = "r";
	else mode = "rw";

	call ios_$attach (name, "file", fib.pathnm, mode, status); /* attach */
	if code ^= 0 then do;
	     err_msg = "from ios_$attach ^a";
	     goto error_rtrn;
	end;

	call ios_$setsize (name, 36, status);		/* set elsize to one word */
	if code ^= 0 then do;			/* fatal error */
	     err_msg = "from ios_$setsize ^a";
	     goto error_rtrn;
	end;

	if reattachsw then goto reattach_position;

	if fib.perm then do;			/* for permanent files only, determine actual file size */
	     call ios_$tell (name, "last", "first", fib.last, status); /* get last pointer for fib */
	     if code ^= 0 then do;			/* fatal error */
		err_msg = "from ios_$tell last first ^a";
		goto error_rtrn;
	     end;
	     fib.size = divide (fib.last+319, 320, 17, 0) * 320; /* round size up to multiple of 320 */
	end;
	if fib.size = 0 then
	     fib.size = 3840;			/* if file still has no size, give it one link */

	if ^fib.perm then do;			/* truncate all temporary files */
	     call ios_$seek (name, "last", "first", 0, status);
	     if code ^= 0 then do;			/* fatal error */
		err_msg = "from ios_$seek last first ^a";
		goto error_rtrn;
	     end;

	     fib.last = 0;
	end;

	if dbs_attach_file then
	     call ioa_ ("gcos_attach_file_ stream=^a, file=^a", fib.stream, fib.pathnm);
	goto done;
%page;
attach_tape: ;
	if
	fib.serial_no = (5)"20"b3			/* 5 BCD spaces. */
	| fib.serial_no = (5)"11"b3			/* 5 BCD 9's */
	then do;					/* => scratch tape. */
	     scratch = "1"b;
	     label = "scratch";
	end;
	else do;					/* => Specific reel designated. */
	     scratch = "0"b;
	     label = (5)"X";			/* Set initially to length 5. */
	     call gcos_cv_gebcd_ascii_ (		/* Convert BCD reel number to ascii. */
		addr (fib.serial_no)
		, 5
		, addrel (addr (label), 1)
		);
	end;
	if fib.tracks = "01"b then label = label||",7track"; /* 7 track tape requested */
	else
	if fib.tracks = "10"b then label = label||",9track"; /* 9 track tape requested */
						/* else use installation default */
	label = label || ",blk=" || ltrim (char (gcos_ext_stat_$tape_buffer_size));
	do j = 1 to hbound (dens, 1) ;
	     if fib.density = dens (j) then do ;
		label = label||",den=";
		label = label||dens_string (j);
		goto determine_mode ;
	     end ;
	end ;

determine_mode: ;

	if fib.write then
	     mode = "rw";				/* attach with ring */
	else mode = "r";				/* attach with no ring */

	call ios_$attach ((name), tape_module, (label), mode, status);
	if code ^= 0 then				/* attach error */
	     call gcos_error_ (code, "tape attach error: label = ^a", label);

	if scratch then do;
	     call ios_$order ((name), "rewind", null, status);
	     call ios_$write ((name), addr (tape_label), 0, 14, nwr, status);
	     call ios_$order ((name), "rewind", null, status);
	end;
	if dbs_attach_file then
	     call ioa_ ("gcos_attach_file_ stream=^a, tape=^a", name, label);

done:	;
	fib.attached = "1"b;			/* attachment is complete */
	return;
%page;
error_rtrn: ;

/* Come here on all errors from ios_ */

	if reattachsw then goto reattach_return;
	call gcos_error_ (code, err_msg, fib.pathnm);	/* pass error code on */
	return;
%page;
reattach:	entry (fp, a_code);

/* called by gcos_save_$restart */
	fibptr = fp;
	if fib.console | fib.null then
	     goto reattach_return;
	reattachsw = "1"b;
	name = fib.stream;
	goto attch;

reattach_position: ;
	if fib.last > 0 then do;			/* if file was non-null, see if it exists */
	     call ios_$tell (name, "last", "first", l, status);
	     if code = 0 then
		if l = 0 then			/* this means file is lost */
		     code = 1;			/* fake an error code */
	     if code ^= 0 then do;			/* real or fake error code */
		err_msg = "from ios_$tell last first ^a";
		goto reattach_return;
	     end;
	end;

	call ios_$seek (name, "read", "first", fib.current, status);
	if code ^= 0 then do;
	     err_msg = "from ios_$seek read first ^a";
	     goto reattach_return;
	end;

	if mode = "rw" then
	     call ios_$seek (name, "write", "first", fib.current, status);
	if code ^= 0 then
	     err_msg = "from ios_$seek write first ^a";

reattach_return: ;
	a_code = code;
	if code ^= 0 & ^gcos_ext_stat_$save_data.brief then
	     call com_err_ (code, "gcos_attach_file", err_msg, fib.pathnm);
	return;
%page;
/*   Variables for gcos_attach_file_:		 */
/*   IDENTIFIER		ATTRIBUTES	 */
dcl  acct                     char;
dcl  actid                    char(3) var;
dcl  addr                     builtin;
dcl  addrel                   builtin;
dcl  alloc_count              fixed bin(24)	/* count of allocation delays for a file */;
dcl  ascii_date_time          char(24);
dcl  ascii_time               char(6);
dcl  ascii_snumb              char(5);
dcl  busy_status              bit(1);
dcl  char			builtin;
dcl  clock                    builtin;
dcl  com_err_                 entry options (variable);
dcl  date_time_               entry (fixed bin(71), char(*));
dcl  dens                     (5) bit(4) int static options(constant) init("0001"b, "0010"b, "0100"b, "1001"b, "1100"b);
dcl  dens_string              (5) char(4) int static options(constant) init("200", "556", "800", "1600", "6250");
dcl  dir_name                 char(168);
dcl  divide                   builtin;
dcl  entryname                char(32);
dcl  error_table_$incorrect_access fixed bin(35)ext;
dcl  error_table_$namedup     fixed bin(35)ext;
dcl  error_table_$notalloc    fixed bin(35)ext;
dcl  error_table_$segknown    fixed bin(35) ext static;
dcl  err_msg                  char(100) varying;
dcl  expand_pathname_         entry (char(*), char(*), char(*), fixed bin(35));
dcl  file_id                  char(8)	/* temp */;
dcl  gcos_cv_gebcd_ascii_     ext entry (ptr, fixed bin(24), ptr);
dcl  gcos_error_              ext entry options (variable);
dcl  gcos_ids2_concur_$allocate  entry (char(*), char(*), bit(1), bit(1), bit(1), fixed bin (35));
dcl  gcos_ids2_concur_$create_control  entry (char(*), char(*), fixed bin(35));
dcl  gcos_ids2_concur_$have_xid  entry (char(*), char(*), fixed bin(35)) returns (bit(1));
dcl  gcos_verify_tss_access_  entry (char(*), char(*), bit(6), ptr, bit(1) unal, bit(72));
dcl  gcs_status_bits          bit(72) based (addr (gcs_status));
dcl  hbound                   builtin;
dcl  hcs_$append_branchx      entry (char(*), char(*), fixed bin(5), (3) fixed bin(3), char(*), fixed bin(1), fixed bin(1), fixed bin(24), fixed bin(35));
dcl  ioa_                     ext entry options (variable);
dcl  l                        fixed bin(21);
dcl  label                    char(40)varying aligned;
dcl  length                   builtin;
dcl  ltrim		builtin;
dcl  mod                      builtin;
dcl  mode                     char(2);
dcl  name                     char(8);
dcl  null                     builtin;
dcl  nwr                      fixed bin(21);
dcl  persid                   char;
dcl  projid                   char(9);
dcl  reattachsw               bit(1)	/* reattach entry switch */;
dcl  rtrim                    builtin;
dcl  scratch                  bit(1)	/* scratch tape flag */;
dcl  substr                   builtin;
dcl  tape_module              char(5) int static options(constant) init("nstd_");
dcl  timer_manager_$sleep     entry (fixed bin(71), bit(2));
dcl  translate                builtin;
dcl  user_info_               entry (char(*), char(*), char(*));
dcl (i,j)fixed bin(24);

dcl 1 tape_label	aligned int static options(constant),
    2 identifier	(2)bit(36) init("272520200600"b3, "002022634320"b3), /* "GE  600 BTL " */
    2 installation	bit(36) init("272562202020"b3),	/* "ges   " */
    2 rsn		bit(36) init((6)"20"b3),			/* "      " */
    2 fsn		bit(36) init((6)"20"b3),			/* "      " */
    2 rlsn	bit(36) init("202000000001"b3),
    2 crdate	bit(36) init("0"b),
    2 rdays	bit(36) init("0"b),
    2 filename	bit(72) init("0"b),
    2 data	(4)bit(36) init((4) (6)"20"b3);

dcl 1 gcs_status,
      2 status	bit(12) unal init("4000"b3),
      2 pad1	bit(60) unal;

/* variables for gtss concurrency control -- commented out
dcl  alloc_start_blocked      fixed bin(71)	/ * time of entering blocked state on file allocation * /;
dcl  fixed                    builtin;
dcl  flt_delay                float bin (27);
dcl  get_lock_id_             entry (bit(36) aligned);
dcl  gtss_mcfc_$open          entry (char(*), char(*), bit(6), bit(36) aligned, bit(36) aligned, ptr, fixed bin(35));
dcl  index                    builtin;
dcl  lock_id                  bit(36) aligned;
dcl  random_$normal           entry (float bin (27));
dcl  random_$set_seed         entry (fixed bin(35));
*/
%page;
%include gcos_ext_stat_;
%page;
%include gcos_dbs_names;
%page;
%include gcos_dcl_ios_;
     end gcos_attach_file_;
