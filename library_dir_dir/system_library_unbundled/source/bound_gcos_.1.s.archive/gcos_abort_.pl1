/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* *  THIS PROCEDURE IS CALLED WITH A TWO CHARACTER ABORT CODE (RATHER THAN A
   *  MULTICS ERROR TABLE CODE). IT WILL PRINT THE ABORT CODE AND THE NAME OF
   *  THE CALLING PROCEDURE. IF ANY ADDITIONAL ARGUMENTS ARE PRESENT, IT WILL
   *  REFORMAT THE ARG LIST TO DELETE THE FIRST ARGUMENT, AND THEN CALL ioa_
   *  TO PRINT THE ADDITIONAL ARGUMENTS. THEN IT WILL CALL gcos_error_ WITH
   *  AN ERROR TABLE CODE OF 9999. gcos_error_ WILL ABORT THE JOB.
   *
   *  WRITTEN BY DICK SNYDER IN 1971
   *  MODIFIED BY T. CASEY NOVEMBER 1973
   *
   */
gcos_abort_: proc (code);
dcl  code char (*);
dcl (i, ii) fixed bin(18);
dcl (j, offset) fixed bin(24);
dcl  name char (j) aligned based (z);
dcl 1 frame based (p),
    2 ab (4) fixed bin(24),
    2 lp pointer,
    2 sp pointer,
    2 regs (8) fixed bin(24),
    2 backp pointer,
    2 nxt pointer,
    2 ret pointer;

dcl 1 arg_list aligned based (p),
    2 arg_count fixed bin(17) unaligned,
    2 display bit (18) unaligned,
    2 descriptor_count fixed bin(17) unaligned,
    2 fill bit (18) unaligned,
    2 arg_pointers (1) fixed bin(71) aligned;						/* if we declare these pointers as pointers,
						   pointer registers will be used to move them,
						   and faults will occur if any are invalid pointers */

dcl  p pointer;
dcl  cu_$stack_frame_ptr ext entry (pointer);
dcl  cu_$arg_list_ptr entry (pointer);
dcl  cu_$gen_call ext entry (entry, pointer);
dcl  ioa_ ext entry options (variable);
dcl  pl1_frame_$name ext entry (ptr, ptr, fixed bin(24));
dcl  gcos_error_ ext entry (fixed bin(24));
dcl  z pointer;

dcl (divide, fixed, rel, substr, unspec) builtin;




	call cu_$stack_frame_ptr (p);
	p = backp;				/* get caller's frame */
	unspec (offset) = (18)"0"b||substr (rel (ret), 1, 18);
	call pl1_frame_$name (p, z, j);		/* get caller name */
out:	call ioa_ ("Abort ^a from ^a at ^o", code, name, offset);
	call cu_$arg_list_ptr (p);			/* get ptr to my arg list */
	ii, i = arg_count;				/* get no of args */
	if i = 2 then go to skip;			/* only one arg */
	ii, i = i-2;				/* decrement arg count */
	arg_count = i;				/* put new count in arg list */
	i = descriptor_count;			/* get no. of descriptors */
	if i ^= 0 then do;				/* adjust descriptors and count if necessary */
	     descriptor_count = i-2;
	     do j = divide (ii+4, 2, 18, 0) to ii;	/* shift descriptors left one to */
						/* wipe out descriptor for arg 1 (abort cause) */
		arg_pointers (j) = arg_pointers (j+1);
	     end;

	end;
	else ii = divide (ii, 2, 18, 0);		/* no descriptors so adjust move variable */
	do j = 1 to ii;
	     arg_pointers (j) = arg_pointers (j+1);	/* move arg pointers */
	end;
	call cu_$gen_call (ioa_, p);			/* let ioa_ print out any other info */
skip:	call gcos_error_ (9999);
	return;					/* just in case */
     end;
