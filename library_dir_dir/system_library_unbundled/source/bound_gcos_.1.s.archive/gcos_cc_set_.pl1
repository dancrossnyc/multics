/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

/*   ***************************************************************************
   ***************************************************************************
   *                                                                         *
   *                                                                         *
   *                Process $ SET Control Card                               *
   *                                                                         *
   *                                                                         *
   * The $ SET control card is used to set or reset bits in the Program      *
   * Switch Word.                                                            *
   *                                                                         *
   *                                                                         *
   *    Written by R. H. Morrison February 22, 1974                          *
   *    Modified by R.H. Morrison April 4,1974                               *
   *    Modified by M. R. Jordan, August 1977
   *                                                                         *
   *                                                                         *
   ***************************************************************************
   ************************************************************************ */




gcos_cc_set_: proc (card);

dcl  END_OF_CARD fixed bin(24)static internal options (constant) init (2);
dcl  card char (80);
dcl  code fixed bin(35);
dcl  cv_dec_check_ entry (char (*), fixed bin(35)) returns (fixed bin(35));
dcl  field char (3);						/* returned field has 1,2, or 3 characters */
dcl  gcos_error_ ext entry options (variable);
dcl  gcos_et_$cc_bad_field fixed bin(35) ext;
dcl  gcos_et_$cc_missing_field fixed bin(35) ext;
dcl  gcos_get_cc_field_ ext entry (char (80), char (*), fixed bin(24));
dcl  gcos_write_to_er_ entry options (variable);
dcl  nfield fixed bin(24);						/*  converted value of field  */
dcl  result fixed bin(24);						/* returned result code; 0,1,or 2  */
dcl  sr_flag fixed bin(24);						/* set psw bit = 0, reset psw bit = 1 */
dcl  substr builtin;
dcl  swit bit (36);						/*  image of Program Switch Word  */

	swit = save_data.psw;			/*  load image of ProgramSwitch Word  */
	result = 0;


	do while (result ^= END_OF_CARD);


	     call gcos_get_cc_field_ (card, field, result); /* get next field on $ SET card  */


	     if result = 0 then do;			/*  check if first field character is "/" */

		if substr (field, 1, 1) = "/" then do;	/* field specifies reset the bit */
		     sr_flag = 1;			/* set the flag */
		     field = substr (field, 2);	/* get rid of the "/" */
		end;
		else sr_flag = 0;

		nfield = cv_dec_check_ (field, code);
		if code ^= 0 then call gcos_error_ (gcos_et_$cc_bad_field,
		     "Illegal switch word bit specification.  ""^a""^/^a^2x^a",
		     field, gcos_ext_stat_$card_num, card);

		if nfield > 35 | nfield < 0 then call gcos_error_ (gcos_et_$cc_bad_field,
		     "Switch word bit specification must be 0 through 35.  ""^a""^/^a^2x^a", field,
		     gcos_ext_stat_$card_num, card);

		if nfield = 5 then call gcos_write_to_er_ (
		     "Warning:  Switch word bit 5 should mot be modified using $ SET.^/^a^2x^a",
		     gcos_ext_stat_$card_num, card);

		if sr_flag = 0 then substr (swit, nfield+1, 1) = "1"b; /* set the bit */
		else substr (swit, nfield+1, 1) = "0"b; /* else reset the bit */

	     end;


	end;


	save_data.psw = swit;			/* update psw */


	return;

%include gcos_ext_stat_;



     end gcos_cc_set_;
