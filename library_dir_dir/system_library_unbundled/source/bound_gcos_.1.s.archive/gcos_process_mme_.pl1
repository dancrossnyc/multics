/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gcos_process_mme_: proc (mcp, fault_name, dummy1, dummy2, continue);

/*

   This  procedure  is called by sct_manager_ when a MME1 condition is
   raised in the current ring.  This procedure will make sure the MME1
   is in the GCOS slave segment and then process it.

   The   faulting   instruction  (MME1)  is  located  in  the  machine
   conditions,  and  is  examined  for  request  type (as given in the
   computed  address by a number from 1 to 44).  The type is looked up
   in  a table and the appropriate MME handler is called with a ptr to
   the  machine  conditions.   When  the  MME  handler  returns,  this
   procedure will modify the machine conditions to force a transfer to
   the  proper  location,  skipping  over  any  parameter  words  that
   followed  the  MME,  and  then it will return, causing the modified
   machine  conditions  to  be restored and the execution of the slave
   program to be resumed.

*/
%page;
/*

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-* HISTORY *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

   Author: DICK SNYDER	OCT 1,1970
   Change: T. CASEY		FEB 1974,
			AUG 1974
   Change: D. KAYDEN	MAR 1975
   Change: T. CASEY		AUG 1975
   Change: M. R. Jordan	JAN 1977,
			JUL 1977
   Change: A. N. Kepner	MAR 1978	To allow courtesy call I/O  within
				cc routines
   Change: Dave Ward	06/09/81	Reorganized. Debug entries updated.
   Change: Dave Ward	09/09/81	Replaced use of ALM vector
				(gcos_call_mme_processor_) with
				"goto mp."
   Change: Scott C. Akers	11/28/81	Obtain MME number from even instruction
				in all cases.
   Change: Ron Barstad        83-08-04  Added MMEs 41-44 for 4js3

*/
%page;
/*
   This procedure is called as a static handler for the condition MME1
   in  the  current  ring.   After  making sure the MME is in the GCOS
   segment  and  initializing  some  data items we can get down to the
   business at hand - processing the MME.
*/

	debugsw = dbs_stop_mme | dbs_trace_mme | watchsw ;
	scup = addr (mc.scu);
	if substr (baseno (gcos_ext_stat_$gcos_slave_area_seg), 4, 15) ^= scu.ppr.psr then do;
	     if gcos_ext_stat_$sig_ptr ^= null () then
		call cu_$ptr_call (gcos_ext_stat_$sig_ptr, mcp, fault_name, dummy1, dummy2, continue);
	     return;
	end;
	else continue = "0"b;

	unspec (gcos_ext_stat_$mc) = unspec (mc);
%page;
	mme_number = even_instruction.MME_NO;
%page;
/*
   Check  to see if the MME number is within acceptable range.  If not
   abort the user.
*/

	if mme_number < lbound (MME_NAME, 1) | mme_number > hbound (MME_NAME, 1) then
	     call gcos_mme_bort_$system (
	     gcos_et_$bad_mme_addr
	     , "^i is not a valid MME number (^i to ^i)."
	     , mme_number
	     , lbound (MME_NAME, 1)
	     , hbound (MME_NAME, 1)
	     );

/*
   If  we  are within a courtesy call, verify that this MME is a valid
   one for courtesy calls.  If not, report the system detected error.
*/

	if gcos_ext_stat_$save_data.cc then
	     if ^mme_table (mme_number) then
		call gcos_mme_bort_$system (
		gcos_et_$bad_mme_in_cc
		, "MME GE^a is not allowed within a courtesy call."
		, MME_NAME (mme_number)
		);

/*
   Now  that  we  are  fairly certain that this is a valid MME (in the
   right range, anyway), we will initialize the increment and call the
   MME  processor  routine.   If  the  debug  switch  is  on,  tracing
   information will be displayed.

   If  this  is  not a supported MME, the entry gcos_mme_bort_$not_imp
   will be called to report the error to the user.
*/
	increment = 0;
	if debugsw then call debug_1 ();

/*
   Now  call  the appropriate MME processor via the transfer vector in
   gcos_call_mme_processor_.
*/
	goto mp (mme_number);

mp(11):; /** MME GEFILS 11 **/
mp(16):; /** MME GESPEC 16 **/
mp(25):; /** MME GEROLL 25 **/
mp(29):; /** MME GEIDSE 29 **/
mp(30):; /** MME .EMM   30 **/
mp(35):; /** MME GENEWS 35 **/
mp(36):; /** MME GESNUM 36 **/
mp(38):; /** MME GESECR 38 **/
mp(39):; /** MME GEXLIT 39 **/
mp(40):; /** MME xxxxxx 40 **/
mp(41):; /** MME xxxxxx 41 **/
mp(42):; /** MME xxxxxx 42 **/
mp(43):; /** MME GMODES 43 **/
mp(44):; /** MME GMODER 44 **/
	call gcos_mme_bort_$not_imp (mcp, increment, mme_number);
	goto return_from_mp;

mp( 1):; /** MME GEINOS  1 **/
	call gcos_mme_inos_$gcos_mme_inos_ (mcp, increment);
	goto return_from_mp;

mp( 2):; /** MME GEROAD  2 **/
	goto return_from_mp;

mp( 3):; /** MME GEFADD  3 **/
	call gcos_mme_fadd_$gcos_mme_fadd_ (mcp, increment);
	goto return_from_mp;

mp( 4):; /** MME GERELS  4 **/
	call gcos_mme_rels_$gcos_mme_rels_ (mcp, increment);
	goto return_from_mp;

mp( 5):; /** MME GESNAP  5 **/
	call gcos_mme_snap_$gcos_mme_snap_ (mcp, increment);
	goto return_from_mp;

mp( 6):; /** MME GELAPS  6 **/
	call gcos_mme_laps_$gcos_mme_laps_ (mcp, increment);
	goto return_from_mp;

mp( 7):; /** MME GEFINI  7 **/
	call gcos_mme_fini_$gcos_mme_fini_ (mcp, increment);
	goto return_from_mp;

mp( 8):; /** MME GEBORT  8 **/
	call gcos_mme_bort_$gcos_mme_bort_ (mcp, increment);
	goto return_from_mp;

mp( 9):; /** MME GEMORE  9 **/
	call gcos_mme_more_$gcos_mme_more_ (mcp, increment);
	goto return_from_mp;

mp(10):; /** MME GEFCON 10 **/
	call gcos_mme_fcon_$gcos_mme_fcon_ (mcp, increment);
	goto return_from_mp;

mp(12):; /** MME GESETS 12 **/
	call gcos_mme_sets_$gcos_mme_sets_ (mcp, increment);
	goto return_from_mp;

mp(13):; /** MME GERETS 13 **/
	call gcos_mme_rets_$gcos_mme_rets_ (mcp, increment);
	goto return_from_mp;

mp(14):; /** MME GEENDC 14 **/
	call gcos_mme_inos_$mme_endc (mcp, increment);
	goto return_from_mp;

mp(15):; /** MME GERELC 15 **/
	goto return_from_mp;

mp(17):; /** MME GETIME 17 **/
	call gcos_mme_time_$gcos_mme_time_ (mcp, increment);
	goto return_from_mp;

mp(18):; /** MME GECALL 18 **/
	call gcos_mme_call_$gcos_mme_call_ (mcp, increment);
	goto return_from_mp;

mp(19):; /** MME GESAVE 19 **/
	call gcos_mme_save_$gcos_mme_save_ (mcp, increment);
	goto return_from_mp;

mp(20):; /** MME GERSTR 20 **/
	call gcos_mme_call_$mme_rstr (mcp, increment);
	goto return_from_mp;

mp(21):; /** MME GEMREL 21 **/
	call gcos_mme_mrel_$gcos_mme_mrel_ (mcp, increment);
	goto return_from_mp;

mp(22):; /** MME GESYOT 22 **/
	call gcos_mme_syot_$gcos_mme_syot_ (mcp, increment);
	goto return_from_mp;

mp(23):; /** MME GECHEK 23 **/
	call gcos_mme_chek_$gcos_mme_chek_ (mcp, increment);
	goto return_from_mp;

mp(24):; /** MME GEROUT 24 **/
	call gcos_mme_rout_$gcos_mme_rout_ (mcp, increment);
	goto return_from_mp;

mp(26):; /** MME GEUSER 26 **/
	call gcos_mme_user_$gcos_mme_user_ (mcp, increment);
	goto return_from_mp;

mp(27):; /** MME GELOOP 27 **/
	call gcos_mme_loop_$gcos_mme_loop_ (mcp, increment);
	goto return_from_mp;

mp(28):; /** MME GEWAKE 28 **/
	call gcos_mme_wake_$gcos_mme_wake_ (mcp, increment);
	goto return_from_mp;

mp(31):; /** MME GELBAR 31 **/
	call gcos_mme_lbar_$gcos_mme_lbar_ (mcp, increment);
	goto return_from_mp;

mp(32):; /** MME GEFRCE 32 **/
	call gcos_mme_frce_$gcos_mme_frce_ (mcp, increment);
	goto return_from_mp;

mp(33):; /** MME GEFSYE 33 **/
	call gcos_mme_fsye_$gcos_mme_fsye_ (mcp, increment);
	goto return_from_mp;

mp(34):; /** MME GEPRIO 34 **/
	call gcos_mme_prio_$gcos_mme_prio_ (mcp, increment);
	goto return_from_mp;

mp(37):; /** MME GEINFO 37 **/
	call gcos_mme_info_$gcos_mme_info_ (mcp, increment);

return_from_mp: ;
	if debugsw then call debug_2 ();

/*
   Now modify the machine conditions to skip the MME and any arguments
   to  it.   This  is  accomplished  by modifying the IC (scu.ilc) and
   forcing the processor to refetch the instruction pair.
*/
	instruction_counter = instruction_counter + increment +1;
	scu.rfi = "1"b;				/* Refetch faulted instruction. */
	scu.if = "1"b;				/* Turn on indicator that instruction faulted. */

	return;
%page;
mme_trace: entry (arg_string);

/* Set MME trace list, and/or display it. */
dcl  arg_string               char(*)parm;
	mlp = addr (mme_trace_list);			/* Select trace list as the MME list. */
	trace_or_stop = "1"b;			/* Trace entry. */
	goto continue_db;

mme_stop:	entry (arg_string);

/* Set MME stop list, and/or display it. */
	mlp = addr (mme_stop_list);			/* Select stop list as the MME list. */
	trace_or_stop = "0"b;			/* Stop entry. */

continue_db: ;

	on_or_off = "1"b;				/* On by default. */
	do i = 1 by 1;
	     if next_arg (i, ap, al) then do;		/* No more arg_string "arguments". */
		if i = 1 then			/* There were no arguments => set all values on. */
		     mme_list = "1"b;
		dbs_trace_mme = (string (mme_trace_list) ^= "0"b);
		dbs_stop_mme = (string (mme_stop_list) ^= "0"b);
		return;
	     end;

/* Examine the next argument. */
	     if arg = "-all" then do;			/* Set the whole list to current on or off value. */
		mme_list = on_or_off;
		goto get_arg;
	     end;
	     if arg = "-on" then do;			/* Set on or off value to on. */
		on_or_off = "1"b;
		goto get_arg;
	     end;
	     if arg = "-off" then do;			/* Set on of off value to off. */
		on_or_off = "0"b;
		goto get_arg;
	     end;
	     if (arg = "-pr") | (arg = "-print") then do; /* Display the list. */
		if string (mme_list) = "0"b then	/* Whole list is off. */
		     call ioa_ ("MME ^[trace^;stop^] is off for all MME's.", trace_or_stop);
		else
		if (^string (mme_list)) = "0"b then	/* Whole list is on. */
		     call ioa_ ("MME ^[trace^;stop^] is on for all MME's.", trace_or_stop);
		else do;				/* Display specific entries that are on. */
		     call ioa_ ("MME ^[trace^;stop^] is on for:", trace_or_stop);
		     do j = 1 to hbound (mme_list, 1);
			if mme_list (j) then
			     call ioa_ ("(^2i) ^a", j, MME_NAME (j));
		     end;
		end;
		goto get_arg;
	     end;
	     if verify (arg, "0123456789") = 0 then do;	/* => MME number. */
		j = fixed (arg, 17);		/* Obtain MME number as binary. */
		if j < lbound (mme_list, 1) then do;
		     call com_err_ (		/* Debug trace MME number out of range. */
			0
			, "gcos_process_mme_"
			, "^/Arg ^i, ^i, MME number out of range ^i to ^i."
			, i
			, j
			, lbound (mme_list, 1)
			, hbound (mme_list, 1)
			);
		     goto get_arg;
		end;
		goto found_mme_name;
	     end;

/* => arg is a MME name (lookup in name table). */
	     arg_uc = translate (			/* Convert lower to upper case. */
		arg
		, "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
		, "abcdefghijklmnopqrstuvwxyz"
		);
	     do j = lbound (MME_NAME, 1) to hbound (MME_NAME, 1);
		if arg_uc = MME_NAME (j) then goto found_mme_name;
	     end;
	     call com_err_ (			/* Debug trace MME number out of range. */
		0
		, "gcos_process_mme_"
		, "^/Arg ^i, ""^a"", unknown MME name (^a^( ^a^))."
		, i
		, arg
		, MME_NAME (*)
		);
	     goto get_arg;

found_mme_name: ;
	     mme_list (j) = on_or_off;

get_arg:	     ;
	end;
%page;
watcher:	entry (address);

dcl  address                  char(*)parm;

	if address = "" then do;
	     watchsw = "0"b;
	     call ioa_ ("watcher off");
	     go to debug_return;
	end;

	watch_address = cv_oct_check_ (address, code);
	if code ^= 0 then do;
	     call ioa_ ("bad address");
	     go to debug_return;
	end;

	watchp = null ();
	watchsw = "1"b;
	watch_contents = 0;

	call ioa_ ("watcher on");


debug_return:


	return;
%page;
%include gcos_next_arg;
%page;
debug_1:	procedure ();


	     mme_statistics.count (mme_number) = mme_statistics.count (mme_number) + 1; /* bump usage count */

	     if dbs_stop_mme then
		if mme_stop_list (mme_number) then
		     goto print_mme;		/* print its name and location,
						   whether or not trace is on for it */
	     if dbs_trace_mme then
		if mme_trace_list (mme_number) then
print_mme:	     call ioa_ ("MME ^2d GE^a at ^6o", mme_number, MME_NAME (mme_number), fixed (scu.ilc, 18));

	     if watchsw then do;
		if watchp = null then watchp = addrel (gcos_ext_stat_$gcos_slave_area_seg, watch_address);
		if watchee ^= watch_contents then do;

		     watch_contents = watchee;
		     call ioa_ ("loc ^o changed to ^w before MME ^a. last MME was ^a",
			watch_address, watch_contents, (mme_number), (gcos_ext_stat_$last_mme));
		end;
	     end;

	     stopped = "0"b;
	     if dbs_stop_mme then
		if mme_stop_list (mme_number) then do;
		     call ioa_ ("CALLING DB");
		     stopped = "1"b;
		     call db;
		end;

	     initial_cpu_time = virtual_cpu_time_ ();


	end debug_1;
%page;
debug_2:	procedure ();


	     mme_statistics.total_time (mme_number) = mme_statistics.total_time (mme_number) +
		virtual_cpu_time_ ()- initial_cpu_time; /* count total time used by a MME */

	     if watchsw then
		if watchee ^= watch_contents then do;
		     watch_contents = watchee;
		     call ioa_ (
			"loc ^6.3b changed to ^w after MME ^a"
			, unspec (watch_address)
			, watch_contents
			, MME_NAME (mme_number)
			);
		end;

	     if stopped then do;
		call ioa_ (
		     "returned from MME ^a processor. CALLING DB"
		     , MME_NAME (mme_number)
		     );
		call db;
	     end;

	     gcos_ext_stat_$last_mme = mme_number;


	end debug_2;
%page;
/*   Variables for gcos_process_mme_:		 */
/*   IDENTIFIER		ATTRIBUTES	 */
dcl  addr                     builtin;
dcl  addrel                   builtin;
dcl  al                       fixed bin(24);
dcl  ap                       ptr;
dcl  arg                      char(al)unal based(ap);
dcl  arg_uc                   char(100)var;
dcl  baseno                   builtin;
dcl  code                     fixed bin(35);
dcl  com_err_                 entry() options(variable);
dcl  continue                 bit(1) aligned;
dcl  cu_$ptr_call             entry options (variable);
dcl  cv_dec_check_            entry (char(*), fixed bin(35)) returns (fixed bin(35));
dcl  cv_oct_check_            entry (char(*), fixed bin(35)) returns (fixed bin(35));
dcl  db                       entry;
dcl  debugsw                  bit(1);
dcl  dummy1                   ptr;
dcl  dummy2                   ptr;
dcl  fault_name               char(*);
dcl  fixed                    builtin;
dcl  gcos_et_$bad_mme_addr    fixed bin(35) ext;
dcl  gcos_et_$bad_mme_in_cc   fixed bin(35) ext;
dcl  gcos_mme_bort_$gcos_mme_bort_ entry (ptr, fixed bin(24));
dcl  gcos_mme_bort_$not_imp   entry (ptr, fixed bin(24), fixed bin(17));
dcl  gcos_mme_bort_$system    entry options (variable);
dcl  gcos_mme_call_$gcos_mme_call_ entry (ptr, fixed bin(24));
dcl  gcos_mme_call_$mme_rstr  entry (ptr, fixed bin(24));
dcl  gcos_mme_chek_$gcos_mme_chek_ entry (ptr, fixed bin(24));
dcl  gcos_mme_fadd_$gcos_mme_fadd_ entry (ptr, fixed bin(24));
dcl  gcos_mme_fcon_$gcos_mme_fcon_ entry (ptr, fixed bin(24));
dcl  gcos_mme_fini_$gcos_mme_fini_ entry (ptr, fixed bin(24));
dcl  gcos_mme_frce_$gcos_mme_frce_ entry (ptr, fixed bin(24));
dcl  gcos_mme_fsye_$gcos_mme_fsye_ entry (ptr, fixed bin(24));
dcl  gcos_mme_info_$gcos_mme_info_ entry (ptr, fixed bin(24));
dcl  gcos_mme_inos_$gcos_mme_inos_ entry (ptr, fixed bin(24));
dcl  gcos_mme_inos_$mme_endc  entry (ptr, fixed bin(24));
dcl  gcos_mme_laps_$gcos_mme_laps_ entry (ptr, fixed bin(24));
dcl  gcos_mme_lbar_$gcos_mme_lbar_ entry (ptr, fixed bin(24));
dcl  gcos_mme_loop_$gcos_mme_loop_ entry (ptr, fixed bin(24));
dcl  gcos_mme_more_$gcos_mme_more_ entry (ptr, fixed bin(24));
dcl  gcos_mme_mrel_$gcos_mme_mrel_ entry (ptr, fixed bin(24));
dcl  gcos_mme_prio_$gcos_mme_prio_ entry (ptr, fixed bin(24));
dcl  gcos_mme_rels_$gcos_mme_rels_ entry (ptr, fixed bin(24));
dcl  gcos_mme_rets_$gcos_mme_rets_ entry (ptr, fixed bin(24));
dcl  gcos_mme_rout_$gcos_mme_rout_ entry (ptr, fixed bin(24));
dcl  gcos_mme_save_$gcos_mme_save_ entry (ptr, fixed bin(24));
dcl  gcos_mme_sets_$gcos_mme_sets_ entry (ptr, fixed bin(24));
dcl  gcos_mme_snap_$gcos_mme_snap_ entry (ptr, fixed bin(24));
dcl  gcos_mme_syot_$gcos_mme_syot_ entry (ptr, fixed bin(24));
dcl  gcos_mme_time_$gcos_mme_time_ entry (ptr, fixed bin(24));
dcl  gcos_mme_user_$gcos_mme_user_ entry (ptr, fixed bin(24));
dcl  gcos_mme_wake_$gcos_mme_wake_ entry (ptr, fixed bin(24));
dcl  hbound                   builtin;
dcl  i                        fixed bin(24);
dcl  ia                       fixed bin(24);
dcl  increment                fixed bin(24);
dcl  initial_cpu_time         fixed bin(71);
dcl  instruction_counter      fixed bin(18)unsigned unal based(addr(scu.ilc));
dcl  ioa_                     entry options (variable);
dcl  j                        fixed bin(24);
dcl  lbound                   builtin;
dcl  mlp                      ptr;
dcl  mme_list                 (44)bit(1)unal based(mlp);
dcl  mme_number               fixed bin(17)	/* holds mme type */;
dcl  mme_stop_list            (44) bit(1) unal int static init ((44) (1)"0"b);
dcl  mme_trace_list           (44) bit(1) unal int static init ((44) (1)"0"b);
dcl  null                     builtin;
dcl  on_or_off                bit(1);
dcl  on_sw                    bit(1) aligned static init ("0"b);
dcl  previous_instr_ptr	ptr;
dcl  previous_opcode	bit(9);
dcl  state                    char(3);
dcl  stopped                  bit(1) aligned;
dcl  substr                   builtin;
dcl  trace_or_stop            bit(1);
dcl  translate                builtin;
dcl  unspec                   builtin;
dcl  verify                   builtin;
dcl  virtual_cpu_time_        entry () returns (fixed bin(71));
dcl  watchee                  fixed bin(24)based (watchp);
dcl  watchp                   ptr static;
dcl  watchsw                  bit(1) static init ("0"b);
dcl  watch_address            fixed bin(24)static;
dcl  watch_contents           fixed bin(35) static;
dcl  XED			bit(9) internal static options (constant)
			init ("111001111"b);
dcl 1 even_instruction	aligned based(addr(scu.even_inst)) like machine_instruction;
dcl 1 odd_instruction	aligned based(addr(scu.odd_inst)) like machine_instruction;

dcl 1 machine_instruction	aligned based
,2 MME_NO		fixed bin(17)unal
,2 OPCODE		bit(10)unal
,2 II		bit(1)unal	/* Interrupt inhibit. */
,2 A		bit(1)unal	/* Indirect via pointer register flag. */
,2 TAG		bit(6)		/* Instruction address modification. */
;

dcl 1 mme_statistics based (addr (gcos_ext_stat_$statistics)), /* overlay */
    2 total_time (44) fixed bin(71),
    2 count (44) fixed bin(17);
%page;
%include gcos_mme_names;
%page;
%page;
%include gcos_dbs_names;
%include gcos_ext_stat_;

end gcos_process_mme_;
