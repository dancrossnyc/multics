/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gcos_cc_activity_cards_: proc (card, indx, gcos_record);

/*
   This procedure is called whenever an activity definition card (e.g.
   $ execute, $ fortran) is encountered. A structure is selected from
   an array of structures in gcos_control_tables_. The information in
   this structure is used to direct the setting of activity dependent
   variables such as psw bits, execute flag, time, line, and storage
   limits etc. Files needed for the activity are opened, as specified
   in the structure. Once the common processing is completed, specific
   routines are executed for each card type. Finally, the operands of
   the card are processed and a return is made to the caller.

   The format of an activity defining card is as follows.


   CONTROL CARD:	activity definition


   FORMAT:	$     activ     arg1,arg2,arg3,...argn


   FIELDS:

   arg1-argn: any of the parameters allowed for this type of activity card.
   Parameters are deck, ndeck, comdk, ncomdk, etc. See the GCOS III manual for
   description of parameters for each activity card type

   Author: DICK SNYDER AUGUST 24,1970
   Change: T.CASEY DECEMBER 1972, SEPTEMBER 1973, DECEMBER 1973, FEBRUARY 1974, AUGUST 1974
   Change: D. KAYDEN  MAY 1974
   Change: R.H. MORRISON  MAY 1975
   Change: M. R. Jordan, August 1977
   Change: Dave Ward	06/17/81 Reorganized.
   Change: Ron Barstad  82-11-16  Fixed format of actid for console msgs
   Change: Ron Barstad  83-08-02  Added activity_card_number initialization
                                  Added support for 4js3 new cards
*/
dcl  card                     char(80) parm	/* card image */;
dcl  gcos_record              char(*) parm	/* bcd card image, ovarlayed by char(*) variable */;
dcl  indx                     fixed bin(24)parm	/* offset in cardtable where card type was found */;

	unspec (zeros) = "0"b;			/* init zeros */
	gcos_ext_stat_$save_data.activ = "1"b;		/* indicate that activity is being defined */
	j, save_data.activity_no = save_data.activity_no + 1; /* Increment activity number. */

	pic = j;
	substr (save_data.actid, 7, 2) = pic;

	if ^gcos_ext_stat_$save_data.nosave then	/* if save then/restart  */
	     restart_control.na_hold = "0"b;		/* default activity restart option is "REST" */

	if save_data.activity_no >= save_data.last_execute_act_no then
	     substr (save_data.psw, 6, 1) = "0"b;

	gcos_ext_stat_$save_data.this_act_abort,
	     gcos_ext_stat_$save_data.dstar, gcos_ext_stat_$save_data.write_etc = "0"b; /* clear gcos_ext_stat_$save_data used for this card */

	gcos_ext_stat_$activity_card_num = gcos_ext_stat_$card_num;

/* 	Activity cards will now be processed using the activity descriptions */
/* 	found in segment gcos_control_tables_. See gcos_control_tables_.alm for description.	 */
	actptr = addr (gcos_control_tables_$activity_table); /* addr of base of table */
	actptr = addrel (actptr, (indx-gcos_control_tables_$exc_offset)*3); /* compute address of activity */
						/* description associated with this activity */

	gcos_ext_stat_$nongcos = "";
	gcos_ext_stat_$default_nondollar = substr (nondolr, 1, 2); /* get the default nondollar filecode */
	gcos_ext_stat_$nondollar = "";		/* blank out nondollar file code */
						/* it gets set to the default the first time nondollar cards
						   are found outside a $ DATA deck */


/* 	Compute address of variable information block		 */
	actptr = pointer (addr (gcos_control_tables_$), vib_offset);
	gcos_ext_stat_$activity_name = vib.activity;	/* save activity name */
	substr (save_data.psw, 1, 5) = substr (vib.psw, 1, 5); /* set psw bits 0-4 */
	substr (save_data.psw, 7, 12) = substr (vib.psw, 7, 12); /* set psw bits 6-17 */

/* 	Set time, storage, and sysout line limits		 */

/* ADD CODE TO SET time AND sysout LIMITS TO min(JOB LIMIT,vib.whatever) */
	gcos_ext_stat_$time_limit = vib.time;
	gcos_ext_stat_$storage_limit = vib.storage;
	gcos_ext_stat_$sysout_limit = vib.sysout;
	gcos_ext_stat_$sysout_lines = 0;

	op_ofs = vib.op_ofs;			/* Record options info. */
	op_len = vib.op_len;
	gcos_ext_stat_$ldrss = 0;			/* set loader shared storage to 0 */

/* 	Loop to open files required by this activity */
	actptr = addrel (actptr, 5);			/* bump ptr to variable info */

	do while (vib_file.filecode ^= zeros);		/* do until find 00 */

	     if substr (control, 5, 1) then		/* sysout file */
		call gcos_open_file_$sysout (vib_file.filecode, "0"b);
	     else do;
		if substr (control, 1, 1) then	/* flag says to use a lud */
		     lud = vib_file.filecode || "$";	/* create a lud from the filecode */
		else lud = "";

		call gcos_open_file_ (vib_file.filecode, lud, fibptr, present);

/* 	Set indicators in fib based on settings of control bits in vib */

		fib.read = "1"b;
		if substr (control, 2, 1) then fib.disp = "10"b;
		fib.write = substr (control, 3, 1);
		fib.type = substr (control, 4, 1);
		if ^present then fib.size = fixed (substr (control, 13, 6)) * 3840;

	     end;
	     actptr = addrel (actptr, 1);		/* Locate next file code */
	end;

	call gcos_open_file_$sysout ("p*", "0"b);	/* open p* */

	call gcos_open_file_ ("t*", "ty1", fibptr, present); /* open t* with unique lud */

	fib.console = "1"b;
	fib.disp = "10"b;

	go to wrapup (indx-gcos_control_tables_$exc_offset);

/*
   Finish up the processing of a $ EXECUTE card.
*/
wrapup (0):					/* EXECUTE */

	call gcos_open_file_ ("", "b*$", fibptr, present); /* open b* */
	if present then do;				/* but only if already there */
	     call gcos_open_file_ ("b*", "b*$", fibptr, present); /* call again with filecode */
	     fib.disp = "01"b;			/* set disp = "R" */
	end;
	else fib.used = "0"b;			/* otherwise forget it */

	do i = 1 to hbound (save_data.fibs, 1);
	     if fct.filecode (i) = "" then go to rs_hit;	/* locate available entry */
	end;
rs_hit:	fct.filecode (i) = "r*";			/* change its file code */
	fct.sysout (i) = "0"b;
	fibptr = gcos_ext_stat_$rs;
	fct.fibptr (i) = fibptr;
	fib.gein = "1"b;
	call gcos_write_$ptr (gcos_ext_stat_$rs, execute, "10000000"b); /* write $ execute */
	gcos_ext_stat_$nongcos = "r*";		/* indicate where nongcos dollar cards go */

	call gcos_open_file_ ("", "", fibptr, present);	/* set up a new r* file for next geload */
	gcos_ext_stat_$rs = fibptr;			/* save pointer to fib */

	fib.stream = "rstar";
	fib.disp = "10"b;

	go to evaluate;				/* go evaluate options */


/*
   Finish up the language control cards.
*/
wrapup (9):					/* FORTRAN */
wrapup (10):					/* PL1 */
wrapup (11):					/* COBOL */
wrapup (12):					/* GMAP */
wrapup (13):					/* 355MAP */
wrapup (14):					/* ALGOL */
wrapup (15):					/* FORTA */
wrapup (16):					/* FORTY */
wrapup (17):					/* JOVIAL */
wrapup (18):					/* ASM66 */
wrapup (19):					/* CBL74 */
wrapup (20):					/* CBL68 */
wrapup (21):					/* MALT */
wrapup (22):					/* ILANG */
wrapup (23):					/* IDS */
wrapup (24):					/* IDS2 */
wrapup (25):					/* 4TRAN */
wrapup (26):					/* G3EDIT */
wrapup (27):					/* FORT77 */
wrapup (28):					/* FORTX */
wrapup (29):					/* CIDS2 */
wrapup (30):					/* RPG2 */
	call gcos_write_$ptr (gcos_ext_stat_$rs, source, "10000000"b); /* write $ source */
	go to evaluate;				/* go evaluate options */


/*

   Finish up the processing of the $ PROGRAM card.
*/
wrapup (2):					/* PROGRAM */

	call gcos_get_cc_field_ (card, field, rtrn);	/* get name of prog to be loaded */
	if rtrn ^= 0 then call gcos_error_ (gcos_et_$cc_missing_field,
	     "Program name missing.^/^a^2x^a", gcos_ext_stat_$card_num, card);
						/* abort if no field */
	gcos_ext_stat_$activity_name = field;		/* put prog name in as activity to be run */
	go to evaluate;				/* go evaluate options */


/*
   Finish the processing of the $ FILEDIT card.
*/
wrapup (4):					/* FILEDIT */

/* write the filedit card on  F* and make provision for a following etc
   card to be written there, too */

	call gcos_write_$record ("f*", gcos_record, (8)"0"b);

	gcos_ext_stat_$save_data.write_etc = "1"b;	/* remember to write any etc card on F* */
	gcos_ext_stat_$etc_filecode = "f*";
	gcos_ext_stat_$save_data.dstar = "1"b;		/* lie, to prevent stranger option from
						   causing card to be written on d* also */
	goto evaluate;				/* all done */


/*
   Finish up then CONVER card (BMC).
*/
wrapup (3):					/* CONVER */

	gcos_ext_stat_$nongcos = "mc";

	go to evaluate;


/*
   Finish up the $ UTILITY card.
*/
wrapup (6):					/* UTILITY */
	gcos_ext_stat_$nongcos = "u*";
	go to evaluate;


/*
   Finish the processing of $ 355SIM or $ SYSEDIT cards.
*/
wrapup (1):					/* 355SIM */
wrapup (5):					/* SYSEDIT */
wrapup (7):					/* UTL2 */
wrapup (8):					/* CONVRT */



/* 	Come here to evaluate options on card				 */


/* 	Calculate address of and number of entries in option table from */
/* 	saved info.						 */

evaluate:	;
	j = divide (op_len, 3, 17);			/* Determine number of entries. */
	actptr = pointer (addr (gcos_control_tables_$), op_ofs); /* Location of options table. */

eval_loop: ;
	call gcos_get_cc_field_ (card, field, rtrn);	/* get field from card */
	if rtrn = END_OF_CARD then do;		/* quit if end of card */
	     gcos_ext_stat_$save_data.dstar, gcos_ext_stat_$save_data.write_etc = "0"b; /* turn off switches when finished with card */
	     return;
	end;

	if rtrn = NULL_FIELD then go to eval_loop;	/* continue if null field */

	do i = 1 to j;
	     if field = optab (i).option_type then do;
		if optab (i).idx = 1 then
		     save_data.psw = save_data.psw | optab (i).bits; /* Set bits ON. */
		else
		save_data.psw = save_data.psw & ^(optab (i).bits || (18)"0"b); /* Set bits OFF. */
		goto eval_loop;
	     end;
						/* if field matches type, go process */
	end;

/* Save/restart options  */

	if ^gcos_ext_stat_$save_data.nosave then do;
	     if field = "nrest" then restart_control.na_hold = "1"b; /* no activity restart */
	     else
	     if field = "njrest" then restart_control.nj_restart = "1"b; /* no job restart */
	     else
	     if field = "jrest" then restart_control.nj_restart = "0"b; /* restart job */
	     else
	     if field = "rest" then restart_control.na_hold = "0"b; /* restart activity */
	     else goto unknown_option;
	     goto eval_loop;
	end;

unknown_option: ;					/* unknown option causes card to be written on d* file */
	if ^gcos_ext_stat_$save_data.dstar then do;	/* if we did not already write it, do so */
	     gcos_ext_stat_$save_data.dstar = "1"b;	/* remember that we are going to write it */
	     gcos_ext_stat_$etc_filecode = "d*";	/*   and also tell get_cc_field to write any etc cards on d* */
	     gcos_ext_stat_$save_data.write_etc = "1"b;

/* truncate trailing words of blanks, as gcos does for the d* file */
	     i = 13;				/* 13th word of record (12th word of data) is cols 67-72 */
trunc_loop:    ;
	     if gcos_record_word (i) = six_bcd_blanks then do; /* if word is blank */
		i = i - 1;			/* truncate the word */
		goto trunc_loop;			/* and go look at the previous word */
	     end;

	     i = (i-1)*4;				/* compute length of char(*) overlay for what is left of the card
						   (the -1 gets rid of the rcw - it has wrong length now) */

/* gcos_write_ will create d* and set its disp to release for us */
	     call gcos_write_$bcd ("d*", substr (gcos_record, 5, i), "10000000"b);
	end;
	goto eval_loop;
%page;
/*   Variables for gcos_cc_activity_cards_:	 */
/*   IDENTIFIER		ATTRIBUTES	 */
dcl  actptr                   ptr;
dcl  addr                     builtin;
dcl  addrel                   builtin;
dcl  divide                   builtin;
dcl  END_OF_CARD              fixed bin(24)static internal options (constant) init (2);
dcl  execute                  char(80) int static options(constant) init ("$"||(6)" "||"execute");
dcl  field                    char(6)	/* return paramater from gcos_get_cc_field_ */;
dcl  fixed                    builtin;
dcl  gcos_error_              entry options (variable);
dcl  gcos_et_$cc_missing_field fixed bin(35) ext;
dcl  gcos_get_cc_field_       ext entry (char(80), char(*), fixed bin);
dcl  gcos_open_file_          ext entry (char(*), char(*), ptr, bit(1));
dcl  gcos_open_file_$sysout   ext entry (char(*), bit(1));
dcl  gcos_record_word         (13) bit(36) based (addr (gcos_record))	/* overlay for bcd card image */;
dcl  gcos_write_$bcd          ext entry (char(*), char(*), bit(8));
dcl  gcos_write_$ptr          ext entry (ptr, char(*), bit(8));
dcl  gcos_write_$record       ext entry (char(*), char(*), bit(8));
dcl  i                        fixed bin(24);
dcl  j                        fixed bin(24);
dcl  lud                      char(3)	/* holds a logical unit designator */;
dcl  NULL_FIELD               fixed bin(24)static internal options (constant) init (1);
dcl  op_len                   fixed bin(18)unsigned;
dcl  op_ofs                   fixed bin(18)unsigned;
dcl  pic                      pic "99";
dcl  pointer                  builtin;
dcl  present                  bit(1)	/* file present flag */;
dcl  rtrn                     fixed bin(17);
dcl  six_bcd_blanks           bit(36) int static init ((6)"20"b3   )	;
dcl  size                     builtin;
dcl  source                   char(80) int static options(constant) init ("$"||(6)" "||"source");
dcl  substr                   builtin;
dcl  unspec                   builtin;
dcl  zeros                    char(2)	/* holds 16 0 bits */;
%page;
%include gcos_restart_control_;
%page;
%include gcos_control_tables_;
%page;
%include gcos_ext_stat_;
%page;
%include gcos_contrl_tables_data;
     end gcos_cc_activity_cards_;
