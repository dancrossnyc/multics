/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gcos: gc: proc;

/*

   This procedure is invoked when a user types the "gcos" command.

   It  interprets  all  of the command arguments, setting switches
   and  storing  values  in  external  static  variables,  and  it
   verifies  the existence of the input segment(s).  It then calls
   gcos_gein_, which processes the gcos job deck and runs the job.

*/
%page;
/*

  Author: T. CASEY		MAR 1973
  Change: T. CASEY		OCT 1973
			FEB 1974
			APR 1974
			MAY 1974
			AUG 1974
  Change: D. KAYDEN		FEB 1975
  Change: M. R. JORDAN	JUN 1976	To process "-smc" control argument.
  Change: Mel Wilson	MAR 1979	For gtss interface and -ident option.
  Change: Mel Wilson	OCT 1979	For gtss ring_bracket compatibility.
  Change: Dave Ward		MAY 1981	DBS entry, source reorganized.
  Change: Scott Akers   	DEC 1981	Fix "-syot_dir" control_arg.
				Change "expand_path_" to "expand_pathname_."
		    2.5	FEB 1982	Add "-block" control_arg.
  Change: Ron Barstad   2.5   Sep 1982  Fix usage statement to be only 1 line
  Change: Ron Barstad   3.0   Feb 1983  Change version to "3.0" for 4JS3
  Change: Ron Barstad   3.1   83-02-15  Add init for $param vaules to ""
                                        Fix bug: was not processing past first
                                        -param value! missplaced label end_arg_loop
                                        Allow non-control args to start with "-" by adding -string arg
                                        Allow null "" param after -param.
  Change: Ron Barstad   3.2   83-04-28  Delete long gcos$dbs usage message
                                        Update spawn & task versions
                                        Make default buffer size 4096, remove workspace.acs check
                                        Declared some undeclared builtins
  Change: Ron Barstad  3.3  83-08-02    Added activity_card_num to ext static
  Change: Ron Barstad  3.4  83-08-10    Added 4js3 control cards

*/
%page;

	me = "gcos (4.0)";
	goto gcos_common;

spawn:	entry;
	temp_spawnflag = "1"b;
	me = "gcos$spawn (4.0)";
	goto gcos_common;

task:	entry;
	temp_taskflag = "1"b;
	me = "gcos$task (4.0)";
	goto gcos_common;

dbs:	entry;
	call cu_$arg_ptr (i, pp, lp, code);
	call gcos_dbs;
	goto exit_gcos;

gcos_common:

	on condition (cleanup) begin;
	     simulator_already_active = "0"b;
	end;

	if   simulator_already_active
	then do;
	     call com_err_ (
		0
		, me
		, "job already active, you must complete it (""start"")"
		||"^/or terminate it (""release"") before starting another one."
		);
	     goto fatal_error;
	     end;

	call initialize_routine;			/* Do all the init stuff. */

	call process_args;				/* Now, dink around with the args. */


/*	NOW ALL ARGUMENTS HAVE BEEN PROCESSED - SEE IF THERE WERE ANY PROBLEMS */

	if ^job_deck
	then do;					/* If job deck pathname not given, complain. */
	     call com_err_ (error_table_$noarg,
			me, "No job deck pathname given.");
	     goto fatal_error;
	     end;

	if expecting
	then do;					/* If we were waiting for something, complain. */
	     call com_err_ (error_table_$noarg,
			me, "^/Could not find expected argument after ""^a"" ",
			targ);
	     goto fatal_error;
	     end;

/* check for job deck segment pathname to be used as job id */

	if id_jd | gcos_ext_stat_$job_id = "" then do;	/* default, if not specified */
						/* get rid of ".gcos" appendage, if it's there */
	     i = index (jd_ename, ".gcos");		/* look for .gcos */
	     if i = 0 then				/* if not there */
		i = length (rtrim (jd_ename))+1;

	     if i > 19				/* If job ID longer than 18 characters, */
	     then do;				/* truncate it and warn user. */

		i = 19;				/* 19 since i-1 is used below */
		call com_err_ (0, me,
			     "Job ID too long. Using first 18 chracters"
			  || " (""^a"")", (substr (jd_ename, 1, 18)));

		end;

	     gcos_ext_stat_$job_id = substr (jd_ename, 1, i-1);

	end;					/* end of id_jd do group */

/*     SET SYSOUT OPTIONS  */

	if dpo_given then
	     gcos_ext_stat_$save_data.dprint = "1"b;	/* if dprint (or dpunch) options given */
	else gcos_ext_stat_$dpo = "-dl";		/* the default is delete */
	if dpno_given then
	     gcos_ext_stat_$save_data.dpunch = "1"b;	/* then dprint (or dpunch) is implied */
	else gcos_ext_stat_$dpno = "-dl";		/* the default is delete */

	if gcos_ext_stat_$save_data.dprint then gcos_ext_stat_$save_data.list = "1"b; /* if dprint (or dpunch) to be done */
	if gcos_ext_stat_$save_data.dpunch then gcos_ext_stat_$save_data.raw = "1"b; /* then conversion from bcd is implied */

/* see if defaults are to be used */

	if ^hold_given then do;			/* set defaults, if not told to skip it */
	     if ^gcos_ext_stat_$save_data.raw then	/* if nothing said about punch files */
		gcos_ext_stat_$save_data.raw, gcos_ext_stat_$save_data.dpunch = "1"b; /* the default is convert and punch */

	     if ^gcos_ext_stat_$save_data.list then	/* if nothing said about print files */
		gcos_ext_stat_$save_data.list, gcos_ext_stat_$save_data.dprint = "1"b; /* the default is convert and print */
	end;					/* end of set defaults do group */


	gcos_ext_stat_$dpno = gcos_ext_stat_$dpno || " -raw"; /* raw option always used, since any other
						   way would produce garbage on the cards */

/*    FUSSY WARNING MESSAGES */

	if gcos_ext_stat_$save_data.gcos then
	     if gcos_ext_stat_$save_data.no_canonicalize then do;
		warning_return = ignored_ncan;
		err_msg = "-no_canonicalize ignored - valid only for ascii job deck segment";
com_err_inconsistent:
		call com_err_ (0, me, "Warning:" || err_msg);

		goto warning_return;
	     end;

ignored_ncan:
	if gcos_ext_stat_$save_data.gcos then if gcos_ext_stat_$save_data.truncate then do;
		warning_return = ignored_truncate;
		err_msg = "-truncate ignored - valid only for ascii job deck segment";
		goto com_err_inconsistent;
	     end;

ignored_truncate:

/*	END OF ARGUMENT LIST PROCESSING */

/* for debugging arg list processing */

	if gcos_ext_stat_$stop_code = 1 then do;
	     call ioa_ ("Results of arg list processing:");
	     call ioa_ ("gcos_ext_stat_$save_data.flgs: ^12.3b", unspec (gcos_ext_stat_$save_data.flgs));
	     call ioa_ ("job id: ^a", gcos_ext_stat_$job_id);
	     call ioa_ ("temp_dir: ^a", gcos_ext_stat_$temp_dir);
	     call ioa_ ("input seg: ^a", gcos_ext_stat_$input_segment_path);
	     call ioa_ ("jd_ename: ^a", jd_ename);
	     call ioa_ ("dprint options: ^a", gcos_ext_stat_$dpo);
	     call ioa_ ("dpunch options: ^a", gcos_ext_stat_$dpno);
	     call ioa_ ("pdir: ^a", gcos_ext_stat_$pdir);
	     call ioa_ ("save_dir: ^a", gcos_ext_stat_$save_dir);
	     call ioa_ ("nargs: ^d", nargs);
	     call ioa_ ("DB:");
	     call db;
						/* to allow looking at others */
						/* .q to get out of db */
	     goto fatal_error;			/* to get any necessary cleaning up done */
	end;

	gcos_ext_stat_$abort_return = fatal_error;	/* set up abort nonlocal goto */

	gcos_ext_stat_$validation_level = get_ring_ ();	/* set up ring numbers for created branches */
	if gcos_ext_stat_$save_data.gtssflag & (gcos_ext_stat_$validation_level < 4) then do;
	     gcos_ext_stat_$dir_rings (1) = gcos_ext_stat_$validation_level;
	     gcos_ext_stat_$dir_rings (2), gcos_ext_stat_$dir_rings (3)
		, gcos_ext_stat_$seg_rings (*)
		= 4;
	end;
	else gcos_ext_stat_$dir_rings (*), gcos_ext_stat_$seg_rings (*) = gcos_ext_stat_$validation_level;

	call gcos_gein_ ;				/* go read job deck and run job */

fatal_error:					/* if an abort occurs, control returns here via a nonlocal
						   transfer to gcos_ext_stat_$abort_return, causing the stack
						   to be cleaned up, and cleanup handlers to be invoked */
	simulator_already_active = "0"b;		/* allow simulator to be invoked again */

exit_gcos:	;

	return;
%page;
gcos_dbs: proc;

/* Process argument(s) to switch debug switches.
*/
	do i = 1 by 1;
	     call cu_$arg_ptr (i, pp, lp, code);
	     if code ^= 0 then do;
		if i<2
		then call print_dbs_usage;
		goto fatal_error;
	     end;
	     if targ = "-print" | targ = "-pr" then do;
		do j = 1 to hbound (dbs_names, 1);
		     call ioa_ (
			"^3i. ^[ ON^;OFF^] ^a"
			, j
			, dbsv (j)
			, dbs_names (j)
			);
		end;
	     end;
	     else do;
		if lp<2 then targ_fc, tl = length (targ); /* Use whole targ. */
		else do;				/* Examine for leading "^" and comma. */
		     if substr (targ, 1, 1) = "^" then targ_fc = 2; /* Start with 2nd character of targ, exclude "^". */
		     else targ_fc = 1;		/* Start with 1st character of targ. */
		     tl = index (substr (targ, targ_fc), ",");
		     if tl = 0 then			/* No comma in argument string. */
			tl = length (targ) - targ_fc + 1; /* Use the whole available string. */
		     else				/* There is a comma. */
		     tl = tl - 1;			/* Use the available string up to the comma. */
		end;
		do j = 1 to hbound (dbs_names, 1);
		     if substr (targ, targ_fc, tl) = dbs_names (j) then do;
			dbsv (j) = (targ_fc = 1);

/* Locate the portion of "targ" after the first comma. */
			if (targ_fc+tl) > length (targ) then do; /* There is none. */
			     ta_fc = 1;		/* Let 1st character be at one, */
			     ta_ln = 0;		/* but the length is zero (to allow substring). */
			end;
			else do;			/* Ther is a comma. */
			     ta_fc = targ_fc+tl+1;	/* Location of 1st character after comma. */
			     ta_ln = length (targ) - ta_fc +1; /* Number of character. */
			end;
			if substr (targ, targ_fc, tl) = "filecode" then
			     call gcos_mme_inos_$inos_trace_filecode (substr (targ, ta_fc, ta_ln));
			else if substr (targ, targ_fc, tl) = "trace_mme" then
			     call gcos_process_mme_$mme_trace (substr (targ, ta_fc, ta_ln));
			else if substr (targ, targ_fc, tl) = "stop_mme" then
			     call gcos_process_mme_$mme_stop (substr (targ, ta_fc, ta_ln));
			goto dbs_next;
		     end;
		end;
		call com_err_ (			/* Report dbs arg error. */
		     0
		     , "gcos$dbs"
		     , "Arg ^i ""^a"" unknown. Need -print (-pr) or switch name."
		     , i
		     , substr (targ, targ_fc, tl)
		     );
dbs_next:		;
	     end;
	end;

	return;

end gcos_dbs;
%page;
print_dbs_usage: proc;				/* Prints gcos_dbs usage message. */
		     call gcos_print_call_ (
		     "Usage: gcos$dbs arg ..."
/* DON'T PRINT THIS:     , "args:"
		     , " -print, -pr|Print names of switches."
		     , " name or ^name|Switch name value from following:"
		     , "|attach_file"
		     , "|open_file"
		     , "|msf_test"
		     , "|dollar"
		     , "|nondollar"
		     , "|filecode{,-print,file-code[DEFAULT all codes]}"
		     , "|mme_inos_trace"
		     , "|mme_inos_stop"
		     , "|mme_call"
		     , "|trace_mme{,-print,-all[DEFAULT],-on[DEFAULT],-off,-clear,mme#|mme-name}"
		     , "|stop_mme{,-print,-all[DEFAULT],-on[DEFAULT],-off,-clear,mme#|mme-name}"
*/		     );

	return;

end print_dbs_usage;
%page;
initialize_routine: proc;				/* Perform initialization */

/*   INITIALIZE EXTERNAL STATICS USED IN ARGUMENT PROCESSING */

	simulator_already_active = "1"b;
	query_info.yes_or_no_sw = "1"b;
	expecting = "0"b;
	literal_string = "0"b;
	buffsize_next = "0"b;
	string (gcos_ext_stat_$dbs) = string (dbsv);
	save_data.activity_no = 0;
	gcos_ext_stat_$incode,
	     gcos_ext_stat_$gf = 0;
	gcos_ext_stat_$last_mme = 0;
	gcos_ext_stat_$ldrss = 0;
	gcos_ext_stat_$max_activities = 63;
	gcos_ext_stat_$save_data.param = "";
	gcos_ext_stat_$tape_buffer_size = 4096;
	save_data.sqindex = 1;
	unspec (gcos_ext_stat_$save_data.flgs) = (72)"0"b; /* zero out gcos_ext_stat_$save_data before argument processing */
	gcos_ext_stat_$job_id = "";			/* must be initialized to blanks so we can tell whether to
						   set it to default after all args processed */
	gcos_ext_stat_$er
	     , gcos_ext_stat_$gcos_slave_area_seg
	     , gcos_ext_stat_$patchfile_ptr
	     , gcos_ext_stat_$pch
	     , gcos_ext_stat_$prt
	     , gcos_ext_stat_$rs
	     , gcos_ext_stat_$saveseg_ptr
	     , gcos_ext_stat_$sig_ptr
	     , gcos_ext_stat_$temp_seg_ptr
	     = null ();
	gcos_ext_stat_$system_free_pointer = get_system_free_area_ ();
						/* get pointer to free area for allocating things in */


	gcos_ext_stat_$save_data.spawnflag = temp_spawnflag; /* set entry point gcos_ext_stat_$save_data */
	gcos_ext_stat_$save_data.gtssflag = temp_spawnflag;
	gcos_ext_stat_$save_data.taskflag = temp_taskflag;


/*	GET PROCESS, WORKING AND DEFAULT WORKING DIRECTORY PATHNAMES FOR USE IN FILE NAMES */

	gcos_ext_stat_$temp_dir,			/* temp_dir = pdir, by default */
	     gcos_ext_stat_$pdir = rtrim (get_pdir_ ());	/* put it in ext static varying string */

	save_data.syot_dir,				/* syot_dir and save_dir = wdir, by default */
	     gcos_ext_stat_$save_dir = rtrim (get_wdir_ ()); /* put in ext static varying string */

	save_data.pathname_prefix = rtrim (get_default_wdir_ ()) ; /* pathname_prefix = default_wdir_ by default */
	save_data.skip_umc = "1"b ;

	return;

end initialize_routine;
%page;
print_call: proc;

/* Display on caller's terminal the calling sequence.
*/
	     call gcos_print_call_ (
		"Usage: gcos JOB_DECK_PATH {-control_args}"
/*		, ""
		, "job_deck_path|Pathname of JCL file, can be a Multics segment or GCOS file"
		||" regulated by control argument and suffix."
		, ""
		, "control_args:"
		, " -gcos, -gc|Job deck segment is in gcos file format (not required if pathname ends in "".gcos"")."
		, " -ascii, -aci|Job deck segment is Multics ascii format (to override "".gcos"")."
		, " -nosave, -nosv|Do not save (make restartable) any activities (in a resumed job)."
		, " -hold, -hd|Do not perform default conversion and output of sysout files (needed only when some sysout files are to be left in gcos bcd format, since any"
		||" of -ls -dp -dpo (or -raw -dpn -dpno) override the defaults for print (punch) files.)."
		, " -list, -ls|Translate sysout print files to Multics ascii."
		, " -brief, -bf|Do not print any except fatal error messages on the terminal."
		, " -long, -lg|Duplicate certain lines from the execution report on the terminal."
		, " -debug, -db|Give user option of calling debug before aborting job."
		, " -no_bar,|Do not run slave program in BAR mode (used for debugging.)."
		, " -nobar, -nb"
		, " -no_canonicalize,|Do not canonicalize (ascii) job deck segment - it is already"
		||" in canonical form (no tabs, and all fields in right columns)."
		, " -nocan, -no"
		, " -job_id ID,|ID, used in output file names."
		, " -id ID"
		, "  ID from:"
		, "  <string>|Job id given as character string (max 18 char)."
		, "  -unique|Use shriekname (result of unique_chars_) as job id."
		, "  -jd_seg, -jd|Use entry name of job deck segment as job id."
		, ""
		, " -stop n|Debugging: print results, call db, then return, at stopping point n."
		, " -temp_dir TD,|TD ispathname of ""gcos pool"" directory, to be used for temporary files."
		, " -tp TD"
		, " -syot_dir, -sd|Pathname of ""gcos pool"" directory, to be used for sysout files."
		, " -smc|Pathname of directory to be used as the gcos SMC in processing prmfl cards."
		, " -raw|Convert sysout punch files from bcd."
		, " -dprint, -dp|Dprint -delete converted sysout print files (implies -list)."
		, " -dpunch, -dpn|Dpunch -delete -raw converted sysout punch files (implies -raw)."
		, " -dprint_options O,|O are options to use in dprint call (implies -dprint)."
		, " -dpo O"
		, " -dpunch_options O,|O are options to use in dpunch call (implies -dpunch)."
		, " -dpno O"
		, " -userlib|Allow use of libraries other than the installed ones. (see gcos_gein_)."
		, " -truncate,|Truncate without warning any ascii input lines longer than 80 characters."
		, " -tnc, -tc"
		, " -continue, -ctu|Continue executing job when nonfatal erros occur."
		, " -lower_case,|Translate BCD sysout and print files to lower case ASCII"
		||" (the default is uppercase ASCII, simulating the appearance of BCD printer output)."
		, " -lc"
		, " -gtss|Update gtss_user_state_ during execution."
		, " -ident|Use $ident fields for print & punch banners."
		, " -block N, -bk N|Specify tape buffer size. (Default = 4096)"
*/
		);
	     return;
end print_call;
%page;
process_args: proc;					/* Process the arguments. */
/*   PROCESS ARGUMENT LIST */

	call cu_$arg_count (nargs, code);		/* get number of arguments */
	if code ^= 0 then do;
	     call com_err_ (			/* arg count failed. */
		code
		, "gcos"
		);
	     return;
	end;
	if nargs = 0 then do;			/* if no args, complain */
usage:	     ;
	     call com_err_ (			/* Print the USAGE msgs. */
		error_table_$noarg
		, me
		);
	     call print_call;
/*	     call print_dbs_usage;     */
	     goto fatal_error;
	end;

	do i = 1 to nargs;				/* process all arguments in this loop */
	     call cu_$arg_ptr (i, pp, lp, code);	/* get pointer to, and length of, argument */
						/* targ is declared char(lp) based(pp) */
	     if code ^= 0 then do;			/* if something wrong with it */
		call com_err_ (code, me, targ);	/* complain, print the arg, if it's there */
		goto usage;			/* and then go print the usage message */
	     end;



/*     NOW, WHAT DO WE HAVE, AND WHAT DO WE NEED? */

	     /* special handling of -string arg: following arg is NOT a control arg */
	     if ^literal_string           /* can have "-string -string" */
		then if (targ = "-string" | targ = "-str") then do;
		     literal_string = "1"b;
		     goto end_arg_loop;
		end;
		
               /* determine type arg we have */
	     num_arg = cv_dec_check_ (targ, code);	/* in case it is numeric */
	     if lp = 0 then control = "0"b;
	     else if (substr (targ, 1, 1) = "-" & ^literal_string) 
		then do;
		     control = "1"b;
		     processing_params = "0"b;          /* no more params */
		end;
	          else control = "0"b;

	     /* process substitution parameters for gcos JCL */ 	
	     if processing_params then do;
		if i-param_base > hbound (save_data.param, 1) then do;
		     call com_err_ (error_table_$too_many_args, "gcos"
			     , "Maximum number of -parameter arguments is ^d."
			     , hbound (save_data.param, 1));
		     return;
		end;
		if literal_string then param_base = param_base +1;
		save_data.param (i-param_base) = targ;
		literal_string = "0"b;
		goto end_arg_loop;
	     end;
	     
/* it is a control arg or a value following one */
	     if expecting then do;			/* if we were expecting a value after a control arg */
						/* then see if this is it */
		if temp_dir_next then do;
		     if control then do;		/* if not a pathname, complain */

			err_msg = "(pathname, between -temp_dir and ^a)";
com_err_noarg:		call com_err_ (error_table_$noarg, me, err_msg, targ);
			if print_usage then goto usage; /* optionally, print the usage message */
			goto fatal_error;		/* otherwise, quit */
		     end;

/* get the directory pathname */
get_dir: ;					/* come here from syot_dir */

		     call expand_pathname_ ((substr (targ, 1, lp)), fullname, ename, code);

		     if code ^= 0 then goto ex_error;

		     call hcs_$status_minf ((fullname), (ename), chase, type, bit_count, code);
		     if code ^= 0 then goto in_error;

/* make sure it is a directory */
		     if type ^= 2 | bit_count ^= 0 then do;
			call com_err_ (0, me, "expected directory path is that of a ^a:^/^a>^a",
			     type_name (type), fullname, ename);
			goto fatal_error;
		     end;

/* put pathname back together and save it in external static */
		     itemp = index (fullname, " ");
		     if itemp = 0 then itemp = 169;

		     jtemp = index (ename, " ");
		     if jtemp = 0 then jtemp = 33;
		     fullname = substr (fullname, 1, itemp-1) || ">" || substr (ename, 1, jtemp-1);

		     itemp = itemp + jtemp - 1;	/* length of full pathname */

		     if temp_dir_next then
			gcos_ext_stat_$save_dir
			, gcos_ext_stat_$temp_dir = substr (fullname, 1, itemp);
		     else if syot_dir_next then
			save_data.syot_dir = substr (fullname, 1, itemp);
		     else save_data.pathname_prefix = substr (fullname, 1, itemp) ;


		     syot_dir_next, smc_next
			, expecting, temp_dir_next = "0"b; /* turn off , expecting switches */

		end;

		else if syot_dir_next then do;
		     if control then do;
			err_msg = "(pathname, between -syot_dir and ^a)";
			goto com_err_noarg;
		     end;
		     goto get_dir;			/* share code with temp_dir */
		end;

		else if smc_next then do ;

		     save_data.skip_umc = "0"b ;

		     if control then do ;		/* must be a string */
			err_msg = "(pathname, between -smc and ^a)" ;
			goto com_err_noarg ;
		     end ;
		     else goto get_dir ;
		end ;

		else if stop_code_next then do;

/* if stop code expected, save it */
		     if code ^= 0 then do;		/* if it was non numeric, complain */
			err_msg = "(numeric, between -stop and ^a)";
			goto com_err_noarg;
		     end;				/* end of non numeric stop code do group */

		     gcos_ext_stat_$stop_code = num_arg;
		     expecting, stop_code_next = "0"b;	/* turn off expecting switches */

		end;

		else if buffsize_next
		     then do;
			if ^valid_buffsize (targ)
			then goto fatal_error;	/* Bail out if buffer size not legal.
						   Error was reported by valid_buffsize. */
			buffsize_next = "0"b;
			expecting = "0"b;
			end;

		else if dpo_next then do;
		     gcos_ext_stat_$dpo = targ;	/* copy without checking validity */
		     expecting, dpo_next = "0"b;	/* turn off expecting switches */
		     dpo_given = "1"b;		/* remember that we read it */
		end;

		else if dpno_next then do;
		     gcos_ext_stat_$dpno = targ;	/* copy without checking validity */
		     expecting, dpno_next = "0"b;	/* turn off expecting switches */
		     dpno_given = "1"b;		/* remember that we read it */

		end;

		else if job_id_next then do;
		     if ^control then do;		/* must be a string */
						/* impose limit of 18 characters on
						   id (14 more chars max in entry names) */
			if lp > 18 then do;
			     lp = 18;		/* this cuts end off targ */

/* *****
   ***** TEMPORARY FIX TO PREVENT DAEMON JOBS FROM COMPLAINING VIA com_err_
   ***** REMOVE WHEN DAEMON IS FIXED TO SUPPLY 18 CHAR JOB ID. TAC, 6 JUNE 74
   *****
   */

			     if substr (targ, 7, 1) = "!" then
				goto ignored_string_end;
			     err_msg = targ;	/* this puts first 18 chars of targ in err_msg */
			     warning_return = ignored_string_end; /* come back here */
com_err_id_too_long:	     call com_err_ (0, me, "job id too long; using first 18 characters: ^a", err_msg);
			     goto warning_return;	/* continue processing */
			end;			/* end too long do group */

ignored_string_end:
			gcos_ext_stat_$job_id = targ;
		     end;				/* end of job id = string do group */

		     else if targ = "-unique" then do;	/* unique job id wanted */
			gcos_ext_stat_$job_id = unique_chars_ ("0"b);
		     end;				/* end of -unique do group */


		     else if targ = "-jd" | targ = "-jd_seg" then do; /* jd seg name wanted as job id */
			id_jd = "1"b;		/* might not have jd seg path yet. remember to use it later */
		     end;				/* end of -jd do group */

/* NOTE*	 WE CAN NEVER USE THE SNUMB AS THE JOB ID
   (UNLESS THE DAEMON GIVES IT TO US AS -id <string> )
   SINCE WE HAVE TO USE IT IN FILE PATHNAMES BEFORE WE
   START READING THE JOB DECK TO GET THE SNUMB CARD */

		     else do;			/* control arg after -id. complain */
			err_msg = "(job id, between -job_id and ^a)";
			goto com_err_noarg;
		     end;

		     expecting, job_id_next = "0"b;	/* turn off expecting switches */
		end;

		else do;				/* should never get here */
		     err_msg = "ERROR IN GCOS. Flags not reset properly.";
		     goto com_err_noarg;
		end;				/* end of ERROR IN GCOS do group */
	     end;


	     else if control then do;			/* if a control arg */
		if targ = "-gc" | targ = "-gcos" then gcos_ext_stat_$save_data.gcos = "1"b;

		else if targ = "-nosv" | targ = "-nosave" then gcos_ext_stat_$save_data.nosave = "1"b;


		else if targ = "-hd" | targ = "-hold" then hold_given = "1"b;

		else if targ = "-ls" | targ = "-list" then gcos_ext_stat_$save_data.list = "1"b;

		else if targ = "-bf" | targ = "-brief" then gcos_ext_stat_$save_data.brief = "1"b;

		else if targ = "-lg" | targ = "-long" then gcos_ext_stat_$save_data.long = "1"b;

		else if targ = "-db" | targ = "-debug" then gcos_ext_stat_$save_data.debug = "1"b;

		else if targ = "-nb" | targ = "-nobar" | targ = "-no_bar" then gcos_ext_stat_$save_data.no_bar = "1"b;

		else if targ = "-tnc" | targ = "-tc" | targ = "-truncate" then gcos_ext_stat_$save_data.truncate = "1"b;

		else if targ = "-ctu" | targ = "-continue" then gcos_ext_stat_$save_data.continue = "1"b;

		else if targ = "-userlib" then gcos_ext_stat_$save_data.userlib = "1"b;

		else if targ = "-no" | targ = "-no_canonicalize" | targ = "-nocan" then
		     gcos_ext_stat_$save_data.no_canonicalize = "1"b;

		else if targ = "-aci" | targ = "-ascii" then do;
		     ascii_given = "1"b;
		     gcos_ext_stat_$save_data.gcos = "0"b;
		end;

		else if targ = "-id" | targ = "-job_id" then expecting, job_id_next = "1"b;

		else if targ = "-stop" then expecting, stop_code_next = "1"b;

		else if targ = "-td" | targ = "-temp_dir" then expecting, temp_dir_next = "1"b;

		else if targ = "-sd" | targ = "-syot_dir" then expecting, syot_dir_next = "1"b;

		else if targ = "-raw" then gcos_ext_stat_$save_data.raw = "1"b;

		else if targ = "-dp" | targ = "-dprint" then gcos_ext_stat_$save_data.dprint = "1"b;

		else if targ = "-dpn" | targ = "-dpunch" then gcos_ext_stat_$save_data.dpunch = "1"b;

		else if targ = "-dpo" | targ = "-dprint_options" then expecting, dpo_next = "1"b;

		else if targ = "-dpno" | targ = "-dpunch_options" then expecting, dpno_next = "1"b;

		else if targ = "-lc" | targ = "-lower_case" then gcos_ext_stat_$save_data.lower_case = "1"b;

		else if targ = "-unique" then do;	/* unique not after job id - complain */
unexpected_id:					/* can come here from below, too */
		     err_msg = "immediately following -job_id";
		     call com_err_ (0, me, "-unique out of place - only allowed following -job_id");
		     goto fatal_error;
		end;

		else if targ = "-jd" | targ = "-jd_seg" then goto unexpected_id; /* -jd not after -id so complain */

		else if targ = "-smc" then expecting, smc_next = "1"b ;

		else if (targ = "-parameter" | targ = "-pm" | targ = "-param") then do;
		     processing_params = "1"b;
		     param_base = i;
		end;

		else if targ = "-gtss" then gcos_ext_stat_$save_data.gtssflag = "1"b;

		else if targ = "-ident" then gcos_ext_stat_$save_data.identflag = "1"b;

		else if targ = "-block" | targ = "-bk" then expecting, buffsize_next = "1"b;


		else do;				/* complain about unrecognized control argument */
		     call com_err_ (error_table_$badopt, me, targ);
		     goto fatal_error;
		end;
	     end;


/*	IT MUST BE A PATHNAME. DO WE WANT ONE? */

/* since we were not expecting anything special, it is either the job deck pathname, or an error */

	     else if ^job_deck then do;		/* if job deck pathname not read yet, this must be it */

		job_deck = "1"b;			/* remember that we read it */

		call expand_pathname_ ((substr (targ, 1, lp)), fullname, ename, code);
		if code ^= 0 then do;		/* if unable to expand... */
ex_error:		     call com_err_ (code, me, targ);	/* print error and */
		     goto fatal_error;		/* exit stage left */
		end;

		jd_ename = ename;			/* save entry name for possible use in job id */

/*	See if the segment is there	*/

		call hcs_$status_minf ((fullname), (ename), chase, type, bit_count, code);
		if code ^= 0 then do;		/* if any problem */
in_error:		     call com_err_ (code, me, "^a>^a", fullname, ename); /* print error msg and */
		     goto fatal_error;		/* exit stage rear */
		end;

		if bit_count = 0 then do;		/* put out error msg if zero length segment */
		     call com_err_ (0, me, "zero length job deck segment: ^a>^a", fullname, ename);
		     goto fatal_error;
		end;

/* if it looks OK, save its pathname for later use     */

		itemp = index (fullname, " ");	/* find first blank */
		if itemp = 0 then itemp = 169;	/* if none, 168 char dirname */
		gcos_ext_stat_$input_segment_path = substr (fullname, 1, itemp-1)||">";

		itemp = index (ename, " ");		/* find end */
		if itemp = 0 then itemp = 33;
		gcos_ext_stat_$input_segment_path = gcos_ext_stat_$input_segment_path||substr (ename, 1, itemp-1);

/* if segment has suffix ".gcos", then it is in gcos file format, as
   gotten from the gcos daemon, gcos utility, or IMCV tape */

		if ^ascii_given then		/* (unless told to ignore .gcos by -ascii) */
		     if lp > length (".gcos") then
			if substr (targ, lp-length (".gcos")+1, length (".gcos")) = ".gcos" then
			     gcos_ext_stat_$save_data.gcos = "1"b;
	     end;					/* end processing of job deck pathname */

	     else do;				/* complain about unrecognized NON-control argument */
		call com_err_ (0, me, "Unidentified non-control argument: ^a", targ);
		goto usage;			/* and go print usage message */
	     end;

	     literal_string = "0"b;                       /* just once */

end_arg_loop:	;
	end;


	return;

end process_args;
%page;
valid_buffsize: proc (charbuffsize) returns (bit(1));	/* Check buffer size for validity, report errors
						   if it's not kosher. Set gcos_ext_stat_$tape_buffer_size
						   if it's O.K. */

dcl  charbuffsize char (*) parm;
dcl  buffsize fixed bin (35);


	code = 0;

	buffsize = cv_dec_check_ (ltrim (rtrim (charbuffsize)), code);


	if   buffsize < 1
	   | buffsize > 4096
	   | code ^= 0
	then do;
	     code = error_table_$bad_conversion;
	     call com_err_ (code, me,
			"Could not use ""^a"" as buffer size."
			|| "^/Permissible values are 1 <= buffsize <= 4096^/^/",
			ltrim (rtrim (charbuffsize)));
	     goto exit_valid_buffsize;
	     end;

	gcos_ext_stat_$tape_buffer_size = buffsize;

exit_valid_buffsize: ;

	     return (code = 0);

end valid_buffsize;
%page;
/*   Variables for gcos:			 */
/*   IDENTIFIER		ATTRIBUTES	 */
dcl  addr                     builtin;
dcl  bit_count                fixed bin(24)		/* length of input segment in bits */;
dcl  buffsize_next		bit (1);
dcl  chase                    fixed bin(1) init (1);
dcl  cleanup                  condition;
dcl  code                     fixed bin(35)		/* return param. for passing error codes */;
dcl  com_err_                 entry options(variable);
dcl  cu_$arg_count            entry (fixed bin, fixed bin(35));
dcl  cu_$arg_ptr              entry (fixed bin, ptr, fixed bin(21), fixed bin(35));
dcl  cv_dec_check_            entry (char(*), fixed bin(35)) returns (fixed bin);
dcl  db                       entry options(variable);
dcl  dbsv                     (36)bit(1)static int init((36)(1)"0"b);
dcl  ename                    char (32) 		/* holds entry name of input seg */;
dcl  error_table_$badopt      fixed bin(35) ext static;
dcl  error_table_$bad_conversion fixed bin(35) ext static;
dcl  error_table_$big_ws_req	fixed bin(35) ext static;
dcl  error_table_$noarg       fixed bin(35) ext static;
dcl  error_table_$too_many_args fixed bin(35) ext static;
dcl  err_msg                  char(100) varying		/* varying error message, to save com_err_ calls */;
dcl  expand_pathname_	entry (char(*), char(*), char(*), fixed bin(35));
dcl  fullname                 char(168) 		/* holds pathname of input seg */;
dcl  gcos_gein_               entry;
dcl  gcos_mme_inos_$inos_trace_filecode entry(char(*));
dcl  gcos_process_mme_$mme_stop entry(char(*));
dcl  gcos_process_mme_$mme_trace entry(char(*));
dcl  gcos_print_call_         entry options(variable);
dcl  get_default_wdir_        entry returns (char(168) aligned);
dcl  get_pdir_                entry returns (char(168) aligned);
dcl  get_ring_                entry returns (fixed bin(3));
dcl  get_system_free_area_    entry returns (ptr);
dcl  get_wdir_                entry returns (char(168) aligned);
dcl  hbound                   builtin;
dcl  i                        fixed bin(17);
dcl  index                    builtin;
dcl  ioa_                     entry options(variable);
dcl  j                        fixed bin(24);
dcl  jd_ename                 char(32)			/* to hold job deck entry name for possible -id -jd */;
dcl  length                   builtin;
dcl  literal_string           bit(1);                        /* allow non control args to start with - */
dcl  ltrim                    builtin;
dcl  me                       char(16)			/* command name, for error messages */;
dcl  null                     builtin;
dcl  rtrim                    builtin;
dcl  send_message_            entry (char(*), char(*), char(*), fixed bin(35));
dcl  simulator_already_active bit (1) aligned int static init ("0"b);
dcl  size                     builtin;
dcl  string                   builtin;
dcl  substr                   builtin;
dcl  targ_fc                  fixed bin(24);
dcl  ta_fc                    fixed bin(24);
dcl  ta_ln                    fixed bin;
dcl  tl                       fixed bin(24);
dcl  type                     fixed bin(2)		/* entry type returned by status_minf calls */;
dcl  unique_chars_            entry (bit (*)) returns (char(15));
dcl  unspec                   builtin;
dcl  warning_return           label local		/* to continue after warning messages */;


dcl  type_name                (0:2) char(8) int static init (
     "link",
     "segment",
     "msf");

dcl 1 statbuff 		automatic aligned like status_branch.short;

dcl  lp                       fixed bin(21),		/* length of argument */
     pp ptr,					/* pointer to argument */
     targ char(lp) based (pp);			/* argument from command line */

dcl (print_usage,					/* switch on to print usage message */
     control,					/* switch on if arg begins with "-" */
     expecting,					/* switch on if specific argument expected next */
     stop_code_next,				/* switch on when stop code expected next */
     dpo_next,					/* switch on when dprint options expected next */
     dpno_next,					/* switch on when dpunch options expected next */
     job_id_next,					/* switch on when job id expected next */
     temp_dir_next,					/* switch on when temp dir expected next */
     syot_dir_next,					/* switch on when syot dir expected next */
     smc_next,					/* switch on when ssmc dir expected next */
     id_jd,					/* switch on when jd seg name wanted as job id */
     job_deck,					/* switch on when job deck path read */
     hold_given,					/* switch on if hold option read */
     processing_params,				/* switch on if -parameter control argument has been encountered */
     dpo_given,					/* switch on if dpo option read */
     dpno_given,					/* switch on if dpno option given */
     temp_spawnflag,				/* switch on if entry via gcos$spawn */
     temp_taskflag,					/* switch on if entry via gcos$task */
     ascii_given)					/* switch on if -ascii given */
     bit (1) init ("0"b);				/* switches initially off */

dcl (nargs,					/* number of arguments */
     num_arg,					/* place to put converted numeric argument */
     param_base,					/* argument number of the -parameter control argument */
     jtemp,
     itemp)					/* temporary */
     fixed bin(17)init (0);

dcl  hcs_$status_		entry (char(*), char(*), fixed bin(1), ptr, ptr, fixed bin(35));
dcl  hcs_$status_minf         entry (char(*) aligned, char(*) aligned, fixed bin(1),
     fixed bin(2), fixed bin(24), fixed bin(35));
%page;
%include gcos_ext_stat_;
%page;
%include query_info;
%page;
%include gcos_dbs_names;
%page;
%include status_structures;
     end gcos;
