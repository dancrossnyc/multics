/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* Program to search a Lister file and create a list of those records which
   match the search criteria.

   Written by Paul A. Green, July 29, 1973.
   Modified 740604 by PG to finish implementation.
   Modified 740605 by PG to get around pl1_operators_ bug in converting packed ptr to offset.
   Modified 740731 by PG to return number of records found.
   Modified 741110 by PG to add delete option.
   Modified 761105 by PG to rename from assist_search_ to lister_select_.
   Modified 770718 by PG to have a null select_ptr mean select everything, and to take advantage of n_records.
   Modified 770921 by PG to get program to agree with revised documentation.
   Modified 791128 by PG to add numeric selection (sugg 037)
   Modified 800813 by PB to handle :uid.
   Modified 800326 by PB to make less and greater completely case-sensitive.
   Modified 810805 by PB to compare numerically on ":uid less/greater NNN"
   Modified 811022 by PB to make 0-length fields match :null
   Modified 840523 by PB to add begins and ends operators.
*/

/* format: style3 */
lister_select_:
     procedure (bv_in_file_ptr, bv_select_ptr, bv_area_ptr, bv_selected_records_ptr) returns (fixed bin)
	     options (packed_decimal);

/* parameters */

dcl (
     bv_in_file_ptr ptr,
     bv_select_ptr ptr,
     bv_area_ptr ptr,
     bv_selected_records_ptr
     ptr
     ) parameter;

/* automatic */

declare (expr_succeeded_ptr, found_list_ptr, lp, p, selected_records_ptr)
         ptr,
        (n_records, i, j, k, select_depth)
         fixed bin;

/* based */

declare  expression_succeeded
        (select_depth) bit (1) aligned based (expr_succeeded_ptr),
         found_list (n_records) ptr unaligned based (found_list_ptr);

/* builtins */

declare (binary, bool, convert, hbound, index, lbound, length, null, ptr, translate)
         builtin;

/* conditions */

declare (cleanup, conversion)
         condition;

/* internal static initial */

declare (
         lower_case char (26) aligned initial ("abcdefghijklmnopqrstuvwxyz"),
         upper_case char (26) aligned initial ("ABCDEFGHIJKLMNOPQRSTUVWXYZ")
         ) internal static;

/* include files */

%include lister_structures;

/* program */

	in_file_ptr = bv_in_file_ptr;
	select_ptr = bv_select_ptr;
	area_ptr = bv_area_ptr;
	expr_succeeded_ptr = null;
	found_list_ptr = null;
	selected_records_ptr = null;
	n_records = input_file.n_records;

	on cleanup call cleanup_handler ("1"b);

	if select_ptr = null			/* flag to mean select all records */
	then do;
	     n = n_records;

	     if n = 0
	     then do;
		bv_selected_records_ptr = null;
		return (0);
	     end;

	     allocate list_node in (system_area) set (selected_records_ptr);

	     k = 0;
	     do recordp = input_file.record_head repeat input_record.next while (recordp ^= null);
		k = k + 1;
		selected_records_ptr -> list_node.list (k) = recordp;
	     end;

	     bv_selected_records_ptr = selected_records_ptr;
	     return (k);
	end;

	k = 0;
	allocate found_list in (system_area) set (found_list_ptr);

	ltp = select_expression.literal_table_ptr;
	select_depth = select_expression.size;
	allocate expression_succeeded in (system_area) set (expr_succeeded_ptr);

/* Main loop...inspect each record in the file.  Test it against the selection criteria.
   If the expression evaluates to "1"b, add it to the list of selected records. */

/* Note that the collating sequence explicitly includes null fields...they come before non-null fields. */

	on conversion
	     begin;
	     expression_succeeded (i) = "0"b;
	     go to op_end;
	end;

	do recordp = input_file.record_head repeat recordp -> input_record.next while (recordp ^= null);

	     do i = lbound (select_expression.element (*), 1) to select_expression.last_element;

		element.opcode = binary (select_expression.element (i).opcode, 9);
		element.not = select_expression.element (i).not;
		element.top = select_expression.element (i).top;
		element.field_index = select_expression.element (i).field_index;
		element.literal_index = select_expression.element (i).literal_index;

		expression_succeeded (i) = "0"b;

		go to op (element.opcode);		/* fan out to correct operator */
						/* Note that 8, 9, 13 & 14 are not possible. */

op (4):						/* CONTAINS */
op (15):						/* BEGINS */
op (16):						/* ENDS */

		if element.field_index >= 0		/* FINDEX [NOT] CONTAINS/BEGINS/ENDS LITERAL */
		then do;
		     p = input_record.field (element.field_index);
		     lp = ltp -> literal_table.literal (element.literal_index);

		     if p = null
		     then expression_succeeded (i) = element.not;
		     else expression_succeeded (i) = bool (element.not, compare (element.opcode, p, lp), "0110"b);
		     /* bool with "0110"b => (a & ^b) | (^a & b) */
		end;
		else if element.field_index = UID	/* UID [NOT] CONTAINS/BEGINS/ENDS LITERAL */
		then expression_succeeded (i) = ^element.not;
		else do j = 0 to hbound (input_record.field, 1) while (^expression_succeeded (i));
		     p = input_record.field (j);	/* ANYFIELD [NOT] CONTAINS/BEGINS/ENDS LITERAL */
		     lp = ltp -> literal_table.literal (element.literal_index);

		     if p = null
		     then expression_succeeded (i) = element.not;
		     else expression_succeeded (i) = bool (element.not, compare (element.opcode, p, lp), "0110"b);
		end;
		go to op_end;

op (1):						/* AND */
		expression_succeeded (i) = expression_succeeded (operand1) & expression_succeeded (operand2);
		go to op_end;

op (2):						/* OR */
		expression_succeeded (i) = expression_succeeded (operand1) | expression_succeeded (operand2);
		go to op_end;

op (3):						/* NOT */
		expression_succeeded (i) = ^expression_succeeded (operand1);
		go to op_end;

op (5):						/* EQUAL */
op (10):						/* NEQUAL */
		if element.literal_index = NULL_FIELD	/* ... EQUAL NULL */
		then if element.field_index >= 0	/* FINDEX [NOT] EQUAL NULL */
		     then expression_succeeded (i) =
			bool (element.not, compare (0, ptr (input_record.field (element.field_index), input_file.area), null), "0110"b);
		     else if element.field_index = UID	/* UID [NOT] EQUAL NULL */
		     then expression_succeeded (i) = element.not;
		     else				/* ANYFIELD [NOT] EQUAL NULL */
		     do j = 0 to hbound (input_record.field, 1) while (^expression_succeeded (i));
			expression_succeeded (i) = bool (element.not, compare (0, ptr (input_record.field (j), input_file.area), null), "0110"b);
		     end;
		else if element.literal_index = NUMERIC_FIELD
						/* ... [NOT] NEQUAL :NUMERIC */
		then if element.field_index >= 0	/* FINDEX [NOT] NEQUAL :NUMERIC */
		     then do;
			p = input_record.field (element.field_index);
			expression_succeeded (i) = bool (element.not, valid_number (p), "0110"b);
		     end;
		     else if element.field_index = UID	/* UID [NOT] NEQUAL :NUMERIC */
		     then expression_succeeded (i) = ^element.not;
		     else do j = 0 to hbound (input_record.field, 1) while (^expression_succeeded (i));
						/* :ANY [NOT] NEQUAL :NUMERIC */
			p = input_record.field (j);
			expression_succeeded (i) = bool (element.not, valid_number (p), "0110"b);
		     end;
		else if element.field_index >= 0	/* FINDEX [NOT] EQUAL LITERAL */
		| element.field_index = UID		/* UID [NOT] LITERAL */
		then do;
		     if element.field_index ^= UID
		     then p = input_record.field (element.field_index);
		     lp = ltp -> literal_table.literal (element.literal_index);

		     if p = null
		     then expression_succeeded (i) = element.not;
		     else expression_succeeded (i) = bool (element.not, compare (element.opcode, p, lp), "0110"b);
		end;
		else				/* ANYFIELD [NOT] EQUAL LITERAL */
		do j = 0 to hbound (input_record.field, 1) while (^expression_succeeded (i));
		     p = input_record.field (j);
		     lp = ltp -> literal_table.literal (element.literal_index);

		     if p = null
		     then expression_succeeded (i) = element.not;
		     else expression_succeeded (i) = bool (element.not, compare (element.opcode, p, lp), "0110"b);
		end;
		go to op_end;

op (6):						/* LESS */
op (11):						/* NLESS */
		if element.field_index >= 0		/* FINDEX [NOT] LESS LITERAL */
		| element.field_index = UID		/* UID [NOT] LESS LITERAL */
		then do;
		     if element.field_index ^= UID
		     then p = input_record.field (element.field_index);
		     lp = ltp -> literal_table.literal (element.literal_index);

		     if p = null
		     then expression_succeeded (i) = ^element.not;
		     else expression_succeeded (i) = bool (element.not, compare (element.opcode, p, lp), "0110"b);
		end;
		else				/* ANYFIELD [NOT] LESS LITERAL */
		do j = 0 to hbound (input_record.field, 1) while (^expression_succeeded (i));
		     p = input_record.field (j);
		     lp = ltp -> literal_table.literal (element.literal_index);

		     if p = null
		     then expression_succeeded (i) = ^element.not;
		     else expression_succeeded (i) = bool (element.not, compare (element.opcode, p, lp), "0110"b);
		end;
		go to op_end;

op (7):						/* GREATER */
op (12):						/* NGREATER */
		if element.field_index >= 0		/* FINDEX [NOT] GREATER LITERAL */
		| element.field_index = UID		/* UID [NOT] GREATER LITERAL */
		then do;
		     if element.field_index ^= UID
		     then p = input_record.field (element.field_index);
		     lp = ltp -> literal_table.literal (element.literal_index);

		     if p = null
		     then expression_succeeded (i) = element.not;
		     else expression_succeeded (i) = bool (element.not, compare (element.opcode, p, lp), "0110"b);
		end;
		else				/* ANYFIELD [NOT] GREATER LITERAL */
		do j = 0 to hbound (input_record.field, 1) while (^expression_succeeded (i));
		     p = input_record.field (j);
		     lp = ltp -> literal_table.literal (element.literal_index);

		     if p = null
		     then expression_succeeded (i) = element.not;
		     else expression_succeeded (i) = bool (element.not, compare (element.opcode, p, lp), "0110"b);
		end;
		go to op_end;

op_end:
	     end;					/* of expression evaluation loop */

	     if expression_succeeded (i - 1)		/* last expression */
	     then do;
		k = k + 1;
		found_list (k) = recordp;
	     end;
	end;					/* of record loop */

	if k ^= 0
	then do;
	     n = k;
	     allocate list_node in (system_area) set (selected_records_ptr);

	     do i = 1 to k;
		selected_records_ptr -> list_node.list (i) = found_list (i);
	     end;
	end;

	bv_selected_records_ptr = selected_records_ptr;
	call cleanup_handler ("0"b);
	return (k);

compare:
	procedure (bv_compare_type, bv_fp, bv_lp) returns (bit (1) aligned);

/* parameters */

declare (
         bv_compare_type fixed bin,
         bv_fp ptr,
         bv_lp ptr
         ) parameter;

/* automatic */

declare  field_value_len fixed bin (21),
         literal_value_len fixed bin (21),
         numeric_field_value float dec (29) unal;

/* based */

declare  field_value char (field_value_len) varying based (bv_fp),
         literal_value char (literal_value_len) varying based (bv_lp),
         1 numeric_literal aligned based (bv_lp),
         2 flag fixed bin (35),
         2 value float dec (29) unal;

/* program */

	     if bv_compare_type = 0
		then goto compare_type (0);
	     literal_value_len = length (literal_value);
	     if element.field_index = UID
	     then goto compare_uid (bv_compare_type);	/* Note that 1-4, 8, 9 are not possible */
	     field_value_len = length (field_value);
	     go to compare_type (bv_compare_type);	/* Note that 1-3, 8, 9 are not possible */

compare_type (0):					/* NULL */
	     if bv_fp = null
		then return ("1"b);			/* either a null field */
	     field_value_len = length (field_value);
	     if field_value_len = 0			/* or a zero length field */
		then return ("1"b);			/* should match :null */
	     else return ("0"b);
	     
compare_type (4):					/* CONTAINS */
	     return (index (translate (field_value, lower_case, upper_case), translate (literal_value, lower_case, upper_case))
		^= 0);

compare_type (15):					/* BEGINS */
	     if literal_value_len > field_value_len
		then return ("0"b);
	     else return 
		(substr 
		    (translate (field_value, lower_case, upper_case), 
		    1, 
		    literal_value_len) 
		= translate (literal_value, lower_case, upper_case));
	     
compare_type (16):					/* ENDS */
	     if literal_value_len > field_value_len
		then return ("0"b);
	     else return 
		(substr 
		    (translate (field_value, lower_case, upper_case), 
		    (field_value_len - literal_value_len) + 1, 
		    literal_value_len) 
		= translate (literal_value, lower_case, upper_case));

compare_type (6):					/* LESS */
	     return (field_value < literal_value);
	     
compare_type (5):					/* EQUAL */
	     return (field_value = literal_value);

compare_type (7):					/* GREATER */
	     return (field_value > literal_value);

(conversion):
compare_type (10):					/* NEQUAL */
	     numeric_field_value = convert (numeric_field_value, field_value);
	     return (numeric_field_value = numeric_literal.value);

(conversion):
compare_type (11):					/* NLESS */
	     numeric_field_value = convert (numeric_field_value, field_value);
	     return (numeric_field_value < numeric_literal.value);

(conversion):
compare_type (12):					/* NGREATER */
	     numeric_field_value = convert (numeric_field_value, field_value);
	     return (numeric_field_value > numeric_literal.value);

compare_uid (5):					/* EQUAL	     */
	     return (input_record.uid = binary (literal_value));
	     
compare_uid (6):					/* LESS	     */
	     return (input_record.uid < binary (literal_value));

compare_uid (7):					/* GREATER     */
	     return (input_record.uid > binary (literal_value));

compare_uid (10):					/* NEQUAL	     */
	     return (input_record.uid = numeric_literal.value);

compare_uid (11):					/* NLESS	     */
	     return (input_record.uid < numeric_literal.value);

compare_uid (12):					/* NGREATER    */
	     return (input_record.uid > numeric_literal.value);

	end compare;

valid_number:
	procedure (P_fp) returns (bit (1) aligned);

/* parameters */

declare  P_fp ptr;

/* automatic */

declare  field_value_len fixed bin (21),
         numeric_field_value float dec (29) unal;

/* based */

declare  field_value char (field_value_len) varying based (P_fp);

/* program */

	     if P_fp = null
	     then return ("0"b);

	     field_value_len = length (field_value);

	     on conversion go to fail;

	     numeric_field_value = convert (numeric_field_value, field_value);
	     return ("1"b);

fail:
	     return ("0"b);

	end valid_number;

cleanup_handler:
	procedure (bv_free_selected_records);

/* parameters */

declare  bv_free_selected_records
         bit (1) aligned parameter;

/* program */

	     if found_list_ptr ^= null
	     then do;
		free found_list in (system_area);
		found_list_ptr = null;
	     end;

	     if expr_succeeded_ptr ^= null
	     then do;
		free expression_succeeded in (system_area);
		expr_succeeded_ptr = null;
	     end;

	     if bv_free_selected_records & selected_records_ptr ^= null
	     then do;
		free selected_records_ptr -> list_node in (system_area);
		selected_records_ptr = null;
	     end;

	end cleanup_handler;

     end						/* lister_select_ */;
