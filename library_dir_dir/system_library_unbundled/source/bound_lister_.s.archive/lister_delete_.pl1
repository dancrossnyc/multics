/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* Program to delete a list of records from an ASSIST input_file.
   Written 750316 by PG
   Modified 750711 by PG to be able to delete first record in input_file.
   Modified 760916 by PG to be able to delete first record in file (previous fix assumed that freed
   storage was not immediately overwritten...an assumption that turned into a bug with the new area package).
   Modified 761111 by PG to rename from assist_delete_ to lister_delete_.
   Modified 770707 by PG to keep input_file.n_records accurate.
*/

/* format: style3 */
lister_delete_:
     procedure (bv_in_file_ptr, bv_selected_records_ptr) options (packed_decimal);

/* parameters */

dcl (
     bv_in_file_ptr ptr,
     bv_selected_records_ptr
     ptr
     ) parameter;

/* automatic */

dcl (fieldx, listx) fixed bin;
dcl (selected_records_ptr, parentp)
     ptr;

/* builtins */

dcl (dimension, hbound, lbound, length, null)
     builtin;

/* include files */

%include lister_structures;

/* program */

	in_file_ptr = bv_in_file_ptr;
	selected_records_ptr = bv_selected_records_ptr;

	if selected_records_ptr = null
	then return;				/* nothing to do */

	parentp = input_file.record_head;

	do listx = lbound (selected_records_ptr -> list, 1) to hbound (selected_records_ptr -> list, 1);
	     recordp = selected_records_ptr -> list (listx);

/* First find the record before the record to be deleted.  The list
   of records to be deleted is assumed to be in the same relative
   order as the file itself.

   Next, unthread the record to be deleted from the
   file's record list.  There are three cases:

   case 1: the record is the first record on the list.
   case 2: the record is neither the first nor the last on the list.
   case 3: the record is the last record on the list.
*/

	     if input_file.record_head ^= recordp	/* if not first record */
	     then do;
		do parentp = parentp repeat parentp -> input_record.next
			while (parentp -> input_record.next ^= recordp);
		end;

		parentp -> input_record.next = input_record.next;
						/* case 2 */
	     end;
	     else parentp, input_file.record_head = input_record.next;
						/* case 1 */

	     if input_file.record_tail = recordp
	     then input_file.record_tail = parentp;	/* case 3 */

/* Free all storage assigned to this record */

	     do fieldx = lbound (input_record.field, 1) to hbound (input_record.field, 1);
		atomp = input_record.field (fieldx);

		if atomp ^= null			/* Is there a data item there? */
		then do;
		     atom_length = length (atom);	/* set varying string max length */
		     free atom in (input_file.area);
		end;
	     end;

	     free input_record in (input_file.area);
	end;					/* do listx = */

	input_file.n_records = input_file.n_records - dimension (selected_records_ptr -> list_node.list, 1);

     end						/* lister_delete_ */;
