/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* LISTER_COMPILE_SORT_ - Program to convert a character string representation of
   a sort description into the compiled form.

   Written 770718 by PG
   Modified 770817 by PG to fix bug in scanning sort string
   Modified 790702 by PG to add numeric sorting.
*/

/* format: style3 */
lister_compile_sort_:
     procedure (bv_arg_string, bv_in_file_ptr, bv_area_ptr, bv_sort_list_ptr, bv_error_token, bv_code)
	     options (packed_decimal);

/* parameters */

declare (
         bv_arg_string char (*),
         bv_in_file_ptr ptr,
         bv_area_ptr ptr,
         bv_sort_list_ptr ptr,
         bv_error_token char (*),
         bv_code fixed bin (35)
         ) parameter;

/* automatic */

declare  code fixed bin (35),
         sortx fixed bin,
         strx fixed bin (21),
         token char (32) varying;

/* builtins */

declare (length, null, search, substr, verify)
         builtin;

/* conditions */

declare  cleanup condition;

/* external static */

declare (
         error_table_$badopt,
         lister_codes_$misplaced_control_arg,
         lister_codes_$null_sort_string,
         lister_codes_$undefined_fieldname
         ) fixed bin (35) external static;

/* include files */

%include lister_entries;
%include lister_structures;

/* program */

	in_file_ptr = bv_in_file_ptr;
	area_ptr = bv_area_ptr;
	sort_list_ptr = null;

	on cleanup
	     call cleanup_handler;

	n_items_to_sort = 0;			/* count number of fieldnames */
	strx = 1;

	call get_next_argument;
	if code ^= 0
	then do;
	     bv_code = lister_codes_$null_sort_string;
	     bv_error_token = "";
	     return;
	end;

	do while (code = 0);
	     if substr (token, 1, 1) ^= "-"
	     then n_items_to_sort = n_items_to_sort + 1;

	     call get_next_argument;
	end;
	strx = 1;

	allocate sort_list in (system_area);

	sortx = n_items_to_sort;			/* fill sort array backwards */

/* Rescan the string placing the information into the sort_list */

	call get_next_argument;

	if substr (token, 1, 1) = "-"
	then do;
	     call cleanup_handler;
	     bv_error_token = token;
	     bv_code = lister_codes_$misplaced_control_arg;
	     return;
	end;

	sort_list.key (sortx).field_index = lister_hash_fid_ (in_file_ptr, (token));

	if sort_list.key (sortx).field_index = -1
	then do;
	     call cleanup_handler;
	     bv_error_token = token;
	     bv_code = lister_codes_$undefined_fieldname;
	     return;
	end;

	sort_list.key (sortx).ascending = "1"b;
	sort_list.key (sortx).numeric = "0"b;

	call get_next_argument;

	do while (code = 0);
	     if token = "-asc" | token = "-ascending"
	     then sort_list (sortx).ascending = "1"b;
	     else if token = "-dsc" | token = "-descending"
	     then sort_list (sortx).ascending = "0"b;
	     else if token = "-num" | token = "-numeric"
	     then sort_list (sortx).numeric = "1"b;
	     else if token = "-alp" | token = "-alphabetic"
	     then sort_list (sortx).numeric = "0"b;
	     else if substr (token, 1, 1) = "-"
	     then do;
		bv_error_token = token;
		bv_code = error_table_$badopt;
		call cleanup_handler;
		return;
	     end;
	     else do;
		sortx = sortx - 1;
		sort_list.key (sortx).field_index = lister_hash_fid_ (in_file_ptr, (token));

		if sort_list.key (sortx).field_index = -1
		then do;
		     call cleanup_handler;
		     bv_error_token = token;
		     bv_code = lister_codes_$undefined_fieldname;
		     return;
		end;

		sort_list.key (sortx).ascending = "1"b;
						/* default */
		sort_list.key (sortx).numeric = "0"b;
						/* .. */
	     end;

	     call get_next_argument;
	end;

	bv_sort_list_ptr = sort_list_ptr;
	bv_code = 0;
	return;

cleanup_handler:
	procedure ();

	     if sort_list_ptr ^= null
	     then do;
		free sort_list in (system_area);
		sort_list_ptr = null;
	     end;
	     return;

	end cleanup_handler;

get_next_argument:
	procedure ();

/* automatic */

declare  scanx fixed bin (21);

/* internal static */

declare  TAB_SP char (2) init ("	 ") internal static;

/* program */

/* If all of input string has been scanned, return eof code */

	     if strx > length (bv_arg_string)
	     then do;
		code = 1;
		return;
	     end;

/* Strip leading blanks and tabs */

	     scanx = verify (substr (bv_arg_string, strx), TAB_SP) - 1;

	     if scanx = -1
	     then do;
		code = 1;
		return;
	     end;

	     strx = strx + scanx;

/* Gobble all chars until next tab or space */

	     scanx = search (substr (bv_arg_string, strx), TAB_SP) - 1;

	     if scanx = -1
	     then scanx = length (bv_arg_string) - strx + 1;

	     token = substr (bv_arg_string, strx, scanx);
	     strx = strx + scanx;
	     code = 0;
	     return;

	end get_next_argument;

     end						/* lister_compile_sort_ */;
