/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* LISTER_COPY_RECORDS_ - Program to copy records from one Lister file to another.
   Written 750316 by PG
   Modified 761115 by PG to rename from assist_copy_records_ to lister_copy_records_
*/

/* format: style3 */
lister_copy_records_:
     procedure (bv_in_file_ptr, bv_out_file_ptr, bv_list_ptr) options (packed_decimal);

/* parameters */

dcl (bv_in_file_ptr, bv_out_file_ptr, bv_list_ptr)
     ptr parameter;

/* automatic */

dcl  listp ptr,
     listx fixed bin;

/* builtins */

dcl (hbound, lbound, length, null)
     builtin;

/* include files */

%include lister_entries;
%include lister_structures;

/* program */

	in_file_ptr = bv_in_file_ptr;
	out_file_ptr = bv_out_file_ptr;
	listp = bv_list_ptr;

/* If no list is given, copy whole input file to output file.
   Otherwise, just copy records specified in list */

	if listp = null
	then do recordp = input_file.record_head repeat (input_record.next) while (recordp ^= null);
	     call copy_record;
	end;
	else do listx = lbound (listp -> list_node.list, 1) to hbound (listp -> list_node.list, 1);
	     recordp = listp -> list_node.list (listx);
	     call copy_record;
	end;

	return;

/* Internal procedure to copy the record pointed to by "recordp" from
   the input file to the output file. */

copy_record:
	procedure;

/* automatic */

dcl (to_recordp, to_atomp)
     ptr,
     fieldx fixed bin;

	     to_recordp = lister_create_record_ (out_file_ptr);

	     do fieldx = lbound (input_record.field, 1) to hbound (input_record.field, 1);
		atomp = input_record.field (fieldx);	/* pick up old field value */
		if atomp ^= null
		then do;
		     atom_length = length (atom);	/* get length of old field */
		     allocate atom in (output_file.area) set (to_atomp);
		     to_atomp -> atom = atom;		/* copy field */
		     to_recordp -> output_record.field (fieldx) = to_atomp;
		end;
	     end;

	end copy_record;

     end;
