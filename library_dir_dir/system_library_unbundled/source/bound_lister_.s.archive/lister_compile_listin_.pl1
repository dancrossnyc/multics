/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(90-08-15,Gray), approve(90-08-15,MCR8157), audit(90-10-12,Bubric),
     install(90-10-17,MR12.4-1046):
     Prevent infinite loop when no comment end. Wordpro 1154
                                                   END HISTORY COMMENTS */


/* LISTER_COMPILE_LISTIN_ - Program to convert a Lister listin segment into a compiled lister segment.
   Written 771011 by PG
   Modified 780407 by PG to fix bug 17 (wrong line number for duplicate fieldnames)
   Modified 780504 by PG to fix bug 22 (bug in removing doubled quotes)
   Modified 780909 by PG to keep going after errors in main loop (bug 018), and to fix bug
   23 (error msg says line 0 if listin seg begins with delimiter).
   Modified 800513 by PB to detect missing rdelim after "Records:"
   Modified 800825 by PB to handle addition of unique ids.
   Modified 800904 by PB to implement listin comment feature.
   Modified 801028 by PB to fix bug where infinite loop occurs in reporting error of file ending in 2 rdelims.
   Modified 801201 by PB to allow non-quoted string to begin with a quote character.
   Modified 801222 by PB to fix bug where no records causes program to loop.
   Modified 810213 by PB to fix bug where no colon following Records causes
			fatal process error or storage condition.
   Modified 810407 by PB to fix bug where no record_delimiter can cause fatal
                              process error or storage condition.
   Modified 810501 by PB to fix bug where / character gets lost when using 
			pl1-style comments.
   Modified 810710 by PB to fix another bug where no record_delimiter can cause 
			fatal process error or storage condition.
   Modified 811109 by PB to change the calling sequences of comment_scan and
                              comment_end_scan to make them more efficient.
   Modified 830907 by PB to initialize temp_field_ptr to null.
   Modified 830907 by PB to fix bug (phx12793) where a file that ends in a
			fdelim causes an endless loop.
*/

/* format: style3 */
lister_compile_listin_:
     procedure (bv_out_file_ptr, bv_input_ptr, bv_input_length, bv_area_ptr, bv_n_records, bv_error_token, bv_code)
	     options (packed_decimal);

/* parameters */

declare (
         bv_out_file_ptr ptr,
         bv_input_ptr ptr,				/* Input - ptr to listin segment. */
         bv_input_length fixed bin (21),		/* Input - length in chars of listin segment. */
         bv_area_ptr ptr,				/* Input - ptr to system free area */
         bv_n_records fixed bin,
         bv_error_token char (*),
         bv_code fixed bin (35)
         ) parameter;

/* automatic */

declare  cdelim char (1),
         ce_pos fixed bin,
         comment_start char (20) varying,
         commenting bit (1) aligned,
         comment_pos_adjust fixed bin(21),
         cs_len fixed bin,
         cs_start fixed bin,
         fatal_error bit (1) aligned,
         fdelim char (1),
         fdelim_or_rdelim char (2),
         field_index fixed bin,
         field_len fixed bin (21),
         field_ptr ptr,
         fieldname_start fixed bin (21),
         in_comment bit (1) aligned,
         input_length fixed bin (21),
         input_ptr ptr,
         keyx fixed bin,
         more_fields bit (1) aligned,
         n_fieldnames fixed bin,
         rdelim char (1),
         saved_source_index fixed bin (21),
         scan_index fixed bin (21),
         source_index fixed bin (21),
         temp_char char (1),
         temp_field_len fixed bin (21),
         temp_field_ptr ptr,
         temp_temp_field_len fixed bin (21),
         temp_temp_field_ptr ptr,
         token char (256) varying,
         token_start fixed bin (21);

/* based */

declare  field_value char (field_len) based (field_ptr),
         source_string char (input_length) based (input_ptr),
         source_string_array (input_length) char (1) based (input_ptr),
         static_buffer char (static_buffer_len) varying based (static_buffer_ptr),
         temp_field_value char (temp_field_len) based (temp_field_ptr),
         temp_temp_field_value
         char (temp_temp_field_len) based (temp_temp_field_ptr);

/* builtins */

declare (addr, addrel, binary, empty, hbound, index, lbound, length, ltrim, maxlength, min, null, offset, pointer, rtrim,
         search, substr, verify)
         builtin;

/* conditions */

declare  cleanup condition;

/* entries */

declare  hcs_$truncate_seg entry (ptr, fixed bin (18), fixed bin (35));

/* external static */

declare (
         error_table_$translation_failed,
         lister_codes_$bad_cdelim,
         lister_codes_$bad_fdelim,
         lister_codes_$bad_rdelim,
         lister_codes_$cdelim_eq_rdelim,
         lister_codes_$dup_fieldname,
         lister_codes_$fdelim_eq_cdelim,
         lister_codes_$fdelim_eq_rdelim,
         lister_codes_$fieldname_not_alpha_start,
         lister_codes_$fieldname_not_alphanumeric,
         lister_codes_$listin_dup_field,
         lister_codes_$listin_fn_missing_comma,
         lister_codes_$listin_invalid_char,
         lister_codes_$listin_misplaced_fieldname,
         lister_codes_$listin_missing_colon,
         lister_codes_$listin_missing_fdelim,
         lister_codes_$listin_missing_fieldnames,
         lister_codes_$listin_missing_rdelim,
         lister_codes_$listin_missing_semicolon,
         lister_codes_$listin_premature_eof,
         lister_codes_$listin_unknown_fieldname,
         lister_codes_$listin_unknown_keyword,
         lister_codes_$long_fdelim,
         lister_codes_$long_fieldname,
         lister_codes_$long_rdelim
         ) fixed bin (35) external static;

/* internal static */

declare (
         keywords (9) char (17) varying
         initial ("Fd", "Field_delimiter", "Rd", "Record_delimiter", "Fn", "Field_names", "Records", "Comment_delimiter", "Cd"),
         NL_HT_SP_VT_NP char (5) initial ("
	 "),
         permissible_delimiters
         char (12) initial ("=%*&!$|^?~#@"),
         QUOTE char (1) initial (""""),
         static_buffer_len fixed bin (21) initial (0),
         static_buffer_ptr ptr initial (null)
         ) internal static;

/* include files */

%include lister_entries;
%include lister_structures;

/* program */

          temp_field_ptr = null ();
	out_file_ptr = bv_out_file_ptr;
	input_ptr = bv_input_ptr;
	input_length = bv_input_length;
	area_ptr = bv_area_ptr;
	bv_n_records = 0;
	bv_code = 0;

	on cleanup
	     call clean_up;

	source_index = 1;
	fatal_error = "0"b;
	rdelim = "$";				/* defaults */
	fdelim = "=";				/* .. */
	field_table_ptr = null;			/* .. */
	commenting = "0"b;				/* .. */
	in_comment = "0"b;

/* Initialize output segment */

	call hcs_$truncate_seg (out_file_ptr, 0, bv_code);
	if bv_code ^= 0
	then do;
	     bv_error_token = "Unable to truncate output segment.";
	     go to cleanup_and_return;
	end;

	output_file.field_table_offset = null;
	output_file.record_head = null;
	output_file.record_tail = null;
	output_file.unused (1) = null;
	output_file.unused (2) = null;
	output_file.next_uid = 1;
	output_file.n_records = 0;
	output_file.area = empty ();
	output_file.version = lister_file_version_2;

op_end:
	call get_token;

	do keyx = lbound (keywords, 1) to hbound (keywords, 1) while (token ^= keywords (keyx));
	end;

	if keyx > hbound (keywords, 1)
	then do;
	     bv_code = lister_codes_$listin_unknown_keyword;
	     bv_error_token = token || cv_index_to_line (token_start);
	     go to cleanup_and_return;
	end;

	go to op (keyx);

op (1):						/* Fd */
op (2):						/* Field_delimiter */
	call get_token;

	if token ^= ":"
	then go to missing_colon;

	call get_token;

	if length (token) ^= 1
	then do;
	     bv_code = lister_codes_$long_fdelim;
	     bv_error_token = token || cv_index_to_line (token_start);
	     go to cleanup_and_return;
	end;

	if verify (token, permissible_delimiters) ^= 0
	then do;
	     bv_code = lister_codes_$bad_fdelim;
	     bv_error_token = token || cv_index_to_line (token_start);
	     go to cleanup_and_return;
	end;

	fdelim = token;

	call get_token;
	if token ^= ";"
	then go to missing_semicolon;

	go to op_end;

op (3):						/* Rd */
op (4):						/* Record_delimiter */
	call get_token;

	if token ^= ":"
	then go to missing_colon;

	call get_token;

	if length (token) ^= 1
	then do;
	     bv_code = lister_codes_$long_rdelim;
	     bv_error_token = token || cv_index_to_line (token_start);
	     go to cleanup_and_return;
	end;

	if verify (token, permissible_delimiters) ^= 0
	then do;
	     bv_code = lister_codes_$bad_rdelim;
	     bv_error_token = token || cv_index_to_line (token_start);
	     go to cleanup_and_return;
	end;

	rdelim = token;

	call get_token;
	if token ^= ";"
	then go to missing_semicolon;

	go to op_end;

op (8):						/* Comment_delimiter */
op (9):						/* Cd */
	call get_token;

	if token ^= ":"
	then goto missing_colon;

	call get_token;

	if token = "pl1"
	then cdelim = "/";
	else do;
	     if length (token) ^= 1 | verify (token, permissible_delimiters) ^= 0
	     then do;
		bv_code = lister_codes_$bad_cdelim;
		bv_error_token = token || cv_index_to_line (token_start);
		goto cleanup_and_return;
	     end;
	     cdelim = token;
	end;

	commenting = "1"b;

	call get_token;
	if token ^= ";"
	then goto missing_semicolon;

	goto op_end;

op (5):						/* Fn */
op (6):						/* Field_names */
	call get_token;

	if token ^= ":"
	then go to missing_colon;

	saved_source_index = source_index;		/* Save so we can process twice */
	n_fieldnames = 0;

	call get_token;

	do while (token ^= ";");
	     n_fieldnames = n_fieldnames + 1;

	     if length (token) > 32
	     then do;
		bv_code = lister_codes_$long_fieldname;
		bv_error_token = token || cv_index_to_line (token_start);
		go to cleanup_and_return;
	     end;

	     if verify (substr (token, 1, 1), "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ") > 0
	     then do;
		bv_code = lister_codes_$fieldname_not_alpha_start;
		bv_error_token = token || cv_index_to_line (token_start);
		go to cleanup_and_return;
	     end;

	     if verify (token, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789") > 0
	     then do;
		bv_code = lister_codes_$fieldname_not_alphanumeric;
		bv_error_token = token || cv_index_to_line (token_start);
		go to cleanup_and_return;
	     end;

	     call get_token;
	     if token ^= ";"
	     then if token ^= ","
		then do;
		     bv_code = lister_codes_$listin_fn_missing_comma;
		     bv_error_token = token || cv_index_to_line (token_start);
		     go to cleanup_and_return;
		end;
		else call get_token;
	end;

	source_index = saved_source_index;

/* Allocate fieldname table */

	n = n_fieldnames - 1;
	allocate field_table in (output_file.area) set (field_table_ptr);
	output_file.field_table_offset = field_table_ptr;
	field_table.hash_field_id_to_index (*) = null;
	field_table.index_to_field_id (*) = null;

	n = 0;
	call get_token;

	do while (token ^= ";");
	     fidp = lister_hash_fid_$enter (out_file_ptr, (token));
	     if fidp = null
	     then do;
		bv_code = lister_codes_$dup_fieldname;
		bv_error_token = token || cv_index_to_line (token_start);
		go to cleanup_and_return;
	     end;
	     else do;
		field_table.index_to_field_id (n) = offset (fidp, output_file.area);
		fidp -> field_identifier.field_index = n;
		n = n + 1;
	     end;

	     call get_token;			/* skip comma */

	     if token = ","
	     then call get_token;			/* get next fieldname */
	end;

	go to op_end;

op (7):						/* Records */
						/* Do some validity checks on data so far */
	if rdelim = fdelim
	then do;
	     bv_code = lister_codes_$fdelim_eq_rdelim;
	     bv_error_token = rdelim;
	     go to cleanup_and_return;
	end;

	if commenting
	then if cdelim = fdelim
	     then do;
		bv_code = lister_codes_$fdelim_eq_cdelim;
		bv_error_token = cdelim;
		go to cleanup_and_return;
	     end;

	if commenting
	then if rdelim = cdelim
	     then do;
		bv_code = lister_codes_$cdelim_eq_rdelim;
		bv_error_token = rdelim;
		go to cleanup_and_return;
	     end;

	if field_table_ptr = null
	then do;
	     bv_code = lister_codes_$listin_missing_fieldnames;
	     bv_error_token = "";
	     go to cleanup_and_return;
	end;

	fdelim_or_rdelim = fdelim || rdelim;
	field_table.record_delimiter = rdelim;
	field_table.field_delimiter = fdelim;

find_colon:
	scan_index = index (substr (source_string, source_index), ":");
	if scan_index = 0
	     then goto missing_colon;
	if verify (substr (source_string, source_index, scan_index - 1), NL_HT_SP_VT_NP) ^= 0
	then do;
	     if commenting
	     then do;
		call comment_scan (addr (source_string_array (source_index)), (scan_index - 1));
		if cs_start ^= 0			/* found comment */
		then if verify (substr (source_string, source_index, cs_start - 1), NL_HT_SP_VT_NP) ^= 0
		     then goto missing_colon;
		     else if in_comment		/* no end to comment */
		     then do;
			call comment_end_scan (addr (source_string_array (source_index + cs_start)), 
			     input_length - (source_index + cs_start - 1));
			if ce_pos = 0
			then do;
			     comment_start = cv_index_to_line (source_index + cs_start);
			     goto premature_eof;
			end;
			source_index = source_index + ce_pos + cs_start;
			goto find_colon;
		     end;
		     else do;
			source_index = source_index + cs_start + cs_len - 1;
			goto find_colon;
		     end;
	     end;
	     else goto missing_colon;
	end;

	source_index = source_index + scan_index;
	call skip_over_blanks;
	if source_index >= length (source_string)	/* file with no records. */
	     then goto no_more_data;

find_rdelim:
	scan_index = index (substr (source_string, source_index), rdelim);
	if scan_index = 0
	     then goto no_rdelim;
	if verify (substr (source_string, source_index, scan_index - 1), NL_HT_SP_VT_NP) ^= 0
	then do;
	     if commenting
	     then do;
		call comment_scan (addr (source_string_array (source_index)), (scan_index - 1));
		if cs_start ^= 0			/* found comment */
		then if verify (substr (source_string, source_index, cs_start - 1), NL_HT_SP_VT_NP) ^= 0
		     then goto missing_colon;
		     else if in_comment		/* no end to comment */
		     then do;
			call comment_end_scan (addr (source_string_array (source_index + cs_start)),
			     input_length - (source_index + cs_start - 1));
			if ce_pos = 0
			then do;
			     comment_start = cv_index_to_line (source_index + cs_start);
			     goto premature_eof;
			end;
			source_index = source_index + ce_pos + cs_start;
			goto find_rdelim;
		     end;
		     else do;
			source_index = source_index + cs_start + cs_len - 1;
			goto find_rdelim;
		     end;
	     end;
	     else do;
no_rdelim:	bv_code = lister_codes_$listin_missing_rdelim;
		bv_error_token = cv_index_to_line (source_index + 2);
		goto cleanup_and_return;
	     end;
	end;

	source_index = source_index + scan_index;

	do while (source_index <= length (source_string)); /* while there are more records... */
	     recordp = null;
	     call skip_over_blanks;

	     if source_index > length (source_string)
	     then more_fields = "0"b;
	     else more_fields = "1"b;

	     do while (more_fields);			/* while there are fields... */
find_fdelim:	if substr (source_string, source_index, 1) ^= fdelim
		then do;
		     if substr (source_string, source_index, 1) = rdelim
		     then do;			/* to accommodate emacs lister-mode kluge. */
			source_index = source_index + 1;
			call skip_over_blanks;
			if source_index > length (source_string)
			then goto no_more_data;
			goto find_fdelim;
		     end;
		     else if commenting
		     then do;
			if substr (source_string, source_index, 1) = cdelim
			then do;
			     call comment_scan (addr (source_string_array (source_index)), input_length - (source_index - 1));
			     if in_comment
			     then do;
				comment_start = cv_index_to_line (source_index + cs_start);
				goto premature_eof;
			     end;
			     source_index = source_index + cs_start + cs_len - 1;
			     call skip_over_blanks;
			     goto find_fdelim;
			end;
		     end;
		     else do;
			bv_code = lister_codes_$listin_missing_fdelim;
			bv_error_token = substr (source_string, source_index, 1) || cv_index_to_line (source_index);
			goto cleanup_and_return;
		     end;
		end;


		fieldname_start, source_index = source_index + 1;
						/* step over fdelim */
		if source_index > length (source_string)
		     then do;			/* stepped past EOF */
		     source_index = source_index - 1;
		     scan_index = 0;
		end;

		else scan_index = search (substr (source_string, source_index), NL_HT_SP_VT_NP) - 1;

		if scan_index = 0			/* Fieldname followed by whitespace or eof */
		then do;
		     bv_code = lister_codes_$listin_misplaced_fieldname;
		     bv_error_token = cv_index_to_line (source_index);
		     goto cleanup_and_return;
		end;

		if scan_index = -1			/* The remainder of the file is the field name */
		then scan_index = length (source_string) - source_index + 1;

		field_index = lister_hash_fid_ (out_file_ptr, substr (source_string, source_index, scan_index));
		if field_index = -1
		then do;
		     fatal_error = "1"b;
		     call error (lister_codes_$listin_unknown_fieldname,
			substr (source_string, source_index, scan_index) || cv_index_to_line (source_index));
		end;

		source_index = source_index + scan_index;
						/* step over field name */
		call skip_over_blanks;

		if source_index > length (source_string)
		then field_len = 0;
		else if substr (source_string, source_index, 1) = QUOTE
		then do;
		     saved_source_index = source_index;
		     call scan_quoted_string (field_ptr, field_len);
resume_qs_checking:	     if source_index <= length (source_string)
		     then if substr (source_string, source_index, 1) ^= rdelim & substr (source_string, source_index, 1) ^= fdelim
			then do;
			     if ^commenting
			     then do;
				source_index = saved_source_index;
				goto not_a_quoted_string;
			     end;
			     if substr (source_string, source_index, 1) ^= cdelim
			     then do;
				source_index = saved_source_index;
				goto not_a_quoted_string;
			     end;
			     if cdelim = "/"
			     then do;
				if index (substr (source_string, source_index), "*/") ^= 0
				then source_index = source_index + index (substr (source_string, source_index), "*/") + 2;
				else do;
				     in_comment = "1"b;
				     comment_start = cv_index_to_line (source_index);
				     goto premature_eof;
				end;
			     end;
			     else do;
				if index (substr (source_string, source_index + 1), cdelim) ^= 0
				then source_index = source_index + index (substr (source_string, source_index + 1), cdelim) + 2;
				else do;
				     in_comment = "1"b;
				     comment_start = cv_index_to_line (source_index);
				     goto premature_eof;
				end;
			     end;
			     call skip_over_blanks;
			     goto resume_qs_checking;
			end;
		end;
		else do;
not_a_quoted_string:     field_ptr = addr (source_string_array (source_index));
		     scan_index = search (substr (source_string, source_index), fdelim_or_rdelim) - 1;
		     if scan_index = -1
		     then scan_index = length (source_string) - source_index + 1;

		     field_len = scan_index;
		     field_len = length (rtrim (field_value, NL_HT_SP_VT_NP));
		     source_index = source_index + scan_index;
		     temp_field_ptr = null ();
		     if commenting
		     then do;
			call comment_scan (field_ptr, field_len);
			do while (cs_start ^= 0);
			     if temp_field_ptr = null () /* just entered loop. */
			     then do;
				temp_field_len = field_len;
				allocate temp_field_value;
				temp_field_value = field_value;
				comment_start = "";
				comment_pos_adjust = 0;
			     end;
			     if ^in_comment
			     then do;
				temp_field_value = substr (temp_field_value, 1, cs_start - 1) || substr (temp_field_value, cs_start + cs_len);
				temp_field_len = temp_field_len - cs_len;
				comment_pos_adjust = comment_pos_adjust + cs_len;
				call comment_scan (temp_field_ptr, temp_field_len);
				comment_start = "";
			     end;
			     else do;
				if comment_start = ""
				then comment_start = cv_index_to_line (source_index + cs_start + comment_pos_adjust - scan_index);
				temp_char = substr (source_string, source_index, 1);
				source_index = source_index + 1;
				comment_pos_adjust = comment_pos_adjust - scan_index - 1;
				scan_index = search (substr (source_string, source_index), fdelim_or_rdelim) - 1;
				if scan_index = -1
				then goto premature_eof;
				temp_temp_field_len = temp_field_len + scan_index + 1;
				allocate temp_temp_field_value;
				temp_temp_field_value = temp_field_value || temp_char || substr (source_string, source_index, scan_index);
				free temp_field_value;
				temp_field_len = temp_temp_field_len;
				allocate temp_field_value;
				temp_field_value = temp_temp_field_value;
				free temp_temp_field_value;
				call comment_scan (temp_field_ptr, temp_field_len);
				source_index = source_index + scan_index;
			     end;
			end;
		     end;
		end;

		if field_len > 0 & field_index ^= -1 & (temp_field_ptr = null () | (temp_field_ptr ^= null () & temp_field_len ^= 0))
		then do;
		     if recordp = null
		     then recordp = lister_create_record_ (out_file_ptr);

		     if recordp -> output_record.field (field_index) ^= null
		     then do;
			call error (lister_codes_$listin_dup_field,
			     pointer (field_table.index_to_field_id (field_index), output_file.area)
			     -> field_identifier.string || cv_index_to_line (fieldname_start));
		     end;
		     else do;
			if temp_field_ptr ^= null
			then atom_length = length (rtrim (temp_field_value, NL_HT_SP_VT_NP));
			else atom_length = field_len;
			allocate atom in (output_file.area) set (atomp);
			if temp_field_ptr ^= null
			then atom = temp_field_value;
			else atom = field_value;
			recordp -> output_record.field (field_index) = atomp;
		     end;
		end;

		if temp_field_ptr ^= null ()
		then free temp_field_value;

		if source_index <= length (source_string)
		then if substr (source_string, source_index, 1) = rdelim
		     then do;
			more_fields = "0"b;
			source_index = source_index + 1;
						/* step over record delimiter */
		     end;
		     else ;
		else more_fields = "0"b;
	     end;
no_more_data:
	end;

	bv_n_records = output_file.n_records;

cleanup_and_return:
	if fatal_error
	then do;
	     bv_code = error_table_$translation_failed;
	     bv_error_token = "";
	end;

	call clean_up;
	return;

missing_colon:
	bv_code = lister_codes_$listin_missing_colon;
	bv_error_token = token || cv_index_to_line (source_index);
	go to cleanup_and_return;

missing_semicolon:
	bv_code = lister_codes_$listin_missing_semicolon;
	bv_error_token = token || cv_index_to_line (source_index);
	go to cleanup_and_return;

premature_eof:
	bv_code = lister_codes_$listin_premature_eof;
	if in_comment
	then bv_error_token = "While processing comment beginning" || comment_start;
	else bv_error_token = "";
	go to cleanup_and_return;

invalid_char:
	bv_code = lister_codes_$listin_invalid_char;
	bv_error_token = substr (source_string, source_index, 1) || cv_index_to_line (source_index);
	go to cleanup_and_return;

clean_up:
	procedure ();

/* program */

	     if static_buffer_ptr ^= null
	     then do;
		free static_buffer in (system_area);
		static_buffer_ptr = null;
		static_buffer_len = 0;
	     end;

	end clean_up;

cv_index_to_line:
	procedure (bv_source_index) returns (char (20) varying);

/* parameters */

declare  bv_source_index fixed bin (21) parameter;

/* automatic */

declare  line_number fixed bin (21),
         line_string char (20) varying,
         nl_index fixed bin (21),
         src_index fixed bin (21);

/* internal static 				     */

declare  NL char (1) initial ("
") internal static;

/* pictures */

declare  seven_digits picture "zzzzzz9";

/* program */

	     line_number = 1;

	     do src_index = 1 repeat (src_index + nl_index) while (src_index <= bv_source_index);
		nl_index = index (substr (source_string, src_index), NL);
		if nl_index = 0			/* No final newline */
		then nl_index = bv_source_index - src_index + 1;

		line_number = line_number + 1;
	     end;

	     seven_digits = line_number - 1;
	     line_string = " on line " || ltrim (seven_digits);
	     return (line_string);

	end cv_index_to_line;

comment_end_scan:
	procedure (bv_ces_ptr, bv_ces_len);

/*  parameters */

dcl  bv_ces_ptr ptr parameter;
dcl  bv_ces_len fixed bin (21);
	
/* automatic */

dcl  cei fixed bin;

/* based */

dcl  ces_string char (bv_ces_len) based (bv_ces_ptr);
	
/* program */

	     if index (ces_string, cdelim) = 0
	     then do;
		ce_pos = 0;
		return;
	     end;
	     else do cei = 1 to length (ces_string) while (in_comment);
		if substr (ces_string, cei, 1) = cdelim
		then do;
		     in_comment = "0"b;
		     ce_pos = cei;
		     if cdelim = "/"
		     then if substr (ces_string, cei - 1, 1) = "*"
			then in_comment = "1"b;
		end;
	     end;
	end comment_end_scan;

comment_scan:
	procedure (bv_cs_ptr, bv_cs_len);

/* parameters */

declare  bv_cs_ptr ptr parameter;
declare  bv_cs_len fixed bin (21) parameter;
	
/* automatic */

declare  ci fixed bin;

/* based */

declare  cs_string char (bv_cs_len) based (bv_cs_ptr);
	
/* program */

	     if cdelim = "/"
		then do;
		if index (cs_string, "/*") = 0
		     then do;
		     cs_start = 0;
		     cs_len = 0;
		     return;
		end;
	     end;
	     else do;
		if index (cs_string, cdelim) = 0
		then do;
		     cs_start = 0;
		     cs_len = 0;
		     return;
		end;
	     end;

	     do ci = 1 to length (cs_string) while (^in_comment);
		if substr (cs_string, ci, 1) = cdelim
		     then do;
		     in_comment = "1"b;
		     cs_start = ci;
		     if cdelim = "/"
		          then if substr (cs_string, ci + 1, 1) ^= "*"
			then in_comment = "0"b;
		end;
	     end;
	     if cdelim = "/"
		then cs_len = index (substr (cs_string, cs_start), "*/") + 1;
	     else cs_len = index (substr (cs_string, cs_start + 1), cdelim) + 1;
	     if cs_len > 1
		then in_comment = "0"b;
	end comment_scan;

error:
	procedure (bv_status_code, bv_message);

/* parameters */

declare (
         bv_status_code fixed bin (35),
         bv_message char (*)
         ) parameter;

/* automatic */

declare  long_msg char (100),
         short_msg char (8);

/* entries */

declare  convert_status_code_
         entry (fixed bin (35), char (8), char (100)),
         ioa_$ioa_switch entry options (variable);


/* external static */

declare  iox_$error_output ptr external static;

/* program */

	     call convert_status_code_ (bv_status_code, short_msg, long_msg);
	     call ioa_$ioa_switch (iox_$error_output, "^a  ^a", long_msg, bv_message);
	     return;

	end error;

get_token:
	procedure;

/* program */

/* Skip leading white space */

try_again:
	     scan_index = verify (substr (source_string, source_index), NL_HT_SP_VT_NP) - 1;
	     if scan_index = -1			/* rest of segment is blank */
	     then go to premature_eof;

	     source_index = source_index + scan_index;	/* step over blanks */
	     token_start = source_index;		/* remember in case of errors */

/* Check for simple delimiter tokens */

	     scan_index = index ("!""#$%&'()*+,-./:;<=>?@[\]^_`{|}~", substr (source_string, source_index, 1));
	     if scan_index > 0
	     then do;
		if commenting
		then if substr (source_string, source_index, 1) = cdelim
		     then do;
			comment_start = cv_index_to_line (token_start);
			if cdelim = "/"
			then do;
			     if substr (source_string, source_index + 1, 1) = "*"
			     then do;
				in_comment = "1"b;
				scan_index = index (substr (source_string, source_index + 2), "*/");
				if scan_index = 0
				then goto premature_eof;
				source_index = source_index + scan_index + 3;
				in_comment = "0"b;
				goto try_again;
			     end;
			end;			/* slash w/o asterisk--pass as token. */
			else do;
			     in_comment = "1"b;
			     scan_index = index (substr (source_string, source_index + 1), cdelim);
			     if scan_index = 0
			     then goto premature_eof;
			     source_index = source_index + scan_index + 1;
			     in_comment = "0"b;
			     goto try_again;
			end;
		     end;
		token = substr (source_string, source_index, 1);
		source_index = source_index + 1;
		return;
	     end;

/* See if it is a non-printing char. */

	     if substr (source_string, source_index, 1) < " " | substr (source_string, source_index, 1) > "~"
	     then go to invalid_char;

/* It is an alphanumeric token. Find the end of it. */

	     scan_index =
		verify (substr (source_string, source_index),
		"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz") - 1;
	     if scan_index = -1			/* rest of segment is alphanumerics */
	     then scan_index = length (source_string) - source_index;

	     token = substr (source_string, source_index, scan_index);
	     source_index = source_index + scan_index;	/* step over it */
	     return;

	end get_token;

/* Internal procedure to scan a quoted field value, removing doubled quotes.
   Implicit input arguments: source_string, source_index.
*/

scan_quoted_string:
	procedure (bv_field_ptr, bv_field_len);

/* parameters */

declare (
         bv_field_ptr ptr,				/* Output - ptr to dequoted string */
         bv_field_len fixed bin (21)			/* Output - length of dequoted string */
         ) parameter;

/* automatic */

declare  buffer_len fixed bin (21),
         buffer_ptr ptr,
         string_len fixed bin (21),
         string_start fixed bin (21),
         using_automatic_buffer
         bit (1) aligned;

/* based */

declare  buffer char (buffer_len) varying based (buffer_ptr);

/* program */

	     source_index = source_index + 1;		/* step over opening quote */
	     string_start = source_index;
	     string_len = 0;
	     using_automatic_buffer = "1"b;		/* The default... */
	     buffer_ptr = addr (token);
	     buffer_len = maxlength (token);

rescan:
	     scan_index = index (substr (source_string, source_index), QUOTE) - 1;
	     if scan_index = -1			/* No closing quote */
	     then go to premature_eof;

	     if string_start = 0
	     then do;
		call check_buffer_len (scan_index);
		buffer = buffer || substr (source_string, source_index, scan_index);
	     end;
	     else string_len = string_len + scan_index;

	     source_index = source_index + scan_index + 1; /* step over chars scanned and quote */

	     if source_index <= length (source_string)
	     then if substr (source_string, source_index, 1) = QUOTE
		then do;
		     if string_start > 0		/* if not copied, do it now */
		     then do;
			call check_buffer_len (string_len);
			buffer = substr (source_string, string_start, string_len);
			string_start = 0;
		     end;

		     call check_buffer_len (1);
		     buffer = buffer || QUOTE;
		     source_index = source_index + 1;	/* step over quote */
		     go to rescan;
		end;

	     call skip_over_blanks;

	     if string_start > 0
	     then do;
		bv_field_ptr = addr (source_string_array (string_start));
		bv_field_len = string_len;
		return;
	     end;

	     bv_field_ptr = addrel (buffer_ptr, 1);
	     bv_field_len = length (buffer);
	     return;

check_buffer_len:
	     procedure (bv_additional_chars);

/* parameters */

declare  bv_additional_chars fixed bin (21) parameter;	/* Input - number of chars being concatenated on */

/* automatic */

declare  new_buffer_len fixed bin (21),
         new_buffer_ptr ptr;

/* based */

declare  new_buffer char (new_buffer_len) varying based (new_buffer_ptr);

/* program */

		if length (buffer) + bv_additional_chars <= maxlength (buffer)
		then return;

/* Buffer too small. Switch to a bigger one. */

		if using_automatic_buffer
		then do;
		     if static_buffer_ptr ^= null	/* Have we already allocated a buffer? */
		     then if length (buffer) + bv_additional_chars <= static_buffer_len
			then do;
			     using_automatic_buffer = "0"b;
			     static_buffer = buffer;
			     buffer_ptr = static_buffer_ptr;
			     buffer_len = static_buffer_len;
			     return;
			end;
		end;

/* Calculate new buffer length. It can be as big as a 255K segment, minus the area header size. */

		new_buffer_len = min (1044480 - 96, binary (1.5e0 * (length (buffer) + bv_additional_chars), 35));
		allocate new_buffer in (system_area) set (new_buffer_ptr);

		new_buffer = buffer;

		if ^using_automatic_buffer
		then if static_buffer_ptr ^= null
		     then free static_buffer in (system_area);
		     else ;
		else using_automatic_buffer = "0"b;

		static_buffer_ptr, buffer_ptr = new_buffer_ptr;
		static_buffer_len, buffer_len = new_buffer_len;
		return;

	     end check_buffer_len;

	end scan_quoted_string;

/* Internal procedure to skip over "white space" characters */

skip_over_blanks:
	procedure;

skip_again:
	scan_index = verify (substr (source_string, source_index), NL_HT_SP_VT_NP) - 1;
	     if scan_index = -1
	     then scan_index = length (source_string) - source_index + 1;

	     source_index = source_index + scan_index;
	     if commenting
		then if (substr (source_string, source_index, 1) = cdelim & cdelim ^= "/")
		| (substr (source_string, source_index, 2) = "/*" & cdelim = "/")
		then do;
		call comment_scan (addr (source_string_array (source_index)), input_length - (source_index - 1));
		if in_comment 
		     then do;
		     comment_start = cv_index_to_line (source_index + cs_start);
		     goto premature_eof;
		end;
		source_index = source_index + cs_start + cs_len - 1;
		goto skip_again;
	     end;
	     return;

	end skip_over_blanks;

     end						/* lister_compile_listin_ */;
