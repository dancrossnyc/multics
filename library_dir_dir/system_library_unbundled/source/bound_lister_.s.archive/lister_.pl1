/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* LISTER_ - Subroutine interface to create & fill in a Lister file.
   Written 770825 by PG
   Modified 770919 by PG to add get_fieldnames entry.
   Modified 791218 by PG to free old field_identifiers in in open_file.
   Modified 800826 by PB for uid implementation.
   Modified 801202 by PB to fix bug in get_fieldnames.
   Modified 801205 by PB to fix bug when fieldname specified twice.
   Modified 830907 by PB to use non-freeing areas.
*/

/* format: style3 */
lister_$open_file:
     procedure (bv_dname, bv_ename, bv_open_info_ptr, bv_file_info_ptr, bv_code) options (packed_decimal);

/* parameters */

declare (
         bv_area_ptr ptr,
         bv_code fixed bin (35),
         bv_dname char (*),
         bv_ename char (*),
         bv_fieldname_info_ptr
         ptr,
         bv_file_info_ptr ptr,
         bv_open_info_ptr ptr,
         bv_record_info_ptr ptr
         ) parameter;

/* automatic */

declare  bitcount fixed bin (24),
         code fixed bin (35),
         fieldx fixed bin,
         field_len fixed bin (21),
         field_ptr ptr,
         file_info_ptr ptr,
         open_info_ptr ptr,
         out_recordp ptr,
         record_info_ptr ptr,
         selected_records_ptr
         ptr;

/* based */

declare  field_value char (field_len) based (field_ptr);

declare 1 fieldname_info aligned based (open_info.fieldname_info_ptr),
        2 version fixed bin,
        2 n_fieldnames fixed bin,
        2 name (n refer (fieldname_info.n_fieldnames)) char (32);

declare 1 file_info aligned based (file_info_ptr),
        2 file_ptr ptr,
        2 dname char (168) unal,
        2 ename char (32) unal;

declare 1 local_open_info aligned like open_info;
declare 1 open_info aligned based (open_info_ptr),
        2 version fixed bin,
        2 flags aligned,
	3 create bit (1) unal,
	3 discard_records
         bit (1) unal,
	3 assign_fieldnames
         bit (1) unal,
	3 mbz bit (33) unal,
        2 fieldname_info_ptr
         ptr;

declare 1 record_info aligned based (record_info_ptr),
        2 version fixed bin,
        2 n_fields fixed bin,
        2 field (n refer (record_info.n_fields)) aligned,
	3 field_ptr ptr,
	3 field_len fixed bin (21);

/* builtins */

declare (dim, empty, hbound, lbound, null, offset, pointer, rtrim)
         builtin;

/* conditions */

declare  cleanup condition;

/* entries */

declare  adjust_bit_count_ entry (char (*), char (*), bit (1) aligned, fixed bin (24), fixed bin (35)),
         get_system_free_area_
         entry (ptr),
         hcs_$initiate entry (char (*), char (*), char (*), fixed bin, fixed bin, ptr, fixed bin (35)),
         hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35)),
         hcs_$terminate_noname
         entry (ptr, fixed bin (35));

/* external static */

declare (
         lister_codes_$cant_assign_fieldnames,
         lister_codes_$dup_fieldname,
         lister_codes_$fieldname_info_ptr_null,
         lister_codes_$file_info_ptr_null,
         lister_codes_$open_info_mbz_bad,
         lister_codes_$open_info_wrong_version,
         lister_codes_$record_info_wrong_version,
         lister_codes_$wrong_no_of_fields
         ) external static;

/* internal static */

/* include files */

%include lister_entries;
%include lister_structures;

/* program */

	selected_records_ptr = null;
	file_info_ptr = null;
	on cleanup
	     call clean_up;

	open_info_ptr = bv_open_info_ptr;

	if open_info.version ^= 1
	then do;
	     bv_code = lister_codes_$open_info_wrong_version;
	     return;
	end;

	if open_info.mbz ^= ""b
	then do;
	     bv_code = lister_codes_$open_info_mbz_bad;
	     return;
	end;

	if open_info.create
	then call hcs_$make_seg (bv_dname, bv_ename, "", 1010b, out_file_ptr, code);
	else call hcs_$initiate (bv_dname, bv_ename, "", 0, 1, out_file_ptr, code);

	if out_file_ptr = null
	then do;
	     bv_code = code;
	     return;
	end;

	call get_system_free_area_ (area_ptr);

	allocate file_info in (system_area) set (file_info_ptr);
	file_info.file_ptr = out_file_ptr;
	file_info.dname = bv_dname;
	file_info.ename = bv_ename;

	if output_file.version = -1			/* Old file version */
	     | output_file.version = 1
	then output_file.version = lister_file_version_2;

	if output_file.version = 0			/* Newly created file */
	then do;
	     output_file.area = empty ();
	     output_file.field_table_offset = null;
	     output_file.record_head = null;
	     output_file.record_tail = null;
	     output_file.unused (1) = null;
	     output_file.unused (2) = null;
	     output_file.next_uid = 1;
	     output_file.version = lister_file_version_2;
	     output_file.n_records = 0;
	end;

	if open_info.discard_records
	then do;
	     n = lister_select_ (out_file_ptr, null, area_ptr, selected_records_ptr);
	     call lister_delete_ (out_file_ptr, selected_records_ptr);
	end;

	if open_info.assign_fieldnames
	then if output_file.n_records ^= 0
	     then do;
		bv_code = lister_codes_$cant_assign_fieldnames;
		call clean_up;
		return;
	     end;
	     else do;

		if open_info.fieldname_info_ptr = null
		then do;
		     bv_code = lister_codes_$fieldname_info_ptr_null;
		     call clean_up;
		     return;
		end;

		field_table_ptr = output_file.field_table_offset;

		if field_table_ptr ^= null
		then do;
		     do fieldx = lbound (field_table.index_to_field_id, 1)
			     to hbound (field_table.index_to_field_id, 1);
			fidp = pointer (field_table.index_to_field_id (fieldx), output_file.area);
			free fidp -> field_identifier in (output_file.area);
		     end;
		     free field_table_ptr -> field_table in (output_file.area);
		end;

		n = fieldname_info.n_fieldnames - 1;

		allocate field_table in (output_file.area) set (field_table_ptr);
		output_file.field_table_offset = field_table_ptr;
		field_table.record_delimiter = "$";
		field_table.field_delimiter = "=";
		field_table.hash_field_id_to_index (*) = null;

		do fieldx = lbound (fieldname_info.name, 1) to hbound (fieldname_info.name, 1);
		     fidp = lister_hash_fid_$enter (out_file_ptr, rtrim (fieldname_info.name (fieldx)));
		     if fidp = null
			then do;
			bv_code = lister_codes_$dup_fieldname;
			call clean_up;
			return;
		     end;
		     field_table.index_to_field_id (fieldx - 1) = offset (fidp, output_file.area);
		     fidp -> field_identifier.field_index = fieldx - 1;
		end;
	     end;

	bv_file_info_ptr = file_info_ptr;
	file_info_ptr = null;			/* don't clean this up now! */
	call clean_up;
	bv_code = 0;
	return;

lister_$add_record:
	entry (bv_file_info_ptr, bv_record_info_ptr, bv_code);

	file_info_ptr = bv_file_info_ptr;
	record_info_ptr = bv_record_info_ptr;

	if record_info.version ^= 1
	then do;
	     bv_code = lister_codes_$record_info_wrong_version;
	     return;
	end;

	if file_info_ptr = null
	then do;
	     bv_code = lister_codes_$file_info_ptr_null;
	     return;
	end;

	out_file_ptr = file_info.file_ptr;
	field_table_ptr = output_file.field_table_offset;

	if field_table.max_field_index + 1 ^= record_info.n_fields
	then do;
	     bv_code = lister_codes_$wrong_no_of_fields;
	     return;
	end;

	out_recordp = lister_create_record_ (out_file_ptr);

	do fieldx = 1 to record_info.n_fields;
	     field_ptr = record_info.field (fieldx).field_ptr;
	     atom_length, field_len = record_info.field (fieldx).field_len;

	     allocate atom in (output_file.area) set (atomp);
	     out_recordp -> output_record.field (fieldx - 1) = atomp;
	     atom = field_value;
	end;

	bv_code = 0;
	return;

lister_$get_fieldnames:
	entry (bv_file_info_ptr, bv_area_ptr, bv_fieldname_info_ptr, bv_code);

	file_info_ptr = bv_file_info_ptr;
	area_ptr = bv_area_ptr;
	bv_fieldname_info_ptr = null;

	if file_info_ptr = null
	then do;
	     bv_code = lister_codes_$file_info_ptr_null;
	     return;
	end;

	open_info_ptr = addr (local_open_info);
		
	open_info.fieldname_info_ptr = null;

	on cleanup
	     begin;
	     if open_info.fieldname_info_ptr ^= null
		then free open_info.fieldname_info_ptr -> fieldname_info in (system_area);
	end;

	out_file_ptr = file_info.file_ptr;
	field_table_ptr = output_file.field_table_offset;

	n = dim (field_table.index_to_field_id, 1);

	allocate fieldname_info in (system_area) set (open_info.fieldname_info_ptr);
	fieldname_info.version = 1;
	fieldname_info.n_fieldnames = n;

	do fieldx = 1 to n;
	     fieldname_info.name (fieldx) =
		pointer (field_table.index_to_field_id (fieldx - 1), output_file.area) -> field_identifier.string;
	end;

	bv_fieldname_info_ptr = open_info.fieldname_info_ptr;
	bv_code = 0;
	return;

lister_$close_file:
	entry (bv_file_info_ptr, bv_code);

	selected_records_ptr = null;
	file_info_ptr = bv_file_info_ptr;
	on cleanup
	     call clean_up;

	call adjust_bit_count_ (file_info.dname, file_info.ename, "0"b, bitcount, code);
	call hcs_$terminate_noname (file_info.file_ptr, code);
	call clean_up;
	bv_code = 0;
	return;

clean_up:
	procedure ();

	     if selected_records_ptr ^= null
	     then do;
		free selected_records_ptr -> list_node;
		selected_records_ptr = null;
	     end;

	     if file_info_ptr ^= null
	     then do;
		free file_info_ptr -> file_info;
		file_info_ptr = null;
	     end;

	end clean_up;

     end;
