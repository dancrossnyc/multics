/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* Program to sort a Lister file into either ascending or descending alphabetical (not ASCII!) order.
   Written by Paul Green
   Modified by PG on 741110 to use alphabetical sort (thanks to Jerry Stern, who first debugged it)
   Modified 770606 by PG to handle -asc/-dsc on a per-field basis
   Modified 770706 by PG to take array of record ptrs as input and not rethread file.
   Modified 770721 by PG to fix bug 8 (can't sort 0 records).
   Modified 781020 by PG to get around pl1 bug 1795.
   Modified 790702 by PG to add numeric sorting.
   NOTE: This program gets bug 1844 if compiled with PL/I 24c or earlier.
   Modified 800312 by PG to fix 052 (sort null fields last in descending order).
   Modified 800605 by PB to remove, hopefully, last vestige of case-sensitivity.
*/

/* format: style3 */
lister_sort_:
     procedure (bv_in_file_ptr, bv_list_ptr, bv_sort_list_ptr) options (packed_decimal);

/* parameters */

declare (
         bv_in_file_ptr ptr,
         bv_list_ptr ptr,
         bv_sort_list_ptr ptr
         ) parameter;

/* builtin */

declare (convert, divide, hbound, lbound, null, onsource, translate)
         builtin;

/* conditions */

declare  conversion condition;

/* internal static */

declare (
         upper_case initial ("ABCDEFGHIJKLMNOPQRSTUVWXYZ"),
         lower_case initial ("abcdefghijklmnopqrstuvwxyz")
         ) char (26) internal static;

/* include files */

%include lister_structures;

/* program */

	in_file_ptr = bv_in_file_ptr;
	sort_list_ptr = bv_sort_list_ptr;

	if bv_list_ptr = null			/* sorting 0 records is trivial */
	then return;

	n = bv_list_ptr -> list_node.size;

	if n = 1					/* sorting 1 record is trivial, too. */
	then return;

	on conversion onsource = "0";

	begin;					/* enter begin block to get storage */

/* automatic */

dcl (d, f, fi, i, j, k, previous_d, t)
     fixed bin;
dcl (p, pj, pk, list_ptr)
     ptr;
dcl (ascending, exchange)
     bit (1) aligned;

/* automatic adjustable */

declare  index_list (n) fixed bin;
declare  numeric_field (n) float decimal (29) unaligned;
						/* 4 words per element, 29 digits is plenty */

/* begin block */

	     list_ptr = bv_list_ptr;

	     do f = lbound (sort_list.key, 1) to hbound (sort_list.key, 1);
		fi = sort_list.key (f).field_index;
		ascending = sort_list.key (f).ascending;
		d = n;
		previous_d = d;

		do i = 1 to n;
		     index_list (i) = i;
		end;

		if sort_list.key (f).numeric
		then do i = 1 to n;
		     pj = list_ptr -> list_node.list (i) -> input_record.field (fi);

		     if pj = null
		     then numeric_field (i) = 0e0;
		     else numeric_field (i) = convert (numeric_field (1), pj -> atom);
		end;

		do d = (2 * divide (n, 4, 17, 0) + 1) repeat (2 * divide (d, 4, 17, 0) + 1) while (previous_d > 1);
		     previous_d = d;

		     do i = 1 to n - d;
			k = i + d;
up:
			j = k - d;

			pj = list_ptr -> list_node.list (j) -> input_record.field (fi);
			pk = list_ptr -> list_node.list (k) -> input_record.field (fi);

			exchange = "0"b;

/* Collating Sequence:
   Null fields.
   Non-null fields in alphabetical order.

   Algorithm:
   1. null fields get sorted before non-null fields if ascending,
   and after non-null fields if descending.
   2. equal fields always remain in the same relative order (sort is stable).
   3. alphabetics are translated to lower case before comparison; fields equal
   under translation are then compared directly. Ascending sorts put
   records into ascending (A<B<C<...<Z) order.  Descending sorts are exactly the opposite.
*/

			if pj = null
			then if pk = null
			     then if index_list (j) > index_list (k)
				then exchange = "1"b;
						/* preserve previous order */
				else ;		/* in order */
			     else exchange = ^ascending;
						/* ascending implies null items first */
						/* descending implies non-null items first */
			else if pk = null
			then exchange = ascending;	/* ascending implies null items first */
						/* descending implies non-null items first */
			else if sort_list.key (f).numeric
						/* NUMERIC SORT */
			then if numeric_field (index_list (j)) = numeric_field (index_list (k))
			     then if index_list (j) > index_list (k)
				then exchange = "1"b;
						/* preserve previous order */
				else ;		/* order ok */
			     else if numeric_field (index_list (j)) > numeric_field (index_list (k))
			     then exchange = ascending;
						/* ascending implies "less" items first */
			     else exchange = ^ascending;
						/* descending implies "greater" items first */

/* AVOID BUG 1795		else if translate (pj -> atom, lower_case, upper_case) =
   translate (pk -> atom, lower_case, upper_case) ... */
			else do;			/* ALPHABETIC SORT */
			     equal_bit =
				translate (pj -> atom, lower_case, upper_case)
				= translate (pk -> atom, lower_case, upper_case);
			     if equal_bit
			     then if index_list (j) > index_list (k)
				then exchange = "1"b; /* preserve previous order. */
				else;
						/* AVOID BUG 1795...		else if translate (pj -> atom, lower_case, upper_case) >
						   translate (pk -> atom, lower_case, upper_case)	... */
			     else do;
				greater_bit =
				     translate (pj -> atom, lower_case, upper_case)
				     > translate (pk -> atom, lower_case, upper_case);
				if greater_bit
				then exchange = ascending;
						/* ascending implies "less" items first */
				else exchange = ^ascending;
						/* descending implies "greater" items first */

/* Following is for bug 1795 too */
			     end;
			end;
dcl (equal_bit, greater_bit)
     bit (1) aligned;

/* end bug 1795 section */

			if exchange
			then do;
			     p = list_ptr -> list_node.list (k);
			     list_ptr -> list_node.list (k) = list_ptr -> list_node.list (j);
			     list_ptr -> list_node.list (j) = p;

			     t = index_list (k);
			     index_list (k) = index_list (j);
			     index_list (j) = t;

			     if j > d
			     then do;
				k = j;
				go to up;
			     end;
			end;
		     end;
		end;
	     end;
	end;					/* the begin block */

	return;

     end						/* lister_sort_ */;
