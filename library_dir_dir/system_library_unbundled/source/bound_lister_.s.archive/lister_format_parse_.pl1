/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(90-08-15,Gray), approve(90-08-15,MCR8157), audit(90-10-17,Bubric),
     install(90-10-17,MR12.4-1046):
     Fix error message when there is no "<end;>" token. Wordpro 1152
                                                   END HISTORY COMMENTS */


/* Modified 780407 by PG to implement :argN and suggestion 20 (map << to <)
   Modified 781010 by PG to get :argN to parse correctly.
   Modified 791217 by PG to fix 027 (pls dies if fieldname used in Before or After section).
   Modified 800414 by PB to put line numbers in listform error messages.
   Modified 800813 by PB to recognize :uid.
   Modified 840521 by PB to allow :argumentN as alternate for :argN.
*/

/* format: style3 */
lister_format_parse_:
     procedure (bv_in_file_ptr, bv_area_ptr, bv_input, bv_format_table_ptr, bv_error_token, bv_code) options (packed_decimal);

/* parameters */

declare (
         bv_in_file_ptr ptr,
         bv_area_ptr ptr,
         bv_input char (*),
         bv_format_table_ptr ptr,
         bv_error_token char (*),
         bv_code fixed bin (35)
         ) parameter;

/* automatic */

declare  c char (1) aligned,
         code fixed bin (35),
         comma_seen bit (1) aligned,
         commax fixed bin (21),
         done bit (1) aligned,
         eof bit (1) aligned,
         field_arg_number fixed bin,
         field_index fixed bin,
         field_justification bit (2) aligned,
         field_width fixed bin (21),
         fmt_length fixed bin (21),
         fmtx fixed bin,
         format_begin fixed bin,
         keyword_type fixed bin,
         line_no fixed bin,
         literals_done bit (1) aligned,
         litx fixed bin,
         scan_index fixed bin (21),
         scan_start fixed bin (21),
         token_len fixed bin (21);

/* builtin */

declare (char, hbound, index, length, ltrim, null, substr, verify)
         builtin;

/* entries */

declare  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin);

/* external static */

declare (
         lister_codes_$dup_format,
         lister_codes_$listform_bad_arg_number,
         lister_codes_$listform_bad_justify,
         lister_codes_$listform_bad_width,
         lister_codes_$listform_misplaced_fieldname,
         lister_codes_$listform_missing_begin,
         lister_codes_$listform_missing_gt,
         lister_codes_$listform_missing_lt,
         lister_codes_$listform_unknown_fieldname,
         lister_codes_$listform_unknown_keyword
         ) fixed bin (35) external static;

/* internal static */

declare (
         NL char (1) initial ("
"),
         NL_HT_SP_VT_NP char (5) initial ("
	 "),
         format_type (3) char (6) varying initial ("before", "record", "after"),
         BEFORE fixed bin initial (1),
         RECORD fixed bin initial (2),
         AFTER fixed bin initial (3)
         ) internal static;

/* include files */

%include lister_entries;
%include lister_structures;

/* program */

	in_file_ptr = bv_in_file_ptr;
	area_ptr = bv_area_ptr;
	bv_format_table_ptr = null;
	bv_code = 0;

/* Allocate initial format table and literal table. */

	n = 50;
	allocate format_table in (system_area) set (format_table_ptr);
	format_table.size = n;
	format_table.before = 0;
	format_table.after = 0;
	format_table.record = 0;

	n = 50;
	allocate literal_table in (system_area) set (ltp);
	format_table.literal_table = ltp;
	literal_table.size = n;
	literal_table.n_literals = 0;

	fmtx = 0;					/* no formats so far */
	litx = 0;					/* no literals so far */

/* Now parse the listform segment. */

	scan_start = 1;
	line_no = 1;
	eof = "0"b;
	do while (^eof);

/* Skip white space */

	     scan_index = verify (substr (bv_input, scan_start), NL_HT_SP_VT_NP) - 1;

	     if scan_index ^= -1
	     then do;
		call bump_line_no (scan_start, scan_index);
		scan_start = scan_start + scan_index;

		call parse_block ();
		if bv_code ^= 0
		then return;
	     end;
	     else eof = "1"b;
	end;

/* All done, wrap things up... */

	bv_format_table_ptr = format_table_ptr;
	return;

parse_block:
	procedure ();

/* program */

	     if substr (bv_input, scan_start, 1) ^= "<"
	     then do;
		bv_code = lister_codes_$listform_missing_lt;
		bv_error_token = NL||"Error in line "||ltrim (char (line_no))||".";
		return;
	     end;

	     scan_start = scan_start + 1;

	     if substr (bv_input, scan_start, 6) ^= "Begin "
	     then do;
		bv_code = lister_codes_$listform_missing_begin;
		bv_error_token = NL||"Error in line "||ltrim (char (line_no))||".";
		return;
	     end;

	     scan_start = scan_start + 6;

	     if substr (bv_input, scan_start, 8) = "before:>"
	     then keyword_type = BEFORE;
	     else if substr (bv_input, scan_start, 8) = "record:>"
	     then keyword_type = RECORD;
	     else if substr (bv_input, scan_start, 7) = "after:>"
	     then keyword_type = AFTER;
	     else do;
		bv_code = lister_codes_$listform_unknown_keyword;
		bv_error_token = substr (bv_input, scan_start, index (substr (bv_input, scan_start), ">") - 1)||NL||"Error in line "||ltrim (char (line_no))||".";
		return;
	     end;

	     if keyword_type = AFTER
	     then scan_start = scan_start + 7;
	     else scan_start = scan_start + 8;

	     format_begin = fmtx + 1;
	     done = "0"b;
	     do while (^done);

/* Scan literal field */

		literals_done = "0"b;
		do while (^literals_done);
		     scan_index = index (substr (bv_input, scan_start), "<") - 1;
		     if scan_index = -1
		     then do;
			bv_code = lister_codes_$listform_missing_lt;
			bv_error_token = NL || "Error at end of listform segment.  Missing ""<end;>"" string.";
			return;
		     end;

/* Check for "<<" ... gets mapped into "<" */

		     if scan_start + scan_index < length (bv_input)
		     then if substr (bv_input, scan_start + scan_index + 1, 1) = "<"
			then scan_index = scan_index + 1; /* include first < in current literal */
			else literals_done = "1"b;
		     else literals_done = "1"b;

		     if scan_index > 0
		     then do;			/* We have a literal, save it */
			fmtx = fmtx + 1;
			if fmtx > hbound (format_table.item, 1)
			then call reallocate_format_table;

			if substr (bv_input, scan_start, scan_index) = ""
			then do;
			     format_table.item (fmtx).action = PUT_SPACES;
			     format_table.item (fmtx).width = scan_index;
			end;
			else do;
			     format_table.item (fmtx).action = PUT_LITERAL;
			     format_table.item (fmtx).width = save_literal (scan_start, scan_index);
			end;

			call bump_line_no (scan_start, scan_index);
			scan_start = scan_start + scan_index;
						/* step over literal */

		     end;

/* Current char = "<". Step over it. */

		     scan_start = scan_start + 1;
		end;

/* Scan format field. */

		fmt_length = index (substr (bv_input, scan_start), ">");
		if fmt_length = 0
		then do;
		     bv_code = lister_codes_$listform_missing_gt;
		     bv_error_token = NL||"Error in line "||ltrim (char (line_no))||".";
		     return;
		end;

		if substr (bv_input, scan_start, fmt_length) = "end;>"
		then do;
		     scan_start = scan_start + 5;	/* step over "end;>" */

		     if keyword_type = BEFORE
		     then do;
			if format_table.before ^= 0
			then go to duplicate_keyword;

			format_table.before = format_begin;
		     end;
		     else if keyword_type = RECORD
		     then do;
			if format_table.record ^= 0
			then go to duplicate_keyword;

			format_table.record = format_begin;
		     end;
		     else do;
			if format_table.after ^= 0
			then do;

duplicate_keyword:
			     bv_code = lister_codes_$dup_format;
			     bv_error_token = format_type (keyword_type)||NL||"Error in line "||ltrim (char (line_no))||".";
			     return;
			end;

			format_table.after = format_begin;
		     end;

		     fmtx = fmtx + 1;
		     if fmtx > hbound (format_table.item, 1)
		     then call reallocate_format_table;

		     format_table.item (fmtx).action = PUT_END;
		     done = "1"b;
		end;
		else do;

/* Scanning regular format. Syntax is: <fieldname [,fieldlen [,justify]]> */

		     commax = index (substr (bv_input, scan_start, fmt_length), ",");
		     if commax = 0
		     then do;
			comma_seen = "0"b;
			token_len = fmt_length - 1;
		     end;
		     else do;
			comma_seen = "1"b;
			token_len = commax - 1;
		     end;

		     field_index = lister_hash_fid_ (in_file_ptr, substr (bv_input, scan_start, token_len));
		     if field_index = -1
		     then if substr (bv_input, scan_start, token_len) = ":date"
			then field_index = PUT_DATE;
			else if substr (bv_input, scan_start, token_len) = ":time"
			then field_index = PUT_TIME;
			else if substr (bv_input, scan_start, token_len) = ":record_count"
			then field_index = PUT_RECORD_COUNT;
			else if substr (bv_input, scan_start, token_len) = ":uid"
			then field_index = PUT_UID;
			else do;
			     call check_for_arg;
			     if bv_code ^= 0 
				then return;
			end;
		     else field_arg_number = 0;

		     if (field_index >= 0) & (keyword_type ^= RECORD)
		     then do;
			bv_code = lister_codes_$listform_misplaced_fieldname;
			bv_error_token = substr (bv_input, scan_start, token_len)||NL||"Error in line "||ltrim (char (line_no))||".";
			return;
		     end;

		     call bump_line_no (scan_start, token_len);
		     scan_start = scan_start + token_len;
						/* step over fieldname */
		     fmt_length = fmt_length - token_len;
						/* reduce format length */

		     if comma_seen
		     then do;
			scan_start = scan_start + 1;
			fmt_length = fmt_length - 1;
		     end;

/* Fieldname scanned, check for field width */

		     commax = index (substr (bv_input, scan_start, fmt_length), ",");
		     if commax = 0
		     then do;
			comma_seen = "0"b;
			token_len = fmt_length - 1;
		     end;
		     else do;
			comma_seen = "1"b;
			token_len = commax - 1;
		     end;

		     if token_len > 0
		     then do;
			field_width = cv_dec_check_ (substr (bv_input, scan_start, token_len), code);
			if code ^= 0 | field_width < 0
			then do;
			     bv_code = lister_codes_$listform_bad_width;
			     bv_error_token = substr (bv_input, scan_start, token_len)||NL||"Error in line "||ltrim (char (line_no))||".";
			     return;
			end;
		     end;
		     else field_width = 0;

		     call bump_line_no (scan_start, token_len);
		     scan_start = scan_start + token_len;
		     fmt_length = fmt_length - token_len;

		     if comma_seen
		     then do;
			scan_start = scan_start + 1;
			fmt_length = fmt_length - 1;
		     end;

/* Width scanned, check for justification */

		     token_len = fmt_length - 1;

		     if token_len > 0
		     then do;
			c = substr (bv_input, scan_start, 1);

			if ((c = "l") | (c = "L")) & token_len = 1
			then field_justification = flush_left;
			else if ((c = "r") | (c = "R")) & token_len = 1
			then field_justification = flush_right;
			else if ((c = "c") | (c = "C")) & token_len = 1
			then field_justification = center;
			else do;
			     bv_code = lister_codes_$listform_bad_justify;
			     bv_error_token = substr (bv_input, scan_start, token_len)||NL||"Error in line "||ltrim (char (line_no))||".";
			     return;
			end;
		     end;
		     else field_justification = flush_left;

		     call bump_line_no (scan_start, fmt_length);
		     scan_start = scan_start + fmt_length;
						/* step over rest of format */

		     fmtx = fmtx + 1;
		     if fmtx > hbound (format_table.item, 1)
		     then call reallocate_format_table;

		     format_table.item (fmtx).action = field_index;
		     format_table.item (fmtx).width = field_width;
		     format_table.item (fmtx).justification = field_justification;
		     format_table.item (fmtx).argument_number = field_arg_number;
		end;
	     end;					/* do while (^done) */

reallocate_format_table:
	     procedure ();

/* automatic */

declare  fmx fixed bin,
         new_format_table_ptr
         ptr;

/* program */

		n = format_table.size + 50;
		allocate format_table in (system_area) set (new_format_table_ptr);

		new_format_table_ptr -> format_table.size = n;
		new_format_table_ptr -> format_table.before = format_table.before;
		new_format_table_ptr -> format_table.after = format_table.after;
		new_format_table_ptr -> format_table.record = format_table.record;
		new_format_table_ptr -> format_table.literal_table = format_table.literal_table;

		do fmx = 1 to format_table.size;
		     new_format_table_ptr -> format_table.item (fmx) = format_table.item (fmx);
		end;

		n = format_table.size;
		free format_table in (system_area);
		format_table_ptr = new_format_table_ptr;
		return;

	     end reallocate_format_table;

reallocate_literal_table:
	     procedure ();

/* automatic */

declare  ltx fixed bin,
         new_ltp ptr;

/* program */

		n = literal_table.size + 50;
		allocate literal_table in (system_area) set (new_ltp);

		new_ltp -> literal_table.size = n;
		new_ltp -> literal_table.n_literals = literal_table.n_literals;

		do ltx = 1 to literal_table.size;
		     new_ltp -> literal_table.literal (ltx) = literal_table.literal (ltx);
		end;

		n = literal_table.size;
		free literal_table in (system_area);

		ltp = new_ltp;
		format_table.literal_table = ltp;
		return;

	     end reallocate_literal_table;


save_literal:
	     procedure (bv_lit_start, bv_lit_length) returns (fixed bin);

/* parameters */

declare (
         bv_lit_start fixed bin (21),
         bv_lit_length fixed bin (21)
         ) parameter;

/* automatic */

declare  found bit (1) aligned,
         new_litx fixed bin;

/* program */

		found = "0"b;
		do new_litx = 1 to litx while (^found);
		     if length (literal_table.literal (new_litx) -> atom) = bv_lit_length
		     then if literal_table.literal (new_litx) -> atom = substr (bv_input, bv_lit_start, bv_lit_length)
			then found = "1"b;
		end;

		if ^found
		then do;
		     atom_length = bv_lit_length;
		     allocate atom in (system_area) set (atomp);
		     atom = substr (bv_input, bv_lit_start, bv_lit_length);
		     new_litx, litx = litx + 1;
		     if litx > hbound (literal_table.literal, 1)
		     then call reallocate_literal_table;

		     literal_table.literal (new_litx) = atomp;
		     literal_table.n_literals = literal_table.n_literals + 1;
		end;
		else new_litx = new_litx - 1;

		return (new_litx);

	     end save_literal;

	end					/* parse_block */;


bump_line_no:
	procedure (bv_scan_start, bv_bump_amt);

						/* parameters */

declare (
         bv_scan_start fixed bin (21),
         bv_bump_amt fixed bin (21)
         ) parameter;

						/* automatic */

declare  offset fixed bin,
         index_cnt fixed bin;

						/* program */

	     offset = 0;
	     index_cnt = index (substr (bv_input, bv_scan_start + offset, bv_bump_amt - offset), NL);
	     do while (index_cnt ^= 0);
		line_no = line_no + 1;
		offset = offset + index_cnt;
		index_cnt = index (substr (bv_input, bv_scan_start + offset, bv_bump_amt - offset), NL);
	     end;

	end bump_line_no;

check_for_arg:
	     proc;

               if token_len > 4 & token_len < 10
		then if substr (bv_input, scan_start, 4) = ":arg" & token_len < 10
		then do;
		field_index = PUT_ARGUMENT;
		field_arg_number =
		     cv_dec_check_ (substr (bv_input, scan_start + 4, token_len - 4), code);
		if code ^= 0 | field_arg_number < 0
		     then do;
		     bv_code = lister_codes_$listform_bad_arg_number;
		     bv_error_token = substr (bv_input, scan_start + 4, token_len - 4)
			||NL||"Error in line "||ltrim (char (line_no))||".";
		end;
		return;
	     end;
	     if token_len > 9 
		then if substr (bv_input, scan_start, 9) = ":argument"
		then do;
		field_index = PUT_ARGUMENT;
		field_arg_number =
		     cv_dec_check_ (substr (bv_input, scan_start + 9, token_len - 9), code);
		if code ^= 0 | field_arg_number < 0
		     then do;
		     bv_code = lister_codes_$listform_bad_arg_number;
		     bv_error_token = substr (bv_input, scan_start + 9, token_len - 9)||NL||"Error in line "||ltrim (char (line_no))||".";
		end;
		return;
	     end;
	     bv_code = lister_codes_$listform_unknown_fieldname;
	     bv_error_token = substr (bv_input, scan_start, token_len)||NL||"Error in line "||ltrim (char (line_no))||".";

	end check_for_arg;

     end						/* lister_format_parse_ */;
