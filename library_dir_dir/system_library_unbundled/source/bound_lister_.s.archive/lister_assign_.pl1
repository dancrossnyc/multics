/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* Program to assign specific value to specified field(s) in lister record(s).

   Written by Paul W. Benjamin, August 13, 1980.
   Modified 811022 by PB to not allocate null fields.
*/

lister_assign_:
     procedure (bv_in_file_ptr, bv_select_all, bv_selected_records_ptr, bv_assign_info_ptr) options (packed_decimal);

/* parameters */

declare (
         bv_in_file_ptr ptr,
         bv_select_all bit (1) aligned,
         bv_selected_records_ptr ptr,
         bv_assign_info_ptr ptr
         ) parameter;

						/* automatic */

declare (
         assign_info_ptr ptr,
         i fixed bin,
         j fixed bin,
         select_all bit (1) aligned,
         selected_records_ptr ptr
         );

						/* based */

declare  assign_string char (assign_length (j)) based (assign_ptr (j));

declare 1 assign_info (0:field_table.max_field_index) aligned based (assign_info_ptr),
        2 assign_ptr ptr,
        2 assign_length fixed bin (21);

						/* builtin */

declare (hbound, lbound, null)
         builtin;

						/* include file */

%include lister_structures;

/* main program */

	in_file_ptr = bv_in_file_ptr;			/* Copy arguments */
	select_all = bv_select_all;
	selected_records_ptr = bv_selected_records_ptr;
	assign_info_ptr = bv_assign_info_ptr;

	field_table_ptr = input_file.field_table_offset;

	if select_all
	then do recordp = input_file.record_head repeat input_record.next while (recordp ^= null);
	     do j = 0 to field_table.max_field_index;	/* modify all records */
		if assign_ptr (j) ^= null
		then do;
		     if input_record.field (j) ^= null	/* free old field */
		     then do;
			free input_record.field (j) -> atom;
			input_record.field (j) = null;
		     end;
		     atom_length = assign_length (j);
		     if atom_length ^= 0		/* allocate if non-null */
			then do;
			allocate atom in (input_file.area) set (atomp);
			input_record.field (j) = atomp;
			atom = assign_string;
		     end;
		end;
	     end;
	end;
	else if selected_records_ptr ^= null
	then do i = lbound (selected_records_ptr -> list_node.list (*), 1)
		to hbound (selected_records_ptr -> list_node.list (*), 1);
	     do j = 0 to field_table.max_field_index;	/* modify selected records */
		if assign_ptr (j) ^= null ()
		then do;
		     recordp = selected_records_ptr -> list_node.list (i);
		     if input_record.field (j) ^= null
		     then do;
			free input_record.field (j) -> atom;
			input_record.field (j) = null;
		     end;
		     atom_length = assign_length (j);
		     if atom_length ^= 0
			then do;
			allocate atom in (input_file.area) set (atomp);
			input_record.field (j) = atomp;
			atom = assign_string;
		     end;
		end;
	     end;
	end;
     end;

