/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* LISTER_COPY_FILE_HEAD_ - Program to copy the "header" of a Lister file.

   Written 750712 by PG
   Modified 761115 by PG to rename from assist_copy_file_head_ to lister_copy_file_head_
   Modified 800825 by PB to change to lister file version 2 and assign value to next_uid.
*/

/* format: style3 */
lister_copy_file_head_:
     procedure (bv_in_file_ptr, bv_out_file_ptr) options (packed_decimal);

/* parameters */

dcl (bv_in_file_ptr, bv_out_file_ptr)
     ptr parameter;

/* automatic */

dcl (out_fidp, in_ftp, in_fidp)
     ptr,
     fieldx fixed bin,
     code fixed bin (35);

/* builtins */

dcl (empty, hbound, null, nullo, offset, pointer)
     builtin;

/* entries */

dcl  hcs_$truncate_seg entry (ptr, fixed bin (18), fixed bin (35));

/* include files */

%include lister_entries;
%include lister_structures;

/* program */

	in_file_ptr = bv_in_file_ptr;
	out_file_ptr = bv_out_file_ptr;

	call hcs_$truncate_seg (out_file_ptr, 0, code);

	output_file.area = empty ();
	output_file.record_head = null;
	output_file.record_tail = null;
	output_file.unused (1) = null;
	output_file.unused (2) = null;
	output_file.next_uid = 1;
	output_file.version = lister_file_version_2;
	output_file.n_records = 0;

	in_ftp = input_file.field_table_offset;
	n = hbound (in_ftp -> field_table.index_to_field_id, 1);
	allocate field_table in (output_file.area) set (field_table_ptr);
	output_file.field_table_offset = field_table_ptr;

	field_table.record_delimiter = in_ftp -> field_table.record_delimiter;
	field_table.field_delimiter = in_ftp -> field_table.field_delimiter;
	field_table.hash_field_id_to_index (*) = nullo;

	do fieldx = MIN_FIELD_INDEX to field_table.max_field_index;
	     in_fidp = pointer (in_ftp -> field_table.index_to_field_id (fieldx), input_file.area);
	     out_fidp = lister_hash_fid_$enter (out_file_ptr, (in_fidp -> field_identifier.string));
	     field_table.index_to_field_id (fieldx) = offset (out_fidp, output_file.area);
	     out_fidp -> field_identifier.field_index = fieldx;
	end;

	return;

     end;
