/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1981 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

e_argument_parse_: procedure (P_arglist, P_name, P_code);

/* Modified: 25 November 1983 by B. Margolin to add -shared_static */
/* Modified: 2 November 1984 by B. Margolinto add -force/-no_force */

/* Parameters */
dcl  P_arglist pointer parameter;
dcl  P_code fixed bin (35);
dcl  P_name character (*) parameter;
dcl  P_type fixed bin parameter;

/* System Entries */
dcl  com_err_ entry() options(variable);
dcl  cu_$arg_count_rel entry (fixed bin, ptr, fixed bin(35));
dcl  cu_$arg_ptr_rel entry (fixed bin, ptr, fixed bin(21), fixed bin(35), ptr);
dcl  cv_dec_check_ entry (char(*), fixed bin(35)) returns(fixed bin(35));
dcl  get_system_free_area_ entry() returns(ptr);

/* Based */
dcl  arg character (al) based (ap);
dcl  area area based (area_ptr);

/* Automatic */
dcl  al fixed bin (21);
dcl  ap pointer;
dcl  area_ptr pointer;
dcl  code fixed bin (35);
dcl  idx fixed bin;
dcl  nargs fixed bin;
dcl  temp_path character (168);
dcl  temp_ptr pointer;
dcl  temp_type fixed bin;

/* External */
dcl  error_table_$badopt fixed bin(35) ext static;
dcl  error_table_$bad_conversion fixed bin(35) ext static;

/* Static */
dcl  path_pointer pointer static internal initial (null ());

/* Builtin */
dcl (null, substr) builtin;

/* Include Files */
%include emacs_data;

	emacs_data_ptr = e_find_invocation_ ();

	/* Defaultify arguments. */
	emacs_data.arguments.task = "0"b;
	emacs_data.arguments.no_task = "0"b;
	emacs_data.arguments.destroy_task = "0"b;
	emacs_data.arguments.shared_static = "0"b;
	emacs_data.arguments.query = "0"b;
	emacs_data.arguments.reset = "0"b;
	emacs_data.arguments.ns = "0"b;
	emacs_data.arguments.apply = -1;
	emacs_data.arguments.pl = -1;
	emacs_data.arguments.ll = -1;
	emacs_data.arguments.ls = -1;
	emacs_data.arguments.path_count = 0;
	emacs_data.arguments.ttp = "";
	emacs_data.arguments.first_path = null ();
	emacs_data.arguments.force = "0"b;

	/* Clear flags and IOCB pointers. */
	emacs_data.flags.new_arguments = "1"b;
	emacs_data.flags.using_video = "0"b;
	if ^emacs_data.flags.debugging
	     & ^emacs_data.tasking.task_flags.in_task then do;
	     emacs_data.output_iocb, emacs_data.input_iocb = null ();
	end;

	P_code = 0;
	area_ptr = get_system_free_area_ ();

	call cu_$arg_count_rel (nargs, P_arglist, code);
	if code ^= 0 then do;
	     P_code = code;
	     call com_err_ (code, P_name);
	     return;
	end;

	do idx = 1 to nargs;
	     call get_argument (idx, "");

	     if index (arg, "-") ^= 1 then do;		/* not control arg */
		allocate path in (area) set (temp_ptr);
		if emacs_data.arguments.path_count = 0
		     then emacs_data.arguments.first_path = temp_ptr;
		else path_pointer -> path.next_path = temp_ptr;
		path_pointer = temp_ptr;
		emacs_data.arguments.path_count =
		     emacs_data.arguments.path_count + 1;
		path_pointer -> path.name = arg;
		path_pointer -> path.type = FIND_PATH;
	     end;

	     else if arg = "-no_start_up" | arg = "-no_startup" | arg = "-ns"
		then emacs_data.arguments.ns = "1"b;

	     else if arg = "-reset" then do;
		emacs_data.arguments.ttp = "";
		emacs_data.arguments.query = "0"b;
		emacs_data.arguments.reset = "1"b;
	     end;

	     else if arg = "-query" then do;
		emacs_data.arguments.ttp = "";
		emacs_data.arguments.reset = "0"b;
		emacs_data.arguments.query = "1"b;
	     end;

	     else if arg = "-terminal_type" | arg = "-ttp" then do;
		idx = idx + 1;
		call get_argument (idx, "Terminal type.");
		emacs_data.arguments.ttp = arg;
		emacs_data.arguments.reset = "0"b;
		emacs_data.arguments.query = "0"b;
	     end;

	     else if arg = "-macros" | arg = "-macro" | arg = "-mc" then do;
		idx = idx + 1;
		call get_argument (idx, "Macro file pathname.");
		allocate path in (area) set (temp_ptr);
		if emacs_data.arguments.path_count = 0
		     then emacs_data.arguments.first_path = temp_ptr;
		else path_pointer -> path.next_path = temp_ptr;
		path_pointer = temp_ptr;
		emacs_data.arguments.path_count = 
		     emacs_data.arguments.path_count + 1;
		path_pointer -> path.name = arg;
		path_pointer -> path.type = MACRO_PATH;
	     end;

	     else if arg = "-line_length" | arg = "-ll" then do;
		idx = idx + 1;
		emacs_data.arguments.ll =
		     get_numeric_argument (idx, "line length.");
	     end;

	     else if arg = "-page_length" | arg = "-pl" then do;
		idx = idx + 1;
		emacs_data.arguments.pl =
		     get_numeric_argument (idx, "page length.");
	     end;

	     else if arg = "-apply" | arg = "-ap" then do;
		idx, emacs_data.arguments.apply = idx + 1;
		call get_argument (idx, "Argument after -apply.");
		idx = nargs;
	     end;

	     else if arg = "-task" then do;
		emacs_data.arguments.task = "1"b;
		emacs_data.arguments.no_task = "0"b;
	     end;

	     else if arg = "-no_task" | arg = "-ntk" then do;
		emacs_data.arguments.task = "0"b;
		emacs_data.arguments.no_task = "1"b;
	     end;

	     else if arg = "-destroy_task" | arg = "-dtk" then do;
		emacs_data.arguments.destroy_task = "1"b;
	     end;

	     else if arg = "-shared_static" | arg = "-sst" then
		emacs_data.arguments.shared_static = "1"b;

	     else if arg = "-no_shared_static" | arg = "-nsst" then
		emacs_data.arguments.shared_static = "0"b;

	     else if arg = "-line_speed" | arg = "-ls" then do;
		idx = idx + 1;
		emacs_data.arguments.ls =
		     get_numeric_argument (idx, "line speed.");
	     end;

	     else if arg = "-force" | arg = "-fc" then emacs_data.arguments.force = "1"b;

	     else if arg = "-no_force" | arg = "-nfc" then emacs_data.arguments.force = "0"b;

	     else do;
		P_code = error_table_$badopt;
		call com_err_ (error_table_$badopt, P_name, "^a", arg);
	     end;
	end;

	if emacs_data.arguments.path_count > 0
	     then path_pointer -> path.next_path = null ();
	path_pointer = emacs_data.arguments.first_path;

returner:
	return;

subroutine: entry (P_iocbp, P_pathname, P_environment, P_info_ptr);

dcl (P_iocbp, P_info_ptr) pointer;
dcl (P_pathname, P_environment) character (*) parameter;

	emacs_data_ptr = e_find_invocation_ ();

	/* Defaultify arguments. */
	emacs_data.arguments.task = "0"b;
	emacs_data.arguments.no_task = "0"b;
	emacs_data.arguments.destroy_task = "0"b;
	emacs_data.arguments.shared_static = "0"b;
	emacs_data.arguments.query = "0"b;
	emacs_data.arguments.reset = "0"b;
	emacs_data.arguments.ns = "0"b;
	emacs_data.arguments.apply = -1;
	emacs_data.arguments.pl = -1;
	emacs_data.arguments.ll = -1;
	emacs_data.arguments.ls = -1;
	emacs_data.arguments.ttp = "";
	emacs_data.arguments.first_path = null ();
	emacs_data.arguments.path_count = 0;

	emacs_data.flags.new_arguments = "1"b;
	emacs_data.status_code = 0;
	emacs_data.output_iocb, emacs_data.input_iocb = P_iocbp;
	emacs_data.info_ptr = P_info_ptr;

	area_ptr = get_system_free_area_ ();

	if P_environment ^= "" then do;
	     allocate path in (area) set (path_pointer);
	     path_pointer -> path.next_path =  null ();
	     path_pointer -> path.name = P_environment;
	     path_pointer -> path.type = MACRO_PATH;
	     emacs_data.arguments.first_path = path_pointer;
	     emacs_data.arguments.path_count = 1;
	end;

	if P_pathname ^= "" then do;
	     allocate path in (area) set (path_pointer);
	     path_pointer -> path.next_path = emacs_data.arguments.first_path;
	     path_pointer -> path.name = P_pathname;
	     path_pointer -> path.type = FIND_PATH;
	     emacs_data.arguments.first_path = path_pointer;
	     emacs_data.arguments.path_count = emacs_data.arguments.path_count + 1;
	end;

	return;

/* Entries to get specific values back to Lisp. */

/* P_what_to_do: 0=noarg, 1=reset, 2=query, 3=ttp in P_ttp, add 100 more
	       for -force. */
get_ttp_info: entry (P_what_to_do, P_ttp);

dcl  P_what_to_do fixed bin parameter;
dcl  P_ttp character (168);

	emacs_data_ptr = e_find_invocation_ ();

	P_what_to_do = 0;
	if emacs_data.arguments.reset then P_what_to_do = 1;
	else if emacs_data.arguments.query then P_what_to_do = 2;
	else if emacs_data.arguments.ttp ^= "" then P_what_to_do = 3;
	if emacs_data.arguments.force then P_what_to_do = P_what_to_do + 100;
	P_ttp = emacs_data.arguments.ttp;
	return;

get_startup_info: entry (P_run_startup, P_tasking, P_path_count, P_pl, P_ll, P_ls, P_apply_arg);

dcl (P_run_startup, P_tasking, P_path_count, P_pl, P_ll, P_ls, P_apply_arg) fixed bin parameter;

	emacs_data_ptr = e_find_invocation_ ();

	if emacs_data.arguments.ns then P_run_startup = 0;
	else P_run_startup = 1;
	if emacs_data.arguments.task then P_tasking = 1;
	else P_tasking = 0;
	P_path_count = emacs_data.arguments.path_count;
	P_pl = emacs_data.arguments.pl;
	P_ll = emacs_data.arguments.ll;
	P_ls = emacs_data.arguments.ls;
	P_apply_arg = emacs_data.arguments.apply;
	emacs_data.flags.new_arguments = "0"b;
	return;

get_one_path: entry (P_pathname, P_type);

	emacs_data_ptr = e_find_invocation_ ();

	P_pathname = "";
	if path_pointer = null () then return;
	P_pathname = path_pointer -> path.name;
	temp_ptr = path_pointer -> path.next_path;
	P_type = path_pointer -> path.type;
	free path_pointer -> path in (area);
	path_pointer = temp_ptr;
	return;

new_arguments: entry () returns (fixed bin);

	emacs_data_ptr = e_find_invocation_ ();

	if emacs_data.flags.new_arguments then return (1);
	else return (0);

/* INTERNAL PROCEDURES */

get_argument: procedure (P_which, P_complaint);

dcl  P_which fixed bin;
dcl  P_complaint character (*) parameter;

	call cu_$arg_ptr_rel (P_which, ap, al, code, P_arglist);
	if code ^= 0 then do;
	     P_code = code;
	     call com_err_ (code, P_name, "^a", P_complaint);
	     go to returner;
	end;
     end get_argument;

get_numeric_argument: procedure (P_which, P_complaint) returns (fixed bin);

dcl  P_which fixed bin;
dcl  P_complaint character (*) parameter;
dcl  answer fixed bin;

	call cu_$arg_ptr_rel (P_which, ap, al, code, P_arglist);
	if code ^= 0 then do;
	     P_code = code;
	     call com_err_ (code, P_name, "^a", P_complaint);
	     go to returner;
	end;
	answer = cv_dec_check_ (arg, code);
	if code ^= 0 then do;
	     P_code = error_table_$bad_conversion;
	     call com_err_ (P_code, P_name, "Expected integer, got ^a for ^a", arg, P_complaint);
	     go to returner;
	end;
	if answer < 1 then do;
	     P_code = 1;
	     call com_err_ (0, P_name, "Negative value not allowed for ^a (^a).", P_complaint, arg);
	     go to returner;
	end;
	return (answer);
     end get_numeric_argument;

end e_argument_parse_;
