/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


task_overseer_:
     procedure;

dcl  iox_$user_input ptr ext static;
dcl  iox_$user_output ptr ext static;
dcl  iox_$error_output ptr ext static;

dcl  continue_to_signal_ entry (fixed bin (35));
dcl  cu_$arg_list_ptr entry returns (ptr);
dcl  cu_$cp entry (ptr, fixed bin (21), fixed bin (35));
dcl  cu_$generate_call entry (entry, ptr);
dcl  cu_$set_cl_intermediary entry (entry);
dcl  find_condition_info_ entry (ptr, ptr, fixed bin (35));
dcl  hcs_$set_ips_mask entry (bit (36) aligned, bit (36) aligned);
dcl  iox_$move_attach entry (ptr, ptr, fixed bin (35));
dcl  signal_ entry;

dcl  based_ptr ptr based;

dcl  code fixed bin (35);
dcl  overseer bit (1) aligned;

dcl  (length, pointer, stackbaseptr) builtin;

dcl  (any_other, finish, task_debug_) condition;
%page;
	overseer = "1"b;

	on condition (any_other) system;
	on condition (finish), condition (task_debug_)
	     begin;
dcl  code fixed bin (35);
dcl  1 ci aligned like condition_info;
dcl  command char (256) aligned;

		call find_condition_info_ (null (), addr (ci), code);
		if code = 0 then do;
		     if ci.info_ptr ^= null () then do;
			if /* case */ ci.condition_name = "finish" then do;
			     if ci.info_ptr -> finish_info.type = "task" then goto abort_task;
			     end;
			else if ci.condition_name = "task_debug_" then do;
			     command = ci.info_ptr -> task_debug_info.info_string;
			     call cu_$cp (addr (command), length (ci.info_ptr -> task_debug_info.info_string), code)
				;
			     goto done_cond;
			     end;
			end;
		     end;
		call continue_to_signal_ (code);
done_cond:
	     end;

	goto common;
%page;
task_signaller_:
     entry options (variable);

	overseer = "0"b;

common:
	task_data_ptr = pointer (stackbaseptr (), TASK_DP) -> based_ptr;

	call cu_$set_cl_intermediary (task_data.cl_intermediary);
	call iox_$move_attach (task_data.ui_iocb, iox_$user_input, code);
	call iox_$move_attach (task_data.uo_iocb, iox_$user_output, code);
	call iox_$move_attach (task_data.eo_iocb, iox_$error_output, code);
	call hcs_$set_ips_mask (task_data.ips_mask, (""b));

	if overseer
	then call task_data.overseer (task_data.data_ptr);
	else call cu_$generate_call (signal_, cu_$arg_list_ptr ());

abort_task:
	return;
%page;
%include task_data;
%include task_create_data;
%include task_condition_info;
%include condition_info;

     end task_overseer_;
