/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4,delnl,insnl,tree,ifthenstmt,indnoniterend */
task_init_:
     procedure options (separate_static);

dcl  sys_info$max_seg_size fixed bin (19) external;

dcl  define_area_ entry (ptr, fixed bin (35));
dcl  get_ring_ entry () returns (fixed bin (3));
dcl  hcs_$grow_lot entry (fixed bin (3));
dcl  ioa_$rsnnl entry () options (variable);
dcl  iox_$find_iocb entry (char (*), ptr, fixed bin (35));
dcl  task_ctl_$death entry;

dcl  foo static;
dcl  1 static_tasking_data aligned like tasking_data static;

dcl  i fixed bin;
dcl  code fixed bin (35);
dcl  task_name char (13);
dcl  old_rnt_areap ptr;
dcl  1 ai aligned like area_info;

dcl  1 abort_label_overlay aligned based (addr (task_data.abort)),
       2 code_ptr ptr,
       2 env_ptr ptr;

dcl  based_ptr ptr based;

dcl  rnt_areap ptr;
dcl  rnt_area area (sys_info$max_seg_size) based (rnt_areap);

dcl  (addr, addrel, pointer, size, stackbaseptr) builtin;

dcl  task_error_ condition;
%page;
	foo = 0;
	sb = stackbaseptr ();

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* Make sure that the LOT has been extended to its maximum size.  This is because	*/
/* grow_lot doesn't know about multiple stacks and would get confused.		*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	if stack_header.lot_ptr = sb then call hcs_$grow_lot (get_ring_ ());

	lotp = stack_header.lot_ptr;
	do i = 0 to stack_header.max_lot_size;		/* fault all the LOT pointers */
	     if unspec (lot.lp (i)) = ""b then unspec (lot.lp (i)) = lot_fault;
	end;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* Now do the same for the RNT.						*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	if stack_header.rnt_ptr -> rnt.rnt_area_size < sys_info$max_seg_size then do;
	     ai.version = area_info_version_1;
	     string (ai.control) = ""b;
	     ai.zero_on_free, ai.system = "1"b;
	     ai.owner = "RNT";
	     ai.size = sys_info$max_seg_size;
	     ai.areap = null ();
	     call define_area_ (addr (ai), code);
	     if code ^= 0 then signal task_error_;
	     rnt_areap = ai.areap;

	     old_rnt_areap = stack_header.rnt_ptr -> rnt.areap;
	     rnt_area = old_rnt_areap -> based_rnt_area;
	     rntp = addrel (rnt_areap, binary (rel (stack_header.rnt_ptr), 18) - binary (rel (old_rnt_areap), 18));
	     rnt.srulep = addrel (rnt_areap, binary (rel (rnt.srulep), 18) - binary (rel (old_rnt_areap), 18));
	     rnt.areap = rnt_areap;
	     rnt.rnt_area_size = size (rnt_area);
	     stack_header.rnt_ptr = rntp;
	     free old_rnt_areap -> based_rnt_area;
	     end;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* Now fill in the task data for the root task.					*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


	tasking_data_ptr_ = addr (static_tasking_data);

	pointer (sb, TASK_DP) -> based_ptr, task_data_ptr = addr (tasking_data.root_task_data);

	task_data.sb = sb;
	task_data.state = READY;
	task_data.comment = "Initial Task";
	task_data.mother, task_data.youngest_daughter, task_data.elder_sister, task_data.younger_sister,
	     task_data.ready_last, task_data.ready_next = null ();
	task_data.task_id = baseno (sb);
	abort_label_overlay.code_ptr = codeptr (task_ctl_$death);
	abort_label_overlay.env_ptr = stack_header.stack_begin_ptr;

	call ioa_$rsnnl ("^w.", task_name, (0), task_data.task_id);
	call iox_$find_iocb (task_name || "user_input", task_data.ui_iocb, code);
	call iox_$find_iocb (task_name || "user_output", task_data.uo_iocb, code);
	call iox_$find_iocb (task_name || "error_output", task_data.eo_iocb, code);

	tasking_data.ready_head, tasking_data.ready_tail = task_data_ptr;
	tasking_data.valid_tasks (binary (baseno (sb), 15)) = "1"b;
	return;
%page;
%include tasking_data;
%include area_info;
%include lot;
%include rnt;
%include stack_header;

     end task_init_;
