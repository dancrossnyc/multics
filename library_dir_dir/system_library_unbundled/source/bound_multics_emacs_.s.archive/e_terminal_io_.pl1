/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1981 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */
  

e_terminal_io_: procedure ();
	return;

/* Procedure to (eventually) contain all of the Emacs terminal IO control
   PL/I logic.

   23 November 1981, Richard Mark Soley
*/

/* Parameters */
dcl  P_terminal_type character (*) parameter;

/* System Entries */
dcl  mode_string_$get_mode entry (char(*), char(*), ptr, fixed bin(35));
dcl  ttt_info_$modes entry (char(*), char(*), fixed bin(35));

/* Builtin */
dcl (addr, translate) builtin;

/* Automatic */
dcl  code fixed bin (35);
dcl  modes character (512);
dcl  1 MV like mode_value aligned automatic;

/* Include Files */
%include mode_string_info;

/* Entry to check TTF and find out if the given terminal type is
   a printing terminal, so don't have to ask user.
   Returns 1 if DEFINITELY a printing terminal; 0 if DEFINITELY non-printing
   OR not certain. */

check_printing: entry (P_terminal_type) returns (fixed bin);

	MV.version = mode_value_version_3;

	call ttt_info_$modes (translate (P_terminal_type,
	     "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "abcdefghijklmnopqrstuvwxyz"),
	     modes, code);
	if code ^= 0 then return (0);

	call mode_string_$get_mode (modes, "pl", addr (MV), code);
	if code ^= 0 then return (0);

	if MV.flags.boolean_valuep then do;
	     if MV.flags.boolean_value then return (0);
	     else return (1);
	end;

	if MV.flags.numeric_valuep & (MV.numeric_value = 0) then return (1);

	return (0); /* END for check_printing */

end e_terminal_io_;
