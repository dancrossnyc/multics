" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

	name	task_alm_
"
"	That part of the tasking system that cannot be
"	written in PL/1.
"
"	Written by C. Hornig, April 1980
"
	segdef	switch_stacks
"
	tempd	task_proc(2)
"
	even
null_arglist:
	zero	0,4
	zero	0,0
"
" This macro defines an entrypoint which may be "pseudo-called"
" by task_ctl_. It is entered with its stack frame already set up.
"
	macro	task_tv
	segdef	&1_tv
	entry	&1
&1_tv:
&1:
	getlp
	sprilp	sp|stack_frame.lp_ptr
	eppbp	&1-*,ic
	spribp	sp|stack_frame.entry_ptr
	spbpsb	sp|0
	&end
"
" " " " " " " " " " " " " " " " " " " " " "
"
" This routine is entered when a task is first run.
" It is responsible for calling the task overseer
" on the new stack.
"
	task_tv	task_overseer
	eppap	null_arglist	" call task_overseer_ ();
	short_call task_overseer_$task_overseer_
	tra	task_ctl_$death	" call task_ctl_$death ();
"
" " " " " " " " " " " " " " " " " " " " " "
"
" This routine calls signal_ in a task.
"
	task_tv	task_signal_caller
	eppap	sp|stack_frame.arg_ptr,*
	short_call task_signaller_$task_signaller_
	return
"
" " " " " " " " " " " " " " " " " " " " "
"
" This routine switches from one task to another.
"
switch_stacks:
	epbpsb	sp|0
	sprisp	sb|stack_header.bar_mode_sp
	eppbb	ap|2,*
	epbpsb	bb|0,*
	eppsp	sb|stack_header.bar_mode_sp,*
	short_return
"
	include	stack_header
	include	stack_frame
"
	end
