/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1978 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* Utility routines for manipulating Multics files from Emacs */


/****^  HISTORY COMMENTS:
  1) change(79-07-28,Palter), approve(), audit(),
     install(86-08-20,MR12.0-1136):
     Initial coding.
  2) change(86-01-17,Margolin), approve(86-01-17,MCR7325),
     audit(86-08-12,Harvey), install(86-08-20,MR12.0-1136):
     Added force_msf_access, restore_msf_access, star_list_init,
     nth_star_match, star_list_cleanup, get_dtcm, get_dtcm_file entrypoints.
     Upgraded code in the force_access and restore_access entrypoints, to
     establish proper cleanup handlers, use standard include file structures,
     and to use named constants.  Sorted the declarations.
                                                   END HISTORY COMMENTS */


/* format: style2,ifthenstmt,ifthendo,ifthen,^indnoniterdo,indcomtxt,^inditerdo,idind22 */

e_multics_files_util_:
     procedure ();

	return;					/* not an entry */

	/*** Parameter ***/

	dcl     P_abs_pathname	character (*) parameter;
	dcl     P_code		fixed binary (35) parameter;
	dcl     P_component		char (*) parameter;
	dcl     P_count		fixed bin parameter;
	dcl     P_dir		char (*) parameter;
	dcl     P_dtcm		fixed bin (35) parameter;
	dcl     P_entry		char (*) parameter;
	dcl     P_fcb_ptr		ptr parameter;
	dcl     P_protect_info_ptr	pointer parameter;
	dcl     P_seg_ptr		pointer parameter;
	dcl     P_starname_info_ptr	pointer parameter;

	/*** Automatic ***/

	dcl     code		fixed bin (35);
	dcl     1 dacl		aligned like general_delete_acl_entry;
						/* entry to delete */
	dcl     dates_array		(2) bit (36);
	dcl     dirname		character (168);
	dcl     ename		character (32);
	dcl     1 new_acl		aligned like general_extended_acl_entry;
						/* entry to add/replace */
	dcl     protect_info_ptr	pointer;
	dcl     star_component	bit (1) aligned;	/* does the component name have "*" or "?" */
	dcl     star_entry		bit (1) aligned;	/* does the entryname have "*" or "?" */
	dcl     star_star_component	bit (1) aligned;	/* is the componentname "**" */
	dcl     starname_index	fixed bin;
	dcl     starname_info_max_entries
				fixed bin;
	dcl     starname_info_ptr	ptr;
	dcl     system_area_ptr	pointer;

	/*** Based ***/

	dcl     1 protect_info	aligned based (protect_info_ptr),
						/* remember how we forced access */
		2 dirname		character (168) unaligned,
		2 ename		character (32) unaligned,
		2 delete_the_acl	bit (1),		/* ON => we added ACL term */
		2 acl		like general_extended_acl_entry;
	dcl     1 protect_msf_info	aligned based (protect_info_ptr),
						/* remember how we forced access */
		2 delete_the_acl	bit (1),		/* ON => we added ACL term */
		2 acl		like general_extended_acl_entry;
	dcl     1 starname_info	aligned based (starname_info_ptr),
		2 header,
		  3 max_entries	fixed bin,	/* size of the array */
		  3 n_entries	fixed bin init (0), /* how many are used */
		2 names		(starname_info_max_entries refer (starname_info.max_entries)),
		  3 (entry, component)
				char (32) unaligned;
	dcl     system_area		area based (system_area_ptr);

	/*** Static ***/

	dcl     (
	        error_table_$argerr,
	        error_table_$nomatch,
	        error_table_$user_not_found
	        )			fixed binary (35) external static;

	/*** Builtin ***/

	dcl     (addr, binary, divide, null, unspec)
				builtin;

	/*** Condition ***/

	dcl     cleanup		condition;

	/*** External Entry ***/

	dcl     archive_$list_components
				entry (ptr, fixed bin (24), fixed bin, ptr, ptr, fixed bin, fixed bin (35));
	dcl     check_star_name_$entry
				entry (char (*), fixed bin (35));
	dcl     expand_pathname_	entry (character (*), character (*), character (*), fixed binary (35));
	dcl     get_group_id_	entry () returns (character (32));
	dcl     get_system_free_area_ entry () returns (pointer);
	dcl     hcs_$add_acl_entries	entry (character (*), character (*), pointer, fixed binary, fixed binary (35));
	dcl     hcs_$delete_acl_entries
				entry (character (*), character (*), pointer, fixed binary, fixed binary (35));
	dcl     hcs_$get_dates	entry (char (*), char (*), (*) bit (36), fixed bin (35));
	dcl     hcs_$get_dates_ptr	entry (ptr, (*) bit (36), fixed bin (35));
	dcl     hcs_$list_acl	entry (character (*), character (*), pointer, pointer, pointer, fixed binary,
				fixed binary (35));
	dcl     hcs_$star_dir_list_	entry (char (*), char (*), fixed bin (3), ptr, fixed bin, fixed bin, ptr, ptr,
				fixed bin (35));
	dcl     initiate_file_	entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
	dcl     initiate_file_$component
				entry (char (*), char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35))
				;
	dcl     match_star_name_	entry (char (*), char (*), fixed bin (35));
	dcl     msf_manager_$acl_add	entry (ptr, ptr, fixed bin, fixed bin (35));
	dcl     msf_manager_$acl_delete
				entry (ptr, ptr, fixed bin, fixed bin (35));
	dcl     msf_manager_$acl_list entry (ptr, ptr, ptr, ptr, fixed bin, fixed bin (35));
	dcl     terminate_file_	entry (ptr, fixed bin (24), bit (*), fixed bin (35));

%page;

/* This entry forces read/write access to the specified file */

force_access:
     entry (P_abs_pathname, P_protect_info_ptr, P_code);

	call expand_pathname_ (P_abs_pathname, dirname, ename, P_code);
	if P_code ^= 0 then return;			/* shouldn't happen */

	system_area_ptr = get_system_free_area_ ();

	protect_info_ptr = null ();
	on cleanup
	     begin;
		if protect_info_ptr ^= null () then free protect_info;
	     end;
	allocate protect_info in (system_area) set (protect_info_ptr);

	protect_info.dirname = dirname;
	protect_info.ename = ename;

	protect_info.acl.access_name = get_group_id_ ();

	call hcs_$list_acl (dirname, ename, null (), null (), addr (protect_info.acl), 1, P_code);
	if P_code ^= 0 then do;			/* couldn't list it */
	     free protect_info in (system_area);
	     return;
	end;

	if protect_info.acl.status_code = error_table_$user_not_found then
	     protect_info.delete_the_acl = "1"b;	/* must add the entry */
	else protect_info.delete_the_acl = "0"b;

	new_acl.access_name = protect_info.acl.access_name;
	new_acl.mode = RW_ACCESS;
	new_acl.extended_mode = ""b;

	on cleanup
	     begin;
		if protect_info_ptr ^= null () then do;
		     call restore_access (protect_info_ptr);
		     free protect_info;
		end;
	     end;

	call hcs_$add_acl_entries (dirname, ename, addr (new_acl), 1, P_code);

	if P_code ^= 0 then do;			/* couldn't add it */
	     free protect_info in (system_area);
	     P_protect_info_ptr = null ();
	     if P_code = error_table_$argerr then P_code = new_acl.status_code;
						/* no true info here */
	end;

	else do;					/* success */
	     P_protect_info_ptr = protect_info_ptr;
	end;

	return;

/**/

/* This entry restores the access on a segment to its original state */

restore_access:
     entry (P_protect_info_ptr);

	if P_protect_info_ptr = null () then return;

	protect_info_ptr = P_protect_info_ptr;
	P_protect_info_ptr = null ();

	if protect_info.delete_the_acl then do;
	     dacl.access_name = protect_info.acl.access_name;
	     call hcs_$delete_acl_entries (protect_info.dirname, protect_info.ename, addr (dacl), 1, (0));
	end;

	else call hcs_$add_acl_entries (protect_info.dirname, protect_info.ename, addr (protect_info.acl), 1, (0));

	system_area_ptr = get_system_free_area_ ();

	free protect_info in (system_area);

	return;
%page;

/* This entry forces read/write access to the specified MSF/SSF */

force_msf_access:
     entry (P_fcb_ptr, P_protect_info_ptr, P_code);

	system_area_ptr = get_system_free_area_ ();

	protect_info_ptr = null ();
	on cleanup
	     begin;
		if protect_info_ptr ^= null () then free protect_msf_info;
	     end;
	allocate protect_msf_info in (system_area) set (protect_info_ptr);

	protect_msf_info.acl.access_name = get_group_id_ ();

	call msf_manager_$acl_list (P_fcb_ptr, null (), null (), addr (protect_msf_info.acl), 1, P_code);
	if P_code ^= 0 then do;			/* couldn't list it */
	     free protect_msf_info in (system_area);
	     return;
	end;

	if protect_msf_info.acl.status_code = error_table_$user_not_found then
	     protect_msf_info.delete_the_acl = "1"b;	/* must add the entry */
	else protect_msf_info.delete_the_acl = "0"b;

	new_acl.access_name = protect_msf_info.acl.access_name;
	new_acl.mode = RW_ACCESS;
	new_acl.extended_mode = ""b;

	on cleanup
	     begin;
		if protect_info_ptr ^= null () then do;
		     call restore_msf_access (P_fcb_ptr, protect_info_ptr);
		     free protect_msf_info;
		end;
	     end;

	call msf_manager_$acl_add (P_fcb_ptr, addr (new_acl), 1, P_code);

	if P_code ^= 0 then do;			/* couldn't add it */
	     free protect_msf_info in (system_area);
	     P_protect_info_ptr = null ();
	     if P_code = error_table_$argerr then P_code = new_acl.status_code;
						/* no true info here */
	end;

	else do;					/* success */
	     P_protect_info_ptr = protect_info_ptr;
	end;

	return;

%page;

/* This entry restores the access on an MSF to its original state */

restore_msf_access:
     entry (P_fcb_ptr, P_protect_info_ptr);

	if P_fcb_ptr = null () then do;
	     if P_protect_info_ptr ^= null () then free P_protect_info_ptr -> protect_msf_info;
	     return;
	end;
	if P_protect_info_ptr = null () then return;

	protect_info_ptr = P_protect_info_ptr;
	P_protect_info_ptr = null ();

	if protect_msf_info.delete_the_acl then do;
	     dacl.access_name = protect_msf_info.acl.access_name;
	     call msf_manager_$acl_delete (P_fcb_ptr, addr (dacl), 1, (0));
	end;

	else call msf_manager_$acl_add (P_fcb_ptr, addr (protect_msf_info.acl), 1, (0));

	free protect_msf_info;

	return;
%page;

star_list_init:
     entry (P_dir, P_entry, P_component, P_starname_info_ptr, P_count, P_code);

	P_code = 0;
	P_count = 0;
	P_starname_info_ptr = null ();

	starname_info_ptr, star_list_branch_ptr, star_list_names_ptr = null ();
	on cleanup
	     begin;
		if starname_info_ptr ^= null then free starname_info;
		if star_list_names_ptr ^= null then free star_list_names;
		if star_list_branch_ptr ^= null then free star_dir_list_branch;
	     end;

	code = 0;
	call check_star_name_$entry (P_entry, code);
	if code = 0 then star_entry = "0"b;
	else if code > 2 then do;
	     P_code = code;
	     return;
	end;
	else star_entry = "1"b;

	if P_component = "" then
	     star_component = "0"b;
	else do;
	     call check_star_name_$entry (P_component, code);
	     if code = 0 then star_component = "0"b;
	     else if code > 2 then do;
		P_code = code;
		return;
	     end;
	     else do;
		star_component = "1"b;
		star_star_component = (code = 2);
	     end;
	end;

	system_area_ptr = get_system_free_area_ ();

	if ^star_entry & ^star_component then do;	/* simple, common case */
	     starname_info_max_entries = 1;
	     allocate starname_info in (system_area);
	     starname_info.n_entries = 1;
	     starname_info.names (1).entry = P_entry;
	     starname_info.names (1).component = P_component;
	     P_starname_info_ptr = starname_info_ptr;
	     P_count = 1;
	     return;
	end;

	star_select_sw = star_BRANCHES_ONLY;
	call hcs_$star_dir_list_ (P_dir, P_entry, star_select_sw, get_system_free_area_ (), star_branch_count,
	     star_link_count, star_list_branch_ptr, star_list_names_ptr, P_code);
	if P_code ^= 0 then return;

	if P_component = "" then
	     call star_list_files ();
	else call star_list_archives ();

	if P_code = 0 then do;
	     P_starname_info_ptr = starname_info_ptr;
	     P_count = starname_info.n_entries;
	end;
	else free starname_info;

	free star_list_names;
	free star_dir_list_branch;

	return;

star_list_files:
     proc ();

	starname_info_max_entries = star_branch_count;
	allocate starname_info in (system_area);
	do starname_index = 1 to star_branch_count;
	     if star_dir_list_branch (starname_index).type = star_SEGMENT
		| star_dir_list_branch (starname_index).bit_count > 1 /* MSF */ then do;
		starname_info.n_entries = starname_info.n_entries + 1;
		starname_info.names (starname_info.n_entries).entry =
		     star_list_names (star_dir_list_branch (starname_index).nindex);
		starname_info.names (starname_info.n_entries).component = "";
	     end;
	end;

	return;

star_list_archives:
     entry ();

	if star_component then			/* just a guess, we'll grow it if necessary */
	     if star_star_component then
		starname_info_max_entries = 15 * star_branch_count;
	     else starname_info_max_entries = 5 * star_branch_count;
	else starname_info_max_entries = star_branch_count;
						/* maximum one per archive */
	allocate starname_info in (system_area);
	do starname_index = 1 to star_branch_count;
	     if star_dir_list_branch (starname_index).type = star_SEGMENT /* no MSF archives */ then
		call star_list_components (star_list_names (star_dir_list_branch (starname_index).nindex));
	end;

	if starname_info.n_entries = 0 then P_code = error_table_$nomatch;

	return;

star_list_components:
     proc (archive_entry);

	dcl     archive_entry	char (*) parameter;

	dcl     archive_bc		fixed bin (24);
	dcl     1 archive_component_info_array
				(n_components) based (archive_component_info_array_ptr) aligned
				like archive_component_info;
	dcl     archive_component_info_array_ptr
				ptr;
	dcl     archive_ptr		ptr;
	dcl     code		fixed bin (35);
	dcl     component_index	fixed bin;
	dcl     n_components	fixed bin;


	archive_component_info_array_ptr, archive_ptr = null ();
	on cleanup
	     begin;
		if archive_component_info_array_ptr ^= null () then free archive_component_info_array;
		if archive_ptr ^= null () then call terminate_file_ (archive_ptr, 0, TERM_FILE_TERM, (0));
	     end;

	if star_component then do;			/* foo*::bar* */
	     call initiate_file_ (P_dir, archive_entry, R_ACCESS, archive_ptr, archive_bc, code);
	     if code ^= 0 then return;		/* skip this one */
	     call archive_$list_components (archive_ptr, archive_bc, ARCHIVE_COMPONENT_INFO_VERSION_1, system_area_ptr,
		archive_component_info_array_ptr, n_components, code);
	     if code ^= 0 then go to star_list_components_EXIT;

	     if star_star_component then
		do component_index = 1 to n_components;
		call star_list_comp_add (archive_entry, archive_component_info_array (component_index).name);
	     end;
	     else do component_index = 1 to n_components;
		call match_star_name_ (archive_component_info_array (component_index).name, P_component, code);
		if code = 0 then
		     call star_list_comp_add (archive_entry, archive_component_info_array (component_index).name);
		else code = 0;
	     end;

	     free archive_component_info_array;
	end;

	else do;					/* foo*::bar */
	     call initiate_file_$component (P_dir, archive_entry, P_component, R_ACCESS, archive_ptr, (0), code);
	     if code = 0 then call star_list_comp_add (archive_entry, P_component);
	end;


star_list_components_EXIT:
	call terminate_file_ (archive_ptr, 0, TERM_FILE_TERM, (0));

	return;

star_list_comp_add:
     proc (entry, component);

	dcl     (component, entry)	char (*) parameter;

	if starname_info.n_entries = starname_info.max_entries then
	     begin;
		dcl     temp_ptr		ptr init (null ());
		on cleanup
		     begin;
			if temp_ptr ^= null () then free temp_ptr -> starname_info;
		     end;
		starname_info_max_entries = starname_info.max_entries + 25;
		allocate starname_info in (system_area) set (temp_ptr);
		temp_ptr -> starname_info.header = starname_info.header;
		temp_ptr -> starname_info.names = starname_info.names;
		free starname_info;
		starname_info_ptr = temp_ptr;
	     end;

	starname_info.n_entries = starname_info.n_entries + 1;
	starname_info.names (starname_info.n_entries).entry = entry;
	starname_info.names (starname_info.n_entries).component = component;
	return;

     end star_list_comp_add;

     end star_list_components;

     end star_list_files;

nth_star_match:
     entry (P_starname_info_ptr, P_count, P_entry, P_component);

	starname_info_ptr = P_starname_info_ptr;
	if P_count > starname_info.n_entries then do;
	     P_entry = "";
	     P_component = "";
	end;
	else do;
	     P_entry = starname_info.names (P_count).entry;
	     P_component = starname_info.names (P_count).component;
	end;

	return;

star_list_cleanup:
     entry (P_starname_info_ptr);

	if P_starname_info_ptr = null () then return;

	starname_info_ptr = P_starname_info_ptr;
	P_starname_info_ptr = null ();
	free starname_info;

	return;
%page;
get_dtcm:
     entry (P_seg_ptr, P_dtcm, P_code);

	call hcs_$get_dates_ptr (P_seg_ptr, dates_array, P_code);
	go to get_dtcm_join;

get_dtcm_file:
     entry (P_dir, P_entry, P_dtcm, P_code);

	call hcs_$get_dates (P_dir, P_entry, dates_array, P_code);

get_dtcm_join:
	if P_code = 0 then
	     unspec (P_dtcm) = dates_array (2);
	else P_dtcm = 0;

	return;
%page;
%include access_mode_values;
%page;
%include acl_structures;
%page;
%include archive_component_info;
%page;
%include star_structures;
%page;
%include terminate_file;
%page;
%skip (10);
     end e_multics_files_util_;
