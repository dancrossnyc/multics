/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gcos_build_library: gcbl: build: proc;

/* This procedure builds a catalog for a GCOS system-loadable file. The
   catalog contains 2 words per module: program name (in BCD), and offset (of
   the preface record preceeding the module). This format is similar to the
   "GECALL TABLE" that is kept in core by the real GCOS, and it differs from
   the format of the catalog produced by SYSEDIT for a  random system loadable
   file (commonly used for ** files).

   WARNING: This command can not be used to manipulate a random system loadable
   file. See the GCOS PLM (AN77 for a detailed description of the differences
   between a random system loadable file, a tape system loadable file, and a
   simulator format software library. NOTE: THERE IS NO SUCH PLM.

   The catalog occupies the first 1000 words of the file, and has room for 499
   name-offset pairs.

   Usage: gcbl input_path output_path -brief -append append_path

   input_path

   is the pathname of the input file. This file may or may not already have a
   catalog. The file may have been created by this
   procedure (in which case it has a catalog), or by gcos_extract_module or
   gcos_pull_tapefile (in which case it does NOT have a catalog).

   output_path

   is the pathname of the file into which the modules in the input file (plus
   those in the optional append file) are to be copied, preceeded by a catalog.
   If this file already exists, it will be overwritten with no warning.

   append_path

   is the pathname of a file whose contents are to be appended to those of the
   input file (i.e., copied to the end of the output file) before the new catalog
   is built. This file is optional. If it is given, the pathname must be
   preceeded by one of the two control arguments: -append, or -append_cat,
   depending on whether or not the file TO BE APPENDED has a catalog.

   The following is no longer the case but is kept for historical reference.
   NOTE that when an append file is given, either with or without a catalog,
   the input file is assumed to have a catalog, and otherwise the input file
   is assumed NOT to have a catalog. This might appear at first to be an arbitrary
   and unwise assumption, but use of earlier versions of this procedure has shown
   that the appending function is always used to add modules to a library that is
   already being used by the simulator (and thus has a catalog). (End of not true.)

   NOTE that existing modules are NOT replaced by the appending function. The only
   way to replace an existing module with a different version of itself is
   to extract from the existing library, into a new file, all the modules EXCEPT
   the one(s) to be replaced, extract the new versions of those modules into the
   new file (they will be appended to those previously extracted into the file),
   and then build a catalog for the new file.


   WRITTEN BY DICK SNYDER .... 1971
   MODIFIED BY T. CASEY JUNE 1974, AUGUST 1974
   Modified: Ron Barstad  2.0  83-02-28  Added dcl precision to conform to standards
                                         Added version (start with 2.0)
   Modified: Ron Barstad  2.1  83-04-20  Removed catalog-nocatalog restriction

   */


/*  D  E  C  L  A  R  A  T  I  O  N  S      */

/*  External Entries  */

dcl  ios_$detach ext entry (char (*), char (*), char (*), bit (72));
dcl  ios_$attach ext entry (char (*), char (*), char (*), char (*), bit (72));
dcl  ios_$seek ext entry (char (*), char (*), char (*), fixed bin(24), bit (72));
dcl (ios_$read, ios_$write) ext entry (char (*), pointer, fixed bin(24), fixed bin(24), fixed bin(24), bit (72));
dcl  ios_$setsize ext entry (char (*), fixed bin(24), bit (72));
dcl (ioa_, com_err_) ext entry options (variable);
dcl (elindex, offset) fixed bin(24);
dcl  progname char (6);
dcl  gcos_cv_gebcd_ascii_ ext entry (pointer, fixed bin(24), pointer, fixed bin(24));

dcl  cu_$arg_count entry (fixed bin, fixed bin(35));
dcl  cu_$arg_ptr ext entry (fixed bin(24), ptr, fixed bin(24), fixed bin(35));

/*  Work Variables */

dcl  nargs fixed bin(17);
dcl  argp ptr;
dcl  argl fixed bin(24);
dcl  arg char (argl) based (argp);
dcl  argno fixed bin(24);

dcl  cleanup condition;

dcl  err_msg char (200) varying;

dcl  cat char (4000) aligned init (" ");		/* place to build catalog */
dcl  buffer char (4000) aligned init (" ");		/* buffer */
dcl  first_word fixed bin(35) based (addr(buffer));         /* first word of buffer */

dcl 1 catblk aligned based (catp),			/* catalog image */
    2 nxt fixed bin(24),				/* pointer to next cat blk */
    2 no_ent fixed bin(24),				/* no. of entries in this cat blk */
    2 elblock (499),				/* room for 499 entries */
      3 element bit (36) unaligned,			/* prog name */
      3 address fixed bin(24);				/* offset in file */

dcl  catp pointer;
dcl (i, j, k) fixed bin(24);				/* temps */

dcl  st bit (72);					/* ios status */
dcl (load_origin, pgm_length, transfer_addr, load_increment, reloc_len) fixed bin(24); /* temps */

dcl 1 status aligned based (addr (st)),			/* overlay for ios_ status */
    2 code fixed bin (35),				/* standard error code */
    2 fill bit (9) unaligned,
    2 eof bit (1) unaligned;				/* eof bit */

dcl 1 gecall aligned based (callp),			/* overlay for gecall parameters */
    2 prog_name bit (36) unaligned,			/* bcd pgm name */
    2 origin bit (18) unaligned,			/* place to begin loading */
    2 filler bit (18) unaligned,
    2 xfer_addr bit (18) unaligned;			/* transfer address */
dcl  callp pointer;

dcl 1 preface aligned based (prefp),			/* model of preface record */
    2 data_check fixed bin(24),				/* checksum of following data words */
    2 rel_check fixed bin(24),				/* checksum of following reloc. words */
    2 rel_abs fixed bin(24),				/* 0=absolute|^0=relocatable */
    2 name bit (36) unaligned,			/* name of pgm */
    2 entry bit (18) unaligned,			/* entry address */
    2 origin bit (18) unaligned,			/* origin */
    2 reloc_words fixed bin (17) unaligned,		/* no. of relocation words */
    2 data_words fixed bin (17) unaligned,		/* no. of data words */
    2 dcws (ndcw) bit (36) unaligned;			/* dcw(s) to load following data records */
dcl  prefp pointer;
dcl  ndcw fixed bin(24);

dcl 1 dcw_model aligned based (dcwp),			/* model of dcw */
    2 data_addr bit (18) unaligned,
    2 zero bit (3) unaligned,
    2 action bit (3) unaligned,
    2 count bit (12) unaligned;			/* number of words to xfer */
dcl  dcwp pointer;

dcl  checker (pgm_length) bit (36) aligned based (ptr);	/* overlay for computing chksum */
dcl  ptr pointer;
dcl  reloc_bits (size) bit (2) based (prefp);		/* overlay for relocation record */

dcl 1 gecos_reloc (size) aligned based (ptr),		/* overlay for each word of loaded pgm */
    2 upper bit (18) unaligned,
    2 lower bit (18) unaligned;
dcl  size fixed bin(24);				/* size of pgm overlay arrays */
dcl  accum fixed bin (71);				/* checksum accumulator */

dcl (input_path, output_path, append_path, err_path) char (168);

dcl  me char (24) int static options (constant) init ("gcos_build_library (2.1)");
dcl  stream_names (2) char (12) int static init (
     "gcbl_input",
     "gcbl_output");

dcl (briefsw
     , catalogsw
     , appendsw
     , append_cat_sw
     , append_path_sw
     , ineof
     , usage_sw
     ) bit (1) aligned init ("0"b);

dcl  path_counter fixed bin(24)init (0);

dcl (error_table_$badopt, error_table_$noarg) ext fixed bin (35);

dcl (addr, divide, mod, substr) builtin;


/*  */

/* P  R  O  C  E  D  U  R  E     */

	on condition (cleanup) call cleanup_proc;

	call cu_$arg_count (nargs, code);

	if nargs < 2 & code = 0 then code = error_table_$noarg;

	if code ^= 0 then
	     do;
	     call com_err_ (code, me);

print_usage:   call ioa_ ("Usage: gcbl INPUT_PATH OUTPUT_PATH {-brief} {-append APPEND_PATH}");

exit:	     call cleanup_proc;

	     return;

	end;

arg_loop:	do argno = 1 to nargs;

	     call cu_$arg_ptr (argno, argp, argl, code);

	     if code ^= 0 then do;
		err_msg = arg;
call_com_err:	call com_err_ (code, me, err_msg, err_path);
		if usage_sw then goto print_usage;
		else goto exit;
	     end;


	     err_path = arg;			/* in case of error in argument processing */

	     if substr (arg, 1, 1) ^= "-" then		/* if not control argument */
get_path:		do;				/* must be a pathname */
						/* which one is it? */

		if append_path_sw then		/* if previous argument was -append or -append_cat */
get_append:	     do;
		     append_path = arg;		/* save path */
		     append_path_sw = "0"b;		/* remember we got it */
		end get_append;

		else if path_counter = 0 then		/* if we have no paths */
get_input:	     do;				/* has to be input_path */
		     input_path = arg;		/* save it */
		     path_counter = 1;		/* remember we got it */
		end get_input;

		else if path_counter = 1 then		/* if we have input path */
get_output:	     do;				/* this has to be output */
		     output_path = arg;		/* save it */
		     path_counter = 2;		/* remember we got it */
		end get_output;

		else do;				/* if we have both, this is garbage */
		     usage_sw = "1"b;		/* tell user how to use command */
		     err_msg = "unidentified non-control argument: ^a";
		     code = 0;
		     goto call_com_err;
		end;

	     end get_path;

	     else if arg = "-bf" | arg = "-brief" then
		briefsw = "1"b;

	     else if arg = "-append" then do;
append_arg:	appendsw, catalogsw = "1"b;
		append_path_sw = "1"b;
	     end;

	     else if arg = "-append_cat" then do;
		append_cat_sw = "1"b;
		goto append_arg;
	     end;

	     else do;
		code = error_table_$badopt;
		err_msg = "^a";
		goto call_com_err;
	     end;

	end arg_loop;

	if path_counter ^= 2 then do;			/* complain if required paths missing */
	     err_msg = "";
noarg_err:     code = error_table_$noarg;
	     usage_sw = "1"b;			/* show user required args */
	     goto call_com_err;
	end;

	if append_path_sw then do;			/* if we were waiting for append path
						   and it was not there, complain */
	     err_msg = "append_path";
	     goto noarg_err;
	end;

	err_path = output_path;			/* in case of error initializing output file */


	call ios_$attach ("gcbl_output", "file_", output_path, "", st);
	if code ^= 0 then do;
attach_err:    err_msg = "from ios_$attach ^a";
	     goto call_com_err;
	end;

	call ios_$setsize ("gcbl_output", 36, st);
	if code ^= 0 then do;
setsize_err:   err_msg = "from ios_$setsize ^a";
	     goto call_com_err;
	end;

	call ios_$seek ("gcbl_output", "last", "first", 1000, st);
	if code ^= 0 then do;
	     err_msg = "from ios_$seek last 1000 ^a";
	     goto call_com_err;
	end;

	call ios_$seek ("gcbl_output", "write", "first", 1000, st);
	if code ^= 0 then do;
	     err_msg = "from ios_$seek write 1000 ^a";
	     goto call_com_err;
	end;

/* copy entire input (or append) file into output file */

attach_input:					/* come here to attach input or append file for reading */
	err_path = input_path;			/* in case of error while reading */
	call ios_$attach ("gcbl_input", "file_", input_path, "r", st);
	if code ^= 0 then
	     goto attach_err;

	call ios_$setsize ("gcbl_input", 36, st);
	if code ^= 0 then
	     goto setsize_err;

	/*** The input or append library is determined to have or not have
               a catalog by inspection. If the first word is 0, then it is a 
               simulator library and has a catalog. If the first word not=0,
               then the lib does not have a catalog and is a native gcos lib.
                Neither catalogsw, nor append_cat_sw is examined.            */
	call ios_$read ("gcbl_input", addr (buffer), 0, 1000, j, st);
	if code ^= 0 then goto read_err;
	if first_word ^= 0 then goto no_skip_cat;
	else
skip_catalog:  do;
	     call ios_$seek ("gcbl_input", "read", "first", 1000, st);
	     if code ^= 0 then do;
seek_read_err:	err_msg = "from ios_$seek read 1000 ^a";
		goto call_com_err;
	     end;
	end skip_catalog;

/* Come here to read next 1000 words from input or append file */

loop:	call ios_$read ("gcbl_input", addr (buffer), 0, 1000, j, st);
	if code ^= 0 then do;
read_err:	     err_msg = "from ios_$read ^a";
	     goto call_com_err;
	end;

no_skip_cat:
	if status.eof then ineof = "1"b;		/* remember end of file, since we clear status by writing */

	call ios_$write ("gcbl_output", addr (buffer), 0, j, k, st);
	if code ^= 0 then do;
write_err:     err_msg = "from ios_$write ^a";
	     err_path = output_path;
	     goto call_com_err;
	end;

	if ^ineof then go to loop;			/* go read next block, if not end of file */

	if appendsw then do;			/* eof on input...append now?? */
	     ineof = "0"b;
	     appendsw = "0"b;			/* after next eof we won't append again */
	     catalogsw = append_cat_sw;		/* if append file has catalog, skip over it */
	     call ios_$detach ("gcbl_input", "", "", st); /* detach input file */
	     if code ^= 0 then do;
		err_msg = "from ios_$detach ^a";
		goto call_com_err;
	     end;

	     input_path = append_path;
	     goto attach_input;			/* go attach and read append file */
	end;

/* Fall thru here to start reading thru output file and building catalog */

	err_path = output_path;			/* in case of error on output file */

	call ios_$seek ("gcbl_output", "read", "first", 1000, st); /* seek to first preface record for reading */
	if code ^= 0 then
	     goto seek_read_err;

	call ios_$seek ("gcbl_output", "write", "first", 0, st); /* seek to start of empty catalog for writing */
	if code ^= 0 then do;
	     err_msg = "from ios_$seek write first ^a";
	     goto call_com_err;
	end;


	catp = addr (cat);				/* place to build catalog */
	prefp = addr (buffer);			/* place to read preface records into */
	catblk.nxt = 0;				/* clear rel ptr to next catalog block (there never is
						   another catalog block) */
	elindex = 1;				/* first modue - first catalog position */
	offset = 1000;				/* offset of its preface record */

read:	call ios_$read ("gcbl_output", prefp, 0, 1000, j, st); /* read the preface record */
	if code ^= 0 then goto read_err;

	elblock (elindex).element = preface.name;	/* copy name */
	elblock (elindex).address = offset;		/* copy preface offset */
	elindex = elindex + 1;			/* bump index */
	if elindex = 500 then do;
	     code = 0;
	     err_msg = "catalog overflow - more than 499 modules in file: ^a";
	     goto call_com_err;
	end;

	if ^briefsw then do;			/* unless told not to, print name and offset */
	     call gcos_cv_gebcd_ascii_ (addr (preface.name), 6, addr (progname), j);
	     call ioa_ ("^a ^o", progname, offset);
	end;

/* Count DCWs, by looking for one with action code = "000"b */

	do ndcw = 1 to 58				/* there may be up to 58 of them in a block */
		while (substr (preface.dcws (ndcw), 22, 3) ^= "000"b);
	end;

	offset = offset+6+ndcw+preface.data_words+preface.reloc_words; /* compute offset of next preface record */

	call ios_$seek ("gcbl_output", "read", "first", offset, st); /* seek to it */
	if code ^= 0 then do;
	     err_msg = "from ios_$seek read next_preface ^a";
	     goto call_com_err;
	end;

	if ^eof then go to read;			/* if not end of file on seek, go read it */

	call ioa_ ("end of file");

	catblk.no_ent = elindex-1;			/* compute total elements in catalog */
	call ios_$write ("gcbl_output", addr (cat), 0, 1000, j, st); /* write catalog into file */
	if code ^= 0 then
	     goto write_err;

	goto exit;				/* all done */


cleanup_proc: proc;

	     do i = 1 to 2;
		call ios_$detach (stream_names (i), "", "", st);
	     end;
	     return;
	end cleanup_proc;

     end gcos_build_library;
