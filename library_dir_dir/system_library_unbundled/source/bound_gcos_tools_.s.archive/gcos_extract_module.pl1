/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gcos_extract_module: gcem: extract: proc;

/* This procedure extracts one or more modules from a (tape format) GCOS
   system loadable file, or a simulator format software library, placing them in
   an output file. The names of the modules are given in a control file.

   WARNING: This command can not be used to manipulate a random system loadable
   file. For a detailed description of the differences
   between a random system loadable file, a tape system loadable file, and a
   simulator format software library see the simulator manual (AN05) and
   the GCOS System Editor manual (DD30).

   USAGE: gcem control_path input_path output_path -brief

   control_path

   is the pathname of a segment containing the names of the modules to be
   extracted, in lower case ascii, each on a separate line. (Such a segment
   can be created by the gcos_library_summary command, using the -brief control
   argument, and preceeding it by the file_output command, and then editing the
   resulting segment to remove the names of unwanted modules; or the
   segment can be created directly by any of the Multics editors.)

   input_path

   is the pathname of a file containing gcos modules. It may be a file copied from
   a GCOS total system tape, or it may be a simulator library, beginning with
   a simulator-format catalog of the module names and locations. The file is
   determined to be a native GCOS or simulator format file by inspection. The
   -no_catalog  arg is no longer necessary.

   output_path

   is the pathname of the output file into which the extracted modules are to be
   written. If the file already exists, it will be appended to, enabling the
   construction of a single library from several smaller ones.

   The names of each module copied will be printed on user_output,
   unless the -brief control argument is given.  The names of any requested modules
   that are not found in the input file will be printed on error_output.


   WRITTEN BY DICK SNYDER .... 1971
   MODIFIED BY T. CASEY JUNE 1974, AUGUST 1974
  Change:	Ron Barstad  2.0 83-07-29  Repaired obsolete hcs_$initiate_count call
                                     Removed need for -no_catalog

   */




/* 	D   E   C   L   A   R   A   T   I   O   N   S				 */




/* 	External Entries						 */


dcl  ios_$read ext entry (char (*) aligned, pointer, fixed bin, fixed bin, fixed bin, bit (72) aligned);
dcl  ios_$write ext entry (char (*), pointer, fixed bin, fixed bin, fixed bin, bit (72) aligned);
dcl  ios_$detach ext entry (char (*), char (*), char (*), bit (72) aligned);
dcl  expand_path_ ext entry (pointer, fixed bin, pointer, pointer, fixed bin (35));
dcl  hcs_$initiate_count ext entry (char (*), char (*), char (*), fixed bin, fixed bin, pointer, fixed bin (35));
dcl  delete_$ptr ext entry (ptr, bit (6), char (*), fixed bin (35));
dcl (ioa_, ioa_$nnl, ioa_$rsnnl, com_err_) ext entry options (variable);
dcl  ios_$attach ext entry (char (*), char (*), char (*), char (*), bit (72) aligned);
dcl  ios_$setsize ext entry (char (*), fixed bin, bit (72) aligned);
dcl  ios_$seek ext entry (char (*), char (*), char (*), fixed bin(21), bit (72) aligned);
dcl  gcos_cv_gebcd_ascii_ ext entry (pointer, fixed bin, pointer, fixed bin);
dcl  cu_$arg_count ext entry (fixed bin);
dcl  cu_$arg_ptr ext entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  get_temp_segment_ entry (char(*), ptr, fixed bin(35));
dcl  release_temp_segment_ entry (char(*), ptr, fixed bin(35));

/*  Work Variables */

dcl  nargs fixed bin;
dcl  argp ptr;
dcl  argl fixed bin;
dcl  arg char (argl) based (argp);
dcl  argno fixed bin;

dcl  cleanup condition;

dcl  err_msg char (200) varying;


dcl (i1, i2, i3, i4, pref_data, pref_reloc) fixed bin;
dcl (i, j, word_no, bc, segl, doff) fixed bin;		/* temps */
dcl  k fixed bin (21);
dcl  control char (segl) based (temp_segp);
dcl  temp_segp pointer;
dcl  control_orig char (segl) based (segp);
dcl  segp pointer;
dcl  word_one fixed bin (35);			/* first word of input file */
dcl  ename char (32);
dcl  dir char (168);
dcl  string char (6);

dcl  st bit (72) aligned ;				/* ios status */

dcl 1 status aligned based (addr (st)),			/* overlay for ios_ status */
    2 code fixed bin (35),				/* standard error code */
    2 fill bit (9) unaligned,
    2 eof bit (1) unaligned;				/* eof bit */

dcl 1 preface aligned based (prefp),			/* model of preface record */
    2 data_check fixed bin,				/* checksum of following data words */
    2 rel_check fixed bin,				/* checksum of following reloc. words */
    2 rel_abs fixed bin,				/* 0=absolute|^0=relocatable */
    2 name bit (36) unaligned,			/* name of pgm */
    2 entry bit (18) unaligned,			/* entry address */
    2 origin bit (18) unaligned,			/* origin */
    2 reloc_words fixed bin (17) unaligned,		/* no. of relocation words */
    2 data_words fixed bin (17) unaligned,		/* no. of data words */
    2 dcws (ndcw) bit (36) unaligned;			/* dcw(s) to load following data records */
dcl  prefp pointer;
dcl  ndcw fixed bin;

dcl (control_path, input_path, output_path, err_path) char (168);
dcl (briefsw					/* omit printing of names of extracted modules */
     , nocatsw					/* file does not begin with a catalog */
     , usage_sw					/* print usage message if error on command line */
     ) bit (1) aligned init ("0"b);

dcl  path_counter fixed bin init (0);

dcl  me char (25) int static init ("gcos_extract_module (2.0)");

dcl  ascii_newline char (1) int static init ("
");

dcl (error_table_$badopt, error_table_$noarg) ext fixed bin (35);


/* 	NOTE: Declaration of buffer should be last declaration in case	 */
/* 	buffer should overflow.					 */

dcl  buffer bit (131400);				/* preface and relocation blk buffer */

dcl (addr, divide, index, mod, null, substr, translate) builtin;

/*  */

/*  P     R     O     C     E     D     U     R     E    */

	on condition (cleanup) call cleanup_proc;

	segp, temp_segp = null;

	call cu_$arg_count (nargs);

/* IF WRONG NUMBER OF ARGS, PRINT USAGE MESSAGE AND QUIT */

	if nargs < 3 then
print_usage:   do;
	     call ioa_ ("Usage: gcem CONTROL_PATH INPUT_PATH OUTPUT_PATH {-brief}");
exit:	     call cleanup_proc;
	     return;
	end print_usage;
arg_loop:	do argno = 1 to nargs;

	     call cu_$arg_ptr (argno, argp, argl, code);

	     if code ^= 0 then do;
		err_msg = arg;
call_com_err:	call com_err_ (code, me, err_msg, err_path);
		if usage_sw then goto print_usage;
		else goto exit;
	     end;


	     err_path = arg;			/* in case of error, be ready */

	     if substr (arg, 1, 1) ^= "-" then		/* if not control argument */
get_path:		do;				/* must be pathname */
		if path_counter = 0 then		/* which pathname? how many do we have already? */
get_control:	     do;				/* if none, first one is control file */
		     call expand_path_ (argp, argl, addr (dir), addr (ename), code);
		     if code ^= 0 then do;
			err_msg = "from expand_path_ ^a";
			goto call_com_err;
		     end;

		     call ioa_$rsnnl ("^a>^a", control_path, bc, dir, ename); /* put pathname together */

		     call hcs_$initiate_count (dir, ename, "", bc, 0, segp, code);

		     if segp = null then do;
			err_path = control_path;
			err_msg = "from hcs_$initiate_count ^a";
			goto call_com_err;
		     end;

		     segl = divide (bc, 9, 17, 0);

		     call get_temp_segment_(me, temp_segp, code);
		     if code ^= 0 then do;
			call com_err_(code, me, "Unable to make temporary copy of input_path.");
			goto exit;
		     end;
		     control = control_orig;		/* make a working copy */
		     path_counter = 1;		/* remember that we have control_path */
		end get_control;

		else if path_counter = 1 then		/* if we already have control_path */
get_input:	     do;				/* this must be input_path */
		     input_path = arg;
		     call ios_$attach ("gcem_input", "file_", input_path, "r", st);
		     if code ^= 0 then do;
attach_err:		err_msg = "from ios_$attach ^a";
			goto call_com_err;
		     end;

		     call ios_$setsize ("gcem_input", 36, st);
		     if code ^= 0 then do;
setsize_err:		err_msg = "from ios_$setsize ^a";
			goto call_com_err;
		     end;

		     path_counter = 2;		/* remember that we have input_path */
		end get_input;

		else if path_counter = 2 then		/* but if we have input path already */
get_output:	     do;				/* this must be output_path */
		     output_path = arg;
		     call ios_$attach ("gcem_output", "file_", output_path, "", st);
		     if code ^= 0 then
			goto attach_err;

		     call ios_$setsize ("gcem_output", 36, st);
		     if code ^= 0 then
			goto setsize_err;

		     path_counter = 3;		/* remember that we have all 3 pathnames */
		end get_output;

		else do;				/* can't be a pathname - must be garbage */
		     usage_sw = "1"b;		/* tell user how to use command */
		     err_msg = "unidentified non-control argument: ^a";
		     code = 0;
		     goto call_com_err;
		end;

	     end get_path;

	     else if arg = "-bf" | arg = "-brief" then
		briefsw = "1"b;

	     else if arg = "-no_catalog" then
		nocatsw = "1"b;

	     else do;
		code = error_table_$badopt;
		err_msg = "^a";
		goto call_com_err;
	     end;

	end arg_loop;

	if path_counter ^= 3 then do;			/* complain if all 3 pathnames not given */
	     code = error_table_$noarg;
	     err_msg = "";
	     usage_sw = "1"b;
	     goto call_com_err;
	end;

/* initialize */

	prefp = addr (buffer);			/* pointer to buffer for ios_ */

	k = 0;					/* offset of first preface record
						   (relative to doff) */

	err_path = input_path;			/* higher probablility of input errors */

/* determine if the input file has a catalog:
   if the first word of the file =0 then this is a simulator file with a catalog
   if the first word not=0 then this is a native GCOS file without a catalog
*/
	call ios_$seek ("gcem_input", "read", "first", 0, st);
	if code ^= 0 then do;
	     err_msg = "from ios_$seek read first word: ^a";
	     goto call_com_err;
	end;

	call ios_$read ("gcem_input", addr(word_one), 0, 1, j, st);
	if code ^= 0 then do;
	     err_msg = "from ios_$read of word one: ^a";
	     goto call_com_err;
	end;

	if word_one = 0
	     then doff = 1000;		/* has catalog */
	     else doff = 0;
%page;
/* Main loop begins here */

seek_preface: call ios_$seek ("gcem_input", "read", "first", k+doff, st);
	if code ^= 0 then do;
seek_err:	     err_msg = "from ios_$seek read start-of-preface ^a";
	     goto call_com_err;
	end;

	if status.eof then do;			/* check for end of file */
	     call ioa_ ("^/end of file");

	     control = translate (control, "", " ");	/* translate blanks to fill (177) chars */
	     call com_err_ (0, me, "Following modules not found in ^a^/^a", input_path, control);

	     goto exit;
	end;


read:	call ios_$read ("gcem_input", prefp, 0, 3650, j, st); /* read preface record */
	if code ^= 0 then do;
read_err:	     err_msg = "from ios_$read ^a";
	     goto call_com_err;
	end;

/* Count DCWs, by looking for one with action code = "000"b */

	do ndcw = 1 to 58				/* there may be up to 58 of them in a block */
		while (substr (preface.dcws (ndcw), 22, 3) ^= "000"b);
	end;

	pref_reloc = preface.reloc_words;		/* copy data from preface */
	pref_data = preface.data_words;

	i4 = pref_data + pref_reloc + 6 + ndcw;		/* compute number of words to copy */
						/* (or to skip over, if this one not to be copied) */
						/* NOTE that this number includes the preface record,
						   which is copied along with the data */

	call gcos_cv_gebcd_ascii_ (addr (preface.name), 6, addr (string), i); /* convert prog name to ascii */
						/* and see if that name is in the control file */
	i1 = index (string, " ");			/* find the end of it */
	if i1 = 0 then i1 = 7;			/* if no trailing blank, must be 6 chars */

	i3 = 1;					/* start search from beginning */
search_control: i2 = index (substr (control, i3), substr (string, 1, i1-1)); /* look for the name in the control file */
	if i2 ^= 0 then do;				/* if its there, extract the module - maybe */
						/* Aviod extracting module "b" because "abc" occurs
						   in the control file. Check that name in control file is
						   delimited by blanks or newlines (or beginning of file) */
	     if substr (control, i2+i1-1, 1) ^= ascii_newline then /* name must end in newline */
		if substr (control, i2+i1-1, 1) ^= " " then /* or blank */
		     goto keep_searching;		/* or we do not copy it */
	     if i2 ^= 1 then			/* except for first name in control file */
		if substr (control, i2-1, 1) ^= ascii_newline then /* name must begin with newline */
		     if substr (control, i2-1, 1) ^= " " then /* or blank */
keep_searching:		do;			/* or we do not copy it */
			i3 = i2 + i1 - 1;		/* move search pointer past this name */
			if i3 + i1 - 1 > segl then	/* if name is longer than remainder of file */
			     goto next_preface;	/* give up and go look at next preface record */
			else goto search_control;	/* else keep looking for it */
		     end;

	     if ^briefsw then			/* print name unless asked not to */
		call ioa_ ("^a will be copied", string);

	     substr (control, i2, i1) = "";		/* blank out name and trailing blank or newline */

	     call ios_$seek ("gcem_input", "read", "read", -j, st); /* move read pointer back to beginning of preface */
	     if code ^= 0 then goto seek_err;

copyloop:	     if i4 < 3650 then i3 = i4;
	     else i3 = 3650;
	     call ios_$read ("gcem_input", prefp, 0, i3, j, st);
	     if code ^= 0 then goto read_err;
	     if i4 > j then i2 = j;
	     else i2 = i4;
	     call ios_$write ("gcem_output", prefp, 0, i2, i1, st);
	     if code ^= 0 then do;
		err_path = output_path;
		err_msg = "from ios_$write ^a";
		goto call_com_err;
	     end;

	     i4 = i4 -i1;
	     if i4 > 0 then go to copyloop;
	end;

	if control = "" then do;			/* if all requested modules copied, quit */
	     call ioa_ ("^/all requested modules copied");
	     goto exit;
	end;

next_preface:
	k = k+6+ndcw+pref_data+pref_reloc;		/* compute offset of next preface block */

	goto seek_preface;				/* go seek to it */


cleanup_proc: proc;
	     call ios_$detach ("gcem_input", "", "", st);
	     call ios_$detach ("gcem_output", "", "", st);
	     if temp_segp ^= null then
		call release_temp_segment_(me, temp_segp, code);

	     return;
	end cleanup_proc;

     end gcos_extract_module;
