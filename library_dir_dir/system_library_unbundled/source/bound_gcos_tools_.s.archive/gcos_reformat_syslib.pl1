/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gcos_reformat_syslib: gcrs: ssyfix: proc;

/* This command reformats the softw-syslib file (the library used by GELOAD)
   from the total system tape, so that it can be read by the simulator.

   As read from the total system tape, the file contains 321 word blocks.
   The first appears to be a block control word, and the next 320 make up
   a block that GELOAD interprets itself. If read from a 7 track MTS500,
   the word count is rounded up to the next even number, 322, so a word
   at the end must also be discarded. The number of words to be read is
   therefore an optional argument, with the default being 321. The first
   word is discarded, and the next 320 words are always retained.

   THe first word (the bcw) is checked for sequential bsn's, and block lengths
   of 320 or less, to verify that the correct record length was used for
   reading, and that the words being discarded are really bcw's.

   NOTE that this method of making the file readable by the simulator was
   arrived at experimentally, and is not based on any knowledge of the format
   of the subroutine library or the operation of GELOAD in real GCOS. If either
   of those changes, this command may also have to be changed.

   USAGE: gcrs input_path -output_path- -record_length-

   If output_path is not given, the modifications will be made to the input file.
   Since a temporary is not used, quitting and releasing while updating the
   input file will leave it in an inconsistent state, from which recovery is
   almost impossible.

   If record_length is not given the default is 321. Record_length is
   distinguished from out_path by the fact that it must be numeric.
   It may preceed or follow output_path, and output_path
   need not be given when record_length is given.

   WRITTEN BY T.CASEY AUGUST 1973
   MODIFIED BY T. CASEY AUGUST 1974

*/

/* D  E  C  L  A  R  A  T  I  O  N  S      */

dcl  ioa_ ext entry options (variable);
dcl  com_err_ ext entry options (variable);
dcl  cv_dec_check_ ext entry (char (*), fixed bin (35)) returns (fixed bin);
dcl  ios_$attach ext entry
    (char (*) aligned, char (*) aligned, char (*) aligned, char (*) aligned, bit (72) aligned);
dcl  ios_$detach ext entry
    (char (*) aligned, char (*) aligned, char (*) aligned, bit (72) aligned);
dcl  ios_$read ext entry
    (char (*) aligned, ptr, fixed bin, fixed bin, fixed bin, bit (72) aligned);
dcl  ios_$seek ext entry
    (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin, bit (72) aligned);
dcl  ios_$setsize ext entry
    (char (*) aligned, fixed bin, bit (72) aligned);
dcl  ios_$write ext entry
    (char (*) aligned, ptr, fixed bin, fixed bin, fixed bin, bit (72) aligned);
dcl  cu_$arg_count ext entry (fixed bin);
dcl  cu_$arg_ptr ext entry (fixed bin, ptr, fixed bin, fixed bin (35));

/*  Work Variables */

dcl  nargs fixed bin;
dcl  argp ptr;
dcl  argl fixed bin;
dcl  arg char (argl) based (argp);
dcl  argno fixed bin;

dcl  err_msg char (200) varying;

dcl  err_path char (168) varying;

dcl  eofbit bit (1) aligned;
dcl  buffer char (1600) aligned;			/* 400 words */
dcl  blkp ptr;
dcl 1 block aligned based (blkp),
    2 bcw,
      3 bsn bit (18) unaligned,
      3 count bit (18) unaligned;
dcl  old_bsn fixed bin init (0);			/* bsns must begin with 1 */
dcl  new_bsn fixed bin;
dcl  rec_len fixed bin init (321);
dcl (i, j, k) fixed bin;				/* temporaries */
dcl  status bit (72) aligned init (""b);
dcl  code fixed bin (35) aligned based (addr (status));
dcl (inpath, outpath) char (168) aligned init ("");
dcl (instream, outstream) char (32) aligned init ("");
dcl  me char (20) int static aligned init ("gcos_reformat_syslib");
dcl  rw char (1) aligned;

dcl (addr, fixed, substr) builtin;

dcl  cleanup condition;

/* P  R  O  C  E  D  U  R  E     */

	blkp = addr (buffer);
	on condition (cleanup) call cleanup_proc;

	call cu_$arg_count (nargs);

/* IF WRONG NUMBER OF ARGS, PRINT USAGE MESSAGE AND QUIT */

	if nargs = 0 | nargs > 3 then do;
	     err_msg = "USAGE: gcrs input_path -output_path-";
	     goto call_com_err;
	end;

arg_loop:	do argno = 1 to nargs;

	     call cu_$arg_ptr (argno, argp, argl, code);

	     if code ^= 0 then do;
		err_msg = arg;
call_com_err:	call com_err_ (code, me, err_msg, err_path);
		call cleanup_proc;
		return;
	     end;

	     err_path = arg;

	     if argno = 1 then do;			/* default is to update input file */
		inpath, outpath = arg;
		instream, outstream = "gcrs_i/o";
		rw = " ";				/* equivalent to "rw" for ios_$attach */
	     end;

	     else do;				/* see if output_path or record len */
		i = cv_dec_check_ (arg, code);
		if code ^= 0 then do;		/* non numeric */
		     code = 0;			/* clear it - its not an error_table_ code */
		     if outpath ^= inpath then do;	/* outpath already given */
			err_msg = "Unknown argument: ^a";
			goto call_com_err;
		     end;				/* end outpath given */
		     else do;			/* outpath not given - assume this is it */
			outpath = arg;
			outstream = "gcrs_output";
			instream = "gcrs_input";
			rw = "r";			/* attach input file for read only */
		     end;				/* end assume outpath */
		end;				/* end non numeric */
		else rec_len = i;			/* numeric - assume rec_len */
	     end;					/* end not firt arg */

	end arg_loop;

/* Initialize and attach files */

	err_path = inpath;				/* in case of error */
	call ios_$attach (instream, "file_", inpath, rw, status);
	if code ^= 0 then do;
attach_error:  err_msg = "from ios_$attach ^a";
	     goto call_com_err;
	end;
	call ios_$setsize (instream, 36, status);
	if code ^= 0 then do;
setsize_error: err_msg = "from ios_$setsize 36 ^a";
	     goto call_com_err;
	end;

	err_path = outpath;				/* more possibilities of output errors now */

	if outstream ^= instream then do;		/* if separate output file */
	     call ios_$attach (outstream, "file_", outpath, "", status);
	     if code ^= 0 then goto attach_error;
	     call ios_$setsize (outstream, 36, status);
	     if code ^= 0 then goto setsize_error;
	end;

/* whether or not input and output are the same,
   seek the output write pointer to the beginning of the file */
	call ios_$seek (outstream, "write", "first", 0, status);
	if code ^= 0 then do;
	     err_msg = "from ios_$seek write first ^a";
	     goto call_com_err;
	end;

/* Main loop */

read:	call ios_$read (instream, blkp, 0, rec_len, i, status);
	eofbit = substr (status, 46, 1);		/* remember end of file indicator */
	if code ^= 0 then do;
	     err_msg = "from ios_$read ^a";
input_error:   err_path = inpath;
	     goto call_com_err;
	end;

	new_bsn = fixed (bsn);
	if new_bsn ^= old_bsn + 1 then
	     call ioa_ ("^a: block serial number error: previous bsn = ^d, current bsn = ^d.Processing continues",
	     me, old_bsn, new_bsn);
	old_bsn = new_bsn;

	k = fixed (bcw.count);
	if k > 320 then
	     call ioa_ ("^a: bad bcw count: ^d in block ^d. Processing continues.", me, k, new_bsn);

	if i = rec_len then
	     i = 320;				/* throw away the rcw */
	else call ioa_ ("^a: short block read: ^d words in block ^d. Processing continues.", me, i, new_bsn);

	call ios_$write (outstream, blkp, 1, i, j, status); /* the offset of 1 is what gets rid of the rcw */
	if code ^= 0 then do;
	     err_msg = "from ios_$write ^a";
	     goto call_com_err;
	end;
	if i ^= j then do;
	     err_msg = "wrong number of words written to ^a";
	     goto call_com_err;
	end;

	if ^eofbit then goto read;			/* go read next record if there is one */

	else do;					/* end of file */
	     call ioa_ ("^a: Normal end of file on ^a", me, inpath);

	     if instream = outstream then do;		/* if updating input file */
		call ios_$seek (instream, "last", "write", 0, status); /* get rid of garbage at end */
		if code ^= 0 then do;
		     err_msg = "from ios_$seek last write ^a";
		     goto call_com_err;
		end;
	     end;

	     call ios_$detach (instream, "", "", status);
	     if code ^= 0 then do;
		err_msg = "from ios_$detach ^a";
		goto input_error;
	     end;

	     if instream ^= outstream then do;		/* if separate output file, detach it too */
		call ios_$detach (outstream, "", "", status);
		if code ^= 0 then do;
		     err_msg = "from ios_$detach ^a";
		     goto call_com_err;
		end;
	     end;

	     return;

	end;					/* end of end of file do group */


cleanup_proc: proc;

	     call ios_$detach (instream, "", "", status);
	     call ios_$detach (outstream, "", "", status);

	     if code = 0 then			/* if this is cleanup handler */
		if instream = outstream then
		     if instream ^= "" then
			call ioa_ ("^a: WARNING: ^a may have been left in an inconsistent state", me, inpath);

	     return;

	end cleanup_proc;

     end gcos_reformat_syslib;
