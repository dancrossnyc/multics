/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/**** format: ind3,ll80,initcol6,indattr,^inddcls,dclind4,idind16	       */
/**** format: struclvlind2,^ifthenstmt,^ifthendo,^ifthen,^indnoniterdo       */
/**** format: ^inditerdo,^indnoniterend,^indthenelse,case,^indproc,^indend   */
/**** format: ^delnl,^insnl,comcol41,^indcom,^indblkcom,linecom,^indcomtxt   */

ted_comment_:			/* add comments to a file	       */
       proc (ted_support_p, msg, code);

dcl msg		char (168) var,
    code		fixed bin (35);

      if (ted_support_version_2 ^= ted_support.version)
      then do;
         code = error_table_$unimplemented_version;
         return;
      end;
loop:
      ii = inp.se - inp.sb + 1;	/* how much range left	       */
      if (ii <= 0)
      then goto EOB;		/* WE'RE done!		       */
      i = index (substr (istr, inp.sb, ii), NL);
      if (i = 0)			/* calc line length		       */
      then i = ii;
      else i = i - 1;		/* must be >0 because if you type an */
      if (i > 0)			/* ..empty line with no NL, the user */
      then do;			/* ..doesn't get much indication     */
				/* type what is already on line      */
         call iox_$put_chars (iox_$user_output, addr (ichr (inp.sb)), i, code);
reask:				/* ask him what he wants to add      */
         call iox_$get_line (iox_$user_input, addr (buffer), length (buffer),
	  il, code);
         if (il > 2)		/* if answer was big enough, see     */
         then do;			/* ..if it ends with a control       */
	  ch2 = substr (buffer, il - 2, 2);
	  if (ch2 = "\d")		/* he wants that line deleted	       */
	  then do;
	     inp.sb = inp.sb + i + 1; /* so do it already		       */
	     goto loop;
	  end;

	  if (ch2 = "\f") | (ch2 = "\F")
	  then goto finish;		/* he wants to bail out early	       */

	  if (ch2 = "\i")
	  then do;		/* he wants to insert some data      */
	     if (i = 0)
	        | (il ^= 3)		/* but he didn't say it nice	       */
	     then do;
	        call iox_$put_chars (iox_$user_output, addr (msg_bad),
		 length (msg_bad), code);
	        goto loop;
	     end;
	     i = 0;		/* go get the data for insertion     */
	     goto reask;
	  end;
	  if (ch2 = "\a")		/* he wants data appended	       */
	  then do;
	     if (i > 0)
	     then do;
	        substr (ostr, out.de + 1, i)
		 = substr (istr, inp.sb, i); /* copy the input line      */
	        out.de = out.de + i;
	        inp.sb = inp.sb + i + 1;
	     end;
add1:
	     i = 0;
	     il = il - 3;		/* knock off the control chars       */
	     substr (ostr, out.de + 1, il)
	        = substr (buffer, 1, il);   /* copy the new data	       */
	     out.de = out.de + il + 1;
	     substr (ostr, out.de, 1) = NL;
	     call checkpoint (inp.sb - 1, out.de);
	     goto reask;
	  end;
         end;
         if (i > 0)
         then do;			/* just ordinary added data	       */
	  substr (ostr, out.de + 1, i) = substr (istr, inp.sb, i);
	  out.de = out.de + i;
	  inp.sb = inp.sb + i + 1;
         end;
         substr (ostr, out.de + 1, il) = substr (buffer, 1, il);
         out.de = out.de + il;
      end;
      else do;
         substr (ostr, out.de + 1, 1) = NL;
         out.de = out.de + 1;
         inp.sb = inp.sb + 1;
      end;
      call checkpoint (inp.sb - 1, out.de);
      goto loop;

EOB:
      if (inp.se = inp.de)
      then call iox_$put_chars (iox_$user_output, addr (msg_EOB),
         length (msg_EOB), code);
      else call iox_$put_chars (iox_$user_output, addr (NL), 1, code);

finish:
      current = out.de;		/* tell ted where "." now is	       */
      i = inp.de - inp.sb + 1;
      substr (ostr, out.de + 1, i) = substr (istr, inp.sb, i);
      out.de = out.de + i;
      req.nc = req.cc;		/* let 'em use the rest of line      */
      inp.se = inp.de + 1;
      code = tederror_table_$Copy_Set;
      return;%page;
%include ted_support;

dcl ch2		char (2);
dcl iox_$user_input ptr ext static;
dcl iox_$user_output ptr ext static;
dcl iox_$put_chars	entry (ptr, ptr, fixed bin (24), fixed bin (35));
dcl iox_$get_line	entry (ptr, ptr, fixed bin (24), fixed bin (24),
		fixed bin (35));
dcl i		fixed bin (24);
dcl ii		fixed bin (24);
dcl il		fixed bin (24);
dcl buffer	char (600);
dcl msg_EOB	char (7) int static options (constant) init ("
	EOB

");
dcl msg_bad	char (19) int static options (constant) init ("Improper use of \i
");
dcl NL		char (1) int static init ("
");

dcl (pointer, substr) builtin;

   end ted_comment_;
