/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

/**** format: ind3,ll80,initcol6,indattr,^inddcls,dclind4,idind16	       */
/**** format: struclvlind2,^ifthenstmt,^ifthendo,^ifthen,^indnoniterdo       */
/**** format: ^inditerdo,^indnoniterend,^indthenelse,case,^indproc,^indend   */
/**** format: ^delnl,^insnl,comcol41,^indcom,^indblkcom,linecom,^indcomtxt   */

ted_gtabout_:			/* process out pseudo-tabs globally  */
      proc (ted_support_p, msg, code);
      mode = "g";
      goto global;

dcl (msg		char (168) var,
     code		fixed bin (35)) parm;

ted_vtabout_:			/* process out pseudo-tabs globally  */
      entry (ted_support_p, msg, code);
      mode = "v";
global:
      if (ted_support.version ^= ted_support_version_2)
      then do;
         code = error_table_$unimplemented_version;
         return;
      end;
      call proc_expr (ted_support_p, msg, code);
      if (code ^= 0)
      then return;
      goto common;

ted_tabout_:			/* process out pseudo-tabs	       */
      entry (ted_support_p, msg, code);
      mode = " ";

      if (ted_support.version ^= ted_support_version_2)
         & (ted_support.version ^= 1)
      then do;
         code = error_table_$unimplemented_version;
         return;
      end;

common:
      delim = rchr (req.cc);
      req.cc = req.cc + 1;		/* process the tab specs	       */
      substr (tabmarks, 1, 1) = delim;
      tab = " ";
      last_tab = 0;
      tabchar = rchr (req.cc);
      j = req.cc + 1;
      if (rchr (j) = delim)		/* if none specified,	       */
      then do;			/*  use system settings	       */
gb2b:
         do j = 11 to length (tab) by 10;
	  substr (tab, j, 1) = "L";
	  last_tab = j;
         end;
         req.cc = req.cc + 1;
         goto gb2a;
      end;
      num = 0;
      do req.cc = j to req.de;	/* walk across request line	       */
         tc = rchr (req.cc);
         nd = index (tabmarks, tc);
         if (nd ^= 0)
         then do;
	  if (num = 0)
	  then goto skipit;
	  if (num > length (tab) - 4)
	  then do;
	     msg = "Sts) Tabstob >";
	     pic3 = length (tab) - 4;
	     msg = msg || pic3;
	     code = tederror_table_$Error_Msg;
	     return;
	  end;
	  last_tab = max (num, last_tab);   /* remember rightmost stop     */
	  if (nd > 5)
	  then nd = nd - 3;		/* account for upper case	       */
	  if (nd < 3)
	  then nd = 3;
				/* plug in the stop		       */
	  substr (tab, num, 1) = substr (tabmarks, nd, 1);
	  num = 0;
	  if (rchr (req.cc + 1) = ",")
	  then req.cc = req.cc + 1;
	  if (rchr (req.cc + 1) = delim)
	  then do;
	     req.cc = req.cc + 1;
	     goto gb2a;
	  end;
	  if (tc = delim)
	  then goto gb2a;
         end;
         else do;
	  nd = index ("0123456789", tc);
	  if (nd = 0)
	  then do;
	     msg = "Sbd) Bad decimal digit.";
	     code = tederror_table_$Error_Msg;
	     return;
	  end;
	  num = num * 10 + nd - 1;
         end;
skipit:
      end;
      if (mode = " ")
      then code = tederror_table_$No_Delim2;
      else code = tederror_table_$No_Delim3;
      return;
gb2a:
      code = 0;
      req.nc = req.cc + 1;
      last_tab = last_tab - 1;
      if (mode = " ")
      then call worker;
      else call do_global (worker, mode, ted_support_p, msg, code);
      if (code = 0)
      then do;
         current = out.de;		/* tell ted where "." now is	       */
         code = tederror_table_$Copy_Set;  /* tell ted to finish up	       */
      end;
      return;%page;
worker: proc;
      
         visi, viso = 0;
         save_de = out.de;
         tabdone = "0"b;
         do ic = inp.sb to inp.se;
	  ch = ichr (ic);
	  if (viso >= last_tab)	/* if we're beyond last stop	       */
	  then if (ch = tabchar)	/* ..and its a tab		       */
	  then do;		/* ..just place a SP in its place    */
	     ch = " ";
	     tabdone = "1"b;	/* this switch is necessary because  */
	  end;			/* ..tabchar may be \040	       */
	  if (ichr (ic + 1) = BSP)
	  then do;		/* grab all parts of an overstrike   */
	     ochr (out.de + 1) = ch;
	     out.de = out.de + 1;
	     do while (ichr (ic + 1) = BSP);
	        substr (ostr, out.de + 1, 2) = substr (istr, ic + 1, 2);
	        out.de = out.de + 2;
	        ic = ic + 2;
	     end;
	     visi = visi + 1;	/* input visual		       */
	     viso = viso + 1;	/* ..and output visual go up	       */
	  end;
	  else if (ch = tabchar) & ^tabdone
	  then do;		/* HEY! found a tab		       */
	     SPct = 1;
	     do j = viso to length (tab) - 3   /* look for the next stop   */
	        while (substr (tab, j + 2, 1) = " ");
	        SPct = SPct + 1;
	     end;
	     if (substr (tab, j + 2, 1) = "L") /* if it is a left-set      */
	     then do;		/* ..add the needed space on right   */
	        substr (ostr, out.de + 1, SPct) = " ";
	        out.de = out.de + SPct;
	     end;
	     else do;
	        if (substr (tab, j + 2, 1) = "C") /* if centering,	       */
	        then L = divide (SPct, 2, 24, 0); /* ..use half the space  */
	        else L = SPct;	/* ..otherwise use it all	       */
	        R = SPct - L;	/* then what is left over?	       */
	        hold_leng = out.de - save_de;  /* pull out tabb'ed data    */
	        hold = substr (ostr, save_de + 1, hold_leng);
	        hold_leng = hold_leng + R;  /* reset output length	       */
	        out.de = save_de;
	        substr (ostr, out.de + 1, L) = " ";  /* put in left SPs    */
	        out.de = out.de + L;
	        substr (ostr, out.de + 1, hold_leng) = hold;  /* then put  */
	        out.de = out.de + hold_leng;   /* ..back the data	       */
	     end;
	     if (ch = HT)		/* don't let an HT mess up the       */
	     then visi = visi + (10 - mod (visi, 10));  /* ..visual pos    */
	     else visi = visi + 1;
	     viso = viso + SPct;
	  end;
	  else if (ch = HT)		/* we check for this because the tab */
	  then do;		/* ..may not be an HT, but HT's      */
	     visi = visi + 1;	/* ..cause visual things which are   */
	     viso = viso + 1;	/* ..maintained		       */
	     if (mod (visi, 10) ^= 0)
	     then ic = ic - 1;
	     ochr (out.de + 1) = " ";
	     out.de = out.de + 1;
	  end;
	  else do;		/* just an ordinary character	       */
	     ochr (out.de + 1) = ch;
	     out.de = out.de + 1;
	     visi = visi + 1;
	     viso = viso + 1;
	     if (ch = NL)		/* This "ordinary" character happens */
	     then do;		/* ..to finish up a line	       */
	        visi, viso = 0;
	        tabdone = "0"b;
	        save_de = out.de;
	     end;
	  end;
	  if (substr (tab, viso + 1, 1) ^= " ")	  /* when we pass over     */
	  then save_de = out.de;	/* ..a stop, remember where we are   */
         end;

      end worker;%page;
dcl last_tab	fixed bin (24);
dcl tab		char (204);
%include ted_support;

dcl L		fixed bin (24);
dcl R		fixed bin (24);
dcl SPct		fixed bin (24);
dcl ch		char (1);
dcl delim		char (1);
dcl hold		char (200);
dcl hold_leng	fixed bin (24);
dcl ic		fixed bin (24);
dcl j		fixed bin (24);
dcl mode		char (1);
dcl nd		fixed bin (24);
dcl num		fixed bin;
dcl pic3		pic "zz9";
dcl save_de	fixed bin (24);
dcl tabchar	char (1);
dcl tabdone	bit (1);
dcl tabmarks	char (8) int static init ("/,LCRlcr");
dcl tc		char (1);
dcl visi		fixed bin (24);
dcl viso		fixed bin (24);
dcl BSP		char (1) int static init ("");
dcl HT		char (1) int static init ("	");
dcl NL		char (1) int static init ("
");

   end ted_gtabout_;
