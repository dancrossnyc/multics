/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/**** format: ind3,ll80,initcol6,indattr,^inddcls,dclind4,idind16	       */
/**** format: struclvlind2,^ifthenstmt,^ifthendo,^ifthen,^indnoniterdo       */
/**** format: ^inditerdo,^indnoniterend,^indthenelse,case,^indproc,^indend   */
/**** format: ^delnl,^insnl,comcol41,^indcom,^indblkcom,linecom,^indcomtxt   */

ted_tabin_:			/* convert SPs to HTs, rtrim	       */
     proc (ted_support_p, msg, code);

dcl msg		char (168) var,
    code		fixed bin (35);

      if (ted_support.version ^= ted_support_version_2)
      then do;
         code = error_table_$unimplemented_version;
         return;
      end;
      req.nc = req.cc;		/* any request data after be used    */
      SPct, HTct, vis = 0;		/* assumes starting at beg-of-line   */
      do i = inp.sb to inp.se;	/* step thru all chars addressed     */
         ch = ichr (i);		/* get next char		       */
         ochr (out.de + 1) = ch;	/* and put it		       */
         out.de = out.de + 1;		/* ..to output segment	       */
         if (ch = SP)
         then do;			/* we have a space		       */
	  SPct = SPct + 1;		/* count the space string	       */
	  vis = vis + 1;		/* count the visible location	       */
	  if (mod (vis, 10) = 0)
	  then do;		/* if reached a tabstop..	       */
	     if (SPct > 1)
	     then do;		/* ..and more than one space here    */
	        out.de = out.de - SPct;
	        ochr (out.de + 1) = HT;  /* replace the spaces with an HT  */
	        out.de = out.de + 1;
	        HTct = HTct + 1;	/* (count how HTs here)	       */
	     end;
	     SPct = 0;		/* no spaces left over here	       */
	  end;
         end;
         else if (ch = HT)
         then do;			/* we have a tab		       */
	  if (SPct > 0)
	  then do;		/* ..and there were spaces before    */
	     out.de = out.de - SPct;
	     ochr (out.de + 1) = HT;	/* strip 'em out		       */
	     out.de = out.de + 1;
	  end;
	  SPct = 0;
	  vis = vis + mod (vis, 10);	/* keep track of visual position     */
	  HTct = HTct + 1;
         end;
         else if (ch = NL)
         then do;			/* we have hit end of line	       */
	  out.de = out.de - SPct - HTct - 1;   /* strip trailing HT,SPs    */
	  ochr (out.de + 1) = NL;
	  out.de = out.de + 1;
	  SPct, HTct, vis = 0;	/* reset for next line beginning     */
         end;
         else do;			/* "ordinary" char, it stays	       */
	  SPct, HTct = 0;		/* no SP,HTs pending	       */
	  if (ch = BSP)		/* don't let BSPs foul up the	       */
	  then vis = vis - 1;	/* ..visual position	       */
	  else vis = vis + 1;
         end;
      end;
      current = out.de;
      code = tederror_table_$Copy_Set;
      return;%page;
%include ted_support;


dcl lb		fixed bin (24),	/* first character to process	       */
    le		fixed bin (24);	/* last character to process	       */

dcl HTct		fixed bin (24);
dcl i		fixed bin (24);
dcl SPct		fixed bin (24);
dcl ch		char (1);
dcl vis		fixed bin (24);
dcl SP		char (1) int static init (" ");
dcl HT		char (1) int static init ("	");
dcl BSP		char (1) int static init ("");
dcl NL		char (1) int static init ("
");

   end ted_tabin_;
