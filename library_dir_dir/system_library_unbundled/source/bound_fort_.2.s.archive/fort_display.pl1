/* ******************************************************
   *                                                    *
   * Copyright, (C) Honeywell Limited, 1983             *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   ****************************************************** */

/* format: style3,^delnl,ifthenstmt,^indattr,indcom,indend,^inditerdo,^indnoniterdo,indnoniterend,linecom */
fort_display:
     proc options (variable);

	/* Written:	June 1976 eew

Modified:
	31 January 1977 David Levin - fix bug with "display" cmd.
	24 February 1977 Gabriel Chang - to display the quadruple region.
	25 October 1978 Paul Smee - changes for large common and arrays.
*/

dcl	display_entries$fdisplay entry (ptr) external static variable;

dcl	com_err_ entry options (variable);
dcl	cu_$arg_count entry (fixed bin);
dcl	cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl	cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl	cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));

dcl	arg_ptr ptr;
dcl	code fixed bin (35);
dcl	p_name char (12) aligned int static options (constant) init ("fort_display");

dcl	(i, nargs, arg_len) fixed bin;
dcl	j fixed bin (18);
dcl	arg_error bit (1) aligned;
dcl	decimal_base bit (1) aligned;
dcl	have_value bit (1) aligned;
dcl	starting_offset_set bit (1) aligned;
dcl	stopping_offset_set bit (1) aligned;
dcl	two_args bit (1) aligned;

dcl	an_arg char (arg_len) based (arg_ptr);

dcl	(addr, string, unspec, verify) builtin;

dcl	1 command_structure structure aligned,
%include fort_command_structure;

	/* Begin by initializing. */

	arg_error = "0"b;				/* check all arguments, but remember errors. */
	decimal_base = "0"b;			/* numeric base is octal by default */
	have_value = "0"b;				/* no numeric field encountered yet. */
	two_args = "0"b;				/* Off - one arg only; ON - one or two */
	starting_offset_set = "0"b;
	stopping_offset_set = "0"b;

	unspec (command_structure) = "0"b;

	/* Now get user arguments */

	call cu_$arg_count (nargs);

	if nargs = 0
	then do;					/* no user arguments, use default */
	     operator.display = "1"b;
	     end;

	/* process all user arguments */

	else do;

	     do i = 1 to nargs;

		call cu_$arg_ptr (i, arg_ptr, arg_len, code);
						/* get next argument string */

		if operator.declaration & dcl_name = ""
		then dcl_name = an_arg;

		else if an_arg = "dec"
		then if have_value
		     then do;
			call com_err_ (0, p_name, "Numeric value preceded ""dec"" keyword.");
			arg_error = "1"b;
			end;
		     else decimal_base = "1"b;

		else if an_arg = "op" | an_arg = "operand"
		then region.operand = "1"b;

		else if an_arg = "pl" | an_arg = "polish"
		then region.polish = "1"b;

		else if an_arg = "quad" | an_arg = "qd"
		then region.quadruple = "1"b;

		else if an_arg = "display" | an_arg = "ds"
		then if (string (operator.with_argument) ^= "0"b) & ^operator.display
		     then do;
			call com_err_ (0, p_name, "^a conflicts with previous argument", an_arg);
			arg_error = "1"b;
			end;
		     else two_args, operator.display = "1"b;

		else if an_arg = "walk"
		then options.walk = "1"b;

		else if an_arg = "dump"
		then operator.dump = "1"b;

		else if an_arg = "st"
		then if string (operator.with_argument) ^= "0"b
		     then do;
			call com_err_ (0, p_name, "^a conflicts with previous argument", an_arg);
			arg_error = "1"b;
			end;
		     else decimal_base, operator.stmnt = "1"b;

		else if an_arg = "dcl"
		then if string (operator.with_argument) ^= "0"b
		     then do;
			call com_err_ (0, p_name, "^a conflicts with previous argument", an_arg);
			arg_error = "1"b;
			end;
		     else operator.declaration = "1"b;

		else if an_arg = "cur_statement" | an_arg = "cur_stmnt" | an_arg = "cur_st"
		then operator.cur_stmnt = "1"b;

		else if an_arg = "brief" | an_arg = "bf"
		then options.brief = "1"b;

		else if an_arg = "consts"
		then operator.list_word_consts = "1"b;

		else if an_arg = "char_consts"
		then operator.list_char_constants = "1"b;

		else if an_arg = "lib_names"
		then operator.list_lib_names = "1"b;

		else if an_arg = "summary"
		then operator.node_summary = "1"b;

		else if an_arg = "bucket"
		then if string (operator.with_argument) ^= "0"b
		     then do;
			call com_err_ (0, p_name, "^a conflicts with previous argument", an_arg);
			arg_error = "1"b;
			end;
		     else decimal_base, two_args, operator.bucket = "1"b;

		else if substr (an_arg, 1, 10) = "subprogram" | an_arg = "subpgm"
		then operator.list_subprograms = "1"b;

		else if verify (substr (an_arg, 1, 1), "0123456789") = 0
		then do;
		     have_value = "1"b;

		     if string (region) = "0"b then region.operand = "1"b;

		     if string (operator.with_argument) = "0"b then operator.display = "1"b;

		     if decimal_base
		     then j = cv_dec_check_ (an_arg, code);
		     else j = cv_oct_check_ (an_arg, code);

		     if code ^= 0 | j < 0
		     then do;
			call com_err_ (0, p_name, "Syntax error in numeric constant. ^a", an_arg);
			arg_error = "1"b;
			end;

		     if starting_offset_set
		     then if stopping_offset_set | ^two_args
			then do;
			     call com_err_ (0, p_name, "Too many numeric constants.");
			     arg_error = "1"b;
			     end;
			else do;
			     stopping_offset = j;
			     stopping_offset_set = "1"b;
			     end;
		     else do;
			starting_offset = j;
			stopping_offset = j;
			starting_offset_set = "1"b;
			end;
		     end;

		else if an_arg = ""			/* ignore null arguments */
		then ;

		else do;
		     call com_err_ (0, p_name, "Unrecognized argument, ^a.", an_arg);
		     arg_error = "1"b;
		     end;
		end;				/* loop thru arguments */

	     /* validate our input */

	     if operator.declaration
	     then do;
		if dcl_name = ""
		then do;
		     call com_err_ (0, p_name, "No name given.");
		     arg_error = "1"b;
		     end;

		if have_value | decimal_base
		then do;
		     call com_err_ (0, p_name, "dcl conflicts with other arguments.");
		     arg_error = "1"b;
		     end;
		end;

	     else if operator.dump
	     then if string (region) = "0"b
		then region.operand = "1"b;
		else ;

	     else if have_value			/* remaining tests assume no value given */
	     then ;

	     else if string (operator.number_arg) ^= "0"b /* must have arg */
	     then do;
		call com_err_ (0, p_name, "No number given.");
		arg_error = "1"b;
		end;

	     else if string (operator.without_args) = "0"b
	     then do;
		call com_err_ (0, p_name, "No operator given.");
		arg_error = "1"b;
		end;

	     end;					/* do block for user arguments */

	if ^arg_error then call display_entries$fdisplay (addr (command_structure));

     end fort_display;
