/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1987 *
        *                                                         *
        * Copyright, (C) Honeywell Limited, 1983                  *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-07-14,BWong), approve(86-07-14,MCR7286), audit(86-07-17,Ginter),
     install(86-07-28,MR12.0-1105):
     Fix fortran bug 468.
  2) change(86-07-14,BWong), approve(86-07-14,MCR7382), audit(86-07-17,Ginter),
     install(86-07-28,MR12.0-1105):
     Fix fortran bugs 473, 478, and 480.
  3) change(87-06-23,RWaters), approve(87-06-23,MCR7703), audit(87-07-10,Huen),
     install(87-08-06,MR12.1-1069):
     Implemented SCR 6315: Added a fortran runtime error-handler argument.
                                                   END HISTORY COMMENTS */


/* format: style3,^delnl,linecom */
fort_defaults_:
     proc;

/* Created:	June 1983, Michael Mabey

   Modified:
          12 May 87, RW SCP 6315 added control args -debug_io (-dbio)
                    and -no_debug_io (-ndbio)
	19 Feb 86, BW & AG - 473.a: Fix vla_auto, vla_static,
		very_large_common, la_auto, and la_static control
		arguments so they work in the following manner:
		 o vla => vla_auto, vla_static, vlc, la_auto, la_static
		   and vla_parm (unless no_vla_parm is specified)
		 o la => la_auto, la_static
		 o vla_auto | vla_static | vlc => vla_parm (unless 
		   no_vla_parm is specified)
		 o nvla disables all vla type arguments (except vla_parm
		   when vla_parm is specified) and leaves on all la type
		   arguments that are directly set.
		 o nla disables all la type arguments
		 o vla_auto => la_auto
		 o vla_static => la_static
		Move code to set maximum array sizes from
		fort_defaults_$check_global_args to ext_parse so the
		values are set properly.
	11 Dec 85, BW - 480: Check for full_optimize before setting
		subscriptrange, stringrange, and check_multiply in ansi77.
          27 Nov 85, SH - 478: Allows "-severity N" as well as "-severityN"
	09 Oct 85, BW - 473: Add vla_auto, vla_static, very_large_common,
		la_auto, and la_static control arguments.  This causes
		the following implications:
		 o vla => vla_auto, vla_parm, vla_static, vlc,
			la_auto, la_static
		 o la => la_auto, la_static
		 o vla_auto | vla_static | vlc => vla_parm
		 o nvla disables all vla type arguments that are set but
		   leaves on all la type arguments that are set.
		   Thus -vla -nvla (in this order only) => -la
		 o nla disables all la type arguments that are set
		 o whenever vla_auto is set, la_auto must be set
		 o whenever vla_static is set, la_static must be set
	12 Sept 85, BW - 468: Indicate use of "-no_auto_zero" in listing
		header.
	05 Oct 84, MM - hfp_acs: To check if a user has access to use
		HFP mode, add a dummy call to a fort_hfp_math routine
		if the "hfp" user option is specified.
          03 Aug 84, BW - 434: Allow option names of up to 32 characters.
	28 Mar 84, MM - Install HFP support.
	24 Oct 83, MM - 409: Prevent -nstrg and -nsubrg from giving an
		"incompatible args" error message when used with -optimize
	19 Sept 83, MM - 403: Fix defaulting to table if brief_table is
		specified.
*/

/* format: off */

/* Although the length of "names" is 33 in the following structure, the
   individual option names must never exceed 32 characters. */

dcl   cmd2_string_ptr	ptr;
dcl   cmd2_string_len	fixed bin(21);
dcl   code		fixed bin(35);

dcl  	01 cmd_names aligned static options (constant),
	   02 space char(1) unaligned init(" "),
	   02 names (111) char(33) unaligned init(
	"ansi66",					/* 1 */
	"ansi77",					/* 2 */
	"auto",					/* 3 */
	"auto_zero",				/* 4 */
	"binary_floating_point", "bfp",		/* 5, 6 */
	"brief", "bf",				/* 7, 8 */
	"brief_table", "bftb",			/* 9, 10 */
	"card",					/* 11 */
	"check", "ck",				/* 12, 13 */
	"check_multiply", "ckmpy",			/* 14, 15 */
	"consolidate", "cons",			/* 16, 17 */
	"debug", "db",				/* 18, 19 */
	"debug_cg",				/* 20 */
          "debug_io", "dbio",                               /* 21, 22 */
	"default_full", "dff",			/* 23, 24 */
	"default_safe", "dfs",			/* 25, 26*/
	"fold",					/* 27 */
	"free",					/* 28 */
	"full_optimize", "full_ot",			/* 29, 30 */
	"hexadecimal_floating_point", "hfp",		/* 31, 32 */
	"la_auto",				/* 33 */
	"la_static",				/* 34 */
	"large_array", "la",			/* 35, 36 */
	"line_numbers", "ln",			/* 37, 38 */
	"list", "ls",				/* 39, 40 */
	"long", "lg",				/* 41, 42 */
	"long_profile", "lpf",			/* 43, 44 */
	"map",					/* 45 */
	"nlno",					/* 46 */
	"no_auto_zero",				/* 47 */
	"no_check", "nck",				/* 48, 49 */
	"no_check_multiply", "nckmpy",		/* 50, 51 */
          "no_debug_io", "ndbio",                           /* 52, 53 */
	"no_fold",				/* 54 */
	"no_large_array", "nla",			/* 55, 56 */
	"no_line_numbers", "nln",			/* 57, 58 */
	"no_map",					/* 59 */
	"no_optimize", "not",			/* 60, 61 */
	"no_stringrange", "nstrg", "nostrg",		/* 62, 63, 64 */
	"no_subscriptrange", "nsubrg", "nosubrg",	/* 65, 66, 67 */
	"no_table", "ntb",				/* 68, 69 */
	"no_version",				/* 70 */
	"no_very_large_array", "nvla",		/* 71, 72 */
	"no_vla_parm",				/* 73 */
	"non_relocatable", "nrlc",			/* 74, 75 */
	"optimize", "ot",				/* 76, 77 */
	"profile", "pf",				/* 78 79 */
	"relocatable", "rlc",			/* 80, 81 */
	"round",					/* 82 */
	"safe",					/* 83 */
	"safe_optimize", "safe_ot",			/* 84, 85 */
	"source", "sc",				/* 86, 87 */
	"static",					/* 88 */
	"stringrange", "strg",			/* 89, 90 */
	"subscriptrange", "subrg",			/* 91, 92 */
	"super",					/* 93 */
	"symbols", "sb",				/* 94, 95 */
	"table", "tb",				/* 96, 97 */
	"time", "tm",				/* 98, 99 */
	"time_ot",				/* 100 */
	"top_down",				/* 101 */
	"truncate", "tc",				/* 102, 103 */
	"version",				/* 104 */
	"very_large_array", "vla",			/* 105, 106 */
	"very_large_common", "vlc",			/* 107, 108 */
	"vla_auto",				/* 109 */
	"vla_parm",				/* 110 */
	"vla_static");				/* 111 */
/* format: on */

/* parameters */

dcl	arg_error		aligned bit (1);
dcl	arg_fd_ptr	ptr;
dcl	arg_num		fixed bin;
dcl	arg_list_ptr	ptr;
dcl	auto_option	bit (1) aligned;
dcl	cmd_string_len	fixed bin;
dcl	cmd_string_ptr	ptr;
dcl	fd_ptr		ptr;
dcl	fixed_24		fixed bin (24);
dcl	fo_ptr		ptr;
dcl	fort_op_ptr	ptr;
dcl	global_fd_ptr	ptr;
dcl	global_fo_ptr	ptr;
dcl	op_string		char (256) varying;
dcl	print_message	entry variable options (variable);
dcl	01 shared_vars	aligned like fort_shared_variables based (shared_var_ptr);
dcl	shared_var_ptr	ptr;
dcl	static_option	bit (1) aligned;
dcl	VLA_words_per_seg	fixed bin (19);

/* automatic */

dcl	01 arg_fd		based (arg_fd_ptr) like fortran_declared;
dcl	cmd		fixed bin;
dcl	cmd_string	based (cmd_string_ptr) char (cmd_string_len);
dcl	cmd2_string	based (cmd2_string_ptr) char (cmd2_string_len);
dcl	dummy_var		bit (72);
dcl	01 fd		based (fd_ptr) like fortran_declared;
dcl	01 fo		based (fo_ptr) like fortran_options;
dcl	01 fort_op	structure based (fort_op_ptr),
	  02 user_options	aligned like fortran_options,
	  02 system_options aligned,
	    03 is_fast	bit (1) unaligned,
	    03 not_needed	bit (2) unaligned,
	    03 VLA_is_256K	bit (1) unaligned,
	    03 pad	bit (32) unaligned;
dcl	01 global_fd	based (global_fd_ptr) like fortran_declared;
dcl	01 global_fo	based (global_fo_ptr) like fortran_options;
dcl	i		fixed bin;

/* builtins */

dcl	(convert, ltrim, substr)
			builtin;
dcl	cannot_enable_HFP_mode
			condition;

/* external */

dcl	com_err_		entry options (variable);
dcl	error_table_$badopt fixed bin (35) ext static;
dcl	fort_bfp_math$conv_r_to_i_round
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$conv_dp_to_i_round
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$conv_cp_to_i_round
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$conv_i_to_r_round
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$conv_dp_to_r_round
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$conv_cp_to_r_round
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$conv_i_to_dp_round
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$conv_r_to_dp_round
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$conv_cp_to_dp_round
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$conv_i_to_cp_round
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$conv_r_to_cp_round
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$conv_dp_to_cp_round
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$conv_r_to_i_trunc
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$conv_dp_to_i_trunc
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$conv_cp_to_i_trunc
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$conv_i_to_r_trunc
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$conv_dp_to_r_trunc
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$conv_cp_to_r_trunc
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$conv_i_to_dp_trunc
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$conv_r_to_dp_trunc
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$conv_cp_to_dp_trunc
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$conv_i_to_cp_trunc
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$conv_r_to_cp_trunc
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$conv_dp_to_cp_trunc
			ext entry (bit (72), fixed bin (35)) returns (bit (72));

dcl	fort_bfp_math$binop_i_i_round
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$binop_r_i_round
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$binop_r_r_round
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$binop_i_r_round
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$binop_dp_i_round
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$binop_dp_r_round
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$binop_dp_dp_round
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$binop_r_dp_round
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$binop_i_dp_round
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$binop_cp_i_round
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$binop_cp_r_round
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$binop_cp_dp_round
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$binop_cp_cp_round
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$binop_dp_cp_round
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$binop_r_cp_round
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$binop_i_cp_round
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));

dcl	fort_bfp_math$binop_i_i_trunc
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$binop_r_i_trunc
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$binop_r_r_trunc
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$binop_i_r_trunc
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$binop_dp_i_trunc
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$binop_dp_r_trunc
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$binop_dp_dp_trunc
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$binop_r_dp_trunc
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$binop_i_dp_trunc
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$binop_cp_i_trunc
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$binop_cp_r_trunc
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$binop_cp_dp_trunc
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$binop_cp_cp_trunc
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$binop_dp_cp_trunc
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$binop_r_cp_trunc
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$binop_i_cp_trunc
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));

dcl	fort_bfp_math$comp_i_i
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$comp_r_i
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$comp_r_r
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$comp_i_r
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$comp_dp_i
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$comp_dp_r
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$comp_dp_dp
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$comp_r_dp
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$comp_i_dp
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$comp_cp_cp
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));

dcl	fort_bfp_math$bad_data_types
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$unary_bad_data
			ext entry (bit (72), fixed bin (35)) returns (bit (72));

dcl	fort_bfp_math$binop_lg_lg
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$binop_ch_ch
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$comp_lg_lg
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$comp_ch_ch
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$conv_ch_to_ch
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_bfp_math$unary_no_op
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$conv_r_to_i_round
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$conv_dp_to_i_round
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$conv_cp_to_i_round
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$conv_i_to_r_round
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$conv_dp_to_r_round
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$conv_cp_to_r_round
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$conv_i_to_dp_round
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$conv_r_to_dp_round
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$conv_cp_to_dp_round
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$conv_i_to_cp_round
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$conv_r_to_cp_round
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$conv_dp_to_cp_round
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$conv_r_to_i_trunc
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$conv_dp_to_i_trunc
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$conv_cp_to_i_trunc
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$conv_i_to_r_trunc
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$conv_dp_to_r_trunc
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$conv_cp_to_r_trunc
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$conv_i_to_dp_trunc
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$conv_r_to_dp_trunc
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$conv_cp_to_dp_trunc
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$conv_i_to_cp_trunc
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$conv_r_to_cp_trunc
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$conv_dp_to_cp_trunc
			ext entry (bit (72), fixed bin (35)) returns (bit (72));

dcl	fort_hfp_math$binop_i_i_round
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$binop_r_i_round
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$binop_r_r_round
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$binop_i_r_round
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$binop_dp_i_round
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$binop_dp_r_round
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$binop_dp_dp_round
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$binop_r_dp_round
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$binop_i_dp_round
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$binop_cp_i_round
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$binop_cp_r_round
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$binop_cp_dp_round
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$binop_cp_cp_round
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$binop_dp_cp_round
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$binop_r_cp_round
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$binop_i_cp_round
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));

dcl	fort_hfp_math$binop_i_i_trunc
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$binop_r_i_trunc
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$binop_r_r_trunc
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$binop_i_r_trunc
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$binop_dp_i_trunc
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$binop_dp_r_trunc
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$binop_dp_dp_trunc
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$binop_r_dp_trunc
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$binop_i_dp_trunc
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$binop_cp_i_trunc
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$binop_cp_r_trunc
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$binop_cp_dp_trunc
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$binop_cp_cp_trunc
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$binop_dp_cp_trunc
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$binop_r_cp_trunc
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$binop_i_cp_trunc
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));

dcl	fort_hfp_math$comp_i_i
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$comp_r_i
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$comp_r_r
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$comp_i_r
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$comp_dp_i
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$comp_dp_r
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$comp_dp_dp
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$comp_r_dp
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$comp_i_dp
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$comp_cp_cp
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));

dcl	fort_hfp_math$bad_data_types
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$unary_bad_data
			ext entry (bit (72), fixed bin (35)) returns (bit (72));

dcl	fort_hfp_math$binop_lg_lg
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$binop_ch_ch
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$comp_lg_lg
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$comp_ch_ch
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$conv_ch_to_ch
			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
dcl	fort_hfp_math$unary_no_op
			ext entry (bit (72), fixed bin (35)) returns (bit (72));
dcl	cu_$arg_ptr_rel	entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);


/* include files */

%include fort_options;
dcl	01 fort_shared_variables
			structure aligned,
%include fort_shared_vars;

	return;					/* illegal entry */

argument:
     entry (cmd_string_ptr, cmd_string_len, arg_num, arg_list_ptr, fd_ptr, arg_error);
	begin;

dcl	arg_case		(0:111) label variable init (arg_not_found, arg_ansi66, arg_ansi77, arg_auto,
			arg_auto_zero, arg_binary_floating_point, arg_binary_floating_point, arg_brief, arg_brief,
			arg_brief_table, arg_brief_table, arg_card, arg_check, arg_check, arg_check_multiply,
			arg_check_multiply, arg_consolidate, arg_consolidate, arg_debug, arg_debug, arg_debug_cg, arg_debug_io, arg_debug_io,
			arg_default_full, arg_default_full, arg_default_safe, arg_default_safe, arg_fold,
			arg_free, arg_full_optimize, arg_full_optimize, arg_hexadecimal_floating_point,
			arg_hexadecimal_floating_point, arg_la_auto, arg_la_static,
			arg_large_array, arg_large_array, arg_line_numbers,
			arg_line_numbers, arg_list, arg_list, arg_long, arg_long, arg_long_profile,
			arg_long_profile, arg_map, arg_nlno, arg_no_auto_zero, arg_no_check, arg_no_check,
			arg_no_check_multiply, arg_no_check_multiply, 
	                    arg_no_debug_io, arg_no_debug_io, arg_no_fold, arg_no_large_array,
			arg_no_large_array, arg_no_line_numbers, arg_no_line_numbers, arg_no_map, arg_no_optimize,
			arg_no_optimize, arg_no_stringrange, arg_no_stringrange, arg_no_stringrange,
			arg_no_subscriptrange, arg_no_subscriptrange, arg_no_subscriptrange, arg_no_table,
			arg_no_table, arg_no_version, arg_no_very_large_array, arg_no_very_large_array,
			arg_no_vla_parm, arg_non_relocatable, arg_non_relocatable, arg_optimize, arg_optimize,
			arg_profile, arg_profile, arg_relocatable, arg_relocatable, arg_round, arg_safe,
			arg_safe_optimize, arg_safe_optimize, arg_source, arg_source, arg_static, arg_stringrange,
			arg_stringrange, arg_subscriptrange, arg_subscriptrange, arg_super, arg_symbols,
			arg_symbols, arg_table, arg_table, arg_time, arg_time, arg_time_ot, arg_top_down,
			arg_truncate, arg_truncate, arg_version, arg_very_large_array, arg_very_large_array,
			arg_very_large_common, arg_very_large_common, arg_vla_auto, arg_vla_parm, arg_vla_static);

	     cmd = index (string (cmd_names), " " || substr (cmd_string, 2, cmd_string_len - 1) || " ");
	     if cmd ^= 0
	     then cmd = (cmd + 32) / 33;
	     goto arg_case (cmd);

arg_not_found:					/* cmd_string not found */

	     if substr (cmd_string, 1, 9) = "-severity"
	     then do;
		     if (cmd_string_len = 9)
		     then do;
			     arg_num = arg_num + 1;
			     call cu_$arg_ptr_rel (arg_num, cmd2_string_ptr, cmd2_string_len, code,
				arg_list_ptr);
			     if (code ^= 0) | (cmd2_string_len = 0)
			     then do;
				     arg_num = arg_num - 1;
				     call com_err_ (0, "new_fortran",
					"Missing Severity number (1, 2, 3, or 4).");
				     arg_error = "1"b;
				end;
			     else call parse_severity (cmd2_string);
			end;
		     else call parse_severity (substr (cmd_string, 10));
		end;

	     else if substr (cmd_string, 1, 3) = "-sv"
	     then do;
		     if (cmd_string_len = 3)
		     then do;
			     arg_num = arg_num + 1;
			     call cu_$arg_ptr_rel (arg_num, cmd2_string_ptr, cmd2_string_len, code,
				arg_list_ptr);
			     if (code ^= 0) | (cmd2_string_len = 0)
			     then do;
				     arg_num = arg_num - 1;
				     call com_err_ (0, "new_fortran",
					"Missing Severity number (1, 2, 3, or 4).");
				     arg_error = "1"b;
				end;
			     else call parse_severity (cmd2_string);
			end;
		     else call parse_severity (substr (cmd_string, 4));
		end;


	     else do;
		     call com_err_ (error_table_$badopt, "new_fortran", """^a""", cmd_string);
		     arg_error = "1"b;
		end;
	     return;

arg_ansi66:					/* "ansi66" */
	     fd.ansi66 = "1"b;
	     fd.ansi77 = "0"b;
	     return;

arg_ansi77:					/* "ansi77" */
	     fd.ansi77 = "1"b;
	     fd.ansi66 = "0"b;
	     return;

arg_auto:						/* "auto" */
	     fd.auto = "1"b;
	     fd.static = "0"b;
	     return;

arg_auto_zero:					/* "auto_zero" */
	     fd.auto_zero = "1"b;
	     fd.no_auto_zero = "0"b;
	     return;

arg_binary_floating_point:				/* "binary_floating_point", "bfp" */
	     fd.binary_floating_point = "1"b;
	     fd.hexadecimal_floating_point = "0"b;
	     return;

arg_brief:					/* "brief", "bf" */
	     fd.brief = "1"b;
	     fd.long = "0"b;
	     return;

arg_brief_table:					/* "brief_table", "bftb" */
	     fd.brief_table = "1"b;
	     fd.table = "0"b;
	     fd.no_table = "0"b;
	     return;

arg_card:						/* "card" */
	     fd.card = "1"b;
	     fd.free = "0"b;
	     return;

arg_check:					/* "check", "ck" */
	     fd.check = "1"b;
	     fd.no_check = "0"b;
	     return;

arg_check_multiply:					/* "check_multiply", "ckmpy" */
	     fd.check_multiply = "1"b;
	     fd.no_check_multiply = "0"b;
	     return;

arg_consolidate:					/* "consolidate", "cons" */
	     fd.consolidate = "1"b;
	     fd.top_down = "0"b;
	     return;

arg_debug:					/* "debug", "db" */
	     fd.debug = "1"b;
	     return;

arg_debug_cg:					/* "debug_cg" */
	     fd.debug_cg = "1"b;
	     return;

arg_debug_io:					/* "debug_io", "dbio" */
	     fd.debug_io = "1"b;
	     fd.no_debug_io = "0"b;
	     return;

arg_default_full:					/* "default_full", "dff" */
	     fd.default_full = "1"b;
	     fd.default_safe = "0"b;
	     return;

arg_default_safe:					/* "default_safe", "dfs" */
arg_safe:						/* "safe" */
	     fd.default_safe = "1"b;
	     fd.default_full = "0"b;
	     return;

arg_fold:						/* "fold" */
	     fd.fold = "1"b;
	     fd.no_fold = "0"b;
	     return;

arg_free:						/* "free" */
	     fd.free = "1"b;
	     fd.card = "0"b;
	     return;

arg_hexadecimal_floating_point:			/* "hexadecimal_floating_point", "hfp" */
	     fd.hexadecimal_floating_point = "1"b;
	     fd.binary_floating_point = "0"b;
	     return;

arg_full_optimize:					/* "full_optimize", "full_ot" */
	     fd.full_optimize = "1"b;
	     fd.safe_optimize = "0"b;
	     fd.optimize = "0"b;
	     fd.no_optimize = "0"b;
	     return;

arg_la_auto:					/* "la_auto" */
	     fd.la_auto = "1"b;
	     fd.no_large_array = "0"b;
	     return;

arg_la_static:					/* "la_static" */
	     fd.la_static = "1"b;
	     fd.no_large_array = "0"b;
	     return;

arg_large_array:					/* "large_array", "la" */
	     fd.large_array = "1"b;
	     fd.no_large_array = "0"b;
	     return;

arg_line_numbers:					/* "line_numbers", "ln" */
	     fd.line_numbers = "1"b;
	     fd.no_line_numbers = "0"b;
	     return;

arg_list:						/* "list", "ls" */
	     fd.list = "1"b;
	     fd.map = "0"b;
	     fd.no_map = "0"b;
	     return;

arg_long:						/* "long", "lg" */
	     fd.long = "1"b;
	     fd.brief = "0"b;
	     return;

arg_long_profile:					/* "long_profile", "lpf" */
	     fd.long_profile = "1"b;
	     fd.profile = "0"b;
	     return;

arg_map:						/* "map" */
	     fd.map = "1"b;
	     fd.no_map = "0"b;
	     fd.list = "0"b;
	     return;

arg_nlno:						/* "nlno" */
	     call com_err_ (0, "new_fortran", "-nlno is obsolete. Use -line_numbers.");
	     arg_error = "1"b;
	     return;

arg_no_auto_zero:					/* "no_auto_zero" */
	     fd.no_auto_zero = "1"b;
	     fd.auto_zero = "0"b;
	     return;

arg_no_check:					/* "no_check", "nck" */
	     fd.no_check = "1"b;
	     fd.check = "0"b;
	     return;

arg_no_check_multiply:				/* "no_check_multiply", "nckmpy" */
	     fd.no_check_multiply = "1"b;
	     fd.check_multiply = "0"b;
	     return;

arg_no_debug_io:					/* "no_debug_io", "ndbio" */
              fd.no_debug_io = "1"b;
	    fd.debug_io = "0"b;
	    return;

arg_no_fold:					/* "no_fold" */
	     fd.no_fold = "1"b;
	     fd.fold = "0"b;
	     return;

arg_no_large_array:					/* "no_large_array", "nla" */
	     fd.no_large_array = "1"b;
	     fd.large_array = "0"b;
	     fd.la_auto = "0"b;
	     fd.la_static = "0"b;
	     return;

arg_no_line_numbers:				/* "no_line_numbers", "nln" */
	     fd.no_line_numbers = "1"b;
	     fd.line_numbers = "0"b;
	     return;

arg_no_map:					/* "no_map" */
	     fd.no_map = "1"b;
	     fd.map = "0"b;
	     fd.list = "0"b;
	     return;

arg_no_optimize:					/* "no_optimize", "not" */
	     fd.no_optimize = "1"b;
	     fd.full_optimize = "0"b;
	     fd.safe_optimize = "0"b;
	     fd.optimize = "0"b;
	     return;

arg_no_stringrange:					/* "no_stringrange", "nstrg", "nostrg" */
	     fd.no_stringrange = "1"b;
	     fd.stringrange = "0"b;
	     return;

arg_no_subscriptrange:				/* "no_subscriptrange", "nsubrg", "nosubrg" */
	     fd.no_subscriptrange = "1"b;
	     fd.subscriptrange = "0"b;
	     return;

arg_no_table:					/* "no_table", "ntb" */
	     fd.no_table = "1"b;
	     fd.table = "0"b;
	     fd.brief_table = "0"b;
	     return;

arg_no_version:					/* "no_version" */
	     fd.no_version = "1"b;
	     fd.version = "0"b;
	     return;

arg_no_very_large_array:				/* "no_very_large_array", "nvla" */
	     fd.no_very_large_array = "1"b;
	     fd.very_large_array = "0"b;
	     fd.very_large_common = "0"b;
	     fd.vla_auto = "0"b;
	     fd.vla_static = "0"b;
	     return;

arg_no_vla_parm:					/* "no_vla_parm" */
	     fd.no_vla_parm = "1"b;
	     fd.vla_parm = "0"b;
	     return;

arg_non_relocatable:				/* "non_relocatable", "nrlc" */
	     fd.non_relocatable = "1"b;
	     fd.relocatable = "0"b;
	     return;


arg_optimize:					/* "optimize", "ot" */
	     fd.optimize = "1"b;
	     fd.full_optimize = "0"b;
	     fd.safe_optimize = "0"b;
	     fd.no_optimize = "0"b;
	     return;

arg_profile:					/* "profile", "pf" */
	     fd.profile = "1"b;
	     fd.long_profile = "0"b;
	     return;

arg_relocatable:					/* "relocatable", "rlc" */
	     fd.relocatable = "1"b;
	     fd.non_relocatable = "0"b;
	     return;

arg_round:					/* "round" */
	     fd.round = "1"b;
	     fd.truncate = "0"b;
	     return;

arg_safe_optimize:					/* "safe_optimize", "safe_ot" */
	     fd.safe_optimize = "1"b;
	     fd.full_optimize = "0"b;
	     fd.optimize = "0"b;
	     fd.no_optimize = "0"b;
	     return;

arg_source:					/* "source", "sc" */
arg_symbols:					/* "symbols", "sb" */
	     call com_err_ (0, "new_fortran", """-^a"" is obsolete. Use ""-map"".", cmd_string);
	     arg_error = "1"b;
	     return;

arg_static:					/* "static" */
	     fd.static = "1"b;
	     fd.auto = "0"b;
	     return;

arg_stringrange:					/* "stringrange", "strg" */
	     fd.stringrange = "1"b;
	     fd.no_stringrange = "0"b;
	     return;

arg_subscriptrange:					/* "subscriptrange", "subrg" */
	     fd.subscriptrange = "1"b;
	     fd.no_subscriptrange = "0"b;
	     return;

arg_super:					/* "super" */
	     call com_err_ (0, "new_fortran", """-super"" is now implied by -optimize; it will be ignored.");
	     return;

arg_table:					/* "table", "tb" */
	     fd.table = "1"b;
	     fd.no_table = "0"b;
	     fd.brief_table = "0"b;
	     return;

arg_time:						/* "time", "tm" */
	     fd.time = "1"b;
	     return;

arg_time_ot:					/* "time_ot */
	     fd.time_ot = "1"b;
	     return;

arg_top_down:					/* "top_down" */
	     fd.top_down = "1"b;
	     fd.consolidate = "0"b;
	     return;

arg_truncate:					/* "truncate", "tc" */
	     fd.truncate = "1"b;
	     fd.round = "0"b;
	     return;

arg_version:					/* "version" */
	     fd.version = "1"b;
	     fd.no_version = "0"b;
	     return;

arg_very_large_array:				/* "very_large_array", "vla" */
	     fd.very_large_array = "1"b;
	     fd.no_very_large_array = "0"b;
	     return;

arg_very_large_common:				/* "very_large_common", "vlc" */
	     fd.very_large_common = "1"b;
	     fd.no_very_large_array = "0"b;
	     return;

arg_vla_auto:					/* "vla_auto" */
	     fd.vla_auto = "1"b;
	     fd.no_very_large_array = "0"b;
	     return;

arg_vla_parm:					/* "vla_parm" */
	     fd.vla_parm = "1"b;
	     fd.no_vla_parm = "0"b;
	     return;

arg_vla_static:					/* "vla_static" */
	     fd.vla_static = "1"b;
	     fd.no_very_large_array = "0"b;
	     return;

parse_severity:
     procedure (level);

dcl	level		char (*);
dcl	level_no		fixed bin;

	level_no = index ("1234", substr (level, 1, 1));

	if substr (level, 1, 1) = "-"
	then do;
		arg_num = arg_num - 1;
		call com_err_ (0, "new_fortran", "Missing severity number (1, 2, 3, or 4) before ""^a"".", level);
		arg_error = "1"b;
	     end;

	else if level_no = 0 | substr (level, 2) ^= " "
	then do;
		call com_err_ (0, "new_fortran", "Severity must be 1, 2, 3, or 4. Not ""^a"".", level);
		arg_error = "1"b;
	     end;
	else fd.severity = level_no;
     end /* parse_severity */;
	end /* of argument entry */;

/* entry point for %global */

global:
     entry (cmd_string_ptr, cmd_string_len, fd_ptr, print_message);
	begin;

dcl	glb_case		(0:111) label variable init (glb_not_found, glb_ansi66, glb_ansi77, glb_auto,
			glb_auto_zero, glb_binary_floating_point, glb_binary_floating_point, glb_brief, glb_brief,
			glb_brief_table, glb_brief_table, glb_card, glb_check, glb_check, glb_check_multiply,
			glb_check_multiply, glb_consolidate, glb_consolidate, glb_debug, glb_debug, glb_debug_cg, glb_debug_io, glb_debug_io,
			glb_default_full, glb_default_full, glb_default_safe, glb_default_safe, glb_fold,
			glb_free, glb_full_optimize, glb_full_optimize, glb_hexadecimal_floating_point,
			glb_hexadecimal_floating_point, glb_la_auto, glb_la_static,
			glb_large_array, glb_large_array, glb_line_numbers,
			glb_line_numbers, glb_list, glb_list, glb_long, glb_long, glb_long_profile,
			glb_long_profile, glb_map, glb_nlno, glb_no_auto_zero, glb_no_check, glb_no_check,
			glb_no_check_multiply, glb_no_check_multiply,
	                    glb_no_debug_io, glb_no_debug_io, glb_no_fold, glb_no_large_array,
			glb_no_large_array, glb_no_line_numbers, glb_no_line_numbers, glb_no_map, glb_no_optimize,
			glb_no_optimize, glb_no_stringrange, glb_no_stringrange, glb_no_stringrange,
			glb_no_subscriptrange, glb_no_subscriptrange, glb_no_subscriptrange, glb_no_table,
			glb_no_table, glb_no_version, glb_no_very_large_array, glb_no_very_large_array,
			glb_no_vla_parm, glb_non_relocatable, glb_non_relocatable, glb_optimize, glb_optimize,
			glb_profile, glb_profile, glb_relocatable, glb_relocatable, glb_round, glb_safe,
			glb_safe_optimize, glb_safe_optimize, glb_source, glb_source, glb_static, glb_stringrange,
			glb_stringrange, glb_subscriptrange, glb_subscriptrange, glb_super, glb_symbols,
			glb_symbols, glb_table, glb_table, glb_time, glb_time, glb_time_ot, glb_top_down,
			glb_truncate, glb_truncate, glb_version, glb_very_large_array, glb_very_large_array,
			glb_very_large_common, glb_very_large_common, glb_vla_auto, glb_vla_parm, glb_vla_static);

	     cmd = index (string (cmd_names), " " || cmd_string || " ");
	     if cmd ^= 0
	     then cmd = (cmd + 32) / 33;
	     goto glb_case (cmd);

glb_not_found:					/* cmd_string not found */
glb_brief:					/* "brief", "bf" */
glb_brief_table:					/* "brief_table", "bftb" */
glb_check:					/* "check", "ck" */
glb_debug:					/* "debug", "db" */
glb_debug_cg:					/* "debug_cg" */
glb_debug_io:					/* "debug_io", "dbio" */
glb_full_optimize:					/* "full_optimize", "full_ot" */
glb_line_numbers:					/* "line_numbers", "ln" */
glb_list:						/* "list", "ls" */
glb_long:						/* "long", "lg" */
glb_long_profile:					/* "long_profile", "lpf" */
glb_map:						/* "map" */
glb_nlno:						/* "nlno" */
glb_no_check:					/* "no_check", "nck" */
glb_no_debug_io:					/* "no_debug_io", "ndbio" */
glb_no_line_numbers:				/* "no_line_numbers", "nln" */
glb_no_map:					/* "no_map" */
glb_no_optimize:					/* "no_optimize", "not" */
glb_no_table:					/* "no_table", "ntb" */
glb_no_version:					/* "no_version" */
glb_non_relocatable:				/* "non_relocatable", "nrlc" */
glb_optimize:					/* "optimize", "ot" */
glb_profile:					/* "profile", "pf" */
glb_relocatable:					/* "relocatable", "rlc" */
glb_safe_optimize:					/* "safe_optimize", "safe_ot" */
glb_source:					/* "source", "sc" */
glb_super:					/* "super" */
glb_symbols:					/* "symbols", "sb" */
glb_table:					/* "table", "tb" */
glb_time:						/* "time", "tm" */
glb_time_ot:					/* "time_ot" */
glb_version:					/* "version" */
	     call print_message (150, cmd_string);
	     return;

glb_ansi66:					/* "ansi66" */
	     fd.ansi66 = "1"b;
	     if fd.ansi77
	     then do;
		     call print_message (191, "%global", cmd_string, "ansi77");
		     fd.ansi77 = "0"b;
		end;
	     return;

glb_ansi77:					/* "ansi77" */
	     fd.ansi77 = "1"b;
	     if fd.ansi66
	     then do;
		     call print_message (191, "%global", cmd_string, "ansi66");
		     fd.ansi66 = "0"b;
		end;
	     return;

glb_auto:						/* "auto" */
	     fd.auto = "1"b;
	     if fd.static
	     then do;
		     call print_message (191, "%global", cmd_string, "static");
		     fd.static = "0"b;
		end;
	     return;

glb_auto_zero:					/* "auto_zero" */
	     fd.auto_zero = "1"b;
	     if fd.no_auto_zero
	     then do;
		     call print_message (191, "%global", cmd_string, "no_auto_zero");
		     fd.no_auto_zero = "0"b;
		end;
	     return;

glb_binary_floating_point:				/* "binary_floating_point", "bfp" */
	     fd.binary_floating_point = "1"b;
	     if fd.hexadecimal_floating_point
	     then do;
		     call print_message (191, "%global", cmd_string, "hexadecimal_floating_point");
		     fd.hexadecimal_floating_point = "0"b;
		end;
	     return;

glb_card:						/* "card" */
	     fd.card = "1"b;
	     if fd.free
	     then do;
		     call print_message (191, "%global", cmd_string, "free");
		     fd.free = "0"b;
		end;
	     return;

glb_check_multiply:					/* "check_mulitply", "ckmpy" */
	     fd.check_multiply = "1"b;
	     if fd.no_check_multiply
	     then do;
		     call print_message (191, "%global", cmd_string, "no_check_multiply");
		     fd.no_check_multiply = "0"b;
		end;
	     return;

glb_consolidate:					/* "consolidate", "cons" */
	     fd.consolidate = "1"b;
	     if fd.top_down
	     then do;
		     call print_message (191, "%global", cmd_string, "top_down");
		     fd.top_down = "0"b;
		end;
	     return;

glb_default_full:					/* "default_full", "dff" */
	     fd.default_full = "1"b;
	     if fd.default_safe
	     then do;
		     call print_message (191, "%global", cmd_string, "default_safe");
		     fd.default_safe = "0"b;
		end;
	     return;

glb_default_safe:					/* "default_safe", "dfs" */
glb_safe:						/* "safe" */
	     fd.default_safe = "1"b;
	     if fd.default_full
	     then do;
		     call print_message (191, "%global", cmd_string, "default_full");
		     fd.default_full = "0"b;
		end;
	     return;

glb_fold:						/* "fold" */
	     fd.fold = "1"b;
	     if fd.no_fold
	     then do;
		     call print_message (191, "%global", cmd_string, "no_fold");
		     fd.no_fold = "0"b;
		end;
	     return;

glb_free:						/* "free" */
	     fd.free = "1"b;
	     if fd.card
	     then do;
		     call print_message (191, "%global", cmd_string, "card");
		     fd.card = "0"b;
		end;
	     return;

glb_hexadecimal_floating_point:			/* "hexadecimal_floating_point", "hfp" */
	     fd.hexadecimal_floating_point = "1"b;
	     if fd.binary_floating_point
	     then do;
		     call print_message (191, "%global", cmd_string, "binary_floating_point");
		     fd.binary_floating_point = "0"b;
		end;
	     return;

glb_la_auto:					/* "la_auto" */
	     fd.la_auto = "1"b;
	     if fd.no_large_array
	     then do;
		     call print_message (191, "%global", cmd_string, "no_large_array");
		     fd.no_large_array = "0"b;
		end;
	     return;

glb_la_static:					/* "la_static" */
	     fd.la_static = "1"b;
	     if fd.no_large_array
	     then do;
		     call print_message (191, "%global", cmd_string, "no_large_array");
		     fd.no_large_array = "0"b;
		end;
	     return;

glb_large_array:					/* "large_array", "la" */
	     fd.large_array = "1"b;
	     if fd.no_large_array
	     then do;
		     call print_message (191, "%global", cmd_string, "no_large_array");
		     fd.no_large_array = "0"b;
		end;
	     return;

glb_no_auto_zero:					/* "no_auto_zero" */
	     fd.no_auto_zero = "1"b;
	     if fd.auto_zero
	     then do;
		     call print_message (191, "%global", cmd_string, "auto_zero");
		     fd.auto_zero = "0"b;
		end;
	     return;

glb_no_check_multiply:				/* "no_check_multiply", "nckmpy" */
	     fd.no_check_multiply = "1"b;
	     if fd.check_multiply
	     then do;
		     call print_message (191, "%global", cmd_string, "check_multiply");
		     fd.check_multiply = "0"b;
		end;
	     return;

glb_no_fold:					/* "no_fold" */
	     fd.no_fold = "1"b;
	     if fd.fold
	     then do;
		     call print_message (191, "%global", cmd_string, "fold");
		     fd.fold = "0"b;
		end;
	     return;

glb_no_large_array:					/* "no_large_array", "nla" */
	     fd.no_large_array = "1"b;
	     if fd.large_array
	     then do;
		     call print_message (191, "%global", cmd_string, "large_array");
		     fd.large_array = "0"b;
		end;
	     if fd.la_auto
	     then do;
		     call print_message (191, "%global", cmd_string, "la_auto");
		     fd.la_auto = "0"b;
		end;
	     if fd.la_static
	     then do;
		     call print_message (191, "%global", cmd_string, "la_static");
		     fd.la_static = "0"b;
		end;
	     if fd.very_large_array
	     then do;
		     call print_message (191, "%global", cmd_string, "very_large_array");
		     fd.very_large_array = "0"b;
		end;
	     if fd.vla_auto
	     then do;
		     call print_message (191, "%global", cmd_string, "vla_auto");
		     fd.vla_auto = "0"b;
		end;
	     if fd.vla_static
	     then do;
		     call print_message (191, "%global", cmd_string, "vla_static");
		     fd.vla_static = "0"b;
		end;
	     return;

glb_no_stringrange:					/* "no_stringrange", "nstrg", "nostrg" */
	     fd.no_stringrange = "1"b;
	     if fd.stringrange
	     then do;
		     call print_message (191, "%global", cmd_string, "stringrange");
		     fd.stringrange = "0"b;
		end;
	     return;

glb_no_subscriptrange:				/* "no_subscriptrange", "nsubrg", "nosubrg" */
	     fd.no_subscriptrange = "1"b;
	     if fd.subscriptrange
	     then do;
		     call print_message (191, "%global", cmd_string, "subscriptrange");
		     fd.subscriptrange = "0"b;
		end;
	     return;

glb_no_very_large_array:				/* "no_very_large_array", "nvla" */
	     fd.no_very_large_array = "1"b;
	     if fd.very_large_array
	     then do;
		     call print_message (191, "%global", cmd_string, "very_large_array");
		     fd.very_large_array = "0"b;
		end;
	     if fd.very_large_common
	     then do;
		     call print_message (191, "%global", cmd_string, "very_large_common");
		     fd.very_large_common = "0"b;
		end;
	     if fd.vla_auto
	     then do;
		     call print_message (191, "%global", cmd_string, "vla_auto");
		     fd.vla_auto = "0"b;
		end;
	     if fd.vla_static
	     then do;
		     call print_message (191, "%global", cmd_string, "vla_static");
		     fd.vla_static = "0"b;
		end;
	     return;

glb_no_vla_parm:					/* "no_vla_parm" */
	     fd.no_vla_parm = "1"b;
	     if fd.vla_parm
	     then do;
		     call print_message (191, "%global", cmd_string, "vla_parm");
		     fd.vla_parm = "0"b;
		end;
	     return;

glb_round:					/* "round" */
	     fd.round = "1"b;
	     if fd.truncate
	     then do;
		     call print_message (191, "%global", cmd_string, "truncate");
		     fd.truncate = "0"b;
		end;
	     return;

glb_static:					/* "static" */
	     fd.static = "1"b;
	     if fd.auto
	     then do;
		     call print_message (191, "%global", cmd_string, "auto");
		     fd.auto = "0"b;
		end;
	     return;

glb_stringrange:					/* "stringrange", "strg" */
	     fd.stringrange = "1"b;
	     if fd.no_stringrange
	     then do;
		     call print_message (191, "%global", cmd_string, "no_stringrange");
		     fd.no_stringrange = "0"b;
		end;
	     return;

glb_subscriptrange:					/* "subscriptrange", "subrg" */
	     fd.subscriptrange = "1"b;
	     if fd.no_subscriptrange
	     then do;
		     call print_message (191, "%global", cmd_string, "no_subscriptrange");
		     fd.no_subscriptrange = "0"b;
		end;
	     return;

glb_top_down:					/* "top_down" */
	     fd.top_down = "1"b;
	     if fd.consolidate
	     then do;
		     call print_message (191, "%global", cmd_string, "consolidate");
		     fd.consolidate = "0"b;
		end;
	     return;

glb_truncate:					/* "truncate", "tc" */
	     fd.truncate = "1"b;
	     if fd.round
	     then do;
		     call print_message (191, "%global", cmd_string, "round");
		     fd.round = "0"b;
		end;
	     return;

glb_very_large_array:				/* "very_large_array", "vla" */
	     fd.very_large_array = "1"b;
	     if fd.no_very_large_array
	     then do;
		     call print_message (191, "%global", cmd_string, "no_very_large_array");
		     fd.no_very_large_array = "0"b;
		end;
	     if fd.no_large_array
	     then do;
		     call print_message (191, "%global", cmd_string, "no_large_array");
		     fd.no_large_array = "0"b;
		end;
	     return;

glb_very_large_common:				/* "very_large_common", "vlc" */
	     fd.very_large_common = "1"b;
	     if fd.no_very_large_array
	     then do;
		     call print_message (191, "%global", cmd_string, "no_very_large_array");
		     fd.no_very_large_array = "0"b;
		end;
	     return;

glb_vla_auto:					/* "vla_auto" */
	     fd.vla_auto = "1"b;
	     if fd.no_very_large_array
	     then do;
		     call print_message (191, "%global", cmd_string, "no_very_large_array");
		     fd.no_very_large_array = "0"b;
		end;
	     if fd.no_large_array
	     then do;
		     call print_message (191, "%global", cmd_string, "no_large_array");
		     fd.no_large_array = "0"b;
		end;
	     return;

glb_vla_parm:					/* "vla_parm" */
	     fd.vla_parm = "1"b;
	     if fd.no_vla_parm
	     then do;
		     call print_message (191, "%global", cmd_string, "no_vla_parm");
		     fd.no_vla_parm = "0"b;
		end;
	     return;

glb_vla_static:					/* "vla_static" */
	     fd.vla_static = "1"b;
	     if fd.no_very_large_array
	     then do;
		     call print_message (191, "%global", cmd_string, "no_very_large_array");
		     fd.no_very_large_array = "0"b;
		end;
	     if fd.no_large_array
	     then do;
		     call print_message (191, "%global", cmd_string, "no_large_array");
		     fd.no_large_array = "0"b;
		end;
	     return;

	end /* of global entry */;


/* entry point for %option */

option:
     entry (cmd_string_ptr, cmd_string_len, fo_ptr, fd_ptr, global_fo_ptr, auto_option, static_option, print_message);
	begin;

dcl	opt_case		(0:111) label variable init (opt_not_found, opt_ansi66, opt_ansi77, opt_auto,
			opt_auto_zero, opt_binary_floating_point, opt_binary_floating_point, opt_brief, opt_brief,
			opt_brief_table, opt_brief_table, opt_card, opt_check, opt_check, opt_check_multiply,
			opt_check_multiply, opt_consolidate, opt_consolidate, opt_debug, opt_debug, opt_debug_cg, opt_debug_io, opt_debug_io,
			opt_default_full, opt_default_full, opt_default_safe, opt_default_safe, opt_fold,
			opt_free, opt_full_optimize, opt_full_optimize, opt_hexadecimal_floating_point,
			opt_hexadecimal_floating_point, opt_la_auto, opt_la_static,
			opt_large_array, opt_large_array, opt_line_numbers,
			opt_line_numbers, opt_list, opt_list, opt_long, opt_long, opt_long_profile,
			opt_long_profile, opt_map, opt_nlno, opt_no_auto_zero, opt_no_check, opt_no_check,
			opt_no_check_multiply, opt_no_check_multiply,
                              opt_no_debug_io, opt_no_debug_io, opt_no_fold, opt_no_large_array,
			opt_no_large_array, opt_no_line_numbers, opt_no_line_numbers, opt_no_map, opt_no_optimize,
			opt_no_optimize, opt_no_stringrange, opt_no_stringrange, opt_no_stringrange,
			opt_no_subscriptrange, opt_no_subscriptrange, opt_no_subscriptrange, opt_no_table,
			opt_no_table, opt_no_version, opt_no_very_large_array, opt_no_very_large_array,
			opt_no_vla_parm, opt_non_relocatable, opt_non_relocatable, opt_optimize, opt_optimize,
			opt_profile, opt_profile, opt_relocatable, opt_relocatable, opt_round, opt_safe,
			opt_safe_optimize, opt_safe_optimize, opt_source, opt_source, opt_static, opt_stringrange,
			opt_stringrange, opt_subscriptrange, opt_subscriptrange, opt_super, opt_symbols,
			opt_symbols, opt_table, opt_table, opt_time, opt_time, opt_time_ot, opt_top_down,
			opt_truncate, opt_truncate, opt_version, opt_very_large_array, opt_very_large_array,
			opt_very_large_common, opt_very_large_common, opt_vla_auto, opt_vla_parm, opt_vla_static);

	     cmd = index (string (cmd_names), " " || cmd_string || " ");
	     if cmd ^= 0
	     then cmd = (cmd + 32) / 33;
	     goto opt_case (cmd);

opt_not_found:					/* cmd_string not found */
opt_auto_zero:					/* "auto_zero" */
opt_binary_floating_point:				/* "binary_floating_point", "bfp" */
opt_brief:					/* "brief", "bf" */
opt_brief_table:					/* "brief_table", "bftb" */
opt_check:					/* "check", "ck" */
opt_consolidate:					/* "consolidate, "cons" */
opt_debug:					/* "debug", "db" */
opt_debug_cg:					/* "debug_cg" */
opt_debug_io:					/* "debug_io", "dbio" */
opt_full_optimize:					/* "full_optimize" */
opt_hexadecimal_floating_point:			/* "hexadecimal_floating_point, "hfp" */
opt_la_auto:					/* "la_auto" */
opt_la_static:					/* "la_static" */
opt_large_array:					/* "large_array", "la" */
opt_line_numbers:					/* "line_numbers", "ln" */
opt_list:						/* "list", "ls" */
opt_long:						/* "long", "lg" */
opt_long_profile:					/* "long_profile", "lpf" */
opt_map:						/* "map" */
opt_nlno:						/* "nlno" */
opt_no_auto_zero:					/* "no_auto_zero" */
opt_no_check:					/* "no_check", "nck" */
opt_no_debug_io:					/* "no_debug_io", "ndbio" */
opt_no_large_array:					/* "no_large_array", "nla" */
opt_no_line_numbers:				/* "no_line_numbers", "nln" */
opt_no_map:					/* "no_map" */
opt_no_optimize:					/* "no_optimize", "not" */
opt_no_table:					/* "no_table", "ntb" */
opt_no_version:					/* "no_version" */
opt_no_very_large_array:				/* "no_very_large_array", "nvla" */
opt_no_vla_parm:					/* "no_vla_parm" */
opt_non_relocatable:				/* "non_relocatable", "nrlc" */
opt_optimize:					/* "optimize", "ot" */
opt_profile:					/* "profile", "pf" */
opt_relocatable:					/* "relocatable", "rlc" */
opt_safe_optimize:					/* "safe_optimize", "safe_ot" */
opt_source:					/* "source", "sc" */
opt_super:					/* "super" */
opt_symbols:					/* "symbols", "sb" */
opt_table:					/* "table", "tb" */
opt_time:						/* "time", "tm" */
opt_time_ot:					/* "time_ot" */
opt_top_down:					/* "top_down" */
opt_version:					/* "version" */
opt_very_large_array:				/* "very_large_array", "vla" */
opt_very_large_common:				/* "very_large_common", "vlc" */
opt_vla_auto:					/* "vla_auto" */
opt_vla_parm:					/* "vla_parm" */
opt_vla_static:					/* "vla_static" */
	     call print_message (151, cmd_string);
	     return;

opt_ansi66:					/* "ansi66" */
	     fo.ansi_77 = "0"b;
	     fd.ansi77 = "1"b;
	     if fd.ansi66
	     then do;
		     call print_message (191, "%option", cmd_string, "ansi66");
		     fd.ansi66 = "0"b;
		end;
	     return;

opt_ansi77:					/* "ansi77" */
	     fo.ansi_77 = "1"b;
	     fd.ansi77 = "1"b;
	     if fd.ansi66
	     then do;
		     call print_message (191, "%option", cmd_string, "ansi66");
		     fd.ansi66 = "0"b;
		end;
	     return;

opt_auto:						/* "auto" */
	     auto_option = "1"b;
	     static_option = "0"b;
	     if fd.static
	     then do;
		     call print_message (191, "%option", cmd_string, "static");
		     fd.static = "0"b;
		end;
	     return;

opt_card:						/* "card" */
	     fo.card = "1"b;
	     if ^fd.no_fold
	     then fo.fold = "1"b;
	     fd.card = "1"b;
	     if fd.free
	     then do;
		     call print_message (191, "%option", cmd_string, "free");
		     fd.free = "0"b;
		end;
	     return;

opt_check_multiply:					/* "check_multiply", "ckmpy" */
	     fo.check_multiply = "1"b;
	     fd.check_multiply = "1"b;
	     if fd.no_check_multiply
	     then do;
		     call print_message (191, "%option", cmd_string, "no_check_multiply");
		     fd.no_check_multiply = "0"b;
		end;
	     return;

opt_fold:						/* "fold" */
	     fo.fold = "1"b;
	     fd.fold = "1"b;
	     if fd.no_fold
	     then do;
		     call print_message (191, "%option", cmd_string, "no_fold");
		     fd.no_fold = "0"b;
		end;
	     return;

opt_free:						/* "free" */
	     fo.card = "0"b;
	     if ^fd.fold
	     then fo.fold = "0"b;
	     fd.free = "1"b;
	     if fd.card
	     then do;
		     call print_message (191, "%option", cmd_string, "card");
		     fd.card = "0"b;
		end;
	     return;

opt_no_check_multiply:				/* "no_check_multiply", "nckmpy" */
	     fo.check_multiply = "0"b;
	     fd.no_check_multiply = "1"b;
	     if fd.check_multiply
	     then do;
		     call print_message (191, "%option", cmd_string, "check_multiply");
		     fd.check_multiply = "0"b;
		end;
	     return;

opt_default_full:					/* "default_full", "dff" */
	     if ^fd.safe_optimize
	     then fo.ignore_articulation_blocks = "1"b;
	     fd.default_full = "1"b;
	     if fd.default_safe
	     then do;
		     call print_message (191, "%option", cmd_string, "default_safe");
		     fd.default_safe = "0"b;
		end;
	     return;

opt_default_safe:					/* "default_safe", "dfs" */
opt_safe:						/* "safe" */
	     if ^fd.full_optimize
	     then fo.ignore_articulation_blocks = "0"b;
	     fd.default_safe = "1"b;
	     if fd.default_full
	     then do;
		     call print_message (901, "%option", cmd_string, "default_full");
		     fd.default_full = "0"b;
		end;
	     return;

opt_no_fold:					/* "no_fold" */
	     fo.fold = "0"b;
	     fd.no_fold = "1"b;
	     if fd.fold
	     then do;
		     call print_message (191, "%option", cmd_string, "fold");
		     fd.fold = "0"b;
		end;
	     return;

opt_no_stringrange:					/* "no_stringrange", "nstrg", "nostrg" */
	     fo.stringrange = "0"b;
	     fd.no_stringrange = "1"b;
	     if fd.stringrange
	     then do;
		     call print_message (191, "%option", cmd_string, "stringrange");
		     fd.stringrange = "0"b;
		end;
	     return;

opt_no_subscriptrange:				/* "no_subscriptrange", "nsubrg", "nosubrg" */
	     fo.subscriptrange = "0"b;
	     fd.no_subscriptrange = "1"b;
	     if fd.subscriptrange
	     then do;
		     call print_message (191, "%option", cmd_string, "subscriptrange");
		     fd.subscriptrange = "0"b;
		end;
	     return;

opt_round:					/* "round" */
	     fo.do_rounding = "1"b;
	     fd.round = "1"b;
	     if fd.truncate
	     then do;
		     call print_message (191, "%option", cmd_string, "truncate");
		     fd.truncate = "0"b;
		end;
	     return;

opt_static:					/* "static" */
	     static_option = "1"b;
	     auto_option = "0"b;
	     fd.static = "1"b;
	     if fd.auto
	     then do;
		     call print_message (191, "%option", cmd_string, "auto");
		     fd.auto = "0"b;
		end;
	     return;

opt_stringrange:					/* "stringrange", "strg" */
	     fo.stringrange = "1"b;
	     fd.stringrange = "1"b;
	     if fd.no_stringrange
	     then do;
		     call print_message (191, "%option", cmd_string, "no_stringrange");
		     fd.no_stringrange = "0"b;
		end;
	     return;

opt_subscriptrange:					/* "subscriptrange", "subrg" */
	     fo.subscriptrange = "1"b;
	     fd.subscriptrange = "1"b;
	     if fd.no_subscriptrange
	     then do;
		     call print_message (191, "%option", cmd_string, "no_subscriptrange");
		     fd.no_subscriptrange = "0"b;
		end;
	     return;

opt_truncate:					/* "truncate", "tc" */
	     fo.do_rounding = "0"b;
	     fd.truncate = "1"b;
	     if fd.round
	     then do;
		     call print_message (191, "%option", cmd_string, "round");
		     fd.round = "0"b;
		end;
	     return;
						/* end of option processing */
	end /* of option entry */;

/* entry point to set fortran options based on fortran_declared structure */

set:
     entry (fd_ptr, fo_ptr);

	if fd.ansi66
	then fo.ansi_77 = "0"b;

	if fd.ansi77
	then do;
		if ^(fd.optimize | fd.safe_optimize | fd.full_optimize)
		then
		     fo.subscriptrange, fo.stringrange, fo.check_multiply = "1"b;
		fo.ansi_77 = "1"b;
	     end;

	if fd.auto
	then fo.static_storage = "0"b;

	if fd.auto_zero
	then fo.auto_zero = "1"b;

	if fd.binary_floating_point
	then fo.hfp = "0"b;

	if fd.brief
	then fo.brief = "1"b;

	if fd.brief_table
	then fo.brief_table = "1"b;

	if fd.card
	then fo.card, fo.fold = "1"b;

	if fd.check
	then fo.check = "1"b;

	if fd.check_multiply
	then fo.check_multiply = "1"b;

	if fd.consolidate
	then fo.consolidate = "1"b;

	if fd.debug
	then fo.stop_after_cg = "1"b;

	if fd.debug_cg
	then fo.stop_after_parse, fo.stop_after_cg = "1"b;

	if fd.debug_io
          then fo.debug_io = "1"b;

	if fd.default_safe
	then fo.ignore_articulation_blocks = "0"b;
	else fo.ignore_articulation_blocks = "1"b;

	if fd.fold
	then fo.fold = "1"b;

	if fd.free
	then do;
		fo.card = "0"b;
		if ^fd.fold
		then fo.fold = "0"b;
	     end;

	if fd.full_optimize
	then fo.optimize, fo.consolidate, fo.ignore_articulation_blocks = "1"b;

	if fd.hexadecimal_floating_point
	then fo.hfp = "1"b;

	if fd.la_auto
	then fo.LA_auto = "1"b;

	if fd.la_static
	then fo.LA_static = "1"b;

	if fd.large_array
	then do;
		fo.LA_auto = "1"b;
		fo.LA_static = "1"b;
	     end;

	if fd.line_numbers
	then fo.has_line_numbers = "1"b;

	if fd.long
	then fo.brief = "0"b;

	if fd.long_profile
	then fo.profile, fo.long_profile = "1"b;

	if fd.list
	then string (fo.listing) = "1111"b;

	if fd.map
	then substr (string (fo.listing), 1, 3) = "111"b;

	if fd.no_auto_zero
	then fo.auto_zero = "0"b;

	if fd.no_check
	then fo.check = "0"b;

	if fd.no_fold
	then fo.fold = "0"b;

	if fd.no_large_array
	then do;
		fo.LA_auto = "0"b;
		fo.LA_static = "0"b;
	     end;

	if fd.no_line_numbers
	then fo.has_line_numbers = "0"b;

	if fd.no_map
	then string (fo.listing) = "0000"b;

	if fd.no_optimize
	then fo.optimize = "0"b;

	if fd.no_check_multiply
	then fo.check_multiply = "0"b;

	if fd.no_stringrange
	then fo.stringrange = "0"b;

	if fd.no_subscriptrange
	then fo.subscriptrange = "0"b;

	if fd.no_table
	then fo.table = "0"b;

/* This next bit of code is order dependant.  -no_vla and -vla_parm
	   are supposed to be independant of each other but -no_vla clears
	   fo.VLA_parm here.  This is corrected later on by -vla_parm if
	   it is set. */

	if fd.no_very_large_array
	then do;
		fo.VLA_auto = "0"b;
		fo.VLA_parm = "0"b;
		fo.VLA_static = "0"b;
		fo.VLC = "0"b;
	     end;

	if fd.no_vla_parm
	then fo.VLA_parm = "0"b;

	if fd.non_relocatable
	then fo.relocatable = "0"b;

	if fd.optimize
	then fo.optimize, fo.consolidate = "1"b;

	if fd.profile
	then fo.profile = "1"b;

	if fd.relocatable
	then fo.relocatable = "1"b;

	if fd.round
	then fo.do_rounding = "1"b;

	if fd.safe_optimize
	then do;
		fo.optimize, fo.consolidate = "1"b;
		fo.ignore_articulation_blocks = "0"b;
	     end;

	fo.severity = fd.severity;

	if fd.static
	then fo.static_storage = "1"b;

	if fd.stringrange
	then fo.stringrange = "1"b;

	if fd.subscriptrange
	then fo.subscriptrange = "1"b;

	if fd.table | (^fd.no_table & ^fo.optimize & ^fd.brief_table)
	then fo.table = "1"b;

	if fd.time
	then fo.time = "1"b;

	if fd.time_ot
	then fo.time_optimizer = "1"b;

	if fd.top_down
	then fo.consolidate = "0"b;

	if fd.truncate
	then fo.do_rounding = "0"b;

	if fd.very_large_array
	then do;
		fo.VLA_auto = "1"b;
		if ^fd.no_vla_parm
		then fo.VLA_parm = "1"b;
		fo.VLA_static = "1"b;
		fo.VLC = "1"b;
		fo.LA_auto = "1"b;
		fo.LA_static = "1"b;
	     end;

	if fd.very_large_common
	then do;
		fo.VLC = "1"b;
		if ^fd.no_vla_parm
		then fo.VLA_parm = "1"b;
	     end;

	if fd.vla_auto
	then do;
		fo.VLA_auto = "1"b;
		if ^fd.no_vla_parm
		then fo.VLA_parm = "1"b;
		fo.LA_auto = "1"b;
	     end;

	if fd.vla_parm
	then do;
		if ^fd.no_vla_parm
		then fo.VLA_parm = "1"b;
	     end;

	if fd.vla_static
	then do;
		fo.VLA_static = "1"b;
		if ^fd.no_vla_parm
		then fo.VLA_parm = "1"b;
		fo.LA_static = "1"b;
	     end;

	return;					/* end of entry set */

/* entry point for checking argument conflicts */

check_args:
     entry (fd_ptr, arg_error);
	begin;

	     if fd.very_large_array & fd.no_large_array
	     then call incompatible_args ("-very_large_array", "-no_large_array");

	     if fd.vla_auto & fd.no_large_array
	     then call incompatible_args ("-vla_auto", "-no_large_array");

	     if fd.vla_static & fd.no_large_array
	     then call incompatible_args ("-vla_static", "-no_large_array");

	     if fd.line_numbers & fd.card
	     then call incompatible_args ("-card", "-line_numbers");

	     if fd.optimize
	     then do;
		     if fd.subscriptrange
		     then call incompatible_args ("-optimize", "-subscriptrange");
		     if fd.stringrange
		     then call incompatible_args ("-optimize", "-stringrange");
		end;

	     if fd.safe_optimize
	     then do;
		     if fd.subscriptrange
		     then call incompatible_args ("-safe_optimize", "-subscriptrange");
		     if fd.stringrange
		     then call incompatible_args ("-safe_optimize", "-stringrange");
		end;

	     if fd.full_optimize
	     then do;
		     if fd.subscriptrange
		     then call incompatible_args ("-full_optimize", "-subscriptrange");
		     if fd.stringrange
		     then call incompatible_args ("-full_optimize", "-stringrange");
		end;
	     return;
incompatible_args:
     procedure (first_arg, second_arg);

dcl	(first_arg,
	second_arg)	char (*);

	call com_err_ (0, "new_fortran", "The options ""^a"" and ""^a"" are mutually incompatible.", first_arg,
	     second_arg);
	arg_error = "1"b;
	return;
     end /* incompatible_args */;
	end /* of the arg_check entry */;

/* entry point to resolve global/argument conflicts */

check_global_args:
     entry (global_fd_ptr, arg_fd_ptr, print_message);
	begin;

	     if arg_fd.binary_floating_point & global_fd.hexadecimal_floating_point
	     then do;
		     call print_message (192, "-binary_floating_point", "hexadecimal_floating_point");
		     global_fd.hexadecimal_floating_point = "0"b;
		end;
	     else if arg_fd.hexadecimal_floating_point & global_fd.binary_floating_point
	     then do;
		     call print_message (192, "-hexadecimal_floating_point", "binary_floating_point");
		     global_fd.binary_floating_point = "0"b;
		end;

/* In order to check if HFP mode is allowed, we generate a bogus call to
fort_hfp_math$conv_r_to_i_round.  If the user does not have access to use HFP
mode, the condition "cannot_enable_HFP_mode" will be signaled.  This is
admittedly a grotty way to do the test.  */

	     if arg_fd.hexadecimal_floating_point | global_fd.hexadecimal_floating_point
	     then do;
		     on cannot_enable_HFP_mode
			begin;
			     call print_message (522);
			end;
		     dummy_var = fort_hfp_math$conv_r_to_i_round ("0"b, 0);
		     revert cannot_enable_HFP_mode;
		end;

	     if arg_fd.optimize | arg_fd.safe_optimize | arg_fd.full_optimize
	     then do;
		     if global_fd.stringrange
		     then do;
			     if arg_fd.optimize
			     then call print_message (192, "-optimize", "stringrange");
			     else if arg_fd.safe_optimize
			     then call print_message (192, "-safe_optimize", "stringrange");
			     else if arg_fd.full_optimize
			     then call print_message (192, "-full_optimize", "stringrange");
			     global_fd.stringrange = "0"b;
			end;
		     if global_fd.subscriptrange
		     then do;
			     if arg_fd.optimize
			     then call print_message (192, "optimize", "subscriptrange");
			     else if fd.safe_optimize
			     then call print_message (192, "-safe_optimize", "subscriptrange");
			     else if fd.full_optimize
			     then call print_message (192, "-full_optimize", "subscriptrange");
			     global_fd.subscriptrange = "0"b;
			end;
		end;

	     if arg_fd.stringrange & global_fd.no_stringrange
	     then do;
		     call print_message (192, "-stringrange", "no_stringrange");
		     global_fd.no_stringrange = "0"b;
		end;
	     else if arg_fd.no_stringrange & global_fd.stringrange
	     then do;
		     call print_message (192, "-no_stringrange", "stringrange");
		     global_fd.stringrange = "0"b;
		end;

	     if arg_fd.subscriptrange & global_fd.no_subscriptrange
	     then do;
		     call print_message (192, "-subscriptrange", "no_subscriptrange");
		     global_fd.no_subscriptrange = "0"b;
		end;
	     else if arg_fd.no_subscriptrange & global_fd.subscriptrange
	     then do;
		     call print_message (192, "-no_subscriptrange", "subscriptrange");
		     global_fd.subscriptrange = "0"b;
		end;

	     if arg_fd.auto_zero & global_fd.no_auto_zero
	     then do;
		     call print_message (192, "-auto_zero", "no_auto_zero");
		     global_fd.no_auto_zero = "0"b;
		end;
	     else if arg_fd.no_auto_zero & global_fd.auto_zero
	     then do;
		     call print_message (192, "-no_auto_zero", "auto_zero");
		     global_fd.auto_zero = "0"b;
		end;

	     if arg_fd.round & global_fd.truncate
	     then do;
		     call print_message (192, "-round", "truncate");
		     global_fd.truncate = "0"b;
		end;
	     else if arg_fd.truncate & global_fd.round
	     then do;
		     call print_message (192, "-truncate", "round");
		     global_fd.round = "0"b;
		end;

	     if arg_fd.card & global_fd.free
	     then do;
		     call print_message (192, "-card", "free");
		     global_fd.free = "0"b;
		end;
	     else if arg_fd.free & global_fd.card
	     then do;
		     call print_message (192, "-free", "card");
		     global_fd.card = "0"b;
		end;

	     if arg_fd.fold & global_fd.no_fold
	     then do;
		     call print_message (192, "-fold", "no_fold");
		     global_fd.no_fold = "0"b;
		end;
	     else if arg_fd.no_fold & global_fd.fold
	     then do;
		     call print_message (192, "-no_fold", "fold");
		     global_fd.fold = "0"b;
		end;

	     if arg_fd.ansi66 & global_fd.ansi77
	     then do;
		     call print_message (192, "-ansi66", "ansi77");
		     global_fd.ansi77 = "0"b;
		end;
	     else if arg_fd.ansi77 & global_fd.ansi66
	     then do;
		     call print_message (192, "-ansi77", "ansi66");
		     global_fd.ansi66 = "0"b;
		end;

	     if arg_fd.check_multiply & global_fd.no_check_multiply
	     then do;
		     call print_message (192, "-check_multiply", "no_check_multiply");
		     global_fd.no_check_multiply = "0"b;
		end;
	     else if arg_fd.no_check_multiply & global_fd.check_multiply
	     then do;
		     call print_message (192, "-no_check_multiply", "check_multiply");
		     global_fd.check_multiply = "0"b;
		end;

	     if arg_fd.consolidate & global_fd.top_down
	     then do;
		     call print_message (192, "-consolidate", "top_down");
		     global_fd.top_down = "0"b;
		end;
	     else if arg_fd.top_down & global_fd.consolidate
	     then do;
		     call print_message (192, "-top_down", "consolidate");
		     global_fd.consolidate = "0"b;
		end;

	     if arg_fd.default_full & global_fd.default_safe
	     then do;
		     call print_message (192, "-default_full", "default_safe");
		     global_fd.default_safe = "0"b;
		end;
	     else if arg_fd.default_safe & global_fd.default_full
	     then do;
		     call print_message (192, "-default_safe", "default_full");
		     global_fd.default_full = "0"b;
		end;

	     if arg_fd.auto & global_fd.static
	     then do;
		     call print_message (192, "-auto", "static");
		     global_fd.static = "0"b;
		end;
	     else if arg_fd.static & global_fd.auto
	     then do;
		     call print_message (192, "-static", "auto");
		     global_fd.auto = "0"b;
		end;

	     if arg_fd.large_array & global_fd.no_large_array
	     then do;
		     call print_message (192, "-large_array", "no_large_array");
		     global_fd.no_large_array = "0"b;
		end;
	     else if arg_fd.no_large_array & global_fd.large_array
	     then do;
		     call print_message (192, "-no_large_array", "large_array");
		     global_fd.large_array = "0"b;
		end;

	     if arg_fd.la_auto & global_fd.no_large_array
	     then do;
		     call print_message (192, "-la_auto", "no_large_array");
		     global_fd.no_large_array = "0"b;
		end;
	     else if arg_fd.no_large_array & global_fd.la_auto
	     then do;
		     call print_message (192, "-no_large_array", "la_auto");
		     global_fd.la_auto = "0"b;
		end;

	     if arg_fd.la_static & global_fd.no_large_array
	     then do;
		     call print_message (192, "-la_static", "no_large_array");
		     global_fd.no_large_array = "0"b;
		end;
	     else if arg_fd.no_large_array & global_fd.la_static
	     then do;
		     call print_message (192, "-no_large_array", "la_static");
		     global_fd.la_static = "0"b;
		end;

	     if arg_fd.no_large_array & global_fd.very_large_array
	     then do;
		     call print_message (192, "-no_large_array", "-very_large_array");
		     global_fd.very_large_array = "0"b;
		end;
	     else if arg_fd.very_large_array & global_fd.no_large_array
	     then do;
		     call print_message (192, "-very_large_array", "-no_large_array");
		     global_fd.no_large_array = "0"b;
		end;

	     if arg_fd.no_large_array & global_fd.vla_auto
	     then do;
		     call print_message (192, "-no_large_array", "-vla_auto");
		     global_fd.vla_auto = "0"b;
		end;
	     else if arg_fd.vla_auto & global_fd.no_large_array
	     then do;
		     call print_message (192, "-vla_auto", "-no_large_array");
		     global_fd.no_large_array = "0"b;
		end;

	     if arg_fd.no_large_array & global_fd.vla_static
	     then do;
		     call print_message (192, "-no_large_array", "-vla_static");
		     global_fd.vla_static = "0"b;
		end;
	     else if arg_fd.vla_static & global_fd.no_large_array
	     then do;
		     call print_message (192, "-vla_static", "-no_large_array");
		     global_fd.no_large_array = "0"b;
		end;

	     if arg_fd.very_large_array & global_fd.no_very_large_array
	     then do;
		     call print_message (192, "-very_large_array", "no_very_large_array");
		     global_fd.no_very_large_array = "0"b;
		end;
	     else if arg_fd.no_very_large_array & global_fd.very_large_array
	     then do;
		     call print_message (192, "-no_very_large_array", "very_large_array");
		     global_fd.very_large_array = "0"b;
		end;

	     if arg_fd.very_large_common & global_fd.no_very_large_array
	     then do;
		     call print_message (192, "-very_large_common", "no_very_large_array");
		     global_fd.no_very_large_array = "0"b;
		end;
	     else if arg_fd.no_very_large_array & global_fd.very_large_common
	     then do;
		     call print_message (192, "-no_very_large_array", "very_large_common");
		     global_fd.very_large_common = "0"b;
		end;

	     if arg_fd.vla_auto & global_fd.no_very_large_array
	     then do;
		     call print_message (192, "-vla_auto", "no_very_large_array");
		     global_fd.no_very_large_array = "0"b;
		end;
	     else if arg_fd.no_very_large_array & global_fd.vla_auto
	     then do;
		     call print_message (192, "-no_very_large_array", "vla_auto");
		     global_fd.vla_auto = "0"b;
		end;

	     if arg_fd.vla_parm & global_fd.no_vla_parm
	     then do;
		     call print_message (192, "-vla_parm", "no_vla_parm");
		     global_fd.no_vla_parm = "0"b;
		end;
	     else if arg_fd.no_vla_parm & global_fd.vla_parm
	     then do;
		     call print_message (192, "-no_vla_parm", "vla_parm");
		     global_fd.vla_parm = "0"b;
		end;

	     if arg_fd.vla_static & global_fd.no_very_large_array
	     then do;
		     call print_message (192, "-vla_static", "no_very_large_array");
		     global_fd.no_very_large_array = "0"b;
		end;
	     else if arg_fd.no_very_large_array & global_fd.vla_static
	     then do;
		     call print_message (192, "-no_very_large_array", "vla_static");
		     global_fd.vla_static = "0"b;
		end;

	     return;
	end /* of global_arg_check entry */;

/* entry point to create fortran options string */

options_string:
     entry (fort_op_ptr, op_string, VLA_words_per_seg);

	op_string = "";
	if fort_op.ansi_77
	then op_string = op_string || "ansi77 ";
	else op_string = op_string || "ansi66 ";
	if fort_op.hfp
	then op_string = op_string || "hexadecimal_floating_point ";
	else op_string = op_string || "binary_floating_point ";
	if fort_op.is_fast
	then op_string = op_string || "fast ";
	if fort_op.has_line_numbers
	then op_string = op_string || "line_numbers ";
	if fort_op.table
	then op_string = op_string || "table ";
	if fort_op.subscriptrange
	then op_string = op_string || "subscriptrange ";
	if fort_op.stringrange
	then op_string = op_string || "stringrange ";
	if fort_op.brief_table
	then op_string = op_string || "brief_table ";
	if fort_op.profile & ^fort_op.long_profile
	then op_string = op_string || "profile ";
	if fort_op.profile & fort_op.long_profile
	then op_string = op_string || "long_profile ";
	if fort_op.do_rounding
	then op_string = op_string || "round ";
	else op_string = op_string || "truncate ";
	if fort_op.check_multiply
	then op_string = op_string || "check_multiply ";
	if fort_op.LA_auto & fort_op.LA_static
	then op_string = op_string || "LA ";
	else if fort_op.LA_auto
	then op_string = op_string || "LA_AUTO ";
	else if fort_op.LA_static
	then op_string = op_string || "LA_STATIC ";
	if fort_op.VLA_auto | fort_op.VLA_parm | fort_op.VLA_static | fort_op.VLC
	then do;
		if VLA_words_per_seg = 262144
		then fort_op.VLA_is_256K = "1"b;
		else fort_op.VLA_is_256K = "0"b;
		if fort_op.VLA_auto & fort_op.VLA_parm & fort_op.VLA_static & fort_op.VLC
		then do;
			if fort_op.VLA_is_256K
			then op_string = op_string || "VLA/256K ";
			else op_string = op_string || "VLA ";
		     end;
		else do;
			if fort_op.VLA_auto
			then do;
				if fort_op.VLA_is_256K
				then op_string = op_string || "VLA_AUTO/256K ";
				else op_string = op_string || "VLA_AUTO ";
			     end;
			if fort_op.VLA_parm
			then do;
				if fort_op.VLA_is_256K
				then op_string = op_string || "VLA_PARM/256K ";
				else op_string = op_string || "VLA_PARM ";
			     end;
			if fort_op.VLA_static
			then do;
				if fort_op.VLA_is_256K
				then op_string = op_string || "VLA_STATIC/256K ";
				else op_string = op_string || "VLA_STATIC ";
			     end;
			if fort_op.VLC
			then do;
				if fort_op.VLA_is_256K
				then op_string = op_string || "VLC/256K ";
				else op_string = op_string || "VLC ";
			     end;
		     end;
	     end;

	if fort_op.optimize
	then do;
		if fort_op.ignore_articulation_blocks
		then op_string = op_string || "full_optimize ";
		else op_string = op_string || "safe_optimize ";
		if ^fort_op.consolidate
		then op_string = op_string || "top_down ";
	     end;
	if fort_op.time
	then op_string = op_string || "time ";
	if fort_op.time_optimizer
	then op_string = op_string || "time_ot ";
	if fort_op.card
	then op_string = op_string || "card ";
	else if fort_op.fold
	then op_string = op_string || "fold ";
	if fort_op.brief
	then op_string = op_string || "brief ";
	if fort_op.check
	then op_string = op_string || "check ";
	if fort_op.static_storage
	then op_string = op_string || "static ";
	if (^fort_op.relocatable)
	then op_string = op_string || "non_relocatable ";
	if fort_op.auto_zero
	then op_string = op_string || "auto_zero ";
	else op_string = op_string || "no_auto_zero ";
	if fort_op.list
	then op_string = op_string || "list ";
	else if fort_op.map
	then op_string = op_string || "map ";
	if fort_op.severity > 0
	then do;
		op_string = op_string || "severity";
		op_string = op_string || ltrim (convert (op_string, fort_op.severity));
		op_string = op_string || " ";
	     end;
	if fort_op.stop_after_parse
	then op_string = op_string || "debug_cg ";
	else if fort_op.stop_after_cg
	then op_string = op_string || "debug ";
	else if fort_op.debug_io
          then op_string = op_string || "debug_io ";

	if length (op_string) > 0
	then op_string = substr (op_string, 1, length (op_string) - 1);

	return;					/* end of options_string entry */

init_shared_vars:
     entry (shared_var_ptr);

	if shared_vars.user_options.hfp
	then do;
		shared_vars.binop_round (1, 1) = fort_hfp_math$binop_i_i_round;
		shared_vars.binop_round (1, 2) = fort_hfp_math$binop_i_r_round;
		shared_vars.binop_round (1, 3) = fort_hfp_math$binop_i_dp_round;
		shared_vars.binop_round (1, 4) = fort_hfp_math$binop_i_cp_round;
		shared_vars.binop_round (1, 5) = fort_hfp_math$bad_data_types;
		shared_vars.binop_round (1, 6) = fort_hfp_math$bad_data_types;
		shared_vars.binop_round (2, 1) = fort_hfp_math$binop_r_i_round;
		shared_vars.binop_round (2, 2) = fort_hfp_math$binop_r_r_round;
		shared_vars.binop_round (2, 3) = fort_hfp_math$binop_r_dp_round;
		shared_vars.binop_round (2, 4) = fort_hfp_math$binop_r_cp_round;
		shared_vars.binop_round (2, 5) = fort_hfp_math$bad_data_types;
		shared_vars.binop_round (2, 6) = fort_hfp_math$bad_data_types;
		shared_vars.binop_round (3, 1) = fort_hfp_math$binop_dp_i_round;
		shared_vars.binop_round (3, 2) = fort_hfp_math$binop_dp_r_round;
		shared_vars.binop_round (3, 3) = fort_hfp_math$binop_dp_dp_round;
		shared_vars.binop_round (3, 4) = fort_hfp_math$binop_dp_cp_round;
		shared_vars.binop_round (3, 5) = fort_hfp_math$bad_data_types;
		shared_vars.binop_round (3, 6) = fort_hfp_math$bad_data_types;
		shared_vars.binop_round (4, 1) = fort_hfp_math$binop_cp_i_round;
		shared_vars.binop_round (4, 2) = fort_hfp_math$binop_cp_r_round;
		shared_vars.binop_round (4, 3) = fort_hfp_math$binop_cp_dp_round;
		shared_vars.binop_round (4, 4) = fort_hfp_math$binop_cp_cp_round;
		shared_vars.binop_round (4, 5) = fort_hfp_math$bad_data_types;
		shared_vars.binop_round (4, 6) = fort_hfp_math$bad_data_types;
		shared_vars.binop_round (5, 1) = fort_hfp_math$bad_data_types;
		shared_vars.binop_round (5, 2) = fort_hfp_math$bad_data_types;
		shared_vars.binop_round (5, 3) = fort_hfp_math$bad_data_types;
		shared_vars.binop_round (5, 4) = fort_hfp_math$bad_data_types;
		shared_vars.binop_round (5, 5) = fort_hfp_math$binop_lg_lg;
		shared_vars.binop_round (5, 6) = fort_hfp_math$bad_data_types;
		shared_vars.binop_round (6, 1) = fort_hfp_math$bad_data_types;
		shared_vars.binop_round (6, 2) = fort_hfp_math$bad_data_types;
		shared_vars.binop_round (6, 3) = fort_hfp_math$bad_data_types;
		shared_vars.binop_round (6, 4) = fort_hfp_math$bad_data_types;
		shared_vars.binop_round (6, 5) = fort_hfp_math$bad_data_types;
		shared_vars.binop_round (6, 6) = fort_hfp_math$binop_ch_ch;

		shared_vars.binop_trunc (1, 1) = fort_hfp_math$binop_i_i_trunc;
		shared_vars.binop_trunc (1, 2) = fort_hfp_math$binop_i_r_trunc;
		shared_vars.binop_trunc (1, 3) = fort_hfp_math$binop_i_dp_trunc;
		shared_vars.binop_trunc (1, 4) = fort_hfp_math$binop_i_cp_trunc;
		shared_vars.binop_trunc (1, 5) = fort_hfp_math$bad_data_types;
		shared_vars.binop_trunc (1, 6) = fort_hfp_math$bad_data_types;
		shared_vars.binop_trunc (2, 1) = fort_hfp_math$binop_r_i_trunc;
		shared_vars.binop_trunc (2, 2) = fort_hfp_math$binop_r_r_trunc;
		shared_vars.binop_trunc (2, 3) = fort_hfp_math$binop_r_dp_trunc;
		shared_vars.binop_trunc (2, 4) = fort_hfp_math$binop_r_cp_trunc;
		shared_vars.binop_trunc (2, 5) = fort_hfp_math$bad_data_types;
		shared_vars.binop_trunc (2, 6) = fort_hfp_math$bad_data_types;
		shared_vars.binop_trunc (3, 1) = fort_hfp_math$binop_dp_i_trunc;
		shared_vars.binop_trunc (3, 2) = fort_hfp_math$binop_dp_r_trunc;
		shared_vars.binop_trunc (3, 3) = fort_hfp_math$binop_dp_dp_trunc;
		shared_vars.binop_trunc (3, 4) = fort_hfp_math$binop_dp_cp_trunc;
		shared_vars.binop_trunc (3, 5) = fort_hfp_math$bad_data_types;
		shared_vars.binop_trunc (3, 6) = fort_hfp_math$bad_data_types;
		shared_vars.binop_trunc (4, 1) = fort_hfp_math$binop_cp_i_trunc;
		shared_vars.binop_trunc (4, 2) = fort_hfp_math$binop_cp_r_trunc;
		shared_vars.binop_trunc (4, 3) = fort_hfp_math$binop_cp_dp_trunc;
		shared_vars.binop_trunc (4, 4) = fort_hfp_math$binop_cp_cp_trunc;
		shared_vars.binop_trunc (4, 5) = fort_hfp_math$bad_data_types;
		shared_vars.binop_trunc (4, 6) = fort_hfp_math$bad_data_types;
		shared_vars.binop_trunc (5, 1) = fort_hfp_math$bad_data_types;
		shared_vars.binop_trunc (5, 2) = fort_hfp_math$bad_data_types;
		shared_vars.binop_trunc (5, 3) = fort_hfp_math$bad_data_types;
		shared_vars.binop_trunc (5, 4) = fort_hfp_math$bad_data_types;
		shared_vars.binop_trunc (5, 5) = fort_hfp_math$binop_lg_lg;
		shared_vars.binop_trunc (5, 6) = fort_hfp_math$bad_data_types;
		shared_vars.binop_trunc (6, 1) = fort_hfp_math$bad_data_types;
		shared_vars.binop_trunc (6, 2) = fort_hfp_math$bad_data_types;
		shared_vars.binop_trunc (6, 3) = fort_hfp_math$bad_data_types;
		shared_vars.binop_trunc (6, 4) = fort_hfp_math$bad_data_types;
		shared_vars.binop_trunc (6, 5) = fort_hfp_math$bad_data_types;
		shared_vars.binop_trunc (6, 6) = fort_hfp_math$binop_ch_ch;

		shared_vars.comp_parm (1, 1) = fort_hfp_math$comp_i_i;
		shared_vars.comp_parm (1, 2) = fort_hfp_math$comp_i_r;
		shared_vars.comp_parm (1, 3) = fort_hfp_math$comp_i_dp;
		shared_vars.comp_parm (1, 4) = fort_hfp_math$bad_data_types;
		shared_vars.comp_parm (1, 5) = fort_hfp_math$bad_data_types;
		shared_vars.comp_parm (1, 6) = fort_hfp_math$bad_data_types;
		shared_vars.comp_parm (2, 1) = fort_hfp_math$comp_r_i;
		shared_vars.comp_parm (2, 2) = fort_hfp_math$comp_r_r;
		shared_vars.comp_parm (2, 3) = fort_hfp_math$comp_r_dp;
		shared_vars.comp_parm (2, 4) = fort_hfp_math$bad_data_types;
		shared_vars.comp_parm (2, 5) = fort_hfp_math$bad_data_types;
		shared_vars.comp_parm (2, 6) = fort_hfp_math$bad_data_types;
		shared_vars.comp_parm (3, 1) = fort_hfp_math$comp_dp_i;
		shared_vars.comp_parm (3, 2) = fort_hfp_math$comp_dp_r;
		shared_vars.comp_parm (3, 3) = fort_hfp_math$comp_dp_dp;
		shared_vars.comp_parm (3, 4) = fort_hfp_math$bad_data_types;
		shared_vars.comp_parm (3, 5) = fort_hfp_math$bad_data_types;
		shared_vars.comp_parm (3, 6) = fort_hfp_math$bad_data_types;
		shared_vars.comp_parm (4, 1) = fort_hfp_math$bad_data_types;
		shared_vars.comp_parm (4, 2) = fort_hfp_math$bad_data_types;
		shared_vars.comp_parm (4, 3) = fort_hfp_math$bad_data_types;
		shared_vars.comp_parm (4, 4) = fort_hfp_math$comp_cp_cp;
		shared_vars.comp_parm (4, 5) = fort_hfp_math$bad_data_types;
		shared_vars.comp_parm (4, 6) = fort_hfp_math$bad_data_types;
		shared_vars.comp_parm (5, 1) = fort_hfp_math$bad_data_types;
		shared_vars.comp_parm (5, 2) = fort_hfp_math$bad_data_types;
		shared_vars.comp_parm (5, 3) = fort_hfp_math$bad_data_types;
		shared_vars.comp_parm (5, 4) = fort_hfp_math$bad_data_types;
		shared_vars.comp_parm (5, 5) = fort_hfp_math$comp_lg_lg;
		shared_vars.comp_parm (5, 6) = fort_hfp_math$bad_data_types;
		shared_vars.comp_parm (6, 1) = fort_hfp_math$bad_data_types;
		shared_vars.comp_parm (6, 2) = fort_hfp_math$bad_data_types;
		shared_vars.comp_parm (6, 3) = fort_hfp_math$bad_data_types;
		shared_vars.comp_parm (6, 4) = fort_hfp_math$bad_data_types;
		shared_vars.comp_parm (6, 5) = fort_hfp_math$bad_data_types;
		shared_vars.comp_parm (6, 6) = fort_hfp_math$comp_ch_ch;

		shared_vars.conv_round (1, 1) = fort_hfp_math$unary_no_op;
		shared_vars.conv_round (1, 2) = fort_hfp_math$conv_r_to_i_round;
		shared_vars.conv_round (1, 3) = fort_hfp_math$conv_dp_to_i_round;
		shared_vars.conv_round (1, 4) = fort_hfp_math$conv_cp_to_i_round;
		shared_vars.conv_round (1, 5) = fort_hfp_math$unary_bad_data;
		shared_vars.conv_round (1, 6) = fort_hfp_math$unary_bad_data;
		shared_vars.conv_round (2, 1) = fort_hfp_math$conv_i_to_r_round;
		shared_vars.conv_round (2, 2) = fort_hfp_math$unary_no_op;
		shared_vars.conv_round (2, 3) = fort_hfp_math$conv_dp_to_r_round;
		shared_vars.conv_round (2, 4) = fort_hfp_math$conv_cp_to_r_round;
		shared_vars.conv_round (2, 5) = fort_hfp_math$unary_bad_data;
		shared_vars.conv_round (2, 6) = fort_hfp_math$unary_bad_data;
		shared_vars.conv_round (3, 1) = fort_hfp_math$conv_i_to_dp_round;
		shared_vars.conv_round (3, 2) = fort_hfp_math$conv_r_to_dp_round;
		shared_vars.conv_round (3, 3) = fort_hfp_math$unary_no_op;
		shared_vars.conv_round (3, 4) = fort_hfp_math$conv_cp_to_dp_round;
		shared_vars.conv_round (3, 5) = fort_hfp_math$unary_bad_data;
		shared_vars.conv_round (3, 6) = fort_hfp_math$unary_bad_data;
		shared_vars.conv_round (4, 1) = fort_hfp_math$conv_i_to_cp_round;
		shared_vars.conv_round (4, 2) = fort_hfp_math$conv_r_to_cp_round;
		shared_vars.conv_round (4, 3) = fort_hfp_math$conv_dp_to_cp_round;
		shared_vars.conv_round (4, 4) = fort_hfp_math$unary_no_op;
		shared_vars.conv_round (4, 5) = fort_hfp_math$unary_bad_data;
		shared_vars.conv_round (4, 6) = fort_hfp_math$unary_bad_data;
		shared_vars.conv_round (5, 1) = fort_hfp_math$unary_bad_data;
		shared_vars.conv_round (5, 2) = fort_hfp_math$unary_bad_data;
		shared_vars.conv_round (5, 3) = fort_hfp_math$unary_bad_data;
		shared_vars.conv_round (5, 4) = fort_hfp_math$unary_bad_data;
		shared_vars.conv_round (5, 5) = fort_hfp_math$unary_no_op;
		shared_vars.conv_round (5, 6) = fort_hfp_math$unary_bad_data;
		shared_vars.conv_round (6, 1) = fort_hfp_math$unary_bad_data;
		shared_vars.conv_round (6, 2) = fort_hfp_math$unary_bad_data;
		shared_vars.conv_round (6, 3) = fort_hfp_math$unary_bad_data;
		shared_vars.conv_round (6, 4) = fort_hfp_math$unary_bad_data;
		shared_vars.conv_round (6, 5) = fort_hfp_math$unary_bad_data;
		shared_vars.conv_round (6, 6) = fort_hfp_math$conv_ch_to_ch;

		shared_vars.conv_trunc (1, 1) = fort_hfp_math$unary_no_op;
		shared_vars.conv_trunc (1, 2) = fort_hfp_math$conv_r_to_i_trunc;
		shared_vars.conv_trunc (1, 3) = fort_hfp_math$conv_dp_to_i_trunc;
		shared_vars.conv_trunc (1, 4) = fort_hfp_math$conv_cp_to_i_trunc;
		shared_vars.conv_trunc (1, 5) = fort_hfp_math$unary_bad_data;
		shared_vars.conv_trunc (1, 6) = fort_hfp_math$unary_bad_data;
		shared_vars.conv_trunc (2, 1) = fort_hfp_math$conv_i_to_r_trunc;
		shared_vars.conv_trunc (2, 2) = fort_hfp_math$unary_no_op;
		shared_vars.conv_trunc (2, 3) = fort_hfp_math$conv_dp_to_r_trunc;
		shared_vars.conv_trunc (2, 4) = fort_hfp_math$conv_cp_to_r_trunc;
		shared_vars.conv_trunc (2, 5) = fort_hfp_math$unary_bad_data;
		shared_vars.conv_trunc (2, 6) = fort_hfp_math$unary_bad_data;
		shared_vars.conv_trunc (3, 1) = fort_hfp_math$conv_i_to_dp_trunc;
		shared_vars.conv_trunc (3, 2) = fort_hfp_math$conv_r_to_dp_trunc;
		shared_vars.conv_trunc (3, 3) = fort_hfp_math$unary_no_op;
		shared_vars.conv_trunc (3, 4) = fort_hfp_math$conv_cp_to_dp_trunc;
		shared_vars.conv_trunc (3, 5) = fort_hfp_math$unary_bad_data;
		shared_vars.conv_trunc (3, 6) = fort_hfp_math$unary_bad_data;
		shared_vars.conv_trunc (4, 1) = fort_hfp_math$conv_i_to_cp_trunc;
		shared_vars.conv_trunc (4, 2) = fort_hfp_math$conv_r_to_cp_trunc;
		shared_vars.conv_trunc (4, 3) = fort_hfp_math$conv_dp_to_cp_trunc;
		shared_vars.conv_trunc (4, 4) = fort_hfp_math$unary_no_op;
		shared_vars.conv_trunc (4, 5) = fort_hfp_math$unary_bad_data;
		shared_vars.conv_trunc (4, 6) = fort_hfp_math$unary_bad_data;
		shared_vars.conv_trunc (5, 1) = fort_hfp_math$unary_bad_data;
		shared_vars.conv_trunc (5, 2) = fort_hfp_math$unary_bad_data;
		shared_vars.conv_trunc (5, 3) = fort_hfp_math$unary_bad_data;
		shared_vars.conv_trunc (5, 4) = fort_hfp_math$unary_bad_data;
		shared_vars.conv_trunc (5, 5) = fort_hfp_math$unary_no_op;
		shared_vars.conv_trunc (5, 6) = fort_hfp_math$unary_bad_data;
		shared_vars.conv_trunc (6, 1) = fort_hfp_math$unary_bad_data;
		shared_vars.conv_trunc (6, 2) = fort_hfp_math$unary_bad_data;
		shared_vars.conv_trunc (6, 3) = fort_hfp_math$unary_bad_data;
		shared_vars.conv_trunc (6, 4) = fort_hfp_math$unary_bad_data;
		shared_vars.conv_trunc (6, 5) = fort_hfp_math$unary_bad_data;
		shared_vars.conv_trunc (6, 6) = fort_hfp_math$conv_ch_to_ch;
	     end;
	else do;
		shared_vars.binop_round (1, 1) = fort_bfp_math$binop_i_i_round;
		shared_vars.binop_round (1, 2) = fort_bfp_math$binop_i_r_round;
		shared_vars.binop_round (1, 3) = fort_bfp_math$binop_i_dp_round;
		shared_vars.binop_round (1, 4) = fort_bfp_math$binop_i_cp_round;
		shared_vars.binop_round (1, 5) = fort_bfp_math$bad_data_types;
		shared_vars.binop_round (1, 6) = fort_bfp_math$bad_data_types;
		shared_vars.binop_round (2, 1) = fort_bfp_math$binop_r_i_round;
		shared_vars.binop_round (2, 2) = fort_bfp_math$binop_r_r_round;
		shared_vars.binop_round (2, 3) = fort_bfp_math$binop_r_dp_round;
		shared_vars.binop_round (2, 4) = fort_bfp_math$binop_r_cp_round;
		shared_vars.binop_round (2, 5) = fort_bfp_math$bad_data_types;
		shared_vars.binop_round (2, 6) = fort_bfp_math$bad_data_types;
		shared_vars.binop_round (3, 1) = fort_bfp_math$binop_dp_i_round;
		shared_vars.binop_round (3, 2) = fort_bfp_math$binop_dp_r_round;
		shared_vars.binop_round (3, 3) = fort_bfp_math$binop_dp_dp_round;
		shared_vars.binop_round (3, 4) = fort_bfp_math$binop_dp_cp_round;
		shared_vars.binop_round (3, 5) = fort_bfp_math$bad_data_types;
		shared_vars.binop_round (3, 6) = fort_bfp_math$bad_data_types;
		shared_vars.binop_round (4, 1) = fort_bfp_math$binop_cp_i_round;
		shared_vars.binop_round (4, 2) = fort_bfp_math$binop_cp_r_round;
		shared_vars.binop_round (4, 3) = fort_bfp_math$binop_cp_dp_round;
		shared_vars.binop_round (4, 4) = fort_bfp_math$binop_cp_cp_round;
		shared_vars.binop_round (4, 5) = fort_bfp_math$bad_data_types;
		shared_vars.binop_round (4, 6) = fort_bfp_math$bad_data_types;
		shared_vars.binop_round (5, 1) = fort_bfp_math$bad_data_types;
		shared_vars.binop_round (5, 2) = fort_bfp_math$bad_data_types;
		shared_vars.binop_round (5, 3) = fort_bfp_math$bad_data_types;
		shared_vars.binop_round (5, 4) = fort_bfp_math$bad_data_types;
		shared_vars.binop_round (5, 5) = fort_bfp_math$binop_lg_lg;
		shared_vars.binop_round (5, 6) = fort_bfp_math$bad_data_types;
		shared_vars.binop_round (6, 1) = fort_bfp_math$bad_data_types;
		shared_vars.binop_round (6, 2) = fort_bfp_math$bad_data_types;
		shared_vars.binop_round (6, 3) = fort_bfp_math$bad_data_types;
		shared_vars.binop_round (6, 4) = fort_bfp_math$bad_data_types;
		shared_vars.binop_round (6, 5) = fort_bfp_math$bad_data_types;
		shared_vars.binop_round (6, 6) = fort_bfp_math$binop_ch_ch;

		shared_vars.binop_trunc (1, 1) = fort_bfp_math$binop_i_i_trunc;
		shared_vars.binop_trunc (1, 2) = fort_bfp_math$binop_i_r_trunc;
		shared_vars.binop_trunc (1, 3) = fort_bfp_math$binop_i_dp_trunc;
		shared_vars.binop_trunc (1, 4) = fort_bfp_math$binop_i_cp_trunc;
		shared_vars.binop_trunc (1, 5) = fort_bfp_math$bad_data_types;
		shared_vars.binop_trunc (1, 6) = fort_bfp_math$bad_data_types;
		shared_vars.binop_trunc (2, 1) = fort_bfp_math$binop_r_i_trunc;
		shared_vars.binop_trunc (2, 2) = fort_bfp_math$binop_r_r_trunc;
		shared_vars.binop_trunc (2, 3) = fort_bfp_math$binop_r_dp_trunc;
		shared_vars.binop_trunc (2, 4) = fort_bfp_math$binop_r_cp_trunc;
		shared_vars.binop_trunc (2, 5) = fort_bfp_math$bad_data_types;
		shared_vars.binop_trunc (2, 6) = fort_bfp_math$bad_data_types;
		shared_vars.binop_trunc (3, 1) = fort_bfp_math$binop_dp_i_trunc;
		shared_vars.binop_trunc (3, 2) = fort_bfp_math$binop_dp_r_trunc;
		shared_vars.binop_trunc (3, 3) = fort_bfp_math$binop_dp_dp_trunc;
		shared_vars.binop_trunc (3, 4) = fort_bfp_math$binop_dp_cp_trunc;
		shared_vars.binop_trunc (3, 5) = fort_bfp_math$bad_data_types;
		shared_vars.binop_trunc (3, 6) = fort_bfp_math$bad_data_types;
		shared_vars.binop_trunc (4, 1) = fort_bfp_math$binop_cp_i_trunc;
		shared_vars.binop_trunc (4, 2) = fort_bfp_math$binop_cp_r_trunc;
		shared_vars.binop_trunc (4, 3) = fort_bfp_math$binop_cp_dp_trunc;
		shared_vars.binop_trunc (4, 4) = fort_bfp_math$binop_cp_cp_trunc;
		shared_vars.binop_trunc (4, 5) = fort_bfp_math$bad_data_types;
		shared_vars.binop_trunc (4, 6) = fort_bfp_math$bad_data_types;
		shared_vars.binop_trunc (5, 1) = fort_bfp_math$bad_data_types;
		shared_vars.binop_trunc (5, 2) = fort_bfp_math$bad_data_types;
		shared_vars.binop_trunc (5, 3) = fort_bfp_math$bad_data_types;
		shared_vars.binop_trunc (5, 4) = fort_bfp_math$bad_data_types;
		shared_vars.binop_trunc (5, 5) = fort_bfp_math$binop_lg_lg;
		shared_vars.binop_trunc (5, 6) = fort_bfp_math$bad_data_types;
		shared_vars.binop_trunc (6, 1) = fort_bfp_math$bad_data_types;
		shared_vars.binop_trunc (6, 2) = fort_bfp_math$bad_data_types;
		shared_vars.binop_trunc (6, 3) = fort_bfp_math$bad_data_types;
		shared_vars.binop_trunc (6, 4) = fort_bfp_math$bad_data_types;
		shared_vars.binop_trunc (6, 5) = fort_bfp_math$bad_data_types;
		shared_vars.binop_trunc (6, 6) = fort_bfp_math$binop_ch_ch;

		shared_vars.comp_parm (1, 1) = fort_bfp_math$comp_i_i;
		shared_vars.comp_parm (1, 2) = fort_bfp_math$comp_i_r;
		shared_vars.comp_parm (1, 3) = fort_bfp_math$comp_i_dp;
		shared_vars.comp_parm (1, 4) = fort_bfp_math$bad_data_types;
		shared_vars.comp_parm (1, 5) = fort_bfp_math$bad_data_types;
		shared_vars.comp_parm (1, 6) = fort_bfp_math$bad_data_types;
		shared_vars.comp_parm (2, 1) = fort_bfp_math$comp_r_i;
		shared_vars.comp_parm (2, 2) = fort_bfp_math$comp_r_r;
		shared_vars.comp_parm (2, 3) = fort_bfp_math$comp_r_dp;
		shared_vars.comp_parm (2, 4) = fort_bfp_math$bad_data_types;
		shared_vars.comp_parm (2, 5) = fort_bfp_math$bad_data_types;
		shared_vars.comp_parm (2, 6) = fort_bfp_math$bad_data_types;
		shared_vars.comp_parm (3, 1) = fort_bfp_math$comp_dp_i;
		shared_vars.comp_parm (3, 2) = fort_bfp_math$comp_dp_r;
		shared_vars.comp_parm (3, 3) = fort_bfp_math$comp_dp_dp;
		shared_vars.comp_parm (3, 4) = fort_bfp_math$bad_data_types;
		shared_vars.comp_parm (3, 5) = fort_bfp_math$bad_data_types;
		shared_vars.comp_parm (3, 6) = fort_bfp_math$bad_data_types;
		shared_vars.comp_parm (4, 1) = fort_bfp_math$bad_data_types;
		shared_vars.comp_parm (4, 2) = fort_bfp_math$bad_data_types;
		shared_vars.comp_parm (4, 3) = fort_bfp_math$bad_data_types;
		shared_vars.comp_parm (4, 4) = fort_bfp_math$comp_cp_cp;
		shared_vars.comp_parm (4, 5) = fort_bfp_math$bad_data_types;
		shared_vars.comp_parm (4, 6) = fort_bfp_math$bad_data_types;
		shared_vars.comp_parm (5, 1) = fort_bfp_math$bad_data_types;
		shared_vars.comp_parm (5, 2) = fort_bfp_math$bad_data_types;
		shared_vars.comp_parm (5, 3) = fort_bfp_math$bad_data_types;
		shared_vars.comp_parm (5, 4) = fort_bfp_math$bad_data_types;
		shared_vars.comp_parm (5, 5) = fort_bfp_math$comp_lg_lg;
		shared_vars.comp_parm (5, 6) = fort_bfp_math$bad_data_types;
		shared_vars.comp_parm (6, 1) = fort_bfp_math$bad_data_types;
		shared_vars.comp_parm (6, 2) = fort_bfp_math$bad_data_types;
		shared_vars.comp_parm (6, 3) = fort_bfp_math$bad_data_types;
		shared_vars.comp_parm (6, 4) = fort_bfp_math$bad_data_types;
		shared_vars.comp_parm (6, 5) = fort_bfp_math$bad_data_types;
		shared_vars.comp_parm (6, 6) = fort_bfp_math$comp_ch_ch;

		shared_vars.conv_round (1, 1) = fort_bfp_math$unary_no_op;
		shared_vars.conv_round (1, 2) = fort_bfp_math$conv_r_to_i_round;
		shared_vars.conv_round (1, 3) = fort_bfp_math$conv_dp_to_i_round;
		shared_vars.conv_round (1, 4) = fort_bfp_math$conv_cp_to_i_round;
		shared_vars.conv_round (1, 5) = fort_bfp_math$unary_bad_data;
		shared_vars.conv_round (1, 6) = fort_bfp_math$unary_bad_data;
		shared_vars.conv_round (2, 1) = fort_bfp_math$conv_i_to_r_round;
		shared_vars.conv_round (2, 2) = fort_bfp_math$unary_no_op;
		shared_vars.conv_round (2, 3) = fort_bfp_math$conv_dp_to_r_round;
		shared_vars.conv_round (2, 4) = fort_bfp_math$conv_cp_to_r_round;
		shared_vars.conv_round (2, 5) = fort_bfp_math$unary_bad_data;
		shared_vars.conv_round (2, 6) = fort_bfp_math$unary_bad_data;
		shared_vars.conv_round (3, 1) = fort_bfp_math$conv_i_to_dp_round;
		shared_vars.conv_round (3, 2) = fort_bfp_math$conv_r_to_dp_round;
		shared_vars.conv_round (3, 3) = fort_bfp_math$unary_no_op;
		shared_vars.conv_round (3, 4) = fort_bfp_math$conv_cp_to_dp_round;
		shared_vars.conv_round (3, 5) = fort_bfp_math$unary_bad_data;
		shared_vars.conv_round (3, 6) = fort_bfp_math$unary_bad_data;
		shared_vars.conv_round (4, 1) = fort_bfp_math$conv_i_to_cp_round;
		shared_vars.conv_round (4, 2) = fort_bfp_math$conv_r_to_cp_round;
		shared_vars.conv_round (4, 3) = fort_bfp_math$conv_dp_to_cp_round;
		shared_vars.conv_round (4, 4) = fort_bfp_math$unary_no_op;
		shared_vars.conv_round (4, 5) = fort_bfp_math$unary_bad_data;
		shared_vars.conv_round (4, 6) = fort_bfp_math$unary_bad_data;
		shared_vars.conv_round (5, 1) = fort_bfp_math$unary_bad_data;
		shared_vars.conv_round (5, 2) = fort_bfp_math$unary_bad_data;
		shared_vars.conv_round (5, 3) = fort_bfp_math$unary_bad_data;
		shared_vars.conv_round (5, 4) = fort_bfp_math$unary_bad_data;
		shared_vars.conv_round (5, 5) = fort_bfp_math$unary_no_op;
		shared_vars.conv_round (5, 6) = fort_bfp_math$unary_bad_data;
		shared_vars.conv_round (6, 1) = fort_bfp_math$unary_bad_data;
		shared_vars.conv_round (6, 2) = fort_bfp_math$unary_bad_data;
		shared_vars.conv_round (6, 3) = fort_bfp_math$unary_bad_data;
		shared_vars.conv_round (6, 4) = fort_bfp_math$unary_bad_data;
		shared_vars.conv_round (6, 5) = fort_bfp_math$unary_bad_data;
		shared_vars.conv_round (6, 6) = fort_bfp_math$conv_ch_to_ch;

		shared_vars.conv_trunc (1, 1) = fort_bfp_math$unary_no_op;
		shared_vars.conv_trunc (1, 2) = fort_bfp_math$conv_r_to_i_trunc;
		shared_vars.conv_trunc (1, 3) = fort_bfp_math$conv_dp_to_i_trunc;
		shared_vars.conv_trunc (1, 4) = fort_bfp_math$conv_cp_to_i_trunc;
		shared_vars.conv_trunc (1, 5) = fort_bfp_math$unary_bad_data;
		shared_vars.conv_trunc (1, 6) = fort_bfp_math$unary_bad_data;
		shared_vars.conv_trunc (2, 1) = fort_bfp_math$conv_i_to_r_trunc;
		shared_vars.conv_trunc (2, 2) = fort_bfp_math$unary_no_op;
		shared_vars.conv_trunc (2, 3) = fort_bfp_math$conv_dp_to_r_trunc;
		shared_vars.conv_trunc (2, 4) = fort_bfp_math$conv_cp_to_r_trunc;
		shared_vars.conv_trunc (2, 5) = fort_bfp_math$unary_bad_data;
		shared_vars.conv_trunc (2, 6) = fort_bfp_math$unary_bad_data;
		shared_vars.conv_trunc (3, 1) = fort_bfp_math$conv_i_to_dp_trunc;
		shared_vars.conv_trunc (3, 2) = fort_bfp_math$conv_r_to_dp_trunc;
		shared_vars.conv_trunc (3, 3) = fort_bfp_math$unary_no_op;
		shared_vars.conv_trunc (3, 4) = fort_bfp_math$conv_cp_to_dp_trunc;
		shared_vars.conv_trunc (3, 5) = fort_bfp_math$unary_bad_data;
		shared_vars.conv_trunc (3, 6) = fort_bfp_math$unary_bad_data;
		shared_vars.conv_trunc (4, 1) = fort_bfp_math$conv_i_to_cp_trunc;
		shared_vars.conv_trunc (4, 2) = fort_bfp_math$conv_r_to_cp_trunc;
		shared_vars.conv_trunc (4, 3) = fort_bfp_math$conv_dp_to_cp_trunc;
		shared_vars.conv_trunc (4, 4) = fort_bfp_math$unary_no_op;
		shared_vars.conv_trunc (4, 5) = fort_bfp_math$unary_bad_data;
		shared_vars.conv_trunc (4, 6) = fort_bfp_math$unary_bad_data;
		shared_vars.conv_trunc (5, 1) = fort_bfp_math$unary_bad_data;
		shared_vars.conv_trunc (5, 2) = fort_bfp_math$unary_bad_data;
		shared_vars.conv_trunc (5, 3) = fort_bfp_math$unary_bad_data;
		shared_vars.conv_trunc (5, 4) = fort_bfp_math$unary_bad_data;
		shared_vars.conv_trunc (5, 5) = fort_bfp_math$unary_no_op;
		shared_vars.conv_trunc (5, 6) = fort_bfp_math$unary_bad_data;
		shared_vars.conv_trunc (6, 1) = fort_bfp_math$unary_bad_data;
		shared_vars.conv_trunc (6, 2) = fort_bfp_math$unary_bad_data;
		shared_vars.conv_trunc (6, 3) = fort_bfp_math$unary_bad_data;
		shared_vars.conv_trunc (6, 4) = fort_bfp_math$unary_bad_data;
		shared_vars.conv_trunc (6, 5) = fort_bfp_math$unary_bad_data;
		shared_vars.conv_trunc (6, 6) = fort_bfp_math$conv_ch_to_ch;
	     end;

	do i = 1 to 6;
	     shared_vars.negate_round (i) = shared_vars.binop_round (i, i);
	     shared_vars.negate_trunc (i) = shared_vars.binop_trunc (i, i);
	end;
	return;					/* end of init_shared_vars */

     end /* fort_defaults_ */;
