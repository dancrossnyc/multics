/****^  ******************************************************
        *                                                    *
        * Copyright, (C) Honeywell Limited, 1983             *
        *                                                    *
        * Copyright (c) 1972 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        ****************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-07-14,BWong), approve(86-07-14,MCR7286), audit(86-07-17,Ginter),
     install(86-07-28,MR12.0-1105):
     Fix fortran bug 456.
                                                   END HISTORY COMMENTS */


/* format: style2 */
fort_eval_parm:
     procedure (p, target_id, error_code);

/* Procedure to do compile-time fortran expression evaluation.  Args are:

	p		pointer to parameter structure, holding most of the useful info  (IN-OUT)
	target_id		string identifying item being evaluated (for errors)  (IN)
	error_code	success/failure indicator	(OUT)

Written:
	July 1979 -- PES

Modified:
          03 June 1985 - BW - 456: Fix out_of_bounds error when error_code = -3.
	23 March 1981 - MEP - Add new parameters to keep track of parse's stack and alter character allocation.  
		Alter the calling sequence and internal logic, so that FEP creates the constant nodes, not the caller.
	27 July 1980 - MEP --  Changes to allow evaluation of F77 character mode parameter stuff.
	14 Sep 1979 -- PES -- Change to make result_data_type=0 mean don't convert result.
*/

%include fort_system_constants;
%include fort_nodes;
	declare 1 shared_globals	 aligned based (shared_ptr),
%include fort_shared_vars;
%include fort_options;
%include fort_parameter;

	declare p			 pointer;
	declare target_id		 character (*);
	declare error_code		 fixed binary (35);

	declare 1 parm_stk		 (0:700) aligned based (addr (stack (stack_index))),
		2 data_type	 fixed binary (4) unaligned,
		2 location	 fixed binary (18) unaligned,
						/* valid if char */
		2 pad1		 bit (12),
		2 value		 bit (72) unaligned;/* valid if ^ char */

	declare shared_ptr		 pointer;
	declare start_of_polish	 fixed binary (18);
	declare end_of_polish	 fixed binary (18);
	declare result_data_type	 fixed binary (4);
	declare result_location	 fixed binary (18);
	declare desired_data_type	 fixed binary (4);
	declare rounding		 bit (1);
	declare max_stack		 fixed binary (18);
	declare stack_index		 fixed binary (18);

	declare (mode1, mode2)	 fixed binary (4) unsigned unaligned;
	declare based_value		 bit (72) based;

	declare (max_s_ndx, s_ndx)	 fixed binary;
	declare local_error_code	 fixed binary (35);
	declare i			 fixed binary;

	declare OS		 (0:operand_max_len - 1) bit (36) aligned based (operand_base);
	declare polish_string	 (0:polish_max_len - 1) fixed bin (19) aligned based (polish_base);
	declare stack		 (0:object_max_len - 1) bit (36) aligned based (object_base);

	declare polish_base		 pointer;
	declare object_base		 pointer;
	declare operand_base	 pointer;
	declare data_ptr		 pointer;

	declare (addr, currentsize, fixed, length, max, null, rel, size, substr)
				 builtin;

	declare (fixedoverflow, overflow, underflow, zerodivide)
				 condition;

	begin;					/* Because some noodge declared a var named
						   error in an include file
						   Begin block can be removed when
						   pl1 bug 1758 is fixed */

	     declare error		      condition;

	     shared_ptr = p -> parameter.shared_pointer;
	     desired_data_type = p -> parameter.desired_data_type;
	     rounding = p -> parameter.rounding;
	     start_of_polish = p -> parameter.start_of_polish;
	     end_of_polish = p -> parameter.end_of_polish;
	     stack_index = p -> parameter.stack_index;
	     max_stack = p -> parameter.max_stack;

	     on fixedoverflow go to fixedoverflow_condition;
	     on overflow go to overflow_condition;
	     on underflow go to underflow_condition;
	     on zerodivide go to zerodivide_condition;
	     on error go to error_condition;

	     if desired_data_type < 0 | desired_data_type > last_assigned_mode
						/* illegal data types */
	     then do;
		     error_code = -1;
		     call print_message (170);
		     call finish_up;
		     return;
		end;

	     local_error_code = 0;
	     s_ndx, max_s_ndx = 0;

	     operand_base = shared_globals.operand_base;
	     polish_base = shared_globals.polish_base;
	     object_base = shared_globals.object_base;

/* error codes returned by the evaluation functions:

	 0 -- all ok
	-1 -- bad data types
	-2 -- operation not yet implemented
	-3 -- a non-constant operand was encountered
	-4 -- fixedoverflow condition was signalled
	-5 -- overflow condition was signalled
	-6 -- underflow condition was signalled
	-7 -- zerodivide condition was signalled
	-8 -- error condition was signalled
	-9 -- invalid operator encountered
*/

	     do i = start_of_polish to end_of_polish while (local_error_code = 0);

		if polish_string (i) > last_assigned_op
		then do;

/* it must be an operand and better be a constant */

			data_ptr = addr (OS (polish_string (i)));
			if data_ptr -> node.node_type = constant_node
			then do;

				parm_stk (s_ndx).data_type = data_ptr -> constant.data_type;
				parm_stk (s_ndx).value = data_ptr -> constant.value;
				s_ndx = s_ndx + 1;
				max_s_ndx = max (max_s_ndx, s_ndx);
			     end;

			else if data_ptr -> node.node_type = char_constant_node
			then do;
				parm_stk (s_ndx).data_type = char_mode;
				parm_stk (s_ndx).location = polish_string (i);
				s_ndx = s_ndx + 1;
				max_s_ndx = max (max_s_ndx, s_ndx);
			     end;

			else do;
				call print_message (171, addr (OS (polish_string (i))) -> symbol.name, target_id);
				local_error_code = -3;
			     end;
		     end;

		else if polish_string (i) = negate_op
		then do;
			if parm_stk (s_ndx - 1).data_type = char_mode
			then call bad_data_type;
			else if rounding
			then addr (parm_stk (s_ndx - 1).value) -> based_value =
				negate_round (parm_stk (s_ndx - 1).data_type)
				(6, addr (parm_stk (s_ndx - 1).value) -> based_value,
				addr (parm_stk (s_ndx - 1).value) -> based_value, local_error_code);

			else addr (parm_stk (s_ndx - 1).value) -> based_value =
				negate_trunc (parm_stk (s_ndx - 1).data_type)
				(6, addr (parm_stk (s_ndx - 1).value) -> based_value,
				addr (parm_stk (s_ndx - 1).value) -> based_value, local_error_code);
		     end;

		else if polish_string (i) > 1 & polish_string (i) < 7
						/* binary arithmetic  operators */
		then do;
			if parm_stk (s_ndx - 1).data_type = char_mode | parm_stk (s_ndx - 2).data_type = char_mode
			then call bad_data_type;
			else if rounding
			then addr (parm_stk (s_ndx - 2).value) -> based_value =
				binop_round (parm_stk (s_ndx - 2).data_type, parm_stk (s_ndx - 1).data_type)
				(polish_string (i) - 1, addr (parm_stk (s_ndx - 2).value) -> based_value,
				addr (parm_stk (s_ndx - 1).value) -> based_value, local_error_code);

			else addr (parm_stk (s_ndx - 2).value) -> based_value =
				binop_trunc (parm_stk (s_ndx - 2).data_type, parm_stk (s_ndx - 1).data_type)
				(polish_string (i) - 1, addr (parm_stk (s_ndx - 2).value) -> based_value,
				addr (parm_stk (s_ndx - 1).value) -> based_value, local_error_code);

			parm_stk (s_ndx - 2).data_type =
			     max (parm_stk (s_ndx - 1).data_type, parm_stk (s_ndx - 2).data_type);
			s_ndx = s_ndx - 1;
		     end;

		else if polish_string (i) > 7 & polish_string (i) < 14
						/* comparisons */
		then do;
			mode1 = parm_stk (s_ndx - 1).data_type;
			mode2 = parm_stk (s_ndx - 2).data_type;
			if mode1 ^= char_mode & mode2 ^= char_mode
			then do;
				addr (parm_stk (s_ndx - 2).value) -> based_value =
				     comp_parm (parm_stk (s_ndx - 2).data_type, parm_stk (s_ndx - 1).data_type)
				     (polish_string (i) - 1, addr (parm_stk (s_ndx - 2).value) -> based_value,
				     addr (parm_stk (s_ndx - 1).value) -> based_value, local_error_code);

				parm_stk (s_ndx - 2).data_type = logical_mode;
				s_ndx = s_ndx - 1;
			     end;
			else if mode1 = char_mode & mode2 = char_mode
			then do;
				parm_stk (s_ndx - 2).value =
				     comp_chars (polish_string (i), (parm_stk (s_ndx - 2).location),
				     (parm_stk (s_ndx - 1).location));
				parm_stk (s_ndx - 2).data_type = logical_mode;
				s_ndx = s_ndx - 1;
			     end;
			else call bad_data_type;
		     end;

		else if polish_string (i) = not_op
		then if parm_stk (s_ndx - 1).data_type = logical_mode
		     then substr (parm_stk (s_ndx - 1).value, 1, 1) = ^substr (parm_stk (s_ndx - 1).value, 1, 1);
		     else call bad_operation;

		else if polish_string (i) = or_op | polish_string (i) = and_op
		then if parm_stk (s_ndx - 1).data_type = logical_mode & parm_stk (s_ndx - 1).data_type = logical_mode
		     then do;
			     if polish_string (i) = or_op
			     then parm_stk (s_ndx - 2).value =
				     parm_stk (s_ndx - 2).value | parm_stk (s_ndx - 1).value;
			     else parm_stk (s_ndx - 2).value =
				     parm_stk (s_ndx - 2).value & parm_stk (s_ndx - 1).value;
			     s_ndx = s_ndx - 1;
			end;
		     else call bad_operation;

		else if polish_string (i) = cat_op
		then do;
			if parm_stk (s_ndx - 2).data_type = char_mode & parm_stk (s_ndx - 1).data_type = char_mode
			then do;
				parm_stk (s_ndx - 2).location =
				     concat_char_cons ((parm_stk (s_ndx - 2).location),
				     (parm_stk (s_ndx - 1).location));
				s_ndx = s_ndx - 1;
			     end;
			else call bad_data_type;
		     end;

		else call bad_operation;

	     end;

	     if local_error_code = 0 & desired_data_type ^= 0 & desired_data_type ^= char_mode
	     then if rounding
		then addr (parm_stk (s_ndx - 1).value) -> based_value =
			conv_round (desired_data_type, parm_stk (s_ndx - 1).data_type)
			(addr (parm_stk (s_ndx - 1).value) -> based_value, local_error_code);
		else addr (parm_stk (s_ndx - 1).value) -> based_value =
			conv_trunc (desired_data_type, parm_stk (s_ndx - 1).data_type)
			(addr (parm_stk (s_ndx - 1).value) -> based_value, local_error_code);

	     else if local_error_code = -1
	     then call print_message (172, target_id);

	     else if local_error_code = -2
	     then call print_message (173, target_id);

	     else if local_error_code = -3
	     then do;
		     error_code = local_error_code;
		     call finish_up;
		     return;
		end;

	     if desired_data_type ^= 0
	     then p -> parameter.result_data_type = desired_data_type;
	     else p -> parameter.result_data_type = parm_stk (s_ndx - 1).data_type;

	     if p -> parameter.result_data_type = char_mode
	     then p -> parameter.result_location = parm_stk (s_ndx - 1).location;
	     else p -> parameter.result_location =
		     create_constant ((p -> parameter.result_data_type), (parm_stk (s_ndx - 1).value));

	     error_code = local_error_code;

	     call finish_up;
	     return;

fixedoverflow_condition:
	     call print_message (174, "fixedoverflow", target_id);
	     error_code = -4;
	     call finish_up;
	     return;

overflow_condition:
	     call print_message (174, "overflow", target_id);
	     error_code = -5;
	     call finish_up;
	     return;

underflow_condition:
	     call print_message (174, "underflow", target_id);
	     error_code = -6;
	     call finish_up;
	     return;

zerodivide_condition:
	     call print_message (174, "zerodivide", target_id);
	     error_code = -7;
	     call finish_up;
	     return;

error_condition:
	     call print_message (174, "error", target_id);
	     error_code = -8;
	     call finish_up;
	     return;

	end;

finish_up:
     procedure;

	p -> parameter.max_stack = max (max_stack, binary (rel (addr (parm_stk (max_s_ndx))), 18));
	revert fixedoverflow, overflow, underflow, zerodivide, error;

     end finish_up;

comp_chars:
     procedure (op_id, oper1, oper2) returns (bit (72) aligned);

/* do the pl1 character comparisons, used to be in fort_parm_math */

	declare op_id		 fixed binary (19);
	declare (oper1, oper2)	 fixed binary (18);
	declare (ch1, ch2)		 pointer;

	ch1 = addr (OS (oper1));
	ch2 = addr (OS (oper2));
	goto comparison (op_id);

comparison (8):					/* less_op */
	return (ch1 -> char_constant.value < ch2 -> char_constant.value);

comparison (9):					/* less_or_equal_op */
	return (ch1 -> char_constant.value <= ch2 -> char_constant.value);

comparison (10):					/* equal_op */
	return (ch1 -> char_constant.value = ch2 -> char_constant.value);

comparison (11):					/* not_equal_op */
	return (ch1 -> char_constant.value ^= ch2 -> char_constant.value);

comparison (12):					/* greater_or_equal_op */
	return (ch1 -> char_constant.value >= ch2 -> char_constant.value);

comparison (13):					/* greater_op */
	return (ch1 -> char_constant.value > ch2 -> char_constant.value);

     end comp_chars;

concat_char_cons:
     procedure (ch1, ch2) returns (fixed binary (18));

/*  procedure to do the concatenation and store the result in a temp char_cons */

	declare (ch1, ch2)		 fixed binary (18);

	return (create_char_constant (addr (OS (ch1)) -> char_constant.value || addr (OS (ch2)) -> char_constant.value))
	     ;

     end concat_char_cons;

bad_data_type:
     procedure ();
	call print_message (176, target_id);
	local_error_code = -3;
	return;
     end bad_data_type;


bad_operation:
     procedure ();
	call print_message (175, target_id);
	local_error_code = -9;
	return;
     end bad_operation;


     end fort_eval_parm;
