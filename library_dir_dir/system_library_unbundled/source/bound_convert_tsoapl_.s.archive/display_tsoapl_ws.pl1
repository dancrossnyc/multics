/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

display_tsoapl_ws: dtw:
     procedure;

/* Started by Paul Green */
/* Brought to fruition by Bernard Greenberg, 10/77, features galore. */
/* Modified 771208 by PG to display library_number and man_number */
/* Modified 781005 by PG to fix bug 347 in declaration of function line offsets */
/* Modified 840907 by C Spitzer. correct length of format string passed to dump_segment_ */

/* automatic */

dcl  arg_len fixed bin (21),
     aoutsw ptr,
     arg_ptr ptr,
     bitcount fixed bin (24),
     code fixed bin (35),
     dname char (168),
     ename char (32),
     idx fixed bin,
     long_option bit (1) aligned,
     rhorho fixed bin,
     this_rho fixed bin,
     qr13stk fixed bin,
     qsymbot fixed bin,
     symtab_len fixed bin,
     dtype fixed bin,
     sx fixed bin,
     temp_time fixed bin (71),
     temp_timec char (24);

/* based */

dcl  arg_string char (arg_len) based (arg_ptr);

/* builtins */

dcl (addr, addrel, bin, binary, copy, divide, fixed, maxlength, mod, null, size, substr, translate, unspec) builtin;

/* entries */

dcl  com_err_ entry options (variable),
     convert_date_to_binary_ entry (char (*), fixed bin (71), fixed bin (35)),
     date_time_ entry (fixed bin (71), char (*)),
     apl_zcode_to_ascii_ entry (char (*), char (*)),
     dump_segment_ entry (ptr, ptr, fixed bin, fixed bin, fixed bin, bit (*)),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35)),
     expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed bin (35)),
     hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr,
     fixed bin (35)),
     hcs_$terminate_noname entry (ptr, fixed bin (35)),
     ioa_ entry options (variable),
     ioa_$ioa_switch entry options (variable),
     ioa_$ioa_switch_nnl entry options (variable),
     ioa_$nnl entry options (variable),
     ioa_$rsnnl entry options (variable),
     iox_$look_iocb entry (char (*), ptr, fixed bin (35));

/* external static */

dcl  iox_$user_output ptr ext;
dcl  error_table_$badopt fixed bin (35) ext;

/* internal static */

dcl  my_name char (17) internal static initial ("display_tsoapl_ws");

/* include files */

%include apl_characters;
%include apl_number_data;
%include tsoapl_dcls;

/* program */

	call iox_$look_iocb ("aplout", aoutsw, code);
	if code ^= 0 then aoutsw = iox_$user_output;

	call cu_$arg_ptr (1, arg_ptr, arg_len, code);
	if code ^= 0
	then do;
	     call com_err_ (code, my_name, "Usage: display_tsoapl_ws path");
	     return;
	end;

	call expand_pathname_$add_suffix (arg_string, "sv.tsoapl", dname, ename, code);
	if code ^= 0
	then do;
	     call com_err_ (code, my_name, "^a", arg_string);
	     return;
	end;

	call hcs_$initiate_count (dname, ename, "", bitcount, 0, aplsv_ws_ptr, code);
	if aplsv_ws_ptr = null
	then do;
	     call com_err_ (code, my_name, "^a>^a", dname, ename);
	     return;
	end;

	qr13stk = cvb36f32 (aplsv_ws.qr13stk)/4;
	qsymbot = divide (binary (pack (aplsv_ws.qsymbot)), 4, 20, 0);

	call cu_$arg_ptr (2, arg_ptr, arg_len, code);
	if code = 0
	then if arg_string = "-lg" | arg_string = "-long"
	     then long_option = "1"b;
	     else do;
		call com_err_ (error_table_$badopt, my_name, arg_string);
		go to finale;
	     end;
	else long_option = "0"b;

	if long_option
	then do;
	     call ioa_ ("name:^-^d ^a", cvb36f32 (aplsv_ws.library_number),
		cv_ascii (substr (aplsv_ws.wsname.chars, 1, aplsv_ws.wsname.len)));
	     call convert_date_to_binary_ (cv_ascii (aplsv_ws.date_saved) || " 00:00", temp_time, code);
	     temp_time = temp_time + fixed (1e6 * cvb36f32 (aplsv_ws.time_saved)/3e2, 71);
	     call date_time_ (temp_time, temp_timec);
	     call ioa_ ("saved:^-^a", temp_timec);
	     call ioa_ ("saved by:^-^d", cvb36f32 (aplsv_ws.man_number));
	     call ioa_ ("fuzz:^-^w", aplsv_ws.fuzz);
	     call ioa_ ("index origin:^-^d", cvb36f32 (aplsv_ws.index_origin));
	     call ioa_ ("seed:^-^d", cvb36f32 (aplsv_ws.seed));
	     call ioa_ ("digits:^-^d", cvb36f32 (aplsv_ws.digits));
	     call ioa_ ("width:^-^d", bin (cv_b18 (aplsv_ws.printing_width), 16));
	     call ioa_ ("");
	     call ioa_ ("qsymbot:^-^w", qsymbot);
	     call ioa_ ("qr13stk:^-^w", qr13stk);
	     call ioa_ ("mx:^-^w", divide (cvb36f32 (aplsv_ws.mx), 4, 20, 0));
	     call ioa_ ("svi:^-^w", divide (cvb36f32 (aplsv_ws.svi), 4, 20, 0));
	     call ioa_ ("");
	end;

	aplsv_symtab_ptr = byteptr (aplsv_ws.qsymbot);
	symtab_len = (qr13stk - qsymbot)/size (symtbe);

	do sx = 1 to symtab_len;
	     if aplsv_symtab (sx).type ^= UNUSED_TYPE
	     then call process_symbol (sx);
	end;
finale:
	call hcs_$terminate_noname (aplsv_ws_ptr, code);
	return;

process_symbol:
	procedure (bv_symdex);

/* parameters */

dcl  bv_symdex fixed bin;

/* automatic */

dcl  nlabels_w_nargs fixed bin;
dcl  nlines fixed bin;
dcl  sx fixed bin;
dcl  code bit (9);
dcl  cx fixed bin;
dcl  space_state bit (1);
dcl  f17un fixed bin (17) unaligned;
dcl  bit72 bit (72) aligned;
dcl  elmtct fixed bin;
dcl (i, j, k) fixed bin;
dcl  fx35 fixed bin (35);
dcl  varsymptr ptr;
dcl  funexp char (5000) varying;
dcl  vtemp char (100) varying;

/* based */

dcl  based_elmtct_charcons char (elmtct) based (addr (fun_code.code (cx)));
dcl  cxa (0:99999) bit (36) aligned based (aplsv_ws_ptr);

/* program */

	     sx = bv_symdex;
	     symtbep = addr (aplsv_symtab (sx));

	     if symtbe.value_offset = ""b		/* ignore names with no value */
	     then return;

	     aplsv_value_ptr = byteptr ("000"b3 || symtbe.value_offset);

	     if symtbe.type = VARIABLE_TYPE
	     then do;
		rhorho = divide (cv_fb17 (aplsv_value.rhorho_x4), 4, 21, 0);
		array_ptr = addr (aplsv_value.rho (rhorho + 1));
		data_elements = 1;
		do idx = 1 to rhorho;
		     this_rho = cvb36f32 (aplsv_value.rho (idx));
		     data_elements = data_elements * this_rho;
		end;
		funexp = get_symname (symtbep) || cv_asciich ("15"b4); /* <- */
		do idx = 1 to rhorho;
		     if idx ^= 1 then funexp = funexp || " ";
		     call ioa_$rsnnl ("^d", vtemp, 0, cvb36f32 (aplsv_value.rho (idx)));
		     funexp = funexp || vtemp;
		end;
		call ioa_$ioa_switch_nnl
		     (aoutsw, "^a ^[^a ^;^s^]", funexp, rhorho ^= 0, cv_asciich ("2D"b4));
						/* rho */
		dtype = binary (aplsv_value.type, 9);
		if dtype < 1 | dtype > 4 then do;
		     call ioa_$nnl ("Bad data type: ^d: ", dtype);
		     call dumphex (aplsv_value_ptr, 16);
		     go to badsym;
		end;
		go to data_type (dtype);

data_type (1):
		do j = 1 to data_elements/8;
		     do k = 1 to 8;
			call ioa_$ioa_switch_nnl (aoutsw, "^[ ^]^b", ^(j = 1 & k = 1),
			     substr (bit_array.data (j), k, 1));
		     end;
		end;
		do k = 1 to mod (data_elements, 8);
		     call ioa_$ioa_switch_nnl (aoutsw, "^[ ^]^b", ^(k = 1 & data_elements < 8),
			substr (bit_array.tail, k, 1));
		end;
		go to end_data_type;

data_type (2):
		do idx = 1 to data_elements;
		     call ioa_$ioa_switch_nnl (aoutsw, "^[ ^]^d", idx ^= 1, binary (pack (fixed_array (idx))));
		end;
		go to end_data_type;

data_type (3):
		do idx = 1 to data_elements;
		     call ioa_$ioa_switch_nnl (aoutsw, "^[ ^]^e", idx ^= 1, cv_float (float_array (idx)));
		end;
		go to end_data_type;

data_type (4):
		call ioa_$ioa_switch_nnl (aoutsw, "^a^/", requote (cv_ascii (char_array)));

end_data_type:	call ioa_$ioa_switch_nnl (aoutsw, "^/");
	     end;
	     else

	     if symtbe.type = FUNCTION_TYPE
	     | symtbe.type = FUNCTIONZ_TYPE
	     then do;
		aplsv_function_ptr = aplsv_value_ptr;

		nlines = cv_fb17 (aplsv_function.nlines);
		nlabels_w_nargs = cv_fb17 (aplsv_function.nlabels_w_nargs);

		do idx = 0 to nlines - 1;
		     funexp = "";			/* Init varying output */
		     if idx = 0 then code_ptr = byteptr ("000"b3 || aplsv_function.header_offset);
		     else code_ptr = byteptr ("000"b3 || aplsv_function.line (idx).offset);
		     code_len = cv_fb17 (fun_code.size);
		     if idx = 0 then call ioa_$ioa_switch_nnl (aoutsw, "^p^-", addr (fun_code.size));
		     else call ioa_$ioa_switch_nnl (aoutsw, "^p^-[^2d] ", addr (fun_code.size), idx);

		     space_state = "0"b;		/* Assume operator */
		     do cx = code_len to 1 by -1;
			code = fun_code.code (cx);

			if substr (code, 9, 1) = "1"b /* short syllable */
			then do;

			     if code = "003"b3 then;	/* unl sta */
			     else if code = "005"b3 then; /* labeled sta */
			     else if code = CECONST | code = CBCONST | code = CICONST | code = CFCONST | code = CCCONST
			     then do;
				if code = CCCONST then space_state = "0"b;
				else do;
				     if space_state then call vput (" ");
				     space_state = "1"b;
				end;
				elmtct = fixed (get_packs (2), 18);
				if code = CCCONST then do; /* chars */
				     cx = cx - elmtct;
				     if fun_code.code (cx - 1) = "46"b4 || "1"b /* lamp/comment */
				     then call vput (cv_ascii (based_elmtct_charcons));
				     else call vput (requote (cv_ascii (based_elmtct_charcons)));
				end;
				else if code = CICONST then do; /* integer, fullword */
				     do j = 1 to elmtct;
					fx35 = cvf32 (get_packs (4));
					call ioa_$rsnnl ("^d^[ ^]", vtemp, 0, fx35, j ^= 1);
					vtemp = translate (vtemp, QUpperMinus, "-");
					call vput ((vtemp));
				     end;
				end;
				else if code = CBCONST then do;	/* BOOLEAN */
				     j = cx - divide (elmtct+ 7, 8, 17, 0);
				     vtemp = "";
				     do k = 1 to elmtct;
					if mod (k, 8) = 1 then do;
					     code = fun_code.code (j);
					     j = j + 1;
					end;

					if k ^= 1
					then vtemp = vtemp || " ";

					if substr (code, 2, 1) = "0"b
					then vtemp = vtemp || "0";
					else vtemp = vtemp || "1";
					code = substr (copy (code, 1), 2);
				     end;
				     call vput ((vtemp));
				     cx = cx - divide (elmtct + 7, 8, 17, 0);
				end;
				else if code = CFCONST | code = CECONST then do;
				     do j = 1 to elmtct;
					bit72 = get_packs (8);
					call ioa_$rsnnl ("^[^e^;^f^]^[ ^]", vtemp, 0,
					     code = CECONST, cv_floatx (bit72), j ^= 1);
					vtemp = translate (vtemp, QUpperMinus, "-");
					call vput ((vtemp));
				     end;
				end;
			     end;
			     else if code = "007"b3 then; /* dummy */
			     else do;		/* zcode operator */
				call vput (cv_asciich (substr (code, 1, 8)));
				space_state = "0"b;
			     end;
			end;
			else if code = "000"b3 & fun_code.code (cx - 1) = "000"b3 then cx = cx - 1;
			else do;			/* long syllable */
			     if space_state = "1"b then call vput (" ");
			     unspec (f17un) = "11"b || substr (fun_code.code (cx - 1), 2) || substr (code, 2);
			     cx = cx - 1;
			     call vput (get_symname (addr (cxa (qr13stk + f17un))));
			     space_state = "1"b;	/* name/num */
			end;
		     end;
		     if idx = 0 then do;
			call vput (cv_asciich ("9B"b4) || " "); /* del */
		     end;
		     if length (funexp) = maxlength (funexp)
		     then call ioa_$ioa_switch (aoutsw, "Function too big to convert. Max is ^d chars",
			maxlength (funexp));
		     call ioa_$ioa_switch_nnl (aoutsw, "^a^/", funexp);
		end;
		call ioa_$ioa_switch_nnl (aoutsw, "^-^a^/", cv_asciich ("9B"b4));
	     end;
	     else if symtbe.type = GROUP_TYPE
	     then do;
		call ioa_$ioa_switch_nnl (aoutsw, "^5x)group ^a", get_symname (symtbep));
		aplsv_group_ptr = aplsv_value_ptr;
		do i = 1 to cv_fb17 (aplsv_group.count);
		     varsymptr = byteptr (aplsv_group.symbp (i));
		     call ioa_$ioa_switch_nnl (aoutsw, " ^a", get_symname (varsymptr));
		end;
		call ioa_$ioa_switch_nnl (aoutsw, "^/");
	     end;
	     else if symtbe.type = SYSTEM_VAR_TYPE
	     then;
	     else if symtbe.type = SYSTEM_FCN_TYPE
	     then;
	     else do;
		call ioa_$nnl ("Unknown symbol type: ^2.4b. ", substr (symtbe.type, 2));
badsym:		call ioa_ ("Losing symbol is ""^a""", get_symname (symtbep));
		call dumphex (addr (symtbe), size (symtbe));
	     end;
	     return;

vput:	     proc (cs);

dcl  cs char (*);

		funexp = cs || copy (funexp, 1);

	     end vput;

get_packs:     proc (n) returns (bit (*));

dcl  n fixed bin;

dcl  btemp bit (100) varying;
dcl  j fixed bin;

		btemp = ""b;
		do j = cx - n to cx - 1 by 1;
		     btemp = btemp || substr (fun_code.code (j), 2, 8);
		end;
		cx = cx - n;
		return (btemp);

	     end get_packs;

	end process_symbol;

get_symname: proc (a_pt) returns (char (*));

dcl (pt, a_pt) ptr;

	     pt = a_pt;
	     if pt -> symtbe.size >= 4
	     then pt = addrel (byteptr ("000"b3 || pt -> symtbe.name_or_offset), 1);
	     return (cv_ascii (pt -> symbol_struc.name));

	end;

requote:	proc (instring) returns (char (*));

/* How difficult is PL/I for character string manipulation */
/* B. Greenberg 5/31/77 */


dcl  instring char (*);
dcl  outstringl fixed bin (21);
dcl  QUOTE char (1) static init ("'") options (constant);
dcl  QUOTEQUOTE char (2) static init ("''") options (constant);
dcl  outstring char (2 * length (instring) + 2);
dcl (i, j) fixed bin (21);

dcl (index, length, substr) builtin;

	     outstringl = 1;
	     substr (outstring, 1, 1) = QUOTE;
	     i = 1;
nextj:	     j = index (substr (instring, i), QUOTE);
	     if j = 0 then do;
		substr (outstring, outstringl + 1, length (instring) - i + 1)
		     = substr (instring, i);
		outstringl = outstringl + length (instring) - i + 2;
		substr (outstring, outstringl, 1) = QUOTE;
		return (substr (outstring, 1, outstringl));
	     end;
	     substr (outstring, outstringl + 1, j - 1) = substr (instring, i, j - 1);
	     outstringl = outstringl + j;
	     substr (outstring, outstringl, 2) = QUOTEQUOTE;
	     outstringl = outstringl + 1;
	     i = i + j;
	     go to nextj;
	end;

cv_asciich: proc (zc) returns (char (1));

dcl  zc bit (8);
dcl  asc char (1);

	     unspec (asc) = "0"b || zc;
	     call apl_zcode_to_ascii_ ((asc), asc);
	     return (asc);

	end;

dumphex:	proc (p, n);
dcl  p ptr, n fixed bin;

	     call ioa_$nnl ("^p:", p);
	     call dump_segment_ (iox_$user_output, p, 0, 0, n, "000001000010"b /* "0102"b3 */);

	end;

     end;
