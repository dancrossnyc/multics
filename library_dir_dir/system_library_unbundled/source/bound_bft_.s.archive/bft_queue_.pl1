/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1987 *
        *                                                         *
        *********************************************************** */

bft_queue_:
     proc (p_q_ptr, p_code);

/* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,^indprocbody,initcol1,declareind8,dclind4,struclvlind3,comcol55 */

/* PROGRAM FUNCTION

This is a collection of entrypoints which service the queues associated with
bft.  Entrypoints contained are:

   add
   initialize
   remove
   terminate

Calling bft_queue_ will return a pointer to the current queue.
*/


/* NOTES
*/

/****^  HISTORY COMMENTS:
  1) change(87-10-06,Flegel), approve(87-10-23,MCR7787),
     audit(88-01-27,RWaters), install(88-02-24,MR12.2-1028):
     Created.
                                                   END HISTORY COMMENTS */

/* PARAMETERS */
dcl p_header	       bit(1) parameter;	    /* Display header required */
dcl p_long_sw	       bit(1) parameter;	    /* Long display requested */
dcl p_state	       bit(1) parameter;	    /* Transfer activity state */
dcl p_id_sw	       fixed bin parameter;	    /* 0 = path, 1 = ID */
dcl p_id		       char (*) parameter;	    /* Entry ID */
dcl p_direction	       fixed bin parameter;	    /* Transfer direction */
dcl p_priority	       fixed bin parameter;	    /* Element priority level */
dcl p_e_ptr	       ptr parameter;	    /* Queue element pointer */
dcl p_q_ptr	       ptr parameter;	    /* Pointer to bft queues */
dcl p_code	       fixed bin (35) parameter;  /* Error code */

/* MISC VARIABLES */
dcl time_string	       char (20) var;
dcl formatted_time	       char (250);
dcl time_stamp	       fixed bin (71);
dcl lock_sw	       bit(1);		    /* If the lock has been set */
dcl match_q	       fixed bin;
dcl first_slot	       fixed bin (35);
dcl match_prev_slot	       fixed bin (35);
dcl match_slot	       fixed bin (35);
dcl match_found	       (2) bit (1);
dcl prev_slot	       fixed bin (35);
dcl i		       fixed bin;
dcl mask		       bit (36) aligned;
dcl slot		       fixed bin (35);	    /* Array position of queue element */
dcl new_queue	       bit (1);		    /* Just created */

/* STRUCTURES */

/* SYSTEM CALLS */
dcl date_time_	        entry (fixed bin(71), char(*));
dcl request_id_	        entry (fixed bin(71)) returns(char(19));
dcl ioa_		       	entry() options(variable);
dcl match_request_id_      entry (fixed bin (71), char (*)) returns (bit (1) aligned);
dcl hcs_$reset_ips_mask    entry (bit (36) aligned, bit (36) aligned);
dcl hcs_$set_ips_mask      entry (bit (36) aligned, bit (36) aligned);
dcl set_lock_$unlock       entry (bit (36) aligned, fixed bin (35));
dcl set_lock_$lock	       entry (bit (36) aligned, fixed bin, fixed bin (35));
dcl hcs_$truncate_seg      entry (ptr, fixed bin (19), fixed bin (35));
dcl initiate_file_	       entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
dcl hcs_$make_seg	       entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl user_info_	       entry (char (*), char (*), char (*));
dcl user_info_$homedir     entry (char (*));

/* SYSTEM CALL SUPPORT */
dcl error_table_$noentry   fixed bin (35) ext static;
dcl error_table_$request_id_ambiguous fixed bin (35) ext static;
dcl error_table_$bad_conversion fixed bin (35) ext static;
dcl error_table_$noalloc   fixed bin (35) ext static;
dcl sys_info$max_seg_size  fixed bin (35) ext static;

/* EXTERNAL CALLS */

/* EXTERNAL CALL SUPPORT */
dcl bft_error_table_$store_in_progress 	fixed bin(35) ext static;
dcl bft_error_table_$fetch_in_progress 	fixed bin(35) ext static;
dcl bft_error_table_$invalid_direction fixed bin (35) ext static;
dcl bft_error_table_$no_entries fixed bin (35) ext static;
dcl bft_error_table_$invalid_queue fixed bin (35) ext static;
dcl bft_error_table_$invalid_priority fixed bin (35) ext static;
dcl bft_error_table_$no_queue fixed bin (35) ext static;

/* BUILTINS */
dcl reverse	       builtin;
dcl substr	       builtin;
dcl verify	       builtin;
dcl index		       builtin;
dcl unspec	       builtin;
dcl size		       builtin;
dcl addr		       builtin;
dcl null		       builtin;
dcl rtrim		       builtin;

/* CONDITIONS */
dcl cleanup	       condition;

/* CONSTANTS */

/**/

/* INITIALIZATION */

	p_q_ptr = null;
	lock_sw = "0"b;
	call initialize_entry ();
	on cleanup call set_lock_$unlock (queue.header.lockword, (0));

/* MAIN */

	p_q_ptr = null;
	new_queue = find_bft_queue ("0"b, p_code);
	if new_queue then
	     p_code = bft_error_table_$no_queue;

	p_q_ptr = queue_ptr;

	goto BFT_QUEUE_RETURN;

/**/

/* INTERNAL ENTRIES */


/* *** Entry: add - Internal entry for bft_queue_  *** */

add:
     entry (p_q_ptr, p_e_ptr, p_priority, p_direction, p_code);


/* ENTRY FUNCTION

Add the provided element to the bft queue.
*/

/* NOTES
*/

     lock_sw = "1"b;
     call initialize_entry ();
     on cleanup call set_lock_$unlock (queue.header.lockword, (0));

/* If element pointer is null, then ignore */

     if p_e_ptr = null then
	goto BFT_QUEUE_RETURN;

/* If queue pointer is null, then error */

     if queue_ptr = null then do;
	p_code = bft_error_table_$invalid_queue;
	goto BFT_QUEUE_RETURN;
     end;

/* If priority level is invalid, then error */

     if p_priority < BFT_MIN_PRIORITY | p_priority > BFT_MAX_PRIORITY then do;
	p_code = bft_error_table_$invalid_priority;
	goto BFT_QUEUE_RETURN;
     end;

/* If direction is invalid, then error */

     if p_direction ^= BFT_PC_to_MULTICS & p_direction ^= BFT_MULTICS_to_PC then do;
	p_code = bft_error_table_$invalid_direction;
	goto BFT_QUEUE_RETURN;
     end;

/* Find queue slot */

     call find_new_slot (slot, p_code);
     if p_code ^= 0 then
	goto BFT_QUEUE_RETURN;

/* Copy the element structure into the queue element */

     queue.array (slot) = p_e_ptr -> queue_element;
     queue.array (slot).flags.allocated = "1"b;
     queue.array (slot).next = 0;

/* Chain the new element into the appropriate queue */

     call hcs_$set_ips_mask (""b, mask);
     if p_direction = BFT_PC_to_MULTICS then do;
	if queue.header.fetch_queue (p_priority).last = 0 then
	     queue.header.fetch_queue (p_priority).first = slot;
	else
	     queue.array (queue.header.fetch_queue (p_priority).last).next = slot;
	queue.header.fetch_queue (p_priority).last = slot;
     end;
     else do;
	if queue.header.store_queue (p_priority).last = 0 then
	     queue.header.store_queue (p_priority).first = slot;
	else
	     queue.array (queue.header.store_queue (p_priority).last).next = slot;
	queue.header.store_queue (p_priority).last = slot;
     end;
     call hcs_$reset_ips_mask (mask, mask);

     goto BFT_QUEUE_RETURN;

/**/

/* *** Entry: cancel - Internal entry for bft_queue_  *** */

cancel:
     entry (p_q_ptr, p_id, p_id_sw, p_code);


/* ENTRY FUNCTION

Remove the specified entry from the transfer queue.  BFT will then not find the
entry and will not transfer the entry.  Entries which are currently in
transfer, ie.  the fetching or storing field of the queue header are initiated
and meet the cancellation specs, will merely have their "initiated" bit field
turned off.  It will then be up to the caller to check this bit field.

ID's are either:

	PATHNAME - absolute or relative, star NOT allowed
	ENTRY    - entryname of request.
	ID       - time stamp ID tagged to the entry.
*/

/* NOTES
*/

     p_code = 0;

     lock_sw = "1"b;
     call initialize_entry ();
     on cleanup call set_lock_$unlock (queue.header.lockword, (0));

     match_slot = 0;
     match_prev_slot = 0;

/* Verify the ID specifier */

     if p_id_sw = BFT_TIME_ID then do;
	if verify (rtrim (p_id), "+-.0123456789") ^= 0 then do;
	     p_code = error_table_$bad_conversion;
	     goto BFT_QUEUE_RETURN;
	end;
     end;

/* Check the "running" elements, these have priority */

     if queue.header.storing.flags.initiated then do;
	if match_request_type (addr (queue.header.storing), p_id, p_id_sw) then do;
	     queue.header.storing.flags.initiated = "0"b;
	     return;
	end;
     end;
     if queue.header.fetching.flags.initiated then do;
	if match_request_type (addr (queue.header.fetching), p_id, p_id_sw) then do;
	     queue.header.fetching.flags.initiated = "0"b;
	     return;
	end;
     end;

/* Hunt down the entry */

     match_found (*) = "0"b;

     do i = BFT_MIN_PRIORITY to BFT_MAX_PRIORITY;
	first_slot = queue.header.store_queue (i).first;
	do while (match_entry (first_slot, prev_slot, slot, rtrim (p_id), p_id_sw));
	     if ^match_found (1) & ^match_found (2) then do;
		match_found (1) = "1"b;
		match_slot = slot;
		match_prev_slot = prev_slot;
		match_q = i;
		first_slot = queue.array (slot).next;
	     end;
	     else do;
		p_code = error_table_$request_id_ambiguous;
		goto BFT_QUEUE_RETURN;
	     end;
	end;

	first_slot = queue.header.fetch_queue (i).first;
	do while (match_entry (first_slot, prev_slot, slot, rtrim (p_id), p_id_sw));
	     if ^match_found (1) & ^match_found (2) then do;
		match_found (2) = "1"b;
		match_slot = slot;
		match_prev_slot = prev_slot;
		match_q = i;
		first_slot = queue.array (slot).next;
	     end;
	     else do;
		p_code = error_table_$request_id_ambiguous;
		goto BFT_QUEUE_RETURN;
	     end;
	end;
     end;

/* If there was a single match, remove the entry */

     if match_found (1) then
	call remove_entry (queue.header.store_queue (match_q).first, queue.header.store_queue (match_q).last, match_prev_slot, match_slot);

     else if match_found (2) then
	call remove_entry (queue.header.fetch_queue (match_q).first, queue.header.fetch_queue (match_q).last, match_prev_slot, match_slot);

     else do;
	p_code = error_table_$noentry;
	goto BFT_QUEUE_RETURN;
     end;

     goto BFT_QUEUE_RETURN;

/**/

/* *** Entry: display_element - Internal entry for bft_queue_  *** */

display_element:
     entry (p_e_ptr, p_long_sw, p_direction, p_state, p_header);


/* ENTRY FUNCTION

Display a queue element.
*/

/* NOTES
*/

     time_stamp = p_e_ptr -> queue_element.time_id;

     if ^p_long_sw then do;
	if p_header then
	     call ioa_ ("Multics Path^30tDirection^40tPC Path^55tID");
	call ioa_ ("^a^33t^[->^;<-^]^[*^]^40t^a^55t^a^[ (running)^]",
	     strip_path (p_e_ptr -> queue_element.multics_path, ">"),
	     (p_direction = BFT_MULTICS_to_PC),
	     p_e_ptr -> queue_element.flags.binary_sw,
	     strip_path (p_e_ptr -> queue_element.pc_path, "\"),
	     substr (request_id_ (time_stamp), 7, 8),
	     p_state);
     end;
     else do;
	time_string = request_id_ (time_stamp);
	call date_time_ (time_stamp, formatted_time);
	call ioa_ (
	     "Source:^21t^[^a^s^;^s^a^]^/Destination:^21t^[^a^s^;^s^a^]"
	     || "^/Request ID:^21t^a^/Time queued:^21t^a"
	     || "^/State:^21t^[running^;unprocessed^]^/Notify:^21t^[yes^;no^]"
	     || "^/File type:^21t^[binary^;ascii^]",
	     (p_direction = BFT_PC_to_MULTICS),
	     p_e_ptr -> queue_element.pc_path,
	     p_e_ptr -> queue_element.multics_path,
	     (p_direction = BFT_PC_to_MULTICS),
	     p_e_ptr -> queue_element.multics_path,
	     p_e_ptr -> queue_element.pc_path,
	     time_string, rtrim (formatted_time),
	     p_state, p_e_ptr -> queue_element.flags.notify_sw,
	     p_e_ptr -> queue_element.flags.binary_sw);
     end;

     return;

/**/

/* *** Entry: initiate - Internal entry for bft_queue_  *** */

initiate:
     entry (p_q_ptr, p_code);


/* ENTRY FUNCTION

This entry will initiate the bft queue segment.  If the segment does not
already exist it will be created and formatted.
*/

/* NOTES
*/

     p_q_ptr = null;
     lock_sw = "0"b;
     call initialize_entry ();
     on cleanup call set_lock_$unlock (queue.header.lockword, (0));

/* Find the queue segment */

     new_queue = find_bft_queue ("1"b, p_code);
     if p_code ^= 0 then
	goto BFT_QUEUE_RETURN;

/* Initialize the header field */

     if new_queue then
	call initialize_queue_header ();

     p_q_ptr = queue_ptr;

     goto BFT_QUEUE_RETURN;

/**/

/* *** Entry: remove - Internal entry for bft_queue_  *** */

remove:
     entry (p_q_ptr, p_direction, p_code);


/* ENTRY FUNCTION

Move the next element from the specified queue (PC -> Multics or
Multics -> PC) to the appropriate "in progress" element in the header.  The
highest priority (1,2,3,4) is removed from the queue.
*/

/* NOTES
*/

     lock_sw = "1"b;
     call initialize_entry ();
     on cleanup call set_lock_$unlock (queue.header.lockword, (0));

/* If the queue ptr is null, then error */

     if queue_ptr = null then do;
	p_code = bft_error_table_$invalid_queue;
	goto BFT_QUEUE_RETURN;
     end;

/* If the transfer in the specified direction is not complete, then error
 * Might as well verify the direction at the same time
 */
     if p_direction = BFT_PC_to_MULTICS then do;
	if queue.header.fetching.flags.initiated then do;
	     p_code = bft_error_table_$fetch_in_progress;
	     goto BFT_QUEUE_RETURN;
	end;
     end;
     else if p_direction = BFT_MULTICS_to_PC then do;
	if queue.header.storing.flags.initiated then do;
	     p_code = bft_error_table_$store_in_progress;
	     goto BFT_QUEUE_RETURN;
	end;
     end;
     else do;
	p_code = bft_error_table_$invalid_direction;
	goto BFT_QUEUE_RETURN;
     end;
		
/* Find the next element slot */

     call find_old_slot (p_direction, slot, p_code);
     if p_code ^= 0 | slot = 0 then do;
	if p_code = 0 then
	     p_code = bft_error_table_$no_entries;
	goto BFT_QUEUE_RETURN;
     end;

/* Move the element out the callers structure */

     queue.array (slot).flags.initiated = "1"b;
     if p_direction = BFT_PC_to_MULTICS then do;
	queue.header.fetch_file_pos = 0;
	queue.header.fetching = queue.array (slot);
     end;
     else do;
	queue.header.store_file_pos = 0;
	queue.header.storing = queue.array (slot);
     end;

     call free_old_slot (slot, p_code);
     if p_code ^= 0 then
	goto BFT_QUEUE_RETURN;

     goto BFT_QUEUE_RETURN;

/**/

/* GLOBAL LABEL ENTRY */

/* *** Label: BFT_QUEUE_RETURN - Internal label for bft_queue_ *** */

/* LABEL FUNCTION

This label is to be used to return from the bft_queue_ entry points to the
caller of that entry.  It serves to unlock the lockword that exists within
the queue segment.
*/

BFT_QUEUE_RETURN:

     if lock_sw then
	call set_lock_$unlock (queue.header.lockword, (0));

     return;

/**/

/* INTERNAL PROCEDURES */


/* *** Procedure: allocate_slot - Internal proc for bft_queue_  *** */

allocate_slot:
     proc (p_code);


/* PROCEDURE FUNCTION

Allocate another element slot at the end of the segment.
*/

/* NOTES
*/

/* PARAMETERS */
dcl p_code	       fixed bin (35) parameter;  /* Error code */

/* MISC VARIABLES */
dcl mask		       bit(36) aligned;
dcl new_slot	       fixed bin (35);

/* STRUCTURES */

/* INITIALIZATION */
     p_code = 0;

/* MAIN */

     if size (queue) + size (queue_element) > sys_info$max_seg_size then do;
	p_code = error_table_$noalloc;
	return;
     end;

/* Increase the queue size */

     new_slot = queue.header.segment_size + 1;
     call initialize_element (addr (queue.array (new_slot)));

     call hcs_$set_ips_mask (""b, mask);
     queue.array (new_slot).next = queue.header.free_list;
     queue.header.free_list = new_slot;
     queue.header.segment_size = new_slot;
     call hcs_$reset_ips_mask (mask, mask);

     end allocate_slot;

/**/

/* *** Procedure: find_bft_queue - Internal proc for bft_queue_  *** */

find_bft_queue:
     proc (p_create_sw, p_code) returns (bit (1));


/* PROCEDURE FUNCTION

Get a pointer to the bft queue segment.
*/

/* NOTES
*/

/* PARAMETERS */
dcl p_create_sw	       bit (1) parameter;	    /* True if to be created */
dcl p_code	       fixed bin (35) parameter;  /* Error code */

/* MISC VARIABLES */
dcl code		       fixed bin (35);
dcl name		       char (168);		    /* Queue segment name */
dcl home_path	       char (64);		    /* Home directory */
dcl account_id	       char (32);
dcl project_id	       char (9);
dcl person_id	       char (22);

/* STRUCTURES */

/* INITIALIZATION */

     p_code = 0;

/* MAIN */

     call user_info_$homedir (home_path);
     call user_info_ (person_id, project_id, account_id);
     name = rtrim (person_id) || ".bft";

/* If the segment is to be created, create it if it doesn't exist. */

     if p_create_sw then do;
	call hcs_$make_seg (home_path, name, "", RW_ACCESS_BIN, queue_ptr,
	     code);
	return ((code = 0));
     end;

/* Else do not attempt to create the queue, just look for it */

     else do;
	call initiate_file_ (home_path, name, unspec (RW_ACCESS_BIN),
	     queue_ptr, (0), code);
	return ((code ^= 0));
     end;

     end find_bft_queue;

/**/

/* *** Procedure: find_old_slot - Internal proc for bft_queue_  *** */

find_old_slot:
     proc (p_direction, p_slot, p_code);


/* PROCEDURE FUNCTION

Find the next element of highest priority in the specified direction.
*/

/* NOTES

The entry is removed from the specified queue but is not released to the free
list.
*/

/* PARAMETERS */
dcl p_direction	       fixed bin parameter;	    /* Direction of element */
dcl p_slot	       fixed bin (35) parameter;  /* Found slot */
dcl p_code	       fixed bin (35) parameter;  /* Error code */

/* MISC VARIABLES */
dcl mask		       bit(36) aligned;
dcl i		       fixed bin;

/* STRUCTURES */

/* INITIALIZATION */
     p_code = 0;
     p_slot = 0;

/* MAIN */

     do i = 1 to 4;
	if p_direction = BFT_PC_to_MULTICS then do;
	     if queue.header.fetch_queue (i).first ^= 0 then do;
		call hcs_$set_ips_mask (""b, mask);
		p_slot = queue.header.fetch_queue (i).first;
		queue.header.fetch_queue (i).first = queue.array (p_slot).next;
		if queue.header.fetch_queue (i).first = 0 then
		     queue.header.fetch_queue (i).last = 0;
		call hcs_$reset_ips_mask (mask, mask);

		return;
	     end;
	end;
	else do;
	     if queue.header.store_queue (i).first ^= 0 then do;
		call hcs_$set_ips_mask (""b, mask);
		p_slot = queue.header.store_queue (i).first;
		queue.header.store_queue (i).first = queue.array (p_slot).next;
		if queue.header.store_queue (i).first = 0 then
		     queue.header.store_queue (i).last = 0;
		call hcs_$reset_ips_mask (mask, mask);

		return;
	     end;
	end;
     end;

/* Element was not found, so it's an error */

     p_code = bft_error_table_$no_entries;

     end find_old_slot;

/**/

/* *** Procedure: find_new_slot - Internal proc for bft_queue_  *** */

find_new_slot:
     proc (p_slot, p_code);


/* PROCEDURE FUNCTION

Find an empty position in the queue element array 
*/

/* NOTES
*/

/* PARAMETERS */
dcl p_slot	       fixed bin (35) parameter;  /* Found slot in array */
dcl p_code	       fixed bin (35) parameter;  /* Error code */

/* MISC VARIABLES */
dcl mask		       bit(36) aligned;

/* STRUCTURES */

/* INITIALIZATION */
     p_code = 0;
     p_slot = 0;

/* MAIN */

     if queue.header.free_list = 0 then do;
	call allocate_slot (p_code);
	if p_code ^= 0 then
	     return;
     end;

     call hcs_$set_ips_mask (""b, mask);
     p_slot = queue.header.free_list;
     queue.header.free_list = queue.array (queue.header.free_list).next;
     queue.array (p_slot).next = 0;
     call hcs_$reset_ips_mask (mask, mask);

     end find_new_slot;

/**/

/* *** Procedure: free_old_slot - Internal proc for bft_queue_  *** */

free_old_slot:
     proc (p_slot, p_code);


/* PROCEDURE FUNCTION

Place the specified slot into the free list.  Check if a page of the queue
segment can be released.
*/

/* NOTES
*/

/* PARAMETERS */
dcl p_slot	       fixed bin (35) parameter;  /* Slot to be freed */
dcl p_code	       fixed bin (35) parameter;  /* Error code */

/* MISC VARIABLES */
dcl mask		       bit(36) aligned;

/* STRUCTURES */

/* INITIALIZATION */
     p_code = 0;

/* MAIN */

/* Add the element to the free list */

     call initialize_element (addr (queue.array (p_slot)));
     call hcs_$set_ips_mask (""b, mask);
     queue.array (p_slot).next = queue.header.free_list;
     queue.header.free_list = p_slot;
     call hcs_$reset_ips_mask (mask, mask);

/* If the element is the last element in the segment, shrink the segment */

     if p_slot = queue.header.segment_size then do;
	call free_seg (p_code);
	if p_code ^= 0 then
	     return;
     end;

     end free_old_slot;

/**/

/* *** Procedure: free_seg - Internal proc for bft_queue_  *** */

free_seg:
     proc (p_code);


/* PROCEDURE FUNCTION

Reduce the segment size of the queue, truncate the segment to the nearest page.
*/

/* NOTES
*/

/* PARAMETERS */
dcl p_code	       fixed bin (35) parameter;  /* Error code */

/* MISC VARIABLES */
dcl mask		       bit(36) aligned;
dcl word_count	       fixed bin (19);	    /* New segment length */
dcl previous_slot	       fixed bin (35);	    /* Slot before current search */
dcl free_slot	       fixed bin (35);	    /* Slot to free */
dcl slot		       fixed bin (35);	    /* Index slot */
dcl last_alloc	       fixed bin (35);	    /* Last allocated element */
dcl total_free	       fixed bin (35);	    /* Elements to free */

/* STRUCTURES */

/* INITIALIZATION */
     p_code = 0;

/* MAIN */

/* Find last NON-allocated element */

     total_free = 0;
     last_alloc = queue.header.segment_size;
     do while (^queue.array (last_alloc).flags.allocated & last_alloc > 0);
	total_free = total_free + 1;
	last_alloc = last_alloc - 1;
     end;

/* Remove the slots to be released from the free list */

     previous_slot = 0;
     slot = queue.header.free_list;
     do while (slot ^= 0);
	if slot > last_alloc then do;
	     call hcs_$set_ips_mask (""b, mask);
	     free_slot = slot;
	     if previous_slot = 0 then do;	    /* First in list */
		slot = queue.array (free_slot).next;
		queue.header.free_list = slot;
	     end;
	     else do;			    /* Middle of list */
		queue.array (previous_slot).next = queue.array (free_slot).next;
		previous_slot = slot;
		slot = queue.array (slot).next;
	     end;
	     call hcs_$reset_ips_mask (mask, mask);

	     call initialize_element (addr (queue.array (free_slot)));
	end;
	else do;
	     previous_slot = slot;
	     slot = queue.array (slot).next;
	end;

	queue.header.segment_size = last_alloc;
	word_count = size (queue_header) + (last_alloc * size (queue_element));
	call hcs_$truncate_seg (queue_ptr, word_count, p_code);
	if p_code ^= 0 then
	     return;
     end;

     end free_seg;

/**/

/* *** Procedure: initialize_element - Internal proc for bft_queue_  *** */

initialize_element:
     proc (p_e_ptr);


/* PROCEDURE FUNCTION

Initialize the element structure.
*/

/* NOTES
*/

/* PARAMETERS */
dcl p_e_ptr	       ptr parameter;	    /* Element to be initialized */

/* MISC VARIABLES */

/* STRUCTURES */

/* INITIALIZATION */

/* MAIN */

     p_e_ptr -> queue_element.next = 0;
     p_e_ptr -> queue_element.multics_path = "";
     p_e_ptr -> queue_element.pc_path = "";
     p_e_ptr -> queue_element.time_id = 0;
     p_e_ptr -> queue_element.flags.allocated = "0"b;
     p_e_ptr -> queue_element.flags.binary_sw = "0"b;
     p_e_ptr -> queue_element.flags.pad = ""b;
     p_e_ptr -> queue_element.flags.mbz = ""b;

     end initialize_element;

/**/

/* *** Procedure: initialize_entry - Internal proc for bft_queue_  *** */

initialize_entry:
     proc ();


/* PROCEDURE FUNCTION

Initialize entrypoint variables.
*/

/* MAIN */

     p_code = 0;
     queue_ptr = p_q_ptr;

/* Lock out other accesses to the queue segment */

     if lock_sw then
	call set_lock_$lock (queue.header.lockword, BFT_QUEUE_WAIT_TIME, p_code);

     end initialize_entry;

/**/

/* *** Procedure: initialize_queue_header - Internal proc for bft_queue_  *** */

initialize_queue_header:
     proc ();


/* PROCEDURE FUNCTION

Initialize the fields of the queue header to casue the queue to have 0
elements.
*/

/* NOTES
*/

/* PARAMETERS */

/* MISC VARIABLES */

/* STRUCTURES */

/* INITIALIZATION */

/* MAIN */

     queue.header.version = "VERSION1";
     queue.header.lockword = ""b;
     queue.header.store_queue (*).last = 0;
     queue.header.store_queue (*).first = 0;
     queue.header.store_queue (*).flags.pad = "0"b;
     queue.header.fetch_queue (*).last = 0;
     queue.header.fetch_queue (*).first = 0;
     queue.header.fetch_queue (*).flags.pad = "0"b;
     queue.header.storing.flags.initiated = "0"b;
     queue.header.store_file_pos = 0;
     queue.header.fetching.flags.initiated = "0"b;
     queue.header.fetch_file_pos = 0;
     queue.header.free_list = 0;
     queue.header.segment_size = 0;

     end initialize_queue_header;

/**/

/* *** Procedure: match_entry - Internal proc for bft_queue_  *** */

match_entry:
     proc (p_start_slot, p_prev_slot, p_slot, p_id, p_id_sw) returns (bit (1));


/* PROCEDURE FUNCTION

Find a match in the chain specified by start_slot.
*/

/* NOTES
*/

/* PARAMETERS */
dcl p_id_sw	       fixed bin parameter;	    /* A time ID */
dcl p_id		       char (*) parameter;	    /* Match ID */
dcl p_start_slot	       fixed bin (35) parameter;  /* Start of queue list */
dcl p_prev_slot	       fixed bin (35) parameter;  /* Previous slot to matched entry */
dcl p_slot	       fixed bin (35) parameter;  /* Slot matched */

/* MISC VARIABLES */

/* STRUCTURES */

/* INITIALIZATION */

/* MAIN */
     p_prev_slot = 0;
     p_slot = p_start_slot;
     do while (p_slot ^= 0);
	if match_request_type (addr (queue.array (p_slot)), p_id, p_id_sw) then
	     return ("1"b);

	p_prev_slot = p_slot;
	p_slot = queue.array (p_prev_slot).next;
     end;

     return ("0"b);

     end match_entry;

/**/

/* *** Procedure: match_request_type - Internal proc for bft_queue_  *** */

match_request_type:
     proc (p_e_ptr, p_id, p_id_sw) returns (bit(1));


/* PROCEDURE FUNCTION

Verify the element passed against the ID and ID type provided.
*/

/* NOTES
*/

/* PARAMETERS */
dcl p_e_ptr	       ptr parameter;	    /* Element to match */
dcl p_id		       char (*) parameter;	    /* Match ID */
dcl p_id_sw	       fixed bin parameter;	    /* Type of id */

/* MISC VARIABLES */

/* STRUCTURES */

/* INITIALIZATION */

/* MAIN */

     if p_id_sw = BFT_TIME_ID then do;
	if match_request_id_ (p_e_ptr -> queue_element.time_id, p_id) then
	     return ("1"b);
     end;

     else if p_id_sw = BFT_PATH_ID then do;
	if rtrim (p_id) = rtrim (p_e_ptr -> queue_element.multics_path)
	     | rtrim (p_id) = rtrim (p_e_ptr -> queue_element.pc_path)
	then
	     return ("1"b);
     end;

     else do;
	if rtrim (p_id) = strip_path (rtrim (p_e_ptr -> queue_element.multics_path), ">") then
	     return ("1"b);

	if rtrim (p_id) = strip_path (rtrim (p_e_ptr -> queue_element.pc_path), "\") then
	     return ("1"b);
     end;

     return ("0"b);

end match_request_type;

/**/

/* *** Procedure: remove_entry - Internal proc for bft_queue_  *** */

remove_entry:
     proc (p_start_slot, p_last_slot, p_prev_slot, p_slot);


/* PROCEDURE FUNCTION

Remove slot from the queue.
*/

/* NOTES
*/

/* PARAMETERS */
dcl p_last_slot	       fixed bin (35) parameter;  /* Last entry in list */
dcl p_start_slot	       fixed bin (35) parameter;  /* Start of list */
dcl p_prev_slot	       fixed bin (35) parameter;  /* Predecessor to slot */
dcl p_slot	       fixed bin (35) parameter;  /* Slot to be removed */

/* MISC VARIABLES */

/* STRUCTURES */

/* INITIALIZATION */

/* MAIN */

     if queue.array (p_slot).next = 0 then
	p_last_slot = p_prev_slot;

     if p_prev_slot = 0 then
	p_start_slot = queue.array (p_slot).next;
     else
	queue.array (p_prev_slot).next = queue.array (p_slot).next;

     call free_old_slot (p_slot, (0));

     end remove_entry;

/**/

/* *** Procedure: strip_path - Internal proc for bft_queue_  *** */

strip_path:
     proc (p_path, p_separator) returns (char (*));


/* PROCEDURE FUNCTION

Strip of the entryname from the given path, given the directory spearator.
*/

/* NOTES
*/

/* PARAMETERS */
dcl p_path	       char (*) parameter;	    /* Path to be stripped */
dcl p_separator	       char (1) parameter;	    /* Directory separator */

/* MISC VARIABLES */
dcl indx		       fixed bin (21);	    /* Revers entry index */

/* STRUCTURES */

/* INITIALIZATION */

/* MAIN */

     indx = index (reverse (rtrim (p_path)), p_separator) - 1;
     if indx < 0 then
	return (p_path);

     return (reverse (substr (reverse (rtrim (p_path)), 1, indx)));

end strip_path;

/**/

/* INCLUDE FILES */
%include bft_values;
%include access_mode_values;
%include bft_queue;

     end;
