/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1987 *
        *                                                         *
        *********************************************************** */

/* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,^indprocbody,initcol1,declareind8,dclind4,struclvlind3,comcol55 */

bft:
background_file_transfer:
     proc options (main);

/* PROGRAM FUNCTION

This is the routine that accepts command line arguments and then calls the
appropriate entrypoint in bft_.  This procedure checks the number of arguments
to the command and then if that is satisfactory then calls the appropriate
subroutine to check the arguments themselves.  This is done by checking the
first argument.  If it is valid, then a subroutine to handle that particular
command is called.
*/

/* NOTES
*/

/****^  HISTORY COMMENTS:
  1) change(86-06-06,Eichele), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Created.
  2) change(87-10-23,Flegel), approve(87-10-23,MCR7787),
     audit(88-01-27,RWaters), install(88-02-24,MR12.2-1028):
     Added multiple entry queues, control args, and queue display.
  3) change(87-12-12,Flegel), approve(87-12-12,MCR7819),
     audit(88-01-27,RWaters), install(88-02-24,MR12.2-1028):
     Added control arguments for a wider scope of request capabilities.
                                                   END HISTORY COMMENTS */

/* PARAMETERS */

/* MISC VARIABLES */
dcl key_procedure	       entry variable;	    /* Actual request handler */
dcl reason	       char (256) var;	    /* Error reason */
dcl code		       fixed bin (35);

/* GLOBAL */
dcl display_sw	       bit (1);		    /* List request */
dcl unload_sw	       bit (1);		    /* unload request */
dcl store_sw	       bit (1);		    /* store request */
dcl recover_sw	       bit (1);		    /* recover request */
dcl load_sw	       bit (1);		    /* load request */
dcl fetch_sw	       bit (1);		    /* fetch request */
dcl cancel_sw	       bit (1);		    /* cancel request */
dcl priority	       fixed bin;		    /* Queue number */
dcl long_sw	       bit (1);		    /* If queue display is long */
dcl main_arg_ptr	       ptr;		    /* Command arguments */
dcl arg_pos	       fixed bin;		    /* Argument being looked at */
dcl arg_count	       fixed bin;		    /* Number of arguments */
dcl arg_len	       fixed bin (21);	    /* Argument length */
dcl arg_ptr	       ptr;		    /* Argument */
dcl arg		       char (arg_len) based (arg_ptr);
dcl 01 modes	       like bft_queue_flags auto aligned; /* Transfer modes */

/* STRUCTURES */

/* SYSTEM CALLS */
dcl cu_$arg_list_ptr        entry (ptr);
dcl ioa_		       entry () options (variable);
dcl absolute_pathname_     entry (char (*), char (*), fixed bin (35));
dcl cu_$arg_ptr_rel	       entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
dcl cu_$arg_count	       entry (fixed bin, fixed bin (35));
dcl com_err_	       entry () options (variable);

/* SYSTEM CALL SUPPORT */
dcl error_table_$nodescr    fixed bin(35) ext static;
dcl error_table_$inconsistent fixed bin (35) ext static;
dcl error_table_$noarg     fixed bin (35) ext static;
dcl error_table_$bad_arg   fixed bin (35) ext static;
dcl error_table_$wrong_no_of_args fixed bin (35) ext static;

/* EXTERNAL CALLS */
dcl bft_$cancel	       entry (fixed bin, char (*), fixed bin (35));
dcl bft_queue_$display_element entry (ptr, bit (1), fixed bin, bit (1), bit (1));
dcl bft_queue_$initiate    entry (ptr, fixed bin (35));
dcl bft_$fetch	       entry (char (*) var, char (*) var, bit (36) aligned, fixed bin, fixed bin (35));
dcl bft_$load	       entry (fixed bin (35));
dcl bft_$recover_fetch     entry (fixed bin (35));
dcl bft_$recover_store     entry (fixed bin (35));
dcl bft_$store	       entry (char (*) var, char (*) var, bit (36) aligned, fixed bin, fixed bin (35));
dcl bft_$unload	       entry (fixed bin (35));

/* EXTERNAL CALL SUPPORT */
dcl bft_error_table_$invalid_file_type 	fixed bin(35) ext static;
dcl bft_error_table_$invalid_keyword fixed bin (35) ext static;
dcl bft_error_table_$invalid_priority fixed bin (35) ext static;
dcl bft_error_table_$bft_not_loaded fixed bin (35) ext static;
dcl ws_error_$invalid_capability_name fixed bin (35) ext static;

/* BUILTINS */
dcl null		       builtin;
dcl unspec	       builtin;
dcl substr	       builtin;
dcl rank		       builtin;
dcl addr		       builtin;
dcl rtrim		       builtin;

/* CONDITIONS */

/* CONSTANTS */
dcl NAME		       char (3) int static options (constant) init ("bft");
dcl USAGE_CANCEL	       char (128) var int static options (constant) init ("^3tUsage:  bft cancel request_identifier {request_identifier ...}");
dcl USAGE_UNLOAD	       char (128) var int static options (constant) init ("^3tUsage:  bft unload");
dcl USAGE_RECOVER	       char (128) var int static options (constant) init ("^3tUsage:  bft recover");
dcl USAGE_LOAD	       char (128) var int static options (constant) init ("^3tUsage:  bft load");
dcl USAGE_BFT	       char (128) var int static options (constant) init ("^3tUsage:  bft KEY {name1 {name2...name1N name2N}} {-control_args}");
dcl USAGE_KEYS	       char (128) var int static options (constant) init ("^6t(s)tore, (f)etch, (c)ancel, (ls) list, (l)oad, (u)nload, (r)ecover");

/**/

/* INITIALIZATION */

/* Set default transfer modes */

     priority = 3;				    /* Queue 3 */
     unspec (modes) = ""b;			    /* "0" are default values */
     long_sw = "0"b;			    /* Long queue display */

/* Set request type switches */

     cancel_sw = "0"b;
     fetch_sw = "0"b;
     load_sw = "0"b;
     recover_sw = "0"b;
     store_sw = "0"b;
     unload_sw = "0"b;
     display_sw = "0"b;

/* MAIN */

/* Get MAIN's arg_ptr */

     call cu_$arg_list_ptr (main_arg_ptr);
     if main_arg_ptr = null then do;
	call com_err_ (error_table_$nodescr, NAME,
	     "Getting argument pointer.");
	return;
     end;

/* How many args are there ? */

     call cu_$arg_count (arg_count, code);
     if code ^= 0 then do;
	call com_err_ (code, NAME, "Getting argument count.");
	return;
     end;

/* None, then this is a request for usage */

     if arg_count <= 0 then do;
	call com_err_ (error_table_$wrong_no_of_args, NAME);
	call ioa_ (USAGE_BFT);
	return;
     end;

/* Extract the keyword */

     arg_pos = 0;
     call get_arg ("0"b, code);
     if code ^= 0 then do;
	call com_err_ (code, NAME);
	call ioa_ (USAGE_BFT);
	return;
     end;

/* This argument MUST be a keyword, otherwise - what are we to do? */

     if (arg = "cancel" | arg = "c") then do;
	key_procedure = bft_cancel;
	cancel_sw = "1"b;
     end;
     else if (arg = "fetch" | arg = "f") then do;
	key_procedure = bft_fetch;
	fetch_sw = "1"b;
     end;
     else if (arg = "load" | arg = "l" | arg = "ld") then do;
	key_procedure = bft_load;
	load_sw = "1"b;
     end;
     else if (arg = "list" | arg = "ls") then do;
	key_procedure = bft_display;
	display_sw = "1"b;
     end;
     else if (arg = "recover" | arg = "r") then do;
	key_procedure = bft_recover;
	recover_sw = "1"b;
     end;
     else if (arg = "store" | arg = "s") then do;
	key_procedure = bft_store;
	store_sw = "1"b;
     end;
     else if (arg = "unload" | arg = "u" | arg = "uld") then do;
	key_procedure = bft_unload;
	unload_sw = "1"b;
     end;
     else do;
	call com_err_ (bft_error_table_$invalid_keyword, NAME, arg);
	call ioa_ (USAGE_KEYS);
	return;
     end;

/* Parse through control arguments */

     call parse_control_args (code, reason);
     if code ^= 0 then do;
	call com_err_ (code, NAME, reason);
	return;
     end;

/* We made it to here, so call the handler, skip the first "real" argument
   as it is the keyword */

     arg_pos = 0;
     call get_arg ("0"b, (0));
     call key_procedure ();

     return;

/**/

/* INTERNAL ENTRIES */

/**/

/* INTERNAL PROCEDURES */


/* *** Procedure: cancel - Internal proc for bft  *** */

bft_cancel:
     proc ();


/* PROCEDURE FUNCTION

Cancel an element from the queue, ONLY if it is not currenlty in transfer.
*/

/* NOTES
*/

/* PARAMETERS */

/* MISC VARIABLES */
dcl request_type	       char (32) var;	    /* Cancellation request type */
dcl code		       fixed bin (35);	    /* Error code */
dcl passed	       fixed bin;		    /* Number of requests cancelled */

/* STRUCTURES */

/* INITIALIZATION */
     passed = 0;

/* MAIN */

/* Parse through each arg in the command line */

     do while (arg_pos < arg_count);
	call get_arg ("1"b, code);
	if code ^= 0 then do;
	     if passed = 0 then
		call com_err_ (code, NAME, arg);
	     else
		call com_err_ (code, NAME);
	     goto CANCEL_RETURN;
	end;

/* Determine which entry type we have, and cancel accordingly */

	if substr (arg, 1, 1) ^= "-" then
	     call bft_$cancel (BFT_PATH_ID, arg, code);
	else do;
	     request_type = arg;
	     call get_arg ("0"b, code);
	     if code ^= 0 then do;
		call com_err_ (code, NAME);
		return;
	     end;

	     if request_type = "-id" then
		call bft_$cancel (BFT_TIME_ID, arg, code);
	     else if request_type = "-entry" | request_type = "-et" then
		call bft_$cancel (BFT_ENTRY_ID, arg, code);
	end;

/* Is there an error ? */

	if code ^= 0 then do;
	     call com_err_ (code, NAME, "Cancelling ^a.", arg);
	     goto CANCEL_RETURN;
	end;

/* Increment the cancellation count */

	passed = passed + 1;
     end;

CANCEL_RETURN:

     if passed > 0 then
	call ioa_ ("^a: ^d request^[s^] submitted for cancellation.",
	     NAME, passed, (passed > 1));

     end bft_cancel;

/**/

/* *** Procedure: bft_display - Internal proc for bft  *** */

bft_display:
     proc ();


/* PROCEDURE FUNCTION

Display the current entries in the queues.
*/

/* NOTES
*/

/* PARAMETERS */

/* MISC VARIABLES */
dcl running_count	       fixed bin;
dcl code		       fixed bin (35);
dcl running	       bit (1);		    /* Running element displayed */
dcl i		       fixed bin;
dcl empty_sw	       bit (1);		    /* Queues are empty? */
dcl slot		       fixed bin (35);	    /* Queue traversal index */
dcl count		       fixed bin (21);	    /* Elements in queue */

/* STRUCTURES */

/* INITIALIZATION */
     empty_sw = "1"b;

/* MAIN */

     call bft_queue_$initiate (queue_ptr, code);
     if code ^= 0 then do;
	call com_err_ (code, NAME, "Initiating queue.");
	return;
     end;

/* Display the store queue */

     running = "0"b;
     running_count = 1;
     do i = BFT_MIN_PRIORITY to BFT_MAX_PRIORITY;

/* Count how many requests are pending */

	count = 0;
	slot = queue.header.store_queue (i).first;
	do while (slot ^= 0);
	     count = count + 1;
	     slot = queue.array (slot).next;
	end;

/* Tell user how many requests in store queue */

	if count > 0 then do;
	     empty_sw = "1"b;		    /* To tell display_element to print a header */
	     call ioa_ ("^/BFT Store Queue ^d:^20t^d request^[s^].^/",
		i, running_count + count, (running_count + count > 1));
	     running_count = 0;

/* Display the running element */

	     if queue.header.storing.flags.initiated & ^running then do;
		call bft_queue_$display_element (addr (queue.header.storing),
		     long_sw, BFT_MULTICS_to_PC, "1"b, "1"b);
		if long_sw then
		     call ioa_ ();
		empty_sw = "0"b;
		running = "1"b;
	     end;

/* Display the remainder of the queue */

	     slot = queue.header.store_queue (i).first;
	     do while (slot ^= 0);
		call bft_queue_$display_element (addr (queue.array (slot)),
		     long_sw, BFT_MULTICS_to_PC, "0"b, empty_sw);
		empty_sw = "0"b;
		slot = queue.array (slot).next;
		if long_sw & slot ^= 0 then
		     call ioa_ ();
	     end;
	end;
     end;

/* Display the running element if there are no pending elements */

     if queue.header.storing.flags.initiated & ^running then do;
	call ioa_ ("^/BFT Store Queue:^/");
	call bft_queue_$display_element (addr (queue.header.storing),
	     long_sw, BFT_MULTICS_to_PC, "1"b, "1"b);
	empty_sw = "0"b;
	running = "1"b;
     end;

/* Display the fetch queue */

     running = "0"b;
     running_count = 1;
     do i = BFT_MIN_PRIORITY to BFT_MAX_PRIORITY;
	count = 0;
	slot = queue.header.fetch_queue (i).first;
	do while (slot ^= 0);
	     count = count + 1;
	     slot = queue.array (slot).next;
	end;

	if count > 0 then do;
	     empty_sw = "1"b;		    /* To tell display_element to print a header */
	     call ioa_ ("^/BFT Fetch Queue ^d:^20t^d request^[s^].^/",
		i, running_count + count, (running_count + count > 1));
	     running_count = 0;

	     if queue.header.fetching.flags.initiated & ^running then do;
		call bft_queue_$display_element (addr (queue.header.fetching),
		     long_sw, BFT_PC_to_MULTICS, "1"b, "1"b);
		if long_sw then
		     call ioa_ ();
		empty_sw = "0"b;
		running = "1"b;
	     end;

	     slot = queue.header.fetch_queue (i).first;
	     do while (slot ^= 0);
		call bft_queue_$display_element (addr (queue.array (slot)),
		     long_sw, BFT_PC_to_MULTICS, "0"b, empty_sw);
		empty_sw = "0"b;
		slot = queue.array (slot).next;
		if long_sw & slot ^= 0 then
		     call ioa_ ();
	     end;
	end;
     end;
     if queue.header.fetching.flags.initiated & ^running then do;
	call ioa_ ("^/BFT Fetch Queue:^/");
	call bft_queue_$display_element (addr (queue.header.fetching),
	     long_sw, BFT_PC_to_MULTICS, "1"b, "1"b);
	empty_sw = "0"b;
	running = "1"b;
     end;

/* If there were no transfers, say so */

     if empty_sw then
	call ioa_ ("There are no requests in any BFT queue.");
     else
	call ioa_ ();

     end bft_display;

/**/

/* *** Procedure: bft_fetch - Internal proc for bft *** */

bft_fetch:
     proc ();

/* PROCEDURE FUNCTION

This routine is called if the first argument specified a fetch.  If two
filenames are given, both are accepted.  If only one is given, then the
destination will default to being the same as the supplied source name.
*/

/* NOTES
*/

/* PARAMETERS */

/* MISC VARIABLES */
dcl code		       fixed bin (35);	    /* Error code */
dcl passed	       fixed bin;		    /* Requests submitted */
dcl temp_file	       char (168);
dcl mu_path	       char (168);
dcl pc_path	       char (66);

/* STRUCTURES */

/* INITIALIZATION */
     passed = 0;

/* MAIN */

/* Repeat until there are no more requests in the command line */

     do while (arg_pos < arg_count);

/* Get the pc_path */

	call get_arg ("0"b, code);
	if code ^= 0 then do;
	     if passed = 0 then
		call com_err_ (code, NAME, arg);

	     goto FETCH_RETURN;
	end;

	pc_path = arg;
	mu_path = "===";

/* Look for the Multics path, if it is not specified, default to pc_path */

	call get_arg ("0"b, code);
	if code ^= 0 & code ^= error_table_$noarg then do;
	     call com_err_ (code, NAME, arg);
	     goto FETCH_RETURN;
	end;
	else if code = 0 then
	     mu_path = arg;

/* Obtain the full pathname of the specified destination */

	temp_file = mu_path;
	call absolute_pathname_ (temp_file, mu_path, code);
	if code ^= 0 then do;
	     call com_err_ (code, NAME, "Expanding Multics pathname.");
	     goto FETCH_RETURN;
	end;

/* Call the bft_$fetch entrypoint with the valid parms */

	call bft_$fetch (rtrim (pc_path), rtrim (mu_path), unspec (modes),
	     priority, code);
	if code ^= 0 then do;
	     if code = ws_error_$invalid_capability_name then
		code = bft_error_table_$bft_not_loaded;
	     call com_err_ (code, NAME, "Issuing fetch request.");

	     goto FETCH_RETURN;
	end;

/* Increment the cancellation count */

	passed = passed + 1;
     end;

FETCH_RETURN:

     if passed > 0 then
	call ioa_ ("^a: ^d request^[s^] submitted for fetching.", NAME,
	     passed, (passed > 1));

     end bft_fetch;

/**/

/* *** Procedure: bft_load - Internal proc for bft *** */

bft_load:
     proc ();

/* PROCEDURE FUNCTION                                                             

This calls the proper entrypoint to get BFT loaded into the CAT.  No arguments
are required.
*/

/* NOTES
*/

/* PARAMETERS */

/* MISC VARIABLES */
dcl code		       fixed bin (35);	    /* Error code */

/* STRUCTURES */

/* INITIALIZATION */

/* MAIN */

/* Print a usage message if there is an invalid number  of args */

     if arg_count ^= 1 then do;
	call com_err_ (error_table_$wrong_no_of_args, NAME);
	call ioa_ (USAGE_LOAD);
	return;
     end;

/* Make call to proper entrypoint */

     call bft_$load (code);
     if (code ^= 0) then do;
	if code = ws_error_$invalid_capability_name then
	     code = bft_error_table_$bft_not_loaded;
	call com_err_ (code, NAME, "While attempting to load BFT.");
	return;
     end;

     end bft_load;

/**/

/* *** Procedure: bft_recover - Internal proc for bft *** */

bft_recover:
     proc ();

/* PROCEDURE FUNCTION                                                    

This is the routine called if the argument was fetch_recover.  The purpose of
this routine is to transmit the portion of a file that was previously
interrupted.
*/

/* NOTES
*/

/* PARAMETERS */

/* MISC VARIABLES */
dcl code		       fixed bin (35);	    /* Error code */

/* STRUCTURES */

/* INITIALIZATION */

/* MAIN */

/* Print a usage message if there is an invalid number  of args */

     if arg_count ^= 1 then do;
	call com_err_ (error_table_$wrong_no_of_args, NAME);
	call ioa_ (USAGE_RECOVER);
	return;
     end;

/* Recover fetch operations */

     call bft_$recover_fetch (code);
     if (code ^= 0) then do;
	if code = ws_error_$invalid_capability_name then
	     code = bft_error_table_$bft_not_loaded;
	call com_err_ (code, NAME, "Attempting to recover fetch.");
     end;

/* Recover store operations */

     call bft_$recover_store (code);
     if (code ^= 0) then do;
	if code = ws_error_$invalid_capability_name then
	     code = bft_error_table_$bft_not_loaded;
	call com_err_ (code, NAME, "Attempting to recover store.");
     end;

     end bft_recover;

/**/

/* *** Procedure: bft_store - Internal proc for bft *** */

bft_store:
     proc ();

/* PROCEDURE FUNCTION                                                            

This routine is identical in function to the bft_fetch, except for the fact
that it calls bft_$store.
*/

/* NOTES
*/

/* PARAMETERS */

/* MISC VARIABLES */
dcl code		       fixed bin (35);	    /* Error code */
dcl passed	       fixed bin;		    /* Previous request submitted */
dcl pc_path	       char (66);
dcl mu_path	       char (168);

/* STRUCTURES */

/* INITIALIZATION */
     passed = 0;

/* MAIN */

/* Repeat until there are no more requests in the command line */

     do while (arg_pos < arg_count);

/* Get the mu_path */

	call get_arg ("0"b, code);
	if code ^= 0 then do;
	     if passed = 0 then
		call com_err_ (code, NAME, arg);

	     goto STORE_RETURN;
	end;

	mu_path = arg;
	pc_path = "===";

/* Look for the PC path, if not specified then assume mu_patjh */

	call get_arg ("0"b, code);
	if code ^= 0 & code ^= error_table_$noarg then do;
	     call com_err_ (code, NAME, arg);
	     goto STORE_RETURN;
	end;
	else if code = 0 then
	     pc_path = arg;

/* Call the bft_$store entrypoint with the valid parms */

	call bft_$store (rtrim (mu_path), rtrim (pc_path), unspec (modes),
	     priority, code);
	if code ^= 0 then do;
	     if code = ws_error_$invalid_capability_name then
		code = bft_error_table_$bft_not_loaded;
	     call com_err_ (code, NAME, "Issuing store request.");
	     goto STORE_RETURN;
	end;

	passed = passed + 1;
     end;

STORE_RETURN:

     if passed > 0 then
	call ioa_ ("^a: ^d request^[s^] submitted for storing.", NAME,
	     passed, (passed > 1));

     end bft_store;

/**/

/* *** Procedure: bft_unload - Internal proc for bft *** */

bft_unload:
     proc ();

/* PROCEDURE FUNCTION                                                           

If the first argument was unload then this is the routine that is called.  This
calls the necessary enttrypoint to have BFT deleted from the CAT.
*/

/* NOTES
*/

/* PARAMETERS */

/* MISC VARIABLES */
dcl code		       fixed bin (35);	    /* Error code */

/* STRUCTURES */

/* INITIALIZATION */

/* MAIN */

/* Print a usage message if there is an invalid number  of args */

     if arg_count ^= 1 then do;
	call com_err_ (error_table_$wrong_no_of_args, NAME);
	call ioa_ (USAGE_UNLOAD);
	return;
     end;

/* Call the proper entrypoint with the valid parameters */

     call bft_$unload (code);
     if (code ^= 0) then do;
	if code = ws_error_$invalid_capability_name then
	     code = bft_error_table_$bft_not_loaded;
	call com_err_ (code, NAME, "While attempting to unload BFT.");
	return;
     end;

     end bft_unload;

/**/

/* *** Procedure: get_arg - Internal proc for bft  *** */

get_arg:
     proc (p_special, p_code);


/* PROCEDURE FUNCTION

Extract the next real argument from the argument list.
If the p_special parameter is True, then accept the "-control_arg STR" as a
"non-control" argument.
*/

/* NOTES
*/

/* PARAMETERS */
dcl p_special	       bit(1) parameter;	    /* Accept "-ca STR " */
dcl p_code	       fixed bin (35) parameter;  /* Error code */

/* MISC VARIABLES */

/* STRUCTURES */

/* INITIALIZATION */

/* MAIN */
     p_code = 0;

/* Skip all control_args until a NON-control_arg is found */

     do while ("1"b);
	arg_pos = arg_pos + 1;

	if arg_pos > arg_count then do;
	     p_code = error_table_$noarg;
	     return;
	end;

	call cu_$arg_ptr_rel (arg_pos, arg_ptr, arg_len, p_code, main_arg_ptr);
	if p_code ^= 0 then
	     return;

	if substr (arg, 1, 1) = "-" then do;
	     if arg = "-entry" | arg = "-et"	    /* These are special */
		| arg = "-id"
	     then do;
		if p_special then		    /* Caller wants this */
		     return;
		else			    /* Skip the param */
		     arg_pos = arg_pos + 1;
	     end;
	     else if arg = "-queue" | arg = "-q"    /* Skip the param */
		| arg = "-file_type" | arg = "-ft"
	     then
		arg_pos = arg_pos + 1;
	     else				    /* No params */
		;
	end;
	else
	     return;
     end;

     end get_arg;

/**/

/* *** Procedure: parse_control_args - Internal proc for bft  *** */

parse_control_args:
     proc (p_code, p_reason);


/* PROCEDURE FUNCTION

Skip through the command line arguments and extract control arguments.

Control arguments extracted are:

	-brief,		-bf
	-notify,		-nt
	-no_notify,	-nnt
	-file_type TYPE,	-ft TYPE
	-queue N,		-q N

Control arguments "skipped" (as they are really a "single" argument):

	-entry NAME,	-et NAME
	-id ID
*/

/* NOTES
*/

/* PARAMETERS */
dcl p_reason	       char (*) var parameter;    /* Error reason */
dcl p_code	       fixed bin (35) parameter;  /* Error code */

/* MISC VARIABLES */
dcl temp_queue	       fixed bin;		    /* local queue value */

/* STRUCTURES */

/* INITIALIZATION */
     p_code = 0;
     p_reason = "";

/* MAIN */

     do arg_pos = 1 to arg_count;
	call cu_$arg_ptr_rel (arg_pos, arg_ptr, arg_len, p_code, main_arg_ptr);
	if p_code ^= 0 then
	     return;

	if arg = "-file_type" | arg = "-ft" then do;
	     if ^(store_sw | fetch_sw) then do;
		p_code = error_table_$inconsistent;
		return;
	     end;

	     arg_pos = arg_pos + 1;
	     call cu_$arg_ptr_rel (arg_pos, arg_ptr, arg_len, p_code, main_arg_ptr);
	     if p_code ^= 0 then
		return;

	     if arg = "binary" then
		modes.binary_sw = "1"b;
	     else if arg = "ascii" then
		modes.binary_sw = "0"b;
	     else do;
		p_reason = arg;
		p_code = bft_error_table_$invalid_file_type;
		return;
	     end;
	end;

	else if arg = "-long" | arg = "-lg" then do;
	     if ^display_sw then do;
		p_code = error_table_$inconsistent;
		return;
	     end;

	     long_sw = "1"b;
	end;

	else if arg = "-brief" | arg = "-bf" then do;
	     if ^display_sw then do;
		p_code = error_table_$inconsistent;
		return;
	     end;

	     long_sw = "0"b;
	end;

	else if arg = "-id" then do;
	     if ^cancel_sw then do;
		p_code = error_table_$inconsistent;
		return;
	     end;
	end;

	else if arg = "-entry" | arg = "-et" then do;
	     if  ^cancel_sw then do;
		p_code = error_table_$inconsistent;
		return;
	     end;
	end;

	else if arg = "-notify" | arg = "-nt" then do;
	     if ^(fetch_sw | store_sw) then do;
		p_code = error_table_$inconsistent;
		return;
	     end;

	     modes.notify_sw = "1"b;
	end;

	else if arg = "-no_notify" | arg = "-nnt" then do;
	     if ^(fetch_sw | store_sw) then do;
		p_code = error_table_$inconsistent;
		return;
	     end;

	     modes.notify_sw = "0"b;
	end;

	else if arg = "-queue" | arg = "-q" then do;
	     if ^(store_sw | fetch_sw) then do;
		p_code = error_table_$inconsistent;
		return;
	     end;

	     arg_pos = arg_pos + 1;
	     call cu_$arg_ptr_rel (arg_pos, arg_ptr, arg_len, p_code, main_arg_ptr);
	     if p_code ^= 0 then
		return;

	     if arg_len ^= 1 then do;
		p_reason = arg;
		p_code = bft_error_table_$invalid_priority;
		return;
	     end;

	     temp_queue = rank (substr (arg, 1, 1)) - rank ("0");
	     if temp_queue < BFT_MIN_PRIORITY
		| temp_queue > BFT_MAX_PRIORITY
	     then do;
		p_reason = arg;
		p_code = bft_error_table_$invalid_priority;
		return;
	     end;

	     priority = temp_queue;
	end;

	else if substr (arg, 1, 1) = "-" then do;
	     p_code = error_table_$bad_arg;
	     reason = arg;
	     return;
	end;
     end;

     end parse_control_args;

/**/

/* INCLUDE FILES */
%include bft_queue;
%include bft_values;

     end bft;
