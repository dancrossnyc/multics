/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* format: off */

/* read_mail forwarding sub-requests which manipulate the comment text */

/* Created:  October 1983 by B. Margolin (from sdm_message_requests_) */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen */


rdm_fwd_text_requests_:
     procedure (P_sci_ptr, P_rdm_forward_invocation_ptr);

	return;					/* not an entry */


/* Parameters */

dcl  P_sci_ptr pointer parameter;
dcl  P_rdm_forward_invocation_ptr pointer parameter;


/* Remaining declarations */

dcl  argument character (argument_lth) unaligned based (argument_ptr);
dcl  argument_ptr pointer;
dcl  argument_lth fixed binary (21);
dcl  (n_arguments, argument_idx) fixed binary;

dcl  request_line character (request_line_lth) unaligned based (request_line_ptr);
dcl  request_line_ptr pointer;
dcl  request_line_lth fixed binary (21);

dcl  1 local_qi aligned,				/* data structure for invoking qedx_ */
       2 header like qedx_info.header,
       2 buffers (2) like qedx_info.buffers;		/* ... buffers 0 and (maybe) exec */

dcl  fatal_error bit (1) aligned;			/* set ON by rdm_fwd_text_mgr_$fill_text when necessary */
dcl  code fixed binary (35);

dcl  fill bit (1) aligned;				/* ON => fill the message after editing */
dcl  auto_write bit (1) aligned;			/* ON => enable auto-writing in qedx (sigh) */

dcl  first_command_argument_idx fixed binary;		/* where command line starts in the apply request */

dcl  fill_width fixed binary;

dcl  text_buffer char (rdm_forward_invocation.buffer_used) based (rdm_forward_invocation.buffer_ptr);
dcl  temp_seg char (rdm_forward_invocation.buffer_used) based (rdm_forward_invocation.temp_seg_ptr);

dcl  sys_info$max_seg_size fixed binary (19) external;
dcl  iox_$user_output pointer external;

/* format: off */
dcl (error_table_$bad_conversion, error_table_$badopt, error_table_$fatal_error, error_table_$noarg)
	fixed binary (35) external;
/* format: on */

dcl  cv_dec_check_ entry (character (*), fixed binary (35)) returns (fixed binary (35));
dcl  iox_$put_chars entry (pointer, pointer, fixed binary (21), fixed binary (35));
dcl  qedx_ entry (pointer, fixed binary (35));
dcl  rdm_fwd_text_mgr_$fill_text entry (pointer, fixed binary, bit (1) aligned);
dcl  ssu_$abort_line entry () options (variable);
dcl  ssu_$arg_count entry (pointer, fixed binary);
dcl  ssu_$arg_ptr entry (pointer, fixed binary, pointer, fixed binary (21));
dcl  ssu_$apply_request_util entry (pointer, fixed binary, pointer, fixed binary (21), fixed binary (21));
dcl  ssu_$get_subsystem_and_request_name entry (pointer) returns (character (72) varying);
dcl  ssu_$print_message entry () options (variable);

dcl  (addr, clock, index, length, null, string, unspec) builtin;
%page;
/* The "print" request: prints the comment text */

print_request:
     entry (P_sci_ptr, P_rdm_forward_invocation_ptr);

	rdm_forward_invocation_ptr = P_rdm_forward_invocation_ptr;

	call ssu_$arg_count (P_sci_ptr, n_arguments);

	if n_arguments ^= 0 then call ssu_$abort_line (P_sci_ptr, 0, "Usage:  print");

	call iox_$put_chars (iox_$user_output, rdm_forward_invocation.buffer_ptr, rdm_forward_invocation.buffer_used,
	     code);
	if code ^= 0 then call ssu_$abort_line (P_sci_ptr, code, "Attempting to print the comment text.");

	return;
%page;
/* The "qedx" request: invokes the qedx editor on the comment text */

qedx_request:
     entry (P_sci_ptr, P_rdm_forward_invocation_ptr);

	rdm_forward_invocation_ptr = P_rdm_forward_invocation_ptr;

	call ssu_$arg_count (P_sci_ptr, n_arguments);

	fill_width = rdm_forward_invocation.fill_width;	/* set default width */

	fill = rdm_forward_invocation.fill;		/* use global fill specification */
	auto_write = rdm_forward_invocation.auto_write;	/* use global auto-write specification (sigh) */
	request_line_lth = 0;			/* no -request */

	do argument_idx = 1 to n_arguments;

	     call ssu_$arg_ptr (P_sci_ptr, argument_idx, argument_ptr, argument_lth);

	     if index (argument, "-") = 1 then		/* a control agument */
		/*** ... these first two control arguments are bought to you by the MCR boards (sigh) */
		if argument = "-auto_write" then auto_write = "1"b;
		else if argument = "-no_auto_write" then auto_write = "0"b;

		else if (argument = "-fill") | (argument = "-fi") then fill = "1"b;
		else if (argument = "-no_fill") | (argument = "-nfi") then fill = "0"b;

		else if (argument = "-line_length") | (argument = "-ll") then
		     if argument_idx = n_arguments then
			call ssu_$abort_line (P_sci_ptr, error_table_$noarg, "Number after ""-line_length"".");
		     else do;			/* user supplied fill width */
			argument_idx = argument_idx + 1;
			call ssu_$arg_ptr (P_sci_ptr, argument_idx, argument_ptr, argument_lth);
			fill_width = cv_dec_check_ (argument, code);
			if code ^= 0 then
			     call ssu_$abort_line (P_sci_ptr, error_table_$bad_conversion, "", "-line_length ^a",
				argument);
			if fill_width < 31 then
			     call ssu_$abort_line (P_sci_ptr, 0, "Line length must be greater than 30.");
		     end;

		else if (argument = "-request") | (argument = "-rq") then do;
		     if argument_idx = n_arguments then
			call ssu_$abort_line (P_sci_ptr, error_table_$noarg, "String after ""-request"".");
		     argument_idx = argument_idx + 1;
		     call ssu_$arg_ptr (P_sci_ptr, argument_idx, argument_ptr, argument_lth);
		     request_line_ptr = addr (argument);
		     request_line_lth = length (argument);
		end;

		else call ssu_$abort_line (P_sci_ptr, error_table_$badopt, """^a""", argument);

	     else call ssu_$abort_line (P_sci_ptr, 0, "Usage:  qedx {-control_args}");
	end;

	if rdm_forward_invocation.buffer_ptr ^= rdm_forward_invocation.temp_seg_ptr then do;
						/* points at -input_file */
	     temp_seg = text_buffer;
	     rdm_forward_invocation.buffer_ptr = rdm_forward_invocation.temp_seg_ptr;
	end;

	local_qi.header.version = QEDX_INFO_VERSION_1;
	local_qi.editor_name = ssu_$get_subsystem_and_request_name (sci_ptr);
	string (local_qi.header.flags) = ""b;
	local_qi.header.query_if_modified = "1"b;	/* can't exit without writing */

	local_qi.n_buffers = 1;			/* start with just the comment text buffer */

	local_qi.buffers (1).buffer_name = "0";		/* it's buffer 0 (the default one) */
	local_qi.buffers (1).buffer_pathname = "<forwarding comment>";
	local_qi.buffers (1).region_ptr = rdm_forward_invocation.buffer_ptr;
	local_qi.buffers (1).region_max_lth = 4 * sys_info$max_seg_size;
	local_qi.buffers (1).region_initial_lth = rdm_forward_invocation.buffer_used;
	string (local_qi.buffers (1).flags) = ""b;
	local_qi.buffers (1).read_write_region,		/* ... straight into/out of our temporary segment */
	     local_qi.buffers (1).locked_pathname, local_qi.buffers (1).default_read_ok,
	     local_qi.buffers (1).default_write_ok = "1"b;
	local_qi.buffers (1).auto_write = auto_write;	/* ... sigh */

	if request_line_lth > 0 then do;		/* need an "exec" buffer for the requests */
	     local_qi.n_buffers = 2;			/* ... obviously */
	     local_qi.buffers (2).buffer_name = "exec";
	     local_qi.buffers (2).buffer_pathname = "";	/* ... doesn't come from anywhere */
	     local_qi.buffers (2).region_ptr = request_line_ptr;
	     local_qi.buffers (2).region_max_lth, local_qi.buffers (2).region_initial_lth = request_line_lth;
	     string (local_qi.buffers (2).flags) = ""b;
	     local_qi.buffers (2).read_write_region, local_qi.buffers (2).execute_buffer,
		local_qi.buffers (2).locked_pathname = "1"b;
	end;

	call qedx_ (addr (local_qi), code);
	if code = error_table_$fatal_error then		/* couldn't initialize: message already printed... */
	     call ssu_$abort_line (P_sci_ptr, 0);

	rdm_forward_invocation.buffer_used = local_qi.buffers (1).region_final_lth;
						/* get length of the buffer after editing */

	if fill then do;				/* refill it */
	     call rdm_fwd_text_mgr_$fill_text (rdm_forward_invocation_ptr, fill_width, fatal_error);
	     if fatal_error then call ssu_$abort_line (P_sci_ptr, 0);
	end;					/* ... fill_text will print appropriate messages */

	return;
%page;
/* The "apply" request: applies an arbitrary Multics command line to a temporary segment containing the comment text
   and updates the comment with the contents of the segment upon completion of the command
   line.  This request can be used to invoke editors other than qedx (eg: Emacs) on the comment */

apply_request:
     entry (P_sci_ptr, P_rdm_forward_invocation_ptr);

	rdm_forward_invocation_ptr = P_rdm_forward_invocation_ptr;

	call ssu_$arg_count (P_sci_ptr, n_arguments);

	if n_arguments = 0 then call ssu_$abort_line (P_sci_ptr, 0, "Usage:  apply {-control_args} command-line");

	fill_width = rdm_forward_invocation.fill_width;	/* set default width */

	fill = rdm_forward_invocation.fill;		/* defaults to global fill specification */
	first_command_argument_idx = 0;		/* haven't found the start of the command line yet */

	do argument_idx = 1 to n_arguments		/* look for control arguments ... */
	     while (first_command_argument_idx = 0);	/* ... until the start of the command line */

	     call ssu_$arg_ptr (P_sci_ptr, argument_idx, argument_ptr, argument_lth);

	     if index (argument, "-") = 1 then		/* a control argument */
		if (argument = "-fill") | (argument = "-fi") then fill = "1"b;
		else if (argument = "-no_fill") | (argument = "-nfi") then fill = "0"b;

		else if (argument = "-line_length") | (argument = "-ll") then
		     if argument_idx = n_arguments then
			call ssu_$abort_line (P_sci_ptr, error_table_$noarg, "Number after ""-line_length"".");
		     else do;			/* user supplied fill width */
			argument_idx = argument_idx + 1;
			call ssu_$arg_ptr (P_sci_ptr, argument_idx, argument_ptr, argument_lth);
			fill_width = cv_dec_check_ (argument, code);
			if code ^= 0 then
			     call ssu_$abort_line (P_sci_ptr, error_table_$bad_conversion, "", "-line_length ^a",
				argument);
			if fill_width < 31 then
			     call ssu_$abort_line (P_sci_ptr, 0, "Line length must be greater than 30.");
		     end;

		else call ssu_$abort_line (P_sci_ptr, error_table_$badopt, """^a""", argument);

	     else first_command_argument_idx = argument_idx;
	end;					/* command line starts here */

	if first_command_argument_idx = 0 then
	     call ssu_$abort_line (P_sci_ptr, error_table_$noarg, "Multics command line.");

	if rdm_forward_invocation.buffer_ptr ^= rdm_forward_invocation.temp_seg_ptr then do;
						/* points at -input_file */
	     temp_seg = text_buffer;
	     rdm_forward_invocation.buffer_ptr = rdm_forward_invocation.temp_seg_ptr;
	end;

	call ssu_$apply_request_util (P_sci_ptr, first_command_argument_idx, rdm_forward_invocation.buffer_ptr,
	     rdm_forward_invocation.buffer_used, rdm_forward_invocation.buffer_used);
						/* call ssu_ to construct and execute the command line */

	if fill then do;				/* refill it */
	     call rdm_fwd_text_mgr_$fill_text (rdm_forward_invocation_ptr, fill_width, fatal_error);
	     if fatal_error then call ssu_$abort_line (P_sci_ptr, 0);
	end;

	return;
%page;
/* The "fill" request: reformats the comment text using format_document_ with fill-on and align-left modes */

fill_request:
     entry (P_sci_ptr, P_rdm_forward_invocation_ptr);

	rdm_forward_invocation_ptr = P_rdm_forward_invocation_ptr;

	call ssu_$arg_count (P_sci_ptr, n_arguments);

	fill_width = rdm_forward_invocation.fill_width;	/* set default width */

	do argument_idx = 1 to n_arguments;
	     call ssu_$arg_ptr (P_sci_ptr, argument_idx, argument_ptr, argument_lth);
	     if index (argument, "-") = 1 then		/* a control argument */
		if (argument = "-line_length") | (argument = "-ll") then
		     if argument_idx = n_arguments then
			call ssu_$abort_line (P_sci_ptr, error_table_$noarg, "Number after ""-line_length"".");
		     else do;			/* user supplied fill width */
			argument_idx = argument_idx + 1;
			call ssu_$arg_ptr (P_sci_ptr, argument_idx, argument_ptr, argument_lth);
			fill_width = cv_dec_check_ (argument, code);
			if code ^= 0 then
			     call ssu_$abort_line (P_sci_ptr, error_table_$bad_conversion, "", "-line_length ^a",
				argument);
			if fill_width < 31 then
			     call ssu_$abort_line (P_sci_ptr, 0, "Line length must be greater than 30.");
		     end;
		else call ssu_$abort_line (P_sci_ptr, error_table_$badopt, """^a""", argument);
	     else call ssu_$abort_line (P_sci_ptr, 0, "Usage:  fill {-control_args}");
	end;

	call rdm_fwd_text_mgr_$fill_text (rdm_forward_invocation_ptr, fill_width, fatal_error);
	if fatal_error then call ssu_$abort_line (P_sci_ptr, 0);

	return;
%page;
%include rdm_fwd_invocation;
%page;
%include qedx_info;

     end rdm_fwd_text_requests_;
