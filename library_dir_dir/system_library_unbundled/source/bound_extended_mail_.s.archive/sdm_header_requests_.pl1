/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* format: off */

/* The send_mail from, reply_to, to, cc, bcc, subject, message_id, and remove requests */

/* Created:  January 1979 by G. Palter */
/* Modified: 15 January 1979 by G. Palter to fix bug in adding to From field */
/* Modified: 27 January 1979 by G. Palter to accept -log and -save in the cc and remove requests */
/* Modified: 16 March 1979 by G. Palter to always abort the remove request if any errors are detected */
/* Modified: 25 December 1979 by W. Olin Sibert to update for new emf_info */
/* Modified: September 1983 by G. Palter as part of the conversion to the new mail system interface -- the in_reply_to
      request was converted into an original request and moved to sdm_original_requests_ and the bcc request was added */
/* Modified: April 1984 by G. Palter to fix the following mail system errors:
      #0433 -- the send_mail command and all send_mail and read_mail requests which accept multiple addresses as arguments
         do not properly parse "-log -at HOST"
      #0438 -- the primitives which allow a user to replace the address list portions of a message
         (eg: mail_system_$replace_from, mail_system_$replace_user_field) should not make the user's copy of the address
         list read-only.  Instead, they should copy the user's list to allow the user to continue to modify the list if
         desired for later additional use */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen */


sdm_header_requests_:
     procedure (P_sci_ptr, P_sdm_invocation_ptr);

	return;					/* not an entrypoint */


/* Parameters */

dcl  P_sci_ptr pointer parameter;
dcl  P_sdm_invocation_ptr pointer parameter;


/* Local copies of parameters */

dcl  sci_ptr pointer;


/* Remaining declarations */

dcl  active_request bit (1) aligned;

dcl  argument character (argument_lth) unaligned based (argument_ptr);
dcl  next_argument character (next_argument_lth) unaligned based (next_argument_ptr);
dcl  (argument_ptr, next_argument_ptr) pointer;
dcl  (argument_lth, next_argument_lth) fixed binary (21);
dcl  (n_arguments, argument_idx) fixed binary;

dcl  return_value character (return_value_max_lth) varying based (return_value_ptr);
dcl  return_value_ptr pointer;
dcl  return_value_max_lth fixed binary (21);

dcl  new_subject character (new_subject_lth) unaligned based (new_subject_ptr);
dcl  new_subject_ptr pointer;
dcl  (new_subject_lth, new_subject_used) fixed binary (21);

dcl  current_address_list_ptr pointer based (current_address_list_ptr_ptr);
dcl  current_address_list_ptr_ptr pointer;

dcl  1 local_pcao aligned like parse_ca_options;

dcl  1 lists aligned,				/* lists of addresses to be deleted */
       2 recipients pointer,				/* ... equivalent to the To, cc, and bcc fields */
       2 from pointer,
       2 reply_to pointer,
       2 to pointer,
       2 cc pointer,
       2 bcc pointer;

dcl  1 all aligned,					/* ON => remove all addresses from the specified field */
       2 recipients bit (1) aligned,			/* ... equivalent to the To, cc, and bcc fields */
       2 from bit (1) aligned,
       2 reply_to bit (1) aligned,
       2 to bit (1) aligned,
       2 cc bit (1) aligned,
       2 bcc bit (1) aligned;

dcl  remove_subject bit (1) aligned;			/* ON => flush the message subject */
dcl  remove_in_reply_to bit (1) aligned;		/* ON => flush the list of reply references */

dcl  fieldname character (32) varying;			/* name of the address list field being updated */
dcl  address_list_field_value pointer;			/* -> address list field which is to be updated */
dcl  replace_field entry (pointer, pointer, fixed binary (35)) variable;

dcl  abort bit (1) aligned;				/* ON => do not add any addresses if some are invalid */
dcl  found_invalid_address bit (1) aligned;		/* ON => at least one address on the request line is bad */

dcl  new_addresses_ptr pointer;			/* -> list of addresses to add to the field */
dcl  savebox_addresses_ptr pointer;			/* -> list of saveboxes to add to the bcc field */

dcl  errors_detected bit (1) aligned;			/* ON => abort request line containing this remove request */

dcl  (new_address_list_field_value, new_to_field_value, new_cc_field_value, new_bcc_field_value, the_address) pointer;
dcl  (replace_to_field, replace_cc_field, replace_bcc_field, address_deleted) bit (1) aligned;
dcl  (address_idx, idx) fixed binary;

dcl  code fixed binary (35);

dcl  STACK_EXTENSION fixed binary (18) static options (constant) initial (128);

dcl  iox_$error_output pointer external;
dcl  iox_$user_output pointer external;

/* format: off */
dcl (emf_et_$address_not_found, emf_et_$empty_address_list_field, error_table_$bad_arg, error_table_$badopt,
     error_table_$inconsistent, error_table_$noarg, error_table_$smallarg, error_table_$too_many_args,
     mlsys_et_$ca_parse_failed, mlsys_et_$no_recipients)
	fixed binary (35) external;
/* format: on */

dcl  cu_$arg_list_ptr entry () returns (pointer);
dcl  cu_$cl entry (bit (36) aligned);
dcl  cu_$generate_call entry (entry, pointer);
dcl  cu_$grow_stack_frame entry (fixed binary (18), pointer, fixed binary (35));
dcl  ioa_ entry () options (variable);
dcl  ioa_$ioa_switch entry () options (variable);
dcl  mail_system_$compare_addresses entry (pointer, pointer, fixed binary (35)) returns (bit (1) aligned);
dcl  mail_system_$copy_address_list entry (pointer, pointer, fixed binary (35));
dcl  mail_system_$delete_address entry (pointer, fixed binary, fixed binary (35));
dcl  mail_system_$delete_reply_reference entry (pointer, fixed binary, fixed binary (35));
dcl  mail_system_$free_address_list entry (pointer, fixed binary (35));
dcl  mail_system_$merge_address_lists entry (pointer, pointer, bit (1) aligned, pointer, fixed binary (35));
dcl  mail_system_$replace_bcc entry (pointer, pointer, fixed binary (35));
dcl  mail_system_$replace_cc entry (pointer, pointer, fixed binary (35));
dcl  mail_system_$replace_from entry (pointer, pointer, fixed binary (35));
dcl  mail_system_$replace_reply_to entry (pointer, pointer, fixed binary (35));
dcl  mail_system_$replace_subject entry (pointer, character (*), fixed binary (35));
dcl  mail_system_$replace_to entry (pointer, pointer, fixed binary (35));
dcl  mlsys_utils_$parse_address_list_control_args
	entry (pointer, fixed binary, pointer, character (8), pointer, pointer, fixed binary (35));
dcl  mlsys_utils_$print_address_list_field
	entry (character (*) varying, pointer, fixed binary, pointer, fixed binary (35));
dcl  mlsys_utils_$print_message_id_field
	entry (character (*) varying, bit (72) aligned, fixed binary, pointer, fixed binary (35));
dcl  mlsys_utils_$print_text_field
	entry (character (*) varying, character (*), bit (1) aligned, fixed binary, pointer, fixed binary (35));
dcl  mlsys_utils_$summarize_address entry (pointer, bit (1) aligned, character (*) varying, fixed binary (35));
dcl  requote_string_ entry (character (*)) returns (character (*));
dcl  ssu_$abort_line entry () options (variable);
dcl  ssu_$arg_count entry (pointer, fixed binary);
dcl  ssu_$arg_ptr entry (pointer, fixed binary, pointer, fixed binary (21));
dcl  ssu_$get_temp_segment entry (pointer, character (*), pointer);
dcl  ssu_$print_message entry () options (variable);
dcl  ssu_$release_temp_segment entry (pointer, pointer);
dcl  ssu_$return_arg entry (pointer, fixed binary, bit (1) aligned, pointer, fixed binary (21));

dcl  cleanup condition;

dcl  (addr, baseno, index, length, null, stackframeptr, string, unspec) builtin;
%page;
/* The "from", "reply_to", "to", "cc", and "bcc" requests:  When given no arguments, these requests print the specified
   field; when given arguments, these requests add the supplied addresses to the specified field */

from_request:
     entry (P_sci_ptr, P_sdm_invocation_ptr);

	call setup_request ("0"b);
	address_list_field_value = message.from;
	fieldname = FROM_FIELDNAME;
	replace_field = mail_system_$replace_from;
	go to PROCESS_ADDRESS_LIST_FIELD_REQUEST;


reply_to_request:
     entry (P_sci_ptr, P_sdm_invocation_ptr);

	call setup_request ("0"b);
	address_list_field_value = message.reply_to;
	fieldname = REPLY_TO_FIELDNAME;
	replace_field = mail_system_$replace_reply_to;
	go to PROCESS_ADDRESS_LIST_FIELD_REQUEST;


to_request:
     entry (P_sci_ptr, P_sdm_invocation_ptr);

	call setup_request ("0"b);
	address_list_field_value = message.to;
	fieldname = TO_FIELDNAME;
	replace_field = mail_system_$replace_to;
	go to PROCESS_ADDRESS_LIST_FIELD_REQUEST;


cc_request:
     entry (P_sci_ptr, P_sdm_invocation_ptr);

	call setup_request ("0"b);
	address_list_field_value = message.cc;
	fieldname = CC_FIELDNAME;
	replace_field = mail_system_$replace_cc;
	go to PROCESS_ADDRESS_LIST_FIELD_REQUEST;


bcc_request:
     entry (P_sci_ptr, P_sdm_invocation_ptr);

	call setup_request ("0"b);
	address_list_field_value = message.bcc;
	fieldname = BCC_FIELDNAME;
	replace_field = mail_system_$replace_bcc;
	go to PROCESS_ADDRESS_LIST_FIELD_REQUEST;


/* Process the request */

PROCESS_ADDRESS_LIST_FIELD_REQUEST:
	if n_arguments = 0 then do;

/* No arguments: display the present content of the field */

	     if is_empty_list (address_list_field_value) then
		/*** Special display format if the list is empty ... */
		if fieldname = FROM_FIELDNAME then do;	/* ... except for the From field which has a default */
		     call mlsys_utils_$print_address_list_field (FROM_FIELDNAME, sdm_data_$default_from_field, 0,
			iox_$user_output, code);
		     if code ^= 0 then
			call ssu_$abort_line (sci_ptr, code, "Attempting to display the default From field.");
		end;

		else call ioa_ ("^a:  <No addresses>", fieldname);

	     else do;				/* there are addresses in it */
		call mlsys_utils_$print_address_list_field (fieldname, address_list_field_value, 0, iox_$user_output,
		     code);
		if code ^= 0 then
		     call ssu_$abort_line (sci_ptr, code, "Attempting to display the ^a field.", fieldname);
	     end;
	end;


	else do;

/* Arguments supplied: add the given addresses to the field */

	     local_pcao.version = PARSE_CA_OPTIONS_VERSION_1;
	     local_pcao.logbox_creation_mode = CREATE_AND_ANNOUNCE_MAILBOX;
	     local_pcao.savebox_creation_mode = QUERY_TO_CREATE_MAILBOX;
	     local_pcao.abort_on_errors = "0"b;		/* in case -no_abort is used */
	     local_pcao.validate_addresses = "1"b;
	     local_pcao.mbz = ""b;

	     abort = "1"b;				/* do not add any addresses if some are invalid */
	     found_invalid_address = "0"b;		/* assume everthing's OK */

	     new_addresses_ptr,			/* for cleanup handler */
		savebox_addresses_ptr = null ();

	     on condition (cleanup) call release_address_list_request_data ();

	     argument_idx = 1;			/* start at the beginning */

	     do while (argument_idx <= n_arguments);

		call mlsys_utils_$parse_address_list_control_args (sci_ptr, argument_idx, addr (local_pcao),
		     ADDRESS_LIST_VERSION_2, new_addresses_ptr, savebox_addresses_ptr, code);

		if (code ^= 0) & (code ^= mlsys_et_$ca_parse_failed) then
		     call ssu_$abort_line (sci_ptr, code, "Parsing control arguments.");

		found_invalid_address = found_invalid_address | (code = mlsys_et_$ca_parse_failed);

		if argument_idx <= n_arguments then do;

		     /*** An argument not recognized by the mail system: must be one of ours */
		     call ssu_$arg_ptr (sci_ptr, argument_idx, argument_ptr, argument_lth);

		     if index (argument, "-") = 1 then	/* a control argument */
			if argument = "-abort" then abort = "1"b;
			else if argument = "-no_abort" then abort = "0"b;

			else call ssu_$abort_line (sci_ptr, error_table_$badopt, """^a""", argument);

		     else call ssu_$abort_line (sci_ptr, error_table_$bad_arg, """^a""", argument);

		     argument_idx = argument_idx + 1;	/* continue with next argument (if any) */
		end;
	     end;

	     if is_empty_list (new_addresses_ptr) & is_empty_list (savebox_addresses_ptr) then
		call ssu_$abort_line (sci_ptr, error_table_$noarg, "New addresses for the ^a field.", fieldname);

	     /*** Abort now if there are invalid addresses unless -no_abort was specified */
	     if abort & found_invalid_address then	/* ... all appropriate messages were already printed */
		call ssu_$abort_line (sci_ptr, 0);

	     /*** Add the new addresses to the field */
	     if ^is_empty_list (new_addresses_ptr) then do;
		call mail_system_$merge_address_lists (address_list_field_value, new_addresses_ptr, "0"b,
		     new_addresses_ptr, code);
		if code ^= 0 then
		     call ssu_$abort_line (sci_ptr, code, "Adding the new addresses to the ^a field.", fieldname);
		call replace_field (message_ptr, new_addresses_ptr, code);
		if code ^= 0 then
		     call ssu_$abort_line (sci_ptr, code, "Adding the new addresses to the ^a field.", fieldname);
	     end;

	     /*** Add any logbox/savebox addresses to the bcc field */
	     if ^is_empty_list (savebox_addresses_ptr) then do;
		call mail_system_$merge_address_lists (message.bcc, savebox_addresses_ptr, "0"b,
		     savebox_addresses_ptr, code);
		if code ^= 0 then
		     call ssu_$abort_line (sci_ptr, code, "Adding the savebox addresses to the ^a field.",
			BCC_FIELDNAME);
		call mail_system_$replace_bcc (message_ptr, savebox_addresses_ptr, code);
		if code ^= 0 then
		     call ssu_$abort_line (sci_ptr, code, "Adding logbox and/or savebox addresses to the ^a field.",
			BCC_FIELDNAME);
	     end;

	     if sdm_invocation.message_state = PROCESSED_MESSAGE then sdm_invocation.message_state = MODIFIED_MESSAGE;

	     /*** Cleanup */
	     call release_address_list_request_data ();
	end;

	return;



/* Frees any address lists or addresses used by these requests which have not already been released */

release_address_list_request_data:
     procedure ();

	if savebox_addresses_ptr ^= null () then call mail_system_$free_address_list (savebox_addresses_ptr, (0));

	if new_addresses_ptr ^= null () then call mail_system_$free_address_list (new_addresses_ptr, (0));

	return;

     end release_address_list_request_data;
%page;
/* The "subject" request:  When given no arguments, this request displays the current subject; when given arguments, this
   request replaces the subject.  As an active request, it returns the current subject */

subject_request:
     entry (P_sci_ptr, P_sdm_invocation_ptr);

	call setup_request ("1"b);


	if active_request then do;

/* Active request: return the current subject */

	     if n_arguments = 0 then
		if message.subject.text_lth = 0 then
		     /*** No subject: return "" to hold our place on the request line */
		     return_value = """""";

		else return_value = requote_string_ (message_subject);

	     else call ssu_$abort_line (sci_ptr, error_table_$too_many_args,
		     "No arguments are permitted when used as an active request.");
	end;


	else if n_arguments = 0 then do;

/* Command request with no arguments: print the subject */

	     if message.subject.text_lth = 0 then
		call ioa_ ("^a:  <None>", SUBJECT_FIELDNAME);

	     else do;
		call mlsys_utils_$print_text_field (SUBJECT_FIELDNAME, message_subject, "0"b /* single-line field */,
		     0, iox_$user_output, code);
		if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Attempting to display the message subject.");
	     end;
	end;


	else do;

/* Command request with arguments supplied: change the subject */

	     new_subject_ptr = null ();		/* for cleanup handler */
	     on condition (cleanup)
		begin;
		     if new_subject_ptr ^= null () then
			if baseno (new_subject_ptr) ^= baseno (stackframeptr ()) then
			     call ssu_$release_temp_segment (sci_ptr, new_subject_ptr);
		end;

	     /*** Compute the length of the new subject */
	     new_subject_lth = n_arguments - 1;		/* ... spaces between the words */
	     do argument_idx = 1 to n_arguments;
		call ssu_$arg_ptr (sci_ptr, argument_idx, argument_ptr, argument_lth);
		new_subject_lth = new_subject_lth + argument_lth;
	     end;

	     /*** Use the stack if the new subject is short enough; otherwise, build it in a temporary segment */
	     if new_subject_lth <= (4 * STACK_EXTENSION) then
		call cu_$grow_stack_frame (STACK_EXTENSION, new_subject_ptr, (0));
	     else call ssu_$get_temp_segment (sci_ptr, "subject-text", new_subject_ptr);

	     /*** Build the new subject */
	     new_subject_used = 0;
	     do argument_idx = 1 to n_arguments;
		call ssu_$arg_ptr (sci_ptr, argument_idx, argument_ptr, argument_lth);
		begin;
dcl  inserted_text character (argument_lth) unaligned defined (new_subject) position (new_subject_used + 1);
		     inserted_text = argument;
		end;
		new_subject_used = new_subject_used + argument_lth;
		if argument_idx < n_arguments then do;
		     begin;
dcl  inserted_space character (1) unaligned defined (new_subject) position (new_subject_used + 1);
			inserted_space = " ";
		     end;
		     new_subject_used = new_subject_used + 1;
		end;
	     end;

	     /*** Replace the subject in the message */
	     call mail_system_$replace_subject (message_ptr, new_subject, code);
	     if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Replacing the message subject.");
	     if sdm_invocation.message_state = PROCESSED_MESSAGE then sdm_invocation.message_state = MODIFIED_MESSAGE;

	     /*** Cleanup */
	     if new_subject_ptr ^= null () then
		if baseno (new_subject_ptr) ^= baseno (stackframeptr ()) then
		     call ssu_$release_temp_segment (sci_ptr, new_subject_ptr);
	end;

	return;
%page;
/* The "message_id" requests: prints the unique identifier associated with the message.  This request has knowledge of the
   internal format of message identifiers used by the mail system and mail fail if said format changes */

message_id_request:
     entry (P_sci_ptr, P_sdm_invocation_ptr);

	call setup_request ("0"b);

	if n_arguments > 0 then
	     call ssu_$abort_line (sci_ptr, error_table_$too_many_args, "No arguments are permitted.");

	call mlsys_utils_$print_message_id_field (MESSAGE_ID_FIELDNAME, unspec (sdm_invocation.date_time_body_modified),
	     0, iox_$user_output, code);
	if code ^= 0 then
	     call ssu_$abort_line (sci_ptr, code, "Attempting to print the ^a field.", MESSAGE_ID_FIELDNAME);

	return;
%page;
/* The "remove" request:  Deletes the specified addresses from the approriate header fields; any addresses given before
   the use of a field selection control argument (-from, etc.) will be deleted from all of the recipient fields (To, cc,
   bcc).  Control arguments to delete the message subject and list of reply references are also accepted */

remove_request:
     entry (P_sci_ptr, P_sdm_invocation_ptr);

	call setup_request ("0"b);

	if n_arguments = 0 then call ssu_$abort_line (sci_ptr, 0, "Usage:  remove {addresses} {-control_args}");


/* Argument processing */

	local_pcao.version = PARSE_CA_OPTIONS_VERSION_1;
	local_pcao.logbox_creation_mode, local_pcao.savebox_creation_mode = DONT_CREATE_MAILBOX;
	local_pcao.abort_on_errors = "1"b;		/* stop immediately on syntax errors */
	local_pcao.validate_addresses = "0"b;		/* have to be able to delete non-existant addresses */
	local_pcao.mbz = ""b;

	current_address_list_ptr_ptr = addr (lists.recipients);
						/* start by deleting recipients */

	lists = null ();				/* no addresses to be deleted yet */

	string (all) = ""b;				/* haven't yet been asked to flush all addresses in a field */
	remove_subject, remove_in_reply_to = "0"b;

	new_address_list_field_value,			/* for cleanup handler */
	     new_to_field_value, new_cc_field_value, new_bcc_field_value = null ();

	on condition (cleanup) call release_remove_request_data ();

	argument_idx = 1;				/* start at the beginning */

	do while (argument_idx <= n_arguments);

	     call mlsys_utils_$parse_address_list_control_args (sci_ptr, argument_idx, addr (local_pcao),
		ADDRESS_LIST_VERSION_2, current_address_list_ptr, lists.bcc, code);

	     if (code ^= 0) & (code ^= mlsys_et_$ca_parse_failed) then
		call ssu_$abort_line (sci_ptr, code, "Parsing control arguments.");

	     if argument_idx <= n_arguments then do;

		/*** An argument not recognized by the mail system: must be one of ours */
		call ssu_$arg_ptr (sci_ptr, argument_idx, argument_ptr, argument_lth);

		if index (argument, "-") = 1 then	/* a control argument */
		     if (argument = "-all") | (argument = "-a") then
			if current_address_list_ptr_ptr = addr (lists.recipients) then
			     all.recipients = "1"b;
			else call ssu_$abort_line (sci_ptr, 0,
				"""-all"" must appear immediately after ""-from"", etc.");

		     else if (argument = "-subject") | (argument = "-sj") then remove_subject = "1"b;

		     else if (argument = "-in_reply_to") | (argument = "-irt") then remove_in_reply_to = "1"b;

		     /*** Following control argument is no longer valid: delete in MR11.0 */
		     else if (argument = "-message_id") | (argument = "-mid") then ;

		     else if argument = "-from" then do;
			if argument_idx = n_arguments then
			     call ssu_$abort_line (sci_ptr, error_table_$noarg,
				"Addresses or ""-all"" after ""-from"".");
			call ssu_$arg_ptr (sci_ptr, (argument_idx + 1), next_argument_ptr, next_argument_lth);
			if (next_argument = "-all") | (next_argument = "-a") then do;
			     all.from = "1"b;	/* ... delete the entire field's content */
			     argument_idx = argument_idx + 1;
			end;
			else current_address_list_ptr_ptr = addr (lists.from);
		     end;

		     else if (argument = "-reply_to") | (argument = "-rpt") then do;
			if argument_idx = n_arguments then
			     call ssu_$abort_line (sci_ptr, error_table_$noarg,
				"Addresses or ""-all"" after ""-reply_to"".");
			call ssu_$arg_ptr (sci_ptr, (argument_idx + 1), next_argument_ptr, next_argument_lth);
			if (next_argument = "-all") | (next_argument = "-a") then do;
			     all.reply_to = "1"b;	/* ... delete the entire field's content */
			     argument_idx = argument_idx + 1;
			end;
			else current_address_list_ptr_ptr = addr (lists.reply_to);
		     end;

		     else if argument = "-to" then do;
			if argument_idx = n_arguments then
			     call ssu_$abort_line (sci_ptr, error_table_$noarg,
				"Addresses or ""-all"" after ""-to"".");
			call ssu_$arg_ptr (sci_ptr, (argument_idx + 1), next_argument_ptr, next_argument_lth);
			if (next_argument = "-all") | (next_argument = "-a") then do;
			     all.to = "1"b;		/* ... delete the entire field's content */
			     argument_idx = argument_idx + 1;
			end;
			else current_address_list_ptr_ptr = addr (lists.to);
		     end;

		     else if argument = "-cc" then do;
			if argument_idx = n_arguments then
			     call ssu_$abort_line (sci_ptr, error_table_$noarg,
				"Addresses or ""-all"" after ""-cc"".");
			call ssu_$arg_ptr (sci_ptr, (argument_idx + 1), next_argument_ptr, next_argument_lth);
			if (next_argument = "-all") | (next_argument = "-a") then do;
			     all.cc = "1"b;		/* ... delete the entire field's content */
			     argument_idx = argument_idx + 1;
			end;
			else current_address_list_ptr_ptr = addr (lists.cc);
		     end;

		     else if argument = "-bcc" then do;
			if argument_idx = n_arguments then
			     call ssu_$abort_line (sci_ptr, error_table_$noarg,
				"Addresses or ""-all"" after ""-bcc"".");
			call ssu_$arg_ptr (sci_ptr, (argument_idx + 1), next_argument_ptr, next_argument_lth);
			if (next_argument = "-all") | (next_argument = "-a") then do;
			     all.bcc = "1"b;	/* ... delete the entire field's content */
			     argument_idx = argument_idx + 1;
			end;
			else current_address_list_ptr_ptr = addr (lists.bcc);
		     end;

		     else call ssu_$abort_line (sci_ptr, error_table_$badopt, """^a""", argument);

		else call ssu_$abort_line (sci_ptr, error_table_$bad_arg, """^a""", argument);

		argument_idx = argument_idx + 1;	/* continue with next argument (if any) */
	     end;
	end;

	if all.recipients & ^is_empty_list (lists.recipients) then
	     call ssu_$abort_line (sci_ptr, error_table_$inconsistent, "Addresses and ""-all"".");

	if all.from & ^is_empty_list (lists.from) then
	     call ssu_$abort_line (sci_ptr, error_table_$inconsistent, "Addresses and ""-all"" after ""-from"".");

	if all.reply_to & ^is_empty_list (lists.reply_to) then
	     call ssu_$abort_line (sci_ptr, error_table_$inconsistent, "Addresses and ""-all"" after ""-reply_to"".");

	if all.to & ^is_empty_list (lists.to) then
	     call ssu_$abort_line (sci_ptr, error_table_$inconsistent, "Addresses and ""-all"" after ""-to"".");

	if all.cc & ^is_empty_list (lists.cc) then
	     call ssu_$abort_line (sci_ptr, error_table_$inconsistent, "Addresses and ""-all"" after ""-cc"".");

	if all.bcc & ^is_empty_list (lists.bcc) then
	     call ssu_$abort_line (sci_ptr, error_table_$inconsistent, "Addresses and ""-all"" after ""-bcc"".");


/* Process the non-address list fields */

	errors_detected = "0"b;			/* remember if anything ever goes wrong */

	if remove_subject then do;
	     call mail_system_$replace_subject (message_ptr, "", code);
	     if code = 0 then			/* ... success */
		if sdm_invocation.message_state = PROCESSED_MESSAGE then
		     sdm_invocation.message_state = MODIFIED_MESSAGE;
		else ;
	     else call report_error (sci_ptr, code, "Deleting the ^a field.", SUBJECT_FIELDNAME);
	end;

	if remove_in_reply_to then do;		/* remove all reply references */
	     code = 0;				/* ... need do until */
	     do idx = message.n_reply_references to 1 by -1 while (code = 0);
		call mail_system_$delete_reply_reference (message_ptr, idx, code);
		if code ^= 0 then
		     call report_error (sci_ptr, code, "Deleting the ^a field.", REPLY_REFERENCES_FIELDNAME);
	     end;
	     sdm_invocation.original_messages_ptr = null ();
	     if sdm_invocation.message_state = PROCESSED_MESSAGE then sdm_invocation.message_state = MODIFIED_MESSAGE;
	end;


/* Delete the requested recipients from the To, cc, and bcc fields */

	if all.recipients then do;
	     /*** Delete all recipients */
	     call mail_system_$replace_to (message_ptr, null (), code);
	     if code = 0 then
		if sdm_invocation.message_state = PROCESSED_MESSAGE then
		     sdm_invocation.message_state = MODIFIED_MESSAGE;
		else ;
	     else call report_error (sci_ptr, code, "Deleting the contents of the ^a field.", TO_FIELDNAME);
	     call mail_system_$replace_cc (message_ptr, null (), code);
	     if code = 0 then
		if sdm_invocation.message_state = PROCESSED_MESSAGE then
		     sdm_invocation.message_state = MODIFIED_MESSAGE;
		else ;
	     else call report_error (sci_ptr, code, "Deleting the contents of the ^a field.", CC_FIELDNAME);
	     call mail_system_$replace_bcc (message_ptr, null (), code);
	     if code = 0 then
		if sdm_invocation.message_state = PROCESSED_MESSAGE then
		     sdm_invocation.message_state = MODIFIED_MESSAGE;
		else ;
	     else call report_error (sci_ptr, code, "Deleting the contents of the ^a field.", BCC_FIELDNAME);
	end;

	else if ^is_empty_list (lists.recipients) then do;
	     /*** Delete only the specified recipients */
	     if is_empty_list (message.to) & is_empty_list (message.cc) & is_empty_list (message.bcc) then
		call report_error (sci_ptr, mlsys_et_$no_recipients);
	     else do;
		replace_to_field, replace_cc_field, replace_bcc_field = "0"b;
		call mail_system_$copy_address_list (message.to, new_to_field_value, (0));
		call mail_system_$copy_address_list (message.cc, new_cc_field_value, (0));
		call mail_system_$copy_address_list (message.bcc, new_bcc_field_value, (0));
		do address_idx = 1 to lists.recipients -> address_list.n_addresses;
		     the_address = lists.recipients -> address_list.addresses (address_idx);
		     address_deleted = "0"b;
		     /*** Delete it from the To field ... */
		     idx = 1;
		     do while (idx <= new_to_field_value -> address_list.n_addresses);
			if mail_system_$compare_addresses (the_address,
			     new_to_field_value -> address_list.addresses (idx), (0)) then do;
			     replace_to_field, address_deleted = "1"b;
			     call mail_system_$delete_address (new_to_field_value, idx, code);
			     if code ^= 0 then
				call report_error (sci_ptr, code,
				     "Attempting to delete an address from the ^a field.", TO_FIELDNAME);
			end;
			else idx = idx + 1;		/* ... no match: proceeed to next candidate */
		     end;
		     /*** Delete it from the cc field ... */
		     idx = 1;
		     do while (idx <= new_cc_field_value -> address_list.n_addresses);
			if mail_system_$compare_addresses (the_address,
			     new_cc_field_value -> address_list.addresses (idx), (0)) then do;
			     replace_cc_field, address_deleted = "1"b;
			     call mail_system_$delete_address (new_cc_field_value, idx, code);
			     if code ^= 0 then
				call report_error (sci_ptr, code,
				     "Attempting to delete an address from the ^a field.", CC_FIELDNAME);
			end;
			else idx = idx + 1;		/* ... no match: proceeed to next candidate */
		     end;
		     /*** Delete it from the bcc field ... */
		     idx = 1;
		     do while (idx <= new_bcc_field_value -> address_list.n_addresses);
			if mail_system_$compare_addresses (the_address,
			     new_bcc_field_value -> address_list.addresses (idx), (0)) then do;
			     replace_bcc_field, address_deleted = "1"b;
			     call mail_system_$delete_address (new_bcc_field_value, idx, code);
			     if code ^= 0 then
				call report_error (sci_ptr, code,
				     "Attempting to delete an address from the ^a field.", BCC_FIELDNAME);
			end;
			else idx = idx + 1;		/* ... no match: proceeed to next candidate */
		     end;
		     if ^address_deleted then call report_address_not_deleted ("");
		end;
		/*** Update the recipient fields as appropriate ... */
		if replace_to_field then do;		/* we've changed the To field */
		     call mail_system_$replace_to (message_ptr, new_to_field_value, code);
		     if code = 0 then
			if sdm_invocation.message_state = PROCESSED_MESSAGE then
			     sdm_invocation.message_state = MODIFIED_MESSAGE;
			else ;
		     else call report_error (sci_ptr, code, "Replacing the ^a field.", TO_FIELDNAME);
		end;
		if replace_cc_field then do;		/* we've changed the cc field */
		     call mail_system_$replace_cc (message_ptr, new_cc_field_value, code);
		     if code = 0 then
			if sdm_invocation.message_state = PROCESSED_MESSAGE then
			     sdm_invocation.message_state = MODIFIED_MESSAGE;
			else ;
		     else call report_error (sci_ptr, code, "Replacing the ^a field.", CC_FIELDNAME);
		end;
		if replace_bcc_field then do;		/* we've changed the bcc field */
		     call mail_system_$replace_bcc (message_ptr, new_bcc_field_value, code);
		     if code = 0 then
			if sdm_invocation.message_state = PROCESSED_MESSAGE then
			     sdm_invocation.message_state = MODIFIED_MESSAGE;
			else ;
		     else call report_error (sci_ptr, code, "Replacing the ^a field.", BCC_FIELDNAME);
		end;
		if new_to_field_value ^= null () then call mail_system_$free_address_list (new_to_field_value, (0));
		if new_cc_field_value ^= null () then call mail_system_$free_address_list (new_cc_field_value, (0));
		if new_bcc_field_value ^= null () then call mail_system_$free_address_list (new_bcc_field_value, (0));
	     end;
	end;


/* Process the individual address lists */

	call process_remove_for_field (FROM_FIELDNAME, message.from, mail_system_$replace_from, lists.from, all.from);

	call process_remove_for_field (REPLY_TO_FIELDNAME, message.reply_to, mail_system_$replace_reply_to,
	     lists.reply_to, all.reply_to);

	call process_remove_for_field (TO_FIELDNAME, message.to, mail_system_$replace_to, lists.to, all.to);

	call process_remove_for_field (CC_FIELDNAME, message.cc, mail_system_$replace_cc, lists.cc, all.cc);

	call process_remove_for_field (BCC_FIELDNAME, message.bcc, mail_system_$replace_bcc, lists.bcc, all.bcc);


/* Clean up */

	call release_remove_request_data ();

	if errors_detected then call ssu_$abort_line (sci_ptr, 0);

	return;



/* Deletes either the entire contents of the specified address list field or all occurences of the supplied addresses */

process_remove_for_field:
     procedure (p_fieldname, p_field_value, p_replace_field, p_addresses_to_remove, p_remove_all_addresses);

dcl  p_fieldname character (*) varying parameter;
dcl  p_field_value pointer parameter;
dcl  p_replace_field entry (pointer, pointer, fixed binary (35)) variable parameter;
dcl  p_addresses_to_remove pointer parameter;
dcl  p_remove_all_addresses bit (1) aligned parameter;

dcl  (replace_the_field, address_deleted) bit (1) aligned;
dcl  (address_idx, idx) fixed binary;

	if p_remove_all_addresses then do;
	     /*** Delete the entire field's content */
	     call p_replace_field (message_ptr, null (), code);
	     if code = 0 then			/* ... we've changed the message */
		if sdm_invocation.message_state = PROCESSED_MESSAGE then
		     sdm_invocation.message_state = MODIFIED_MESSAGE;
		else ;
	     else call report_error (sci_ptr, code, "Deleting the contents of the ^a field.", p_fieldname);
	end;

	else if ^is_empty_list (p_addresses_to_remove) then do;
	     /*** Delete the specified addresses from the field */
	     if is_empty_list (p_field_value) then
		call report_error (sci_ptr, emf_et_$empty_address_list_field,
		     "Can not remove any addresses from the ^a field.", p_fieldname);
	     else do;
		replace_the_field = "0"b;		/* until we've actually changed it */
		call mail_system_$copy_address_list (p_field_value, new_address_list_field_value, (0));
		do address_idx = 1 to p_addresses_to_remove -> address_list.n_addresses;
		     the_address = p_addresses_to_remove -> address_list.addresses (address_idx);
		     address_deleted = "0"b;
		     idx = 1;
		     do while (idx <= new_address_list_field_value -> address_list.n_addresses);
			if mail_system_$compare_addresses (the_address,
			     new_address_list_field_value -> address_list.addresses (idx), (0)) then do;
			     address_deleted = "1"b;	/* ... don't report that it wasn't found */
			     call mail_system_$delete_address (new_address_list_field_value, idx, code);
			     if code ^= 0 then
				call report_error (sci_ptr, code,
				     "Attempting to delete an address from the ^a field.", p_fieldname);
			end;
			else idx = idx + 1;		/* ... no match: proceeed to next candidate */
		     end;
		     if address_deleted then
			replace_the_field = "1"b;
		     else call report_address_not_deleted (p_fieldname);
		end;
		if replace_the_field then do;		/* we've made some changes */
		     call p_replace_field (message_ptr, new_address_list_field_value, code);
		     if code = 0 then
			if sdm_invocation.message_state = PROCESSED_MESSAGE then
			     sdm_invocation.message_state = MODIFIED_MESSAGE;
			else ;
		     else call report_error (sci_ptr, code, "Replacing the ^a field.", p_fieldname);
		end;
		if new_address_list_field_value ^= null () then
		     call mail_system_$free_address_list (new_address_list_field_value, (0));
	     end;
	end;

	return;

     end process_remove_for_field;



/* Reports that the given address was not found in the specified address list field */

report_address_not_deleted:
     procedure (p_fieldname) options (non_quick);

dcl  p_fieldname character (*) varying parameter;

dcl  address_summary character (address_summary_max_lth) varying based (address_summary_ptr);
dcl  address_summary_ptr pointer;
dcl  address_summary_max_lth fixed binary (21);

	call cu_$grow_stack_frame (STACK_EXTENSION, address_summary_ptr, (0));
	address_summary_max_lth = 4 * (STACK_EXTENSION - 1);
	code = error_table_$smallarg;			/* need do until ... */
	do while (code = error_table_$smallarg);	/* ... until the buffer's large enough to hold it */
	     call mlsys_utils_$summarize_address (the_address, "1"b /* beginning of sentence */, address_summary, code);
	     if code = error_table_$smallarg then do;
		call cu_$grow_stack_frame (STACK_EXTENSION, (null ()), (0));
		address_summary_max_lth = address_summary_max_lth + (4 * STACK_EXTENSION);
	     end;
	end;

	if length (p_fieldname) = 0 then
	     call report_error (sci_ptr, emf_et_$address_not_found, "^a in the To, cc, or bcc fields.", address_summary)
		;
	else call report_error (sci_ptr, emf_et_$address_not_found, "^a in the ^a field.", address_summary, p_fieldname)
		;

	return;

     end report_address_not_deleted;



/* Reports an error by calling ssu_$print_message:  The global flag indicating that an error was detected is set in order
   to insure that the request line is aborted after processing of this remove request is completed */

report_error:
     procedure () options (variable);

	call cu_$generate_call (ssu_$print_message, cu_$arg_list_ptr ());
	errors_detected = "1"b;

	if sdm_invocation.debug_mode then do;		/* simulate the actions of ssu_$abort_line */
	     call ioa_$ioa_switch (iox_$error_output, "ssu_error_: Debug mode set; calling cu_$cl.");
	     call cu_$cl (""b);
	end;

	return;

     end report_error;



/* Releases the temporary address lists used by the remove request */

release_remove_request_data:
     procedure ();

	if new_bcc_field_value ^= null () then call mail_system_$free_address_list (new_bcc_field_value, (0));

	if new_cc_field_value ^= null () then call mail_system_$free_address_list (new_cc_field_value, (0));

	if new_to_field_value ^= null () then call mail_system_$free_address_list (new_to_field_value, (0));

	if new_address_list_field_value ^= null () then
	     call mail_system_$free_address_list (new_address_list_field_value, (0));

	if lists.recipients ^= null () then call mail_system_$free_address_list (lists.recipients, (0));

	if lists.from ^= null () then call mail_system_$free_address_list (lists.from, (0));

	if lists.reply_to ^= null () then call mail_system_$free_address_list (lists.reply_to, (0));

	if lists.to ^= null () then call mail_system_$free_address_list (lists.to, (0));

	if lists.cc ^= null () then call mail_system_$free_address_list (lists.cc, (0));

	if lists.bcc ^= null () then call mail_system_$free_address_list (lists.bcc, (0));

	return;

     end release_remove_request_data;
%page;
/* Performs initialization common to all requests */

setup_request:
     procedure (p_allow_active_request);

dcl  p_allow_active_request bit (1) aligned;

	sci_ptr = P_sci_ptr;

	if p_allow_active_request then		/* use appropriate mechanism to get argument count, etc. */
	     call ssu_$return_arg (sci_ptr, n_arguments, active_request, return_value_ptr, return_value_max_lth);
	else call ssu_$arg_count (sci_ptr, n_arguments);

	sdm_invocation_ptr = P_sdm_invocation_ptr;
	message_ptr = sdm_invocation.message_ptr;

	return;

     end setup_request;



/* Determines if the given address list is empty */

is_empty_list:
     procedure (p_address_list_ptr) returns (bit (1) aligned);

dcl  p_address_list_ptr pointer parameter;

	if p_address_list_ptr = null () then		/* if there's no data at all, it's empty */
	     return ("1"b);

	else return ((p_address_list_ptr -> address_list.n_addresses = 0));

     end is_empty_list;
%page;
%include sdm_invocation;
%page;
%include sdm_data;
%page;
%include send_mail_options;
%page;
%include mlsys_message;
%page;
%include mlsys_address_list;
%page;
%include mlsys_parse_ca_options;
%page;
%include mlsys_field_names;

     end sdm_header_requests_;
