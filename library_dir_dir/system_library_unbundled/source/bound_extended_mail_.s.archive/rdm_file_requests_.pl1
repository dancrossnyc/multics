/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(89-04-07,Lee), approve(89-05-10,MCR8104),
     audit(89-07-18,LZimmerman), install(89-10-02,MR12.3-1079):
     phx19099, phx15783, Mail 457 - passed additional message type to call to
     rdm_message_mark_mgr_$mark_current_message to catch use of "-odl" with the
     current message.
  2) change(89-04-11,Lee), approve(89-05-10,MCR8104),
     audit(89-07-18,LZimmerman), install(89-10-02,MR12.3-1079):
     phx18564, phx17540, phx17353, Mail 446 - the new entry set_new_current_msg
     in rdm_mailbox_interface_ is now called when the current message is
     changed to guarantee that the new current message is never a deleted
     message; reformatting.
                                                   END HISTORY COMMENTS */


/* format: off */

/* The read_mail write, append, and preface requests */

/* Created:  October 1983 by G. Palter from sdm_file_requests_ */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen */


rdm_file_requests_:
     procedure (P_sci_ptr, P_rdm_invocation_ptr);

	return;					/* not an entrypoint */


/* Parameters */

dcl  P_sci_ptr pointer parameter;
dcl  P_rdm_invocation_ptr pointer parameter;


/* Local copies of parameters */

dcl  sci_ptr pointer;


/* Remaining declarations */

dcl  message_specifier_idxs (n_message_specifiers_allocated) fixed binary based (message_specifier_idxs_ptr);
dcl  message_specifier_idxs_ptr pointer;
dcl  (n_message_specifiers_allocated, n_message_specifiers) fixed binary;
dcl  message_type fixed binary;			/* all/only deleted/only non-deleted */

dcl  argument character (argument_lth) unaligned based (argument_ptr);
dcl  argument_ptr pointer;
dcl  argument_lth fixed binary (21);
dcl  (n_arguments, argument_idx) fixed binary;

dcl  message_buffer character (4 * sys_info$max_seg_size) unaligned based (message_buffer_ptr);
dcl  message_text character (message_text_lth) unaligned based (message_buffer_ptr);
dcl  message_buffer_ptr pointer;
dcl  message_text_lth fixed binary (21);

dcl  1 local_fmo aligned like format_message_options;

dcl  saved_rdm_sci_ptr pointer;
dcl  is_original_request bit (1) aligned;		/* ON => invoked from send_mail within a reply request */

dcl  (delete_after_processing, reverse_processing) bit (1) aligned;

dcl  file_dirname character (168);
dcl  file_ename character (32);
dcl  file_ptr pointer;
dcl  file_uid bit (36) aligned;

dcl  file_creation_mode fixed binary;
dcl  file_insertion_mode fixed binary;

dcl  have_filename bit (1) aligned;

dcl  code fixed binary (35);

dcl  sys_info$max_seg_size fixed binary (19) external;

/* format: off */
dcl (error_table_$action_not_performed, error_table_$badopt, error_table_$nostars, mlsys_et_$message_too_large,
     ssu_et_$unimplemented_request)
	fixed binary (35) external;
/* format: on */

dcl  check_star_name_$entry entry (character (*), fixed binary (35));
dcl  cu_$arg_list_ptr entry () returns (pointer);
dcl  cu_$grow_stack_frame entry (fixed binary (19), pointer, fixed binary (35));
dcl  emf_writing_util_$close entry (pointer, bit (36) aligned, fixed binary (35));
dcl  emf_writing_util_$open
	entry (pointer, character (*), character (*), fixed binary, pointer, bit (36) aligned, fixed binary (35));
dcl  emf_writing_util_$write entry (pointer, bit (36) aligned, character (*), fixed binary, fixed binary (35));
dcl  expand_pathname_$add_suffix entry (character (*), character (*), character (*), character (*), fixed binary (35));
dcl  ioa_$general_rs
	entry (pointer, fixed binary, fixed binary, character (*), fixed binary (21), bit (1) aligned, bit (1) aligned);
dcl  mlsys_utils_$format_message
	entry (pointer, pointer, pointer, fixed binary (21), fixed binary (21), fixed binary (35));
dcl  pathname_ entry (character (*), character (*)) returns (character (168));
dcl  rdm_mailbox_interface_$delete_messages entry (pointer, bit (1) aligned);
dcl  rdm_mailbox_interface_$mark_processed_and_acknowledge entry (pointer, fixed binary);
dcl  rdm_mailbox_interface_$read_message entry (pointer, fixed binary, pointer, fixed binary (35));
dcl  rdm_mailbox_interface_$set_new_current_msg entry (ptr, fixed binary, fixed binary);
dcl  rdm_message_mark_mgr_$clear_marked_messages entry (pointer);
dcl  rdm_message_mark_mgr_$mark_current_message entry (pointer, fixed binary);
dcl  rdm_message_mark_mgr_$mark_messages
	entry (pointer, pointer, fixed binary (21), fixed binary, bit (*), fixed binary (35));
dcl  rdm_message_mark_mgr_$remark_original_messages entry (pointer);
dcl  rdm_message_mark_mgr_$validate_message_specifier
	entry (pointer, pointer, fixed binary (21), fixed binary, bit (*), fixed binary (35));
dcl  ssu_$abort_line entry () options (variable);
dcl  ssu_$arg_count entry (pointer, fixed binary);
dcl  ssu_$arg_ptr entry (pointer, fixed binary, pointer, fixed binary (21));
dcl  ssu_$get_request_name entry (pointer) returns (character (32));
dcl  ssu_$get_temp_segment entry (pointer, character (*), pointer);
dcl  ssu_$release_temp_segment entry (pointer, pointer);

dcl  cleanup condition;

dcl  (addr, index, length, null, size, substr) builtin;
%page;
/* The "write" request: adds the printed representation of the specified messages to the end of the specified file which
   is created if necessary without asking the user's permission */

write_request:
     entry (P_sci_ptr, P_rdm_invocation_ptr);

	call setup_request ("1"b);			/* may be used as a send_mail original request */

	saved_rdm_sci_ptr = rdm_invocation.sci_ptr;	/* for cleanup handler */

	on condition (cleanup)
	     begin;
	     call cleanup_request ();			/* common to all requests */
	     rdm_invocation.sci_ptr = saved_rdm_sci_ptr;
	end;

	rdm_invocation.sci_ptr = P_sci_ptr;		/* be sure to not abort the reply request by accident */

	file_creation_mode = SILENTLY_CREATE_FILE;
	file_insertion_mode = APPEND_FILE;		/* default is "-extend" */

	call process_arguments ("1"b);		/* allow -extend/-truncate */

	call mark_appropriate_messages ();

	call process_messages ();			/* do the actual work */

	call cleanup_request ();
	rdm_invocation.sci_ptr = saved_rdm_sci_ptr;

	return;
%page;
/* The "append" request: adds the printed representation of the specified messages to the end of the specified file.  The
   user is asked for permission to create the file if it doesn't exist */

append_request:
     entry (P_sci_ptr, P_rdm_invocation_ptr);

	file_insertion_mode = APPEND_FILE;		/* ... at the end */
	go to APPEND_PREFACE_COMMON;


/* The "preface" request: adds the printed representation of the specified messages to the beginning of the specified
   file.  The user is asked for permission to create the file if it doesn't exist */

preface_request:
     entry (P_sci_ptr, P_rdm_invocation_ptr);

	file_insertion_mode = PREFACE_FILE;		/* ... at the beginning */


/* Process the append/preface request */

APPEND_PREFACE_COMMON:
	call setup_request ("0"b);			/* may only be used from read_mail */

	on condition (cleanup) call cleanup_request ();

	file_creation_mode = QUERY_TO_CREATE_FILE;

	call process_arguments ("0"b);		/* can't change insertion mode */

	call mark_appropriate_messages ();

	call process_messages ();			/* do the actual work */

	call cleanup_request ();

	return;
%page;
/* Prepares for the execution of one of the above requests */

setup_request:
     procedure (p_allow_original_request) /* options (quick) */;

dcl  p_allow_original_request bit (1) aligned parameter;

	sci_ptr = P_sci_ptr;
	rdm_invocation_ptr = P_rdm_invocation_ptr;

	if rdm_invocation.type = SDM_INVOCATION then	/* a send_mail original request ... */
	     if p_allow_original_request then do;	/* ... and that's OK */
		is_original_request = "1"b;
		sdm_invocation_ptr = P_rdm_invocation_ptr;
		rdm_invocation_ptr = sdm_invocation.rdm_invocation_ptr;
		if rdm_invocation_ptr = null () then
		     call ssu_$abort_line (sci_ptr, 0, "This request is valid only during a ""reply"" request.");
	     end;
	     else call ssu_$abort_line (sci_ptr, ssu_et_$unimplemented_request);

	else is_original_request = "0"b;		/* an oprdinary read_mail request */

	call ssu_$arg_count (sci_ptr, n_arguments);

	n_message_specifiers_allocated = n_arguments;	/* can't have more message specifiers than arguments */
	call cu_$grow_stack_frame (size (message_specifier_idxs), message_specifier_idxs_ptr, code);
	if code ^= 0 then call ssu_$abort_line (sci_ptr, 0, "Too many message specifiers on the request line.");

	n_message_specifiers = 0;			/* haven't actually spotted any yet */

	call rdm_message_mark_mgr_$clear_marked_messages (rdm_invocation_ptr);

	file_ptr, message_buffer_ptr = null ();		/* for cleanup handler */

	return;

     end setup_request;



/* Closes the file opened by this request and releases the message buffer */

cleanup_request:
     procedure ();

	if message_buffer_ptr ^= null () then call ssu_$release_temp_segment (sci_ptr, message_buffer_ptr);

	if file_ptr ^= null () then call emf_writing_util_$close (file_ptr, file_uid, (0));

	return;

     end cleanup_request;
%page;
/* Processes the arguments for one of the above requests */

process_arguments:
     procedure (p_accept_extend_truncate);

dcl  p_accept_extend_truncate bit (1) aligned parameter;

	message_type = NON_DELETED_MESSAGES;

	reverse_processing = "0"b;			/* default is to process in marked order */
	delete_after_processing = "0"b;		/* default is to not delete messages */
	have_filename = "0"b;

	do argument_idx = 1 to n_arguments;

	     call ssu_$arg_ptr (sci_ptr, argument_idx, argument_ptr, argument_lth);

	     if index (argument, "-") = 1 then		/* a control argument */
		if ^is_original_request & ((argument = "-delete") | (argument = "-dl")) then
		     delete_after_processing = "1"b;
		else if ^is_original_request & ((argument = "-no_delete") | (argument = "-ndl")) then
		     delete_after_processing = "0"b;

		else if p_accept_extend_truncate & (argument = "-extend") then file_insertion_mode = APPEND_FILE;
		else if p_accept_extend_truncate & ((argument = "-truncate") | (argument = "-tc")) then
		     file_insertion_mode = TRUNCATE_FILE;

		else if (argument = "-include_deleted") | (argument = "-idl") then message_type = ALL_MESSAGES;
		else if (argument = "-only_deleted") | (argument = "-odl") then message_type = ONLY_DELETED_MESSAGES;
		else if (argument = "-only_non_deleted") | (argument = "-ondl") then
		     message_type = NON_DELETED_MESSAGES;

		else if (argument = "-reverse") | (argument = "-rv") then reverse_processing = "1"b;
		else if (argument = "-no_reverse") | (argument = "-nrv") then reverse_processing = "0"b;

		/*** the following control arguments are obsolete: remove them in MR11 */
		else if (argument = "-all") | (argument = "-a") then message_type = ALL_MESSAGES;

		else call ssu_$abort_line (sci_ptr, error_table_$badopt, """^a""", argument);

	     else do;				/* a message specifier or filename */
		call rdm_message_mark_mgr_$validate_message_specifier (rdm_invocation_ptr, argument_ptr, argument_lth,
		     ALL_MESSAGES, ""b, code);
		if code = 0 then do;		/* ... it looks like a message specifier */
		     n_message_specifiers = n_message_specifiers + 1;
		     message_specifier_idxs (n_message_specifiers) = argument_idx;
		end;
		else				/* ... it must be the filename */
		     if have_filename then		/* ... but we already have one */
		     call ssu_$abort_line (sci_ptr, 0, "Only one filename may be given. ""^a"" and ""^a""",
			pathname_ (file_dirname, file_ename), argument);
		else do;				/* ... first filename */
		     have_filename = "1"b;
		     call expand_pathname_$add_suffix (argument, "mail", file_dirname, file_ename, code);
		     if code ^= 0 then call ssu_$abort_line (sci_ptr, code, """^a""", argument);
		     call check_star_name_$entry (file_ename, code);
		     if code ^= 0 then		/* ... either a sarname or an invalid name */
			if (code = 1) | (code = 2) then
			     call ssu_$abort_line (sci_ptr, error_table_$nostars, "^a",
				pathname_ (file_dirname, file_ename));
			else call ssu_$abort_line (sci_ptr, code, "^a", pathname_ (file_dirname, file_ename));
		end;
	     end;
	end;

	if ^have_filename then			/* filename missing: usage message is better here */
	     call ssu_$abort_line (sci_ptr, 0, "Usage: ^a {message_specifiers} path {-control_args}",
		ssu_$get_request_name (sci_ptr));

	return;

     end process_arguments;
%page;
/* Marks the appropriate messages for processing */

mark_appropriate_messages:
     procedure ();

dcl  idx fixed binary;

	if n_message_specifiers = 0 then		/* defaults to ... */
	     if is_original_request then		/* ... messages being answered if from send_mail */
		call rdm_message_mark_mgr_$remark_original_messages (rdm_invocation_ptr);

	     else					/* ... current message if from read_mail */
		call rdm_message_mark_mgr_$mark_current_message (rdm_invocation_ptr, message_type);
						/* phx19099 RL - "-odl" if specified will be caught when the current message is marked */

	else do;					/* use the messages requested by the user */
	     do idx = 1 to n_message_specifiers;
		call ssu_$arg_ptr (sci_ptr, message_specifier_idxs (idx), argument_ptr, argument_lth);
		call rdm_message_mark_mgr_$mark_messages (rdm_invocation_ptr, argument_ptr, argument_lth,
		     message_type, ""b, code);
		if code ^= 0 then call ssu_$abort_line (sci_ptr, code);
	     end;
	end;

	return;

     end mark_appropriate_messages;
%page;
/* Processes the marked messages */

process_messages:
     procedure ();

dcl  (first_message_idx, last_message_idx, message_idx_increment, message_idx, message_number) fixed binary;


	call emf_writing_util_$open (sci_ptr, file_dirname, file_ename, file_creation_mode, file_ptr, file_uid, code);
	if code ^= 0 then				/* couldn't open thje file ... */
	     if code = error_table_$action_not_performed then
		call ssu_$abort_line (sci_ptr, 0);	/* ... and user answered "no" to the query to create it */
	     else call ssu_$abort_line (sci_ptr, code, "^a", pathname_ (file_dirname, file_ename));

	call ssu_$get_temp_segment (rdm_invocation.sci_ptr, "message_text", message_buffer_ptr);


	if reverse_processing then do;		/* process them in the opposite order */
	     first_message_idx = marked_chain.n_messages;
	     last_message_idx = 1;
	     message_idx_increment = -1;
	end;
	else do;					/* process them in the order marked */
	     first_message_idx = 1;
	     last_message_idx = marked_chain.n_messages;
	     message_idx_increment = 1;
	end;

	do message_idx = first_message_idx to last_message_idx by message_idx_increment;
	     message_number = marked_chain.messages (message_idx);

	     call rdm_mailbox_interface_$read_message (rdm_invocation_ptr, message_number, message_ptr, code);
	     if code ^= 0 then
		call ssu_$abort_line (sci_ptr, code, "Reading message #^d from ^a.", message_number,
		     rdm_invocation.mailbox_name);

/* phx18564 RL - set current message to message_number and guarantee that it's not deleted */
	     call rdm_mailbox_interface_$set_new_current_msg (rdm_invocation_ptr, message_number,
		rdm_invocation.current_message);	/* it's current while we're working on it */

	     call process_single_message ();		/* do the real work */

	     call rdm_mailbox_interface_$mark_processed_and_acknowledge (rdm_invocation_ptr, message_number);
	end;

	if delete_after_processing then		/* user wants them deleted after processing */
	     call rdm_mailbox_interface_$delete_messages (rdm_invocation_ptr, "0"b);

	return;
%page;
/* Internal to process_messages: processes a single message */

process_single_message:
	procedure ();

	     local_fmo.version = FORMAT_MESSAGE_OPTIONS_VERSION_1;
	     local_fmo.line_length = 72;
	     local_fmo.envelope_formatting_mode, local_fmo.header_formatting_mode,
		local_fmo.redistributions_list_formatting_mode = DEFAULT_FORMATTING_MODE;
	     local_fmo.include_body = "1"b;

	     message_text_lth = 0;			/* nothing in the buffer yet */

	     call add_to_buffer (" #^d^[ (^d line^[s^] in body)^]:", message_number, (message.body.total_lines ^= -1),
		message.body.total_lines, (message.body.total_lines ^= 1));

	     call mlsys_utils_$format_message (message_ptr, addr (local_fmo), message_buffer_ptr,
		length (message_buffer), message_text_lth, code);
	     if code ^= 0 then			/* ... error_table_$smallarg */
		call ssu_$abort_line (sci_ptr, mlsys_et_$message_too_large,
		     "Preparing message #^d to be written to ^a.", message_number,
		     pathname_ (file_dirname, file_ename));

	     call add_to_buffer (" ---(^d)---^2/^|", message_number);

	     call emf_writing_util_$write (file_ptr, file_uid, message_text, file_insertion_mode, code);
	     if code ^= 0 then
		call ssu_$abort_line (sci_ptr, code, "Writing message #^d to ^a.", message_number,
		     pathname_ (file_dirname, file_ename));

	     if file_insertion_mode = TRUNCATE_FILE then	/* only truncate the output file once, please */
		file_insertion_mode = APPEND_FILE;

	     return;



/* Internal to process_single_message: formats the given text and adds it to the message buffer */

add_to_buffer:
	     procedure () options (variable);

dcl  internal_buffer character (256);			/* always called with relatively short messages */
dcl  internal_buffer_used fixed binary (21);

		call ioa_$general_rs (cu_$arg_list_ptr (), 1, 2, internal_buffer, internal_buffer_used, "0"b, "1"b);

		begin;
dcl  rest_of_message_buffer character (length (message_buffer) - message_text_lth) unaligned
	defined (message_buffer) position (message_text_lth + 1);

		     if internal_buffer_used > length (rest_of_message_buffer) then
			call ssu_$abort_line (sci_ptr, mlsys_et_$message_too_large,
			     "Preparing message #^d to be written to ^a.", message_number,
			     pathname_ (file_dirname, file_ename));

		     substr (rest_of_message_buffer, 1, internal_buffer_used) =
			substr (internal_buffer, 1, internal_buffer_used);
		end;

		message_text_lth = message_text_lth + internal_buffer_used;

		return;

	     end add_to_buffer;

	end process_single_message;

     end process_messages;
%page;
%include rdm_invocation;
%page;
%include rdm_message_list;
%page;
%include rdm_message_chains;
%page;
%include sdm_invocation;
%page;
%include emf_writing_modes;
%page;
%include mlsys_format_options;
%page;
%include mlsys_message;

     end rdm_file_requests_;
