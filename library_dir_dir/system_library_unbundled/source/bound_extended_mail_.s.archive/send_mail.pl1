/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* format: off */

/* The Multics send_mail command */

/* Written:  1 January 1978 by G. Palter */
/* Modified: 12 January 1978 by G. Palter to reflect change in sdm_subsystem_ return codes */
/* Modified: 15 January 1979 by G. Palter to add "-abort"/"-no_abort" and stop recognizing the
      undocumented "-file_input" */
/* Modified: 1 February 1979 by G. Palter to enforce a minimum line length of twenty */
/* Modified: 9 February 1979 by G. Palter to fix bug 038 wherein -save command line option produced
      unpredictable results */
/* Modified: 25 December 1979 by W. Olin Sibert to support auto_fill mode */
/* Modified: 4 April 1980 by G. Palter to fix bug #077 -- Use of send_mail as an active function is highly unrewarding */
/* Modified: 25 April 1980 by G. Palter to implement suggestion #084 -- Provide abbrev expansion of read_mail and
      send_mail request lines; add the "-abbrev", "-no_abbrev", and "-profile" control arguments */
/* Modified: 20 May 1980 by G. Palter to fix bug #0314 -- error message printed for a non-existant profile contains an
      extraneous "]" */
/* Modified: 4 June 1980 by G. Palter to implement suggestion #0287 -- if a reply is being created and the user exits
      send_mail without sending the reply, the "-delete" control argument of the "reply" request should be ignored */
/* Modified: 27 January 1981 by G. Palter to use cu_$arg_count rather than cu_$af_return_arg */
/* Modified: 16 February 1982 by G. Palter to convert to version 4 sdm_subsystem_info -- default profiles */
/* Modified: 2 March 1982 by G. Palter to eliminate a window which prevented subsystem invocations from being destroyed */
/* Modified: 17 September 1982 by G. Palter to add -debug/-no_debug, change definition of -fill and eliminate -auto_fill,
      and change prompting and request loop control */
/* Modified:  August 1983 by G. Palter to convert to the new mail system interface.  As part of this conversion:
      (1) The -header/-no_header and -message_id/-no_message_id control arguments are still accepted but no longer have
	any meaning as the user ring can not control the amount of header information recorded in a message;
      (2) The -bcc control argument is accepted to add addresses the the bcc field (mail_system 0284);
      (3) Logbox and savebox addresses are now added to the bcc field instead of the cc field;
      (4) The command will create the logbox and offer to create saveboxes before reading the message text; if the user
	refuses to create the savebox, it will be considered an invalid address (mail_system 0228);
      (5) The command will, by default, abort before asking for the message text if any of the addresses on the command
	line is invalid (mail_system 0191, 229).  The -abort/-no_abort control argument is changed to indicate whether
	such invalid addresses should abort the command or cause send_mail to enter the request loop */
/* Modified: April 1984 by G. Palter to fix mail system error #0433 -- the send_mail command and all send_mail and
      read_mail requests which accept multiple addresses as arguments do not properly parse "-log -at HOST" */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen */


send_mail:
sdm:
     procedure () options (variable);


dcl  1 local_pcao aligned like parse_ca_options;

dcl  argument character (argument_lth) unaligned based (argument_ptr);
dcl  argument_ptr pointer;
dcl  argument_lth fixed binary (21);
dcl  (n_arguments, argument_idx) fixed binary;

dcl  profile_pathname character (profile_pathname_lth) unaligned based (profile_pathname_ptr);
dcl  profile_dirname character (168);
dcl  profile_ename character (32);
dcl  profile_pathname_ptr pointer;
dcl  profile_pathname_lth fixed binary (21);
dcl  (profile_pathname_given, abbrev_ca_given) bit (1) aligned;

dcl  input_filename character (input_filename_lth) unaligned based (input_filename_ptr);
dcl  (input_filename_ptr, input_file_ptr) pointer;
dcl  input_filename_lth fixed binary (21);

dcl  current_address_list_ptr pointer based (current_address_list_ptr_ptr);
dcl  current_address_list_ptr_ptr pointer;

dcl  sci_ptr pointer;				/* -> subsystem used to parse command line arguments */
dcl  sdm_invocation_ptr pointer;			/* -> description of the send_mail invocation */

dcl  abort bit (1) aligned;				/* ON => don't enter subsystem if any addresses are invalid */
dcl  found_invalid_address bit (1) aligned;		/* ON => there really are some invalid addresses present */

dcl  code fixed binary (35);

dcl  SEND_MAIL character (32) static options (constant) initial ("send_mail");

/* format: off */
dcl (error_table_$bad_arg, error_table_$bad_conversion, error_table_$badopt, error_table_$fatal_error, error_table_$noarg,
     emf_et_$send_mail_aborted, mlsys_et_$ca_parse_failed, mlsys_et_$cant_parse_irt_field)
	fixed binary (35) external;
/* format: on */

dcl  active_fnc_err_ entry () options (variable);
dcl  com_err_ entry () options (variable);
dcl  cv_dec_check_ entry (character (*), fixed binary (35)) returns (fixed binary (35));
dcl  cu_$af_return_arg entry (fixed binary, pointer, fixed binary (21)) returns (fixed binary (35));
dcl  cu_$arg_list_ptr entry () returns (pointer);
dcl  expand_pathname_ entry (character (*), character (*), character (*), fixed binary (35));
dcl  expand_pathname_$add_suffix entry (character (*), character (*), character (*), character (*), fixed binary (35));
dcl  initiate_file_ entry (character (*), character (*), bit (*), pointer, fixed binary (24), fixed binary (35));
dcl  mlsys_utils_$parse_address_list_control_args
	entry (pointer, fixed binary, pointer, character (8), pointer, pointer, fixed binary (35));
dcl  pathname_ entry (character (*), character (*)) returns (character (168));
dcl  sdm_subsystem_$create_invocation entry (character (8), pointer, pointer, fixed binary (35));
dcl  sdm_subsystem_$destroy_invocation entry (pointer, pointer);
dcl  sdm_subsystem_$subsystem entry (pointer, pointer, fixed binary (35));
dcl  ssu_$abort_subsystem entry () options (variable);
dcl  ssu_$arg_count entry (pointer, fixed binary);
dcl  ssu_$arg_ptr entry (pointer, fixed binary, pointer, fixed binary (21));
dcl  ssu_$destroy_invocation entry (pointer);
dcl  ssu_$standalone_invocation entry (pointer, character (*), character (*), pointer, entry, fixed binary (35));
dcl  terminate_file_ entry (pointer, fixed binary (24), bit (*), fixed binary (35));

dcl  cleanup condition;

dcl  (addr, index, null) builtin;
%page;
/* send_mail: sdm: procedure () options (variable) */

	sci_ptr,					/* for cleanup handler */
	     sdm_invocation_ptr, sdm_subsystem_info_ptr, input_file_ptr = null ();

	on condition (cleanup) call cleanup_send_mail_command ();

	call ssu_$standalone_invocation (sci_ptr, SEND_MAIL, "argument-parse", cu_$arg_list_ptr (),
	     abort_send_mail_command, code);
	if code ^= 0 then do;			/* please forgive the following, but ... */
	     if cu_$af_return_arg (0, (null ()), (0)) = 0 then
		call active_fnc_err_ (code, SEND_MAIL, "Can not establish standalone subsystem invocation.");
	     else call com_err_ (code, SEND_MAIL, "Can not establish standalone subsystem invocation.");
	     return;
	end;

	call ssu_$arg_count (sci_ptr, n_arguments);	/* aborts if not a command */

	call sdm_subsystem_$create_invocation (SDM_SUBSYSTEM_INFO_VERSION_6, sdm_invocation_ptr, sdm_subsystem_info_ptr,
	     code);
	if code ^= 0 then call ssu_$abort_subsystem (sci_ptr, code, "Creating the subsystem.");


/* Argument processing */

	current_address_list_ptr_ptr = addr (sdm_subsystem_info.to);
						/* defaults to -to */

	local_pcao.version = PARSE_CA_OPTIONS_VERSION_1;
	local_pcao.logbox_creation_mode = CREATE_AND_ANNOUNCE_MAILBOX;
	local_pcao.savebox_creation_mode = QUERY_TO_CREATE_MAILBOX;
	local_pcao.abort_on_errors = "0"b;		/* can't abort in case -no_abort appears somewhere */
	local_pcao.validate_addresses = "1"b;		/* always check validity of addresses */
	local_pcao.mbz = ""b;

	abort = "1"b;				/* abort if any invalid addresses are found */
	found_invalid_address = "0"b;			/* until proven otherwise */

	abbrev_ca_given = "0"b;			/* haven't seen -abbrev/-no_abbrev yet */
	profile_pathname_given = "0"b;		/* haven't seen -profile yet */

	argument_idx = 1;				/* start at the beginning */

	do while (argument_idx <= n_arguments);

	     call mlsys_utils_$parse_address_list_control_args (sci_ptr, argument_idx, addr (local_pcao),
		ADDRESS_LIST_VERSION_2, current_address_list_ptr, sdm_subsystem_info.bcc, code);

	     if (code ^= 0) & (code ^= mlsys_et_$ca_parse_failed) then
		call ssu_$abort_subsystem (sci_ptr, code, "Parsing control arguments.");

	     found_invalid_address = found_invalid_address | (code = mlsys_et_$ca_parse_failed);
						/* need to know whether to abort or not ... */

	     if argument_idx <= n_arguments then do;

		/*** An argument not recognized by the mail system: must be one of ours */
		call ssu_$arg_ptr (sci_ptr, argument_idx, argument_ptr, argument_lth);

		if index (argument, "-") = 1 then	/* a control argument */
		     if (argument = "-terminal_input") | (argument = "-ti") then
			sdm_subsystem_info.input_type = TERMINAL_INPUT;
		     else if (argument = "-input_file") | (argument = "-if") then do;
			call get_next_argument ("A pathname");
			sdm_subsystem_info.input_type = FILE_INPUT;
			input_filename_ptr = argument_ptr;
			input_filename_lth = argument_lth;
		     end;				/* save it for later processing */

		     else if argument = "-from" then current_address_list_ptr_ptr = addr (sdm_subsystem_info.from);
		     else if (argument = "-reply_to") | (argument = "-rpt") then
			current_address_list_ptr_ptr = addr (sdm_subsystem_info.reply_to);
		     else if argument = "-to" then current_address_list_ptr_ptr = addr (sdm_subsystem_info.to);
		     else if argument = "-cc" then current_address_list_ptr_ptr = addr (sdm_subsystem_info.cc);
		     else if argument = "-bcc" then current_address_list_ptr_ptr = addr (sdm_subsystem_info.bcc);

		     else if (argument = "-subject") | (argument = "-sj") then do;
			call get_next_argument ("A string");
			sdm_subsystem_info.subject_given = "1"b;
			sdm_subsystem_info.subject_ptr = argument_ptr;
			sdm_subsystem_info.subject_lth = argument_lth;
		     end;
		     else if (argument = "-no_subject") | (argument = "-nsj") then do;
			sdm_subsystem_info.subject_given = "1"b;
			sdm_subsystem_info.subject_lth = 0;
		     end;

		     else if argument = "-abort" then abort = "1"b;
		     else if argument = "-no_abort" then abort = "0"b;

		     else if (argument = "-acknowledge") | (argument = "-ack") then
			sdm_subsystem_info.acknowledge = "1"b;
		     else if (argument = "-no_acknowledge") | (argument = "-nack") then
			sdm_subsystem_info.acknowledge = "0"b;

		     else if (argument = "-brief") | (argument = "-bf") then sdm_subsystem_info.brief = "1"b;
		     else if (argument = "-long") | (argument = "-lg") then sdm_subsystem_info.brief = "0"b;

		     else if (argument = "-fill") | (argument = "-fi") then sdm_subsystem_info.fill_control = FILL;
		     else if (argument = "-no_fill") | (argument = "-nfi") then
			sdm_subsystem_info.fill_control = NO_FILL;
		     else if (argument = "-line_length") | (argument = "-ll") then do;
			call get_next_argument ("A number");
			sdm_subsystem_info.fill_width = cv_dec_check_ (argument, code);
			if code ^= 0 then
			     call ssu_$abort_subsystem (sci_ptr, error_table_$bad_conversion, "-line_length ""^a""",
				argument);
			if sdm_subsystem_info.fill_width < 31 then
			     call ssu_$abort_subsystem (sci_ptr, 0, "Line length must be greater than 30.");
		     end;

		     else if (argument = "-notify") | (argument = "-nt") then sdm_subsystem_info.notify = "1"b;
		     else if (argument = "-no_notify") | (argument = "-nnt") then sdm_subsystem_info.notify = "0"b;

		     /*** Control arguments required by the MCR boards despite the furious objections of the author */
		     else if argument = "-auto_write" then sdm_subsystem_info.auto_write = "1"b;
		     else if argument = "-no_auto_write" then sdm_subsystem_info.auto_write = "0"b;

		     /*** Control arguments which are now obsolete: delete in MR11 */
		     else if (argument = "-in_reply_to") | (argument = "-irt") then do;
			call get_next_argument ("A string");
			call ssu_$abort_subsystem (sci_ptr, mlsys_et_$cant_parse_irt_field, "-in_reply_to ""^a""",
			     argument);
		     end;
		     else if (argument = "-header") | (argument = "-he") | (argument = "-no_header")
			     | (argument = "-nhe") then
			;
		     else if (argument = "-message_id") | (argument = "-mid") | (argument = "-no_message_id")
			     | (argument = "-nmid") then
			;

		     /*** Standard subsystem control arguments */
		     else if (argument = "-abbrev") | (argument = "-ab") then
			sdm_subsystem_info.abbrev, abbrev_ca_given = "1"b;
		     else if (argument = "-no_abbrev") | (argument = "-nab") then do;
			sdm_subsystem_info.abbrev = "0"b;
			abbrev_ca_given = "1"b;
		     end;
		     else if (argument = "-profile") | (argument = "-pf") then do;
			call get_next_argument ("A pathname");
			profile_pathname_given = "1"b;
			profile_pathname_ptr = argument_ptr;
			profile_pathname_lth = argument_lth;
		     end;				/* save for later processing */

		     else if (argument = "-debug") | (argument = "-db") then sdm_subsystem_info.debug = "1"b;
		     else if (argument = "-no_debug") | (argument = "-ndb") then sdm_subsystem_info.debug = "0"b;

		     else if (argument = "-prompt") | (argument = "-pmt") then do;
			call get_next_argument ("A string");
			if argument_lth = 0 then	/* same as -no_prompt */
			     sdm_subsystem_info.prompt_control.prompt_control = NO_PROMPT;
			else do;
			     sdm_subsystem_info.prompt_control.prompt_control = USE_PROMPT_STRING;
			     sdm_subsystem_info.prompt_string = argument;
			end;
		     end;
		     else if (argument = "-no_prompt") | (argument = "-npmt") then
			sdm_subsystem_info.prompt_control.prompt_control = NO_PROMPT;

		     else if (argument = "-request") | (argument = "-rq") then do;
			call get_next_argument ("A string");
			sdm_subsystem_info.initial_requests_ptr = argument_ptr;
			sdm_subsystem_info.initial_requests_lth = argument_lth;
		     end;

		     else if (argument = "-request_loop") | (argument = "-rql") then
			sdm_subsystem_info.request_loop_control = REQUEST_LOOP;
		     else if (argument = "-no_request_loop") | (argument = "-nrql") then
			sdm_subsystem_info.request_loop_control = NO_REQUEST_LOOP;

		     else call ssu_$abort_subsystem (sci_ptr, error_table_$badopt, """^a""", argument);

		else call ssu_$abort_subsystem (sci_ptr, error_table_$bad_arg, """^a""", argument);

		argument_idx = argument_idx + 1;	/* continue with next argument (if any) */
	     end;
	end;


/* Verify that the input file requested by the user actually exists */

	if sdm_subsystem_info.input_type = FILE_INPUT then do;

	     call expand_pathname_ (input_filename, sdm_subsystem_info.input_file.dname,
		sdm_subsystem_info.input_file.ename, code);
	     if code ^= 0 then call ssu_$abort_subsystem (sci_ptr, code, "-input_file ""^a""", input_filename);

	     call initiate_file_ (sdm_subsystem_info.input_file.dname, sdm_subsystem_info.input_file.ename, R_ACCESS,
		input_file_ptr, (0), code);
	     if code ^= 0 then
		call ssu_$abort_subsystem (sci_ptr, code, "-input_file ""^a""",
		     pathname_ (sdm_subsystem_info.input_file.dname, sdm_subsystem_info.input_file.ename));

	     call terminate_file_ (input_file_ptr, 0, TERM_FILE_TERM, (0));
	end;


/* Initiate the subsystem profile requested by the user */

	if profile_pathname_given then do;

	     call expand_pathname_$add_suffix (profile_pathname, "profile", profile_dirname, profile_ename, code);
	     if code ^= 0 then call ssu_$abort_subsystem (sci_ptr, code, "-profile ""^a""", profile_pathname);

	     call initiate_file_ (profile_dirname, profile_ename, R_ACCESS, sdm_subsystem_info.default_profile_ptr, (0),
		code);
	     if code ^= 0 then
		call ssu_$abort_subsystem (sci_ptr, code, "-profile ""^a""",
		     pathname_ (profile_dirname, profile_ename));

	     if ^abbrev_ca_given then			/* -profile implies -abbrev unless explicit -ab/-nab given */
		sdm_subsystem_info.abbrev = "1"b;
	end;


/* Abort the entire subsystem invocation or force the subsystem to enter the request loop if invalid addresses were found
   according to the use of -abort/-no_abort and then invoke the subsystem */

	if found_invalid_address then			/* there are indeed invalid addresses ... */
	     if abort then				/* ... and the user doesn't want to continue */
		call ssu_$abort_subsystem (sci_ptr, 0);
	     else sdm_subsystem_info.request_loop_control = REQUEST_LOOP;
						/* ... force the user to fix the addresses */

	call sdm_subsystem_$subsystem (sdm_invocation_ptr, sdm_subsystem_info_ptr, code);

	if (code ^= 0) & (code ^= error_table_$fatal_error) & (code ^= emf_et_$send_mail_aborted) then
	     call ssu_$abort_subsystem (sci_ptr, code, "Invoking the subsystem.");


/* Cleanup */

RETURN_FROM_SEND_MAIL:
	call cleanup_send_mail_command ();

	return;
%page;
/* Releases all temporary data obtained by this send_mail invocation */

cleanup_send_mail_command:
     procedure ();

	if input_file_ptr ^= null () then call terminate_file_ (input_file_ptr, 0, TERM_FILE_TERM, (0));

	if (sdm_invocation_ptr ^= null ()) | (sdm_subsystem_info_ptr ^= null ()) then
	     call sdm_subsystem_$destroy_invocation (sdm_invocation_ptr, sdm_subsystem_info_ptr);

	if sci_ptr ^= null () then call ssu_$destroy_invocation (sci_ptr);

	return;

     end cleanup_send_mail_command;



/* Invoked by ssu_$abort_subsystem/ssu_$abort_line to terminate the send_mail invocation */

abort_send_mail_command:
     procedure ();

	go to RETURN_FROM_SEND_MAIL;

     end abort_send_mail_command;



/* Fetches the next argument for control arguments which require values */

get_next_argument:
     procedure (p_string);

dcl  p_string character (*) parameter;

	if argument_idx = n_arguments then
	     call ssu_$abort_subsystem (sci_ptr, error_table_$noarg, "^a after ""^a"".", p_string, argument);

	argument_idx = argument_idx + 1;

	call ssu_$arg_ptr (sci_ptr, argument_idx, argument_ptr, argument_lth);

	return;

     end get_next_argument;
%page;
%include sdm_subsystem_info;
%page;
%include send_mail_options;
%page;
%include mlsys_data;
%page;
%include mlsys_parse_ca_options;
%page;
%include mlsys_address_list;
%page;
%include access_mode_values;
%page;
%include terminate_file;

     end send_mail;
