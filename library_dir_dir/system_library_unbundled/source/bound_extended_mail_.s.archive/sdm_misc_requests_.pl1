/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: off */

/* Miscellaneous send_mail requests */

/* Created:  1 January 1979 by G. Palter */
/* Modified: 23 January 1979 by G. Palter to slightly modify output of requests */
/* Modified: 5 May 1980 by W. Olin Sibert for new ssu_ interface */
/* Modified: 30 May 1980 by G. Palter to implement suggestion #0316 -- the "." requests should indicate if abbrev
      processing is enabled */
/* Modified: 4 June 1980 by G. Palter to implement suggestion #0287 -- if a reply is being created and the user exits
      send_mail without sending the reply, the "-delete" control argument of the "reply" request should be ignored */
/* Modified: 16 February 1982 by G. Palter for new calling sequence of ssu_$get_abbrev_info */
/* Modified: 18 September 1982 by G. Palter to rename dot_request to self_identify and make the quit request accept
      "-no_force" and an arbitrary number of arguments (for abbreviations) */
/* Modified: September 1983 by G. Palter as part of the conversion to the new mail system interface */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen */


sdm_misc_requests_:
     procedure (P_sci_ptr, P_sdm_invocation_ptr);

	return;					/* not an entry */


/* Parameters */

dcl  P_sci_ptr pointer parameter;
dcl  P_sdm_invocation_ptr pointer parameter;


/* Remaining declarations */

dcl  argument character (argument_lth) unaligned based (argument_ptr);
dcl  argument_ptr pointer;
dcl  argument_lth fixed binary (21);
dcl  (n_arguments, argument_idx) fixed binary;

dcl  (subsystem_name, subsystem_version) character (32);
dcl  subsystem_level fixed binary;
dcl  abbrev_enabled bit (1) aligned;
dcl  processing_state fixed binary (2);

dcl  request_name character (72);
dcl  question_idx fixed binary;
dcl  force bit (1);

/* format: off */
dcl  QUESTION (-1:1) character (128) varying static options (constant) initial (
	"Message has not been sent, saved, or written.",
	"",					/* processed message: should never be used */
	"Message has been modified since it was last sent, saved, or written.");

dcl (error_table_$bad_arg, error_table_$badopt, emf_et_$send_mail_aborted)
	fixed binary (35) external;
/* format: on */

dcl  command_query_$yes_no entry () options (variable);
dcl  ioa_ entry () options (variable);
dcl  ssu_$abort_line entry () options (variable);
dcl  ssu_$abort_subsystem entry () options (variable);
dcl  ssu_$arg_count entry (pointer, fixed binary);
dcl  ssu_$arg_ptr entry (pointer, fixed binary, pointer, fixed binary (21));
dcl  ssu_$get_abbrev_info entry (pointer, pointer, pointer, bit (1) aligned);
dcl  ssu_$get_invocation_count entry (pointer, fixed binary, fixed binary);
dcl  ssu_$get_subsystem_and_request_name entry (pointer) returns (character (72) varying);
dcl  ssu_$get_subsystem_name entry (pointer) returns (character (32));
dcl  ssu_$get_subsystem_version entry (pointer) returns (character (32));

dcl  (addr, index, null) builtin;
%page;
/* format: off */
/* The "." request: prints a line of the form:

	send_mail V {(abbrev)} {(debug)} {(level R)}:  N lines {(STATE)};  {Subject: STR}

   where items enclosed in {}'s are optionally printed if meaningfull */
/* format: on */

self_identify:
     entry (P_sci_ptr, P_sdm_invocation_ptr);

	sdm_invocation_ptr = P_sdm_invocation_ptr;
	message_ptr = sdm_invocation.message_ptr;

	call ssu_$arg_count (P_sci_ptr, n_arguments);
	if n_arguments ^= 0 then call ssu_$abort_line (P_sci_ptr, 0, "No arguments may be given.");

	subsystem_name = ssu_$get_subsystem_name (P_sci_ptr);
	subsystem_version = ssu_$get_subsystem_version (P_sci_ptr);
	call ssu_$get_abbrev_info (P_sci_ptr, (null ()), (null ()), abbrev_enabled);
	call ssu_$get_invocation_count (P_sci_ptr, subsystem_level, (0));

	call ioa_ (
	     "^a ^a^[ (abbrev)^]^[ (debug)^]^[ (level ^d)^;^s^]:  ^d line^[s^]^[ (unprocessed)^;^; (modified)^]^[;  Subject: ^a^]"
	     , subsystem_name, subsystem_version, abbrev_enabled, sdm_invocation.debug_mode, (subsystem_level ^= 1),
	     subsystem_level, message.body.total_lines, (message.body.total_lines ^= 1),
	     (sdm_invocation.message_state - UNPROCESSED_MESSAGE + 1), (message.subject.text_lth > 0), message_subject);

	return;
%page;
/* The "quit" request: exits send_mail unless the message has been modified since it was last sent/saved/written; in the
   latter case, the user is queried for permission to exit */

quit_request:
     entry (P_sci_ptr, P_sdm_invocation_ptr);

	sdm_invocation_ptr = P_sdm_invocation_ptr;

	request_name = ssu_$get_subsystem_and_request_name (P_sci_ptr);

	call ssu_$arg_count (P_sci_ptr, n_arguments);

	sdm_invocation.abort_code = 0;		/* assume message was processed before exit */

	force = "0"b;				/* ask user by default */

	do argument_idx = 1 to n_arguments;
	     call ssu_$arg_ptr (P_sci_ptr, argument_idx, argument_ptr, argument_lth);
	     if index (argument, "-") = 1 then
		if (argument = "-force") | (argument = "-fc") then force = "1"b;
		else if (argument = "-no_force") | (argument = "-nfc") then force = "0"b;
		else call ssu_$abort_line (P_sci_ptr, error_table_$badopt, "^a", argument);
	     else call ssu_$abort_line (P_sci_ptr, error_table_$bad_arg, "This request only accepts control arugments.")
		     ;
	end;

	if sdm_invocation.message_state ^= PROCESSED_MESSAGE then do;
	     sdm_invocation.abort_code = emf_et_$send_mail_aborted;
	     if ^force then				/* ... need the user's permission */
		call command_query_$yes_no (force, 0, request_name, "", "^a^/Do you still wish to quit?",
		     QUESTION (sdm_invocation.message_state));
	     if ^force then call ssu_$abort_line (P_sci_ptr, 0);
	end;

	call ssu_$abort_subsystem (P_sci_ptr, 0);	/* never returns */
%page;
%include sdm_invocation;
%page;
%include mlsys_message;

     end sdm_misc_requests_;
