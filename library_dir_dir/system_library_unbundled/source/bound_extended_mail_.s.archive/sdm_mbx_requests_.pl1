/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-03-22,Blair), approve(88-03-22,MCR7842),
     audit(88-06-28,Lippard), install(88-07-26,MR12.2-1069):
     Look for the savebox using the mlsys search_list before querying the
     user for whether or not he wishes to create a new mbx on a save
     request. The copy also uses the searchlist to locate mailboxes, but
     the mailbox must exist for the request to succeed.
  2) change(89-06-23,Lee), approve(89-07-11,MCR8120),
     audit(89-08-27,LZimmerman), install(89-10-02,MR12.3-1079):
     phx19035 (Mail 460) - fixed bug in send_mail's "enter" request which
     causes mail to be sent when invalid or missing arguments are supplied for
     address control arguments.
                                                   END HISTORY COMMENTS */


/* format: off */

/* The send_mail send, log, save, and copy requests */

/* Created:  2 January 1979 by G. Palter */
/* Modified: 9 January 1979 by G. Palter to add log, save, and copy requests */
/* Modified: 12 January 1978 by G. Palter to not regard options to send as changing the identity of the message */
/* Modified: 15 January 1979 by G. Palter to add "-abort"/"-no_abort" to the send request */
/* Modified: 7 February 1979 by G. Palter to not set acknowledge bit for log, save, and copy requests */
/* Modified: 16 March 1979 by G. Palter to not send, log, or save the message if there is no text */
/* Modified: 2 June 1980 by G. Palter to fix bug #0304 -- the "write", "append", and "preface" requests should validate
      the name of the segment.  For example, they should reject the name "x." */
/* Modified: September 1983 by G. Palter as part of the conversion to the new mail system interface */
/* Modified: April 1984 by G. Palter to fix mail system error #0433 -- the send_mail command and all send_mail and
      read_mail requests which accept multiple addresses as arguments do not properly parse "-log -at HOST" */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen */


sdm_mbx_requests_:
     procedure (P_sci_ptr, P_sdm_invocation_ptr);

	return;					/* not an entrypoint */


/* Parameters */

dcl  P_sci_ptr pointer parameter;
dcl  P_sdm_invocation_ptr pointer parameter;


/* Remaining declarations */

dcl  argument character (argument_lth) unaligned based (argument_ptr);
dcl  argument_ptr pointer;
dcl  argument_lth fixed binary (21);
dcl  (n_arguments, argument_idx) fixed binary;
dcl  error_table_$noentry fixed bin(35) ext static;

dcl  1 local_pcao aligned like parse_ca_options;
dcl  1 local_do aligned like deliver_options;

dcl  1 local_ri aligned,				/* describes the message's recipients ... */
       2 header like recipients_info.header,
       2 lists (3) like recipients_info.lists;		/* ... enough for the To, cc, and bcc fields */

dcl  explicit_address_list_ptr pointer;			/* -> list of recipients on the send request line */

dcl  address_ptr pointer;
dcl  (address_idx, address_type) fixed binary;

dcl  mbx_dirname character (168);
dcl  mbx_ename character (32);

dcl  brief bit (1) aligned;
dcl  try_to_create bit (1);
dcl  invalid_address_found bit (1);

dcl  code fixed binary (35);

/* format: off */
dcl (error_table_$bad_arg, error_table_$badopt, error_table_$nostars, mlsys_et_$ca_parse_failed, mlsys_et_$empty_message,
     mlsys_et_$logbox_created, mlsys_et_$message_not_sent, mlsys_et_$message_partially_sent, mlsys_et_$no_mailbox,
     mlsys_et_$no_recipients, mlsys_et_$no_savebox, mlsys_et_$savebox_created)
	fixed binary (35) external;
/* format: on */

dcl  check_star_name_$entry entry (character (*), fixed binary (35));
dcl  command_query_$yes_no entry () options (variable);
dcl  expand_pathname_$add_suffix entry (character (*), character (*), character (*), character (*), fixed binary (35));
dcl  get_system_free_area_ entry () returns (pointer);

dcl  mail_system_$copy_message entry (pointer, character (*), character (*), fixed binary (35));
dcl  mail_system_$deliver_message entry (pointer, pointer, pointer, fixed binary (35));
dcl  mail_system_$free_address_list entry (pointer, fixed binary (35));
dcl  mail_system_$get_address_pathname entry (pointer, character (*), character (*), character (*), fixed binary (35));
dcl  mail_system_$get_address_type entry (pointer, fixed binary, fixed binary (35));
dcl  mail_system_$log_message entry (pointer, bit (1) aligned, fixed binary (35));
dcl  mail_system_$save_message entry (pointer, character (*), character (*), bit (1) aligned, fixed binary (35));
dcl  mail_system_$validate_address entry (pointer, bit (1) aligned, fixed binary (35));
dcl  mlsys_utils_$create_logbox entry (fixed binary (35));
dcl  mlsys_utils_$create_savebox entry (character (*), character (*), fixed binary (35));
dcl  mlsys_utils_$free_delivery_results entry (pointer, fixed binary (35));
dcl  mlsys_utils_$parse_address_list_control_args
	entry (pointer, fixed binary, pointer, character (8), pointer, pointer, fixed binary (35));
dcl  mlsys_utils_$print_delivery_results entry (pointer, bit (1) aligned, pointer, fixed binary (35));
dcl  pathname_ entry (character (*), character (*)) returns (character (168));
dcl  search_paths_$find_dir entry (char(*), ptr, char(*), char(*), char(*), fixed bin(35));
dcl  suffixed_name_$make entry (char(*), char(*), char(32), fixed bin(35));
dcl  ssu_$abort_line entry () options (variable);
dcl  ssu_$arg_count entry (pointer, fixed binary);
dcl  ssu_$arg_ptr entry (pointer, fixed binary, pointer, fixed binary (21));
dcl  ssu_$get_subsystem_and_request_name entry (pointer) returns (character (72) varying);
dcl  ssu_$print_message entry () options (variable);

dcl  cleanup condition;

dcl  (addr, index, length, null, reverse, search, string) builtin;
%page;
/* The "send" request: transmits the message either to the addresses listed in the To, cc, and bcc fields or to the
   addresses given on the request line */

send_request:
     entry (P_sci_ptr, P_sdm_invocation_ptr);

	sdm_invocation_ptr = P_sdm_invocation_ptr;
	message_ptr = sdm_invocation.message_ptr;

	call ssu_$arg_count (P_sci_ptr, n_arguments);

	explicit_address_list_ptr,			/* for cleanup handler */
	     local_ri.expanded_recipients_result_list_ptr, local_ri.lists (*) = null ();

	on condition (cleanup) call cleanup_after_send_request ();

	/*** Setup delivery options */
	local_do.version = DELIVER_OPTIONS_VERSION_2;
	local_do.delivery_mode = ORDINARY_DELIVERY;	/* ... an ordinary message */
	local_do.queueing_mode = ALWAYS_QUEUE_FOREIGN;	/* ... always queue foreign addresses & local when needed */
	local_do.queued_notification_mode = NOTIFY_ON_ERROR;
	string (local_do.flags) = ""b;
	local_do.abort = "1"b;			/* ... default to not send if everyone can't get the copy */
	local_do.recipient_notification = sdm_invocation.notify;
	local_do.acknowledge = sdm_invocation.acknowledge;

	local_ri.version = RECIPIENTS_INFO_VERSION_2;
	local_ri.area_ptr = get_system_free_area_ ();
	local_ri.n_lists = 0;			/* ... haven't decided which lists yet */


/* Argument processing */

	local_pcao.version = PARSE_CA_OPTIONS_VERSION_1;
	local_pcao.logbox_creation_mode = CREATE_AND_ANNOUNCE_MAILBOX;
	local_pcao.savebox_creation_mode = QUERY_TO_CREATE_MAILBOX;
	local_pcao.abort_on_errors = "0"b;		/* ... can't abort in case -no_abort appears somewhere */
	local_pcao.validate_addresses = "0"b;		/* ... deliver_message entrypoint will do the validation */
	local_pcao.mbz = "0"b;

	brief = sdm_invocation.brief;			/* defaults to what was given on the command line */
	invalid_address_found = "0"b;			/* phx19035, RL: to determine handling of -abort/-no_abort */

	argument_idx = 1;				/* start at the beginning */

	do while (argument_idx <= n_arguments);

	     call mlsys_utils_$parse_address_list_control_args (P_sci_ptr, argument_idx, addr (local_pcao),
		ADDRESS_LIST_VERSION_2, explicit_address_list_ptr, explicit_address_list_ptr, code);

	     if (code ^= 0) & (code ^= mlsys_et_$ca_parse_failed) then
		call ssu_$abort_line (P_sci_ptr, code, "Parsing control arguments.");

	     /* phx19035 RL: Note invalid addresses for possible later abort */
	     invalid_address_found = invalid_address_found | (code = mlsys_et_$ca_parse_failed);

	     if argument_idx <= n_arguments then do;

		/*** An argument not recognized by the mail system: must be one of ours */
		call ssu_$arg_ptr (P_sci_ptr, argument_idx, argument_ptr, argument_lth);

		if index (argument, "-") = 1 then	/* a control argument */
		     if argument = "-abort" then local_do.abort = "1"b;
		     else if argument = "-no_abort" then local_do.abort = "0"b;

		     else if (argument = "-acknowledge") | (argument = "-ack") then local_do.acknowledge = "1"b;
		     else if (argument = "-no_acknowledge") | (argument = "-nack") then local_do.acknowledge = "0"b;

		     else if (argument = "-brief") | (argument = "-bf") then brief = "1"b;
		     else if (argument = "-long") | (argument = "-lg") then brief = "0"b;

		     else if (argument = "-notify") | (argument = "-nt") then local_do.recipient_notification = "1"b;
		     else if (argument = "-no_notify") | (argument = "-nnt") then
			local_do.recipient_notification = "0"b;

		     /*** Control arguments which are now obsolete: delete in MR11 */
		     else if (argument = "-header") | (argument = "-he") | (argument = "-no_header")
			     | (argument = "-nhe") then
			;
		     else if (argument = "-message_id") | (argument = "-mid") | (argument = "-no_message_id")
			     | (argument = "-nmid") then
			;

		     else call ssu_$abort_line (P_sci_ptr, error_table_$badopt, """^a""", argument);

		else call ssu_$abort_line (P_sci_ptr, error_table_$bad_arg, """^a""", argument);

		argument_idx = argument_idx + 1;	/* continue with next argument (if any) */
	     end;
	end;

/* phx19035 RL: Abort delivery if invalid addresses found and -no_abort not specified */
	if invalid_address_found & local_do.abort then
	     call ssu_$abort_line (P_sci_ptr, 0);

/* Scan the explicit recipients for logbox and save
box addresses:  Create the logbox if necessary and ask for permission
   to create any saveboxes */

	if ^is_empty_list (explicit_address_list_ptr) then do;
	     address_list_ptr = explicit_address_list_ptr;
	     do address_idx = 1 to address_list.n_addresses;
		address_ptr = address_list.addresses (address_idx);
		call mail_system_$get_address_type (address_ptr, address_type, (0));
		if (address_type = LOGBOX_ADDRESS) | (address_type = SAVEBOX_ADDRESS) then do;
		     call mail_system_$get_address_pathname (address_ptr, mbx_dirname, mbx_ename, ((32)" "), (0));
		     call mail_system_$validate_address (address_ptr, "0"b /* don't expand mailing lists */, code);
		     if code = mlsys_et_$no_mailbox then do;
			if address_type = LOGBOX_ADDRESS then do;
			     call mlsys_utils_$create_logbox (code);
			     if code = 0 then
				call ssu_$print_message (P_sci_ptr, 0, "Created ^a.",
				     pathname_ (mbx_dirname, mbx_ename));
			     else if local_do.abort then
				call ssu_$abort_line (P_sci_ptr, code, "^a", pathname_ (mbx_dirname, mbx_ename));
			     else call ssu_$print_message (P_sci_ptr, code, "^a",
				     pathname_ (mbx_dirname, mbx_ename));
			end;
			else /*** if address_type = SAVEBOX_ADDRESS then */
			     do;
			     call command_query_$yes_no (try_to_create, 0,
				ssu_$get_subsystem_and_request_name (P_sci_ptr), "",
				"Do you wish to create the savebox ^a?", pathname_ (mbx_dirname, mbx_ename));
			     if try_to_create then do;
				call mlsys_utils_$create_savebox (mbx_dirname, mbx_ename, code);
				if code ^= 0 then	/* ... report the failure */
				     if local_do.abort then
					call ssu_$abort_line (P_sci_ptr, code, "^a",
					     pathname_ (mbx_dirname, mbx_ename));
				     else call ssu_$print_message (P_sci_ptr, code, "^a",
					     pathname_ (mbx_dirname, mbx_ename));
				else if local_do.abort then call ssu_$abort_line (P_sci_ptr, 0);
			     end;
			end;
		     end;
		end;
	     end;
	end;


/* Setup the list(s) of recipients for the message */

	if is_empty_list (explicit_address_list_ptr) then do;
	     /*** Use the To, cc, and bcc fields */
	     local_ri.n_lists = 0;
	     if ^is_empty_list (message.to) then do;
		local_ri.n_lists = local_ri.n_lists + 1;
		local_ri.lists (local_ri.n_lists).address_list_ptr = message.to;
	     end;
	     if ^is_empty_list (message.cc) then do;
		local_ri.n_lists = local_ri.n_lists + 1;
		local_ri.lists (local_ri.n_lists).address_list_ptr = message.cc;
	     end;
	     if ^is_empty_list (message.bcc) then do;
		local_ri.n_lists = local_ri.n_lists + 1;
		local_ri.lists (local_ri.n_lists).address_list_ptr = message.bcc;
	     end;
	     if local_ri.n_lists = 0 then		/* no recipients ... */
		call ssu_$abort_line (P_sci_ptr, mlsys_et_$no_recipients);
	end;

	else do;
	     /*** Use the addresses supplied on the request line */
	     local_ri.n_lists = 1;
	     local_ri.lists (1).address_list_ptr = explicit_address_list_ptr;
	end;

/* Deliver the message and report the results */

	call mail_system_$deliver_message (message_ptr, addr (local_ri), addr (local_do), code);

	if (code ^= 0) & (code ^= mlsys_et_$message_not_sent) & (code ^= mlsys_et_$message_partially_sent) then
	     call ssu_$abort_line (P_sci_ptr, code, "Attempting to transmit the message.");

	call mlsys_utils_$print_delivery_results (P_sci_ptr, brief, addr (local_ri), (0));

	call cleanup_after_send_request ();		/* flush the data */

	if (code = 0) | (code = mlsys_et_$message_partially_sent) then sdm_invocation.message_state = PROCESSED_MESSAGE;
						/* allow quit without query if it got through to anyone */

	if code ^= 0 then				/* abort the line because of errors in the transmission */
	     call ssu_$abort_line (P_sci_ptr, code);

	return;



/* Release the data structures used by the send request */

cleanup_after_send_request:
     procedure ();

	call mlsys_utils_$free_delivery_results (addr (local_ri), (0));

	if explicit_address_list_ptr ^= null () then
	     call mail_system_$free_address_list (explicit_address_list_ptr, (0));

	return;

     end cleanup_after_send_request;
%page;
/* The "log" request: places a copy of the message into the user's logbox which is created if necessary */

log_request:
     entry (P_sci_ptr, P_sdm_invocation_ptr);

	sdm_invocation_ptr = P_sdm_invocation_ptr;
	message_ptr = sdm_invocation.message_ptr;

	call ssu_$arg_count (P_sci_ptr, n_arguments);
	if n_arguments ^= 0 then call ssu_$abort_line (P_sci_ptr, 0, "No arguments may be given.");

	call abort_if_body_is_empty ();

	call mail_system_$log_message (message_ptr, "1"b /* create if not found */, code);
	if code = mlsys_et_$logbox_created then do;	/* announce that we just created the user's logbox */
	     call mail_system_$get_address_pathname (mlsys_data_$user_logbox_address, mbx_dirname, mbx_ename, ((32)" "),
		(0));
	     call ssu_$print_message (P_sci_ptr, 0, "Created ^a.", pathname_ (mbx_dirname, mbx_ename));
	     code = 0;				/* ... make the code indicate success */
	end;

	if code ^= 0 then call ssu_$abort_line (P_sci_ptr, code, "Adding the message to your logbox.");

	sdm_invocation.message_state = PROCESSED_MESSAGE; /* the user can now quit without query */

	return;
%page;
/* The "save" request: places a copy of the message into the specified savebox; the user is queried for permission to
   create the savebox if it does not exist */

save_request:
     entry (P_sci_ptr, P_sdm_invocation_ptr);

	sdm_invocation_ptr = P_sdm_invocation_ptr;
	message_ptr = sdm_invocation.message_ptr;

	call ssu_$arg_count (P_sci_ptr, n_arguments);
	if n_arguments ^= 1 then call ssu_$abort_line (P_sci_ptr, 0, "Usage:  save path");

	call ssu_$arg_ptr (P_sci_ptr, 1, argument_ptr, argument_lth);

	if index (argument, "-") = 1 then call ssu_$abort_line (P_sci_ptr, error_table_$badopt, """^a""", argument);

	if index (reverse (argument), reverse (".sv")) = 1 then argument_lth = argument_lth - length (".sv");
						/* remove ".sv" to avoid generating "x.sv.sv.mbx" */
	if search (argument, "<>") > 0 then do;
	     call expand_pathname_$add_suffix (argument, "sv.mbx", mbx_dirname, mbx_ename, code);
	     if code ^= 0 then call ssu_$abort_line (P_sci_ptr, code, "^a", argument);
	     end;
	else do;
	     call suffixed_name_$make (argument, "sv.mbx", mbx_ename, code);
	     if code ^= 0 then call ssu_$abort_line (P_sci_ptr, code, "^a", argument);
	     call search_paths_$find_dir ("mlsys", null(), mbx_ename, "", mbx_dirname, code);
	     if code ^= 0 then
		if code = error_table_$noentry then do;
		     call expand_pathname_$add_suffix (argument, "sv.mbx", mbx_dirname, mbx_ename, code);
		     if code ^= 0 then call ssu_$abort_line (P_sci_ptr, code, "^a", argument);
		     end;
		else call ssu_$abort_line (P_sci_ptr, code, "^a", mbx_ename);
	     end;

	call check_star_name_$entry (mbx_ename, code);
	if code ^= 0 then				/* reject invalid names and star names */
	     if (code = 1) | (code = 2) then
		call ssu_$abort_line (P_sci_ptr, error_table_$nostars, "^a", pathname_ (mbx_dirname, mbx_ename));
	     else call ssu_$abort_line (P_sci_ptr, code, "^a", pathname_ (mbx_dirname, mbx_ename));

	call abort_if_body_is_empty ();

	call mail_system_$save_message (message_ptr, mbx_dirname, mbx_ename, "0"b /* do not create if missing */, code);

	if code = mlsys_et_$no_savebox then do;		/* ask for permission to create the savebox */
	     call command_query_$yes_no (try_to_create, 0, ssu_$get_subsystem_and_request_name (P_sci_ptr), "",
		"Do you wish to create the savebox ^a?", pathname_ (mbx_dirname, mbx_ename));
	     if try_to_create then			/* ... permission given: try again */
		call mail_system_$save_message (message_ptr, mbx_dirname, mbx_ename, "1"b /* create if not found */,
		     code);
	     else call ssu_$abort_line (P_sci_ptr, 0);	/* ... no permission: stop right here */
	     if code = mlsys_et_$savebox_created then code = 0;
	end;

	if code ^= 0 then				/* couldn't save it */
	     call ssu_$abort_line (P_sci_ptr, code, "Adding the message to the savebox ^a.",
		pathname_ (mbx_dirname, mbx_ename));

	sdm_invocation.message_state = PROCESSED_MESSAGE; /* it's now OK to quit without query */

	return;
%page;
/* The "copy" request: places a copy of the message into the specified mailbox which must already exist */

copy_request:
     entry (P_sci_ptr, P_sdm_invocation_ptr);

	sdm_invocation_ptr = P_sdm_invocation_ptr;
	message_ptr = sdm_invocation.message_ptr;

	call ssu_$arg_count (P_sci_ptr, n_arguments);
	if n_arguments ^= 1 then call ssu_$abort_line (P_sci_ptr, 0, "Usage:  copy path");

	call ssu_$arg_ptr (P_sci_ptr, 1, argument_ptr, argument_lth);

	if index (argument, "-") = 1 then call ssu_$abort_line (P_sci_ptr, error_table_$badopt, """^a""", argument);

	if search (argument, "<>") > 0 then do;
	     call expand_pathname_$add_suffix (argument, "mbx", mbx_dirname, mbx_ename, code);
	     if code ^= 0 then call ssu_$abort_line (P_sci_ptr, code, "^a", argument);
	     end;
	else do;
	     call suffixed_name_$make (argument, "mbx", mbx_ename, code);
	     if code ^= 0 then call ssu_$abort_line (P_sci_ptr, code, "^a", argument);
	     call search_paths_$find_dir ("mlsys", null (), mbx_ename, "", mbx_dirname, code);
	     if code ^= 0 then
		if code = error_table_$noentry then do;
		     call expand_pathname_$add_suffix (argument, "mbx", mbx_dirname, mbx_ename, code);
		     if code ^= 0 then call ssu_$abort_line (P_sci_ptr, code, "^a", argument);
		     end;
		else call ssu_$abort_line (P_sci_ptr, code, "^a", argument);
	     end;
	     
	call check_star_name_$entry (mbx_ename, code);
	if code ^= 0 then				/* reject invalid names and star names */
	     if (code = 1) | (code = 2) then
		call ssu_$abort_line (P_sci_ptr, error_table_$nostars, "^a", pathname_ (mbx_dirname, mbx_ename));
	     else call ssu_$abort_line (P_sci_ptr, code, "^a", pathname_ (mbx_dirname, mbx_ename));

	call abort_if_body_is_empty ();

	call mail_system_$copy_message (message_ptr, mbx_dirname, mbx_ename, code);

	if code ^= 0 then				/* couldn't copy it */
	     call ssu_$abort_line (P_sci_ptr, code, "Adding the message to the mailbox ^a.",
		pathname_ (mbx_dirname, mbx_ename));

	sdm_invocation.message_state = PROCESSED_MESSAGE; /* it's now OK to quit without query */

	return;
%page;
/* Determines if the given address list is empty */

is_empty_list:
     procedure (p_address_list_ptr) returns (bit (1) aligned);

dcl  p_address_list_ptr pointer parameter;

	if p_address_list_ptr = null () then		/* if there's no data at all, it's empty */
	     return ("1"b);

	else return ((p_address_list_ptr -> address_list.n_addresses = 0));

     end is_empty_list;



/* Aborts the operation if the message is empty */

abort_if_body_is_empty:
     procedure ();

dcl  idx fixed binary;

	do idx = 1 to message.n_body_sections;
	     message_body_section_ptr = addr (message.body_sections (idx));
	     if message_body_section.section_type = MESSAGE_PREFORMATTED_BODY_SECTION then
		if message_preformatted_body_section.text_lth > 0 then
		     return;			/* any non-zero length section => the message isn't empty */
		else ;
	     else /*** if message_body_section.section_type = MESSAGE_BIT_STRING_BODY_SECTION then */
		if message_bit_string_body_section.bit_string_lth > 0 then return;
	end;					/* any non-zero length section => the message isn't empty */

	/*** Control arrives here iff all sections in the body are empty */
	call ssu_$abort_line (P_sci_ptr, mlsys_et_$empty_message);

     end abort_if_body_is_empty;
%page;
%include sdm_invocation;
%page;
%include mlsys_data;
%page;
%include mlsys_message;
%page;
%include mlsys_address_list;
%page;
%include mlsys_address_types;
%page;
%include mlsys_deliver_info;
%page;
%include mlsys_parse_ca_options;

     end sdm_mbx_requests_;
