/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(89-04-07,Lee), approve(89-05-10,MCR8104),
     audit(89-07-18,LZimmerman), install(89-10-02,MR12.3-1079):
     phx19099, phx15783, Mail 457 - added message_type parameter to call to
     rdm_message_mark_mgr_$mark_current_message to catch use of "-odl" when
     defaulting to the current message.
  2) change(89-04-11,Lee), approve(89-05-10,MCR8104),
     audit(89-07-18,LZimmerman), install(89-10-02,MR12.3-1079):
     phx18564, phx17540, phx17353, Mail 446 - the new entry set_new_current_msg
     in rdm_mailbox_interface_ is now called when the current message is
     changed to guarantee that the new current message is never a deleted
     message; reformatting.
                                                   END HISTORY COMMENTS */


/* format: off */

/* The read_mail apply request */

/* Created:  1979 by Gary C. Dixon as an interim version (not capable of modifying the actual message) */
/* Modified: 3 June 1980 by G. Palter to implement suggestion #0263 -- the current message in read_mail should be set to
      the message being processed; thus, if an error occurs, the current message will remain on which the error occured */
/* Modified: 12 March 1982 by G. Palter to implement -include_deleted, -only_deleted, and -only_non_deleted and to fix a
      bug which caused -no_header to sometimes fail */
/* Modified: 28 September 1982 by G. Palter to add appropriate negative control arguments */
/* Modified: October 1983 by G. Palter as part of the conversion to the new mail system interface */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen */


rdm_apply_request_:
     procedure ();

	return;					/* not an entrypoint */


dcl  P_sci_ptr pointer parameter;
dcl  P_rdm_invocation_ptr pointer parameter;

dcl  original_formatted_message character (original_formatted_message_lth) unaligned
	based (original_formatted_message_ptr);
dcl  original_formatted_message_ptr pointer;
dcl  original_formatted_message_lth fixed binary (21);

dcl  formatted_message character (formatted_message_lth) unaligned based (formatted_message_ptr);
dcl  new_formatted_message character (new_formatted_message_lth) unaligned based (formatted_message_ptr);
dcl  formatted_message_ptr pointer;
dcl  (formatted_message_lth, new_formatted_message_lth) fixed binary (21);

dcl  argument character (argument_lth) unaligned based (argument_ptr);
dcl  argument_ptr pointer;
dcl  argument_lth fixed binary (21);
dcl  (n_arguments, first_command_argument_idx, argument_idx) fixed binary;

dcl  msg_spec_array (msg_spec_array_size) fixed binary based (msg_spec_array_ptr);
dcl  msg_spec_array_ptr pointer;
dcl  (msg_spec_array_size, msg_spec_count, msg_type) fixed binary;

dcl  (reverse_sw, delete_sw, header_sw, message_sw) bit (1) aligned;

dcl  (first_message_idx, last_message_idx, message_idx_increment, message_idx, message_number) fixed binary;
dcl  message_ptr pointer;

dcl  code fixed binary (35);

dcl  sys_info$max_seg_size fixed binary (19) external;

/* format: off */
dcl (error_table_$badopt, error_table_$inconsistent, error_table_$noarg, error_table_$smallarg,
     mlsys_et_$message_too_large)
	fixed binary (35) external;
/* format: on */

dcl  cu_$grow_stack_frame entry (fixed binary (19), pointer, fixed binary (35));
dcl  mlsys_utils_$format_message
	entry (pointer, pointer, pointer, fixed binary (21), fixed binary (21), fixed binary (35));
dcl  rdm_mailbox_interface_$delete_messages entry (pointer, bit (1) aligned);
dcl  rdm_mailbox_interface_$set_new_current_msg entry (ptr, fixed binary, fixed binary);
dcl  rdm_mailbox_interface_$mark_processed_and_acknowledge entry (pointer, fixed binary);
dcl  rdm_mailbox_interface_$read_message entry (pointer, fixed binary, pointer, fixed binary (35));
dcl  rdm_message_mark_mgr_$clear_marked_messages entry (pointer);
dcl  rdm_message_mark_mgr_$mark_current_message entry (pointer, fixed binary);
dcl  rdm_message_mark_mgr_$mark_messages
	entry (pointer, pointer, fixed binary (21), fixed binary, bit (*), fixed binary (35));
dcl  rdm_message_mark_mgr_$validate_message_specifier
	entry (pointer, pointer, fixed binary (21), fixed binary, bit (*), fixed binary (35));
dcl  ssu_$abort_line entry () options (variable);
dcl  ssu_$apply_request_util entry (pointer, fixed binary, pointer, fixed binary (21), fixed binary (21));
dcl  ssu_$arg_count entry (pointer, fixed binary);
dcl  ssu_$arg_ptr entry (pointer, fixed binary, pointer, fixed binary (21));
dcl  ssu_$get_request_name entry (pointer) returns (character (32));
dcl  ssu_$get_temp_segment entry (pointer, character (*), pointer);
dcl  ssu_$release_temp_segment entry (pointer, pointer);

dcl  cleanup condition;

dcl  (addr, currentsize, hbound, index, null) builtin;
%page;
apply_request:
     entry (P_sci_ptr, P_rdm_invocation_ptr);

	rdm_invocation_ptr = P_rdm_invocation_ptr;

	call ssu_$arg_count (P_sci_ptr, n_arguments);
	if n_arguments = 0 then
PRINT_USAGE_MESSAGE:
	     call ssu_$abort_line (P_sci_ptr, 0, "Usage: ^a {message_specifier} {-control_args} command_line",
		ssu_$get_request_name (P_sci_ptr));

	call rdm_message_mark_mgr_$clear_marked_messages (rdm_invocation_ptr);

	msg_spec_array_size = n_arguments;		/* set up the pointer array */
	call cu_$grow_stack_frame (currentsize (msg_spec_array), msg_spec_array_ptr, code);
	if code ^= 0 then call ssu_$abort_line (P_sci_ptr, code, "Too many message specifiers in request line.");

	msg_spec_count = 0;				/* no message specifiers yet */
	msg_type = NON_DELETED_MESSAGES;


/* Process arguments: if first argument isn't a message specifier, it starts the command line; otherwise, the first
   non-control argument starts the command line */

	header_sw = "1"b;				/* apply operation to the header ... */
	message_sw = "1"b;				/* ... and the text ... */
	delete_sw = "0"b;				/* ... and do not delete when done */
	reverse_sw = "0"b;				/* ... and in ascending order */

	argument_idx = 1;
	call ssu_$arg_ptr (P_sci_ptr, argument_idx, argument_ptr, argument_lth);
	call rdm_message_mark_mgr_$validate_message_specifier (rdm_invocation_ptr, argument_ptr, argument_lth,
	     ALL_MESSAGES, ""b, code);
	if code = 0 then do;			/* first argument is a message specifier */
	     call process_argument_as_spec ();
	     argument_idx = 2;			/* ... so start parsing at second argument */
	end;

	first_command_argument_idx = 0;		/* haven't found it yet */

	do argument_idx = argument_idx to n_arguments while (first_command_argument_idx = 0);

	     call ssu_$arg_ptr (P_sci_ptr, argument_idx, argument_ptr, argument_lth);

	     if index (argument, "-") = 1 then		/* a control argument */
		if (argument = "-include_deleted") | (argument = "-idl") | (argument = "-all") | (argument = "-a")
		     then
		     msg_type = ALL_MESSAGES;
		else if (argument = "-only_deleted") | (argument = "-odl") then msg_type = ONLY_DELETED_MESSAGES;
		else if (argument = "-only_non_deleted") | (argument = "-ondl") then msg_type = NON_DELETED_MESSAGES;

		else if (argument = "-reverse") | (argument = "-rv") then reverse_sw = "1"b;
		else if (argument = "-no_reverse") | (argument = "-nrv") then reverse_sw = "0"b;

		else if (argument = "-delete") | (argument = "-dl") then delete_sw = "1"b;
		else if (argument = "-no_delete") | (argument = "-ndl") then delete_sw = "0"b;

		else if (argument = "-header") | (argument = "-he") then header_sw = "1"b;
		else if (argument = "-no_header") | (argument = "-nhe") then header_sw = "0"b;

		else if argument = "-text" then message_sw = "1"b;
		else if argument = "-no_text" then message_sw = "0"b;

		else if (argument = "-message") | (argument = "-msg") then do;
		     if argument_idx = n_arguments then
			call ssu_$abort_line (P_sci_ptr, error_table_$noarg,
			     "A message specifier must follow ""^a"".", argument);
		     argument_idx = argument_idx + 1;
		     call process_argument_as_spec ();
		end;

		else call ssu_$abort_line (P_sci_ptr, error_table_$badopt, """^a""", argument);

	     else first_command_argument_idx = argument_idx;
	end;

	if first_command_argument_idx = 0 then go to PRINT_USAGE_MESSAGE;
						/* no command line present */

	if ^header_sw & ^message_sw then
	     call ssu_$abort_line (P_sci_ptr, error_table_$inconsistent, """-no_text"" and ""-no_header""");


/* Mark appropriate messages */

	formatted_message_ptr,			/* for cleanup handler */
	     original_formatted_message_ptr = null ();

	on condition (cleanup)
	     begin;
	     if original_formatted_message_ptr ^= null () then
		call ssu_$release_temp_segment (P_sci_ptr, original_formatted_message_ptr);
	     if formatted_message_ptr ^= null () then call ssu_$release_temp_segment (P_sci_ptr, formatted_message_ptr);
	end;

	call ssu_$get_temp_segment (P_sci_ptr, "original-message", original_formatted_message_ptr);
	call ssu_$get_temp_segment (P_sci_ptr, "apply-buffer", formatted_message_ptr);

	if msg_spec_count = 0 then			/* defaults to the current message */
	     call rdm_message_mark_mgr_$mark_current_message (rdm_invocation_ptr, msg_type);
						/* phx19099 RL - "-odl" will be caught if specified during marking of current message */
	else call process_msg_specs ();

	if reverse_sw then do;			/* process messages in opposite of marked order */
	     first_message_idx = marked_chain.n_messages;
	     last_message_idx = 1;
	     message_idx_increment = -1;
	end;
	else do;					/* process messages in the order marked */
	     first_message_idx = 1;
	     last_message_idx = marked_chain.n_messages;
	     message_idx_increment = 1;
	end;


/* Process the messages */

	do message_idx = first_message_idx to last_message_idx by message_idx_increment;
	     message_number = marked_chain.messages (message_idx);

/* phx18564 RL - set current message to message_number only if it is not a deleted message;
   otherwise current set to next non-deleted message after message_number */
	     call rdm_mailbox_interface_$set_new_current_msg (rdm_invocation_ptr, message_number,
		rdm_invocation.current_message);	/* each message is current as it's processed */

	     call rdm_mailbox_interface_$read_message (rdm_invocation_ptr, message_number, message_ptr, code);
	     if code ^= 0 then
		call ssu_$abort_line (P_sci_ptr, code, "Reading message #^d from ^a.", message_number,
		     rdm_invocation.mailbox_name);

	     call prepare_message_for_apply ();		/* make two formatted copies of the message */

	     call ssu_$apply_request_util (rdm_invocation.sci_ptr, first_command_argument_idx, formatted_message_ptr,
		original_formatted_message_lth, new_formatted_message_lth);

	     if new_formatted_message_lth ^= original_formatted_message_lth then
MESSAGE_MODIFIED_ERROR:				/* messages can not be modified */
		call ssu_$abort_line (P_sci_ptr, 0,
		     "This request can not be used to modify the messages in a mailbox.");
	     if new_formatted_message ^= original_formatted_message then go to MESSAGE_MODIFIED_ERROR;

	     call rdm_mailbox_interface_$mark_processed_and_acknowledge (rdm_invocation_ptr, message_number);
	end;


/* Clean up */

	if original_formatted_message_ptr ^= null () then
	     call ssu_$release_temp_segment (P_sci_ptr, original_formatted_message_ptr);
	if formatted_message_ptr ^= null () then call ssu_$release_temp_segment (P_sci_ptr, formatted_message_ptr);

	if delete_sw then				/* user wants the messages deleted */
	     call rdm_mailbox_interface_$delete_messages (rdm_invocation_ptr, "0"b);

	return;
%page;
/* Remembers that the current argument is a message specifier */

process_argument_as_spec:
     procedure ();

	if msg_spec_count >= hbound (msg_spec_array, 1) then
	     call ssu_$abort_line (P_sci_ptr, 0, "Too many message specifiers in request.");
						/* can't ever happen */

	msg_spec_count = msg_spec_count + 1;
	msg_spec_array (msg_spec_count) = argument_idx;

	return;

     end process_argument_as_spec;



/* Processes the array of message specifiers by marking all appropriate messages */

process_msg_specs:
     procedure ();

dcl  idx fixed binary;

	do idx = 1 to msg_spec_count;
	     call ssu_$arg_ptr (P_sci_ptr, msg_spec_array (idx), argument_ptr, argument_lth);

	     call rdm_message_mark_mgr_$mark_messages (rdm_invocation_ptr, argument_ptr, argument_lth, msg_type, ""b,
		code);
	     if code ^= 0 then			/* above call should abort on errors */
		call ssu_$abort_line (P_sci_ptr, code);
	end;

	return;

     end process_msg_specs;
%page;
/* Prepares the message for the applied command line:  Two formatted copies of the message are created in order to check
   that the command line does not modify the message as rewriting the message is not supported in this release */

prepare_message_for_apply:
     procedure ();

dcl  1 local_fmo aligned like format_message_options;

	local_fmo.version = FORMAT_MESSAGE_OPTIONS_VERSION_1;
	local_fmo.line_length = 72;			/* make the header look reasonable to the user */

	if header_sw then				/* include the header */
	     local_fmo.envelope_formatting_mode, local_fmo.header_formatting_mode,
		local_fmo.redistributions_list_formatting_mode = DEFAULT_FORMATTING_MODE;
	else local_fmo.envelope_formatting_mode, local_fmo.header_formatting_mode,
		local_fmo.redistributions_list_formatting_mode = NONE_FORMATTING_MODE;

	local_fmo.include_body = message_sw;		/* user's controls whether the text is present */

	original_formatted_message_lth = 0;		/* nothing used yet */
	call mlsys_utils_$format_message (message_ptr, addr (local_fmo), original_formatted_message_ptr,
	     (4 * sys_info$max_seg_size), original_formatted_message_lth, code);
	if code = error_table_$smallarg then code = mlsys_et_$message_too_large;
	if code ^= 0 then
	     call ssu_$abort_line (P_sci_ptr, code, "Preparing message #^d for processing.", message_number);

	formatted_message_lth = original_formatted_message_lth;
	formatted_message = original_formatted_message;	/* make the actual copy given to the command line */

	return;

     end prepare_message_for_apply;
%page;
%include rdm_invocation;
%page;
%include rdm_message_list;
%page;
%include rdm_message_chains;
%page;
%include mlsys_format_options;

     end rdm_apply_request_;
