/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

sort_merge_initiate:  proc(keys_ptr, exits_ptr, user_out_sw_par, code);
dcl (keys_ptr  ptr,			/*   Pointer to keys substructure  (Input)	   */
     exits_ptr ptr,			/*   Pointer to exits substructure  (Input)	   */
     user_out_sw_par    char(*), 	/*   Destination of Sort Report:  (Input)
				     ""       = normal (user_output);
				     "-bf"    = none (discard);
				     "<other>" = switchname.     */
     code  fixed bin(35) ) parameter;	/*   Status code  (Output)       */

/*   EXTERNAL ENTRIES     */
dcl  convert_status_code_  entry(fixed bin(35), char(8) aligned, char(100) aligned);
dcl  get_group_id_ entry returns(char(32));
dcl  get_pdir_ entry returns(char(168) aligned);
dcl  hcs_$make_seg  entry(char(*) aligned, char(*) aligned, char(*), fixed bin(5), ptr, fixed bin(35));
dcl  ioa_$ioa_stream entry options(variable);

dcl  sort_build_keys entry(ptr, fixed bin(35));
dcl  sort_convert_internal$convert_datatype entry(ptr, fixed bin(17), fixed bin(17));
/*1*/ dcl  sort_$noexit entry external;

/*   EXTERNAL STATIC     */

% include sort_ext;

dcl  sys_info$max_seg_size fixed bin(35) external static;
dcl (error_table_$bad_arg,
     error_table_$fatal_error) fixed bin(35) external static;

/*   INTERNAL STATIC  (constants only)   */
dcl (on bit(1) init("1"b),
     off bit(1) init("0"b) ) internal static;
dcl  keys_number_max fixed bin(17) init(32) internal static;	/*   Currently up to 32 keys.   */	
dcl  keys_version_max fixed bin(17) init(1)  internal static;	/*   Currently 1 version only   */
dcl  exits_version_max fixed bin(17) init(1) internal static;	/*   Currently 1 version only   */

/*   AUTOMATIC and BASED     */
% include sort_sd;

dcl  work_ptr ptr;
dcl  keys_sw    bit(1);
dcl  arg_err_sw bit(1);
dcl  fatal_sw bit(1);
dcl  verify_keys_code fixed bin(35),
     verify_exits_code fixed bin(35);
dcl  hcs_code fixed bin(35),
     shortinfo char(8) aligned,
     longinfo char(100) aligned;


/*   Start.   */

     rec_ptr_a,
     rec_ptr_b = null();
     code = 0;
     arg_err_sw = off;
     fatal_sw = off;
     compares_counter,
     presort_compares,		/*   Not used by Merge.   */
     merge_compares = 0;
     user_id = get_group_id_();
     max_rec_length = (sys_info$max_seg_size - 100)*4;
		/*   Must be set before call process_key_desc.   */
     release_count = 0;		/*   not used by Merge.   */
     return_count = 0;

/*   keys_ptr:   */
     call process_key_desc;

/*   exits_ptr:   */
     call initialize_exits;

/*   Create temporary segments for output_record exit processing.   */
     if output_record_exit_sw = 1 then do;
	call hcs_$make_seg(get_pdir_(), unique_prefix||"sort_out_a_", "", 8+2, rec_ptr_a, hcs_code);
	if rec_ptr_a = null() then do;
	     call unable_error("create", "sort_out_a_");
	     end;
	call hcs_$make_seg(get_pdir_(), unique_prefix||"sort_out_b_", "", 8+2, rec_ptr_b, hcs_code);
	if rec_ptr_b = null() then do;
	     call unable_error("create", "sort_out_b_");
	     end;
	end;

/*   Test if keys and compare are both present or are both absent:   */
     if keys_sw = off & compare_sw = 0 then
	do;
	if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
		"^a:  Neither key descriptions nor user compare exit procedure specified.", whoami);
	arg_err_sw = on;
	end;
     if keys_sw = on & compare_sw = 1 then do;
	if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
		"^a:  Both key descriptions and user compare exit procedure specified.", whoami);;
	arg_err_sw = on;
	end;

/*   report:     */
     if user_out_sw = "" then report_sw = "01"b;		/*   Report suppressed.   */
     else report_sw = "00"b;				/*   Produce report.   */

     /*   Test for errors detected:   */
      if arg_err_sw = on then code = error_table_$bad_arg;

     if fatal_sw = on then code = error_table_$fatal_error;

exit:
     return;	/*   To caller (sort_initiate or merge_initiate).   */


initialize_exits: proc;
/*   Set all exit switches to off (0).   */
     compare_sw,
     input_record_exit_sw,		/*   Not used by Merge.   */
     output_record_exit_sw = 0;
     if exits_ptr = null() then return;
     work_ptr = exits_ptr;
     call verify_exits(work_ptr, verify_exits_code);
     if verify_exits_code ^= 0 then do;
	arg_err_sw = on;
	return;
	end;
/*   exits substructure is valid:  set entry variables.   */
/*1*/     if  exits.compare_exit ^= sort_$noexit then
	do;
	sort_ext$sort_compare_exit = exits.compare_exit;
	compare_sw = 1;
	end;
/*1*/     if exits.input_record_exit ^= sort_$noexit then do;
	sort_input_record_exit = exits.input_record_exit;
	input_record_exit_sw = 1;
	if substr(whoami, 1, 5) = "merge" then do;
	     arg_err_sw = on;
	     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
		"^a:  Input_record exit not permitted.",
		whoami);
	     end;
	end;
/*1*/     if exits.output_record_exit ^= sort_$noexit then do;
	sort_output_record_exit = exits.output_record_exit;
	output_record_exit_sw = 1;
	end;
     return;
end initialize_exits;


verify_exits:  proc(work_ptr, code);
/*   Validate exits substructure.   */
dcl (work_ptr ptr,
     code fixed bin(35) ) parameter;

     if exits.version < 0 | exits.version > exits_version_max then do;
	code = 1;
	if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
		"^a:  Exits structure has invalid version number ^d.  Must be > 0 and <_ ^d.",
		whoami, exits.version, exits_version_max);
	end;
     else code = 0;
end verify_exits;

process_key_desc: proc;
dcl  code fixed bin(35);
     keys_sw = off;
     min_rec_length = 0; 	/*   For sort_$release or merge_$return, in case no keys were specified   */
     if keys_ptr = null() then return;
     work_ptr = keys_ptr;
     keys_sw = on;
     call verify_keys(work_ptr, verify_keys_code);
     if verify_keys_code ^= 0 then do;
	arg_err_sw = on;
	return;
	end;
/*   Convert keys substructure into faster form.   /*
/*   Separate arrays for (datatype, word_offset, bit_offset, len, rv)
and with appropriate data types and with ranges of (0:n-1).   */

     call sort_build_keys(keys_ptr, code);
     if code ^= 0 then do;
	arg_err_sw = on;
	end;
end process_key_desc;


verify_keys:  proc(work_ptr, code);
/*   Validate keys substructure.   */
dcl (work_ptr ptr,
     code fixed bin(35) ) parameter;

dcl  i fixed bin,
     typecode fixed bin (17);

     code = 0;
     call check_structure;
     if code = 1 then return;
     do i = 1 to keys.number;
	call sort_convert_internal$convert_datatype(work_ptr, i, typecode);
	if typecode = 0 then do;
	     code = 1;
	     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw, 
		"^a:  Key ^d has invalid data type ""^a"".",
		whoami, i, datatype(i));
	     end;
	if len(i) <= 0 then do;
	     code = 1;
	     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
		"^a:  Key ^d has invalid length or precision ^d.  Must be > 0.",
			whoami, i, len(i));
	     end;
	if word_offset(i) < 0 then do;
	     call error(fixed(word_offset(i), 35), "word_offset", "", i);
	     end;
	if bit_offset(i) < 0 | bit_offset(i) > 35 then do;
	     call error(fixed(bit_offset(i), 35), "bit offset", " and <_ 35", i);
	     end;
	if rv(i) ^= "dsc" & rv(i) ^= "" then do;
	     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
		"^a:  Key ^d has invalid descending argument ""^a"".  Must be ""dsc"" or """".",
			whoami, i, rv(i));
	     code = 1;
	     end;
	end;	/*   of do   */
     return;

check_structure:  proc;
   if keys.version <= 0 | keys.version > keys_version_max then
	do;
	code = 1;
	if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
		"^a:  Keys structure has invalid version number ^d.  Must be > 0 and <_ ^d.",
		whoami, keys.version, keys_version_max);
	end;
     if keys.number <=0  |  keys.number > keys_number_max then
	do;
	code = 1;
	if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
		"^a:  Keys structure has invalid number of keys ^d.  Must be > 0 and <_ ^d.",
		whoami, keys.number, keys_number_max);
	end;
end check_structure;

error:  proc(value, literal, and, index);
dcl (value fixed bin(35),
     literal char(*),
     and char(*),
     index fixed bin(17) ) parameter;
     code = 1;
     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw, 
		"^a:  Key ^d has invalid ^a ^d.  Must be >_ 0^a.",
		whoami, index, literal, value, and);
end error;
end verify_keys;


unable_error:  proc(action, name);
dcl (action,
     name) char(*) parameter;
     fatal_sw = on;
     call convert_status_code_(hcs_code, shortinfo, longinfo);
     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
		"^a:  ^a  Unable to ^a temporary segment [pd]>^a^a",
		whoami, longinfo, action, unique_prefix, name);
end unable_error;

end sort_merge_initiate;
