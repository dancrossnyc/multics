/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
%;
/* ***************************************
   *				 *
   *				 *
   * Copyright (c) 1975, 1976, 1977 by   *
   * Honeywell Information Systems, Inc. *
   *				 *
   *				 *
   *************************************** */
sort_input_proc: proc(input_proc_code);

/*   EXTERNAL ENTRIES   */
dcl  ioa_$rsnnl entry options(variable);
dcl  iox_$attach_ioname entry(char(*), ptr, char(*), fixed bin(35));
dcl  iox_$open entry(ptr, fixed bin, bit(1) aligned, fixed bin(35));
dcl  iox_$read_record entry(ptr, ptr, fixed bin(21), fixed bin(21), fixed bin(35));
dcl  iox_$close entry(ptr, fixed bin(35));
dcl  iox_$detach_iocb entry(ptr, fixed bin(35));
dcl  iox_$destroy_iocb entry(ptr, fixed bin(35));
dcl  sub_err_ entry options(variable);


/*   EXTERNAL STATIC   */

%include sort_ext;

dcl (error_table_$not_detached,
     error_table_$not_attached,
     error_table_$not_closed,
     error_table_$no_record,
     error_table_$not_open,
     error_table_$short_record,
     error_table_$long_record,
     error_table_$end_of_info,
     error_table_$out_of_sequence,
     error_table_$request_not_recognized,
     error_table_$fatal_error) fixed bin(35) external;

/*   PARAMETERS AND AUTOMATIC   */
dcl  input_proc_code fixed bin(35) parameter;

dcl  in_switch char(32),
     in_switch_length fixed bin(17),
     iox_code fixed bin(35),
     sort_code fixed bin(35),
     in_iocb_ptr ptr,
     in_mode fixed bin,
     seq_input fixed bin init(4),
     no_extend bit(1) aligned init("0"b),
     in_buff_len fixed bin(21) init(sort_ext$max_rec_length),      
     in_rec_len fixed bin(21),
     in_attach_desc char(176);
dcl  this_file_read_count fixed bin(35);
dcl  sort_release_ptr ptr;
dcl  sort_release_len fixed bin (21);
dcl  retval  fixed bin(35);
dcl  cleanup condition;


/*   Start.   */
     input_proc_code = 0;
     in_iocb_ptr = null();
     on cleanup call cleanup_proc;
     call ioa_$rsnnl(unique_prefix||"sort_in_^d_", in_switch, in_switch_length, curr_input_file_num);
					/*   Convert from fixed binary to character string.   */
/*   Attach.   */
     if curr_input_file_attach = "" then in_attach_desc = "vfile_ "||curr_input_file_name;
     else in_attach_desc = curr_input_file_attach;
     call iox_$attach_ioname(in_switch, in_iocb_ptr, in_attach_desc, iox_code);
     if iox_code ^= 0 then do;
	/*   error_table_$not_detached   */
	call iox_error("Attaching");
          end;
/*   Open.   */
     in_mode = seq_input;
     call iox_$open(in_iocb_ptr, in_mode, no_extend, iox_code);
     if iox_code ^= 0 then do;
	/*   error_table_$not_attached
	                 $not_closed   */
	call iox_error("Opening");
	end;
     this_file_read_count = 0;
/*   Read and release.   */
read:  call iox_$read_record(in_iocb_ptr, in_buff_ptr, in_buff_len, in_rec_len, iox_code);
     if iox_code = error_table_$end_of_info then go to close;
     if iox_code ^= 0 then do;
	/*   error_table_$no_record
                           $long_record   */
	call iox_error("Reading");
          end;
     this_file_read_count = this_file_read_count + 1;
     sort_release_ptr = in_buff_ptr;			/* save to pass because sort_release can change the contents of it */
     sort_release_len = in_rec_len;
     call sort_release(sort_release_ptr, sort_release_len, sort_code);
     if sort_code ^= 0 then do;
	/*   release errors   */
	if sort_code = error_table_$long_record | sort_code = error_table_$short_record then do;
	     if curr_input_file_attach = "" then
	     call sub_err_(sort_code, whoami, "c", null(), retval,
		"Record ^d of input file ^d, file name ^a",
			this_file_read_count, curr_input_file_num, curr_input_file_name);
	     else call sub_err_(sort_code, whoami, "c", null(), retval,
		"Record ^d of input file ^d, attach description ^a",
			this_file_read_count, curr_input_file_num, curr_input_file_attach);
	     input_proc_code = error_table_$fatal_error;
	     call cleanup_proc;
	     go to exit;
	     end;
	else if sort_code = error_table_$out_of_sequence then do;
	     call sub_err_(sort_code, whoami, "c", null(), retval,
		"Calling sort_$release.");
	     call cleanup_proc;
	     go to exit;
	     end;
	else do;
	     input_proc_code = sort_code;
	     call cleanup_proc;
	     go to exit;
	     end;
          end;
     go to read;
/*   Close.   */
close:
     read_count = read_count + this_file_read_count;
     call iox_$close(in_iocb_ptr, iox_code);
     if iox_code ^= 0 then do;
	/*   error_table_$not_open   */
	call iox_error("Closing");
	end;
/*   Detach.   */
     call iox_$detach_iocb(in_iocb_ptr, iox_code);
     if iox_code ^= 0 then do;
	/*   error_table_$not_attached
		       $not_closed   */
	call iox_error("Detaching");
	end;
/*   Destroy iocb.   */
     call iox_$destroy_iocb(in_iocb_ptr, iox_code);
     in_iocb_ptr = null();
/*   no errors returned?   */
exit:
     return;		/*   to driver   */
   release:	entry(pt,fb,fb1);
	dcl	pt ptr,
		fb fixed bin(21),
		fb1 fixed bin(35);

	    sort_release_ptr = pt;
	    sort_release_len = fb;
	    call sort_release(sort_release_ptr,sort_release_len,fb1);
	    return;
		/*						*/
%;
sort_release:		proc(relp,relbl,ec);
			/*    EXTERNAL ENTRIES    */
dcl	hcs_$make_seg  entry(char(*) aligned, char(*) aligned, char(*), fixed bin(5), ptr, fixed bin(35)),
	sort_presort		entry(fixed bin(35)) ext;
			/*    EXTERNAL STATIC    */
			/*  PARAMETERS,AUTOMATIC & BASED  */
	dcl	presort_code fixed bin(35);
	dcl	retval fixed bin(35);
	dcl	(relp ptr,
		relbl fixed bin(21)) parameter;
dcl  		hcs_code fixed bin(35);
%include sort_common;
	dcl	input_rec char(262144) based(relp);
		/*  following declarations are for input record exit  */
	dcl	hold_ptr ptr int static,
		hold_len fixed bin(24) int  static,
		rec_len fixed bin(21) int static,
		rec_ptr ptr int static,
		action fixed bin int static,
		close_exit bit(1) int static;

	ec = 0;   /*    initially set error code to 0  */

		/*  test state code  */
	if state ^= 3 then     /*  initiate not yet called-sequence error  */
	    do;
		ec = error_table_$out_of_sequence;
		return;
	    end;

		/*  test for short and long record length  */
	if relbl > max_rec_length then  /*  record too long  */
	    do;
		ec = error_table_$long_record  ;
		return;
	    end;
	if relbl < min_rec_length then    /*  record too short  */
	    do;
		ec = error_table_$short_record;
		return;
	    end;
	if ssi=0 then do;	/* This is the initial call to RELEASE.  */
	call hcs_$make_seg(wf_dir_name, unique_prefix||"sort_work.SI", "", 8+2,  /*  rw  */ sip, hcs_code);
	if hcs_code ^= 0 then do;
	     call hcs_error("create", "SI");
	     return;
	     end;
	     call hcs_$make_seg(wf_dir_name, unique_prefix||"sort_work.SR", "", 8+2, srp, hcs_code);
	if hcs_code ^= 0 then do;
	     call hcs_error("create", "SR");
	     return;
	     end;
	call hcs_$make_seg(wf_dir_name, unique_prefix||"sort_work.SS", "", 8+2, ssp, hcs_code);
	if hcs_code ^= 0 then do;
	     call hcs_error("create", "SS");
	     return;
	     end;
	mii = 0;
	ssi = 1;
	sii = 0;
	end;
	if (((relbl+ssi)>max1) & (mii ^= 0)) | (sii>max3) | (relbl+ssi) > max2 then do;
					/* Sort the accumulated records. */
	call sort_presort(presort_code);
	if presort_code ^= 0 then do;
	     ec = presort_code;
	     return;
	     end;

	/* Initialize the sort tables for next input. */
	sii = 0;
	ssi = 1;
	end;
 rep:	if input_record_exit_sw ^= 0 then    /*  test for input record exit  */
	    do;
	      if close_exit = "1"b then if relp=null()  /* called from commence with close exit on */
		then return;
		else go to norm;
	      rec_ptr = relp;    /*  use input's input buffer  */
	      rec_len = relbl;
	      action = 0;
	      call sort_input_record_exit(rec_ptr,rec_len,action,close_exit);
	      if rec_ptr=null() & action^=3 then return;
		/*  called from commence and no inserted record  */
	      if  action = 0 then
		do;    /*  accept current record  */
		 call ck_len(rec_len,"altered");
		 relp = rec_ptr;  /*  set record to be accepted  to the one handed  back by user  */
		 relbl = rec_len;
		 go to norm;
		end;
	      if action = 1 then   /*  delete the current record  */
		do;
		 input_rec_deleted = input_rec_deleted+1;  /*  increment deleted count  */
		 return;
		end;
	      if  action = 3 then
		do;    /*  insert a new record  */
		 call ck_len(rec_len,"inserted");
		 hold_ptr = relp;  /*  save old current record and length  */
		 hold_len = relbl;
		 relp = rec_ptr;    /*  set release pointer to record to be inserted  */
		 relbl = rec_len;
		 input_rec_inserted = input_rec_inserted+1;  /*  increment inserted count  */
		 go to norm;
		end;
	      else do;    /*  illegal action code  */
		   call sub_err_(error_table_$request_not_recognized, whoami, "c", null(), retval,
			"Invalid action = ^d by user input_record exit procedure.",action);
		   ec=error_table_$fatal_error;
		   goto exit;
		 end;
	    end;
		/*  following will set up double word alignment mechanism  */
 norm:	ssi=divide(ssi + 4 -1 +7,8,24) *8 + 1;
     if compare_sw ^= 0 then do;
	w_p = addr(substr(ssp->S,ssi,1));
	w_p = ptr(w_p,fixed(rel(w_p),21)-1);   /*  move back one word  */
	fb = relbl;    /*  set length of  record  */
     end;
	/* Move the input record into the sort storage area. */
	substr(ssp->S,ssi,relbl)=substr(input_rec,1,relbl);  /*  relfb changed to 1-always start with first pos  */
	sii=sii+1;	/* Count of the records for the next sort. */
	srp->R.pt(sii)=ssi;	/* Location in sort storage segment of the record. */
	srp->R.ln(sii)=relbl;	/* The length of the record. */
	release_count = release_count +1;    /*  increment release count  */
	ssi=ssi+relbl;	/* Update the next location
			   available in the sort storage segment. */
	sip->I(sii)=sii;	/* Record index for sort. */
	if input_record_exit_sw ^= 0 & action = 3 then
	    do;  /*  input record  switch on and just   inserted a record  */
	         /*  don't get another record  */
	      relp = hold_ptr;  /*  reset current record to old current record  */
	      relbl = hold_len;
	      action  = 0;  /*  incase close exit is  on next  time through  */
	      go to rep;
	    end;
 exit:	return;


 ck_len:      proc(length,action_type);
		    /*  this will check the length handed to it by the input record exit
			code-if it is too long it will write an error mesage and exit with
			a fatal error code						*/
		/*						*/
	dcl	sub_err_ entry options(variable),
		length fixed bin(21) parameter,
		action_type char(*) parameter;
	    if length > max_rec_length then
		do;    /*  record too long  */
		   call sub_err_(error_table_$long_record,whoami, "c", null(), retval,
			"Record ^a by user input_record exit procedure.",action_type);
		   ec=error_table_$fatal_error;
		   goto exit;
		end;
	    if length <min_rec_length then
		do;    /*  record too short  */
		   call sub_err_(error_table_$short_record,whoami, "c", null(), retval,
			"Record ^a by user input_record exit procedure.",action_type);
		   ec=error_table_$fatal_error;
		   goto exit;
		end;
 end ck_len;
hcs_error:  proc(action, name);
dcl (action,
     name) char(*) parameter;
     call sub_err_(hcs_code, whoami, "c", null(), retval,
		"Unable to ^a temporary segment ^a>^a",
		action, before(wf_dir_name, " "), unique_prefix||name);
     ec = error_table_$fatal_error;
end hcs_error;
end sort_release;

iox_error:  proc(action);
dcl  action char(*) parameter;
	input_proc_code = error_table_$fatal_error;
	if curr_input_file_attach = "" then
	     call sub_err_(iox_code, whoami, "c", null(),retval,
		"^a input file ^d, file name ^a",
			action, curr_input_file_num, curr_input_file_name);
	else call sub_err_(iox_code, whoami, "c", null(), retval,
		"^a input file ^d, attach description ^a",
			action, curr_input_file_num, curr_input_file_attach);
	call cleanup_proc;
	go to exit;
end iox_error;


cleanup_proc:  proc;
     if in_iocb_ptr = null() then return;
     call iox_$close(in_iocb_ptr, iox_code);
     call iox_$detach_iocb(in_iocb_ptr, iox_code);
     call iox_$destroy_iocb(in_iocb_ptr, iox_code);
end cleanup_proc;

end sort_input_proc;
