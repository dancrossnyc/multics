/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
%;
/* ***************************************
   *				 *
   *				 *
   * Copyright (c) 1975, 1976 by         *
   * Honeywell Information Systems, Inc. *
   *				 *
   *				 *
   *************************************** */
/*   ENTRY external to the Sort.
     Used by procedures which drive the Sort themselves.   */

/* Coded in ancient times by who knows */
/* Modified 4 Nov 1983 by C Spitzer. phx9857: work files bigger than 255 pages if input file is big enough
			       phx9927: make segs multiples of 64 pages to prevent ASTE thrashing */

initiate:	proc(temp_dir, keys_ptr, exits_ptr, user_out_sw_par, file_size_par, code);

/*   PARAMETERS   */
dcl (temp_dir char(*),		/*   Directory to contain work files:
				     "" = process directory;
				     relative or absolute path name.     */
     keys_ptr  ptr,			/*   Pointer to keys substructure	   */
     exits_ptr ptr,			/*   Pointer to exits substructure	   */
     user_out_sw_par    char(*), 	/*   Destination of Sort Report:
				     ""       = normal (user_output);
				     "-bf"    = none (discard);
				     "<other>" = switchname.     */
     file_size_par  float bin(27),	/*   File size passed by caller (sort, sort_, or user) -
				     millions of bytes  (Input).   */
     code      fixed bin(35)  	/*   Status code   		*/
    ) parameter;

/*   EXTERNAL ENTRIES     */
dcl  convert_status_code_  entry(fixed bin(35), char(8) aligned, char(100) aligned);
dcl  expand_path_ entry(ptr, fixed bin, ptr, ptr, fixed bin(35));
dcl  get_pdir_ entry returns(char(168) aligned),
     get_wdir_ entry returns(char(168) aligned);
dcl  ioa_$ioa_stream entry options(variable);
dcl  unique_chars_ entry(bit(*)) returns(char(15));

dcl  sort_merge_initiate  entry(ptr, ptr, char(*), fixed bin(35));

/*   EXTERNAL STATIC     */

% include sort_ext;

dcl  sys_info$max_seg_size fixed bin(35) external static;
dcl (error_table_$pathlong,
     error_table_$bad_arg,
     error_table_$out_of_sequence) fixed bin(35) external static;

/*   INTERNAL STATIC  (constants only)   */
dcl (on bit(1) init("1"b),
     off bit(1) init("0"b) ) internal static;

/*   AUTOMATIC and BASED     */
dcl  file_size_temp  fixed bin(71);	/*   Temporary location for file size - in bytes   */
dcl  merge_order fixed bin(35),
     string_size fixed bin(35);

dcl  state_code fixed bin(35);
dcl  arg_err_sw bit(1);
dcl  expand_path_code fixed bin(35);
dcl  shortinfo char(8) aligned,
     longinfo char(100) aligned;
dcl  keys_ptr_pass ptr,		/*   Arguments passed to sort_merge_initiate.   */
     exits_ptr_pass ptr,
     user_out_sw_pass char(32),
     s_m_init_code fixed bin(35);
dcl  (addr, before, ceil, divide, index, length, min, null, sqrt) builtin;

/*   Start.   */

     call state_test(state_code);
     if state_code ^= 0 then do;
	code = error_table_$out_of_sequence;
	return;		/*   to caller without resetting state variable   */
	end;
     state = 3;
     if user_out_sw_par = "" then user_out_sw = "user_output";
     else if user_out_sw_par = "-bf" | user_out_sw_par = "-brief" then user_out_sw = "";
     else user_out_sw = user_out_sw_par;
     merge_order = 0;		/*   Merge order not specified.   */
     string_size = 0;		/*   String_size not specified.   */
     time_sw = off;			/*   Timing not specified.   */
     debug_sw = off;		/*   Debug optionn not specified.   */
     terminate_print_sw = on;		/*   sort_terminate should print Sort Report.   */

common_start:
     code = 0;
     file_size_temp = file_size_par * 10**6 + 1;
     arg_err_sw = off;
     old_input_file_num = 1;		/*   For sort_presort's illegal_procedure handler.   */

     call initialize_presort;

     keys_ptr_pass = keys_ptr;
     exits_ptr_pass = exits_ptr;
     user_out_sw_pass = user_out_sw;
     s_m_init_code = 0;
     call sort_merge_initiate(keys_ptr_pass, exits_ptr_pass, user_out_sw_pass, s_m_init_code);

/*   temp_dir:   */
     call get_wf_dir_name;

exit:
     if s_m_init_code ^= 0 then code = s_m_init_code;
     if arg_err_sw = on then code = error_table_$bad_arg;
     return;


/*   ENTRY internal to the Sort; called only by sort_ subroutine.   */
initiate_private:  entry(temp_dir, keys_ptr, exits_ptr, user_out_sw_par, file_size_par,
			code, merge_order_par, string_size_par);
dcl (merge_order_par  fixed bin(35),			/*   Way of the merge.   */
     string_size_par  fixed bin(35) ) parameter;		/*   Presort string size in bytes.   */
     /*   user_out_sw_par ignored; sort_ has already set user_out_sw properly.   */
     /*   time_sw, debug_sw already set.   */
     state = 3;
     terminate_print_sw = off;	/*   sort_ should print Sort Report.   */
     merge_order = merge_order_par;
     string_size = string_size_par;
     go to common_start;


state_test:  proc(state_code);
dcl  state_code fixed bin(35) parameter;
     if state = 0
	| (state = 8 & index(whoami, "_") ^= 0) 		/*   subroutine was called last   */
	then do;
	unique_prefix = before(unique_chars_("0"b), " ")||".";
	whoami = "sort_";
	state_code = 0;
	end;
     else do;		/*   Error   */
	state_code = 1;
	return;
	end;
end state_test;


get_wf_dir_name: proc;

     if temp_dir = "" | temp_dir = "-pd" | temp_dir = "-process_directory" | temp_dir = "-process_dir" then
	/*   process directory   */
	do;
	wf_dir_name = get_pdir_();
	end;

     else if temp_dir = "-wd" | temp_dir = "-working_directory" | temp_dir = "-working_dir" then
	/*   current working directory   */
	do;
	wf_dir_name = get_wdir_();
	end;

     else
	     /*   Convert to absolute path name.   */
	do;
	call expand_path_(addr(temp_dir), length(temp_dir),
		        addr(wf_dir_name), null(), expand_path_code);
	if expand_path_code ^= 0 then
	     do;
	     /*   error_table_$badpath
			  $dirlong
			  $lesserr
			  $pathlong   */
		call convert_status_code_(expand_path_code, shortinfo, longinfo);
	     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw, 
		"^a:  ^a  Temporary directory pathname ^a",
		whoami, longinfo, temp_dir);
	     arg_err_sw = on;
	     return;
	     end;
	end;
     wf_full_name = before(wf_dir_name, " ")||">"||unique_prefix||"sort_work.";
     if index(wf_full_name, " ") = 0 | index(wf_full_name, " ") > 160 then do;
	/*   Error: work file directory name potentially too long   */
	call convert_status_code_(error_table_$pathlong, shortinfo, longinfo);
	if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw, 
		"^a:  ^a  Pathname and prefix for work files ^a",
		whoami, longinfo, wf_full_name);
	arg_err_sw = on;
	end;
end get_wf_dir_name;

initialize_presort:	proc;
	    /*  this procedure will initialize the necessary variables to perform the sort  */
	disaster2 = 0;   /*  return state -  =first call, 1 =later call, 2 = last call */
	mii = 0;		/*   number of merge strings produced   */
	sip = null();	/*   for sort_cleanup_proc in case release not called   */
	ssi = 0;
	sii = 0;
	max1 = (sys_info$max_seg_size -100)*4;
	max3 = divide(sys_info$max_seg_size - 100, 3, 24, 0);
	max4 = 999;		/*   maximum merge order   */
	call compute_string_size;
end initialize_presort;


compute_string_size:  proc;
dcl MAX_WORK_SEGMENT_SIZE_64K fixed bin (21) int static options (constant) init (4096*64);     /* 64 pages */
dcl MAX_WORK_SEGMENT_SIZE_255K fixed bin (21) int static options (constant) init (4096*255);   /* 255 pages */
dcl (number_64k_segs, number_255k_segs) fixed bin (30);
     if file_size_temp < 50 then file_size_temp = 1.04*10**6;	/*   Default    */
     if merge_order < 1 & string_size < 1 then	   /*  Caller did not specify; base string size on file size  */
	if file_size_temp <= 4096 then max2 = 4096;
	else do;
	     max2 = ceil(sqrt(divide(file_size_temp, 4096, 71, 36))) * 4096;
	     if max2 > MAX_WORK_SEGMENT_SIZE_64K	/* work segs larger than 64 pages */
	     then do;
		number_64k_segs = divide (max2, MAX_WORK_SEGMENT_SIZE_64K, 30, 0) + 1;
		number_255k_segs = divide (number_64k_segs, 4, 30, 0) + 1;
		if number_64k_segs > max4
		then if number_255k_segs > max4
		     then do;
			max2 = MAX_WORK_SEGMENT_SIZE_255K; /* size of a single work segment */
			max4 = number_255k_segs;	/* need this many work segments */
			end;
		     else max2 = MAX_WORK_SEGMENT_SIZE_255K;  /* have to use 255k segs */
		else max2 = MAX_WORK_SEGMENT_SIZE_64K;	/* use 64k work segs to prevent 255k ASTE thrashing */
		end;
	     end;
     else if merge_order < 1 & string_size > 0 then do;		/*   User specified string size   */
	max2 = string_size;
  	if max2 > max1 + 200 then do;
	     arg_err_sw = on;
	     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw, 
		"^a:  Invalid string_size argument ^d.  Must be < ^d.",
			whoami, max2, max1 + 201);
	     end;
	end;
     else if merge_order > 0 & string_size < 1 then do;		/*   User specified merge order   */
	max2 = divide(file_size_temp, merge_order, 71, 36);	/*   Compute corresponding string size   */
	if max2 > max1 + 200 then do;
	     arg_err_sw = on;
	     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
		"^a:  File size too large for specified merge_order argument ^d.",
		whoami, merge_order);
	     end;
	end;
     else do;
	arg_err_sw = on;
	if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw, 
		"^a:  Both merge_order and string_size arguments specified.",
		whoami);
	end;
end compute_string_size;


end initiate;
