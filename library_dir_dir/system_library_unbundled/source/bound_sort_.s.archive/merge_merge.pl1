/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

merge_merge: proc(input_file, output_file, merge_desc,
	user_out_sw_par, merge_code);

/*   PARAMETERS   */
dcl (input_file(*) char(*),			/*   Input file pathnames or attach descriptions (Input).   */
     output_file char(*),			/*   Output file pathnames or attach description  (Input).   */
     merge_desc(*) ptr,			/*   Pointer to Merge Description (source form)  (Input).   */
     user_out_sw_par     char(*),		/*   Switchname for diagnostics and merge Report  (Input).   */
     merge_code  fixed bin(35) ) parameter;	/*   Status code  (Output).   */

/* Modified 12/01/83 by C Spitzer. change dcl of get_wdir_ so doesn't randomly fault. */

/*   EXTERNAL ENTRIES     */
dcl  clock_ entry returns(fixed bin(71));
dcl  convert_status_code_  entry(fixed bin(35), char(8) aligned, char(100) aligned);
dcl  cpu_time_and_paging_ entry(fixed bin, fixed bin(71), fixed bin);
dcl  get_pdir_  entry  returns(char(168) aligned);
dcl  hcs_$get_process_usage entry(ptr, fixed bin(35));
dcl  hcs_$make_seg  entry(char(*) aligned, char(*) aligned, char(*), fixed bin(5), ptr, fixed bin(35));
dcl  hcs_$truncate_seg entry(ptr, fixed bin(24), fixed bin(35)),
     hcs_$delentry_seg entry(ptr, fixed bin(35));
dcl  hmu entry;
dcl  ioa_$rsnnl  entry options(variable);
dcl  ioa_$ioa_stream  entry  options(variable);
dcl  sub_err_  entry options(variable);
dcl  translator_temp_$release_segment  entry(ptr, fixed bin(35));
dcl  unique_chars_ entry(bit(*)) returns(char(15));

dcl  merge_initiate$initiate_private entry(ptr, ptr, char(*), fixed bin(35));
dcl (sort_input_proc,
     merge_output_proc) entry(fixed bin(35));
dcl  sort_merge_terminate$terminate entry(fixed bin(35));
dcl  sort_cleanup_work entry;
dcl  sort_merge_subroutine  entry((*)char(*), char(*), (*)ptr, char(*),
			entry, entry, bit(1), bit(1),
			ptr, ptr,
			ptr, ptr);
dcl  sort_merge_print_report  entry;

/*   EXTERNAL STATIC     */

% include sort_ext;

dcl (error_table_$out_of_sequence,
     error_table_$fatal_error,
     error_table_$bad_arg) external static fixed bin(35);

/*   INTERNAL STATIC   (constants only)   */
dcl (on init("1"b),
     off init("0"b) ) bit(1) internal static;

/*   AUTOMATIC AND BASED   */
dcl  keys_ptr  ptr,
     exits_ptr  ptr,
     user_out_sw_temp char(32),
     code  fixed bin(35),
     file_size_temp  float bin(27),
     merge_order_temp  fixed bin(35),
     string_size_temp  fixed bin(35);

dcl (temp_sd_int,
     temp_sd_lex) ptr init(null());

dcl (sort_input_exit,
     sort_output_exit) entry(fixed bin(35)) variable;

dcl  state_code fixed bin(35);

dcl  arg_err_sw bit(1),
     fatal_sw bit(1);

dcl  j fixed bin(17);			/*   Used for do loop on input file names and attaches.   */
dcl  hcs_code fixed bin(35);

dcl  shortinfo char(8) aligned,
     longinfo  char(100) aligned;

dcl  retval  fixed bin(35);
dcl  cleanup  condition;

/*   Start.   */

     call state_test(state_code);		/*   Test state variable.   */
     if state_code ^= 0 then do;
	merge_code = error_table_$out_of_sequence;
	return;				/*   to caller without resetting state variable   */
	end;
     state = 2;
     time_sw = off;				/*   Timing not specified.   */
     debug_sw = off;			/*   Debug option not specified.  */
     arg_err_sw = off;			/*   Not done in common_start - see merge_private entry.   */
common_start:
     merge_code = 0;
     mii = dimension(input_file, 1);		/*   merge order = number of input files.   */
     sip = null();				/*   Used by sort_cleanup_work   */
     do j = 1 to mii + 1;			/*   extra location for pointer swapp9ng   */
	msp(j) = null();
	end;
     temp_sd_lex,
     temp_sd_int = null();			/*   used by cleanup procedure   */
     on cleanup call cleanup_proc;
     user_out_sw_temp = user_out_sw_par;	/*   Pass on.   */
     /*   temp_dir, file_size, string_size not used by merge.   */

     call sort_merge_subroutine(input_file, output_file, merge_desc, user_out_sw_temp,
			sort_input_exit, sort_output_exit, arg_err_sw, fatal_sw,
			keys_ptr, exits_ptr, temp_sd_lex, temp_sd_int);

     call create_in_buffs;			/*   uses mii for number of input files.   */

/*   Driver:   3 steps.   */
     /*   (1)  Initiate.   */
     if fatal_sw = off then
     call merge_initiate$initiate_private(keys_ptr, exits_ptr, user_out_sw_temp, code);
     if arg_err_sw = on | fatal_sw = on then do;
	merge_code = error_table_$bad_arg;
	go to exit;
	end;
     if code ^= 0 then do;
	if code = error_table_$out_of_sequence then  do;
	     call sub_err_(code, (whoami),  "c", null(), retval,
		"Calling merge_$initiate.");
	     merge_code = error_table_$fatal_error;
	     end;
	else merge_code = code;
	go to exit;
	end;

     if time_sw = on then do;		/*   End of Overhead phase (first part).   */
	etime(2) = clock_();
	call cpu_time_and_paging_(pf(2), vtime(2), pd_f(2));
	call hcs_$get_process_usage(addr(pu(2)), hcs_code);
	end;

     /*   No presort, beginning of merge phase.   */

     /*   Create arrays of input file names and attach descriptions.   */
     do j = 1 to mii;
	merge_input_file_names(j) = input_file(lbound(input_file, 1) + j - 1);
	call scan_for_pn_or_attach(merge_input_file_names(j), merge_input_file_attaches(j));
	end;
     if time_sw = on then do;
	etime(3) = clock_();
	call cpu_time_and_paging_(pf(3), vtime(3), pd_f(3));
	call hcs_$get_process_usage(addr(pu(3)), hcs_code);
	call hmu;
	end;
     state = 5;		/*   since there are no presort or commence calls   */

	/*   (2)  Call an output file procedure.   */
     if output_driver_is_sort = on then	/*   Call merge's output file procedure.   */
	do;
	/*   curr_output_file_name, curr_output_file_attach already set up by sort_merge_subroutine.   */
	call merge_output_proc(code);		
	if code ^= 0 then do;
	     if code ^= error_table_$fatal_error then do;
		call sub_err_(code, (whoami),  "c", null(), retval,
		"Merge's output_file procedure.");
		end;
	     merge_code = error_table_$fatal_error;
	     go to exit;
	     end;
	end;
     else do;			/*   Call user's output file procedure.   */
     /*   User output_file procedure currently not permitted for Merge.   */
	call sort_output_exit(code);		/*   User's output procedure.   */
	if code ^= 0 then do;
	     if code ^= error_table_$fatal_error
		then call sub_err_(code, (whoami),  "c", null(), retval,
		"User output_file exit procedure.");
	     merge_code = error_table_$fatal_error;
	     go to exit;
	     end;
	end;
     if time_sw = on then do;
	etime(4) = clock_();
	call cpu_time_and_paging_(pf(4), vtime(4), pd_f(4));
	call hcs_$get_process_usage(addr(pu(4)), hcs_code);
	end;

     /*   (3)  Terminate.   */
     call sort_merge_print_report;
     call sort_merge_terminate$terminate(code);
     if code ^= 0 then do;
	if code = error_table_$out_of_sequence then
		call sub_err_(code, (whoami),  "c", null(), retval,
		"Calling merge_$terminate.");
	merge_code = error_table_$fatal_error;
	end;
exit:
     call cleanup_proc;
     state = 8;
     return;	     /*   to caller of merge_     */


/*  ENTRY   merge_$merge_private  called only by merge command.   */
merge_private:  entry(input_file, output_file, merge_desc, user_out_sw_par, merge_code);
     state = 2;
     if merge_code ^= 0 then arg_err_sw = on;	/*   merge has encountered some error already   */
     else arg_err_sw = off;
     go to common_start;


state_test:  proc(state_code);		/*   Test state variable:   */
dcl  state_code fixed bin(35) parameter;
     if state = 0
	| (state = 8 & index(whoami, "_") ^= 0)		/*   Subroutine called last   */
	then do;
	whoami = "merge_";
	unique_prefix = before(unique_chars_("0"b), " ")||".";	/*   Get unique character string.   */
	state_code = 0;
	end;
     else do;
	state_code = 1;
	return;
	end;
end state_test;


scan_for_pn_or_attach:  proc(name, attach);
dcl (name  char(*),
     attach  char(*) ) parameter;
dcl  (j, k) fixed bin(17);
     k = 1;
     do while(substr(name, k, 1) = " " & k < length(name));
	k = k + 1;
	end;
     j = k;
     do while(substr(name, k, 1) ^= " " & k < length(name));
	k = k + 1;
	end;
     do while(substr(name, k, 1) = " " & k < length(name));
	k = k + 1;
	end;
     if substr(name, j, 4) = "-if " | substr(name, j, 12) = "-input_file " then do;
	name = substr(name, k);
	attach = "";
	end;
     else if substr(name, j, 5) = "-ids " | substr(name, j, 19) = "-input_description " then do;
	attach = substr(name, k);
	end;
end scan_for_pn_or_attach;


create_in_buffs:  proc;
dcl  i fixed bin;
dcl  number char(2) varying;
dcl  S  char(16) aligned based;
dcl  ioa_len fixed bin;
     do i = 1 to mii+1;   /*  extra segment for reading next input record without destroying previous merge winner*/
	call ioa_$rsnnl("^d", number, ioa_len, i);
	call hcs_$make_seg(get_pdir_(), unique_prefix||"sort_in_buff_"||number||"_", "",
		8+2,  /*  rw  */  msp(i), hcs_code);
	if msp(i) = null() then do;
	     arg_err_sw = on;
	     call convert_status_code_(hcs_code, shortinfo, longinfo);
	     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
		"^a:  ^a  Unable to create temporary segment [pd]>^asort_in_buff_^a_",
		whoami, longinfo, unique_prefix, number);
	     return;
	     end;
	msp(i) = addr(substr(msp(i)->S, 9));		/*   Leave space for record length prior to record.  */
	end;		/*   of do for all input files  (mii)   */
end create_in_buffs;


cleanup_proc:  proc;
dcl  code fixed bin(35);
     if debug_sw = off then do;
	if temp_sd_lex ^= null() then call translator_temp_$release_segment(temp_sd_lex, code);
	if temp_sd_int ^= null() then call hcs_$delentry_seg(temp_sd_int, code);
	end;
     else do;
	if temp_sd_lex ^= null() then call hcs_$truncate_seg(temp_sd_lex, 0, code);
	if temp_sd_int ^= null() then call hcs_$truncate_seg(temp_sd_int, 0, code);
	end;
     call sort_cleanup_work;
     state = 8;
end cleanup_proc;


end merge_merge;
