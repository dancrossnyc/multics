/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
%;
/* ***************************************
   *				 *
   *				 *
   * Copyright (c) 1975, 1976 by         *
   * Honeywell Information Systems, Inc. *
   *				 *
   *				 *
   *************************************** */
sort_presort:			proc(ec);			/* Version 2. */

			/*    EXTERNAL ENTRIES    */
dcl  sub_err_ entry  options(variable);
dcl	hcs_$make_seg  entry(char(*) aligned, char(*) aligned, char(*), fixed bin(5), ptr, fixed bin(35)),
	ioa_$rsnnl entry options(variable);
			/*    EXTERNAL STATIC    */

%include sort_ext;
	dcl	error_table_$fatal_error fixed bin(35) external,
		error_table_$improper_data_format fixed bin(35) ext;

			/*  PARAMETERS,AUTOMATIC, & BASED  */
	dcl	N char(8),
		ms_name char(32) aligned,
		shortinfo char(8) aligned,
		longinfo char(100) aligned,
		ioa_len fixed bin(17);
dcl  hcs_code fixed bin(35);
dcl  retval  fixed bin(35);
	dcl	(ns init(1),
		np init(0)) fixed bin(30),
		s(0:36);
	dcl 	i1 fixed bin(30);
	dcl	sp ptr,
		rp ptr;
%include sort_common;
dcl  (t,n,v1,v2,l,x,j,y,lft,rit,i) fixed bin(30);
dcl  sip_a  ptr,
     srp_a  ptr,
     ssp_a  ptr;
dcl  compares_counter_a  fixed bin(34);

start:	ec = 0;
     sip_a = sip;
     compares_counter_a = 0;
     srp_a = srp;
     ssp_a = ssp;

on illegal_procedure call illegal_procedure_handler;

	i=mii+1;	/* Count the merge strings. */
	if i>max4 then do;
	     call sub_err_(0, whoami, "c", null(), retval, "Maximum merge order of ^d exceeded.", max4);
	     ec = error_table_$fatal_error;
	     go to exit;
	     end;
	/* Create the next merge string  S segment. */
	    call ioa_$rsnnl("^d",N,ioa_len,i);
	     ms_name = unique_prefix||"sort_work.MS."||N;
	   call hcs_$make_seg(wf_dir_name, ms_name, "", 8+2,  /*  rw  */ sp, hcs_code);
	    if hcs_code ^= 0 then do;
		ec = error_table_$fatal_error;
		call sub_err_(hcs_code, whoami, "c", null(), retval, " ^a  Unable to create temporary segment ^a>^a",
			longinfo, before(wf_dir_name, " "), ms_name);
		go to exit;
		end;
	/*  if i = 1 then cmpe=cmp;    assign comparison procedure at the first call */

	mii=i;             /*  set merege item index  */
	mip(i) = sii;	/*  number of records in ith merge string  */
	msp(i)=sp;	/* Pointer to "next" merge S string. */

/*
	calculate the lengths of
	lists and their start pointers
	in a linear set.
*/
	/*   set up array of indices-each indicating beginning of next group of records to be  sorted  */
	s(0) = 0;		/*   for case where sii = 1 and n will be = 0   */
	t=0;
	l=sii;		/*  number of records to  be  sorted  */
	do n=1 by 1 while(l>1);
	s(n)=t;  /* start of the next list  an array of indices-each index indicating start of next  list */
	if substr(unspec(l),36,1) then do;
		l=l+1;  /* make the length even. */
		sip_a->I(t+l) = 0;		/*   clear second word of last pair if l is odd   */
		end;
	t=t+l;  /* accumulate the lengths. */
	l = divide(l,2,24);  /*  next list is 1/2 the length of the present list  */
	end;
	n=n-1;

		/*  below fills in I array(of indices into R) to reflect sorted records-performs presort*/
	do i=2 to n;
	lft=s(i-1); 
	rit=s(i) ;
	do j=1 by 2 to (rit - lft );
	x=lft+j;
	v1=sip_a->I(x);
	v2=sip_a->I(x+1);
	if v2>0 then do;
		/*  below sets up pointers to records in S string  */
	     pt2 = addr(ssp_a->S1(srp_a->R.pt(v2)));
	     pt1 = addr(ssp_a->S1(srp_a->R.pt(v1)));
	    call sort_comp;
	    compares_counter_a=compares_counter_a+1;
	    if result = 0 then	/*  records ranked  equal  */
		do;
		if v1 < v2
		    then result = -1;     /*  rank records 1 first  */
		    else result = 1;     /*  rank record 2 first  */
		end;
	if result>0 then v1=v2;
	end;
	rit=rit+1;
	sip_a->I(rit)=v1;
	end;
	end;

		/*  below sets up new,sorted merge string  */
		/*  sets up new R table to reflect sorted records */
	y=s(n)+1;
	do i=1 to sii;		/*  gets last two winner records from previous sorts  */
	v2=sip_a->I(y+1);
	v1=sip_a->I(y);
	if v1 ^= 0 then;
	    else if v2 ^= 0 then;
	else i = sii + 1;
	do;
	if v1=0 then v1=v2;
	else
	if v2>0 then do;
		/*  below sets up pointers to records within S string  */
	     pt2 = addr(ssp_a->S1(srp_a->R.pt(v2)));
	     pt1 = addr(ssp_a->S1(srp_a->R.pt(v1)));
	    call sort_comp;
	    compares_counter_a=compares_counter_a+1;
	    if result = 0 then	/*  records ranked  equal  */
		do;
		if v1 < v2
		    then result = -1;     /*  rank records 1 first  */
		    else result = 1;     /*  rank record 2 first  */
		end;
	if result>0 then v1=v2;
	end;
	/* Move the next sorted record to the merge  string. */
	l=srp_a->R.ln(v1);	/*  length of winner record  */
		/*  following will set up mechansim for double word  alignemnt  */
	    ns = divide(ns + 4 -1 + 7,8,24)*8 +1;
	w_p =  addr(substr(sp->S,ns,1));
	w_p=ptr(w_p,fixed(rel(w_p),21)-1);  /*  move back 1 word to get lenght of record  */
	fb =  l;    /*  set length  */
	substr(sp->S, ns, l)= substr( ssp_a->S,  srp_a->R.pt(v1), l); /* move winner record into new S string-based on sp */
	np=np+1;
	ns=ns+l;
	sip_a->I(v1)=0; /* delete the last winner. */
		/*  below goes  through second pass of pre-sort  */
	do j=2 to n;  /* get the next winner. */
	lft=s(j-1);
	if substr(unspec(v1),36,1) then v2=v1+1;  else v2=v1-1;
	v2=sip_a->I(v2+lft);
	x = divide((v1+1),2,24);
	v1=sip_a->I(v1+lft);
	if v1=0 then v1=v2;
	else
	if v2>0 then do;
		/*  below sets up pointers to records within S string  */
	     pt2 = addr(ssp_a->S1(srp_a->R.pt(v2)));
	     pt1 = addr(ssp_a->S1(srp_a->R.pt(v1)));
	    call sort_comp;
	    compares_counter_a=compares_counter_a+1;
	    if result = 0 then	/*  records ranked  equal  */
		do;
		if v1 < v2
		    then result = -1;     /*  rank records 1 first  */
		    else result = 1;     /*  rank record 2 first  */
		end;
	if result>0 then v1=v2;
	end;
	sip_a->I(x+s(j))=v1;
	v1=x;
	end;
	end;
	end;

	old_input_file_num = curr_input_file_num;
exit:
     compares_counter = compares_counter + compares_counter_a;
	return;

%include sort_comp;


dcl  illegal_procedure condition;

illegal_procedure_handler:  proc;
dcl  key_part char(40),
     type char(10),
     file char(20),
     file_part char(168),
     len fixed bin(17);
     if compare_sw = 1 then key_part = "user compare exit procedure";
     else do;
	if dt(i1) = 9 then type = "dec";
	else if dt(i1) = 10 then type = "float dec";
	else type = "unknown";
	call ioa_$rsnnl("key ^d, ^a(^d) ^d(^d)", key_part, len,
		i1 + 1, type, leng(i1), w(i1), mod(b(i1) - 1, 4)*9);
	end;
     if input_driver_is_sort = "1"b then do;
	if curr_input_file_attach = "" then do;
	     file = "file name";
	     file_part = curr_input_file_name;
	     end;
	else do;
	     file = "attach description";
	     file_part = curr_input_file_attach;
	     end;
	if old_input_file_num = curr_input_file_num then do;
	     call sub_err_(error_table_$improper_data_format, whoami, "c", null(), retval,
			" Please check ^a and/or input file ^d, ^a ^a",
		     key_part, curr_input_file_num, file, file_part);
	     end;
	else do;
	     call sub_err_(error_table_$improper_data_format, whoami, "c", null(), retval,
			" Please check ^a and/or input files ^d to ^d.",
			key_part, old_input_file_num, curr_input_file_num);
	     end;
	end;
     else do;          /*   user input_file exit procedure   */
	call sub_err_(error_table_$improper_data_format, whoami, "c", null(), retval,
			" Please check ^a and/or user input_file exit procedure.",
		key_part);
	end;
      ec = error_table_$fatal_error;
     go to exit;
end illegal_procedure_handler;

end	sort_presort;
