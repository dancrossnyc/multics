/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
%;
/* ***************************************
   *				 *
   *				 *
   * Copyright (c) 1975, 1976 by         *
   * Honeywell Information Systems, Inc. *
   *				 *
   *				 *
   *************************************** */
sort_merge_command_finish:  proc(arg_err_code, sort_code, arg_err_sw, fatal_sw);

/*   PARAMETERS   */
dcl (arg_err_code  fixed bin(35),	/*   Error(s) detected by sort or merge  (Output).   */
     sort_code	fixed bin(35),	/*   Errors detected by sort_ or merge_  (Input).   */
				/*   error_table_$badarg = error(s) in arguments;   */
				/*   other = some type of fatal error.		*/
     arg_err_sw	bit(1),		/*   Errors in arguments detected by sort or merge  (Input).   */
     fatal_sw	bit(1) ) parameter;	/*   Fatal error detected by sort or merge  (Input).   */

/*   EXTERNAL ENTRIES    */
dcl  clock_ entry returns(fixed bin(71));
dcl  com_err_  entry options(variable);
dcl  convert_status_code_  entry(fixed bin(35), char(8) aligned, char(100) aligned);
dcl  cpu_time_and_paging_ entry(fixed bin, fixed bin(71), fixed bin);
dcl  hcs_$get_process_usage entry(ptr, fixed bin(35));
dcl  ioa_ entry options(variable),
     ioa_$nnl  entry options(variable);

/*   EXTERNAL STATIC     */

%include sort_ext;
dcl  error_table_$bad_arg fixed bin(35) external;

/*   INTERNAL STATIC (constants only)     */
dcl (on init("1"b),
     off init("0"b) ) bit(1) internal static;

/*   AUTOMATIC AND BASED     */
dcl  shortinfo char(8) aligned,
     longinfo char(100) aligned;


dcl  hcs_code fixed bin(35);


/*   Start   */

/*   Test for errors found by sort(merge):   */
     call test_arg_error(arg_err_code);
     if arg_err_code ^= 0 then return;

/*   Test for errors found by sort_(merge_):   */
     if sort_code ^= 0 then call test_sort_error;
     else if time_sw = on then do;
	etime(5) = clock_();
	call cpu_time_and_paging_(pf(5), vtime(5), pd_f(5));
	call hcs_$get_process_usage(addr(pu(5)), hcs_code);
	call print_time_info;
	end;
     return;		/*   To caller (sort or merge).   */

test_arg_error:  proc(code);		/*   Process errors detected in argument processing:   */
dcl  code fixed bin(35) parameter;
     code = 0;
     if arg_err_sw = on then do;	/*   Checked before fatal_sw since both may be on.   */
	call sort_com_err(1);		/*   Bad argument(s).   */
	code = 1;
	end;
     else if fatal_sw = on then do;
	call sort_com_err(0);	/*   Fatal error.   */
	code = 1;
	end;
end test_arg_error;

test_sort_error:  proc;		/*   Process error detected by sort_(merge_).   */
     if sort_code = error_table_$bad_arg then do;	/*   Bad argument(s) detected by sort_(merge_).   */
	call sort_com_err(1);
	end;
     else do;			/*   Some other error detected by sort_(merge_).   */
	call convert_status_code_(sort_code, shortinfo, longinfo);
	call com_err_(0, whoami, " ^a  ^a is abandoned.", longinfo, caps(whoami));
	end;
end test_sort_error;

sort_com_err:  proc(code);
dcl  code fixed bin parameter;
     if code ^= 0 then call com_err_(0, whoami,
			" Errors in arguments.  ^a will not be attempted.", caps(whoami));
     else call com_err_(0, whoami, " ^a will not be attempted.", caps(whoami));
end sort_com_err;


caps:  proc(whoami)  returns(char(5));
dcl  whoami  char(*) parameter;
     if substr(whoami, 1, 4) = "sort" then return("Sort");
     else return("Merge");
end caps;


print_time_info:  proc;
dcl  head char(8);
     if whoami = "sort" then do;
	call ioa_("^/Merge order = ^d.", mii);
	call ioa_("String size =~ ^d.", max2);
	end;
     if compares_counter > 0 then head = "COMPARES"; else head = "";
     call ioa_("^/PHASE^3x^2xELAPSED^5xRCPU^5xVCPU^2xPAGES^2xP_DEV ^8a", head);
     call form_line("Overhead",
	etime(5) - etime(4) + etime(2) - etime(1),
	rcpu(5) - rcpu(4) + rcpu(2) - rcpu(1),
	vtime(5) - vtime(4) + vtime(2) - vtime(1),
	   pf(5) -    pf(4) +    pf(2) -    pf(1),
	pd_f(5) - pd_f(4) + pd_f(2) - pd_f(1),
	0);
     if whoami = "sort" then do;
	call form_line("Presort",
	     etime(3) - etime(2),
	     rcpu(3) - rcpu(2),
	     vtime(3) - vtime(2),
	        pf(3) -    pf(2),
	     pd_f(3) - pd_f(2),
	        presort_compares);
	end;
     call form_line("Merge",
	etime(4) - etime(3),
	rcpu(4) - rcpu(3),
	vtime(4) - vtime(3),
	   pf(4) -    pf(3),
	pd_f(4) - pd_f(3),
	   merge_compares);
     call form_line("TOTAL",
	etime(5) - etime(1),
	rcpu(5) - rcpu(1),
	vtime(5) - vtime(1),
	   pf(5) -    pf(1),
	pd_f(5) - pd_f(1),
	   compares_counter);
     call ioa_("");

end print_time_info;


form_line:  proc(name, etime, rtime, vtime, pf, pd_f, compares);
dcl (name char(*),
     etime fixed bin(71),
     rtime fixed bin(71),
     vtime fixed bin(71),
     pf    fixed bin,
     pd_f fixed bin,
     compares fixed bin(34) ) parameter;
     call ioa_$nnl("^8a ^8.2f ^8.2f ^8.2f ^6d ^6d",
	name,
	divide(etime, 10**6, 35, 8),
	divide(rtime, 10**6, 35, 8),
	divide(vtime, 10**6, 35, 8),
	pf,
	pd_f);
     if compares > 0 then call ioa_(" ^8d", compares);
     else call ioa_("");
end form_line;


end sort_merge_command_finish;
