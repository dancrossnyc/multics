/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* Modified on 03/20/82 by FCH, [1], decrease size of IN */

sort_output_proc:  proc(output_proc_code);

/*   EXTERNAL ENTRIES   */
dcl  iox_$attach_ioname entry(char(*), ptr, char(*), fixed bin(35));
dcl  iox_$open entry(ptr, fixed bin, bit(1) aligned, fixed bin(35));
dcl  iox_$write_record entry(ptr, ptr, fixed bin(21), fixed bin(35));
dcl  iox_$close entry(ptr, fixed bin(35));
dcl  iox_$detach_iocb entry(ptr, fixed bin(35));
dcl  iox_$destroy_iocb entry(ptr, fixed bin(35));
dcl  sub_err_  entry options(variable);


/*   EXTERNAL STATIC   */

%include sort_ext;

dcl (error_table_$not_detached,
     error_table_$not_attached,
     error_table_$not_closed,
     error_table_$end_of_info,
     error_table_$data_loss,
     error_table_$data_gain,
     error_table_$data_seq_error,
     error_table_$not_open,
     error_table_$out_of_sequence,
     error_table_$request_not_recognized,
     error_table_$long_record,
     error_table_$fatal_error) fixed bin(35) external static;

/*   PARAMETERS AND AUTOMATIC     */
dcl  output_proc_code fixed bin(35) parameter;

dcl  out_attach_desc char(176),
     out_iocb_ptr ptr,
     iox_code fixed bin(35),
     out_mode fixed bin,
     seq_output fixed bin init(5),
     no_extend bit(1) aligned init("0"b),
     sort_code fixed bin(35),
     out_buff_ptr ptr,
     out_rec_len fixed bin(21),
     out_buff_len fixed bin(21) init(32768);
dcl  data_gain_sw bit(1) init("0"b);

dcl  retval  fixed bin(35);
dcl  cleanup condition;

/*   Start.   */
     output_proc_code = 0;
     out_iocb_ptr = null();
     on cleanup call cleanup_proc;
/*   Attach.   */
     if curr_output_file_attach = "" then out_attach_desc = "vfile_ "||curr_output_file_name;
     else out_attach_desc = curr_output_file_attach;
/*   without extend   */
     call iox_$attach_ioname(unique_prefix||"sort_out_1_", out_iocb_ptr, out_attach_desc, iox_code);
     if iox_code ^= 0 then
	do;
	/*   error_table_$not_detached   */
	call iox_error("Attaching");
	end;

/*   Open.   */
     out_mode = seq_output;
     call iox_$open(out_iocb_ptr, out_mode, no_extend, iox_code);
     if iox_code ^= 0 then
	do;
	/*   error_table_$not_attached,
	                 $not_closed     */
	call iox_error("Opening");
	end;

/*   Retrieve and write.   */
retrieve:  call sort_return(out_buff_ptr, out_rec_len, sort_code);
     if sort_code = error_table_$end_of_info then
     go to close;
     if sort_code ^= 0 then
	do;
	/*   sort_$return errors   */
	if sort_code = error_table_$data_loss then do;
	     call sub_err_(sort_code, (whoami), "c", null(), retval, "");
	     go to close;
	     end;
	else if sort_code = error_table_$data_gain then do;
	     if data_gain_sw = "0"b then call sub_err_(sort_code, (whoami), "c", null(), retval, "");
	     data_gain_sw = "1"b;
	     end;
	else if sort_code = error_table_$data_seq_error then do;
	     if curr_output_file_attach = "" then
	     call sub_err_(sort_code, (whoami), "c", null(), retval,
		" Record ^d of output file, file name ^a",
			write_count + 1, curr_output_file_name);
	     else call sub_err_(sort_code, (whoami), "c", null(), retval,
		" Record ^d of output file, attach description ^a",
			write_count + 1, curr_output_file_attach);
	     end;
	else if sort_code = error_table_$out_of_sequence then do;
	     call sub_err_(sort_code, (whoami), "c", null(), retval,
		" Calling sort_$return.");
	     call cleanup_proc;
	     go to exit;
	     end;
	else do;		/*  error_table_$fatal_error   */
	     output_proc_code = sort_code;
	     call cleanup_proc;
	     go to exit;
	     end;
	end;
     call iox_$write_record(out_iocb_ptr, out_buff_ptr, out_rec_len, iox_code);
     if iox_code ^= 0 then
	do;
	/*  no errors returned?   */
	call iox_error("Writing");
	end;
     write_count = write_count + 1;
     go to retrieve;

/*   Close.   */
close:  call iox_$close(out_iocb_ptr, iox_code);
     if iox_code ^= 0 then
	do;
	/*   error_table_$not_open   */
	call iox_error("Closing");
	end;

/*   Detach.   */
     call iox_$detach_iocb(out_iocb_ptr, iox_code);
     if iox_code ^= 0 then
	do;
	/*   error_table_$not_attached,
		       $not_closed     */
	call iox_error("Detaching");
	end;

/*   Destroy iocb.   */
     call iox_$destroy_iocb(out_iocb_ptr, iox_code);
     out_iocb_ptr = null();
     /*  no errors returned?   */
exit:
     return;		/*   to driver   */
     return:	entry(pt,fb,fb1);
	dcl	pt ptr,
		fb fixed bin(21),
		fb1 fixed bin(35);
	    call sort_return(pt,fb,fb1);
	    return;
%;
  sort_return:  proc(retp,retbl,ec);
			/*  PARAMETERS, INTERNAL STATIC, AUTOMATIC, & BASED  */
	dcl	(retp ptr,
		retbl fixed bin(21)) parameter;
dcl (t,n,v1,v2,l,x,j,y,lft,rit,i) fixed bin(30) int static;
	dcl
		(ns,np) fixed bin(30) int static,
		s(36) static,
		retfb fixed bin(30);
	dcl	i1 fixed bin(30);
/*1*/	dcl	1 IN(127 * 1024) based,
		   2 ctr fixed bin(30),  /*  serial record count  */
		   2 by_off fixed bin(30);  /*  byte offset of current record  */
%include sort_common;

dcl  retval  fixed bin(35);

		       /*  following declarations are for output  record  exit  */
	dcl	hold_ptr ptr int static,
		hold_len fixed bin(21) int  static,
		s_retp ptr int static,
		s_retbl fixed bin(21) int static,
		rec_ptr_2 ptr int static,		/*  next record pointer  */
		rec_len_2 fixed bin(21) int static,	/*  next record length  */
		u_rec_ptr_2 ptr int static,  /*  rec_ptr_2 handed to the user  */
		u_rec_len_2 fixed bin(21) int static,  /*  rec_len_2 handed to the user  */
		action fixed bin int static,	/*  action code  */
		equal_key fixed bin(1) int  static,
		seq_check_sw bit(1) int static,
		close_exit_sw bit(1) int static,
		cur_rec_ptr ptr int static,		/*  current record pointer  */
		area_len fixed  bin(21)  int static,	/*  current  record length  */
		equal_key_sw bit(1) int static,
		old_retp ptr int static;		/*  old retp  pointer  */
	dcl	old_rec_ptr ptr int static;    /*  previous record for sequence checker  */
	dcl	hold_cur_rec_ptr ptr int static,	/*  hold ptr to output record in sort's area  */
	hold_area_len int static;	/*  hold length of output record in case user destroys it  */
	ec = 0;     /*  initially set error code  */
		/*  test state code  */
	if state ^= 5 then    /*  sequence error  */
	    do;
		ec = error_table_$out_of_sequence;
		return;
	    end;
	if disaster2 = 0 then do;			/* Initial  call to RETURN. */
	     disaster2 = 1;
	    old_rec_ptr=null();  /*  set initially for sequence check previous record  */
			/*  following set for output record exit  */
	    equal_key_sw="0"b;
	    equal_key=1;
	    seq_check_sw="1"b;
	    action=10;
	     if release_count = 0 then
		do;    /*  no records released  */
		 ec = error_table_$end_of_info;
		 if output_record_exit_sw = 0 then return;
		 else do;   /*  prepare to take exit  */
		        retp=null();
		        ns=1;
		        n = 0;
		        go to in;
		 end;
		end;
	     call A0;
	     return_count = return_count + 1;
	     go to rel_ck;
	end;

 g_a_w:	    if output_record_exit_sw ^= 0 & action = 3 | action = 11 then
		do;  /*  output rec sw on and just completed  inserting a record  */
		 if old_retp  =  rec_ptr_b  /*  just returned  current was in rec_ptr_b  */
		   then cur_rec_ptr=rec_ptr_a;  /*  set new current  area to rec_ptr_a  */
		   else cur_rec_ptr=rec_ptr_b;  /*  just  returned current was in rec_ptr_1-
					    set new current area to  rec_ptr_b    	*/
		 substr(cur_rec_ptr->S,1,u_rec_len_2)=substr(u_rec_ptr_2->S,1,u_rec_len_2);
		 area_len=u_rec_len_2;  /*  move just inserted record into current area  */
		 if action=11 then ec=error_table_$end_of_info;
		    /* just inserted a record at end of file-reset ec  */
		 rec_ptr_2=hold_ptr;  /*  move previous  next record into current next  */
		 rec_len_2=hold_len;
		 output_rec_inserted=output_rec_inserted+1;
		 go to in;  /*  transfer to  point where  exit routine is called-after determining new  winner*/
		end;
	if mii<2 then do;				/* Single merge string. */
	     if ns>n then do;
		disaster2 = 2;
			/*  data lost test  */
		if release_count > return_count  /*  data lost  */
		    then ec = error_table_$data_loss;
		    else
		ec = error_table_$end_of_info;  /*  all records have been gotten from single merge string  */
	     end;
	     else do;
		retp = msp (1);
		    /* update array element indicating current byte offset in string  */
		 /*  below adjusts IN.by_off for double word alignment  */
		retfb=divide(srp->IN.by_off(1) + fb + 4 - 1 +7,8,24)*8 + 1;
		srp->IN.by_off(1) = retfb;
		retp = addr(substr(retp->S,retfb,1));
		    /*  get byte position using word preceding record  */
		w_p = ptr(retp,fixed(rel(retp),21)-1);  /*  move back 1 word to get length of record  */
		retbl = fb;    /*  set up length  */
		    /*  set buffer pointer to correct record within string  */
		return_count = return_count +1;  /*  increment return count  */
		ns = ns+1;
	     end;
	     go to rel_ck;
	end;

/* Multiple merge strings. */
	call A2;
	call A1;
	return_count = return_count + 1;
 rel_ck:  if release_count < return_count then
	    do;    /*  data gain test  */
	      if ec =error_table_$end_of_info then return;  /*  already at end of info  */
	      ec=error_table_$data_gain;
	      return;
	    end;
 in:;
		    /*  following code is for output record  exit routine  */
	    if output_record_exit_sw ^= 0 then
		do;	/*  take output record exit  */
		    if action = error_table_$end_of_info then
			do;    /*  just wrote   last record  */
			   ec=error_table_$end_of_info;  /*  reset  error code  */
			   return;
			end;
		    if action ^= 3 then
		      do;    /*  just got winner record  */
		             /*  save winner record pointer  */
		        s_retp=retp;
	  	        s_retbl=retbl;
		      end;
		    if action=10 then
		      do;  /*  indicating first time through-no curent record,no previously
			   written record							*/
		        rec_ptr_2=retp;  /*  set up next record-to  winner  */
	    	        rec_len_2=retbl;
		        cur_rec_ptr=null();  /*  set current record ptr to null */
 ent:		        action=0;
		        if ec=error_table_$end_of_info then rec_ptr_2=null();
			/*  deleted every successive record of the file  */
		        u_rec_ptr_2=rec_ptr_2;  /*  set user's next pointer and next length  */
		        u_rec_len_2=rec_len_2;
		        if close_exit_sw="0"b then
		        call  sort_output_record_exit(cur_rec_ptr,area_len,u_rec_ptr_2,u_rec_len_2,
				action,equal_key,equal_key_sw,seq_check_sw,close_exit_sw);
		        old_retp=null();  /*  to indicate,next time through,that there is no previous record-
				       therefore no sequence check				*/
		        if action=3 then
			do;  /*  insert record at beginning of  file  */
			 call ck_len(u_rec_len_2,"inserted");  /*  check returned record length  */
			 cur_rec_ptr=rec_ptr_b;  /*  arbitrarily set to b  */
			 substr(cur_rec_ptr->S,1,u_rec_len_2)=substr(u_rec_ptr_2->S,1,u_rec_len_2);
				/*  set up current record  */
		 	 area_len=u_rec_len_2;
			 rec_ptr_2=retp;  /*  reset next reocrd to same-previous next record  */
		 	 rec_len_2=retbl;
			 output_rec_inserted=output_rec_inserted+1;
			 go to in;    /*  don't write current record-rather go back & call exit */
			end;
		        if ec = error_table_$end_of_info then action=ec;
			/*  deleted the entire file  */
	   	        go to g_a_w;
		      end;
		    if action= 0 then
		      do;    /*  just completed accepting record  */
		        if old_retp=rec_ptr_b    /*  just returned current was in rec_ptr_b  */
			then cur_rec_ptr=rec_ptr_a;  /*  set new current area  to rec_ptr_a  */
			else cur_rec_ptr=rec_ptr_b;  /*  set new current area  to rec_ptr_b   */
		        substr(cur_rec_ptr->S,1,rec_len_2)=substr(rec_ptr_2->S,1,rec_len_2);
				/*  move previous next record into current  area  */
		        area_len=rec_len_2;
		        rec_ptr_2=retp;    /*  set up new  next record   */
		        rec_len_2=retbl;
		      end;
		    else if action=1 then
		      do;    /*  just  completed deleting the current record  */
		        substr(cur_rec_ptr->S,1,rec_len_2)=substr(rec_ptr_2->S,1,rec_len_2);
				/*  move old next record into current record  area  */
		        area_len=rec_len_2;
		        rec_ptr_2=retp;    /*   set up new next  record  */
		        rec_len_2=retbl;
		        output_rec_deleted=output_rec_deleted+1;
		      end;
		    else if action=2 then
		      do;  /*  just completed deleting next record-leave old current record alone  */
		        rec_ptr_2=retp;    /*  set up new next record  */
		        rec_len_2=retbl;
		        output_rec_deleted=output_rec_deleted+1;
		        if cur_rec_ptr=null() then go to ent;  /*  just deleted first record(of the file) */
		      end;
		    else if ^(action=11 | action=3) then
		      do;    /*  illegal action code  */
		       call sub_err_(error_table_$request_not_recognized,(whoami), "c", null(), retval,
			     "Invalid action = ^d by user output_record exit procedure.",action);
		       ec=error_table_$fatal_error;
		       goto exit;
		      end;
		    action=0;  /*  set here in  case close exit is on  */
		    if close_exit_sw="1"b then go to sim;     /*  close  exit  switch is  on  */
		    if ec=error_table_$end_of_info then rec_ptr_2=null();  /*  no next rec-end of info */
		    if equal_key_sw="1"b then  /*  equal key swtich on  */
		      do;    /*  check for equal keys between current and next  */
		        pt1=cur_rec_ptr;  /*   current record  */
		        pt2=rec_ptr_2;  /*  next record  */
		        if pt1^=null() & pt2^= null() then
		        call sort_comp;  /*  invoke sort's comparison routine  */
		        equal_key=result;
		      end;
		    u_rec_ptr_2=rec_ptr_2;  /*  set user's next pointer and next length  */
		    u_rec_len_2=rec_len_2;
		    hold_cur_rec_ptr = cur_rec_ptr;   /*   save pointer to output record   */
		    hold_area_len = area_len;  /*   save length of output record   */
		    call sort_output_record_exit(cur_rec_ptr,area_len,u_rec_ptr_2,u_rec_len_2,
					action,equal_key,equal_key_sw,seq_check_sw,close_exit_sw);
		    if action ^= 1 & cur_rec_ptr ^= hold_cur_rec_ptr then
		      do;   /*  move record pointed to by user into an area belonging to the sort  */
			substr(hold_cur_rec_ptr->S, 1, area_len) = substr(cur_rec_ptr->S, 1, area_len);
			cur_rec_ptr = hold_cur_rec_ptr;
		      end;
		    if action=1 | action=2 then
		      do;    /*  delete current or next record  */
		             /*  don't return a record back to sort_output  */
			   /*  rather go back and get anther  winner  */
			   /*  don't perform sequence  check  */
		        if ec=error_table_$end_of_info then   /*  no more records-simply   */
			do;    /*  return after incrementing deletion count  */
		   	   output_rec_deleted=output_rec_deleted+1;
			   return;
			end;
		        if action = 1 then
			 do;  /*  restore held values  */
			    cur_rec_ptr = hold_cur_rec_ptr;
			    area_len = hold_area_len;
			 end;
		        if action=2 then call ck_len(area_len,"summarized");  /*  check returned current record len  */
		        goto g_a_w;   /*  transfer  to  get another  winner  */
		      end;
 sim:		    if action=0 then
		      do;  /*  accept current record  */
		        call ck_len(area_len,"altered");  /*  check returned current rec length  */
		        retp=cur_rec_ptr;  /*  set record return pointer to current record  */
		        retbl=area_len;
		      end;
		    else if action=3 then
		      do;  /*  insert record pointed to by rec_ptr_2-next record  */
		        call ck_len(u_rec_len_2,"inserted");  /*  check length of record to be inserted  */
		        call ck_len(area_len,"altered");    /*  check returned current record length  */
		        hold_ptr=s_retp;  /*  save old next pointer  */
		        hold_len=s_retbl;
		        retp=cur_rec_ptr;  /*  set return record to current record  */
		        retbl=area_len;
		      end;
	     	    else
		      do;    /*  illegal action code  */
		       call sub_err_(error_table_$request_not_recognized,(whoami), "c", null(), retval,
			     "Invalid action = ^d by user output_record exit procedure.",action);
	   	       ec=error_table_$fatal_error;
		       goto exit;
		      end;
		    if ec=error_table_$end_of_info then
		      do;     /*  no more records to be read  */
		        if action ^= 3 then
			do;    /*  no record to be inserted  */
		     	   ec=0;  /*  reset ec so that sort_output will write record  */
				/*  retp should already be set  */
		  	   action=error_table_$end_of_info;  /*  set to indicate,on next time
						through, no records left  		*/
			end;
			else do;  /*  insert record at end of file-in rec_ptr_2  */
				/*  action=s 3  */
			   ec=0;  /*  reset so that sort_output will write current record  */
			   action=11;  /*  indicating no more records to be read  */
			end;
		        v1=mii;  /*  in case of multiple merge strings-an extra pass will be made
				through A2 and A!			*/
		      end;
		    if seq_check_sw="1"b & old_retp^=null() then
		/*  seq bit on and a previously written record  */
		      do;  /*  perform  sequence check-between current and record previously written-
			 cur_rec_ptr and rec_ptr_a or rec_ptr_b				    */
		        if retp=rec_ptr_a
			then pt1=rec_ptr_b;  /*  previous record is in rec_ptr_b  */
			else  pt1=rec_ptr_a;  /*  previous  record is in  rec_ptr_a  */
		        pt2=retp;    /*  current record  */
		        call sort_comp;
		        if result= 1 then ec=error_table_$data_seq_error;  /*  out of sequence-fatal  error  */
		      end;
 con:		    old_retp=retp;    /*  set so that,on next time through,can distinguish which
				   record pointer was used			*/
		    return;
		end;    /*  end sort output record exit code  */
	if old_rec_ptr=null() | ec=error_table_$end_of_info
		then old_rec_ptr=retp;  /*  set for next time through  */
		else do;    /*  perorm sequence check  */
		      pt1=old_rec_ptr;  /* set previous record pointer  */
		      pt2=retp;	   /*  current record pointer  */
		      call sort_comp;
		      if result = 1 then
			ec=error_table_$data_seq_error;
		      old_rec_ptr=retp;  /*  set for  next time through  */
		     end;
 exit:	return;

A0:	proc;
	     if mii<2 then do;			/* Single sorted string. */
		n = mip(1);		/*  number of records in first string  */
		if n<1 then do;
		/*   Ignore possible error.   */
		end;
		else do;
			   /*  set first element of array to indicate-for single merge
			   string case-character position of current record in this merge string  */
		     srp->IN.by_off(1) = 9;
		     retp = msp(1);       	/*  string pointer  */
		     retfb = srp->IN.by_off(1);  /*  set byte offset from srp-IN array  */
		     retp = addr(substr(retp->S,retfb,1));  /*  adjust pointer  */
		       /*  get byte position using word preceding record  */
		     w_p = ptr(retp,fixed(rel(retp),21)-1);  /*  move back 1 work-to get length  */
		     retbl = fb;  /*  set up length  */
		     ns = 2;
		end;
		return;
	     end;

/* Initialize for multiple merge strings. */

	     do i = 1 to mii;			/* Set indices for merge. */
		sip -> I (i) = i;			/*  sets ups I array  */
		srp->IN.ctr(i) = 1;    /*  record number in merge string  */
		srp->IN.by_off(i) = 9;  /*  set to char position of each record in each merge string  */
	     end;

/*
   calculate the lengths of
   lists and their start pointers
   in a linear set.
   */
	     t = 0;
	     l = mii;				/*  number of merge srings  */
	     do n = 1 by 1 while (l>1);
		s (n) = t;			/* start of the next list. */
		if substr(unspec(l),36,1) then
		   do;  /*    l odd  */
		     l = l+1;  /*  make the length even  */
		     sip->I(t+l) = 0;  /*  clear 2nd word of pair if l was odd  */
		   end;
		t = t+l;				/* accumulate the lengths. */
		l = divide(l,2,24);
	     end;
	     n = n-1;

/* Set s(n) to (one more than) the index to the list
   for the final 2 records to be compared. */
/*  below rearranges I array to reflect sorted records(the first record of each merge
   string being looked at)				*/
	     do i = 2 to n;
		lft = s (i-1);
		rit = s (i) ;
		do j = 1 by 2 to (rit - lft);
		     x = lft+j;
		     v1 = sip -> I (x);		/*  indices in I(sip)  */
		     v2 = sip -> I (x+1);
		     if v2>0 then do;
		/*  below sets up pointers to record within S string (v1th & v2nd)  */
		/*  msp(vn) points to beginning of S string while by_off gives the offset within  */
			pt2 = addr(msp(v2)->S1(srp->IN.by_off(v2)));
			pt1 = addr(msp(v1)->S1(srp->IN.by_off(v1)));
			call sort_comp;
			compares_counter=compares_counter+1;
	    if result = 0   then 	/*  records ranked equal  */
		do;
		 if v1 < v2	/*  compare merge string numbers  */
		    then result = -1;  /*  rank record 1 first  */
		    else result = 1;  /*  rank record 2 first  */
		 end;
			if result = 1 then v1 = v2;  /*  record 2 ranks first-switch order  */
		     end;
		     rit = rit+1;
		     sip -> I (rit) = v1;
		end;
	     end;
	     y = s (n)+1;
	     call A1;
	     return;
	end A0;

A1:	proc;
						/* Obtain the next record to output. */
	     v1 = sip -> I (y);
	     v2 = sip -> I (y+1);
	     if v1 ^= 0 then;
		else if v2 ^= 0 then;
		else do;
		    /*  data lost test  */
		if release_count > return_count
		    then ec = error_table_$data_loss;
		    else
		ec = error_table_$end_of_info;
		return_count=return_count-1;    /*  pre-adjust return_count  */
		return;
	     end;
	     if v1 = 0 then do;
		v1 = v2;
	     end;
	     else
	     if v2>0 then do;
		   /*  below sets up pointers to records within S string  */
		pt2 = addr(msp(v2)->S1(srp->IN.by_off(v2)));
		pt1 = addr(msp(v1)->S1(srp->IN.by_off(v1)));
		call sort_comp;
		compares_counter=compares_counter+1;
	    if result = 0   then 	/*  records ranked equal  */
		do;
		 if v1 < v2	/*  compare merge string numbers  */
		    then result = -1;  /*  rank record 1 first  */
		    else result = 1;  /*  rank record 2 first  */
		 end;

		if result = 1 then do;    /*  second record first  */
		     v1 = v2;
		end;
	     end;
	     retp = msp (v1);
	     retfb = srp->IN.by_off(v1);  /*  set byte offset from srp->IN array  */
	     retp = addr(substr(retp->S,retfb,1)); /* set pointer to correct record within string  */
		/*  get byte position using word preceding record  */
	     w_p = ptr(retp,fixed(rel(retp),21)-1);  /*  move back 1 word-to get length  */
	     retbl = fb;    /*  set up length  */
	     return;
	end A1;
A2:	proc;
						/* Delete last record output. */
	     i = srp->IN.ctr(v1) + 1;  /*  index of new record to look at -in v1th string  */
	     if i > mip(v1) then sip->I(v1) = 0;  /*  v1th string depleted  */
						/*  no more records in ths string to be looked at  */
	     srp->IN.ctr(v1) = i;  /*  update the index in v1th string to look at  */
		/*  below adjusts IN.by_off for double word alignment  */
	     retfb=divide(srp->IN.by_off(v1)+fb + 4 -1 +7,8,24)*8 +1;
	     srp->IN.by_off(v1) = retfb;
	     do j = 2 to n;
		if substr (unspec (v1), 36, 1) then v2 = v1+1; else v2 = v1-1;
		x = divide(v1+1,2,24);
		lft = s (j-1);
		v2 = sip -> I (v2+lft);
		v1 = sip -> I (v1+lft);
		if v1 = 0 then v1 = v2;
		else
		if v2>0 then do;
		 /*  below sets up pointers to records within S string  */
		    pt2 = addr(msp(v2)->S1(srp->IN.by_off(v2)));
		    pt1 = addr(msp(v1)->S1(srp->IN.by_off(v1)));
		    call sort_comp;
		    compares_counter=compares_counter+1;
	    if result = 0   then 	/*  records ranked equal  */
		do;
		 if v1 < v2	/*  compare merge string numbers  */
		    then result = -1;  /*  rank record 1 first  */
		    else result = 1;  /*  rank record 2 first  */
		 end;
		    if result = 1 then v1 = v2;    /*  record 2 ranks first-switch order  */
		end;
		sip -> I (x+s (j)) = v1;
		v1 = x;
	     end;
	end A2;
%include sort_comp;
 ck_len:    proc(length,action_type);
		/*  this will be called from output record exit-its function is to
		check the length passed to it against  max record length and
		return the appropriate error code				*/
	    /*								*/
	dcl	length fixed bin(21) parameter,
		action_type char(*) parameter,
		sub_err_ entry options(variable);
	    if length > max_rec_length then
		do;    /*  record too long  */
		   call sub_err_(error_table_$long_record,(whoami), "c", null(), retval,
			"Record ^a by user output_record exit procedure.",action_type);
		   ec=error_table_$fatal_error;
		   go to exit;
		end;
 end ck_len;
     end;


iox_error:  proc(action);
dcl  action char(*) parameter;
     output_proc_code = error_table_$fatal_error;
     if curr_output_file_attach = "" then
	call sub_err_(iox_code, (whoami), "c", null(), retval,
		" ^a output file, file name ^a", 
		action, curr_output_file_name);
     else
	call sub_err_(iox_code, (whoami), "c", null(), retval,
		" ^a output file, attach description ^a",
		action, curr_output_file_attach);
     call cleanup_proc;
     go to exit;
end iox_error;


cleanup_proc:  proc;
     if out_iocb_ptr = null() then return;
     call iox_$close(out_iocb_ptr, iox_code);
     call iox_$detach_iocb(out_iocb_ptr, iox_code);
     call iox_$destroy_iocb(out_iocb_ptr, iox_code);
end cleanup_proc;


end sort_output_proc;
