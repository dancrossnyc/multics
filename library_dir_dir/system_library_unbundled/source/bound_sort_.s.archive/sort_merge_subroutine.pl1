/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
%;
/* ***************************************
   *				 *
   *				 *
   * Copyright (c) 1975, 1976 by         *
   * Honeywell Information Systems, Inc. *
   *				 *
   *				 *
   *************************************** */
sort_merge_subroutine: proc(input_file, output_file, sort_desc, user_out_sw_par,
	sort_input_exit, sort_output_exit, arg_err_sw, fatal_sw,
	keys_ptr, exits_ptr,
	temp_sd_lex, temp_sd_int);

/*   PARAMETERS   */
dcl (input_file(*) char(*),				/*  Input file specs (Input)   */
     output_file char(*),				/*  Output file spec (Input)  */
     sort_desc(*) ptr,				/*  Sort/Merge Description (Input)  */
     user_out_sw_par     char(*),			/*  Switchname for Sort Report (Input)  */
     sort_code  fixed bin(35),			/*  Error code (Output)  */
     sort_input_exit  entry(fixed bin(35)) variable,	/*  User input_file proc (Output)  */
     sort_output_exit  entry(fixed bin(35)) variable,	/*  User output_file proc(Output)  */
     arg_err_sw  bit(1),				/*  Error(s) in arguments (Output)  */
     fatal_sw  bit(1),				/*  Fatal error encountered (Output)  */
     keys_ptr ptr,					/*  Keys structure (Output)  */
     exits_ptr ptr,					/*  Exits structure(Output)  */
     temp_sd_int  ptr ,				/*  Temporary segment for lex_string_ (Output)  */
     temp_sd_lex  ptr ) parameter;			/*  Temporary segment for S/M.D. internal form (Output) */

/*   EXTERNAL ENTRIES     */
dcl  check_star_name_$entry  entry(char(*) aligned, fixed bin(35));
dcl  convert_status_code_  entry(fixed bin(35), char(8) aligned, char(100) aligned);
dcl  expand_path_ entry(ptr, fixed bin, ptr, ptr, fixed bin(35));
dcl  get_equal_name_  entry(char(*) aligned, char(*) aligned, char(32) aligned, fixed bin(35));
dcl  get_pdir_ entry returns(char(168) aligned);
dcl  hcs_$make_seg entry(char(*) aligned, char(*) aligned, char(*), fixed bin(5), ptr, fixed bin(35)),
     hcs_$truncate_seg entry(ptr, fixed bin(24), fixed bin(35)),
     hcs_$set_bc_seg entry(ptr, fixed bin(24), fixed bin(35)),
     hcs_$status_mins entry(ptr, fixed bin(2), fixed bin(24), fixed bin(35));
dcl  ioa_$ioa_stream  entry options(variable),
     ioa_$rsnnl entry options(variable);
dcl  sub_err_  entry options(variable);
dcl  translator_temp_$get_segment  entry(char(*) aligned, ptr, fixed bin(35));

dcl  sort_convert_internal entry(ptr, ptr, ptr, ptr, ptr, ptr, fixed bin(24), fixed bin(24), fixed bin(35));

/*   EXTERNAL STATIC     */

% include sort_ext;

dcl (error_table_$pathlong,
     error_table_$out_of_sequence,
     error_table_$dirseg) external static fixed bin(35);

/*   INTERNAL STATIC   (constants only)   */
dcl (on init("1"b),
     off init("0"b) ) bit(1) internal static;
dcl  io_exits_version_max fixed bin init(1) internal static;	/*   Currently only 1 version.   */

/*   AUTOMATIC AND BASED   */
dcl  user_out_sw_temp char(8);

dcl  source_sort_desc ptr;
dcl  seg_type fixed bin(2),
     bit_count fixed bin(24),
     seg_length fixed bin(24);

dcl  convert_int_code fixed bin(35),
     verify_input_files_code fixed bin(35);


% include sort_sd;
dcl  io_exits_ptr ptr,
     work_ptr ptr,
     filesize float bin(27);

dcl  hcs_code fixed bin(35);
dcl  expand_code fixed bin(35);
dcl  check_star_code fixed bin(35);
dcl  equal_code fixed bin(35);

dcl  in_dir char(168) aligned,
     in_ename char(32) aligned,
     first_in_ename char(32) aligned,
     first_in_kw  char(32),
     first_in_pathname  char(256),
     res_dir char(168) aligned,
     equal_name char(32) aligned,
     res_ename char(32) aligned,
     in_bit_count fixed bin(24),
     in_ptr ptr,
     type fixed bin(2),
     component char(32) aligned,
     comp_len fixed bin(17);

dcl  shortinfo char(8) aligned,
     longinfo char(100) aligned;

dcl  retval  fixed bin(35);

/*   Start   */

     if user_out_sw_par = "" then user_out_sw = "user_output";
     else if user_out_sw_par = "-bf" | user_out_sw_par = "-brief" then user_out_sw = "";
     else user_out_sw = user_out_sw_par;
     fatal_sw = off;
     keys_ptr,
     io_exits_ptr,
     exits_ptr = null();
     if dimension(sort_desc, 1) = 1 then do;
	source_sort_desc = sort_desc(lbound(sort_desc, 1));
	call sd_is_source;
	end;
     else if dimension(sort_desc, 1) = 2 & substr(whoami, 1, 5) = "merge" then do;
	keys_ptr = sort_desc(lbound(sort_desc, 1) + 0);
	exits_ptr = sort_desc(lbound(sort_desc, 1) + 1);
	end;
     else if dimension(sort_desc, 1) = 3 & substr(whoami, 1, 4)  = "sort" then do;
	keys_ptr = sort_desc(lbound(sort_desc, 1) + 0);
	exits_ptr = sort_desc(lbound(sort_desc, 1) + 1);
	io_exits_ptr = sort_desc(lbound(sort_desc, 1) + 2);
	end;
     else do;
	arg_err_sw = on;
 	if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
			"^a:  ^a Description argument has an array dimension of ^d.  Must be 1 or ^d.",
			whoami, caps(whoami), dimension(sort_desc, 1), extent_sd());
	end;
     /*   Following calls must be done in sequence, so inter-relationships can be checked.   */
     call check_io_exits;
     call process_input_par;
     call process_output_par;
     user_out_sw_temp = user_out_sw_par;
     read_count,
     write_count = 0;
     input_rec_deleted,		/*   Not used by Merge.   */
     input_rec_inserted,		/*   Not used by Merge.   */
     output_rec_deleted,
     output_rec_inserted = 0;

     return;	/*   to caller (sort_ or merge_)   */



extent_sd:  proc  returns(fixed bin);
     if substr(whoami, 1, 4) = "sort" then return(3);
     else return(2);
end extent_sd;


sd_is_source:  proc;
     call hcs_$status_mins(source_sort_desc, seg_type, bit_count, hcs_code);     /*   Get bit count.   */
     if seg_type = 2 then hcs_code = error_table_$dirseg;          /*   Must not be a directory.   */
     if hcs_code ^= 0 then do;
	fatal_sw = on;
	call convert_status_code_(hcs_code, shortinfo, longinfo);
	if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
		"^a:  ^a  ^a Description pathname ^a",
		whoami, longinfo, caps(whoami), sort_desc_pn);
	return;
	end;
     /*   Convert S.D. to internal form.   */
     call translator_temp_$get_segment((whoami), temp_sd_lex, hcs_code);
     if temp_sd_lex = null() then do;
	call unable_error("create", "sort_lex_");
	return;
	end;
     call hcs_$make_seg(get_pdir_(), unique_prefix||"sort_par_int_",
		"", 8+2  /*  rw  */, temp_sd_int, hcs_code);
     /*  ??  Test for error_table_$segknown  ??   */
     if temp_sd_int = null() then do;
	call unable_error("create", "sort_par_int_");
	return;
	end;
     call sort_convert_internal(source_sort_desc, temp_sd_int, temp_sd_lex, keys_ptr, io_exits_ptr, exits_ptr,
		bit_count, seg_length, convert_int_code);
     if convert_int_code ^= 0 then do;
	/*   Error; cannot use Sort/Merge Description internal format.   */
	arg_err_sw = on;
	return;
	end;
     call hcs_$truncate_seg(temp_sd_int, seg_length, hcs_code);
     if hcs_code ^= 0 then do;
	call unable_error("truncate", "sort_par_int_");
	return;
	end;
     call hcs_$set_bc_seg(temp_sd_int, seg_length*36, hcs_code);
     if hcs_code ^= 0 then do;
	call unable_error("set bit count for", "sort_par_int_");
	return;
	end;
end sd_is_source;


check_io_exits:  proc;   	/*   Validate io_exits structure.   */
     if io_exits_ptr = null() then return;
     work_ptr = io_exits_ptr;
     if io_exits.version < 0 | io_exits.version > io_exits_version_max then do;
	arg_err_sw = on;
	if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
			"^a:   IO_exits structure has invalid version number ^d.  Must be > 0 and <_ ^d.",
			whoami, io_exits.version, io_exits_version_max);
	io_exits_ptr = null();		/*   to protect process_input_par & process_output_par   */
	end;
     else if substr(whoami, 1, 5) = "merge" then do;
	/*   Reject input_file, output_file exits for Merge.   */
	io_exits_ptr = null();	/*   To protect process_input_par, process_output_par, & merge_.   */
	arg_err_sw = on;
	if io_exits.input_file_exit ^= noexit then do;
	     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
		"^a:  Input_file exit not permitted.", whoami);
	     end;
	if io_exits.output_file_exit ^= noexit then do;
	     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
		"^a:  Output_file exit not permitted.", whoami);
	     end;
	end;
end check_io_exits;


process_input_par: proc;
/*   Set driver to user's or sort's (merge's) input procedure.
     Check invalid input file specifications.
     Check for and reject star convention.
     Error if input file specification(s) and user's exit both are present,
     or if neither is present.   */
dcl  kw_index  fixed bin(17);
dcl  w2_index  fixed bin(17);
     if input_file(lbound(input_file, 1)) = "" then do;  /*  user did not supply input file specifications.   */
	input_driver_is_sort = off;
	end;
     else do;  /*  user did supply input file specifications.   */
	call verify_input_files(verify_input_files_code);	/*   Validate input_file array.   */
	if verify_input_files_code = 1 then do;
	     arg_err_sw = on;
	     end;
	input_driver_is_sort = on;
	end;
     if io_exits_ptr = null() then  /*  user did not supply io_exits structure.  */
	do;
	sort_input_exit = noexit;
	end;
     else  /*  user did supply io_exits structure.   */
	do;
	/*  io_exits structure already verified by check_io_exits.   */
	sort_input_exit = io_exits_ptr->io_exits.input_file_exit;
	end;
     if input_file(lbound(input_file, 1)) = "" & sort_input_exit = noexit then
	do;
	if substr(whoami, 1, 4) = "sort" then do;
	     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
		"^a:  Neither input file(s) nor user input_file exit procedure specified.",
		whoami);
	     end;
	else if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
			"^a:  No input file(s) specified.",
			whoami);
	arg_err_sw = on;
	end;
     if input_file(lbound(input_file, 1)) ^= "" & input_file_exit_sw = on then do;
	if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
	     "^a:  Both input file(s) and user input_file exit procedure specified.",
	     whoami);
	arg_err_sw = on;
	/*   Driver would use input file specifications since input_driver_is_sort switch is on.   */
	end;

verify_input_files:  proc(code);
/*   Validate form of input_file array:   */
dcl  code fixed bin(35) parameter;
dcl  i  fixed bin(17);

     code = 0;
     if dimension(input_file, 1) > input_file_max then do;
 	code = 1;
	if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
			"^a:  Invalid number of input files ^d.  Must be <_ ^d.",
		whoami, dimension(input_file, 1), input_file_max);
	end;
     first_in_ename = "";		/*   Initialize for process_equal.   */
     do i = lbound(input_file, 1) to hbound(input_file, 1);
	call scan_file_spec(input_file(i), kw_index, w2_index);
	if i = lbound(input_file, 1) then first_in_kw = before(substr(input_file(i), kw_index), " ");
	if substr(input_file(i), kw_index, 4) = "-if "
	 | substr(input_file(i), kw_index, 12) = "-input_file " then do;
	     /*   Reject star convention if used.   */
	     in_ename = "";	/*   Initialize.   */
	     call expand_path_(addr(substr(input_file(i), w2_index)), length(substr(input_file(i), w2_index)),
		addr(in_dir), addr(in_ename), expand_code);
	     if expand_code ^= 0 then do;
		call convert_status_code_(expand_code, shortinfo, longinfo);
		if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw, 
		"^a:  ^a  Checking star convention for input file ^d, pathname ^a",
			whoami, longinfo, i, substr(input_file(i), w2_index));
		arg_err_sw = on;
		end;
	     if in_ename ^= "" then do;
		/*   Check * convention and indicate error.   */
		call check_star_name_$entry(in_ename, check_star_code);
		if check_star_code ^= 0 then do;
		     arg_err_sw = on;
		     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
			"^a:  Star convention not allowed.  Input file ^d, pathname ^a",
			whoami, i, substr(input_file(i), w2_index));
		     end;
		end;
	     if i = lbound(input_file, 1) then do;
		first_in_ename = in_ename;	/*   Used by process_equal.   */
		first_in_pathname = substr(input_file(i), w2_index);	/*   Used by process_equal   */
		end;
	     end;
	else if substr(input_file(i),kw_index, 5) = "-ids "
	      |substr(input_file(i), kw_index, 19) = "-input_description " then do;
	     end;
	else do;  	/*   Error.   */
	     arg_err_sw = on;
	     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
		"^a:  Invalid input file specification ^a for input file ^d.",
		whoami, (input_file(i)), i);
	     end;
	end;	/*   of do i = lbound ...   */
end verify_input_files;


end process_input_par;




process_output_par:  proc;
/*   Set driver to user's or sort's (merge's) output procedure.
     Check for invalid output file specification.
     Check -replace; process equals convention.
     Error if output file specification and user's exit both are present,
     or if neither is present.   */
dcl  (kw_index, w2_index)  fixed bin(17);
     if output_file = "" then do;  /*  user did not supply output file specification.   */
	output_driver_is_sort = off;
	end;
     else do;  /*  user did supply output file specification.   */
	output_driver_is_sort = on;
	call scan_file_spec(output_file, kw_index, w2_index);
	if substr(output_file, kw_index, 4) = "-of "
	 | substr(output_file, kw_index, 13) = "-output_file " then do;
	     curr_output_file_name = substr(output_file, w2_index);
	     curr_output_file_attach = "";
	     if substr(output_file, w2_index) = "-rp"
	      | substr(output_file, w2_index) = "-replace" then do;
		if input_file(lbound(input_file, 1)) = "" then do;
		     arg_err_sw = on;
		     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
			"^a:  Output file specification is ^a but no input file was specified.",
			whoami, output_file);
		     end;
		if first_in_kw = "-ids" | first_in_kw = "-input_description" then do;
		     arg_err_sw = on;
		     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
	"^a:  Output file specification is ^a but first input file specification is an attach description.",
			whoami, output_file);
		     end;
		if substr(whoami, 1, 5) = "merge" then do;
		     arg_err_sw = on;
		     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
			"^a:  Output file specification ^a not permitted.",
			whoami, output_file);
		     end;
		curr_output_file_name = first_in_pathname;
		end;
	     else do;	/*   Is still -of but is not -rp.   */
		call process_equal(curr_output_file_name);
		end;
	     end;  	/*   of being -of specification.   */
	else if substr(output_file, kw_index, 5) = "-ods "
	      | substr(output_file, kw_index, 20) = "-output_description " then do;
	     curr_output_file_name = "";
	     curr_output_file_attach = substr(output_file, w2_index);
	     end;
	else do;  	   /*   Error.   */
	     arg_err_sw = on;
	     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
		"^a:  Invalid output file specification ^a",
		whoami, output_file);
	     end;
	end;
     if io_exits_ptr = null() then  /*  user did not supply io_exits structure.  */
	do;
	sort_output_exit = noexit;
	end;
     else  /*  user did supply io_exits structure.  */
	do;
	/*  io_exits structure already validated by check_io_exits.   */
	sort_output_exit = io_exits_ptr->io_exits.output_file_exit;
	end;
     if output_file = "" & sort_output_exit = noexit then
	do;
	if substr(whoami, 1, 4) = "sort" then do;
		 if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
			"^a:  Neither output file nor user output_file exit procedure specified.",
			whoami);
		     end;
	else if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
			"^a:  No output file specified.",
			whoami);
	arg_err_sw = on;
	end;
     if output_file ^= "" & output_file_exit_sw = on then do;
	if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
			"^a:  Both output file and user output_file exit procedure specified.",
			whoami);
	arg_err_sw = on;
	end;
end process_output_par;


scan_file_spec:  proc(file_spec, kw_par, w2_par);
dcl (file_spec char(*),
     kw_par fixed bin(17),
     w2_par  fixed bin(17) ) parameter;
     kw_par, w2_par = 1;
     do while(substr(file_spec, w2_par, 1) = " " & w2_par < length(file_spec));
	w2_par = w2_par + 1;
	end;
     kw_par = w2_par;
     do while(substr(file_spec, w2_par, 1) ^= " " & w2_par < length(file_spec));
	w2_par = w2_par + 1;
	end;
     do while(substr(file_spec, w2_par, 1) = " " & w2_par < length(file_spec));
	w2_par = w2_par + 1;
	end;
end scan_file_spec;


process_equal:  proc(res_pn);
/*   Process equals convention, for output file pathname against first input file pathname   */
dcl  res_pn char(*) parameter;		/*   path name   */
/*   Exit if first input_file entry name is blank.     */
     if input_file(lbound(input_file, 1)) = "" | first_in_ename = "" then return;
     /*   Also exit if there is an attach for the first input file.   */
     if first_in_kw = "-ids" | first_in_kw = "-input_description" then return;
     equal_name = "";		/*   Initialize.   */
     call expand_path_(addr(res_pn), length(res_pn),
		addr(res_dir), addr(equal_name), expand_code);
     if expand_code ^= 0 then do;
	call expand_err(expand_code, "output file", res_pn);
	return;
	end;
     if equal_name = "" then return;		/*   Return if no entry name to process equals convention on   */
     equal_code = 0;		/*   get_equal_name_ sometimes forgets to clear status code   */
     call get_equal_name_(first_in_ename, equal_name, res_ename, equal_code);
     if equal_code ^= 0 then
	do;
	call equal_err(equal_code, "output file", equal_name);
	return;
	end;
     if (index(res_dir, " ") = 0 & index(res_ename, " ") = 0)
     /*   Neither res_dir nor res_ename contains a space   */
	| (index(res_dir, " ") - 1 + index(res_ename, " ") - 1 + 1) >= 168 then do;
     /*   Length of concatenated path name too long   */
	arg_err_sw = on;
	call convert_status_code_(error_table_$pathlong, shortinfo, longinfo);
	if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
			"^a:  ^a  Processing ^a pathname for equals convention.", whoami, longinfo, "output file");
	return;
	end;
     if res_dir = ">" then res_pn = ">"|| res_ename;
     else res_pn = before(res_dir, " ") ||">"|| res_ename;
     return;
end process_equal;


caps:  proc(whoami)  returns(char(5));
dcl  whoami  char(*) parameter;
     if substr(whoami, 1, 4) = "sort" then return("Sort");
     else return("Merge");
end caps;


expand_err: proc(code, name, value);
/*   Error from expand_path_.   */
dcl  code fixed bin(35),
     name char(*),
     value char(*);
     arg_err_sw = on;
     call convert_status_code_(code, shortinfo, longinfo);
     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
		     "^a:  ^a  Expanding ^a pathname ^a for equals convention.", whoami, longinfo, name, value);
end expand_err;

equal_err:  proc(code, name, value);
/*   Error from get_equal_name_.   */
dcl  code fixed bin(35),
     name char(*),
     value char(*) aligned;
     arg_err_sw = on;
     call convert_status_code_(code, shortinfo, longinfo);
     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
		     "^a:  ^a  Processing ^a entryname ^a for equals convention.", whoami, longinfo, name, value);
end equal_err;


unable_error:  proc(action, name);
dcl (action,
     name) char(*) parameter;
     fatal_sw = on;
     call convert_status_code_(hcs_code, shortinfo, longinfo);
     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
		"^a:  ^a  Unable to ^a temporary segment [pd]>^a^a",
		whoami, longinfo, action, unique_prefix, name);
end unable_error;


noexit:  entry(sort_code);	/*   This is both sort_$noexit and merge_$noexit, when bound.   */
/*   Must set code ^= 0 to indicate erroneous call without a defined user procedure.   */
     call sub_err_(error_table_$out_of_sequence, (whoami), "c", null(), retval,
	"The entry ""^a_$noexit"" cannot be called.", before(whoami, "_"));
     return;


end sort_merge_subroutine;
