/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* Modified on 01/25/82 by FCH, [1], delete variable initial list */

  return:  proc(retp,retbl,ec);
			/*    EXTERNAL ENTRIES    */
			/*    EXTERNAL STATIC    */

%include sort_ext;
	dcl	error_table_$data_gain fixed bin(35) ext,
		error_table_$data_loss fixed bin(35) ext,
		error_table_$out_of_sequence fixed bin(35) ext,
		error_table_$data_seq_error fixed bin(35) ext,
		error_table_$end_of_info fixed bin(35) ext,
		error_table_$long_record fixed bin(35) ext,
		error_table_$short_record fixed bin(35) ext,
		error_table_$fatal_error fixed bin(35) ext,
		error_table_$request_not_recognized fixed bin(35) ext,
		error_table_$improper_data_format fixed bin(35) ext;
			/*  PARAMETERS,AUTOMATIC, & BASED  */
	dcl merge_read_count(10) fixed bin(30) int static;  /*  read count of  each file  */
	dcl	(retp ptr,
		retbl fixed bin(21)) parameter;
	dcl
		(ns,np) fixed bin(30) int static,
		s(36) static,
		retfb fixed bin(30);
	dcl	i1 fixed bin(30);
	dcl	1 IN(127 * 1024) based,
		   2 ctr fixed bin(30),  /*  serial record count  */
		   2 by_off fixed bin(30);  /*  byte offset of current record  */
	dcl	(t,n,v1,v2,l,x,j,y,lft,rit,i) fixed bin(30) int static;
%include sort_common;

dcl  retval  fixed bin(35);
		       /*  following declarations are for output  record  exit  */
	dcl	hold_ptr ptr int static,
		hold_len fixed bin(21) int  static,
		s_retp ptr int static,
		s_retbl fixed bin(21) int static,
		rec_ptr_2 ptr int static,		/*  next record pointer  */
		rec_len_2 fixed bin(21) int static,	/*  next record length  */
		u_rec_ptr_2 ptr int static,  /*  rec_ptr_2 handed to the user  */
		u_rec_len_2 fixed bin(21) int static,  /*  rec_len_2 handed to the user  */
		action fixed bin int static,	/*  action code  */
		equal_key fixed bin(1) int  static,
		seq_check_sw bit(1) int static,
		close_exit_sw bit(1) int static,
		cur_rec_ptr ptr int static,		/*  current record pointer  */
		area_len fixed  bin(21)  int static,	/*  current  record length  */
		equal_key_sw bit(1) int static,
		old_retp ptr int static;		/*  old retp  pointer  */
	dcl	old_rec_ptr ptr int static;    /*  previous record for sequence checker  */
	       /*  Following inserted for merge   	*/
	dcl	in_attach_desc char(176),
		in_switch char(32),
		in_switch_length fixed bin(17),
		iox_code fixed bin(35),
		in_mode fixed bin init(4),
		no_extend bit(1) aligned init("0"b);
	dcl	input_file_len(10) fixed bin(21) int static,    /*  record length of each file  */
/*1*/		in_buff_len fixed bin(21) ;
	dcl	hold_cur_rec_ptr ptr int static,  /*  hold ptr to current record in sort's area  */
		hold_area_len fixed bin(17) int static;  /*  hold length of current record */
dcl  iox_$attach_ioname entry(char(*), ptr, char(*), fixed bin(35));
dcl  iox_$open entry(ptr, fixed bin, bit(1) aligned, fixed bin(35));
dcl  iox_$read_record entry(ptr, ptr, fixed bin(21), fixed bin(21), fixed bin(35));
dcl  iox_$close entry(ptr, fixed bin(35));
dcl  iox_$detach_iocb entry(ptr, fixed bin(35));
dcl  iox_$destroy_iocb entry(ptr, fixed bin(35));

dcl  establish_cleanup_proc_  entry(entry);
dcl  sub_err_ entry options(variable);
dcl  ioa_$rsnnl entry options(variable);

/*1*/	in_buff_len = max_rec_length;			/* maximum record length */
	ec = 0;     /*  initially set error code  */
		/*  test state code  */
	if state ^= 5 then    /*  sequence error  */
	    do;
		ec = error_table_$out_of_sequence;
		return;
	    end;
	on illegal_procedure call illegal_procedure_handler;
	if disaster2 = 0 then do;			/* Initial  call to RETURN. */
	     disaster2 = 1;
	    old_rec_ptr=null();  /*  set initially for sequence check previous record  */
			/*  following set for output record exit  */
	    equal_key_sw="0"b;
	    equal_key=1;
	    seq_check_sw="1"b;
	    action=10;
	     if mii = 0 then
		do;    /*  no records released  */
		 ec = error_table_$end_of_info;
		 if output_record_exit_sw = 0 then return;
		 else do;   /*  prepare to take exit  */
		        retp=null();
		        go to in;
		 end;
		end;
	     call A0;
	     return_count = return_count + 1;
	     go to rel_ck;
	end;

 g_a_w:	    if output_record_exit_sw ^= 0 & action = 3 | action = 11 then
		do;  /*  output rec sw on and just completed  inserting a record  */
		 if old_retp  =  rec_ptr_b  /*  just returned  current was in rec_ptr_b  */
		   then cur_rec_ptr=rec_ptr_a;  /*  set new current  area to rec_ptr_a  */
		   else cur_rec_ptr=rec_ptr_b;  /*  just  returned current was in rec_ptr_1-
					    set new current area to  rec_ptr_b    	*/
		 substr(cur_rec_ptr->S,1,u_rec_len_2)=substr(u_rec_ptr_2->S,1,u_rec_len_2);
		 area_len=u_rec_len_2;  /*  move just inserted record into current area  */
		 if action=11 then ec=error_table_$end_of_info;
		    /* just inserted a record at end of file-reset ec  */
		 rec_ptr_2=hold_ptr;  /*  move previous  next record into current next  */
		 rec_len_2=hold_len;
		 old_rec_ptr=msp(v1);  /*  save winner area ptr  */
		 msp(v1)=msp(mii+1);  /*  replace winner ptr with spare ptr  */
		 msp(mii+1)=old_rec_ptr;  /*  replace spare ptr with winner ptr  */
		 output_rec_inserted=output_rec_inserted+1;
		 go to in;  /*  transfer to  point where  exit routine is called-after determining new  winner*/
		end;
	if output_record_exit_sw^=0 & action=error_table_$end_of_info
		then go to in;  /*  just wrote last record  */
	if mii=1 then
	    do;    /*   single merge input file  */
	        /*  read another record from winner merge file  */
	     call iox_$read_record(merge_in_iocb_ptrs(1),msp(1),in_buff_len,input_file_len(1),iox_code);
	     if iox_code = error_table_$end_of_info then    /*  end_of file-  */
		do;    /*  end of file, close-detach-destroy iocb ponter  */
		/*   Close		*/
                  close:  call iox_$close(merge_in_iocb_ptrs(1), iox_code);
                        if iox_code ^= 0 then
	                   do;
	/*   error_table_$not_open   */
		         call iox_error("Closing",1);
	                   end;

		/*    Detach   */
                        call iox_$detach_iocb(merge_in_iocb_ptrs(1), iox_code);
                        if iox_code ^= 0 then
	                   do;
	/*   error_table_$not_attached,
		       $not_closed     */
	                   call iox_error("Detaching",1);
	                   end;

		/*  Destroy iocb  */
                        call iox_$destroy_iocb(merge_in_iocb_ptrs(1), iox_code);
                        merge_in_iocb_ptrs(1) = null();
     /*  no errors returned?   */
		    ec=error_table_$end_of_info;
		    read_count=merge_read_count(1);  /*  set read count  */
		    goto rel_ck;
		end;
	     else if iox_code ^= 0 then
		call iox_error("Reading",1);
	     else do;  /*  record successfully read  */
		merge_read_count(1)=merge_read_count(1)+1;  /*  increment read count  */
		release_count=release_count+1;
	          w_p=ptr(msp(1),fixed(rel(msp(1)),21)-1);  /*  move back 1 word
					to set length    */
	          fb=input_file_len(1);
		retbl=fb;    /*  set winner length  */
		retp=msp(1);    /*  set return pointer to record(winner) just read  */
		end;
	    return_count=return_count+1;
	    go to rel_ck;
	end;

/* Multiple merge strings. */
	call A2;
	call A1;
	return_count = return_count + 1;
 rel_ck:  if release_count < return_count then
	    do;    /*  data gain test  */
	      if ec=error_table_$end_of_info then return;  /*  already at end of info  */
	      ec=error_table_$data_gain;
	      return;
	    end;
 in:;
		    /*  following code is for output record  exit routine  */
	    if output_record_exit_sw ^= 0 then
		do;	/*  take output record exit  */
		    if action = error_table_$end_of_info then
			do;    /*  just wrote   last record  */
			   ec=error_table_$end_of_info;  /*  reset  error code  */
			   return;
			end;
		    if action ^= 3 then
		      do;    /*  just got winner record  */
		             /*  save winner record pointer  */
		        s_retp=retp;
	  	        s_retbl=retbl;
		      end;
		    if action=10 then
		      do;  /*  indicating first time through-no curent record,no previously
			   written record							*/
		        rec_ptr_2=retp;  /*  set up next record-to  winner  */
	    	        rec_len_2=retbl;
		        cur_rec_ptr=null();  /*  set current record ptr to null */
 ent:		        action=0;
		        if ec=error_table_$end_of_info then rec_ptr_2=null();
			/*  deleted every successive record of the file  */
		        u_rec_ptr_2=rec_ptr_2;  /*  set user's next pointer and next length  */
		        u_rec_len_2=rec_len_2;
		        if close_exit_sw="0"b then
		        call  sort_output_record_exit(cur_rec_ptr,area_len,u_rec_ptr_2,u_rec_len_2,
				action,equal_key,equal_key_sw,seq_check_sw,close_exit_sw);
		        old_retp=null();  /*  to indicate,next time through,that there is no previous record-
				       therefore no sequence check				*/
		        if action=3 then
			do;  /*  insert record at beginning of  file  */
			 call ck_len(u_rec_len_2,"inserted");  /*  check returned record length  */
			 cur_rec_ptr=rec_ptr_b;  /*  arbitrarily set to b  */
			 substr(cur_rec_ptr->S,1,u_rec_len_2)=substr(u_rec_ptr_2->S,1,u_rec_len_2);
				/*  set up current record  */
		 	 area_len=u_rec_len_2;
			 rec_ptr_2=retp;  /*  reset next reocrd to same-previous next record  */
		 	 rec_len_2=retbl;
			 output_rec_inserted=output_rec_inserted+1;
			 go to in;    /*  don't write current record-rather go back & call exit */
			end;
		        if ec = error_table_$end_of_info then action=ec;
			/*  deleted the entire file  */
		        msp(v1)=msp(mii+1);  /*  replace winner buffer pointer  */
		        msp(mii+1)=retp;  /*  replace spare buffer ptr with winner ptr  */
	   	        go to g_a_w;
		      end;
		    if action= 0 then
		      do;    /*  just completed accepting record  */
		        if old_retp=rec_ptr_b    /*  just returned current was in rec_ptr_b  */
			then cur_rec_ptr=rec_ptr_a;  /*  set new current area  to rec_ptr_a  */
			else cur_rec_ptr=rec_ptr_b;  /*  set new current area  to rec_ptr_b   */
		        substr(cur_rec_ptr->S,1,rec_len_2)=substr(rec_ptr_2->S,1,rec_len_2);
				/*  move previous next record into current  area  */
		        area_len=rec_len_2;
		        rec_ptr_2=retp;    /*  set up new  next record   */
		        rec_len_2=retbl;
		      end;
		    else if action=1 then
		      do;    /*  just  completed deleting the current record  */
		        substr(cur_rec_ptr->S,1,rec_len_2)=substr(rec_ptr_2->S,1,rec_len_2);
				/*  move old next record into current record  area  */
		        area_len=rec_len_2;
		        rec_ptr_2=retp;    /*   set up new next  record  */
		        rec_len_2=retbl;
		        output_rec_deleted=output_rec_deleted+1;
		      end;
		    else if action=2 then
		      do;  /*  just completed deleting next record-leave old current record alone  */
		        rec_ptr_2=retp;    /*  set up new next record  */
		        rec_len_2=retbl;
		        output_rec_deleted=output_rec_deleted+1;
		        if cur_rec_ptr=null() then go to ent;  /*  just deleted first record(of the file) */
		      end;
		    else if ^(action=11 | action=3) then
		      do;    /*  illegal action code  */
		        call sub_err_(error_table_$request_not_recognized,whoami, "c", null(), retval,
			     "Invalid action = ^d by user output_record exit procedure.",action );
		        ec=error_table_$fatal_error;
		        goto exit;
		      end;
		    action=0;  /*  set here in  case close exit is on  */
		    if close_exit_sw="1"b then go to sim;     /*  close  exit  switch is  on  */
		    if ec=error_table_$end_of_info then rec_ptr_2=null();  /*  no next rec-end of info */
		    if equal_key_sw="1"b then  /*  equal key swtich on  */
		      do;    /*  check for equal keys between current and next  */
		        pt1=cur_rec_ptr;  /*   current record  */
		        pt2=rec_ptr_2;  /*  next record  */
		        if pt1^=null() & pt2^= null() then
		        call sort_comp;  /*  invoke sort's comparison routine  */
		        equal_key=result;
		      end;
		    u_rec_ptr_2=rec_ptr_2;  /*  set user's next pointer and next length  */
		    u_rec_len_2=rec_len_2;
		    hold_cur_rec_ptr=cur_rec_ptr;  /*  save pointer to current record  */
		    hold_area_len=area_len;  /*  dave length of current record  */
		    call sort_output_record_exit(cur_rec_ptr,area_len,u_rec_ptr_2,u_rec_len_2,
					action,equal_key,equal_key_sw,seq_check_sw,close_exit_sw);
	 	    if action ^= 1 & cur_rec_ptr ^= hold_cur_rec_ptr then
			do;  /*  move record pointed to by user ptr into sort's area  */
		   	   substr(hold_cur_rec_ptr->S,1,area_len)=substr(cur_rec_ptr->S,1,area_len);
		   	   cur_rec_ptr=hold_cur_rec_ptr;  /*  restore cur_rec_ptr to user area  */
			end;
		    if action=1 | action=2 then
		      do;    /*  delete current or next record  */
		             /*  don't return a record back to sort_output  */
			   /*  rather go back and get anther  winner  */
			   /*  don't perform sequence  check  */
		        if ec=error_table_$end_of_info then   /*  no more records-simply   */
			do;    /*  return after incrementing deletion count  */
		   	   output_rec_deleted=output_rec_deleted+1;
			   return;
			end;
		        if action=1 then
			do;    /*  deleting current record  */
			   msp(v1)=msp(mii+1);  /*  replace winner buffer ptr with spare ptr  */
			   msp(mii+1)=rec_ptr_2;  /*  preserve next record pointer  */
		   	   cur_rec_ptr=hold_cur_rec_ptr;  /*  restore held value of cur_rec_ptr  */
			   area_len=hold_area_len;    /*  restore area len  */
			end;
		        if action=2 then call ck_len(area_len,"summarized");  /*  check returned current record len  */
		        goto g_a_w;   /*  transfer  to  get another  winner  */
		      end;
 sim:		    if action=0 then
		      do;  /*  accept current record  */
		        call ck_len(area_len,"altered");  /*  check returned current rec length  */
		        retp=cur_rec_ptr;  /*  set record return pointer to current record  */
		        retbl=area_len;
		      end;
		    else if action=3 then
		      do;  /*  insert record pointed to by rec_ptr_2-next record  */
		        call ck_len(u_rec_len_2,"inserted");  /*  check length of record to be inserted  */
		        call ck_len(area_len,"altered");    /*  check returned current record length  */
		        hold_ptr=s_retp;  /*  save old next pointer  */
		        hold_len=s_retbl;
		        retp=cur_rec_ptr;  /*  set return record to current record  */
		        retbl=area_len;
		      end;
	     	    else
		      do;    /*  illegal action code  */
		        call sub_err_(error_table_$request_not_recognized,whoami, "c", null(), retval,
			     "Invalid action = ^d by user output_record exit procedure.",action);
		        ec=error_table_$fatal_error;
		        goto exit;
		      end;
		    if ec=error_table_$end_of_info then
		      do;     /*  no more records to be read  */
		        if action ^= 3 then
			do;    /*  no record to be inserted  */
		     	   ec=0;  /*  reset ec so that sort_output will write record  */
				/*  retp should already be set  */
		  	   action=error_table_$end_of_info;  /*  set to indicate,on next time
						through, no records left  		*/
			end;
			else do;  /*  insert record at end of file-in rec_ptr_2  */
				/*  action=s 3  */
			   ec=0;  /*  reset so that sort_output will write current record  */
			   action=11;  /*  indicating no more records to be read  */
			end;
		        v1=mii;  /*  in case of multiple merge strings-an extra pass will be made
				through A2 and A!			*/
		      end;
		    if seq_check_sw="1"b & old_retp^=null() then
		/*  seq bit on and a previously written record  */
		      do;  /*  perform  sequence check-between current and record previously written-
			 cur_rec_ptr and rec_ptr_a or rec_ptr_b				    */
		        if retp=rec_ptr_a
			then pt1=rec_ptr_b;  /*  previous record is in rec_ptr_b  */
			else  pt1=rec_ptr_a;  /*  previous  record is in  rec_ptr_a  */
		        pt2=retp;    /*  current record  */
		        call sort_comp;
		        if result= 1 then ec=error_table_$data_seq_error;  /*  out of sequence-fatal  error  */
		      end;
		    old_rec_ptr=msp(v1);  /*  temporarily save winner ptr  */
		    msp(v1)=msp(mii+1);  /*  replace winner buffer pointer with spare  */
		    msp(mii+1)=old_rec_ptr;  /*  replace spare ptr with winner ptr  */
 con:		    old_retp=retp;    /*  set so that,on next time through,can distinguish which
				   record pointer was used			*/
		    return;
		end;    /*  end sort output record exit code  */
	    if return_count=0 then return;  /*  null output file-no sequence check  */
			/*  following is sequence checker   	*/
	    if return_count=1 | ec=error_table_$end_of_info then
		do;	/*  set up initially for sequence check  */
		   msp(v1)=msp(mii+1);    /*  replace winner buffer pointer with extra buffer ptr  */
		   msp(mii+1)=retp;  /*  replace miith ptr with winner area pointer  */
		end;
		else do;
		   pt1=msp(mii+1);    /*  set previous record pointer  */
		   pt2=retp;         /*  set current record pointer  */
		   call sort_comp;     /*  perform sequence check  */
		   if result=1 then ec=error_table_$data_seq_error;  /*  sequence error  */
		   msp(v1)=msp(mii+1);/*  replace winner buffer pointer  */
		   msp(mii+1)=retp;  /*  replace miith ptr with winner area ptr  */
		end;
 exit:	return;

A0:	proc;
	    if mii=1 then    /*  single merge input file  */
	      do;
		call init_return;    /*  get first winner  */
		if merge_read_count(1)=0 then    /*  a single null input file  */
		   do;
		    ec=error_table_$end_of_info;
		    goto rel_ck;
		   end;
		retp=msp(1);    /*  set winner pointer  */
		retbl=fb;    /*   set winner length  */
		v1=1;	/*  set for use in sequence checker  */
		return;
	      end;

	     do i = 1 to mii;			/* Set indices for merge. */
		sip -> I (i) = i;			/*  sets ups I array  */
	     end;

/*
   calculate the lengths of
   lists and their start pointers
   in a linear set.
   */
	     t = 0;
	     l = mii;				/*  number of merge srings  */
	     do n = 1 by 1 while (l>1);
		s (n) = t;			/* start of the next list. */
		if substr(unspec(l),36,1) then
		   do;  /*    l odd  */
		     l = l+1;  /*  make the length even  */
		     sip->I(t+l) = 0;  /*  clear 2nd word of pair if l was odd  */
		   end;
		t = t+l;				/* accumulate the lengths. */
		l = divide(l,2,24);
	     end;
	     n = n-1;
	     call init_return;  /*  call. proc which will read first record of each merge file,
		       	    along with firstly attaching,opening, etc.  */

/* Set s(n) to (one more than) the index to the list
   for the final 2 records to be compared. */
/*  below rearranges I array to reflect sorted records(the first record of each merge
   string being looked at)				*/
	     do i = 2 to n;
		lft = s (i-1);
		rit = s (i) ;
		do j = 1 by 2 to (rit - lft);
		     x = lft+j;
		     v1 = sip -> I (x);		/*  indices in I(sip)  */
		     v2 = sip -> I (x+1);
		     if v1=0 then v1=v2;    /*  no first record  */
		     else if v2>0 then
			do;
			   pt1=msp(v1);
			   pt2=msp(v2);
			   call sort_comp;
			   compares_counter=compares_counter+1;
			   if result=0 then    /*  rec0rds ranked equal  */
			      do;
				if v1<v2   /*  compares input order  */
		    		   then result=-1;  /*  rank record 1 first  */
				   else result=1;   /*  rank record 2 first  */
			      end;
			   if result=1 then v1=v2;  /*  record 2 ranks first-switch order  */
			end;
		     rit=rit+1;
		     sip->I(rit)=v1;
		end;
	     end;
	     i = s (n)+2;

	     y = s (n)+1;
	     call A1;
	     return;
   init_return:	proc;
	dcl	i fixed bin(30);

	     do i = 1 to mii;
		merge_read_count(i)=0;  /*  initialize read count for ith file  */
		call ioa_$rsnnl(unique_prefix || "sort_in_^d_",in_switch,in_switch_length,i);
			/*  converts from fixed bin to character srtring  */
		if merge_input_file_attaches(i) = ""
		    then in_attach_desc="vfile_ "||merge_input_file_names(i);
		    else in_attach_desc=merge_input_file_attaches(i);
		call iox_$attach_ioname(in_switch,merge_in_iocb_ptrs(i),in_attach_desc,iox_code);
		if iox_code ^= 0 then
		    call iox_error("Attaching",i);
		call iox_$open(merge_in_iocb_ptrs(i),in_mode,no_extend,iox_code);
		if iox_code ^= 0 then
		    call iox_error("Opening",i);
		        /*  read in first record of each file  */
		call iox_$read_record(merge_in_iocb_ptrs(i),msp(i),in_buff_len,
				     input_file_len(i),iox_code);
	     if iox_code = error_table_$end_of_info then    /*  end_of file-  */
		do;    /*  end of file, close-detach-destroy iocb ponter  */
		/*   Close		*/
                  close:  call iox_$close(merge_in_iocb_ptrs(i), iox_code);
                        if iox_code ^= 0 then
	                   do;
	/*   error_table_$not_open   */
	                   call iox_error("Closing",i);
	                   end;

		/*    Detach   */
                        call iox_$detach_iocb(merge_in_iocb_ptrs(i), iox_code);
                        if iox_code ^= 0 then
	                   do;
	/*   error_table_$not_attached,
		       $not_closed     */
	                   call iox_error("Detaching",i);
	                   end;

		/*  Destroy iocb  */
                        call iox_$destroy_iocb(merge_in_iocb_ptrs(i), iox_code);
                        merge_in_iocb_ptrs(i) = null();
     /*  no errors returned?   */
		    sip->I(i) = 0;
		    goto con;
		end;
		if iox_code ^= 0 then
		    call iox_error("Reading",i);
		if input_file_len(i)>max_rec_length then iox_code=error_table_$long_record;
		else if input_file_len(i)<min_rec_length then iox_code=error_table_$short_record;
		if iox_code^=0 then    /*  long or short record  */
		   do;
		    if merge_input_file_attaches(i)="" then
		       call sub_err_(iox_code,whoami, "c", null(), retval,
			     "Record ^d of input_file ^d,file name ^a",
			     merge_read_count(i),i,merge_input_file_names(i));
		       else call sub_err_(iox_code,whoami, "c", null(), retval,
			     "Record ^d of input file ^d,attach description ^a",
			     merge_read_count(i),i,merge_input_file_attaches(i));
		       iox_code=0;
		       ec=error_table_$fatal_error;
		       go to exit;
		   end;
		merge_read_count(i)=1;  /*  read 1st record of ith file  */
		release_count=release_count+1;
		w_p = ptr(msp(i),fixed(rel(msp(i)),21)-1);  /*  move back 1 word
						to set length  */
		fb = input_file_len(i);
   con:	    end;
	end init_return;
	end A0;

A1:	proc;
						/* Obtain the next record to output. */
	     v1 = sip -> I (y);
	     v2 = sip -> I (y+1);
	     if v1 ^= 0 then;
		else if v2 ^= 0 then;
		else do;
		    /*  data lost test  */
		if release_count > return_count
		    then ec = error_table_$data_loss;
		    else
		ec = error_table_$end_of_info;
		return_count=return_count-1;    /*  pre-adjust return_count  */
		do i=1 to mii;
		   read_count=merge_read_count(i)+read_count;  /*  summarize read count  */
		end;
		return;
	     end;
	     if v1 = 0 then do;
		v1 = v2;
	     end;
	     else
	     if v2>0 then do;
		   /*  below sets up pointers to records within S string  */
		pt1 = msp(v1);
		pt2 = msp(v2);
		call sort_comp;
		compares_counter=compares_counter+1;
	    if result = 0   then 	/*  records ranked equal  */
		do;
		 if v1 < v2	/*  compare merge string numbers  */
		    then result = -1;  /*  rank record 1 first  */
		    else result = 1;  /*  rank record 2 first  */
		 end;

		if result = 1 then do;    /*  second record first  */
		     v1 = v2;
		end;
	     end;
	     retp=msp(v1);
	     retbl=input_file_len(v1);   /*  set elngth  */
	     return;
	end A1;
A2:	proc;
	        /*  read another record from winner merge file  */
	     call iox_$read_record(merge_in_iocb_ptrs(v1),msp(v1),in_buff_len,input_file_len(v1),iox_code);
	     if iox_code = error_table_$end_of_info then    /*  end_of file-  */
		do;    /*  end of file, close-detach-destroy iocb ponter  */
		/*   Close		*/
                  close:  call iox_$close(merge_in_iocb_ptrs(v1), iox_code);
                        if iox_code ^= 0 then
	                   do;
	/*   error_table_$not_open   */
	                   call iox_error("Closing",v1);
	                   end;

		/*    Detach   */
                        call iox_$detach_iocb(merge_in_iocb_ptrs(v1), iox_code);
                        if iox_code ^= 0 then
	                   do;
	/*   error_table_$not_attached,
		       $not_closed     */
	                   call iox_error("Detaching",v1);
	                   end;

		/*  Destroy iocb  */
                        call iox_$destroy_iocb(merge_in_iocb_ptrs(v1), iox_code);
                        merge_in_iocb_ptrs(v1) = null();
     /*  no errors returned?   */
		    sip->I(v1) = 0;
		end;
	     else if iox_code ^= 0 then
		call iox_error("Reading",v1);
	     else do;  /*  record successfully read  */
		if input_file_len(v1)>max_rec_length then iox_code=error_table_$long_record;
		else if input_file_len(v1)<min_rec_length then iox_code=error_table_$short_record;
		if iox_code^=0 then    /*  long or short record  */
		   do;
		    if merge_input_file_attaches(v1)="" then
		       call sub_err_(iox_code,whoami, "c", null(), retval,
			     "Record ^d of input_file ^d,file name ^a",
			     merge_read_count(v1),v1,merge_input_file_names(v1));
		       else call sub_err_(iox_code,whoami, "c", null(), retval,
			     "Record ^d of input file ^d,attach description ^a",
			     merge_read_count(v1),v1,merge_input_file_attaches(v1));
		       iox_code=0;
		       ec=error_table_$fatal_error;
		       go to exit;
		   end;
		merge_read_count(v1)=merge_read_count(v1)+1;  /*  increment read count for ith file  */
		release_count=release_count+1;
	          w_p=ptr(msp(v1),fixed(rel(msp(v1)),21)-1);  /*  move back 1 word
					to set length    */
	          fb=input_file_len(v1);
		end;
	     do j = 2 to n;
		lft = s (j-1);
		if substr (unspec (v1), 36, 1) then v2 = v1+1; else v2 = v1-1;
		x = divide(v1+1,2,24);
		v1 = sip -> I (v1+lft);
		v2 = sip -> I (v2+lft);
		if v1 = 0 then v1 = v2;
		else
		if v2>0 then do;
		 /*  below sets up pointers to records within S string  */
		    pt1=msp(v1);
		    pt2=msp(v2);
		    call sort_comp;
		    compares_counter=compares_counter+1;
	    if result = 0   then 	/*  records ranked equal  */
		do;
		 if v1 < v2	/*  compare merge string numbers  */
		    then result = -1;  /*  rank record 1 first  */
		    else result = 1;  /*  rank record 2 first  */
		 end;
		    if result = 1 then v1 = v2;    /*  record 2 ranks first-switch order  */
		end;
		sip -> I (x+s (j)) = v1;
		v1 = x;
	     end;
	end A2;
%include sort_comp;
 ck_len:    proc(length,action_type);
		/*  this will be called from output record exit-its function is to
		check the length passed to it against  max record length and
		return the appropriate error code				*/
	    /*								*/
	dcl	length fixed bin(21) parameter,
		action_type char(*) parameter,
		sub_err_ entry options(variable);
	    if length > max_rec_length then
		do;    /*  record too long  */
		   call sub_err_(error_table_$long_record,whoami, "c", null(), retval,
			"Record ^a by user output_record exit procedure.",
			action_type);
		   ec=error_table_$fatal_error;
		   go to exit;
		end;
 end ck_len;
	dcl	illegal_procedure condition;

illegal_procedure_handler:  proc;
dcl  key_part char(40),
     type char(10),
     file char(20),
     file_part char(168),
     len fixed bin(17);
     if compare_sw = 1 then key_part = "user compare exit procedure";
     else do;
	if dt(i1) = 9 then type = "dec";
	else if dt(i1) = 10 then type = "float dec";
	else type = "unknown";
	call ioa_$rsnnl("key ^d, ^a(^d) ^d(^d)", key_part, len,
		i1 + 1, type, leng(i1), w(i1), mod(b(i1) - 1, 4)*9);
	end;
     if input_driver_is_sort = "1"b then do;
	     call sub_err_(error_table_$improper_data_format, whoami, "c", null(), retval,
			" Invalid key data.  Please check ^a and/or input files ^d and ^d.",
			key_part, v1, v2);
	end;
     else do;          /*   user input_file exit procedure   */
	call sub_err_(error_table_$improper_data_format, whoami, "c", null(), retval,
			" Invalid key data.  Please check ^a and/or user input_file exit procedure.",
		key_part);
	end;
      ec = error_table_$fatal_error;
     go to exit;
end illegal_procedure_handler;
iox_error:  proc(action,index);
dcl  action char(*) parameter,
     index fixed bin(30) parameter;
	ec = error_table_$fatal_error;
	if merge_input_file_attaches(index) = "" then
	     call sub_err_(iox_code, whoami, "c", null(), retval,
		"^a input file ^d, file name ^a",
			action,index,merge_input_file_names(index));
	else call sub_err_(iox_code, whoami, "c", null(), retval,
		"^a input file ^d, attach description ^a",
			action,index,merge_input_file_attaches(index));
	go to exit;
end iox_error;
     end;
