/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
%;
/* ***************************************
   *				 *
   *				 *
   * Copyright (c) 1975, 1976 by         *
   * Honeywell Information Systems, Inc. *
   *				 *
   *				 *
   *************************************** */
/*   ENTRY external to the Merge.
     Used by procedures which drive the Merge themselves.   */
/*   This entry is not supported presently.   */
initiate:	proc(keys_ptr, exits_ptr, user_out_sw_par, code);

/*   PARAMETERS   */
dcl (keys_ptr  ptr,			/*   Pointer to keys substructure  (Input)	   */
     exits_ptr ptr,			/*   Pointer to exits substructure  (Input)	   */
     user_out_sw_par    char(*), 	/*   Destination of Merge Report:  (Input)
				     ""       = normal (user_output);
				     "-bf"    = none (discard);
				     "<other>" = switchname.     */
     code      fixed bin(35)  	/*   Status code   		*/
    ) parameter;

/*   EXTERNAL ENTRIES     */
dcl  convert_status_code_  entry(fixed bin(35), char(8) aligned, char(100) aligned);
dcl  get_pdir_ entry returns(char(168) aligned);
dcl  hcs_$make_seg  entry(char(*) aligned, char(*) aligned, char(*), fixed bin(5), ptr, fixed bin(35));
dcl  ioa_$ioa_stream  entry options(variable);
dcl  unique_chars_ entry(bit(*)) returns(char(15));

dcl  sort_merge_initiate  entry(ptr, ptr, char(*), fixed bin(35));

/*   EXTERNAL STATIC     */

% include sort_ext;
dcl (error_table_$fatal_error,
     error_table_$out_of_sequence)  fixed bin(35) external static;

/*   INTERNAL STATIC  (constants only)   */
dcl (on bit(1) init("1"b),
     off bit(1) init("0"b) ) internal static;

/*   AUTOMATIC and BASED     */

dcl  state_code fixed bin(35);
dcl  keys_ptr_pass ptr,	/*   Arguments passed to sort_merge_initiate.   */
     exits_ptr_pass ptr,
     user_out_sw_pass char(32),
     s_m_init_code fixed bin(35);

dcl  hcs_code fixed bin(35),
     shortinfo char(8) aligned,
     longinfo char(100) aligned;


/*   Start.   */

     call state_test(state_code);
     if state_code ^= 0 then do;
	code = error_table_$out_of_sequence;
	go to exit;
	end;
     state = 3;
     if user_out_sw_par = "" then user_out_sw = "user_output";
     else if user_out_sw_par = "-bf" | user_out_sw_par = "-brief" then user_out_sw = "";
     else user_out_sw = user_out_sw_par;
     time_sw = off;		/*   Timing not specified.   */
     debug_sw = off;		/*   Debug option not specified.   */
     terminate_print_sw = on;		/*   merge_terminate should print Merge Report.   */

common_start:
     code = 0;
     disaster2 = 0;
     keys_ptr_pass = keys_ptr;
     exits_ptr_pass = exits_ptr;
     user_out_sw_pass = user_out_sw;
     s_m_init_code = 0;
     call sort_merge_initiate(keys_ptr_pass, exits_ptr_pass, user_out_sw_pass, s_m_init_code);

     call hcs_$make_seg(get_pdir_(), unique_prefix||"sort_work.SI", "",
		8+2,  /*  rw  */  sip, hcs_code);
     if hcs_code ^= 0 then do;
	call convert_status_code_(hcs_code, shortinfo, longinfo);
	if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
		"^A:  ^a  Unable to create temporary segment [pd]>^asort_work.SI",
		whoami, longinfo, unique_prefix);
	code = error_table_$fatal_error;
	end;

exit:
     if s_m_init_code ^= 0 then code = s_m_init_code;
     return;


/*   ENTRY internal to the Merge; called only by merge_ subroutine.   */
initiate_private:  entry(keys_ptr, exits_ptr, user_out_sw_par, code);
     /*   user_out_sw_par ignored; merge_ has already set user_out_sw properly.   */
     state = 3;
     terminate_print_sw = off;	/*   merge_ should print merge Report   */
     go to common_start;


state_test:  proc(state_code);
dcl  state_code fixed bin(35) parameter;
     if state = 0
	| (state = 8 & index(whoami, "_") ^= 0) 	/*   subroutine was called last   */
	then do;
	whoami = "merge_";
	unique_prefix = before(unique_chars_("0"b), " ")||".";
	state_code = 0;
	end;
     else do;		/*   Error   */
	state_code = 1;
	return;
	end;
end state_test;


end initiate;
