/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* Modified on 01/25/82 by FCH, [1], number of input files = 10 */

merge:  proc;

/*   EXTERNAL ENTRIES    */
dcl  clock_ entry returns(fixed bin(71));
dcl  com_err_  entry options(variable);
dcl  command_query_ entry options(variable);
dcl  cpu_time_and_paging_ entry(fixed bin, fixed bin(71), fixed bin);
dcl  cu_$arg_count entry(fixed bin),
     cu_$arg_list_ptr entry(ptr);
dcl  hcs_$get_process_usage entry(ptr, fixed bin(35));
dcl  hcs_$truncate_seg entry(ptr, fixed bin(24), fixed bin(35)),
     hcs_$delentry_seg entry(ptr, fixed bin(35)),
     hcs_$terminate_noname entry(ptr, fixed bin(35));
dcl  unique_chars_ entry(bit(*)) returns(char(15));

dcl  merge_$merge_private entry((*)char(*), char(*), (*)ptr, char(*), fixed bin(35));
dcl  sort_merge_command entry((*)char(*), char(*), (1)ptr, char(*), char(*), fixed bin(17),
		     bit(1), bit(1), bit(1), fixed bin(35), fixed bin(35),
		     float bin(27), fixed bin, ptr, ptr, ptr);
dcl  sort_merge_command_finish  entry(fixed bin(35), fixed bin(35), bit(1), bit(1));
dcl  sort_merge_sub_error  entry;

/*   EXTERNAL STATIC     */

%include sort_ext;
/*   INTERNAL STATIC (constants only)     */
dcl  pending_string char(120) varying init("Pending work in previous invocation of ^a will be lost if you proceed;
       do you wish to proceed?") internal static;
dcl (on init("1"b),
     off init("0"b) ) bit(1) internal static;

/*   AUTOMATIC AND BASED     */
%include sort_merge_pars;
dcl     output_file char(256),
     merge_desc(1)  ptr,
     temp_dir   char(168),
     user_out_sw_temp      char(8),
     merge_code   fixed bin(35),
     merge_order_temp  fixed bin(35),
     file_size_temp  float bin(27),
     string_size_temp  fixed bin(35);
dcl  input_file_temp(total_if_pns) char(256) based(addr(input_file));
dcl  arg_err_code  fixed bin(35);
dcl (perm_sd,
     temp_sd) ptr init(null());
dcl (fatal_sw,
     no_args_sw,
     arg_err_sw) bit(1);
dcl  total_if_pns  fixed bin(17);
dcl  total_args   fixed bin,
     arg_list_ptr ptr;

dcl 1 query_info aligned,
      2 version fixed bin init(2),
      2 yes_or_no_sw bit(1) unaligned,
      2 suppress_name_sw bit(1) aligned,
      2 status_code fixed bin(35),
      2 query_code fixed bin(35);
dcl  answer char(4) varying;

dcl  state_code  fixed bin(35);
dcl  hcs_code  fixed bin(35);

dcl  (sub_error_, cleanup) condition;


/*   Start.   */

     call state_test(state_code);		/*   Test state variable.   */
     if state_code ^= 0 then do;
	arg_err_sw = off;
	fatal_sw = on;
	call com_err_(0, "merge", " Merge will not be attempted.");
	return;		/*   to command level without resetting state variable   */
	end;
     etime(1) = clock_();
     call cpu_time_and_paging_(pf(1), vtime(1), pd_f(1));
     call hcs_$get_process_usage(addr(pu(1)), hcs_code);
     temp_sd,
     perm_sd = null();	/*   Used by cleanup proc   */
     debug_sw = off;	/*   used by cleanpp procedure   */
     on cleanup call cleanup_proc;
     on sub_error_ call sort_merge_sub_error;
     call cu_$arg_count(total_args);
/*   Get pointer to argument list, so that arguments may be obtained
     within any procedure via cu_$arg_ptr_rel   */
     call cu_$arg_list_ptr(arg_list_ptr);

     call sort_merge_command(input_file, output_file, merge_desc, temp_dir, user_out_sw_temp, total_if_pns,
			arg_err_sw, fatal_sw, no_args_sw, merge_order_temp, string_size_temp,
			file_size_temp, total_args, arg_list_ptr, perm_sd, temp_sd);

     if no_args_sw = on then go to exit;	/*   Prompting message printed by sort_merge_command.   */
     if arg_err_sw = on then merge_code = 1;
     /*   to ensure that merge_ will not attempt to execute merging process   */
     else merge_code = 0;
     if fatal_sw = off then		/*   go on if Merge Description is readable.   */
     call merge_$merge_private(input_file_temp, output_file, merge_desc, user_out_sw_temp, merge_code);

     call sort_merge_command_finish(arg_err_code, merge_code, arg_err_sw, fatal_sw);

exit:
     call cleanup_proc;
     state = 0;
     return;     /*  to command level   */

state_test: proc(state_code);		/*   Test state variable:   */
dcl  state_code fixed bin(35) parameter;
     if state = 0
	| (state = 8 & index(whoami, "_") ^= 0)		/*   Subroutine called last time   */
	then call set_state;
     else do;		/*   Error   */
	call query(pending_string);
	if answer = "no" then do;
	     state_code = 1;
	     return;
	     end;
	else call set_state;
	end;

set_state:  proc;
	whoami = "merge";
	state = 1;		/*   Set state variable.   */
	state_code = 0;
	unique_prefix = before(unique_chars_("0"b), " ")||".";	/*   Get unique string for temporary names.   */
end set_state;


end state_test;


query:  proc(string);		/*   Ask user about proceeding:   */
dcl  string char(*) varying parameter;
     yes_or_no_sw = on;
     suppress_name_sw = off;
     status_code, query_code = 0;
     call command_query_(addr(query_info), answer, "merge", string, whoami);
end query;


cleanup_proc:  proc;
dcl  code fixed bin(35);
     if debug_sw = off then do;
	if temp_sd ^= null() then call hcs_$delentry_seg(temp_sd, code);
	if perm_sd ^= null() then call hcs_$terminate_noname(perm_sd, code);
	end;
     else do;
	if temp_sd ^= null() then call hcs_$truncate_seg(temp_sd, 0, code);
	end;
     state = 0;
end cleanup_proc;


end merge;
