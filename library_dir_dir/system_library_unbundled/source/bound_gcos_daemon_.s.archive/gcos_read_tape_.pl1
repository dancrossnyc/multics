/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* ********************************************************************
   *							*
   *	WRITTEN BY:	P. Haber		March 21, 1974	*
   *	MODIFIED BY:	R.H. Morrison	September 19, 1974	*
   *	MODIFIED BY:	R.H. Morrison	September 12, 1975	*
   *							*
   ******************************************************************** */

gcos_read_tape_: proc (a_request, a_request_len, a_test);
%page;
	ap = addr (request);			/* argument pointer */
	ascii_ptr = addr (ascii);			/* pointer to ascii version of card image */
	bcd_ptr = addr (b972);			/* pointer to bcd version of card image */
	rh_ptr = addr (record_header);		/* pointer to returned status from gcos_gsr_read_ */
	request_p = addr (request);			/* pointer to request line */
	sp = addr (status_bits);			/* pointer to status returned from ios calls */

	on condition (cleanup)			/* set up condition handler */
	     call wrap_up ("1"b);

/* check request line */

	request = a_request;			/* copy in arguments */
	request_len = a_request_len;

	call get_arg;				/* fetch the first argument */

	if arg = "imcv7"				/* request to read 7 track tape */
	then do;
	     tape_type = ",7track";
	     i = 6;				/* have parsed 6 characters */
	end;

	else
	if arg = "imcv"				/* 9 track request */
	then do;
	     tape_type = ",9track";
	     i = 5;				/* have parsed 5 characters */
	end;

	else					/* error, unrecognized request */
	do;
	     call com_err_ (0, "gcos_read_tape_", "Invalid tape read command^/^a", request);
	     go to RETURN;
	end;

	call get_arg;
	if code = error_table_$noarg			/* missing argument .. tape label */
	then do;
	     call com_err_ (code, "gcos_read_tape_", "Error in request ^/^a", request);
	     go to RETURN;
	end;
	tape_label = arg||tape_type;

	call get_arg;				/* get argument from command line */
	if code = error_table_$noarg			/* error, missing argument ... keyword */
	then do;
	     call com_err_ (code, "gcos_read_tape_", "Error in request^/^a", request);
	     go to RETURN;
	end;

	else					/* found argument */
	if arg = "all" | arg = "-all"			/* wants to execute all jobs */
	then all_snumbs_wanted = "1"b;

	else
	if arg = "take" | arg = "-take"		/* wants to execute specified SNUMBs */
	then taking_given_snumbs = "1"b;

	else
	if arg = "start" | arg = "-start"		/* wants to execute all SNUMBs after given one */
	then starting_from_given_snumb = "1"b;

	else
	if arg ^= "delete" & arg ^= "-delete"		/* unrecognized request */
	then do;
	     call com_err_ (0, "gcos_read_tape_", "invalid argument ^a", arg);
	     go to RETURN;
	end;

	call get_arg;				/* get next argument */
	if code = 0				/* there is another argument */
	then do;
	     if all_snumbs_wanted			/* error, shouldn't be another argument */
	     then do;
		call com_err_ (0, "gcos_read_tape_", "Too many arguments in ^/^a", request);
		go to RETURN;
	     end;
	end;

	else					/* no more arguments */
	if ^all_snumbs_wanted			/* error, need at least 1 more argument */
	then do;
	     call com_err_ (code, "gcos_read_tape_", "Error in request ^/^a", request);
	     go to RETURN;
	end;

	do while (code = 0);			/* get remaining arguments */

	     if al > 5				/* SNUMB too long */
	     then do;
		call com_err_ (0, "gcos_read_tape_", "SNUMB ^a too long", arg);
		go to RETURN;
	     end;

	     snumb_count = snumb_count + 1;		/* increment SNUMB count */
	     if (snumb_count>5)| (snumb_count>2 & starting_from_given_snumb) /* error, too many SNUMBs */
	     then do;
		call com_err_ (0, "gcos_read_tape_", "Too many SNUMBs specified in ^/^a", request);
		go to RETURN;
	     end;

	     do i = 1 to snumb_count -1;		/* check for SNUMB duplication */
		if snumb_data (i).snumb = arg		/* got one */
		then do;
		     call com_err_ (error_table_$namedup, "gcos_read_tape_", "in ^/^a", request);
		     go to RETURN;
		end;
	     end;

	     snumb_data (snumb_count).snumb = arg;	/* save snumb_data */

	     call get_arg;

	end;
%page;
/* set up gcos_gsr_read_ */

	if ^test_attach				/* tape needs to be attached */
	then do;

	     call ios_$attach ("tape_input", gcos_daemon_stat_$tape_dim, tape_label, "r", status_bits);
	     code = status.code;
	     if code ^= 0				/* error attaching tape */
	     then do;
		call com_err_ (code, "gcos_read_tape_", "Error attaching tape ^a", tape_label);
		go to RETURN;
	     end;
	     tape_is_attached = "1"b;			/* remember tape is attached */

	end;

	call gcos_gsr_read_$gsr_read_init ("tape_input", code); /* initialize read call */
	if code ^= 0				/* error in init call */
	then do;
	     call com_err_ (code, "gcos_read_tape_", "Error in call to gsr_read_init");
	     call wrap_up ("0"b);
	     go to RETURN;
	end;
	else					/* no error */
	gsr_read_init_called = "1"b;			/* remember it was called */

	do i = 1 to 2;				/* skip over tape label, tape mark */

	     call ios_$read ("tape_input", bcd_ptr, 0, 27, elements_read, status_bits);
	     if substr (status_bits, 1, 3) = "100"b	/* hardware status returned */
	     then do;
		if substr (status_bits, 27, 4) ^= "0100"b /* not "tape mark" status */
		then do;
		     call com_err_ (0, "gcos_read_tape_",
			"Unexpected hardware status from nstd_: ^w^w", substr (status_bits, 1, 36),
			substr (status_bits, 37, 36));
		     call wrap_up ("0"b);
		     go to RETURN;
		end;
	     end;

	     else					/* no status returned */
	     if status.code ^= 0			/* error code returned */
	     then do;
		call com_err_ (status.code, "gcos_read_tape_", "Error reading tape ^a", tape_label);
		call wrap_up ("0"b);
		go to RETURN;
	     end;

	end;
%page;
READ:						/* read the tape */

	if fin					/* all needed SNUMBs were found */
	then do;
	     call wrap_up ("0"b);
	     go to RETURN;
	end;

	call read;
	if code ^= 0				/* error in read call */
	then do;
	     call com_err_ (code, "gcos_read_tape_", "Error reading from tape");
	     call wrap_up ("0"b);
	     go to RETURN;
	end;

	if eot_was_found				/* end of tape */
	then do;
	     if ^all_snumbs_wanted			/* specified SNUMBs were being searched for */
	     then call check_snumbs;			/* inform as to SNUMBs not found */
	     call wrap_up ("0"b);
	     go to RETURN;
	end;

	call cv_bcd_to_ascii_ (buf_ptr, ascii_ptr);	/* convert card to ascii */

	if substr (ascii, 1, 6) = "***eof"		/* tapes sometimes have eofs */
	then do;
	     if last_image_was_eof			/* error, 2 eof images in a row */
	     then do;
		call com_err_ (0, "gcos_read_tape_", "Unexpected eof image on tape ^a", tape_label);
		call wrap_up ("0"b);
		go to RETURN;
	     end;
	     last_image_was_eof = "1"b;		/* remember for next read */
	     go to READ;				/* and read another card */
	end;
	else					/* card not "***eof" */
	last_image_was_eof = "0"b;			/* remember */

	if (substr (ascii, 1, 1) ^= "$")		/* not a SNUMB card image */
	| (substr (ascii, 8, 5) ^= "snumb")
	then do;
	     call com_err_ (0, "gcos_read_tape_", "Expected SNUMB not found on tape ^a", tape_label);
	     call find_ejb;
	     if (eot_was_found)| (code ^= 0)		/* error or end of tape */
	     then do;
		if code = 0
		then call check_snumbs;
		call wrap_up ("0"b);
		go to RETURN;
	     end;
	     go to READ;
	end;

	if all_snumbs_wanted			/* all jobs are to be executed */
	then do;
	     call parse_and_check_snumb;		/* parse the SNUMB (no check for "all") */
	     if code ^= 0				/* error parsing SNUMB */
	     then do;
		call find_ejb;
		if code ^= 0			/* error finding eof image */
		then do;
		     call wrap_up ("0"b);
		     go to RETURN;
		end;
		go to READ;
	     end;
	     call read_and_queue;			/* queue up current job */
	     if (code > 1)| (eot_was_found)		/* error or end of tape */
	     then do;
		call wrap_up ("0"b);
		go to RETURN;
	     end;
	     go to READ;				/* get another job */
	end;

	if (taking_given_snumbs)| (starting_from_given_snumb)
	then do;

	     call parse_and_check_snumb;		/* check to see if this is needed SNUMB */
	     if (^snumb_found)| (code ^= 0)		/* SNUMB not in array or already found */
	     then do;
		if ^starting_snumb_found		/* not a start request with first SNUMB found */
		then do;
		     call find_ejb;
		     if (eot_was_found)| (code ^= 0)	/* error or end of tape */
		     then do;
			if code = 0
			then call check_snumbs;
			call wrap_up ("0"b);
			go to RETURN;
		     end;
		     if ^snumb_found		/* no data to update */
		     then go to READ;		/* get another job */
		end;
	     end;

	     if starting_from_given_snumb
	     then do;
		if snumb_count = 1			/* found the only specified SNUMB */
		then do;
		     all_snumbs_wanted = "1"b;	/* execute remaining jobs on tape */
		     starting_from_given_snumb = "0"b;
		end;
		else				/* start and finish SNUMB supplied */
		do;
		     if ^snumb_data (1).found		/* error found finish before start */
		     then do;
			call com_err_ (0, "gcos_read_tape_", "Error in ^/^a^/^a found before ^a",
			     request, snumb_data (2).snumb, snumb_data (1).snumb);
			call wrap_up ("0"b);
			go to RETURN;
		     end;
		     else
		     do;
			if found_count = 2		/* found second */
			then fin = "1"b;		/* finished after processing this one */
			else			/* first of 2 SNUMBs found */
			starting_snumb_found = "1"b;	/* remember */
		     end;
		end;
	     end;

	     else					/* taking specified SNUMBs */
	     if found_count = snumb_count		/* all needed SNUMBs found */
	     then fin = "1"b;			/* done */

	     if code ^= 0				/* some error has occurred */
	     then go to READ;			/* don't queue up job */

	     call read_and_queue;			/* queue up current job */
	     if (code > 1)| (eot_was_found)		/* fatal error or end of tape */
	     then do;
		if code < 2			/* not fatal error */
		then call check_snumbs;
		call wrap_up ("0"b);
		go to RETURN;
	     end;

	     go to READ;				/* get another job */

	end;

	else					/* deleting specified SNUMBs */
	do;

	     call parse_and_check_snumb;

	     if (snumb_found)| (code ^= 0)
	     then do;

		call find_ejb;
		if (code ^= 0)| (eot_was_found)	/* error or end of tape */
		then do;
		     if code = 0
		     then call check_snumbs;
		     call wrap_up ("0"b);
		     go to RETURN;
		end;

		go to READ;

	     end;

	     else					/* job to be executed */
	     do;

		call read_and_queue;
		if (code > 1)| (eot_was_found)	/* fatal error or end of tape */
		then do;
		     if code < 2			/* not fatal error */
		     then call check_snumbs;
		     call wrap_up ("0"b);
		     go to RETURN;
		end;

		go to READ;

	     end;

	end;

RETURN:

	return;
%page;
/* internal procedures */

check_snumbs: proc;

	     do i = 1 to snumb_count;
		if ^snumb_data (i).found		/* SNUMB was not found on tape */
		then call com_err_ (0, "gcos_read_tape_", "SNUMB ^a not found on tape ^a"
		     , snumb_data (i).snumb, tape_label);
	     end;

	     return;

	end check_snumbs;



find_ejb:	proc;

dcl  ejb_was_found bit (1) aligned init ("0"b);

	     do while (^ejb_was_found);
		call read;
		if eot_was_found			/* end of tape */
		then return;
		if code ^= 0
		then do;
		     call com_err_ (code, "gcos_read_tape_", "Error searching for $ endjob");
		     return;
		end;

		if media_code = "0010"b		/* bcd image */
		then if first_bcd_char = "101011"b	/* "$" */
		     then do;
			call cv_bcd_to_ascii_ (buf_ptr, ascii_ptr);
			if substr (ascii, 8, 6) = "endjob" /* end of job card image found */
			then ejb_was_found = "1"b;
		     end;

	     end;

	     return;

	end find_ejb;



get_arg:	proc;

	     do j = j to request_len while		/* find beginning of next argument */
		     ((substr (request, j, 1) = " ")| (substr (request, j, 1) = "	"));
	     end;

	     do k = j to request_len while		/* find end of argument */
		     ((substr (request, k, 1) ^= " ")& (substr (request, k, 1) ^= " "));
	     end;
	     if k ^= request_len			/* not last argument */
	     then k = k - 1;			/* move index back to last char in arg */

	     if k < j				/* no next argument */
	     then do;
		code = error_table_$noarg;
		return;
	     end;

	     code = 0;				/* there is another argument */
	     ap = addr (request_p -> request_mask.char (j)); /* set argument pointer */
	     al = k - j + 1;			/* set argument length */
	     j = k + 1;				/* set beginning of next possible arg */

	     return;

	end get_arg;



parse_and_check_snumb: proc;

dcl (jj, kk, xb, xc, search_val) fixed bin aligned;
dcl  comma_found bit (1) aligned init ("0"b);

	     comma_found,
		snumb_found = "0"b;			/* initialize return argument */

	     xb = index (substr (ascii, 16), " ");	/* locate first blank in variable field */
	     xc = index (substr (ascii, 16), ",");	/* locate first comma in variable f eld */

	     if xb = 1 then
		do; code = 1;			/* return error */
		call com_err_ (0, "gcos_read_tape_", "A SNUMB is zero length on tape ^a", tape_label);
		return;
	     end;

	     if (xc = 0 | xc>xb) then xc = xb;		/* either no comma or not in SNUMB number field */
						/* set comma index to blank index */
	     else comma_found = "1"b;			/* remember */

	     if (xb<10 & xc<7) then snumb = substr (ascii, 16, xc-1);
						/* put SNUMB in fixed location */
	     else
	     do; snumb = substr (ascii, 16, 8);		/* report first 8 characters of SNUMB */
		code = 1;				/* return error */
		call com_err_ (0, "gcos_read_tape_",
		     "SNUMB ^a too long on tape ^a", snumb, tape_label);
		return;
	     end;

	     search_val = search (substr (ascii, 16, xc-1), ",$/:."); /* search for invalid characters */
	     if (search_val ^= 0) | (substr (ascii, 16, xc-1) = substr ("00000", 1, xc-1)) then
		do; code = 1;			/* return error */
		call com_err_ (0, "gcos_read_tape_",
		     "Invalid characters in SNUMB ^a on tape ^a", snumb, tape_label);
		return;
	     end;

	     if comma_found then
		do; urgency = cv_dec_check_ (substr (ascii, xc+16, xb-xc-1), code); /* convert to integer */
		if code ^= 0			/* conversion error */
		then do;
		     call com_err_ (0, "gcos_read_tape_", "Invalid urgency field: SNUMB = ^a, tape ^a",
			snumb, tape_label);
		     code = 1;
		     return;
		end;
		if (urgency < 1)| (urgency > 63)	/* invalid urgency field */
		then do;
		     urgency = 5;			/* set to real gcos default value */
		     call com_err_ (0, "gcos_read_tape_",
			"Out of bounds urgency set to default value: SNUMB = ^a, tape ^a",
			substr (ascii, 16, xb-1), tape_label);
		end;
		urgency = divide (63-urgency, 21, 17, 0) + 1; /* convert to Multics priority */
	     end;
	     else					/* no urgency field */
	     urgency = 3;				/* set default */

	     if ^all_snumbs_wanted			/* specified SNUMBs wanted, check this one */
	     then do jj = 1 to snumb_count while (^snumb_found);
		if snumb = snumb_data (jj).snumb	/* match found */
		then do;
		     snumb_found = "1"b;		/* remember */
		     if snumb_data (jj).found		/* SNUMB was already found */
		     then do;
			call com_err_ (0, "gcos_read_tape_", "SNUMB ^a duplicated on tape ^a", snumb, tape_label);
			code = 2;			/* fatal error */
		     end;
		     else
		     do;
			snumb_data (jj).found = "1"b;
			found_count = found_count + 1; /* increment count of found SNUMBs */
		     end;
		end;

	     end;

	     return;

	end parse_and_check_snumb;



read:	proc;

	     call gcos_gsr_read_ ("tape_input", buf_ptr, elements_read, record_header, eot_was_found, code);

	     return;

	end read;



read_and_queue: proc;
	     gcos_daemon_stat_$snumb = rtrim (snumb);
	     call gcos_read_$tape (urgency, buf_ptr, addr (gcos_abs_data), eot_was_found, code);
	     if code ^= 0				/* error reading rest of job */
	     then do;
		if code ^= 1			/* error was fatal */
		then return;
		if ^eot_was_found			/* not end of tape */
		then do;
		     call find_ejb;			/* find end of current job */
		     if code = 0			/* no error finding ejb */
		     then code = 1;			/* return non-fatal error */
		end;
		return;
	     end;

	     call gcos_queue_job_ (addr (gcos_abs_data), a_test, code);
	     if code = 0 then snumb = " ";

	     return;

end read_and_queue;
%page;
wrap_up:	proc (cleanup_was_signalled);

dcl  cleanup_was_signalled bit (1) aligned;

	     if (tape_is_attached|test_attach)
	     then do;

		if a_test				/* test entry was called */
		then do;				/* check to see if tape should be dismounted */
		     call command_query_ (addr (query_data), answer, "gcos_read_tape_",
			"Should tape ^a be dismounted?  ", tape_label);
		     if substr (answer, 1, 2) = "no"	/* don't dismount */
		     then do;
			call ios_$order ("tape_input", "rewind", null, status_bits);
			if status.code ^= 0
			then call com_err_ (status.code, "gcos_read_tape_",
			     "Error in order call to rewind ^a", tape_label);
			test_attach = "1"b;		/* remember tape was only rewound */
			go to NO_DETACH;
		     end;
		end;

		call ios_$detach ("tape_input", tape_label, "", status_bits); /* detach the tape */
		tape_is_attached = "0"b;
		test_attach = "0"b;			/* allows another attach */
		if status.code ^= 0
		then do;
		     if code < 2			/* no fatal error yet */
		     then code = status.code;
		     call com_err_ (status.code, "gcos_read_tape_", "Error detaching tape ^a", tape_label);
		end;

	     end;

NO_DETACH:

	     if gsr_read_init_called
	     then do;
		call gcos_gsr_read_$gsr_read_close ("tape_input", code);
		gsr_read_init_called = "0"b;
	     end;

	     if (code ^= 0)| (cleanup_was_signalled)	/* an error occurred or job was aborted */
	     then do;
		i = index (snumb, " ") - 1;
		if i < 1
		then return;
		call hcs_$delentry_file (get_wdir_ (), substr (snumb, 1, i)||".gcos", code);
	     end;

	     return;

	end wrap_up;
%page;
/* DECLARATIONS */
/* ------------ */


/* fixed bin */


dcl (
     a_request_len,					/* length of tape command (argument) */
     al,						/* argument length */
     arg_num init (0),				/* argument count from command line */
     elements_read,					/* number of elements read in ios call */
     found_count init (0),				/* count of SNUMBs found on tape */
     i,						/* loop index */
     j init (1),					/* loop index */
     k init (0),					/* loop index */
     request_len,					/* length of tape command (internal) */
     snumb_count init (0),				/* number of SNUMBs in tape command */
     urgency					/* computed urgency from SNUMB image */
     ) fixed bin aligned;

dcl (
     code,					/* error code */
     error_table_$namedup ext,
     error_table_$noarg ext
     ) fixed bin (35) aligned;


/* pointers */

dcl (
     ap,						/* argument pointer */
     ascii_ptr,					/* pointer to ascii version of card image */
     bcd_ptr,					/* pointer to bcd version of card image */
     buf_ptr,					/* pointer to tape record read by gcos_gsr_read_ */
     rh_ptr,					/* pointer to returned status from gcos_gsr_read_ */
     request_p,					/* pointer to request line */
     sp						/* pointer to status returned from ios calls */
     ) pointer aligned;


/* bit strings */

dcl (
     a_test					/* ON when deamon brought up by user */
     ) bit (1) aligned;

dcl (
     all_snumbs_wanted,				/* ON when every job found will be queued */
     eot_was_found,					/* ON when end of tape is encountered */
     fin,						/* ON when all given SNUMBs are found */
     gsr_read_init_called,				/* ON once gcos_gsr_read_$gsr_read_init has been called */
     last_image_was_eof,				/* ON when last card image was "***eof" */
     snumb_found,					/* ON when a SNUMB is found on tape */
     starting_from_given_snumb,			/* ON when start imcv request is made */
     starting_snumb_found,				/* ON when 1st of 2 SNUMBs in "start" found */
     taking_given_snumbs,				/* ON when take imcv request is made */
     tape_is_attached,				/* ON when tape is attached */
     test_attach int static				/* ON when tape is rewound, not detached */
     ) bit (1) aligned init ("0"b);

dcl (
     record_header					/* returned status from gcos_gsr_read_ */
     ) bit (12) aligned;

dcl (
     normal_termination				/* ON until tape terminates abnormally */
     ) bit (1) aligned init ("1"b);

dcl (
     status_bits					/* status returned from ios calls */
     ) bit (72) aligned;

dcl (
     b972						/* image read from tape */
     ) bit (972) aligned;


/* character strings */

dcl (
     answer					/* answer to command_query_ call */
     ) char (4) aligned;

dcl  gcos_daemon_stat_$snumb ext char (6) aligned;

dcl (
     gcos_daemon_stat_$tape_dim ext,			/* variable dim name for easy testing */
     snumb init (""),				/* SNUMB on current card */
     tape_type					/* = ",7track" or ",9track" */
     ) char (8) aligned;

dcl (
     tape_label init ("")				/* name of tape */
     ) char (32) aligned;

dcl (
     ascii					/* ascii version of card */
     ) char (80) aligned;

dcl (
     a_request,					/* imcv command (argument) */
     request					/* imcv command (internal) */
     ) char (120) aligned;


/* built in functions */

dcl (
     addr,
     divide,
     index,
     null,
     substr
     ) builtin;


/* structures */
dcl 1 query_data aligned,				/* structure for command_query_ call */
    2 version fixed bin aligned init (2),
    2 yes_or_no_switch bit (1) aligned init ("1"b),
    2 suppress_name_switch bit (1) aligned init ("1"b),
    2 status_code fixed bin (35) aligned,
    2 query_code fixed bin (35) aligned;

dcl 1 snumb_data (5) aligned,				/* snumb data taken from command */
    2 snumb char (8) aligned,				/* given SNUMB */
    2 found bit (1) aligned init ((5) (1) "0"b);		/* ON once SNUMB is found on tape */


/* masks */

dcl  arg char (al) based (ap) unaligned;		/* argument taken from command line or console */

dcl  first_bcd_char bit (6) unaligned based (buf_ptr);	/* first bcd character on card image */

dcl  input bit (612) unaligned based (buf_ptr);		/* pointer to bcd image */

dcl 1 record_header_mask aligned based (rh_ptr),
    2 pad bit (2) unaligned,
    2 media_code bit (4) unaligned,
    2 report_code bit (6) unaligned;

dcl 1 request_mask aligned based,			/* for looking at request character by character */
    2 char (request_len) char (1) unaligned;

dcl 1 status based (sp) aligned,			/* returned status from ios calls */
    2 code fixed bin (35) aligned,			/* error code */
    2 pad bit (9) unaligned,
    2 eof bit (1) unaligned;


/* conditions */

dcl (
     cleanup
     ) condition;


/* external entries */

dcl  com_err_ ext entry
     options (variable);

dcl  command_query_ ext entry
     options (variable);

dcl  cv_bcd_to_ascii_ ext entry
    (ptr aligned, ptr aligned);

dcl  cv_dec_check_ ext entry
    (char (*) aligned, fixed bin (35) aligned) returns (fixed bin aligned);

dcl  gcos_queue_job_ ext entry
    (ptr aligned, bit (1) aligned, fixed bin (35) aligned);

dcl  gcos_read_$tape ext entry
    (fixed bin aligned, ptr aligned, ptr aligned, bit (1)aligned, fixed bin (35)aligned);

dcl  get_wdir_ ext entry
     returns (char (168) aligned);

dcl  gcos_gsr_read_ ext entry
    (char (*) aligned, ptr aligned, fixed bin aligned, bit (12) aligned, bit (1) aligned, fixed bin (35) aligned);

dcl  gcos_gsr_read_$gsr_read_close ext entry
    (char (*) aligned, fixed bin (35) aligned);

dcl  gcos_gsr_read_$gsr_read_init ext entry
    (char (*) aligned, fixed bin (35) aligned);

dcl  hcs_$delentry_file ext entry
    (char (*) aligned, char (*) aligned, fixed bin (35) aligned);

dcl  ios_$attach ext entry
    (char (*) aligned, char (*) aligned, char (*) aligned, char (*) aligned, bit (72) aligned);

dcl  ios_$detach ext entry
    (char (*) aligned, char (*) aligned, char (*) aligned, bit (72) aligned);

dcl  ios_$order ext entry
    (char (*) aligned, char (*) aligned, ptr aligned, bit (72) aligned);

dcl  ios_$read ext entry
    (char (*) aligned, ptr aligned, fixed bin aligned, fixed bin aligned, fixed bin aligned, bit (72) aligned);
%page;
% include gcos_abs_data;
%page;
% include gcos_abs_data_storage;

end gcos_read_tape_;
