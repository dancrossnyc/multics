/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* ****************************************************************************************

   This procedure maps data from the gcos daemon absentee data structure (currently
   gcos_abs_data) into the absentee structure used as the absentee message format
   (currently abs_message_format) and then queues a gcos job by calling a message
   segment primitive (currently message_segment_$add_file)

   Arguments are
   1) -- a_data_ptr	A pointer to the gcos daemon created absentee data (Input).
   2) -- a_code	An error code (Output).


   WRITTEN BY:	P. Haber		March 21, 1974
   MODIFIED BY:	R.H. Morrison	August 19, 1974
   March 1975	July 21, 1975

   Modified by T. Casey, May 1978, To use version 4 absentee request structure.
   Modified by S. Akers, Mar 1982, To make a neater absin seg and check for 
			     duplicate SNUMBs. Also to use
			     gcos_daemon_stat_$snumb instead of passing
			     the SNUMB as an argument to all and sundry.
   Modified by R. Barstad  August 1982  Fixed gcos job absin where last line
                                        of absin deleted itself.

   **************************************************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-03-01,Gilcrease), approve(86-03-17,MCR7370),
     audit(86-06-25,Lippard), install(86-06-30,MR12.0-1082):
     Update version to 5 in abs_message_format. SCP6297.
  2) change(87-07-27,GDixon), approve(87-07-27,MCR7741),
     audit(87-07-28,Hartogs), install(87-08-04,MR12.1-1055):
      A) Include user_abs_attributes.incl.pl1 to accommodate change made to
         abs_message_format.incl.pl1
  3) change(88-02-12,Parisek), approve(88-02-12,MCR7849),
     audit(88-03-23,Lippard), install(88-07-13,MR12.2-1047):
     Reference version 6 abs_message_format structure.
                                                   END HISTORY COMMENTS */


%page;
gcos_queue_job_: proc (a_data_ptr, a_test_entry, a_code);

/* PER PROCESS INITIALIZATION */

	call setup;				/* initialize automatics */
	if ^init					/* first time called */
	then do;

	     call hcs_$make_seg ("", "gcos_abs_temp_", "", 01011b, temp_ptr, code); /* create temporary in pdir */
	     if temp_ptr = null			/* error creating temporary */
	     then do;
		call com_err_ (code, "gcos_queue_job_", "Error creating temporary segment");
		go to RETURN;
	     end;

	     input_dir = substr (gcos_daemon_stat_$input_dir, 1, gcos_daemon_stat_$input_dir_len); /* set input_dir name */
	     sysdir = substr (gcos_daemon_stat_$sysdir, 1, gcos_daemon_stat_$sysdir_len); /* and sysdir name */

	     call hcs_$initiate (sysdir, "whotab", "", 0, 0, stat_whoptr, code); /* initiate who table */
	     if stat_whoptr = null			/* error initiating table */
	     then do;
		call com_err_ (code, "gcos_queue_job_", "Error initiating who_table");
		go to RETURN;
	     end;

	     init = "1"b;				/* initialization finished */

	end;

%page;

	on condition (cleanup)			/* establish cleanup handler */
	     call error_wrap_up;

	call hcs_$truncate_seg (temp_ptr, 0, code);	/* make sure it's empty for this call */
	if code ^= 0				/* error truncating */
	then do;
	     call com_err_ (code, "gcos_queue_job_", "Error truncating temporary");
	     go to RETURN;
	end;

/* initializations */

	code = 0;
	abs_data_ptr = a_data_ptr;
	whoptr = stat_whoptr;
	reqp = temp_ptr;
%page;
/* MAP ABSENTEE DATA */

	request.request_version = abs_message_version_6;	/* version number */
	request.hdr_version = queue_msg_hdr_version_1;

	char32 = get_group_id_ ();			/* submitters'  name (gcos daemon) & length */
	group_id_len = length (rtrim (char32));
	request.len_name = group_id_len;
	request.name = substr (char32, 1, group_id_len);
	absentee_dir_len = length (rtrim (abs_data.absentee_dir));
	request.dirname = substr (abs_data.absentee_dir, 1, absentee_dir_len);
	request.ename = rtrim (gcos_daemon_stat_$snumb)||".absin";

	request.arg_count = 0;			/* argument count */
	request.arg_lengths = 0;			/* argument length */
	request.len_args = 0;			/* argument string lengths */
	request.len_resource = 0;			/* resource length */
	request.len_sender = 0;			/* sender userid length */
	request.len_comment = 0;			/* comment string length */
	request.len_vpad = 0;			/* spare variable length */
	unique_snumb  =  rtrim (gcos_daemon_stat_$snumb)
		     ||"_"
		     ||unique_chars_ (unique_bits_ ()); /* make SNUMB unique */
	unique_snumb_len = length (rtrim (unique_snumb));	/* compute its length */

	if unique_snumb_len > 18 then			/* if unique SNUMB too long, shorten it */
	     do;					/* retain low order characters
						/* of unique_chars_ & the "!" */

	     snumb_len = length (rtrim (gcos_daemon_stat_$snumb));
	     unique_snumb = substr (unique_snumb, 1, snumb_len+2)
		||substr (unique_snumb, snumb_len+3 + unique_snumb_len-18);
	     unique_snumb_len = 18;
	end;

	request.len_output = absentee_dir_len + unique_snumb_len + 8; /* output path-name and length */
	request.output_file =
	     substr (abs_data.absentee_dir, 1, absentee_dir_len)||">"||rtrim (unique_snumb)||".absout";

	request.abs_attributes.user_deferred_until_time =
	     abs_data.absentee_options.deferral_switch;	/* deferral time */
	if abs_data.absentee_options.deferral_switch	/* one has been specified */
	then request.deferred_time = abs_data.absentee_data.deferral;
	else					/* no deferred time specified */
	request.deferred_time = 0;

	user_name_len = length (rtrim (abs_data.user_name));
	request.len_proxy = user_name_len;
	request.proxy_name = substr (abs_data.user_name, 1, user_name_len);
	request.abs_attributes.proxy = "1"b;

	request.max_cpu_time = gcos_daemon_stat_$max_cpu_time; /* max cpu time */

	request.set_bit_cnt = "0"b;			/* don't set bit count after every write */

	request.abs_attributes.restartable = "1"b;	/* gcos jobs are restartable */
						/* Defaults for version 6 stuff */
	request.initial_ring = -1;
	request.len_homedir = 0;
	request.len_initproc = 0;
	
	call user_info_$authorization_range (authrng);
	request.requested_authorization = authrng (1);	/* use the low range */

	request.std_length = currentsize (request);	/* store request's word length in its header */
	message_bit_count = request.std_length * 36;	/* remember its bitcount for later */

%page;

/* CREATE ABSIN FILE */

	call hcs_$make_seg (abs_data.absentee_dir, rtrim (gcos_daemon_stat_$snumb)||".absin", "", 01011b,
	     absin_ptr, code);			/* make segment "snumb.absin" */
	if absin_ptr = null				/* error creating "snumb.absin" */
	then do;
	     call com_err_ (code, "gcos_queue_job_", "Error creating ^a>^a.absin",
		abs_data.absentee_dir, gcos_daemon_stat_$snumb);
	     go to RETURN;
	end;

	call hcs_$set_ring_brackets (abs_data.absentee_dir, rtrim (gcos_daemon_stat_$snumb)||".absin",
	     rb, code);				/* set ring brackets */
	if code ^= 0 then
	     do; call com_err_ (code, "gcos_queue_job_", "Error setting ring brackets for ^a>^a.absin",
		abs_data.absentee_dir, gcos_daemon_stat_$snumb);
	     go to RETURN;
	end;

	call ioa_$rsnnl ("^d", char1, j, abs_data.priority_queue);

	if ^a_test_entry				/* regular daemon */
	then heading = gcos_daemon_stat_$snumb;		/* set heading */
	else					/* test user */
	do;					/* query him for a heading */
	     call ioa_$nnl ("Output heading for ^a = :", gcos_daemon_stat_$snumb);
	     call ios_$read_ptr (addr (heading), 24, j);
	     heading = substr (heading, 1, min (j-1, 24));
	     call ioa_$nnl ("Destination for ^a = :", gcos_daemon_stat_$snumb);
	     call ios_$read_ptr (addr (destination), 24, j);
	     destination = substr (destination, 1, min (j-1, 24));
	end;

	call ioa_$rsnnl (				/* fill in "snumb.absin" */
	     ".q"
	   ||"^/set_epilogue_command ""dl [user absin]"""
	   ||"^/cdwd ^a"
	   ||"^/cwd ^a"
	   ||"^/gcos_abs_control
gcos ^a>^a.gcos -id ^a -dpo ""-he """"^a"""" -ds """"^a"""" -dl -q ^a"" -dpno ""-he """"^a"""" -ds """"^a"""" -dl -q ^a""
dp -q ^a -he ""^a"" -ds ""^a"" -dl [user absout]"
	   ||"^/dl ^a>^a.gcos"
	   ||"^/logout -bf^/",
	     absin_mask, absin_char_count,
	     abs_data.home_dir,
	     abs_data.absentee_dir,
	     input_dir,
	     gcos_daemon_stat_$snumb,
	     unique_snumb,
	     heading,
	     destination,
	     char1,
	     heading,
	     destination,
	     char1,
	     char1,
	     heading,
	     destination,
	     input_dir,
	     gcos_daemon_stat_$snumb
	     );

	absin_name = rtrim (gcos_daemon_stat_$snumb)||".absin";	/* make absin file name */

	segment_acl.access_name = abs_data.user_name;	/* prepare for acl call */
	segment_acl.modes = "111"b;
	segment_acl.zero_pad = "0"b;

	call hcs_$add_acl_entries (abs_data.absentee_dir, absin_name, addr (segment_acl), 1, code); /* set user's access */
	if code ^= 0				/* error setting access */
	then do;
	     call com_err_ (code, "gcos_queue_job_", "Error setting access on ^a>^a.absin", abs_data.absentee_dir, gcos_daemon_stat_$snumb);
	     call error_wrap_up;
	     go to RETURN;
	end;

	call adjust_bit_count_ (abs_data.absentee_dir, absin_name, "1"b, bit_count, code); /* set its bit count */
	if code ^= 0				/* error setting bit count on snumb.absin */
	then do;
	     call com_err_ (code, "gcos_queue_job_", "Error setting bit count on ^a>^a.absin",
		abs_data.absentee_dir, gcos_daemon_stat_$snumb);
	     call error_wrap_up;
	     go to RETURN;
	end;

/* QUEUE UP ABSENTEE JOB */

	if a_test_entry
	then do;
	     call command_query_ (addr (query_info), answer, "gcos_queue_job_", "Do you want to submit ^a?", gcos_daemon_stat_$snumb);
	     if substr (answer, 1, 2) = "no"
	     then go to RETURN;
	end;

	priority = max (abs_data.priority_queue, gcos_daemon_stat_$max_priority); /* get effective max queue */
	if priority > abs_data.priority_queue		/* requester's queue too high in priority */
	then call ioa_ ("Request for queue ^d placed in queue ^d", /* tell operator */
	     abs_data.priority_queue, priority);

	call ioa_$rsnnl ("absentee_^d.ms", char32, j, priority); /* construct message segment name */

	call message_segment_$get_message_count_file	/* get present message count */
	     (sysdir, char32, ms_count, code);
	if code ^= 0				/* error getting count */
	then do;
	     call com_err_ (code, "gcos_queue_job_", "Error getting message count from absentee queue ^d",
		abs_data.priority_queue);
	     call error_wrap_up;
	     go to RETURN;
	end;

	call message_segment_$add_file
	     (sysdir, char32, temp_ptr, message_bit_count, message_id, code); /* submit message */
	if code ^= 0				/* error submitting message */
	then do;
	     call com_err_ (code, "gcos_queue_job_", "error queueing job: queue = ^d, SNUMB = ^a",
		abs_data.priority_queue, gcos_daemon_stat_$snumb);
	     call error_wrap_up;
	     go to RETURN;
	end;

	call hcs_$wakeup (whotab.abs_procid, whotab.abs_event, ev_message, code); /* signal absentee */
	if code = 1				/* signal didn't make it */
	then do;
	     call com_err_ (0, "gcos_queue_job_", "Signal to absentee for SNUMB #^a failed.
	     Request will be processed later", gcos_daemon_stat_$snumb);
	     code = 0;				/* no actual error returned */
	end;
	else					/* absentee was signalled, print message */
	call ioa_ ("1 request signalled: ^d already queued", ms_count);
	go to RETURN;

set_priority: entry (a_priority);

	if a_priority <gcos_daemon_stat_$low_priority |	/* illegal priority requested */
	a_priority > gcos_daemon_stat_$high_priority
	then call com_err_ (0, "gcos_queue_job_", "Attempt to set invalid priority: ^d", a_priority);
	else
	gcos_daemon_stat_$max_priority = a_priority;	/* set maximum queue priority */
	return;

RETURN:

	a_code = code;

	return;





error_wrap_up: proc;

	     call hcs_$delentry_seg (absin_ptr, code);	/* delete possible created absin file */

	     call message_segment_$delete_file		/* delete message if sent */
		(sysdir, char32, message_id, code);

	     code = 2;

	     return;

end error_wrap_up;

setup:   proc;

         rb (*) = 5;
         destination = "";
         message_id = "0"b;
         query_info.version = 2;
         query_info.yes_or_no_sw = "1"b;
         query_info.suppress_name_sw = "1"b;
    end setup;

%page;
/* DECLARATIONS */
/* ------------ */

/* fixed bin */

dcl (
     a_priority,					/* maximum allowable queue priority */
     absentee_dir_len,				/* character count of absentee dir name */
     absin_char_count,				/* character count of absin file */
     gcos_daemon_stat_$high_priority ext,		/* highest numerical legal priority */
     gcos_daemon_stat_$input_dir_len ext,		/* length of input directory name */
     gcos_daemon_stat_$low_priority ext,		/* lowest numerical legal priority */
     gcos_daemon_stat_$max_cpu_time ext,		/* maximum cpu time for job */
     gcos_daemon_stat_$max_priority ext,
     gcos_daemon_stat_$sysdir_len ext,			/* length of "sysdir" directory name */
     group_id_len,					/* character count of group id */
     j,						/* random variable */
     message_bit_count,				/* bit count of absentee message */
     ms_count,					/* number of messages in absentee queue */
     priority,					/* priority for which job will be queued */
     snumb_len,					/* character count of snumb */
     unique_snumb_len,				/* character count of snumb||"_"||unique_chars_ */
     user_name_len					/* character count of user name */
     ) fixed bin aligned;

dcl (
     bit_count
     ) fixed bin (24) aligned;

dcl (
     a_code,					/* error code (argument) */
     code						/* error code (internal) */
     ) fixed bin (35) aligned;

dcl  rb (3) fixed bin (3) aligned;			/* ring brackets */


/* bit strings */

dcl (
     a_test_entry,					/* ON if daemon was brought up by user */
     init internal static init ("0"b)			/* ON once per-process initialization is accomplished */
     ) bit (1) aligned;

dcl (
     message_id					/* returned from adding message */
     ) bit (72) aligned;
dcl  authrng (2) bit (72) aligned;


/* character strings */

dcl  char1 char (1) aligned;

dcl (
     answer					/* answer from command query question */
     ) char (4) aligned;

dcl 
     ipc_message int static init ("login   ") char (8);

dcl (
     destination,					/* destination for dprinting and dpunching output */
     heading,					/* heading for dprinting and dpunching output */
     unique_snumb
     ) char (24) aligned;
dcl  gcos_daemon_stat_$snumb ext char (6) aligned;
dcl (
     absin_name,					/* ent name of absentee file */
     char32					/* random string */
     ) char (32) aligned;

dcl (
     gcos_daemon_stat_$input_dir ext,			/* input directory name */
     gcos_daemon_stat_$sysdir ext,			/* "sysdir" directory name */
     input_dir int static,
     sysdir internal static				/* "sysdir" directory name (internal) */
     ) char (168) aligned;


/* pointers */

dcl (
     a_data_ptr,					/* pointer to daemons' absentee data structure (argument) */
     absin_ptr,					/* pointer to created "snumb.absin" segment */
     reqp ptr,					/* pointer to absentee request structure */
     stat_whoptr internal static,			/* static pointer to who table */
     temp_ptr internal static,			/* pointer to temp segment in process dir */
     whoptr					/* pointer to who-table */
     ) ptr aligned;


/* masks */

dcl  absin_mask char (1000) aligned based (absin_ptr);

dcl  ev_message fixed bin (71) aligned based (addr (ipc_message)); /* for sending ascii */


/* structures */

dcl 1 segment_acl aligned,				/* for setting user's access */
    2 access_name char (32) aligned,
    2 modes bit (36) aligned,
    2 zero_pad bit (36) aligned,
    2 status_code fixed bin (35) aligned;

dcl 1 query_info aligned,				/* for command query call */
    2 version fixed bin,
    2 yes_or_no_sw bit (1) unaligned,			/* answer must be yes or no */
    2 suppress_name_sw bit (1) unaligned,		/* don't print prog name with "Please answer ... */
    2 codes (2) fixed bin (35);


/* built in functions */

dcl (
     addr,
     currentsize,
     length,
     max,
     min,
     null,
     rtrim,
     substr
     ) builtin;


/* conditions */

dcl (
     cleanup
     ) condition;


/* include files */

% include abs_message_format;

% include gcos_abs_data;

% include queue_msg_hdr;

% include user_abs_attributes;

% include whotab;


/* external entries */

dcl  adjust_bit_count_ ext entry (char (168) aligned, char (32) aligned, bit (1) aligned,
     fixed bin (24) aligned, fixed bin (35) aligned);

dcl  com_err_ ext entry
     options (variable);

dcl  command_query_ ext entry
     options (variable);

dcl  get_group_id_ ext entry
     returns (char (32) aligned);

dcl  hcs_$add_acl_entries ext entry
    (char (*) aligned, char (*) aligned, ptr aligned, fixed bin aligned, fixed bin (35) aligned);
dcl  hcs_$delentry_seg ext entry
    (ptr aligned, fixed bin (35) aligned);

dcl  hcs_$initiate ext entry
    (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin aligned, fixed bin aligned,
     ptr aligned, fixed bin (35) aligned);

dcl  hcs_$make_seg ext entry
    (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (5) aligned, ptr aligned,
     fixed bin (35) aligned);

dcl  hcs_$set_ring_brackets ext entry (char (*) aligned, char (*) aligned, (3) fixed bin (3) aligned,
     fixed bin (35) aligned);

dcl  hcs_$truncate_seg ext entry
    (ptr aligned, fixed bin aligned, fixed bin (35) aligned);

dcl  hcs_$wakeup ext entry (bit (*) aligned, fixed bin (71), fixed bin (71), fixed bin (35) aligned);

dcl  ioa_ ext entry
     options (variable);

dcl  ioa_$nnl ext entry
     options (variable);

dcl  ioa_$rsnnl ext entry
     options (variable);

dcl  ios_$read_ptr ext entry
    (ptr aligned, fixed bin aligned, fixed bin aligned);

dcl  message_segment_$add_file ext entry
    (char (*) aligned, char (*) aligned, ptr, fixed bin aligned, bit (*) aligned, fixed bin (35) aligned);

dcl  message_segment_$delete_file ext entry
    (char (*) aligned, char (*) aligned, bit (72) aligned, fixed bin (35) aligned);

dcl  message_segment_$get_message_count_file ext entry
    (char (*) aligned, char (*) aligned, fixed bin aligned, fixed bin (35) aligned);

dcl  unique_chars_ entry (bit(*)) returns(char(15));
dcl  unique_bits_ entry() returns(bit(70));
dcl  user_info_$authorization_range entry ((2) bit (72) aligned);

end gcos_queue_job_;
