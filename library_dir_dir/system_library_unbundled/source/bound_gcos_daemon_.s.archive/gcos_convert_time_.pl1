/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


gcos_convert_time_: proc (a_gcos_time, a_deferral, a_code);


/* DECLARATIONS */
/* ------------ */


/* fixed bin */
/* ----- --- */

dcl (
     hundredth_length,				/* length of string representing converted hundredths */
     minutes,
     seconds
     ) fixed bin aligned;

dcl (
     a_code,					/* error code (argument) */
     code,					/* error code (internal) */
     fixed_bin_hundredths				/* converted hundredths of a second */
     ) fixed bin (35) aligned;

dcl (
     a_deferral,					/* multics deferral time (argument) */
     deferral					/* multics deferral time (internal) */
     ) fixed bin (71) aligned;


/* character strings */
/* --------- ------- */

dcl (
     ascii_hundredths				/* 100ths of an hr in ascii */
     ) char (4) aligned;

dcl (
     converted_hundredths				/* ascii 100ths converted to hh:mm */
     ) char (8) aligned;

dcl (
     a_gcos_time,					/* gcos date-time to be converted (argument) */
     gcos_time					/* gcos date-time to be converted (internal) */
     ) char (16) aligned;

dcl (
     multics_time					/* ascii multics time */
     ) char (32) aligned;


/* built in */
/* ----- -- */

dcl (
     divide,
     fixed,
     substr
     ) builtin;


/* external entries */
/* -------- ------- */

dcl  convert_date_to_binary_ ext entry
    (char (*) aligned, fixed bin (71) aligned, fixed bin (35) aligned);

dcl  cv_dec_check_ ext entry
    (char (*) aligned, fixed bin (35) aligned) returns (fixed bin (35) aligned);

dcl  ioa_$rsnnl ext entry
     options (variable);


/*  */

	gcos_time = a_gcos_time;			/* copy in argument */
	code = 0;					/* initialize error code */
	deferral = 0;				/* initialize deferral field */


/* convert MMDDYY to MM/DD/YY */

	multics_time = "";				/* blank out time field */
	substr (multics_time, 1, 2) = substr (gcos_time, 1, 2); /* month */
	substr (multics_time, 4, 2) = substr (gcos_time, 3, 2); /* day */
	substr (multics_time, 7, 2) = substr (gcos_time, 5, 2); /* year */
	substr (multics_time, 3, 1),
	substr (multics_time, 6, 1) = "/";		/* put slashes between fields */

/* pick up HH */

	substr (multics_time, 10, 2) = substr (gcos_time, 8, 2);
	substr (multics_time, 12, 1) = ":";

/* pick up MM or convert XX to MM */

	if substr (gcos_time, 10, 1) = ":"		/* gcos time given in minutes */
	then do;
	     substr (multics_time, 13, 2) = substr (gcos_time, 11, 2); /* just copy */
	     substr (multics_time, 15, 3) = ":00";	/* no seconds */
	end;

	else					/* gcos time in 100ths of an hour */
	do;

	     if substr (gcos_time, 10, 1) = "."		/* field is HH.XX */
	     then ascii_hundredths = substr (gcos_time, 11, 2);
	     else					/* field is HHXX */
	     ascii_hundredths = substr (gcos_time, 10, 2);

	     call convert_hundredths;			/* convert hundredths to ascii MM:SS */
	     if code ^= 0				/* error converting */
	     then go to RETURN;

	     substr (multics_time, 13, hundredth_length) = substr (converted_hundredths, 1, hundredth_length);

	end;

	call convert_date_to_binary_ (multics_time, deferral, code); /* convert date */

RETURN:	

	if code ^= 0				/* an error occurred */
	then code = 1 ;				/* return non-fatal error */

	a_deferral = deferral;			/* return deferred time */

	a_code = code;				/* return error code */

	return;

/*  */

convert_hundredths: proc;				/* internal procedure */

	     fixed_bin_hundredths = cv_dec_check_ (ascii_hundredths, code); /* convert to fixed bin */
	     if code ^= 0				/* error converting */
	     then return;

	     seconds = fixed (fixed_bin_hundredths*36, 17); /* convert to seconds */

	     minutes = divide (seconds, 60, 17, 0);	/* convert to minutes and seconds */
	     seconds = seconds - minutes*60;
	     call ioa_$rsnnl ("^d:^d", converted_hundredths, hundredth_length, minutes, seconds);

	     return;

	end convert_hundredths;

     end gcos_convert_time_;
