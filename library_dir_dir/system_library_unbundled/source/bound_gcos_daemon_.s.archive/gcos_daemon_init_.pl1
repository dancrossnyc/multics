/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* ******************************************************************************
   *								*
   *	Written by  P. Haber					*
   *	Modified by  R.H. Morrison	March,1975			*
   *								*
   ****************************************************************************** */


gcos_daemon_init_: proc (fatal_error);

/* DECLARATIONS */
/* ------------ */

dcl (
     gcos_daemon$abs_overflow_handler ext		/* bypass compiler problem */
     ) fixed;



/* fixed bin */
/* ----- --- */

dcl (
     mode						/* access to directory */
     ) fixed bin (5) aligned;

dcl (
     rbs (3) init (5, 5, 5)				/* ring brackets for append call */
     ) fixed bin (6) aligned;

dcl (
     gcos_daemon_stat_$anonymous_user_len ext,
     gcos_daemon_stat_$default_home_dir_len ext,
     gcos_daemon_stat_$input_dir_len ext,
     gcos_daemon_stat_$max_priority ext,
     gcos_daemon_stat_$pool_dir_len ext,
     gcos_daemon_stat_$root_dir_len ext,
     i						/* loop index */
     ) fixed bin aligned;

dcl (
     code,					/* error code */
     error_table_$namedup ext
     ) fixed bin (35) aligned;

dcl (
     channel_name,					/* name of created event channel */
     gcos_daemon_stat_$overflow_channel ext
     ) fixed bin (71) aligned;

/* pointers */
/* -------- */

dcl (
     aclp,					/* pointer to acl data */
     sp						/* pointer to return status from ios_ calls */
     ) ptr aligned;

/* bit strings */
/* --- ------- */

dcl (
     fatal_error					/* ON if fatal error encountered during initialization */
     ) bit (1) aligned;

dcl (
     gcos_daemon_stat_$process_id ext			/* process id of gcos daemon */
     ) bit (36) aligned;

dcl (
     status_stuff					/* returned status from ios_ calls */
     ) bit (72) aligned;

/* character strings */
/* --------- ------- */

dcl (
     gcos_daemon_stat_$snumb ext
     ) char (6) aligned;

dcl (
     account,					/* user's account */
     en,						/* entry portion of dir name */
     gcos_daemon_stat_$anonymous_user ext,		/* name of anonymous user */
     group_id,					/* from get_group_id */
     name,					/* user's name */
     project					/* user's project */
     ) char (32) aligned;


dcl (
     dn,						/* dir portion of directory */
     gcos_daemon_stat_$default_home_dir ext,
     gcos_daemon_stat_$input_dir ext,
     gcos_daemon_stat_$pool_dir ext,
     gcos_daemon_stat_$root_dir ext,
     dir_name
     ) char (168) aligned;

/* masks */
/* ----- */

dcl 1 status aligned based (sp),			/* mask for ios_ status */
    2 code fixed bin (35);				/* code portion */

/* structures */
/* ---------- */

dcl 1 dir_acl (2) aligned,				/* for possible call to add_dir_acl */
    2 access_name char (32) aligned,
    2 dir_modes bit (36) aligned,
    2 a_code fixed bin (35) aligned;


/* built-in */
/* -------- */

dcl (
     addr,
     null,
     substr
     ) builtin;

/* conditions */

dcl (
     quit
     ) condition;


/* external entries */
/* -------- ------- */

dcl  change_wdir_ ext entry
    (char (168) aligned, fixed bin (35) aligned);

dcl  com_err_ ext entry
     options (variable);

dcl  expand_path_ ext entry
    (ptr aligned, fixed bin aligned, ptr aligned, ptr aligned, fixed bin (35) aligned);

dcl  gcos_daemon_init_$early_quit ext entry;

dcl  get_group_id_$tag_star ext entry
     returns (char (32) aligned);

dcl  get_process_id_ ext entry
     returns (bit (36) aligned);

dcl  hcs_$add_dir_acl_entries ext entry
    (char (*) aligned, char (*) aligned, ptr aligned, fixed bin aligned, fixed bin (35) aligned);

dcl  hcs_$append_branchx ext entry
    (char (*) aligned, char (*) aligned, fixed bin (5) aligned, (3) fixed bin (6) aligned, char (*) aligned,
     fixed bin (1) aligned, fixed bin (1) aligned, fixed bin (24) aligned, fixed bin (35) aligned);

dcl  hcs_$get_user_effmode ext entry
    (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin aligned, fixed bin (5) aligned,
     fixed bin (35) aligned);

dcl  ioa_ ext entry
     options (variable);

dcl  ios_$resetread ext entry
    (char (*) aligned, bit (72) aligned);

dcl  ios_$order ext entry
    (char (*) aligned, char (*) aligned, ptr aligned, bit (72) aligned);

dcl  ipc_$create_ev_chn ext entry
    (fixed bin (71) aligned, fixed bin (35) aligned);

dcl  ipc_$decl_ev_call_chn ext entry
    (fixed bin (71) aligned, ptr aligned, ptr aligned, fixed bin aligned, fixed bin (35) aligned);

dcl  user_info_ ext entry
    (char (*) aligned, char (*) aligned, char (*) aligned);

/*  */

	call user_info_ (name, project, account);	/* determine callers' project */
	if name ^= "GCOS"|
	project ^= "SysDaemon"			/* not being called by init_admin_ */
	then do;					/* caller should use test entry */
	     call com_err_ (0, "gcos_daemon_init_", "Use test entry");
	     fatal_error = "1"b;
	     return;
	end;

gd_test:	entry (fatal_error);			/* entry for testing from user process */
	call init_pointers;
	on condition (quit)
	     call gcos_daemon_init_$early_quit;

	call ios_$order ("user_i/o", "quit_enable", null, status_stuff);
	if status.code ^= 0
	then do;
	     call com_err_ (status.code, "gcos_daemon_init_", "Order call to enable quits");
	     fatal_error = "1"b;
	     return;
	end;

	fatal_error = "0"b;				/* initialize argument */

	group_id = get_group_id_$tag_star ();		/* get user name */

	dir_acl (1).access_name = group_id;		/* fill in acl structure for calls */
	dir_acl (2).access_name = substr (gcos_daemon_stat_$anonymous_user, 1, gcos_daemon_stat_$anonymous_user_len);
	do i = 1 to 2;
	     dir_acl (i).dir_modes = "111000000000000000000000000000000000"b;
	end;

	do dir_name = substr (gcos_daemon_stat_$root_dir, 1, gcos_daemon_stat_$root_dir_len),
		substr (gcos_daemon_stat_$pool_dir, 1, gcos_daemon_stat_$pool_dir_len),
		substr (gcos_daemon_stat_$default_home_dir, 1, gcos_daemon_stat_$default_home_dir_len),
		substr (gcos_daemon_stat_$input_dir, 1, gcos_daemon_stat_$input_dir_len);

	     do i = 168 to 1 by -1 while (substr (dir_name, i, 1) = " ");
	     end;

	     call expand_path_ (addr (dir_name), i, addr (dn), addr (en), code);
	     if code ^= 0
	     then go to END_LOOP;

	     call hcs_$append_branchx (dn, en, 01011b, rbs, group_id, 1, 0, 0, code);
	     if code ^= 0
	     then if code ^= error_table_$namedup	/* returned if dir already exists */
		then go to END_LOOP;

	     do i = 1 to 2;				/* init return code */
		dir_acl (i).a_code = 0;
	     end;

	     call hcs_$add_dir_acl_entries (dn, en, aclp, 2, code); /* set minimum acl */
	     if code ^= 0				/* error setting acl */
	     then if code ^= error_table_$namedup	/* returned if all names are on acl */
		then go to END_LOOP;

	end;

END_LOOP:

	if code = 0				/* access on dirs okay */
	then call change_wdir_ (dir_name, code);	/* switch to input dir */

	if code ^= 0				/* an error occurred in checking or switching to dir */
	then do;
	     call com_err_ (code, "gcos_daemon_init_", dir_name);
	     fatal_error = "1"b;
	end;

	gcos_daemon_stat_$snumb = "";			/* initialize current snumb */

	call ipc_$create_ev_chn (channel_name, code);	/* create channel to signal quota overflows */
	if code ^= 0
	then do;
	     call com_err_ (code, "gcos_daemon_init_", "Error creating event channel");
	     fatal_error = "1"b;
	     return;
	end;

	call ipc_$decl_ev_call_chn (channel_name, addr (gcos_daemon$abs_overflow_handler), null, 0, code);
	if code ^= 0
	then do;
	     call com_err_ (code, "gcos_daemon_init_", "Error converting event channel to call channel");
	     fatal_error = "1"b;
	     return;
	end;

	gcos_daemon_stat_$overflow_channel = channel_name;

	gcos_daemon_stat_$process_id = get_process_id_ ();

	gcos_daemon_stat_$max_priority = 1;

	return;

/*  */

early_quit: entry;

	call init_pointers;
	call ios_$resetread ("user_i/o", status_stuff);
	code = status.code;
	if code ^= 0
	then do;
	     call com_err_ (code, "gcos_daemon_init_", "Error resetting user_i/o");
	     fatal_error = "1"b;
	     return;
	end;

	call ioa_ ("QUIT^/START");
	return;
						/*  */
						/* INTERNAL PROCEDURES */

init_pointers: proc;
	     aclp = addr (dir_acl (1).access_name);	/* pointer to acl data */
	     sp = addr (status_stuff);		/* pointer to return status from ios_ calls */
	     return;
	end init_pointers;

     end gcos_daemon_init_;
