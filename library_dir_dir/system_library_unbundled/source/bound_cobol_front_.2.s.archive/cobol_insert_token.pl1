/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_insert_token.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 12/09/80 by FCH, [4.4-1], size of token in token stack increased */
/* Modified since Version 4.0 */

/* format: style3 */
cobol_insert_token:
     proc (token_type, tv_len);

dcl	cobol_allo_tm	entry (ptr, fixed bin) ext;
dcl	cobol_output_tokens entry ext;

/*   general overlay for any token    */

dcl	1 token		based (cobol_current),
	  2 fwd_link	pointer,
	  2 back_link	pointer,
	  2 rep_link	pointer,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,
	  2 body		char (1);

dcl	zerosb		(100) bit (9) static init ((100) (1)"000000000"b);
dcl	zeros		char (100) based (addr (zerosb));
dcl	zmvr		char (tb_len) based (addr (token.body));

/* 
   This routine makes all entries in the token stack.  A new blank token will be inserted immediately
   after the token pointed to by "current".
    */



dcl	p		pointer;
dcl	(token_type, tb_len, tv_len)
			fixed bin;

/* Type 8 token must be at least as big as type 1 token */

dcl	token_base_len	(24) fixed bin static init (12, 20, 8, 4, 16, 8, 36, 8, (15) 0, 5);

dcl	addr		builtin;
dcl	null		builtin;


	tb_len = token_base_len (token_type);

	if cobol_stack_sw = "1"b
	then do;
		cobol_init_ta_sw = "1"b;
		if cobol_output_sw = "1"b
		then do;
			call cobol_output_tokens;

			cobol_output_sw = "0"b;
		     end;

		if cobol_frst = null ()
		then do;				/* the stack is empty */
			call al_token;

			cobol_frst = cobol_current;	/* set limit pointers */
			cobol_top = cobol_current;
			token.back_link = null ();	/* set links */
			token.fwd_link = null ();
		     end;
		else if token.fwd_link = null ()
		then do;				/* current is last token in the stack */
			p = cobol_current;

			call al_token;

			cobol_top = cobol_current;	/* set limit pointer */
			p -> token.fwd_link = cobol_current;
						/* link new token in */
			token.back_link = p;
			token.fwd_link = null ();
		     end;
		else do;
			p = cobol_current;

			call al_token;

			token.back_link = p;	/* link new token in */
			token.fwd_link = p -> token.fwd_link;
			token.fwd_link -> token.back_link = cobol_current;
			p -> token.fwd_link = cobol_current;
		     end;
	     end;

	else do;

		call cobol_output_tokens;

		if cobol_init_ta_sw = "1"b
		then do;
			cobol_init_ta_sw = "0"b;

			cobol_current = cobol_ta_ptr;
			cobol_frst = cobol_ta_ptr;
			cobol_top = cobol_ta_ptr;

			call al_tokenf;

			token.fwd_link = null ();
			token.back_link = null ();
		     end;
		else call al_tokenf;

	     end;
	return;


al_token:
     proc;					/*[4.4-1]*/
	call cobol_allo_tm (cobol_current, 76 + tb_len + tv_len);
	call al_tokenf;
     end;

al_tokenf:
     proc;

	token.rep_link = null ();			/* initialize replacement string pointer */
	token.l_info = "0"b;			/* initialize lex info bits */
	token.size = tb_len + tv_len + 16;		/* set the size field */
	token.type = token_type;			/* set the type field */
	zmvr = zeros;				/* initialize other fixed fields */
	return;
     end;

%include cobol_ext_lex;

     end cobol_insert_token;
