/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_merge.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 11/19/81 by FCH, [5.1-2], count lines issued by copy files, phx11818(BUG519) */
/* Modified on 10/27/81 by FCH, [5.1-1], issue diag if long line found, phx11819(BUG517) */
/* Modified on 04/09/81, BUG477 by FCH, [4.4-2], fix bugs in leveling for validation-81, BUG477 */
/* Modified on 10/15/80 by PRP [4.4-1], report writer changes*/
/* Modified on 10/20/79 by PRP [4.1-1], mask debug lines from statement_info */
/* Modified on 04/24/79 by FCH, [4.0-2], debug statement */
/* Modified on 04/24/79 by FCH, [4.0-1], prevent loop if end cobol generated */
/* Modified on 07/34/78 by RAL, [3.0-2], fixed bug with blank card after copy statement */
/* Modified on 06/23/78 by FCH, [3.0-1], ref to cobol_put_eln.incl.pl1 replaced by code */
/* Modified since Version 3.0 */

/* format: style3 */
cobol_merge:
     proc;

/* ========================================================================== */
/*                                                                            */
/* this is a procedure to obtain the next source cards.name from the input   */
/* file , sequence check this cards and make it available for processing.     */
/* other functions performed by this procedure are the following ::           */
/*       process comment cards.                                               */
/*       obtain the next cards for continuation processor(look ahead).        */
/*       handle the end of data problems.                                     */
/*                                                                            */
/* ========================================================================== */



start:						/* FIRST CHECK IF END OF PROGRAM */
	if cobol_endprog_sw
	then go to cobol_lex_exit;

	if cobol_prime_sw
	then do;					/* if first time in...  */
		d_on_last_line = "0"b;
		cobol_prime_sw = "0"b;
		source_sr = cobol_sr;		/* save so copy can use sr too */
		dup_sw = "0"b;
		ln_err_sw = "0"b;
		n_c_eof (1) = "0"b;
		n_c_eof (2) = "1"b;
		statement_start = 0;
		line_n_c (1) = 0;
		line_n_c (2) = 10000000;

		goto begin_proc;
	     end;

	if cobol_copy_found				/* if COPY clause processed and COPY file initiated... */
	then do;					/* START SAVE AND INITIALATION */

		cobol_copy_found = "0"b;

/* save current source file cards  and asociated information to be restored after the copy */

		call cobol_allo_tm (save_cards, 272);
		cs1.c = cobol_cards.column;
		cs1.tb = cobol_cards.tblanks;

		if cobol_cards.nr_char = cobol_cards.column
		then do;

			if ^n_c_eof (1)
			then do;			/* Supress the source following COPY. */
				tptr = cobol_current -> source.back_link;

				do while (tptr -> source.type ^= 6);
				     tptr = tptr -> source.back_link;
				end;

				substr (tptr -> source.l_info, 3, 1) = "1"b;
			     end;

			cs1.nr = 8;

		     end;

		else cs1.nr = cobol_cards.nr_char + 1;	/* bypass the n_l set by proc_copy */

		cs1.n = cobol_cards.name;
		cs1.sc = cobol_continuation;
		save_statement_start = statement_start;
		statement_start = 0;
		cs1.sx = cobol_xlast8;
		cobol_xlast8 = "0"b;
		cobol_copy_active = "1"b;		/* ready to process copied text */
		ln_err_sw = "0"b;
		cobol_continuation = "0"b;
		line_n_c (2) = 0;			/* reset the sequence counter */
		n_c_eof (2) = "0"b;			/* reset the eof flag */

		if cobol_rep_sw = "1"b
		then cobol_stack_sw = "1"b;

/* Decrement c_l_n and decrement statement_start for this SOURCE statement (save_statement_start).
	   They will be incremented again when we restore this card. */

		cobol_c_l_n = cobol_c_l_n - 1;
		save_statement_start = save_statement_start - (cobol_cards.column + cobol_cards.tblanks);
						/*[3.0-2]*/

	     end;

begin_proc:					/* main loop control label */
						/* set global eof indicator if necessary */
	if (n_c_eof (1) & n_c_eof (2))
	then do;

/* provide generated cards trailer image */

/*[4.4-1]*/

		if report_exists
		then do;
			if real_end_report
			then ;
			else do;
				n_c_eof (1) = "0"b;
				cobol_endprog_sw = "1"b;
				return;
			     end;
		     end;
		else ;

/*[4.4-1]*/

/*[4.0-1]*/
		if end_card_emit			/*[4.0-1]*/
		then do;
			cobol_endprog_sw = "1"b;	/*[4.0-1]*/
			call cobol_lexerr$lexerr3 (38, "0"b, 0, " ");
						/*[4.0-1]*/
		     end;

		cobol_cards.nr_char = 8;
		cobol_cards.column = 18;		/* show this as generated */
						/*[4.0-1]*/
		substr (cobol_cards.name, 1, 18) = "~~~~~~ end cobol." || cobol_new_line_character;
		cobol_continuation = "0"b;

/* Update cln, but don't call update_line_info to do it! Since no source token was
		   generated for "end cobol", update_line_info would change the line & column fields
		   in whatever token cobol_current happens to be pointing  to. */

		cobol_c_l_n = cobol_c_l_n + 1;	/*[4.0-1]*/
		end_card_emit = "1"b;

		return;

	     end;

/* read new source if necessary */

next_source:
	if cobol_copy_active = "0"b
	then do;					/* source */
		i = 1;

/*[5.1-1]*/
		call cobol_get_rec (st, cobol_sfp, source_size, rptr, ptemp);

		if substr (st, 17, 16) = "0000000000100111"b
		then do;

/*[5.1-1]*/
			if source_size > 0
			then call cobol_lexerr$lexerr4 (40, "0"b, 0, " ", 7);

			line_n_c (1) = 1000000;
			n_c_eof (1) = "1"b;
			goto begin_proc;		/* file is now empty */
		     end;
	     end;
	else do;					/* GET LINE FROM COPY FILE */

		i = 2;

/*[5.1-1]*/
		call cobol_get_rec (st, cobol_cfp, copy_size, rptr, ptemp);

/*[5.1-2]*/
		if copy_size > 0
		then copy_lines = copy_lines + 1;

		if substr (st, 17, 16) = "0000000000100111"b
		then do;

/*[5.1-1]*/
			if copy_size > 0
			then call cobol_lexerr$lexerr4 (40, "0"b, 0, " ", 7);


			n_c_eof (2) = "1"b;
			cobol_rec1_sw (2) = "1"b;
			cobol_copy_active = "0"b;
			line_n_c (2) = 1000000;
			cobol_copy_active = "0"b;
			cobol_copy_found = "0"b;
			cobol_rep_sw = "0"b;
			cobol_stack_sw = "0"b;
			cobol_cards.column = cs1.c;
			cobol_cards.tblanks = cs1.tb;
			cobol_cards.nr_char = cs1.nr;
			cobol_cards.name = cs1.n;
			cobol_xlast8 = cs1.sx;
			cobol_continuation = cs1.sc;
			statement_start = save_statement_start;
			cobol_sr = source_sr;

/* * * free allocated token * * */

dcl	at_st		char (1) based (save_cards);

			save_cards = addrel (save_cards, -1);
			at_st = "2";


















			if n_c_eof (1)
			then return;

/* End of source, COPY was last statement...nothing to restore. */

			do while (substr (cobol_cards.name, cobol_cards.nr_char, 1) = " ");
			     cobol_cards.nr_char = cobol_cards.nr_char + 1;
			end;

			if substr (cobol_cards.name, cobol_cards.nr_char, 1) ^= cobol_new_line_character
			then do;

				call cobol_insert_token (6, cobol_ext_lex$cobol_cards.column);

				source.len = cobol_cards.column;
				substr (source.image, 1, source.len) = substr (cobol_cards.name, 1, source.len);
				substr (source.image, 1, cobol_cards.nr_char - 1) = " ";

				call update_line_info;

				return;
			     end;

			call update_line_info;	/* [3.0-2] */

			goto begin_proc;

		     end;
	     end;

	p = rptr;
	cobol_cards.column = ptemp;			/* -8 for ssf, +1 for n_l */
	substr (cobol_cards.name, 1, cobol_cards.column) = p -> n_c;

/* initialize a new token element */

	call cobol_insert_token (6, cobol_ext_lex$cobol_cards.column);

	source.sm = ssf_header.macro_expansion;
	source.copy = cobol_copy_active;
	source.sln = ssf_header.line_number;
	source.len = cobol_cards.column;

	if cobol_$date_compiled_sw > 0
	then if substr (cobol_cards.name, 7, 1) ^= "*" & substr (cobol_cards.name, 7, 1) ^= "/"
	     then if substr (cobol_cards.name, 8, 4) = "    "
		then source.len = 1;		/* make an empty line */

	substr (source.image, 1, source.len) = substr (cobol_cards.name, 1, source.len);
	substr (source.image, source.len, 1) = cobol_new_line_character;

	if cobol_rep_sw = "1"b
	then cobol_output_sw = "1"b;

	if cobol_xlast8 = "1"b & cobol_cards.column = 81
	then cobol_cards.column = 73;

	cobol_cards.tblanks = 0;

	do cobol_cards.column = cobol_cards.column - 1 to 9 by -1;

	     if substr (cobol_cards.name, cobol_cards.column, 1) = " "
	     then cobol_cards.tblanks = cobol_cards.tblanks + 1;
	     else goto eskb;

	end;

eskb:
	cobol_cards.column = cobol_cards.column + 1;
	substr (cobol_cards.name, cobol_cards.column, 1) = cobol_new_line_character;

	call update_line_info;

ck_seq_err:					/* extract first column for test */
	cobol_continuation = "0"b;

	if cobol_cards.column < 8
	then goto begin_proc;

	else do;
		c1 = substr (cobol_cards.name, 7, 1);	/* one character */

		if (c1 = "*") | (c1 = "/")
		then goto begin_proc;		/* comment */

/*[4.0-2]*/
		if c1 = "d" | c1 = "D"		/*[4.0-2]*/
		then do;
			if fixed_common.comp_level < "2"
			then call lev_diag (207);

/*[4.0-2]*/
			if cobol_debug_mode = "0"b
			then go to begin_proc;	/*[4.0-2]*/
		     end;

		cobol_cards.nr_char = 8;

		if c1 = "-"
		then do;				/* continue mode */

			if cobol_rwt_init_sw	/* if first text card in program... */
			then do;
				call cobol_lexerr$lexerr4 (9, "0"b, 0, " ", 7);
				goto begin_proc;
			     end;

			if d_on_last_line
			then call cobol_lexerr$lexerr4 (29, "0"b, 0, " ", 7);

			do while (substr (cobol_cards.name, cobol_cards.nr_char, 1) = " ");
			     cobol_cards.nr_char = cobol_cards.nr_char + 1;
			end;

			if cobol_cards.nr_char < 12
			then do;			/* Illegal continuation card */

				call cobol_lexerr$lexerr4 (8, "0"b, 0, " ", 7);
				cobol_cards.nr_char = 12;

			     end;

			cobol_continuation = "1"b;	/* show the proper mode */

/*[4.4-2]*/
			if fixed_common.comp_level < "3"
						/*[4.4-2]*/
			then if ^cobol_gns$alpha_lit ()
						/*[4.4-2]*/
			     then call lev_diag (1);

		     end;				/* last of continue */

		else if (c1 ^= " ") & (c1 ^= "d" & c1 ^= "D")
		then call cobol_lexerr$lexerr4 (18, "0"b, 0, " ", 7);

		d_on_last_line = ((c1 = "d" | c1 = "D") & cobol_debug_mode) | (d_on_last_line & cobol_continuation);

	     end;					/* case of short line */
exit:
	return;

copy_file_size:
     entry (BC);

/*[5.1-1]*/
	copy_size = BC / 9;				/*[5.1-1]*/
	return;

source_file_size:
     entry (BC);

/*[5.1-1]*/
	source_size = BC / 9;			/*[5.1-1]*/
	return;

/*[5.1-1]*/
declare	BC		fixed bin (24);		/*[5.1-1]*/
declare	(source_size, copy_size)
			fixed bin static internal;

copy_line_count:
     entry returns (fixed bin);

/*[5.1-2]*/
	return (copy_lines);

/*[5.1-2]*/
dcl	copy_lines	fixed bin static int;

incr_line_count:
     entry;

/*[5.1-1]*/
	copy_lines = copy_lines + 1;

/*[5.1-1]*/
	return;

initialize:
     entry;

/*[4.0-1]*/
	end_card_emit = "0"b;			/*[5.1-2]*/
	copy_lines = 0;

/*[4.0-1]*/
	return;

update_line_info:
     proc;

/* general overlay for any token */

dcl	1 token		based (cobol_current),
	  2 fwd_link	ptr,
	  2 back_link	ptr,
	  2 rep_link	ptr,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin;

start_update_line_info:				/*[4.4-1*/
						/* Mask debug and report writer from statement info */
						/*[4.0-2]*/
	if substr (source.image, 1, 6) ^= "~~~~~~"	/* & ^processing_report*/
	then cobol_c_l_n = cobol_c_l_n + 1;

/* [3.0-1] */

dcl	(code, last_line, c_x_l, copy_fileno, cur_fileno, save_c_x_l)
			fixed bin (17) static;
dcl	1 source1		based (cobol_current),
	  2 fwd_link	ptr,
	  2 back_link	ptr,
	  2 rep_link	ptr,
	  2 l_info	bit (8),
	  2 size		fixed bin (17),
	  2 fill1		fixed bin (17),
	  2 fill		char (1),
	  2 sm		bit (1),
	  2 copy		bit (1),
	  2 sln		bit (22),
	  2 type		fixed bin (17);


	if cobol_elnp_sw = "1"b
	then do;

		cobol_elnp_sw = "0"b;
		last_line = 0;
		copy_fileno = 0;
		save_c_x_l = 0;
		c_x_l = 0;

	     end;

	if source1.copy = "1"b
	then do;

		if last_line = 1
		then do;

			last_line = 0;
			save_c_x_l = c_x_l - 1;
			c_x_l = 0;
			copy_fileno = copy_fileno + 1;
			cur_fileno = copy_fileno;

		     end;

		if substr (source1.l_info, 1, 1) = "1"b
		then c_x_l = c_x_l - 1;

	     end;

	else do;

		if last_line = 0
		then do;

			last_line = 1;
			cur_fileno = 0;
			c_x_l = save_c_x_l;

		     end;

	     end;

/*[4.4-1]*/
/*Mask debug and report writer lines from statement_info */

	if substr (source.image, 1, 6) ^= "~~~~~~"	/* & ^processing_report*/
						/*[4.1-1]*/
	then do;

		c_x_l = c_x_l + 1;

		eln_tab.fno (cobol_c_l_n) = cur_fileno;
		eln_tab.lno (cobol_c_l_n) = c_x_l;

		statement_info.start (cobol_c_l_n) = statement_start;
		statement_info.length (cobol_c_l_n) = cobol_cards.column - 1;
						/* Do not include new_line_char. */
		statement_start = statement_start + cobol_cards.column + cobol_cards.tblanks;

	     end;					/*[4.1-1]*/

/* [3.0-1] */
	token.line = cobol_c_l_n;
	token.column = 0;

exit_update_line_info:
	return;

     end update_line_info;

delete_group:
     proc (rep_point);


/* ========================================================================== */
/*                                                                            */
/* This routine is intended to perform the physical space release for the     */
/* replacement directory elements.  It is called       */
/* with a pointer to a line within the directory to be released.              */
/*                                                                            */
/* ========================================================================== */



/*   general overlay for any replacement token    */

dcl	1 rtoken		based (rep_point),
	  2 chain		pointer,
	  2 back_link	pointer,
	  2 lev_link	pointer,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin (7),
	  2 type		fixed bin (7);

dcl	(rep_point, rchain) pointer;

start_delete_group:
ck_lev:
	if rtoken.lev_link ^= null ()
	then call delete_group (rtoken.lev_link);
	rchain = rtoken.chain;

/* * * free allocated token * * */

dcl	at_st2		char (1) based (rep_point);

	rep_point = addrel (rep_point, -1);
	at_st2 = "2";

	rep_point = rchain;

	if rep_point ^= null ()
	then goto ck_lev;

exit_delete_group:
	return;

     end delete_group;

lev_diag:
     proc (num);

/*[4.0-2]*/
declare	num		fixed bin;

/*[4.0-2]*/
	lev_message.line = cobol_c_l_n;		/*[4.0-2]*/
	lev_message.column = 7;			/*[4.0-2]*/
	lev_message.number = num;

/*[4.0-2]*/
	call cobol_c_list (addr (lev_message));

     end;

/*[4.0-2]*/
declare	cobol_c_list	entry (ptr);

/*[4.0-2]*/
declare	1 lev_message	static int,		/*[4.0-2]*/
	  2 size		fixed bin init (28),	/*[4.0-2]*/
	  2 line		fixed bin init (0),		/*[4.0-2]*/
	  2 column	fixed bin init (0),		/*[4.0-2]*/
	  2 type		fixed bin init (5),		/*[4.0-2]*/
	  2 run		fixed bin init (9),		/*[4.0-2]*/
	  2 number	fixed bin init (0),		/*[4.0-2]*/
	  2 info		bit (32) init ("0"b);



/*[4.0-1]*/
dcl	(d_on_last_line, end_card_emit)
			bit (1) static;

/*   source    */
dcl	1 source		based (cobol_current),
	  2 fwd_link	pointer,
	  2 back_link	pointer,
	  2 rep_link	pointer,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 fill1		fixed bin,
	  2 fill		char (1),
	  2 sm		bit (1),
	  2 copy		bit (1),
	  2 sln		bit (22),
	  2 type		fixed bin,		/* = 6 */
	  2 info		bit (8),
	  2 len		fixed bin,
	  2 image		char (200);

/* save area for library file <-> source file transfer */

dcl	save_cards	pointer static;

dcl	1 cs1		based (save_cards),
	  2 (c, tb, nr)	fixed bin,
	  2 n		char (256),
	  2 sx		bit (1),
	  2 sc		bit (1);



dcl	n_c		char (256) based;		/*  source card images */

dcl	cobol_allo_tm	entry (ptr, fixed bin) ext;

dcl	cobol_lexerr$lexerr2
			entry (fixed bin, bit (1), fixed bin, char (50)) external;
dcl	cobol_lexerr$lexerr3
			entry (fixed bin, bit (1), fixed bin, char (50));
dcl	cobol_lexerr$lexerr4
			entry (fixed bin, bit (1), fixed bin, char (50), fixed bin) external;

/*[4.4-2]*/
dcl	cobol_gns$alpha_lit entry returns (bit (1));

dcl	cobol_insert_token	entry (fixed bin, fixed bin) external;

dcl	ioop		char (10);

declare	bc		fixed bin (24);

dcl	p		pointer static,
	c1		char (1) static,
	(
	ln_err_sw,
	n_c_eof		(2),
	dup_sw
	)		bit (1) static,
	line_n_c		(2) fixed bin (31) static,
	(i, j, ptemp, source_sr)
			fixed bin static;
dcl	statement_start	fixed bin (24) static;
dcl	save_statement_start
			fixed bin (24) static;

/* NPL IO DECLARATIONS */

dcl	st		bit (32);
dcl	(rptr, tptr)	ptr;
dcl	cobol_cselfle	entry (bit (32), ptr, char (*), char (3), fixed bin, char (1), bit (8)) ext;
dcl	cobol_get_rec	entry (bit (32), ptr, fixed bin, ptr, fixed bin) ext;

dcl	1 crec		based (rptr),
	  2 rpt_code	bit (5),
	  2 item_code	bit (3),
	  2 hdr_byte2	char (1),
	  2 crt		bit (8),
	  2 rfu		char (3),
	  2 fmt		char (2),
	  2 text,
	    3 lev		char (3),
	    3 cr_dt	char (5),
	    3 upd		char (5),
	    3 mod		char (2),
	    3 bcnt	char (10),
	    3 lncnt	char (7),
	    3 lang	char (3),
	    3 name	char (32);

dcl	1 source_record	based (rptr),
	  2 ssf_header,
	    3 report_code	bit (5),
	    3 item_code	bit (3),
	    3 record_type	bit (1),
	    3 must_be_zero	bit (1),
	    3 reserved_for_future_use
			bit (1),
	    3 text_code	bit (5),
	    3 trailing_blanks
			bit (8),
	    3 macro_expansion
			bit (1),
	    3 include	bit (1),
	    3 line_number	bit (22),
	    3 form_control	char (2),
	  2 text		char (256);

dcl	addr		builtin;
dcl	null		builtin;
dcl	bit		builtin;
dcl	bin		builtin;
dcl	fixed		builtin;
dcl	addrel		builtin;
dcl	substr		builtin;



%include cobol_ext_;
%include cobol_;
%include cobol_eln_table;
%include cobol_ext_lex;
%include cobol_fixed_common;

     end cobol_merge;
