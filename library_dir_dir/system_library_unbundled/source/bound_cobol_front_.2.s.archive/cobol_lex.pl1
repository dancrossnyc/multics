/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_lex.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 10/27/82 by FCH,  [5.2-1] ,save last line num, BUG543(phx13643) */
/* Modified on 12/21/81 by FCH, [5.1-1], issue diag if long line found, phx11819(BUG517) */
/* Modified on 10/15/80 by PRP, [4.4-1], report writer */
/* Modified on 05/02/79 by FCH, [4.0-2], debug statement */
/* Modified on 03/29/79 by FCH, [4.0-1], detect dupl data names */
/* Modified since Version 4.0 */


/* format: style3 */
cobol_lex:
     proc;

/* This run initializes all global data and contains the main loop of lex. */

/*   reserved_word    */

dcl	1 reserved_word	based (cobol_current),
	  2 fwd_link	pointer,
	  2 back_link	pointer,
	  2 rep_link	pointer,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,		/* = 1 */
	  2 key		fixed bin,
	  2 class		bit (26),
	  2 jump_index	fixed bin;


/* global pointers for the token table */

dcl	phoney		fixed bin;		/* phoney end of list */
dcl	cobol_merge	entry external;
dcl	cobol_report_writer entry external;
dcl	cobol_gns		entry external;
dcl	cobol_res_words	entry external;		/* dcl cobol_check_rep	entry external;  */
dcl	cobol_output_tokens entry external;
dcl	cobol_swf_put	entry (ptr, bit (32), ptr, fixed bin) ext;
dcl	st		bit (32);
dcl	elt_buf		char (440);
declare	(addr, null, substr, unspec)
			builtin;

/* [4.0-1] */
dcl	cobol_gns$init_tok_string
			entry;			/*[4.0-2]*/
dcl	cobol_io_$initialize
			entry;			/*[4.0-2]*/
dcl	cobol_output_tokens$initialize
			entry;			/*[4.0-2]*/
dcl	cobol_res_words$initialize
			entry;			/*[4.0-2]*/
dcl	cobol_gns$initialize
			entry;			/*[4.0-2]*/
dcl	cobol_merge$initialize
			entry;			/*[4.4-1]*/
declare	cobol_db_phase$initialize
			entry;
dcl	rw		entry (ptr, ptr);








	cobol_$date_compiled_sw = 0;
	cobol_mfp = cobol_m1fp;
	cobol_prime_sw = "1"b;
	cobol_stack_sw = "0"b;
	cobol_continuation = "1"b;
	cobol_copy_found = "0"b;
	cobol_copy_active = "0"b;
	cobol_debug_mode = "0"b;
	cobol_rwt_init_sw = "1"b;
	cobol_elnp_sw = "1"b;
	cobol_lu_sw = "1"b;
	cobol_scanoff_sw = "0"b;
	cobol_output_sw = "0"b;
	cobol_rep_sw = "0"b;

	cobol_init_ta_sw = "1"b;
	cobol_lex_exit = l_e1;
	cobol_pic_switch = "0"b;
	cobol_allo_init_sw = "1"b;
	cobol_endprog_sw = "0"b;
	cobol_progid_sw = "0"b;
	cobol_elt_idx = 1;
	cobol_elt_buf_ptr = addr (elt_buf);
	cobol_c_l_n = 0;
	cobol_dp_sw = "0"b;				/* indicates no decimal-point clause yet */
	cobol_decimal_point_character = ".";
	cobol_comma_character = ",";
	cobol_si_key = "00000";
	cobol_so_key = "00000";
	cobol_name_number = 1;
	cobol_section_number = 1;
	unspec (cobol_new_line_character) = "000001010"b;

	do phoney = 1 to 5;
	     cobol_head_words (phoney) = "0"b;
	end;

	do phoney = 1 to 2;
	     cobol_rec1_sw (phoney) = "0"b;
	     cobol_ln_sw (phoney) = "0"b;
	end;

/* [4.0-1] */
	call cobol_gns$init_tok_string;		/*[4.0-2]*/
	call cobol_io_$initialize;			/*[4.0-2]*/
	call cobol_output_tokens$initialize;		/*[4.0-2]*/
	call cobol_gns$initialize;			/*[4.0-2]*/
	call cobol_merge$initialize;			/*[4.4-1]*/
	call cobol_db_phase$initialize;

/*[4.0-2]*/
	call cobol_res_words$initialize;

	cobol_ta_ptr = addr (cobol_tarea);
	cobol_current = cobol_ta_ptr;
	reserved_word.fwd_link = null ();
	reserved_word.back_link = null ();
	reserved_word.rep_link = null ();
	reserved_word.l_info = "00100000"b;		/* suppress output first time into cobol_output_tokens */
	cobol_frst = cobol_ta_ptr;			/* causes main stack to be started  */
	cobol_top = cobol_ta_ptr;
	cobol_endprog_sw = "0"b;
	real_end_report = "0"b;
	processing_report = "0"b;

	call cobol_merge;

	do while (^cobol_endprog_sw);

	     call cobol_gns;

	     if substr (reserved_word.l_info, 1, 1) = "0"b
	     then /* 	if cobol_rep_sw = "1"b then call cobol_check_rep;   */
		if reserved_word.type = 8
		then call cobol_res_words;

	end;

l_e1:
	call cobol_output_tokens;

	cobol_m2fp = cobol_mfp;			/*[4.4-1]*/

	if fixed_common.fatal_no ^= 0
	then return;

/* The following code calls cobol_report_writer and processes the new source */

	if report_exists
	then do;

		processing_report = "1"b;
		cobol_output_sw = "0"b;
		cobol_head_words (5) = "0"b;

		call cobol_report_writer;

/*[5.1-1]*/
		call get_size (cobol_rwdd);

		ph_num = 2;
		cobol_mfp = cobol_m1fp;
		cobol_lex_exit = l_e2;

		call cobol_merge;

		do while (^cobol_endprog_sw);

		     call cobol_gns;

		     if substr (reserved_word.l_info, 1, 1) = "0"b
		     then if reserved_word.type = 8
			then call cobol_res_words;

		end;

l_e2:
		call cobol_output_tokens;

		cobol_head_words (5) = "1"b;

/*[5.1-1]*/
		call get_size (cobol_rwpd);

		ph_num = 3;
		cobol_output_sw = "0"b;
		cobol_mfp = cobol_m2fp;
		cobol_lex_exit = l_e3;
		real_end_report = "1"b;

		call cobol_merge;

		do while (^cobol_endprog_sw);

		     call cobol_gns;
		     if substr (reserved_word.l_info, 1, 1) = "0"b
		     then if reserved_word.type = 8
			then call cobol_res_words;

		end;

l_e3:
		call cobol_output_tokens;

	     end;

/*[5.1-2]*/
	fixed_common.cobol_cln = cobol_c_l_n;		/* save last line num */

	return;

get_size:
     proc (p);

/*[5.1-1]*/
dcl	p		ptr;			/*[5.1-1]*/
dcl	hcs_$fs_get_path_name
			entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
						/*[5.1-1]*/
dcl	hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35));
						/*[5.1-1]*/
dcl	cobol_merge$source_file_size
			entry (fixed bin (24));	/*[5.1-1]*/
						/*[5.1-1]*/
dcl	dn_1		char (168),
	en_1		char (32);		/*[5.1-1]*/
dcl	code		fixed bin (35),
	ldn		fixed bin;		/*[5.1-1]*/
dcl	s_ptr		ptr;			/*[5.1-1]*/
dcl	bc		fixed bin (24);


/*[5.1-1]*/
	cobol_current = cobol_ta_ptr;			/*[5.1-1]*/
	reserved_word.fwd_link = null ();		/*[5.1-1]*/
	reserved_word.back_link = null ();		/*[5.1-1]*/
	reserved_word.rep_link = null ();		/*[5.1-1]*/
	reserved_word.l_info = "00100000"b;		/*[5.1-1]*/
	cobol_frst = cobol_ta_ptr;			/*[5.1-1]*/
	cobol_top = cobol_ta_ptr;			/*[5.1-1]*/
	cobol_sfp = p;				/*[5.1-1]*/
	cobol_endprog_sw = "0"b;			/*[5.1-1]*/
						/*[5.1-1]*/
	call hcs_$fs_get_path_name (p, dn_1, ldn, en_1, code);
						/*[5.1-1]*/
						/*[5.1-1]*/
	if code ^= 0
	then go to err;				/*[5.1-1]*/
						/*[5.1-1]*/
	call hcs_$initiate_count (dn_1, en_1, "", bc, 1, s_ptr, code);
						/*[5.1-1]*/
						/*[5.1-1]*/
	if s_ptr = null ()
	then go to err;				/*[5.1-1]*/
						/*[5.1-1]*/
	call cobol_merge$source_file_size (bc);

     end;

err:						/*[5.1-1]*/
	return;

%include cobol_ext_;
%include cobol_ext_lex;
%include cobol_;
%include cobol_fixed_common;

     end cobol_lex;
