/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_find_secdef.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 11/18/76 by ORN to eliminate cobol_version_unique include file */
/* Modified since Version 2.0 */

/* format: style3 */
cobol_find_secdef:
     proc (type8_ptr, sectno, hashptr, retptr);

/*  DECLARATION OF THE PARAMETERS  */

dcl	type8_ptr		ptr;			/*  Points to the "type 8" record that contains the name of the section being searched
	for.  (input)  */

dcl	sectno		fixed bin (15);		/*  Contains the section number of the section being searched for.  (input)  */

dcl	hashptr		ptr;			/*  Points to the  string base table.  (input)  */

dcl	retptr		ptr;			/*  Points to the name table buffer entry of the found section definition.  If
	the section name is not found in this load of the name table buffer, retptr is set
	to "null()".  (output)  */



dcl	1 procname	based (retptr),
	  2 size		fixed bin (15),
	  2 line		fixed bin (15),
	  2 column	fixed bin (7),
	  2 type		fixed bin (7),
	  2 string_ptr	ptr,
	  2 prev_rec	ptr,
	  2 info1		bit (1),
	  2 info2		bit (1),
	  2 info3		bit (1),
	  2 info4		bit (1),
	  2 info5		bit (1),
	  2 info6		bit (1),
	  2 info7		bit (1),
	  2 info8		bit (1),
	  2 priority	char (2),
	  2 repl_bits	bit (8),
	  2 section_num	fixed bin (15),
	  2 proc_num	fixed bin (15),
	  2 def_line	fixed bin (15),
	  2 length	fixed bin (7),
	  2 name		char (30);

dcl	template		char (500) based (retptr);
dcl	temp_array	(500) char (1) based (retptr);/*[*/
dcl	arrpntr		(1:512) ptr based (hashptr);	/*]*/
						/*[[[
dcl arrpntr(1:256) ptr based (hashptr);          ]]]*/

dcl	aname		char (30);
dcl	alength		fixed bin (15);
dcl	i		fixed bin (7);

dcl	hashno		fixed bin (15);
dcl	n1		fixed bin (15) based (name_size_ptr);
dcl	name_size_ptr	ptr;
dcl	n		fixed bin (15);
dcl	1 auser_word	based (type8_ptr),
	  2 size		fixed bin (15),
	  2 line		fixed bin (15),
	  2 column	fixed bin (7),
	  2 type		fixed bin (7),
	  2 info1		bit (1),
	  2 info2		bit (1),
	  2 info3		bit (6),
	  2 length	fixed bin (7),
	  2 word		char (30);		/*[*/
dcl	addr		builtin;
dcl	fixed		builtin;
dcl	mod		builtin;
dcl	null		builtin;
dcl	substr		builtin;
dcl	unspec		builtin;			/*]*/


start:
	substr (aname, 1, auser_word.length) = substr (auser_word.word, 1, auser_word.length);
	alength = auser_word.length;
	call hash;				/*  HASH THE SECTION NAME  */

	retptr = arrpntr (hashno);			/*  Get a pointer to the first entry in the name table  buffer string
	with this hash code  */

/*  TRY TO FIND THE SECTION NAME IN THE NAME TABLE BUFFER  */

	do while (retptr ^= null ());

	     if procname.type = 18
	     then do;				/*  The current entry in the name table buffer pointed at by retptr is a section name  */

		     n = size_TOKEN (procname.type) - 3;
		     name_size_ptr = addr (temp_array (n));
		     if alength = n1		/* lengths equal? */
		     then if substr (aname, 1, alength) = substr (template, n + 4, alength)
						/* names the same? */
			then if auser_word.column = procname.proc_num
			     then do;
				     if procname.info5
				     then sectno = procname.section_num;
				     return;
				end;

		end;				/*  The current entry in the name table buffer pointed at by retptr is a section name  */

	     retptr = procname.string_ptr;		/*  Get a pointer to the previous entry in this string of names  */

	end;					/*  DO WHILE  */

/*  When we drop thru to here, retptr is "null()", and the search has not been successful  */

	return;					/*  Simply return  */

hash:
     proc;					/*  AGAIN !!!  */

	hashno = 0;
	do i = 1 to alength;
	     hashno = hashno + fixed (unspec (substr (aname, i, 1)), 15);
	end;

/*[*/
	hashno = mod (hashno, 512) + 1;		/*]*/
						/*[[[    hashno=mod(hashno,256)+1;     ]]]*/

     end hash;

%include cobol_size_values;

     end cobol_find_secdef;
