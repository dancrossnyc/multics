" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" ***********************************************************
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
"
"	G C O S  S Y S O U T  T R A N S L A T O R
"
"  This program takes 3 arguments. The first is a pointer to a 320 word buffer which
"  contains a GCOS system standard format block. The second is a pointer to an output area
"  for the translated output. The third is a return argument which is the number
"  of ascii characters which were placed in the output buffer.
"
"  Certain special bcd character conventions are recognized:
"
"	17		ignored
"	77n		n is a line skip count unless n is 20
"			in which case a skip to head of form
"			is called for.
"	7777X		put any character X in the buffer
"
"  Two ASCII conventions are recognized:
"
"	records with media codes > 5 are ASCII, and characters are copied without translation.
"
"	records with media code = 6 have no trailing newlines, so one will be appended.
"
"
"
"	INDEX REGISTER USAGE
"
"	X1		holds remaining block size (in words)
"	X3		holds current offset in input buffer (characters)
"	X4		holds size of current record not yet processed (characters)
"	X5		holds size of current record (words)
"	X6		holds current offset in output buffer (characters)
"
"
"
"	WRITTEN BY DICK SNYDER FEBRUARY 3,1971
"	MODIFIED BY T. CASEY, AUGUST 1973, TO PRODUCE UPPERCASE OUTPUT
"	MODIFIED BY T. CASEY, MARCH 1974 TO:
"		IGNORE ANY GARBAGE IN RECORD AFTER 77n
"		MAKE UPPER OR LOWER CASE TRANSLATION AN OPTION
"		ACCEPT ASCII RECORDS
"	MODIFIED BY D. KAYDEN JANUARY 1975 TO USE EIS
"	MODIFIED BY R.H. MORRISON 5/19/76
"		CHANGED uc_table AND lc_table TO CONFORM TO REAL GCOS
"	Modified by M. R. Jordan, September 1976 to process all printer escapes
"	MODIFIED BY:	Dave Ward		March 1978	TO:
"					Process overprint correctly, i.e., "!0"
"					BCD control sequence implies carriage-return.
"
"
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


	name	gcos_sys_xlate_
	entry	gcos_sys_xlate_
	entry	gcos_sys_xlate_lc_

gcos_sys_xlate_lc_:
	save
	eppbb	lc_table		point to lower case table
	tra	get_args



gcos_sys_xlate_:
	save
	eppbb	uc_table		point to upper case table

get_args:
	spriap	sp|0		save ap for return arg access
	eppbp	ap|2,*
	eppbp	bp|0,*		bp->input buffer
	eppap	ap|4,*
	eppap	ap|0,*		ap->output buffer

	eax6	0		set output buffer offset
	lxl1	bp|0		get block size
	eppbp	bp|1		point to first record
xlrcd:	cmpx1	bp|0		make sure rec len < curr block len
	tmoz	fini		it isn't..we're done
	sbx1	bp|0		decrement remaining block size
	sbx1	1,du		including rcw
	ldx5	bp|0		get record size
	tze	fini		yes..eof and end of block
"
"  Check for ASCII media code, and set switches appropriately
"
	lda	bp|0		get media code from rcw
	als	26		by getting rid of the 26 bits to its left
	arl	32		and the 6 bits to its right
	eppbp	bp|1		point to beginning of record data
	cmpa	=8,dl		tss type 8?
	tze	endrec		ignore this one
	cmpa	=o5,dl		ASCII or BCD?
	tpl	xlasc		if >= 5, its ASCII
	eaq	0,5		get record length in chars
	mpy	6,dl
	eax4	0,qu		save it in x4
	eax3	0		set char offset in record

lp:	stz	tally
	tct	(pr,x3,rl)	scan for a "!" or "?"
	desc6a	bp|0,x4
	arg	tctable
	arg	tally
	lxl7	tally		number of chars passed over
	tze	lp1		none
	stx7	tally

	mvt	(pr,x3,rl),(pr,x6,rl) translate nonedit chars passed over
	desc6a	bp|0,x7
	desc9a	ap|0,x7
	arg	bb|0

	adx3	tally		increment input record offset
	adx6	tally		increment output buffer offset
	sbx4	tally		decrement remaining record length
	cmpx4	2,du		at least 2 chars left ?
	tmi	endrec		done with record

lp1:	mlr	(pr,x3),(pr),fill(00) extract next 3 chars
	desc6a	bp|0,3
	desc6a	temp,6

	lda	temp
	ana	=o770000,du	examine first char
	cmpa	=o770000,du	is it a "!"
	tnz	ignore		no - must be a "?"
	lda	temp		examine second character
	ana	=o7700,du
	cmpa	=o7700,du		is it another "!"
	tnz	space		no - form spacing request
	cmpx4	3,du		were there 3 chars left
	tmi	endrec		no - done with record
	mvt	(pr),(pr,x6)	translate third char
	desc6a	temp(2),1
	desc9a	ap|0,1
	arg	bb|0
	adx6	1,du		increment output buffer offset
	adx3	3,du		increment input record offset
	sbx4	3,du		decrement remaining record length
	tpnz	lp		scan rest of record
	tra	endrec		done with record

ignore:	adx3	1,du		increment input record offset
	sbx4	1,du		decrement remaining record length
	tpnz	lp		scan rest of record
	tra	endrec		done with record
"
"
"	Come here when other than an ignore or escaped print is to be performed.
"
"
space:	arl	6+4		split the key and value
	tra	*+1,au		do the right thing
	tra	feed_countdown	00xxxx => feed by countdown
	tra	feed_vfu		01xxxx => feed to xxxx on VFU loop
	tra	insert_spaces	10xxxx => insert 8*xxxx spaces

	null			11xxxx => if not 77(8) then no action
no_action:
	adx3	2,du		increment input record offset
	sbx4	2,du		decrement remaining record length
	tpnz	lp		scan rest of record
	tra	endrec		done with record

insert_spaces:
	als	4+3		get 8*xxxx in au
	ana	=o170,du
	mlr	(),(pr,x6,rl),fill(040)
	desc9a	*,0
	desc9a	ap|0,au
	sta	temp		save the number of spaces inserted
	adx6	temp		update the output offset
	adx3	2,du		increment the input record offset
	sbx4	2,du		decrement the remaining record length
	tpnz	lp		scan rest of record
	tra	endrec		done with record

feed_vfu:
	mlr	(),(pr,x6),fill(014)
	desc9a	*,0
	desc9a	ap|0,1
	adx6	1,du
	tra	endrec

feed_countdown:
	tnz	feeds
"	Provide for !0 => overprint.
"	Output 1 carriage return.
	lda	1,du
	mrl	(),(pr,x6,rl),fill(015)
	desc9a	*,0
	desc9a	ap|0,au
	tra	fin_feeds

"	Provide newlines.
"	Number of newlines in a-reg bits 18-21.
feeds:	als	4		get the number of lines
	ana	=o17,du
	mlr	(),(pr,x6,rl),fill(012)
	desc9a	*,0
	desc9a	ap|0,au  		add right number of newlines
fin_feeds:
	sta	temp
	adx6	temp		increment output buffer offset

endrec:	eppbp	bp|0,5		move pointer to next record
	cmpx1	0,du		end of block yet ?
	tnz	xlrcd		no

fini:	eppap	sp|0,*		restore ap
	stz	ap|6,*		return no of chars
	sxl6	ap|6,*
	return

xlasc:	eaq	0,5		get record length in chars
	qls	2
	mlr	(pr,rl),(pr,x6,rl)
	desc9a	bp|0,qu
	desc9a	ap|0,qu

	stq	temp
	adx6	temp		increment output buffer offset
	cmpa	6,dl		is this media code 6
	tnz	endrec		no
	mlr	(),(pr,x6),fill(012)  add a newline
	desc9a	*,0
	desc9a	ap|0,1
	adx6	1,du		increment output buffer offset
	tra	endrec

"
"
"	Translation tables...BCD to ASCII
"
"
uc_table:	aci	x0123456789[#@:>?x
	aci	x ABCDEFGHI&.](<\x
	aci	x^JKLMNOPQR-$*);'x
	aci	x+/STUVWXYZ_,%="!x

lc_table:	aci	X0123456789[#@:>?X
	aci	X abcdefghi&.](<\X
	aci	X^jklmnopqr-$*);'X
	aci	X+/stuvwxyz_,%="!X

tctable:	dec	0,0,0,1
	dec	0,0,0,0
	dec	0,0,0,0
	dec	0,0,0,1
	temp	temp,tally
	end
