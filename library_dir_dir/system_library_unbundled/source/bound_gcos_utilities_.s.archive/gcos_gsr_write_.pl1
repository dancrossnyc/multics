/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/*
   This procedure will write one record in gecos standard format.
   It will write blocks to the stream "attname", it will copy the record
   into a block from the place pointed to by buffp, it will copy the
   number of words specified by reclen, it will use the supplied report
   code, and if eofsw is on, it will force the current block to be
   written out even if not full ( and will not allow anymore write
   calls until reinitialized).

   WRITTEN BY DICK SNYDER     1971
   MODIFIED BY P.M. HABER SEPTEMBER 1973
   MODIFIED BY T. CASEY APRIL 1974

   */


gcos_gsr_write_: proc (attname, buffp, reclen, report_code, eofsw, fx_code);
dcl  attname char (*);
dcl  eofsw bit (1);
dcl  report_code bit (12);
dcl  buffp pointer;
dcl  reclen fixed bin;
dcl  fx_code fixed bin (35);

dcl 1 word based aligned,
    2 upper bit (18) unaligned,
    2 lower bit (18) unaligned;
dcl  ios_$write ext entry (char (*), ptr, fixed bin, fixed bin, fixed bin, bit (72) aligned);
dcl (error_table_$file_not_opened, error_table_$file_already_opened) ext fixed bin (35);
dcl  thing char (20) varying;
dcl  forcesw bit (1) init ("0"b);
dcl (first, last) pointer int static init (null);
dcl 1 c_block based (cp),				/* control block for a file being written */
    2 name char (32),				/* file name */
    2 mybuf char (1280),				/* write buffer */
    2 rcrdp pointer,
    2 serial_no fixed bin,
    2 blklen fixed bin,
    2 forward pointer,
    2 backward pointer;

dcl  cp pointer int static init (null);
dcl  st bit (72) aligned;
dcl  code fixed bin (35) based (addr (st));
dcl  stringlen fixed bin;
dcl  basedstring bit (stringlen) based;
dcl  mybufp pointer;
dcl  j fixed bin;
dcl (addr, addrel, baseno, null, unspec, substr) builtin;

dcl  closing bit (1) aligned init ("0"b);

dcl  get_system_free_area_ ext entry returns (ptr);
dcl  system_free_ptr ptr int static init (null);
dcl  system_free_area area based (system_free_ptr);


COMMON:						/* come here from gsr_write_close entry */
	fx_code = 0;				/* initialize return argument */

	if first = null then go to error;		/* attempt to write without initing */

	cp = first;				/* get pointer to first control block */
srch_loop:
	if attname = c_block.name then go to hit;
	cp = c_block.forward;
	if cp ^= null then go to srch_loop;		/* continue to look */
error:	
	fx_code = error_table_$file_not_opened;
	return;


hit:	
	if closing then goto free_buffer;		/* if entered at gsr_write_close entry */

	mybufp = addr (c_block.mybuf);
	if blklen = -1 then do;			/* new block */

newblk:	     mybufp -> word.upper = substr (unspec (serial_no), 19, 18); /* put serial no in block */
	     serial_no = serial_no+1;			/* update serial no */
	     blklen = 0;
	     rcrdp = addrel (mybufp, 1);		/* point to first record header */
	end;

	if blklen + reclen > 318 then do;		/* new record won't fit in current block */
force:	     mybufp -> word.lower = substr (unspec (blklen), 19, 18); /* put block len in block */
	     blklen = -1;
	     call ios_$write (attname, mybufp, 0, 320, j, st); /* write block */
	     if code ^= 0 then do;
		fx_code = code;			/* return error code */
		return;
	     end;

	     if forcesw then do;			/* all done if eof being written */
free_buffer:	

		if c_block.backward = null then do;	/* first block in chain */

		     first = c_block.forward;		/* set first to point to next block */
		     if first ^= null then		/* don't reference thru null ptr if only 1 block */
		     first -> c_block.backward = null;	/* set back point in next block to null */
						/* (it is new first block ) */
		end;
		else if c_block.forward = null then do;	/* last block in chain */

		     last = c_block.backward;		/* set up new last pointer */
		     last -> c_block.forward = null;	/* previous block is new last block */
		end;

		else do;				/* we have block in middle of chain */

		     c_block.backward -> c_block.forward = c_block.forward; /* thread this block out of list */
		     c_block.forward -> c_block.backward = c_block.backward;
		end;

		free cp -> c_block in (system_free_area); /* deallocate block */
		return;
	     end;

	     go to newblk;
	end;

	if reclen ^= 0 then do;
	     rcrdp -> word.upper = substr (unspec (reclen), 19, 18); /* put record len in rcrd header */
	     rcrdp -> word.lower = "0"b;		/* put report and */
	     substr (rcrdp -> word.lower, 7, 12) = report_code; /* media codes in rcrd header */
	     rcrdp = addrel (rcrdp, 1);		/* now point to data area */
	     stringlen = 36*reclen;			/* get length of rcrd in bits */
	     rcrdp -> basedstring = buffp -> basedstring;	/* copy record into buffer */
	     rcrdp = addrel (rcrdp, reclen);		/* point to next record header */
	     blklen = blklen+reclen+1;		/* update block length */
	end;

	forcesw = eofsw;				/* supposed to write eof? */
	if forcesw then go to force;			/* yes */

	return;



/* 	Must enter here before writing to init control block */


gsr_write_init: entry (attname, fx_code);

	fx_code = 0;				/* initialize returned code */
	if first = null then go to create;		/* no blocks yet */
	cp = first;				/* see if guy is attmepting to init same file twice */
cr_loop:	
	if attname = c_block.name then do;
	     fx_code = error_table_$file_already_opened;
	     return;
	end;

	if c_block.forward = null then go to create;
	cp = c_block.forward;			/* on to next one */
	go to cr_loop;

create:	
	if system_free_ptr = null then system_free_ptr = get_system_free_area_ ();
	allocate c_block in (system_free_area) set (last); /* allocate a control block for this file */
	if first = null then do;
	     cp, first = last;			/* this is first and only block */
	     c_block.backward = null;			/* no back block */
	end;
	else do;
	     c_block.forward = last;			/* fill in forward pointer in last block */
	     last -> c_block.backward = cp;		/* fill in backward pointer in this block */
	     cp = last;				/* point now to new block */
	end;

	c_block.forward = null;			/* no next block */
	c_block.blklen = -1;
	c_block.serial_no = 1;
	c_block.name = attname;
	return;


gsr_write_close: entry (attname, fx_code);

	closing = "1"b;				/* remember we are just going to free a buffer */
	goto COMMON;				/* go look for it */

     end gcos_gsr_write_;
