/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


decode_nstd_status_: proc (status, return_string);


/* This procedure will decode the status returned by nstd_ and will return
   a short description of the status in a varying character string. It is called
   with two arguments. The first is the 72 bit status. The second is a 50 (or
   longer) character varying string in which the status interpretation message
   will be returned.

   WRITTEN BY DICK SNYDER .... 1971
   MODIFIED BY T. CASEY AUGUST 1974, NOVEMBER 1974

*/


dcl  status bit (72) aligned;
dcl  phyem char (100) varying;
dcl  return_string char (*) varying;

dcl 1 stat_word aligned based (addr (status)),
    2 fill bit (26) unaligned,
    2 major bit (4) unaligned,
    2 minor bit (6) unaligned;

dcl 1 minor_bits aligned based (addr (status)),
    2 fill2 bit (30) unaligned,
    2 mb1 bit (1) unaligned,
    2 mb2 bit (1) unaligned,
    2 mb3 bit (1) unaligned,
    2 mb4 bit (1) unaligned,
    2 mb5 bit (1) unaligned,
    2 mb6 bit (1) unaligned;

dcl (addr, string, substr) builtin;

	if major = "0000"b then do;			/* Peripheral Subsystem Ready */
	     if minor = "000000"b then phyem = "tape ready";
	     else if minor = "001100"b then phyem = "ASCII alert";
	     else if mb6 &^mb3 then phyem = "write protected";
	     else if mb5 &substr (minor, 1, 3) = "000"b then phyem = "positioned at BOT";
	     else if mb4 then phyem = "9 track handler";
	     else if ^mb5 then do;
		if substr (minor, 1, 3) = "010"b then phyem = "two bit fill";
		else if substr (minor, 1, 3) = "100"b then phyem = "four bit fill";
		else if substr (minor, 1, 3) = "110"b then phyem = "six bit fill";
		else goto unknown_ready;
	     end;
	     else
unknown_ready: phyem = "peripheral subsystem ready - unknown substatus";
	end;

	else if major = "0001"b then do;		/* Device Busy */
	     if minor = "000001"b then phyem = "in rewind";
	     else if minor = "100000"b then phyem = "device reserved";
	     else if minor = "000010"b then phyem = "alternate channel in control";
	     else if minor = "000100"b then phyem = "device loading";
	     else phyem = "device busy - unknown substatus";
	end;

	else if major = "0010"b then do;		/* Device Attention */
	     if mb1 then goto unknown_attention;
	     else if ^mb2 & substr (minor, 5, 2) = "01"b then phyem = "write protected";
	     else if mb2 & substr (minor, 5, 2) = "00"b then phyem = "blank tape on write";
	     else if substr (minor, 4, 2) = "10"b then phyem = "handler in standby";
	     else if mb3 &^mb5 then phyem = "handler check";
	     else
unknown_attention: phyem = "device attention - unknown substatus";
	end;

	else if major = "0011"b then do;		/* Device Data Alert */
	     if minor = "000001"b then phyem = "transfer timing alert";
	     else if minor = "000010"b then phyem = "blank tape on read";
	     else if substr (minor, 5, 2) = "11"b then phyem = "bit detected during erase";
	     else if mb4 then phyem = "transmission parity alert";
	     else if mb3 then phyem = "lateral tape parity alert";
	     else if mb2 then phyem = "longitudinal tape parity alert";
	     else if mb1 then phyem = "end-of-tape mark";
	     else phyem = "device data alert - unknown substatus";
	end;

	else if major = "0100"b then do;		/* End of File */
	     if minor = "001111"b then phyem = "eof 7 track";
	     else if minor = "010011"b then phyem = "eof 9 track";
	     else if minor = "111111"b then phyem = "data alert";
	     else phyem = "single character record";
	end;

	else if major = "0101"b then do;		/* Command Reject */
	     if minor = "000000"b then phyem = "invalid set density";
	     else if minor = "001000"b then phyem = "backspace while at at BOT";
	     else if minor = "010000"b then phyem = "forward read after write";
	     else if minor = "100000"b then phyem = "9 track command to 7 track handler";
	     else if substr (minor, 1, 3) = "000"b then do;
		if mb6 then phyem = "invalid operation code";
		else if mb5 then phyem = "invalid device code";
		else if mb4 then phyem = "invalid IDCW parity";
		else goto unknown_reject;
	     end;
	     else
unknown_reject: phyem = "command reject - unknown substatus";
	end;

	else if major = "0111"b then phyem = "program load termination"; /* MTS 400s only */

	else if major = "1000"b then phyem = "peripheral subsystem busy"; /* MTS 400s only */

	else if major = "1010"b then do;		/* MPC Device Attention */
	     if minor = "000001"b then phyem = "configuration switch error";
	     else if minor = "000010"b then phyem = "multiple devices with same id";
	     else if minor = "000011"b then phyem = "illegal device id number";
	     else if minor = "001000"b then phyem = "incompatible  PE and NRZI modes";
	     else if minor = "010000"b then phyem = "handler malfunction";
	     else if minor = "010001"b then phyem = "multiple BOT markers";
	     else if substr (minor, 1, 4) = "0011"b then phyem = "TCA malfunction";
	     else phyem = "MPC device attention - unknown substatus";
	end;

	else if major = "1011"b then do;		/* MPC Device Data Alert */
	     if minor = "000001"b then phyem = "transmission parity alert";
	     else if minor = "000010"b then phyem = "inconsistent command";
	     else if minor = "000011"b then phyem = "sum check (sic) error";
	     else if minor = "000100"b then phyem = "byte locked out";
	     else if minor = "001000"b then phyem = "PE-burst write error";
	     else if minor = "001001"b then phyem = "preamble error";
	     else if minor = "100000"b then phyem = "marginal condition";
	     else if minor = "010000"b then phyem = "multi-track error";
	     else if minor = "010001"b then phyem = "skew error";
	     else if minor = "010010"b then phyem = "postamble error";
	     else if minor = "010011"b then phyem = "NRZI correctable error";
	     else if minor = "010100"b then phyem = "code alert";
	     else phyem = "MPC device data alert - unknown substatus";
	end;

	else if major = "1101"b then do;		/* MPC command reject */
	     if minor = "000001"b then phyem = "illegal procedure";
	     else if minor = "000010"b then phyem = "illegal logical channel number";
	     else if minor = "000011"b then phyem = "illegal suspended logical channel number";
	     else if minor = "000100"b then phyem = "IDCW continue bit not set";
	     else phyem = "MPC command reject - unknown substatus";
	end;

	else phyem = "unknown major status";

	return_string = phyem;			/* one assignment to the char (*) return string, to avoid/
						   length-checking code for all the above assignments */
	return;

     end decode_nstd_status_;
