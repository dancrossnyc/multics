/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


gcos_create_file: gcf: proc ();


/* ***************************************************************
   ***************************************************************
   *
   *
   *		G C O S   C R E A T E   F I L E
   *
   *   This command is used to create a Multics segment or
   *   multisegment file to be used as a GCOS file with the GCOS
   *   Environment Simulator. The GCOS attributes of the file are
   *   recognized by this command and are passed to the support
   *   subroutine which actually creates the file.
   *   The command syntax is:
   *
   *	gcos_create_file <filename> {<-control_arg>}
   *
   *   where -control_arg is one of the following:
   *
   *	-llinks <n>		file size in llinks
   *	-links <n>		file size in links
   *
   *
   *	Written by M. R. Jordan, 12/10/77
   *
   *
   ***************************************************************
   *************************************************************** */

dcl  ME char (16) static internal options (constant) init ("gcos_create_file"); /*  my name  */
dcl  addr builtin;
dcl  arg char (arg_len) based (arg_ptr);		/*  string to access current arg  */
dcl  arg_len fixed bin;				/*  len of current arg  */
dcl  arg_ptr ptr;					/*  loc of current arg  */
dcl  code fixed bin (35);				/*  status code used in calls  */
dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  dname char (168);				/*  directory name of target  */
dcl  ename char (32);				/*  entry name of target  */
dcl  error_table_$bad_conversion fixed bin (35) ext;
dcl  error_table_$badopt fixed bin (35) ext;
dcl  error_table_$noarg fixed bin (35) ext;
dcl  error_table_$wrong_no_of_args fixed bin (35) ext;
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  gcos_create_file_ entry (char (*), char (*), ptr, fixed bin (35));
dcl  multiplier fixed bin (18);			/*  multiplier to get file size in words  */
dcl  nargs fixed bin;				/*  number of args supplied by user  */

%include gcos_file_info;


dcl 1 my_gcos_file_info like gcos_file_info;

/*

   Get the number of arguments passed to the command.

*/


	call cu_$arg_count (nargs);
	if nargs < 1 then do;
	     call com_err_ (error_table_$noarg, ME, "^/Usage is:  gcos_create_file filename {-links N|-llinks N}");
	     return;
	end;


/*

   Now get the file name argument.

*/


	call cu_$arg_ptr (1, arg_ptr, arg_len, code);
	if code ^= 0 then do;
	     call com_err_ (code, ME, "Error referencing argument 1.");
	     return;
	end;

	call expand_pathname_ (arg, dname, ename, code);
	if code ^= 0 then do;
	     call com_err_ (code, ME, "^a", arg);
	     return;
	end;


/*

   Initialize the file info structure with default values.

*/


	my_gcos_file_info.version = 1;
	my_gcos_file_info.size_in_llinks = 1;
	my_gcos_file_info.max_size_in_llinks = 0;
	my_gcos_file_info.flags.random = "0"b;
	my_gcos_file_info.flags.pad = (35)"0"b;
	my_gcos_file_info.flags.original_file_has_been_written = "0"b;
	my_gcos_file_info.flags.user_specified_attributes = (35)"0"b;
	my_gcos_file_info.ids_attributes.first_page_in_subfile = 0;
	my_gcos_file_info.ids_attributes.last_page_in_subfile = 0;
	my_gcos_file_info.ids_attributes.multiuser = "0"b;
	my_gcos_file_info.ids_attributes.reserveed_1 = (17)"0"b;
	my_gcos_file_info.ids_attributes.words_per_page = 0;
	my_gcos_file_info.ids_attributes.reserved_2 = (18)"0"b;
	my_gcos_file_info.ids_attributes.lines_per_page = 0;
	my_gcos_file_info.ids_attributes.reserved_3 = (18)"0"b;
	my_gcos_file_info.ids_attributes.page_fill_percent = "202020"b3;
	my_gcos_file_info.ids_attributes.reserved_4 = (6)"0"b;
	my_gcos_file_info.ids_attributes.area_number = 0;
	my_gcos_file_info.ids_attributes.reserved_5 = (6)"0"b;
	my_gcos_file_info.ids_attributes.num_pages_in_area = 0;
	my_gcos_file_info.ids_attributes.minus_one = -1;
	my_gcos_file_info.ids_attributes.reserved_6 (*) = (36)"0"b;


/*

   Now process all control arguments.

*/


	if nargs> 1 then do;

	     call cu_$arg_ptr (2, arg_ptr, arg_len, code);
	     if code ^= 0 then do;
		call com_err_ (code, ME, "Error referencing argument 2.");
		return;
	     end;

	     if arg = "-links" then multiplier = 12;
	     else if arg = "-llinks" then multiplier = 1;
	     else do;
		call com_err_ (error_table_$badopt, ME, "^a", arg);
		return;
	     end;

	     if nargs > 2 then do;

		call cu_$arg_ptr (3, arg_ptr, arg_len, code);
		if code ^= 0 then do;
		     call com_err_ (code, ME, "Error referencing argument 3.");
		     return;
		end;

		my_gcos_file_info.size_in_llinks = cv_dec_check_ (arg, code)*multiplier;
		if code ^= 0 then do;
		     call com_err_ (error_table_$bad_conversion, ME, "Error converting ""^a"" to decimal integer.", arg);
		     return;
		end;

		if nargs > 3 then do;
		     call com_err_ (error_table_$wrong_no_of_args, ME, "Too many arguments supplied.");
		     return;
		end;

	     end;
	     else do;
		call com_err_ (error_table_$noarg, ME, "Decimal file size missing.");
		return;
	     end;

	end;

/*

   Now that we have all of the pertinent information, create the file.

*/


	call gcos_create_file_ (dname, ename, addr (my_gcos_file_info), code);
	if code ^= 0 then do;
	     call com_err_ (code, ME, "^a^[>^]^a", dname, (dname ^= ">"), ename);
	end;


	return;


     end gcos_create_file;
