/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* This procedure will return one record from a gcos standard format
   320 word block.  It will read from the stream "attname" and return a
   pointer to the record just read in buffp, the length of the read
   data will be in reclen, the record header (media and report codes)
   will be in rcrdhdr, and eofsw will be set if this record is the last
   in the last block

   WRITTEN BY DICK SNYDER      1971
   MODIFIED BY P.M. HABER SEPTEMBER 1973
   MODIFIED BY T. CASEY APRIL 1974, AUGUST 1974, NOVEMBER 1974

   */


gcos_gsr_read_: proc (attname, buffp, reclen, rcrdhdr, eofsw, fx_code);

dcl  attname char (*);
dcl  eofsw bit (1);
dcl  buffp ptr;
dcl  reclen fixed bin;
dcl  rcrdhdr bit (12);
dcl  fx_code fixed bin (35);

dcl 1 word based aligned,
    2 upper bit (18) unaligned,
    2 lower bit (18) unaligned;

dcl  ios_$read ext entry
    (char (*), ptr, fixed bin, fixed bin, fixed bin, bit (72) aligned);

dcl (error_table_$bad_file, error_table_$file_already_opened, error_table_$file_not_opened) ext fixed bin (35);
dcl  forcesw bit (1) init ("0"b);
dcl (first, last) ptr int static init (null);

dcl 1 c_block based (cp),				/* control block for a file being read */
    2 name char (32),				/* file name */
    2 mybuf char (1280),				/* read buffer */
    2 rcrdp ptr,
    2 myeofsw bit (1),
    2 readsw bit (1),
    2 blklen fixed bin,
    2 forward ptr,
    2 backward ptr;

dcl  cp ptr init (null) int static;
dcl  st bit (72) aligned;
dcl  code fixed bin (35) based (addr (st));
dcl  stringlen fixed bin;
dcl  mybufp ptr;
dcl  j fixed bin;
dcl (addr, addrel, baseno, fixed, null, substr) builtin;

dcl  closing bit (1) aligned init ("0"b);

dcl  get_system_free_area_ ext entry returns (ptr);
dcl  system_free_ptr ptr int static init (null);
dcl  system_free_area area based (system_free_ptr);

/*  */

COMMON:						/* come here from gsr_read_close entry point */
	fx_code = 0;				/* initialize return code */
	if first = null then go to error;		/* attempt to read without initing */

	cp = first;				/* get ptr to first control block */
srch_loop:
	if attname = c_block.name then go to hit;
	cp = c_block.forward;
	if cp ^= null then go to srch_loop;		/* continue to look */
error:
	fx_code = error_table_$file_not_opened;
	return;

hit:
	if closing then goto nodata;			/* if entered at gsr_read_close entry point */

	mybufp = addr (c_block.mybuf);
	if readsw then do;
	     if myeofsw then do;			/* eof already encountered */
nodata:
		if c_block.backward = null then do;	/* first block in chain */
		     first = c_block.forward;		/* set first to point to next block */
		     if first ^= null then		/* don't reference thru null ptr if only 1 block */
			first -> c_block.backward = null; /* set back point in next block to null */
						/* (it is new first blk) */
		end;
		else if c_block.forward = null then do; /* last block in chain */
		     last = c_block.backward;		/* set up new last ptr */
		     last -> c_block.forward = null;	/* previous block is new last block */
		end;
		else do;				/* block is in middle of chain */
		     c_block.backward -> c_block.forward = c_block.forward; /* thread this block out of list */
		     c_block.forward -> c_block.backward = c_block.backward;
		end;

		free cp -> c_block in (system_free_area); /* deallocate block */

		if closing then return;		/* if entered at gsr_read_close entry point */

		eofsw = "1"b;
		reclen = 0;
		return;
	     end;

read:
	     call ios_$read (attname, mybufp, 0, 320, j, st);
	     if substr (st, 1, 3) = "100"b		/* hardware status returned */
		then do;
		if substr (st, 27, 4) = "0100"b	/* "tape mark" status */
		     then do;
		     myeofsw = "1"b;		/* return eof condition to caller */
		     substr (st, 1, 36) = "0"b;	/* and zero out returned error code */
		end;
		else goto io_error;			/* not "tape mark" status, error */
	     end;

	     else					/* not hardware status */
	     do;
		if code ^= 0 then do;		/* error occurred */
io_error:		     fx_code = code;		/* return error code */
		     return;
		end;
		myeofsw = substr (st, 1, 46);		/* take eof switch from normal location */
	     end;
	     readsw = "0"b;

	     if j = 0 then go to nodata;		/* nothing read */
	     rcrdp = addrel (mybufp, 1);		/* point to first record */
	     blklen = fixed (mybufp -> word.lower, 17);	/* reinit block len */
	     if blklen > 319 | blklen < 1 then do;	/* test for legal block length */
		buffp = mybufp;			/* return pointer to bad bcw, in case
						   caller wants to examine or display it */
		goto fmt_err;
	     end;
	end;

	if substr (rcrdp -> word.lower, 1, 6) = "001111"b then goto nodata; /* check for eof in rcw */

	reclen = fixed (rcrdp -> word.upper, 17);	/* get record len */
	if reclen >= blklen | reclen > 318 | reclen = 0 then do; /* check for legal record length */
	     buffp = rcrdp;				/* return pointer to bad rcw, in case
						   caller wants to examine or display it */
	     goto fmt_err;
	end;
	rcrdhdr = substr (rcrdp -> word.lower, 7, 12);	/* return report and media codes */
	blklen = blklen - reclen - 1;			/* decrement block len */
	if blklen = 0 then readsw = "1"b;		/* remember to read new block if end of block */
	eofsw = "0"b;
	buffp = addrel (rcrdp, 1);			/* point to data */
	rcrdp = addrel (rcrdp, reclen+1);		/* point to next record */
	return;


/* Come here if bcw or rcw had bad length field */

fmt_err:	fx_code = error_table_$bad_file;
	goto nodata;




/* 	Must enter here before reading to init control block */


gsr_read_init: entry (attname, fx_code);

	fx_code = 0;				/* initialize return code */
	if first = null then go to create;		/* no blocks yet */
	cp = first;				/* see if guy is attmepting to init same file twice */
cr_loop:
	if attname = c_block.name then do;
	     fx_code = error_table_$file_already_opened;
	     return;
	end;

	if c_block.forward = null then go to create;
	cp = c_block.forward;			/* on to next one */
	go to cr_loop;

create:
	if system_free_ptr = null then system_free_ptr = get_system_free_area_ ();
	allocate c_block in (system_free_area) set (last); /* allocate a control block for this file */
	if first = null then do;
	     cp, first = last;			/* this is first and only block */
	     c_block.backward = null;			/* no back block */
	end;
	else do;
	     c_block.forward = last;			/* fill in forward pointer in last block */
	     last -> c_block.backward = cp;		/* fill in backward pointer in this block */
	     cp = last;				/* point now to new block */
	end;

	c_block.forward = null;			/* no next block */
	c_block.readsw = "1"b;			/* cause read at next call */
	c_block.myeofsw = "0"b;			/* no eof */
	c_block.name = attname;
	return;


gsr_read_close: entry (attname, fx_code);

	closing = "1"b;
	goto COMMON;

     end gcos_gsr_read_;
