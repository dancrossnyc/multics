/****^  *************************************************************************
        *                                                                       *
        * Copyright (c) 1984 by Centre Interuniversitaire de Calcul de Grenoble *
        * and Institut National de Recherche en Informatique et Automatique     *
        *                                                                       *
        ************************************************************************* */


/****^  HISTORY COMMENTS:
  1) change(86-10-05,JMAthane), approve(86-10-05,MCR7521),
     audit(86-10-09,JPFauche), install(86-11-12,MR12.0-1212):
     Pascal version for MR12.
                                                   END HISTORY COMMENTS */

/* format: style4,^linecom,^ifthendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind1 */

pascal_ext_call_trap_proc_: proc (p1, p2, p3) options (support);

dcl (p1, p2, p3) ptr;

/* JMAthane - CICG - May 84 */

/* Multics */

dcl decode_descriptor_ entry (ptr, fixed bin, fixed bin, bit (1) aligned, fixed bin, fixed bin, fixed bin);
dcl error_table_$wrong_no_of_args fixed bin (35) ext;
dcl get_entry_arg_descs_$info entry (ptr, fixed bin, (*) ptr, ptr, fixed bin (35));
dcl hcs_$make_entry entry (ptr, char (*), char (*), entry, fixed bin (35));
dcl ioa_ entry options (variable);
dcl hcs_$fs_get_mode entry (ptr, fixed bin (5), fixed bin (35));
dcl error_table_$nodescr fixed bin (35) external;
dcl pascal_error_table_$bad_ext_call_info fixed bin (35) ext;


/* Automatic */

dcl mode fixed bin (5);
dcl i fixed bin;
dcl symb_base ptr;
dcl symbp ptr;
dcl conformant_dims fixed bin;
dcl packed_flag bit (1);
dcl star_bounds bit (1);
dcl caller_is_conformant bit (1);
dcl caller_n_dims fixed bin;
dcl basic_type fixed bin (35);
dcl basic_type_addr ptr;
dcl basic_size fixed bin (35);
dcl 1 my_entry_info like entry_desc_info;
dcl bmp ptr;
dcl it fixed bin;
dcl arg_symbol ptr;
dcl map_ptr ptr;
dcl (caller_arg_size, caller_arg_scale) fixed bin;
dcl (called_arg_size, called_arg_scale) fixed bin;
dcl caller_arg_ndims fixed bin;
dcl called_arg_ndims fixed bin;
dcl caller_arg_packed bit (1) aligned;
dcl called_arg_packed bit (1) aligned;
dcl caller_arg_type fixed bin;
dcl called_arg_type fixed bin;
dcl 1 caller,
     2 lp ptr init (p2 -> mc.prs (4)),
     2 vector_ptr ptr,
     2 def_ptr ptr,
     2 proc_type_symbol ptr,
     2 nargs fixed bin (35),				/* nbr of args declared in Pascal caller
						   + 1 if function */
     2 function bit (1),				/* true if function */
     2 entry_point ptr init (p2 -> mc.prs (6) -> stack_frame.entry_ptr), /* entry point of calling proc */
     2 symb_tree ptr,
     2 name char (32) varying;
dcl 1 called,
     2 seg char (32),
     2 entry char (32),
     2 entry_point ptr,
     2 lp ptr,
     2 lang char (8);
dcl this_entry entry variable;
dcl called_desc_vector (1000) ptr;
dcl (n_args, arg_no) fixed bin;
dcl 1 error_info like condition_info_header;
dcl (name, entry) char (32);
dcl pascal_descriptors bit (1);
dcl type_addr ptr;
dcl set_size fixed bin;
dcl name_length fixed bin;
dcl work ptr;
dcl desc_vector_ptr ptr;

dcl check bit (1) init (p2 -> mc.prs (6) -> pascal_stack_frame_flags.check);


/* Builtin */

dcl (null, size) builtin;
dcl any_other condition;


/* Based */

dcl based_name char (name_length) based;
dcl caller_desc_vector (1000) ptr based (caller.vector_ptr);
dcl 1 target_link like object_link based (p3);
dcl based_ptr ptr based;

/* Constants */

dcl STAR_SIZE fixed bin (35) int static options (constant) init (16777215);
dcl me char (26) int static options (constant) init ("pascal_ext_call_trap_proc_");



%page;
	trap_info_ptr = p1 -> based_ptr;

	caller.def_ptr = caller.lp -> linkage_header.def_ptr;
	type_ptr = addrel (caller.def_ptr, addrel (caller.def_ptr, target_link.expression_relp) -> exp_word.type_relp);
	called.seg = addrel (caller.def_ptr, type_ptr -> type_pair.segname_relp) -> acc.string;
	called.entry = addrel (caller.def_ptr, type_ptr -> type_pair.offsetname_relp) -> acc.string;


restart_0:
	if trap_info.version_number ^= 1 then do;
	     error_info.status_code = pascal_error_table_$bad_ext_call_info;
	     call error (restart_0,
		"This object segment is obsolete and must be recompiled with the latest version of the Pascal compiler.");
	end;

/* RESOLVE LINK */

restart_1:
	call hcs_$make_entry (ptr (caller.def_ptr, 0), called.seg, called.entry, this_entry, error_info.status_code);
	if error_info.status_code ^= 0 then call error (restart_1, target_name ());
	called.entry_point = addr (this_entry) -> based_ptr;


	my_entry_info.version = entry_desc_info_version_2;
	caller.vector_ptr = addrel (caller.lp, desc_vector_addr_relp);

/* GET DESCRIPTORS PROVIDED BY CALLER, AND STORE THEIR ADDRESSES */

	desc_vector_ptr = addrel (trap_info_ptr, trap_info.call_descs_relp);
	caller.nargs = desc_vector_ptr -> parm_desc_ptrs.n_args;
	do arg_no = 1 to caller.nargs;
	     caller_desc_vector (arg_no) = ptr (desc_vector_ptr, desc_vector_ptr -> parm_desc_ptrs.descriptor_relp (arg_no));
	end;

	if check then do;

/* GET CALLED ENTRY DESCRIPTORS */

	     call hcs_$fs_get_mode (called.entry_point, mode, error_info.status_code);
	     if error_info.status_code ^= 0 then
		call error (restart_1, "Cannot get access mode for " || target_name ());
	     if mode ^= 12 then /* no re mode */
		my_entry_info.variable = "1"b;
	     else do;
		call get_entry_arg_descs_$info
		     (called.entry_point, n_args, called_desc_vector, addr (my_entry_info), error_info.status_code);
		if error_info.status_code ^= 0 then
		     if error_info.status_code = error_table_$nodescr then do;
			error_info.status_code = 0;
			my_entry_info.variable = "1"b;
		     end;
		     else
			call error (restart_1, "Cannot get info about entry " || target_name () || ".");

	     end;
	     if my_entry_info.variable then n_args = -1;
	     else if caller.nargs < n_args then
		call error (restart_1, target_name () || " is expecting for " || ltrim (char (n_args)) || " parameters and only " || ltrim (char (caller.nargs)) || " are provided.");

/* LOOP ON ARGUMENTS */

	     do arg_no = 1 to caller.nargs;
		if arg_no > n_args then do;
						/* Nothing. This argument will never be referenced by called procedure */
		end;
		else do;
		     call decode_descriptor_ (caller_desc_vector (arg_no), 0, caller_arg_type, caller_arg_packed, caller_arg_ndims, caller_arg_size, caller_arg_scale);
		     call decode_descriptor_ (called_desc_vector (arg_no), 0, called_arg_type, called_arg_packed, called_arg_ndims, called_arg_size, called_arg_scale);
		     arg_descriptor_ptr = null;
		     if called_arg_ndims ^= 0 then do;
			star_bounds = "0"b;
			do it = 1 to called_arg_ndims;
			     if (called_desc_vector (arg_no) -> extended_arg_descriptor.low (it) = -34359738368)
				| (called_desc_vector (arg_no) -> extended_arg_descriptor.high (it) = -34359738368)
				| (called_desc_vector (arg_no) -> extended_arg_descriptor.multiplier (it) = -34359738368)
			     then star_bounds = "1"b;
			end;
			if star_bounds then
			     if called_arg_ndims ^= caller_arg_ndims then
				call error (restart_1,
				     "Descriptor for parameter " || ltrim (char (n_args)) || " passed to " || target_name () ||
				     " describes " || ltrim (char (caller_arg_ndims)) || " dimensions and " || ltrim (char (called_arg_ndims)) || " are expected.");
		     end;
		     if called_arg_size = STAR_SIZE then do;
			if called_arg_type = char_dtype then do; /* expecting char (*) descriptor */
			     if called_arg_type ^= caller_arg_type then
				call error (restart_1,
				     "Descriptor provided for parameter " || ltrim (char (n_args)) || " passed to "
				     || target_name () || " is not char (*) descriptor.");
			end;
			else if called_arg_type = bit_dtype then do; /* expecting bit (*) descriptor */
			     if called_arg_type ^= caller_arg_type then
				call error (restart_1,
				     "Descriptor provided for parameter " || ltrim (char (n_args)) || " passed to "
				     || target_name () || " is not bit (*) descriptor.");
			end;
		     end;
		end;
	     end;
	end;
						/* fill link only now, when everything is OK */
FIN:
	p3 -> based_ptr = called.entry_point;

	return;
cannot_build_desc:
	call error (restart_1, "Cannot build descriptor for arg " || ltrim (char (arg_no)) || " passed to " || target_name () || ".");



target_name: proc returns (char (68) var);

	return (rtrim (called.seg) || "$" || rtrim (called.entry));

     end target_name;

error: proc (restart_point, message) options (support);

dcl restart_point label;
dcl message char (*);
dcl signal_ entry options (variable);


	symbp = caller.lp -> linkage_header.symbol_ptr;
	symb_base = symbp;
	if symbp -> std_symbol_header.generator ^= "binder" then
	     caller.symb_tree = addrel (symbp, symbp -> area_pointer);
	else do;
	     map_ptr = addrel (symbp, symbp -> area_pointer);
	     i = 1;
	     do while (fixed (rel (caller.entry_point)) > (fixed (map_ptr -> text_start (i)) + fixed (map_ptr -> text_lng (i))));
		i = i + 1;
	     end;
	     symbp = addrel (symbp, map_ptr -> bindmap.symb_start (i));
	     caller.symb_tree = addrel (symb_base, symbp -> std_symbol_header.area_pointer);
	end;

	name_length = fixed (caller.symb_tree -> segname.size);
	caller.name = addrel (symb_base, caller.symb_tree -> segname.offset) -> based_name;

	error_info.length = size (error_info);
	error_info.version = 1;
	error_info.cant_restart = "0"b;
	error_info.default_restart = "0"b;
	error_info.quiet_restart = "0"b;
	error_info.support_signal = "1"b;
	error_info.pad = "0"b;
	error_info.info_string = "
Error while checking external call from " ||
	     caller.name || ".
" || message;
	call signal_ ("pascal_error", null, addr (error_info), null);

	go to restart_point;

     end error;
%page;
%page;
%include object_link_dcls;
%include definition_dcls;
%include acc;
%include arg_descriptor;
%include std_descriptor_types;
%include stack_header;
%include lot;
%include mc;
%include condition_info_header;
%include std_symbol_header;
%include bind_map;
%include pascal_symbol_node;
%include stack_frame;
%include pl1_symbol_block;
%include pascal_call_trap_info;
%include pascal_stack_frame;
%include entry_sequence_info;
     end pascal_ext_call_trap_proc_;
