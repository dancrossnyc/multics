/****^  *************************************************************************
        *                                                                       *
        * Copyright (c) 1980 by Centre Interuniversitaire de Calcul de Grenoble *
        * and Institut National de Recherche en Informatique et Automatique     *
        *                                                                       *
        ************************************************************************* */

/****^  HISTORY COMMENTS:
  1) change(86-10-05,JMAthane), approve(86-10-05,MCR7521),
     audit(86-10-09,JPFauche), install(86-11-12,MR12.0-1212):
     Pascal version for MR12.
                                                   END HISTORY COMMENTS */

pascal_errors_: proc (error_parameters);

/* pl/1 entries for pascal errors management */

/* Created J.M.Athane 04/04/80 */


/* parameter structure for the math error entry points */

	dcl     1 error_parameters	 aligned,
		2 real		 float bin (63),
		2 integer		 fixed bin (35),
		2 int_code	 fixed bin (35),
		2 inst_addr	 ptr;

/* external references to the MULTICS system */

	dcl     ioa_$rsnnl		 entry options (variable);
	dcl     signal_		 entry (char (*), ptr, ptr, ptr);

/* external references to other pascal entry points */

	dcl     pascal_error_table_$MAIN_too_much_args ext fixed bin (35);
	dcl     pascal_error_table_$MAIN_no_descriptors ext fixed bin (35);
	dcl     pascal_error_table_$MAIN_bad_arg_1 ext fixed bin (35);
	dcl     pascal_error_table_$MAIN_bad_arg_2 ext fixed bin (35);
	dcl     pascal_error_table_$MAIN_too_long ext fixed bin (35);
	dcl     pascal_error_table_$round_too_big ext fixed bin (35);
	dcl     pascal_error_table_$trunc_too_big ext fixed bin (35);

/* internal automatic */

	dcl     value		 fixed bin (35);
	dcl     string_length	 fixed bin (21);
	dcl     code		 fixed bin (35);
%include pascal_ops_statics;

/* based */

	dcl     1 register		 based,
		2 A		 fixed bin (35),
		2 B		 fixed bin (35);

	dcl     val72		 fixed bin (71) based;

/* builtins */

	dcl     (null, addr, character, ltrim) builtin;

%page;
recursivity_error: entry (error_parameters) options (support); /* For SimOne */

	pascal_operators_statics_$error_info.string = "
pascal_operators_: Maximum recursivity level exceeded. Processus stack overflow.";
	code = 0;

	go to fatal_error;

%page;
dead_lock_error: entry (error_parameters) options (support);/* for SimOne */

	pascal_operators_statics_$error_info.string = "
pascal_operators_: There is no more activable process.";
	code = 0;

	go to fatal_error;

%page;
function_value_error: entry (error_parameters) options (support);

	pascal_operators_statics_$error_info.string = "
pascal_operators_: Attempt to return from a function the return value of which has not been set.";
	code = 0;

	go to fatal_error;

%page;
STOP_error: entry (error_parameters);

	pascal_operators_statics_$error_info.string = "
pascal_operators_ : Error while STOP : MAIN procedure is not active.";

	code = 0;

	go to fatal_error;

%page;
ARGC_error: entry (error_parameters);

	pascal_operators_statics_$error_info.string = "
pascal_operators_ : Error while ARGC : ";
	code = 0;
	if int_code = 1 then
	     pascal_operators_statics_$error_info.string = pascal_operators_statics_$error_info.string || "MAIN procedure is not active.";
	if int_code = 2 then
	     pascal_operators_statics_$error_info.string = pascal_operators_statics_$error_info.string || "Arg list has no descriptors.";
	if int_code = 3 then
	     pascal_operators_statics_$error_info.string = pascal_operators_statics_$error_info.string || "Arg " || ltrim (character (integer)) || " is not a string.";
	if int_code = 4 then
	     pascal_operators_statics_$error_info.string = pascal_operators_statics_$error_info.string || "Last arg is neither a string nor an integer.";

	go to fatal_error;

%page;
ARGV_error: entry (error_parameters);

	call ioa_$rsnnl ("
pascal_operators_ : Error while ARGV (arg ^d) : ", pascal_operators_statics_$error_info.string, string_length, addr (real) -> B);
	code = 0;
	if int_code = 1 then
	     pascal_operators_statics_$error_info.string = pascal_operators_statics_$error_info.string || "This argument does not exist.";
	if int_code = 2 then
	     pascal_operators_statics_$error_info.string = pascal_operators_statics_$error_info.string || "Arg list has no descriptors.";
	if int_code = 3 then
	     pascal_operators_statics_$error_info.string = pascal_operators_statics_$error_info.string || "This arg is not a string.";
	if int_code = 4 then
	     pascal_operators_statics_$error_info.string = pascal_operators_statics_$error_info.string || "This arg is too long (" || ltrim (character (integer)) || " chars).";
	if int_code = 5 then
	     pascal_operators_statics_$error_info.string = pascal_operators_statics_$error_info.string || "Attempt to get arguments of a MAIN procedure which is not active.";

	go to fatal_error;

%page;
v6_MAIN_error: entry (error_parameters);

	call ioa_$rsnnl ("
pascal_operators_ : Error while MAIN_entry", pascal_operators_statics_$error_info.string, string_length);
	code = 0;
	if int_code = 1 then code = pascal_error_table_$MAIN_too_much_args;
	if int_code = 2 then code = pascal_error_table_$MAIN_no_descriptors;
	if int_code = 3 then code = pascal_error_table_$MAIN_bad_arg_1;
	if int_code = 4 then code = pascal_error_table_$MAIN_too_long;
	if int_code = 5 then code = pascal_error_table_$MAIN_bad_arg_2;

	go to fatal_error;

%page;
go_to_exit_error: entry (error_parameters);

	code = 0;
	call ioa_$rsnnl ("
pascal_operators_ : Error in external goto statement : Attempt to return in a procedure which is not active.",
	     pascal_operators_statics_$error_info.string, string_length);

	go to fatal_error;

%page;
ROUND_error: entry (error_parameters);

/* called by ROUND operator if error detected */

	call ioa_$rsnnl ("
pascal_operators_ : Error while ROUND(^10.3f)", pascal_operators_statics_$error_info.string, string_length, real);
	code = pascal_error_table_$round_too_big;
	go to fatal_error;

%page;
except_code_error: entry (error_parameters);

/* called by except_code operator */

	if int_code = 8 then do;
		call ioa_$rsnnl ("
internal checking : Error at ^p : zero divide or negative arg for MOD", pascal_operators_statics_$error_info.string, string_length, inst_addr);
	     end;

	else do;
		if integer = 1 then value = addr (real) -> register.A;
		else value = addr (real) -> register.B;
		if int_code = 1 then call ioa_$rsnnl ("
internal checking : Error at ^p : index out of bounds : ^d",
			pascal_operators_statics_$error_info.string, string_length, inst_addr, value);
		if int_code = 2 then call ioa_$rsnnl ("
internal checking : Error at ^p : argument for CHR is out of bounds : ^d",
			pascal_operators_statics_$error_info.string, string_length, inst_addr, value);
		if int_code = 3 then call ioa_$rsnnl ("
internal checking : Error at ^p : argument for PRED is out of bounds : ^d",
			pascal_operators_statics_$error_info.string, string_length, inst_addr, value);
		if int_code = 4 then call ioa_$rsnnl ("
internal checking : Error at ^p : argument for SUCC is out of bounds : ^d",
			pascal_operators_statics_$error_info.string, string_length, inst_addr, value);
		if int_code = 5 then call ioa_$rsnnl ("
internal checking : Error at ^p : assignment check in FOR beginning expression : ^d",
			pascal_operators_statics_$error_info.string, string_length, inst_addr, value);
		if int_code = 6 then call ioa_$rsnnl ("
internal checking : Error at ^p : assignment check in FOR ending expression : ^d",
			pascal_operators_statics_$error_info.string, string_length, inst_addr, value);
		if int_code = 7 then call ioa_$rsnnl ("
internal checking : Error at ^p : assignment check : ^d",
			pascal_operators_statics_$error_info.string, string_length, inst_addr, value);
		if int_code = 9 then call ioa_$rsnnl ("
internal checking : Error at ^p : parameter out of bounds : ^d",
			pascal_operators_statics_$error_info.string, string_length, inst_addr, value);
		if int_code = 10 then call ioa_$rsnnl ("
internal checking : Error at ^p : selector expression of a CASE is out of bounds : ^d",
			pascal_operators_statics_$error_info.string, string_length, inst_addr, value);
		if int_code = 11 then call ioa_$rsnnl ("
internal checking : Error at ^p : index out of bounds (PACK / UNPACK) : ^d",
			pascal_operators_statics_$error_info.string, string_length, inst_addr, value);
		if int_code = 12 then call ioa_$rsnnl ("
internal checking : Error at ^p : SET element out of bounds : ^d", pascal_operators_statics_$error_info.string, string_length, inst_addr, value);
		if int_code = 13 then call ioa_$rsnnl ("
internal checking : Error at ^p : Overflow in multiplication (result is ^d).",
			pascal_operators_statics_$error_info.string, string_length, inst_addr, addr (real) -> val72);
		if int_code = 14 then call ioa_$rsnnl ("
internal checking : Error at ^p : EOF or EOLN is undefined.",
			pascal_operators_statics_$error_info.string, string_length, inst_addr);
		if int_code = 15 then call ioa_$rsnnl ("
internal checking : Error at ^p : Bad bounds were given to RANDINT function.",
			pascal_operators_statics_$error_info.string, string_length, inst_addr);
		if int_code = 16 then call ioa_$rsnnl ("
internal checking : Error at ^p : Actual length of string is out of range (^d).",
			pascal_operators_statics_$error_info.string, string_length, inst_addr, value);
		if int_code = 17 then call ioa_$rsnnl ("
internal checking : Error at ^p in string assignment : String expression is longer than the target (^d).",
			pascal_operators_statics_$error_info.string, string_length, inst_addr, value);
		if int_code = 18 then call ioa_$rsnnl ("
internal checking : Error in substring function : Substring offset is negative or null.",
			pascal_operators_statics_$error_info.string, string_length, inst_addr);
		if int_code = 19 then call ioa_$rsnnl ("
internal checking : Error in substring function : Substring length is negative.",
			pascal_operators_statics_$error_info.string, string_length, inst_addr);
		if int_code = 20 then call ioa_$rsnnl ("
internal checking : Error in substring function : Substring is out of string bounds.",
			pascal_operators_statics_$error_info.string, string_length, inst_addr);
		if int_code = 21 then call ioa_$rsnnl ("
internal checking : Error in delete procedure : Substring offset is negative or null.",
			pascal_operators_statics_$error_info.string, string_length, inst_addr);
		if int_code = 22 then call ioa_$rsnnl ("
internal checking : Error in delete procedure : Substring length is negative.",
			pascal_operators_statics_$error_info.string, string_length, inst_addr);
		if int_code = 23 then call ioa_$rsnnl ("
internal checking : Error in delete procedure : Substring is out of string bounds.",
			pascal_operators_statics_$error_info.string, string_length, inst_addr);
		if int_code = 24 then call ioa_$rsnnl ("
internal checking : Error in insert procedure : Length of result string is greater than maximum length of target.",
			pascal_operators_statics_$error_info.string, string_length, inst_addr);
		if int_code = 25 then call ioa_$rsnnl ("
internal checking : Error at ^p : Given index (^d) is out current string length.",
			pascal_operators_statics_$error_info.string, string_length, inst_addr, value);
		if int_code = 26 then call ioa_$rsnnl ("
internal checking : Error at ^p : Parameter string (^d) passed to DATE or TIME is not at least 8 chars long.",
			pascal_operators_statics_$error_info.string, string_length, inst_addr, value);

	     end;
	code = 0;

	go to fatal_error;
%page;
TRUNC_error: entry (error_parameters);

/* called by TRUNC operator if error detected */

	call ioa_$rsnnl ("
pascal_operators_ : Error while TRUNC(^10.3f)", pascal_operators_statics_$error_info.string, string_length, real);
	code = pascal_error_table_$trunc_too_big;

	go to fatal_error;
%page;
parm_proc_error: entry options (support);


	call ioa_$rsnnl ("
pascal_operators_ : Error : Attempt to export an internal procedure by passing it as parameter to an external procedure.",
	     pascal_operators_statics_$error_info.string, string_length);
	code = 0;

	go to fatal_error;
%page;

fatal_error:

	pascal_operators_statics_$error_info.status_code = code;

	call signal_ ("pascal_error", null, addr (pascal_operators_statics_$error_info), null);

fatal_loop:
	call signal_ ("illegal_return", null, addr (pascal_operators_statics_$error_info), null);
	go to fatal_loop;



     end pascal_errors_;
