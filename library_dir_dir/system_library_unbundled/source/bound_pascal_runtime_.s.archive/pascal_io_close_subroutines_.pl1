/****^  *************************************************************************
        *                                                                       *
        * Copyright (c) 1980 by Centre Interuniversitaire de Calcul de Grenoble *
        * and Institut National de Recherche en Informatique et Automatique     *
        *                                                                       *
        ************************************************************************* */

/****^  HISTORY COMMENTS:
  1) change(86-10-09,JMAthane), approve(86-10-09,MCR7521),
     audit(86-10-09,JPFauche), install(86-11-12,MR12.0-1212):
     Pascal Version 8.03 for MR12.0.
                                                   END HISTORY COMMENTS */

pascal_io_close_subroutines_: proc;

/* Created JMAthane 03/21/84 */

/*
entries :

pascal_io_$close_by_name : entry (char (*), fixed bin (35)) ;

pascal_io_$close_all : entry ;
*/

	dcl     pascal_operators_statics_$INPUT fixed bin ext;
	dcl     pascal_operators_statics_$OUTPUT fixed bin ext;
	dcl     pascal_operators_statics_$ERROR fixed bin ext;
	dcl     pascal_operators_statics_$ENTREE fixed bin ext;
	dcl     pascal_operators_statics_$SORTIE fixed bin ext;
	dcl     pascal_operators_statics_$ERREUR fixed bin ext;
	dcl     pascal_io_first_file_ptr_ ptr ext init (null);
	dcl     all_sw		 bit (1);
	dcl     (null, length)	 builtin;
	dcl     this_name		 char (32);
	dcl     head_ptr		 ptr;
	dcl     pascal_io_$close_subroutine entry (ptr);

close_by_name: entry (pascal_file_name, return_code);

	dcl     pascal_file_name	 char (*);
	dcl     return_code		 fixed bin (35);

	return_code = 1;
	if length (pascal_file_name) > 32 then return;
	this_name = pascal_file_name;
	all_sw = "0"b;
	go to close_sub_join;

close_all: entry;

	all_sw = "1"b;
	this_name = "";

close_sub_join:

	if ^all_sw & (
	     (this_name = "input") |
	     (this_name = "output") |
	     (this_name = "error") |
	     (this_name = "entree") |
	     (this_name = "sortie") |
	     (this_name = "erreur")) then return_code = 0;
	if all_sw | (this_name = "input") then
	     call pascal_io_$close_subroutine (addr (pascal_operators_statics_$INPUT));
	if all_sw | (this_name = "output") then
	     call pascal_io_$close_subroutine (addr (pascal_operators_statics_$OUTPUT));
	if all_sw | (this_name = "error") then
	     call pascal_io_$close_subroutine (addr (pascal_operators_statics_$ERROR));
	if all_sw | (this_name = "entree") then
	     call pascal_io_$close_subroutine (addr (pascal_operators_statics_$ENTREE));
	if all_sw | (this_name = "sortie") then
	     call pascal_io_$close_subroutine (addr (pascal_operators_statics_$SORTIE));
	if all_sw | (this_name = "erreur") then
	     call pascal_io_$close_subroutine (addr (pascal_operators_statics_$ERREUR));

	fsb_ptr = pascal_operators_statics_$first_file_ptr;

	do while (fsb_ptr ^= null);
	     if all_sw | (this_name = file_name) then do;
		     if ^all_sw then
			return_code = 0;
		     call pascal_io_$close_subroutine (fsb_ptr);
		     if array_of_file then do;
			     head_ptr = fsb_ptr;
			     do while (next_element ^= "0"b);
				fsb_ptr = ptr (fsb_ptr, next_element);
				call pascal_io_$close_subroutine (fsb_ptr);
			     end;
			     fsb_ptr = head_ptr;
			end;
		end;
	     fsb_ptr = next_fsb_ptr;
	end;

	return;

%include pascal_ops_statics;
%include pascal_fsb;
     end;

