/****^  *************************************************************************
        *                                                                       *
        * Copyright (c) 1980 by Centre Interuniversitaire de Calcul de Grenoble *
        * and Institut National de Recherche en Informatique et Automatique     *
        *                                                                       *
        ************************************************************************* */

/****^  HISTORY COMMENTS:
  1) change(86-10-05,JMAthane), approve(86-10-05,MCR7521),
     audit(86-10-09,JPFauche), install(86-11-12,MR12.0-1212):
     Pascal version for MR12.
                                                   END HISTORY COMMENTS */

pascal_display_file_value: proc;

display_file_value: entry (FSB_PTR_ADDR, WINDOW_PLACE, IO_SW);

	dcl     (FSB_PTR_ADDR,			/* (input) ptr to fsb ptr */
	        WINDOW_PLACE,			/* (output) addr of file window */
	        IO_SW) /* (input) io switch for output */
				 ptr parameter;

%include pascal_fsb;
%include iocbx;
%include linkdcl;

	dcl     unique_chars_	 entry (bit (*)) returns (char (15));
	dcl     ioa_$ioa_switch	 entry options (variable);
	dcl     ioa_$ioa_switcch_nnl	 entry options (variable);
	dcl     iox_$look_iocb	 entry (char (*), ptr, fixed bin (35));
	dcl     error_table_$no_iocb	 ext fixed bin (35);
	dcl     code		 fixed bin (35);
	dcl     my_uid		 bit (70);
	dcl     switch_name		 char (32);
	dcl     iocb_ptr		 ptr;
	dcl     (ptr1, ptr2)	 ptr;

	dcl     based_ptr		 ptr based;
	dcl     1 attach_description	 based,
		2 length		 fixed bin (17),
		2 string		 char (0 refer (attach_description.length));
	dcl     p5		 ptr based;

	dcl     null		 builtin;

	WINDOW_PLACE = null;
	if FSB_PTR_ADDR -> link.ft2 ^= "43"b3 then do;
no_fsb:
		call ioa_$ioa_switch (IO_SW, "(file status block is not initialized)");
		return;
	     end;
	else if FSB_PTR_ADDR -> p5 = null then go to no_fsb;
	else do;
		fsb_ptr = FSB_PTR_ADDR -> p5;
		switch_name = get_switch_name ();
		call iox_$look_iocb (switch_name, iocb_ptr, code);
		call ioa_$ioa_switch (IO_SW, "^-- Multics io switch :");
		if code = error_table_$no_iocb then call ioa_$ioa_switch (IO_SW, "^-   (no iocb)");
		else do;
			ptr1 = iocb_ptr -> iocb.attach_descrip_ptr;
			if ptr1 = null then do;
				call ioa_$ioa_switch (IO_SW, "^-   (not attached)^/^-   (not open)");
			     end;
			else do;
				call ioa_$ioa_switch (IO_SW, "^-   ^a", ptr1 -> attach_description.string);
				ptr2 = iocb_ptr -> open_descrip_ptr;
				if ptr2 = null then call ioa_$ioa_switch (IO_SW, "^-   (not open)");
				else call ioa_$ioa_switch (IO_SW, "^-   ^a", ptr2 -> attach_description.string);
			     end;
		     end;
		call ioa_$ioa_switch (IO_SW, "^-- Pascal file status :^/^-   ^[text file^s^;non text^-record of ^d bytes^]^-^[(not open)^;^[^[input^]^[output^]^s^;^[sequential input^]^[sequential output^]^[direct update^]^]^[ interactive^]^[^-eoln^]^[ eof^]^]",
		     file_is_text = 1, rec_length, file_is_open = "0"b, file_is_text = 1, file_status = 1, file_status = 2, file_status = 3, interactive_file = "1"b, eoln = 1, eof = 1);
		WINDOW_PLACE = addr (window);
	     end;

get_switch_name: proc returns (char (32));

	if permanent_file then do;
		if standard_file then do;
			if (file_name = "input") | (file_name = "entree") then return ("pascal_input_");
			else if (file_name = "output") | (file_name = "sortie") then return ("pascal_output_");
			else if (file_name = "error") | (file_name = "erreur") then return ("pascal_error_");
		     end;
		return (file_name);
	     end;
	else
	     return ("pascal_file_" || unique_chars_ ((uid)));

     end get_switch_name;
     end pascal_display_file_value;
