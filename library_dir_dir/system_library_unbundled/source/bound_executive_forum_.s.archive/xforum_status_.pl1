/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(85-01-25,Davids), approve(86-02-04,MCR7350),
     audit(86-04-24,Gilcrease), install(86-04-24,MR12.0-1048):
     Changed the truncation string from " ..." to "....".  This was
     done to make very appearent that numbers truncated in the middle
     are not shorter numbers.  Also changed the values of new_field_len
     from a constant 12 if the input value is not "" to its actual
     length + 2.  Did the same for total_field_len except the constant
     there was 20.  The +2 is to separate the new and total fields from
     the banner field.
     
     85-02-21 Davids: Added code in the update_current entry that
     checks the input str for a new_line character.  If one exists it
     uses only the characters to the left of it.  The "..." string is
     appended onto the truncated string to show that something is
     missing.  This was needed so that multi-line subjects could be at
     least partially displayed.  It was decided to truncate instead of
     translating the new line into some other character becuase it was
     felt that the new line represented a logical break point (why else
     have it).
  2) change(88-01-19,LJAdams), approve(88-02-09,MCR7838),
     audit(88-02-19,Blair), install(88-02-24,MR12.2-1027):	
     Changed all field lengths from 80 to 132 in order to accomodate 132
     character terminals.
                                                   END HISTORY COMMENTS */


xforum_status_:

/*
   BEGIN DESCRIPTION

   function:
      This module is used to manage the contents of the status window and the
      help line window. The status window is a 2 line line window above the
      menu window. The first line is named the title line while the second line
      is the data line. The help_line window is a 1 line window below user_io.
      In this module it is called the usage_line. These lines are images of the
      screen output.

   description of entry points:
      initialize: This entry sets the values of some internal static variables
      that are used by the rest of the entries.

      update_total: This entry is used to set the total field in the data_line.
      The new total is input as a string which contains the characters
      "total:". The internal proc UPDATE is used to position the new string on
      the data_line. It is positioned to start in column 1 and will be
      truncated if longer than 20 characters.

      update_new: This entry is used to set the new field in the data line.
      The new new is input as a string which contains the characters "new:".
      The internal proc UPDATE is used to position the new string on the
      data_line. If the new string can fit on the data_line in the space
      left by the total string then the RIGHT_JUSTIFY procedure is called to
      create a new string with enough padding on the left to result in a right
      justified new string. The UPDATE procedure is then called to place the 
      new string on the data line.

      update_banner: This entry is used to place a banner on the data_line.
      If the banner if shorter than the data_line a call to CENTER is made to
      create a new string with enough spaces on the left to cause the banner
      to be centered. A call is then made to UPDATE to position the banner on
      the data_line starting in column 1.

      update_current: This entry is used to place the current meeting index
      on the data line. The current data must fit in the space left over
      from 2 * the space used in the total field or the new field, which ever
      is bigger. This has the effect of centering the current data on the data
      line. A call to RAW_UPDATE is made to place spaces between the total and
      new fields - erasing what was there. Calls are then made to CENTER and
      UPDATE to center the current data within the space determined from the
      calcuation described abive, and place the data on the data line.

      update_title: This entry is used to place a title on the title line.
      A space is added to each end of the title and CENTER is called to center
      the title plus spaces on the line. The dash (-) character is used as a
      pad character instead of spaces. A call to UPDATE is then made to
      position title plus spaces plus dashes on the line. 

      redisplay: This entry is used to cause the text stored in the title, data
      and help lines to be output to the screen. The window_display_ entry is
      used. This entry matches the current text of the windows and changes only
      those characters that need to be changed. window_sync_ calls follow the
      window_display_ calls to force the display instead of waiting for a full
      buffer.

   description of internal procedures:
      CENTER: Given a string, and a length this internal procedure pads the
      input string on the left with enough spaces to cause the string to be
      centered in a string of the given length. This padded string is then
      returned. If the string is greater than the length, it is truncated to
      the input length.

      RIGHT_JUSTIFY: Given a string, and a length this internal procedure pads
      the input string on the left with enough spaces to cause the string to be
      right justified in a string of the given length. This padded string is
      then returned. If the string is greater than the length, it is truncated
      to the input length.

      UPDATE: This internal procedure inserts a given string into one of the
      "lines" (title, data). The string is constrained to start at a
      given column and be no more than a given length. If the string length
      is less than the given length the string is just inserted into the line
      via a call to RAW_UPDATE. If the string length is greater than the given
      length and greater than 4 than the first <input length - 4> characters of
      the string are inserted into the line. These characters are followed by
      " ...". If the string length is less than of equal to 4 but the input 
      length is even less then the first <input length> characters of the
      string are placed in the line.

      RAW_UPDATE: This internal procedure inserts the given string into another
      given string. The string is inserted starting at a given column.

   known bugs:

   notes:

   history
      84-01-?? Deryk Barker: Procedure for handling xforum's status window.
      Some ideas borrowed from xmail's equivalent.

      84-05-03 Davids: Modified so that the status message does not share the
      line with the number of new transactions and the total number of
      transaction. The new and total numbers now share the line with current
      transaction numbers.

      84-07-06 Davids: Added the update_title entry. This will be used to put
      the menu title, including meeting name, into the status line so it can be
      removed from the menu. This will allow the menu title to be displayed
      even if the process is performing local menu display.

      84-07-24 Davids: Created 3 separate variables to hold the data, title,
      and usage lines. This allowed easy spliting of the usage line (help line
      window) from the data and title (status window).

      84-07-25 Davids: Added the redisplay_usage entry so that the only the
      usage message can be redisplayed. This is needed for Multics mode.

      84-07-27 Davids: Added calls to window_$sync to the redisplay and
      redisplay_usage entry points.

      84-07-31 Davids: Removed call to CENTER from update_usage entry. This has
      the effect of left justifying the usage message. Added code in
      update_title to bracket title with spaces before the pad characters are
      added.

      84-08-02 Davids: Added the update_help_line, push_help_line, and
      pop_help_line entry points. This was done so that the help line could be
      updated from within emacs.

      84-09-28 Davids: Deleted the entries redisplay_usage, update_usage,
      update_help_line, push_help_line, and pop_help_line. Modified the
      redisplay entry so that it redisplays the help line by calling
      xforum_help_line$redisplay.

      84-10-03 Davids: Changed the new field length from 9 to 12 to accommodate
      the larger text string "Unseen:".

      84-11-06 Davids: Changed references to xforum_help_line to
      xforum_help_line_.

      84-11-13 Davids: Auditing changes: 1) Moved returns that occured inside
      the begin blocks of the update_new, banner, current, and title entries
      to outside the begin blocks. 2) Changed the initialization of the
      window_image arrau from string (window_image) = "" to just
      window_image = "". 3) Replaced the substr of SPACES to get a string of
      spaces to a reference to copy (in update_current). Other changes:
      Reorganized the declarations.
   END DESCRIPTION
*/

initialize:
     proc ();

/* PARAMETERS */

/* EXTERNAL STATIC */

/* ENTRIES */

	dcl     window_display_	 entry (ptr, (*) char (*), fixed bin (35));
	dcl     xforum_help_line_$redisplay entry options (variable);

/* CONDITIONS */

/* INTERNAL AUTOMATIC */

	dcl     used_cols		 fixed bin;
	dcl     window_image_ptr	 ptr init (addr (static_window_image));


/* INTERNAL STATIC */

	dcl     (
	        banner_field_len	 fixed bin,
	        current_field_len	 fixed bin,
	        data_line		 char (132) init (""),
	        new_field_len	 fixed bin,
	        status_window	 (2) char (132) init ("", ""),
	        static_window_image	 (2) char (132) unal init ("", ""),
	        title_field_len	 fixed bin,
	        title_line		 char (132) init (""),
	        total_field_len	 fixed bin,
	        window_image_width	 fixed bin init (79)
	        )			 internal static;

/* CONSTANTS */


dcl xs_NL char (1) init ("
") internal static options (constant);


/* BUILTINS */

	dcl     (
	        addr,
	        char,
	        copy,
	        divide,
	        index,
	        length,
	        ltrim,
	        max,
	        min,
	        mod,
	        rtrim,
	        substr
	        )			 builtin;

/* BASED */

	dcl     window_image	 (2) char (window_image_width) based (window_image_ptr);

/* INCLUDE FILES */

%include xforum_windows;
%page;
%include window_dcls;

	window_image_width =
	     min (length (static_window_image (1)), xforum_windows.status.width);
	window_image = "";

	total_field_len, new_field_len = 0;

	title_field_len = window_image_width;

	banner_field_len, current_field_len =
	     window_image_width - (total_field_len + new_field_len);

	return;

update_total:
     entry (str);

	dcl     str		 char (*);

	if str ^= ""
	then total_field_len = length (rtrim (str)) + 2; /* 2 space separator */

	call UPDATE (addr (data_line), 1, total_field_len, str);

	if str = ""
	then total_field_len = 0;

	return;

update_new:
     entry (str);

	if str ^= ""
	then new_field_len = length (rtrim (str)) + 2; /* 2 space separator */

	begin;

	     dcl	   field		      char (new_field_len);
	     dcl	   trimmed_value	      char (length (str)) var;
	     dcl	   trimmed_len	      fixed bin;
	     dcl	   starting_col	      fixed bin;

	     starting_col = window_image_width - new_field_len + 1;

	     trimmed_value = ltrim (rtrim (str));

	     trimmed_len = length (trimmed_value);

	     if trimmed_len < new_field_len then do;
		call RIGHT_JUSTIFY ((trimmed_value), field);
		call UPDATE (addr (data_line), starting_col, new_field_len, field);
	     end;
	     else call UPDATE (addr (data_line), starting_col, new_field_len, str);

	     if str = ""
	     then new_field_len = 0;

	end;					/* begin */

	return;

update_banner:
     entry (str);

	begin;

	     dcl	   field		      char (banner_field_len);
	     dcl	   trimmed_value	      char (length (str)) var;
	     dcl	   trimmed_len	      fixed bin;


	     trimmed_value = ltrim (rtrim (str));
	     trimmed_len = length (trimmed_value);

	     if trimmed_len < banner_field_len then do;
		call CENTER ((trimmed_value), field, " ");
		call UPDATE (addr (data_line), 1, banner_field_len, field);
	     end;
	     else call UPDATE (addr (data_line), 1, banner_field_len, str);

	end;					/* begin */

	return;

update_current: entry (str);

/* AUTOMATIC */

dcl uc_nl_index fixed bin;
	      



          used_cols = 2 * max (total_field_len, new_field_len);

	current_field_len = window_image_width - used_cols;

	begin;

	     dcl	   field		      char (current_field_len);
	     dcl	   trimmed_value	      char (length (str)) var;
	     dcl	   trimmed_len	      fixed bin;
	     dcl	   starting_col	      fixed bin;

	     starting_col = total_field_len + 1;

	     call RAW_UPDATE (addr (data_line), total_field_len + 1,
		window_image_width - total_field_len - new_field_len,
		copy (" ", window_image_width - total_field_len - new_field_len));

               uc_nl_index = index (str, xs_NL);
               if uc_nl_index = 0
	     then trimmed_value = ltrim (rtrim (str));
               else trimmed_value = ltrim (rtrim (substr (str, 1, uc_nl_index - 1))) || "...";
	     trimmed_len = length (trimmed_value);

	     if trimmed_len < current_field_len then do;
		call CENTER ((trimmed_value), field, " ");
		call UPDATE (addr (data_line), starting_col, current_field_len, field);
	     end;
	     else call UPDATE (addr (data_line), starting_col, current_field_len, str);

	end;					/* begin */

	return;

update_title: entry (str);

	begin;

	     dcl	   field		      char (title_field_len);
	     dcl	   trimed_value	      char (length (str)) var;
	     dcl	   trimed_value_len	      fixed bin;

	     trimed_value = ltrim (rtrim (str));
	     trimed_value_len = length (trimed_value);

	     call CENTER (" " || trimed_value || " ", field, "-");

	     call UPDATE (addr (title_line), 1, title_field_len, field);

	end;

	return;

redisplay:
     entry (P_code);

	dcl     P_code		 fixed bin (35);

	status_window (1) = title_line;
	status_window (2) = data_line;

	call window_display_ (xforum_windows.status.iocb, status_window,
	     P_code);
	call window_$sync (xforum_windows.status.iocb, P_code);

	call xforum_help_line_$redisplay;

	return;

CENTER:
     proc (P_str, P_field, P_pad);

	dcl     (P_str, P_field)	 char (*);
	dcl     P_pad		 char (1);
	dcl     (field_len, str_len, n_pad, l_pad, r_pad)
				 fixed bin;

	field_len = length (P_field);
	str_len = length (P_str);

	if str_len >= field_len then do;
	     P_field = P_str;
	     return;
	end;
	n_pad = field_len - str_len;
	l_pad = divide (n_pad, 2, 17, 0);
	r_pad = l_pad + mod (n_pad, 2);
	P_field = copy (P_pad, l_pad) || P_str || copy (P_pad, r_pad);

     end CENTER;

RIGHT_JUSTIFY:
     proc (P_str, P_field);

	dcl     (P_str, P_field)	 char (*);
	dcl     (field_len, str_len, n_pad)
				 fixed bin;

	field_len = length (P_field);
	str_len = length (P_str);

	if str_len >= field_len then do;
	     P_field = P_str;
	     return;
	end;

	n_pad = field_len - str_len;

	P_field = copy (" ", n_pad) || P_str;


     end RIGHT_JUSTIFY;

UPDATE:
     proc (line_ptr, col, len, new_value);

	dcl     line_ptr		 ptr;
	dcl     (col, len)		 fixed bin,
	        new_value		 char (*);
	dcl     short_new_value	 defined (new_value) char (len),
	        trunc_new_value	 defined (new_value)
				 char (len - length (TRUNCATION_STRING));
	dcl     TRUNCATION_STRING	 init ("....") char (4) static options (constant);

	if len >= length (new_value) then
	     call RAW_UPDATE (line_ptr, col, len, new_value);
	else if len <= length (TRUNCATION_STRING)
	     | len >= length (rtrim (new_value)) then
	     call RAW_UPDATE (line_ptr, col, len, short_new_value);
	else do;
	     call RAW_UPDATE (line_ptr, col, length (trunc_new_value),
		trunc_new_value);
	     call RAW_UPDATE (line_ptr, col + length (trunc_new_value),
		length (TRUNCATION_STRING), TRUNCATION_STRING);
	end;


     end UPDATE;

RAW_UPDATE:
     proc (ru_line_ptr, col, len, new_value);

	dcl     ru_line_ptr		 ptr;
	dcl     (col, len)		 fixed bin,
	        new_value		 char (*);
	dcl     ru_line		 char (132) based (ru_line_ptr);

	dcl     field_p		 ptr,
	        field_l		 fixed bin,
	        field		 char (field_l) based (field_p);


	field_p = addr (substr (ru_line, col));
	field_l = len;
	if char (new_value, len) ^= field then
	     field = new_value;

     end RAW_UPDATE;

     end xforum_status_;
