/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(85-01-30,Davids), approve(86-02-04,MCR7350),
     audit(86-04-24,Gilcrease), install(86-04-24,MR12.0-1048):
     Written.
     
     85-02-26 Davids: Added checks in the next entry so that the for
     the all, new, and allref cases the value of xgst_trans_no is only
     set if the code returned from forum_ is 0.  If the code returned
     is not 0 it is changed to forum_error_table_$invalid_trans_id.
     The other cases don't require the check and already translate
     non-zero error codes to invalid_trans_id.
     
     85-06-24 Davids: Updated comments to variable and parameter
     declarations and added some detail to the header comments.
  2) change(86-02-18,LJAdams), approve(86-02-18,MCR7350),
     audit(86-04-24,Gilcrease), install(86-04-24,MR12.0-1048):
     Added the lastref option.
                                                   END HISTORY COMMENTS */

xforum_get_selected_trans: proc;

/*
   BEGIN DESCRIPTION

   function:		       
      This module returns the set of selected transactions based on the
      xforum_meeting_info.flags. 

   description of entry points:
      xforum_get_selected_trans:
         input:
         output:
         It is an error to call the main entry point. The xforum_fatal_error 
         condition will be signaled with an "internal propgramming error" error
         message.

      first:
         input:   ptr                 pointer to the xforum_meeting_info
                                      structure which contains the current
                                      comment spec
         output:  ptr                 pointer to the forum_user_trans structure
                                      for the first comment that meets the
                                      current comment specification
                  fixed bin (35)      standard error code
         This entry is used to return the first selected transaction. The
         first transaction is the transaction with the lowest transaction
         index. If an error occurs it will be reported to the user and the
         error code forum_error_table_$invalid_trans_idx will be returned to
         the caller. The transaction index is stored in an internal static
         variable so that a call to next knows where to start. If the comments
         are being selected from a set the set index is stored in an internal
         static variable.

      next:
         input:   ptr                 pointer to the xforum_meeting_info
                                      structure which contains the current
                                      comment spec
         output:  ptr                 pointer to the forum_user_trans structure
                                      for the next comment that meets the
                                      current comment specification
                  fixed bin (35)      standard error code
         This entry is used to get the "next" selected transaction. When the
         set of selected transactions is completed the error code
         forum_error_table_$invalid_trans_idx is returned to the caller.

   description of internal procs:
      error: Similar to all the other error procedures. It records in an
      internal static structure the details of an error and then signals the
      xforum_fatal_error condition.
   END DESCRIPTION
*/

/* PARAMETERS */

/* EXTERNAL STATIC */

	dcl     forum_error_table_$invalid_trans_idx fixed bin (35) ext static;

/* ENTRIES */

	dcl     com_err_$suppress_name entry () options (variable);
	dcl     signal_		 entry () options (variable);
	dcl     xforum_trans_$first_ref entry (fixed bin, ptr, fixed bin (35));
	dcl     xforum_trans_$first_trans entry (ptr, fixed bin (35));
	dcl     xforum_trans_$next_ref entry (fixed bin, ptr, fixed bin (35));
	dcl     xforum_trans_$next_trans entry (fixed bin, ptr, fixed bin (35));
	dcl     xforum_trans_$read	 entry (fixed bin, ptr, fixed bin (35));

/* CONDITIONS */

/* INTERNAL AUTOMATIC */

	dcl     xforum_meeting_info_ptr ptr;		/* default pointer to the xforum_meeting_info structure */
						/* not included in the xforum_meeting_info include file */

/* INTERNAL STATIC */

	dcl     (
	        xgst_trans_no	 fixed bin,	/* forum index of last comment selected */
	        xgst_set_index	 fixed bin,	/* index into set array of last comment selected from a set */
	        01 xgst_xforum_error_info like xforum_error_info /* used to record error info to be output to user */
	        )			 internal static;

/* CONSTANTS */

	dcl     xgst_ME		 char (25) init ("xforum_get_selected_trans") internal static options (constant);

/* BUILTINS */

	dcl     (
	        addr,
	        null
	        )			 builtin;

/* BASED */

/* INCLUDE FILES */

%include forum_user_trans;
%page;
%include xforum_error_info;
%page;
%include xforum_meeting_info;

	call error (0, "Internal programming error - xforum_get_selected_trans$xforum_get_selected_trans called.");

first: entry (f_xforum_meeting_info_ptr, f_forum_user_trans_ptr, f_code);

/* PARAMETERS */

	dcl     f_xforum_meeting_info_ptr ptr;		/* (input) pointer to the xforum_meeting_info structure */
						/*         which contains the current comment spec */
	dcl     f_forum_user_trans_ptr ptr;		/* (output) pointer to the forum_user_trans structure for the */
						/*          first comment that meets the current comment */
						/*          specification */
	dcl     f_code		 fixed bin (35);	/* (output) standard error code */




	xforum_meeting_info_ptr = f_xforum_meeting_info_ptr;

	if xforum_meeting_info.all
	then do;
	     call xforum_trans_$first_trans (f_forum_user_trans_ptr, f_code);
	     if f_code ^= 0
	     then do;
		call com_err_$suppress_name (f_code, xgst_ME, "Getting first comment.");
		f_code = forum_error_table_$invalid_trans_idx;
	     end;
	     else xgst_trans_no = f_forum_user_trans_ptr -> forum_user_trans.trans_no;
	end;
	else if xforum_meeting_info.new
	then do;
	     call xforum_trans_$next_trans (xforum_meeting_info.last_seen, f_forum_user_trans_ptr, f_code);
	     if f_code ^= 0
	     then do;
		call com_err_$suppress_name (f_code, xgst_ME, "Getting first new comment.");
		f_code = forum_error_table_$invalid_trans_idx;
	     end;
	     else xgst_trans_no = f_forum_user_trans_ptr -> forum_user_trans.trans_no;
	end;
	else if xforum_meeting_info.range
	then do;
	     call xforum_trans_$read (xforum_meeting_info.low, f_forum_user_trans_ptr, f_code);
	     if f_code ^= 0
	     then do;
		call com_err_$suppress_name (f_code, xgst_ME, "Getting first comment in range");
		f_code = forum_error_table_$invalid_trans_idx;
	     end;
	     else xgst_trans_no = f_forum_user_trans_ptr -> forum_user_trans.trans_no;
	end;
	else if xforum_meeting_info.allref
	then do;
	     call xforum_trans_$first_ref (xforum_meeting_info.current_ref, f_forum_user_trans_ptr, f_code);
	     if f_code ^= 0
	     then do;
		call com_err_$suppress_name (f_code, xgst_ME, "Getting first comment in subject chain");
		f_code = forum_error_table_$invalid_trans_idx;
	     end;
	     else xgst_trans_no = f_forum_user_trans_ptr -> forum_user_trans.trans_no;
	end;
	else if xforum_meeting_info.restref
	then do;
	     call xforum_trans_$next_ref (xforum_meeting_info.current_ref, f_forum_user_trans_ptr, f_code);
	     if f_code ^= 0
	     then do;
		call com_err_$suppress_name (f_code, xgst_ME, "Getting next reference in subject chain");
		f_code = forum_error_table_$invalid_trans_idx;
	     end;
	     else xgst_trans_no = f_forum_user_trans_ptr -> forum_user_trans.trans_no;
	end;
	else if xforum_meeting_info.set
	then do;
	     call xforum_trans_$read (set_array.index (1), f_forum_user_trans_ptr, f_code);
	     if f_code ^= 0
	     then do;
		call com_err_$suppress_name (f_code, xgst_ME, "Getting first comment in set");
		f_code = forum_error_table_$invalid_trans_idx;
	     end;
	     else xgst_set_index = 1;
	end;
	else do;
	     call xforum_trans_$read (xforum_meeting_info.current, f_forum_user_trans_ptr, f_code);
	     if f_code ^= 0
	     then do;
		call com_err_$suppress_name (f_code, xgst_ME, "Reading current comment.");
		f_code = forum_error_table_$invalid_trans_idx;
	     end;
	end;

	return;

next: entry (n_xforum_meeting_info_ptr, n_forum_user_trans_ptr, n_code);

/* PARAMETERS */

	dcl     n_xforum_meeting_info_ptr ptr;		/* (input) pointer to the xforum_meeting_info structure */
						/*         which contains the current comment spec */
	dcl     n_forum_user_trans_ptr ptr;		/* (output) pointer to the forum_user_trans structure for the */
						/*          next comment that meets the current comment */
						/*          specification */
	dcl     n_code		 fixed bin (35);	/* (output) standard error code */





	xforum_meeting_info_ptr = n_xforum_meeting_info_ptr;

	if xforum_meeting_info.all | xforum_meeting_info.new
	then do;
	     call xforum_trans_$next_trans (xgst_trans_no, n_forum_user_trans_ptr, n_code);
	     if n_code = 0
	     then xgst_trans_no = n_forum_user_trans_ptr -> forum_user_trans.trans_no;
	     else n_code = forum_error_table_$invalid_trans_idx;
	end;
	else if xforum_meeting_info.allref
	then do;
	     call xforum_trans_$next_ref (xgst_trans_no, n_forum_user_trans_ptr, n_code);
	     if n_code = 0
	     then xgst_trans_no = n_forum_user_trans_ptr -> forum_user_trans.trans_no;
	     else n_code = forum_error_table_$invalid_trans_idx;
	end;
	else if xforum_meeting_info.restref
	then do;
	     call xforum_trans_$next_ref (xgst_trans_no, n_forum_user_trans_ptr, n_code);
	     if n_code = 0
	     then xgst_trans_no = n_forum_user_trans_ptr -> forum_user_trans.trans_no;
	     else n_code = forum_error_table_$invalid_trans_idx;
	end;

	else if xforum_meeting_info.range
	then do;
	     xgst_trans_no = xgst_trans_no + 1;
	     if xgst_trans_no <= xforum_meeting_info.high
	     then call xforum_trans_$read (xgst_trans_no, n_forum_user_trans_ptr, n_code);
	     else n_code = forum_error_table_$invalid_trans_idx;
	end;
	else if xforum_meeting_info.set
	then do;
	     xgst_set_index = xgst_set_index + 1;
	     if xgst_set_index <= set_array.number
	     then call xforum_trans_$read (set_array.index (xgst_set_index), n_forum_user_trans_ptr, n_code);
	     else n_code = forum_error_table_$invalid_trans_idx;
	end;
	else n_code = forum_error_table_$invalid_trans_idx;

	return;

error: proc (e_code, e_message);

/* PARAMETERS */

	dcl     e_code		 fixed bin (35);	/* (input) error code associated with the error */
	dcl     e_message		 char (*);	/* (input) message to be output to user */

	xgst_xforum_error_info.name = xgst_ME;
	xgst_xforum_error_info.entry = "";
	xgst_xforum_error_info.doing = "";
	xgst_xforum_error_info.code = e_code;
	xgst_xforum_error_info.reason = e_message;

	call signal_ ("xforum_fatal_error", null (), addr (xgst_xforum_error_info), null ());

     end error;

     end xforum_get_selected_trans;
