/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(85-01-14,Davids), approve(86-02-04,MCR7350),
     audit(86-04-24,Gilcrease), install(86-04-24,MR12.0-1048):
     Written.
     
     85-01-23 Davids: Changed the calls to
     message_facility_$print_message and set_seen_switch to pass the
     message_id instead of the msg_array index.  This was a change to
     the message_facility_ to fix a bug.
     
     85-04-22 Davids: Added the ro_clean_up_flag to the
     restore_original entry.  This flag will suppress the printing of
     unseen messages if it is true.  This is needed so that in the
     event that the entry is called because of a cleanup condition
     being signaled no terminal output is done.
  2) change(86-05-06,LJAdams), approve(86-05-27,MCR7425),
     audit(86-05-28,Gilcrease), install(86-06-30,MR12.0-1080):
     Created dummy wakeup handler to take advantage of changes made to the
     message facility.
  3) change(87-04-09,LJAdams), approve(87-04-22,MCR7684),
     audit(87-07-24,Blair), install(87-08-06,MR12.1-1065):
     Added entrypoint get_wakeup_state to return wakeup state value to
     xforum_personalize_menu (this value can be unset, accept or defer).
                                                   END HISTORY COMMENTS */
                                                                       
xforum_im_mgr: proc;

/*
   BEGIN DESCRIPTION

   function:
      This module manages interactive message handling for the Executive Forum
      subsystems.

   description of entry points:
      xforum_im_mgr: This entry point should never be called.

      init: This entry obtains a pointer to the msg_facility_mailbox structure
      to the users default mailbox (>udd>PROJECT_ID>PERSON_ID>PERSON_ID.mbx.
      It also records the message handling state of that mailbox and sets the 
      message handling states for the xforum message handling accept and
      defer states. This entry must be called before any other entry in this
      module. Note that if the origianl_wakeup_flags = "0"b it means that
      messages have never been accepted. There is a ring 1 restriction
      that prevents the wakeup_state_flags from being reset to "0"b once they
      have been set to something else. Because of this the original
      wakeup_state_flags will be changed to "72"b3 (defer messages) if they
      are "0"b

      accept_messages: This entry changes the message handling state of the
      users default mailbox to the Executive Forum accept messages state.
      This state looks like the system standard accept message state except
      that all messages are held. It will also print out all unseen messages
      by calling the print_unseen_messages procedure.

      defer_messages: This entry changes the message handling state to the
      Executive Forum defer messages state. This state looks like the system
      standard defer message state.

      restore_original: This entry will print all unseen messages by calling
      the print_unseen_messages facility and then change the message handling
      state to the state it was in before the call to the init entry.

   description of internal procedures:
      set_message_facility_data: Given a structure that defines a message
      handling state this procedure calls the appropriate message_facility
      entry points to set that state.

      print_unseen_messages: This procedure causes all unseen messages to be
      printed over user_io. It then markes those messages as printed. In the
      event of an error while printing a message an error message is output and
      printing of other unseen messages is aborted.

      print_error: This procedure will print an error message explaining that
      an error occured while printing messages and that the messages may be
      read after Xforum is exited. A timer puts the process to sleep for 4
      seconds so that the message may be read.
      
      error: This procedure will signal the xforum_fatal_error condition.
      it will be called if an error is returned from one of the
      message_facility_ calls. It will also be called if the main entry point
      xforum_im_mgr$xforum_im_mgr is called.

   END DESCRIPTION
*/

/* PARAMETERS */

/* EXTERNAL STATIC */

	dcl     iox_$user_io	 ptr ext static;

/* ENTRIES */

	dcl     ioa_		 entry () options (variable);
	dcl     message_facility_$get_alarm_handler entry (ptr, entry, ptr, fixed bin (71), fixed bin (35));
	dcl     message_facility_$get_message_format entry (ptr, bit (1) aligned, fixed bin (35));
	dcl     message_facility_$get_msg_array_ptr entry (ptr, ptr, ptr, fixed bin, fixed bin (35));
	dcl     message_facility_$get_msgf_mbx_ptr entry (char (*), char (*), ptr, fixed bin (35));
	dcl     message_facility_$get_prefix entry (ptr, char (32) var, bit (1) aligned, fixed bin (35));
	dcl     message_facility_$get_wakeup_handler entry (ptr, entry, ptr, fixed bin (35));
	dcl     message_facility_$get_wakeup_state entry (ptr, bit (*), fixed bin (35));
	dcl     message_facility_$print_message entry (ptr, ptr, bit (72) aligned, ptr, fixed bin (35));
	dcl     message_facility_$set_alarm_handler entry (ptr, entry, ptr, fixed bin (71), fixed bin (35));
	dcl     message_facility_$set_message_format entry (ptr, bit (1) aligned, fixed bin (35));
	dcl     message_facility_$set_prefix entry (ptr, char (32) var, bit (1) aligned, fixed bin (35));
	dcl     message_facility_$set_seen_switch entry (ptr, bit (72) aligned, bit (*), fixed bin (35));
	dcl     message_facility_$set_wakeup_handler entry (ptr, entry, ptr, fixed bin (35));
	dcl     message_facility_$set_wakeup_state entry (ptr, bit (*), fixed bin (35));
	dcl     signal_		 entry () options (variable);
	dcl     timer_manager_$sleep	 entry (fixed bin (71), bit (2));
	dcl     user_info_		 entry (char (*), char (*), char (*));
	dcl     xforum_im_mgr$dummy_wakeup_handler entry () options (variable);

/* CONDITIONS */

/* INTERNAL AUTOMATIC */

/* INTERNAL STATIC */

	dcl     (
	        xim_msg_facility_mbx_ptr ptr,
	        01 xim_accept_messages like message_facility_data,
	        01 xim_original	 like message_facility_data,
	        01 xim_xforum_error_info like xforum_error_info
	        )			 internal static;

          dcl     wakeup_state           fixed bin (2) internal static;

/* CONSTANTS */

	dcl     xim_512_SPACES	 char (512) init (" ") internal static options (constant);
	dcl     UNSET                  fixed bin (2) int static options (constant) init (0);
          dcl     ACCEPT                 fixed bin (2) int static options (constant) init (1);
	dcl     DEFER                  fixed bin (2) int static options (constant) init (2);
         

/* BUILTINS */

          dcl     addr                   builtin;
	dcl     empty		 builtin;
          dcl     null                   builtin;
	dcl     rtrim		 builtin;

/* BASED */

	dcl     01 message_facility_data based,
		02 wakeup_state_flags bit (36),
		02 prefix_string	 char (32) varying,
		02 short_prefix	 bit (1) aligned,
		02 short_format	 bit (1) aligned,
		02 alarm_entry	 entry,
		02 alarm_info_ptr	 ptr,
		02 alarm_time	 fixed bin (71),
		02 wakeup_entry	 entry,
		02 wakeup_info_ptr	 ptr;

/* INCLUDE FILES */

%include msg_array;
%page;
%include msg_print_flags;
%page;
%include xforum_error_info;

	call error (0, "Program logic error, main entry point in xforum_im_mgr called.");

init: entry ();

/* AUTOMATIC */

	dcl     i_code		 fixed bin (35);
	dcl     i_dir		 char (168) varying;
	dcl     i_entry		 char (32);
	dcl     i_user_name		 char (32);
	dcl     i_user_project	 char (32);
	dcl     i_unused_c32	 char (32);

	call user_info_ (i_user_name, i_user_project, i_unused_c32);
	i_dir = ">udd>" || rtrim (i_user_project);
	i_dir = i_dir || ">";
	i_dir = i_dir || rtrim (i_user_name);
	i_entry = rtrim (i_user_name) || ".mbx";

	call message_facility_$get_msgf_mbx_ptr ((i_dir), i_entry, xim_msg_facility_mbx_ptr, i_code);
	if i_code ^= 0
	then call error (i_code, "Could not get msg facility mbx ptr.");

	call message_facility_$get_wakeup_state (xim_msg_facility_mbx_ptr, xim_original.wakeup_state_flags, i_code);
	if i_code ^= 0
	then call error (i_code, "Could not get original wakeup state.");

	if xim_original.wakeup_state_flags = "0"b
          then wakeup_state = UNSET;
	else if xim_original.wakeup_state_flags = "72"b3
          then wakeup_state = DEFER;
	else if xim_original.wakeup_state_flags = "74"b3
          then wakeup_state = ACCEPT;

	call message_facility_$get_prefix (xim_msg_facility_mbx_ptr,
	     xim_original.prefix_string, xim_original.short_prefix, i_code);
	if i_code ^= 0
	then call error (i_code, "Could not get original msg prefix information.");

	call message_facility_$get_message_format (xim_msg_facility_mbx_ptr, xim_original.short_format, i_code);
	if i_code ^= 0
	then call error (i_code, "Could not get original short format flag.");

	call message_facility_$get_alarm_handler (xim_msg_facility_mbx_ptr,
	     xim_original.alarm_entry, xim_original.alarm_info_ptr, xim_original.alarm_time, i_code);
	if i_code ^= 0
	then call error (i_code, "Could not get original alarm handler information.");

	call message_facility_$get_wakeup_handler (xim_msg_facility_mbx_ptr,
	     xim_original.wakeup_entry, xim_original.wakeup_info_ptr, i_code);
	if i_code ^= 0
	then call error (i_code, "Could not get original wakeup handler information.");

	if xim_original.wakeup_state_flags = "0"b
	then xim_original.wakeup_state_flags = "72"b3;

	xim_accept_messages.wakeup_state_flags = "74"b3;
	xim_accept_messages.prefix_string = "";
	xim_accept_messages.short_prefix = "0"b;
	xim_accept_messages.short_format = "0"b;
	xim_accept_messages.alarm_entry = xforum_im_mgr$dummy_wakeup_handler;
	xim_accept_messages.alarm_info_ptr = null ();
	xim_accept_messages.alarm_time = 0;
	xim_accept_messages.wakeup_entry = xforum_im_mgr$dummy_wakeup_handler;
	xim_accept_messages.wakeup_info_ptr = addr (xim_512_SPACES);

	return;

accept_messages: entry ();

	call set_message_facility_data (xim_accept_messages);
	call print_unseen_messages;
          wakeup_state = ACCEPT;

	return;

defer_messages: entry ();

	call set_message_facility_data (xim_accept_messages);
          wakeup_state = DEFER;

	return;

dummy_wakeup_handler: entry ();
	return;

get_wakeup_state: entry () returns (fixed bin(2));
	        
          return (wakeup_state);
	

restore_original: entry (ro_clean_up_flag);

/* PARAMETERS */

	dcl     ro_clean_up_flag	 bit (1) aligned;






	if ^ro_clean_up_flag
	then call print_unseen_messages;
	call set_message_facility_data (xim_original);

	return;

set_message_facility_data: proc (smfd_message_facility_data);

/* PARAMETERS */

	dcl     01 smfd_message_facility_data like message_facility_data;

/* AUTOMATIC */

	dcl     smfd_code		 fixed bin (35);

	call message_facility_$set_wakeup_state (xim_msg_facility_mbx_ptr,
	     smfd_message_facility_data.wakeup_state_flags, smfd_code);
	if smfd_code ^= 0
	then call error (smfd_code, "Could not set xforum accept wakeup state.");

	call message_facility_$set_prefix (xim_msg_facility_mbx_ptr,
	     smfd_message_facility_data.prefix_string, smfd_message_facility_data.short_prefix, smfd_code);
	if smfd_code ^= 0
	then call error (smfd_code, "Could not set xforum accept msg prefix information.");

	call message_facility_$set_message_format (xim_msg_facility_mbx_ptr,
	     smfd_message_facility_data.short_format, smfd_code);
	if smfd_code ^= 0
	then call error (smfd_code, "Could not set xforum accept short format flag.");

	call message_facility_$set_alarm_handler (xim_msg_facility_mbx_ptr,
	     smfd_message_facility_data.alarm_entry, smfd_message_facility_data.alarm_info_ptr,
	     smfd_message_facility_data.alarm_time, smfd_code);
	if smfd_code ^= 0
	then call error (smfd_code, "Could not set xforum accept alarm handler information.");

	call message_facility_$set_wakeup_handler (xim_msg_facility_mbx_ptr,
	     smfd_message_facility_data.wakeup_entry, smfd_message_facility_data.wakeup_info_ptr, smfd_code);
	if smfd_code ^= 0
	then call error (smfd_code, "Could not set xforum accept wakeup handler information.");

	return;

     end set_message_facility_data;

print_unseen_messages: proc;

/* AUTOMATIC */

	dcl     pum_code		 fixed bin (35);
	dcl     pum_i		 fixed bin;
	dcl     pum_work_area	 area (500);
	dcl     01 pum_msg_print_flags like msg_print_flags;





	call message_facility_$get_msg_array_ptr (xim_msg_facility_mbx_ptr,
	     addr (pum_work_area), msg_array_ptr, n_messages, pum_code);
	if pum_code ^= 0
	then do;
	     call print_error;
	     goto exit_print_unseen_messages;
	end;

	pum_msg_print_flags.print_prefix = "1"b;
	pum_msg_print_flags.print_ename = "0"b;
	pum_msg_print_flags.print_sender = "1"b;
	pum_msg_print_flags.print_date_and_time = "1"b;
	pum_msg_print_flags.print_time = "0"b;
	pum_msg_print_flags.print_last_message = "0"b;
	pum_msg_print_flags.mbz = "0"b;

	do pum_i = 1 to n_messages;
	     if ^msg_array (pum_i).printed
	     then do;
		call message_facility_$print_message (xim_msg_facility_mbx_ptr, iox_$user_io,
		     msg_array (pum_i).message_id, addr (pum_msg_print_flags), pum_code);
		if pum_code ^= 0
		then do;
		     call print_error;
		     goto exit_print_unseen_messages;
		end;
		call message_facility_$set_seen_switch (xim_msg_facility_mbx_ptr,
		     msg_array (pum_i).message_id, DELETE_UNHELD, pum_code);
		if pum_code ^= 0
		then do;
		     call print_error;
		     goto exit_print_unseen_messages;
		end;
	     end;
	end;

exit_print_unseen_messages:
	return;

     end print_unseen_messages;

print_error: proc;

	call ioa_ ("An error has occured while trying to print newly arrived messages." ||
	     "^/You may print these messages after exiting Executive Forum with^/the ""print_messages -new"" command.");
	call timer_manager_$sleep (4, "11"b);

	return;

     end print_error;

error: proc (e_code, e_message);

/* PARAMETERS */

	dcl     e_code		 fixed bin (35);
	dcl     e_message		 char (*);

	xim_xforum_error_info.name = "xforum_im_mgr";
	xim_xforum_error_info.entry = "";
	xim_xforum_error_info.doing = "";
	xim_xforum_error_info.code = e_code;
	xim_xforum_error_info.reason = e_message;

	call signal_ ("xforum_fatal_error", null (), addr (xim_xforum_error_info), null ());

     end error;

     end xforum_im_mgr;
