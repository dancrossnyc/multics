/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(85-01-24,Davids), approve(86-02-04,MCR7350),
     audit(86-04-24,Gilcrease), install(86-04-24,MR12.0-1048):
     Added the set_specified internal proc and its call.
     
     85-02-13 Davids: Changed calling sequence of
     xforum_help_line_$change and $push to include the new F3_message
     argument.
  2) change(86-02-07,LJAdams), approve(86-02-18,MCR7350),
     audit(86-04-24,Gilcrease), install(86-04-24,MR12.0-1048):
     Added the lastref "lref" and restref "rref" options.
  3) change(87-04-15,LJAdams), approve(87-04-22,MCR7684),
     audit(87-07-30,Blair), install(87-08-06,MR12.1-1065):
     Changed to allow command_processor_ escapes.
                                                   END HISTORY COMMENTS */


xforum_validate_trans_spec_: proc (P_xforum_meeting_info_ptr, P_spy_ptr, P_trans_spec, P_code);

/*
   BEGIN DESCRIPTION

   function:
      This procedure validates the transaction specifier supplied and either
      returns a standard error code or updates the xforum_meeting_info
      structure appropriately
      
   description of entry points:
      xforum_validate_trans_spec: transaction validation occurs in phases.
      First the specifier is checked to see if its the keyword "search" or "s"
      if it is the search_for_string procedure is called. If not the specifier
      is checked to see if it is nothing but numbers and spaces and there is
      at least 1 space, if so its a set and the set_specified procedure is
      called. These two types of specifiers where added to the code and it
      was decided that this was the simplest approach instead of trying to
      update the keyword tables. If the above two checks fail then
      the characters are checked to be sure that there are only legal
      characters. These are made up of the set of numerals, +, -, :, and the
      letters that make up the (rest of the) keywords.
      Next, the input spec is checked to see if an initial substring matches
      any of the keywords that must appear alone, and if so a check is made to
      be sure that the keyword does indeed appear alone. The trans spec is then
      processed by setting the appropriate values and flags in the
      xforum_meeting_info structure. 
      If the trans spec is not a keyword that must appear alone it is either
      a range or an individual transaction. A subspecification is formed by
      taking the characters before the ":" character and after the ":"
      character. The internal proc verify_spec_string is called to verify these
      subspecifications.
      If the second subspec is null then the original spec did not include
      the ":" character and did not specify a range.  If a range is specified
      a final check is made to be sure that the second subspec specifies a 
      higher transaction than the first subspec.

   description of internal procs:
      verify_spec_string: This internal proc checks to be sure that the
      subspecification of a range end point or of a single transaction is
      valid. A subspec may be a number, keyword or a number,keyword+-number.
      the subspec is first checked to see if its just a number. After the
      transaction number identified by the subspec is determined a call to
      forum_ is made to read the transaction. The purpose is to verify that the
      transaction exits. If the transaction does not exist a call to com_err_
      is made with the error code returned by forum_. The error code is global
      to verify_spec_string so that it can be tested when the reoutine returns.

      search_for_string: this procedure prompts the user to enter a string.
      If all the flags are set to zero then there is only 1 comment selected.
      If only 1 comment is selected then all the comments in the meeting will
      be searched. This is done by saving the current comment index and setting
      the all flag. If there are multiple comments (one of the flags is non
      zero) then only those comments are serached. Messages are output
      telling the user what comments are being searched and what string is
      being looked for. A temp segment is obtained and the set_array structure
      overlaid on it. Each comment that is found to contain the search string
      is added to the set_array. If after all comments have been searched no
      comments arte found then a message to that effect is output and the
      currently selected comments does not change. This requires that if there
      was originally only 1 comment selected the all flag be turned off and the
      current value reset. If the old_current value is non-zero it means that
      there was originally one one comment selected. If only 1 comment was
      found with the search string it is treated as if the user specified
      the comment directly, all the flags are turned off and the current
      field set to that the located comment. If multiple comments were found
      the temporary set array is copied over into the meeting_info set array.
      A quit handler is set up to restore the original selected comments and
      record that the user hit quit. The temp segment is release and the help
      line restored right before the return - which the quit handler goes to.

      set_specified: this procedure pulls apart a sequence of comment numbers
      separated by spaces. It tests to be sure that the comment exists and 
      records the number in a set_array. It also builds a string to be
      displayed for the current comments:.If the indicated transaction does no
      exist or has been deleted a message to that effect is output and the
      index not put in the set_array. The rest of the indices are processed. If
      no comments are selected a message to that effect is output. If only 1
      comment is selected it is treated as if the user entered only the
      number for the comment instead of a set.

      convert_to_number: This procedure is used to convert a string
      representing a comment index into a number. The size condition is
      trapped so that if the number is too large a meaningful error is output
      instead of the size condition message. The number is converted into a
      fixed bin (17,0) because that is what the transaction index parameter
      in forum_$read_trans is declared as. The message indicates that the
      input comment index does not exist.

      report_error: this procedure is used to report errors back to the user.
      It first clears the bottom window so that the user will not get a more
      prompt before the error message and so that the error message stands out.
      Also for the forum error codes invalid_trans_idx, trans_deleted,
      trans_reaped, and bad_trans_spec a standard message is output instead of
      the message associated with the error code. This makes sure that the
      word transaction does not appear and also that the message is a sentance.

      collect_spy_data: this procedure is used to collect information about the
      users response to the prompt and about his use of the quit key. 

      error: this procedure is used to singal xforum_fatal_error, It is called
      only if there is some problem in getting the users response to the
      prompt. There should never be a problem with this.

   known bugs:

   notes:
      84-12-13 Davids: The description of internal procs and entry points 
      probably needs to be updated.
   history:

      83-12-?? DBarker: original coded.

      84-09-06 Davids: Added standard header.

      84-09-11 Davids: Added check to be sure that the P_trans_spec is longer
      than KETTAB1(i) before the substr on P_trans_spec is done.

      84-10-25 Davids: Added code to free the forum_user_trans structure after
      every call to xforum_trans. By not freeing the structures it is possible
      to expand the system area so much that a RQO in the pdir occurs.
      Modified the way that the last transaction is set. The code use to loop
      from the current transaction to the next transaction until the call to
      next failed. The last transaction found was the last transaction. It now
      makes a call to forum_$forum_limits to get the upto date last_trans
      and uses that. It also updates the info in the meeting_list structure.

      84-10-29 Davids: Removed a free in the current section of
      verify_spec_string that I added on 84-10-25. Since it is current there
      was no call to xforum_trans to allocate a forum_user_trans structure
      that has to be freed.

      84-11-06 Davids: Added the internal procedure convert_to_number. Also
      changed the internal automatic comment indices from fixed bin (35) to
      fixed bin since this is what is needed by xforum_trans and ultimately
      forum_. Changed error handling so that if the user specifies an
      index that does not exist the message "Comment <num> does not exist"
      is output instead of "Specified transaction does not exist <num>".

      84-11-15 Davids: Auditing changes: 1) Simplified the if-then-else
      statements that handle the keywords to remove duplicated code. 2) Added
      the "in clause" to the free statements. 3) Corrected messages to end in
      puncuation. 4) Replaced numbers determining which key words were used
      with named constants. 5) Corrected check for overlapping range spec so
      that i:i will NOT kick out as an error. Other changes: 1) Replaced
      transaction with comment in messages. 2) Put dcls in the standard format.

      84-12-13 Davids: Added the procedure report_error. Changed all calls to
      ioa_ and com_err_ to call report_error instead.

      85-01-15 Davids: Added ltrim's to all occurences of char (sub1) so that
      leading spaces are removed.
   END DESCRIPTION
*/

/* PARAMETERS */

	dcl     P_xforum_meeting_info_ptr ptr;
	dcl     P_spy_ptr		 ptr;
	dcl     P_trans_spec	 char (*);
	dcl     P_code		 fixed bin (35);

/* EXTERNAL STATIC */

	dcl     iox_$user_io	 ptr ext static;
	dcl     forum_error_table_$bad_trans_spec fixed bin (35) ext static;
	dcl     forum_error_table_$invalid_trans_idx fixed bin (35) ext static;
	dcl     forum_error_table_$trans_deleted fixed bin (35) ext static;
	dcl     forum_error_table_$trans_reaped fixed bin (35) ext static;

/* ENTRIES */

	dcl     com_err_$suppress_name entry () options (variable);
	dcl     cv_dec_		 entry (char (*)) returns (fixed bin (35));
	dcl     ioa_		 entry () options (variable);
	dcl     get_temp_segment_	 entry (char (*), ptr, fixed bin (35));
	dcl     release_temp_segment_	 entry (char (*), ptr, fixed bin (35));
	dcl     signal_		 entry () options (variable);
	dcl     timer_manager_$sleep	 entry (fixed bin (71), bit (2));
	dcl     window_$clear_window	 entry (ptr, fixed bin (35));
	dcl     xforum_get_selected_trans$first entry (ptr, ptr, fixed bin (35));
	dcl     xforum_get_selected_trans$next entry (ptr, ptr, fixed bin (35));
	dcl     xforum_get_str_	 entry (char(*) var, ptr, char(*), char(*), char(*) var, fixed bin(35));
	dcl     xforum_help_line_$change entry (bit(8), char(*), char(*), char(*));
	dcl     xforum_help_line_$pop	 entry options (variable);
	dcl     xforum_help_line_$push entry (bit(8), char(*), char(*), char(*));
	dcl     xforum_trans_$read	 entry (fixed bin, ptr, fixed bin (35));
	dcl     xforum_trans_$first_ref entry (fixed bin, ptr, fixed bin (35));
	dcl     xforum_trans_$first_trans entry (ptr, fixed bin (35));
	dcl     xforum_trans_$next_ref entry (fixed bin, ptr, fixed bin (35));
	dcl     xforum_trans_$next_trans entry (fixed bin, ptr, fixed bin (35));
	dcl     xforum_trans_$prev_ref entry (fixed bin, ptr, fixed bin (35));
          dcl     xforum_trans_$last_ref entry (fixed bin, ptr, fixed bin (35));
	dcl     xforum_trans_$prev_trans entry (fixed bin, ptr, fixed bin (35));
	dcl     xforum_window_mgr$check_window_status entry options (variable);

/* CONDITIONS */

	dcl     quit		 condition;

/* INTERNAL AUTOMATIC */

	dcl     (sub1, sub2)	 char (40);
	dcl     (sub1n, sub2n)	 fixed bin;
	dcl     i			 fixed bin;
	dcl     range_specified	 bit (1) aligned;
	dcl     code		 fixed bin (35);


/* INTERNAL STATIC */

	dcl     01 xvts_xforum_error_info like xforum_error_info internal static;

/* CONSTANTS */

	dcl     (
	        ON		 bit (1) init ("1"b),
	        OFF		 bit (1) init ("0"b),
	        KEYTAB1		 (15) char (8) var	/* keywords that must appear alone */
				 init ("allref", "aref", "firstref", "fref", "nextref",
				 "nref", "prevref", "pref", "lastref", "lref", "restref", "rref", "all", "a", "new"),
	        KEYTAB2		 (10) char (7) var	/* keywords that needn't appear alone */
				 init ("first", "f", "prev", "p", "current", "c",
				 "next", "n", "last", "l"),
	        ALLREF		 fixed bin init (1),
	        AREF		 fixed bin init (2),
	        FIRSTREF		 fixed bin init (3),
	        FREF		 fixed bin init (4),
	        NEXTREF		 fixed bin init (5),
	        NREF		 fixed bin init (6),
	        PREVREF		 fixed bin init (7),
	        PREF		 fixed bin init (8),
	        LASTREF                fixed bin init (9),
	        LREF		 fixed bin init (10),
	        RESTREF		 fixed bin init (11),
	        RREF		 fixed bin init (12),
	        ALL		 fixed bin init (13),
	        A			 fixed bin init (14),
	        NEW		 fixed bin init (15),
	        FIRST		 fixed bin init (1),
	        F			 fixed bin init (2),
	        PREV		 fixed bin init (3),
	        P			 fixed bin init (4),
	        CURRENT		 fixed bin init (5),
	        C			 fixed bin init (6),
	        LAST		 fixed bin init (9),
	        L			 fixed bin init (10)
	        )			 internal static options (constant);

/* BUILTINS */

	dcl     (
	        addr,
	        after,
	        before,
	        char,
	        hbound,
	        index,
	        length,
	        ltrim,
	        null,
	        rtrim,
	        search,
	        string,
	        substr,
	        unspec,
	        verify
	        )			 builtin;

/* BASED */

	dcl     TRUE		 bit (1) based (addr (ON));
	dcl     xforum_system_area	 area based (xforum_system_area_ptr);


/* INCLUDE FILES */

%include forum_dcls;
%page;
%include forum_user_trans;
%page;
%include xforum_error_info;
%page;
%include xforum_meeting_info;
%page;
%include xforum_ptr_struct_;
%page;
%include xforum_spy;
%page;
%include xforum_windows;
%page;
%include xforum_prompts;


%include xforum_answers;


%include xforum_help_infos;


	P_code = 0;
	forum_user_trans_ptr = null ();

	if P_trans_spec = "search" | P_trans_spec = "s"
	then do;
	     call search_for_string;
	     goto exit_xforum_validate_trans_spec;
	end;

	if ((verify (P_trans_spec, "0123456789 ") = 0) & (index (P_trans_spec, " ") ^= 0))
	then do;
	     call set_specified (P_trans_spec);
	     goto exit_xforum_validate_trans_spec;
	end;

	if verify (P_trans_spec, "0123456789+-:acefilnprstuvwx") ^= 0
	then goto bad_trans_spec;

/* characters are alright at least  */
	do i = 1 to hbound (KEYTAB1, 1);
	     if length (P_trans_spec) >= length (KEYTAB1 (i))
	     then do;
		if KEYTAB1 (i) = substr (P_trans_spec, 1, length (KEYTAB1 (i)))
		then goto found_in_tab1;
	     end;
	end;

	goto not_in_tab1;

found_in_tab1:
	if length (P_trans_spec) ^= length (KEYTAB1 (i))
	then goto bad_trans_spec;			/* these kws must be alone */


	if i = ALLREF | i = AREF
	then do;
	     if xforum_meeting_info.current = 0
	     then do;
		P_code = forum_error_table_$bad_trans_spec;
		call report_error (0, "^a incompatible with current comment specifier.", P_trans_spec);
		goto exit_xforum_validate_trans_spec;
	     end;
	     unspec (xforum_meeting_info.flags) = "0"b;
	     xforum_meeting_info.allref = TRUE;
	     xforum_meeting_info.current_ref = xforum_meeting_info.current;
	     goto exit_xforum_validate_trans_spec;
	end;
          else
               if i = RESTREF | i = RREF
          then do;
               if xforum_meeting_info.current = 0
               then do;
                    P_code = forum_error_table_$bad_trans_spec;
		call report_error (0, "^a incompatible with current comment specifier.", P_trans_spec);
		goto exit_xforum_validate_trans_spec;
                end;
	     unspec (xforum_meeting_info.flags) = "0"b;
	     xforum_meeting_info.restref = TRUE;
	     xforum_meeting_info.current_ref = xforum_meeting_info.current;
	     goto exit_xforum_validate_trans_spec;
	end;

	else
	     if i = ALL | i = A
	then do;
	     unspec (xforum_meeting_info.flags) = "0"b;
	     xforum_meeting_info.all = TRUE;
	     goto exit_xforum_validate_trans_spec;
	end;
	else
	     if i = NEW
	then do;
	     if xforum_meeting_info.last_seen ^< xforum_meeting_info.last_trans
	     then do;
		P_code = forum_error_table_$bad_trans_spec;
		call report_error (0, "There are no new comments.", "");
		goto exit_xforum_validate_trans_spec;
	     end;
	     unspec (xforum_meeting_info.flags) = "0"b;
	     xforum_meeting_info.new = TRUE;
	     goto exit_xforum_validate_trans_spec;
	end;
	else do;					/* firstref | fref | nextref | nref | prevref | pref */
						/* lastref | lref				*/
	     if xforum_meeting_info.current = 0
	     then do;
		P_code = forum_error_table_$bad_trans_spec;
		call report_error (0, "^a incompatible with current comment specifier.", P_trans_spec);
		goto exit_xforum_validate_trans_spec;
	     end;

	     if i = FIRSTREF | i = FREF
	     then call xforum_trans_$first_ref (xforum_meeting_info.current,
		     forum_user_trans_ptr, code);
	     else
		if i = NEXTREF | i = NREF
	     then call xforum_trans_$next_ref (xforum_meeting_info.current,
		     forum_user_trans_ptr, code);
	     else
		if i = PREVREF | i = PREF 
	     then call xforum_trans_$prev_ref (xforum_meeting_info.current,
		     forum_user_trans_ptr, code);
	     else
	          if i = LASTREF | i = LREF
	     then call xforum_trans_$last_ref (xforum_meeting_info.current,
	               forum_user_trans_ptr, code);

	     if code ^= 0
	     then do;
		P_code = code;
		call report_error (P_code, "^a", P_trans_spec);
		goto exit_xforum_validate_trans_spec;
	     end;
	     unspec (xforum_meeting_info.flags) = "0"b;
	     xforum_meeting_info.current = forum_user_trans.trans_no;
	     free forum_user_trans in (xforum_system_area);
	     goto exit_xforum_validate_trans_spec;
	end;

not_in_tab1:					/* let's make some better checks    */
	sub1 = before (P_trans_spec, ":");

	call verify_spec_string (sub1, sub1n);
	if code ^= 0 then do;
	     P_code = code;
	     goto exit_xforum_validate_trans_spec;	/* error messages printed by subr   */
	end;

	sub2 = after (P_trans_spec, ":");

	if sub2 = "" then
	     range_specified = OFF;
	else do;
	     range_specified = ON;

	     call verify_spec_string (sub2, sub2n);
	     if code ^= 0 then do;
		P_code = code;
		goto exit_xforum_validate_trans_spec;
	     end;
	end;

	if range_specified
	then do;					/* check range validity */
	     if sub2n < sub1n
	     then do;
		P_code = forum_error_table_$bad_trans_spec;
		call report_error (0, "Range specification overlaps ^a.", P_trans_spec);
		goto exit_xforum_validate_trans_spec;
	     end;

	     unspec (xforum_meeting_info.flags) = "0"b;

	     xforum_meeting_info.flags.range = ON;

	     xforum_meeting_info.low = sub1n;

	     xforum_meeting_info.high = sub2n;

	     xforum_meeting_info.current = 0;
	end;
	else do;					/* not range		      */
	     unspec (xforum_meeting_info.flags) = "0"b;

	     xforum_meeting_info.current = sub1n;
	end;

exit_xforum_validate_trans_spec:
	return;

bad_trans_spec:
	P_code = forum_error_table_$bad_trans_spec;
	call report_error (0, "Invalid comment specification.", "");
	return;

verify_spec_string: proc (str, num);

	dcl     str		 char (*);
	dcl     num		 fixed bin;

	dcl     (sub1, sub2)	 char (40);
	dcl     (sub1n, sub2n)	 fixed bin;
	dcl     c			 char (1);
	dcl     vss_last_trans	 fixed bin;
	dcl     unused1		 bit (36) aligned;
	dcl     vss_i		 fixed bin;

	if verify (rtrim (str), "0123456789") = 0 then do;
						/* numeric anyway    */
	     sub1 = str;

	     sub1n = convert_to_number (str);

	     call xforum_trans_$read (sub1n, forum_user_trans_ptr, code);
	     if code ^= 0
	     then do;
		call report_error (code, "^a", str);
		goto exit_verify_spec_string;
	     end;
	     else do;
		num = sub1n;
		free forum_user_trans in (xforum_system_area);
		goto exit_verify_spec_string;
	     end;
	end;					/* not numeric - must be +|-	      */
	if search (str, "+-") ^= 0
	then do;
	     c = substr (str, search (str, "+-"), 1);
	     sub1 = before (str, c);
	     sub2 = after (str, c);
	end;
	else do;
	     sub1 = str;
	     sub2 = "";
	end;

	if verify (rtrim (sub2), "0123456789") ^= 0 then do;
	     code = forum_error_table_$bad_trans_spec;
	     call report_error (0, "Comment offsets must be numeric ^a.", str);
	     goto exit_verify_spec_string;
	end;

	sub2n = convert_to_number (sub2);

	if verify (rtrim (sub1), "0123456789") = 0 then
	     sub1n = convert_to_number (sub1);
	else do;					/* need to find in KEYTAB2	      */
	     do i = 1 to hbound (KEYTAB2, 1);
		if KEYTAB2 (i) = rtrim (sub1) then
		     goto found_in_tab2;
	     end;

	     goto bad_trans_spec;			/* slightly naughty */

found_in_tab2:
	     if i = FIRST | i = F
	     then do;
		call xforum_trans_$first_trans (forum_user_trans_ptr,
		     code);
		if code ^= 0 then do;
		     call report_error (code, "^a", ltrim (char (sub1)));
		     goto exit_verify_spec_string;
		end;

		sub1n = forum_user_trans.trans_no;
		free forum_user_trans in (xforum_system_area);
	     end;
	     else
		if i = CURRENT | i = C
	     then do;
		if xforum_meeting_info.current = 0 then do;
		     code = forum_error_table_$bad_trans_spec;
		     call report_error (0, "^a incompatible with current comment specifier.", ltrim (char (sub1)));
		     goto exit_verify_spec_string;
		end;
		sub1n = xforum_meeting_info.current;
	     end;
	     else
		if i = LAST | i = L
	     then do;
		call forum_$forum_limits (xforum_meeting_info.idx,
		     ONLY_UNDELETED,
		     xforum_meeting_info.last_seen,
		     xforum_meeting_info.first_trans,
		     vss_last_trans,
		     xforum_meeting_info.new_trans, unused1, (0));

		if vss_last_trans > xforum_meeting_info.last_trans
		then do;
		     do vss_i = xforum_meeting_info.last_trans + 1 to vss_last_trans;
			xforum_meeting_info.seen_map_ptr -> seen_map (vss_i) = "0"b;
			xforum_meeting_info.unread_count = xforum_meeting_info.unread_count + 1;
		     end;
		     if xforum_meeting_info.next_unread = -1
		     then xforum_meeting_info.next_unread = xforum_meeting_info.last_trans + 1;
		     xforum_meeting_info.last_trans = vss_last_trans;
		end;

		sub1n = vss_last_trans;
	     end;
	     else do;				/* previous or next */
		if xforum_meeting_info.current = 0
		then do;
		     if ^xforum_meeting_info.range
		     then do;			/* range is ok */
			code = forum_error_table_$bad_trans_spec;
			call report_error (0, "^a incompatible with current comment specifier.", ltrim (char (sub1)));
			goto exit_verify_spec_string;
		     end;
		end;

		if i = PREV | i = P
		then do;
		     if xforum_meeting_info.range
		     then call xforum_trans_$prev_trans (xforum_meeting_info.low,
			     forum_user_trans_ptr, code);
		     else call xforum_trans_$prev_trans (xforum_meeting_info.current,
			     forum_user_trans_ptr, code);
		end;
		else do;				/* next */
		     if xforum_meeting_info.range
		     then call xforum_trans_$next_trans (xforum_meeting_info.high,
			     forum_user_trans_ptr, code);
		     else call xforum_trans_$next_trans (xforum_meeting_info.current,
			     forum_user_trans_ptr, code);
		end;

		if code ^= 0
		then do;
		     call report_error (code, "^a", ltrim (char (sub1)));
		     goto exit_verify_spec_string;
		end;

		sub1n = forum_user_trans.trans_no;
		free forum_user_trans in (xforum_system_area);
	     end;
	end;

	if c = "+" then
	     num = sub1n + sub2n;
	else num = sub1n - sub2n;

	if num < 1
	then do;					/* can't have that */
	     code = forum_error_table_$invalid_trans_idx;
	     call report_error (code, "", str);
	     goto exit_verify_spec_string;
	end;

	call xforum_trans_$read (num, forum_user_trans_ptr, code);
	if code = 0
	then free forum_user_trans in (xforum_system_area);
	else call report_error (code, "^a", str);

exit_verify_spec_string:
	return;

     end verify_spec_string;

search_for_string: proc;

/* AUTOMATIC */

	dcl     sfs_code		 fixed bin (35);
	dcl     sfs_old_current_comment fixed bin;
	dcl     sfs_reply		 char (256) varying;
	dcl     sfs_satisfies_search_ptr ptr;
          dcl     prompt                 char (256);

/* CONSTANT */

          dcl     MAX_LEN                fixed bin init (256) internal static options (constant);
	         
/* EXTERNAL ENTRY */

          dcl     error_table_$long_record	
                                         fixed bin(35) ext static;
	         

	xforum_meeting_info_ptr = P_xforum_meeting_info_ptr;
	spy_ptr = P_spy_ptr;
	sfs_old_current_comment = 0;
          answer_array.N = 0;
	answer_array.max_length = MAX_LEN;

	on quit
	     begin;
		call xforum_window_mgr$check_window_status;
		call window_$clear_window (iox_$user_io, (0));
		call collect_spy_data (SPY_AT_18, "QUIT");
		if sfs_old_current_comment ^= 0
		then do;
		     xforum_meeting_info.current = sfs_old_current_comment;
		     string (xforum_meeting_info.flags) = "0"b;
		end;
		goto exit_search_for_string;
	     end;

	call window_$clear_window (iox_$user_io, (0));

	call xforum_help_line_$push ("0"b, "", "", "Press  ? and RETURN:help  BREAK:To leave current comments unchanged");

          prompt = TEXT_PROMPT;
get_search_string:
          call xforum_get_str_ ((prompt), addr(answer_array), PROMPT_HELP, "search_spec", sfs_reply, sfs_code);
 
          if sfs_code = error_table_$long_record
          then do;
               call ioa_ ("The search text can only be ^d characters - please reenter^/   (or press BREAK to return to menu).", MAX_LEN);
	     goto get_search_string;
          end;

	if length(sfs_reply) = 0
	then do;
	     call collect_spy_data (SPY_AT_18, "RETURN");
               prompt = BREAK_PROMPT;
	     goto get_search_string;
	end;

	if string (xforum_meeting_info.flags) = "0"b
	then do;
	     sfs_old_current_comment = xforum_meeting_info.current;
	     xforum_meeting_info.flags.all = "1"b;
	end;
	else sfs_old_current_comment = 0;

	if xforum_meeting_info.flags.all
	then call ioa_ ("^/Searching all comments in this meeting for the text ^a,^/   this may take a while", sfs_reply);
	else call ioa_ ("^/Searching the currently selected comments for the text ^a,^/ this may take a while", sfs_reply);

	call xforum_help_line_$change ("0"b, "", "To abort search and leave current comments unchanged", "");

	call get_temp_segment_ ("xforum_validate_trans_spec", sfs_satisfies_search_ptr, sfs_code);
	if sfs_code ^= 0
	then call error (sfs_code, "Could not get temp segment to hold comment indicies that satisfiy text search.");

	sfs_satisfies_search_ptr -> set_array.number = 0;
	sfs_satisfies_search_ptr -> set_array.spec = sfs_reply;

	call xforum_get_selected_trans$first (xforum_meeting_info_ptr, forum_user_trans_ptr, sfs_code);
	do while (sfs_code ^= forum_error_table_$invalid_trans_idx);
	     if sfs_code = 0
	     then do;
		if index (forum_user_trans_ptr -> forum_user_trans.text, sfs_satisfies_search_ptr -> set_array.spec) ^= 0
		then do;
		     sfs_satisfies_search_ptr -> set_array.number = sfs_satisfies_search_ptr -> set_array.number + 1;
		     sfs_satisfies_search_ptr -> set_array.index (sfs_satisfies_search_ptr -> set_array.number) = forum_user_trans_ptr -> forum_user_trans.trans_no;
		end;
	     end;
	     call xforum_get_selected_trans$next (xforum_meeting_info_ptr, forum_user_trans_ptr, sfs_code);
	end;

	if sfs_satisfies_search_ptr -> set_array.number = 0
	then do;
	     call ioa_ ("^/No comments contained the text ^a", sfs_reply);
	     P_code = forum_error_table_$bad_trans_spec;
	     if sfs_old_current_comment ^= 0
	     then do;
		xforum_meeting_info.current = sfs_old_current_comment;
		string (xforum_meeting_info.flags) = "0"b;
	     end;
	end;
	else if sfs_satisfies_search_ptr -> set_array.number = 1
	then do;
	     xforum_meeting_info.current = sfs_satisfies_search_ptr -> set_array.index (1);
	     string (xforum_meeting_info.flags) = "0"b;
	end;
	else do;
	     string (xforum_meeting_info.flags) = "0"b;
	     xforum_meeting_info.flags.set = "1"b;
	     xforum_meeting_info.set_array_ptr -> set_array.number = sfs_satisfies_search_ptr -> set_array.number;
	     xforum_meeting_info.set_array_ptr -> set_array = sfs_satisfies_search_ptr -> set_array;
	end;

exit_search_for_string:
	call release_temp_segment_ ("xforum_validate_trans_spec", sfs_satisfies_search_ptr, (0));
	call xforum_help_line_$pop;

	return;

     end search_for_string;

set_specified: proc (ss_trans_spec);

/* PARAMETERS */

	dcl     ss_trans_spec	 char (*);

/* AUTOMATIC */

	dcl     ss_code		 fixed bin (35);
	dcl     ss_index		 fixed bin;
	dcl     ss_index_string	 char (10) varying;
	dcl     ss_trans_spec_temp	 char (500) varying;





	set_array.number = 0;
	set_array.spec = "";
	ss_trans_spec_temp = ltrim (rtrim (ss_trans_spec));
	do while (length (ss_trans_spec_temp) > 0);
	     ss_index_string = before (ss_trans_spec_temp, " ");
	     ss_trans_spec_temp = ltrim (after (ss_trans_spec_temp, " "));
	     ss_index = convert_to_number ((ss_index_string));
	     call xforum_trans_$read (ss_index, forum_user_trans_ptr, ss_code);
	     if ss_code = 0
	     then do;
		free forum_user_trans in (xforum_system_area);
		set_array.number = set_array.number + 1;
		set_array.index (set_array.number) = ss_index;
		if length (set_array.spec) + length (ss_index_string) + 1 <= SET_ARRAY_SPEC_LEN
		then do;
		     set_array.spec = set_array.spec || ss_index_string;
		     set_array.spec = set_array.spec || " ";
		end;
	     end;
	     else do;
		if ss_code = forum_error_table_$trans_deleted | ss_code = forum_error_table_$trans_reaped
		then call ioa_ ("Comment ^i has been deleted and will not be included in the set.", ss_index);
		else call ioa_ ("Comment ^i does not exist and will not be included in the set.", ss_index);
		call timer_manager_$sleep (3, "11"b);
	     end;
	end;

	if set_array.number = 0
	then do;
	     call ioa_ ("^/No comments were selected.");
	     P_code = forum_error_table_$bad_trans_spec;
	end;
	else
	     if set_array.number = 1
	then do;
	     string (xforum_meeting_info.flags) = "0"b;
	     xforum_meeting_info.current = set_array.index (1);
	end;
	else do;
	     string (xforum_meeting_info.flags) = "0"b;
	     xforum_meeting_info.flags.set = "1"b;
	     xforum_meeting_info.current = 0;
	end;

	return;

     end set_specified;

(size): convert_to_number: proc (ctn_str) returns (fixed bin);

/* PARAMETERS */

	dcl     ctn_str		 char (*);

/* AUTOMATIC */

	dcl     ctn_i		 fixed bin;

/* CONDITIONS */

	dcl     size		 condition;

	on size
	     begin;
		P_code = forum_error_table_$invalid_trans_idx;
		call report_error (P_code, "", ctn_str);
		goto exit_xforum_validate_trans_spec;
	     end;

	ctn_i = cv_dec_ (ctn_str);

	return (ctn_i);

     end convert_to_number;

report_error: proc (re_code, re_message, re_data);

	dcl     re_code		 fixed bin (35);
	dcl     re_message		 char (*);
	dcl     re_data		 char (*);

	call window_$clear_window (xforum_windows.bottom.iocb, (0));

	if re_code = forum_error_table_$invalid_trans_idx
	then call ioa_ ("Comment ^a does not exist.", re_data);
	else
	     if re_code = forum_error_table_$trans_deleted | re_code = forum_error_table_$trans_reaped
	then call ioa_ ("Comment ^a has been deleted.", re_data);
	else
	     if re_code = forum_error_table_$bad_trans_spec
	then call ioa_ ("^a is not a valid comment specifier", re_data);
	else
	     if re_code = 0
	then call ioa_ (re_message, re_data);
	else call com_err_$suppress_name (re_code, "", re_message, re_data);

	return;

     end report_error;

collect_spy_data: proc (csd_where, csd_response);

/* PARAMETERS */

	dcl     csd_where		 fixed bin;
	dcl     csd_response	 char (*);

	spy.count = spy.count + 1;
	spy.choices (count).at = csd_where;
	spy.choices (count).choice = csd_response;

	return;

     end collect_spy_data;

error: proc (e_code, e_reason);

/* PARAMETERS */

	dcl     e_code		 fixed bin (35);
	dcl     e_reason		 char (*);

	xvts_xforum_error_info.name = "xforum_validate_trans_spec_";
	xvts_xforum_error_info.entry = "";
	xvts_xforum_error_info.doing = "";
	xvts_xforum_error_info.code = e_code;
	xvts_xforum_error_info.reason = e_reason;

	call signal_ ("xforum_fatal_error", null (), addr (xvts_xforum_error_info), null ());

     end error;

     end xforum_validate_trans_spec_;

