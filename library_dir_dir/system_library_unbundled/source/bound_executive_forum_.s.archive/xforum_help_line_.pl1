/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(85-01-10,Davids), approve(86-02-04,MCR7350),
     audit(86-04-24,Gilcrease), install(86-04-24,MR12.0-1048):
     Changed the text for F2/Ef from "Top Menu" to "Return to Executive
     Forum menu"
     
     85-01-21 Davids: Modified so that the help line uses "ESC" for the
     escape key instead of "E".
     
     85-02-13 Davids: Modified so that the change and push entries take
     a F3_message argument, i.e.  the message associated with the F3 or
     ESCp key.  This allows specialized messages for that key.  Also
     changed the stack size used to store "pushed" help lines from 1 to
     10.
     
     85-02-14 Davids: Added the init entry to reset the index in the stack.
     
     85-02-19 Davids: Changed the declaration of flags from bit (8)
     unaligned to bit (8) aligned, except for ci_flags_ovly which must
     remain unaligned since its an array of bit (1)s.  Also added an
     rtrim around ci_F3_message so trailing spaces are not part of the
     help line.
     
     85-06-25 Davids: Changed the push_general_message_only entry to
     change_general_message_only.  This entry is called only by the
     emacs extension.  The pushs were not being poped and because of
     the structure of the extension it would be very difficult to add
     the pops.  In addition the code calling the extension just changes
     the current help line after the extension returns so the last push
     shouldn't be poped anyway.  It seemed like the simplest thing to
     do was to only do changes within the extension.
     
     85-06-26 Davids: Commented all variables and added header comments.
                                                   END HISTORY COMMENTS */


xforum_help_line_: proc;

/*
   BEGIN DESCRIPTION

   function
      This module manages the help line. There are entries for changing the
      help line and for redisplaying it. There is also a stack for maintaining
      the data that is used to create the help line and entries for pushing and
      poping the stack elements. A help line is made up of:
           o  A bit (8) string, 1 bit for each function key which indicates
              if an explaination of the function key should be displayed on
              the help line.
           o  A string containing the explaination for function key 3 since
              the meaning of function key 3 varies from menu to menu
           o  A string containing the explaination of the BREAK key
           o  A string containing a general information message
      The currently displayed help line is NOT on the stack. Whenever a help
      line is created the user's profile is queried to determine if he is
      using function keys or escape sequences. The appropriate labels are
      output on the help line. Since the user can change from function keys to
      escape sequences or escape sequences to function keys it is not possible
      to simply store the text string that makes up the help line in the stack
      and then redisplay that string. Ecah time the help line is displayed it
      must be built from scratch to allow for changes in the users
      function key/escape sequence usage.

   description of entry points:
      xforum_help_line_:
         input:
         output:
         It is an error to call the main entry point. The xforum_fatal_error
         condition will be signaled with an "internal programming error" error
         message.

      init:
         input:
         output:
         This entry sets the counter for the current top of the help line
         stack to 0.

      change:
         input:   bit (8) aligned     flags indicating what function keys
                                      meanings are to be displayed "1"b implies
                                      that the key will be displayed
                  char (*)            special text for the third function key
                  char (*)            special text for the BREAK key
                  char (*)            special general message not associated
                                      with any key
         output:
         This entry changes the current help line based on the input
         parameters. The old help line is not saved on the stack. The new help
         line is output via change_i.

      push:
         input:   bit (8) aligned     flags indicating what function keys
                                      meanings are to be displayed "1"b implies
                                      that the key will be displayed
                  char (*)            special text for the third function key
                  char (*)            special text for the BREAK key
                  char (*)            special general message not associated
                                      with any key
         output:
         This entry pushes the old set of flags, F3, BREAK and general messages
         onto the help line stack and creates a new help line from the input
         parameters. The new help line is output via change_i. An internal
         programming error is generated if the push overflows the stack.

      change_general_message-only:
         input:   char (*)            special general message not associated
                                      with any key
         output:
         This entry changes the general message displayed on the help line.
         The general message is not saved on the stack and the BREAK message
         and flags are not changed. The help line is redisplayed via a call
         to change_i.

      pop:
         input:
         output:
         This entry changes the help line to the last help line saved via a
         push. It also removes that help line from the help line stack. The
         help line is redisplayed via a call to change_i. If there are no help
         lines on the stack and internal programming error is generated.

      redisplay:
         input:
         output:
         This entry causes the help line to be redisplayed. It does this by
         calling the internal procedure change_i with the current values of the
         flags, F3_message, BREAK_message, and general_message. Note that
         beacuse the help line is actually rebuilt it will reflect the users
         current use of function keys or escape sequences.

   description of internal procedures:
      change_i: This procedure builds and displays the help line. The help line
      is initially set to "Press  ". The function key text associated with each
      function key that has its flag set is then concatinated onto the end of
      the help line. After all the function key text has been appended the
      BREAK message is appended. If after the BREAK message is appended the
      help line still only contains "Press  " it means that no function key or
      BREAK messages are to be on the help line. If that is the case the help
      line is set to "" and then the general message is appended. Once the help
      line is built it is output via window_display_. window_display_ is an
      undocumented entry point that takes a character array which is an exact
      overlay of the window and then makes the window match the overlay. A
      window_sync_ is done after the window_display_ so that the display takes
      place immediately instead of being buffered.

      error: Similar to all the other error procedures. It records in an
      internal static structure the details of an error and then signals the
      xforum_fatal_error condition.

   known bugs:

   notes:

   history:
      84-09-28 Davids: written

      84-10-01 Davids: Added the push_general_message_only entry. This is so
      that the emacs extension can push help line messages.

      84-11-06 Davids: Since this is an externally known subroutine it must
      end with a "_" so its name was changed.
   END DESCRIPTION
*/

/* EXTERNAL STATIC */

/* ENTRIES */

	dcl     signal_		 entry () options (variable);
	dcl     xforum_user_profile$get_use_function_keys entry () returns (bit (1));
	dcl     window_display_	 entry (ptr, (*) char (*), fixed bin (35));
	dcl     window_$sync	 entry (ptr, fixed bin (35));

/* CONDITIONS */

/* INTERNAL STATIC */

	dcl     (xhl_current_F3_message char (80) init (""),
						/* currently displayed special text for the third function key */
	        xhl_current_break_message char (80) init (""),
						/* currently displayed special text for the BREAK key */
	        xhl_current_general_message char (80) init (""),
						/* currently displayed special general */
						/* message not associated with any key */
	        xhl_current_flags	 bit (8) aligned init ("00000000"b),
						/* current set of flags controlling */
						/* what function keys are displayed */
						/* "1"b implies that the key will be displayed */
	        xhl_old_F3_message	 (10) char (80) init ("", "", "", "", "", "", "", "", "", ""),
						/* acts as stack for holding previous special text */
	        xhl_old_break_message	 (10) char (80) init ("", "", "", "", "", "", "", "", "", ""),
						/* acts as stack for holding previous special text */
	        xhl_old_general_message (10) char (80) init ("", "", "", "", "", "", "", "", "", ""),
						/* acts as stack for holding previous special text */
	        xhl_old_flags	 (10) bit (8) aligned init ("0"b, "0"b, "0"b, "0"b, "0"b, "0"b, "0"b,
				 "0"b, "0"b, "0"b),
						/* acts as stack for holding previous flags */
	        xhl_old_index	 fixed bin init (0)
						/* index in array of the top stack element */
	        )			 internal static;
	dcl     01 xhl_xforum_error_info like xforum_error_info internal static;
						/* used to record error infor to be output to the user */

/* CONSTANTS */

	dcl     xhl_MAX_INDEX	 fixed bin init (10) internal static options (constant);
						/* max size of the array for storing previous help line data */

/* BUILTINS */

	dcl     (
	        addr,
	        null,
	        rtrim
	        )			 builtin;

/* BASED */

/* INCLUDE FILES */
%page;
%include xforum_error_info;
%page;
%include xforum_windows;

	call error (0, "Internal programming error - xforum_help_line_$xforum_help_line_ called.");

init: entry;

	xhl_old_index = 0;

	return;

change: entry (c_flags, c_F3_message, c_break_message, c_general_message);

/* PARAMETERS */

	dcl     c_flags		 bit (8) aligned;	/* (input) flags indicating what function keys */
						/*         meanings are to be displayed */
						/*         "1"b implies that the key will be displayed */
	dcl     c_F3_message	 char (*);	/* (input) special text for the third function key */
	dcl     c_break_message	 char (*);	/* (input) special text for the BREAK key */
	dcl     c_general_message	 char (*);	/* (input) special general message not associated with any key */





	xhl_current_flags = c_flags;
	xhl_current_F3_message = c_F3_message;
	xhl_current_break_message = c_break_message;
	xhl_current_general_message = c_general_message;

	call change_i (xhl_current_flags, xhl_current_F3_message,
	     xhl_current_break_message, xhl_current_general_message);

	return;

push: entry (pu_flags, pu_F3_message, pu_break_message, pu_general_message);

/* PARAMETERS */

	dcl     pu_flags		 bit (8) aligned;	/* (input) flags indicating what function keys */
						/*         meanings are to be displayed */
						/*         "1"b implies that the key will be displayed */
	dcl     pu_F3_message	 char (*);	/* (input) special text for the third function key */
	dcl     pu_break_message	 char (*);	/* (input) special text for the BREAK key */
	dcl     pu_general_message	 char (*);	/* (input) special general message not associated with any key */





	xhl_old_index = xhl_old_index + 1;
	if xhl_old_index > xhl_MAX_INDEX
	then call error (0, "Internal programming error - help line stack overflow.");

	xhl_old_flags (xhl_old_index) = xhl_current_flags;
	xhl_old_F3_message (xhl_old_index) = xhl_current_F3_message;
	xhl_old_break_message (xhl_old_index) = xhl_current_break_message;
	xhl_old_general_message (xhl_old_index) = xhl_current_general_message;

	xhl_current_flags = pu_flags;
	xhl_current_F3_message = pu_F3_message;
	xhl_current_break_message = pu_break_message;
	xhl_current_general_message = pu_general_message;

	call change_i (xhl_current_flags, xhl_current_F3_message,
	     xhl_current_break_message, xhl_current_general_message);

	return;

change_general_message_only: entry (cgmo_general_message);

/* PARAMETERS */

	dcl     cgmo_general_message	 char (*);	/* (input) special general message not associated with any key */





	xhl_current_general_message = cgmo_general_message;

	call change_i (xhl_current_flags, xhl_current_F3_message,
	     xhl_current_break_message, xhl_current_general_message);

	return;

pop: entry;

	if xhl_old_index = 0
	then call error (0, "Internal programming error - help line stack underflow.");

	xhl_current_flags = xhl_old_flags (xhl_old_index);
	xhl_current_F3_message = xhl_old_F3_message (xhl_old_index);
	xhl_current_break_message = xhl_old_break_message (xhl_old_index);
	xhl_current_general_message = xhl_old_general_message (xhl_old_index);

	xhl_old_index = xhl_old_index - 1;

	call change_i (xhl_current_flags, xhl_current_F3_message,
	     xhl_current_break_message, xhl_current_general_message);

	return;

redisplay: entry;

	call change_i (xhl_current_flags, xhl_current_F3_message,
	     xhl_current_break_message, xhl_current_general_message);

	return;

change_i: proc (ci_flags, ci_F3_message, ci_break_message, ci_general_message);

/* PARAMETERS */

	dcl     ci_flags		 bit (8) aligned;	/* (input) flags indicating what function keys */
						/*         meanings are to be displayed */
						/*          "1"b implies that the key will be displayed */
	dcl     ci_F3_message	 char (*);	/* (input) special text for the third function key */
	dcl     ci_break_message	 char (*);	/* (input) special text for the BREAK key */
	dcl     ci_general_message	 char (*);	/* (input) special general message not associated with any key */

/* INTERNAL AUTOMATIC */

	dcl     ci_code		 fixed bin (35);	/* standard error code */
	dcl     ci_flags_ovly_ptr	 ptr;		/* pointer to ci_flags bit string */
	dcl     ci_i		 fixed bin;	/* loop index for checking each flag */
	dcl     ci_index		 fixed bin;	/* index into string array for the function key labels */
						/* 1 implies function keys with labels of Fn */
						/* 2 implies escape sequences with labels of ESCx */
						/* based on users current profile settings */
	dcl     ci_help_line	 char (80) varying; /* string containing the text of the help line */
	dcl     ci_window_image	 (1) char (xforum_windows.help_line.extent.width);
						/* text of the help line in format useable by window_display_ */

/* CONSTANTS */

	dcl     ci_TEXT		 (2, 8) char (37) varying init (
				 "F1:Help", "F2:Return to Executive Forum menu", "F3:", "F4:Exit Executive Forum",
				 "F5:Redisplay Screen", "F6:Previous Menu", "F7:Next Menu", "",
				 "ESC?:Help", "ESCf:Return to Executive Forum menu", "ESCp:",
				 "ESCq:Exit Executive Forum", "ESCr:Redisplay Screen", "ESCl:Previous Menu",
				 "ESCh:Next Menu", "")
				 internal static options (constant);
						/* strings for labeling the function keys and escape sequences */

/* BASED */

	dcl     ci_flags_ovly	 (8) bit (1) unaligned based (ci_flags_ovly_ptr);
						/* same as ci_flags but as an array */
						/* for easy reference to each bit */

	ci_flags_ovly_ptr = addr (ci_flags);

	if xforum_user_profile$get_use_function_keys ()
	then ci_index = 1;
	else ci_index = 2;

	ci_help_line = "Press";

	do ci_i = 1 to 8;
	     if ci_i ^= 3 & ci_flags_ovly (ci_i)
	     then ci_help_line = ci_help_line || "  " || ci_TEXT (ci_index, ci_i);
	     else
		if ci_i = 3 & ci_F3_message ^= ""
	     then ci_help_line = ci_help_line || "  " || ci_TEXT (ci_index, 3) || rtrim (ci_F3_message);
	end;

	if ci_break_message ^= ""
	then ci_help_line = ci_help_line || "  BREAK:" || ci_break_message;

	if rtrim (ci_help_line) = "Press"
	then ci_help_line = "";

	if ci_general_message ^= ""
	then ci_help_line = ci_help_line || ci_general_message;


	ci_window_image (1) = ci_help_line;
	call window_display_ (xforum_windows.help_line.iocb, ci_window_image, ci_code);
	if ci_code ^= 0
	then call error (ci_code, "Cannot update the help line");
	call window_$sync (xforum_windows.help_line.iocb, ci_code);
	if ci_code ^= 0
	then call error (ci_code, "Cannot update the help line");

	return;

     end change_i;

error: proc (e_code, e_message);

/* PARAMETERS */

	dcl     e_code		 fixed bin (35);	/* (input) error code associated with the error */
	dcl     e_message		 char (*);	/* (input) message to be output to user */





	xhl_xforum_error_info.name = "xforum_help_line_";
	xhl_xforum_error_info.entry = "";
	xhl_xforum_error_info.doing = "";
	xhl_xforum_error_info.code = e_code;
	xhl_xforum_error_info.reason = e_message;

	call signal_ ("xforum_fatal_error", null (), addr (xhl_xforum_error_info), null ());

     end error;

     end xforum_help_line_;
