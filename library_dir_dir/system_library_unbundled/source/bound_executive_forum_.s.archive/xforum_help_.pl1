/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(85-01-08,Davids), approve(86-02-04,MCR7350),
     audit(86-04-24,Gilcrease), install(86-04-24,MR12.0-1048):
     Removed the function_key_data_ptr and the
     handle_interactive_messages arguments from the calling sequence of
     the get_help entry.  The function_key_data_ptr is obtained from
     xforum_user_profile.  The value of handle_interactive_messages was
     just passed to other routines and goes away.  Changed calling
     sequence of xforum_window_mgr$menu_get_choice to remove the
     arguments function_key_data_ptr and handle_interactive_messages.
     Added calls to xforum_user_profile$set_function_key_data_ptr both
     before the call to menu_get_choice to set the special
     function_key_data_ptr and after to reset it.  Also changed calling
     sequence of xforum_dyn_menu_$get_choice to remove the
     function_key_data_ptr.
     
     85-01-10 Davids: Modified call to
     xforum_user_profile$set_function_key_data_ptr so that it returns a
     bit (1) value.  The value is not used since its defined to be "1"b
     but it is returned.
     
     85-02-13 Davids: Changed calling sequence of xforum_help_line_$change
     to include the new F3_message argument.
     
     85-02-14 Davids: Removed the general_help_menu internal proc and
     replaced it with a call to xforum_help_menus$general_help_topics.
     Modified the display entry so that if the menu name is "Topics"
     It will not ouput the line saying that ?? can be used to get a menu
     of general help topics and if ?? is typed it will beep. The code to
     created a new function_key_data structure was left intact so that
     the checks for input Fkey < highest would not have to be changed.
     
     85-06-25 Davids: Added declarations for all the variables and updated
     the header comments. Also removed the menu_dcls include file which was
     not being used.
  2) change(86-01-21,LJAdams), approve(86-01-21,MCR7327),
     audit(86-04-24,Gilcrease), install(86-04-24,MR12.0-1048):
     Changed Vhelp_args_1 to new version Vhelp_args_2.  Made hard coded help
     search directories a cds segment.  Added ssu_ (create/destroy) so
     subsystem calls to help_ work properly.
  3) change(86-05-09,LJAdams), approve(86-05-14,MCR7416),
     audit(86-05-19,Gilcrease), install(86-06-12,MR12.0-1074):
     Added err_$no_ssu entry point to avoid trying to destroy ssu invocation
     before it had actually been invoked.
  4) change(87-08-20,LJAdams), approve(87-09-03,MCR7766),
     audit(88-08-14,GDixon), install(88-09-13,MR12.2-1109):
     Changed Vhelp_args_2 to Vhelp_args_3.  Initialize xh_help_args_ptr to
     null and use it with help_$init rather then Phelp_args.  Removed the
     cleanup handler (xforum will handle cleanup).
                                                   END HISTORY COMMENTS */


xforum_help_: proc;

/*
   BEGIN DESCRIPTION

   function: 
      This routine contains the entry points used by xforum to display
      help to the user.

   description of entry points:
      xforum_help_:
         input:
         output:
         It is an error to call the main entry point. The xforum_fatal_error
         condition is signaled with an "internal programming error" error
         message.

      init:
         input:
         output:
         This entry is used to initialize the help_ system. The help_args
         structure is allocated by calling help_$init and the pointer saved in 
         internal static. The values in the help_args structure are also set.
         The xforum info directory and help file suffix are set in this entry.
         The flags in this structure also control when help_ will ask the user
         if he wants more help. The flag is set so that the user always gets
         all the help without being asked if he wanst more help. Hew can of
         course abort the help at the video system more prompt.

      get_help:
         input:   ptr                 pointer to menu structure for displayed
                                      menu
                  char (*)            name of the menu
                  (*) char (*) var    the choices that are on the menu in the
                                      same order as they appear on the menu
                  ptr                 pointer to the spy structure
                  ptr                 pointer to the xforum area for allocating
                                      stuff
         output:
         This entry prompts the user to enter the menu option or function key
         that he wants help with. The response is obtained via a call
         to xforum_window_mgr$menu_get_choice. The response is interpreted and
         a call to display_internal with the appropriate info file name and
         section within the info file is made. Help for all menu options is
         contained in the same info seg. The section names are obtained by
         taking the text of the menu option and changing all the spaces to
         underscore characters. Help for all the function keys is also in a
         single info seg. A function key response may have 2 different function
         key numbers. The first set 1-8 correspond to either function keys
         or the escape sequences ESCx where x is a lower case letter (or ?).
         The second set 9-15 correspond to ESCx where x is an upper case
         letter. Note that the second set is valid only if the user is using
         escape sequences. This means that a function key user cannot press F10
         and get a help message. There is no upper case equivalent for the
         first escape sequence ESC?. Before making the call to get the user's
         response this entry creates a special version of the function key data
         structure. This special version has an extra function key character
         sequence, i.e. ??. This is the highest function key sequence and is
         used so that the user can request the general help topics menu without
         having to do something special - like pressing the RETURN key. The
         space used to hold this special function key data is allocated in the
         xforum_system_free_area and is freed right before the entry returns.
         A cleanup handler is set up to be sure that the space is freed in case
         a cleanup is done. The user's response is recorded in the spyt
         structure. A quit handler is set up so that the user can exit this
         help mode by pressing QUIT. This fact will also be recorded in the spy
         structure. After the help is displayed the entry returns to the
         caller. The bottom window is not cleared so that the user can continue
         to read it.

      display:
         input:   char (*)            name of info seg
                  char (*)            section within info seg
         output:
         Given the name of an info segment and a section within that info
         segment this entry calls the internal proc display_internal to display
         the help associated with that info segment and section.

      term:
         input:
         output:
         This entry is used to terminate the help system. help_$term is
         called to free the help_args structure and do other internal things.
 
   description of internal procs:
      display_internal: Given the name of an info segment and the section
      within the info segment this will call help_ to display the associated
      information. The segment and section names are passed to help_ by loading
      the value and info_name elements of the help_args structure. A reset_more
      is done after the display.

      collect_spy_data: Similar to all the other collect_spy_data procedures.
      See the xforum module. Note that this procedure is duplicated so as to
      save the expense of an external call for a commonly executed, very short
      program, whose output is used only durning development or special site
      exposure.

      error: Similar to all the other error procedures. It records in an
      internal static structure the details of an error and then signals the
      xforum_fatal_error condition.

   known bugs:

   notes:

   history:
      84-01-?? Barker: written, based on xmail_display_help.

      84-08-16 Davids: converted to standard format. Replaced the get_choice
      entry, which required that the user enter the option he wants help with 
      in the form of a prompt response, with the get_help entry which takes a
      standard menu input (or ?? for general help). Also added the code for
      displaying the general help menu. This module now also controls the
      output of the help file. Before it just returned the users response to
      xforum.

      84-08-17 Davids: Added code to general_help_menu so that it queries the
      user after displaying help. The user can answer yes and get the general
      help menu again or answer no and return to the top menu.

      84-09-03 Davids: Removed reference to gh_code. It was never being set
      but was being tested - this obviously caused problems. It was not needed
      so it was deleted.

      84-09-17 Davids: Added code for processing upper case escapse sequences.

      84-09-28 Davids: Replaced call to xforum_status_$update_usage and
      redisplay_usage with a call to xforum_help_line$change.

      84-10-11 Davids: Changed display_internal to call com_err_$supress_name 
      instead of error if an error is returned by help_. A bad info file should
      not cause xforum to die.

      84-10-17 Davids: Added code to the get_help entry so that function
      key choices 9 through 15 are used only if the user is using escape
      sequences. "function keys" 9 - 15 are really upper case escape sequences.
      Also the prompt now indicates either function keys or escape sequences
      depending on what the user is using.

      84-10-18 Davids: Added code so that the title "General Help Topics"
      appears when the general help menu is displayed. The title is overwritten
      on the last line of the main menu so that it appears padded with dashes.

      84-11-06 Davids: Changed references to xforum_help_line to
      xforum_help_line_.

      84-11-13 Davids: Auditing changes: Removed unnecessary rtrims from the
      call to collect_spy_data in general_help_menu (the ltrims were left).
   END DESCRIPTION
*/

/* PARAMETERS */

/* EXTERNAL STATIC */

/* ENTRIES */

	dcl     com_err_$suppress_name entry () options (variable);
	dcl     ioa_		 entry () options (variable);
	dcl     iox_$control	 entry (ptr, char (*), ptr, fixed bin (35));
	dcl     signal_		 entry () options (variable);
	dcl     window_$bell	 entry (ptr, fixed bin (35));
	dcl     window_$clear_window	 entry (ptr, fixed bin (35));
	dcl     xforum_help_menus$general_help_topics entry (ptr, ptr, char (*));
	dcl     xforum_user_profile$get_function_key_data_ptr entry () returns (ptr);
	dcl     xforum_user_profile$get_use_function_keys entry () returns (bit (1));
	dcl     xforum_user_profile$set_function_key_data_ptr entry (ptr) returns (bit (1));
	dcl     xforum_window_mgr$check_window_status entry options (variable);
	dcl     xforum_window_mgr$menu_get_choice entry (ptr, bit (1) aligned, fixed bin);

/* CONDITIONS */

	dcl     (
	        cleanup,
	        quit
	        )			 condition;

/* INTERNAL STATIC */

	dcl     xh_help_args_ptr	 ptr internal static init(null);
						/* pointer to help_args structure created by call to help_$init */
	dcl     01 xh_xforum_error_info like xforum_error_info internal static;
						/* used to record error info to be output to user */

/* CONSTANTS */

	dcl     (
	        xh_SEARCH_LIST	 char (4) init ("info"), /* default search rules */
	        xh_HELP_SUFFIX	 char (10) init ("info"), /* segments must have a suffix of info */
	        xh_ME_CHAR		 char (12) init ("xforum_help_")
	        )			 int static options (constant);

/* BUILTINS */

	dcl     (
	        addr,
	        char,
	        dim,
	        ltrim,
	        null,
	        rtrim,
	        translate
	        )			 builtin;

/* BASED */

/* INCLUDES */
%page;
%include function_key_data;
%page;
%include help_args_;
%page;
%include xforum_error_info;
%page;
%include xforum_spy;
%page;
%include xforum_windows;

	call error (0, "Internal programming error - xforum_help_$xforum_help_ called.");

init: entry;

/* AUTOMATIC */

%include xforum_data_;

	dcl     i_code		 fixed bin (35);	/* standard error code			*/
	
          Phelp_args = null;
          xh_help_args_ptr = null;

	call help_$init (xh_ME_CHAR, xh_SEARCH_LIST, "", Vhelp_args_3, xh_help_args_ptr, i_code);
	if i_code ^= 0
	then call error_no_ssu (i_code, "Could not initiate help_");

          Phelp_args = xh_help_args_ptr;           
	help_args.Nsearch_dirs = dim(xforum_HELP_DIRS.path, 1);
	help_args.search_dirs = xforum_HELP_DIRS.path;
	help_args.Sctl.all = "1"b;			/* No questions asked */
	help_args.Npaths = 1;
	help_args.path (1).S.pn_ctl_arg = "0"b;
	help_args.path (1).S.info_name_not_starname = "0"b;

	return;

get_help: entry (gh_menu_ptr, gh_menu_name, gh_menu_choices, gh_spy_ptr, gh_xforum_system_area_ptr);

/* PARAMETERS */

	dcl     gh_menu_ptr		 ptr;		/* (input) pointer to menu structure for displayed menu */
	dcl     gh_menu_name	 char (*);	/* (input) name of the menu */
	dcl     gh_menu_choices	 (*) char (*) var;	/* (input) the choices that are on the menu - */
						/*         in the same order as they appear on the menu */
	dcl     gh_spy_ptr		 ptr;		/* (input) pointer to the spy structure */
	dcl     gh_xforum_system_area_ptr ptr;		/* (input) pointer to the xforum area for allocating stuff */

/* INTERNAL AUTOMATIC */

	dcl     gh_fkey_flag	 bit (1) aligned;	/* "1"b implies user wants help with a function key */
	dcl     gh_choice		 fixed bin;	/* indicates choice or fkey user wants help with */
	dcl     gh_highest		 fixed bin;	/* number of function keys in the */
						/* special function key data structure */
	dcl     gh_special_fkey_data_ptr ptr;		/* pointer to the special function key data structure */
	dcl     gh_special_fkey_data_sequence_seq_len fixed bin; /* total number of chars in */
						/* the special function key data structure */
	dcl     gh_special_fkey_seqs_ptr ptr;		/* pointer to the string containing */
						/* the special function key chars */
	dcl     gh_unusedb1		 bit (1);		/* unused output from procedure call */
	dcl     gh_using_esc_seq	 bit (1);		/* "1" imples that the user is using */
						/* escape sequences and not function keys */

/* BASED */

	dcl     gh_special_fkey_seqs	 char (gh_special_fkey_data_sequence_seq_len) based (gh_special_fkey_seqs_ptr);
						/* place to store the special function key characters */

	gh_special_fkey_data_ptr = null ();
	gh_special_fkey_seqs_ptr = null ();
	function_key_data_ptr = xforum_user_profile$get_function_key_data_ptr ();
	spy_ptr = gh_spy_ptr;

	on cleanup
	     begin;
		if gh_special_fkey_data_ptr ^= null ()
		then free gh_special_fkey_data_ptr -> function_key_data.sequence.seq_ptr -> gh_special_fkey_seqs;

		if gh_special_fkey_seqs_ptr ^= null ()
		then free gh_special_fkey_data_ptr -> function_key_data;
	     end;

	on quit
	     begin;
		call xforum_window_mgr$check_window_status;
		call window_$clear_window (xforum_windows.bottom.iocb, (0));
		call collect_spy_data (SPY_AT_2, "QUIT");
		gh_unusedb1 = xforum_user_profile$set_function_key_data_ptr (function_key_data_ptr);
		goto exit_get_help;
	     end;

	gh_using_esc_seq = ^xforum_user_profile$get_use_function_keys ();

	call window_$clear_window (xforum_windows.bottom.iocb, (0));
	if gh_using_esc_seq
	then call ioa_ ("Press the option or type the escape sequence for which you want help");
	else call ioa_ ("Press the option or function key for which you want help");
	if gh_menu_name ^= "Topics"
	then call ioa_ ("   (or type ?? for a menu of general help topics):");

	function_key_data_highest = function_key_data_ptr -> function_key_data.highest + 1;
	gh_highest = function_key_data_highest;
	allocate function_key_data set (gh_special_fkey_data_ptr);
	gh_special_fkey_data_ptr -> function_key_data.highest = gh_highest - 1;
	gh_special_fkey_data_ptr -> function_key_data = function_key_data_ptr -> function_key_data;
	gh_special_fkey_data_ptr -> function_key_data.highest = gh_highest;

	gh_special_fkey_data_ptr -> function_key_data.sequence.seq_len = gh_special_fkey_data_ptr -> function_key_data.sequence.seq_len + 2;
	gh_special_fkey_data_sequence_seq_len = gh_special_fkey_data_ptr -> function_key_data.sequence.seq_len;
	allocate gh_special_fkey_seqs;

	gh_special_fkey_seqs = function_key_seqs || "??";
	gh_special_fkey_data_ptr -> function_key_data.function_keys (gh_highest, KEY_PLAIN).sequence_index = gh_special_fkey_data_sequence_seq_len - 1;
	gh_special_fkey_data_ptr -> function_key_data.function_keys.sequence_length = 2;
	gh_special_fkey_data_ptr -> function_key_data.sequence.seq_ptr = gh_special_fkey_seqs_ptr;

	gh_unusedb1 = xforum_user_profile$set_function_key_data_ptr (gh_special_fkey_data_ptr);
	call xforum_window_mgr$menu_get_choice (gh_menu_ptr, gh_fkey_flag, gh_choice);
	gh_unusedb1 = xforum_user_profile$set_function_key_data_ptr (function_key_data_ptr);

	call window_$clear_window (xforum_windows.bottom.iocb, (0));

	if gh_fkey_flag
	then do;
	     if gh_choice < gh_highest
	     then call collect_spy_data (SPY_AT_2, "F" || rtrim (ltrim (char (gh_choice))));
	     else
		if gh_menu_name ^= "Topics"
	     then call collect_spy_data (SPY_AT_2, "general help");
	end;
	else call collect_spy_data (SPY_AT_2, rtrim (ltrim (char (gh_choice))));

	if gh_fkey_flag
	then do;
	     if gh_choice = gh_highest
	     then do;
		if gh_menu_name ^= "Topics"
		then call xforum_help_menus$general_help_topics (spy_ptr, gh_xforum_system_area_ptr, gh_menu_name);
		else call window_$bell (xforum_windows.bottom.iocb, (0));
	     end;
	     else
		if gh_choice = 1
	     then call display_internal ("xforum_function_keys", "F1");
	     else
		if gh_choice = 2 | (gh_choice = 9 & gh_using_esc_seq)
	     then call display_internal ("xforum_function_keys", "F2");
	     else
		if gh_choice = 3 | (gh_choice = 10 & gh_using_esc_seq)
	     then call display_internal ("xforum_function_keys", "F3");
	     else
		if gh_choice = 4 | (gh_choice = 11 & gh_using_esc_seq)
	     then call display_internal ("xforum_function_keys", "F4");
	     else
		if gh_choice = 5 | (gh_choice = 12 & gh_using_esc_seq)
	     then call display_internal ("xforum_function_keys", "F5");
	     else
		if gh_choice = 6 | (gh_choice = 13 & gh_using_esc_seq)
	     then call display_internal ("xforum_function_keys", "F6");
	     else
		if gh_choice = 7 | (gh_choice = 14 & gh_using_esc_seq)
	     then call display_internal ("xforum_function_keys", "F7");
	     else
		if gh_choice = 8 | (gh_choice = 15 & gh_using_esc_seq)
	     then call display_internal ("xforum_function_keys", "F8");
	     else call ioa_ ("Function key F^d has no function within Executive Forum", gh_choice);
	end;
	else call display_internal ("xforum_menu_option", translate (gh_menu_choices (gh_choice), "_", " "));

exit_get_help:

	if gh_special_fkey_data_ptr ^= null ()
	then free gh_special_fkey_data_ptr -> function_key_data.sequence.seq_ptr -> gh_special_fkey_seqs;

	if gh_special_fkey_seqs_ptr ^= null ()
	then free gh_special_fkey_data_ptr -> function_key_data;

	return;

display: entry (d_seg_name, d_info_name);

/* PARAMETERS */

	dcl     d_seg_name		 char (*);	/* (input) name of info seg */
	dcl     d_info_name		 char (*);	/* (input) section within info seg */





	call display_internal (d_seg_name, d_info_name);

	return;

term: entry;

          call help_$term ("xforum", xh_help_args_ptr, (0));

	return;

display_internal: proc (di_seg_name, di_info_name);

/* PARAMETERS */

	dcl     di_seg_name		 char (*);	/* (input) name of info seg */
	dcl     di_info_name	 char (*);	/* (input) section within info seg */

/* AUTOMATIC */

	dcl     di_code		 fixed bin (35);	/* (standard error code */





	call window_$clear_window (xforum_windows.bottom.iocb, (0));

	Phelp_args = xh_help_args_ptr;		/* recover it */

	help_args.path (1).value = di_seg_name;
	help_args.path (1).info_name = di_info_name;

	call help_ (xh_ME_CHAR, Phelp_args, xh_HELP_SUFFIX, (0), di_code);
	if di_code ^= 0
	then call com_err_$suppress_name (di_code, "Could not display the help text");

	call iox_$control (xforum_windows.bottom.iocb, "reset_more", null, (0));

	return;

     end display_internal;

collect_spy_data: proc (csd_where, csd_response);

	dcl     csd_where		 fixed bin;	/* (input) location response was collected */
	dcl     csd_response	 char (*);	/* (input) user's response */





	spy.count = spy.count + 1;
	spy.choices (count).at = csd_where;
	spy.choices (count).choice = csd_response;

	return;

     end collect_spy_data;

error: proc (e_code, e_reason);

/* PARAMETERS */

	dcl     e_code		 fixed bin (35);	/* (input) error code associated with the error */
	dcl     e_reason		 char (*);	/* (input) message to be output to user */


          call help_$term ("xforum", Phelp_args, (0));

error_no_ssu: entry (e_code, e_reason);
	
	xh_xforum_error_info.name = xh_ME_CHAR;
	xh_xforum_error_info.entry = "";
	xh_xforum_error_info.doing = "";
	xh_xforum_error_info.code = e_code;
	xh_xforum_error_info.reason = e_reason;

	call signal_ ("xforum_fatal_error", null (), addr (xh_xforum_error_info), null ());

     end error;

     end xforum_help_;
