/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(85-02-18,Davids), approve(86-02-04,MCR7350),
     audit(86-04-24,Gilcrease), install(86-04-24,MR12.0-1048):
     Modified the get routine so that the profile exists case is part
     of the if-then-else statement.  The only thing not part of it is
     the original call to value_ and the calls to
     set_use_function_key_i.  Removed the label exit_get and the two
     gotos to it for the cases of no value segment and no xforum
     profile.  The gotos were skiping the call to
     set_use_function_key_i and that cased all subsequent calls to get
     the function_key_data_ptr to return null - not good.
     
     85-04-15 Davids: Added code in the get entry to test the value of
     the new_features_menu_version and call the warn_user_of_changes
     routine to warn the users of changes, and to update the value in
     the structure and update the version in the value seg so that
     warning is not output again.  Also changed the init_user_profile
     routine to set the value of the new_features_menu_version from
     "NONE " to "1.0-2.0 " and the convert_version routine to
     automatically warn the the user when converting a 1.0 or 1.1
     version profile.  It will also update the value.  Note that for
     future versions a test may have to be made since it will be
     possible to have a new version of the profile without having user
     visable changes.  Finially added the warn_user_of_changes routine
     which just outputs the warning message.
     
     85-05-30 Davids: Changed the make_value_seg procedure so that it
     creates the default value seg as a permanent value seg (second
     argument to value_$init_seg = 0) instead of a perprocess value seg
     (second arg = 1).  A perprocess default value seg was causing
     value_ to take a not_in_read_bracket condition.
  2) change(86-02-20,LJAdams), approve(86-02-20,MCR7350),
     audit(86-04-24,Gilcrease), install(86-04-24,MR12.0-1048):
     Changed message displayed when profile has been damaged or is inconsistent
     to be less threatening.
  3) change(87-04-06,LJAdams), approve(87-04-22,MCR7684),
     audit(87-07-27,Blair), install(87-08-06,MR12.1-1065):
     Added entry points set_user_fk_value and get_user_fk_value to set/get the
     option that the user has requested; i.e., use function keys or use escape
     keys.  Changed version to 2.1.
  4) change(87-11-04,LJAdams), approve(87-11-10,MCR7800),
     audit(87-12-01,Gilcrease), install(87-12-07,MR12.2-1008):
     Suppress error messages for missing value segment or missing
     xforum_profile._.  The value segment/xforum_profile._ will be silently
     rebuilt and default values will be applied.
                                                   END HISTORY COMMENTS */


xforum_user_profile: proc;

/*
   BEGIN DESCRIPTION

   function:
      This module maintains the user's xforum profile.

   description of entry points:
      get: This entry is used get a copy of the user's profile from the
      value segment and save it in an internal static structure. If the
      profile cannot be found it is assumed that the user has never used
      xforum before. An output flag is set to true and the profile is
      initialized and stored in the profile. This entry will also call
      convert_version to update any profiles that are not the current version.

      update_profile: This entry is used to force the internal static profile
      to be stored in the user's value segment. Note that changing the static
      structure via a set entry WILL NOT cause the value segment copy to be
      updated.

      display_profile: This entry displays the internal static copy of the
      profile on user_io. The contents of the static copy must have been
      initialized via a call to get. This is a debugging entry.

      delete_profile: This entry deletes the user's xforum profile from the
      user's profile segment. It is a debugging entry.

      set_handle_interactive_messages: Sets the static flag to the input value.
      Always returns "1"b

      get_handle_interactive_messages: Returns the static flag.

      set_multics_mode: Sets the static flag to the input value. Always returns
      "1"b

      get_multics_mode: Returns the static flag.

      set_menu_always: Sets the static flag to the input value. Always returns
      "1"b

      get_menu_always: Returns the static flag.

      set_read_comments_by_subject: Sets the static flag to the input
      value. Always returns "1"b

      get_read_comments_by_subject: Returns the static flag.

      set_use_function_keys: Sets the static flag to the input value. Returns
      "1"b if the set was successful, i.e. the user has enough function keys or
      "0"b if the user cannot use function keys.

      get_use_function_keys: Returns the static flag.

      set_remove_menu_while_editing: Sets the static flag to the input value.
      Always returns "1"b

      get_remove_menu_while_editing: Returns the static flag.

      set_function_key_data_ptr: Sets the pointer to the function_key_data
      structure. This is used only in those cases where the function keys are
      not the normal terminal keys or the standard escase sequences. Always
      returns "1"b

      get_function_key_data_ptr: Returns a pointer to the function_key_data
      structure.

      set_new_features_menu_version: Sets the value of the new new features
      menu version. Always returns "1"b

      get_new_features_menu_version: Returns the value of the new features menu
      version.

   description of internal procedures:
      init_user_profile: this procedure loads the internal static copy of
      the user's profile and then writes that structure into the user's
      profile segment. The xforum profile has a key of "xforum_user_profile._".

      make_value_seg: this procedure creates a segment named <person_id>.value
      in the users home dir. It also inits that segment so that its a permanent
      value segment. This procedure is called if its determined that the user
      does not already have a permanent value segment. If the value segment
      is created but cannot be initaialized it is deleted.

      convert_version: this procedure is used to convert an xforum profile
      with an old version to the new version. If the version of the old xforum
      profile is not recognized then a new profile is written with the lastest
      version and default values. A warning message telling the user that his
      profile is being re-initialized because of damage is output.

      set_use_function_keys_i: This procedure actually sets the value of the
      profile switch. Before the switch is set to allow function keys to be
      used a check is made to be sure that they can be used. If they cannot
      be used and the user requested them a warning is issued. This procedure
      also set the value of the function_key_data_ptr within the profile.
      If escape sequences are to be used it sets the value from an internal
      static pointer which was set by a call to xforum_default_fkeys_. If the
      static pointer is null the call to default_fkeys is made first.

      can_use_function_keys: This procedure determines if the user can use
      function keys. It is based on the terminal type and the state of the
      profile multics mode flag. If the flag is set the terminal must have
      at least 8 function keys. If the flag is not set the user must have at
      least 7 function keys. This procedure sets the value of an internal
      static pointer which points to the function_key_data structure for the
      terminal. If this pointer is non-null when the procedure is entered
      the function_key_data structure is freed. This is done because it is
      possible that the user changed terminals.

      update_profile_i: this procedure deletes the old profile from the value
      segment and stores the new profile in the value segment. The error code
      error_table_$oldnamerr returned from the delete operation is ignored.
      Any other error either from the delete operation or the store operation
      will cause an xforum fatal error.

      error: this procedure is used to signal the xforum_fatal_error condition.
      This is called only in cases where system routines return unexpected
      error codes.

   known bugs:

   notes:
      84-10-23 Davids: Commented out the call to set_use_function_keys_i in
      the get entry to prevent the "not enough function keys must use escape
      sequences" message from being printed at that point. A call to the
      set_use_function_keys entry will be made from the xforum module to set
      the function key usage. This is needed so that the message is not output
      if the user included the -esc control arg when he invoked xforum. When
      the escape_sequence control args go away this code should be executed.

   history:
      84-08-14 Davids: Written

      84-08-29 Davids: Added the display_profile and delete_profile entries.
      These are for debuging purposes only.

      84-09-25 Davids: Changed the name of the element in the value segment
      from xforum_user_profile to xforum_user_profile._.

      84-09-28 Davids: Added the set and get entry points for
      handle_interactive_messages, multics_mode, menu_always,
      read_comments_by_subject_chain, and use_function_keys. Changed the names
      of the profile elements allow_multics_mode and 
      use_function_keys_if_possible to just multics_mode and use_function_keys.

      84-10-01 Davids: Added the function_key_data_ptr to the profile and
      changed the version from 1.0 to 1.1. Added the internal procs
      set_use_function_keys_i and can_use_function_keys. Modified get so that
      it sets the function_key_data_ptr in the profile. Modified
      convert_version to handle the conversion from 1.0 to 1.1.

      84-10-23 Davids: Changed get entry point so that the call to
      set_use_function_keys_i is based solely on the value of
      xup_user_profile.use_function_keys instead of on that valuef and the
      value of xup_user_profile.multics_mode. Commented out the call to
      set_use_function_keys_i in the get entry to prevent the "not enough
      function keys must use escape sequences" message from being printed at
      that point. A call to the set_use_function_keys entry will be made from
      the xforum module to set the function key usage. This is needed so that
      the message is not output if the user included the -esc control arg when
      he invoked xforum. When the escape_sequence control args go away this
      code should be executed.

      84-11-08 Davids: Audit changes: 1) Corrected some message text typos in
      the convert_version procedure. 2) Created the xup_USER_PROFILE_VERSION_1
      constant. 3) Combined three separate if in can_use_function_keys which
      determine if the terminal has enough function keys into a sequence of
      if-then-else.

      84-12-13 Davids: Added the make_value_segment procedure. Also added
      code to the get entry so that if the error returned by value_$get_data
      is noentry the make_value_segment procedure is called. This takes care
      of the case where the user does not already have a value segment.
   
      85-01-08 Davids: Added the set_function_key_data_ptr. This was needed so
      that the xforum_help_$get_help routine could change the function keys to
      make ?? a function key. Also added the element remove_menu_while_editing
      to the profile and the entry points (set get)_remove_menu_while_editing.
      It was not necessary to create a new profile version since the element
      has a default value of "0"b and it replaces a bit in a MBZ field.

      85-01-09 Davids: Changed the (get set)_read_comments_by_subject_chain
      to just read_comments_by_subject. The long name was screwing things up.

      85-01-10 Davids: Added the element new_features_menu_version to the
      profile, updated the profile version to 2.0, modified the convert_version
      routine to convert version 1 and version 1.1 profiles to 2.0 and the
      init_user_profile routine to create a 2.0 profile. The default value of
      new_features_menu_version element is "NONE    ". Also added entry points
      to set and get the value. Added the entry update_profile. This was done
      becuase it seem to expensive to update the profile in the value segment
      after every call to a set entry. The internal routine update_profile_i
      was also created and the routines init_user_profile, and convert_version
      were modified to use it instead of call value_ entries directly. All set
      entries now return a bit (1) flag. This flag indicates if the set was
      successful. All entries except set_use_function_keys always return "1"b.
      There are cases when the user cannot use function keys, i.e. a terminal
      which only has 4 function keys, so set_use_function_keys can return
      either a "1"b or a "0"b. Also removed the comment that was around the
      call to set_use_function_keys_i in the get entry. The comment was there
      because the call was also in xforum to handle the -esc control arg and
      having in the get routine would cause the not enough function keys
      warning to be output twice (if it would be output at all). Since the arg
      is now obsolete it should be done here. If the warning comes out twice
      so be it.

      85-01-15 Davids: Added code to make_value_segment to delete the just
      created value segment if it could not be initialized.
   END DESCRIPTION
*/

/* PARAMETERS */

/* look under individual entry points and procedures */

/* EXTERNAL STATIC */

	dcl     error_table_$oldnamerr fixed bin (35) ext static;
	dcl     error_table_$noentry	 fixed bin (35) ext static;
	dcl     iox_$user_io	 ptr ext static;

/* ENTRIES */

	dcl     com_err_		 entry () options (variable);
	dcl     delete_$ptr		 entry (ptr, bit (36) aligned, char (*), fixed bin (35));
	dcl     hcs_$make_seg	 entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
	dcl     ioa_		 entry () options (variable);
	dcl     iox_$control	 entry (ptr, char (*), ptr, fixed bin (35));
	dcl     signal_		 entry () options (variable);
	dcl     timer_manager_$sleep	 entry (fixed bin (71), bit (2));
	dcl     ttt_info_$function_key_data entry (char (*), ptr, ptr, fixed bin (35));
	dcl     user_info_		 entry (char (*), char (*), char (*));
	dcl     user_info_$homedir	 entry (char (*));
	dcl     value_$delete_data	 entry (ptr, bit (36) aligned, char (*), fixed bin (35));
	dcl     value_$get_data	 entry (ptr, bit (36) aligned, char (*), ptr, ptr, fixed bin (18), fixed bin (35));
	dcl     value_$init_seg	 entry (ptr, fixed bin, ptr, fixed bin (19), fixed bin (35));
	dcl     value_$set_data	 entry (ptr, bit (36) aligned, char (*), ptr, fixed bin (18), ptr, ptr, fixed bin (18), fixed bin (35));
	dcl     xforum_default_fkeys_	 entry () returns (ptr);

/* CONDITIONS */

/* INTERNAL AUTOMATIC */

/* INTERNAL STATIC */

	dcl     (
	        xup_escape_sequence_function_key_data_ptr ptr init (null ()),
	        xup_term_type_function_key_data_ptr ptr init (null ()),
	        01 xup_xforum_error_info like xforum_error_info,
	        01 xup_user_profile	 like user_profile_overlay
	        )			 internal static;

/* CONSTANTS */

	dcl     (
	        xup_CURRENT_NEW_FEATURES_MENU_VERSION char (8) init ("1.0-2.1"),
	        xup_CURRENT_USER_PROFILE_VERSION char (8) init ("xup  2.1"), /* version of the profile str */
	        xup_PERMANENT	 bit (36) aligned init ("01"b), /* use permanet value seg not per process value */
	        xup_USER_PROFILE_VERSION_1 char (8) init ("xup  1.0"),
	        xup_USER_PROFILE_VERSION_1_1 char (8) init ("xup  1.1"),
	        xup_VALUE_SEG_PTR	 ptr init (null ()),/* null ptr means use default value seg */
	        xup_XFORUM_USER_PROFILE char (21) init ("xforum_user_profile._") /* name of element in value seg */
	        )			 internal static options (constant);

	dcl     UNSET		 fixed bin (2) int static options (constant) init (0);
	dcl     USE_ESCAPE_KEYS	 fixed bin (2) int static options (constant) init (1);
	dcl     USE_FUNCTION_KEYS	 fixed bin (2) int static options (constant) init (2);

/* BUILTINS */

	dcl     (
	        addr,
	        empty,
	        null,
	        rtrim,
	        size
	        )			 builtin;

/* BASED */

	dcl     01 user_profile_overlay based,
		02 version	 char (8),
		02 handle_interactive_messages bit (1) unaligned,
		02 multics_mode	 bit (1) unaligned,
		02 menu_always	 bit (1) unaligned,
		02 read_comments_by_subject_chain bit (1) unaligned,
		02 use_function_keys bit (1) unaligned,
		02 remove_menu_while_editing bit (1) unaligned,
		02 mbz		 bit (30) unaligned,
		02 function_key_data_ptr ptr,
		02 new_features_menu_version char (8),
		02 user_set_fk_value fixed bin (2);	/* 0 = UNSET     */
						/* 1 = ESC keys  */
						/* 2 = FUNC keys */


/* INCLUDES */

%include access_mode_values;
%page;
%include function_key_data;
%page;
%include terminal_info;
%page;
%include xforum_error_info;

	call error (0, "main entry point of xforum_user_profile was called");

get: entry (g_first_time_user);

/* PARAMETERS */

	dcl     g_first_time_user	 bit (1) aligned;	/* (output) true if the user has never invoked xforum before */

/* AUTOMATIC */

	dcl     g_local_area	 area (50);	/* space for value to allocate the user_profile structure in */
	dcl     g_code		 fixed bin (35);	/* error code returned by value_$get_data */
	dcl     g_data_ptr		 ptr;		/* pointer to the user profile allocated by value */
	dcl     g_unused_b1		 bit (1);
	dcl     g_unused_fb18	 fixed bin (18);	/* returned by value_$get_data */

/* BASED */

	dcl     g_version_overlay	 char (8) based;	/* so that we can read the structures version */
	dcl     Serror_occurred	 bit (1);


	Serror_occurred = "0"b;

	call value_$get_data (xup_VALUE_SEG_PTR, xup_PERMANENT, xup_XFORUM_USER_PROFILE,
	     addr (g_local_area), g_data_ptr, g_unused_fb18, g_code);
	if g_code = error_table_$noentry
	then do;
		call make_value_seg;
		call init_user_profile;
		g_first_time_user = "1"b;
	     end;
	else
	     if g_code = error_table_$oldnamerr
	then do;
		call init_user_profile;
		call timer_manager_$sleep (4, "11"b);
		Serror_occurred = "1"b;
	     end;
	else
	     if g_code ^= 0
	then call error (g_code, "Could not get user profile");
	else do;
		g_first_time_user = "0"b;
		if g_data_ptr -> g_version_overlay ^= xup_CURRENT_USER_PROFILE_VERSION
		then do;
			call convert_version (g_data_ptr); /* xup_user_profile is global */
			Serror_occurred = "1"b;
		     end;
		else xup_user_profile = g_data_ptr -> user_profile_overlay;
	     end;

	if ^Serror_occurred & xup_user_profile.new_features_menu_version ^= xup_CURRENT_NEW_FEATURES_MENU_VERSION
	then do;
                    if ^g_first_time_user
                    then call warn_user_of_changes;

		xup_user_profile.new_features_menu_version = xup_CURRENT_NEW_FEATURES_MENU_VERSION;
		call update_profile_i;
	     end;

	if xup_user_profile.use_function_keys
	then g_unused_b1 = set_use_function_keys_i ("1"b);
	else g_unused_b1 = set_use_function_keys_i ("0"b);

	return;

update_profile: entry;

	call update_profile_i;

	return;

display_profile: entry;

	call ioa_ ("version                        ^a", xup_user_profile.version);
	call ioa_ ("handle_interactive_messages    ^b", xup_user_profile.handle_interactive_messages);
	call ioa_ ("multics_mode                   ^b", xup_user_profile.multics_mode);
	call ioa_ ("menu_always                    ^b", xup_user_profile.menu_always);
	call ioa_ ("read_comments_by_subject_chain ^b", xup_user_profile.read_comments_by_subject_chain);
	call ioa_ ("use_function_keys              ^b", xup_user_profile.use_function_keys);
	call ioa_ ("remove_menu_while_editing      ^b", xup_user_profile.remove_menu_while_editing);
	call ioa_ ("mbz                            ^b", xup_user_profile.mbz);
	call ioa_ ("function_key_data_ptr          ^p", xup_user_profile.function_key_data_ptr);
	call ioa_ ("new_features_menu_version      ^a", xup_user_profile.new_features_menu_version);

	return;

delete_profile: entry;

/* AUTOMATIC */

	dcl     dp_code		 fixed bin (35);



	call value_$delete_data (xup_VALUE_SEG_PTR, xup_PERMANENT, xup_XFORUM_USER_PROFILE, dp_code);
	if dp_code ^= 0
	then call com_err_ (dp_code, "xforum_user_profile$delete_profile", "Could not delete profile");
	else call ioa_ ("Your Executive Forum user profile has been deleted.");

	return;

set_handle_interactive_messages: entry (shim_flag) returns (bit (1));

/* PARAMETERS */

	dcl     shim_flag		 bit (1);


	xup_user_profile.handle_interactive_messages = shim_flag;

	return ("1"b);



get_handle_interactive_messages: entry returns (bit (1));

	return (xup_user_profile.handle_interactive_messages);

set_multics_mode: entry (smm_flag) returns (bit (1));

/* PARAMETERS */

	dcl     smm_flag		 bit (1);

/* AUTOMATIC */

	dcl     smm_unused_b1	 bit (1);






	xup_user_profile.multics_mode = smm_flag;
	if xup_user_profile.multics_mode & xup_user_profile.use_function_keys
	then smm_unused_b1 = set_use_function_keys_i ("1"b);

	return ("1"b);



get_multics_mode: entry returns (bit (1));

	return (xup_user_profile.multics_mode);

set_menu_always: entry (sma_flag) returns (bit (1));

/* PARAMETERS */

	dcl     sma_flag		 bit (1);


	xup_user_profile.menu_always = sma_flag;

	return ("1"b);



get_menu_always: entry returns (bit (1));

	return (xup_user_profile.menu_always);

set_read_comments_by_subject: entry (srcbs_flag) returns (bit (1));

/* PARAMETERS */

	dcl     srcbs_flag		 bit (1);


	xup_user_profile.read_comments_by_subject_chain = srcbs_flag;

	return ("1"b);



get_read_comments_by_subject: entry returns (bit (1));

	return (xup_user_profile.read_comments_by_subject_chain);

set_use_function_keys: entry (sufk_flag) returns (bit (1));

/* PARAMETERS */

	dcl     sufk_flag		 bit (1);

/* AUTOMATIC */

	dcl     sufk_return_value	 bit (1);


	sufk_return_value = set_use_function_keys_i (sufk_flag);

	return (sufk_return_value);



get_use_function_keys: entry returns (bit (1));

	return (xup_user_profile.use_function_keys);

set_user_fk_value: entry (ufk_value);

	dcl     ufk_value		 fixed bin (2);

	if ufk_value = USE_FUNCTION_KEYS
	then if ^can_use_function_keys ()		/* dont reset value if not valid */
	     then return;

	xup_user_profile.user_set_fk_value = ufk_value;

	return;


valid_user_fk_FUNCTION: entry returns (bit (1));

	dcl     vufk_return_value	 bit (1);

	vufk_return_value = can_use_function_keys ();

	return (vufk_return_value);


get_user_fk_value: entry returns (fixed bin (2));

	return (xup_user_profile.user_set_fk_value);

set_remove_menu_while_editing: entry (srmwe_flag) returns (bit (1));

/* PARAMETERS */

	dcl     srmwe_flag		 bit (1);


	xup_user_profile.remove_menu_while_editing = srmwe_flag;

	return ("1"b);



get_remove_menu_while_editing: entry returns (bit (1));

	return (xup_user_profile.remove_menu_while_editing);

set_function_key_data_ptr: entry (sfkdp_function_key_data_ptr) returns (bit (1));

/* PARAMETERS */

	dcl     sfkdp_function_key_data_ptr ptr;

	xup_user_profile.function_key_data_ptr = sfkdp_function_key_data_ptr;

	return ("1"b);




get_function_key_data_ptr: entry returns (ptr);

	return (xup_user_profile.function_key_data_ptr);

set_new_features_menu_version: entry (snfmv_version) returns (bit (1));

/* PARAMETERS */

	dcl     snfmv_version	 char (8);

	xup_user_profile.new_features_menu_version = snfmv_version;

	return ("1"b);






get_new_features_menu_version: entry returns (char (8));

	return (xup_user_profile.new_features_menu_version);

init_user_profile: proc;


	xup_user_profile.version = xup_CURRENT_USER_PROFILE_VERSION;
	xup_user_profile.handle_interactive_messages = "1"b;
	xup_user_profile.multics_mode = "0"b;
	xup_user_profile.menu_always = "0"b;
	xup_user_profile.read_comments_by_subject_chain = "0"b;
	xup_user_profile.use_function_keys = "1"b;
	xup_user_profile.user_set_fk_value = 0;
	xup_user_profile.remove_menu_while_editing = "0"b;
	xup_user_profile.mbz = "0"b;
	xup_user_profile.function_key_data_ptr = null ();
	xup_user_profile.new_features_menu_version = xup_CURRENT_NEW_FEATURES_MENU_VERSION;
	xup_user_profile.user_set_fk_value = UNSET;

	call update_profile_i;

	return;

     end init_user_profile;

make_value_seg: proc;

/* AUTOMATIC */

	dcl     mvs_code		 fixed bin (35);
	dcl     mvs_code2		 fixed bin (35);
	dcl     mvs_home_dir	 char (168);
	dcl     mvs_person_id	 char (32);
	dcl     mvs_unused1		 char (1);
	dcl     mvs_unused2		 char (1);
	dcl     mvs_value_seg_ptr	 ptr;

/* CONSTANTS */

	dcl     mvs_SEGMENT		 bit (36) aligned init ("1001"b) internal static options (constant);






	call user_info_$homedir (mvs_home_dir);

	call user_info_ (mvs_person_id, mvs_unused1, mvs_unused2);

	call hcs_$make_seg (mvs_home_dir, rtrim (mvs_person_id) || ".value", "", RW_ACCESS_BIN, mvs_value_seg_ptr, mvs_code);
	if mvs_code ^= 0
	then call error (mvs_code, "Value segment does not exist and it cannot be created.");

	call value_$init_seg (mvs_value_seg_ptr, 0, null (), 0, mvs_code);
	if mvs_code ^= 0
	then do;
		call delete_$ptr (mvs_value_seg_ptr, mvs_SEGMENT, "xforum_user_profile", mvs_code2);
		if mvs_code2 = 0
		then call error (mvs_code, "The just created value segment could not be initialized, it has been deleted.");
		else call error (mvs_code2, "The just created value segment could not be initialized, it also could not be deleted.");
	     end;

	return;

     end make_value_seg;

convert_version: proc (cv_data_ptr);

/* PARAMETERS */

	dcl     cv_data_ptr		 ptr;		/* (input) pointer to user profile stored in value seg */

/* BASED */

	dcl     cv_version_overlay	 char (8) based;

	if cv_data_ptr -> cv_version_overlay = xup_USER_PROFILE_VERSION_1
	then do;
		xup_user_profile = cv_data_ptr -> user_profile_overlay;
		xup_user_profile.version = xup_CURRENT_USER_PROFILE_VERSION;
		xup_user_profile.function_key_data_ptr = null ();
		call warn_user_of_changes;
		xup_user_profile.new_features_menu_version = xup_CURRENT_NEW_FEATURES_MENU_VERSION;
		call update_profile_i;
	     end;
	else
	     if cv_data_ptr -> cv_version_overlay = xup_USER_PROFILE_VERSION_1_1
	then do;
		xup_user_profile = cv_data_ptr -> user_profile_overlay;
		xup_user_profile.version = xup_CURRENT_USER_PROFILE_VERSION;
		call warn_user_of_changes;
		xup_user_profile.new_features_menu_version = xup_CURRENT_NEW_FEATURES_MENU_VERSION;
		call update_profile_i;
	     end;
	else do;
		call ioa_ ("Your user profile is inaccessible or contains invalid data.  A new profile");
		call ioa_ ("containing default values is being built for you.  You may change these");
		call ioa_ ("values by selecting the personalization option on the menu.");
		call timer_manager_$sleep (4, "11"b);

		call init_user_profile;
	     end;

	return;

     end convert_version;

set_use_function_keys_i: proc (sufki_flag) returns (bit (1));

/* PARAMETERS */

	dcl     sufki_flag		 bit (1);

/* AUTOMATIC */

	dcl     sufki_return_value	 bit (1);




	sufki_return_value = "1"b;

	if sufki_flag
	then do;
		if can_use_function_keys ()
		then do;
			if xup_user_profile.user_set_fk_value = USE_ESCAPE_KEYS
			then /* do NOT override users value		*/
			     xup_user_profile.use_function_keys = "0"b;
			else xup_user_profile.use_function_keys = "1"b;
		     end;
		else do;
			call ioa_ ("Function keys are not supported by this terminal type.^/   Escape sequences must be used.");
			call timer_manager_$sleep (4, "11"b);
			xup_user_profile.use_function_keys = "0"b;
			sufki_return_value = "0"b;
		     end;
	     end;
	else xup_user_profile.use_function_keys = "0"b;

	if xup_user_profile.use_function_keys
	then xup_user_profile.function_key_data_ptr = xup_term_type_function_key_data_ptr;
	else do;
		if xup_escape_sequence_function_key_data_ptr = null ()
		then xup_escape_sequence_function_key_data_ptr = xforum_default_fkeys_ ();
		xup_user_profile.function_key_data_ptr = xup_escape_sequence_function_key_data_ptr;
	     end;

	return (sufki_return_value);

     end set_use_function_keys_i;

can_use_function_keys: proc () returns (bit (1));

/* AUTOMATIC */

	dcl     cufk_can_use_function_keys bit (1);
	dcl     cufk_code		 fixed bin (35);
	dcl     01 cufk_term_info	 like terminal_info;

	if xup_term_type_function_key_data_ptr ^= null ()
	then free xup_term_type_function_key_data_ptr -> function_key_data;

	cufk_term_info.version = terminal_info_version;
	call iox_$control (iox_$user_io, "terminal_info", addr (cufk_term_info), cufk_code);
	if cufk_code ^= 0
	then do;
		cufk_can_use_function_keys = "0"b;
		goto exit_can_use_function_keys;
	     end;

	call ttt_info_$function_key_data (cufk_term_info.term_type, null, xup_term_type_function_key_data_ptr, cufk_code);
	if cufk_code ^= 0
	then do;
		cufk_can_use_function_keys = "0"b;
		goto exit_can_use_function_keys;
	     end;

	if xup_term_type_function_key_data_ptr -> function_key_data.highest >= 8
	then cufk_can_use_function_keys = "1"b;
	else
	     if xup_term_type_function_key_data_ptr -> function_key_data.highest <= 6
	then cufk_can_use_function_keys = "0"b;
	else
	     if xup_term_type_function_key_data_ptr -> function_key_data.highest = 7 & ^xup_user_profile.multics_mode
	then cufk_can_use_function_keys = "1"b;
	else cufk_can_use_function_keys = "0"b;

exit_can_use_function_keys:
	return (cufk_can_use_function_keys);

     end can_use_function_keys;

update_profile_i: proc;

/* AUTOMATIC */

	dcl     upi_code		 fixed bin (35);
	dcl     upi_unused_ptr	 ptr;
	dcl     upi_unused_fb18	 fixed bin (18);



	call value_$delete_data (xup_VALUE_SEG_PTR, xup_PERMANENT, xup_XFORUM_USER_PROFILE, upi_code);
	if upi_code ^= 0 & upi_code ^= error_table_$oldnamerr
	then call error (upi_code, "Could not delete old profile prior to updating");
	call value_$set_data (xup_VALUE_SEG_PTR, xup_PERMANENT, xup_XFORUM_USER_PROFILE,
	     addr (xup_user_profile), size (xup_user_profile), null (), upi_unused_ptr, upi_unused_fb18, upi_code);
	if upi_code ^= 0
	then call error (upi_code, "Could not update your old user profile");

	return;

     end update_profile_i;

warn_user_of_changes: proc;

	call ioa_ ("Executive Forum has been changed since you last used it. Select option");
	call ioa_ ("""f"" in the General Help Topics menu for a description of the changes.");
	call timer_manager_$sleep (4, "11"b);

	return;

     end warn_user_of_changes;

error: proc (e_code, e_reason);

/* PARAMETERS */

	dcl     e_code		 fixed bin (35);
	dcl     e_reason		 char (512);

	xup_xforum_error_info.name = "xforum_user_profile";
	xup_xforum_error_info.entry = "";
	xup_xforum_error_info.doing = "";
	xup_xforum_error_info.code = e_code;
	xup_xforum_error_info.reason = e_reason;

	call signal_ ("xforum_fatal_error", null (), addr (xup_xforum_error_info), null ());

     end error;

     end xforum_user_profile;
