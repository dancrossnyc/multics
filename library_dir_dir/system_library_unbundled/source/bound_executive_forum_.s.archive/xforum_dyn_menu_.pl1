/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(85-01-08,Davids), approve(86-02-04,MCR7350),
     audit(86-04-24,Gilcrease), install(86-04-24,MR12.0-1048):
     Removed the function_key_data_ptr paramater from the calling
     sequence of get_choice.  Replaced it with a call to
     xforum_user_profile$get_function_key_data_ptr.
     
     85-04-02 Davids: Added the entry point display_and_get_choice.
     This entry will, given an array of options, create a dynamic menu
     of those options, display the sub menus created and process the
     function keys.  It will also add to the original list of options a
     special option that will go at the end of each sub menu.
     
     85-04-03 Davids: Added the entry point prompt_instead_of_menu.
     This entry point will prompt the user from some input.  It will
     handle the cases of input too long, blank line input, and ?.  It
     will return other responses.  It will also handle the help line
     and quit.  This entry was put in this module because it prompts
     the user for a response that could have been selected via a
     dynamic menu.  It cannot check that response against the choices
     on the menu because in some cases a special array of menu options
     will not be built unless the user explicily asks for a menu.
  2) change(85-04-16,Davids), approve(86-02-04,MCR7350),
     audit(86-04-24,Gilcrease), install(86-04-24,MR12.0-1048):
     Changed the way that the prompt option was being added to the
     array of choices in the display_and_get_choice routine.  It was
     adding a choice to the array incrementing the count and then if
     the count indicated the prompt option should be added, adding it
     and incrementing the count again.  When the loop exited it
     automaticaly added a prompt option to the end.  This worked OK
     except for the case where the options exactly fited in a set of
     menus.  Then the prompt option automatically added caused a
     subscript out of bounds condition.  The solution was to move the
     test for adding the prompt option in the loop from after the
     addition of a choice to before it.  This way the loop terminates
     before the final prompt option can be added.
     
     85-05-24 Davids: Converted the create, display, get_choice, and
     destroy entry points to internal procs.  Replaced the return after
     the main entry point to a call to error and added the error proc.
     Replaced global variable references in create, display,
     get_choice, and destroy with internal variables that conform to
     the prefix naming convension.  Replaced the begin block in create
     that was used to declare a temporary array of choices to be passed
     to menu by just overlaying the input array of choices.  This
     eliminated the loop that was required to load the temporary array.
  3) change(85-05-28,Davids), approve(86-02-04,MCR7350),
     audit(86-04-24,Gilcrease), install(86-04-24,MR12.0-1048):
     Completed variable cleanup and testing of new create code.  Also
     added a call to free the xdm_dyn_menu structure after all the
     menus are destroyed in the destroy procedure.  Removed the
     included file function_key_data, the only thing being used was the
     declaration of the function_key_data_ptr variable.  That is now
     declared locally in the get_choice procedure.  Updated the
     functional descriptions of the internal procedures.
     
     85-05-29 Davids: Added the functional descriptions of the entry points.
  4) change(87-04-13,LJAdams), approve(87-04-22,MCR7684),
     audit(87-07-30,Blair), install(87-08-06,MR12.1-1065):
     Changed to allow command_processor_ escapes.
                                                   END HISTORY COMMENTS */


xforum_dyn_menu_: proc ();

/*
   BEGIN DESCRIPTION

   function:
      This module manages dynamic menus. Dynamic menus are menus with no fixed
      content that are displayed in the bottom window.

   description of entry points:
      xforum_dyn_menu:
         input:
         output:
         It is an error to call the main entry point. The xforum_fatal_error
         condition will be signaled with an "internal programming error" error
         message.

      display_and_get_choice:
         input:   (*) char (*)    choices in the menu
                  fixed bin       number of choices
                  char (*)        title of the menu
                  char (*)        text of menu option that will abort menu and
                                  display prompt
                  char (*)        help line break message
                  fixed bin       identifies location for spy recording
                  ptr             points to xforum_spy structure /* 
         output:  fixed bin       index into choices array that user selected
                                  or -1 if user selected the "prompt_me" option
         This entry will create, display, get the user's choice, and destroy
         a dynamic menu. A dynamic menu appears in the bottom (user_io) window.
         The title of the menu is overlaid on the bottom line of the top (menu)
         window and is replaced with dashes (-) when the menu is destroyed.
         There can be any number of choices in the dynamic menu. If there are
         more choices than can fit in the bottom window several menus will be
         created. The last option of each menu is the prompt_option. This
         option should be used to allow the user to indicate that he does not
         want to select from a menu but wants to be prompted. The user's choice
         is collected in the spy structure as either a function key or the
         menu option - the actual name of the choice is not recorded. 
         A zero index returned indicates that the user made no choice and
         wants to abort the selection process. This is the result of a QUIT.

      prompt_instead_of_menu:
         input:   char (*)          for help line to indicate where BREAK will
                                    put the user
                  char (*)          variable part of prompt
                  char (*)          description of object to be entered,
                                    initial capital and plural
                  char (*)          description of object to be entered,
                                    lower case and singular
                  char (*)          prompt info seg identifier
                  fixed bin         id for what is being asked for
                  ptr               pointer to spy segment
         output:  char (*) varying  user's response
         This entry is used to prompt the user for a choice that could also be
         obtained from a dynamic menu. It is part of the this module because it
         is so closely associated with dynamic menus. If the index returned
         from a call to display_and_get_choice is -1 this entry should be
         called. Similarly if this entry returns ?? then display_and_get_choice
         should be called. This entry prompts the user for some input. The
         reply is checked for length and must not be longer than the output
         parameter associated with the response. A null response is also
         checked for. If either of these two cases occur an error message is
         output and the prompt repeated. If the user enters a question mark
         the xforum_help info file is searched for the input help text id and
         the text displayed to the user, after that the prompt is repeated.
         Any other text is passed on to the called. NOTE that the response
         is not comapred with the choices on the dynamic menu because it is
         possible that the choice would not appear on the menu, i.e. the user
         changed his forum search rules so that new meetings not in the 
         meeting search list can be found. He could enter a new meeting name
         via a prompt and have it found but could not select it via a dynamic
         menu of the meetings in the meeting list. This is also why there are
         two separate entries instead of 1 entry which handles both the
         prompt and the menu. A null string is returned in the event of a QUIT.

   description of internal procedures:
      create: This procedure creates a set of menus each of which has two
      columns, 1 header line and no trailing line. Each menu except possibly
      the last menu in the set will have 2N options where N = lines in user_io
      window - 1. Each menu is created by overlaying the input list of options
      and giving them in blocks of 2N to menu_$create. The xdm_dyn_menu
      structure is allocated in the xforum_system_free area and loaded.

      display: This procedure calls menu_$display to display one of the dynamic
      menus. The dynamic menu to be displayed is indentified by an index into
      the dynamic menu structure array. The pointer to that structure is also
      input.

      get_choice: This procedure is used to get the user's choice from a
      dynamic menu. Like display the dynamic menu is identified by an index
      into the dynamic menu structure array and the pointer to that structure
      is also input. The menu_$get_choice routine is called to actually get the
      user's choice. If the error code returned by menu_ is 
      window_status_pending a call to iox_ is made to reset the status pending
      flag and the call to menu_ repeated.

      destroy: This procedure frees all the allocated space associated with the
      dynamic menus.

      collect_spy_data: Similar to all the other collect_spy_data procedures.
      See the xforum module. Note that this procedure is duplicated so as to
      save the expense of an external call for a commonly executed, very short
      program, whose output is used only during development or special site
      exposure.

      error: Similar to all the other error procedures. It records in an
      internal static structure the details of an error and then signals the
      xforum_fatal_error condition.

   known bugs:

   notes:

   history:
      83-12-?? DBarker: dynamic menu procedure for executive_forum - "adapted" 
      from xmail's code.

      84-03-29 Davids: Modified to check for a window_status_pending error
      being returned from menu_$get_choice in the get_choice entry. If that
      error is returned the status is reset and the call to menu_$get_choice
      repeated. Any other error will just cause the call to menu_$get_choice to
      be repeated.

      84-11-14 Davids: Auditing changes: 1) Added a return statement before the
      create entry so calls to the main entry do not fall into create. 2) In
      the create entry changed the return statement in the begin block to a
      goto exit_create and added the exit_create label before the final return.
      3) In get_choice changed the variable that controls the loop from P_code
      to a local variable and set the value of P_code from the local variable
      once the loop terminates. Other Changes: rearranged the declarations;
      removed all the declarations from the create begin block except those
      declarations that must be part of the block. Also move the external
      declarations from get_choice.
   END DESCRIPTION
*/

/* PARAMETERS */

/* EXTERNAL STATIC */

	dcl     iox_$user_io	 ptr ext static;
	dcl     video_et_$window_status_pending fixed bin (35) ext static;

/* ENTRIES */

          dcl     ioa_		 entry() options(variable);
	dcl     ioa_$rsnnl		 entry () options (variable);
	dcl     iox_$control	 entry (ptr, char (*), ptr, fixed bin (35));
          dcl     xforum_get_str_	 entry (char(*) var, ptr, char(*), char(*), char(*) var, fixed bin(35));
	dcl     signal_		 entry () options (variable);
	dcl     window_$bell	 entry (ptr, fixed bin (35));
	dcl     window_$clear_window	 entry (ptr, fixed bin (35));
	dcl     window_$overwrite_text entry (ptr, char (*), fixed bin (35));
	dcl     window_$position_cursor entry (ptr, fixed bin, fixed bin, fixed bin (35));
	dcl     window_$sync	 entry (ptr, fixed bin (35));
	dcl     xforum_help_line_$push entry (bit (8) aligned, char (*), char (*), char (*));
	dcl     xforum_help_line_$pop	 entry options (variable);
	dcl     xforum_redisplay_	 entry options (variable);
	dcl     xforum_user_profile$get_function_key_data_ptr entry () returns (ptr);

/* CONDITIONS */

	dcl     quit		 condition;

/* INTERNAL AUTOMATIC */

	dcl     xdm_dyn_menup	 ptr;		/* pointer to the xdm_dyn_menu structure */
	dcl     xdm_n_menus		 fixed bin;	/* number of submenus needed to display all the choices */

/* INTERNAL STATIC */

	dcl     01 xdm_xforum_error_info like xforum_error_info internal static;

/* CONSTANTS */

	dcl     (
	        xdm_ME		 char (16) init ("xforum_dyn_menu_"), /* module name */
	        xdm_OPTION_CODES	 (61) char (1) unal
				 init ("1", "2", "3", "4", "5", "6", "7", "8", "9",
				 "a", "b", "c", "d", "e", "f", "g", "h", "i", "j",
				 "k", "l", "m", "n", "o", "p", "q", "r", "s", "t",
				 "u", "v", "w", "x", "y", "z", "A", "B", "C", "D",
				 "E", "F", "G", "H", "I", "J", "K", "L", "M", "N",
				 "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X",
				 "Y", "Z"),	/* keys for menu choices */
	        xdm_REDISPLAY	 fixed bin init (5),/* function keys for redisplay */
	        xdm_REDISPLAY2	 fixed bin init (12),
	        xdm_SCROLL_DOWN	 fixed bin init (6),/* function keys for previous menu */
	        xdm_SCROLL_DOWN2	 fixed bin init (13),
	        xdm_SCROLL_UP	 fixed bin init (7),/* function keys for next menu */
	        xdm_SCROLL_UP2	 fixed bin init (14)
	        )			 internal static options (constant);
	

/* BUILTINS */

	dcl     (
	        addr,
	        ceil,
	        char,
	        divide,
	        float,
	        hbound,
	        length,
	        ltrim,
                  maxlength,
	        mod,
	        null,
	        rtrim,
	        substr
	        )			 builtin;

/* BASED */

	dcl     xdm_based_area	 area based (xforum_system_area_ptr); /* area xdm_dyn_menu allocated in */

	dcl     1 xdm_dyn_menu	 aligned based (xdm_dyn_menup), /* info about all the submenus created */
		2 nth_menu	 fixed bin,	/* number of submenus created */
		2 menu_array	 (0:xdm_n_menus - 1 refer (xdm_dyn_menu.nth_menu)),
		  3 location	 ptr,		/* pointer to menu structure for menu_ */
		  3 first_option	 fixed bin,	/* index into original array of first option in submenu */
		  3 option_count	 fixed bin;	/* number of options in submenu */


/* INCLUDE FILES */

%include menu_dcls;
%page;
%include window_status;
%page;
%include xforum_error_info;
%page;
%include xforum_ptr_struct_;
%page;
%include xforum_spy;
%page;
%include xforum_windows;
%page;
%include xforum_prompts;


%include xforum_answers;


%include xforum_help_infos;


	call error (0, "Internal programming error - xforum_dyn_menu$xforum_dyn_menu called.");

display_and_get_choice: entry (dagc_choices, dagc_num_choices, dagc_title, dagc_prompt_option,
	dagc_help_line_break_message, dagc_spy_position, dagc_spy_ptr, dagc_selected_index);


/* PARAMETERS */

	dcl     dagc_choices	 (*) char (*);	/* (input) choices in the menu */
	dcl     dagc_num_choices	 fixed bin;	/* (input) number of choices */
	dcl     dagc_title		 char (*);	/* (input) title of the menu */
	dcl     dagc_prompt_option	 char (*);	/* (input) text of menu option that will */
						/*         abort menu and display prompt */
	dcl     dagc_help_line_break_message char (*);	/* (input) help line break message */
	dcl     dagc_spy_position	 fixed bin;	/* (input) identifies location for spy recording */
	dcl     dagc_spy_ptr	 ptr;		/* (input) points to xforum_spy structure */
	dcl     dagc_selected_index	 fixed bin;	/* (output) index into dagc_choices array that user selected */
						/*          or -1 if user selected the "prompt me" option */

/* INTERNAL AUTOMATIC */

	dcl     dagc_choice		 fixed bin;	/* user's choice on the submenu currently displayed */
	dcl     dagc_code		 fixed bin (35);	/* standard error code */
	dcl     dagc_dyn_menup	 ptr;		/* points to the xdm_dyn_menu structure */
	dcl     dagc_items_per_menu	 fixed bin;	/* number of choices per submenu */
	dcl     dagc_fkey		 bit (1) aligned;	/* "1"b imples that user selected a function key */
	dcl     dagc_menu_index	 fixed bin;	/* index of a submenu */
	dcl     dagc_number_dashes	 fixed bin;	/* left column of title when centered in window */
	dcl     dagc_number_of_menus	 fixed bin;	/* total number of submenus needed to display all the choices */
	dcl     dagc_option_index	 fixed bin;	/* user's choice based on total number of choices */

	dcl     1 dagc_dyn_menu_req	 aligned,		/* describes the submenus */
		2 options_per_menu	 fixed bin,
		2 options_last_menu	 fixed bin,
		2 n_menus		 fixed bin;

/* CONSTANTS */

	dcl     dagc_DASHES		 char (80) init ("--------------------------------------------------------------------------------")
				 internal static options (constant); /* used to restore the top menus */
						/* bottom line of dashes when routine returns to caller */

	spy_ptr = dagc_spy_ptr;

	dagc_items_per_menu = (xforum_windows.bottom.height - 1) * 2;
	dagc_number_of_menus = ceil (float (dagc_num_choices) / float (dagc_items_per_menu - 1));
						/* The last item doesn't count its ENTER... */


	begin;
	     dcl	   dagc_i		      fixed bin;	/* array index */
	     dcl	   dagc_j		      fixed bin;	/* loop index */
	     dcl	   dagc_names	      (dagc_num_choices + dagc_number_of_menus) char (32) varying;
						/* submenu choices, including the "prompt me" choices */
	     dcl	   dagc_nindex	      (dagc_num_choices + dagc_number_of_menus) fixed bin;
						/* maps choices in dagc_names array to original indicies in */
						/* dagc_choices array and maps "prompt me" choices to -1 */

	     dagc_i = 1;
	     dagc_dyn_menup = null ();

	     on quit
		begin;
		     call collect_spy_data (dagc_spy_position, "QUIT");
		     dagc_selected_index = 0;
		     goto exit_get_choice_from_menu;
		end;

	     do dagc_j = 1 to dagc_num_choices while (dagc_i <= (dagc_num_choices + dagc_number_of_menus));
		if mod (dagc_i, dagc_items_per_menu) = 0
		then do;
		     dagc_names (dagc_i) = dagc_prompt_option;
		     dagc_nindex (dagc_i) = -1;
		     dagc_i = dagc_i + 1;
		end;
		dagc_names (dagc_i) = dagc_choices (dagc_j);
		dagc_nindex (dagc_i) = dagc_j;
		dagc_i = dagc_i + 1;
	     end;
	     dagc_names (dagc_i) = dagc_prompt_option;
	     dagc_nindex (dagc_i) = -1;

	     call create (dagc_names,
		addr (xforum_windows.bottom.position), addr (dagc_dyn_menu_req),
		dagc_dyn_menup, dagc_code);
	     if dagc_code ^= 0
	     then go to exit_get_choice_from_menu;

	     call xforum_help_line_$push ("00000110"b, "", dagc_help_line_break_message, "");

	     dagc_menu_index = 0;

	     dagc_number_dashes = (xforum_windows.menu.position.width - length (dagc_title)) / 2;
	     call window_$position_cursor (xforum_windows.menu.iocb,
		xforum_windows.menu.extent.height, dagc_number_dashes, (0));
	     call window_$overwrite_text (xforum_windows.menu.iocb, (dagc_title), (0));

	     do while ("1"b);
display_submenu:
		call display (dagc_dyn_menup, dagc_menu_index, dagc_code);
		if dagc_code ^= 0
		then go to exit_get_choice_from_menu;

		call get_choice (dagc_dyn_menup, dagc_menu_index,
		     dagc_choice, dagc_fkey, dagc_code);
		if dagc_code ^= 0
		then go to exit_get_choice_from_menu;

		if dagc_fkey
		then call collect_spy_data (dagc_spy_position, "F" || rtrim (ltrim (char (dagc_choice))));
		else call collect_spy_data (dagc_spy_position, rtrim (ltrim (char (dagc_choice))));

		if ^dagc_fkey
		then do;
		     dagc_option_index =
			dagc_menu_index * dagc_dyn_menu_req.options_per_menu + dagc_choice;
		     dagc_selected_index = dagc_nindex (dagc_option_index);
		     go to exit_get_choice_from_menu;
		end;
		else if dagc_choice = xdm_REDISPLAY | dagc_choice = xdm_REDISPLAY2
		then do;
		     call xforum_redisplay_;
		     goto display_submenu;		/* Q and D - but WTH */
		end;
		else if dagc_choice = xdm_SCROLL_UP | dagc_choice = xdm_SCROLL_UP2
		then dagc_menu_index =
			mod (dagc_menu_index + 1, dagc_dyn_menu_req.n_menus);
		else if dagc_choice = xdm_SCROLL_DOWN | dagc_choice = xdm_SCROLL_DOWN2
		then dagc_menu_index =
			mod (dagc_menu_index - 1, dagc_dyn_menu_req.n_menus);
		else call window_$bell (xforum_windows.menu.iocb, (0));
	     end;					/* do while ... */

exit_get_choice_from_menu:
	     call destroy (dagc_dyn_menup);
	     call window_$clear_window (xforum_windows.bottom.iocb, (0));

	     call window_$position_cursor (xforum_windows.menu.iocb,
		xforum_windows.menu.extent.height, dagc_number_dashes, (0));
	     call window_$overwrite_text (xforum_windows.menu.iocb, substr (dagc_DASHES, 1, length (dagc_title)), (0));
	     call window_$sync (xforum_windows.menu.iocb, (0));

	     call xforum_help_line_$pop;
	end;

	return;

prompt_instead_of_menu: entry (piom_help_line_break_text, piom_prompt_text, piom_error_text_1,
	piom_error_text_2, piom_help_id, piom_spy_id, piom_spy_ptr, piom_response);

/* PARAMETERS */

	dcl     piom_help_line_break_text char (*);	/* (input) for help line to indicate where BREAK will put the user */
	dcl     piom_prompt_text	 char (*);	/* (input) variable part of prompt */
	dcl     piom_error_text_1	 char (*);	/* (input) description of object to be */
						/*         entered, initial capital and plural */
	dcl     piom_error_text_2	 char (*);	/* (input) description of object to be */
						/*         entered, lower case and singular */
	dcl     piom_help_id	 char (*);	/* (input) prompt info seg identifier */
	dcl     piom_spy_id		 fixed bin;	/* (input) id for what is being asked for */
	dcl     piom_spy_ptr	 ptr;		/* (input) pointer to spy segment */
	dcl     piom_response	 char (*) varying;	/* (output) user's response */

/* INTERNAL AUTOMATIC */

	dcl     piom_reply		 char (256);	/* user's reply */
          dcl     piom_code		 fixed bin (35);
		    
/* EXTERNAL ENTRY */

          dcl     error_table_$long_record	
                                         fixed bin(35) ext static;
		    

	spy_ptr = piom_spy_ptr;

	call xforum_help_line_$push ("0"b, "", "", "Press  ? and RETURN:help  BREAK:" || piom_help_line_break_text);

	on quit
	     begin;
		piom_response = "";
		call window_$clear_window (xforum_windows.bottom.iocb, (0));
		goto exit_prompt_instead_of_menu;
	     end;

	piom_reply = "";
          answer_array.N = 0;				/* Accept all answers			*/
          answer_array.max_length = maxlength (piom_response);

          do while (piom_reply = "");
	   call xforum_get_str_ ((piom_prompt_text || " (or ?? for menu): "), addr(answer_array), PROMPT_HELP, piom_help_id, piom_response, piom_code);

             if piom_code = error_table_$long_record
             then do;
	        call ioa_ ("^a cannot be more than ^i characters long.", piom_error_text_1, maxlength(piom_response));
	        call ioa_ ("Please try again or press BREAK to ^a.", piom_help_line_break_text);
	        end;

	   piom_reply = substr (piom_response, 1);
	   if piom_reply ^= ""
             then call collect_spy_data (piom_spy_id, substr (piom_response, 1));
          end;

exit_prompt_instead_of_menu:
	call xforum_help_line_$pop;

	return;

create: proc (c_choices, c_window_infop, c_dyn_menu_reqp, c_dyn_menup, c_code);

/* PARAMETERS */

	dcl     c_choices		 (*) char (32) varying; /* (input) text of the menu options */
	dcl     c_window_infop	 ptr;		/* (input) pointer to a window_position_info str */
	dcl     c_dyn_menu_reqp	 ptr;		/* (input) pointer to a dyn_menu_req structure */
	dcl     c_dyn_menup		 ptr;		/* (output) pointer to a dyn_menu structure */
	dcl     c_code		 fixed bin (35);	/* (output) standard error code */

/* INTERNAL AUTOMATIC */

	dcl     c_done_with_choices	 bit (1);		/* "1"b imples that all the choices have been placed in a submenu */
	dcl     c_menu_no		 fixed bin;	/* index of a submenu */
	dcl     c_choice_count	 fixed bin;	/* count of choices already placed in a submenu */
	dcl     c_header		 (1) char (80) varying; /* header line, gives current submenu */
						/* number and total number of submenus */
	dcl     c_slots_avail	 fixed bin;	/* number of choices that can fit in the submenu */
						/* 2 columns of choices, 1 line of window for header */
	dcl     c_slots_needed	 fixed bin;	/* number of choices for all submenus */
	dcl     c_submenu_choices_count fixed bin;	/* number of choices in a submenu */
	dcl     c_submenu_choices_ptr	 ptr;		/* pointer to the first choice in a submenu */
	dcl     01 c_menu_format	 aligned like menu_format; /* describes the menu to be created by menu_ */
	dcl     01 c_menu_requirements aligned like menu_requirements; /* describes the requirements of the menu */

/* BASED */

	dcl     c_submenu_choices	 (c_submenu_choices_count) char (32) varying based (c_submenu_choices_ptr);
						/* choices for a given submenu */
	dcl     01 c_dyn_menu_req	 aligned based (c_dyn_menu_reqp), /* describes the submenus created */
		02 options_per_menu	 fixed bin,
		02 options_last_menu fixed bin,
		02 n_menus	 fixed bin;
	dcl     01 c_window_info	 like window_position_info based (c_window_infop);
						/* describes the window the menus will be displayed in */

	c_dyn_menup = null ();
	c_code = 0;

	c_slots_avail = 2 * (c_window_info.height - 1);	/* 2 columns, 1 header, no trailers */
	c_slots_needed = hbound (c_choices, 1);

	xdm_n_menus = divide (c_slots_needed + c_slots_avail - 1, c_slots_avail, 17, 0);

	allocate xdm_dyn_menu in (xdm_based_area);

	c_menu_format.version = menu_format_version_1;
	c_menu_format.max_width = c_window_info.width;
	c_menu_format.max_height = c_window_info.height;
	c_menu_format.n_columns = 2;
	c_menu_format.center_headers = "1"b;
	c_menu_format.center_trailers = "1"b;
	c_menu_format.pad = "0"b;
	c_menu_format.pad_char = " ";

	c_menu_requirements.version = menu_requirements_version_1;

	c_choice_count = 1;
	c_done_with_choices = "0"b;

	do c_menu_no = 0 to xdm_dyn_menu.nth_menu;
	     c_submenu_choices_ptr = addr (c_choices (c_choice_count));
	     if c_choice_count + c_slots_avail > c_slots_needed
	     then c_submenu_choices_count = c_slots_needed - c_choice_count + 1;
	     else c_submenu_choices_count = c_slots_avail;
	     c_choice_count = c_choice_count + c_slots_avail;

	     xdm_dyn_menu.menu_array (c_menu_no).option_count = c_submenu_choices_count;
	     xdm_dyn_menu.menu_array (c_menu_no).first_option = c_menu_no * c_slots_avail + 1;

	     call ioa_$rsnnl ("Choices (menu ^d of ^d)", c_header (1), (0), c_menu_no + 1, xdm_n_menus);

	     call menu_$create (c_submenu_choices, c_header, "",
		addr (c_menu_format), xdm_OPTION_CODES, xforum_system_area_ptr,
		addr (c_menu_requirements),
		xdm_dyn_menu.menu_array (c_menu_no).location, c_code);

	     if c_code ^= 0
	     then goto exit_create;

	end;					/* do c_menu_no = ... */

	if c_dyn_menu_reqp ^= null
	then do;
	     c_dyn_menu_req.options_per_menu = c_slots_avail;
	     c_dyn_menu_req.options_last_menu = xdm_dyn_menu.menu_array (xdm_n_menus - 1).option_count;
	     c_dyn_menu_req.n_menus = xdm_n_menus;
	end;

	c_dyn_menup = xdm_dyn_menup;

exit_create:
	return;

     end create;

display: proc (d_dyn_menup, d_index, d_code);

/* PARAMETERS */

	dcl     d_dyn_menup		 ptr;		/* (input) pointer to the dyn_menu structure */
	dcl     d_index		 fixed bin;	/* (input) index of submenu to display */
	dcl     d_code		 fixed bin (35);	/* (output) standard error code */





	d_code = 0;
	xdm_dyn_menup = d_dyn_menup;

	call menu_$display (iox_$user_io, xdm_dyn_menu.menu_array (d_index).location, d_code);

	return;

     end display;

get_choice: proc (gc_dyn_menup, gc_index, gc_choice, gc_fkey, gc_code);

/* PARAMETERS */

	dcl     gc_dyn_menup	 ptr;		/* (input) pointer to the dyn_menu structure */
	dcl     gc_index		 fixed bin;	/* (input) index of the submenu being answered */
	dcl     gc_choice		 fixed bin;	/* (output) index of choice from menu or function key */
	dcl     gc_fkey		 bit (1) aligned;	/* (output) "1" implies that choice is a function key */
	dcl     gc_code		 fixed bin (35);	/* (output) standard error code */

/* INTERNAL AUTOMATIC */

	dcl     gc_function_key_data_ptr ptr;		/* pointer to the function_key_data structure for the users terminal */
	dcl     gc_ignore2		 fixed bin (35);	/* ignored output from system call */
	dcl     01 gc_window_status_info like window_status_info; /* local copy of window_status_info structure */





	gc_code = 1;
	gc_window_status_info.version = window_status_version_1;
	xdm_dyn_menup = gc_dyn_menup;
	gc_function_key_data_ptr = xforum_user_profile$get_function_key_data_ptr ();

	do while (gc_code ^= 0);
	     call menu_$get_choice (iox_$user_io,
		xdm_dyn_menu.menu_array (gc_index).location, gc_function_key_data_ptr,
		gc_fkey, gc_choice, gc_code);
	     if gc_code = video_et_$window_status_pending
	     then call iox_$control (iox_$user_io, "get_window_status", addr (gc_window_status_info), gc_ignore2);
	end;

	return;

     end get_choice;

destroy: proc (des_dyn_menup);

/* PARAMETERS */

	dcl     des_dyn_menup	 ptr;		/* (input) pointer to dyn_menu structure to be freed */

/* INTERNAL AUTOMATIC */

	dcl     des_i		 fixed bin;	/* loop index */





	xdm_dyn_menup = des_dyn_menup;

	if xdm_dyn_menup ^= null ()
	then do;
	     do des_i = 0 to xdm_dyn_menu.nth_menu;
		call menu_$destroy (xdm_dyn_menu.menu_array (des_i).location, (0));
	     end;
	     free xdm_dyn_menup -> xdm_dyn_menu;
	end;

	return;

     end destroy;

collect_spy_data: proc (csd_where, csd_response);


/* PARAMETERS */

	dcl     csd_where		 fixed bin;	/* (input) location response was collected */
	dcl     csd_response	 char (*);	/* (input) user's response */





	spy.count = spy.count + 1;
	spy.choices (count).at = csd_where;
	spy.choices (count).choice = csd_response;

	return;

     end collect_spy_data;

error: proc (e_code, e_message);

/* PARAMETERS */

	dcl     e_code		 fixed bin (35);	/* (input) error code associated with the error */
	dcl     e_message		 char (*);	/* (input) message to be output to user */





	xdm_xforum_error_info.name = xdm_ME;
	xdm_xforum_error_info.entry = "";
	xdm_xforum_error_info.doing = "";
	xdm_xforum_error_info.code = e_code;
	xdm_xforum_error_info.reason = e_message;

	call signal_ ("xforum_fatal_error", null (), addr (xdm_xforum_error_info), null ());

     end error;

     end xforum_dyn_menu_;
