/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(85-01-10,Davids), approve(86-02-04,MCR7350),
     audit(86-04-24,Gilcrease), install(86-04-24,MR12.0-1048):
     Changed the argument processing to call the appropriate
     xforum_user_profile$set entry with the correct argument.  Also for
     all arguments except force (fc) and no_force (nfc) to output a
     warning indicating that the argument is now obsolete.  The new
     internal procedure arg_warning does this.  Also removed the
     pointer to the args structure from the calling sequence of the
     xforum_process_args_ entry and replaced it with just a pointer to
     the xforum command arg_list.  Also removed the xforum_args include
     file.
     
     85-01-18 Davids: Corrected English in arg_warning message.
  2) change(87-04-03,LJAdams), approve(87-04-22,MCR7684),
     audit(87-04-27,Blair), install(87-08-06,MR12.1-1065):
     Changed meeting list rebuild msg.
                                                   END HISTORY COMMENTS */


xforum_list_meetings_: procedure () options (variable);

/*
   BEGIN DESCRIPTION

   function:
      This routine checks the arguments that xforum was called with and builds
      the xforum_meeting_list structure.

      xforum_list_meetings_: This entry should never be called.

      xforum_process_args_: The segment that the xforum_meeting_list structure
      is based on a temp segment created via a call to get_temp_segment_.
      The name of the "caller" used in the call is xforum_meeting_list so that
      the segment which holds the meeting list can be identified in the
      listing produced by the list_temp_segments command. The internal static
      pointer static_xforum_meeting_list_ptr is used to hold a pointer to the
      segment from one xforum invocation to another. force_mode is set by
      the user via the force or no_force control args. force indicates that
      the user wants to rebuild the meeting list even though one already
      exists. If the user indicates that he wants to reuse an existing meeting
      list the meeting_list_ok procedure is called to be sure that the
      meeting list is still valid. There are two things that can go wrong
      with a meeting list. First the users forum search rules can change. This
      is what meeting_list_ok checks for. The second is that a new meeting can
      be added to an existing directory, and existing meeting could be deleted
      or an acl can change. This is NOT checked for. There does not appear to
      be any way to do that without recording the contents of each directory.
      If the meeting list is to be built each directory in the forum search
      paths (the list of directories is obtained via a call to
      search_paths_$get) is scaned via the internal proc scan_dir. Once all the
      directories have been scaned and the list is completed it is sorted via
      the internal proc sort_output. The spy segment is built in the same
      manner as the meeting_list segment. Once built it is  loaded with some
      header info, i.e. name, date-time, arguments xforum was called with,
      number of eligible, attended, and changed meetings. The spy segment
      must be built before the meeting list segment since it is necessary to
      record the users answer if the meeting list needs to be rebuilt.

   description:
      process_args: This routine loops though the arguments that xforum was
      called with. It also accumulates a string with all the arguments in
      it for easy output into the spy structure. If an argument is found that
      is not supported a message to that effect is output and the process put
      to sleep for 4 seconds so that the user has time to read it. An invalid
      argument will not abort the xforum invocation - this is made clear in the
      message.

      scan_dir: This routine gets a list of all the branches matching the
      star names **.*.control and **.*.forum for a given directory.
      For each branch found check_forum is called to determine if it is a
      forum meeting.

      check_forum: The first thing done is a call to match_select_name to be
      sure that the meeting name does not yet appear in the meeting list. If it
      does the process stops right there for the given meeting. Next
      forum_$forum_info is called to determine if the given name is a forum
      meeting. If a non-zero error code is returned it is assumed that it is
      not a forum meeting. If a zero error code is returned it is assumed that
      it is a meeting. The uid of the meeting is compared with the uid's of
      all the meetings already in the meeting list. If the uid does not yet
      appear in the meeting list then the meeting name and the info returned by
      the call are added to the xforum_meeting_list.

      match_select_name: This procedure makes sure that each meeting in the
      meeting list has a unique name.

      sort_output: This does a simple shell sort over long name on the meeting
      list. This is done so that the meetings when listed in a dynamic menu
      come out sorted.

      meeting_list_ok: This compares the current number of forum search paths
      with the number when the meeting list was created. If they are different
      it warns the user via command_query_$yes_no and asks the user if he
      wants to rebuild the meeting list. Provided the number of paths are the
      same it will then check each path. If the current search paths are the
      same but in a different order this routine will assume that they are
      different and again a query will be asked. The question asked in both
      cases is the same. If the user indicates that he wants the meeting list
      rebuilt a message to that effect will be output. 
      If the user indicates that he does not want the meeting list rebuilt
      then the return value is the same as if no differences in the search
      paths were found. The answer given by the user is recorded in the spy
      structure. Each query has its own unique identification in the spy str.

      collect_spy_data: This is the same as every other spy_data. See
      xforum_main_options.

      clean_up: releases allocated temp segns and frees up allocated storage.

   known bugs:

   notes:

   history:
      83-??-?? Deryk Barker: Written.

      84-03-27 Davids: Modified scan_dir procedure so that after looking for
      all version 1 forums (suffix = control) it will look for version 2
      forums (suffix = forum). Also modifed check_forum procedure to take
      as an argument the suffix of the forum, i.e. control or forum. Also
      modified check_forum to set the new element forum_version in the
      xforum_meeting_list structure.

      84-03-28 Davids: Modified to set the forums (i).changed flag and
      to increment the changed count only if the meeting has been changed
      and the user is a participant (used to not check participation).

      84-05-03 Davids: Changed the length of my_long_name and my_short_name 
      from 24 characters to 32 characters. Version 2 forum names can be 26 
      characters long (forum suffix) - and a little extra incase version 3 uses
      a shorter suffix yet.

      84-05-23 Davids: Changed sort of meetings in the xforum_meeting_list
      structure to be by long_name instead of short_name, since menus are
      displayed by long name.

      84-06-04 Davids: Added code to create a spy segment in the pdir and to
      record the user_name, date_time, arguments that xforum was invoked with
      and the number of eligible, attending, and changed meetings.

      84-06-07 Davids: Modified the get_select_name internal proc to take an 
      argument which is the suffix of the meeting, i.e. control or forum,
      instead of just assuming control. Modified the call to get_select_name
      to call with the argument of control and then to call again with the
      argument of forum. This allows the user to specify either version 1 or 
      version 2 forum meeting in the xforum command line.

      84-06-13 Davids: Modified so that the spy segment is created and inited
      with 0's and blanks before process arguments is called. The actual 
      initialization of the user name, date, and number of meetings will take
      place in the xforum module after the call to xforum_process_args_.
      spy.args is set at the EGRESS label. This was changed from doing
      everything right before the EGRESS label because there are conditions
      where the initialization code was being skiped.

      84-06-13 Davids: Moved the spy setting stuff to after the EGRESS label to
      be sure that it is always set up correctly. It was right before the label
      and was not being set up correctly in some cases.

      84-06-14 Davids: Modified the star name to look for version 2 forum
      meetings in the scan_dir procedure from **.forum to **.*.forum. The old
      star name was matching on the name "forum" which is not correct.

      84-07-26 Davids: Modified so that the meeting list segement is created in
      the pdir with a name of xforum_meeting_list instead of just being a temp
      segment. Xforum termination will not delete this segment so it will be
      reused the next time the user invokes xforum. Meetings will not be
      checked for changes if the segment already exists. Also removed all the
      control arguments except multics_mode (mm) and menus. Added the control
      arg force which will cause the code to re-initialize the meeting list.
      This is needed because the user may have added a new search path or
      meeting to an existing search path. Removed the now unused internal
      procs: get_select_name, get_user_name, and get_mlist.

      84-08-13 Davids: Added a short name of fc to force. Added the nim control
      arg.

      84-09-18 Davids: Removed code which allowed this to be used as a command.
      The command allowed the user to build a meeting list before invoking
      xforum proper. However it is no longer documented and not intended to be
      part of xforum. Also removed a lot of unnecessary variable declarations
      and assignments to variables that were never used - slopy previous
      modifications where code was removed but initialization of variables
      used in that removed code were not removed.

      84-09-25 Davids: Modified so that the segments which hold the 
      xforum_meeting_list and spy structures use temporary segments instead
      of a segment in the pdir with a known name. These temp segments are not
      released when xforum exits. Pointers to these segments are kept in
      internal static so that they can be referenced in succeediing invocations.
      Also added the control arguments no_menus, no_multics_mode, nmm,
      no_force, nfc, and im. Added the internal proc meeting_list_ok which is
      called if the force_mode is not in effect, i.e. an existing meeting_list
      is to be used. Moved the creation of the spy segment up to right before
      the creation of the meeting_list segment. Added the collect_spy_data
      internal proc to record what the user answered to the meeting list update
      query.
      
      84-10-02 Davids: Added the -escape_sequences, -esc, -no_escape_sequences,
      -no_escape_sequences control arguments. Also added the output parameter
      P_spy_ptr to the process_args_ entry point. This is needed because the
      shift from a fixed name spy segment to a temp segment means that a
      pointer to the segment has to be returned to xforum.

      84-10-17 Davids: Moved the code that set the eligible, attending,
      and changed elements of the spy structure to after the spot where
      those values are determined. When the rest of the spy code was moved
      this code was moved too, and it should have stayed put.

      84-11-06 Davids: Auditing Changes 1) add a trailing underscore to the 
      module name; 2) Replace the term extension with the term suffix;
      3) Clean up some misspelling and bad wording in the header comments;
      4) Increased the length of the arg_list variable from 100 to 256 chars.
      5) replaced references to PUNT_FORUM with exit_check_forum. Also replaced
      other multiple returns in check_forum procedure with goto
      exit_check_forum. Other changes: 1) removed the xflsm name from the
      module. This was a hold over from when the module could be used as a
      command. 2) Cleaned up declarations.
   END DESCRIPTION
*/

/* PARAMETERS */

	dcl     P_arg_list_ptr	 ptr;
	dcl     P_caller		 char (*);
	dcl     P_spy_ptr		 ptr;
	dcl     P_code		 fixed bin (35);

/* EXTERNAL STATIC */

/* ENTRIES */

	dcl     com_err_		 entry () options (variable);
	dcl     command_query_$yes_no	 entry () options (variable);
	dcl     cu_$arg_count_rel	 entry (fixed bin, ptr, fixed bin (35));
	dcl     cu_$arg_ptr_rel	 entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
	dcl     date_time_		 entry (fixed bin (71), char (*));
	dcl     forum_$forum_info	 entry (char (*), char (*), char (*), fixed bin (71), ptr, fixed bin (35));
	dcl     get_system_free_area_	 entry () returns (ptr);
	dcl     get_temp_segment_	 entry (char (*), ptr, fixed bin (35));
	dcl     hcs_$star_dir_list_	 entry (char (*), char (*), fixed bin (3), ptr, fixed bin, fixed bin, ptr, ptr, fixed bin (35));
	dcl     ioa_		 entry () options (variable);
	dcl     match_star_name_	 entry (char (*), char (*), fixed bin (35));
	dcl     release_temp_segment_	 entry (char (*), ptr, fixed bin (35));
	dcl     search_paths_$get	 entry (char (*), bit (36), char (*), ptr, ptr, fixed bin, ptr, fixed bin (35));
	dcl     timer_manager_$sleep	 entry (fixed bin (71), bit (2));
	dcl     user_info_$whoami	 entry (char (*), char (*), char (*));
	dcl     xforum_user_profile$set_menu_always entry (bit (1)) returns (bit (1));
	dcl     xforum_user_profile$set_multics_mode entry (bit (1)) returns (bit (1));
	dcl     xforum_user_profile$set_handle_interactive_messages entry (bit (1)) returns (bit (1));
	dcl     xforum_user_profile$set_use_function_keys entry (bit (1)) returns (bit (1));

/* CONDITIONS */

	dcl     cleanup		 condition;

/* INTERNAL AUTOMATIC */

	dcl     ME		 char (32);
	dcl     access_name		 char (32);
	dcl     access_time		 fixed bin (71);
	dcl     arg_count		 fixed bin;
	dcl     arg_idx		 fixed bin;
	dcl     arg_list		 char (256) varying;
	dcl     arg_list_ptr	 ptr;
	dcl     arg_lth		 fixed bin (21);
	dcl     arg_ptr		 ptr;
	dcl     code		 fixed bin (35);
	dcl     dir_idx		 fixed bin;
	dcl     explicit		 bit (1) aligned;
	dcl     force_mode		 bit (1);
	dcl     forum_directory	 char (168);
	dcl     obj_name_count	 fixed bin;
	dcl     obj_name_idx	 fixed bin;
	dcl     select_names_ptr	 ptr;
	dcl     system_area_ptr	 ptr;
	dcl     unusedb1		 bit (1);
	dcl     1 fi		 aligned like forum_info;

/* INTERNAL STATIC */

	dcl     static_xforum_meeting_list_ptr ptr internal static init (null ());
	dcl     static_spy_ptr	 ptr internal static init (null ());

/* CONSTANTS */

/* BUILTINS */

          dcl     addr                   builtin;
	dcl     binary		 builtin;
	dcl     clock		 builtin;
	dcl     divide		 builtin;
	dcl     length		 builtin;
	dcl     null		 builtin;
          dcl     rtrim		 builtin;
	dcl     substr		 builtin;
          dcl     unspec                 builtin;

/* BASED */

	dcl     arg		 character (arg_lth) based (arg_ptr) unal;
	dcl     1 select_names	 aligned based (select_names_ptr),
		2 no_names	 fixed bin,
		2 pad		 bit (36) aligned,
		2 array		 (0 refer (select_names.no_names)),
		  3 forum_names	 char (32) unaligned,
		  3 exclude	 bit (1) aligned,
		  3 star_name	 bit (1) aligned,
		  3 matched	 bit (1) aligned;

/* INCLUDE FILES */

%include access_mode_values;
%page;
%include forum_info;
%page;
%include sl_control_s;
%page;
%include sl_info;
%page;
%include star_structures;
%page;
%include xforum_meeting_list;
%page;
%include xforum_ptr_struct_;
%page;
%include xforum_spy;

xforum_process_args_: entry (P_arg_list_ptr, P_caller, P_spy_ptr, P_code);

	P_code = 0;
	arg_list_ptr = P_arg_list_ptr;
	ME = P_caller;

COMMON:
	explicit, force_mode = "0"b;

	select_names_ptr, sl_info_p, star_list_branch_ptr,
	     star_list_names_ptr = null ();

	on cleanup call clean_up ();

	call get_temp_segment_ (ME, select_names_ptr, code);

	if code ^= 0
	then do;
	     P_code = code;
	     return;
	end;

	select_names.no_names = 0;

	call process_args;				/* won't return if error	      */

	access_name = "";
	access_time = clock ();

	system_area_ptr = get_system_free_area_ ();

	call search_paths_$get ("forum", sl_control_default, "", null (),
	     system_area_ptr, sl_info_version_1, sl_info_p, code);

	if code ^= 0
	then do;
	     P_code = code;
	     call com_err_ (code, ME, "Getting ""forum"" search list.");
	     return;
	end;

	if static_spy_ptr = null ()
	then call get_temp_segment_ ("xforum_spy", static_spy_ptr, code);
	if code ^= 0
	then do;
	     call com_err_ (code, "xforum", "Could not make spy segment");
	     P_code = code;
	     goto EGRESS;
	end;
	spy_ptr = static_spy_ptr;
	P_spy_ptr = static_spy_ptr;

	spy.version = SPY_VERSION_1;
	call user_info_$whoami (spy.user_name, "", "");
	call date_time_ (clock (), spy.date_time);
	spy.args = arg_list;
	spy.count = 0;

	if static_xforum_meeting_list_ptr = null ()
	then do;
	     call get_temp_segment_ ("xforum_meeting_list", static_xforum_meeting_list_ptr, code);
	     force_mode = "1"b;			/* no need to check meeting list - we just created it */
	end;
	if code ^= 0
	then do;
	     P_code = code;
	     call com_err_ (code, ME, "creating xforum meeting list segment");
	     goto EGRESS;
	end;
	xforum_meeting_list_ptr = static_xforum_meeting_list_ptr;

	if ^force_mode
	then do;
	     if meeting_list_ok (xforum_meeting_list_ptr, sl_info_p)
	     then goto EGRESS;
	end;

	no_selected, no_participant, no_changed, current_selected,
	     current_participant, current_changed = 0;
						/* start with a clean slate	      */

	do dir_idx = 1 to sl_info_p -> sl_info.num_paths;

	     if sl_info.paths (dir_idx).code = 0 then do;
		forum_directory = sl_info.paths (dir_idx).pathname;
		call scan_dir ();
	     end;
	end;

	spy.eligible = no_selected;
	spy.attending = no_participant;
	spy.changed = no_changed;

	call sort_output ();

	xforum_meeting_list.npaths = sl_info_p -> sl_info.num_paths;
	do dir_idx = 1 to sl_info_p -> sl_info.num_paths;
	     xforum_meeting_list.paths (dir_idx) = sl_info.paths (dir_idx).pathname;
	end;

	xforum_meeting_list.date_time = clock ();

EGRESS:
	call clean_up ();

	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
/*					      */
/* This procedure check the arguments and their         */
/* consistency				      */
/*					      */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

process_args:
     proc;

	call cu_$arg_count_rel (arg_count, arg_list_ptr, code);
	if code ^= 0
	then do;
	     P_code = code;
	     call com_err_ (code, ME);
	     goto EGRESS;
	end;

	arg_list = "";
	do arg_idx = 1 to arg_count;

	     call cu_$arg_ptr_rel (arg_idx, arg_ptr, arg_lth, (0),
		arg_list_ptr);

	     arg_list = arg_list || arg || " ";

	     if arg = "-menus"
	     then do;
		call arg_warning (arg);
		unusedb1 = xforum_user_profile$set_menu_always ("1"b);
	     end;
	     else
		if arg = "-no_menus"
	     then do;
		call arg_warning (arg);
		unusedb1 = xforum_user_profile$set_menu_always ("0"b);
	     end;
	     else
		if (arg = "-multics_mode" | arg = "-mm")
	     then do;
		call arg_warning (arg);
		unusedb1 = xforum_user_profile$set_multics_mode ("1"b);
	     end;
	     else
		if (arg = "-no_multics_mode" | arg = "-nmm")
	     then do;
		call arg_warning (arg);
		unusedb1 = xforum_user_profile$set_multics_mode ("0"b);
	     end;
	     else
		if (arg = "-nim" | arg = "-no_interactive_messages")
	     then do;
		call arg_warning (arg);
		unusedb1 = xforum_user_profile$set_handle_interactive_messages ("0"b);
	     end;
	     else
		if (arg = "-im" | arg = "-interactive_messages")
	     then do;
		call arg_warning (arg);
		unusedb1 = xforum_user_profile$set_handle_interactive_messages ("1"b);
	     end;
	     else
		if (arg = "-esc" | arg = "-escape_sequences")
	     then do;
		call arg_warning (arg);
		unusedb1 = xforum_user_profile$set_use_function_keys ("0"b);
	     end;
	     else
		if (arg = "-nesc" | arg = "-no_escape_sequences")
	     then do;
		call arg_warning (arg);
		unusedb1 = xforum_user_profile$set_use_function_keys ("1"b);
	     end;
	     else if (arg = "-force" | arg = "-fc")
	     then force_mode = "1"b;
	     else if (arg = "-no_force" | arg = "-nfc")
	     then force_mode = "0"b;
	     else do;
		call com_err_ (0, ME, "^a is not a supported argument, continuing setup.", arg);
		call timer_manager_$sleep (4, "11"b);
	     end;
	end;

     end process_args;

arg_warning: proc (aw_arg);

/* PARAMETERS */

	dcl     aw_arg		 char (*);


	call ioa_ ("The control argument ""^a"" is now obsolete.", aw_arg);
	call ioa_ ("  It will continue to be supported in the MR12 release.");
	call ioa_ ("  The Personalize Executive Forum menu can be used to set this option.");
	call ioa_ ("Continuing setup.^/");

	call timer_manager_$sleep (4, "11"b);

	return;

     end arg_warning;

scan_dir: procedure ();

	declare object_idx		 fixed bin;

	star_select_sw = star_ALL_ENTRIES;

	call hcs_$star_dir_list_ (forum_directory, "**.*.control",
	     star_select_sw, system_area_ptr, star_branch_count,
	     star_link_count, star_list_branch_ptr, star_list_names_ptr,
	     code);
	if code = 0 then
	     do object_idx = 1 to star_branch_count + star_link_count;
		obj_name_idx = star_dir_list_branch.nindex (object_idx);
		obj_name_count = star_dir_list_branch.nnames (object_idx);
		call check_forum (".control");
	     end;

/* Version 2 forums are directories with names of <meeting_name>.forum */

	call hcs_$star_dir_list_ (forum_directory, "**.*.forum",
	     star_select_sw, system_area_ptr, star_branch_count,
	     star_link_count, star_list_branch_ptr, star_list_names_ptr,
	     code);
	if code = 0 then
	     do object_idx = 1 to star_branch_count + star_link_count;
		obj_name_idx = star_dir_list_branch.nindex (object_idx);
		obj_name_count = star_dir_list_branch.nnames (object_idx);
		call check_forum (".forum");
	     end;

	return;

     end scan_dir;

check_forum: procedure (ck_suffix);

	dcl     ck_suffix		 char (*);

	declare my_long_name	 char (32) varying,
	        my_short_name	 char (32) varying,
	        forum_idx		 fixed bin;

	explicit = "0"b;
	if select_names.no_names > 0 then
	     if ^match_select_name () then
		goto exit_check_forum;

	my_long_name =
	     substr (star_list_names (obj_name_idx), 1,
	     length (rtrim (star_list_names (obj_name_idx)))
	     - length (ck_suffix));

	if obj_name_count < 2 then
	     my_short_name = "";
	else my_short_name =
		substr (star_list_names (obj_name_idx + 1), 1,
		length (rtrim (star_list_names (obj_name_idx + 1)))
		- length (ck_suffix));

	fi.version = forum_info_version_1;
	call forum_$forum_info (forum_directory,
	     star_list_names (obj_name_idx), access_name, access_time,
	     addr (fi), code);
	if code ^= 0
	then goto exit_check_forum;

	do forum_idx = 1 to no_selected;
	     if fi.forum_uid = forums (forum_idx).uid then
		goto exit_check_forum;
	end;

ADD_FORUM:
	no_selected = no_selected + 1;

	forums (no_selected).long_name = my_long_name;
	forums (no_selected).directory = forum_directory;
	if ck_suffix = ".forum"
	then forums (no_selected).forum_version = 2;
	else forums (no_selected).forum_version = 1;
	forums (no_selected).uid = fi.forum_uid;
	unspec (forums (no_selected).flags) = ""b;
						/* all flags off */
	forums (no_selected).eligible = fi.eligible;
	forums (no_selected).removed = fi.removed;
	forums (no_selected).notify = fi.notify;
	forums (no_selected).read_only = fi.read_only;
	forums (no_selected).attended = (fi.last_time_attended ^= 0);
	forums (no_selected).participant =
	     forums (no_selected).attended & ^fi.removed;
	if forums (no_selected).participant then
	     no_participant = no_participant + 1;

	if my_short_name = "" then do;
	     forums (no_selected).short_name = my_long_name;
	     forums (no_selected).two_names = "0"b;
	end;
	else do;
	     forums (no_selected).short_name = my_short_name;
	     forums (no_selected).two_names = "1"b;
	end;

	forums (no_selected).chairman =
	     rtrim (fi.chairman.username) || "." || fi.chairman.project;


	if (fi.changes_count > 0) & forums (no_selected).participant
	then do;
	     no_changed = no_changed + 1;
	     forums (no_selected).changed = "1"b;
	end;


exit_check_forum:
	return;

     end check_forum;

match_select_name:
     procedure () returns (bit (1) aligned);

	declare accepting		 bit (1) aligned,
	        match		 bit (1) aligned,
	        name_idx		 fixed bin,
	        star_idx		 fixed bin;

	accepting = exclude (1);

	do name_idx = 1 to select_names.no_names;

	     if accepting = select_names (name_idx).exclude then do;
		match = "0"b;
		do star_idx = obj_name_idx
		     to obj_name_idx + obj_name_count - 1 while (^match);

		     if star_name (name_idx) then do;
			call match_star_name_ (
			     star_list_names (star_idx),
			     forum_names (name_idx), code);
			if code = 0 then
			     match = "1"b;
		     end;
		     else if forum_names (name_idx)
			= star_list_names (star_idx) then
			explicit, match = "1"b;
		     matched (name_idx) = matched (name_idx) | match;
		end;

		if match then
		     accepting = ^exclude (name_idx);
	     end;
	end;

	return (accepting);

     end match_select_name;

/* The following routine is a simple shell sort by long_name.  */

sort_output:
     procedure ();

	dcl     (i, k, l)		 fixed bin;
	dcl     1 t		 like xforum_meeting_list.forums;

	k, l = no_selected;
	do while (k <= l);
	     l = -1;
	     do i = 2 to k;
		l = i - 1;
		if forums (l).long_name > forums (i).long_name then do;
		     t = forums (l);
		     forums (l) = forums (i);
		     forums (i) = t;
		     k = l;
		end;
	     end;
	end;

	return;

     end sort_output;

meeting_list_ok: proc (mlo_xforum_meeting_list_ptr, mlo_sl_info_p) returns (bit (1));

/* PARAMETERS */

	dcl     mlo_xforum_meeting_list_ptr ptr;
	dcl     mlo_sl_info_p	 ptr;

/* AUTOMATIC */

	dcl     mlo_ans_yes		 bit (1);
	dcl     mlo_i		 fixed bin;
	dcl     mlo_meeting_list_ok	 bit (1);
	dcl     mlo_same		 bit (1);
	dcl     mlo_search_paths_str_ptr ptr;

/* BASED */

	dcl     01 mlo_search_paths_str based (mlo_search_paths_str_ptr),
		02 npaths		 fixed bin,
		02 paths		 (npaths) char (168) varying;

	mlo_meeting_list_ok = "1"b;

	xforum_meeting_list_ptr = mlo_xforum_meeting_list_ptr;
	sl_info_p = mlo_sl_info_p;

	mlo_search_paths_str_ptr = addr (xforum_meeting_list.npaths);
	if mlo_search_paths_str.npaths ^= sl_info.num_paths
	then do;
	     call command_query_$yes_no (mlo_ans_yes, 0, "",
		"Your  Forum search paths are the list of directories which are seached for^/" ||
		"forum  meetings.   The  forum  meetings found are saved in a meeting list.^/" ||
		"This  list  of  directories  has  been  changed since the meeting list was^/" ||
		"created.   If  you  do  not  update  your meeting list it is possible that^/" ||
		"meetings which you could attend will not be listed.^/^/" ||
		"Your forum search paths have changed.^/" ||
		"   Do you want to update your meeting list to reflect those changes? ",
		"Your forum search paths have changed.^/" ||
		"   Do you want to update your meeting list to reflect those changes? ");
	     if mlo_ans_yes
	     then do;
		mlo_meeting_list_ok = "0"b;
		call collect_spy_data (SPY_AT_13, "yes");
	     end;
	     else call collect_spy_data (SPY_AT_13, "no");
	     goto exit_meeting_list_ok;
	end;

	mlo_same = "1"b;
	do mlo_i = 1 to mlo_search_paths_str.npaths while (mlo_same);
	     if mlo_search_paths_str.paths (mlo_i) ^= sl_info.paths (mlo_i).pathname
	     then mlo_same = "0"b;
	end;

	if ^mlo_same
	then do;
	     call command_query_$yes_no (mlo_ans_yes, 0, "",
		"Your  Forum search paths are the list of directories which are seached for^/" ||
		"forum  meetings.   The  forum  meetings found are saved in a meeting list.^/" ||
		"This  list  of  directories  has  been  changed since the meeting list was^/" ||
		"created.   If  you  do  not  update  your meeting list it is possible that^/" ||
		"meetings which you could attend will not be listed.^/^/" ||
		"Your forum search paths have changed.^/" ||
		"   Do you want to update your meeting list to reflect those changes? ",
		"Your forum search paths have changed.^/" ||
		"   Do you want to update your meeting list to reflect those changes? ");
	     if mlo_ans_yes
	     then do;
		mlo_meeting_list_ok = "0"b;
		call collect_spy_data (SPY_AT_14, "yes");
	     end;
	     else call collect_spy_data (SPY_AT_14, "no");
	     goto exit_meeting_list_ok;
	end;

exit_meeting_list_ok:

	if ^mlo_meeting_list_ok
	then call ioa_ ("^/Your meeting list is being rebuilt.  Please wait for menu to be displayed.^/");

	return (mlo_meeting_list_ok);

     end meeting_list_ok;

collect_spy_data: proc (csd_where, csd_response);

/* PARAMETERS */

	dcl     csd_where		 fixed bin;	/* (input) */
	dcl     csd_response	 char (*);	/* (input) */

	spy.count = spy.count + 1;
	spy.choices (spy.count).at = csd_where;
	spy.choices (spy.count).choice = csd_response;

	return;

     end collect_spy_data;

clean_up:
     procedure ();

	if select_names_ptr ^= null () then
	     call release_temp_segment_ (ME, select_names_ptr, (0));

	if star_list_branch_ptr ^= null () then do;
	     if star_list_names_ptr ^= null () then
		free star_list_names;
	     free star_dir_list_branch;
	end;

	if sl_info_p ^= null () then
	     free sl_info;

	return;

     end clean_up;

     end xforum_list_meetings_;
