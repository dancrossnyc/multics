/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(85-02-06,Davids), approve(86-02-04,MCR7350),
     audit(86-04-24,Gilcrease), install(86-04-24,MR12.0-1048):
     Extracted from the xforum_main_options module.
     
     85-02-13 Davids: Changed name to xforum_getting_started_menu
     
     85-02-13 Davids: Changed calling sequence of
     xforum_help_line_$push to include the new F3_message argument.
     
     85-02-14 Davids: Rearranged the code to add the
     general_help_topics and getting_started entry points and the do_it
     internal proc.  The do_it proc is basically the original code with
     changes to handle both menus.  Added ability to use F2 and F3 to
     exit the menu.
     
     85-02-26 Davids: Replaced the calls to ioa_ to output the getting
     started introduction with a call to xforum_help_$display.  The
     introductory text has been added to the xforum_getting_started
     info file.
     
     85-04-17 Davids: Added the text " g:Return to XXX menu" to the
     help line where XXX is the name of the previous menu.  Its the
     same text as the menu option.
     
     85-06-27 Davids: Commented declarations and updated header comments.
                                                   END HISTORY COMMENTS */

xforum_help_menus: proc;

/*
   BEGIN DESCRIPTION

   function:
      This module manages the getting_started and general_help_topics menus.
      It displays them, processes user choices, and destroys them when done.

   description of entry points:
      xforum_help_menus:
         input:
         output:
         It is an error to call the main entry point. The xforum_fatal_error
         condition will be signaled with an "internal programming error" error
         message.

      getting_started:
         input:   ptr                  pointer to spy structure
                  ptr                  pointer to area xforum uses to allocate
                                       things in
         output:
         This entry fills in the choice array with the getting_started menu
         choices and then calls the internal proc do_it. The prameters of
         do_it define the rest of the info to define the getting_started menu.
         There is only one possible menu that can be used to get to the
         getting_started menu so there is no need to pass this entry the
         name of the previous menu.

      general_help_topics:
         input:   ptr                 pointer to spy structure
                  ptr                 pointer to area xforum uses to allocate
                                      things in
                  char (*)            name of menu that is currently displayed
         output:
         This entry fills in the choice array with the general_help_topics menu
         choices and then calls the internal proc do_it. The prameters of
         do_it define the rest of the info to define the general_help_topics
         menu.

   description of internal procedures:
      do_it: This procedure creates the menu, updates the contents of the
      status window with the menu title, displays the menu and pushes a new
      help line. If the menu being displayed is the getting started menu
      is also displays the Xforum introduction below the menu.  It then
      gets user choices, displays the appropriate help text, and destroys the
      menu and pops the help line before returning. The user can exit via the
      last menu option or via the first or third function keys. The help
      function is available as are quit, redisplay and multics mode (if the
      user's profile allows it). A quit condition handler is set up to trap
      quits and redisplay the menu. An xforum_redisplay_menu condition is
      set up to actually redisplay the menu. The user's responses are recorded
      in the spy structure (including quits).

      collect_spy_data: Similar to all the other collect_spy_data procedures.
      See the xforum module. Note that this procedure is duplicated so as to
      save the expense of an external call for a commonly executed, very short
      program, whose output is used only during development or special site
      exposure.

      error: Similar to all other error procedures. It records in an internal
      static structure the details of an error and then signals the
      xforum_fatal_error condition.
END DESCRIPTION
*/

/* PARAMETERS */

/* EXTERNAL STATIC */

/* ENTRIES */

	dcl     signal_		 entry () options (variable);
	dcl     window_$bell	 entry (ptr, fixed bin (35));
	dcl     window_$clear_window	 entry (ptr, fixed bin (35));
	dcl     xforum_create_menu_	 entry ((*) char (*) var, ptr, ptr, fixed bin (35));
	dcl     xforum_help_$display	 entry (char (*), char (*));
	dcl     xforum_help_$get_help	 entry (ptr, char (*), (*) char (*) var, ptr, ptr);
	dcl     xforum_help_line_$pop	 entry options (variable);
	dcl     xforum_help_line_$push entry (bit (8), char (*), char (*), char (*));
	dcl     xforum_multics_mode	 entry (fixed bin);
	dcl     xforum_redisplay_	 entry options (variable);
	dcl     xforum_status_$redisplay entry (fixed bin (35));
	dcl     xforum_status_$update_banner entry (char (*));
	dcl     xforum_status_$update_title entry (char (*));
	dcl     xforum_user_profile$get_multics_mode entry () returns (bit (1));
	dcl     xforum_window_mgr$check_window_status entry options (variable);
	dcl     xforum_window_mgr$menu_display entry (ptr);
	dcl     xforum_window_mgr$menu_get_choice entry (ptr, bit (1) aligned, fixed bin);
	dcl     xforum_window_mgr$resynch_windows entry (fixed bin, bit (1));

/* CONDITIONS */

	dcl     exit_executive_forum	 condition;
	dcl     quit		 condition;
	dcl     xforum_redisplay_menu	 condition;

/* INTERNAL AUTOMATIC */

	dcl     xhm_choices		 (16) char (40) varying;
						/* array to contain the text of the */
						/* menu options. Both menus have 16 options */

/* INTERNAL STATIC */

	dcl     01 xhm_xforum_error_info like xforum_error_info;
						/* used to record error info to be output to the user */

/* CONSTANTS */

	dcl     xhm_MENU_HEIGHT	 fixed bin init (9) internal static options (constant);
						/* number of lines required for the display of both menus */
						/* eight for options, 1 for line of dashes at bottom */

/* BUILTINS */

	dcl     addr		 builtin;
	dcl     char		 builtin;
	dcl     ltrim		 builtin;
	dcl     null		 builtin;
	dcl     rtrim		 builtin;
	dcl     translate		 builtin;

/* INCLUDE FILES */

%include menu_dcls;
%page;
%include xforum_error_info;
%page;
%include xforum_spy;
%page;
%include xforum_windows;

	call error (0, "Internal programming error - xforum_help_menus$xforum_help_menus called.");

getting_started: entry (gs_spy_ptr, gs_xforum_system_area_ptr);

/* PARAMETERS */

	dcl     gs_spy_ptr		 ptr;		/* (input) pointer to spy structure */
	dcl     gs_xforum_system_area_ptr ptr;		/* (input) pointer to area xforum uses to allocate things in */





	xhm_choices (1) = "Getting To Know Your Terminal";
	xhm_choices (2) = "How To Exit Executive Forum";
	xhm_choices (3) = "How To Get Help";
	xhm_choices (4) = "Responding To Prompts";
	xhm_choices (5) = "How To Correct Typos";
	xhm_choices (6) = "Getting Around The Menus";
	xhm_choices (7) = "The 2 Attending Menus";
	xhm_choices (8) = "What Are Eligible Meetings";
	xhm_choices (9) = "What Are Attended Meetings";
	xhm_choices (10) = "What Are Changed Meetings";
	xhm_choices (11) = "What Is The Current Comment";
	xhm_choices (12) = "Selecting The Current Comment";
	xhm_choices (13) = "Entering Comments";
	xhm_choices (14) = "Personalizing The System";
	xhm_choices (15) = "Multics Command Level Mode";
	xhm_choices (16) = "Go To Executive Forum Menu";


	call do_it (gs_spy_ptr, gs_xforum_system_area_ptr, SPY_AT_12, xhm_MENU_HEIGHT,
	     "Executive Forum", "Getting Started", "10010000"b, "Executive Forum");

	return;

general_help_topics: entry (ght_spy_ptr, ght_xforum_system_area_ptr, ght_prev_menu_name);

/* PARAMETERS */

	dcl     ght_spy_ptr		 ptr;		/* (input) pointer to spy structure */
	dcl     ght_xforum_system_area_ptr ptr;		/* (input) pointer to area xforum uses to allocate things in */
	dcl     ght_prev_menu_name	 char (*);	/* (input) name of menu that is currently displayed */





	xhm_choices (1) = "How To Exit Executive Forum";
	xhm_choices (2) = "How To Get Help";
	xhm_choices (3) = "Responding To Prompts";
	xhm_choices (4) = "How To Correct Typos";
	xhm_choices (5) = "Getting Around The Menus";
	xhm_choices (6) = "The 2 Attending Menus";
	xhm_choices (7) = "What Are Eligible Meetings";
	xhm_choices (8) = "What Are Attended Meetings";
	xhm_choices (9) = "What Are Changed Meetings";
	xhm_choices (10) = "What Is The Current Comment";
	xhm_choices (11) = "Selecting The Current Comment";
	xhm_choices (12) = "Entering Comments";
	xhm_choices (13) = "Personalizing The System";
	xhm_choices (14) = "Multics Command Level Mode";
	xhm_choices (15) = "Changes Between Version 1 And 2";
	xhm_choices (16) = "Return To " || ght_prev_menu_name || " Menu";



	call do_it (ght_spy_ptr, ght_xforum_system_area_ptr, SPY_AT_3, xhm_MENU_HEIGHT,
	     "General Help", "Topics", "10010000"b, ght_prev_menu_name);

	return;

do_it: proc (di_spy_ptr, di_xforum_system_area_ptr, di_spy_location, di_menu_height,
	di_title, di_banner, di_help_line_flags, di_return_to);

/* PARAMETERS */

	dcl     di_spy_ptr		 ptr;		/* (input) pointer to spy structure */
	dcl     di_xforum_system_area_ptr ptr;		/* (input) pointer to area xforum uses to allocate things in */
	dcl     di_spy_location	 fixed bin;	/* (input) identifies the menu about */
						/*         to be displayed for the spy record */
	dcl     di_menu_height	 fixed bin;	/* (input) number of lines in the menu about to be displayed */
	dcl     di_title		 char (*);	/* (input) first line of status window, giving first */
						/*         line of title of menu about to be displayed */
	dcl     di_banner		 char (*);	/* (input) second line of status window giving second */
						/*         line of title of menu about to be displayed */
	dcl     di_help_line_flags	 bit (8);		/* (input) flags used to control which function keys */
						/*         will be displayed on the help line */
	dcl     di_return_to	 char (*);	/* (input) name of menu currently displayed */

/* AUTOMATIC */

	dcl     di_choice		 fixed bin;	/* user's choice from the help menu */
	dcl     di_code		 fixed bin (35);	/* (standard error code */
	dcl     di_fkey		 bit (1) aligned;	/* ("1"b implies that users choice refers to a function key */
	dcl     di_menu_ptr		 ptr;		/* pointer to help menu menu structure */
	dcl     di_multics_mode	 bit (1);		/* "1"b implies that the user can go into multics mode */
	dcl     di_unused_fb	 fixed bin;	/* unused output argument */

	dcl     01 di_menu_requirements like menu_requirements;
						/* structure describing the rerquirements of the help menu */
						/* output by menu_$create but not used */

/* CONSTANTS */

	dcl     (
	        di_FIRST_MENU	 fixed bin init (2),/* function keys for goto first menu */
	        di_FIRST_MENU2	 fixed bin init (9),
	        di_FOREVER		 bit (1) init ("1"b), /* makes while loop loop forever */
	        di_HELP		 fixed bin init (1),/* function key for help */
	        di_HELP_FILE	 char (22) init ("xforum_getting_started"),
						/* name of the help file that contains */
						/* the help messages for these menus */
	        di_MULTICS		 fixed bin init (8),/* function keys for multics mode */
	        di_MULTICS2		 fixed bin init (15),
	        di_PREV_MENU	 fixed bin init (3),/* function keys for goto previous menu */
	        di_PREV_MENU2	 fixed bin init (10),
	        di_QUIT		 fixed bin init (4),/* function keys for quiting xforum */
	        di_QUIT2		 fixed bin init (11),
	        di_REDISPLAY	 fixed bin init (5),/* function keys for redisplaying the screen */
	        di_REDISPLAY2	 fixed bin init (12)
	        )			 internal static options (constant);

	di_multics_mode = xforum_user_profile$get_multics_mode ();
	spy_ptr = di_spy_ptr;

	on quit
	     begin;
		call xforum_window_mgr$check_window_status;
		call window_$bell (xforum_windows.menu.iocb, (0));
		call xforum_status_$redisplay ((0));
		call collect_spy_data (di_spy_location, "QUIT");
		goto getting_started_get_choice;
	     end;

	di_menu_requirements.version = menu_requirements_version_1;
	call xforum_create_menu_ (xhm_choices, addr (di_menu_requirements), di_menu_ptr, di_code);

	call xforum_window_mgr$resynch_windows (di_menu_height, "1"b);

	call xforum_status_$update_title (di_title);
	call xforum_status_$update_banner (di_banner);
	call xforum_help_line_$push (di_help_line_flags, "", "", "  g:Return to " || di_return_to || " menu");
	call xforum_status_$redisplay ((0));

	call xforum_window_mgr$menu_display (di_menu_ptr);

	on xforum_redisplay_menu call xforum_window_mgr$menu_display (di_menu_ptr);

	if di_title = "Executive Forum"
	then call xforum_help_$display (di_HELP_FILE, "Introduction");

getting_started_get_choice:
	do while (di_FOREVER);
	     call xforum_window_mgr$menu_get_choice (di_menu_ptr, di_fkey, di_choice);
	     call window_$clear_window (xforum_windows.bottom.iocb, (0));

	     if di_fkey
	     then call collect_spy_data (di_spy_location, "F" || rtrim (ltrim (char (di_choice))));
	     else call collect_spy_data (di_spy_location, rtrim (ltrim (char (di_choice))));

	     if di_fkey
	     then do;
		if di_choice = di_HELP
		then do;
		     call xforum_help_$get_help (di_menu_ptr, di_banner, xhm_choices,
			spy_ptr, di_xforum_system_area_ptr);
		     call xforum_status_$update_title (di_title);
		     call xforum_status_$update_banner (di_banner);
		     call xforum_status_$redisplay ((0));
		     call xforum_window_mgr$menu_display (di_menu_ptr);
		end;
		else
		     if di_choice = di_FIRST_MENU | di_choice = di_FIRST_MENU2
		then goto exit_do_it;
		else
		     if di_choice = di_PREV_MENU | di_choice = di_PREV_MENU2
		then goto exit_do_it;
		else
		     if di_choice = di_QUIT | di_choice = di_QUIT2
		then signal exit_executive_forum;
		else if di_choice = di_REDISPLAY | di_choice = di_REDISPLAY2
		then call xforum_redisplay_;
		else if (di_choice = di_MULTICS | di_choice = di_MULTICS2) & di_multics_mode
		then do;
		     call xforum_help_line_$push (di_help_line_flags, "", "", "");
		     call xforum_multics_mode (di_unused_fb);
		     call xforum_window_mgr$resynch_windows (di_menu_height, "0"b);
		     call xforum_help_line_$pop;
		     call xforum_status_$redisplay ((0));
		     call xforum_window_mgr$menu_display (di_menu_ptr);
		     goto getting_started_get_choice;
		end;
		else call window_$bell (xforum_windows.menu.iocb, (0));
	     end;
	     else do;
		if di_choice < 16
		then call xforum_help_$display (di_HELP_FILE, translate (xhm_choices (di_choice), "_", " "));
		else goto exit_do_it;
	     end;
	end;

exit_do_it:
	call menu_$destroy (di_menu_ptr, (0));

	call window_$clear_window (xforum_windows.menu.iocb, (0));

	call xforum_help_line_$pop;

	return;

     end do_it;

collect_spy_data: proc (csd_where, csd_response);

/* PARAMETERS */

	dcl     csd_where		 fixed bin;	/* (input) location response was collected */
	dcl     csd_response	 char (*);	/* (input) user's response */





	spy.count = spy.count + 1;
	spy.choices (count).at = csd_where;
	spy.choices (count).choice = csd_response;

	return;

     end collect_spy_data;

error: proc (e_code, e_reason);


/* PARAMETERS */

	dcl     e_code		 fixed bin (35);	/* (input) error code associated with error */
	dcl     e_reason		 char (512);	/* (input) message to be output to user */





	xhm_xforum_error_info.name = "xforum_help_menus";
	xhm_xforum_error_info.entry = "";
	xhm_xforum_error_info.doing = "";
	xhm_xforum_error_info.code = e_code;
	xhm_xforum_error_info.reason = e_reason;

	call signal_ ("xforum_fatal_error", null (), addr (xhm_xforum_error_info), null ());

     end error;

     end xforum_help_menus;
