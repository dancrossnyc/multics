/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */

/* Encodes/decodes status codes in imft_et_ into/from forms which may be transmitted between systems */

/* Created:  April 1982 by G. Palter */
/* Modified: July 1982 by G. Palter as part of true AIM support */


/****^  HISTORY COMMENTS:
  1) change(88-10-26,Beattie), approve(88-08-01,PBF7948),
     audit(88-10-27,Farley), install(88-10-27,MR12.2-1195):
     Added support for imft_et_$non_matching_versions in 4.0 version of
     IMFT driver.
                                                   END HISTORY COMMENTS */


/* format: style4,delnl,insnl,ifthenstmt,ifthen */

imft_convert_status_code_:
     procedure ();

	return;					/* not an entrypoint */


/* Parameters */

dcl  P_local_code fixed binary (35) parameter;		/* encode */
dcl  P_remote_code fixed binary (35) parameter;		/* decode */


/* Remaining declarations */

/* format: off */
dcl (error_table_$ai_no_common_max, error_table_$ai_outside_common_range, error_table_$unimplemented_version,
     imft_et_$cant_access_pnt, imft_et_$cant_get_channel_names, imft_et_$computed_ceiling_mismatch,
     imft_et_$explicit_ceiling_mismatch, imft_et_$explicit_floor_mismatch, imft_et_$no_card_password, imft_et_$no_person_id, imft_et_$non_matching_ids,
     imft_et_$non_matching_passwords, imft_et_$not_synchronized, imft_et_$process_authorization_too_low,
     imft_et_$reply_pending, imft_et_$timeout, imft_et_$unknown_status_code, imft_et_$non_matching_versions)
	fixed binary (35) external;
/* format: on */

/**/

/* Converts a status code from imft_et_ into a form which may be transferred across an IMFT link */

encode:
     entry (P_local_code) returns (fixed binary (35));

	if P_local_code = 0 then return (0);
	else if P_local_code = error_table_$ai_no_common_max then return (1);
	else if P_local_code = error_table_$ai_outside_common_range then return (2);
	else if P_local_code = error_table_$unimplemented_version then return (3);
	else if P_local_code = imft_et_$cant_access_pnt then return (4);
	else if P_local_code = imft_et_$computed_ceiling_mismatch then return (5);
	else if P_local_code = imft_et_$explicit_ceiling_mismatch then return (6);
	else if P_local_code = imft_et_$no_card_password then return (7);
	else if P_local_code = imft_et_$no_person_id then return (8);
	else if P_local_code = imft_et_$non_matching_ids then return (9);
	else if P_local_code = imft_et_$non_matching_passwords then return (10);
	else if P_local_code = imft_et_$not_synchronized then return (11);
	else if P_local_code = imft_et_$process_authorization_too_low then return (12);
	else if P_local_code = imft_et_$reply_pending then return (13);
	else if P_local_code = imft_et_$timeout then return (14);
	else if P_local_code = imft_et_$cant_get_channel_names then return (15);
	else if P_local_code = imft_et_$explicit_floor_mismatch then return (16);
	else if P_local_code = imft_et_$non_matching_versions then return (17);
	else if P_local_code = imft_et_$unknown_status_code then return (-1);
	else return (-1);				/* unrecognized code */



/* Converts a code received from the remote system back into a status code in imft_et_ */

decode:
     entry (P_remote_code) returns (fixed binary (35));

	if P_remote_code = 0 then return (0);
	else if P_remote_code = 1 then return (error_table_$ai_no_common_max);
	else if P_remote_code = 2 then return (error_table_$ai_outside_common_range);
	else if P_remote_code = 3 then return (error_table_$unimplemented_version);
	else if P_remote_code = 4 then return (imft_et_$cant_access_pnt);
	else if P_remote_code = 5 then return (imft_et_$computed_ceiling_mismatch);
	else if P_remote_code = 6 then return (imft_et_$explicit_ceiling_mismatch);
	else if P_remote_code = 7 then return (imft_et_$no_card_password);
	else if P_remote_code = 8 then return (imft_et_$no_person_id);
	else if P_remote_code = 9 then return (imft_et_$non_matching_ids);
	else if P_remote_code = 10 then return (imft_et_$non_matching_passwords);
	else if P_remote_code = 11 then return (imft_et_$not_synchronized);
	else if P_remote_code = 12 then return (imft_et_$process_authorization_too_low);
	else if P_remote_code = 13 then return (imft_et_$reply_pending);
	else if P_remote_code = 14 then return (imft_et_$timeout);
	else if P_remote_code = 15 then return (imft_et_$cant_get_channel_names);

	else if P_remote_code = 16 then return (imft_et_$explicit_floor_mismatch);
	else if P_remote_code = 17 then return (imft_et_$non_matching_versions);
	else if P_remote_code = -1 then return (imft_et_$unknown_status_code);
	else return (imft_et_$unknown_status_code);	/* an unknown code got through */

     end imft_convert_status_code_;
