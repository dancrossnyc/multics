/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */

/* Displays status of Inter-Multics File Transfer (IMFT) requests */

/* Created:  April 1982 by G. Palter */
/* Modified: 16 July 1982 by G. Palter to rename "-entry_name" to "-entryname" */
/* Modified: March 1983 by Robert Coren to recognize "-source" and to list all queues by default */
/* Modified: February 23, 1984 by C. Marker to use version 5 message segments */


/****^  HISTORY COMMENTS:
  1) change(88-07-02,Beattie), approve(88-08-01,MCR7948),
     audit(88-10-11,Farley), install(88-10-14,MR12.2-1165):
     Display new options: -delete, -extend and -update.
                                                   END HISTORY COMMENTS */


/* format: style4,delnl,insnl,ifthenstmt,ifthen */

list_imft_requests:
lir:
     procedure () options (variable);

dcl  system_area area based (system_area_ptr);
dcl  system_area_ptr pointer;

dcl  1 local_sb aligned like status_branch;
dcl  1 local_mmi aligned like mseg_message_info;

dcl  1 message_ids (total_message_ids) aligned based (message_ids_ptr),
       2 id bit (72),
       2 position fixed binary,
       2 pad bit (36);
dcl  message_ids_ptr pointer;
dcl  total_message_ids fixed binary;

dcl  argument character (argument_lth) unaligned based (argument_ptr);
dcl  id_qualifier character (id_qualifier_lth) unaligned based (id_qualifier_ptr);
dcl  (the_argument_list, argument_ptr, id_qualifier_ptr) pointer;
dcl  (argument_lth, id_qualifier_lth) fixed binary (21);
dcl  (n_arguments, id_qualifier_idx, argument_idx) fixed binary;

dcl  1 n_selections aligned,
       2 path fixed binary,				/* # of pathname specifiers */
       2 entry fixed binary,				/* # of -entry STR specifiers */
       2 id fixed binary;				/* # of request ID specifiers */
dcl  process_selections bit (1) aligned;

dcl  array_bound fixed binary;

dcl  request_type character (24);
dcl  foreign_system character (24);
dcl  remote bit (1) aligned;
dcl  (queue_indeces, total_requests, selected_requests, first_id_indeces) dimension (4) fixed binary;
dcl  (queue, default_queue, max_queues, queue_idx) fixed binary;
dcl  (generic_type, queue_string) character (32);
dcl  (opened_a_queue, all_queues_empty) bit (1) aligned;

dcl  (output_mode, path_output_mode, id_output_mode, position_mode, user_selection) fixed binary (2);

dcl  (user_id, person_id, project_id) character (32);
dcl  (match_any_person, match_any_project) bit (1) aligned;

dcl  a_dirname character (168);
dcl  an_ename character (32);

dcl  request_id_nonvarying character (19);
dcl  request_id character (19) varying;

dcl  access_required bit (36) aligned;

dcl  message_idx fixed binary;
dcl  first_message_in_queue bit (1) aligned;

dcl  code fixed binary (35);

/* format: off */
dcl (DEFAULT	initial (00b),			/* default setting for control argument */
     BRIEF	initial (01b),			/* -brief */
     LONG		initial (10b),			/* -long */

     NO_POSITION	initial (01b),			/* -no_position */
     SHOW_POSITION	initial (10b),			/* -position */

     TOTALS	initial (11b),			/* -totals */

     USER		initial (01b),			/* -own */
     SUBSET	initial (10b),			/* -user STR */
     ALL		initial (11b),			/* -admin */

     NONE		initial (00b),			/* not a selection control argument */
     PATH		initial (01b),			/* pathname selection */
     ENTRY	initial (10b),			/* -entry STR */
     ID		initial (11b))			/* -id STR */
	fixed binary (2) static options (constant);

dcl (
/*   A_EXTENDED_ACCESS	initial ("400000000000"b3),*/
     O_EXTENDED_ACCESS	initial ("040000000000"b3),
     R_EXTENDED_ACCESS	initial ("100000000000"b3),
     S_EXTENDED_ACCESS	initial ("020000000000"b3))
	bit (36) aligned static options (constant);

dcl  STATE_UNKNOWN fixed binary static options (constant) initial (-1);

dcl  STATE_NAMES (-1:4) character (32) varying static options (constant) initial (
	"unknown",	"unprocessed",	"deferred",	"state changing",
	"eligible",	"running");
/* format: on */

dcl  CHASE fixed binary (1) static options (constant) initial (1);

/*
dcl  READ_FIRST_MESSAGE bit (1) aligned static options (constant) initial ("0"b);
dcl  READ_THIS_MESSAGE bit (2) aligned static options (constant) initial ("00"b);
*/
dcl  READ_NEXT_MESSAGE bit (2) aligned static options (constant) initial ("01"b);

dcl  LIST_IMFT_REQUESTS character (32) static options (constant) initial ("list_imft_requests");

dcl  imft_data_$queue_dirname character (168) external;

/* format: off */
dcl (error_table_$bad_segment, error_table_$badopt, error_table_$id_not_found, error_table_$inconsistent,
     error_table_$moderr, error_table_$no_message, error_table_$no_s_permission, error_table_$noarg)
	fixed binary (35) external;
/* format: on */

dcl  check_star_name_$entry entry (character (*), fixed binary (35));
dcl  com_err_ entry () options (variable);
dcl  cu_$arg_count entry (fixed binary, fixed binary (35));
dcl  cu_$arg_list_ptr entry () returns (pointer);
dcl  cu_$arg_ptr_rel entry (fixed binary, pointer, fixed binary (21), fixed binary (35), pointer);
dcl  cv_dec_check_ entry (character (*), fixed binary (35)) returns (fixed binary (35));
dcl  date_time_ entry (fixed binary (71), character (*));
dcl  expand_pathname_ entry (character (*), character (*), character (*), fixed binary (35));
dcl  get_group_id_ entry () returns (character (32));
dcl  get_system_free_area_ entry () returns (pointer);
dcl  get_temp_segment_ entry (character (*), pointer, fixed binary (35));
dcl  hcs_$status_long entry (character (*), character (*), fixed binary (1), pointer, pointer, fixed binary (35));
dcl  imft_default_rqt_ entry () returns (char (*));
dcl  ioa_ entry () options (variable);
dcl  iod_info_$generic_type entry (character (*), character (32), fixed binary (35));
dcl  iod_info_$queue_data entry (character (*), fixed binary, fixed binary, fixed binary (35));
dcl  match_request_id_ entry (fixed binary (71), character (*)) returns (bit (1) aligned);
dcl  match_star_name_ entry (character (*), character (*), fixed binary (35));
dcl  message_segment_$close entry (fixed binary, fixed binary (35));
dcl  message_segment_$get_message_count_index entry (fixed binary, fixed binary, fixed binary (35));
dcl  message_segment_$get_mode_index entry (fixed binary, bit (36) aligned, fixed binary (35));
dcl  message_segment_$open entry (character (*), character (*), fixed binary, fixed binary (35));
dcl message_segment_$read_message_index entry (fixed binary, pointer, pointer, fixed binary (35));
dcl  pathname_ entry (character (*), character (*)) returns (character (168));
dcl  release_temp_segment_ entry (character (*), pointer, fixed binary (35));
dcl  request_id_ entry (fixed binary (71)) returns (character (19));

dcl  cleanup condition;

dcl  (addr, after, before, convert, index, length, max, null, rtrim, substr, sum, unspec, verify) builtin;

/**/

	call cu_$arg_count (n_arguments, code);
	if code ^= 0 then do;
	     call com_err_ (code, LIST_IMFT_REQUESTS);
	     return;
	end;

	the_argument_list = cu_$arg_list_ptr ();


/* Establish defaults */

	array_bound = max (n_arguments, 1);		/* PL/I abhors a vacuum */

	n_selections = 0;				/* no path, entry, or ID selections */

	request_type = imft_default_rqt_ ();		/* returns real name of default request type */
	queue = -1;				/* list all queues by default */

	output_mode = BRIEF;			/* default is -brief */
	path_output_mode = DEFAULT;			/* default is -absp if -long and -etnm if -brief */
	id_output_mode = DEFAULT;			/* default is -short_id if -brief and -long_id if -long */
	position_mode = DEFAULT;			/* default is -no_position */
	user_selection = USER;			/* default is -own */

MAIN_LIR_BLOCK:
	begin;

dcl  selection_types (array_bound) fixed binary (2);	/* type of selection indicated by this argument */
dcl  dir_uids (array_bound) bit (36) aligned;		/* UIDs of directory part of pathname selections */

	     selection_types (*) = NONE;
	     dir_uids (*) = ""b;
	     id_qualifier_idx = 0;			/* index of first -id STR */


/* Scan the argument list, verify the syntax of all request_identifiers, process all control arguments, and apply other
   appropriate defaults */

	     do argument_idx = 1 to n_arguments;

		call cu_$arg_ptr_rel (argument_idx, argument_ptr, argument_lth, code, the_argument_list);
		if code ^= 0 then do;
		     call com_err_ (code, LIST_IMFT_REQUESTS, "Accessing argument #^d.", argument_idx);
		     return;
		end;

		if index (argument, "-") = 1 then	/* a control argument */
		     if (argument = "-destination") | (argument = "-ds") then do;
			remote = "0"b;
			go to FOREIGN_SYSTEM;
		     end;

		     else if (argument = "-source") | (argument = "-sc") then do;
			remote = "1"b;
FOREIGN_SYSTEM:
			call get_next_argument ("A system name", foreign_system);
			if remote then
			     request_type = substr ("From_" || foreign_system, 1, length (request_type));
			else request_type = substr ("To_" || foreign_system, 1, length (request_type));

			call iod_info_$generic_type (request_type, generic_type, code);
			if code ^= 0 then do;	/* couldn't lookup the specified destination */
INVALID_DESTINATION_SPECIFICATION:
			     if code = error_table_$id_not_found then
				call com_err_ (0, LIST_IMFT_REQUESTS, "Unknown ^[source^;destination^].  ""^a""",
				     remote, foreign_system);
			     else call com_err_ (code, LIST_IMFT_REQUESTS, "-^[source^;destination^] ""^a""",
				     remote, foreign_system);
			     return;
			end;
			if generic_type ^= FT_GENERIC_TYPE then do;
			     call com_err_ (0, LIST_IMFT_REQUESTS, "Unknown ^[source^;destination^].  ""^a""",
				remote, foreign_system);
			     return;
			end;
		     end;

		     else if (argument = "-queue") | (argument = "-q") then do;
			call get_next_argument ("A number", queue_string);
			queue = cv_dec_check_ (queue_string, code);
			if code ^= 0 then do;
INVALID_QUEUE_SPECIFICATION:
			     call com_err_ (0, LIST_IMFT_REQUESTS,
				"The queue must be a number between 1 and 4; not ""^a"".", queue_string);
			     return;
			end;
			if (queue < 1) | (queue > 4) then go to INVALID_QUEUE_SPECIFICATION;
		     end;				/* will check if queue is OK for destination later */

		     else if (argument = "-all") | (argument = "-a") then queue = -1;
						/* special indicator to match all queues */

		     else if (argument = "-brief") | (argument = "-bf") then output_mode = BRIEF;
		     else if (argument = "-long") | (argument = "-lg") then output_mode = LONG;
		     else if (argument = "-totals") | (argument = "-total") | (argument = "-tt") then
			output_mode = TOTALS;

		     else if (argument = "-absolute_pathname") | (argument = "-absp") then path_output_mode = LONG;
		     else if (argument = "-entryname") | (argument = "-etnm") then path_output_mode = BRIEF;

		     else if (argument = "-long_id") | (argument = "-lgid") then id_output_mode = LONG;
		     else if (argument = "-short_id") | (argument = "-shid") then id_output_mode = BRIEF;

		     else if (argument = "-position") | (argument = "-psn") then position_mode = SHOW_POSITION;
		     else if (argument = "-no_position") | (argument = "-npsn") then position_mode = NO_POSITION;

		     else if argument = "-own" then user_selection = USER;
		     else if (argument = "-admin") | (argument = "-am") then user_selection = ALL;
		     else if argument = "-user" then do;
			call get_next_argument ("A user ID", user_id);
			if after (after (user_id, "."), ".") ^= "" then do;
			     call com_err_ (0, LIST_IMFT_REQUESTS, "Improper syntax for user ID.  ""^a""", user_id);
			     return;
			end;
			match_any_person = (before (user_id, ".") = "") | (before (user_id, ".") = "*");
			match_any_project = (after (user_id, ".") = "") | (after (user_id, ".") = "*");
			if match_any_person & match_any_project then
			     user_selection = ALL;
			else do;			/* matches a subset of all users */
			     user_selection = SUBSET;
			     person_id = before (user_id, ".");
			     project_id = after (user_id, ".");
			     if person_id = "" then person_id = "*";
			     if project_id = "" then project_id = "*";
			end;
		     end;

		     else if (argument = "-entry") | (argument = "-et") then do;
			call get_next_argument ("A starname", an_ename);
			call check_star_name_$entry (an_ename, code);
			if (code ^= 0) & (code ^= 1) & (code ^= 2) then do;
			     call com_err_ (code, LIST_IMFT_REQUESTS, "^a", an_ename);
			     return;
			end;
			n_selections.entry = n_selections.entry + 1;
			selection_types (argument_idx) = ENTRY;
		     end;

		     else if argument = "-id" then do;
			call get_next_argument ("A request ID match string", request_id_nonvarying);
			request_id = rtrim (request_id_nonvarying);
			if verify (request_id, "0123456789.") ^= 0 then do;
INVALID_REQUEST_ID:
			     call com_err_ (0, LIST_IMFT_REQUESTS,
				"Improper syntax for a request ID match string.  ""^a""", request_id);
			     return;
			end;
			if after (after (request_id, "."), ".") ^= "" then go to INVALID_REQUEST_ID;
			if length (before (request_id, ".")) > length ("YYMMDDHHMMSS") then
			     go to INVALID_REQUEST_ID;
			if length (after (request_id, ".")) > length ("FFFFFF") then go to INVALID_REQUEST_ID;
			n_selections.id = n_selections.id + 1;
			selection_types (argument_idx) = ID;
			if id_qualifier_idx = 0 then id_qualifier_idx = argument_idx;
		     end;				/* record index of first -id STR */

		     else do;
			call com_err_ (error_table_$badopt, LIST_IMFT_REQUESTS, """^a""", argument);
			return;
		     end;

		else do;				/* a pathname selection */
		     call expand_pathname_ (argument, a_dirname, an_ename, code);
		     if code ^= 0 then do;
			call com_err_ (code, LIST_IMFT_REQUESTS, "^a", argument);
			return;
		     end;
		     call check_star_name_$entry (an_ename, code);
		     if (code ^= 0) & (code ^= 1) & (code ^= 3) then do;
			call com_err_ (code, LIST_IMFT_REQUESTS, pathname_ (a_dirname, an_ename));
			return;
		     end;
		     n_selections.path = n_selections.path + 1;
		     selection_types (argument_idx) = PATH;
		     call hcs_$status_long (a_dirname, "", CHASE, addr (local_sb), null (), code);
		     if (code = 0) | (code = error_table_$no_s_permission) then
			dir_uids (argument_idx) = local_sb.uid;
		end;				/* get the UID now: will need it later */
	     end;

	     if (output_mode = TOTALS)
		& ((path_output_mode ^= DEFAULT) | (id_output_mode ^= DEFAULT) | (position_mode ^= DEFAULT)) then do;
		if path_output_mode ^= DEFAULT then
		     call com_err_ (error_table_$inconsistent, LIST_IMFT_REQUESTS,
			"""-total"" and ""^[-entryname^;absolute_pathname^]""", (path_output_mode = BRIEF));
		if id_output_mode ^= DEFAULT then
		     call com_err_ (error_table_$inconsistent, LIST_IMFT_REQUESTS,
			"""-total"" and ""^[-short_id^;long_id^]""", (id_output_mode = BRIEF));
		if position_mode ^= DEFAULT then
		     call com_err_ (error_table_$inconsistent, LIST_IMFT_REQUESTS,
			"""-total"" and ""^[-no_position^;-position^]""", (position_mode = NO_POSITION));
		return;
	     end;

	     if path_output_mode = DEFAULT then path_output_mode = output_mode;
	     if id_output_mode = DEFAULT then id_output_mode = output_mode;
	     if position_mode = DEFAULT then position_mode = NO_POSITION;

	     if ((n_selections.entry + n_selections.path) > 0) & (n_selections.id > 1) then do;
		call com_err_ (error_table_$inconsistent, LIST_IMFT_REQUESTS,
		     "More than one ""-id"" control argument with path/entry selections.");
		return;
	     end;

	     call iod_info_$queue_data (request_type, default_queue, max_queues, code);
	     if code ^= 0 then go to INVALID_DESTINATION_SPECIFICATION;

	     if queue = 0 then queue = default_queue;	/* supply default if needed */
	     if queue > max_queues then do;
		call com_err_ (0, LIST_IMFT_REQUESTS,
		     "^[Source^;Destination^] ^a has only ^d queue^[s^]; you specified queue ^d.", remote, request_type, max_queues,
		     (max_queues ^= 1), queue);
		return;
	     end;

/**/

/* Fetch the next argument */

get_next_argument:
     procedure (p_arg_description, p_argument);

dcl  p_arg_description character (*) parameter;
dcl  p_argument character (*) parameter;
dcl  control_argument character (32);

	control_argument = argument;			/* save control arg's name for error messages */

	if argument_idx = n_arguments then do;		/* there is no next argument */
	     call com_err_ (error_table_$noarg, LIST_IMFT_REQUESTS, "^a must follow ""^a"".", p_arg_description,
		control_argument);
	     go to ABORT_ARGUMENT_PARSE;
	end;

	argument_idx = argument_idx + 1;

	call cu_$arg_ptr_rel (argument_idx, argument_ptr, argument_lth, code, the_argument_list);
	if code ^= 0 then do;
	     call com_err_ (code, LIST_IMFT_REQUESTS, "Accessing argument #^d.", argument_idx);
	     go to ABORT_ARGUMENT_PARSE;
	end;

	if argument_lth > length (p_argument) then do;	/* it's too long */
	     call com_err_ (0, LIST_IMFT_REQUESTS, "Value after ""^a"" may not be longer than ^d characters.  ""^a""",
		control_argument, length (p_argument), argument);
	     go to ABORT_ARGUMENT_PARSE;
	end;

	p_argument = argument;			/* it's OK */

	return;

     end get_next_argument;

/**/

/* Argument parsing completed: open the appropriate queues and determine if the user has sufficient access */

	     system_area_ptr = get_system_free_area_ ();

	     queue_indeces (*) = 0;			/* for cleanup handler */
	     message_ids_ptr, ft_request_ptr = null ();

	     unspec (local_mmi) = ""b;
	     local_mmi.version = MSEG_MESSAGE_INFO_V1;

	     on condition (cleanup) call cleanup_handler ();

	     if (position_mode = SHOW_POSITION) & (user_selection = USER) then do;
		person_id = before (get_group_id_ (), ".");
		project_id = "*";			/* need to match just this user */
	     end;

	     if (position_mode = SHOW_POSITION) | (user_selection ^= USER) then access_required = R_EXTENDED_ACCESS;

	     else do;
		access_required = O_EXTENDED_ACCESS;
		local_mmi.own = "1"b;
	     end;

	     total_requests (*) = -1;			/* don't know what's in any of the queues yet */

	     if queue = -1 then do;			/* want to examine all the queues */
		opened_a_queue = "0"b;
		do queue_idx = 1 to max_queues;
		     call open_single_queue (queue_idx);
		     if queue_indeces (queue_idx) ^= 0 then opened_a_queue = "1"b;
		end;
		if ^opened_a_queue then go to RETURN_FROM_LIST_IMFT_REQUESTS;
	     end;

	     else do;				/* just one queue please */
		call open_single_queue (queue);
		if queue_indeces (queue) = 0 then go to RETURN_FROM_LIST_IMFT_REQUESTS;
	     end;					/* couldn't open it: nothing we can do */

/**/

/* Opens a single queue's message segment and validates access */

open_single_queue:
     procedure (p_queue_number);

dcl  p_queue_number fixed binary parameter;
dcl  queue_ename character (32);
dcl  queue_picture picture "9";
dcl  queue_mode bit (36) aligned;

	queue_ename = rtrim (request_type) || "_" || convert (queue_picture, p_queue_number) || ".ms";

	call message_segment_$open (imft_data_$queue_dirname, queue_ename, queue_indeces (p_queue_number), code);
	if code ^= 0 then do;
	     call com_err_ (code, LIST_IMFT_REQUESTS, "Opening ^a.", pathname_ (imft_data_$queue_dirname, queue_ename));
	     go to RETURN_FROM_LIST_IMFT_REQUESTS;
	end;

	call message_segment_$get_mode_index (queue_indeces (p_queue_number), queue_mode, code);
	if code ^= 0 then do;
	     call com_err_ (code, LIST_IMFT_REQUESTS, "Determining access to ^a.",
		pathname_ (imft_data_$queue_dirname, queue_ename));
	     go to RETURN_FROM_LIST_IMFT_REQUESTS;
	end;

	if (queue_mode & access_required) ^= access_required then do;
	     call com_err_ (error_table_$moderr, LIST_IMFT_REQUESTS,
		"You do not have ""^[r^;o^]"" access to ^a queue ^d.", (access_required = R_EXTENDED_ACCESS),
		request_type, p_queue_number);
	     call message_segment_$close (queue_indeces (p_queue_number), (0));
	     queue_indeces (p_queue_number) = 0;	/* not fatal: just don't list this queue */
	     return;
	end;

	if (queue_mode & S_EXTENDED_ACCESS) = S_EXTENDED_ACCESS then do;
	     call message_segment_$get_message_count_index (queue_indeces (p_queue_number),
		total_requests (p_queue_number), code);
	     if code ^= 0 then			/* couldn't get the message count: not fatal */
		call com_err_ (code, LIST_IMFT_REQUESTS, "Determining number of messages in ^a.",
		     pathname_ (imft_data_$queue_dirname, queue_ename));
	end;

	return;

     end open_single_queue;

/**/

/* Scan each of the selected queues generating a list of matching requests */

	     first_id_indeces (*) = 0;		/* index into message_ids array of first request in queue */
	     selected_requests (*) = 0;

	     call get_temp_segment_ (LIST_IMFT_REQUESTS, message_ids_ptr, code);
	     if code ^= 0 then do;
		call com_err_ (code, LIST_IMFT_REQUESTS, "Getting a temporary segment.");
		go to RETURN_FROM_LIST_IMFT_REQUESTS;
	     end;

	     total_message_ids = 0;			/* haven't used any yet */

	     process_selections = ((n_selections.path + n_selections.entry + n_selections.id) ^= 0);

	     if ((n_selections.path + n_selections.entry) > 0) & (n_selections.id = 1) then
		call cu_$arg_ptr_rel (id_qualifier_idx, id_qualifier_ptr, id_qualifier_lth, (0), the_argument_list);
	     else do;				/* no -id STR qualifier present: avoid faults */
		id_qualifier_ptr = addr (LIST_IMFT_REQUESTS);
		id_qualifier_lth = 0;
	     end;

	     do queue_idx = 1 to max_queues;		/* scan each queue that's open */
		if queue_indeces (queue_idx) ^= 0 then call scan_single_queue (queue_idx);
	     end;

	     if sum (selected_requests (*)) = 0 then do;	/* no matching requests were found */
		all_queues_empty = "1"b;		/* ... assume thery're all empty */
		do queue_idx = 1 to max_queues while (all_queues_empty);
		     if total_requests (queue_idx) ^= 0 then all_queues_empty = "0"b;
		end;
		if all_queues_empty then		/* ... and there's nothing in any of the queues */
		     call ioa_ ("There are no requests in any ^a queue.", request_type);
		else do;				/* ... explain about each empty queue */
		     do queue_idx = 1 to max_queues;
			if queue_indeces (queue_idx) ^= 0 then
			     call ioa_ ("^/^a queue ^d:^-^[0 requests^]^[; ^]^[^d total request^[s^]^].",
				request_type, queue_idx, (total_requests (queue_idx) ^= 0),
				(total_requests (queue_idx) > 0), (total_requests (queue_idx) ^= -1),
				total_requests (queue_idx), (total_requests (queue_idx) ^= 1));
		     end;
		     call ioa_ ("");
		end;
		go to RETURN_FROM_LIST_IMFT_REQUESTS;
	     end;

/**/

/* Scans a single queue and records the indeces of all requests matching the selection criteria */

scan_single_queue:
     procedure (p_queue_number);

dcl  p_queue_number fixed binary parameter;

dcl  user_id character (30);
dcl  position fixed binary;
dcl  previous_message_id bit (72) aligned;
dcl  request_uid bit (36) aligned;
dcl  (retry_read, matches) bit (1) aligned;

	position = 0;

	retry_read = "0"b;				/* this isn't a retry */

RETRY_FIRST_READ:
	local_mmi.message_code = MSEG_READ_FIRST;
	call message_segment_$read_message_index (queue_indeces (p_queue_number), system_area_ptr, addr (local_mmi), code);
	if ^retry_read then
	     if code = error_table_$bad_segment then do;
		retry_read = "1"b;			/* queue might have been salvaged: try again */
		go to RETRY_FIRST_READ;
	     end;


	do while (code = 0);			/* while we've got a message */

	     previous_message_id = local_mmi.ms_id;	/* needed to read the next message */
	     position = position + 1;			/* count the messages as we read them */

	     ft_request_ptr = local_mmi.ms_ptr;

	     user_id = substr (local_mmi.sender_id, 1, (length (rtrim (local_mmi.sender_id)) - 2));

	     if (ft_request.hdr_version ^= queue_msg_hdr_version_1) | (ft_request.version ^= FT_REQUEST_VERSION_1)
	     then do;				/* unrecognized message format */
		if (user_selection ^= USER) | (position_mode = SHOW_POSITION) then do;
		     if user_selection ^= ALL then do;	/* ... check if it's from an interesting user */
			if person_id ^= "*" then
			     if before (user_id, ".") ^= person_id then go to SKIP_THIS_MESSAGE;
			if project_id ^= "*" then
			     if after (user_id, ".") ^= project_id then go to SKIP_THIS_MESSAGE;
		     end;
		end;
		call add_this_message ();		/* it's the right user anyway */
		go to SKIP_THIS_MESSAGE;
	     end;

	     if (user_selection ^= USER) | (position_mode = SHOW_POSITION) then do;
		if user_selection ^= ALL then do;	/* must check if the user IDs match */
		     if person_id ^= "*" then
			if before (user_id, ".") ^= person_id then go to SKIP_THIS_MESSAGE;
		     if project_id ^= "*" then
			if after (user_id, ".") ^= project_id then go to SKIP_THIS_MESSAGE;
		end;
	     end;

	     if process_selections then do;		/* have to match path/entry/request ID */
		matches = "0"b;			/* until proven otherwise */
		do argument_idx = 1 to n_arguments while (^matches);
		     if selection_types (argument_idx) ^= NONE then do;
			call cu_$arg_ptr_rel (argument_idx, argument_ptr, argument_lth, (0), the_argument_list);
			if (selection_types (argument_idx) = PATH) | (selection_types (argument_idx) = ENTRY)
			then do;
			     if selection_types (argument_idx) = PATH then
				call expand_pathname_ (argument, a_dirname, an_ename, (0));
			     else an_ename = argument;
			     call match_star_name_ ((ft_request.ename), an_ename, code);
			     if code = 0 then	/* entry names match ... */
				if selection_types (argument_idx) = PATH then do;
				     call hcs_$status_long ((ft_request.dirname), "", CHASE, addr (local_sb),
					null (), code);
				     if (code = 0) | (code = error_table_$no_s_permission) then
					request_uid = local_sb.uid;
				     else request_uid = ""b;
				     if (request_uid ^= ""b) & (dir_uids (argument_idx) ^= ""b) then
					matches = (request_uid = dir_uids (argument_idx));
				     else if (request_uid = ""b) & (dir_uids (argument_idx) = ""b) then
					matches = (ft_request.dirname = a_dirname);
				end;
				else matches = "1"b;
			     if matches & (id_qualifier ^= "") then
				matches = match_request_id_ (ft_request.msg_time, id_qualifier);
			end;
			else do;			/* a request ID: only if not using ID as a qualifier */
			     if id_qualifier = "" then matches = match_request_id_ (ft_request.msg_time, argument);
			end;
		     end;
		end;
		if ^matches then go to SKIP_THIS_MESSAGE;
	     end;

	     call add_this_message ();		/* it passes all the selection criteria */

SKIP_THIS_MESSAGE:
	     free ft_request in (system_area);		/* done with this request for now */
	     ft_request_ptr = null ();

	     retry_read = "0"b;			/* first attempt to read the next message */

RETRY_READ_NEXT_MESSAGE:
	     local_mmi.message_code = MSEG_READ_AFTER_SPECIFIED;
	     local_mmi.ms_id = previous_message_id;

	     call message_segment_$read_message_index (queue_indeces (p_queue_number), system_area_ptr, addr (local_mmi), code);
	     if ^retry_read then
		if code = error_table_$bad_segment then do;
		     retry_read = "1"b;		/* message segment may have been salvaged */
		     go to RETRY_READ_NEXT_MESSAGE;
		end;
	end;

	if (code ^= 0) & (code ^= error_table_$no_message) then do;
	     call com_err_ (code, LIST_IMFT_REQUESTS, "Reading from ^a queue ^d.", request_type, p_queue_number);
	     call message_segment_$close (queue_indeces (p_queue_number), (0));
	     queue_indeces (p_queue_number) = 0;	/* fatal error while reading: drop this queue */
	end;

	return;


/* Internal to scan_single_queue: adds the current request to the list of selected requests */

add_this_message:
	procedure ();

	     selected_requests (p_queue_number) = selected_requests (p_queue_number) + 1;

	     total_message_ids = total_message_ids + 1;

	     message_ids.id (total_message_ids) = local_mmi.ms_id;
	     message_ids.position (total_message_ids) = position;

	     if first_id_indeces (p_queue_number) = 0 then first_id_indeces (p_queue_number) = total_message_ids;

	     return;

	end add_this_message;

     end scan_single_queue;

/**/

/* Display the descriptions of each matching request */

	     do queue_idx = 1 to max_queues;

		if queue_indeces (queue_idx) ^= 0 then do;

		     if (selected_requests (queue_idx) ^= 0) | (total_requests (queue_idx) > 0) then
			call ioa_ ("^/^a queue ^d:^-^d request^[s^]^[; ^d total request^[s^]^].", request_type,
			     queue_idx, selected_requests (queue_idx), (selected_requests (queue_idx) ^= 1),
			     (total_requests (queue_idx) ^= -1), total_requests (queue_idx),
			     (total_requests (queue_idx) ^= 1));

		     if output_mode ^= TOTALS then do;	/* some requests to display */
			first_message_in_queue = "1"b;
			do message_idx = first_id_indeces (queue_idx)
			     to (first_id_indeces (queue_idx) + selected_requests (queue_idx) - 1);
			     call display_single_request (queue_idx, message_ids.id (message_idx),
				message_ids.position (message_idx));
			end;
		     end;
		end;
	     end;

	     if (output_mode ^= LONG) | first_message_in_queue then call ioa_ ("");

/**/

/* Displays a single request's description */

display_single_request:
     procedure (p_queue, p_message_id, p_position);

dcl  (p_queue, p_position) fixed binary parameter;
dcl  p_message_id bit (72) aligned parameter;

dcl  user_id character (30);
dcl  time_queued_string character (24);
dcl  long_id_string character (19);
dcl  short_id_string character (8);
dcl  (retry_read, supported_version) bit (1) aligned;

	retry_read = "0"b;

READ_THE_MESSAGE:
	local_mmi.message_code = MSEG_READ_SPECIFIED;
	local_mmi.ms_id = p_message_id;

	call message_segment_$read_message_index (queue_indeces (p_queue), system_area_ptr, addr (local_mmi), code);
	if retry_read then
	     if code = error_table_$bad_segment then do;
		retry_read = "1"b;			/* message segment has been salvaged */
		go to READ_THE_MESSAGE;
	     end;

	if code ^= 0 then do;			/* couldn't get the message: OK if it was deleted */
	     if code ^= error_table_$no_message then
		call com_err_ (code, LIST_IMFT_REQUESTS, "Attempting to read message ^24.3b from ^a queue ^d.",
		     p_message_id, request_type, p_queue);
	     return;
	end;

	ft_request_ptr = local_mmi.ms_ptr;

	user_id = substr (local_mmi.sender_id, 1, (length (rtrim (local_mmi.sender_id)) - 2));

	if (ft_request.hdr_version ^= queue_msg_hdr_version_1) | (ft_request.version ^= FT_REQUEST_VERSION_1) then do;
	     supported_version = "0"b;		/* unknown message */
	     unspec (ft_request.msg_time) = local_mmi.ms_id;
	     call date_time_ (ft_request.msg_time, time_queued_string);
	end;

	else do;
	     supported_version = "1"b;		/* we recognize this message */
	     if (ft_request.state < STATE_UNPROCESSED) | (ft_request.state > STATE_RUNNING) then
		ft_request.state = STATE_UNKNOWN;	/* ... but the state is garbage so "fix" it */
	     long_id_string = request_id_ (ft_request.msg_time);
	     short_id_string = substr (long_id_string, 7, 8);
	     call date_time_ (ft_request.msg_time, time_queued_string);
	end;

	if first_message_in_queue then do;
	     first_message_in_queue = "0"b;
	     call ioa_ ("");			/* put some space after the totals line */
	     if (user_selection ^= USER) & (output_mode = BRIEF) then
		call ioa_ ("User^31t^[^7x^]^2xID^[^19x^;^8x^]^[Entry name^;Pathname^]",
		     (position_mode = SHOW_POSITION), (id_output_mode = LONG), (path_output_mode = BRIEF));
	end;

	if output_mode = BRIEF then
	     if supported_version then
		call ioa_ ("^[^30a^;^s^]^[^6d)^;^s^]^2x^[^a^s^;^s^a^]^2x^[^a^s^;^s^a^]^[ (^a)^]",
		     (user_selection ^= USER), user_id, (position_mode = SHOW_POSITION), p_position,
		     (id_output_mode = BRIEF), short_id_string, long_id_string, (path_output_mode = BRIEF),
		     ft_request.ename, pathname_ ((ft_request.dirname), (ft_request.ename)),
		     (ft_request.state ^= STATE_UNPROCESSED), STATE_NAMES (ft_request.state));

	     else call ioa_ ("^[^30a^;^s^] (unrecognized request format); time queued: ^a", (user_selection ^= USER),
		     user_id, time_queued_string);

	else do;					/* long output format */
	     if supported_version then do;
		if user_selection ^= USER then call ioa_ ("User:^21t^a", user_id);
		if position_mode = SHOW_POSITION then call ioa_ ("Position in queue:^21t^d", p_position);
		call ioa_ ("Request ID:^21t^[^a^;^s^a^]", (id_output_mode = BRIEF), short_id_string, long_id_string);
		call ioa_ ("Time queued:^21t^a", time_queued_string);
		call ioa_ ("^[Local ^[entry^;pathname^]^;^[Entry^;Pathname^]^]:^21t^[^a^;^s^a^]",
		     ft_request.foreign_path_given, (path_output_mode = BRIEF), (path_output_mode = BRIEF),
		     ft_request.ename, pathname_ ((ft_request.dirname), (ft_request.ename)));
		call ioa_ ("State:^21t^a", STATE_NAMES (ft_request.state));
		if ft_request.foreign_path_given then
		     call ioa_ ("Foreign pathname:^21t^a",
			pathname_ (ft_request.foreign_dirname, ft_request.foreign_ename));
		if ft_request.foreign_user_given then call ioa_ ("Foreign user:^21t^a", ft_request.foreign_user);
		if (ft_request.directory_creation_mode ^= "00"b) then
		     call ioa_ ("Options:^21t^[replace_directories^;merge_directories^]",
			(ft_request.directory_creation_mode = REPLACE_DIRECTORIES));
		if ft_request.delete then call ioa_ ("Delete:^21tyes");
		if ft_request.extend then call ioa_ ("Extend:^21tyes");
		if ft_request.notify then call ioa_ ("Notify:^21tyes");
		if ft_request.update then call ioa_ ("Update:^21tyes");
	     end;
	     else do;				/* unrecognized message format */
		call ioa_ ("User:^21t^a", user_id);
		call ioa_ ("Time queued:^21t^a", time_queued_string);
		call ioa_ ("^5x(unrecognized request format)");
	     end;
	     call ioa_ ("");			/* and end it with a blank line */
	end;

	free ft_request in (system_area);
	ft_request_ptr = null ();

	return;

     end display_single_request;

	end MAIN_LIR_BLOCK;

/**/

RETURN_FROM_LIST_IMFT_REQUESTS:
	call cleanup_handler ();

ABORT_ARGUMENT_PARSE:
	return;


/* Cleanup after an invocation of list_imft_requests */

cleanup_handler:
     procedure ();

	if ft_request_ptr ^= null () then do;
	     free ft_request in (system_area);
	     ft_request_ptr = null ();
	end;

	if message_ids_ptr ^= null () then do;
	     call release_temp_segment_ (LIST_IMFT_REQUESTS, message_ids_ptr, (0));
	     message_ids_ptr = null ();
	end;

	do queue_idx = 1 to max_queues;
	     if queue_indeces (queue_idx) ^= 0 then do;
		call message_segment_$close (queue_indeces (queue_idx), (0));
		queue_indeces (queue_idx) = 0;
	     end;
	end;

	return;

     end cleanup_handler;

/**/

%include "_imft_ft_request";
%page;
%include mseg_message_info;
%page;
%include queue_msg_hdr;
%page;
%include status_structures;

     end list_imft_requests;
