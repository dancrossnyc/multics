/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* I/O module to translate between IMFT logical records and HASP physical records */

/* Created:  January 1983 by Robert Coren using Gary Palter's hasp-only imft_io_ as a base */
/* Modified:  June 1983 by Robert Coren to requote attach options when building attach description */

/* format: style4,delnl,insnl,ifthenstmt,ifthen */


imft_hasp_:
     procedure ();
	return;					/* not an entry */


/* Parameters */

dcl  P_iocb_ptr pointer parameter;			/* *: -> I/O switch being operated upon */
dcl  P_code fixed binary (35) parameter;

dcl  P_attach_options (*) character (*) varying parameter;	/* attach: attachment arguments */
dcl  P_loud_sw bit (1) parameter;			/* attach: ON => attachment errors should call com_err_ */

dcl  P_open_mode fixed binary parameter;		/* open: opening mode */
dcl  P_open_sw bit (1) parameter;			/* open: obsolete parameter */

dcl  P_record_length fixed binary (21) parameter;		/* read_record: set to # of characters read into buffer;
						   write_record: # of characters to transmit as logical record */

dcl  P_buffer_ptr pointer parameter;			/* read_record: -> area to place result of read */
dcl  P_buffer_max_lth fixed binary (21) parameter;	/* read_record: size of area in characters */

dcl  P_record_ptr pointer parameter;			/* write_record: -> record to be written */

dcl  P_order character (*) parameter;			/* control: name of control order to be performed */
dcl  P_info_ptr pointer parameter;			/* control: -> additional information required to execute the
						   control order */

dcl  P_new_modes character (*) parameter;		/* modes: new modes to be set */
dcl  P_old_modes character (*) parameter;		/* modes: set to modes in effect before change */


/* Local copies of parameters */

dcl  iocb_ptr pointer;
dcl  code fixed binary (35);
dcl  loud_sw bit (1) aligned;
dcl  open_mode fixed binary;


/* Remaining declarations */

dcl  system_area area aligned based (system_area_ptr);
dcl  system_area_ptr pointer;

dcl  arg_index fixed binary;				/* # of attach option being processed */


dcl  terminal_attach_desc character (512);
dcl  terminal_switch_name character (32);

dcl  module_type character (12);			/* "host_" or "workstation_" */

dcl  data_received fixed bin (21);
dcl  packed_length fixed bin (21);
dcl  unpacked_chars fixed bin (21);

dcl  logical_record_data character (logical_record_data_lth) unaligned based (logical_record_data_ptr);
dcl  logical_record_data_lth fixed binary (21);
dcl  logical_record_data_ptr pointer;

dcl  logical_record_data_bits_lth fixed binary (24);

dcl  amount_left fixed binary (21);
dcl  amount_sent fixed binary (24);			/* may hold bit counters */
dcl  amount_to_send fixed binary (21);
dcl  fb14uu fixed binary (14) unaligned unsigned;
dcl  data_bytes char (n_bytes) based;
dcl  n_bytes fixed bin (21);

dcl  ips_mask bit (36);

dcl  IMFT_HASP_ character (32) static options (constant) initial ("imft_hasp_");

dcl  N_BITS_PER_CHARACTER fixed binary static options (constant) initial (9);

/* format: off */
dcl (error_table_$action_not_performed,
     error_table_$bad_mode, error_table_$eof_record, error_table_$improper_data_format,
     error_table_$long_record, error_table_$not_attached,
     error_table_$not_closed, error_table_$not_detached, error_table_$not_open,
     error_table_$short_record, error_table_$unimplemented_version)
	fixed binary (35) external;

/* format: on */

dcl  com_err_ entry () options (variable);
dcl  continue_to_signal_ entry (fixed binary (35));
dcl  cu_$arg_list_ptr entry () returns (pointer);
dcl  cu_$arg_ptr entry (fixed binary, pointer, fixed binary (21), fixed binary (35));
dcl  get_system_free_area_ entry () returns (pointer);
dcl  hcs_$reset_ips_mask entry (bit (36), bit (36));
dcl  hcs_$set_ips_mask entry (bit (36), bit (36));
dcl  ioa_$general_rs entry (pointer, fixed binary, fixed binary, character (*), fixed binary (21), bit (1), bit (1));
dcl  iox_$attach_ioname entry (character (*), pointer, character (*), fixed binary (35));
dcl  iox_$control entry (pointer, character (*), pointer, fixed binary (35));
dcl  iox_$close entry (pointer, fixed binary (35));
dcl  iox_$destroy_iocb entry (pointer, fixed binary (35));
dcl  iox_$detach_iocb entry (pointer, fixed binary (35));
dcl  iox_$err_no_operation entry () options (variable);
dcl  iox_$open entry (pointer, fixed binary, bit (1) aligned, fixed binary (35));
dcl  iox_$propagate entry (pointer);
dcl  iox_$read_record entry (pointer, pointer, fixed binary (21), fixed binary (21), fixed binary (35));
dcl  iox_$write_record entry (pointer, pointer, fixed binary (21), fixed binary (35));
dcl  requote_string_ entry (char (*)) returns (char (*));

dcl  (any_other, cleanup) condition;

dcl  (addbitno, addcharno, addr, bin, bit, currentsize, divide, hbound, index, lbound, length, min, mod, null, rtrim,
     size, string, substr, unspec) builtin;

/**/

/* Description of a switch attached through this module */

dcl  1 iad aligned based (iad_ptr),
       2 attach_description character (1024) varying,	/* attach description for this I/O switch */
       2 open_description character (24) varying,		/* open description for this I/O switch */
       2 switch like switch_info,			/* defines the terminal switch */
       2 flags aligned,
         3 input_direction bit (1) unaligned,		/* ON => receives data from remote system */
         3 pad bit (35) unaligned;

dcl  iad_ptr pointer;


/* Description of a single terminal level I/O switch */

dcl  1 switch_info aligned based,
       2 terminal_iocb_ptr pointer,			/* -> IOCB for terminal level module */
       2 current_physical_record_type fixed binary,	/* type of record currently in buffer (if any) */
       2 current_physical_record_n_els fixed binary (24),	/* # of characters or bits in current record */
       2 current_physical_record_used fixed binary (24),	/* # of characters or bits already returned to caller */
       2 pad bit (36),
       2 tior,					/* terminal_io_record used for I/O */
         3 header like terminal_io_record.header,
         3 data character (IMFT_PHYSICAL_RECORD_LTH) unaligned;


/**/

/* Physical record structure used to transmit data and control information */

dcl  1 imft_physical_record aligned based (ipr_ptr),
       2 pad1 bit (11) unaligned,
       2 flags unaligned,
         3 binary bit (1) unaligned,			/* ON => binary data in record as 7-bit bytes */
         3 bolr bit (1) unaligned,			/* ON => this is first physical record of a logical record */
         3 eolr bit (1) unaligned,			/* ON => last physical record in logical record */
         3 pad3 bit (4) unaligned,
       2 n_els unaligned,				/* # of elements (characters or 7-bit bytes) */
         3 pad4 bit (2) unaligned,
         3 high_order bit (7) unaligned,
         3 pad5 bit (2) unaligned,
         3 low_order bit (7) unaligned,
       2 data character (IMFT_PHYSICAL_RECORD_DATA_LTH) unaligned;
						/* the actual data */


dcl  ipr_ptr pointer;

dcl  (
     IMFT_PHYSICAL_RECORD_LTH initial (180),		/* size of each physical record */
     IMFT_PHYSICAL_RECORD_DATA_LTH initial (176),		/* # of bytes of user's data in each record */
     IMFT_PHYSICAL_RECORD_DATA_BITS_LTH initial (1232)	/* # of bits of user's data in each record for binary data */
     ) fixed binary static options (constant);

/**/

/* Attach an I/O switch for file transfer */

imft_hasp_host_attach:
     entry (P_iocb_ptr, P_attach_options, P_loud_sw, P_code);

	module_type = "host_";
	go to ATTACH_COMMON;

imft_hasp_workstation_attach:
     entry (P_iocb_ptr, P_attach_options, P_loud_sw, P_code);

	module_type = "workstation_";

ATTACH_COMMON:
	iocb_ptr = P_iocb_ptr;
	loud_sw = P_loud_sw;
	code = 0;

	iad_ptr = null ();				/* avoid freeing garbage if I/O switch already attached */

	if iocb_ptr -> iocb.attach_descrip_ptr ^= null () then do;
	     P_code = error_table_$not_detached;
	     if loud_sw then call com_err_ (P_code, IMFT_HASP_, "For switch ^a.", iocb_ptr -> iocb.name);
	     return;
	end;

	system_area_ptr = get_system_free_area_ ();

	on condition (cleanup) call cleanup_attachment ((0));



	allocate iad in (system_area) set (iad_ptr);
	iad.switch.terminal_iocb_ptr = null ();		/* keeps cleanup handler happy */

	iad.attach_description = "";
	iad.open_description = "";


	do arg_index = lbound (P_attach_options, 1) to hbound (P_attach_options, 1);
	     iad.attach_description = iad.attach_description || " " || requote_string_ ((P_attach_options (arg_index)));
	end;

	if index (iocb_ptr -> iocb.name, ".input.") ^= 0 then iad.input_direction = "1"b;

	else if index (iocb_ptr -> iocb.name, ".output.") ^= 0 then iad.input_direction = "0"b;

	else call abort_attachment (0, "Swtich name ^a does not specify input or output", iocb_ptr -> iocb.name);

	terminal_switch_name = "hasp_" || substr (module_type, 1, 1) || "." || rtrim (iocb_ptr -> iocb.name);

	terminal_attach_desc = "hasp_" || rtrim (module_type) || iad.attach_description;
						/* note that iad.attach_description already has leading space */

	call iox_$attach_ioname (terminal_switch_name, iad.switch.terminal_iocb_ptr, terminal_attach_desc, code);
	if code ^= 0 then call abort_attachment (code, "Unable to attach channel via: ^a", terminal_attach_desc);

/* Initialize the terminal switch structure */

	iad.switch.current_physical_record_type = -1;
	iad.switch.current_physical_record_n_els = 0;
	iad.switch.current_physical_record_used = 0;

	iad.switch.tior.version = terminal_io_record_version_1;

	if module_type = "workstation_" then do;
	     if iad.input_direction then
		iad.switch.tior.device_type = READER_DEVICE;
	     else iad.switch.tior.device_type = PUNCH_DEVICE;
	end;

	else do;
	     if iad.input_direction then
		iad.switch.tior.device_type = PUNCH_DEVICE;
	     else iad.switch.tior.device_type = READER_DEVICE;
	end;

	iad.switch.tior.slew_type = SLEW_BY_COUNT;
	iad.switch.tior.slew_count = 1;

	string (iad.switch.tior.flags) = ""b;

	iad.switch.tior.element_size = N_BITS_PER_CHARACTER;
	iad.switch.tior.n_elements = IMFT_PHYSICAL_RECORD_LTH;

/* Mask and complete construction of the IOCB */

	ips_mask = ""b;

	on condition (any_other) call any_other_handler ();

	call hcs_$set_ips_mask (((36)"0"b), ips_mask);

	iocb_ptr -> iocb.attach_descrip_ptr = addr (iad.attach_description);
	iocb_ptr -> iocb.attach_data_ptr = iad_ptr;
	iocb_ptr -> iocb.open = imft_hasp_open;
	iocb_ptr -> iocb.detach_iocb = imft_hasp_detach;

	call iox_$propagate (iocb_ptr);

	call hcs_$reset_ips_mask (ips_mask, ips_mask);

RETURN_FROM_ATTACH:
	P_code = code;
	return;

/**/

/* Open an I/O switch for file transfer */

imft_hasp_open:
     entry (P_iocb_ptr, P_open_mode, P_open_sw, P_code);

	iocb_ptr = P_iocb_ptr -> iocb.actual_iocb_ptr;
	iad_ptr = iocb_ptr -> iocb.attach_data_ptr;

	if iocb_ptr -> iocb.open_descrip_ptr ^= null () then do;
	     P_code = error_table_$not_closed;
	     return;
	end;

	open_mode = P_open_mode;

	if ^((iad.input_direction & (open_mode = Sequential_input))
	     | (^iad.input_direction & (open_mode = Sequential_output))) then do;
						/* opening mode and direction must agree */
	     P_code = error_table_$bad_mode;
	     return;
	end;

	call iox_$open (iad.switch.terminal_iocb_ptr, open_mode, "0"b, P_code);
	if P_code ^= 0 then return;

	iad.open_description = rtrim (iox_modes (open_mode));

	ips_mask = ""b;

	on condition (any_other) call any_other_handler ();

	call hcs_$set_ips_mask (((36)"0"b), ips_mask);

	if iad.input_direction then
	     iocb_ptr -> iocb.read_record = imft_hasp_read_record;
	else iocb_ptr -> iocb.write_record = imft_hasp_write_record;

	iocb_ptr -> iocb.control = imft_hasp_control;
	iocb_ptr -> iocb.modes = imft_hasp_modes;

	iocb_ptr -> iocb.close = imft_hasp_close;
	iocb_ptr -> iocb.detach_iocb = imft_hasp_detach;

	iocb_ptr -> iocb.open_descrip_ptr = addr (iad.open_description);
						/* it's now open */

	call iox_$propagate (iocb_ptr);

	call hcs_$reset_ips_mask (ips_mask, ips_mask);

	P_code = 0;
	return;

/**/

/* Close an I/O switch used for file transfer */

imft_hasp_close:
     entry (P_iocb_ptr, P_code);

	iocb_ptr = P_iocb_ptr -> iocb.actual_iocb_ptr;
	iad_ptr = iocb_ptr -> iocb.attach_data_ptr;
	code = 0;

	if iocb_ptr -> iocb.open_descrip_ptr = null () then do;
	     P_code = error_table_$not_open;
	     return;
	end;

	call iox_$close (iad.switch.terminal_iocb_ptr, code);
	if (code = error_table_$not_open) | (code = error_table_$not_attached) then code = 0;

	ips_mask = ""b;

	on condition (cleanup) call any_other_handler ();

	call hcs_$set_ips_mask (((36)"0"b), ips_mask);

	iocb_ptr -> iocb.open_descrip_ptr = null ();

	iocb_ptr -> iocb.open = imft_hasp_open;
	iocb_ptr -> iocb.detach_iocb = imft_hasp_detach;

	iocb_ptr -> iocb.control, iocb_ptr -> iocb.modes, iocb_ptr -> iocb.read_record, iocb_ptr -> iocb.write_record =
	     iox_$err_no_operation;

	call iox_$propagate (iocb_ptr);

	call hcs_$reset_ips_mask (ips_mask, ips_mask);

	P_code = code;

	return;

/**/

/* Detach an I/O switch from file transfer */

imft_hasp_detach:
     entry (P_iocb_ptr, P_code);

	iocb_ptr = P_iocb_ptr;
	code = 0;

	if iocb_ptr -> iocb.attach_descrip_ptr = null () then do;
	     P_code = error_table_$not_attached;
	     return;
	end;

	if iocb_ptr -> iocb.open_descrip_ptr ^= null () then do;
	     P_code = error_table_$not_closed;
	     return;
	end;

	system_area_ptr = get_system_free_area_ ();

	iad_ptr = iocb_ptr -> iocb.attach_data_ptr;

	call cleanup_attachment (code);

	ips_mask = ""b;

	on condition (any_other) call any_other_handler ();

	call hcs_$set_ips_mask (((36)"0"b), ips_mask);

	iocb_ptr -> iocb.attach_descrip_ptr = null ();	/* it's detached */

	call iox_$propagate (iocb_ptr);

	call hcs_$reset_ips_mask (ips_mask, ips_mask);

	P_code = code;				/* in case trouble freeing the channel */
	return;

/**/

/* Perform control operations on an I/O switch attached for file transfer */

imft_hasp_control:
     entry (P_iocb_ptr, P_order, P_info_ptr, P_code);

	iocb_ptr = P_iocb_ptr -> iocb.actual_iocb_ptr;
	iad_ptr = iocb_ptr -> attach_data_ptr;
	call iox_$control (iad.switch.terminal_iocb_ptr, P_order, P_info_ptr, P_code);
						/* just pass all orders on */
	return;

/**/

/* Change modes: no modes are supported */

imft_hasp_modes:
     entry (P_iocb_ptr, P_new_modes, P_old_modes, P_code);

	iocb_ptr = P_iocb_ptr -> iocb.actual_iocb_ptr;
	P_old_modes = "";				/* no modes are reflected to caller */

	if P_new_modes = "" then
	     P_code = 0;
	else P_code = error_table_$bad_mode;

	return;

/**/

/* Transmit a logical record to the remote system as multiple physical records */

imft_hasp_write_record:
     entry (P_iocb_ptr, P_record_ptr, P_record_length, P_code);

	iocb_ptr = P_iocb_ptr;
	ilr_ptr = P_record_ptr;
	iad_ptr = iocb_ptr -> iocb.attach_data_ptr;

	logical_record_data_ptr = addr (imft_logical_record.contents);
	logical_record_data_lth = imft_logical_record.length;

	terminal_io_record_ptr = addr (iad.switch.tior);
	ipr_ptr = addr (terminal_io_record.data);

	unspec (imft_physical_record) = ""b;		/* start out clean */

/* logical record header is sent as a separate physical record, which is always binary */

	imft_physical_record.binary = "1"b;
	imft_physical_record.bolr = "1"b;
	imft_physical_record.eolr = (logical_record_data_lth = 0);

	call unpack (ilr_ptr, addr (imft_physical_record.data), length (unspec (imft_logical_record_header)),
	     unpacked_chars);

	imft_physical_record.n_els.low_order = bit (bin (unpacked_chars, 7), 7);
						/* this assumes that the length of the header will always fit in 7 bits */
	call transmit_physical_record (unpacked_chars, P_code);
	if P_code ^= 0 then return;

	imft_physical_record.bolr = "0"b;

/* Now send the rest of the data (if any), unpacking only if necessary */

	amount_sent = 0;


	if logical_record_data_lth ^= 0 then
	     if imft_logical_record.binary | imft_logical_record.eight_bit then do;

/* Binary data: unpack 7 bits at a time into 9 bit forming valid ASCII characters for transmission.  At some future time,
   support for binary transmission should be provided */

		logical_record_data_bits_lth = N_BITS_PER_CHARACTER * logical_record_data_lth;

		do while (amount_sent < logical_record_data_bits_lth);

		     imft_physical_record.binary = "1"b;

		     amount_left = logical_record_data_bits_lth - amount_sent;
		     amount_to_send = min (amount_left, IMFT_PHYSICAL_RECORD_DATA_BITS_LTH);
						/* are using 7 bits per character */

		     call unpack (addbitno (logical_record_data_ptr, amount_sent), addr (imft_physical_record.data),
			amount_to_send, unpacked_chars);

		     fb14uu = unpacked_chars;		/* put # of characters in record into the record */
		     imft_physical_record.n_els.high_order = substr (unspec (fb14uu), 1, 7);
		     imft_physical_record.n_els.low_order = substr (unspec (fb14uu), 8, 7);

		     if amount_to_send = amount_left then
						/* last physical record */
			imft_physical_record.eolr = "1"b;

		     call transmit_physical_record (unpacked_chars, P_code);
						/* zap! */
		     if P_code ^= 0 then return;

		     amount_sent = amount_sent + amount_to_send;
		end;
	     end;


	     else do;

/* Character only data */

		do while (amount_sent < logical_record_data_lth);

		     amount_left = logical_record_data_lth - amount_sent;
		     amount_to_send = min (amount_left, IMFT_PHYSICAL_RECORD_DATA_LTH);
						/* determine how much to send now */
		     imft_physical_record.data = substr (logical_record_data, (amount_sent + 1), amount_to_send);

		     fb14uu = amount_to_send;		/* put # of characters in record into the record */
		     imft_physical_record.n_els.high_order = substr (unspec (fb14uu), 1, 7);
		     imft_physical_record.n_els.low_order = substr (unspec (fb14uu), 8, 7);

		     if amount_to_send = amount_left then
						/* last physical record */
			imft_physical_record.eolr = "1"b;

		     call transmit_physical_record (amount_to_send, P_code);
						/* zap! */
		     if P_code ^= 0 then return;

		     amount_sent = amount_sent + amount_to_send;
		end;
	     end;

	return;

/**/

/* Receive the contents of a logical record from the remote system */

imft_hasp_read_record:
     entry (P_iocb_ptr, P_buffer_ptr, P_buffer_max_lth, P_record_length, P_code);

	iocb_ptr = P_iocb_ptr;
	ilr_ptr = P_buffer_ptr;
	iad_ptr = iocb_ptr -> iocb.attach_data_ptr;

	terminal_io_record_ptr = addr (iad.switch.tior);
	ipr_ptr = addr (terminal_io_record.data);

/* read header record (which is always binary) */

	call receive_physical_record (n_bytes, P_code);
	if P_code ^= 0 then return;

	if ^imft_physical_record.bolr			/* not first in logical record? */
	then do;
	     P_code = error_table_$improper_data_format;
	     return;
	end;

	call pack (addr (imft_physical_record.data), ilr_ptr, n_bytes, packed_length);

	if imft_logical_record.version ^= IMFT_LOGICAL_RECORD_VERSION_1 then do;
	     P_code = error_table_$unimplemented_version;
	     return;
	end;

	if 4 * size (imft_logical_record_header) + imft_logical_record.length > P_buffer_max_lth
						/* record is too big to fit in caller's buffer */
	then do;
	     P_code = error_table_$long_record;
	     return;
	end;

/* now read the physical records (if any) that contain the data portion of the logical record */

	data_received = 0;
	unspec (imft_logical_record.contents) = ""b;	/* start clean */

	if imft_logical_record.binary | imft_logical_record.eight_bit then do;
	     logical_record_data_bits_lth = 9 * imft_logical_record.length;
						/* have to work in bits in this case */

	     do while (data_received < logical_record_data_bits_lth & ^imft_physical_record.eolr);
						/* should run out of data exactly when eolr goes on */

		call receive_physical_record (n_bytes, P_code);
		if P_code ^= 0 then return;

		call pack (addr (imft_physical_record.data),
		     addbitno (addr (imft_logical_record.contents), data_received), n_bytes, packed_length);
		data_received = data_received + packed_length;
	     end;

	     data_received = divide (data_received, 9, 21, 0);
						/* now convert to characters */
						/* note that real data ends on 9-bit boundary */
	end;

	else do while (data_received < imft_logical_record.length & ^imft_physical_record.eolr);
						/* these two conditions SHOULD be equivalent */
	     call receive_physical_record (n_bytes, P_code);
	     if P_code ^= 0 then return;

/* just copy the data directly */

	     addcharno (addr (imft_logical_record.contents), data_received) -> data_bytes =
		addr (imft_physical_record.data) -> data_bytes;
	     data_received = data_received + n_bytes;
	end;

	if data_received < imft_logical_record.length	/* premature end_of_record flag */
	then P_code = error_table_$eof_record;		/* it should probably be something else */

	else if ^imft_physical_record.eolr		/* used up length before finding end-of-record */
	then P_code = error_table_$long_record;		/* which means next record is probably messed up too */

	else P_code = 0;

	P_record_length = 4 * size (imft_logical_record_header) + data_received;
	return;

/**/

/* Cleanup whatever portion of an attachment exists */

cleanup_attachment:
     procedure (P_code);

dcl  P_code fixed binary (35) parameter;		/* a parameter to allow callers to ignore it */

	P_code = 0;

	if iad_ptr ^= null () then do;		/* there is an I/O switch */

	     if iad.switch.terminal_iocb_ptr ^= null () then do;
		call iox_$close (iad.switch.terminal_iocb_ptr, (0));
		call iox_$detach_iocb (iad.switch.terminal_iocb_ptr, P_code);
		call iox_$destroy_iocb (iad.switch.terminal_iocb_ptr, (0));
		iad.switch.terminal_iocb_ptr = null ();
	     end;

	     free iad in (system_area);
	     iad_ptr = null ();

	end;

	return;

     end cleanup_attachment;

/**/

/* Wrapper to protect against errors while IPS interrupts are masked */

any_other_handler:
     procedure () options (non_quick);

	if ips_mask then call hcs_$reset_ips_mask (ips_mask, ips_mask);
	ips_mask = ""b;

	call continue_to_signal_ ((0));		/* not interested, */

	return;

     end any_other_handler;



/* Abort a call to the attach entry:  print an error message if requested */

abort_attachment:
     procedure () options (variable, non_quick);

dcl  the_code fixed binary (35) based (the_code_ptr);
dcl  the_code_ptr pointer;

dcl  caller_message character (256);

	call cu_$arg_ptr (1, the_code_ptr, (0), (0));

	if loud_sw then do;				/* an error message is requested */
	     call ioa_$general_rs (cu_$arg_list_ptr (), 2, 3, caller_message, (0), "1"b, "0"b);
	     call com_err_ (the_code, IMFT_HASP_, "For switch ^a: ^a", iocb_ptr -> iocb.name, caller_message);
	end;

	call cleanup_attachment ((0));		/* get rid of anything that was accomplished */

	if the_code = 0 then
	     code = error_table_$action_not_performed;
	else code = the_code;			/* save the error code */

	go to RETURN_FROM_ATTACH;

     end abort_attachment;

/**/

/* transmits a single physical record */

transmit_physical_record:
     procedure (n_bytes, code);

dcl  n_bytes fixed bin (21);
dcl  code fixed binary (35);

	terminal_io_record.element_size = 9;
	terminal_io_record.n_elements = n_bytes + 4;	/* make sure they're still correct */
	terminal_io_record.version = terminal_io_record_version_1;

	call iox_$write_record (iad.switch.terminal_iocb_ptr, terminal_io_record_ptr,
	     (4 * currentsize (terminal_io_record)), code);

	unspec (imft_physical_record) = ""b;		/* start next record clean */

	return;

     end transmit_physical_record;

/**/

/* read a single physical HASP record */

receive_physical_record:
     procedure (bytes_read, code);

dcl  bytes_read fixed bin (21);
dcl  code fixed binary (35);

dcl  fb14uu fixed binary (14) unaligned unsigned;

	terminal_io_record.element_size = 9;
	terminal_io_record.n_elements = IMFT_PHYSICAL_RECORD_LTH;
	terminal_io_record.version = terminal_io_record_version_1;

	call iox_$read_record (iad.switch.terminal_iocb_ptr, terminal_io_record_ptr,
	     (4 * currentsize (terminal_io_record)), (0), code);
	if code = error_table_$short_record then code = 0;
	if code ^= 0 then return;

	unspec (fb14uu) = imft_physical_record.n_els.high_order || imft_physical_record.n_els.low_order;
	bytes_read = fb14uu;			/* record # of characters or bytes */

	return;

     end receive_physical_record;

/**/

/* pair of subroutines for converting between 7 bits/byte and 9 bits/byte */

pack_unpack:
     procedure;

	return;					/* not to be called */

dcl  packed_byte_ptr pointer parameter;
dcl  unpacked_byte_ptr pointer parameter;
dcl  P_input_chars fixed bin (21) parameter;
dcl  P_input_bits fixed bin (21) parameter;
dcl  P_output_chars fixed bin (21) parameter;
dcl  P_output_bits fixed bin (21) parameter;

dcl  unpacked_length fixed bin;
dcl  packed_bytes (unpacked_length) bit (7) unaligned based (packed_byte_ptr);
dcl  unpacked_bytes (unpacked_length) bit (9) unaligned based (unpacked_byte_ptr);

pack:
     entry (unpacked_byte_ptr, packed_byte_ptr, P_input_chars, P_output_bits);

/* input has 2 high-order bits of every 9 off, + 7 data bits; pack it into binary */

	unpacked_length = P_input_chars;
	P_output_bits = 7 * unpacked_length;
	packed_bytes = substr (unpacked_bytes, 3);	/* simple as that! */
	return;


unpack:
     entry (packed_byte_ptr, unpacked_byte_ptr, P_input_bits, P_output_chars);

/* input is binary; unpack it so that 2 high-order bits of every 9 are 0 */

	P_output_chars, unpacked_length = divide (P_input_bits + 6, 7, 21, 0);
	string (unpacked_bytes) = ""b;
	substr (unpacked_bytes, 3) = packed_bytes;	/* it works in this direction, too */
	return;

     end pack_unpack;

/**/

%include iocb;
%page;
%include iox_modes;
%page;
%include imft_logical_record;
%page;
%include terminal_io_record;

     end imft_hasp_;
