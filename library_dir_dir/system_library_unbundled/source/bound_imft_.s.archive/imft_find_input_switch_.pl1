/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* Searches a list of I/O switches for the first one for which input is available: if there is no input, optionally block
   until some becomes available */

/* Created:  April 1982 by G. Palter */

/* format: style4,delnl,insnl,ifthenstmt,ifthen */


imft_find_input_switch_:
     procedure (P_fis_info_ptr, P_block, P_switch, P_code);


/* Parameters */

dcl  P_fis_info_ptr pointer parameter;			/* -> the list of switche s */
dcl  P_block bit (1) aligned parameter;			/* ON => block if no input available */
dcl  P_switch fixed binary parameter;			/* set to index of switch with input (if any) */
dcl  P_code fixed binary (35) parameter;


/* Remaining declarations */

dcl  1 rsi aligned like tty_read_status_info;

dcl  1 ewi aligned like event_wait_info;

dcl  idx fixed binary;

dcl  error_table_$bad_arg fixed binary (35) external;
dcl  error_table_$unimplemented_version fixed binary (35) external;

dcl  convert_ipc_code_ entry (fixed binary (35));
dcl  iox_$control entry (pointer, character (*), pointer, fixed binary (35));
dcl  ipc_$block entry (pointer, pointer, fixed binary (35));

dcl  addr builtin;

/**/

	fis_info_ptr = P_fis_info_ptr;

	if fis_info.version ^= FIS_INFO_VERSION_1 then do;
	     P_code = error_table_$unimplemented_version;
	     return;
	end;

	if fis_info.n_iocbs ^= fis_info.n_channels then do;
	     P_code = error_table_$bad_arg;
	     return;
	end;


/* Check the list for a switch with available input */

CHECK_FOR_INPUT:
	rsi.input_pending = "0"b;			/* some I/O modules don't clear this */

	do idx = 1 to fis_info.n_iocbs;

	     call iox_$control (fis_info.iocbs (idx), "read_status", addr (rsi), P_code);
	     if P_code ^= 0 then return;		/* can't check all the switches */

	     if rsi.input_pending then do;		/* found it */
		P_switch = idx;
		return;				/* ... code already zero from above call */
	     end;
	end;

	if ^P_block then do;			/* don't wait around */
	     P_switch = 0;				/* ... none found */
	     return;				/* ... code already zeroed by last call above */
	end;


/* Block until some input is available: after the wakeup it is necessary to check all the switches again as the I/O
   modules send wakeups under various conditions (input available, channel hungup, etc.) */

	call ipc_$block (addr (fis_info.wait_list), addr (ewi), P_code);
	if P_code ^= 0 then do;			/* block failed */
	     call convert_ipc_code_ (P_code);
	     return;
	end;

	go to CHECK_FOR_INPUT;			/* look again */

/**/

%include "_imft_fis_info";
%page;
%include event_wait_info;

%include tty_read_status_info;

     end imft_find_input_switch_;
