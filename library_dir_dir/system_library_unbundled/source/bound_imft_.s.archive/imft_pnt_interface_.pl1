/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* Interface between IMFT and the system PNT manager */

/* Note:  All errors are translated into some code in imft_et_ to insure that the code can be properly transmitteded
   between the two systems */

/* Created:  April 1982 by G. Palter */
/* Modified 1984-08-15 by E. Swenson for Version 2 PNTs. */

/* format: style4,delnl,insnl,ifthenstmt,ifthen */


imft_pnt_interface_:
     procedure ();

	return;					/* not an entrypoint */


/* Parameters */

dcl  P_system_id character (*) parameter;		/* get_system_password: the system's Person_id */
dcl  P_system_password character (8) aligned parameter;	/* get_system_password: set to the system's password */

dcl  P_user_id character (*) parameter;			/* validate_personid: the user's Person_id */

dcl  P_code fixed binary (35) parameter;


/* Local copies of parameters */

dcl  code fixed binary (35);

/* Remaining declarations */

dcl  system_password char (8);

/* format: off */
dcl (imft_et_$cant_access_pnt, imft_et_$no_card_password, imft_et_$no_person_id)
	fixed binary (35) external;
/* format: on */

dcl  error_table_$id_not_found fixed binary (35) external;
dcl  error_table_$bad_password fixed bin (35) external static;

dcl  pnt_manager_$validate_entry entry (char (*), fixed bin (35));
dcl  pnt_manager_$get_network_password entry (char (*), char (*), bit (1), fixed bin (35));

dcl  addr builtin;

/**/

/* Determines a system's card input password */

get_system_password:
     entry (P_system_id, P_system_password, P_code);

	call pnt_manager_$get_network_password (P_system_id, system_password, ("0"b), code);
	if code ^= 0 then
	     if code = error_table_$bad_password then	/* No network password */
	     code = imft_et_$no_card_password;		/* the ID specified for a system must have one */
	     else if code = error_table_$id_not_found then code = imft_et_$no_person_id;
	     else code = imft_et_$cant_access_pnt;		/* the daemon doesn't have access to the PNT */

	P_system_password = system_password;
	P_code = code;

	return;

/**/

/* Validates that the given Person_id is in the PNT */

validate_personid:
     entry (P_user_id, P_code);

	call pnt_manager_$validate_entry (P_user_id, code);

	if code = 0 then ;				/* found the given ID */

	else if code = error_table_$id_not_found then code = imft_et_$no_person_id;

	else code = imft_et_$cant_access_pnt;		/* the daemon doesn't have access to the PNT */

	P_code = code;

	return;

     end imft_pnt_interface_;
