/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

lsm_: proc; return;

/* Written on 05/02/70 by Edwin W. Meyer, Jr. */
/* Modified for pl1 on 01/2170 by Edwin W. Meyer, Jr. */
/* modified 6/25/73 by Lee J. Scheffler for a general cleanup and for compatibility with new gm_ */
/* Modified 05/05/77 by CDT to make replace_blk refuse to replace symbols; otherwise symbol table messed its mind. */
/* Modified 07/79 by CDT for general overhaul */
/* Last modified 10/80 by CDT to make set_blk refuse to expand max-length
   blocks BEFORE indirecting through them, not after */


/* AUTOMATIC */

dcl  old_type fixed bin,
     old_data_len fixed bin,
     temp_node fixed bin (18),
     new_node_ptr pointer;

/* BUILTIN */

dcl (addr, divide, max, min, size, unspec) builtin;

/* EXTERNAL STATIC */

dcl (graphic_error_table_$lsm_node_ob,
     graphic_error_table_$bad_node,
     graphic_error_table_$inv_node_type,
     graphic_error_table_$lsm_seg_full,
     graphic_error_table_$lsm_blk_len) external fixed bin (35);

dcl  error_table_$unimplemented_version fixed bin (35) external static;

dcl  sys_info$max_seg_size fixed bin (35) external static;

/* BASED */

dcl  based_segment (0: 65000) aligned fixed bin (18) based (lsm_segptr); /* dummy declaration for pointer creation
						   and node referencing */
%page;
%include lsm_formats;
%page;
get_blk:	entry (lsm_segptr, node, type, data_len, node_ptr, err_code);

dcl (node fixed bin (18),
     type fixed bin,
     data_len fixed bin,
     err_code fixed bin (35)) parameter;

	call get_node_info (lsm_segptr, node, type, data_len, node_ptr, err_code);
	return;
%skip (5);
get_node_info: proc (lsm_segptr, node, type, data_len, node_ptr, err_code);

dcl (lsm_segptr pointer,
     node fixed bin (18),
     type fixed bin,
     data_len fixed bin,
     err_code fixed bin (35),
     node_ptr pointer) parameter;

	     type = lsm_constants.indirect_type;	/* to start loop off right */

	     do while (type = lsm_constants.indirect_type); /* until we find a non-indirect node */
		if node < size (lsm_segptr -> lsm) then
		     if (lsm_segptr -> lsm.version = LSM_version_6) & (node = 3) then;
						/* Old style segment and it's the symbol table */
		     else do;
			err_code = graphic_error_table_$lsm_node_ob; /* input block node is out of bounds */
			return;
		     end;
		if node > lsm_segptr -> lsm.free then do;
		     err_code = graphic_error_table_$lsm_node_ob;
		     return;
		end;

		node_ptr = addr (lsm_segptr -> based_segment (node)); /* get address to data block */
		type = node_ptr -> any_node.type;	/* get data type */
		data_len = node_ptr -> any_node.data_len; /* get current length of data block */
		if (type < 1) | (type > lsm_constants.n_types) then do;
		     err_code = graphic_error_table_$bad_node;
		     return;
		end;

		if type = lsm_constants.indirect_type then /* indirect type - get the true node */
		     node = node_ptr -> indirect_node.new_node;
	     end;

	     err_code = 0;
	     return;

	end get_node_info;
%page;
set_blk:	entry (lsm_segptr, node, type, data_len, node_ptr, err_code);

/* This entry resets the size of the data space in an existing block */

	if lsm_segptr -> lsm.version ^= LSM_version_7 then do;
	     err_code = error_table_$unimplemented_version;
	     return;
	end;

	call get_node_info (lsm_segptr, node, type, old_data_len, node_ptr, err_code);
	if err_code ^= 0 then return;

	if (type = symtab_type) | (type = symbol_type) then do;
	     err_code = graphic_error_table_$inv_node_type;
	     return;
	end;

	if node_ptr -> any_node.allocated_len >= cv_data_len_to_words (data_len, type) then do;
	     node_ptr -> any_node.data_len = data_len;	/* current block is of sufficient length - reset */
	     return;
	end;

/* otherwise we have to create a longer block */

	call create_new_block (lsm_segptr, temp_node, type,
	     max (min (data_len * 1.5e0 + 10, lsm_constants.max_allocation), data_len),
	     new_node_ptr, err_code);
						/* give a 50% expansion reserve but no more than max allowed */
	if err_code ^= 0 then return;

	new_node_ptr -> any_node.data_len = data_len;

	unspec (new_node_ptr -> any_node.data_space) = unspec (node_ptr -> any_node.data_space);
	node_ptr -> any_node.type = lsm_constants.indirect_type; /* set indirect block id and address into old block */
	node_ptr -> indirect_node.new_node = temp_node;
	node_ptr -> indirect_node.data_len = 1;

	node = temp_node;
	node_ptr = new_node_ptr;

	return;
%skip (3);
cv_data_len_to_words: proc (data_len, type) returns (fixed bin);

dcl  data_len fixed bin parameter,
     type fixed bin parameter;

dcl  factor fixed bin,
     result fixed bin;

	     factor = lsm_constants.data_length_factors (type);
	     if factor = 1 then
		result = max (1, data_len);
	     else result = max (1, divide (data_len + factor - 1, factor, 17, 0));

	     return (result);
	end cv_data_len_to_words;
%page;
replace_blk: entry (lsm_segptr, old_node, new_node, err_code);

/* Replaces old_node with an indirect block pointing to new_node */

dcl (old_node, new_node) fixed bin (18) parameter;

	if lsm_segptr -> lsm.version ^= LSM_version_7 then do;
	     err_code = error_table_$unimplemented_version;
	     return;
	end;

	call get_node_info (lsm_segptr, new_node, 0, 0, node_ptr, err_code);
						/* just to check its validity */
	if err_code ^= 0 then return;

	call get_node_info (lsm_segptr, old_node, old_type, 0, node_ptr, err_code);
	if err_code ^= 0 then return;

	if old_type = symbol_type then do;		/* can't change a symbol block in midstream. */
	     err_code = graphic_error_table_$inv_node_type;
	     return;
	end;

	node_ptr -> indirect_node.data_len = 2;		/* set cur length of block */
	node_ptr -> indirect_node.type = lsm_constants.indirect_type; /* make it an indirect block */
	node_ptr -> indirect_node.new_node = new_node;

	return;
%page;
make_blk:	entry (lsm_segptr, node, type, data_len, node_ptr, err_code);

	call create_new_block (lsm_segptr, node, type, data_len, node_ptr, err_code);
	return;
%skip (3);
create_new_block: proc (lsm_segptr, node, type, data_len, node_ptr, err_code);

dcl (lsm_segptr pointer,
     node fixed bin (18),
     type fixed bin,
     data_len fixed bin,
     err_code fixed bin (35),
     node_ptr pointer) parameter;

dcl  temp_allocated_len fixed bin;

	     node = 0;				/* in case an error is encountered */

	     if lsm_segptr -> lsm.version ^= LSM_version_7 then do;
		err_code = error_table_$unimplemented_version;
		return;
	     end;


	     if (type <= 0) | (type > lsm_constants.n_types) then do;
		err_code = graphic_error_table_$bad_node;
		return;
	     end;

	     node = lsm_segptr -> lsm.free;		/* get beginning of free block */
	     node_ptr = addr (lsm_segptr -> based_segment (node));

	     temp_allocated_len = cv_data_len_to_words (data_len, type);

	     if temp_allocated_len > lsm_constants.max_allocation then do; /* block length is too long */
		err_code = graphic_error_table_$lsm_blk_len;
		return;
	     end;

	     if node + temp_allocated_len > sys_info$max_seg_size then do;
		err_code = graphic_error_table_$lsm_seg_full;
		return;
	     end;

	     node_ptr -> any_node.type = type;
	     node_ptr -> any_node.allocated_len = temp_allocated_len;
	     node_ptr -> any_node.data_len = data_len;

	     lsm_segptr -> lsm.free = lsm_segptr -> lsm.free + temp_allocated_len + 1; /* update free cell */

	     return;
	end create_new_block;
%page;
replicate: entry (lsm_segptr, template_node, new_copy_node, err_code);

dcl (template_node fixed bin (18),			/* template of structure to be replicated */
     new_copy_node fixed bin (18)) parameter;		/* node id of replica */

	call rep_struc_recurse (lsm_segptr, template_node, new_copy_node, err_code);
	return;
%skip (3);
rep_struc_recurse: proc (lsm_segptr, template_node, new_copy_node, err_code);

dcl (lsm_segptr pointer,
    (template_node, new_copy_node) fixed bin (18),
     err_code fixed bin (35)) parameter;

dcl  type fixed bin,
     data_len fixed bin,
    (old_node_ptr, new_node_ptr) pointer,
     i fixed bin;

	     new_copy_node = 0;

	     if template_node = 0 then return;

	     call get_node_info (lsm_segptr, template_node, type, data_len, old_node_ptr, err_code);
	     if err_code ^= 0 then return;

	     if type = symbol_type then do;		/* Do not replicate through symbols */
		new_copy_node = template_node;
		return;
	     end;

	     call create_new_block (lsm_segptr, new_copy_node, type, data_len, new_node_ptr, err_code);
	     if err_code ^= 0 then return;

	     if type = symtab_type then do;
		err_code = graphic_error_table_$inv_node_type;
		return;
	     end;

	     else if (type = array_type) | (type = list_type) then
		do i = 1 to data_len;
		call rep_struc_recurse (lsm_segptr, old_node_ptr -> list_node.node (i),
		     new_node_ptr -> list_node.node (i), err_code);
		if err_code ^= 0 then return;
	     end;

	     else unspec (new_node_ptr -> any_node.data_space) = unspec (old_node_ptr -> any_node.data_space);
						/* simple real data type */

	     return;
	end rep_struc_recurse;

     end lsm_;
