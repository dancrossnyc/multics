/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

lsm_sym_: proc; return;

/* This procedure implements symbol table functions for the graphics system's
   structure manipulation package (lsm_). */
/* Modified 07/23/79 by CDT to add implicit location of
   symbol table.  Now only one is allowed per segment. */
/* Last modified 03/25/80 by CDT to replace internal procedure
   hash_pl1 with hash_index_, recently liberated from hardcore */

/* Arguments */

dcl (op_code fixed bin,				/* opcode to determine what to do */
     key_arg char (*),
     symbol_node_arg fixed bin (18),			/* node # of symbol node */
     value_node fixed bin (18),			/* node # of symbol value node */
     err_code fixed bin (35)) parameter;		/* standard system error code */

/* Builtins */

dcl (addr, dim, fixed, length, null, pointer, rtrim, size) builtin;

/* Automatic */

dcl (node_no,					/* used to index down a symbol table bucket list */
     table_n) fixed bin (18);				/* node # of symbol table */

dcl  type fixed bin,				/* type of node */
     key_node fixed bin (18),
     chain_word_ptr pointer,				/* used in symbol bucket list search */
     symbol_ptr pointer,
     symtab_ptr pointer,				/* pointer to start of bucket list in a symbol table node */
     i fixed bin;

/* Entries */

dcl  hash_index_ ext entry (pointer, fixed bin, fixed bin, fixed bin (18)) returns (fixed bin);

/* Based */

dcl  based_chain_word fixed bin (18) based;

/* External static */

dcl (error_table_$unimplemented_version,
     graphic_error_table_$lsm_sym_search,
     graphic_error_table_$inv_node_type,
     graphic_error_table_$lsm_invalid_op) fixed bin (35) external;
%page;
%include lsm_formats;
%page;
%include lsm_entry_dcls;
%page;
symk:	entry (lsm_segptr, op_code, key_arg, symbol_node_arg, value_node, err_code);

/* key is supplied directly as a character string */

	symbol_node_arg = 0;			/* Start off not knowing anything */
	err_code = 0;

	call find_table (lsm_segptr, table_n, err_code);
	if err_code ^= 0 then return;

	symtab_ptr = pointer (lsm_segptr, table_n);

	if symtab_ptr -> any_node.type ^= symtab_type then do; /* If node is not a symbol table... */
invalid_type:  err_code = graphic_error_table_$inv_node_type;
	     return;
	end;

	call hash_find_symbol (lsm_segptr, (symtab_ptr -> symtab_node.data_len), key_arg, symbol_ptr, node_no,
	     chain_word_ptr, op_code, err_code);
	if err_code ^= 0 then return;

/* If we get here, we know that the existence/nonexistence of the symbol is
   compatible with the operation specified by op_code */

	if op_code = Delete_symbol then do;
	     chain_word_ptr -> based_chain_word = symbol_ptr -> symbol_node.next_node;
						/* Chain around this node */
	     symbol_ptr -> indirect_node.new_node = symbol_ptr -> symbol_node.value_node;
						/* Make an indirect node so that sym and value will be "EQ" */
	     symbol_ptr -> indirect_node.data_len = 2;
	     symbol_ptr -> indirect_node.type = lsm_constants.indirect_type;
	end;

	else if symbol_ptr ^= null then do;		/* symbol was found */
	     if op_code = Create_symbol then		/* rewrite value */
		symbol_ptr -> symbol_node.value_node = value_node;
	     else value_node = symbol_ptr -> symbol_node.value_node;
						/* Find or Find_or_create; return value */
	     symbol_node_arg = node_no;
	end;

	else do;					/* symbol not found, must create it */
	     call lsm_$make_blk (lsm_segptr, key_node, char_type, length (key_arg), node_ptr, err_code);
						/* make node for name */
	     if err_code ^= 0 then return;

	     node_ptr -> char_node.string = key_arg;

	     call lsm_$make_blk (lsm_segptr, symbol_node_arg, symbol_type,
		size (symbol_ptr -> symbol_node) - size (null -> header), symbol_ptr, err_code);
	     if err_code ^= 0 then return;

	     symbol_ptr -> symbol_node.name_node = key_node;
	     symbol_ptr -> symbol_node.value_node = value_node;
	     symbol_ptr -> symbol_node.next_node = 0;

	     chain_word_ptr -> based_chain_word = symbol_node_arg; /* chain it on */
	end;

	return;
	%skip (10);
hash_find_symbol: proc (lsm_segptr, symtab_len, key_arg, symbol_ptr, node_no, chain_word_ptr, op_code, err_code);

dcl (lsm_segptr pointer,
     symtab_len fixed bin (18),
     key_arg char (*),
     symbol_ptr pointer,
     node_no fixed bin (18),
     chain_word_ptr pointer,
     op_code fixed bin,
     err_code fixed bin (35)) parameter;

dcl (first_bucket, last_bucket) fixed bin (18),
     i fixed bin (18),
     must_be_there bit (1) aligned,
     name_node_ptr pointer;

	     if lsm_segptr -> lsm.version = LSM_version_7 then
		first_bucket, last_bucket = hash_index_ (addr (key_arg), length (rtrim (key_arg)), 0, symtab_len);

	     else if lsm_segptr -> lsm.version = LSM_version_6 then do;
		first_bucket = 0;
		last_bucket = symtab_len;		/* exhaustive search */
	     end;

	     else do;
		err_code = error_table_$unimplemented_version;
		return;
	     end;

	     if (op_code < Find_symbol) | (op_code > Delete_symbol) then do;
		err_code = graphic_error_table_$lsm_invalid_op;
		return;
	     end;


	     err_code = 0;
	     must_be_there = (op_code = Delete_symbol) | (op_code = Find_symbol);

	     do i = first_bucket to last_bucket;

		chain_word_ptr = addr (symtab_ptr -> symtab_node.bucket_root (i));
		node_no = chain_word_ptr -> based_chain_word;

		do while (node_no ^= 0);
		     symbol_ptr = pointer (lsm_segptr, node_no);
		     if symbol_ptr -> symbol_node.type ^= lsm_constants.symbol_type then
			goto invalid_type;

		     name_node_ptr = pointer (lsm_segptr, symbol_ptr -> symbol_node.name_node);
		     if name_node_ptr -> char_node.string = key_arg then /* gotcha */
			return;

		     chain_word_ptr = addr (symbol_ptr -> symbol_node.next_node);
		     node_no = chain_word_ptr -> based_chain_word;
		end;
	     end;

/* Not found, sing dirge */

	     symbol_ptr = null;
	     node_no = 0;
	     if must_be_there then err_code = graphic_error_table_$lsm_sym_search;
	     return;

	end hash_find_symbol;
%page;
find_table: entry (lsm_segptr, symtab_node_no, err_code);

dcl  symtab_node_no fixed bin (18) parameter;

	call find_table (lsm_segptr, symtab_node_no, err_code);
	return;
	%skip (10);
find_table: proc (lsm_segptr, symtab_node_no, err_code);

dcl (lsm_segptr pointer,
     symtab_node_no fixed bin (18),
     err_code fixed bin (35)) parameter;

dcl  root_len fixed bin;

	     if lsm_segptr -> lsm.version = LSM_version_7 then do; /* current version, easy */
		symtab_node_no = lsm_segptr -> lsm.root_symtab;
		err_code = 0;
		return;
	     end;

	     else if lsm_segptr -> lsm.version = LSM_version_6 then do;

/* We have to find the symbol table.  The graphics system used to chain the
   root node to a list, the first element of which was the symbol table node ID
   (the second was always 0). */

		call lsm_$get_blk (lsm_segptr, lsm_segptr -> lsm.root_symtab, type, root_len, node_ptr, err_code);
		if err_code ^= 0 then return;

		if (type ^= list_type) | (root_len ^= 2) then do;
		     err_code = graphic_error_table_$inv_node_type;
		     return;
		end;

		symtab_node_no = node_ptr -> list_node.node (1);
		err_code = 0;
		return;
	     end;

	     else do;
		err_code = error_table_$unimplemented_version;
		return;
	     end;

	end find_table;
%page;
sym_list:	entry (lsm_segptr, array, array_len, err_code);

/* Entry fills "array" with numbers of nodes in symbol table */
/* If array_max is too small, err_code is returned as error_table_$smallarg */

dcl  array (*) fixed bin (18),			/* Arrayy into which list of symbol node #s will go (output) */
     array_max fixed bin,				/* length of array provided by caller */
     array_len fixed bin;				/* number of significant elements in array (output) */

dcl  error_table_$smallarg fixed bin (35) external;

	err_code = 0;
	array_max = dim (array, 1);			/* Determine dim of array provided by caller */

	call find_table (lsm_segptr, table_n, err_code);
	if err_code ^= 0 then return;

	symtab_ptr = pointer (lsm_segptr, table_n);	/* Get pointer to symbol table node */
	if fixed (symtab_ptr -> symbol_node.type, 4) ^= symtab_type /* If not a symbol table node... */
	then go to invalid_type;

	array_len = 0;
	do i = 0 to fixed (symtab_ptr -> symtab_node.data_len, 17, 0) - 1; /* Iterate over number of buckets */
	     do node_no = symtab_ptr -> symtab_node.bucket_root (i)
		     repeat pointer (lsm_segptr, node_no) -> symbol_node.next_node
		     while (node_no ^= 0);		/* Run down symbol node chain */
		array_len = array_len + 1;		/* One more symbol in array */

		if err_code ^= 0 then;		/* already know arg is short, just continue */
		else if array_len > array_max
		then err_code = error_table_$smallarg;	/* Array specified is too small to hold entire list */
		else array (array_len) = node_no;	/* Fill in next else array element */
	     end;
	end;
	return;
     end lsm_sym_;
