/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

graphic_operator_: go_: procedure; return;

/* Entry points allow dynamic interaction with a graphic terminal */
/* Originally coded 9/10/73 by Lee J. Scheffler */
/* Modified 08/14/79 by C. D. Tavares for version 7 lsm_ */
/* Last modified 10/14/8 by CDT to know about effectors with trailing
   zero coordinates unstored. */

/* PARAMETERS */

dcl ((list_n, new_n, node_n, incr_n) fixed bin (18),	/* Node ids */
     err_code fixed bin (35),
     desired_switch pointer,
    (immediacy_parameter, old_immediacy) bit (1) aligned,
     index fixed bin,
    (desired_i_switch, desired_o_switch) pointer,
     device fixed bin,
    (xpos, ypos, zpos) float bin,
     top_n fixed bin (18),
     path_len fixed bin,
     path_array (*) fixed bin,
     no_iter fixed bin,
     delay float bin,
     device_used fixed bin) parameter;

/* AUTOMATIC */

dcl (old_n fixed bin (18),
     return_node fixed bin (18),
     cur_input_switch pointer initial (null),
     cur_output_switch pointer initial (null),
     t_nt bit (1) aligned,				/* terminal or non-terminal node */
    (etype, incr_type) fixed bin,
     i fixed bin,
     inlen fixed bin (21),
     save_outindex fixed bin initial (outindex),
     cant_wait bit (1) initial (""b) aligned,
    (incr_p, effector_p) pointer,
     nchars fixed bin,
     lsm_type fixed bin,
     lsm_curl fixed bin,
     increment_string char (32),
     new_node fixed bin (18),
     new_type fixed bin,
     float_coords (3) float bin,
     lb fixed bin,
     path_array_ptr pointer,
     effector_type fixed bin,
     effector_len fixed bin,
     incr_len fixed bin) automatic;

/* STATIC */

dcl ((graphic_input, graphic_output) pointer initial (null),
     wgs_p pointer initial (null),
     buffer_ptr pointer initial (null),
     sys_area_p pointer initial (null),
     uninitted bit (1) aligned initial ("1"b),
     max_string_size fixed bin (21) initial (0),
     outstring char (512) unaligned,
     outindex fixed bin initial (1),
     immediacy bit (1) aligned initial ("1"b),
     saved_which_ptr pointer initial (null)) static;

/* ENTRIES */

dcl (graphic_code_util_$encode_spi,
     graphic_code_util_$encode_dpi,
     graphic_code_util_$encode_uid) entry (dimension (*) fixed bin, fixed bin, pointer),
     graphic_code_util_$encode_scl entry (dimension (*) float bin, fixed bin, pointer),
    (graphic_code_util_$decode_spi,
     graphic_code_util_$decode_dpi,
     graphic_code_util_$decode_uid) entry (pointer, fixed bin, dimension (*) fixed bin),
     graphic_code_util_$decode_scl entry (pointer, fixed bin, dimension (*) float bin),
     get_system_free_area_ ext entry returns (pointer),
     get_temp_segment_ ext entry (char (*), pointer, fixed bin (35)),
     cu_$arg_count ext entry returns (fixed bin),
     graphic_decompiler_ ext entry (char (*), fixed bin (35)) returns (fixed bin (18));

/* BASED AND DEFINED */

dcl  sys_area area based (sys_area_p),
     dum_array (1) fixed bin based,
     dum_float_array (1) float bin based,
     decompile_string char (inlen) based (buffer_ptr),
     top_n_array (1) fixed bin based (addr (top_n)),
     path_len_array (1) fixed bin based (addr (path_len)),
     based_path_array (path_len) fixed bin based,
     device_used_array (1) fixed bin based (addr (device_used));


dcl 1 saved_which aligned based (saved_which_ptr),
    2 saved_top_n fixed bin (18),
    2 saved_path_len fixed bin,
    2 saved_path_array (path_len refer (saved_path_len)) fixed bin;

dcl 1 fixed_effector aligned based,
    2 effector_code fixed bin,
    2 element (1000) fixed bin;

dcl  outstring_array (512) char (1) unaligned defined (outstring);

/* BUILTINS AND CONDITIONS */

dcl (addr, lbound, substr, null, dim) builtin;

dcl  cleanup condition;

/* EXTERNAL STATIC */

dcl (graphic_error_table_$inv_node_type,
     graphic_error_table_$malformed_input,
     graphic_error_table_$node_mismatch,
     graphic_error_table_$bad_no_iter,
     graphic_error_table_$neg_delay,
     graphic_error_table_$bad_device_type,
     error_table_$smallarg) fixed bin (35) external;

dcl  sys_info$max_seg_size ext fixed bin (35);
%page;
%include iox_dcls;
%page;
%include lsm_formats;
%page;
%include graphic_templates;
%page;
%include graphic_etypes;
%page;
%include graphic_enames;
%page;
%include graphic_comp_specs;
%page;
%include graphic_input_formats;
%page;
%include gm_entry_dcls;
%page;
%include gc_entry_dcls;
%page;
%include lsm_entry_dcls;
%page;
setup:	procedure;

/* Internal procedure to get pointer to working graphic segment */

	     call graphic_manipulator_$segp (wgs_p, err_code); /* Get ptr to current working graphic segment */
	     if err_code ^= 0 then go to non_local_return;

	     sys_area_p = get_system_free_area_ ();

	     call get_temp_segment_ ("graphic_operator_", buffer_ptr, err_code);
	     if err_code ^= 0 then goto non_local_return;

	     max_string_size = sys_info$max_seg_size * 4;

	     uninitted = ""b;

	     return;
	end setup;
%skip (2);
non_local_return:
	outindex = save_outindex;
	return;
%skip (2);
write_it_out: procedure;

/* Internal procedure to write out a dynamic effector or order */

	     err_code = 0;
	     if immediacy | cant_wait | outindex > 480 then save_outindex = 1;
	     else return;

	     on cleanup outindex, save_outindex = 1;

	     if graphic_output = null then do;
		call iox_$look_iocb ("graphic_output", graphic_output, err_code);
		if err_code ^= 0 then goto non_local_return;
	     end;

	     if cur_output_switch = null then cur_output_switch = graphic_output;

	     call iox_$put_chars (cur_output_switch, addr (outstring),
		outindex - 1, err_code);

	     if err_code ^= 0 then go to non_local_return;;

	     outindex = 1;

	     return;
	end write_it_out;
%page;
dispatch_switch: entry (err_code, desired_switch);

	cur_output_switch = desired_switch;
%skip (2);
dispatch:	entry (err_code);

	cant_wait = "1"b;
	call write_it_out;
	return;
%skip (2);
reset:	entry;

	outindex = 1;

	if saved_which_ptr ^= null then free saved_which in (sys_area);

	return;
%page;
set_immediacy: entry (immediacy_parameter, old_immediacy, err_code);

	if cu_$arg_count () = 2 then begin;		/* old style calling sequence */

declare  based_code fixed bin (35) based (addr (old_immediacy));

	     call set_immediacy (immediacy_parameter, ""b, based_code);
	     return;
	end;

	old_immediacy = immediacy;

	immediacy = immediacy_parameter;
	if immediacy then call write_it_out;

	return;
%page;
replace_element_switch: entry (list_n, index, new_n, err_code, desired_switch) returns (fixed bin (18));

	cur_output_switch = desired_switch;
%skip (2);
replace_element: entry (list_n, index, new_n, err_code) returns (fixed bin (18));

/* Replace the index'th node in "list_n" with node "new_n" */

	if uninitted then call setup;

	old_n = graphic_manipulator_$replace_element (list_n, index, new_n, err_code);
						/* Alter the list node in the working graphic seg */
	if err_code ^= 0 then return (old_n);

	outstring_array (outindex) = Alter_char;
	call graphic_code_util_$encode_uid (addr (list_n) -> dum_array, 1, addr (outstring_array (outindex + 1)));
						/* Stick in node id of list being altered */
	outindex = outindex + 1 + arg_lengths (UI);

	call graphic_code_util_$encode_dpi (addr (index) -> dum_array, 1, addr (outstring_array (outindex)));
						/* Stick in index of list element being replaced */
	outindex = outindex + arg_lengths (DPI);

	call graphic_code_util_$encode_uid (addr (new_n) -> dum_array, 1, addr (outstring_array (outindex)));
	outindex = outindex + arg_lengths (UI);

	call write_it_out;

	return (old_n);				/* Give back node # of node replaced */

/* --------------------------------------------------------------------------- */

/* Delete a node in terminal memory */

delete_switch: entry (node_n, err_code, desired_switch);

	cur_output_switch = desired_switch;

delete:	entry (node_n, err_code);

	outstring_array (outindex) = Delete_char;

simple_common:					/* Nodes with just a node # come here */
	call graphic_code_util_$encode_uid (addr (node_n) -> dum_array, 1, addr (outstring_array (outindex + 1)));
	outindex = outindex + 1 + arg_lengths (UI);

	call write_it_out;

	return;

/* --------------------------------------------------------------------- */

/* Display a node already residing in terminal memory */

display_switch: entry (node_n, err_code, desired_switch);

	cur_output_switch = desired_switch;

display:	entry (node_n, err_code);

	outstring_array (outindex) = Display_char;
	go to simple_common;

/* ----------------------------------------------------------------------- */

/* Erase a node currently being displayed */

erase_switch: entry (err_code, desired_switch);

	cur_output_switch = desired_switch;

erase:	entry (err_code);

	outstring_array (outindex) = Erase_char;
	go to simplest_common;

/* --------------------------------------------------------------------- */

/* Cause remote terminal to complete all parallel processing
   before proceeding with interpretation of the rest of the graphic output */

synchronize_switch: entry (err_code, desired_switch);

	cur_output_switch = desired_switch;

synchronize: entry (err_code);

	outstring_array (outindex) = Synchronize_char;

simplest_common:					/* Common point for all no-argument effectors */

	outindex = outindex + 1;
	call write_it_out;
	return;

/* ------------------------------------------------------------------------- */

/* Cause graphic terminal to continue display, but wait for user to
   indicate an interaction somehow */

pause_switch: entry (err_code, desired_switch);

	cur_output_switch = desired_switch;

pause:	entry (err_code);

	outstring_array (outindex) = Pause_char;
	outindex = outindex + 1;
	call write_it_out;

	return;

/* ------------------------------------------------------------------------ */

/* Increment "node_n" "no_iter" times with "delay" seconds (accurate to 1/32)
   between increments (starting with a delay, using
   node "incr_n" as a template to supply the increments */

increment_switch: entry (node_n, no_iter, delay, incr_n, err_code, desired_switch);

	cur_output_switch = desired_switch;
%skip (5);
increment: entry (node_n, no_iter, delay, incr_n, err_code);

	if uninitted then call setup;
	if no_iter <= 0 then do;			/* Obviously out of range */
	     err_code = graphic_error_table_$bad_no_iter;
	     return;
	end;

	if delay < 0e0 then do;
	     err_code = graphic_error_table_$neg_delay;
	     return;
	end;


	call graphic_manipulator_$examine_type (node_n, t_nt, etype, err_code);
	if err_code ^= 0 then return;
	if t_nt then do;				/* If a non-terminal node, cannot do increment */
inv_type:	     err_code = graphic_error_table_$inv_node_type;
	     return;
	end;
	call graphic_manipulator_$examine_type (incr_n, t_nt, incr_type, err_code);
	if err_code ^= 0 then return;
	if t_nt then go to inv_type;

	if etype ^= incr_type
	then go to inv_type;

	if etype >= Symbol
	then go to inv_type;

can_do_increment:
	call lsm_$get_blk (wgs_p, node_n, effector_type, effector_len, node_ptr, err_code);
						/* Get pointer to original node */
	effector_p = addr (node_ptr -> any_node.data_space);

	call lsm_$get_blk (wgs_p, incr_n, lsm_type, incr_len, node_ptr, err_code);
	incr_p = addr (node_ptr -> any_node.data_space);

	if incr_len > effector_len then do;		/* must grow data space of original effector */
	     call lsm_$set_blk (wgs_p, node_n, effector_type, incr_len, node_ptr, err_code);
						/* Get lsm_ to increase block length */
	     if err_code ^= 0 then return;
	     effector_p = addr (node_ptr -> any_node.data_space);
	end;

/* Perform incrementing in working graphic seg */

	if etype <= Clipping then
	     do i = 1 to incr_len - 1;		/* Floating elements */
	     effector_p -> floating_effector.data (i) =
		effector_p -> floating_effector.data (i) + incr_p -> floating_effector.data (i) * no_iter;
	end;

	else do i = 1 to incr_len - 1;		/* Fixed elements */
	     effector_p -> fixed_effector.element (i) =
		effector_p -> fixed_effector.element (i) + incr_p -> fixed_effector.element (i) * no_iter;
	end;

	outstring_array (outindex) = Increment_char;
	call graphic_code_util_$encode_uid (addr (node_n) -> dum_array, 1, addr (outstring_array (outindex + 1)));
	outindex = outindex + 1 + arg_lengths (UI);

	call graphic_code_util_$encode_dpi (addr (no_iter) -> dum_array, 1, addr (outstring_array (outindex)));
	outindex = outindex + arg_lengths (DPI);

	call graphic_code_util_$encode_scl (addr (delay) -> dum_float_array, 1, addr (outstring_array (outindex)));
	outindex = outindex + arg_lengths (SCL);


/* Get graphic_compiler_ to compile the increment node */

	call graphic_compiler_$return_string (incr_n, addr (increment_string), nchars, err_code);
	if err_code ^= 0 then return;
	nchars = nchars - 3 - arg_lengths (UI);		/* Strip off list indicator, node begin, node id, node end */
	substr (outstring, outindex, nchars) = substr (increment_string, 3 + arg_lengths (UI), nchars);
	outindex = outindex + nchars;
	call write_it_out;
	return;

/* ------------------------------------------------------------------------ */

/* Place position node "node_n" under control of terminal processor interaction with user */

control_switch: entry (node_n, err_code, desired_switch);

	cur_output_switch = desired_switch;
%skip (5);
control:	entry (node_n, err_code);

	if uninitted then call setup;

	cant_wait = "1"b;

	call graphic_manipulator_$examine_type (node_n, t_nt, etype, err_code);
	if err_code ^= 0 then return;
	if t_nt then go to inv_type;			/* only terminal nodes */

	outstring_array (outindex) = Control_char;
	call graphic_code_util_$encode_uid (addr (node_n) -> dum_array, 1, addr (outstring_array (outindex + 1)));
	outindex = outindex + 1 + arg_lengths (UI);

	call write_it_out;

	call do_actual_input;
	if err_code ^= 0 then return;

	new_node = graphic_decompiler_ (decompile_string, err_code);

	call graphic_manipulator_$examine_type (new_node, t_nt, new_type, err_code);
	if err_code ^= 0 then return;
	if t_nt then goto inv_type;
	if etype ^= new_type then do;
	     err_code = graphic_error_table_$node_mismatch;
	     return;
	end;

	call graphic_manipulator_$replace_node (node_n, new_node, err_code);

	return;

/* -------------------------------------------------------------------- */

do_actual_input: proc;

	     if graphic_input = null then do;
		call iox_$look_iocb ("graphic_input", graphic_input, err_code);
		if err_code ^= 0 then return;
	     end;

	     if cur_input_switch = null then cur_input_switch = graphic_input;

	     call iox_$get_line (cur_input_switch, buffer_ptr, max_string_size, inlen, err_code);
	     if err_code ^= 0 then return;

	     return;

	end do_actual_input;

/* -------------------------------------------------------------------- */

/* Obtain a where input from the graphic terminal */

where_switch: entry (device, xpos, ypos, zpos, err_code, desired_i_switch, desired_o_switch);

	cur_input_switch = desired_i_switch;
	cur_output_switch = desired_o_switch;

where:	entry (device, xpos, ypos, zpos, err_code);

	call query (Where_char);
	if err_code ^= 0 then return;

	if buffer_ptr -> where_format.node_begin ^= Node_begin_char then goto bad_input_format;
	if buffer_ptr -> where_format.array_indicator ^= Array_char then goto bad_input_format;
	if buffer_ptr -> where_format.mbz ^= zero_node_id then goto bad_input_format;
	if buffer_ptr -> where_format.setpos_indicator ^= Setposition_char then goto bad_input_format;
	if buffer_ptr -> where_format.node_end ^= Node_end_char then do;
bad_input_format:
	     err_code = graphic_error_table_$malformed_input;
	     return;
	end;

	call graphic_code_util_$decode_scl (addr (buffer_ptr -> where_format.xpos), 3, float_coords);
						/* Decode all the positions */
	xpos = float_coords (1);
	ypos = float_coords (2);
	zpos = float_coords (3);

	return;


/* ------------------------------------------------------------------- */

/* Obtain a which input from the graphic terminal */

which_switch: entry (device, top_n, path_len, path_array, err_code, desired_i_switch, desired_o_switch);

	cur_input_switch = desired_i_switch;
	cur_output_switch = desired_o_switch;

which:	entry (device, top_n, path_len, path_array, err_code);

	err_code = 0;

	if saved_which_ptr ^= null then do;		/* we have some old which input pending */

	     path_len = saved_path_len;		/* tell user depth of pathname */

	     if dim (path_array, 1) >= path_len then do;	/* we now have enough room */
		top_n = saved_top_n;		/* fill all the output args */
		addr (path_array) -> based_path_array = saved_path_array;
		free saved_which in (sys_area);
		saved_which_ptr = null ();
	     end;

	     else err_code = error_table_$smallarg;	/* still need more room, guy */

	     return;

	end;


	call query (Which_char);			/* get some fresh input */
	if err_code ^= 0 then return;

	if buffer_ptr -> which_format.node_begin ^= Node_begin_char then goto bad_input_format;

	call graphic_code_util_$decode_uid (addr (buffer_ptr -> which_format.node_id), 1, top_n_array);
						/* Decode root node # */

	call graphic_code_util_$decode_spi (addr (buffer_ptr -> which_format.depth), 1, path_len_array);
						/* Find out how many levels */

	if path_len <= 0 then return;			/* If no levels, return */

	if path_len > dim (path_array, 1) then do;	/* If supplied array is too small */
						/* to hold entire tree path... */
	     err_code = error_table_$smallarg;
	     allocate saved_which in (sys_area);
	     saved_top_n = top_n;
	     path_array_ptr = addr (saved_which.saved_path_array);
	     lb = 1;
	end;

	else do;
	     path_array_ptr = addr (path_array);
	     lb = lbound (path_array, 1);
	end;

	call graphic_code_util_$decode_dpi
	     (addr (buffer_ptr -> which_format.path_array), path_len, addr (path_array (lb)) -> based_path_array);
						/* Decode all the list indices */

	return;

/* ------------------------------------------------------------------ */

/* Obtain a what input from the graphic terminal */

what_switch: entry (device, device_used, err_code, desired_i_switch, desired_o_switch) returns (fixed bin (18));

	cur_input_switch = desired_i_switch;
	cur_output_switch = desired_o_switch;

what:	entry (device, device_used, err_code) returns (fixed bin (18));

	if uninitted then call setup;

	call query (What_char);
	if err_code ^= 0 then return (0);

	if buffer_ptr -> what_format.begin ^= Node_begin_char then goto bad_input_format;

	graphic_structure_len = inlen - 4;		/* subtract out node begin, device code, node end, and newline */

	call graphic_code_util_$decode_spi (addr (buffer_ptr -> what_format.device_code), 1, device_used_array);

	return_node = graphic_decompiler_ (buffer_ptr -> what_format.graphic_structure, err_code);

	return (return_node);

/* ------------------------------------------------------------------- */
/* Internal procedure to write a query effector out */

query:	procedure (query_type);

dcl  query_type char (1) aligned parameter;

	     err_code = 0;
	     if uninitted then call setup;
	     cant_wait = "1"b;
	     outstring_array (outindex) = Query_char;
	     outstring_array (outindex + 1) = query_type;

	     if device < -1 then goto no_such_device;
	     if device > 63 then goto no_such_device;

	     if substr (Input_device_names (device), 1, 8) = "undefine"
	     then do;
no_such_device:	err_code = graphic_error_table_$bad_device_type;
		go to non_local_return;
	     end;

	     call graphic_code_util_$encode_spi (addr (device) -> dum_array, 1, addr (outstring_array (outindex + 2)));
	     outindex = outindex + 2 + arg_lengths (SPI);

	     outstring_array (outindex) = Synchronize_char;
	     outindex = outindex + 1;

	     call write_it_out;

	     call do_actual_input;
	     return;
	end query;

     end graphic_operator_;
