/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

gui_: proc;
	return;

/* Written by S. Duren, circa 1971.
   Modified extensively by C. D. Tavares circa 1971/2 to rid it of
   "using and writing into other entries' parameters" bugs.
   Modified 01/21/75 by CDT to get rid of another of same type in circle generator. */
/* Modified 07/05/78 by CDT to add entrypoints without trailing underscores. */
/* Modified 09/28/78 by CDT to improve list management when many calls occur between displays */
/* Last modified 04/25/80 by CDT to replace calls to com_err_ with sub_err_ */


dcl  erase_switch bit (1) aligned initial ("1"b) static,
     master_node fixed bin (18) static,
     main_node fixed bin (18) static,
     active_node fixed bin (18) static,
     item_node fixed bin (18),
    (dx, dy) fixed bin,
     sub_err_ ext entry options (variable),
    (q, angle, delta, r) float bin,
    (sqrt, sin, cos, float, abs, length, null) builtin,
     acos_ ext entry (float bin (27)) returns (float bin (27)),
     arr (4) fixed bin (18);

dcl  graphic_operator_$delete ext entry (fixed bin (18), fixed bin (35));

%include graphic_etypes;
%include gm_entry_dcls;
%include gc_entry_dcls;

dcl (i, steps, switch)fixed bin,
    (oldx, oldy, relx, rely) float bin,
     code fixed bin (35),
     array (150) fixed bin (18),
     pi initial (3.14159265e0) float bin static,
     item_code initial (Vector) fixed bin;

dcl  saved_linetype fixed bin static;

dcl  graphic_error_table_$lsm_blk_len ext fixed bin (35) static;

ginit_: ginit: entry;

	erase_switch = "1"b;			/* subsequent calls to display will cause erase */

grmv_: grmv: entry;

	saved_linetype = Solid;

	call graphic_manipulator_$init (code);		/* create working graphic segment */
	if code ^= 0 then goto report_error;

	call graphic_operator_$delete (0, code);
	if code ^= 0 then goto report_error;

create_dummy:
	active_node = graphic_manipulator_$create_array ((0), 0, code);
	if code ^= 0 then goto report_error;
	main_node = graphic_manipulator_$create_array ((active_node), 1, code);
	if code ^= 0 then goto report_error;
	master_node = graphic_manipulator_$assign_name ("gui_display_list_", main_node, code);

check_error:
	if code = 0 then return;

report_error:
	call sub_err_ (code, "gui_", "c", null, 0, "Error in creating or appending to display list.");
	return;



gsps_: gsps: entry (x, y, z);

dcl (x, y, z) fixed bin;

	item_code = Setposition;			/* set position */
make_item:
	item_node = graphic_manipulator_$create_position (item_code, float (x), float (y), float (z), code);

check_item_error:
	if code ^= 0 then do;
	     call sub_err_ (code, "gui_", "c", null, 0, "Error in appending item to display list.");

	     return;

	end;
append_item:
	call graphic_manipulator_$add_element (active_node, -1, item_node, code);
	if code = 0 then return;

	if code ^= graphic_error_table_$lsm_blk_len then goto report_error; /* too bad */

/* we've overflowed one array, create another and forge on. */

	arr (1) = graphic_manipulator_$create_mode (Linetype, saved_linetype, code); /* remember the pending linetype in the new array */
	if code ^= 0 then goto report_error;

	arr (2) = item_node;			/* try to insert the desired item again */

	active_node = graphic_manipulator_$create_array (arr, 2, code); /* make a completely new array */
	if code ^= 0 then goto report_error;

	call graphic_manipulator_$add_element (main_node, -1, active_node, code); /* great, add it to main array */
	if code ^= 0 then goto report_error;

	return;


gspt_: gspt: entry (x, y, z);

	item_code = Setpoint;
	goto make_item;


gpnt_: gpnt: entry (x, y, z);

	item_code = Point;
	goto make_item;


gvec_: gvec: entry (x, y, z);

	item_code = Vector;
	goto make_item;


gsft_: gsft: entry (x, y, z);

	item_code = Shift;
	goto make_item;


gdot_: gdot: entry (value);

dcl  value fixed bin;

	item_node = graphic_manipulator_$create_mode (Linetype, value, code);
	saved_linetype = value;
	goto comad1;



gtxt_: gtxt: entry (cstring, alignment);

dcl  cstring char (*),
     alignment fixed bin;

	if cu_$arg_count () = 1 then al = 1;
	else al = alignment;

	len = length (cstring);

make_text:
	item_node = graphic_manipulator_$create_text (al, len, cstring, code);
	goto check_item_error;


gtxtf_: gtxtf: entry (cstring, n, alignment);

dcl (n, al, len) fixed bin;

dcl  cu_$arg_count ext entry returns (fixed bin);

	if cu_$arg_count () = 2 then al = 1;
	else al = alignment;
	len = n;
	goto make_text;


gbox_: gbox: entry (dx1, dy1);

	arr (1) = graphic_manipulator_$create_position (Vector, 0e0, float (dy1), 0e0, code);
	arr (2) = graphic_manipulator_$create_position (Vector, float (dx1), 0e0, 0e0, code);
	arr (3) = graphic_manipulator_$create_position (Vector, 0e0, float (-dy1), 0e0, code);
	arr (4) = graphic_manipulator_$create_position (Vector, float (-dx1), 0e0, 0e0, code);
	item_node = graphic_manipulator_$create_array (arr, 4, code);
comad1:	call graphic_manipulator_$add_element (active_node, -1, item_node, code);
	if code ^= 0 then goto report_error;
	return;


gcirc_: gcirc: entry (dx1, dy1);

dcl (dx1, dy1) fixed bin;
dcl (xx, yy) float bin;


	switch = 0;				/* circle needs final vector to return to starting position */
equin:	q = 2.e0;
	dx = dx1;dy = dy1;
arcin:	r = sqrt (float (dx*dx+dy*dy));
	angle = acos_ (float (-dx)/r);		/* compute angle that a line from initial point */
						/* to the center would make with the horizontal axis */
	if dy > 0 then angle = -angle;
	if switch = 1 then goto luprep;
	steps = abs ((q/2.e0)* (10.e0 + r/10.e0))+3;	/* compute no. of vectors needed to complete circle */
	delta = (q*pi)/steps;			/* compute portion of circle for ea. vector */
luprep:	oldx = -dx;oldy = -dy;relx = 0;rely = 0;
loop:	do i = 1 to steps ;
	     angle = angle+delta;

	     xx = r*cos (angle);
	     yy = r*sin (angle);

	     array (i) = graphic_manipulator_$create_position (item_code, xx - oldx, yy - oldy, 0e0, code);
						/* put a vector in the display list */
	     if code ^= 0 then do;
		call sub_err_ (code, "gui_", "c", null, 0, "Error in creating circle/polygon");
		return;
	     end;


	     relx = relx + xx - oldx;
	     rely = rely + yy - oldy;
	     oldx = xx;				/* update current position */
	     oldy = yy;

	end loop;
	if switch >= 1 then do;
	     item_node = graphic_manipulator_$create_array (array, steps, code);
	     call graphic_manipulator_$add_element (active_node, -1, item_node, code);
	     return;

	end;
finis_3d:	array (steps+1) = graphic_manipulator_$create_position (item_code, float (-relx), float (-rely), 0e0, code);
	item_node = graphic_manipulator_$create_array (array, steps+1, code);
	call graphic_manipulator_$add_element (active_node, -1, item_node, code);
	return;



garc_: garc: entry (q1, dx1, dy1);

dcl  q1 float bin;

	q = q1;dx = dx1;dy = dy1;
	switch = 2;
	goto arcin;


geqs_: geqs: entry (ns, dx1, dy1);


/* draw closed figure with ns sides whose center is dx1, */
/* dy1, from the current position. */
dcl  ns fixed bin;

	switch = 1;
	steps = ns;
	delta = 2.e0*pi/steps;
	goto equin;


gdisp_: gdisp: entry;

	if erase_switch then do;
	     call graphic_compiler_$display (master_node, code);
	end;

	else call graphic_compiler_$display_append (active_node, code);

	if code ^= 0 then goto report_error;
	erase_switch = ""b;
	active_node = graphic_manipulator_$create_array ((0), 0, code);
	if code ^= 0 then goto report_error;
	call graphic_manipulator_$add_element (main_node, -1, active_node, code);
	if code ^= 0 then goto report_error;

	return;


geras_: geras: entry;

	erase_switch = "1"b;
	return;


     end;
