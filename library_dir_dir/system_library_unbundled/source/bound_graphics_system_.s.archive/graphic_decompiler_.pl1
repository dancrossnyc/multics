/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

graphic_decompiler_: proc (graphic_code, code) returns (fixed bin (18));

/* graphic_decompiler_ takes Multics Graphics Code and makes it into graphic structures. */
/* Written 3/19/75 by C. D. Tavares */
/* Last modified 03/25/80 by CDT to check for too many elements in a single list or array
   and to replace two signal statements with calls to sub_err_ */

/* -- PARAMETERS -- */

dcl  graphic_code char (*) parameter,
     code fixed bin (35) parameter;

/* -- EXTERNAL ENTRIES -- */

dcl (graphic_code_util_$decode_spi,
     graphic_code_util_$decode_dpi) ext entry (pointer, fixed bin, (*) fixed bin),
     graphic_code_util_$decode_uid ext entry (pointer, fixed bin, (*) fixed bin (18)),
     graphic_code_util_$decode_scl ext entry (pointer, fixed bin, (*) float bin);

dcl  graphic_element_length_ ext entry (char (*), fixed bin) returns (fixed bin);

dcl  sub_err_ ext entry options (variable);

/* -- EXTERNAL VARIABLES -- */

dcl (graphic_error_table_$unrecognized_effector,
     graphic_error_table_$incomplete_structure,
     graphic_error_table_$lsm_blk_len,
     graphic_error_table_$node_list_overflow,
     graphic_error_table_$impossible_effector_length,
     graphic_error_table_$not_a_structure) ext fixed bin (35);

/* -- STATIC -- */

dcl 1 node_table static aligned,
    2 number_known_nodes fixed bin initial (0),
    2 known_nodes (200) aligned,
      3 input_node fixed bin (18),
      3 wgs_node fixed bin (18);

/* -- AUTOMATIC -- */

dcl  first_element_offset fixed bin;

/* -- BUILTINS -- */

dcl (addr, divide, hbound, index, length, null, string, substr, unspec) builtin;
%page;
%include graphic_code_dcl;
%page;
%include lsm_formats;
%page;
	call graphic_manipulator_$segp (null, code);	/* see if WGS exists */
	if code ^= 0 then return (-1);		/* tsk tsk */

	if substr (graphic_code, 1, 1) ^= Node_begin_char then do; /* it must be that */
bad_struc:     code = graphic_error_table_$not_a_structure; /* complain */
error_return:  return (-1);				/* farewell */
	end;

	first_element_offset = graphic_element_length_ (graphic_code, 1);
						/* This is the char offset of the first element of any list.
						   It is used to compute whether the first element of a list
						   is another list, etc. */

	number_known_nodes = 0;			/* initialize state variables */

	return (graphic_decompiler_recur (graphic_code, 1)); /* pass it off to a friend */


graphic_decompiler_recur: proc (graphic_code, start) returns (fixed bin (18)) recursive;

/* -- PARAMETERS -- */

dcl  graphic_code char (*) parameter,
     start fixed bin parameter;

/* -- BASED VARIABLES, THEIR POINTERS, AND LENGTHS -- */

dcl  contents_len fixed bin,
     contents_ptr pointer;

dcl  char_array (0:1000) char (1) unaligned based;

/* -- AUTOMATIC -- */

dcl  finished bit (1) aligned initial (""b);

dcl  ID fixed bin;

dcl  graphic_code_index fixed bin,
     node fixed bin (18),
     element fixed bin (18),
     this_list_index fixed bin initial (0),
     fixed_array (6) fixed bin,
     float_array (3) float bin;

dcl  this_input_node fixed bin (18) initial (-1),
    (we_are_list, we_are_array) bit (1) aligned initial (""b);

dcl  i fixed bin,
     ch char (1) aligned;

dcl  this_list (lsm_constants.max_allocation) fixed bin (18);

dcl  len fixed bin;



	     do graphic_code_index = start to length (graphic_code) while (^finished);
						/* loop through whole string of MSGC */

		ch = substr (graphic_code, graphic_code_index, 1); /* get the effector character */
		contents_ptr = addr (addr (graphic_code) -> char_array (graphic_code_index));
						/* get ptr to this effectors arguments */
		contents_len = graphic_element_length_ (graphic_code, graphic_code_index) - 1;

		ID = index (string (Graphic_effectors), ch); /* see if it is a graphic effector */
		if ID > 0 then do;			/* yes it is, do: */
		     element = decompile_graphic_effector (ID); /* make a node of it */
		     goto endloop;
		end;

		ID = index (string (Dynamic_and_structural_effectors), ch); /* see if it's one of those */
		if ID > 0 then do;			/* yes it is */
		     element = decompile_structural_effector (ID); /* etc. */
		     goto endloop;
		end;

		ID = index (string (Mapping_effectors), ch); /* is it a map? */
		if ID > 0 then do;
		     element = decompile_mapping_effector (ID);
		     goto endloop;
		end;

		ID = index (string (Mode_effectors), ch); /* A mode?? */
		if ID > 0 then do;
		     element = decompile_mode_effector (ID);
		     goto endloop;
		end;

		ID = index (string (Special_effectors), ch); /* A special???? */
		if ID > 0 then do;
		     element = decompile_special_effector (ID);
		     goto endloop;
		end;

		code = graphic_error_table_$unrecognized_effector; /* Ai; no kapitsch! */
		goto error_return;

endloop:
		if element ^= -1 then do;		/* then we should add it to list */
		     this_list_index = this_list_index + 1;
		     if this_list_index > hbound (this_list, 1) then do;
			code = graphic_error_table_$lsm_blk_len;
			goto error_return;
		     end;
		     this_list (this_list_index) = element;
		end;

		graphic_code_index = graphic_code_index + contents_len; /* waddle thru string */
	     end;

	     if ^finished then do;			/* incomplete structure, guys */
		code = graphic_error_table_$incomplete_structure;
		goto error_return;
	     end;

	     if we_are_list | we_are_array then do;	/* make a list/array of us */
		if we_are_array then node = graphic_manipulator_$create_array (this_list, this_list_index, code);
		else node = graphic_manipulator_$create_list (this_list, this_list_index, code);
		if code ^= 0 then goto error_return;
	     end;

	     else do;
		if this_list_index > 1 then		/* multiple and not a list?? */
		     call sub_err_ (graphic_error_table_$impossible_effector_length, "graphic_decompiler_", "h", null, 0,
		     "A multiple element was encountered which was neither a list nor an array.");
		node = this_list (1);		/* we are a single element, flaunt it */
	     end;

	     do i = 1 to number_known_nodes while (known_nodes (i).input_node ^= this_input_node);
						/* see if anybody we already know has our node number */
	     end;

	     if i > number_known_nodes then do;		/* nope, we're safe, add us */
		if number_known_nodes + 1 > hbound (known_nodes, 1) then
		     call sub_err_ (graphic_error_table_$node_list_overflow, "graphic_decompiler_", "c", null, 0,
		     "More than ^d distinct nodes encountered.", hbound (known_nodes, 1));
						/* So far, BIG structures haven't bombed us yet */
		else do;
		     number_known_nodes = number_known_nodes + 1;
		     known_nodes (number_known_nodes).input_node = this_input_node;
		     known_nodes (number_known_nodes).wgs_node = node;
		end;
	     end;

	     else if known_nodes (i).wgs_node ^= node then do; /* i.e. don't do this for symbol nodes! */
						/* Replacements of symbols will always recur, otherwise */
		call graphic_manipulator_$replace_node (known_nodes (i).wgs_node, node, code);
						/* replace the old copy with our "new" contents */
		if code ^= 0 then goto error_return;
		known_nodes (i).wgs_node = node;	/* remember our new address */
	     end;

	     start = graphic_code_index;		/* tell possible recursive parents what we have eaten */

	     return (node);				/* present our result */



decompile_graphic_effector: proc (ID) returns (fixed bin (18));

dcl  ID fixed bin;

		if we_are_list then goto bad_struc;	/* each of us must be an island */

		call graphic_code_util_$decode_scl (contents_ptr, 3, float_array); /* get our arguments */

		node = graphic_manipulator_$create_position (ID-1, float_array (1), float_array (2),
		     float_array (3), code);		/* create the effector */
		if code ^= 0 then goto error_return;

		return (node);

	     end decompile_graphic_effector;


decompile_mode_effector: proc (ID) returns (fixed bin (18));

dcl  ID fixed bin;

		if we_are_list then goto bad_struc;	/* we must all be our own lists */

		if ID = 5 then len = 3;		/* color effector */
		else len = 1;			/* everything else */

		call graphic_code_util_$decode_spi (contents_ptr, len, fixed_array); /* get our args */

		if len ^= 3
		then node = graphic_manipulator_$create_mode (15+ID, fixed_array (1), code);
		else node = graphic_manipulator_$create_color (fixed_array (1), fixed_array (2), fixed_array (3), code);
						/* make the node */

		if code ^= 0 then goto error_return;
		return (node);

	     end decompile_mode_effector;

decompile_mapping_effector: proc (ID) returns (fixed bin (18));

dcl  ID fixed bin;

		if we_are_list then goto bad_struc;	/* see above */

		goto decompile_mapping (ID);

decompile_mapping (1):				/* scaling */
		call graphic_code_util_$decode_scl (contents_ptr, 3, float_array);

		node = graphic_manipulator_$create_scale (float_array (1), float_array (2), float_array (3), code);
		if code ^= 0 then goto error_return;

		return (node);

decompile_mapping (2):				/* rotation */
		call graphic_code_util_$decode_dpi (contents_ptr, 2, fixed_array);
		node = graphic_manipulator_$create_rotation ((fixed_array (1)), (fixed_array (2)), (fixed_array (3)), code);
		if code ^= 0 then goto error_return;

		return (node);

decompile_mapping (3):				/* clipping */
		call graphic_code_util_$decode_dpi (contents_ptr, 6, fixed_array);
		node = graphic_manipulator_$create_clip ((fixed_array (1)), (fixed_array (2)), (fixed_array (3)),
		     (fixed_array (4)), (fixed_array (5)), (fixed_array (6)), code);
		if code ^= 0 then goto error_return;

		return (node);

	     end decompile_mapping_effector;


decompile_special_effector: proc (ID) returns (fixed bin (18));

dcl  ID fixed bin;

dcl  symbol_name char (168);

dcl  i fixed bin;

dcl  temp_string bit (temp_string_len) based (p),
     p pointer,
     temp_string_len fixed bin,
     cu_$grow_stack_frame ext entry (fixed bin, pointer, fixed bin (35)),
     cu_$shrink_stack_frame ext entry (pointer, fixed bin (35));

		if we_are_list then goto bad_struc;

		goto special_effector (ID);

special_effector (1):				/* symbol */
		symbol_name = substr (graphic_code, graphic_code_index + 3, contents_len - 2);

		graphic_code_index = graphic_code_index + contents_len + 1;

		node = graphic_decompiler_recur (graphic_code, graphic_code_index);
						/* recur but remember symbol */

		node = graphic_manipulator_$assign_name (symbol_name, (node), code);
						/* now use the symbol name */
		if code ^= 0 then goto error_return;

		contents_len = -1;			/* Back up to correct for son's appetite */
		return (node);

special_effector (2):				/* text */
		call graphic_code_util_$decode_spi (contents_ptr, 1, fixed_array);
		node = graphic_manipulator_$create_text (fixed_array (1), contents_len - 3,
		     substr (graphic_code, graphic_code_index + 4, contents_len - 3), code);
		if code ^= 0 then goto error_return;

		return (node);

special_effector (3):				/* datablock */
		temp_string_len = (contents_len - 2) * 9; /* compute length of temp string */

		call cu_$grow_stack_frame (divide (temp_string_len, 36, 17), p, code);
						/* get temp storage for temp string */
		if code ^= 0 then goto error_return;

		temp_string = unspec (substr (graphic_code, graphic_code_index + 3, contents_len - 2));
						/* move it into temp storage */

		do i = 0 to contents_len - 3;		/* extract the relevant bits */
		     substr (temp_string, i*6+1, 6) = substr (temp_string, i*9+4, 6);
		end;

		temp_string_len = (contents_len - 2) * 6; /* reset the length to reflect useful contents */
		node = graphic_manipulator_$create_data (temp_string_len, temp_string, code);
		if code ^= 0 then goto error_return;

		call cu_$shrink_stack_frame (p, code);	/* free temp storage */
		if code ^= 0 then goto error_return;

		return (node);

	     end decompile_special_effector;


decompile_structural_effector: proc (ID) returns (fixed bin (18));

dcl  ID fixed bin;

dcl  uid (1) fixed bin (18);

		goto structural_effector (ID);

structural_effector (1): structural_effector (3): structural_effector (4): structural_effector (7):
structural_effector (8): structural_effector (9): structural_effector (10): structural_effector (11):
structural_effector (12):				/* dynamic effectors */
		code = graphic_error_table_$not_a_structure; /* these can't BE within a structure */
		goto error_return;

structural_effector (2):				/* reference */
		if ^we_are_list then if start + first_element_offset ^= graphic_code_index
		     then goto bad_struc;		/* i.e. we can't occur in an array. */
		we_are_list = "1"b;			/* say we are */

		call graphic_code_util_$decode_uid (contents_ptr, 1, uid); /* get the arg */

		do i = 1 to number_known_nodes while (known_nodes (i).input_node ^= uid (1));
						/* make sure we know about this node */
		end;

		if i > number_known_nodes		/* node does not exist, can't be "reference"d */
		then do;
		     code = graphic_error_table_$not_a_structure;
		     goto error_return;
		end;

		return (uid (1));			/* we're happy. */

structural_effector (5):				/* node begin */
		if graphic_code_index = start then do;	/* begins our own level list */
		     we_are_array = (substr (graphic_code, graphic_code_index + 1, 1) = Array_char);
						/* decide whether we are array or list */

		     contents_ptr = addr (contents_ptr -> char_array (1)); /* bump to point to next char */

		     call graphic_code_util_$decode_uid (contents_ptr, 1, uid); /* get our UID */
		     this_input_node = uid (1);	/* this is who we are now. */

		     return (-1);			/* means, "Don't have any contents yet" */
		end;

		else do;				/* we must recur and decompile it */
		     if ^we_are_list then if start + first_element_offset ^= graphic_code_index
			then goto bad_struc;	/* A list must contain only lists */

		     if we_are_array then goto bad_struc; /* an array cannot contain lists */

		     we_are_list = "1"b;		/* say we are now list */

		     node = graphic_decompiler_recur (graphic_code, graphic_code_index);
						/* generate a son to do work on subtree */

		     contents_len = -1;		/* adjust for son's appetite */

		     return (node);
		end;

structural_effector (6):				/* node end */
		finished = "1"b;			/* make note to create array or list */
		return (-1);

	     end decompile_structural_effector;

	end graphic_decompiler_recur;

%include gm_entry_dcls;

     end graphic_decompiler_;
