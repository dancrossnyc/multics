/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
%;
/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

graphic_element_length_: proc (string, indx) returns (fixed bin);

/* This procedure returns the length of a single graphic effector string.
   Written c. 1973 by C. D. Tavares
   Last modified 04/25/80 by CDT to replace signal statement with call to sub_err_. */

dcl  string char (*) parameter,
     indx fixed bin (21) parameter,
     len fixed bin;

%include graphic_code_dcl;

dcl  effector fixed bin,
     temp_chars char (2) aligned,
     fixed_array (1) fixed bin,
     sub_err_ ext entry options (variable),
     graphic_error_table_$unrecognized_effector ext fixed bin (35) static,
    (addr, byte, divide, hbound, lbound, null, rank, substr) builtin;

dcl  graphic_code_util_$decode_dpi ext entry (pointer, fixed bin, (*) fixed bin);
%skip (10);
	effector = rank (substr (string, indx, 1));	/* get effector value */
	if (effector < lbound (Graphic_Element_Lengths, 1)) |
	(effector > hbound (Graphic_Element_Lengths, 1)) then
	     call sub_err_ (graphic_error_table_$unrecognized_effector, "graphic_element_length_", "s", null, 0,
	     """^a"" not a valid graphic effector.", byte (effector));
						/* stops the user cold, can't return. */

	len = Graphic_Element_Lengths (effector);	/* takes care of simple cases */

	if len ^= 0 then return (len);

	goto special_effector (effector);		/* handle tough cases */

special_effector (61):				/* symbol */
special_effector (62):				/* text */
	effector = effector - 60;			/* little kludge */

	temp_chars = substr (string, indx + effector, 2); /* length of text */
	call graphic_code_util_$decode_dpi (addr (temp_chars), 1, fixed_array); /* get numeric length */

	return (fixed_array (1) + effector + 2);

special_effector (63):				/* data */
	temp_chars = substr (string, indx + 1, 2);	/* get char length */
	call graphic_code_util_$decode_dpi (addr (temp_chars), 1, fixed_array); /* get numeric length */

	len = divide (fixed_array (1) + 5, 6, 17, 0) + 3; /* length in bits -> chars */

	return (len);

     end;
