/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

calcomp_compatible_subrs_: ccs_: proc;

	return;

/* calcomp_compatible_subrs_ has the same entries and calling sequences as routines
   written by CalComp for other machines.  It uses the Multics Graphics System
   to perform much the same actions as the original calls performed. */
/* Note that we do our own scaling as opposed to having the graphic system
   do it for us.  The combination of a large screen_size_factor and a small
   user-supplied movement or height factor works, just as long as the user-supplied
   movement or height factor is not too small to be represented in
   6 fractional bits of precision, which is all Graphics Code allows.  Too many
   things were being pure lost due to this screen_size hackery. */
/* Written 10/24/74 by C. D. Tavares */
/* Modified 03/03/75 by CDT to use multilevel list strategy, for users with LONG calling patterns
   for creating BIG pictures. */
/* Modified 04/15/75 by CDT to fix undersized allocation, and make the allocation a call to
   cu_$grow_stack_frame instead. */
/* Modified 10/20/75 by CDT to rename calcomp_compatible_subrs_.pgs to ccs_special_symbols_.pgs */
/* Modified 04/12/77 by CDT to fix entrypoint symbol from "remembering" old symbol nodes without
   regard to whether the size was the same or not */
/* Modified 03/26/80 by CDT to fix bug whereby origin was not getting reset if
   the pen happened to already be there-- also changed com_err_ calls to sub_err_ */
/* Last modified 02/25/81 by Steve Carlock to use a "new" chaining method which */
/* eliminates the need to remember active modes from one sublist to another */
%page;
%include gm_entry_dcls;
%page;
%include gc_entry_dcls;
%page;
%include graphic_etypes;
%page;
plots:	entry;					/* initializes the world */

dcl 1 static_info aligned static,			/* current positions, scalings, etc. */
    2 cur_position (2) float bin initial (0, 0),
    2 cur_factors (2) float bin initial (1, 1),
    2 rel_positions (2) float bin initial (0, 0),
    2 cur_offsets (2) float bin initial (0, 0),
    2 cur_offs_factors (2) float bin initial (1, 1),
    2 cumulative_rels (2) float bin initial (0, 0),
    2 last_string_ended (2) float bin initial (0, 0),
    2 last_height float bin initial (1),
    2 screen_size_factor float bin initial (1),
    2 current_sublist fixed bin (18),
    2 display_list fixed bin (18),
    2 named_display_list fixed bin (18),
    2 initialized bit (1) aligned initial (""b);

dcl 1 based_static_info aligned based (addr (static_info)),
    2 (cur_x, cur_y) float bin,
    2 (x_factor, y_factor) float bin,
    2 (x_rel, y_rel) float bin,
    2 (x_offset, y_offset) float bin,
    2 (x_offs_factor, y_offs_factor) float bin,
    2 (cumulative_x_rel, cumulative_y_rel) float bin,
    2 (x_string_ended, y_string_ended) float bin;

dcl  pgs_ptr pointer,
     cur_color (3) fixed bin,
     first_time bit (1) aligned static initial ("1"b),
     hcs_$make_ptr ext entry (pointer, char (*), char (*), pointer, fixed bin (35)),
     hcs_$fs_get_path_name ext entry (pointer, char (*), fixed bin, char (*), fixed bin (35));

dcl  temp (100) fixed bin (18),			/* node temps */
     node_fake (1) fixed bin (18),
    (i, j) fixed bin,				/* temps */
     node fixed bin (18);

dcl  graphic_chars_$init ext entry;

	saved_special_symbols, cur_position, cur_offsets, last_string_ended,
	     saved_special_symbol_heights = 0;		/* initialize everything */
	cur_factors, cur_offs_factors, last_height = 1;
	cur_color (*) = 63;

	call graphic_manipulator_$init (code);		/* create/reinit WGS */
	if code ^= 0 then				/* oops */
init_err:	     call sub_err_ (code, "calcomp_compatible_subrs_$plots", "s", null, 0, "Initializing display list.");

	call graphic_chars_$init;			/* clear the char memory */

	node = graphic_manipulator_$create_position (Setposition, -512, -512, 0, code); /* initial origin */
	if code ^= 0 then goto init_err;

	node_fake = node;				/* %&$!#@! compiler simfaults on ((node)) in its place */
	current_sublist = graphic_manipulator_$create_array (node_fake, 1, code);
	if code ^= 0 then goto init_err;

	display_list = current_sublist;		/* the main honcho */

	named_display_list = graphic_manipulator_$assign_name ("ccs_display_list_", display_list, code);
						/* just to keep things clean */
	if code ^= 0 then goto init_err;

	initialized = "1"b;

	return;

%page;
plot:	entry (abs_x, abs_y, indicator);		/* draws a line at a time */

dcl  indicator fixed bin parameter,
    (abs_x, abs_y) float bin parameter;

dcl  switch fixed bin,
     sub_err_ ext entry options (variable),
     error_table_$badcall ext fixed bin (35),
     abs builtin,
     code fixed bin (35),
     movement fixed bin;

	call check_init;				/* have we been plotsed? */

%skip(5);

check_init: proc;					/* to check that calls occur in correct order */

	     if ^initialized then
		call sub_err_ (error_table_$out_of_sequence, "calcomp_compatible_subrs_", "s", null, 0,
		"A call to calcomp_compatible_subrs_$plots must be made before any further work is allowed.");

	end check_init;

%skip(5);

	call internal_plot (abs_x, abs_y, indicator, "calcomp_compatible_subrs_$plot"); /* pass buck */

%skip(5);

internal_plot: proc (abs_x, abs_y, indicator, whoami);

dcl (abs_x, abs_y) float bin,
     indicator fixed bin,
     whoami char (*);

dcl  rel_motion (2) float bin;

	     rel_motion (1) = abs_x - cur_x;
	     rel_motion (2) = abs_y - cur_y;

	     if indicator < 0 then cur_position = 0;	/* reset origin-- we never reference these */
	     else do;				/* after this point anyhow */
		cur_x = abs_x;			/* note we got where we were going */
		cur_y = abs_y;			/* this may throw us off if we DO get some error */
	     end;					/* later while creating or inserting the new element */

	     switch = abs (indicator);		/* switchon switch */

	     if switch > 30 then goto close_picture;

	     i = mod (switch, 10);			/* see what the magic digit is */

	     if i > 3 then goto indicator_out_of_bounds;
	     if i < 2 then goto indicator_out_of_bounds;

	     if rel_motion (1) = 0 then if rel_motion (2) = 0 then return; /* no-op */

	     goto plot_label (switch);

plot_label (2):
plot_label (22):
	     movement = Vector;
	     goto plot_common;

plot_label (3):
plot_label (23):
	     movement = Shift;
	     goto plot_common;

plot_label (12):
	     movement = Vector;
	     goto apply_offsets;

plot_label (13):
	     movement = Shift;
apply_offsets:
	     rel_motion = (rel_motion - cur_offsets) / cur_offs_factors;
plot_common:
	     node = graphic_manipulator_$create_position
		(movement, rel_motion (1) * screen_size_factor, rel_motion (2) * screen_size_factor, 0, code);
	     if code ^= 0 then do;			/* zounds. */
		call sub_err_ (code, whoami, "h", null, 0, "Creating ^[vector^;shift^].", (movement = Vector));
		goto error_return;
	     end;

	     call append_element (node, code);		/* tack it on */
	     if code ^= 0 then do;
		call sub_err_ (code, whoami, "h", null, 0, "Appending ^[vector^;shift^] to display list.", (movement = Vector));
		goto error_return;
	     end;

	     return;

indicator_out_of_bounds:				/* foo on you */
	     call sub_err_ (error_table_$badcall, whoami, "h", null, 0, "Indicator ^d not recognized.", indicator);
	     goto error_return;

close_picture:
	     call graphic_compiler_$display (named_display_list, code); /* push it out */
	     if code ^= 0 then do;			/* shucks */
		call sub_err_ (code, whoami, "h", null, 0, "Attempting to display and close completed picture.");
		goto error_return;
	     end;

	     initialized = ""b;			/* better call plots next thing */
	     return;

	end internal_plot;
%page;
append_element: proc (item, code);


dcl  item fixed bin (18),
     code fixed bin (35);

dcl  temp fixed bin (18);
dcl  fudge (2) fixed bin (18);

dcl  graphic_error_table_$lsm_blk_len ext fixed bin (35);

	     call graphic_manipulator_$add_element (current_sublist, -1, item, code);
	     if code ^= graphic_error_table_$lsm_blk_len then return; /* it worked or was error we can't fix. */

	     fudge (1) = 0;				/* save a spot for the last element on the current sublist */
	     fudge (2) = item;

	     temp = graphic_manipulator_$create_array (fudge, 2, code); /* create the "new" current sublist */

	     if code ^= 0 then return;

/* now chain the new list onto the end of the old list.  By doing things this
   way, we do not have to worry about copying active modes from list to list.
   */

	     fudge (1) = graphic_manipulator_$replace_element (current_sublist, -1, temp, code);

	     if (code ^= 0)
	     then return;

	     current_sublist = temp;			/* the new list is now the current list */

/* save the item we took out of the old list in the proper position in the new
   list */

	     temp = graphic_manipulator_$replace_element (current_sublist, 1, fudge (1), code);

	     return;				/* with whatever code resulted. */

	end append_element;

%skip(5);
error_return: return;
%page;
factor:	entry (scaling);				/* user's own scaling factor */

dcl  scaling float bin parameter;
dcl  whoami char (64);

	whoami = "calcomp_compatible_subrs_$factor";

	call check_init;

	cur_factors = scaling;			/* simple? */
	goto append_scales;

dfact:	entry (x_scaling, y_scaling);			/* to set two factors */

dcl (x_scaling,
     y_scaling) float bin parameter;

	whoami = "calcomp_compatible_subrs_$dfact";

	call check_init;

	x_factor = x_scaling;			/* also simple */
	y_factor = y_scaling;

append_scales:
	node = graphic_manipulator_$create_scale (x_factor, y_factor, 1, code); /* make scaling element */
	if code ^= 0 then do;
	     call sub_err_ (code, whoami, "h", null, 0, "Attempting to create scale factor.");
	     return;
	end;

	call append_element (node, code);		/* tack it on */
	if code ^= 0 then call sub_err_ (code, whoami, "h", null, 0, "Appending scale factor to display list.");

	return;

%page;
where:	entry (x_position, y_position, scaling);	/* to find out where we are, and scales */

dcl (x_position,
     y_position) float bin parameter;

	call check_init;

	x_position = cur_x;				/* simple. */
	y_position = cur_y;

	if x_factor = y_factor then scaling = x_factor;	/* this is the way it should be */

	else do;					/* poor loser. */
	     call sub_err_ (error_table_$badcall, "calcomp_compatible_subrs_$where", "h", null, 0,
		"Type ""start"" to return the larger scale factor."); /* whatever help it is. */
	     scaling = max (x_factor, y_factor);	/* they better not be negative. */
	end;

	return;
%skip(5);
dwhr:	entry (x_position, y_position, x_scaling, y_scaling);

	call check_init;

	x_position = cur_x;				/* as simple. */
	y_position = cur_y;
	x_scaling = x_factor;
	y_scaling = y_factor;
	return;
%page;
offset:	entry (x_zero, x_scaling, y_zero, y_scaling);	/* for arcane hackers */

dcl (x_zero,
     y_zero) float bin parameter;

	call check_init;

	x_offset = x_zero;
	y_offset = y_zero;				/* copy them all in */
	x_offs_factor = x_scaling;
	y_offs_factor = y_scaling;

	return;
%page;
wofst:	entry (x_zero, x_scaling, y_zero, y_scaling);	/* for absent-minded arcane hackers */

	call check_init;

	x_zero = x_offset;				/* copy them back out  */
	y_zero = y_offset;
	x_scaling = x_offs_factor;
	y_scaling = y_offs_factor;
	return;
%page;
newpen:	entry (color);				/* for color hackery */

dcl  color fixed bin parameter;

dcl  red_color fixed bin defined (cur_color (3));
dcl  green_color fixed bin defined (cur_color (2));
dcl  blue_color fixed bin defined (cur_color (1));

/* we assume pens are 1 = blue; 2 = green; 3 = red. */

	call check_init;

	if color < 1 then goto bad_color;
	if color > 3 then goto bad_color;

	cur_color (*) = 0;
	cur_color (color) = 63;			/* full intensity */

	node = graphic_manipulator_$create_color (red_color, green_color, blue_color, code);
	if code ^= 0 then do;
	     call sub_err_ (code, "calcomp_compatible_subrs_$newpen", "h", null, 0, "While creating color element.");
	     return;
	end;

	call append_element (node, code);		/* tack it on */
	if code ^= 0 then do;
	     call sub_err_ (code, "calcomp_compatible_subrs_$newpen", "h", null, 0, "While appending color element to display list.");
	     return;
	end;

	return;

bad_color: call sub_err_ (error_table_$badcall, "calcomp_compatible_subrs_$newpen", "h", null, 0,
	     "Pen number ^d unrecognized.", color);
	return;
%page;
set_dimension: entry (screen_size);			/* for immigrants */

dcl  screen_size float bin parameter;
dcl  error_table_$out_of_sequence ext fixed bin (35);

	screen_size_factor = 1024/screen_size;		/* that's it */
	return;
%skip(5);
symbol:	entry (abs_x, abs_y, height, string, angle, string_len); /* for strings and funnies */

dcl (height,
     angle) float bin parameter,
     string char (*) parameter,
     string_len fixed bin parameter;

dcl (x_string_ended_temp, y_string_ended_temp) float bin;

dcl  graphic_chars_$long_tb ext entry
    (char (*), fixed bin, float bin, float bin, float bin, float bin, fixed bin (35)) returns (fixed bin (18)),
     graphic_chars_ ext entry (char (*), fixed bin, float bin, float bin, fixed bin (35)) returns (fixed bin (18));

dcl  fixed_bin_based fixed bin based;

dcl (real_x, real_y, real_height) float bin;

dcl  symbol_name char (32),
     ioa_$rsnnl ext entry options (variable);

dcl  dirname char (168) static initial (""),
     ename char (32) static initial ("ccs_special_symbols_.pgs");

dcl  saved_special_symbols (2, 0:199) static fixed bin (18) initial ((400)0),
						/* first is scaled node, second is unscaled */
     saved_special_symbol_heights (0:199) static float bin initial ((200) 0e0);
						/* so we don't seek symbols more than once per invocation */

	call check_init;

	call internal_symbol (abs_x, abs_y, height, string, angle, string_len, "calcomp_compatible_subrs_$symbol");

	return;
%page;
internal_symbol: proc (abs_x, abs_y, height, string, angle, string_len, whoami);

dcl (abs_x, abs_y) float bin,
    (height, angle) float bin,
     string char (*),
     string_len fixed bin,
    (save_cur_x, save_cur_y) float bin,
     whoami char (*);

	     if abs_x = 999 then do;			/* wants it started where last left off */
		save_cur_x = cur_x;
		real_x = cur_x + x_string_ended;
	     end;
	     else do;				/* gave an explicit location */
		save_cur_x, real_x = abs_x;
		x_string_ended = 0;
	     end;

	     if abs_y = 999 then do;			/* check same cruft for y */
		save_cur_y = cur_y;
		real_y = cur_y + y_string_ended;
	     end;
	     else do;
		save_cur_y, real_y = abs_y;
		y_string_ended = 0;
	     end;

	     if string_len = -2 then call internal_plot (real_x, real_y, 2, whoami);
						/* wants to go there trailing ink */
	     else call internal_plot (real_x, real_y, 3, whoami); /* will go quietly, officer */

	     if height = 999 then real_height = last_height;
	     else real_height, last_height = height;

	     if string_len <= 0			/* isn't a string, it's a symbol number */
	     then call get_special_symbol (addr (string) -> fixed_bin_based, temp (2), real_height, whoami);

	     else do;				/* was really a string */
		temp (2) = graphic_chars_$long_tb (substr (string, 1, string_len), Lower_left,
		     real_height * screen_size_factor, real_height * screen_size_factor,
		     x_string_ended_temp, y_string_ended_temp, code); /* make it into vectors */
		if code ^= 0 then do;
		     call sub_err_ (code, whoami, "h", null, 0, "Creating vectors from ^a.", substr (string, 1, string_len));
		     goto error_return;
		end;

		x_string_ended_temp = x_string_ended_temp / screen_size_factor; /* un-scale our indicators */
		y_string_ended_temp = y_string_ended_temp / screen_size_factor;

		x_string_ended = x_string_ended + cosd (angle) * x_string_ended_temp /* do rotation */
		     - sind (angle) * y_string_ended_temp; /* to keep track of where */
		y_string_ended = y_string_ended + sind (angle) * x_string_ended_temp /* we left off */
		     + cosd (angle) * y_string_ended_temp; /* so we can go back */
	     end;

	     temp (1) = graphic_manipulator_$create_rotation (0, 0, angle, code); /* rotate it */
	     if code ^= 0 then do;
		call sub_err_ (code, whoami, "h", null, 0, "Creating angle element.");
		goto error_return;
	     end;

	     node = graphic_manipulator_$create_array (temp, 2, code); /* bind them together */
	     if code ^= 0 then do;
		call sub_err_ (code, whoami, "h", null, 0, "Creating array from angle and string.");
		goto error_return;
	     end;

	     call append_element (node, code);		/* tack it on */
	     if code ^= 0 then do;
		call sub_err_ (code, whoami, "h", null, 0, "Appending symbol element to display list.");
		goto error_return;
	     end;


	     if string_len > 0 then call internal_plot (save_cur_x, save_cur_y, 3, whoami); /* go back there */

	end internal_symbol;
%page;
get_special_symbol: proc (symbol_no, return_node, real_height, whoami); /* to get funnies */

dcl  symbol_no fixed bin parameter,
     return_node fixed bin (18) parameter,
     temp (2) fixed bin (18),
     real_height float bin,
     whoami char (*) parameter;

	     if first_time then do;			/* find the calcomp symbol PGS */

		call hcs_$make_ptr (null, (ename), "", pgs_ptr, code); /* use search rules */
		if pgs_ptr = null then do;		/* can't find one */
pgs_err:		     call sub_err_ (code, "calcomp_compatible_subrs_$plots", "h", null, 0,
			"Attempting to locate ^a.^/  Please notify the system maintenance staff.", ename); /* Horrors. */
		     goto error_return;
		end;

		call hcs_$fs_get_path_name (pgs_ptr, dirname, 0, "", code); /* find out dirname */
		if code ^= 0 then goto pgs_err;

		first_time = ""b;
	     end;

	     if symbol_no < lbound (saved_special_symbols, 2) then goto sym_unknown;
	     if symbol_no > hbound (saved_special_symbols, 2) then goto sym_unknown;

	     if saved_special_symbol_heights (symbol_no) = real_height then do;
		return_node = saved_special_symbols (1, symbol_no);
		return;
	     end;

	     if saved_special_symbol_heights (symbol_no) ^= 0 then /* already have sym, but not right size */
		temp (2) = saved_special_symbols (2, symbol_no);

	     else do;				/* don't have sym, must fetch */
sym_unknown:
		call ioa_$rsnnl ("calcomp_symbol_^d", symbol_name, 0, symbol_no); /* construct name */

		call graphic_manipulator_$get_struc (dirname, ename, symbol_name, 1, code); /* get from PGS */
		if code ^= 0 then do;
		     call sub_err_ (code, whoami, "c", null, 0, "^a not found; using ""*""", symbol_name); /* hm. */
		     return_node = graphic_chars_ ("*", Center, real_height * screen_size_factor,
			real_height * screen_size_factor, code);
		     if code ^= 0 then do;
			call sub_err_ (code, whoami, "h", null, 0, "Creating vectors from ""*""");
			goto error_return;
		     end;

		     return;

		end;

		temp (2) = graphic_manipulator_$find_structure (symbol_name, 0, code); /* get desired one */
		if code ^= 0 then do;
		     call sub_err_ (code, whoami, "h", null, 0, "Locating ^a in working graphic segment.", symbol_name);
		     goto error_return;		/* something's dead wrong. */
		end;
	     end;

	     temp (1) = graphic_manipulator_$create_scale (real_height * screen_size_factor / 10,
		real_height * screen_size_factor / 10,	/* calcomp symbols are 10 X 10 */
		1, code);				/* scale to desired size */
	     if code ^= 0 then do;
		call sub_err_ (code, whoami, "h", null, 0, "Creating height element.");
		goto error_return;
	     end;


	     return_node = graphic_manipulator_$create_array (temp, 2, code); /* bind them together */
	     if code ^= 0 then do;
		call sub_err_ (code, whoami, "h", null, 0, "Assembling ^a", symbol_name);
		goto error_return;
	     end;

	     if symbol_no >= lbound (saved_special_symbols, 2) then
		if symbol_no <= hbound (saved_special_symbols, 2) then do;
						/* remember this symbol even if previously known, because
						   perhaps size has changed.  We always remember LAST size, banking on user
						   not "thrashing" w.r.t. different sizes for same symbol */
		     saved_special_symbol_heights (symbol_no) = real_height;
		     saved_special_symbols (1, symbol_no) = return_node;
		     saved_special_symbols (2, symbol_no) = temp (2);
		end;

	     return;

	end get_special_symbol;
%page;
number:	entry (abs_x, abs_y, height, float_num, angle, precision); /* like symbol, for float numbers */

dcl  float_num float bin parameter,
     precision fixed bin parameter;

dcl  char_number char (24),
     char_len fixed bin,
     fixed_num fixed bin;

	if precision < 0 then do;
	     if float_num > 0 then fixed_num = (float_num * 1010b ** (precision+1)) + .5e0; /* round it */
	     else fixed_num = (float_num * 1010b ** (precision+1)) - .5e0;

	     call ioa_$rsnnl ("^d", char_number, char_len, fixed_num); /* put it out as integer */
	end;

	else call ioa_$rsnnl ("^.vf", char_number, char_len, precision, float_num);
						/* ioa_ rounds these. Cute. */

	call internal_symbol (abs_x, abs_y, height, char_number, angle, char_len, "calcomp_compatible_subrs_$number");
	return;					/* not much to it */
%page;
scale:	entry (array, axis_len, n_points, step_size);	/* Picks nice scale factors for data arrays */

dcl  array float bin dimension (*) parameter,
     axis_len float bin parameter,
     n_points fixed bin parameter,
     step_size fixed bin parameter;

dcl  default_screen_size_factor static float bin initial (1);

dcl (minel, maxel) float bin,
     spread float bin,
     logno float bin,
     exponent fixed bin,
     n_tics fixed bin,
     nondimensional float bin,
    (min,
     max,
     addr,
     binary,
     fixed,
     log10,
     sign,
     cosd,
     sind,
     substr) builtin,
     compensation float bin,
     steps fixed bin,
     raw_dv float bin,
    (delta_value, first_value) float bin;

	call check_init;

/* Special hack: The original axis entry wants to plot one tic mark per inch.  Inches really
   mean nothing to us here, and inches may be equivalent to points if we are running in native mode.
   So we check for native mode and enforce our own standard; 1 inch = 100 points.  If we are not in native mode,
   then we assume the guy knows what he wants. */

	if screen_size_factor = default_screen_size_factor then n_tics = axis_len / 100; /* Ours */
	else n_tics = axis_len;			/* Theirs */

	minel, maxel = array (1);			/* have to start somewhere */

	steps = abs (step_size);			/* compute length of tread */

	do i = steps + 1 by steps to (steps * (n_points - 1)) + 1; /* clomp up array */
	     minel = min (minel, array (i));
	     maxel = max (maxel, array (i));
	end;

	spread = maxel - minel;
	if spread = 0 then if minel = 0 then do;	/* clever. all zeroes. */
		minel = -1e-2;			/* fudge */
		maxel = 1e-2;
		spread = maxel - minel;
	     end;

	     else do;				/* all constants */
		minel = .9e0 * minel;		/* center on constants */
		maxel = 1.11e0 * maxel;
		spread = maxel - minel;
	     end;

	logno = log10 (spread / n_tics);		/* normalize number */
	exponent = binary (logno);
	raw_dv = binary (10) ** exponent;

	nondimensional = (spread / n_tics) / raw_dv;

	if nondimensional < 1.1e0 then delta_value = raw_dv; /* The following cute values are CalComp defined. */

	else if nondimensional <= 2 then delta_value = 2 * raw_dv;

	else if nondimensional <= 4 then delta_value = 4 * raw_dv;

	else if nondimensional <= 5 then delta_value = 5 * raw_dv;

	else if nondimensional <= 8 then delta_value = 8 * raw_dv;

	else delta_value = raw_dv * binary (10);

	if step_size > 0 then do;			/* first = min, delta = positive */
	     if minel < 0 then compensation = -.9999999;
	     else compensation = 0;
	     first_value = fixed (binary (minel / delta_value) + compensation) * delta_value;
	end;

	else do;					/* first = max, delta = negative */
	     if maxel < 0 then compensation = 0;
	     else compensation = .9999999;
	     first_value = fixed (binary (maxel / delta_value) + compensation) * delta_value;
	     delta_value = -delta_value;
	end;

	array ((n_points) * steps + 1) = first_value;	/* plug them in */
	array ((n_points+1) * steps + 1) = delta_value;

	return;
%page;
axis:	entry (abs_x, abs_y, title, control, axis_len, angle, first_val, delta_val);

dcl  title char (*) parameter,
     control fixed bin parameter,
     first_val float bin parameter,
     delta_val float bin parameter;

dcl (adj_axis_len, x_between_tics) float bin,
    (tic_mark, a (10)) fixed bin (18),
     tic_vect float bin,
     title_len fixed bin,
     alignment fixed bin;

dcl  underflow condition;

	call check_init;

	delta_value = delta_val;
	first_value = first_val;

	call internal_plot (abs_x, abs_y, 3, "calcomp_compatible_subrs_$axis"); /* go to begin point */

	if screen_size_factor = default_screen_size_factor then do; /* Ours */
	     adj_axis_len = fixed (binary (axis_len)) / 100; /* 1 inch = 100 points */
	     x_between_tics = 100;
	end;
	else do;					/* Theirs */
	     adj_axis_len = fixed (binary (axis_len));	/* 1 inch = screen_size_factor points */
	     x_between_tics = screen_size_factor;
	end;

	tic_vect = 10 * sign (control);		/* screen_size does not matter here. 10 is invariant. */

	if control < 0 then alignment = Lower_center;	/* counterclockwise labels */
	else alignment = Upper_center;		/* clockwise labels */

	a (1) = graphic_manipulator_$create_position (Shift, 0, tic_vect, 0, code);
	if code ^= 0 then goto tic_err;

	a (2) = graphic_manipulator_$create_position (Vector, 0, tic_vect, 0, code);
	if code ^= 0 then goto tic_err;

	a (3) = graphic_manipulator_$create_position (Vector, x_between_tics, 0, 0, code);
	if code ^= 0 then goto tic_err;

	a (4) = graphic_manipulator_$create_position (Shift, 0, -2 * tic_vect, 0, code);
	if code ^= 0 then do;			/* nervous tic */
tic_err:	     call sub_err_ (code, "calcomp_compatible_subrs_$axis", "h", null, 0, "Creating tic components.");
	     return;
	end;

	tic_mark = graphic_manipulator_$create_array (a, 4, code); /* make array */
	if code ^= 0 then do;
	     call sub_err_ (code, "calcomp_compatible_subrs_$axis", "h", null, 0, "Creating array for tic_mark.");
	     return;
	end;


	temp (1) = graphic_manipulator_$create_rotation (0, 0, angle, code); /* rotate the axis */
	if code ^= 0 then do;
	     call sub_err_ (code, "calcomp_compatible_subrs_$axis", "h", null, 0, "Creating axis rotation");
	     return;
	end;

	temp (2) = graphic_manipulator_$create_position (Shift, 0, -2 * tic_vect, 0, code);
						/* to start in right place */
	if code ^= 0 then goto axis_err;

	on underflow;

	do i = 1 to adj_axis_len + 1;			/* make right number of tics */
	     call ioa_$rsnnl ("^3e", char_number, j, first_value + (i-1) * delta_value);
strip_blanks:  if substr (char_number, 1, 1) = " " then do; /* ioa_ sometimes does this */
		char_number = substr (char_number, 2);
		j = j - 1;
		goto strip_blanks;
	     end;
	     temp (2*i+1) = graphic_chars_ (substr (char_number, 1, j), alignment, 10, 10, code);
	     if i <= adj_axis_len then temp (2*i+2) = tic_mark; /* don't need extra tic mark */
	end;

	revert underflow;

	i = (adj_axis_len + 1) * 2 + 1;

	temp (1+i) = a (1);				/* create last tic */
	temp (2+i) = a (2);
	temp (3+i) = graphic_manipulator_$create_position
	     (Shift, fixed (binary (-axis_len)) * screen_size_factor/2, -4 * tic_vect, 0, code);
						/* return halfway, for title */
	if code ^= 0 then goto axis_err;

	title_len = abs (control);

	temp (4+i) = graphic_chars_ (substr (title, 1, title_len), alignment, 25, 25, code);
	if code ^= 0 then do;
	     call sub_err_ (code, "calcomp_compatible_subrs_$axis", "h", null, 0, "Creating vectors from title");
	     return;
	end;

	temp (5+i) = graphic_manipulator_$create_position /* return all the way */
	     (Shift, fixed (binary (-axis_len)) * screen_size_factor/2, 4*tic_vect, 0, code);
	if code ^= 0 then do;
axis_err:	     call sub_err_ (code, "calcomp_compatible_subrs_$axis", "h", null, 0, "Creating elements of axis.");
	     return;
	end;

	node = graphic_manipulator_$create_array (temp, 5+i, code); /* put it all together */
	if code ^= 0 then do;
	     call sub_err_ (code, "calcomp_compatible_subrs_$axis", "h", null, 0, "Creating array from axis", "h", null, 0);
	     return;
	end;

	call append_element (node, code);		/* tack it on */
	if code ^= 0 then call sub_err_ (code, "calcomp_compatible_subrs_$axis", "h", null, 0,
	     "Appending axis to display list.");

	return;
%page;
line:	entry (x_array, y_array, n_points, step_size, line_type, symbol_no); /* to plot data elements */

dcl (x_array (*), y_array (*)) float bin parameter,
     symbol_no fixed bin parameter,
     line_type fixed bin parameter;

dcl (delta_value_x,
     delta_value_y,
     first_value_x,
     first_value_y,
     temp_scale) float bin;

dcl  alloc_temp (alloc_temp_length) based (atp) fixed bin (18) based,
     alloc_temp_length fixed bin,
     atp pointer initial (null);

dcl  cu_$grow_stack_frame ext entry (fixed bin, pointer, fixed bin (35));

dcl  do_symbols bit (1) aligned,
     cleanup condition,
     every_n fixed bin,
     counter fixed bin,
    (x_scale, y_scale) float bin,
    (mod, null) builtin;

	call check_init;

	first_value_x = x_array ((n_points) * step_size + 1); /* grab scaling factors off end */
	first_value_y = y_array ((n_points) * step_size + 1);

	delta_value_x = x_array ((n_points + 1) * step_size + 1);
	delta_value_y = y_array ((n_points + 1) * step_size + 1);

	if screen_size_factor = default_screen_size_factor then temp_scale = 100; /* Ours */
	else temp_scale = 1;			/* Theirs */

	x_scale = temp_scale * screen_size_factor / delta_value_x;
	y_scale = temp_scale * screen_size_factor / delta_value_y;

	do_symbols = line_type ^= 0;			/* if want symbols plotted */
	call internal_plot (0, 0, 3, "calcomp_compatible_subrs_$line"); /* get back to origin */
	if do_symbols
	then call get_special_symbol (symbol_no, node, 10/screen_size_factor, "calcomp_compatible_subrs_$line");

	every_n = abs (line_type);
	cumulative_rels = 0;

	if every_n = 0 then alloc_temp_length = n_points + 10; /* the "10" is for good luck */
	else alloc_temp_length = n_points + n_points/every_n + 10;

	call cu_$grow_stack_frame (alloc_temp_length, atp, code);
	if code ^= 0 then goto bad_line;

	x_rel = (x_array (1) - first_value_x) * x_scale;	/* compute initial shift */
	y_rel = (y_array (1) - first_value_y) * y_scale;

	alloc_temp (1) = graphic_manipulator_$create_position (Shift, x_rel, y_rel, 0, code);
	if code ^= 0 then do;
bad_line:	     call sub_err_ (code, "calcomp_compatible_subrs_$line", "h", null, 0, "Constructing elements of line array.");
	     return;
	end;

	if do_symbols then alloc_temp (2) = node;
	else alloc_temp (2) = 0;

	cumulative_rels = cumulative_rels + rel_positions; /* keep track of position */

	if line_type < 0 then movement = Shift;		/* wants no lines plotted */
	else movement = Vector;			/* wants lines plotted */
	counter = 1;				/* allow for symbol at initial point */
	j = 1;

	do i = 3 by 1 while (j <= (n_points * step_size) - 1); /* clomp up array */
	     j = j + step_size;
	     counter = counter + 1;

	     x_rel = (x_array (j) - x_array (j - step_size)) * x_scale;
	     y_rel = (y_array (j) - y_array (j - step_size)) * y_scale;

	     alloc_temp (i) = graphic_manipulator_$create_position (movement, x_rel, y_rel, 0, code);
	     if code ^= 0 then goto bad_line;

	     cumulative_rels = cumulative_rels + rel_positions;

	     if do_symbols then if mod (counter, every_n) = 0 then do; /* put out a symbol here */
		     i = i + 1;
		     alloc_temp (i) = node;
		end;
	end;

	node = graphic_manipulator_$create_array (alloc_temp, i-1, code); /* put it together */
	if code ^= 0 then do;
	     call sub_err_ (code, "calcomp_compatible_subrs_$line", "h", null, 0, "Assembling data points into array.");
	     return;
	end;

	call append_element (node, code);		/* tack it on */
	if code ^= 0 then call sub_err_ (code, "calcomp_compatible_subrs_$line", "h", null, 0,
	     "Adding line array to display list.");

	cur_position = cur_position + cumulative_rels / screen_size_factor; /* set cur pos to end of line */

	return;
     end ccs_;
