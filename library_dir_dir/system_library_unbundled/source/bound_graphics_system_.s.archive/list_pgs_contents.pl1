/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

list_pgs_contents: lpc: proc;

/* This command lists the symbols resident in a permanent graphic segment
   (PGS).  Usage is explaned in the variable "explanation", which is printed
   if called with no args.  The star convention is honored both for names of
   PGS's and for symbols to be found.

   Written 10/10/75 by C. D. Tavares.
   Modified 02/08/80 by CDT to use lsm_ directly instead of using
   graphic_manipulator and thereby wiping out the WGS. */


/* AUTOMATIC */

dcl  al fixed bin,
     ap pointer,
     arg_array (32) char (32),
     arg_satisfied (32) bit (1),
     code fixed bin (35),
     dname char (168),
     each_seg fixed bin,
     elements_used fixed bin,
     ename char (32),
     error_label label local,
     fake_array (1) fixed bin (18),
     i fixed bin,
     lsm_curl fixed bin,
     lsm_type fixed bin,
     nargs fixed bin;

/* STATIC */

dcl  sys_area_p pointer static initial (null);

/* EXTERNAL STATIC */

dcl  error_table_$too_many_args ext fixed bin (35) static,
     graphic_error_table_$inv_node_type ext fixed bin (35) static;

/* CONSTANTS */

dcl  explanation char (36) static initial ("Usage: lpc pgs_path {symbol_names}.");

/* ENTRIES */

dcl (com_err_, com_err_$suppress_name) ext entry options (variable),
     check_star_name_$entry ext entry (char (*), fixed bin (35)),
     cu_$arg_count ext entry (fixed bin),
     cu_$arg_ptr ext entry (fixed bin, pointer, fixed bin, fixed bin (35)),
     expand_path_ ext entry (pointer, fixed bin, pointer, pointer, fixed bin (35)),
     get_system_free_area_ ext entry returns (pointer),
     hcs_$star_ entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35)),
     hcs_$terminate_noname entry (ptr, fixed bin (35)),
     ioa_ ext entry options (variable),
     match_star_name_ ext entry (char (*), char (*), fixed bin (35)),
     sort_items_$char ext entry (pointer, fixed bin),
     suffixed_name_$make ext entry (char (*), char (*), char (32), fixed bin (35));

/* BASED */

dcl  arg based (ap) char (al),
     system_free_area area based (sys_area_p);

/* BUILTINS AND CONDITIONS */

dcl (addr, char, dim, length, null, sum) builtin;

dcl  cleanup condition;
%page;
%include lsm_entry_dcls;
%page;
%include lsm_node_types;
%page;
%include lsm_formats;
%page;
%include star_structures;
%page;
	error_label = returner;			/* tell "crump" to abort whole command if we fail now */

	call cu_$arg_ptr (1, ap, al, code);		/* get name of PGS to be inspected */
	if code ^= 0 then call crump (code, explanation); /* tell them how things are */

	call expand_path_ (ap, al, addr (dname), addr (ename), code);
	if code ^= 0 then call crump (code, arg);

	call suffixed_name_$make ((ename), "pgs", ename, code); /* make sure suffix "pgs" is included */
	if code ^= 0 then call crump (code, ename);

	call cu_$arg_count (nargs);			/* see if any other args */
	nargs = nargs - 1;				/* from now on, we use nargs only to count symbol args */

	if nargs = 0 then do;			/* no specific symbols wanted; list everything */
	     nargs = 1;
	     arg_array (1) = "**";
	end;

	else do;					/* wants only certain symbols listed */
	     if nargs > dim (arg_array, 1)
	     then call crump (error_table_$too_many_args, "Max symbol names = " || char (dim (arg_array, 1)));
						/* too many args, can't handle. */

	     do i = 1 to nargs;			/* collect as many as we can handle */
		call cu_$arg_ptr (i+1, ap, al, code);	/* get one symbol specification */
		call check_star_name_$entry (arg, code); /* is it an OK entry/star name? */
		if code > 3 then call crump (code, arg);
		arg_array (i) = arg;		/* remember it */
	     end;
	end;


	call check_star_name_$entry (ename, code);	/* was the PGS name a starname? */
	if code > 3 then call crump (code, ename);	/* yes, and an illegal one too. */

	if code = 0				/* not a star name */
	then call process_pgs (ename);		/* process one and quit */

	else do;					/* contains stars */

	     if sys_area_p = null ()			/* get an area for hcs_$star */
	     then sys_area_p = get_system_free_area_ ();

	     call hcs_$star_ (dname, ename, star_BRANCHES_ONLY, sys_area_p, star_entry_count, star_entry_ptr, star_names_ptr, code);
						/* see how many PGS's match starname */
	     if code ^= 0 then call crump (code, ename);

	     error_label = end_of_star_loop;		/* say on bomb-out, continue with next PGS */

	     do each_seg = 1 to star_entry_count;	/* do once for each match */

		call process_pgs (star_names (star_entries (each_seg).nindex)); /* process that one */

end_of_star_loop:
	     end;

	     free star_names in (system_free_area), star_entries in (system_free_area);
						/* clean up after ourselves */

	end;

returner:	return;
%page;
process_pgs: proc (ename);				/* does the job for one PGS */

dcl  ename char (32);

dcl  segptr pointer;

	     segptr = null;

	     on cleanup call hcs_$terminate_noname (segptr, 0);

	     call lsm_fs_$init_seg (segptr, dname, ename, Find_seg, code);
	     if code ^= 0 then call crump (code, "^a>^a.");

	     call lsm_sym_$sym_list (segptr, fake_array, elements_used, 0);
						/* just to see how many symbols there are */
	     if elements_used = 0 then		/* don't waste time */
		call com_err_$suppress_name (0, "list_pgs_contents", "Symbol table is empty.^/");

	     else begin;				/* allocates sufficient storage for arrays */

dcl  node_array (elements_used) fixed bin (18);

dcl 1 symbol_info (elements_used) aligned,		/* this holds our info; will be sorted */
    2 name_array char (64),				/* name of each symbol */
    2 prefix char (8);				/* "(null)" if the symbol is an empty symbol */

dcl 1 based_symbol_info like symbol_info aligned based;	/* template for one symbol */

dcl  name char (64),
     value fixed bin (18);

dcl 1 sort_structure aligned,				/* as desired by sort_items_$char */
    2 useful_elements fixed bin (24),
    2 sort_ptrs (elements_used) pointer unaligned;

dcl (i, j) fixed bin,
     found bit (1) aligned;

		call lsm_sym_$sym_list (segptr, node_array, elements_used, code);
						/* This time, do it in earnest, for the info. */
		if code ^= 0			/* really unexpected */
		then call crump (code, "Error while examining symbol table: num_syms = " || char (elements_used));

		call ioa_ ("^/^2-^a>^a^/", dname, ename); /* print out heading identifying PGS */

		do i = 1 to nargs;
		     arg_satisfied (i) = ""b;		/* say this starname hasn't been matched yet */
		end;

		useful_elements = 0;		/* count of how many satisfy starname */

		do i = 1 to elements_used;		/* loop thru elements matching starnames */

		     call lsm_$get_blk (segptr, node_array (i), lsm_type, lsm_curl, node_ptr, code);
		     if code = 0 then
			if lsm_type ^= symbol_type then
			     code = graphic_error_table_$inv_node_type;
		     if code ^= 0 then do;		/* also greatly unexpected */
			name = "";
			call com_err_ (code, "list_pgs_contents", "Examining node ^o", node_array (i));
		     end;

		     else do;
			value = node_ptr -> symbol_node.value_node;

			call lsm_$get_blk (segptr, (node_ptr -> symbol_node.name_node), 0, 0, node_ptr, code);
			name = node_ptr -> char_node.string;
		     end;

		     found = ""b;


		     do j = 1 to nargs;		/* check against ALL starnames given */

/* we don't stop matching when a match is found, because we are keeping track
   of which starnames have never had a match, so that we can put out error
   messages later about them.  Some symbols may satisfy more than one
   starname, or the user could have typed the same starname twice.  We try
   every entryname against every starname so that we know which starnames were
   never really matched.  */

			code = 0;
			if arg_array (j) ^= "**" then
			     call match_star_name_ (name, arg_array (j), code);
			if code = 0 then do;	/* it matches! */
			     arg_satisfied (j) = "1"b; /* say this arg has had at least one match */
			     if ^found then do;	/* only put symbolname into sort list once */
				found = "1"b;
				useful_elements = useful_elements + 1; /* remember it in sorting structure */
				symbol_info.name_array (useful_elements) = name;
				if value = 0 then symbol_info.prefix (useful_elements) = "(null)  ";
						/* symbol is an empty symbol */
				else symbol_info.prefix (useful_elements) = "";

				sort_ptrs (useful_elements) = addr (symbol_info.name_array (useful_elements));
						/* this way, we only sort the ones we care about */
			     end;
			end;
		     end;
		end;

		call hcs_$terminate_noname (segptr, 0); /* clean up */

		if useful_elements = 0 then do;	/* nothing matched the starnames */
		     call com_err_$suppress_name (0, "list_pgs_contents", "No symbols selected.^/");
		     return;
		end;

		found = ""b;			/* no unmatched args have been found and printed yet */

		do i = 1 to nargs;
		     if ^arg_satisfied (i) then do;
			call com_err_$suppress_name (0, "list_pgs_contents", """^a"" not found.", arg_array (i));
						/* print out the args which were never matched */
			found = "1"b;		/* say we found one */
		     end;
		end;

		if found then call com_err_$suppress_name (0, "list_pgs_contents", "	"); /* keep format neat */

		call ioa_ ("^d symbol^[s^;^]:^/", useful_elements, (useful_elements > 1)); /* say how many */

		call sort_items_$char (addr (sort_structure), length (symbol_info.name_array (1)));
						/* sort the names that matched */

		do i = 1 to useful_elements;		/* now output the sorted names */
		     call ioa_ ("^10a^a", sort_ptrs (i) -> based_symbol_info.prefix,
			sort_ptrs (i) -> based_symbol_info.name_array);
		end;
	     end;

	     call ioa_ ("");			/* be suave */
	     return;

	end process_pgs;
	
crump:	proc (code, reason);			/* the screamer */

dcl  code fixed bin (35),
     reason char (*);

	     call com_err_ (code, "list_pgs_contents", reason, dname, ename);
						/* explain the problem to the user */
	     goto error_label;			/* either abort whole command or resume with next PGS */
	end;

     end list_pgs_contents;
