/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-12-05,RBarstad), approve(86-12-11,MCR7585),
     audit(87-06-05,Gilcrease), install(87-08-07,MR12.1-1075):
     Created.
                                                   END HISTORY COMMENTS */

/* format: style3,^ifthenstmt,indthenelse,^indnoniterdo,^indprocbody,initcol3,dclind5,idind32 */
ws_tty_write_:
     proc ();
     return;

/* ------------------------  DESCRIPTION  ---------------------------------- */

/****^ VERSION 1.10
	
     ws_tty_write_ entries to support video mode in MOWSE
 							
     ws_tty_write_$write        
     ws_tty_write_$write_whole_string
 							
*/
%page;
/* ------------------------  PARAMETERS  ----------------------------------- */

dcl  I_mark_flag		       bit (1) parm;	/* whether to set a mark on write_whole_string entry */
dcl  I_n_chars_to_write	       fixed bin (21) parm;	/* maximum number of chars to return */
dcl  I_offset		       fixed bin (21) parm;	/* offset in buffer to start at */
dcl  I_buffer_ptr		       ptr parm;		/* pointer to caller's buffer */
dcl  I_string		       char (*) parm;
dcl  I_iocb_ptr		       ptr parm;		/* tty index (actually also device index ) */
dcl  O_code		       fixed bin (35) parm;	/* error code */
dcl  O_n_chars_written	       fixed bin (21) parm;	/* actual number of characters returned */
dcl  O_state		       fixed bin parm;	/* tty state, 1 ignored, 2 listening, 5 dialed */

/* ------------------------  AUTOMATIC  ------------------------------------ */

dcl  code			       fixed bin (35);	/* error code */
dcl  iocb_ptr		       ptr;		/* iocb pointer for iox */
dcl  mark_flag		       bit (1);		/* whether to set a mark on write_whole_string entry */
dcl  n_chars_to_write	       fixed bin (21);	/* maximum number of chars to return */
dcl  n_chars_written	       fixed bin (21);	/* actual number of characters returned */
dcl  offset		       fixed bin (21);	/* offset in buffer to start at */
dcl  buffer_ptr		       ptr;		/* pointer to caller's buffer */
dcl  state		       fixed bin;		/* tty state, 1 ignored, 2 listening, 5 dialed */
dcl  write_ptr		       ptr;		/* the right ptr to the data to write */

/* ------------------------  BASED  ---------------------------------------- */

dcl  based_chars		       (0:offset) char (1) based unal;
						/* to bump write ptr */

/* ------------------------  CONSTANTS  ------------------------------------ */

dcl  (
     ME			       char (13) init ("ws_tty_write_"),
     FALSE		       bit (1) init ("0"b),
     TRUE			       bit (1) init ("1"b)
     )			       internal static options (constant);

/* ------------------------  EXTERNALS  ------------------------------------ */

dcl  (error_table_$bad_arg)	       fixed bin (35) external static;

/* ------------------------  ENTRIES  -------------------------------------- */

dcl  ws_tty_mgr_$ok_iocb	       entry (ptr, ptr, ptr, fixed bin (35)) returns (bit (1));
dcl  ws_tty_mgr_$send_text	       entry (ptr, ptr, fixed bin (21));
dcl  ws_trace_		       entry () options (variable);

/* ------------------------  BUILTINS and CONDITIONS  ---------------------- */

dcl  (addr, length)		       builtin;

/* dcl cleanup condition; */

%page;
/* ------------------------  PROGRAM  -------------------------------------- */

write:
     entry (I_iocb_ptr, I_buffer_ptr, I_offset, I_n_chars_to_write, O_n_chars_written, O_state, O_code);

/**** get parameters */
     buffer_ptr = I_buffer_ptr;
     offset = I_offset;
     n_chars_to_write = I_n_chars_to_write;

/**** init */
     code = 0;
     state = 0;
     n_chars_written = 0;

     if ws_tty_data$Flags.Trace = TRUE
	then call ws_trace_ ("^a$write entry: iocb_ptr=^p, buffer=^p, offset=^i, chars=^i.", ME, I_iocb_ptr, buffer_ptr,
		offset, n_chars_to_write);

/**** check environment */
     if ^ws_tty_mgr_$ok_iocb (I_iocb_ptr, iocb_ptr, mowse_io_data_ptr, code)
	then goto write_exit;

     mowse_io_data.ws.flags.mark_set = FALSE;

/**** check size of write */
     if n_chars_to_write < 0
	then do;
	     code = error_table_$bad_arg;
	     goto write_exit;
	end;

     if n_chars_to_write = 0
	then goto write_done;

/**** find the portion of the caller's buffer to write */
     write_ptr = addr (buffer_ptr -> based_chars (offset));
     n_chars_written = n_chars_to_write;

/**** write it */
     call ws_tty_mgr_$send_text (iocb_ptr, write_ptr, n_chars_written);

write_done:
     O_n_chars_written = n_chars_written;

write_exit:
     if ws_tty_data$Flags.Trace = TRUE
	then call ws_trace_ ("^a$write exit: n_chars_written=^i, state=^i, code=^i.^/", ME, n_chars_written, state,
		code);

     O_state = state;
     O_code = code;
     return;
%page;
write_whole_string:
     entry (I_iocb_ptr, I_string, I_mark_flag, O_n_chars_written, O_state, O_code);

/**** get parameters */
     mark_flag = I_mark_flag;

/**** init */
     code = 0;
     state = 0;
     n_chars_written = 0;
     offset = 0;

     if ws_tty_data$Flags.Trace
	then call ws_trace_ ("^a$write_whole_string entry: iocb_ptr=^p, string='^a', mark=^i.", ME, I_iocb_ptr,
		I_string, mark_flag);

/**** check environment */
     if ^ws_tty_mgr_$ok_iocb (I_iocb_ptr, iocb_ptr, mowse_io_data_ptr, code)
	then goto write_whole_string_exit;

     mowse_io_data.ws.flags.mark_set = mark_flag;		/* for the benefit of read_with_mark */

/**** get pointers and string sizes */
     write_ptr = addr (I_string);
     n_chars_to_write = length (I_string);

     if n_chars_to_write = 0
	then goto write_whole_done;

/**** write it */
     call ws_tty_mgr_$send_text (iocb_ptr, write_ptr, n_chars_to_write);
     n_chars_written = n_chars_to_write;

write_whole_done:
     O_n_chars_written = n_chars_written;

write_whole_string_exit:
     if ws_tty_data$Flags.Trace = TRUE
	then call ws_trace_ ("^a$write_whole_string exit: n_chars_written=^i, state=^i, code=^i.^/", ME,
		n_chars_written, state, code);

     O_state = state;
     O_code = code;
     return;

/* ------------------------  END PROGRAM  ---------------------------------- */

/* ------------------------  INTERNAL PROCEDURES  -------------------------- */
%page;
/* ------------------------  INCLUDES  ------------------------------------- */

%include ws_control_ids;
%page;
%include ws_tty_data;
%page;
%include iocb;
%page;
%include mowse_io_data;

     end ws_tty_write_;
