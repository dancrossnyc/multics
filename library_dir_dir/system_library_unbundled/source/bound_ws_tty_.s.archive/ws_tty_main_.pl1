/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-12-05,RBarstad), approve(86-12-11,MCR7585),
     audit(87-07-23,Gilcrease), install(87-08-07,MR12.1-1075):
     Created.
                                                   END HISTORY COMMENTS */

/* format: style3,^ifthenstmt,indthenelse,^indnoniterdo,^indprocbody,initcol3,dclind5,idind32 */
ws_tty_main_:
     proc ();
     return;

/* ------------------------  DESCRIPTION  ---------------------------------- */

/****^ VERSION 1.35
							
     ws_tty_ entries to support video mode in MOWSE work station. 	
     All calls here to iox_ are actually to mowse_io_

     ws_tty_$abort 					
     ws_tty_$attach 					
     ws_tty_$detach 					
     ws_tty_$event 					
     ws_tty_$index 					
     ws_tty_$order 					
 							
*/
%page;
/* ------------------------  PARAMETERS  ----------------------------------- */

dcl  I_argptr		       ptr parm;		/* pointer to order data */
dcl  I_dflag		       fixed bin parm;	/* disposition flag */
dcl  I_event		       fixed bin (71) parm;	/* event channel name */
dcl  I_name		       char (*) parm;	/* tty name such as tty192 */
dcl  I_order		       char (*) parm;	/* order name */
dcl  I_resetsw		       fixed bin parm;	/* abort code, 1 reset read, 2 reset write, 3 reset both */
dcl  I_iocb_ptr		       ptr parm;		/* ptr for iox */
dcl  O_code		       fixed bin (35) parm;	/* error code */
dcl  O_tty_state		       fixed bin parm;	/* tty state, 1 ignored, 2 listening, 5 dialed */

/* ------------------------  AUTOMATIC  ------------------------------------ */

dcl  argptr		       ptr;		/* pointer to order data */
dcl  break_table_ptr	       ptr;
dcl  break_table_size	       fixed bin;
dcl  code			       fixed bin (35);	/* error code */
dcl  dflag		       fixed bin;		/* disposition flag */
dcl  event		       fixed bin (71);	/* event channel name */
dcl  event_code		       fixed bin (35);
dcl  get_msg_id		       char (3);		/* message id returned from ws */
dcl  iocb_ptr		       ptr;		/* iocb pointer for iox */
dcl  name			       char (32);
dcl  num_exit_tries		       fixed bin;		/* count of reads for "SMX" */
dcl  order		       char (32);
dcl  resetsw		       fixed bin;		/* abort code, 1 reset read, 2 reset write, 3 reset both */
dcl  rw_switch		       bit (2) aligned;	/* bit-string version of reset read/write switch */
dcl  tty_state		       fixed bin;		/* tty state, 1 ignored, 2 listening, 5 dialed */
dcl  saved_mask		       bit (36) aligned;	/* saved ips mask */
dcl  unmask_count                    fixed bin;
dcl  count                           fixed bin;

dcl  1 saved_mask_bit	       aligned based (addr (saved_mask)),
       2 interrupts		       bit (35) unaligned,
       2 control		       bit (1) unaligned;

dcl  string_size		       fixed bin (21);
dcl  string_ptr		       ptr;
dcl  string		       char (MAX_SEND_MSG_SIZE);
dcl  1 video_mode_info	       like mowse_io_set_video_mode_info;

/* ------------------------  BASED  ---------------------------------------- */

dcl  1 modes_info		       aligned based (argptr),
       2 mode_length	       fixed bin,
       2 mode_string	       char (512);

dcl  new_modes		       char (512);

/* ------------------------  CONSTANTS  ------------------------------------ */

dcl  (
     ME			       char (12) init ("ws_tty_main_"),
     V1_ECHO_NEG_BREAK_TABLE_SIZE    fixed bin init (126),
     FALSE		       bit (1) init ("0"b),
     TRUE			       bit (1) init ("1"b),
     MAX_SEND_MSG_SIZE	       fixed bin (21) init (255),
     ZERO_IPS_MASK		       bit (36) init ((36)"0"b),
     EXIT_THRESHOLD		       fixed bin init (5)
     )			       internal static options (constant);

/* ------------------------  EXTERNALS  ------------------------------------ */

dcl  (
     error_table_$action_not_performed,
     error_table_$undefined_order_request,
     error_table_$unimplemented_version
     )			       fixed bin (35) external static;

/* ------------------------  ENTRIES  -------------------------------------- */

dcl  hcs_$set_ips_mask	       entry (bit (36) aligned, bit (36) aligned);
dcl  hcs_$reset_ips_mask	       entry (bit (36) aligned, bit (36) aligned);
dcl  ipc_$mask_ev_calls              entry (fixed bin(35));
dcl  ipc_$unmask_ev_calls            entry (fixed bin(35));
dcl  iox_$control		       entry (ptr, char (*), ptr, fixed bin (35));
dcl  iox_$modes		       entry (ptr, char (*), char (*), fixed bin (35));
dcl  ws_tty_mgr_$have_wsterm	       entry (ptr, fixed bin, fixed bin (35)) returns (bit (1));
dcl  ws_tty_mgr_$ok_iocb	       entry (ptr, ptr, ptr, fixed bin (35)) returns (bit (1));
dcl  ws_tty_mgr_$send_message	       entry (ptr, char (3), bit (9), ptr, fixed bin (21));
dcl  ws_tty_mgr_$get_message	       entry (ptr, ptr, fixed bin (21), fixed bin (21), char (3));
dcl  ws_trace_		       entry () options (variable);

/* ------------------------  BUILTINS and CONDITIONS  ---------------------- */

dcl  (addr, bit, byte, fixed, hbound, length, null, rtrim, substr)
			       builtin;

dcl  (any_other, cleanup)	       condition;

%page;
/* ------------------------  PROGRAM  -------------------------------------- */

abort:
     entry (I_iocb_ptr, I_resetsw, O_tty_state, O_code);

/* to reset read or write buffers  */

     code = 0;
     tty_state = 0;

     resetsw = I_resetsw;

     if ws_tty_data$Flags.Trace
	then call ws_trace_ ("^a$abort entry: iocb_ptr= ^p, resetws= ^i.", ME, I_iocb_ptr, resetsw);

     if ^ws_tty_mgr_$ok_iocb (I_iocb_ptr, iocb_ptr, mowse_io_data_ptr, code)
	then goto abort_exit;

     call init_ips_mask;

     rw_switch = bit (fixed (resetsw, 2));

     if substr (rw_switch, 2, 1)
	then mowse_io_data.ws.flags.more_input = FALSE;

     call iox_$control (iocb_ptr, "abort", addr (rw_switch), code);
     if code ^= 0
	then goto abort_exit;

     call ws_tty_mgr_$send_message (iocb_ptr, WS_ABORT, WS_FLAG_NONE, null, 0);

abort_exit:
     if ws_tty_data$Flags.Trace
	then call ws_trace_ ("^a$abort exit: tty_state= ^i, code= ^i.^/", ME, tty_state, code);
     O_tty_state = tty_state;
     O_code = code;
     return;
%page;
attach:
     entry (I_iocb_ptr, I_name, I_event, O_tty_state, O_code);

/* notify wsterm to go to sync mode */
/* notify mowse_io_ that sync mode in effect */

/* initialize */
     code = 0;
     tty_state = 0;

/* get params */
     name = I_name;
     event = I_event;

     if ws_tty_data$Flags.Trace
	then call ws_trace_ ("^a$attach entry: name= ^a, event= ^i, iocb_ptr= ^p.", ME, name, event, I_iocb_ptr);

/* get iocb_ptr and check it */
     if ^ws_tty_mgr_$ok_iocb (I_iocb_ptr, iocb_ptr, mowse_io_data_ptr, code)
	then goto attach_exit;

/* set up ips mask */
     call init_ips_mask;

/* see if wsterm still around */
     if ^ws_tty_mgr_$have_wsterm (iocb_ptr, tty_state, code)
	then goto attach_exit;

/* tell ws to enter sync mode */
     call ws_tty_mgr_$send_message (iocb_ptr, WS_ENTER_SYNC_MODE, WS_FLAG_NONE, null, 0);

/* get ws's response */
     string = " ";
     string_ptr = addr (string);
     get_msg_id = "   ";
     call ws_tty_mgr_$get_message (iocb_ptr, string_ptr, MAX_SEND_MSG_SIZE, string_size, get_msg_id);

     if ws_tty_data$Flags.Trace
	then call ws_trace_ ("^a$attach: enter sync mode reply= ^a.", ME, get_msg_id);

     if get_msg_id ^= WS_SYNC_MODE_ENTERED
	then do;
	     code = error_table_$action_not_performed;
	     goto attach_exit;
	end;

/* tell mowse too */
     video_mode_info.version = mowse_io_info_version_1;
     video_mode_info.mode = TRUE;
     video_mode_info.mbz = "0"b;
     mowse_io_set_video_mode_info_ptr = addr (video_mode_info);
     call iox_$control (iocb_ptr, "set_video_mode", mowse_io_set_video_mode_info_ptr, code);
     if code ^= 0
	then goto attach_exit;
     call iox_$modes (iocb_ptr, "force,^crecho,^lfecho", "", code);

attach_exit:
     if ws_tty_data$Flags.Trace
	then call ws_trace_ ("^a$attach exit: tty_state= ^i, code= ^i.^/", ME, tty_state, code);
     O_tty_state = tty_state;
     O_code = code;
     return;
%page;
detach:
     entry (I_iocb_ptr, I_dflag, O_tty_state, O_code);

/* notify wsterm to return to async mode */
/* notify mowse_io_ of return to async mode (TBD) */
/* dflag is ignored */

/* initialize */
     code = 0;
     tty_state = 0;
     num_exit_tries = 0;

/* get params */
     dflag = I_dflag;

     if ws_tty_data$Flags.Trace
	then call ws_trace_ ("^a$detach entry: iocb_ptr= ^p, dflag= ^i.", ME, I_iocb_ptr, dflag);

/* get iocb_ptr and check it */
     if ^ws_tty_mgr_$ok_iocb (I_iocb_ptr, iocb_ptr, mowse_io_data_ptr, code)
	then goto detach_exit;

/* see if wsterm still around */
     if ^ws_tty_mgr_$have_wsterm (iocb_ptr, tty_state, code)
	then goto detach_exit;

/* flush input */
     call iox_$control (iocb_ptr, "resetread", null (), code);
     if code ^= 0
	then goto detach_exit;

/* tell ws to exit sync mode */
     call ws_tty_mgr_$send_message (iocb_ptr, WS_EXIT_SYNC_MODE, WS_FLAG_NONE, null, 0);

/* get ws's response */
     string = " ";
     string_ptr = addr (string);
     get_msg_id = "   ";

     do while ((get_msg_id ^= WS_SYNC_MODE_EXITED) & (num_exit_tries < EXIT_THRESHOLD));
	call ws_tty_mgr_$get_message (iocb_ptr, string_ptr, 256, string_size, get_msg_id);
	num_exit_tries = num_exit_tries + 1;
     end;

     if ws_tty_data$Flags.Trace
	then call ws_trace_ ("^a$detach: sync mode reply= ^a.", ME, get_msg_id);

     if get_msg_id ^= WS_SYNC_MODE_EXITED
	then do;
	     code = error_table_$action_not_performed;
	     goto detach_exit;
	end;

/* tell mowse too */
     video_mode_info.version = mowse_io_info_version_1;
     video_mode_info.mode = FALSE;
     video_mode_info.mbz = "0"b;
     mowse_io_set_video_mode_info_ptr = addr (video_mode_info);
     call iox_$control (iocb_ptr, "set_video_mode", mowse_io_set_video_mode_info_ptr, code);

detach_exit:
     if ws_tty_data$Flags.Trace
	then call ws_trace_ ("^a$detach exit: tty_state= ^i, code= ^i.^/", ME, tty_state, code);
     O_tty_state = tty_state;
     O_code = code;
     return;
%page;
event:
     entry (I_iocb_ptr, I_event, O_tty_state, O_code);

/* to change tty events signaled */

     code = 0;
     tty_state = 0;

     event = I_event;

     if ws_tty_data$Flags.Trace
	then call ws_trace_ ("^a$event entry: iocb_ptr= ^p, event= ^i.", ME, I_iocb_ptr, event);

     if ^ws_tty_mgr_$ok_iocb (I_iocb_ptr, iocb_ptr, mowse_io_data_ptr, code)
	then goto event_exit;

event_exit:
     if ws_tty_data$Flags.Trace
	then call ws_trace_ ("^a$event exit: tty_state= ^i, code= ^i.^/", ME, O_tty_state, code);
     O_tty_state = tty_state;
     O_code = code;
     return;
%page;
index:
     entry (I_iocb_ptr, I_name, O_tty_state, O_code);

/* go get index from name, and sign onto tty */

     code = 0;
     tty_state = 0;

     name = I_name;

     if ws_tty_data$Flags.Trace
	then call ws_trace_ ("^a$index entry: name= ^a, iocb_ptr= ^p.", ME, name, I_iocb_ptr);

     if ^ws_tty_mgr_$ok_iocb (I_iocb_ptr, iocb_ptr, mowse_io_data_ptr, code)
	then goto index_exit;

     if iocb_ptr -> iocb.version ^= iox_$iocb_version_sentinel
						/* only here to make visable to probe */
	then do;
	     code = error_table_$unimplemented_version;
	     goto attach_exit;
	end;

index_exit:
     if ws_tty_data$Flags.Trace
	then call ws_trace_ ("^a$index exit: tty_state= ^i, code= ^i.^/", ME, O_tty_state, code);
     O_tty_state = tty_state;
     O_code = code;
     return;
%page;
order:
     entry (I_iocb_ptr, I_order, I_argptr, O_tty_state, O_code);

/* to give tty orders */
/* the order may be done here, passed to WSTERM, or passed to mowse_io_ */
/*    via iox_ or any combination of these */

     code = 0;
     tty_state = 0;

     order = I_order;
     argptr = I_argptr;

     if ws_tty_data$Flags.Trace
	then call ws_trace_ ("^a$order entry: iocb_ptr= ^p, order= '^a', argptr= ^p.", ME, I_iocb_ptr, order, argptr);

     if ^ws_tty_mgr_$ok_iocb (I_iocb_ptr, iocb_ptr, mowse_io_data_ptr, code)
	then goto order_exit;

     call init_ips_mask;

/* ------------------------  Start of control orders  ---------------------- */

     if order = "abort"				/* tty_ */
	then goto order_iox;

     else if order = "debug_on"			/* mowse_io_ */
	then do;
	     mowse_io_debug_info_ptr = argptr;
	     call iox_$control (iocb_ptr, order, mowse_io_debug_info_ptr, code);
	end;

     else if order = "debug_off"			/* mowse_io_ */
	then do;
	     mowse_io_debug_info_ptr = argptr;
	     call iox_$control (iocb_ptr, order, mowse_io_debug_info_ptr, code);
	end;

     else if order = "flush_subchannel"			/* mowse */
	then call unmask_alarms_and_pass_on_to_mowse;

     else if order = "get_editing_chars"		/* tty_ */
	then goto order_iox;

     else if order = "get_event_channel"		/* tty_ */
	then goto order_iox;

     else if order = "get_foreign_terminal_data"		/* none */
	then do;
	     foreign_terminal_data_ptr = argptr;
	     if foreign_terminal_data.version ^= FOREIGN_TERMINAL_DATA_VERSION_1
		then goto wrong_version;
	     call iox_$control (iocb_ptr, order, foreign_terminal_data_ptr, code);
	end;

     else if order = "get_input_conversion"		/* no */
	then do;
	     goto order_not_defined;
	end;

     else if order = "get_input_translation"		/* no */
	then do;
	     goto order_not_defined;
	end;

     else if order = "get_mowse_info"			/* mowse_io_ */
	then goto order_iox;

     else if order = "get_output_conversion"		/* tty */
	then goto order_iox;

     else if order = "get_output_translation"		/* no */
	then do;
	     goto order_not_defined;
	end;

     else if order = "get_special"			/* none */
	then goto order_iox;

     else if order = "get_terminal_emulator_state"	/* mowse_io_ */
	then do;
	     mowse_io_terminal_state_ptr = argptr;
	     if mowse_io_terminal_state.version ^= mowse_io_info_version_1
		then goto wrong_version;
	     call iox_$control (iocb_ptr, order, mowse_io_terminal_state_ptr, code);
	end;

     else if order = "line_length"			/* mowse */
	then goto order_iox;

     else if order = "modes"				/* WSTERM via mowse */
	then do;
	     new_modes = "force," || rtrim (modes_info.mode_string);
	     call iox_$modes (iocb_ptr, new_modes, "" /*old_modes*/, code);
	end;

     else if order = "printer_off"			/* ws_tty_ */
	then do;
	     call ws_tty_mgr_$send_message (iocb_ptr, WS_PRINTER_OFF, WS_FLAG_NONE, null, 0);
	end;

     else if order = "printer_on"			/* ws_tty_ */
	then do;
	     call ws_tty_mgr_$send_message (iocb_ptr, WS_PRINTER_ON, WS_FLAG_NONE, null, 0);
	end;

     else if order = "put_to_sleep"			/* mowse_io_ */
	then goto order_iox;

     else if order = "quit_disable"			/* mowse */
	then goto order_iox;

     else if order = "quit_enable"			/* mowse */
	then goto order_iox;

     else if order = "read_status"			/* tty_ */
	then goto order_iox;

     else if order = "resetread"			/* tty_ */
	then do;
	     mowse_io_data.ws.flags.more_input = FALSE;
	     goto order_iox;
	end;

     else if order = "resetwrite"			/* tty_ */
	then goto order_iox;

     else if order = "send_local_message"		/* mowse_io_ */
	then goto order_iox;

     else if order = "send_message"			/* mowse_io_ */
	then goto order_iox;

     else if order = "set_echo_break_table"		/* tty */
	then do;
	     echo_neg_datap = argptr;
	     if echo_neg_data.version = echo_neg_data_version_2
		then do;
		     break_table_ptr = addr (echo_neg_data.break);
		     break_table_size = ECHO_NEG_BREAK_TABLE_SIZE;
		end;
	     else if echo_neg_data.version = echo_neg_data_version_1
		then do;
		     break_table_ptr = addr (v1_echo_neg_data.break);
		     break_table_size = V1_ECHO_NEG_BREAK_TABLE_SIZE;
		end;
	     else goto wrong_version;
	     call convert_break_table (break_table_ptr, break_table_size, string, string_size);
	     string_ptr = addr (string);
	     call ws_tty_mgr_$send_message (iocb_ptr, WS_SET_BREAK_TABLE, WS_FLAG_NONE, string_ptr, string_size);
	     call iox_$control (iocb_ptr, order, argptr, code);
	end;

     else if order = "set_editing_chars"		/* tty_ */
	then goto order_iox;

     else if order = "set_input_conversion"		/* no */
	then do;
	     goto order_not_defined;
	end;

     else if order = "set_input_translation"		/* none */
	then do;
	     goto order_not_defined;
	end;

     else if order = "set_output_conversion"		/* tty */
	then do;
	     if argptr -> cv_trans_struc.version > CV_TRANS_VERSION
		then goto wrong_version;
	     call iox_$control (iocb_ptr, order, argptr, code);
	end;

     else if order = "set_output_translation"		/* none */
	then do;
	     goto order_not_defined;
	end;

     else if order = "set_special"			/* tty_ */
	then goto order_iox;

     else if order = "set_terminal_data"		/* tty_ */
	then do;					/* set ll and pl */
	     ttdp = argptr;
	     if terminal_type_data.version ^= ttd_version_3
		then goto wrong_version;
	     call iox_$control (iocb_ptr, order, argptr, code);
	end;

     else if order = "set_term_type"			/* tty_ */
	then goto order_iox;

     else if order = "start"				/* tty_  */
	then goto order_iox;

     else if order = "store_id"			/* tty_ */
	then goto order_iox;

     else if order = "store_mowse_info"			/* mowse_io_ */
	then goto order_iox;

     else if order = "terminal_info"			/* tty_ */
	then do;
	     terminal_info_ptr = argptr;
	     if terminal_info.version ^= terminal_info_version
		then goto wrong_version;
	     call iox_$control (iocb_ptr, order, terminal_info_ptr, code);
	end;

     else if order = "trace_on"			/* mowse_io_ */
	then do;
	     mowse_io_debug_info_ptr = argptr;
	     call iox_$control (iocb_ptr, order, mowse_io_debug_info_ptr, code);
	end;

     else if order = "trace_off"			/* mowse_io_ */
	then do;
	     mowse_io_debug_info_ptr = argptr;
	     call iox_$control (iocb_ptr, order, mowse_io_debug_info_ptr, code);
	end;

     else if order = "write_status"			/* tty_ */
	then goto order_iox;

/* ------------------------  End of control orders  ------------------------ */

/**** none of the above, try something else */

     else if ws_tty_data$Flags.Trace
	then call ws_trace_ ("^a$order: Unknown control order, '^a'.", ME, order);

/**** send it on to iox_$control AS IS */

order_iox:
     call iox_$control (iocb_ptr, order, argptr, code);
     goto order_exit;

/**** send it on to wsterm */

order_wsterm:
     string_ptr = addr (order);
     string_size = length (order);

     call ws_tty_mgr_$send_message (iocb_ptr, WS_ORDER, WS_FLAG_NONE, string_ptr, string_size);
     goto order_exit;

/**** exits */
order_not_defined:
     code = error_table_$undefined_order_request;
     goto order_exit;

wrong_version:
     code = error_table_$unimplemented_version;
     goto order_exit;

order_not_performed:
     code = error_table_$action_not_performed;

order_exit:
     if ws_tty_data$Flags.Trace
	then call ws_trace_ ("^a$order exit: tty_state= ^i, code= ^i.^/", ME, tty_state, code);
     O_tty_state = tty_state;
     O_code = code;
     return;

/* ------------------------  END PROGRAM  ---------------------------------- */
%page;
/* ------------------------  INTERNAL PROCEDURES  -------------------------- */

convert_break_table:
     proc (table_ptr, table_size, output_string, string_count);

dcl  table_ptr		       ptr parm;
dcl  table_size		       fixed bin parm;
dcl  output_string		       char (*) parm;
dcl  string_count		       fixed bin (21) parm;

dcl  table		       (0:ECHO_NEG_BREAK_TABLE_SIZE) bit (1) unaligned based (table_ptr);
dcl  index		       fixed bin;
dcl  FIRST_PRINT_CHAR_INDEX	       fixed bin int static options (constant) init (32);

     output_string = "";
     string_count = 0;

     do index = FIRST_PRINT_CHAR_INDEX to table_size;	/* ignore control chars */
	if table (index)
	     then do;
		string_count = string_count + 1;
		substr (output_string, string_count, 1) = byte (index);
	     end;
     end;
     return;
     end convert_break_table;
%page;
/* ------------------------------------------------------------------------- */

init_ips_mask:
     proc ();

dcl  create_ips_mask_	       entry (ptr, fixed bin, bit (36) aligned);
dcl  IPS_ARRAY		       (1) char (32) aligned int static options (constant) init ("-all");
dcl  mask			       bit (36) aligned;

     if mowse_io_data.ws.ips_mask = ZERO_IPS_MASK		/* if mask is zero then... */
	then do;

/**** call returns mask that DISABLES (=0) interrupts listed in IPS_ARRAY ... */
	     call create_ips_mask_ (addr (IPS_ARRAY), hbound (IPS_ARRAY, 1), mask);

/**** ... save the inverse to ENABLE (=1) the listed interrupts. */
	     mowse_io_data.ws.ips_mask = ^mask;
	end;

     return;
     end init_ips_mask;
%page;
/* ------------------------------------------------------------------------- */

unmask_alarms_and_pass_on_to_mowse:
     proc ();


/**** START CRITICAL SECTION ****/
     event_code = 0;
     unmask_count = 0;
     saved_mask = ZERO_IPS_MASK;
     on cleanup call cleanup_handler;
     on any_other call any_other_handler;
     call hcs_$set_ips_mask (mowse_io_data.ws.ips_mask, saved_mask);
     do while (event_code = 0);
	call ipc_$unmask_ev_calls (event_code);
          unmask_count = unmask_count +1;
     end;

     call iox_$control (iocb_ptr, order, argptr, code);

     if saved_mask_bit.control
	then call hcs_$reset_ips_mask (saved_mask, saved_mask);
     do count = 2 to unmask_count;
	call ipc_$mask_ev_calls (0); end;
     revert any_other, cleanup;
/**** END CRITICAL SECTION ****/

     return;
     end unmask_alarms_and_pass_on_to_mowse;
%page;
/* ------------------------------------------------------------------------- */

any_other_handler:
     proc;

dcl  continue_to_signal_	       entry (fixed bin (35));

     if ws_tty_data$Flags.Trace
	then call ws_trace_ ("  ^a$any_other_handler :saved_mask=^o.", ME, saved_mask);

     if saved_mask_bit.control
	then call hcs_$reset_ips_mask (saved_mask, saved_mask);
     do count = 2 to unmask_count;
	call ipc_$mask_ev_calls (0);
	end;

     call continue_to_signal_ ((0));

     return;
     end any_other_handler;
%page;
/* ------------------------------------------------------------------------- */

cleanup_handler:
     proc;

     if ws_tty_data$Flags.Trace
	then call ws_trace_ (" ^a$cleanup_handler :saved_mask=^o.", ME, saved_mask);

     if saved_mask_bit.control
	then call hcs_$reset_ips_mask (saved_mask, saved_mask);
     do count = 2 to unmask_count;
	call ipc_$mask_ev_calls (0);
	end;

     return;
     end cleanup_handler;
%page;
/* ------------------------  INCLUDES  ------------------------------------- */

%include ws_control_ids;
%page;
%include ws_tty_data;
%page;
%include mowse_io_control_info;
%page;
%include terminal_info;
%page;
%include terminal_type_data;
%page;
%include foreign_terminal_data;
%page;
%include mcs_echo_neg;
%page;
%include iocb;
%page;
%include mowse_io_data;
%page;
%include tty_convert;

     end ws_tty_main_;
