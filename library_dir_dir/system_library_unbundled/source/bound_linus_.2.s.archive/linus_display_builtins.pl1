/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* format: off */
%skip(3);
/*   This is the main level procedure called by ssu_ to implement the
     linus display_builtins request. Description and usage follows.

     Description:

     This active request returns the value of the named builtin.  The builtin
     is named by the user.
     
     Usage: "display_builtins STR"

     where STR is the name of the desired builtin. It can be chosen from:
     "current_row_number", "first_row", "last_row", "page_number",
     "previously_processed_row", "last_row_number", "last_page_number",
     "last_pass", or "current_pass_number".

     Both parameters are passed to this request by ssu_.


     Known Bugs:

     Other Problems:

     History:

     Written - Al Dupuis - August 1983

*/
%page;
linus_display_builtins: proc (

	sci_ptr_parm,   /* input: ptr to the subsystem control info structure */
	lcb_ptr_parm    /* input: ptr to the linus control block info structure */
		     );
%skip(3);
dcl sci_ptr_parm ptr parm;
dcl lcb_ptr_parm ptr parm;
%skip(3);
	call initialize;
	call get_builtin_value;
%skip(1);
	return;
%page;
initialize: proc;
%skip(3);
	sci_ptr = sci_ptr_parm;
	lcb_ptr = lcb_ptr_parm;
%skip(1);
	call ssu_$return_arg (sci_ptr, number_of_args_supplied,
	     active_request_flag, return_value_ptr, return_value_length);
	if number_of_args_supplied ^= 1
	then call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
	     USAGE_MESSAGE);
%skip(1);
	report_cip = lcb.report_control_info_ptr;
	if report_cip = null ()
	then call ssu_$abort_line (sci_ptr, linus_error_$no_report);
	else if ^report_control_info.flags.report_has_been_started
	     then call ssu_$abort_line (sci_ptr, linus_error_$no_report);
%skip(1);
	format_report_ip = report_control_info.format_report_info_ptr;
	status_pointer = format_report_info.status_ptr;
%skip(1);
          call ssu_$arg_ptr (sci_ptr, 1, arg_ptr, arg_length);
	desired_builtin = arg;
%skip(1);
          return;
%skip(1);
     end initialize;
%page;
get_builtin_value: proc;
%skip(3);
	if desired_builtin = "current_row_number"
	then value = ltrim (convert (value, status.current_row_number));
	else if desired_builtin = "first_row"
	     then if status.flags.first_row_of_report
		then value = "true";
		else value = "false";
	     else if desired_builtin = "last_row"
		then if status.flags.last_row_of_report
		     then value = "true";
		     else value = "false";
		else if desired_builtin = "page_number"
		     then value = ltrim (convert (value, status.current_page_number));
		     else if desired_builtin = "previously_processed_row"
			then if status.flags.row_has_been_processed_before
			     then value = "true";
			     else value = "false";
			else if desired_builtin = "last_row_number"
			     then value = ltrim (convert (value, status.last_row_number));
			     else if desired_builtin = "last_page_number"
				then value = ltrim (convert (value, status.last_page_number));
			          else if desired_builtin = "current_pass_number"
				     then value = ltrim (convert (value, status.current_pass_number));
				     else if desired_builtin = "last_pass"
					then if status.flags.last_pass
					     then value = "true";
				               else value = "false";
					else call ssu_$abort_line (sci_ptr, error_table_$bad_arg,
					     "^/^a is not the name of a display builtin.", desired_builtin);
%skip(1);
	return_value = requote_string_ (rtrim (value));
%skip(1);
	return;
%skip(1);
     end get_builtin_value;
%page;
dcl USAGE_MESSAGE char (31) static int options (constant) init (
"^/Usage: [display_builtins STR]");
%skip(1);
dcl active_request_flag bit (1) aligned;
dcl addr builtin;
dcl arg char (arg_length) based (arg_ptr);
dcl arg_length fixed bin (21);
dcl arg_ptr ptr;
%skip(1);
dcl convert builtin;
%skip(1);
dcl desired_builtin char (32) varying;
%skip(1);
dcl error_table_$bad_arg fixed bin(35) ext static;
dcl error_table_$inconsistent fixed bin(35) ext static;
%skip(1);
dcl fixed builtin;
%skip(1);
dcl linus_error_$no_report fixed bin(35) ext static;
dcl ltrim builtin;
%skip(1);
dcl null builtin;
dcl number_of_args_supplied fixed bin;
%skip(1);
dcl rel builtin;
dcl requote_string_ entry (char(*)) returns(char(*));
dcl return_value char (return_value_length) varying based (return_value_ptr);
dcl return_value_length fixed bin (21);
dcl return_value_ptr ptr;
dcl rtrim builtin;
%skip(1);
dcl sci_ptr ptr;
dcl ssu_$abort_line entry() options(variable);
dcl ssu_$arg_ptr entry (ptr, fixed bin, ptr, fixed bin(21));
dcl ssu_$return_arg entry (ptr, fixed bin, bit(1) aligned, ptr, fixed bin(21));
dcl sys_info$max_seg_size fixed bin(35) ext static;
%skip(1);
dcl value char (16);
%page;
%include linus_options_extents;
%page;
%include linus_lcb;
%page;
%include linus_report_info;
%page;
%include linus_report_structures;
%skip(3);
     end linus_display_builtins;
