/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* format: off */
%skip(3);
/*   This is the main level procedure called by ssu_ to implement the
     linus input_query request. Description and usage follows.

     Description:

     This request collects a user provided query and makes it available for
     linus data manipulation requests.
     
     Usage: input_query {-control_args}

     USAGE (1): "input_query" or "input_query -terminal_input"

     The query is prompted for from user_input. It is terminated when the
     user types "." on a line by itself, or types "\f" or "\q". "\f" means
     enter qedx.

     The control args -brief and -long control the prompt string "Query:".

     USAGE (2): "input_query -input_file pathname.lquery"
	   or "input_query pathname.lquery"

     The query is read from the file named by pathname.

     The control arguments -force and -no_force can be provided with either
     usage. -no_force is the default, and means the user should be queried
     about replacing the existing linus query if there is one.

     Both parameters are passed to this request by ssu_.

     Known Bugs:

     Other Problems:

     History:

     Written - Al Dupuis - August 1983

*/
%page;
linus_input_query: proc (

	sci_ptr_parm,   /* input: ptr to the subsystem control info structure */
	lcb_ptr_parm    /* input: ptr to the linus control block info structure */
		     );
%skip(1);
dcl sci_ptr_parm ptr parm;
dcl lcb_ptr_parm ptr parm;
%skip(1);
/*
     Mainline Processing Overview:

     (1) Set defaults and process the arguments.
     (2) Attach and open file if -input_file is used.
     (3) Prompt before replacing existing query if -force isn't used.
     (4) Initialize the query file.
     (5) Get the query from the file or user.
     (6) Enter qedx if user ended query with "\f".
*/
%skip(1);
	call initialize;
%skip(1);
	if ^terminal_input
	then do;
	     cleanup_signalled = OFF;
	     on cleanup begin;
		cleanup_signalled = ON;
		call close_and_detach_input_file;
	     end;
	     call attach_and_open_input_file;
	end;
%skip(1);
	if ^force
	then do;
	     call prompt_user_for_replacing_query;
	     if ^user_wants_the_query_replaced
	     then return;
	end;
%skip(1);
	call linus_query_mgr$initialize_query_file (lcb_ptr);
%skip(1);
	if terminal_input
	then call get_query_from_user;
	else call get_query_from_file;
%skip(1);
	if enter_the_editor
	then call linus_qedx_the_query (lcb_ptr, OLD_QUERY);
%skip(1);
	return;
%page;
attach_and_open_input_file: proc;
%skip(1);
	attached = OFF;
	opened = OFF;
	call expand_pathname_$add_suffix (input_file_pathname, "lquery",
	     input_file_directory_name, input_file_entry_name, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code,
	     "^/While trying to expand ^a.", rtrim (input_file_pathname));
	switch_name = unique_chars_ ("0"b) || "linus.input_query";
%skip(1);
	call iox_$attach_name (switch_name, input_file_iocb_ptr,
	     "vfile_ " || rtrim (input_file_directory_name) || ">"
	     || rtrim (input_file_entry_name), null (), code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code,
	     "^/While trying to attach ^a in ^a.",
	     input_file_entry_name, input_file_directory_name);
	else attached = ON;
%skip(1);
	call iox_$open (input_file_iocb_ptr, Stream_input, "0"b, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code,
	     "^/While trying to open ^a in ^a.",
	     input_file_entry_name, input_file_directory_name);
	else opened = ON;
%skip(1);
	return;
%skip(1);
     end attach_and_open_input_file;
%page;
close_and_detach_input_file: proc;
%skip(3);
	if opened
	then do;
	     call iox_$close (input_file_iocb_ptr, code);
	     if code ^= 0
	     then if cleanup_signalled
		then call ssu_$print_message (sci_ptr, code,
		     "^/While trying to close ^a.", input_file_pathname);
	          else call ssu_$abort_line (sci_ptr, code,
		     "^/While trying to close ^a.", input_file_pathname);
	     else opened = OFF;
	end;
	else;
%skip(1);
	if attached
	then do;
	     call iox_$detach_iocb (input_file_iocb_ptr, code);
	     if code ^= 0
	     then if cleanup_signalled
		then call ssu_$print_message (sci_ptr, code,
		     "^/While trying to detach ^p.", input_file_iocb_ptr);
	          else call ssu_$abort_line (sci_ptr, code,
		     "^/While trying to detach ^p.", input_file_iocb_ptr);
	     else do;
		attached = OFF;
		call iox_$destroy_iocb (input_file_iocb_ptr, code);
		if code ^= 0
		then if cleanup_signalled
		     then call ssu_$print_message (sci_ptr, code,
		          "^/While trying to destroy ^p.", input_file_iocb_ptr);
		     else call ssu_$abort_line (sci_ptr, code,
			"^/While trying to destroy ^p.", input_file_iocb_ptr);
		else;
	     end;
	end;
%skip(1);
	return;
%skip(1);
     end close_and_detach_input_file;
%page;
get_query_from_file: proc;
%skip(3);
	still_writing_the_file = ON;
%skip(1);
	do loop = 1 to LARGEST_LILA_LINE_NUMBER while (still_writing_the_file);
	     call iox_$get_line (input_file_iocb_ptr, input_buffer_ptr, 
		INPUT_BUFFER_LENGTH, number_of_characters_read, code);
	     if code ^= 0
	     then if code ^= error_table_$end_of_info
		then call ssu_$abort_line (sci_ptr, code,
		     "^/While reading a line from ^a in ^a.", 
		     input_file_entry_name, input_file_directory_name);
	          else still_writing_the_file = OFF;
	     else call write_query_line_to_file (number_of_characters_read, loop);
	end;
%skip(1);
	call close_and_detach_input_file;
%skip(1);
	return;
%skip(3);
     end get_query_from_file;
%page;
get_query_from_user: proc;
%skip(3);
	if ^brief
	then call ioa_ ("Query:");
	still_collecting_lines = ON;
%skip(1);
	do loop = 1 to LARGEST_LILA_LINE_NUMBER while (still_collecting_lines);
	     there_is_a_line_to_write = ON;
	     call iox_$get_line (iox_$user_input, input_buffer_ptr,
		INPUT_BUFFER_LENGTH, number_of_characters_read, code);
	     if code ^= 0
	     then call ssu_$abort_line (sci_ptr, code,
		"^/While reading a query line from the terminal.");
	     if number_of_characters_read = 2
	     then if input_buffer_as_an_array (1) = "."
		then do;
		     still_collecting_lines = OFF;
		     there_is_a_line_to_write = OFF;
		end;
	          else;
	     else;
	     if still_collecting_lines
	     then if index (substr (input_buffer, 1, number_of_characters_read - 1), "\f") > 0
		| index (substr (input_buffer, 1, number_of_characters_read - 1), "\q") > 0
		then do;
		     still_collecting_lines = OFF;
		     if number_of_characters_read = 3
		     then do;
			if input_buffer_as_an_array (number_of_characters_read - 1) = "f"
			then enter_the_editor = ON;
			else enter_the_editor = OFF;
			there_is_a_line_to_write = OFF;
		     end;
		     else do;
			input_buffer_as_an_array (number_of_characters_read - 2) = NEWLINE;
			if input_buffer_as_an_array (number_of_characters_read - 1) = "f"
			then enter_the_editor = ON;
			else enter_the_editor = OFF;
			number_of_characters_read = number_of_characters_read - 2;
		     end;
		end;
		else;
	     else;
	     if there_is_a_line_to_write
	     then call write_query_line_to_file (number_of_characters_read, loop);
	end;
%skip(1);
	return;
%skip(3);
     end get_query_from_user;
%page;
initialize: proc;
%skip(3);
	sci_ptr = sci_ptr_parm;
	lcb_ptr = lcb_ptr_parm;
%skip(1);
	if lcb.db_index = 0
	then call ssu_$abort_line (sci_ptr, linus_error_$no_db);
%skip(1);
	force = OFF;
	terminal_input = ON;
	user_wants_the_query_replaced = OFF;
	enter_the_editor = OFF;
	brief = OFF;
%skip(1);
	input_buffer_ptr = addr (input_buffer);
%skip(1);
	call ssu_$arg_count (sci_ptr, number_of_args_supplied);
	if number_of_args_supplied = 0
	then return;
%skip(1);
	/* The first arg can be the pathname, let's see if it is. */
%skip(1);
	call ssu_$arg_ptr (sci_ptr, 1, arg_ptr, arg_length);
	if arg_length > 0
	then if substr (arg, 1, 1) ^= "-"
	     then do;
		terminal_input = OFF;
		input_file_pathname = arg;
		current_arg_number = 2;
		if current_arg_number > number_of_args_supplied
		then return;
		else;
	     end;
	     else current_arg_number = 1;
	else current_arg_number = 1;
%page;
	still_processing_args = ON;
%skip(1);
	do while (still_processing_args);
	     call ssu_$arg_ptr (sci_ptr, current_arg_number, arg_ptr, arg_length);
	     current_arg_number = current_arg_number + 1;
	     if arg = "-force" | arg = "-fc"
	     then force = ON;
	     else if arg = "-no_force" | arg = "-nfc"
		then force = OFF;
	          else if arg = "-terminal_input" | arg = "-ti"
		     then terminal_input = ON;
		     else if arg = "-input_file" | arg = "-if"
			then do;
			     if current_arg_number > number_of_args_supplied
			     then call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
				"^/When -input_file is used it must be followed by a pathname.");
			     else call ssu_$arg_ptr (sci_ptr, current_arg_number, arg_ptr, arg_length);
			     input_file_pathname = arg;
			     terminal_input = OFF;
			     current_arg_number = current_arg_number + 1;
			end;
			else if arg = "-brief" | arg = "-bf"
			     then brief = ON;
			     else if arg = "-long" | arg = "-lg"
				then brief = OFF;
			          else call ssu_$abort_line (sci_ptr, error_table_$badopt,
				     "^/Unrecognized control argument ^a.", arg);
	     if current_arg_number > number_of_args_supplied
	     then still_processing_args = OFF;
	end;
%skip(1);
          return;
%skip(1);
     end initialize;
%page;
prompt_user_for_replacing_query: proc;
%skip(3);
	if lcb.liocb_ptr = null ()
	then user_wants_the_query_replaced = ON;
	else if lcb.lila_count ^> 0
	     then user_wants_the_query_replaced = ON;
	     else call linus_query$yes_no (lcb_ptr, 
		user_wants_the_query_replaced, DO_YOU_WANT_TO_REPLACE_THE_EXISTING_QUERY);
%skip(1);
	return;
%skip(1);
     end prompt_user_for_replacing_query;
%page;
write_query_line_to_file: proc (

	wqltf_number_of_chars_to_write_parm, /* input: # of chars to write */
	wqltf_record_key_parm	       /* input: key for record */
			 );
%skip(3);
dcl wqltf_number_of_chars_to_write_parm fixed bin (21) parm;
dcl wqltf_record_key_parm fixed bin parm;
dcl wqltf_record char (wqltf_number_of_chars_to_write_parm) based (input_buffer_ptr);
%skip(1);
	call linus_query_mgr$write_line (lcb_ptr, wqltf_record_key_parm,
	     wqltf_record, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code,
	     "^/While trying to write the record ^/^a", wqltf_record);
	else;
%skip(1);
	return;
%skip(1);
     end write_query_line_to_file;
%page;
dcl DO_YOU_WANT_TO_REPLACE_THE_EXISTING_QUERY char (51) varying static internal options (constant) init (
"A query already exists, do you wish to replace it? ");
%skip(1);
dcl INPUT_BUFFER_LENGTH fixed bin (21) static internal options (constant) init (4096);
%skip(1);
dcl LARGEST_LILA_LINE_NUMBER fixed bin (17) static internal options (constant) init (9999);
%skip(1);
dcl NEWLINE char (1) static internal options (constant) init ("
");
%skip(1);
dcl OFF bit (1) aligned static internal options (constant) init ("0"b);
dcl OLD_QUERY bit (1) aligned static internal options (constant) init ("0"b);
dcl ON bit (1) aligned static internal options (constant) init ("1"b);
%page;
dcl addr builtin;
dcl arg char (arg_length) based (arg_ptr);
dcl arg_length fixed bin (21);
dcl arg_ptr ptr;
dcl attached bit (1) aligned;
%skip(1);
dcl brief bit (1) aligned;
%skip(1);
dcl cleanup condition;
dcl cleanup_signalled bit (1) aligned;
dcl code fixed bin (35);
dcl current_arg_number fixed bin;
%skip(1);
dcl enter_the_editor bit (1) aligned;
dcl error_table_$badopt fixed bin(35) ext static;
dcl error_table_$end_of_info fixed bin(35) ext static;
dcl error_table_$inconsistent fixed bin(35) ext static;
dcl expand_pathname_$add_suffix entry (char(*), char(*), char(*), char(*), fixed bin(35));
%skip(1);
dcl fixed builtin;
dcl force bit (1) aligned;
%skip(1);
dcl index builtin;
dcl input_buffer char (INPUT_BUFFER_LENGTH);
dcl input_buffer_as_an_array (INPUT_BUFFER_LENGTH) char (1) based (addr (input_buffer));
dcl input_buffer_ptr ptr;
dcl input_file_directory_name char (168);
dcl input_file_entry_name char (32);
dcl input_file_iocb_ptr ptr;
dcl input_file_pathname char (168);
dcl ioa_ entry() options(variable);
%skip(1);
dcl linus_error_$no_db fixed bin(35) ext static;
dcl linus_query_mgr$initialize_query_file entry (ptr);
dcl linus_query_mgr$write_line entry (ptr, fixed bin, char(*), fixed bin(35));
dcl linus_qedx_the_query entry (ptr, bit(1) aligned);
dcl linus_query$yes_no entry (ptr, bit(1) aligned, char(*) var);
dcl loop fixed bin;
%skip(1);
dcl null builtin;
dcl number_of_args_supplied fixed bin;
dcl number_of_characters_read fixed bin (21);
%skip(1);
dcl opened bit (1) aligned;
%skip(1);
dcl rel builtin;
dcl rtrim builtin;
%skip(1);
dcl sci_ptr ptr;
dcl ssu_$abort_line entry() options(variable);
dcl ssu_$arg_count entry (ptr, fixed bin);
dcl ssu_$arg_ptr entry (ptr, fixed bin, ptr, fixed bin(21));
dcl ssu_$print_message entry() options(variable);
dcl still_collecting_lines bit (1) aligned;
dcl still_processing_args bit (1) aligned;
dcl still_writing_the_file bit (1) aligned;
dcl substr builtin;
dcl sys_info$max_seg_size fixed bin(35) ext static;
dcl switch_name char (32);
%skip(1);
dcl terminal_input bit (1) aligned;
dcl there_is_a_line_to_write bit (1) aligned;
%skip(1);
dcl unique_chars_ entry (bit(*)) returns(char(15));
dcl user_wants_the_query_replaced bit (1) aligned;
%page;
%include iox_modes;
%page;
%include iox_dcls;
%page;
%include linus_lcb;
%skip(3);
     end linus_input_query;
