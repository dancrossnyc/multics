/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4,delnl,insnl,ifthenstmt,indnoniterend */
linus_temp_seg_mgr:
	proc ();

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
	/*								        */
	/*    This program implements the temporary segment management features	        */
	/*    as used by the LINUS report writer (and possibly other modules later).	        */
	/*								        */
	/*    Last Modified: (date and reason):					        */
	/*    04/06/83         original coding by Dave Schimke			        */
	/*                     taken from get_temporary_segments_.pl1, but modified to add      */
	/*                     directory specification.				        */
	/*								        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


/* Parameters */

dcl  a_lcb_ptr ptr;
dcl  a_caller char (*);
dcl  a_dir char (*);
dcl  a_ptrs (*) ptr;
dcl  a_ptr ptr;
dcl  a_code fixed bin (35);

/**/

get_segments:
	entry (a_lcb_ptr, a_caller, a_dir, a_ptr, a_code);

	n_segs = dim (a_ptrs, 1);			/* get number of segments wanted */
	array_ptr = addr (a_ptrs);			/* get ptr to the array of ptrs */

gts_join:
	call initialize;
	a_code = 0;
	n_found = 0;				/* initialize indicating we've found no free entries */
 	if a_dir = ""
	     then dir_name = get_pdir_ ();
	else dir_name = a_dir;	     
	status_ip = addr(status_info);
	call expand_pathname_ (dir_name, containing_dir, dir_entryname, code);
	if code ^= 0 then do;
	     a_code = code;
	     return;
	     end;
	call hcs_$status_long (containing_dir, dir_entryname, 1, status_ip, null(), code);
	if code ^= 0 & code ^= error_table_$no_s_permission then do;
	     a_code = code;
	     return;
	     end;
	
	dir_uid = status_info.long.uid;
	
	if block_ptr = null then do;			/* we haven't yet gotten any segments */
	     temp_seg_info.number_of_temp_segs,
		n_blocks = n_segs;			/* so get the exact amount requested */ 
	     allocate block in (area) set (block_ptr);	/* get the needed storage */
	     temp_seg_info.seg_block_ptr = block_ptr;
	     old_blocks = 0;			/* needed by get_new_segments routine */
	     call get_new_segments;			/* do the work in this subr */
	     return;
	     end;

	do i = 1 to n_blocks while (n_found < n_segs);	/* search for the necessary free segments */
	     if (^block (i).used & block(i).uid = dir_uid)
		then do;				/* we found another free one */
		block (i).used = "1"b;		/* mark entry as being used */
		block (i).caller = a_caller;		/* save name of whose using it */
		n_found = n_found + 1;
		ptrs (n_found) = block (i).segptr;
		end;
	end;
	if n_found < n_segs then do;			/* there weren't enough free ones */
	     new_blocks = n_blocks + n_segs - n_found;	/* get more storage, just large enough */
	     old_blocks = n_blocks;

	     allocate new_block in (area) set (new_block_ptr);
						/* get the needed storage */
	     new_block_ptr -> block = block;		/* copy the current structure */
	     free block in (area);
	     temp_seg_info.number_of_temp_segs,
		n_blocks = new_blocks;
	     temp_seg_info.seg_block_ptr,
		block_ptr = new_block_ptr;
	     call get_new_segments;			/* get the needed segments */
	     end;

	return;

get_new_segments:
     proc;

dcl  (i, j) fixed bin;

	do i = old_blocks + 1 to n_blocks;		/* initialize the new entries */
	     block (i).used = "1"b;			/* the caller will use these blocks */
	     block (i).caller = a_caller;		/* ditto */
	     block (i).uid = dir_uid;		          /* save the dir_uid */
	     ename2 = unique_chars_ (unique_bits_ ()) || ".temp.";
	     ename = substr(ename2, 1, 20);
	     call hcs_$make_seg (dir_name, ename, "", 01110b, block (i).segptr, code);
	     if code ^= 0 then do;
		call undo;
		return;
		end;
	     segment_number = bin (baseno (block (i).segptr), 18);
	     do j = 1 to 4;
		segno (j) = substr ("01234567", bin (digit (j), 3) + 1, 1);
	     end;
	     call hcs_$chname_seg (block (i).segptr, ename, ename2, code);
	     if code ^= 0 then do;
		call undo;
		return;
		end;

	     call hcs_$set_safety_sw_seg (block (i).segptr, "1"b, code);

	     block (i).name = substr(ename2, 1, 25);
	     n_found = n_found + 1;
	     ptrs (n_found) = block (i).segptr;
	end;

undo:
	proc;

	     a_code = code;
	     temp_seg_info.number_of_temp_segs,
		n_blocks = old_blocks;		/* reset to the way things were */
	     do j = old_blocks + 1 to i - 1;		/* clean up the segments we already got */
		call delete_$ptr (block (j).segptr, "100100"b, "", code);
	     end;

	end;
     end;						/*						*/
get_segment:
     entry (a_lcb_ptr, a_caller, a_dir, a_ptr, a_code);

	n_segs = 1;				/* only 1 segment is being processed */
	array_ptr = addr (a_ptr);
	go to gts_join;				/*						*/
release_segments:
     entry (a_lcb_ptr, a_caller, a_ptrs, a_code);

          n_segs = dim (a_ptrs, 1);			/* get number of segments wanted */
	array_ptr = addr (a_ptrs);			/* get ptr to the array of ptrs */

rts_join:
          call initialize;
	a_code = 0;
	do i = 1 to n_segs;				/* release each segment passed in */
	     if ptrs (i) ^= null then do;
		found_it = "0"b;			/* flag says we've not yet found this segment */
		do j = 1 to n_blocks while (^found_it); /* search for segment in array */
		     if block (j).used then do;	/* candidate, see if right one */
			if ptrs (i) = block (j).segptr then do;
						/* we found the given segment */
			     if block (j).caller ^= substr(a_caller, 1, min (length (a_caller),32))
			     then a_code = error_table_$argerr;
			     else do;		/* the right guy (as far as we care) */
				call hcs_$truncate_seg (block (j).segptr, 0, code);
						/* truncate now */
				if code ^= 0 then a_code = code;
						/* accumulate error */
				block (j).used = "0"b;
						/* ditto */
				block (j).caller = "";
				ptrs (i) = null;
				found_it = "1"b;
				end;
			     end;
			end;
		end;
		if ^found_it then a_code = error_table_$argerr;
		end;
	end;
	return;

/**/
release_segment:
     entry (a_lcb_ptr, a_caller, a_ptr, a_code);

          n_segs = 1;				/* only 1 segment is being processed */
	array_ptr = addr (a_ptr);
	goto rts_join;

/**/
terminate:
	entry (a_lcb_ptr, a_code);

	call initialize;
	a_code = 0;
	do i = 1 to n_blocks;			/* delete all */
	     if block(i).used then call com_err_ (0, "linus_temp_seg_mgr", "Warning. An unreleased temp seg has been found. (^a)", block(i).caller);
	     call delete_$ptr (block(i).segptr, "100100"b, "linus_temp_seg_mgr", a_code);
	     end;
	call release_temp_segment_ ("linus_temp_seg_mgr", temp_seg_info.work_area_ptr, a_code);
	lcb.temp_seg_info_ptr = null;
	return;
/**/
initialize:
	proc;

	lcb_ptr = a_lcb_ptr;
	sci_ptr = lcb.subsystem_control_info_ptr;
	info_ptr = lcb.temp_seg_info_ptr;
	if info_ptr = null then do;
	     allocate temp_seg_info in (lcb.static_area) set (info_ptr);
	     lcb.temp_seg_info_ptr = info_ptr;
	     end;
	area_p = temp_seg_info.work_area_ptr;
	if area_p = null then do;
	     call get_temp_segment_ ("linus_temp_seg_mgr", temp_seg_info.work_area_ptr, a_code);
	     allocate area_info set (area_infop);
	     area_info.version = 1;
	     area_info.control.extend = "0"b;
	     area_info.control.zero_on_alloc = "0"b;
	     area_info.control.zero_on_free = "0"b;
	     area_info.control.no_freeing = "0"b;
	     area_info.control.system = "0"b;
	     area_info.owner = a_caller;
	     area_info.pad = "0"b;
	     area_info.size = sys_info$max_seg_size;
	     area_info.areap = temp_seg_info.work_area_ptr;
	     call define_area_ (area_infop, a_code);
	     area_p = temp_seg_info.work_area_ptr;
	     free area_info;
	     end;
	block_ptr = temp_seg_info.seg_block_ptr;
	n_blocks = temp_seg_info.number_of_temp_segs;
end initialize;
/* Automatic */

dcl  area_p ptr init (null);
dcl  array_ptr ptr;
dcl  block_ptr ptr init (null);
dcl  code fixed bin (35);
dcl  containing_dir char(168);
dcl  dir_entryname char(32);
dcl  dir_name char(168);
dcl  dir_uid bit(36) unal;
dcl  ename char (20);
dcl  ename2 char (32);
dcl  found_it bit (1);
dcl  i fixed bin;
dcl  info_ptr ptr;
dcl  j fixed bin;
dcl  n_blocks fixed bin init (0);
dcl  n_found fixed bin;
dcl  n_segs fixed bin;
dcl  new_block_ptr ptr;
dcl  new_blocks fixed bin;
dcl  old_blocks fixed bin;
dcl  sci_ptr ptr;
dcl  segment_number fixed bin;
dcl  segno (4) char (1) defined (ename2) pos (22);
dcl  status_ip ptr;

/* Based */

dcl  area area based (area_p);
dcl  1 block (n_blocks) aligned based (block_ptr),
       2 caller char (32),
       2 segptr ptr,
       2 name char (25),
       2 uid bit(36) unal,
       2 used bit (1);
dcl  1 temp_seg_info based (info_ptr),
       2 number_of_temp_segs fixed bin init (0),
       2 seg_block_ptr ptr init(null),
       2 work_area_ptr ptr init(null);
dcl  1 new_block (new_blocks) aligned based (new_block_ptr) like block;
dcl  1 octal_digits aligned based (addr (segment_number)),
       2 filler bit (24) unal,
       2 digit (4) bit (3) unal;
dcl  ptrs (n_segs) ptr based (array_ptr);
dcl 1 status_info like status_branch;

/* Builtin */

dcl  (addr, baseno, bin, dim, fixed, length, min, null, rel, substr) builtin;

/* Entries */

dcl  com_err_ entry() options(variable);
dcl  define_area_ entry (ptr, fixed bin(35));
dcl  delete_$ptr entry (ptr, bit(6), char(*), fixed bin(35));
dcl  expand_pathname_ entry (char(*), char(*), char(*), fixed bin(35));
dcl  get_pdir_ entry() returns(char(168));
dcl  get_temp_segment_ entry (char(*), ptr, fixed bin(35));
dcl  hcs_$chname_seg entry (ptr, char (*), char (*), fixed bin (35));
dcl  hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$status_long entry (char(*), char(*), fixed bin(1), ptr, ptr, fixed bin(35));
dcl  hcs_$set_safety_sw_seg entry (ptr, bit (1), fixed bin (35));
dcl  hcs_$truncate_seg entry (ptr, fixed bin, fixed bin (35));
dcl  release_temp_segment_ entry (char(*), ptr, fixed bin(35));
dcl  unique_bits_ entry returns (bit (70));
dcl  unique_chars_ entry (bit (*)) returns (char (15));

/* External */

dcl  error_table_$argerr fixed bin (35) ext;
dcl  error_table_$no_s_permission fixed bin(35) ext static;
dcl  sys_info$max_seg_size fixed bin(35) ext static;

%page;
%include area_info;
%include linus_lcb;
%include status_structures;

     end linus_temp_seg_mgr;
