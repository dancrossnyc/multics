/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* format: off */
%skip(3);
/*   This is the subroutine called by requests to implement the managment
     of the current query. Description and usage follows.

     Description:

     This subroutine has the following entrypoints.

     The get entry point takes the current query and places it in a segment.
     A pointer to the segment and the length are returned in the first two
     output parms, and the third output parm is the code to indicate success
     or failure.  In the case where there isn't a query, the ptr and length
     (0) are still valid, and the code is set to reflect no query
     (linus_error_$no_current_query).

     The initialize_query_file entrypoint deletes the current query if
     there is one, and initializes the keyed lila statement file if
     there isn't one.

     The put entrypoint takes the caller supplied query and makes it the
     current query. When the caller passes a query with a length of zero,
     the current query statements are deleted.

     The write_line entrypoint takes the caller supplied query line and
     places it into the keyed lila file under the caller specified key.

     Known Bugs:

     Other Problems:

     History:

     Written - Al Dupuis - August 1983

*/
%page;
linus_query_mgr: proc;
%skip(3);
/*
	These parameters are described at each entry where they are used.
*/
%skip(1);
dcl code_parm fixed bin (35) parm;
dcl lcb_ptr_parm ptr parm;
dcl query_key_parm fixed bin parm;
dcl query_line_parm char (*) parm;
dcl query_segment_ptr_parm ptr parm;
dcl query_segment_length_parm fixed bin (21) parm;
%skip(3);
	return;
%page;
get: entry (

	lcb_ptr_parm,	       /* input: ptr to the linus control block */
	query_segment_ptr_parm,    /* output: points to the returned query */
	query_segment_length_parm, /* output: length of returned query */
	code_parm		       /* output: success or failure */
	);
%skip(3);
	lcb_ptr = lcb_ptr_parm;
	query_segment_ptr_parm = null ();
	query_segment_length_parm = 0;
	code_parm = 0;
	sci_ptr = lcb.subsystem_control_info_ptr;
	lila_file_iocb_ptr = lcb.liocb_ptr;
%skip(1);
	call get_the_query (code_parm);
	query_segment_ptr_parm = query_segment_ptr;
	query_segment_length_parm = query_segment_length;
%skip(1);
	return;
%page;
initialize_query_file: entry (

	lcb_ptr_parm	       /* input: ptr to the linus control block */
		        );
%skip(3);
	lcb_ptr = lcb_ptr_parm;
	call linus_lila$initialize_lila_file (lcb_ptr);
%skip(1);
	return;
%page;
put: entry (

	lcb_ptr_parm,	       /* input: ptr to the linus control block */
	query_segment_ptr_parm,    /* input: points to the query */
	query_segment_length_parm, /* input: length of query */
	code_parm		       /* output: success or failure */
	);
%skip(3);
	lcb_ptr = lcb_ptr_parm;
	query_segment_ptr = query_segment_ptr_parm;
	query_segment_length = query_segment_length_parm;
	code_parm = 0;
%skip(1);
	if query_segment_ptr = null ()
	then do;
	     code_parm = error_table_$null_info_ptr;
	     return;
	end;
%skip(1);
	sci_ptr = lcb.subsystem_control_info_ptr;
%skip(1);
	call put_the_query (code_parm);
%skip(1);
	return;
%page;
write_line: entry (

	lcb_ptr_parm,    /* input: ptr to the linus control block */
	query_key_parm,  /* input: key to place the line under */
	query_line_parm, /* input: the query line to write */
	code_parm	       /* output: success or failure */
	);
%skip(3);
	lcb_ptr = lcb_ptr_parm;
	sci_ptr = lcb.subsystem_control_info_ptr;
	lila_file_iocb_ptr = lcb.liocb_ptr;
%skip(1);
	call write_the_query_line (query_key_parm, query_line_parm, code_parm);
%skip(1);
	return;
%page;
get_the_query: proc (gtq_code_parm);
%skip(3);
dcl gtq_code fixed bin (35);
dcl gtq_code_parm fixed bin (35) parm;
dcl gtq_current_position fixed bin (21);
dcl gtq_record_length fixed bin (21);
dcl gtq_still_reading_lines bit (1) aligned;
%skip(1);
	query_segment_ptr = lcb.query_temp_segment_ptr;
	query_segment_length = 0;
	if lila_file_iocb_ptr = null () | lcb.lila_count < 1
	then do;
	     gtq_code_parm = linus_error_$no_current_query;
	     return;
	end;
%skip(1);
	call iox_$position (lila_file_iocb_ptr, -1, 0, gtq_code);
	if gtq_code ^= 0
	then call ssu_$abort_line (sci_ptr, gtq_code,
	     "^/While trying to position to beginning of LILA file.");
	input_buffer_ptr = addr (input_buffer);
	gtq_current_position = 1;
	gtq_still_reading_lines = ON;
%skip(1);
	do while (gtq_still_reading_lines);
	     call iox_$read_record (lila_file_iocb_ptr, input_buffer_ptr,
		INPUT_BUFFER_LENGTH, gtq_record_length, gtq_code);
	     if gtq_code ^= 0
	     then if gtq_code = error_table_$end_of_info
		then gtq_still_reading_lines = OFF;
	          else call ssu_$abort_line (sci_ptr, gtq_code,
		     "^/While trying to read a line from the query file.");
	     else do;
		substr (query_segment, gtq_current_position, gtq_record_length - 1)
		     = substr (input_buffer, 2, gtq_record_length - 1);
		gtq_current_position = gtq_current_position + gtq_record_length - 1;
	     end;
	end;
%skip(1);
	query_segment_length = gtq_current_position - 1;
%skip(1);
	return;
%skip(1);
     end get_the_query;
%page;
put_the_query: proc (ptq_code_parm);
%skip(3);
dcl ptq_code_parm fixed bin (35) parm;
dcl ptq_current_position fixed bin (21);
dcl ptq_loop fixed bin;
dcl ptq_newline_index fixed bin (21);
dcl ptq_query_line char (ptq_newline_index) based (addr (ptq_query_segment (ptq_current_position)));
dcl ptq_query_segment (query_segment_length) char (1) based (query_segment_ptr);
dcl ptq_still_writing_lines bit (1) aligned;
%skip(1);
	ptq_code_parm = 0;
%skip(1);
	call linus_lila$initialize_lila_file (lcb_ptr);
	if query_segment_length = 0
	then return;
%skip(1);
	lila_file_iocb_ptr = lcb.liocb_ptr;
	if substr (query_segment, query_segment_length, 1) ^= NEWLINE
	then do;
	     query_segment_length = query_segment_length + 1;
	     substr (query_segment, query_segment_length, 1) = NEWLINE;
	end;
	ptq_current_position = 1;
	ptq_still_writing_lines = ON;
%skip(1);
	do ptq_loop = 1 to 9999 while (ptq_still_writing_lines);
	     ptq_newline_index = index (substr (query_segment, 
		ptq_current_position), NEWLINE);
	     if ptq_newline_index = 0
	     then call ssu_$abort_line (sci_ptr, 0,
		"Logic error while trying to replace the query");
	     call write_the_query_line (ptq_loop, ptq_query_line, ptq_code_parm);
	     if ptq_code_parm ^= 0
	     then return;
	     ptq_current_position = ptq_current_position + ptq_newline_index;
	     if ptq_current_position > query_segment_length
	     then ptq_still_writing_lines = OFF;
	end;
%skip(1);
	return;
%skip(1);
     end put_the_query;
%page;
write_the_query_line: proc (

	wtql_query_key_parm,  /* input: key to place the line under */
	wtql_query_line_parm, /* input: the query line to write */
	wtql_code_parm	  /* output: success or failure */
		       );
%skip(3);
dcl wtql_code_parm fixed bin (35) parm;
dcl wtql_newline_index fixed bin;
dcl wtql_pictured_record_key pic "9999";
dcl wtql_query_key_parm fixed bin parm;
dcl wtql_query_line_parm char (*) parm;
dcl wtql_query_record char (4096);
dcl wtql_record_key char (256) varying;
dcl wtql_record_length fixed bin (21);
%skip(1);
	wtql_code_parm = 0;
	wtql_pictured_record_key = wtql_query_key_parm;
	wtql_record_key = wtql_pictured_record_key;
%skip(1);
	wtql_newline_index = index (wtql_query_line_parm, NEWLINE);
	if wtql_newline_index = 0
	then wtql_query_record = BLANK || rtrim (wtql_query_line_parm) || NEWLINE;
	else wtql_query_record = BLANK || rtrim (wtql_query_line_parm);
%skip(1);
	call iox_$seek_key (lila_file_iocb_ptr, wtql_record_key,
	     wtql_record_length, wtql_code_parm);
	if wtql_code_parm ^= error_table_$no_record
	then return;
%skip(1);
	wtql_record_length = length (rtrim (wtql_query_record));
	call iox_$write_record (lila_file_iocb_ptr, addr (wtql_query_record),
	     wtql_record_length, wtql_code_parm);
	if wtql_code_parm ^= 0
	then return;
%skip(1);
	lcb.lila_chars = lcb.lila_chars + wtql_record_length;
	lcb.lila_count = lcb.lila_count + 1;
%skip(1);
	return;
%skip(1);
     end write_the_query_line;
%page;
dcl BLANK char (1) static internal options (constant) init (" ");
%skip(1);
dcl INPUT_BUFFER_LENGTH fixed bin (21) static internal options (constant) init (4096);
%skip(1);
dcl NEWLINE char (1) static internal options (constant) init ("
");
%skip(1);
dcl OFF bit (1) aligned static internal options (constant) init ("0"b);
dcl ON bit (1) aligned static internal options (constant) init ("1"b);
%page;
dcl addr builtin;
%skip(1);
dcl error_table_$end_of_info fixed bin(35) ext static;
dcl error_table_$no_record fixed bin(35) ext static;
dcl error_table_$null_info_ptr fixed bin(35) ext static;
%skip(1);
dcl fixed builtin;
%skip(1);
dcl index builtin;
dcl input_buffer char (INPUT_BUFFER_LENGTH);
dcl input_buffer_ptr ptr;
%skip(1);
dcl length builtin;
dcl lila_file_iocb_ptr ptr;
dcl linus_error_$no_current_query fixed bin(35) ext static;
dcl linus_lila$initialize_lila_file entry (ptr);
%skip(1);
dcl null builtin;
%skip(1);
dcl query_segment char (sys_info$max_seg_size * 4) based (query_segment_ptr);
dcl query_segment_ptr ptr;
dcl query_segment_length fixed bin (21);
%skip(1);
dcl rel builtin;
dcl rtrim builtin;
%skip(1);
dcl sci_ptr ptr;
dcl ssu_$abort_line entry() options(variable);
dcl substr builtin;
dcl sys_info$max_seg_size fixed bin(35) ext static;
%page;
%include iox_dcls;
%page;
%include linus_lcb;
%skip(3);
     end linus_query_mgr;
