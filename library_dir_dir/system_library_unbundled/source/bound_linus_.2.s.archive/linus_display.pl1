/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* format: off */
%skip(3);
/*   This is the main level procedure called by ssu_ to implement the
     linus display request. Description and usage follows.

     Description: This request takes far too many control arguments to
     list here (currently it accepts 55). See the info segment for details
     on the accepted control arguments and usage.
     
     Usage:

     Both parameters are passed to this request by ssu_.


     Known Bugs:

     Other Problems:

     History:

     Written - Al Dupuis - August 1983

*/
%page;
linus_display: proc (sci_ptr_parm, lcb_ptr_parm);
%skip(3);
dcl sci_ptr_parm ptr parm;  /* ptr to the subsystem control info structure */
dcl lcb_ptr_parm ptr parm;  /* ptr to the linus control block info structure */
%skip(3);
/*
	Mainline Processing Overview.

	(1) Make sure the format options are up to date and that there is
	    data to create a report from.

	(2) Have the subroutine linus_display_process_args fill in the
	    default control args and update the defaults with arguments
	    supplied on the request line.

	(3) Delete existing report and table if appropriate, start new ones
	    if appropriate, possibly sort the table, setup for multi-pass
	    mode if appropriate.

	(4) Setup any output file, output switch, or the video system
	    depending on what control arguments were given.

	(5) Print, scroll, or page the report.

	(6) Perform termination as instructed by the control args.

*/
%page;
	arguments_have_been_processed = OFF;
	cleanup_signalled = OFF;
%skip(1);
          on cleanup begin;
	     cleanup_signalled = ON;
	     call terminate;
	end;
%skip(1);
	call initialize;
	call linus_display_process_args (sci_ptr, lcb_ptr, work_area_ptr, 
	     table_ip, addr (display_arg_results));
	arguments_have_been_processed = ON;
	call fill_in_the_defaults;
%skip(1);
	call setup_io_switches;
%skip(1);
	if display_arg_results.scroll_flag
	then call scroll_the_report;
	else if display_arg_results.pages_flag
	     then call page_the_report;
	     else call print_report;
%skip(1);
	call terminate;
%skip(1);
          return;
%page;
begin_new_report: proc;
%skip(1);
	if display_arg_results.flags.keep_report_flag
	| display_arg_results.flags.scroll_flag
	then report_control_info.flags.permanent_report = ON;
	else report_control_info.flags.permanent_report = OFF;
%skip(1);
          if display_arg_results.time_flag
	then time1 = vclock;
%skip(1);
          call linus_fr_new_report (lcb_ptr, code);
	if display_arg_results.time_flag
	then do;
	     time2 = vclock;
	     report_control_info.report_setup_time = time2 - time1;
	     call ioa_$ioa_switch (iox_$error_output,
		"Time used to setup the report was ^10.5f seconds.",
		report_control_info.report_setup_time / 1000000);
	end;
%skip(1);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code);
%skip(1);
	report_control_info.flags.report_has_been_started = ON;
	report_control_info.flags.report_is_formatted = OFF;
	report_control_info.flags.report_has_just_been_completed = OFF;
	report_control_info.report_identifier
	     = report_control_info.options_identifier;
	report_control_info.no_of_formatted_pages = 0;
	report_control_info.report_formatting_time = 0;
	report_control_info.report_display_time = 0;
	report_control_info.ssu_evaluate_active_string_time = 0;
%skip(1);
          return;
%skip(1);
     end begin_new_report;
%page;
begin_new_retrieval: proc;
%skip(1);
	if display_arg_results.keep_retrieval_flag
	| display_arg_results.sort_flag
	then report_control_info.permanent_table = ON;
	else report_control_info.permanent_table = OFF;
%skip(3);
          time1 = vclock;
          call linus_table$new_table (lcb_ptr, 
	     (report_control_info.temp_dir_name), 
	     (report_control_info.permanent_table), code);
	time2 = vclock;
	report_control_info.table_loading_time = time2 - time1;
%skip(1);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code);
%skip(1);
	report_control_info.flags.table_has_been_started = ON;
	report_control_info.flags.table_is_full = OFF;
	report_control_info.flags.table_has_just_been_loaded = OFF;
	report_control_info.retrieval_identifier
	     = table_info.retrieval_identifier;
	report_control_info.no_of_rows_retrieved = table_info.row_count;
%skip(1);
          return;
%skip(1);
     end begin_new_retrieval;
%page;
delete_report: proc;
%skip(1);
          if display_arg_results.time_flag
	then time1 = vclock;
%skip(1);
	call linus_fr_delete_report (lcb_ptr, code);
	if display_arg_results.time_flag
	then do;
	     time2 = vclock;
	     report_control_info.report_deletion_time = time2 - time1;
	     call ioa_$ioa_switch (iox_$error_output,
		"Time used to delete the report was ^10.5f seconds.",
		report_control_info.report_deletion_time / 1000000);
	end;
%skip(1);
	if code ^= 0
	then if cleanup_signalled
	     then call ssu_$print_message (sci_ptr, code);
	     else call ssu_$abort_line (sci_ptr, code);
	else;
%skip(1);
	report_control_info.flags.report_has_been_started = OFF;
%skip(1);
          return;
%skip(1);
     end delete_report;
%page;
delete_table: proc;
%skip(1);
          if display_arg_results.time_flag
          then time1 = vclock;
%skip(1);
          call linus_table$delete_table (lcb_ptr, code);
	if display_arg_results.time_flag
	then do;
	     time2 = vclock;
	     report_control_info.table_deletion_time = time2 - time1;
	     call ioa_$ioa_switch (iox_$error_output,
		"Time used to delete the table was ^10.5f seconds.",
		report_control_info.table_deletion_time / 1000000);
	end;
%skip(1);
	if code ^= 0
	then if cleanup_signalled
	     then call ssu_$print_message (sci_ptr, code);
	     else call ssu_$abort_line (sci_ptr, code);
	else;
%skip(1);
	report_control_info.flags.table_has_been_started = OFF;
%skip(1);
          return;
%skip(1);
     end delete_table;
%page;
fill_in_the_defaults: proc;
%skip(1);
/*
          Delete the old table and old report if a new retrieval or report
          has been requested and it wasn't deleted on our last termination.
          The user may have asked for an existing table or report to be
          used when it isn't possible. Examples of this are: when there isn't
          an existing table; when invocations of the print, report, etc.
          requests have occured since we were last active; when there isn't
          an existing report; when the user has invoked the sfo request;
          etc. If this has happened then it is treated as if the user asked
          for a new report/table.
*/
%skip(3);
          if ^display_arg_results.new_retrieval_flag
	then do;
	     if report_control_info.retrieval_identifier 
	     ^= table_info.retrieval_identifier
	     | ^report_control_info.flags.table_has_been_started
	     then do;
		if display_arg_results.long_flag
		then call ssu_$print_message (sci_ptr, 0,
		     "Warning: A new retrieval will be started.");
		display_arg_results.new_retrieval_flag = ON;
	     end;
	     else;
	end;
	else;
%skip(1);
          if display_arg_results.new_retrieval_flag 
	& report_control_info.flags.table_has_been_started
	then call delete_table;
%skip(1);
          if ^display_arg_results.new_report_flag
	then do;
	     if report_control_info.report_identifier
	     ^= report_control_info.options_identifier
	     | ^report_control_info.flags.report_has_been_started
	     | display_arg_results.new_retrieval_flag
	     then do;
		if display_arg_results.long_flag
		then call ssu_$print_message (sci_ptr, 0,
		     "Warning: A new report will be started.");
		display_arg_results.new_report_flag = ON;
	     end;
	     else;
	end;
	else;
%skip(1);
          if display_arg_results.new_report_flag 
	& report_control_info.flags.report_has_been_started
	then call delete_report;
%skip(1);
/* 

          Check for a new temp dir supplied by the user for placing the
          retrieved data table and formatted report.  We only allow a new
          temp_dir when we're about to create a new table and report, because
          the ptrs to the rows and formatted pages of existing reports and
          tables would be invalid.

*/
%skip(1);
          if display_arg_results.temp_dir_flag
	then do;
	     allocate status_branch in (work_area) set (status_ptr);
	     call expand_pathname_ (display_arg_results.temp_dir_pathname,
		directory_name, entry_name, code);
	     if code ^= 0
	     then call ssu_$abort_line (sci_ptr, code,
		"^/While trying to expand the temp dir ^a.", 
		display_arg_results.temp_dir_pathname);
	     call hcs_$status_long (directory_name, entry_name, 1,
		status_ptr, null (), code);
	     if code ^= 0 & code ^= error_table_$no_s_permission
	     then call ssu_$abort_line (sci_ptr, code,
		"^/While trying to determine the unique id of ^a.",
		display_arg_results.temp_dir_pathname);
	     if display_arg_results.new_report_flag
	     & display_arg_results.new_retrieval_flag
	     then do;
		report_control_info.temp_dir_name
		     = display_arg_results.temp_dir_pathname;
		report_control_info.temp_dir_unique_id
		     = status_branch.long.uid;
	     end;
	     else if report_control_info.temp_dir_unique_id = status_branch.long.uid
		then;
	          else do;
		     if display_arg_results.long_flag
		     then call ssu_$print_message (sci_ptr, 0,
			"Warning: The temp_dir ^a won't be used.", 
			rtrim (display_arg_results.temp_dir_pathname));
		     display_arg_results.temp_dir_flag = OFF;
		end;
	end;
	else;
%page;
/*
	Check for multiple pass mode.
*/
%skip(1);
	if display_arg_results.flags.passes_flag
	then if ^display_arg_results.flags.new_report_flag 
	     then call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
	          "^/The control argument -passes can only be used with a new report.");
	     else do;
		report_control_info.flags.multi_pass_mode = ON;
		report_control_info.number_of_passes = display_arg_results.number_of_passes;
	     end;
	else report_control_info.flags.multi_pass_mode = OFF;
/*
          Begin a new retrieval and report if appropriate.
*/
%skip(1);
          if display_arg_results.new_retrieval_flag
	then call begin_new_retrieval;
%skip(1);
          if display_arg_results.new_report_flag
	then call begin_new_report;
%skip(1);
/* 
          Sort the table if instructed.
*/
%skip(1);
          if display_arg_results.sort_flag
	then do;
	     if ^report_control_info.flags.table_is_full
	     then call load_the_entire_table;
	     if display_arg_results.time_flag
	     then time1 = vclock;
	     call linus_table$sort (lcb_ptr, 
		display_arg_results.sort_information_ptr, code);
	     if display_arg_results.time_flag
	     then do;
		time2 = vclock;
		report_control_info.table_sorting_time = time2 - time1;
		call ioa_$ioa_switch (iox_$error_output,
		     "Time used to sort the table was ^10.5f seconds.",
		     report_control_info.table_sorting_time / 1000000);
	     end;
	     if code ^= 0
	     then call ssu_$abort_line (sci_ptr, code);
	end;
%skip(1);
          return;
%skip(1);
     end fill_in_the_defaults;
%page;
format_page: proc;
%skip(3);
          if display_arg_results.time_flag
	then time1 = vclock;
	call linus_fr_build_page (lcb_ptr, page_ip, code);
	if display_arg_results.time_flag
	then do;
	     time2 = vclock;
	     report_control_info.report_formatting_time
		= report_control_info.report_formatting_time + (time2 - time1);
	end;
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code);
%skip(1);
	if report_control_info.flags.report_has_just_been_completed
	then do;
	     report_control_info.flags.report_has_just_been_completed = OFF;
	     if display_arg_results.time_flag
	     then call ioa_$ioa_switch (iox_$error_output,
		"Time used to format the report was ^10.5f seconds."
		|| "^/(ssu_$evaluate_active_string used ^10.5f seconds of this time.)",
		report_control_info.report_formatting_time / 1000000,
		report_control_info.ssu_evaluate_active_string_time / 1000000);
	     else;
	end;
%skip(1);
	if report_control_info.flags.table_has_just_been_loaded
	then do;
	     report_control_info.flags.table_has_just_been_loaded = OFF;
	     if display_arg_results.time_flag
	     then call ioa_$ioa_switch (iox_$error_output,
		"Time used to load the table was ^10.5f seconds.",
		report_control_info.table_loading_time / 1000000);
	     else;
	end;
%skip(1);
	call format_page_or_get_page_extra_processing (report_control_info.no_of_formatted_pages);
%skip(1);
          return;
%skip(1);
     end format_page;
%page;
format_page_or_get_page_extra_processing: proc (

	fpgpep_page_number_parm /* input: number of page just got or formatted */
				    );
dcl fpgpep_page_number_parm fixed bin (21) parm;
%skip(3);
	if fpgpep_page_number_parm = 1
	then first_page_of_the_report = ON;
	else first_page_of_the_report = OFF;
%skip(1);
	if report_control_info.report_is_formatted
	& report_control_info.no_of_formatted_pages = fpgpep_page_number_parm
          then last_page_of_the_report = ON;
	else last_page_of_the_report = OFF;
%skip(1);
	if page_info.page_overstrike_info_ptr ^= null ()
	then do;
	     terminal_dependency = ON;
	     page_overstrike_ip = page_info.page_overstrike_info_ptr;
	end;
	else terminal_dependency = OFF;
%skip(1);
	return;
%skip(1);
     end format_page_or_get_page_extra_processing;
%page;
get_page: proc (target_page_parm);
%skip(1);
dcl target_page_parm fixed bin (21) parm;
%skip(3);
	call linus_fr_get_page (lcb_ptr, target_page_parm, page_ip, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code,
	     "While trying to get page ^d.", target_page_parm);
%skip(1);
	call format_page_or_get_page_extra_processing (target_page_parm);
%skip(1);
          return;
%skip(1);
     end get_page;
%page;
initialize: proc;
%skip(1);
	sci_ptr = sci_ptr_parm;
	lcb_ptr = lcb_ptr_parm;
%skip(1);
	/* Make sure that there is data to create a report from, and that
             the information on the columns is available. */
%skip(1);
          call linus_table$translate_query (lcb_ptr, table_ip, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code);
%skip(1);
	/* Make sure that the options are in sync with the current table. */
%skip(1);
	call linus_options$initialize (lcb_ptr, code);
	if code ^= 0 
	then call ssu_$abort_line (sci_ptr, code);
%skip(1);
          /* Automatic versions of a few odds and sodds we will need. */
%skip(1);
	report_cip = lcb.report_control_info_ptr;
	work_area_ptr = report_control_info.display_work_area_ptr;
	call release_area_ (work_area_ptr);
	work_area_ptr = report_control_info.display_work_area_ptr;
	video_has_been_set_up = OFF;
%skip(1);
          return;
%skip(1);
     end initialize;
%page;
load_the_entire_table: proc;
%skip(3);
          if display_arg_results.time_flag
	then time1 = vclock;
%skip(1);
	call linus_table$load_table (lcb_ptr, code);
	if display_arg_results.time_flag
	then do;
	     time2 = vclock;
	     report_control_info.table_loading_time
		= report_control_info.table_loading_time + (time2 - time1);
	     call ioa_$ioa_switch (iox_$error_output,
		"Time used to load the table was ^10.5f seconds.",
		report_control_info.table_loading_time / 1000000);
	end;
	if code ^= 0
	then if code = mrds_error_$tuple_not_found
	     then;
	     else call ssu_$abort_line (sci_ptr, code);
	else;
%skip(1);
          report_control_info.flags.table_is_full = ON;
	report_control_info.no_of_rows_retrieved = table_info.row_count;
%skip(1);
          return;
%skip(1);
     end load_the_entire_table;
%page;
page_the_report: proc;
%skip(1);
dcl ptr_current_page_number fixed bin (21);
dcl ptr_specified_pages_as_a_string bit (NUMBER_OF_ALLOWED_SPECIFIED_PAGES) based (ptr_specified_pages_as_a_string_ptr);
dcl ptr_specified_pages_as_a_string_ptr ptr;
dcl ptr_still_paging bit (1) aligned;
%skip(3);
	if ^report_control_info.report_is_paginated
	then do;
	     call print_report;
	     return;
	end;
%skip(1);
	report_control_info.report_display_time = 0;
	ptr_specified_pages_as_a_string_ptr = addr (display_arg_results.specified_pages (1));
	ptr_current_page_number = 1;
	ptr_still_paging = ON;
%skip(1);
	do while (ptr_still_paging);
%skip(1);
	     if ptr_current_page_number > report_control_info.no_of_formatted_pages
	     then call format_page;
	     else if display_arg_results.specified_pages (ptr_current_page_number)
		then call get_page (ptr_current_page_number);
	          else;
%skip(1);
	     if display_arg_results.specified_pages (ptr_current_page_number)
	     then call print_page;
%skip(1);
	     if ^display_arg_results.last_page_flag
	     then if index (substr (ptr_specified_pages_as_a_string, ptr_current_page_number + 1), ON) = 0
		then ptr_still_paging = OFF;
	          else ptr_current_page_number = ptr_current_page_number + 1;
	     else ptr_current_page_number = ptr_current_page_number + 1;
%skip(1);
	     if report_control_info.report_is_formatted
	     & ptr_current_page_number > report_control_info.no_of_formatted_pages
	     then ptr_still_paging = OFF;
%skip(1);
	end;
%page;
	if display_arg_results.last_page_flag
	then if ^display_arg_results.specified_pages (report_control_info.no_of_formatted_pages)
	     then do;
		if ^display_arg_results.new_report_flag
		then call get_page (report_control_info.no_of_formatted_pages);
		else;
		call print_page;
	     end;
	     else;
	else;
%skip(1);
	if display_arg_results.flags.time_flag
	then call ioa_$ioa_switch (iox_$error_output,
	     "Time used to display the report was ^10.5f seconds.",
	     report_control_info.report_display_time / 1000000);
%skip(1);
	return;
%skip(1);
     end page_the_report;
%page;
print_page: proc;
%skip(1);
dcl pp_chunk_of_line char (pp_number_of_chars) based (pp_chunk_of_line_ptr);
dcl pp_chunk_of_line_ptr ptr;
dcl pp_code fixed bin (35);
dcl pp_ioa_string char (4);
dcl pp_left_margin fixed bin;
dcl pp_loop fixed bin;
dcl pp_loop_limit fixed bin;
dcl pp_number_of_chars fixed bin;
dcl pp_overstrike_index fixed bin;
dcl pp_right_margin fixed bin;
%skip(3);
	if display_arg_results.time_flag
	then time1 = vclock;
%skip(1);
	if ^display_arg_results.output_file_flag
	then if report_control_info.report_is_paginated
	     | first_page_of_the_report
	     then call ioa_$ioa_switch_nnl (
	          report_control_info.display_iocb_ptr, "^3/");
	     else;
	else;
%skip(1);
	if ^display_arg_results.character_positions_flag & ^terminal_dependency
	then do;
	     call iox_$put_chars (report_control_info.display_iocb_ptr,
		page_info.page_ptr, page_info.total_characters, pp_code);
	     if pp_code ^= 0
	     then call ssu_$abort_line (sci_ptr, pp_code);
	end;
	else do;
	     if display_arg_results.character_positions_flag
	     then do;
		pp_right_margin = display_arg_results.right_margin_position;
		pp_left_margin = display_arg_results.left_margin_position;
		if pp_left_margin < 1
		then pp_left_margin = 1;
		if pp_right_margin >= page_info.width
		then pp_right_margin = page_info.width - 1;
	     end;
	     else do;
		pp_right_margin = page_info.width - 1;
		pp_left_margin = 1;
	     end;
	     pp_number_of_chars = pp_right_margin - pp_left_margin + 1;
	     if pp_number_of_chars ^> 0
	     then call ssu_$abort_line (sci_ptr, linus_error_$bad_report_display,
		"The specified character positions result in no characters being printed.");
	     pp_loop_limit = page_info.length - 1;
	     do pp_loop = 1 to pp_loop_limit;
		pp_overstrike_index = ((pp_loop - 1) * page_info.width) + pp_left_margin;
		pp_chunk_of_line_ptr = addr (page_defined_as_chars (pp_overstrike_index));
		if terminal_dependency
		& index (substr (page_overstrike_info_redefined.bit_map, pp_overstrike_index, pp_number_of_chars), ON) ^= 0
		then call make_terminal_dependent_string;
		call ioa_$ioa_switch (report_control_info.display_iocb_ptr,
		     "^a", pp_chunk_of_line);
		if terminal_dependency
		then pp_number_of_chars = pp_right_margin - pp_left_margin + 1;
	     end;
	     pp_overstrike_index = (pp_loop_limit * page_info.width) + pp_left_margin;
	     pp_chunk_of_line_ptr = addr (page_defined_as_chars (pp_overstrike_index));
	     if report_control_info.report_is_paginated | last_page_of_the_report
	     then pp_ioa_string = "^a^|";
	     else pp_ioa_string = "^a^/";
	     if terminal_dependency
	     & index (substr (page_overstrike_info_redefined.bit_map, pp_overstrike_index, pp_number_of_chars), ON) ^= 0
	     then call make_terminal_dependent_string;
	     call ioa_$ioa_switch_nnl (report_control_info.display_iocb_ptr,
		pp_ioa_string, pp_chunk_of_line);
	end;
%skip(1);
	if display_arg_results.time_flag
	then do;
	     time2 = vclock;
	     report_control_info.report_display_time
		= report_control_info.report_display_time + (time2 - time1);
	end;
%skip(1);
	return;
%page;
make_terminal_dependent_string: proc;
%skip(1);
dcl mtds_loop fixed bin;
dcl mtds_overstrike_index fixed bin;
%skip(3);
	spare_string = "";
	mtds_overstrike_index = pp_overstrike_index;
	do mtds_loop = 1 to pp_number_of_chars;
	     spare_string = spare_string || substr (pp_chunk_of_line, mtds_loop, 1);
	     if page_overstrike_info.bit_map (mtds_overstrike_index)
	     then spare_string = spare_string 
		|| BACKSPACE || page_overstrike_info.chars (mtds_overstrike_index);
	     mtds_overstrike_index = mtds_overstrike_index + 1;
	end;
%skip(1);
	pp_number_of_chars = length (spare_string);
	pp_chunk_of_line_ptr = addrel (addr (spare_string), 1);
%skip(1);
	return;
%skip(1);
     end make_terminal_dependent_string;
%skip(1);
     end print_page;
%page;
print_report: proc;
%skip(1);
dcl pr_loop fixed bin (21);
dcl pr_loop_limit fixed bin (21);
%skip(3);
	report_control_info.report_display_time = 0;
%skip(1);
	if report_control_info.no_of_formatted_pages ^= 0
	then do;
	     pr_loop_limit = report_control_info.no_of_formatted_pages;
	     do pr_loop = 1 to pr_loop_limit;
		call get_page (pr_loop);
		call print_page;
	     end;
	end;
%skip(1);
	do while (^report_control_info.flags.report_is_formatted);
	     call format_page;
	     call print_page;
	end;
%skip(1);
	if display_arg_results.flags.time_flag
	then call ioa_$ioa_switch (iox_$error_output,
	     "Time used to display the report was ^10.5f seconds.",
	     report_control_info.report_display_time / 1000000);
%skip(1);
          return;
%skip(1);
     end print_report;
%page;
scroll_the_report: proc;
%skip(1);
dcl str_still_looking_for_the_page bit (1) aligned;
%skip(1);
	scroll_ip = display_arg_results.scroll_info_ptr;
%skip(1);
	on display_buffer_empty begin;
	     if scroll_info.target_page_number <= report_control_info.no_of_formatted_pages
	     then call get_page (scroll_info.target_page_number);
	     else call format_page;
	     scroll_info.page_info_pointer = page_ip;
	end;
%skip(1);
	do while (ON);
	     if scroll_info.flags.goto_line_number_pending
	     then call find_line_within_page;
	     else call find_page;
	     scroll_info.page_info_pointer = page_ip;
	     call linus_display_scroll$continue (scroll_ip, code);
	     if code ^= 0
	     then if code = error_table_$end_of_info
		then return;
	          else call ssu_$abort_line (sci_ptr, code);
	     else;
	end;
%skip(1);
	return;
%page;
check_for_end_of_report: proc;
%skip(3);
	scroll_info.flags.on_the_last_page = OFF;
%skip(1);
	if report_control_info.flags.report_is_formatted
	then if scroll_info.target_page_number > report_control_info.no_of_formatted_pages
	     then do;
		scroll_info.target_page_number = report_control_info.no_of_formatted_pages;
		scroll_info.flags.on_the_last_page = ON;
	     end;
	     else;
	else;
%skip(1);
	return;
%skip(1);
     end check_for_end_of_report;
%page;
find_line_within_page: proc;
%skip(1);
dcl flwp_beginning_line_number fixed bin (35);
dcl flwp_ending_line_number fixed bin (35);
dcl flwp_line_number_is_beyond_end_of_report bit (1) aligned;
dcl flwp_still_looking_for_the_line bit (1) aligned;
%skip(1);
	scroll_info.flags.goto_line_number_pending = OFF;
	flwp_still_looking_for_the_line = ON;
	flwp_line_number_is_beyond_end_of_report = OFF;
	scroll_info.target_page_number = 1;
	flwp_beginning_line_number = 1;
%skip(1);
	do while (flwp_still_looking_for_the_line);
	     if scroll_info.target_page_number
	     <= report_control_info.no_of_formatted_pages
	     then call get_page (scroll_info.target_page_number);
	     else call format_page;
%skip(1);
	     flwp_ending_line_number = flwp_beginning_line_number + page_info.length - 1;
	     if report_control_info.flags.report_is_formatted
	     then if scroll_info.target_page_number
		= report_control_info.no_of_formatted_pages
		then do;
		     scroll_info.flags.on_the_last_page = ON;
		     if scroll_info.target_line_number > flwp_ending_line_number
		     then flwp_line_number_is_beyond_end_of_report = ON;
		end;
	          else;
	     else;
%skip(1);
	     if (scroll_info.target_line_number >= flwp_beginning_line_number
	     & scroll_info.target_line_number <= flwp_ending_line_number)
	     | (flwp_line_number_is_beyond_end_of_report)
	     then flwp_still_looking_for_the_line = OFF;
	     else flwp_beginning_line_number = flwp_ending_line_number + 1;
%skip(1);
	     if ^flwp_still_looking_for_the_line
	     then do;
		if flwp_line_number_is_beyond_end_of_report
		then scroll_info.target_line_number
		     = (flwp_ending_line_number - flwp_beginning_line_number)
		     - scroll_info.vertical_scroll_distance + 1;
		else scroll_info.target_line_number
		     = scroll_info.target_line_number - flwp_beginning_line_number + 1;
	     end;
	     else scroll_info.target_page_number
		= scroll_info.target_page_number + 1;
	end;
%skip(1);
	return;
%skip(1);
     end find_line_within_page;
%page;
find_page: proc;
%skip(3);
	call check_for_end_of_report;
	if scroll_info.target_page_number <= report_control_info.no_of_formatted_pages
	then call get_page (scroll_info.target_page_number);
	else do;
	     str_still_looking_for_the_page = ON;
	     do while (str_still_looking_for_the_page);
		call format_page;
		call check_for_end_of_report;
		if scroll_info.target_page_number = report_control_info.no_of_formatted_pages
		then str_still_looking_for_the_page = OFF;
	     end;
	end;
%skip(1);
	return;
%skip(1);
     end find_page;
%skip(1);
     end scroll_the_report;
%page;
setup_io_switches: proc;
%skip(3);
	if display_arg_results.output_file_flag
	then call setup_output_file;
	else if display_arg_results.scroll_flag
	     then do;
		call linus_display_scroll$start (sci_ptr, report_cip, 
		     addr (display_arg_results), work_area_ptr);
		video_has_been_set_up = ON;
	     end;
	     else if display_arg_results.output_switch_flag
		then call setup_output_switch;
		else report_control_info.display_iocb_ptr
		     = iox_$user_output;
%skip(1);
	return;
%page;
setup_output_file: proc;
%skip(3);
	switch_name = unique_chars_ ("0"b) || ".linus_display";
	if display_arg_results.truncate_flag
	then attach_description = "vfile_ "
	     || rtrim (display_arg_results.output_file_directory_name)
	     || ">" || rtrim (display_arg_results.output_file_entry_name);
	else attach_description = "vfile_ "
	     || rtrim (display_arg_results.output_file_directory_name)
	     || ">" || rtrim (display_arg_results.output_file_entry_name)
	     || " -extend";
%skip(1);
	call iox_$attach_name (switch_name, iocb_ptr, attach_description,
	     null (), code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code,
	     "While trying to attach file ^a in dir ^a.",
	     rtrim (display_arg_results.output_file_entry_name),
	     rtrim (display_arg_results.output_file_directory_name));
%skip(1);
	call iox_$open (iocb_ptr, Stream_output, "0"b, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code,
	     "While trying to open file ^a in dir ^a.",
	     rtrim (display_arg_results.output_file_entry_name),
	     rtrim (display_arg_results.output_file_directory_name));
%skip(1);
	report_control_info.display_iocb_ptr = iocb_ptr;
%skip(1);
	return;
%skip(1);
     end setup_output_file;
%page;
setup_output_switch: proc;
%skip(3);
	call iox_$look_iocb (display_arg_results.output_switch_name,
	     report_control_info.display_iocb_ptr, code);
	if code = error_table_$no_iocb
	then call ssu_$abort_line (sci_ptr, linus_error_$bad_report_display,
	     BAD_OUTPUT_SWITCH_MESSAGE);
%skip(1);
	if report_control_info.display_iocb_ptr -> iocb.attach_descrip_ptr = null ()
	| report_control_info.display_iocb_ptr -> iocb.open_descrip_ptr = null ()
	then call ssu_$abort_line (sci_ptr, linus_error_$bad_report_display,
	     BAD_OUTPUT_SWITCH_MESSAGE);
%skip(1);
	return;
%skip(1);
     end setup_output_switch;
%skip(1);
     end setup_io_switches;
%page;
terminate: proc;
%skip(3);
	if ^arguments_have_been_processed
	then return;
%skip(1);
          /* Delete the table and report if instructed to do so. */
%skip(1);
          if ^display_arg_results.keep_retrieval_flag 
	& report_control_info.flags.table_has_been_started
	then call delete_table;
%skip(1);
          if ^display_arg_results.keep_report_flag 
	& report_control_info.flags.report_has_been_started
	then call delete_report;
%skip(1);
	/* If we were writing the report to a file clean up. */
%skip(1);
	if display_arg_results.output_file_flag
	& (report_control_info.display_iocb_ptr ^= iox_$user_output
	& report_control_info.display_iocb_ptr ^= null ())
	then do;
	     iocb_ptr = report_control_info.display_iocb_ptr;
	     call iox_$close (iocb_ptr, code);
	     call iox_$detach_iocb (iocb_ptr, code);
	     call iox_$destroy_iocb (iocb_ptr, code);
	     if cleanup_signalled & report_control_info.no_of_formatted_pages > 0
	     then call ssu_$print_message (sci_ptr, 0,
		"The partial report is contained in ^/^a.",
		rtrim (display_arg_results.output_file_directory_name)
		|| ">" || rtrim (display_arg_results.output_file_entry_name));
	     else;
	end;
	else;
%skip(1);
	if display_arg_results.scroll_flag & video_has_been_set_up
	then call linus_display_scroll$stop (display_arg_results.scroll_info_ptr);
%skip(1);
          return;
%skip(1);
     end terminate;
%page;
dcl BACKSPACE char (1) static int options (constant) init ("");
dcl BAD_OUTPUT_SWITCH_MESSAGE char (69) static int options (constant) init (
"^/When -output_switch is used the switch must be opened and attached.");
dcl OFF bit (1) aligned static int options (constant) init ("0"b);
dcl ON bit (1) aligned static int options (constant) init ("1"b);
%page;
dcl addr builtin;
dcl addrel builtin;
dcl arguments_have_been_processed bit (1) aligned;
dcl attach_description char (256);
%skip(1);
dcl cleanup condition;
dcl cleanup_signalled bit (1) aligned;
dcl code fixed bin (35);
%skip(1);
dcl directory_name char (168);
dcl display_buffer_empty condition;
%skip(1);
dcl entry_name char (32);
dcl error_table_$end_of_info fixed bin(35) ext static;
dcl error_table_$inconsistent fixed bin(35) ext static;
dcl error_table_$no_iocb fixed bin(35) ext static;
dcl error_table_$no_s_permission fixed bin(35) ext static;
dcl expand_pathname_ entry (char(*), char(*), char(*), fixed bin(35));
%skip(1);
dcl first_page_of_the_report bit (1) aligned;
dcl fixed builtin;
%skip(1);
dcl hcs_$status_long entry (char(*), char(*), fixed bin(1), ptr, ptr, fixed bin(35));
%skip(1);
dcl index builtin;
dcl ioa_$ioa_switch entry() options(variable);
dcl ioa_$ioa_switch_nnl entry() options(variable);
dcl iocb_ptr ptr;
%skip(1);
dcl last_page_of_the_report bit (1) aligned;
dcl length builtin;
dcl linus_display_process_args entry (ptr, ptr, ptr, ptr, ptr);
dcl linus_display_scroll$continue entry (ptr, fixed bin(35));
dcl linus_display_scroll$start entry (ptr, ptr, ptr, ptr);
dcl linus_display_scroll$stop entry (ptr);
dcl linus_error_$bad_report_display fixed bin(35) ext static;
dcl linus_fr_build_page entry (ptr, ptr, fixed bin(35));
dcl linus_fr_delete_report entry (ptr, fixed bin(35));
dcl linus_fr_get_page entry (ptr, fixed bin (21), ptr, fixed bin (35));
dcl linus_fr_new_report entry (ptr, fixed bin(35));
dcl linus_options$initialize entry (ptr, fixed bin(35));
dcl linus_table$delete_table entry (ptr, fixed bin(35));
dcl linus_table$translate_query entry (ptr, ptr, fixed bin(35));
dcl linus_table$load_table entry (ptr, fixed bin(35));
dcl linus_table$new_table entry (ptr, char(168) var, bit (1) aligned, fixed bin(35));
dcl linus_table$sort entry (ptr, ptr, fixed bin(35));
%skip(1);
dcl mrds_error_$tuple_not_found fixed bin(35) ext static;
%skip(1);
dcl null builtin;
%skip(1);
dcl rel builtin;
dcl release_area_ entry (ptr);
dcl rtrim builtin;
%skip(1);
dcl sci_ptr ptr;
dcl spare_string char (MAXIMUM_OPTION_VALUE_LENGTH) varying;
dcl ssu_$abort_line entry() options(variable);
dcl ssu_$print_message entry() options(variable);
dcl substr builtin;
dcl switch_name char (42);
dcl sys_info$max_seg_size fixed bin(35) ext static;
%skip(1);
dcl terminal_dependency bit (1) aligned;
dcl time1 float bin (63);
dcl time2 float bin (63);
%skip(1);
dcl unique_chars_ entry (bit(*)) returns(char(15));
%skip(1);
dcl vclock builtin;
dcl video_has_been_set_up bit (1) aligned;
%skip(1);
dcl work_area area (sys_info$max_seg_size) based (work_area_ptr);
dcl work_area_ptr ptr;
%page;
%include arg_descriptor;
%page;
%include arg_list;
%page;
%include iocb;
%page;
%include iox_dcls;
%page;
%include iox_modes;
%page;
%include linus_display_arg_list;
%page;
%include linus_lcb;
%page;
%include linus_options_extents;
%page;
%include linus_page_info;
%page;
%include linus_report_info;
%page;
%include linus_scroll_info;
%page;
%include linus_sort_info;
%page;
%include linus_table_info;
%page;
%include status_structures;
     end linus_display;
