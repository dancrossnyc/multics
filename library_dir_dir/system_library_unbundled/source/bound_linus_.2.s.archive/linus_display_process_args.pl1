/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* format: off */
%skip(3);
/*   This is the procedure called by the linus_display request to process
     its control args and return the result through the include
     file linus_display_arg_list. Description and usage follows.

     Description:

     This proc is called to setup the default control arguments, and then
     update them with any user supplied control args. It is broken out
     from the linus_display request so that it can (hopefully) be replaced
     when a general process_args subroutine comes along.
     
     Usage:

     See the paremeter list for usage.

     Known Bugs:

     Other Problems:

     History:

     Written - Al Dupuis - August 1983

*/
%page;
linus_display_process_args: proc (

	sci_ptr_parm,		/* input: ptr to the subsystem control info structure */
	lcb_ptr_parm,		/* input: ptr to the linus control block info structure */
	area_ptr_parm,		/* input: ptr to an area for allocations */
	table_info_ptr_parm,	/* input: ptr to table_info structure */
	display_arg_results_ptr_parm	/* input: ptr to the display_arg_results structure */
			   );
%skip(1);
dcl sci_ptr_parm ptr parm;
dcl lcb_ptr_parm ptr parm;
dcl area_ptr_parm ptr parm;
dcl table_info_ptr_parm ptr parm;
dcl display_arg_results_ptr_parm ptr parm;
%skip(1);
/*
          Mainline Processing Overview.

	1) Set the default control arg flags.
	2) Loop through the control args updating the default flags.
          3) Process any pathnames supplied.
	4) Print execution time if we're being timed.

*/
%skip(3);
          time1 = vclock;
%skip(1);
          call initialize;
	call process_args;
%skip(1);
	if based_display_arg_results.output_file_flag
	| based_display_arg_results.temp_dir_flag
	then call setup_additional_pathnames;
%skip(1);
	if based_display_arg_results.time_flag
	then do;
	     time2 = vclock;
	     call ioa_$ioa_switch (iox_$error_output,
		"Time used to process the arguments was ^10.5f seconds.",
		(time2 - time1) / 1000000);
	end;
%skip(1);
          return;
%page;
initialize: proc;
%skip(3);
	sci_ptr = sci_ptr_parm;
	lcb_ptr = lcb_ptr_parm;
	the_area_ptr = area_ptr_parm;
	table_ip = table_info_ptr_parm;
	based_display_arg_results_ptr = display_arg_results_ptr_parm;
%skip(1);
          /* Set the default control args up. */
%skip(1);
          unspec (based_display_arg_results.flags) = OFF;
	based_display_arg_results.pathnames = BLANK;
	unspec (based_display_arg_results.miscellaneous) = OFF;
	based_display_arg_results.sort_information_ptr = null ();
%skip(1);
	based_display_arg_results.flags.all_flag = ON;
	based_display_arg_results.flags.new_report_flag = ON;
	based_display_arg_results.flags.new_retrieval_flag = ON;
	based_display_arg_results.flags.long_flag = ON;
	based_display_arg_results.flags.truncate_flag = ON;
%skip(1);
	/* Setup the scrolling structure to it's default state. */
%skip(1);
	allocate scroll_info in (the_area) set (scroll_ip);
	unspec (scroll_info) = OFF;
	based_display_arg_results.scroll_info_ptr = scroll_ip;
	terminal_info_ptr = addr (local_terminal_info);
	terminal_info.version = terminal_info_version;
	call iox_$control (iox_$user_io, "terminal_info", terminal_info_ptr, code);
	if code ^= 0
	then if code = error_table_$no_operation
	     then window_system_cant_be_used = ON;
	     else call ssu_$abort_line (sci_ptr, code,
		"Unable to get the terminal information.");
	else do;
	     window_system_cant_be_used = OFF;
	     call ttt_info_$function_key_data (terminal_info.term_type,
		the_area_ptr, function_key_data_ptr, code);
	     if code ^= 0
	     then if code ^= error_table_$no_table
		then call ssu_$abort_line (sci_ptr, code,
		     "Unable to get the function key information.");
	          else function_keys_can_be_used = OFF;
	     else do;
		scroll_info.function_key_data_pointer = function_key_data_ptr;
		if function_key_data.highest < HIGHEST_NUMBERED_FUNCTION_KEY_NEEDED
		| (function_key_data.cursor_motion_keys.down (KEY_PLAIN).sequence_length = 0)
		| (function_key_data.cursor_motion_keys.up (KEY_PLAIN).sequence_length = 0)
		| (function_key_data.cursor_motion_keys.left (KEY_PLAIN).sequence_length = 0)
		| (function_key_data.cursor_motion_keys.right (KEY_PLAIN).sequence_length = 0)
		then function_keys_can_be_used = OFF;
	          else function_keys_can_be_used = ON;
	     end;
	     if function_keys_can_be_used
	     then call process_enable_function_keys;
	     else call process_enable_escape_keys;
	end;
%skip(1);
          return;
%skip(1);
     end initialize;
%page;
process_args: proc;
%skip(3);
/* 
          Loop through the control args setting flags and collecting arguments
          to control args. Conflicting control args are overidden by the
          last one supplied. Args to control args (e.g. dir names, page 
          numbers) are processed immediately.
*/
%skip(1);
	call ssu_$arg_count (sci_ptr, no_of_args_supplied);
%skip(1);
	if no_of_args_supplied = 0
	then return;
%skip(1);
          still_processing_args = ON;
	current_arg = 1;
%skip(1);
          do while (still_processing_args);
%skip(1);
	     call get_next_arg;
	     argument_number = lookup_arg_number (arg);
	     if argument_number = 0
	     then call ssu_$abort_line (sci_ptr, error_table_$badopt,
		"^/^a is not a valid control argument. Type ""help display"" for correct usage.",
		     arg);
	     call process_arg_procs (argument_number);
%skip(1);
	end;
%skip(1);
          return;
%page;
lookup_arg_number: proc (arg_parm) returns (fixed bin);
%skip(3);
dcl arg_parm char (*) parm;
%skip(3);
          loop1 = 1;
	loop2 = hbound (ARGUMENT_NAME_TABLE, 1);
%skip(1);
	do while (loop1 <= loop2);
%skip(1);
	     loop3 = divide (loop1 + loop2, 2, 17);
	     if arg_parm = ARGUMENT_NAME_TABLE (loop3)
	     then return (loop3);
%skip(1);
	     if arg_parm < ARGUMENT_NAME_TABLE (loop3)
	     then loop2 = loop3 - 1;
	     else loop1 = loop3 + 1;
%skip(1);
	end;
%skip(1);
	return (0);
%skip(3);
%skip(1);
     end lookup_arg_number;
%skip(1);
     end process_args;
%page;
process_all: proc;
%skip(3);
          based_display_arg_results.all_flag = ON;
%skip(1);
	based_display_arg_results.pages_flag = OFF;
	based_display_arg_results.scroll_flag = OFF;
%skip(1);
          return;
%skip(1);
     end process_all;
%skip(5);
process_brief: proc;
%skip(3);
          based_display_arg_results.long_flag = OFF;
%skip(1);
          return;
%skip(1);
     end process_brief;
%page;
process_character_positions: proc;
%skip(3);     
	based_display_arg_results.scroll_flag = OFF;
	based_display_arg_results.character_positions_flag = ON;
%skip(1);
          if ^still_processing_args
	then call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
	     "^/-character_positions must be followed by a left, and optionally a right margin value.");
	call get_next_arg;
	based_display_arg_results.left_margin_position = cv_dec_check_ (arg, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
	     "^/-character_positions must be followed by a valid left margin value, not ^a.", arg);
	if ^still_processing_args
	then generate_right_margin_position = ON;
	else do;
	     call get_next_arg;
	     if substr (arg, 1, 1) = HYPHEN
	     then do;
		generate_right_margin_position = ON;
		current_arg = current_arg - 1;
		still_processing_args = ON;
	     end;
	     else do;
		generate_right_margin_position = OFF;
		based_display_arg_results.right_margin_position 
		     = cv_dec_check_ (arg, code);
		if code ^= 0
		then call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
		     "^/-character_positions must be followed by a valid left and right margin value, not ^a.", arg);
	     end;
	end;
	if generate_right_margin_position
	then do;
	     call linus_options$get (lcb_ptr, OPTIONS.GENERAL_REPORT.NAME
		(INDEX_FOR_PAGE_WIDTH), "", normalized_option_name,
		option_value, code);
	     if code ^= 0
	     then call ssu_$abort_line (sci_ptr, code,
		"^/While trying to get the default report page width.");
	     based_display_arg_results.right_margin_position = cv_dec_check_ ((option_value), code);
	     if based_display_arg_results.right_margin_position = 0
	     then based_display_arg_results.right_margin_position = 100000;
	     if code ^= 0
	     then call ssu_$abort_line (sci_ptr, linus_error_$bad_report_setup,
		"^/Could not convert the page width ""^a"" to a number.", option_value);
	end;
%skip(1);
          return;
%skip(1);
	end process_character_positions;
%page;
process_debug: proc;
%skip(3);
	based_display_arg_results.flags.debug_flag = ON;
%skip(1);
	return;
%skip(1);
     end process_debug;
%skip(5);
process_discard_report: proc;
%skip(3);
          based_display_arg_results.keep_report_flag = OFF;
%skip(1);
          return;
%skip(1);
     end process_discard_report;
%skip(5);
process_discard_retrieval: proc;
%skip(3);
          based_display_arg_results.keep_retrieval_flag = OFF;
%skip(1);
          return;
%skip(1);
     end process_discard_retrieval;
%page;
process_enable_escape_keys: proc;
%skip(3);
dcl peek_loop fixed bin;
%skip(1);
	if window_system_cant_be_used
	then call ssu_$abort_line (sci_ptr, video_et_$unable_to_call_wsys);
%skip(1);
	scroll_info.flags.escapes_in_use = ON;
%skip(1);
	do peek_loop = 1 to HIGHEST_DISPLAY_FUNCTION_NUMBER;
	     keys_as_a_table (peek_loop) = ESCAPE_KEYS_AS_A_TABLE (peek_loop);
	     mnemonic_key_sequences_as_a_table (peek_loop) = ESCAPE_KEY_MNEMONICS_AS_A_TABLE (peek_loop);
	end;
%skip(1);
	return;
%skip(1);
     end process_enable_escape_keys;
%page;
process_enable_function_keys: proc;
%skip(3);
dcl pefk_inner_loop fixed bin;
dcl pefk_loop fixed bin;
%skip(1);
	if window_system_cant_be_used
	then call ssu_$abort_line (sci_ptr, video_et_$unable_to_call_wsys);
%skip(1);
	if ^function_keys_can_be_used
	then return;
%skip(1);
	scroll_info.flags.escapes_in_use = OFF;
	scroll_info.keys.forward = substr (function_key_seqs,
	     function_key_data.cursor_motion_keys.down (KEY_PLAIN).sequence_index,
	     function_key_data.cursor_motion_keys.down (KEY_PLAIN).sequence_length);
	scroll_info.keys.backward = substr (function_key_seqs,
	     function_key_data.cursor_motion_keys.up (KEY_PLAIN).sequence_index,
	     function_key_data.cursor_motion_keys.up (KEY_PLAIN).sequence_length);
	scroll_info.keys.left = substr (function_key_seqs,
	     function_key_data.cursor_motion_keys.left (KEY_PLAIN).sequence_index,
	     function_key_data.cursor_motion_keys.left (KEY_PLAIN).sequence_length);
	scroll_info.keys.right = substr (function_key_seqs,
	     function_key_data.cursor_motion_keys.right (KEY_PLAIN).sequence_index,
	     function_key_data.cursor_motion_keys.right (KEY_PLAIN).sequence_length);
%skip(1);
	pefk_inner_loop = 1;
	do pefk_loop = 5 to HIGHEST_DISPLAY_FUNCTION_NUMBER;
	     keys_as_a_table (pefk_loop) = substr (function_key_seqs,
		function_key_data.function_keys (pefk_inner_loop, KEY_PLAIN).sequence_index,
		function_key_data.function_keys (pefk_inner_loop, KEY_PLAIN).sequence_length);
	     pefk_inner_loop = pefk_inner_loop + 1;
	end;
%skip(1);
	do pefk_loop = 1 to HIGHEST_DISPLAY_FUNCTION_NUMBER;
	     mnemonic_key_sequences_as_a_table (pefk_loop)
		= KEY_MNEMONICS_AS_A_TABLE (pefk_loop);
	end;
%skip(1);
	return;
%skip(1);
     end process_enable_function_keys;
%page;
process_extend: proc;
%skip(3);
	based_display_arg_results.truncate_flag = OFF;
%skip(1);
	return;
%skip(1);
     end process_extend;
%page;
process_keep_report: proc;
%skip(3);
	based_display_arg_results.keep_report_flag = ON;
%skip(1);
          return;
%skip(1);
     end process_keep_report;
%skip(5);
process_keep_retrieval: proc;
%skip(3);
	based_display_arg_results.keep_retrieval_flag = ON;
%skip(1);
          return;
%skip(1);
     end process_keep_retrieval;
%skip(3);
process_long: proc;
%skip(3);
          based_display_arg_results.long_flag = ON;
%skip(1);
          return;
%skip(1);
     end process_long;
%page;
process_new_report: proc;
%skip(3);
	based_display_arg_results.new_report_flag = ON;
%skip(1);
          return;
%skip(1);
     end process_new_report;
%skip(5);
process_new_retrieval: proc;
%skip(3);
	based_display_arg_results.new_retrieval_flag = ON;
%skip(1);
          return;
%skip(1);
     end process_new_retrieval;
%page;
process_old_report: proc;
%skip(3);
          based_display_arg_results.new_report_flag = OFF;
%skip(1);
          return;
%skip(1);
     end process_old_report;
%skip(5);
process_old_retrieval: proc;
%skip(3);
          based_display_arg_results.new_retrieval_flag = OFF;
%skip(1);
          return;
%skip(1);
     end process_old_retrieval;
%page;
process_output_file: proc;
%skip(3);
	if ^still_processing_args
	then call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
	     "^/-output_file must be followed by a pathname.");
	call get_next_arg;
          based_display_arg_results.output_file_flag = ON;
	based_display_arg_results.output_file_pathname = arg;
          based_display_arg_results.scroll_flag = OFF;
          based_display_arg_results.output_switch_flag = OFF;
%skip(1);
          return;
%skip(1);
     end process_output_file;
%page;
process_output_switch: proc;
%skip(3);
	if ^still_processing_args
	then call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
	     "^/-output_switch must be followed by a switch name.");
	call get_next_arg;
          based_display_arg_results.output_switch_flag = ON;
	based_display_arg_results.output_switch_name = arg;
          based_display_arg_results.output_file_flag = OFF;
          based_display_arg_results.scroll_flag = OFF;
%skip(1);
          return;
%skip(1);
     end process_output_switch;
%page;
process_pages: proc;
%skip(3);
/*

          The page ranges are handled with a bit map (currently accomodates
	10,000 pages). Set bits in the array on for any page numbers given
	by the user.  Page numbers can be given as "N", a blank separated
	list "N N", a range "N,N", as N to the last page "N," (or "N,$"),
	and as $ (means the last page). There is a special flag to indicate
	the last page has been requested.

*/
%skip(1);
          based_display_arg_results.all_flag = OFF;
	based_display_arg_results.scroll_flag = OFF;
	based_display_arg_results.pages_flag = ON;
%skip(1);
	unspec (based_display_arg_results.specified_pages) = OFF;
%skip(1);
	smallest_page_number = 1;
	largest_page_number 
	     = hbound (based_display_arg_results.specified_pages, 1);
%skip(1);
          if still_processing_args
	then do;
	     call get_next_arg;
	     first_page_number_supplied = ON;
	end;
	else first_page_number_supplied = OFF;
%skip(1);
	if ^first_page_number_supplied | substr (arg, 1, 1) = HYPHEN
	then call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
	     "^/-pages must be followed by at least one page number.");
%page;
          still_processing_page_numbers = ON;
	do while (still_processing_page_numbers);
	     if verify (arg, PAGE_RANGE_VALID_CHARACTERS) ^= 0
	     then call ssu_$abort_line (sci_ptr, error_table_$bad_arg,
		INVALID_PAGE_RANGE, arg);
	     if arg = DOLLAR
	     then based_display_arg_results.last_page_flag = ON;
	     else do;
		if index (arg, COMMA) = 0
		then do;
		     beginning_page_number = cv_dec_check_ (arg, code);
		     if code ^= 0
		     then call ssu_$abort_line (sci_ptr, error_table_$bad_arg,
			INVALID_PAGE_RANGE, arg);
		     else ending_page_number = beginning_page_number;
		end;
		else do;
		     beginning_page_number = cv_dec_check_ (before (arg, COMMA), code);
		     if code ^= 0
		     then call ssu_$abort_line (sci_ptr, error_table_$bad_arg,
			INVALID_PAGE_RANGE, arg);
		     test_string = after (arg, COMMA);
		     if test_string = "" | test_string = BLANK 
		     | test_string = DOLLAR
		     then ending_page_number = largest_page_number;
		     else do;
			ending_page_number = cv_dec_check_ ((test_string), code);
			if code ^= 0
			then call ssu_$abort_line (sci_ptr, error_table_$bad_arg,
			     INVALID_PAGE_RANGE, arg);
		     end;
		end;
		if (beginning_page_number > ending_page_number)
		| (beginning_page_number < smallest_page_number)
		| (ending_page_number > largest_page_number)
		then call ssu_$abort_line (sci_ptr, error_table_$bad_arg,
		     INVALID_PAGE_RANGE, arg);
		do loop = beginning_page_number to ending_page_number;
		     based_display_arg_results.specified_pages (loop) = ON;
		end;
	     end;
	     if still_processing_args
	     then do;
		call get_next_arg;
		if substr (arg, 1, 1) = HYPHEN
		then do;
		     current_arg = current_arg - 1;
		     still_processing_page_numbers = OFF;
		     still_processing_args = ON;
		end;
	     end;
	     else still_processing_page_numbers = OFF;
	end;
%skip(1);
          return;
%skip(1);
     end process_pages;
%page;
process_passes: proc;
%skip(3);
	if ^still_processing_args
	then call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
	     "^/-passes must be followed by the number of passes.");
	call get_next_arg;
	if verify (arg, DIGITS) ^= 0 | arg_length > REASONABLE_NUMBER_OF_DIGITS
	then call ssu_$abort_line (sci_ptr, error_table_$bad_conversion,
	     "^/The value ^a is unacceptable for the number of passes.", arg);
	based_display_arg_results.flags.passes_flag = ON;
	based_display_arg_results.miscellaneous.number_of_passes
	     = convert (based_display_arg_results.miscellaneous.number_of_passes, arg);
	if based_display_arg_results.miscellaneous.number_of_passes = 0
	then call ssu_$abort_line (sci_ptr, error_table_$bad_conversion,
	     "^/The value zero is unacceptable for the number of passes.");
	else if based_display_arg_results.miscellaneous.number_of_passes = 1
	     then based_display_arg_results.flags.passes_flag = OFF;
	     else;
%skip(1);
	return;
%skip(1);
     end process_passes;
%page;
process_scroll: proc;
%skip(3);
	if window_system_cant_be_used
	then call ssu_$abort_line (sci_ptr, video_et_$unable_to_call_wsys);
%skip(1);
	based_display_arg_results.scroll_flag = ON;
%skip(1);
	based_display_arg_results.all_flag = OFF;
	based_display_arg_results.character_positions_flag = OFF;
	based_display_arg_results.pages_flag = OFF;
          based_display_arg_results.output_file_flag = OFF;
          based_display_arg_results.output_switch_flag = OFF;
%skip(1);
          return;
%skip(1);
     end process_scroll;
%page;
process_set_keys: proc;
%skip(3);
dcl psk_pair_of_key_bindings_found bit (1) aligned;
dcl psk_function_name char (32);
dcl psk_function_key_sequence char (32);
%skip(1);
	if ^still_processing_args
	then call ssu_$abort_line (sci_ptr, error_table_$inconsistent, SET_KEYS_ERROR_MESSAGE);
%skip(1);
	psk_pair_of_key_bindings_found = OFF;
	still_processing_set_key_args = ON;
%skip(1);
	do while (still_processing_set_key_args);
	     call get_next_arg;
	     if substr (arg, 1, 1) = HYPHEN | ^still_processing_args
	     then do;
		if ^psk_pair_of_key_bindings_found | ^still_processing_args
		then call ssu_$abort_line (sci_ptr, 
		     error_table_$inconsistent, SET_KEYS_ERROR_MESSAGE);
		current_arg = current_arg - 1;
		still_processing_args = ON;
		return;
	     end;
	     psk_function_name = arg;
	     call get_next_arg;
	     psk_function_key_sequence = arg;
	     psk_pair_of_key_bindings_found = ON;
	     call linus_display_scroll$set_fkey (scroll_ip, 
		psk_function_name, psk_function_key_sequence, code);
	     if code ^= 0
	     then if code = linus_error_$bad_fkey_name
		then call ssu_$abort_line (sci_ptr, linus_error_$bad_fkey_name,
		     "^/^a is not a valid display scroll function name.", psk_function_name);
	          else if code = linus_error_$bad_fkey_sequence
		     then call ssu_$abort_line (sci_ptr, linus_error_$bad_fkey_sequence,
		          "^/^a is not a valid mnemonic function key sequence.", psk_function_key_sequence);
	     else call ssu_$abort_line (sci_ptr, code);
	     if ^still_processing_args
	     then still_processing_set_key_args = OFF;
	end;
%skip(1);
	return;
%skip(1);
     end process_set_keys;
%page;
process_sort: proc;
%skip(3);
	if ^still_processing_args
	then call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
	     "^/-sort must be followed by at least one column name or number.");
%skip(1);
	call get_next_arg;
	if substr (arg, 1, 1) = HYPHEN
	then call ssu_$abort_line (sci_ptr, error_table_$bad_arg,
	     "^/-sort must be followed by a column name or number, not ^a.", arg);
%skip(1);
/*
          Allocate the info structure big enough to hold all columns
          if they are all given. Keep track of which ones are given during
          the processing and if duplicates are given then shut things down.
          A bit map is used to keep track of duplicates.
*/
	no_of_candidate_columns = table_info.column_count;
	allocate sort_info in (the_area)
	     set (sort_info_ptr);
	based_display_arg_results.sort_information_ptr = sort_info_ptr;
	unspec (sort_info) = OFF;
%skip(1);
	allocate sort_bit_map in (the_area)
	     set (sort_bit_map_ptr);
	unspec (sort_bit_map) = OFF;
%skip(1);
          based_display_arg_results.sort_flag = ON;
	still_processing_sort_specs = ON;
	sort_info.number_of_columns_to_sort = 0;
%skip(1);
/*
          (1) The name can be given as a name or number so it's normalized
          so that it's a name. If its not found things are shut down. 
          (2) The name is looked up to find out its order in the
          selection expression. This operation can't fail because the name
          used for the lookup is the normalized name. (3) The name found is
          checked to make sure it's the first time it was given. If its been
          given before then things are shut down. (4) The number of columns
          to be sorted is bumped and the number of the column is stored.
          (5) The next arg (if there is one) is checked to see if its 
          -ascending or one of its brothers. If it is fine. If it's a new
          control arg then a backup in necessary. If it's the next column
          name or number then it will be processed the next time through the
          loop. If it was one of the -ascending family then the next column
          name or number must be gotten before the loop is repeated (which
          may cause another backup operation), if there is another column
          name or number.
*/
%skip(1);
	do while (still_processing_sort_specs);
%skip(1);
	/* Have column name or number changed to a name. */
%skip(1);
	     call linus_options$check_identifier (lcb_ptr, 
		OPTIONS.SPECIFIC_COLUMN.NAME (1), (arg), 
		normalized_option_name, code);
	     if code ^= 0
	     then if code = linus_error_$bad_option_identifier
		then call ssu_$abort_line (sci_ptr, error_table_$bad_arg,
		     "^/^a is not a valid column name or number.", arg);
	          else call ssu_$abort_line (sci_ptr, code);
	     else;
%skip(1);
	     /* Find the number of the column. */
%skip(1);
	     not_found = ON;
	     the_column_name = after (normalized_option_name, BLANK);
	     do loop = 1 to table_info.column_count while (not_found);
		if table_info.columns.column_name (loop) = the_column_name
		then do;
		     not_found = OFF;
		     column_number = loop;
		end;
	     end;
%skip(1);
	     /* Reject duplicates, mark ones we've found. */
%skip(1);
               if not_found
	     then call ssu_$abort_line (sci_ptr, linus_error_$bad_report_setup,
		"^/Logic error while trying to find the column ^a.", arg);
	     if sort_bit_map (column_number)
	     then call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
		"^/The ^a column (#^d) was given more than once in the sort description.",
		table_info.columns.column_name (column_number), column_number);
	     else sort_bit_map (column_number) = ON;
%skip(1);
	     sort_info.number_of_columns_to_sort 
		= sort_info.number_of_columns_to_sort + 1;
	     sort_info.columns.number (sort_info.number_of_columns_to_sort) 
		= column_number;
%page;
	     if still_processing_args
	     then do;
		still_processing_additional_sort_args = ON;
		do while (still_processing_additional_sort_args);
		     backup_necessary = OFF;
		     next_column_name_found = OFF;
		     call get_next_arg;
		     if arg = HYPHEN_DESCENDING | arg = HYPHEN_DSC
		     then sort_info.columns.descending 
			(sort_info.number_of_columns_to_sort) = ON;
		     else if arg = HYPHEN_ASCENDING | arg = HYPHEN_ASC
			then;
		          else if arg = HYPHEN_NON_CASE_SENSITIVE | arg = HYPHEN_NCS
			     then sort_info.columns.non_case_sensitive
			          (sort_info.number_of_columns_to_sort) = ON;
			     else if arg = HYPHEN_CASE_SENSITIVE | arg = HYPHEN_CS
				then;
			          else if substr (arg, 1, 1) = HYPHEN
				     then backup_necessary = ON;
				     else next_column_name_found = ON;
		     if next_column_name_found | backup_necessary
		     then still_processing_additional_sort_args = OFF;
		     else if ^still_processing_args
			then do;
			     still_processing_additional_sort_args = OFF;
			     still_processing_sort_specs = OFF;
			end;
			else;
		     if backup_necessary
		     then do;
			current_arg = current_arg - 1;
			still_processing_args = ON;
			still_processing_sort_specs = OFF;
		     end;
		end;
	     end;
	     else still_processing_sort_specs = OFF;
	end;
%skip(1);
          return;
%skip(1);
     end process_sort;
%page;
process_temp_dir: proc;
%skip(3);
          if ^still_processing_args
	then call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
	     "^/-temp_dir must be followed by a directory name.");
	call get_next_arg;
	based_display_arg_results.temp_dir_flag = ON;
	based_display_arg_results.temp_dir_pathname = arg;
%skip(1);
          return;
%skip(1);
     end process_temp_dir;
%page;
process_truncate: proc;
%skip(3);
	based_display_arg_results.truncate_flag = ON;
%skip(1);
	return;
%skip(1);
     end process_truncate;
%page;
process_window: proc;
%skip(3);
	if ^still_processing_args
	then if arg = "-window" | arg = "-win"
	     then call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
	          "^/-window must be followed by the name of a window.");
	     else call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
	          "^/-io_switch must be followed by the name of a switch.");
	else;
	call get_next_arg;
          based_display_arg_results.window_flag = ON;
	based_display_arg_results.window_name = arg;
%skip(1);
          return;
%skip(1);
     end process_window;
%page;
process_time: proc;
%skip(3);
          based_display_arg_results.time_flag = ON;
%skip(1);
          return;
%skip(1);
     end process_time;
%page;
get_next_arg: proc;
%skip(3);
          call ssu_$arg_ptr (sci_ptr, current_arg, arg_ptr, arg_length);
	current_arg = current_arg + 1;
	if current_arg > no_of_args_supplied
	then still_processing_args = OFF;
%skip(1);
          return;
%skip(1);
     end get_next_arg;
%page;
setup_additional_pathnames: proc;
%skip(3);
/*

          If the user has requested the report be saved then expand the
          pathname given and stash away the dir and entry names. If a
          temp_dir was specified then expand and stash it away also.

*/
%skip(1);
          if based_display_arg_results.output_file_flag
	then do;
	     call expand_pathname_ (
		based_display_arg_results.output_file_pathname, 
		based_display_arg_results.output_file_directory_name, 
		based_display_arg_results.output_file_entry_name, code);
	     if code ^= 0
	     then call ssu_$abort_line (sci_ptr, code,
		"^/Unable to expand the -output_file pathname ^a.", 
		based_display_arg_results.output_file_pathname);
	end;
%skip(1);
          if based_display_arg_results.temp_dir_flag
	then do;
	     call expand_pathname_ (
		based_display_arg_results.temp_dir_pathname, 
		temporary_dir_name, entry_name, code);
	     if code ^= 0
	     then call ssu_$abort_line (sci_ptr, code,
		"^/Unable to expand the -temp_dir name ^a.", 
		based_display_arg_results.temp_dir_pathname);
	     call hcs_$status_minf (temporary_dir_name, entry_name, 1, 
		type, bit_count, code);
	     if code ^= 0
	     then call ssu_$abort_line (sci_ptr, code,
		"^/Unable to get the status of the directory ^a.", 
		rtrim (based_display_arg_results.temp_dir_pathname));
	     if type ^= DIRECTORY | (type = DIRECTORY & bit_count > 0)
	     then call ssu_$abort_line (sci_ptr, error_table_$notadir,
		"^/-temp_dir must be followed by a directory name.");
	     based_display_arg_results.temp_dir_pathname
		= rtrim (temporary_dir_name) || ">"
		|| rtrim (entry_name);
	end;
%skip(1);
          return;
%skip(1);
     end setup_additional_pathnames;
%page;
/* To change this table also change the process_arg_procs table. */
%skip(1);
dcl ARGUMENT_NAME_TABLE (55) char (21) varying static int options (constant) init (

"-a",			 /* process_all */
"-all",			 /* process_all */
"-bf",			 /* process_brief */
"-brief",			 /* process_brief */
"-character_positions",	 /* process_character_positions */
"-chpsn",			 /* process_character_positions */
"-debug",			 /* process_debug */
"-discard_report",		 /* process_discard_report */
"-discard_retrieval",	 /* process_discard_retrieval */
"-dsr",			 /* process_discard_retrieval */
"-dsrp",			 /* process_discard_report */
"-eek",			 /* process_enable_escape_keys */
"-efk",			 /* process_enable_function_keys */
"-enable_escape_keys",	 /* process_enable_escape_keys */
"-enable_function_keys",	 /* process_enable_function_keys */
"-extend",		 /* process_extend */
"-io_switch",		 /* process_window */
"-iosw",			 /* process_window */
"-keep_report",		 /* process_keep_report */
"-keep_retrieval",		 /* process_keep_retrieval */
"-kr",			 /* process_keep_retrieval */
"-krp",			 /* process_keep_report */
"-lg",			 /* process_long */
"-long",			 /* process_long */
"-new_report",		 /* process_new_report */
"-new_retrieval",		 /* process_new_retrieval */
"-nr",			 /* process_new_retrieval */
"-nrp",			 /* process_new_report */
"-of",			 /* process_output_file */
"-old_report",		 /* process_old_report */
"-old_retrieval",		 /* process_old_retrieval */
"-or",			 /* process_old_retrieval */
"-orp",			 /* process_old_report */
"-osw",			 /* process_output_switch */
"-output_file",		 /* process_output_file */
"-output_switch",		 /* process_output_switch */
"-page",			 /* process_pages */
"-pages",			 /* process_pages */
"-pass",			 /* process_passes */
"-passes",		 /* process_passes */
"-pg",			 /* process_pages */
"-pgs",			 /* process_pages */
"-scroll",		 /* process_scroll */
"-set_key",		 /* process_set_keys */
"-set_keys",		 /* process_set_keys */
"-sk",			 /* process_set_keys */
"-sks",			 /* process_set_keys */
"-sort",			 /* process_sort */
"-tc",			 /* process_truncate */
"-td",			 /* process_temp_dir */
"-temp_dir",		 /* process_temp_dir */
"-time",			 /* process_time */
"-truncate",		 /* process_truncate */
"-win",			 /* process_window */
"-window" 		 /* process_window */
);
dcl BLANK char (1) static int options (constant) init (" ");
dcl COMMA char (1) static int options (constant) init (",");
dcl DIRECTORY fixed bin (2) static int options (constant) init (2);
dcl DIGITS char (10) static int options (constant) init ("0123456789");
dcl DOLLAR char (1) static int options (constant) init ("$");
dcl HYPHEN char (1) static int options (constant) init ("-");
dcl HYPHEN_ASCENDING char (10) static int options (constant) init ("-ascending");
dcl HYPHEN_ASC char (4) static int options (constant) init ("-asc");
dcl HYPHEN_CASE_SENSITIVE char (15) static int options (constant) init ("-case_sensitive");
dcl HYPHEN_CS char (3) static int options (constant) init ("-cs");
dcl HYPHEN_DESCENDING char (11) static int options (constant) init ("-descending");
dcl HYPHEN_DSC char (4) static int options (constant) init ("-dsc");
dcl HYPHEN_NON_CASE_SENSITIVE char (19) static int options (constant) init ("-non_case_sensitive");
dcl HYPHEN_NCS char (4) static int options (constant) init ("-ncs");
dcl INVALID_PAGE_RANGE char (46) static int options (constant) init ("^/^a is not a valid page number or page range.");
dcl OFF bit (1) static int options (constant) init ("0"b);
dcl ON bit (1) static int options (constant) init ("1"b);
dcl PAGE_RANGE_VALID_CHARACTERS char (13) static int options (constant) init (" ,$0123456789");
dcl REASONABLE_NUMBER_OF_DIGITS fixed bin static int options (constant) init (5);
dcl SET_KEYS_ERROR_MESSAGE char (66) static internal options (constant) init (
"^/-set_keys must be followed by at least one pair of key bindings.");
%page;
dcl addr builtin;
dcl after builtin;
dcl arg char (arg_length) based (arg_ptr);
dcl arg_length fixed bin (21);
dcl arg_ptr ptr;
dcl argument_number fixed bin;
%skip(1);
dcl backup_necessary bit (1) aligned;
dcl 1 based_display_arg_results like display_arg_results based (based_display_arg_results_ptr);
dcl based_display_arg_results_ptr ptr;
dcl before builtin;
dcl beginning_page_number fixed bin;
dcl bit_count fixed bin (24);
%skip(1);
dcl code fixed bin (35);
dcl column_number fixed bin;
dcl convert builtin;
dcl current_arg fixed bin;
dcl cv_dec_check_ entry (char(*), fixed bin(35)) returns(fixed bin(35));
%skip(1);
dcl divide builtin;
%skip(1);
dcl ending_page_number fixed bin;
dcl entry_name char (32);
dcl error_table_$bad_arg fixed bin(35) ext static;
dcl error_table_$bad_conversion fixed bin(35) ext static;
dcl error_table_$badopt fixed bin(35) ext static;
dcl error_table_$inconsistent fixed bin(35) ext static;
dcl error_table_$no_operation fixed bin(35) ext static;
dcl error_table_$no_table fixed bin(35) ext static;
dcl error_table_$notadir fixed bin(35) ext static;
dcl expand_pathname_ entry (char(*), char(*), char(*), fixed bin(35));
%skip(1);
dcl first_page_number_supplied bit (1) aligned;
dcl function_keys_can_be_used bit (1) aligned;
%skip(1);
dcl generate_right_margin_position bit (1) aligned;
%skip(1);
dcl hbound builtin;
dcl hcs_$status_minf entry (char(*), char(*), fixed bin(1), fixed bin(2), fixed bin(24), fixed bin(35));
%skip(1);
dcl index builtin;
dcl ioa_$ioa_switch entry() options(variable);
dcl iox_$control entry (ptr, char(*), ptr, fixed bin(35));
dcl iox_$error_output ptr ext static;
dcl iox_$user_io ptr ext static;
%skip(1);
dcl largest_page_number fixed bin;
dcl lcb_ptr ptr;
dcl linus_display_scroll$set_fkey entry (ptr, char(*), char(*), fixed bin(35));
dcl linus_error_$bad_fkey_name fixed bin(35) ext static;
dcl linus_error_$bad_fkey_sequence fixed bin(35) ext static;
dcl linus_error_$bad_option_identifier fixed bin(35) ext static;
dcl linus_error_$bad_report_setup fixed bin(35) ext static;
dcl linus_options$check_identifier entry (ptr, char(*) var, char(*) var, char(*) var, fixed bin(35));
dcl linus_options$get entry (ptr, char(*) var, char(*) var, char(*) var, char(*) var, fixed bin(35));
dcl 1 local_terminal_info like terminal_info;
dcl loop fixed bin;
dcl loop1 fixed bin;
dcl loop2 fixed bin;
dcl loop3 fixed bin;
%skip(1);
dcl next_column_name_found bit (1) aligned;
dcl no_of_args_supplied fixed bin;
dcl normalized_option_name char (MAXIMUM_NORMALIZED_OPTION_NAME_LENGTH) varying;
dcl not_found bit (1) aligned;
dcl null builtin;
%skip(1);
dcl option_value char (32) varying;
%skip(1);
/* To change this table also change the ARGUMENT_NAME_TABLE table. */
%skip(1);
dcl process_arg_procs (55) entry init (

process_all,		 /* "-a" */
process_all,		 /* "-all" */
process_brief,		 /* "-bf" */
process_brief,		 /* "-brief" */
process_character_positions,	 /* "-character_positions" */
process_character_positions,	 /* "-chpsn" */
process_debug,		 /* "-debug" */
process_discard_report,	 /* "-discard_report" */
process_discard_retrieval,	 /* "-discard_retrieval" */
process_discard_retrieval,	 /* "-dsr" */
process_discard_report,	 /* "-dsrp" */
process_enable_escape_keys,	 /* "-eek" */
process_enable_function_keys,	 /* "-efk" */
process_enable_escape_keys,	 /* "-enable_escape_keys" */
process_enable_function_keys,	 /* "-enable_function_keys" */
process_extend,		 /* "-extend" */
process_window,		 /* "-io_switch" */
process_window,		 /* "-iosw" */
process_keep_report,	 /* "-keep_report" */
process_keep_retrieval,	 /* "-keep_retrieval" */
process_keep_retrieval,	 /* "-kr" */
process_keep_report,	 /* "-krp" */
process_long,		 /* "-lg" */
process_long,		 /* "-long" */
process_new_report,		 /* "-new_report" */
process_new_retrieval,	 /* "-new_retrieval" */
process_new_retrieval,	 /* "-nr" */
process_new_report,		 /* "-nrp" */
process_output_file,	 /* "-of" */
process_old_report,		 /* "-old_report" */
process_old_retrieval,	 /* "-old_retrieval" */
process_old_retrieval,	 /* "-or" */
process_old_report,		 /* "-orp" */
process_output_switch,	 /* "-osw" */
process_output_file,	 /* "-output_file" */
process_output_switch,	 /* "-output_switch" */
process_pages,		 /* "-page" */
process_pages,		 /* "-pages" */
process_passes,		 /* "-pass" */
process_passes,		 /* "-passes" */
process_pages,		 /* "-pg" */
process_pages,		 /* "-pgs" */
process_scroll,		 /* "-scroll" */
process_set_keys,	 	 /* "-set_key" */
process_set_keys,	 	 /* "-set_keys" */
process_set_keys,	 	 /* "-sk" */
process_set_keys,	 	 /* "-sks" */
process_sort,		 /* "-sort" */
process_truncate,		 /* "-tc" */
process_temp_dir,		 /* "-td" */
process_temp_dir,		 /* "-temp_dir" */
process_time,		 /* "-time" */
process_truncate,		 /* "-truncate" */
process_window,		 /* "-win" */
process_window		 /* "-window" */
);
%skip(1);
dcl rtrim builtin;
%skip(1);
dcl sci_ptr ptr;
dcl smallest_page_number fixed bin;
dcl sort_bit_map (no_of_candidate_columns) bit (1) based (sort_bit_map_ptr);
dcl sort_bit_map_ptr ptr;
dcl ssu_$abort_line entry() options(variable);
dcl ssu_$arg_count entry (ptr, fixed bin);
dcl ssu_$arg_ptr entry (ptr, fixed bin, ptr, fixed bin(21));
dcl still_processing_additional_sort_args bit (1) aligned;
dcl still_processing_args bit (1) aligned;
dcl still_processing_page_numbers bit (1) aligned;
dcl still_processing_set_key_args bit (1) aligned;
dcl still_processing_sort_specs bit (1) aligned;
dcl substr builtin;
dcl sys_info$max_seg_size fixed bin(35) ext static;
%skip(1);
dcl temporary_dir_name char (168);
dcl test_string char (8) varying;
dcl the_area area (sys_info$max_seg_size) based (the_area_ptr);
dcl the_area_ptr ptr;
dcl the_column_name char (MAXIMUM_NORMALIZED_OPTION_NAME_LENGTH) varying;
dcl time1 float bin (63);
dcl time2 float bin (63);
dcl type fixed bin (2);
%skip(1);
dcl unspec builtin;
dcl ttt_info_$function_key_data entry (char(*), ptr, ptr, fixed bin(35));
%skip(1);
dcl vclock builtin;
dcl verify builtin;
dcl video_et_$unable_to_call_wsys fixed bin(35) ext static;
%skip(1);
dcl window_system_cant_be_used bit (1) aligned;
%page;
%include arg_descriptor;
%page;
%include arg_list;
%page;
%include function_key_data;
%page;
%include linus_display_arg_list;
%page;
%include linus_format_options;
%page;
%include linus_options_extents;
%page;
%include linus_scroll_info;
%page;
%include linus_sort_info;
%page;
%include linus_table_info;
%skip(1);
%page;
%include terminal_info;
%skip(1);
     end linus_display_process_args;
