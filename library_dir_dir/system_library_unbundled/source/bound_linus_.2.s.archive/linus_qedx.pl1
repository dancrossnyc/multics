/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* format: off */
%skip(3);
/*   This is the main level procedure called by ssu_ to implement the
     linus qedx request. Description and usage follows.

     Description:

     This request allows a user to edit the current query or a new query
     through the qedx editor.
     
     Usage: qedx -new | -old

     The control argument -new specifies that the user should start off with
     an empty query. The control argument -old specifies that the user should
     use the existing query. -old is the default.

     Both parameters are passed to this request by ssu_.

     Known Bugs:

     Other Problems:

     History:

     Written - Al Dupuis - August 1983

*/
%page;
linus_qedx: proc (

	sci_ptr_parm,   /* input: ptr to the subsystem control info structure */
	lcb_ptr_parm    /* input: ptr to the linus control block info structure */
		     );
%skip(1);
dcl sci_ptr_parm ptr parm;
dcl lcb_ptr_parm ptr parm;
%skip(1);
/*
     Mainline Processing Overview:

     (1) Check to make sure a data base is open. Process control args.

     (2) Get the subroutine to qedx the query.
*/
%skip(1);
	call initialize;
%skip(1);
	call linus_qedx_the_query (lcb_ptr, new_or_old_query_flag);
%skip(1);
	return;
%page;
initialize: proc;
%skip(3);
	sci_ptr = sci_ptr_parm;
	lcb_ptr = lcb_ptr_parm;
%skip(1);
	if lcb.db_index = 0
	then call ssu_$abort_line (sci_ptr, linus_error_$no_db);
%skip(1);
	new_or_old_query_flag = OFF;
%skip(1);
	call ssu_$arg_count (sci_ptr, number_of_args_supplied);
	if number_of_args_supplied = 0
	then return;
%skip(1);
	do current_arg_number = 1 to number_of_args_supplied;
	     call ssu_$arg_ptr (sci_ptr, current_arg_number, arg_ptr, arg_length);
	     if arg = "-new"
	     then new_or_old_query_flag = ON;
	     else if arg = "-old"
		then new_or_old_query_flag = OFF;
	          else call ssu_$abort_line (sci_ptr, error_table_$badopt,
		     "^/Unrecognized control argument ^a.", arg);
	end;
%skip(1);
          return;
%skip(1);
     end initialize;
%page;
dcl OFF bit (1) aligned static internal options (constant) init ("0"b);
dcl ON bit (1) aligned static internal options (constant) init ("1"b);
%skip(1);
dcl addr builtin;
dcl arg char (arg_length) based (arg_ptr);
dcl arg_length fixed bin (21);
dcl arg_ptr ptr;
%skip(1);
dcl current_arg_number fixed bin;
%skip(1);
dcl error_table_$badopt fixed bin(35) ext static;
%skip(1);
dcl fixed builtin;
%skip(1);
dcl linus_error_$no_db fixed bin(35) ext static;
dcl linus_qedx_the_query entry (ptr, bit(1) aligned);
%skip(1);
dcl new_or_old_query_flag bit (1) aligned;
dcl number_of_args_supplied fixed bin;
%skip(1);
dcl rel builtin;
%skip(1);
dcl sci_ptr ptr;
dcl ssu_$abort_line entry() options(variable);
dcl ssu_$arg_count entry (ptr, fixed bin);
dcl ssu_$arg_ptr entry (ptr, fixed bin, ptr, fixed bin(21));
dcl sys_info$max_seg_size fixed bin(35) ext static;
%page;
%include linus_lcb;
%skip(3);
     end linus_qedx;
