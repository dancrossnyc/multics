/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */
/****^  HISTORY COMMENTS:
  1) change(86-01-07,Dupuis), approve(86-05-23,MCR7404), audit(86-07-23,GWMay),
     install(86-07-29,MR12.0-1106):
     /*   This is the main level procedure called by ssu_ to implement the
     linus opened_database request.
                                                   END HISTORY COMMENTS */
/*
     Description:

     This request returns true or false to indicate if a databse is opened
     or closed.
     
     Usage: "opened_database {database_pathname}"

     where database_pathname is the name of a mrds database. If this 
     isn't supplied, true is returned if a database is currently opened.
*/
/* format: off */
%page;
linus_opened_database: proc (

	sci_ptr_parm,   /* input: ptr to the subsystem control info structure */
	lcb_ptr_parm    /* input: ptr to the linus control block info structure */
		     );
%skip(1);
dcl lcb_ptr_parm ptr parm;
dcl sci_ptr_parm ptr parm;
%skip(1);
	call initialize;
	call check_for_opened_database;
%skip(1);
	return;
%page;
check_for_opened_database: proc;
%skip(1);
dcl cfod_code fixed bin (35);
dcl cfod_dir_name_1 char (168);
dcl cfod_dir_name_2 char (168);
dcl cfod_entry_name_1 char (32);
dcl cfod_entry_name_2 char (32);
dcl cfod_db_pathname char (168) varying;
dcl cfod_opening_mode char (20);
dcl cfod_suffix char (3);
dcl cfod_uid_1 bit (36) aligned;
dcl cfod_uid_2 bit (36) aligned;
%skip(1);
	if number_of_args_supplied = 0 | lcb.db_index = 0
	then do;
	     if lcb.db_index ^= 0
	     then return_value = "true";
	     return;
	end;
%skip(1);
	call dsl_$get_pn (lcb.db_index, cfod_db_pathname, cfod_opening_mode, cfod_code);
	if cfod_code ^= 0
	then call ssu_$abort_line (sci_ptr, cfod_code,
	     "^/Unable to get the database pathname.");

	call expand_pathname_ ((cfod_db_pathname), cfod_dir_name_1, cfod_entry_name_1, (0));
	call hcs_$get_uid_file (cfod_dir_name_1, cfod_entry_name_1, cfod_uid_1, cfod_code);
	if cfod_code ^= 0
	then call ssu_$abort_line (sci_ptr, cfod_code,
	     "^/Unable to get the uid of the opened database.");
%skip(1);
	call ssu_$arg_ptr (sci_ptr, 1, arg_ptr, arg_length);
	cfod_suffix = reverse (before (reverse (arg), "."));
	call expand_pathname_$add_suffix (arg, cfod_suffix,
	     cfod_dir_name_2, cfod_entry_name_2, cfod_code);
	if cfod_code ^= 0
	then call ssu_$abort_line (sci_ptr, cfod_code, 
	     "^/^a could not be expanded.", arg);
	call hcs_$get_uid_file (cfod_dir_name_2, cfod_entry_name_2, cfod_uid_2, cfod_code);
	if cfod_code ^= 0
	then if cfod_code = error_table_$noentry
	     then return;
	     else call ssu_$abort_line (sci_ptr, cfod_code,
		"^/Unable to get the uid for the supplied arg pathname.");
	if cfod_uid_1 = cfod_uid_2
	then return_value = "true";
%skip(1);
	return;
%skip(1);
     end check_for_opened_database;
%page;
initialize: proc;
%skip(1);
	sci_ptr = sci_ptr_parm;
	lcb_ptr = lcb_ptr_parm;
%skip(1);
	call ssu_$return_arg (sci_ptr, number_of_args_supplied,
	     active_request_flag, return_value_ptr, return_value_length);
	return_value = "false";
	if number_of_args_supplied > 1
	then call ssu_$abort_line (sci_ptr, error_table_$too_many_args, USAGE_MESSAGE);
%skip(1);
          return;
%skip(1);
     end initialize;
%page;
dcl USAGE_MESSAGE char (44) internal static options (constant) init (
"^/Usage: opened_database {database_pathname}");
%skip(1);
dcl active_request_flag bit (1) aligned;
dcl addr builtin;
dcl after builtin;
dcl arg char (arg_length) based (arg_ptr);
dcl arg_length fixed bin (21);
dcl arg_ptr ptr;
%skip(1);
dcl before builtin;
%skip(1);
dcl dsl_$get_pn entry (fixed bin(35), char(168) var, char(20), fixed bin(35));
%skip(1);
dcl error_table_$noentry fixed bin(35) ext static;
dcl error_table_$too_many_args fixed bin(35) ext static;
dcl expand_pathname_ entry (char(*), char(*), char(*), fixed bin(35));
dcl expand_pathname_$add_suffix entry (char(*), char(*), char(*), char(*), fixed bin(35));
%skip(1);
dcl fixed builtin;
%skip(1);
dcl hcs_$get_uid_file entry (char(*), char(*), bit(36) aligned, fixed bin(35));
%skip(1);
dcl index builtin;
%skip(1);
dcl number_of_args_supplied fixed bin;
%skip(1);
dcl rel builtin;
dcl return_value char (return_value_length) varying based (return_value_ptr);
dcl return_value_length fixed bin (21);
dcl return_value_ptr ptr;
dcl reverse builtin;
%skip(1);
dcl sci_ptr ptr;
dcl ssu_$abort_line entry() options(variable);
dcl ssu_$arg_ptr entry (ptr, fixed bin, ptr, fixed bin(21));
dcl ssu_$return_arg entry (ptr, fixed bin, bit(1) aligned, ptr, fixed bin(21));
dcl sys_info$max_seg_size fixed bin(35) ext static;
%skip(1);
%page;
%include linus_lcb;
%skip(1);
     end linus_opened_database;
