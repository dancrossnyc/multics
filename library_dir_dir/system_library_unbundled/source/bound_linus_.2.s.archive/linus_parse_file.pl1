/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* format: off */
%skip(3);
/*   This is the subroutine called by the linus store and store_from_data_file
     requests to implement the file parsing. Description and usage follows.

     Description:

     This subroutine has the following entrypoints.

     start
     called as the first thing the request does.

     Usage: "call linus_parse_file$start (lcb_ptr, addr (data_file_info), 
             table_info_ptr, code);"

     stop
     called as the last thing the request does.

     Usage: "call linus_parse_file$stop (lcb_ptr, addr (data_file_info), 
	   table_info_ptr, cleanup_signalled, code);"

     get_row
     called to get a row from the file and place in row value slot.

     Usage: "call linus_parse_file$get_row (lcb_ptr, addr (data_file_info), 
	   table_info_ptr, row_value_ptr, code);"

     Known Bugs:

     Other Problems:

     History:

     Written - Al Dupuis - September 1983.

*/
%page;
linus_parse_file: proc;
%skip(3);
	/* These parms are described at each entry where they are used. */
%skip(3);
dcl code_parm fixed bin (35) parm;
dcl cleanup_signalled_parm bit (1) aligned parm;
dcl data_file_info_ptr_parm ptr parm;
dcl lcb_ptr_parm ptr parm;
dcl row_value_ptr_parm ptr parm;
dcl table_info_ptr_parm ptr parm;
%skip(3);
	return;
%page;
get_row: entry (

	lcb_ptr_parm,	     /* input: ptr to the linus control block */
	data_file_info_ptr_parm, /* input: ptr to data_file_info structure */
	table_info_ptr_parm,     /* input: ptr to table_info structure */
	row_value_ptr_parm,	     /* input: ptr to row value char string */
	code_parm		     /* output: success or failure */
	  );
%skip(1);
	lcb_ptr = lcb_ptr_parm;
	file_info_ptr = data_file_info_ptr_parm;
	table_ip = table_info_ptr_parm;
	row_value_p = row_value_ptr_parm;
	code_parm = 0;
%skip(1);
	call fill_the_buffer (code_parm);
	if code_parm = 0
	then call get_the_row (code_parm);
%skip(1);
	return;
%page;
start: entry (

	lcb_ptr_parm,	     /* input: ptr to the linus control block */
	data_file_info_ptr_parm, /* input: ptr to data_file_info structure */
	table_info_ptr_parm,     /* input: ptr to table_info structure */
	code_parm		     /* output: success or failure */
	  );
%skip(1);
	lcb_ptr = lcb_ptr_parm;
	file_info_ptr = data_file_info_ptr_parm;
	table_ip = table_info_ptr_parm;
	code_parm = 0;
%skip(1);
	call start_parsing_file;
%skip(1);
	return;
%page;
stop: entry (

	lcb_ptr_parm,	     /* input: ptr to the linus control block */
	data_file_info_ptr_parm, /* input: ptr to data_file_info structure */
	table_info_ptr_parm,     /* input: ptr to table_info structure */
	cleanup_signalled_parm,  /* input: on if called by cleanup handler */
	code_parm		     /* output: success or failure */
	  );
%skip(1);
	lcb_ptr = lcb_ptr_parm;
	file_info_ptr = data_file_info_ptr_parm;
	table_ip = table_info_ptr_parm;
	cleanup_signalled = cleanup_signalled_parm;
	code_parm = 0;
%skip(1);
	call stop_parsing_file;
%skip(1);
	return;
%page;
fill_the_buffer: proc (

	ftb_code_parm	/* output: success or failure */
		         );
%skip(1);
dcl ftb_code fixed bin (35);
dcl ftb_code_parm fixed bin (35) parm;
dcl ftb_current_file_buffer_length fixed bin (21);
dcl ftb_file_buffer_ptr ptr;
dcl ftb_number_of_chars_available_in_buffer fixed bin (21);
dcl ftb_number_of_chars_read fixed bin (21);
%skip(1);
	ftb_code_parm = 0;
%skip(1);
	sci_ptr = lcb.subsystem_control_info_ptr;
	work_area_ptr = addr (lcb.static_area);
	the_row_delimiter = file_info.row_delimiter;
	the_column_delimiter = file_info.column_delimiter;
%skip(1);
	if file_info.current_char_in_previous_buffer ^= 0
	then do;
	     file_buffer = substr (file_buffer, file_info.current_char_in_previous_buffer);
	     file_info.current_char_in_previous_buffer = 0;
	end;
	else file_buffer = "";
%skip(1);
	if file_info.flags.end_of_file_has_been_hit
	then do;
	     if length (file_buffer) = 0
	     then ftb_code_parm = error_table_$end_of_info;
	     return;
	end;
%skip(1);
	ftb_current_file_buffer_length = length (file_buffer);
	ftb_number_of_chars_available_in_buffer
	     = file_info.file_buffer_length - ftb_current_file_buffer_length;
	if ftb_number_of_chars_available_in_buffer < 1
	then return;
%skip(1);
	ftb_file_buffer_ptr = addcharno (addrel (file_info.file_buffer_ptr, 1),
	     ftb_current_file_buffer_length);
	call iox_$get_chars (file_info.file_iocb_ptr, ftb_file_buffer_ptr,
	     ftb_number_of_chars_available_in_buffer,
	     ftb_number_of_chars_read, ftb_code);
	file_info.file_buffer_ptr -> file_buffer_length_word
	     = ftb_number_of_chars_read + ftb_current_file_buffer_length;
	if ftb_code ^= 0 & ftb_code ^= error_table_$short_record
	then if ftb_code = error_table_$end_of_info
	     then do;
		if ftb_number_of_chars_read = 0 & ftb_current_file_buffer_length = 0
		then ftb_code_parm = error_table_$end_of_info;
		file_info.flags.end_of_file_has_been_hit = ON;
	     end;
	     else call ssu_$abort_line (sci_ptr, ftb_code);
	else;
%skip(1);
	return;
%skip(1);
     end fill_the_buffer;
%page;
get_the_row: proc (

	gtr_code_parm /* output: success or failure */
	        );
%skip(1);
dcl gtr_code_parm fixed bin (35) parm;
dcl gtr_column_delimiter_was_found bit (1) aligned;
dcl gtr_current_column_number fixed bin;
dcl gtr_current_row_number fixed bin;
dcl gtr_end_of_buffer fixed bin (21);
dcl gtr_in_a_quoted_string bit (1) aligned;
dcl gtr_last_column_processed fixed bin;
dcl gtr_maximum_column_length fixed bin (21);
dcl gtr_number_of_columns fixed bin;
dcl gtr_processing_quotes bit (1) aligned;
dcl gtr_processing_whitespace bit (1) aligned;
dcl gtr_row_delimiter_was_found bit (1) aligned;
dcl gtr_still_processing_the_row bit (1) aligned;
%skip(1);
	gtr_code_parm = 0;
%skip(1);
	if length (file_buffer) = 0
	then do;
	     gtr_code_parm = error_table_$end_of_info;
	     if file_info.current_row_number = 0
	     then call ssu_$abort_line (sci_ptr, linus_error_$bad_file_process,
		PROBLEM_LINE_NUMBER_MESSAGE
		|| PROBLEM_ROW_NUMBER_MESSAGE
		||"^/The file ^a is empty.",
		file_info.current_line_number, file_info.current_row_number,
		file_info.directory_name || ">" || file_info.entry_name);
	     return;
	end;
%skip(1);
	gtr_current_row_number = file_info.current_row_number;
	file_info.current_char_in_buffer = 1;
	gtr_end_of_buffer = length (file_buffer);
	gtr_number_of_columns = table_info.column_count;
	gtr_row_delimiter_was_found = OFF;
	gtr_processing_quotes = file_info.flags.process_quotes;
	gtr_processing_whitespace = file_info.flags.process_whitespace;
	gtr_still_processing_the_row = ON;
%skip(1);
	do gtr_current_column_number = 1 to gtr_number_of_columns
	     while (gtr_still_processing_the_row);
	     call get_column (gtr_current_row_number, gtr_current_column_number);
	     gtr_maximum_column_length = table_info.columns.column_length (gtr_current_column_number);
	     if length (column_buffer) > gtr_maximum_column_length
	     then do;
		call ssu_$print_message (sci_ptr, 0,
		     "Warning: the value ""^a"" ^/for the ""^a"" column will be truncated to ^d characters.",
		     column_buffer, table_info.columns.column_name (
		     gtr_current_column_number), gtr_maximum_column_length);
		substr (row_value, table_info.columns.column_index (gtr_current_column_number),
		     table_info.columns.column_length (gtr_current_column_number))
		     = substr (column_buffer, 1, gtr_maximum_column_length);
	     end;
	     else substr (row_value, table_info.columns.column_index (gtr_current_column_number),
		table_info.columns.column_length (gtr_current_column_number))
		= column_buffer;
	     gtr_last_column_processed = gtr_current_column_number;
	end;
%skip(1);
	if gtr_last_column_processed ^= gtr_number_of_columns
	then call ssu_$abort_line (sci_ptr, linus_error_$bad_file_process,
	     PROBLEM_LINE_NUMBER_MESSAGE
	     || PROBLEM_ROW_NUMBER_MESSAGE
	     || PROBLEM_COLUMN_NAME_MESSAGE
	     || "^/There were ^d columns expected but only ^d were found."
	     || PROBLEM_ROW_VALUE_MESSAGE,
	     file_info.current_line_number, file_info.current_row_number,
	     table_info.columns.column_name (gtr_last_column_processed + 1),
	     gtr_number_of_columns, gtr_last_column_processed,
	     substr (file_buffer, 1, file_info.current_char_in_buffer - 1));
	else if ^gtr_row_delimiter_was_found
	     then do;
		if file_info.current_char_in_buffer ^> gtr_end_of_buffer
		then if substr (file_buffer, file_info.
		     current_char_in_buffer, 1) = the_row_delimiter
		     then do;
			gtr_row_delimiter_was_found = ON;
			file_info.current_char_in_buffer
			     = file_info.current_char_in_buffer + 1;
			if the_row_delimiter = NEWLINE
			then file_info.current_line_number
			     = file_info.current_line_number + 1;
		     end;
		     else;
		else;
		if ^gtr_row_delimiter_was_found
		     then call ssu_$abort_line (sci_ptr, linus_error_$bad_file_process,
		     PROBLEM_LINE_NUMBER_MESSAGE
		     || PROBLEM_ROW_NUMBER_MESSAGE
		     || MISSING_ROW_DELIMITER_MESSAGE
		     || PROBLEM_ROW_VALUE_MESSAGE,
		     file_info.current_line_number, file_info.current_row_number,
		     table_info.columns.column_name (gtr_number_of_columns),
		     substr (file_buffer, 1, file_info.current_char_in_buffer - 1));
	     end;
	     else if ^gtr_column_delimiter_was_found
		then if ^file_info.flags.last_column_delimiter_is_optional
		     then call ssu_$abort_line (sci_ptr, linus_error_$bad_file_process,
		          PROBLEM_LINE_NUMBER_MESSAGE
		          || PROBLEM_ROW_NUMBER_MESSAGE
		          || MISSING_COLUMN_DELIMITER_MESSAGE
		          || PROBLEM_ROW_VALUE_MESSAGE,
		          file_info.current_line_number, file_info.current_row_number,
		          table_info.columns.column_name (gtr_number_of_columns),
		          substr (file_buffer, 1, file_info.current_char_in_buffer - 1));
	               else;
		else;
%skip(1);
	if file_info.current_char_in_buffer <= gtr_end_of_buffer
	then file_info.current_char_in_previous_buffer = file_info.current_char_in_buffer;
	else file_info.current_char_in_previous_buffer = 0;
%skip(1);
	file_info.current_row_number = file_info.current_row_number + 1;
%skip(1);
	return;
%page;
get_column: proc (

	gc_row_number_parm,    /* input: number of our current row */
	gc_column_number_parm  /* input: number of our current column */
	       );
%skip(1);
dcl gc_column_number_parm fixed bin parm;
dcl gc_current_char char (1);
dcl gc_current_position fixed bin (21);
dcl gc_maximum_reasonable_column_length fixed bin (21);
dcl gc_row_number_parm fixed bin parm;
dcl gc_starting_position fixed bin (21);
dcl gc_still_getting_the_column bit (1) aligned;
%skip(1);
	gc_starting_position = file_info.current_char_in_buffer;
	gc_current_position = gc_starting_position;
	gc_maximum_reasonable_column_length
	     = table_info.columns.column_length (gc_column_number_parm) * 2 + 2;
	gtr_column_delimiter_was_found = OFF;
	column_buffer = "";
%skip(1);
	if gc_current_position > gtr_end_of_buffer
	then call ssu_$abort_line (sci_ptr, linus_error_$bad_file_process,
	     PROBLEM_LINE_NUMBER_MESSAGE
	     || PROBLEM_ROW_NUMBER_MESSAGE
	     || PROBLEM_COLUMN_NAME_MESSAGE
	     || MAXIMUM_CHARACTERS_FOR_A_ROW_MESSAGE
	     || NUMBER_OF_CHARACTERS_ALREADY_PROCESSED_MESSAGE
	     || PROBLEM_ROW_VALUE_MESSAGE,
	     file_info.current_line_number, file_info.current_row_number,
	     table_info.columns.column_name (gc_column_number_parm),
	     file_info.file_buffer_length, file_info.file_buffer_length,
	     substr (file_buffer, 1, gc_current_position));
%skip(1);
	gc_still_getting_the_column = ON;
	gtr_in_a_quoted_string = OFF;
%skip(1);
	do while (gc_still_getting_the_column);
%skip(1);
	     gc_current_char = substr (file_buffer, gc_current_position, 1);
%skip(1);
	     if gc_current_char = QUOTE & gtr_processing_quotes
	     then call current_char_is_a_quote;
	     else if gc_current_char = the_column_delimiter
		then call current_char_is_the_column_delimiter;
	          else if gc_current_char = the_row_delimiter
		     then call current_char_is_the_row_delimiter;
		     else column_buffer = column_buffer || gc_current_char;
%skip(1);
	     gc_current_position = gc_current_position + 1;
%skip(1);
	     if gc_still_getting_the_column
	     then do;
		if gc_current_position > gtr_end_of_buffer
		then gc_still_getting_the_column = OFF;
		else if gc_current_position - gc_starting_position - 1
		     > gc_maximum_reasonable_column_length
		     then call ssu_$abort_line (sci_ptr, linus_error_$bad_file_process,
		     PROBLEM_LINE_NUMBER_MESSAGE
		     || PROBLEM_ROW_NUMBER_MESSAGE
		     || PROBLEM_COLUMN_NAME_MESSAGE
		     || MAXIMUM_CHARACTERS_FOR_A_COLUMN_MESSAGE
		     || NUMBER_OF_CHARACTERS_ALREADY_PROCESSED_MESSAGE
		     || PROBLEM_ROW_VALUE_MESSAGE,
		     file_info.current_line_number, file_info.current_row_number,
		     table_info.columns.column_name (gc_column_number_parm),
		     gc_maximum_reasonable_column_length, gc_maximum_reasonable_column_length,
		     substr (file_buffer, 1, gc_current_position - 1));
		     else;
	     end;
	     else if gc_starting_position = gc_current_position
		then call ssu_$abort_line (sci_ptr, linus_error_$bad_file_process,
		     PROBLEM_LINE_NUMBER_MESSAGE
		     || PROBLEM_ROW_NUMBER_MESSAGE
		     || "^/There were ^d columns expected but only ^d were found."
		     || PROBLEM_ROW_VALUE_MESSAGE,
		     file_info.current_line_number, file_info.current_row_number,
		     gtr_number_of_columns, gc_column_number_parm - 1,
		     substr (file_buffer, 1, gc_current_position - 1));
	          else;
%skip(1);
	     if gc_current_char = NEWLINE
	     then file_info.current_line_number = file_info.current_line_number + 1;
%skip(1);
	end;
%skip(1);
	file_info.current_char_in_buffer = gc_current_position;
%skip(1);
	return;
%page;
current_char_is_a_quote: proc;
%skip(1);
	if gtr_in_a_quoted_string
	then do;
	     if gc_current_position + 1 ^> gtr_end_of_buffer
	     then do;
		if substr (file_buffer, gc_current_position + 1, 1) = QUOTE
		then do;
		     gc_current_position = gc_current_position + 1;
		     column_buffer = column_buffer || QUOTE;
		end;
		else gtr_in_a_quoted_string = OFF;
	     end;
	     else gtr_in_a_quoted_string = OFF;
	end;
	else gtr_in_a_quoted_string = ON;
%skip(1);
	return;
%skip(1);
     end current_char_is_a_quote;
%page;
current_char_is_the_column_delimiter: proc;
%skip(1);
dcl ccitcd_still_processing_whitespace bit (1) aligned;
%skip(1);
	if gtr_in_a_quoted_string
	then do;
	     column_buffer = column_buffer || gc_current_char;
	     return;
	end;
%skip(1);
	gtr_column_delimiter_was_found = ON;
	gc_still_getting_the_column = OFF;
%skip(1);
	if gtr_processing_whitespace
	then do;
	     ccitcd_still_processing_whitespace = ON;
	     do while (ccitcd_still_processing_whitespace);
		if gc_current_position + 1 ^> gtr_end_of_buffer
		then do;
		     if search (substr (file_buffer, gc_current_position + 1, 1), WHITESPACE) ^= 0
		     then gc_current_position = gc_current_position + 1;
		     else ccitcd_still_processing_whitespace = OFF;
		end;
		else ccitcd_still_processing_whitespace = OFF;
	     end;
	end;
%skip(1);
	return;
%skip(1);
     end current_char_is_the_column_delimiter;
%page;
current_char_is_the_row_delimiter: proc;
%skip(1);
	if gtr_in_a_quoted_string
	then column_buffer = column_buffer || gc_current_char;
	else do;
	     gtr_still_processing_the_row = OFF;
	     gc_still_getting_the_column = OFF;
	     gtr_row_delimiter_was_found = ON;
	end;
%skip(1);
	return;
%skip(1);
     end current_char_is_the_row_delimiter;
%skip(1);
     end get_column;
%skip(3);
     end get_the_row;
%page;
start_parsing_file: proc;
%skip(1);
dcl spf_code fixed bin (35);
%skip(1);
	sci_ptr = lcb.subsystem_control_info_ptr;
	work_area_ptr = addr (lcb.static_area);
%skip(1);
	file_info.flags.file_is_attached = OFF;
	file_info.flags.file_is_opened = OFF;
	file_info.flags.end_of_file_has_been_hit = OFF;
	file_info.current_row_number = 1;
	file_info.current_line_number = 1;
	file_info.current_char_in_buffer = 1;
	file_info.current_char_in_previous_buffer = 0;
	file_info.file_iocb_ptr = null;
	file_info.file_buffer_ptr = null;
%skip(1);
	call expand_pathname_ (file_info.output_file_pathname, 
	     file_info.directory_name, file_info.entry_name, spf_code);
	if spf_code ^= 0
	then call ssu_$abort_line (sci_ptr, spf_code,
	     "^/While trying to expand the output file pathname ^a.",
	     file_info.output_file_pathname);
%skip(1);
	switch_name = unique_chars_ ("0"b) || ".parse_file";
	attach_description = "vfile_ "
	     || rtrim (file_info.directory_name) || ">" || rtrim (file_info.entry_name);
%skip(1);
	call iox_$attach_name (switch_name, file_info.file_iocb_ptr,
	     attach_description, null, spf_code);
	if spf_code ^= 0
	then call ssu_$abort_line (sci_ptr, spf_code,
	     "While trying to attach file ^a in dir ^a.",
	     rtrim (file_info.entry_name), rtrim (file_info.directory_name));
	file_info.flags.file_is_attached = ON;
%skip(1);
	call iox_$open (file_info.file_iocb_ptr, Stream_input, "0"b, spf_code);
	if spf_code ^= 0
	then call ssu_$abort_line (sci_ptr, spf_code,
	     "^/Unable to open file ^a in dir ^a.",
	     rtrim (file_info.entry_name), rtrim (file_info.directory_name));
	file_info.flags.file_is_opened = ON;
%skip(1);
	file_info.file_buffer_length
	     = (table_info.row_value_length * 2) + (table_info.column_count * 2);
	allocate file_buffer in (work_area) set (file_info.file_buffer_ptr);
	file_buffer = "";
%skip(1);
	return;
%skip(1);
     end start_parsing_file;
%page;
stop_parsing_file: proc;
%skip(1);
dcl spf_code fixed bin (35);
%skip(1);
	sci_ptr = lcb.subsystem_control_info_ptr;
	work_area_ptr = addr (lcb.static_area);
%skip(1);
	if file_info.file_buffer_ptr ^= null
	then do;
	     free file_buffer;
	     file_info.file_buffer_ptr = null;
	end;
%skip(1);
	if file_info.flags.file_is_opened
	then do;
	     call iox_$close (file_info.file_iocb_ptr, spf_code);
	     if spf_code ^= 0 & ^cleanup_signalled
	     then call ssu_$print_message (sci_ptr, spf_code,
		"^/While trying to close ^a.", file_info.entry_name);
	     file_info.flags.file_is_opened = OFF;
	end;
	else;
%skip(1);
	if file_info.flags.file_is_attached
	then do;
	     call iox_$detach_iocb (file_info.file_iocb_ptr, spf_code);
	     if spf_code ^= 0 & ^cleanup_signalled
	     then call ssu_$print_message (sci_ptr, spf_code,
		"^/While trying to detach ^p.", file_info.file_iocb_ptr);
	     file_info.flags.file_is_attached = OFF;
	     call iox_$destroy_iocb (file_info.file_iocb_ptr, spf_code);
	     if spf_code ^= 0 & ^cleanup_signalled
	     then call ssu_$print_message (sci_ptr, spf_code,
		"^/While trying to destroy ^p.", file_info.file_iocb_ptr);
	end;
%skip(1);
	return;
%skip(1);
     end stop_parsing_file;
%page;
%skip(1);
dcl MAXIMUM_CHARACTERS_FOR_A_COLUMN_MESSAGE char (58) static internal options (constant) init (
"^/The column should have taken a maximum of ^d characters.");
%skip(1);
dcl MAXIMUM_CHARACTERS_FOR_A_ROW_MESSAGE char (55) static internal options (constant) init (
"^/The row should have taken a maximum of ^d characters.");
%skip(1);
dcl MAXIMUM_MRDS_ATTRIBUTE_LENGTH fixed bin internal static options (constant) init (4096);
%skip(1);
dcl MISSING_COLUMN_DELIMITER_MESSAGE char (66) static internal options (constant) init (
"^/The column delimiter character wasn't found after the ^a column.");
%skip(1);
dcl NUMBER_OF_CHARACTERS_ALREADY_PROCESSED_MESSAGE char (53) static internal options (constant) init (
"^/There were already ^d characters processed for it.");
%skip(1);
dcl OFF bit (1) aligned static internal options (constant) init ("0"b);
dcl ON bit (1) aligned static internal options (constant) init ("1"b);
%skip(1);
dcl MISSING_ROW_DELIMITER_MESSAGE char (63) static internal options (constant) init (
"^/The row delimiter character wasn't found after the ^a column.");
%skip(1);
dcl NEWLINE char (1) static internal options (constant) init ("
");
%skip(1);
dcl PROBLEM_COLUMN_NAME_MESSAGE char (61) static internal options (constant) init (
"^/The ^a column was being processed when the problem occured.");
%skip(1);
dcl PROBLEM_LINE_NUMBER_MESSAGE char (58) static internal options (constant) init (
"^/A problem was encountered on line ^d of the input file.");
%skip(1);
dcl PROBLEM_ROW_NUMBER_MESSAGE char (59) static internal options (constant) init (
"^/The current row about to be stored into the table was ^d.");
%skip(1);
dcl PROBLEM_ROW_VALUE_MESSAGE char (61) static internal options (constant) init (
"^/The row value collected at the time of the error was:^/""^a""");
%skip(1);
dcl QUOTE char (1) static internal options (constant) init ("""");
%skip(1);
/* WHITESPACE is BLANK, HORIZONTAL TAB, and VERTICAL TAB */
dcl WHITESPACE char (3) internal static options (constant) init (" 	");
%page;
dcl addcharno builtin;
dcl addr builtin;
dcl addrel builtin;
dcl attach_description char (256);
%skip(1);
dcl cleanup_signalled bit (1) aligned;
dcl column_buffer char (MAXIMUM_MRDS_ATTRIBUTE_LENGTH) varying;
%skip(1);
dcl error_table_$end_of_info fixed bin(35) ext static;
dcl error_table_$short_record fixed bin(35) ext static;
dcl expand_pathname_ entry (char(*), char(*), char(*), fixed bin(35));
%skip(1);
%skip(1);
dcl file_buffer char (file_info.file_buffer_length) varying based (file_info.file_buffer_ptr);
dcl file_buffer_length_word fixed bin (35) based;
dcl 1 file_info like data_file_info based (file_info_ptr);
dcl file_info_ptr ptr;
dcl fixed builtin;
%skip(1);
dcl length builtin;
dcl linus_error_$bad_file_process fixed bin(35) ext static;
%skip(1);
dcl null builtin;
%skip(1);
dcl rel builtin;
dcl rtrim builtin;
%skip(1);
dcl sci_ptr ptr;
dcl search builtin;
dcl ssu_$abort_line entry() options(variable);
dcl ssu_$print_message entry() options(variable);
dcl substr builtin;
dcl switch_name char (32);
dcl sys_info$max_seg_size fixed bin(35) ext static;
%skip(1);
dcl the_column_delimiter char (1);
dcl the_row_delimiter char (1);
%skip(1);
dcl unique_chars_ entry (bit(*)) returns(char(15));
%skip(1);
dcl work_area area (sys_info$max_seg_size) based (work_area_ptr);
dcl work_area_ptr ptr;
%page;
%include arg_descriptor;
%page;
%include arg_list;
%page;
%include iox_dcls;
%page;
%include iox_modes;
%page;
%include linus_data_file_info;
%page;
%include linus_lcb;
%page;
%include linus_table_info;
%skip(3);
     end linus_parse_file;
