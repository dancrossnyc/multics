/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* format: off */
%skip(3);
/*   This is the main level procedure called by ssu_ to implement the
     linus print_query request. Description and usage follows.

     Description:

     This request prints the query when called as a request, and returns the
     query when called as an active request.
     
     Usage: print_query or [print_query]

     Both parameters are passed to this request by ssu_.

     Known Bugs:

     Other Problems:

     History:

     Written - Al Dupuis - August 1983

*/
%page;
linus_print_query: proc (

	sci_ptr_parm,   /* input: ptr to the subsystem control info structure */
	lcb_ptr_parm    /* input: ptr to the linus control block info structure */
		     );
%skip(1);
dcl sci_ptr_parm ptr parm;
dcl lcb_ptr_parm ptr parm;
%skip(1);
/*
     Mainline Processing Overview:

     (1) Check to make sure a data base is open and get the current 
         query. 

     (2) Print or return it.
*/
%skip(1);
	call initialize;
	call print_or_return_the_query;
%skip(1);
	return;
%page;
initialize: proc;
%skip(3);
	sci_ptr = sci_ptr_parm;
	lcb_ptr = lcb_ptr_parm;
%skip(1);
	if lcb.db_index = 0
	then call ssu_$abort_line (sci_ptr, linus_error_$no_db);
%skip(1);
	call ssu_$return_arg (sci_ptr, number_of_args_supplied,
	     active_request, return_string_ptr, return_string_length);
	if number_of_args_supplied ^= 0
	then call ssu_$abort_line (sci_ptr, error_table_$too_many_args,
	     "^/This request does not accept any control arguments.");
%skip(1);
	call linus_query_mgr$get (lcb_ptr, query_segment_ptr,
	     query_segment_length, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code);
%skip(1);
          return;
%skip(1);
     end initialize;
%page;
print_or_return_the_query: proc;
%skip(3);
	if active_request
	then return_string = requote_string_ (query_segment);
	else do;
	     call iox_$put_chars (iox_$user_output,
		query_segment_ptr, query_segment_length, code);
	     if code ^= 0
	     then call ssu_$abort_line (sci_ptr, code);
	end;
%skip(1);
	return;
%skip(1);
     end print_or_return_the_query;
%page;
dcl active_request bit (1) aligned;
dcl addr builtin;
%skip(1);
dcl code fixed bin (35);
%skip(1);
dcl error_table_$too_many_args fixed bin(35) ext static;
%skip(1);
dcl fixed builtin;
%skip(1);
dcl iox_$put_chars entry (ptr, ptr, fixed bin(21), fixed bin(35));
dcl iox_$user_output ptr ext static;
%skip(1);
dcl linus_error_$no_db fixed bin(35) ext static;
dcl linus_query_mgr$get entry (ptr, ptr, fixed bin(21), fixed bin(35));
%skip(1);
dcl number_of_args_supplied fixed bin;
%skip(1);
dcl query_segment char (query_segment_length) based (query_segment_ptr);
dcl query_segment_length fixed bin (21);
dcl query_segment_ptr ptr;
%skip(1);
dcl rel builtin;
dcl requote_string_ entry (char (*)) returns (char (*));
dcl return_string char (return_string_length) varying based (return_string_ptr);
dcl return_string_length fixed bin (21);
dcl return_string_ptr ptr;
%skip(1);
dcl sci_ptr ptr;
dcl ssu_$abort_line entry() options(variable);
dcl ssu_$return_arg entry (ptr, fixed bin, bit(1) aligned, ptr, fixed bin(21));
dcl sys_info$max_seg_size fixed bin(35) ext static;
%page;
%include linus_lcb;
%skip(3);
     end linus_print_query;
