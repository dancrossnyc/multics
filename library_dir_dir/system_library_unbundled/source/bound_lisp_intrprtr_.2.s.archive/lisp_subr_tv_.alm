" **************************************************************
" *                                                            *
" * Copyright, (C) Massachusetts Institute of Technology, 1973 *
" *                                                            *
" **************************************************************
	name	lisp_subr_tv_

"	This segment of lisp is used to allow pointers from the
"	lisp environment, which is impure, to reference lisp subroutines.
"	It is a transfer vector, in which each entry is comprised of four
"	words -- a header word containing information about the subroutine,
"	one or two words of code, and a word which gives information to the
"	bootstrapping routine which generates the initial lisp environment.
"	It is important that modifications to this segment not change
"	the positions of the unchanged subroutine entry points, so that
"	a change or addition to the subroutines supported by lisp
"	does not have to invalidate the contents of previously generated saved
"	environments.
"
"	Three types of subroutine calls are handled here...the fast call
"	is just a transfer to the real entry point...see for example the subroutine
"	"cdr". The normal call is done by a tsx6 to the type_1_subr routine
"	which saves the return address and lp on the unmarked stack,
"	and then a transfer to the routine.  PL/I subroutines
"	are called by going through an interface routine...either pl1_fixup or
"	pl1_lsubr_fixup is used depending on the type of the subr.
"
"	It is important to realize that this segment will not work correctly if
"	not bound with the other alm modules in the lisp system.  It depends on the
"	two facts that:
"	     a) the binder coalesces the linkage sections of all of the
"	        component segments when binding, so that ab|system_lp,
"	        which is saved at entry to lisp, works for all alm modules
"	        which require a pointer to their linkage section.
"	     b) transfers to fast call subroutines will be altered by the linker
"	        to direct transfers, rather than going through links, so that
"	        lp need not be set at the time of the transfer.
"
"
"	History:
"	     First modified by D. Reed, who generated it from the segment lisp_standard_environment_.ec,
"		on 2/19/73.
" Modified 3/13/72 by DAM for New I/O Functions
" Modified 17 Apr 1974 by DAM to add error-break fcns (formerly in lisp_standard_environment_.ec)
" ***** the name of the second location counter was changed from names
" ***** to Names due to a name clash.
" Modified 74.12.16 by DAM.  The transfer vector is now compiled from a readable,
"	symbolic source file called lisp_subr_tv_.macro into lisp_subr_tv_.incl.alm.
"	This file contains the necessary declarations and support routines.
" Modified 1982.10.04 by Richard Lamson to convert into ALM, now that it has
"				macros, rather than converting from the
"				kludgiferous lisp_subr_tv_.macro

	equ	subr,0
	equ	lsubr,1
	equ	fsubr,2

	segdef	tv_begin
	segdef	lisp_subr_tv_
	segdef	tv_entry_count

	use	tv
tv_entry_count:	zero	0,(tv_end-tv_begin)/4-1
	even		" must be even, else garbage collection and saving don't work right.

	macro	type_0_subr
	use 	tv
		vfd	9/&4,9/&3,18/-1
		tra	&5
		zero
		zero	&U-lisp_subr_tv_,&1
	use 	Names
&U:		acc	"&2"
	use	tv
	&end

	macro	type_1_subr
	use	tv
		vfd	9/&4,9/&3,18/-1
		tsx6	type_1_subr
		tra	&5
		zero	&U-lisp_subr_tv_,&1
	use	Names
&U:		acc	"&2"
	use	tv
	&end

	macro	pl1
	use	tv
		vfd	9/&4,9/&3,18/-1
		tsx6	pl1_fixup
		tra	&5
		zero	&U-lisp_subr_tv_,&1
	use	Names
&U:		acc	"&2"
	use	tv
	&end
		
	macro	pl1_lsubr
	use	tv
		vfd	9/&4,9/&3,18/-1
		tsx6	pl1_lsubr_fixup
		tra	&5
		zero	&U-lisp_subr_tv_,&1
	use	Names
&U:		acc	"&2"
	use	tv
	&end

	macro	err_break
	use	tv
		vfd	9/0,9/1,18/-1
		tsx6	err_break-*,ic
		zero	&3,&4
		zero	&U-lisp_subr_tv_,&1
	use	Names
&U:		acc	"&2"
	use	tv
	&end

	macro	none_such
	use	tv
		zero 0,-1
		drl	0
		zero
		zero	&U-lisp_subr_tv_,&1
	use	Names
&U:		acc	"&2"
	use	tv
	&end

tv_begin:	null
lisp_subr_tv_: null

star_flt:		type_0_subr   lsubr,*$,0,511,lisp_utils_$times_flo
star_:		type_0_subr   lsubr,*,0,511,lisp_utils_$times_fix
star_array:	pl1_lsubr	    lsubr,*array,3,511,lisp_array_fcns_$star_array
star_dif:		type_1_subr   lsubr,*dif,2,2,lisp_bignums_$difference
star_function:	type_1_subr   fsubr,*function,,,lisp_$stfunction
star_quo:		type_1_subr   lsubr,*quo,2,2,lisp_bignums_$quotient
star_rearray:	pl1_lsubr	    lsubr,*rearray,1,511,lisp_array_fcns_$star_rearray
star_rset:	pl1	     subr,*rset,1,,lisp_status_fns_$rset
star_sstatus:	pl1_lsubr	    lsubr,*sstatus,1,511,lisp_status_fns_$sstatus_
star_status:	pl1_lsubr	    lsubr,*status,1,511,lisp_status_fns_$status_
pls_flt:		type_0_subr   lsubr,+$,0,511,lisp_utils_$plus_flo
pls_:		type_0_subr   lsubr,+,0,511,lisp_utils_$plus_fix
mns_flt:		type_0_subr   lsubr,-$,0,511,lisp_utils_$diff_flo
mns_:		type_0_subr   lsubr,-,0,511,lisp_utils_$diff_fix
div_flt:		type_0_subr   lsubr,/$,0,511,lisp_utils_$quot_flo
div_:		type_0_subr   lsubr,/,0,511,lisp_utils_$quot_fix
one_pls_flt:	type_0_subr    subr,1+$,1,,lisp_utils_$add1_flo
one_pls:		type_0_subr    subr,1+,1,,lisp_utils_$add1_fix
one_mns_flt:	type_0_subr    subr,1-$,1,,lisp_utils_$sub1_flo
one_mns:		type_0_subr    subr,1-,1,,lisp_utils_$sub1_fix
ls_:		type_0_subr    subr,<,2,,lisp_utils_$ls_
eqn_:		type_0_subr    subr,=,2,,lisp_utils_$eql_
gt_:		type_0_subr    subr,>,2,,lisp_utils_$gt_
CtoI:		pl1	     subr,CtoI,1,,lisp_char_fns_$CtoI
ItoC:		pl1	     subr,ItoC,1,,lisp_char_fns_$ItoC
rem_:		type_1_subr    subr,\,2,,lisp_bignums_$remainder
abs:		type_1_subr    subr,abs,1,,lisp_bignums_$abs
add1:		type_1_subr    subr,add1,1,,lisp_bignums_$add1
alarmclock:	pl1	     subr,alarmclock,2,,lisp_fault_handler_$alarmclock
allfiles:		pl1	     subr,allfiles,1,,lisp_io_fns_$allfiles
and:		type_1_subr   fsubr,and,,,lisp_quick_fcns_$and
append:		type_1_subr   lsubr,append,0,511,lisp_alloc_$append
apply:		type_1_subr   lsubr,apply,2,3,lisp_$apply_
arg:		type_1_subr    subr,arg,1,,lisp_$arg
args:		pl1_lsubr	    lsubr,args,1,2,lisp_defsubr_$args
array:		pl1	    fsubr,array,,,lisp_array_fcns_$array
arraydims:	pl1	     subr,arraydims,1,,lisp_array_fcns_$arraydims
ascii:		type_1_subr    subr,ascii,1,,lisp_reader_alm_$ascii_alm
assoc:		type_0_subr    subr,assoc,2,,lisp_quick_fcns_$assoc
assq:		type_0_subr    subr,assq,2,,lisp_quick_fcns_$assq
atan:		pl1_lsubr	    lsubr,atan,1,2,lisp_trig_$atan
atom:		type_0_subr    subr,atom,1,,lisp_quick_fcns_$atom
baktrace1:	pl1_lsubr	    lsubr,baktrace1,0,2,lisp_baktrace_$baktrace1
baktrace2:	pl1_lsubr	    lsubr,baktrace2,0,2,lisp_baktrace_$baktrace2
baktrace:		pl1_lsubr	    lsubr,baktrace,0,2,lisp_baktrace_$baktrace
bigp:		type_0_subr    subr,bigp,1,,lisp_quick_fcns_$bigp
bltarray:		pl1	     subr,bltarray,2,,lisp_array_fcns_$bltarray
boole:		type_0_subr   lsubr,boole,3,511,lisp_utils_$boole
boundp:		type_1_subr    subr,boundp,1,,lisp_alloc_$boundp
break:		pl1	    fsubr,break,,,lisp_prog_fns_$break
caaaar:		type_1_subr    subr,caaaar,1,,lisp_car_cdrs_$caaaar
caaadr:		type_1_subr    subr,caaadr,1,,lisp_car_cdrs_$caaadr
caaar:		type_1_subr    subr,caaar,1,,lisp_car_cdrs_$caaar
caadar:		type_1_subr    subr,caadar,1,,lisp_car_cdrs_$caadar
caaddr:		type_1_subr    subr,caaddr,1,,lisp_car_cdrs_$caaddr
caadr:		type_1_subr    subr,caadr,1,,lisp_car_cdrs_$caadr
caar:		type_1_subr    subr,caar,1,,lisp_car_cdrs_$caar
cadaar:		type_1_subr    subr,cadaar,1,,lisp_car_cdrs_$cadaar
cadadr:		type_1_subr    subr,cadadr,1,,lisp_car_cdrs_$cadadr
cadar:		type_1_subr    subr,cadar,1,,lisp_car_cdrs_$cadar
caddar:		type_1_subr    subr,caddar,1,,lisp_car_cdrs_$caddar
cadddr:		type_1_subr    subr,cadddr,1,,lisp_car_cdrs_$cadddr
caddr:		type_1_subr    subr,caddr,1,,lisp_car_cdrs_$caddr
cadr:		type_1_subr    subr,cadr,1,,lisp_car_cdrs_$cadr
car:		type_0_subr    subr,car,1,,lisp_car_cdrs_$car
catch:		pl1	    fsubr,catch,,,lisp_prog_fns_$catch
catenate:		pl1_lsubr	    lsubr,catenate,0,511,lisp_char_fns_$catenate
cdaaar:		type_1_subr    subr,cdaaar,1,,lisp_car_cdrs_$cdaaar
cdaadr:		type_1_subr    subr,cdaadr,1,,lisp_car_cdrs_$cdaadr
cdaar:		type_1_subr    subr,cdaar,1,,lisp_car_cdrs_$cdaar
cdadar:		type_1_subr    subr,cdadar,1,,lisp_car_cdrs_$cdadar
cdaddr:		type_1_subr    subr,cdaddr,1,,lisp_car_cdrs_$cdaddr
cdadr:		type_1_subr    subr,cdadr,1,,lisp_car_cdrs_$cdadr
cdar:		type_1_subr    subr,cdar,1,,lisp_car_cdrs_$cdar
cddaar:		type_1_subr    subr,cddaar,1,,lisp_car_cdrs_$cddaar
cddadr:		type_1_subr    subr,cddadr,1,,lisp_car_cdrs_$cddadr
cddar:		type_1_subr    subr,cddar,1,,lisp_car_cdrs_$cddar
cdddar:		type_1_subr    subr,cdddar,1,,lisp_car_cdrs_$cdddar
cddddr:		type_1_subr    subr,cddddr,1,,lisp_car_cdrs_$cddddr
cdddr:		type_1_subr    subr,cdddr,1,,lisp_car_cdrs_$cdddr
cddr:		type_1_subr    subr,cddr,1,,lisp_car_cdrs_$cddr
cdr:		type_0_subr    subr,cdr,1,,lisp_car_cdrs_$cdr
chrct:		type_0_subr   lsubr,chrct,1,2,lisp_reader_alm_$chrct
cline:		pl1	     subr,cline,1,,lisp_command_caller_$cline
close:		pl1	     subr,close,1,,lisp_io_control_$close
comment:		type_1_subr   fsubr,comment,,,lisp_quick_fcns_$comment
cond:		type_1_subr   fsubr,cond,,,lisp_quick_fcns_$cond
cons:		type_1_subr    subr,cons,2,,lisp_alloc_$cons_
cos:		pl1	     subr,cos,1,,lisp_trig_$cos
declare:		type_1_subr   fsubr,declare,,,lisp_quick_fcns_$declare
definedp:		type_1_subr    subr,definedp,1,,lisp_alloc_$boundp
defprop:		pl1	    fsubr,defprop,,,lisp_define_$defprop
defsubr:		pl1_lsubr	    lsubr,defsubr,3,7,lisp_defsubr_$defsubr
defun:		pl1	    fsubr,defun,,,lisp_define_$defun
delete:		type_1_subr   lsubr,delete,2,3,lisp_quick_fcns_$delete
deletef:		pl1	     subr,deletef,1,,lisp_io_control_$deletef
delq:		type_1_subr   lsubr,delq,2,3,lisp_quick_fcns_$delq
difference:	type_1_subr   lsubr,difference,1,511,lisp_bignums_$difference
do:		pl1	    fsubr,do,,,lisp_prog_fns_$do
eoffn:		pl1_lsubr	    lsubr,eoffn,1,2,lisp_io_fns_$eoffn
eq:		type_0_subr    subr,eq,2,,lisp_quick_fcns_$eq
equal:		type_0_subr    subr,equal,2,,lisp_quick_fcns_$equal
err:		pl1	    fsubr,err,,,lisp_error_$err
errframe:		pl1	     subr,errframe,1,,lisp_error_$errframe
errprint:		pl1	     subr,errprint,1,,lisp_error_$errprint
errset:		pl1	    fsubr,errset,,,lisp_prog_fns_$errset
eval:		type_1_subr   lsubr,eval,1,2,lisp_$eval_
evalframe:	pl1	     subr,evalframe,1,,lisp_error_$pdlframe
exp:		pl1	     subr,exp,1,,lisp_trig_$exp
explode:		pl1	     subr,explode,1,,lisp_print_$explode
explodec:		pl1	     subr,explodec,1,,lisp_print_$explodec
exploden:		pl1	     subr,exploden,1,,lisp_print_$exploden
expt:		type_1_subr    subr,expt,2,,lisp_bignums_$expt
filepos:		pl1_lsubr	    lsubr,filepos,1,2,lisp_io_fns_$filepos
fix:		type_1_subr    subr,fix,1,,lisp_bignums_$fix
fixp:		type_0_subr    subr,fixp,1,,lisp_quick_fcns_$fixp
flatc:		pl1	     subr,flatc,1,,lisp_print_$flatc
flatsize:		pl1	     subr,flatsize,1,,lisp_print_$flatsize
float:		type_1_subr    subr,float,1,,lisp_bignums_$float
floatp:		type_0_subr    subr,floatp,1,,lisp_quick_fcns_$floatp
freturn:		pl1	     subr,freturn,2,,lisp_error_$freturn
function:		type_0_subr   fsubr,function,,,lisp_car_cdrs_$quote
gc:		pl1	     subr,gc,0,,lisp_garbage_collector_$gcsubr
gctwa:		pl1	    fsubr,gctwa,,,lisp_status_fns_$gctwa
gensym:		type_1_subr   lsubr,gensym,0,1,lisp_alloc_$gensym_
get:		type_1_subr    subr,get,2,,lisp_property_fns_$get_
get_pname:	pl1	     subr,get_pname,1,,lisp_char_fns_$get_pname
getl:		type_1_subr    subr,getl,2,,lisp_property_fns_$getl_
go:		type_1_subr   fsubr,go,,,lisp_$go
greaterp:		type_1_subr   lsubr,greaterp,1,511,lisp_bignums_$greaterp
index:		pl1	     subr,index,2,,lisp_char_fns_$Index
inpush:		pl1	     subr,inpush,1,,lisp_io_fns_$inpush
intern:		pl1	     subr,intern,1,,lisp_obarray_utils_$intern
ioc:		pl1	    fsubr,ioc,,,lisp_fault_handler_$ioc
iog:		pl1	    fsubr,iog,,,lisp_fault_handler_$iog
isqrt:		pl1	     subr,isqrt,1,,lisp_trig_$isqrt
last:		type_0_subr    subr,last,1,,lisp_quick_fcns_$last
length:		type_0_subr    subr,length,1,,lisp_quick_fcns_$length
lessp:		type_1_subr   lsubr,lessp,1,511,lisp_bignums_$lessp
linel:		type_0_subr   lsubr,linel,1,2,lisp_reader_alm_$linel
list:		type_1_subr   lsubr,list,0,511,lisp_alloc_$list_
log:		pl1	     subr,log,1,,lisp_trig_$log
lsh:		type_0_subr    subr,lsh,2,,lisp_utils_$lsh
make_atom:	pl1	     subr,make_atom,1,,lisp_char_fns_$make_atom
maknam:		pl1	     subr,maknam,1,,lisp_reader_$maknam
makoblist:	pl1	     subr,makoblist,1,,lisp_obarray_utils_$makoblist
makreadtable:	pl1	     subr,makreadtable,1,,lisp_reader_$makreadtable
makunbound:	type_1_subr    subr,makunbound,1,,lisp_alloc_$makunbound
map:		type_1_subr   lsubr,map,2,511,lisp_$map
mapc:		type_1_subr   lsubr,mapc,2,511,lisp_$mapc
mapcan:		type_1_subr   lsubr,mapcan,2,511,lisp_$mapcan
mapcar:		type_1_subr   lsubr,mapcar,2,511,lisp_$mapcar
mapcon:		type_1_subr   lsubr,mapcon,2,511,lisp_$mapcon
maplist:		type_1_subr   lsubr,maplist,2,511,lisp_$maplist
max:		type_1_subr   lsubr,max,1,511,lisp_bignums_$max
member:		type_0_subr    subr,member,2,,lisp_quick_fcns_$member
memq:		type_0_subr    subr,memq,2,,lisp_quick_fcns_$memq
min:		type_1_subr   lsubr,min,1,511,lisp_bignums_$min
minus:		type_1_subr    subr,minus,1,,lisp_bignums_$minus
minusp:		type_1_subr    subr,minusp,1,,lisp_bignums_$minusp
mergef:		pl1_lsubr	    lsubr,mergef,2,511,lisp_io_control_$mergef
nconc:		type_1_subr   lsubr,nconc,0,511,lisp_alloc_$nconc
ncons:		type_1_subr    subr,ncons,1,,lisp_alloc_$ncons_
namelist:		pl1	     subr,namelist,1,,lisp_io_fns_$namelist
names:		pl1_lsubr	    lsubr,names,1,2,lisp_io_fns_$names
namestring:	pl1	     subr,namestring,1,,lisp_io_fns_$namestring
nointerrupt:	pl1	     subr,nointerrupt,1,,lisp_fault_handler_$nointerrupt
noret:		pl1	     subr,noret,1,,lisp_status_fns_$noret
not:		type_0_subr    subr,not,1,,lisp_quick_fcns_$null
nouuo:		type_1_subr    subr,nouuo,1,,lisp_$nouuo
nreverse:		type_1_subr    subr,nreverse,1,,lisp_alloc_$nreverse_
null:		type_0_subr    subr,null,1,,lisp_quick_fcns_$null
numberp:		type_0_subr    subr,numberp,1,,lisp_quick_fcns_$numberp
oddp:		type_0_subr    subr,oddp,1,,lisp_quick_fcns_$oddp
opena:		pl1	     subr,opena,1,,lisp_io_control_$opena
openi:		pl1	     subr,openi,1,,lisp_io_control_$openi
openo:		pl1	     subr,openo,1,,lisp_io_control_$openo
or:		type_1_subr   fsubr,or,,,lisp_quick_fcns_$or
plus:		type_1_subr   lsubr,plus,0,511,lisp_bignums_$plus
plusp:		type_1_subr    subr,plusp,1,,lisp_bignums_$plusp
prin1:		pl1_lsubr	    lsubr,prin1,1,2,lisp_print_$prin1_
princ:		pl1_lsubr	    lsubr,princ,1,2,lisp_print_$princ_
print:		pl1_lsubr	    lsubr,print,1,2,lisp_print_$print_
prog2:		type_0_subr   lsubr,prog2,2,511,lisp_quick_fcns_$prog2
prog:		pl1	    fsubr,prog,,,lisp_prog_fns_$prog
progn:		type_0_subr   lsubr,progn,1,511,lisp_quick_fcns_$progn
putprop:		type_1_subr    subr,putprop,3,,lisp_property_fns_$putprop_
quit:		pl1	     subr,quit,0,,lisp$quit
quote:		type_0_subr   fsubr,quote,,,lisp_car_cdrs_$quote
quotient:		type_1_subr   lsubr,quotient,1,511,lisp_bignums_$quotient
random:		type_1_subr   lsubr,random,0,1,lisp_quick_fcns_$random
read:		pl1_lsubr	    lsubr,read,0,2,lisp_reader_$read
readch:		type_1_subr   lsubr,readch,0,2,lisp_reader_alm_$readch
readlist:		pl1	     subr,readlist,1,,lisp_reader_$readlist
readline:		pl1_lsubr	    lsubr,readline,0,2,lisp_reader_$readstring
remainder:	type_1_subr    subr,remainder,2,,lisp_bignums_$remainder
remob:		pl1	     subr,remob,1,,lisp_obarray_utils_$remob
remprop:		type_1_subr    subr,remprop,2,,lisp_property_fns_$remprop_
rename:		pl1	     subr,rename,2,,lisp_io_control_$rename
return:		type_1_subr    subr,return,1,,lisp_$return
reverse:		type_1_subr    subr,reverse,1,,lisp_alloc_$reverse
rot:		type_0_subr    subr,rot,2,,lisp_utils_$rot
rplaca:		type_1_subr    subr,rplaca,2,,lisp_quick_fcns_$rplaca
rplacd:		type_0_subr    subr,rplacd,2,,lisp_quick_fcns_$rplacd
runtime:		type_0_subr    subr,runtime,0,,lisp_quick_fcns_$runtime
sassoc:		type_0_subr    subr,sassoc,3,,lisp_quick_fcns_$sassoc
sassq:		type_0_subr    subr,sassq,3,,lisp_quick_fcns_$sassq
save:		pl1	    fsubr,save,,,lisp$save
set:		type_1_subr    subr,set,2,,lisp_quick_fcns_$set
setarg:		type_1_subr    subr,setarg,2,,lisp_$setarg
setq:		type_1_subr   fsubr,setq,,,lisp_quick_fcns_$setq
shortnamestring:	pl1	     subr,shortnamestring,1,,lisp_io_fns_$shortnamestring
signp:		type_1_subr   fsubr,signp,,,lisp_utils_$signp
sin:		pl1	     subr,sin,1,,lisp_trig_$sin
sleep:		pl1	     subr,sleep,1,,lisp_trig_$sleep
smallnump:	type_0_subr    subr,smallnump,1,,lisp_quick_fcns_$smallnump
sqrt:		pl1	     subr,sqrt,1,,lisp_trig_$sqrt
sstatus:		pl1	    fsubr,sstatus,,,lisp_status_fns_$sstatus
status:		pl1	    fsubr,status,,,lisp_status_fns_$status
store:		type_1_subr   fsubr,store,,,lisp_oprs_$store
stringlength:	pl1	     subr,stringlength,1,,lisp_char_fns_$stringlength
stringp:		type_0_subr    subr,stringp,1,,lisp_quick_fcns_$stringp
sub1:		type_1_subr    subr,sub1,1,,lisp_bignums_$sub1
sublis:		type_1_subr    subr,sublis,2,,lisp_alloc_$sublis
subrp:		type_0_subr    subr,subrp,1,,lisp_quick_fcns_$subrp
subst:		type_1_subr    subr,subst,3,,lisp_alloc_$subst_
substr2:		pl1	     subr,substr2,2,,lisp_char_fns_$Substr2
substr:		pl1_lsubr	    lsubr,substr,2,3,lisp_char_fns_$Substr
sysp:		pl1	     subr,sysp,1,,lisp_defsubr_$sysp
terpri:		pl1_lsubr	    lsubr,terpri,0,1,lisp_print_$terpri
throw:		pl1	    fsubr,throw,,,lisp_prog_fns_$throw
time:		pl1	     subr,time,0,,lisp_status_fns_$time
times:		type_1_subr   lsubr,times,0,511,lisp_bignums_$times
tyi:		type_1_subr   lsubr,tyi,0,2,lisp_reader_alm_$tyi
tyipeek:		type_1_subr   lsubr,tyipeek,0,2,lisp_reader_alm_$tyipeek
tyo:		type_1_subr   lsubr,tyo,1,2,lisp_reader_alm_$tyo_alm
typep:		type_1_subr    subr,typep,1,,lisp_utils_$typep
xcons:		type_1_subr    subr,xcons,2,,lisp_alloc_$xcons_
zerop:		type_0_subr    subr,zerop,1,,lisp_quick_fcns_$zerop
alphalessp:	type_1_subr    subr,alphalessp,2,,lisp_quick_fcns_$alphalessp
samepnamep:	type_1_subr    subr,samepnamep,2,,lisp_quick_fcns_$samepnamep
getchar:		type_1_subr    subr,getchar,2,,lisp_quick_fcns_$getchar
sxhash:		type_1_subr    subr,sxhash,1,,lisp_utils_$sxhash
gcd:		type_1_subr    subr,gcd,2,,lisp_bignums_$gcd
error:		pl1_lsubr	    lsubr,error,0,3,lisp_error_$error
setsyntax:	pl1	     subr,setsyntax,3,,lisp_status_fns_$setsyntax
cursorpos:	pl1_lsubr	    lsubr,cursorpos,0,3,lisp_io_fns_$cursorpos
force_output:	pl1	     subr,force-output,1,,lisp_io_control_$force_output
clear_input:	pl1	     subr,clear-input,1,,lisp_io_control_$clear_input
haipart:		type_1_subr    subr,haipart,2,,lisp_bignums_$haipart
haulong:		type_1_subr    subr,haulong,1,,lisp_bignums_$haulong
sort:		pl1	     subr,sort,2,,lisp_array_fcns_$sort
sortcar:		pl1	     subr,sortcar,2,,lisp_array_fcns_$sortcar
fillarray:	pl1	     subr,fillarray,2,,lisp_array_fcns_$fillarray
listarray:	pl1_lsubr	    lsubr,listarray,1,2,lisp_array_fcns_$listarray
listify:		type_1_subr    subr,listify,1,,lisp_$listify
quikload:		none_such	     ,listen
funcall:		type_1_subr   lsubr,funcall,1,511,lisp_$funcall
listen:		type_1_subr    subr,listen,0,,lisp_reader_alm_$listen
fixgcd:		type_0_subr    subr,\\,2,,lisp_utils_$fixgcd
copysymbol:	type_1_subr    subr,copysymbol,2,,lisp_alloc_$copysymbol
load:		pl1	     subr,load,1,,lisp_load_$lisp_load_
charpos:		type_0_subr   lsubr,charpos,1,2,lisp_reader_alm_$charpos
linenum:		type_0_subr   lsubr,linenum,1,2,lisp_reader_alm_$linenum
pagenum:		type_0_subr   lsubr,pagenum,1,2,lisp_reader_alm_$pagenum
pagel:		type_0_subr   lsubr,pagel,1,2,lisp_reader_alm_$pagel
endpagefn:	pl1_lsubr	    lsubr,endpagefn,1,2,lisp_io_fns_$endpagefn
percent_include:	pl1	    fsubr,%include,,,lisp_io_control_$percent_include
defaultf:		pl1	     subr,defaultf,1,,lisp_io_fns_$defaultf
alloc:		pl1	     subr,alloc,1,,lisp_status_fns_$alloc
implode:		pl1	     subr,implode,1,,lisp_reader_$implode
purcopy:		type_0_subr    subr,purcopy,1,,lisp_subr_tv_$purcopy_code
nreconc:		type_1_subr    subr,nreconc,2,,lisp_alloc_$nreconc_
err_1:		err_break	         ,*internal-^b-break,0,0
err_5:		err_break	         ,*internal-undf-fnctn-break,-1,8
err_6:		err_break	         ,*internal-unbnd-vrbl-break,-1,10
err_7:		err_break	         ,*internal-wrng-type-arg-break,-1,12
err_8:		err_break	         ,*internal-unseen-go-tag-break,-1,14
err_9:		err_break	         ,*internal-wrng-no-args-break,-1,16
err_10:		err_break	         ,*internal-gc-lossage-break,0,18
err_11:		err_break	         ,*internal-fail-act-break,-1,20
err_12:		err_break	         ,*internal-pdl-overflow-break,-1,22
err_19:		type_0_subr    subr,*internal-*rset-break,1,,lisp_subr_tv_$star_rset_trap
err_18:		type_0_subr    subr,*internal-autoload-trap,1,,lisp_subr_tv_$autoload_trap
getcharn:		type_1_subr    subr,getcharn,2,,lisp_quick_fcns_$getcharn
subrcall:		type_1_subr   fsubr,subrcall,,,lisp_$subrcall
lsubrcall:	type_1_subr   fsubr,lsubrcall,,,lisp_$lsubrcall
arraycall:	type_1_subr   fsubr,arraycall,,,lisp_$arraycall
maknum:		type_1_subr    subr,maknum,1,,lisp_alloc_$maknum
munkam:		type_1_subr    subr,munkam,1,,lisp_alloc_$munkam
loadarrays:	pl1	     subr,loadarrays,1,,lisp_loadumparrays_$loadarrays
dumparrays:	pl1	     subr,dumparrays,2,,lisp_loadumparrays_$dumparrays
expt_fix:		type_0_subr    subr,^,2,,lisp_utils_$expt_fix
expt_flt:		type_0_subr    subr,^$,2,,lisp_utils_$expt_flo
symeval:		type_1_subr    subr,symeval,1,,lisp_$symeval
plist:		type_1_subr    subr,plist,1,,lisp_property_fns_$plist_
setplist:		type_1_subr    subr,setplist,2,,lisp_property_fns_$setplist_
open:		pl1_lsubr	    lsubr,open,0,2,lisp_io_control_$open
in:		pl1	     subr,in,1,,lisp_io_control_$in
out:		pl1	     subr,out,2,,lisp_io_control_$out
truename:		pl1	     subr,truename,1,,lisp_io_fns_$truename
evalhook:		type_1_subr    subr,evalhook,2,,lisp_$evalhook
fsc:		type_0_subr    subr,fsc,2,,lisp_utils_$fsc
ifix:		type_0_subr    subr,ifix,1,,lisp_utils_$ifix
progv:		pl1	    fsubr,progv,,,lisp_prog_fns_$progv
mapatoms:		pl1_lsubr	    lsubr,mapatoms,1,2,lisp_array_fcns_$mapatoms
symbolp:		type_0_subr    subr,symbolp,1,,lisp_quick_fcns_$symbolp
filep:		type_0_subr    subr,filep,1,,lisp_quick_fcns_$filep
suspend:		pl1	     subr,suspend,0,,lisp_command_caller_$suspend
ctrl_g:		pl1	     subr,^g,0,,lisp_fault_handler_$ctrl_g_function
unwind_protect:	pl1	    fsubr,unwind-protect,,,lisp_prog_fns_$unwind_protect
let:		type_1_subr   fsubr,let,,,lisp_$let
arrayp:		type_0_subr    subr,arrayp,1,,lisp_quick_fcns_$arrayp
list_star:	type_1_subr   lsubr,list*,1,511,lisp_alloc_$list_star_
eval_when:	pl1	    fsubr,eval-when,,,lisp_prog_fns_$eval_when
read_from_string:	pl1	     subr,read-from-string,1,,lisp_reader_$read_from_string
prog1:		type_0_subr   lsubr,prog1,1,511,lisp_quick_fcns_$prog1
displace:		type_1_subr    subr,displace,2,,lisp_quick_fcns_$displace
nth:		type_1_subr    subr,nth,2,,lisp_car_cdrs_$nth
nthcdr:		type_1_subr    subr,nthcdr,2,,lisp_car_cdrs_$nthcdr
first:		type_0_subr    subr,first,1,,lisp_car_cdrs_$car
second:		type_1_subr    subr,second,1,,lisp_car_cdrs_$cadr
third:		type_1_subr    subr,third,1,,lisp_car_cdrs_$caddr
fourth:		type_1_subr    subr,fourth,1,,lisp_car_cdrs_$cadddr
rest1:		type_0_subr    subr,rest1,1,,lisp_car_cdrs_$cdr
rest2:		type_1_subr    subr,rest2,1,,lisp_car_cdrs_$cddr
rest3:		type_1_subr    subr,rest3,1,,lisp_car_cdrs_$cdddr
rest4:		type_1_subr    subr,rest4,1,,lisp_car_cdrs_$cddddr
includef:		pl1	     subr,includef,1,,lisp_io_control_$includef

	use	tv
tv_end:	null

"
"	trap code for unimplemented subrs in a given release
"
	dup	80
	tra	trap_out_unimp
	dupend

trap_out_unimp:
	push	64
trap_out_unimp_1:
	eppap	trap_argl
	short_call	signal_$signal_
	tra	trap_out_unimp_1
	even
trap_argl:zero	4,4
	zero	4,0
	arg	trap_cname
	zero
	arg	trap_nullptr
	zero
	arg	*+1
	oct	524000000030
	arg	*+1
	oct	464000000000
trap_nullptr:
	its	-1,1
trap_cname:aci	"unimplemented_lisp_subr_"

	segdef	purcopy_code
purcopy_code:	" code to do the purcopy function, which is nugatory
	ldaq	ap|-2		just return argument
	eppap	ap|-2
	tra	bp|0

	segdef	star_rset_trap,autoload_trap	" used by transfer vector above

null_argl:	oct	4,0

type_1_subr:			" routine to set up type 1 call entry for system subrs.
	eax7	4,x7		" get room to save lp and bp
	sprilp	ab|-4,x7
	spribp	ab|-2,x7
	epplp	ab|system_lp,*	" get linkage pointer, which all system subrs share.
	tra	0,x6		" return to transfer instruction.

pl1_fixup:			" routine to switch from lisp mode to pl1 mode.
	eax7	6,x7
	spribp	ab|-6,x7
	sprilp	ab|-4,x7
	epplp	0,x6
	sprilp	ab|-2,x7		" save pointer to entry we are calling.
	epplp	ab|system_lp,*	" get system lp.
	spriap	<lisp_static_vars_>|[stack_ptr]
	stx7	<lisp_static_vars_>|[unmkd_ptr]+1
	stc1	ab|in_pl1_code	" now we are in pl1 code conventions.

	push			" make a stack frame.
	eppbp	<lisp_static_vars_>|[unmkd_ptr],*
	epplb	<lisp_subr_tv_>|[..lisp..]
	sprilb	sp|stack_frame.entry_ptr
	eppap	null_argl-*,ic
	short_call bp|-2,*	" call the entry point.
	eppbp	sp|16,*		" pop stack.
	sprisp	sb|stack_header.stack_end_ptr
	eppsp	bp|0		" get old stack ptr.

	eppap	<lisp_static_vars_>|[stack_ptr],*	"go back to lisp conventions.
	epbpab	<lisp_static_vars_>|[unmkd_ptr],*
	ldx7	<lisp_static_vars_>|[unmkd_ptr]+1
	stz	ab|in_pl1_code
	epplp	ab|-4,x7*
	eppbp	ab|-6,x7*
	eax7	-6,x7
	ldaq	ap|-2
	eppap	ap|-2
	tra	bp|0		" return.

pl1_lsubr_fixup:

	eppap	ap|2
	eaq	0,x5		" put x5 on stack.
	qrs	18
	lda	fixnum_type,dl
	staq	ap|-2
	tra	pl1_fixup

""" special internal trap & break routines

autoload_trap:
	epplb	ap|-2,*		pick up argument and take cdr
	ldaq	lb|2
	staq	ap|-2		pass argument's cdr to load function
	tra	load+1-*,ic


err_break:	" x6 -> zero flag,atom_offset
		" flag = -1 if (errprint nil) should be done.
		" atom_offset = offset from lisp_static_vars_$user_intr_array of break tag

	eax7	6,x7		save caller's bp, lp
	sprpbp	ab|-4,x7
	sprplp	ab|-3,x7
	epplp	ab|system_lp,*

star_rset_break:
	" lambda-bind readtable and obarray, and args to argument
	" and + t itself

	eppap	ap|16
	ldaq	<lisp_static_vars_>|[MINUS]
	staq	ap|-14
	ldaq	<lisp_static_vars_>|[MINUS],*		+ hasn't been setq'ed yet
	staq	ap|-16
	staq	<lisp_static_vars_>|[PLUS],*
	ldaq	<lisp_static_vars_>|[args]
	staq	ap|-10
	ldaq	ap|-10,*
	staq	ap|-12
	ldaq	<lisp_static_vars_>|[readtable]
	staq	ap|-6
	ldaq	ap|-6,*
	staq	ap|-8
	ldaq	<lisp_static_vars_>|[obarray]
	staq	ap|-2
	ldaq	ap|-2,*
	staq	ap|-4
	eax0	ap|-16		bot_block
	sxl0	ab|-2,x7
	eax0	ap|0		top_block
	stx0	ab|-2,x7
	lda	<lisp_static_vars_>|[binding_top]+1
	sta	ab|-1,x7
	eax1	ab|-2,x7
	stx1	<lisp_static_vars_>|[binding_top]+1
	ldaq	ap|-18		set args to argument
	staq	ap|-10,*

	" reset readtable, obarray to initial values

	sxl6	ab|-5,x7
	eppap	ap|4
	ldaq	<lisp_static_vars_>|[readtable]
	staq	ap|-4
	ldaq	<lisp_static_vars_>|[array]
	staq	ap|-2
	tspbp	get+1-*,ic
	cmpaq	ab|nil
	tze	2,ic
	staq	ap|-6,*

	ldaq	<lisp_static_vars_>|[obarray]
	eppap	ap|4
	staq	ap|-4
	ldaq	<lisp_static_vars_>|[array]
	staq	ap|-2
	tspbp	get+1-*,ic
	cmpaq	ab|nil
	tze	2,ic
	staq	ap|-2,*

	" if necessary, do (iog vt (errprint nil))

	lxl6	ab|-5,x7
	szn	0,x6
	tpl	err_break_no_errprint-*,ic

	eppap	ap|10		binding + arg
	ldaq	<lisp_static_vars_>|[ctrlW]
	staq	ap|-8
	ldaq	ap|-8,*
	staq	ap|-10
	ldaq	<lisp_static_vars_>|[ctrlR]
	staq	ap|-4
	ldaq	ap|-4,*
	staq	ap|-6
	eax0	ap|-2
	stx0	ab|-2,x7		update top_block
	ldaq	ab|nil
	staq	ap|-2
	staq	ap|-4,*
	staq	ap|-8,*
	tspbp	errprint+1-*,ic
	" unbind ^w and ^r now
	ldaq	ap|-4
	staq	ap|-2,*
	ldaq	ap|-8
	staq	ap|-6,*
	eax0	ap|-8
	stx0	ab|-2,x7		update top_block
	eppap	ap|-8

err_break_no_errprint:
	eppap	ap|4
	ldaq	ab|true		construct arg list for break
	staq	ap|-2
	tspbp	ncons+1-*,ic
	tspbp	ab|xcons_op,*
	lxl6	ab|-5,x7		get back x6
	lxl6	0,x6		get offset into user_intr_array
	ldaq	<lisp_static_vars_>|[user_intr_array],x6	get break tag
	staq	bb|0
	spribb	ap|-2
	tspbp	break+1-*,ic

	" unbind and return

	eppap	ap|2
	staq	ap|-2		save return value
	ldaq	ap|-6
	staq	ap|-4,*
	ldaq	ap|-10
	staq	ap|-8,*
	ldaq	ap|-14
	staq	ap|-12,*
	ldaq	ap|-18
	staq	ap|-16,*
	ldx1	ab|-1,x7
	stx1	<lisp_static_vars_>|[binding_top]+1
	ldaq	ap|-2		return value
	eppap	ap|-20		16 binding + 2 arg + 2 saved result
	lprplp	ab|-3,x7
	lprpbp	ab|-4,x7
	eax7	-6,x7
	tra	bp|0


star_rset_trap:
	eax6	star_rset_trap_control_word-*,ic
	eax7	6,x7
	sprpbp	ab|-4,x7
	sprplp	ab|-3,x7
	epplp	ab|system_lp,*
	ldaq	<lisp_static_vars_>|[star_rset],*
	cmpaq	ab|nil
	tnz	star_rset_break-*,ic
	 " (*rset nil) mode, just return nil
"	ldaq	ab|nil
	eppap	ap|-2
	lprplp	ab|-3,x7
	lprpbp	ab|-4,x7
	eax7	-6,x7
	tra	bp|0

star_rset_trap_control_word:
	zero	0,36

	use	Names
	entry	..lisp..
..lisp..:	drl	0,dl		used to set stack_frame.entry_ptr

	include	stack_header
	include 	stack_frame
	include	lisp_object_types
	include	lisp_stack_seg

	use	tv		hope to get literals in tv section
	join	/text/tv,Names
	end
