" **************************************************************
" *                                                            *
" * Copyright, (C) Massachusetts Institute of Technology, 1973 *
" *                                                            *
" **************************************************************
"
"	Procedure lisp_quick_fcns_, which contains those functions which
"	are optimally hand-coded for maximum interpreter speed.
"
"	DPR 14 August 72
"

	tempd	arg(2)
	include	stack_header
	include 	lisp_object_types
	include 	lisp_stack_seg
	include 	lisp_error_codes
	include	lisp_name_codes

	even			some constants for numeric routines
fixnum_zero:
	vfd	36/fixnum_type
	dec	0
flonum_zero:
	vfd	36/flonum_type
	dec	0.0		good old floating point.

float_q:	llr	36		convert to fixed double word.
	lrs	36		extend sign.
	lde	=71b25,du		load exponent with magic number
	fad	=0.0,du		and normalize
	tra	0,x6		return

"	common code to return from a procedure which pushed its return address on
"	the unmkd pdl.

popj:	eppbp	ab|-2,x7*		reload bp from unmarked pdl
	eax7	-2,x7		pop off pdl
	tra	bp|0		and return

"	standard return sequence for type 1 lisp subr. Such subrs
"	have the caller's lp and the return address pushed on the unmkd
"	pdl.

retrn1:	eppbp	ab|-2,x7*		reload return address
	epplp	ab|-4,x7*		and caller's lp
	eax7	-4,x7		pop unmarked stack
	tra	bp|0		and return to caller.
"
	segdef	null
null:	ldaq	ap|-2		load argument
	eppap	ap|-2		pop stack
	cmpaq	ab|nil		see if arg is nil
	tze	ret_t-*,ic	if so, return true.
ret_nil:	ldaq	ab|nil		else return false.
	tra	bp|0
ret_t:	ldaq	ab|true
	tra	bp|0

	segdef	eq
eq:	ldaq	ap|-4
	cmpaq	ap|-2		compare 2 arguments as pointers.
	eppap	ap|-4		pop stack, changing no indicators.
	tze	ret_t-*,ic
	tra	ret_nil-*,ic

	segdef	atom
atom:	lda	ap|-2		load type field
	eppap	ap|-2		and pop off stack
	cana	Atomic,dl
	tze	ret_nil-*,ic
	tra	ret_t-*,ic

	segdef	numberp
numberp:	ldaq	ap|-2
	eppap	ap|-2
	cana	Numeric,dl
	tze	ret_nil-*,ic
	tra	ret_t-*,ic

	segdef	fixp
fixp:	ldaq	ap|-2
	eppap	ap|-2
	cana	Fixed+Big_fixed,dl
	tnz	ret_t-*,ic
	tra	ret_nil-*,ic

	segdef	smallnump
smallnump:ldaq	ap|-2
	eppap	ap|-2
	cmpa	fixnum_type,dl	" only small fixnums match here.
	tze	ret_t-*,ic
	tra	ret_nil-*,ic

	segdef	bigp
bigp:	ldaq	ap|-2
	eppap	ap|-2
	cana	Big_fixed,dl
	tnz 	ret_t-*,ic
	tra	ret_nil-*,ic

	segdef	floatp
floatp:	ldaq	ap|-2
	eppap	ap|-2
	cmpa	flonum_type,dl
	tze	bp|0
	tra	ret_nil-*,ic

	segdef	stringp
stringp:	ldaq	ap|-2
	eppap	ap|-2
	cana	String,dl
	tnz	ret_t-*,ic
	tra	ret_nil-*,ic

	segdef	subrp
subrp:	lda	ap|-2
	eppap	ap|-2
	cana	Subr,dl
	tnz	ret_t-*,ic
	tra	ret_nil-*,ic

	segdef	symbolp
symbolp:	lda	ap|-2
	eppap	ap|-2
	cana	Atsym,dl
	tnz	ret_t
	tra	ret_nil

	segdef	arrayp
arrayp:	lda	ap|-2
	eppap	ap|-2
	cana	Array,dl
	tnz	ret_t
	tra	ret_nil

	segdef	filep
filep:	lda	ap|-2
	eppap	ap|-2
	cana	File,dl
	tnz	ret_t
	tra	ret_nil

	segdef	zerop
zerop:	ldaq	ap|-2
	cana	Fixed+Float+Big_fixed,dl
	tnz	5,ic
	tsx4	push_ptrs
zerop_tsx4:
	tsx4	bad_arg
	tsx4	pop_ptrs
	tra	zerop
	eppap	ap|-2		pop stack.
	cmpaq	fixnum_zero-*,ic	see if fixed zero.
	tze	ret_t-*,ic
	cmpaq	flonum_zero-*,ic	see if float zero
	tze	ret_t-*,ic
	tra	ret_nil-*,ic

	segdef	oddp		" determine if fixnum is odd.
oddp:	ldaq	ap|-2		" check arg for fixnum
	cana	Big_fixed,dl	" big case, must check least significant word.
	tze	not_big-*,ic
	ldaq	ap|-2,*		" load first two words of bignum.
oddp_test:eppap	ap|-2
	canq	1,dl		" least significant word is in q.
	tze	ret_nil-*,ic
	tra	ret_t-*,ic

not_big:	cmpa	fixnum_type,dl	" must be fixnum arg.
	tze	oddp_test-*,ic

	tsx4	push_ptrs
oddp_tsx4:tsx4	bad_arg
	tsx4	pop_ptrs
	tra	oddp-*,ic		" and try again.

push_ptrs:	eax7	4,x7
	sprilp	ab|-4,x7
	spribp	ab|-2,x7
	epplp	ab|system_lp,*	" get system lp.
	tra	0,x4		return
pop_ptrs:	epplp	ab|-4,x7*		" reload lp
	eppbp	ab|-2,x7*
	eax7	-4,x7		" and pop stack.
	staq	ap|-2		" put new value back
	tra	0,x4
"
	segdef	runtime
runtime:	eax7	6,x7
	sprilp	ab|-6,x7
	spribp	ab|-4,x7
	epplp	ab|system_lp,*	" get sytem lp, to save data for pl1.
	spriap	<lisp_static_vars_>|[stack_ptr]
	stx7	<lisp_static_vars_>|[unmkd_ptr]+1
	stc1	ab|in_pl1_code

	push			" get pl1 stack frame.
	eppbp	<lisp_static_vars_>|[unmkd_ptr],*
	eppbp	bp|-2		" get place to put cpu time.
	spribp	arg+2
	ldaq	one_arg-*,ic
	staq	arg
	eppap	arg
	short_call <hcs_>|[virtual_cpu_time_]
	eppbp	sp|16,*		" pop stack frame off.
	sprisp	sb|stack_header.stack_end_ptr
	eppsp	bp|0

	epbpab	<lisp_static_vars_>|[unmkd_ptr],*
	eppap	<lisp_static_vars_>|[stack_ptr],*
	ldx7	<lisp_static_vars_>|[unmkd_ptr]+1
	stz	ab|in_pl1_code
	ldq	ab|-1,x7		" get cpu time.
	lda	fixnum_type,dl
	eppbp	ab|-4,x7*
	epplp	ab|-6,x7*
	eax7	-6,x7
	tra	bp|0		" return





"

"	fsubrs for comment and declare.

	segdef	comment
comment:	ldaq	<lisp_static_vars_>|[comment_atom]
	eppap	ap|-2
	tra	retrn1-*,ic

	segdef	declare
declare:	ldaq	<lisp_static_vars_>|[declare_atom]
	eppap	ap|-2
	tra	retrn1-*,ic
"
	segdef	length		computes length of list.
length:	ldaq	fixnum_zero-*,ic	initial length is zero.
	eax7	2,x7		save return address.
	spribp	ab|-2,x7
	eppbp	ap|-4		start list off right.
len_loop:	lxl0	bp|2		see if any more
	canx0	Atomic,du
	tnz	ret_l-*,ic	if none, return aq
	adq	1,dl		bump aq
	eppbp	bp|2,*		go down cdr
	tra	len_loop-*,ic	and try again.
ret_l:	eppap	ap|-2		pop arg off stack
	tra	popj-*,ic		and return to address saved on pdl

	segdef	last
last:	ldaq	ap|-2		result is arg if atomic
	eax7	2,x7
	spribp	ab|-2,x7		save return addr
	eppbp	ap|-4		start list off right
last_loop:lxl0	bp|2		get type of cdr
	canx0	Atomic,du		see if atom,
	tnz	ret_l-*,ic	return aq if so.
	ldaq	bp|2		else load cdr into aq
	eppbp	bp|2,*		and chase down list
	tra	last_loop-*,ic

"
"	lisp function _e_q_u_a_l.
"
"	Other routines in this segment require that equal not change index register
"	3 during its operation, as it is used as an internal procedure by some.
"
	segdef	equal
equal:	eax7	2,x7		get space and
	spribp	ab|-2,x7		save return address.
	eax0	0		set recursion depth.

eql_lp:	ldaq	ap|-4		first test for eq
	cmpaq	ap|-2
	tze	ret_t_eql-*,ic	and return true for this level if so.
	cana	Atomic,dl		check for list
	tze	list_eql-*,ic	and go to recursive equal
	cana	Atsym+Subr+Fixed+Float,dl	these are equal iff eq.
	tnz	ret_nil_eql-*,ic
	cana	Big_fixed,dl	check for bignum
	tnz	bignum_eql-*,ic
	cana	String,dl		check for string
	tze	ret_nil_eql-*,ic	and if not, unknown type.

" 				string compare....
	lda	ap|-2		load type field
	cana	String,dl
	tze	ret_nil_eql-*,ic
	lda	ap|-2,*		load length
	cmpa	ap|-4,*		and compare lengths.
	tnz	ret_nil_eql-*,ic	if not equal, then complain.
	eppbp	ap|-2,*		get ptrs to strings
	epplb	ap|-4,*
	cmpc	(pr,rl),(pr,rl)
	desc9a	bp|1,al
	desc9a	lb|1,al
	tze	ret_t_eql-*,ic
	tra	ret_nil_eql-*,ic

list_eql:	lda	ap|-2		load type of second arg
	cana	Atomic,dl		if atomic, then can't be a list
	tnz	ret_nil_eql-*,ic
	eppap	ap|4		get room to recurse
	eax0	-4,x0		and bump recursion counter.
	eppbp	ap|-8,*		get car and cdr of arg 1
	ldaq	bp|0
	staq	ap|-4		and pass to loop
	ldaq	bp|2
	staq	ap|-8
	eppbp	ap|-6,*		get car and cdr of 2nd arg
	ldaq	bp|0
	staq	ap|-2
	ldaq	bp|2
	staq	ap|-6
	tra	eql_lp-*,ic

bignum_eql:			" first arg is bignum...
	lda	ap|-2		load second arg type.
	cana	Big_fixed,dl
	tze	ret_nil_eql-*,ic

	eppbp	ap|-4,*		get pointer to first bignum
	ldq	bp|0		sign and length in q
	epplb	ap|-2,*
	cmpq	lb|0		compare sign and length with other value.
	tnz	ret_nil_eql-*,ic	if sign or length differ, return nil
	eaq	1,ql		get total length in qu and flush sign bits
	qls	2		convert to characters
	cmpc	(pr,rl),(pr,rl)
	desc9a	bp|0,qu
	desc9a	lb|0,qu
	tze	ret_t_eql-*,ic
"	tra	ret_nil_eql-*,ic

ret_nil_eql:			" return nil, which propagates back...
	ldaq	ab|nil
	eppap	ap|-4,x0		and pop back all of stack stuff
	tra	popj-*,ic

ret_t_eql:eax0	4,x0		pop off recursion counter
	tze	2,ic		this and next could be replaced by one inst.
	tpl	ret_t_for_real-*,ic
	eppap	ap|-4		pop off stack
	tra	eql_lp-*,ic	and return, checking cdr.
ret_t_for_real:
	eppap	ap|-8,x0		pop stack
	ldaq	ab|true
	tra	popj-*,ic



	segdef	alphalessp
alphalessp:
	tsx6	stringcmp
	tra	true_return
	tra	nil_return
	tra	nil_return

	segdef	samepnamep
samepnamep:
	tsx6	stringcmp
	tra	nil_return
	tra	true_return
	tra	nil_return

true_return:
	ldaq	ab|true
	tra	2,ic
nil_return:
	ldaq	ab|nil
	eppap	ap|-4
	tra	retrn1

stringcmp:
	ldaq	ap|-4		"  load  first arg.
	cana	Atsym+String,dl
	tnz	good_alpha1	" ok argument is string or atsym
	tsx4	bad_string
	staq	ap|-4
	tra	stringcmp

good_alpha1:
	ldaq	ap|-2
	cana	Atsym+String,dl	" check for  string or atsym.
	tnz	good_alpha2
	tsx4	bad_string
	staq	ap|-2
	tra	good_alpha1

good_alpha2:
	epplb	ap|-2,*	" get pointer to second arg.
	cana	String,dl		" if string, ptr is right.
	tnz	2,ic
	epplb	lb|4		" otherwise bump pointer.
	eppbp	ap|-4,*		" get pointer to first arg's ascii in bp
	lda	ap|-4
	cana	String,dl		" check for string.
	tnz	2,ic
	eppbp	bp|4		" otherwise bump bp to point at pname.

	lda	bp|0
	cmpa	lb|0		" get minimum length of args.
	tmi	2,ic
	lda	lb|0
	cmpc	(pr,rl),(pr,rl)
	desc9a	bp|1,al
	desc9a	lb|1,al
	tnc	0,x6		first < second
	tnz	2,x6		first > second

	" appear equal, check lengths

	lda	bp|0
	cmpa	lb|0
	tmi	0,x6		second longer, it is >
	tze	1,x6		same length, they are =
	tra	2,x6		first longer, it is >

bad_string:
	eppap	ap|2
	staq	ap|-2		" save losing arg.
	eax7	4,x7		" save useful index regs.
	stx6	ab|-3,x7
	stx4	ab|-4,x7
	cmpx6	alphalessp+1,du	" see which function we are.
	tnz	3,ic
	lcq	-fn_alphalessp,dl
	tra	got_name		" jump into error code.
	lcq	-fn_samepnamep,dl
	tra	got_name

	segdef	getcharn
getcharn:	tsx6	2,ic		same as getchar but returns a fixnum

	segdef	getchar		" routine to get nth char of pname atom or string.
getchar:	eax6	0		set esw

" getchar and getcharn join here.  x6 is nonzero for getcharn

	ldaq	ap|-4		" validate arguments.
	cana	Atsym+String,dl	" may be pname atom or string.
	tnz	good_getch1
getch_tsx4:tsx4	bad_arg		" bad first arg...
	staq	ap|-4
	tra	getchar+1		" retry with new value.

good_getch1:			" validate second argument...must be fixnum.
	ldaq	ap|-2		" second arg.
	cmpa	fixnum_type,dl	" must compare exactly.
	tze	good_getch2
getch_tsx4_2:
	tsx4	bad_arg
	staq	ap|-2
	tra	good_getch1	" retry with new value.

good_getch2:			" now do the operation.
	eppbp	ap|-4,*		" get pointer to string or atsym.
	lda	ap|-4
	cana	Atsym,dl		" if atsym, move pointer to point to name.
	tze	2,ic
	eppbp	bp|4		" name is 4 offset from beginning.

	sbq	1,dl		" q register still contains second argument.
	tmi	ret_nil_getch	" if <= 0 then return nil...out of range.
	cmpq	bp|0		" if > than number of chars in name,
	tpl	ret_nil_getch	" return nil for out of range.
	a9bd	bp|1,ql		bp -> char.  necc. because what length to put in mrl?
	mrl	(pr),(pr),fill(0)	unpack the character into a fixnum
	desc9a	bp|0,1
	desc9a	ap|-1,4
	ldaq	ap|-2		pick up result, fixnum type already set from arg
	eax6	0,x6
	tnz	getcharn_return-*,ic
	staq	ap|-4		make arg to call ascii with.
	eppap	ap|-2		and pop off other arg.
	tra	<lisp_reader_alm_>|[ascii_alm]

ret_nil_getch:
	ldaq	ab|nil		" return nil for out of bounds arguments.
	eax6	0,x6
	tze	2,ic
	 ldaq	 fixnum_zero-*,ic
getcharn_return:
	eppap	ap|-4
	tra	retrn1		" return as type 1 subr.

	segdef	prog1		"10/8/80 -BSG
prog1:	ldaq	ap|0,x5
	eppap	ap|0,x5
	tra	bp|0

	segdef	prog2
prog2:	ldaq	ap|2,x5		x5 contains -2*number of arguments.
	eppap	ap|0,x5
	tra	bp|0

	segdef	progn
progn:	ldaq	ap|-2
	eppap	ap|0,x5
	tra	bp|0

"
	segdef	and
and:	ldaq	ab|true		preload for no arguments.
and_loop:	lxl0	ap|-2
	canx0	Atomic,du		test type of remaining frag of arg list.
	tnz	and_done-*,ic
	eppap	ap|2		get space for eval argument.
	eppbp	ap|-4,*
	ldaq	bp|0
	staq	ap|-2
	ldaq	bp|2
	staq	ap|-4
	eax7	4,x7		now call eval...
	eax5	-2		1 argument.
	sprilp	ab|-4,x7
	stcd	ab|-2,x7		save return address.
	tra	<lisp_>|[eval_]	KLUDGE. requires that eval_ be bound in with this proc.
	cmpaq	ab|nil		check return val.
	tnz	and_loop-*,ic	if nil, then we are done.
and_done:	eppap	ap|-2		pop off rest of stuff on stack.
	tra	retrn1-*,ic	return to caller

	segdef	or
or:	ldaq	ab|nil		preload or of no arguments.
or_loop:	lxl0	ap|-2		check for atom at end of list.
	canx0	Atomic,du
	tnz	and_done-*,ic
	eppap	ap|2
	eppbp	ap|-4,*
	ldaq	bp|0
	staq	ap|-2
	ldaq	bp|2
	staq	ap|-4		and call eval now.
	eax7	4,x7
	eax5	-2		1 argument
	sprilp	ab|-4,x7
	stcd	ab|-2,x7
	tra	<lisp_>|[eval_]	KLUDGE. (see and)
	cmpaq	ab|nil
	tze	or_loop-*,ic
	tra	and_done-*,ic

"
	segdef	cond		" lisp conditional function.
cond:	eppap	ap|4		get room for temps.
	ldaq	ab|nil
	staq	ap|-2
cond_loop:lda	ap|-6		load type of cond list
	cana	Atomic,dl		and check for end of list.
	tnz	cond_done-*,ic
	eppbp	ap|-6,*		get head of list
	ldaq	bp|0
	staq	ap|-4		and store it as the next phrase.
	ldaq	bp|2		get cdr of cond list
	staq	ap|-6		and save for next time.
	ldaq	ap|-4,*		get predicate.
	staq	ap|-2		and set it to be arg to eval
	eax7	4,x7
	eax5	-2		1 argument
	sprilp	ab|-4,x7		set up call to eval...
	stcd	ab|-2,x7
	tra	<lisp_>|[eval_]	KLUDGE, requiring that cond be bound with eval.
	eppap	ap|2		save result on stack
	staq	ap|-2
	cmpaq	ab|nil
	tze	cond_loop-*,ic	loop back for next predicate.
cond_ev:	eppbp	ap|-4,*		get phrase
	ldaq	bp|2		load cdr of phrase
	cana	Atomic,dl		check for end
	tnz	cond_done-*,ic
	staq	ap|-4		and store as rest of phrase
	ldaq	ap|-4,*		load car of phrase
	staq	ap|-2		and store as next thing.
	eax7	4,x7
	eax5	-2		1 argument.
	sprilp	ab|-4,x7		save stuff for call to eval
	stcd	ab|-2,x7
	tra	<lisp_>|[eval_]	KLUDGE.
	eppap	ap|2
	staq	ap|-2		save result
	tra	cond_ev-*,ic
cond_done:ldaq	ap|-2		load last result
	eppap	ap|-6		pop off stacks
	tra	retrn1-*,ic	and go to return sequence.
"

	segdef	member
member:	lda	ap|-4		if first arg atomic, turn into memq
	cana	Atsym+Subr+Fixed+Float,dl	(see equal)
	tnz	memq-*,ic
	eax7	2,x7		save return address
	spribp	ab|-2,x7
	lda	ap|-2		load type of 2nd arg.
memb_lp:	cana	Atomic,dl		see if end of list.
	tnz	ret_mq-*,ic
	eppap	ap|4		get room for args to equal.
	ldaq	ap|-8		load our first arg.
	staq	ap|-4		and make it first equal arg.
	ldaq	ap|-6,*		get car of list remaining of 2nd arg
	staq	ap|-2		and save it as secind equal arg.
	tspbp	equal-*,ic	equal is a fast call subr.
	cmpaq	ab|nil		check result,
	tnz	ret_mq_obj-*,ic	and if truely equal, return list.
	eppbp	ap|-2,*		else take cdr of list,
	ldaq	bp|2
	staq	ap|-2		and make it the current list.
	tra	memb_lp-*,ic	and loop back to try again.

	segdef	memq
memq:	lda	ap|-2		check cdr of list
	eax7	2,x7		get space and
	spribp	ab|-2,x7		save return address.
mq_lp:	cana	Atomic,dl
	tnz	ret_mq-*,ic
	eppbp	ap|-2,*		get car of it
	ldaq	bp|0
	cmpaq	ap|-4		see if eq to first arg
	tze	ret_mq_obj-*,ic	and if so return ap|-2
	ldaq	bp|2
	staq	ap|-2		store cdr of list back
	tra	mq_lp-*,ic
ret_mq:	ldaq	ab|nil
	tra	2,ic		skip to return sequence.
ret_mq_obj:ldaq	ap|-2		load current object list
	eppap	ap|-4		restore stack
	tra	popj-*,ic
"
	segdef	sassoc
sassoc:	eax3	-2		offset to assoc args from ap.
				" NOTE: assumes x3 is not used by equal!
				" do not change equal to use x3 or call out.
	tra	assoc1-*,ic	jump into common code.

	segdef	assoc
assoc:	eax3	0		offset to assoc args from ap, see above
assoc1:	ldaq	ap|-4,x3		pick up arg 1
	cana	Atsym+Subr+Fixed+Float,dl
	tnz	assq1-*,ic	if eq =_ equal, use assq or sassq
	eppap	ap|6		get room for arg list to equal
	eax7	2,x7		and get space to save ret addr
	spribp	ab|-2,x7
	lda	ap|-8,x3		load type of list arg 2
ass_lp:	cana	Atomic,dl
	tnz	ret_ass_nil-*,ic
	ldaq	ap|-8,x3*		load car of arg 2
	cana	Atomic,dl		either it is atom, and should be skipped
	tnz	skip_ass-*,ic	or should look at its car
	staq	ap|-6		and save as possible return value
	ldaq	ap|-6,*		load car of that
	staq	ap|-2		and make arg of call to equal
	ldaq	ap|-10,x3		other arg is our first arg
	staq	ap|-4
	tspbp	equal-*,ic
	cmpaq	ab|nil
	tnz	assq_done-*,ic	if equal, then return value at ap|-2
	eppap	ap|4		get back space lost by equal
skip_ass:
	eppbp	ap|-8,x3*		get cdr of arg 2
	ldaq	bp|2
	staq	ap|-8,x3		and save it
	tra	ass_lp-*,ic
ret_ass_nil:
	eppap	ap|-4		pop some off stack
	tra	ret_assq_nil-*,ic
"
	segdef	sassq
sassq:	eax3	-2		offset of assoc args from ap.
	tra	assq1-*,ic	get into common code.
	segdef	assq
assq:	eax3	0		offset of args from ap
assq1:	eppap	ap|2
	eax7	2,x7
	spribp	ab|-2,x7
	lda	ap|-4,x3
assq_lp:	cana	Atomic,dl		check for end of lsit
	tnz	ret_assq_nil-*,ic
	eppbp	ap|-4,x3*		get car
	ldaq	bp|0
	cana	Atomic,dl
	tnz	skip_assq-*,ic	skip atomic list element
	staq	ap|-2		save list element
	ldaq	ap|-2,*		and get its car
	cmpaq	ap|-6,x3		compare with first arg
	tze	assq_done-*,ic	and if eq, return ap|-2
skip_assq:ldaq	bp|2		get cdr of list
	staq	ap|-4,x3		and save it
	tra	assq_lp-*,ic
assq_done:ldaq	ap|-2		load result
assq_ret:	eppap	ap|-6,x3		restore stack
	tra	popj-*,ic
ret_assq_nil:
	ldaq	ab|nil
	cmpx3	0,du		see which entry we came through.
	tze	assq_ret-*,ic	if assoc or sassoc, just return nil
" 				else want to apply third arg to nil.
	staq	ap|-4,x3		store in second arg position for apply.
	ldaq	ap|-2,x3		get function arg.
	eppap	ap|-2,x3		and bump back the stack.
	staq	ap|-4		save function as first arg to apply
	eax7	2,x7		now set up call to apply.
	ldaq	ab|-4,x7		load our old return address
	staq	ab|-2,x7		and make it apply's return address!
	sprilp	ab|-4,x7		save our caller's lp where apply will reload it
	epplp	ab|system_lp,*	get our lp (which must be apply's also,
				" since we are relying on fact that apply is bound in.)
	eax5	-4		load lsubr arg count.
	tra	<lisp_>|[apply_]	call apply who will return to our caller.
"
	segdef	delete
delete:	ldaq	ap|0,x5		get first argument
	cana	Atsym+Subr+Fixed+Float,dl	eq =_ equal for this?
	tnz	delq-*,ic		yes, turn into delq
	eax3	-1		load number for thing to be deleted as infinity.
	cmpx5	-4,du		check for two args
	tze	3,ic		if so, infinite number of deletions to be done.
	eax0	fn_delete
	tsx6	get_count-*,ic	else go to subroutine get count from third arg.
	eppap	ap|6		get room for args to equal, and temp
	cmpx3	0,du		check for no deletion case.
	tze	ret_del-*,ic
	lda	ap|-8		get second arg
head_loop:cana	Atomic,dl		see if not list, return if not.
	tnz	ret_del-*,ic
	ldaq	ap|-8,*		get car of second arg
	staq	ap|-2		make it arg to equal
	ldaq	ap|-10		get our first arg
	staq	ap|-4		make it equal's first
	tspbp	equal-*,ic
	eppap	ap|4		get back space
	cmpaq	ab|nil
	tze	end_head-*,ic	if not equal, then this phase is done.
	eppbp	ap|-8,*		get pointer to list
	ldaq	bp|2		load cdr
	staq	ap|-8
	eax3	-1,x3		decrement count of deleteions
	tnz	head_loop-*,ic	and go back to try again.
	tra	ret_del-*,ic
end_head:	ldaq	ap|-8
	staq	ap|-6		now we have to look at the cadr caddr ...
del_loop:	cmpx3	0,du		see if no more deletions to be done.
	tze	ret_del-*,ic
del_loop1:eppbp	ap|-6,*		get pointer to list cell whose cadr we are checking.
	lda	bp|2		see if there is a list at the cdr
	cana	Atomic,dl
	tnz	ret_del-*,ic	and if not, returm
	ldaq	bp|2,*		load cadr of list
	staq	ap|-2		and make it second arg to equal
	ldaq	ap|-10		load our first arg,
	staq	ap|-4		and make it equal's first
	tspbp	equal-*,ic
	eppap	ap|4		get back space
	eax2	2		so cdr's can be easily accessed.
	cmpaq	ab|nil		check result of equal call
	tze	no_del-*,ic	if not equal, don't delete
	eppbp	ap|-6,*		reload bp, clobbered by equal call
	ldaq	bp|2,*2		get cddr of list,
	staq	bp|2		and make it the cdr
	eax3	-1,x3		decrement count
	tra	del_loop-*,ic
no_del:	ldaq	ap|-6,*2
	staq	ap|-6		set result to cdr of result.
	tra	del_loop1-*,ic
ret_del:	ldaq	ap|-8
	eppap	ap|-10		back up stack
	tra	retrn1-*,ic

	segdef	delq
delq:	eax3	-1		load infinite deletion count
	cmpx5	-4,du		see if we got more than two args
	tze	3,ic		if not, don't check third arg.
	eax0	fn_delq
	tsx6	get_count-*,ic	get deletion count
	eppbp	ap|-2		bp always points at thing to replace if car eq
				" to deleted object.
	eax2	2		allows cdrs to be easily taken.
dloop:	cmpx3	0,du		see if any more are to be deleted.
	tze	dq_end-*,ic	if no more, return.
dloop1:	lda	bp|0		load type of current list position.
	cana	Atomic,dl		see if we are at end of list.
	tnz	dq_end-*,ic
	ldaq	bp|0,*		load car of list
	cmpaq	ap|-4		see if eq to our first arg
	tnz	no_dq-*,ic	if no deletion to be done go to get cdr
	ldaq	bp|0,*x2		load cdr of list
	staq	bp|0		and make it current list, rplacd'ing in place.
	eax3	-1,x3		decrement deletion counter
	tra	dloop-*,ic	and loop back
no_dq:	eppbp	bp|0,*2		go to cdr of list
	tra	dloop1-*,ic	and loop back
dq_end:	ldaq	ap|-2		load result
	eppap	ap|-4		pop args off stack
	tra	retrn1-*,ic	and return.
"
	segdef	rplaca
rplaca:	ldaq	ap|-4		load first arg
	cana	Atomic,dl		and check for valid rplaca
	tze	replace-*,ic	if list, then go ahead.
rplaca_tsx4:
	tsx4	bad_arg-*,ic	signal error.
	staq	ap|-4		replace argument,
	tra	rplaca-*,ic	and retry.
replace:	ldaq	ap|-2		load replacement
	staq	ap|-4,*		and store in car of list
	ldaq	ap|-4
	eppap	ap|-4		pop back stack
	tra	retrn1-*,ic	rplaca is type one subr.

	segdef	rplacd
rplacd:	eax2	2		we are to replace cdr. (no checking is done either)
	ldaq	ap|-2		load replacement
	staq	ap|-4,*x2		and zap it into cons.
	ldaq	ap|-4		load result
	eppap	ap|-4		pop stack,
	tra	bp|0		and return.

	segdef	displace
displace:	lda	ap|-4		load first argument
	cana	Atomic,dl		Make sure it's not atomic
	tze	displace_ok-*,ic	OK, go ahead
displace_tsx4:
	tsx4	bad_arg-*,ic	signal error.
	staq	ap|-4		replace argument,
	tra	displace-*,ic	and retry.
displace_ok:
	lda	ap|-2		see if second argument is atomic
	cana	Atomic,dl
	tnz	displace_atom	if so, replace with `(progn (,y))
	ldaq	ap|-2,*		otherwise, get (car y)
	staq	ap|-4,*		(rplaca x (car y))
	eax2	2		Now do the cdrs
	ldaq	ap|-2,*x2		(cdr y)
	staq	ap|-4,*x2		(rplacd x (cdr y))
	ldaq	ap|-4		return new x
	eppap	ap|-4
	tra	retrn1-*,ic

displace_atom:
	ldaq	lisp_static_vars_$progn_atom
	staq	ap|-4,*		(rplaca x 'progn)
	eax7	4,x7		Make way for calling ncons
	sprilp	ab|-4,x7		save lp
	stcd	ab|-2,x7		and return location
	tra	lisp_alloc_$ncons_ 
	eax2	2		store in cdr
	staq	ap|-2,*x2		(rplacd x (ncons y))
	ldaq	ap|-2		return new x
	eppap	ap|-2
	tra	retrn1-*,ic

"	routine to get 3rd arg as a fixed number in x3.
"	it may signal a correctable error.
"
get_count:
	eppap	ap|6,x5		make sure no more than three args exist.
	ldaq	ap|-2		get count arg
	eppap	ap|-2
chk_count:cmpa	fixnum_type,dl
	tnz	get_count_tsx4-*,ic
	cmpq	0,dl		check for negative argument.
	tpl	good_count-*,ic
get_count_tsx4:
	tsx4	bad_arg-*,ic	call bad argument signaller.
	tra	chk_count-*,ic	and try again.
good_count:
	eax3	0,ql		get count in x3
	tra	0,x6		return
"
	segdef	setq
setq:	eppap	ap|4		get room
	ldaq	ab|nil		get default return value.
nxt_setq: lxl0	ap|-6		load type of fsubr arg.
	canx0	Atomic,du		and check for end.
	tze	more_setq-*,ic	if no end continue.
	eppap	ap|-6		pop off stack
	tra	retrn1-*,ic	and return
more_setq:ldaq	ap|-6,*		load first of list.
chk_name: cana	Atsym,dl		see if atomic.
	tnz	good_atom-*,ic
setq_tsx4:
	tsx4	bad_arg-*,ic	signal bad argument.
	tra	chk_name-*,ic	and retry if new value returned.
good_atom:cmpaq	ab|nil		see if trying to setq nil.
	tze	set_nil-*,ic	signal uncorrectable error if so.
	staq	ap|-4		remember thing set.
	eppbp	ap|-6,*		get next of list
	eppbp	bp|2,*		..
	ldaq	bp|0		get value
	staq	ap|-2
	ldaq	bp|2		get rest of list
	staq	ap|-6		and leave for next time.
	eax7	4,x7		get room for call to eval
	eax5	-2		and set number of args
	sprilp	ab|-4,x7		save our lp, which is same as eval's
	stcd	ab|-2,x7		and save return address.
	tra	<lisp_>|[eval_]	call eval
	staq	ap|-2,*		setq the atom we saved.
	eppap	ap|2		get back space for eval call.
	tra	nxt_setq-*,ic

	segdef	set
set:	ldaq	ap|-4		load first arg.
retry_set:
	cana	Atsym,dl		check atom.
	tnz	set_atm-*,ic
set_tsx4:
	tsx4	bad_arg-*,ic	signal correctable error
	staq	ap|-4		reset arg.
	tra	retry_set-*,ic	and try again
set_atm:	cmpaq	ab|nil		check for set of nil.
	tze	set_nil-*,ic	and signal error if so.
	ldaq	ap|-2		load value.
	staq	ap|-4,*		and store it
	eppap	ap|-4		pop stack
	tra	retrn1-*,ic

set_nil:	eax7	2,x7		we want to signal error
	lda	nihil_ex_nihile,dl
	sta	ab|-2,x7		push code on stack
	spriap	<lisp_static_vars_>|[stack_ptr]
	stx7	<lisp_static_vars_>|[unmkd_ptr]+1
	stc1	ab|in_pl1_code
	push
	eppap	null_arg_list-*,ic
	short_call 	<lisp_error_>|[lisp_error_]
	drl	0,dl		should never get here.
	even
null_arg_list:
	oct	4
	oct	0
one_arg:
	oct	2000004,0
"
"	procedure to signal the correctable bad argument condition.
"	called with tsx4, with aq containing bad argument,
"	x6 containing data which needs to be saved (as perhaps a return address)
"	and which returns with aq set to replacement value.
"
bad_arg:	eppap	ap|2		get room for arg to lisp_error_
	staq	ap|-2		and save value.
	eax7	4,x7		get some room on unmkd_pdl
	stx6	ab|-3,x7		save x6 for caller.
	sxl5	ab|-3,x7		also save x5 for lsubrs.
	stx4	ab|-4,x7		save our return address

	" get code for function name into q, based on our caller's
	" address in x4, except when called from get_count in which
	" case the value is already in x0 (with minus sign).

	cmpx4	get_count_tsx4+1,du
	tnz	get_my_name-*,ic
	eaq	0,x0
	qrs	18
	tra	got_name-*,ic

get_my_name:
	eaq	-name_tbl_len	search table of tsx4 addresses.
search_for_name:
	cmpx4	name_tbl,qu
	tze	4,ic		found it
	eaq	1,qu		not found, keep looking
	tnz	search_for_name-*,ic
	tra	got_name-*,ic	" not found, will use zero
				" should'nt happen anyway
	ldq	name_tbl,qu	found, get code in low half
	qls	18		extend sign bit
	qrs	18
got_name:
	lda	bad_arg_correctable,dl	load error code
	staq	ab|-2,x7		and push it
	spriap	<lisp_static_vars_>|[stack_ptr]
	stx7	<lisp_static_vars_>|[unmkd_ptr]+1
	stc1	ab|in_pl1_code
	push
	eppap	null_arg_list-*,ic
	short_call	<lisp_error_>|[lisp_error_]
	eaa	sp|16,*		back up stack
	sprisp	sb|stack_header.stack_end_ptr
	eppsp	sb|0,au
	epbpab	<lisp_static_vars_>|[unmkd_ptr],*
	ldx7	<lisp_static_vars_>|[unmkd_ptr]+1
	eppap	<lisp_static_vars_>|[stack_ptr],*
	stz	ab|in_pl1_code
	ldx4	ab|-2,x7		reload return address
	ldx6	ab|-1,x7		and x6 for caller.
	lxl5	ab|-1,x7	also x5 for lsubrs.
	eax7	-2,x7
	ldaq	ap|-2		reload new value
	eppap	ap|-2		and reset stack.
	tra	0,x4		return to caller.

	even
random_init:
	oct	267762113337,155256071112
				"This is the initial value for the random number generator.
	segdef	random		Lisp lsubr to return a random number.
				"With no args it returns a random number, with an arg it resets to inital value.
random:	cmpx5	0,du		See if there are any args (x5 contains -2*number_of_args).
	tze	random0-*,ic	If none, go to return a random number.
	ldaq	ap|0,x5		get argument.
chk_random:
	cmpaq	ab|nil
	tze	init_random	if nil, restart sequence
	cmpa	fixnum_type,dl	see if fixnum
	tze	random_bounded
random_tsx4:
	tsx4	bad_arg
	staq	ap|0,x5			store new val away.
	tra	chk_random
init_random:
	ldaq	random_init	get the initial value.
	staq	<lisp_static_vars_>|[hi_random]
				"And then store it.
	ldaq	ap|-2		Get the argument, to return it.
	eppap	ap|0,x5		Pop off the arg(s) from the marked pdl.
	tra	retrn1-*,ic	And go to the common return sequence.
random0:	eax0	retrn1		set return operator.
random1:	ldaq	<lisp_static_vars_>|[hi_random]
				"First load the aq with two numbers, H(q) and L(q).
	sta	<lisp_static_vars_>|[lo_random]
				"The next state for the low part, L(q+1), is just the high part, H(q).
	lrl	1		Now right shift everthing in the aq one cell.
	erq	<lisp_static_vars_>|[lo_random]
				"Do an exclusive or between H(q) and L(q) that has been right-shifted.
	stq	<lisp_static_vars_>|[hi_random]
				"And this becomes the high part.
				"Or H(q+1) = H(q) +O ((2**36)*H(q) + L(q))/2
	lda	fixnum_type,dl	We will return H(q+1) as a number.
	tra	0,x0		return to caller.

random_bounded:
	lda	ap|1,x5		load argument.
	cmpa	2,dl
	tmi	ret_zero		if arg < 2 then always return zero.
	tsx0	random1
	cmpq	0,dl		check for negative result.
	tpl	2,ic
	negl	0		negate q...note that a cannot be 4000000000..
	div	ap|1,x5		divide by the argument.
	lrl	36		shift remainder to q
	lda	fixnum_type,dl
	eppap	ap|0,x5		pop stack
	tra	retrn1
ret_zero:	ldaq	fixnum_zero
	eppap	ap|0,x5
	tra	retrn1

"

" table of tsx4 addresses (du) and corresponding function name codes (dl)

	zero	rplaca_tsx4+1,fn_rplaca
	zero	setq_tsx4+1,fn_setq
	zero	set_tsx4+1,fn_set
	zero	oddp_tsx4+1,fn_oddp
	zero	random_tsx4+1,fn_random
	zero	getch_tsx4+1,fn_getchar
	zero	getch_tsx4_2+1,fn_getchar
	zero	zerop_tsx4+1,fn_zerop
	zero	displace_tsx4+1,fn_displace
name_tbl:
	equ	name_tbl_len,9

	end
