" **************************************************************
" *                                                            *
" * Copyright, (C) Massachusetts Institute of Technology, 1973 *
" *                                                            *
" **************************************************************
" alm garbage for reader

" 29 Nov 1972, D. A. Moon
" Modified 28 Mar 73 for new I/O kludge
" Modified 4 August 1973 for fast chrct, linel
"	**** this modification makes this routine incompatible with the 645 processor
" modified 19 October 1973 by DAM for new syntax bits, new iochan format
 " modified 74.09.21 by DAM to accept t for tty as well as nil

	segdef	powers_of_ten

	entry	left_shift,tyi,tyipeek,readch,ascii_alm,tyo_alm

	tempd	argl(4)
	temp	temp
	equ	save_bp,26		the arg-ptr save loc (kludge)

	bool	NL,12			newline

	segref	lisp_static_vars_,obarray,ctrlW,tty_output_chan,read_print_nl_sync,rdr_state,ctrlQ,tty_input_chan
	segref	lisp_static_vars_,ctrlR,infile,outfiles,readtable
	equ	status_terpri,296		offset of status_terpri in read_table

" use of registers

" x0	calls by tsx0
" x1	-> eppbp ext_entry instruction for call_out
" x2 	temp
" x3	temp
" x4	-> failure exit, which switches to pl1 version of same routine when hard case
" x5	-2*nargs for lsubrs
" x6	temp
" x7	unmkd pdl ptr

" bp	-> iochan block.  Also ptr temp
" ap	mkd pdl ptr
" lp	-> our linkage section
" lb	temporary

" q	character (right adjusted)
" aq	lisp object




	include	lisp_iochan
	include	lisp_array_fmt
	include	lisp_stack_seg
	include	stack_header
	include	lisp_object_types
	include	lisp_error_codes

	segdef	listen		" random subr for compatibility
listen:	eppbp	tty_input_chan,*	" get number of chars in input buffer
	ldq	bp|iochan.iolength
	sbq	bp|iochan.ioindex
	tpl	2,ic		" make sure positive (?)
	ldq	0,dl
	lda	fixnum_type,dl
	tra	ab|return_op,*

" fast versions of tyi, tyipeek, readch.  If trouble is encountered, the slow versions
" in lisp_reader_ are called.  These are type 1 subrs.

tyi:	eax4	real_tyi			establish failure exit
	tsx0	set_inp
	tsx0	rdinch
	aos	bp|iochan.ioindex
	lda	fixnum_type,dl
" 					the character is in the q reg
	eppap	ap|0,x5
	tra	ab|return_op,*


tyipeek:	eax4	real_tyipeek		establish failure exit
	cmpx5	0,du			any args?
	tnz	0,x4			yes, too hard to do this version of tyipeek here.
					"no one ever uses it anyway so no loss in efficiency.
	tsx0	set_inp
	tsx0	rdinch
	lda	fixnum_type,dl
	tra	ab|return_op,*


" come here if need to use pl1 version of function

real_tyi:	tsx1 	copout
	eppbp	<lisp_reader_>|[real_tyi]

real_tyipeek:
	tsx1	copout
	eppbp	<lisp_reader_>|[real_tyipeek]

real_readch:
	tsx1	copout
	eppbp	<lisp_reader_>|[real_readch]
real_ascii:
	tsx1	call_out0
	eppbp	<lisp_reader_>|[ascii]

real_tyo:	tsx1	copout
	eppbp	<lisp_print_>|[tyo]


copout:	eaq	0,x5			put -2*nargs as lisp number
	qrs	18
	lda	fixnum_type,dl
	eppap	ap|2
	staq	ap|-2
" routine to call out to pl1 program.


" called with x1 -> eppbp instrruction for entry to be called
" returns by ab|return_op

call_out0:
	tsx0	call_out
	tra	ab|return_op,*

" this one returns to x0


call_out:	spriap	<lisp_static_vars_>|[stack_ptr]
	stx7	<lisp_static_vars_>|[unmkd_ptr]+1
	stc1	ab|in_pl1_code
	push				" this macro better not change x0, x1 !!
	xec	0,x1			load bp with addr of ext entry
	call	bp|0			must make null arg list, save index regs

	epbpab	<lisp_static_vars_>|[unmkd_ptr],*
	eaa	sp|16,*
	sprisp	sb|stack_header.stack_end_ptr
	eppsp	sb|0,au
	ldx7	<lisp_static_vars_>|[unmkd_ptr]+1
	eppap	<lisp_static_vars_>|[stack_ptr],*
	stz	ab|in_pl1_code
	ldaq	ap|-2
	eppap	ap|-2
	tra	0,x0




" ascii function

ascii_alm:
	eax4	real_ascii			establish failure exit
	ldaq	ap|-2
	cmpa	fixnum_type,dl			check for valid arg
	tnz	0,x4
	cmpq	128,dl
	trc	0,x4
	tsx0	get_sing_char
	eppap	ap|-2
	tra	ab|return_op,*


readch:	eax4	real_readch			establish failure exit
	tsx0	set_inp
	tsx0	rdinch
	epplb	bp|0				save ptr to iochan through get_sing_char

	tsx0	get_sing_char
	eppap	ap|0,x5				now return the character atom from the obarray
	aos	lb|iochan.ioindex				bumping iochan.ioindex
	tra	ab|return_op,*

" routine to get character atom from obarray, character in q
" uses bp,aq,x6

get_sing_char:
	qls	1
	eax3	0,ql				for later use in indexing the obarray
	ldaq	obarray,*				is obarray really an array?
	cana	Array,dl
	tze	0,x4				no, fail
	eppbp	obarray,*				-> atom
	eppbp	bp|0,*				-> array_info
	ldx6	bp|array_info.type
	cmpx6	Obarray_array,du
	tnz	0,x4				no, fail

	eppbp	bp|array_data_ptr,*
	ldaq	bp|511*2,x3			valid obarray, examine char obj cell
	cmpaq	ab|nil				has char obj been interned yet?
	tze	0,x4				no, fail
	tra	0,x0				yes, succeed



" tyo function
"   this is a simplified version of the character output code in lisp_print_

tyo_alm:	eax4	real_tyo				establish failure exit
	ldaq	ap|0,x5				make sure argument is OK
	cmpa	fixnum_type,dl			has to be a number,
	tnz	0,x4
	cmpq	128,dl				between 0 and 128.
	trc	0,x4				(tricky)

" now find out what destinations we're going to send the output to

	eax2	-1				clear sent-to-tty flag
	eppap	ap|6,x5				leave three cells for munging around in

" the character to be output is in ap|-5

" this is dump_character from lisp_print_.pl1
" but it has get_dest in it too, done in line instead of by setting flags

output_char:
	cmpx5	-2,du				should maybe go to tty?
	tnz	tyo.3
	ldaq	ctrlW,*				yes, if ^w allows it
	cmpaq	ab|nil
	tnz	2,ic
	tsx3	to_tty				yes.

" now send output to dest spec by ^r, outfiles

	ldaq	ctrlR,*
	cmpaq	ab|nil
	tze	tyo.5				no.
	ldaq	outfiles,*
	tra	to_list_join

"this is code to put to special channel (tyo with 2 args)

tyo.3:
	ldaq	ap|-4				special channel, look at it
	cana	lisp_ptr.type,dl			list?
	tze	to_list				yes, go do a do loop
to_one:						"no, just output to one
	tsx3	to_file
	tra	tyo.5

"this is do loop to output to a list of files in ap|-4

to_list:
	ldaq	ap|-4,*
	tsx3	to_file
	eppbp	ap|-4,*
	ldaq	bp|2
to_list_join:
	staq	ap|-4
	cana	lisp_ptr.type,dl				more to list?
	tze	to_list

tyo.5:						"all done, return t.
	ldaq	ab|true
	eppap	ap|-6
	tra	ab|return_op,*


to_file:
	cmpaq	ab|nil
	tze	to_tty
	cmpaq	ab|true
	tze	to_tty
	cana	File,dl
	tnz	to_file_ok
	staq	ap|-2
	eax7	2,x7
	lda	bad_output_dest,dl
	sta	ab|-2,x7
	eax1	lisp_error_
	tsx0	call_out
	ldaq	ap|-2
	tra	to_file
lisp_error_:
	eppbp	<lisp_error_>|[lisp_error_]

to_file_ok:
	easpbp	0,au
	eawpbp	0,qu
	ldq	ap|-5
	tsx6	to_anyplace
	tra	tyo_nl_maybe


to_tty:
	eax2	1,x2				check to-tty-flag
	tnz	0,x3				only send to tty once
	ldq	ap|-5
	eppbp	tty_output_chan,*
	szn	read_print_nl_sync
	tze	3,ic
	cmpq	NL,dl
	tze	2,ic
	tsx6	to_anyplace

	stz	read_print_nl_sync
tyo_nl_maybe:
	epplb	readtable,*		-> value cell of atom readtable
	epplb	lb|0,*			-> readtable array
	szn	lb|status_terpri		put status_terpri in indicators
	tmi	flush2			(status terpri) /= nil, no extra NL.
	lda	bp|iochan.flags
	cana	iochan.image_mode,du
	tnz	flush2
	lda	bp|iochan.linel
	tze	flush2
	cmpa	bp|iochan.charpos
	tpnz	flush2			linel > charpos, don't need an extra NL
	ldq	NL,dl			type extra NL.
	tsx6	to_anyplace
	lda	iochan.extra_nl_done,du
	orsa	bp|iochan.flags

flush2:
	lda	bp|iochan.flags
	cana	iochan.seg,du
	tnz	0,x3
	cana	iochan.charmode,du
	tnz	5,ic
	cana	iochan.interactive,du
	tze	0,x3
	cana	iochan.nlsync,du
	tze	0,x3

	cana	iochan.write,du
	tnz	0,x3
	szn	bp|iochan.ioindex
	tmoz	0,x3

	eax0	0,x3

" empty a buffer, pointed at by bp.  return to x0

empty_buff:
	eax4	0,ql				save the character in the q reg
	tsx1	ipush
	eppbp	sp|save_bp,*
	eppap	sp|save_bp
	spriap	argl+2
	eppap	q1qb
	spriap	argl+4
	eppap	temp
	spriap	argl+6
	lda	bp|iochan.flags
	cana	not_ok_to_write,du
	tze	flush3
	eppbp	<lisp_io_control_>|[fix_not_ok_iochan]
	tsx1	icall
	szn	temp
	tnz	popret
flush3:
	eppap	<lisp_static_vars_>|[stack_ptr],*
	epbpab	ap|0
	ldaq	ab|nil
	staq	ap|-2
	eppap	ap|-2
	spriap	argl+4
	eppbp	<lisp_io_control_>|[end_of_block]
	tsx1	icall
popret:	eaq	0,x4				reload the char into q from x4
	qrl	18
	lxl4	temp
	tsx1	ipop
	tra	0,x0

q1qb:	oct	400000000000				"1"b
	even
three_args:
	zero	6,4
	zero	0,0
ipush:	spriap	<lisp_static_vars_>|[stack_ptr]
	stx7	<lisp_static_vars_>|[unmkd_ptr]+1
	stc1	ab|in_pl1_code
	eppap	bp|0				make bp get saved in sp|26 (= sp|save_bp)
	push
	tra	0,x1

ipop:	eppbp	sp|save_bp,*			restore bp
	epbpab	<lisp_static_vars_>|[unmkd_ptr],*
	eaa	sp|16,*
	sprisp	sb|stack_header.stack_end_ptr
	eppsp	sb|0,au
	ldx7	<lisp_static_vars_>|[unmkd_ptr]+1
	eppap	<lisp_static_vars_>|[stack_ptr],*
	stz	ab|in_pl1_code
	tra	0,x1

icall:	ldaq	three_args
	staq	argl
	call	bp|0(argl)
	tra	0,x1



to_any_ch_code:
	cmpx4	0,du
	tnz	0,x6
	tra	to_anyplace_aa

to_anyplace:
	lda	bp|iochan.flags
	cana	not_ok_to_write,du
	tze	3,ic
	 tsx0	 empty_buff
	 tra	 to_any_ch_code
	lda	bp|iochan.ioindex
	cmpa	bp|iochan.iolength
	tze	-4,ic
	lda	flag_reset_mask,du
	ansa	bp|iochan.flags

to_anyplace_aa:
	lda	bp|iochan.ioindex
	eax4	0,al
	anx4	3,du
	ars	2
	epplb	bp|iochan.ioptr,*al
	eaa	0,ql				save char for compares
	xec	qls,x4				align char in q
	xec	stbq,x4
	aos	bp|iochan.ioindex
" check for control character, if so do specially good things.

	cmpa	=o40,du
	tmi	tyo_control_table,au*	control character, do specially good things.
	cmpa	=o177,du
	tpl	0,x6			rubout - don't advance charpos
	aos	bp|iochan.charpos		normal character, advance charpos (caller checks for endofline)
	tra	0,x6


tyo_control_table:
	arg	0,x6			null - do nothing
	arg	0,x6			^A - do nothing
	arg	0,x6			^B - do nothing
	arg	0,x6			^C - do nothing
	arg	0,x6			^D - do nothing
	arg	0,x6			^E - do nothing
	arg	0,x6			^F - do nothing
	arg	0,x6			^G - do nothing
	arg	tyo_backspace		BS - subtract one from charpos
	arg	tyo_tab			HT - adjust charpos to next tabstop
	arg	tyo_newline		NL - adjust charpos, linenum
	arg	0,x6			^K - do nothing
	arg	tyo_newpage		NP - adjust charpos, linenum, pagenum
	arg	tyo_car_ret		CR - adjust charpos
	arg	0,x6			^N - do nothing
	arg	0,x6			^O - do nothing
	arg	0,x6			^P - do nothing
	arg	0,x6			^Q - do nothing
	arg	0,x6			^R - do nothing
	arg	0,x6			^S - do nothing
	arg	0,x6			^T - do nothing
	arg	0,x6			^U - do nothing
	arg	0,x6			^V - do nothing
	arg	0,x6			^W - do nothing
	arg	0,x6			^X - do nothing
	arg	0,x6			^Y - do nothing
	arg	0,x6			^Z - do nothing
	arg	0,x6			$O  - do nothing
	arg 	0,x6			\034 - do nothing
	arg	0,x6			\035 - do nothing
	arg	0,x6			\036 - do nothing
	arg	0,x6			\037 - do nothing


tyo_newline:
	stz	bp|iochan.charpos
	lda	iochan.nlsync,du
	orsa	bp|iochan.flags
	aos	bp|iochan.linenum
	lda	bp|iochan.pagel
	tze	0,x6			0 pagel = infinite
	cmpa	bp|iochan.linenum		page exceeded?
	tpnz	0,x6			no, return
tyo_newpage:
	stz	bp|iochan.charpos			NP causes return to left margin
	stz	bp|iochan.linenum
	aos	bp|iochan.pagenum		advance to next page

" page overflow - invoke endpagefn

	lda	bp|iochan.flags
	cana	iochan.interactive,du		if this is the tty, can't endpage
	tnz	0,x6
	ldaq	bp|iochan.function
	cmpaq	ab|nil
	tze	0,x6			no endpagefn - leave
	eax5	-4
	eppap	ap|4
	staq	ap|-4			function to apply
	eax7	6,x7			prepare type-1 call
	spribp	ab|-2,x7			put type bits in bp
	ldaq	ab|-2,x7
	ora	File,dl
	staq	ap|-2			argument to endpagefn is the file object
"					assume can't happen to tty
	sprilp	ab|-4,x7
	stx6	ab|-6,x7			save registers 3 and 6
	stx3	ab|-5,x7
	epplp	ab|system_lp,*
	stcd	ab|-2,x7
	tra	<lisp_>|[funcall]

	ldx6	ab|-2,x7			restore registers 3 and 6
	ldx3	ab|-1,x7
	eax7	-2,x7			pop extraneous cruft off unmarked stack
	tra	0,x6


tyo_backspace:
	lca	1,dl
	szn	bp|iochan.charpos
	tze	2,ic
	 asa	 bp|iochan.charpos
	tra	0,x6

tyo_tab:
	ldq	bp|iochan.charpos
	adq	10,dl
	div	10,dl
	mpy	10,dl
	stq	bp|iochan.charpos
	tra	0,x6

tyo_car_ret:
	stz	bp|iochan.charpos
	tra	0,x6


" xec vectors for storing char from q into word pointed at by sn,wo=lb, co=x4

qls:	qls	27
	qls	18
	qls	9
	nop	0,du

stbq:	stbq	lb|0,40
	stbq	lb|0,20
	stbq	lb|0,10
	stbq	lb|0,04

"fast type-0 lsubrs to examine and modify certain file-object attributes.

	segdef	chrct,linel,charpos,pagel,linenum,pagenum

chrct:	tsx1	process_file_arg		call common routine
	eppbp	<lisp_io_fns_>|[chrct]	instruction to get to pl1 code if can't do it here
	xed	pick_up_chrct		instruction to load the value into q, lb -> iochan
	xed	put_down_chrct		instruction to store q into the value, lb -> iochan

	even
pick_up_chrct:
	ldq	lb|iochan.linel		convert charpos to chrct
	sbq	lb|iochan.charpos

put_down_chrct:
	ldq	lb|iochan.linel		convert chrct to charpos
	xed	*+1
	sbq	ap|-1			(chrct is known to be here as well as in q)
	stq	lb|iochan.charpos

linel:	tsx1	process_file_arg
	eppbp	<lisp_io_fns_>|[linel]
	ldq	lb|iochan.linel
	stq	lb|iochan.linel

charpos:	tsx1	process_file_arg
	eppbp	<lisp_io_fns_>|[charpos]
	ldq	lb|iochan.charpos
	stq	lb|iochan.charpos

pagel:	tsx1	process_file_arg
	eppbp	<lisp_io_fns_>|[pagel]
	ldq	lb|iochan.pagel
	stq	lb|iochan.pagel

linenum:	tsx1	process_file_arg
	eppbp	<lisp_io_fns_>|[linenum]
	ldq	lb|iochan.linenum
	stq	lb|iochan.linenum

pagenum:	tsx1	process_file_arg
	eppbp	<lisp_io_fns_>|[pagenum]
	ldq	lb|iochan.pagenum
	stq	lb|iochan.pagenum


process_file_arg:
	cmpx5	-2,du		get entry?
	tnz	process_file_arg_2	no.
	ldaq	ap|-2		yes, get file object
	cmpaq	ab|nil		tty?
	tze	process_file_arg_nil
	cmpaq	ab|true
	tze	process_file_arg_nil
	cana	File,dl
	tze	process_file_arg_err
	epplb	ap|-2,*		no, pick up ptr to file object
process_file_arg_nil_a:
	xec	1,x1		pick up value to be gotten
	lda	fixnum_type,dl
"	tra	popaj		and return
popaj:	eppap	ap|0,x5		pop off arguments.
	tra	bp|0		and return to caller

process_file_arg_nil:
	tsx2	get_file_object_of_nil
	tra	process_file_arg_nil_a

get_file_object_of_nil:
	link	tty_output_chan_l,<lisp_static_vars_>|[tty_output_chan],*
	epplb	ab|system_lp,*
	epplb	lb|tty_output_chan_l,*	lb := lisp_static_vars_$tty_output_chan
	tra	0,x2

process_file_arg_err:
"
" can't do it here, escape out to the pl1 code
" first must pretend we were a type-1 subr

	eax7	4,x7
	spribp	ab|-2,x7
	sprilp	ab|-4,x7

" now go away to pl1

	epplp	ab|system_lp,*
	tra	copout		0,x1 is eppbp instruction to pl1 version


process_file_arg_2:
	cmpx5	-4,du			called with 2 args
	tnz	process_file_arg_err

	ldaq	ap|-4			file-object argument
	cmpaq	ab|nil
	tze	process_file_arg_2_nil
	cmpaq	ab|true
	tze	process_file_arg_2_nil
	cana	File,dl
	tze	process_file_arg_err
	epplb	ap|-4,*
process_file_arg_3:
	ldaq	ap|-2			pick up number to be stored
	cmpa	fixnum_type,dl
	tnz	process_file_arg_err
	xec	2,x1			do the store
	tra	popaj			and return (result = 2nd arg is in aq)

process_file_arg_2_nil:
	tsx2	get_file_object_of_nil
	tra	process_file_arg_3

" routines copied from lisp_reader_

" set_inp sets bp to the appropriate iochan.  If input is from a read list
"  or if end of file or end of buffer has been reached, returns to 0,x4
"  If successful, returns to 0,x0.

set_inp:	ldq	rdr_state			check for macro char in readlist causing special case
	cmpq	2,dl
	tze	0,x4			yes, can't handle it here - go to lisp_reader_
" look for special channel specified by an argument
	eax3	0,x5			set up to scan arg list
	tze	cke
cka:	ldaq	ap|0,x3
	cana	File,dl
	tnz	spchan
	cmpaq	ab|nil
	tze	set_inp_tty
	cmpaq	ab|true
	tze	set_inp_tty
	eax3	2,x3
	tnz	cka
cke:	ldaq	ctrlQ,*
	cmpaq	ab|nil
	tnz	uread
set_inp_tty:
	eppbp	tty_input_chan,*
set_inp_aa:
	ldq	bp|iochan.ioindex
	cmpq	bp|iochan.iolength
	tpl	0,x4			EOF - can't handle it here

	tra	0,x0			WIN.

spchan:	eppbp	ap|0,x3*
	tra	set_inp_aa

uread:	ldaq	<lisp_static_vars_>|[infile],*
	cana	File,dl
	tze	set_inp_tty
	easpbp	0,au
	eawpbp	0,qu
	tra	set_inp_aa


" rdinch reads in one character, returns it right justified in the q
"  bp must point at the iochan block.



rdinch:	lda	bp|iochan.ioindex
	ldq	0,du
	lrs	2			divide by 4
	qrl	36-2			right justify the remainder
	lda	bp|iochan.ioptr,*al		get word containing character
	lrl	shifts,ql*		right justify the character
	anq	=o177,dl			mask off to (7 bit) character 
	cmpq	=o036,dl			bsg ctrl prefix?
	tze	0,x4			yes, only PL/I reader handles this.
	cmpx4	real_tyipeek,du		don't do vertical motion cruft if
	tze	0,x0			this is tyipeek.

" at this point character is in q, bp -> iochan.  we handle vertical motion here.

	lda	initial_readtable,ql	this is kludgy way to test for NL and NP
	cana	2000,du			vertical_motion right-shifted 18.
	tze	0,x0			ordinary character, return.

	cmpq	NL,dl
	tnz	vm01

" newline, bump linenum

	stz	bp|iochan.charpos
	aos	bp|iochan.linenum
	lda	bp|iochan.pagel
	tze	0,x0			pagel of 0 = infinite
	cmpa	bp|iochan.linenum		end of page?
	tpnz	0,x0			no, return
	stz	bp|iochan.linenum		page exceeded, bump pagenum
	aos	bp|iochan.pagenum
	tra	0,x0			NOTE - it is not necessary to call endpagefn for input files.

vm01:	cmpq	12,dl			NP - this check is unnecc but do it anyway
	tnz	0,x0
	stz	bp|iochan.charpos		adnace to new page
	stz	bp|iochan.linenum
	aos	bp|iochan.pagenum
	tra	0,x0

shifts:	arg	27+36
	arg	18+36
	arg	9+36
	arg	0+36


left_shift:
	lda	ap|4,*			get shift count
					" - should check for bounds here.
	ldq	ap|2,*			get number to be shifted
	qls	0,al			shift it the right amount
	stq	ap|2,*			put it back
	short_return			and exit


" table of double floating powers of ten, from 10**-38 up to 10**+38

	even
powers_of_ten:
	oct	404663437347,325170710457
	oct	414420163520,505213435275
	oct	422524220444,626456344554
	oct	430651264555,774172035707
	oct	440411660744,575514222534
	oct	446514235135,735037267263
	oct	454637304365,324247145140
	oct	464403472631,304550377174
	oct	472504411377,565702477033
	oct	500625513677,523263216642
	oct	506773036657,450140062412
	oct	516474723215,571074037446
	oct	524614110061,127313047357
	oct	532757132075,355175661253
	oct	542465370246,324216516653
	oct	550602666320,011262242426
	oct	556743444004,013536713133
	oct	566456166402,407233236771
	oct	574571624103,111102106567
	oct	602730171123,733322530325
	oct	612447113564,351103527205
	oct	620560736521,443324455046
	oct	626715126245,754211570257
	oct	636440165747,563526053155
	oct	644550223341,520453466010
	oct	652702270232,044566403412
	oct	662431363140,226752042146
	oct	670537657770,274544452600
	oct	676667633766,353675565340
	oct	706422701372,023326451314
	oct	714527461670,430214163577
	oct	722655376246,536257220537
	oct	732414336750,132755432333
	oct	740517426542,161550741022
	oct	746643334272,616103131227
	oct	756406111564,570651767636
	oct	764507534121,727024365606
	oct	772631463146,314631463147
	oct	002400000000,000000000000
	oct	010500000000,000000000000
	oct	016620000000,000000000000
	oct	024764000000,000000000000
	oct	034470400000,000000000000
	oct	042606500000,000000000000
	oct	050750220000,000000000000
	oct	060461132000,000000000000
	oct	066575360400,000000000000
	oct	074734654500,000000000000
	oct	104452013710,000000000000
	oct	112564416672,000000000000
	oct	120721522450,400000000000
	oct	130443023471,240000000000
	oct	136553630407,510000000000
	oct	144706576511,432000000000
	oct	154434157115,760200000000
	oct	162543212741,354240000000
	oct	170674055531,647310000000
	oct	200425434430,110475000000
	oct	206532743536,132614200000
	oct	214661534465,561357240000
	oct	224417031701,446725444000
	oct	232522640261,760512755000
	oct	240647410336,354635550200
	oct	250410545213,024002441120
	oct	256512676455,631003151344
	oct	264635456171,177204003635
	oct	274402374713,617422402302
	oct	302503074076,563327102762
	oct	310623713116,320214723556
	oct	316770675742,004260110511
	oct	326473426555,202556055315
	oct	334612334310,443311470600
	oct	342755023372,554174006740
	oct	352464114134,543515404254
	oct	360601137163,674440705327
	oct	366741367020,653551066614
	oct	376454732312,413241542167

""" here is the initial readtable, extracted from lisp_reader_init_.pl1

	segdef	initial_readtable

" NB: the macro_table portion is omitted, and must
" be supplied by anyone who copies this table into a LISP array.

" define syntax bits

	bool	forcefeed,4000000000	(ITS)
	bool	vertical_motion,2000000000	NL, NP
	bool	string_quote_exp,1000000000	", E
	bool	special,400000000		
	bool	single_char_object,200000000	standalone pname
	bool	blank,100000000			space, tab, comma, etc.
	bool	lparn,40000000			(, super-(
	bool	dotted_pair_dot,20000000		. for cons
	bool	rparn,10000000			), super-)
	bool	macro,4000000			character macro
	bool	slashifier,2000000		escape char 
	bool	rubout,1000000			(ITS)
	bool	slash_if_first,400000	print control
	bool	decimal_point,200000	. for numbers
	bool	slash_if_not_first,100000	print control
	bool	slash_output,500000		..	
	bool	bit12,40000		changes meaning of other bits
	bool	splice,40000
	bool	shift_scale,20000		^ or _	
	bool	plus_minus,10000		+ or -	
	bool	digit,4000		0,...,9	
	bool	extd_alpha,2000		random chars as alpha 
	bool	alpha,1000		alphabetic



""" Here are the 132 syntax table entries
initial_readtable:

	vfd	36/special+slash_output		\000
	vfd	36/special+slash_output		^A
	vfd	36/special+slash_output		^B	- these random ctrl chars are ignored
	vfd	36/special+slash_output		^C
	vfd	36/special+slash_output		^D
	vfd	36/special+slash_output		^E
	vfd	36/special+slash_output		^F
	vfd	36/special+slash_output		^G
	vfd	36/extd_alpha			BS - allow underlined pnames
	vfd	36/special+blank+slash_output		HT
	vfd	36/special+blank+vertical_motion+slash_output	NL
	vfd	36/special+blank+slash_output		VT
	vfd	36/special+blank+vertical_motion+slash_output	NP
	vfd	36/special+blank+slash_output		CR
	vfd	36/special+slash_output		^N	- more worthless control chars
	vfd	36/special+slash_output		^O
	vfd	36/special+slash_output		^P
	vfd	36/special+slash_output		^Q
	vfd	36/special+slash_output		^R
	vfd	36/special+slash_output		^S
	vfd	36/special+slash_output		^T
	vfd	36/special+slash_output		^U
	vfd	36/special+slash_output		^V
	vfd	36/special+slash_output		^W
	vfd	36/special+slash_output		^X
	vfd	36/special+slash_output		^Y
	vfd	36/special+slash_output		^Z
	vfd	36/extd_alpha			altmode
	vfd	36/special+slash_output		\034
	vfd	36/special+slash_output		\035
	vfd	36/special+slash_output		\036
	vfd	36/special+slash_output		\037
	vfd	36/special+blank+slash_output		SP
	vfd	36/extd_alpha			!
	vfd	36/special+string_quote_exp+bit12+slash_output	"
	vfd	36/extd_alpha			#
	vfd	36/extd_alpha			$
	vfd	36/extd_alpha			%
	vfd	36/extd_alpha			&
	vfd	36/special+macro+slash_output		'
	vfd	36/special+lparn+slash_output		(
	vfd	36/special+rparn+slash_output		)
	vfd	36/extd_alpha			*
	vfd	36/slash_if_first+plus_minus		+
	vfd	36/special+blank+slash_output		,
	vfd	36/slash_if_first+plus_minus+bit12	-
	vfd	36/special+dotted_pair_dot+slash_output+decimal_point	.
	vfd	36/special+slashifier+slash_output	/
	vfd	36/slash_if_first+digit		0
	vfd	36/slash_if_first+digit		1
	vfd	36/slash_if_first+digit		2
	vfd	36/slash_if_first+digit		3
	vfd	36/slash_if_first+digit		4
	vfd	36/slash_if_first+digit		5
	vfd	36/slash_if_first+digit		6
	vfd	36/slash_if_first+digit		7
	vfd	36/slash_if_first+digit		8
	vfd	36/slash_if_first+digit		9
	vfd	36/extd_alpha			:
	vfd	36/special+macro+slash_output+splice	semicolon
	vfd	36/extd_alpha			<
	vfd	36/extd_alpha			=
	vfd	36/extd_alpha			>
	vfd	36/extd_alpha			?
	vfd	36/extd_alpha			@
	vfd	36/alpha				A
	vfd	36/alpha				B
	vfd	36/alpha				C
	vfd	36/alpha				D
	vfd	36/string_quote_exp+alpha		E
	vfd	36/alpha				F
	vfd	36/alpha				G
	vfd	36/alpha				H
	vfd	36/alpha				I
	vfd	36/alpha				J
	vfd	36/alpha				K
	vfd	36/alpha				L
	vfd	36/alpha				M
	vfd	36/alpha				N
	vfd	36/alpha				O
	vfd	36/alpha				P
	vfd	36/alpha				Q
	vfd	36/alpha				R
	vfd	36/alpha				S
	vfd	36/alpha				T
	vfd	36/alpha				U
	vfd	36/alpha				V
	vfd	36/alpha				W
	vfd	36/alpha				X
	vfd	36/alpha				Y
	vfd	36/alpha				Z
	vfd	36/extd_alpha			[
	vfd	36/extd_alpha			\
	vfd	36/extd_alpha			]
	vfd	36/extd_alpha+shift_scale		^
	vfd	36/extd_alpha+shift_scale+bit12	_
	vfd	36/extd_alpha			`
	vfd	36/alpha				a
	vfd	36/alpha				b
	vfd	36/alpha				c
	vfd	36/alpha				d
	vfd	36/string_quote_exp+alpha		e
	vfd	36/alpha				f
	vfd	36/alpha				g
	vfd	36/alpha				h
	vfd	36/alpha				i
	vfd	36/alpha				j
	vfd	36/alpha				k
	vfd	36/alpha				l
	vfd	36/alpha				m
	vfd	36/alpha				n
	vfd	36/alpha				o
	vfd	36/alpha				p
	vfd	36/alpha				q
	vfd	36/alpha				r
	vfd	36/alpha				s
	vfd	36/alpha				t
	vfd	36/alpha				u
	vfd	36/alpha				v
	vfd	36/alpha				w
	vfd	36/alpha				x
	vfd	36/alpha				y
	vfd	36/alpha				z
	vfd	36/extd_alpha			{
	vfd	36/special+macro+slash_output			|
	vfd	36/extd_alpha			}
	vfd	36/extd_alpha			~
	vfd	36/special+slash_output		rubout
	vfd	36/special+slashifier+slash_output	"pseudo slash"
	vfd	36/special+lparn+slash_output		"pseudo left parenthesis"
	vfd	36/special+rparn+slash_output		"pseudo right parenthesis"
	zero	special+blank+slash_output		"pseudo space"


""" Here is the translation table

	dec	0
	dec	1
	dec	2
	dec	3
	dec	4
	dec	5
	dec	6
	dec	7
	dec	8
	dec	9
	dec	10
	dec	11
	dec	12
	dec	13
	dec	14
	dec	15
	dec	16
	dec	17
	dec	18
	dec	19
	dec	20
	dec	21
	dec	22
	dec	23
	dec	24
	dec	25
	dec	26
	dec	36			translate altmode to dollar sign
	dec	28
	dec	29
	dec	30
	dec	31
	dec	32
	dec	33
	dec	34
	dec	35
	dec	36
	dec	37
	dec	38
	dec	1			standard quote macro
	dec	40
	dec	41
	dec	42
	dec	43
	dec	44
	dec	45
	dec	46
	dec	47
	dec	48
	dec	49
	dec	50
	dec	51
	dec	52
	dec	53
	dec	54
	dec	55
	dec	56
	dec	57
	dec	58
	dec	2			standard semicolon macro
	dec	60
	dec	61
	dec	62
	dec	63
	dec	64
	dec	65
	dec	66
	dec	67
	dec	68
	dec	69
	dec	70
	dec	71
	dec	72
	dec	73
	dec	74
	dec	75
	dec	76
	dec	77
	dec	78
	dec	79
	dec	80
	dec	81
	dec	82
	dec	83
	dec	84
	dec	85
	dec	86
	dec	87
	dec	88
	dec	89
	dec	90
	dec	91
	dec	92
	dec	93
	dec	94
	dec	95
	dec	96
	dec	97
	dec	98
	dec	99
	dec	100
	dec	101
	dec	102
	dec	103
	dec	104
	dec	105
	dec	106
	dec	107
	dec	108
	dec	109
	dec	110
	dec	111
	dec	112
	dec	113
	dec	114
	dec	115
	dec	116
	dec	117
	dec	118
	dec	119
	dec	120
	dec	121
	dec	122
	dec	123
	dec	3	standard vertical bar macro
	dec	125
	dec	126
	dec	127
	dec	47			pseudo slash
	dec	40			pseudo (
	dec	41			pseudo )
	dec	32			pesudo space


	end
