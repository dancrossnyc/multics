" **************************************************************
" *                                                            *
" * Copyright, (C) Massachusetts Institute of Technology, 1973 *
" *                                                            *
" **************************************************************
	name 	lisp_save_alm_

" This routine fixes all the its pairs in a segment to have real segment numbers
" it is called by the unsaver.
" It is written in alm for extra speed.		(10 Nov 1973, DAM)

	even
al_qu_mask:
	zero	0,-1
	zero	-1,0

	segdef	lisp_save_alm_
lisp_save_alm_:
	" arg 1: ptr of seg to do, chain header
	" arg 2: address of pseudo-segment number table, must be unpacked pointers with ring numbers.
	" also it relies on the fact that it is bound in with lisp_subr_tv_

	epplb	<lisp_subr_tv_>|[tv_begin]

	eppbb	ap|4,*		pick up ptr to segno_table
	eppbb	bb|0,*

	eppap	ap|2,*		-> ptr to seg
	epbpbp	ap|0,*		base of segment to be processed
	eax0	ap|0,*		chain header
	tze	return		if no chain, return to lisp_save_
	sprilb	ap|0		clobber argument with ptr to sys tv for use later

loop:
	ldaq	bp|0,x0		its pair to be fixed up
	eax1	0,au		pseudo segment 0?
	tnz	g0001		 no

	eaq	lb|0,qu		yes.  relocate offset into tv + clear chain field
	ora	ap|0		set system tv segno + ring field + or in its which is ok.
	tra	g0002

g0001:	adx1	bp|0,x0		x1 := 2 x pseudo segno
	anaq	al_qu_mask	au := 0, ql := 0
	ora	bb|-2,x1		set segno + ring + or in its which is OK
g0002:
	lxl1	bp|1,x0		pick up next chain
	staq	bp|0,x0		fix up pointer
	eax0	0,x1		move chain to right register + check if 0
	tnz	loop

return:
	short_return

	end
