" **************************************************************
" *                                                            *
" * Copyright, (C) Massachusetts Institute of Technology, 1973 *
" *                                                            *
" **************************************************************
"
"	lisp_car_cdrs_	- contains all the car's and cdr's of lisp....
"
"
"  Modified 1982.10.06 by Richard Lamson to add nth and nthcdr
"


	include	lisp_object_types

	segdef	car
	segdef	quote
	segdef	cdr

"	The fast two...

quote:
car:	ldaq	ap|-2,*
	tra	zap_out-*,ic
cdr:	eax0	2		for post index
	ldaq	ap|-2,*0
zap_out:	eppap	ap|-2		pop stack back
	tra	bp|0		and return

"
"	Now the slightly slower ones, entered with a save lp...
"
	segdef	cddddr
	segdef	cadddr
	segdef	cdaddr
	segdef	caaddr
	segdef	cddadr
	segdef	cadadr
	segdef	cdaadr
	segdef	caaadr
	segdef	cdddar
	segdef	caddar
	segdef	cdadar
	segdef	caadar
	segdef	cddaar
	segdef	cadaar
	segdef	cdaaar
	segdef	caaaar

	segdef	cdddr
	segdef	caddr
	segdef	cdadr
	segdef	caadr
	segdef	cddar
	segdef	cadar
	segdef	cdaar
	segdef	caaar

	segdef	cddr
	segdef	cadr
	segdef	cdar
	segdef	caar

cddddr:	eppbp	ap|-2,*
	eppbp	bp|2,*
cddd:	eppbp	bp|2,*
cdd:	eppbp	bp|2,*
cd:	ldaq	bp|2
c:	eppap	ap|-2
	epplp	ab|-4,7*
	eppbp	ab|-2,7*
	eax7	-4,7
	tra	bp|0

cadddr:	eppbp	ap|-2,*
	eppbp	bp|2,*
cadd:	eppbp	bp|2,*
cad:	ldaq	bp|2,*
	tra	c-*,ic
cdaddr:	eppbp	ap|-2,*
	eppbp	bp|2,*
cdad:	eppbp	bp|2,*
cda:	eppbp	bp|0,*
	tra	cd-*,ic
caaddr:	eppbp	ap|-2,*
	eppbp	bp|2,*
caad:	eppbp	bp|2,*
caa:	ldaq	bp|0,*
	tra	c-*,ic
cddadr:	eppbp	ap|-2,*
	eppbp	bp|2,*
cdda:	eppbp	bp|0,*
	tra	cdd-*,ic
cadadr:	eppbp	ap|-2,*
	eppbp	bp|2,*
cada:	eppbp	bp|0,*
	tra	cad-*,ic
cdaadr:	eppbp	ap|-2,*
	eppbp	bp|2,*
cdaa:	eppbp	bp|0,*
	tra	cda-*,ic
caaadr:	eppbp	ap|-2,*
	eppbp	bp|2,*
caaa:	eppbp	bp|0,*
	tra	caa-*,ic
cdddar:	eppbp	ap|-2,*
	eppbp	bp|0,*
	tra	cddd-*,ic
caddar:	eppbp	ap|-2,*
	eppbp	bp|0,*
	tra	cadd-*,ic
cdadar:	eppbp	ap|-2,*
	eppbp	bp|0,*
	tra	cdad-*,ic
caadar:	eppbp	ap|-2,*
	eppbp	bp|0,*
	tra	caad-*,ic
cddaar:	eppbp	ap|-2,*
	eppbp	bp|0,*
	tra	cdda-*,ic
cadaar:	eppbp	ap|-2,*
	eppbp	bp|0,*
	tra	cada-*,ic
cdaaar:	eppbp	ap|-2,*
	eppbp	bp|0,*
	tra	cdaa-*,ic
caaaar:	eppbp	ap|-2,*
	eppbp	bp|0,*
	tra	caaa-*,ic

cdddr:	eppbp	ap|-2,*
	tra	cddd-*,ic
caddr:	eppbp	ap|-2,*
	tra	cadd-*,ic
cdadr:	eppbp	ap|-2,*
	tra	cdad-*,ic
caadr:	eppbp	ap|-2,*
	tra	caad-*,ic
cddar:	eppbp	ap|-2,*
	tra	cdda-*,ic
cadar:	eppbp	ap|-2,*
	tra	cada-*,ic
cdaar:	eppbp	ap|-2,*
	tra	cdaa-*,ic
caaar:	eppbp	ap|-2,*
	tra	caaa-*,ic

cddr:	eppbp	ap|-2,*
	tra	cdd-*,ic
cadr:	eppbp	ap|-2,*
	tra	cad-*,ic
cdar:	eppbp	ap|-2,*
	tra	cda-*,ic
caar:	eppbp	ap|-2,*
	tra	caa-*,ic

" nth:  (nth n list): returns (ca(d**n)r list)
	segdef	nth
nth:	lxl0	ap|-3	get n in x0
	eppbp	ap|-2,*	and the list in bp
nthloop:	eax0	-1,x0	count
	tmi	nthreturns-*,ic
	eppbp	bp|2,*	cdr
	tra	nthloop-*,ic
nthreturns:
	ldaq	bp|0	return car
	eppap	ap|-4     pop our args.
	tra	c+1-*,ic

" nthcdr: (nthcdr n list) returns (c(d**n)r list)
	segdef	nthcdr
nthcdr:	lxl0	ap|-3	get n in x0
	eax7	2,x7
	sprilp	ab|-2,x7
	epplp	ap|-2	get address first cons in lp
	eppbp	lp|0,*	and the cons in bp
	lda	Atomic,dl
nthcdrloop:
	cana	lp|0	test to see if end of list
	tnz	nthcdrreturnsnil-*,ic
	eax0	-1,x0	count
	tmi	nthcdrreturns-*,ic
	epplp	bp|2	pointer to next cons
	eppbp	lp|0,*	cdr
	tra	nthcdrloop-*,ic
nthcdrreturns:
	epplp	ab|-2,x7*
	eax7	-2,x7
	spribp	ap|-4	we need to return this cdr
	ldaq	ap|-4	get it into AQ
	eppap	ap|-4	pop our args
	tra	c+1-*,ic	return
nthcdrreturnsnil:
	epplp	ab|-2,x7*
	eax7	-2,x7
	ldaq	lisp_static_vars_$nil
	eppap	ap|-4
	tra	c+1-*,ic


	end
