" **************************************************************
" *                                                            *
" * Copyright, (C) Massachusetts Institute of Technology, 1973 *
" *                                                            *
" **************************************************************
" lisp_utils_.alm

" This segment contains the arithmetic functions and
" a few other random functions.

" translated from PL/I to ALM  28 August 1972 by D.A.Moon
" ***** must be bound in with lisp_ and lisp_error_ since
" relies on calling through links without the lp loaded.


	include	lisp_stack_seg
	include	stack_header
	equ	t,true
	include	lisp_object_types
	include	lisp_error_codes
	include	lisp_name_codes

" REGISTER USAGE
"
" ap	marked pdl pointer
" ab	-> lisp stack header
" bp	return addr (type 0 subr)
" bb
" lp,lb,sp,sb     not used
"
" x0	tsx0 register
" x1	-> routine to check arg for arith1, arith2
" x2	temp. used by numval.  badarg is called by tsx2
" x3	-> instr for xec or xed (quasi impure code)
" x4	ap,x4 -> current arg, also x4 is loop counter.
" x5	-2*nargs for lsubrs, not changed.
" x6	while in function xxx, contains function name code fn_xxx.
" x7	unmarked pdl pointer (with ab)

" routine to do eax4 -2   ,   tsx0 numval
" called by tsx0
" used for subrs of one argument so they don't have to
" do the eax4 themselves

numval1:	eax4	-2			and fall into numval

" routine to get the type of a numeric argument
" called by tsx0 with ap,x4 pointing at the argument
" keeps signalling bad_arg_correctable errors until it gets a number
" skip return if fixnum, nonskip return if flonum.
" changes only registers 0,2 -- doesn't touch aq.

numval:	lxl2	ap|0,x4			get type bits without touching aq
	canx2	Fixed,du
	tnz	1,0			fixnum, skip rtn
	canx2	Float,du
	tnz	0,0			flonum, nonskip rtn
	eax2	numval-*,ic		set error return address and fall into badarg

" not a number, signal error
" the function name code is in x6
" the bad arg is at ap|0,x4
" **** KLUDGE: assumes that we are bound in with lisp_error_
"      so that we don't have to do a getlp.
" called by tsx2, returns to 0,2 with replacement value written over bad arg

badarg:	eax7	10,x7			get save area
	sprilp	ab|-10,x7			save lp of caller, so can get system lp.
	staq	ab|-8,x7			save aq (e reg saved by sreg)
	spribp	ab|-6,x7			save bp (return addr)
	eaq	0,x6			get fcn name code
	qrs	18
	lda	bad_arg_correctable,dl
badarg1:
	staq	ab|-2,x7			set error codes for lisp_error_
	eppbp	ap|0,x4			save addr of bad arg
	spribp	ab|-4,x7
	ldaq	bp|0			get bad arg
	eppap	ap|2			put on top of pdl for lisp_error_
	staq	ap|-2
fatal_error:				" overflow_err joins here.
	epplp	ab|system_lp,*		get lp for system modules.
	spriap	<lisp_static_vars_>|[stack_ptr]	save our stack pointers
	stx7	<lisp_static_vars_>|[unmkd_ptr]+1
	stc1	ab|in_pl1_code
	push
	call	<lisp_error_>|[lisp_error_]	""" we rely on this call saving xr's and e reg
	eaa	sp|16,*			then pop this dummy stack frame
	sprisp	sb|stack_header.stack_end_ptr
	eppsp	sb|0,au
	eppap	<lisp_static_vars_>|[stack_ptr],*
	epbpab	<lisp_static_vars_>|[unmkd_ptr],*
	ldx7	<lisp_static_vars_>|[unmkd_ptr]+1
	stz	ab|in_pl1_code
	ldaq	ap|-2			get replacement value
	eppap	ap|-2			..
	staq	ab|-2,x7*			store over bad arg
	ldaq	ab|-6,x7			restore aq at entry
	eppbp	ab|-4,x7*			restore bp at entry
	epplp	ab|-8,x7*			restore to caller's lp.
	eax7	-8,x7			pop temps off pdl
	tra	0,2			return to caller.

	even
	zero	0,nonfixedarg
	oct	0

" routines to return in divers ways

" return the value at the top of the marked pdl (for 1 arg subr)

ret_1:	ldaq	ap|-2

" return value in aq, popping 1 arg off marked pdl

lisp_retn_1: eppap	ap|-2
	tra	bp|0			*** these are type 0 subrs

" return t for 1 arg subr

ret_t:	ldaq	ab|t
	eppap	ap|-2
	tra	bp|0

" return nil for 1 arg subr

ret_nil:	ldaq	ab|nil
	eppap	ap|-2
	tra	bp|0

" return t for lsubr

l_ret_t:	ldaq	ab|t
	eppap	ap|0,x5			pop args off pdl
	tra	bp|0

" return nil for lsubr

l_ret_nil: ldaq	ab|nil
	eppap	ap|0,x5			pop args off pdl
	tra	bp|0
" return a fixnum from an lsubr

retfixnum:lda	fixnum_type,dl			value is in q
	eppap	ap|0,x5
	tra	bp|0

" return a flonum from an lsubr
" value of flonum is in a-q-e

retflonum:fst	ap|1,x5				**** assumes arg 1 was numeric
	ldq	ap|1,x5				this moves flonum to q
	lda	flonum_type,dl
	eppap	ap|0,x5
	tra	bp|0

" fixing & floating routines

" these are all called by tsx0

" routine to float the q, returning result in a-q-e

float_q:	llr	36			fx1_to_fx2
	lrs	36
	lde	=71b25,du			fx2_to_fl2
	fad	=0.0,du			normalize
	tra	0,0

" routine to float the fixnum pointed at by ap,x4 without
" changing the a, q, or e.

float1:	eax7	2,x7			have to save aqe
	dfst	ab|-2,x7
	lda	ap|1,x4			get number to be floated
	lrs	36
	lde	=71b25,du
	fad	=0.0,du
	fst	ap|1,x4			put it back where it came from
	dfld	ab|-2,x7			restore a q e
	eax7	-2,x7
	tra	0,0

" routine to fix the flonum in a-q-e, result is in q
" check for overflow is made

fix_aq:	fad	=0.0,du			normalize and set indicators
	tmi	fix_aq_minus-*,ic
	fcmp	=o110400,du		2**35
	tpl	fix_ovf-*,ic
	ufa	=71b25,du
	tra	0,0

fix_aq_minus:
	fcmg	=o110400,du		2**35
	tpl	fix_ovf-*,ic
	fneg	0			magic ufa only works for +
	ufa	=71b25,du
	negl	0
	tra	0,0

fix_ovf:	eppap	ap|2
	eax7	2,x7
	fst	ab|-2,x7			get flonum format
	ldq	ab|-2,x7
	lda	flonum_type,dl
	staq	ap|-2
	lda	overflow_err,dl
	eaq	0,x6
	qrs	18
	staq	ab|-2,x7
	tra	fatal_error-*,ic		never returns from lisp_error_
 
" routines for fixnum - only or flonum - only incrementing / decrementing.
" x3 -> xed pair to do the work
"	for arith2 is xec inst, which can be xed if pair needed.
" x1 -> fixval or floval routine
" x6 =  function name code.

" these 2 support routines are called by tsx0 to get a
" floating number or a fixed number.

	tra	retflonum			flo exit
floval:	lxl2	ap|0,x4			get type bits
	canx2	Float,du
	tnz	0,0			flonum -- win.
	tsx2	badarg-*,ic		not flonum, cause error
	tra	floval-*,ic

	tra	retfixnum			fix exit
fixval:	lxl2	ap|0,x4			check type bits
	canx2	Fixed,du
	tnz	0,0			fixnum -- win.
	tsx2	badarg-*,ic		not fixnum -- error.
	tra	fixval-*,ic

" routine to do one - operand arithmetic using
" x3, x1 as described above.  Entered with x6 also set up.

	odd
arith1:	eax4	-2			one arg.
	tsx0	0,1			check type of arg
	xed	0,x3			perform operation.
	tra	ret_1-*,ic		and return the value at top of stack.



" using x3, x1 as described above. Entered
" with x5, x6 set up.
" and initial value in q (fix) or aqe (float).

	odd				" must make the xec in odd word to allow xed.
prearith2: cmpx5	-2,du			" check for one arg case of -, -$, //, //$
	tnz	arith2
	tsx0	0,1
	xec	3,x3			" do the operation.
	tra	-1,x1			" and return the result.
arith2:	eax4	0,x5			-> first arg
	tze	-1,1			if no args return value in q register.
	tsx0	0,1			check type of arg
	xec	0,x3			perform operation
	eax4	2,x4			next arg.
	tmi	-3,ic			and loop.
	tra	-1,1			go to appropriate exit routine.

" non - mixed mode increment / decrement routines. (Using subroutines
" on the preceding page.)

" increment fixnum.

	segdef	add1_fix			subr (1 0 0)

add1_fix:	eax6	fn_add1_fix
	eax1	fixval-*,ic
	eax3	add1_fix_op-*,ic
	tra	arith1-*,ic

	even
add1_fix_op:
	aos	ap|-1
	nop	0,du


" increment flonum

	segdef	add1_flo			subr (1 0 0)

add1_flo:	eax6	fn_add1_flo
	eax1	floval-*,ic
	eax3	add1_flo_op-*,ic
	tra	arith1-*,ic

	even
add1_flo_op:
	fld	ap|-1
	xed	*+1
	fad	=1.0,du
	fst	ap|-1


" decrement fixnum

	segdef	sub1_fix			subr (1 0 0)

sub1_fix:	eax6	fn_sub1_fix
	eax1	fixval-*,ic
	eax3	sub1_fix_op-*,ic
	tra	arith1-*,ic

	even
sub1_fix_op:
	lca	1,dl
	asa	ap|-1


" decrement flonum

	segdef	sub1_flo			subr (1 0 0)

sub1_flo:	eax6	fn_sub1_flo
	eax1	floval-*,ic
	eax3	sub1_flo_op-*,ic
	tra	arith1-*,ic

	even
sub1_flo_op:
	fld	ap|-1
	xed	*+1
	fsb	=1.0,du
	fst	ap|-1

" plus function for fixnums only.

	segdef	plus_fix		lsubr (777000 0 0)

plus_fix:	eax6	fn_plus_fix
	eax1	fixval-*,ic
	ldq	0,dl
	tsx3	arith2-*,ic
	adq	ap|1,x4


" plus function for flonum's only.

	segdef	plus_flo			lsubr (777000 0 0)

plus_flo:	eax6	fn_plus_flo
	eax1	floval-*,ic
	fld	=0.0,du
	tsx3	arith2-*,ic
	fad	ap|1,x4

" exponentiation function for fixnum to fixnum power

	segdef	expt_fix

expt_fix:	eax6	fn_expt_fix
	eax4	-4			get first arg
	tsx0	fixval-*,ic
	eax4	-2			get second arg
	tsx0	fixval-*,ic
" OK, got args.  Set up for successive squaring hackery

	eax7	2,x7
	ldq	ap|-3			base in q
	lda	ap|-1			exponent in a
	tmi	ret_fix_0-*,ic
	staq	ab|-2,x7
	ldq	1,dl
	stq	ap|-3			init result
expt_fix0:ldaq	ab|-2,x7
	cana	1,dl
	tze	expt_fix1-*,ic
	mpy	ap|-3			multiply into result
	stq	ap|-3
	ldaq	ab|-2,x7
expt_fix1:arl	1
	tze	ret_fix_result-*,ic
	sta	ab|-2,x7
	mpy	ab|-1,x7			square it
	stq	ab|-1,x7
	tra	expt_fix0-*,ic

ret_fix_0:stz	ap|-3			neg exponent - zero result
ret_fix_result:
	ldaq	ap|-4			pick up result & type
	eax7	-2,x7			flush temporaries
	eppap	ap|-4			..
	tra	bp|0			and return

" flonum to a fixnum power

	segdef	expt_flo

expt_flo:	eax6	fn_expt_flo
	eax4	-4			get first arg
	tsx0	floval-*,ic
	eax4	-2			get second arg
	tsx0	fixval-*,ic
	eax7	2,x7			get temporaries
	fld	=1.0,du			init result
	dfst	ab|-2,x7
	lda	ap|-1			check sign of exponent
	tpl	expt_fl0-*,ic
	fld	=1.0,du			minus - invert base
	fdv	ap|-3
	fst	ap|-3
	lca	ap|-1			change sign of exponent
expt_fl0:	tze	return_flo_result-*,ic	all done
	cana	1,dl			see if should mpy
	tze	expt_fl1-*,ic		no.
	sta	ap|-1			yes - store a first
	fld	ap|-3			get current square
	dfmp	ab|-2,x7			mpy into result
	dfst	ab|-2,x7
	tra	2,ic
expt_fl1:	sta	ap|-1			save exponent
	fld	ap|-3			compute next square
	fmp	ap|-3
	fst	ap|-3
	lda	ap|-1
	arl	1
	tra	expt_fl0-*,ic

return_flo_result:
	dfld	ab|-2,x7			round off result
	fstr	ap|-3
	tra	ret_fix_result-*,ic		and return it, popping, etc.

" times function for fixnum's only

	segdef	times_fix			lsubr (777000 0 0)

times_fix: eax6	fn_times_fix
	eax1	fixval-*,ic
	ldq	1,dl
	tsx3	arith2-*,ic
	mpy	ap|1,x4


" times function for flonum's only

	segdef	times_flo			lsubr (777000 0 0)

times_flo: eax6	fn_times_flo
	eax1	floval-*,ic
	fld	=1.0,du
	tsx3	arith2-*,ic
	fmp	ap|1,x4

" difference of fixnum's only

	segdef	diff_fix			lsubr (777000 0 0)

diff_fix:	eax6	fn_diff_fix
	eax1	fixval-*,ic
	ldq	0,dl			make sure there is a result if no args supplied.
	eax3	diff_fix_op_1-*,ic		initial op just loads num
	tra	prearith2-*,ic

	odd
diff_fix_op_1:
	xed	*+1
	ldq	ap|1,x4			load first arg
	eax3	*+1			and switch to the following,
	sbq	ap|1,x4			which subtracts the remaining args

" difference of flonum's only.

	segdef	diff_flo			lsubr (777000 0 0)

diff_flo:	eax6	fn_diff_flo
	eax1	floval-*,ic
	fld	=0.0,du			initial result.
	eax3	diff_flo_op_1-*,ic
	tra	prearith2-*,ic

	odd
diff_flo_op_1:
	xed	*+1
	fld	ap|1,x4			load first arg,
	eax3	*+1			and set up subtract remaining args
	fsb	ap|1,x4

" quotient of fixnum's only

	segdef	quot_fix			lsubr (777000 0 0)

quot_fix:	eax6	fn_quot_fix
	eax1	fixval-*,ic
	ldq	1,dl			initialize zero arg case.
	eax3	quot_fix_op_1-*,ic		initial operator
	tra	prearith2-*,ic

	odd
quot_fix_op_1:
	xed	*+1
	ldq	ap|1,x4			this opr loads first arg,
	eax3	*+1			and sets up to divide by rest of args
	div	ap|1,x4

" quotient of flonum's only

	segdef	quot_flo			lsubr (777000 0 0)

quot_flo:	eax6	fn_quot_flo
	eax1	floval-*,ic
	fld	=1.0,du			initialize zero arg case.
	eax3	quot_flo_op_1-*,ic
	tra	prearith2-*,ic

	odd
quot_flo_op_1:
	xed	*+1
	fld	ap|1,x4			load first arg
	eax3	*+1
	fdv	ap|1,x4			divide by remaining ones.

" lsh function shifts a fixnum left or right a 
" specified number of binary places.

	segdef	lsh			subr (2 0 0)

lsh:	eax6	fn_lsh
	eax4	-4			arg1 must be fixnum
	tsx0	numval-*,ic 		or flonum (treated as fixnum)
	eax4	-2			arg2 must be fixnum
	tsx0	fixval-*,ic
	ldq	ap|-3			get number to be shifted
	lda	ap|-1			get shift count
	tmi	lshneg-*,ic		neg = shift right
	tze	lshret1-*,ic		zero = don't shift
	cmpa	36,dl			shift right out of register?
	tpl	lshret0-*,ic		yes, result is zero
	qls	0,al			no, shift.
	tra	lshret1-*,ic

lshneg:	neg	0			get count of right shifts
	cmpa	36,dl			shift right out of reg?
	tpl	lshret0-*,ic		yes, result is zero
	qrl	0,al			no, do the shift
	tra	lshret1-*,ic

lshret0:	ldq	0,dl
lshret1:	lda	fixnum_type,dl
	eppap	ap|-4
	tra	bp|0

" fsc function, takes a flonum and scales it. (ade instruction).

	segdef	fsc
fsc:	eax6	fn_fsc
	eax4	-4		" first arg must be a fixnum or flonum
	tsx0	numval
	eax4	-2
	tsx0	fixval

	lda	ap|-1		" get scale factor.
	als	36-8		" shift to exponent position.
	sta	ap|-1
	fld	ap|-3		" load up the floating point number.
	fad	=0.0,du		" normalize
	ade	ap|-1		" scale.
	fst	ap|-3
	ldq	ap|-3
	lda	flonum_type,dl

	eppap	ap|-4
	tra	bp|0

" rot function rotates a fixnum left or right a
" specified number of binary places

	segdef	rot			subr (2 0 0)

rot:	eax6	fn_rot
	eax4	-4			arg1 must be fixnum
	tsx0	fixval-*,ic
	eax4	-2			arg2 must be fixnum
	tsx0	fixval-*,ic
	ldq	ap|-1			get shift count
	div	36,dl			modulo word length
	ada	0,dl			set indicators from a (remainder)
	tpl	2,ic
	ada	36,dl			if right rot is indicated, use
					"the equivalent left rot.
	tze	rot0-*,ic			if shift count is zero
	ldq	ap|-3			get number to be rotated
	qlr	0,al			do it
	tra	lshret1-*,ic		and return it.

rot0:	ldq	ap|-3			(rot num 0)
	tra	lshret1-*,ic		just returns argument 1.

" ifix function -- fixes a floating argument, into a fixnum.
" if arg is too large, is an error.

	segdef	ifix
ifix:	eax6	fn_ifix
	eax4	-2
	tsx0	floval
	fld	ap|-1
	fcmg	maxfix
	tmi	3,ic
	tsx2	badarg
	tra	ifix
	ufa	=71b25,du
	lda	fixnum_type,dl
	eppap	ap|-2
	tra	bp|0
maxfix:	vfd	8/36,1/0,1/1	" maximum fixnum in flonum form.

" boole function
" uses first arg to determine operation to be performed on remaining args

	segdef	boole			lsubr (777003 0 0)

boole:	eax6	fn_boole
	eax4	0,x5
	tsx0	fixval-*,ic		get first arg which must be fixnum
	lda	ap|1,x4			get first arg
	ana	=o17,dl			low 4 bits only
	als	1			times 2
	eax3	0,al			put into x3
	eax4	2,x4			get 2nd arg
	tsx0	fixval-*,ic
	lda	ap|1,x4			put second arg in result accumulator
boole_loop:
	eax4	2,x4			get next arg
	tpl	boole_fin-*,ic		done -- leave.
	tsx0	fixval-*,ic

	xed	boole_op,x3		do operation
	tra	boole_loop-*,ic		and get next arg

boole_fin: lrl	36			make fixnum to return
	lda	fixnum_type,dl
	eppap	ap|0,x5
	tra	bp|0

" table of operations for boole
" the first operand is in the a
" the second operand is in ap|1,x4
" the result goes in the a
" these operations are called by xed.

	even
boole_op:
	lda	0,dl			(0) SETZ
	tra	boole_loop

	ana	ap|1,x4			(1) AND
	tra	boole_loop

	era	ones			(2) ANDCA
	ana	ap|1,x4

	lda	ap|1,x4			(3) SETM
	tra	boole_loop

	era	ones			(4) ANDCM
	xed	andcb

	tra	boole_loop		(5) SETA
	nop	0,du

	era	ap|1,x4			(6) XOR
	tra	boole_loop

	ora	ap|1,x4			(7) IOR
	tra	boole_loop

andcb:	ora	ap|1,x4			(10) ANDCB
	era	ones

	era	ap|1,x4			(11) EQV
	era	ones

	era	ones			(12) SETCA
	tra	boole_loop

	era	ones			(13) ORCA
	ora	ap|1,x4

	lda	ap|1,x4			(14) SETCM
	era	ones

	era	ones			(15) ORCM
	xed	orcb

orcb:	ana	ap|1,x4			(16) ORCB
	era	ones

	lda	ones			(17) SETO
	tra	boole_loop

" constant for complementing - all ones

ones:	oct	777777777777

" the single-word comparison operators, <, > and =, must check for error
" cases in the interpreter, so they are not identical to greaterp, lessp and eq.

	segdef	ls_
ls_:	eax6	fn_ls
	tsx3	compare_words_with_type
	tmi	ret_t_2
	tra	ret_nil_2

	segdef	gt_
gt_:	eax6	fn_gt
	tsx3	compare_words_with_type
	tze	ret_nil_2
	tpl	ret_t_2
	tra	ret_nil_2

	segdef	eql_
eql_:	eax6	fn_eql
	tsx3	compare_words_with_type
	tze	ret_t_2
	tra	ret_nil_2


compare_words_with_type:
	eax4	-4		get first argument.
	tsx0	numval		evaluate number...make sure it is one word fix or float
	tra	cmp_flt		if float, numval does not skip.
	eax4	-2
	tsx0	fixval		verify that val is fixed.
	ldq	ap|-3
	cmpq	ap|-1
	tra	0,x3		x3 must have been preserved.

cmp_flt:	eax4	-2
	tsx0	floval		verfy second arg is also float.
	fld	ap|-3
	fcmp	ap|-1
	tra	0,x3		return

ret_t_2:	ldaq	ab|true		return t.
	eppap	ap|-4
	tra	bp|0		and go to caller.

ret_nil_2:
	ldaq	ab|nil		load up nil.
	eppap	ap|-4
	tra	bp|0		return to caller.

" the typep function returns an atomic symbol
" whose name designates the type of object given it as argument.
" This is a type 1 subr since the return values are constants
" in lisp_static_vars_ (We need our lp)

	segdef	typep			subr (1 1 0)

" define constants in lisp_static_vars_

	link	pname,<lisp_static_vars_>|[pname_atom]
	link	string,<lisp_static_vars_>|[string_atom]
	link	fixnum,<lisp_static_vars_>|[fixnum_atom]
	link	flonum,<lisp_static_vars_>|[flonum_atom]
	link	random,<lisp_static_vars_>|[random_atom]
	link	bignum,<lisp_static_vars_>|[bignum_atom]
	link	list,<lisp_static_vars_>|[list_atom]
	link	array,<lisp_static_vars_>|[array_atom]

typep:	lda	ap|-2			get argument
	eppap	ap|-2			pop pdl
	tze	typep_4-*,ic		Undefined = random
	cana	Atsym,dl
	tnz	typep_1-*,ic
	cana	Big_fixed,dl
	tnz	typep_big-*,ic
	cana	Fixed,dl
	tnz	typep_2-*,ic
	cana	Float,dl
	tnz	typep_3-*,ic
	cana	String,dl
	tnz	typep_str-*,ic
	cana	Array,dl
	tnz	typep_array-*,ic
	cana	lisp_ptr.type,dl
	tnz	typep_4-*,ic
	ldaq	lp|list,*
typep_xx:
retrn_type_1:
	epplp	ab|-4,x7*			return from type 1 subr
	eppbp	ab|-2,x7*
	eax7	-4,x7
	tra	bp|0

typep_1:	ldaq	lp|pname,*
	tra	typep_xx-*,ic

typep_array:
	ldaq	lp|array,*
	tra	typep_xx-*,ic

typep_str:ldaq	lp|string,*
	tra	typep_xx-*,ic

typep_big:ldaq	lp|bignum,*
	tra	typep_xx-*,ic

typep_2:	ldaq	lp|fixnum,*
	tra	typep_xx-*,ic

typep_3:	ldaq	lp|flonum,*
	tra	typep_xx-*,ic

typep_4:	ldaq	lp|random,*
	tra	typep_xx-*,ic

	entry	pl1_sxhash
pl1_sxhash:
	epbpab	<lisp_static_vars_>|[unmkd_ptr],*
	eppap	<lisp_static_vars_>|[stack_ptr],*
	ldx7	<lisp_static_vars_>|[unmkd_ptr]+1
	stz	ab|in_pl1_code
	eax7	4,x7
	sprilp	ab|-4,x7		" save lp and return address.
	stcd	ab|-2,x7
	tra	sxhash		" and call the lisp routine.
	eppap	ap|2		" now put result back on stack.
	staq	ap|-2
	spriap	<lisp_static_vars_>|[stack_ptr]
	stx7	<lisp_static_vars_>|[unmkd_ptr]+1
	stc1	ab|in_pl1_code
	short_return

	segdef	sxhash		" s-expression hash routine.
sxhash:	eax5	0,x7		" x5 points to two numeric temps.
	eax7	2,x7		" x7 keeps top of stack, as usual.
	stz	ab|0,x5		" make sure result starts at zero.
	ldaq	ap|-2		" load argument.
	tsx6	hash_fcn	" call hasher.
	ldq	ab|0,x5		" load result
	eax7	-2,x7
	eppap	ap|-2		" pop arg off stack
	lda	fixnum_type,dl	" make it a fixnum to return
	tra	retrn_type_1	" and return.

hash_fcn:	cmpa	fixnum_type,dl	" check type and go to appropriate routine
	tze	hash_fix
	cmpa	flonum_type,dl
	tze	hash_float
	cana	Atsym,dl
	tnz	hash_sym
	cana	Big_fixed,dl
	tnz	hash_big
	cana	String,dl
	tnz	hash_str
	cana	Atomic,dl
	tnz	0,x6		" return if unknown type.

	eppbp	ap|-2,*
	eppap	ap|2		" must get car and cdr of list.
	ldaq	bp|2
	staq	ap|-4		" store cdr for later use
	ldaq	bp|0
	staq	ap|-2		" and make car the arg.
	eax7	2,x7		" get room to save return address
	stx6	ab|-2,x7		" store return address.
	tsx6	hash_fcn
	ldq	ab|0,x5		" now rotate hash result right.
	qlr	35		" rotate right 1
	stq	ab|0,x5
	ldx6	ab|-2,x7		" get back return address.
	eax7	-2,x7
	eppap	ap|-2		" pop off stacks
	ldaq	ap|-2		" get cdr of list
	tra	hash_fcn	" and go back and try again.

hash_fix:	adlq	ab|0,x5
	stq	ab|0,x5		" store new hash result.
	tra	0,x6

hash_float:
	fld	ap|-1		" fix up float number for compatibility with PDP10
	tpl	3,ic
	fneg	0,dl
	fst	ap|-1		" store abs val back
	ldq	ap|-1		" now get word of float number
	lls	9
	ana	=o777,dl
	ars	1
	lrl	9		" move back to q
	tra	hash_fix

hash_sym:	eppbp	ap|-2,*		" get pointer to atsym
	eppbp	bp|4		" make pointer point to string.
hash_chrs:
	ldq	bp|0		" load length
	tze	0,x6		" if zero, don't bother with rest
	adq	3,dl
	qrs	2		" divide by 4
hash_com:	eax4	0,ql		" and move length to x4
	stz	ab|1,x5		" zero temporary.
	ldq	bp|0,x4		" load the last word so far of the string
	ersq	ab|1,x5		" and xor into result
	eax4	-1,x4		" move back
	tnz	-3,ic		" and loop
	ldq	ab|1,x5		" load up the hash result
	tra	hash_fix		" and put it into result

hash_str:	eppbp	ap|-2,*
	tra	hash_chrs

hash_big:	eppbp	ap|-2,*		" get pointer to bignum
	ldq	bp|0		" get number of words
	anq	-1,dl		" and mask word length out
	tra	hash_com

" the signp function, which tests whether the sign
" of the second argument (evaluated) matches the sign of the
" designation in the first argument (unevaluated), which can
" be l,le,e,n,ge,g,a
" this is a type 1 subr since it needs to call eval.

	segdef	signp			fsubr (0 1 0)

signp:	eppap	ap|2			room for temp
	eax2	2
	eppbp	ap|-4,*2			bp = cdr of arg list
	eppbp	bp|0,*
	ldaq	bp|0			get cadr of arg list, = 2nd arg
	staq	ap|-2			save for evaluation
	ldaq	ap|-4,*			get car of arg list
	staq	ap|-4			save it.
	eax7	4,x7			call eval to do 2nd arg
	sprilp	ab|-4,x7
	eax5	-2
	stcd	ab|-2,x7			**** Must be bound in with lisp_
	tra	<lisp_>|[eval_]
	eppap	ap|2			put result back in pdl
	staq	ap|-2
	cmpa	flonum_type,dl
	tze	signp_flt-*,ic
	cana	Big_fixed,dl
	tnz	signp_big-*,ic
	cmpa	fixnum_type,dl
	tnz	signp_nil-*,ic		not a number, just return nil.
	szn	ap|-1
	tmi	signp_neg-*,ic
	tze	signp_zero-*,ic
	tpl	signp_plus-*,ic

signp_big:szn	ap|-2,*		points at first word of bignum, upper bit = sign.
	tmi	signp_neg-*,ic
	tra	signp_plus-*,ic	can't be zero if a bignum.
signp_flt:fszn	ap|-1
	tmi	signp_neg-*,ic
	tze	signp_zero-*,ic
	tpl	signp_plus-*,ic


signp_neg:eax5	-1
	tra	signp_com-*,ic

signp_zero:
	eax5	0
	tra	signp_com-*,ic

signp_plus:
	eax5	+1
	"tra	signp_com-*,ic

signp_com:
	" decode first argument

	lda	ap|-4			must be atomic symbol
	cana	Atsym,dl
	tze	bad_signp-*,ic
	eppbp	ap|-4,*			-> atomic symbol
	lda	bp|4			get pnamel
	cmpa	1,dl
	tnz	signp_2-*,ic
					" must be l,g,a,e,n
	lda	bp|5			get the 1 char pname
	cmpa	=o154000,du		l ?
	tnz	xx01-*,ic
	  cmpx5	 -1,du			yes, neg?
	  tze	 signp_t-*,ic		yes, return t.
	  tra	 signp_nil-*,ic		no, return nil
xx01:	cmpa	=o147000,du		g ?
	tnz	xx02-*,ic
	 cmpx5	 +1,du			yes, pos?
	 tze	 signp_t-*,ic		yes, return t.
	 tra	 signp_nil-*,ic		no, return nil.
xx02:	cmpa	=o141000,du		a ?
	tze	signp_t-*,ic		yes, always t.
	cmpa	=o145000,du		e ?
	tnz	xx03-*,ic
	 cmpx5	 0,du			yes, zero?
	 tze	 signp_t-*,ic		yes, return t.
	 tra	 signp_nil-*,ic		no, return nil.
xx03:	cmpa	=o156000,du		n ?
	tnz	bad_signp-*,ic		no, illegal.
	 cmpx5	 0,du			yes, nonzero?
	 tnz	 signp_t-*,ic		yes, return t.
	 tra	 signp_nil-*,ic		no, return nil.

" signp with 1st arg of length 2. Must be le or ge

signp_2:	cmpa	2,dl			really length 2?
	tnz	bad_signp-*,ic		no, error.
	lda	bp|5			yes, get the pname
	cmpa	=o147145,du		ge ?
	tnz	xx04-*,ic
	 cmpx5	 0,du			yes, pos or 0?
	 tpl	 signp_t-*,ic		yes, return t.
	 tra	 signp_nil-*,ic		no, return nil.
xx04:	cmpa	=o154145,du		le ?
	tnz	bad_signp-*,ic		no, error.
	 cmpx5	 1,du			is it neg or zero?
	 tnz	 signp_t-*,ic		yes, return t.
	 tra	 signp_nil-*,ic		no, return nil.

" routines to return t or nil for signp

signp_t:	ldaq	ab|t
	tra	2,ic

signp_nil:ldaq	ab|nil
subr_1_2_exit:
	eppap	ap|-4
	tra	typep_xx-*,ic		exit from type 1 subr

" come here when first arg to signp is bad.

bad_signp:eax4	-4
	eax6	fn_signp
	eax2	signp_com-*,ic
	tra	badarg-*,ic		returns to signp_com

	segdef	fixgcd	" lisp \\ subr.
fixgcd:	eax6	fn_gcd
	eax4	-4
	tsx0	fixval
	eax4	-2
	tsx0	fixval
	lda	ap|-3	" load first arg
	tpnz	pos1st
	tze	lshret0
	neg	0
	sta	ap|-3
pos1st:	lda	ap|-1
	tpnz	pos2nd
	tze	lshret0
	neg	0
	sta	ap|-1
pos2nd:	cmpa	ap|-3
	tmi	noexch
	ldq	ap|-3
	stq	ap|-1
	sta	ap|-3
noexch:	ldq	ap|-3
	div	ap|-1
	cmpa	0,dl
	tze	retgcd
	ldq	ap|-1
	sta	ap|-1
	tra	-5,ic
retgcd:	ldaq	ap|-2
	eppap	ap|-4
	tra	bp|0

	end
