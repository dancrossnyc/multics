/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */
/* format: style2,indcomtxt */

/**** *
      get_pvtx$get_pvtx
      $hold_pvtx
      $release_pvtx
      $drain_pvtx
      $cleanup
      $reset

      04/25/75	Andre Bensoussan - Written for the new storage system.
      Modified 03/06/82, J. Bongiovanni, for new PVTE
      Modified 84-01-17, BIM, for $reset. */
/*    Modified 85-03-28, EJ Sharpe, changed $cleanup to return bit(1) and
   to log what happens. */

get_pvtx:
     procedure (pvid, code) returns (fixed bin (17));


	dcl     pvid		 bit (36) aligned,
	        pvtx		 fixed bin,
	        code		 fixed bin (35);

	dcl     released_something	 bit (1) aligned;

	dcl     (i, w)		 fixed bin (17);

	dcl     word		 bit (36) aligned;
	dcl     my_apterp		 bit (18);

	dcl     error_table_$pvid_not_found
				 fixed bin (35) ext;
	dcl     tc_data$system_shutdown
				 bit (1) aligned ext;

	dcl     pds$apt_ptr		 ptr ext;
	dcl     pds$process_group_id	 char (32) ext;

	dcl     CST		 fixed bin (35) internal static
				 init (011000001000000000000000000000000000b) options (constant);
	dcl     PV_HOLDT		 (1:64) bit (36) aligned internal static init ((64) (36)"0"b);

	dcl     pxss$addevent	 entry (fixed bin (35));
	dcl     pxss$delevent	 entry (fixed bin (35));
	dcl     pxss$notify		 entry (fixed bin (35));
	dcl     pxss$wait		 entry;

	dcl     stacq		 entry (ptr, bit (36) aligned, bit (36) aligned) returns (bit (1));
	dcl     syserr		 entry options (variable);

	dcl     pvt$n_entries	 fixed bin external;

	dcl     (addr, bit, fixed, hbound, lbound, null, rel, stac, unspec)
				 builtin;

/*
   get_pvtx : entry (pvid, code)  returns (fixed bin(17));
*/



/* FUNCTION - This procedure returns the physical volume  table  index
   associated with the physical volume id specified by the input argument
   "pvid".  If  the  pvid  is found in a pvt entry in use, it returns its
   pvtx and sets the code to  zero.   If  a  used  pvt  entry  holds  the
   specified  pvid, then its index is returned with code=0 If no used pvt
   entry holds the specified pvid,  the  value  zero  (invalid  pvtx)  is
   returned, with code=error_table_$pvid_not_found. */


	code = 0;
	pvt_arrayp = addr (pvt$array);

	do i = 1 to pvt$n_entries;
	     pvtep = addr (pvt_array (i));

	     if pvte.used
	     then if pvte.pvid = pvid
		then if ^pvte.being_demounted
		     then if pvte.pvid = pvid
			then return (i);
	end;

	code = error_table_$pvid_not_found;

	return (0);

hold_pvtx:
     entry (pvid, pvtx, code);



/* FUNCTION - The procedure "hold_pvtx" causes the system to  remember
   that  one more request has been issued to keep the binding between the
   pvid and the pvtx specified as input arguments, and also  to  remember
   the  name  of  the  process  who  is  issuing the request. The binding
   between a pvid and a pvtx cannot change while the number  of  requests
   to keep it is non-zero.  If the pvid and the pvtx are not bound at the
   time this procedure is called, the ony effect of the call is to return
   the code = error_table_$pvid_not_found. */



	pv_holdtp = addr (PV_HOLDT);
	pvt_arrayp = addr (pvt$array);
	pvtep = addr (pvt_array (pvtx));

	code = 0;

	if pvte.pvid ^= pvid | pvte.being_demounted
	then do;
		code = error_table_$pvid_not_found;
		return;
	     end;

	word = bit (fixed (pvtx, 18), 18) || rel (pds$apt_ptr);

	do i = 1 to hbound (pv_holdt, 1) while (^stac (addr (pv_holdt (i)), word));
	end;

	if i > hbound (pv_holdt, 1)
	then call syserr (SYSERR_CRASH_SYSTEM, "get_pvtx: hold_pvtx finds table full");

	if pvte.pvid ^= pvid | pvte.being_demounted
	then do;
		call ZERO_ENTRY (i);
		code = error_table_$pvid_not_found;
		return;
	     end;

	return;

release_pvtx:
     entry (pvid, pvtx);



/* FUNCTION - The procedure  "release_pvtx"  is  the  inverse  of  the
   hold_pvtx  procedure.  It  causes the system to forget whatever it was
   caused to remember by the last call to hold_pvtx in this process  with
   the  same  pvid  and  pvtx  arguments.  The  following sequence:  call
   get_pvtx$hold_pvtx ( pvid, pvtx, code )  ;  if  code  =  0  then  call
   get_pvtx$release_pvtx(pvid, pvtx) is equivalent to a null statement. */



	pv_holdtp = addr (PV_HOLDT);
	pvt_arrayp = addr (pvt$array);
	pvtep = addr (pvt_array (pvtx));

	my_apterp = rel (pds$apt_ptr);

	do i = 1 to hbound (pv_holdt, 1) while (pv_holdt (i).apterp ^= my_apterp | pv_holdt (i).pvtx ^= pvtx);
	end;

	if i > hbound (pv_holdt, 1) | pvte.pvid ^= pvid
	then call syserr (SYSERR_CRASH_SYSTEM, "get_pvtx: release_pvtx: mark not found");

	call ZERO_ENTRY (i);

	return;

drain_pvtx:
     entry (pvtx);



/* FUNCTION - The procedure "drain_pvtx" causes the system  to  refuse
   any subsequent requests to hold the pvtx with the pvid it is now bound
   to,  and  to wait until the number of hold requests that may have been
   issued for this pvtx prior to this instant to drop to zero. */



	pv_holdtp = addr (PV_HOLDT);
	pvt_arrayp = addr (pvt$array);
	pvtep = addr (pvt_array (pvtx));

	if pvte.being_demounted = "0"b
	then call syserr (SYSERR_CRASH_SYSTEM, "get_pvtx: drain_pvtx: pvte.being_demounted should be on");

	w = -1;
	do while (w ^= 0);

	     w = 0;
	     do i = 1 to hbound (pv_holdt, 1);
		if pv_holdt (i).pvtx = pvtx
		then if ^tc_data$system_shutdown
		     then do;
			     call pxss$addevent (CST + i);
			     if pv_holdt (i).pvtx = pvtx
			     then do;
				     call pxss$wait;
				     w = w + 1;
				end;
			     else call pxss$delevent (CST + i);
			end;

		     else pvte.vol_trouble_count = pvte.vol_trouble_count + 1;

	     end;

	end;

	return;

cleanup:
     entry () returns (bit (1) aligned);


/* FUNCTION - The procedure "cleanup" is executed by a process  before
   crawling  out  of  ring  zero. It causes the system to forget any hold
   request that may have been issued by this process for any pvtx */



	released_something = "0"b;
	pv_holdtp = addr (PV_HOLDT);
	pvt_arrayp = addr (pvt$array);
	pvtep = null ();

	do i = 1 to hbound (pv_holdt, 1);
	     if pv_holdt (i).apterp = rel (pds$apt_ptr)
	     then do;
		     pvt_array (pv_holdt (i).pvtx).vol_trouble_count =
			pvt_array (pv_holdt (i).pvtx).vol_trouble_count + 1;
		     call ZERO_ENTRY (i);
		     call syserr (SYSERR_LOG_OR_PRINT, "get_pvtx$cleanup: Force released hold on pvtx ^d for ^a.",
			pv_holdt (i).pvtx, pds$process_group_id);
		     released_something = "1"b;
		end;
	end;

	return (released_something);



reset:
     entry;

/**** FUNCTION - at emergency_shutdown time, bump the inconsistency count
      in the pvte for all held volumes, and release all of them.
      Thus will produce some spurious scavenges, but will also tend to
      detect a variety of interrupted operations. */


	pv_holdtp = addr (PV_HOLDT);
	pvt_arrayp = addr (pvt$array);
	do i = lbound (pv_holdt, 1) to hbound (pv_holdt, 1);
	     if pv_holdt (i).apterp ^= ""b
	     then do;
		     pvtep = addr (pvt_array (pv_holdt (i).pvtx));
		     pvte.vol_trouble_count = pvte.vol_trouble_count + 1;
		     call ZERO_ENTRY (i);
		end;
	end;
	return;


/**** FUNCTION -- return address of static table to be put in
      easily readable spot in sst_seg. */


ret_pvhtp:
     entry returns (ptr);

	return (addr (PV_HOLDT));			/* For debugging */






ZERO_ENTRY:
     proc (i);

	dcl     (i, x)		 fixed bin;
	dcl     word		 bit (36) aligned;

	x = pv_holdt (i).pvtx;
	word = unspec (pv_holdt (i));

	if ^stacq (addr (pv_holdt (i)), word, (36)"0"b)
	then call syserr (SYSERR_CRASH_SYSTEM, "get_pvtx: ZERO_ENTRY fails");

	if pvt_array (x).being_demounted
	then call pxss$notify (CST + i);

	return;

     end;

%include pvte;

%include pv_holdt;

%include syserr_constants;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   get_pvtx: hold_pvtx finds table full

   S: $crash

   T: $run

   M: There are no free entries in the physical volume hold table.
   There should never be more than twice the number of eligible
   processes of used entries.
   $err

   A: $recover

   Message:
   get_pvtx: release_pvtx: mark not found

   S: $crash

   T: $run

   M: While attempting to release a physical volume from demount protection,
   the mark made by the protection could not be found in the physical volume
   hold table.  This message can also occur if somehow the physical
   volume was demounted in spite of this protection, or this entry
   point is being used improperly.
   $err

   A: $recover

   Message:
   get_pvtx: drain_pvtx: pvte.being_demounted should be on.

   S: $crash

   T: $run

   M: The entry to the physical volume demount protection mechanism
   which awaits all use of the volume to cease is being called improperly.
   A necessary precondition for its
   proper operation (pvte.being_demounted) is not met.
   $err

   A: $recover

   Message:
   get_pvtx: ZERO_ENTRY fails

   S: $crash

   T: $run

   M: The STACQ instruction has failed to clear an entry in the
   physical volume hold table.
   $err

   A: $recover


   Message:
   get_pvtx$cleanup: Force released hold on pvtx ^d for USER_ID.

   S:	$info

   T:	$run

   M:	$err
   A condition was signalled in ring-0 which caused a crawlout.
   get_pvtx$cleanup will release all PV holds for the process.

   A:	$notify

   END MESSAGE DOCUMENTATION */

     end;
