/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */

/* format: style4 */

log_list_history_:
     procedure ();

/* *	LOG_LIST_HISTORY_
   *
   *	This procedure is responsible for allocating and filling in a log_read_data
   *	structure containing the pathnames of all the logs it can find in the chain
   *	of history begun in the first log. All the logs from each separate directory
   *	in the history are sorted in chronological order (by name), and space is
   *	left at the beginning of the log_read_data array for the initial log
   *	(or logs). This procedure is a utility, used only by log_read_$open.
   *
   *	It has one minor problem: it cannot handle the case of looping history
   *	directories, where log_A points to log_B which points back to log_A.
   *	There are various ways in which this could be remedied, and one should
   *	be chosen eventually. Log unique-id comparison is probably the best
   *	choice, but, as such, should include the initial log(s), and therefore
   *	must be handled outside this procedure.
   *
   *	84-05-04, W. Olin Sibert: In celebration of recursion
   *	84-08-25, WOS: Added $single_dir entrypoint for log_write_ migration
   *	84-10-16, WOS: Converted to use log_name_$starname
   *    1984-12-15, BIM: version sentinel in log_read_data_.
   *	85-03-03, EJ Sharpe: Changed single_dir entry to return log_read_data structure, added format,
   *		added single_dir_oldest_and_newest to replace old functionality of single_dir,
*/

declare  P_first_log_ptr pointer parameter;
declare  P_log_name char (*) parameter;
declare  P_initial_count fixed bin parameter;
declare  P_log_read_data_ptr pointer parameter;
declare  P_log_dname char (*) parameter;
declare  P_oldest_log_name char (*) parameter;
declare  P_newest_log_name char (*) parameter;
declare  P_log_count fixed bin parameter;
declare  P_code fixed bin (35) parameter;

declare  code fixed bin (35);

declare  system_area_ptr pointer;
declare  system_area area based (system_area_ptr);

declare  total_segment_count fixed bin;
declare  last_segment_entered fixed bin;
declare  log_starname char (32);

declare  first_log_ptr pointer;
declare  first_dname char (168);
declare  first_uid bit (36) aligned;

declare  error_table_$nomatch fixed bin (35) external static;

declare  absolute_pathname_ entry (char (*), char (*), fixed bin (35));
declare  get_system_free_area_ entry () returns (pointer);
declare  hcs_$get_uid_file entry (char (*), char (*), bit (36) aligned, fixed bin (35));
declare  hcs_$star_ entry (char (*), char (*), fixed bin (2), pointer, fixed bin, pointer, pointer, fixed bin (35));
declare  log_initiate_ entry (char (*), char (*), fixed bin, pointer, fixed bin (35));
declare  log_name_$starname entry (char (*)) returns (char (32));
declare  log_name_$time entry (char (*)) returns (fixed bin (71));
declare  sort_items_$general entry (pointer, entry);


declare  cleanup condition;

declare  (addr, null, sum) builtin;
%page;

log_list_history_$all:
     entry (P_first_log_ptr, P_log_name, P_initial_count, P_log_read_data_ptr);

	total_segment_count = P_initial_count;		/* Enough to start with-- as many as our caller has */
	first_log_ptr = P_first_log_ptr;

/* Starname matches LogName.YYYYMMDD.HHMMSS */

	log_starname = log_name_$starname (P_log_name);

	system_area_ptr = get_system_free_area_ ();

/* See if the first log we got points back to anything at all. If it doesn't, then
   we just allocate a small return structure and return. Otherwise, we start by
   listing the first history directory, and begin recursing. One of those recursive
   calls will give up and allocate the return structure, so by the time the call
   to list_log_directory returns, all will be ready and filled in. */

	if ^get_dname_and_uid (first_log_ptr, first_dname, first_uid) then
	     call allocate_read_data ();
	else call list_log_directory (first_dname, first_uid, "1"b);

	P_log_read_data_ptr = log_read_data_ptr;	/* Return the structure we allocated */
	return;
%page;

log_list_history_$single_dir:
     entry (P_log_dname, P_log_name, P_log_read_data_ptr, P_code);

/* This entrypoint returns a log_read_data structure with information about only
   the logs in a single history directory. */

	first_dname = P_log_dname;
	log_starname = log_name_$starname (P_log_name);

	total_segment_count = 0;
	log_read_data_ptr = null ();
	system_area_ptr = get_system_free_area_ ();

	on condition (cleanup) begin;
	     if (log_read_data_ptr ^= null ()) then
		free log_read_data_ptr -> log_read_data in (system_area);
	end;

	call hcs_$get_uid_file (first_dname, "", first_uid, code); /* We need this value as a parameter, and, in */
	if (code ^= 0) then do;			/* any case, this is a good place to fail if noentry */
	     P_code = code;
	     return;
	end;

	call list_log_directory (first_dname, first_uid, "0"b); /* Just this directory, please */

	P_log_read_data_ptr = log_read_data_ptr;
	P_code = 0;

	return;
%page;

log_list_history_$single_dir_oldest_and_newest:
     entry (P_log_dname, P_log_name, P_oldest_log_name, P_newest_log_name, P_log_count, P_code);

/* This entrypoint is used (by log_write_$open_for_migrate) to determine the names
   of the oldest and newest log segments in a particular log directory.  Rather
   than listing the entire history, only a single directory is listed.  */

	first_dname = P_log_dname;
	log_starname = log_name_$starname (P_log_name);

	P_oldest_log_name = "";
	P_newest_log_name = "";
	P_log_count = 0;

	total_segment_count = 0;			/* We started with none, after all */
	log_read_data_ptr = null ();
	system_area_ptr = get_system_free_area_ ();

	on condition (cleanup) begin;			/* Always free log_read_data, since it is not retained */
	     if (log_read_data_ptr ^= null ()) then	/* outside the invocation of this program */
		free log_read_data_ptr -> log_read_data in (system_area);
	end;

	call hcs_$get_uid_file (first_dname, "", first_uid, code); /* We need this value as a parameter, and, in */
	if (code ^= 0) then do;			/* any case, this is a good place to fail if noentry */
	     P_code = code;
	     return;
	end;

	call list_log_directory (first_dname, first_uid, "0"b); /* Just this directory, please */

	if (log_read_data.n_segments > 0) then do;
	     P_newest_log_name = log_read_data.ename (1);
	     P_oldest_log_name = log_read_data.ename (log_read_data.n_segments);
	end;

	P_log_count = log_read_data.n_segments;

	if (log_read_data.n_segments = 0) then
	     P_code = error_table_$nomatch;
	else P_code = 0;

	free log_read_data_ptr -> log_read_data in (system_area);

	return;					/* All done for $single_dir */
%page;

get_dname_and_uid:
     procedure (P_log_segment_ptr, P_dname, P_uid) returns (bit (1) aligned);

declare  P_log_segment_ptr pointer parameter;
declare  P_dname char (*) parameter;
declare  P_uid bit (36) aligned parameter;

declare  code fixed bin (35);

/* This procedure extracts the directory name and directory UID for the pathname
   recorded in the previous log information in the supplied log. If any error
   occurs, it just gives up, terminating the search at that point. */


	if (P_log_segment_ptr = null ()) then return ("0"b);

	if (P_log_segment_ptr -> log_segment.previous_log_dir = "") then return ("0"b);

	call absolute_pathname_ (P_log_segment_ptr -> log_segment.previous_log_dir, P_dname, code);
	if (code ^= 0) then return ("0"b);

	call hcs_$get_uid_file (P_dname, "", P_uid, code);
	if (code ^= 0) then return ("0"b);

	return ("1"b);
     end get_dname_and_uid;



allocate_read_data:
     procedure ();

	log_read_data_n_segments = total_segment_count;
	last_segment_entered = total_segment_count + 1;	/* Because there are none at all in the array, yet */

	allocate log_read_data in (system_area) set (log_read_data_ptr);
	log_read_data.header.sentinel = LOG_READ_DATA_VERSION_SENTINEL;
	log_read_data.n_segments = total_segment_count;

	return;
     end allocate_read_data;
%page;

/* *	This textbook example of recursion is used to find all the log segments
   *	in whatever set of directories they may have been migrated to. It is
   *	called by the main "open" routine to list the directory that the newest
   *	log points back to, and it goes back from there. After it lists a
   *	directory, it examines the oldest log segment in that directory, and
   *	sees where it points for its "previous" log. If the directory thus
   *	indicated is different, it calls list_log_directory recursively, and
   *	does it all over again.
   *
   *	Once it runs out of directories, or if it encounters any error listing
   *	or examining directory contents, it allocated log_read_data and starts
   *	filling it in, from the bottom (oldest) up.
   *
   *	The process is controlled by two global variables: total_segment_count
   *	and last_segment_entered, which keep track of the total size of the
   *	structure, and of which entries have been filled in already. After the
   *	initial call to list_log_directory returns, the remaining (first) entry
   *	in log_read_data is filled in from the parameter we received. The log
   *	starname is also global, since all historical logs must have the same
   *	format for their names.
   *
   *	NOTE: Despite the names, it's list_this_directory, not list_log_directory,
   *	that actually calls hcs_$star_.  This procedure just collects the results.
*/

list_log_directory:
     procedure (P_dname, P_uid, P_keep_looking);

declare  P_dname char (*) parameter;			/* Directory to list */
declare  P_uid bit (36) aligned parameter;		/* Used to check equality of directories */
declare  P_keep_looking bit (1) aligned parameter;	/* Keep looking for the next older directory */

declare  sort_pointers_ptr pointer;
declare  1 sort_pointers aligned based (sort_pointers_ptr),
	 2 n_entries fixed bin,
	 2 ptr (star_entry_count refer (sort_pointers.n_entries)) pointer unaligned;

declare  code fixed bin (35);				/* Local copy */
declare  segment_count fixed bin;
declare  1 one_star_entry aligned like star_entries based;
declare  entry_idx fixed bin;
declare  last_log_name char (32);
declare  last_log_ptr pointer;
declare  older_dname char (168);
declare  older_uid bit (36) aligned;
declare  segment_idx fixed bin;
%page;

	star_entry_ptr = null ();			/* Initialize for cleanup handler */
	star_names_ptr = null ();			/* Initialize for cleanup handler */
	sort_pointers_ptr = null ();			/* Initialize for cleanup handler */
	last_log_ptr = null ();			/* Initialize for filling into log_read_data */
	segment_count = 0;				/* Initialize for filling-in loop */

	on condition (cleanup) begin;
	     call free_star_entries ();
	end;

/* Now, we list the contents of the directory. It's the job of list_this_directory
   to test P_keep_looking-- if we aren't supposed to keep looking, it gives up
   without looking in the oldest log segment for another directory to list.
   Otherwise, it looks there and returns "1"b if there's anything worth looking at. */

	if (list_this_directory ()) then
	     call list_log_directory (older_dname, older_uid, P_keep_looking);
	else call allocate_read_data ();

/* Once the directory is listed, fill in all the segments from our list. This loop will
   be ignored if there was nothing listed by the earlier call to list_directory, so there
   are no problems resulting from referencing structures not actually allocated because,
   for instance, a call to hcs_$star_ failed. */

	do segment_idx = segment_count to 1 by -1;
	     last_segment_entered = last_segment_entered - 1; /* Get the index of the one to be entered */

	     log_read_data.dname (last_segment_entered) = P_dname;
	     log_read_data.dir_uid (last_segment_entered) = P_uid;
	     log_read_data.ename (last_segment_entered) =
		star_names (sort_pointers.ptr (segment_idx) -> one_star_entry.nindex);

	     log_read_data.suffix_time (last_segment_entered) =
		log_name_$time (log_read_data.ename (last_segment_entered));

	     if (segment_idx = segment_count) then	/* We've initiated (or at least tried) the oldest log */
		log_read_data.ptr (last_segment_entered) = last_log_ptr; /* already, so record the pointer we got */
	     else log_read_data.ptr (last_segment_entered) = null ();
	end;

	call free_star_entries ();			/* Clean out this level of recursion */
	return;
%page;

list_this_directory:
	procedure () returns (bit (1) aligned);

/* First, try to list any matching logs in the directory. If there is an error, or none
   can be found, we're all done here. A "0"b is returned if there are no more directories
   to search, which is the case for all returns except the very last. */

	     call hcs_$star_ (P_dname, log_starname, star_BRANCHES_ONLY, system_area_ptr,
		star_entry_count, star_entry_ptr, star_names_ptr, code);
	     if (code ^= 0) then return ("0"b);
	     if (star_entry_count = 0) then return ("0"b);

	     allocate sort_pointers in (system_area) set (sort_pointers_ptr);
	     sort_pointers.n_entries = star_entry_count;

	     segment_count = 0;
	     do entry_idx = 1 to star_entry_count;
		sort_pointers.ptr (entry_idx) = addr (star_entries (entry_idx));
		if (star_entries.type (entry_idx) = star_SEGMENT) then
		     segment_count = segment_count + 1;
	     end;

	     if (segment_count = 0) then return ("0"b);
	     total_segment_count = total_segment_count + segment_count;

	     call sort_items_$general (addr (sort_pointers), compare_entries);

	     if ^P_keep_looking then			/* If we're not supposed to keep looking, we */
		return ("0"b);			/* stop right here without looking at the history */

/* Find the last (oldest) log in this directory, and see what it says about earlier ones */

	     last_log_name = star_names (sort_pointers.ptr (segment_count) -> one_star_entry.nindex);
	     call log_initiate_ (P_dname, last_log_name, 1, last_log_ptr, code);
	     if (code ^= 0) then return ("0"b);

/* See if this log contains a usable previous log pathname */

	     if ^get_dname_and_uid (last_log_ptr, older_dname, older_uid) then return ("0"b);

/* Now, check to see whether the "previous" directory in the oldest log of record is
   different from the directory we're already looking at. This will fail catastrophically
   if the "previous" directory is, in fact, one we've listed earlier than this call,
   since it will lead us back to here, and so forth. It's difficult to check for that
   case, so we'll just take the risk. */

	     if (older_uid = P_uid) then return ("0"b);

	     return ("1"b);
	end list_this_directory;
%page;

compare_entries:
	procedure (P_entry_1, P_entry_2) returns (fixed bin (35));

declare  P_entry_1 unaligned pointer parameter;
declare  P_entry_2 unaligned pointer parameter;

declare  entry_1_ptr pointer;
declare  entry_2_ptr pointer;
declare  1 entry_1 aligned like star_entries based (entry_1_ptr);
declare  1 entry_2 aligned like star_entries based (entry_2_ptr);


	     entry_1_ptr = P_entry_1;
	     entry_2_ptr = P_entry_2;

/* These first two cases make non-segments always sort at the end, which means
   they will be ignored when collection time comes. */

	     if (entry_1.type = star_SEGMENT) & (entry_2.type ^= star_SEGMENT) then
		return (-1);
	     else if (entry_1.type ^= star_SEGMENT) & (entry_2.type = star_SEGMENT) then
		return (1);
	     else if (star_names (entry_1.nindex) < star_names (entry_2.nindex)) then
		return (1);
	     else return (-1);

	end compare_entries;



free_star_entries:
	procedure ();

declare  star_stuff fixed bin based;

/* This procedure has to have its own based variable to use when freeing, because the
   standard include file declares the star structures in a way that requires various
   pointers to be set properly when they may not be. BRAINDAMAGE. It should use fixed
   array bounds the way it used to before Davidoff got to it. */


	     if (star_entry_ptr ^= null ()) then
		free star_entry_ptr -> star_stuff in (system_area);
	     if (star_names_ptr ^= null ()) then
		free star_names_ptr -> star_stuff in (system_area);
	     if (sort_pointers_ptr ^= null ()) then
		free sort_pointers in (system_area);

	     return;
	end free_star_entries;

%page;

/* This must be declared here, in the internal procedure, because it is used recursively */

%include star_structures;

     end list_log_directory;				/* The recursive procedure */

/* format: off */
%page; %include log_segment;
%page; %include log_read_data;

	end log_list_history_;
