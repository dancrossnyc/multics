/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */
log_move_:
     procedure ();

/* *	LOG_MOVE_
   *
   *	This procedure moves a message from one log segment to another
   *	(using log_write_ to create the new message), and deletes the 
   *	old message from the original log segment, ensuring that a 
   *	loop of moves can be restarted after an interruption without
   *	copying more than one extra message.
   *
   *	It would be swift to add a new entrypoint for ring zero that 
   *	used log_segment_ instead of log_write_, but that's not needed
   *	until the syserr_data segment is converted to be a log segment.
   *
   *	Modification history:
   *	1984-11-11, W. Olin Sibert: Initial coding
   *	1984-12-21, WOS: Changed to make data_class the right size (16 chars)
   */

declare   P_log_write_data_ptr pointer parameter;
declare   P_old_ptr pointer parameter;
declare   P_new_ptr pointer parameter;
declare   P_code fixed bin (35) parameter;

declare   code fixed bin (35);
declare   log_write_data_ptr pointer;
declare   old_ptr pointer;
declare   new_ptr pointer;
declare   data_class char (16) varying;

declare   log_data_$deleted_message_flag bit (36) aligned external static;

declare	log_segment_$finish_message entry (pointer, pointer, fixed bin (35));
declare	log_write_$general entry
         (pointer, fixed bin (35), fixed bin, fixed bin, char (16) varying, pointer, fixed bin (35));

/*  */

log_move_$message:
     entry (P_log_write_data_ptr, P_old_ptr, P_new_ptr, P_code);

	log_write_data_ptr = P_log_write_data_ptr;
	old_ptr = P_old_ptr;

	if (dimension (old_ptr -> log_message.data, 1) > 0) then
	     data_class = old_ptr -> log_message.data_class;
	else data_class = "";

	call log_write_$general (log_write_data_ptr,
	     old_ptr -> log_message.sequence,
	     length (old_ptr -> log_message.text), 
	     dimension (old_ptr -> log_message.data, 1),
	     data_class, new_ptr, code);

	if (code ^= 0) then 
	     goto FINISHED;

	new_ptr -> log_message.time = old_ptr -> log_message.time;
	new_ptr -> log_message.severity = old_ptr -> log_message.severity;
	new_ptr -> log_message.process_id = old_ptr -> log_message.process_id;
	new_ptr -> log_message.text = old_ptr -> log_message.text;

	if (dimension (old_ptr -> log_message.data, 1) > 0) then
	     unspec (new_ptr -> log_message.data) = unspec (old_ptr -> log_message.data);
	
	call log_segment_$finish_message (pointer (new_ptr, 0), new_ptr, code);

	old_ptr -> log_message.sentinel = log_data_$deleted_message_flag;

	P_new_ptr = new_ptr;

FINISHED:
	P_code = code;
	return;

%page; %include log_message;

	end log_move_;
