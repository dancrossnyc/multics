/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */
log_initiate_:
     procedure (P_dname, P_ename, P_max_tries, P_log_segment_ptr, P_code);

/* *	LOG_INITIATE_
   *
   *	This procedure is the user-ring log initiation procedure. It 
   *	attempts to initiate the log segment, and sleeps for a second 
   *	if it can't do it, or if the log segment appears to be 
   *	uninitialized. The one-second wait is repeated P_max_tries 
   *	times, at which point it gives up.
   *
   *	Modification history:
   *	1984-05-04, W. Olin Sibert: after Benson's log_mgr_
   *	1984-12-21, WOS: Changed to return pointer when log not initilized
   */

declare	P_dname char (*) parameter;
declare	P_ename char (*) parameter;
declare	P_max_tries fixed bin parameter;
declare	P_log_segment_ptr pointer parameter;
declare	P_code fixed bin (35) parameter;

declare	retry_count fixed bin;
declare	code fixed bin (35);

declare	error_table_$log_uninitialized fixed bin (35) external static;

declare	hcs_$terminate_noname entry (pointer, fixed bin (35));
declare	initiate_file_ entry (char (*), char (*), bit (*), pointer, fixed bin (24), fixed bin (35));
declare	timer_manager_$sleep entry (fixed bin (71), bit (2));

declare	RELATIVE_MICROSECONDS bit (2) internal static options (constant) init ("10"b);
declare	ONE_QUARTER_SECOND fixed bin (71) internal static options (constant) init (250000);

declare	cleanup condition;

declare	null builtin;

/* */

	log_segment_ptr = null ();
	P_log_segment_ptr = null ();

	on condition (cleanup) begin;			/* The cleanup handler is particularly important because */
	     if (log_segment_ptr ^= null ()) then		/* this procedure can wait for a long time */
		call hcs_$terminate_noname (log_segment_ptr, (0));
	     end;

	call initiate_file_ (P_dname, P_ename, R_ACCESS, log_segment_ptr, (0), code);
	if (code ^= 0) then call finished (code);

/* Now we waits for the log segment header to be initialized. If log_initiate_
   gets called at all, the assumption is that some other process has already
   initialized, or is initializing, the log segment, and all we must do is
   wait a bit. If we have to initialize it ourselves, we would have called
   log_create_, instead. */

	do retry_count = 1 to P_max_tries;
	     if (log_segment.version = LOG_SEGMENT_VERSION_1) then do;
		P_log_segment_ptr = log_segment_ptr;
		call finished (0);
		end;

	     if (retry_count < P_max_tries) then	/* Don't wait if we won't have another chance */
		call timer_manager_$sleep (ONE_QUARTER_SECOND, RELATIVE_MICROSECONDS);
	     end;

/* It didn't get initialized in time. Terminate it, and give up. */

	P_log_segment_ptr = log_segment_ptr;
	call finished (error_table_$log_uninitialized);

/* */

finished:
     procedure (P_return_code);

declare	P_return_code fixed bin (35) parameter;


	P_code = P_return_code;
	goto MAIN_RETURN;

	end finished;



MAIN_RETURN:					/* Only exit from this program */
	return;

%page; %include access_mode_values;
%page; %include log_segment;

	end log_initiate_;
