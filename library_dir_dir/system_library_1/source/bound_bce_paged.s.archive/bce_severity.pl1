/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */
bce_severity: proc (P_ss_info_ptr);

/* Version of severity for bce.  Keith Loepere, January 1984. */

/* format: style4,indattr,ifthenstmt,ifthen,idind33,^indcomtxt */

dcl  P_ss_info_ptr		        ptr parameter;
dcl  active_fnc_err_	        entry options (variable);
dcl  active_function	        bit (1) aligned;	/* as opposed to command usage */
dcl  af_return		        char (af_return_len) based (af_return_ptr) var; /* return for active function */
dcl  af_return_len		        fixed bin (21);
dcl  af_return_ptr		        ptr;
dcl  arg			        char (arg_len) based (arg_ptr); /* command line arg */
dcl  arg_count		        fixed bin;
dcl  arg_len		        fixed bin (21);
dcl  arg_ptr		        ptr;
dcl  bce_dump$severity	        entry () returns (fixed bin);
dcl  code			        fixed bin (35);
dcl  com_err_		        entry options (variable);
dcl  cu_$af_return_arg_rel	        entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
dcl  cu_$arg_ptr_rel	        entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
dcl  error		        variable entry options (variable);
dcl  error_table_$badopt	        fixed bin (35) ext;
dcl  error_table_$not_act_fnc	        fixed bin (35) ext;
dcl  ioa_			        entry options (variable);
dcl  me			        char (8) init ("severity") static options (constant);/* program name */
dcl  value		        fixed bin;

	ss_info_ptr = P_ss_info_ptr;
	arg_list_ptr = ss_info.arg_list_ptr;
	call cu_$af_return_arg_rel (arg_count, af_return_ptr, af_return_len, code, arg_list_ptr);
	active_function = (code = 0);
	if active_function then error = active_fnc_err_;
	else error = com_err_;
	if arg_count ^= 1 then do;
	     call error (0, me, "Usage is: severity command_name");
	     return;
	end;

	call cu_$arg_ptr_rel (1, arg_ptr, arg_len, code, arg_list_ptr);
	if arg = "dump" then value = bce_dump$severity ();
	else do;
	     call error (error_table_$badopt, me, "^a", arg);
	     return;
	end;

	if active_function then af_return = ltrim (character (value));
	else call ioa_ ("^d", value);
	return;
%page; %include bce_subsystem_info_;
     end;
