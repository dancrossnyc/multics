/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */

/* format: off */

/* bootload Multics qedx Editor command interface */

/* Created:  April 1983 by Keith Loepere from
January 1983 creation by G. Palter as part of implementation of qedx_ subroutine interface */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen */


bootload_qedx:
     procedure (ss_info_ptr);


dcl  argument character (argument_lth) unaligned based (argument_ptr);
dcl  argument_ptr pointer;
dcl  argument_lth fixed binary (21);
dcl  (n_arguments, argument_idx) fixed binary;

dcl  input_filename character (32);
dcl  input_file_ptr pointer;

dcl  exec_filename character (32);
dcl  exec_buffer_lth fixed binary (21);
dcl  exec_buffer_ptr pointer;

dcl  args_buffer character (args_buffer_lth) based (args_buffer_ptr);
dcl  args_buffer_lth fixed bin (21);
dcl  args_buffer_used fixed binary (21);
dcl  args_buffer_ptr ptr;

dcl  1 local_qi aligned,				/* describes how we want the invocation setup */
       2 header like qedx_info.header,
       2 buffers (6) like qedx_info.buffers;		/* 0, 1, 2, 3, exec, args */

dcl  ok_to_continue bit (1) aligned;

dcl  (no_rw_path, have_pathname, have_macro_pathname, have_macro_arguments) bit (1) aligned;

dcl  idx fixed binary;
dcl  code fixed binary (35);

dcl  invocation_level fixed binary static initial (0);	/* # of active invocations of qedx */

dcl  NL character (1) static options (constant) initial ("
");

dcl  QEDX character (32) static options (constant) initial ("bootload_qedx");

						/* format: off */
dcl (error_table_$badopt, error_table_$bigarg, error_table_$inconsistent, error_table_$noarg, error_table_$too_many_args)
	fixed binary (35) external;
dcl  sys_info$max_seg_size fixed bin (18) static external;

/* format: on */

dcl  bootload_fs_$get_ptr entry (char (*), ptr, fixed bin (21), fixed bin (35));
dcl  com_err_ entry () options (variable);
dcl  cu_$arg_count_rel entry (fixed bin, ptr, fixed bin (35));
dcl  cu_$arg_ptr_rel entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
dcl  get_temp_segment_ entry (character (*), pointer, fixed binary (35));
dcl  qedx_ entry (pointer, fixed binary (35));
dcl  release_temp_segment_ entry (character (*), pointer, fixed binary (35));
dcl  (cleanup, request_abort_) condition;

dcl  (divide, length, index, null, segno, substr, string) builtin;
%page;
/* bootload_qedx: procedure (ss_info_ptr); */

	call cu_$arg_count_rel (n_arguments, ss_info.arg_list_ptr, code);
	if code ^= 0 then do;
	     call com_err_ (code, QEDX);
	     signal request_abort_;
	end;

	if invocation_level > 0 then do;		/* it would be nice to eliminate this... */
	     call com_err_ (0, QEDX, "A suspended invocation is somehow on the stack.");
	     return;
	end;

	invocation_level = invocation_level + 1;	/* another qedx */

	input_file_ptr,				/* for cleanup handler */
	     exec_buffer_ptr, args_buffer_ptr = null ();

	on condition (cleanup) call cleanup_qedx_invocation ();


/* format: off */

/* Process arguments: syntax of the qedx command is --

      qedx {-control_args} {macro_path {macro_arguments}} */

/* format: on */

	no_rw_path,				/* allow r/w with pathnames and R/W */
	     have_pathname,				/* haven't seen -pathname yet */
	     have_macro_pathname,			/* haven't seen first non-control argument yet */
	     have_macro_arguments = "0"b;		/* haven't seen any macro arguments */

	do argument_idx = 1 to n_arguments;

	     call cu_$arg_ptr_rel (argument_idx, argument_ptr, argument_lth, code, ss_info.arg_list_ptr);
	     if code ^= 0 then do;			/* sigh */
		call com_err_ (code, QEDX, "Fetching argument #^d.", argument_idx);
		go to RETURN_FROM_QEDX;
	     end;

	     if ^have_macro_pathname then		/* no non-control argument yet: can still accept -ca's */
		if index (argument, "-") = 1 then	/* ... a control argument */
		     if argument = "-no_rw_path" then no_rw_path = "1"b;
		     else if argument = "-rw_path" then no_rw_path = "0"b;

		     else if (argument = "-pathname") | (argument = "-pn") then
			if have_pathname then do;
			     call com_err_ (error_table_$too_many_args, QEDX,
				"""-pathname"" may only be specified once for this command.");
			     go to RETURN_FROM_QEDX;
			end;
			else do;			/* initial contents for buffer 0 ... */
			     have_pathname = "1"b;
			     if argument_idx = n_arguments then do;
				call com_err_ (error_table_$noarg, QEDX, "Pathname after ""^a"".", argument);
				go to RETURN_FROM_QEDX;
			     end;
			     argument_idx = argument_idx + 1;
			     call cu_$arg_ptr_rel (argument_idx, argument_ptr, argument_lth, code,
				ss_info.arg_list_ptr);
			     if code ^= 0 then do;
				call com_err_ (code, QEDX, "Fetching argument #^d.", argument_idx);
				go to RETURN_FROM_QEDX;
			     end;
			     input_filename = argument;
			     call bootload_fs_$get_ptr (argument, input_file_ptr, (0), code);
			     if code ^= 0 then do;	/* the file doesn't exist (sigh) */
				call com_err_ (code, QEDX, "-pathname ^a", argument);
				go to RETURN_FROM_QEDX;
			     end;
			     input_file_ptr = null ();
			end;

		     else do;
			call com_err_ (error_table_$badopt, QEDX, """^a""", argument);
			go to RETURN_FROM_QEDX;
		     end;

		else do;				/* first non-control argument: macro pathname */
		     have_macro_pathname = "1"b;
		     if index (reverse (rtrim (argument)), "xdeq.") = 1 then
			exec_filename = argument;
		     else exec_filename = rtrim (argument) || ".qedx";
		     call bootload_fs_$get_ptr (exec_filename, exec_buffer_ptr, exec_buffer_lth, code);
		     if code ^= 0 then do;		/* the file doesn't exist (sigh) */
			call com_err_ (code, QEDX, "Macro file: ^a", exec_filename);
			go to RETURN_FROM_QEDX;
		     end;
		end;

	     else do;				/* Nth non-control argument: a macro argument */
		if ^have_macro_arguments then do;	/* ... first macro argument */
		     call get_temp_segment_ (QEDX, args_buffer_ptr, code);
		     if code ^= 0 then do;
			call com_err_ (code, QEDX, "Obtaining buffer space for macro arguments");
			go to RETURN_FROM_QEDX;
		     end;
		     args_buffer_lth = sys_info$max_seg_size * 4;
		     args_buffer_used = 0;
		     have_macro_arguments = "1"b;
		end;
		call add_to_args_buffer (argument);
		call add_to_args_buffer (NL);
	     end;
	end;

	if no_rw_path & ^have_pathname then do;
	     call com_err_ (error_table_$inconsistent, QEDX, """-no_rw_path"" must be used with ""-pathname"".");
	     go to RETURN_FROM_QEDX;
	end;


/* Arguments have been validated: setup qedx_info data structure and invoke qedx_ */

	local_qi.header.version = QEDX_INFO_VERSION_1;
	local_qi.header.editor_name = QEDX;

	string (local_qi.header.flags) = ""b;
	local_qi.header.no_rw_path = no_rw_path;
	local_qi.header.query_if_modified = "1"b;	/* finally after all these years ... */

	local_qi.header.n_buffers = 0;		/* no initial buffers yet */

	if have_pathname then do;			/* include a buffer 0 containing requested file ... */
	     local_qi.header.n_buffers, idx = 1;
	     local_qi.buffers (idx).buffer_name = "0";
	     local_qi.buffers (idx).buffer_pathname = input_filename;
	     string (local_qi.buffers (idx).flags) = ""b;
	end;

	if have_macro_pathname then do;		/* exec buffer containing a macro to execute ... */
	     local_qi.header.n_buffers, idx = local_qi.header.n_buffers + 1;
	     local_qi.buffers (idx).buffer_name = "exec";
	     local_qi.buffers (idx).buffer_pathname = ""; /* ... no pathname by default */
	     local_qi.buffers (idx).region_ptr = exec_buffer_ptr;
	     local_qi.buffers (idx).region_max_lth,	/* ... get size from the system */
		local_qi.buffers (idx).region_initial_lth = exec_buffer_lth;
	     string (local_qi.buffers (idx).flags) = ""b;
	     local_qi.buffers (idx).read_write_region, local_qi.buffers (idx).execute_buffer = "1"b;
	end;					/* ... get initial content from us but can't write back */

	if have_macro_arguments then do;		/* a "file" of arguments to the macro ... */
	     local_qi.header.n_buffers, idx = local_qi.header.n_buffers + 1;
	     local_qi.buffers (idx).buffer_name = "args";
	     local_qi.buffers (idx).buffer_pathname = ""; /* ... no pathname by default */
	     local_qi.buffers (idx).region_ptr = args_buffer_ptr;
	     local_qi.buffers (idx).region_max_lth, local_qi.buffers (idx).region_initial_lth = args_buffer_used;
	     string (local_qi.buffers (idx).flags) = ""b;
	     local_qi.buffers (idx).read_write_region = "1"b;
	end;					/* ... get initial content from us but can't write back */


	call qedx_ (addr (local_qi), code);		/* INVOKE THE EDITOR */


RETURN_FROM_QEDX:
	call cleanup_qedx_invocation ();

	return;
%page;
/* Add a character string to the macro arguments buffer */

add_to_args_buffer:
     procedure (p_string);

dcl  p_string character (*) parameter;

	if (args_buffer_used + length (p_string)) > length (args_buffer) then do;
	     call com_err_ (error_table_$bigarg, QEDX, "Too many macro arguments.  First failing argument: ""^a"".", argument);
	     go to RETURN_FROM_QEDX;
	end;

	substr (args_buffer, (args_buffer_used + 1), length (p_string)) = p_string;
	args_buffer_used = args_buffer_used + length (p_string);

	return;

     end add_to_args_buffer;



/* Cleanup after an invocation of qedx */

cleanup_qedx_invocation:
     procedure ();

	if args_buffer_ptr ^= null () then do;
	     call release_temp_segment_ (QEDX, args_buffer_ptr, (0));
	     args_buffer_ptr = null ();
	end;

	invocation_level = invocation_level - 1;	/* all gone */

	return;

     end cleanup_qedx_invocation;
%page;
%include qedx_info;
%page;
%include access_mode_values;
%page;
%include bce_subsystem_info_;

     end bootload_qedx;
