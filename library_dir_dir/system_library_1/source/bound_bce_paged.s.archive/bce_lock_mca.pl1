/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */
/****^  HISTORY COMMENTS:
  1) change(85-09-11,Farley), approve(85-09-11,MCR6979),
     audit(86-02-28,Coppola), install(86-03-21,MR12.0-1033):
     Created for IMU
     support (control MCA).
                                                   END HISTORY COMMENTS */
bce_lock_mca: proc (p_ss_info_ptr);

/* Written by Paul K Farley June 1985 to allow the MCA operator interface 
   to be either disabled (locked) or enabled (unlocked). */

/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */

dcl  Me				char (10);
dcl  arg_count			fixed bin;
dcl  arg				char (arg_len) based (arg_ptr);
dcl  arg_len			fixed bin (21);
dcl  arg_ptr			ptr;
dcl  args_expected			fixed bin;
dcl  code				fixed bin (35);
dcl  lock_mca			bit (1);
dcl  mca_number			fixed bin (35);
dcl  mca_to_unlock			char (4);
dcl  P99				pic "99" based;
dcl  com_err_			entry () options (variable);
dcl  cu_$arg_count_rel		entry (fixed bin, ptr, fixed bin (35));
dcl  cu_$arg_ptr_rel		entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
dcl  cv_dec_check_			entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  ioa_				entry () options (variable);
dcl  ocdcm_$reconfigure		entry (char (4), fixed bin, fixed bin (35));
dcl  p_ss_info_ptr			ptr parameter;
dcl  convert			builtin;
%page;

	lock_mca = "1"b;
	Me = "lock_mca";
	args_expected = 0;
	goto join;

bce_lock_mca$bce_unlock_mca:
     entry (p_ss_info_ptr);

	lock_mca = "0"b;
	Me = "unlock_mca";
	args_expected = 1;

join:
	ss_info_ptr = p_ss_info_ptr;
	call cu_$arg_count_rel (arg_count, ss_info.arg_list_ptr, code);
	if code ^= 0 then do;
	     call com_err_ (code, Me);
	     return;
	end;
	if arg_count ^= args_expected then do;
	     if lock_mca then call ioa_ ("lock_mca: This command takes NO arguments.^/Usage: lock_mca");
	     else call ioa_ ("unlock_mca: This command requires one argument.^/Usage: unlock_mca MCA_NUMBER");
	     return;
	end;

	if lock_mca then do;
	     call ocdcm_$reconfigure ("", LOCK_MCA_INPUT, code);
	     call ioa_ ("lock_mca: MCA interface^[ NOT^] locked.", (code ^= 0));
	     return;
	end;
	call cu_$arg_ptr_rel (1, arg_ptr, arg_len, code, ss_info.arg_list_ptr);
	mca_number = cv_dec_check_ (arg, code);
	if code ^= 0 | mca_number < 0 | mca_number > 31 then do;
	     call ioa_ ("unlock_mca: Illegal MCA number. Range is 0 - 31.");
	     return;
	end;
	mca_to_unlock = "M_" || convert (P99, mca_number);
	call ocdcm_$reconfigure (mca_to_unlock, UNLOCK_MCA_INPUT, code);
	call ioa_ ("unlock_mca: MCA(^a) interface^[ NOT^] unlocked.",
	     convert (P99, mca_number), (code ^= 0));
	return;
%page; %include bce_subsystem_info_;
%page; %include opc_reconfig_options;
     end bce_lock_mca;
