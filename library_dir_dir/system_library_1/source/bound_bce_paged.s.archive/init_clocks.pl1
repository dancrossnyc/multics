/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */
/* INIT_CLOCKS -- read time string from operator, set all clocks */
/* format: style2 */
/* BIM 10/82 */
/* Modified 2/83 by Keith Loepere to use bce_command_processor_ and
     environment */
/* Modified 6/83 by Keith Loepere so operator doesn't have to enter time. */
/* Modified 4/84 by Keith Loepere for simplification */
/* Modified 7/84 by J Falksen for new date/time software */
/* Modified 1/85 by Keith Loepere to check RPV time unmounted. */
/* Modified 1/85 by Keith Loepere to not set date/time defaults and to use
     time_info_ to automatically set delta given a zone. */



/****^  HISTORY COMMENTS:
  1) change(1986-12-04,Fawcett), approve(1986-12-17,MECR0006),
     audit(1986-12-12,GDixon), install(1986-12-17,MR12.0-1250):
     Changed to call date_time_$set_time_defaults. If the operator inputs
     a new time string with a time zone the correct time will set.
  2) change(1987-01-08,Fawcett), approve(1987-01-08,MCR7600),
     audit(1987-01-13,GJohnson), install(1987-01-13,MR12.0-1270):
     This closes MECR0006.
  3) change(1999-06-23,Haggett), audit(2018-01-13,GDixon),
     install(2018-01-16,MR12.6g-0004):
     Y2K
  4) change(2018-01-13,Swenson), approve(2018-01-13,MCR10041),
     audit(2018-01-13,GDixon), install(2018-01-16,MR12.6g-0004):
     Fix issue with boot_delta clok card param handling when param not present.
  5) change(2020-01-22,Swenson), approve(2020-01-22,MCR10075),
     audit(2020-02-01,GDixon), install(2020-02-01,MR12.6g-0040):
     Fix typo in message telling when system was last shutdown.
                                                   END HISTORY COMMENTS */


init_clocks:
     procedure (success);

/* Parameters */

	declare success		 bit (1) aligned parameter;

/* Constants */

	declare me		 char (11) init ("init_clocks") static options (constant);
	declare time_format		 char (41) int static options (constant)
				 init ("^dn, ^mn ^Z9dm, ^9999yc ^Z9Hd:^MH:^SM ^za");

/* Entries */

	declare bce_query		 entry options (variable);
	declare bce_query$yes_no	 entry options (variable);
	declare com_err_		 entry options (variable);
	declare convert_date_to_binary_
				 entry (char (*), fixed bin (71), fixed bin (35));
	declare date_time_$format	 entry (char (*), fixed bin (71), char (*), char (*)) returns (char (250) var);
	declare date_time_$set_time_defaults
				 entry ();
	declare ioa_		 entry () options (variable);
	declare privileged_mode_ut$sscr
				 entry (fixed bin (3), fixed bin (6), fixed bin (71));
	declare read_disk		 entry (fixed bin, fixed bin, ptr, fixed bin (35));

/* Variables */

	declare TIME		 fixed bin (71);
	declare bootload_scu	 fixed bin (3);
	declare code		 fixed bin (35);
	declare line		 char (80);
	declare time_correction	 fixed bin (71);
	declare time_string		 char (64) var;
	declare zone		 char (4);
	declare 1 rpv_label		 aligned like label;

/* External */

	declare disk_config_deck$	 external static;
	declare pvt$root_pvtx	 fixed bin external static;
	declare sys_info$clock_	 bit (3) aligned external static;
	declare sys_info$first_reasonable_time
				 fixed bin (71) external static;
	declare sys_info$last_reasonable_time
				 fixed bin (71) external static;
	declare sys_info$time_correction_constant
				 fixed bin (71) aligned external static;
	declare sys_info$time_zone	 char (4) aligned external static;

/* Misc */

	declare (addr, addrel, bin, clock, divide, fixed, hbound, lbound, rtrim, size, substr, unspec)
				 builtin;
%page;
	success = "0"b;

	call find_zone;				/* zone defined by current clock "card" */

	bootload_scu = fixed (sys_info$clock_, 3);

	TIME = clock ();

	call read_rpv_label ();
	time_string = date_time_$format (time_format, label.time_unmounted, zone, "");
	call ioa_ ("System was last shutdown at:^/^a", time_string);

	call check_time;
	line = "xxx";
	do while (^(line = "n" | line = "no"));
	     call bce_query (line, "Is this correct? ");
	     if line = "y" | line = "yes"
	     then do;
		     call set_defaults;		/* if things were correct set the date_time defaults */
		     call check_rpv;
		     success = "1"b;
		     return;
		end;
	     else if line = "abort"
	     then return;
	end;

CHECK_TIME:
	call bce_query (line, "Enter time: ");
	if line = "abort"
	then do;
ABORT:
		success = "0"b;
		return;
	     end;

	call set_defaults;

	call convert_date_to_binary_ (line, TIME, code);

	if code ^= 0
	then do;					/* Operator's time string invalid?		*/
		call com_err_ (code, me, "^a", rtrim (line));
		go to CHECK_TIME;
	     end;

	if scs$controller_data (bootload_scu).type < "0010"b
	then do;					/* help out operator */
		call ioa_ ("SCU Switches (octal): ^w ^w", substr (unspec (TIME), 1, 36), substr (unspec (TIME), 37));

		call bce_query (line, "Enter anything after the switches have been set. ");
		TIME = clock ();
	     end;

	call check_time;
	line = "xxx";
	do while (^(line = "n" | line = "no"));
	     call bce_query (line, "Is this correct? ");
	     if line = "y" | line = "yes"
	     then do;
		     if scs$controller_data (bootload_scu).type < "0010"b
		     then ;
		     else call set_clocks;		/* set in all controllers */
		     call check_rpv;
		     success = "1"b;
		     return;
		end;
	     else if line = "abort"
	     then return;
	end;
	go to CHECK_TIME;
%page;

set_defaults:
     proc;
	sys_info$time_zone = zone;
	sys_info$time_correction_constant = time_correction;
	call date_time_$set_time_defaults ();
     end set_defaults;

set_clocks:
     proc;

	declare controllerx		 fixed bin (3);

	do controllerx = lbound (scs$controller_data, 1) to hbound (scs$controller_data, 1);
	     if bin (scs$controller_data (controllerx).type, 4) >= 0010b & scs$controller_data (controllerx).online
	     then call privileged_mode_ut$sscr (controllerx, SC_ETC, TIME);
	end;
	return;
     end;

find_zone:
     proc;

/* Find time zone, checking that it is in time_info_.
   We must do this by looking at disk_config_deck. */

	declare idx		 fixed bin;
	declare lang_index		 fixed bin;
	declare zone_index		 fixed bin;

	cardp = addr (disk_config_deck$);
	config_max_cards = divide (4096 - 1, size (config_card), 17, 0);
						/* Assume four page default */

	do idx = 1 to config_max_cards while (config_card.word ^= FREE_CARD_WORD & config_card.word ^= CLOK_CARD_WORD);
	     cardp = addrel (cardp, size (config_card));	/* on to the next card */
	end;

	if idx <= config_max_cards
	then if config_card.word = CLOK_CARD_WORD
	     then do;
		     clok_cardp = cardp;
		     zone = clok_card.zone;
		     do lang_index = 1 to ti_zone.number_lang;
			do zone_index = 1 to ti_zone.number_zone;
			     if ti_zone.short (lang_index, zone_index) = clok_card.zone
			     then go to found_zone;
			end;
		     end;
		     call com_err_ (0, me, "The zone named on the CLOK card is not in time_info_");
		     goto ABORT;
found_zone:
		     time_correction = ti_zone.delta (lang_index, zone_index);
		end;
	     else go to no_clok;
	else do;
no_clok:
		call com_err_ (0, me, "No clok card in config deck.");
		go to ABORT;
	     end;
	return;
     end;

check_time:
     proc;

	time_string = date_time_$format (time_format, TIME, zone, "");
	call ioa_ ("Current system time is: ^a.", time_string);
	if TIME <= sys_info$first_reasonable_time | TIME >= sys_info$last_reasonable_time | TIME < label.time_unmounted
	then do;
		call ioa_ ("This is clearly incorrect.");
		go to CHECK_TIME;
	     end;
	return;
     end;
%page;
check_rpv:
     proc;

/* Make sure the time is reasonable relative to the RPV time unmounted. */

	dcl     yes_no		 bit (1) aligned;

	if label.time_unmounted <= sys_info$first_reasonable_time
	     | label.time_unmounted >= sys_info$last_reasonable_time
	then return;				/* bogus label times */

	if clock () < label.time_unmounted
	then do;
		call bce_query$yes_no (yes_no,
		     "The current time is *before* the last shutdown time recorded in the RPV.
Are you sure the time is correct? ");
		if ^yes_no
		then go to CHECK_TIME;
	     end;

	if clok_card.boot_delta ^= -1 & clock () > label.time_unmounted + clok_card.boot_delta * 3600 * 1000000
	then do;
		call bce_query$yes_no (yes_no, "The current time is more than the supplied boot_delta hours beyond the
unmounted time recorded in the RPV label.  Is this correct? ");
		if ^yes_no
		then go to CHECK_TIME;

		if (divide (clock () - label.time_unmounted, 3600 * 1000000, 17, 0) > 12) then do;
		     call bce_query$yes_no (yes_no, "The current time I'm using is more than 12 hours
after the last shutdown time recorded in the RPV label.
Are you sure this is correct? ");
		     if ^yes_no then
			goto CHECK_TIME;
		end;
	     end;
	return;					/* okay */
     end;
%skip;
read_rpv_label:
     proc;

	labelp = addr (rpv_label);
	call read_disk (pvt$root_pvtx, LABEL_ADDR, labelp, code);
	if code ^= 0
	then do;
		call com_err_ (code, me, "RPV label");
		go to ABORT;
	     end;
	return;

end read_rpv_label;
%page;
%include config_deck;
%page;
%include config_clok_card;
%page;
%include disk_pack;
%page;
%include fs_vol_label;
%page;
%include scr;
%page;
%include scs;
%page;
%include time_names;
     end init_clocks;
