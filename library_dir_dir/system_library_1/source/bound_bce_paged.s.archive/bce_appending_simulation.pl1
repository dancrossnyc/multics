/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-01-14,Fawcett), approve(86-04-11,MCR7383),
     audit(86-05-12,Farley), install(86-07-17,MR12.0-1097):
     Changed to add Subvolume support.
                                                   END HISTORY COMMENTS */


bce_appending_simulation: proc;

/* Routine to access segments in the saved Multics memory image.
   Written October 1983 and beyond by Keith Loepere.
   Modified to better handle a few unusual occurences by Allen Ball, July 1984.
   Modified to correctly set cmep, Keith Loepere, November 1984. */

/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */

dcl  Read				bit (1) aligned static options (constant) init ("1"b);
dcl  Write			bit (1) aligned static options (constant) init ("0"b);
dcl  abs_seg0$			(0:256 * 1024 - 1) bit (36) aligned ext;
dcl  abs_seg_pt			(0:255) bit (36) aligned based (static.abs_seg_ptp);
dcl  abs_seg_pt_addr		fixed bin (26);	/* address of page table for abs_seg0 */
dcl  absadr			entry (ptr, fixed bin (35)) returns (fixed bin (26));
dcl  addr				builtin;
dcl  address			fixed bin (26);	/* absolute address to get */
dcl  addwordno			builtin;
dcl  bin				builtin;
dcl  code				fixed bin (35) parameter;
dcl  core_map$			external;
dcl  core_map_ptw			bit (36) aligned;	/* for finding its absadr */
dcl  core_map_sdw			fixed bin (71);	/* for finding its absadr */
dcl  core_map_segnum		fixed bin (15);	/* for getting its absadr */
dcl  data_length			fixed bin (18);	/* amount left to get/put */
dcl  data_part			(data_part_length) bit (36) aligned based (data_ptr);
dcl  data_part_length		fixed bin (18);	/* of desired that fits (in page) under examination */
dcl  data_ptr			ptr;		/* where to get/put */
dcl  dbr_util_$dissect		entry (ptr, ptr);
dcl  dbr_value			bit (72) aligned parameter; /* descriptor base register value for simulation */
dcl  desired_segnum			fixed bin (15) parameter;
dcl  divide			builtin;
dcl  dseg$			(0:511) fixed bin (71) ext;
dcl  dseg_page_address		fixed bin (26);	/* for finding dseg sdw */
dcl  dseg_sdw			fixed bin (71);
dcl  error_table_$argerr		fixed bin (35) ext static;
dcl  error_table_$boundviol		fixed bin (35) ext static;
dcl  error_table_$dev_offset_out_of_bounds fixed bin (35) ext static;
dcl  error_table_$fsdisk_pvtx_oob	fixed bin (35) ext static;
dcl  error_table_$fsdisk_phydev_err	fixed bin (35) ext static;
dcl  error_table_$invalidsegno	fixed bin (35) ext static;
dcl  get_ptrs_$given_segno		entry (fixed bin (15)) returns (ptr);
dcl  int_unpaged_page_tables$		external;
dcl  min				builtin;
dcl  mod				builtin;
dcl  multics_data_ptr		ptr;
dcl  multics_high_mem$		(0:256 * 1024 - 1) bit (36) aligned ext;
dcl  multics_low_mem$		(0:256 * 1024 - 1) bit (36) aligned ext;
dcl  1 my_cme			aligned like cme;
dcl  my_dbr			bit (72) aligned;	/* either mine, or from crash */
dcl  1 my_dbr_info			aligned like dbr_info;
dcl  1 my_ptw_info			aligned like ptw_info;
dcl  1 my_sdw_info			aligned like sdw_info;
dcl  op_not_complete		condition;
dcl  parity			condition;
dcl  p_address			fixed bin (26) parameter; /* absolute address desired */
dcl  p_data_length			fixed bin (18) parameter; /* length desired */
dcl  p_data_ptr			ptr parameter;	/* user's area */
dcl  p_examine_crash		bit (1) aligned parameter; /* as opposed to bce */
dcl  p_last_segnum			fixed bin (15) parameter;
dcl  p_seg_info_ptr			ptr parameter;
dcl  p_seg_sdw			fixed bin (71) parameter;
dcl  page_fault_error		condition;
dcl  page_num			fixed bin;	/* loop counter */
dcl  page_offset			fixed bin (10);	/* start of desired data in this page */
dcl  pc$cleanup			entry (ptr);
dcl  pc_wired$write_wait		entry (ptr, fixed bin, fixed bin);
dcl  pmut$camp			entry;
dcl  ptr				builtin;
dcl  ptw_util_$dissect		entry (ptr, ptr);
dcl  ptw_util_$make_core		entry (ptr, fixed bin (26));
dcl  ptw_util_$make_disk		entry (ptr, fixed bin (20));
dcl  ptw_util_$make_null_disk		entry (ptr, fixed bin (20));
dcl  ptw_util_$reset_phm		entry (ptr);
dcl  ptw_util_$set_phm		entry (ptr);
dcl  pvt$root_pvtx			fixed bin external;
dcl  rdisk_seg$			external;		/* for reading/writing disk pages */
dcl  read_write			bit (1) aligned;	/* get versus put operation */
dcl  sdw_util_$dissect		entry (ptr, ptr);
dcl  sdw_util_$get_address		entry (ptr, fixed bin (26));
dcl  seg_sdw			fixed bin (71);	/* describe new segment */
dcl  segno			builtin;
dcl  1 static			aligned internal static, /* things remembered about current simulation */
       2 abs_seg_ptp		ptr,		/* page table ptr for abs_seg0 */
       2 core_map_address		fixed bin (26),	/* for finding cme entries */
       2 core_map_present		bit (1) aligned,	/* coremap exists to resolve out-of-service pages */
       2 current_abs_seg_addr		fixed bin (26) init (-256 * 1024), /* current absolute address of pages described by abs_seg0
						initial value is such as to be not confused with a good abs-seg addr */
       2 dseg_info			aligned like seg_info,
       2 examine_crash		bit (1) aligned,	/* as opposed to bce memory */
       2 high_mem_astep		ptr,		/* astep for multics_high_mem */
       2 last_segnum		fixed bin (15) init (-1), /* highest valid segno for this dbr */
       2 low_mem_astep		ptr,		/* astep for multics_low_mem */
       2 rdisk_astep		ptr,		/* for reading page of arbitrary disk */
       2 rdisk_ptp			ptr,		/* to ptw for rdisk_seg */
       2 rdisk_ptr			ptr,		/* to seg for reading arbitrary disk pages */
       2 toehold_addr		fixed bin (26),	/* absadr of toehold */
       2 toehold_data_addr		fixed bin (26);	/* absadr of toehold_data (holder of first two pages of low mem) */
dcl  size				builtin;
dcl  store			condition;
dcl  substr			builtin;
dcl  sys_boot_info$bce_dbr		bit (72) aligned external;
dcl  1 toehold$			external aligned like toe_hold;
dcl  toehold_data$			external;
dcl  unspec			builtin;
%page;
init: entry (p_examine_crash, code);

/* Initialize various static variables. */

	code = 0;
	static.examine_crash = p_examine_crash;
	call sdw_util_$get_address (addr (dseg$ (segno (addr (abs_seg0$)))), abs_seg_pt_addr);
	static.abs_seg_ptp = ptr (addr (int_unpaged_page_tables$), abs_seg_pt_addr - absadr (addr (int_unpaged_page_tables$), (0)));
	static.toehold_data_addr = absadr (addr (toehold_data$), (0));
	static.toehold_addr = absadr (addr (toehold$), (0));

	static.low_mem_astep = get_ptrs_$given_segno (segno (addr (multics_low_mem$)));
	static.high_mem_astep = get_ptrs_$given_segno (segno (addr (multics_high_mem$)));

	static.rdisk_ptr = addr (rdisk_seg$);
	static.rdisk_astep = get_ptrs_$given_segno (segno (static.rdisk_ptr));
	static.rdisk_ptp = addwordno (static.rdisk_astep, size (aste));
	static.rdisk_astep -> aste.pvtx = pvt$root_pvtx;	/* good initial state */
	call ptw_util_$make_disk (static.rdisk_ptp, 0);

	static.current_abs_seg_addr = -256 * 1024;
	if static.examine_crash then my_dbr = toehold$.multics_state.dbr; /* assume dbr from mc */
	else my_dbr = sys_boot_info$bce_dbr;
	call new_dbr (my_dbr, (0), code);

abort:	return;
%page;
new_dbr: entry (dbr_value, p_last_segnum, code);

/* Supply a new dseg for the simulation. */

	code = 0;
	dbr_info_ptr = addr (my_dbr_info);
	sdw_info_ptr = addr (my_sdw_info);
	ptw_info_ptr = addr (my_ptw_info);

	on page_fault_error call page_error;

/* Examine the new dbr. */

	call dbr_util_$dissect (addr (dbr_value), dbr_info_ptr);
	static.last_segnum, p_last_segnum = divide (dbr_info.bound, 2, 15) - 1;
	static.dseg_info.sdwi.paged = dbr_info.paged;
	static.dseg_info.sdwi.address = dbr_info.address;

/* Get the sdw & page table for dseg. */

	if static.dseg_info.sdwi.paged then do;
	     call get_absolute (static.dseg_info.sdwi.address - size (aste), size (aste) + divide (dbr_info.bound + 1023, 1024, 8), addr (static.dseg_info.sst_data), code);
	     if code ^= 0 then return;
	     call ptw_util_$dissect (addr (static.dseg_info.page_table (0)), ptw_info_ptr);
	     call get_absolute (ptw_info.address, 2, addr (dseg_sdw), code);
	     if code ^= 0 then return;
	end;
	else do;
	     call get_absolute (static.dseg_info.sdwi.address, 2, addr (dseg_sdw), code);
	     if code ^= 0 then return;
	end;
	call sdw_util_$dissect (addr (dseg_sdw), addr (static.dseg_info.sdwi));

/* Find the core_map, if present, which is needed to resolve pages that were
out of service for io. */

	static.core_map_present = "0"b;
	if segno (addr (core_map$)) <= p_last_segnum then do;
	     core_map_segnum = segno (addr (core_map$));	/* in first dseg page - known to be in memory */
	     if static.dseg_info.sdwi.paged then dseg_page_address = ptw_info.address;
	     else dseg_page_address = static.dseg_info.sdwi.address;
	     call get_absolute (dseg_page_address + 2 * core_map_segnum, 1, addr (core_map_sdw), code);
	     if code ^= 0 then return;
	     call sdw_util_$dissect (addr (core_map_sdw), sdw_info_ptr);
	     if sdw_info.paged then do;
		call get_absolute (sdw_info.address, 1, addr (core_map_ptw), code);
		if code ^= 0 then return;
		call ptw_util_$dissect (addr (core_map_ptw), ptw_info_ptr);
		static.core_map_address = ptw_info.address;
	     end;
	     else static.core_map_address = sdw_info.address;
	     static.core_map_present = static.core_map_address ^= 0;
	end;
	return;
%page;
get_absolute: entry (p_address, p_data_length, p_data_ptr, code);

	read_write = Read;
	go to absolute;

put_absolute: entry (p_address, p_data_length, p_data_ptr, code);

	read_write = Write;

absolute:

/* Get or put a range of memory given an absolute address. 
We access Multics memory through one of three segments.  The segment 
multics_low_mem maps onto the first 256k of memory (saved to disk).  (Actually,
pages 0 and 1 of this memory are actually in toehold_data within this segment.)
multics_high_mem is the next 256k.  The abs-seg abs_seg0 is mapped onto the nth
256k;  its page table is changed as needed.  We do all of this one page at a
time, backwards, to provide better disk latency. */

	code = 0;
	on page_fault_error call page_error;
	on parity call mem_error;
	on store call mem_error;
	on op_not_complete call mem_error;

	data_length = p_data_length;

/* We march the address we desire downwards, by at most a page at a time. */

	do while (data_length > 0);

/* Find amount of data in this page. */

	     data_part_length = mod (p_address + data_length - 1, 1024) + 1; /* amount from start of page to last word */
	     if data_part_length <= data_length then address = p_address + data_length - data_part_length; /* data crosses into this page */
	     else do;				/* data within a page */
		address = p_address;
		data_part_length = data_length;
	     end;
	     page_num = divide (address, 1024, 16);

	     data_ptr = addwordno (p_data_ptr, address - p_address);

	     if ^static.examine_crash | (address >= (512 * 1024)) then
		if (static.current_abs_seg_addr <= address) & (address < (static.current_abs_seg_addr + 256 * 1024)) then do; /* memory extent we already have mapped */
		     multics_data_ptr = ptr (addr (abs_seg0$), address - static.current_abs_seg_addr);
		     if read_write = Read then data_ptr -> data_part = multics_data_ptr -> data_part;
		     else multics_data_ptr -> data_part = data_ptr -> data_part;
		end;
		else do;				/* we must re-map abs_seg0$ */
		     static.current_abs_seg_addr = divide (address, 256 * 1024, 8) * 256 * 1024;
		     do page_num = 0 to 255;
			call ptw_util_$make_core (addr (abs_seg_pt (page_num)), static.current_abs_seg_addr + page_num * 1024);
		     end;
		     call pmut$camp;
		     multics_data_ptr = ptr (addr (abs_seg0$), address - static.current_abs_seg_addr);
		     if read_write = Read then data_ptr -> data_part = multics_data_ptr -> data_part;
		     else multics_data_ptr -> data_part = data_ptr -> data_part;
		end;
	     else if address >= 256 * 1024 then do;	/* Must be low memory of crash image to examine */
		multics_data_ptr = ptr (addr (multics_high_mem$), address - 256 * 1024);
		if read_write = Read then data_ptr -> data_part = multics_data_ptr -> data_part;
		else do;
		     multics_data_ptr -> data_part = data_ptr -> data_part;
		     call pc_wired$write_wait (static.high_mem_astep, page_num - 256, 1);
		end;
	     end;
	     else if address >= static.toehold_addr + 2048 then do;
		multics_data_ptr = ptr (addr (multics_low_mem$), address);
		if read_write = Read then data_ptr -> data_part = multics_data_ptr -> data_part;
		else do;
		     multics_data_ptr -> data_part = data_ptr -> data_part;
		     call pc_wired$write_wait (static.low_mem_astep, page_num, 1);
		end;
	     end;
	     else if address >= static.toehold_addr then do; /* toehold stays in memory */
		multics_data_ptr = ptr (addr (toehold$), address - static.toehold_addr);
		if read_write = Read then data_ptr -> data_part = multics_data_ptr -> data_part;
		else multics_data_ptr -> data_part = data_ptr -> data_part;
	     end;
	     else if address >= 2 * 1024 then do;	/* below toehold */
		multics_data_ptr = ptr (addr (multics_low_mem$), address);
		if read_write = Read then data_ptr -> data_part = multics_data_ptr -> data_part;
		else do;
		     multics_data_ptr -> data_part = data_ptr -> data_part;
		     call pc_wired$write_wait (static.low_mem_astep, page_num, 1);
		end;
	     end;
	     else do;				/* page is in toehold_data area of saved memory */
		multics_data_ptr = ptr (addr (multics_low_mem$), static.toehold_data_addr + address);
		if read_write = Read then data_ptr -> data_part = multics_data_ptr -> data_part;
		else do;
		     multics_data_ptr -> data_part = data_ptr -> data_part;
		     call pc_wired$write_wait (static.low_mem_astep, divide (static.toehold_data_addr, 1024, 16) + page_num, 1);
		end;
	     end;
	     data_length = data_length - data_part_length;
	end;
	return;
%page;
new_segment: entry (desired_segnum, p_seg_info_ptr, code);

/* This entry specifies what segment future calls to put/get_virtual will
reference.  The virtual operations are broken apart into this routine (which
specifies the segment number portion of an address) and the get/put_virtual 
entries which supply the word number.  This is done for efficiency. */

	code = 0;
	seg_info_ptr = p_seg_info_ptr;
	on page_fault_error call page_error;

	if desired_segnum > static.last_segnum then do;
	     code = error_table_$invalidsegno;
	     go to bad_segment;
	end;

/*  We will get the user's new segment's sdw and page table.  We use virtual
to get the seg's sdw. */

	call get_virtual (addr (static.dseg_info), desired_segnum * 2, 2, addr (seg_sdw), code);
	if code ^= 0 then go to bad_segment;
	go to new_sdw_join;

new_sdw: entry (p_seg_sdw, p_seg_info_ptr, code);

	code = 0;
	seg_sdw = p_seg_sdw;
	seg_info_ptr = p_seg_info_ptr;
	on page_fault_error call page_error;

new_sdw_join:
	call sdw_util_$dissect (addr (seg_sdw), addr (seg_info.sdwi));
	if seg_info.sdwi.faulted then do;
	     code = error_table_$invalidsegno;
	     go to bad_segment;
	end;
	if seg_info.sdwi.paged then do;		/* Get the seg's aste/page table */
	     call get_absolute (seg_info.sdwi.address - size (aste), size (aste) + divide (seg_info.sdwi.size + 1023, 1024, 8), addr (seg_info.sst_data), code);
	     if code ^= 0 then do;			/* It could just be that the page table is in good memory and has no aste in front of it, but... */
		seg_info.sdwi.faulted = "1"b;
bad_segment:	return;
	     end;
	end;
	return;
%page;
get_virtual: entry (p_seg_info_ptr, p_address, p_data_length, p_data_ptr, code);

	read_write = Read;
	go to virtual;

put_virtual: entry (p_seg_info_ptr, p_address, p_data_length, p_data_ptr, code);

	read_write = Write;

virtual:

/* Fetch a given set of words from the current segment. */

	code = 0;
	seg_info_ptr = p_seg_info_ptr;
	on page_fault_error call page_error;

	ptw_info_ptr = addr (my_ptw_info);
	data_length = p_data_length;
	if p_address + data_length > seg_info.sdwi.size then do;
	     data_part_length = min (data_length, p_address + data_length - seg_info.sdwi.size);
	     data_ptr = addwordno (p_data_ptr, data_length - data_part_length);
	     unspec (data_ptr -> data_part) = "0"b;
	     code = error_table_$boundviol;
	     data_length = data_length - data_part_length;
	end;
	if seg_info.sdwi.paged then do;
	     do while (data_length > 0);
		data_part_length = mod (p_address + data_length - 1, 1024) + 1; /* amount from start of page to last word */
		if data_part_length <= data_length then address = p_address + data_length - data_part_length; /* data crosses into this page */
		else do;				/* data within a page */
		     address = p_address;
		     data_part_length = data_length;
		end;
		data_ptr = addwordno (p_data_ptr, address - p_address);
		page_num = divide (address, 1024, 8);
		page_offset = mod (address, 1024);

/* Find the appropriate page.  Move the amount found in that page to the
user's area. */

		if page_num < 0 | page_num > 255 then go to bad_page;
		call ptw_util_$dissect (addr (seg_info.page_table (page_num)), ptw_info_ptr);
		if ptw_info.valid then		/* properly in memory */
		     if read_write = Read then call get_absolute (ptw_info.address + page_offset, data_part_length, data_ptr, code);
		     else do;
			call put_absolute (ptw_info.address + page_offset, data_part_length, data_ptr, code);
			if ^ptw_info.phm then do;	/* must update phm in ptw */
			     call ptw_util_$set_phm (addr (seg_info.page_table (page_num)));
			     call put_absolute (seg_info.sdwi.address + page_num, 1, addr (seg_info.page_table (page_num)), code);
			end;
		     end;
		else if ptw_info.add_type = add_type.disk then do;
		     if ptw_info.null_disk then
			if read_write = Read then go to zero_page;
			else go to bad_page;
		     else if read_write = Read then do;
			call map_for_read ((ptw_info.address), code);
			if code = 0 then do;
			     data_ptr -> data_part = addwordno (static.rdisk_ptr, page_offset) -> data_part;
			     call pc$cleanup (static.rdisk_astep);
			end;
			else go to bad_page;
		     end;
		     else do;
			call map_for_update ((ptw_info.address), code);
			if code = 0 then do;
			     addwordno (static.rdisk_ptr, page_offset) -> data_part = data_ptr -> data_part;
			     call pc$cleanup (static.rdisk_astep);
			end;
			else go to bad_page;
		     end;
		end;
		else if ptw_info.add_type = add_type.core then do;
		     if ^ptw_info.os then go to bad_page;
		     if ^static.core_map_present then go to bad_page;

/* find core map entry */

		     cmep = addr (my_cme);
		     call get_absolute (static.core_map_address + 8 + size (cme) * divide (ptw_info.address, 1024, 16), size (cme), cmep, code);
		     if code ^= 0 then go to bad_page;
		     if substr (cme.devadd, 19, 4) ^= add_type.disk then go to bad_page;
		     if substr (cme.devadd, 1, 1) then go to bad_page;
		     if read_write = Read then do;
			if cme.io then call get_absolute (ptw_info.address + page_offset, data_part_length, data_ptr, code); /* page was being written -> memory good */
			else do;			/* reading -> disk is better */
			     call map_for_read (bin (substr (cme.devadd, 1, 18), 18), code);
			     if code = 0 then do;
				data_ptr -> data_part = addwordno (static.rdisk_ptr, page_offset) -> data_part;
				call pc$cleanup (static.rdisk_astep);
			     end;
			     else go to bad_page;
			end;
		     end;
		     else do;
			if cme.io then do;		/* was being written - memory is best */
			     call put_absolute (ptw_info.address + page_offset, data_part_length, data_ptr, code); /* page was being written -> memory good */
			     call map_for_write (bin (substr (cme.devadd, 1, 18), 18), code); /* save on disk */
			     if code = 0 then do;
				call get_absolute (ptw_info.address, 1024, static.rdisk_ptr, code);
				call pc$cleanup (static.rdisk_astep);
			     end;
			     else go to bad_page;
			end;
			else do;			/* reading -> disk is better */
			     call map_for_update (bin (substr (cme.devadd, 1, 18), 18), code);
			     if code = 0 then do;
				addwordno (static.rdisk_ptr, page_offset) -> data_part = data_ptr -> data_part;
				call put_absolute (ptw_info.address, 1024, static.rdisk_ptr, code);
				call pc$cleanup (static.rdisk_astep);
			     end;
			     else go to bad_page;
			end;
		     end;
		end;
		else do;
bad_page:		     if code = 0 then code = error_table_$argerr;
zero_page:	     if read_write = Read then unspec (data_ptr -> data_part) = "0"b;
		end;
		data_length = data_length - data_part_length;
	     end;
	end;
	else do;					/* in memory (unpaged) */
	     address = seg_info.sdwi.address + p_address;
	     if read_write = Read then call get_absolute (address, p_data_length, p_data_ptr, code);
	     else call put_absolute (address, p_data_length, p_data_ptr, code);
	end;
	return;
%page;
map_for_read: proc (record_num, code);

/* Map rdisk_seg onto the desired page.  This routine is actually a
streamlined version of read_disk for this purpose and uses the nice rdisk_seg
aste built by read_disk. */

dcl  code				fixed bin (35) parameter;
dcl  record_num			fixed bin (20) parameter;
dcl  write_op			bit (1) aligned;

map_for_update: entry (record_num, code);

	write_op = "0"b;
	go to map;

map_for_write: entry (record_num, code);		/* previous contents don't matter */

	write_op = "1"b;

map:	pvtp = addr (pvt$);
	code = 0;
	if seg_info.sst_data.pvtx < 1 | seg_info.sst_data.pvtx > pvt.n_entries then do;
	     code = error_table_$fsdisk_pvtx_oob;
	     return;
	end;

	pvtep = addr (addr (pvt.array) -> pvt_array (seg_info.sst_data.pvtx));
	if record_num < 0 | record_num >= rec_per_sv (pvte.device_type) then do;
	     code = error_table_$dev_offset_out_of_bounds;
	     return;
	end;

	static.rdisk_astep -> aste.pvtx = seg_info.sst_data.pvtx;
	static.rdisk_astep -> aste.npfs = "0"b;

	if write_op then call ptw_util_$make_null_disk (static.rdisk_ptp, record_num);
	else call ptw_util_$make_disk (static.rdisk_ptp, record_num);
	return;
     end;

page_error: proc;

/* Abort rdisk activity, return error code. */

	call ptw_util_$reset_phm (static.rdisk_ptp);	/* don't let pc try to write */
	call pc$cleanup (static.rdisk_astep);

mem_error: entry;

	code = error_table_$fsdisk_phydev_err;
	go to abort;
     end;
%page; %include add_type;
%page; %include bce_appending_seg_info;
%page; %include cmp;
%page; %include dbr_info;
%page; %include fs_dev_types;
%page; %include ptw_info;
%page; %include pvt;
%page; %include pvte;
%page; %include toe_hold;
     end;
