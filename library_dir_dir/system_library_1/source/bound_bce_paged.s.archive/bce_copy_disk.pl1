/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-01-17,Fawcett), approve(86-01-17,MCR7220),
     audit(86-05-14,Farley), install(86-07-17,MR12.0-1097):
     Created by Keith Loepere March 1985 to copy a disk pack to another disk
     pack.
  2) change(86-01-17,Fawcett), approve(86-04-11,MCR7383),
     audit(86-05-14,Farley), install(86-07-17,MR12.0-1097):
     Changed to support subvolumes by adding call to disk_name_pvtx.
                                                   END HISTORY COMMENTS */

bce_copy_disk: proc (p_ss_info_ptr);

/* Routine to copy a disk pack to another disk pack.
Written in March 1985 by Keith Loepere. */

/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */

/* Parameters */

dcl  p_ss_info_ptr			ptr parameter;

/* Variables */

dcl  arg_count			fixed bin;
dcl  arg_len			fixed bin (21);
dcl  arg_list_ptr			ptr;
dcl  arg_num			fixed bin;
dcl  arg_ptr			ptr;
dcl  buffer_address			fixed bin (26);
dcl  buffer_num			fixed bin;
dcl  buffer_ptr			(2) ptr;
dcl  buffer_to_read			(9) fixed bin;	/* buffer number to read in at given state */
dcl  buffer_to_write		(9) fixed bin;	/* buffer number to write out at given state */
dcl  buffer_waiting_for		(9) fixed bin;	/* buffer whose completion we are waiting for */
dcl  code				fixed bin (35);
dcl  device_type			fixed bin;
dcl  end_state			(9) fixed bin;	/* state to enter when the last read has completed */
dcl  f_record			fixed bin (18);
dcl  force			bit (1) aligned;	/* don't ask questions */
dcl  from_devname			char (8);
dcl  from_pvtx			fixed bin;
dcl  l_record			fixed bin (18);
dcl  1 my_label			aligned like label;
dcl  max_io_pages			fixed bin;	/* max pages to handle at a time - normally 3,
						but is temp set to 1 for error recovery */
dcl  normal_state			(9) fixed bin;	/* state to enter after a read/write completes */
dcl  1 record_info			aligned,
       2 read			aligned,
         3 new_record		fixed bin (18),
         3 prev_record		fixed bin (18),
         3 prev_record_in_cylinder	fixed bin,
         3 records_this_cylinder	fixed bin,
       2 buffer			(2) aligned like record_info.read;
dcl  state			fixed bin;
dcl  temp_astep			ptr;
dcl  temp_seg_ptr			ptr;
dcl  to_devname			char (8);
dcl  to_is_Multics			bit (1) aligned;
dcl  to_pvtx			fixed bin;
dcl  waiting_for_read		(9) bit (1) aligned;/* are we waiting for a read to complete? */
dcl  working_buffer			fixed bin;
dcl  yes_no			bit (1) aligned;

/* Constants */

/* State names */

dcl  E1R2				fixed bin init (5) static options (constant);
dcl  E1W2				fixed bin init (8) static options (constant);
dcl  Me				char (32) static options (constant) init ("copy_disk");
dcl  R1E2				fixed bin init (1) static options (constant);
dcl  R1W2				fixed bin init (7) static options (constant);
dcl  START			fixed bin init (9) static options (constant);
dcl  W1E2				fixed bin init (4) static options (constant);
dcl  W1R2				fixed bin init (3) static options (constant);

/* External */

dcl  error_table_$bad_arg		fixed bin (35) ext static;
dcl  error_table_$not_done		fixed bin (35) ext static;

/* Based */

dcl  arg				char (arg_len) based (arg_ptr);

/* Entries */

dcl  absadr			entry (ptr, fixed bin (35)) returns (fixed bin (24));
dcl  bce_check_abort		entry;
dcl  disk_name_pvtx			entry (char (8), fixed bin, fixed bin (35));
dcl  bce_parse_disk_spec		entry (char (32), ptr, fixed bin, fixed bin, ptr, fixed bin (18), fixed bin (18), entry (ptr, fixed bin, ptr, fixed bin (35)), ptr, fixed bin (35));
dcl  bootload_disk_io$queue_read	entry (fixed bin, fixed bin (18), fixed bin, ptr, fixed bin, fixed bin (35));
dcl  bootload_disk_io$queue_write	entry (fixed bin, fixed bin (18), fixed bin, ptr, fixed bin, fixed bin (35));
dcl  bootload_disk_io$test_done	entry (fixed bin, fixed bin (35));
dcl  bce_query$yes_no		entry options (variable);
dcl  com_err_			entry () options (variable);
dcl  cu_$arg_count_rel		entry (fixed bin, ptr, fixed bin (35));
dcl  cu_$arg_ptr_rel		entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
dcl  get_ptrs_$given_segno		entry (fixed bin (15)) returns (ptr);
dcl  get_temp_segment_		entry (char (*), ptr, fixed bin (35));
dcl  ioa_				entry () options (variable);
dcl  pc_abs$unwire_abs		entry (ptr, fixed bin, fixed bin);
dcl  pc_abs$wire_abs_contig		entry (ptr, fixed bin, fixed bin, fixed bin (35));
dcl  read_disk			entry (fixed bin, fixed bin (18), ptr, fixed bin (35));
dcl  release_temp_segment_		entry (char (*), ptr, fixed bin (35));

/* Misc */

dcl  (addr, addrel, max, min, mod, null, segno) builtin;

dcl  cleanup			condition;
%page;
	arg_list_ptr = p_ss_info_ptr -> ss_info.arg_list_ptr;
	pvtp = addr (pvt$);
	pvt_arrayp = addr (pvt.array);
	labelp = addr (my_label);

	call cu_$arg_count_rel (arg_count, arg_list_ptr, code);
	if code ^= 0 then do;
	     call com_err_ (code, Me);
	     return;
	end;
	if arg_count < 2 then do;
	     call ioa_ ("Usage:^/  ^a <device> <device> (<arg1> <arg2> ...)", Me);
	     return;
	end;

	arg_num = 2;
	call cu_$arg_ptr_rel (arg_num, arg_ptr, arg_len, code, arg_list_ptr);
	if code ^= 0 then do;
	     call com_err_ (code, Me, "Can't get arg");
	     return;
	end;
	to_devname = arg;

	call disk_name_pvtx (to_devname, to_pvtx, code);
	if code ^= 0 then do;
	     call com_err_ (code, Me, "^a", arg);
	     go to RETURN;
	end;

	call read_disk (to_pvtx, (LABEL_ADDR), labelp, code);
	if code ^= 0 then do;
	     call com_err_ (code, Me, "Could not read label record of ^a.", to_devname);
	     return;
	end;
	to_is_Multics = (label.Multics = Multics_ID_String);

	arg_num = 1;
	call cu_$arg_ptr_rel (arg_num, arg_ptr, arg_len, code, arg_list_ptr);
	if code ^= 0 then do;
	     call com_err_ (code, Me, "Can't get arg");
	     return;
	end;
	from_devname = arg;

	call disk_name_pvtx (from_devname, from_pvtx, code);
	if code ^= 0 then do;
	     call com_err_ (code, Me, "^a", arg);
	     go to RETURN;
	end;

	call read_disk (from_pvtx, (LABEL_ADDR), labelp, code);
	if code ^= 0 then do;
	     call com_err_ (code, Me, "Could not read label record of ^a.", from_devname);
	     return;
	end;

	device_type = pvt_array (from_pvtx).device_type;
	if pvt_array (to_pvtx).device_type ^= device_type then do;
	     call com_err_ (0, Me, "^a is not the same type as ^a.", from_devname, to_devname);
	     return;
	end;
	if from_pvtx = to_pvtx then do;
	     call com_err_ (0, Me, "^a is the same disk as ^a.", from_devname, to_devname);
	     return;
	end;

	force = "0"b;
	arg_num = 3;
	call bce_parse_disk_spec (Me, arg_list_ptr, arg_num, device_type, labelp, f_record, l_record, no_parse, null, code);
	if code ^= 0 then return;

/* Now that f_record and l_record are assigned we will give them their chance to turn back. */

	if f_record = l_record then call ioa_ ("Writing to record number ^oo on ^a.", f_record, to_devname);
	else call ioa_ ("Writing to records ^oo through ^oo (inclusive) on ^a.", f_record, l_record, to_devname);
	if ^force then do;
	     call bce_query$yes_no (yes_no, "Do you wish to write to the ^[non ^;^]^a - ^a? ",
		^to_is_Multics, Multics_ID_String, to_devname);
	     if ^yes_no then return;
	end;
%page;

/* Find work area */

	temp_seg_ptr = null;
	call get_temp_segment_ (Me, temp_seg_ptr, code);
	if code ^= 0 then do;
	     call com_err_ (code, Me, "Unable to get temp disk buffer.");
	     return;
	end;

	buffer_ptr (1) = temp_seg_ptr;
	buffer_ptr (2) = addrel (temp_seg_ptr, 3 * 1024);
	temp_astep = get_ptrs_$given_segno (segno (temp_seg_ptr));
	call pc_abs$wire_abs_contig (temp_astep, 0, 6, code); /* double buffer of three pages */
	if code ^= 0 then do;
	     call com_err_ (code, Me, "Unable to wire temp disk buffer.");
	     call release_temp_segment_ (Me, temp_seg_ptr, code);
	     return;
	end;

	buffer_address = absadr (temp_seg_ptr, code);
	disk_post_area_ptr = addr (bootload_disk_post_seg$);
	disk_post_area.number = 2;

	disk_post_area.buffer_coreadd (1) = buffer_address;
	disk_post_area.buffer_coreadd (2) = buffer_address + 3 * 1024;
	disk_post_area.disk_complete (1) = "0"b;
	disk_post_area.disk_complete (2) = "0"b;
	disk_post_area.disk_error_code (1) = 0;
	disk_post_area.disk_error_code (2) = 0;

	on cleanup call clean_up;			/* remember, this is only called during bce_check_abort */
%page;

/* Now for the real work.  The basic flow of this program is to keep reading
pages from the from_pvtx and write them to the to_pvtx, using relatively
standard double buffering techniques.  This process is done backwards, and
(normally) three pages at a time, to minimize latency between i/o's, to
maximize the time we have between i/o's to get our next request in, within the
constraints that bootload_disk_io can handle a maximum of 4 pages at a time.
Three pages is optimal both for 451 and 501 style drives.  However, we don't
want to read/write a set of pages that cross a cylinder boundary, so we check
for this.  As such, a set may contain less than 3 pages.  Also, in case of
error (explained below), only one page is read/written so the bad pages may be
found.

So that the program does not become overly complicated via code, it is 
expressed as a finite state machine.  The idea is to start in a state where
both buffers are doing nothing, move to a state where buffer 1 is reading and
in which we are waiting for buffer 1's i/o to complete, move to a state in
which buffer 1 is writing and buffer 2 is reading (the next set of pages) and
in which we are waiting for buffer 1's i/o to complete, move to a state where
buffer 1 is done and we are waiting for buffer 2 to finish, etc.  At any given
state, we are waiting for the i/o of a particular buffer to complete before
moving to the next state.

Error philosophy: when an error occurs, we want to be sure we read/write all
of the pages that we can.  When an error occurs on a multiple page read, the
read is simple retried, asking this time for only the last (since we are
reading backwards) page.  If an error occurs on a single page read, though, we
must give up on that page, and inform the user of same.  The copy is restarted,
at the record before (less than) the faulting record.

Errors during writing are pretty much the reverse of the above.  If a single
page write fails, we must give up on the page, and inform the user.  As far as
the state goes, we pretend the write was successful and go to the
corresponding state (waiting for the next read to write out).  If a multi-page
write fails, though, we must start writing pages one at a time to find the bad
ones.  We could just do this from the data already read, but this would be too
hard to keep track of.  Besides, we are screwed, latency-wise, having to
re-write, so we wait for any read in progress to finish, and re-read the last
page of the previous read (the first page we want to write now) so that the
buffers come back into sync.

In the finite state diagram that follows, the codes (such as e1 w2) mean that
buffer 1 is empty, and buffer 2 is in process of being written. */
%page;

/*    -------		     -------
      | END |		     |START|
      -------	 /-last 1 done-|r1 e2|
         ^       /--	     -------
      1 done  /-			  \ 1 done
         |   v			   v
      -------	       -------         -------	    -------
      |w1 e2|<-last 1 done-|r1 e2|-1 done->|w1 r2|	    | END |
      -------	       -------         -------	    -------
			^	      |		       ^
		       2 done	   1 done		    2 done
			|	      v		       |
		       -------         -------	    -------
		       |r1 w2|<-2 done-|e1 r2|-last 2 done->|e1 w2|
		       -------         -------	    -------
*/

	end_state (*) = 0;
	normal_state (*) = 0;
	buffer_to_read (*) = 0;
	buffer_to_write (*) = 0;
	buffer_waiting_for (*) = 0;
	waiting_for_read (*) = "0"b;

	buffer_to_read (START) = 1;
	buffer_waiting_for (START) = 1;
	waiting_for_read (START) = "1"b;
	end_state (START) = W1E2;
	normal_state (START) = W1R2;

	buffer_waiting_for (R1E2) = 1;
	waiting_for_read (R1E2) = "1"b;
	end_state (R1E2) = W1E2;
	normal_state (R1E2) = W1R2;

	buffer_to_read (W1R2) = 2;
	buffer_to_write (W1R2) = 1;
	buffer_waiting_for (W1R2) = 1;
	normal_state (W1R2) = E1R2;

	buffer_waiting_for (E1R2) = 2;
	waiting_for_read (E1R2) = "1"b;
	end_state (E1R2) = E1W2;
	normal_state (E1R2) = R1W2;

	buffer_to_read (R1W2) = 1;
	buffer_to_write (R1W2) = 2;
	buffer_waiting_for (R1W2) = 2;
	normal_state (R1W2) = R1E2;

	buffer_to_write (E1W2) = 2;
	buffer_waiting_for (E1W2) = 2;

	buffer_to_write (W1E2) = 1;
	buffer_waiting_for (W1E2) = 1;
%page;
	max_io_pages = 3;				/* normally read/write a max of three pages at a time */

RESTART:
	record_info.read.prev_record = l_record + 1;
	record_info.read.prev_record_in_cylinder = mod (record_info.read.prev_record, rec_per_cyl (device_type));

	if record_info.read.prev_record <= f_record then state = 0;
	else state = START;

	do while (state ^= 0);
	     call bce_check_abort;

	     working_buffer = buffer_to_write (state);
	     if working_buffer > 0 then		/* last read must have finished */
		call bootload_disk_io$queue_write (to_pvtx, record_info.buffer (working_buffer).new_record, record_info.buffer (working_buffer).records_this_cylinder, buffer_ptr (working_buffer), working_buffer, code);

	     working_buffer = buffer_to_read (state);
	     if working_buffer > 0 then do;
		if record_info.read.prev_record_in_cylinder = 0 then record_info.read.prev_record_in_cylinder = rec_per_cyl (device_type); /* next cylinder */
		record_info.read.records_this_cylinder = min (record_info.read.prev_record_in_cylinder, max_io_pages); /* num pages to do this time around */
		record_info.read.new_record = max (record_info.read.prev_record - record_info.read.records_this_cylinder, f_record); /* don't go over requested area */
		record_info.read.records_this_cylinder = record_info.read.prev_record - record_info.read.new_record; /* real amt to do */

		call bootload_disk_io$queue_read (from_pvtx, record_info.read.new_record, record_info.read.records_this_cylinder, buffer_ptr (working_buffer), working_buffer, code);
		record_info.buffer (working_buffer) = record_info.read; /* record what pages are in this buffer */
	     end;

	     working_buffer = buffer_waiting_for (state);
	     code = error_table_$not_done;
	     do while (code = error_table_$not_done);
		call bootload_disk_io$test_done (working_buffer, code);
	     end;
	     if waiting_for_read (state) then
		if code = 0 then do;
		     record_info.read.prev_record = record_info.read.new_record; /* advance to next (prev) pages */
		     record_info.read.prev_record_in_cylinder = record_info.read.prev_record_in_cylinder - record_info.read.records_this_cylinder;
		     max_io_pages = 3;		/* allow full batch next time around -
						on error cases we keep it at 1 assuming that 
						next record will be bad also (same track?) */
		end;
		else do;
		     if record_info.read.records_this_cylinder > 1 then /* try i/o on just 1 record to find fault one */
			l_record = record_info.read.prev_record - 1; /* start with last record not processed */
		     else do;
			call com_err_ (0, Me, "Could not read record ^oo of ^a.", record_info.read.new_record, from_devname);
			l_record = record_info.read.prev_record - 2; /* skip the current record */
		     end;
		     go to IO_ERROR;
		end;
	     else if code ^= 0 then do;		/* error on write */
		if record_info.buffer (working_buffer).records_this_cylinder = 1 then /* consider page as done */
		     call com_err_ (0, Me, "Could not write record ^oo to ^a.", record_info.buffer (working_buffer).new_record, to_devname);
		else do;				/* multi-record, wait for all io to finish, restart */
		     l_record = record_info.buffer (working_buffer).prev_record - 1; /* restart read at pages attempted written */

IO_ERROR:		     do buffer_num = 1 to 2;
			code = error_table_$not_done;
			do while (code = error_table_$not_done);
			     call bootload_disk_io$test_done (buffer_num, code);
			end;
		     end;

		     max_io_pages = 1;		/* force just one page i/o next time */
		     go to RESTART;
		end;
	     end;

	     if record_info.read.prev_record <= f_record then state = end_state (state);
	     else state = normal_state (state);
	end;

	call clean_up;
RETURN:	return;

clean_up: proc;

	do buffer_num = 1 to 2;
	     code = error_table_$not_done;
	     do while (code = error_table_$not_done);
		call bootload_disk_io$test_done (buffer_num, code);
	     end;
	end;
	disk_post_area.number = 0;

	call pc_abs$unwire_abs (temp_astep, 0, 3);
	call release_temp_segment_ (Me, temp_seg_ptr, code);
	return;
     end;
%page;
no_parse: proc (arg_list_ptr, arg_num, info_ptr, code);

/* called by bce_parse_disk_spec when it doesn't like something */

dcl  arg_list_ptr			ptr parameter;
dcl  arg_num			fixed bin parameter;
dcl  code				fixed bin (35) parameter;
dcl  info_ptr			ptr parameter;

	call cu_$arg_ptr_rel (arg_num, arg_ptr, arg_len, code, arg_list_ptr);
	if arg = "-force" | arg = "-fc" then force = "1"b;
	else do;
	     code = error_table_$bad_arg;
	     call com_err_ (code, Me, "^a", arg);
	end;
	return;
     end no_parse;
%page;
%include bce_subsystem_info_;
%page;
%include bootload_post_area;
%page;
%include disk_pack;
%page;
%include fs_dev_types;
%page;
%include fs_vol_label;
%page;
%include pvt;
%page;
%include pvte;
     end bce_copy_disk;
