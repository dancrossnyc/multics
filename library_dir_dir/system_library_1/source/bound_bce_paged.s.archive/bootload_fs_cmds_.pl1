/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */
bootload_fs_cmds_: proc; return;

/* format: style4,indattr,ifthenstmt,ifthen,idind33,^indcomtxt */

/* Bootload multics commands to directly operate on bootload fs objects. 
Initially coded March 1983 by Keith Loepere 
Modified August 1983 by Keith Loepere for new bce switches */
%include bce_subsystem_info_;
%include bootload_fs_list;
dcl  active		        bit (1) aligned;	/* called as an active function */
dcl  active_fnc_err_	        entry options (variable);
dcl  arg			        char (arg_len) based (arg_ptr);
dcl  arg2			        char (arg_len2) based (arg_ptr2);
dcl  arg_count		        fixed bin;
dcl  arg_len		        fixed bin (21);
dcl  arg_len2		        fixed bin (21);
dcl  arg_ptr		        ptr;
dcl  arg_ptr2		        ptr;
dcl  bce_data$put_chars	        entry (ptr, ptr, fixed bin, fixed bin (35)) ext variable;
dcl  bce_query$yes_no	        entry options (variable);
dcl  bootload_file_partition$	        external;
dcl  bootload_fs_$get_ptr	        entry (char (*), ptr, fixed bin (21), fixed bin (35));
dcl  bootload_fs_$delete	        entry (char (*), fixed bin (35));
dcl  bootload_fs_$init	        entry (bit (1) aligned, fixed bin (19), fixed bin (35));
dcl  bootload_fs_$list	        entry (area (*), ptr, fixed bin (35));
dcl  bootload_fs_$rename	        entry (char (*), char (*), fixed bin (35));
dcl  check_star_name_$entry	        entry (char (*), fixed bin (35));
dcl  code			        fixed bin (35);
dcl  com_err_		        entry options (variable);
dcl  cu_$af_return_arg_rel	        entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
dcl  cu_$arg_count_rel	        entry (fixed bin, ptr, fixed bin (35));
dcl  cu_$arg_ptr_rel	        entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
dcl  dseg$		        (0:511) bit (72) aligned external;
dcl  error		        entry options (variable) variable; /* who prints our error */
dcl  error_table_$bad_arg	        fixed bin (35) ext static;
dcl  error_table_$bad_equal_name      fixed bin (35) ext static;
dcl  error_table_$badstar	        fixed bin (35) ext static;
dcl  error_table_$noentry	        fixed bin (35) ext static;
dcl  error_table_$not_act_fnc	        fixed bin (35) ext static;
dcl  file			        char (file_len) based (file_ptr); /* to be printed */
dcl  file_found		        bit (1) aligned;	/* a file matched the current star name */
dcl  file_len		        fixed bin (21);
dcl  file_num		        fixed bin;		/* loop index */
dcl  file_ptr		        ptr;
dcl  get_equal_name_	        entry (char (*), char (*), char (32), fixed bin (35));
dcl  get_equal_name_$check_equal_name_ entry (char (*), fixed bin (35));
dcl  i			        fixed bin;		/* loop index */
dcl  ioa_			        entry options (variable);
dcl  length		        builtin;
dcl  match_star_name_	        entry (char (*), char (*), fixed bin (35));
dcl  me			        char (12);
dcl  my_area		        area (2048);	/* for listing files */
dcl  new_name		        char (32);		/* for renaming */
dcl  request_abort_		        condition;		/* abort command line */
dcl  result		        char (result_len) based (result_ptr) var; /* active function result */
dcl  result_len		        fixed bin (21);
dcl  result_ptr		        ptr;
dcl  sdw_util_$get_size	        entry (ptr, fixed bin (19));
dcl  seg_size		        fixed bin (19);	/* of initted partition */
dcl  yes_no		        bit (1);

init: entry (ss_info_ptr);

	me = "init_files";
	call cu_$arg_count_rel (arg_count, ss_info.arg_list_ptr, code);
	if code ^= 0 then do;
	     call com_err_ (code, me);
	     signal request_abort_;
	end;
	if arg_count = 0 then do;
	     call bce_query$yes_no (yes_no, "Do you really want to initialize the bootload file system? ");
	     if ^yes_no then go to TERMINATE;
	end;
	else if arg_count > 1 then do;
	     call com_err_ (0, me, "Usage is: ^a {-force | -fc}", me);
	     go to TERMINATE;
	end;
	else do;
	     call cu_$arg_ptr_rel (1, arg_ptr, arg_len, code, ss_info.arg_list_ptr);
	     if ^(arg = "-force" | arg = "-fc") then do;
		call com_err_ (error_table_$bad_arg, me, "^a", arg);
		go to TERMINATE;
	     end;
	end;

	call sdw_util_$get_size (addr (dseg$ (segno (addr (bootload_file_partition$)))), seg_size);
	call bootload_fs_$init ("1"b, seg_size, code);
	if code ^= 0 then do;
	     call com_err_ (code, me);
	     go to TERMINATE;
	end;
	return;

print: entry (ss_info_ptr);

	me = "print";
	call cu_$arg_count_rel (arg_count, ss_info.arg_list_ptr, code);
	if code ^= 0 then do;
	     call com_err_ (code, me);
	     signal request_abort_;
	end;
	if arg_count ^= 1 then do;
	     call com_err_ (0, me, "Usage is: ^a <file_name>.", me);
	     go to TERMINATE;
	end;
	call cu_$arg_ptr_rel (1, arg_ptr, arg_len, code, ss_info.arg_list_ptr);
	call bootload_fs_$get_ptr (arg, file_ptr, file_len, code);
	if code ^= 0 then do;
	     call com_err_ (code, me, "^a", arg);
	     go to TERMINATE;
	end;
	call bce_data$put_chars (addr (bce_data$put_chars), file_ptr, (file_len), code);
	return;

list: entry (ss_info_ptr);

	me = "list";
	call cu_$af_return_arg_rel (arg_count, result_ptr, result_len, code, ss_info.arg_list_ptr);
	if code = error_table_$not_act_fnc then do;
	     active = "0"b;
	     error = com_err_;
	     call cu_$arg_count_rel (arg_count, ss_info.arg_list_ptr, code);
	end;
	else do;
	     active = "1"b;
	     error = active_fnc_err_;
	     result = "";
	end;
	if code ^= 0 then do;
	     call error (code, me);
	     signal request_abort_;
	end;
	if active & arg_count < 1 then do;
	     call error (0, me, "Usage: [^a <star_names>]", me);
	     go to TERMINATE;
	end;
	do i = 1 to arg_count;			/* validate starnames */
	     call cu_$arg_ptr_rel (i, arg_ptr, arg_len, code, ss_info.arg_list_ptr);
	     call check_star_name_$entry (arg, code);
	     if code = error_table_$badstar then do;
		call com_err_ (code, me, "^a", arg);
		go to TERMINATE;
	     end;
	end;
	call bootload_fs_$list (my_area, bootload_fs_list_ptr, code);
	if code ^= 0 then do;
	     if code = error_table_$noentry then do;
		if active then result = "";
		else call ioa_ ("No files.");
		return;
	     end;
	     else do;
		call error (code, me);
		go to TERMINATE;
	     end;
	end;
	if ^ active then call ioa_ ("Length^-File Name^/");
	file_found = "0"b;
	do i = min (1, arg_count) to arg_count;		/* zero pass => ** for 0 args */
	     if i > 0 then call cu_$arg_ptr_rel (i, arg_ptr, arg_len, code, ss_info.arg_list_ptr);
	     do file_num = 1 to bootload_fs_list.n_files; /* match all unmatched file names against current star name */
		if i > 0 & (bootload_fs_list.files (file_num).name ^= "") then call match_star_name_ (bootload_fs_list.files (file_num).name, arg, code);
		else code = 0;
		if code = 0 then do;
		     if active then result = result || bootload_fs_list.files (file_num).name || " ";
		     else do;
			call ioa_ ("^6d^-^a", bootload_fs_list.files (file_num).length,
			     bootload_fs_list.files (file_num).name);
		     end;
		     bootload_fs_list.files (file_num).name = ""; /* don't list again */
		     file_found = "1"b;
		end;
	     end;
	end;
	if active & file_found then result = substr (result, 1, length (result) - 1); /* extraneous trailing blank */
	if ^active & ^file_found then call ioa_ ("No such file(s).");
	return;

delete: entry (ss_info_ptr);

	me = "delete";
	call cu_$arg_count_rel (arg_count, ss_info.arg_list_ptr, code);
	if code ^= 0 then do;
	     call com_err_ (code, me);
	     signal request_abort_;
	end;
	if arg_count = 0 then do;
	     call com_err_ (0, me, "Usage is: ^a <star names>", me);
	     go to TERMINATE;
	end;
	do i = 1 to arg_count;
	     call cu_$arg_ptr_rel (i, arg_ptr, arg_len, code, ss_info.arg_list_ptr);
	     call check_star_name_$entry (arg, code);
	     if code = error_table_$badstar then do;
		call com_err_ (code, me, "^a", arg);
		go to TERMINATE;
	     end;
	end;
	call bootload_fs_$list (my_area, bootload_fs_list_ptr, code);
	if code ^= 0 then do;
	     if code = error_table_$noentry then call ioa_ ("No files.");
	     else call com_err_ (code, me, "Getting file list.");
	     go to TERMINATE;
	end;
	do i = 1 to arg_count;
	     call cu_$arg_ptr_rel (i, arg_ptr, arg_len, code, ss_info.arg_list_ptr);
	     file_found = "0"b;
	     do file_num = 1 to bootload_fs_list.n_files;
		if bootload_fs_list.files (file_num).name ^= "" then call match_star_name_ (bootload_fs_list.files (file_num).name, arg, code);
		if code = 0 then do;
		     call bootload_fs_$delete (bootload_fs_list.files (file_num).name, code);
		     if code ^= 0 then call com_err_ (code, me, "^a", bootload_fs_list.files (file_num).name);
		     bootload_fs_list.files (file_num).name = ""; /* don't delete again */
		     file_found = "1"b;
		end;
	     end;
	     if ^file_found then call com_err_ (0, me, "File(s) not found. ^a", arg);
	end;
	return;

rename: entry (ss_info_ptr);

	me = "rename";
	call cu_$arg_count_rel (arg_count, ss_info.arg_list_ptr, code);
	if code ^= 0 then do;
	     call com_err_ (code, me);
	     signal request_abort_;
	end;
	if arg_count = 0 | mod (arg_count, 2) ^= 0 then do;
	     call com_err_ (0, me, "Usage is: ^a <old_file_name> <new_file_name> {<old_file_name> <new_file_name> ...}", me);
	     go to TERMINATE;
	end;
	do i = 2 to arg_count by 2;
	     call cu_$arg_ptr_rel (i - 1, arg_ptr, arg_len, code, ss_info.arg_list_ptr);
	     call check_star_name_$entry (arg, code);
	     if code = error_table_$badstar then do;
		call com_err_ (code, me, "^a", arg);
		go to TERMINATE;
	     end;
	     call cu_$arg_ptr_rel (i, arg_ptr, arg_len, code, ss_info.arg_list_ptr);
	     call get_equal_name_$check_equal_name_ (arg, code);
	     if code = error_table_$bad_equal_name then do;
		call com_err_ (code, me, "^a", arg);
		go to TERMINATE;
	     end;
	end;
	call bootload_fs_$list (my_area, bootload_fs_list_ptr, code);
	if code ^= 0 then do;
	     if code = error_table_$noentry then call ioa_ ("No files.");
	     else call com_err_ (code, me, "Getting file list.");
	     go to TERMINATE;
	end;
	do i = 2 to arg_count by 2;
	     call cu_$arg_ptr_rel (i - 1, arg_ptr, arg_len, code, ss_info.arg_list_ptr);
	     call cu_$arg_ptr_rel (i, arg_ptr2, arg_len2, code, ss_info.arg_list_ptr);
	     file_found = "0"b;
	     do file_num = 1 to bootload_fs_list.n_files;
		if bootload_fs_list.files (file_num).name ^= "" then call match_star_name_ (bootload_fs_list.files (file_num).name, arg, code);
		if code = 0 then do;
		     call get_equal_name_ (bootload_fs_list.files (file_num).name, arg2, new_name, code);
		     if code ^= 0 then go to rename_error;
		     call bootload_fs_$rename (bootload_fs_list.files (file_num).name, new_name, code);
		     if code ^= 0 then 
rename_error:		call com_err_ (code, me, "^a to ^a", bootload_fs_list.files (file_num).name, new_name);
		     bootload_fs_list.files (file_num).name = ""; /* don't rename again */
		     file_found = "1"b;
		end;
	     end;
	     if ^file_found then call com_err_ (0, me, "File(s) not found. ^a", arg);
	end;
	return;

TERMINATE:
	return;
     end;
