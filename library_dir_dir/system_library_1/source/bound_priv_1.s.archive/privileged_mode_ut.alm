" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1984 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	privileged_mode_ut
"
"	This segment contains master mode utility routines
"	required by hardcore ring procedures in order to execute
"	6180 instructions which can only be executed in
"	privileged mode.
"
"	Revised for New File System 1/69 SHW
"
"	Converted for the follow-on by Craig Jensen on 6/27/72.
"	Code for 6180 cache added 2/74 by B. Greenberg
"	Modified 4/8/74 by S.H.Webber to remove checks and change lockptl meter code
"	Lock PTL code and cam code moved to page, 6/19/74 BSG
"	Modified on 01/06/75 at 21:57:15 by R F Mabee.  Fixed SDW alignment assumptions.
"	Modified 6/16/75 by R.F.Mabee.  Fixed parity_error reporting bug per BSG.
"	Modified 2/18/76 by S. Webber for new reconfiguration
"	Modified 7/18/78 by J. A. Bush for new smic_port entry
"         Modified 5/11/79 by Mike Grady for stack 0 sharing.
"	Modified 3/11/80 by Mike Grady to make mask restores more robust.
"	Modified 5/30/80 by J. A. Bush to wire (and unwire) number of pages
"	 in wired_hardcore_data$wire_pages
"	Modified 1/08/81 by J. Bongiovanni to account for wired pages 
"	Modified 2/10/81 by J. A. Bush for the read_id_prom entry
"	Modified 1/05/82 by J. Bongiovanni to make check_parity_for_use
"	 faster
"	Modified 2/8/82  by J. Bongiovanni to set ralr to 1 on mask to
"	 sys_level (optionally), add entry read_mask
"	Modified 6/23/82 by J. A. Bush to add the clear_cache entry
"         Modified 7/82 BIM to merge in ldt and ldbr from privileged_mode_init.
"                 for the 10 instructions here that program could be deleted.
"         Modified 8/82 JJB for scs footprints to identify crash process.
"	Modified 1/83 JJB to set lockup fault vector to ignore faults absolutely
"	Modified 6/83 ENK for load_mode_reg
"	Modified 8/83 KPL for bootload Multics shutdown, also for camp entry
"	Modified 10/83 KPL for checking sst_boundary for unpaged
"	Modified 1/84 KPL for special_bce_return
"	Modified 5/84 KPL for cam_both
"         Modified 1985-03-11, BIM: clear mem before checking for freecore
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "


" HISTORY COMMENTS:
"  1) change(88-07-27,Farley), approve(88-10-05,MCR7968),
"     audit(88-10-10,Beattie), install(88-10-14,MR12.2-1166):
"     Added new entry check_for_mem_overlap to check for memory addressing
"     overlap conditions, which cannot be detected by simply reading the SCU
"     configuration.
"                                                      END HISTORY COMMENTS


	name	privileged_mode_ut

	entry	bce
	entry	bce_and_return
	entry	cam
	entry	cam_both
	entry	cam_cache
	entry	clear_cache
	entry	check_for_mem_overlap
	entry	check_parity_for_use,check_parity_for_add
	entry	cioc
	entry	ldt
	entry	ldbr
	entry	load_mode_reg
	entry	lock_ptl
	entry	lrar
	entry	read_id_prom
	entry	read_mask
	entry	rscr
	entry	rsw
	entry	set_mask
	entry	smcm
	entry	smic
	entry	smic_port
	entry	special_bce_return
	entry	sscr
	entry	swap_sdw
	entry	camp
	entry	trace_rsw
	entry	unlock_ptl
	entry	unwire_unmask
	entry	wire_and_mask


	even
channel_mask_set:			" used to retain current channel mask
	oct	000000000017,000000000017
	temp8	rip_str1,rip_str2
	tempd	maskd,save_sdw,save_sdw1
	temp	old_low_data,new_low_data,old_high_data,new_high_data
	temp	indicators,save_indicators,new_value,addr,indicators_no_par,call_type
	temp	lock_sw,temp,rsw_xec,tally_wd

"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	read_mask is used to obtain the current value of the interrupt
"	mask on the running CPU
"
"	The calling sequence is
"
"		call privileged_mode_ut$read_mask (mask_pattern)
"
"		where mask_pattern is a fixed bin (71) value
"		into which will be stored the value of the
"		interrupt mask
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

read_mask:
	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
	lxl1	prds$processor_tag
	lprpab	scs$mask_ptr,1
	xec	scs$read_mask,1
	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->

	staq	ap|2,*
	short_return
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"
"	set_mask  is called from the interrupt interceptor.
"
"	The calling sequence is:
"
"		call privileged_mode_ut$set_mask(mask_pattern,temp)
"
"		where mask_pattern is a fixed bin (71) value which
"		will be loaded into the mask register of the system
"		controller assigned to send interrupts to the
"		processor on which this procedure is executing,
"
"		and temp is a fixed bin (71) item which the mask register
"		at the time of entry will be loaded into.
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

set_mask:
	push

" Note that the processor may be lost between reading and setting the mask.

	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
	lxl1	prds$processor_tag
	lprpab	scs$mask_ptr,1
	xec	scs$read_mask,1	read mask
	staq	maskd		save temporarily

	ldaq	ap|2,*		get new mask
	oraq	channel_mask_set	forget old channel mask
	anaq	scs$open_level	correct mask
	lxl1	prds$processor_tag
	lprpab	scs$mask_ptr,1
	xec	scs$set_mask,1	set new mask
	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->

	szn	wired_hardcore_data$trap_invalid_masked are we checking mask
	tze	not_sys_level	no
	cmpaq	scs$sys_level	masking to system level
	tnz	not_sys_level	no
	lda	1,dl		set ring alarm
	sta	pds$alarm_ring
	lra	pds$alarm_ring

not_sys_level:
	ldaq	maskd		get old mask
	ldx7	ap|0		get arg count
	cmpx7	2*2,du		two args?
	tmi	*+2		if not, don't return old mask
	staq	ap|4,*		return old mask

	return

" 
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	lock_ptl	used to lock page table lock and mask.
"		Call is:
"
"		call privileged_mode_ut$lock_ptl(oldmask,ptwp)
"
"		dcl oldmask fixed bin (71)
"		dcl ptwp ptr
"
"	wire_and_mask	used to wire stack and mask
"		same calling seq as lock_ptl
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

	link	sst_link,sst$
	link	abs_seg_link,abs_seg$
	link	abs_seg_link1,abs_seg1$
	link	prds_link,prds$

wire_and_mask:
	eax2	0		set sw not to lock
	tra	lptl1
lock_ptl:
	eax2	1		set sw to lock

lptl1:	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
	lxl1	prds$processor_tag
	lprpab	scs$mask_ptr,1
	xec	scs$read_mask,1	read current mask
	staq	ap|2,*		return current mask

	lxl1	prds$processor_tag
	lprpab	scs$mask_ptr,1
	ldaq	scs$sys_level	mask down to sys level
	xec	scs$set_mask,1	set the new mask
	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->

"	set ring-alarm to 1 if we're checking for masked in user-ring

	szn	wired_hardcore_data$trap_invalid_masked
	tze	not_checking
	lda	1,dl
	sta	pds$alarm_ring
	lra	pds$alarm_ring
not_checking:

"
"	now wire down <n> pages of the stack (determined from wired_hardcore_data$wire_pages)
"
	eppbb	sst$		get pointer into the SST
	spribb	ap|4,*		arg -> <sst>|0 if we don't wire
	epaq	sp|0		find the stack's segment number
	eax0	0,au		get segno in x0
	cmpx0	lp|prds_link	are we running on prds?
	tze	no_wire		yes, skip wiring

	als	1		Double seg. no. since SDW's are 72 bits long.
	eax3	0,au		copy sdw index
	ldaq	dseg$,au
	arl	sdw.add_shift	Get abs addr of stack's page table.

	cmpa	unpaged_page_tables$0+upt.sst_last_loc	Page table not in sst
	tpnz	no_wire			=> unpaged seg
	sbla	unpaged_page_tables$0+upt.sst_absloc	Get offset of stack's 
	tmi	no_wire			page table in SST.

	eppbp	bb|0,al		bp -> page table
	lda	ptw.wired,dl	get wired bit for page 0
	cana	bp|0		is it already wired?
	tnz	already_wired_and_masked
	orsa	bp|0		make it wired now
	aos	bb|sst.wired	adjust count of wired pages
	
	eaq	sp|0		get offset in stack of current frame
	qrl	18+10		get page number in q
	eppbp	bp|0,ql		bp -> ptw
	spribp	ap|4,*		return pointer to caller

	lxl4	wired_hardcore_data$wire_pages get number of pages to wire
bound_lp:
	epplb	sp|0		copy stack ptr
	eaq	0,4		copy pages to wire to qu
	qls	10		multiply by 1024 to get number of words
	awd	lb|0,qu		add to lb word offset
	epaq	lb|0		copy ptr to aq
	lls	18		word offset in al
	sbla	1,dl
	arl	4		divide by 16
	ldq	dseg$+1,3		load sdw bound in q
	qls	15		shift out old bounds
	lls	18+3		a reg now contains new sdw bounds + rest of sdw 2nd word
	cmpa	dseg$+1,3		is the final address out of bounds?
	tmi	bound_ok		no, wire whats in x4
	eax4	-1,4		yes, subtract 1 from pages to wire
	tra	bound_lp		and go try again
bound_ok:
	eaa	0,4		get number of pages wired
	ana	=o77,du		can't be more than 63 pages
	arl	12		position so number will be in bits 24 to 29
	orsa	ap|2,*		set in unused area of mask
	epbplb	sp|0		get ptr to stack base
	szn	lb|0		touch page 0 to make sure its in core
	eax0	0		initialize ptw index
	epplb	sp|0		copy our stack ptr
	lda	ptw.wired,dl	set wired bit in a
lk_lp1:
	cana	bp|0,0		is page already wired
	tnz	lk_lp1_wired	yes
	orsa	bp|0,0		wire page
	aos	bb|sst.wired	bump count of wired pages
lk_lp1_wired: 
	szn	lb|0		touch it to get it in core
	eax0	1,0		increment ptw index
	adwplb	1024,du		increment stack page address
	eax4	-1,4		decrement pages to wire
	tnz	lk_lp1		wire next one if not done yet

no_wire:	eax2	0,2		see if lock entry
	tnz	device_control$ptl_waitlock
		"contract: 1. I am running in stack frame to which I want to be returned.
		"	 2. Only remaining instruction is "return".
		"	 3. Wired stack, sys masked.
		"	 4. Don't return until ptl locked.

	short_return

already_wired_and_masked:
	lda	=o40,dl		Indicate wired state.
	orsa	ap|2,*		move to arg.
	tra	no_wire

"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	unlock_ptl	entry to unlock and unmask after finishing messing with
"		the page control data.
"		Call is:
"
"		call privileged_mode_ut$unlock_ptl(oldmask,ptwp)
"
"		dcl oldmask fixed bin (71)
"		dcl ptwp ptr
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

unlock_ptl:
	tra	page_fault$pmut_unlock_ptl	avoid push, minimal elegance
unwire_unmask:
	ldaq	ap|2,*		pick up mask setting
	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
	oraq	channel_mask_set	forget old channel mask
	anaq	scs$open_level
	lxl1	prds$processor_tag	get tag for masking
	lprpab	scs$mask_ptr,1
	xec	scs$set_mask,1
	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
"
"	now unwire the pages wired down by lock_ptl
"
	lda	ap|2,*		Get the mask and flag back
	cana	=o40,dl		Was it wired already?
	tnz	.rt		Yes, just exit.
	als	12		position number of pages wired
	ana	=o77,du		allow only 63 pages
	eax4	0,au		copy to x4
	eppbp	ap|4,*		get page table pointer
	eppbp	bp|0,*
	eax0	bp|0		is offset zero?
	tze	.rt		if so, don't unwire
	eax2	0		-(count of pages unwired)
	epaq	sp|0		get ptr to stack for segno
	als	1		times two since SDW's are 72 bits
	lda	dseg$,au		load SDW
	arl	sdw.add_shift	shift address for ptw
	eppbb	sst$		ptw's are in sst
	sbla	bb|sst.ptwbase	offset for page 0 ptw
	eppbb	bb|0,al		bb -> page 0 ptw

	lca	ptw.wired+1,dl	get set to turn off wired bits
	ldq	ptw.wired,dl	and to check wired bits
	canq	bb|0		is page still wired
	tze	ul_p0_unwired	no
	ansa	bb|0		turn off wired bit in page 0
	eax2	-1,2		count page unwired
ul_p0_unwired: 
	
	eax0	0		count ptws

ul_l1:	canq	bp|0,0		is page still wired
	tze	ul_pg_unwired	no
	ansa	bp|0,0		unwire this page
	eax2	-1,2		count page unwired
ul_pg_unwired: 
	eax0	1,0		move on
	eax4	-1,4		decrement	 number of pages wired
	tnz	ul_l1
	eaq	0,2		qu=-(count of pages unwired)
	qrs	18		qr=-(count of pages unwired)
	asq	sst$0+sst.wired	adjust count of wired pages
	
.rt:	short_return

"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	cioc is called to connect to any of the active modules on
"	a system controller except a processor.
"
"	The calling sequence is:
"
"		call privileged_mode_ut$cioc(cow)
"
"		where cow is a 36 bit aligned connect operand
"		word.
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

cioc:	eppbp	ap|2,*		Issue cioc instruction
	cioc	bp|0,*		at arg1
	short_return

"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	LRAR
"
"	Entry to set the ring alarm register.
"	Call is:
"
"	call pmut$lrar (rar_value)
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

lrar:	lra	ap|2,*		load the ring alarm register
	short_return		short and sweet

" 
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"
"
"	Entry to load the mode register
"	Call is:
"
"	call pmut$load_mode_reg;
"
"	called after the caller has altered pds$hfp_exponent_enabled.
"	(this code duplicates pxss at process switch.)
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
load_mode_reg:
	eppab	prds$mode_reg_enabled
	lca	mr.enable_hfp+1,dl		is hex fp enabled for this process?
	ana	prds$mode_reg
	szn	pds$hfp_exponent_enabled
	tze	*+2
	ora	mr.enable_hfp,dl
	sta	prds$mode_reg
	ora	mr.enable_mr+mr.enable_hist,dl  enable mode reg and enable hist regs
	sta	ab|0
	lcpr	ab|0,04
	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
	short_return

" 
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"
"	cam code moved to page by BSG, 6/19/74
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

cam:	tra	page$cam

cam_cache:
	tra	page$cam_cache

"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"
"	clear_cache - entry to clear cache by turning cache off and 
"		    then back on. Note that this will work for both
"		    the L68 and the DPS8M cpus, while the execution of
"		    a "cams 4" instruction will only clear cache
"		    for the L68 cpu and is effectively a NOP on the 
"		    DPS8M cpu.
"
"	Usage:	    dcl privileged_mode_ut$clear_cache entry;
"		    call privileged_mode_ut$clear_cache ();
"
"	set_proc_required must be called before calling the clear_cache
"	entry, to assure the the cache on the desired processor is cleared.
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

clear_cache:
	epplb	prds$cache_luf_reg	set ptr to "turn on" constant
	even
	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
	lcpr	clear_template,02	turn cache off
	lcpr	lb|0,02		and back on.
	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
	short_return

clear_template:
	oct	3		cache "turn off" constant
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	swap_sdw is called to swap descriptor words for a given
"	segment number.
"
"	The calling sequence is:
"
"		call privileged_mode_ut$swap_sdw (segptr, sdw_ptr)
"
"		Where segptr contains the segment number, sdw is the new
"		descriptor word.  The sdw is an aligned 72 bit quantity.
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

swap_sdw:	ldx0	ap|2,*		pick up segment number 
	adlx0	ap|2,*		multiply by 2
	eppbp	ap|4,*		get new descriptor word
	eppbp	bp|0,*
	lda	bp|0
	ldq	bp|1
	staq	dseg$,0		set the SDW

	tsx7	clear_AM_both

	short_return
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"   This entry clears the ptw am on the current processor after 	"
"   mucking with a set of ptws.				"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "


camp:
	iftarget	L68
	camp
	ifend
	iftarget  ADP
	decor	ORIONp
	camp1
	ifend
	short_return
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"   This entry clears both AM's after bce mucks with ptws, sdws.	"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
cam_both:
	tsx7	clear_AM_both
	short_return

"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"   These entries are called when we wish to discontinue operation	"
"   of Multics and go to bce.  There can be a return and Multics	"
"   operation resumed.  Since bce must be entered on the bootload 	"
"   processor with all other processors stopped, the actual transfer	"
"   to bce is forced by sending a system trouble connect.		"
"							"
"	Recoded 8 February 1976 by Noel I. Morris		"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "


bce_and_return:
bce:
	ldq	prds$processor_tag	get this CPU's tag
	lda	scs$processor_data,ql	get data for this CPU
	cana	processor_data.online,du  during initialization?
	tze	special_go_to_bce	yes

	lda	pds$processid	get process ID
	stac	scs$connect_lock	lock for doing a connect
	nop
	nop
	tnz	*-3		wait until lock set

	stac	scs$trouble_processid " Save if we are the first (its clear)
	lda	scs$processor	processor bits in A
	sta	scs$sys_trouble_pending	set trouble flag

	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
	cioc	scs$cow_ptrs,ql*		send trouble connect
	dis	*		wait for it to take effect
	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->

	lda	0,dl		clear the A
	ansa	scs$trouble_processid
	ansa	scs$connect_lock	undo the lock, now

bce_return:
	short_return		Return to caller

" 
	use	linkage
	join	/link/linkage

	even
save_drl:	bss	,2
save_luf: bss	,2
drl_to_do:bss	,2
	
	use	main

	eight
ignore_data:
	bss	,8

	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+><+><+><+><+><+>

ignore_scu_rcu:
	scu	0
	rcu	0
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"							"
" special_bce_return - used by bce to return to bos or multics	"
"							"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

special_bce_return:
	ldaq	ap|2,*			arg is pair to put into drl 
	staq	lp|drl_to_do		fault vector
	tra	leave_multics

special_go_to_bce:
	ldaq	toehold$+2*TOE_HOLD_MULTICS_ENTRY	get interrupt pair
	staq	lp|drl_to_do

leave_multics:
	eppbb	fault_vector$
	ldaq	bb|2*FAULT_NO_LUF+fv.fpair	save lockup fault vector
	staq	lp|save_luf
	absa	ignore_data	abs addr in 0-23
	als	6		abs addr in 0-17 Areg
	eaq	0,au		abs addr in 0-17 Qreg
	oraq	ignore_scu_rcu	new lockup fault vector
	staq	bb|2*FAULT_NO_LUF+fv.fpair

	lda	8,du		loop waiting for i/o to die down
	odd
	sba	1,dl
	tnz	*-1

	ldaq	bb|2*FAULT_NO_DRL+fv.fpair	pick up derail from fault vector
	staq	lp|save_drl	save for restore later
	ldaq	lp|drl_to_do	get interrupt pair
	staq	bb|2*FAULT_NO_DRL+fv.fpair	store into derail slot of fault vector

	drl			" go to bce

	ldaq	lp|save_drl	restore derail fault pair
	staq	bb|2*FAULT_NO_DRL+fv.fpair
	ldaq	lp|save_luf	restore lockup fault pair
	staq	bb|2*FAULT_NO_LUF+fv.fpair

	tra	bce_return

	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><-><-><-><-><-><->
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	rsw and trace_rsw are called in order to execute the rsw privileged instruction.
"		They return in "value" the same bits returned after
"		the rsw instruction is executed trace_rsw does not require rsw_code to be
"		input.
"		Instead it is assumed to be zero.
"
"	Usage:
"
"		% include rsw;
"		dcl rsw_code fixed(35), value bit(36) aligned;
"		call privileged_mode_ut$rsw ( rsw_code, value );
"		call privileged_mode_ut$trace_rsw ( value );
"
"	rsw_code  is 0, 1, 2, 3 or 4, depending on what bits are to be read by
"		rsw. See the processor manual for the definition of these.
"		This procedure does not check that rsw_code is 0, 1, 2, 3 or 4.
"		(Input).
"
"	value	is the bit string put in the a-register by rsw. See the
"		rsw.incl.pl1 file and the
"		processor manual for the meaning of this. (Output).
"
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "



rsw:
	lxl0	ap|2,*		c(x0) = rsw_code.
	rsw	0,0		Get value.
	sta	ap|4,*
	short_return


trace_rsw:
	rsw	0		Get value.
	sta	ap|2,*
	short_return
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
"  read_id_prom
"  	used to read a selected string of  bytes  (characters)  from
"  	the ID PROM of a DPS8 CPU
"
"  Usage:
"  	dcl  privileged_mode_ut$read_id_prom entry (char (*) aligned, fixed bin);
"  	call privileged_mode_ut$read_id_prom (id_string, start_pos);
"
"  where:
"
"  id_string	is an aligned character string, in which the ID PROM info is
"		to  be  stored. The number of bytes to read is obtained from
"		the argument descriptor (length) of id_string.
"
"  start_pos	is the first byte number to be read from the ID PROM
"
"  This subroutine will only work for DPS8  cpus,  indeterminent  results
"  will  be  obtained if this subroutine is executed on a L68 or DPS cpu.
"  The calling routine should guarantee execution on the desired  CPU  by
"  first calling pxss$set_proc_required.
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

read_id_prom:
	push
	lxl7	ap|4,*		get starting byte number
	lxl6	ap|6,*		and target string length from desc.
	anx6	=o77,du		allow only 63 characters
	eppbp	ap|2,*		get ptr to target string
	epaq	rip_str1		ptr to  temp string in AQ
	lls	18		string ptr word offset in AL
	eaq	0,6		copy string length
	qls	6		position tally count
	orq	32,du		or in 9 bit char type
	lls	18		tally word in A
	sta	tally_wd		store tally word (starting char pos = 0)
	lda	rsw_template	get rsw instruction template
	sta	rsw_xec		and store in stack
rip_lp1:	stx7	rsw_xec		set byte number in rsw instruction
	xec	rsw_xec		execute the rsw instruction
	ana	=o377,dl		and out M.S bit  in case it is set
	sta	tally_wd,sc	store ID byte in string
	ttn	rip_exit		return on tally runout
	eax7	1,7		increment byte number
	tra	rip_lp1		and get next ID byte

rip_exit:
	mlr	(pr,rl),(pr,rl),fill(040)
	desc9a	rip_str1,x6	copy ID string to user storage
	desc9a	bp|0,x6
	return

rsw_template:
	rsw	0,dl		used to read ID prom
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	rscr and sscr are called in order to execute the rscr and sscr
"		instructions, respectively. "value" is the output or input argument
"		for these instructions as specified in the processor manual,
"		respectively.
"
"	Usage:
"
"		% include scr;
"		dcl scr_input bit(36) aligned, value bit (72) aligned;
"		call privileged_mode_ut$rscr (port_no, scr_input, value );
"		call privileged_mode_ut$sscr (port_no, scr_input, value );
"
"	scr_input  is one of the legal arguments specified as a  y-field in
"		an rscr or sscr instruction. See the processor manual
"		and the scr.incl.pl1 file for an
"		explanation of the legal values of scr_input. This procedure
"		does not verify that a legal value of scr_input was input.
"		(Input).
"
"	value	is the bit string read or stored by rscr or sscr, respectively.
"		See the processor manual and the scr.incl.pl1 file for the
"		definition of this bit string.
"		(Output of rscr. Input of sscr.)
"
"	port_no	Is the processor port number to which the
"		rscr or sscr instruction is to be directed.
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

rscr:
	lda	ap|2,*		port number in A
	als	10-3		multiply by 128
	adla	ap|4,*		add in scr_input
	als	3		port*1024 + scr_input*8
	rscr	scas$,al		read controller regs
	staq	ap|6,*		Output value.
	short_return



sscr:
	lda	ap|2,*		port number in A
	als	10-3		multiply by 128
	adla	ap|4,*		insert scr_input
	als	3		port*1024 + scr_input*8
	eax0	0,al		place in X0
	ldaq	ap|6,*		Get input value.
	sscr	scas$,0	set controller regs
	short_return
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	smcm is called to execute the smcm instruction unconditionally.
"
"	Usage:
"		dcl port_no fixed bin (3), mask bit (72) aligned;
"		call privileged_mode_ut$smcm (port_no, mask);
"
"	port_no 	is the processor port number to which the smcm
"		is directed.
"
"	mask	is the mask to be set by an SMCM instruction.
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

smcm:
	lxl1	ap|2,*		port number in X1
	ldaq	ap|4,*		mask in AQ
	smcm	scs$port_addressing_word,1*	set the mask

	short_return

"

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	privileged_mode_ut$ldt
"
"         loads the timer register with its argument.
"
"         declare privileged_mode_ut$ldt entry (fixed bin (35));
"         call privileged_mode_ut$ldt (timer);
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

ldt:
	ldt	ap|2,*		load the timer
	short_return

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	ldbr
"
"	This entry loads a new dbr for make_segs_paged,
"	which has just finished setting up ASTE's and
"	SDW's in a new dseg for the paged segments.
"
"	Call is:
"
"	     call privileged_mode_init$ldbr(new_dbr)
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+>
ldbr:
	ldbr	ap|2,*		load the new DBR
	inhibit   off       <-><-><-><-><-><-><-><-><-><-><->
	short_return



" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	smic is called to set an interrupt pattern in the bootload SCU
"
"	Usage:
"		dcl privileged_mode_ut$smic entry (bit (36));
"		call privileged_mode_ut$smic (smic_pattern);
"
"	smic_pattern  is a bit pattern to be used by the SMIC
"		instruction.
"
"	smic_port is called to set an interrupt pattern in any SCU
"
"	Usage:
"		dcl privileged_mode_ut$smic_port entry (bit (36), fixed bin (5));
"		call privileged_mode_ut$smic_port (smic_pattern, port_number);

"	port_number is the port to which to send the smic instruction
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

smic_port:
	lxl7	ap|4,*			pick up port number in X7
	tra	smic_common

smic:
	lxl7	scs$interrupt_controller  	bootload controller port in X7

smic_common:
	lda	ap|2,*		pick up 	SMIC pattern in A
	smic	scs$port_addressing_word,7*  	SMIC

	short_return

" 
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	pmut$check_for_mem_overlap
"
"	This entry is used to determine if a memory addressing overlap
"	exists in an SCU.
"
"	It is called during SCU initialization.
"
"	It returns a nonzero code if a memory overlap error is found.
"
"	call is:
"
"	call pmut$check_for_mem_overlap (low_block, high_block, code)
"
"	low_block, high_block are 1024-word frame numbers, code is returned
"	nonzero if a memory overlap error is found
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
check_for_mem_overlap:
	push
	ldx0	lp|abs_seg_link	get segno of abs_seg
	adlx0	lp|abs_seg_link	multiply by 2 (SDW size)
	ldx1	lp|abs_seg_link1	get segno of abs_seg1
	adlx1	lp|abs_seg_link1	multiply by 2 (SDW size)
	ldaq	dseg$,0		pick up old contents of abs_seg SDW
	staq	save_sdw		save in stack
	ldaq	dseg$,1		pick up old contents of abs_seg1 SDW
	staq	save_sdw1		save in stack
	ldq	ap|2,*		pick up low address input arg
	stq	new_low_data	save for check
	lls	36+12+10		36 for a, 12 for sdw, 10 for 1024 word blocks
	oraq	abs_seg_sdw	make an SDW out of the a-q
	staq	dseg$,0		place in SDW slot for abs_seg
	ldq	ap|4,*		pick up high address input arg
	stq	new_high_data	save for check
	lls	36+12+10		36 for a, 12 for sdw, 10 for 1024 word blocks
	oraq	abs_seg_sdw	make an SDW out of the a-q
	staq	dseg$,1		place in SDW slot for abs_seg1
	tsx7	clear_AM_segs
	sti	save_indicators	save the indicators
	sti	indicators_no_par	save current indicators
	lda	indicators_no_par	we must turn OFF parity indicator
	ana	-1-scu.par,dl	..
	ora	scu.parm,dl	and turn ON parity mask
	sta	indicators_no_par	
	eppap	abs_seg$		ap -> low address to check
	eppbp	abs_seg1$		bp -> high address to check
	ldi	indicators_no_par
	lda	ap|0		get low address contents
	sta	old_low_data	and save for later restore
	lda	bp|0		get high address contents
	sta	old_high_data	and save for possible later restore
	lda	new_low_data
	sta	ap|0		save low address in low address
	lda	new_high_data
	sta	bp|0		save high address in high address

	lda	ap|0		now check contents of low address
	cmpa	new_low_data	against what was originally written
	tnz	overlap_error	if OVERLAP leave non-zero data in A-reg
	lda	0,dl		otherwise zero A-reg for return code

	ldq	old_high_data	replace original high data
	stq	bp|0		when no error detected

overlap_error:
	ldq	old_low_data	replace original low data
	stq	ap|0		even when error is found
	eppap	sp|stack_frame.arg_ptr,*	restore arg pointer
	sta	ap|6,*
	ldaq	save_sdw		restore abs_seg SDW
	staq	dseg$,0
	ldaq	save_sdw1		restore abs_seg1 SDW
	staq	dseg$,1
	tsx7	clear_AM_segs
	ldi	save_indicators
	return


" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	pmut$check_parity_for_use
"
"	This entry is used to determine if a parity error exists in a main memory frame.
"
"	It is called 
"	when hardware_fault catches a store parity error, in which case
"		all configured main memory is checked.
"
"	It returns a code if a parity error is found.
"	It leaves the responsibility of getting the
"	data page somewhere else without a parity error on page control,
"	who will subsequently be called to delete the page anyway.
"
"	call is:
"
"	call pmut$check_parity_for_use (blocknumber, code)
"
"	blocknumber is 1024-word frame number, code returned nonzero if parity
"	error found
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
check_parity_for_use:
	push
	aos	lp|check_parity_calls	meter calls
	ldx0	lp|abs_seg_link	get segno of abs_seg
	adlx0	lp|abs_seg_link	multiply by 2 (SDW size)
	ldaq	dseg$,0		pick up old contents of abs_seg SDW
	staq	save_sdw		save in stack
	ldq	ap|2,*		pick up core address as input argument
	lls	36+12+10		36 for a, 12 for sdw, 10 for 1024 word blocks
	oraq	abs_seg_sdw	make an SDW out of the a-q
	staq	dseg$,0		place in SDW slot for abs_seg
	tsx7	clear_AM_segs

	sti	save_indicators	save the indicators
	sti	indicators_no_par	save current indicators
	lda	indicators_no_par	we must turn OFF parity indicator
	ana	-1-scu.par,dl	..
	ora	scu.parm,dl	and turn ON parity mask
	sta	indicators_no_par	
	eppap	abs_seg$		ap -> page to check
	ldx1	1024*4,du		size of a page in characters

	inhibit	on		<+><+><+><+><+><+><+><+><+><+><+><+>

	ldi	indicators_no_par
	cmpc	(pr,rl),(pr,rl)	read entire page without modifying
	desc9a	ap|0,x1
	desc9a	ap|0,x1
	nop	0
	nop	0

" 	The cmpc may not have examined all words in the page, since another
"	CPU or an IOM could modify a double-word between the two fetches.
"	If this happens, we punt, and check the page the hard way.

	tnz	slow_pc		lost race -- do it the hard way

	sti	indicators

	inhibit	off		<-><-><-><-><-><-><-><-><-><-><-><->

	lda	0,dl		pre-set error code to 0
	ldq	indicators	check for a parity error
	canq	scu.par,dl	..
	tze	checkpar_returns_code  None found
checkpar_report_error:
	lda	1,dl		non-zero error code
	tra	checkpar_returns_code

slow_pc:	aos	lp|check_parity_slow  count these
	eax1	1022		check page a double-word at a time

	inhibit	on		<+><+><+><+><+><+><+><+><+><+><+><+>

slow_pc_loop:
	ldaq	abs_seg$,1	
	nop	0		let things settle
	nop	0
	sti	indicators
	ldi	indicators_no_par

	inhibit	off		<-><-><-><-><-><-><-><-><-><-><-><->

	ldq	indicators	check for a parity error
	canq	scu.par,dl
	tnz	checkpar_report_error
	eax1	-2,1
	tpl	slow_pc_loop
	lda	0,dl		zero error code

checkpar_returns_code:
	eppap	sp|stack_frame.arg_ptr,*	restore arg pointer
	sta	ap|4,*
	ldaq	save_sdw		restore abs_seg SDW
	staq	dseg$,0
	tsx7	clear_AM_segs
	ldi	save_indicators
	return

" 	check_parity_for_add
"	
"	This entrypoint is just as the above, except that
"	is clears the memory first to get rid of parity errors
"	left from uninitialized SCU's.

check_parity_for_add:
	push
	aos	lp|check_parity_calls	meter calls
	ldx0	lp|abs_seg_link	get segno of abs_seg
	adlx0	lp|abs_seg_link	multiply by 2 (SDW size)
	ldaq	dseg$,0		pick up old contents of abs_seg SDW
	staq	save_sdw		save in stack
	ldq	ap|2,*		pick up core address as input argument
	lls	36+12+10		36 for a, 12 for sdw, 10 for 1024 word blocks
	oraq	abs_seg_sdw	make an SDW out of the a-q
	staq	dseg$,0		place in SDW slot for abs_seg
	tsx7	clear_AM_segs

	sti	save_indicators	save the indicators
	sti	indicators_no_par	save current indicators
	lda	indicators_no_par	we must turn OFF parity indicator
	ana	-1-scu.par,dl	..
	ora	scu.parm,dl	and turn ON parity mask
	sta	indicators_no_par	
	eppap	abs_seg$		ap -> page to check
	ldx1	1024*4,du		size of a page in characters

	mlr	(),(pr,rl)	zero entire page
	desc9a	0
	desc9a	ap|0,x1

	inhibit	on		<+><+><+><+><+><+><+><+><+><+><+><+>

	ldi	indicators_no_par

	cmpc	(pr,rl),(pr,rl)	read entire page without modifying
	desc9a	ap|0,x1
	desc9a	ap|0,x1
	nop	0
	nop	0

	sti	indicators
	
	inhibit	off		<-><-><-><-><-><-><-><-><-><-><-><->

	lda	0,dl		pre-set error code to 0
	ldq	indicators	check for a parity error
	canq	scu.par,dl	..
	tze	checkpar_returns_code  None found
	tra	checkpar_report_error  Borrow returns from _for_use

	even
abs_seg_sdw:
	vfd	o36/sdw.valid
	vfd	1/,o14/37777,3/sdw.read+sdw.write,o18/sdw.unpaged

clear_AM_both:
	iftarget	L68
	camp
	ifend
	iftarget  ADP
	decor	ORIONp
	camp1
	ifend
clear_AM_segs:
	iftarget  L68
	cams
	ifend
	iftarget  ADP
	decor	ORIONp
	cams1
	decor	L68
	ifend
	tra	0,x7

	use	.link
check_parity_calls:
	dec	0
check_parity_slow:
	dec	0
	use	.text.

	join	/link/.link

	include	apte
	include	fault_vector
	include	mode_reg
	include	ptw
	include	sdw
	include	sst
	include	scs
	include	stack_frame
	include	stack_header
	include	toe_hold
	include	unpaged_page_tables
	end
