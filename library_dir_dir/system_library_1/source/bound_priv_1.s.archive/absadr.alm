" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

" ABSADR - Compute Absolute Address from ITS Pair.
"	Written 06/02/67 - Noel I. Morris
"	Other modifications made through the years by various Multicians who
"	   curiously prefer the cloak of anonymity.
"	Modified 03/21/81, W. Olin Sibert, for ADP conversion



" Calling Sequence:
"	absolute_address = absadr (pointer, error)
"
" Where:
"	pointer - its pointer.
"	absolute_address - answer as fixed bin (24) integer.
"	error - error code.
"
" Errors:
"	1.	Bound fault.
"	2.	Directed Fault in SDW.
"	3.	Directed Fault in PTW.
"



	name	absadr
	entry	absadr


	tempd	sdw_save,temp
	temp	word_offset,temp1



	include	sdw
	include	ptw


" 


absadr:	push
	eppbp	ap|2,*		pick up pointer to its pair
	epaq	bp|0,*		get info into aq-reg
	anq	-1,du
	stq	word_offset	save word offset of effective pointer
	ana	-1,du
	als	1		* 2
	eax0	0,au		seg no * 2 to X0

	epaq	abs_seg$+0
	als	1
	eax1	0,au
	ldaq	dseg$+0,x1	pick up previous SDW for absolute segment
	staq	sdw_save		and stash it away

	ldaq	dseg$+0,x0	pick up SDW for segment
	staq	temp		save it
	cana	sdw.valid,dl	test for directed fault
	tze	error_2		..

	qrl	sdw.bound_shift	" Check against the SDW bound
	anq	sdw.bound_mask,dl
	qls	18+4		" Convert to word count in QU
	adlq	=o17,du		" And add 15 to get word count
	cmpq	word_offset	compare against word offset
	tnc	error_1		test for bound fault	

	ldaq	temp		restore SDW to AQ
	canq	sdw.unpaged,dl	paged ?
	tnz	addr		no

	lda	word_offset	get address
	arl	10		take address mod (page size - 1024)
	eax6	0,au		put page number in x6
	lda	temp		get page table addr from sdw
	als	18-sdw.add_shift	right justify it in au
	ana	=o17,du		find its offset from a 0 mod 16 word addr
	sta	temp1		save this number a bit
	adx6	temp1		x6 now has addr of desired page table word
"				as an offset from a 0 mod 16 boundary

	ldaq	temp
	ana	=o777777607777	make address field 0 mod 16 for unpaged sdw
	orq	sdw.unpaged,dl	make it unpaged
	staq	dseg$+0,x1	store in SDW for absolute segment
	cams	0		clear assoc. memory
	lda	abs_seg$+0,x6	pick up PTW
	cana	ptw.valid,dl		test for directed fault
	tze	error_3		..


addr:
	absa	bp|0,*		generate absolute address
	arl	12
	sta	ap|6,*		return absolute address

	ldq	0,dl		make error code zero
end:
	stq	ap|4,*		return error code
	ldaq	sdw_save		restore previous SDW
	staq	dseg$+0,x1	..
	cams	0		reset associative memory

	return



error_1:
	ldq	1,dl		bound fault
	tra	end		..

error_2:
	ldq	2,dl		directed fault in SDW
	tra	end		..

error_3:
	ldq	3,dl		directed fault in PTW
	tra	end		..




	end
