/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(85-07-17,CLJones), approve(86-01-26,MCR7330),
     audit(86-01-16,Tague), install(86-07-17,MR12.0-1097):
     to perform security auditing.
  2) change(86-07-10,Dupuis), approve(86-01-26,MCR7330),
     audit(86-07-14,GDixon), install(86-07-17,MR12.0-1097):
     Changed the 85-07-17 auditing code so that it wouldn't take a page fault
     while it had the page table locked, and to audit the GRANT'ing in all
     cases.
                                                   END HISTORY COMMENTS */


/* format: style5,^indcomtxt */

hc_dm_util$activate:
        proc (Ptsi);

/* DESCRIPTION:
Utility routines for Data Management Support

activate - note activation of a synchronized segment of a given size.

allocate_journal_index - get ring-2 Data Management a free journal index.

check_activate - determine whether a synchronized segment of a given size
	   can be activated.

deactivate - note deactivation of a synchronized segment of a given size.

free_journal_index - free a previously allocated journal index.

get_journal_stamp - given a journal index, returns the current time stamp.
 
get_n_journals - return the number of journal slots allocated, i.e,
	   dm_journal.n_journal.

get_max_held_per_journal - returns the value of dm_journal.max_held_per_journal

set_journal_stamp - set the time stamp of a journal for Page Control.

validate_bj_uid - Checks the supplied uid against the uid in the 
	   dm_journal_seg_.
*/

/* HISTORY:
Written October 1982 by J. Bongiovanni.
Modified:
May 1983 by E. N. Kittlitz to fix free to not write Journal_Idx.
05/13/85 by R. Michael Tague to use limit_covert_channel on
	   calls to $allocate_journal_index.  Upgraded access check in
	   set_journal_stamp and free_journal_index to check for seg privs.
	   Added dm_journal_seg_ locking in set_time_stamp.  Generally
	   cleaned up dm_journal_seg_ locking for all entries.  Added the
	   entries $validate_bj_uid, $get_journal_stamp, $get_n_journals,
	   and $get_max_held_per_journal so that ring-2 DM would not need
	   to read the dm_journal_seg_.  Reformatted.
05/20/85 by R. Michael Tague to get the AIM checking on $free_journal, 
             $get_journal_stamp, and $validate_journal_stamp right.
*/

/*  Parameter  */

        dcl     Code		fixed bin (35) parameter;
					      /* Standard Error Code */
        dcl     Journal_Idx		fixed bin parameter;
					      /* Journal Index */
        dcl     Ptsi		fixed bin (3) parameter;
					      /* Page Table Size index */
        dcl     Time_Stamp		fixed bin (71) parameter;
					      /* New time stamp */
        dcl     Uid			bit (36) aligned;
					      /* Ring-2 Unique ID for Journal */

/*  Automatic  */

        dcl     code		fixed bin (35);
        dcl     journal_idx		fixed bin;
        dcl     jx			fixed bin;
        dcl     me			char (40);
        dcl     old_mask		fixed bin (71);
        dcl     ptwp		ptr;
        dcl     time_stamp		fixed bin (71);
        dcl     uid			bit (36) aligned;
        dcl     validated		bit (1) aligned;

/*  External  */

        dcl     access_operations_$dm_journal_allocate
				bit (36) aligned ext static;
        dcl     access_operations_$dm_journal_free
				bit (36) aligned ext static;
        dcl     access_operations_$dm_journal_read_attr
				bit (36) aligned ext static;
        dcl     access_operations_$dm_journal_write_attr
				bit (36) aligned ext static;

        dcl     error_table_$bad_arg	fixed bin (35) external;
        dcl     error_table_$dm_journal_pages_held
				fixed bin (35) external;
        dcl     error_table_$dm_not_enabled
				fixed bin (35) external;
        dcl     error_table_$invalid_dm_journal_index
				fixed bin (35) external;
        dcl     error_table_$no_journals_free
				fixed bin (35) external;
        dcl     error_table_$synch_seg_limit
				fixed bin (35) external;
        dcl     pds$access_authorization
				bit (72) aligned external;
        dcl     pds$validation_level	fixed bin (3) external;
        dcl     sst$dm_enabled	bit (1) aligned external;
        dcl     tc_data$end_of_time	fixed bin (71) external;

/*  Entry  */

        dcl     access_audit_$log_obj_class
				entry options (variable);
        dcl     limit_covert_channel	entry (fixed bin);
        dcl     lock$lock_fast	entry (ptr);
        dcl     lock$unlock_fast	entry (ptr);
        dcl     page_synch$unlink_journal
				entry (fixed bin);
        dcl     pmut$lock_ptl		entry (fixed bin (71), ptr);
        dcl     pmut$unlock_ptl	entry (fixed bin (71), ptr);
        dcl     (read_allowed_, write_allowed_, read_write_allowed_)
				entry (bit (72) aligned,
				bit (72) aligned)
				returns (bit (1) aligned);

/*  Builtin  */

        dcl     addr		builtin;
        dcl     char		builtin;
        dcl     clock		builtin;
        dcl     divide		builtin;
        dcl     ltrim		builtin;

/*  Constants  */

        dcl     DENY		bit (1) aligned static
				options (constant) init ("0"b);
        dcl     GRANT		bit (1) aligned static
				options (constant) init ("1"b);
%page;
/* ************************************************************************
   * $activate - Notes activation of a synchronized segment. It is	    *
   * assumed that that Global AST Lock is held by the process.	    *
   ************************************************************************ */

        dm_journal_segp = addr (dm_journal_seg_$);
        dm_journal.per_aste_pool (Ptsi).n_active =
	  dm_journal.per_aste_pool (Ptsi).n_active + 1;
        return;
%page;
/* ************************************************************************
   * $allocate_journal_index - give ring-2 an unused journal index.	    *
   * Possible covert channel corrected by call to limit_covert_channel.   *
   ************************************************************************ */

allocate_journal_index:
        entry (Uid, Journal_Idx, Code);

        if ^sst$dm_enabled then
	      do;
	      Code = error_table_$dm_not_enabled;
	      return;
	      end;

        Journal_Idx = 0;
        uid = Uid;
        journal_idx = 0;
        me = "hc_dm_util$allocate_journal_index";
        code = 0;

        if uid = ""b then
	      do;
	      Code = error_table_$bad_arg;
	      return;
	      end;

        call limit_covert_channel (1);
        dm_journal_segp = addr (dm_journal_seg_$);
        call lock$lock_fast (addr (dm_journal.lock));
        dm_journal.allocate_calls = dm_journal.allocate_calls + 1;
        if dm_journal.n_journals <= dm_journal.n_journals_inuse then
	      code = error_table_$no_journals_free;
        else
	      do;
	      do jx = 1 to dm_journal.n_journals
		while (dm_journal.per_journal (jx).uid ^= ""b);
	      end;
	      if jx > dm_journal.n_journals then
		    code = error_table_$no_journals_free;
	      else
		    do;
		    dm_per_journalp = addr (dm_journal.per_journal (jx));
		    dm_journal.n_journals_inuse =
		        dm_journal.n_journals_inuse + 1;
		    dm_per_journal.time_stamp = clock ();
		    dm_per_journal.access_class = pds$access_authorization;
		    dm_per_journal.uid = uid;
		    call RECOMPUTE_THRESH;
		    journal_idx = jx;
		    call AUDIT (GRANT,
		        access_operations_$dm_journal_allocate, journal_idx,
		        dm_per_journal);
		    end;
	      end;

        call lock$unlock_fast (addr (dm_journal.lock));
        Journal_Idx = journal_idx;
        Code = code;
        return;
%page;
/* ************************************************************************
   * $check_activate - checks whether a synchronized segment of a given   *
   * size may be activated.  It is assumed that the Global AST Lock is    *
   * held.						    *
   ************************************************************************ */

check_activate:
        entry (Ptsi, Code);

        if ^sst$dm_enabled then
	      do;
	      Code = error_table_$dm_not_enabled;
	      return;
	      end;

        Code = 0;

        dm_journal_segp = addr (dm_journal_seg_$);
        dm_journal.activate_calls = dm_journal.activate_calls + 1;
        if dm_journal.per_aste_pool (Ptsi).n_active
	  >= dm_journal.per_aste_pool (Ptsi).threshold then
	      do;
	      dm_journal.activate_denied = dm_journal.activate_denied + 1;
	      Code = error_table_$synch_seg_limit;
	      end;
        return;
%page;
/* ************************************************************************
   * $deactivate - Note deactivation of a synchronized segment.	    *
   ************************************************************************ */

deactivate:
        entry (Ptsi);

        dm_journal_segp = addr (dm_journal_seg_$);
        dm_journal.deactivate_calls = dm_journal.deactivate_calls + 1;
        dm_journal.per_aste_pool (Ptsi).n_active =
	  dm_journal.per_aste_pool (Ptsi).n_active - 1;
        return;
%page;
/* ************************************************************************
   * $free_journal_index - frees a previously allocated journal index.    *
   * Authorization check is performed.				    *
   ************************************************************************ */

free_journal_index:
        entry (Journal_Idx, Code);

        if ^sst$dm_enabled then
	      do;
	      Code = error_table_$dm_not_enabled;
	      return;
	      end;

        journal_idx = Journal_Idx;
        me = "hc_dm_util$free_journal_index";
        code = 0;

        dm_journal_segp = addr (dm_journal_seg_$);
        call lock$lock_fast (addr (dm_journal.lock));
        dm_journal.free_calls = dm_journal.free_calls + 1;

        if (journal_idx <= 0) | (journal_idx > dm_journal.n_journals) then
	      code = error_table_$invalid_dm_journal_index;
        else
	      do;
	      dm_per_journalp = addr (dm_journal.per_journal (journal_idx));
	      if dm_per_journal.uid = ""b then
		    code = error_table_$invalid_dm_journal_index;
	      else if
		^(
		read_write_allowed_ (pds$access_authorization,
		dm_per_journal.access_class)
		| (addr (pds$access_authorization) -> aim_template.seg))
		then
		    do;
		    call AUDIT (DENY, access_operations_$dm_journal_free,
		        journal_idx, dm_per_journal);
		    code = error_table_$invalid_dm_journal_index;
		    end;
	      else
		    do;
		    call AUDIT (GRANT,
		         access_operations_$dm_journal_free,
		         journal_idx, dm_per_journal);
		    code = error_table_$dm_journal_pages_held;
		    call pmut$lock_ptl (old_mask, ptwp);
		    if dm_per_journal.n_held = 0 then
			  do;
			  dm_per_journal.time_stamp = tc_data$end_of_time;
			  dm_per_journal.uid = ""b;
			  dm_per_journal.access_class = ""b;
			  code = 0;
			  end;
		    call pmut$unlock_ptl (old_mask, ptwp);
		    if code = 0 then
			  do;
			  dm_journal.n_journals_inuse =
			      dm_journal.n_journals_inuse - 1;
			  call RECOMPUTE_THRESH;
			  end;
		    end;
	      end;
        call lock$unlock_fast (addr (dm_journal.lock));
        Code = code;
        return;
%page;
/* ************************************************************************
   * get_journal_stamp - Returns the value of the journal stamp for a     *
   * given dm_journal_seg_ index.  An access class check is performed	    *
   * before the information is returned.			    *
   ************************************************************************ */

get_journal_stamp:
        entry (Journal_Idx) returns (fixed bin (71));

        journal_idx = Journal_Idx;
        time_stamp = 0;
        me = "hc_dm_util$get_journal_stamp";

        if ^sst$dm_enabled then
	      return (time_stamp);

        dm_journal_segp = addr (dm_journal_seg_$);
        call lock$lock_fast (addr (dm_journal.lock));
        if (journal_idx > 0) & (journal_idx <= dm_journal.n_journals) then
	      do;
	      dm_per_journalp = addr (dm_journal.per_journal (journal_idx));
	      if dm_per_journal.uid ^= ""b then
		    if read_allowed_ (pds$access_authorization,
		        dm_per_journal.access_class)
		        | (addr (pds$access_authorization)
		        -> aim_template.seg) then
			  do;

/****			  call AUDIT (GRANT,
			      access_operations_$dm_journal_read_attr,
			      journal_idx, dm_per_journal);
	We'd audit if the performance implications weren't horrendous. ****/

			  time_stamp = dm_per_journal.time_stamp;
			  end;
		    else
			  call AUDIT (DENY,
			      access_operations_$dm_journal_read_attr,
			      journal_idx, dm_per_journal);
	      end;
        call lock$unlock_fast (addr (dm_journal.lock));
        return (time_stamp);
%page;
/* ************************************************************************
   * get_max_held_per_journal - Return the value of		    *
   * dm_journal.max_held_per_journal from dm_journal_seg_.		    *
   ************************************************************************ */

get_max_held_per_journal:
        entry () returns (fixed bin);

        if ^sst$dm_enabled then
	      return (0);
        else
	      return (addr (dm_journal_seg_$)
		-> dm_journal.max_held_per_journal);
%page;
/* ************************************************************************
   * get_n_journals - Return the value of dm_journal.get_n_journals from  *
   * dm_journal_seg_.					    *
   ************************************************************************ */

get_n_journals:
        entry () returns (fixed bin);

        if ^sst$dm_enabled then
	      return (0);
        else
	      return (addr (dm_journal_seg_$) -> dm_journal.n_journals);
%page;
/* ************************************************************************
   * $set_journal_stamp - sets the time stamp for a specified journal.    *
   ************************************************************************ */

set_journal_stamp:
        entry (Journal_Idx, Time_Stamp, Code);
        journal_idx = Journal_Idx;
        time_stamp = Time_Stamp;

        if ^sst$dm_enabled then
	      do;
	      Code = error_table_$dm_not_enabled;
	      return;
	      end;

        me = "hc_dm_util$set_journal_stamp";
        code = 0;
        dm_journal_segp = addr (dm_journal_seg_$);
        call lock$lock_fast (addr (dm_journal.lock));
        dm_journal.set_stamp_calls = dm_journal.set_stamp_calls + 1;
        if (journal_idx <= 0) | (journal_idx > dm_journal.n_journals) then
	      code = error_table_$invalid_dm_journal_index;
        else
	      do;
	      dm_per_journalp = addr (dm_journal.per_journal (journal_idx));
	      if dm_per_journal.uid = ""b then
		    code = error_table_$invalid_dm_journal_index;
	      else if
		^(
		write_allowed_ (pds$access_authorization,
		dm_per_journal.access_class)
		| (addr (pds$access_authorization) -> aim_template.seg))
		then
		    do;
		    call AUDIT (DENY,
		        access_operations_$dm_journal_write_attr,
		        journal_idx, dm_per_journal);
		    code = error_table_$invalid_dm_journal_index;
		    end;
	      else
		    do;

/****		    call AUDIT (GRANT,
		        access_operations_$dm_journal_write_attr,
		        journal_idx, dm_per_journal);
	We'd audit if the performance implications weren't horrendous. ****/

		    dm_per_journal.time_stamp = time_stamp;

		    call pmut$lock_ptl (old_mask, ptwp);
		    call page_synch$unlink_journal (journal_idx);
		    call pmut$unlock_ptl (old_mask, ptwp);
		    end;
	      end;
        call lock$unlock_fast (addr (dm_journal.lock));
        Code = code;
        return;
%page;
/* ************************************************************************
   * validate_bj_uid - Given a dm_journal_seg_ index and BJ uid, this	    *
   * entry returns true if the supplied uid matches the uid indexed in    *
   * the dm_journal_seg_ and the caller has authorization to know this.   *
   ************************************************************************ */

validate_bj_uid:
        entry (Uid, Journal_Idx) returns (bit (1) aligned);

        uid = Uid;
        journal_idx = Journal_Idx;
        validated = "0"b;

        if ^sst$dm_enabled then
	      return ("0"b);

        me = "hc_dm_util$validate_bj_uid";
        dm_journal_segp = addr (dm_journal_seg_$);
        call lock$lock_fast (addr (dm_journal.lock));
        if (journal_idx > 0) & (journal_idx <= dm_journal.n_journals) then
	      do;
	      dm_per_journalp = addr (dm_journal.per_journal (journal_idx));
	      if read_allowed_ (pds$access_authorization,
		dm_per_journal.access_class)
		| (addr (pds$access_authorization) -> aim_template.seg) then
		    do;

/****		    call AUDIT (GRANT,
		        access_operations_$dm_journal_read_attr,
		        journal_idx, dm_per_journal);
	We'd audit if the performance implications weren't horrendous. ****/

		    if uid ^= ""b & uid = dm_per_journal.uid then
			  validated = "1"b;
		    end;
	      else
		    call AUDIT (DENY,
		        access_operations_$dm_journal_read_attr,
		        journal_idx, dm_per_journal);
	      end;
        call lock$unlock_fast (addr (dm_journal.lock));
        return (validated);
%page;
/* ************************************************************************
   * RECOMPUTE_THRESH - Internal Procedure to recompute max held pages    *
   * per journal, which is used by ring-2 Data Management to prevent	    *
   * flooding the system with held pages.			    *
   ************************************************************************ */

RECOMPUTE_THRESH:
        proc;

        if dm_journal.n_journals_inuse = 0 then
	      dm_journal.max_held_per_journal = dm_journal.max_held_pages_mem;
        else
	      dm_journal.max_held_per_journal =
		divide (dm_journal.max_held_pages_mem,
		dm_journal.n_journals_inuse, 17);

        end RECOMPUTE_THRESH;
%page;
/* ************************************************************************
   * AUDIT - Internal procedure to audit security-related events relating *
   * to journals.						    *
   ************************************************************************ */

AUDIT:
        proc (outcome, operation, id, journal_entry);

        dcl     outcome		bit (1) aligned parameter;
					      /* (I) signifies whether or not the operation was granted */
        dcl     operation		bit (36) aligned parameter;
					      /* (I) the operation in question */
        dcl     id			fixed bin parameter;
					      /* (I) the journal index */
        dcl     1 journal_entry	like dm_per_journal parameter aligned;
					      /* (I) for auditing */

        dcl     event_flags		bit (36) aligned;
        dcl     object_name		char (32);

        event_flags = ""b;			      /* clear all flags */
        addr (event_flags) -> audit_event_flags.grant = (outcome = GRANT);
        object_name = "DM journal #" || ltrim (char (id));

        call access_audit_$log_obj_class (me, pds$validation_level, event_flags,
	  operation, journal_entry.access_class, object_name, 0, null (), 0,
	  "UID=^w", journal_entry.uid);
        return;

%include access_audit_eventflags;

        end AUDIT;
%page;
%include dm_journal_seg_;
%page;
%include aim_template;
        end hc_dm_util$activate;
