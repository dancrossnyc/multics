/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


pc_trace_pl1: proc;

/* RE Mullen, v2pl1, oct 1973 */
/* RE Mullen, v2pl1, oct 1973 */

dcl (cmep, pdmep, ptp, a_pdmep, a_ptp) ptr,
     format1 char (22) aligned static init ("                    ^w"),
     format4 char (34) aligned static init ("                    ^w  ^w  ^w  ^w"),
     fword (0:10) fixed bin based,
    (devadd, a_devadd, bdevadd, b_devadd) fixed bin,
     trace entry options (variable);

done:	entry (a_pdmep);

	cmep = a_pdmep;
	call trace ("done                cmep = ^p", cmep);
	call trace (format4, cmep -> fword (0), cmep -> fword (1), cmep -> fword (2), cmep -> fword (3));
	return;

/* * * * * * * * * * * * * * *  * * * * * * * * * * * * * * */

page_fault: entry (a_pdmep);

	ptp = a_pdmep;
	call trace ("page fault          ptp = ^p", ptp);
	call trace (format1, ptp -> fword (0));
	return;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

page_fault_end: entry (a_pdmep);

	ptp = a_pdmep;
	call trace ("end page fault      ptp = ^p", ptp);
	call trace (format1, ptp -> fword (0));
	return;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

write_page: entry (a_pdmep);

	cmep = a_pdmep;
	call trace ("write page          cmep = ^p", cmep);
	call trace (format4, cmep -> fword (0), cmep -> fword (1), cmep -> fword (2), cmep -> fword (3));
	return;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
abort_complete: entry (a_pdmep, a_ptp);

	pdmep = a_pdmep;
	ptp = a_ptp;
	call trace ("abort complete      pdmep = ^p, ptw = ^w", pdmep, ptp -> fword (0));
	call trace (format4, pdmep -> fword (0), pdmep -> fword (1), pdmep -> fword (2), pdmep -> fword (3));
	return;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * */

move_page: entry (a_devadd);

	devadd = a_devadd;
	call trace ("moving page         ^w", devadd);
	return;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * */

zero_page: entry (a_devadd, a_ptp);

	devadd = a_devadd;
	ptp = a_ptp;
	call trace ("zero page           ptw = ^w, devadd = ^w", ptp -> fword (0), devadd);
	return;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

no_pd_:	entry (a_devadd, a_ptp);

	devadd = a_devadd;
	ptp = a_ptp;
	call trace ("no paging device    ptw = ^w, devadd = ^w", ptp -> fword (0), devadd);
	return;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

rws_truncated: entry (a_devadd, a_ptp);

	devadd = a_devadd;
	pdmep = a_ptp;				/* on purpose ... for efficiency */
	call trace ("rws truncated       pdmep = ^p, devadd = ^w", pdmep, devadd);
	call trace (format4, pdmep -> fword (0), pdmep -> fword (1), pdmep -> fword (2), pdmep -> fword (3));
	return;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

withdrawing: entry (a_devadd);

	devadd = a_devadd;
	call trace ("withdrawing         devadd = ^w", devadd);
	return;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

depositing: entry (a_devadd);

	devadd = a_devadd;
	call trace ("depositing          devadd = ^w", devadd);
	return;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

tr_pd_delete_: entry (a_pdmep);

	pdmep = a_pdmep;
	call trace ("pd_delete_          pdmep = ^p", pdmep);
	call trace (format4, pdmep -> fword (0), pdmep -> fword (1), pdmep -> fword (2), pdmep -> fword (3));
	return;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

tr_rws:	entry (a_pdmep);

	pdmep = a_pdmep;
	call trace ("read/write start    pdmep = ^p", pdmep);
	call trace (format4, pdmep -> fword (0), pdmep -> fword (1), pdmep -> fword (2), pdmep -> fword (3));
	return;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

rehash:	entry (a_devadd, b_devadd);

	devadd = a_devadd;
	bdevadd = b_devadd;
	call trace ("rehashing           old devadd = ^w, new devadd = ^w", devadd, bdevadd);
	return;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

running:	entry;

	call trace ("running the devices");
	return;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

rws_complete: entry (a_pdmep);

	pdmep = a_pdmep;
	call trace ("rws complete        pdmep = ^p", pdmep);
	call trace (format4, pdmep -> fword (0), pdmep -> fword (1), pdmep -> fword (2), pdmep -> fword (3));
	return;

     end;
