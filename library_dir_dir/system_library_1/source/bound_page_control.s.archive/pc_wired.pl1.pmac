/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */

         /* use: pl1_macro pc.pl1.pmac  -target l68 */
pc_wired: proc;

/* RE Mullen, v2pl1, oct 1973 */
/* Modified for unified page wait primitive, B. Greenberg 6/6/74 */
/* write_wait_uid for new lock, 11/3/75 by BSG */
/* Modified for ADP conversion, 03/03/81, W. Olin Sibert */
/* Modified for unwire_write_wait, February 1982, J. Bongiovanni */
/* Modified for write_wait_uid_list, November 1982, J. Bongiovanni */

dcl  a_astep pointer parameter;			/* pointer to AST entry */
dcl  first_page fixed bin parameter;			/* first page affected */
dcl  no_pages fixed bin parameter;			/* number of pages, or -1 if all remaining */
dcl  a_uid bit (36) aligned parameter;			/* arg uid of segment */
dcl  a_listp ptr parameter;				/* pointer to list of pages */
dcl  a_list (0:255) fixed bin based (a_listp);		/* list of pages */

dcl  fp fixed bin;					/* first page */
dcl  waitev fixed bin (35);				/* wait event from pread */
dcl  i fixed bin;					/* loop index */
dcl (j, k) fixed bin (35);				/* temporary wait indices */
dcl  rptp fixed bin (18);				/* offset of page table */
dcl  lp fixed bin;					/* last page */
dcl  np fixed bin;					/* number of pages */
dcl  max_page fixed bin;				/* highest page number allowed */
dcl  increment fixed bin;				/* do loop increment */
dcl  uid bit (36) aligned;				/* uid of segment */
dcl  oldmask fixed bin (71);				/* saved interrupt mask */
dcl  ptwp ptr;					/* saved pointer to ptw for wired stack pages */

dcl  do_io bit (1) aligned;				/* flag on if I/O is to be done */
dcl  io bit (1) aligned;				/* ="1"b for read, "0"b for write */
dcl  must_wait bit (1) aligned;			/* on if must wait for I/O to complete */
dcl  set_wired bit (1) aligned;			/* on if wired bit is to be set */
dcl  wired bit (1) aligned;				/* value of wired bit, if to be set */
dcl  uent bit (1) aligned;				/* on if must check uid before looking around */
dcl  have_list bit (1) aligned;			/* on if we were passed a list of pages */

dcl  page_no fixed bin;				/* current page number */
dcl  wptwp ptr;					/* pointer to current PTW */

dcl  list (0:255) fixed bin;				/* copy of list of pages */

dcl  1 wptw aligned like ptw based (wptwp);		/* working PTW */

dcl  pmut$lock_ptl entry (fixed bin (71), ptr);
dcl  pmut$unlock_ptl entry (fixed bin (71), ptr);
dcl  page$pread entry (ptr, fixed bin, fixed bin (35));
dcl  page$pwrite entry (ptr, fixed bin);
dcl  page$pwait entry (fixed bin (35));

dcl  sst$astsize fixed bin external static;
dcl  sst$pts (0 : 3) fixed bin external static;
dcl  sst$wired fixed bin external static;

dcl (addrel, binary, min, rel) builtin;

/*  */

pc_wired$wire_wait: entry (a_astep, first_page, no_pages);	/* entry to get pages into core and wire down */

	io = "1"b;
	do_io = "1"b;
	must_wait = "1"b;
	set_wired = "1"b;
	wired = "1"b;
	uent = "0"b;
	have_list = "0"b;
	go to join;

pc_wired$wire: entry (a_astep, first_page, no_pages);	/* entry to wire pages */

	do_io = "0"b;
	must_wait = "0"b;
	set_wired = "1"b;
	wired = "1"b;
	uent = "0"b;
	have_list = "0"b;
	go to join;


pc_wired$read: entry (a_astep, first_page, no_pages);	/* entry to read pages */

	io = "1"b;
	do_io = "1"b;
	must_wait = "0"b;
	set_wired = "0"b;
	uent = "0"b;
	have_list = "0"b;
	go to join;


pc_wired$unwire: entry (a_astep, first_page, no_pages);	/* entry to turn off wired bit */

	io = "0"b;
	must_wait = "0"b;
	set_wired = "1"b;
	wired = "0"b;
	uent = "0"b;
	have_list = "0"b;
	go to join;


pc_wired$write_wait: entry (a_astep, first_page, no_pages); /* entry to issue write and wait for I/O */

	io = "0"b;
	do_io = "1"b;
	must_wait = "1"b;
	set_wired = "0"b;
	uent = "0"b;
	have_list = "0"b;
	go to join;


pc_wired$write: entry (a_astep, first_page, no_pages);	/* entry to issue a write */

	io = "0"b;
	do_io = "1"b;
	must_wait = "0"b;
	set_wired = "0"b;
	uent = "0"b;
	have_list = "0"b;
	go to join;


pc_wired$write_wait_uid: entry (a_astep, first_page, no_pages, a_uid); /* For cleanup */

	io = "0"b;
	do_io = "1"b;
	must_wait = "1"b;
	set_wired = "0"b;
	uent = "1"b;
	uid = a_uid;
	have_list = "0"b;
	go to join;

pc_wired$write_wait_uid_list: entry (a_astep, a_listp, first_page, no_pages, a_uid);
			
          io = "0"b;
	do_io = "1"b;
	must_wait = "1"b;
	set_wired = "0"b;
	uent = "1"b;
	uid = a_uid;
	have_list = "1"b;
	goto join;

pc_wired$unwire_write_wait: entry (a_astep, first_page, no_pages);
		        
          io = "0"b;
	do_io = "1"b;
	must_wait = "1"b;
	set_wired = "1"b;
	wired = "0"b;
	uent = "0"b;
	have_list = "0"b;



join:	astep = a_astep;				/* Copy args. */
	np = no_pages;
	max_page = sst$pts (binary (astep ->  aste.ptsi, 3)) - 1;	/* Highest valid page number */
	fp = first_page;

	if have_list then do;
	     list = a_list;
	     lp = fp + np - 1;
	end;
	else do;
	     if np = -1 then lp = binary (astep -> aste.csl, 9) - 1;
	     else lp = fp + np - 1;
	end;

	call pmut$lock_ptl (oldmask, ptwp);		/* lock and mask */

	ptp = addrel (astep, sst$astsize);		/* get a pointer to the page table */
	rptp = binary (rel (ptp), 18); 		/* get offset for pwait calls */


	if set_wired then do i = fp to lp;		/* Unwire/wire all needed pages. */
	     if have_list then page_no = list (i);
	     else page_no = i;
	     if page_no <= max_page then do;
		wptwp = addr (ptp -> ptwa (page_no));
		if wired ^= wptw.wired		/* if changing wired bit */
		     then if wired
		          then sst$wired = sst$wired + 1; /* change total */
		     else sst$wired = sst$wired - 1;
		wptw.wired = wired;			/* Wire/unwire as needed. */
	     end;
	end;

loop:	k, j, waitev = -1;				/* Set out of service indicator. */
	if uent then				/* Racing with cleanup, but we are in same racket */
	     if uid ^= astep -> aste.uid then go to nomore;

	do i = lp to fp by -1;			/* Loop backwards to optimize disk spiral */
	     if have_list then page_no = list (i);
	     else page_no = i;
	     if page_no <= max_page then do;
		wptwp = addr (ptp -> ptwa (page_no));
		if wptw.os then k = page_no + rptp;		/* If out of service remember to wait. */
		else if do_io then do;
		     if ^wptw.valid then do;		/* Try to read in a page. */
			if io then call page$pread (astep, page_no, waitev); /* try to read the page */
			if waitev > 0 then j = waitev;/* use new wait event */
		     end;
		     else do;			/* page is in core, probably want to write */
			if ^io then if (wptw.phm | wptw.phm1) then
			     call page$pwrite (astep, page_no); /* issue the write request */
			if wptw.os then j = page_no + rptp;
		     end;
		end;
	     end;
	end;

	if k ^= -1 then do;
	     j = k;
	     go to wait1;
	end;

	if must_wait & j ^= -1 then do;		/* See if we must wait */
wait1:	     call page$pwait (j);			/* wait for event */
	     go to loop;
	end;

nomore:	call pmut$unlock_ptl (oldmask, ptwp);		/* unlock and unmask */
	return;

%page;	%include aste;
%page;
%INCLUDE "ptw.macro";

     end pc_wired;
