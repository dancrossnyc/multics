" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" ***********************************************************

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	lock_volmap
"
"	Routines for manipulating the per-volume volume map lock.
"	Lock succeeds if the lock can be obtained and the asynchronous
"	state is idle. Otherwise, it fails. The asynchronous state
"	is protected in the following way:
"
"	   To change the state from IDLE requires both the volume map
"	   lock and the Page Table Lock.
"
"	   To change the state from anything else requires the Page
"	   Table Lock.
"
"	Entries:
"
"	   lock_unwired      - lock from outside of page control
"	   lock_wired_nowait - lock from page control, don't wait
"	   lock_wired_wait   - lock from page control, set wait event
"	   unlock_unwired    - unlock from outside of page control
"	   unlock_wired      - unlock from page control
"
"	Written February 1982 by J. Bongiovanni
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

	name	lock_volmap

	segdef	lock_unwired
	segdef	unlock_unwired

	segdef	lock_wired_nowait
	segdef	lock_wired_wait
	segdef	unlock_wired

	even
notify_arg_list:
	vfd	o18/2,o18/4,o36/0

"
	include	apte
"
	include	page_info
"
	include	pvt
"
	include	pvte
"
	include	pxss_page_stack
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	lock_unwired
"
"	call page$lock_volmap (pvtep)
"
"	pvtep -> PVTE
"
"	Returns with lock held and async state idle
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

lock_unwired:
	push
	eppbp	ap|2,*			" bp -> ptr -> PVTE
	eppbp	bp|0,*			" bp -> PVTE

lock_unwired_retry:
	tsx7	lock_wired_wait		" Try to lock lock
	tra	lock_unwired_fails		" Didn't get it
	return				" Got it

lock_unwired_fails:
	call	pxss$wait			" Wait event already set
	tra	lock_unwired_retry		" Go for it again

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	unlock_unwired
"
"	call page$unlock_volmap (pvtep)
"
"	pvtep -> PVTE
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

unlock_unwired:
	push
	eppbp	ap|2,*			" bp -> ptr -> PVTE
	eppbp	bp|0,*			" bp -> PVTE
	tsx7	unlock_wired
	return
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	lock_wired_nowait
"
"	tsx7	lock_volmap$lock_wired_nowait
"	<return if failed>
"	<return if succeed>
"
"	On entry,
"	    bp -> PVTE
"
"	On return,
"	    if succeeded, then lock owned by process and async state is idle
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

lock_wired_nowait:
	increment	pvt$volmap_lock_nowait_calls
	tsx6	lock_try			" Attempt to lock
	tra	lock_wired_fails		" Failed
	tra	1,x7			" Succeeded

lock_wired_fails:
	increment	pvt$volmap_lock_nowait_fails
	tra	0,x7
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	lock_wired_wait
"
"	tsx7	lock_volmap$lock_wired_wait
"	<return if failed>
"	<return if succeeded>
"
"	On entry,
"	    bp -> PVTE
"
"	On return,
"	    if succeeded, lock help by process and async state is idle
"	    if failed, appropriate wait event is in APTE, notify switch set
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

lock_wired_wait:
	increment	pvt$volmap_lock_wait_calls
	tsx6	lock_try			" Try to get lock
	tra	lock_set_wait		" Failed
	tra	1,x7			" Succeeded

lock_set_wait:
	increment	pvt$volmap_lock_wait_fails
	stq	lock_volmap_temp		" Notify switch bit
	eppap	pds$apt_ptr,*		" ap -> APTE
	sta	ap|apte.wait_event		" Set wait event

lock_wired_retry:
	ldq	bp|0,x0			" Notify switch word
	lda	bp|0,x0
	ora	lock_volmap_temp		" Set notify switch
	stacq	bp|0,x0			" Into PVTE
	tnz	lock_wired_retry		" Lost race, retry

	tsx6	lock_try			" Try again, in case race
	tra	0,x7			" Failed again
	eppap	pds$apt_ptr,*		" Got it this time, reset wait
	stz	ap|apte.wait_event
	tra	1,x7
"

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	unlock_wired
"
"	tsx7	lock_volmap$unlock_wired
"
"	On entry,
"	    bp -> PVTE
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

unlock_wired:
	ldq	pds$processid
	lda	0,dl
	stacq	bp|pvte.volmap_lock		" Unlock
	tnz	page_error$volmap_stacq_fails

	epbpap	bp|0			" ap -> PVT
unlock_wired_retry:
	ldq	ap|pvt.n_volmap_locks_held	" Meter total lock time
	tze	0,x7			" Something wrong
	lda	ap|pvt.n_volmap_locks_held
	sta	lock_volmap_temp		" Save old value
	sba	1,dl			" One fewer lock held
	stacq	ap|pvt.n_volmap_locks_held	" Update
	tnz	unlock_wired_retry		" Lost race

	ldaq	ap|pvt.last_volmap_time	" Last lock/unlock
	staq	lock_volmap_temp_1		" Save
	rccl	sys_info$clock_,*		" Current time
	staq	ap|pvt.last_volmap_time
	sbaq	lock_volmap_temp_1		" Delta
	mpy	lock_volmap_temp		" Integral
	adaq	ap|pvt.total_volmap_lock_time
	staq	ap|pvt.total_volmap_lock_time " Total integral

unlock_wired_notify_retry:
	ldq	bp|pvte.volmap_lock_notify_word " Check for notify
	lda	bp|pvte.volmap_lock_notify_word
	cana	pvte.volmap_lock_notify,dl
	tze	0,x7			" Nobody to notify
	era	pvte.volmap_lock_notify,dl	" Reset notify bit
	stacq	bp|pvte.volmap_lock_notify_word " Into PVTE
	tnz	unlock_wired_notify_retry	" Lost race

	eaa	bp|0			" PVTE offset
	arl	18			" Into AL
	epbpap	bp|0			" ap -> PVT
	ora	ap|pvt.volmap_lock_wait_constant " Event to notify

	sta	arg+4
	eppap	arg+4
	spriap	arg+2
	ldaq	notify_arg_list
	staq	arg

	call	pxss$notify(arg)

	tra	0,x7

"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	lock_try
"
"	Internal procedure to attempt lock
"
"	tsx6	lock_try
"	<return if fail>
"	<return if succeed>
"
"	On entry,
"	    bp -> PVTE
"
"	On successful return,
"	    Lock help by process
"	    Async state is idle
"
"	On failure return,
"	    Areg contains wait event
"	    Qreg contains notify bit
"	    x0 is offset into PVTE of notify word
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

lock_try:
	epbpap	bp|0			" ap -> PVT
	lda	pds$processid
	cmpa	bp|pvte.volmap_lock		" MYLOCK?
	tze	page_error$volmap_mylock	" Yes

	stac	bp|pvte.volmap_lock		" Go for it
	tze	lock_try_got		" Got it
	eaa	bp|0			" AU = PVTE offset
	arl	18			" AL = PVTE offset
	ora	ap|pvt.volmap_lock_wait_constant " Areg = wait event
	ldq	pvte.volmap_lock_notify,dl	" Notify bit
	eax0	pvte.volmap_lock_notify_word	" Notify word
	tra	0,x6

lock_try_got:
	ldx0	bp|pvte.volmap_async_state
	cmpx0	VOLMAP_ASYNC_IDLE,du	" Is asynchronous state idle
	tnz	lock_try_not_idle		" No

	aos	ap|pvt.n_volmap_locks	" Meter
lock_try_retry:
	ldq	ap|pvt.n_volmap_locks_held	" Meter total lock time
	lda	ap|pvt.n_volmap_locks_held
	sta	lock_volmap_temp		" Save old value
	ada	1,dl			" One more lock held
	stacq	ap|pvt.n_volmap_locks_held	" Update
	tnz	lock_try_retry		" Lost race

	ldaq	ap|pvt.last_volmap_time	" Last lock/unlock
	staq	lock_volmap_temp_1		" Save
	rccl	sys_info$clock_,*		" Current time
	staq	ap|pvt.last_volmap_time
	sbaq	lock_volmap_temp_1		" Delta
	mpy	lock_volmap_temp		" Integral
	adaq	ap|pvt.total_volmap_lock_time
	staq	ap|pvt.total_volmap_lock_time	" Total integral
	tra	1,x6

lock_try_not_idle:
	lrl	36			" Areg = 0, Qreg = processid
	stacq	bp|pvte.volmap_lock		" Unlock
	tnz	page_error$volmap_stacq_fails	" Bad news

	eaa	bp|0			" AU = PVTE offset
	arl	18			" AL = PVTE offset
	ora	ap|pvt.volmap_idle_wait_constant " Areg = wait event
	ldq	pvte.volmap_idle_notify,dl	" Notify bit
	eax0	pvte.volmap_idle_notify_word	" Notify word
	tra	0,x6

	end
