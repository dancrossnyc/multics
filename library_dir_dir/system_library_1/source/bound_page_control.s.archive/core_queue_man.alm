" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

"
"	core_queue_man --- obscure program to
"	manage locks which manage the locking of locks.

"	Bernard Greenberg 12/06/76
"	Modified for concurrent scheduler, RE Mullen 5/16/77
"
"	core queue is ordered queue of postings to be done, wich
"	could not be done because ptl was locked. Since all
"	ptl unlocking is done under cql, no requests are ever lost.


	segref	page_fault,savex,unsavex,init_savex_bb,page_fault_error

	segdef	disk_post,unlock_ptl,trylock_ptl,run_core_queue,clearout

	entry	ptl_notify_return

	equ	cq,1


	include	disk_post_queue


"
disk_post:
	push			"args to stack..
	lda	ap|2,*
	sta	core_add
	lda	ap|4,*
	sta	errcode
	tsx6	init_savex_bb

	eaq	lock_and_done	assume complicated entry
	lda	pds$processid	new mylock dones?
	cmpa	sst|sst.ptl
	tnz	*+2		go on with lock_and_done if ^=
	eaq	page_fault$done_
	tsx7	0,qu
	return

"
" - - - - - - - - - - - - - - - - - - - - - - - - - -
"

unlock_ptl:			"from page fault...
				"push done, lp set, bb set, x7 is ret.
	tsx6	savex
	tra	unlock_ptl_test_postq


lock_and_done:
	tsx6	savex		save x7

	tsx7	trylock_ptl	can we get the PTL?
	 tra	done_fails_ptl	tra if not.

do_the_done:
	tsx7	page_fault$done_	have ptl, will post

unlock_ptl_test_postq:
	tsx7	looplock_cql	grab the posting queue

test_postq:
	tsx7	dequeue_posting	see if posting to be done...
	 tra	unlock_ptl_real	no, unlock ptl and cql.

	tsx7	unlock_cql	unlock cql, there is posting,
	tra	do_the_done	and do it.

"
"	Disk interrupt has failed to grab the PTL.
"	Enqueue the data from stack.
"

done_fails_ptl:
	tsx7	looplock_cql	grab cql. This assures no-one can
				"unlock ptl until we unlock cql.
	tsx7	enqueue_posting
	 tra	queue_overflow	no more room... looplock the ptl

	tsx7	trylock_ptl	see if we can get ptl, for we have no guarantee that
				"ptl holder didnt go away right before
				"line at done_fails_ptl.
	 tra	*+2		"if ptl fails, guaranteed that enqueuement
				"will be picked up.
	tra	test_postq	"However, if we get it, we can now
				"do postings (both locks locked here.)
	tsx7	unlock_cql	"don't have ptl, we deposited, so unlock cql
	tra	unsavex		and return.

"
"	Queue overflown. Loop lock the PTL.
"
queue_overflow:
	aos	cq|cq.overflows

	tsx7	unlock_cql	done with cq

	tsx7	page_fault$lock_ptl_no_lp
				"this guy doesn't kid around.
	tra	do_the_done

"
"	Can now unlock ptl, for all posting is done, and anybody
"	who's trying to enqueue must wait for cql.
"
unlock_ptl_real:
	tsx7	actual_ptl_unlock_code  he really, really does it.
	tsx7	unlock_cql

	szn	sst|sst.ptl_wait_ct	anybody wanna know?
	tze	unsavex		no, return to caller of core_queue_man

"
"	Notify single PTL waiting process via pxss.
"
	tra	pxss$ptl_notify	which returns to cqm$ptl_notify_return
ptl_notify_return:
	epp	sst,sst$		for luck ..
	tra	unsavex		return to call of core_queue_man

"
"	Entry to make sure this thing isn't stuck.
"	The thing is called from dvctl$run with the
"	entire pc environment set up and the ptl locked
"	during the entire exercise.
"
"
run_core_queue:
	tsx6	savex
	
run_core_queue_loop:
	tsx7	looplock_cql

	tsx7	dequeue_posting
	 tra	run_core_queue_done

	tsx7	unlock_cql
	tsx7	page_fault$done_	do the done
	tra	run_core_queue_loop

run_core_queue_done:
	tsx7	unlock_cql
	tra	unsavex

"
"	Entry to clear the thing out at ESD time to validate
"	assumptions of pc_recover_sst (no "fatal_error in done!")
"

clearout:
	epp	cq,disk_post_queue_seg$

	stz	cq|cq.lock
	stz	cq|cq.put_ptr
	stz	cq|cq.get_ptr
	stz	cq|cq.number_in_queue
	tra	0,7

"

"
"	Coreadd queue management.
"

looplock_cql:			"must be looplock to avoid
				"russian doll lock syndrome.

	rccl	sys_info$clock_,*
	staq	temp

	epp	cq,disk_post_queue_seg$+0
	aos	cq|cq.lockings

	lda	pds$processid
	stac	cq|cq.lock
	tze	*+5
	nop
	nop
	nop
	tnz	*-5
	cmpa	cq|cq.lock	never trust this hw
	tze	*+2
	tsx5	page_fault_error	"ERROR - MYLOCK ON DISK POST QUEUE
	rccl	sys_info$clock_,*
	staq	temp1		save for under-lock metering
	sbaq	temp
	adaq	cq|cq.looplock_time
	staq	cq|cq.looplock_time

	tra	0,7


unlock_cql:

	epp	cq,disk_post_queue_seg$+0  NO CHANCES
	rccl	sys_info$clock_,*
	sbaq	temp1
	adaq	cq|cq.process_time
	staq	cq|cq.process_time
	ldq	pds$processid
	cmpq	cq|cq.lock
	tze	*+2
	tsx5	page_fault_error	"ERROR - STAC FAILS DISK POST QUEUE
	eaa	0
	stacq	cq|cq.lock
	tze	*+2
	tsx5	page_fault_error	"ERROR - UNLOCK ERR DISK POST QUEUE
	cmpq	cq|cq.lock
	tnz	0,7
	tsx5	page_fault_error	"ERROR - STACQ HW FAILS DISK POST QUEUE
"
"
"	Enqueue and dequeue.  cq -> seg.
"

enqueue_posting:
	ldq	cq|cq.number_in_queue
	cmpq	cq_limit,dl	all full?
	tpl	0,7		error exit

	aos	cq|cq.queueings	meter

	aos	cq|cq.number_in_queue
	ldx1	cq|cq.put_ptr
	lda	core_add
	ldq	errcode

	staq	cq|cq.queue,1

	eax1	2,1
	cmpx1	2*cq_limit,du
	tmi	*+2
	eax1	0
	stx1	cq|cq.put_ptr

	tra	1,7


dequeue_posting:
	szn	cq|cq.number_in_queue
	tze	0,7		exit no stuff

	lcq	1,dl
	asq	cq|cq.number_in_queue
	tpl	*+2
	tsx5	page_fault_error	"ERROR - DISK POST QUEUE CT NEGATIVE

	ldx1	cq|cq.get_ptr
	ldaq	cq|cq.queue,1
	sta	core_add
	stq	errcode

	eax1	2,1
	cmpx1	2*cq_limit,du
	tmi	*+2
	eax1	0
	stx1	cq|cq.get_ptr

	tra	1,7
"
"
"	Real page_table lockery.
"

trylock_ptl:
	lda	pds$processid
	cmpa	sst|sst.ptl
	tze	page_error$ptl_mylock

	stac	sst|sst.ptl
	tnz	0,7		fail

	cmpa	sst|sst.ptl
	tze	1,7
	tsx5	page_fault_error	"ERROR - STAC FAILS PTL


"
"	Real page_table_lock unlockery
"

actual_ptl_unlock_code:
	ldq	pds$processid
	lda	0,dl
	stacq	sst|sst.ptl	unlock it
	tze	*+2
	tsx5	page_fault_error	"ERROR - PTL UNLOCK FAILS
	nop
	cmpq	sst|sst.ptl	double-check hw
	tnz	0,7

	tsx5	page_fault_error	"ERROR - PTL STACQ HW FAILS
"
	include	sst

	include	pxss_page_stack

	include	page_info
	end
