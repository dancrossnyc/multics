" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

"
"	THREAD
"
"	This procedure is used by the supervisor to manage threaded lists of
"	objects. Every such object should have a declaration which begins:
"
"	dcl 1 thing aligned based,
"	    2 forward_ptr bit (18) unaligned,
"	    2 back_ptr bit (18) unaligned,
"
"	The first word of each object must contain two eighteen bit pointers
"	(segment-base relative) to the next and previous objects in the list.
"
"	This procedure also maintains a pointer into the list. It must be an
"	18 bit relative offset, and appear in the upper halfword of a word.
"	The caller of thread may therefore declare it aligned.
"
"	No checking is done to insure that these requirements for alignment
"	and location are being followed.
"
"	10/03/73, R. E. Mullen, in v2pl1
"	04/17/75, A. Bensoussan, to zero the fp and bp when threading out.
"	03/26/81, W. Olin Sibert, to re-code in ALM
"

	name	thread
	segdef	lin		" Thread in, to linear list
	segdef	cin		" Thread in, to circular list
	segdef	out		" Thread out, of either type

	equ	thread,1		" PR1 points to thread word throughout
	equ	object,2		" PR2 points to object
	equ	base,3		" PR3 points to base of segment containing
				" the object (though perhaps not the thread)

	equ	.object,0 	" X0 is offset of object
	equ	.next,1		" X1 is offset of next object
	equ	.prev,2		" X2 is offset of previous object
	equ	.thread,3 	" X3 is the value of the thread word (on entry)


" 
"
"	THREAD$LIN -- Thread object into linear list
"
"	dcl  thread$lin entry (pointer, bit (18) unaligned);
"
"	call thread$lin (astep, sst.ausedp (0));
"


lin:	epp	object,ap|2,*
	epp	thread,ap|4,*	" Pointer to thread word
	epp	object,object|0,*	" Pointer to object

	eax	.object,object|0	" Offset of object
	ldx	.thread,thread|0	" Current value of thread (next_object)

				" Is list empty now?
	tnz	lin.non_empty	" No -- go thread into nonempty list

" It was empty, so the thing we're threading in will be the only thing in the list.

	stx	.object,thread|0	"   object.bp = null, object.fp = null
	stz	object|0		"   thread = object_ptr

	short_return		"


" Since it was nonempty, we thread this object in at the end of the list. The
" thread ends up pointing at the object we are threading in, and the object
" it used to point to is adjusted to point (back) at the new one.

lin.non_empty:
	epbp	base,object|0	" Get a pointer to the base of the segment
	stz	object|0		     " object.bp = null
	stx	.thread,object|0	     " object.fp = thread (prev_object_ptr)
	stx	.object,thread|0	     " thread = object_ptr
	sxl	.object,base|0,.thread   " prev_object.bp = object_ptr

	short_return


" 
"
"	THREAD$CIN -- Thread object into circular list
"
"	dcl  thread$cin entry (pointer, bit (18) unaligned);
"
"	call thread$cin (astep, sst.ausedp (0));
"


cin:	epp	object,ap|2,*	" (pointer argument)
	epp	thread,ap|4,*	" Pointer to thread word
	epp	object,object|0,*	" Pointer to object

	eax	.object,object|0	" Offset of object
	ldx	.thread,thread|0	" Current value of thread (next_object)

				" Is list empty now?
	tnz	cin.non_empty	" No -- go thread into nonempty list

				" It was empty, so all threads point to it
	stx	.object,object|0	"   object.fp = object_ptr
	sxl	.object,object|0	"   object.bp = object_ptr
	stx	.object,thread|0	"   thread = object_ptr

	short_return


" Since it was not empty, we will now thread in the new object between the "previous"
" and "next" objects -- the thread is always considered to point to the "next"
" object. After our object has been threaded in, it will be at the very end of
" the list.

cin.non_empty:
	epbp	base,object|0	" Get a pointer to the base of the segment
	stx	.thread,object|0	     " object.fp = thread (next_object_ptr)
	lxl	.prev,base|0,.thread     " prev_object_ptr
	sxl	.prev,object|0	     " object.bp = prev_object.bp
	stx	.object,base|0,.prev     " prev_object.fp = object_ptr
	sxl	.object,base|0,.thread   " next_object.bp = object_ptr

	short_return


" 
"
"	THREAD$OUT -- Thread object out of the list
"
"	dcl  thread$out entry (pointer, bit (18) unaligned);
"
"	call thread$out (astep, sst.ausedp (0));
"


out:	epp	object,ap|2,*	" (pointer argument)
	epp	thread,ap|4,*	" Pointer to thread word
	epp	object,object|0,*	" Pointer to object

	eax	.object,object|0	" Offset of object
	ldx	.thread,thread|0	" Current value of thread (next_object)

	epbp	base,object|0	" Get a pointer to the base of the segment
	ldx	.next,object|0	" and pointers to the previous and next object
	lxl	.prev,object|0
	tze	out.no_previous	" if prev pointer is non-null,
				" rethread forward pointer for prev object
	stx	.next,base|0,.prev	"   prev_object.fp = next_object_ptr
				" (fall through)
out.no_previous:
	canx	.next,=o777777,du	" if next pointer is non-null, rethread
	tze	out.no_next	" backward pointer for next object

	sxl	.prev,base|0,.next	"   next_object.bp = prev_object_ptr
				" (fall through)
out.no_next:
	cmpx	.object,thread|0	" If thread pointed to object we are threading
	tnz	out.not_this_one	" out, adjust it to point to the next, instead

	stx	.next,thread|0	"   thread = next_object_ptr

out.not_this_one:			" If this object points to itself, we are
	cmpx	.object,object|0	" removing the only object on a circular
	tze	out.last_in_list	" list, so we should zero the thread word

	stz	object|0		" Finally, zero the threads in the object
				" being removed.
	short_return


out.last_in_list:			" Can't use an STZ here, because there may
	ldx	.thread,0,du	" be something else in the lower halfword
	stx	.thread,thread|0	"   thread = null
	stz	object|0		" Finally, zero the threads in the object
				" being removed.
	short_return

	end
