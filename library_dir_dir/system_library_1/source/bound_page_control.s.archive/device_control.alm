" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " 
"
"	device_control 
"
"	Dispatcher to appropriate dim on device type.
"	The entries read, write, and run are transfered to via
"	a tsx7.
"	Index registers x2,x3,x4,x7 must be preserved.
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

" Modified 2/6/74 by N. I. Morris
" Modified 4/8/74 by S. H.Webber to meter reads and writes per device
" Modified 6/6/74 by B. Greenberg for unified page_wait strategy.
" Modified 12/11/74 by B. Greenberg for cme.notify_requested and new cme/ptw protocol
" Modified 02/28/75 by BSG for NSS
" Modified 06/21/79 by BSG for stack 0 sharing
" Modified 1/80 by R.J.C. Kissel to eliminate a builtin constant
" Modified 03/29/81, W. Olin Sibert, to conditionalize Page Multilevel
" Modified 03/03/82 by J. Bongiovanni to remove Page Multilevel, and for new PVTE
" Modified 6/21/82 by E. N. Kittlitz to move core map.

	include	pxss_page_stack
	include	aste
	include	pvte
	include	add_type
	include	stack_frame
	include	stack_header
	include	page_info
	include	sst
	include	ptw
	include	cmp
	include	apte
	include	fs_dev_types
"

	name	device_control

	segdef	dev_read,dev_write,time_out,run,init,pwait,esd_reset
	segdef	disk_offlinep
	entry	ptl_waitlock
	segdef	check_ckdv,ckdv_from_pvtx
	entry	pwait_return
" 
init:
	push	"gonna call out.
	ldq	ap|2,*	get pvtx
	stq	pvtx

	tsx0	get_device_type	get from pvt

	short_call disk_init$disk_init(ap|0)
	return



esd_reset:		"this entry is called to flush out all dim I/O reqs.
			" note this works elegantly at ESD time, but does not
			"extend easily to fault recover time.
	push		"for callouts
	epp	sst,sst$
	stz	sst|sst.ptl	somebody has to do this.
	short_call disk_control$esd_reset_locks

	tsx7	core_queue_man$clearout
	return


dev_read:
	tsx0	get_device_type	get it from pvt
	aos	sst$+sst.reads-1,al


	eppap	dctl$disk_read
	tra	call_join		go call the dim

dev_write:
	tsx0	get_device_type
	aos	sst$+sst.writes-1,al
	aos	sst$+sst.wtct

	eppap	dctl$disk_write

call_join:
	eppbp	inter		pick up flag saying to interrupt
	spribp	arg+8
	eppbp	pvtx
	spribp	arg+2
	eppbp	core_add
	spribp	arg+4
	eppbp	devadd
	spribp	arg+6
	fld	=4b24,dl		4 arguments
	ora	4,dl		all arg acceptable to PL1
	staq	arg
	eppbp	ap|0		can't use ap to call
	call	bp|0(arg)
	eppbp	sst$+0,2		restore bp to point into SST
	epbpbb	bp|0		restore bb to point to base of sst
	tra	0,7




pwait:			"entry to wait for any page control event
push:	push		"no more  frame-avoiding m-mouse
	tsx6	page_fault$init_savex_bb
pwait_retry:
	lda	ap|2,*		get event in a
	cana	-1,du		global event?
	tnz	await_tc

	als	18		move to upper
	lda	sst|0,au		get ptw
	cana	ptw.os,dl		see if event still there
	tze	.ret_long		return if no longer o/s
	arl	2		get core map index
	eaa	cme.devadd,au	set to get devadd
	ldq	cme.notify_requested,dl set notify bit in cme
	orsq	sst|sst.cmp,*au	.. as we came here to wait.
	lda	sst|sst.cmp,*au	get devadd word

await_tc:
	lda	ap|2,*		get argument
	eppap	pds$apt_ptr,*	get apt ptr
	sta	ap|apte.wait_event	put it where it can get notified.

	tsx7	page_fault$unlock_ptl
				"clear postqueue, perhaps notify


	tra	pxss$waitp

ptl_waitlock:			"contract of this entry:
		" 1. Who tras to me is in his stack frame, with its own return ptr valid.
		" 2. Who tras to me has masked to sys_level and wired the (pds) stack.
		" 3. I shall execute a full Multics return (to prev frame) when
		"    and only when I have the PTL locked.

		"It is NOT necessary to stx6 init_savex here.

	push		"Establish page control frame.
pwait_return:
	epp3	sst$		don't forget!
	tsx7	core_queue_man$trylock_ptl
	 tra	pxss$dvctl_retry_ptlwait
			"patch to tra *-1 if too obscure

.ret_long:return



time_out:				"entry to call to make sure disks havn't stopped
	save
	tsx7	page_fault$lock_ptl	lock the page table lock
	tsx6	page_fault$init_savex  init x7 save stack
	tsx7	run		call run on each device
	tsx7	page_fault$unlock_ptl  unlock the page table lock
	return

run:
	tsx6	page_fault$savex
	tsx7	core_queue_man$run_core_queue
	tsx6	pc_trace$running	trace the fact that we called run

	eppap	=v18/0,18/4,18/0,18/0
	call	disk_control$disk_run
	tra	page_fault$unsavex



disk_offlinep:
	tsx0	get_device_type
	lda	lb|pvte.device_inoperative_word
	cana	pvte.device_inoperative,dl
	tze	1,7
	tra	0,7

get_device_type:
	ldq	pvtx
	tmoz	page_error$bad_device_id
	mpy	pvte_size,dl	index the pvt
	epplb	pvt$array
	epplb	lb|-pvte_size,ql	address the PVTE
	lda	lb|pvte.device_type_word
	arl	pvte.device_type_shift
	tze	page_error$bad_device_id
	cmpa	fs_dev.max_dev_type,dl
	tpnz	page_error$bad_device_id
	tra	0,0



check_ckdv:
	lda	page_fault$cme_devadd,*4 what device is this?
	lda	ast|aste.pvtx_word,3
	arl	aste.pvtx_shift
	ana	aste.pvtx_mask,dl	get disk's pvtx
ckdv_from_pvtx:
	lrl	36		move to x
	mpy	pvte_size,dl
	eppap	pvt$array
	eppap	ap|-pvte_size,ql	address the PVTE
	lda	ap|pvte.check_read_incomplete_word
	cana	pvte.check_read_incomplete,dl are we checking this dev?
	tnz	0,7
	tra	1,7		no
	end
