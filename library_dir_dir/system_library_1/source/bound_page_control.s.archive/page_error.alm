" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

" HISTORY COMMENTS:
"  1) change(86-05-13,GJohnson), approve(86-05-13,MCR7387),
"     audit(86-05-13,Martinson), install(86-05-14,MR12.0-1056):
"     Correct error message documentation.
"  2) change(86-05-29,Fawcett), approve(86-04-11,MCR7383),
"     audit(86-06-11,Coppola), install(86-07-17,MR12.0-1097):
"     Add subvolume to error messages.
"  3) change(87-02-18,Lippard), approve(87-03-16,MCR7640),
"     audit(87-06-17,Farley), install(87-07-17,MR12.1-1043):
"     Added entry to crash system on finding invalid volmap words (fix by
"     Swenson).
"                                                      END HISTORY COMMENTS

" " " " " " " " " " " " " " " " " " " " " " " "
"
"	page_error	this procedure contains the code for outputing
"			error messages that are generated by the machine
"			language parts of page control.
"
"	First coded by Webber at time immemorial.
"	Modified for NSS by B. Greenberg '75
"	Mexped by VanVleck, with Greenberg, 2/77,3/77
"	Macro ALM and declaration macrology by BSG 5-6/77
"	Interpreter by BSG 7/17/77
"	Modified for stock, -PML by J. Bongiovanni February 1982
"	Modified to move core map by E. N. Kittlitz June 1982
"	Modified for scavenger, J. Bongiovanni, August 1982
"	Modified for page_synch, J. Bongiovanni, October 1982
"	Delete sst include file, Benson Margulies, January 1984
"	Added covert channel audit message, Keith Loepere, January 1985.
"	Converted to access_audit_bin_header, Keith Loepere, January 1985.
"	Modified to use syserr_constants, syserr_mmdam_msg,
"			and segdamage_msg incls, EJ Sharpe, March 1985
"	Modified to print the subvolume with the driveno for syserr,
"		          R. A. Fawcett, July 1985
"
" " " " " " " " " " " " " " " " " " " " " " " "

" GENERAL STRATEGY:

"	First, we "adjust" pxss_page_stack to look like the TSX that
"	     got us here did a PL/I "call" to page_error, but _w_e save all his
"	     registers for him at sp|0 and sp|32 (decimal).
"	While running in pxss_page_stack we copy anything we want into "arg".
"	Then we do a push to new (upper) frame.
"	Here we set up an arg list and call syserr.
"	Then we pop up to the pxss_page_stack frame and return,

"	     reloading his registers from the pxss_page_stack frame first.
"
"	Interpreter strategy:
"
"	Maximum code condensation of arglist preparation is achieved by
"	coding 1 word per arglist element. Tsx7 to "interpreter"
"	builds all of syserr arg list from arg "n" on in a "k" arg list:
"
"	tsx7	interpreter
"	zero	endl,2*n
"	zero	k,4
"	arg_n_description
"	arg_n_plus_1_description
"	...
"	arg_k_description
"endl:

"	description is 2 halfwords, first specifies arg addr,
"	second descriptor addr. Address for data is negative if
"	offset into pxss_page_stack, + if text. Descr. addr is always text.

"
"	How to use the page_error programming language.
"
"	This macrology enables the maintainter of page_error to generate
"	calls to syserr and syserr$binary with a maximum of ease. A typical
"	call to syserr is written like this:
"
"	call_syserr	1,(page_fault: this and that ^o for ^a),devadd,drivename
"
"	being equivalent to
"
"	call syserr (1, "page_fault: this and that ^o for ^a", devadd, drivename)
"
"	in PL/1. The ioa_arguments must be "declared" by the dcl or dclfix
"	macros. Usage is:
"
"	dcl	drivename,arg+18,char,4
"
"	meaning
"
"	dcl drivename char (4) based (addr (arg)+18), so to speak.
"
"	1st arg is variable name, second is location, which must be in pxss_page_stack,
"	3rd is data type (only char, fixed, ptr, bit provided now), 4th is precision, default 17.
"
"	dclfix declares something by its own name as fixed bin (17).

"	1st argument to call_syserr (or call_syserr_binary) is interpreted as being an offset
"	in pxss_page_stack if not a numeric literal.
"
"	call_syserr_binary 1,(arg+4,*),syserr_binary_code,opt_subr,(ctrlstring),args...
"
"	is similar. 2nd arg is DATA address- pointer developed from it. 3rd arg is suffix
"	in syserr_binary_def.incl.alm (i.e., xx for SB_xx, SBL_xx). opt_subr is the name
"	of a subroutine to be called by macro in new frame (currently only gseg_info).
"	Omit (,,) in other cases. gseg_info formats up seg-id type message, incrs.
"	sst$damaged_ct.
"
"
"	Declaration/arglist macrology.
"

	macro	dcl	    "dcl  symbol,address(rel to U),type{,prec}
	maclist	off,save
	macro	iword_&1
	zero	-(&2),=v1/1,6/&3,17/0,12/&=&4,&[17&;&4&]
	&&end
	maclist	restore
	&end

	macro	dclfix
	maclist	off,save
&R&(	dcl	&i,&i,fixed
&)	maclist	restore
	&end

	macro	message
&1.msg:aci   "&2"
&1.dsc:	vfd	1/1,6/char,1/0,4/0,24/&l2
	&end


	macro	call_syserr

	new_frame

	tsx7	interpreter
	zero	*+2+&K,2
	zero	2*&K,4

	ifint	&1
	zero	=&1,fx
	ifend
	inint	&1
	zero	-(&1),fx
	ifend

	zero	&U.msg,&U.dsc
&R3&(	iword_&i
&)
	tra	csys

	message	&U,(&2)
	&end

	macro	call_syserr_binary

	new_frame

	ine	&4,()
&(4	tsx7	&i
&)
	ifend

	ifint	&1
	eppap	=&1
	ifend
	inint	&1
	eppap	&1
	ifend
	spriap	sp|syserr_arg_list+2

	tsx7	interpreter
	zero	*+2+&K-2,6
	zero	2*&K,4

	zero	&U.sbc,fx
	zero	&U.sbl,fx
	zero	&U.msg,&U.dsc
&R6&(	iword_&i
&)
	eppap	&2
	tsx7	binary_setup
			"no return

&U.sbc:	vfd	36/SB_&3
&U.sbl:	vfd	36/SBL_&3

	message	&U,(&5)
	&end

	macro	savexx	savexx	regname
	stcd	sp|stack_frame.return_ptr bound_page_control
	spri	sp|0
	sreg	sp|32
	ine	&1,none
	stx	&1,sp|stack_frame.return_ptr+1
	ifend
	ife	&1,none
	stc1	sp|stack_frame.return_ptr+1	set loop message
	ifend
	&end

	macro	new_frame
	push	syserr_arg_list+frame_size
	epp	U,sp|stack_frame.prev_sp,*
	&end

"

"
"	Sundry	assembler declarations
"

	name	page_error
	segdef	bad_device_id
	segdef	device_error,out_of_core,ptl_mylock
	segdef	zeroing_page
	segdef	error_in_done
	segdef	out_of_hc_part
	segdef	page_fault_error,non_fatal_error
	segdef	page_move_parity,wired_parity_error,reverting_page,deleting_mm_frame
	segdef	volmap_async_error,deposit_invalid_addtype,stock_out_of_synch
	segdef	invalid_deposit_list_args,address_out_of_range
	segdef	volmap_stacq_fails,volmap_mylock,deposit_zero_address
	segdef	volmap_inconsistent,stock_inconsistent,ptl_not_locked
	segdef	wrong_async_state,volmap_page_async_error,volmap_page_invalid_call
	segdef	deposit_inuse_address,bad_volmap_address,volmap_io_error,poll_state_change
	segdef	scav_stacq_fails
	segdef	no_free_dm_entries,dm_journal_seg_problem
	segdef	excessive_seg_state_chg
	segdef	invalid_volmap_word

	equ	dcb,2
	equ	mbx,5
	equ	bsd,3


	equ	U,2		Use bp to point at pxss_page_stack frame

	equ	syserr_arg_list,40	The whole upper frame is arglist.
	equ	frame_size,8*16
	equ	binary_buffer,6*16

"
"	Declarations of variables for above macros
"


	dclfix	devadd,pvtx,core_add

	dcl	argf,arg,fixed
	dcl	a1char,arg+1,char,1
	dcl	a1f,arg+1,fixed
	dcl	t1f,temp+1,fixed
	dcl	ctrlrtag,temp,char,1
	dcl	a2f,arg+2,fixed
	dcl	a3f,arg+3,fixed
	dcl	a4f,arg+4,fixed
	dcl	a5f,arg+5,fixed

	dcl	devname,arg,char,4
	dcl	driveno,arg+1,char,4

	dcl	pvtep,arg+6,ptr
	dcl	stockp,arg+8,ptr

	dcl	person,arg,char,32
	dcl	categories,arg+8,bit,18
	dcl	level,arg+9,fixed

bad_device_id:
	savexx	none		TRA from device_control

	call_syserr 1,(device_control: invalid pvtx ^w),pvtx

csys:	call	syserr$syserr(sp|syserr_arg_list)

" now we are on the upper frame. Get back.

exit:	epbpsb	sp|0		inline pop
	eppbp	sp|stack_frame.prev_sp,*
	inhibit	on
	sprisp	sb|stack_header.stack_end_ptr
	lpri	bp|0
	inhibit	off
	lreg	sp|32
	rtcd	sp|stack_frame.return_ptr	return to alm code

" 

out_of_hc_part:
	savexx	none		TRA from free_store

	call_syserr 1,(free_store: out of of room in hardcore partition.)
" 

zeroing_page:
	savexx	.ret
	lda	1,dl		set entry sw
	tra	zpag_rpag_merge

reverting_page:
	savexx	.ret
	lda	2,dl
zpag_rpag_merge:
	sta	temp+1

	tsx7	get_ast_params
	tsx7	get_pageno
	lda	arg+18

	tsx0	setup_pvtname

	call_syserr_binary 0,sp|binary_buffer,zerpag,gseg_info,
	     (page_fault: ^[Zeroing^;Reverting^] page on ^a_^a),t1f,devname,driveno


"
deleting_mm_frame:
	savexx	.ret
	tsx0	setup_controller
	call_syserr_binary 3,sp|binary_buffer,mmdam,movemm,
		(page_fault: Deleting main memory at ^o, SCU ^a, due to parity errors.),core_add,ctrlrtag

"
page_move_parity:
	savexx	.ret
	lda	0,dl		info code
	tra	evpp_merge

wired_parity_error:
	savexx	none		fatal
	lda	1,dl
evpp_merge:
	sta	temp+1
	tsx0	setup_controller
	tsx7	get_ast_params
	tsx7	get_pageno
	lda	arg+18
	tsx0	setup_pvtname

	call_syserr_binary temp+1,sp|binary_buffer,random_segdamage,gseg_info,
	     (evict_page: ^[fatal ^]parity error moving page, frame at ^o, SCU ^a),
	     t1f,core_add,ctrlrtag

" 


page_fault_error:
	savexx	none		TSX6 from page_fault, don't go
	lda	=1,dl		function
	ldq	=1,dl		crash code
	tra	pferr.join
non_fatal_error:
	savexx	.2ret		TSX6 from page_fault
	lda	=2,dl		function
	ldq	=0,dl
pferr.join:
	sta	arg
	stq	arg+1
	stz	arg+2		x5 has loc in page_fault
	sxl5	arg+2

	call_syserr arg+1,(page_fault: ^[^;non^]fatal error at loc ^o),argf,a2f

"

error_in_done:
	savexx	none		TZE from page_fault
	stz	arg
	sxl	.ptw,arg		ptr to ptw

	call_syserr 1,(page_fault: fatal error in done, ptp ^o),argf
" 

out_of_core:
	savexx	none		TPL from page_fault

	call_syserr 1,(page_fault: out of main memory)
" 


ptl_mylock:
	savexx	none		TZE from page_fault

	call_syserr 1,(page_fault: mylock on global lock)
" 

device_error:
	savexx	.2ret		TSX6 from page_fault
	lda	=1	"ECCH"	
	sta	arg+2
	lda	ast|aste.pvtx_word,.aste
	arl	aste.pvtx_shift
	ana	aste.pvtx_mask,dl
deverr.got_pvtx:
	tsx0	setup_pvtname

	call_syserr_binary 1,U|arg+18,read_nc,gseg_info,
	     (page_fault: device read not complete ^a_^a ^w),
	     devname,driveno,devadd
" 
volmap_async_error:
	savexx	none
	lda	pvtx
	tsx0	setup_pvtname
	call_syserr 1,(free_store: volmap_seg async error for ^a_^a),devname,driveno

deposit_invalid_addtype:
	savexx	none
	sta	devadd
	spribp	arg+6
	tsx0	setup_pvtname_from_pvtep
	call_syserr 1,(free_store: Deposit non-disk address ^w on ^a_^a),devadd,devname,driveno

address_out_of_range:
	savexx	none
	spribp	arg+6
	tsx0	setup_pvtname_from_pvtep
	call_syserr 1,(free_store: Deposit/withdraw address ^w out of paging region on ^a_^a.),devadd,devname,driveno

stock_out_of_synch:
	savexx	none
	spribp	arg+6
	spribb	arg+8
	tsx0	setup_pvtname_from_pvtep
	call_syserr 1,(free_store: PVTE/Stock out of synch on ^a_^a. stockp=^p.),devname,driveno,stockp

invalid_deposit_list_args:
	savexx	none
	call_syserr 1,(free_store: Invalid call to free_store$deposit_list.)
scav_stacq_fails:
	savexx	none
	spribp	arg+6
	tsx0	setup_pvtname_from_pvtep
	call_syserr 1,(free_store: Scavenger STACQ fails on ^a_^a.),devname,driveno

no_free_dm_entries:
	savexx	none
	call_syserr 1,(page_synch: Out of free entries in dm_journal_seg_.)

dm_journal_seg_problem:
	savexx	none
	call_syserr 1,(page_synch: dm_journal_seg inconsistent.)
" 
volmap_stacq_fails:
	savexx	none
	spribp	arg+6
	tsx0	setup_pvtname_from_pvtep
	call_syserr 1,(lock_volmap: STACQ fails on ^a_^a.),devname,driveno

volmap_mylock:
	savexx	none
	spribp	arg+6
	tsx0	setup_pvtname_from_pvtep
	call_syserr 1,(lock_volmap: MYLOCK on volmap lock for ^a_^a.),devname,driveno

" 
deposit_zero_address:
	savexx	none
	call_syserr 1,(stock: deposit zero address.)

" 
volmap_inconsistent:
	savexx	none
	spribp	arg+6
	tsx0	setup_pvtname_from_pvtep
	call_syserr 1,(volmap: Volume Map inconsistent on ^a_^a.),devname,driveno

invalid_volmap_word:
	savexx	none
	spribp	arg+6
	tsx0	setup_pvtname_from_pvtep
	call_syserr 1,(volmap: Invalid volume map word on ^a_^a.),devname,driveno

stock_inconsistent:
	savexx	none
	spribp	arg+6
	spribb	arg+8
	tsx0	setup_pvtname_from_pvtep
	call_syserr 1,(volmap: record stock inconsistent on ^a_^a. stockp=^p.),devname,driveno,stockp

deposit_inuse_address:
	savexx	.ret
	spribp	arg+6
	tsx0	setup_pvtname_from_pvtep


	call_syserr 0,(volmap: Attempt to deposit in-use address ^o on ^a_^a.),devadd,devname,driveno

bad_volmap_address:
	savexx	none
	spribp	arg+6
	tsx0	setup_pvtname_from_pvtep
	call_syserr 1,(volmap: Invalid Volume Map address computation for ^o on ^a_^a.),devadd,devname,driveno

"
ptl_not_locked:
	savexx	none
	call_syserr 1,(volmap_page: PTL not locked to process.)

wrong_async_state:
	savexx	none
	spribp	arg+6
	tsx0	setup_pvtname_from_pvtep
	call_syserr 1,(volmap_page: Invalid async state on ^a_^a.),devname,driveno

volmap_page_async_error:
	savexx	none
	spribp	arg+6
	tsx0	setup_pvtname_from_pvtep
	call_syserr 1,(volmap_page: Async error for ^a_^a.),devname,driveno

volmap_page_invalid_call:
	savexx	none
	call_syserr 1,(volmap_page: Invalid call.)

volmap_io_error:
	savexx	.ret
	sta	arg+2		Page number
	spribp	arg+6
	tsx0	setup_pvtname_from_pvtep
	call_syserr 3,(volmap_page: Unrecoverable I/O error on Volmap page ^d of ^a_^a. Addresses lost.),a2f,devname,driveno


poll_state_change:
	savexx	.ret
	stz	arg+2
	ldx1	bp|pvte.volmap_async_state
	sxl1	arg+2		New async state
	spribp	arg+6
	tsx0	setup_pvtname_from_pvtep
	call_syserr 4,(volmap_page: Async state on ^a_^a changed to ^d on poll.),devname,driveno,a2f

" 

excessive_seg_state_chg:
	savexx	.2ret		" tsx	.2ret from page_fault

	epp	U,pds$process_group_id
	mlr	(pr),(pr)		" copy process_group_id
	desc9a	U|0,32
	desc9a	arg,32		" (person)

	ldaq	pds$access_authorization
	qrl	18		" level to lower half
	staq	arg+8
	
	call_syserr_binary 24,sp|binary_buffer,covert_seg_state,covert_audit_info,
	     (AUDIT (page_fault): GRANTED excessive segment state changes (Moderate_cc) for ^a (^o:^.3b).),person,level,categories
" 

" " " " " " " " " " " " " " " " " " " " " " "
"				    "
"	Subroutines		    "
"				    "
" " " " " " " " " " " " " " " " " " " " " " "

get_pageno:			"Given astep, ptp, get pageno into
				"arg+20 upper
	eax0	-aste_size,.ptw
	stx	.aste,arg+20
	sblx0	arg+20
	stx0	arg+20
	tra	0,7		no ssx0 cause top bit oflw

get_ast_params:			"Get uid, vtocx, pvtx.
	lda	ast|aste.uid,.aste	get uid
	sta	arg+21
	tze	get_ast_params.zuid wie noord

	lda	ast|aste.vtocx,.aste
	ana	-1,dl
	tra	get_ast_params.gotvx

get_ast_params.zuid:
	lca	1,dl
get_ast_params.gotvx:
	sta	arg+20

	lda	ast|aste.pvtx_word,.aste
	arl	aste.pvtx_shift
	ana	aste.pvtx_mask,dl
	sta	arg+18		"Leave this in A reg.
	tra	0,7

"

setup_controller:
	lda	page_fault$cme_flags,*.cme get controller
	ana	cme.contr,dl	controller used here
	als	36-9
	adla	=aA   "		Ascii A
	sta	temp
	tra	0,0

setup_pvtname_from_pvtep:			"s/r to address printable pv name
	eppap	arg+6,*
	tra	setup_pvtname.pvtep

setup_pvtname:				"s/r to address printable pv name
	eaq	0,al
	mpy	pvte_size,dl
	eppap	pvt$array
	eppap	ap|-pvte_size,qu		address right pvte
setup_pvtname.pvtep:
	ldq	ap|pvte.logical_area_number_word
	qrl	pvte.logical_area_number_shift
	anq	pvte.logical_area_number_mask,dl
	stq	arg+18
	btd	(pr),(pr)
	desc9a	arg+18,4
	desc9ls	arg+19,3,0
	stz	arg+1
	mvne	(pr),(),(pr)
	desc9ls	arg+19,3,0
	desc9a	microp,2
	desc9a	arg+1,2
	mlr	(pr),(pr)
	desc9a	ap|pvte.sv_name,2
	desc9a	arg+1(2),2
	lda	ap|pvte.devname
	sta	arg
	lda	ap|pvte.pvid
	sta	arg+18
	lda	ap|pvte.lvid
	sta	arg+19
	tra	0,0

microp:
	oct	070322000000		" ses ON, mvc 2
"
" " " " " " " " " " " " " " " " " " " " " " "
"				    "
"	Arglist interpreter		    "
"				    "
" " " " " " " " " " " " " " " " " " " " " " "

interpreter:
	lda	1,7		get 2*argct with 4
	eaq	0,au
	staq	sp|syserr_arg_list

	eax6	2,7		point at arg
	lxl1	0,7		offset to first unprocessed
	eax1	syserr_arg_list+0,1
	eax2	0,1
	adlx2	1,7		-> descs

interp.list:
	cmpx6	0,7		end of list?
	tze	0,6		wham

	lda	0,6
	eppap	0,al		-> desc
	spriap	sp|0,2
	eaa	0,au
	tpl	int.txt
	neg	0
	eppap	U|0,au		-> stack arg
	tra	*+2
int.txt:	eppap	0,au		address text
	spriap	sp|0,1

	eax1	2,1
	eax2	2,2
	eax6	1,6		interp pc
	tra	interp.list

binary_setup:
	spriap	sp|binary_buffer+22
	eppap	sp|binary_buffer+22
	spriap	sp|syserr_arg_list+2*2
	ldx1	sp|syserr_arg_list
	eppap	ptrd
	spriap	sp|syserr_arg_list+2+2,1
	tra	bincall

bincall:	call	syserr$binary(sp|syserr_arg_list)
	tra	exit

"
"
"	New-frame subroutines
"

gseg_info:
format_segdamage_binary:
"
"				First copy UIDs from AST, right-justified.
	mlr	(pr),(pr)
	desc9a	U|arg+18,4*4
	desc9a	sp|binary_buffer+segdamage.pvid,4*4	"lvid immediately follows pvid
	aos	sst$damaged_ct	trigger aswering service
	eax4	16		assume no more stuff if lossage
	eax5	0		fill from 0 if lossage
	lxl2	U|arg+20		have vtocx?
	tmi	gup.fillup3	no, put in zeros

	lxl3	U|32+1		x3 from saved regs
	lxl3	ast|aste.par_astep,3 check  par
	tze	gup.fillup3	c/b root!
	eax4	15		set to last uid word
gup.lp1:	lda	ast|aste.uid,3
	sta	sp|binary_buffer+segdamage.uid_path,4	store in array
	lxl3	ast|aste.par_astep,3	loop up
	tze	gup.fillup	thats all on this end
	eax4	-1,4		count level
	tpl	gup.lp1		normal case
	eax4	1,4		only if busted, do this.

"				Now left-justify them, pad with zeros.
gup.fillup:
	eax5	0		destination of  move
gup.fillup1:
	lda	sp|binary_buffer+segdamage.uid_path,4	get put word
gup.fillup2:
	sta	sp|binary_buffer+segdamage.uid_path,5	store in new place
	eax5	1,5		new target
	eax4	1,4		new source
	cmpx4	16,du		ready to do over end?
	tmi	gup.fillup1	no, do next word
gup.fillup3:
	lda	0,dl		pad out zeros
	cmpx5	16,du		gonna store over end?
	tmi	gup.fillup2	no, go store zero
	tra	0,7		good luck.


movemm:				"Get main mem lossage parms
	lda	U|core_add
	ldq	U|temp		abcd etc
	staq	sp|binary_buffer+mmdam_msg.addr	"ctrltag immediately follows addr
	tra	0,7

	even
devadd_to_20:
	lda	devadd
	sta	arg+20

devadd_to_buf20:
	lda	U|devadd
	sta	sp|binary_buffer+20
	tra	0,7
"
covert_audit_info:
	mlr	(),(pr)			" zero all first
	desc9a	0,0
	desc9a	sp|binary_buffer,4*audit_head_size

	bool	period,056000

	scm	(pr),(du)			" take apart process_group_id
	desc9a	U|arg,32
	desc9a	period,1			" period
	arg	sp|binary_buffer

	lda	sp|binary_buffer		" lth of person
	mlr	(pr,rl),(pr),fill(040)
	desc9a	U|arg,al
	desc9a	sp|binary_buffer+audit_head.person,22

	ada	1,dl			" pt at project
	scm	(pr,al),(du)
	desc9a	U|arg,32
	desc9a	period,1			" period
	arg	sp|binary_buffer

	lxl3	sp|binary_buffer
	mlr	(pr,rl,al),(pr),fill(040)
	desc9a	U|arg,x3
	desc9a	sp|binary_buffer+audit_head.person+5(2),9

	ada	sp|binary_buffer
	ada	1,dl
	mlr	(pr,al),(pr)
	desc9a	U|arg,1
	desc9a	sp|binary_buffer+audit_head.person+7(3),1

	lda	ARH_NO_PROXY,dl
	als	audit_head.type_shift-audit_head.version_shift
	ada	ACCESS_AUDIT_HEADER_VERSION_3,dl
	als	audit_head.version_shift
	ora	audit_head.subj_process,dl
	sta	sp|binary_buffer+audit_head.version

	lda	sst$seg_state_chg_operation
	sta	sp|binary_buffer+audit_head.operation_code

	lda	audit_event_flags.grant+audit_event_flags.cc_10_100,du
	sta	sp|binary_buffer+audit_head.event_flags

	lda	pds$process_id
	sta	sp|binary_buffer+audit_head.process_id

	ldaq	pds$access_authorization
	staq	sp|binary_buffer+audit_head.authorization
	staq	sp|binary_buffer+audit_head.max_authorization	" pds$max_auth is not wired
	tra	0,7
"
" " " " " " " " " " " " " " " " " " " "
"
"	constants and descriptors
"
" " " " " " " " " " " " " " " " " " " "

fx:	vfd	1/1,6/fixed,1/0,4/0,12/0,12/35
ptrd:	vfd	1/1,6/ptr,1/0,4/0,24/0

	equ	ptr,13
	equ	fixed,1
	equ	char,21
	equ	bit,19
"
	include	access_audit_eventflags
	include	access_audit_bin_header
	include	aste
	include	cmp
	include	page_info
	include	page_regs
	include	pvte
	include	pxss_page_stack
	include	stack_frame
	include	stack_header
	include	syserr_constants
	equ	SYSERR_COVERT_CHANNEL_LOG,SYSERR_COVERT_CHANNEL+LOG
	include	syserr_mmdam_msg
	include	segdamage_msg
	include	syserr_binary_def
	equ	SB_covert_seg_state,SB_access_audit
	equ	SBL_covert_seg_state,audit_head_size
"
"BEGIN MESSAGE DOCUMENTATION

"	Message:
"	device_control: invalid pvtx XX

"	S:	$crash

"	T:	$run

"	M:	An invalid PVT index XX was found by device control,
"	or an invalid device type appeared in the PVT entry of that index.
"	$err

"	A:	$recover


"	Message:
"	free_store: out of room in hardcore partition.

"	S:	$crash

"	T:	$run

"	M:	During bootload, the PART HC on the RLV became full.
"	$err

"	A:	$recover
"	It may be necessary to boot with another tape.
"	If this error occurs with a new version of the system boot tape,
"	the system programming staff may determine that the size of the
"	hardcore partition must be increased by using the
"	rebuild_disk command on a copy of the RPV.


"	Message:
"	page_fault: Zeroing page on DSKX_NN{S}

"	S:	$info

"	T:	$run

"	M:	A segment residing on DSKX_NN{S}
"	has been damaged due to a device error.
"	The segment damaged switch is set and a page of zeros is introduced
"	into the segment.
"	Subsequent user processes attempting to use this segment will
"	receive an error indication.
"	Binary information identifying the damaged segment is encoded into
"	this message for subsequent automatic processing. The pathname
"	of the damaged segment will appear in a message in the answering
"	service log, bearing the syserr_log sequence number of this
"	message, shortly after this message occurs.

"	A: Attempt to identify the damaged segment, and
"	inform its owner.


"	Message:
"	page_fault: fatal error at loc AAAA

"	S:	$crash

"	T:	$run

"	M:	$err

"	A:	$recover


"	Message:
"	page_fault: nonfatal error at loc AAAA

"	S:	$info

"	T:	$run

"	M:	$err
"	The system attempts to keep running.

"	A:	$ignore


"	Message:
"	page_fault: device read not complete DSKX_NN{S} DDDD

"	S:	$crash

"	T:	$run

"	M:	This message is used for program debugging only.

"	A:	$recover
"	$inform


"	Message:
"	page_fault: fatal error in done, ptp ZZZZ

"	S:	$crash

"	T:	$run

"	M:	While posting an I/O completion,
"	the system found a page table pointer of zero,
"	or found that the page was not out of service.
"	$err

"	A:	$recover


"	Message:
"	page_fault: mylock on global lock

"	S:	$crash

"	T:	$run

"	M:	When page_fault attempted to lock the global
"	page control lock, it found it already locked to the same process.
"	$err

"	A:	$recover


"	Message:
"	page_fault: out of main memory

"	S:	$crash

"	T:	$run

"	M:	The page removal algorithm was unable to
"	find a removable page. Incorrect system programmer action,
"	damage to the AST, or an error in the
"	supervisor or the hardware could cause this symptom.

"	A:	$recover


"	Message:
"	page_fault: Reverting page on DSKX_NN{S}

"	S:	$info

"	T:	$run

"	M:	A segment residing on DSKX_NN{S} has had one of its
"	pages reverted to an earlier copy of the same page.  The damaged switch
"	is set.  This can happen due to device error or main memory errors.
"	Subsequent user processes attempting to use this segment
"	will receive an error indication.  Binary information
"	identifying the damaged segment is encoded into this message for
"	subsequent automatic processing.  The pathname
"	of the damaged segment will appear in a message in the answering
"	service log, bearing the syserr log sequence number
"	of this message, shortly after this message occurs.

"	A: Attempt to identify the damaged segment and inform its owner.


"	Message:
"	page_fault: Deleting main memory at AAAA, SCU TAG,
"	due to parity errors.

"	S: $beep

"	T: $run

"	M: Due to main memory parity errors, the system is automatically
"	removing a page of main memory from the memory in SCU TAG,
"	preventing further use during this bootload.

"	A: Inform Field Engineering personnel about possible
"	problems with this SCU.


"	Message:
"	evict_page: parity error moving page, frame at AAA, SCU TAG.

"	S: $info

"	T: $run

"	M: A parity error was encountered while moving a page within
"	main memory.  This may occur as part of an attempt to delete that
"	main memory, or use it as an I/O buffer.

"	A: Inform Field Engineering personnel about possible problems
"	with this SCU.


"	Message:
"	evict_page: fatal parity error moving page, frame at AAA, SCU TAG.

"	S: $crash

"	T: $run

"	M: A parity error was encountered while moving a wired page
"	around memory.  The page may not be usable.

"	A: Contact Field Engineering personnel about possible
"	problems with SCU TAG.
"	$recover


"	Message:
"	free_store: volmap_seg async error for dskX_NN{S}

"	S:	$crash

"	T:	$run

"	M:	When attempting to write a page of the Volume Map
"	to dskX_NN{S}, the page was found not to be in memory. This
"	probably indicates a software error.

"	A:	$recover


"	Message:
"	free_store: Deposit non-disk address XXXXXXXXXXXX on dskX_NN{S}

"	S:	$crash

"	T:	$run

"	M:	free_store was called to return an address to the free
"	pool for dskX_NN{S}, but the address type was not disk. This probably
"	indicates a software error.

"	A:	$recover


"	Message:
"	free_store: Deposit/withdraw address XXXXXX out of paging region on dskX_NN{S}.

"	S:	$crash

"	T:	$run

"	M:	Address XXXXXX was being deposited to or wtihdrawn from
"	the pool of free addresses for dskX_NN{S}, but the address is not
"	within the Paging Region for the device. This probably indicates
"	a software error.

"	A:	$recover


"	Message:
"	free_store: PVTE/Stock out of synch on dskX_NN{S}. stockp=YYY|YYYYY.

"	S:	$crash

"	T:	$run

"	M:	The PVTE and record stock for dskX_NN{S} do not point to
"	each other. This indicates a hardware or software error.

"	A:	$recover


"	Message:
"	free_store: Invalid call to free_store$deposit_list.

"	S:	$crash

"	T:	$run

"	M:	free_store$deposit_list was called with the wrong
"	number of arguments. This is a software error.

"	A:	$recover


"	Message:
"	free_store: Scavenger STACQ fails on dskX_NN{S}.

"	S:	$crash

"	T:	During a physical volume scavenge of dskX_NN{S}.

"	M:	A STACQ instruction, used to unlock a record address
"	during a volume scavenge, did not operate correctly. This indicates
"	processor or memory malfunction.

"	A:	$recover


"	Message:
"	lock_volmap: STACQ fails on dskX_NN{S}.

"	S:	$crash

"	T:	$run

"	M:	The stacq instruction, used to lock the Volume Map on
"	dskX_NN{S}, did not operate correctly. This indicates processor or
"	memory malfunction.

"	A:	$recover


"	Message:
"	lock_volmap: MYLOCK on volmap lock for dskX_NN{S}.

"	S:	$crash

"	T:	$run

"	M:	A process attempted to lock the Volume Map lock for
"	dskX_NN{S} while already owning the lock. This indicates a software
"	malfunction.

"	A:	$recover


"	Message:
"	stock: deposit zero address.

"	S:	$crash

"	T:	$run

"	M:	An attempt was made to deposit address zero into a record
"	stock. This is an invalid address, and it indicates hardware or
"	software failure.

"	A:	$recover


"	Message:
"	volmap: Volume Map inconsistent on dskX_NN{S}.

"	S:	$crash

"	T:	$run

"	M:	An attempt to withdraw a disk address from the pool of
"	free addresses on dskX_NN{S} failed, although the control structures
"	describing the Volume Map indicated that addresses were available.
"	This indicates hardware or software failure.

"	A:	$recover


"	Message:
"	volmap: Invalid volume map word on dskX_NN{S}.

"	S:	$crash

"	T:	$run

"	M:	An attempt to withdraw a disk address from the pool of
"	free addresses on dskX_NN{S} resulted in finding a volume map word
"	with at least one of bits 0, 33, 34, and 35 on.  These bits are
"	invalid for volume map words.  This indicates hardware or
"	software failure.

"	A:	Perform an ESD.  Reboot the system and perform a
"	volume salvage (not a scavenge) of the disk volume dskX_NN{S}.
"	This may be performed at Initializer ring-1 or ring-4 command
"	level.  Perform the salvage before adding the storage system
"	volume back to the system.  The volume scavenger will not
"	detect volume map words with invalid bits enabled, so the
"	salvager must be used.  Once the salvage is complete, the
"	volume may be added back to the system.


"	Message:
"	volmap: record stock inconsistent on dskX_NN{S}. stockp=YYY|YYYYY.

"	S:	$crash

"	T:	$run

"	M:	An attempt to deposit a record address from the Volume
"	Map to the record stock failed unaccountably. This indicates
"	probably software failure.

"	A:	$recover


"	Message:
"	volmap: Attempt to deposit in-use address YYYYYY on dskX_NN{S}.

"	S:	$info

"	T:	$run

"	M:	An attempt was made to return disk address YYYYYY to the free
"	pool on dskX_NN{S}, but the address was already marked as free. This indicates
"	damage of some sort to the Volume Map. This damage can be repaired
"	by a volume salvage.

"	A:	$inform


"	Message:
"	volmap: Invalid Volume Map address computation for YYYYYY on dskX_NN{S}.

"	S:	$crash

"	T:	$run

"	M:	In attempting to place the disk address YYYYYY into the
"	free pool for dskX_NN{S}, an error occurred in translating the address
"	into a location within the Volume Map.  This indicates a software
"	error.


"	Message:
"	volmap_page: PTL not locked to process.

"	S:	$crash

"	T:	$run

"	M:	An entry in volmap_page was called which required that
"	the Global Page Table lock be held by the calling process. It
"	was not held by that process, indicating software failure.

"	A:	$recover


"	Message:
"	volmap_page: Invalid async state on dskX_NN{S}.

"	S:	$crash

"	T:	$run

"	M:	An inconsistency was discovered in the asynchronous
"	update state of the Volume Map on dskX_NN{S}. This is likely a
"	software error.

"	A:	$recover


"	Message:
"	volmap_page: Async error for dskX_NN{S}.

"	S:	$crash

"	T:	$run

"	M:	When attempting to write an updated page of the Volume Map
"	on dskX_NN{S}, it was found not to be in memory. This indicates a
"	software failure.

"	A:	$recover

"	Message:
"	volmap_page: Invalid call.

"	S:	$crash

"	T:	$run

"	M:	One of the conditions required for a call to a volmap_page
"	entry point was not present. This indicates a software failure in
"	the caller of volmap_page.

"	A:	$recover


"	Message:
"	volmap_page: Unrecoverable I/O error on Volmap page M of dskX_NN{S}. Addresses lost.

"	S:	$beep

"	T:	$run

"	M:	There was an unrecoverable I/O on a page of the Volume Map,
"	which describes free records on the volume. As a result, all free
"	records described by that page of the Volume Map have been lost.

"	A:	It may be possible to recover the lost addresses by a 
"	volume salvage. However, a hard device error will prevent the volume
"	salvage from succeeding. In this case, it will be necessary
"	to recover the volume to a good pack.


"	Message:
"	volmap_page: Async state on dskX_NN{S} changed to S on poll.

"	S:	$log

"	T:	$run

"	M:	An interrupt for a volume map I/O was lost and was
"	recovered by a periodic polling routine.

"	A:	$ignore


"	Message:
"	page_synch: Out of free entries in dm_journal_seg_.

"	T:	$run

"	S:	$crash

"	M:	$err

"	A:	$recover


"	Message:
"	page_synch: dm_journal_seg_ inconsistent.

"	T:	$run

"	S:	$crash

"	M:	$err

"	A:	$recover


"	Message:
"	AUDIT (page_fault): GRANTED excessive segment state changes 
"	(Moderate_cc) for PROCESS_GROUP_ID (AUTHORIZATION)

"	T:	$run

"	S:	$security_log

"	M:	An attempt to use the modification of various segment
"         attributes as a covert channel was detected.

"	END MESSAGE DOCUMENTATION

	end
