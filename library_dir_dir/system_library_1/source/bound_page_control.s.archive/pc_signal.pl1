/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */
/* format: style3 */
pc_signal:
     proc (Error_Type, Astep, Ptwp);

/*  Program to build structures for the signaller when a signallable error
    is detected by Page Control.

    Written October 1982 by J. Bongiovanni
*/

/*  Parameter  */

dcl	Error_Type	fixed bin parameter;	/* Index of error */
dcl	Astep		ptr unaligned parameter;	/* -> ASTE of interest */
dcl	Ptwp		ptr unaligned parameter;	/* -> PTW of interest */

/*  Automatic  */

dcl	error_type	fixed bin;
dcl	1 page_fault_error_code
			aligned,			/* Error code hack until info structure implemented */
	  2 add		bit (18) unaligned,
	  2 add_type	bit (4) unaligned,
	  2 pad		bit (5) unaligned,
	  2 pvtx		fixed bin (9) unsigned unaligned;
dcl	ptwp		ptr;

/*  Static  */

dcl	SIGNAL_NAME	(0:3) char (32) internal static options (constant)
			init ("record_quota_overflow", "page_fault_error", "invalid_page_fault",
			"invalid_page_error");

/*  Based  */

dcl	1 Aste		aligned like aste based (Astep);
dcl	1 Ptw		aligned like ptw based (Ptwp);

/*  External  */

dcl	1 pds$condition_name
			aligned external,
	  2 len		fixed bin (8) unaligned,
	  2 chars		char (21) unaligned;
dcl	1 pds$page_fault_data
			aligned like mc external;
dcl	1 pds$signal_data	aligned like mc external;
dcl	sst$rqover	fixed bin (35) external;

/*  Builtin  */

dcl	bin		builtin;
dcl	bit		builtin;
dcl	length		builtin;
dcl	rtrim		builtin;
dcl	unspec		builtin;


%page;
	if (Error_Type < 0) | (Error_Type > PAGE_ERROR_MAXTYPE)
	then error_type = PAGE_ERROR_INVERROR;
	else error_type = Error_Type;

	unspec (pds$signal_data) = unspec (pds$page_fault_data);

	pds$condition_name.len = length (rtrim (SIGNAL_NAME (error_type)));
	pds$condition_name.chars = rtrim (SIGNAL_NAME (error_type));

	goto TYPE_SPECIFIC (error_type);

TYPE_SPECIFIC (0):					/* record quota overflow */
	pds$signal_data.fim_temp.fcode = bit (bin (record_quota_overflow_sct_index, 17), 17);
	pds$signal_data.errcode = sst$rqover;
	return;

TYPE_SPECIFIC (1):					/* page I/O error */
	pds$signal_data.fim_temp.fcode = bit (bin (page_fault_error_sct_index, 17), 17);
	unspec (page_fault_error_code) = ""b;
	page_fault_error_code.add = Ptw.add;
	page_fault_error_code.add_type = Ptw.add_type;
	page_fault_error_code.pvtx = Aste.pvtx;
	unspec (pds$signal_data.errcode) = unspec (page_fault_error_code);

	return;

TYPE_SPECIFIC (2):					/* bad machine conditions */
TYPE_SPECIFIC (3):					/* Invalid error type */
	return;

/* format: off */
%page;  %include aste;
%page;  %include mc;
%page;  %include page_error_types;
%page;  %include ptw;
%page;  %include static_handlers;
        
end pc_signal;
