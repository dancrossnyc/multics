/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



quotaw: proc;

/* RE Mullen, v2pl1, oct 1973 */
/* Modified by Bernard Greenberg, 04/28/75 for New Storage System */
/* Modified by Bernard Greenberg, 02/18/77 for online quota reconstructor */
/* Modified by David Spector, 02/18/79 for 18 bit quota */
/* Modified by Keith Loepere, 12/13/84 to count dirs pages against its own dir quota. */

dcl (a_astep, a_astep2) ptr,
     a_t fixed bin (1),
    (csw, a_csw) fixed bin (2);
dcl  a_q fixed bin (18);
dcl  a_code fixed bin (17);
dcl  a_uc fixed bin (18);

dcl (addr, fixed, ptr) builtin;

dcl (astpp, astep1, astep2, ptwp) ptr,
    (uchange, tchange, qchange, quota) fixed bin (34),
     code fixed bin,
    (tsw, ct, nt, qt) fixed bin (1),
    (a_osu, osu, a_odu, odu, a_nsu, nsu, a_ndu, ndu) fixed bin (34),
     new_quota fixed bin (34),
     pcsw bit (1),
     a_qt bit (1) aligned,
     pds$processid ext bit (36),
     pds$quota_inhib ext fixed bin (17),
     oldmask fixed bin (71),
     privileged_mode_ut$lock_ptl ext entry (fixed bin (71), ptr),
     privileged_mode_ut$unlock_ptl ext entry (fixed bin (71), ptr);

	% include aste;

declare sst$rqover fixed bin (35) external static;
declare sst_seg$ external static;
declare sstp pointer;

/* entry to changed used records for an active account */

cu:	entry (a_astep, a_uc, a_qt, a_csw, a_code);
	csw = a_csw;				/* check switch: = 1 check only, = 0 check and make change */
						/* 2 = make change and dont complain */
	pcsw = "0"b;
	go to cum;
cu_for_pc: entry (a_astep, a_uc, a_qt);
						/* Special side-door for pc$truncate */
	pcsw = "1"b;
	csw = 0;					/* Do it */
cum:


	astep = a_astep;				/* ptr to AST entry of dir in which file resides */
	uchange = a_uc;				/* change to used */
	qt = fixed (a_qt, 1);			/* quota type, 0 = segs, 1 = dirs */
	code = 0;

	sstp = addr (sst_seg$);
	if ^pcsw then call privileged_mode_ut$lock_ptl (oldmask, ptwp); /* lock, switch_stack and mask */

cu1:	astpp = astep;
cu2:	if csw ^= 1
	then astpp -> aste.used (qt) = astpp -> aste.used (qt) + uchange;
	if csw = 2 then do;
	     if uchange > 0 & astpp -> aste.used (qt) > aste.quota (qt)
	     then code = sst$rqover;
	     go to finish;
	end;
	if astpp -> aste.tqsw (qt) = "0"b then do;
	     astpp = ptr (sstp, astpp -> aste.par_astep); /* loop over parents */
	     go to cu2;
	end;
	if pds$quota_inhib ^= 0
	then go to finish;				/* Patch for reloader, etc */
	if code ^= 0
	then go to finish;				/* second time thru the loop */
	if uchange <= 0 then go to finish;		/* don't check quota when decreasing */
	if csw = 1
	then tchange = uchange;			/* change has not been added in */
	else tchange = 0;				/* change has been added in */
	if astpp -> aste.quota (qt) < (astpp -> aste.used (qt) + tchange)
	then do;					/* change is not ok */
	     uchange = -uchange;			/* prepare to remove change */
	     code = sst$rqover;
	     if csw = 0
	     then go to cu1;			/* loop thru and undo change if any */
	end;

finish:	if pcsw then return;
	call privileged_mode_ut$unlock_ptl (oldmask, ptwp); /* unlock, switch back and unmask */
	a_code = code;
	return;


/* * * * * * * * * * * * * * * * * * * * * * * * * */

/* entry to set a quota and change the terminal state of an active AST */

sq:	entry (a_astep, a_q, a_qt, a_t);


	astep = a_astep;				/* ptr to ast entry to set quota on */
	quota = a_q;				/* new quota */
	qt = fixed (a_qt, 1);
	tsw = a_t;				/* = 1 if quota is being changed from non-term to term */
						/* = 0 if quota is being changed from term to non-term */
	sstp = addr (sst_seg$);

	call privileged_mode_ut$lock_ptl (oldmask, ptwp); /* mask, switch stack and lock */

	if tsw = 1
	then uchange = astep -> aste.used (qt);		/* used records that will no longer be carried up */
	else uchange = -astep -> aste.used (qt);	/* used records will be added sup acct */
	astpp = astep;
sq1:	astpp = ptr (sstp, astpp -> aste.par_astep);	/* loop to find terminal account */
	astpp -> aste.used (qt) = astpp -> aste.used (qt) - uchange; /* subtract used from parents */
	if astpp -> aste.tqsw (qt) = "0"b
	then go to sq1;

	astep -> aste.quota (qt) = quota;
	astep -> aste.tqsw (qt) = (tsw = 1);

	call privileged_mode_ut$unlock_ptl (oldmask, ptwp); /* unlock, switch back and unmask */

	return;

/* * * * * * * * * * * * * * * * * * */

/* entry to move quota from parent ast (ast1) to inferior ast (ast2) */

mq:	entry (a_astep, a_astep2, a_q, a_qt, a_code);


	astep1 = a_astep;				/* ptr to parent ast entry */
	astep2 = a_astep2;				/* ptr to target ast entry */
	qchange = a_q;				/* amount of quota to be moved from ast1 to ast2 */
	qt = fixed (a_qt, 1);
	code = 0;
	sstp = addr (sst_seg$);

	call privileged_mode_ut$lock_ptl (oldmask, ptwp); /* mask, switch stack and lock */

	ct = fixed (astep2 -> aste.tqsw (qt), 1);	/* ct = 1 if ast2 currently has term quota */
	if astep2 -> aste.quota (qt) + qchange ^= 0
	then do;					/* ast2 will have terminal quota */
	     nt = 1;
	     if astep2 -> aste.quota (qt) + qchange < astep2 -> aste.used (qt)
	     then go to error;
						/* new quota must cover used */
	     if ct = 0
	     then uchange = -astep2 -> aste.used (qt);	/* subtract used from current terminal quota */
	     else uchange = 0;			/* no change from terminal state */
	end;
	else do;					/* ast2 will not have terminal quota */
	     nt = 0;
	     if ct = 1
	     then uchange = astep2 -> aste.used (qt);	/* add used into new terminal quota */
	     else uchange = 0;
	end;
	new_quota = astep1 -> aste.quota (qt) - qchange;
	if new_quota <= 0 then go to error;		/* Insure no zero terminal quota */
	if new_quota < astep1 -> aste.used (qt)+uchange then go to error;
	astep1 -> aste.quota (qt) = new_quota;		/* Change quota */
	astep1 -> aste.used (qt) = astep1 -> aste.used (qt)+uchange; /* change parent used */
	astep2 -> aste.quota (qt) = astep2 -> aste.quota (qt)+qchange; /* change target quota */
	astep2 -> aste.tqsw (qt) = (nt = 1);

mqfinish:
	call privileged_mode_ut$unlock_ptl (oldmask, ptwp); /* unlock, switch back and unmask */

	a_code = code;
	return;

error:	code = sst$rqover;
	go to mqfinish;

/* * * * * * * * * * * * * * * * * * * * * * * * * */

rvq:	entry (a_astep, a_osu, a_odu, a_nsu, a_ndu);

/*	Entry to determine active inferior and current active quota totals for revalidator */

	astep = a_astep;

	sstp = addr (sst_seg$);

	call privileged_mode_ut$lock_ptl (oldmask, ptwp); /* mask, lock */

	osu = aste.used (0);
	odu = aste.used (1);			/* Copy current, incorrect totals */
	nsu = 0;					/* Zero totals to be accumulated */
	ndu = fixed (aste.records, 9);		/* dirs records count towards itself */

	do astep = ptr (sstp, aste.infp) repeat ptr (sstp, aste.infl) while (astep ^= sstp);
						/* Map over inferiors */
	     if aste.dirsw then do;
		if ^aste.tqsw (0) then nsu = nsu + aste.used (0); /* Add inferior dir totals */
		if ^aste.tqsw (1) then ndu = ndu + aste.used (1);	/* records of dir already counted in quota used */
	     end;
	     else nsu = nsu + fixed (aste.records, 9);	/* Account to right place */
	end;

	call privileged_mode_ut$unlock_ptl (oldmask, ptwp);

	a_osu = osu;				/* Copy out answers */
	a_odu = odu;
	a_nsu = nsu;
	a_ndu = ndu;

	return;
     end quotaw;
