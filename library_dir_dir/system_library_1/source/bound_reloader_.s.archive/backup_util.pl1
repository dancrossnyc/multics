/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* Utility procedure for backup reloader. */
backup_util: proc (dname, ename);

/* Created by R H Campbell. */
/* Modified 2 April 1970, R H Campbell. */
/* Modified 21 October 1970, R. J. Feiertag to scrunch ring brackets. */
/* modified on 12.11.72 by A. Downing to increase the size of (name_area) */
/* modified by Kobziar on 11-20-73 to not print err for obsolete CACLs */
/* last modified by Kobziar 10-21-74 to add access_mode arg to $build_tree call */
/* last modified by R. Bratt 7-18-75 to remove pre 18-0 dinosaurs */
/* MCR 4310 add missing options to map 01/28/80 S. Herbst */
/* Modified: 17 November 1980 by G. Palter to allow backup_util$add_names to be called with other than the primary name */
/* obsolete and useless $replace_acl entry removed 5/3/82 BIM */

dcl (dname character (168),				/* directory path name */
     ename character (32)) aligned;			/* entry name */


dcl (i, j, k, l) fixed bin,				/* Temporary storage. */
     a_code fixed bin,				/* return status code */
     code fixed bin,				/* file system error code */
     access_class bit (72) aligned,			/* access_class of path */
     esw fixed bin,					/* Entry switch */
     area_ptr ptr,					/* ptr to system_free_area */
     ix pointer;					/* Pointer to array element. */

dcl (error_table_$moderr, error_table_$user_not_found, error_table_$nonamerr,
     error_table_$logical_volume_not_connected, error_table_$vtoce_connection_fail,
     error_table_$logical_volume_not_defined,
     error_table_$noentry, error_table_$bad_ring_brackets, error_table_$incorrect_access, error_table_$no_info,
     error_table_$fulldir, error_table_$segnamedup, error_table_$namedup, error_table_$safety_sw_on,
     error_table_$copy_sw_on) fixed bin ext;

dcl  init static bit (1) initial ("1"b),		/* Flag to cause static initialization. */
     group_id static character (32) aligned;		/* Our name.project.tag. */

dcl 1 name (1) based (np) aligned,
    2 size bit (17),
    2 string character (32);

dcl 1 stat_area,					/* structure returned by status_ for get_real_name */
    2 (pad1 bit (18),
     nrp bit (18),
     pad2 bit (108)) unaligned;

dcl  names (1) char (32) based;			/* primary entry name */

dcl (oldp, newp) ptr,				/* pathnames for get_primary name */
    (oldn based (oldp), newn based (newp)) char (168),
     newl fixed bin;				/* length of revised pathname */

dcl (dir, work) char (168), ent char (32);		/* workspace */

dcl  backup_map_$fs_error_line entry (fixed bin, char (*) aligned, char (168) aligned, char (32) aligned),
     backup_map_$name_line entry (pointer, fixed binary),
     backup_load_dir_list$build_tree entry (char (*) aligned, char (*) aligned, fixed bin,
     fixed bin (24), fixed bin (2), char (*) aligned, bit (72) aligned, fixed bin),
    (backup_util$delete_name, backup_util$give_access) entry (char (168) aligned, char (32) aligned, fixed bin);

dcl  get_group_id_ entry returns (character (32)),
     get_system_free_area_ entry returns (ptr),
     hcs_$add_acl_entries entry (char (*) aligned, char (*) aligned, ptr, fixed bin, fixed bin),
     hcs_$add_dir_acl_entries entry (char (*) aligned, char (*) aligned, ptr, fixed bin, fixed bin),
     hcs_$status_minf entry (char (*) aligned, char (*) aligned, fixed bin (1), fixed bin (2), fixed bin (24), fixed bin),
     hcs_$chname_file entry (char (*) aligned, char (*) aligned, char (*) aligned, char (*) aligned, fixed binary),
    (hcs_$del_dir_tree, hcs_$delentry_file) entry (char (*) aligned, char (*) aligned, fixed binary),
     hcs_$status_ entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin),
     hcs_$get_access_class entry (char (*) aligned, char (*) aligned, bit (72) aligned, fixed bin),
     hcs_$set_copysw entry (char (*) aligned, char (*) aligned, bit (1), fixed bin),
     hcs_$set_safety_sw entry (char (*) aligned, char (*) aligned, bit (1), fixed bin);


dcl (addr, empty, fixed, index, length, min, pointer, substr, rtrim) builtin;

%include bk_ss_;
%include acl_structures;
  
add_names: entry (dname, ename, np, nnames, list_names);	/* Entry to add all names to entry. */

dcl  np ptr,					/* Pointer to names. */
     nnames fixed bin,				/* Number of names. */
     list_names bit (1);				/* Flag to enable writing of names. */
	do i = 1 to nnames;
	     ix = addr (np -> name (i));		/* Get pointer to this array element. */
	     if (ename ^= ix -> name(1).string) then do;	/* not added yet */
		if bk_ss_$no_reload then go to print_name;   /* Not reloading so print the name only */
add:		call hcs_$chname_file (dname, ename, "", ix -> name (1).string, code); /* Try to add the name. */
		if code = error_table_$namedup then do;	/* Was name already in directory? */
		     call backup_util$delete_name (dname, ix -> name (1).string, code);    /* Try to remove the name. */
		     if code = 0 then go to add;	/* Removal successful? */
		end;				/* Any errors here will be reported by delete_name. */
		else if code = error_table_$segnamedup then; /* Leave name already on branch */
		else if code ^= 0 then		/* If unsuccessful, don't write name line. */
		     call backup_map_$fs_error_line (code, "chname_file in add_names", dname, ix -> name (1).string);
		else if bk_ss_$mapsw & list_names then	/* Write the name if map desired. */
print_name:	     call backup_map_$name_line (addr (ix -> name (1).string), fixed (ix -> name (1).size, 17));
	     end;
	end;
	return;					/* Return to caller. */


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
delete_name: entry (dname, ename, a_code);		/* Entry to remove offending name from directory. */
	call hcs_$chname_file (dname, ename, ename, "", code); /* Try to remove the name from its entry. */
	if code = error_table_$nonamerr then do;	/* Is it the last name on its entry? */
delete:	     call hcs_$delentry_file (dname, ename, code); /* try simple delete first */
	     if code = error_table_$moderr | code = error_table_$incorrect_access then do; /* Do we have right access? */
get_access:	call backup_util$give_access (dname, ename, code); /* Try to change it. */
		if code = 0 then go to delete;	/* try again if changed successfully */
	     end;
	     else if code = error_table_$safety_sw_on then do; /* Turn off the safety switch, else if necessary. */
		call hcs_$set_safety_sw (dname, ename, "0"b, code);
		if code = 0 then go to delete;	/* Try again if successful. */
		call backup_map_$fs_error_line (code, "backup_util$delete_name", dname, ename);
	     end;
	     else if code = error_table_$copy_sw_on then do; /* Turn off copy switch */
		call hcs_$set_copysw (dname, ename, "0"b, code);
		if code = 0 then go to delete;
		call backup_map_$fs_error_line (code, "backup_util$delete_name", dname, ename);
	     end;
	     else if code = error_table_$user_not_found then go to get_access; /* Were we on the ACL at all? */
	     else if code = error_table_$fulldir then do; /* was it a non-empty directory? */
		call hcs_$del_dir_tree (dname, ename, code); /* yes, delete inferior entries */
		if code = 0 then go to delete;
		call backup_map_$fs_error_line (code, "backup_util$delete_name", dname, ename);
	     end;
	     else if code ^= 0 then			/* If unsuccessful, give error comment. */
		call backup_map_$fs_error_line (code, "backup_util$delete_name", dname, ename);
	end;
	else if code ^= 0 then			/* If unexpected error, give error comment. */
	     call backup_map_$fs_error_line (code, "backup_util$delete_name", dname, ename);
	a_code = code;				/* return status */
	return;					/* Return to caller. */


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


give_access: entry (dname, ename, a_code);		/* Entry to give ourselves access to entry. */

dcl  seg_aclp ptr int static,
     dir_aclp ptr int static;

dcl 1 seg_acl (1) aligned like segment_acl_entry int static;
dcl 1 dir_acl (1) aligned like directory_acl_entry int static;

dcl  type fixed bin (2),
     bitcnt fixed bin (24);

	if init then do;				/* Must we initialize? */
	     group_id = get_group_id_ ();		/* Get our ID code. */
	     seg_acl.access_name (1),
		dir_acl.access_name (1) = group_id;
	     seg_acl.mode = "111"b;
	     seg_acl.extended_mode = ""b;
	     dir_acl.mode = "111"b;
	     seg_aclp = addr (seg_acl);
	     dir_aclp = addr (dir_acl);
	     init = ""b;				/* Clear flag. */
	end;
	call hcs_$status_minf (dname, ename, 1, type, bitcnt, code);
	if code ^= 0 then
	     if code = error_table_$logical_volume_not_defined then code = 0;
	     else if code = error_table_$logical_volume_not_connected then code = 0;
	     else if code = error_table_$vtoce_connection_fail then code = 0;
	     else go to ret;
	if type = 0 then go to ret;
	if type = 1 then call hcs_$add_acl_entries (dname, ename, seg_aclp, 1, code); /* put us on ACL */
	else call hcs_$add_dir_acl_entries (dname, ename, dir_aclp, 1, code);

	if code = error_table_$no_info | code = error_table_$incorrect_access then do;
	     call hcs_$get_access_class (dname, "", access_class, code);
	     if code ^= 0 then access_class = "0"b;	/* try with this value */
	     call backup_load_dir_list$build_tree (dname, "", 3, 0, 0, "", access_class, code);
	end;					/* If we cannot get access, then recurse. */
ret:	a_code = code;				/* Return status */
	return;					/* Return to caller. */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */




get_real_name: entry (oldp, newp, newl, a_code);		/* entry to get a "more proper" version of a pathname */
	l = 0;					/* l is current length of output pathname */
	work = "";				/* new pathname built here, level by level */
	i = index (oldn, " ");			/* determine length of old pathname */
	if i = 0 then i = 169;			/* it may be the full 168 */
	j = 1;					/* current position on input pathname */
	do while (j < i - 1);			/* scan entire input name */
	     k = index (substr (oldn, j), ">");		/* find next directory level */
	     if k = 0 then go to done;		/* if there isn't one, scan is finished */
	     dir = substr (oldn, 1, j + k - 2);		/* save directories so far seen */
	     j = j + k;				/* move along input */
	     if j = 2 then dir = ">";			/* status wants a trailing ">" only for the root */
	     k = index (substr (oldn, j), ">");		/* next level is entry name for this level */
	     if k = 0 then ent = substr (oldn, j, i - j); /* if there isn't another level, use remainder of input */
	     else ent = substr (oldn, j, k - 1);	/* otherwise characters up to next ">" */
	     area_ptr = get_system_free_area_ ();
	     call hcs_$status_ (dir, ent, 1, addr (stat_area), area_ptr, code); /* get the names of this entity */
	     if code ^= 0 then
		if code = error_table_$logical_volume_not_connected then code = 0;
		else if code = error_table_$logical_volume_not_defined then code = 0;
		else if code = error_table_$vtoce_connection_fail then code = 0;
		else do;				/* if something was wrong */
		     if code ^= error_table_$noentry then go to grn_ret; /* it had better be entry not found */
		     work = substr (work, 1, l) || ">" || substr (oldn, j, i - j); /* it was, tack on unfound part of input */
		     l = l + i - j + 1;		/* compute total length of result */
		     go to done;			/* job is done */
		end;
	     work = substr (work, 1, l) || ">" || pointer (area_ptr, stat_area.nrp) -> names (1);
	     l = index (work, " ") - 1;		/* new length with new primary name appended */
	end;
done:	code = 0;					/* return zero if nothing was done */
	newl = l;					/* set the length argument */
	if oldn = work then go to grn_ret;		/* see if anything useful was accomplished */
	if l = 0 then go to grn_ret;			/* pathname didn't have any ">"s */
	newn = work;				/* hand over the new pathname */
	code = 1;					/* and say we did so */
grn_ret:	a_code = code;				/* Return status code */
	return;


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


idline:	entry (rfile, rdate, linep, n);		/* entry to format retriever's signature line */

dcl (rfile, rdate) char (*),				/* retrieval control file, retriever version */
     linep ptr,
     line char (300) based (linep),			/* output line */
     n fixed bin;					/* its length */
	call append (rtrim (bk_ss_$myname));		/* insert our name in id line */
	call append ((rdate));			/* add version of loader */
	if rfile ^= "" then call append (rtrim (rfile));	/* control file to be used */
	call append ("map");			/* Report map option setting */
	if bk_ss_$quotasw then call append ("quota");	/* Report setting of quota restoration switch. */
	else call append ("noquota");
	if bk_ss_$onlysw then call append ("first");	/* Report satisfaction criterion */
	else call append ("last");
	if bk_ss_$trimsw then call append ("trim");	/* Report pruning option setting. */
	else call append ("notrim");
	if bk_ss_$debugsw then call append ("debug");	/* Report debug mode setting. */
	if bk_ss_$dir_trim then call append ("dir_trim");	/* for reload system release */
	if bk_ss_$err_onlinesw then call append ("error_on");
	if bk_ss_$ignore_dates then call append ("ignore_dates");  /* for reload system release */
	if bk_ss_$no_primary then call append ("noprimary");  /* do not use primary pathnames */
	if bk_ss_$no_reload then call append ("noreload");  /* testing reloader */
	if bk_ss_$no_setlvid then call append ("nosetlvid");  /* don't set logical voilume id */
	if bk_ss_$qchecksw then call append ("qcheck");	/* check quotas */
	else call append ("noqcheck");		/* default */
	return;


append:	procedure (string);				/* Append string to identification line */

dcl  string character (*) aligned;			/* What to append. */
	     if n < length (line) then do;		/* Is there room in buffer? */
		n = n + 1;			/* Count it. */
		substr (line, n, 1) = " ";		/* Prepend a blank. */
		i = min (length (line) - n, length (string)); /* Don't overflow. */
		substr (line, n + 1, i) = string;	/* Append this string. */
		n = n + i;			/* Count length. */
	     end;
	end append;

     end backup_util;
