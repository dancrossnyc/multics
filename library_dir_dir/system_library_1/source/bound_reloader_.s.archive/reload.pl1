/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */
%;						/* Driver for mload procedure. */
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

reload:						/* Created 21 May 1969, R H Campbell. */
     procedure;					/* Modified 15 March 1970, R H Campbell. */
						/* Last mod by Kobziar, 1 May 75 to add system_release entry */
/* -dprint and -no_dprint added 03/19/80 S. Herbst */
/* Changed dprinting to see -ds, -he, and -rqt 12/01/81 S. Herbst */
/* Changed to dprint -no_endpage since map is already page-formatted 01/21/82 S. Herbst */
/* Updated dprint_defaults structure to reflect latest dprint_arg.incl.pl1 04/01/85 Steve Herbst */


/****^  HISTORY COMMENTS:
  1) change(87-05-10,Gilcrease), approve(87-05-13,MCR7686),
     audit(88-02-01,Farley), install(88-02-02,MR12.2-1019):
     Updated to use version 9 of dprint_msg structure.
  2) change(88-10-27,Brunelle), approve(88-10-27,MCR7911),
     audit(88-10-18,Wallman), install(88-10-28,MR12.2-1199):
     Upgraded to use new version of dprint_args structure.
                                                   END HISTORY COMMENTS */



dcl (cold, complete, print_map, array) bit (1) init ("0"b); /* Flags to remember mode of operation. */
dcl  map_name char (64),				/* The reload map segment name. */
     arg_array (20) char (32) aligned;

dcl (dir char (168),
     ent char (32)) aligned,
     rings (3) fixed bin (6),
     error_table_$noarg ext fixed bin,
     error_table_$namedup ext fixed bin;
dcl  device char (8);				/* Device map is attached to. */
dcl  mode char (0);					/* Mode of attachment. */
dcl  tchar char (1) based;				/* Test character */
dcl  mname char (32);
dcl  code fixed bin;				/* Error status code. */
dcl (l, n) fixed bin;				/* Temporary. */
dcl (ap, alp, sp) pointer;				/* Pointer to argument,  IO status string. */
dcl  arg based char (n);
dcl  error_table_$ionmat external fixed bin;		/* Error code from ios_. */
dcl  date_name_ entry (char (*), char (*), char (*), char (*), fixed bin);
dcl  backup_load entry;
dcl  com_err_ entry options (variable),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin),
     cu_$arg_list_ptr entry (pointer),
     bk_arg_reader_$reload_arg_reader entry (fixed bin, pointer, fixed bin),
     bk_arg_reader_$array_arg_reader entry ((20) char (32) aligned, fixed bin),
     dprint_ entry (char(*) aligned, char(*) aligned, ptr, fixed bin),
     expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin),
     hcs_$status_minf entry (char (*) aligned, char (*) aligned, fixed bin (1),
		fixed bin, fixed bin (35), fixed bin),
     hcs_$append_branchx entry (char (*) aligned, char (*) aligned, fixed bin (5), (3) fixed bin (6),
     char (*) aligned, fixed bin (1), fixed bin (1), fixed bin (24), fixed bin),
     hcs_$acl_add1 entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (5),
    (3) fixed bin (6), fixed bin),
     get_group_id_$tag_star returns (char (32) aligned),
     cu_$level_get returns (fixed bin),
    (ioa_, ioa_$rsnnl) entry options (variable),		/* Variable arguments. */
     ios_$attach entry (char (*), char (*), char (*), char (*), bit (72) aligned),
     ios_$detach entry (char (*), char (*), char (*), bit (72) aligned),
     ios_$get_at_entry_ entry (char (*), char (*), char (*), char (*), fixed bin),
     unique_chars_ entry (bit (*) aligned) returns (char (15) aligned);

dcl (addr, max) builtin;

%	include bk_ss_;

%	include io_status;

%	include dprint_arg;

dcl 1 dprint_defaults aligned,			/* argument structure */
    2 version fixed bin init (9),			/* version number of dcl */
    2 copies fixed bin init (1),			/* number of copies wanted */
    2 delete fixed bin init(0),			/* 1=delete after print */
    2 queue fixed bin init(-1),			/* default print queue */
    2 pt_pch fixed bin init (1),			/* 1=print, 2=punch */
    2 notify fixed bin init (0),			/* 1 = notify user when done */
    2 heading char (64) init (""),			/* first page heading */
    2 output_module fixed bin init (1),			/* 1=print, 2=7punch, 3=mcc, 4=raw */
    2 dest char (12) init (""),			/* destination */

/* limit of version 1 structure */

    2 carriage_control,				/* Carriage control flags. */
      3 nep bit (1) unal init ("0"b),			/* TRUE if print thru perf. */
      3 single bit (1) unal init ("0"b),		/* TRUE if ignore FF and VT */
      3 non_edited bit (1) unal init ("0"b),		/* TRUE if printing in non-edited mode */
      3 truncate bit (1) unal init ("0"b),                  /* TRUE if truncating lines at line length */
      3 center_top_label bit (1) unal init ("0"b),	/* TRUE if top label to be centered */
      3 center_bottom_label bit (1) unal init ("0"b),	/* TRUE if bottom label to be centered */
      3 esc bit (1) unal init ("0"b),
      3 no_separator bit (1) unal init ("0"b),
      3 line_nbrs bit (1) unal init ("0"b),
      3 padding bit (27) unal init ((27)"0"b),
    2 pad (30) fixed bin init ((30)0),
    2 forms char (8) init (""),			/* forms required */
    2 lmargin fixed bin init (0),			/* left margin */
    2 line_lth fixed bin init (-1),			/* max line lth */

/* limit of version 2 structure */

    2 class char(8) init (""),			/* obsolete: device class */
    2 page_lth fixed bin init (-1),			/* Paper length arg */

/* limit of version 3 structure */

    2 top_label char(136) init (""),			/* top-of-page label */
    2 bottom_label char(136) init (""),			/* bottom-of-page label */

/* limit of version 4 structure */

    2 bit_count fixed bin (35) init (0),
    2 form_name char (24) init (""),
    2 destination char (24) init (""),
    2 chan_stop_path char (168) init (""),

/* limit of version 5 structure */

    2 request_type char (24) unaligned init (""),	/* default request type */
       2 defer_until_process_termination fixed bin init (0),
				/* 1 = don't process terminates      */
    2 forms_name char (64) unaligned init ("");
/**/
join_reload:
	cold = ""b;				/* Entry for complete reload on "warm" system. */
	print_map = "1"b;				/* Set flags to indicate operation. */
	bk_ss_$myname = "reload";
	go to squo;				/* Go to common code. */
						/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
reload_arg_array: entry (arg_array);
	array = "1"b;				/* set flag */
	goto join_reload;				/* use common code */
						/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * ** * */
system_release: entry;				/* trim everything, tape info overwrites always */
	cold = "0"b;
	print_map = "0"b;
	bk_ss_$myname = "reload";			/* function as a reload */
	bk_ss_$ignore_dates = "1"b;			/* all info on tape gets in */
	bk_ss_$dir_trim = "1"b;			/* directories go too */
	go to squo;
						/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
iload:	entry;					/* For complete (initial) reload on "cold" system. */
	cold = "1"b;				/* Set up flags. */
	print_map = "0"b;				/* .. */
	bk_ss_$myname = "iload";
squo:	bk_ss_$trimsw = "1"b;			/*  Set to trim for reload */
	complete = "1"b;				/* Complete dump wanted */
	bk_ss_$quotasw = "1"b;			/* Allow quota setting on reload */
	go to reset_control;				/* Go start processing. */
						/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
retrieve:	entry;					/* Entry to start retrieve-by-name. */
	cold, complete, print_map = ""b;		/* Set up flags for retrieval. */
	bk_ss_$quotasw = ""b;			/* No quota changing on retrieval */
	bk_ss_$datesw = ""b;			/* Flag to load segment dumped after given date */
	bk_ss_$myname = "retrieve";
	bk_ss_$trimsw = ""b;			/* No trim on retrieve */
reset_control:
	bk_ss_$sub_entry = "0"b;
	bk_ss_$pvname = "";
	bk_ss_$pvsw = "0"b;
	bk_ss_$rname = "";
	bk_ss_$retrievesw = "0"b;
	bk_ss_$rsize = 0;
start:
	n = 1;					/* Set up to read first arg if any */

	if ^complete then do;			/* This is a retrieval */
	     call cu_$arg_ptr (1, ap, n, code);
	     if code ^= 0 then do;			/* arg is required */
		call com_err_ (code, bk_ss_$myname, "Control file path required.");
		go to ended;
	     end;

	     if ap -> tchar = "-" then do;		/* Prepare to call argument reader */
		n = 1;				/* Start with first arg */
		go to arg_reader;
	     end;
	     bk_ss_$rname = ap -> arg;		/* Save retrieval control file name */
	     bk_ss_$retrievesw = "1"b;		/* Flag retrieval */
	     bk_ss_$rsize = n;			/* And length. */

	     n = 2;				/* Set up arg number for arg reader */

	end;

arg_reader:
	bk_ss_$mapsw = "1"b;			/* First set some switches */
	if ^array then do;
	     call cu_$arg_list_ptr (alp);		/* Get a pointer to the argument list */
	     call bk_arg_reader_$reload_arg_reader (n, alp, code);
	end;
	else call bk_arg_reader_$array_arg_reader (arg_array, code);
	if code ^= 0 then if code ^= error_table_$noarg then go to ended;

	if bk_ss_$myname = "retrieve"			/* Is this supposed to be a retrieval */
	then if bk_ss_$retrievesw			/* If this is a retrieval */
	     then call ioa_$rsnnl ("^a.retrieve.map", map_name, l, bk_ss_$rname); /* Construct name using argument. */
	     else do;
		call ioa_ ("No retrieval file argument given");
		go to ended;
	     end;

	else if bk_ss_$debugsw then do;		/* Just debuging or user trying to use this */
	     call date_name_ ("", "", "reload.map", mname, code); /* Make up a map name */
	     if code ^= 0 then do;
		call com_err_ (code, "reload", "Termination on error from date_name_");
		go to ended;
	     end;
	     map_name = mname;			/* Copy map name */
	     l = 32;
	end;

	else do;					/* This is for real */
	     if cold then do;			/* For COLD reload */
		rings (1), rings (2), rings (3) = 7;
		call hcs_$append_branchx (">", "reload_dir", 01011b, rings,
		     (get_group_id_$tag_star ()), 1, 0, 0, code);
		if code ^= 0 then if code ^= error_table_$namedup then go to ended; /* Can it be created? */
		call hcs_$acl_add1 (">", "reload_dir", "*.SysDaemon.*", 01011b, rings, code);
		if code ^= 0 then go to ended;
	     end;
						/* Put map in special directory */
	     call ioa_$rsnnl (">reload_dir>^a.reload.map", map_name, l, unique_chars_ (""b));
	end;

	rings (1), rings (2), rings (3) = max ((cu_$level_get ()), 4);

	call expand_path_ (addr (map_name), l, addr (dir), addr (ent), code);
	call hcs_$append_branchx (dir, ent, 01011b, rings, (get_group_id_$tag_star ()), 0, 0, 0, code);
	if (code = 0) | (code = error_table_$namedup)
	then call hcs_$acl_add1 (dir, ent, "*.SysDaemon.*", 01011b, rings, code);
	sp = addr (status);				/* Set up pointer to status structure. */
	call ios_$attach ("map", "file_", map_name, "w", sp -> status_bits); /* Try to attach the map. */
	if status.code = error_table_$ionmat then do;	/* If name already attached, use it. */
	     if print_map then do;			/* Will we need the name of the map file? */
		call ios_$get_at_entry_ ("map", device, map_name, mode, code); /* Get AT info. */
		if code = 0 then do;		/* OK? */
		     if device ^= "file_" then	/* Is it a file? */
			print_map = ""b;		/* No, we can't print it. */
		end;
		else do;				/* No, gripe. */
		     call com_err_ (code, bk_ss_$myname, "ios_$get_at_entry_ for map");
		     print_map = ""b;		/* We can't print the map. */
		end;
	     end;
	end;
	else if status.code ^= 0 then do;		/* All OK? */
	     call com_err_ (status.code, bk_ss_$myname, "ios_$attach for ^a", map_name);
	     go to ended;				/* Quit. */
	end;

	call backup_load ();			/* Start the loading */

done:	call ios_$detach ("map", "", "", sp -> status_bits); /* Detach the map. */
	if status.code ^= 0 then			/* If not all OK, type comment, but ignore. */
	     call com_err_ (status.code, bk_ss_$myname, "ios_$detach for ^a", map_name);
	if print_map & bk_ss_$dprintsw then do;			/* Can we print the map? */
	     dpap = addr(dprint_arg_buf);
	     dprint_arg_buf = dprint_defaults;
	     dprint_arg.nep = "1"b;			/* -no_endpage since map is already page-formatted */
	     dprint_arg_buf.queue = bk_ss_$dprint_queue;
	     if bk_ss_$dprint_destination_setsw then dprint_arg_buf.destination = bk_ss_$dprint_destination;
	     else dprint_arg_buf.destination = "BACKUP";
	     if bk_ss_$dprint_heading_setsw then dprint_arg_buf.heading = bk_ss_$dprint_heading;
	     else dprint_arg_buf.heading = "RELOAD MAP";
	     if bk_ss_$dprint_request_type_setsw then dprint_arg_buf.request_type = bk_ss_$dprint_request_type;
	     call hcs_$status_minf (dir, ent, 1, 0, dprint_arg_buf.bit_count, code);

	     call dprint_ ( dir, ent, dpap, code );
	     if code ^= 0
		then call com_err_ ( code, bk_ss_$myname, "Unable to dprint map." );
	     end;

ended:	bk_ss_$myname = "";				/* we are no more */
     end reload;
