/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(2018-08-21,Swenson), approve(2018-08-21,MCR10048),
     audit(2018-08-22,GDixon), install(2018-08-27,MR12.6g-0015):
     Added support for volume pools to hierarchy backup commands.
                                                   END HISTORY COMMENTS */

bk_arg_reader_: proc (iac, ialp, ocode);		/* Created by M A Meer in November 1972 */

/* This routine reads and handles the arguments
   *   for all directly callable dumper and reloader modules.
   *
   *  Usage:  dcl bk_arg_reader_ entry (fixed bin, pointer, fixed bin (35));
   *
   *	call bk_arg_reader_ (iac, ialp, ocode);
   *
   *	where
   *
   *	1) iac		is the first argument to be examined (Input).
   *
   *	2) ialp		is a pointer to the argument list (Input).
   *
   *	3) ocode		is a standard status code (Output).
   *
*/
/* -no_primary added 08/03/79 S. Herbst */
/* Error message fixed 01/07/80 S. Herbst */
/* -dprint and -no_dprint added 03/19/80 S. Herbst */
/* -setdtd and -nosetdtd added 07/01/81 S. Herbst */
/* -ds, -he, -q and -rqt added for dprinting maps 12/01/81 S. Herbst */

dcl  MAX_QUEUES fixed bin int static init (4);		/* highest dprint queue number */

dcl (iac, ac, al) fixed bin,
     arg_array (20) char (32) aligned,
    (ocode, code) fixed bin (35),
    (ialp, alp, ap) ptr,
    (entrysw, interval) fixed bin,
    (arg_date, time_now) fixed bin (52),
    (cflag, oflag, rflag, tflag, wflag, pvflag, vpflag, no_vpflag) bit (1) aligned init (""b),
    (got_queue, got_request_type) bit (1) aligned,
    (default_queue, fixed_queue, max_queue) fixed bin,
     i fixed bin,
     buffer char (168),
     generic_type char (32),
     local_rqt char (24),
    (error_table_$argerr, error_table_$badopt, error_table_$badpath, error_table_$noarg) fixed bin (35) ext,
     error_table_$id_not_found fixed bin (35) ext,
     arg char (al) based,
     op char (32),
     op1 char (1);

dcl  dump fixed bin static init (1),
     reload fixed bin static init (2),
     array fixed bin static init (3),
     norm fixed bin static init (0);

dcl  com_err_ entry options (variable),
     clock_ entry (fixed bin (52)),
     convert_date_to_binary_ entry (char (*), fixed bin (52), fixed bin (35)),
     cu_$arg_ptr_rel entry (fixed bin, ptr, fixed bin, fixed bin (35), ptr),
     cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin),
     iod_info_$generic_type entry (char (*), char (32), fixed bin (35)),
     iod_info_$queue_data entry (char (*), fixed bin, fixed bin, fixed bin (35)),
    (index, substr) builtin;

dcl manage_volume_pool_$try_pool_path entry (entry options (variable), char (*), ptr, fixed bin (35));
dcl terminate_file_ entry (ptr, fixed bin(24), bit(*), fixed bin(35));	      

/*  */

/* bk_arg_reader_:  entry(iac, ialp, ocode);		This is the entry which begins here */

	entrysw = norm;				/* regular entry */
	go to common;

dump_arg_reader: entry (iac, ialp, ocode);

	entrysw = dump;				/* read dumper args */
	go to common;

reload_arg_reader: entry (iac, ialp, ocode);

	entrysw = reload;				/* reload entry */
	goto common;

array_arg_reader: entry (arg_array, ocode);

	entrysw = array;
	ac = 0;


common:	ocode = 0;				/* set up and copy args */
	if entrysw ^= array then do;
	     ac = iac - 1;				/* first arg to fetch */
	     alp = ialp;				/* arg list pointer */
	end;
	got_queue, got_request_type = "0"b;
	bk_ss_$pathsw = ""b;			/* initialize the path switch */

start:	ac = ac + 1;				/* get next arg */
	if entrysw ^= array then do;
	     call cu_$arg_ptr_rel (ac, ap, al, code, alp);
	     if code ^= 0 then
		if code = error_table_$noarg then
		     if cflag | oflag | tflag | wflag | rflag | pvflag | vpflag then go to noarg;
		     else do;
			if got_queue | got_request_type then do;
			     if got_request_type then local_rqt = bk_ss_$dprint_request_type;
			     else local_rqt = "printer";
			     call iod_info_$queue_data (local_rqt, default_queue, max_queue, code);
			     if code ^= 0 then do;
				call com_err_ (code, bk_ss_$myname, "Invalid dprint request_type ^a",
				     local_rqt);
				go to err_ret;
			     end;
			     if bk_ss_$dprint_queue > max_queue then fixed_queue = max_queue;
			     else fixed_queue = 0;
			     if fixed_queue ^= 0 then do;
				call com_err_ (0, bk_ss_$myname,
		     "(warning) Specified queue number ^d is invalid for request type ^a; using ^d instead.",
				     bk_ss_$dprint_queue, local_rqt, fixed_queue);
				bk_ss_$dprint_queue = fixed_queue;
			     end;
			end;
			go to ret;
		     end;
		else do;				/* code other than noargs */
		     call com_err_ (code, bk_ss_$myname);
		     go to err_ret;
		end;
	end;
	else do;					/* handle arg array */
	     if arg_array (ac) = "" | arg_array (ac) = " " then goto start; /* skip null args */
	     al = 32;				/* set default */
	     ap = addr (arg_array (ac));
	end;

	if cflag then do;				/* this is a control file name */
	     if al = 0 then go to noarg;
	     if entrysw = dump then			/* this is dumper entry */
		if substr (ap -> arg, al-5, 5) ^= ".dump"
		then bk_ss_$control_name = ap -> arg || ".dump";
		else bk_ss_$control_name = ap -> arg;

	     if entrysw = reload then do;		/* this is a retrieval */
		bk_ss_$retrievesw = "1"b;		/* Let the world know. */
		bk_ss_$qchecksw = "1"b;		/* Don't suspend quotas during retrieve. */
		bk_ss_$rname = ap -> arg;		/* retrieval file name */
		bk_ss_$rsize = al;			/* length of name */
	     end;

	     cflag = ""b;				/* turn off flag */
	     go to start;
	end;

	else if oflag then do;			/* this must be operator name */
	     if al = 0 then go to noarg;
	     else bk_ss_$operator = ap -> arg;
	     oflag = ""b;				/* turn off flag */
	     go to start;
	end;

	else if tflag then do;			/* this must be number of tapes */
	     if al = 0 then bk_ss_$ntapes = 1;		/* default value */
	     else if ap -> arg = "2" then bk_ss_$ntapes = 2;
	     else bk_ss_$ntapes = 1;
	     tflag = ""b;				/* turn off flag */
	     go to start;
	end;

	else if wflag then do;			/* this must be wakeup interval in minutes */
	     if al = 0 then go to noarg;		/* null arg not allowed */
	     interval = cv_dec_check_ ((ap -> arg), code);
	     if code ^= 0 then do;
bad_interval:	call com_err_ (code, bk_ss_$myname, "Interval number ^a", ap -> arg);
		go to err_ret;
	     end;
	     if interval <= 0 then go to bad_interval;
	     if interval > 360 then go to bad_interval;
	     bk_ss_$wakeup_interval = interval * 60000000; /* interval converted to microseconds */
	     wflag = ""b;
	     go to start;
	end;

	else if rflag then do;			/* restart at directory given */
	     if al = 0 then go to noarg;
	     if substr (ap -> arg, 1, 1) ^= ">" then do; /* must be pathname */
		code = error_table_$badpath;
		call com_err_ (code, bk_ss_$myname,
		     "Full path of restart directory required. ^a", ap -> arg);
		go to err_ret;
	     end;
	     bk_ss_$restart_dumpsw = "1"b;
	     bk_ss_$restart_path = ap -> arg;
	     bk_ss_$restart_plen = al;
	     rflag = ""b;				/* reset flag */
	     go to start;
	end;
	else if pvflag then do;			/* physical volume recovery */
	     if al = 0 then goto noarg;		/* like all the rest */
	     bk_ss_$pvsw = "1"b;			/* turn on the switch */
	     bk_ss_$pvname = ap -> arg;		/* set the variable */
	     pvflag = "0"b;
	     goto start;
	end;
          else if vpflag then do;
               call terminate_file_ (bk_ss_$volume_pool_ptr, 0, TERM_FILE_TERM, (0));
	     call manage_volume_pool_$try_pool_path (com_err_, (ap -> arg), bk_ss_$volume_pool_ptr, code);
	     if code ^= 0 then do;
		call com_err_ (code, bk_ss_$myname, "Cannot set up volume pool to ^a", (ap -> arg));
		bk_ss_$volume_pool_ptr = null ();
		go to err_ret;
               end;
	     vpflag = "0"b;
	     goto start;
          end;
          else if no_vpflag then do;
               call terminate_file_ (bk_ss_$volume_pool_ptr, 0, TERM_FILE_TERM, (0));
	     no_vpflag = "0"b;
	     goto start;
          end;
	if al > 0 then do;				/*  ignore null arguments  */
	     op, op1 = ap -> arg;			/* extract first characters for comparison */
	     if op1 = "-" then do;			/* only if leading hyphen */
		op, op1 = substr (ap -> arg, 2);	/* drop leading hyphen */
	     end;


/* PROCESS ARGUMENTS FOR ALL BACKUP ENTRIES */

	     if op = "control" then do;		/* Flag next arg as control file name */
		cflag = "1"b;
		go to start;			/* Get next arg */
	     end;

	     else if op = "operator" then oflag = "1"b;	/* flag next arg as operator name */

	     else if op = "all" then bk_ss_$datesw, bk_ss_$dtdsw = ""b; /* ignore all date criteria */

	     else if op = "debug" then do;		/* disable quota, transparent switches */
		bk_ss_$debugsw = "1"b;		/* in user reload ... */
		bk_ss_$trimsw = ""b;		/* don't trim since will be foverwriting */
	     end;
	     else if op = "nodebug" then bk_ss_$debugsw = ""b; /* no debug, default */

	     else if op = "map" then bk_ss_$mapsw = "1"b; /* output a map */
	     else if op = "nomap" then do;		/* do not output a map */
		bk_ss_$mapsw = ""b;
		bk_ss_$tapesw = "1"b;		/* must have tape or map switch */
	     end;

	     else if op = "brief_map" | op = "bfmap" then bk_ss_$mapsw, bk_ss_$brief_mapsw = "1"b;

	     else if op = "destination" | op = "ds" then do;
		bk_ss_$dprint_destination = get_value ("-destination", 24);
		bk_ss_$dprint_destination_setsw = "1"b;
	     end;

	     else if op = "dprint" | op = "dp" then
		bk_ss_$dprintsw = "1"b;
						/* whether to dprint maps when done */
	     else if op = "header" | op = "he" then do;
		bk_ss_$dprint_heading = get_value ("-header", 64);
		bk_ss_$dprint_heading_setsw = "1"b;
	     end;

	     else if op = "nodprint" | op = "no_dprint" | op = "ndp" then
		bk_ss_$dprintsw = "0"b;

	     else if op = "hold" then bk_ss_$holdsw = "1"b; /* do not dismount */
	     else if op = "nohold" then bk_ss_$holdsw = ""b; /* dismount, default */

	     else if op = "primary" | op = "pri" then bk_ss_$no_primary = "0"b;
						/* whether to use primary pathnames */
	     else if op = "no_primary" | op = "npri" | op = "noprimary" then
		bk_ss_$no_primary = "1"b;

	     else if op = "pvname" then pvflag = "1"b;	/* enable physival volume recovery */

	     else if op = "queue" | op = "q" then do;
		buffer = get_value ("-queue", 100);
		i = cv_dec_check_ (buffer, code);
		if code ^= 0 | i < 1 | i > MAX_QUEUES then do;
		     call com_err_ (0, bk_ss_$myname, "Invalid queue number ^a", buffer);
		     go to err_ret;
		end;
		bk_ss_$dprint_queue = i;
		got_queue = "1"b;
	     end;

	     else if op = "request_type" | op = "rqt" then do;
		buffer = get_value ("-request_type", 24);
		call iod_info_$generic_type (buffer, generic_type, code);
		if code ^= 0 then
		     if code = error_table_$id_not_found then do;
			call com_err_ (0, bk_ss_$myname, "Unknown dprint request type ^a", buffer);
			go to err_ret;
		     end;
		     else call com_err_ (0, bk_ss_$myname, "Warning -- Unable to check request type ^a", buffer);
		else if generic_type ^= "printer" then do;
		     call com_err_ (0, bk_ss_$myname, "Dprint request type ^a is not of generic type ""printer"".",
			buffer);
		     code = 1;
		     go to err_ret;
		end;
		bk_ss_$dprint_request_type = buffer;
		bk_ss_$dprint_request_type_setsw, got_request_type = "1"b;
	     end;

	     else if op = "error_on" then bk_ss_$err_onlinesw = "1"b; /* output errors online */
	     else if op = "error_of" then bk_ss_$err_onlinesw = ""b; /* output errors into a file */

	     else if op1 = ">" | op = "retrieve" then do; /* was argument a pathname */
		if bk_ss_$myname = "backup_load" | bk_ss_$myname = "retrieve" then do; /* Is this a retrieval */
		     bk_ss_$retrievesw = "1"b;	/* Tell the world */
		     bk_ss_$qchecksw = "1"b;		/* Don't suspend quotas during retrieve. */
		     bk_ss_$rname = ap -> arg;	/* Save retrieve control seg name */
		     bk_ss_$rsize = al;		/* Save length of name */
		end;
		else if entrysw = dump		/* We must be dumping */
		then do;
		     bk_ss_$pathsw = "1"b;		/* set switch, we have a starting pathname */
		     bk_ss_$save_plen = al;		/* save length of pathname */
		     bk_ss_$save_path = ap -> arg;	/* save pathname of starting directory */
		end;
		else do;				/* not dumping or retrieving */
		     code = error_table_$badopt;
		     call com_err_ ((0), bk_ss_$myname,
			"Pathname argument not accepted by this command. ^a", ap -> arg);
		     go to err_ret;
		end;
	     end;

/* DUMPER ARGUMENT PROCESSING */


	     else if entrysw ^= reload then do;		/* Not reloader entry */

		if op = "wakeup" then do;		/* Flag next arg as wakeup interval in minutes */
		     if bk_ss_$myname = "start_dump" | bk_ss_$myname = "catchup_dump"
		     then wflag = "1"b;
		     else go to badopt;		/* Illegal arg for other entries */
		     go to start;
		end;

		else if op = "tapes" then tflag = "1"b; /* flag next arg as number of tapes */
		else if op = "restart" then rflag = "1"b; /* flag next arg as restart pathname */

		else if op = "1tape" then do;		/* handle a "1tape" arg */
		     bk_ss_$ntapes = 1;		/* insert number of tapes requested */
		     bk_ss_$tapesw = "1"b;		/* set tape option on */
		end;

		else if op = "2tapes" then do;	/* same as above */
		     bk_ss_$ntapes = 2;
		     bk_ss_$tapesw = "1"b;
		end;

		else if op = "only" then bk_ss_$onlysw = "1"b; /* suppress hierarchy sweep */
		else if op = "sweep" then bk_ss_$onlysw = ""b; /* sweep hierarchy, default */

		else if op = "dtd" then bk_ss_$dtdsw = "1"b; /* check if changed since last dumped */
		else if op = "setdtd" then bk_ss_$set_dtd, bk_ss_$set_dtd_explicit = "1"b;  /* always set dtd */
		else if op = "nosetdtd" then do;	/* never set dtd */
		     bk_ss_$set_dtd = "0"b;
		     bk_ss_$set_dtd_explicit = "1"b;
		end;

		else if op = "tape" then bk_ss_$tapesw = "1"b; /* output a tape, default */
		else if op = "notape" then do;
		     bk_ss_$tapesw = ""b;		/* do not write a tape */
		     bk_ss_$mapsw = "1"b;		/* must have tape or map switch */
		end;

		else if op = "nooutput" then bk_ss_$no_output = "1"b; /* test run or debugging dumper */
		else if op = "output" then bk_ss_$no_output = "0"b; /* output dumper stuff if tapesw is on */

		else if op = "nocontin" then bk_ss_$no_contin = "1"b; /* end dump after catchup pass. */
		else if op = "contin" then bk_ss_$no_contin = "0"b; /* continue incremental after catchup pass */
		else if op = "volume_pool" | op = "vp" then vpflag = "1"b;
		else if op = "no_volume_pool" | op = "no_vp" then no_vpflag = "1"b;
		else go to try_date;		/* see if this is a date */

	     end;					/* END OF DUMPER ARGS */

/*  PROCESS RELOAD AND RETRIEVE ARGUMENTS */


	     else if entrysw = reload then do;

		if op = "quota" then bk_ss_$quotasw = "1"b; /* set to modify quota on reload */
		else if op = "noquota" then bk_ss_$quotasw = ""b; /* do not modify quota, default */

		else if op = "trim" then bk_ss_$trimsw = "1"b; /* trim directory on reload */
		else if op = "notrim" then bk_ss_$trimsw = ""b; /* no trim on reload, default */

		else if op = "reload" then bk_ss_$no_reload = ""b; /* Allow appending and writing in hierarchy */
		else if op = "noreload" then bk_ss_$no_reload = "1"b; /* NO appending or writing in hierarchy */

		else if op = "first" then bk_ss_$onlysw = "1"b; /* take first occurence on retrieval */
		else if op = "last" then bk_ss_$onlysw = ""b; /* take last occurence on retrieval */

		else if op = "qcheck" then bk_ss_$qchecksw = "1"b; /* Don't suspend quota checking. */
		else if op = "noqcheck" then bk_ss_$qchecksw = "0"b; /* Suspend quota checking. */

		else if op = "setlvid" then bk_ss_$no_setlvid = "0"b; /* set sons lvid */
		else if op = "nosetlvid" then bk_ss_$no_setlvid = "1"b; /* don't set sons lvid */

		else go to try_date;		/* see if this is a date */

	     end;					/* END OF RELOAD, RETRIEVE ARGS */

	     else
try_date:	     if op1 <= "9" & op1 >= "0" then do;
convert_date:	call convert_date_to_binary_ (ap -> arg, arg_date, code);
		if code ^= 0 then go to error_print;
		call clock_ (time_now);		/* get current date, time */
		if arg_date > time_now then bk_ss_$date = arg_date-86400000000; /* given date - 24 hours */
		else bk_ss_$date = arg_date;
		bk_ss_$datesw = "1"b;		/* set switch to check date */
	     end;

	     else do;
		if index (ap -> arg, " ") ^= 0 then go to convert_date; /* possibly a date */
badopt:		code = error_table_$badopt;
error_print:	call com_err_ (code, bk_ss_$myname, ap -> arg);
		go to err_ret;
	     end;
	end;

	go to start;				/* get next arg */

noarg:	call com_err_ (error_table_$noarg, bk_ss_$myname, "After -^a", op);
	code = error_table_$argerr;


err_ret:	ocode = code;				/* return an error code */

ret:	return;
%page;
get_value: proc (P_name, P_limit) returns (char (*));

/* Returns the char string following the current control arg P_name */

dcl P_name char (*);
dcl P_limit fixed bin;

	ac = ac + 1;
	if entrysw ^= array then do;
	     call cu_$arg_ptr_rel (ac, ap, al, code, alp);
	     if code ^= 0 then do;
		call com_err_ (0, bk_ss_$myname, "No value specified for ^a", P_name);
		go to err_ret;
	     end;
	     if al > P_limit then do;
		call com_err_ (0, bk_ss_$myname, "Value for ^a exceeds maximum number of characters ^d",
		     P_name, P_limit);
		code = 1;
		go to err_ret;
	     end;
	end;
	else do;					/* array_arg_reader entrypoint */
	     al = 32;
	     ap = addr (arg_array (ac));
	end;

	return (ap -> arg);

end get_value;
/*  */

%include bk_ss_;
%include terminate_file;
     end bk_arg_reader_;
