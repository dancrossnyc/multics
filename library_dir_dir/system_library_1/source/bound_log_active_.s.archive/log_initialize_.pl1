/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */
log_initialize_:
     procedure (P_old_log_ptr, P_new_log_ptr, P_log_size, P_prev_dname, P_code);

/* *	This procedure initializes a new log segment, either cleaning out
   *	the header entirely, or copying all pertinent information from the
   *	header of a previous log. If P_old_log_ptr is null, the P_prev_dname
   *	is ignored.
   *
   *	Written 84-05-05, W. Olin Sibert
   */

declare	P_old_log_ptr pointer parameter;
declare	P_new_log_ptr pointer parameter;
declare	P_log_size fixed bin (18) parameter;
declare	P_prev_dname char (*) parameter;
declare	P_code fixed bin (35) parameter;

declare	old_log_ptr pointer;
declare	new_log_ptr pointer;
declare	log_size fixed bin (18);
declare	code fixed bin (35);
declare	last_message fixed bin (35);

declare	error_table_$log_segment_damaged fixed bin (35) external static;

declare	log_segment_$initialize_sequence entry (pointer, fixed bin (35), fixed bin (35));
declare	log_segment_$last_message_info entry (pointer, fixed bin (35), fixed bin (18), fixed bin (35));
declare	log_segment_$place_in_service entry (pointer, fixed bin (35));
declare	log_segment_$remove_from_service entry (pointer, fixed bin (35));

declare  (clock, null, size, unspec) builtin;

/* */

	old_log_ptr = P_old_log_ptr;
	new_log_ptr = P_new_log_ptr;
	log_size = P_log_size;

	if (old_log_ptr = null ()) then
	     call initialize_new_log ();
	else call copy_old_log ();

	call log_segment_$place_in_service (new_log_ptr, (0)); /* Had better work.... */

	P_code = code;
	return;



initialize_new_log:
     procedure ();

	code = 0;
	log_segment_ptr = new_log_ptr;

	unspec (log_segment.header) = ""b;

	log_segment.max_size = log_size - size (log_segment_header);

/* All sys logs start with message 100000, to make output formatting more pleasant */

	call log_segment_$initialize_sequence (log_segment_ptr, 999999, (0));

	log_segment.previous_log_dir = "";		/* Since there was no old log */
	log_segment.time_created = clock ();		/* Record time of creation */
	log_segment.version = LOG_SEGMENT_VERSION_1;

	return;
	end initialize_new_log;

/* */

copy_old_log:
     procedure ();

	code = 0;
	log_segment_ptr = null ();			/* Since we don't use it here */

	if (old_log_ptr -> log_segment.version ^= LOG_SEGMENT_VERSION_1) then do;
	     code = error_table_$log_segment_damaged;
	     return;
	     end;

	unspec (new_log_ptr -> log_segment.header) = ""b;

	new_log_ptr -> log_segment.max_size = log_size - size (log_segment_header);

	call log_segment_$remove_from_service (old_log_ptr, (0));
	call log_segment_$last_message_info (old_log_ptr, last_message, (0), (0));
	call log_segment_$initialize_sequence (new_log_ptr, last_message, (0));

	new_log_ptr -> log_segment.previous_log_dir = P_prev_dname;

	new_log_ptr -> log_segment.listener = old_log_ptr -> log_segment.listener;
	new_log_ptr -> log_segment.last_wakeup_time = old_log_ptr -> log_segment.last_wakeup_time;
	new_log_ptr -> log_segment.wakeup_delta = old_log_ptr -> log_segment.wakeup_delta;

	new_log_ptr -> log_segment.time_created = clock ();	/* Record when this happened */
	new_log_ptr -> log_segment.version = LOG_SEGMENT_VERSION_1;

	return;
	end copy_old_log;

%page; %include log_segment;

	end log_initialize_;
