/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4,delnl,insnl,^ifthendo */
tty_interrupt:
     proc (a_wtcbp, a_type, a_info);

/* DESCRIPTION:
   interrupt handler for logical terminal channels.
*/

/* HISTORY:
   Written by Robert Coren, 08/01/78.
   Modified:
   01/20/79 by Bernard Greenberg:  Negotiated interrupt-time echo.
   03/01/79 by J. Stern:  for wakeup table processing.
   06/29/79 by Bernard Greenberg:  FNP (multiplexer)-negotiated echo.
   04/01/81 by Robert Coren:  bugs fixed and references to dialedt removed.
   05/01/81 by J. Bongiovanni:  for response time metering.
   06/01/82 by Robert Coren:  to add handling of MASKED interrupt type.
   11/01/82 by Robert Coren:  to save error code returned by channel_manager$write
   and to trust returned pointer even if code ^= 0.
   04/01/84 by Robert Coren:  to fix bug caused by setting mark flag in a buffer
   that might have been freed.
   07/20/84 by R. Michael Tague:  Changed the calling sequence of pxss$wakeup_int
   so that the IPS signal is specified by a bit mask instead of the
   signal name.
   09/20/84 by Robert Coren:  to fix echoing bug that arose if FNP appended
   characters after it stopped echoing, and to reset all the WTCB
   flags that have to be reset on hangup.
   12/10/84 by Robert Coren:  to ignore line_status interrupts if
   wtcb.line_status_disabled is "1"b, and to clear it on hangup.

/****^  HISTORY COMMENTS:
  1) change(86-06-19,Kissel), approve(86-07-30,MCR7475), audit(86-08-04,Coren),
     install(86-10-09,MR12.0-1181):
     Changed to support the new tty event message format declared in
     net_event_message.incl.pl1 which replaces tty_event_message.incl.pl1.
  2) change(87-07-17,LJAdams), approve(87-08-07,MCR7750),
     audit(87-08-07,Fawcett), install(87-08-11,MR12.1-1079):
     wtcb.mark_set was being set to "0"b at all times.  Changed this so that it
     will be set to "0"b only if quits are enabled. (phx20905)
  3) change(88-01-15,Farley), approve(88-02-22,MCR7843),
     audit(88-02-22,Beattie), install(88-03-01,MR12.2-1029):
     Added a check to ACCEPT_INPUT for ceasing echo neg when there is no more
     horiz_room_left.
  4) change(88-06-20,Berno), approve(88-07-13,MCR7928),
     audit(88-06-20,Parisek), install(88-07-19,MR12.2-1061):
     Added code to implement the UNCP multiplexer (DSA gateway) interface.
     Set the wtcb.send_turn flag & check the wtcb.receive_mode_device flag.
                                                   END HISTORY COMMENTS */


/* PARAMETERS */

dcl  a_wtcbp ptr;
dcl  a_type fixed bin;
dcl  a_info bit (72) aligned;


/* AUTOMATIC */

dcl  i fixed bin;
dcl  int_type fixed bin;
dcl  devx fixed bin;
dcl  charx fixed bin;
dcl  echbufp ptr;
dcl  this_char char (1) unaligned;
dcl  echo_tally fixed bin (9);
dcl  sync_ctr_tally fixed bin;
dcl  inchain fixed bin (18);
dcl  code fixed bin (35);
dcl  next_offset fixed bin;
dcl  last_offset fixed bin;
dcl  new_headp ptr;
dcl  old_tailp ptr;
dcl  new_first_tally fixed bin;
dcl  old_last_tally fixed bin;
dcl  max_tally fixed bin;
dcl  filled bit (1);
dcl  source_ptr ptr;
dcl  target_ptr ptr;
dcl  start_time fixed bin (71);
dcl  echnego_from_mux_flag bit (1);
dcl  echnego_scan_start fixed bin;
dcl  r0_did_echo bit (1);
dcl  uncp_flag bit (1);				/* designate UNCP mpx */
dcl  1 echo_start_data,
       2 ctr fixed bin (35),
       2 screenleft fixed bin (35);

/* BASED */

dcl  new_chars char (new_first_tally) based;


/* BUILTINS */

dcl  (addr, bin, clock, divide, hbound, max, min, null,
      ptr, unspec, rank, rel, size, string, substr) builtin;


/* ENTRIES */

dcl  meter_response_time entry (bit (36) aligned, fixed bin);
dcl  pxss$ring_0_wakeup entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35));
dcl  pxss$unique_ring_0_wakeup entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35));
dcl  pxss$ips_wakeup_int entry (bit (36) aligned, bit (35) aligned);
dcl  syserr entry options (variable);


/* EXTERNAL STATIC */

dcl  error_table_$noalloc fixed bin (35) ext static;
dcl  error_table_$invalid_write fixed bin (35) ext static;
dcl  sys_info$quit_mask bit (35) aligned ext static;

/* INTERNAL STATIC */

dcl  CRASH_SYSTEM fixed bin int static options (constant) init (1);

dcl  line_delimiter_octal (16) bit (9) int static options (constant)
	init ("012"b3, (2) (1)"055"b3, "012"b3, (3) (1)"003"b3, (5) (1)"012"b3, (3) (1)"003"b3, "012"b3);
dcl  line_delimiter (16) char (1) based (addr (line_delimiter_octal));

dcl  no_write_code fixed bin (35) internal static;
dcl  noalloc_code fixed bin (35) internal static;		/* copy of code to be used at interrupt time */

%include wtcb;
%include mcs_interrupt_info;
%include tty_buf;
%include tty_buffer_block;
%include net_event_message;
%include tty_space_man_dcls;
%include channel_manager_dcls;
%include line_types;
%include mcs_echo_neg_sys;
%include lct;
%include set_wakeup_table_info;
%include response_transitions;
%include multiplexer_types;

interrupt:
     entry;					/* the only entry into this program */

	wtcbp = a_wtcbp;
	int_type = a_type;
	interrupt_info = a_info;
	devx = wtcb.devx;
	ttybp = addr (tty_buf$);

	uncp_flag = is_parent_mpx (UNCP_MPX);
	
	if int_type = DIALUP
	then do;
	     unspec (dialup_info) = interrupt_info;
	     if wtcb.dialing
	     then do;				/* if we asked 355 to dial */
		wtcb.dial_status_valid = "1"b;	/* status code is now valid */
		wtcb.dial_status_code = 0;		/* success */
	     end;


	     wtcb.line_type = dialup_info.line_type;
	     wtcb.baud_rate = dialup_info.baud_rate;
	     wtcb.max_buf_size = dialup_info.max_buf_size;
	     wtcb.buffer_pad = dialup_info.buffer_pad;
	     wtcb.line_delimiter = line_delimiter (wtcb.line_type);
	     wtcb.receive_mode_device = dialup_info.receive_mode_device;

	     if uncp_flag then wtcb.send_turn = "0"b;	/* Add for the Datanet 7100. */

	     do i = 1 to n_sync_line_types while (sync_line_type (i) ^= wtcb.line_type);
	     end;
	     wtcb.sync_line = (i <= n_sync_line_types);

	     wtcb.flags.dialed = "1"b;		/* indicate dialed */
	     wtcb.uproc = wtcb.hproc;			/* make boss process the user until we get real one */

	     unspec (net_event_message) = "0"b;
	     net_event_message.version = NET_EVENT_MESSAGE_VERSION_1;
	     net_event_message.network_type = MCS_NETWORK_TYPE;
	     net_event_message.handle = devx;
	     net_event_message.type = MCS_DIALUP_MSG;
	     call pxss$ring_0_wakeup (wtcb.hproc, wtcb.hevent, net_event_message_arg, 0);
						/* wakeup the answering service */
	end;

	else if int_type = HANGUP
	then do;
	     unspec (net_event_message) = "0"b;
	     net_event_message.version = NET_EVENT_MESSAGE_VERSION_1;
	     net_event_message.network_type = MCS_NETWORK_TYPE;
	     net_event_message.handle = devx;
	     net_event_message.type = MCS_HANGUP_MSG;
	     call pxss$ring_0_wakeup (wtcb.hproc, wtcb.hevent, net_event_message_arg, (0));
						/* notify Initializer */

	     call kill_line;			/* wipe out our record of the channel */
	end;

	else if int_type = CRASH			/* we don't have to tell anyone */
	then call kill_line;			/* except ourselves */

	else if int_type = SEND_OUTPUT
	then do;
	     wtcb.send_output = "1"b;			/* send_next_page will undo this if necessary */
	     if wtcb.write_first ^= 0			/* we have more output waiting */
	     then call send_next_page;
	     else if wtcb.negotiating_echo
	     then do;				/* Do we need to get start_echo ctl order thru? */

		echo_datap = ptr (ttybp, wtcb.echdp);
		if echo_data.echo_start_pending_sndopt
		then call start_negotiated_echo;	/* This happens when multiplexer couldn't honor previous start_negotiated_echo */
						/* because it had output pending. */
	     end;

	     if wtcb.write_first = 0			/* no write chain left */
	     then if wtcb.wflag			/* user is waiting to be told when output is done */
		then do;
		     unspec (net_event_message) = "0"b;
		     net_event_message.version = NET_EVENT_MESSAGE_VERSION_1;
		     net_event_message.network_type = MCS_NETWORK_TYPE;
		     net_event_message.handle = devx;
		     net_event_message.type = MCS_WRITE_MSG;
		     call pxss$ring_0_wakeup (wtcb.uproc, wtcb.event, net_event_message_arg, (0));
		     wtcb.wflag = "0"b;
		end;
	end;

	else if int_type = INPUT_AVAILABLE		/* they've got input for us, but they won't say where */
	then do;
	     wtcb.input_available = "1"b;
	     if wtcb.rflag				/* the process wants it */
	     then do;
		unspec (net_event_message) = "0"b;
		net_event_message.version = NET_EVENT_MESSAGE_VERSION_1;
		net_event_message.network_type = MCS_NETWORK_TYPE;
		net_event_message.handle = devx;
		net_event_message.type = MCS_READ_MSG;
		call meter_response_time (wtcb.uproc, TTY_WAKEUP);
		call pxss$ring_0_wakeup (wtcb.uproc, wtcb.event, net_event_message_arg, (0));
		wtcb.rflag = "0"b;
	     end;
	end;

	else if int_type = ACCEPT_INPUT		/* they're handing us input */
	then do;
	     unspec (rtx_info) = interrupt_info;
	     if rtx_info.formfeed_present		/* this is end_of_page response */
	     then do;
		if ^rtx_info.output_in_ring_0 & wtcb.write_first = 0
						/* if tty_write is up-to-date */
		then wtcb.actline = 0;
	     end;

	     inchain = bin (rtx_info.chain_head);
	     if inchain = 0
	     then return;

	     sync_ctr_tally = 0;			/* Set for echo sync */
	     r0_did_echo = "0"b;			/* Set for resync hack. */

	     last_offset = bin (rtx_info.chain_tail);	/* initialize end_of_chain pointer */

	     if wtcb.negotiating_echo
	     then do;				/* In echnego state */
		start_time = clock ();		/* count time spent doing this */
		tty_buf.echo_neg_interrupts = tty_buf.echo_neg_interrupts + 1;
						/* METER */
		echo_datap = ptr (ttybp, wtcb.echdp);	/* Develop table ptr */
		echbufp = null ();			/* No echo buffer yet */
		echnego_from_mux_flag = "0"b;
		if wtcb.write_last = 0
		then old_tailp = null;		/* Set for combining */
		else do;
		     old_tailp = ptr (ttybp, wtcb.write_last);
		     old_last_tally = old_tailp -> buffer.tally;
		     if old_last_tally ^< max_buffer_tally (old_tailp -> buffer.size_code) - wtcb.buffer_pad
		     then old_tailp = null;
		end;


		do blockp = ptr (ttybp, rtx_info.chain_head) repeat (ptr (ttybp, buffer.next)) while (rel (blockp));

		     echnego_scan_start = 0;

		     if echo_data.mux_will_echnego	/* Mux knows how to echo negotiate */
			& buffer.next = 0		/* This is end of chain */
			& ^rtx_info.break_char	/* Mux echoed all these characters */
						/* Except maybe the last few */
			& buffer.tally > 0
		     then do;

/* it's possible that the multiplexer (in particular, the FNP) appended a few more
   characters after it stopped echoing. This code assumes that there will be no
   more than 4 such, and that the multiplexer echoed exactly the characters up to
   but not including the first non-echoable character. */

			do echnego_scan_start = max (0, buffer.tally - 4) to buffer.tally - 1
			     while (echoable (buffer.chars (echnego_scan_start)));
			end;
			if echnego_scan_start > echo_data.horiz_room_left
						/* stopped because it ran out of line */
			then echnego_scan_start = echo_data.horiz_room_left;

			echo_data.horiz_room_left = echo_data.horiz_room_left - echnego_scan_start;
			echo_data.chars_echoed = echo_data.chars_echoed + echnego_scan_start;
			sync_ctr_tally = sync_ctr_tally - echnego_scan_start;
						/* Will go negative */
			tty_buf.echo_neg_mux_chars = tty_buf.echo_neg_mux_chars + echnego_scan_start;
						/* METER */
			rtx_info.break_char = "1"b;
			echnego_from_mux_flag = "1"b;
			if echo_data.horiz_room_left ^> 0
			then go to negotiated_echo_ceases;
		     end;

/* Mux echoed _n_o_n_e of them; see if we can echo them. */

		     do charx = echnego_scan_start to buffer.tally - 1;
						/* Scan buffer */
			this_char = buffer.chars (charx);
			if ^echoable (this_char)
			then go to negotiated_echo_ceases;


/* This character is echoable */

			if echo_data.horiz_room_left ^> 0
			then go to negotiated_echo_ceases;
			if echnego_from_mux_flag
			then do;
			     echo_data.chars_echoed = echo_data.chars_echoed + 1;
			     tty_buf.echo_neg_mux_chars = tty_buf.echo_neg_mux_chars + 1;
						/* METER */
			     sync_ctr_tally = sync_ctr_tally - 1;
			end;
			else if old_tailp ^= null
			then do;			/* Try to combine buffers */
			     r0_did_echo = "1"b;
			     old_tailp -> buffer.chars (old_last_tally) = this_char;
			     echo_data.chars_echoed = echo_data.chars_echoed + 1;
			     tty_buf.echo_neg_r0_chars = tty_buf.echo_neg_r0_chars + 1;
			     old_last_tally, old_tailp -> buffer.tally = old_last_tally + 1;
			     if old_last_tally ^< max_buffer_tally (old_tailp -> buffer.size_code) - wtcb.buffer_pad
			     then old_tailp = null;
			end;
			else do;

			     if echbufp = null
			     then do;

				r0_did_echo = "1"b;
				lctp = tty_buf.lct_ptr;
						/* we're going to check if the guy's got too much space already */
				lctep = addr (lct.lcte_array (devx));
				lctep = addr (lct.lcte_array (lcte.physical_channel_devx));
				if lcte.output_words >= divide (tty_buf.bleft, output_bpart, 17, 0)
						/* he does */
				then go to negotiated_echo_ceases;
						/* so stop for now */

				call tty_space_man$get_buffer (devx, 16, OUTPUT, echbufp);
				if echbufp = null
				then go to negotiated_echo_ceases;
						/* No more room */
				echo_tally = 0;
			     end;
			     echbufp -> buffer.chars (echo_tally) = this_char;
						/* Insert it */
			     echo_tally = echo_tally + 1;
						/* chars is 0-indexed */

			     if echo_tally >= max_buffer_tally (echbufp -> buffer.size_code) - wtcb.buffer_pad
			     then call ship_echo_buffer;
			end;
			echo_data.horiz_room_left = echo_data.horiz_room_left - 1;
		     end;				/* End of input buffer */
		end;				/* End of input chain */
		rtx_info.break_char = "0"b;		/* NO break! */
		go to negotiated_echo_continues;


negotiated_echo_ceases:				/* Some break condition or lossage has been hit. */
		echo_data.echo_start_pending_sndopt = "0"b;
						/* DONT start mux up. */
		wtcb.negotiating_echo = "0"b;		/* Turn off echoing */
negotiated_echo_continues:
		if echbufp ^= null
		then call ship_echo_buffer;
		tty_buf.echo_neg_time = tty_buf.echo_neg_time + clock () - start_time;
	     end;

	     if wtcb.echdp ^= "000000"b3
	     then do;				/* May need to count synchronization */
		echo_datap = ptr (ttybp, wtcb.echdp);
		if echo_data.synchronized
		then do;
		     if sync_ctr_tally < 0
		     then echo_data.sync_ctr = 0;	/* mux-Echoed chars reinit */
		     do blockp = ptr (ttybp, rtx_info.chain_head) repeat (ptr (ttybp, buffer.next))
			while (rel (blockp));

			sync_ctr_tally = sync_ctr_tally + buffer.tally;
		     end;				/* MUX-echoed characters have been predecremented out */
		     echo_data.sync_ctr = echo_data.sync_ctr + sync_ctr_tally;
		     if r0_did_echo & wtcb.write_first = 0
		     then do;			/* Keep output in order
						   with respect to r0 */
			tty_buf.echo_neg_mux_nonecho = tty_buf.echo_neg_mux_nonecho + 1;
			if wtcb.negotiating_echo
			then call start_negotiated_echo;
						/* Mux lost race, retry. */
		     end;
		end;
	     end;

	     if uncp_flag then
		if wtcb.receive_mode_device		/* Modification for the Datanet 7100 */
		then wtcb.wake_tbl = "0"b;		/* If UNCP then do not optimize with qedx */

	     if wtcb.wake_tbl & ^wtcb.allow_wakeup
	     then call scan_iw_char;			/* look for input wakeup char */

	     if wtcb.mark_set
	     then do;				/* indicate that input is first after mark set */
		blockp = ptr (ttybp, inchain);	/* point to first buffer */
		buffer.mark = "1"b;
		wtcb.mark_set = "0"b;		/* we've taken care of it now */
	     end;

	     if wtcb.fblock = 0
	     then do;				/* no existing blocks */
		wtcb.fblock = inchain;		/* set offset to first block */
		wtcb.fchar = 0;			/* and offset to first char */
	     end;
	     else do;
		old_tailp = ptr (ttybp, wtcb.lblock);
		next_offset = bin (rtx_info.chain_head);
		if ^old_tailp -> buffer.converted	/* don't combine new input with preconverted */
		then do;
		     old_last_tally = old_tailp -> buffer.tally;

		     max_tally = max_buffer_tally (old_tailp -> buffer.size_code);
						/* number of characters this buffer will hold */
		     filled = "0"b;
		     do while ((next_offset ^= 0) & ^filled);
						/* put as much as possible of input into last old buffer */
			new_headp = ptr (ttybp, next_offset);
			new_first_tally = new_headp -> buffer.tally;

			if (old_last_tally + new_first_tally <= max_tally) & ^new_headp -> buffer.mark
						/* if it will fit (but don't mixed marked input with unmarked) */
			then do;
			     source_ptr = addr (new_headp -> buffer.chars (0));
			     target_ptr = addr (old_tailp -> buffer.chars (old_last_tally));
			     target_ptr -> new_chars = source_ptr -> new_chars;
			     old_last_tally = old_last_tally + new_first_tally;
			     next_offset = new_headp -> buffer.next;
						/* move on to next buffer */
			     call tty_space_man$free_buffer (devx, INPUT, new_headp);
						/* through with this one */
			end;

			else filled = "1"b;		/* no more room in last old buffer */
		     end;

		     old_tailp -> buffer.tally = old_last_tally;
		end;
		old_tailp -> buffer.next = next_offset;
		if next_offset = 0
		then last_offset = 0;		/* took care of entire new chain */

	     end;

	     if last_offset ^= 0
	     then wtcb.lblock = last_offset;

	     if wtcb.wake_tbl & ^wtcb.allow_wakeup
	     then call check_iw_limit;		/* see if too much input has accumulated */

	     if rtx_info.break_char & ^rtx_info.output_in_ring_0
						/* newline or form feed */
	     then do;
		if ^rtx_info.output_in_fnp		/* if there's no output going on */
		then wtcb.actcol, wtcb.white_col = 0;	/* make sure next one starts at left margin */

		if wtcb.flags.count_lines & ^wtcb.breakall
						/* counting lines */
		then wtcb.actline = wtcb.actline + 1;	/* count this one */
	     end;
	     if (rtx_info.break_char | wtcb.wru)	/* if there was a break char or this is answerback */
		& wtcb.rflag
	     then do;				/* and the user wants a wakeup then */
		if wtcb.wake_tbl & ^wtcb.allow_wakeup
		then if wtcb.prompt_len > 0
		     then call send_prompt;
		     else ;
		else do;
		     unspec (net_event_message) = "0"b;
		     net_event_message.version = NET_EVENT_MESSAGE_VERSION_1;
		     net_event_message.network_type = MCS_NETWORK_TYPE;
		     net_event_message.handle = devx;
		     net_event_message.type = MCS_READ_MSG;
		     call meter_response_time (wtcb.uproc, TTY_WAKEUP);
		     call pxss$ring_0_wakeup (wtcb.uproc, wtcb.event, net_event_message_arg, 0);
						/* wakeup the user */
		     wtcb.rflag = "0"b;		/* we've taken care of this now */
		end;
	     end;
	end;

	else if int_type = INPUT_REJECTED		/* we couldn't take more input for this guy */
	then do;
	     if wtcb.fblock ^= 0			/* if he's sitting on any */
	     then do;
		unspec (net_event_message) = "0"b;
		net_event_message.version = NET_EVENT_MESSAGE_VERSION_1;
		net_event_message.network_type = MCS_NETWORK_TYPE;
		net_event_message.handle = devx;
		net_event_message.type = MCS_READ_MSG;	/* poke him */
		if wtcb.rflag			/* he hasn't been poked already */
		then do;
		     call meter_response_time (wtcb.uproc, TTY_WAKEUP);
		     call pxss$ring_0_wakeup (wtcb.uproc, wtcb.event, net_event_message_arg, (0));
		     wtcb.rflag = "0"b;
		end;

		else call pxss$unique_ring_0_wakeup (wtcb.uproc, wtcb.event, net_event_message_arg, (0));
	     end;
	end;

	else if int_type = QUIT
	then do;
	     if wtcb.flags.hndlquit
	     then do;
		if wtcb.negotiating_echo
		then do;
		     echo_datap = ptr (ttybp, wtcb.echdp);
		     echo_data.echo_start_pending_sndopt, echo_data.synchronized, wtcb.negotiating_echo = "0"b;
		end;
		if wtcb.fblock ^= 0			/* free read chain also */
		then do;
		     call tty_space_man$free_chain (devx, INPUT, ptr (ttybp, wtcb.fblock));
		     wtcb.fblock, wtcb.lblock = 0;
		end;

		if wtcb.write_first ^= 0
		then do;
		     call tty_space_man$free_chain (devx, OUTPUT, ptr (ttybp, wtcb.write_first));
		     wtcb.write_first, wtcb.write_last, wtcb.write_cnt = 0;
		end;

		wtcb.white_col = 0;
		wtcb.actcol = 0;
	     end;

	     unspec (net_event_message) = "0"b;
	     net_event_message.version = NET_EVENT_MESSAGE_VERSION_1;
	     net_event_message.network_type = MCS_NETWORK_TYPE;
	     net_event_message.handle = devx;

	     if wtcb.wflag | wtcb.rflag		/* if process was blocked on output or input */
	     then do;
		if wtcb.wflag
		then net_event_message.type = MCS_WRITE_MSG;
						/* set message type accordingly */
		else net_event_message.type = MCS_READ_MSG;
		call meter_response_time (wtcb.uproc, TTY_WAKEUP);
		call pxss$ring_0_wakeup (wtcb.uproc, wtcb.event, net_event_message_arg, 0);
						/* wakeup the user */
		wtcb.wflag, wtcb.rflag = "0"b;
	     end;

	     if wtcb.flags.qenable
	     then do;				/* if quit is enabled */
		net_event_message.type = MCS_QUIT_MSG;	/* we will wake up the user so he knows what gives */
		call pxss$ring_0_wakeup (wtcb.uproc, wtcb.event, net_event_message_arg, 0);

		call pxss$ips_wakeup_int (wtcb.uproc, sys_info$quit_mask);
						/* signal user process */
		wtcb.flags.qflag = "1"b;		/* set "quit received" flag */
		wtcb.mark_set = "0"b;
	     end;

	     if wtcb.count_lines
	     then if wtcb.flags.scroll
		then wtcb.actline = 0;		/* count quit as input for scrolling purposes */
		else wtcb.actline = wtcb.actline + 1;	/* else count the newline */

	     wtcb.end_frame = "0"b;

	     tty_buf.nquits = tty_buf.nquits + 1;	/* bump quit count */

	end;

	else if int_type = LINE_STATUS
	then do;
	     if ^wtcb.line_status_disabled
	     then if wtcb.uproc ^= "0"b
		then do;
		     wtcb.line_status = interrupt_info;
		     wtcb.line_status_present = "1"b;
		     unspec (net_event_message) = "0"b;
		     net_event_message.version = NET_EVENT_MESSAGE_VERSION_1;
		     net_event_message.network_type = MCS_NETWORK_TYPE;
		     net_event_message.handle = devx;
		     net_event_message.type = MCS_LINE_STATUS_MSG;
		     call pxss$ring_0_wakeup (wtcb.uproc, wtcb.event, net_event_message_arg, 0);
		end;

	     return;

	end;

	else if int_type = DIAL_STATUS
	then do;
	     if wtcb.dialing
	     then do;
		wtcb.dial_status_valid = "1"b;	/* we have dial out status */
		wtcb.dial_status_code = bin (substr (interrupt_info, 1, 8), 8);
		unspec (net_event_message) = "0"b;
		net_event_message.version = NET_EVENT_MESSAGE_VERSION_1;
		net_event_message.network_type = MCS_NETWORK_TYPE;
		net_event_message.handle = devx;
		net_event_message.type = MCS_DIALOUT_MSG;
		call pxss$ring_0_wakeup (wtcb.hproc, wtcb.hevent, net_event_message_arg, 0);
						/* wakeup the user */
						/* user will use dial_status ordercall */
	     end;
	end;

	else if int_type = WRU_TIMEOUT		/* no response to answerback */
	then do;
	     if wtcb.flags.dialed
	     then do;				/* it had better be dialed */
		wtcb.rflag = "0"b;			/* read no longer pending */
		unspec (net_event_message) = "0"b;
		net_event_message.version = NET_EVENT_MESSAGE_VERSION_1;
		net_event_message.network_type = MCS_NETWORK_TYPE;
		net_event_message.handle = devx;
		net_event_message.type = MCS_READ_MSG;
		call pxss$ring_0_wakeup (wtcb.uproc, wtcb.event, net_event_message_arg, 0);
						/* wakeup the user */
	     end;
	end;

	else if int_type = SPACE_AVAILABLE		/* we were waiting for space */
	then if wtcb.write_first ^= 0			/* we've got more output */
	     then call send_next_page;
	     else do;
		unspec (net_event_message) = "0"b;
		net_event_message.version = NET_EVENT_MESSAGE_VERSION_1;
		net_event_message.network_type = MCS_NETWORK_TYPE;
		net_event_message.handle = devx;
		net_event_message.type = MCS_UNSPECIFIED_MSG;
		call pxss$unique_ring_0_wakeup (wtcb.uproc, wtcb.event, net_event_message_arg, (0));
	     end;					/* unique because we don't want to pile these up */

	else if int_type = ACKNOWLEDGE_ECHNEGO_INIT
	then do;
	     echo_datap = ptr (ttybp, wtcb.echdp);
	     if echo_datap ^= ttybp
	     then do;
		echo_data.awaiting_start_sync = "0"b;
		echo_data.synchronized = "1"b;
		echo_data.sync_ctr = 0;
	     end;
	end;
	else if int_type = ACKNOWLEDGE_ECHNEGO_STOP
	then do;
	     echo_datap = ptr (ttybp, wtcb.echdp);
	     wtcb.negotiating_echo = "0"b;
	     if echo_datap ^= ttybp
	     then do;
		echo_data.awaiting_stop_sync = "0"b;
		echo_data.echo_start_pending_sndopt = "0"b;
		unspec (net_event_message) = "0"b;
		net_event_message.version = NET_EVENT_MESSAGE_VERSION_1;
		net_event_message.network_type = MCS_NETWORK_TYPE;
		net_event_message.handle = devx;
		net_event_message.type = MCS_UNSPECIFIED_MSG;
		call pxss$unique_ring_0_wakeup (wtcb.uproc, wtcb.event, net_event_message_arg, (0));
	     end;
	end;

	else if int_type = MASKED
	then do;
	     unspec (net_event_message) = "0"b;
	     net_event_message.version = NET_EVENT_MESSAGE_VERSION_1;
	     net_event_message.network_type = MCS_NETWORK_TYPE;
	     net_event_message.handle = devx;
	     net_event_message.type = MCS_MASKED_MSG;
	     call pxss$ring_0_wakeup (wtcb.hproc, wtcb.hevent, net_event_message_arg, 0);
	     call kill_line;
	     wtcb.masked = "1"b;
	end;

	else
bad_int:
	     call syserr (CRASH_SYSTEM, "tty_interrupt: unrecognized interrupt type (^d) for devx ^d", int_type, devx);

	return;

/* internal procedure to send pending output */

send_next_page:
     proc;

dcl  headp ptr;
dcl  next_head fixed bin;

	if wtcb.send_output
	then do;
	     headp, blockp = ptr (ttybp, wtcb.write_first);

	     do while (^buffer.end_of_page & buffer.next ^= 0);
						/* find last buffer of current page */
		if buffer.mark			/* this page contains the mark */
		then wtcb.mark_set = "1"b;
		blockp = ptr (ttybp, buffer.next);
	     end;

	     if buffer.mark				/* check last buffer too */
	     then wtcb.mark_set = "1"b;
	     next_head = buffer.next;
	     buffer.next = 0;			/* break chain here */
	     wtcb.end_frame = buffer.end_of_page;

	     call channel_manager$write (devx, headp, code);
	     if code = noalloc_code
	     then do;
		call tty_space_man$needs_space (devx);
		code = 0;				/* don't treat like other error codes */
	     end;


	     if headp ^= null			/* didn't take it all */
	     then do;
		if code = 0
		then do;
		     blockp = headp;
		     do while (buffer.next ^= 0);
			if buffer.mark		/* we didn't send the marked buffer yet */
			then wtcb.mark_set = "0"b;
			blockp = ptr (ttybp, buffer.next);
		     end;

		     if buffer.mark			/* have to check last one */
		     then wtcb.mark_set = "0"b;
		     buffer.next = next_head;		/* found the end of the returned chain, reconnect it */
		     if next_head = 0		/* if we weren't hanging on to one */
		     then wtcb.write_last = bin (rel (blockp));
						/* this is the end */
		     next_head = bin (rel (headp));	/* this is now head of the chain */
		end;

		else do;
		     call tty_space_man$free_chain (devx, OUTPUT, headp);
						/* all output to be discarded */
		     wtcb.mark_set = "0"b;		/* can't trust anything */
		     wtcb.error_code = code;		/* save this for callers */
		     unspec (net_event_message) = "0"b;
		     net_event_message.version = NET_EVENT_MESSAGE_VERSION_1;
		     net_event_message.network_type = MCS_NETWORK_TYPE;
		     net_event_message.handle = devx;
		     net_event_message.type = MCS_UNSPECIFIED_MSG;
						/* poke the process to make sure it finds out eventually */
		     call pxss$unique_ring_0_wakeup (wtcb.uproc, wtcb.event, net_event_message_arg, (0));
		end;
	     end;

	     wtcb.write_first = next_head;
	     if wtcb.write_first = 0
	     then wtcb.write_last = 0;		/* this must be true */
	     else if code ^= 0			/* in this case we'll throw away all output anyway */
	     then do;
		call tty_space_man$free_chain (devx, OUTPUT, ptr (ttybp, wtcb.write_first));
		wtcb.write_first, wtcb.write_last = 0;
	     end;
	     wtcb.send_output = "0"b;
	end;

	return;
     end /* send_next_page */;

/* internal procedure to set wtcb to "hung up" state */

kill_line:
     proc;

dcl  sync_flag bit (1);
dcl  masked_flag bit (1);

	if wtcb.fblock ^= 0				/* if there's a read chain, free it */
	then call tty_space_man$free_chain (devx, INPUT, ptr (ttybp, wtcb.fblock));

	if wtcb.write_first ^= 0			/* likewise for write chain */
	then call tty_space_man$free_chain (devx, OUTPUT, ptr (ttybp, wtcb.write_first));

/* save those flags that need to be preserved */

	masked_flag = wtcb.flags.masked;
	sync_flag = wtcb.flags.sync_line;
	string (wtcb.flags) = ""b;			/* clear them all, then restore saved values */
	string (wtcb.more_flags) = ""b;
	wtcb.flags.masked = masked_flag;
	wtcb.flags.sync_line = sync_flag;

	wtcb.uproc = ""b;
	wtcb.white_col, wtcb.fblock, wtcb.lblock = 0;
	wtcb.fchar, wtcb.actline, wtcb.actcol, wtcb.nramsgs = 0;
	wtcb.write_first, wtcb.write_last = 0;
	wtcb.prompt_len = 0;
	wtcb.error_code = 0;

	if wtcb.echdp ^= ""b
	then do;
	     call tty_space_man$free_space (size (echo_data), ptr (ttybp, wtcb.echdp));
	     wtcb.echdp = ""b;
	end;
	if wtcb.waketp ^= ""b
	then do;
	     call tty_space_man$free_space (size (wakeup_table), ptr (ttybp, wtcb.waketp));
	     wtcb.waketp = ""b;
	end;

     end /* kill_line */;

echoable:
     procedure (test_char) returns (bit (1) aligned);

/* function that indicates whether a given character can be echoed by anyone other than the application */

dcl  test_char char (1);
dcl  char_pos fixed bin (9);

	char_pos = rank (test_char);
	if char_pos > hbound (echo_data.break, 1)	/* it's not in the table at all */
	then return ("0"b);

/* if it is, it is echoable iff its corresponding bit is off */

	else return (^echo_data.break (char_pos));
     end echoable;

ship_echo_buffer:
     proc;

/* Proc called to ship out echo buffer for negotiated echo */

dcl  loc_echbufp ptr;
dcl  loc_lastp ptr;

	echbufp -> buffer.tally = echo_tally;
	loc_echbufp = echbufp;
	code = 0;

	if wtcb.write_first ^= 0			/* already an output chain */
	then do;
	     loc_lastp = ptr (ttybp, wtcb.write_last);
	     wtcb.write_last,			/* just append this stuff to it */
		loc_lastp -> buffer.next = bin (rel (loc_echbufp));
	     loc_echbufp = null;
	end;

	else if ^wtcb.send_output			/* shouldn't send it now */
	then do;
	     wtcb.write_first, wtcb.write_last = bin (rel (loc_echbufp));
	     loc_echbufp = null;
	end;

	else do;
	     wtcb.send_output = "0"b;
	     call channel_manager$write (devx, loc_echbufp, code);
	end;

	if loc_echbufp = null & code = 0
	then do;					/* Won */
	     echo_data.chars_echoed = echo_data.chars_echoed + echo_tally;
	     tty_buf.echo_neg_r0_chars = tty_buf.echo_neg_r0_chars + echo_tally;
						/* METER */
	end;
	else do;
	     code = 1;				/* Cause echo stop */
	     call tty_space_man$free_buffer (devx, OUTPUT, echbufp);
	end;
	echbufp = null;
	if code ^= 0
	then go to negotiated_echo_ceases;		/* Stop the rolling ball. */

     end ship_echo_buffer;

/* Subroutine to scan input chain for input wakeup chars */

scan_iw_char:
     proc;

dcl  charx fixed bin;
dcl  i fixed bin;

	wakeup_tablep = ptr (ttybp, wtcb.waketp);
	do blockp = ptr (ttybp, rtx_info.chain_head) repeat (ptr (ttybp, buffer.next)) while (rel (blockp));
	     do charx = 0 to buffer.tally - 1;
		i = bin (unspec (buffer.chars (charx)));
		if i <= 127
		then if wakeup_table.wake_map (i)	/* found a wakeup char */
		     then do;
			wtcb.allow_wakeup = "1"b;
			return;
		     end;
	     end;
	end;

     end;



/* Subroutine to check if buffered input exceeds limit for wake_tbl mode */

check_iw_limit:
     proc;

	lctp = tty_buf.lct_ptr;
	lctep = addr (lct.lcte_array (devx));
	lctep = addr (lct.lcte_array (lcte.physical_channel_devx));
	if lcte.input_words > min (128, divide (tty_buf.bleft, 4, 17, 0))
	then wtcb.allow_wakeup = "1"b;

     end;

/* Subroutine to write a prompt message */

send_prompt:
     proc;

dcl  bufp ptr;


	call tty_space_man$get_buffer (devx, 16, OUTPUT, bufp);
	if bufp = null
	then return;

	substr (string (bufp -> buffer.chars), 1, wtcb.prompt_len) = substr (wtcb.prompt, 1, wtcb.prompt_len);
	bufp -> buffer.tally = wtcb.prompt_len;
	if wtcb.write_first = 0			/* thread prompt buffer onto write chain */
	then wtcb.write_first = bin (rel (bufp));
	else ptr (ttybp, wtcb.write_last) -> buffer.next = bin (rel (bufp));
	wtcb.write_last = bin (rel (bufp));

	call send_next_page;			/* ship it out */

     end;

set_static:
     entry;

/* entry called once per bootload to copy error codes into internal static */

	noalloc_code = error_table_$noalloc;
	no_write_code = error_table_$invalid_write;
	return;

start_negotiated_echo:
     proc;					/* echdp had better be set. */
	echo_start_data.ctr = echo_data.sync_ctr;
	echo_start_data.screenleft = echo_data.horiz_room_left;
	call channel_manager$control (devx, "start_negotiated_echo", addr (echo_start_data), code);
	if code = 0
	then echo_data.echo_start_pending_sndopt = "0"b;
	else if code = no_write_code
	then echo_data.echo_start_pending_sndopt = "1"b;
	tty_buf.echo_neg_sndopt_restarts = tty_buf.echo_neg_sndopt_restarts + 1;
						/* METER */
     end;

is_parent_mpx:					/* Check for match of channel's parent mpx type and input mpx type */
     proc (parent_mpx_type) returns (bit (1));

dcl parent_mpx_type fixed bin;
dcl temp_lctep ptr;
     
          lctp = tty_buf.lct_ptr;
	lctep = addr (lct.lcte_array (devx));
	if lcte.major_channel_devx ^= 0 then do;
	     temp_lctep = addr (lct.lcte_array (lcte.major_channel_devx));
	     if temp_lctep->lcte.channel_type = parent_mpx_type then return ("1"b);
	end;
	else if lcte.channel_type = parent_mpx_type then return ("1"b);
	return ("0"b);
     end is_parent_mpx;
     

/* BEGIN MESSAGE DOCUMENTATION


   Message:
   tty_interrupt: unrecognized interrupt type (N) for devx D

   S:	$crash

   T:	$run

   M:	An unrecognized interrupt type has been reported for the nonmultiplexed
   channel whose device index is D.

   A:	$inform


   END MESSAGE DOCUMENTATION */

     end /* tty_interrupt */;
