/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style4,delnl,insnl,^ifthendo */
channel_manager:
     procedure;

/*  This procedure accepts calls to perform various channel management
   functions.  Each such call is directed through a transfer vector
   to the appropriate module according to channel type and functional
   type.  The specified channel is locked before forwarding the call
   and unlocked upon return.
*/

/* Coded 7/31/78 by J. Stern */
/* Tracing added February 1980 */
/* Metering added April 1980 by C. Hornig */
/* Metering corrected October 1980 by Robert Coren to avoid double-counting of output characters */
/* copy_meters control added December 1980 by Robert Coren */
/* Modified 6 Apr 82, W. Olin Sibert, to add TIMER interrupt handling */

/* Parameters */

dcl  pm_devx fixed bin;
dcl  pm_info_ptr ptr;
dcl  pm_chain_ptr ptr;
dcl  pm_more_input_flag bit (1) aligned;
dcl  pm_control_type char (*);
dcl  pm_modes_change_list_ptr ptr;
dcl  pm_modes char (*);
dcl  pm_int_type fixed bin;
dcl  pm_int_data bit (72) aligned;
dcl  pm_code fixed bin (35);


/* Automatic */

dcl  queued_entry bit (1) aligned;
dcl  int_type fixed bin;
dcl  devx fixed bin;
dcl  subchan fixed bin;
dcl  locked bit (1) aligned;
dcl  minor_lctep ptr;
dcl  time_in fixed bin (71);


/* Based */

dcl  1 minor_lcte aligned like lcte based (minor_lctep);


/* Conditions */

dcl  cleanup condition;


/* Constants */

dcl  crash_system fixed bin int static options (constant) init (1);
dcl  int_type_names (17) char (16) aligned static options (constant)
	init ("dialup", "hangup", "crash", "send_output", "input_available", "accept_input", "input_rejected", "quit",
	"line_status", "dial_status", "wru_timeout", "space_available", "ack_echnego_init", "ack_echnego_stop", "timer",
	"user", "masked");

/* External static */

dcl  pds$process_id bit (36) ext;
dcl  pds$virtual_delta fixed bin (71) ext;


/* Builtins */

dcl  (addr, clock, null, pointer, rel, unspec) builtin;


/* Entries */

dcl  mcs_trace entry options (variable);
dcl  mcs_trace$buffer_chain entry (fixed bin, pointer);
dcl  tty_lock$lock_channel entry (fixed bin, fixed bin (35));
dcl  tty_lock$unlock_channel entry (fixed bin);
dcl  tty_lock$lock_channel_int entry (fixed bin, fixed bin, bit (72) aligned, bit (1) aligned);
dcl  tty_lock$unlock_channel_int entry (fixed bin);
dcl  tty_lock$queue_interrupt entry (fixed bin, fixed bin, bit (72) aligned, fixed bin);
dcl  syserr entry options (variable);
%page;
/* * * * * * * * * * READ * * * * * * * * * * */

read:
     entry (pm_devx, pm_chain_ptr, pm_more_input_flag, pm_code);

	call setup_major (subchan);

	if tty_buf.trace.enable
	then if tty_buf.trace.read
	     then call mcs_trace (pm_devx, "read");

	on cleanup call unlock_channel ();
	call lock_channel ();
	read_ev = make_entry (READ, (lcte.channel_type));
	call read_ev ((lcte.data_base_ptr), subchan, pm_chain_ptr, pm_more_input_flag, pm_code);
	if pm_code = 0
	then if pm_chain_ptr ^= null ()
	     then do blockp = pm_chain_ptr		/* walk chain to count bytes */
		     repeat (pointer (ttybp, buffer.next)) while (rel (blockp) ^= ""b);
		minor_lcte.meters.in_bytes = minor_lcte.meters.in_bytes + buffer.tally;
	     end;
	call unlock_channel ();

	if tty_buf.trace.enable
	then if tty_buf.trace.read
	     then do;
		call mcs_trace (pm_devx, "read: ^[code ^d ^;^s^]^[chain at ^p ^;^s^]^[more_input^]", (pm_code ^= 0),
		     pm_code, (pm_chain_ptr ^= null ()), pm_chain_ptr, pm_more_input_flag);
		if tty_buf.trace.data
		then call mcs_trace$buffer_chain (pm_devx, pm_chain_ptr);
	     end;

	call meter_call (minor_lcte.meters.in);
	return;

/* * * * * * * * * * WRITE * * * * * * * * * * */

write:
     entry (pm_devx, pm_chain_ptr, pm_code);

	call setup_major (subchan);

	if tty_buf.trace.enable
	then if tty_buf.trace.write
	     then do;
		call mcs_trace (pm_devx, "write: ^p:  ^d bytes ^[etc.^]", pm_chain_ptr, pm_chain_ptr -> buffer.tally,
		     (pm_chain_ptr -> buffer.next ^= 0));
		if tty_buf.trace.data
		then call mcs_trace$buffer_chain (pm_devx, pm_chain_ptr);
	     end;

	on cleanup call unlock_channel ();
	call lock_channel ();
	do blockp = pm_chain_ptr			/* walk chain to count bytes */
	     repeat (pointer (ttybp, buffer.next)) while (rel (blockp) ^= ""b);
	     minor_lcte.meters.out_bytes = minor_lcte.meters.out_bytes + buffer.tally;
	end;
	write_ev = make_entry (WRITE, (lcte.channel_type));
	call write_ev ((lcte.data_base_ptr), subchan, pm_chain_ptr, pm_code);

	if pm_chain_ptr ^= null ()			/* multiplexer didn't take it all */
	then do blockp = pm_chain_ptr			/* subtract out those it didn't take */
		repeat (pointer (ttybp, buffer.next)) while (rel (blockp) ^= ""b);
	     minor_lcte.meters.out_bytes = minor_lcte.meters.out_bytes - buffer.tally;
	end;

	call unlock_channel ();

	if tty_buf.trace.enable
	then if tty_buf.trace.write
	     then if (pm_chain_ptr ^= null ()) | (pm_code ^= 0)
		then call mcs_trace (pm_devx, "write: ^[code ^d ^;^s^]chain left at ^p", pm_code, pm_chain_ptr);

	call meter_call (minor_lcte.meters.out);
	return;

/* * * * * * * * * * CONTROL * * * * * * * * * */

control:
     entry (pm_devx, pm_control_type, pm_info_ptr, pm_code);

	call setup_major (subchan);

	if tty_buf.trace.enable
	then if tty_buf.trace.control
	     then call mcs_trace (pm_devx, "control: ^a ^p", pm_control_type, pm_info_ptr);

	on cleanup call unlock_channel ();
	call lock_channel ();
	control_ev = make_entry (CONTROL, (lcte.channel_type));
	call control_ev ((lcte.data_base_ptr), subchan, pm_control_type, pm_info_ptr, pm_code);
	call unlock_channel ();

	call meter_call (minor_lcte.meters.control);
	if pm_control_type = "copy_meters"		/* we have to do something about this */
	then minor_lcte.saved_meters_ptr -> saved_meters = minor_lcte.meters;

	else if pm_control_type = "get_meters"		/* this too */
	then call get_lc_meters;

	return;

/* * * * * * * * * * SET_MODES * * * * * * * * * * */

set_modes:
     entry (pm_devx, pm_modes_change_list_ptr, pm_code);

	call setup_major (subchan);

	if tty_buf.trace.enable
	then if tty_buf.trace.modes
	     then call mcs_trace (pm_devx, "set_modes: ^p", pm_modes_change_list_ptr);

	on cleanup call unlock_channel ();
	call lock_channel ();
	set_modes_ev = make_entry (SET_MODES, (lcte.channel_type));
	call set_modes_ev ((lcte.data_base_ptr), subchan, pm_modes_change_list_ptr, pm_code);
	call unlock_channel ();

	call meter_call (minor_lcte.meters.control);
	return;

/* * * * * * * * * * * CHECK_MODES * * * * * * * * * */

check_modes:
     entry (pm_devx, pm_modes_change_list_ptr, pm_code);

	call setup_major (subchan);

	if tty_buf.trace.enable
	then if tty_buf.trace.modes
	     then call mcs_trace (pm_devx, "check_modes: ^p", pm_modes_change_list_ptr);

	on cleanup call unlock_channel ();
	call lock_channel ();
	check_modes_ev = make_entry (CHECK_MODES, (lcte.channel_type));
	call check_modes_ev ((lcte.data_base_ptr), subchan, pm_modes_change_list_ptr, pm_code);
	call unlock_channel ();

	call meter_call (minor_lcte.meters.control);
	return;

/* * * * * * * * * * * GET_MODES * * * * * * * * * */

get_modes:
     entry (pm_devx, pm_modes, pm_code);

	call setup_major (subchan);

	if tty_buf.trace.enable
	then if tty_buf.trace.modes
	     then call mcs_trace (pm_devx, "get_modes");

	on cleanup call unlock_channel ();
	call lock_channel ();
	get_modes_ev = make_entry (GET_MODES, (lcte.channel_type));
	call get_modes_ev ((lcte.data_base_ptr), subchan, pm_modes, pm_code);
	call unlock_channel ();

	call meter_call (minor_lcte.meters.control);
	return;

/* * * * * * * * * * INTERRUPT * * * * * * * * * * */

interrupt:
     entry (pm_devx, pm_int_type, pm_int_data);

	queued_entry = "0"b;


interrupt_common:
	int_type = pm_int_type;

	call setup ();

	on cleanup call syserr (crash_system, "channel_manager: Cleanup while processing interrupt for devx ^d.", devx);
	if ^queued_entry
	then do;
	     call tty_lock$lock_channel_int (devx, int_type, pm_int_data, locked);
	     if ^locked
	     then do;
		if tty_buf.trace.enable
		then if tty_buf.trace.interrupt
		     then call mcs_trace (devx, "int: queued ^a ^24.3b", int_type_names (int_type), pm_int_data);
		return;				/* All finished: interrupt was queued for (locked) channel */
	     end;
	end;

	if tty_buf.trace.enable
	then if tty_buf.trace.interrupt
	     then do;
		call mcs_trace (devx, "int: proc ^[queued ^]^a ^24.3b", queued_entry, int_type_names (int_type),
		     pm_int_data);
		if int_type = ACCEPT_INPUT
		then if tty_buf.trace.data
		     then do;
			unspec (rtx_info) = pm_int_data;
			call mcs_trace$buffer_chain (devx, pointer (ttybp, rtx_info.chain_head));
		     end;
	     end;

	interrupt_ev = make_entry (INTERRUPT, (lcte.channel_type));
	call interrupt_ev ((lcte.data_base_ptr), int_type, pm_int_data);

	if ^queued_entry
	then call tty_lock$unlock_channel_int (devx);

	if /* case */ int_type = ACCEPT_INPUT
	then do;
	     unspec (rtx_info) = pm_int_data;
	     lcte.meters.in_bytes = lcte.meters.in_bytes + rtx_info.input_count;
	     call meter_interrupt (lcte.meters.in);
	end;
	else if int_type = SEND_OUTPUT
	then do;
	     call meter_interrupt (lcte.meters.out);
	end;
	else call meter_interrupt (lcte.meters.control);

	return;

/* * * * * * * * * * QUEUED_INTERRUPT * * * * * * * * * */

queued_interrupt:
     entry (pm_devx, pm_int_type, pm_int_data);		/* called with channel already locked */

	queued_entry = "1"b;
	go to interrupt_common;

/* * * * * * * * * * INTERRUPT_LATER * * * * * * * * * */

interrupt_later:
     entry (pm_devx, pm_int_type, pm_int_data);

/* This entry is used to queue an interrupt for a subchannel unconditionally; the interrupt
   is processed when it is time to unlock the major channel */

	int_type = pm_int_type;

	call setup ();

	if tty_buf.trace.enable
	then if tty_buf.trace.interrupt
	     then call mcs_trace (devx, "int: queued ^a ^24.3b", int_type_names (int_type), pm_int_data);

	on cleanup call syserr (crash_system, "channel_manager: Cleanup while queuing interrupt for devx ^d.", devx);

	call tty_lock$queue_interrupt ((lcte.major_channel_devx), int_type, pm_int_data, devx);
	return;

/* * * * * * * * * SETUP * * * * * * * * * */

setup:
     proc;

	locked = "0"b;
	ttybp = addr (tty_buf$);
	lctp = tty_buf.lct_ptr;

	time_in = clock () - pds$virtual_delta;

	devx = pm_devx;
	if devx < 1 | devx > lct.max_no_lctes
	then call syserr (crash_system, "channel_manager: Invalid devx specified.  ^o", devx);

	lctep = addr (lct.lcte_array (devx));

	cmtvp = addr (cmtv$cmtv);

     end setup;					/* setup */

/* * * * * * * * * * * SETUP_MAJOR * * * * * * * ** */

setup_major:
     proc (subchan);

dcl  subchan fixed bin;


	call setup ();
	minor_lctep = lctep;
	if lcte.lock ^= pds$process_id
	then call syserr (crash_system, "channel_manager: Channel not locked by process. (devx = ^o)", devx);
	subchan = lcte.subchannel;

	devx = lcte.major_channel_devx;
	lctep = addr (lct.lcte_array (devx));

     end setup_major;				/* setup_major */

/* * * * * * * * * * METER_CALL * * * * * * * * * */

meter_call:
     procedure (Meters);
dcl  1 Meters aligned like lcte.meters.in;

	Meters.calls = Meters.calls + 1;
	Meters.call_time = Meters.call_time + clock () - pds$virtual_delta - time_in;
	return;

/* * * * * * * * * * METER_INTERRUPT * * * * * * * * * */

meter_interrupt:
     entry (Meters);

	Meters.interrupts = Meters.interrupts + 1;
	Meters.interrupt_time = Meters.interrupt_time + clock () - pds$virtual_delta - time_in;
	return;
     end meter_call;

/* * * * * * * * * * GET_LC_METERS * * * * * * * * * * */

get_lc_meters:
     proc;

/* return logical channel meters in response to get_meters order */

dcl  lcmp ptr;
dcl  info_ptr ptr;

	info_ptr = pm_info_ptr;
	info_ptr -> get_comm_meters_info.parent_type = lcte.channel_type;
	lcmp = info_ptr -> get_comm_meters_info.logical_chan_ptr;
	lcmp -> logical_chan_meters.current_meters = minor_lcte.meters;
	lcmp -> logical_chan_meters.saved_meters = minor_lcte.saved_meters_ptr -> saved_meters;
	return;
     end get_lc_meters;

/* * * * * * * * * * MAKE_ENTRY * * * * * * * * * * */

make_entry:
     proc (entry_type, chan_type) returns (entry variable); /* kludges together an entry variable */

dcl  entry_type fixed bin;
dcl  chan_type fixed bin;

dcl  code_ptr ptr;
dcl  code_word fixed bin based (code_ptr);

dcl  new_entry entry variable;
dcl  1 entry_var aligned,
       2 code_ptr ptr,
       2 env_ptr ptr;


	code_ptr = addr (cmtv.entries (entry_type, cmtv.chan_type_index (chan_type)));
	if code_word = 0				/* undefined entry point */
	then new_entry = undefined_entry;
	else do;
	     entry_var.code_ptr = code_ptr;
	     entry_var.env_ptr = null;
	     unspec (new_entry) = unspec (entry_var);
	end;
	return (new_entry);
     end make_entry;				/* get_entry */

undefined_entry:
     procedure;					/* for bad cmtv pointers */
	return;
     end undefined_entry;

/* * * * * * * * * * * * LOCK_CHANNEL * * * * * * * * * */

lock_channel:
     proc;

dcl  code fixed bin (35);


	if lcte.special_lock			/* not for us to lock */
	then return;

	call tty_lock$lock_channel (devx, code);
	if code ^= 0
	then call syserr (crash_system, "channel_manager: Cannot lock channel for devx ^o (code = ^o)", devx, code);
	locked = "1"b;

     end lock_channel;				/* lock_channel */

/* * * * * * * * * * * UNLOCK_CHANNEL * * * * * * * * * * */

unlock_channel:
     proc;

	if locked
	then call tty_lock$unlock_channel (devx);
	locked = "0"b;

     end unlock_channel;				/* unlock_channel */

%include lct;

%include cmtv;

%include tty_buf;

%include mcs_interrupt_info;
%include tty_buffer_block;
%include get_comm_meters_info;

     end;						/* channel_manager_ */

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   channel_manager: Cleanup while processing interrupt for devx N.

   S:	$crash

   T:	$run

   M:	The cleanup condition was signalled while processing an
   interrupt for the channel with devx N.

   A:	$inform


   Message:
   channel_manager: Error while processing interrupt for devx N.  REASON

   S:	$crash

   T:	$run

   M:	An error occurred while processing an interrupt for the channel
   with devx N.  The specific kind of error is explained by REASON.

   END MESSAGE DOCUMENTATION */
