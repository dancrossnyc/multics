" ***********************************************************
" *                                                         *
" * Copyright, (C) BULL HN Information Systems Inc., 1989   *
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1988                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

" HISTORY COMMENTS:
"  1) change(88-06-15,Berno), approve(88-07-13,MCR7928),
"     audit(88-07-05,Parisek), install(88-07-19,MR12.2-1061):
"     Add transfers to the uncp multiplexer interface for the DSA gateway.
"  2) change(88-07-07,Beattie), approve(88-06-27,MCR7926),
"     audit(88-08-03,Brunelle), install(88-08-08,MR12.2-1082):
"     Add transfers for X.25 lap multiplexer.
"  3) change(89-03-20,Parisek), approve(89-06-01,MCR8110),
"     audit(89-10-09,Farley), install(89-10-25,MR12.3-1100):
"     Add transfers to protocol_mpx entries.
"                                                      END HISTORY COMMENTS

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
"	cmtv --- channel manager transfer vector
"
"	This source segment defines a data base containing a transfer
"	vector used by the channel_manager and priv_channel_manager
"	procedures.  It has the following structure:
"
"
"	dcl 1 cmtv aligned based (addr (cmtv$)),
"	      2 no_channel_types fixed bin,
"	      2 pad fixed bin,
"	      2 chan_type_index (0:16) fixed bin,
"	      2 entries (no_entry_types, 0 refer (cmtv.no_channel_types)) bit (72);
"
"
"	Created 9/21/78 by J. Stern
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


	macro	prologue

	name	cmtv
	set	.cur_index,0
	set	.tty_index,0
	set	.fnp_index,0
	set	.user1_index,0
	set	.user2_index,0
	set	.user3_index,0
	set	.user4_index,0
	set	.user5_index,0
	set	.ibm3270_index,0
	set	.vip7760_index,0
	set	.sty_index,0
	set	.lap_index,0
	set	.x25_index,0
	set	.hasp_index,0
	set	.uncp_index,0
	set	.cxi_index,0
	set	.system1_index,0
	set	.protocol_index,0

	&end


	macro	epilogue

	use	.text.
	segdef	cmtv
cmtv:	null
	zero	0,.cur_index
	dec	0
	zero	0,.tty_index
	zero	0,.fnp_index
	zero	0,.user1_index
	zero	0,.user2_index
	zero	0,.user3_index
	zero	0,.user4_index
	zero	0,.user5_index
	zero	0,.ibm3270_index
	zero	0,.vip7760_index
	zero	0,.sty_index
	zero	0,.lap_index
	zero	0,.x25_index
	zero	0,.hasp_index
	zero	0,.uncp_index
	zero	0,.cxi_index
	zero	0,.system1_index
	zero	0,.protocol_index


	join	/text/.init_channel.
	join	/text/.terminate_channel.
	join	/text/.init_multiplexer.
	join	/text/.terminate_multiplexer.
	join	/text/.start.
	join	/text/.stop.
	join	/text/.shutdown.
	join	/text/.priv_control.
	join	/text/.hpriv_control.
	join	/text/.read.
	join	/text/.write.
	join	/text/.control.
	join	/text/.set_modes.
	join	/text/.check_modes.
	join	/text/.get_modes.
	join	/text/.interrupt.

	maclist	on
	end

	&end

" The following macros define valid entry type names:

	macro	init_channel
	&end
	macro	terminate_channel
	&end
	macro	init_multiplexer
	&end
	macro	terminate_multiplexer
	&end
	macro	start
	&end
	macro	stop
	&end
	macro	shutdown
	&end
	macro	priv_control
	&end
	macro	hpriv_control
	&end
	macro	read
	&end
	macro	write
	&end
	macro	control
	&end
	macro	set_modes
	&end
	macro	check_modes
	&end
	macro	get_modes
	&end
	macro	interrupt
	&end


" The following macros define valid channel type names:

	macro	tty
	&end
	macro	fnp
	&end
	macro	user1
	&end
	macro	user2
	&end
	macro	user3
	&end
	macro	user4
	&end
	macro	user5
	&end
	macro	ibm3270
	&end
	macro	vip7760
	&end
	macro	sty
	&end
	macro	lap
	&end
	macro	x25
	&end
	macro	hasp
	&end
	macro	uncp
	&end
	macro	cxi
	&end
	macro	system1
	&end
	macro	protocol
	&end

	macro	add_entry

	&1
	use	.&1.
	getlp
	tra	&2$&1
	set	.&1_incr,0

	&end


	macro	type

	&1
	set	.cur_index,.cur_index+1
	set	.&1_index,.cur_index

	set	.init_channel_incr,2
	set	.terminate_channel_incr,2
	set	.init_multiplexer_incr,2
	set	.terminate_multiplexer_incr,2
	set	.start_incr,2
	set	.stop_incr,2
	set	.shutdown_incr,2
	set	.priv_control_incr,2
	set	.hpriv_control_incr,2
	set	.read_incr,2
	set	.write_incr,2
	set	.control_incr,2
	set	.set_modes_incr,2
	set	.check_modes_incr,2
	set	.get_modes_incr,2
	set	.interrupt_incr,2

&R3&(	add_entry	&i,&2
&)

	use	.init_channel.
	bss	,.init_channel_incr
	use	.terminate_channel.
	bss	,.terminate_channel_incr
	use	.init_multiplexer.
	bss	,.init_multiplexer_incr
	use	.terminate_multiplexer.
	bss	,.terminate_multiplexer_incr
	use	.start.
	bss	,.start_incr
	use	.stop.
	bss	,.stop_incr
	use	.shutdown.
	bss	,.shutdown_incr
	use	.priv_control.
	bss	,.priv_control_incr
	use	.hpriv_control.
	bss	,.hpriv_control_incr
	use	.read.
	bss	,.read_incr
	use	.write.
	bss	,.write_incr
	use	.control.
	bss	,.control_incr
	use	.set_modes.
	bss	,.set_modes_incr
	use	.check_modes.
	bss	,.check_modes_incr
	use	.get_modes.
	bss	,.get_modes_incr
	use	.interrupt.
	bss	,.interrupt_incr

	&end

	maclist	off

" The transfer vector definition has the following syntax:
"
"
" <transfer_vector> := prologue <type_list> epilogue
" <type_list> := <type_stmt> | <type_stmt> <type_list>
" <type_stmt> := type <channel_type> , <global_seg_name> , <entry_list>
" <entry_list> := <entry> | <entry> , <entry_list>
" <entry> := <entry_type> | ( <entry_type> , <local_seg_name> )
" <channel_type> := tty | fnp | user1 | user2 | user3 | user4 | user5 | ibm3270
"		| vip7760 | sty | lap | x25 | hasp | uncp | cxi | system1
"	          | protocol
" <entry_type> := init_channel | terminate_channel | init_multiplexer | terminate_multiplexer |
		start | stop | shutdown | priv_control | hpriv_control | read | write |
		control | set_modes | check_modes | get_modes | interrupt
" <global_seg_name> := {the name of a procedure segment}
" <local_seg_name> := {the name of a procedure segment}
"
"
" Each "type" statement defines a channel type.
" It specifies the valid entry types for the channel type.
" It specifies the transfer vector target for each valid entry type.
" The transfer vector target for an entry type is an entrypoint
" in a procedure segment.
" The name of the entrypoint is always the name of the entry type.
" The segment name may optionally be specified by a local segment name.
" If no local segment name is given, then the global segment name is used.



	prologue

	type	tty,tty_index,
		init_channel,
		terminate_channel,
		(interrupt,tty_interrupt)

	type	fnp,fnp_multiplexer,
		init_multiplexer,
		terminate_multiplexer,
		start,
		stop,
		shutdown,
		priv_control,
		hpriv_control,
		read,
		write,
		control,
		set_modes,
		check_modes,
		get_modes

	type	vip7760,polled_vip_mpx,
		(init_multiplexer,priv_polled_vip_mpx),
		(terminate_multiplexer,priv_polled_vip_mpx),
		(start,priv_polled_vip_mpx),
		(stop,priv_polled_vip_mpx),
		(shutdown,priv_polled_vip_mpx),
		(hpriv_control,priv_polled_vip_mpx),
		(priv_control,priv_polled_vip_mpx),
		read,
		write,
		check_modes,
		set_modes,
		get_modes,
		control,
		interrupt

	type	ibm3270,ibm3270_mpx,
		(init_multiplexer,priv_ibm3270_mpx),
		(terminate_multiplexer,priv_ibm3270_mpx),
		(start,priv_ibm3270_mpx),
		(stop,priv_ibm3270_mpx),
		(shutdown,priv_ibm3270_mpx),
		(priv_control,priv_ibm3270_mpx),
		(hpriv_control,priv_ibm3270_mpx),
		control,
		read,
		check_modes,
		set_modes,
		get_modes,
		write,
		interrupt

          type      lap,lap_simplex,
                    init_multiplexer,terminate_multiplexer,
                    start,stop,shutdown,
                    hpriv_control,priv_control,control,
                    check_modes,set_modes,get_modes,
                    write,
                    interrupt

	type	x25,x25_mpx,
		(init_multiplexer,priv_x25_mpx),
		(terminate_multiplexer,priv_x25_mpx),
		(start,priv_x25_mpx),
		(stop,priv_x25_mpx),
		(shutdown,priv_x25_mpx),
		(hpriv_control,priv_x25_mpx),
		(priv_control,priv_x25_mpx),
		control,
		check_modes,set_modes,get_modes,
		write,
		interrupt

	type	sty,sty_mpx,
		init_multiplexer,terminate_multiplexer,
		start,stop,shutdown,
		read,write,control,
		get_modes,set_modes,check_modes

	type	hasp,hasp_mpx,
		(init_multiplexer,priv_hasp_mpx),
		(terminate_multiplexer,priv_hasp_mpx),
		(start,priv_hasp_mpx),
		(stop,priv_hasp_mpx),
		(shutdown,priv_hasp_mpx),
		(priv_control,priv_hasp_mpx),
		(hpriv_control,priv_hasp_mpx),
		read,write,interrupt,control,
		check_modes,set_modes,get_modes

	type	uncp,uncp_multiplexer,
		init_multiplexer,
		terminate_multiplexer,
		start,
		stop,
		shutdown,
		priv_control,
		hpriv_control,
		read,
		write,
		control,
		set_modes,
		check_modes,
		get_modes
                                          
	type	protocol,protocol_mpx,
		init_multiplexer,
		terminate_multiplexer,
		start,
		stop,
		shutdown,
		priv_control,
		hpriv_control,
		interrupt
	epilogue
