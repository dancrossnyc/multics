/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style4,delnl,insnl,tree,ifthenstmt,indnoniterend */
ios_write_around_:
     procedure;

/*  Modified 5/75 by S.E. Barr to implement real tty_ dim */
/* Modified May 1981 by C. Hornig to use legal PL/1 etc. */

/* Parameters. */

dcl  actlen fixed (21);
dcl  args (*) char (*) varying;
dcl  extend_bit bit (1) aligned;
dcl  code fixed bin (35);
dcl  buflen fixed (21);
dcl  bufptr ptr;
dcl  infptr ptr;
dcl  iocb_ptr ptr;
dcl  loud_sw bit (1) aligned;
dcl  mode fixed;
dcl  newmode char (*);
dcl  oldmode char (*);
dcl  order char (*);
dcl  u1 fixed;
dcl  u2 fixed (21);

/* Automatic. */

dcl  actual_iocb_ptr ptr;
dcl  blkptr ptr;
dcl  ch128 char (128);
dcl  device char (201) varying;
dcl  hisname char (32) varying;
dcl  1 ics aligned,
       2 sdbptr ptr,
       2 dimptr ptr,
       2 entry fixed;
dcl  m fixed (21);
dcl  mask bit (36) aligned;
dcl  myname char (32) varying;
dcl  n fixed (21);
dcl  p ptr;
dcl  1 status aligned,
       2 code fixed (35),
       2 bits bit (36);

/* Based. */

dcl  system_area area based (get_system_free_area_ ());
dcl  1 cm_str based (infptr),
       2 len fixed bin (21),
       2 str char (cm_str.len);
dcl  1 blk aligned based (blkptr),
       2 sdbptr ptr,
       2 dimptr ptr,
       2 attach char (207) varying,
       2 open char (27) varying;
dcl  char_aligned_based char (9999) aligned based;

/* Procedures. */

dcl  char_offset_ entry (ptr) returns (fixed bin (21)) reducible;
dcl  com_err_ ext entry options (variable);
dcl  continue_to_signal_ entry (fixed bin (35));
dcl  get_system_free_area_ entry () returns (ptr);
dcl  hcs_$set_ips_mask ext entry (bit (36) aligned, bit (36) aligned);
dcl  hcs_$reset_ips_mask ext entry (bit (36) aligned, bit (36) aligned);
dcl  iox_$ios_call ext entry options (variable);
dcl  iox_$ios_call_attach ext entry options (variable);
dcl  ntw_$ntw_module ext;
dcl  mrd_$mrd_module ext;
dcl  oc_$oc_module ext;

/* Constants. */

dcl  error_table_$bad_mode fixed (35) ext;
dcl  error_table_$end_of_info fixed (35) ext;
dcl  error_table_$noarg fixed (35) ext;
dcl  error_table_$no_operation fixed (35) ext;
dcl  error_table_$not_detached fixed (35) ext;
dcl  error_table_$long_record fixed (35) ext;
dcl  error_table_$wrong_no_of_args fixed (35) ext;

dcl  detach_offset fixed int static init (1) options (constant);
dcl  read_offset fixed int static init (2) options (constant);
dcl  write_offset fixed int static init (3) options (constant);
dcl  abort_offset fixed int static init (4) options (constant);
dcl  order_offset fixed int static init (5) options (constant);
dcl  resetread_offset fixed int static init (6) options (constant);
dcl  resetwrite_offset fixed int static init (7) options (constant);
dcl  changemode_offset fixed int static init (14) options (constant);
dcl  Qnl char (1) aligned int static init ("
") options (constant);

/* Built-in. */

dcl  (addr, addrel, hbound, mod, null, pointer, substr) builtin;

/* Condition */

dcl  any_other condition;
%page;
join:
	mask = ""b;
	on any_other call handler;

	if hbound (args, 1) < 1 then call error (error_table_$noarg, (iocb_ptr -> iocb.name));
	if hbound (args, 1) > 1 then call error (error_table_$wrong_no_of_args, args (2));

	ics.sdbptr = null ();
	call hcs_$set_ips_mask (""b, mask);
	if iocb_ptr -> iocb.attach_descrip_ptr ^= null ()
	then call error (error_table_$not_detached, (iocb_ptr -> iocb.name));
	call iox_$ios_call_attach (iocb_ptr -> iocb.name, (hisname), (args (1)), "", status, addr (ics));
	if status.code ^= 0 then call error (status.code, device);
	allocate blk in (system_area) set (blkptr);
	blkptr -> blk.sdbptr = ics.sdbptr;
	blkptr -> blk.dimptr = ics.dimptr;
	blkptr -> blk.attach = myname || " " || args (1);
	iocb_ptr -> iocb.attach_descrip_ptr = addr (blkptr -> blk.attach);
	iocb_ptr -> iocb.attach_data_ptr = blkptr;
	iocb_ptr -> iocb.detach_iocb = ios_write_around_detach;
	iocb_ptr -> iocb.open = ios_write_around_open;
	call iox_$propagate (iocb_ptr);
	call hcs_$reset_ips_mask (mask, mask);
	code = 0;
	return;

/* End of entry point ..... attach (iocb_ptr,args,loud_sw) ..... */





/* Internal procedure to handle all attach errors.  Calls "com_err_" if the "loud_sw"
   is set.  In any case, returns to caller of attach external procedure with proper
   error code after ensuring that the IPS interrupt mask is restored. */

error:
     procedure (c, mess);
dcl  c fixed (35) parameter;
dcl  mess varying char (*) aligned parameter;

	if mask ^= ""b then call hcs_$reset_ips_mask (mask, mask);
	if loud_sw then call com_err_ (c, myname, "^a", mess);
	status.code = c;
	go to return;
     end error;





return:
	code = status.code;
	return;





/* Internal procedure to handle faults while IPS interrupts
   are masked.  While not masked, any signals are simply
   passed on up the stack to their normal handlers.  For a
   fault while masked, the process is terminated (with the
   reason "unable to do critical I/O") because the I/O
   control blocks are in an inconsistent state, and we can
   tolerate neither spawning a command loop with interrupts
   masked nor a restart with a possibly changed mask. */

/* Actually, this is pretty silly. The worst that can happen
   is a fatal error, and that is unlikely. So we just fix the
   mask and hope for the best. */

handler:
     procedure;

	if mask ^= ""b then do;
	     call hcs_$reset_ips_mask (mask, mask);
	     mask = ""b;
	     end;

	call continue_to_signal_ ((0));

     end handler;




/* Beginning of entry point ..... netd_$netd_attach(iocb_ptr,args,loud_sw) ..... */

netd_attach:
     entry (iocb_ptr, args, loud_sw, code);

	myname = "netd_";
	hisname = "ntw_";
	ics.dimptr = addr (ntw_$ntw_module);
	go to join;

/* End of entry point ..... netd_$netd_attach(iocb_ptr,args,loud_sw) ..... */






/* Beginning of entry point ..... mr_$mr_attach(iocb_ptr,args,loud_sw) ..... */

mr_attach:
     entry (iocb_ptr, args, loud_sw, code);

	myname = "mr_";
	hisname = "mrd_";
	ics.dimptr = addr (mrd_$mrd_module);
	go to join;

/* End of entry point ..... mr_$mr_attach(iocb_ptr,args,loud_sw) ..... */





/* Beginning of entry point ..... ocd_$ocd_attach(iocb_ptr,args,loud_sw) ..... */

ocd_attach:
     entry (iocb_ptr, args, loud_sw, code);

	myname = "ocd_";
	hisname = "oc_";
	ics.dimptr = addr (oc_$oc_module);
	go to join;

/* End of entry point ..... ocd_$ocd_attach(iocb_ptr,args,loud_sw) ..... */
%page;
/* Handler for the 'detach_iocb' I/O operation. */

ios_write_around_detach:
     entry (iocb_ptr, code);

	mask = ""b;
	on any_other call handler;
	call hcs_$set_ips_mask (""b, mask);
	blkptr = iocb_ptr -> iocb.attach_data_ptr;
	ics.sdbptr = blkptr -> blk.sdbptr;
	ics.dimptr = blkptr -> blk.dimptr;
	ics.entry = detach_offset;
	call iox_$ios_call (addr (ics), "", "retain", status);
	if status.code ^= 0 then do;
	     call hcs_$reset_ips_mask (mask, mask);
	     code = status.code;
	     return;
	     end;
	free blkptr -> blk;
	iocb_ptr -> iocb.attach_descrip_ptr, iocb_ptr -> iocb.attach_data_ptr = null ();
	iocb_ptr -> iocb.detach_iocb = iox_$err_not_attached;
	iocb_ptr -> iocb.open = iox_$err_not_attached;
	call iox_$propagate (iocb_ptr);
	call hcs_$reset_ips_mask (mask, mask);
	code = 0;
	return;

/* End of 'detach_iocb' handler. */
%page;
/* Handler for the 'open' I/O operation. */

ios_write_around_open:
     entry (iocb_ptr, mode, extend_bit, code);

	mask = ""b;
	on any_other call handler;
	call hcs_$set_ips_mask (""b, mask);
	actual_iocb_ptr = iocb_ptr -> iocb.actual_iocb_ptr;
	blkptr = actual_iocb_ptr -> iocb.attach_data_ptr;
	if /* case */ mode = Stream_input then blkptr -> blk.open = "stream_input";
	else if mode = Stream_output then blkptr -> blk.open = "stream_output";
	else if mode = Stream_input_output then blkptr -> blk.open = "stream_input_output";
	else do;
	     call hcs_$reset_ips_mask (mask, mask);
	     code = error_table_$bad_mode;
	     return;
	     end;
	actual_iocb_ptr -> iocb.open_descrip_ptr = addr (blkptr -> blk.open);
	actual_iocb_ptr -> iocb.detach_iocb = iox_$err_not_closed;
	actual_iocb_ptr -> iocb.open = iox_$err_not_closed;
	actual_iocb_ptr -> iocb.close = ios_write_around_close;
	if mode ^= Stream_output then do;
	     actual_iocb_ptr -> iocb.get_line = ios_write_around_get_line;
	     actual_iocb_ptr -> iocb.get_chars = ios_write_around_get_chars;
	     actual_iocb_ptr -> iocb.position = ios_write_around_position;
	     end;
	if mode ^= Stream_input then do;
	     actual_iocb_ptr -> iocb.put_chars = ios_write_around_put_chars;
	     end;
	actual_iocb_ptr -> iocb.modes = ios_write_around_modes;
	actual_iocb_ptr -> iocb.control = ios_write_around_control;
	call iox_$propagate (actual_iocb_ptr);
	call hcs_$reset_ips_mask (mask, mask);
	code = 0;
	return;

/* End of 'open' handler. */
%page;
/* Handler for the 'close' I/O operation. */

ios_write_around_close:
     entry (iocb_ptr, code);

	mask = ""b;
	on any_other call handler;
	call hcs_$set_ips_mask (""b, mask);
	actual_iocb_ptr = iocb_ptr -> iocb.actual_iocb_ptr;
	actual_iocb_ptr -> iocb.open_descrip_ptr = null ();
	actual_iocb_ptr -> iocb.detach_iocb = ios_write_around_detach;
	actual_iocb_ptr -> iocb.open = ios_write_around_open;
	actual_iocb_ptr -> iocb.close = iox_$err_not_open;
	actual_iocb_ptr -> iocb.get_line = iox_$err_not_open;
	actual_iocb_ptr -> iocb.get_chars = iox_$err_not_open;
	actual_iocb_ptr -> iocb.put_chars = iox_$err_not_open;
	actual_iocb_ptr -> iocb.control = iox_$err_not_open;
	actual_iocb_ptr -> iocb.modes = iox_$err_not_open;
	actual_iocb_ptr -> iocb.position = iox_$err_not_open;
	call iox_$propagate (actual_iocb_ptr);
	call hcs_$reset_ips_mask (mask, mask);
	code = 0;
	return;

/* End of 'close' handler. */
%page;
/* Handler for the 'get_line' I/O operation. */

ios_write_around_get_line:
     entry (iocb_ptr, bufptr, buflen, actlen, code);

	actual_iocb_ptr = iocb_ptr -> iocb.actual_iocb_ptr;
	blkptr = actual_iocb_ptr -> iocb.attach_data_ptr;
	ics.sdbptr = blkptr -> blk.sdbptr;
	ics.dimptr = blkptr -> blk.dimptr;
	ics.entry = read_offset;
	m = mod (char_offset_ (bufptr), 4);
	p = addrel (bufptr, 0);			/* zeroes character offset */
	call iox_$ios_call (addr (ics), p, m, buflen, actlen, status);
	if status.code ^= 0 then do;
	     code = status.code;
	     return;
	     end;
	if actlen = 0 then do;
eof:
	     code = error_table_$end_of_info;
	     return;
	     end;
	if substr (p -> char_aligned_based, m + actlen, 1) ^= Qnl
	then if actlen = buflen then do;
		code = error_table_$long_record;
		return;
		end;
	     else goto eof;
	else do;
	     code = 0;
	     return;
	     end;

/* End of 'get_line' handler. */
%page;
/* Handler for the 'get_chars' I/O operation. */

ios_write_around_get_chars:
     entry (iocb_ptr, bufptr, buflen, actlen, code);

	actual_iocb_ptr = iocb_ptr -> iocb.actual_iocb_ptr;
	blkptr = actual_iocb_ptr -> iocb.attach_data_ptr;
	ics.sdbptr = blkptr -> blk.sdbptr;
	ics.dimptr = blkptr -> blk.dimptr;
	ics.entry = read_offset;
	m = mod (char_offset_ (bufptr), 4);
	p = addrel (bufptr, 0);
	call iox_$ios_call (addr (ics), p, m, buflen, actlen, status);
	if status.code ^= 0 then do;
	     code = status.code;
	     return;
	     end;
	if actlen = 0 then goto eof;
	code = 0;
	return;

/* End of 'get_chars' handler. */
%page;
/* Handler for the 'put_chars' I/O operation. */

ios_write_around_put_chars:
     entry (iocb_ptr, bufptr, buflen, code);

	actual_iocb_ptr = iocb_ptr -> iocb.actual_iocb_ptr;
	blkptr = actual_iocb_ptr -> iocb.attach_data_ptr;
	ics.sdbptr = blkptr -> blk.sdbptr;
	ics.dimptr = blkptr -> blk.dimptr;
	ics.entry = write_offset;
	m = mod (char_offset_ (bufptr), 4);
	p = addrel (bufptr, 0);
	call iox_$ios_call (addr (ics), p, m, buflen, 0, status);
	code = status.code;
	return;

/* End of 'put_chars' handler. */
%page;
/* Handler for the 'control' I/O operation. */

ios_write_around_control:
     entry (iocb_ptr, order, infptr, code);

	actual_iocb_ptr = iocb_ptr -> iocb.actual_iocb_ptr;
	blkptr = actual_iocb_ptr -> iocb.attach_data_ptr;
	ics.sdbptr = blkptr -> blk.sdbptr;
	ics.dimptr = blkptr -> blk.dimptr;
	if /* case */ order = "abort" then do;
	     ics.entry = abort_offset;
	     call iox_$ios_call (addr (ics), (72)"0"b, status);
	     end;
	else if order = "resetread" then do;
	     ics.entry = resetread_offset;
	     call iox_$ios_call (addr (ics), status);
	     end;
	else if order = "resetwrite" then do;
	     ics.entry = resetwrite_offset;
	     call iox_$ios_call (addr (ics), status);
	     end;
	else if order = "changemode" then do;
	     ics.entry = changemode_offset;
	     call iox_$ios_call (addr (ics), cm_str.str, cm_str.str, status);
	     end;
	else do;
	     ics.entry = order_offset;
	     call iox_$ios_call (addr (ics), order, infptr, status);
	     end;
	code = status.code;
	return;

/* End of 'control' handler. */
%page;
/* Handler for the 'position' I/O operation. */

ios_write_around_position:
     entry (iocb_ptr, u1, u2, code);

	if (u1 ^= 0) | (u2 < 0) then do;
	     code = error_table_$no_operation;
	     return;
	     end;
	actual_iocb_ptr = iocb_ptr -> iocb.actual_iocb_ptr;
	blkptr = actual_iocb_ptr -> iocb.attach_data_ptr;
	ics.sdbptr = blkptr -> blk.sdbptr;
	ics.dimptr = blkptr -> blk.dimptr;
	ics.entry = read_offset;
	m = 0;
	do while (m < u2);
	     call iox_$ios_call (addr (ics), addr (ch128), 0, 128, n, status);
	     if n = 0 then goto eof;
	     if substr (ch128, n, 1) = Qnl then m = m + 1;
	end;
	code = 0;
	return;

/* End of 'position' handler. */
%page;
/* Handler for the 'modes' I/O operation. */

ios_write_around_modes:
     entry (iocb_ptr, newmode, oldmode, code);

	actual_iocb_ptr = iocb_ptr -> iocb.actual_iocb_ptr;
	blkptr = actual_iocb_ptr -> iocb.attach_data_ptr;
	ics.sdbptr = blkptr -> blk.sdbptr;
	ics.dimptr = blkptr -> blk.dimptr;
	ics.entry = changemode_offset;
	call iox_$ios_call (addr (ics), newmode, oldmode, status);
	code = status.code;
	return;

/* End of 'modes' handler. */
%page;
%include iocb;
%include iox_dcls;
%include iox_modes;

     end ios_write_around_;
