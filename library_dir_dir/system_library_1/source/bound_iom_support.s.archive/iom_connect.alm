" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

" HISTORY COMMENTS:
"  1) change(85-06-24,Farley), approve(85-08-30,MCR7299),
"     audit(85-08-30,CLJones), install(85-08-30,MR12.0-1001):
"     Changed
"      connect_abs to check for a special pcw that will tell it
"      to set the PGE & ^PTP in the second word of the PCW. This will cause
"      a system-fault if the channel trys to do a data-transfer. The default
"      pcw will be used for the first word of the of the PCW.
"  2) change(85-10-08,Farley), approve(85-10-08,MCR6979),
"     audit(85-12-02,CLJones), install(86-03-21,MR12.0-1033):
"     Add support for
"      IMU.
"  3) change(87-02-26,Farley), approve(87-04-15,MCR7661),
"     audit(87-04-21,Fawcett), install(87-04-28,MR12.1-1028):
"     Relocated the setting of iom_data.imw_lock and the checking of
"     iom_data.n_intr_procs prior to the setting of the iom_data.per_iom.lock
"     in the connect_and_identify entry.  This was done to correct a deadly
"     embrace that was occuring on these locks.
"  4) change(88-05-18,Farley), approve(88-06-30,MCR7912),
"     audit(88-06-30,Beattie), install(88-07-15,MR12.2-1057):
"     Added clearing of second per_device.status word at connect time.
"     Depending on the type of I/O, the word will either be overwritten at
"     status time or not set at all.  This will guarantee a "known" setting.
"                                                      END HISTORY COMMENTS


" iom_connect.alm:  Routines to perform connects to IOM.
" Taken from iom_manager November 1980 by C. Hornig
" Modified by C. Hornig for paged IOM November 1980
" Modified November 1981 by C. Hornig for MR10 interface changes.
" Modified May 1982 by C. Hornig for idcw.ext_ctl write-around.
" Modified 07/19/82 by Chris Jones to fix DCW address residue reporting
"	(in expand_status) when on non-paged IOMs
" Modified 1984-07-27 BIM to set REL bit for paged direct channel connects.
"	and to reliably mask the right channel.
" Modified August 1984 by Chris Jones to decommit support for non-paged IOMs
" Modified November 1984 by M. Pandolf to add connect_and_identify
" Modified January 1985 by M. Pandolf to add IMW polling protocol
" Modified March 1985 by Chris Jones to forgo heroic measures when a connect
"	is lost
" Modified MAY 1985 by R. A. Fawcett to clear detail status
" Modified Sept 1985 by Paul Farley to fix connect_and_identify for IMUs.
" Modified Oct 1985 by Paul Farley to give IMUs extra time to answer connects.

	name	iom_connect

	entry	connect
	entry	connect_abs
	entry	connect_direct
	entry	connect_and_identify
	entry	mask
	entry	get_status
	entry	data_tdcw
	entry	workspace_tdcw

" Index register conventions:

"	X0 - internal subroutine calls.
"	X1 - index into per_device
"	X2 - index into channel_mailbox
"	X3 - index into per_iom
"	X7 - temporary data

" Pointer Register Conventions:

"	AP -> argument list
"	AB address temporary
"	BP -> <iom_data>|0
"	BB -> mailbox for this IOM.
"	LB -> io_manager_arg
"	SB -> iom_data.per_device for this device

" Macros for coding ease

	macro	loca		" Load One's Compliment into A
	lca	1,dl
	era	&F1
	&end

	macro	locq		" Load One's Compliment into Q
	lcq	1,dl
	erq	&F1
	&end

common_pcw:
	oct	400000720201	" read status and continue
direct_pcw:
	oct	000000700000	" for direct channels
mask_pcw:
	oct	000000740000	" mask and reset channel
rss_idcw:
	oct	400000700201	" for checking only
ptp_mask:
	oct	777777777377	" for masking out PTP flag
" 
"  call iom_connect$connect_abs (io_manager_arg);

" This entry is called each time the channel is started.

connect_abs:
	tsx0	setup
	tsx0	setup_pt

	ldq	lb|io_manager_arg.pcw
				" get user's PCW
	tze	load_common	" none given, use default
	cmpq	=o777777,dl	" check for special type
	tnz	save_pcw		" not special type, must be pcw

	eppab	lb|io_manager_arg.listp,*
	ldq	ab|0		" is idcw a reset-status type
	cmpq	rss_idcw
	tnz	load_common	" not reset-status

	ldq	sb|per_device.pcw+1
	anq	ptp_mask		" turn off PTP flag
	orq	=o200,dl		" turn on PGE flag
	stq	sb|per_device.pcw+1

load_common:
	ldq	common_pcw	" default PCW
save_pcw:
	stq	sb|per_device.pcw

	ldx7	lb|io_manager_arg.listp
				" check for null DCW list
	cmpx7	=o77777,du
	tze	connect_join	" no list
	absa	lb|io_manager_arg.listp,*
				" get address of DCW list
	arl	12		" stash it away
	stca	sb|per_device.pcw,10" high bits in PCW
	als	18
	sta	sb|per_device.lpw	" low bits in LPW
	tra	connect_join


"  call iom_connect$connect (io_manager_arg);

" This entry is called to start the channel in paged mode.

connect:
	tsx0	setup
	tsx0	setup_pt

	ldq	lb|io_manager_arg.pcw
				" get user's PCW
	tnz	2,ic
	ldq	common_pcw	" default PCW
	stq	sb|per_device.pcw

	lda	=o110000,dl	" get AE and REL bits in LPW
	sta	sb|per_device.lpw

	lxl7	lb|io_manager_arg.listx
	stx7	sb|per_device.lpw
	tra	connect_join


"  call iom_connect$connect_direct (io_manager_arg);

" This entry is used to connect to a direct channel.

connect_direct:
	tsx0	setup
	tsx0	setup_pt

	lda	direct_pcw
	sta	sb|per_device.pcw
	ldx7	lb|io_manager_arg.ptp
	cmpx7     =o777777,du		paged connect?
	tnz	connect_join		nope
	lda	=o100000,dl		get the AE bit
	orsa	sb|per_device.lpw		and turn it on.
	tra	connect_join


"  call iom_connect$mask (chx);

" This entry is used to mask a channel.

mask:
	tsx0	setup

	lda	mask_pcw		" mask the channel
	sta	sb|per_device.pcw
	lda	sb|per_device.channel
	als	27
          sta	sb|per_device.pcw+1 " there might be crap from previous
				" connects.

connect_join:
	ldx7	=o377777,du	" mark the status word
	stx7	sb|per_device.status" fill in channel mailbox
	stz	sb|per_device.status+1 " clear second status word
	mlr	(),(pr),fill(0)	" clear the extended status
	desc9a	0,0
	desc9a	sb|per_device.ext_status,4*8
	ldaq	sb|per_device.lpw
	staq	bb|channel_mailbox.lpw,x2
	lda	sb|per_device.scw
	sta	bb|channel_mailbox.scw,x2

" Now lock the connect channel mailbox.

	tsx0	lock_and_clear_mbx

	inhibit	on		" <+><+><+><+><+><+><+><+><+><+><+><+>

	ldq	bp|iom_data.per_iom+per_iom.connect_lpw,x3
	stq	bb|connect.lpw	" set up connect LPW
	ldaq	sb|per_device.pcw	" move PCW
	staq	bb|connect.pcw	" Store in correct place.
	cioc	bp|iom_data.per_iom+per_iom.cow,x3
				" DO IT!
	ldq	pds$process_id	" unlock the lock
	lda	0,du
	stacq	bp|iom_data.per_iom+per_iom.lock,x3
	inhibit	off		" <-><-><-><-><-><-><-><-><-><->

	rccl	sys_info$clock_,*	" stash time away
	staq	bp|iom_data.per_iom+per_iom.connect_time,x3
	staq	sb|per_device.connect_time

	ldaq	sb|per_device.connects
	adl	=1,dl
	staq	sb|per_device.connects

	epbpsb	sp|0		" restore stack base ptr
	short_return
" 

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	connect_and_identify
"
"	call iom_connect$connect_and_identify (iom_number, code)
"
"
"	connect_and_identify is used to determine if an iom is who
"	its switches says it is.  it first locks all IOMs and waits
"	for their connects to clear.  it then stores an invalid (zero)
"	LPW in the connect mailbox and connects the IOM requested by
"	its only parameter.  after connecting, it loops checking
"	the sys_fault mailboxes for all the IOMs seeing which one
"	posts the fault.  it returns the number of the IOM mailbox
"	which contains the fault status.  note that only one IOM is
"	to be connected, and the status ought to appear in its mailbox.
"	if the status appears in another mailbox, this indicates to
"	the caller that the IOM has at least its mailbox switches set
"	incorrectly.  if we can't find any trace of connect action, we
"	return 0 as the iom number, wishing the caller luck, because
"	*somewhere* in memory are several stray bits...
"
"	In a multiprocessor system, a race condition can occur where
"	one of the other CPUs has received an interrupt and begins
"	processing it just as we store the invalid LPW.  There is a
"	good chance that it will swipe the system fault interrupt bit
"	from us, causing us to think the IOMs aren't responding and
"	thereby crash the system.  To prevent this, a lock has been
"	added in iom_data to delay IMW reading at interrupt time.
"	Named iom_data$imw_lock, it may be found in one of three states
"	at any given time, with 1 meaning OK to read IMW, -1 meaning
"	don't begin reading an IMW, and 0 meaning lock in transition.
"	This program alone can change the value of imw_lock to -1 or 1.
"	The other program to reference the lock, iom_interrupt, can only
"	set it to zero as it checks its value, and set it back to the
"	original value.  While holding the lock to 0, iom_interrupt can
"	increment iom_data$n_intr_procs to indicate that its agent
"	(a CPU) is running is processing an IMW.
"	As long as n_intr_procs is non-zero, connect_and_identify will
"	not proceed with the connect.  Given that iom_connect first sets
"	iom_data$imw_lock to -1 (stay out, everyone) and then loops
"	on n_intr_procs, and that processing an IMW by the other CPUs
"	will take a finite time, we are guarenteed to be able to set the
"	LPW without interference from other processors in the foreseeable
"	future.
"
"
"	Register usage is somewhat different than for the other entries:
"
"	X0 - internal subroutine call return ptr
"	X3 - index into per_iom
"	X4 - index into system_fault_status circular buffer
"	X5 - timeout loop counter
"	X6 - iom_number for various loops
"	X7 - number that IOM thinks it is
"
"	AP -> argument list
"	BP -> <iom_data>|0
"	BB -> various places in <iom_mailbox>
"	LB -> iom_number in argument list
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

connect_and_identify:
	eppbp	iom_data$		" do our own setup here
	epplb	ap|2,*		" lb -> iom_number
	stz	ap|4,*		" initialize return code
	lxl7	lb|0		" initialize IOM identity

	lda	1,dl		" lower limit of iom_number
	ldq	4,dl		" upper limit of iom_number
	cwl	lb|0		" is arg within limits?
	tnz	inv_iom_range

	odd
	ldac	bp|iom_data.imw_lock
	tze	-1,ic		" loop while lock is in transition
	tmi	imw_already_locked	" we are supposed to be the only ones here!
	neg			" lock was 1, store -1
	sta	bp|iom_data.imw_lock
	odd
	lda	bp|iom_data.n_intr_procs
	tnz	-1,ic		" loop until all CPUs out of handler

	ldx6	4,du		" do iom_number = 4 to 1 by -1
lock_an_iom:
	eaq	0,x6		" qu = iom_number
	qrl	18		" q = iom_number
	mpy	per_iom_size,dl
	eax3	-per_iom_size,ql	" x3 = index into iom_data.per_iom

	eaq	0,x6		" qu = iom_number
	qrl	18		" q = iom_number
	mpy	iom_mailbox_size,dl
	eppbb	iom_mailbox$+iom_mailbox_seg.iom_mailbox-iom_mailbox_size,ql

	tsx0	lock_and_clear_mbx	" we don't inhibit here because we
				" are interested in locking all IOMs,
				" and this may take a lot of time.

	stz	bb|connect.lpw	" store LPW which will cause IOM fault

				" zero out interrupt bit for this
				" channel so we can see if the connect
				" took.  we will conditionally turn
				" it back on before returning

	eppbb	iom_mailbox$+iom_mailbox_seg.imw_array_word
	loca	sys_fault_channel_mask,du
	ansa	bb|level_1_interrupt-1,x6

	eax6	-1,x6		" iom_number = iom_number - 1
	tpnz	lock_an_iom

connect_for_fault:
	ldq	lb|0		" q = iom_number to be faulted
	mpy	per_iom_size,dl
	eax3	-per_iom_size,ql	" x3 = index into iom_data.per_iom

	cioc	bp|iom_data.per_iom+per_iom.cow,x3

	eppbb	iom_mailbox$+iom_mailbox_seg.imw_array_word

	ldx5	50,du		" do wait_loop = 50 to 1 by -1;
check_ioms:
	ldx6	4,du		" do iom_number = 4 to 1 by -1
check_an_iom:
	lda	bb|level_1_interrupt-1,x6  " if INTERRUPT_BIT_ON
	ana	sys_fault_channel_mask,du  " then goto connect_took
	tnz	connect_took

	eax6	-1,x6		" end check_ioms;
	tpnz	check_an_iom

	eax5	-1,x5		" end do_wait_loop;
	tnz	check_ioms

ioms_dont_respond:
	ldx7	0,du		" looks like connect was not recognized
	lda	error_table_$iom_connect_fatal
	sta	ap|4,*
	tra	unlock_ioms

connect_took:
	eaa	0,x6		" was this the requested IOM number?
	arl	18
	era	lb|0
	tze	find_status	" IOM number is OK
	lda	error_table_$iom_wrong_number
	sta	ap|4,*		" IOM number NOT OK
	eax7	0,x6		" remember what IOM thinks it is

find_status:
	ldx6	4,du		" do iom_number = 4 to 1 by -1;
status_this_iom:
	eaq	0,x6
	qrl	18
	mpy	sys_fault_list_size,dl
	eppbb	iom_mailbox$+iom_mailbox_seg.system_fault-sys_fault_list_size,ql

	ldx4	11,du		" do circ_buff_word = 11 to 0 by -1;
check_fault_status_code:
	lda	bb|0,x4		" if system_fault (iom_number, circ_buff_word) =
	locq	fault_code_mask,dl
	cmk	ill_tly_cont_mask,dl "    illegal_tally_contents
	tze	found_fault_status	" then goto found_fault_status

	cmk	zero_tly_mask,dl	"    zero_tally (IMU)
	tze	found_fault_status	" then goto found_fault_status

	eax4	-1,x4		" end do_circ_buff_word;
	tpl	check_fault_status_code

	eax6	-1,x6		" end find_status;
	tpnz	status_this_iom
	tra	*+2		" can't find mbx: skip next instruction

found_fault_status:
	stz	bb|0,x4		" don't bother anyone with the status
	eaa	0,x6
	arl	18
	era	lb|0		" did mailbox correspond to IOM number?
	tze	unlock_ioms	" yes - take no special action

	lda	error_table_$iom_wrong_mailbox
	sta	ap|4,*
	eax7	0,x6		" otherwise tell caller of error

unlock_ioms:
	odd
	sznc	bp|iom_data.imw_lock
	tze	-1,ic		" loop until lock untouched
	aos	bp|iom_data.imw_lock" was zero from sznc, is now 1
	ldx6	4,du		" do iom_number = 4 to 1 by -1;
unlock_an_iom:
	eaq	0,x6		" qu = iom_number
	qrl	18		" q = iom_number
	mpy	per_iom_size,dl
	eax3	-per_iom_size,ql	" x3 = index into iom_data.per_iom

	ldq	pds$process_id	" unlock the lock
	lda	0,du
	stacq	bp|iom_data.per_iom+per_iom.lock,x3

	eaq	0,x6
	qrl	18
	mpy	sys_fault_list_size,dl
	eppbb	iom_mailbox$+iom_mailbox_seg.system_fault-sys_fault_list_size,ql

	ldx4	11,du		" do circ_buffer_word = 11 to 0 by -1;
check_for_fault:
	szn	bb|0,x4		"      if system_fault (iom_number, circ_buffer_word) ^= 0
	tnz	set_imw_bit	"      then SET_IMW_BIT (iom)
	eax4	-1,x4		" end do_circ_buffer_word;
	tpl	check_for_fault
	tra	next_iom
set_imw_bit:
	eppbb	iom_mailbox$+iom_mailbox_seg.imw_array_word
	lda	sys_fault_channel_mask,du
	orsa	bb|level_1_interrupt-1,x6
next_iom:
	eax6	-1,x6		" end unlock_ioms;
	tpnz	unlock_an_iom

	szn	ap|4,*		" if we return a nonzero status,
	tze	*+2		" tell the caller what the IOM
	sxl7	lb|0		" thought it was.

	short_return

inv_iom_range:			" iom number was not between 1 and 4
	stz	lb|0
	lda	error_table_$bad_arg
	sta	ap|4,*

	short_return

imw_already_locked:			" imw_lock found to be -1
	sta	bp|iom_data.imw_lock
	stz	lb|0
	lda	error_table_$mylock
	sta ap|4,*

	short_return

" 
" Copy out long status information.
"
" call iom_connect$get_status (chx, sqep);

get_status:
	tsx0	setup

	epplb	ap|4,*		" get queue entry ptr
	epplb	lb|0,*

	mrl	(pr),(pr),fill(000) " clear the queue entry
	desc9a	sb|per_device.ext_status,4*8
	desc9a	lb|0,4*16		" and copy the extended status

	ldac	sb|per_device.status
	ldq	sb|per_device.status+1
	sta	lb|0		" word 1
	stq	lb|3		" word 4

	lda	bb|channel_mailbox.dcw,x2
	sta	lb|4

	lda	bb|channel_mailbox.lpw,x2
	sta	lb|1		" word 2

	epbpsb	sp|0		" restore stack base ptr
	short_return
"
"
" call iom_connect$data_tdcw (io_manager_arg);
"
data_tdcw:
	tsx0	setup
	tsx0	tdcw

	absa	lb|io_manager_arg.listp,*
	arl	12		" get absolute address
	stca	ab|0,10		" store high bits
	als	18
	stca	ab|1,70		" and low bits

	epbpsb	sp|0		" restore stack base ptr
	short_return
"
"
" call iom_connect$workspace_tdcw (io_manager_arg);
"
workspace_tdcw:
	tsx0	setup
	tsx0	tdcw
	lda	4,dl		" set tdcw.ec
	orsa	ab|1

	lxl7	lb|io_manager_arg.listx
	stx7	ab|1

	epbpsb	sp|0		" restore stack base ptr
	short_return
" 
"
"	SUPPORT SUBROUTINES
"

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	setup
"
"	INPUT:	ap|2 - pointer to index into iom_data.per_device
"		x0   - return address
"	OUTPUT:	bp   - pointer to iom_data
"		bb   - pointer to iom_mailbox for referenced IOM
"		lb   - pointer to io_manager_arg
"		sb   - pointer to iom_data.per_device
"		x2   - logical channel offset in IOM's mailbox
"		x3   - index into iom_data.per_iom
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

setup:
	eppbp	iom_data$		" establish addressability
	epplb	ap|2,*		" LB -> io_manager_arg

	ldq	lb|io_manager_arg.chx
	tmoz	chx_err		" check it
	cmpq	bp|iom_data.n_devices
	tpnz	chx_err
	mpy	per_device_size,dl	" chx index into per_device
	eax1	-per_device_size,ql	" into X1 and SB
	eppsb	bp|iom_data.per_device,x1

	ldq	sb|per_device.flags	" is it assigned?
	canq	per_device.in_use,du
	tze	chx_err		" no

	ldq	sb|per_device.channel
				" get channel number from per_device
	qls	2		" channel * 4 index into mailbox
	eax2	0,ql		" into X2

	ldq	sb|per_device.iom	" get IOM number (1 - 4)
	mpy	per_iom_size,dl	" IOM index into per_iom
	eax3	-per_iom_size,ql	" into X3

	ldq	sb|per_device.iom	" get IOM number (1 - 4)
	mpy	iom_mailbox_size,dl	" IOM index into iom_mailbox
	eppbb	iom_mailbox$+iom_mailbox_seg.iom_mailbox-iom_mailbox_size,ql
				" bb -> IOM mailbox
	tra	0,x0		" return
"
" " " " " " " " " " " " " " " " " " " " " " "
"
"		setup_pt
"
setup_pt:
	stz	sb|per_device.lpw+1
	lda	sb|per_device.channel
	als	27
	sta	sb|per_device.pcw+1

	ldx7	lb|io_manager_arg.ptp
	cmpx7	=o77777,du	" check for null ptr
	tze	0,x0		" no page table

	absa	lb|io_manager_arg.ptp,*
				" get address of page table
	arl	9		" in middle two bytes
	ora	=o600,dl		" set PTP & PGE
	stba	sb|per_device.pcw+1,34

	lda	lb|io_manager_arg.bound
				" get bound
	sta	sb|per_device.lpw+1	" in LPWX
	tra	0,x0


tdcw:
	eppab	lb|io_manager_arg.dcw_pair_ptr,*
	szn	ab|0		" AB -> dcw_pair
	tnz	idcw_given	" IDCW is there
	lda	common_pcw	" give him the default
	sta	ab|0
idcw_given:
"
" At this point we would normally set idcw.ext_ctl.  This would allow IOM's
" to transfer to DCW lists which do not reside in the low 256K.
" Unfortunately, the PSIA does not handle this bit properly.
" As a result, we do not set the bit and put a kludge in pc_abs so that
" contiguous I/O buffers are always in the low 256K.
"
"	lda	=o040000,dl	" set extension control in IDCW
"	orsa	ab|0
"
	lda	=o020001,dl	" set default TDCW
	sta	ab|1
	tra	0,x0		" return


" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	lock_and_clear_mbx
"
"	INPUT:	bp - pointer to iom_data
"		bb - pointer to iom_mailbox
"		x3 - index into iom_data.per_iom
"	OUTPUT:	per_iom.lock = our process_id
"		IOM - all previous connects have completed
"
"		THE INTERRUPT INHIBITED CODE SHOULD BE CONTINUED
"		BY THE CALLER UNTIL THE IOM LOCK IS UNLOCKED
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " 


lock_and_clear_mbx:
	ldq	0,dl		" show this is the first try

" Note, if we fall into this code (i.e. we haven't tried to reconnect), the
" q register is zero.  If we come here after reconnecting, the q register is
" non-zero, and we use this distinction to determine whether or not to
" reconnect (we'll only retry once). We let someone upstairs handle any
" connects that are lost this way.  This allows ESD to succeed even in the case
" when an IOM completely stops responding as long as there are alternate paths.

	odd			" to cause fetching of two Y-pairs during
				" this tight loop so we won't lock-up
lock_mailbox:
	szn	bp|iom_data.per_iom+per_iom.lock,x3
	tnz	-1,ic		" loop until mailbox is free

	inhibit	on		" <+><+><+><+><+><+><+><+><+><+>

	lda	pds$process_id
	stac	bp|iom_data.per_iom+per_iom.lock,x3
	tnz	lock_mailbox	" someone beat us to the lock

check_for_connect:

	lda	bp|iom_data.per_iom+per_iom.connect_lpw,x3
	cmpa	bb|connect.lpw	" if the same, then there is a connect
	tnz	locked_and_cleared  " pending from the process before us.

	ldx7	200,du		" we will wait until it completes
				" and possibly restart it
wait_for_connect:
	cmpa	bb|connect.lpw
	tnz	locked_and_cleared	" ah, the IOM finished the connect
	adx7	-1,du		" decrement loop counter
	tpl	wait_for_connect	" and continue looping until negative

	cmpq	0,dl		" is q clear?
	tze	reconnect		" yes, give it one shot.
				" no, forget it
	aos	bp|iom_data.per_iom+per_iom.abandoned_connects,x3
	tra	locked_and_cleared

reconnect:
	cioc	bp|iom_data.per_iom+per_iom.cow,x3
				" iom seems to have forgotten about
				"  the connect, so reissue it
	aos	bp|iom_data.per_iom+per_iom.reconnects,x3 " meter
	ldq	pds$process_id	" Note, this is the non-zero q value
	lda	0,du		"  that prevents us from trying again
	stacq	bp|iom_data.per_iom+per_iom.lock,x3 " start this over again
	tra	lock_mailbox

locked_and_cleared:
	tra	0,x0

	inhibit	off		" <-><-><-><-><-><-><-><-><-><->

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	chx_err, addr_err
"
" " " " " " " " " " " " " " "	" " " " " " " " " " " " " " " " " " " " "

chx_err:
	epbpsb	sp|0		" restore stack base ptr
	push			" bad channel index
	short_call io_error$bad_chx	" report it
	return

addr_err:
	epbpsb	sp|0		" restore stack base ptr
	push
	short_call io_error$bad_addr
	return
" 
	include	io_manager_dcls;
	include	iom_data

	equ	connect.pcw,connect_channel*channel_mailbox_size+channel_mailbox.scw
	equ	connect.lpw,connect_channel*channel_mailbox_size+channel_mailbox.lpw
	equ	sys_fault.lpw,system_fault_channel*channel_mailbox_size+channel_mailbox.lpw
	equ	level_1_interrupt,4
	equ	sys_fault_list_size,12
	bool	sys_fault_channel_mask,200000
	bool	ill_tly_cont_mask,000013
	bool	zero_tly_mask,000005
	bool	fault_code_mask,000077

	end
