/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
iom_overhead:
     procedure;

/* iom_overhead: Process interrupts on IOM overhead channels */
/* Written December 1980 by C. Hornig */
/* init entry moved in April 1984 by Chris Jones */
/* init_without_assign added in November 1984 by M. Pandolf */

dcl	Iom		   fixed bin (35) parameter;
dcl	Level		   fixed bin (3) parameter;
dcl	Data_word		   bit (36) aligned parameter;

dcl	Code		   fixed bin (35) parameter;

dcl	absadr		   entry (ptr, fixed bin (35)) returns (fixed bin (26));
dcl	iom_error$invalid_overhead
			   entry (fixed bin (3), fixed bin (6), fixed bin (3), bit (36) aligned);
dcl	iom_overhead$system_fault
			   entry (fixed bin (35), fixed bin (3), bit (36) aligned);
dcl	iom_overhead$special_status
			   entry (fixed bin (35), fixed bin (3), bit (36) aligned);
dcl	ldac		   entry (ptr) returns (bit (36) aligned);
dcl	syserr		   entry options (variable);

dcl	errcode		   fixed bin (35);
dcl	i		   fixed bin;
dcl	iom		   fixed bin (3);
dcl	1 iom_special_status   aligned like io_special_status;
dcl	1 iom_fault_status	   aligned,
	( 2 mbz1		   bit (9),
	  2 channel	   bit (9),		/* channel number */
	  2 serv_req	   bit (5),		/* service request */
	  2 mbz2		   bit (3),
	  2 controller_fault   bit (4),		/* system controller fault code */
	  2 io_fault	   bit (6)
	  )		   unaligned;		/* I/O fault code */

dcl	IOMS		   char (4) internal static options (constant) init ("ABCD");

dcl	error_table_$dev_offset_out_of_bounds
			   fixed bin (35) ext static;

dcl	(addr, binary, bit, dimension, hbound, lbound, null, string, substr)
			   builtin;

init:
     entry (Iom, Code);

	iom = Iom;
	iom_data_ptr = addr (iom_data$);
	iom_mailbox_seg_ptr = addr (iom_mailbox$);
	call set_overhead_channel (system_fault_channel, iom_overhead$system_fault,
	     addr (iom_mailbox_seg.system_fault (iom)));

/* Set up the handler and mailbox for the special status channel. */

	call set_overhead_channel (special_status_channel, iom_overhead$special_status,
	     addr (iom_mailbox_seg.special_status (iom)));

	errcode = 0;
INIT_RETURN:
	Code = errcode;
	return;

init_without_assign:
     entry (Iom, Code);

	iom = Iom;
	iom_data_ptr = addr (iom_data$);
	iom_mailbox_seg_ptr = addr (iom_mailbox$);

	call set_dcw_lpw (iom, system_fault_channel,
	     addr (iom_mailbox_seg.system_fault (iom)),
	     dimension (addr (iom_mailbox_seg.system_fault (iom)) -> status_queue.status, 1));

	Code = 0;
	return;

release:
     entry (Iom, Code);


	iom = Iom;
	iom_data_ptr = addr (iom_data$);
	iom_mailbox_seg_ptr = addr (iom_mailbox$);
	call io_manager$unassign (iom_data.per_iom (iom).special_chx, (0));
	call io_manager$unassign (iom_data.per_iom (iom).fault_chx, (0));
	Code = 0;
	return;

/* SET_OVERHEAD_CHANNEL - Internal Procedure to Set up Mailbox and Interrupt Handler for Overhead Channels.

   An LPW is set up with tally update suppressed so that it keeps refreshing the DCW for the same location.
   The refresh DCW is stored in the SCW slot of the channel, since overhead channels don't use their SCW.
   This scheme provides a circular continuous queue.	*/

set_overhead_channel:
     procedure (channo, intp, qp);

dcl	channo		   fixed bin (6),		/* overhead channel number */
	intp		   entry,			/* interrupt handler procedure */
	qp		   ptr;			/* ptr to queue for overhead channel */

dcl	tally		   fixed bin (12);		/* tally for overhead channel DCW */
dcl	tempx		   fixed bin (35);

	call io_manager$assign (tempx, substr ("ABCD", iom, 1) || substr ("1234567", channo, 1), intp, (iom), (null ()),
	     errcode);
	if errcode ^= 0 then
	     goto INIT_RETURN;

	tally = dimension (qp -> status_queue.status, 1);
	if channo = special_status_channel		/* If special status channel ... */
	then do;
	     iom_data.per_iom (iom).special_chx = tempx;
	     tally = tally - 2;			/* Allow two extra words for spillover.
						   See IOM EPS-1 Section on Special Status
						   for a discussion of spillover considerations. */
	end;
	else iom_data.per_iom (iom).fault_chx = tempx;
	call set_dcw_lpw (iom, channo, qp, tally);

	return;
     end set_overhead_channel;

/* * * * * * * * * * ABS_ADDR_18 * * * * * * * * * */

abs_addr_18:
     procedure (P) returns (bit (18) aligned);
dcl	P		   ptr parameter;

dcl	address		   fixed bin (26);

	address = absadr (P, errcode);
	if errcode ^= 0 then
	     goto INIT_RETURN;
	if address > (262144 - 4096) then do;
	     errcode = error_table_$dev_offset_out_of_bounds;
	     goto INIT_RETURN;
	end;
	return (bit (binary (address, 18)));
     end abs_addr_18;

/* * * * * * * * * * SYSTEM_FAULT * * * * * * * * * */

system_fault:
     entry (Iom, Level, Data_word);

	iom = Iom;
	iom_data_ptr = addr (iom_data$);
	iom_mailbox_seg_ptr = addr (iom_mailbox$);

	status_queue_ptr = addr (iom_mailbox_seg.system_fault (iom));

	do i = lbound (status_queue.status, 1) to hbound (status_queue.status, 1);
	     string (iom_fault_status) = ldac (addr (status_queue.status (i)));
	     if string (iom_fault_status) ^= ""b then do;
		call syserr (0, "iom_overhead: IOM ^a System fault status ^w.", substr (IOMS, iom, 1),
		     string (iom_fault_status));
		if iom_fault_status.channel ^= ""b then
		     call report (binary (iom_fault_status.channel, 9), string (iom_fault_status));
	     end;
	end;

	call check_dcw (system_fault_channel);

	return;

/* * * * * * * * * * SPECIAL_STATUS * * * * * * * * * */

special_status:
     entry (Iom, Level, Data_word);

	iom = Iom;
	iom_data_ptr = addr (iom_data$);
	iom_mailbox_seg_ptr = addr (iom_mailbox$);

	status_queue_ptr = addr (iom_mailbox_seg.special_status (iom));

	do i = lbound (status_queue.status, 1) to hbound (status_queue.status, 1);
	     string (iom_special_status) = ldac (addr (status_queue.status (i)));
	     if iom_special_status.t then
		call report (binary (iom_special_status.channel, 9), string (iom_special_status));
	end;

	call check_dcw (special_status_channel);

	return;

/* * * * * * * * * * REPORT * * * * * * * * * */

report:
     procedure (Channel, Data_word);
dcl	Channel		   uns fixed bin (9) parameter;
dcl	Data_word		   bit (36) aligned parameter;
dcl	chx		   fixed bin;

	chx = 0;

	if (Channel >= lbound (iom_data.per_iom.chantab, 2)) & (Channel <= hbound (iom_data.per_iom.chantab, 2)) then
	     chx = iom_data.per_iom (iom).chantab (Channel);

	if chx > 0 then
	     if iom_data.per_device (chx).flags.in_use then do;
		call iom_data.per_device (chx).handler (iom_data.per_device (chx).index, Level, Data_word);
		return;
	     end;

	call iom_error$invalid_overhead (iom, (Channel), Level, Data_word);

     end report;


check_dcw:
     procedure (Channel);
dcl	Channel		   fixed bin (6);
dcl	rdcwp		   ptr;

	dcwp = addr (iom_mailbox_seg.iom_mailbox (iom).channel_mailbox (Channel).dcw);
	rdcwp = addr (iom_mailbox_seg.iom_mailbox (iom).channel_mailbox (Channel).scw);
	if (dcwp -> dcw.tally) > (rdcwp -> dcw.tally) then
	     call syserr ("iom_overhead: Status queue overrun for IOM ^a channel ^d.", substr (IOMS, iom, 1), Channel);

	string (dcwp -> dcw) = string (rdcwp -> dcw);

     end check_dcw;

set_dcw_lpw:
     procedure (iom, chan, qp, tly);

dcl	iom		fixed bin (3),		/* IOM number */
	chan		fixed bin (6),		/* logical channel number */
	qp		ptr,			/* pointer to queue for channel */
	tly		fixed bin (12);		/* tally for DCW */

	dcwp = addr (iom_mailbox_seg.iom_mailbox (iom).channel_mailbox (chan).scw);
	dcwp -> dcw.address = abs_addr_18 (qp);
	dcwp -> dcw.tally = bit (tly);
	dcwp -> dcw.type = "01"b;			/* IOTP */

	iom_mailbox_seg.iom_mailbox (iom).channel_mailbox (chan).dcw =
	     iom_mailbox_seg.iom_mailbox (iom).channel_mailbox (chan).scw;

	lpwp = addr (iom_mailbox_seg.iom_mailbox (iom).channel_mailbox (chan).lpw);
	lpwp -> lpw.dcw_addr = abs_addr_18 (dcwp);
	lpwp -> lpw.nc = "1"b;			/* LPW ADDR and TALLY fields update inhibit */

	return;
     end set_dcw_lpw;

%include io_manager_dcls;
%page;
%include iom_data;
%page;
%include io_special_status;
%page;
%include iom_dcw;
%page;
%include iom_lpw;

/* BEGIN MESSAGE DOCUMENTATION


   Message:
   iom_overhead: IOM TAG System fault status STATUS.

   S: $info

   T: $run

   M: An IOM system fault has occurred.
   This indicates a problem in either hardware or system software.

   A: $notify


   Message:
   iom_overhead: Status queue overrun for IOM TAG channel CHANNEL.

   S: $info

   T: $run

   M: The IOM has failed to refresh the DCW for an overhead channel.
   This indicates a hardware problem.

   A: $notify


   END MESSAGE DOCUMENTATION */

     end iom_overhead;
