/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(87-02-26,Farley), approve(87-04-15,MCR7661),
     audit(87-04-21,Fawcett), install(87-04-28,MR12.1-1028):
     Removed the manipulation of fgbx.shut and fgbx.ssenb in favor of a new
     flag, fgbx.io_reconfig, that will still inhibit ESDs but will allow
     crashes to appear as crashes at BCE.
                                                   END HISTORY COMMENTS */


/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
iom_switches$validate:
     procedure (p_iom_index, p_code);

/* iom_switches - program to play with switches on an IOM.  Originally written to check settings of IOM switches. */
/* Written May 1984 by M. Pandolf */
/* Modified November 1984 by M. Pandolf to check for PARM card field */
/* Modified April 1985 by Chris Jones to lower-case parm name and to remove calls to mask interrupt processors. */

	parm_ptr = null ();
	call config$find_parm ("dris", parm_ptr);	/* is DRIS parameter present? */
	if parm_ptr ^= null () then do;		/* yes, so don't check IOM switches */
	     p_code = 0;
	     return;
	end;

	iom_number = p_iom_index - 1;

	call DEL_256K_BLOCKS ();			/* free up places where */
						/* IOM may write status */

	call tc_util$suspend_tc ();			/* run me only */

	call pc$flush_core ();			/* perform a partial */
						/* shutdown of the file system */

	fgbxp = addr (flagbox$);			/* give esd no reason to run, */
	fgbx.io_reconfig = YES;			/* and have salvaging fix */
						/* things up when we boot again */

test_loop:
	call privileged_mode_ut$wire_and_mask (pmut_mask, pmut_ptr);
						/* enter critical chunk of code */

	iom_id = iom_number + 1;
	call iom_connect$connect_and_identify (iom_id, status);

	call privileged_mode_ut$unwire_unmask (pmut_mask, pmut_ptr);

	if status ^= 0				/* analyze IOM tracks */
	then do;

	     if iom_id > 0 then do;
		call FIX_DAMAGE ();
		goto test_loop;
	     end;
	     else p_code = status;
	end;
	else do;					/* everything was as expected */

	     fgbx.io_reconfig = NO;
	     call tc_util$resume_tc ();
	     call ADD_256K_BLOCKS ();

	end;

	return;

/* INTERNAL PROCEDURES */

DEL_256K_BLOCKS:
     procedure ();

	astep = null ();
	curr_mem_base = 0;
	frames_deleted (*) = 0;

	found_256k = YES;				/* lie to get the loop started */
	do while (found_256k);

	     found_256k = NO;
	     do ctlr = 0 to 7 while (^found_256k);

		if scs$controller_data (ctlr).info.online then
		     if scs$controller_data (ctlr).size > 0 then
			if scs$controller_data (ctlr).base = curr_mem_base then do;

			     frames_deleted (ctlr) = min (scs$controller_data (ctlr).size, 256);
			     call reconfig$del_main (curr_mem_base, frames_deleted (ctlr), status);
			     if status = 0 then do;
				found_256k = YES;
				deleted_256k (ctlr) = YES;
				curr_mem_base = curr_mem_base + frames_deleted (ctlr);
			     end;
			     else frames_deleted (ctlr) = 0;

			end;

	     end;

	end;

	if unspec (deleted_256k) ^= ""b then do;

	     call lock$lock_ast ();
	     astep = get_aste (256);
	     call thread$out (astep, sst$level.ausedp (3));
	     call lock$unlock_ast ();
	     if astep ^= null () then do;
		call get_ptrs_$given_astep (astep, tsdw);
		ptp = addrel (astep, sst$astsize);
	     end;

	end;

	return;

     end DEL_256K_BLOCKS;

ADD_256K_BLOCKS:
     procedure ();

	do ctlr = 0 to 7;

	     if frames_deleted (ctlr) > 0 then
		call reconfig$add_main ((scs$controller_data (ctlr).base), frames_deleted (ctlr), status);

	end;

	if astep ^= null () then do;

	     call lock$lock_ast ();
	     call thread$cin (astep, sst$level.ausedp (3));
	     call put_aste (astep);
	     call lock$unlock_ast ();

	end;

     end ADD_256K_BLOCKS;

FIX_DAMAGE:
     procedure ();

	if status = error_table_$iom_wrong_number then
	     call syserr (BEEP, "iom_switches: IOM number is set to ^i, but should be ^i.", iom_id - 1, iom_number);
	else if status = error_table_$iom_wrong_mailbox then
	     call syserr (BEEP, "iom_switches: IOM mailbox switches are ^a, but should be ^a.",
		EXPECTED_SWITCHES (iom_id - 1), EXPECTED_SWITCHES (iom_number));
	else call syserr (BEEP, "iom_switches: IOM switches are incorrect.");

	call syserr (ANNOUNCE, "iom_switches: Reset switches and press RETURN.");

	recheck_time = clock () + 10 * 1000000;
	do while (clock () < recheck_time);
	     temp_iom_id = iom_number + 1;		/* just to waste some time */
	end;

wait_for_return:
	unspec (my_console_io) = ""b;
	my_console_io.flags.read = "1"b;
	my_console_io.sequence_no = 0;

	call ocdcm_$priority_io (addr (my_console_io));
	if ^my_console_io.completed then
	     goto wait_for_return;

	return;

     end FIX_DAMAGE;

/* DECLARATIONS */

/* Parameter */

dcl	p_iom_index	   fixed bin (3) parameter;
dcl	p_code		   fixed bin (35) parameter;

/* Automatic */

dcl	parm_ptr		   pointer;		/* pointer to PARM card field */
dcl	iom_number	   fixed bin (3);		/* 0-3, correspones to switch settings */
dcl	status		   fixed bin (35);		/* standard system status code */
dcl	iom_id		   fixed bin;		/* 1-4, indexes IOM information arrays */
dcl	temp_iom_id	   fixed bin;		/* used in a calculation to waste time */
dcl	curr_mem_base	   fixed bin;		/* frame number of start of next configured SC */
dcl	ctlr		   fixed bin (3);		/* SC number */
dcl	frames_deleted	   dim (0:7) fixed bin;	/* number of frames deleted per SC */
dcl	found_256k	   bit (1) aligned;		/* indicates when we have found the correct mem block */
dcl	deleted_256k	   dim (0:7) bit (1);	/* TRUE if we have deleted mem from this SC */
dcl	tsdw		   fixed bin (71);		/* TempSDW */
dcl	ptp		   pointer;		/* PageTable Pointer */
dcl	pmut_mask		   fixed bin (71);		/* former processor mask, to be restored after critical code */
dcl	pmut_ptr		   pointer;		/* return ptr from pmut, used by it later */
dcl	recheck_time	   fixed bin (71);		/* the time at which we will check for fixed switches */

dcl	1 my_console_io	   aligned like console_io;

/* Static, External */

dcl	error_table_$iom_wrong_number
			   fixed bin (35) external static;
dcl	error_table_$iom_wrong_mailbox
			   fixed bin (35) external static;
dcl	sst$astsize	   fixed bin external static;

dcl	1 sst$level	   (0:3) aligned external static,
	  2 ausedp	   bit (18) unaligned,
	  2 no_aste	   bit (18) unaligned;


/* Static, Constant */

dcl	(
	NO		   init ("0"b),
	YES		   init ("1"b)
	)		   bit (1) aligned internal static options (constant);
dcl	EXPECTED_SWITCHES	   dim (0:3) char (4) init ("1400", "2000", "2400", "3000");

/* Entry */

dcl	syserr		   entry () options (variable);
dcl	tc_util$suspend_tc	   entry ();
dcl	pc$flush_core	   entry ();
dcl	iom_connect$connect_and_identify
			   entry (fixed bin, fixed bin (35));
dcl	tc_util$resume_tc	   entry ();
dcl	reconfig$del_main	   entry (fixed bin, fixed bin, fixed bin (35));
dcl	lock$lock_ast	   entry ();
dcl	get_aste		   entry (fixed bin) returns (ptr);
dcl	thread$out	   entry (ptr, bit (18));
dcl	lock$unlock_ast	   entry ();
dcl	get_ptrs_$given_astep  entry (ptr, fixed bin (71));
dcl	reconfig$add_main	   entry (fixed bin, fixed bin, fixed bin (35));
dcl	thread$cin	   entry (ptr, bit (18));
dcl	put_aste		   entry (ptr);
dcl	privileged_mode_ut$wire_and_mask
			   entry (fixed bin (71), ptr);
dcl	privileged_mode_ut$unwire_unmask
			   entry (fixed bin (71), ptr);
dcl	ocdcm_$priority_io	   entry (ptr);
dcl	config$find_parm	   entry (char (4) aligned, ptr);

/* Builtin */

dcl	addr		   builtin;
dcl	addrel		   builtin;
dcl	clock		   builtin;
dcl	min		   builtin;
dcl	null		   builtin;
dcl	unspec		   builtin;

/* Include Files */

%include aste;
%page;
%include syserr_constants;
%page;
%include sdw;
%page;
%include flagbox;
%page;
%include scs;
%page;
%include oc_data;

     end iom_switches$validate;
