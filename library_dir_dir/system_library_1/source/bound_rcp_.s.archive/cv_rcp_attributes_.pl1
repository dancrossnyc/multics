/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/****^  format: off */

cv_rcp_attributes_: proc; return;

/* This subroutine changes RCP attribute specifications into printable RCP
   attribute descriptions and vice versa.  Multiple entrypoints allow
   these operations, as well as several perversions on the same theme. */
/* Written 04/02/78 by C. D. Tavares */
/* Last modified 02/27/80 by CDT to add make_rel entry. */


/****^  HISTORY COMMENTS:
  1) change(87-07-15,Rauschelbach), approve(87-08-07,MCR7748),
     audit(87-11-11,Farley), install(87-11-30,MR12.2-1004):
     Set RTDT_area_len.
                                                   END HISTORY COMMENTS */


%include rtdt;

/* automatic */

dcl  temp_spec bit (72) aligned,
     temp_relatts (4) bit (72),
     temp_atts (2) bit (72),
     temp_att_string char (256) varying;

/* static */

dcl  sysdir char (168) initial (">system_control_1") static;
dcl  sys_info$max_seg_size fixed bin (35) ext static;

/* entries */

dcl  hcs_$initiate ext entry (char (*), char (*), char (*), fixed bin, fixed bin, pointer, fixed bin (35)),
     hcs_$terminate_noname ext entry (pointer, fixed bin (35));

dcl  sub_err_ ext entry options (variable);



/* external variables */

dcl (error_table_$rcp_bad_attributes,
     error_table_$unimplemented_version,
     error_table_$resource_type_inappropriate,
     error_table_$resource_unknown) ext fixed bin (35) static;

/* builtins */

dcl (pointer, substr, index, max, null, copy, length, rtrim, string, size) builtin;

dcl  cleanup condition;
	
to_string: entry (resource_type, attributes, attribute_string, code);

dcl (resource_type char (*),
     attributes (2) bit (72),
     attribute_string char (*) varying,
     code fixed bin (35)) parameter;

	rtdtp = null;

	RTDT_area_len = 0;				/* With the area size 0, then rtdt is only as
						   big as the header info. */
	RTDT_area_len = sys_info$max_seg_size - size (rtdt);


	on cleanup call term_rtdt (0);

	call find_rtde (resource_type, code);
	if code ^= 0 then return;

	call make_string (attributes, attribute_string, code);

	call term_rtdt (code);
	return;
	
to_string_rel: entry (resource_type, rel_attributes, attribute_string, code);

dcl  rel_attributes (4) bit (72) parameter;

	rtdtp = null;

	on cleanup call term_rtdt (0);

	call find_rtde (resource_type, code);
	if code ^= 0 then return;

	call make_string_rel (rel_attributes, attribute_string, code);

	if code ^= 0 then call term_rtdt (0);
	else call term_rtdt (code);
	return;
	
to_string_given_rtde: entry (xrtdep, attributes, attribute_string, code);

/* This entry is for the use of display_rtdt only. */

dcl  xrtdep pointer parameter;

	rtdep = xrtdep;

	call make_string (attributes, attribute_string, code);
	return;
	
from_string: entry (resource_type, attributes, attribute_string, code);

	rtdtp = null;

	on cleanup call term_rtdt (0);

	call find_rtde (resource_type, code);
	if code ^= 0 then return;

	call interpret_string (attribute_string, temp_relatts, code);
	if code ^= 0 then do;
	     call term_rtdt (0);
	     return;
	end;

	attributes (1) = temp_relatts (1);
	attributes (2) = temp_relatts (2);

	call term_rtdt (code);
	return;
	
from_string_rel: entry (resource_type, rel_attributes, attribute_string, code);

	rtdtp = null;

	on cleanup call term_rtdt (0);

	call find_rtde (resource_type, code);
	if code ^= 0 then return;

	call interpret_string (attribute_string, rel_attributes, code);
	if code ^= 0 then call term_rtdt (0);
	else call term_rtdt (code);
	return;
	
modify:	entry (resource_type, attributes, attribute_string, new_attributes, code);

dcl  new_attributes (2) bit (72) parameter;

	rtdtp = null;

	on cleanup call term_rtdt (0);

	call find_rtde (resource_type, code);
	if code ^= 0 then return;

	call interpret_string (attribute_string, temp_relatts, code);
	if code ^= 0 then do;
	     call term_rtdt (0);
	     return;
	end;

	new_attributes (1) = (attributes (1) | rel_attributes (1)) & ^rel_attributes (3);
	new_attributes (2) = (attributes (2) | rel_attributes (2)) & ^rel_attributes (4);

	call term_rtdt (code);
	return;
	
make_rel:	entry (resource_type, attributes, rel_attributes, code);

/* This entry takes a full or relative attribute string in absolute attribute
   format and makes a full relative attribute string in relative attribute
   format (filling in the "turn off" bit portions).  It does this via the
   quick and dirty method of converting back and forth to a char string. */

	rtdtp = null;

	on cleanup call term_rtdt (0);

	call find_rtde (resource_type, code);
	if code ^= 0 then return;

	call check_validity (attributes, validity_level, code);
	if code ^= 0 then do;
term_and_return:
	     call term_rtdt (0);
	     return;
	end;

	call make_string (attributes, temp_att_string, code);
	if code ^= 0 then goto term_and_return;

	call interpret_string (temp_att_string, rel_attributes, code);
	if code ^= 0 then goto term_and_return;

	call term_rtdt (code);
	return;
	
modify_rel: entry (attributes, rel_attributes, new_attributes);

	new_attributes (1) = (attributes (1) | rel_attributes (1)) & ^rel_attributes (3);
	new_attributes (2) = (attributes (2) | rel_attributes (2)) & ^rel_attributes (4);
	return;
	
test_valid: entry (resource_type, attributes, validity_level, code);

dcl  validity_level fixed bin parameter;

dcl (Absolute initial (0),
     Relative initial (1),
     Multiple initial (2),
     Invalid initial (3)) fixed bin static options (constant);

	rtdtp = null;

	on cleanup call term_rtdt (0);

	call find_rtde (resource_type, code);
	if code ^= 0 then return;

	call check_validity (attributes, validity_level, code);
	if code ^= 0 then do;
	     call term_rtdt (0);
	     return;
	end;

	call term_rtdt (code);
	return;
	
protected_change: entry (attributes, rel_attributes) returns (bit (1) aligned);

	if (rel_attributes (2) & attributes (2)) ^= rel_attributes (2) then
	     return ("1"b);				/* making a currently unprotected attribute protected */
	if (rel_attributes (4) & ^attributes (2)) ^= rel_attributes (4) then
	     return ("1"b);				/* making a currently protected attribute unprotected */
	if (rel_attributes (3) & attributes (2)) ^= "0"b then
	     return ("1"b);				/* turning off a currently protected attribute */

	return ("0"b);				/* this will cause no change to protected attributes */
	
reduce_implications: entry (vol_type, vol_attributes, dev_type, dev_attributes, code);

dcl ((vol_type, dev_type) char (*),
    (vol_attributes, dev_attributes) dimension (2) bit (72)) parameter;

	rtdtp = null;

	on cleanup call term_rtdt (0);

	call find_rtde (vol_type, code);
	if code ^= 0 then return;

	if ^rtde.is_volume then do;
	     code = error_table_$resource_type_inappropriate;
	     call term_rtdt (0);
	     return;
	end;

	if rtde.n_mates ^= 1 then do;
	     code = error_table_$resource_unknown;
	     call term_rtdt (0);
	     return;
	end;

	dev_type = rtde.mates (1);

	temp_atts (1) = vol_attributes (1) & string (rtde.attributes_to_match);
	temp_atts (2) = ""b;

	call make_string (temp_atts, temp_att_string, code);

	call term_rtdt (0);
	if code ^= 0 /* from make_string */ then return;

	call find_rtde (dev_type, code);
	if code ^= 0 then return;

	call interpret_string (temp_att_string, temp_relatts, code);

	call term_rtdt (0);
	if code ^= 0 /* from interpret_string */ then return;

	dev_attributes (1) = temp_relatts (1);
	dev_attributes (2) = temp_relatts (2);

	return;


find_rtde: proc (resource_type_arg, code);

dcl (resource_type_arg char (*),
     code fixed bin (35)) parameter;

dcl  resource_type char (32),
     i fixed bin,
     found bit (1) aligned,
     error_table_$improper_data_format ext fixed bin (35) static;

	     call hcs_$initiate (sysdir, "rtdt", "", 0, 0, rtdtp, code);
	     if rtdtp = null then do;
		call sub_err_ (code, "cv_rcp_attributes_", "c", null, 0, "Cannot initiate ^a>rtdt", sysdir);
		return;
	     end;
	     code = 0;

	     if (rtdt.version ^= RTDT_version_2) & (rtdt.version ^= RTDT_version_3) then do;
		code = error_table_$unimplemented_version;
		call hcs_$terminate_noname (rtdtp, 0);
		return;
	     end;

	     resource_type = resource_type_arg;

	     do i = 1 to 2;				/* give 2 chances to chase down syn */
		found = ""b;

		do rtdep = pointer (rtdt.first_resource, rtdt.rtdt_area)
			repeat (pointer (rtde.next_resource, rtdt.rtdt_area))
			while (rtdep ^= null);

		     if rtde.valid then
			if rtde.name = resource_type then
			     if ^rtde.is_synonym then return;
			     else do;
				resource_type = rtde.syn_to;
				found = "1"b;
			     end;
		end;

		if ^found then do;
		     code = error_table_$resource_unknown;
		     call hcs_$terminate_noname (rtdtp, 0);
		     return;
		end;
	     end;

	     code = error_table_$improper_data_format;
	     call hcs_$terminate_noname (rtdtp, 0);
	     return;

	end find_rtde;
	
term_rtdt: proc (code);

dcl  code fixed bin (35) parameter;
	     if rtdtp ^= null then
		call hcs_$terminate_noname (rtdtp, code);
	     return;

	end term_rtdt;
	
make_string: proc (abs_attributes, attribute_string, code);

dcl (abs_attributes (2) bit (72),
     attribute_string char (*) varying,
     code fixed bin (35)) parameter;

dcl (i, j) fixed bin,
     auto_attributes (4) bit (72);

	     string (auto_attributes) = string (abs_attributes);
	     goto make_string_common;

make_string_rel: entry (rel_attributes, attribute_string, code);

dcl  rel_attributes (4) bit (72);

	     string (auto_attributes) = string (rel_attributes);
	     goto make_string_common;

make_string_common:
	     attribute_string = "";

	     do i = index (auto_attributes (1), "1"b) repeat (i) while (i > 0);
		if i > rtde.n_defined_attributes then do;
		     code = error_table_$rcp_bad_attributes;
		     return;
		end;

		if substr (rtde.attributes_valid, i, 1) = "1"b then do;
		     attribute_string = attribute_string || rtrim (rtde.attribute_names (i), " ");
		     if substr (auto_attributes (2), i, 1) then attribute_string = attribute_string || "*,";

		     else attribute_string = attribute_string || ",";
		end;

		if substr (auto_attributes (1), i+1) = ""b then i = -1;
		else i = i + index (substr (auto_attributes (1), i+1), "1"b);
	     end;

	     do i = index (auto_attributes (3), "1"b) repeat (i) while (i > 0);
		if i > rtde.n_defined_attributes then do;
		     code = error_table_$rcp_bad_attributes;
		     return;
		end;

		if substr (rtde.attributes_valid, i, 1) = "0"b then do;
		     code = error_table_$rcp_bad_attributes;
		     return;
		end;

/* this may be on because "key=val" is ON in the first string, so all other values of "key=" must
   be turned OFF.  This is simple to check for, because "key=" values never appear in the third
   element otherwise (you can't say "^key=val"!) */

		do j = 1 to rtde.n_exclusion_specs while
			(substr (rtde.exclusion_specs (j), i, 1) = "0"b);
		end;

		if j > rtde.n_exclusion_specs then do;
		     attribute_string = attribute_string || "^";
		     attribute_string = attribute_string || rtrim (rtde.attribute_names (i), " ");
		     attribute_string = attribute_string || ",";
		end;

		if substr (auto_attributes (3), i+1) = ""b then i = -1;
		else i = i + index (substr (auto_attributes (3), i+1), "1"b);
	     end;

	     do i = index (auto_attributes (4), "1"b) repeat (i) while (i > 0);
		if i > rtde.n_defined_attributes then do;
		     code = error_table_$rcp_bad_attributes;
		     return;
		end;

		if substr (rtde.attributes_valid, i, 1) = "0"b then do;
		     code = error_table_$rcp_bad_attributes;
		     return;
		end;

		if substr (rel_attributes (3), i, 1) = "0"b then /* already printed if so */
		     if substr (rel_attributes (1), i, 1) = "0"b then do;
						/* ditto */
			attribute_string = attribute_string || rtrim (rtde.attribute_names (i), " ");
			attribute_string = attribute_string || ",";
		     end;

		if substr (auto_attributes (4), i+1) = ""b then i = -1;
		else i = i + index (substr (auto_attributes (4), i+1), "1"b);
	     end;

	     if length (attribute_string) > 0 then
		attribute_string = substr (attribute_string, 1, length (attribute_string) - 1);

	     code = 0;
	     return;
	end make_string;
	
check_validity: proc (attributes, validity_level, code);

dcl (attributes (2) bit (72),
     validity_level fixed bin parameter,
     code fixed bin (35)) parameter;

dcl (i, j) fixed bin;

	     validity_level = Absolute;		/* for now, anyway */

/* All bits should be within limits */

	     if substr (attributes (1), rtde.n_defined_attributes+1) ^= ""b then do;
badatt:		code = error_table_$rcp_bad_attributes;
		validity_level = Invalid;
		return;
	     end;

/* Protected attributes must be subset of current attributes */

	     if (attributes (1) & attributes (2)) ^= attributes (2) then goto badatt;

/* Enabled attributes must be subset of potential attributes */

	     if (attributes (1) & string (rtde.attributes_valid)) ^= attributes (1) then goto badatt;

/* Now check to see that one and only one of each "key=val" attributes is on. */

	     do i = 1 to rtde.n_exclusion_specs;

		temp_spec = exclusion_specs (i) & attributes (1);

		j = index (temp_spec, "1"b);

		if j = 0 then validity_level = max (validity_level, Relative);
		else if j < length (temp_spec) then
		     if substr (temp_spec, j+1) ^= ""b then validity_level = max (validity_level, Multiple);
	     end;

	     code = 0;				/* congratulations, you passed */
	     return;

	end check_validity;
	
interpret_string: proc (attribute_string, relatts, code);

dcl (attribute_string char (*) varying,
     relatts (4) bit (72),
     code fixed bin (35)) parameter;

dcl  single_attr char (12) varying,
    (i, j, k) fixed bin,
    (protected, not) bit (1) aligned,
     temp_spec bit (72) aligned;

/* A relative attribute string consists of four bit (72) quantities.
   The first represents the attributes that were specified to be ON.
   The second represents the attributes that were specified as PROTECTED.
   The third represents the attributes that must be turned OFF, either as the
   result of the user specifying "^attr", or having "key=val" specified
   such that all other possible "key=valN" must be forced off.
   The fourth represents the attributes that must be NONPROTECTED, either as the
   result of the user specifying "attr", or having "key=val" or "key=val*" specified
   such that all other possible "key=valN must be DEPROTECTED. */

/* An absolute attribute string consists of the first two of these quantities
   which are always a consistent combination of attributes. */

	     i = 1;
	     relatts (*) = ""b;

	     do while (i <= length (attribute_string));

		j = index (substr (attribute_string, i), ",") - 1;
		if j = -1 then j = length (substr (attribute_string, i));

		single_attr = substr (attribute_string, i, j);
		single_attr = rtrim (single_attr, " "); /* PL/I won't do this correctly in one stmt right now. */
		if substr (single_attr, 1, 1) = "^" then do;

		     if index (single_attr, "=") > 0 then do; /* "^key=val" makes no sense--
						   you turn one of those off by turning another on. */
			code = error_table_$rcp_bad_attributes;
			return;
		     end;

		     single_attr = copy (substr (single_attr, 2), 1);
		     not = "1"b;
		end;

		else not = ""b;

		if substr (single_attr, length (single_attr), 1) = "*" then do;
		     if not then do;		/* "^mumble*" ?? */
			code = error_table_$rcp_bad_attributes;
			return;
		     end;
		     single_attr = substr (single_attr, 1, length (single_attr) - 1);
		     protected = "1"b;
		end;

		else protected = ""b;

		do k = 1 to rtde.n_defined_attributes while ((rtde.attribute_names (k) ^= single_attr)
			| (substr (rtde.attributes_valid, k, 1) = "0"b));
		end;

		if k > rtde.n_defined_attributes then do;
		     code = error_table_$rcp_bad_attributes;
		     return;
		end;

		if not then substr (relatts (3), k, 1) = "1"b;
		else substr (relatts (1), k, 1) = "1"b;

		if protected then substr (relatts (2), k, 1) = "1"b;
		else substr (relatts (4), k, 1) = "1"b;

		i = i + j + 1;
	     end;

/* Perform exclusions to turn off all other values of "key=a" */

	     do i = 1 to rtde.n_exclusion_specs;

		if (rtde.exclusion_specs (i) & relatts (1)) ^= ""b then do;
						/* One of these exclusive attributes has been mentioned */
		     temp_spec = rtde.exclusion_specs (i) & ^relatts (1) & rtde.attributes_valid;
						/* last operand necc. due to bug in early vers. of up_rtdt_ */
		     relatts (3) = relatts (3) | temp_spec; /* turn OFF matching keys */
		     relatts (4) = relatts (4) | temp_spec; /* and their protected counterparts */
		end;
	     end;

	     return;
	end interpret_string;
	
test:	entry (newsysdir);

dcl  newsysdir char (*);

	if newsysdir = "" then sysdir = ">system_control_1";
	else sysdir = newsysdir;
	return;

     end cv_rcp_attributes_;
