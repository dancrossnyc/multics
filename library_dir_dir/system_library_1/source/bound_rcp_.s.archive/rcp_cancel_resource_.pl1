/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


rcp_cancel_resource_: proc (rsc_type, rsc_name, code);


/*

   This procedure will tell Resource Management when RCP is finished with a resource.  It will only
   do so if Resource Management is enabled.


   Initially coded 3/79 by Michael R. Jordan for MR7.0R.


*/

/*		PARAMETERS		*/


dcl  code fixed bin (35);				/* Error code. */
dcl  rsc_name char (*);				/* Name of the resource. */
dcl  rsc_type char (*);				/* Type of resource. */


/*		ERROR CODES		*/


dcl  error_table_$action_not_performed fixed bin (35) ext;


/*		ENTRIES CALLED		*/


dcl  rcp_pointers_$com_seg entry () returns (ptr);
dcl  rcp_pointers_$data entry () returns (ptr);
dcl  rcprm_find_resource_$cancel entry (ptr, char (*), ptr, fixed bin (35));


/*		BUILTIN FUNCTIONS		*/


dcl  addr builtin;
dcl  null builtin;
dcl  size builtin;
dcl  string builtin;

%include rcp_data;

%include rcp_com_seg;

%include resource_control_desc;

/*

   Get everything set and check to see if Resource Management is enabled.

*/


	code = 0;					/* No error. */

	rcpd_ptr = rcp_pointers_$data ();
	rcs_ptr = rcp_pointers_$com_seg ();

	if ^rcpd.modes.resource_mgmt_enabled		/* No Resource Management, no work. */
	then return;


/*

   Now that we know Resource Management is enabled, we can tell him that we are
   finished with this resource.

*/


	Resource_count = 1;				/* Only one resource. */

	begin;

dcl  garbage (size (resource_descriptions)) bit (36);


	     string (garbage) = ""b;
	     resource_desc_ptr = addr (garbage);

	     resource_descriptions.version_no = resource_desc_version_1;
	     resource_descriptions.n_items = 1;
	     resource_descriptions.item (1).type = rsc_type;
	     resource_descriptions.item (1).name = rsc_name;
	     resource_descriptions.item (1).given.name = "1"b;

	     call rcprm_find_resource_$cancel (resource_desc_ptr, (rcs.acs_directory), null (), code);

	     if code = error_table_$action_not_performed then
		code = resource_descriptions.item (1).status_code;

	end;


	return;


     end rcp_cancel_resource_;
