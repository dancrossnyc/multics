/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */
/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
rcp_setup_event:
     proc (a_operation, a_effmode, a_event_flag, a_error_code);

/*            This internal subroutine sets up the event flag
   *          structure needed to determine if auditing of the
   *	    event is required.
   *
   *            Created 850221 by Maria M. Pozzo
   *
*/

/*            ARGUMENT DATA                     */

dcl	a_operation	   bit (36) aligned;	/* (I) The RCP operation */
dcl	a_priv_gate_call	   bit (1);		/* (I) "1"b if the call was made from rcp_sys_, rcp_admin_, rcp_priv_. */
dcl	a_effmode		   bit (3);		/* (I) The resulting effective mode of the subject to the resource. */
dcl	a_event_flag	   bit (36) aligned;	/* (O) Pointer to the event_flag structure. */
dcl	a_error_code	   fixed bin (35);		/* (O) Error code. */

/*            AUTOMATIC DATA                    */

dcl	effmode		   bit (3);

dcl	operation		   bit (36) aligned;
dcl	base_op		   bit (36) aligned;

dcl	local_code	   fixed bin (35);

dcl	event_ptr		   ptr;
dcl	operation_ptr	   ptr;

dcl	1 en_access_op	   like encoded_access_op aligned based (operation_ptr);

/*                    EXTERNAL ENTRIES                        */

dcl	access_operations_$rcp_register
			   bit (36) aligned external;
dcl	access_operations_$rcp_deregister
			   bit (36) aligned external;
dcl	access_operations_$rcp_register_acquire
			   bit (36) aligned external;
dcl	access_operations_$rcp_preload
			   bit (36) aligned external;
dcl	access_operations_$rcp_set_access
			   bit (36) aligned external;
dcl	access_operations_$rcp_clear
			   bit (36) aligned external;
dcl	access_operations_$rcp_unassign
			   bit (36) aligned external;
dcl	access_operations_$rcp_add_device
			   bit (36) aligned external;
dcl	access_operations_$rcp_delete_device
			   bit (36) aligned external;
dcl	access_operations_$rcp_copy_registry
			   bit (36) aligned ext static;
dcl	access_operations_$rcp_delete_registry
			   bit (36) aligned ext static;
dcl	access_operations_$rcp_reconstruct_registry
			   bit (36) aligned ext static;
dcl	access_operations_$rcp_update_registry_header
			   bit (36) aligned ext static;

/*  Copy arguments */

	operation = a_operation;
	base_op = operation;
	addr (base_op) -> en_access_op.detailed_operation = 0;
	ops_ptr = addr (addr (operation) -> en_access_op.detailed_operation);
	effmode = a_effmode;
	event_ptr = addr (a_event_flag);
	local_code = 0;

	event_ptr -> audit_event_flags.special_op = special ();
	event_ptr -> audit_event_flags.admin_op = admin ();
	event_ptr -> audit_event_flags.priv_op = priv ();
	event_ptr -> audit_event_flags.grant = (effmode ^= "000"b);
	event_ptr -> audit_event_flags.cc_1_10 = "0"b;
	event_ptr -> audit_event_flags.cc_10_100 = "0"b;

MAIN_RETURN:
	a_error_code = local_code;

	return;
%page;
special:
     proc () returns (bit (1));

/* Operations which change the access class range of the object are special. */
/* Operations which change the acs_path are also special. */

	if base_op = access_operations_$rcp_set_access then
	     return ("1"b);
	else return ("0"b);

     end special;
%page;
admin:
     proc () returns (bit (1));

/* Operations that can only be called from rcp_sys_, rcp_admin_ or */
/* rcp_priv_. */

	if (base_op = access_operations_$rcp_unassign & (detailed_operation.force | detailed_operation.process)) then
	     return ("1"b);
	if base_op = access_operations_$rcp_add_device | base_op = access_operations_$rcp_delete_device then
	     return ("1"b);
	if base_op = access_operations_$rcp_preload then
	     return ("1"b);
	if base_op = access_operations_$rcp_register | base_op = access_operations_$rcp_register_acquire
	     | base_op = access_operations_$rcp_deregister then
	     return ("1"b);
	if base_op = access_operations_$rcp_clear then
	     return ("1"b);
	if base_op = access_operations_$rcp_copy_registry | base_op = access_operations_$rcp_delete_registry
	     | base_op = access_operations_$rcp_reconstruct_registry
	     | base_op = access_operations_$rcp_update_registry_header then
	     return ("1"b);

	return ("0"b);

     end admin;
%page;
priv:
     proc () returns (bit (1));

/* Standard operations that are called with a -priv or other argument */
/* that causes them to be invoked through a privileged gate.          */
/* ADMIN operations are invoked through a privileged gate as well and */
/* they are considered to be PRIV operations also.                    */

	if detailed_operation.priv_gate_call then
	     return ("1"b);
	else return ("0"b);

     end priv;
%page;
%include access_audit_encoded_op;
%page;
%include rcp_ops;
%page;
%include access_audit_eventflags;

     end rcp_setup_event;
