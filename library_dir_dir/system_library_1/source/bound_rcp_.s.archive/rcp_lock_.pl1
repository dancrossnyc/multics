/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


rcp_lock_:  procedure;

/*	This program is an internal RCP interface.
*	Created on 12/07/74 by Bill Silver.
*
*	This program manages the locks that control RCPD and RCS.
*	It contains the following two entry points:
*	     1.	lock   -	Lock the segment.
*	     2.	unlock -	Unlock the segment.
*/

/*		ARGUMENT  DATA		*/

dcl	arg_ecode		fixed bin(35);	/* (O) error_table_ code. */
dcl	arg_lock_info_ptr	ptr;		/* (I) Pointer to lock info structure. */


/*		AUTOMATIC  DATA		*/

dcl	ecode		fixed bin(35);	/* error_table_ code. */
dcl	time_locked	fixed bin(71);	/* Length of time lock was locked. */
dcl	time_waiting	fixed bin(71);	/* Length of time waiting for lock. */


/*		EXTERNAL ENTRIES CALLED	*/

dcl	error_table_$invalid_lock_reset  fixed bin(35)  external;

dcl	admin_gate_$guaranteed_eligibility_off	entry  options(variable);
dcl	admin_gate_$guaranteed_eligibility_on	entry  options(variable);
dcl	rcp_set_lock_$meter_lock    entry  (bit(36) aligned,fixed bin,fixed bin(71),fixed bin(71),fixed bin(35));
dcl	rcp_set_lock_$meter_unlock  entry  (bit(36) aligned,fixed bin(71),fixed bin(71),fixed bin(35));
/*	*/
%include rcp_com_seg;
/*	*/
/*	This entry point is called to lock the specified lock.  Before locking we
*	must make sure that we will not lose eligibility while the lock is locked.
*	We will meter any time that we have to wait for the lock.  We will wait for
*	up to 2 minutes for the lock.  We will remember when the lock was locked
*	so we can calculate other meters at unlock time.
*/
lock:  entry  (arg_lock_info_ptr,arg_ecode);

	lock_info_ptr = arg_lock_info_ptr;	/* Get pointer to lock info structure. */

	call admin_gate_$guaranteed_eligibility_on();

	call rcp_set_lock_$meter_lock (lock_info.lock,120,lock_info.time_of_lock,time_waiting,ecode);
	if   (ecode ^= 0)  &		/* Any trouble locking? */
	     (ecode ^= error_table_$invalid_lock_reset)
	     then do;			/* Yes, lock not locked. */
		arg_ecode = ecode;		/* Abort lock. */
		call admin_gate_$guaranteed_eligibility_off();
		return;
	     end;

	lock_info.num_locks = lock_info.num_locks + 1;
	if   time_waiting ^= 0
	     then lock_info.num_lock_waits = lock_info.num_lock_waits + 1;
	lock_info.tot_wait_time = lock_info.tot_wait_time + time_waiting;

	arg_ecode = 0;
	return;
/*	*/
/*	This entry is called to unlock the specified lock.
*	After it is unlocked we must turn OFF the guaranteed eligibility.
*	We will compute the length of time the lock was locked.
*/
unlock:  entry  (arg_lock_info_ptr);

	lock_info_ptr = arg_lock_info_ptr;	/* Get pointer to lock info structure. */

	call rcp_set_lock_$meter_unlock (lock_info.lock,lock_info.time_of_lock,time_locked,ecode);

	call admin_gate_$guaranteed_eligibility_off();

	lock_info.tot_lock_time = lock_info.tot_lock_time + time_locked;

	end  rcp_lock_;
