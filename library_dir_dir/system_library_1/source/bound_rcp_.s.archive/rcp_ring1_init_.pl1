/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(85-09-11,Fawcett), approve(85-09-11,MCR6979),
     audit(85-12-19,CLJones), install(86-03-21,MR12.0-1033):
     Add MCA support
  2) change(86-05-13,GJohnson), approve(86-05-13,MCR7387),
     audit(86-05-13,Martinson), install(86-05-14,MR12.0-1056):
     Correct error message documentation.
                                                   END HISTORY COMMENTS */

/* format: indattr,inddcls,dclind5,idind30,struclvlind5,ifthenstmt,ifthendo,^inditerdo,^indnoniterend,case,^tree,^indproc,^indend,^delnl,^insnl,comcol81,indcom,linecom,^indcomtxt */

rcp_ring1_init_: procedure (arg_rif, arg_ecode);

	/*	This program is called to perform RCP initialization during the
   *	initialization of the answering service.  It is called by as_init_.
   *	It will create the RCP directory if it does not already exist.
   *	It will create an ACS for each device that does not already have one.
   *
   *	Created on 05/08/75 by Bill Silver.
   *	Modified on 09/21/77 by R.J.C. Kissel to add the workspace ACS.
   *	Modified on 04/24/78 by Michael R. Jordan to add RCPD modes initialization.
   *	Modified 11/14/78 by C. D. Tavares to add >sss to initializer's search rules for RCPRM use.
   *	Modified 3/79 by Michael R. Jordan for MR7.0R.
   *      Modified 04/79 by CDT for new authentication levels.
   *	Modified 4/82 by E. N. Kittlitz to log error setting search rules. 
   *	Modified 830103 to preassign operator's consoles... -E. A. Ranzenbach
   *      Modified 1984-10-27 by E. Swenson to remove setting of search rules
   *         for ring-1.  In a cold boot, the shutting down and rebooting
   *         which is directed in the installation instructions will get
   *         the ring-1 search rules in order.  In a non-cold boot, the
   *         the search rules will already be those specified as default in
   *         active_hardcore_data.
   *      Modified 1985-03-08, BIM: remove OPC preassignment -- it does
   *         the wrong thing.	         
   *      Modified 1985-04-03, PKF / RAF to add MCA support
*/

	dcl  arg_ecode		     fixed bin (35);		/* (O) error_table_ code. */
	dcl  1 arg_rif		     like rcp_init_flags;		/* pointer to rcp_info in installation parms */

	dcl  rings		     (3) fixed bin (3);		/* Ring brackets for RCP directory. */

	dcl  access		     fixed bin (5);			/* Access to an ACS segment. */
	dcl  caller_level		     fixed bin;			/* Caller's validation level. */
	dcl  dir_name		     char (168);			/* Directory containing the RCP direcotry. */
	dcl  ecode		     fixed bin (35);
	dcl  entryname		     char (32);			/* Entry name of the RCP directory. */
	dcl  group_id		     char (32);			/* Initializer process group ID. */
	dcl  i			     fixed bin;

	dcl  rcp_level		     fixed bin;			/* Current validation level. */
	dcl  syserr_code		     fixed bin;			/* used in calls to syserr. */

	dcl  wkspace_acs		     char (13) aligned internal static options (constant)
				     init ("workspace.acs");

	dcl  (addr, substr, unspec)
				     builtin;

	dcl  cleanup		     condition;

	dcl  (error_table_$no_dir,
	     error_table_$noentry)	     fixed bin (35) external;

	dcl  admin_gate_$syserr	     entry options (variable);
	dcl  admin_gate_$syserr_error_code entry options (variable);
	dcl  cu_$level_get		     entry (fixed bin);
	dcl  cu_$level_set		     entry (fixed bin);
	dcl  expand_pathname_	     entry (char (*), char (*), char (*), fixed bin (35));
	dcl  get_group_id_		     entry returns (char (32));
	dcl  get_ring_		     entry returns (fixed bin);
	dcl  hcs_$append_branch	     entry (char (*) aligned, char (*) aligned, fixed bin (5), fixed bin (35));
	dcl  hcs_$append_branchx	     entry (char (*), char (*), fixed bin (5), (3) fixed bin (3), char (*),
				     fixed bin (1), fixed bin (1), fixed bin (24), fixed bin (35));
	dcl  hcs_$get_user_effmode	     entry (char (*) aligned, char (*) aligned, char (*), fixed bin, fixed bin (5), fixed bin (35));
	dcl  hcs_$set_max_length	     entry (char (*) aligned, char (*) aligned, fixed bin (19), fixed bin (35));
	dcl  rcp_pointers_$com_seg	     entry returns (ptr);
	dcl  rcp_pointers_$data	     entry returns (ptr);
	dcl  rcprm_verify_registries_	     ext entry (char (*), fixed bin (35));

%include access_mode_values;

%include rcp_data;

%include rcp_com_seg;

%include syserr_constants;

	/*	Begin rcp_ring1_init_.pl1
*/

	rcp_level = get_ring_ ();					/* Get RCP's validation level. */
	call cu_$level_get (caller_level);				/* Get caller's validation level. */
	on cleanup begin;						/* If trouble cleanup. */
		call cu_$level_set (caller_level);
	     end;
	call cu_$level_set (rcp_level);				/* Set validation level to RCP level. */


	rcpd_ptr = rcp_pointers_$data ();				/* We need info in rcp_data and rcp_com_seg. */
	rcs_ptr = rcp_pointers_$com_seg ();

	call cu_$level_set (caller_level);				/* Now we have pointers, use caller level. */
	arg_ecode = 0;						/* No bad error code returned. */

	unspec (rcpd.modes) = unspec (arg_rif);

	if rcpd.init then return;					/* already initalized, don't bother */
	group_id = get_group_id_ ();					/* Get this info once. */
	syserr_code = SYSERR_PRINT_WITH_ALARM;				/* Turn on bleeper once. */

	/* First just see if directory is there. */
	call hcs_$get_user_effmode (rcs.acs_directory, rcpd.device (1).acs_name,
	     group_id, caller_level, access, ecode);
	if ecode = error_table_$no_dir				/* Is directory there? */
	then do;							/* No, go create the RCP directory. */
		call CREATE_RCP_DIR;
		if ecode ^= 0
		then goto err_return;
	     end;

	if ^rcpd.modes.resource_mgmt_enabled then
	     do i = 1 to rcpd.tot_devices;				/* Test each device. */
	     device_ptr = addr (rcpd.device (i));
	     call hcs_$get_user_effmode (rcs.acs_directory, device.acs_name, group_id, rcp_level, access, ecode);
	     if ecode = error_table_$noentry				/* Does this ACS exist? */
	     then call CREATE_ACS (device.acs_name);			/* No, we will create it. */
	end;

	call hcs_$get_user_effmode (rcs.acs_directory, wkspace_acs, group_id, rcp_level, access, ecode);

	if ecode = error_table_$noentry				/* Is there a workspace ACS? */
	then call CREATE_ACS (wkspace_acs);				/* No, create it. */

	if rcpd.modes.resource_mgmt_enabled then
	     call rcprm_verify_registries_ (">system_control_1", ecode);
	if ecode ^= 0 then goto err_return;

	if rcpd.modes.resource_mgmt_enabled
	     & rcpd.modes.auto_registration
	     & (rcpd.modes.authentication_level < Automatic_authentication) then
	     call admin_gate_$syserr (SYSERR_PRINT_WITH_ALARM,
		"RCP: Auto registration enabled without strict authentication required.
^8xThis may cause errors in automatic registration of volumes.");
	rcpd.init = "1"b;						/* initialization complete */

	return;

err_return:
	arg_ecode = ecode;
	return;

	/* 	*/
CREATE_RCP_DIR: procedure;

	/*	This procedure is called to create the RCP directory that will contain
   *	the Access Control Segments for each device.   The default access to
   *	this directory will be taken from the initial directory ACL of the
   *	containing directory.  In addition all users will be given S access.
*/
	call expand_pathname_ ((rcs.acs_directory), dir_name, entryname, ecode);
	if ecode ^= 0
	then do;
		call admin_gate_$syserr_error_code (SYSERR_PRINT_WITH_ALARM, ecode, "RCP: Error expanding ^a:", rcs.acs_directory);
		return;
	     end;

	rings (*) = 7;
	call hcs_$append_branchx (dir_name, entryname, S_ACCESS_BIN, rings, "*.*.*", 1, 0, 0, ecode);
	if ecode ^= 0
	then do;
		call admin_gate_$syserr_error_code (SYSERR_PRINT_WITH_ALARM, ecode, "RCP: Error creating ^a:", rcs.acs_directory);
		return;
	     end;

	call admin_gate_$syserr (SYSERR_PRINT_WITH_ALARM, "RCP: Created ^a with default access.", rcs.acs_directory);

	syserr_code = SYSERR_PRINT_ON_CONSOLE;				/* Only turn on bleeper once. */

     end CREATE_RCP_DIR;

	/* 	*/
CREATE_ACS: procedure (acs_name);

	/*	This procedure is called to create an ACS for the current device.
   *	The default access to this device will be RW for the current process.
   *	In addition to creating the ACS we will set the max segment length
   *	of this segment to 0.
*/

	dcl  acs_name		     char (*) aligned;		/* name of the segment to create. */

	call cu_$level_get (caller_level);
	if substr (acs_name, 1, 3) = "mca" then do;
		rcp_level = get_ring_ ();

		on cleanup begin;
			call cu_$level_set (caller_level);
		     end;
		call cu_$level_set (rcp_level);
		rings (*) = 1;					/* must be in ring 1 */
		call hcs_$append_branchx ((rcs.acs_directory), (acs_name), RW_ACCESS_BIN, rings, "", 0, 0, 0, ecode);
		if ecode ^= 0
		then do;
			call admin_gate_$syserr_error_code (SYSERR_PRINT_WITH_ALARM, ecode, "RCP: Error creating ACS ^a:", acs_name);
			goto CREATE_ACS_EXIT;
		     end;

		call admin_gate_$syserr (syserr_code, "RCP: Created ^a>^a with default access.",
		     rcs.acs_directory, acs_name);

		call hcs_$set_max_length (rcs.acs_directory, acs_name, 0, ecode);
		if ecode ^= 0
		then call admin_gate_$syserr_error_code (SYSERR_PRINT_WITH_ALARM, ecode, "RCP: Error setting max length of ^a:", acs_name);

		goto CREATE_ACS_EXIT;
	     end;
	else do;
		call hcs_$append_branch (rcs.acs_directory, acs_name, RW_ACCESS_BIN, ecode);
		if ecode ^= 0
		then do;
			call admin_gate_$syserr_error_code (SYSERR_PRINT_WITH_ALARM, ecode, "RCP: Error creating ACS ^a:", acs_name);
			goto CREATE_ACS_EXIT;
		     end;

		call admin_gate_$syserr (syserr_code, "RCP: Created ^a>^a with default access.",
		     rcs.acs_directory, acs_name);

		call hcs_$set_max_length (rcs.acs_directory, acs_name, 0, ecode);
		if ecode ^= 0
		then call admin_gate_$syserr_error_code (SYSERR_PRINT_WITH_ALARM, ecode, "RCP: Error setting max length of ^a:", acs_name);
	     end;

CREATE_ACS_EXIT:

	syserr_code = SYSERR_PRINT_ON_CONSOLE;				/* Turn on bleeper only once. */
	call cu_$level_set (caller_level);

     end CREATE_ACS;

%page;

	/* BEGIN MESSAGE DOCUMENTATION

   Message:
   RCP: Error expanding DIR: ERROR_MESSAGE

   S:	$beep

   T:	$run

   M:	The pathname of the acs directory is incorrect. It should be >system_control_1>acs.
   $err
   The system may be unable to use I/O devices.

   A:	$contact


   Message:
   RCP: Error creating DIR: ERROR_MESSAGE

   S:	$beep

   T:	$run

   M:	The system was unable to create the ACS directory.
   It should be >system_control_1>acs.
   The system may be unable to use I/O devices.

   A:	$contact


   Message:
   RCP: Created DIR with default access.

   S:	$beep

   T:	$run

   M:	The directory (usually >system_control_1>rcp) was created
   because it was not found at startup.
   It may have been destroyed in a crash.
   This message is normal during a cold boot of the Multics hierarchy.

   A:	If users other than system processes should have access to the directory,
   the system administrator must set the ACL appropriately.


   Message:
   RCP: Error creating ACS DEVICE.acs: ERROR_MESSAGE

   S:	$beep

   T:	$run

   M:	The system was unable to create an access control segment for DEVICE.
   No user will be able to attach it.

   A:	$contact


   Message:
   RCP: Created DIR>DEVICE.acs with default access.

   S:	$beep

   T:	$run

   M:	The system has created an access control segment for DEVICE
   because one was not found at startup.
   It may have been destroyed in a crash.
   This message is normal during the first use of a device on the system, and at cold boot.

   A:	If users other than system processes should have access to DEVICE,
   the system administrator must set the ACL of DEVICE.acs appropriately.


   Message:
   RCP: Error setting max length of DEVICE.acs: ERROR_MESSAGE

   S:	$beep

   T:	$run

   M:	$err

   A:	$contact

   Message:
   RCP: Auto Registration is enabled without Exact Authentication required.  This could lead to errors in automatic registration of volumes.

   S:	$beep

   T:	$run

   M:	This is a warning.  If the system is operated with auto registration enabled and exact authentication
   of tape volumes is not required, there is a better chance of errors occurring in the registration of tape
   volumes.  Again, it is very important to make sure the volume mounted is the proper one
   for the request if auto registration is enabled.

   A:	$ignore


   END MESSAGE DOCUMENTATION */

     end rcp_ring1_init_;
