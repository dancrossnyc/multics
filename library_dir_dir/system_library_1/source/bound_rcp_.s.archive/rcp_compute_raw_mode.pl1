/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */

/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
rcp_compute_raw_mode:
     procedure (a_rm_on, a_requestor_info_ptr, a_resource_info_ptr, a_acs_path, a_owner, a_raw_mode, a_error_code);

/****^ This internal subroutine implements discretionary access
       computations for RCP.
       Created 841025 by Maria M. Pozzo */


/****^  HISTORY COMMENTS:
  1) change(85-07-12,Pozzo), approve(86-02-21,MCR7346), audit(86-07-29,Farley),
     install(86-08-01,MR12.0-1108):
     Modified to allow owners to retain REW access if the ACS specified in the
     registry does not exist.
                                                   END HISTORY COMMENTS */


/****^ If Resource Management is DISABLED, simply get the ACL from
        the ACS segment located in >sc1>rcp.
       If Resource Management is ENABLED, and there is an ACS segment
        set the access from the ACL of the ACS segment.
       If there is no ACS, get the resource owner from the registry
        and set as follows:
               owner = user_id           REW owner
                                         NULL world
               owner = free              NULL world
               owner = system            NULL world */

/*                        ARGUMENT DATA                          */

dcl	a_rm_on		   bit (1) aligned;		/* (I) "1"b means Resource Management is Enabled. */
dcl	a_requestor_info_ptr   ptr;			/* (I) Pointer to information about the real requestor of the RCP operation - not Initializer. */
dcl	a_resource_info_ptr	   ptr;			/* (I) Pointer to information about the resource being requested */
dcl	a_acs_path	   char (168);		/* (I) Pathname of the associated ACS segment */
dcl	a_owner		   char (32);		/* (I/O) Owner of the resource */
dcl	a_raw_mode	   bit (3);		/* (O) Resulting discretionary access mode of requestor to resource */
dcl	a_error_code	   fixed bin (35);		/* (O) Error code */


/*                      AUTOMATIC                    */

dcl	local_raw_mode	   bit (3);		/* Local raw mode */
dcl	rm_on		   bit (1) aligned;		/* ON=> Resource Management enabled */
dcl	temp_mode		   bit (36) aligned;	/* Conversion of modes */
dcl	is_volume		   bit (1);		/* ON=> resource type is volume */

dcl	acs_path		   char (168);		/* ACS path name */
dcl	owner		   char (32) varying;	/* Resource owner */
dcl	registry_dir	   char (64);		/* Registry directory */
dcl	user		   char (32);		/* User id */

dcl	error_code	   fixed bin (35);


/*                      EXTERNAL STATIC              */

dcl	error_table_$resource_bad_access
			   fixed bin (35) ext static;
dcl	error_table_$resource_unknown
			   fixed bin (35) ext static;

/*                      BUILTINS                     */

dcl	(length, rtrim, substr)
			   builtin;

/*                      ENTRIES CALLED               */

dcl	hcs_$get_user_raw_mode entry (char (*), char (*), char (*), bit (36) aligned, fixed bin (35));
dcl	resource_info_$get_type
			   entry (char (*), bit (1), fixed bin (35));
%page;
/* Copy input arguments */

	rm_on = a_rm_on;
	requestor_info_ptr = a_requestor_info_ptr;
	resource_info_ptr = a_resource_info_ptr;
	acs_path = a_acs_path;
	owner = a_owner;

/* Initialize local variables and get set up */

	local_raw_mode = N_ACCESS;
	temp_mode = (36)"0"b;
	error_code = 0;

/* The user is in the form of *.*.* and the owner is in */
/* the form *.* in the registry so must strip user of tag. */

	user = substr (requestor_info.user_id, 1, length (rtrim (requestor_info.user_id)) - 2);
	registry_dir = resource_info.registry_dir;

/* Is Resource Management Enabled */

	if (rm_on & acs_path = "") then do;
	     if owner = user then			/* Owner gets REW */
		local_raw_mode = REW_ACCESS;
	     else local_raw_mode = N_ACCESS;		/* NULL access to world */
	end;
	else if (acs_path ^= "") then do;		/* We have an ACS path */
	     call hcs_$get_user_raw_mode (acs_path, "", (requestor_info.user_id), temp_mode, error_code);

/*  If the access on the acs_path cannont be determined (i.e. it */
/*  doesn't exist or something) the owner should retain REW. */

	     if error_code ^= 0 then
		if user = owner then do;
		     local_raw_mode = REW_ACCESS;
		     error_code = 0;
		end;
		else goto MAIN_RETURN;
	     else local_raw_mode = substr (temp_mode, 1, 3);
	end;
	else do;

/*  We know there's no ACS and RM is disabled */

	     call resource_info_$get_type (resource_info.resource_type, is_volume, error_code);
	     if error_code ^= 0 then
		goto MAIN_RETURN;
	     if is_volume then
		local_raw_mode = RW_ACCESS;		/* Everyone has RW to volumes */

/* At this point it is not a volume and there is no */
/* ACS for it so it is not a known resource. */

	     else error_code = error_table_$resource_unknown;
	end;

MAIN_RETURN:
	if local_raw_mode = N_ACCESS then
	     error_code = error_table_$resource_bad_access;
	a_raw_mode = local_raw_mode;
	a_error_code = error_code;
	return;
%page;
%include access_mode_values;
%page;
%include rcp_requestor_info;
%page;
%include rcp_resource_info;
%page;
%include rcp_registry;

     end rcp_compute_raw_mode;
