/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
rcp_assign_device_:
     procedure (arg_device_type, arg_device_info_ptr, arg_event_id, arg_comment, arg_rcp_id, arg_ecode);

/*	This program implements the rcp_$assign_device entry point.
   *	Created on 11/20/74 by Bill Silver.
   *
   *	This program is called to assign one device class resource.  We will allocate one
   *	RCS entry of this assignment request.  We will fill in this entry with all
   *	of the data needed to make this assignment.  If there are no errors we will call
   *	rcp_control_
   *	to perform the actual device assignment.  The results of this call will not
   *	be tested until a call is made to rcp_$check_assign.
*/
/*        Modified 841005 to interface to rcp_control_ instead of
   *          rcp_initializer...M.M.Pozzo
   *        Modified 850131 as part of the B2 effort...M. M. Pozzo
   *	Modified 850304 to copy device_info correctly...Chris Jones
*/

/*		ARGUMENT  DATA		*/

dcl	arg_device_type	   char (*);		/* (I) Type of device being assigned. */
dcl	arg_comment	   char (*);		/* (I) Caller's comment. */
dcl	arg_device_info_ptr	   ptr;			/* (I) Pointer to device info structure. */
dcl	arg_ecode		   fixed bin (35);		/* (O) error_table_ code. */
dcl	arg_event_id	   fixed bin (71);		/* (I) Caller's event channel ID. */
dcl	arg_rcp_id	   bit (36) aligned;	/* (O) ID for this assignment request. */


/*		AUTOMATIC  DATA		*/


dcl	device_info_buffer	   (RCP_MAX_DEVICE_INFO_SIZE) bit (36) aligned;
dcl	device_offset	   bit (18) aligned init ("0"b);
						/* Offset to device entry passed to rcp_control_. */
dcl	process_id	   bit (36) aligned init ("0"b);
						/* Process id of process making the request */
dcl	rcp_id		   bit (36) aligned;	/* ID that identifies RCS entry. */
dcl	rcse_off		   bit (18);		/* Offset to RCS entry. */
dcl	volume_offset	   bit (18) aligned init ("0"b);
						/* Offset to volume entry passed to rcp_control_. */

dcl	device_name	   char (32) init ("");	/* Device name */
dcl	device_type	   char (32);		/* Device type name. */
dcl	operation		   bit (36) aligned;	/* Type of operation being requested by RCP */

dcl	prev_level	   fixed bin;		/* Caller's validation level. */
dcl	ecode		   fixed bin (35);		/* error_table_ code. */
dcl	error_count	   fixed bin (17) init (0);	/* Input to rcp_control_ for attachment errors */
dcl	1 rcse_buffer	   like rcse aligned;	/* Template RCSE. */

/*		EXTERNAL ENTRIES CALLED	*/

dcl	cleanup		   condition;		/* Used to set up cleanup handler. */

dcl	(addr, rel)	   builtin;

dcl	error_table_$resource_assigned
			   fixed bin (35) external;

dcl	access_operations_$rcp_assign_write
			   bit (36) ext static;

dcl	cu_$level_get	   entry (fixed bin);
dcl	cu_$level_set	   entry (fixed bin);
dcl	get_ring_		   entry returns (fixed bin);
dcl	rcp_control_	   entry (bit (36) aligned, bit (18) aligned, bit (18) aligned, char (*), fixed bin (17),
			   bit (36) aligned, fixed bin (35));
dcl	rcp_device_info_$copy  entry (char (*), ptr, ptr, fixed bin (35));
dcl	rcp_device_info_$get   entry (char (*), ptr, ptr, fixed bin, fixed bin (35));
dcl	rcp_find_$device	   entry (char (*) aligned, bit (18));
dcl	rcp_rcse_$get	   entry (ptr, fixed bin (35));

	call cu_$level_get (prev_level);		/* Save caller's validation level. */
	on cleanup
	     begin;				/* If trouble cleanup. */
	     call cu_$level_set (prev_level);
	end;
	call cu_$level_set (get_ring_ ());		/* Set validation level to RCP level. */

	rcse_off,					/* No RCS entry or rcp_id yet. */
	     rcp_id = "0"b;
	device_type = arg_device_type;		/* Get type of device being assigned. */
	device_info_ptr = arg_device_info_ptr;		/* copy the caller's device_info structure */
	call rcp_device_info_$copy (device_type, device_info_ptr, addr (device_info_buffer), ecode);
	if ecode ^= 0 then
	     goto RETURN;
	device_info_ptr = addr (device_info_buffer);

	rcse_ptr = addr (rcse_buffer);		/* Use template RCSE. */

	call rcp_device_info_$get (device_type, device_info_ptr, rcse_ptr, prev_level, ecode);
	if ecode ^= 0 then
	     goto RETURN;

/* Fill in the rest of the RCSE. */
	rcse.kind = 2;				/* This is an assignment RCSE. */
	rcse.disposition = "1"b;			/* Explicit assignment => retain. */
	rcse.event_id = arg_event_id;			/* Save argument data. */
	rcse.caller_comment = arg_comment;

	if rcse.flags.device			/* Are we assigning a specific device? */
	then do;					/* Yes, see if already assigned to this process. */
	     call rcp_find_$device (rcse.device_name, rcse_off);
	     if rcse_off ^= "0"b			/* Is it already assigned? */
	     then do;				/* Yes. */
		ecode = error_table_$resource_assigned;
		goto RETURN;
	     end;
	end;

	call rcp_rcse_$get (rcse_ptr, ecode);		/* Now get a real assignment RCSE. */
	if ecode ^= 0 then
	     goto RETURN;
	rcse_off = rel (rcse_ptr);			/* Save offset of RCSE. */
	rcp_id = rcse.rcp_id;			/* Get real RCP ID. */

/* Now call rcp_control_ to assign a device. */
	operation = access_operations_$rcp_assign_write;
	volume_offset = "0"b;
	device_offset = rcse_off;
	device_name = rcse.device_name;
	call rcp_control_ (operation, volume_offset, device_offset, device_name, error_count, process_id, ecode);

RETURN:
	arg_rcp_id = rcp_id;			/* Set return arguments. */
	arg_ecode = ecode;
	call cu_$level_set (prev_level);		/* Reset validation level to caller level. */

%include rcp_com_seg;
%page;
%include rcp_device_info_structs;

     end rcp_assign_device_;
