/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(85-09-11,Farley), approve(85-09-11,MCR6979),
     audit(85-12-02,CLJones), install(86-03-21,MR12.0-1033):
     Add MCA support
                                                   END HISTORY COMMENTS */

rcp_match_: procedure;

/*	This program is an internal interface of RCP.
   *	Created on 01/29/75 by Bill Silver.
   *	Modified Jan 1985 by Paul Farley to add device_type (8) "MCA".
   *
   *	This program is called to choose a device that is appropriate for assignment.
   *	It has the following entry points:
   *	     1.	match  -	Given device characteristics that we want to match, see if
   *			a specified test device does match these characteristics.
   *	     2.	select -	Given a list of devices that match the specified character-
   *			istics, select the best device to assign.
*/

/*		ARGUMENT  DATA		*/

	dcl     arg_match_list_ptr	 ptr;		/* (I) Pointer to a list of devices that match. */
	dcl     arg_match_ptr	 ptr;		/* (I/O) I => match,  O => select. */
	dcl     arg_num_match	 fixed bin;	/* (I) Number of devices in match list. */
	dcl     arg_test_ptr	 ptr;		/* (I) Pointer to a device to test. */
	dcl     arg_volume_name	 char (*);	/* (I) Volume to be used with assigned device. */


/*		AUTOMATIC  DATA		*/

	dcl     i			 fixed bin;
	dcl     low_time		 fixed bin (71);	/* Current earliest time. */
	dcl     match_density	 bit (4) aligned;	/* Density that we must match. */
	dcl     match_info_ptr	 ptr;		/* Pointer to info that we must match. */
	dcl     match_list_ptr	 ptr;		/* Pointer to a list of devices that match. */
	dcl     match_speed		 bit (3) aligned;	/* Speed that we must match. */
	dcl     num_match		 fixed bin;	/* Number of devices in match list. */
	dcl     test_density	 bit (4) aligned;	/* Density of device we are testing. */
	dcl     test_info_ptr	 ptr;		/* Pointer to info about device we are testing. */
	dcl     test_speed		 bit (3) aligned;	/* Speed of device we are testing. */
	dcl     volume_name		 char (32);	/* Volume to be used with assigned device. */


/*		BASED  DATA		*/

	dcl     1 match_info	 based (match_info_ptr) like rcse aligned;

	dcl     1 test_info		 based (test_info_ptr) like rcse aligned;

	dcl     match_list		 (num_match) ptr based (match_list_ptr);

	dcl     based_density	 bit (4) aligned based;

	dcl     based_speed		 bit (3) aligned based;

/*	EXTERNAL ENTRIES CALLED	*/

	dcl     addr		 builtin;
	dcl     clock		 builtin;

%include rcp_com_seg;
/* 	*/
match: entry (arg_match_ptr, arg_test_ptr) returns (bit (1));

/*	This entry is called to test if a device matches the specified characteristics.
   *	If it does then we will return a value of "1"b.  If it does not match then
   *	we will return "0"b.  If a device characteristic is not specified then it is not
   *	used in determining whether or not the device matches.
*/
	match_info_ptr = arg_match_ptr;		/* Copy arguments. */
	test_info_ptr = arg_test_ptr;

	if match_info.device_name ^= " "		/* Not blank => looking for specific device. */
	then if match_info.device_name = test_info.device_name
	     then return ("1"b);			/* This is it. */
	     else return ("0"b);			/* No other testing necessary. */

	if match_info.model ^= 0			/* If model specified then test. */
	then if match_info.model ^= test_info.model
	     then return ("0"b);			/* Device model numbers don't match. */

	goto DTYPE (match_info.dtypex);		/* Match other characteristics based on device type. */


DTYPE (1):					/* TAPE */
	if match_info.qualifiers (1) ^= 0		/* If tracks specified then test. */
	then if match_info.qualifiers (1) ^= test_info.qualifiers (1)
	     then return ("0"b);			/* Track types do not match. */
	match_density = addr (match_info.qualifiers (2)) -> based_density;
	test_density = addr (test_info.qualifiers (2)) -> based_density;
	if (match_density & test_density) ^= match_density
	then return ("0"b);				/* Tape density does not match. */
	match_speed = addr (match_info.qualifiers (3)) -> based_speed;
	test_speed = addr (test_info.qualifiers (3)) -> based_speed;
	if (match_speed & test_speed) ^= match_speed
	then return ("0"b);				/* Tape speed does not match. */
	return ("1"b);				/* Everything that had to match did. */


DTYPE (4):					/* PRINTER */
	do i = 1 to match_info.num_qualifiers;		/* Test each qualifying characteristic. */
	     if match_info.qualifiers (i) ^= 0		/* If characteristic specified then test. */
	     then if match_info.qualifiers (i) ^= test_info.qualifiers (i)
		then return ("0"b);			/* No match. */
	end;
	return ("1"b);				/* Everything that had to match did. */


DTYPE (2):					/* DISK */
DTYPE (3):					/* CONSOLE */
DTYPE (5):					/* PUNCH */
DTYPE (6):					/* READER */
DTYPE (7):					/* SPECIAL */
DTYPE (8):					/* MCA */
	return ("1"b);				/* No characteristics => match. */
						/* 	*/
select: entry (arg_match_list_ptr, arg_num_match, arg_volume_name, arg_match_ptr);

/*	This entry is called to select the best device to assign from among
   *	a list of devices that match the assignment requirements.  If the
   *	assignment is to be made based upon a volume then if one of devices
   *	has that volume mounted we will choose that device.  Otherwise,
   *	we will choose the device that has been in its current state the
   *	longest.
*/
	match_list_ptr = arg_match_list_ptr;		/* Copy arguments. */
	num_match = arg_num_match;
	volume_name = arg_volume_name;

	low_time = clock () + 1;			/* Start with latest possible time. */

	do i = 1 to num_match;			/* Test each device that matched. */
	     match_info_ptr = match_list (i);		/* Pointer to device info. */
	     if (volume_name ^= " ") & /* Are we looking for a volume? */
		(volume_name = match_info.volume_name)
	     then do;				/* Yes, and we found it.  Select this device. */
		     arg_match_ptr = match_info_ptr;
		     return;
		end;
	     if match_info.state_time < low_time	/* Has device been in this state longer? */
	     then do;				/* Yes, for now select this device. */
		     test_info_ptr = match_info_ptr;
		     low_time = match_info.state_time;
		end;
	end;

	arg_match_ptr = test_info_ptr;		/* No volume found. */

     end rcp_match_;
