/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


rcp_promote_:  procedure (arg_rcp_id, arg_new_level, arg_ecode);

/*	This program implements the rcp_$promote entry.
*	Created on 11/14/74 by Bill Silver.
*
*	This procedure is called to change (promote or demote) the caller's
*	validation level for the specified RCS entry.  This validation
*	level defines the highest ring from which calls can be made to RCP
*	(and also IOI) that involve this RCS entry.  If there is another
*	RCS entry associated with this one then it will also be promoted.
*	If an attachment kind of RCS entry is found then IOI will be called
*	to promote the associated device if the attachment has completed.
*/

dcl	arg_ecode		fixed bin(35);	/* (O) error_table_ code. */
dcl	arg_new_level	fixed bin;	/* (I) New validation level. */
dcl	arg_rcp_id	bit(36) aligned;	/* (I) RCP ID. */

dcl	caller_level	fixed bin;	/* Caller's validation level. */
dcl	ecode		fixed bin(35);	/* error_table_ code. */
dcl	new_level		fixed bin;	/* New validation level. */
dcl	rcp_id		bit(36)  aligned;	/* RCP ID. */
dcl	rcse_off		bit(18);		/* Offset of RCS entry. */

dcl	cleanup		condition;	/* Used to set up cleanup handler. */

dcl     (	ptr )  builtin;

dcl	admin_gate_$ioi_promote	entry  (fixed bin, fixed bin, fixed bin(35));
dcl	cu_$level_get		entry  (fixed bin);
dcl	cu_$level_set		entry  (fixed bin);
dcl	get_ring_			entry  returns(fixed bin);
dcl	rcp_validate_		entry  (bit(36) aligned, fixed bin, ptr, fixed bin(35));
/*	*/
%include rcp_com_seg;
/*	*/
	rcp_id = arg_rcp_id;		/* Copy arguments. */
	new_level = arg_new_level;

	call cu_$level_get (caller_level);	/* Save caller's validation level. */
	on   cleanup  begin;		/* If trouble reset level. */
	     call cu_$level_set (caller_level);
	end;
	call cu_$level_set (get_ring_());	/* Set validation level to RCP level. */

	call rcp_validate_ (rcp_id, caller_level, rcse_ptr, ecode);
	if   ecode ^= 0			/* Can't change level if call is invalid. */
	     then goto PROMOTE_RETURN;

	call PROMOTE;			/* Promote this RCS entry. */
	if   ecode ^= 0
	     then goto PROMOTE_RETURN;

	if   rcse.rcse_off ^= "0"b		/* Is there an associated entry? */
	     then do;			/* Yes, promote it too. */
		rcse_ptr = ptr(rcse_ptr, rcse.rcse_off);
		call PROMOTE;
	     end;

PROMOTE_RETURN:
	call cu_$level_set (caller_level);	/* Reset validation level. */
	arg_ecode = ecode;			/* Return whatever code we have. */
	return;
/*	*/
PROMOTE:  procedure;

/*	This procedure is called to actually promote an RCS entry.
*	This involves just setting the caller_level in the entry.
*	However, if this is a completed attachment entry (thus already
*	promoted in IOI) then we must call IOI to promote this device
*	to the new level.  An incomplete attachment will not yet be promoted
*	by IOI in ring 0.  We must leave the ring 0 validation level at the
*	RCP level so the higher ring will not interfere with any RCP I/O.
*/
	rcse.caller_level = new_level;	/* Promote RCS entry. */

	if   rcse.kind ^= 1			/* Is it an attachment kind of entry? */
	     then return;			/* No. */

	if   rcse.state ^= 5		/* Is device attachment completed? */
	     then return;			/* No, not yet promoted by IOI in ring 0. */

					/* OK to promote in ring 0 since promoted once already. */
	call admin_gate_$ioi_promote (rcse.ioi_index, new_level, ecode);

	end  PROMOTE;

	end  rcp_promote_;
