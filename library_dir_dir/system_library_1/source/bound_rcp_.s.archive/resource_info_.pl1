/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


resource_info_: proc; return;

/* This subroutine provides an easy way to extract commonly-needed information
   from an RTDT without the calling program having to parse the RTDT itself. */
/*
   Written 04/06/78 by C. D. Tavares
   Modified 6/79 by Michael R. Jordan for MR7.0R to add get_dtypex, get_vtypex, and get_primary_type
   Modified 12/79 by CDT to prevent lossage during cold boots or when >sc1 is not around.
*/

dcl (null, pointer) builtin,
     cleanup condition,
     sysdir char (168) static initial (">system_control_1");

dcl  get_initial_ring_ ext entry returns (fixed bin),
     get_group_id_ ext entry returns (char (32));

%include rtdt;

%include resource_control_desc;

%include rcp_resource_types;

get_type:	entry (resource_type, is_volume_arg, code);

dcl (resource_type char (*),
     is_volume_arg bit (1),
     code fixed bin (35)) parameter;

	rtdtp = null;

	on cleanup call term_rtdt (0);

	call scan_rtdt (resource_type, code);
	if code ^= 0 then do;
	     call term_rtdt (0);
	     return;
	end;

	is_volume_arg = rtde.is_volume;

	call term_rtdt (code);
	return;
	
get_primary_type: entry (resource_type, primary_type, code);

	rtdtp = null ();

	on cleanup call term_rtdt (0);

	call scan_rtdt (resource_type, code);
	if code ^= 0 then do;
	     call term_rtdt (0);
	     return;
	end;

	if rtde.flags.is_synonym then primary_type = rtde.syn_to;
	else primary_type = rtde.name;

	call term_rtdt (code);

	return;
	
get_dtypex: entry (resource_type, primary_type, dtypex, code);

dcl  dtypex fixed bin parameter;
dcl  error_table_$device_type_unknown fixed bin (35) ext;
dcl  primary_type char (*) parameter;

	rtdtp = null ();

	on cleanup call term_rtdt (0);

	call scan_rtdt (resource_type, code);
	if code ^= 0 then do;
	     call term_rtdt (0);
	     return;
	end;

	if rtde.flags.is_synonym then primary_type = rtde.syn_to;
	else primary_type = rtde.name;

	call term_rtdt (code);

	do dtypex = hbound (DEVICE_TYPE, 1) to 1 by -1
		while (primary_type ^= DEVICE_TYPE (dtypex));
	end;

	if dtypex = 0 then code = error_table_$device_type_unknown;

	return;
	
get_vtypex: entry (resource_type, primary_type, vtypex, code);

dcl  error_table_$volume_type_unknown fixed bin (35) ext;
dcl  vtypex fixed bin parameter;

	rtdtp = null ();

	on cleanup call term_rtdt (0);

	call scan_rtdt (resource_type, code);
	if code ^= 0 then do;
	     call term_rtdt (0);
	     return;
	end;

	if rtde.flags.is_synonym then primary_type = rtde.syn_to;
	else primary_type = rtde.name;

	call term_rtdt (code);

	do vtypex = hbound (VOLUME_TYPE, 1) to 1 by -1
		while (primary_type ^= VOLUME_TYPE (vtypex));
	end;

	if vtypex = 0 then code = error_table_$volume_type_unknown;

	return;
	
get_rtypex: entry (resource_type, primary_type, rtypex, is_volume_arg, code);

dcl  rtypex fixed bin;

	rtdtp = null ();

	on cleanup call term_rtdt (0);

	call scan_rtdt (resource_type, code);
	if code ^= 0 then do;
	     call term_rtdt (0);
	     return;
	end;

	is_volume_arg = rtde.is_volume;
	if rtde.flags.is_synonym then primary_type = rtde.syn_to;
	else primary_type = rtde.name;

	call term_rtdt (code);

	if is_volume_arg then do rtypex = hbound (VOLUME_TYPE, 1) to 1 by -1
		while (primary_type ^= VOLUME_TYPE (rtypex));
	end;
	else do rtypex = hbound (DEVICE_TYPE, 1) to 1 by -1
		while (primary_type ^= DEVICE_TYPE (rtypex));
	end;

	if rtypex = 0 then code = error_table_$resource_type_unknown;


	return;
	
limits:	entry (resource_type, maxnum_arg, default_arg, time_arg, code);

dcl (maxnum_arg, default_arg, time_arg) fixed bin parameter;

	rtdtp = null;

	on cleanup call term_rtdt (0);

	call scan_rtdt (resource_type, code);
	if code ^= 0 then do;
	     call term_rtdt (0);
	     return;
	end;

	maxnum_arg = rtde.process_limit;
	default_arg = rtde.default_time;
	time_arg = rtde.max_time;

	call term_rtdt (code);
	return;
	
mates:	entry (resource_type, n_mates_arg, mates_arg, code);

dcl (n_mates_arg fixed bin,
     mates_arg char (*) dimension (*)) parameter;

dcl (i, j) fixed bin,
    (lbound, dim) builtin,
     error_table_$improper_data_format ext fixed bin (35) static,
     error_table_$unimplemented_version ext fixed bin (35) static,
     error_table_$smallarg ext fixed bin (35) static;

	rtdtp = null;

	on cleanup call term_rtdt (0);

	call scan_rtdt (resource_type, code);
	if code ^= 0 then do;
	     call term_rtdt (0);
	     return;
	end;

	n_mates_arg = rtde.n_mates;

	if n_mates_arg > dim (mates_arg, 1) then do;
	     code = error_table_$smallarg;
	     call term_rtdt (0);
	     return;
	end;

	j = lbound (mates_arg, 1);

	do i = 1 to n_mates_arg;
	     mates_arg (j) = rtde.mates (i);
	     j = j + 1;
	end;

	call term_rtdt (code);
	return;
	
defaults:	entry (resource_type, subtype, resource_desc_ptr, resource_no, code);

dcl  subtype char (*) parameter,
     resource_no fixed bin parameter;

dcl 1 master_item aligned like resource_descriptions.item based (mi_ptr);

dcl  mi_ptr pointer,
    (rno, first, last) fixed bin;

dcl  error_table_$resource_type_unknown ext fixed bin (35) static;

dcl  temp_spec bit (36) aligned;


	if resource_descriptions.version_no ^= resource_desc_version_1 then do;
	     code = error_table_$unimplemented_version;
	     return;
	end;

	rtdtp = null;

	on cleanup call term_rtdt (0);

	if resource_no = 0 then do;
	     first = 1;
	     last = resource_descriptions.n_items;
	end;

	else first, last = resource_no;

	do rno = first to last;

	     mi_ptr = addr (resource_descriptions.item (rno));

	     call scan_rtdt (resource_type, code);
	     if code ^= 0 then do;
		call term_rtdt (0);
		return;
	     end;

	     master_item.type = resource_type;

	     if subtype ^= "" then do;
		do i = 1 to rtde.n_subtypes while (subtype ^= rtde.subtype_name (i));
		end;

		if i > rtde.n_subtypes then do;
		     code = error_table_$resource_type_unknown;
		     call term_rtdt (0);
		     return;
		end;

		call load_defaults (addr (rtde.subtype_defaults (i)));
	     end;

	     call load_defaults (addr (rtde.registration_defaults));

	     if ^master_item.given.desired_attributes then do;
		call compute_initial_attributes (master_item.potential_attributes, ""b, ""b, master_item.desired_attributes (*));
		master_item.given.desired_attributes = "1"b;
	     end;
	end;

/* ------------------------- */

load_defaults: proc (default_ptr);

dcl 1 defaults aligned like rtde.registration_defaults based (default_ptr),
     default_ptr pointer;

dcl  temp_potential_atts bit (72) aligned;

	     if ^ master_item.given.potential_attributes then
		if defaults.potential_attributes_given then do;
		     master_item.potential_attributes = defaults.potential_attributes;
		     master_item.given.potential_attributes = "1"b;
		     temp_potential_atts = defaults.potential_attributes;
		end;
		else temp_potential_atts = (72)"1"b;	/* this missing default will cause an error later anyway */
	     else temp_potential_atts = master_item.potential_attributes;

	     if ^ master_item.given.desired_attributes then
		if defaults.attributes_given then do;
		     call compute_initial_attributes (temp_potential_atts, ""b,
			defaults.attributes, master_item.desired_attributes);

		     master_item.given.desired_attributes = "1"b;
		end;

	     if ^ master_item.given.potential_aim_range then
		if defaults.aim_range_given then do;
		     master_item.potential_aim_range (*) = defaults.aim_range (*);
		     master_item.given.potential_aim_range = "1"b;
		end;

	     if ^ master_item.given.charge_type then
		if defaults.charge_type_given then do;
		     master_item.charge_type = get_charge_type (defaults.charge_type);
		     master_item.given.charge_type = "1"b;
		end;

	     return;
	end load_defaults;

/* ------------------------- */

compute_initial_attributes: proc (potential_attributes, required_attributes, suggested_attributes, resultant_attributes);

dcl (potential_attributes, required_attributes, suggested_attributes) bit (72) aligned parameter,
     resultant_attributes (4) bit (72) aligned parameter;

dcl  choices bit (72) aligned;

	     resultant_attributes (*) = ""b;
	     resultant_attributes (1) = required_attributes;

	     do i = 1 to rtde.n_exclusion_specs;
		choices = rtde.exclusion_specs (i) & potential_attributes;

		temp_spec = choices & required_attributes;
						/* see if any of this group have been constrained */

		if temp_spec = ""b then		/* if not, then */
		     temp_spec = choices & suggested_attributes;
						/* see if any of this group have been suggested */

		if temp_spec ^= ""b then		/* yes, one or the other */
		     j = index (temp_spec, "1"b);	/* choose one at random from suggestion or */
						/* constraint (ideally and usually, there is only one) */
		else j = index (choices, "1"b);	/* no, choose one at random from RTDT */

		substr (resultant_attributes (1), j, 1) = "1"b;
	     end;

	     return;

	end compute_initial_attributes;

/* ------------------------- */

	call term_rtdt (code);
	return;
	
set_arbitrary_attributes: entry (resource_type, arg_potential_attributes, arbitrary_attributes, code);

dcl  arg_potential_attributes bit (72) aligned parameter,
     arbitrary_attributes (2) bit (72) aligned parameter;

dcl  temp_relatts (4) bit (72) aligned;

	rtdtp = null;

	on cleanup call term_rtdt (0);

	call scan_rtdt (resource_type, code);
	if code ^= 0 then do;
	     call term_rtdt (0);
	     return;
	end;

	call compute_initial_attributes (arg_potential_attributes, arbitrary_attributes (2),
	     rtde.registration_defaults.attributes, temp_relatts); /* use protected attributes as constraints */

	arbitrary_attributes (1) = temp_relatts (1);	/* return arbitrary attributes */

	call term_rtdt (code);
	return;
	
lock_on_release: entry (resource_type, lock_sw, code);

dcl  lock_sw bit (1) aligned;

	rtdtp = null;

	on cleanup call term_rtdt (0);

	call scan_rtdt (resource_type, code);
	if code ^= 0 then do;
	     call term_rtdt (0);
	     return;
	end;

	lock_sw = rtde.manual_clear;

	call term_rtdt (code);
	return;
	
default_attributes: entry (resource_type, default_attributes, code);

dcl  default_attributes bit (72) aligned parameter;

	rtdtp = null;

	on cleanup call term_rtdt (0);

	call scan_rtdt (resource_type, code);
	if code ^= 0 then do;
	     call term_rtdt (0);
	     return;
	end;

	if rtde.registration_defaults.attributes_given then
	     default_attributes = rtde.registration_defaults.attributes;
	else default_attributes = ""b;

	call term_rtdt (code);
	return;
	
canonicalize_name: entry (resource_type, input_name, output_name, code);

dcl (input_name, output_name) char (*) parameter;

dcl  name_buffer char (32),
     entryname_temp char (168);

dcl  cv_entry_ entry (char (*), ptr, fixed bin (35)) returns (entry);

dcl  canonicalizer entry (char (*), char (*), pointer, fixed bin (35)) variable;

/* first, get rid of the canned one */

	if input_name = "scratch" then do;
	     output_name = "scratch";
	     if output_name ^= "scratch" then code = error_table_$smallarg;
	     else code = 0;
	     return;
	end;

	if get_initial_ring_ () = 1 then
	     if get_group_id_ () = "Initializer.SysDaemon.z" then do;
		output_name = input_name;		/* cold boot environment, no cv_entry_ around */
		code = 0;
		return;
	     end;

	rtdtp = null;

	on cleanup call term_rtdt (0);

	call scan_rtdt (resource_type, code);
	if code ^= 0 then do;
	     call term_rtdt (0);
	     return;
	end;

	if rtdt.version = RTDT_version_2 then
	     entryname_temp = "";			/* no canon proc in a version 2 RTDT */
	else entryname_temp = rtde.precanon_proc;
	call term_rtdt (code);

	if entryname_temp = "" then name_buffer = input_name;
						/* no processing desired */

	else do;
	     canonicalizer = cv_entry_ (rtrim (entryname_temp), null, code);
						/* if you give the poor dolt trailing blanks he has a breakdown */
	     if code ^= 0 then return;

	     call canonicalizer (input_name, name_buffer, null, code);
	     if code ^= 0 then return;
	end;

	output_name = name_buffer;

	if output_name ^= name_buffer then code = error_table_$smallarg;
	else code = 0;

	return;
	
test:	entry (new_sysdir);

dcl  new_sysdir char (*) parameter;

	if new_sysdir = "" then sysdir = ">system_control_1";
	else sysdir = new_sysdir;
	return;

scan_rtdt: proc (resource_type_arg, code);

dcl (resource_type_arg char (*),
     code fixed bin (35)) parameter;

dcl  resource_type char (32),
     i fixed bin,
     found bit (1) aligned;

dcl  hcs_$initiate ext entry (char (*), char (*), char (*), fixed bin, fixed bin, pointer, fixed bin (35)),
     sub_err_ ext entry options (variable);

dcl  dirname char (168),
     ename char (32);

	     dirname = sysdir;
	     ename = "rtdt";

	     if get_initial_ring_ () = 1 then
		if get_group_id_ () = "Initializer.SysDaemon.z" then do; /* use the RTDT on the tape to prevent */
		     dirname = ">system_library_1";	/* linkage faults referencing >sss>cv_entry_ */
		     ename = "default_rtmf.rtdt";
		end;

	     call hcs_$initiate (dirname, ename, "", 0, 0, rtdtp, code);
	     if rtdtp = null then do;
		call sub_err_ (code, "resource_info_", "c", null, 0, "Cannot initiate ^a>^a", dirname, ename);
		return;
	     end;

	     if (rtdt.version ^= RTDT_version_2) & (rtdt.version ^= RTDT_version_3) then do;
		code = error_table_$unimplemented_version;
		return;
	     end;
	     code = 0;

	     resource_type = resource_type_arg;

	     do i = 1 to 2;				/* two chances to chase down a synonym */
		found = ""b;

		do rtdep = pointer (rtdt.first_resource, rtdt.rtdt_area)
			repeat (pointer (rtde.next_resource, rtdt.rtdt_area))
			while (rtdep ^= null);

		     if rtde.valid then
			if rtde.name = resource_type then
			     if ^rtde.is_synonym then return;
			     else do;
				resource_type = rtde.syn_to;
				found = "1"b;
			     end;
		end;

		if ^found then do;
		     code = error_table_$resource_type_unknown;
		     return;
		end;
	     end;

	     code = error_table_$improper_data_format;
	     return;
	end scan_rtdt;
	
get_charge_type: proc (number) returns (char (32));

dcl  number fixed bin;

	     cttp = pointer (rtdt.charge_type_table_ptr, rtdt.rtdt_area);

	     return (charge_type_table.charge_types (number));
	end get_charge_type;
	
term_rtdt: proc (code);

dcl  code fixed bin (35) parameter;

dcl  hcs_$terminate_noname ext entry (pointer, fixed bin (35));

	     if rtdtp ^= null then
		call hcs_$terminate_noname (rtdtp, code);
	     rtdtp = null;

	     return;
	end term_rtdt;
     end resource_info_;
