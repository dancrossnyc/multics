/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */

rcp_attach_:
     procedure;

/*	This program is called to attach a device controlled by RCP.
   *
   *	This program has the following entry points:
   *	  1.  priv_attach	-  Attach a device with privilege.
   *	  2.  attach	-  Attach a device.
*/
/*
   *	Created on 11/21/74 by Bill Silver.
   *      Modified 841009 to interface with rcp_control_ instead of
   *         rcp_initializer_... - M. M. Pozzo
*/

/****^  HISTORY COMMENTS:
  1) change(85-06-27,Pozzo), approve(86-02-21,MCR7346),
     audit(86-07-29,Farley), install(86-08-01,MR12.0-1108):
     Modified to return a good error code when a garbage error code was input.
  2) change(85-07-18,CLJones), approve(86-02-21,MCR7346),
     audit(86-07-29,Farley), install(86-08-01,MR12.0-1108):
     Modified to not return rcp_id when an error is encountered.
  3) change(85-07-21,ABall), approve(86-02-21,MCR7346),
     audit(86-07-29,Farley), install(86-08-01,MR12.0-1108):
     Modified to check for null rcse_ptr and arcse_ptr before referencing
     rcse_off.
  4) change(85-09-11,Fawcett), approve(85-09-11,MCR6979),
     audit(85-12-02,CLJones), install(86-03-21,MR12.0-1033):
     Add MCA and FIPS support
                                                   END HISTORY COMMENTS */

/*		ARGUMENT  DATA		*/

dcl	arg_comment	   char (*);		/* (I) Caller's comment. */
dcl	arg_device_info_ptr	   ptr;			/* (I) Pointer to device info structure. */
dcl	arg_device_type	   char (*);		/* (I) Device type name. */
dcl	arg_ecode		   fixed bin (35);		/* (O) error_table_ code. */
dcl	arg_event_id	   fixed bin (71);		/* (I) Caller's event channel ID. */
dcl	arg_rcp_id	   bit (36) aligned;	/* (O) ID for this attachment request. */


/*		AUTOMATIC  DATA		*/


dcl	arcse_off		   bit (18);		/* Offset  of assignment RCS entry. */
dcl	device_off	   bit (18) aligned;	/* Offset of RCS entry specifying device. */
dcl	priv_flag		   bit (1);		/* ON => privileged attach. */
dcl	process_id	   bit (36) aligned;	/* Needed by rcp_control_ */
dcl	rcse_off		   bit (18);		/* Offset of RCS entry. */
dcl	volume_off	   bit (18) aligned;	/* Offset of RCS entry specifying volume. */
dcl	got_arcse		   bit (1) aligned;		/* whether we acquired an arcse */
dcl	got_rcse		   bit (1) aligned;		/* whether we acquired an rcse */

dcl	device_type	   char (32);		/* Device type name. */
dcl	device_name	   char (32);		/* Needed by rcp_control_. */
dcl	operation		   bit (36) aligned;	/* Operation being requested of rcp_control_. */

dcl	caller_level	   fixed bin;		/* Caller's validation level. */
dcl	ecode		   fixed bin (35);		/* error_table_ code. */
dcl	error_count	   fixed bin (17);		/* Error count for device attachments */

dcl	arcse_ptr		   ptr;			/* Pointer to assignment RCS entry. */
dcl	callers_device_info_ptr
			   ptr;
dcl	device_info_buffer	   (RCP_MAX_DEVICE_INFO_SIZE) bit (36) aligned;
dcl	1 rcse_buffer	   like rcse aligned;	/* Template RCSE. */

/*		BASED  DATA		*/

dcl	1 arcse		   based (arcse_ptr) like rcse aligned;
						/* Used to reference assignment RCS entry. */


/*		EXTERNAL ENTRIES CALLED	*/

dcl	cleanup		   condition;		/* Used to establish cleanup handler. */

dcl	(addr, null, ptr, rel) builtin;

dcl	(
	error_table_$bad_volid,
	error_table_$no_operation,
	error_table_$resource_attached
	)		   fixed bin (35) external;

dcl	access_operations_$rcp_assign_write
			   bit (36) aligned ext static;
dcl	access_operations_$rcp_assign_read
			   bit (36) aligned ext static;

dcl	cu_$level_get	   entry (fixed bin);
dcl	cu_$level_set	   entry (fixed bin);
dcl	get_ring_		   entry returns (fixed bin);
dcl	rcp_find_$attached	   entry (ptr, bit (18));
dcl	rcp_find_$unattached   entry (ptr, bit (18));
dcl	rcp_control_	   entry (bit (36) aligned, bit (18) aligned, bit (18) aligned, char (*), fixed bin (17),
			   bit (36) aligned, fixed bin (35));
dcl	rcp_device_info_$copy  entry (char (*), ptr, ptr, fixed bin (35));
dcl	rcp_device_info_$get   entry (char (*), ptr, ptr, fixed bin, fixed bin (35));
dcl	rcp_device_info_$set   entry (pointer, pointer, fixed bin (35));
dcl	rcp_rcse_$free	   entry (ptr, fixed bin (35));
dcl	rcp_rcse_$get	   entry (ptr, fixed bin (35));

priv_attach:
     entry (arg_device_type, arg_device_info_ptr, arg_event_id, arg_comment, arg_rcp_id, arg_ecode);


	priv_flag = "1"b;
	goto COMMON;


attach:
     entry (arg_device_type, arg_device_info_ptr, arg_event_id, arg_comment, arg_rcp_id, arg_ecode);


	priv_flag = "0"b;


COMMON:
	device_off = ""b;
	process_id = ""b;
	volume_off = ""b;
	device_name = "";
	error_count = 0;
	rcse_ptr, arcse_ptr = null ();
	got_arcse, got_rcse = "0"b;

	call cu_$level_get (caller_level);		/* Save caller's validation level. */
	on cleanup call CLEANUP (error_table_$no_operation);

	call cu_$level_set (get_ring_ ());		/* Set validation level to RCP level. */

	device_type = arg_device_type;		/* Get device type name. */
	callers_device_info_ptr = arg_device_info_ptr;
	device_info_ptr = addr (device_info_buffer);
	call rcp_device_info_$copy (device_type, callers_device_info_ptr, device_info_ptr, ecode);
	if ecode ^= 0 then
	     goto RETURN;
	rcse_ptr = addr (rcse_buffer);		/* Use temporary RCSE. */

	call rcp_device_info_$get (device_type, device_info_ptr, rcse_ptr, caller_level, ecode);
	if ecode ^= 0 then
	     goto RETURN;

/* Fill in the rest of the RCSE. */
	rcse.kind = 1;				/* This is an attachment RCSE. */
	rcse.flags.priv = priv_flag;			/* Remember if privileged attachment. */
	rcse.event_id = arg_event_id;			/* Save argument data. */
	rcse.caller_comment = arg_comment;

	goto DEVICE_TYPE (rcse.dtypex);		/* Special tests based upon device type. */


DEVICE_TYPE (1):					/* TAPE */
DEVICE_TYPE (2):					/* DISK */
	if ^rcse.flags.volume			/* Was a volume specified? */
	then do;					/* No, but it is required. */
	     ecode = error_table_$bad_volid;
	     goto RETURN;
	end;
	if (rcse.flags.t_and_d) &			/* Is attachment for a T&D volume? */
	     (^priv_flag)				/* Then is this a privileged attachment? */
	then do;					/* No, T&D must use privileged entry. */
	     ecode = error_table_$no_operation;
	     goto RETURN;
	end;


DEVICE_TYPE (3):					/* CONSOLE */
DEVICE_TYPE (4):					/* PRINTER */
DEVICE_TYPE (5):					/* PUNCH */
DEVICE_TYPE (6):					/* READER */
DEVICE_TYPE (7):					/* SPECIAL */
DEVICE_TYPE (8):					/* MCA */
/****	If we are attaching a specific device or if we are attaching a volume
      *	then we must check to see if that device or volume is already attached
      *	to this process.
****/
	if (rcse.flags.device) |			/* Attaching a specific device? */
	     (rcse.flags.volume)			/* Or attaching a volume. */
	then do;					/* Yes. */
	     call rcp_find_$attached (rcse_ptr, arcse_off);
	     if arcse_off ^= "0"b			/* Already attached? */
	     then do;				/* Yes. */
		ecode = error_table_$resource_attached;
		goto RETURN;
	     end;
	end;

/*	Now get a real attachment RCSE.  All the data in our temporary RCSE will
   *	be copied into the real RCSE.
*/
	call rcp_rcse_$get (rcse_ptr, ecode);
	if ecode ^= 0 then
	     goto RETURN;
	got_rcse = "1"b;
	rcse_off = rel (rcse_ptr);

/*	Now we must see if an appropriate (and unattached) device is already
   *	assigned to this process.  If so we will use that device.  Otherwise
   *	we will have to have rcp_control_ assign a device.
*/
	call rcp_find_$unattached (rcse_ptr, arcse_off);
	if arcse_off ^= "0"b			/* Did we find an assigned unattached device? */
	then do;					/* Yes, use it. */
	     device_off = "0"b;			/* We don't need to assign a device. */
	     arcse_ptr = ptr (rcse_ptr, arcse_off);
	end;
	else do;					/* No, must assign a device. */
	     arcse_ptr = addr (rcse_buffer);		/* Use attachment RCSE as template. */
	     arcse.kind = 2;			/* Show that this is an assignment RCSE. */
	     call rcp_rcse_$get (arcse_ptr, ecode);
	     if ecode ^= 0 then			/* Any error getting assignment RCS entry? */
		goto RETURN;			/* Yes, free attachment RCSE. */
	     got_arcse = "1"b;
	     arcse_off = rel (arcse_ptr);		/* Now we have an assignment RCS entry. */
	     device_off = arcse_off;			/* Assign device through assignment RCS entry. */
	end;

	arcse.rcse_off = rcse_off;			/* Link the attach and assign RCSEs. */
	rcse.rcse_off = arcse_off;

	if rcse.flags.volume			/* Is there a volume? */
	     then
	     volume_off = rcse_off;			/* Yes, assign it using attachment RCSE. */
	else do;					/* No volume to assign. */
	     volume_off = "0"b;
	     rcse.state = 2;			/* State => any volume assignment has been done. */
	end;

	if (device_off ^= "0"b) |			/* Do we have to assign a device? */
	     (volume_off ^= "0"b)			/* Or a volume? */
	then do;					/* Yes, something to assign. */
	     if volume_off ^= "0"b & ^rcse.flags.writing then
		operation = access_operations_$rcp_assign_read;
	     else operation = access_operations_$rcp_assign_write;
	     call rcp_control_ (operation, volume_off, device_off, device_name, error_count, process_id, ecode);
	     if ecode = 0 then
		call rcp_device_info_$set (callers_device_info_ptr, rcse_ptr, (0));
	     /*** in case the name has changed (from "scratch") ***/
	     /*** we ignore the code since it's the caller's problem,
		and the attachment has been made in any case. ***/
	end;

RETURN:
	call CLEANUP (ecode);
	if ecode = 0 then
	     arg_rcp_id = rcse.rcp_id;
	arg_ecode = ecode;
	return;

CLEANUP:
     proc (code);

dcl	code		   fixed bin (35);

	if code ^= 0 then do;
	     if rcse_ptr ^= null () then
		rcse.rcse_off = ""b;
	     if arcse_ptr ^= null () then
		arcse.rcse_off = ""b;
	     if got_arcse then
		call rcp_rcse_$free (arcse_ptr, (0));
	     if got_rcse then
		call rcp_rcse_$free (rcse_ptr, (0));
	end;
	call cu_$level_set (caller_level);

     end CLEANUP;

%include rcp_com_seg;
%page;
%include rcp_device_info_structs;

     end rcp_attach_;
