/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */

/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */

rcp_access_kernel_setup:
     procedure (a_operation, a_requestor_info_ptr, a_resource_info_ptr, a_rm_on, a_acs_path, a_rcp_priv, a_owner,
	a_effmode, a_error_code);

/*     This program implements the set up procedures for the RCP
   *     access kernel.
   *     Created 841108 by Maria M. Pozzo
   *     Modified 850401 by E. Swenson to protect pointer reference by
   *       rm_on flag.
   *
   *     This routine determines if a valid operation was requested,
   *     if Resource Management (RM) is enabled, the registry directory if
   *     there is one, if the rcp privilege is enabled, if the Initializer
   *     has made the call (Initializer gets REW), the resource owner
   *     if there is one and some general setup.
*/


/****^  HISTORY COMMENTS:
  1) change(87-07-14,Rauschelbach), approve(87-08-07,MCR7748),
     audit(87-11-11,Farley), install(87-11-30,MR12.2-1004):
     Removed signal to vfile_error condition as it was erroneously left in from
     debugging.
                                                   END HISTORY COMMENTS */


/*                    ARGUMENT DATA                          */

dcl	a_operation	   bit (36) aligned;	/* (I) RCP operation */
dcl	a_requestor_info_ptr   ptr;			/* (I) Requestor information */
dcl	a_resource_info_ptr	   ptr;			/* (I) Resource information */
dcl	a_rm_on		   bit (1) aligned;		/* (O) ON-> Resource Management enabled */
dcl	a_acs_path	   char (168);		/* (O) Pathnameof the ACS segment */
dcl	a_rcp_priv	   bit (1) aligned;		/* (O) ON->the rcp system priviege is enabled */
dcl	a_owner		   char (32);		/* (O) Resouce owner if one exists */
dcl	a_effmode		   bit (3);		/* (O) Some operations have a default effmode */
dcl	a_error_code	   fixed bin (35);		/* (O) Error code */

/*                  AUTOMATIC DATA                       */

dcl	based_bits	   bit (bl * 9) aligned based (bp);
dcl	device_found	   bit (1) aligned;		/* Locates the device in rcp_data */
dcl	device_off	   bit (18) aligned;	/* Offset to device entry in rcp_data */
dcl	is_volume		   bit (1);		/* True if resource is a volume. */
dcl	rcp_priv		   bit (1) aligned;		/* rcp privilege on */
dcl	rm_on		   bit (1) aligned;		/* Resource_management enabled */
dcl	effmode		   bit (3);
dcl	object_access_class	   (2) bit (72) aligned;
dcl	operation		   bit (36) aligned;
dcl	base_operation	   bit (36) aligned;
dcl	acs_path		   char (168);		/* Pathname of the ACS segment */
dcl	based_charstring	   char (bl) aligned based (bp);
dcl	owner		   char (32);		/* Owner name if one exists */
dcl	temp_user_id	   char (32);
dcl	prim_resource_type	   char (32);		/* Hold the primary resource type */

dcl	bl		   fixed bin (21);
dcl	error_code	   fixed bin (35);		/* Local error code */
dcl	(i, loc)		   fixed bin;		/* Working variable */

dcl	bp		   ptr;
dcl	operation_ptr	   ptr;

dcl	1 en_access_op	   like encoded_access_op aligned based (operation_ptr) aligned;

/*                   EXTERNAL ENTRIES                       */

dcl	aim_check_$equal	   entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
dcl	pathname_		   entry (char (*), char (*)) returns (char (168));
dcl	rcp_pointers_$data	   entry () returns (ptr);
dcl	resource_info_$get_primary_type
			   entry (char (*), char (*), fixed bin (35));
dcl	resource_info_$get_type
			   entry (char (*), bit (1), fixed bin (35));

dcl	access_operations_$rcp_register
			   bit (36) aligned external;
dcl	access_operations_$rcp_register_acquire
			   bit (36) aligned external;
dcl	access_operations_$rcp_acquire
			   bit (36) aligned external;
dcl	access_operations_$rcp_cancel
			   bit (36) aligned external;

/*                  ERROR ENTRIES                           */

dcl	error_table_$unsupported_multi_class_volume
			   fixed bin (35) external;
dcl	error_table_$resource_unknown
			   fixed bin (35) external;
dcl	error_table_$action_not_performed
			   fixed bin (35) external;

dcl	(addr, hbound, length, null, ptr, rtrim, substr, unspec)
			   builtin;

/*                     CONSTANTS                       */

dcl	DEFAULT_REGISTRY_DIR   char (64) internal static options (constant) init (">sc1>rcp");

%page;


/*  Copy arguments */

	operation = a_operation;
	base_operation = operation;
	addr (base_operation) -> encoded_access_op.detailed_operation = 0;
	operation_ptr = addr (operation);
	requestor_info_ptr = a_requestor_info_ptr;
	resource_info_ptr = a_resource_info_ptr;
	record_ptr = resource_info.registry_record_ptr;

/*  Initialize local variables */

	device_found, rm_on, rcp_priv = "0"b;
	device_off = (18)"0"b;
	prim_resource_type, owner = "";
	acs_path = "";
	i, loc, bl = 0;
	error_code = 0;
	bp = null ();
	effmode = ""b;
	ops_ptr = addr (en_access_op.detailed_operation);

/* Determine if Resource Management enabled */

	rcpd_ptr = rcp_pointers_$data ();
	if rcpd.modes.resource_mgmt_enabled then
	     rm_on = "1"b;
	else rm_on = "0"b;

/* Set Registry and rcp priv flag */

	if rm_on then
	     if (resource_info.registry_dir = "") then
		resource_info.registry_dir = DEFAULT_REGISTRY_DIR;

	if addr (requestor_info.current_authorization) -> aim_template.privileges.rcp then
	     rcp_priv = "1"b;
	else rcp_priv = "0"b;

/*  If it's a Register operation then there is no owner or registry */
/*  yet so no need to continue just give REW access.  */
/*  if it's an acquire operation, as long as it is a free resource  */
/*  which is checked outside the kernel, then it can be acquired. */
/*  If it's a cancel operation, as long as this is the user who */
/*  made the reservation, or it was a privileged user (which are both */
/*  checked outside the kernel) then it can be cancelled. */

	if base_operation = access_operations_$rcp_register | base_operation = access_operations_$rcp_register_acquire
	     | base_operation = access_operations_$rcp_acquire | base_operation = access_operations_$rcp_cancel then do;
	     effmode = REW_ACCESS;
	     owner = "free";
	     goto MAIN_RETURN;
	end;

/*  If the resource is not free and it is a volume, see if it is */
/*  a multi-class volume.  We can not handle multi-class volumes unless */
/*  we are executing in ring 1 OR the user has the rcp privilege enabled. */
/*  Otherwise, no one has access to multi-class volumes not even the */
/*  Initializer. */

	call resource_info_$get_primary_type (resource_info.resource_type, prim_resource_type, error_code);
	if error_code ^= 0 then
	     goto MAIN_RETURN;
	call resource_info_$get_type (prim_resource_type, is_volume, error_code);
	if error_code ^= 0 then
	     goto MAIN_RETURN;

	if rm_on then
	     if (is_volume & ^registry_record.free & requestor_info.validation_level ^= 1 & ^rcp_priv) then do;
		call chase (registry_record.aim_range_desc, bp, bl, error_code);
		if error_code ^= 0 then
		     goto MAIN_RETURN;
		if bl > 0 then
		     addr (object_access_class) -> based_bits = based_bits;
		else unspec (object_access_class) = ""b;/* no range, set to lowest possible */
		if ^aim_check_$equal (object_access_class (1), object_access_class (2)) then do;
		     error_code = error_table_$unsupported_multi_class_volume;
		     goto MAIN_RETURN;
		end;
	     end;

/*  If it is the Initializer, just give REW access. */

	if requestor_info.user_id = "Initializer.SysDaemon.z" then do;
	     effmode = REW_ACCESS;
	     goto MAIN_RETURN;
	end;

/*  Let's get the owner if it exists */
/*  Set the owner bit in the operation if this user is the owner. */

	if rm_on then do;
	     call chase (registry_record.owner_desc, bp, bl, error_code);
	     if error_code ^= 0 then
		goto MAIN_RETURN;
	     owner = based_charstring;
	     temp_user_id = substr (requestor_info.user_id, 1, length (rtrim (requestor_info.user_id)) - 2);
	     detailed_operation.owner = (owner = temp_user_id);
	end;

/*  Let's get the ACS segment pathname if it exists */

	if rm_on then do;
	     if registry_record.acs_path_desc ^= 0 then do;
		call chase (registry_record.acs_path_desc, bp, bl, error_code);
		if error_code ^= 0 then
		     goto MAIN_RETURN;
		acs_path = based_charstring;
	     end;
	end;
	else do;
	     if ^is_volume then
		do i = 1 to hbound (DEVICE_TYPE, 1);
		if prim_resource_type = DEVICE_TYPE (i) then do;
		     device_found = "0"b;
		     do device_off = rcpd.dtype (i).first_off repeat device.next_off
			while ((device_off ^= (18)"0"b) & ^device_found);
			device_ptr = ptr (rcpd_ptr, device_off);
			if device.device_name = resource_info.resource_name then
			     device_found = "1"b;
		     end;
		     if ^device_found then
			error_code = error_table_$resource_unknown;
		     else if rm_on then
			acs_path = pathname_ ((resource_info.registry_dir), (device.acs_name));
		     else acs_path = pathname_ (DEFAULT_REGISTRY_DIR, (device.acs_name));
		     goto MAIN_RETURN;
		end;
	     end;
	end;

/*  If this is a priv_gate call then DAC access check is by_passed, and */
/*  if the rcp privilege is enabled then AIM access check is by_passed; */
/*  so if both are true just give REW. */

	if (detailed_operation.priv_gate_call & rcp_priv) then
	     effmode = REW_ACCESS;


MAIN_RETURN:
	a_operation = operation;
	a_rm_on = rm_on;
	a_acs_path = acs_path;
	a_owner = owner;
	a_rcp_priv = rcp_priv;
	a_effmode = effmode;
	a_error_code = error_code;

%page;
chase:
     proc (descriptor, bp, bl, a_error_code);

dcl	(
	descriptor	   fixed bin (35),
	a_error_code	   fixed bin (35),
	bp		   pointer,
	bl		   fixed bin (21)
	)		   parameter;

dcl	1 rs		   like rs_info aligned automatic;
dcl	local_code	   fixed bin (35);

	a_error_code = 0;
	if descriptor = 0 then do;
	     bp = addr (bp);			/* gotta point somewhere */
	     bl = 0;
	     return;
	end;

	unspec (rs) = ""b;
	rs.version = rs_info_version_2;
	rs.locate_sw = "1"b;
	rs.descriptor = descriptor;
	local_code = 0;

	call iox_$control (resource_info.registry_switch_ptr, "record_status", addr (rs), local_code);
	if local_code ^= 0 then do;
	     a_error_code = error_table_$action_not_performed;
	     return;
	end;
	bl = rs.record_length;
	bp = rs.record_ptr;

	return;
     end chase;
%page;
%include access_audit_encoded_op;
%page;
%include access_mode_values;
%page;
%include aim_template;
%page;
%include iox_dcls;
%page;
%include rcp_com_seg;
%page;
%include rcp_data;
%page;
%include rcp_ops;
%page;
%include rcp_registry;
%page;
%include rcp_requestor_info;
%page;
%include rcp_resource_types;
%page;
%include rcp_resource_info;
%page;
%include rs_info;

     end rcp_access_kernel_setup;
