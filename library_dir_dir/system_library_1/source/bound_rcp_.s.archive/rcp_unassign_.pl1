/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


rcp_unassign_: procedure;

/*	This program implements the RCP unassignment entry points.
   *	Created on 12/05/74 by Bill Silver.
   *	Modified 6/79 by Michael R. Jordan for MR7.0R.
   *      Modified early 1985 by Maria Pozzo for B2 access operations.
   *
   *	This program has the following entry points:
   *	     1.	unassign  -	Unassign a resource given an RCP ID.
   *	     2.	unassign_device  -	Unassign a device given its name.
*/

/*		ARGUMENT  DATA		*/

	dcl     arg_comment		 char (*);	/* (I) Caller's comment. */
	dcl     arg_device_name	 char (*);	/* (I) name of device to be unassigned. */
	dcl     arg_disposition	 bit (*);		/* (I) Reservation disposition - not used. */
	dcl     arg_ecode		 fixed bin (35);	/* (O) error_table_ code. */
	dcl     arg_rcp_id		 bit (36) aligned;	/* (I) ID used to identify RCS entry. */


/*		AUTOMATIC  DATA		*/

	dcl     device_offset	 bit (18) aligned;	/* Needed by rcp_control_. */
	dcl     process_id		 bit (36) aligned;	/* Process id of process amking request of rcp_control_. */
	dcl     rcp_id		 bit (36) aligned;	/* Used to copy rcp_id argument. */
	dcl     rcse_off		 bit (18);	/* Offset of an RCS entry. */
	dcl     volume_offset	 bit (18) aligned;	/* Needed by rcp_control_. */

	dcl     comment		 char (64);	/* Used to copy comment. */
	dcl     device_name		 char (32);	/* Name of device to unassign. */
	dcl     operation		 bit (36) aligned;	/* Operation being requested of rcp_control_. */

	dcl     caller_level	 fixed bin;	/* Caller's validation level. */
	dcl     ecode		 fixed bin (35);	/* error_table_ code. */
	dcl     error_count		 fixed bin (17);	/* Error count for device attachments */

	dcl     arcse_ptr		 ptr;		/* Pointer to attachment RCS entry. */


/*		BASED  DATA		*/

	dcl     1 arcse		 based (arcse_ptr) like rcse aligned; /* Used to reference attachment RCS entry. */


/*		EXTERNAL ENTRIES CALLED	*/

	dcl     cleanup		 condition;	/* Used to set up cleanup handler. */

	dcl     (addr, ptr)		 builtin;

	dcl     error_table_$bad_arg	 fixed bin (35) ext static;
	dcl     error_table_$resource_unassigned fixed bin (35) ext static;

	dcl     access_operations_$rcp_unassign bit (36) aligned ext static;

	dcl     cu_$level_get	 entry (fixed bin);
	dcl     cu_$level_set	 entry (fixed bin);
	dcl     get_ring_		 entry returns (fixed bin);
	dcl     rcp_comment_	 entry (ptr);
	dcl     rcp_detach_$detach	 entry (bit (36) aligned, bit (*), fixed bin, char (*), fixed bin (35));
	dcl     rcp_find_$device	 entry (char (*), bit (18));
	dcl     rcp_control_	 entry (bit (36) aligned, bit (18) aligned, bit (18) aligned, char (*),
				 fixed bin (17), bit (36) aligned, fixed bin (35));
	dcl     rcp_pointers_$com_seg	 entry returns (ptr);
	dcl     rcp_rcse_$free	 entry (ptr, fixed bin (35));
	dcl     rcp_validate_	 entry (bit (36) aligned, fixed bin, ptr, fixed bin (35));

%include rcp_com_seg;

unassign: entry (arg_rcp_id, arg_disposition, arg_comment, arg_ecode);

/*	This entry is called to unassign a resource.  The rcp_id is used
   *	to generate a pointer to the RCS entry that is associated with
   *	the assignment of this resource.  Currently only resources that are
   *	devices may be unassigned via this entry.  If the rcp_id is valid we will
   *	perform the unassignment regardless of the current state of the assignment.
*/

	call SETUP;

	call cu_$level_get (caller_level);		/* Get caller's validation level. */
	on cleanup begin;				/* Cleanup if any trouble. */
		call cu_$level_set (caller_level);	/* Reset validation level to caller level. */
	     end;
	call cu_$level_set (get_ring_ ());		/* Set validation level to RCP level. */

	rcp_id = arg_rcp_id;			/* Copy arguments. */
	comment = arg_comment;

	call rcp_validate_ (rcp_id, caller_level, rcse_ptr, ecode);
	if ecode ^= 0				/* Is rcp_id OK? */
	then goto UNASSIGN_RETURN;			/* No. */

	if rcse.kind ^= 2				/* Is this an assignment entry? */
	then do;					/* No. */
		ecode = error_table_$bad_arg;
		goto UNASSIGN_RETURN;
	     end;

	call UNASSIGN_DEVICE;			/* Now unassign this device. */

UNASSIGN_RETURN:
	arg_ecode = ecode;
	call cu_$level_set (caller_level);
	return;

unassign_device: entry (arg_device_name, arg_disposition, arg_comment, arg_ecode);

/*	This entry is called to unassign a device given its name.
   *	We will call rcp_find_ to see if a device with this name is
   *	assigned to this process.  If so we will unassign it.
*/

	call SETUP;

	call cu_$level_get (caller_level);
	on cleanup begin;
		call cu_$level_set (caller_level);
	     end;
	call cu_$level_set (get_ring_ ());

	device_name = arg_device_name;		/* Copy arguments. */
	comment = arg_comment;

	call rcp_find_$device (device_name, rcse_off);

	if rcse_off = "0"b				/* Did we find the device? */
	then ecode = error_table_$resource_unassigned;
	else do;					/* Yes, unassign it. */
		rcse_ptr = ptr (rcp_pointers_$com_seg (), rcse_off);
		call UNASSIGN_DEVICE;
	     end;

	arg_ecode = ecode;				/* Return results. */
	call cu_$level_set (caller_level);
	return;

SETUP: procedure;

	device_offset = ""b;
	process_id = ""b;
	volume_offset = ""b;
	device_name = "";
	error_count = 0;

     end SETUP;

UNASSIGN_DEVICE: procedure;

/*	This procedure is called to unassign the device  referenced by
   *	the specified RCS entry.  If this device is attached then we will
   *	detach it.
*/
	rcse.disposition = "0"b;			/* Explicit request => always unassign. */

	if rcse.rcse_off ^= "0"b			/* Is device attached? */
	then do;					/* Yes, let rcp_detach_ do everything. */
		arcse_ptr = ptr (rcse_ptr, rcse.rcse_off);
		call rcp_detach_$detach (arcse.rcp_id, "0"b, 0, comment, ecode);
		return;
	     end;

	if rcse.device_off = "0"b			/* Not attached, was it ever assigned? */
	then goto FREE_RCSE;

/*	Device was assigned by rcp_control_.  We must unassign it.
   *	This involves calling rcp_control_ to update RCPD to reflect
   *	the unassignment of this device.  We must also free the RCS entry
   *	used for this assignment.
*/
	operation = access_operations_$rcp_unassign;
	volume_offset = "0"b;
	device_offset = rcse.device_off;
	error_count = 0;
	call rcp_control_ (operation, volume_offset, device_offset,
	     device_name, error_count, process_id, ecode);


	rcse.caller_comment = comment;		/* Put comment in RCS entry. */
	call rcp_comment_ (rcse_ptr);			/* Type caller's comment. */

FREE_RCSE:					/* Free this RCS entry. */
	call rcp_rcse_$free (rcse_ptr, ecode);

     end UNASSIGN_DEVICE;

     end rcp_unassign_;
