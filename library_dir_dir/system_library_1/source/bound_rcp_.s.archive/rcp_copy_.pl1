/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
rcp_copy_:
     procedure;

/*	This program implements the RCP copy entries.
   *	Created on 12/26/74 by Bill Silver.
   *	Modified on 04/24/78 by Michael R. Jordan to add the attached and loaded bits.
   *	Modified on 12/09/78 by Michael R. Jordan to add support for listing reservations for both the
   *	  system and user entries.
   *	Modified 1/85 by Chris Jones to stop using magic numbers.
   *	Modified 3/85 by Maria Pozzo to add auditing for B2.
   *
   *	This program is called to copy RCP data out of ring 1.
   *	It has the following entry points:
   *	     1.	data   -	rcp_sys_$copy_data  -  Copys privileged info.
   *	     2. 	meters -	rcp_priv_$copy_meters  -  Copy meters.
   *	     3.	list   -	rcp_$copy_list  -  Copy per user info.
*/

dcl	arg_copy_size	   fixed bin (19);		/* (I) Size of caller's copy buffer. */
dcl	arg_ecode		   fixed bin (35);		/* (O) error_table_ code. */
dcl	arg_to_ptr	   ptr;			/* (I) Pointer to caller's work segment. */

dcl	attach_off	   bit (18);		/* Offset of an RLI attachment entry. */
dcl	dassign_off	   bit (18);		/* Offset of an RLI assignment entry. */
dcl	caller_level	   fixed bin;		/* Caller's validation level. */
dcl	copy_size		   fixed bin (19);		/* Size of caller's copy buffer. */
dcl	device_off	   bit (18);		/* Device entry offset in RCPD. */
dcl	devicex		   fixed bin;		/* Device entry index in RDI. */
dcl	ecode		   fixed bin (35);		/* error_table_ code. */
dcl	(i, j, k)		   fixed bin;
dcl	max_size		   fixed bin (19);		/* Max seg size of caller's work segment. */
dcl	meter_time	   fixed bin (71);		/* Time used to base meters on. */
dcl	num_attach	   fixed bin;		/* Number of attachment entries. */
dcl	num_dassign	   fixed bin;		/* Number of assignment entries. */
dcl	num_lv		   fixed bin;		/* Number of lv entries. */
dcl	operation		   bit (36) aligned;	/* RCP operation */
dcl	operation_ptr	   ptr;
dcl	rcse_off		   bit (18);		/* Offset of an RCS entry. */
dcl	this_process	   bit (36);		/* Process id for the calling process. */
dcl	to_ptr		   ptr;			/* Pointer to caller's work segment. */
dcl	total_size	   fixed bin;		/* Total size of an info structure. */
dcl	who_am_i		   char (32);		/* Identifies the caller. */

dcl	1 en_access_op	   like encoded_access_op aligned based (operation_ptr);
dcl	(addr, fixed, hbound, ptr, rel, size)
			   builtin;

dcl	cleanup		   condition;

dcl	(
	error_table_$bad_arg,
	error_table_$item_too_big,
	error_table_$unimplemented_version
	)		   fixed bin (35) external;

dcl	access_operations_$rcp_copy_info
			   bit (36) aligned external;

dcl	access_audit_r1_$log_obj_ptr
			   entry options (variable);
dcl	clock_		   entry returns (fixed bin (71));
dcl	cu_$level_get	   entry (fixed bin);
dcl	cu_$level_set	   entry (fixed bin);
dcl	get_process_id_	   entry () returns (bit (36));
dcl	get_ring_		   entry returns (fixed bin (3));
dcl	get_group_id_	   entry () returns (char (32));
dcl	get_process_authorization_
			   entry () returns (bit (72) aligned);
dcl	hcs_$get_max_length_seg
			   entry (ptr, fixed bin (19), fixed bin (35));
dcl	rcp_rcse_$info	   entry (bit (18), fixed bin, bit (18), fixed bin);
dcl	rcp_pointers_$data	   entry returns (ptr);
dcl	rcp_pointers_$com_seg  entry returns (ptr);
dcl	rcp_lv_$copy	   entry (ptr);
dcl	rcp_lv_$number	   entry (fixed bin);

dcl	DEFAULT_REGISTRY_DIR   char (64) static internal options (constant) init (">sc1>rcp");

data:
     entry (arg_to_ptr, arg_copy_size, arg_ecode);

/*	This entry is called to copy privileged information from rcp_data.
   *	It is used by privileged commands that want to list data about all
   *	of the devices controlled by RCP.
*/
	who_am_i = "rcp_copy_$data";
	call SETUP;				/* Set up and validate arguments. */
	on cleanup call CLEANUP;

	rcpd_ptr = rcp_pointers_$data ();
	rdi_ptr = to_ptr;				/* Return info in RDI structure. */

	if ecode ^= 0 then
	     goto DATA_RETURN;

	if rdi.head.version_num ^= rdi_version_3	/* Are we using the same version as the caller. */
	then do;					/* No. */
	     ecode = error_table_$unimplemented_version;
	     goto DATA_RETURN;
	end;

	if size (rdi_header) > copy_size		/* Is there room for at least the header? */
	then do;					/* No, no room for even this. */
	     ecode = error_table_$item_too_big;
	     goto DATA_RETURN;
	end;

	rdi.head.tot_ddtypes = rcpd.tot_dtypes;		/* Fill in header info. */
	rdi.head.tot_ddevices = rcpd.tot_devices;
	rdi.head.tot_dvolumes = rcpd.last_volume;

	total_size = fixed (rel (addr (rdi.end)), 19) - fixed (rel (rdi_ptr), 19);
	if total_size > copy_size			/* Is there room for the whole structure? */
	then do;					/* No. */
	     ecode = error_table_$item_too_big;
	     goto DATA_RETURN;
	end;

	devicex = 1;				/* Initialize device index. */

	do i = 1 to rcpd.tot_dtypes;			/* Process each device type. */
	     dtype_ptr = addr (rcpd.dtype (i));
	     ddtype_ptr = addr (rdi.ddtypes (i));
	     ddtype.device_type = dtype.device_type;
	     ddtype.max_concurrent = dtype.max_concurrent;
	     ddtype.num_reserved = dtype.num_reserved;
	     ddtype.num_devices = dtype.num_devices;
	     devicex = devicex;
	     ddtype.first_devicex = devicex;		/* Save index of first device of this type. */
	     device_off = dtype.first_off;		/* Get RCPD offset of 1st device of type. */
	     do while (device_off ^= "0"b);		/* Process each device of this type. */
		device_ptr = ptr (rcpd_ptr, device_off);
		ddevice_ptr = addr (rdi.ddevices (devicex));
		ddevice.device_name = device.device_name;
		ddevice.volume_name = device.volume_name;
		ddevice.dtypex = device.dtypex;
		ddevice.model = device.model;
		ddevice.num_qualifiers = device.num_qualifiers;
		do j = 1 to hbound (ddevice.qualifiers, 1);
		     ddevice.qualifiers (j) = device.qualifiers (j);
		end;
		ddevice.state_time = device.state_time;
		ddevice.state = device.state;
		ddevice.iom_num = device.iom_num;
		ddevice.chan_num = device.chan_num;
		ddevice.num_channels = device.num_channels;
		ddevice.flags.reservable = device.flags.reservable;
		ddevice.flags.reserved = device.flags.reserved;
		ddevice.flags.mounting = device.flags.mounting;
		ddevice.flags.writing = device.flags.writing;
		ddevice.flags.attached = device.flags.attached;
		ddevice.flags.loaded = (device.volume_name ^= "") & (^rcpd.modes.unload_on_detach);
		ddevice.group_id = device.group_id;
		ddevice.reservation_id = device.reservation_id;
		ddevice.reserved_by = device.reserved_by;
		device_off = device.next_off;		/* Get offset of next device of this type. */
		devicex = devicex + 1;		/* Increment RDI device index. */
	     end;
	end;

	do i = 1 to rcpd.last_volume;
	     volume_ptr = addr (rcpd.volume (i));
	     dvolume_ptr = addr (rdi.dvolumes (i));
	     dvolume = volume;
	end;

DATA_RETURN:
	call audit (ecode);
	call CLEANUP;
	arg_ecode = ecode;
	return;

meters:
     entry (arg_to_ptr, arg_copy_size, arg_ecode);

/*	This entry is called to copy all meter data from RCS and RCPD.
   *	We will copy only the lock meters from RCS.   Then from RCPD
   *	we will copy all of the lock data, the complete entry for each
   *	device type, and all non security data from each device entry.
   *	With this information the caller can calculate meter data but
   *	cannot determine the state of any device.
*/
	who_am_i = "rcp_copy_$meters";
	call SETUP;				/* Set up arguments. */
	rcpd_ptr = rcp_pointers_$data ();
	rcs_ptr = rcp_pointers_$com_seg ();
	on cleanup call CLEANUP;

	if ecode ^= 0 then
	     goto METERS_RETURN;

	rmi_ptr = to_ptr;				/* Return info in RMI strcuture. */

	if rmi.head.version_num ^= 1			/* Are we using same version as caller? */
	then do;					/* No. */
	     ecode = error_table_$unimplemented_version;
	     goto METERS_RETURN;
	end;

	if size (rmi_header) > copy_size		/* Is there room for RMI header? */
	then do;					/* No, no room for even that. */
	     ecode = error_table_$item_too_big;
	     goto METERS_RETURN;
	end;

	meter_time = clock_ ();			/* Use same time for all devices. */
	rmi.head.tot_mdtypes = rcpd.tot_dtypes;		/* Get totals from RCPD. */
	rmi.head.tot_mdevices = rcpd.tot_devices;

	total_size = fixed (rel (addr (rmi.end)), 19) - fixed (rel (rmi_ptr), 19);
	if total_size > copy_size			/* Is there room for all of RMI? */
	then do;					/* No. */
	     ecode = error_table_$item_too_big;
	     goto METERS_RETURN;
	end;

	rmi.rcs_lock_info = rcs.lock_info;		/* Copy lock data. */
	rmi.rcpd_lock_info = rcpd.lock_info;

	do i = 1 to rcpd.tot_dtypes;			/* Copy info for each device type. */
	     dtype_ptr = addr (rcpd.dtype (i));
	     mdtype_ptr = addr (rmi.mdtypes (i));
	     mdtype.device_type = dtype.device_type;
	     mdtype.num_devices = dtype.num_devices;
	     do j = 1 to hbound (mdtype.histo_times, 1);
		mdtype.histo_times (j) = dtype.histo_times (j);
	     end;
	end;

	do i = 1 to rcpd.tot_devices;			/* Copy info for each device. */
	     device_ptr = addr (rcpd.device (i));
	     mdevice_ptr = addr (rmi.mdevices (i));
	     mdevice.device_name = device.device_name;
	     mdevice.dtypex = device.dtypex;
	     mdevice.error_count = device.error_count;
	     mdevice.num_assigns = device.num_assigns;
	     mdevice.tot_assign_time = device.tot_assign_time;
	     do j = 1 to hbound (mdevice.histogram, 1);
		mdevice.histogram (j) = device.histogram (j);
	     end;
	     if device.state = ASSIGNED		/* If device now assigned tell how long. */
		then
		mdevice.time_assigned = meter_time - device.state_time;
	     else mdevice.time_assigned = 0;
	end;

METERS_RETURN:
	call audit (ecode);
	call CLEANUP;
	arg_ecode = ecode;
	return;

list:
     entry (arg_to_ptr, arg_copy_size, arg_ecode);

/*	This entry is called to return RCS information about all attachments
   *	and assignments of the calling process.
*/
	who_am_i = "rcp_copy_$list";
	call SETUP;				/* Set up arguments. */
	rcpd_ptr = rcp_pointers_$data ();
	rcs_ptr = rcp_pointers_$com_seg ();
	on cleanup call CLEANUP;

	if ecode ^= 0 then
	     goto LIST_RETURN;

	rli_ptr = to_ptr;
	this_process = get_process_id_ ();

	if (rli.head.version_num ^= rli_version_4)	/* Are we and caller using the same RLI structure? */
	then do;					/* No. */
	     ecode = error_table_$unimplemented_version;
	     goto LIST_RETURN;
	end;

	if size (rli_header) > copy_size		/* Is there room for RLI header? */
	then do;					/* No, no room for even that. */
	     ecode = error_table_$item_too_big;
	     goto LIST_RETURN;
	end;

/* Get per process RCS information. */
	call rcp_rcse_$info (attach_off, num_attach, dassign_off, num_dassign);
	call rcp_lv_$number (num_lv);			/* get number of lvs. */

	rli.head.num_dassign = num_dassign;		/* Fill in RLI header info. */
	rli.head.num_attach = num_attach;
	rli.head.num_lv = num_lv;

	rli.head.num_device_resv = 0;
	do i = 1 to rcpd.tot_devices;			/* loop through all devices */
	     device_ptr = addr (rcpd.device (i));
	     if (device.reservation_id ^= 0) & (device.process_id = this_process) then
		rli.head.num_device_resv = rli.head.num_device_resv + 1;
	end;

	rli.head.num_vol_resv = 0;
	do i = 1 to rcpd.last_volume;			/* and then loop through all volumes */
	     volume_ptr = addr (rcpd.volume (i));
	     if (volume.reservation_id ^= 0) & (volume.process_id = this_process) then
		rli.head.num_vol_resv = rli.head.num_vol_resv + 1;
	end;

	total_size = fixed (rel (addr (rli.end)), 19) - fixed (rel (rli_ptr), 19);
	if total_size > copy_size			/* Is there room for all info? */
	then do;					/* No. */
	     ecode = error_table_$item_too_big;
	     goto LIST_RETURN;
	end;

	rcse_off = dassign_off;			/* Process all assignment RCS entries. */
	num_dassign = 0;
	do while (rcse_off ^= "0"b);			/* We will go through process assignment list. */
	     num_dassign = num_dassign + 1;		/* Index of current assignment entry. */
	     dassign_ptr = addr (rli.dassigns (num_dassign));
	     rcse_ptr = ptr (rcs_ptr, rcse_off);	/* Pointer fo RCS entry we get info from. */
	     rcse_off = rcse.user_off;		/* Offset of next RCS entry in this list. */
	     dassign.device_name = rcse.device_name;	/* Copy all fields needed for assignment entry. */
	     dassign.dtypex = rcse.dtypex;
	     dassign.model = rcse.model;
	     do i = 1 to rcse.num_qualifiers;
		dassign.qualifiers (i) = rcse.qualifiers (i);
	     end;
	     dassign.state_time = rcse.state_time;
	     dassign.state = rcse.state;
	     dassign.level = rcse.caller_level;
	     dassign.disposition = rcse.disposition;
	     if rcse.rcse_off = "0"b then
		dassign.flags.attached = "0"b;
	     else dassign.flags.attached = "1"b;
	     dassign.rcp_id = rcse.rcp_id;
	     dassign.usage_time, dassign.wait_time = 0;
	end;

	rcse_off = attach_off;			/* Process all attachment entries. */
	num_attach = 0;
	do while (rcse_off ^= "0"b);			/* Go through process attachment list. */
	     num_attach = num_attach + 1;		/* Index of current attachment entry. */
	     attach_ptr = addr (rli.attaches (num_attach));
	     rcse_ptr = ptr (rcs_ptr, rcse_off);	/* Pointer to RCS entry we get info from. */
	     rcse_off = rcse.user_off;		/* Offset of next RCS entry in this list. */
	     attach.device_name = rcse.device_name;	/* Copy all fields needed for attachment entry. */
	     attach.volume_name = rcse.volume_name;
	     attach.dtypex = rcse.dtypex;
	     attach.state_time = rcse.state_time;
	     attach.state = rcse.state;
	     attach.level = rcse.caller_level;
	     attach.flags.priv = rcse.flags.priv;
	     attach.flags.writing = rcse.flags.writing;
	     attach.rcp_id = rcse.rcp_id;
	     attach.workspace_max = rcse.workspace_max;
	     attach.timeout_max = rcse.timeout_max;
	     attach.ioi_index = rcse.ioi_index;
	     attach.usage_time, attach.wait_time = 0;
	end;

	if num_lv ^= 0				/* Are there any lvs to list? */
	     then
	     call rcp_lv_$copy (rli_ptr);		/* Yes, copy list of lv info. */

	k = 0;
	do i = 1 to rcpd.tot_devices;			/* loop through all devices */
	     device_ptr = addr (rcpd.device (i));
	     if (device.reservation_id ^= 0) & (device.process_id = this_process) then do;
		k = k + 1;
		device_resv_ptr = addr (rli.device_resvs (k));
		device_resv.reservation_id = device.reservation_id;
		device_resv.reserved_by = device.reserved_by;
		device_resv.device_name = device.device_name;
	     end;
	end;

	k = 0;
	do i = 1 to rcpd.last_volume;			/* and then loop through all volumes */
	     volume_ptr = addr (rcpd.volume (i));
	     if (volume.reservation_id ^= 0) & (volume.process_id = this_process) then do;
		k = k + 1;
		vol_resv_ptr = addr (rli.vol_resvs (k));
		vol_resv.reservation_id = volume.reservation_id;
		vol_resv.reserved_by = volume.reserved_by;
		vol_resv.volume_name = volume.volume_name;
	     end;
	end;

LIST_RETURN:
	call CLEANUP;				/* We don't bother to audit 'cause this is non-privileged */
	arg_ecode = ecode;
	return;

SETUP:
     procedure;

/*	This procedure is called to set up and validate the caller's
   *	segment pointer.  We must be sure that we don't copy past the
   *	end of his segment.
*/
	call cu_$level_get (caller_level);		/* Save caller's validation level. */
	call cu_$level_set (get_ring_ ());		/* Set validation level to RCP level. */

	to_ptr = arg_to_ptr;			/* Copy arguments. */
	copy_size = arg_copy_size;
	operation = access_operations_$rcp_copy_info;
	operation_ptr = addr (operation);
	en_access_op.detailed_operation = 0;
	ops_ptr = addr (en_access_op.detailed_operation);
/**** the one non-priv entry (list) isn't audited, so always set this flag ****/
	detailed_operation.priv_gate_call = "1"b;
	call hcs_$get_max_length_seg (to_ptr, max_size, ecode);
	if ecode ^= 0 then
	     return;

	if (fixed (rel (to_ptr), 19) + copy_size) > max_size then
	     ecode = error_table_$bad_arg;

     end SETUP;

audit:
     proc (code);

dcl	code		   fixed bin (35) parameter;

dcl	1 auto_event_flags	   like audit_event_flags aligned;

	unspec (auto_event_flags) = ""b;
	auto_event_flags.grant = (code = 0);
	auto_event_flags.priv_op = "1"b;

	call access_audit_r1_$log_obj_ptr (who_am_i, caller_level, unspec (auto_event_flags), operation, rcpd_ptr, code,
	     null (), 0);

     end audit;

CLEANUP:
     proc;

	call cu_$level_set (caller_level);

     end CLEANUP;

%include access_mode_values;
%page;
%include access_audit_eventflags;
%page;
%include access_audit_encoded_op;
%page;
%include rcp_data;
%page;
%include rcp_com_seg;
%page;
%include rcp_data_info;
%page;
%include rcp_meter_info;
%page;
%include rcp_list_info;
%page;
%include rcp_ops;
%page;
%include rcp_requestor_info;
%page;
%include rcp_resource_info;
%page;
%include rcp_resource_states;
%page;
%include rcp_resource_types;

     end rcp_copy_;
