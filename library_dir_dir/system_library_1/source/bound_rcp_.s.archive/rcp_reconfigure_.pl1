/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


rcp_reconfigure_: procedure;

/*	This program implements the rcp_sys_$delete_device & rcp_sys_$add_device entries.
   *	Created on 12/09/74 by Bill Silver.
   *	Changed on 04/20/76 by Bill Silver for storage system disks.
   *	Modified 6/79 by Michael R. Jordan for MR7.0R.
   *      Modified 841009 to interface to rcp_control_ instead of
   *        rcp_initializer_... - M. M. Pozzo
   *	Modified 841121 to remove initializer variable bug introduced 
   *	during auditing (operation set to "" at COMMON)... -M. M. Pozzo
   *
   *	This program contains the following entry points:
   *	     1.	delete_device    -	Delete a device from the system.
   *	     2.	add_device       -	Add a deleted device back to the system.
*/

/*		ARGUMENT  DATA		*/

	dcl     arg_device_name	 char (*);	/* (I) Device name. */
	dcl     arg_ecode		 fixed bin (35);	/* (O) error_table_ code. */


/*		AUTOMATIC  DATA		*/

	dcl     device_offset	 bit (18) aligned;	/* needed by rcp_control_ */
	dcl     process_id		 bit (36) aligned;	/* needed by rcp_control */
	dcl     ssys_flag		 bit (1) aligned;	/* ON => storage system disk. */
	dcl     volume_offset	 bit (18) aligned;	/* needed by rcp_control_ */

	dcl     device_name		 char (32);	/* Device name. */
	dcl     operation		 bit (36) aligned;	/* Operation requested of rcp_control_ */

	dcl     caller_level	 fixed bin;	/* Caller's validation level. */
	dcl     ecode		 fixed bin (35);
	dcl     error_count		 fixed bin (17);	/* Errors on device attachment */

/*		EXTERNAL ENTRIES CALLED	*/

	dcl     cleanup		 condition;	/* Used to set up cleanup handler. */

	dcl     (addr, substr)	 builtin;

	dcl     cu_$level_get	 entry (fixed bin);
	dcl     cu_$level_set	 entry (fixed bin);
	dcl     get_ring_		 entry returns (fixed bin);
	dcl     mdx$add_del		 entry (char (*), bit (1) aligned, bit (1) aligned, fixed bin (35));
	dcl     rcp_control_	 entry (bit (36) aligned, bit (18) aligned, bit (18) aligned, char (*),
				 fixed bin (17), bit (36) aligned, fixed bin (35));

	dcl     access_operations_$rcp_add_device ext static bit (36) aligned;
	dcl     access_operations_$rcp_delete_device ext static bit (36) aligned;

/*	These two entriy points are called to delete or add a device.
   *	A deleted device cannot be assigned to any process.
*/


delete_device: entry (arg_device_name, arg_ecode);

	operation = access_operations_$rcp_delete_device;	/* Delete this device. */
	goto COMMON;


add_device: entry (arg_device_name, arg_ecode);

	operation = access_operations_$rcp_add_device;	/* Add this device. */


COMMON:

	device_offset = ""b;
	process_id = ""b;
	volume_offset = ""b;
	device_name = "";
	error_count = 0;

	ecode = 0;
	call cu_$level_get (caller_level);
	on cleanup begin;
		call cu_$level_set (caller_level);
	     end;
	call cu_$level_set (get_ring_ ());

	device_name = arg_device_name;		/* Get argument. */

	if substr (device_name, 1, 3) = "dsk"		/* Is this a DISK type device? */
	then do;					/* Yes, see if it belongs to the storage system. */
		call mdx$add_del (device_name, (operation = access_operations_$rcp_add_device), ssys_flag, ecode);
		if ssys_flag then goto RETURN;	/* Is storage system then all done. */
	     end;

	call rcp_control_ (operation, volume_offset, device_offset,
	     device_name, error_count, process_id, ecode);


RETURN:
	call cu_$level_set (caller_level);
	arg_ecode = ecode;
	return;

     end rcp_reconfigure_;
