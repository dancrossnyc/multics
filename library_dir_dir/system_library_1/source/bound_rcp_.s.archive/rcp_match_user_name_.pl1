/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


rcp_match_user_name_: proc (user_name, match_name) returns (bit (1));


/*

   This procedure is called by RCP to see if a group_id matches a match string
   which is a group_id with star components.

   For example User.Proj.a would match User.*.* or User but not User.Proj.m


   Written 06/01/78 by Michael R. Jordan

*/

dcl  addr builtin;
dcl  index builtin;
dcl  length builtin;
dcl  match_name char (32) aligned;			/* Name in the RCPD. */
dcl  substr builtin;
dcl  user_name char (32) aligned;			/* Name of the user. */

dcl 1 user aligned,
    2 person char (32),				/* Person_id */
    2 project char (32),				/* Project_id */
    2 tag char (32);				/* Instance tag */
dcl 1 match like user;

/*

   If the strings match, the test succeeds.

*/


	if user_name = match_name then return ("1"b);


/*

   Well, we have to do some work.  First parse the two strings
   and then see if they match.  If so the test succeeds.

*/


	call PARSE (user_name, addr (user));
	call PARSE (match_name, addr (match));


/*

   Now test the structures returned.

*/


	if user.person ^= match.person then		/* Not the same person. */
	     if match.person ^= "*" then return ("0"b);	/* Nope! */

	if user.project ^= match.project then		/* Not the same project. */
	     if match.project ^= "*" then return ("0"b);

	if user.tag ^= match.tag then			/* Not the right tag. */
	     if match.tag ^= "*" then return ("0"b);


/*

   All matched in some way - succeed!

*/


	return ("1"b);

PARSE:	proc (s, st_ptr);


dcl  s char (*) aligned;				/* The string to parse. */
dcl  st_ptr ptr;					/* Ptr to the following structure... */


dcl  i fixed bin;					/* start of substring */
dcl  l fixed bin ;					/* length of substring */
dcl 1 st like user based (st_ptr);


/*

   start out with default values for the structure.

*/


	     st.person, st.project, st.tag = "*";


/*

   Now get the Person_id.

*/


	     l = index (s, ".")-1;			/* length of substring */
	     if l < 0 then do;			/* this is the last substring */
		st.person = s;
		return;
	     end;

	     if l > 0 then				/* the substring is not null */
		st.person = substr (s, 1, l);		/* so use it */

	     i = l+2;				/* update start of next substring */
	     if i > length (s) then return;		/* if there's no more, quit */


	     l = index (substr (s, i), ".")-1;		/* length of substring */
	     if l < 0 then do;			/* this is the last substring */
		st.project = substr (s, i);
		return;
	     end;

	     if l > 0 then				/* the substring is not null */
		st.project = substr (s, i, l);	/* so use it */

	     i = i+l+1;				/* update start of next substring */
	     if i > length (s) then return;		/* no more data */


	     st.tag = substr (s, i);			/* last substring */


	     return;


	end PARSE;


     end rcp_match_user_name_;
