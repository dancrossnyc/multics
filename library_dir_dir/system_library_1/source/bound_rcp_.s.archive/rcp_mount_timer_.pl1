/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: off */

rcp_mount_timer_: procedure;

/*	This program implements the RCP mount timer mechanism.
   *	Created on 11/02/76 by Bill Silver.
   *	$account_init by B. Greenberg 8/2/77
*/


/****^  HISTORY COMMENTS:
  1) change(87-02-10,Farley), approve(87-04-14,MCR7652),
     audit(87-04-15,Lippard), install(87-04-28,MR12.1-1028):
     Changed to attempt to locate the attachment RCSE for the device and if
     found call rcp_comment_ to possibly display the user comment that was
     displayed with the first mount message.
                                                   END HISTORY COMMENTS */


/*	This program has the following entry points:
   *	     1.	init   -	called by a system process through the rcp_sys_ gate.
   *			It initializes the mount timer mechanism.
   *	     2. 	check  -	called by the system process that initialized the mount timer.
   *			It is called through the rcp_sys_ gate.  It checks to see
   *			if a mount is pending for the specified drive.  If a mount is
   *			pending the operator is told to check on this mount.
   *	     3.	set    -	an internal interface called by rcp_tape_ and rcp_disk_.
   *			It turns ON the mount pending flag for a specified drive
   *			and signals the system process that will check on this mount.
   *	     4.	reset  -	an internal interface called by rcp_tape_ and rcp_disk_.
   *			It turns OFF the mount pending flag for a specified drive.
   5.	account_init - like $init.  Called through rcp_sys_ to set up
   accounting channel/PID. Here for convenience.
*/

/*		ARGUMENTS			*/

dcl  arg_device_off bit (18) aligned;			/* (I) RCPD device entry offset. */
dcl  arg_ecode fixed bin (35);			/* (O) error_table_ code. */
dcl  arg_ev_chan fixed bin (71);			/* (I) Mount timer IPC event channel. */
dcl  arg_recheck_flag bit (1) aligned;			/* (O) ON => check this mount again. */
dcl  arg_write_flag bit (1) aligned;			/* (I) ON => mounting for writing. */


/*		AUTOMATIC DATA		*/

dcl  caller_level fixed bin;				/* Caller's validation level. */
dcl  device_off bit (18) aligned;			/* RCPD device entry offset. */
dcl  ecode fixed bin (35);
dcl  message_buffer fixed bin (71);			/* Holds message send to system process. */
dcl  message_ptr ptr;				/* Pointer for based message structure. */
dcl  recheck_flag bit (1);
dcl  rcsx fixed bin;				/* RCS index */


/*		BASED DATA		*/

dcl 1 message based (message_ptr) aligned,		/* Mount timer message. */
    2 key char (4),					/* Must be "rcmt". */
   (2 device_off bit (18),				/* RCPD device entry offset. */
    2 mbz bit (18)) unal;


/*		INTERNAL STATIC DATA	*/

dcl  save_pid bit (36) aligned internal static init ("0"b);


/*		EXTERNAL DATA		*/

dcl (addr, fixed, mod, ptr, rel, size) builtin;

dcl  error_table_$bad_index fixed bin (35) external;
dcl  error_table_$bad_processid fixed bin (35) external;

dcl  admin_gate_$syserr entry options (variable);
dcl  cu_$level_get entry (fixed bin);
dcl  cu_$level_set entry (fixed bin);
dcl  get_process_id_ entry returns (bit (36) aligned);
dcl  get_ring_ entry returns (fixed bin);
dcl  hcs_$wakeup entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35));
dcl  rcp_comment_ entry (ptr);
dcl  rcp_pointers_$com_seg entry returns (ptr);
dcl  rcp_pointers_$data entry returns (ptr);
%page;%include rcp_data;
%page;%include rcp_com_seg;
%page;
init:	entry (arg_ev_chan, arg_ecode);

/*	This entry point is called by the system process that will handle
   *	the mount timer wakeups.  This entry just has to save the process
   *	ID of this process and the IPC event channel used for the mount timer
   *	wakeups.
*/
	call cu_$level_get (caller_level);		/* Save caller's validation level. */
	call cu_$level_set (get_ring_ ());		/* Set RCP's validation level. */

	rcpd_ptr = rcp_pointers_$data ();		/* Get a pointer to RCP_DATA. */

	rcpd.mtimer_chan = arg_ev_chan;		/* Save event channel and PID. */
	rcpd.mtimer_pid = get_process_id_ ();
	save_pid = rcpd.mtimer_pid;			/* Save process ID. */

	arg_ecode = 0;
	call cu_$level_set (caller_level);		/* Reset caller's validation level. */
	return;
%page;
account_init: entry (arg_ev_chan, arg_ecode);

/*	This entry point is called by the system process that will handle
   *	the accounting wakeups.  This entry just has to save the process ID
   *	of this process and the IPC event channel used for the accounting wakeups.
   *	It is in this program simply because of its similarity to the $init
   *	entry above: a convenience.
*/

	call cu_$level_get (caller_level);		/* Save/restor validation levels */
	call cu_$level_set (get_ring_ ());

	rcpd_ptr = rcp_pointers_$data ();		/* Get a pointer to RCP_DATA. */

	rcpd.accounting_chan = arg_ev_chan;		/* Copy params. */
	rcpd.accounting_pid = get_process_id_ ();

	arg_ecode = 0;
	call cu_$level_set (caller_level);
	return;
%page;
check:	entry (arg_device_off, arg_recheck_flag, arg_ecode);

/*	This entry point is called by the system process that is handling
   *	mount timer wakeups.  It passes in the RCPD device entry offset of
   *	the drive that it wants to check.  This entry  will check to see if
   *	a mount is now pending for this drive.  If so, a message will be sent
   *	to the system operator asking that this mount be checked.  The system
   *	process will be told to check on this mount again.
*/
	call cu_$level_get (caller_level);		/* Save callers validation level. */
	call cu_$level_set (get_ring_ ());		/* Set RCP validation level. */

	rcpd_ptr = rcp_pointers_$data ();		/* Get pointer to RCPD. */
	device_off = arg_device_off;			/* Copy argument. */

	ecode = 0;				/* Initialize variables. */
	recheck_flag = "1"b;

	if rcpd.mtimer_pid = "0"b			/* Have we been initialized yet? */
	then goto CHECK_RETURN;			/* No, just return. */

	if rcpd.mtimer_pid ^= save_pid		/* Caller must be process that initialized. */
	then do;					/* But it isn't. */
	     ecode = error_table_$bad_processid;
	     goto CHECK_RETURN;
	end;

/* Validate device entry offset. */
	if (device_off < rel (addr (rcpd.device))) |
	(device_off >= rel (addr (rcpd.volume))) |
	(mod ((fixed (device_off, 18) - fixed (rel (addr (rcpd.device)), 18)), size (device)) ^= 0)
	then do;					/* Offset not for a real entry. */
	     ecode = error_table_$bad_index;
	     goto CHECK_RETURN;
	end;

	device_ptr = ptr (rcpd_ptr, device_off);	/* Ok now to get ptr to device entry. */

	if device.dtypex > 2			/* Device must be a tape or disk drive. */
	then do;					/* No, it is some other type of device. */
	     ecode = error_table_$bad_index;
	     goto CHECK_RETURN;;
	end;

	recheck_flag = device.flags.mounting;		/* ON => a mount is pending. */
	if recheck_flag then do;			/* Is there a mount pending? */
	     call admin_gate_$syserr (3, "RCP: Check Mount of ^[scratch^s^;^a^]^[ for writing^] on ^a for ^a",
		(device.volume_name = ""), device.volume_name, device.flags.writing, device.device_name, device.group_id);

	     rcs_ptr = rcp_pointers_$com_seg ();

	     do rcsx = 1 to rcs.num_entries;
		rcse_ptr = addr (rcs.entry (rcsx));

		if rcse.state ^= 0 then		/* not free */
		     if rcse.kind = 1 then		/* attach entry */
			if rcse.device_name = device.device_name then do;
						/* correct device */
			     call rcp_comment_ (rcse_ptr); /* Type caller's comment. */
			     goto CHECK_RETURN;
			end;
	     end;
	end;

CHECK_RETURN:
	arg_recheck_flag = recheck_flag;		/* Return arguments. */
	arg_ecode = ecode;
	call cu_$level_set (caller_level);		/* Reset validation level. */
	return;
%page;
set:	entry (arg_device_off, arg_write_flag, arg_ecode);

/*	This entry point is called by RCP within the mounting process.
   *	The mount pending flag is turned ON for the specified device.
   *	A wakeup is sent to the mount timer process.
*/
	rcpd_ptr = rcp_pointers_$data ();		/* Get pointer to RCPD. */
	device_off = arg_device_off;			/* Get RCPD device entry offset. */
	device_ptr = ptr (rcpd_ptr, device_off);	/* Now get pointer to device entry. */

	if rcpd.mtimer_chan = 0			/* Is mount timer process there? */
	then do;					/* No, nothing to do. */
	     arg_ecode = 0;
	     return;
	end;

	device.flags.writing = arg_write_flag;		/* Remember if mounting for writing. */
	device.flags.mounting = "1"b;			/* Turn ON mount pending flag. */

	message_ptr = addr (message_buffer);		/* Set up mount timer message. */
	message.key = "rcmt";			/* Name of message. */
	message.device_off = device_off;		/* RCPD devce entry offset. */
	message.mbz = "0"b;

	call hcs_$wakeup (rcpd.mtimer_pid, rcpd.mtimer_chan, message_buffer, ecode);

	arg_ecode = ecode;
	return;
%page;
reset:	entry (arg_device_off, arg_ecode);

/*	This entry is called by RCP within the mounting process to turn OFF
   *	the mount pending flag.
*/

	rcpd_ptr = rcp_pointers_$data ();		/* Get pointer to RCPD. */
	device_ptr = ptr (rcpd_ptr, arg_device_off);

	device.flags.mounting = "0"b;			/* Mount no longer pending. */

	arg_ecode = 0;
	return;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   RCP: Check Mount of REELID {for writing} on DRIVE for PERSON.PROJ.T

   S:	$beep

   T:	$run

   M:	The request to mount tape reel REELID has been unsatisfied for over 4 minutes.

   A:	Mount the reel or use "x deny" to inform the user that the reel cannot be mounted.


   END MESSAGE DOCUMENTATION */

     end rcp_mount_timer_;
