/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */

/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
rcp_audit:
     procedure (a_caller, a_operation, a_req_info_ptr, a_res_info_ptr, a_owner, a_effmode, a_raw_mode, a_rbs, a_rm_on,
	a_error_code);

/*            This internal subroutine determines if auditing is
   *	    required for an RCP event.
   *            Created 841112 by Maria M. Pozzo
   *
*/


/****^  HISTORY COMMENTS:
  1) change(87-07-14,Rauschelbach), approve(87-08-07,MCR7748),
     audit(87-11-11,Farley), install(87-11-30,MR12.2-1004):
     Removed signal to vfile_error condition as it was erroneously left from
     debugging.
                                                   END HISTORY COMMENTS */


/*            ARGUMENTS                       */

dcl	a_caller		   char (*);		/* (I) Identifies the program that made the call. */
dcl	a_operation	   bit (36) aligned;	/* (I) The RCP operation as defined in rcp_operations.incl.pl1 */
dcl	a_req_info_ptr	   ptr;			/* (I) Pointer to requestor information. */
dcl	a_res_info_ptr	   ptr;			/* (I) Pointer to object information. */
dcl	a_owner		   char (*);		/* (I) Resource Owner. */
dcl	a_effmode		   bit (3);		/* (I) "0"b3 if access was denied */
dcl	a_raw_mode	   bit (3);		/* (I) Raw mode used in auditing. */
dcl	a_rbs		   (2) fixed bin (3);	/* (I) Ring brackets of the ACS segment if there was one. */
dcl	a_rm_on		   bit (1);		/* (I) True = resource management enabled */
dcl	a_error_code	   fixed bin (35);		/* (I) Error code */

/*            AUTOMATIC                       */

dcl	audit		   bit (1);		/* Is audit needed. */
dcl	1 auto_rcp_obj_info	   like rcp_obj_info;
dcl	based_bits	   bit (bl * 9) aligned based (bp);
dcl	rm_on		   bit (1);
dcl	effmode		   bit (3);
dcl	raw_mode		   bit (3);
dcl	rbs		   (2) fixed bin (3);
dcl	object_access_class	   (2) bit (72) aligned;
dcl	event_flags	   bit (36) aligned;
dcl	operation		   bit (36) aligned;	/* Local operation */
dcl	base_op		   bit (36) aligned;	/* oper_code for audit. */

dcl	caller		   char (32);		/* Local caller */
dcl	msg_str		   char (256);		/* Format string for audit message. */
dcl	object_name	   char (177);		/* Object name is "Registry " plus the pathname of the registry, at it's largest. */
dcl	owner		   char (32);		/* Current resource owner. */
dcl	registry_dir	   char (168);		/* directory registry is contained in */
dcl	registry_name	   char (32);		/* name of registry (for registry operations) */
dcl	bl		   fixed bin (21);
dcl	error_code	   fixed bin (35);
dcl	local_code	   fixed bin (35);

dcl	bp		   ptr;
dcl	operation_ptr	   ptr;

dcl	1 en_access_op	   like encoded_access_op aligned based (operation_ptr);

dcl	addr		   builtin;
dcl	bin		   builtin;
dcl	null		   builtin;
dcl	rtrim		   builtin;
dcl	size		   builtin;
dcl	unspec		   builtin;

/*            EXTERNAL                       */

dcl	access_audit_r1_$check_obj_class_range
			   entry (bit (36) aligned, bit (36) aligned, (2) bit (72) aligned) returns (bit (1));
dcl	access_audit_r1_$log_obj_class_range
			   entry options (variable);
dcl	hcs_$get_access_class  entry (char (*), char (*), bit (72) aligned, fixed bin (35));
dcl	ioa_$rsnnl	   entry () options (variable);
dcl	pathname_		   entry (char (*), char (*)) returns (char (168));
dcl	rcp_setup_event	   entry (bit (36) aligned, bit (3), bit (36) aligned, fixed bin (35));
dcl	resource_info_$get_type
			   entry (char (*), bit (1), fixed bin (35));
dcl	suffixed_name_$make	   entry (char (*), char (*), char (32), fixed bin (35));

dcl	access_operations_$rcp_set
			   bit (36) aligned ext static;
dcl	access_operations_$rcp_set_access
			   bit (36) aligned ext static;
dcl	access_operations_$rcp_delete_registry
			   bit (36) aligned external;
dcl	access_operations_$rcp_copy_registry
			   bit (36) aligned external;
dcl	access_operations_$rcp_update_registry_header
			   bit (36) aligned external;
dcl	access_operations_$rcp_reconstruct_registry
			   bit (36) aligned external;

/*	CONSTANTS		*/

dcl	COMPONENT_0_NAME	   char (1) static options (constant) init ("0");
dcl	REGISTRY_SUFFIX	   char (4) static options (constant) init ("rcpr");
dcl	REGISTRY_OLD_SUFFIX	   char (3) static options (constant) init ("old");

/*  Copy argument data */

	caller = a_caller;
	operation = a_operation;
	base_op = operation;
	addr (base_op) -> en_access_op.detailed_operation = 0;
	ops_ptr = addr (addr (operation) -> en_access_op.detailed_operation);
	requestor_info_ptr = a_req_info_ptr;
	resource_info_ptr = a_res_info_ptr;
	owner = a_owner;
	effmode = a_effmode;
	raw_mode = a_raw_mode;
	rbs = a_rbs;
	rm_on = a_rm_on;
	error_code = a_error_code;

/*  Initialize local variables. */

	audit = "0"b;
	event_flags = "0"b;
	object_name = "";
	local_code = 0;
	bp = null ();
	bl = 0;

/*  If resource management is not enabled then don't audit.  If this is */
/*  a search operation then we don't audit either. */
/*  If it's a reconstruct operation we are in the Initializer process and */
/*  rm is not turned on, since reconstructs are done in "stan". */

	if (^rm_on & (base_op ^= access_operations_$rcp_reconstruct_registry)) | detailed_operation.search then
	     goto MAIN_RETURN;

/*  Set up the RCP event.  We already have the oper_code in base_op. */

	call rcp_setup_event (operation, effmode, event_flags, local_code);
	if local_code ^= 0 then
	     goto MAIN_RETURN;

/*  Get the access class range of the object. */

	registry_dir = resource_info.registry_dir;
	if registry_operation (base_op) then do;	/* the registry itself is the object */
	     if base_op = access_operations_$rcp_delete_registry then
		call suffixed_name_$make (resource_info.resource_type, REGISTRY_OLD_SUFFIX, registry_name, local_code)
		     ;
	     else call suffixed_name_$make (resource_info.resource_type, REGISTRY_SUFFIX, registry_name, local_code);
	     if local_code ^= 0 then
		goto MAIN_RETURN;
/**** Low end of access class range is access class of the directory (registry), high end is that of component 0. ****/
	     call hcs_$get_access_class (registry_dir, registry_name, object_access_class (1), local_code);
	     if local_code ^= 0 then
		goto MAIN_RETURN;
	     call hcs_$get_access_class (pathname_ (registry_dir, registry_name), COMPONENT_0_NAME,
		object_access_class (2), local_code);
	     if local_code ^= 0 then
		goto MAIN_RETURN;
	end;
	else do;					/* we can use the registry to find out the access class range */
	     record_ptr = resource_info.registry_record_ptr;
	     if registry_record.free then
		call chase (registry_record.potential_aim_range_desc, bp, bl, local_code);
	     else call chase (registry_record.aim_range_desc, bp, bl, local_code);
	     if local_code ^= 0 then
		goto MAIN_RETURN;
	     if bl > 0 then addr (object_access_class) -> based_bits = based_bits;
	     else unspec (object_access_class) = ""b;	/* no range, set to lowest possible */
	end;

/*  Determine if access is needed. */

	audit = access_audit_r1_$check_obj_class_range (event_flags, base_op, object_access_class);

/*  If auditing is required then do it. */

	if audit then do;
	     call get_obj_name ();
	     audit_rcp_obj_ptr = addr (auto_rcp_obj_info);
	     call fill_audit_record (local_code);
	     if local_code ^= 0 then
		goto MAIN_RETURN;
	     call get_msg_str ();
	     call access_audit_r1_$log_obj_class_range (caller, (requestor_info.validation_level), event_flags, base_op,
		object_access_class, rtrim (object_name), error_code, addr (rcp_obj_info), (size (rcp_obj_info)),
		msg_str);
	end;

MAIN_RETURN:
	return;
%page;
chase:
     proc (descriptor, bp, bl, a_error_code);

dcl	(
	descriptor	   fixed bin (35),
	a_error_code	   fixed bin (35),
	bp		   pointer,
	bl		   fixed bin (21)
	)		   parameter;

dcl	1 rs		   like rs_info aligned automatic;
dcl	local_code	   fixed bin (35);
dcl	error_table_$action_not_performed
			   ext static fixed bin (35);

	a_error_code = 0;
	if descriptor = 0 then do;
	     bp = addr (bp);			/* gotta point somewhere */
	     bl = 0;
	     return;
	end;

	unspec (rs) = ""b;
	rs.version = rs_info_version_2;
	rs.locate_sw = "1"b;
	rs.descriptor = descriptor;
	local_code = 0;

	call iox_$control (resource_info.registry_switch_ptr, "record_status", addr (rs), local_code);
	if local_code ^= 0 then do;
	     a_error_code = error_table_$action_not_performed;
	     return;
	end;
	bl = rs.record_length;
	bp = rs.record_ptr;

	return;
%include rs_info;
%include iox_dcls;
     end chase;

get_obj_name:
     proc ();

	if registry_operation (base_op) then
	     object_name = "Registry " || pathname_ (registry_dir, resource_info.resource_type);

	else object_name = (rtrim (resource_info.resource_type)) || " " || resource_info.resource_name;

	return;

     end get_obj_name;

registry_operation:
     proc (op) returns (bit (1) aligned);

dcl	op		   bit (36) aligned;

	return (op = access_operations_$rcp_copy_registry | op = access_operations_$rcp_delete_registry
	     | op = access_operations_$rcp_reconstruct_registry | op = access_operations_$rcp_update_registry_header);

     end registry_operation;

fill_audit_record:
     proc (a_code);

dcl	a_code		   fixed bin (35);

dcl	is_vol		   bit (1);
dcl	fill_code		   fixed bin (35);

	fill_code = 0;
	is_vol = "0"b;
	unspec (rcp_obj_info) = ""b;
	rcp_obj_info.info_type = AAB_rcp_object;
	rcp_obj_info.version = AUDIT_RCP_OBJ_INFO_VERSION_1;
	rcp_obj_info.pad = "0"b;
	rcp_obj_info.resource_type = resource_info.resource_type;
	rcp_obj_info.resource_name = resource_info.resource_name;
	rcp_obj_info.owner_id = owner;
	rcp_obj_info.access_class = object_access_class;
	rcp_obj_info.raw_mode = raw_mode;
	rcp_obj_info.rcp_ring_brackets = rbs;
	if registry_operation (base_op) then
	     rcp_obj_info.registry = "1"b;
	else do;
	     call resource_info_$get_type (resource_info.resource_type, is_vol, fill_code);
	     if fill_code ^= 0 then
		goto FILL_RETURN;
	     rcp_obj_info.device = ^is_vol;
	     rcp_obj_info.volume = is_vol;
	     rcp_obj_info.usage_locked = registry_record.usage_lock;
	     rcp_obj_info.release_locked = registry_record.release_lock;
	     rcp_obj_info.awaiting_clear = registry_record.awaiting_clear;
	     rcp_obj_info.has_acs_path = (registry_record.acs_path_desc ^= 0);
	     rcp_obj_info.flags.pad = "0"b;
	     rcp_obj_info.attributes = registry_record.attributes;
	end;

FILL_RETURN:
	a_code = fill_code;
	return;
     end fill_audit_record;

get_msg_str:
     proc ();

	call ioa_$rsnnl (
	     "^[raw_mode=^a ^;^s^]^[rcp_ring_brackets=^d,^d ^;^2s^]^[^[potential_attributes ^]^[desired_attributes ^]^[potential_aim_range ^]^[aim_range ^]^[owner ^]^[acs_path ^]^[location ^]^[comment ^]^[charge_type ^]^[usage_lock ^]^[release_lock ^]^[user_alloc^]^]",
	     msg_str, (0), (raw_mode ^= ""b), SEG_ACCESS_MODE_NAMES (bin (rcp_obj_info.raw_mode)), (rbs (1) ^= -1),
	     rcp_obj_info.rcp_ring_brackets,
	     (base_op = access_operations_$rcp_set | base_op = access_operations_$rcp_set_access),
	     detailed_operation.given.potential_attributes, detailed_operation.given.desired_attributes,
	     detailed_operation.given.potential_aim_range, detailed_operation.given.aim_range,
	     detailed_operation.given.owner, detailed_operation.given.acs_path, detailed_operation.given.location,
	     detailed_operation.given.comment, detailed_operation.given.charge_type,
	     detailed_operation.given.usage_lock, detailed_operation.given.release_lock,
	     detailed_operation.given.user_alloc);

     end get_msg_str;

%include access_audit_binary_def;
%page;
%include access_audit_encoded_op;
%page;
%include access_audit_rcp_info;
%page;
%include access_mode_values;
%page;
%include rcp_ops;
%page;
%include rcp_requestor_info;
%page;
%include rcp_resource_info;
%page;
%include rcp_registry;
     end rcp_audit;
