/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-05-13,GJohnson), approve(86-05-13,MCR7387),
     audit(86-05-13,Martinson), install(86-05-14,MR12.0-1056):
     Correct error message documentation.
                                                   END HISTORY COMMENTS */


rcp_message_:  procedure;

/*	This program implements the RCP message entry points.
*	Created on 04/25/75 by Bill Silver.
*
*	This program has the following entry points:
*	     1. 	priv  -	Allows privileged users to send messages to the operator
*			that involve an attached device.
*	     2.	tape  -	Generates a tape mount message.
*/

dcl	arg_comment	char(*);		/* (I) Privileged comment. */
dcl	arg_ecode		fixed bin(35);	/* (O) error_table_ code. */
dcl	arg_rcp_id	bit(36) aligned;	/* (I) RCP ID. */
dcl	arg_volume_name	char(*);		/* (I) Name of reel to be mounted. */
dcl	arg_ring_flag	bit(1);		/* (I) ON => mount with write ring. */

dcl	caller_level	fixed bin;	/* Caller's validation level. */
dcl	ecode		fixed bin(35);	/* error_table_ code. */
dcl	rcp_id		bit(36) aligned;	/* RCP ID. */
dcl	volume_name	char(32)  aligned;	/* Tape reel to be mounted. */
dcl	ring_comment	char(8);		/* "with" or "without" ring. */

dcl	cleanup		condition;	/* Used to set up cleanup handler. */

dcl     (	error_table_$invalid_state,
	error_table_$no_operation )  fixed bin(35)  external;

dcl	admin_gate_$syserr	entry  options(variable);
dcl	cu_$level_get	entry  (fixed bin);
dcl	cu_$level_set	entry  (fixed bin);
dcl	get_ring_		entry  returns(fixed bin);
dcl	rcp_comment_	entry  (ptr);
dcl	rcp_validate_	entry  (bit(36) aligned, fixed bin, ptr, fixed bin(35));
/*	*/
%include rcp_com_seg;
/*	*/
priv:  entry  (arg_rcp_id, arg_comment, arg_ecode);

/*	This entry point is called by privileged users in order to display a
*	comment to the operator.  The comment should deal with an attached device.
*/
	call cu_$level_get (caller_level);	/* Get caller's validation level. */
	on   cleanup  begin;		/* Cleanup if any trouble. */
	     call cu_$level_set (caller_level);	/* Reset validation level. */
	end;
	call cu_$level_set (get_ring_());	/* Set validation level to RCP level. */

	rcp_id = arg_rcp_id;		/* Get RCP ID. */
	call rcp_validate_ (rcp_id, caller_level, rcse_ptr, ecode);
	if   ecode ^= 0			/* Is RCP ID valid? */
	     then goto PRIV_RETURN;		/* No. */

	if   (rcse.kind ^= 1)  |		/* Is this an attachment? */
	     (^rcse.flags.priv)		/* and was device attached with privilege? */
	     then do;			/* No, don't display the comment. */
		ecode = error_table_$no_operation;
		goto PRIV_RETURN;
	     end;

	rcse.caller_comment = arg_comment;	/* Copy caller's comment. */
	call rcp_comment_ (rcse_ptr);		/* Now go display this comment. */

PRIV_RETURN:
	call cu_$level_set (caller_level);	/* Reset caller's validation level. */
	arg_ecode = ecode;
	return;
/*	*/
tape:  entry  (arg_rcp_id, arg_volume_name, arg_ring_flag, arg_ecode);

/*	This entry point is called to display a tape mount message to the
*	operator.  This is a temporary feature of RCP that will be deleted
*	when all callers of tdcm_ stop calling tdcm_$tdcm_message more
*	than once.
*/
	call cu_$level_get (caller_level);	/* Get caller's validation level. */
	on   cleanup  begin;		/* Cleanup if any trouble. */
	     call cu_$level_set (caller_level);	/* Reset validation level. */
	end;
	call cu_$level_set (get_ring_());	/* Set validation level to RCP level. */

	rcp_id = arg_rcp_id;		/* Copy arguments. */
	volume_name = arg_volume_name;
	if   arg_ring_flag			/* Are we mounting with or without a write ring? */
	     then ring_comment = "with";
	     else ring_comment = "without";

	call rcp_validate_ (rcp_id, caller_level, rcse_ptr, ecode);
	if   ecode ^= 0			/* Does caller have a right to this device? */
	     then goto TAPE_RETURN;		/* No, something wrong. */

	if   rcse.dtypex ^= 1		/* Is this a tape device? */
	     then do;			/* No. */
		ecode = error_table_$no_operation;
		goto TAPE_RETURN;
	     end;

	if   (rcse.kind ^= 1)  |		/* Is tape attached? */
	     (rcse.state ^= 5)		/* And is attachment completed? */
	     then do;			/* No. */
		ecode = error_table_$invalid_state;
		goto TAPE_RETURN;
	     end;

	rcse.volume_name = volume_name;	/* Save this volume name. */
	call admin_gate_$syserr (3, "RCP: Mount Reel ^a ^a ring on ^a for ^a (switching volumes).",
			     volume_name, ring_comment, rcse.device_name, rcse.group_id);

TAPE_RETURN:
	call cu_$level_set (caller_level);	/* Reset to caller's validation level. */
	arg_ecode = ecode;


/* BEGIN MESSAGE DOCUMENTATION

   Message:
   RCP: Mount Reel REELID with(out) ring on DRIVE for PERSON.PROJ.T (switching volumes).

   S:	$beep

   T:	$run

   M:	A user process has requested the mounting of
   tape reel REELID on drive DRIVE.

   A:	Locate the requested reel.
   Check to make sure that the user PERSON.PROJ is allowed to use the reel.
   Insert or remove a write ring as specified.
   Mount the reel on the specified drive.

   If the reel cannot be mounted, either because it
   cannot be located,
   access is incorrect,
   or the drive is down,
   use the "x deny" function to reject the mount request.


END MESSAGE DOCUMENTATION */

	end  rcp_message_;
