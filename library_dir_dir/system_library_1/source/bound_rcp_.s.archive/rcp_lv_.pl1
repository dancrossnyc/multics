/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


rcp_lv_: procedure;

/*	This program is an internal interface of RCP.
   *	Created on 04/08/76 by Bill Silver.
   *	Massively reworked on 09/13/76 by Bernard Greenberg for lv_request_.
   *
   *	This program is call to manage a per-process list of attached logical volumes.
   *	It has the following entry points:
   *	     1.  add_lv  -	Adds a logical volume to the list.
   *	     2.  del_lv  -  Deletes a logical volume from the list.
   *	     3.  check   - 	Returns lvid of attached lv.
   *	     4.  number  - 	Returns the number of attached lvs.
   *	     5.  copy    - 	Copies lv info.
*/

/*		ARGUMENTS		*/

dcl  arg_ecode fixed bin (35);			/*  (O)  error_table_ code. */
dcl  arg_event_id fixed bin (71);			/*  (I)  User-supplied event ID */
dcl  arg_lvid bit (36) aligned;			/* (I/O) Logical volume ID. */
dcl  arg_lv_name char (*);				/*  (I)  Logical volume name. */
dcl  arg_num_lvs fixed bin;				/*  (O)  Number of attached lvs. */
dcl  arg_rcp_id bit (36) aligned;			/* (I/O) RCP ID of this LV attachment. */
dcl  arg_rli_ptr ptr;				/*  (I)  Pointer to RLI structure. */
dcl  arg_statex fixed bin;				/*  (O)  State index. */


/*		AUTOMATIC DATA		*/

dcl  ecode fixed bin (35);				/* error_table_ code. */
dcl  event_id fixed bin (71);				/* User's event ID. */
dcl  lvid bit (36) aligned;				/* LV ID. */
dcl  lv_name char (32);				/* Name of lv. */
dcl  i fixed bin;
dcl  listx fixed bin;				/* LV array index. */
dcl  num_lvs fixed bin;				/* Number of attached lvs. */
dcl  rcp_id bit (36) aligned;				/* RCP ID for this LV attachment. */
dcl  statex fixed bin;
dcl  freex fixed bin;				/* Free index in lv_list search */


/*		BASED DATA		*/

dcl 1 based_rcp_id based aligned,			/* Overlay of RCP ID. */
   (2 id_count fixed bin (17),			/* Count make ID unique. */
    2 index fixed bin (17)) unal;			/* LV list index. */

/*		STATIC DATA		*/

dcl  rcp_id_count fixed bin internal static init (0);

dcl 1 lv_list (16) aligned internal static,		/* Per-process list of attached lvs. */
    2 volume_name char (32),				/* LV name. */
    2 lvatep ptr,					/* Identifier for lv_request_communicator_ */
    2 r0_accepted bit (1),				/* Called attach_lv. */
    2 lvid bit (36),				/* UID of lv. */
    2 rcp_id bit (36),				/* RCP ID for this LV attachment. */
    2 state_time fixed bin (71);			/* Time lv attached for process. */


/*		EXTERNAL ENTRIES CALLED	*/

dcl (addr, hbound) builtin;

dcl  error_table_$bad_index fixed bin (35) external;
dcl  error_table_$noalloc fixed bin (35) external;
dcl  error_table_$resource_assigned fixed bin (35) external;
dcl  error_table_$resource_unassigned fixed bin (35) external;

dcl  admin_gate_$attach_lv entry (bit (36) aligned, fixed bin (35));
dcl  admin_gate_$detach_lv entry (bit (36) aligned, fixed bin (35));
dcl  clock_ entry returns (fixed bin (71));
dcl  lv_request_communicator_$alloc_lvate entry (fixed bin (35)) returns (ptr);
dcl  lv_request_communicator_$abandon entry (ptr);
dcl  lv_request_communicator_$check entry (ptr, fixed bin, fixed bin (35));
dcl  lv_request_communicator_$intent_to_mount entry (ptr, char (*), fixed bin (71), fixed bin (35));
dcl  lv_request_communicator_$intent_to_detach entry (ptr, fixed bin (35));
						/* 	*/
%include rcp_list_info;
/* 	*/
add_lv:	entry (arg_lv_name, arg_lvid, arg_event_id, arg_rcp_id, arg_ecode);

/*	This entry will add the specified logical volume to the list of
   *	attached lvs.  The name and ID of this lv will be saved.
   *	An RCP ID will be generated that references this LV attachment.
   *	If valid, the lv_request_mechanism will be informed of the attachment.
*/

	lv_name = arg_lv_name;			/* Copy arguments. */
	lvid = arg_lvid;
	event_id = arg_event_id;
	rcp_id = "0"b;
	ecode = 0;

	freex = 0;				/* Initialize search through list. */
	do i = 1 to hbound (lv_list, 1);		/* Look at all possible entries. */

	     rcp_id = lv_list (i).rcp_id;		/* Make sure each entry is valid as it is considered. */
	     call CHECK_RCP_ID;			/* Get latest info. */

	     if lv_list (i).rcp_id = "0"b		/* Is this a free entry? */
	     then if freex = 0			/* Yes, is it the first free entry? */
		then freex = i;			/* Yes, remember this entry. */
		else;				/* No, we already have an entry. */
	     else if lv_list (i).volume_name = lv_name
	     then do;				/* Entry taken, and by this lv. */
		ecode = error_table_$resource_assigned;
		rcp_id = lv_list (i).rcp_id;		/* Return so check call can go. */
		goto ADD_LV_RETURN;
	     end;
	end;

	if freex = 0				/* Did we find a free entry? */
	then do;					/* No, all taken. */
	     ecode = error_table_$noalloc;
	     goto ADD_LV_RETURN;
	end;

	listx = freex;				/* First free is new one. */


	rcp_id_count = rcp_id_count + 1;		/* Found entry.  Gen new RCP ID. */
	addr (rcp_id) -> based_rcp_id.id_count = rcp_id_count;
	addr (rcp_id) -> based_rcp_id.index = listx;


	lv_list (listx).lvatep = lv_request_communicator_$alloc_lvate (ecode);
	if ecode ^= 0 then go to ADD_LV_RETURN;

	call lv_request_communicator_$intent_to_mount (lv_list (listx).lvatep, lv_name, event_id, ecode);
						/* Fill in entry, send message */
	if ecode ^= 0 then go to ADD_LV_RETURN;

	lv_list (listx).volume_name = lv_name;		/* Fill entry with lv info. */
	lv_list (listx).r0_accepted = "0"b;		/* Haven't checked into ring 0 yet. */
	lv_list (listx).lvid = lvid;
	lv_list (listx).state_time = clock_ ();
	lv_list (listx).rcp_id = rcp_id;		/* This marks entry as being used. */

ADD_LV_RETURN:
	arg_rcp_id = rcp_id;
	arg_ecode = ecode;
	return;
						/* 	*/
del_lv:	entry (arg_rcp_id, arg_ecode);

/*	This entry is called to remove an lv from the list of attached lvs.
*/

	rcp_id = arg_rcp_id;			/* Copy RCP ID argument. */

	call CHECK_RCP_ID;				/* Check that this RCP ID is valid. */
	if ecode = 0
	then do;
	     call lv_request_communicator_$intent_to_detach (lv_list (listx).lvatep, ecode);
	     lv_list (listx).rcp_id = "0"b;		/* free local entry */
	     ecode = 0;				/* Dont care */
	end;

	arg_ecode = ecode;
	return;








check:	entry (arg_rcp_id, arg_lvid, arg_statex, arg_ecode);

/*	This entry is called to check that the specified (by RCP ID) lv
   *	is really still attached.  If it is the ID of the lv will be returned.
*/

	rcp_id = arg_rcp_id;

	call CHECK_RCP_ID;				/* Check that this RCP ID is valid. */
	if ecode = 0
	then arg_lvid = lv_list (listx).lvid;		/* Get lv ID. */
	else arg_lvid = "0"b;

	if ecode = 0 & statex = 0 then if ^lv_list (listx).r0_accepted then do;
		call admin_gate_$attach_lv (lv_list (listx).lvid, ecode);
		if ecode = 0 then lv_list (listx).r0_accepted = "1"b;
	     end;

	arg_ecode = ecode;
	arg_statex = statex;
	return;
						/* 	*/
number:	entry (arg_num_lvs);

/*	This entry returns the current number of attached lvs.
*/
	num_lvs = 0;				/* Init. */

	do i = 1 to hbound (lv_list, 1);		/* Test all possible entries. */

	     rcp_id = lv_list (i).rcp_id;
	     call CHECK_RCP_ID;			/* Get latest info on validity. */

	     if lv_list (i).rcp_id ^= "0"b		/* Is this entry being used? */
	     then num_lvs = num_lvs + 1;		/* Yes, there is an attached lv here. */
	end;

	arg_num_lvs = num_lvs;
	return;







copy:	entry (arg_rli_ptr);

/*	This entry is called to fill in info about all attached lvs.
*/
	rli_ptr = arg_rli_ptr;			/* Get pointer to RLI structure. */

	rli.head.num_lv = hbound (lv_list, 1);		/* Set max number for now. */
	num_lvs = 0;				/* Init to count attached lvs. */

	do i = 1 to hbound (lv_list, 1);		/* Test all possible entries. */
	     rcp_id = lv_list (i).rcp_id;
	     call CHECK_RCP_ID;			/* Get latest info on validity. */

	     if lv_list (i).rcp_id ^= "0"b		/* Is this entry being used? */
	     then do;				/* Yes, copy info. */
		num_lvs = num_lvs + 1;		/* Up count. */
		lv_ptr = addr (rli.lvs (num_lvs));
		lv.volume_name = lv_list (i).volume_name;
		lv.state_time = lv_list (i).state_time;
		lv.rcp_id = lv_list (i).rcp_id;
	     end;
	end;

	rli.head.num_lv = num_lvs;			/* Set real count. */

	return;
						/* 	*/
CHECK_RCP_ID: procedure;

/*	This internal procedure is called to validate the RCP ID argument.
   *	If it is valid it will return the index to the lv_list entry that
   *	corresponds to the RCP ID.
*/

	     listx = addr (rcp_id) -> based_rcp_id.index; /* Get array index. */
	     if (listx = 0) |			/* Is index part of RCP ID valid? */
	     (listx > hbound (lv_list, 1))
	     then do;				/* No. */
		ecode = error_table_$bad_index;
		return;
	     end;

	     if lv_list (listx).rcp_id = rcp_id		/* Is this RCP ID valid? */
	     then ecode = 0;			/* Yes. */
	     else do;				/* Bad, bad */
		ecode = error_table_$resource_unassigned;
		return;
	     end;

	     call lv_request_communicator_$check (lv_list (listx).lvatep, statex, ecode);

	     if ecode ^= 0 then do;			/* Invalidate lv_list slot, abandon entry */
		if lv_list (listx).r0_accepted
		then call admin_gate_$detach_lv (lv_list (listx).lvid, (0));
						/* Get it out of ring 0. */
		call lv_request_communicator_$abandon (lv_list (listx).lvatep);
		lv_list (listx).rcp_id = "0"b;
	     end;

	end CHECK_RCP_ID;

     end rcp_lv_;
