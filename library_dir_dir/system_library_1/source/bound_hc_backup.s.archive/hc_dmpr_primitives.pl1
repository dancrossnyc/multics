/****^  ******************************************************
        *                                                    *
        * Copyright, (C) Honeywell Bull Inc., 1987           *
        *                                                    *
        * Copyright (c) 1986 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        * Copyright (c) 1972 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        ****************************************************** */

/* format: style4 */

hc_dmpr_primitives: proc;

/* Ring 0 backup procedures */
/* Coded by D. R. Vinograd 12/75 */
/* Modified by Mike Grady 1/9/80 to fix some bugs */
/* Modified 03/22/81, W. Olin Sibert, for ADP PTWs and SDWs */
/* Modified July, 1981, by D. R. Vinograd, to fix bugs and handle version numbers correctly */
/* Modified 2/82 BIM for new name on lock$unlock_dir */
/* Modified 3/82 by J. Bongiovanni for new PVTE, better error handling */
/* Modified 7/82 by J. Bongiovanni to read entire VTOCE, pc$dumper_get_file_map */
/* Modified 8/82 by GA Texada to fix phx12841	*/
/* Modified 9/82 by GA Texada to check for file map damage */
/* Modified 10/82 by J. Bongiovanni for synchronized segments, fm_damaged ,
   deltrailer problem */
/* Modified 8/83 by E. N. Kittlitz for search_ast$check. */
/* Modified Jan. 1985 by Greg Texada to ignore vtoce.(ncd nid) switches for directories and to set dtd for null vtoces.
*/

/****^  HISTORY COMMENTS:
  1) change(86-03-04,Fawcett), approve(86-04-11,MCR7383),
     audit(86-06-03,GWMay), install(86-07-17,MR12.0-1097):
     Support for subvolume devices real 512_word_io.
  2) change(88-05-27,GWMay), approve(88-05-27,MCR7883),
     audit(88-06-15,Beattie), install(88-07-19,MR12.2-1061):
     Added code for processing inconsistent volume dumper bit maps.
  3) change(88-10-05,GWMay), approve(88-10-05,MCR8005), audit(88-10-12,Farley),
     install(88-10-17,MR12.2-1173):
     Changed version of backup volume record from 1 to 2.
                                                   END HISTORY COMMENTS */

init_dmpr: entry (a_copy_dirsegp, a_dmpr_absegp, a_code);

	code = 0;					/* set return args to default */
	if pds$dmpr_copy_dirsegp ^= null then do;
	     a_code = error_table_$bad_arg;		/* only called once per process */
	     return;
	end;

	copy_dirsegp = a_copy_dirsegp;
	call grab_aste (copy_dirsegp, (sys_info$default_dir_max_length), code, astep);

	call quota_util$suspend_quota;

	pds$dmpr_copy_dirsegp = copy_dirsegp;
	a_dmpr_absegp = addr (backup_abs_seg$);
	pds$dmpr_pvid = "0"b;			/* clear some process variables */
	pds$dmpr_pvtx = 0;
	a_code = code;				/* return args */
	return;					/* all done */
%page;
dmpr_lock_pv: entry (a_pvid, a_type, a_infop, a_code);


	lock = "1"b;
lock_pv_common:
	pvtxh = "0"b;
	pvid = a_pvid;				/* copy input args */
	type = a_type;
	code = 0;					/* set return args to default */
	if (type ^= incr &				/* check input for arg error */
	     type ^= cons &
	     type ^= comp) then do;
	     a_code = error_table_$bad_arg;
	     return;
	end;

	call lock$lock_ast;				/* global lock on pvt */
	astl = "1"b;
	pvtx = get_pvtx (pvid, code);			/* search pvt for specified volume */
	if code ^= 0 then goto dmpr_lock_pv_ret;	/* all done so return */

	call get_pvtx$hold_pvtx (pvid, pvtx, code);
	if code ^= 0 then goto dmpr_lock_pv_ret;
	pvtxh = "1"b;


	pvtep = addr (addr (pvt$array) -> pvt_array (pvtx)); /* set ptr to pvt entry */
	if pvte.dmpr_in_use (type) & lock then do;	/* make sure volume not already in use */
	     code = error_table_$vol_in_use;
	     goto dmpr_lock_pv_ret;
	end;

	pvte.dmpr_in_use (type) = lock;		/* set volume lock */

	call lock$unlock_ast;
	astl = "0"b;

	if lock then do;
	     pds$dmpr_pvtx = pvtx;			/* set process variables */
	     pds$dmpr_pvid = pvid;
	     if type = incr then call dbm_man$update_map_from_ast (pvtep, pvtx);
	     bpvip = a_infop;
	     call set_info;
	     if code ^= 0 then do;
		pds$dmpr_pvtx = 0;
		pds$dmpr_pvid = "0"b;
		call lock$lock_ast;
		astl = "1"b;
		pvte.dmpr_in_use (type) = "0"b;
		code = error_table_$action_not_performed;
	     end;
	end;
	else do;
	     pds$dmpr_pvtx = 0;
	     pds$dmpr_pvid = "0"b;
	end;
dmpr_lock_pv_ret:
	if astl then call lock$unlock_ast;
	if pvtxh then call get_pvtx$release_pvtx (pvid, pvtx);
	a_code = code;
	return;
dmpr_unlock_pv: entry (a_pvid, a_type, a_code);

	lock = "0"b;
	goto lock_pv_common;
%page;
dmpr_build_vtoc_map: entry (a_vbmp, a_window, a_code);

	code = 0;
	astl = "0"b;
	pvtxh = "0"b;
	vbmp = a_vbmp;
	window = a_window;
	astep = null ();

	if pds$dmpr_pvid = "0"b then do;
	     a_code = error_table_$bad_arg;
	     return;
	end;

	call lock$lock_ast;
	astl = "1"b;

	call get_pvtx$hold_pvtx (pds$dmpr_pvid, pds$dmpr_pvtx, code);
	if code ^= 0 then goto build_vtoc_map_ret;
	pvtxh = "1"b;

	pvtep = addr (addr (pvt$array) -> pvt_array (pds$dmpr_pvtx));
	astep = get_aste (max_pages_per_segment);	/* get the biggest */
	if astep = null then do;
	     code = error_table_$action_not_performed;
	     goto build_vtoc_map_ret;
	end;

	ptp = addrel (astep, sst$astsize);

	aste.gtpd, aste.dnzp = "1"b;			/* Dont let segment go awry */
	aste.pvtx = fixed (pds$dmpr_pvtx, 8);
	aste.nqsw = "1"b;

	on page_fault_error begin;
	     code = error_table_$vtoc_io_err;
	     goto build_vtoc_map_done;
	end;

	do i = 0 to max_pages_per_segment - 1;
	     call ptw_util_$make_disk (addrel (ptp, i), ((max_pages_per_segment * window) + i + VTOC_ORIGIN));
	end;

	tsdw = get_ptrs_$given_astep (astep);
	call pmut$swap_sdw (addr (backup_abs_seg$), addr (tsdw));

	call thread$out (astep, sst$level (3).ausedp);	/* thread it out so no one gets confused */

	call lock$unlock_ast;
	astl = "0"b;

	n_vtoce_per_page = vtoc_per_rec (pvte.device_type); /* 5 or 2 */
	dev_vtoc_words = sect_per_vtoc (pvte.device_type) * words_per_sect (pvte.device_type); /* 192 or 512 */


	do i = 0 to max_pages_per_segment - 1;
	     pagep = ptr (addr (backup_abs_seg$), i * 1024);
	     do j = 0 to n_vtoce_per_page - 1;
		vtocep = addrel (pagep, j * dev_vtoc_words);
		if vtoce.uid ^= "0"b then do;		/* not null */
		     vtocx = j + i * n_vtoce_per_page + window * n_vtoce_per_page * max_pages_per_segment;
		     if vtocx > pvte.n_vtoce then goto build_vtoc_map_done;
		     vtoc_bit_map (vtocx) = "1"b;
		end;
	     end;
	end;

build_vtoc_map_done:
	revert page_fault_error;
	if ^astl then call lock$lock_ast;
	astl = "1"b;

	tsdw = 0;
	call pmut$swap_sdw (addr (backup_abs_seg$), addr (tsdw));
	if astep ^= null () then do;
	     call pc$cleanup (astep);
	     call put_aste (astep);
	end;

build_vtoc_map_ret:
	if astl then call lock$unlock_ast;
	astl = "0"b;
	if pvtxh then call get_pvtx$release_pvtx (pds$dmpr_pvid, pds$dmpr_pvtx);
	pvtxh = "0"b;
	a_code = code;
	return;
%page;

get_dmpr_data_object: entry (a_inputp, a_recordp, a_code);


	inputp = a_inputp;				/* pick up input args */
	recordp = a_recordp;

	astl = "0"b;
	dirl = "0"b;
	pvtxh = "0"b;
	pardirl = "0"b;
	code = 0;
	select_loop_cnt = 0;
	object_uid,
	     parent_uid = "0"b;
	valid_update = "0"b;
	astep, vtocep,
	     pvtep = null;

	type = dmpr_input.type;			/* copy args */
	prev_vtocx = dmpr_input.prev_vtocx;
	pvid = dmpr_input.pvid;
	start_time = dmpr_input.start_time;
	mod_after_time = dmpr_input.mod_after_time;
	volid = dmpr_input.volid;
	reset = dmpr_input.reset;
	no_update = dmpr_input.no_update;
	no_object = dmpr_input.no_object;
	retry = dmpr_input.retry;
	request = dmpr_input.request;
	request_vtocx = dmpr_input.request_vtocx;
						/* cross check all the input args */
	if (dmpr_input.version ^= dmpr_input_version_1 | backup_volume_record.version ^= backup_volume_record_version_2)
	     | (type ^= incr & type ^= cons & type ^= comp)
	     | (start_time = 0)
	     | (volid = "0"b)
	     | (pvid ^= pds$dmpr_pvid) then do;
	     a_code = error_table_$bad_arg;
	     return;
	end;

	call lock$lock_ast;				/* set dseg and pvt global lock */
	astl = "1"b;
	call get_ptrs_$given_segno (fixed (baseno (addr (backup_abs_seg$)), 18), astep); /* get astep */
	if astep ^= null () then call force_deactivate;	/* make it go away */

	call get_pvte;				/* find pvte */
	if code ^= 0 then do;
	     if astl then call lock$unlock_ast;
	     astl = "0"b;
	     a_code = code;
	     return;
	end;

	call get_pvtx$hold_pvtx (pds$dmpr_pvid, pds$dmpr_pvtx, code);
	if code ^= 0 then goto get_data_object_ret;
	pvtxh = "1"b;

	if astl then call lock$unlock_ast;
	astl = "0"b;


	if dmpr_input.Sfirst_pass_for_pv then do;
	     call check_for_inconsistent_dbm ();
	     dmpr_input.Sfirst_pass_for_pv = "0"b;
	end;

/* setup ptrs to and clear local copies */

	unspec (local_aste) = "0"b;
	tastep = addr (local_aste);
	unspec (local_dir) = "0"b;
	dp = addr (local_dir);
	vtocep = addr (local_vtoce);			/* set ptr to local copy */

select_vtoce:

	select_loop_cnt = select_loop_cnt + 1;
						/* if locks are set - unlock them */
	if astl then call lock$unlock_ast;
	astl = "0"b;
	if pardirl then call lock$dir_unlock_given_uid (parent_uid);
	pardirl = "0"b;
	if dirl then call lock$dir_unlock_given_uid (object_uid);
	dirl = "0"b;

/* find the next object to dump. if retry enable just make sure we wont go off the end */

	if type = comp | pvte.inconsistent_dbm then do;
	     if (request & select_loop_cnt > 1) then do;
		code = error_table_$action_not_performed;
		goto get_data_object_ret;
	     end;
	     if (prev_vtocx + 1 = pvte.n_vtoce)
		| (request & request_vtocx = pvte.n_vtoce) then do;
		pvte.curn_dmpr_vtocx (type) = -1;
		goto update_label;
	     end;
	     else do;
		if request then pvte.curn_dmpr_vtocx (type) = request_vtocx;
		else if ^retry then pvte.curn_dmpr_vtocx (type) = pvte.curn_dmpr_vtocx (type) + 1;
	     end;
	end;
	else if ^retry then do;
	     call dbm_man$get_next_vtocx (pds$dmpr_pvtx, prev_vtocx, type, reset, code);
	     if code ^= 0 then do;
		if code = error_table_$end_of_info then do;
update_label:	     call set_time;			/* dump all done so set label */
		     if code ^= 0 then call syserr$error_code (ANNOUNCE, code,
			     "hc_dmpr_primitives: Unable to set label time. PVID = ^w", pds$dmpr_pvid);
		     code = error_table_$end_of_info;
		end;
		goto get_data_object_ret;
	     end;
	end;

	begin;					/* Make a null VTOCE */
dcl  fm_nullifier char (256 * 2) aligned based;

	     unspec (local_vtoce) = ""b;
	     addr (local_vtoce.fm) -> fm_nullifier = high9 (256 * 2); /* Use a single MLR instruction */
	end;
						/* an mlr instruction */

/* read VTOCE - check for null vtoce and other degenerate cases */

	call vtoc_man$get_vtoce (pds$dmpr_pvid, pds$dmpr_pvtx, fixed (pvte.curn_dmpr_vtocx (type), 17), "111"b,
	     vtocep, code);
	if code ^= 0 then goto get_data_object_ret;
	if type = comp | pvte.inconsistent_dbm then
	     if vtoce.uid = "0"b			/* free vtoce */
		| vtoce.per_process
		| vtoce.deciduous then do;
		prev_vtocx = prev_vtocx + 1;
		goto select_vtoce;
	     end;
	dtd = substr (bit (fixed (clock (), 52), 52), 1, 36);
	if vtoce.deciduous | vtoce.per_process |
	     ((^vtoce.dirsw) & ((type ^= comp & ^pvte.inconsistent_dbm) & vtoce.nid)) then do;
	     vtoce.uid = "0"b;			/* treat as null vtoce */
	     goto get_data_object_ret;		/* dump as place holder */

	end;

	if vtoce.uid = "0"b then goto get_data_object_ret;

	object_uid = vtoce.uid;

	if vtoce.dirsw then do;			/* if object is a directory */
	     dir.uid = object_uid;
	     call lock$dir_lock_read (dp, (0));
	     dirl = "1"b;
	end;

	if vtoce.uid ^= (36)"1"b then do;		/* the root does not have a parent */
	     do parx = 0 to 15 while (vtoce.uid_path (parx) ^= "0"b);
	     end;

	     parx = parx - 1;
	     parent_uid,
		dir.uid = vtoce.uid_path (parx);

	     if parent_uid = "0"b then do;		/* VTOC BAD give up */
		vtoce.uid = "0"b;			/* treat it as a null vtoce */
		call syserr (LOG, "hc_dmpr_primitives: bad uid pathname detected at pvid ^w vtocx ^o",
		     pds$dmpr_pvid, fixed (pvte.curn_dmpr_vtocx (type), 17));
		goto get_data_object_ret;
	     end;

	     call lock$dir_lock_write (dp, (0));	/* Write to prevent activation of inferior */
	     pardirl = "1"b;
	end;


	call lock$lock_ast;
	astl = "1"b;

/* see if object already active - if so we don't have to activate it for ourselves */

	astep = search_ast$check ((vtoce.uid), pds$dmpr_pvid,
	     fixed (pvte.curn_dmpr_vtocx (type), 17), code); /* is our ship really in? */
	if code ^= 0 then goto get_data_object_ret;	/* double-uid */
	if astep ^= null then do;			/* its already active */
	     if aste.dius then do;
		code = error_table_$dmpr_in_use;
		goto get_data_object_ret;
	     end;

/* reread VTOCE under parent lock so tape copy and disk copy (if its updated) are correct */

	     call vtoc_man$get_vtoce (pds$dmpr_pvid, pds$dmpr_pvtx, fixed (pvte.curn_dmpr_vtocx (type), 17), "111"b,
		vtocep, code);
	     if code ^= 0 then goto get_data_object_ret;

	     if ((^vtoce.dirsw) & ((type = comp | pvte.inconsistent_dbm) & vtoce.ncd)) then do;
		prev_vtocx = prev_vtocx + 1;
		goto select_vtoce;
	     end;

/* update file map and part one header */

	     call pc$dumper_get_file_map (astep, tastep, addr (vtoce.fm), (0), null (), null ());

	     vtoce.uid = tastep -> aste.uid;
	     vtoce.msl = tastep -> aste.msl;
	     vtoce.csl = tastep -> aste.csl;
	     vtoce.records = tastep -> aste.records;
	     vtoce.dtu = tastep -> aste.dtu;
	     vtoce.dtm = tastep -> aste.dtm;
	     vtoce.nqsw = tastep -> aste.nqsw;
	     vtoce.deciduous = tastep -> aste.hc_sdw;
	     vtoce.synchronized = tastep -> aste.synchronized;
	     vtoce.per_process = tastep -> aste.per_process;
	     vtoce.dnzp = tastep -> aste.dnzp;
	     vtoce.gtpd = tastep -> aste.gtpd;
	     vtoce.nid = tastep -> aste.nid;
	     vtoce.dirsw = tastep -> aste.dirsw;

	     if vtoce.per_process | vtoce.deciduous |
		((^vtoce.dirsw) & (type ^= comp & vtoce.nid)) then do;
		if type = comp | pvte.inconsistent_dbm then do;
		     prev_vtocx = prev_vtocx + 1;
		     goto select_vtoce;
		end;
		else do;
		     vtoce.uid = "0"b;
		     goto get_data_object_ret;
		end;
	     end;

	     if tastep -> aste.dirsw then do;
		curtime = substr (bit (clock (), 52), 1, 36);
		vtoce.master_dir = tastep -> aste.master_dir;
		do i = 0, 1;
		     vtoce.used (i) = tastep -> aste.used (i);
		     if tastep -> aste.tqsw (i) then do;
			dt = fixed (curtime, 36) - fixed (vtoce.trp_time (i), 36);
			vtoce.trp (i) = vtoce.trp (i) + fixed (tastep -> aste.used (i) * dt * .65536e-1 + .5e0, 71);
			vtoce.trp_time (i) = curtime;
		     end;
		end;
	     end;

	     if ^no_update then do;			/* update vtoce desired */
		tvolid = vtoce.volid (type);		/* save value */
		vtoce.volid (type) = volid;		/* set volume id */
		valid_update = "1"b;
		tdtd = vtoce.dtd;			/* save  value */
		vtoce.dtd = dtd;			/* set dtd */
		call vtoc_man$put_vtoce (pds$dmpr_pvid, pds$dmpr_pvtx, fixed (pvte.curn_dmpr_vtocx (type), 17),
		     "001"b, vtocep, code);
		if code ^= 0 then goto get_data_object_ret;
	     end;

	end;

	else do;					/* not active now */

	     if astl then call lock$unlock_ast;
	     astl = "0"b;

/* Since not active the file maps are correct */


/* if not the same as the first read then something is out of synch. try again */

	     if (vtoce.uid ^= object_uid) |
		(vtoce.uid ^= (36)"1"b & vtoce.uid_path (parx) ^= parent_uid) then goto select_vtoce;

	     if ((^vtoce.dirsw) & ((type = comp | pvte.inconsistent_dbm) & vtoce.ncd)) then do;
		prev_vtocx = prev_vtocx + 1;
		goto select_vtoce;
	     end;

	     if vtoce.per_process | vtoce.deciduous |
		((^vtoce.dirsw) & (type ^= comp & vtoce.nid)) then do;
		if type = comp | pvte.inconsistent_dbm then do;
		     prev_vtocx = prev_vtocx + 1;
		     goto select_vtoce;
		end;
		else do;
		     vtoce.uid = "0"b;
		     goto get_data_object_ret;
		end;
	     end;


	     if ^no_update then do;			/* update vtoce desired */
		tvolid = vtoce.volid (type);		/* save value */
		vtoce.volid (type) = volid;		/* set volume id */
		valid_update = "1"b;
		tdtd = vtoce.dtd;			/* save  value */
		vtoce.dtd = dtd;			/* set dtd */
		call vtoc_man$put_vtoce (pds$dmpr_pvid, pds$dmpr_pvtx, fixed (pvte.curn_dmpr_vtocx (type), 17),
		     "001"b, vtocep, code);
		if code ^= 0 then goto get_data_object_ret;
	     end;
						/* lock ast and make object active */

	     astep = activate$backup_activate (vtocep, fixed (pvte.curn_dmpr_vtocx (type), 17), pds$dmpr_pvtx, code);
	     if code ^= 0 then goto get_data_object_ret;
	     astl = "1"b;
	end;

	if mod_after_time ^= 0 & type = comp then
	     if fixed (bit (aste.dtm, 52), 52) < mod_after_time then do; /* do not dump */
		call force_deactivate;
		prev_vtocx = prev_vtocx + 1;
		goto select_vtoce;
	     end;

	if pvte.inconsistent_dbm then do;
	     skip = "0"b;
	     last_modified = fixed (bit (aste.dtm, 52), 52);
	     call dbm_man$set (pds$dmpr_pvtx,
		fixed (pvte.curn_dmpr_vtocx (type), 17), incr, "0"b);

	     if type = incr then do;
		if last_modified < dmpr_input.last_incr_dump_time then
		     skip = "1"b;
		if last_modified < dmpr_input.last_cons_dump_time then
		     call dbm_man$set (pds$dmpr_pvtx,
			fixed (pvte.curn_dmpr_vtocx (type), 17), cons, "0"b);
		else
		     call dbm_man$set (pds$dmpr_pvtx,
			fixed (pvte.curn_dmpr_vtocx (type), 17), cons, "1"b);
	     end;
	     else do;
		call dbm_man$set (pds$dmpr_pvtx,
		     fixed (pvte.curn_dmpr_vtocx (type), 17), cons, "0"b);
		if type = cons then do;
		     if last_modified < dmpr_input.last_cons_dump_time then
			skip = "1"b;
		end;
	     end;

	     if skip then do;
		call force_deactivate;
		prev_vtocx = prev_vtocx + 1;
		goto select_vtoce;
	     end;
	end;

	call make_trailer;				/* put dumper on trailer */

	tsdw = get_ptrs_$given_astep (astep);		/* get the sdw */
	call sdw_util_$dissect (addr (tsdw), addr (sdwi));/* Dissect it, for modification */

	if vtoce.dirsw then
	     read_ring = 0;
	else read_ring = level$get ();		/* readable in the outer ring */
	sdwi.r2 = bit (binary (read_ring, 3), 3);
	sdwi.r3 = bit (binary (read_ring, 3), 3);
	sdwi.write = "0"b;				/* Read access only */
	call sdw_util_$construct (addr (tsdw), addr (sdwi)); /* And put it back together */

	call pmut$swap_sdw (addr (backup_abs_seg$), addr (tsdw)); /* put constructed sdw in dseg */
	if ^no_object then do;			/* want object also */

	     if ^vtoce.dirsw then do;			/* pre-page segs */
		if fixed (vtoce.records, 9) ^= 0
		     & fixed (vtoce.records, 9) = fixed (vtoce.csl, 9) then do;
		     last_page_index = fixed (vtoce.csl, 9) - 1;
		     if ^substr (vtoce.fm (last_page_index), 1, 1) then call pc_wired$read (astep, last_page_index, 1);
		end;
		do i = 0 to fixed (vtoce.csl, 9) - 1 while (i < 16); /* pre-page for efficiency */
		     if ^substr (vtoce.fm (i), 1, 1) then call pc_wired$read (astep, i, 1);
		end;
	     end;
	     else do;				/* treat dirs diferantly */
		aste.ehs = "1"b;			/* make sure aste doesnt go away */
		if astl then call lock$unlock_ast;
		astl = "0"b;

		if pardirl then call lock$dir_unlock_given_uid (parent_uid);
		pardirl = "0"b;

		csl = fixed (vtoce.csl, 9);
		if csl = fixed (vtoce.records, 9) then do;
		     nwords = csl * 1024;
		     pds$dmpr_copy_dirsegp -> copy = addr (backup_abs_seg$) -> copy;
		end;
		else do;
		     do i = 0 to csl - 1;
			if ^substr (vtoce.fm (i), 1, 1) then
			     ptr (pds$dmpr_copy_dirsegp, i * 1024) -> page =
				ptr (addr (backup_abs_seg$), i * 1024) -> page;
		     end;
		end;
		aste.ehs = "0"b;			/* now it can */
		if dirl then call lock$dir_unlock_given_uid (object_uid);
		dirl = "0"b;
	     end;
	end;
get_data_object_ret:
	if astl then call lock$unlock_ast;		/* turn global lock off */
	if pardirl then call lock$dir_unlock_given_uid (parent_uid);
	if dirl then call lock$dir_unlock_given_uid (object_uid);
	if pvtxh then call get_pvtx$release_pvtx (pds$dmpr_pvid, pds$dmpr_pvtx);
	if ^no_update & valid_update then do;
	     vtoce.dtd = tdtd;			/* reset pre-update values */
	     vtoce.volid (type) = tvolid;
	end;

	backup_volume_record.vtocx = pvte.curn_dmpr_vtocx (type); /* return args */
	backup_volume_record.time_dumped = dtd;
	backup_volume_record.pvid = pds$dmpr_pvid;
	local_vtoce.fm_checksum_valid = "0"b;
	backup_volume_record.vtoce = local_vtoce;
	a_code = code;
	return;
%page;
release_dmpr_aste: entry (a_type, a_code);

	code = 0;
	type = a_type;				/* copy args */
	call lock$lock_ast;				/* lock global lock */
	call get_ptrs_$given_segno (fixed (baseno (addr (backup_abs_seg$)), 18), astep); /* get astep */
	if astep = null then do;			/* the harder way */
	     call get_pvte;
	     vtocep = addr (local_vtoce);
	     call vtoc_man$get_vtoce (pds$dmpr_pvid, pds$dmpr_pvtx, fixed (pvte.curn_dmpr_vtocx (type), 17),
		"111"b, vtocep, code);
	     if code ^= 0 then goto release_dmpr_aste_ret;
	     astep = search_ast$check ((vtoce.uid), pds$dmpr_pvid,
		fixed (pvte.curn_dmpr_vtocx (type), 17), code); /* find aste */
	     if code ^= 0 then goto release_dmpr_aste_ret;
	end;

	if astep ^= null () then call force_deactivate;
release_dmpr_aste_ret:
	call lock$unlock_ast;
	a_code = code;
	return;
%page;
revert_dmpr: entry (a_code);

	code = 0;					/* set default return value */
	if pds$dmpr_copy_dirsegp = null then do;	/* can't revert what was not set */
	     a_code = error_table_$bad_arg;
	     return;
	end;
	call lock$lock_ast;
	call get_ptrs_$given_segno (fixed (baseno (pds$dmpr_copy_dirsegp), 18), astep);
	if astep ^= null () then
	     aste.ehs = "0"b;
	call get_ptrs_$given_segno (fixed (baseno (addr (backup_abs_seg$)), 18), astep); /* get astep */
	if astep ^= null () then call force_deactivate;	/* make it go away */
	call lock$unlock_ast;
	call quota_util$restore_quota;
	pds$dmpr_pvid = "0"b;			/* reset  the world */
	pds$dmpr_pvtx = 0;
	pds$dmpr_copy_dirsegp = null;
	a_code = code;				/* all done */
	return;
%page;
check_for_inconsistent_dbm: proc;

	if ^pvte.inconsistent_dbm then
	     return;

	labelp = addr (local_label);
	call lock$wait (addr (lock_word), lock_id, code);
	if code ^= 0 then return;
	call read_disk (pds$dmpr_pvtx, LABEL_ADDR, labelp, code);
	if code = 0 then do;
	     dmpr_input.last_incr_dump_time = label.time_last_dmp (1);
	     dmpr_input.last_cons_dump_time = label.time_last_dmp (2);
	end;

	call lock$unlock (addr (lock_word), lock_id);
	return;
     end check_for_inconsistent_dbm;


make_trailer: proc;

	if rel (sst$tfreep) = "0"b			/* set up trailer */
	then call syserr (CRASH, "hc_dmpr_primitives: trailer storage area exhausted");
	strep = sst$tfreep;				/* Get pointer to first free trailer */
	sst$tfreep = ptr (strep, strep -> str.fp);	/* reset free ptr */
	strep -> str.segno = bit (fixed (baseno (addr (backup_abs_seg$)), 18)); /* Fill in the new trailer */
	strep -> str.dstep = pds$dstep;		/* ditto */
	strep -> str.fp, strep -> str.bp = "0"b;	/* ditto */
	call thread$lin (strep, astep -> aste.strp);	/* Thread the new trailer in */
	astep -> aste.dius = "1"b;			/* Now it's ours */

     end make_trailer;
%page;
force_deactivate: proc;


	if aste.strp ^= ""b then			/* if any trailers exist, process */
	     if aste.dius then
		call setfaults$deltrailer (astep, fixed (baseno (addr (backup_abs_seg$)), 18), fixed (pds$dstep, 18)); /* release trailer */

	if aste.par_astep = "0"b & aste.uid ^= (36)"1"b then do; /* dumper is only user */
	     call pc$cleanup (astep);			/* get rid of all the pages */
	     call search_ast$hash_out (astep);		/* clean out hash table */
	     call put_aste (astep);			/* and the aste */
	     sst$deact_count = sst$deact_count + 1;	/* Meter */
	end;

	else aste.dius = "0"b;			/* user is using but we are done */

	tsdw = 0;					/* reset the special sdw */
	call pmut$swap_sdw (addr (backup_abs_seg$), addr (tsdw)); /* swap in zero sdw */
	return;
     end force_deactivate;
%page;
get_pvte: proc;

	code = 0;
	pvtep = addr (addr (pvt$array) -> pvt_array (pds$dmpr_pvtx)); /* get ptr to pvte */
	if pvte.pvid ^= pds$dmpr_pvid then do;		/* has it been demounted */
	     pvtx = get_pvtx (pds$dmpr_pvid, code);	/* maybe it moved */
	     if code ^= 0 then return;
	     pds$dmpr_pvtx = pvtx;			/* reset */
	end;
	return;
     end get_pvte;
%page;
set_time: proc;

	labelp = addr (local_label);
	call lock$wait (addr (lock_word), lock_id, code);
	if code ^= 0 then return;
	call read_disk (pds$dmpr_pvtx, LABEL_ADDR, labelp, code); /* read label */
	if code = 0 then do;
	     label.time_last_dmp (type) = start_time;	/* update label */
	     pvte.inconsistent_dbm, label.inconsistent_dbm = "0"b;
	     call write_disk (pds$dmpr_pvtx, LABEL_ADDR, labelp, code); /* write label */
	     pvte.dmpr_in_use (type) = "0"b;		/* all done with this volume */
	     pvte.curn_dmpr_vtocx (type) = -1;		/* ditto */
	end;
	call lock$unlock (addr (lock_word), lock_id);
	return;
     end set_time;
%page;
set_info: proc;

	labelp = addr (local_label);
	call read_disk (pds$dmpr_pvtx, LABEL_ADDR, labelp, code);
	if code ^= 0 then return;
	backup_pvol_info.label = label;

	backup_pvol_info.n_vtoce = pvte.n_vtoce;
	backup_pvol_info.n_free_vtoce = pvte.n_free_vtoce;
	backup_pvol_info.n_rec = pvte.totrec;
	backup_pvol_info.baseadd = pvte.volmap_stock_ptr -> record_stock.volmap_page (1).baseadd + 64 * 32;
	backup_pvol_info.n_free_rec = pvte.nleft;

     end set_info;
%page;

dcl  a_copy_dirsegp ptr;				/* ptr to segment used to copy directories */
dcl  a_infop ptr;					/* ptr to storage for info about physical volume */
dcl  a_dmpr_absegp ptr;				/* ptr to perprocess abs seg */
dcl  a_code fixed bin (35);				/* error code */
dcl  a_pvid bit (36) aligned;				/* physical volume id */
dcl  a_type fixed bin;				/* type of dump */
dcl  a_window fixed bin;				/* count of windows  used to scan vtoc */
dcl  a_vbmp ptr;					/* ptr to vtoc bit map */
dcl  a_inputp ptr;					/* ptr to input structure */
dcl  a_recordp ptr;					/* ptr to output structure */

dcl  copy_dirsegp ptr;				/* local copy of parameter */
dcl  select_loop_cnt fixed bin;			/* count of times in select_loop */
dcl  read_ring fixed bin;				/* ring that dumper's sdw will allow reading in */
dcl  dev_vtoc_words fixed bin;			/* words per vtoc in a page */
dcl  dtd bit (36) aligned;
dcl  curtime bit (36) aligned;			/* the current time */
dcl  dt fixed bin (35);				/* delta time */
dcl  pvtxh bit (1) aligned;				/* indicates if pvte held */
dcl  astl bit (1) aligned;				/* indicates if ast locked */
dcl  dirl bit (1) aligned;				/* indicates if dir is locked */
dcl  pardirl bit (1) aligned;				/* indicates if parent dir is locked */
dcl  parx fixed bin;				/* index of parent uid in pathname array */
dcl  tastep ptr;					/* ptr to local copy of aste */
dcl  parent_uid bit (36) aligned;			/* as stated */
dcl  object_uid bit (36) aligned;			/* ditto */
dcl  lock bit (1) aligned;				/* entry indicator and lock value */
dcl  skip bit (1) aligned;
dcl  strep ptr;					/* ptr to trailer entry */
dcl  code fixed bin (35);				/* error code */
dcl  last_page_index fixed bin;
dcl  vbmp ptr;					/* local copy of parameter */
dcl  window fixed bin;				/* local copy of parameter */
dcl  j fixed bin;					/* loop control variable */
dcl  pagep ptr;					/* ptr to page of vtoc scanning seg */
dcl  valid_update bit (1) aligned;			/* on if update variables are set */
dcl  pvid bit (36) aligned;				/* physical volume id */
dcl  prev_vtocx fixed bin;				/* value of vtocx of seg just dumped */
dcl  request_vtocx fixed bin;				/* vtocx to be dumped if request mode enabled  */
dcl  type fixed bin;				/* dump type */
dcl  pvtx fixed bin;				/* pvt index */
dcl  vtocx fixed bin;				/* vtoc index */
dcl  retry bit (1) aligned;				/* local copy of parameter */
dcl  request bit (1) aligned;				/* local copy of parameter */
dcl  csl fixed bin;					/* cur seg length */
dcl  volid bit (36) aligned;				/* id of volume onto which object dumped will be written */
dcl  start_time fixed bin (71);			/* starting time of this dump cycle */
dcl  mod_after_time fixed bin (71);			/* time to check dtm against */
dcl  last_modified fixed bin (71);			/* last time the vtoce was modified */
dcl  reset bit (1) aligned;				/* on if forced reseting desired */
dcl  n_vtoce_per_page fixed bin;			/* vtoce entries per page */
dcl  no_object bit (1) aligned;			/* on if no data object is to be dumped */
dcl  no_update bit (1) aligned;			/* on if no update of vtoce desired (dtd and volid) */
dcl  i fixed bin;					/* loop control variable */
dcl  nwords fixed bin;				/* number of words of directory to copy */
dcl  tsdw fixed bin (71);				/* tempory sdw */
dcl  tdtd bit (36) aligned;				/* temp copy of dtd */
dcl  tvolid bit (36) aligned;				/* temp copy of volid */

dcl  ptp pointer;
dcl  1 sdwi aligned like sdw_info automatic;		/* For modifying our temporary SDW */

dcl  page (1024) bit (36) aligned based;
dcl  copy (nwords) fixed bin based;			/* array used to copy directory into dumper segment */
dcl  vtoc_bit_map (0:36719) bit (1) unaligned based (vbmp);

dcl  1 local_vtoce like vtoce aligned;			/* local copy of vtoce */
dcl  1 local_aste like aste aligned;
dcl  1 local_dir like dir aligned;
dcl  1 local_label like label aligned;			/* local copy of disk label */

dcl  error_table_$bad_arg fixed bin (35) external;
dcl  error_table_$action_not_performed fixed bin (35) external;
dcl  error_table_$dmpr_in_use ext fixed bin (35);
dcl  error_table_$end_of_info ext fixed bin (35);
dcl  error_table_$vol_in_use fixed bin (35) external;
dcl  error_table_$vtoc_io_err fixed bin (35) external;
dcl  backup_abs_seg$ ext;
dcl  pds$dmpr_pvid bit (36) aligned external;
dcl  pds$dstep ext bit (18);
dcl  pds$dmpr_pvtx fixed bin external;
dcl  pds$dmpr_copy_dirsegp external ptr;
dcl  sst$astsize fixed bin external;
dcl  sst$deact_count fixed bin external;
dcl  1 sst$level (0:3) aligned external,
       2 ausedp bit (18) unaligned,
       2 no_aste bit (18) unaligned;
dcl  sst$tfreep ptr external;
dcl  sys_info$default_dir_max_length fixed bin (19) external;

dcl  max_pages_per_segment fixed bin static init (255) options (constant); /* max pages per segment */
dcl  lock_word bit (36) int static init ("0"b);		/* interlock for label update */
dcl  lock_id char (4) aligned int static init ("dmpr") options (constant); /* id to wait on */

dcl  quota_util$suspend_quota entry;
dcl  quota_util$restore_quota entry;
dcl  pmut$swap_sdw entry (ptr, ptr);
dcl  ptw_util_$make_disk entry (pointer, fixed bin (20));
dcl  sdw_util_$dissect entry (pointer, pointer);
dcl  sdw_util_$construct entry (pointer, pointer);
dcl  dbm_man$update_map_from_ast entry (ptr, fixed bin);
dcl  dbm_man$get_next_vtocx entry (fixed bin, fixed bin, fixed bin, bit (1) aligned, fixed bin (35));
dcl  dbm_man$set entry (fixed bin, fixed bin, fixed bin, bit (1) aligned);

dcl  (addr, addrel, baseno, binary, bit, clock, fixed, high9, null, ptr, rel, substr, unspec) builtin;
dcl  get_aste entry (fixed bin) returns (ptr);
dcl  get_ptrs_$given_segno entry (fixed bin, ptr);
dcl  get_ptrs_$given_astep entry (ptr) returns (fixed bin (71));
dcl  activate$backup_activate entry (ptr, fixed bin, fixed bin, fixed bin (35)) returns (ptr);
dcl  get_pvtx entry (bit (36) aligned, fixed bin (35)) returns (fixed bin (17));
dcl  get_pvtx$hold_pvtx entry (bit (36) aligned, fixed bin, fixed bin (35));
dcl  get_pvtx$release_pvtx entry (bit (36) aligned, fixed bin);
dcl  vtoc_man$get_vtoce entry (bit (36) aligned, fixed bin, fixed bin, bit (3), ptr, fixed bin (35));
dcl  vtoc_man$put_vtoce entry (bit (36) aligned, fixed bin, fixed bin, bit (3), ptr, fixed bin (35));
dcl  lock$wait entry (ptr, char (4) aligned, fixed bin (35));
dcl  lock$unlock entry (ptr, char (4) aligned);
dcl  lock$lock_ast entry;
dcl  lock$unlock_ast entry;
dcl  read_disk entry (fixed bin, fixed bin, ptr, fixed bin (35));
dcl  write_disk entry (fixed bin, fixed bin, ptr, fixed bin (35));
dcl  lock$dir_lock_read entry (ptr, fixed bin (35));
dcl  lock$dir_lock_write entry (ptr, fixed bin (35));
dcl  lock$dir_unlock_given_uid entry (bit (36) aligned);
dcl  pc$dumper_get_file_map entry (ptr, ptr, ptr, fixed bin, ptr, ptr);
dcl  pc$cleanup entry (ptr);
dcl  search_ast$hash_out entry (ptr);
dcl  put_aste entry (ptr);
dcl  search_ast$check entry (bit (36) aligned, bit (36) aligned, fixed bin, fixed bin (35)) returns (ptr);
dcl  thread$lin entry (ptr, bit (18));
dcl  pc_wired$read entry (ptr, fixed bin, fixed bin);
dcl  syserr entry options (variable);
dcl  syserr$error_code entry options (variable);
dcl  setfaults$deltrailer entry (ptr, fixed bin, fixed bin (18));
dcl  level$get entry returns (fixed bin);
dcl  thread$out entry (ptr, bit (18));
dcl  grab_aste entry (ptr, fixed bin, fixed bin (35), ptr);

dcl  page_fault_error condition;

/* format: off */

%page; %include aste;
%page; %include backup_pvol_info;
%page; %include backup_static_variables;
%page; %include backup_volume_header;
%page; %include backup_volume_record;
%page; %include dir_header;
%page; %include disk_pack;
%page; %include dmpr_input;
%page; %include fs_vol_label;
%page; %include fs_dev_types_sector;
%page; %include pvte;
%page; %include sdw_info;
%page; %include stock_seg;
%page; %include str;
%page; %include syserr_constants;
%page; %include vtoce;
%page;
/* format: on */

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   hc_dmpr_primitives: Unable to set label time. PVID = wwwwwwwwwwww

   S:	$info

   T:	$run

   M:	A disk error prevented the updating of the time-last-dumped field in the volume label.
   The physical volume identifier is wwwwwwwwwwww.

   A:	$inform


   Message:
   hc_dmpr_primitives: bad uid pathname detected at pvid WWWW vtocx XXXX

   S:	$log

   T:	$run

   M:	Part 3 of the indicated VTOCE is bad.
   The dumper will treat the vtoce as a null vtoce and continue.

   A:	$ignore


   Message:
   hc_dmpr_primitives: trailer storage area exhausted

   S:	$crash

   T:	$run

   M:	$err

   A:	$recover


   END MESSAGE DOCUMENTATION */

     end hc_dmpr_primitives;
