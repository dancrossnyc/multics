/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style1,ind5,^inddcls,ifthenstmt,dclind2,declareind2,ifthendo,ifthen*/

retv_copy: proc (a_dirname, a_ename, a_auth, a_userid, a_level, a_vtocep, a_objectp, a_attributes, a_code);

/* This routine provides a controlled method of copying data from a temp orary buffer
   in an outer ring either into an existant or non-existant object, regardless of whether that object is
   a segment or a directory */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* Status:								*/
/* 0) Created by Dave Vinograd in the distant past.				*/
/* 1) Modified: 8/18/82 by GA Texada to fix phx13506				*/
/* 2) Modified: 8/08/83 by E. N. Kittlitz for setfaults$if_active pvid, vtocx args	*/
/* 3) Modified: 7/6/84 by Keith Loepere to use the new dc_find.			*/
/* 4) Modified: 10/15/84 by Keith Loepere to explicitly activate dir on makeknown_,	*/
/*		also for auditing info.					*/
/* 5) Modified: 12/13/84 by Keith Loepere to reload dir quota also.			*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/* Parameters */

dcl a_attributes	     bit (36);
dcl a_auth	     bit (72) aligned;
dcl a_code	     fixed bin (35);
dcl a_dirname	     char (*) aligned;
dcl a_ename	     char (*) aligned;
dcl a_level	     fixed bin;
dcl a_objectp	     ptr;
dcl a_userid	     char (*) aligned;
dcl a_vtocep	     ptr;

/* Variables */

dcl attributes	     bit (36);
dcl code		     fixed bin (35);
dcl del_code	     fixed bin (35);
dcl del_ename	     char (32);
dcl del_pname	     char (168);
dcl dir_pvid	     bit (36) aligned;
dcl dir_uid	     bit (36) aligned;
dcl dir_vtocx	     fixed bin;
dcl dirl		     bit (1) aligned;
dcl dirname	     char (168);
dcl dirsw		     bit (1);
dcl ec		     fixed bin (35);
dcl ename		     char (32);
dcl found		     bit (1);
dcl hold		     bit (1);
dcl i		     fixed bin;
dcl ignore	     fixed bin (35);
dcl inf_received	     (0:1) fixed bin (18);
dcl 1 input_vtoce	     like vtoce aligned;
dcl 1 local_audit_user_info like audit_user_info aligned;
dcl 1 local_dir_header   like dir aligned;
dcl 1 local_makeknown_info like makeknown_info aligned;
dcl 1 local_quota_cell   like quota_cell aligned;
dcl 1 local_vtoce	     like vtoce aligned;
dcl mismatch	     bit (1);
dcl ncd		     fixed bin;
dcl new_ep	     ptr;
dcl new_vtoce	     bit (1);
dcl nid		     fixed bin;
dcl objectp	     ptr;
dcl old_ep	     ptr;
dcl old_uid	     bit (36) aligned;
dcl par_ep	     ptr;
dcl par_pvid	     bit (36) aligned;
dcl par_quota	     (0:1) fixed bin (18);
dcl par_received	     (0:1) fixed bin (18);
dcl par_uid	     bit (36) aligned;
dcl par_vtocx	     fixed bin;
dcl pardirl	     bit (1) aligned;
dcl pvid		     bit (36) aligned;
dcl pvtx		     fixed bin;
dcl quota_type	     fixed bin;
dcl segno		     fixed bin;
dcl segptr	     ptr;
dcl skip_list	     (1500) bit (36) aligned;
dcl skip_list_cnt	     fixed bin init (0);
dcl skip_list_idx	     fixed bin;
dcl target_dirl	     bit (1);
dcl target_dp	     ptr;
dcl 1 temp_quota_cell    like quota_cell aligned;
dcl uid		     bit (36) aligned;
dcl vtocx		     fixed bin;

/* Based */

dcl dates_set	     defined attributes position (1) bit (1);
dcl dump_info_set	     defined attributes position (3) bit (1);
dcl dump_switches_set    defined attributes position (2) bit (1);
dcl page		     (512) bit (72) aligned based;
dcl pc_switches_set	     defined attributes position (4) bit (1);
dcl quota_set	     defined attributes position (5) bit (1);

/* External */

dcl error_table_$action_not_performed ext fixed bin (35);
dcl error_table_$argerr  ext fixed bin (35);
dcl error_table_$fulldir ext fixed bin (35);
dcl error_table_$invalidsegno ext fixed bin (35);
dcl error_table_$segknown ext fixed bin (35);
dcl error_table_$vtoce_connection_fail ext fixed bin (35);
dcl sys_info$max_seg_size ext fixed bin;

/* Entries */

dcl create_vtoce	     entry (ptr, bit (36) aligned, fixed bin, fixed bin (35));
dcl del_dir_tree$retv    entry (char (*), char (*), fixed bin (35));
dcl delentry$retv	     entry (char (*), char (*), fixed bin (35));
dcl get_kstep	     entry (fixed bin, ptr, fixed bin (35));
dcl get_pvtx	     entry (bit (36) aligned, fixed bin (35)) returns (fixed bin);
dcl get_pvtx$release_pvtx entry (bit (36) aligned, fixed bin);
dcl grab_aste	     entry (ptr, fixed bin, fixed bin (35), ptr);
dcl lock$dir_lock_read   entry (ptr, fixed bin (35));
dcl lock$dir_unlock	     entry (ptr);
dcl makeknown_	     entry (ptr, fixed bin, fixed bin, fixed bin (35));
dcl makeunknown_	     entry (fixed bin, bit (36) aligned, bit (1) aligned, fixed bin (35));
dcl mountedp	     entry (bit (36) aligned) returns (fixed bin (35));
dcl setfaults$disconnect entry (fixed bin);
dcl setfaults$if_active  entry (bit (36) aligned, bit (36) aligned, fixed bin, bit (1));
dcl sum$getbranch	     entry (ptr, bit (36), ptr, fixed bin (35));
dcl syserr$error_code    entry options (variable);
dcl truncate_vtoce$hold  entry (ptr, fixed bin, fixed bin (35));
dcl vtoc_attributes$get_quota entry (bit (36) aligned, bit (36) aligned, fixed bin, ptr, fixed bin, fixed bin (35));
dcl vtoc_attributes$set_dates entry (bit (36) aligned, bit (36) aligned, fixed bin, bit (36), bit (36), fixed bin (35));
dcl vtoc_attributes$set_dump_info entry (bit (36) aligned, bit (36) aligned, fixed bin, bit (36), (3) bit (36),
		     fixed bin (35));
dcl vtoc_attributes$set_dump_switches entry (bit (36) aligned, bit (36) aligned, fixed bin, fixed bin, fixed bin,
		     fixed bin (35));
dcl vtoc_attributes$set_max_lth entry (bit (36) aligned, bit (36) aligned, fixed bin, fixed bin (9), bit (1),
		     fixed bin (35));
dcl vtoc_attributes$set_pc_switches entry (bit (36) aligned, bit (36) aligned, fixed bin, bit (36), bit (36),
		     fixed bin (35));
dcl vtoc_attributes$set_quota entry (bit (36) aligned, bit (36) aligned, fixed bin, ptr, fixed bin, fixed bin (35));
dcl vtoc_man$get_vtoce   entry (bit (36) aligned, fixed bin, fixed bin, bit (3), ptr, fixed bin (35));

/* Misc */

dcl bad_dir_	     condition;
dcl cleanup	     condition;

dcl (addr, baseptr, fixed, null, ptr, rel, rtrim, substr, unspec) builtin;
%page;
	audit_user_info_ptr = addr (local_audit_user_info);
	unspec (audit_user_info) = "0"b;

/* copy input args */
	dirname = a_dirname;
	ename = a_ename;
	objectp = a_objectp;
	audit_user_info.version = audit_user_info_version_1;
	audit_user_info.user_id = a_userid;
	audit_user_info.ring = a_level;
	audit_user_info.process_id = "0"b;		/* may not be logged on */
	audit_user_info.authorization_range(2),		/* use auth as max_auth until we can get real max_auth */
	     audit_user_info.authorization = a_auth;
	audit_user_info.audit_flags = (36)"1"b;		/* audit anything until we can get the real audit flags */
	input_vtoce = a_vtocep -> vtoce;
						/* initialize control variables */
	target_dirl, dirl, pardirl, hold, new_vtoce = "0"b;
	attributes = "0"b;
	code = 0;
	segno = -1;
	astep, dp, kstep = null;
						/* be prepared for vtoce connection failures */
	on cleanup begin;
		code = error_table_$action_not_performed;
		if kstep ^= null then call revert_kst_access;
		goto fin;
	     end;

/* If the object to be copied is a directory then lock it, even though it may not exist. */

	if input_vtoce.dirsw then do;
		unspec (local_dir_header) = "0"b;
		target_dp = addr (local_dir_header);
		local_dir_header.uid = input_vtoce.uid;
		call lock$dir_lock_read (target_dp, code);
		if code ^= 0 then goto fin;
		target_dirl = "1"b;
	     end;

/* set aste.ehs on outer ring buffer so we will not segfault while dir is locked */

	call grab_aste (objectp, sys_info$max_seg_size, code, astep);
	if code ^= 0 then goto fin;
						/* locate entry */
	call dc_find$obj_volume_retrieve (dirname, ename, audit_user_info_ptr, ep, code);
	if code ^= 0 then goto fin;
	dp = ptr (ep, 0);
	dirl = "1"b;
						/* check if object and entry match */
	if entry.uid ^= input_vtoce.uid then do;
		code = error_table_$vtoce_connection_fail;
		goto fin;
	     end;
						/* links don't have objects */
	if ^entry.bs then do;
		code = error_table_$action_not_performed;
		goto fin;
	     end;
	if ^entry.dirsw then do;			/* ensure that the logical volume is mounted	*/
		code = mountedp (dir.sons_lvid);	/* before we truncate the target vtoce.		*/
		if code ^= 0 then goto fin;		/* Thank you Steve Harris			*/
	     end;

	if entry.dirsw then do;			/* Get some quota info and save it. */
		call sum$getbranch (dp, "0"b, par_ep, code);
		if code ^= 0 then goto fin;
		pardirl = "1"b;

		par_uid = par_ep -> entry.uid;
		par_vtocx = par_ep -> entry.vtocx;
		par_pvid = par_ep -> entry.pvid;
		qcp = addr (local_quota_cell);
		do quota_type = 0 to 1;
		     call vtoc_attributes$get_quota (par_uid, par_pvid, par_vtocx, qcp, quota_type, code);
		     if code ^= 0 then goto fin;
		     par_received (quota_type) = quota_cell.received;
		     par_quota (quota_type) = quota_cell.quota;
		end;
						/* all done with parent so unlock */
		call lock$dir_unlock (ptr (par_ep, 0));
		pardirl = "0"b;
	     end;

/* Check to see if entry has vtoce. If not create a new one and set a flag */

	pvid = entry.pvid;
	uid = entry.uid;
	pvtx = get_pvtx (pvid, code);
	if code ^= 0 then goto fin;
	vtocx = entry.vtocx;
	vtocep = addr (local_vtoce);
	call vtoc_man$get_vtoce (pvid, pvtx, vtocx, "100"b, vtocep, code);
	if code ^= 0 then goto fin;
	if entry.uid ^= vtoce.uid then do;		/* no vtoce */
		call create_vtoce (ep, pvid, vtocx, code);
		if code ^= 0 then goto fin;
		entry.vtocx = vtocx;
		entry.pvid = pvid;
		pvtx = get_pvtx (pvid, code);
		if code ^= 0 then goto fin;
		new_vtoce = "1"b;
	     end;
						/* Make the entry known */
	makeknown_infop = addr (local_makeknown_info);
	makeknown_info.uid = uid;
	makeknown_info.entryp = ep;
	makeknown_info.activate, makeknown_info.dirsw = entry.dirsw;
	makeknown_info.rsw = "0"b;
	makeknown_info.allow_write = "1"b;
	makeknown_info.priv_init = "1"b;
	makeknown_info.audit = "0"b;
	call makeknown_ (makeknown_infop, segno, (0), code);
	if code ^= 0 then do;
		if code = error_table_$segknown then code = 0;
		else goto fin;
	     end;
						/* Fudge access in KST entry */
	call force_kst_access;
	if code ^= 0 then goto fin;
	segptr = baseptr (segno);

/* If the old object exists and it's a dir then there may entries in it that are in the newer copy.
   If so then they should be preserved, not lost. Simiarly if the old directory has entries that the new
   copy does not then they should be deleted.  */

	mismatch = "1"b;
	if ^new_vtoce & entry.dirsw then
	     do while (mismatch);
		call reset_new_dir;
		if code ^= 0 then goto fin;
	     end;
						/* Truncate the object but hold the pvol its on */
	call truncate_vtoce$hold (ep, 0, code);
	if code ^= 0 then goto fin;
	hold = "1"b;
						/* Set the max length prior to the copy */
	call vtoc_attributes$set_max_lth (uid, pvid, vtocx, fixed (input_vtoce.msl, 9), "1"b, code);
	if code ^= 0 then goto fin;
						/* Copy each non null page from the buffer */
	do i = 0 to fixed (input_vtoce.csl, 9) - 1;
	     if substr (input_vtoce.fm (i), 1, 1) = "0"b then
		ptr (segptr, i * 1024) -> page = ptr (objectp, i * 1024) -> page;
	end;
						/* Reset dir header */
	if entry.dirsw then do;
		segptr -> dir.pvid = pvid;
		segptr -> dir.vtocx = vtocx;
	     end;
						/* cleanup */
	call revert_kst_access;
	call makeunknown_ (segno, "0"b, ("0"b), ignore);
						/* reset dates from input vtoce */
	call vtoc_attributes$set_dates (uid, pvid, vtocx, input_vtoce.dtu, input_vtoce.dtm, ec);
	dates_set = (ec ^= 0);
						/* reset dump control switches from input vtoce */
	if input_vtoce.nid = "1"b then nid = 1; else nid = -1;
	if input_vtoce.ncd = "1"b then ncd = 1; else ncd = -1;
	call vtoc_attributes$set_dump_switches (uid, pvid, vtocx, nid, ncd, ec);
	dump_switches_set = (ec ^= 0);
						/* and dump info */
	call vtoc_attributes$set_dump_info (uid, pvid, vtocx, input_vtoce.dtd, input_vtoce.volid, ec);
	dump_info_set = (ec ^= 0);
						/* and pc control switches */
	call vtoc_attributes$set_pc_switches (uid, pvid, vtocx, input_vtoce.dnzp || input_vtoce.gtpd, "11"b, ec);
	pc_switches_set = (ec ^= 0);

/* Now we check if the directory being copied will
   create  new quota. If its a new vtoce we first reset the quota info from the input vtoce, otherwise just take
   the quota and recieved. Next we check to see that the total recieved at this level is less then or equal to
   the ammount the parent ditributed. If this fails we set the quota to 1. We must set it to 1 (and
   manufacture some quota) or delete the directory for if we set it to 0 we would destroy the quota tree.
*/

	if entry.dirsw then do;
		qcp = addr (local_quota_cell);
		call compute_inf_received;
		if ec ^= 0 then goto q_done;
		do quota_type = 0 to 1;
		     call vtoc_attributes$get_quota (uid, pvid, vtocx, qcp, quota_type, ec);
		     if ec ^= 0 then goto q_done;
		     if new_vtoce then do;
			     quota_cell.quota = input_vtoce.quota (quota_type);
			     quota_cell.used = input_vtoce.used (quota_type);
			     quota_cell.received = input_vtoce.received (quota_type);
			     quota_cell.tup = input_vtoce.trp_time (quota_type);
			     quota_cell.trp = input_vtoce.trp (quota_type);
			     quota_cell.pad = 0;
			end;
		     else do;
			     quota_cell.quota = input_vtoce.quota (quota_type);
			     quota_cell.received = input_vtoce.received (quota_type);
			end;
		     if inf_received (quota_type) + par_quota (quota_type) + input_vtoce.received (quota_type) <= par_received (quota_type) then
			call vtoc_attributes$set_quota (uid, pvid, vtocx, qcp, quota_type, ec);
		     else do;
			     quota_set = "1"b;
			     quota_cell.quota = 1;
			     call vtoc_attributes$set_quota (uid, pvid, vtocx, qcp, quota_type, ec);
			     goto q_next;
			end;
q_done:		     quota_set = quota_set | (ec ^= 0);
q_next:		end;
	     end;

fin:
						/* cleanup, unlock, deference, and return args */
	if hold then call get_pvtx$release_pvtx (pvid, pvtx);
	if target_dirl then call lock$dir_unlock (target_dp);
	if dp ^= null then call dc_find$finished (dp, dirl);
	if pardirl then call lock$dir_unlock (ptr (par_ep, 0));
	if astep ^= null then aste.ehs = "0"b;
	a_attributes = attributes;
ret:	a_code = code;
	return;
%page;
force_kst_access: proc;

/* This proc locates the KST entry for segno, and forces the access so we can use it. It also set faults all other users.
   users. Since we already have the directory locked, the access can not be change nor can any
   user recoonect to the segment */

	call get_kstep (segno, kstep, code);
	if code ^= 0 then return;
	kste.dtbm = entry.dtem;
	kste.access = "101"b;
	call setfaults$if_active (uid, pvid, vtocx, "0"b);
	return;

     end force_kst_access;

revert_kst_access: proc;

/* This proc resets the KST entry and disconnects it from us */

	kste.dtbm = (36)"1"b;
	call setfaults$disconnect (segno);
	return;

     end revert_kst_access;

compute_inf_received: proc;

/* This proc sums the recieved quota for all directory entries inferior to some directory */

dcl nentries	     fixed bin;
dcl ok		     fixed bin (35);
dcl seen		     fixed bin;

	inf_received (*) = 0;
	nentries = dir.lcount + dir.seg_count + dir.dir_count;
	seen = 0;
	do ep = ptr (dp, dir.entryfrp) repeat (ptr (dp, entry.efrp)) while (rel (ep) ^= "0"b);
	     seen = seen + 1;
	     if seen > nentries then signal bad_dir_;
	     if entry.bs then
		if entry.owner ^= dir.uid then signal bad_dir_;
		else ;
	     else if link.owner ^= dir.uid
		     | link.type ^= LINK_TYPE then signal bad_dir_;
	     if entry.dirsw then do;
		     if entry.type ^= DIR_TYPE then signal bad_dir_;
		     dir_vtocx = entry.vtocx;
		     dir_pvid = entry.pvid;
		     dir_uid = entry.uid;
		     qcp = addr (temp_quota_cell);
		     do quota_type = 0 to 1;
			call vtoc_attributes$get_quota (dir_uid, dir_pvid, dir_vtocx, qcp, quota_type, ok);
			if ok = 0 then inf_received (quota_type) = inf_received (quota_type) + quota_cell.received;
		     end;
		end;
	end;
	return;

     end compute_inf_received;

reset_new_dir: proc;

/* This proc compares the old and new copies of a directory. For each uid match  it resets
   the vtoce pointer. For each entry in the old not in the new it deletes it. This deletion operation is made without
   access control checks. If deletion won't work the fact is logged with the reason. Of course when the copy
   is made the subtrees will be automaticaly deleted, in the sense that they won't be found */

dcl nentries1	     fixed bin;
dcl nentries2	     fixed bin;
dcl seen1		     fixed bin;
dcl seen2		     fixed bin;

	mismatch = "0"b;
reset_loop: seen2 = 0;
	nentries2 = segptr -> dir.lcount + segptr -> dir.dir_count + segptr -> dir.seg_count;
	do old_ep = ptr (segptr, segptr -> dir.entryfrp) repeat (ptr (segptr, old_ep -> entry.efrp))
	     while (rel (old_ep) ^= "0"b);
	     seen2 = seen2 + 1;
	     if seen2 > nentries2 then signal bad_dir_;
	     seen1 = 0;
	     nentries1 = objectp -> dir.lcount + objectp -> dir.dir_count + objectp -> dir.seg_count;
	     do new_ep = ptr (objectp, objectp -> dir.entryfrp) repeat (ptr (objectp, new_ep -> entry.efrp))
		while (rel (new_ep) ^= "0"b & new_ep -> entry.uid ^= old_ep -> entry.uid);
		seen1 = seen1 + 1;
		if seen1 > nentries1 then do;
			code = error_table_$argerr;
			return;
		     end;
	     end;
	     if rel (new_ep) ^= "0"b then do;		/* entry in old and in new */
		     new_ep -> entry.pvid = old_ep -> entry.pvid;
		     new_ep -> entry.vtocx = old_ep -> entry.vtocx;
		end;
	     else if ^on_skip_list () then do;		/* entry in old but not in new - delete it */
		     mismatch = "1"b;
		     del_ename = ptr (old_ep, old_ep -> entry.name_frp) -> names.name;
		     if dirname = ">" then del_pname = ">" || ename;
		     else del_pname = rtrim (dirname) || ">" || ename;
		     old_uid = old_ep -> entry.uid;
		     dirsw = old_ep -> entry.dirsw;
		     call lock$dir_unlock (segptr);	/* for delentry/del_dir_tree to work */
		     target_dirl = "0"b;
		     call dc_find$finished (dp, "1"b);
		     dp = null;
		     dirl = "0"b;
		     if dirsw then do;
subtree:			     call del_dir_tree$retv (del_pname, del_ename, del_code);
			     if del_code ^= 0 then goto delerr;
			end;
		     call delentry$retv (del_pname, del_ename, del_code);
		     if del_code = error_table_$fulldir then goto subtree;
		     if del_code ^= 0 then do;
delerr:			     call syserr$error_code (4, del_code, "retv_copy: deleting ^a>^a without recovering resources",
				del_pname, del_ename);
			     call add_to_skip_list;
			end;
		     call lock$dir_lock_read (segptr, code);
		     if code ^= 0 then return;
		     target_dirl = "1"b;
		     call dc_find$obj_volume_retrieve (dirname, ename, audit_user_info_ptr, ep, code);
		     if code ^= 0 then return;
		     dirl = "1"b;
		     if ep -> entry.uid ^= uid then do;	/* where did our dir go? */
			code = error_table_$invalidsegno;
			return;
		     end;
		     dp = ptr (ep, 0);
		     goto reset_loop;
		end;
	end;
	return;

     end reset_new_dir;

on_skip_list: proc returns (bit (1));
	found = "0"b;
	do skip_list_idx = 1 to skip_list_cnt while (skip_list (skip_list_idx) ^= old_uid);
	end;
	if skip_list_idx <= skip_list_cnt then found = "1"b;
	return (found);

     end on_skip_list;

add_to_skip_list: proc;
	skip_list_cnt = skip_list_cnt + 1;
	skip_list (skip_list_cnt) = old_uid;
	return;

     end add_to_skip_list;
%page; %include access_audit_user_info;
%page; %include aste;
%page; %include dc_find_dcls;
%page; %include dir_entry;
%page; %include dir_header;
%page; %include dir_link;
%page; %include dir_name;
%page; %include fs_types;
%page; %include kst;
%page; %include makeknown_info;
%page; %include quota_cell;
%page; %include sdw;
%page; %include vtoce;
%page;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   retv_copy: deleting PATH without recovering resources ERROR_MESSAGE

   S: $log

   T: Volume retrieval

   M: While retrieving a segment,
   the retriever attempted to delete an old copy
   of a segment before using a newer one.
   The deletion attempt failed.
   Space may be wasted on the volume
   until a sweep_pv -gc is done.

   A: Note for volume administrator.

   END MESSAGE DOCUMENTATION */

     end retv_copy;
