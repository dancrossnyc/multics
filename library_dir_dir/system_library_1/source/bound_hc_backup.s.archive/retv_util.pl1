/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style2 */
retv_util:
     proc;

/* This routine provides some utility functions for the volume retriever.  They consist of a
   check entry to determine if an object exists, a status entry to provide information about an
   object, a name list entry to return the primary names of all enties in a directory,  an interface to the
   system's hash routine to facilitate searching of a directory image recovered from a dump volume,
   an entry to set the bit count of an object recovered by the retriever,
   an entry to delete a branch recovered by the retriever,
   and an add names entry  and add acl entry which provide access control bypass for the retriever.
*/


/* coded by Vinograd 9/76 */
/* Modified 07/77 by THVV for bad_dir_ check */
/* Added entry get_entry May 1978 by DRV */
/* Added entry to set bit count March 1981 by DRV */
/* Added entry to delete retrieved entry April 1981 by DRV */
/* Use of SystemFreeSeg removed BIM 4/82. */
/* Changed to use the new dc_find July 1984 by KPL */
/* Changed to provide auditing info, November 1984 by KPL */

/* Parameters */

	dcl     a_access_name	 char (*);
	dcl     a_aclc		 fixed bin;
	dcl     a_aclp		 ptr;
	dcl     a_areap		 ptr;
	dcl     a_auth		 bit (72) aligned;
	dcl     a_code		 fixed bin (35);
	dcl     a_dirname		 char (*);
	dcl     a_dp		 ptr;
	dcl     a_dtd		 bit (36) aligned;
	dcl     a_dtm		 bit (36);
	dcl     a_ename		 char (*);
	dcl     a_ep		 ptr;
	dcl     a_level		 fixed bin;
	dcl     a_mode		 bit (36) aligned;
	dcl     a_new_bc		 fixed bin (24);
	dcl     a_newname		 char (*);
	dcl     a_nlc		 fixed bin;
	dcl     a_nlp		 ptr;
	dcl     a_np		 ptr;
	dcl     a_old_bc		 fixed bin (24);
	dcl     a_pmode		 bit (36) aligned;
	dcl     a_pvid		 bit (36) aligned;
	dcl     a_type		 fixed bin;
	dcl     a_uid		 bit (36) aligned;
	dcl     a_volid		 (3) bit (36) aligned;

/* Variables */

	dcl     DIRECTORY		 fixed bin int static init (2) options (constant);
	dcl     LINK		 fixed bin int static init (3) options (constant);
	dcl     SEGMENT		 fixed bin int static init (1) options (constant);
	dcl     check_entry		 fixed bin static init (1) options (constant);
	dcl     delete_entry	 fixed bin static init (5) options (constant);
	dcl     get_entry		 fixed bin static init (3) options (constant);
	dcl     set_bc_entry	 fixed bin static init (4) options (constant);
	dcl     status_entry	 fixed bin static init (2) options (constant);

	dcl     access_name		 char (32);
	dcl     acl_start_ptr	 ptr;
	dcl     aclc		 fixed bin;
	dcl     aclp		 ptr;
	dcl     add_sw		 bit (1);
	dcl     auth		 bit (72);
	dcl     bmode		 bit (36) aligned;
	dcl     code		 fixed bin (35);
	dcl     dirl		 bit (1) aligned;
	dcl     dirname		 char (168);
	dcl     dtd		 bit (36) aligned;
	dcl     dtm		 bit (36);
	dcl     ename		 char (32);
	dcl     entry_sw		 fixed bin;
	dcl     exmode		 bit (36) aligned;
	dcl     i			 fixed bin;
	dcl     idx		 fixed bin;
	dcl     ignore		 fixed bin (35);
	dcl     level		 fixed bin;
	dcl     1 local_entry	 like entry;
	dcl     1 local_vtoce	 like vtoce aligned;
	dcl     mode		 bit (36) aligned;
	dcl     new_bc		 fixed bin (24);
	dcl     newname		 char (32);
	dcl     nlc		 fixed bin;
	dcl     nlp		 ptr;
	dcl     old_bc		 fixed bin (24);
	dcl     par_dirl		 bit (1) aligned;
	dcl     par_ep		 ptr;
	dcl     pmode		 bit (36) aligned;
	dcl     prior_dir_acl_count	 fixed bin;
	dcl     pvid		 bit (36) aligned;
	dcl     pvtx		 fixed bin;
	dcl     rp		 bit (18) aligned;
	dcl     saved_change_pclock	 fixed bin (35);
	dcl     type		 fixed bin;
	dcl     uid		 bit (36) aligned;
	dcl     volid		 (3) bit (36) aligned;

/* Based */

	dcl     1 acl_list		 (aclc) aligned like input_acl based;
	dcl     1 based_entry	 like entry based (a_ep);
	dcl     1 input_acl		 based aligned,
		2 person		 char (32),
		2 project		 char (32),
		2 tag		 char (1),
		2 mode		 bit (36),
		2 exmode		 bit (36);
	dcl     name_list		 (nlc) char (32) based aligned;
	dcl     user_area		 area based (a_areap);

/* External */

	dcl     error_table_$vtoce_connection_fail
				 ext fixed bin (35);

/* Entries */

	dcl     access_mode$user_effmode
				 entry (ptr, char (32), bit (72), fixed bin, bit (36) aligned, bit (36) aligned,
				 fixed bin (35));
	dcl     acl_$add_entry	 entry (fixed bin, bit (36) aligned, ptr, ptr, bit (1), fixed bin (35));
	dcl     acl_$del_acl	 entry (ptr, fixed bin (35));
	dcl     chname$retv		 entry (ptr, char (*), char (*), fixed bin (35));
	dcl     delentry$salv_delete_branch
				 entry (ptr, fixed bin (35));
	dcl     get_pvtx		 entry (bit (36), fixed bin (35)) returns (fixed bin);
	dcl     getuid		 entry returns (bit (36));
	dcl     hash$search		 entry (ptr, ptr, ptr, fixed bin (35));
	dcl     lock$dir_lock_read	 entry (ptr, fixed bin (35));
	dcl     lock$dir_unlock	 entry (ptr);
	dcl     sum$dirmod		 entry (pointer);
	dcl     sum$getbranch	 entry (ptr, fixed bin, ptr, fixed bin (35));
	dcl     vtoc_man$get_vtoce	 entry (bit (36), fixed bin, fixed bin, bit (3), ptr, fixed bin (35));

/* Misc */

	dcl     bad_dir_		 condition;
	dcl     seg_fault_error	 condition;

	dcl     addr		 builtin;
	dcl     fixed		 builtin;
	dcl     null		 builtin;
	dcl     ptr		 builtin;
	dcl     unspec		 builtin;
%page;
delete:
     entry (a_dirname, a_ename, a_code);
	entry_sw = delete_entry;
	goto common;

set_bc:
     entry (a_dirname, a_ename, a_new_bc, a_old_bc, a_code);
	entry_sw = set_bc_entry;
	new_bc = a_new_bc;
	goto common;

get:
     entry (a_dirname, a_ename, a_ep, a_code);
	entry_sw = get_entry;
	goto common;

check:
     entry (a_dirname, a_ename, a_type, a_dtm, a_code);

/* set control arg and default return value */

	entry_sw = check_entry;
	dtm = "0"b;
	goto common;

status:
     entry (a_dirname, a_ename, a_auth, a_access_name, a_level, a_type, a_mode, a_pmode, a_uid, a_pvid, a_volid, a_dtd,
	a_code);


/* set control arg, copy args */
	entry_sw = status_entry;
	access_name = a_access_name;
	level = a_level;
	auth = a_auth;

/* set default return values */
	uid = "0"b;
	pvid = "0"b;
	volid (*) = "0"b;
	dtd = "0"b;
	bmode = "0"b;
	pmode = "0"b;

common:						/* copy args */
	dirname = a_dirname;
	ename = a_ename;

/* set return valuse and control args */
	code = 0;
	type = 0;
	dp = null;
	dirl = "0"b;
	par_dirl = "0"b;

/* in the retriever's environment nothing can be trusted so be prepared */

	on seg_fault_error
	     begin;
		code = error_table_$vtoce_connection_fail;
		goto status_ret;
	     end;


/* locate entry desired */

	if entry_sw = delete_entry
	then call dc_find$obj_delete_priv (dirname, ename, DC_FIND_NO_CHASE, ep, code);
	else if entry_sw = set_bc_entry
	then call dc_find$obj_status_write_priv (dirname, ename, DC_FIND_NO_CHASE, FS_OBJ_BC_MOD, ep, code);
	else call dc_find$obj_status_read_priv (dirname, ename, DC_FIND_NO_CHASE, ep, code);
	if code ^= 0
	then goto status_ret;
	dp = ptr (ep, 0);
	dirl = "1"b;
	if entry_sw = delete_entry
	then do;
		call delentry$salv_delete_branch (ep, code);
		goto status_ret;
	     end;
	if entry_sw = get_entry
	then do;
		unspec (local_entry) = unspec (entry);
		goto status_ret;
	     end;
	if entry_sw = set_bc_entry
	then do;
		old_bc = entry.bc;
		entry.bc = new_bc;
		goto status_ret;
	     end;

/* determine type */
	if ^entry.bs
	then type = LINK;
	else if entry.dirsw
	then type = DIRECTORY;
	else type = SEGMENT;			/* if status entry determine user access */
	if entry_sw = status_entry
	then do;
		uid = entry.uid;
		if type ^= LINK
		then do;
			pvid = entry.pvid;
			call access_mode$user_effmode (ep, access_name, auth, level, mode, exmode, code);
			if code ^= 0
			then goto status_ret;
			if entry.dirsw
			then bmode = exmode;
			else bmode = mode;
		     end;
		call sum$getbranch (dp, 0, par_ep, code);
		if code ^= 0
		then goto status_ret;
		par_dirl = "1"b;

		call access_mode$user_effmode (par_ep, access_name, auth, level, mode, exmode, code);
		if code ^= 0
		then goto status_ret;
		pmode = exmode;
	     end;					/* if branch then check if object it describes exists */

	if entry.bs
	then do;
		unspec (local_vtoce) = "0"b;
		vtocep = addr (local_vtoce);
		pvtx = get_pvtx (entry.pvid, code);
		if code ^= 0
		then goto status_ret;
		call vtoc_man$get_vtoce (entry.pvid, pvtx, fixed (entry.vtocx, 17), "101"b, vtocep, code);
		if code ^= 0
		then goto status_ret;
		if vtoce.uid ^= entry.uid | vtoce.damaged
		then do;
			code = error_table_$vtoce_connection_fail;
			goto status_ret;
		     end;
		if entry_sw = status_entry
		then do;
			volid (*) = vtoce.volid (*);
			dtd = vtoce.dtd;
		     end;
		else dtm = vtoce.dtm;
	     end;

/* clean up any locks and return values found */
status_ret:
	if dp ^= null
	then call dc_find$finished (dp, dirl);
	if par_dirl
	then call lock$dir_unlock (ptr (par_ep, 0));
	if entry_sw = status_entry
	then do;
		a_mode = bmode;
		a_pmode = pmode;
		a_uid = uid;
		a_pvid = pvid;
		a_volid (*) = volid (*);
		a_dtd = dtd;
		a_type = type;
	     end;
	else if entry_sw = set_bc_entry
	then do;
		a_old_bc = old_bc;
	     end;
	else if entry_sw = check_entry
	then do;
		a_dtm = dtm;
		a_type = type;
	     end;
	else if entry_sw = get_entry
	then do;
		local_entry.uid = getuid ();
		unspec (based_entry) = unspec (local_entry);
	     end;
	a_code = code;
	return;
%page;
name_list:
     entry (a_dirname, a_areap, a_nlp, a_nlc, a_code);

/* copy arg and set control args */
	dirname = a_dirname;
	code = 0;
	dirl = "0"b;
	idx = 0;
	dp = null;

/* find and lock dir */

RETRY:	call dc_find$dir_read_priv (dirname, dp, code);
	if code ^= 0
	then goto name_list_ret;
	dirl = "1"b;

	nlc = dir.seg_count + dir.dir_count + dir.lcount; /* number of primary names */
	saved_change_pclock = dir.change_pclock;

	call lock$dir_unlock (dp);
	dirl = "0"b;

/* Unlock dir for allocate */

	allocate name_list in (user_area) set (nlp);

/* Relock */

	call lock$dir_lock_read (dp, code);
	if code ^= 0
	then goto name_list_ret;
	dirl = "1"b;

	if dir.change_pclock ^= saved_change_pclock
	then do;
		call lock$dir_unlock (dp);
		dirl = "0"b;
		free nlp -> name_list;
		go to RETRY;
	     end;

/* Now we have someplace to put the data, but it is user storage */
/* If we fault, though, the worst we do is salvage the dir. */
/* This entry is only called by trusted processes. */

	i = 0;
	do rp = dir.entryfrp repeat (entry.efrp) while (rp ^= "0"b);
	     i = i + 1;
	     if i > nlc
	     then signal bad_dir_;
	     ep = ptr (dp, rp);
	     if entry.bs
	     then if entry.owner ^= dir.uid | entry.type ^= SEG_TYPE & entry.type ^= DIR_TYPE
		then signal bad_dir_;
		else ;
	     else if link.owner ^= dir.uid | link.type ^= LINK_TYPE
	     then signal bad_dir_;
	     idx = idx + 1;
	     nlp -> name_list (idx) = ptr (ep, entry.name_frp) -> names.name;
	end;					/* unlock dir */
	call lock$dir_unlock (dp);
	dirl = "0"b;

/* Return pointer and count */

	a_nlc = nlc;
	a_nlp = nlp;

name_list_ret:					/* unlock, dereference as required */
	if dp ^= null
	then call dc_find$finished (dp, dirl);
	a_code = code;
	return;

/* hash_index_ is now available in bound_sss_active_, and this should */
/* be deleted ! */

hash_search:
     entry (a_dp, a_np, a_ep, a_code);

	call hash$search (a_dp, a_np, a_ep, a_code);
	return;

addname:
     entry (a_dirname, a_ename, a_newname, a_code);

/* copy input args and set control vars */
	dirl = "0"b;
	dirname = a_dirname;
	ename = a_ename;
	newname = a_newname;
	dp = null;

/* locate entry */

	call dc_find$obj_status_write_priv (dirname, ename, DC_FIND_NO_CHASE, FS_OBJ_RENAME, ep, code);
	if code ^= 0
	then goto addname_ret;
	dirl = "1"b;
	dp = ptr (ep, 0);				/* add name to entry bypassing access checks */
	call chname$retv (ep, "", newname, code);

addname_ret:					/* clean up */
	if dp ^= null
	then call dc_find$finished (dp, dirl);
	a_code = code;
	return;

/* lookout. This entry takes dir control acl's, not asd_ style */
/* user acl structures. !!!! */

add_acl:
     entry (a_dirname, a_ename, a_aclp, a_aclc, a_code);	/* copy input args and set control vars */
	dirname = a_dirname;
	ename = a_ename;
	aclc = a_aclc;
	aclp = a_aclp;
	dirl = "0"b;
	dp = null;

/* We do not copy the input data. First, this is called by trusted */
/* system code. Second, the worst that we can do is crawl out. */
/* boundsfaults do not hold write locks. */

/* locate entry */

	call dc_find$obj_access_write_priv (dirname, ename, DC_FIND_NO_CHASE, FS_OBJ_ACL_MOD, ep, code);
	if code ^= 0
	then goto add_acl_ret;
	dirl = "1"b;
	dp = ptr (ep, 0);

/* Loop over each acl term to be added. If unable to add delete all terms added so far.
   Reset acl counts for directory and entry. */

	prior_dir_acl_count = dir.acle_total;
	acl_start_ptr = addr (entry.acl_frp);
	do i = 1 to aclc while (code = 0);
	     call acl_$add_entry (fixed (entry.acle_count), entry.uid, acl_start_ptr, addr (aclp -> acl_list (i)),
		add_sw, code);
	     if code ^= 0
	     then do;
		     call acl_$del_acl (acl_start_ptr, ignore);
		     dir.acle_total = prior_dir_acl_count;
		end;
	     else if add_sw
	     then do;
		     dir.acle_total = dir.acle_total + 1;
		     entry.acle_count = entry.acle_count + 1;
		end;
	end;
	call sum$dirmod (dp);
add_acl_ret:					/* clean up and unlock */
	if dp ^= null
	then call dc_find$finished (dp, dirl);
	a_code = code;
	return;
%page;
%include dc_find_dcls;
%page;
%include dir_entry;
%page;
%include dir_header;
%page;
%include dir_name;
%page;
%include dir_link;
%page;
%include fs_obj_access_codes;
%page;
%include fs_types;
%page;
%include vtoce;
     end retv_util;
