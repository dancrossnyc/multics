/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

dbm_man: proc;

/* This routine manages the initialization, allocating, freeing, setting and resetting of the
   bit maps that control the system dumper. For every mounted volume there exist two bit maps,
   each as many bits long(rounded up to nearest word) as there are vtoces on that volume.
   The incremental and consolidated dumpers are driven off these bit maps and dump each vtoce and
   associated data object whose bit is on */

/* Coded by D Vinograd Feb 1976 
   Modified by E.N. Kittlitz Nov 1980 for new dtm/dtu calculation, clock builtin 
   Modified 03/21/81, W. Olin Sibert, for ADP SDW formats
   Modified 03/01/82, J. Bongiovanni, to compute proper size for dbm_seg
            and for new PVTE include file
*/


/****^  HISTORY COMMENTS:
  1) change(88-05-27,GWMay), approve(88-05-27,MCR7883),
     audit(88-06-14,Beattie), install(88-07-19,MR12.2-1061):
     Changed to allow setting of the dumper bit maps values with set_bit.
                                                   END HISTORY COMMENTS */


	idx = divide (1, 0, 17, 0);			/* should never be called here */

update_map_from_ast: entry (a_pvtep, a_pvtx);

	pvtep = a_pvtep;
	pvtx = a_pvtx;
	call lock$lock_ast;
	call lock_dbm;
	call get_mapp (incr, "1"b);

	do i = 0 to hbound (sst$level, 1);
	     first = "1"b;
	     first_fp = sst$level (i).ausedp;
	     if first_fp ^= "0"b then
		do fp = first_fp repeat (aste.fp)while (fp ^= first_fp | first);
		first = "0"b;
		astep = ptr (addr (sst_seg$), fp);
		if aste.pvtx = pvtx & ^aste.gtus & ^aste.nid & ^aste.per_process & ^aste.hc_sdw then do;
		     if ((aste.np ^= "0"b) | (aste.infp ^= "0"b)) then	/* implies 'in use' */
			aste.dtu = substr (bit (fixed (clock (), 52), 36), 1, 36);
		     if aste.fms then do;
			aste.fms = "0"b;
again1:			dump_it (aste.vtocx) = "1"b;
			if dump_it (aste.vtocx) ^= "1"b then do;
			     call syserr (LOG, "dbm_man: csl failure");
			     goto again1;
			end;
		     end;
		end;
	     end;
	end;

	call unlock_dbm;
	call lock$unlock_ast;
	return;

set_incr:	entry (a_pvtx, a_vtocx, a_code);

	type = incr;
	switch = "1"b;
	a_code = 0;
	goto set_common;

set:	entry (a_pvtx, a_vtocx, a_type, a_switch);

	type = a_type;
	switch = a_switch;

set_common:
	call lock_dbm;

	call get_pvte;

	call set_bit (a_vtocx, type, switch);

	call unlock_dbm;

	return;

get_next_vtocx: entry (a_pvtx, a_vtocx, a_type, a_reset, a_code);

	a_code = 0;
	reset = a_reset;
	call lock_dbm;

	call get_pvte;

	call get_mapp (a_type, "1"b);
	do idx = a_vtocx + 1 to pvte.n_vtoce - 1 while (dump_it (idx) = "0"b); end;

	if idx > pvte.n_vtoce - 1 then do;
	     a_code = error_table_$end_of_info;
	     call unlock_dbm;
	     return;
	end;

	pvte.curn_dmpr_vtocx (a_type) = idx;

	if reset then;
	else call set_bit (idx, a_type, "0"b);
	if a_type = incr then			/* set consolidated bit */
	     call set_bit (idx, cons, "1"b);

	call unlock_dbm;

	return;

init_map:	entry (a_pvtx, a_bmp, a_code);

	a_code = 0;
	call lock_dbm;

	call get_pvte;

	if pvte.dbmrp (incr) ^= "0"b then
	     call syserr (CRASH, "dbm_man: attempt to initialize already initialized map for PV on ^a_^a^[^a^;^1s^]",
		pvte.devname, convert (p99, pvte.logical_area_number), pvte.is_sv, pvte.sv_name);

	bit_map_len = divide (pvte.n_vtoce + 35, 36, 17, 0) * num_of_maps;

	on area call syserr (CRASH, "dbm_man: unable to allocate dumper bit map for PV on ^a_^a^[^a^;^1s^]",
	     pvte.devname, convert (p99, pvte.logical_area_number), pvte.is_sv, pvte.sv_name);
	allocate bit_map in (dbm.area) set (mapp);

	pvte.dbmrp (incr) = rel (mapp);
	pvte.dbmrp (cons) = bit (fixed (fixed (rel (mapp), 18) + divide (bit_map_len, 2, 18, 0), 18), 18);
	mapp -> bit_map = a_bmp -> bit_map;

	call unlock_dbm;
	return;

update_map: entry (a_pvtx, a_bmp, a_pageno, a_code);

	free = "0"b;
	goto free_common;

free_map:	entry (a_pvtx, a_bmp, a_pageno, a_code);

	free = "1"b;

free_common:
	a_code = 0;
	call lock_dbm;

	call get_pvte;

	call get_mapp (incr, (^free));
	if mapp = null () then goto UNLOCK_RETURN;

	bit_map_len = divide (pvte.n_vtoce + 35, 36, 17, 0) * num_of_maps;
	if (free & a_pageno = 0) then do;
	     call reset_curn_vtocx (incr);
	     call reset_curn_vtocx (cons);
	end;
	cnt1 = min (1024 - bit_map_offset, bit_map_len);
	if a_pageno = 0 then do;
	     cnt = cnt1;
	     from_ptr = mapp;
	     to_ptr = addrel (a_bmp, bit_map_offset);
	end;
	else do;
	     cnt = max (bit_map_len - cnt1, 0);
	     from_ptr = addrel (mapp, cnt1);
	     to_ptr = a_bmp;
	end;
	to_ptr -> copy = from_ptr -> copy;

	if (free & a_pageno = 1) then do;
	     free mapp -> bit_map in (dbm.area);
	     pvte.dbmrp (*) = "0"b;
	end;

UNLOCK_RETURN:
	call unlock_dbm;
	return;

init:	entry;					/* Set up the dbm seg */

/* Compute the size of dbm_seg from the number of disk devices configured */

	dbmp = addr (dbm_seg$);
	dbm_segno = binary (baseno (addr (dbm_seg$)));
	sltp = addr (slt$);
	sltep = addr (slt.seg (dbm_segno));

	dbm_seg_size = size (area_header) + binary (rel (addr (dbm.area)))
	     + pvt$n_entries * (alloc_blkhdrsz + divide (MAX_VTOCE_PER_PACK + 35, 36, 17) * num_of_maps);
	
/* Set up SLTE for dbm_seg so that we get an ASTE and address withdrawal when
   we call make_sdw. make_sdw was already called for dbm_seg. It did neither,
   since dbm_seg has the abs_seg attribute in the SLTE */

	slte.abs_seg = "0"b;
	slte.cur_length, slte.max_length = bit (divide (dbm_seg_size +1023, 1024, 9, 0), 9);
	
	call make_sdw$unthreaded (dbm_segno, tsdw, astep, ptp);
	if astep = null () 
	     then call syserr (CRASH, "dbm_man: Cannot get ASTE for dbm_seg");
	call pmut$swap_sdw (addr (dbm_seg$), addr (tsdw));

	unspec (local_area_info) = "0"b;
	area_infop = addr (local_area_info);
	area_info.version = area_info_version_1;
	area_info.zero_on_free = "1"b;
	area_info.size = dbm_seg_size - binary (rel (addr (dbm.area)), 18);
	area_info.areap = addr (dbm.area);
	call define_area_ (area_infop, code);
	if code ^= 0 then
	     call syserr$error_code (CRASH, code, "dbm_man: unable to initialize area");
	dbm.lock_data.event = unspec (DBM_LOCK_EVENT);
	dbm.init = "1"b;
	return;
%page;

lock_dbm:	proc;
	     dbmp = addr (dbm_seg$);
	     call lock$lock_fast (addr (dbm.lock));
	     return;
	end lock_dbm;

unlock_dbm: proc;
	     call lock$unlock_fast (addr (dbm.lock));
	     return;
	end unlock_dbm;

get_pvte:	proc;
	     code = 0;
	     pvtx = a_pvtx;
	     pvt_arrayp = addr (pvt$array);
	     pvtep = addr (pvt_array (pvtx));
	     return;
	end get_pvte;

set_bit:	proc (idx, type, value);
dcl  value bit (1) aligned;
dcl  type fixed bin;
dcl  idx fixed bin;

	     call get_mapp (type, "1"b);
again2:	     dump_it (idx) = value;
	     if dump_it (idx) ^= value then do;
		call syserr (LOG, "dbm_man: csl failure");
		goto again2;
	     end;
	     return;
	end set_bit;

reset_curn_vtocx: proc (type);
dcl  type fixed bin;
	     if pvte.curn_dmpr_vtocx (type) ^= -1 then do;
		call set_bit (fixed (pvte.curn_dmpr_vtocx (type)), type, "1"b);
		pvte.curn_dmpr_vtocx = -1;
	     end;
	     return;
	end reset_curn_vtocx;

get_mapp:	proc (type, crash_on_error);
dcl  type fixed bin;
dcl  crash_on_error bit (1) aligned;

	     mapp = ptr (dbmp, pvte.dbmrp (type));
	     if mapp = dbmp then
		if crash_on_error then
		     call syserr (CRASH, "dbm_man: bit map relp not set in pvte for PV on ^a_^a^[^a^;^1s^]",
			pvte.devname, convert (p99, pvte.logical_area_number), pvte.is_sv, pvte.sv_name);
	          else mapp = null ();
	end get_mapp;
%page;
dcl  a_pvtx fixed bin;
dcl  a_pvtep ptr;
dcl  a_vtocx fixed bin;
dcl  a_pageno fixed bin;
dcl  a_reset bit (1) aligned;
dcl  a_switch bit (1) aligned;
dcl  a_type fixed bin;
dcl  a_bmp ptr;
dcl  a_code fixed bin (35);

dcl  code fixed bin (35);
dcl  reset bit (1) aligned;
dcl  first bit (1) aligned;
dcl  fp bit (18);
dcl  first_fp bit (18);
dcl  pvtx fixed bin;
dcl  type fixed bin;
dcl  i fixed bin;
dcl  idx fixed bin;
dcl  free bit (1) aligned;
dcl  switch bit (1) aligned;
dcl  bit_map_len fixed bin;
dcl  cnt1 fixed bin;
dcl  cnt fixed bin;
dcl  from_ptr ptr;
dcl  to_ptr ptr;
dcl  dbm_seg_size fixed bin (19);
dcl  dbm_segno fixed bin (18);
dcl  tsdw fixed bin (71);
dcl  ptp ptr;
dcl  p99 picture "99";

dcl 1 local_area_info like area_info aligned;

dcl  copy (cnt) bit (36) based;
dcl  bit_map (bit_map_len) bit (36) aligned based;
dcl  mapp ptr init (null ());
dcl  dump_it (0:1) bit (1) unaligned based (mapp);

dcl  area condition;

dcl  bit_map_offset fixed bin static init (8) options (constant);
dcl  num_of_maps fixed bin static init (2) options (constant);
dcl  DBM_LOCK_EVENT char (4) static options (constant) aligned init ("dbm_");

dcl  sst_seg$ fixed bin external static;
dcl  pvt$n_entries fixed bin external static;
dcl  slt$ external static;

dcl 1 sst$level (0 : 3) aligned external static,
    2 ausedp bit (18) unaligned,
    2 no_aste bit (18) unaligned;

dcl  error_table_$end_of_info ext fixed bin (35);

dcl  define_area_ entry (ptr, fixed bin (35));
dcl  lock$lock_ast entry;
dcl  lock$unlock_ast entry;
dcl  lock$lock_fast entry (ptr);
dcl  lock$unlock_fast entry (ptr);
dcl  make_sdw$unthreaded entry (fixed bin (18), fixed bin (71), ptr, ptr);
dcl  pmut$swap_sdw entry (ptr, ptr);
dcl  syserr entry options (variable);
dcl  syserr$error_code entry options (variable);

dcl (addrel, addr, baseno, binary, bit, clock, convert, divide, fixed, hbound, min, max, null, ptr, rel, substr, size, unspec) builtin;
%page; %include area_info;
%page; %include area_structures;
%page; %include aste;
%page; %include backup_static_variables;
%page; %include dbm;
%page; %include disk_pack;
%page; %include pvte;
%page; %include slt;
%page; %include slte;
%page; %include syserr_constants;
%page; %include vtoce;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   dbm_man: csl failure

   S:	$log

   T:	$run

   M:	The CSL instruction appears to have failed on one of the processors.

   A:	$ignore

   Message:
   dbm_man: attempt to initialize already initialized map for PV on dskX_NNS

   S:	$crash

   T:	$run

   M:	$err

   A:	$recover

   Message:
   dbm_man: unable to allocate dumper bit map for PV on dskX_NNS

   S:	$crash

   T:	$run

   M:	The system was unable to allocate a dumper bit map in dbm_seg for
   the volume on dskX_NNS.  Too many volumes are online, or there is something
   wrong with the volume header.

   A:	$recover

   Message:
   dbm_man: Cannot get ASTE for dbm_seg

   S:     $crash

   T:	$init

   M:	The system was unable to create the dbm_seg and obtain an ASTE
   for this segment.

   A:     $contact_sa

   Message:
   dbm_man: unable to initialize area: ERROR_MESS

   S:	$crash

   T:	$run

   M:	$err

   A:	$recover

   Message:
   dbm_man: bit map relp not set in pvte for PV on dskX_NNS

   S:	$crash

   T:	$run

   M:	$err

   A:	$recover

   END MESSAGE DOCUMENTATION */

     end dbm_man;
