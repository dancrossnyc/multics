/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */
bce_name_to_segnum_: proc (p_name, p_segnum, p_code);

/* Look up the segnum for a hardcore seg in the image.
Keith Loepere, December 1983. */

/* Changed June 1984 for the riddance of bce_probe_data - Allen Ball. */
/* Also changed to give more information in bce_segptr_to_name_ - ADB */
/* Added segnum check to segptr entry, Keith Loepere, November 1984. */

/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */

dcl  addr				builtin;
dcl  addrel			builtin;
dcl  bin				builtin;
dcl  1 closest_hi_def		aligned like definition based (closest_hi_def_ptr);
dcl  closest_hi_def_ptr		ptr;
dcl  1 closest_lo_def		aligned like definition based (closest_lo_def_ptr);
dcl  closest_lo_def_ptr		ptr;
dcl  1 closest_hi_segname_def		aligned like segname_definition based (closest_hi_segname_def_ptr);
dcl  closest_hi_segname_def_ptr	ptr;
dcl  1 closest_lo_segname_def		aligned like segname_definition based (closest_lo_segname_def_ptr);
dcl  closest_lo_segname_def_ptr	ptr;
dcl  component			char (32);
dcl  counter			fixed bin;
dcl  crash_definitions_$		external;
dcl  crash_name_table$		external;
dcl  crash_slt$			external;
dcl  dimension			builtin;
dcl  error_table_$name_not_found	fixed bin (35) ext static;
dcl  hash_index_			entry (ptr, fixed bin (35), fixed bin (35), fixed bin (35)) returns (fixed bin (35));
dcl  hash_value			fixed bin (35);	/* what name hashes to for hash threaded list scan */
dcl  hi_offset			fixed bin (26);
dcl  ioa_$rsnnl			entry () options (variable);
dcl  length			builtin;
dcl  lo_offset			fixed bin (26);
dcl  my_name			char (256);
dcl  my_name_len			fixed bin;
dcl  name				char (32);
dcl  1 name_entry			aligned like segnam.names based (name_entry_ptr); /* an entry in the hash threaded list of names */
dcl  name_entry_ptr			ptr;
dcl  name_entry_rel			bit (18);		/* rel ptr to name_entry */
dcl  name_tries			fixed bin;	/* counter of tries to walk hash threads looking for a name before giving up */
dcl  null				builtin;
dcl  out_of_bounds			condition;
dcl  p_code			fixed bin (35) parameter;
dcl  p_name			char (*) parameter;
dcl  p_segnum			fixed bin (15) parameter;
dcl  return_string			char (256) varying;
dcl  rtrim			builtin;
dcl  seg_name			char (32);
dcl  segno			builtin;
dcl  segnum			fixed bin (15);
dcl  segptr			ptr parameter;
dcl  substr			builtin;
dcl  word				fixed bin (36) unsigned unaligned based;
dcl  wordno			builtin;
dcl  wordnum			fixed bin (26);

	p_code = 0;
	name = p_name;
	on out_of_bounds goto no_name;
	names_ptr = addr (crash_name_table$);
	hash_value = hash_index_ (addr (name), length (name), 0, dimension (name_seg.ht, 1));
	name_tries = 0;
	do name_entry_rel = name_seg.ht (hash_value)
	     repeat (name_entry.hp)
	     while (name_entry_rel);			/* scan down names that hash alike */
	     name_entry_ptr = addrel (names_ptr, name_entry_rel);
	     if name_entry.name = name then do;
		p_segnum = bin (name_entry.segno, 12);
		return;
	     end;
	     name_tries = name_tries + 1;
	     if name_tries > 100 then go to no_name;
	end;
no_name:
	p_code = error_table_$name_not_found;
	return;
%page;
bce_segnum_to_name_: entry (p_segnum) returns (char (*));

/* Find the hcname for a segment. */

	segnum = p_segnum;
	if segnum = 32767 | segnum = 32766 then return ("bad pointer");
	on out_of_bounds goto no_num;
	sltp = addr (crash_slt$);
	if segnum < 0 | segnum < slt.first_sup_seg then go to no_num;
	if slt.last_sup_seg < segnum & segnum < slt.first_init_seg then go to no_num;
	if slt.last_init_seg < segnum then go to no_num;
	sltep = addr (slt.seg (segnum));
	if slte_uns.segno ^= segnum then go to no_num;
	name_entry_ptr = addrel (addr (crash_name_table$), slte.names_ptr);
	name_entry_ptr = addrel (name_entry_ptr, 1);
	return (rtrim (name_entry.name));

no_num:	call ioa_$rsnnl ("^o", my_name, my_name_len, segnum);
	return (substr (my_name, 1, my_name_len));
%page;
bce_segptr_to_name_: entry (segptr) returns (char (*));

	return_string = "";
	counter = 1;
	segnum = segno (segptr);
	wordnum = wordno (segptr);
	call ioa_$rsnnl ("^o", my_name, my_name_len, segnum);
	return_string = return_string || substr (my_name, 1, my_name_len) || "|";
	call ioa_$rsnnl ("^o", my_name, my_name_len, wordnum);
	return_string = return_string || substr (my_name, 1, my_name_len);

	sltp = addr (crash_slt$);
	if segnum < 0 | segnum < slt.first_sup_seg then go to return_simple_ptr;
	if slt.last_sup_seg < segnum & segnum < slt.first_init_seg then go to return_simple_ptr;
	if slt.last_init_seg < segnum then go to return_simple_ptr;

	on out_of_bounds goto return_simple_ptr;

	definitions_ptr = addr (crash_definitions_$);
	def_header_ptr = addrel (definitions_ptr, definitions.dot (segnum).offset);
	closest_hi_def_ptr = null;
	closest_lo_def_ptr = null;

	do def_ptr = addrel (def_header_ptr, definition_header.def_list_relp) repeat addrel (def_header_ptr, definition.forward_relp) while (def_ptr -> word ^= 0 & counter < 1000);
						/* If def_ptr -> zero word then we found the end of the string or if we see a thousand definitions the string must be bad. */
	     counter = counter + 1;
	     if definition.class = CLASS_TEXT then do;	/* We care only about class text definitions. */
		if closest_lo_def_ptr = null then	/*  Find def pointing to closest address below our ptr. */
		     if definition.thing_relp <= wordnum then closest_lo_def_ptr = def_ptr;
		     else ;
		else if closest_lo_def.thing_relp < definition.thing_relp & definition.thing_relp <= wordnum then closest_lo_def_ptr = def_ptr;
		     else ;
		if closest_hi_def_ptr = null then	/* Find def pointing to closest address above our ptr. */
		     if wordnum <= definition.thing_relp then closest_hi_def_ptr = def_ptr;
		     else ;
		else if wordnum <= definition.thing_relp & definition.thing_relp < closest_hi_def.thing_relp then closest_hi_def_ptr = def_ptr;
		     else ;
	     end;
	end;

	seg_name = bce_segnum_to_name_ (segnum);
	if closest_lo_def_ptr = null then do;
	     call ioa_$rsnnl ("^o", my_name, my_name_len, wordnum);
	     return_string = return_string || " [" || rtrim (bce_segnum_to_name_ (segnum)) || "|" || substr (my_name, 1, my_name_len) || "]";
	end;
	else do;
	     return_string = return_string || " [";
	     closest_lo_segname_def_ptr = addrel (def_header_ptr, closest_lo_def.segname_relp);
	     if closest_hi_def_ptr = null then do;
		acc_string_ptr = addrel (def_header_ptr, closest_lo_segname_def.name_relp);
		return_string = return_string || substr (acc_string.string, 1, acc_string.count) || "$";
		acc_string_ptr = addrel (def_header_ptr, closest_lo_def.name_relp);
		return_string = return_string || substr (acc_string.string, 1, acc_string.count) || "+";
		lo_offset = wordnum - closest_lo_def.thing_relp;
		call ioa_$rsnnl ("^o", my_name, my_name_len, lo_offset);
		return_string = return_string || substr (my_name, 1, my_name_len) || "]";
	     end;
	     else do;
		closest_hi_segname_def_ptr = addrel (def_header_ptr, closest_hi_def.segname_relp);
		if closest_hi_segname_def_ptr = closest_lo_segname_def_ptr then do;
		     acc_string_ptr = addrel (def_header_ptr, closest_lo_segname_def.name_relp);
		     if closest_hi_def_ptr = closest_lo_def_ptr & wordnum - closest_lo_def.thing_relp = 0 then do;
			return_string = return_string || substr (acc_string.string, 1, acc_string.count) || "$";
			acc_string_ptr = addrel (def_header_ptr, closest_lo_def.name_relp);
			return_string = return_string || substr (acc_string.string, 1, acc_string.count) || "+0]";
		     end;
		     else do;
			return_string = return_string || substr (acc_string.string, 1, acc_string.count) || "$(";
			acc_string_ptr = addrel (def_header_ptr, closest_lo_def.name_relp);
			return_string = return_string || substr (acc_string.string, 1, acc_string.count) || "+";
			lo_offset = wordnum - closest_lo_def.thing_relp;
			call ioa_$rsnnl ("^o", my_name, my_name_len, lo_offset);
			return_string = return_string || substr (my_name, 1, my_name_len);
			acc_string_ptr = addrel (def_header_ptr, closest_hi_def.name_relp);
			return_string = return_string || " " || substr (acc_string.string, 1, acc_string.count) || "-";
			hi_offset = closest_hi_def.thing_relp - wordnum;
			call ioa_$rsnnl ("^o", my_name, my_name_len, hi_offset);
			return_string = return_string || substr (my_name, 1, my_name_len) || ")]";
		     end;
		end;
		else do;
		     acc_string_ptr = addrel (def_header_ptr, closest_lo_segname_def.name_relp);
		     return_string = return_string || "(" || substr (acc_string.string, 1, acc_string.count) || "$";
		     acc_string_ptr = addrel (def_header_ptr, closest_lo_def.name_relp);
		     return_string = return_string || substr (acc_string.string, 1, acc_string.count) || "+";
		     lo_offset = wordnum - closest_lo_def.thing_relp;
		     call ioa_$rsnnl ("^o", my_name, my_name_len, lo_offset);
		     return_string = return_string || substr (my_name, 1, my_name_len);
		     acc_string_ptr = addrel (def_header_ptr, closest_hi_segname_def.name_relp);
		     return_string = return_string || " " || substr (acc_string.string, 1, acc_string.count) || "$";
		     acc_string_ptr = addrel (def_header_ptr, closest_hi_def.name_relp);
		     return_string = return_string || substr (acc_string.string, 1, acc_string.count) || "-";
		     hi_offset = closest_hi_def.thing_relp - wordnum;
		     call ioa_$rsnnl ("^o", my_name, my_name_len, hi_offset);
		     return_string = return_string || substr (my_name, 1, my_name_len) || ")]";
		end;
	     end;
	end;

return_simple_ptr:
	return (return_string);

%page; %include definition_dcls;
%page; %include hc_definitions_seg;
%page; %include slt;
%page; %include slte;
     end;
