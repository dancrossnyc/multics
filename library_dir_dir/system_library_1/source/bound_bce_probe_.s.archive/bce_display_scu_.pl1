/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */
bce_display_scu_:	proc (scup, a_offset, lg_sw);

/* Modification History - prtscu_
   Initially coded by J. A. Bush - Dec 1975
   Modified May 1977 by J. A. Bush to be intellegent about group 7 faults and not print out tsr|ca
   Modified Aug 1980  by R.L. Coppola to be more intelligent about IOM channels greater than 37 (octal).
   Also added display of the CT Hold reg in CU status.
   Stolen for bce use, Keith Loepere December 1983.
*/

dcl  scup ptr;					/* pointer to SCU Data */
dcl  a_offset fixed bin (26);				/*  relative offset of SCU data */
dcl  lg_sw bit (1);					/* long format switch "1"b => long */
dcl (strp, byptr, refptr) ptr;
dcl (lnpos, flt_lng, inst6, i, j) fixed bin;
dcl  reoffset fixed bin (26);
dcl  code fixed bin (35);
dcl  w (0 : 7) fixed bin based;
dcl  flt_ln char (100);
dcl  flt_bf char (24) varying;
dcl  iocbp ptr;
dcl (length, fixed, addr, addrel, baseptr, substr, null, hbound, lbound) builtin;
dcl (tsrpr, on_line) bit (1);
dcl  cvbinbuf char (12);
dcl  fltdtab (0:35) bit (1) based (byptr) unaligned;
dcl  cpul (0 : 7) char (1) int static options (constant) init ("a", "b", "c", "d", "e", "f", "g", "h");
dcl  at_by_wd char (2);
dcl (ioa_, ioa_$rsnnl) entry options (variable);
dcl  bce_display_instruction_ entry (ptr, fixed bin, fixed bin (26));
dcl  bce_segptr_to_name_ entry (ptr) returns (char (*));
dcl  cv_bin_$oct entry (fixed bin, char (12));

dcl 1 scud based (scup) aligned,
    2 wd0 unaligned,				/* :: */
      3 prr bit (3),				/* Procedure Ring Register */
      3 psr bit (15),				/* Procedure Segment Register */
      3 apust bit (18),				/* APU Status */
    2 wd1 unaligned,				/* :: */
      3 fid bit (20),				/* fault/interrupt data */
      3 ill_act_lns bit (4),				/* Illegal Action Lines */
      3 ill_act_chan bit (3),				/* Illegal Action Channel (Port) */
      3 con_chan bit (3),				/* Connect Channel (Port) */
      3 fi bit (6),					/* Fault/Interrupt Vector Address */
    2 wd2 unaligned,				/* :: */
      3 trr bit (3),				/* Temporary Ring Register */
      3 tsr bit (15),				/* Temporary Segment Register */
      3 mbz bit (9),				/* :: */
      3 cpu bit (3),				/* Processor Number */
      3 tmd bit (6),				/* :: */
    2 wd3 fixed bin (35),				/* :: */
    2 wd4 unaligned,				/* :: */
      3 ict bit (18),				/* Instruction Counter */
      3 ir bit (18),				/* Indicator Register */
    2 wd5 unaligned,				/* :: */
      3 ca bit (18),				/* Computed Address */
      3 cus bit (12),				/* CU Status */
      3 ct_hold bit (6),				/* remember mod field */
    2 wd6 fixed bin (35),				/* Even Instruction */
    2 wd7 fixed bin (35);				/* Odd Instruction */

dcl  ill_act (0:15) char (37) varying int static options (constant) init
    ("...", "Unasigned", "Non Existant Address", "Fault on Condition",
     "Unassigned", "Data Parity (Store -> SCU)", "Data Parity in Store",
     "Data Parity (Store -> SCU & in Store)", "Not Control", "Port Not Enabled", "Illegal Command",
     "Store Not Ready", "ZAC Parity (Processor -> SCU)", "Data Parity (Processor -> SCU)",
     "ZAC parity (SCU -> Store)", "Data Parity (SCU -> Store)");

dcl  indrs (18:31) char (4) varying int static options (constant) init
    ("zero", "neg", "cary", "ovfl", "eovf", "eufl", "oflm", "tro", "par", "parm", "^bar", "tru", "mif", "abs");

dcl  APU (18:32) char (6) varying int static options (constant) init
    ("priv", "xsf", "sdwamm", "sd-on", "ptwamm", "pt-on", "pi-ap", "dsptw", "sdwnp",
     "sdwp", "ptw", "ptw2", "fap", "fanp", "fabs");

dcl  CU (18:29) char (3) varying int static options (constant) init
    ("rf", "rpt", "rd", "rl", "pot", "pon", "xde", "xdo", "itp", "rfi", "its", "fif");

dcl  g1and7flts (5) bit (6) int static options (constant) unaligned init
    ("01"b3, "11"b3, "21"b3, "31"b3, "37"b3);

dcl  grp1flt (0:19) char (24) varying int static options (constant) init
    ("Illegal Ring Order", "Not in Execute Bracket", "Execute Bit off",
     "Not In Read Bracket", "Read Bit Off", "Not In Write Bracket",
     "Write Bit Off", "Not A Gate", "Not In Call Bracket", "Outward Call",
     "Bad Outward Call", "Inward Return", "Cross Ring Transfer",
     "Ring Alarm", "Associative Memory", "Out of Segment Bounds",
     "Processor Parity Upper", "Processor Parity Lower",
     "SC To Proc. Seq. Error 1", "SC To Proc. Seq. Error 2");

dcl  grp2flt (0:6) char (24) varying int static options (constant) init
    ("Illegal Segment Number", "Illegal Op Code",
     "Illegal Address & Mod", "Illegal Slave Procedure",
     "Illegal Procedure", "Non Existant Address", "Out Of Bounds");

dcl  flt_int_typ (0:63) char (24) varying int static options (constant) init
    ("...", "Shutdown", "...", "Store", "Bulk Store 0 Term", "MME 1", "...", "Fault Tag 1",
     "IOM 0 Overhead", "Timer Runout", "IOM 1 Overhead", "Command", "IOM 2 Overhead", "Derail",
     "IOM 3 Overhead", "Lockup", "IOM 0 Terminate Ch 40-77", "Connect", "IOM 1 Terminate Ch 40-77", "Parity", "Bulk Store 1 Term",
     "Illegal Procedure", "...", "Op Not Complete", "IOM 0 Terminate", "Startup", "IOM 1 Terminate",
     "Overflow", "IOM 2 Terminate", "Divide Check", "IOM 3 Terminate", "Execute", "IOM 0 Marker Ch 40-77",
     "(DF0) Segment", "IOM 1 Marker Ch 40-77", "(DF1) Page", "...", "Directed Fault 2", "...", "Directed Fault 3",
     "IOM 0 Marker", "Access Violation", "IOM 1 Marker", "MME 2", "IOM 2 Marker", "MME 3",
     "IOM 3 Marker", "MME 4", "...", "(FT2) Linkage", "...", "Fault Tag 3", "...", "...", "...", "...",
     "IOM 0 Special", "...", "IOM 1 Special", "...", "IOM 2 Special", "...", "IOM 3 Special", "Trouble");

dcl  TAG_ptr ptr;					/* pointer to tag table */
dcl  tag_prt bit (1) init ("0"b);
dcl  tag_ char (4) init ("");
dcl  TAG_table (8) char (40) init (			/* tag table */
     "     au   qu   du   ic   al   ql   dl   ",
     "x0   x1   x2   x3   x4   x5   x6   x7   ",
     "n*  aau* aqu* ailtg ic* aal* aql* ailtg ",
     "0*  a1*  a2*  a3*  a4*  a5*  a6*  a7*  a",
     "fi   itp  iltg its  sd   scr  f2   f3   ",
     "ci   i    sc   ad   di   dic aid   idc a",
     "*n   *au  *qu  iltg *ic  *al  *ql  iltg ",
     "*0   *1   *2   *3   *4   *5   *6   *7   ");


dcl 1 TAG (64) based (TAG_ptr),
    2 code char (4) unal,
    2 pad bit (8) unal,
    2 chain bit (1);

/*  */

	reoffset = a_offset;			/* copy relative offset */

	if scud.wd0.psr = "0"b then
	     if scud.wd2.tsr = "0"b then do;
		call ioa_ ("No SCU data stored");
		return;
	     end;
	inst6 = reoffset + 6;
	if lg_sw then				/* user wants octal dump too */
	     call ioa_ ("^6o^-^4(^w ^)^/^-^4(^w ^)^/", reoffset, scup -> w);
	flt_ln, flt_bf = "";
	tsrpr = "0"b;				/* assume for now don't print tsr */
	flt_bf = flt_int_typ (fixed (scud.wd1.fi, 6));
	if substr (flt_bf, 1, 3) = "..." then
	     call ioa_ ("Fault/Interrupt (^o), Undefined", fixed (scud.wd1.fi, 6));
	else do;
	     flt_lng = length (flt_int_typ (fixed (scud.wd1.fi, 6)));
	     substr (flt_ln, 1, flt_lng) = substr (flt_bf, 1, flt_lng);
	     byptr = addrel (scup, 1);
	     if fltdtab (35) = "1"b then do;
		substr (flt_ln, flt_lng + 2, 5) = "Fault";
		lnpos = flt_lng + 8;
		do i = 1 to hbound (g1and7flts, 1);	/*  If grp 1 or 7 faults, don't print out tsr|ca */
		     if scud.wd1.fi = g1and7flts (i) then
			tsrpr = "1"b;
		end;
	     end;
	     else do;
		substr (flt_ln, flt_lng + 2, 9) = "Interrupt";
		lnpos = flt_lng + 12;
		tsrpr = "1"b;			/* don't print out tsr|ca for interrupts */
	     end;
	     flt_lng = fixed (scud.wd1.fi, 6);
	     call cv_bin_$oct (flt_lng, cvbinbuf);
	     substr (flt_ln, lnpos, 4) = "(" || substr (cvbinbuf, 11, 2) || ")";
	     lnpos = lnpos + 4;
	     j = lnpos;
	     do i = 0 to hbound (grp1flt, 1);
		if fltdtab (i) then do;
		     if substr (flt_ln, 1, 5) = "Store"|substr (flt_ln, 1, 12) = "Illegal Proc" then
			if i <= 6 then
			     call ioa_$rsnnl ("^a, ^a", flt_ln, j, flt_ln, grp2flt (i));
			else;
		     else call ioa_$rsnnl ("^a, ^a", flt_ln, j, flt_ln, grp1flt (i));
		end;
	     end;
	     call ioa_ ("^a", flt_ln);
	end;
	if ill_act_lns ^= "0"b then do;		/* display illegal action lines if present */
	     call ioa_ ("Illegal Action Code (^o) - ^a", fixed (scud.wd1.ill_act_lns, 4),
		ill_act (fixed (scud.wd1.ill_act_lns, 4)));
	end;
	if tsrpr then at_by_wd = "At";		/* if not printing tsr */
	else at_by_wd = "By";
	byptr = addrel (baseptr (fixed (scud.wd0.psr, 18)), fixed (scud.wd4.ict, 18));
	if ^tsrpr then
	     refptr = addrel (baseptr (fixed (scud.wd2.tsr, 18)), fixed (scud.wd5.ca, 18));
	call ioa_ ("^a: ^p  ^a", at_by_wd, byptr,
	     bce_segptr_to_name_ (byptr));
	if ^tsrpr then				/* if we want to print out tsr|ca */
	     call ioa_ ("Referencing: ^p  ^a", refptr,
		bce_segptr_to_name_ (refptr));
	call ioa_ ("On: cpu ^a (#^o)", cpul (fixed (scud.wd2.cpu, 3)),
	     fixed (scud.wd2.cpu, 3));
	flt_ln = "";
	byptr = addr (scud.wd4);			/* display Indicator register if any bits present */
	do i = lbound (indrs, 1) to hbound (indrs, 1);
	     if fltdtab (i) then
		call ioa_$rsnnl ("^a ^a,", flt_ln, j, flt_ln, indrs (i));
	end;
	if flt_ln ^= "" then do;
	     substr (flt_ln, j, 1) = " ";
	     call ioa_ ("Indicators: ^a", flt_ln);
	     flt_ln = "";
	end;
	byptr = addr (scud.wd0);			/* display interpreted APU status if any bits present */
	do i = lbound (APU, 1) to hbound (APU, 1);
	     if fltdtab (i) then
		call ioa_$rsnnl ("^a ^a,", flt_ln, j, flt_ln, APU (i));
	end;
	if flt_ln ^= "" then do;
	     substr (flt_ln, j, 1) = " ";
	     call ioa_ ("APU Status: ^a", flt_ln);
	     flt_ln = "";
	end;
	byptr = addr (scud.wd5);			/* display interprted CU status if any bits present */
	do i = lbound (CU, 1) to hbound (CU, 1);
	     if fltdtab (i) then
		call ioa_$rsnnl ("^a ^a,", flt_ln, j, flt_ln, CU (i));
	end;

	TAG_ptr = addr (TAG_table);
	i = fixed (wd5.ct_hold);

	if i ^= 0 then do;
	     tag_ = TAG.code (i+1);
	     tag_prt = "1"b;
	end;

	if (flt_ln ^= "") | (tag_ ^= "") then do;
	     substr (flt_ln, j, 1) = " ";
	     call ioa_ ("CU Status:  ^a  ^[^/CT Hold: ^a^]",
		flt_ln, tag_prt, tag_);
	end;


	call ioa_ ("Instructions: ");	/* display Instructions (words 6 & 7) */
	call bce_display_instruction_ (addr (scud.wd6), (1), reoffset + 6);
	call bce_display_instruction_ (addr (scud.wd7), (1), reoffset + 7);

/*  */

     end bce_display_scu_;
