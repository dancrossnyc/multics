" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1984 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************


" HISTORY COMMENTS:
"  1) change(87-03-02,Lippard), approve(87-04-06,MCR7658),
"     audit(87-06-10,Fawcett), install(87-07-17,MR12.1-1043):
"     Modified to complete cam_wait race fix.  (This fix from SGH (UNCA).)
"                                                      END HISTORY COMMENTS


" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	wired_fim
"
"	Last Modified: (Date and Reason)
"	Written 1/70 S.Webber
"	Modified by S.Webber 01/01/72 for followon
"	Modified by S.Webber 10/15/73 to add SPL/LPL code for all faults
"	Modified by S.Webber 12/18/73 to remove page fault code
"	Modified by Noel I. Morris 2/11/76 for new connect faults
"	Modified by Mike Grady 6/79 to do stop on prds
"	Modified by J. A. Bush 3/80 to store execute fault time in machine conditions
"	Modified by J. Bongiovanni 1/81 for fault_counters
"	Modified by J. Bongiovanni 2/81 for fast connect code,
"		traffic control race condition
"	Modified by J. A. Bush 6/3/81 to save fault time for unexpected faults
"	Modified by J. Bongiovanni 1/05/82 to fix CPU start wait bug
"	Modified by R. Coppola 10/12/83 to meter faults on a per-cpu basis
"         Modified 84-03-13 BIM (after Steve Harris) to close cam_wait race
"
"	The following entries exist within this procedure:
"
"	connect_handler	handles inter-processor communication
"
"	pre_empt_return	return from pxss after pre-empt
"
"	ignore		certain faults are ignored here
"
"	timer_runout	timer runout faults are mapped into
"			pre-empts
"
"	unexp_fault	unexpected faults come here during
"			system initialization
"
"	xec_fault		execute faults will cause return to BOS
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "


	name	wired_fim

" 

	include	pxss_page_stack

" 

	segdef	prs,scuinfo
	segdef	int_scuinfo
	segdef	trouble_prs,trouble_scuinfo
	segdef	ignore_scuinfo,ignore_pl
	segdef	my_linkage_ptr

	segdef	pre_empt_return
	segdef	ignore
	segdef	timer_runout
	segdef	connect_handler
	segdef	unexp_fault
	segdef	xec_fault




" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	The following variables are set up during initialization.
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

	even
prs:	bss	,2
scuinfo:	bss	,2

int_scuinfo:
	bss	,2

trouble_prs:
	bss	,2
trouble_scuinfo:
	bss	,2
ignore_pl:
	bss	,2
ignore_scuinfo:
	bss	,2

my_linkage_ptr:
	bss	,2

"

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	CONNECT_HANDLER -- Handle Connect Faults.
"
"	Connect faults may be sent for the following reasons:
"	1.	To cause a system trouble abort.
"	2.	To clear cache and associative memory.
"		(the clearing has already been done by
"		 prds$fast_connect_code by the time we get here)
"	3.	To wait for a new CPU to start up.
"	4.	To cause a processor to delete itself.
"	5.	To cause a process pre-empt.
"	6.	To cause a process stop.
"	7.	To cause an IPS event to be signalled.
"
"
"	By the time this entry has been called, the fast connect
"	in the prds has been called.  This code has done the
"	following:
"
"	1. 	If scs$fast_cam_pending was set for this cpu,
"		AND this is not a cam_wait exchange,
"		xed  scs$cam_pair
"		stz  scs$fast_cam_pending + <processor tag>
"	2.	Added 1 to the counter
"		wired_hardcore_data$fault_counters + <FAULT_NO_CON>
"
"         In the cam_wait case the clearing of the fast_cam_pending
"	must await our being done with the pds, since it may be
"	under eviction to move it to another scu. Clearing fast_cam_pending
"	informs cam_cache that we are in fact looping on scs$cam_wait,
"	AND NOTHING ELSE.
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
	even
connect_handler:
	spri	prs,*		save prs
	eppbp	prs,*		bp -> place for machine conditions
	sreg	bp|mc.regs	save regs
	spl	bp|mc.eis_info	save EIS ptrs and lgths
	epplp	my_linkage_ptr,*	set up linkage ptr

	tsx0	fim_util$v_time_init  start virtual time metering

	lda	scs$sys_trouble_pending  system trouble?
	cana	prds$processor_pattern  for this CPU?
	tnz	sys_trouble$sys_trouble  go handle it

	tsx0	fim_util$check_mct	go save M.C.s and hregs if trace is on
	nop			" return ic +1
	tsx0	fim_util$reset_mode_reg  start up hist regs again

	lda	prds$processor_pattern	see if we're waiting for
	cana	scs$cam_wait		for all cams to clear
	tnz	cam_wait			yes--go do it

	cana	scs$processor_start_wait  waiting for CPU to start up?
	tnz	start_wait	if so, go wait

	lxl1	prds$processor_tag	CPU tag in X1
	lda	scs$processor_data,1  look at CPU flags
	cana	processor_data.delete_cpu,du  is this CPU to delete itself?
	tnz	delete_cpu	if so, cause a pre-emption

more:	epplb	pds$apt_ptr,*	lb -> APT entry for this process
	lda	lb|apte.flags	look at process flags
	cana	apte.stop_pending,du  stop?
	tnz	stop		go handle stop

	cana	apte.pre_empt_pending,du  pre-empt?
	tnz	pre_empt		go handle pre-empt

	lda	lb|apte.ips_message	IPS message?
	tnz	ips		go handle IPS
	tra	exit		drop through to exit

"

ralr_set_1:
	lda	1,dl		cannot handle fault now
	sta	pds$alarm_ring	defer it until later

	odd
exit:
	tsx0	fim_util$v_time_calc  calculate virtual time

exit_1:
	lpl	bp|mc.eis_info	restore EIS ptrs and lths
	lra	pds$alarm_ring	FIM may have reset this
	lreg	bp|mc.regs	restore regs
	lpri	bp|mc.prs		and prs
	rcu	scuinfo,*		good-bye



" 

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	IGNORE -- several faults are ignored by directing them
"		to this entry.
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

ignore:
	spl	ignore_pl,*         make EIS happy
	lpl	ignore_pl,*
	rcu	ignore_scuinfo,*	restore the machine conditions



" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	XEC_FAULT and UNEXP_FAULT -- These entries cause
"		the system to abort.
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

xec_fault:
	spri	trouble_prs,*	save prs
	eppbp	trouble_prs,*	bp -> machine conditions
	sreg	bp|mc.regs	save regs
	spl	bp|mc.eis_info	save EIS ptrs and lths
	epplp	my_linkage_ptr,*	establish linkage ptr
	rccl	sys_info$clock_,*	read the clock
	staq	bp|mc.fault_time	and save in machine conditions

	lca	trbl_exec_flt,dl	set sys trouble indicator
	sta	scs$sys_trouble_pending  ..
	lda	pds$processid	save our process ID
	stac	scs$trouble_processid if we're the first
	tra	sys_trouble$sys_trouble  map into sys_trouble code


unexp_fault:
	spri	trouble_prs,*	save prs
	eppbp	trouble_prs,*	bp -> machine conditions
	sreg	bp|mc.regs	save regs
	spl	bp|mc.eis_info	save EIS ptrs and lths
	epplp	my_linkage_ptr,*	establish linkage ptr
	rccl	sys_info$clock_,*	read the clock
	staq	bp|mc.fault_time	and save in machine conditions

	lca	trbl_unexp_flt,dl	set sys trouble indicator
	sta	scs$sys_trouble_pending  ..
	lda	pds$processid	save our process ID
	stac	scs$trouble_processid if we're the first
	tra	sys_trouble$sys_trouble  map into sys_trouble code

" 

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	TIMER_RUNOUT - Timer runouts are mapped into pre-empts.
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

	even
timer_runout:
	spri	prs,*		save prs
	eppbp	prs,*		bp -> machine conditions

	sreg	bp|mc.regs	save regs
	spl	bp|mc.eis_info	save EIS ptrs and lths
	epplp	my_linkage_ptr,*	establish linkage ptr

	tsx0	fim_util$v_time_init  start virtual time meter

	tsx0	fim_util$check_mct	go save M.Cs ad hregs if trace is on
	nop			" return ic +1
	tsx0	fim_util$reset_mode_reg  start up hist regs
	lda	prds$processor_tag	get cpu num in A for index
	xec	fault_ctr_table,al	LB => per-cpu flt ctr array
	aos	lb|0+FAULT_NO_TRO
	
cause_pre_empt:
	epplb	pds$apt_ptr,*	lb -> APT entry for this process
	ldx0	apte.pre_empt_pending,du  get pre-empt indicator flag
	orsx0	lb|apte.flags	set pre-empt flag

	tra	pre_empt		join common code

fault_ctr_table: 
	epplb	wired_hardcore_data$cpu_a_flt_ctr_array
	epplb	wired_hardcore_data$cpu_b_flt_ctr_array
	epplb	wired_hardcore_data$cpu_c_flt_ctr_array
	epplb	wired_hardcore_data$cpu_d_flt_ctr_array
	epplb	wired_hardcore_data$cpu_e_flt_ctr_array
	epplb	wired_hardcore_data$cpu_f_flt_ctr_array
	epplb	wired_hardcore_data$cpu_g_flt_ctr_array
	epplb	wired_hardcore_data$cpu_h_flt_ctr_array


" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	DELETE_CPU - Cause a pre-empt to stop CPU.
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

delete_cpu:
	lca	1,dl		all ones in A
	era	prds$processor_pattern  get bit for CPU to be deleted
	ansa	scs$connect_lock	undo the connect lock

	tra	cause_pre_empt	now, cause a pre-empt to take place

" 

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	CAM_WAIT -- Wait for all cpus to clear, and originator to
"		  give "Go"
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

cam_wait: 
	eppsb	prds$		push a frame onto the prds
	ldx7	push		..
	tsx0	fim_util$push_stack_32  ..

	eppap	notify_regs	ap -> place to copy conditions
	tsx0	fim_util$copy_mc	copy the conditions into stack

" NB: once scs$fast_cam_pending is cleared by this processor it must
" not reference anything that the originator of the cam_wait condition
" might be in the process of moving -- see evict_page.alm.  This includes
" pds and prds pages which may exist outside of bootload memory.

	tsx0	fim_util$set_mask	must uninhibit to prevent lockup

	lda	prds$processor_pattern  get bit for this CPU

	xed	scs$cam_pair	clear AM (and maybe cache?)
	lxl7	prds$processor_tag
	stz	scs$fast_cam_pending,x7 signal that we are out of the way

	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->

	cana	scs$cam_wait	still waiting?
	tze	*+4		if not, exit loop
	llr	72
	llr	72
	tra	*-4		if so, wait more

	tsx0	fim_util$restore_mask  can inhibit again
	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>

	cams	0		now, clear A.M.'s
	camp	0		a second time

	eppap	prs,*		prepare to copy machine conditions back
	tsx0	fim_util$copy_mc	..

	eppap	sp|-32		get original stack end pointer
	spriap	sb|stack_header.stack_end_ptr  pop our stack frame
	tra	more		and leave

" 

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	START_WAIT - Wait until new CPU has started up.
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

start_wait:
	lca	1,dl		all ones in A
	era	prds$processor_pattern  turn off bit for this CPU
	ansa	scs$processor_start_wait  check ourselves off

	eppsb	prds$		push a frame onto the prds
	ldx7	push		..
	tsx0	fim_util$push_stack_32  ..

	eppap	notify_regs	ap -> place to copy conditions
	tsx0	fim_util$copy_mc	copy the conditions into stack

	tsx0	fim_util$set_mask	uninhibit to prevent lockups
	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->

	szn	scs$connect_lock	test connect lock
	tze	*+4		wait until it is cleared
	llr	72
	llr	72
	tra	*-4

	tsx0	fim_util$restore_mask  can inhibit again
	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>

	eppap	prs,*		prepare to copy machine conditions back
	tsx0	fim_util$copy_mc	..

	eppap	sp|-32		get original stack end pointer
	spriap	sb|stack_header.stack_end_ptr  pop our stack frame
	tra	exit		all finished waiting

" 

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	PRE_EMPT - Handle process pre-emptions.
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

pre_empt:
	tsx0	ring_test		ring 0 & not idle?
	tra	ralr_set_1	if so, delay this for later

	eppap	pds$page_fault_data	copy machine conditions
	tsx0	fim_util$copy_mc	..

	tsx0	fim_util$set_mask	mask system controller

	eppsb	prds$		establish stack frame on the prds
	ldx7	push		..
	tsx0	fim_util$push_stack	..
	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->

	tra	pxss$pre_empt	go to pxss



" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	PRE_EMPT_RETURN -- Transferred to when pre_empt has been processed
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

pre_empt_return:
	epplp	my_linkage_ptr,*
	eppbp	pds$page_fault_data	get pointer to machine conditions

	tsx0	fim_util$restore_mask  restore old controller mask
	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>

	ldaq	sb|stack_header.stack_begin_ptr  restore prds to virgin state
	staq	sb|stack_header.stack_end_ptr  ..

	odd
	tsx0	fim_util$v_time_calc  compute virtual time

	lpl	bp|mc.eis_info	restore EIS ptrs and lths
	lreg	bp|mc.regs	restore regs
	lpri	bp|mc.prs		and prs
	rcu	int_scuinfo,*	bye-bye

" 

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	STOP - Handle process stop
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

stop:
	tsx0	ring_test		ring 0 & not idle?
	tra	ralr_set_1	if so, delay handling this

	eppap	pds$page_fault_data	copy machine conditions
	tsx0	fim_util$copy_mc	..

	tsx0	fim_util$set_mask	mask system controller

	eppsb	prds$		Establish stack on prds
	ldx7	push		..
	tsx0	fim_util$push_stack	..
	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->

	tra	pxss$force_stop	go to pxss

	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>

" 

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	IPS - Handle Interprocess Signals
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

ips:
	tsx0	ring_test		ring 0 & not idle?
	tra	ralr_set_1	we'll hear about this later

	eppap	pds$signal_data	copy the machine conditions
	tsx0	fim_util$copy_mc	..

	eppsb	pds$stack_0_ptr,*	Establish pageable stack.
	ldx7	push		..
	tsx0	fim_util$push_stack	..

	tsx0	fim_util$v_time_calc  compute virtual time
	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->

	call	proc_int_handler$proc_int_handler

	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
	eppap	prs,*		copy SCU data only back
	mlr	(pr),(pr)		..
	desc9a	bp|mc.scu,8*4
	desc9a	ap|mc.scu,8*4

	sprisp	sb|stack_header.stack_end_ptr  release our stack frame
	tra	exit_1		all finished

" 

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	RING_TEST - internal subroutine to see if process
"		is in ring 0 and not an idle process
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

ring_test:
	lda	bp|mc.scu.ppr.prr_word  get PRR
	ana	scu.ppr.prr_mask,du ..
	tnz	1,0		if outer ring, take second return

	lda	lb|apte.flags	get process flags
	cana	apte.idle,du	idle process?
	tze	0,0		if not, take first return

	epaq	sp|0		get stack pointer in AQ
	eax7	0,au		stack segno in X7
	cmpx7	trouble_scuinfo	is it prds?
	tze	0,0		if so, go away
	tra	1,0		if not, take second return

" 

push:	push


	include	mc

" 

	include	stack_header

" 

	include	scs

	include	sys_trouble_codes

" 

	include	apte
"
	include	fault_vector



	

	end
