" ******************************************
" *                                        *
" * Copyright, (C) Honeywell Limited, 1985 *
" *                                        *
" ******************************************
	name	double_exponential_
" Modification history:
"	Written by H. Hoover, M. Mabey, and B. Wong, April 1985,
"	based on GCOS routine '7naq'.
"
" Function:  Calculates the exponential function 'e**x' to double precision
"	accuracy in either BFP or HFP mode.
"
" Entry:	through the appropriately named entry point with:
" 	EAQ = the argument x.
"	PR2 = the address of a 8 word, even-word aligned scratch area.
"	PR3 = the return address.
"
" Exit:	EAQ = the desired exponential
"
" Uses:	X0, X1, X2
"	X0 = saves a return address from part_exp2
"	X1 = index to the table 'two_to_the'
"	X2 = indicates BFP or HFP mode - all the floating point math
"	     routines use this register for the same purpose.

	segref	math_constants_,almost_one,hfp_almost_one,log_2_of_e,max_value

	equ	BFP,0
	equ	HFP,2
	equ	iy,0
	equ 	four_ry,2
	equ 	z,2
	equ	zz,4
	equ 	p,2
	equ	q_minus_p,6
	equ	result,6
	equ	x,0

	bool	bfp_exponent_of_log2_of_e,002000
	bool	hfp_exponent_of_log16_of_e,000000
	bool	M0.5H,001400	" yields HFP -0.5 under 'du' modification
	bool	P1.0H,002040	" yields HFP +1.0 under 'du' modification
	bool	P2.0H,002100	" yields HFP +2.0 under 'du' modification

	segdef	double_exponential_,hfp_double_exponential_


double_exponential_:
	eax2	BFP		" 2 word offset for BFP constants
	dfcmp	lb		" if x <= -89.4159862922329449148:
	tpnz	3,ic
	   fld	   =0.0,du	"    result = 0
	   tra	   pr3|0		"    return
	dfcmp	ub		" if x >= 88.0296919311130543 goto overflow_error
	tpl	overflow_error
	dfst	pr2|x
	ldaq	bfp_mantissa_of_log2_of_e
	lde	bfp_exponent_of_log2_of_e,du
	dfmp	pr2|x
	
	fad	=1.0,du		" EAQ := y + 1

	ufa	=7b25,du		" AQ := 8/floor(y+1),64/fraction part of y
	sta	pr2|iy
	ora	=o776000,du	" AQ := 8/-1,64/fraction part of y
	lde	=7b25,du		" EAQ := ry = unnormalized y - floor(y+1)
	fad	=0.0,du		" EAQ := ry = normalized y - floor(y+1)

	dfcmp	=-0.5d0
	tmi	3,ic		" if ry >= -0.5
	   tsx0	   part_exp2	"    then result = part_exp2 (ry)

	tra	4,ic		" else
	   fad	   =1.0,du	"    EAQ := ry + 1
	   tsx0	   part_exp2	"    EAQ := part_exp2 (ry + 1)
	   fmp	   =0.5,du	"    result = 0.5*part_exp2 (ry + 1)

	ade	pr2|iy		" addr (result) -> expon = addr (result) -> expon + iy
	tra	pr3|0		" return result in EAQ


hfp_double_exponential_:
	eax2	HFP		" 2 word offset for HFP constants
	dfcmp	hfp_lb		" if x <= -357.663945168931779659:
	tpnz	3,ic
	   fld	   =0.0,du	"    result = 0
	   tra	   pr3|0		"    return
	dfcmp	hfp_ub		" if x >= 352.1187677244522171839 goto overflow_error
	tpl	overflow_error
	dfcmg	hfp_eps		" if abs (x) < 1.08420217248550443e-19:
	tpl	3,ic
	   fld	   P1.0H,du	"   result = 1.0
	   tra	   pr3|0		"   return
	dfst	pr2|x
	ldaq	hfp_mantissa_of_log16_of_e
	lde	hfp_exponent_of_log16_of_e,du
	dfmp	pr2|x
	fad	P1.0H,du		" EAQ := y + 1

	fmp	P2.0H,du
	ufa	=2b25,du		" AQ := 8/floor(y+1),64/fraction part of y
	sta	pr2|iy
	ora	=o776000,du	" AQ := 8/-1,64/fraction part of y
	lde	=2b25,du		" EAQ := unnormalized 2*(y - floor(y+1))
	fad	=0.0,du		" EAQ := 2*(y - floor(y+1))
	fmp	P2.0H,du		" EAQ := 4*(y - floor(y+1))

	dfst	pr2|four_ry
	fad	=0.5,du		" EAQ := 4 * ry + 0.5

" The next four instructions truncate a floating point number in the EAQ 
" to an integer in the AQ in effect calculating s = floor (4 * ry + 0.5).

	dufa	hfp_almost_one
 	dufs	hfp_almost_one
	ufm	P2.0H,du
	ufa	=18b25,du		" AQ := s = floor (4*ry + 0.5)

	eax1	0,ql		" X2 := s = floor (4*ry + 0.5)

" The next two instructions will convert the current representation of s
" to a floating point representation.

	fad	=0.0,du
	fmp	M0.5H,du		" EAQ := -(s)

	dfad	pr2|four_ry	" EAQ := 4*ry - s

	tsx0	part_exp2		" result = part_exp2 (4*ry -s)
	
	fmp	two_to_the,x1	" result = two_to_the (s) * part_exp2 (4*ry - s)
	ade	pr2|iy		" addr (result) -> expon = addr (result) -> expon + iy
	tra	pr3|0		" return result in EAQ


"  The function part_exp2 calculates 2**z, given z in the range [-0.5, 0.5)
"  in the EAQ.

part_exp2:
	fad	=0.0,du		" normalize z
	fcmg	eps,x2
	tpl	3,ic		" if abs (z) < 1.56417309e-19:
	   fld	   one,x2		"    result = 1.0
	   tra	   0,x0		"    return

	dfstr	pr2|z
	dfmp	pr2|z		" zz = z*z
	dfstr	pr2|zz

	dfmp	p2,x2		" calculate p = z*(p0 + zz*(p1 + zz*p2))
	dfad	p1,x2
	dfmp	pr2|zz
	dfad	p0,x2
	dfmp	pr2|z
	dfstr	pr2|p

	dfld	pr2|zz		" calculate q = q0 + zz*(q1 + zz*(q2 + zz))
	dfad	q2,x2
	dfmp	pr2|zz
	dfad	q1,x2
	dfmp	pr2|zz
	dfad	q0,x2

	dfsb	pr2|p		" calculate q - p
	dfstr	pr2|q_minus_p
	dfad	pr2|p		" restore q
	dfad	pr2|p		" calculate q + p
	dfdv	pr2|q_minus_p	" calculate result = (q + p) / (q - p)

	tra	0,x0		" return to caller	


overflow_error:
	dfld	max_value
	dfad	max_value		" cause an overflow
	dfld	max_value
	tra	pr3|0		" return to caller

	even

eps:	dec	1.56417309d-19
	oct	742134252166,000000000000
hfp_eps:	oct	742100000427,165257035710	" 1.0842202172485504434d-19
bfp_mantissa_of_log2_of_e:
          oct	270524354512,701376056737
hfp_mantissa_of_log16_of_e:
	oct	134252166245,340577027370
one:	dec	1.0d0
	oct	002040000000,000000000000
p0:	dec	2.0803843466946630014d6
	oct	014077372002,614037317645
p1:	dec	3.0286971697440362990d4
	oct	010354473706,022472775644
p2:	dec	6.0614853300610808416d1
	oct	004171165470,152076602243
q0:	dec	6.0027203602388325282d6
	oct	014267140402,703423455073
q1:	dec	3.2772515180829144230d5
	oct	012240013223,334720774015
q2:	dec	1.7492876890930764038d3
	oct	006332522322,776034267264
ub:	dec	8.80296919311130543d01	" 2**127 - 2**64 = e**88.0296919311130543
lb:	dec	-8.94159862922329449148d01	" 2**(-129) = e**-89.4159862922329449148
hfp_lb:	oct	007723225403,660372147166	" 16**(-129) = e**-357.663945168931779659
hfp_ub:	oct	006054007463,617610536654	" 16**127 - 16**64 = e**352.1187677244522171839

" Table of two_to_the
	oct	000040000000		" 0.0625
	oct	000100000000		" 0.125
	oct	000200000000		" 0.25
	oct	000400000000		" 0.5
two_to_the:
	oct	002040000000		" 1.0

	end
