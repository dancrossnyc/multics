" ******************************************
" *                                        *
" * Copyright, (C) Honeywell Limited, 1984 *
" *                                        *
" ******************************************
	name	fort_math_ops_

	include	stack_frame

	equ	complex,56
	equ	temp_pt,40

	macro	define	operator,store_inst,arg_count,approximator
	segdef	&1
&1:
	&2	pr6|complex
	tsx0	call_&3_arg_op
	epp5	&4
	&end

	define	cabs,staq,1,<cabs_>|[cabs_]
	define	ccos,staq,1,<ccos_>|[ccos_]
	define	cexp,staq,1,<cexp_>|[cexp_]
	define	clog,staq,1,<clog_>|[clog_]
	define	cmpx_p_cmpx,staq,2,<cxp2_>|[cxp2_]
	define	cosh,dfst,1,<cosh_>|[cosh_]
	define	csin,staq,1,<csin_>|[csin_]
	define	csqrt,staq,1,<csqrt_>|[csqrt_]
	define	dcosh,dfst,1,<dcosh_>|[dcosh_]
	define	dmod,dfst,2,<fort_bfp_builtins_>|[dmod_]
	define	dsinh,dfst,1,<dsinh_>|[dsinh_]
	define	dtanh,dfst,1,<dtanh_>|[dtanh_]
	define	sinh,dfst,1,<sinh_>|[sinh_]
	define	tanh,dfst,1,<tanh_>|[tanh_]

	define	hfp_cabs,staq,1,<fort_hfp_builtins_>|[cabs_]
	define	hfp_ccos,staq,1,<fort_hfp_builtins_>|[ccos_]
	define	hfp_cexp,staq,1,<fort_hfp_builtins_>|[cexp_]
	define	hfp_clog,staq,1,<fort_hfp_builtins_>|[clog_]
	define	hfp_cmpx_p_cmpx,staq,2,<fort_hfp_builtins_>|[cxp2_]
	define	hfp_cosh,dfst,1,<fort_hfp_builtins_>|[cosh_]
	define	hfp_csin,staq,1,<fort_hfp_builtins_>|[csin_]
	define	hfp_csqrt,staq,1,<fort_hfp_builtins_>|[csqrt_]
	define	hfp_dcosh,dfst,1,<fort_hfp_builtins_>|[dcosh_]
	define	hfp_dmod,dfst,2,<fort_hfp_builtins_>|[dmod_]
	define	hfp_dsinh,dfst,1,<fort_hfp_builtins_>|[dsinh_]
	define	hfp_dtanh,dfst,1,<fort_hfp_builtins_>|[dtanh_]
	define	hfp_sinh,dfst,1,<fort_hfp_builtins_>|[sinh_]
	define	hfp_tanh,dfst,1,<fort_hfp_builtins_>|[tanh_]

call_1_arg_op:
	spri3	pr6|stack_frame.return_ptr	save return address
	sti	pr6|stack_frame.return_ptr+1	save indicators
	epp0	pr2|0		build arg list:
	fld	2*2048,dl
	staq	pr0|0		  set arg count
	epp7	pr6|complex
	spri7	pr0|2		  set arg address
	epp7	pr6|temp_pt
	spri7	pr0|4		  set result address
	tsx1	<pl1_operators_>|[get_our_lp]
	xec	0,x0		PR5 = address of approximator
	call6	pr5|0		invoke approximator

call_2_arg_op:
	spri3	pr6|stack_frame.return_ptr	save return address
	sti	pr6|stack_frame.return_ptr+1	save indicators
	epp0	pr2|0		build arg list:
	fld	3*2048,dl
	staq	pr0|0		  set arg count
	epp7	pr6|complex
	spri7	pr0|2		  set 1st arg address
	spri1	pr0|4		  set 2nd arg address
	epp7	pr6|temp_pt
	spri7	pr0|6		  set result address
	tsx1	<pl1_operators_>|[get_our_lp]
	xec	0,x0		PR5 = address of approximator
	call6	pr5|0		invoke approximator

	end
