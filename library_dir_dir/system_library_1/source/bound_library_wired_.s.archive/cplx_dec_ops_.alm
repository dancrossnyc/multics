" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

"
"	cplx_dec_ops_ -- a set of operators to do complex decimal multiplication and division
"
"	Written 8 October 1973 by RAB
"
"	These routines are called with a pointer to a work area in the ab and a pointer
"	to a string of 2 or 3 descriptors in the bp.
"

	name	cplx_dec_ops_
"
	equ	tbp,38	contains segment number of calling program
	equ	dtemp1,0
	equ	dtemp2,16
	equ	dtemp3,32
"
"	mpcdec -- complex decimal multiplication
"
"	(a + bi) * (c + di) = (ac - bd) + (ad + bc)i
"
	segdef	mpcdec
mpcdec:
	tsx4	cplx_setup
"
	mp3d	(pr,id),(pr,id),(pr),round
	arg	bp|1
	arg	bp|2
	desc9fl	ab|dtemp1,61
	mp3d	(pr,id,x2),(pr,id,x3),(pr),round
	arg	bp|1
	arg	bp|2
	desc9fl	ab|dtemp2,61
	xec	sb3d,al		pick the instruction on the basis of target type
	desc9fl	ab|dtemp2,61
	desc9fl	ab|dtemp1,61
	arg	bp|0
"
	mp3d	(pr,id),(pr,id,x3),(pr),round
	arg	bp|1
	arg	bp|2
	desc9fl	ab|dtemp1,61
	mp3d	(pr,id,x2),(pr,id),(pr),round
	arg	bp|1
	arg	bp|2
	desc9fl	ab|dtemp2,61
	xec	ad3d,al
	desc9fl	ab|dtemp1,61
	desc9fl	ab|dtemp2,61
	arg	bp|0
	tra	sp|tbp,*0
"
sb3d:	sb3d	(pr),(pr),(pr,id),round
	sb3d	(pr),(pr),(pr,id)
ad3d:	ad3d	(pr),(pr),(pr,id,x1),round
	ad3d	(pr),(pr),(pr,id,x1)
"
"	dvcdec -- complex decimal / complex decimal
"
"	(a + bi)   (ac + bd)   (bc - ad)i
"	-------- = --------- + ----------
"	(c + di)    2    2      2    2
"		 c  + d      c  + d
"
	segdef	dvcdec
dvcdec:
	tsx4	cplx_setup
"
	mp3d	(pr,id),(pr,id),(pr),round
	arg	bp|2
	arg	bp|2
	desc9fl	ab|dtemp1,61
	mp3d	(pr,id,x3),(pr,id,x3),(pr),round
	arg	bp|2
	arg	bp|2
	desc9fl	ab|dtemp2,61
	ad2d	(pr),(pr),round
	desc9fl	ab|dtemp2,61
	desc9fl	ab|dtemp1,61
"
	mp3d	(pr,id),(pr,id),(pr),round
	arg	bp|1
	arg	bp|2
	desc9fl	ab|dtemp2,61
	mp3d	(pr,id,x2),(pr,id,x3),(pr),round
	arg	bp|1
	arg	bp|2
	desc9fl	ab|dtemp3,61
	ad2d	(pr),(pr),round
	desc9fl	ab|dtemp3,61
	desc9fl	ab|dtemp2,61
	tsx4	dv3d_real_vector,al		divide sequence depends on target type
"
	mp3d	(pr,id,x2),(pr,id),(pr),round
	arg	bp|1
	arg	bp|2
	desc9fl	ab|dtemp2,61
	mp3d	(pr,id),(pr,id,x3),(pr),round
	arg	bp|1
	arg	bp|2
	desc9fl	ab|dtemp3,61
	sb2d	(pr),(pr),round
	desc9fl	ab|dtemp3,61
	desc9fl	ab|dtemp2,61
	tra	dv3d_imag_vector,al
"
"	dvrcdec -- real decimal / complex decimal
"
"	  a         ac       (ad)i
"	------ = ------- - -------
"	c + di    2    2    2    2
"	         c  + d    c  + d
	segdef	dvrcdec
dvrcdec:
	tsx4	cplx_setup
"
	mp3d	(pr,id),(pr,id),(pr),round
	arg	bp|2
	arg	bp|2
	desc9fl	ab|dtemp1,61
	mp3d	(pr,id,x3),(pr,id,x3),(pr),round
	arg	bp|2
	arg	bp|2
	desc9fl	ab|dtemp2,61
	ad2d	(pr),(pr),round
	desc9fl	ab|dtemp2,61
	desc9fl	ab|dtemp1,61
"
	mp3d	(pr,id),(pr,id),(pr),round
	arg	bp|1
	arg	bp|2
	desc9fl	ab|dtemp2,61
	tsx4	dv3d_real_vector,al
"
	mp3d	(pr,id),(pr,id,x3),(pr),round
	arg	bp|1
	arg	bp|2
	desc9fl	ab|dtemp2,61
	mp2d	(0),(pr),round
	desc9ls	minus_1,2,0
	desc9fl	ab|dtemp2,61
	tra	dv3d_imag_vector,al
"
minus_1:	aci	"-1"
"
dv3d_real_vector:
	tra	dv3d_float_real
	tra	dv3d_fixed_real
dv3d_imag_vector:
	tra	dv3d_float_imag
	tra	dv3d_fixed_imag
"
dv3d_float_real:
	dv3d	(pr),(pr),(pr)
	desc9fl	ab|dtemp1,61
	desc9fl	ab|dtemp2,61
	desc9fl	ab|dtemp3,63
	mvn	(pr),(pr,id),round
	desc9fl	ab|dtemp3,63
	arg	bp|0
	tra	0,4
"
dv3d_fixed_real:
	dv3d	(pr),(pr),(pr,id)
	desc9fl	ab|dtemp1,61
	desc9fl	ab|dtemp2,61
	arg	bp|0
	tra	0,4
"
"
dv3d_float_imag:
	dv3d	(pr),(pr),(pr)
	desc9fl	ab|dtemp1,61
	desc9fl	ab|dtemp2,61
	desc9fl	ab|dtemp3,63
	mvn	(pr),(pr,id,x1),round
	desc9fl	ab|dtemp3,63
	arg	bp|0
	tra	sp|tbp,*0
"
dv3d_fixed_imag:
	dv3d	(pr),(pr),(pr,id,x1)
	desc9fl	ab|dtemp1,61
	desc9fl	ab|dtemp2,61
	arg	bp|0
	tra	sp|tbp,*0
"
"
cplx_setup:
	lda	bp|0	get first descriptor
	eax1	0,al	put lower half into x1
	anx1	63,du	mask to get the length
	ars	12	shift type code into low order bit
	ana	1,dl	mask out rest of a
	lxl2	bp|1	get second descriptor
	anx2	63,du	mask to get length
	lxl3	bp|2
	anx3	63,du
	tra	0,4	return
"
"
"	                    2    2
"	abs(a + bi) = sqrt(a  + b )
"
	segdef	cabs
cabs:
	tsx4	cplx_setup
"
	mp3d	(pr,id),(pr,id),(pr),round
	arg	bp|1
	arg	bp|1
	desc9fl	ab|dtemp1,61
	mp3d	(pr,id,x2),(pr,id,x2),(pr),round
	arg	bp|1
	arg	bp|1
	desc9fl	ab|dtemp2,61
	ad2d	(pr),(pr),round
	desc9fl	ab|dtemp2,61
	desc9fl	ab|dtemp1,61
"
	tsx4	decimal_sqrt_
"
	tra	sp|tbp,*0
"
	equ	result,dtemp2
	equ	arg,dtemp3
	equ	atemp,48
	equ	i,64
"
"	decimal_sqrt_ uses repeated subtractions to calculate its result.
"	It expects a float dec(59) argument at ab|dtemp1 and calculates
"	a float dec(59) result which it then assigns to the target at bp|0,*.
"
decimal_sqrt_:
	sreg	sp|8	save registers
"
	ldq	ab|dtemp1+15	get exponent
	qls	1		"
	qrs	28		"
"
"	This algorithm requires that we imagine the decimal point to be at
"	the left of the string, so we add 59 to the exponent.
"
	adq	59,dl
"
"	Our intermediate calculations will use fixed dec(61)
"
	mvn	(0),(pr)
	desc9ls	zero,2,0
	desc9ls	ab|result,62,0
	mvn	(0),(pr)
	desc9ls	zero,2,0
	desc9ls	ab|arg,62,0
"
"	Move in the argument left normalized
"
	tct	(pr)	scan for first non-zero
	desc9a	ab|dtemp1(1),59
	arg	zero_table-12
	arg	sp|46
	ttn	ds_done
"
	lda	sp|46	get offset of non-zero character
	ana	262143,dl	mask
	eax2	0,al	save
	neg	0
	sta	sp|46	store negated result
	adq	sp|46	adjust exponent by amount chopped off
	eax3	59,al	get length to move
"
	mlr	(pr,rl,x2),(pr,rl)
	desc9a	ab|dtemp1(1),x3
	desc9a	ab|arg(1),x3
"
"	Initialize length registers
"
	eax2	62	iprec = 61
	eax3	2	rprec1 = 1
	eax4	3	iprec1 = 2
"
"	Initialize i to +01000...0 
"
	mvn	(0),(pr)
	desc9ls	zero,2,0
	desc9ls	ab|i,62,0
	lda	=o061000,dl
	stba	ab|i,10
"
"	If the exponent is odd, i and the exponent must be adjusted.
"
	canq	1,dl
	tze	set_exp
"
	adq	1,dl	exp = exp + 1
	eax4	2	iprec1 = 1
	lda	=o000061060000	change i to +1000...0
	stba	ab|i,30
"
"	Get result exponent by dividing by 2
"
set_exp:
	qrs	1
"
"	We repeatedly subtract until we get a negative number
"
sloop:
	sb3d	(pr,rl),(pr),(pr)	atemp = arg - i
	desc9ls	ab|i,x2,0
	desc9ls	ab|arg,62,0
	desc9ls	ab|atemp,62,0
	tmi	new_round
"
	mvn	(pr),(pr)	arg = atemp
	desc9ls	ab|atemp,62,0
	desc9ls	ab|arg,62,0
	ad2d	(0),(pr,rl)	i = i + 2
	desc9ls	two,2,0
	desc9ls	ab|i,x4,0
	ad2d	(0),(pr,rl)	result = result + 1
	desc9ls	one,2,0
	desc9ls	ab|result,x3,0
	tra	sloop
"
"	Shift precisions for next round
"
new_round:
	eax3	1,x3	rprec1 = rprec1 + 1
	cmpx3	60,du
	tpnz	ds_done
"
	eax4	1,4	iprec1 = iprec1 + 1
	sb2d	(0),(pr,rl)	i = i - 9
	desc9ls	nine,2,0
	desc9ls	ab|i,x4,0
	sbx2	1,du	iprec = iprec - 1
	tra	sloop
"
"	Return sequence
"
"	First move decimal pt back to right end of string
"
ds_done:
	sbq	59,dl
"
"	Convert result to floating point
"
	anq	255,dl	form a fixed bin(7) and convert to string
	qls	27	shift into position
	stbq	ab|result+15,40	store exponent
	lreg	sp|8	restore registers
	xec	dsmove,al
	desc9fl	ab|result,61
	arg	bp|0
	tra	0,4	return
"
dsmove:	mvn	(pr),(pr,id),round
	mvn	(pr),(pr,id)
"
zero:	aci	"+0"
one:	aci	"+1"
two:	aci	"+2"
nine:	aci	"+9"
"
zero_table:
	oct	000001002003,004005006007,010011000000
	end
