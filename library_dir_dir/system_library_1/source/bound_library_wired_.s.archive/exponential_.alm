" ******************************************
" *                                        *
" * Copyright, (C) Honeywell Limited, 1985 *
" *                                        *
" ******************************************
	name	exponential_
" Modification history:
"	Written by H. Hoover, M. Mabey, and B. Wong, April 1985,
"	based on GCOS routine '7naz'.
"
" Function:  Calculates the exponential function 'e**x' to single precision
"	accuracy in either BFP or HFP mode.
"
" Entry:	through the appropriately named entry point with:
" 	EAQ = the argument x.
"	PR2 = the address of a 4 word, even-word aligned scratch area.
"	PR3 = the return address.
"
" Exit:	EAQ = the desired exponential
"
" Uses:	X0
"	X0 = index to the table "scale"


	segref	math_constants_,almost_one,hfp_almost_one,log_2_of_e,max_value

	equ	iy,0
	equ 	z,2

	bool	M0.5H,001400	" yields HFP -0.5 under 'du' modification
	bool	P1.0H,002040	" yields HFP +1.0 under 'du' modification
	bool	P2.0H,002100	" yields HFP +2.0 under 'du' modification

	segdef	exponential_,hfp_exponential_


exponential_:
	fcmp	lb		" if x <= -89.415987: 
	tpnz	3,ic
	   fld	   =0.0,du	"    result = 0
	   tra	   pr3|0		"    return
	fcmp	ub		" if x >= 88.0296926 goto overflow_error
	tpl	overflow_error
	dfmp	log_2_of_e	" y = x*log_2_of_e
	fad	=1.0,du		" EAQ := y + 1

	ufa	=7b25,du		" AQ := 8/floor(y+1),64/fraction part of y
	sta	pr2|iy
	ora	=o776000,du	" AQ := 8/-1,64/fraction part of y
	lde	=7b25,du		" EAQ := ry = unnormalized y - floor(y+1)
	fad	=0.0,du		" EAQ := ry = normalized y - floor(y+1)
				" result = part_exp2 (ry)

" The function part_exp2 calculates 2**z, given z in the range [-1, 0)
" in the EAQ.

part_exp2:
	fcmg	eps
	tpl	3,ic		" if abs (z) < 1.56417309e-19:
	   fld	   =1.0,du	"    result = 1.0
	   tra	   pr3|0		"    return

	frd	0
	fst	pr2|z

	fmp	p7		" result = p(z)
	dfad	p6
	fmp	pr2|z
	dfad	p5
	fmp	pr2|z
	dfad	p4
	fmp	pr2|z
	dfad	p3
	fmp	pr2|z
	dfad	p2
	fmp	pr2|z
	dfad	p1
	fmp	pr2|z
	dfad	p0

	ade	pr2|iy		" addr (result) -> expon = addr (result) -> expon + iy
	tra	pr3|0		" return result in EAQ



hfp_exponential_:
	fcmp	hfp_lb		" if x <= -357.6639451:
	tpnz	3,ic
	   fld	   =0.0,du	"    result = 0
	   tra	   pr3|0		"    return
	fcmp	hfp_ub		" if x >= 352.1187677 goto overflow_error
	tpl	overflow_error
	fcmg	hfp_eps		" if abs (x) < 1.0842021e-19:
	tpl	3,ic
	   fld	   P1.0H,du	"   result = 1.0
	   tra	   pr3|0		"   return
	dfmp	hfp_log_16_of_e	" y = x*log_16_of_e
	fad	P1.0H,du		" EAQ := y + 1

	fmp	P2.0H,du
	ufa	=2b25,du		" AQ := 8/floor(y+1),64/fraction part of y
	sta	pr2|iy
	ora	=o776000,du	" AQ := 8/-1,64/fraction part of y
	lde	=2b25,du		" EAQ := unnormalized 2*(y - floor(y+1))
	fad	=0.0,du		" EAQ := 2*(y - floor(y+1))
	fmp	P2.0H,du		" EAQ := ry = 4*(y - floor(y+1))

	eax0	0		" scale = 1.0

	even
do_while_ry_less_than_neg_one:
	dfcmp	=-1.0d0		" do while ry < -1.0:
	tpl	hfp_part_exp2
	   adx0	   =1,du		"    scale = 0.5*scale
	   fad	   P1.0H,du	"    ry = ry + 1
	   tra	   do_while_ry_less_than_neg_one

				" result = part_exp2 (ry)

" The function hfp_part_exp2 calculates 2**z, given z in the range [-1, 0)
" in the EAQ.

hfp_part_exp2:
	fcmg	hfp_eps1
	tpl	3,ic		" if abs (z) < 1.56417309e-19:
	   fld	   P1.0H,du	"   result = 1.0
	   tra	   pr3|0		"   return

	frd	0
	fst	pr2|z

	fmp	hfp_p7		" result = p(z)
	dfad	hfp_p6
	fmp	pr2|z
	dfad	hfp_p5
	fmp	pr2|z
	dfad	hfp_p4
	fmp	pr2|z
	dfad	hfp_p3
	fmp	pr2|z
	dfad	hfp_p2
	fmp	pr2|z
	dfad	hfp_p1
	fmp	pr2|z
	dfad	hfp_p0

	fmp	scale,x0		" result = scale * part_exp2 (ry)
	ade	pr2|iy		" addr (result) -> expon = addr (result) -> expon + iy
	tra	pr3|0		" return result in EAQ


overflow_error:
	fld	max_value
	fad	max_value		" cause an overflow
	fld	max_value
	tra	pr3|0		" return to caller

	even

eps:	dec	1.56417309d-19
hfp_eps:	oct	742100000427,000000000000	" 1.08422022d-19
hfp_eps1:
	oct	742134252166,000000000000	" 1.56417309d-19
hfp_log_16_of_e:
	oct	000270524354,512701376057	" log_16_of_e = 0.36067376022224085183998d0

p0:	dec	0.999999999959788989221d00
hfp_p0:	oct	000777777777,775171146650
p1:	dec	0.693147175773076184335d00
hfp_p1:	oct	000542710277,064122746306
p2:	dec	0.240226411617528907564d00
hfp_p2:	oct	000172775723,130414032243
p3:	dec	0.555033746338694398430d-01
hfp_p3:	oct	776706536015,336576334575
p4:	dec	0.961531912935043645900d-02
hfp_p4:	oct	776116611444,463376701613
p5:	dec	0.132743818109838796600d-02
hfp_p5:	oct	774255772674,464260106540
p6:	dec	0.147007243118869978000d-03
hfp_p6:	oct	772464227646,455135010071
p7:	dec	0.107493818486964670000d-04
hfp_p7:	oct	770550540762,530201244720

ub:	dec	8.802969265d01		" 2**127 - 2**100 = e**88.0296926
lb:	dec	-8.9415987d01		" 2**(-129) = e**-89.415987
hfp_ub:	oct	006054007464,000000000000	" 16**127 - 16**100 = e**352.1187677
hfp_lb:	oct	007723225403,000000000000	" 16**(-129) = e**-357.6639541

scale:	oct	002040000000		" 1
	oct	000400000000		" 0.5
	oct	000200000000		" 0.25
	oct	000100000000		" 0.125
	oct	000040000000		" 0.0625

	end
