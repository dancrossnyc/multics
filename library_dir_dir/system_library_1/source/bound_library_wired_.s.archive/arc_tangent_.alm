" ******************************************
" *                                        *
" * Copyright, (C) Honeywell Limited, 1985 *
" *                                        *
" ******************************************

" HISTORY COMMENTS:
"  1) change(86-07-14,BWong), approve(86-07-14,MCR7413),
"     audit(86-07-16,Ginter), install(86-07-28,MR12.0-1104):
"     Make code more efficient.
"                                                      END HISTORY COMMENTS


name	arc_tangent_
" Modification history:
"	Written by H. Hoover, M. Mabey, and B. Wong, April 1985,
"	based on the GCOS routine '7naj'.
"
" Function:  Approximate to single precision the principal value, in radians
"	or degrees, of the arctangent of (x, y) or z where z=x/y for any
"         valid input argument(s).  For atan(z) the answer is in quadrant 1
"	or 4 (-pi/2<=atan<=pi/2, -90<=atan<=90).  For atan(x,y) the answer
"	will be in the correct quadrant (-pi<=atan2<=pi, -180<=atan2<=180).
"
"	Modified: March 18, 1986 by B. Wong - Make code more efficient by
"		replacing 
"
"		  range_0_to_1:	fcmg	tan_pi_by_32,x2
"				tmi	range_0
"		  range_1:	tra	calculate_for_range_1_to_7
"		  range_0:
"
"		with
"
"		  range_0_to_1:	fcmg	tan_pi_by_32,x2
"		  range_1:	tpl	calculate_for_range_1_to_7
"		  range_0:
"
" Entry:	through the appropriately named entry point with:
" 	EAQ = the first argument (z or x).
"	PR1 = the address of the second argument (y).
"	PR2 = the address of a 8 word, even-word aligned scratch area.
"	PR3 = the return address.
"
" Exit:	EAQ = the desired arctangent in radians or degrees.
"
" Uses:	X0, X1, X2, X3, X4
"	X0 = saves a return address from arctan
"	X1 = saves a return address from arctan2
"	X2 = indicates BFP or HFP mode - all the floating point math
"	     routines use this register for the same purpose.
"	X3 = saves a return address from part_arctan
"	X4 = index to tables


	segref	math_constants_,half_pi,hfp_one_radian,one_radian,pi

	equ	BFP,0
	equ	HFP,2
	equ	z,0
	equ	zz,2
	equ	arctan_z,3
	equ	x,4
	equ	y,5
	equ	indicators,6

	segdef	arc_tangent_degrees_,hfp_arc_tangent_degrees_
	segdef	arc_tangent_degrees_2_,hfp_arc_tangent_degrees_2_
	segdef	arc_tangent_radians_,hfp_arc_tangent_radians_
	segdef	arc_tangent_radians_2_,hfp_arc_tangent_radians_2_


arc_tangent_degrees_:
	eax2      BFP		" no offset for BFP constants
	tsx0      arctan		" EAQ := arctan (x)
	dfmp      one_radian	" convert radians to degrees
	frd	0
	tra       pr3|0		" return

arc_tangent_degrees_2_:
	eax2      BFP		" no offset for BFP constants
	tsx1      arctan2		" EAQ := arctan2 (x,y)
	dfmp      one_radian	" convert radians to degrees
	frd	0
	tra       pr3|0		" return

arc_tangent_radians_:
	eax2      BFP		" no offset for BFP constants
	tsx0      arctan		" EAQ := arctan (x)
	frd	0
	tra       pr3|0		" return

arc_tangent_radians_2_:
	eax2      BFP		" no offset for BFP constants
	tsx1      arctan2		" EAQ := arctan2 (x,y)
	frd	0
	tra       pr3|0		" return

hfp_arc_tangent_degrees_:
	eax2      HFP		" 2 word offset for HFP constants
	tsx0      arctan		" EAQ := arctan (x)
	dfmp      hfp_one_radian	" convert radians to degrees
	frd	0
	tra       pr3|0		" return

hfp_arc_tangent_degrees_2_:
	eax2      HFP		" 2 word offset for HFP constants
	tsx1      arctan2		" EAQ := arctan2 (x,y)
	dfmp      hfp_one_radian	" convert radians to degrees
	frd	0
	tra       pr3|0		" return

hfp_arc_tangent_radians_:
	eax2      HFP		" 2 word offset for HFP constants
	tsx0      arctan		" EAQ := arctan (x)
	frd	0
	tra       pr3|0		" return

hfp_arc_tangent_radians_2_:
	eax2      HFP		" 2 word offset for HFP constants
	tsx1      arctan2		" EAQ := arctan2 (x,y)
	frd	0
	tra       pr3|0		" return

arctan:
	fad	=0.0,du		" normalize input
	fst	pr2|arctan_z	" store argument z

" Find which of the 9 ranges abs(z) lies in using a binary search.

" Set X4 as the range indicator.  X4 is set to X2+4*(range-1) since double
" precision tables with decimal BFP and octal HFP values are used.

	eax4	0,x2		" initialize the table index with BFP or HFP offset

	fcmg	tan_7_pi_by_32,x2
	tmi	range_0_to_3

	fcmg	tan_13_pi_by_32,x2
	tmi	range_4_to_6

	fcmg	tan_15_pi_by_32,x2
	tmi	range_7

range_8:
				" range = 8, abs (z) >= tan_15_pi_by_32
	fcmg	eps1,x2
	tmi	3,ic		" if abs (z) < 1e71b:
	  fld	half_pi,x2	"   EAQ := radians = half_pi
	  tra	set_to_quadrant_1_or_4
				" else:
	fcmp	=0.0,du
	tpl	2,ic
	   fneg	0		"   EAQ := abs (z)
	fdi	=-1.0,du		"   EAQ := -1/abs_z
	tsx3	part_arctan	"   calculate part_arctan (-1/abs_z)
				"     which is equivalent to - (part_arctan (1/abs_z))
	fad	half_pi,x2	"   EAQ := radians = half_pi - part_arctan (1/abs_z)
	tra	set_to_quadrant_1_or_4

range_7:
	adx4	=24,du		" range = 7, tan_13_pi_by_32 <= abs (z) < tan_15_pi_by_32
	tra	calculate_for_range_1_to_7

range_4_to_6:
	fcmg	tan_11_pi_by_32,x2
	tmi	range_4_to_5

range_6:
	adx4	=20,du		" range = 6, tan_11_pi_by_32 <= abs (z) < tan_13_pi_by_32
	tra	calculate_for_range_1_to_7

range_4_to_5:
	fcmg	tan_9_pi_by_32,x2
	tmi	range_4

range_5:
	adx4	=16,du		" range = 5, tan_9_pi_by_32 <= abs (z) < tan_11_pi_by_32
	tra	calculate_for_range_1_to_7

range_4:
	adx4	=12,du		" range = 4, tan_7_pi_by_32 <= abs (z) < tan_9_pi_by_32
	tra	calculate_for_range_1_to_7

range_0_to_3:
	fcmg	tan_3_pi_by_32,x2
	tmi	range_0_to_1

	fcmg	tan_5_pi_by_32,x2
	tmi	range_2

range_3:
	adx4	=8,du		" range = 3, tan_5_pi_by_32 <= abs (z) < tan_7_pi_by_32
	tra	calculate_for_range_1_to_7

range_2:
	adx4	=4,du		" range = 2, tan_3_pi_by_32 <= abs (z) < tan_5_pi_by_32
	tra	calculate_for_range_1_to_7

range_0_to_1:
	fcmg	tan_pi_by_32,x2

range_1:
				" range = 1, tan_pi_by_32 <= abs (z) < tan_3_pi_by_32
	tpl	calculate_for_range_1_to_7

range_0:
				" range = 0, abs (z) < tan_pi_by_32
	fcmp	=0.0,du
	tpl	2,ic
	  fneg	0		" EAQ := abs (z)
	tsx3	part_arctan	" EAQ := part_arctan (abs_z)
	tra	set_to_quadrant_1_or_4

calculate_for_range_1_to_7:
	fcmp	=0.0,du
	tpl	2,ic
	  fneg	0		" EAQ := abs (z)
	dfad	one_over_u,x4	" EAQ := t = 1/u(range) - (1/(u(range)**2)+1) / (1/u(range) + abs_z)
	dfdi	one_plus_one_over_u_squared,x4
	dfad	one_over_u,x4
	tsx3	part_arctan	" EAQ := part_arctan (t)
	dfad	arctan_of_u,x4	" EAQ := radians = part_arctan (t) + arctan(u(range))

set_to_quadrant_1_or_4:
	fszn	pr2|arctan_z	" set indicators
	tpl	0,x0		" if z >= 0 then return (radians)
	  fneg	0		" else return (-radians)
	  tra	0,x0

part_arctan:
				" EAQ contains z arg
	fcmg	eps2,x2		" if abs (z) < 5.7031627e10
	tmi	0,x3		" then return (z)

	dfstr	pr2|z
	dfmp	pr2|z		" calculate zz = z*z
	fstr	pr2|zz
	fmp	p3,x2		" calculate p(zz)
	dfad	p2,x2
	fmp	pr2|zz
	dfad	p1,x2
	fmp	pr2|zz
	dfad	p0,x2
	fmp	pr2|z		" calculate z*p(zz)
	tra	0,x3		" return

arctan2:
	fad	=0.0,du		" normalize x
	fst	pr2|x		" save normalized x for quadrant check
	fld	pr1|0		" load y
	fad	=0.0,du		" normalize y
	fst	pr2|y		" save normalized y for quadrant check
	tnz	y_not_zero
	fszn	pr2|x		" test if x = 0 also
	tze	arctan2_domain_err	" 0/0 is error
	dfld	half_pi,x2	" atan(x/0) =  + or - (half_pi)
	fszn	pr2|x
	tpl	0,x1		" if x >= 0 then return (radians)
	  fneg	0		" else return (-radians)
	  tra	0,x1


y_not_zero:
	sti	pr2|indicators	" save indicators
	ldi	no_overflow,x2
	fdi	pr2|x		" EAQ := x/y
	teo	quotient_too_large	" if overflow, atan(x,y) = pi/2 or -pi/2
	teu	quotient_too_small	" if underflow, atan(x,y) = 0
	ldi	pr2|indicators	" restore previous indicators
	fad	=0.0,du		" set indicators
	tpl	2,ic		" calculate z = abs (x,y)
	  fneg	0
	tsx0	arctan		" EAQ := arctan(z)

set_quadrant:
	fszn	pr2|y		" set the quadrant
	tpl	3,ic		" if y < 0 then
	  fneg	0		"   radians = pi-radians
	  dfad	pi,x2
	fszn	pr2|x
	tpl	0,x1		" if x >= 0 then return (radians)
	  fneg	0		" else return (-radians)
	  tra	0,x1

				" error when x=0 and y=0
arctan2_domain_err:
	ldq	11,dl
	tsx0	<call_math_error_>|[call_math_error_]
	fld	=0.0,du
	tra	pr3|0		" return to caller

quotient_too_small:
	ldi	pr2|indicators	" restore indicators
	fld	=0.0,du		" radians = 0.0
	tra	set_quadrant

quotient_too_large:
	ldi	pr2|indicators	" restore indicators
	dfld	half_pi,x2	" radians = half_pi
	tra	set_quadrant

	even

eps1:	oct	220400000000,000000000000	" 2**71 = 2.36e21
	oct	044400000000,000000000000
eps2:	dec	5.7031627d-10
	oct	762116304341,000000000000
no_overflow:
	oct	000000004000,000000000000	" bit 25 is the overflow mask
	oct	000000004010,000000000000	" bit 33 is the hex indicator

" This is the table of ranges.

tan_pi_by_32:
	dec	.98491403d-1		" tan(pi/32)
	oct	000062332734,000000000000
tan_3_pi_by_32:
	dec	.30334668d00		" tan(3*pi/32)
	oct	000233240406,000000000000
tan_5_pi_by_32:
	dec	.53451114d00		" tan(5*pi/32)
	oct	000421526707,000000000000
tan_7_pi_by_32:
	dec	.82067879d00		" tan(7*pi/32)
	oct	000644140013,000000000000
tan_9_pi_by_32:
	dec	1.2185035d00		" tan(9*pi/32)
	oct	002046773754,000000000000
tan_11_pi_by_32:
	dec	1.8708684d00		" tan(11*pi/32)
	oct	002073674236,000000000000
tan_13_pi_by_32:
	dec	3.2965582d00		" tan(13*pi/32)
	oct	002151372636,000000000000
tan_15_pi_by_32:
	dec	10.153170d00		" tan(15*pi/32)
	oct	002504715423,000000000000

" This table is the value of 1/u(i), where 1/u(i)=....

one_over_u:
	dec	5.0273394921258481045d0	" 1/tan(pi/16)
	oct	002240677734,220443561021
	dec	2.4142135623730950488d0	" 1/tan(2*pi/16)
	oct	002115202363,147747363110
	dec	1.4966057626654890176d0	" 1/tan(3*pi/16)
	oct	002057710307,045516430250
	dec	1.0d0			" 1/tan(4*pi/16)
	oct	002040000000,000000000000
	dec	.66817863791929891999d0	" 1/tan(5*pi/16)
	oct	000526067012,533771440572
	dec	.41421356237309504880d0	" 1/tan(6*pi/16)
	oct	000324047463,177167462204
	dec	.19891236737965800691d0	" 1/tan(7*pi/16)
	oct	000145657536,012514254010

" This table is values of 1/(u(i)**2) + 1.

one_plus_one_over_u_squared:
	dec	-.26274142369088180356d02
	oct	005713347216,344112137060
	dec	-.68284271247461900976d01
	oct	003445373031,460061031557
	dec	-.32398288088435500410d01
	oct	003630246512,105301545417
	dec	-.20d1
	oct	003700000000,000000000000
	dec	-.14464626921716895685d01
	oct	003721555117,372172063463
	dec	-.11715728752538099024d01
	oct	003732404746,317716746221
	dec	-.10395661298965800348d01
	oct	003736567577,176041165302

" This table is values of arctan(u(i)).

arctan_of_u:
	dec	.19634954084936207740d00	" pi/16
	oct	000144417665,210413214107
	dec	.39269908169872415481d00	" 2*pi/16
	oct	000311037552,421026430215
	dec	.58904862254808623221d00	" 3*pi/16
	oct	000455457437,631441644324
	dec	.78539816339744830962d00	" 4*pi/16
	oct	000622077325,042055060432
	dec	.98174770424681038702d00	" 5*pi/16
	oct	000766517212,252470274541
	dec	1.17809724509617246442d00	" 6*pi/16
	oct	002045545743,763144164432
	dec	1.37444678594553454182d00	" 7*pi/16
	oct	002053766737,233564735237

" These constants are used to approximate atan over the range [0,tan(pi/32)].

p0:	dec	.9999999999924517d00
	oct	000777777777,777366325725
p1:	dec	-.33333330840148d00
	oct	001525252530,533760740143
p2:	dec	.199987124164d00
	oct	000146311331,336371476042
p3:	dec	-.14072538d00
	oct	001667745537,162731562146

	end
