" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

"
"	dec_ops_  a package of runtime routines to support decimal arithmetic
"
"	Written by Richard A. Barnes 17 October 1973.
"	Modified by RAB 11 September 1975 to fix 1398
"	Modified by RAB 23 September 1975 to fix 1422
"
	name	dec_ops_
"
	include	stack_frame
"
	include	stack_header
"
	equ	mod_extension_size,32
	equ	tbp,38
	equ	indicators,46
	equ	qmask,55
"
	segdef	truncate
truncate:
	tsx2	trunc
	tra	sp|tbp,*0
"
	segdef	ceil
ceil:
	tsx2	trunc
	tmi	sp|tbp,*0	ceil(neg x) = trunc(x)
	cmpx1	0,du
	tze	sp|tbp,*0	exit if no truncation
	xec	ad2d,al	ceil(pos x) = trunc(x) + 1
	desc9ls	one,2,0
	arg	bp|0
	tra 	sp|tbp,*0
"
ad2d:	ad2d	(0),(pr,id),round
	ad2d	(0),(pr,id)
"
	segdef	floor
floor:
	tsx2	trunc
	tpl	sp|tbp,*0	floor(pos x) = trunc(x)
	cmpx1	0,du
	tze	sp|tbp,*0	exit if no truncation
	xec	sb2d,al	floor(neg x) = trunc(x) - 1
	desc9ls	one,2,0
	arg	bp|0
	tra	sp|tbp,*0
"
sb2d:	sb2d	(0),(pr,id),round
	sb2d	(0),(pr,id)
"
one:	aci	"+1"
"
trunc:
	tsx1	setup
"
	cmpn	(0),(pr,id)	set indicators for source
	desc9ls	zero,2,0
	arg	bp|1
	sti	sp|indicators	save indicators
	ldi	=o4000,dl		and suppress overflows
"
	cmpa	0,dl
	tnz	2,ic
	sbq	1,dl	adjust precision if float
"
	eax1	0	assume no truncation
	mvn	(pr,id),(pr,rl)
	arg	bp|1
	desc9ls	ab|0,ql,0
	tov	trunc1
	cmpn	(pr,id),(pr,rl)	check for truncation of nonzero digits
	arg	bp|1
	desc9ls	ab|0,ql,0
	tze	2,ic
	eax1	1	remember truncation
	xec	mv_temp,al
	desc9ls	ab|0,ql,0
	arg	bp|0
restore:	ldi	sp|indicators	restore indicators with source info
	tra	0,2
"
trunc1:
	xec	move,al
	arg	bp|1
	arg	bp|0
	tra	restore
"
mv_temp:	mvn	(pr,rl),(pr,id),round
	mvn	(pr,rl),(pr,id)
move:	mvn	(pr,id),(pr,id),round
	mvn	(pr,id),(pr,id)
"
	segdef	sign
sign:
	cmpn	(0),(pr,id)
	desc9ls	zero,2,0
	arg	bp|0
	tmi	s_neg
	tze	s_zero
	ldq	1,dl
	tra	sp|tbp,*0
s_zero:	ldq	0,dl
	tra	sp|tbp,*0
s_neg:	lcq	1,dl
	tra	sp|tbp,*0
"
zero:	aci	"+0"
"
	segdef	mod
mod:
	tsx1	setup
"
"	must check for case mod(x,0) = x
"
	cmpn	(0),(pr,id)
	desc9ls	zero,2,0
	arg	bp|2
	tnz	m_start
	xec	move,al
	arg	bp|1
	arg	bp|0
	tra	sp|tbp,*0
"
"	get work space
"
m_start:
	eax1	sp|0		get offset of stack frame
	stx1	sp|qmask
	lcx1	sp|qmask		get - offset
	eppap	sp|stack_frame.next_sp,*   get ptr to extension
	eax2	mod_extension_size
	asx2	sp|stack_frame.next_sp+1
	asx2	sp|stack_header.stack_end_ptr+1,1
"
"	compute float temp = op2/op3
"
	dv3d	(pr,id),(pr,id),(pr)
	arg	bp|2
	arg	bp|1
	desc9fl	ap|16,63
	mvn	(pr),(pr),round
	desc9fl	ap|16,63
	desc9fl	ap|0,61
"
"	compute float temp = floor(op2/op3)
"
	sti	sp|indicators	save indicators (and sign of op2/op3)
	ldi	=o4000,dl		prevent overflow fault
"
	mvn	(pr),(pr)
	desc9fl	ap|0,61
	desc9ls	ap|16,60,0
	tov	mod1
	ldi	sp|indicators	get sign of op2/op3
	tpl	mod2
	cmpn	(pr),(pr)
	desc9fl	ap|0,61
	desc9ls	ap|16,60,0
	tze	mod2
"
	sb2d	(0),(pr)
	desc9ls	one,2,0
	desc9ls	ap|16,60,0
"
mod2:	mvn	(pr),(pr),round
	desc9ls	ap|16,60,0
	desc9fl	ap|0,61
"
"	compute float temp = op3 * floor(op2/op3)
"
mod1:	mp2d	(pr,id),(pr),round
	arg	bp|2
	desc9fl	ap|0,61
"
"	subtract from op2 to get answer
"
	xec	sb3d,al
	desc9fl	ap|0,61
	arg	bp|1
	arg	bp|0
"
"	free work space and return
"
	eax2	-mod_extension_size
	asx2	sp|stack_frame.next_sp+1
	asx2	sp|stack_header.stack_end_ptr+1,1
	eppap	<pl1_operators_>|[operator_table]
	ldi	sp|indicators
	tra 	sp|tbp,*0
"
sb3d:	sb3d	(pr),(pr,id),(pr,id),round
	sb3d	(pr),(pr,id),(pr,id)
"
setup:
	lda	bp|0	get type of target
	ars	12	""
	ana	1,dl	"
	ldq	bp|1	get length of source
	anq	63,dl	"
	tra	0,1
	end
