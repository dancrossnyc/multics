/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-05-13,GJohnson), approve(86-05-13,MCR7387),
     audit(86-05-13,Martinson), install(86-05-14,MR12.0-1056):
     Correct error message documentation.
                                                   END HISTORY COMMENTS */


/* format: style2 */


config:
config_:
     proc ();

/* *	This is an all rings program which manages the config_deck segment. It has entries
   *	for locating various types of information in the config_deck, as well as entries
   *	for manipulating it. During Service Multics operation, the config_deck is protected
   *	against simulataneous updates by wired_hardcore_data$config_lock; all updates also
   *	automatically cause it to be immediately force updated to disk. At other times, it
   *	is not protected (there being only one process), and any updates must be manually
   *	requested by a call to config_$update.
   */

/* *	Completely rewritten, for Bootload Multics, 11/13/80 W. Olin Sibert
	Considerable rearranged for installation, BIM, 7/82.
	Modified to write out deck to partition in update entry '82.
	Modified to not run off end of deck. K. Loepere, April '84.
   */

/* *	Entrypoints for extracting information:
   *
   *	call config_$find (card_word, cardp);
   *
   *	   Locates a card whose name field is card_word. If cardp is null, the first such card
   *	   in the config_deck is returned. Otherwise, the first one following the one pointed
   *	   to by cardp is used.
   *
   *	call config_$find_2 (card_word, field_name, cardp);
   *
   *	   Similar to config_$find, but locates a card whose name is card_word, and whose first
   *	   data field contains field_name.
   *
   *	call config_$find_periph (peripheral_name, cardp);
   *
   *	   Locates the (first) PRPH config card for the peripheral named peripheral_name.
   *
   *	call config_$find_peripheral (peripheral_name, iom_no, channel_no, info, code);
   *
   *	   Locates the (first) PRPH config card for the peripheral named peripheral_name,
   *	   and returns the iom number, channel number, and first information parameter
   *	   from the card. If no such card can be found, code is set nonzero.
   *
   *	call config_$find_parm (parameter_name, parm_ptr);
   *
   *	   Locates some PARM card which contains an entry for parameter_name, and returns
   *	   a pointer to the first field following the parameter name. Note that parm_ptr
   *	   therefore points into the middle of a card.
   *
   *	call config_$find_table (table_name, table_size);
   *
   *	   Locates some TBLS card which contains an entry for table_name and returns
   *	   the number following the table name. If no appropriate card can be found,
   *	   -1 is returned for table_size.
   */


/* *	Entrypoints for modifying the config_deck:
   *
   *	call config_$clear ();
   *
   *	   This initializes the config_deck segment by completely filling it with "free" cards.
   *
   *	call config_$init_card (card_word, cardp);
   *
   *	   This initializes the card image pointed to by cardp to be an empty card with the supplied name.
   *	   If cardp is null on input, it is returned as a pointer to a card in the config_deck; otherwise,
   *	   it is assumed to point to a user-supplied card buffer.
   *
   *	call config_$replace (cardp1, cardp2);
   *
   *	   This replaces the contents of the card pointed to by cardp1 by the new card image
   *	   pointed to by cardp2. Neither pointer may be null.
   *
   *	call config_$add (cardp, after_cardp);
   *
   *	   This adds the card image pointed to by cardp to the config_deck, at the end if
   *	   after_cardp is null, or immediately following the card pointed to by after_cardp.
   *
   *	call config_$delete (cardp);
   *
   *	   This removes the card pointed to by cardp from the config_deck.
   *
   *	call config_$update ();
   *
   *	   This updates the config_deck image to its disk partition, for use in circumstances
   *	   where that is not being done automatically.
   */


	dcl     (
	        P_cardp		 pointer,
	        P_cardp1		 pointer,
	        P_cardp2		 pointer,
	        P_after_cardp	 pointer,
	        P_card_word		 char (4) aligned,
	        P_field_name	 char (4) aligned,
	        P_peripheral_name	 char (4) aligned,
	        P_parm_name		 char (4) aligned,
	        P_parm_ptr		 pointer,
	        P_table_name	 char (4) aligned,
	        P_table_size	 fixed bin,
	        P_iom_no		 fixed bin (3),
	        P_channel_no	 fixed bin (8),
	        P_peripheral_info	 bit (36) aligned,
	        P_code		 fixed bin (35)
	        )			 parameter;

	dcl     config_seg_size	 fixed bin (19);
	dcl     whoami		 char (32);
	dcl     idx		 fixed bin;
	dcl     lock_sw		 bit (1) aligned;	/* This is set if the config must be unlocked */
	dcl     (delete_idx, after_idx)
				 fixed bin;
	dcl     after_cardp		 pointer;
	dcl     card_word		 char (4) aligned;
	dcl     field_data		 bit (36) aligned;

	dcl     1 card_image	 aligned like config_card automatic;

	dcl     dseg$		 (0:1023) fixed bin (71) external static;
	dcl     sys_info$initialization_state
				 fixed bin external static;

	dcl     get_ring_		 entry () returns (fixed bin (3));
	dcl     sub_err_		 entry () options (variable);
	dcl     syserr		 entry options (variable);
	dcl     get_ptrs_$given_segno	 entry (fixed bin (15)) returns (pointer);
	dcl     pc_wired$write_wait	 entry (pointer, fixed bin, fixed bin);

	dcl     astep		 pointer;

	dcl     (addr, addrel, baseno, bin, binary, divide, mod, null, rel, rtrim, size, substr, unspec, verify)
				 builtin;


/* Note that none of the $find entrypoints bother to lock the config_deck. This is because their
   callers expect card pointers to be valid when returned, and hence must implement their own
   locking mechanism (calling config_$lock and config_$unlock as necessary) to make this work at
   all. Since most config deck hacking is done only in initialization code, anyway, this turns
   out not to be a problem: once initialization is over, nobody ever adds or deletes cards, so
   individual card pointers remain valid forever.
   */


find:
     entry (P_card_word, P_cardp);

/* Find a card with a specified name */

	whoami = "config_$find";

	if P_cardp ^= null ()
	then cardp = addrel (validate_cardp (P_cardp), size (config_card));
						/* SKIP the one we got */
	else cardp = addr (config_deck$);		/* Start with first card if none specified */

	config_max_cards = divide (4 * 1024 - 1, size (config_card), 17, 0);
						/* Assume four page default (other programs know this limit, this might as well) */
	config_n_cards = divide (wordno (cardp), size (config_card), 17, 0);

	card_word = P_card_word;

	do idx = config_n_cards + 1 to config_max_cards while (config_card.word ^= FREE_CARD_WORD);
	     if config_card.word = card_word
	     then do;				/* Found one */
		     P_cardp = cardp;
		     return;			/* Return it */
		end;

	     cardp = addrel (cardp, size (config_card));	/* on to the next card */
	end;					/* of looking */

	P_cardp = null ();				/* Sorry... no more left */

	return;					/* End of config_$find */

/*  */

find_2:
     entry (P_card_word, P_field_name, P_cardp);

/* Find a card with a specified name and first field */

	whoami = "config_$find_2";

	cardp = addr (config_deck$);			/* Start looking from the beginning */

	config_max_cards = divide (4 * 1024 - 1, size (config_card), 17, 0);
						/* Assume four page default (other programs know this limit, this might as well) */
	config_n_cards = divide (wordno (cardp), size (config_card), 17, 0);

	card_word = P_card_word;

	field_data = unspec (P_field_name);		/* Translate to a bitstring */

	do idx = config_n_cards + 1 to config_max_cards while (config_card.word ^= FREE_CARD_WORD);
	     if config_card.word = card_word
	     then if config_card.data_field (1) = field_data
		then do;
			P_cardp = cardp;		/* Found one */
			return;			/* Return it */
		     end;

	     cardp = addrel (cardp, size (config_card));	/* on to the next card */
	end;					/* of looking */

	P_cardp = null ();				/* Sorry... no more left */

	return;					/* End of config_$find */

/*  */

find_2_next:
     entry (P_card_word, P_field_name, P_cardp);

/* Like config_$find_2, except it finds the NEXT matching card after the one at P_cardp. */

	whoami = "config_$find_2_next";

	if P_cardp ^= null ()
	then cardp = addrel (validate_cardp (P_cardp), size (config_card));
						/* SKIP the one we got */
	else cardp = addr (config_deck$);		/* Start with first card if none specified */

	config_max_cards = divide (4 * 1024 - 1, size (config_card), 17, 0);
						/* Assume four page default (other programs know this limit, this might as well) */
	config_n_cards = divide (wordno (cardp), size (config_card), 17, 0);

	card_word = P_card_word;
	field_data = unspec (P_field_name);

	do idx = config_n_cards + 1 to config_max_cards while (config_card.word ^= FREE_CARD_WORD);
	     if config_card.word = card_word
	     then if config_card.data_field (1) = field_data
		then do;
			P_cardp = cardp;		/* Found one */
			return;
		     end;

	     cardp = addrel (cardp, size (config_card));	/* on to the next card */
	end;					/* of looking */

	P_cardp = null ();				/* Sorry... no more left */

	return;					/* End of config_$find */


find_periph:
     entry (P_peripheral_name, P_cardp);

/* Find a PRPH card for a specified peripheral */

	whoami = "config_$find_periph";

	call find_2 ("prph", P_peripheral_name, P_cardp); /* Very simple */

	return;					/* End of config_$find_periph */



find_peripheral:
     entry (P_peripheral_name, P_iom_no, P_channel_no, P_peripheral_info, P_code);

/* Find a PRPH card for a specified peripheral, and return info about the peripheral */

	whoami = "config_$find_peripheral";

	cardp = null ();				/* Prepare to call ourselves to locate the card */
	call find_2 ("prph", P_peripheral_name, cardp);

	if cardp = null ()
	then do;					/* Not found */
		P_iom_no = -1;
		P_channel_no = -1;
		P_peripheral_info = ""b;
		P_code = 1;			/* Indicate error */
		return;
	     end;

	P_iom_no = cardp -> prph_card.iom;		/* Otherwise, return the info */
	P_channel_no = cardp -> prph_card.chan;
	P_peripheral_info = unspec (cardp -> prph_card.model);
	P_code = 0;				/* Indicate success */

	return;					/* End of config_$find_peripheral */


find_parm:
     entry (P_parm_name, P_parm_ptr);

/* Find a PARM card with the specified field */

	whoami = "config_$find_parm";

	field_data = unspec (P_parm_name);		/* We must search for it as bit patterns */

	cardp = null ();

FIND_PARM_LOOP:
	call find ("parm", cardp);			/* Look through all the PARM cards */
	if cardp ^= null ()
	then do;					/* Found one */
		do idx = 1 to config_card.n_fields;	/* Do any match? */
		     if config_card.data_field (idx) = field_data
		     then if config_card.field_type (idx) = CONFIG_STRING_TYPE
			then do;
				P_parm_ptr = addr (config_card.data_field (idx));
				return;		/* Return a pointer to the matching parameter */
			     end;
		end;				/* of search of a single card */

		goto FIND_PARM_LOOP;		/* Isn't it a KLUDGE that pl1 doesn't have do ... until? */
	     end;

	P_parm_ptr = null ();			/* If not found, return null */

	return;					/* End of config_$find_parm */


find_table:
     entry (P_table_name, P_table_size);

/* Find a TBLS card for the specified field, and return the size it specifies */

	whoami = "config_$find_table";

	field_data = unspec (P_table_name);		/* We must search for it as bit patterns */

	cardp = null ();

FIND_TABLE_LOOP:
	call find ("tbls", cardp);			/* Look through all the PARM cards */
	if cardp ^= null ()
	then do;					/* Found one */
		do idx = 1 to config_card.n_fields;	/* Do any match? */
		     if config_card.data_field (idx) = field_data
		     then if config_card.field_type (idx) = CONFIG_STRING_TYPE
			then do;
				if idx = config_card.n_fields
				then /* Nothing after the name. Grump. */
				     if get_ring_ () = 0
				     then call syserr (BEEP, "^a: TBLS card specifies no value for ^a", whoami,
					     P_table_name);
				     else call sub_err_ (0, whoami, ACTION_DEFAULT_RESTART, null (), (0),
					     "TBLS card specified no value for ^a", P_table_name);

				else if (config_card.field_type (idx + 1) ^= CONFIG_OCTAL_TYPE)
					& (config_card.field_type (idx + 1) ^= CONFIG_DECIMAL_TYPE)
				then if get_ring_ () = 0
				     then call syserr (BEEP,
					     "^a: TBLS card specifies invalid type of value for ^a", whoami,
					     P_table_name);
				     else call sub_err_ (0, whoami, ACTION_DEFAULT_RESTART, null (), (0),
					     "TBLS card specifies invalid type of value for ^a", P_table_name);

				else do;		/* At last, it's OK to return the value */
					P_table_size = binary (config_card.data_field (idx + 1), 35);
					return;	/* Return the size */
				     end;
			     end;			/* Of having found the right table name */
		end;				/* Of loop through fields on a single card */

		goto FIND_TABLE_LOOP;		/* Isn't it a KLUDGE that pl1 doesn't have do ... until? */
	     end;

	P_table_size = -1;				/* If not found, return clearly invalid value */

	return;					/* End of config_$find_table */


clear:
     entry ();

/* Clear the whole config deck */

	whoami = "config_$clear";

	call get_config_size ();			/* This will always work for clearing; if not the first */
						/* time, then in the second, recursive, invocation. */

	config_n_cards = config_max_cards;

	do idx = 1 to config_max_cards;		/* Clear out each card */
	     cardp = addr (config_deck.cards (idx));

	     config_card.word = FREE_CARD_WORD;		/* The "free" pattern */
	     config_card.data_field (*) = EMPTY_FIELD;
	     unspec (config_card.type_word) = ""b;	/* And nothing in the type fields */
	end;

	call unlock_config_deck ();

	return;					/* End of config_$clear */


init_card:
     entry (P_card_word, P_cardp);

/* Initialize a card image, possibly first getting space for it from the config deck. */

	whoami = "config_$init_card";

	cardp = P_cardp;				/* Get the pointer */

	if cardp = null ()
	then do;					/* Caller wants to get a card from the deck */

		call get_config_size ();		/* Locks the config deck */
		if config_n_cards >= config_max_cards
		then /* Not bloody likely.... */
		     if get_ring_ () = 0
		     then call syserr (CRASH, "^a: The config_deck is full.", whoami);
		     else call sub_err_ (0, whoami, ACTION_CANT_RESTART, null (), (0), "The config_deck is full.");

		config_n_cards = config_n_cards + 1;	/* It has gotten larger */

		cardp = addr (config_deck.cards (config_n_cards));
						/* Get a pointer to the newly allocated image */
	     end;					/* Of allocating new image */

	config_card.word = P_card_word;		/* Initialize it */
	config_card.data_field (*) = EMPTY_FIELD;
	unspec (config_card.type_word) = ""b;

	if P_cardp = null ()
	then do;					/* We had to allocate a new one, so: */
		call unlock_config_deck ();		/* unlock, and */
		P_cardp = cardp;			/* return the pointer */
	     end;

	return;					/* End of config_$init_card */


replace:
     entry (P_cardp1, P_cardp2);

/* Replace card1 with card2 */

	whoami = "config_$replace";

	cardp = validate_cardp (P_cardp1);

	card_image = P_cardp2 -> config_card;		/* Copy it into our stack frame */

	call get_config_size ();			/* Locks the config_deck */

	cardp -> config_card = card_image;		/* Copy the image in */

	call unlock_config_deck ();			/* All done */

	return;					/* End of config_$replace */


add:
     entry (P_cardp, P_after_cardp);

/* Add a card, after after_card if non-null -- note that this cannot make a card first in the deck */

	whoami = "config_$add";

	card_image = P_cardp -> config_card;		/* Copy it into our stack frame */

	if P_after_cardp ^= null ()
	then after_cardp = validate_cardp (P_after_cardp);
	else after_cardp = null ();

	call get_config_size ();			/* Locks the config_deck */

	if config_n_cards >= config_max_cards
	then /* Not bloody likely.... */
	     if get_ring_ () = 0
	     then call syserr (CRASH, "^a: The config_deck is full.", whoami);
	     else call sub_err_ (0, whoami, ACTION_CANT_RESTART, null (), (0), "The config deck is full.");

	if after_cardp ^= null ()
	then /* Find the card we are to add this after */
	     after_idx = divide (binary (rel (after_cardp), 18), size (config_card), 17, 0) + 1;
	else after_idx = config_n_cards;		/* If none specified, add after the last */

	config_n_cards = config_n_cards + 1;		/* It has gotten larger */

	do idx = (config_n_cards - 1) to (after_idx + 1) by -1;
						/* Move the later ones up */
	     config_deck.cards (idx + 1) = config_deck.cards (idx);
	end;

	config_deck.cards (after_idx + 1) = card_image;	/* Pop it in */

	call unlock_config_deck ();			/* All done */

	return;					/* End of config_$add */


delete:
     entry (P_cardp);

/* Delete a card */

	whoami = "config_$delete";

	cardp = validate_cardp (P_cardp);

	call get_config_size ();			/* Locks the config_deck */

	delete_idx = divide (binary (rel (cardp), 18), size (config_card), 17, 0) + 1;

	do idx = delete_idx + 1 to config_n_cards;	/* Move the remaining ones down */
	     config_deck.cards (idx - 1) = config_deck.cards (idx);
	end;

	config_deck.cards (config_n_cards).word = FREE_CARD_WORD;
						/* Clear out the last card */
	config_deck.cards (config_n_cards).data_field (*) = EMPTY_FIELD;
	unspec (config_deck.cards (config_n_cards).type_word) = ""b;

	call unlock_config_deck ();			/* All done */

	return;					/* End of config_$delete */


update:
     entry ();

/* Writes the config_deck back to disk, synchronously */

	whoami = "config_$update";

	if (get_ring_ ()) ^= 0
	then /* Do nothing in test environment */
	     return;
	if sys_info$initialization_state < 2
	then return;				/* and nothing within bce */

	call get_config_size;			/* sets config_seg_size */

	astep = get_ptrs_$given_segno (bin (baseno (configp), 15));
	call pc_wired$write_wait (astep, 0, 4);

	call unlock_config_deck;
	return;


get_config_size:
     proc ();

/* *	This procedure sets n_cards and max_cards appropriately, by examining
   *	the information in the config_deck segment. If the segment is empty,
   *	it is initialized appropriately.
   */

	dcl     idx		 fixed bin;


/* First, lock the config_deck to this process. This is always done before any operation which references
   or modifies the config_deck. However, any putative card pointers should be validated before this step.
   */

	call lock_config_deck ();

	config_max_cards = divide (4 * 1024 - 1, size (config_card), 17, 0);
						/* Assume four page default (other programs know this limit, this might as well) */

	configp = addr (config_deck$);		/* Make addressable */

	if config_deck.cards (1).word = ZERO_CARD_WORD
	then do;					/* It's empty already */
		config_deck.cards (1).word = FREE_CARD_WORD;
						/* Make config_$clear work */
		call clear ();			/* Clear it out completely */
		config_n_cards = 0;			/* And return a size of zero */
		return;				/* All done */
	     end;

	do idx = 1 to config_max_cards;		/* Otherwise, look for the first free card */
	     if config_deck.cards (idx).word = FREE_CARD_WORD
	     then goto FOUND_FREE_CARD;
	end;

FOUND_FREE_CARD:
	config_n_cards = idx - 1;			/* Last card used is one before the free one */

	return;					/* All done */
     end get_config_size;


validate_cardp:
     proc (P_validate_cardp) returns (pointer);

/* *	This procedure verifies that cardp is, indeed, a pointer into the config_deck
   *	and points at the beginning of a config card. It does not, however, catch all
   *	possible cases which would result from format errors in the config_deck.
   */

	dcl     P_validate_cardp	 pointer parameter;

	dcl     return_cardp	 pointer;


	if substr (unspec (P_validate_cardp), (37 - 6), 6) ^= "43"b3
	then do;
INVALID_CARD_POINTER:
		if get_ring_ () = 0
		then call syserr (CRASH, "^a: Invalid card pointer ^p does not point to a valid config card.", whoami,
			P_validate_cardp);
		else call sub_err_ (0, whoami, ACTION_CAN_RESTART, null (), (0),
			"Invalid card pointer ^p does not point to a valid config card.", P_validate_cardp);
		return (null ());			/* In case someone typed GO */
	     end;

	return_cardp = P_validate_cardp;

	if baseno (return_cardp) ^= baseno (addr (config_deck$))
	then goto INVALID_CARD_POINTER;

	if mod (binary (rel (return_cardp), 18), size (config_card)) ^= 0
	then goto INVALID_CARD_POINTER;

	if verify (rtrim (return_cardp -> config_card.word), VALID_CARD_WORD_CHARACTERS) ^= 0
	then goto INVALID_CARD_POINTER;

	return (return_cardp);
     end validate_cardp;


lock_config_deck:
     proc ();

/* This procedure locks the config_deck lock if it can, and sets lock_sw if it does. If it can't
   be locked because of a mylock error, this is ignored, and lock_sw is not set.
   */

/* For now, it does nothing at all */

	lock_sw = "0"b;

	if (get_ring_ ()) ^= 0
	then /* Test environment, do nothing */
	     return;

	return;
     end lock_config_deck;



unlock_config_deck:
     proc ();

/* This procedure unlocks the config_deck lock if lock_sw is set.
   */

/* For now, it does nothing at all */

	lock_sw = "0"b;

	if (get_ring_ ()) ^= 0
	then /* Test environment, do nothing */
	     return;

	return;
     end unlock_config_deck;

/* format: off */

%page; %include config_deck;
%page; %include config_prph_card;
%page; %include sub_err_flags;
%page; %include syserr_constants;


/* BEGIN MESSAGE DOCUMENTATION

   Message:
   config_$find_table: TBLS card specifies no value for NAME.

   S:  $beep

   M:  The config deck does not specify a value for NAME.

   A:  One should be added.

   Message: 
   config_$ENTRY: the config deck is full.

   S:  $crash

   M:  No space remained in the config deck for additional cards.

   A:  If this recurs, try another boot tape. Remove unneccessary
   config cards.

   END MESSAGE DOCUMENTATION */

     end config_;
