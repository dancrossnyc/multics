" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************
	name 	tty_util_

" " " " " " " " " " " " " " " " " " " " " " " " "
"
"	Utilities for the tty DIM.
"
"	These routines perform certain scanning and editing
"	functions for the tty DIM which are faster and
"	easier to do in ALM.
"
"	Coded 10/15/75 by Mike Grady
"	6/9/81 RE Mullen: find_char to scan <= 128 chars, rather than <= 2000

"
" " " " " " " " " " " " " " " " " " " " " " " " "

	segdef	find_char
	segdef	mvt
	segdef	scm
	segdef	illegal_char
	segdef	tct

"	symbols for storage in callers automatic storage

	equ	stringp,0
	equ	stringl,2
	equ	tally,3
	equ	tablep,4
	equ	bit,4
	equ	match,5
	equ	indicator,6
	equ	targetp,6

"	some temporary storage also in callers stack frame

	equ	w1,8
	equ	w2,9

" 
" " " " " " " " " " " " " " " " " " " " " " " " "
"
"	find_char finds the next interesting char for the
"	caller. It looks first for high bits (> 177) and
"	then for double blanks, and finally for chars in
"	a tct table.
"
"	Input:
"	   stringp - pointer to string to scan
"	   stringl - length of string
"	   tablep - pointer to table to use for tct
"
"	Output:
"	   tally - number of uninteresting chars
"	   indicator - number which indicates char found
"		3 for white space
"		7 for escape char
"		value from tct otherwise
"
" " " " " " " " " " " " " " " " " " " " " " " " "

find_char:
	epp1	pr0|2,*		get ptr to block of storage in
	epp1	pr1|0,*		callers stack
	epp2	pr1|stringp,*	load ptr to string
	ldq	pr1|stringl	load string length
	cmpq	128,dl		use min(stringl,128) to be quick
	tmi	2,ic		all set

	ldq	128,dl
	stz	pr1|tally		zero tally

	tsx2	find_high_bits	look for interesting bits
	tra	look_for_blanks	none, continue

	ldq	pr1|w1		get result
	tze	have_high_bit	first char - done

look_for_blanks:
	scd	(pr,rl),(du)	look for two blanks
	desc9a	pr2|0,ql
	aci	"  "
	arg	pr1|w2		store result here

	ttn	no_double_blanks	none in string

	lda	pr1|w2		get length up to double blanks
	ora	=o400000,du	set high order bit as flag
	sta	pr1|w1		save as count
	ldq	pr1|w2		reduce stringl again

no_double_blanks:
	epp3	pr1|tablep,*	load table pointer
	tct	(pr,rl)		look into tct table for interesting chars
	desc9a	pr2|0,ql
	arg	pr3|0
	arg	pr1|w2

	ttf	tct_hit		we got hit in tct, process

	lda	3,dl		get indicator value
	szn	pr1|w1		any high bits or double blanks?
	tze	return_full_string	no, return the whole thing
	tmi	2,ic		double blanks found
have_high_bit:
	lda	7,dl		get indicator for \nnn type

	sta	pr1|indicator	return it to caller
	lxl0	pr1|w1		get count
	sxl0	pr1|tally
	tra	tct_done		done

tct_hit:
	lda	pr1|w2		get char value hit on
	arl	27		shift down
	sta	pr1|indicator	return to caller
	cmpa	5,dl		one of the special types?
	tpl	return_normal	nope

	lxl0	pr1|w2		get the count
	tze	return_normal	hit on first char in string
	sblx0	1,du		decrement the count to point a prev char
	cmpc	(pr,x0),(),fill(0)
	desc9a	pr2|0,1		look for blank
	desc9a	blank,1

	tnz	return_normal	not blank, all ok

	lda	3,dl		get blank indicator
	sta	pr1|indicator	return to caller
	sxl0	pr1|tally		set tally to blank locn
	tra	tct_done		done

return_normal:
	lxl0	pr1|w2		get the count from the tct
	sxl0	pr1|tally		return to caller
	tra	tct_done		done

return_full_string:
	stq	pr1|tally		use whole thing
	stz	pr1|indicator	set indicator

tct_done:
	ldq	pr1|tally		get tally
	lda	pr1|indicator	load the indicator
	tze	tct_nbump		zero, no bump
	cmpa	3,dl		is it blank?
	tze	tct_nbump		yes, done
	cmpa	7,dl		is it escape char type?
	tze	tct_nbump		yes, done
	adq	1,dl		bump input char count
tct_nbump:
	a9bd	pr2|0,ql		bump ptr
	spri2	pr1|stringp

	stq	pr1|w1		store for subtract
	lda	pr1|stringl	get stringl
	sba	pr1|w1		decrement
	sta	pr1|stringl	reset stringl

	short_return

blank:	aci	" "

" 
" " " " " " " " " " " " " " " " " " " " " " " " "
"
"	this routine does an mvt to translate chars.
"
"	Input:
"	   stringp - points to input string
"	   stringl - length of string
"	   tablep - pointer to translate table
"
"	Output:
"	   targetp - pointer to output string
"
" " " " " " " " " " " " " " " " " " " " " " " " "
mvt:	epp1	pr0|2,*		get ptr to arg ptr
	epp1	pr1|0,*		get ptr to callers block
	epp2	pr1|stringp,*	get ptr to the string
	ldq	pr1|stringl	load length of string
	epp3	pr1|tablep,*	load ptr to mvt table
	epp5	pr1|targetp,*	get ptr to target string

	mvt	(pr,rl),(pr,rl),fill(0) do the mvt
	desc9a	pr2|0,ql
	desc9a	pr5|0,ql
	arg	pr3|0

	short_return		that was easy


" 
" " " " " " " " " " " " " " " " " " " " " " " " "
"
"	routine to scan for high bits in chars and return ptr to
"	matched char.
"
"	Input:
"	   stringp - points to string
"	   stringl - length
"	   bit - bit pattern looked for
"
"	Output:
"	   tally - number of chars to char with bit
"	   match - "1"b if bit matched
"
" " " " " " " " " " " " " " " " " " " " " " " " "

scm:	epp1	pr0|2,*		get ptr to arg ptr
	epp1	pr1|0,*		get ptr to arg block
	epp2	pr1|stringp,*	get ptr to string
	ldq	pr1|stringl	get string length
	stz	pr1|match		indicate initial failure

	lda	pr1|bit		look at the bit we want
	ana	=o400000,du	use it to select scm
	tnz	scm4		on, we want highest bit

	scm	(pr,rl),(pr),mask(577) off, we must want bit 8
	desc9a	pr2|0,ql
	arg	pr1|bit
	arg	pr1|tally
	tra	scm_ck		look at results

scm4:	scm	(pr,rl),(pr),mask(377) scan string for 9th bit
	desc9a	pr2|0,ql
	arg	pr1|bit
	arg	pr1|tally		result

scm_ck:	ttn	scm_done		no hits

	lda	=o400000,du	get flag bit
	sta	pr1|match		indicate success
scm_done:
	sbq	pr1|tally		reduce stringl
	stq	pr1|stringl	return to caller
	ldq	pr1|tally		fetch tally word
	a9bd	pr2|0,ql		bump stringp
	spri2	pr1|stringp	store for caller

	short_return

" 
" " " " " " " " " " " " " " " " " " " " " " " " "
"
"	routine to look for any char with bit 8 or 9 on.
"
"	Input:
"	   stringp - points to string
"	   stringl - length
"
"	Output:
"	   tally - number of chars up to bad one
"	   match - if bad one found "1"b
"
" " " " " " " " " " " " " " " " " " " " " " " " "

illegal_char:
	epp1	pr0|2,*		get ptr to ptr to block
	epp1	pr1|0,*		get ptr to block
	epp2	pr1|stringp,*	get ptr to string
	ldq	pr1|stringl	get length

	stz	pr1|match		zero return bit
	stq	pr1|tally		set max tally

	tsx2	find_high_bits	see if any high bits on
	tra	no_illegal_chars	none, continue

	lxl0	pr1|w1		get the result
	sxl0	pr1|tally		return
	lda	=o400000,du	get match bit
	sta	pr1|match
no_illegal_chars:
	sbq	pr1|tally		reduce stringl
	stq	pr1|stringl	return to caller
	ldq	pr1|tally		fetch tally word
	a9bd	pr2|0,ql		bump stringp
	spri2	pr1|stringp	store for caller

	short_return
" 
" " " " " " " " " " " " " " " " " " " " " " " " "
"
"	routine to do input tct function, similar to
"	find_char, but does only tct function
"
" " " " " " " " " " " " " " " " " " " " " " " " "

tct:	epp1	pr0|2,*		get ptr to arg ptr
	epp1	pr1|0,*		get ptr to arg block
	epp2	pr1|stringp,*	get ptr to string
	ldq	pr1|stringl	get string length
	stz	pr1|tally		zero the tally word

	epp3	pr1|tablep,*	get ptr to table
	tct	(pr,rl)		do the tct
	desc9a	pr2|0,ql
	arg	pr3|0
	arg	pr1|w2		result goes here

	ttn	tct_nohit		no good chars

	lda	pr1|w2		get the indicator value
	arl	27		shift down
	sta	pr1|indicator

	lxl0	pr1|w2		get the tally
	sxl0	pr1|tally
	ldq	pr1|tally		load tally for ptr update
	tra	tct_ptr_inc

tct_nohit:
	stq	pr1|tally		return whole string
	stz	pr1|indicator	no indicator

tct_ptr_inc:
	a9bd	pr2|0,ql
	spri2	pr1|stringp	return ptr
	lda	pr1|stringl	get string length
	sba	pr1|tally		reduce amount processed
	sta	pr1|stringl
	short_return
" 
" " " " " " " " " " " " " " " " " " " " " " " " "
"
"	internal proc to find high bits.
"	return+1 -> none found
"	return+2 -> high bit found
"
" " " " " " " " " " " " " " " " " " " " " " " " "

find_high_bits:
	scm	(pr,rl),(du),mask(377) look for chars with bit9 on
	desc9a	pr2|0,ql
	vfd	o9/400,27/0
	arg	pr1|w1		result here

	ttn	scm_other_bit	not this one try bit8

	szn	pr1|w1		did we hit on first char?
	tze	found_first_bit	yes, return

	scm	(pr,rl),(du),mask(577) look for bit8 on
	desc9a	pr2|0,ql
	vfd	o9/200,27/0
	arg	pr1|w2		save result

	ttn	check_which_bit	not bit8, must be bit9
	tra	found_other_bit

scm_other_bit:
	scm	(pr,rl),(du),mask(577) look for bit8 on
	desc9a	pr2|0,ql
	vfd	o9/200,27/0
	arg	pr1|w2		save result

	ttn	no_high_bits	good, neither bit8 or 9 was on

found_other_bit:
	szn	pr1|w2		did we hit first char?
	tnz	check_which_bit	no, find which one

	stz	pr1|w1		indicate offset of zero in w1
	tra	found_first_bit	return info

check_which_bit:
	lda	pr1|w2		get second count
	cmpa	pr1|w1		compare with first
	tpl	2,ic		more, use w1

	sta	pr1|w1		less use w2 as length
found_first_bit:
	tra	1,2		return

no_high_bits:
	stz	pr1|w1		reset the high bits indicator
	tra	0,2		return

	end
