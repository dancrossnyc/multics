" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************
	name	fast_hc_ipc
"
"	Coded by B. Greenberg 10/11/78 for shared stack_0.
"	Stupid bug fixed by C. Hornig, December 1979.
"	Changed by E. Donner Jan 81 for new ipc
"	Truncation of stacks 1/82 BIM
"	Modified 1984-11-13 by E. Swenson to remove support for obsolete
"	  hcs_$sfblock entrypoint.
"
	include	stack_frame
	include	stack_header
"
"	Pseudo-frame in real PDS
"

	equ	ipcv.ap,0		Arg ptr to ring <n>
	equ	ipcv.retsw,1	Switch to return
	equ	ipcv.save_entry_ret,2 X6 save.
	equ	ipcv.truncated_stacks,3 Note for metering
	equ	ipcv.chan,4	Fast channel ID save.
	equ	ipcv.block_start_steps,6 sst$steps before block
	equ	ipcv.stk_temp,7    

"
"	Stack vars for call to PL/I IPC.
"
	tempd	argl(1)

	macro	erifnot
	t&1	&U.erifnot
	lda	&2
	sta	ap|4,*
	short_return
&U.erifnot:
	&end
	segdef	ipc_f_block,ipc_block,read_events


"
"
"	fast_hc_ipc$f_block (fast block call)
"
"	This entry returns only when a wakeup is received, either for a
"	fast channel or for a regular channel.  It also calls hc_ipc.
"	It returns information about which fast channel received a wakeup
"	and whether any messages were emptied from the ITT into the ECT.
"
"	dcl fast_hc_ipc$f_block entry (bit (36) aligned, bit (1) aligned);
"
"	call fast_hc_ipc$f_block (fast_channel_events, messages_allocated_in_ect);
"
"	where fast_channel_events indicates on which fast channels are
"	wakeups pending. The other bits in the string are untouched.(input/output)
"	and messages_allocated_in ect = "1"b if any messages were allocated
"	for validation ring (output)
"
"
ipc_f_block:
	getlp
	epplb	pds$ipc_vars
	lxl1	pds$validation_level
	lda	pds$events_pending
	ana	pds$event_masks-1,x1 test for events, this ring
	sta	lb|ipcv.retsw	store the need to return
	lda	pds$ring_events	see whats doing there
	als	-1,x1
	ana	=o400000,du	(messages from other ring)
	orsa	lb|ipcv.retsw
sfb_readevents_merge:
	stz	ap|4,*		assume don't call regular.
	sprpap	lb|ipcv.ap	save ap
	tsx6	common		go blocked or get messages
	lda	pds$events_pending	have called tc.
	ana	pds$event_masks-1,x1
	orsa	lb|ipcv.retsw	now have stuff for this ring.
	ersa	pds$events_pending	now turn off some fast events.
	lprpap	lb|ipcv.ap
	orsa	ap|2,*		store to guy's arg.
	tsx5	check_full_block	dredge out the old cruft
	lprpap	lb|ipcv.ap
	lda	=o400000,du
	sta	ap|4,*		tell caller to call regular.
short_return:
	short_return

"
"
"	ipc_block$fast_hc_ipc 
"
"	This entry goes blocked until the caller receives a wakeup.
"	It then calls hc_ipc.
"
"	dcl fast_hc_ipc$ipc_block entry ();
"
"	call fast_hc_ipc$ipc_block ();
"
"
ipc_block:
	getlp
	epplb	pds$ipc_vars
	stz	lb|ipcv.retsw
	lxl1	pds$validation_level
	tsx6	common
	lda	pds$events_pending
	ana	pds$event_masks-1,x1 check fast events
	orsa	lb|ipcv.retsw	set up to return, have fast evs.
	tsx5	check_full_block	get some events
	short_return


"
"
"	fast_hc_ipc$read_events
"
"	This entry is similiar to fast_hc_ipc$f_block except that
"	it does not go blocked but checks whether a wakeup has arrived.
"
"	dcl fast_hc_ipc$read_events entry (bit (36) aligned, bit (1) aligned);
"
"	call fast_hc_ipc$read_events (fast_channel_events, messages_allocated_in_ect);
"
"
read_events:
	getlp
	epplb	pds$ipc_vars
	stc1	lb|ipcv.retsw	want to return
	lxl1	pds$validation_level
	tra	sfb_readevents_merge join common code
	

common:	eppbp	fast_block_return
	sprpbp	pds$ipc_block_return
	stx6	lb|ipcv.save_entry_ret
	stz	lb|ipcv.truncated_stacks " presumed untouched
	stz	lb|ipcv.stk_temp         " records whether we blocked
	szn	lb|ipcv.retsw
	tnz	pxss$fast_ipc_get_event

" Here we have decided to have pxss block us.

	aos	lb|ipcv.stk_temp       " we blocked

" We truncate stacks if it would save us something

	szn	tc_data$stk_truncate
	tze	no_truncation	" disabled
	szn	tc_data$stk_truncate_always
	tnz	truncate
	szn	tc_data$post_purge_switch
	tnz	truncate		" always truncate if postpurge

	lda	sst$nused		" now many pages?
	als	18		" in units of s**-18
	cmpa	pds$avg_block_steps
	tpl	no_truncation	" stack pages probably will not be
				" evicted.
truncate:
	aos	lb|ipcv.truncated_stacks " note
	
	epbpsb	pds$stack_0_ptr,*
	push

	ldaq	argl_header
	staq	argl 

	call	truncate_stacks$truncate_stacks(argl)
	eppbp	sp|stack_frame.prev_sp,*
	even
	inhibit   on	<+ + + + + + + + + + + + + + + + + + + + + + + +>

	sprisp	sb|stack_header.stack_end_ptr 
	eppsp	bp|0		pop stack
	inhibit	off       <- - - - - - - - - - - - - - - - - - - - - - - ->

no_truncation:
	lda	sst$steps
	sta	lb|ipcv.block_start_steps " Save for averaging
	tra	pxss$fast_ipc_block       " all args in pds vars

"	PXSS returns with SB set to stack_0.

fast_block_return:
	getlp			" relies on SB
	epplb	pds$ipc_vars
	lxl1	pds$validation_level
	ldx6	lb|ipcv.save_entry_ret
	lxl2	lb|ipcv.truncated_stacks  " for offset
	szn	lb|ipcv.stk_temp	      " did we block?
	tze	0,x6		      " NO. return to caller of
				      " common at this point.
" If post_purge is on meters are not valuable
	ldq	sst$steps
	sbq	lb|ipcv.block_start_steps
	szn	tc_data$post_purge_switch
	tnz	truncate_meter_done

	cmpq	sst$nused		" should we have truncated?
	tnc	truncate_incorrect

" the layout in the sst is

"  stk_truncate_should_didnt
"  stk_truncate_should_did
"  stk_truncate_shouldnt_didnt
"  stk_truncate_shouldnt_did
"
" and x2 is 1 iff we truncated

	aos	sst$stk_truncate_should_didnt,x2
	tra	truncate_meter_done
truncate_incorrect:
	aos	sst$stk_truncate_shouldnt_didnt,x2
truncate_meter_done:

"
"  new_average = factor*new_value + (1-factor)*old_value
"
"
	qls	18		" in units of 2**-18
	mpy	tc_data$stk_trunc_avg_f1
	staq	lb|ipcv.block_start_steps " use stk_temp as well
	ldq	pds$avg_block_steps   " fb 35, 18
	mpy	tc_data$stk_trunc_avg_f2  " always 1-f1
	adaq	lb|ipcv.block_start_steps
	lrs	18		  " rescale to 2**-18
	stq	pds$avg_block_steps

	tra	0,x6		return 


check_full_block:
	epbpsb	pds$stack_0_ptr,*
	push
	ldaq	argl_header
	staq	argl
	call	hc_ipc$full_block(argl)
	eppbp	sp|stack_frame.prev_sp,*
	even
	inhibit	on
	sprisp	sb|stack_header.stack_end_ptr 
	eppsp	bp|0		pop stack
	inhibit	off
	lda	=o400000,du
	arl	-1,x1
	cana	pds$ring_events	anything for this ring?
	tze	retj		no, try it all again or return.
	ersa	pds$ring_events	turn off this message ...
	tra	0,5		set return switches, regular-callers, etc.
retj:	szn	lb|ipcv.retsw	Should we return or try more?
	tze	common		Loop, re_using x6.
	short_return

"
argl_header:
	zero	0,4
	zero	0,0


	end
