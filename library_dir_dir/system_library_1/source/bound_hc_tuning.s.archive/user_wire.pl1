/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */

user_wire: user_wire_seg: proc (a_segptr, a_wiring, a_fp, a_np, a_code);

/* Greenberg 2/10/77 */
/* Modified 7/3/84 by Keith Loepere to use the new dc_find. */

/* Parameters */

dcl  a_code			fixed bin (35) parameter;
dcl  a_dn				char (*) parameter;
dcl  a_en				char (*) parameter;
dcl  a_fp				fixed bin parameter;
dcl  a_np				fixed bin parameter;
dcl  a_segptr			ptr parameter;
dcl  a_wiring			bit (1) aligned parameter;

/* Variables */

dcl  code				fixed bin (35);
dcl  dn				char (168);
dcl  en				char (32);
dcl  fp				fixed bin;
dcl  np				fixed bin;
dcl  pathentry			bit (1);
dcl  segptr			ptr;
dcl  wiring			bit (1) aligned;

/* External */

dcl  error_table_$argerr		fixed bin (35) ext;
dcl  error_table_$bad_ring_brackets	fixed bin (35) ext;
dcl  error_table_$invalidsegno	fixed bin (35) ext;

/* Entries */

dcl  activate			entry (ptr, fixed bin (35)) returns (ptr);
dcl  level$get			entry returns (fixed bin (3));
dcl  lock$dir_unlock		entry (ptr);
dcl  lock$unlock_ast		entry;
dcl  pc_wired$unwire		entry (ptr, fixed bin, fixed bin);
dcl  pc_wired$wire_wait		entry (ptr, fixed bin, fixed bin);

/* Misc */

dcl  (fixed, ptr)			builtin;
%page;
	segptr = a_segptr;
	pathentry = "0"b;
	go to join;

user_wire_file: entry (a_dn, a_en, a_wiring, a_fp, a_np, a_code);

	dn = a_dn;
	en = a_en;
	pathentry = "1"b;
join:
	wiring = a_wiring;

	if wiring then do;
	     fp = a_fp;
	     np = a_np;
	end;
	else do;
	     fp = 0;
	     np = -1;
	end;

	if pathentry then call dc_find$obj_status_read_priv (dn, en, DC_FIND_CHASE, ep, code);
	else call dc_find$obj_status_read_priv_ptr (segptr, ep, code);
	if code = 0 then do;
	     if level$get () > fixed (entry.ring_brackets (1), 3) then code = error_table_$bad_ring_brackets;
	     else astep = activate (ep, code);
	     if code = 0 then do;
		if aste.hc_sdw then code = error_table_$invalidsegno;
		else if fp >= fixed (aste.csl, 9)
			| (np ^= -1 & fp + np > fixed (aste.csl, 9))
			| (np < 1 & np ^= -1)
		then code = error_table_$argerr;
		else do;
		     aste.ehs = wiring;
		     if wiring then call pc_wired$wire_wait (astep, fp, np);
		     else call pc_wired$unwire (astep, fp, np);
		end;
		call lock$unlock_ast;
	     end;
	     call lock$dir_unlock (ptr (ep, 0));
	     if pathentry then call dc_find$finished (ep, "0"b);
	end;

	a_code = code;
	return;
%page;
%page; %include aste;
%page; %include dc_find_dcls;
%page; %include dir_entry;
     end;
