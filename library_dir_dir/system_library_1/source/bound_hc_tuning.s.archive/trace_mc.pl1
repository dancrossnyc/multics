/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


trace_mc: proc;
	return;					/* should never enter here */

/* trace_mc - primitive to turn on/off the hardcore machine condition trace mechanism
   initially coded by James A. Bush March 1977 */

dcl (a_segptr, segptr) ptr;
dcl (a_trace_sw, trace_sw) bit (1) aligned;
dcl (a_code, code) fixed bin (35);
dcl (p, a_bp) ptr;
dcl  dirname char (168);
dcl (i, a_buf_size, buf_size) fixed bin;
dcl  ename char (32);
dcl  vl fixed bin (3);
dcl  based_segno fixed bin (35);
dcl  rba (3) fixed bin (3);				/* ring bracket array */
dcl  init_buf (0 : buf_size) bit (36) based (bp);
dcl 1 bseg based (addr (based_segno)) aligned,
    2 seg fixed bin unal,
    2 pad1 fixed bin unal;

dcl  level$set entry (fixed bin (3));
dcl  level$get entry returns (fixed bin (3));
dcl  unique_chars_ entry (bit (*)) returns (char (15));
dcl  append$branch entry (char (*), char (*), fixed bin (5), fixed bin (35));
dcl  initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (1), ptr, fixed bin (35));
dcl  ringbr_$set entry (char (*), char (*), (3) fixed bin (3), fixed bin (35));
dcl  delentry$dseg entry (ptr, fixed bin (35));
dcl  user_wire entry (ptr, bit (1) aligned, fixed bin (18), fixed bin (18), fixed bin (35));
dcl  set$bc_seg entry (ptr, fixed bin (24), fixed bin (35));

dcl  pds$process_dir_name char (32) ext;
dcl  pds$mc_trace_buf ptr unaligned ext;		/* Note packed pointer */
dcl  pds$mc_trace_seg fixed bin (35) ext;
dcl 1 pds$mc_trace_sw aligned ext,
    2 hc_trace_sw bit (1) unaligned,
    2 init_sw bit (1) unaligned;
dcl  error_table_$action_not_performed fixed bin (35) ext;
dcl  error_table_$buffer_big fixed bin (35) ext;

dcl (addr, fixed, addrel, null, rel, ptr, divide) builtin;

/*  */
% include mc_trace_buf;
% include its;

/*  */

/* trace_buffer_init - entry to create and init M. C. buff | delete M. C. trace buff, per state of a_trace_sw */

trace_buffer_init: entry (a_segptr, a_trace_sw, a_buf_size, a_bp, a_code);

/* copy args */

	segptr = a_segptr;
	trace_sw = a_trace_sw;
	a_bp = null;
	a_code = 0;

	vl = level$get ();				/* Save current validation level. */
	call level$set (0);				/* Set hardcore ring validation level. */
	if trace_sw then do;			/* are we turning trace on? */
	     if a_buf_size <= 0 | a_buf_size > max_buf_size then do; /* user requested invalid buffer size */
		code = error_table_$buffer_big;
		go to erret;
	     end;
	     ename = unique_chars_ ("0"b) || ".mct";	/* Create unique buffer segment name. */
	     call append$branch (pds$process_dir_name, ename, 01010b, code);
	     if code ^= 0 then go to erret;		/* Create the buffer segment. */
	     call initiate (pds$process_dir_name, ename, "", 0b, 1b, bp, code);
	     if bp = null then go to erret;		/* Initiate the segment. */
	     rba (1) = 0;				/* set ring brackets to 0 N N */
	     rba (2), rba (3) = vl;
	     call ringbr_$set (pds$process_dir_name, ename, rba, code); /* Change the ring brackets of the buf seg. */
	     if code ^= 0 then go to erret;
	     buf_size = a_buf_size * 1024;		/* set up buffer size */
	     call set$bc_seg (bp, buf_size * 36, code);	/* set bit count  */
	     if code ^= 0 then go to erret;

/* initialize buffer */

	     do i = 0 to buf_size - 1;
		init_buf (i) = buf_init;		/* set up constant in entire buffer */
	     end;

/* initialize trace buffer header */

	     mc_trace_buf.hr_cnt = buf_size / ((8 * mc_size) + hr_size); /* 8:1 ratio mc's to hr's */
	     mc_trace_buf.mc_cnt = (mc_trace_buf.hr_cnt * 8) - 1; /* have to have room for header */
	     mc_trace_buf.hr_strt = fixed (rel (addr (mc_trace_buf.h_regs (1)))); /* figure out starting loc's */
	     mc_trace_buf.mc_strt = fixed (rel (addr (mc_trace_buf.mach_cond (1))));
	     mc_trace_buf.hr_lim = (mc_trace_buf.hr_cnt * hr_size) + hr_strt;
	     mc_trace_buf.mc_lim = (mc_trace_buf.mc_cnt * mc_size) + mc_strt;
	     mc_trace_buf.hr_nxtad = mc_trace_buf.hr_strt;
	     mc_trace_buf.mc_nxtad = mc_trace_buf.mc_strt;

/* wire trace buffer */

	     call user_wire (bp, "1"b, 0, -1, code);
	     if code = 0 then do;

/* set up trace buffer pointer, segno to trace and turn on trace switch in pds */

		a_bp = bp;			/* set buffer pointer for user */
		p = addr (segptr);
		bseg.seg = fixed (p -> its.segno, 15);	/* set up seg  number in upper half of word */
		bseg.pad1 = 0;			/* set lower half of word to zero */
		pds$mc_trace_buf = bp;
		pds$mc_trace_seg = based_segno;
		pds$mc_trace_sw.init_sw = "1"b;	/* let user turn on trace */
	     end;
	end;
	else do;					/* user wants to turn trace off */
	     pds$mc_trace_sw.init_sw = "0"b;		/* don't let user turn on trace */
	     pds$mc_trace_sw.hc_trace_sw = "0"b;	/*  must turn switch off first */
	     pds$mc_trace_seg = 0;
	     bp = pds$mc_trace_buf;			/* save buffer pointer */
	     pds$mc_trace_buf = null;			/* this makes it cleaner */

/* Unwire trace buffer */

	     call user_wire (bp, "0"b, 0, 0, code);
	     if code ^= 0 then go to erret;
	     call delentry$dseg (bp, code);		/* delete buffer segment */

	end;
erret:
	a_code = code;
	call level$set (vl);			/* Restore original validation level. */
	return;

/* hc_trace_on_off - entry to turn the hc_trace_sw in the pds on or off */

hc_trace_on_off: entry (a_trace_sw, a_code);

	a_code = 0;				/* preset good return code */
	if a_trace_sw then				/* user wants to turn trace on */
	     if ^pds$mc_trace_sw.init_sw then		/* if we haven't initialized the trace buffer */
		a_code = error_table_$action_not_performed; /* don't let user turn trace on */
	     else pds$mc_trace_sw.hc_trace_sw = "1"b;
	else pds$mc_trace_sw.hc_trace_sw = "0"b;	/* user wants to turn hc_trace_sw off */
	return;

     end trace_mc;
