/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style4,delnl,insnl,ifthenstmt,ifthen */

convert_access_class_:
     procedure;

/* CONVERT_ACCESS_CLASS_
   program to convert Multics AIM authorizations between their
   character and binary representations.

   PG 740801
   Modified 740823 by PG for $minimum and $test_cva entries.
   Modified 740917 by PG for $to_string_short entry.
   Modified 740930 by PG to allow only level-0 name to be null.
   Modified 741119 by PG to add "system_high" and "system_low" keywords.
   Modified 741213 by PG to call aim_check_ instead of using inline code.
   Modified 750316 by PG (per DAM) to fix bugs in calculation of name lengths in $to_string
   Modified 750604 by PG to allow leading blanks on keywords in $from_string
   Modified 10/05/78 by CDT to add "range" entrypoints.
   Modified: 7 July 1982 by G. Palter to make it recompile again
   Modified 84-03-22 BIM to recognize and present system_high on output.
   Modified 84-12-21 by Lee A. Newcomb:  Changed $encode to output "system_low"
   instead of a null string for that access class, and to
   have $decode accept that string in addition to the null
   string to imply system_low.
*/


/****^  HISTORY COMMENTS:
  1) change(87-02-19,Farley), approve(87-07-20,MCR7691),
     audit(87-03-11,Fawcett), install(87-08-04,MR12.1-1055):
     Added maximum entry point to compute the max authorization of an array of
     authorizations.
                                                   END HISTORY COMMENTS */


/* parameters */

declare  (
         bv_authorization_array dimension (*) bit (72) aligned,
         bv_authorization_binary bit (72) aligned,
         bv_authorization_string char (*),
         bv_code fixed bin (35),
         bv_maximum_authorization bit (72) aligned,
         bv_minimum_authorization bit (72) aligned,
         bv_n_authorizations fixed bin
         ) parameter;

/* automatic */

declare  sensitivity_level_undefined bit (1) aligned,
         category_set_undefined bit (36) aligned,
         (i, k, lb, hb, output_index, string_index) fixed bin,
         (next_level, sensitivity_level) fixed bin (18),
         (next_category_set, category_set) bit (36) aligned,
         (max_length, name_length) fixed bin,
         name char (32) aligned,
         (bad_authorization, more_names, short) bit (1) aligned,
         temp_string bit (72),
         comma char (2) varying,
         colon char (3) varying,
         second_string_ptr pointer,
         second_string_len fixed bin (21);

/* based */

declare  second_string_based char (second_string_len) based (second_string_ptr),
         based_char_array (output_index) char (1) unaligned based;

/* internal static initial */

declare  (
         initialized bit (1) aligned initial ("0"b),
         system_directory char (168) initial (">system_control_1"),
         ip ptr init (null)
         ) internal static;

/* external static */

declare  (
         error_table_$smallarg,
         error_table_$ai_above_allowed_max,
         error_table_$ai_invalid_string,
         error_table_$ai_invalid_range,
         error_table_$ai_invalid_binary
         ) fixed bin (35) external static;

/* entries */

declare  aim_check_$greater_or_equal entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned),
         aim_check_$greater entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned),
         aim_check_$equal entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned),
         hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35)),
         unique_chars_ entry (bit (*)) returns (char (15)),
         unique_chars_$bits entry (char (15)) returns (bit (70));

/* builtin */

declare  (addr, hbound, index, lbound, length, null, rtrim, string, substr, unspec, verify) builtin;

/* include files */

%include aim_template;
%include installation_parms;

/* program */

from_string:
     entry (bv_authorization_binary, bv_authorization_string, bv_code);

	bv_code = 0;
	call from_string_internal (bv_authorization_binary, bv_authorization_string, bv_code);
	return;

from_string_range:
     entry (bv_authorization_range, bv_authorization_string, bv_code);

declare  bv_authorization_range (2) bit (72) aligned parameter;

declare  colon_idx fixed bin (21);

	bv_code = 0;
	colon_idx = index (bv_authorization_string, ":");

	if colon_idx = 0 then do;
	     call from_string_internal (bv_authorization_range (1), bv_authorization_string, bv_code);
	     bv_authorization_range (2) = bv_authorization_range (1);
	     return;
	end;

	call from_string_internal (bv_authorization_range (1), substr (bv_authorization_string, 1, colon_idx - 1),
	     bv_code);
	if bv_code = error_table_$ai_above_allowed_max then bv_code = 0;
						/* we can afford to ignore this-- if LOW bound
						   is above max, either high bound will be too
						   or we will generate ai_invalid_range. */
	if bv_code ^= 0 then return;

	call from_string_internal (bv_authorization_range (2), substr (bv_authorization_string, colon_idx + 1), bv_code)
	     ;
	if bv_code ^= 0 then
	     if bv_code ^= error_table_$ai_above_allowed_max then return;

	if ^aim_check_$greater_or_equal (bv_authorization_range (2), bv_authorization_range (1)) then
	     bv_code = error_table_$ai_invalid_range;

	return;


from_string_internal:
     proc (bv_authorization_binary, bv_authorization_string, bv_code);

declare  (
         bv_authorization_binary bit (72) aligned,
         bv_authorization_string char (*),
         bv_code fixed bin (35)
         ) parameter;

	if ^initialized then do;
	     call initialize_me (bv_code);
	     if bv_code ^= 0 then return;
	end;

/* strip leading blanks. If input is all blank, treat same as "system_low" */

	string_index = verify (bv_authorization_string, " ");

	if string_index = 0 then do;
	     if installation_parms.level_names (0) ^= ""	/* If neither level-0 name is blank, invalid */
		& installation_parms.short_level_names (0) ^= "" then
		bv_code = error_table_$ai_invalid_string;
	     else bv_code = 0;
	     bv_authorization_binary = ""b;		/* input is all blank */
	     return;
	end;

	if substr (bv_authorization_string, string_index) = "system_low" then do;
	     bv_authorization_binary = ""b;
	     bv_code = 0;
	     return;
	end;

	if substr (bv_authorization_string, string_index) = "system_high" then do;
	     bv_authorization_binary = installation_parms.access_authorization_ceiling;
	     bv_code = 0;
	     return;
	end;

	more_names = "1"b;				/* not a trivial case, must parse input */

	sensitivity_level_undefined = "1"b;
	category_set_undefined = (36)"1"b;

	sensitivity_level = 0;
	category_set = (36)"0"b;

	output_index = 1;

	do while (more_names);
	     name_length = index (substr (bv_authorization_string, string_index), ",") - 1;
	     if name_length = -1			/* if last name on line */
		then
		name_length = length (bv_authorization_string) - string_index + 1;

	     name = substr (bv_authorization_string, string_index, name_length);
	     string_index = string_index + name_length + 1;

	     if string_index > length (bv_authorization_string) then more_names = "0"b;
						/* done if no more input left */

	     lb = lbound (installation_parms.level_names (*), 1);
	     hb = hbound (installation_parms.level_names (*), 1);

	     do i = lb to hb while (installation_parms.level_names (i) ^= name);
						/* try long level names. */
	     end;

	     if i = hb + 1				/* not a long level name, try short level names. */
		then
		do i = lb to hb while (installation_parms.short_level_names (i) ^= name);
	     end;

	     if i <= hb				/* is a (long or short) level name */
		then
		if sensitivity_level_undefined then do;
		     sensitivity_level = i;
		     sensitivity_level_undefined = "0"b;
		end;
		else do;
		     bv_code = error_table_$ai_invalid_string;
		     return;
		end;
	     else do;				/* not a level name, try category names */
		lb = lbound (installation_parms.category_names (*), 1);
		hb = hbound (installation_parms.category_names (*), 1);

		do i = lb to hb while (installation_parms.category_names (i) ^= name);
		end;

		if i = hb + 1			/* not a long category name, try short category name. */
		     then
		     do i = lb to hb while (installation_parms.short_category_names (i) ^= name);
		end;

		if i <= hb			/* is a (long or short) category name */
		     then
		     if substr (category_set_undefined, i, 1) then do;
			substr (category_set, i, 1) = "1"b;
			substr (category_set_undefined, i, 1) = "0"b;
		     end;
		     else do;
			bv_code = error_table_$ai_invalid_string;
			return;
		     end;
		else do;
		     bv_code = error_table_$ai_invalid_string;
		     return;
		end;
	     end;

/* strip leading blanks on next name */

	     if more_names then do;
		k = verify (substr (bv_authorization_string, string_index), " ") - 1;

		if k = -1 then
		     more_names = "0"b;		/* rest of input is blank */
		else string_index = string_index + k;	/* step over k blanks */
	     end;
	end;

	addr (bv_authorization_binary) -> aim_template.categories = category_set;
	addr (bv_authorization_binary) -> aim_template.level = sensitivity_level;
	string (addr (bv_authorization_binary) -> aim_template.privileges) = ""b;

/* Authorization has been converted. See if it is greater than the authorization ceiling.
   This is a non-fatal error; the converted value will still be returned. */

	if ^aim_check_$greater_or_equal (installation_parms.access_authorization_ceiling, bv_authorization_binary) then
	     bv_code = error_table_$ai_above_allowed_max;
	else bv_code = 0;

	return;
     end from_string_internal;

/* ---------- */

/* Entry to convert the binary form of an authorization/access class to the character string form.
   Works properly for null names. */

to_string:
     entry (bv_authorization_binary, bv_authorization_string, bv_code);

	bv_code = 0;
	short = "0"b;				/* use long names */
	comma = ", ";				/* make output a little prettier */

	call to_string_internal (bv_authorization_binary, bv_authorization_string, bv_code);
	return;


/* Entry to convert binary form to the character string form, using the short names. */

to_string_short:
     entry (bv_authorization_binary, bv_authorization_string, bv_code);

	bv_code = 0;
	short = "1"b;				/* use short names */
	comma = ",";				/* put names close together */

	call to_string_internal (bv_authorization_binary, bv_authorization_string, bv_code);
	return;


/* Entry to convert pair of binary forms to character string form. */

to_string_range:
     entry (bv_authorization_range, bv_authorization_string, bv_code);

	bv_code = 0;
	short = "0"b;				/* use long names */
	comma = ", ";				/* make output a little prettier */
	colon = " : ";
	goto to_range_common;


/* Entry to convert pair of binary forms to the character string form, using the short names. */

to_string_range_short:
     entry (bv_authorization_range, bv_authorization_string, bv_code);

	bv_code = 0;
	short = "1"b;				/* use short names */
	comma = ",";				/* put names close together */
	colon = ":";

to_range_common:
	call to_string_internal (bv_authorization_range (1), bv_authorization_string, bv_code);
	if bv_code ^= 0 then return;

	if bv_authorization_string = "" then bv_authorization_string = "system_low";

	if bv_authorization_range (1) = bv_authorization_range (2) then return;

	output_index = length (rtrim (bv_authorization_string, " ")) + 1;
	if output_index + length (colon) + 1 > length (bv_authorization_string) then do;
	     bv_code = error_table_$smallarg;
	     return;
	end;

	substr (bv_authorization_string, output_index, length (colon)) = colon;
	output_index = output_index + length (colon);

	second_string_ptr = addr (addr (bv_authorization_string) -> based_char_array (output_index));
	second_string_len = length (substr (bv_authorization_string, output_index));

	call to_string_internal (bv_authorization_range (2), second_string_based, bv_code);
	if bv_code ^= 0 then return;

	if ^aim_check_$greater_or_equal (bv_authorization_range (2), bv_authorization_range (1)) then
	     bv_code = error_table_$ai_invalid_range;

	if second_string_based = "" then
	     if bv_code = 0 then
		if short then
		     bv_authorization_string = "";
		else bv_authorization_string = "system_low";
	     else do;
		second_string_based = "system_low";
		if second_string_based ^= "system_low" then bv_code = error_table_$smallarg;
	     end;

	return;

to_string_internal:
     proc (bv_authorization_binary, bv_authorization_string, bv_code);

declare  (
         bv_authorization_binary bit (72) aligned,
         bv_authorization_string char (*),
         bv_code fixed bin (35)
         ) parameter;

	if ^initialized then do;
	     call initialize_me (bv_code);
	     if bv_code ^= 0 then return;
	end;

	bad_authorization = "0"b;

	if short then
	     max_length = length (installation_parms.short_level_names (1));
	else max_length = length (installation_parms.level_names (1));

	if aim_check_$greater (installation_parms.access_authorization_ceiling, ""b)
						/* is system_high greater than system_low? */
	     then
	     if aim_check_$equal (bv_authorization_binary, installation_parms.access_authorization_ceiling) then do;
		bv_authorization_string = "system_high";
		return;
	     end;

	sensitivity_level = addr (bv_authorization_binary) -> aim_template.level;
	category_set = addr (bv_authorization_binary) -> aim_template.categories;

/* Sensitivity level name comes first (may be null string). */

	if sensitivity_level <= hbound (installation_parms.level_names (*), 1)
	     & sensitivity_level >= lbound (installation_parms.level_names (*), 1) then do;
	     if short then
		name_length = length (rtrim (installation_parms.short_level_names (sensitivity_level), " "));
	     else name_length = length (rtrim (installation_parms.level_names (sensitivity_level), " "));

/* only level 0 can have a null name */

	     if name_length = 0 then
		if sensitivity_level ^= 0 then bad_authorization = "1"b;

/* copy in level name, and set rest of output string to blanks */

	     if short then
		bv_authorization_string = installation_parms.short_level_names (sensitivity_level);
	     else bv_authorization_string = installation_parms.level_names (sensitivity_level);

	     output_index = name_length + 1;
	end;
	else do;
	     bad_authorization = "1"b;
	     output_index = 1;			/* level was bad, but still try to convert categories */
	     bv_authorization_string = "";
	end;

/* Category names follow level name. */
/* (we assume max_length of category names is same as max_length of level names). */

	do i = lbound (installation_parms.category_names (*), 1) to hbound (installation_parms.category_names (*), 1);

	     if substr (category_set, i, 1) then do;
		if short then
		     name_length = length (rtrim (installation_parms.short_category_names (i), " "));
		else name_length = length (rtrim (installation_parms.category_names (i), " "));

/* null category names are not allowed */

		if name_length = 0 then bad_authorization = "1"b;

/* make sure comma, optional space, and whole name will fit */

		if output_index + name_length + length (comma) - 1 > length (bv_authorization_string) then do;
		     bv_code = error_table_$smallarg;
		     return;
		end;

		if output_index > 1			/* if there is a preceding name */
		then do;
		     substr (bv_authorization_string, output_index, length (comma)) = comma;
		     output_index = output_index + length (comma);
		end;

		if short then
		     substr (bv_authorization_string, output_index, name_length) =
			installation_parms.short_category_names (i);
		else substr (bv_authorization_string, output_index, name_length) =
			installation_parms.category_names (i);

		output_index = output_index + name_length;
	     end;
	end;

	if i <= length (category_set) then
	     if substr (category_set, i)		/* if any bits are on in unused category bits */
		then
		bad_authorization = "1"b;

/* we do not check that the aim_template.privileges field is all zero. */
/* (so that programs who call us don't have to worry about exception bits stored there). */

	if bad_authorization then
	     bv_code = error_table_$ai_invalid_binary;
	else bv_code = 0;
	return;
     end to_string_internal;

/* Entry to compute the max reduction of a vector of authorizations.
   The result has a sensitivity level greater than or equal to each input level,
   and a category set which is a (possibly improper) superset of all input category sets. */

maximum:
     entry (bv_authorization_array, bv_n_authorizations, bv_maximum_authorization);

	sensitivity_level = addr (bv_authorization_array (1)) -> aim_template.level;
	category_set = addr (bv_authorization_array (1)) -> aim_template.categories;

	do i = 2 to bv_n_authorizations;		/* even works for n = 1 */
	     next_level = addr (bv_authorization_array (i)) -> aim_template.level;
	     next_category_set = addr (bv_authorization_array (i)) -> aim_template.categories;

	     if sensitivity_level < next_level then sensitivity_level = next_level;

	     category_set = category_set | next_category_set;
	end;

	addr (bv_maximum_authorization) -> aim_template.level = sensitivity_level;
	addr (bv_maximum_authorization) -> aim_template.categories = category_set;
	string (addr (bv_maximum_authorization) -> aim_template.privileges) = ""b;
	return;

/* Entry to compute the min reduction of a vector of authorizations.
   The result has a sensitivity level less than or equal to each input level,
   and a category set which is a (possibly improper) subset of all input category sets. */

minimum:
     entry (bv_authorization_array, bv_n_authorizations, bv_minimum_authorization);

	sensitivity_level = addr (bv_authorization_array (1)) -> aim_template.level;
	category_set = addr (bv_authorization_array (1)) -> aim_template.categories;

	do i = 2 to bv_n_authorizations;		/* even works for n = 1 */
	     next_level = addr (bv_authorization_array (i)) -> aim_template.level;
	     next_category_set = addr (bv_authorization_array (i)) -> aim_template.categories;

	     if sensitivity_level > next_level then sensitivity_level = next_level;

	     category_set = category_set & next_category_set;
	end;

	addr (bv_minimum_authorization) -> aim_template.level = sensitivity_level;
	addr (bv_minimum_authorization) -> aim_template.categories = category_set;
	string (addr (bv_minimum_authorization) -> aim_template.privileges) = ""b;
	return;

/* Entry to encode an authorization as a character string short enough   */
/* to be used as an entry name.  For system_low, the string "system_low" */
/* is returned; for all other access classes, we use unique_chars_.	   */

encode:
     entry (bv_authorization_binary, bv_authorization_encoded);

/* parameters */

declare  bv_authorization_encoded char (*);

/* program */

	temp_string = unspec (bv_authorization_binary);
	string (addr (temp_string) -> aim_template.privileges) = ""b;

	if temp_string ^= ""b then
	     bv_authorization_encoded = unique_chars_ (temp_string);
	else bv_authorization_encoded = "system_low";

	return;

/* Entry to decode back into an authorization. */

decode:
     entry (bv_authorization_binary, bv_authorization_encoded);

/* program */

	if bv_authorization_encoded = "" | bv_authorization_encoded = "system_low" then
	     temp_string = ""b;
	else temp_string = unique_chars_$bits ((bv_authorization_encoded));

	unspec (bv_authorization_binary) = temp_string;
	return;

/* Entry to change the default system directory for testing purposes. */

test_cva:
     entry (bv_system_directory);

/* parameters */

declare  bv_system_directory char (*) parameter;

/* program */

	system_directory = bv_system_directory;
	initialized = "0"b;
	return;

/* Internal procedure to get a pointer to installation_parms. */

initialize_me:
     procedure (bv_code);

/* parameters */

declare  bv_code fixed bin (35) parameter;

/* program */

	call hcs_$initiate (system_directory, "installation_parms", "", 0, 0, ip, bv_code);
	if ip = null then return;

	bv_code = 0;
	initialized = "1"b;

     end initialize_me;

     end convert_access_class_;
