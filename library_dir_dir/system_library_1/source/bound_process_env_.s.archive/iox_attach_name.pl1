/****^  ******************************************************
        *                                                    *
        * Copyright, (C) Honeywell Bull Inc., 1987           *
        *                                                    *
        * Copyright (c) 1987 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        * Copyright (c) 1972 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        ****************************************************** */

/* This is the attachment module for iox_.

   Last Modified: (Date and Reason)
   Aug 9, 1977 by S. Webber for quote processing
   Modified 11/82 by S. Krupp to do the following:  move code that
     parses attach descriptions to an external subroutine, to make
     way for the new iox_$attach_loud entry, and to move code that
     handles entry point names in attach module names from the
     io_call command to here.
*/
/* format: style4,delnl,insnl,ifthenstmt,indnoniterend */
iox_attach_name:
     proc();

          return;					/* Not a legal entry. */

/* Parameters. */

dcl  input_descrip char (*);
dcl  iocb_ptr ptr;
dcl  ref_ptr ptr;
dcl  ioname char (*);
dcl  ret_code fixed bin (35);


/* Automatic. */

dcl  attach_ent char(32);
dcl  caller_ptr ptr;
dcl  code fixed bin (35);
dcl  descrip char (length (input_descrip));
dcl  dir char (168);
dcl  ent char (32);
dcl  entry_var entry (ptr, (*) char (*) var, bit (1) aligned, fixed bin (35)) variable;
dcl  i fixed bin;
dcl  loud_sw bit(1) aligned;
dcl  max_option_len fixed bin;
dcl  n_options fixed bin;
dcl  p ptr;
dcl  pname char(length(input_descrip));
dcl  rem_descrip char (length (input_descrip)) var;

/* Procedures. */

dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  iox_find_iocb$find_iocb ext entry (char (*), ptr, fixed bin(35));
dcl  iox_get_options entry (char (*), (*) char (*) var, fixed bin (35));
dcl  hcs_$initiate_count ext entry (char (*), char (*), char (*), fixed bin, fixed bin, ptr) returns (fixed bin (35));
dcl  hcs_$make_entry ext entry (ptr, char (*), char (*), entry, fixed bin (35));
dcl  iox_measure_options entry (char (*), fixed bin, fixed bin, fixed bin (35));
dcl  term_$single_refname ext entry (char (*) aligned) returns (fixed bin (35));

/* Static */

dcl  error_table_$noarg fixed bin (35) ext;

/* Built-ins. */

dcl  (index, length, null, reverse, rtrim, search, substr) builtin;

/* End of declarations. */
%page;
/* Beginning of entry point ..... iox_$attach_name(ioname,iocb_ptr,descrip,ref_ptr) ..... */

attach_name:
     entry (ioname, iocb_ptr, input_descrip, ref_ptr, ret_code);

	caller_ptr = ref_ptr;
	loud_sw = "0"b;
	go to FIND_IO;

/* Beginning of entry point ..... iox_$attach_ioname(ioname,iocb_ptr,descrip) ..... */

attach_ioname:
     entry (ioname, iocb_ptr, input_descrip, ret_code);

	caller_ptr = null ();
	loud_sw = "0"b;

FIND_IO:
	call iox_find_iocb$find_iocb (ioname, iocb_ptr, code);
	if code ^= 0 then goto ATTACH_RETURN;
	go to ATTACH;

/* Beginning of entry point ..... iox_$attach_ptr(iocb_ptr,descrip,ref_ptr) ..... */

attach_ptr:
     entry (iocb_ptr, input_descrip, ref_ptr, ret_code);

	caller_ptr = ref_ptr;
	loud_sw = "0"b;
	go to ATTACH;

/* Beginning of entry point ..... iox_$attach_iocb(iocb_ptr,descrip) ..... */

attach_iocb:
     entry (iocb_ptr, input_descrip, ret_code);

	caller_ptr = null ();
	loud_sw = "0"b;
	go to ATTACH;

/* Beginning of entry point ..... iox_$attach_loud(iocb_ptr, descrip, ref_ptr, code) ..... */

attach_loud:
     entry (iocb_ptr, input_descrip, ref_ptr, ret_code);

          caller_ptr = ref_ptr;
	loud_sw = "1"b;

/* Extract the first token in the description string, which is the Module name. */

ATTACH:
          descrip = input_descrip;

	i = index (descrip, " ") - 1;
	if i < 0 then i = length (descrip);
	if i = 0 then do;
	     code = error_table_$noarg;
	     goto ATTACH_RETURN;
	     end;

/* If a pathname is given, initiate the specified DIM. */

          pname = substr(descrip, 1, i);
	rem_descrip = substr(descrip, i + 1);

	attach_ent, dir, ent = "";

	i = search(reverse(pname), "<>$");		/* Look for special chars. */

	if i = 0
	then ent = pname;				/* The simplist case. */
	else do;					/* Must break description into components. */
	     i = length(pname) - i + 1;
	     if substr(pname, i, 1) = "$"		/* An entry was specified, use it. */
	     then do;				/* Save entry name for later. */
	          if i < length(pname)
		then attach_ent = substr(pname, i + 1);
		i = i - 1;
	     end;
	     else i = length(pname);			/* No entry specified by user. */
	     pname = substr(pname, 1, i);
	     if search (substr (descrip, 1, i), "<>") ^= 0
               then do;				/* must be pathname */
	          call expand_pathname_ (pname, dir, ent, code);
	          if code ^= 0 then goto ATTACH_RETURN;
	          code = term_$single_refname ((ent));	/* To avoid refname problems. */
	          code = hcs_$initiate_count (dir, ent, ent, 0, 1, p);
	          if p = null () then goto ATTACH_RETURN;
	          caller_ptr = null ();
	     end;
	     else ent = pname;
	end;

	if attach_ent = ""
	then attach_ent = rtrim(ent) || "attach";

	call hcs_$make_entry (caller_ptr, ent, attach_ent, entry_var, code);
	if code ^= 0 then goto ATTACH_RETURN;

/* Now scan the remainder of the description string, counting tokens (tn) and
   remembering the longest length (m). */

	call iox_measure_options ((rem_descrip), n_options, max_option_len, code);
	if code ^= 0 then goto ATTACH_RETURN;

	begin;

dcl  option_array (n_options) char (max_option_len) var;

	     call iox_get_options ((rem_descrip), option_array, code);
	     if code ^= 0 then goto ATTACH_RETURN;

/* Finally, call the Module to actually perform the attach. */

	     call entry_var (iocb_ptr, option_array, loud_sw, code);
	end;

ATTACH_RETURN:
	ret_code = code;

     end iox_attach_name;
