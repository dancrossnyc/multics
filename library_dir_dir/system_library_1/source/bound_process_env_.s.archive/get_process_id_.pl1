/****^  ******************************************************
        *                                                    *
        * Copyright, (C) Honeywell Bull Inc., 1987           *
        *                                                    *
        * Copyright (c) 1987 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        * Copyright (c) 1972 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        ****************************************************** */

/****	GET_PROCESS_ID_
	GET_GROUP_ID_
	GET_PDIR_
	GET_LOCK_ID_
	GET_PROCESS_AUTHORIZATION_
	GET_PROCESS_ACCESS_CLASS_
	GET_PROCESS_MAX_AUTHORIZATION_
	GET_MAX_AUTHORIZATION_

 - entries to return values  for specified per process variables.

   Originally coded by R. J. Feiertag on January 25, 1970		*/
/*		Converted to V2 by E. Stone 03/74 */
/*		get_authorization_ entry added by Kobziar July 74 */
/*		get_max_authorization_ and get_privileges_ added May 75 */
/*		Modified March 1975 by Larry Johnson to fix init subroutine. */
/*		Modified 830906 for correct "returns" entry declarations... -E. A. Ranzenbach */
/* Modified 84-04-26 BIM for rationalized aim-related entries. */

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend */
get_process_id_:
     proc () returns (bit (36));

dcl  i fixed bin (17),
     authorization bit (72) aligned;
dcl  int_process_id bit (36) aligned internal static,
     int_group_id char (32) aligned internal static,
     int_pdir char (32) aligned internal static,
     access_class bit (72) aligned internal static,
     max_authorization bit (72) aligned internal static,
     int_lock_id bit (36) aligned internal static,
     not_init_yet bit (1) aligned internal static init ("1"b);

dcl  hcs_$get_authorization ext entry (bit (72) aligned, bit (72) aligned);
dcl  aim_util_$get_access_class entry (bit (72) aligned) returns (bit (72) aligned) reducible;
dcl  aim_util_$get_privileges entry (bit (72) aligned) returns (bit (36) aligned) reducible;

dcl  substr builtin;

dcl  process_id bit (36);

	if not_init_yet then call init;
	process_id = int_process_id;
	return (process_id);

get_group_id_:
     entry () returns (char (32));

dcl  group_id char (32);

	if not_init_yet then call init;
	group_id = int_group_id;
	return (group_id);

tag_star:
     entry () returns (char (32));

	if not_init_yet then call init;
	group_id = int_group_id;
	group_id = substr (group_id, 1, length (rtrim (group_id)) - 1) || "*";
	return (group_id);


get_pdir_:
     entry () returns (char (168));

dcl  pdir char (168);

	if not_init_yet then call init;
	pdir = int_pdir;
	return (pdir);

get_lock_id_:
     entry () returns (bit (36));

dcl  lock_id bit (36);

	if not_init_yet then call init;
	lock_id = int_lock_id;
	return (lock_id);

init:
     proc;					/* Internal procedure to initially recover per process information from ring 0 and
						   store it internal static */

dcl  hcs_$proc_info ext entry (bit (36) aligned, char (32) aligned, char (32) aligned, bit (36) aligned);

	call hcs_$proc_info (int_process_id, int_group_id, int_pdir, int_lock_id);

	call hcs_$get_authorization (access_class, max_authorization);
	access_class = aim_util_$get_access_class (access_class);

	not_init_yet = "0"b;

     end init;

get_initial_ring_:
     entry () returns (fixed bin (17));					/* Get initial ring from ring 0 each time */

dcl  iring fixed bin;

dcl  hcs_$get_initial_ring entry (fixed bin);

	call hcs_$get_initial_ring (iring);		/* Schlep it out to the user */

	return (iring);

get_process_access_class_:
get_authorization_: /** obsolete name */
     entry () returns (bit (72) aligned);

dcl  ret_auth bit (72) aligned;

	if not_init_yet then call init;
	return (access_class);


get_process_authorization_:
	entry () returns (bit (72) aligned);

	call hcs_$get_authorization (authorization, (""b));
	return (authorization);


get_process_max_authorization_:
get_max_authorization_: /** obsolete name */
     entry () returns (bit (72) aligned);

	if not_init_yet then call init;

	ret_auth = max_authorization;

	return (ret_auth);

get_privileges_:
     entry () returns (bit (36) aligned);

	call hcs_$get_authorization (authorization, "0"b);

	return (aim_util_$get_privileges (authorization));

     end get_process_id_;
