/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-05-13,GJohnson), approve(86-05-13,MCR7387),
     audit(86-05-13,Martinson), install(86-05-14,MR12.0-1056):
     Correct error message documentation.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,linecom,indcomtxt,^inddcls,^indnoniterdo */

access_audit_util_:
     procedure;

/* format: off */
/****** History:
	85-01-14 EJ Sharpe - changes per code audit, set pds$throttle_segment_state_changes
	85-01-13 EJ Sharpe - added message documentation, fixed access_audit_ call
	85-01-11 EJ Sharpe - fixed check for proper active_hardcore_data meters
	85-01-07 EJ Sharpe - extracted code from access_audit_
******/


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* ACCESS_AUDIT_UTIL_							*/
	/*									*/
	/* Collection of utility routines associated with access_audit_			*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* format: on */


/*	PARAMETERS	*/

dcl     a_area_ptr		 parameter pointer;		/* user area where we can put things */
dcl     a_audit_flags	 parameter bit (36) aligned;	/* process audit flags */
dcl     a_code		 parameter fixed bin (35);	/* returned system status code */
dcl     a_audit_meter_info_num parameter fixed bin;	/* number of meter buckets returned */
dcl     a_audit_meter_info_ptr parameter pointer;		/* pointer to metering data for caller */


/*	AUTOMATIC		*/

dcl     area_ptr		 pointer;			/* arg copy */
dcl     code		 fixed bin (35);		/* arg copy */
dcl     1 event_flags	 aligned like audit_event_flags;
						/* passed to access audit */
dcl     i			 fixed bin;		/* index */
dcl     j			 fixed bin;		/* index */
dcl     old_audit_flags	 bit (36) aligned;		/* temp for process audit flags */


/*	BASED		*/

dcl     area		 area based (area_ptr);


/*	MISCELLANEOUS	*/

dcl     addr		 builtin;
dcl     any_other		 condition;
dcl     null		 builtin;
dcl     string		 builtin;


/*	EXTERNAL		*/

dcl     access_operations_$process_audit_flags_modify
			 bit (36) aligned ext;

/* Note - The next four externals hold the access audit metering data. */
/*	active_hardcore_data$access_audit_num_meters" is set to the dimension. */
/*        This value is (n_audit_objects*n_audit_access_types) + n_audit_events + 1. */
/*	This dimension should be increased as audit objects/events are added. */
dcl     active_hardcore_data$access_audit_num_meters
			 fixed bin external;
dcl     active_hardcore_data$access_audit_count
			 (1) fixed bin (35) external;
dcl     active_hardcore_data$access_audit_check_count
			 (1) fixed bin (35) external;
dcl     active_hardcore_data$access_audit_cpu_time
			 (1) fixed bin (71) external;
dcl     active_hardcore_data$access_audit_pagefaults
			 (1) fixed bin (35) external;

dcl     error_table_$unexpected_condition
			 fixed bin (35) ext;
dcl     error_table_$unimplemented_version
			 fixed bin (35) ext;

dcl     pds$audit_flags	 bit (36) aligned ext;
dcl     pds$throttle_segment_state_changes
			 bit (1) aligned ext;


/*	ENTRIES		*/

dcl     access_audit_$check_general
			 entry (bit (36) aligned, bit (36) aligned) returns (bit (1) aligned);
dcl     access_audit_$log_general
			 entry options (variable);
dcl     ioa_$rsnnl		 entry options (variable);
dcl     level$get		 entry returns (fixed bin);
%page;
/* format: off */

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* GET_AUDIT_METERS - Entrypoint.						*/
	/*									*/
	/* This entry returns the current access_audit_ meters to the caller.			*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* format: on */

get_audit_meters:
     entry (a_area_ptr, a_audit_meter_info_num, a_audit_meter_info_ptr, a_code);

	code = error_table_$unexpected_condition;

	on any_other goto GET_METERS_EXIT;

	area_ptr = a_area_ptr;

	audit_meter_info_num = (n_audit_objects * 2 * n_audit_access_types) + n_audit_flags + 1;

	if audit_meter_info_num ^= active_hardcore_data$access_audit_num_meters
	then do;
	     code = error_table_$unimplemented_version;
	     goto GET_METERS_EXIT;
	end;

	allocate audit_meter_info in (area);
	audit_meter_info.version = audit_meter_info_version_1;

/* first the object related meters */
	do i = 1 to n_audit_objects;
	     do j = 1 to n_audit_access_types;		/* for each operation grant */
		call copy_meters (Short_Object_Names (i), Short_Level_Names (j),
		     "grant", (i - 1) * n_audit_access_types * 2 + j);
	     end;
	     do j = n_audit_access_types + 1 to n_audit_access_types * 2;
						/* for each operation denial */
		call copy_meters (Short_Object_Names (i), Short_Level_Names (j - n_audit_access_types),
		     "deny", (i - 1) * n_audit_access_types * 2 + j);
	     end;
	end;

/* and then the event related meters */
	do i = (n_audit_objects * n_audit_access_types * 2) + 1
	     to (n_audit_objects * n_audit_access_types * 2) + n_audit_flags;
	     call copy_meters (Long_Flag_Names (i - (n_audit_objects * 2 * n_audit_access_types)), "", "", i);
	end;

/* and finally the catch-all meter */
	call copy_meters ("All Others (should be zero)", "", "", audit_meter_info_num);

	a_audit_meter_info_num = audit_meter_info_num;
	a_audit_meter_info_ptr = addr (audit_meter_info);
	code = 0;

GET_METERS_EXIT:
	a_code = code;
	return;

copy_meters:					/* internal proc used by get_meters entrypoint exclusively */
     procedure (a_str1, a_str2, a_str3, a_index);

dcl     (a_str1, a_str2, a_str3)
			 char (*) parameter;
dcl     a_index		 fixed bin parameter;


	call ioa_$rsnnl ("^a ^a ^a", audit_meter_info.name (a_index), (0), a_str1, a_str2, a_str3);

	audit_meter_info.count (a_index) = active_hardcore_data$access_audit_count (a_index);
	audit_meter_info.check_count (a_index) = active_hardcore_data$access_audit_check_count (a_index);
	audit_meter_info.cpu_time (a_index) = active_hardcore_data$access_audit_cpu_time (a_index);
	audit_meter_info.pagefaults (a_index) = active_hardcore_data$access_audit_pagefaults (a_index);

     end copy_meters;
%page;
/* format: off */

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* GET_AUDIT_FLAGS - Entrypoint.						*/
	/*									*/
	/* This entry returns the process's audit flags.					*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* format: on */

get_audit_flags:
     entry (a_audit_flags);

	a_audit_flags = pds$audit_flags;

	return;
%page;
/* format: off */

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* SET_AUDIT_FLAGS - Entrypoint.						*/
	/*									*/
	/* This entry sets the process's audit flags.  It is available only through hphcs_.	*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* format: on */

set_audit_flags:
     entry (a_audit_flags);

	old_audit_flags = pds$audit_flags;
	pds$audit_flags = a_audit_flags;

/* audit this event! */
	string (event_flags) = ""b;
	event_flags.special_op = "1"b;
	event_flags.priv_op = "1"b;
	event_flags.grant = "1"b;
	call access_audit_$log_general ("access_audit_util_", level$get (), string (event_flags),
	     access_operations_$process_audit_flags_modify, "", 0, null (), 0,
	     "Changed from ^w to ^w", old_audit_flags, pds$audit_flags);

/* since audit behaviour has changed, we must recalulate pds$throttle_segment_state_changes */
/* as is done during process creation in act_proc */

	string (event_flags) = ""b;
	event_flags.grant = "1"b;
	event_flags.cc_10_100 = "1"b;
	pds$throttle_segment_state_changes =
	     access_audit_$check_general (string (event_flags), "0"b /* null oper code */);

	return;

/* format: off */
%page; %include access_audit_flags;
%page; %include access_audit_eventflags;
%page; %include access_audit_names;
%page; %include access_audit_meter_info;
%page;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   AUDIT (access_audit_util_): GRANTED modification of process audit flags ADDED_INFO

   S:	$access_audit

   T:	$run

   M:	The specified user has invoked a privileged operation to change
   the process audit flags.  This may result in more or less audit
   messages for that user.

   A:	$notify_ssa

   END MESSAGE DOCUMENTATION */


     end access_audit_util_;
