" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1985 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	LEVEL
"
"	This procedure is called to get and set the validation level
"	for the process.
"	the get entrypoint is both a ring zero utility and an fgate.
"	the set entrypoint is called only from ring zero.
"	the seg_gate entrypoint can be called through hcs_ as
"	an fgate.
"
"	Modified 5/19/80 by J. A. Bush to not call ring_alarm if no change in validation level
"         Modified 830518 BIM for level$gate_set, various cleanup, 
"		no stack frame.
"         Modified 1985-05-08, BIM: new entrypoint level$admin_gate_set
"	sets no_audit_ring1_fs_object_ops.
"
"	This procedure maintains the array in pds$ring_alarm_val.
"	pds$ring_alarm_val (r) ^= 0 iff a ring alarm should be
"	signalled upon leaving ring r for the purpose of fixing
"	the validation level. On other reasons for ring alarms 
"	pds$ring_alarm_val should NOT be set.
"
"	Furthermore pds$ring_alarm_val (r) is equal to the value
"	of the validation level on entry to this ring. This is
"	guaranteed by setting it nonzero iff it is zero.
"

	name	level
	entry	get
	entry	set
	entry	set_gate
	entry	set_admin_gate

" The *_gate entries are called as FGATES. Therefore, there is no
" stack frame for the gate itself. Therefore, sp
" is a pointer to the outer ring's stack frame, and
" we can use that ring number to validate that
" call hcs_$level_set (v) -- v >= ring of execution.

" CODING CONVENTION
"
" A contains the new (or putative new) validation level
" Q contains the ring on behalf of whom we are acting
" X1 is stored into pds$no_audit_ring1_fs_object_ops

set_gate:
	lda	ap|2,*			Get argument 
	tmi	error_big_ring		Unsigned number, after all
	cmpa	=7,dl
	tpnz	error_big_ring		No more ring 64
	eax0	0,al			Copy to X0 

	epaq	sp|0			Get ringno
	ana	=7,dl			ringno only

" The following gets around the lack of inter-register compare instructions.
" Since there are only 8 different values for the argument, this maneuver
" uses x0 to find its own value in storage. Ycch.

	cmpa	ring_table,x0		is execution ring (A) <= requested ring (X0)?
	tpnz	error_small_ring		no, go bitch.

	llr	36			A -> Q
	eaa	0,x0			X0 -> AU
	arl	18			AU -> AL

	cmpa	1,dl			Ring 1?
	tpl	reset_no_audit		greater
	ldx1	pds$no_audit_ring1_fs_object_ops  " value remains
	tra	set_common
reset_no_audit:
	eax1	0			greater than 1, zero flag
	tra	set_common

set_admin_gate:
	lda	pds$validation_level
	sta	ap|2,*			return old value

	lda	1,dl			We are setting 1

	ldq	1,dl			Called from ring 1

	ldx1	pds$no_audit_ring1_fs_object_ops  " may be zeroed
	tnz	no_audit_already_set	
	lxl2	pds$initial_ring		Initial ring must not be 1
	cmpx2	1,du
	tze	dont_suppress_audit
	szn	active_hardcore_data$audit_ring1_fs_object_ops
	tnz	dont_suppress_audit
	ldx1	=o400000,du		turn on the bit
no_audit_already_set:			
dont_suppress_audit:
	tra	set_common

" This is called only in ring 0

set:	
	lda	ap|2,*			fetch argument
	tmi	error_r0_big_ring
	cmpa	=7,dl			Reasonable?
	tpnz	error_r0_big_ring

	ldq	0,dl			we are ring 0.

	ldx1	pds$no_audit_ring1_fs_object_ops  retain value

set_common:
	cmpa	pds$validation_level	Trivial case?
					" For access audit, the ring 
					" alarm for the validation
				          " level is already set.
	tnz	set_non_trivial		nope.
	short_return			No change.

set_non_trivial:
	stx1	pds$no_audit_ring1_fs_object_ops " set new value
	szn	pds$ring_alarm_val,ql
	tnz	set_not_first

	eax1	0,al			store new level in X1
	lda	pds$validation_level	we need to save this
	sta	pds$ring_alarm_val,ql	if this is first save
	sxl1	pds$validation_level	set new level
	tra	call_ring_alarm		and recalculate RAR

set_not_first:
	sta	pds$validation_level	new level
	cmpa	pds$ring_alarm_val,ql	if back, no more alarm
	tnz	call_ring_alarm		not back to where it was
	stz	pds$ring_alarm_val,ql

call_ring_alarm:
	eppap	null_arglist
	tra	ring_alarm$reset		its return is ours

"
	tempd	arg_list_error(2)
	temp	bad_ring_arg	

error_big_ring:
	tsx2	make_error_arglist	" PUSHES
	short_call	level_error$ring_bigger_than_7
	return

error_small_ring:
	eaa	0,x0
	arl	18		" move arg back to A
	tsx2	make_error_arglist	" PUSHES
	short_call	level_error$ring_too_small
	return

error_r0_big_ring:
	tsx2	make_error_arglist	" PUSHES
	short_call	level_error$r0_invalid_ring
	return


make_error_arglist:		"Called with tsx2
	push
	sta	bad_ring_arg
	ldaq	one_arg_arglist
	staq	arg_list_error
	epp1	bad_ring_arg
	spri1	arg_list_error+2
	eppap	arg_list_error	set AP appropriately
	tra	0,x2	

	even
null_arglist:
	vfd	18/0,18/4			External call
	vfd	18/0,18/0
one_arg_arglist:
	vfd	17/1,1/0,18/4		One arg, Ext call
	vfd	18/0,18/0

" This table is indexed by requested ring number. Each slot contains the
" smallest legal setting from that level.

ring_table:
	dec	0
	dec	1
	dec	2
	dec	3
	dec	4
	dec	5
	dec	6
	dec	7

" 
"	This is both an FGATE and a normal entry

get:	lda	pds$validation_level	return the current value
	sta	ap|2,*			..
	short_return

	end
