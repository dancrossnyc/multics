/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-05-13,GJohnson), approve(86-05-13,MCR7387),
     audit(86-05-13,Martinson), install(86-05-14,MR12.0-1056):
     Correct error message documentation.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,linecom,indcomtxt,^inddcls,^indnoniterdo */

access_audit_log_fault_:
log_fault:
     procedure (a_mc_ptr);

/* format: off */
/******
     Revisions:
     1985-04-08 KP Loepere - use fs_modes at all times for effective modes.
     1985-03-04 EJ Sharpe - remove national chars, select proper sorting class for messages
     1985-01-22 EJ Sharpe - changes per code audit, reformat
     1985-01-13 EJ Sharpe - added message documentation, fixed some msgs
     1985-01-11 EJ Sharpe - fixed dir unlocking oversight
     1985-01-07 EJ Sharpe - extracted from access_audit_
******/


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* ACCESS_AUDIT_LOG_FAULT_							*/
	/*									*/
	/* This module performs auditing on behalf of fim.  fim performs inspection of the	*/
	/* audit flags.  If faults are being audited, this routine is called to log the event.	*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* format: on */


/*	PARAMETERS	*/

dcl     a_mc_ptr		 parameter pointer;		/* pointer to machine conditions */


/*	CONSTANTS		*/

dcl     True		 bit (1) aligned int static options (constant) init ("1"b);
dcl     False		 bit (1) aligned int static options (constant) init ("0"b);
dcl     PROC_SEG		 fixed bin int static options (constant) init (1);
dcl     DATA_SEG		 fixed bin int static options (constant) init (2);


/*	AUTOMATIC		*/

dcl     code		 fixed bin (35);		/* err code returned from entries we call */
dcl     entry_ptr		 pointer;			/* pointer to object dir entry */
dcl     1 event_flags	 aligned like audit_event_flags;
						/* for log data */
dcl     final_cpu		 fixed bin (71);		/* for metering */
dcl     final_pagefaults	 fixed bin;		/* for metering */
dcl     have_entry_sw	 bit (1) aligned;		/* indicates we have a ptr to a dir entry */
dcl     i			 fixed bin;		/* index */
dcl     initial_cpu		 fixed bin (71);		/* for metering */
dcl     initial_pagefaults	 fixed bin;		/* for metering */
dcl     1 local_audit_header	 aligned like audit_record_header;
						/* binary data header format */
dcl     1 local_ssobj_info	 aligned like audit_ssobj_info;
						/* extended binary data format */
dcl     locked_dir		 bit (1) aligned;		/* flag indicating that we've locked the directory */
dcl     object_info_valid_sw	 bit (1) aligned;		/* indicates that ssobj can be put in log */
dcl     oper_code		 bit (36) aligned;		/* encoded operation */
dcl     msg_text_buff	 char (512) aligned;	/* ioa_$rsnpnnl assembles the text message here */
						/* 512 chars is all syserr will use... */
dcl     msg_text_len	 fixed bin (21);		/* length of text */
dcl     msg_text_ptr	 pointer;			/* ptr to msg_text_buff */


/*	BASED		*/

dcl     msg_text		 char (msg_text_len) based (msg_text_ptr);
						/* the part of msg_text_buff that ioa_$rsnpnnl set up */


/*	MISCELLANEOUS	*/

dcl     addr		 builtin;
dcl     baseptr		 builtin;
dcl     fixed		 builtin;
dcl     index		 builtin;
dcl     length		 builtin;
dcl     min		 builtin;
dcl     null		 builtin;
dcl     pointer		 builtin;
dcl     rtrim		 builtin;
dcl     segno		 builtin;
dcl     size		 builtin;
dcl     string		 builtin;
dcl     substr		 builtin;
dcl     unspec		 builtin;


/*	EXTERNAL		*/

dcl     access_operations_$fault_ipr
			 bit (36) aligned external;
dcl     access_operations_$fault_acv_mode
			 bit (36) aligned external;
dcl     access_operations_$fault_acv_ring
			 bit (36) aligned external;
dcl     active_all_rings_data$hcscnt
			 fixed bin external;

/* Note - The next four externals hold the access audit metering data. */
/*	active_hardcore_data$access_audit_num_meters" is set to the dimension. */
/*        This value is (n_audit_objects*2*n_audit_access_types) + n_audit_events + 1. */
dcl     active_hardcore_data$access_audit_num_meters
			 fixed bin external;
dcl     active_hardcore_data$access_audit_count
			 (1) fixed bin (35) external;
dcl     active_hardcore_data$access_audit_check_count
			 (1) fixed bin (35) external;
dcl     active_hardcore_data$access_audit_cpu_time
			 (1) fixed bin (71) external;
dcl     active_hardcore_data$access_audit_pagefaults
			 (1) fixed bin (35) external;

dcl     dseg$		 external;
dcl     error_table_$invalidsegno
			 fixed bin (35) external;
dcl     error_table_$mylock	 fixed bin (35) external;
dcl     error_table_$noentry	 fixed bin (35) external;
dcl     error_table_$root	 fixed bin (35) external;
dcl     pds$access_authorization
			 bit (72) aligned external;
dcl     pds$block_lock_count	 fixed bin external;
dcl     pds$max_access_authorization
			 bit (72) aligned external;
dcl     pds$process_group_id	 char (32) aligned external;
dcl     pds$process_id	 bit (36) aligned external;
dcl     slt$		 external;
dcl     sys_info$access_class_floor
			 bit (72) aligned external;


/*	ENTRIES		*/

dcl     access_mode$raw	 entry (pointer, bit (36) aligned, bit (36) aligned, fixed bin (35));
dcl     display_access_class_	 entry (bit (72) aligned) returns (char (32) aligned);
dcl     convert_access_operation_
			 entry (bit (36) aligned) returns (char (50));
dcl     convert_status_code_	 entry (fixed bin (35), char (8) aligned, char (100) aligned);
dcl     get_pathname_	 entry (fixed bin (17), char (*) varying, fixed bin (35));
dcl     fs_modes$locked	 entry (pointer, bit (36) aligned, bit (36) aligned,
			 dim (3) fixed bin (3), fixed bin (35));
dcl     fs_get$ref_name	 entry (pointer, fixed bin, char (*), fixed bin (35));
dcl     ioa_$rsnpnnl	 entry options (variable);
dcl     level$get		 entry () returns (fixed bin);
dcl     lock$dir_unlock	 entry (pointer);
dcl     sum$getbranch_root_my	 entry (pointer, bit (36) aligned, pointer, fixed bin (35));
dcl     syserr		 entry options (variable);
dcl     syserr$binary	 entry options (variable);
dcl     syserr$multiple_binary entry options (variable);
dcl     usage_values	 entry (fixed bin, fixed bin (71));
dcl     uid_path_util$get	 entry (ptr, dim (0:15) bit (36) aligned, fixed bin (35));
%page;


/* MAIN CODE */

	call usage_values (initial_pagefaults, initial_cpu);

/* setup */
	object_info_valid_sw = False;
	msg_text_len = length (msg_text_buff);
	msg_text_ptr = addr (msg_text_buff);
	unspec (event_flags) = "0"b;
	unspec (oper_code) = "0"b;
	mcp = a_mc_ptr;				/* copy arg */
	locked_dir = False;

	call interpret_machine_conditions;

	call build_object_info;

	if locked_dir
	then do;					/* we're done with it */
	     call lock$dir_unlock (pointer (entry_ptr, 0));
	     locked_dir = False;
	end;

	call form_audit_record_header;

	call write_log_message;

/* finish meter */
	i = n_audit_objects * 2 * n_audit_access_types + FAULTS_AUDIT_FLAG_INDEX;
						/* see access_audit_ for other indexes */
	if i >= active_hardcore_data$access_audit_num_meters
	then do;
	     call syserr (SYSERR_LOG_OR_PRINT, MSG_Meter_Index, pds$process_group_id);
dcl     MSG_Meter_Index	 char (68) int static options (constant)
			 init ("access_audit_log_fault_: (^a) Encountered illegal meter index value.");
	     i = active_hardcore_data$access_audit_num_meters;
	end;

	call usage_values (final_pagefaults, final_cpu);
	active_hardcore_data$access_audit_count (i) = active_hardcore_data$access_audit_count (i) + 1;
	active_hardcore_data$access_audit_cpu_time (i) =
	     active_hardcore_data$access_audit_cpu_time (i) + (final_cpu - initial_cpu);
	active_hardcore_data$access_audit_pagefaults (i) =
	     active_hardcore_data$access_audit_pagefaults (i) + (final_pagefaults - initial_pagefaults);

	return;


LOG_FAULT_EXIT:					/* error exit */
	if locked_dir
	then do;
	     call lock$dir_unlock (pointer (entry_ptr, 0));
	     locked_dir = False;
	end;

	return;
%page;
/* format: off */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* INTERPRET_MACHINE_CONDITIONS - Internal Procedure.				*/
	/*									*/
	/* This procedure is called only be the $log_fault entry to extract the needed		*/
	/* information out of the machine conditions structure.				*/
	/*									*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* format: on */

interpret_machine_conditions:
     procedure;

dcl     proc_seg_no		 fixed bin;
dcl     proc_seg_offset	 fixed bin (18);
dcl     proc_seg_path	 char (528) var;
dcl     proc_seg_class	 char (32);
dcl     proc_is_slt_seg	 bit (1) aligned;
dcl     proc_path_ok	 bit (1) aligned;
dcl     data_seg_no		 fixed bin;
dcl     data_seg_offset	 fixed bin (18);
dcl     data_seg_path	 char (528) var;
dcl     data_seg_class	 char (32);
dcl     data_is_slt_seg	 bit (1) aligned;
dcl     data_path_ok	 bit (1) aligned;
dcl     fault_desc		 char (80) var;
dcl     n_locks		 fixed bin;
dcl     access_auth		 char (32);
dcl     ring		 fixed bin;
dcl     mode_str		 bit (36) aligned;
dcl     ex_mode_str		 bit (36) aligned;
dcl     mode_chars		 char (4);
dcl     ring_brackets	 (3) fixed bin (3);

dcl     ACV_Fault_Names	 (0:17) char (24) int static options (constant)
			 init (
			 "no fault - bad call",
			 "illegal ring order",
			 "not in execute bracket",
			 "no execute permit",
			 "not in read bracket",
			 "no read permit",
			 "not in write bracket",
			 "no write permit",
			 "not a gate",
			 "not in call bracket",
			 "outward call",
			 "bad outward call",
			 "inward return",
			 "cross-ring transfer",
			 "ring alarm",
			 "assoc. memory fault",
			 "out of segment bounds",
			 "bad acv type - bad call");

dcl     ACV_Mode_Mask	 bit (20) aligned init ("0010101"b) static options (constant);

dcl     ACV_Fault_Ctl_Str	 char (200) int static options (constant) init (
			 "Audit (fim): ^a by ^a (^a) Level=^d at^[ SLT seg^] ^o|^o ^[^a|^o ^;^s^s^](^a) referencing^[ SLT seg^] ^o|^o ^[^a|^o ^;^s^s^](^a) Mode=^a Rings=^d,^d,^d  Inst= ^w; ^w^[ (with ^d lock^[s^] set)^;^s^s^]."
			 );

dcl     IPR_Fault_Names	 (0:8) char (24) int static options (constant)
			 init (
			 "no fault - bad call",
			 "inv fault (never happen)",	/* illegal segno */
			 "illegal op code",
			 "illegal addr/modifier",
			 "illegal slave proc",
			 "illegal procedure",
			 "non-existant addr",
			 "out of bar bounds",
			 "bad ipr type - bad call");

dcl     IPR_Priv_Mask	 bit (36) aligned init ("1001101"b) static options (constant);

dcl     IPR_Fault_Ctl_Str	 char (177) int static options (constant) init (
			 "Audit (fim): ^a by ^a (^a) Level=^d at^[ SLT seg^] ^o|^o ^[^a|^o ^;^s^s^](^a) referencing^[ SLT seg^] ^o|^o ^[^a|^o ^;^s^s^](^a) Inst= ^w; ^w^[  (with ^d lock^[s^] set)^;^s^s^]."
			 );



/* dispatch on type of fault */

	scup = addr (mc.scu);
	if fixed (scu.fi_num) = FAULT_NO_IPR
	then goto interpret_ipr_conditions;
	else if fixed (scu.fi_num) = FAULT_NO_ACV
	then goto interpret_acv_conditions;
	else do;
	     call syserr$binary (SYSERR_LOG_OR_PRINT, mcp, SB_hw_fault, SBL_hw_fault, MSG_Bad_MC, pds$process_group_id);
dcl     MSG_Bad_MC		 char (65) int static options (constant)
			 init ("access_audit_log_fault_: (^a) Called with bad machine conditions.");
	     goto LOG_FAULT_EXIT;			/* return to fault handler */
	end;
%page;
/* format: off */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* INTERPRET_IPR_CONDITIONS - Label.						*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* format: on */

interpret_ipr_conditions:

	if string (scux.fd) & IPR_Priv_Mask
	then event_flags.priv_op = True;

	unspec (oper_code) = access_operations_$fault_ipr;

/* scup is already set by caller */

	fault_desc = rtrim (convert_access_operation_ (unspec (oper_code))) || " - ";
	fault_desc = fault_desc || IPR_Fault_Names (min (index (string (scux.fd), "1"b), 8));

	proc_seg_no = fixed (scu.ppr.psr, 15);
	proc_seg_offset = fixed (scu.ilc, 18);
	data_seg_no = fixed (scu.tpr.tsr, 15);
	data_seg_offset = fixed (scu.ca, 18);

	n_locks = pds$block_lock_count;

	call get_entry_ptr (baseptr (data_seg_no), locked_dir, entry_ptr, have_entry_sw);

	call get_known_seg_name_and_class
	     (PROC_SEG, proc_seg_no, proc_seg_path, proc_seg_class, proc_is_slt_seg, proc_path_ok);

/* DBG	if acu.pps.prr = "000"b		/* hardcore procedure ? */
/* DBG */
/* DBG	  &  n_locks ^= 0			/* and some locks set ? */
/* DBG */
/* DBG	then do;							/*DBG */
/* DBG	     /* don't fiddle about with data seg ! */
/* DBG */
/* DBG	     data_path_ok = False;					/*DBG */
/* DBG	     data_seg_path = "";					/*DBG */
/* DBG	     data_seg_class = "class undetermined";			/*DBG */
/* DBG	     data_is_slt_seg = False;					/*DBG */
/* DBG	end;							/*DBG */
/* DBG	else							/*DBG */
	call get_known_seg_name_and_class
	     (DATA_SEG, data_seg_no, data_seg_path, data_seg_class, data_is_slt_seg, data_path_ok);

	access_auth = display_access_class_ (pds$access_authorization);
	ring = level$get ();

	call ioa_$rsnpnnl (IPR_Fault_Ctl_Str, msg_text_buff, msg_text_len,
	     fault_desc, pds$process_group_id, access_auth, ring,
	     proc_is_slt_seg, proc_seg_no, proc_seg_offset,
	     proc_path_ok, proc_seg_path, proc_seg_offset, proc_seg_class,
	     data_is_slt_seg, data_seg_no, data_seg_offset,
	     data_path_ok, data_seg_path, data_seg_offset, data_seg_class,
	     scu.even_inst, scu.odd_inst,
	     (n_locks ^= 0), n_locks, (n_locks > 1));

	return;

/* END of code "interpret_ipr_conditions" */
%page;
/* format: off */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* INTERPRET_ACV_CONDITIONS - Label.						*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* format: on */

interpret_acv_conditions:

	if string (scu.fd) & ACV_Mode_Mask
	then unspec (oper_code) = access_operations_$fault_acv_mode;
	else unspec (oper_code) = access_operations_$fault_acv_ring;

/* scup is already set by caller */

	fault_desc = rtrim (convert_access_operation_ (unspec (oper_code))) || " - ";
	fault_desc = fault_desc || ACV_Fault_Names (min (index (string (scu.fd), "1"b), 17));

	proc_seg_no = fixed (scu.ppr.psr, 15);
	proc_seg_offset = fixed (scu.ilc, 18);
	data_seg_no = fixed (scu.tpr.tsr, 15);
	data_seg_offset = fixed (scu.ca, 18);

	n_locks = pds$block_lock_count;

	call get_entry_ptr (baseptr (data_seg_no), locked_dir, entry_ptr, have_entry_sw);

/* check if this is legit fault, user may have copy-on-write
   or have voluntarily set write off */
	if (scu.fd.owb | scu.fd.w_off)
	then if have_entry_sw & entry_ptr ^= null
	     then if entry_ptr -> entry.copysw
		then do;
		     goto LOG_FAULT_EXIT;		/* no need to log this one */
		end;
		else do;
		     call fs_modes$locked (baseptr (data_seg_no), mode_str, ex_mode_str, ring_brackets, code);
		     if code = 0
		     then if (mode_str & W_ACCESS) = W_ACCESS
			then goto LOG_FAULT_EXIT;	/* no need to log this one, user has W access */
		end;

/* drop thru here if we're really going to audit this fault */

	call get_known_seg_name_and_class
	     (PROC_SEG, proc_seg_no, proc_seg_path, proc_seg_class, proc_is_slt_seg, proc_path_ok);

/* DBG	if scu.ppr.prr = "000"b		/* if ring 0 procedure */
/* DBG */
/* DBG	  & n_locks ^= 0			/* and something is locked */
/* DBG */
/* DBG	then do;							/*DBG */
/* DBG	     /* don't try to fiddle about with the data seg path */
/* DBG */
/* DBG	     data_path_ok = False;					/*DBG */
/* DBG	     data_seg_path = "";					/*DBG */
/* DBG	     data_seg_class = "class undetermined";			/*DBG */
/* DBG	     data_is_slt_seg = False;					/*DBG */
/* DBG	end;							/*DBG */
/* DBG	else							/*DBG */
	call get_known_seg_name_and_class
	     (DATA_SEG, data_seg_no, data_seg_path, data_seg_class, data_is_slt_seg, data_path_ok);

/* get access mode and ring brackets of referenced segment */

	mode_chars = "null";
	if data_is_slt_seg
	then do;
	     sdwp = addr (addr (dseg$) -> sdwa (data_seg_no));

	     mode_str = substr (string (sdw.access), 1, 3);
	     ring_brackets (1) = fixed (sdw.r1, 3);
	     ring_brackets (2) = fixed (sdw.r2, 3);
	     ring_brackets (3) = fixed (sdw.r3, 3);
	end;
	else do;
	     call fs_modes$locked (baseptr (data_seg_no), mode_str, ex_mode_str, ring_brackets, code);
	     if code ^= 0
	     then do;
		call syserr (SYSERR_LOG_OR_PRINT, MSG_Access_Mode, pds$process_group_id, data_seg_no,
		     error_text (code));
dcl     MSG_Access_Mode	 char (86) int static options (constant)
			 init (
			 "access_audit_log_fault_: (^a) Unable to get access mode for dat seg #^o due to ""^a"".");
		ring_brackets = 7;
		mode_str = "000"b;
		mode_chars = "???";
	     end;
	end;

	if mode_str ^= "0"b
	then do;
	     mode_chars = "";
	     if (mode_str & R_ACCESS) = R_ACCESS
	     then mode_chars = "r";
	     if (mode_str & E_ACCESS) = E_ACCESS
	     then mode_chars = rtrim (mode_chars) || "e";
	     if (mode_str & W_ACCESS) = W_ACCESS
	     then mode_chars = rtrim (mode_chars) || "w";
	end;

	access_auth = display_access_class_ (pds$access_authorization);
	ring = level$get ();

	call ioa_$rsnpnnl (ACV_Fault_Ctl_Str, msg_text_buff, msg_text_len,
	     fault_desc, pds$process_group_id, access_auth, ring,
	     proc_is_slt_seg, proc_seg_no, proc_seg_offset,
	     proc_path_ok, proc_seg_path, proc_seg_offset, proc_seg_class,
	     data_is_slt_seg, data_seg_no, data_seg_offset,
	     data_path_ok, data_seg_path, data_seg_offset, data_seg_class,
	     mode_chars, ring_brackets,
	     scu.even_inst, scu.odd_inst,
	     (n_locks ^= 0), n_locks, (n_locks > 1));

	return;

/* END of code "interpret_acv_conditions" */

     end interpret_machine_conditions;
%page;
/* format: off */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/*  GET_ENTRY_PTR - Internal procedure.						*/
	/*									*/
	/* Procedure to obtain an entry pointer corresponding to the current value of the object	*/
	/* pointer.								*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* format: on */

get_entry_ptr:
     procedure (a_obj_ptr, a_locked_dir, a_entry_ptr, a_have_entry);

dcl     a_obj_ptr		 parameter pointer;		/* object for which caller wants entry ptr */
dcl     a_locked_dir	 parameter bit (1) aligned;	/* tell caller if we locked the dir ourselves */
dcl     a_entry_ptr		 parameter pointer;		/* caller's desire */
dcl     a_have_entry	 parameter bit (1) aligned;	/* tell caller whether entry_ptr is valid */


	a_locked_dir = False;
	a_have_entry = False;
	a_entry_ptr = null;

	if segno (a_obj_ptr) <= active_all_rings_data$hcscnt
	then do;
	     a_have_entry = False;
	     return;
	end;

	call sum$getbranch_root_my (pointer (a_obj_ptr, 0), "0"b, a_entry_ptr, code);
	if code = error_table_$mylock
	then code = 0;
	else if code = error_table_$root
	then code = 0;
	else if code = error_table_$noentry | code = error_table_$invalidsegno
	then ;					/* let these by... */
	else if code ^= 0
	then do;
	     call syserr (SYSERR_LOG_OR_PRINT, MSG_Get_Entry, pds$process_group_id, segno (a_obj_ptr),
		error_text (code));
dcl     MSG_Get_Entry	 char (84) int static options (constant)
			 init (
			 "access_audit_log_fault_: (^a) Unable to get entry pointer for seg #^o due to ""^a"".");
	     goto LOG_FAULT_EXIT;
	end;
	else a_locked_dir = True;			/* we locked it, remember to unlock it later */

	a_have_entry = (code = 0);

	return;

     end get_entry_ptr;
%page;
/* format: off */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* GET_KNOWN_SEG_NAME_AND_CLASS - Internal Procedure.				*/
	/*									*/
	/* It attempts to obtain the pathname of the referenced segment.			*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* format: on */

get_known_seg_name_and_class:
     procedure (type, seg_no, seg_path, seg_class, slt_sw, path_ok_sw);

dcl     type		 parameter fixed bin;
dcl     seg_no		 parameter fixed bin;
dcl     seg_path		 parameter char (528) var;
dcl     seg_class		 parameter char (32);
dcl     slt_sw		 parameter bit (1) aligned;
dcl     path_ok_sw		 parameter bit (1) aligned;

dcl     ref_name		 char (32);
dcl     code1		 fixed bin (35);
dcl     l_locked_dir	 bit (1) aligned;
dcl     l_entry_ptr		 pointer;
dcl     l_have_entry	 bit (1) aligned;

	slt_sw = False;
	path_ok_sw = False;

	if seg_no < active_all_rings_data$hcscnt
	then do;					/* it's in SLT */
	     slt_sw = True;

	     sltp = addr (slt$);
	     sltep = addr (slt.seg (seg_no));
	     namep = pointer (slt.name_seg_ptr, slte.names_ptr);
	     seg_path = namep -> segnam.names (1).name;
	     seg_class = "hardcore segment";
	     path_ok_sw = True;
	end;

	else do;
	     slt_sw = False;

	     call get_pathname_ (seg_no, seg_path, code);

	     if code = 0
	     then do;
		path_ok_sw = True;

		if type = DATA_SEG			/* we already have an entry pointer? */
		then seg_class = display_access_class_ (entry_ptr -> entry.access_class);
		else do;
		     call get_entry_ptr (baseptr (seg_no), l_locked_dir, l_entry_ptr, l_have_entry);
		     if l_have_entry
		     then if l_entry_ptr = null	/* root? */
			then seg_class = display_access_class_ (sys_info$access_class_floor);
			else seg_class = display_access_class_ (l_entry_ptr -> entry.access_class);
		     else seg_class = "unable to get entry";
		     if l_locked_dir		/* unlock immediately */
		     then call lock$dir_unlock (pointer (l_entry_ptr, 0));
		end;
	     end;
	     else if code = error_table_$invalidsegno
	     then do;
		seg_path = "";
		seg_class = "invalid seg #";
		path_ok_sw = False;
	     end;
	     else if code = error_table_$noentry
	     then do;
		call fs_get$ref_name (baseptr (seg_no), 1 /* most recent */, ref_name, code1);
		if code1 ^= 0
		then goto get_known_seg_err;
		seg_path = ref_name;
		if seg_path = ""
		then do;
		     seg_class = "deleted seg - null ref name";
		     path_ok_sw = False;
		end;
		else do;
		     seg_class = "deleted seg";
		     path_ok_sw = True;
		end;
	     end;
	     else do;				/* oops! */
get_known_seg_err:
		call syserr (SYSERR_LOG_OR_PRINT, MSG_Get_Path, pds$process_group_id, seg_no, error_text (code));
dcl     MSG_Get_Path	 char (74) int static options (constant)
			 init ("access_audit_log_fault_: (^a) Unable to get path of seg #^o due to ""^a"".");
		seg_path = "";
		seg_class = "unable to determine path";
		path_ok_sw = False;
	     end;
	end;

	return;

     end get_known_seg_name_and_class;
%page;
/* format: off */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* BUILD_OBJECT_INFO - Internal Procedure.					*/
	/*									*/
	/* This routine to sets up the binary info structure with pertinent information about the */
	/* DATA segment/directory.							*/
	/*									*/
	/* This routine is somewhat duplicated in access_audit_.				*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* format: on */

build_object_info:
     procedure;

	if have_entry_sw
	then if entry_ptr ^= null ()
	     then do;
		if ^entry_ptr -> entry.bs
		then do;
die:
		     call syserr (SYSERR_CRASH_SYSTEM, MSG_Expected_Branch, entry_ptr);
dcl     MSG_Expected_Branch	 char (66) int static options (constant)
			 init ("access_audit_log_fault_: Link entry where branch expected (ep=^p).");
		     goto die;
		end;

		audit_ssobj_info_ptr = addr (local_ssobj_info);

/* build ssobj info structure for a seg or dir */
		unspec (audit_ssobj_info) = ""b;
		audit_ssobj_info.info_type = AAB_ss_object;
		call uid_path_util$get (pointer (entry_ptr, 0), audit_ssobj_info.parent_uid_path, code);
		if code ^= 0
		then do;
		     call syserr (SYSERR_LOG_OR_PRINT, MSG_Dir_UID, pds$process_group_id, segno (entry_ptr));
dcl     MSG_Dir_UID		 char (75) int static options (constant)
			 init ("access_audit_log_fault_: (^a) Unable to get UID path for directory seg #^o.");
		     audit_ssobj_info.parent_uid_path = "0"b;
						/* all invalid */
		end;
		audit_ssobj_info.entry_uid = entry_ptr -> entry.uid;
		audit_ssobj_info.dtem = entry_ptr -> entry.dtem;
		audit_ssobj_info.access_class = entry_ptr -> entry.access_class;
		call access_mode$raw (entry_ptr, audit_ssobj_info.raw_mode, audit_ssobj_info.ex_mode, code);
		if code ^= 0
		then do;
		     call syserr (SYSERR_LOG_OR_PRINT, MSG_Raw_Access, pds$process_group_id, entry_ptr);
dcl     MSG_Raw_Access	 char (74) int static options (constant)
			 init ("access_audit_log_fault_: (^a) Unable to get raw access modes for entry ^p.");
		     audit_ssobj_info.raw_mode = "0"b;
		     audit_ssobj_info.ex_mode = "0"b;
		end;
		audit_ssobj_info.ring_brackets = entry_ptr -> entry.ring_brackets;
		audit_ssobj_info.ex_ring_brackets = entry_ptr -> entry.ex_ring_brackets;
		audit_ssobj_info.dirsw = entry_ptr -> entry.dirsw;
		audit_ssobj_info.per_process_sw = entry_ptr -> entry.per_process_sw;
		audit_ssobj_info.safety_sw = entry_ptr -> entry.safety_sw;
		audit_ssobj_info.multiple_class = entry_ptr -> entry.multiple_class;
		audit_ssobj_info.audit_flag = entry_ptr -> entry.audit_flag;
		audit_ssobj_info.security_oosw = entry_ptr -> entry.security_oosw;
		audit_ssobj_info.entrypt_sw = entry_ptr -> entry.entrypt_sw;
		audit_ssobj_info.master_dir = entry_ptr -> entry.master_dir;
		audit_ssobj_info.access_class = entry_ptr -> entry.access_class;

		object_info_valid_sw = True;
	     end;

	return;

     end build_object_info;
%page;
/* format: off */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* FORM_AUDIT_RECORD_HEADER - Internal Procedure.					*/
	/*									*/
	/* This routine assembles the standard record header for the audit message.		*/
	/*									*/
	/* This routine is somewhat duplicated in access_audit_.				*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* format: on */

form_audit_record_header:
     procedure;

	audit_record_ptr = addr (local_audit_header);

	audit_record_header.type = ARH_TYPE_NO_PROXY;

	audit_record_header.version = ACCESS_AUDIT_HEADER_VERSION_3;

	audit_record_header.subject_is_process = True;
	call parse_group_id (pds$process_group_id,
	     audit_record_header.person, audit_record_header.project, audit_record_header.tag);
	audit_record_header.ring = level$get ();
	audit_record_header.anonymous = (substr (pds$process_group_id, 1, 9) = "anonymous");
	audit_record_header.process_id = pds$process_id;
	audit_record_header.authorization = pds$access_authorization;
	audit_record_header.authorization_range (1) = sys_info$access_class_floor;
						/* don't know this in hardcore */
	audit_record_header.authorization_range (2) = pds$max_access_authorization;

	audit_record_header.object_is_valid = object_info_valid_sw;
	audit_record_header.operation_code = unspec (oper_code);
	audit_record_header.event_flags = unspec (event_flags);

	return;

parse_group_id:					/* procedure internal to form_audit_record_header */
     procedure (group_id, person, project, tag);

dcl     group_id		 parameter char (32) aligned;
dcl     person		 parameter char (22);
dcl     project		 parameter char (9);
dcl     tag		 parameter char (1);
dcl     l_group_id		 char (32);

	l_group_id = group_id;
	person, project, tag = "";

	i = index (l_group_id, ".");
	if i = 0
	then do;
	     person = l_group_id;
	     return;
	end;
	else if i > 1
	then person = substr (l_group_id, 1, i - 1);

	l_group_id = substr (l_group_id, i + 1);

	i = index (l_group_id, ".");
	if i = 0
	then do;
	     project = l_group_id;
	     return;
	end;
	else if i > 1
	then project = substr (l_group_id, 1, i - 1);

	tag = substr (l_group_id, i + 1);

	return;

     end parse_group_id;

     end form_audit_record_header;
%page;
/* format: off */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* WRITE_LOG_MESSAGE - Internal Procedure.					*/
	/*									*/
	/* This procedure interfaces with the logging software to add an audit message to the	*/
	/* logs.									*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* format: on */

write_log_message:
     procedure;

dcl     1 bin_info_array	 (2) aligned,		/* argument for syserr$multiple_binary */
	2 p		 pointer,
	2 len		 fixed bin;
dcl     n_pieces		 fixed bin;
dcl     syserr_code		 fixed bin;

	p (1) = addr (audit_record_header);
	len (1) = size (audit_record_header);

	if object_info_valid_sw
	then do;
	     p (2) = addr (audit_ssobj_info);
	     len (2) = size (audit_ssobj_info);
	     n_pieces = 2;
	end;
	else do;
	     p (2) = null ();
	     len (2) = 0;
	     n_pieces = 1;
	end;

	syserr_code = SYSERR_LOG_OR_PRINT + SYSERR_UNSUCCESSFUL_ACCESS;
	call syserr$multiple_binary (syserr_code, addr (bin_info_array), n_pieces, SB_access_audit, msg_text);

	return;

     end write_log_message;
%page;
/* format: off */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* ERROR_TEXT - Internal Procedure.						*/
	/*									*/
	/* Procedure to return the short error message mnemonic associated with an error_table_	*/
	/* entry.									*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* format: on */

error_text:
     procedure (ec) returns (char (100) aligned);

dcl     ec		 parameter fixed bin (35);

dcl     char8		 char (8) aligned;
dcl     char100		 char (100) aligned;

	call convert_status_code_ (ec, char8, char100);

	return (char100);

     end error_text;

/* format: off */
%page; %include access_audit_flags;
%page; %include access_audit_eventflags;
%page; %include access_audit_bin_header;
%page; %include access_audit_binary_def;
%page; %include access_audit_ssobj_info;
%page; %include mc;
%page; %include fault_vector;
%page; %include slt;
%page; %include slte;
%page; %include sdw;
%page; %include dir_header;
%page; %include dir_entry;
%page; %include dir_name;
%page; %include syserr_constants;
%page; %include syserr_binary_def;
%page; %include access_mode_values;
%page;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   access_audit_log_fault_: (USER_ID) Encountered illegal meter index value.

   S:	$info

   T:	$run

   M:	$err
   The access audit meters in active_hardcore_data are inconsistant
   with the format of the process access flags.

   A:	$notify


   Message:
   access_audit_log_fault_: (USER_ID) Called with bad machine conditions.

   S:	$info

   T:	$run

   M:	$err
   access_audit_log_fault_ was given machine conditions for a fault
   which was neither an illegal_procedure or an access_violation.

   A:	$notify


   Message:
   access_audit_log_fault_: (USER_ID) Unable to get access mode for data seg #N due to "MESSAGE".

   S:	$info

   T:	$run

   M:	$err
   A call to fs_modes failed unexpectedly.  The AUDIT message text
   will show the modes as "???" and ring brackets of 7,7,7.  The
   message binary will reflect null access mode and ring bracket
   of 7,7,7.

   A:	$notify


   Message:
   access_audit_log_fault_: (USER_ID) Unable to get entry pointer for seg #N due to "MESSAGE".

   S:	$info

   T:	$run

   M:	$err
   A call to sum$getbranch_root_my returned an unexpected error code.

   A:	$notify


   Message:
   access_audit_log_fault_: (USER_ID Unable to get path of seg #N due to "MESSAGE".

   S:	$info

   T:	$run

   M:	$err
   A call to get_pathname_ returned an unexpected error code.

   A:	$notify


   Message:
   access_audit_log_fault_: Link entry where branch expected (ep=PTR).

   S:	$crash

   T:	$run

   M:	$err
   After getting a directory entry for a specific segno the branch
   switch in the entry was found to be off.

   A:	$recover


   Message:
   access_audit_log_fault_: (USER_ID) Unable to get UID path for directory seg #N due to "MESSAGE".

   S:	$info

   T:	$run

   M:	$err
   Although  the directory is locked, a failure occurred in
   uid_path_util$get.

   A:	$notify


   Message:
   access_audit_log_fault_: (USER_ID) Unable to get raw access modes for entry PTR due to "MESSAGE".

   S:	$info

   T:	$run

   M:	$err
   Although the directory is locked a failure occurred in
   access_mode$raw.

   A:	$notify

   
   END MESSAGE DOCUMENTATION */


end access_audit_log_fault_;
