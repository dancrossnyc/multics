/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


deact_proc: proc;

/* Changed by E Stone to remove destroy entry and to convert to v2 on 05/74 */
/* Modified 05/78 by J. A. Bush to add cleanup for processor testing */
/* Modified September 1981 by J. Bongiovanni for tc_util */

dcl  code fixed bin (35);

dcl  save_ring fixed bin (3),				/* validation level */
    (sstp, pds_astep) ptr,
     name char (32) aligned;

dcl  delentry$dfile entry (char (*) aligned, char (*) aligned, fixed bin (35)),
     del_dir_tree entry (char (*) aligned, char (*) aligned, fixed bin (35)),
     unique_chars_ entry (bit (*) aligned) returns (char (15) aligned),
     level$get entry returns (fixed bin (3)),
     level$set entry (fixed bin (3)),
     pxss$stop_wakeup entry (bit (36) aligned, fixed bin),
     tc_util$process_status entry (ptr),
     pxss$empty_t ext entry (ptr),
     deactivate_segs ext entry (ptr),
     reconfig$destroy_cpu_test_env entry,
     ioam_$process_release entry (bit (36) aligned);

dcl  error_table_$action_not_performed fixed bin (35) ext,
     sst_seg$ fixed bin ext;

dcl (addr, ptr) builtin;

dcl 1 process_info based (pi_ptr) aligned,		/* structure used to transfer accounting data */
    2 processid bit (36),
    2 page_faults fixed bin (35),
    2 aptep ptr,
    2 ex_state fixed bin,
    2 mp_state fixed bin,
    2 last_block_time fixed bin (71),
    2 cpu_time_used fixed bin (71),
    2 paging_measure fixed bin (71),
    2 virtual_cpu_time fixed bin (71),
    2 reserved fixed bin (71);

dcl 1 info aligned like process_info;





	% include apte;
% include scs;

/*  */

/* The entry destroy_process_begin initiates the destruction of a process by stopping it
   in such a way that when the process stops it will send a wakeup to the process specified
   in apte.term_processid. The wakeup will be over the channel apte.term_channel. When the wakeup
   is received by the driving process (Answering Service?) the entry destroy_process_finish
   is called to return the final process statistics and to clean up the APT entry.
   As a final step destroy_process_finish deletes the process directory of the
   process just destroyed. */

destroy_process_begin: entry (pi_ptr, code);

dcl  pi_ptr ptr;

	info.processid = pi_ptr -> process_info.processid; /* get ID OF PROCESS TO STOP */
	call pxss$stop_wakeup (info.processid, info.ex_state); /* stop it */
	if info.ex_state = 0 then code = error_table_$action_not_performed;
	else code = 0;				/* return non-zero code only if already stopped */
	return;

/* * * * * * * *  * * * * * * * * * * * * * * * */

destroy_process_finish: entry (pi_ptr, code);

	info.processid = pi_ptr -> process_info.processid; /* get the process ID */
	call tc_util$process_status (addr (info));		/* get the goods for the process */
						/* check for stopped process */
	if ^((info.ex_state = 5) & (info.mp_state = 1)) then do;
	     code = error_table_$action_not_performed;	/* return non-zero code only if not stopped */
	     return;
	end;
	sstp = addr (sst_seg$);
	pds_astep = ptr (sstp, info.aptep -> apte.asteps.pds); /* get pointer to pds for the process */
	call deactivate_segs (pds_astep);		/* deactivate the process */
	info.aptep -> apte.lock_id = ""b;		/* clear out the lock id */
	info.aptep -> apte.processid = ""b;		/* and the process id */
	call pxss$empty_t (info.aptep);		/* give back the APT entry */
	call ioam_$process_release (info.processid);	/* free any devices assigned to this process */
	if scs$reconfig_lock = info.processid then	/* is this process testing a processor? */
	     call reconfig$destroy_cpu_test_env;	/* release CPU and SCU resources */
	name = unique_chars_ (info.processid);		/* get the PDIR name */
	save_ring = level$get ();			/* get (save) the validation level */
	call level$set (0);				/* do del_dir_tree from ring 0 */
	call del_dir_tree (">process_dir_dir", name, code);
	if code = 0 then
	     call delentry$dfile (">process_dir_dir", name, code);
	call level$set (save_ring);			/* restore validation level */
	pi_ptr -> process_info = info;		/* copy back accounting information */
	return;

     end deact_proc;
