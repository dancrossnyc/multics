/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style3 */

/* DESCRIPTION:
   Creates an IPS mask given the names of the ips interrupts
   to be masked.
*/

/* HISTORY:
Written by Dan Bricklin, October 1970.
Modified:
06/08/72 by D. M. Wells:  To make it properly respect an invocation with
            lng = 0; that is, no mask is wanted.
07/16/84 by R. Michael Tague:  Make it use the include file ips_mask_data.
*/

create_ips_mask_:
     proc (p, lng, mask);

%include ips_mask_data;

dcl	p		ptr,
	lng		fixed bin (17),
	mask		bit (36) aligned,
	ips_names		(1) char (32) aligned based (p),
	create_ips_mask_err condition,
	(i, j)		fixed bin (17);

	mask = "0"b;				/* Initialize the mask */

	if lng <= 0
	then goto ret;				/* allow for the mask none case		*/

	if p -> ips_names (1) = "-all"
	then do;					/* return a mask of everything */
		do i = 1 to sys_info$ips_mask_data.count;
		     mask = mask | sys_info$ips_mask_data.mask.mask (i);
		end;
		go to ret;
	     end;

	do i = 1 to lng;				/* Look for each signal type in list */

	     do j = 1 to sys_info$ips_mask_data.count;	/* Look through all possible names */
		if p -> ips_names (i) = sys_info$ips_mask_data.mask.name (j)
		then do;
			mask = mask | sys_info$ips_mask_data.mask.mask (j);
			go to next;		/* when found, or in bit */
		     end;
	     end;

	     signal condition (create_ips_mask_err);
	     return;

next:
	end;

ret:
	mask = ^mask;				/* Mask is now an enable mask, so ^ it for
							a disable mask */
	return;

     end;
