/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style3 */

ipc_fast_$block:
     procedure (a_event_wait_list_ptr, a_event_wait_info_ptr, a_code);

/* This procedure is a fast call to block a process and is
   called as ipc_$block. It handles fast ipc channels only
   and calls the full ipc mechanism if channels other than
   fast channels are supplied. */

/* Rewritten for new ipc by E Donner Jan 1981 */
/* Modified September 1983 by Chris Jones to call the full IPC mechanism
      when there are call events pending, not when there are any events
      pending. */
/* Modified 1984-11-02 by E. Swenson for new ipc validation */


/****^  HISTORY COMMENTS:
  1) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
     audit(86-10-20,Fawcett), install(86-11-03,MR12.0-1206):
     Changed to support control point management.  These changes were actually
     done in February 1985 by G. Palter.
                                                   END HISTORY COMMENTS */


/* parameters */

dcl	a_event_wait_list_ptr
			ptr parameter;
dcl	a_event_wait_info_ptr
			ptr parameter;
dcl	a_code		fixed bin (35);

/* automatic */

dcl	call_regular	bit (1) aligned;		/* indicates if full ipc should be called */
dcl	cur_ring		fixed bin (3);		/* current ring */
dcl	1 ev_chn_name	aligned like event_channel_name automatic;
dcl	loop		fixed bin;		/* index */
dcl	validation_level	fixed bin (3);		/* current validation level */

/* constants */

dcl	OFF		bit (1) aligned static options (constant) init ("0"b);
dcl	ON		bit (1) aligned static options (constant) init ("1"b);
dcl	TRUE		bit (1) aligned static options (constant) init ("1"b);

/* external static */

dcl	ipc_data_$event_calls_pending
			fixed bin ext;		/* number of event call wakeups pending */
dcl	ipc_data_$fast_channel_events
			bit (36) aligned ext;	/* fast events pending */
dcl	error_table_$bad_arg
			fixed bin (35) ext;
dcl	error_table_$invalid_channel
			fixed bin (35) ext;

/* external entries */

dcl	cu_$level_get	entry returns (fixed bin (3));
dcl	cu_$level_set	entry (fixed bin (3));
dcl	ipc_real_$full_block
			entry (ptr, ptr, fixed bin (35));
dcl	get_ring_		entry returns (fixed bin (3));
dcl	hcs_$fblock	entry (bit (36) aligned, bit (1) aligned);

/* Conditions */

dcl	cleanup		condition;

/* Builtin */

dcl	length		builtin;
dcl	stackbaseptr	builtin;
dcl	substr		builtin;
dcl	unspec		builtin;
%page;
/* Program */

	event_wait_list_ptr = a_event_wait_list_ptr;
	event_wait_info_ptr = a_event_wait_info_ptr;
	event_wait_list_n_channels = event_wait_list.n_channels;

	if event_wait_list_n_channels <= 0
	then do;
		a_code = error_table_$bad_arg;
		return;
	     end;

	if ipc_data_$event_calls_pending ^= 0		/* we have some call wakeups pending */
	then go to INVOKE_FULL_BLOCK;			/* call full block mechanism */

	cur_ring = get_ring_ ();
	validation_level = cu_$level_get ();		/* get validation level */

	do while (TRUE);

	     if have_multiple_control_points ()		/* more than one cotnrol point can be waiting ... */
	     then go to INVOKE_FULL_BLOCK;		/* ... on one of these channels */

	     do loop = 1 to event_wait_list_n_channels;	/* look for each channel */
		unspec (ev_chn_name) = unspec (event_wait_list.channel_id (loop));
						/* copy channel name into structured format */
		if ev_chn_name.type = REGULAR_CHANNEL_TYPE | ev_chn_name.ring ^= cur_ring
		then go to INVOKE_FULL_BLOCK;		/* if regular event channel or from another ring */

/* do validity check on channel name */
		if ev_chn_name.mbz ^= "0"b | ev_chn_name.unique_id <= 0
		     | ev_chn_name.unique_id > length (ipc_data_$fast_channel_events)
		then do;
			a_code = error_table_$invalid_channel;
			return;
		     end;

/* ascertained that this is fast channel in current ring */
		if substr (ipc_data_$fast_channel_events, ev_chn_name.unique_id, 1) = ON
		then do;				/* wakeup pending */
			substr (ipc_data_$fast_channel_events, ev_chn_name.unique_id, 1) = OFF;
						/* turn off event cell */

			unspec (event_wait_info) = "0"b;
			event_wait_info.channel_id = event_wait_list.channel_id (loop);
						/* return messge - channel name */
			event_wait_info.channel_index = loop;
						/* and index in input list */
			a_code = 0;		/* no error */
			return;
		     end;
	     end;

/* no fast events already processed */

	     on condition (cleanup) call cu_$level_set (validation_level);

	     if validation_level ^= cur_ring		/* set validation level to current ring */
	     then call cu_$level_set (cur_ring);

	     call hcs_$fblock (ipc_data_$fast_channel_events, call_regular);
						/* get events from ring 0 */
	     if validation_level ^= cur_ring		/* reset validation level */
	     then call cu_$level_set (validation_level);

	     revert cleanup;

	     if call_regular			/* wakeups for regular channels must be checked ... */
	     then go to INVOKE_FULL_BLOCK;		/* ... as they could be wakeups for call channels */
	end;


/* Control arrives here iff we must invoke the full blocking mechanism */

INVOKE_FULL_BLOCK:
	call ipc_real_$full_block (event_wait_list_ptr, event_wait_info_ptr, a_code);
	return;
%page;
/* Determines if more than one control point is defined in this process */

have_multiple_control_points:
     procedure () returns (bit (1) aligned);

	if stackbaseptr () -> stack_header.cpm_enabled
	then return (cpm_data_$n_control_points > 1);
	else return ("0"b);

     end have_multiple_control_points;

/* format: off */
%page; %include ect_structures;
%page; %include event_channel_name;
%page; %include event_wait_info;
%page; %include event_wait_list;
%page; %include stack_header;
%page; %include cpm_data_;
/* format: on */

     end ipc_fast_$block;
