/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: off */

/* set_lock_ -- This procedure allows a user to guarantee that two processes
   will not simultaneously execute the same critical section of code.  A user
   provided lock word can be set to the lock identifier of only one process at
   a time thereby guaranteeing, assuming the proper conventions are followed,
   that only this process can be currently executing in the critical section of
   code.

   Originally coded by R. J. Feiertag on November 5, 1971
   Modified on April 6, 1972 by R. J. Feiertag to work in all rings.
   Fixed by THVV 10/75 to work even if alrm is masked
   Modified by M. Pierret 03/80 , adding no_write_permission condition
    handler, stacq and clock builtins, and avoiding clock on waittime=0
    and on 04/24/80 not_in_write_bracket condition. */

/****^  HISTORY COMMENTS:
  1) change(71-11-05,Feiertag), approve(), audit(), install():
     Written by R. J. Feiertag.
  2) change(72-04-06,Feiertag), approve(), audit(), install():
     Modified by R. J. Feiertag to work in all rings.
  3) change(75-10-01,VanVleck), approve(), audit(), install():
     Modified by THVV 10/75 to work even if alrm is masked
  4) change(80-04-24,Pierret), approve(), audit(), install():
     Modified by M. Pierret 03/80, adding no_write_permission condition
      handler, stacq and clock builtins, and avoiding clock on waittime=0
      and on 04/24/80, not_in_write_bracket condition handler
  5) change(85-01-09,Lippard), approve(85-01-30,MCR7159),
     audit(85-11-07,Spitzer), install(86-02-21,MR12.0-1024):
     Modified by Jim Lippard to add no_write_permission condition handler
      to set_lock_$unlock.
  6) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
     audit(86-10-20,Fawcett), install(86-11-03,MR12.0-1206):
     Changed to support control point management.  These changes were actually
     done in April 1985 by G. Palter.  The main change was to always use
     timer_manager_$sleep as that entrypoint was updated in 1979 to work in
     any ring regardless of the state of the alrm IPS signal.  This change had
     to be made as the old code herein did not work with multiple control
     points.
                                                   END HISTORY COMMENTS */

/* format: style3,linecom */

set_lock_:
     procedure ();

	return;					/* not an entrypoint */


/* Parameters */

dcl	lock		bit (36) aligned parameter;	/* lock word */

dcl	wait_time		fixed binary parameter;	/* time in seconds to wait for lock to be unlocked */

dcl	status		fixed binary (35) parameter;


/* Static data -- Initialized once per ring */

dcl	first_invocation	bit (1) aligned static initial ("1"b);

dcl	lock_id		bit (36) aligned static;	/* our process lock ID */


/* Remaining declarations */

dcl	failure_time	fixed binary (71);
dcl	sleep_time	fixed binary (71);
dcl	ttul_code		fixed binary;

dcl	(
	error_table_$invalid_lock_reset,
	error_table_$lock_not_locked,
	error_table_$lock_wait_time_exceeded,
	error_table_$locked_by_other_process,
	error_table_$locked_by_this_process,
	error_table_$no_w_permission
	)		fixed binary (35) external;

dcl	get_lock_id_	entry (bit (36) aligned);
dcl	hcs_$try_to_unlock_lock
			entry (pointer, fixed binary);
dcl	timer_manager_$sleep
			entry (fixed binary (71), bit (2));

dcl	(addr, clock, min, stacq)
			builtin;

dcl	(no_write_permission, not_in_write_bracket)
			condition;

dcl	AVERY_LONG_TIME	fixed bin (71)		/* (2**52) microseconds) */
			init (10000000000000000000000000000000000000000000000000000b) static options (constant);

dcl	ONE_SEC_MICRO	fixed bin (35) init (1000000) static options (constant);

dcl	IN_MICRO		bit (2) init ("10"b) static options (constant);
%page;
/* format: off */

/* set_lock_$lock -- This entry attempts to set the lock word to the lock
   identifier of the calling process.  If the lock is already set by some other
   existing process then it waits for some given period of time for the lock to
   be unlocked.  If the lock is not unlocked in the given time then set_lock_
   gives up and returns.

      dcl  set_lock_$lock entry (bit(36) aligned, fixed binary, fixed binary (35));
      call set_lock_$lock (lock, wait_time, status);

   where:

      lock	(Input/Output)
	     is the lock word.

      wait_time	(Input)
	     is the number of seconds to wait for the lock to be unlocked.
	     If wait_time is zero, set_lock_$lock will never wait if the
	     lock is already locked.  If wait_time is negative,
	     set_lock_$lock will wait forever for the lock to be unlocked.

      status	(Output)
	     is a standard system status code.  It may take on one of the
	     following values:

	     0	the lock was successfully locked and was not previously
		locked.
	     error_table_$lock_wait_time_exceeded
		the lock was validly locked, we waited the requested
		period but the lock was not unlocked.
	     error_table_$locked_by_this_process
		the lock was already locked by this process.
	     error_table_$invalid_lock_reset
		the lock was successfully locked but was previously locked
		with an invalid lock ID.  (E.g., a dead process)
	     error_table_$no_w_permission
		the caller does not have the necessary access (write) to
		lock the supplied lock.
   */
/* format: on */

set_lock_$lock:
     entry (lock, wait_time, status);

	if first_invocation				/* first time in this ring */
	then call initialize_set_lock ();

	on no_write_permission, not_in_write_bracket
	     begin;
		status = error_table_$no_w_permission;
		go to RETURN_FROM_SET_LOCK;
	     end;

	failure_time = 0;

	do while ("1"b);				/* forever */

	     if stacq (lock, lock_id, "0"b)		/* try the lock */
	     then call return_from_set_lock (0);	/* ... got it */

	     call hcs_$try_to_unlock_lock (addr (lock), ttul_code);
	     if ttul_code = 3			/* ring 0 reset an invalid lock and relocked it for us */
	     then call return_from_set_lock (error_table_$invalid_lock_reset);

	     if ttul_code ^= 2
	     then do;				/* it's locked by a live process */

		     if lock = lock_id		/* already locked by this process */
		     then call return_from_set_lock (error_table_$locked_by_this_process);

		     if wait_time = 0
		     then sleep_time = 0;		/* caller does not want to wait */

		     else do;			/* either wait forever or for the requested time */
			     if failure_time = 0	/* ... determine when to give up */
			     then if wait_time < 0
				then failure_time = AVERY_LONG_TIME;
						/* ... wait forever (2**52 microseconds) */
				else failure_time = clock () + wait_time * ONE_SEC_MICRO;
						/* ... wait the specified number of seconds */
			     sleep_time = failure_time - clock ();
			end;			/* ... compute how long to sleep */

		     if sleep_time <= 0		/* we've waited long enough */
		     then call return_from_set_lock (error_table_$lock_wait_time_exceeded);

		     /*** We need to sleep before trying the lock again --
			As of 1979, timer_manager_$sleep will work in any
			ring and will also work when the alrm IPS signal
			is masked. */

		     call timer_manager_$sleep (min (sleep_time, ONE_SEC_MICRO), IN_MICRO);
		end;
	end;
%page;
/* set_lock_$unlock -- This entry unlocks a lock word that is set to the
   calling process's lock identifier.

      dcl  set_lock_$unlock entry (bit(36) aligned, fixed binary (35));
      call set_lock_$unlock (lock, status);

   where:

      lock	(Input/Output)
	     is the lock word.
   
      status	(Output)
	     is a standard system status code.
   */

set_lock_$unlock:
     entry (lock, status);

	if first_invocation				/* first time in this ring */
	then call initialize_set_lock ();

	if stacq (lock, "0"b, lock_id)
	then call return_from_set_lock (0);		/* we unlocked it */

	else if lock = ""b				/* it wasn't locked */
	then call return_from_set_lock (error_table_$lock_not_locked);

	else call return_from_set_lock (error_table_$locked_by_other_process);
%page;
/* Set the status code and return to our caller */

return_from_set_lock:
     procedure (p_status);

dcl	p_status		fixed binary (35) parameter;

	status = p_status;
	go to RETURN_FROM_SET_LOCK;

     end return_from_set_lock;


RETURN_FROM_SET_LOCK:
	return;



/* Initialize the set_lock_ mechanism in this this ring */

initialize_set_lock:
     procedure ();

	call get_lock_id_ (lock_id);

	first_invocation = "0"b;

	return;

     end initialize_set_lock;

     end set_lock_;
