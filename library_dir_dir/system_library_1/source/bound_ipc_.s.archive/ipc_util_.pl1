/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style3 */

/* IPC_UTIL_:  This is a collection of primitives used by the Interprocess
   Communication Facility (IPC).  These are internal interfaces and not
   intended to be called by any modules outside of IPC.  The entries
   within ipc_util_ include those to create, retrieve, and delete event
   channels as well as those to validate, encode, and decode the 
   event channel names. */

/*
   Rewritten from ipcprm_ for new ipc by E Donner Jan l981
   Modified 1984-10-28 by E. Swenson for new IPC validation.
*/


/****^  HISTORY COMMENTS:
  1) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
     audit(86-10-08,Fawcett), install(86-11-03,MR12.0-1206):
     Changed to support control point management.  These changes were actually
     made in February 1985 by G. Palter.
  2) change(86-08-12,Kissel), approve(86-08-12,MCR7479),
     audit(86-10-08,Fawcett), install(86-11-03,MR12.0-1206):
     Changed entry_type to fixed bin (8) and changed the code to verify the
     encoded flags in an event channel name.  All this to support async event
     channels.
                                                   END HISTORY COMMENTS */


ipc_util_:
     procedure ();
	return;					/* not an entry */

/* Automatic */

dcl	code		fixed bin (35);
dcl	ecit_idx		fixed bin (15) unsigned;	/* Index into ECIT */
dcl	ect_area_ptr	ptr;
dcl	ect_area_size	fixed bin (19);
dcl	entry_type	fixed bin (8);
dcl	1 info_for_area	like area_info aligned;
dcl	system_area_ptr	ptr;

/* Based */

dcl	ect_area		area (ect_area_size) based (ect_area_ptr);
dcl	system_area	area based (system_area_ptr);

/* Constants */

dcl	AREA_OVERHEAD	fixed bin (17) initial (36) internal static options (constant);
						/* area header + extend block */
dcl	BLOCK_OVERHEAD	fixed bin (17) initial (2) internal static options (constant);
						/* for each allocation */
dcl	DEFAULT_N_ECT_ENTRIES
			fixed bin (17) initial (64) internal static options (constant);
						/* default number used in calculating initial area size */
dcl	INITIAL_SEED	fixed bin (33) initial (1) internal static options (constant);
dcl	ON		bit (1) aligned static options (constant) init ("1"b);
dcl	NO		bit (1) aligned static options (constant) init ("0"b);
dcl	ALLOW_FAST_CHANNELS bit (1) aligned initial ("1"b) internal static options (constant);
dcl	DO_NOT_ALLOW_FAST_CHANNELS
			bit (1) aligned initial ("0"b) internal static options (constant);

/* External Entries */

dcl	define_area_	entry (ptr, fixed bin (35));
dcl	get_ring_		entry returns (fixed bin (3));
dcl	get_system_free_area_
			entry returns (ptr);
dcl	hcs_$get_ipc_operands
			entry (fixed bin (18), fixed bin (35));
dcl	ipc_real_$create_fast_ev_chn
			entry (fixed binary (18), fixed binary (35));
dcl	ipc_validate_$decode_event_channel_name
			entry (fixed bin (18), fixed bin (35), fixed bin (71), bit (3) aligned, fixed bin (15),
			fixed bin (3), bit (1) aligned, fixed bin (18), fixed bin (35));

/* External Static */

dcl	error_table_$ect_already_initialized
			fixed bin (35) external;
dcl	error_table_$ect_full
			fixed bin (35) external;
dcl	error_table_$inconsistent_ect
			fixed bin (35) external;
dcl	error_table_$invalid_channel
			fixed bin (35) external;
dcl	error_table_$special_channel
			fixed bin (35) external;
dcl	error_table_$wrong_channel_ring
			fixed bin (35) external;
dcl	ipc_data_$fast_channel_events
			bit (36) aligned external;
dcl	sys_info$max_seg_size
			fixed bin (19) external;

/* Conditions */

dcl	area		condition;

/* Builtins */

dcl	addr		builtin;
dcl	binary		builtin;
dcl	empty		builtin;
dcl	length		builtin;
dcl	mod		builtin;
dcl	null		builtin;
dcl	size		builtin;
dcl	stackbaseptr	builtin;
dcl	string		builtin;
dcl	substr		builtin;
dcl	unspec		builtin;
%page;
create_ect:
     entry (a_ect_ptr);

/**** Entry to create the Event Channel Table for the current ring.  It
      initializes the ECT header and creates the Event Channel Index
      Table. */

dcl	a_ect_ptr		ptr parameter;

	on area call ect_error_handler (error_table_$ect_full);
	call CREATE_ECT ();
	a_ect_ptr = ect_ptr;
	return;
%page;
create_single_seg_ect:
     entry (a_code);

/**** This entry creates an Event Channel Table for the current ring that
      is not located in the system area, but is located in a segment
      dedicated to the ECT. */

dcl	a_code		fixed bin (35) parameter;

	if stackbaseptr () -> stack_header.ect_ptr ^= null
	then do;					/* ect has been created before */
		a_code = error_table_$ect_already_initialized;
		return;
	     end;

	a_code = 0;
	ect_area_size = sys_info$max_seg_size;
	ect_area_ptr = null;			/* This causes define_area_ to create new seg */

	on area call ect_error_handler (error_table_$ect_full);

	call initialize_ect;

	return;
%page;
make_entry:
     entry (a_ect_ptr, a_type, a_ectep, a_ecit_idx);

/**** This entry creates a fresh ECTE.  The type created (WAIT or CALL)
      is specified in the parameter a_type.  It returns a pointer to this
      ECTE in a_ectep.  Currently this entry is only used to create WAIT
      and CALL ECTEs.  If it is ever used to create other types (e.g.
      EV_WAIT_MESSAGE, etc.), then care must be taken to avoid setting up an
      ECITE for the ECTE.  delete_entry must be made aware of these changes
      as well.  This entry returns the ECIT index for use in event
      channel name manipulation.  The modularization here should be
      changed to maintain the ECIT index as an internal value to ipc_util_,
      but this can be done at a later time. */

dcl	a_ectep		ptr parameter;
dcl	a_type		fixed bin (8) parameter;
dcl	a_ecit_idx	fixed bin (15);

	call SETUP ();

	entry_type = a_type;

/* check for inconsistency before creating new entry */

	call check_ect_consistency;

/* allocate new entry - assume that entries of all types are the same size */

	ect_area_size = ect_header.ect_area_size;
	on area call ect_error_handler (error_table_$ect_full);
	allocate wait_channel in (ect_header.ect_areap -> ect_area) set (ectep);
	unspec (wait_channel) = ""b;
	wait_channel.type = entry_type;

/* make an entry in the event_channel_index table */

	ecit_idx = 0;
	if entry_type = CALL | entry_type = WAIT
	then do;
		ecit_idx = FIND_ECIT_ENTRY ();
		if ecit_idx = 0
		then /* Should never happen */
		     call ect_error_handler (error_table_$ect_full);

		ecit.ecte_ptr (ecit_idx) = ectep;
	     end;

/* update count in ect header */
	ect_header.count (TOTAL) = ect_header.count (TOTAL) + 1;
	if entry_type = WAITING_CP
	then ect_header.count (WAITING_CP) = ect_header.count (WAITING_CP) + 1;

	a_ectep = ectep;
	a_ecit_idx = ecit_idx;
	return;
%page;
delete_entry:
     entry (a_ect_ptr, a_ectep);

/**** This entry will delete an ECTE entry.  It is used to delete entries
      like WAIT and CALL entries as well as EV_WAIT_MESSAGE and other entry
      types.  Care must be taken to "do the right thing" with respect
      to the ECITEs. */

	call SETUP ();
	ectep = a_ectep;
	entry_type = wait_channel.type;

/**** Remove the event channel index table entry from use.  Note that
      delete_entry is called to delete entries which are other than
      CALL or WAIT (e.g., EV_CALL_MESSAGE or WAITING_CP).
      Therefore, since we only set up ECIT entries for WAITs or CALLs,
      we mustn't try to search for the ECITE for other types. */

	if entry_type = WAIT | entry_type = CALL
	then do;
		ecit_idx = GET_ECIT_IDX (ectep);
		if ecit_idx = 0
		then /* Should never happen */
		     call ect_error_handler (error_table_$inconsistent_ect);
		else ecit.ecte_ptr (ecit_idx) = null ();
	     end;

/* update count in header */
	if entry_type = WAITING_CP
	then ect_header.count (WAITING_CP) = ect_header.count (WAITING_CP) - 1;
	ect_header.count (TOTAL) = ect_header.count (TOTAL) - 1;

/* free entry */
	free wait_channel;

	call check_ect_consistency;

	a_ectep = null;
	return;
%page;
verify_channel:
     entry (P_event_channel_name, P_ectep, P_fast_channel, P_code);

/**** This entrypoint verifies a given event channel name.  P_code
      can be error_table_$invalid_channel_ring, error_table_$invalid_channel,
      or 0.  P_fast_channel is set to "1"b if the channel is a fast channel, 
      otherwise it is set to "0"b. */

dcl	P_event_channel_name
			fixed binary (71) parameter;
dcl	P_ectep		pointer parameter;
dcl	P_fast_channel	bit (1) aligned parameter;
dcl	P_code		fixed binary (35) parameter;

	on area call ect_error_handler (error_table_$ect_full);
	call FIND_ECTP ();
	call VERIFY_CHANNEL (ALLOW_FAST_CHANNELS);
	return;
%page;
verify_regular_channel:
     entry (P_event_channel_name, P_ectep, P_code);

/**** This entrypoint verifies a given event channel name.  If the 
      event channel name is invalid, P_code is set to 
      error_table_$invalid_channel.  If the event channel name specifies
      a fast channel, P_code is set to error_table_$special_channel. 
      Otherwise P_ectep will point to a valid ECTE describing the
      channel. */

	on area call ect_error_handler (error_table_$ect_full);
	call FIND_ECTP ();
	call VERIFY_CHANNEL (DO_NOT_ALLOW_FAST_CHANNELS);
	return;
%page;
ect_error_handler:
     entry (a_status_code);

/**** This entry is called when some fatal situation is detected in
      the ECT structures.  It destroys the process with an appropriate
      error message. */

dcl	a_status_code	fixed bin (35) parameter;

dcl	1 term_structure	aligned,
	  2 version	fixed bin,
	  2 fatal_code	fixed bin (35);

dcl	terminate_process_	entry (char (*), ptr);

	term_structure.version = 0;
	term_structure.fatal_code = a_status_code;

	call terminate_process_ ("fatal_error", addr (term_structure));

	return;
%page;
check_ect_consistency:
     procedure ();

/**** This internal procedure attempts to check the consistency of the
      counts in the ECT header. */

	if ect_header.count (TOTAL)
	     ^= ect_header.count (WAIT) + ect_header.count (CALL) + ect_header.count (ITT_MESSAGE)
	     + ect_header.count (EV_CALL_MESSAGE) + ect_header.count (EV_WAIT_MESSAGE) + ect_header.count (WAITING_CP)
	then call ect_error_handler (error_table_$inconsistent_ect);

     end check_ect_consistency;
%page;
initialize_ect:
     procedure ();

/**** This internal procedure is called if no ECT exists for the current
      ring.  It initializes the ECT. */

dcl	ev_chn_unique_id	fixed binary (18);
dcl	code		fixed binary (35);

/* now define characteristics of ect area  */
	info_for_area.version = area_info_version_1;
	info_for_area.owner = "ipc";
	info_for_area.size = ect_area_size;
	info_for_area.areap = ect_area_ptr;
	string (info_for_area.control) = "0"b;
	info_for_area.control.extend = ON;
	info_for_area.control.zero_on_free = ON;
	info_for_area.control.system = ON;
	call define_area_ (addr (info_for_area), code);
	if code ^= 0
	then call ect_error_handler (code);

	ect_area_ptr = info_for_area.areap;		/* may have been set by define_area_ */

/* allocate header in new ect area */
/* and set initial values */
	allocate ect_header in (ect_area) set (ect_ptr);
	unspec (ect_header) = ""b;
	ect_header.firstp (*), ect_header.lastp (*) = null;
	ect_header.ect_area_size = ect_area_size;
	ect_header.ect_areap = ect_area_ptr;
	ect_header.seed = INITIAL_SEED;

/* Allocate the Event Channel Index Table */

	call ALLOCATE_ECIT (DEFAULT_N_ECT_ENTRIES);
	ect_header.ecit_ptr = ecit_ptr;
	ect_header.ecit_lth = ecit_lth;

/**** Retrieve the IPC validation operands from the APTE.  These values
      were initialized at process creation time and are used to validate
      event channel wakeups destined for this process.  They are also 
      used to decode the event channel name and to extract the ECIT
      index from the event channel name. */

	call hcs_$get_ipc_operands (ect_header.r_offset, ect_header.r_factor);

/* set ect_ptr in stack header */

	stackbaseptr () -> stack_header.ect_ptr = ect_ptr;


/* Create WAIT channel definitions for all possible fast channels.  These
   entries are only used when control point management is enabled to track the
   control points which have blocked on the fast channels. */

		do ev_chn_unique_id = 1 to length (ipc_data_$fast_channel_events);
		     call ipc_real_$create_fast_ev_chn (ev_chn_unique_id, code);
		     if code ^= 0
		     then call ect_error_handler (code);
		end;

	return;

     end initialize_ect;
%page;
ALLOCATE_ECIT:
     procedure (size);

/**** This procedure allocates and initializes an Event Channel Index
      Table (ECIT) in the current ECT area. */

dcl	size		fixed bin (17) parameter;

	ecit_ptr = null ();				/* Nullify this global variable */
	ecit_lth = size;

/**** Already have a handler for the "area" condition */

	allocate ecit in (ect_header.ect_areap -> ect_area) set (ecit_ptr);
	ecit.ecte_ptr (*) = null ();
	return;
     end ALLOCATE_ECIT;
%page;

FIND_ECIT_ENTRY:
     procedure () returns (fixed bin (15) unsigned);

/**** This procedure searches through the current event channel index table
      for a free entry.  If one is found, the index of this entry is returned.
      If none is available, then a new ECIT is allocated, the old ECIT entries
      copied into the new table and the old table freed.*/

dcl	ecit_idx		fixed bin (15) unsigned;

dcl	old_ecit_ptr	ptr;
dcl	old_ecit_lth	fixed bin (17);

dcl	1 old_ecit	aligned based (old_ecit_ptr),
	  2 ecte_ptr	(old_ecit_lth) ptr unaligned;

	do ecit_idx = 1 to ecit_lth;
	     if ecit.ecte_ptr (ecit_idx) = null ()
	     then return (ecit_idx);			/* found a free slot */
	end;

/**** There are no free entries in the current ECIT table.  For the time
      being, until we come up with a better algorithm, allocate a new
      table twice the size of the current table. */

	old_ecit_ptr = ecit_ptr;
	old_ecit_lth = ecit_lth;

	call ALLOCATE_ECIT (ecit_lth * 2);
	ect_header.ecit_ptr = ecit_ptr;
	ect_header.ecit_lth = ecit_lth;

/**** Copy old table into the new table */

	do ecit_idx = 1 to old_ecit_lth;
	     ecit.ecte_ptr (ecit_idx) = old_ecit.ecte_ptr (ecit_idx);
	end;

	free old_ecit;				/* Free up the old table */

	return (old_ecit_lth + 1);			/* one past end of old data */

     end FIND_ECIT_ENTRY;
%page;
GET_ECIT_IDX:
     procedure (P_ectep) returns (fixed bin (15) unsigned);

/**** This internal procedure returns the ECIT index given a pointer to
      the event channel entry. */

dcl	P_ectep		ptr parameter;
dcl	1 ev_chn_name	aligned like event_channel_name automatic;
dcl	ecit_idx		fixed bin (15) unsigned;
dcl	temp		fixed bin (71);
dcl	encoded_index_binary
			fixed bin (18) unsigned;
dcl	1 encoded_index	structure aligned automatic,
	  2 flags		bit (3) unaligned,
	  2 index		fixed bin (15) unsigned unaligned;

	unspec (ev_chn_name) = unspec (P_ectep -> wait_channel.name);
	temp = binary (ev_chn_name.encoded_index, 18);
	encoded_index_binary = mod (temp - ect_header.r_offset, 262144);
	unspec (encoded_index) = substr (unspec (encoded_index_binary), 19, 18);
	ecit_idx = encoded_index.index;
	if ecit_idx > ect_header.ecit_lth
	then ecit_idx = 0;
	return (ecit_idx);
     end GET_ECIT_IDX;
%page;
VERIFY_CHANNEL:
     procedure (allow_fast_channels);

/**** This internal procedure uses the implicit arguments from the
      verify_channel and verify_regular_channel entrypoints. */

dcl	allow_fast_channels bit (1) aligned parameter;

dcl	code		fixed bin (35);
dcl	ecit_idx		fixed bin (15) unsigned;
dcl	ev_chn_flags	bit (3) aligned;
dcl	ev_chn_index	fixed bin (15);
dcl	ev_chn_ring	fixed bin (3);
dcl	ev_chn_type	bit (1) aligned;
dcl	ev_chn_unique_id	fixed bin (18);
dcl	event_channel_name	fixed bin (71);

	P_ectep = null ();
	P_code = 0;

	event_channel_name = P_event_channel_name;
	call ipc_validate_$decode_event_channel_name (ect_header.r_offset, ect_header.r_factor, event_channel_name,
	     ev_chn_flags, ev_chn_index, ev_chn_ring, ev_chn_type, ev_chn_unique_id, code);
	if code ^= 0
	then do;
		P_code = code;
		return;
	     end;

	if ev_chn_flags ^= NORMAL_CHANNEL_FLAGS & ev_chn_flags ^= SEND_IPS_WKP_CHANNEL_FLAGS
	then
INVALID_CHANNEL:
	     do;
		P_code = error_table_$invalid_channel;
		return;
	     end;

	if ev_chn_ring ^= get_ring_ ()
	then do;
		P_code = error_table_$wrong_channel_ring;
		return;
	     end;

	if ev_chn_type = FAST_CHANNEL_TYPE		/* claims to be a fast channel */
	then if ev_chn_unique_id > length (ipc_data_$fast_channel_events)
	     then goto INVALID_CHANNEL;

	ecit_idx = ev_chn_index;

	if ecit_idx > ecit_lth
	then goto INVALID_CHANNEL;

	ectep = ecit.ecte_ptr (ecit_idx);
	if ectep = null ()
	then goto INVALID_CHANNEL;

	if ectep -> wait_channel.name ^= unspec (event_channel_name)
	then goto INVALID_CHANNEL;

/**** Things look ok, give caller what he/she wanted. */

	if allow_fast_channels
	then P_fast_channel = (ev_chn_type = FAST_CHANNEL_TYPE);
	else if ev_chn_type = FAST_CHANNEL_TYPE
	then do;					/* a fast channel and the caller doesn't want one */
		P_code = error_table_$special_channel;
		return;
	     end;

	P_ectep = ectep;

	return;

     end VERIFY_CHANNEL;
%page;
FIND_ECTP:
     procedure ();

/**** Internal procedure to get a pointer to the ECT for this ring.
      If there is none, one will be created. */

	ect_ptr = stackbaseptr () -> stack_header.ect_ptr;
	if ect_ptr = null ()
	then call CREATE_ECT ();
	ecit_ptr = ect_header.ecit_ptr;
	ecit_lth = ect_header.ecit_lth;
	return;

     end FIND_ECTP;
%page;
SETUP:
     procedure ();

/**** This internal procedure copies the parameter a_ect_ptr into
      ect_ptr and gets the ECIT variables necessary to reference
      the ECIT. */

	ect_ptr = a_ect_ptr;
	ecit_ptr = ect_header.ecit_ptr;
	ecit_lth = ect_header.ecit_lth;
	return;
     end SETUP;
%page;
CREATE_ECT:
     procedure ();

/* The ect is an extensible area which is allocated in system free area */
/* it is an area so that header and ect entries will be clustered */

	system_area_ptr = get_system_free_area_ ();

/* calculate room for reasonable number of ectes, ect header and extend block */
	ect_area_size =
	     AREA_OVERHEAD + size (ect_header) + DEFAULT_N_ECT_ENTRIES * size (wait_channel)
	     + (DEFAULT_N_ECT_ENTRIES + 2) * BLOCK_OVERHEAD + DEFAULT_N_ECT_ENTRIES + BLOCK_OVERHEAD;
						/* one word for each entry in ecit */

	allocate ect_area in (system_area) set (ect_area_ptr);

	call initialize_ect;
	return;
     end CREATE_ECT;

/* format: off */
%page; %include area_info;
%page; %include ect_structures;
%page; %include event_channel_name;
%page; %include stack_header;
/* format: on */
     end ipc_util_;
