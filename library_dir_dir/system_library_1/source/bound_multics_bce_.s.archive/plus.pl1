/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* Arithmetic active functions

	FUNCTION			VALUE
	plus A1 A2 ... An		0 + A1 + A2 + ... + An
	minus A1 A2		A1 - A2  or  -A1 if A2 is not specified
	times A1 A2 ... An		1 * A1 * A2 * ... * An
	divide A1 A2		trunc(A1 / A2)
	quotient A1 A2		A1 / A2
	mod A1 A2			mod(A1,A2)
	max A1 A2 ... An		max(A1,A2, ..., An)
	min A1 A2 ... An		min(A1,A2, ..., An)
	trunc A1			trunc(A1)
	floor A1			floor(A1)
	ceil A1			ceil(A1)

   Each Ai is the character string representation of a valid PL/I decimal number,
   either fixed or float.  Calculations are performed internally using float dec(59)
   arithmetic.  The result is in I-, F-, or E-format depending on its value.  All of
   these active functions can be called as functions or as commands, in which case
   they print the result.

   Initial Version: 27 January 1974 by Barry L. Wolman */

/* Modified 7/8/76 by S. Herbst */
/* Fixed min and others with no args 07/07/81 S. Herbst */

plus:	proc;

dcl	op char(8) aligned,
	(number1,number2) float dec(59),
	result char(72) varying,
	code fixed bin(35),
	not_active_function bit(1),
	(i,count) fixed bin,
	get_arg variable entry(fixed bin,ptr,fixed bin,fixed bin(35)),
	(ap,ap1) ptr,
	(al,al1) fixed bin,
	answer char(al1) varying based(ap1),
	arg char(al) based(ap),
	(mod,max,min,fixed,convert,string,trunc,floor,ceil) builtin,
	(conversion, overflow, underflow, zerodivide) condition;

dcl	(cu_$arg_ptr,cu_$af_arg_ptr,cu_$af_return_arg) entry(fixed bin,ptr,fixed bin,fixed bin(35)),
	cu_$arg_count entry returns(fixed bin),
	numeric_to_ascii_ entry(float dec(59),fixed bin,char(72) varying),
	(ioa_,com_err_,active_fnc_err_) options(variable);

dcl	(error_table_$not_act_fnc,
	 error_table_$wrong_no_of_args) fixed bin(35) ext static;

dcl	1 op_type,
	2 multi	bit(1) unaligned,
	2 unary	bit(1) unaligned;

	op = "plus";
	string(op_type) = "11"b;
	goto join;

minus:	entry;

	op = "minus";
	string(op_type) = "00"b;
	goto join;

times:	entry;

	op = "times";
	string(op_type) = "11"b;
	goto join;

divide:	entry;

	op = "divide";
	string(op_type) = "00"b;
	goto join;

quotient: entry;

	op = "quotient";
	string(op_type) = "00"b;
	goto join;

mod:	entry;

	op = "mod";
	string(op_type) = "00"b;
	goto join;

max:	entry;

	op = "max";
	string(op_type) = "10"b;
	goto join;

min:	entry;

	op = "min";
	string(op_type) = "10"b;
	goto join;

trunc:	entry;

	op = "trunc";
	string(op_type) = "01"b;
	goto join;

floor:	entry;

	op = "floor";
	string(op_type) = "01"b;
	goto join;

ceil:	entry;

	op = "ceil";
	string(op_type) = "01"b;
	goto join;

join:	call cu_$af_return_arg(count,ap1,al1,code);

	not_active_function = code = error_table_$not_act_fnc;

	if not_active_function
	then do;
	     count = cu_$arg_count();
	     get_arg = cu_$arg_ptr;
	     code = 0;
	     end;
	else do;
	     if code ^= 0 then go to simple_err;

	     get_arg = cu_$af_arg_ptr;
	     end;

	if count = 0 then do;
	     if op = "plus" | op = "minus" then number1 = 0;
	     else if op = "times" then number1 = 1;
	     else go to wrong_args;
	     go to output;
	end;

	if (count ^= 1 & unary & ^ multi)
	 | (count < 2 & ^ unary & op ^= "minus")
	 | (count > 2 & ^ multi)
	then do;
wrong_args:    code = error_table_$wrong_no_of_args;
simple_err:    if not_active_function then call com_err_ (code, op);
	     else call active_fnc_err_ (code, op);
	     go to exit;
	     end;

	on conversion goto not_numeric;
	on overflow goto too_big;
	on underflow goto too_small;
	on zerodivide goto zero_divide;

	call get_arg(1,ap,al,code);

	if code ^= 0 then call gripe("");

	number1 = convert(number1,arg);

	if count = 1 & op = "minus" then number1 = -number1;

	if unary
	then do;
	     if op = "trunc" then number1 = trunc(number1);
	     if op = "floor" then number1 = floor(number1);
	     if op = "ceil" then number1 = ceil(number1);
	     end;

	do i = 2 to count;
	     call get_arg(i,ap,al,code);

	     if code ^= 0 then call gripe("");

	     number2 = convert(number2,arg);

	     if op = "plus" then number1 = number1 + number2;
	     if op = "minus" then number1 = number1 - number2;
	     if op = "times" then number1 = number1 * number2;
	     if op = "divide" then number1 = trunc (number1 / number2);
	     if op = "quotient" then number1 = number1 / number2;
	     if op = "mod" then number1 = mod(number1, number2);
	     if op = "max" then number1 = max(number1, number2);
	     if op = "min" then number1 = min(number1, number2);

	     end;

output:
	call numeric_to_ascii_(number1,0,result);
	if substr (result, 1, 1) = "0" & length (result) > 60 then do;	/* trim it so it will work better */
	     result = substr (result, 1, length (result) - 1);
	     end;

	if not_active_function then call ioa_(result);
	else answer = result;

	return;

zero_divide:
	if not_active_function then call com_err_(0,op,"Attempt to divide by zero.");
	else call active_fnc_err_(0,op,"Attempt to divide by zero.");
	return;

not_numeric:
	call gripe("""^a"" is non-numeric");
	return;

too_big:
	call gripe("overflow");
	return;

too_small:
	call gripe("underflow");
	return;

gripe:	     proc(s);

dcl	     s char(*);

	     if not_active_function then call com_err_(code,op,s,arg);
	     else call active_fnc_err_(code,op,s,arg);

	     goto exit;
	     end;

exit:	end;
