/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* General number formatter.

   This routine returns the ASCII string representation of its input
   argument, which is float dec(59).  The returned varying string has
   no blanks in it.  The returned string is in I-format, F-format, or
   E-format depending on value of input.  The precision argument controls
   rounding or truncating of input value
	0	no action, as many digits as are necessary
		will appear in final string
	< 0	truncate to specified number of digits
	> 0	round to specified number of digits

   Initial Version: 28 January 1974 by Barry L. Wolman */

numeric_to_ascii_: proc(val,precision,ans);

dcl	val float dec(59),
	precision fixed bin,
	ans char(72) varying;

dcl	value float dec(59);

dcl	1 value_overlay	aligned based(addr(value)),
	2 sign		char(1) unaligned,
	2 digits		char(59) unaligned,
	2 skip		bit(1) unaligned,
	2 exponent	fixed bin(7) unaligned;

dcl	fixed_dec fixed dec(3);

dcl	1 fixed_overlay	aligned based(addr(fixed_dec)),
	2 sign		char(1) unaligned,
	2 dig		char(3) unaligned;

dcl	(p,exp,n,nzeros,ndigits) fixed bin;

dcl	move_r_or_t_ entry(float dec(59),float dec(59),fixed bin);

dcl	(abs,substr,convert) builtin;

	p = precision;

	if p ^= 0
	then do;
	     call move_r_or_t_(value,val,p);
	     p = abs(p);
	     end;
	else do;
	     value = val;
	     p = 59;
	     end;

	if value = 0 then ans = "0";
	else do;

	     if value > 0 then ans = "";
	     else do;
		value = abs(value);
		ans = "-";
		end;

	     n = verify(digits,"0");
	     nzeros = verify(reverse(digits),"0");
	     ndigits = 61 - n - nzeros;

	     exp = exponent + nzeros - 1;

	     if exp >= 0
	     then if exp + ndigits > p then call e_format;
		else do;
		     ans = ans || substr(digits,n,ndigits);
		     if exp > 0 then ans = ans || substr((64)"0",1,exp);
		     end;
	     else do;
		nzeros = ndigits + exp;

		if nzeros <= 0
		then if ndigits - nzeros > p
		     then call e_format;
		     else do;
			ans = ans || "0.";
			if nzeros ^= 0 then ans = ans || substr((64)"0",1,abs(nzeros));
			ans = ans || substr(digits,n,ndigits);
			end;
		else do;
		     ans = ans || substr(digits,n,nzeros);
		     ans = ans || ".";
		     ans = ans || substr(digits,nzeros+n,ndigits-nzeros);
		     end;
		end;
	     end;

e_format:	     proc;

	     ans = ans || substr(digits,n,1);
	     ans = ans || ".";
	     ans = ans || substr(digits,n+1,ndigits-1);
	     ans = ans || "e";

	     exp = exp + ndigits - 1;

	     fixed_dec = convert(fixed_dec,exp);

	     if abs(exp) < 10 then ndigits = 1;
	     else if abs(exp) < 100 then ndigits = 2;
		else ndigits = 3;

	     if exp < 0 then ans = ans || "-";
	     ans = ans || substr(fixed_overlay.dig,4-ndigits,ndigits);
	     end;

	end;
