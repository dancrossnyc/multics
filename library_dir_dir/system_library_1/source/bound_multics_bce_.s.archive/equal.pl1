/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


equal: proc;

/* Comparison and boolean active functions.

   The following functions compare arbitrary strings by collating sequence:

	equal A B		"true" if A = B, "false" otherwise.
	less A B		"true" if A < B, "false" otherwise.
	greater A B	"true" if A > B, "false" otherwise.

   The following compare numbers; an error is reported if both arguments are
   not character string representations of valid PL/I real constants.
   Comparisons are done using float dec (59) arithmetic.

	nequal A B	"true" if A = B, "false" otherwise.
	nless A B		"true" if A < B, "false" otherwise.
	ngreater A B	"true" if A > B, "false" otherwise.

   The following perform logical operations on arguments having the
   values true and false:

	not A		"true" if A = "false", "false" if A = "true".
	and A1 A2 ... An	"true" if all Ai are "true", "false" otherwise.
	or A1 A2 ... An	"true" if any Ai is "true", "false" otherwise.

   All of these active functions print their result when called as commands.

 Initial version 3/4/74 by Barry L. Wolman */
/* Time comparison functions added 11/28/78 by Jim Homan */
/* Rewritten 01/18/80 by S. Herbst */
/* Bug fixed in time comparisons 04/14/80 S. Herbst */
/* Changed and, or to accept 0 args or 1 arg 09/16/82 S. Herbst */
/* Added -date to date_time comparison commands 10/26/82 S. Herbst */
/* Fixed dteq and friends to not reject negative times 11/23/82 S. Herbst */
/* Added the date_time_valid function 11/23/82 J. A. Bush */
/* removed a portion, creating date_time_equal.pl1 02/07/84 J A Falksen */

	dcl     arg1		 char (arg_len (1)) based (arg_ptr (1));
	dcl     arg2		 char (arg_len (2)) based (arg_ptr (2));

	dcl     return_arg		 char (return_len) varying based (return_ptr);

	dcl     (bad_arg, usage)	 char (168);
	dcl     myname		 char (32);

	dcl     arg_ptr		 (2) ptr;
	dcl     return_ptr		 ptr;

	dcl     (af_sw, bool_value)	 bit (1);

	dcl     (number1, number2)	 float dec (59);

	dcl     arg_len		 (2) fixed bin;
	dcl     (arg_count, i, return_len) fixed bin;
	dcl     code		 fixed bin (35);

	dcl     error_table_$not_act_fnc fixed bin (35) ext;

	dcl     get_arg		 entry (fixed bin, ptr, fixed bin, fixed bin (35))automatic;
	dcl     complain		 entry variable options (variable);

	dcl     (active_fnc_err_, active_fnc_err_$suppress_name) entry options (variable);
	dcl     (com_err_, com_err_$suppress_name) entry options (variable);
	dcl     cu_$af_return_arg	 entry (fixed bin, ptr, fixed bin, fixed bin (35));
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin, fixed bin (35));
	dcl     cu_$af_arg_ptr	 entry (fixed bin, ptr, fixed bin, fixed bin (35));
	dcl     ioa_		 entry options (variable);

	dcl     convert		 builtin;

	dcl     conversion		 condition;
						/**/
	myname = "equal";
	usage = "string1 string2";

	call get_args;

	if arg1 = arg2 then go to TRUE;
	else go to FALSE;


TRUE:	if af_sw then return_arg = "true";
	else call ioa_ ("true");
	return;

FALSE:	if af_sw then return_arg = "false";
	else call ioa_ ("false");
	return;

USAGE:	if af_sw then call active_fnc_err_$suppress_name (0, myname, "Usage:  ^a ^a", myname, usage);
	else call com_err_$suppress_name (0, myname, "Usage:  ^a ^a", myname, usage);

RETURN:	return;


less: entry;

	myname = "less";
	usage = "string1 string2";

	call get_args;

	if arg1 < arg2 then go to TRUE;
	else go to FALSE;


greater: entry;

	myname = "greater";
	usage = "string1 string2";

	call get_args;

	if arg1 > arg2 then go to TRUE;
	else go to FALSE;


nequal: entry;

	myname = "nequal";
	usage = "num1 num2";

	call get_args;
	call convert_numbers;

	if number1 = number2 then go to TRUE;
	else go to FALSE;


nless: entry;

	myname = "nless";
	usage = "num1 num2";

	call get_args;
	call convert_numbers;

	if number1 < number2 then go to TRUE;
	else go to FALSE;


ngreater: entry;

	myname = "ngreater";
	usage = "num1 num2";

	call get_args;
	call convert_numbers;

	if number1 > number2 then go to TRUE;
	else go to FALSE;

and: entry;

	myname = "and";
	usage = "true_false_args";

	call get_count;
	if arg_count = 0 then bool_value = "1"b;	/* and-identity */
	else bool_value = get_boolean (1);
	do i = 2 to arg_count;
	     bool_value = bool_value & get_boolean (i);
	end;

	if bool_value then go to TRUE;
	else go to FALSE;


or:  entry;

	myname = "or";
	usage = "true_false_args";

	call get_count;
	if arg_count = 0 then bool_value = "0"b;	/* or-identity */
	else bool_value = get_boolean (1);
	do i = 2 to arg_count;
	     bool_value = bool_value | get_boolean (i);
	end;

	if bool_value then go to TRUE;
	else go to FALSE;


not: entry;

	myname = "not";
	usage = "true_or_false";

	call get_count;
	if arg_count ^= 1 then go to USAGE;
	if get_boolean (1) then go to FALSE;
	else go to TRUE;
						/**/
get_count: proc;

/* This internal procedure tests for af invocation and gets argument count. */

	call cu_$af_return_arg (arg_count, return_ptr, return_len, code);

	if code = error_table_$not_act_fnc then do;
		af_sw = "0"b;
		complain = com_err_;
		get_arg = cu_$arg_ptr;
	     end;
	else do;
		af_sw = "1"b;
		complain = active_fnc_err_;
		get_arg = cu_$af_arg_ptr;
	     end;

     end get_count;



get_args: proc;

/* This internal procedure gets two arguments. */

	dcl     j			 fixed bin;

	call get_count;

	j = 0;

	if arg_count ^= 2 then go to USAGE;
	call get_arg (1, arg_ptr (1), arg_len (1), code);
	call get_arg (2, arg_ptr (2), arg_len (2), code);

     end get_args;



get_boolean: proc (arg_index) returns (bit (1) aligned);

/* This internal procedure gets a single true or false argument. */

	dcl  arg_index		 fixed bin;

	call get_arg (arg_index, arg_ptr (1), arg_len (1), code);

	if arg1 = "true" then return ("1"b);
	else if arg1 = "false" then return ("0"b);
	else do;
		call complain (0, myname, "Must be true or false, not ""^a""", arg1);
		go to RETURN;
	     end;

     end get_boolean;
						/**/
convert_numbers: proc;

/* This internal procedure converts both arguments to real numbers. */

	on conversion begin;
		bad_arg = arg1;
		go to BAD;
	     end;
	number1 = convert (number1, arg1);
	revert conversion;

	on conversion begin;
		bad_arg = arg2;
		go to BAD;
	     end;
	number2 = convert (number2, arg2);
	revert conversion;

	return;

BAD:	call complain (0, myname, "Invalid number ^a", bad_arg);
	go to RETURN;

     end convert_numbers;



     end equal;
