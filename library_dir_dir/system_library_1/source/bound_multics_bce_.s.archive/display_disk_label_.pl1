/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */

display_disk_label_:
     proc (p_labelp);

/* format: style4,initcol1,indattr,declareind8,dclind4,idind35,ifthenstmt,ifthen,^indproc,delnl,insnl */

/**** Written August of 1984 by Allen Ball to display a valid disk label in readable format for display_disk_label and
      bce_display_disk_label. ****/

/****^  HISTORY COMMENTS:
  1) change(86-01-16,Fawcett), approve(86-04-11,MCR7383),
     audit(86-05-14,Farley), install(86-07-17,MR12.0-1097):
     Add support for subvolumes, and 512_WORD_IO, 3380 and 3390.
  2) change(88-04-12,GWMay), approve(88-04-12,MCR7867),
     audit(88-06-14,Beattie), install(88-07-19,MR12.2-1061):
     Changed to display in octal and decminal.  Changed to interpret access
     class.
  3) change(88-05-27,GWMay), approve(88-05-27,MCR7883),
     audit(88-06-14,Beattie), install(88-07-19,MR12.2-1061):
     Changed to display the status of volume dumper bit maps.
                                                   END HISTORY COMMENTS */

	labelp = p_labelp;
	call ioa_ ("PVID^-^-^oo", label.pvid);
	call ioa_ ("Serial^-^-^a", label.mfg_serial);
	call ioa_ ("Logical Volume^-^a", label.lv_name);
	call ioa_ ("LVID^-^-^oo^/", label.lvid);
	if label.number_of_sv ^= 0 then
	     call ioa_ ("Subvolume ^a ^d of ^d", label.sub_vol_name, label.this_sv + 1, label.number_of_sv);
	call ioa_ ("Registered^-^a", cv_time (label.time_registered));
	call ioa_ ("Dismounted^-^a", cv_time (label.time_unmounted));
	call ioa_ ("Map Updated^-^a", cv_time (label.time_map_updated));
	call ioa_ ("Salvaged^-^-^a", cv_time (label.time_salvaged));
	call ioa_ ("Bootload^-^-^a", cv_time (label.time_of_boot));
	call ioa_ ("Reloaded^-^-^a", cv_time (label.time_last_reloaded));
	call ioa_ ("
Dumped
  Incremental^-^[^a^;Never Been Dumped^s^]
  Consolidated^-^[^a^;Never Been Dumped^s^]
  Complete^-^[^a^;Never Been Dumped^s^]", label.time_last_dmp (Incremental) ^= 0,
	     cv_time (label.time_last_dmp (Incremental)), label.time_last_dmp (Consolidated) ^= 0,
	     cv_time (label.time_last_dmp (Consolidated)), label.time_last_dmp (Complete) ^= 0,
	     cv_time (label.time_last_dmp (Complete)));

	call ioa_ ("
The volume dumper bit maps located in the label are ^[NOT ^]consistent.", label.inconsistent_dbm);

	call ioa_ ("^/Inconsistencies^-^-^d", label.vol_trouble_count);

	if sys_info$service_system then do;
	     call convert_access_class_$to_string_short (label.min_access_class, access_string, code);
	     call ioa_ ("^/Minimum AIM^-^-^a (^[^[system_low^s^;<UNNAMED>^s^]^;^s^a^])",
		display_access_class_ (label.min_access_class), access_string = "", code = 0, access_string);
	     call convert_access_class_$to_string_short (label.max_access_class, access_string, code);
	     call ioa_ ("Maximum AIM^-^-^a (^[^[system_low^s^;<UNNAMED>^s^]^;^s^a^])",
		display_access_class_ (label.max_access_class), access_string = "", code = 0, access_string);
	end;
	else do;
	     call ioa_ ("^/Minimum AIM^-^-^a", display_access_class_ (label.min_access_class));
	     call ioa_ ("Maximum AIM^-^-^a", display_access_class_ (label.max_access_class));
	end;

	if label.root.here then do;
	     call ioa_ ("^/Volume contains root (>) at vtocx ^d (^oo)", label.root_vtocx, label.root_vtocx);
	     call ioa_ ("  disk_table_ at vtocx ^d (^oo) (uid ^wo)", label.root.disk_table_vtocx,
		label.root.disk_table_vtocx, label.root.disk_table_uid);
	end;
	if label.nparts > 0 then do;
	     call ioa_ ("^/Volume Map from Label");
	     call ioa_ ("
   First Record             Size");
	     do parts_index = 1 to label.nparts;
		call ioa_ ("^8d (^oo)^22t^8d (^oo)^51t^4a Partition", label.parts (parts_index).frec,
		     label.parts (parts_index).frec, label.parts (parts_index).nrec, label.parts (parts_index).nrec,
		     label.parts (parts_index).part);
	     end;
	end;
	return;

%page;
cv_time:
     proc (date_time) returns (char (*));

dcl date_time		         fixed bin (71);
dcl date_time_string	         char (24);
dcl length		         builtin;
dcl substr		         builtin;

	if date_time = 0 then
	     return ("");
	else do;
	     date_time_string = date_time_$format ("date_time", date_time, "", "");
	     if substr (date_time_string, 1, length (Null_date_time)) = Null_date_time then
		return ("");
	     else return (date_time_string);
	end;
     end;
%page;

dcl access_string		         char (32);

dcl code			         fixed bin (35);

dcl Consolidated		         fixed bin static options (constant) init (2);
dcl Complete		         fixed bin static options (constant) init (3);
dcl Incremental		         fixed bin static options (constant) init (1);
dcl Null_date_time		         char (16) static options (constant) init ("01/01/01  0000.0");
dcl sys_info$service_system	         bit (1) aligned ext static;

dcl convert_access_class_$to_string_short
			         entry (bit (72) aligned, char (*), fixed bin (35));
dcl date_time_$format	         entry (char (*), fixed bin (71), char (*), char (*)) returns (char (250) var);
dcl display_access_class_	         entry (bit (72) aligned) returns (char (32) aligned);
dcl ioa_			         entry () options (variable);
dcl p_labelp		         pointer parameter;
dcl parts_index		         fixed bin;		/* format: ^insnl */
%page; %include aim_template;
%page; %include fs_vol_label;

     end display_disk_label_;
