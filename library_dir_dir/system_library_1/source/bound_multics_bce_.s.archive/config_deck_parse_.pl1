/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */
config_deck_parse_: proc; return;

/* Routine to convert from ascii to binary forms of config cards with labels.
Extracted from config_deck_edit_, February 1984 by Keith Loepere.
Modified to handle negative numeric fields, December 1984, Keith Loepere. */

/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */

dcl  Bad_decimal_value_a	        fixed bin static options (constant) init (1);
dcl  Bad_decimal_value_a_text	        char (36) static options (constant) init ("^[""^a""^/^;Bad decimal value ""^a""^/^]");
dcl  Bad_octal_value_a	        fixed bin static options (constant) init (2);
dcl  Bad_octal_value_a_text	        char (34) static options (constant) init ("^[""^a""^/^;Bad octal value ""^a""^/^]");
dcl  Card_name_too_long	        fixed bin static options (constant) init (3);
dcl  Card_name_too_long_text	        char (26) static options (constant) init ("^[^;Card name too long^/^]");
dcl  Config_card_name	        (64) char (4);	/* local copy of config_deck_data_$Config_card_name so we can patch last name */
dcl  Field_a_not_defined_or_too_many_supplied_for_card fixed bin static options (constant) init (4);
dcl  Field_a_not_defined_or_too_many_supplied_for_card_text char (66) static options (constant) init ("^[""^a""^/^;Field ""^a"" not defined or too many supplied for card^/^]");
dcl  No_card_type_specified	        fixed bin static options (constant) init (5);
dcl  No_card_type_specified_text      char (30) static options (constant) init ("^[^;No card type specified^/^]");
dcl  No_name_follows_dot	        fixed bin static options (constant) init (6);
dcl  No_name_follows_dot_text	        char (27) static options (constant) init ("^[^;No name follows dot^/^]");
dcl  No_value_for_a		        fixed bin static options (constant) init (7);
dcl  No_value_for_a_text	        char (31) static options (constant) init ("^[""^a""^/^;No value for ""^a""^/^]");
dcl  Some_fields_were_skipped_in_the_card fixed bin static options (constant) init (8);
dcl  Some_fields_were_skipped_in_the_card_text char (44) static options (constant) init ("^[^;Some fields were skipped in the card^/^]");
dcl  Some_required_fields_were_not_supplied fixed bin static options (constant) init (9);
dcl  Some_required_fields_were_not_supplied_text char (46) static options (constant) init ("^[^;Some required fields were not supplied^/^]");
dcl  String_is_more_than_4_characters_a fixed bin static options (constant) init (10);
dcl  String_is_more_than_4_characters_a_text char (51) static options (constant) init ("^[""^a""^/^;String is more than 4 characters ""^a""^/^]");
dcl  Too_many_values_specified_for_card fixed bin static options (constant) init (11);
dcl  Too_many_values_specified_for_card_text char (42) static options (constant) init ("^[^;Too many values specified for card^/^]");
dcl  Value_is_not_a_valid_single_character_a fixed bin static options (constant) init (12);
dcl  Value_is_not_a_valid_single_character_a_text char (56) static options (constant) init ("^[""^a""^/^;Value is not a valid single character ""^a""^/^]");
dcl  Whitespace		        char (5) static options (constant) init ("
	 ");						/* NL HT FF SP VT */
dcl  addcharno		        builtin;
dcl  addr			        builtin;
dcl  ascii_config_card	        char (256) var parameter; /* work area to develop a card */
dcl  1 binary_card		        aligned like config_card;
dcl  card_subname		        char (4);		/* first data field - tells apart prph cards */
dcl  card_type		        fixed bin;
dcl  config_card_field	        fixed bin;		/* loop index into data fields */
dcl  config_card_type	        fixed bin;		/* loop index into types */
dcl  cu_$arg_list_ptr	        entry (ptr);
dcl  cv_dec_check_		        entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  cv_oct_check_		        entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  dimension		        builtin;
dcl  error_detected		        bit (1) aligned;	/* error flagged by conversion routines */
dcl  error_flagged		        (12) bit (1) aligned; /* error message n has been flagged and printed before */
dcl  index		        builtin;
dcl  ioa_			        entry () options (variable);
dcl  ioa_$general_rs	        entry (ptr, fixed bin, fixed bin, char (*), fixed bin (21), bit (1) aligned, bit (1) aligned);
dcl  ioa_$nnl		        entry () options (variable);
dcl  ioa_$rsnnl		        entry () options (variable);
dcl  length		        builtin;
dcl  ltrim		        builtin;
dcl  mod			        builtin;
dcl  output_card_num	        fixed bin parameter;	/* used for error messages */
dcl  p_cardp		        ptr parameter;
dcl  rtrim		        builtin;
dcl  search		        builtin;
dcl  silent		        bit (1) aligned;	/* don' print errors */
dcl  substr		        builtin;
dcl  unspec		        builtin;
dcl  verify		        builtin;
%page;
binary_to_ascii: entry (p_cardp, ascii_config_card);

	cardp = p_cardp;
	silent = "1"b;
	error_flagged (*) = "0"b;

/* Make a local copy of names.  Patch the last one to be the
current card to guarantee a match. */

	do card_type = 1 to config_deck_data_$num_described_cards - 1;
	     Config_card_name = config_deck_data_$Config_card_name;
	end;
	Config_card_name (config_deck_data_$num_described_cards) = config_card.word;

	unspec (card_subname) = unspec (config_card.data_field (1));
	do config_card_type = 1 to config_deck_data_$num_described_cards while (^card_matches ());
	end;

	call convert_to_type (config_card_type);

/* arriving here, the card seems to be of a known type and in good form
but the rules may have changed on us.  See what we think of the ascii form.  
If not good, reconvert card as a user format. */

	call config_card_major_parse (ascii_config_card, binary_card, 0, error_detected);
	if error_detected then do;

/* aha, not in format we really like - bad values or number of fields or 
something.  To keep us quiet later, lets make this a user card */

	     call convert_to_type (config_deck_data_$num_described_cards);
	     ascii_config_card = "." || ascii_config_card;
	end;
	return;
%page;
ascii_to_binary: entry (ascii_config_card, p_cardp, output_card_num);

	cardp = p_cardp;
	unspec (config_card) = "0"b;
	silent = "0"b;
	error_flagged (*) = "0"b;

	do card_type = 1 to config_deck_data_$num_described_cards;
	     Config_card_name = config_deck_data_$Config_card_name;
	end;

/* We now have local copy of names.  Later, we patch the last one to be the
current card to guarantee a match. */

	call config_card_major_parse (ascii_config_card, config_card, output_card_num, error_detected);
	return;
%page;
config_card_major_parse: proc (ascii_config_card, binary_card, output_card_num, error_detected);

/* this proc does the major work of parsing the fields into a binary version
of a config card.  It decides which card this is and uses the descriptions
to figure out field names.  The idea here is:
we grab the labeled fields and find the first place in the card that has
such a label (that we haven't filled in with some other value) and place it
there.  The unlabeled values are then added, in order, to the missing
(unfilled) spaces.  Thus, an old style card gets parsed as always and a new
card gets parsed correctly also without having to be able to tell the
difference. */

dcl  NO_TYPE		        bit (2) static options (constant) init ("11"b);
						/* means no type known for field - we use CONFIG_DECIMAL_TYPE 
						since octal type is used for all generic numeric */
dcl  ascii_config_card	        char (256) var parameter;
dcl  1 binary_card		        aligned like config_card parameter; /* output binary version */
dcl  binary_field_num	        fixed bin;		/* which field in binary config_card we are considering */
dcl  card_name		        char (4);		/* as in mem, iom, etc */
dcl  card_type		        fixed bin;		/* index into card descriptions */
dcl  dont_interpret		        bit (1) aligned;	/* => pretend card is of type USER */
dcl  error_detected		        bit (1) aligned parameter;
dcl  filled_field		        (14) bit (1);	/* => we found a value for corresponding field */
dcl  labeled_field_num	        fixed bin;		/* which we are adding now */
dcl  1 labeled_fields	        aligned,		/* list of the fields that had -labels and their values */
       2 number		        fixed bin,
       2 field		        (16),		/* 14 is really the max */
         3 label		        char (16) var,
         3 value		        char (16) var;
dcl  output_card_num	        fixed bin parameter;	/* for error messages */
dcl  unlabeled_field_num	        fixed bin;		/* which we are adding now */
dcl  1 unlabeled_fields	        aligned,		/* list of fields that had no value */
       2 number		        fixed bin,
       2 value		        (16) char (16) var;

	error_detected = "0"b;
	call separate_config_card_fields (ascii_config_card, unlabeled_fields, labeled_fields);
	if unlabeled_fields.number = 0 then do;
	     call error (No_card_type_specified, No_card_type_specified_text, error_flagged (No_card_type_specified));
	     return;
	end;
	if substr (unlabeled_fields.value (1), 1, 1) = "." then do;
	     dont_interpret = "1"b;			/* .name becomes a user formatted name card */
	     unlabeled_fields.value (1) = substr (unlabeled_fields.value (1), 2);
	     if length (unlabeled_fields.value (1)) < 1 then call error (No_name_follows_dot, No_name_follows_dot_text, error_flagged (No_name_follows_dot));
	end;
	else dont_interpret = "0"b;
	if length (unlabeled_fields.value (1)) > 4 then call error (Card_name_too_long, Card_name_too_long_text, error_flagged (Card_name_too_long));
	card_name = unlabeled_fields.value (1);
	Config_card_name (config_deck_data_$num_described_cards) = card_name;
						/* synthesize, as a last hope, a card type of what the user said */
	if dont_interpret then card_type = config_deck_data_$num_described_cards;
	else
	     do card_type = 1 to config_deck_data_$num_described_cards while (^card_matches ());
	end;
%page;

/* now we actually convert the fields as appropriate */

	binary_card.word = card_name;
	binary_card.data_field (*) = EMPTY_FIELD;
	filled_field (*) = "0"b;
	binary_card.pad1 = "0"b;

	do labeled_field_num = 1 to labeled_fields.number;/* for labeled fields */
	     do binary_field_num = 1 to config_deck_data_$Config_card_num_described_fields (card_type); /* pick up those that are described */
		if ^filled_field (binary_field_num) then
		     if config_deck_data_$Config_card_field_name (card_type, binary_field_num) = labeled_fields.label (labeled_field_num) then do;
						/* we found an unfilled field of desired name */
			call cv_value (labeled_fields.value (labeled_field_num), config_deck_data_$Config_card_field_type (card_type, binary_field_num));
			filled_field (binary_field_num) = "1"b;
			go to next_labeled;
		     end;
	     end;
	     call error (Field_a_not_defined_or_too_many_supplied_for_card, Field_a_not_defined_or_too_many_supplied_for_card_text, error_flagged (Field_a_not_defined_or_too_many_supplied_for_card), labeled_fields.label (labeled_field_num)); /* ran out of fields with known labels */
next_labeled:
	end;

/* consider now the unlabeled fields - fill in missing spaces */
	binary_field_num = 1;
	do unlabeled_field_num = 2 to unlabeled_fields.number;
	     do binary_field_num = binary_field_num to 14 while (filled_field (binary_field_num)); end; /* find an unfilled field */
	     if binary_field_num > 14 then do;
		call error (Too_many_values_specified_for_card, Too_many_values_specified_for_card_text, error_flagged (Too_many_values_specified_for_card)); /* ran off end */
		go to validate_card;
	     end;
	     if binary_field_num <= config_deck_data_$Config_card_num_described_fields (card_type) then
		call cv_value (unlabeled_fields.value (unlabeled_field_num), config_deck_data_$Config_card_field_type (card_type, binary_field_num)); /* known type */
	     else call cv_value (unlabeled_fields.value (unlabeled_field_num), NO_TYPE); /* user supplied type */
	     filled_field (binary_field_num) = "1"b;
	end;
%page;
validate_card:

/* now we know that those fields that were are described have good types
and values are in order.  labeled fields, though, may have skipped a value.
Let's see. */

	do binary_field_num = 1 to 14 while (filled_field (binary_field_num));
	end;					/* field number past last contiguous field in */
	binary_card.n_fields = binary_field_num - 1;
	do binary_field_num = binary_field_num + 1 to 14 while (^filled_field (binary_field_num));
	end;
	if binary_field_num <= 14 then		/* we found a filled field after unfilled fields */
	     call error (Some_fields_were_skipped_in_the_card, Some_fields_were_skipped_in_the_card_text, error_flagged (Some_fields_were_skipped_in_the_card));
	if binary_card.n_fields < config_deck_data_$Config_card_min_specifiable_fields (card_type) then
	     call error (Some_required_fields_were_not_supplied, Some_required_fields_were_not_supplied_text, error_flagged (Some_required_fields_were_not_supplied));
	else if config_deck_data_$Config_card_group_length (card_type) > 0 then
	     if mod (binary_card.n_fields - config_deck_data_$Config_card_min_specifiable_fields (card_type), config_deck_data_$Config_card_group_length (card_type)) ^= 0 then /* card ends in repeating groups but last group was not filled */
		call error (Some_required_fields_were_not_supplied, Some_required_fields_were_not_supplied_text, error_flagged (Some_required_fields_were_not_supplied));

/* we can now perform specific to card validations */
	return;
%page;
card_matches: proc () returns (bit (1) aligned);

/* determine if this card_type describes the given card */

dcl  field		        fixed bin;

	     if card_name ^= Config_card_name (card_type) then return ("0"b);
	     if length (config_deck_data_$Config_card_subname (card_type)) = 0 then return ("1"b); /* card name alone describes */
	     do field = 1 to labeled_fields.number;	/* see if a labeled field is of type and value for this card type's subname */
		if labeled_fields.label (field) = config_deck_data_$Config_card_field_name (card_type, 1) then /* right label */
		     if index (labeled_fields.value (field), config_deck_data_$Config_card_subname (card_type)) = 1 then return ("1"b);
						/* value of labeled field is begun by desired card subname */
		     else return ("0"b);
	     end;
						/* no labeled field matches subname - maybe the second unlabeled one does */
	     if unlabeled_fields.number > 1 then
		if index (unlabeled_fields.value (2), config_deck_data_$Config_card_subname (card_type)) = 1 then return ("1"b);
						/* labeled field does start as desired */
		else return ("0"b);
	     else return ("0"b);
	end;
%page;
cv_value: proc (value, type);

/* we convert the char string to a config card field value, using the type
suggested or guessing one if type = NO_TYPE */
dcl  code			        fixed bin (35);
dcl  numeric		        fixed bin (35) aligned; /* area to form numeric types */
dcl  string		        char (4) aligned;	/* area to form string type */
dcl  type			        bit (2) parameter;	/* type expected */
dcl  value		        char (16) var parameter; /* value to convert */

	     if type = CONFIG_OCTAL_TYPE | type = NO_TYPE then do; /* any numeric value */
		if substr (value, length (value), 1) = "." then do; /* looks like decimal numeric */
		     numeric = cv_dec_check_ (substr (value, 1, length (value) - 1), code);
		     if code ^= 0 then do;
			if type = NO_TYPE then go to is_it_octal; /* give another chance */
			call error (Bad_decimal_value_a, Bad_decimal_value_a_text, error_flagged (Bad_decimal_value_a), value);
			call cv_value (value, NO_TYPE); /* use type it seems to be */
		     end;
		     else do;
			unspec (binary_card.data_field (binary_field_num)) = unspec (numeric);
			binary_card.field_type (binary_field_num) = CONFIG_DECIMAL_TYPE;
		     end;
		end;
		else do;				/* numeric but not decimal => octal */
is_it_octal:
		     numeric = cv_oct_check_ ((value), code);
		     if code ^= 0 then do;
			if type = NO_TYPE then go to is_it_a_char;
			call error (Bad_octal_value_a, Bad_octal_value_a_text, error_flagged (Bad_octal_value_a), value);
			call cv_value (value, NO_TYPE); /* believe user format */
		     end;
		     else do;
			unspec (binary_card.data_field (binary_field_num)) = unspec (numeric);
			binary_card.field_type (binary_field_num) = CONFIG_OCTAL_TYPE;
		     end;
		end;
	     end;
	     else if type = CONFIG_SINGLE_CHAR_TYPE then do;
is_it_a_char:					/* maybe it's a single char field */
		numeric = index ("abcdefgh", value);
		if length (value) ^= 1 | numeric = 0 then do;
		     if type = NO_TYPE then go to is_it_a_string;
		     call error (Value_is_not_a_valid_single_character_a, Value_is_not_a_valid_single_character_a_text, error_flagged (Value_is_not_a_valid_single_character_a), value);
		     call cv_value (value, NO_TYPE);
		end;
		else do;
		     unspec (binary_card.data_field (binary_field_num)) = unspec (numeric);
		     binary_card.field_type (binary_field_num) = CONFIG_SINGLE_CHAR_TYPE;
		end;
	     end;
	     else if type = CONFIG_STRING_TYPE then do;
is_it_a_string:					/* last hope, a char string */
		if length (value) > 4 then
		     call error (String_is_more_than_4_characters_a, String_is_more_than_4_characters_a_text, error_flagged (String_is_more_than_4_characters_a), value);
		string = value;
		unspec (binary_card.data_field (binary_field_num)) = unspec (string);
		binary_card.field_type (binary_field_num) = CONFIG_STRING_TYPE;
	     end;
	     return;
	end;
%page;
error:	proc options (variable);

dcl  arg_list_ptr		        ptr;
dcl  arg1_ptr		        ptr;
dcl  arg3_ptr		        ptr;
dcl  error_flagged		        bit (1) aligned based (arg3_ptr);
dcl  error_num		        fixed bin based (arg1_ptr);
dcl  message_buffer		        char (256);
dcl  message_len		        fixed bin (21);
dcl  message_to_print	        char (message_len) based (addr (message_buffer));

	     call cu_$arg_list_ptr (arg_list_ptr);
	     arg1_ptr = arg_list_ptr -> arg_list.arg_ptrs (1);
	     arg3_ptr = arg_list_ptr -> arg_list.arg_ptrs (3);
	     if ^silent then do;
		call ioa_ ("^/WARNING ^d ON LINE ^d", error_num, output_card_num);
		call ioa_$general_rs (arg_list_ptr, 2, 3, message_buffer, message_len, "0"b, "0"b);
		call ioa_$nnl (message_to_print);
		if ^error_detected then call ioa_ ("SOURCE: ^a", ascii_config_card);
	     end;
	     error_flagged = "1"b;
	     error_detected = "1"b;
	     return;
	end;
%page;
separate_config_card_fields: proc (input_card, a_unlabeled_fields, a_labeled_fields);

/* this proc separates out the fields in the card.  It makes a list of all
fields that had no -label, and separately those that did.  -labels with no
following value are tossed away.  */

dcl  1 a_labeled_fields	        aligned like labeled_fields parameter;
dcl  1 a_unlabeled_fields	        aligned like unlabeled_fields parameter;
dcl  card_pos		        fixed bin;		/* position to end of field we are surveying */
dcl  input_card		        char (256) var parameter;
dcl  label		        char (16) var;	/* extracted from card */
dcl  temp_card		        char (256) init (input_card); /* work area */
dcl  work_card		        char (work_card_len) based (work_card_ptr); /* rest of card to look at */
dcl  work_card_len		        fixed bin;
dcl  work_card_ptr		        ptr;

	     work_card_len = length (input_card);
	     work_card_ptr = addr (temp_card);		/* start looking at whole card */
	     a_unlabeled_fields.number = 0;
	     a_labeled_fields.number = 0;
	     call pass_whitespace;
	     do while (work_card_len > 0);

/* loop, grabbing each field (or pair if labeled) and add to appropriate list */
		card_pos = search (work_card, Whitespace) - 1; /* length of field */
		if card_pos < 0 then card_pos = work_card_len;
		if substr (work_card, 1, 1) = "-" then do; /* labeled field */
		     label = substr (work_card, 1, card_pos);
		     if verify (label, "-0123456789.") = 0 then go to unlabeled;
		     work_card_len = work_card_len - card_pos;
		     work_card_ptr = addcharno (work_card_ptr, card_pos);
		     call pass_whitespace;
		     if work_card_len = 0 then	/* last field on card and no value follows */
			call error (No_value_for_a, No_value_for_a_text, error_flagged (No_value_for_a), label);
		     else do;			/* valid labeled field */
			card_pos = search (work_card, Whitespace) - 1;
			if card_pos < 0 then card_pos = work_card_len;
			if a_labeled_fields.number < dimension (a_labeled_fields.field, 1) then do;
			     a_labeled_fields.number = a_labeled_fields.number + 1;
			     a_labeled_fields.field (a_labeled_fields.number).label = label;
			     a_labeled_fields.field (a_labeled_fields.number).value = substr (work_card, 1, card_pos);
			end;
			else ;			/* no need for error on too many fields - we already
	have too many and someone will notice */
		     end;
		end;
		else do;				/* unlabeled field */
unlabeled:	     if a_unlabeled_fields.number < dimension (a_unlabeled_fields.value, 1) then do;
			a_unlabeled_fields.number = a_unlabeled_fields.number + 1;
			a_unlabeled_fields.value (a_unlabeled_fields.number) = substr (work_card, 1, card_pos);
		     end;
		     else ;			/* no error like above.  By the way, we also don't need to check
	for strings too long for a similar reason */
		end;
		work_card_len = work_card_len - card_pos; /* advance past fields */
		work_card_ptr = addcharno (work_card_ptr, card_pos);
		call pass_whitespace;
	     end;
	     return;

pass_whitespace: proc;

		card_pos = verify (work_card, Whitespace) - 1;
		if card_pos < 0 then card_pos = work_card_len;
		work_card_len = work_card_len - card_pos;
		work_card_ptr = addcharno (work_card_ptr, card_pos);
		card_pos = 0;
		return;
	     end;
	end;
     end;
%page;
card_matches: proc () returns (bit (1) aligned);

/* does card_type describe this card */
	if Config_card_name (config_card_type) ^= config_card.word then return ("0"b); /* card name doesn't even match */
	if config_deck_data_$Config_card_subname (config_card_type) = "" then return ("1"b); /* no subname match needed */
	if index (card_subname, config_deck_data_$Config_card_subname (config_card_type)) = 1 then return ("1"b); /* subname matches desired */
	return ("0"b);
     end;
%page;
convert_to_type: proc (config_card_type);

/* we convert the current config card into ascii_config_card for the given type */
dcl  config_card_type	        fixed bin parameter;	/* index into descriptions */
	ascii_config_card = rtrim (config_card.word) || " ";
	do config_card_field = 1 to config_deck_data_$Config_card_min_specifiable_fields (config_card_type); /* grab these many no matter what they say */
	     ascii_config_card = ascii_config_card || config_deck_data_$Config_card_field_name (config_card_type, config_card_field) || " ";
	     call add_value;
	end;

	do config_card_field = config_deck_data_$Config_card_min_specifiable_fields (config_card_type) + 1 to 14 while (config_card.data_field (config_card_field) ^= EMPTY_FIELD);
						/* convert the rest of the fields until we run out */
	     if config_card_field <= config_deck_data_$Config_card_num_described_fields (config_card_type) then /* we know the name for this field */
		ascii_config_card = ascii_config_card || config_deck_data_$Config_card_field_name (config_card_type, config_card_field) || " ";
						/* unknown field name */
	     call add_value;
	end;
%page;
add_value: proc;

/* convert the value to ascii and add to ascii_config_card */
dcl  numeric		        fixed bin (35) aligned; /* overlay for numeric types */
dcl  string		        char (4) aligned;	/* overlay for string type */
dcl  value		        char (16) var;	/* converted result */
	     if config_card.field_type (config_card_field) = CONFIG_OCTAL_TYPE then do;
		unspec (numeric) = unspec (config_card.data_field (config_card_field));
		call ioa_$rsnnl ("^o", value, (0), numeric);
	     end;
	     else if config_card.field_type (config_card_field) = CONFIG_DECIMAL_TYPE then do;
		unspec (numeric) = unspec (config_card.data_field (config_card_field));
		call ioa_$rsnnl ("^d.", value, (0), numeric);
	     end;
	     else if config_card.field_type (config_card_field) = CONFIG_STRING_TYPE then do;
		unspec (string) = unspec (config_card.data_field (config_card_field));
		value = ltrim (rtrim (string));
	     end;
	     else /* CONFIG_SINGLE_CHAR_TYPE */ do;
		unspec (numeric) = unspec (config_card.data_field (config_card_field));
		if numeric < 1 | numeric > 8 then value = "*";
		else value = substr ("abcdefgh", numeric, 1);
	     end;
	     ascii_config_card = ascii_config_card || value || " ";
	end;
     end;
%page; %include arg_list;
%page; %include config_deck;
%page; %include config_deck_data_;
     end;
