/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* * The entry chain is searched and the VTOC entries for segments and directories are verified or updated.
   *
   * 1.  Update VTOC entry using branch information.
   * 	- UID path	Message.
   * 	- primary name	No message.
   * 	- branch_rp	No message.
   * 	- access class	Message and the branch is set security out-of-service.
   *
   * 2.  Master directory	If the master directory switch in the VTOC doesn't match the one in the branch,
   * 			both switches are corrected using the quota field.
*/

/****^  HISTORY COMMENTS:
  1) change(77-07-01,Barr), approve(), audit(), install():
      Pre-hcom comments.
      Written by S.E. Barr 7/77
      Fixed by BSG 7/11/78 to loop properly if connection failures hit.
      Modified June 1981 by J. Bongiovanni to treat invalid VTOCE index as
       as connection failure
      Modified March 1982 by J. Bongiovanni to fix empty directory bug
      Modified 831111 BIM to protection_audit_ SOOS settings.
      Modified 84-12-05 by EJ Sharpe to use access_audit_ instead of protection_audit_
  2) change(86-06-26,Lippard), approve(86-06-17,MCR7433),
     audit(86-06-26,Hartogs), install(86-07-11,MR12.0-1091):
      Change calling sequence of error message routine.
                                                   END HISTORY COMMENTS */


salv_check_vtoce_: proc (arg_dp, path, delete_connection_failures, print);

/* PARAMETERS */

dcl  arg_dp ptr;					/* ptr to base of directory being checked. */
dcl  path char (*);
dcl  delete_connection_failures bit (1) aligned;
dcl  print entry options (variable);

/* AUTOMATIC */

dcl  acc_class_str char (32) aligned;
dcl  code fixed bin (35);
dcl  connection_failures_occured bit (1) init ("0"b);
dcl 1 event_flags aligned like audit_event_flags;
dcl  next_ptr ptr;					/* for threading */
dcl  i fixed bin;
dcl  level fixed bin;
dcl  lv_p ptr;					/* ptr to logical volume table entry. */
dcl  uid (0:15) bit (36) aligned;
dcl  pvtx fixed bin;
dcl 1 update aligned like salv_update_info;
dcl  name char (32);				/* primary name of entry. */
dcl 1 vtoce_copy aligned like vtoce;
dcl (null, addr, ptr, rel, string) builtin;

/* EXTERNAL */

dcl  get_pvtx entry (bit (36) aligned, fixed bin (35)) returns (fixed bin);
dcl  vtoc_attributes$salv_update entry (bit (36) aligned, bit (36) aligned, fixed bin, ptr, fixed bin (35));
dcl  vtoc_man$get_vtoce entry (bit (36) aligned, fixed bin, fixed bin, bit (3), ptr, fixed bin (35));
dcl  logical_volume_manager$lvtep entry (bit (36) aligned, ptr, fixed bin (35));
dcl  uid_path_util$get entry (ptr, (0:15) bit (36) aligned, fixed bin (35));
dcl  delentry$salv_delete_branch entry (ptr, fixed bin (35));
dcl  access_audit_$log_obj_class entry options (variable);  /* cannot use log_entry_ptr because we don't
	     					want access_audit_ poking around in the directories */
dcl  display_access_class_ entry (bit(72) aligned) returns(char(32) aligned);
dcl  level$get entry () returns (fixed bin);

dcl  access_operations_$fs_obj_set_soos bit (36) aligned ext;
dcl  error_table_$invalid_vtocx fixed bin (35) external;
dcl  error_table_$ai_entry_vtoce_mismatch fixed bin (35) external;

/* CONSTANTS */

dcl  ME char (17) int static options (constant) init ("salv_check_vtoce_");

%page;
	dp = arg_dp;

/* Get the UID path for this directory and add its UID to get the UID path for the branches. */

	level = dir.tree_depth;
	call uid_path_util$get (dp, uid, code);
	if code ^= 0 then do;
	     call print (0, ME, code, "salv_check_vtoce_: getting UID path for ^a", path);
	     return;
	end;
	uid (level) = dir.uid;

/* If the physical volume that holds the segments for this directory is not mounted, then print an error message
   and do not check any segments. */
	call logical_volume_manager$lvtep (dir.sons_lvid, lv_p, code);
	if lv_p = null & (dir.seg_count > 0)
	then call print (4, ME, 0,
	     "Unable to check VTOC entries for segments because the volume is not mounted.  LVID = ^w", dir.sons_lvid);
	vtocep = addr (vtoce_copy);

	next_ptr = null;
	do ep = ptr (dp, dir.entryfrp) repeat next_ptr while (rel (ep));
	     next_ptr = ptr (dp, entry.efrp);

	     if entry.bs & (entry.dirsw | lv_p ^= null) then do;
		name = addr (entry.primary_name) -> names.name;
		string (update.flags) = "0"b;

		pvtx = get_pvtx ((entry.pvid), code);
		if code ^= 0 then call print (4, ME, code, name);
		else do;
		     call vtoc_man$get_vtoce ((entry.pvid), pvtx, (entry.vtocx), "101"b, vtocep, code);

		     if code ^= 0 & code ^= error_table_$invalid_vtocx
			then call print (4, ME, code, name);
		     else do;
			if vtoce.uid ^= entry.uid | code = error_table_$invalid_vtocx
			     then do;		/* Connection failure */
			     connection_failures_occured = "1"b; /* for later message */
			     if delete_connection_failures then do;
				call print (4, ME, 0, "Deleting ^a due to connection failure.", name);
				call delentry$salv_delete_branch (ep, code);
				if code ^= 0 then call print (4, ME, code, "Error deleting branch for ^a.", name);
			     end;
			     else call print (4, ME, 0, "Connection failure for ^a.", name);
			end;
			else do;

/* UID path */
			     do i = 0 to 15;
				if vtoce.uid_path (i) ^= uid (i) then do;
				     call print (4, ME, 0, "UID path at level ^d changed from ^w to ^w for ^a",
					i, vtoce.uid_path (i), uid (i), name);
				     update.set_uid_path = "1"b;
				end;
			     end;
			     if update.set_uid_path then update.uid_path (*) = uid (*);

/* primary name */
			     if vtoce.primary_name ^= name then do;
				update.primary_name = name;
				update.set_primary_name = "1"b;
			     end;

/* Master directory has non-zero quota. */
			     if vtoce.master_dir ^= entry.master_dir then do;
				entry.master_dir = (vtoce.quota (0) > 0);
				if vtoce.master_dir ^= entry.master_dir then do;
				     update.set_master_dir = "1"b;
				     update.master_dir = entry.master_dir;
				end;
				call print (4, ME, 0, "Set master directory switch ^[on^;off^] for ^a",
				     entry.master_dir, name);
			     end;

/* If the access class fields do not match, the branch is set security out-of-service. */
			     if vtoce.access_class ^= entry.access_class then do;
				string(event_flags) = ""b;
				event_flags.special_op = "1"b;
				event_flags.grant = "1"b;
				/* can't tell if this is a normal user who encountered a
				bad directory or a system salvager, we'll leave the priv_op
				flag off */
				acc_class_str = display_access_class_ (vtoce.access_class);
				call access_audit_$log_obj_class ("salv_check_vtoce_", level$get(),
				     string(event_flags), access_operations_$fs_obj_set_soos,
				     ep->entry.access_class, path, error_table_$ai_entry_vtoce_mismatch,
				     null(), 0, "vtoce class is ^a", acc_class_str);
				call print (4, ME, 0,
				     "^a set security out-of-service: vtoce access = ^w and entry access class = ^w",
				     name, vtoce.access_class, entry.access_class);
				entry.security_oosw = "1"b;
			     end;

/* Update VTOC entry, if necessary. */
			     if string (update.flags) then do;
				call vtoc_attributes$salv_update ((entry.uid), (entry.pvid), (entry.vtocx),
				     addr (update), code);
				if code ^= 0 then call print (4, ME, code, name);
			     end;
			end;
		     end;
		end;
	     end;
	end;


	if connection_failures_occured & ^delete_connection_failures
	     then call print (0, ME, 0, "Connection failures detected in ^a.", path);

	return;

/*  */
%include access_audit_eventflags;
%include dir_header;
%include dir_entry;
%include dir_name;
%include vtoce_salv_update;
%include vtoce;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   AUDIT (salv_check_vtoce_): GRANTED modification of security out-of-service ADDED_INFO

   S:	$access_audit

   T:	$run

   M:	Security out-of-service switch was set because vtoce access class did
not match the entry access class for the specified
file system entry.

   A:	$inform_ssa


   Message:
   salv_check_vtoce_: ERROR_MESSAGE.

   S:     $log

   T:     Salvaging

   M:     An error occurred while checking VTOCEs.

   A:     $inform

   END MESSAGE DOCUMENTATION */

 
     end salv_check_vtoce_;
