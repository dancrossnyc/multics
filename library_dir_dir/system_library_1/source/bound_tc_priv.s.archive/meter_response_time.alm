" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************
	name	meter_response_time

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	subroutine to monitor response times of interactive processes
"
"	The state of a process is defined by a finite-state automaton
"	representing that process.  This finite-state automaton is
"	viewed as follows:
"
"
"                                +------------------+    
"                                |                  |
"        		             |  Processing      |
"     		             |	            |
"     		             +------------------+
"                  call ring-0 tty   |          ^
"          for next interaction      |          |  return from ring-0 tty with 
"                                    V          |     interaction
"         award eligibility      +------------------+
"              +-------------->  |                  |
"              |                 |     Other        |
"     +------------------+       |                  |   
"     |                  |       +------------------+
"     |     Queued       |         |        ^   
"     |                  |         |block   |
"     +------------------+         |        | non-tty wakeup
"              ^                   V        |
"              |          +------------------+
"              |          |                  |
"              +----------|     Blocked      |
"          tty wakeup     |                  |
"     		      +------------------+
"     
"	This subroutine implements the finite-state automaton described
"	for each process.  Transitions between states are defined by calls
"	to the subroutine.  There are two calling sequences, as follows:
"
"	External to bound_traffic_control_priv:
"
"	     call meter_response_time (processid, transition)
"
"
"	Internal to bound_traffic_control_priv:
"
"		tsx7	meter_response_time$tc
"
"		     pr2 -> apte for process
"		     pr3 -> base of tc_data$
"		     qreg = transition number
"
"	Written April 1981 by John J. Bongiovanni
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"


" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	Table to drive finite-state automaton
"
"	transition_table implements the following finite-state
"	automaton (ref. MTB-489):
"
"          
"                                   Transitions
"          
"          State                1   2   3   4   5   6   
"                             +---+---+---+---+---+---+
"          Initial (I)        | I | I | P | I | I | Q |
"                             +---+---+---+---+---+---+
"          Blocked (B)        | I | I | I | I | O | Q |
"                             +---+---+---+---+---+---+
"          Queued (Q)         | O | I | I | I | Q | I |
"                             +---+---+---+---+---+---+
"          Other (O)          | O | O | P | B | O | O |
"                             +---+---+---+---+---+---+
"          Processing (P)     | P | O | I | B | P | I |
"                             +---+---+---+---+---+---+
"          
"          
"          
"                    Transitions:
"          
"          	   1 - Award eligibility
"          
"          	   2 - Call ring-0 tty for next interaction
"          
"          	   3 - Return from ring-0 tty with next interaction
"          
"          	   4 - Block
"          
"          	   5 - Non-tty wakeup
"          
"          	   6 - Tty wakeup (input)
"          
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

"

"	Definition of States

	equ	initial,0
	equ	blocked,1
	equ	queued,2
	equ	other,3
	equ	processing,4
	equ	max_response_state,4
	
"

"	Table definition macros

	equ	state_element_words,2
	equ	state_elements_per_word,4
	equ	state_elements_per_entry,state_element_words*state_elements_per_word
	equ	state_entry_shift,1
	equ	state_element_shift,2
	
	set	current_state_element,0

	macro	state_element
	maclist	off save
	use	trans
	org	current_state_element
	dup	state_element_words
	dec	0
	dupend
	maclist	object
	org	current_state_element
&R&(&=&x,1&[          vfd       &;,&]o9/&i&)
	set	current_state_element,current_state_element+state_element_words
	maclist	restore
	use	.text.	
	&end
	
"
	use	trans
	even
transition_table:
	use	.text.

"	Initial (State 0)
	state_element	initial,initial,initial,processing,initial,initial,queued
"	Blocked (State 1)
	state_element	initial,initial,initial,initial,initial,other,queued
"	Queued (State 2)
	state_element	initial,other,initial,initial,initial,queued,initial
"	Other (State 3)
	state_element	initial,other,other,processing,blocked,other,other
"	Processing (State 4)
	state_element	initial,processing,other,initial,blocked,processing,initial

"
	join	/text/trans

	
trans_shift_table:
	dec	27,18,9,0
trans_mask_table:
	oct	777000000000
	oct	000777000000
	oct	000000777000
	oct	000000000777

"	macro to prepare for the day ...
	macro	read_clock
	rccl	sys_info$clock_,*
	&end
	

"

	entry	meter_response_time
	segdef	tc

"
	
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	Entry from outside of bound_traffic_control_priv
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

meter_response_time:

	push
	epbp3	tc_data$
	lda	pr0|2,*			processid
	epp2	pr3|0,au			pr2 -> apte
	cmpa	pr2|apte.processid		can this possibly be right?
	tnz	return			no way
	ldq	pr0|4,*			transition number
	tsx7	tc
return:	return

"

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	Entry from inside of bound_traffic_control_priv
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+><+><+><+><+>

tc:	stq	pre_temp			transition number
	read_clock
	staq	pre_time

"	Validate current state and transition number.  Punt if either is
"	invalid by setting state to 0 (initial) and metering.
"	Find array element in transition table corresponding to
"	(current state, transition number)
	
	lda	pr2|apte.current_response_state
	tmi	invalid
	cmpa	max_response_state,dl
	tpnz	invalid
	eax1	0,al			x1=current state number
	als	state_entry_shift		al=offset into trans table this state
	sta	pre_temp+1
	lda	pre_temp			transition number
	tmoz	invalid
	cmpa	MAX_TRANSITION,dl		
	tpnz	invalid
	eax6	0,al			x6=transition number
	ldq	0,dl
	lrl	state_element_shift		al=word offset into array from state
	qrl	18-state_element_shift	qu=char offset into word
	ada	pre_temp+1		al=word offset into array
	lda	transition_table,al		array word
	ana	trans_mask_table,qu		mask out proper character
	lxl0	trans_shift_table,qu	x0=shift count
	arl	0,x0			areg=new state
	cmpa	pr2|apte.current_response_state has state changed
	tze	meter_and_exit		no
	als	0			check for invalid transition
	tze	invalid			invalid
	ldx0	pr2|apte.wct_index
	epp0	pr3|0,x0			pr0 -> wcte this process
	eax0	0,al			x0=new state
"
"	Do special things based on previous state

	ldaq	pre_time
	sbaq	pr2|apte.last_response_state_time  aq=delta time in state
	tra	prev_state_actions,x1*
prev_state_actions:
	arg	check_next		initial
	arg	update_think_time		blocked
	arg	update_queue_time		queued
	arg	check_next		other
	arg	update_response_time	processing

update_think_time:
	cmpx6	TTY_WAKEUP,du		was the blocked time think time
	tnz	check_next		no
	aos	pr0|wcte.number_thinks	count number times thinking
	adaq	pr0|wcte.total_think_time	and update total time
	staq	pr0|wcte.total_think_time
	tra	check_next

update_queue_time:
	aos	pr0|wcte.number_queues	update count of queues
	adaq	pr0|wcte.total_queue_time	and total time queued
	staq	pr0|wcte.total_queue_time
	tra	check_next


update_response_time:
	cmpx6	CALL_RING_0_TTY,du		was this the end of an interaction
	tnz	check_next		no
	staq	pre_temp+2		save response time
	ldaq	pre_time			clock value on entry
	sbaq	pds$cpu_time		total cpu time
	sbaq	pds$virtual_delta		virtual cpu time
	sbaq	pr2|apte.begin_interaction_vcpu	qreg=vcpu this interaction

"	Find proper bucket for this interaction.  Bucket boundaries (in terms
"	of vcpu time) are in the array tc_data$vcpu_response_bounds

	lda	pr3|vcpu_response_bounds_size	al=highest array offset
find_vcpu_bucket:
	cmpq	pr3|vcpu_response_bounds-1,al	in this bucket
	tpl	found_vcpu_bucket		yes
	sba	1,dl
	tpnz	find_vcpu_bucket		fall through if lowest bucket

"	Update statistics in APTE and WCTE

found_vcpu_bucket: 
	aos	pr0|wcte.number_processing,al	count interactions
	aos	pr2|apte.number_processing
	als	1			x2 (offset for double-word array)
	eax1	0,al			x0 = offset into double-word array
	lda	0,dl			aq = vcpu this interaction
	adaq	pr0|wcte.total_vcpu_time,x1
	staq	pr0|wcte.total_vcpu_time,x1
	ldaq	pre_temp+2		aq = response time this interaction
	adaq	pr0|wcte.total_processing_time,x1
	staq	pr0|wcte.total_processing_time,x1
	ldaq	pre_temp+2		aq = response time this interaction
	adaq	pr2|apte.total_processing_time
	staq	pr2|apte.total_processing_time
	

"
"	Do special things based on new state

check_next:
	tra	next_state_actions,x0*
next_state_actions:
	arg	state_update		initial
	arg	state_update		blocked
	arg	state_update		queued
	arg	state_update		other
	arg	mark_processing		processing

"	Note virtual cpu time at begin of interaction
"	We depend on running in the address space of the process
"	specified, which will be true since the transition is
"	a return from within that process
	
mark_processing:
	ldaq	pre_time
	sbaq	pds$cpu_time		real cpu time
	sbaq	pds$virtual_delta		virtual cpu time
	staq	pr2|apte.begin_interaction_vcpu

"
"	Update state, meter, and return

state_update:
	sxl0	pr2|apte.current_response_state
	ldaq	pre_time			clock at entry
	staq	pr2|apte.last_response_state_time
meter_and_exit: 
	read_clock
	sbaq	pre_time			metering overhead
	adaq	pr3|meter_response_time_overhead
	staq	pr3|meter_response_time_overhead
	aos	pr3|meter_response_time_calls
	tra	0,x7

invalid:	
	ldx0	initial,du		reset state
	aos	pr3|meter_response_time_invalid	count these
	tra	state_update
	
	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><-><-><-><-><->
"	
	include	apte

          include   pxss_page_stack

	include	response_transitions

	include	tc_meters

	include	wcte
		
	end
	