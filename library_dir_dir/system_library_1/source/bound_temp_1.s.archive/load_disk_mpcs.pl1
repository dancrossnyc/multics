/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */

/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */

load_disk_mpcs: proc;

/* get firmware into (non-bootload) disk mpcs
Keith Loepere, March 1984 */
/* Modified 10/84 by Allen Ball to check all channels before deciding an mpc is
dead.  Also to handle -chnl option of bce_fwload. */
/* Modified 11/84 by Keith Loepere to understand controllers with all deleted channels. */


/****^  HISTORY COMMENTS:
  1) change(86-04-22,Farley), approve(86-07-18,MCR7439),
     audit(86-08-18,Fawcett), install(86-10-20,MR12.0-1189):
     Changed to initialize all possible ss_info.flags.
                                                   END HISTORY COMMENTS */


dcl  addr				builtin;
dcl  bce_command_processor_		entry (char (*), entry (ptr, char (*), fixed bin (35)) returns (entry), ptr, fixed bin (35));
dcl  bce_fwload			entry (ptr);
dcl  bce_query			entry options (variable);
dcl  code				fixed bin (35);
dcl  config_$find			entry (char (4) aligned, ptr);
dcl  dimension			builtin;
dcl  divide			builtin;
dcl  error_table_$io_not_configured	fixed bin (35) ext;
dcl  hc_load_mpc$test_controller	entry (char (8) aligned, fixed bin (35));
dcl  io_chnl_util$iom_to_name		entry (fixed bin (3), fixed bin (7), char (8) aligned, fixed bin (35));
dcl  ioa_				entry () options (variable);
dcl  max				builtin;
dcl  me				char (14) init ("load_disk_mpcs") static options (constant);
dcl  mpc_chanid			char (8) aligned;
dcl  mpc_names			char (128) var;
dcl  1 my_ss_info			aligned like ss_info;
dcl  line				char (80);
dcl  null				builtin;
dcl  rtrim			builtin;
dcl  string			builtin;
dcl  substr			builtin;
dcl  syserr			entry options (variable);
%page;
	ss_info_ptr = addr (my_ss_info);
	ss_info.request_table_ptr = null;
	ss_info.abort_label = RE_ASK;
	ss_info.name = me;
	ss_info.arg_list_ptr = null;
	ss_info.info_ptr = null;
	string (ss_info.flags) = ""b;
	ss_info.flags.forbid_semicolons = "1"b;

RE_CHECK:
	call check_mpcs;
	if mpc_names = "" then return;

RE_ASK:
	call bce_query (line, "Enter disk mpc names to be loaded,
or ""none"" or ""abort"" or ""all"": ");

	if line = "none" then return;
	else if line = "abort" then call syserr (CRASH, "load_disk_mpcs: Operator aborted disk MPC loading.");
	else if line = "all" then line = "load " || mpc_names; /* command of all names */
	else line = "load " || rtrim (line);		/* make it a command */
	call bce_command_processor_ (line, command_finder, ss_info_ptr, code);
	if code ^= 0 then do;
	     if code ^= 100 then call ioa_ ("Bad syntax in line.");
	     go to RE_ASK;
	end;

	go to RE_CHECK;
%page;
command_finder: proc (Info_ptr, command, code) returns (entry);

dcl  Info_ptr			pointer;
dcl  command			char (*);
dcl  code				fixed bin (35);

	code = 0;
	return (bce_fwload);
     end;
%page;
check_mpcs: proc;

dcl  all_channels_deleted		bit (1);
dcl  mpc_card_array_index		fixed bin;
dcl  running			bit (1);

/* Generate list of names of dead mpcs. */

	mpc_names = "";
	mpc_cardp = null;
	call config_$find (MPC_CARD_WORD, mpc_cardp);
	do while (mpc_cardp ^= null);
	     if substr (mpc_card.name, 1, 3) = "msp" then do;
		running = "0"b;
		all_channels_deleted = "1"b;		/* if all channels get io_not_configured then mpc is not connected anyway */
		do mpc_card_array_index = 1 to dimension (mpc_card_array.port, 1) while (^running);
		     call io_chnl_util$iom_to_name ((mpc_card_array.port.iom (mpc_card_array_index)), (mpc_card_array.port.chan (mpc_card_array_index)), mpc_chanid, code);
		     if code = 0 then do;
			call hc_load_mpc$test_controller (mpc_chanid, code);
			if code = 0 then running = "1"b;
			if code ^= error_table_$io_not_configured then all_channels_deleted = "0"b;
		     end;
		end;
		if ^all_channels_deleted then
		     if ^running then mpc_names = mpc_names || mpc_card.name || " "; /* add to list needing firmware */
	     end;
	     call config_$find (MPC_CARD_WORD, mpc_cardp);
	end;
	if mpc_names ^= "" then call syserr (ANNOUNCE, "load_disk_mpcs: Disk mpc(s): ^a
appear not to be operating.", mpc_names);
	return;
     end;
%page; %include bce_subsystem_info_;
%page; %include config_mpc_card;
%page; %include syserr_constants;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   load_disk_mpcs: Disk mpc(s): NAMES
   appear not to be operating.

   S: $announce

   T: $init

   M: The named disk mpcs, listed in the config deck, did not respond to
   a "request status" control order.  They are believed not to be operating; 
   in particular, firmware should probably be loaded into them.

   Message:
   load_disk_mpcs: Operator aborted disk MPC loading.

   S: $crash

   T: $init

   M: The operator answered "abort" when requested to supply disk mpcs to be
   loaded.  This will cause a return to the previous bce command level.

   END MESSAGE DOCUMENTATION */

     end;
