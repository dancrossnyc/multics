/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-05-13,GJohnson), approve(86-05-13,MCR7387),
     audit(86-05-13,Martinson), install(86-05-14,MR12.0-1056):
     Correct error message documentation.
  2) change(87-10-19,Farley), approve(88-02-26,MCR7795),
     audit(88-03-03,Fawcett), install(88-03-15,MR12.2-1035):
     Changed early setting of sys_info$time_zone and constant to a default
     setting from the MST in sys_boot_info$default_time_zone and constant.
  3) change(2015-11-26,Swenson), approve(2015-11-26,MCR10001):
     Updated to warn, not crash, on startup if clock appears fast or slow, due to
     emulator speed inconsistencies.
                                                   END HISTORY COMMENTS */


/* format: style2 */

scs_and_clock_init:
     procedure ();

/* *	SCS_AND_CLOCK_INIT
   *
   *	Initialize preliminary scs variables and the Calendar Clock Software.
   *
  *	Modified 11/73, RE Mullen, converted to v2pl1
   *	Modified 02/02/76, Noel I. Morris, for reasons unknown.
  *	Modified 11/28/80 W. Olin Sibert, to check operation of clock (code moved
   *	   from init_pvt), and crash if no CLOK card.
   *	Modified 01/07/81, WOS, to move some initializations from scs.cds to here.
   Modified 9/03/80 by J. A. Bush for the DPS8/70M CPU
   Modified January 1981 by  C. Hornig to init proc. start int. cell.
   Modified January 1982 by J. A. Bush to set RSW2 compare masks for cpu type
   and DPS8M interlace info bits
   Modified April 1982 by J. Bongiovanni to read all switches (0 through 4)
   Cleaned up in '82 for bootload Multics.
   Modified September 1983, Keith Loepere to make early scas paged.
   Modified August 1984, JAFalksen to initialize time_defaults
   Modified January 1985, Keith Loepere, to move date/time powerup into paged
	initialization.
   */

/* Variables */

	dcl     base		 fixed bin (17);	/* base address of controller */
	dcl     early_call		 bit (1) aligned;	/* Whether this is the first time */
	dcl     enabled		 bit (1) aligned;	/* processor port enabled bit */
	dcl     idx		 fixed bin (3);	/* iteration variable */
	dcl     interlace		 fixed bin (3);	/* memory interlace type */
	dcl     lang_index		 fixed bin;	/* for looking up time zone */
	dcl     malfunction		 char (40) varying; /* A complaint about the clock */
          dcl     malfunction_syserr     fixed bin;         /* Whether to crash on clock malfunction */
	dcl     max_scu		 fixed bin;	/* max number of SCUs - 1 -- depends on sys type */
	dcl     new_scas_sdw	 fixed bin (71);
	dcl     old_scas_sdw	 fixed bin (71);
	dcl     port		 fixed bin (3);	/* bootload processor port */
	dcl     size		 fixed bin (17);	/* size of controller */
	dcl     scs_size		 fixed bin;
	dcl     1 sdwi		 aligned like sdw_info;
	dcl     time_later		 fixed bin (71);	/* For checking the clock */
	dcl     time_now		 fixed bin (71);	/* For checking the clock */
	dcl     zone_index		 fixed bin;	/* for looking up time zone */

/* Based */

	dcl     based_scs		 (scs_size) bit (36) aligned based;
						/* Overlay for clearing */

/* Entries */

	dcl     absadr		 entry (ptr, fixed bin (35)) returns (fixed bin (26));
	dcl     config_$find	 entry (char (4) aligned, ptr);
	dcl     date_time_$set_time_defaults
				 entry;
	dcl     mask_instruction$ldaq	 entry returns (bit (36) aligned);
	dcl     mask_instruction$staq	 entry returns (bit (36) aligned);
	dcl     pmut$rsw		 entry (fixed bin, bit (36) aligned);
	dcl     pmut$swap_sdw	 entry (pointer, pointer);
	dcl     prds_init		 entry (ptr, fixed bin (3), ptr);
	dcl     ptw_util_$make_core	 entry (ptr, fixed bin (26));
	dcl     rsw_util$port_info	 entry (fixed bin (3), bit (1) aligned, fixed bin (17), fixed bin (17),
				 fixed bin (3));
	dcl     scr_util$read_cfg	 entry (fixed bin (3));
	dcl     sdw_util_$construct	 entry (pointer, pointer);
	dcl     syserr		 entry options (variable);

/* External */

	dcl     dseg$		 (0:1023) fixed bin (71) external static;
	dcl     prds$		 fixed bin external static;
	dcl     prds$simulated_mask	 fixed bin (71) external static;
	dcl     scas$		 fixed bin external static;
	dcl     scs$end_of_scs	 fixed bin external static;
	dcl     scs$start_of_scs	 fixed bin external static;
	dcl     sys_boot_info$default_time_zone
				 char (4) unaligned external static;
	dcl     sys_boot_info$default_time_zone_delta
				 fixed bin (71) external static;
	dcl     sys_info$clock_	 bit (36) aligned external static;
	dcl     sys_info$time_correction_constant
				 fixed bin (71) external static;
	dcl     sys_info$time_zone	 char (4) aligned external static;

/* Constants */

	dcl     WHOAMI		 char (32) internal static init ("scs_and_clock_init");

/* Misc */

	dcl     (addr, baseno, binary, bit, clock, length, null, unspec, wordno)
				 builtin;
%page;

/* This entrypoint does no less than the normal entrypoint -- in fact, a bit */
/* more. It fills in the port on the CPU config card. */

scs_and_clock_init$early:
     entry ();

	early_call = "1"b;
	goto INIT_COMMON;


scs_and_clock_init$normal:
     entry ();

	early_call = "0"b;
	goto INIT_COMMON;

INIT_COMMON:					/* First, initialize data in the SCS. This used to be done by scs.cds
   when the segment was created, but now that it gets created more than once,
   this data must be set each time.
   */
	scs_size = wordno (addr (scs$end_of_scs)) - wordno (addr (scs$start_of_scs)) + 1;
	unspec (addr (scs$start_of_scs) -> based_scs) = ""b;
						/* Clear it out */

	scs$idle_aptep (*) = null ();

	do port = 0 to 7;
	     scs$port_addressing_word (port) = bit (binary (port, 3));
	end;
%page;

/* Next, figure out some things about our CPU, necessarily the bootload CPU */
/* Read switches 1 and 2 into the scs safestore area, to be later used by scas_init */

	call pmut$rsw (0, scs$processor_switch_data (0));
	call pmut$rsw (1, scs$processor_switch_data (1));
	call pmut$rsw (2, scs$processor_switch_data (2));

/* Get our processor tag (necessarily the bootload CPU) from switches. */

	rswp = addr (scs$processor_switch_data (2));	/* Set pointer to info. */
	scs$bos_processor_tag = dps_rsw_2.cpu_num;	/* Remember our CPU tag. */
	if dps8_rsw_2.cpu_type > 0
	then /* if DPS8 CPU... */
	     max_scu = 3;				/* can be only 4 scus */
	else do;					/* DPS or L68 CPU */
		max_scu = 7;			/* 8 possible SCUs */

/* read switches 3 and 4 if DPS or L68 CPU */

		call pmut$rsw (3, scs$processor_switch_data (3));
		call pmut$rsw (4, scs$processor_switch_data (4));
	     end;

	if early_call
	then do;					/* Make a CPU card */
		cpu_cardp = null ();
		call config_$find (CPU_CARD_WORD, cpu_cardp);
						/* Guaranteed to be there */

		cpu_card.tag = scs$bos_processor_tag + 1;
	     end;

	call prds_init (addr (prds$), scs$bos_processor_tag, null ());
						/* Fill in variables in the prds, too. */
	rswp = addr (scs$processor_switch_mask (2));	/* Get pointer to mask for checking processor switches. */
	dps_rsw_2.fault_base = "1111111"b;		/* Compare the fault base switches. */
	dps_rsw_2.cpu_num = 7;			/* Compare the processor number. */
	dps_rsw_2.cpu_type = 3;			/* Compare cpu types */
	dps8_rsw_2.interlace_info (*) = "1"b;		/* and dps8 interlace bits */
%page;

/* Initialize controller mask instructions and pointers. */

	do port = 0 to 7;				/* Set up dummy read and set mask instructions. */
	     scs$read_mask (port) = mask_instruction$ldaq ();
	     scs$set_mask (port) = mask_instruction$staq ();
	     scs$mask_ptr (port) = addr (prds$simulated_mask);
						/* Set pointer to dummy mask. */
	end;					/* Set up processor start interrupt for cell 0 */

	scs$processor_start_int_no = 0;
	scs$processor_start_pattern = "400000000000"b3;
	scs$processor_start_mask = "400000000000000000000000"b3;

	scs$number_of_masks = 3;


/* Find the low-order system controller. */

	do port = 0 to max_scu;			/* Search for low-order controller. */
	     call rsw_util$port_info (port, enabled, base, size, interlace);
						/* Get info for this processor port. */
	     if enabled & (base = 0)
	     then do;				/* If this is low-order port ... */
		     scs$interrupt_controller = port;	/* Save the port number. */
		     sys_info$clock_ = bit (scs$interrupt_controller);
						/* Set indirect word for reading clock. */
		     goto FOUND_LOW_SCU;		/* Now we can use the clock builtin with impunity, */
		end;				/* since sys_info contains appropriate defaults for */
	end;					/* time_correction_constant (zero, that is) */

	call syserr (CRASH, "^a: No SCU port is assigned address zero.", WHOAMI);

FOUND_LOW_SCU:
	if early_call
	then do;					/* Fix up the MEM card */

/* We must make the SCAS pseudo-operative in order to be able to call scr_util 
   to find out about ports. To this end, we make its SDW temporarily describe 
   the first (max_scu + 1) pages of memory, by simply constructing an SDW for 
   it. */

		unspec (sdwi) = ""b;
		sdwi.flags.paged = "1"b;
		sdwi.size = 1024 * (max_scu + 1);
		sdwi.read = "1"b;
		sdwi.write = "1"b;
		sdwi.address = absadr (addr (scs$scas_page_table), (0));
		do idx = 0 to max_scu;
		     call ptw_util_$make_core (addr (scs$scas_page_table (idx)), idx * 1024);
		end;
		call sdw_util_$construct (addr (new_scas_sdw), addr (sdwi));

		old_scas_sdw = dseg$ (binary (baseno (addr (scas$)), 18));
		call pmut$swap_sdw (addr (scas$), addr (new_scas_sdw));

		mem_cardp = null ();
		call config_$find (MEM_CARD_WORD, mem_cardp);
						/* Guaranteed to be there */
		mem_card.tag = 1 + port;

		call scr_util$read_cfg (port);	/* Initialize its info */
		cpu_card.port = scs$controller_data (port).mask_assignment (1);

		unspec (scs$controller_data (port)) = ""b;
						/* Clear it out to avoid confusing */
		unspec (scs$cfg_data (port)) = ""b;	/* scas_init later on */

		call pmut$swap_sdw (addr (scas$), addr (old_scas_sdw));
						/* Restore the old SDW */
	     end;
%page;
	if sys_info$collection_1_phase = SERVICE_INITIALIZATION
	then do;
		time_now = clock ();		/* Prepare to see whether the clock is working */
		do idx = 1 to 10 while (7 ^= 3);	/* Waste a few microseconds */
		end;

		time_later = clock ();

		malfunction = "";			/* Figure out what to say about it */
		malfunction_syserr = ANNOUNCE;	/* Assume no crash */
		if time_later < time_now
		then do;
		     malfunction = "is running backwards!";
		     malfunction_syserr = CRASH;
		end;
		else if time_later = time_now
		then do;
		     malfunction = "is stopped.";
		     malfunction_syserr = CRASH;
		end;
		else if time_later < (time_now + 10)
		then /* Must take at least ten microseconds */
		     malfunction = "is running too slowly.";
		else if time_later > (time_now + 1000)
		then /* And not more than 1000 */
		     malfunction = "is running too fast.";

/*
		if length (malfunction) > 0
		then call syserr (malfunction_syserr, "^a: SCU clock on port ^o ^a.", WHOAMI, scs$interrupt_controller,
			malfunction);
*/
	     end;

/* Set up the clock with default data.  The correct time zone gets set later. */

	sys_info$time_zone = sys_boot_info$default_time_zone;
	sys_info$time_correction_constant = sys_boot_info$default_time_zone_delta;

	return;					/* init_clocks will later set all the clocks */
%page;
date_time:
     entry;

/* set up the date time software. */


/* Now set up the rest of the info for clock reading */

	clok_cardp = null ();
	call config_$find (CLOK_CARD_WORD, clok_cardp);	/* Look for CLOK config card. */
	if clok_cardp = null ()
	then if sys_info$collection_1_phase = SERVICE_INITIALIZATION
	     then call syserr (CRASH, "^a: No CLOK card.", WHOAMI);
	     else do;
		     sys_info$time_zone = sys_boot_info$default_time_zone;
		     sys_info$time_correction_constant = sys_boot_info$default_time_zone_delta;
		end;
	else do;
		sys_info$time_zone = clok_card.zone;	/* use values from config card */
		do lang_index = 1 to ti_zone.number_lang;
		     do zone_index = 1 to ti_zone.number_zone;
			if ti_zone.short (lang_index, zone_index) = clok_card.zone
			then go to found_zone;
		     end;
		end;
		call syserr (CRASH, "^a: The zone on the CLOK card is not in time_info_.", WHOAMI);
found_zone:
		sys_info$time_correction_constant = ti_zone.delta (lang_index, zone_index);
	     end;

	call date_time_$set_time_defaults;		/* power up! */
	return;

/* format: off */
%page; %include collection_1_phases;
%page; %include config_clok_card;
%page; %include config_cpu_card;
%page; %include config_mem_card;
%page; %include rsw;
%page; %include scs;
%page; %include sdw_info;
%page; %include syserr_constants;
%page; %include time_names;
/* format: on */

/* BEGIN MESSAGE DOCUMENTATION

Message:
scs_and_clock_init: No SCU port is assigned address zero.

S:        $crash

T:        $init

M:        None of the system controllers in the config deck appear
to have a base address of zero.

A:        Check the config deck and bootload processor port assignment
and address switches.


Message:
scs_and_clock_init: SCU clock on port NUMBER MALFUNCTION.

S:        $info

T:        $init

M:        The calendar clock in the bootload SCU seems to be
malfunctioning, as specified by MALFUNCTION.

A:        Fix the SCU, or configure another SCU as low order.

Message:
scs_and_clock_init: No CLOK card.

S:        $crash

T:        $init

M:        No CLOK card was found in the config deck. One is required.

A:        Add a CLOK card to the config deck.

Message:
scs_and_clock_init: The zone on the CLOK card is not in time_info_.

S:        $crash

T:        $init

M:        The zone named on the CLOK card is not found in time_info_, the
system's time information database.  The system cannot run
unless a known zone is specified.

A:        Update the CLOK card so that it contains a proper zone name.  If
the zone you need is not known to the system, time_info_.cds
will have to be updated, a new system tape generated, and then
booting from that tape.  time_info_ contains at least 1 name for
each hour around the world.  You may select a named zone near
the one you need, just to get the system up to be able to change
time_info_.
  
END MESSAGE DOCUMENTATION */

     end scs_and_clock_init;
