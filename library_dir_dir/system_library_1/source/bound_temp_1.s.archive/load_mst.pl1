/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-06-05,GJohnson), approve(86-06-05,MCR7387),
     audit(86-06-10,Martinson), install(86-07-11,MR12.0-1091):
     Correct error message documentation.
                                                   END HISTORY COMMENTS */


load_mst: proc;

/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */

/* This program reads in collection 1.2 and takes the segments called
foo.ascii and puts them into the bootload file system.  Collection 1.5 is
read in and built into the address space.  Collections 2.0 and
3.0 are then read into the mst area of the bce partition for warm boots. */

/* Initially code by Keith Loepere April Fools Day 1983.  (That was a Friday).
Modified by Keith Loepere, October 1983 for collection 2 and 3 reading to disk.
Modified by Keith Loepere, July 1984 to set sentinel in bkpt_page.
Modified by Keith Loepere, January 1985, for allow permanent collection 1.5 segs. */

dcl  addr				builtin;
dcl  addrel			builtin;
dcl  ai_linkage$			external static;
dcl  as_linkage$			external static;	/* combined linkage segments */
dcl  baseptr			builtin;
dcl  bce_abs_seg$add		entry (fixed bin (15));
dcl  1 bce_command_seg_info		aligned static,	/* description of bce commands on disk 
	- a call to init_commands threads these into the address space */
       2 pre_linked			bit (1) aligned,	/* else must pre-link at init_commands time */
       2 number			fixed bin init (0),
       2 entries			(100),
         3 segnum			fixed bin (15),
         3 starting_record		fixed bin (18),	/* on disk */
         3 length			fixed bin,	/* in pages */
         3 permanent		bit (1) aligned;	/* copy into perm seg */
dcl  bin				builtin;
dcl  bit				builtin;
dcl  bootload_fs_$flush_sys		entry;
dcl  bootload_fs_$put_ptr		entry (char (*), fixed bin (21), bit (1) aligned, ptr, fixed bin (35));
dcl  code				fixed bin (35);
dcl  1 control_word			aligned based,	/* MST control word */
     ( 2 type			fixed bin (17),	/* control word type */
       2 count			fixed bin (18) uns
       )				unaligned;	/* count of words following */
dcl  copy				bit (9437184 /* 256 * 1024 * 36 */) aligned based; /* used to make copy of coll 1.5 seg into perm one */
dcl  copying_sdw			fixed bin (71);	/* sdw to make copy with - has rw access */
dcl  definitions_$			ext;		/* definitions segment */
dcl  dimension			builtin;
dcl  disk_mst_seg$			bit (9437184 /* 256 * 1024 * 36 */) aligned ext; /* used to map onto mst area of disk */
dcl  disk_mst_seg_sdw		fixed bin (71);	/* sdw for disk_mst_seg */
dcl  divide			builtin;
dcl  expect_defs			bit (1) aligned;	/* definitions expected switch */
dcl  expect_link			bit (1) aligned;	/* linkage section expected switch */
dcl  header_area			(1000) fixed bin (35); /* area into which segment header is read */
dcl  header_ptr			ptr;		/* pointer to header area */
dcl  index			builtin;
dcl  last_sltep			ptr;		/* pointer to previous slt entry */
dcl  length			builtin;
dcl  link_ptr			ptr;		/* pointer to linkage section */
dcl  load_control_word		entry (fixed bin, fixed bin (18)) variable; /* entry variable to get a control word from mst, possibly saving it in mst disk area */
dcl  load_header			entry (ptr, fixed bin (18)) variable; /* entry variable to read a segment header from the mst, possibly saving it to mst disk area */
dcl  load_segment			entry (ptr, fixed bin (18)) variable; /* entry variable to read a segment from the mst saving it where appropriate */
dcl  1 lot$			ext like lot;	/* linkage offset table */
dcl  make_sdw			entry (fixed bin (15), fixed bin (71), ptr, ptr);
dcl  make_sdw$no_pages		entry (fixed bin (15), fixed bin (71), ptr, ptr);
dcl  map_onto_disk			entry (fixed bin, fixed bin (18), fixed bin, ptr, bit (1) aligned);
dcl  mod				builtin;
dcl  next_partition_word		fixed bin (26);	/* next word in mst area to receive mst tape word */
dcl  null				builtin;
dcl  page_table			(0:255) bit (36) aligned based (ptp); /* for disk_mst_seg */
dcl  partition_left			fixed bin (26);	/* words left in mst disk area */
dcl  pc$cleanup			entry (ptr);
dcl  pc_wired$write			entry (ptr, fixed bin, fixed bin);
dcl  perm_seg_astep			ptr;
dcl  perm_seg_ptp			ptr;
dcl  perm_seg_sdw			fixed bin (71);	/* used for permanent copy made of coll 1.5 segs */
dcl  pmut$camp			entry;
dcl  pmut$swap_sdw			entry (ptr, ptr);
dcl  pre_link_hc			entry;
dcl  ptp				ptr;		/* ptr to page table for disk_mst_seg */
dcl  ptw_num			fixed bin;	/* loop var on page table creations */
dcl  ptw_util_$make_disk		entry (ptr, fixed bin (20));
dcl  ptw_util_$make_null_disk		entry (ptr, fixed bin (20));
dcl  pvt$root_pvtx			fixed bin ext;
dcl  rtrim			builtin;
dcl  sdw_util_$set_access		entry (ptr, bit (4) unal);
dcl  seg_number			fixed bin (15);	/* segment number of segment being loaded */
dcl  seg_ptr			ptr;		/* pointer to segment being loaded */
dcl  segno			builtin;
dcl  size				builtin;
dcl  slot_num			fixed bin;	/* in bce_command_seg_info */
dcl  slt$				external static;
dcl  slt_manager$build_entry		entry (ptr) returns (ptr);
dcl  start_partition_record		fixed bin (20);	/* first mst record that disk_mst_seg maps onto */
dcl  substr			builtin;
dcl  sys_boot_info$bce_part_frec	fixed bin (20) ext;
dcl  sys_boot_info$bce_part_nrec	fixed bin (20) ext;
dcl  sys_boot_info$mst_past_bce_frec	fixed bin (20) ext;
dcl  syserr			entry options (variable);
dcl  syserr$error_code		entry options (variable);
dcl  tape_reader			entry (ptr, fixed bin (18));
dcl  text_no			fixed bin (15);	/* text segment number */
dcl  text_ptr			ptr;		/* pointer to text segment */
dcl  wi_linkage$			external static;
dcl  wordno			builtin;
dcl  ws_linkage$			external static;
%page;
/* Start by reading collection 1.2 into the file partition. */

	load_control_word = read_control_word;
	load_header = tape_reader;
	load_segment = load_file_segment;
	call load_collection;			/* collection 1.2! */
	call bootload_fs_$flush_sys;			/* force out file sys */

	next_partition_word = 0;
	start_partition_record = 0;
	partition_left = (sys_boot_info$bce_part_nrec - MST_AREA_RECORDX) * 1024;
	call make_sdw$no_pages (segno (addr (disk_mst_seg$)), disk_mst_seg_sdw, astep, ptp);
	aste.pvtx = pvt$root_pvtx;
	call pmut$swap_sdw (addr (disk_mst_seg$), addr (disk_mst_seg_sdw));

/* Load in bce commands (collection 1.5).  They are activated later (init_commands). */

	bce_command_seg_info.number = 0;
	bce_command_seg_info.pre_linked = "0"b;

	expect_defs = "0"b;				/* Initialize the control switches */
	expect_link = "0"b;

	sltp = addr (slt$);				/* Get a pointer to SLT structure. */
	lotp = addr (lot$);				/* Get a pointer to the LOT. */
	definitions_ptr = addr (definitions_$);

	load_control_word = read_control_word;
	load_header = tape_reader;
	load_segment = load_command_seg;
	call load_collection;
	sys_boot_info$mst_past_bce_frec = sys_boot_info$bce_part_frec + MST_AREA_RECORDX + start_partition_record;

/* Now read in collections 2.0 and 3.0 to disk. */

	aste.csl, aste.msl = "0"b;
	load_control_word = save_control_word;
	load_header = save_header;
	load_segment = load_mst_segment;
	call load_collection;			/* collection 2.0 */
	call load_collection;			/* collection 3.0 */
	call pc$cleanup (astep);			/* force write pages left */

	call syserr (ANNOUNCE, "load_mst: ^d. out of ^d. pages used in disk mst area.",
	     divide (next_partition_word + 1023, 1024, 20), sys_boot_info$bce_part_nrec - MST_AREA_RECORDX);

	disk_mst_seg_sdw = 0;			/* cleanup */
	call pmut$swap_sdw (addr (disk_mst_seg$), addr (disk_mst_seg_sdw));
	return;
%page;
init_commands: entry;

/* Build astes for bce command segs.  Pre-link them if necessary. */

	do slot_num = 1 to bce_command_seg_info.number;
	     call map_onto_disk (pvt$root_pvtx, bce_command_seg_info.starting_record (slot_num), bce_command_seg_info.length (slot_num), baseptr (bce_command_seg_info.segnum (slot_num)), "1"b);
	     call bce_abs_seg$add (bce_command_seg_info.segnum (slot_num));
	end;
	if ^bce_command_seg_info.pre_linked then do;
	     call pre_link_hc;
	     bce_command_seg_info.pre_linked = "1"b;
	end;
	return;
%page;
make_permanent: entry;

/* Build permanent astes for permanent collection 1.5 segs.  Copy the disk
version into permanent segment. */

	sltp = addr (slt$);
	call make_sdw$no_pages (segno (addr (disk_mst_seg$)), disk_mst_seg_sdw, astep, ptp);
	aste.pvtx = pvt$root_pvtx;
	call pmut$swap_sdw (addr (disk_mst_seg$), addr (disk_mst_seg_sdw));

	do slot_num = 1 to bce_command_seg_info.number;
	     if bce_command_seg_info.permanent (slot_num) then do;
		do ptw_num = 0 to bce_command_seg_info.length (slot_num) - 1; /* establish disk area */
		     call ptw_util_$make_disk (addr (page_table (ptw_num)), bce_command_seg_info.starting_record (slot_num) + ptw_num);
		end;
		aste.csl, aste.msl = bit (bin (bce_command_seg_info.length (slot_num), 9), 9);
		call pmut$camp;

/* copy this seg into perm seg */

		seg_number = bce_command_seg_info.segnum (slot_num);
		sltep = addr (slt.seg (seg_number));
		slte.abs_seg = "0"b;		/* We don't manage disk anymore */
		call make_sdw (seg_number, perm_seg_sdw, perm_seg_astep, perm_seg_ptp);
		copying_sdw = perm_seg_sdw;
		call sdw_util_$set_access (addr (copying_sdw), "1010"b); /* force rw onto copy */

		seg_ptr = baseptr (seg_number);
		call pmut$swap_sdw (seg_ptr, addr (copying_sdw));

		substr (seg_ptr -> copy, 1, 36 * 1024 * bce_command_seg_info.length (slot_num)) =
		     substr (disk_mst_seg$, 1, 36 * 1024 * bce_command_seg_info.length (slot_num));

		call pmut$swap_sdw (seg_ptr, addr (perm_seg_sdw)); /* set real sdw */
		call pc_wired$write (perm_seg_astep, 0, -1); /* Flush to disk */
		call pc$cleanup (astep);		/* cleanup disk_mst_seg */
	     end;
	end;

	disk_mst_seg_sdw = 0;			/* cleanup */
	call pmut$swap_sdw (addr (disk_mst_seg$), addr (disk_mst_seg_sdw));
	return;
%page;
load_collection: proc;

/* Routine, given the entry variables load_control_word, load_header and
load_segment, which reads from the mst and puts the entities into their
proper places. */

dcl  count			fixed bin (18);	/* length of record on MST */
dcl  type				fixed bin;	/* type of record on MST */

	header_ptr = addr (header_area);		/* Generate pointer to header area. */

/* Read control word and dispatch on it. */

	call load_control_word (type, count);		/* Read a control word. */
	do while (type ^= 2);
	     if type ^= 0 then call syserr (CRASH, "load_mst: unknown control type ^d", type);

/* Process header record. */

	     if count > size (header_area) then		/* Error if header is too large ... */
		call syserr (CRASH, "load_mst: bad header size ^d", count);
						/* ... or too small. */

	     call load_header (header_ptr, count);	/* Read in the header. */

	     call load_control_word (type, count);	/* Read in next control word. */
	     if type ^= 1 then			/* It must be a segment control word. */
		call syserr (CRASH, "load_mst: unexpected control type ^d", type);

	     call load_segment (header_ptr, count);	/* Load in the segment. */
	     call load_control_word (type, count);	/* next thing */
	end;

/* Process collection record. */

	call load_control_word (type, count);		/* Read the collection mark. */
	return;
     end;
%page;
load_command_seg: proc (header_ptr, count);

/* Read in a collection 1.5 object.  Place it on disk or thread linkage areas
accordingly.  Build the table bce_command_seg_info. The equivalent of 
segment_loader from collection 2.0. */

dcl  count			fixed bin (18) parameter; /* length of record on MST */
dcl  header_ptr			ptr parameter;	/* to mst seg info */

	if header_ptr -> slte.link_sect then do;
	     if ^expect_link then call syserr (CRASH, "load_mst: Unexpected linkage.");
	     expect_link = "0"b;			/* Turn off switch. */
	     expect_defs = "1"b;			/* Defs should come next. */

	     if last_sltep -> slte.combine_link then do;
		if last_sltep -> slte.link_sect_wired then
		     if last_sltep -> slte.init_seg then hclsp = addr (wi_linkage$);
		     else hclsp = addr (ws_linkage$);
		else if last_sltep -> slte.init_seg then hclsp = addr (ai_linkage$);
		else hclsp = addr (as_linkage$);
		seg_ptr = hclsp -> hc_linkage_seg.next_free_ptr; /* Get pointer to end of combined linkage. */
		hclsp -> hc_linkage_seg.next_free_ptr = addrel (seg_ptr, count + mod (count, 2)); /* Update pointer to next free even loc. */

		call tape_reader (seg_ptr, count);	/* Read in the linkage section into place. */
	     end;

	     else call load_bce_segment;

	     link_ptr = seg_ptr;			/* Save pointer to linkage. */
	     lot.lp (text_no) = link_ptr;		/* Set LOT entry. */
	     link_ptr -> linkage_header.segment_number = text_no;
						/* Save text segment number in linkage header. */
	end;

	else if header_ptr -> slte.defs then do;
	     if ^expect_defs then call syserr (CRASH, "load_mst: Unexpected defs.");
	     expect_defs = "0"b;

	     seg_ptr = definitions.next_free_ptr;	/* Get pointer to end of definitions. */
	     definitions.next_free_ptr = addrel (seg_ptr, count); /* Update pointer to next free. */

	     call tape_reader (seg_ptr, count);		/* Read definitions into place. */

	     definitions.dot (text_no).offset = wordno (seg_ptr);
	     definitions.dot (text_no).length = count;	/* Fill in offset table entry. */

	     link_ptr -> linkage_header.def_ptr = seg_ptr;/* Set correct defs pointer. */
	end;

	else do;					/* Must be text, or something. */
	     if expect_link | expect_defs then call syserr (CRASH, "load_mst: Missing linkage or defs.");
	     expect_link = header_ptr -> slte.link_provided; /* Set switch. */

	     call load_bce_segment;			/* Load in the segment. */
	     text_ptr = seg_ptr;			/* Save pointer to the text. */
	     text_no = segno (text_ptr);		/* Also, get text segment number. */
	end;

	last_sltep = sltep;				/* Save pointer to last SLT entry. */

	return;
%page;
load_bce_segment: proc;

/* Load a segment into the next set of pages in mst area on disk. */

dcl  seg_len			fixed bin;

	     seg_ptr = slt_manager$build_entry (header_ptr); /* Build new entry in SLT. */
	     if seg_ptr = null () then call syserr (CRASH, "load_mst: error from slt_manager$build_entry");

	     seg_number = segno (seg_ptr);		/* Get segment number of new segment. */

	     sltep = addr (slt.seg (seg_number));
	     slte.abs_seg = "1"b;			/* We manage disk. */
	     seg_len, slte_uns.max_length = slte_uns.cur_length;
	     if substr (slte.access, 2, 1) then do;	/* e access => breakpoinatble */
		slte.breakpointable = "1"b;
		slte_uns.cur_length, slte_uns.max_length, seg_len = seg_len + 1;
	     end;

	     bce_command_seg_info.number = bce_command_seg_info.number + 1;
	     if bce_command_seg_info.number > dimension (bce_command_seg_info.entries, 1) then call syserr (CRASH, "load_mst: too many bce command segments.");
	     if seg_len * 1024 > partition_left then call syserr (CRASH, "load_mst: Out of space in mst area of bce partition.");

	     bce_command_seg_info.segnum (bce_command_seg_info.number) = seg_number;
	     bce_command_seg_info.starting_record (bce_command_seg_info.number) = sys_boot_info$bce_part_frec + MST_AREA_RECORDX + start_partition_record;
	     bce_command_seg_info.length (bce_command_seg_info.number) = seg_len;
	     bce_command_seg_info.permanent (bce_command_seg_info.number) = ^slte.temp_seg;

	     do ptw_num = 0 to seg_len - 1;		/* establish disk area */
		call ptw_util_$make_null_disk (addr (page_table (ptw_num)), sys_boot_info$bce_part_frec + MST_AREA_RECORDX + start_partition_record + ptw_num);
	     end;
	     aste.csl, aste.msl = bit (bin (seg_len, 9), 9);
	     call pmut$camp;
	     start_partition_record = start_partition_record + seg_len;
	     next_partition_word = next_partition_word + seg_len * 1024;
	     partition_left = partition_left - seg_len * 1024;

	     call tape_reader (addr (disk_mst_seg$), count); /* Slurp in the new segment. */

	     if slte.breakpointable then		/* place sentinel to avoid nulling of bkpt_page */
		addrel (addr (disk_mst_seg$), (seg_len - 1) * 1024) -> bkpt_page.sentinel = BKPT_page_sentinel;

	     call pc$cleanup (astep);			/* Flush to disk */
	     return;
	end;
     end;
%page;
load_file_segment: proc (header_ptr, count);

/* entry to load a segment from the mst into a slot in the bce file system. */

dcl  count			fixed bin (18);	/* number of words to read */
dcl  file_length			fixed bin (21);	/* file lth in chars */
dcl  file_name			char (32);	/* after stripping optional suffix */
dcl  file_name_lth			fixed bin;	/* length of file_name trimmed */
dcl  header_ptr			ptr;		/* to slte/nameseg entry pair */

	sltep = header_ptr;
	namep = addrel (sltep, size (slte));
	file_name_lth = length (rtrim (segnam.names (1).name)); /* trim optional ".ascii" suffix */
	if index (segnam.names (1).name, ".ascii") = file_name_lth - length (".ascii") + 1 then file_name_lth = file_name_lth - length (".ascii");
	file_name = substr (segnam.names (1).name, 1, file_name_lth);
	file_length = divide (slte_uns.bit_count, 9, 21); /* determine char lth */
	if divide (file_length + 3, 4, 18) < count then file_length = count * 4; /* num words used by bc less than words on tape - bc lied */
	seg_ptr = null;
	call bootload_fs_$put_ptr (file_name, file_length, "0"b, seg_ptr, code); /* find ptr to room in file space */
	if seg_ptr = null then call syserr$error_code (ANNOUNCE, code, "load_mst: ^a can't be placed into file partition.", segnam.names (1).name);
	call tape_reader (seg_ptr, count);		/* read into allocated space */
	return;
     end;
%page;
load_mst_segment: proc (header_ptr, count);

/* read segment from mst appending onto mst area */

dcl  count			fixed bin (18);	/* words to read */
dcl  header_ptr			ptr;		/* to slte/name_seg entry pair */
dcl  segment_ptr			ptr;		/* dummy returned ptr to seg read */

	call read_and_save (segment_ptr, count);
	return;
     end;
%page;
read_and_save: proc (saved_ptr, count);

/* Read a count number of words from the tape.  Append it to what is in the 
partition.  Return a pointer to these words (paged area). The idea is to build 
a paged segment onto the set of pages within which the segment will be loaded.
A pointer to the actual area is returned. */

dcl  count			fixed bin (18);	/* number of words to read and save */
dcl  last_partition_record		fixed bin (20);	/* record holding last word of where newly read in words would go */
dcl  last_partition_word		fixed bin (26);	/* last word used in partition by this new read block */
dcl  saved_ptr			ptr;		/* return ptr to words read */

	if partition_left < count then call syserr (CRASH, "load_mst: Out of space in mst area of bce partition.");

	last_partition_word = next_partition_word + count - 1;
	last_partition_record = divide (last_partition_word, 1024, 20);
	if last_partition_record - start_partition_record > 255 then do;

/* We can't grow our abs seg to hold this new unit.
Flush the old to disk and re-map the abs seg. */

	     call pc$cleanup (astep);
	     start_partition_record = divide (next_partition_word, 1024, 20);
	     call ptw_util_$make_disk (addr (page_table (0)), sys_boot_info$bce_part_frec + MST_AREA_RECORDX + start_partition_record); /* keep old page */
	     aste.csl, aste.msl = "000000001"b;
	end;

/* grow abs seg to encompass new words */

	do ptw_num = bin (aste.csl, 9) to last_partition_record - start_partition_record;
	     call ptw_util_$make_null_disk (addr (page_table (ptw_num)), sys_boot_info$bce_part_frec + MST_AREA_RECORDX + start_partition_record + ptw_num);
	end;
	aste.csl, aste.msl = bit (bin (last_partition_record - start_partition_record + 1, 9), 9);
	call pmut$camp;

	saved_ptr = addrel (addr (disk_mst_seg$), next_partition_word - start_partition_record * 1024);
	call tape_reader (saved_ptr, count);		/* read into mst area */
	partition_left = partition_left - count;	/* gobble space */
	next_partition_word = last_partition_word + 1;
	return;
     end;
%page;
read_control_word: proc (type, count);

/* read a control word from the mst */

dcl  count			fixed bin (18);	/* count of following record */
dcl  1 my_control_word		aligned like control_word;
dcl  type				fixed bin;	/* control word type */

	call tape_reader (addr (my_control_word), 1);
	type = my_control_word.type;
	count = my_control_word.count;
	return;
     end;
%page;
save_control_word: proc (type, count);

/* read a control word from the mst and save in mst area */

dcl  count			fixed bin (18);	/* count field */
dcl  type				fixed bin;	/* type field */
dcl  word_ptr			ptr;		/* ptr to word read and saved */

	call read_and_save (word_ptr, 1);
	type = word_ptr -> control_word.type;
	count = word_ptr -> control_word.count;
	return;
     end;
%page;
save_header: proc (header_ptr, count);

/* read in and save a segment header from the mst */

dcl  count			fixed bin (18);	/* count of words to read */
dcl  header_ptr			ptr;		/* ptr to area in which to read */
dcl  header_read			(count) bit (36) aligned based; /* what read */
dcl  read_ptr			ptr;		/* ptr to area saved in mst area */

	call read_and_save (read_ptr, count);
	header_ptr -> header_read = read_ptr -> header_read;
	return;
     end;
%page; %include aste;
%page; %include bce_breakpoint_page;
%page; %include bce_partition_layout;
%page; %include hc_definitions_seg;
%page; %include hc_linkage_seg;
%page; %include lot;
%page; %include mc;
%page; %include object_link_dcls;
%page; %include slt;
%page; %include slte;
%page; %include syserr_constants;
%page;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   load_mst: Out of space in mst area of bce partition.

   S: $crash

   T: $init

   M: There is not enough room in the mst area of the bce partition to
   hold collections 2.0 and 3.0.

   A: The size of this area will need to be increased.
   $boot_tape

   Message:
   load_mst: NAME can't be placed into file partition.

   S: $crash

   T: $init

   M: An error occurred while adding the named file from the mst into the
   bootload Multics file system.

   A: $recover
   $boot_tape

   Message:
   load_mst: unexpected control type TTT

   S: $crash

   T: $init

   M: A segment control word was found out of sequence on the bootload tape.

   A: $recover
   $boot_tape

   Message:
   load_mst: bad header size SSS

   S: $crash

   T: $init

   M: A bad segment header was found on the bootload tape.

   A: $recover
   $boot_tape

   Message:
   load_mst: unknown control type TTT

   S: $crash

   T: $init

   M: A bad segment control word was found on the bootload tape.

   A: $recover
   $boot_tape

   Message:
   load_mst: XXX. out of WWW. pages used in disk mst area.

   S: $info

   M: This message shows the amount of the mst area of the bce partition that 
   is used to hold the mst.

   A: $ignore
   $boot_tape

   Message:
   load_mst: Unexpected DEFS/LINKAGE

   S: $crash

   T: $init

   M: A linkage or definitions section was found out of sequence in the mst source.

   A: $recover
   $boot_tape

   Message:
   load_mst: Missing linkage or defs.

   S: $crash

   T: $init

   M: A linkage or definitions section which should be in the
   mst source appears to be missing.

   A: $recover
   $boot_tape

   Message:
   load_mst: error from slt_manager$build_entry

   S: $crash

   T: $init

   M: $err

   A: $recover
   $boot_tape

   Message:
   load_mst: too many bce command segments.

   S: $crash

   T: $init

   M: An exceptionally large number of segments appeared in collection 1.5.
   This probably indicates an error in the mst.

   A: $recover
   $boot_tape

   END MESSAGE DOCUMENTATION */

     end;
