/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/* format: style2 */

init_empty_root:
     procedure (Pvtx, Code);



	dcl     Pvtx		 fixed bin (17);	/* Physical Volume Table index */
	dcl     Code		 fixed bin (35);	/* error Code */



/*  This procedure initializes a disk for which a PVT entry has already been created.
   It is passed the PVT index and a pointer to an area that has been initialized
   with the data to be stored in the disk label. This procedure sets up
   the label, and calls init_vol_header_ to write it out and set up everything else.

   Modified by B. Greenberg 06/25/76 for init_vol_header_, fixing some bugs as well.
   Modified by J. Bongiovanni, March 1982, for new PVTE, RVTC card
   Modified BIM 10/82 for fill_vol_extents_$cold_rpv
   Modified by Keith Loepere to set the times right even when the clock hasn't been set yet.
*/


/****^  HISTORY COMMENTS:
  1) change(86-01-15,Fawcett), approve(86-04-11,MCR7383),
     audit(86-06-07,GDixon), install(86-07-17,MR12.0-1097):
     Add support for subvolumes and change the args to init_vol_header_.
                                                   END HISTORY COMMENTS */



	dcl     good_clock		 fixed bin (71);	/* Value of clock made reasonable */
	dcl     dev_type		 fixed bin;	/* device type index */
	dcl     num_pages		 fixed bin;	/* Number of records in paging area on this volume */
	dcl     n_vtoce		 fixed bin;	/* number of VTOC entries in VTOC */
	dcl     baseadd		 fixed bin;	/*  base address of paging */
	dcl     thing		 char (20);	/* For error message */
	dcl     1 label_buffer	 aligned like label;


	dcl     addr		 builtin;
	dcl     bit		 builtin;
	dcl     clock		 builtin;
	dcl     convert		 builtin;
	dcl     substr		 builtin;
	dcl     unspec		 builtin;

	dcl     sys_info$access_class_ceiling
				 bit (72) aligned external;
	dcl     sys_info$first_reasonable_time
				 fixed bin (71) ext static;
	dcl     sys_info$last_reasonable_time
				 fixed bin (71) ext static;

	dcl     error_table_$action_not_performed
				 fixed bin (35) ext static;

	dcl     cv_fsdisk_error_	 entry (fixed bin (35));
	dcl     init_vol_header_	 entry (fixed bin, fixed bin, ptr, entry, char (*), fixed bin, fixed bin,
				 fixed bin, fixed bin (35));
	dcl     fill_vol_extents_$cold_rpv
				 entry (ptr, fixed bin, fixed bin, fixed bin, fixed bin, bit (1) aligned,
				 fixed bin);

	dcl     write_disk		 entry (fixed bin, fixed bin, ptr, fixed bin (35));
	dcl     ioa_		 entry options (variable);
	dcl     bce_error		 entry options (variable);

	dcl     ME		 char (32) init ("init_empty_root") int static options (constant);


	Code = 0;
	labelp = addr (label_buffer);
	unspec (label) = ""b;

	good_clock = clock ();
	if good_clock < sys_info$first_reasonable_time | good_clock > sys_info$last_reasonable_time
	then good_clock = sys_info$first_reasonable_time;

	pvtep = addr (addr (pvt$array) -> pvt_array (Pvtx));
	dev_type = pvte.device_type;			/* get the device type index */
	label.version = 1;
	label.mfg_serial = "rpv";			/* fake serial no */
	label.pvid = substr (bit (good_clock, 71), 36, 36);
	good_clock = good_clock + 10;
	label.lvid = substr (bit (good_clock, 71), 36, 36);
	good_clock = good_clock + 10;
	label.lv_name = "root";
	label.pv_name = "rpv";
	label.time_registered = good_clock;
	label.max_access_class = sys_info$access_class_ceiling;
	label.min_access_class = ""b;
	label.Multics = Multics_ID_String;
	label.root.here = "1"b;			/* Root pack. */
	label.root.disk_table_vtocx = -1;
	label.root.disk_table_uid = ""b;
	label.root_vtocx = 0;
	label.shutdown_state = 0;
	label.esd_state = 0;
	if pvte.is_sv
	then do;
		label.number_of_sv = pvte.num_of_svs;
		label.this_sv = pvte.sv_num;
		label.vol_size = rec_per_sv (dev_type);
		label.sub_vol_name = valid_sv_array (pvte.sv_num);
	     end;
	else do;
		label.vol_size = rec_per_dev (dev_type);
		label.sub_vol_name = " ";
	     end;

	call fill_vol_extents_$cold_rpv (labelp, -1 /* no lace command */, n_vtoce, baseadd, num_pages, "0"b, dev_type);

	call ioa_ ("^/^a: Begin rpv initialization. This will take some time.", ME);
	call init_vol_header_ (Pvtx, dev_type, labelp, write_disk, thing, n_vtoce, baseadd, num_pages, Code);
	call cv_fsdisk_error_ (Code);

	if Code ^= 0				/* let caller deal with this */
	then do;
		call bce_error (Code, "^a: Error writing ^a on ^a.", ME, thing,
		     DEVICE_NAME ((pvte.devname), (pvte.logical_area_number), (label.sub_vol_name)));
		Code = error_table_$action_not_performed;
		return;
	     end;

	call ioa_ ("^a: rpv initialized; ^d records.", ME, num_pages);

	return;


DEVICE_NAME:
     procedure (subsys, device, sv_name) returns (char (8));
	declare subsys		 char (4);
	declare sv_name		 char (1);
	declare device		 fixed bin;
	declare p99		 picture "99";

	return (subsys || "_" || convert (p99, device) || sv_name);
     end DEVICE_NAME;

/* format: off */

%page;%include disk_pack;
%page;%include fs_dev_types;
%page;%include fs_vol_label;
%page;%include pvte;

/* BEGIN MESSAGE DOCUMENTATION


   END MESSAGE DOCUMENTATION */

     end init_empty_root;
