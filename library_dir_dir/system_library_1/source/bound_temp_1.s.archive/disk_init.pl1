/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
disk_init:
     procedure (pvtx, confp);				/* here to init disk routines */

/* DISK_INIT - Initialize Data Bases for Disk DIMs.
   recoded 6/19/70 - Noel I. Morris
   revised 8/17/73 by N. I. Morris for DSU-191 and RSR feature
   revised 3/27/75 by Noel I. Morris for new storage system
   revised 4/79 by Michael R. Jordan for MSS0500/1.
   revised 4/80 by Michael R. Jordan for dual controller MSU0500/1 subsystems.
   modified June 1981 by C. Hornig for new I/O.
   Modified February 1982 by C. Hornig for MR10 io_manager.
   modified March 1982 by J. Bongiovanni for better config card validation
   modified October 1983 by E. N. Kittlitz to not read off end of dsk card

   Modified March 1984 by T. Oke to initialize system wide free_q.
   Modified April 1984 by T. Oke to change channel table initialization
   algorithm and permit up to dskdcl_chans_per_subsys channels per
   sub-system.
   Modified April 1984 by T. Oke to add use of syserr_constants include file.

   Modified May 1984 by T. Oke to add adaptive optimization initialization.
   Modified September 1984 by Chris Jones to correct error message.
   Modified Nov 26, 1984 by Fawcett to support dev 0 and fips.
   Modified Jan 1985 by Paul Farley to correct a bug in channel counting.
   Modified Jun 1985 by Paul Farley to correct a bug in checking for
   shared spindle when dev_array(i) is zero.
   Modified July 1985 by Paul Farley to include a fix for the channel pick loop
   done by Tom Oke.
*/

/****^  HISTORY COMMENTS:
  1) change(85-09-09,Fawcett), approve(85-09-09,MCR6979),
     audit(86-01-17,CLJones), install(86-03-21,MR12.0-1033):
     Device zero support
     for FIPS.
  2) change(86-01-20,Fawcett), approve(86-04-11,MCR7383),
     audit(86-07-07,GDixon), install(86-07-17,MR12.0-1097):
     Add support for 512_WORD_IO devices, 3380 and 3390.
  3) change(86-06-05,GJohnson), approve(86-06-05,MCR7387),
     audit(86-06-10,Martinson), install(86-07-17,MR12.0-1091):
     Correct error message documentation.
                                                   END HISTORY COMMENTS */

dcl	pvtx		   fixed bin parameter;	/* index to PVT entry for device */
dcl	confp		   ptr parameter;		/* config card ptr */

dcl	sx		   fixed bin;		/* disk subsystem index */
dcl	type		   fixed bin (8);		/* disk device type */
dcl	name		   char (4) aligned;	/* disk device name */
dcl	chx		   fixed bin (35);		/* io_manager index for channel */
dcl	idx		   fixed bin (12);		/* channel ID index for disk_interrupt */
dcl	i		   fixed bin;		/* logical unit number index */
dcl	j		   fixed bin;		/* configuration card unit index */
dcl	k		   fixed bin;		/* .. */
dcl	ci		   fixed bin;
dcl	devt		   fixed bin;		/* device type for this model number */
dcl	dev_array		   (0:63) fixed bin;	/* device types indexed by device # */
dcl	rcode		   fixed bin (35);		/* error code */
dcl	base		   bit (24) aligned;	/* absolute address of DCW list */
dcl	fips_disk		   bit (1);
dcl	chan_array	   (dskdcl_chans_per_subsys) char (8) aligned;
						/* names of channels */

/* Channel table.  Indicates start channel and count on each adaptor. */

dcl	adaptor_index	   fixed bin;
dcl	adaptor_count	   fixed bin;

dcl	1 adaptor		   (4),			/* Can be 4 LA's */
	  2 channel_start	   fixed bin,
	  2 chantab_index	   fixed bin,
	  2 channel_count	   fixed bin,
	  2 channels_used	   fixed bin;

dcl	1 d		   like devtab;

/* as dskdcl's number of IO types is increased - so increase the hbound */

dcl	response		   (0:6) float bin (27) static options (constant) initial (
						/* */
			   100.0,			/* PAGE_READ */
			   50000.0,		/* PAGE_WRITE */
			   20.0,			/* VTOC_READ */
			   50.0,			/* VTOC_WRITE */
			   1.0,			/* TEST */
			   200.0,			/* BOOTLOAD_READ */
			   100000.0		/* BOOTLOAD_WRITE */
			   );

dcl	ME		   char (16) static options (constant) init ("disk_init");

dcl	absadr		   ext entry (ptr, fixed bin (35)) returns (fixed bin (24));
dcl	config_$find_2	   entry (char (4), char (4) aligned, pointer);
dcl	dctl$disk_inter	   entry (bit (36) aligned, fixed bin (3), bit (36) aligned);
dcl	syserr		   ext entry options (variable);

dcl	error_table_$io_not_configured
			   fixed bin (35) ext static;

dcl	(addr, addrel, bin, bit, clock, currentsize, divide, float, hbound, mod, null, ptr, rel, size,
	substr, unspec)	   builtin;

	prph_dsk_cardp = confp;
	disksp = addr (disk_seg$);			/* Get pointer to disk segment. */

	if disk_data.free_offset = "0"b then do;	/* If never initialized ... */
	     disk_data.free_offset = bit (bin (currentsize (disk_data), 18));
						/* Set offset of first disktab structure. */
	     statp = addr (disksp -> disk_data.status_mask);
						/* Get pointer to mask for disk status. */
	     status.power = "1"b;			/* Set up mask to detect error conditions. */
	     status.major = "1111"b;
	     status.channel_stat = "111"b;
	     status.central_stat = "111"b;

/* Thread all queue entries into the free list. */

	     unspec (disk_data.free_q) = "0"b;		/* clear stats */
	     do i = 1 to disk_data.free_q_size - 1;	/* Step through all queue entries. */
		disk_data.free_q_entries (i).next = rel (addr (disk_data.free_q_entries (i + 1)));
		disk_data.free_q_entries (i + 1).prev = rel (addr (disk_data.free_q_entries (i)));
	     end;					/* Make each entry point to the next one. */

	     disk_data.free_q.head = rel (addr (disk_data.free_q_entries (1)));
						/* The head of the list is the first entry. */
	     disk_data.free_q.tail = rel (addr (disk_data.free_q_entries (disk_data.free_q_size)));
						/* The tail of the list is the last entry. */
	     disk_data.lock = ""b;			/* clear the lock */

/* Initialize system wide loading information. */

	     unspec (disk_data.sys_info) = "0"b;
	     disk_data.sys_info (PAGE_READ).max_depth = 6.0;
	     disk_data.sys_info (PAGE_READ).depth_map = rel (addr (disk_data.sys_info (PAGE_READ).depth));

	     disk_data.sys_info (PAGE_WRITE).max_depth = float (disk_data.free_q_size) * 0.75;
	     disk_data.sys_info (PAGE_WRITE).depth_map = rel (addr (disk_data.sys_info (PAGE_WRITE).depth));

	     disk_data.sys_info (VTOC_READ).max_depth = 6.0;
	     disk_data.sys_info (VTOC_READ).depth_map = rel (addr (disk_data.sys_info (VTOC_READ).depth));

	     disk_data.sys_info (VTOC_WRITE).max_depth = 12.0;
	     disk_data.sys_info (VTOC_WRITE).depth_map = rel (addr (disk_data.sys_info (VTOC_WRITE).depth));

	     disk_data.sys_info (BOOTLOAD_READ).max_depth = 6.0;
	     disk_data.sys_info (BOOTLOAD_READ).depth_map = rel (addr (disk_data.sys_info (BOOTLOAD_READ).depth));

	     disk_data.sys_info (BOOTLOAD_WRITE).max_depth = 12.0;
	     disk_data.sys_info (BOOTLOAD_WRITE).depth_map = rel (addr (disk_data.sys_info (BOOTLOAD_WRITE).depth));

	     disk_data.sys_info (TEST).max_depth = 1.0;
	     disk_data.sys_info (TEST).depth_map = rel (addr (disk_data.sys_info (TEST).depth));

/* Initialize stagnation time limit for optimizer */

	     disk_data.stagnate_time = 5000000;		/* 5 seconds */
	     disk_data.max_depth_reset_time = clock ();
	end;

/* Initialize sub-system information. */

	pvt_arrayp = addr (pvt$array);		/* Get pointer to PVT array */
	pvtep = addr (pvt_array (pvtx));		/* Get pointer to PVT entry for this device. */

	type = pvte.device_type;			/* Extract device type from PVT entry. */
	name = pvte.devname;			/* Get name of disk subsytem. */

	do sx = 1 to disk_data.subsystems while (name ^= disk_data.name (sx));
	end;					/* Look for this subsystem already initialized. */

	pvtdip = addr (pvte.dim_info);		/* Get pointer to dim_info in PVT entry. */
	pvtdi.sx = sx;				/* Put sx where disk dim can find it */

	pvtdi.usable_sect_per_cyl = divide (sect_per_cyl (type), sect_per_rec (type), 17, 0) * sect_per_rec (type);
						/* Compute # of usable sectors on disk cylinder. */
	pvtdi.unused_sect_per_cyl = sect_per_cyl (type) - pvtdi.usable_sect_per_cyl;
						/* Compute # of unused sectors at end of cylinder. */

	if sx > disk_data.subsystems then do;		/* If not already initialized ... */
	     disk_data.subsystems = sx;		/* Update count of subsystems. */
	     disk_data.name (sx) = name;
	     disk_data.offset (sx) = disk_data.free_offset;
						/* Set pointer to place for disk data base. */

	     diskp = ptr (disksp, disk_data.free_offset); /* Get pointer to disk data base. */
	     call init_disk_database;			/* Set up disktab structure. */

	     disk_data.free_offset = rel (addrel (diskp, currentsize (disktab) + disktab.nchan * size (chantab)));
	end;					/* Update first unused location in segment. */

	else					/* If already initialized ... */
	     diskp = ptr (disksp, disk_data.offset (sx)); /* Get pointer to disk data base. */

	disktab.pvtx (pvte.logical_area_number) = pvtx;	/* Save PVT entry index in device table. */

	return;

IS_FIPS:
     procedure () returns (bit (1));
dcl	groupx		   fixed bin;
dcl	i		   fixed bin;

	do groupx = 1 to hbound (prph_dsk_card.group, 1) while (prph_dsk_card.group (groupx).model ^= -1);
	     if prph_dsk_card.group (groupx).model ^= 0 then do;
		do i = 1 to config_data_$disk_drive_model_names.count;
		     if config_data_$disk_drive_model_names.names (i).model = prph_dsk_card.group (groupx).model then
			return (config_data_$disk_drive_model_names.names (i).device_0_valid);
		end;
		call syserr (CRASH, "^a: Disk model ^d not found in config_data_.", ME,
		     prph_dsk_card.group (groupx).model);
	     end;
	end;
	call syserr (CRASH, "^a: No valid disk models found on PRPH ^a card.", ME, prph_dsk_card.name);
     end IS_FIPS;

init_disk_database:
     procedure;

	disktab.abs_mem_addr = absadr (addr (disktab), rcode);
	if rcode ^= 0 then
	     goto absadr_error;

/* Find maximum number of devices in disk subsystem. */

	call check_config_fields (prph_dsk_cardp, addr (prph_dsk_card.group));

	fips_disk = IS_FIPS ();
	if fips_disk then
	     disktab.first_dev = 0;
	else disktab.first_dev = 1;

	j = disktab.first_dev;

	do i = 1 to hbound (prph_dsk_card.group, 1) while (prph_dsk_card.group (i).model ^= -1);
						/* Count disk drives. */
	     call check_config_fields (prph_dsk_cardp, addr (prph_dsk_card.group (i).ndrives));
						/* Make sure fields are there */
	     if (j + prph_dsk_card.group (i).ndrives - disktab.first_dev) > hbound (dev_array, 1) then
						/* Too many drives. */
		call syserr (CRASH, "^a: Too many devices configured for ^a.  Max device is ^d.", ME, name,
		     hbound (dev_array, 1));
	     devt = prph_dsk_card.group (i).model;
	     if devt ^= 0 then do;
		do devt = 1 to hbound (MODEL, 1) while (MODEL (devt) ^= prph_dsk_card.group (i).model);
		end;
		if devt > hbound (MODEL, 1) then	/* Bad device model number. */
		     call syserr (CRASH, "^a: Unknown model number ^d on PRPH ^a", ME, prph_dsk_card.group (i).model,
			name);
		devt = MODELX (devt);		/* Get device type. */
	     end;
	     do k = j to j + prph_dsk_card.group (i).ndrives - 1;
		dev_array (k) = devt;		/* This can be zero! => no device present. */
	     end;
	     j = j + prph_dsk_card.group (i).ndrives;
	end;

	disktab.last_dev, disktab.dev_index = j - 1;	/* set max drive and scan index */

/* Setup master optimization information. */

	unspec (d.opt_info) = "0"b;
	do i = 0 to MAX_IO_TYPE;
	     sysp = addr (disk_data.sys_info (i));
	     d.opt_info (i).sys_info = rel (addr (sys_info.fraction));
	     if sys_info.max_depth > 1.0 then do;
		d.opt_info (i).slope = (response (i) - 1.0) / (sys_info.max_depth - 1.0);
		d.opt_info (i).intercept = ((response (i) * sys_info.max_depth) - 1.0) / (sys_info.max_depth - 1.0);
	     end;
	     else do;
		d.opt_info (i).slope = 0.0;
		d.opt_info (i).intercept = 1.0e10;
	     end;
	end;

/* Analyze device configuration for errors. */

	do i = disktab.first_dev to disktab.last_dev;	/* Look at each device configured. */
	     dp = addr (disktab.devtab (i));
	     if dev_array (i) > 0 then
		if shared_spindle (dev_array (i)) then	/* This guy has a buddy. */
		     if mod (i, 2) ^= 0 then do;	/* First of a pair. */
			if i >= disktab.last_dev then do;
						/* If this is the last one, the next is missing. */
MISSING_BUDDY:
			     call syserr (CRASH, "^a: ^a ^[^d^s^;^s^d^] must be configured if ^a ^d is configured.",
				ME, name, mod (i, 2) = 0, i - 1, i + 1, name, i);
			end;
			if dev_array (i + 1) ^= dev_array (i) then do;
						/* Buddies must be the same type. */
BAD_BUDDY:
			     call syserr (CRASH, "^a: Devices ^d and ^d of ^a must have the same model number.", ME,
				i - 1 + mod (i, 2), i + mod (i, 2), name);
			end;
			devtab.buddy = i + 1;	/* Next guy has to be buddy. */
			devtab.pdi = i;		/* Set primary device index. */
		     end;
		     else do;			/* The second of a pair. */
			if i <= 1 then
			     goto MISSING_BUDDY;
			if dev_array (i - 1) ^= dev_array (i) then
			     goto BAD_BUDDY;
			devtab.buddy,		/* Last one is the buddy ... */
			     devtab.pdi = i - 1;	/* ... and the primary device. */
		     end;
		else do;				/* Not a shared spindle. */

		     devtab.buddy = 0;		/* No buddy */
		     devtab.pdi = i;		/* This is the primary device */
		end;
	     else ;

/* setup optimization and queues. */

	     unspec (devtab.opt_info) = unspec (d.opt_info);
	     unspec (devtab.wq) = "0"b;
	end;

/* Analyze channel information for disk subsystem. */

	if prph_dsk_card.nchan > dskdcl_chans_per_subsys then
TOO_MANY_CHANNELS:
	     call syserr (CRASH, "^a: Too many channels configured for ^a.  Limit is ^d.", ME, name,
		dskdcl_chans_per_subsys);

	do j = 1 to prph_dsk_card.nchan;		/* Determine the channels defined on disk card. */
	     call io_chnl_util$iom_to_name ((prph_dsk_card.iom), (prph_dsk_card.chan + j - 1), chan_array (j), rcode);
	     if rcode ^= 0 then
		call syserr (CRASH, "^a: Invalid channel on PRPH ^a card.", ME, prph_dsk_card.name);
	end;

/* Store adaptor information. */

	adaptor_index = 1;
	adaptor (1).channel_start = 1;
	adaptor (1).channel_count = prph_dsk_card.nchan;
	adaptor (1).channels_used = 0;
	adaptor (1).chantab_index = 1;

	chnl_cardp = null ();
	call config_$find_2 ("chnl", name, chnl_cardp);	/* Look for chnl card for this subsystem. */
	if chnl_cardp ^= null () then			/* If chnl card found ... */
	     do i = 1 to 3 while (chnl_card.group (i).iom > 0);
						/* Look at 3 possible channel groups. */
	     call check_config_fields (chnl_cardp, addr (chnl_card.group (i).nchan));
						/* Make sure fields are all there */

	     adaptor_index = adaptor_index + 1;
	     adaptor (adaptor_index).channel_start = j;
	     adaptor (adaptor_index).channel_count = chnl_card.group (i).nchan;
	     adaptor (adaptor_index).channels_used = 0;
	     adaptor (adaptor_index).chantab_index = j;	/* note start */

	     do k = 0 to chnl_card.group (i).nchan - 1;	/* Determine channels in each group. */
		if j > dskdcl_chans_per_subsys then
		     goto TOO_MANY_CHANNELS;
		call io_chnl_util$iom_to_name ((chnl_card.group (i).iom), (chnl_card.group (i).chan + k),
		     chan_array (j), rcode);
		if rcode ^= 0 then
		     call syserr (CRASH, "^a: Invalid channel on CHNL ^a card", ME, chnl_card.name);
		j = j + 1;			/* Step channel index. */
	     end;
	end;

	disktab.nchan = j - 1;			/* Set total number of channels. */


/* Calculate start of channel table */

	disktab.channels = rel (addrel (diskp, currentsize (disktab)));

/* Tell the iom manager about the disk. */

	ci = 0;					/* No channel entries filled yet. */
	adaptor_count = adaptor_index;
	adaptor_index = 0;
	do i = 1 to disktab.nchan;			/* Iterate for all channels. */
re_scan_adaptor:
	     adaptor_index = mod (adaptor_index, adaptor_count) + 1;
	     if adaptor (adaptor_index).channel_count <= 0 then
		goto re_scan_adaptor;		/* skip empty slot */
	     else do;
		adaptor (adaptor_index).channel_count = adaptor (adaptor_index).channel_count - 1;
		k = adaptor (adaptor_index).channel_start + adaptor (adaptor_index).channels_used;
		adaptor (adaptor_index).channels_used = adaptor (adaptor_index).channels_used + 1;
		ci = ci + 1;
		idx = (sx * dskdcl_chans_per_subsys) + ci - 1;
						/* Compute channel identification index */
		cp = addr (ptr (disksp, disktab.channels) -> disk_channel_table (ci));
						/* get pointer to channel info */
		chantab.chanid = chan_array (k);	/* Save channel name */

		call io_manager$assign (chx, chan_array (k), dctl$disk_inter, (idx), chantab.statusp, rcode);
		if rcode ^= 0 then			/* If error ... */
		     if rcode ^= error_table_$io_not_configured then
			call syserr (CRASH, "^a: Unable to assign ^a for ^a.", ME, chan_array (k),
			     disk_data.name (sx));
		     else ;
		else do;
		     chantab.chx = chx;		/* Save io_manager index in channel table. */
		     chantab.in_use = "1"b;		/* Indicate it's in use. */
		     disktab.channels_online = disktab.channels_online + 1;
		end;

/* Fill in all constant information in the DCW list. */

		base = bit (absadr (addr (cp -> chantab.select_data.limit), rcode));
		if rcode ^= 0 then			/* Get absolute address of base of DCW list. */
absadr_error:
		     call syserr (CRASH, "^a: error ^w from absadr for ^a ^a", ME, rcode, disk_data.name (sx),
			chan_array (k));

		idcwp = addr (chantab.rstdcw);	/* Get pointer to restore IDCW. */
		idcw.command = "42"b3;		/* command = 42 (restore access arm) */
		idcw.code = "111"b;			/* command dcw */
		idcw.control = "10"b;		/* set control to "proceed" */
		idcw.chan_cmd = "02"b3;		/* non-data transfer */
		idcw.count = "01"b3;		/* count of 1 */

		idcwp = addr (chantab.scdcw);		/* Get pointer to seek IDCW. */
		idcw.command = seek_command (devt);	/* set the correct seek type for the devices on this channel */
		idcw.ext = substr (base, 1, 6);	/* address extension */
		idcw.code = "111"b;			/* command dcw */
		idcw.ext_ctl = "1"b;		/* Turn on address extension bit. */
		idcw.control = "10"b;		/* set control to proceed */

		dcwp = addr (chantab.sddcw);		/* Get pointer to seek data xfer DCW. */
		dcw.address = substr (base, 7);
		dcw.tally = "0001"b3;

		idcwp = addr (chantab.dcdcw);		/* Get pointer to disk read/write IDCW. */
		idcw.code = "111"b;			/* command dcw */
		idcw.ext_ctl = "1"b;		/* Turn on address extension bit. */

		dcwp = addr (chantab.dddcw);		/* Get pointer to disk data xfer DCW. */

		base = bit (absadr (addr (cp -> chantab.detailed_status), rcode));
		if rcode ^= 0 then
		     go to absadr_error;		/* Get absolute address for detailed status. */

		idcwp = addr (chantab.dscdcw);	/* Get pointer to read status IDCW. */
		idcw.command = "22"b3;		/* Read Status Register command */
		idcw.ext = substr (base, 1, 6);
		idcw.code = "111"b;
		idcw.ext_ctl = "1"b;

		dcwp = addr (chantab.dsddcw);		/* Get pointer to status data xfer DCW. */
		dcw.address = substr (base, 7);
		dcw.tally = "0004"b3;

		idcwp = addr (chantab.rssdcw);	/* Get pointer to reset status IDCW. */
		idcw.command = "00"b3;		/* Request Status command */
		idcw.ext = substr (base, 1, 6);
		idcw.code = "111"b;
		idcw.ext_ctl = "1"b;
	     end;
	end;

	return;


     end init_disk_database;

/* Check that specified fields exist on config card */

check_config_fields:
     proc (cardp, fieldp);

dcl	cardp		   ptr;			/* Pointer to config card */
dcl	fieldp		   ptr;			/* Pointer to field within that card */

dcl	field_inx		   fixed bin;		/* Index of field */

	field_inx = bin (rel (fieldp)) - bin (rel (cardp));
	if field_inx > cardp -> config_card.type_word.n_fields then
						/* Not there */
	     call syserr (CRASH, "^a: Invalid format for ^a^[ ^a^;^1s^] card.", ME, cardp -> config_card.word,
		(cardp -> config_card.type_word.field_type (1) = CONFIG_STRING_TYPE
		| cardp -> config_card.type_word.field_type (1) = CONFIG_SINGLE_CHAR_TYPE), cardp -> chnl_card.name);

     end check_config_fields;

%include config_chnl_card;
%page;
%include config_data_dcls;
%page;
%include config_deck;
%page;
%include config_prph_dsk_card;
%page;
%include dskdcl;
%page;
%include fs_dev_types;
%page;
%include io_chnl_util_dcls;
%page;
%include io_manager_dcls;
%page;
%include iom_dcw;
%page;
%include iom_pcw;
%page;
%include iom_stat;
%page;
%include pvte;
%page;
%include syserr_constants;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   disk_init: Invalid channel on PRPH DSKx card.
 
   S:	$crash

   T:	$init

   M:	An invalid channel specification was found on the PRPH DSKx card.



   Message:
   disk_init: Invalid channel on CHNL DSKx card.

   S:	$crash

   T:	$init

   M:	An invalid channel specification was found on the CHNL card for DSKx.



   Message:
   disk_init: Unable to assign CCCC for DSKx.

   S:	$crash

   T:	$init

   M:	An error has occurred trying to assign an IOM channel
   for the disk subsystem DSKX.

   A:	$recover
   Check the configuration deck and the operability of the hardware before rebooting.


   Message:
   disk_init: error WWWW from absadr for DSKX iom N, ch ZZ.

   S:	$crash

   T:	$init

   M:	$err

   A:	$recover
   $boot_tape


   Message:
   disk_init: Too many devices configured for DSKn.  Max device is N.

   S:	$crash

   T:	$init

   M:	The software limit for devices per subsystem has been exceeded.

   A:	Fix the config deck and reboot.


   Message:
   disk_init: Unknown model number NNNN on PRPH dskN.

   S: $crash

   T: $init

   M: The model number NNNN on the prph card for disk subsystem N is invalid.
 
   A: Correct the config deck and reboot.


   Message:
   disk_init: DSKn D1 must be configured if DSKn D2 is configured.

   S:	$crash

   T:	$init

   M:	Only one of a pair of devices that share a common spindle has been
   configured.

   A:	Change the config deck to include the missing device and reboot.


   Message:
   disk_init: Devices D1 and D2 of DSKn must have the same model number.

   S:	$crash

   T:	$init

   M:	Two devices that share a common spindle have been configured
   with different model numbers.

   A:	Correct the config deck and reboot.


   Message:
   disk_init: Too many channels configured for DSKn.  Limit is N.

   S:	$crash

   T:	$init

   M:	The per subsystem software limit for logical channels has been exceeded.

   A:	Fix the config deck and reboot.  If more channels are needed, split
   the configuration into more subsystems in the config deck.


   Message:
   disk_init: Invalid format for XXXX card.

   S:     $crash

   T:	$init

   M:	A required field on the XXXX card is not present.

   A:	$recover
   Fix the configuration deck and reboot.


   Message:
   disk_init: Disk model XXXX not found in config_data_.

   S:	$crash

   T:	$init

   M:	$err

   A:	$recover
   Fix the configuration deck and reboot.


   Message:
   disk_init: No valid disk models found on PRPH DSKx card.

   S:	$crash

   T:	$init

   M:	All disk model fields were found to be zero.

   A:     Fix the configuration deck and reboot.


   END MESSAGE DOCUMENTATION */

     end disk_init;
