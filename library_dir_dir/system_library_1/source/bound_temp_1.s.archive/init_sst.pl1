/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style4,insnl,delnl */
init_sst:
     procedure;

/* This procedure is called early in initialization to set up the sst:
   the page table words, the ast entries, and the core map are initialized.
   It is assumed that bootload_loader has loaded all supervisor segments in a block
   of contiguous core beginning with the end of the physical record buffer, and has loaded
   all initialization segments in a contiguous block of core at the top of core.
   The sst is allocated as high as possible on the bootload scu, but below
   initialization segments.

   Last Modified: (Date and Reason)
   85-03-08 Keith Loepere for the real covert event limits.
   85-02-12 Keith Loepere for another try at setting controller abs_wired.
   85-01-08 Keith Loepere to add covert channel variables.
   84-05-04 Keith Loepere for fix to setting abs_wired for memory controllers.
   84-01-05 BIM to finish below.
   831220 by E. N. Kittlitz for pc$segmove variables
   November 1983 by Keith Loepere for bce_sst_sizes.
   September 1983 by Keith Loepere for paged sst and core_map; also to 
	write_limit correctly for early initialization.
   07/20/82 BIM to redo WOS's early initialization entrypoint
   and memory clearing tricks for Bootload Multics.
   06/21/82 by E. N. Kittlitz to move core map.
   12/18/81 by J. Bongiovanni to remove pdmap, add ast hash table
   11/21/80 by J. Bongiovanni to allocate sst high on bootload scu
   2/19/79 by D. Spector to set sst.write_limit
   8/16/77 by B. Greenberg to obey mem card limits.
   2/9/76	by S. Webber for get_main and new reconfiguration stuff
   04/16/75 by BSG for SST name table on top of New Storage System
   10/03/71 by RHG to add PAGE card to config deck
   09/22/71 by RHG to set cmep->cme.contr earlier
   08/27/71 by Richard H. Gumpertz for page multi-level
*/

/* Automatic */

dcl  base fixed bin (18);				/* base page number (1024 word block) of system controller */
dcl  cm_size fixed bin (18);				/* size of core map (words) */
dcl  cmp ptr;
dcl  coresize fixed bin (18);				/* number of pages (max) in core */
dcl  early_call bit (1) aligned;
dcl  i fixed bin;
dcl  initbase fixed bin (18);				/* base page no for init segments */
dcl  memory_address fixed bin (26);
dcl  n_astes fixed bin;				/* total number of ASTEs */
dcl  n_buckets fixed bin;				/* number of AST hast table buckets */
dcl  next_available ptr;
dcl  page_no fixed bin (18);
dcl  pool_idx fixed bin;
dcl  scu_top fixed bin (18);				/* page number of high page on bootload scu */
dcl  size_mod_1024 fixed bin (18, -10);
dcl  sizes (0:3) fixed bin (18);			/* array for AST pool sizes */
dcl  sst_size fixed bin (18);
dcl  sst_absadr fixed bin (26);
dcl  total_base fixed bin (18);			/* page number of begin of sst/cm segments */
dcl  total_pages fixed bin (18);			/* number of pages in sst & cmp */
dcl  total_size fixed bin (21);			/* number of words in sst & cmp */
dcl  total_top fixed bin (18);			/* page number of end of cmp */
dcl  suptop fixed bin (18);				/* top page number for supervisor segments */
dcl  top fixed bin (18);				/* top page number of memory module */
dcl  uid_mask bit (36) aligned;			/* mask to strip out low-order bits of uid */

dcl  (cm_sdw, sst_sdw) fixed bin (71);
dcl  1 local_sst_card aligned like sst_card;

/* Static */

/* dcl  debug bit (1) aligned init ("1"b) static options (constant); /* build unpaged sst, core_map */ 
dcl  AVG_HT_DEPTH fixed bin int static options (constant) init (5);
						/* desired avg AST hash table depth */
dcl  HT_SIZES (6) fixed bin int static options (constant)	/* allowable AST hash table sizes */
	init (64, 128, 256, 512, 1024, 2048);
dcl  HT_UID_MASKS (6) bit (36) aligned int static options (constant)
						/* corresponding masks to strip out low-order uid bits */
	init ("000000000077"b3, "000000000177"b3, "000000000377"b3, "000000000777"b3, "000000001777"b3,
	"000000003777"b3);
dcl  PTS (0:3) fixed bin static init (4, 16, 64, 256) options (constant);
						/* Global constants */

dcl  WHOAMI char (8) init ("init_sst") int static options (constant);

/* Builtins */

dcl  (addr, addrel, baseno, divide, hbound, lbound, max, min, bit, bin, null, size, sum, unspec) builtin;

/* External */

dcl  core_map$ ext bit (36) aligned;
dcl  slt$ ext bit (36) aligned;
dcl  sys_boot_info$bce_sst_sizes (0:3) fixed bin ext static;
dcl  sys_boot_info$bootload_mem_size fixed bin (26) ext static;
dcl  unpaged_page_tables$ ext static;

/* Entries */

dcl  absadr entry (ptr, fixed bin (35)) returns (fixed bin (26));
dcl  config_$init_card entry (char (4) aligned, ptr);
dcl  config_$add entry (ptr, ptr);
dcl  config_$find_parm entry (char (4) aligned, ptr);
dcl  freecore entry (fixed bin (18));
dcl  get_main entry (ptr, fixed bin (18), fixed bin (71));
dcl  get_main$given_address entry (ptr, fixed bin (26), fixed bin (18), fixed bin (71));
dcl  init_aste_pools entry;
dcl  pmut$swap_sdw entry (ptr, ptr);
dcl  syserr entry options (variable);
dcl  config_$find entry (char (4) aligned, ptr);


early:
     entry;

/* This entrypoint is called to set up an SST for the early environment, */
/* where there is only sys_boot_info$bootload_mem_size available. */
/* This may or may not turn out to be the right SST setup for the */
/* returnable to system */

	call init_ptrs;				/* get seg ptrs to sst, core map, slt, etc. */

	early_call = "1"b;				/* Remember why we're here */

	sizes (*) = sys_boot_info$bce_sst_sizes (*);

	coresize = divide (sys_boot_info$bootload_mem_size, 1024, 26, 0);

	suptop = divide (slt.free_core_start + 1023, 1024, 18, 0);
						/* First page boundary after the wired supervisor */
	initbase = divide (slt.free_core_start + slt.free_core_size, 1024, 18, 0) - 1;
						/* first page boundary below the init segs */
	goto ALLOCATE_SST;


normal:
     entry;

/* This entrypoint is used for service boots. It pays attention to */
/* the config deck, rather than hoking the situation up */

	call init_ptrs;				/* get pointers to interesting places */

	early_call = "0"b;

/* Get storage for SST as function of SST card. */

	sst_cardp = null;
	call config_$find ("sst ", sst_cardp);		/* get SST card */
	if sst_cardp = null then do;
	     sst_cardp = addr (local_sst_card);		/* prepare to construct */
	     call config_$init_card (SST_CARD_WORD, sst_cardp);

	     sst_card.no_aste (0) = 400;
	     sst_card.no_aste (1) = 150;
	     sst_card.no_aste (2) = 50;		/* These add up to nice size */
	     sst_card.no_aste (3) = 20;		/* and Olin thought this needed to be this big */

	     do pool_idx = 1 to 4;
		sst_card.field_type (pool_idx) = CONFIG_DECIMAL_TYPE;
	     end;

	     call config_$add (sst_cardp, null);	/* add it in */


	     call syserr (BEEP, "^a: No SST card in config deck. One has been added: SST^2x^4(^d.^2x^)", WHOAMI,
		sst_card.no_aste);

	end;

	sizes (*) = sst_card.no_aste (*);		/* Copy them locally */


/* Now see how much storage has to be described in the core map */
/* Note that this code will work even if the supervisor segs */
/* overflow into a second controller. */


	suptop = divide (slt.free_core_start + 1023, 1024, 18, 0);
						/* First page boundary after the wired supervisor */
	initbase = divide (slt.free_core_start + slt.free_core_size, 1024, 18, 0) - 1;
						/* first page boundary below the init segs */

	scu_top = 0;
	coresize = 0;
	do i = 0 to 7;
	     if scs$controller_data (i).online | scs$controller_data (i).offline
						/* make sure controller is being used */
	     then do;
		coresize = max (coresize, scs$controller_data (i).size + scs$controller_data (i).base);
		if scs$controller_data (i).online then do;
		     base = scs$controller_data (i).base;
						/* starts at zero */
		     top = base + scs$controller_config_size (i) - 1;
						/* make zero based page number */
		     if base < suptop
		     then				/* controller abs-wired */
			if top > scu_top
			then scu_top = top;
		end;
	     end;
	end;


ALLOCATE_SST:					/* early and normal entrypoints join here, with coresize and other */
						/* handy variables set */
						/* Now see how big the Hash Table gets */

	n_astes = sum (sizes);			/* builtins are good things */

	n_buckets = divide (n_astes, AVG_HT_DEPTH, 17);
	do i = 1 to hbound (HT_SIZES, 1) while (n_buckets > HT_SIZES (i));
	end;
	if i > hbound (HT_SIZES, 1)
	then i = hbound (HT_SIZES, 1);
	n_buckets = HT_SIZES (i);
	uid_mask = HT_UID_MASKS (i);

/* Now we know enough to get size of sst segment */

	sst_size = size (sst) + n_buckets;
	do i = 0 to 3;				/* now include AST/PT storage */
	     sst_size = sst_size + (size (aste) + PTS (i)) * sizes (i);
	end;

	cm_size = coresize * size (cme) + 8;		/* The 8 is for a backstop to detect invalid zero threads ! */

	size_mod_1024 = sst_size + 1023;
	sst_size = size_mod_1024;			/* compiler bug stops obvious builtin form */
						/* i.e., fixed (fixed (foo, 18, -10), 18, 0) makes bad code */
	size_mod_1024 = cm_size + 1023;
	cm_size = size_mod_1024;


	if early_call				/* dont know from controllers, just shtup it someplace */
	then do;
	     call get_main (sstp, sst_size, sst_sdw);
	     call get_main (cmp, cm_size, cm_sdw);
	     call pmut$swap_sdw (sstp, addr (sst_sdw));
	     call pmut$swap_sdw (cmp, addr (cm_sdw));
/*	     if debug then call make_unpaged; */
	end;
	else do;
	     total_size = sst_size + cm_size;
	     size_mod_1024 = total_size + 1023;
	     total_pages = divide (size_mod_1024, 1024, 18, 0);
						/* and shift down */
						/* size of sst & cm in pages */

	     total_top = min (scu_top, initbase);	/* allocate as high as possible on bootload scu */
						/* but below init segs */
	     total_base = total_top - total_pages + 1;	/* base of sst; we want to use pages total_top, total_top -1, ... total_top - (total_pages + 1) */
						/* which is total_pages pages */

	     if total_base < suptop
	     then call syserr (CRASH, "init_sst: insufficient main storage for sst_seg and core map.");
						/* crash the system */

	     memory_address = total_base * 1024;
	     call get_main$given_address (sstp, memory_address, sst_size, sst_sdw);
	     call pmut$swap_sdw (sstp, addr (sst_sdw));	/* and make it addressable */

	     memory_address = (total_base * 1024) + sst_size;
	     call get_main$given_address (cmp, memory_address, cm_size, cm_sdw);
	     call pmut$swap_sdw (cmp, addr (cm_sdw));	/* and make it addressable */
/*	     if debug then call make_unpaged; */
	end;					/* non-early case */

declare  1 CME (0:coresize - 1) aligned like cme based (cmp);

	addr (flagbox$) -> fgbx.sst_sdw = unspec (sst_sdw);	/* tell BOS about sst area */

/* Now we have the SST -- we can fill it in */

	sst.astsize = size (aste);			/* Set the size of an AST entry */
	sst.cmesize = size (cme);			/* And a CM entry */
	sst_absadr = absadr (addr (sst_seg$), (0));
	addr (unpaged_page_tables$) -> upt.sst_absloc, sst.ptwbase = sst_absadr;
	addr (unpaged_page_tables$) -> upt.sst_last_loc = sst_absadr + sst_size - 1;

	do i = 0 to 3;
	     sst.pts (i) = PTS (i);
	     sst.no_aste (i) = bit (sizes (i), 18);
	end;

/* Now set up the core map. All core map entries to an initial "deconfigured" state */

	begin;
declare  BACK_STOP (8) bit (36) aligned based (cmp);
	     BACK_STOP = (36)"1"b;
	end;
	cmp = addrel (cmp, 8);			/* Skip 8 words of -1's that force faults */
						/* when the tnreads are invalid */

	sst.cmp = cmp;				/* sst pointer */

	begin;
declare  1 TEMPLATE_CME aligned like cme;
	     unspec (TEMPLATE_CME) = ""b;
	     TEMPLATE_CME.fp, TEMPLATE_CME.bp = "777777"b3;
	     CME (*) = TEMPLATE_CME;			/* compiler is clever with these */
	end;

/* Now set up pointers, etc., to the AST hash table */

	next_available = addrel (sstp, size (sst));
	sst.ast_ht_ptr = next_available;
	sst.ast_ht_n_buckets = n_buckets;
	sst.ast_ht_uid_mask = uid_mask;
	next_available = addrel (next_available, n_buckets);

	sst.astap, astep = next_available;

/* Set up wait events */

	sst.astl_event = "400000000000"b3;
	sst.temp_w_event = "200000000000"b3;		/* Set up temp wire lock event */

	call init_aste_pools;			/* init all the ASTE's */


/* Now initialize core map entries for all the memory we know about */
/* Put completely unused pages into the free pool, leave the rest */
/* untouched, and also not threaded in */
/* Collect_free_core will set the perm_wired pages to have -1 threads, */
/* and worry about the rest. */

	if ^early_call
	then do i = 0 to 7;				/* go through all memory controllers */
	     base = scs$controller_data (i).base;
	     top = base + scs$controller_config_size (i) - 1;
	     if scs$controller_data (i).online | scs$controller_data (i).offline
	     then begin;				/* update core map and core usage map */
declare  1 THIS_CTRL_CME (0:top - base) aligned like cme defined (CME (base));

		scs$controller_data (i).abs_wired = (base < suptop);
						/* remember if controller is absolute wired */

		THIS_CTRL_CME.contr = bit (bin (i, 3));
	     end;
	end;
	else do i = lbound (scs$controller_data, 1) to hbound (scs$controller_data, 1);	/* go through all memory controllers */
	     base = scs$controller_data (i).base;
	     top = base + 511;			/* only 512k used */
	     if (scs$controller_data (i).online | scs$controller_data (i).offline) & base = 0
	     then begin;				/* we found our bootload controller */
declare  1 THIS_CTRL_CME (0:top - base) aligned like cme defined (CME (base));

		scs$controller_data (i).abs_wired = "1"b;
						/* remember if controller is absolute wired */
						/* So that freecore calls will reflect into abs_usuable */
		THIS_CTRL_CME.contr = bit (bin (i, 3));
	     end;
	end;

	if early_call 
	then do page_no = divide (slt.free_core_start + 1023, 1024, 24, 0)
		to divide (slt.free_core_start + slt.free_core_size - 1, 1024, 24, 0) - 1;
						/* dont free first page of PVT */
	     call freecore (page_no);
	end;
	else do page_no = suptop to total_base - 1, total_top + 1 to initbase - 1;
						/* Skip the SST, low memory, and initsegs */
	     call freecore (page_no);
	end;

	sst.space (*) = -1;				/* BACKSTOP */

/* Set write_limit to reasonable value.  Final setting will be done at end of init_pvt. */
	sst.write_limit = slt.free_core_size / 8192;	/* 1/8th memory */

/* setup for pc$segmove */

	sst.segmove_lock.pid = ""b;
declare  SEGM char (4) init ("segm") int static options (constant);
	sst.segmove_lock.event = unspec (SEGM);
	sst.segmove_lock.notify = "0"b;
	sst.segmove_io_limit = 20;
	sst.segmove_found_synch = 0;
	sst.segmove_synch_disappeared = 0;
	sst.segmove_max_tries = 0;
	sst.segmove_astep, sst.segmove_old_addr_astep, sst.segmove_new_addr_astep = null;
						/* no pc segmove in progress */
	sst.segmove_pvtx, sst.segmove_vtocx = 0;

	sst.seg_state_change_limit = 256;		/* covert channel limits */
	sst.max_seg_state_change_bw = 50;
	sst.audit_seg_state_change_bw = 5;
	return;


/* Procedure to get things both entrypoints want */

init_ptrs:
     procedure;
	sstp = addr (sst_seg$);
	sstnp = addr (sst_names_$);
	sltp = addr (slt$);
	cmp = addr (core_map$);
     end init_ptrs;

/* routine to make sst and core_map unapged for BOS' sake */
/* make_unpaged:
     procedure;
	call sdw_util_$dissect (addr (sst_sdw), addr (sdwi));
	sdwi.paged = "0"b;
	sdwi.address = absadr (sstp, (0));
	call sdw_util_$construct (addr (sst_sdw), addr (sdwi));
	call pmut$swap_sdw (sstp, addr (sst_sdw));

	call sdw_util_$dissect (addr (cm_sdw), addr (sdwi));
	sdwi.paged = "0"b;
	sdwi.address = absadr (cmp, (0));
	call sdw_util_$construct (addr (cm_sdw), addr (sdwi));
	call pmut$swap_sdw (cmp, addr (cm_sdw));
	return;
     end; */

/* format: off */

%page; %include flagbox;
%page; %include null_addresses;
%page; %include scs;
%page; %include config_sst_card;
%include config_parm_card;
%include config_deck;
%page; %include sst;
%page; %include aste;
%page; %include slt;
%page; %include slte;
%page; %include cmp;
%page; %include sdw_info;
%page; %include sstnt;
%page; %include syserr_constants;
%page; %include unpaged_page_tables;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   init_sst: No SST card in config deck. One has been added: SST N N N N

   S:   $beep

   T:   $init

   M:   No SST card was found in the config deck. ASTE pool sizes
   of N N N N have been set as defaults.

   Message:
   init_sst: insufficient storage available for sst_seg and core map.

   S:     $crash

   T:	$init

   M:	Not enough main storage was available to create the sst_seg during
   initialization.  The system tape may be bad, or the configuration
   may be too small, or the system parameters specified in the
   configuration deck may be incorrect or inconsistent with the amount
   of main storage available.

   A:	$recover
   Check the configuration and the CONFIG deck
   $boot_tape

   END MESSAGE DOCUMENTATION */

     end init_sst;
