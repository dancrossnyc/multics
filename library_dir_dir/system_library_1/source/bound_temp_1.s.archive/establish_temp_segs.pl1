/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */
establish_temp_segs: proc;

/* Routine to cause the segments bootload_temp_n to be mapped onto
the boot partition.  It also creates the paged abs-segs multics_low_mem,
multics_high_mem, disk_config_deck and dump_seg.
Written by Keith Loepere, October 1983. */

/* format: style4,indattr,ifthenstmt,ifthen,idind33,^indcomtxt */

dcl  addr			        builtin;
dcl  bce_abs_seg$add	        entry (fixed bin (15));
dcl  bce_data$number_of_temp_segs     fixed bin external static;
dcl  character		        builtin;
dcl  codeptr		        builtin;
dcl  disk_config_deck$	        (4096) bit (36) aligned external;
dcl  divide		        builtin;
dcl  dump_seg$		        external;
dcl  first_record		        fixed bin (20);
dcl  ltrim		        builtin;
dcl  make_sdw$no_pages	        entry (fixed bin (15), fixed bin (71), ptr, ptr);
dcl  map_onto_disk		        entry (fixed bin, fixed bin (20), fixed bin, ptr, bit (1) aligned);
dcl  multics_high_mem$	        external;
dcl  multics_low_mem$	        external;
dcl  n_records		        fixed bin;
dcl  null			        builtin;
dcl  partition_sdw		        fixed bin (71);
dcl  pmut$swap_sdw		        entry (ptr, ptr);
dcl  ptp			        ptr;
dcl  pvt$root_pvtx		        fixed bin external static;
dcl  segno		        builtin;
dcl  slt$			        external;
dcl  slt_manager$get_seg_ptr	        entry (char (32) aligned) returns (ptr);
dcl  sys_boot_info$bce_part_frec      fixed bin (20) external static;
dcl  sys_boot_info$config_part_frec   fixed bin (20) external static;
dcl  sys_boot_info$rpv_cold_boot      bit (1) aligned external static;
dcl  sys_info$bce_max_seg_size        fixed bin (18) external static;
dcl  temp_seg_num		        fixed bin (15);
dcl  temp_seg_ptr		        ptr;
%page;
	sltp = addr (slt$);

	call map_onto_disk (pvt$root_pvtx, sys_boot_info$config_part_frec, 4, addr (disk_config_deck$), 
	     ^(sys_info$collection_1_phase = EARLY_INITIALIZATION & sys_boot_info$rpv_cold_boot));  /* disk contents don't matter for cold boot */
	call bce_abs_seg$add (segno (addr (disk_config_deck$)));

	call map_onto_disk (pvt$root_pvtx, sys_boot_info$bce_part_frec + SAVED_IMAGE_RECORDX, 256, addr (multics_low_mem$), "1"b);
	call bce_abs_seg$add (segno (addr (multics_low_mem$)));

	call map_onto_disk (pvt$root_pvtx, sys_boot_info$bce_part_frec + SAVED_IMAGE_RECORDX + 256, 256, addr (multics_high_mem$), "1"b);
	call bce_abs_seg$add (segno (addr (multics_high_mem$)));

	call make_sdw$no_pages (segno (addr (dump_seg$)), partition_sdw, astep, ptp);
	call pmut$swap_sdw (addr (dump_seg$), addr (partition_sdw));
	call bce_abs_seg$add (segno (addr (dump_seg$)));

	first_record = sys_boot_info$bce_part_frec + BCE_PAGING_AREA_RECORDX;

	temp_seg_ptr = codeptr (establish_temp_segs);	/* non-null */
	do temp_seg_num = 1 repeat temp_seg_num + 1 while (temp_seg_ptr ^= null);
	     temp_seg_ptr = slt_manager$get_seg_ptr ("bootload_temp_" || ltrim (character (temp_seg_num)));
	end;
	bce_data$number_of_temp_segs, temp_seg_num = temp_seg_num - 1; /* last temp seg no */
	n_records = divide (BCE_PAGING_AREA_LTH, temp_seg_num, 17); /* slice area evenly */
	sys_info$bce_max_seg_size = n_records * 1024;

	do temp_seg_num = 1 repeat temp_seg_num + 1;
	     temp_seg_ptr = slt_manager$get_seg_ptr ("bootload_temp_" || ltrim (character (temp_seg_num)));
	     if temp_seg_ptr = null then return;

	     sltep = addr (slt.seg (segno (temp_seg_ptr)));
	     slte_uns.max_length = n_records;

	     call map_onto_disk (pvt$root_pvtx, first_record, n_records, temp_seg_ptr, "0"b);
	     call bce_abs_seg$add (segno (temp_seg_ptr));

	     first_record = first_record + n_records;
	end;
	return;
%include aste;
%include bce_partition_layout;
%include collection_1_phases;
%include slt;
%include slte;
     end establish_temp_segs;
