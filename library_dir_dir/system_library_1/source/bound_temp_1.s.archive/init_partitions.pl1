/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */

/* format: style2 */

init_partitions:
     proc ();

/* format: off */

/* *	This procedure reads all the PART cards in the config deck, checks them against
   *	pack labels, 
   *	This used to be in init_pvt.
   *
   *	11/28/80, W. Olin Sibert
   *      7/82 BIM remove fixed bin (9), merge with stocks etc. 
   *         and flush wired_hardcore_data stuff.
   *	'82 for english error codes
   */

/****^  HISTORY COMMENTS:
  1) change(86-01-15,Fawcett), approve(86-04-11,MCR7383),
     audit(86-07-07,GDixon), install(86-07-17,MR12.0-1097):
     Change the format of part card for subvolumes.
  2) change(86-06-05,GJohnson), approve(86-06-05,MCR7387),
     audit(86-06-10,Martinson), install(86-07-17,MR12.0-1091):
     Correct error message documentation.
  3) change(88-03-05,Beattie), approve(88-05-31,MCR7864),
     audit(88-05-13,Brunelle), install(88-05-31,MR12.2-1046):
     Initialize pointer to pvte earlier so error messages will work.
                                                   END HISTORY COMMENTS */

/* format: on */

	dcl     P99		 picture "99" based;
	dcl     pvtx		 fixed bin;
	dcl     part_id		 char (4) aligned;	/* System-defined name of partition */
	dcl     part_name		 char (4) aligned;	/* Name of partition to use on this pack */
	dcl     part_idx		 fixed bin;
	dcl     code		 fixed bin (35);
	dcl     problem		 char (64);
	dcl     drive_no		 fixed bin;
	dcl     sv_no		 fixed bin;
	dcl     sv_idx		 fixed bin;
	dcl     label_buffer	 (512) fixed bin (71) automatic;
						/* Buffer for label reading */

	dcl     config_$find	 entry (char (4) aligned, pointer);
	dcl     read_disk_label	 entry (fixed bin, ptr, char (*), fixed bin (35));
	dcl     syserr		 entry options (variable);
	dcl     syserr$error_code	 entry options (variable);

	dcl     VALID_NUMBERS	 char (10) int static options (constant) init ("0123456789");
	dcl     WHOAMI		 char (32) internal static options (constant) init ("init_partitions:");

	dcl     (addr, bin, convert, index, null, rtrim, substr, verify)
				 builtin;


	labelp = addr (label_buffer);
	pvtp = addr (pvt$);
	pvt_arrayp = addr (pvt.array);

	part_cardp = null ();
GET_NEXT_PART_CARD:
	call config_$find (PART_CARD_WORD, part_cardp);
	if part_cardp = null ()
	then goto FOUND_ALL_PART_CARDS;		/* All done */

	part_id = part_card.name;			/* Find out which partition this is defining */

	if part_card.n_fields = 4
	then part_name = part_card.real_name;		/* Possibly the partition being defined actually */
						/* has a different name, so check first */
	else part_name = part_id;			/* But if none specified, then it's the same as the ID */

	if part_card.n_fields > 4
	then call syserr (BEEP, "^a Ignoring ""^a ^d."" on ^a part card.", WHOAMI, cold_part_card.highlow,
		cold_part_card.nrec, part_id);	/* Complain if this is a leftover cold boot card */

	sv_idx = verify (rtrim (part_card.drive), VALID_NUMBERS);
						/* check for non-numeric character */
	if sv_idx = 0
	then do;					/* non-subvolume device */
		drive_no = bin (part_card.drive, 17);
		sv_no = -1;
	     end;
	else if sv_idx > 1
	then do;					/* possible subvolume device */
		drive_no = bin (substr (part_card.drive, 1, sv_idx - 1), 17);
		sv_no = index (valid_sv_string, substr (rtrim (part_card.drive), sv_idx)) - 1;
		if sv_no = -1			/* bad subvolume indicator */
		then goto invalid_drive;
	     end;
	else do;					/* no valid drive number */
invalid_drive:
		call syserr (CRASH, "^a: Invalid device, ^a_^a, on ^a part card.", WHOAMI, part_card.subsystem,
		     part_card.drive, part_id);
		goto GET_NEXT_PART_CARD;		/* In case someone types GO */
	     end;

	do pvtx = 1 to pvt.n_entries
	     while (pvt_array (pvtx).devname ^= part_card.subsystem | pvt_array (pvtx).logical_area_number ^= drive_no
	     | pvt_array (pvtx).sv_num ^= sv_no);	/* Now, try to find the right volume */
	end;

	if pvtx > pvt.n_entries
	then do;					/* Sorry, not there */
		call syserr (CRASH, "^a Unable to locate ^a_^a for ^a partition.", WHOAMI, part_card.subsystem,
		     part_card.drive, part_id);
		goto GET_NEXT_PART_CARD;		/* In case someone types GO */
	     end;

READ_LABEL:
	call read_disk_label (pvtx, labelp, problem, code);
	if code ^= 0
	then do;
		call syserr$error_code (CRASH, code, "Error reading ^a_^a label. ^a", WHOAMI, part_card.subsystem,
		     part_card.drive, problem);
		goto READ_LABEL;			/* retry label read if GO typed */
	     end;

	pvtep = addr (pvt_array (pvtx));

	if label.nparts = 0
	then do;
		call syserr (CRASH, "^a There are no partitions in the label for ^a_^a^[^a^;^s^] (pvtx ^d).", WHOAMI,
		     pvte.devname, convert (P99, pvte.logical_area_number), pvte.is_sv, pvte.sv_name, pvtx);
		goto GET_NEXT_PART_CARD;		/* In case someone types GO */
	     end;

	do part_idx = 1 to label.nparts while (part_name ^= label.parts (part_idx).part);
						/* Search the label for the one we want */
	end;

	if part_idx > label.nparts
	then do;
		call syserr (CRASH, "^a part ^a^[ for part ^a^;^s^] not in label of ^a_^a^[^a^;^s^] (pvtx ^d)",
		     WHOAMI, part_name, (part_name ^= part_id), part_id, pvte.devname,
		     convert (P99, pvte.logical_area_number), pvte.is_sv, pvte.sv_name, pvtx);
		goto GET_NEXT_PART_CARD;		/* In case someone types GO */
	     end;

	pvte.permanent = "1"b;			/* Protect it against demounting */

	goto GET_NEXT_PART_CARD;


/* We come here when all is done. By rights, we ought to complain about missing
   required partitions here, but that logic isn't designed yet.
   */

FOUND_ALL_PART_CARDS:
	return;					/* All done */
%page;
%include pvt;
%page;
%include pvte;
%page;
%include fs_dev_types;
%page;
%include fs_vol_label;
%page;
%include config_part_card;
%page;
%include syserr_constants;

/* BEGIN MESSAGE DOCUMENTATION

Message:
init_partitions: Ignoring COLD_SPEC on PART_NAME part card.

S:     $beep

T:     $init

M:     Cold boot partition specifications were found for partition
PART_NAME, and will be ignored.

Message:
init_partitions: Invalid device, DISK_DRIVE, on PART_NAME part card.

S:     $crash

T:     $init

M:     An invalid drive definition has been found for the PART_NAME
part card.

A:     Fix PART card.

Message:
init_partitions: Unable to locate DISK_DRIVE for PART_NAME partition.

S:     $crash

T:     $init

M:     Partition PART_NAME is specified in the config deck for a non
existent DISK_DRIVE.

A:     Fix PART and/or PRPH DSK cards.

Message:
init_partitions: Error reading DISK_DRIVE label. PROBLEM ERROR_MESSAGE

S:     $crash

T:     $init

M:     An error has been detected attempting to read the label
of DISK_DRIVE.

A:     Correct problem and type "go" to retry the read.

Message:
init_partition: There are no partitions in the label for DISK_DRIVE (pvtx PVTX).

S:    $crash

T:    $init

M:    DISK_DRIVE has been specified on a part card, but has no partitions
defined in its label.

A:    Fix the config deck.

Message:
init_partition: part PART_NAME not in label of DISK_DRIVE (pvtx PVTX).

S:    $crash

T:    $init

M:    A PART card specified DISK_DRIVE as the location of partition PART_NAME,
but the label of DISK_DRIVE does not define it.

A:    Fix the config deck.

Message:
init_partition: part PART_NAME for part PART_ID not in label of DISK_DRIVE (pvtx PVTX).

S:    $crash

T:    $init

M:    A PART card specified DISK_DRIVE as the location of partition PART_NAME,
but the label of DISK_DRIVE does not define it.

A:    Fix the config deck.

END MESSAGE DOCUMENTATION */

     end init_partitions;
