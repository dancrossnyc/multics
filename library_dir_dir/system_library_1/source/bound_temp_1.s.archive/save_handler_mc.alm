" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1984 *
" *                                                         *
" ***********************************************************
	segdef	save_handler_mc
"
" Routine to save into the toehold the machine conditions needed
" to restart bootload Multics.  Keith Loepere, in '83.  
"
" Called with a pointer to the toehold.

" This program is used in concert with init_toehold and with toehold.  The
" idea is that the toehold needs a way to re-invoke bce.  To do this, it reads
" in the memory image of bce saved by init_toehold.  It restores certain
" processor registers, saved by this program and then transfers to bce.

" Subtleties:
"
" The toehold returns to bce by returning here, into save_handler_mc.  This is
" because it is the safest place to which to return, since the state of memory
" and the processor was saved here, and only accurately describes this point in
" time.
"
" When the toehold returns here, we simply return, as we did when called from
" init_toehold.  We thus end up in init_toehold, who is smart enough to tell
" that it is really the toehold that found its way there, and so it quickly
" starts the process of running the initialization pass needed to restart bce.
"
" Since init_toehold saves the memory before calling this program, the return
" data stored into memory by calling this program does not appear on disk.  So,
" we save in unused locations in the toehold data that information needed to
" reconstruct the return data in our caller's (init_toehold) stack frame so we
" may return to it.

"
	include	stack_frame
	include	toehold_save_dcls_
"
save_handler_mc:
	epp1	pr0|2,*			" to toehold$
	epp1	pr1|0,*
	ldaq	pr6|stack_frame.return_ptr	" we must save these
					" pointers since they were
					" stored into the stack after
					" it was written to disk
	staq	pr1|toehold.handler_mc+mc.scu+4
	ldaq	pr6|stack_frame.operator_ptr
	staq	pr1|toehold.handler_mc+mc.scu+6
	spri	pr1|toehold.handler_mc+mc.prs
	sreg	pr1|toehold.handler_mc+mc.regs_word
	spl	pr1|toehold.handler_mc+mc.eis_info
	sdbr	pr1|toehold.bce_dbr
	scpr	pr1|toehold.bce_mode_reg,06	" mode and cache mode reg
	sti	pr1|toehold.handler_mc+mc.scu+2
	tsp0	*+1				" get return addr
	spri0	pr1|toehold.handler_mc+mc.scu+0
	short_return
	end
