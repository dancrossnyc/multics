/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style2 */

make_segs_paged:
     proc;


/* 	last modified (date, by whom and reason):

    1/85 by Keith Loepere to recognize segments already paged.
   12/83 by Keith Loepere for breakpoint page support 
   9/83 by Keith Loepere to tolerate paged, wired segments
   7/82 BIM -- use stack_frame patch to remove need for special
   pmut swap/copy entry; rationalize names, slte_uns, flush gtpd.
   6/21/82 by E. N. Kittlitz to move core map.
   12/21/80 by W. Olin Sibert, to move setting of sst.write_limit into
      init_pvt, move high water mark announcement into (new) announce_chwm,
      and move call to collect_free_core into init_collection_1.
    8/24/79 by J. A. Bush to set the max length of the sstnt in the slte
      based on the number of aste entries
    2/19/79 by D. Spector to set sst. write_limit when done

    8/02/77 by Greenberg for pc_wired-calling.
    4/22/77 by B. Greenberg to stop special-casing prds, when it became
      deciduous.
    2/06/76 by S. Webber for new reconfiguration

   12/08/75 by Bernard Greenberg for pre-withdraw system wherein nothing
      gets truncated at shutdown time, for all is withdrawn against the
      hardcore partition.
    9/04/75 by Greenberg to gtpd sst_names_.
    4/16/75 by BSG for AST name table, in New Storage System.
    2/10/75 by Andre Bensoussan for New Storage System.

   10/08/74 by B. Greenberg for SST name table.
    7/18/74 by Mike Grady to rename this make_segs_paged from update_sst_pl1
      and move wiring code to make_sdw to remove aste.iw bit and allow
      certain collection 2 wired segs to be unthreaded.
    4/09/74 by S.Webber to wire down only first part of bound_sss_wired_
    3/19/74 by Bernard Greenberg for collect_free_core mechanism

   11/01/73 by RE Mullen: to v2pl1
    6/27/72 by Craig Jensen: to convert this code for the follow-on 645.
    4/06/72 by clj: to free up pages immediately after they are no longer
      needed; rather than waiting until the end of update_sst_pl1; this
      avoided some memory overflows which were occurring during the
      execution of the aste_create loop.
   */

	dcl     tsdw		 fixed bin (71);
	dcl     page_size		 fixed bin (18);

	dcl     sstnt_no		 fixed bin;
	dcl     dseg_no		 fixed bin;

	dcl     new_dbr		 fixed bin (71);
	dcl     new_seg_sdw		 fixed bin (71);

	dcl     abs_seg_ptr		 ptr;
	dcl     seg_ptr		 ptr;

	dcl     1 sorted_segs	 (0:300) aligned automatic,
						/* Array of seg. nos. sorted by their abs. mem. addr. */
		2 segnum		 fixed bin,
		2 add		 fixed bin (26);

	dcl     k			 fixed bin;
	dcl     idx		 fixed bin;
	dcl     segnum		 fixed bin;

	dcl     current_address	 fixed bin (26) aligned;
						/* Addr. of first word of current seg. */
	dcl     current_page	 fixed bin;	/* Page no. in which first word of current seg. resides. */
	dcl     high_page_to_free	 fixed bin;	/* Page no. of highest page in mem. yet to be freed. */
	dcl     seg_size		 fixed bin (19);	/* Size in words of current seg. */
	dcl     nsegs		 fixed bin;	/* No. of entries in the array; sorted_seg_nos. */
	dcl     new_address		 fixed bin (26) aligned;
						/* New value to be assigned to curloc. */

	dcl     dseg$		 (0:1023) fixed bin (71) external static;
						/* initializer's dseg */
	dcl     ds_seg$		 (0:1023) fixed bin (71) external static;
						/* new dseg being created for initializer */
	dcl     abs_seg$		 ext;		/* window seg through which copies are made */
	dcl     slt$		 ext;

	dcl     1 sst$level		 (0:3) aligned external,
		2 ausedp		 bit (18) unaligned,
		2 no_aste		 fixed bin (18) uns unal;

	dcl     sys_info$page_size	 fixed bin ext;
	dcl     pds$dstep		 bit (18) aligned ext;
	dcl     unpaged_page_tables$	 aligned ext;

	dcl     absadr		 entry (ptr, fixed bin (35)) returns (fixed bin (26));
	dcl     freecore		 entry (fixed bin);
	dcl     get_ptrs_$given_astep	 entry (ptr) returns (fixed bin (71));
	dcl     make_sdw		 entry (fixed bin, fixed bin (71), ptr, ptr);
	dcl     make_sdw$unthreaded	 entry (fixed bin, fixed bin (71), ptr, ptr);
	dcl     pc_wired$write	 entry (ptr, fixed bin, fixed bin);
	dcl     pmut$swap_sdw	 entry (ptr, ptr);
	dcl     pmut$ldbr		 entry (fixed bin (71));
	dcl     sdw_util_$get_size	 entry (pointer, fixed bin (19));
	dcl     sdw_util_$get_address	 entry (pointer, fixed bin (26));
	dcl     sdw_util_$set_access	 entry (pointer, bit (4) unaligned);
	dcl     syserr		 entry options (variable);
	dcl     thread$out		 entry (ptr, bit (18));

	dcl     (addr, baseno, baseptr, bin, bit, currentsize, divide, max, null, ptr, rel, segno, string, sum, unspec)
				 builtin;

	upt_ptr = addr (unpaged_page_tables$);
	abs_seg_ptr = addr (abs_seg$);
	sltp = addr (slt$);				/* Get a pointer to the SLT */
	sstnp = addr (sst_names_$);
	sstnt_no = bin (baseno (sstnp), 18);
	dseg_no = bin (baseno (addr (dseg$)), 18);
	page_size = sys_info$page_size;		/* Copy Page Size to Stack. */

/* Get an ASTE for the initializer's dseg, fill in values */

	call make_sdw$unthreaded (dseg_no, tsdw, astep, (null ()));
	pds$dstep = rel (astep);			/* Set rel pointer to chain of dseg's */

	call pmut$swap_sdw (addr (ds_seg$), addr (tsdw));

	ds_seg$ (dseg_no) = tsdw;			/* fill in SDW for dseg in new dseg being built */
	new_dbr = tsdw;				/* save descriptor segment base register */

	sltep = addr (slt.seg (sstnt_no));		/* get ptr to slte for sstnt */
	sstnt.nentries = sum (sst$level.no_aste);	/* get total number of astes */
	slte_uns.max_length = divide (currentsize (sstnt) + (page_size - 1), page_size, 9, 0);
						/* set the max length (in pages) */


/* Create an array which lists the segment nos. of the pageable segments; these segment nos. are
   sorted by the addresses of these segments. */

	nsegs = 0;				/* Init. no. segs. in this array. */
	do segnum = slt.first_sup_seg to slt.last_sup_seg, slt.first_init_seg to slt.last_init_seg;
	     sltep = addr (slt.seg (segnum));		/* get pointer to this seg's SLTE */
	     if (^slte.paged) | slte.abs_seg | slte.layout_seg
	     then do;				/* copy SDW directly if funny segment */
		     ds_seg$ (segnum) = dseg$ (segnum);
		     goto CHECK_NEXT_SEGMENT;
		end;

	     if dseg$ (segnum) = 0
	     then new_address = 0;			/* null seg */
	     else do;
		     call sdw_util_$get_address (addr (dseg$ (segnum)), new_address);
		     if new_address >= upt.sst_absloc & new_address <= upt.sst_last_loc
		     then do;			/* already paged */
			     ds_seg$ (segnum) = dseg$ (segnum);
			     goto CHECK_NEXT_SEGMENT;
			end;
		     new_address = absadr (baseptr (segnum), (0));
						/* real mem address */
		end;

	     nsegs = nsegs + 1;			/* Increm. no. segs. in array being built. */
	     if nsegs > hbound (sorted_segs, 1)
	     then /* Did array overflow? */
		call syserr (CRASH, "make_segs_paged: sorted_segs array overflowed.");

	     sorted_segs (nsegs).segnum = segnum;	/* Remember segnum and address in the array */
	     sorted_segs (nsegs).add = new_address;

	     do idx = nsegs to 1 by -1;		/* Scan the sorted array for the proper slot for "segnum". */
		if new_address > sorted_segs (idx).add
		then /* is the idx'th slot the right one? */
		     goto SLOT_FOUND;		/* Yes, exit from this loop. */
		sorted_segs (idx) = sorted_segs (idx - 1);
						/* Otherwise, bubble up */
	     end;

	     idx = 0;				/* If the loop falls out, first slot is the one sought. */

SLOT_FOUND:
	     sorted_segs (idx + 1).segnum = segnum;	/* Add the new segment in the right place. */
	     sorted_segs (idx + 1).add = new_address;

CHECK_NEXT_SEGMENT:
	end;					/* End of loop sorting segment addresses */


/* Make each of the pageable segments pageable by moving them to the pageable region in memory. */

	high_page_to_free = -1;			/* Indicate that this variable has to be initialized. */
LOOP_DOWN_SEGS:
	do idx = nsegs to 1 by -1;			/* Process the segment with the highest addr. next */
						/* so that region of memory can be freed without having */
						/* to be concerned if following portions of the last page */
						/* of the segment are still in use. */
	     segnum = sorted_segs (idx).segnum;		/* Get the seg. no. of highest seg. not yet freed. */
	     sltep = addr (slt.seg (segnum));		/* get pointer to this seg's SLTE */
	     seg_ptr = baseptr (segnum);		/* Get ptr. to seg. to be copied. */

	     if segnum = dseg_no
	     then goto SKIP;

	     call make_sdw (segnum, tsdw, astep, (null ()));
						/* Get the AST entry and the SDW */
	     if astep = null ()
	     then goto SKIP;			/* Don't attempt to allocate abs segs. */

/* Now move the i'th segment */

	     ds_seg$ (segnum) = tsdw;			/* fill in new SDW into new dseg */
	     if dseg$ (segnum) = 0
	     then do;				/* no prev segment (so don't free) */
		     call pmut$swap_sdw (seg_ptr, addr (tsdw));
						/* but new sdw (from make_sdw) good - clean up new seg */
		     call pc_wired$write (astep, 0, -1);
		     go to SKIP;
		end;


/* Having put the right thing into the new dseg, one might think that */
/* a copy of the contents is all that is needed. However, it is also */
/* neccessary to swap the old dseg (that is still in use) over to the */
/* paged copy, so that the storage can be freed. */

	     new_address = absadr (baseptr (segnum), (0));/* Get addr. of first word in original seg */
	     call sdw_util_$get_size (addr (dseg$ (segnum)), seg_size);
						/* Get size of seg. (in words). */

	     new_seg_sdw = tsdw;			/* save it with correct access */
	     call sdw_util_$set_access (addr (tsdw), "1010"b);
						/* Make the abs-seg RW */
	     call pmut$swap_sdw (addr (abs_seg$), addr (tsdw));

	     if slte_uns.breakpointable
	     then begin;
		     declare (from_bkpt_page_ptr, to_bkpt_page_ptr)
					      ptr;
		     declare (from_breakpoint_ptr, to_breakpoint_ptr)
					      ptr;
		     declare bkpt_num	      fixed bin;

		     seg_size = seg_size - 1024;	/* handle bkpt page separately */

/* We must copy over breakpoints set in this seg.
For wired segs this will overwrite the breakpoints with themselves in
breakpoint_page$, but this won't hurt. */

		     from_bkpt_page_ptr = addrel (seg_ptr, seg_size);
		     to_bkpt_page_ptr = addrel (abs_seg_ptr, seg_size);
		     do bkpt_num = 1 to dimension (from_bkpt_page_ptr -> bkpt_page.bkpts, 1);
			from_breakpoint_ptr = addr (from_bkpt_page_ptr -> bkpt_page.bkpts (bkpt_num));
			to_breakpoint_ptr = addr (to_bkpt_page_ptr -> bkpt_page.bkpts (bkpt_num));
			if segno (from_breakpoint_ptr -> breakpoint.original_instr_ptr) = segnum
			then to_breakpoint_ptr -> breakpoint = from_breakpoint_ptr -> breakpoint;
		     end;
		end;

/* When we process our own stack, the return address for pmut$swap_sdw */
/* would land in the old copy only. So it is filled in by hand here, */
/* which is just overwritten for all other segs. */

	     stackframeptr () -> stack_frame.return_ptr = codeptr (PMUT_RETURN_HERE);
	     begin;
		declare from		 (seg_size) bit (36) aligned based (seg_ptr);
		declare to		 (seg_size) bit (36) aligned based (abs_seg_ptr);
		to = from;
	     end;
	     call pmut$swap_sdw (seg_ptr, addr (new_seg_sdw));
PMUT_RETURN_HERE:
	     call pc_wired$write (astep, 0, -1);	/* Get it out to disk */

/* Free the pages of the old ith seg. */

	     current_address = new_address;		/* Get addr. of first word in seg. i. */
	     current_page = divide (current_address + page_size - 1, page_size, 12, 0);
						/* Get page no. of page into which
						   current_address points. */
	     high_page_to_free = divide (current_address + seg_size - 1, page_size, 12, 0);
						/* No, get the highest page no. */
	     do k = current_page to high_page_to_free;	/* Loop to free all pages now available. */
		call freecore (k);			/* Free a page. */
	     end;
SKIP:
	end LOOP_DOWN_SEGS;

/* Now switch over to the new descriptor segment */

	call pmut$ldbr (new_dbr);			/* switch to the new paged dseg */
	addr (flagbox$) -> fgbx.hc_dbr = unspec (new_dbr);

	tsdw = 0;
	call pmut$swap_sdw (addr (abs_seg$), addr (tsdw));/* cleanup */

	sstnt.names = "";				/* touch all the names, initialize them, and withdraw the pages */

	return;


/* format: off */
%page; %include aste;
%page; %include bce_breakpoint_page;
%page; %include flagbox;
%page; %include mc;
%page; %include slt;
%page; %include slte;
%page; %include sstnt;
%page; %include stack_frame;
%page; %include syserr_constants;
%page; %include unpaged_page_tables;

/*  */

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   make_segs_paged: sorted_segs array overflowed.

   S: $crash

   T: $init

   M: The number of paged segments in collection 1 is larger than
   the internal buffer in the program make_segs_paged required to
   sort them by main memory address. This indicates an error in
   construction of the system (i.e., too many header entries), or
   may be symptomatic of main memory or CPU hardware problems.

   A: If this recurs, revert to a previous system tape. No emergency
   shutdown is needed. 

   END MESSAGE DOCUMENTATION */

	end make_segs_paged;
