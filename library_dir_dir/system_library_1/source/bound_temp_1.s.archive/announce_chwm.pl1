/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-05-13,GJohnson), approve(86-05-13,MCR7387),
     audit(86-05-13,Martinson), install(86-05-14,MR12.0-1056):
     Correct error message documentation.
                                                   END HISTORY COMMENTS */


/* format: style2 */

announce_chwm:
     proc ();

/* format: off */
/* *	This procedure announces the value of the Collection One High Water Mark,
   *	once before, and once after segments are made paged.
   *
   *	Extracted from init_sst and make_segs_paged, 12/21/80 W. Olin Sibert
   * 	Modified September 1983 by Keith Loepere for high marks on unpaged page tables.
   */

/* format: on */

	dcl     parm_ptr		 pointer;

	dcl     ptp		 pointer;		/* Can't be declared in silly include files */
	dcl     wired_bit		 bit (1) aligned;
	dcl     suptop		 fixed bin;
	dcl     initbase		 fixed bin;
	dcl     n_pages		 fixed bin;
	dcl     wired		 fixed bin;
	dcl     total		 fixed bin;

	dcl     int_unpaged_page_tables$
				 external static;
	dcl     slt$		 fixed bin external static;
	dcl     sst_seg$		 external static;
	dcl     sstp		 pointer;
	dcl     cmp		 pointer;
	dcl     sst$cmp		 ptr ext static;
	dcl     sst$usedp		 bit (18) external static;
	dcl     sys_info$system_type	 fixed bin external static;
	dcl     unpaged_page_tables$	 external static;

	dcl     config_$find_parm	 entry (char (4) aligned, pointer);
	dcl     syserr		 entry options (variable);
	dcl     sys_boot_info$contig_mem_size
				 fixed bin (26) ext static;

	dcl     (addr, divide, pointer, rel, null, segno)
				 builtin;

/*  */

announce_chwm$before:
     entry ();

/* Announce the number of pages left over after collection one loaded and initialized */

	call config_$find_parm ("chwm", parm_ptr);	/* Should we bother? */
	if parm_ptr = null ()
	then return;

	sltp = addr (slt$);

	suptop = divide (slt.free_core_start + 1023, 1024, 17, 0);
	initbase = divide ((slt.free_core_start + slt.free_core_size - 1), 1024, 17, 0);

	total = divide (sys_boot_info$contig_mem_size, 1024, 17, 0);
	n_pages = total - (initbase - suptop);

	call syserr (ANNOUNCE, "announce_chwm: ^d. pages used of ^d. in wired environment.", n_pages, total);

	upt_ptr = addr (int_unpaged_page_tables$);
	call syserr (ANNOUNCE, "announce_chwm: ^d. words used of ^d. in int_unpaged_page_tables.", upt.current_length, upt.max_length);
	return;

/*  */

announce_chwm$after:
     entry ();

/* Announce the number of pages left after segs are made paged */

	call config_$find_parm ("chwm", parm_ptr);	/* Should we bother? */
	if parm_ptr = null ()
	then return;

	sltp = addr (slt$);
	sstp = addr (sst_seg$);
	cmp = sst$cmp;

	total = 0;
	wired = 0;

	cmep = pointer (cmp, sst$usedp);		/* scan the used list */
	ptp = pointer (sstp, cme.ptwp);

	if sys_info$system_type = ADP_SYSTEM
	then wired_bit = adp_ptw.wired;
	else wired_bit = l68_ptw.wired;

	if ptp = sstp
	then total = total + 1;
	else if wired_bit
	then wired = wired + 1;
	else total = total + 1;

	do cmep = pointer (cmep, cme.fp) repeat pointer (cmep, cme.fp) while (rel (cmep) ^= sst$usedp);

	     ptp = pointer (sstp, cme.ptwp);		/* get pointer to page table word */
	     if sys_info$system_type = ADP_SYSTEM
	     then wired_bit = adp_ptw.wired;
	     else wired_bit = l68_ptw.wired;

	     if ptp = sstp
	     then /* free */
		total = total + 1;
	     else if wired_bit
	     then wired = wired + 1;
	     else total = total + 1;
	end;

	call syserr (ANNOUNCE, "announce_chwm: ^d. pages wired, ^d. pages usable.", wired, total);

	upt_ptr = addr (unpaged_page_tables$);
	call syserr (ANNOUNCE, "announce_chwm: ^d. words used of ^d. in unpaged_page_tables.", upt.current_length, upt.max_length);
	return;					/* End of announce_chwm$after */

%page;
%include slt;
%page;
%include cmp;
%page;
%include "ptw.l68";
%page;
%include "ptw.adp";
%page;
%include syserr_constants;
%page;
%include system_types;
%page;
%include unpaged_page_tables;

/*  */

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   announce_chwm: WWW. pages used of XXX. in wired environment.

   S: $info

   T: $init

   M: This message is produced when the CHWM parameter is specified on
   the PARM CONFIG card. WWW is the number of pages of memory which
   remain unused (out of a maximum of XXX) after all the segments in 
   collection one have been loaded, and all the segments constructed by 
   collection one have been created.

   A: $ignore


   Message:
   announce_chwm: WWW. words used of XXX. in int_unpaged_page_tables.

   S: $info

   T: $init

   M: This message is produced when the CHWM parameter is specified on
   the PARM CONFIG card.  WWW is the number of words of the XXX word 
   long segment int_unpaged_page_tables used to hold page tables for
   temporary collection 1 segments.

   A: $ignore


   Message:
   announce_chwm: WWW pages wired, UUU pages usable.

   S: $info

   T: $init

   M: This message is produced when the CHWM paramter is specified on
   the PARM CONFIG card. WWW is the number of wired pages in collection
   one. UUU is the number of available main memory frames, including those
   occupied by wired pages, but not those occupied by unpaged segments.

   A: $ignore


   Message:
   announce_chwm: WWW. words used of XXX. in unpaged_page_tables.

   S: $info

   T: $init

   M: This message is produced when the CHWM parameter is specified on
   the PARM CONFIG card.  WWW is the number of words of the XXX word long 
   segment unpaged_page_tables used to hold page tables for permanent
   "unpaged" segments.

   A: $ignore

   END MESSAGE DOCUMENTATION */

     end announce_chwm;
