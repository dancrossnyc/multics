/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */

/* find_rpv_subsystem -- use sys_boot_info (or ask the operator) */
/* to locate the RPV when there is no config deck. BIM 8/82 */
/* Modified 2/83 by Keith Loepere to use bce_command_processor_ and
     environment */
/* Modified '83 by Keith Loepere for skipping firmware load on command. */
/* Modified 3/84 by Keith Loepere to use hc_load_mpc$test_controller */
/* Modified September of 1984 by Allen Ball to ask a better question. */

/****^  HISTORY COMMENTS:
  1) change(85-09-09,Farley), approve(85-09-09,MCR6979),
     audit(86-01-17,CLJones), install(86-03-21,MR12.0-1033):
     FIPS support.
  2) change(86-01-09,Fawcett), approve(86-04-11,MCR7383),
     audit(86-06-02,GDixon), install(86-07-17,MR12.0-1097):
     Add subvolume support for MSU3380 and MSU3390.
  3) change(86-04-22,Farley), approve(86-07-18,MCR7439),
     audit(86-08-18,Fawcett), install(86-10-20,MR12.0-1189):
     Changed to initialize all possible ss_info.flags.
  4) change(87-10-19,Farley), approve(88-02-26,MCR7796),
     audit(88-03-04,Fawcett), install(88-03-15,MR12.2-1035):
     Added use of sys_boot_info$default_rpv_data.  If data in non-null then
     operator will be queried for authentication.  If data is acceptable then
     standard rpv input request will be skipped.
  5) change(87-10-21,Farley), approve(88-02-26,MCR7796),
     audit(88-03-04,Fawcett), install(88-03-15,MR12.2-1035):
     Added validity checking of the sys_boot_info values when
     sys_boot_info$boot_without_query is set.
                                                   END HISTORY COMMENTS */

/* format: style2 */

find_rpv_subsystem:
     procedure;

/* Tasks are:
   1) find the rpv, using sys_boot_info if the data is valid.
   2) call init_early_config$disk to reflect the data. 
   3) boot RPV firmware.
*/

	declare error_table_$bad_command_name
				 fixed bin (35) ext static;
	declare error_table_$device_not_active
				 fixed bin (35) ext static;
	declare sys_boot_info$default_rpv_data
				 char (24) unaligned external static;
	declare sys_boot_info$rpv_cold_boot
				 bit (1) aligned external static;
	declare sys_boot_info$boot_without_query
				 bit (1) aligned external static;
	declare sys_boot_info$disk_device_has_sv
				 bit (1) aligned external static;
	declare sys_boot_info$disk_device_sv
				 fixed bin (17) external static;
	declare sys_boot_info$disk_device_number
				 fixed bin (6) external static;
	declare sys_boot_info$disk_model_number
				 fixed bin external static;
	declare sys_boot_info$disk_mpc_chanid
				 char (8) external static;
	declare sys_boot_info$disk_mpc_model_number
				 fixed bin external static;

	declare bce_query		 ext entry options (variable);
	declare bce_query$yes_no	 entry options (variable);
	declare boot_rpv_subsystem	 entry (char (*), fixed bin (35));
	declare com_err_		 entry options (variable);
	declare hc_load_mpc$test_controller
				 entry (char (8) aligned, fixed bin (35));
	declare ioa_		 entry options (variable);
	declare ioa_$rsnnl		 entry options (variable);
	declare init_early_config$disk entry external;
	declare syserr		 entry options (variable);
	declare cv_dec_check_	 entry (char (*), fixed bin (35)) returns (fixed bin (35));

	declare answer		 char (32);
	declare pz999		 pic "z999" based;
	declare cold_boot		 bit (1) aligned;
	declare yes_no		 bit (1);
	declare loaded_firmware	 bit (1) aligned;
	declare skip_firmware_load	 bit (1) aligned;
	declare ipc_controller	 bit (1) aligned init ("0"b);
	declare controllerx		 fixed bin;
	declare controller_fwid	 char (32);
	declare code		 fixed bin (35);
	declare ME		 char (32) init ("find_rpv_subsystem") internal static options (constant);

	declare (addr, convert, hbound, index, null, search, string, substr, translate)
				 builtin;		/* format: off */
%page; %include fs_dev_types;
%page; %include io_chnl_util_dcls;
%page; %include config_data_dcls;
%page; %include syserr_constants;
/* format: on */


RETRY:
	skip_firmware_load = "0"b;
	loaded_firmware = "0"b;
	cold_boot = "0"b;
	if ^sys_boot_info$boot_without_query
	then call QUERY;				/* will set loaded_firmware */
	else do;

/**** Data already in sys_boot_info. Verify its correctness and continue if
      all is well. Otherwise reset boot_without_query and query the operator
      for the proper response. */

		if ^CHECK_CHANNEL (sys_boot_info$disk_mpc_chanid)
		then go to RESET_N_RETRY;

		if sys_boot_info$disk_mpc_model_number = -1
		then answer = "ipc";
		else answer = convert (pz999, sys_boot_info$disk_mpc_model_number);
		if ^CHECK_MPC_MODEL (answer, controllerx)
		then go to RESET_N_RETRY;

		answer = convert (pz999, sys_boot_info$disk_model_number);
		if ^CHECK_DRIVE_MODEL (answer)
		then go to RESET_N_RETRY;

		call ioa_$rsnnl ("^d^[^a^;^s^]", answer, 0, sys_boot_info$disk_device_number,
		     sys_boot_info$disk_device_has_sv, valid_sv_array (sys_boot_info$disk_device_sv));
		if ^CHECK_DRIVE_NUMBER (answer)
		then go to RESET_N_RETRY;

		loaded_firmware = LOAD_MPC ();
		if ^loaded_firmware
		then do;
			call ioa_ ("^a: Firmware load failed. If RPV parameters were incorrect, then reenter", ME);
			call ioa_ ("    To give up respond ""shut"".");
		     end;
	     end;

	if ^loaded_firmware				/* global set in QUERY */
	then do;
RESET_N_RETRY:
		sys_boot_info$boot_without_query = "0"b;
		go to RETRY;
	     end;

/* Arrive here on success */


	sys_boot_info$rpv_cold_boot = cold_boot;	/* Advertise */
	call init_early_config$disk;			/* We got it right, record it */

	return;


QUERY:
     procedure;

	cold_boot = ""b;


	if QUERY_BRIEF ()
	then return;				/* one-line response given */

ASK_AGAIN:
	cold_boot = "0"b;
COLD_ASK_CHANNEL:
	call bce_query (answer, "^a: Enter RPV subsystem base channel, as Icc^[, or ""cold""^]. ", ME, ^cold_boot);
	if (answer = "cold" | answer = """cold""") & ^cold_boot
	then do;
		if CHECK_COLD ()
		then cold_boot = "1"b;
		go to COLD_ASK_CHANNEL;
	     end;

	else if answer = "shut" | answer = """shut"""
	then go to SHUTDOWN_REQUESTED;

	if ^CHECK_CHANNEL (answer)			/* side effect -- set sys_boot_info */
	then go to COLD_ASK_CHANNEL;

RE_ASK_SUBSYSTEM:
	call bce_query (answer, "^a: Enter RPV subsystem MPC model: ", ME);

	if ^CHECK_MPC_MODEL (answer, controllerx)
	then go to RE_ASK_SUBSYSTEM;

	if ^LOAD_MPC ()				/* get success before bothering with other questions */
	then go to ASK_AGAIN;

RE_ASK_DRIVE_MODEL:
	call bce_query (answer, "^a: Enter RPV disk drive model: ", ME);

	if ^CHECK_DRIVE_MODEL (answer)
	then go to RE_ASK_DRIVE_MODEL;

RE_ASK_DRIVE:
	call bce_query (answer, "^a: Enter RPV drive device number: ", ME);

	if ^CHECK_DRIVE_NUMBER (answer)
	then go to RE_ASK_DRIVE;
	call bce_query$yes_no (yes_no,
	     "^a: RPV is a model ^d drive, number ^d^[^a^;^1s^] on ^[MPC ^a (Model ^a)^;ipc ^a^1s^]^[, and this is a COLD boot^].^/    Is this correct? ",
	     ME, sys_boot_info$disk_model_number, sys_boot_info$disk_device_number, sys_boot_info$disk_device_has_sv,
	     valid_sv_array (sys_boot_info$disk_device_sv), (sys_boot_info$disk_mpc_model_number ^= -1),
	     sys_boot_info$disk_mpc_chanid, config_data_$mpc_msp_model_names.names (controllerx).name, cold_boot);
	if ^yes_no
	then go to ASK_AGAIN;

	return;


QUERY_BRIEF:
     procedure returns (bit (1) aligned);

%include bce_subsystem_info_;
	declare bce_command_processor_ entry (character (*), entry (ptr, char (*), fixed bin (35)) returns (entry), ptr,
				 fixed binary (35));
	declare cu_$arg_count_rel	 entry (fixed bin, ptr, fixed bin (35));
	declare cu_$arg_ptr_rel	 entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
	declare line		 char (132);
	declare code		 fixed bin (35);
	declare 1 my_ss_info	 aligned like ss_info;

	ss_info_ptr = addr (my_ss_info);
	ss_info.request_table_ptr = null ();		/* we find our own commands */
	ss_info.abort_label = RETURN_FAILURE;
	ss_info.name = "find_rpv_subsystem";
	ss_info.arg_list_ptr = null ();
	ss_info.info_ptr = null ();
	string (ss_info.flags) = ""b;
	ss_info.flags.forbid_semicolons = "1"b;

	if sys_boot_info$default_rpv_data ^= ""
	then do;
		line = sys_boot_info$default_rpv_data;
		call bce_query$yes_no (yes_no, "^a: Default RPV data is ""^a""^/Is this correct? ", ME, line);
		if yes_no
		then go to EXPAND_LINE;
		else line = "";
	     end;
AGAIN:
	call bce_query (line, "^a: Enter RPV data: ", ME);
EXPAND_LINE:
	call bce_command_processor_ (line, CF, ss_info_ptr, code);
	if code = 100				/* null line */
	then do;
		call ioa_ ("null line");
		go to AGAIN;
	     end;
	if code ^= 0
	then do;
		call com_err_ (code, ME, "Type ""help"" for help.");
		go to AGAIN;
	     end;

/* Control arrives at one of the following labels by non-local goto */

RETURN_SUCCESS:
	if ^LOAD_MPC ()
	then go to AGAIN;
	else return ("1"b);

RETURN_FAILURE:
	return ("0"b);


CF:
     procedure (Info_ptr, Command, Code) returns (entry);
	declare Command		 character (*);
	declare Code		 fixed binary (35);
	declare Info_ptr		 ptr;

	Code = 0;
	if Command = "help" | Command = "?"
	then return (HELP);
	else if Command = "query"
	then go to RETURN_FAILURE;
	else if Command = "rpv"
	then return (WARM);
	else if Command = "cold"
	then return (COLD);
	else if Command = "shut"
	then go to SHUTDOWN_REQUESTED;
	else if Command = "skip_load" | Command = "skip"
	then return (SKIP);
	else do;
		Code = error_table_$bad_command_name;
		return (null_entry_);
	     end;
     end CF;


HELP:
     procedure (Arg_list_ptr) options (non_quick);
	declare Arg_list_ptr	 ptr;

	call ioa_ ("For an ordinary boot, enter:");
	call ioa_ ("    rpv Icc MPC_Model Drive_Model Drive_Number");
	call ioa_ (" Where: I is the iom tag, cc is the base channel in decimal,");
	call ioa_ ("        MPC_Model is MPC Model, ");
	call ioa_ ("        Drive_Model is RPV drive model number, and ");
	call ioa_ ("        Drive_Number is the RPV device number.");
	call ioa_ ("^/For a cold boot, enter:");
	call ioa_ ("    cold Icc MPC_Model Drive_Model Drive_Number");
	call ioa_ ("^/To skip the firmware loading of the MPC, enter");
	call ioa_ ("    skip_load or skip");
	call ioa_ ("^/If this still is not clear, enter ""query"" for a setp-by-step query");
	go to AGAIN;
     end HELP;

SKIP:
     procedure (Arg_list_ptr) options (non_quick);
	declare Arg_list_ptr	 pointer;

	skip_firmware_load = "1"b;
	go to AGAIN;
     end SKIP;

WARM:
     procedure (Info_ptr);
	declare Info_ptr		 pointer;
	declare ap		 pointer;
	declare al		 fixed bin (21);
	declare arg		 character (al) based (ap);
	declare arg_count		 fixed bin;
	declare arg_list_ptr	 pointer;
	declare cold		 bit (1) aligned;

	cold = "0"b;
	go to COMMON;

COLD:
     entry (Info_ptr);

	cold = "1"b;
COMMON:
	arg_list_ptr = Info_ptr -> ss_info.arg_list_ptr;
	call cu_$arg_count_rel (arg_count, arg_list_ptr, (0));
	if arg_count ^= 4
	then
SYNTAX:
	     do;
		call ioa_ ("Invalid syntax. Type ""help"" for help.");
		go to AGAIN;
	     end;

	call cu_$arg_ptr_rel (1, ap, al, (0), arg_list_ptr);
	if ^CHECK_CHANNEL (arg)
	then go to AGAIN;

	call cu_$arg_ptr_rel (2, ap, al, (0), arg_list_ptr);
	if ^CHECK_MPC_MODEL (arg, controllerx)
	then go to AGAIN;

	call cu_$arg_ptr_rel (3, ap, al, (0), arg_list_ptr);
	if ^CHECK_DRIVE_MODEL (arg)
	then go to AGAIN;

	call cu_$arg_ptr_rel (4, ap, al, (0), arg_list_ptr);
	if ^CHECK_DRIVE_NUMBER (arg)
	then go to AGAIN;

	if cold
	then if ^CHECK_COLD ()
	     then go to AGAIN;
	     else cold_boot = "1"b;
	go to RETURN_SUCCESS;
     end WARM;

COMMON:
     end QUERY_BRIEF;

CHECK_COLD:
     procedure returns (bit (1) aligned);
	declare yes_no		 bit (1) aligned;
	call bce_query$yes_no (yes_no,
	     "^a: Booting cold will destroy all data on the RPV.^/   Are you sure that you want to boot cold? ", ME);
	return (yes_no);
     end CHECK_COLD;
     end QUERY;
%page;
CHECK_CHANNEL:
     procedure (Chanid) returns (bit (1) aligned);
	declare Chanid		 character (*);

	sys_boot_info$disk_mpc_chanid = translate (Chanid, "ABCD", "abcd");

	call io_chnl_util$name_to_iom ((sys_boot_info$disk_mpc_chanid), (0), (0), code);
	if code ^= 0				/* not an error table code */
	then do;
		call ioa_ ("^a is not a valid channel.", Chanid);
		call ioa_ ("     Use Icc, where I is the IOM tag (A, B, C, or D), and");
		call ioa_ ("     cc is the channel number, in decimal.");
		return ("0"b);
	     end;
	return ("1"b);
     end CHECK_CHANNEL;


CHECK_MPC_MODEL:
     procedure (Model, Controllerx) returns (bit (1) aligned);
	declare Model		 char (*);
	declare Controllerx		 fixed bin;
	declare x			 fixed bin;

	sys_boot_info$disk_mpc_model_number = cv_dec_check_ (Model, code);

	if code ^= 0
	then do;
		if Model = "ipc"
		then do;
			sys_boot_info$disk_mpc_model_number = -1;
						/* not firmware to load */
			ipc_controller = "1"b;
			skip_firmware_load = "1"b;
			Controllerx = 1;
			return ("1"b);
		     end;
		else do;
			call ioa_ ("^a is not a decimal number or ipc.", Model);
			call ioa_ ("An example of MPC model numbers is: MSP0600 -> 600 .");
			return ("0"b);
		     end;
	     end;

	do x = 1 to config_data_$mpc_msp_model_names.count;
	     if sys_boot_info$disk_mpc_model_number = config_data_$mpc_msp_model_names.names (x).model
	     then do;
		     Controllerx = x;
		     controller_fwid = config_data_$mpc_msp_model_names.names (Controllerx).fw_tag;
		     ipc_controller = "0"b;
		     return ("1"b);
		end;
	end;


	call ioa_ ("^a: ^d is not a known disk MPC model number.", ME, sys_boot_info$disk_mpc_model_number);
	return ("0"b);
     end CHECK_MPC_MODEL;


CHECK_DRIVE_MODEL:
     procedure (Model) returns (bit (1) aligned);
	declare Model		 char (*);
	declare x			 fixed bin;

	sys_boot_info$disk_model_number = cv_dec_check_ (Model, code);
	if code ^= 0
	then do;
bad_drive_model:
		call ioa_ ("^a is not a valid decimal number.", Model);
		call ioa_ ("An example of a drive model number is: MSU0451 -> 451.");
		return ("0"b);
	     end;
	do x = 1 to hbound (MODELN, 1) while (MODELN (x) ^= sys_boot_info$disk_model_number);
	end;
	if x > hbound (MODELN, 1)
	then goto bad_drive_model;
	if number_of_sv (x) > 1
	then sys_boot_info$disk_device_has_sv = "1"b;
	if ipc_controller
	then do x = 1 to hbound (config_data_$ipc_msp_model_names.valid_drives, 2);
		if sys_boot_info$disk_model_number
		     = config_data_$ipc_msp_model_names.names (controllerx).valid_drives (x)
		then return ("1"b);
	     end;

	else do x = 1 to hbound (config_data_$mpc_msp_model_names.valid_drives, 2);
		if sys_boot_info$disk_model_number
		     = config_data_$mpc_msp_model_names.names (controllerx).valid_drives (x)
		then return ("1"b);
	     end;

	call ioa_ ("Drive model ^d is not supported on MPC model ^d.", sys_boot_info$disk_model_number,
	     sys_boot_info$disk_mpc_model_number);
	return ("0"b);

     end CHECK_DRIVE_MODEL;


CHECK_DRIVE_NUMBER:
     procedure (Number) returns (bit (1) aligned);
	declare Number		 char (*);
	declare starting_dev	 fixed bin;
	declare last_dev		 fixed bin;
	declare x			 fixed bin;
	declare max_sv		 fixed bin;
	declare number		 char (8);
	declare valid_sv_subarray	 (max_sv) char (1) based (addr (valid_sv_string));
	if sys_boot_info$disk_device_has_sv
	then do;
		do x = 1 to hbound (MODELN, 1) while (MODELN (x) ^= sys_boot_info$disk_model_number);
		end;
		max_sv = number_of_sv (x);
		x = search (Number, substr (valid_sv_string, 1, max_sv));
		if x = 0
		then do;
			call ioa_ ("^d devices have ^d subvolumes ^a^( or ^a^)", sys_boot_info$disk_model_number,
			     max_sv, valid_sv_subarray);
			call ioa_ ("An example: 05b would indicate subvolume 2");
			return ("0"b);
		     end;
		else do;
			number = substr (Number, 1, (x - 1));
			sys_boot_info$disk_device_sv = index (valid_sv_string, substr (Number, x, 1)) - 1;
		     end;
	     end;
	else number = Number;
	sys_boot_info$disk_device_number = cv_dec_check_ (number, code);
	if code ^= 0
	then do;
		call ioa_ ("^a is not a valid decimal number.", Number);
		return ("0"b);
	     end;
	last_dev = 0;

/* The sys_boot_info$disk_model_number has been validated by CHECK_DRIVE_MODEL
   before this code is executed */

	do x = 1 to hbound (config_data_$disk_drive_model_names.names, 1) while (last_dev = 0);
	     if sys_boot_info$disk_model_number = config_data_$disk_drive_model_names.model (x)
	     then do;
		     if config_data_$disk_drive_model_names.device_0_valid (x)
		     then do;
			     starting_dev = 0;
			     last_dev = 31;
			end;
		     else do;
			     starting_dev = 1;
			     last_dev = 63;
			end;
		end;
	end;

	if sys_boot_info$disk_device_number > last_dev | sys_boot_info$disk_device_number < starting_dev
	then do;
		call ioa_ ("Device numbers may range from ^d to ^d. ^d is invalid.", starting_dev, last_dev,
		     sys_boot_info$disk_device_number);
		return ("0"b);
	     end;
	return ("1"b);
     end CHECK_DRIVE_NUMBER;
%page;
LOAD_FIRMWARE:
     procedure (loaded);

	declare loaded		 bit (1) aligned;

	loaded = "0"b;

	call boot_rpv_subsystem (controller_fwid, code);
	if code = 0
	then do;
		loaded = "1"b;
		return;
	     end;

	call com_err_ (code, ME, "Firmware load failed.");
	return;
     end LOAD_FIRMWARE;


LOAD_MPC:
     procedure returns (bit (1) aligned);
	declare yes_no		 bit (1) aligned;

	if skip_firmware_load
	then do;
		loaded_firmware = "1"b;
		return ("1"b);
	     end;
	loaded_firmware = "0"b;

	call hc_load_mpc$test_controller ((sys_boot_info$disk_mpc_chanid), code);
	if code = 0
	then do;
		loaded_firmware = "1"b;
		return ("1"b);
	     end;

	if code ^= error_table_$device_not_active
	then do;
		call com_err_ (code, ME, "Error testing mpc on channel ^a.", sys_boot_info$disk_mpc_chanid);
		call ioa_ ("The channel may be incorrect. Please reenter.");
		sys_boot_info$boot_without_query = "0"b;
		go to RETRY;
	     end;

	do while ("1"b);
	     call LOAD_FIRMWARE (loaded_firmware);

	     if loaded_firmware
	     then return ("1"b);

	     call ioa_ ("^a: Firmware load failed for ^d disk MPC on base channel ^a.", ME,
		sys_boot_info$disk_mpc_model_number, sys_boot_info$disk_mpc_chanid);
	     call bce_query$yes_no (yes_no, "^a: Do you want to retry firmware load with the same parameters? ", ME);
	     if ^yes_no
	     then return ("0"b);
	end;
     end LOAD_MPC;

SHUTDOWN_REQUESTED:
	call syserr (CRASH, "^a: Shutdown.", ME);

null_entry_:
     entry;
     end find_rpv_subsystem;
