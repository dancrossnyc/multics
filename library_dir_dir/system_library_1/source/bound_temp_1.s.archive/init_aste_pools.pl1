/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */
/* format: style2 */


init_aste_pools: proc ();

/* format: off */

/* This procedure initializes all the ASTEs and initializes them. It also sets
   up some pointers in the (currently unpaged) name table, as well. */

/* Written 03/24/81, W. Olin Sibert, extracted from init_sst and made more efficient
   Modified 04/17/81, WOS, for ptw_util_$make_null
   */

/* format: on */

dcl  page_idx fixed bin;
dcl  pool_idx fixed bin;
dcl  aste_idx fixed bin;
dcl  aste_size fixed bin (10);
dcl  aste_count fixed bin;
dcl (prev_aste_offset, next_aste_offset) fixed bin (18) unsigned;
dcl (first_astep, last_astep) pointer;
dcl  astnoff fixed bin (18);
dcl  ptp pointer;

dcl 1 template_aste aligned automatic,
    2 aste_part like aste aligned,
    2 page_table (256) bit (36) aligned;

dcl  template_ptw bit (36) aligned;

dcl 1 aste_threads aligned automatic,			/* Used to generate the threads */
    2 next fixed bin (18) unsigned unaligned,
    2 prev fixed bin (18) unsigned unaligned;

dcl  based_thread_word bit (36) aligned based;		/* For assigning the threads to word zero of the ASTE */
dcl  aste_overlay (aste_size) bit (36) aligned based;	/* For assigning the whole ASTE */

dcl  ptw_util_$make_null entry (pointer, bit (22) aligned);

dcl (addr, addrel, binary, bit, rel) builtin;

/*  */

	sstp = addr (sst_seg$);			/* Initialize */
	sstnp = addr (sst_names_$);

	unspec (template_aste) = ""b; 		/* Initialize the template */
	template_aste.marker = "02"b3;		/* Put DF2 in the last word of the ASTE */

	call ptw_util_$make_null (addr (template_ptw), init_sst_null_addr); /* Fabricate a PTW */

	template_aste.page_table (*) = template_ptw;	/* All init_sst ptws are the same */

	astnoff = 0;				/* SST names start at zero */
	astep = sst.astap;				/* Beginning of ASTE array */

	do pool_idx = 0 to 3;
	     aste_count = binary (sst.no_aste (pool_idx), 18);
	     aste_size = size (aste) + sst.pts (pool_idx);

	     first_astep = astep;			/* And its first and last members */
	     last_astep = addrel (first_astep, (aste_count - 1) * aste_size);

	     template_aste.ptsi = bit (binary (pool_idx, 2), 2); /* Set up the template properly for this pool */

	     sstnp -> sstnt.ast_offsets (pool_idx) = binary (rel (astep), 18); /* Initialize pool base */
	     sstnp -> sstnt.ast_name_offsets (pool_idx) = astnoff; /* set up array index base aswell */
	     sstnp -> sstnt.ast_sizes (pool_idx) = aste_size; /* set up ASTE size for easy calc. */
	     astnoff = astnoff + aste_count;		/* SSTNT initialization */

	     aste_threads.prev = binary (rel (first_astep), 18) - aste_size; /* Use these to thread in "by hand" */
	     aste_threads.next = binary (rel (first_astep), 18) + aste_size;

	     do aste_idx = 1 to aste_count;		/* loop through for number of entries for this size */
		astep -> aste_overlay = addr (template_aste) -> aste_overlay;
		astep -> based_thread_word = unspec (aste_threads); /* "thread" it in */
		aste_threads.next = aste_threads.next + aste_size; /* and update to the next ASTE */
		aste_threads.prev = aste_threads.prev + aste_size;
		astep = addrel (astep, aste_size);	/* and point to the next one */
		end;				/* of a single pool */

	     first_astep -> aste.bp = rel (last_astep);	/* Thread in the first and last ASTEs properly */
	     last_astep -> aste.fp = rel (first_astep);

	     sst.ausedp (pool_idx) = rel (first_astep);	/* And initialize the list pointer */
	     end; 				/* of loop through pools */

	return;

/* format: off */

%page; %include system_types;
%page; %include aste;
%page; %include null_addresses;
%page; %include sstnt;
%page; %include sst;

	end init_aste_pools;
