/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-01-16,Fawcett), approve(86-04-11,MCR7383),
     audit(86-05-13,Coppola), install(86-07-17,MR12.0-1097):
     Created to find correct pvtx given disk name. (Subvolume changes).
                                                   END HISTORY COMMENTS */
/* format: off */
/* This program will find the index for a pvte in the pvt$array from the device name.

 dcl disk_name_pvtx entry (char (8), fixed bin, fixed bin (35));

 call disk_name_pvtx (disk_name, pvtx, code);

where:
   disk_name is the name of the device which has the format dsk<subsystem>_<number><subvolume>, dska_02, or dskb_00b. (Input)

   pvtx is the index in the pvt$array for the disk if found (Output).

   code is  0 for pvtx valid,
	  error_table_$resource_unknown (could not find device)
	  error_table_$subvol_needed (device requires subvolume and none given)
	  error_table_$subvol_invalid (device does not have subvolumes or the does not have the supplied subvolume).

The subsys_dev entry point is called when the caller has the subsystem and
device number as two variables. "dska" for the subsystem and "1a" for the
device number. This entry can be called without converting dska_1a to dska_01a.

 dcl disk_name_pvtx$subsys_dev entry
        (char (4), char (4), fixed bin (17), fixed bin (35);

 call disk_name_pvtx$subsys_dev (a_subsys, a_dev, a_pvtx, a_code);

where:
 a_subsys is the name of the disk subsystem (e.g., dska).

 a_dev is the device number (e.g., 01a, 12b, 1, or 1c).

 a_pvtx and a_code are the same as above.

*/
%page;
/* format: on */
disk_name_pvtx:
     proc (a_dev_name, a_pvtx, a_code);

	dcl     a_code		 fixed bin (35);
	dcl     a_dev_name		 char (8);
	dcl     a_dev		 char (4);
	dcl     a_pvtx		 fixed bin;
	dcl     a_subsys		 char (4);


/* Automatic */

	dcl     code		 fixed bin (35);
	dcl     devname		 char (4);
	dcl     devnum		 fixed bin;
	dcl     inc		 fixed bin;
	dcl     name_length		 fixed bin;
	dcl     subsys		 char (4);
	dcl     sv_idx		 fixed bin;
	dcl     the_sv		 char (1);
	dcl     pvtx		 fixed bin;


/* EXT Entry */

	dcl     cv_dec_check_	 entry (char (*), fixed bin (35)) returns (fixed bin (35));

/* Builtins */

	dcl     (addr, after, before, index, length, rtrim, search, substr) builtin;

/* Error codes */


	dcl     error_table_$resource_unknown fixed bin (35) ext static;
	dcl     error_table_$subvol_needed fixed bin (35) ext static;
	dcl     error_table_$subvol_invalid fixed bin (35) ext static;
%page;

	name_length = length (rtrim (a_dev_name));
	if name_length < 7 then goto no_such_drive;
	if index (a_dev_name, "_") ^= 5 then goto no_such_drive;
	subsys = before (a_dev_name, "_");
	devname = after (a_dev_name, "_");
	goto common_checks;


disk_name_pvtx$subsys_dev:
     entry (a_subsys, a_dev, a_pvtx, a_code);

	subsys = a_subsys;
	devname = a_dev;

common_checks:

/* make sure we are talking about a disk */
	if substr (subsys, 1, 3) ^= "dsk" then goto no_such_drive;

	inc = search (devname, valid_sv_string);
	if inc = 0 then do;
		the_sv = "";
						/* if the subvolume is not a valid sv then this check will fail */
		devnum = cv_dec_check_ (rtrim (devname), code);
	     end;
	else do;
		the_sv = substr (devname, inc, 1);
		devnum = cv_dec_check_ (substr (devname, 1, (inc - 1)), code);
	     end;

	if code ^= 0 then goto no_such_drive;

	if devnum >= 65 then goto no_such_drive;

	pvtp = addr (pvt$);
	pvt_arrayp = addr (pvt.array);
						/* find the first or only entry for the dev */
	do pvtx = 1 to pvt.n_entries while
	     (pvt_array (pvtx).devname ^= subsys |
	     pvt_array (pvtx).logical_area_number ^= devnum);
	end;
	if pvtx > pvt.n_entries then goto no_such_drive;	/* So don't bother with the subvolume */

	sv_idx = number_of_sv (pvt_array (pvtx).device_type);
	if sv_idx ^= 0 then do;
						/* the type of device requires the subvolume */
		if the_sv = "" then goto need_sub;
		inc = index (substr (valid_sv_string, 1, sv_idx), the_sv) - 1;
		if inc < 0 then goto not_valid_sv;	/* subvolume not correct for this device type */
		pvtx = pvtx + inc;
		if (pvt_array (pvtx).devname ^= subsys |
		     pvt_array (pvtx).logical_area_number ^= devnum |
		     pvt_array (pvtx).sv_name ^= the_sv) then goto no_such_drive;
	     end;
	else if the_sv ^= "" then goto no_such_drive;	/* subvolume supplied but device not divided into subvolumes */
	if pvtx > pvt.n_entries then goto no_such_drive;
	a_pvtx = pvtx;
	a_code = 0;
	return;
not_valid_sv:
	a_code = error_table_$subvol_invalid;
	goto Error_exit;
no_such_drive:
	a_code = error_table_$resource_unknown;
	goto Error_exit;
need_sub:
	a_code = error_table_$subvol_needed;
Error_exit:
	return;
%page;
%include fs_dev_types;
%page;
%include pvt;
%page;
%include pvte;
     end disk_name_pvtx;
