/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-01-17,Fawcett), approve(86-04-11,MCR7383),
     audit(86-05-13,Coppola), install(86-07-17,MR12.0-1097):
     Changed for part card change, and call disk_name_pvtx, subvolume
     support.
                                                   END HISTORY COMMENTS */


find_partition: proc (a_part_name, a_pvtx, a_pvid, a_first_record, a_n_records, a_code);

/* Find the pvtx, etc. of a partition given its name, and, optionally, a disk
drive.  Taken from partition_io by Keith Loepere, January 1985. */

/* format: style2 */

	dcl     (
	        a_code		 fixed bin (35),
	        a_drive_name	 char (*),	/* drive no in subsystem */
	        a_first_record	 fixed bin (18),	/* First record of partition */
	        a_n_records		 fixed bin (18),	/* Number of records in partition */
	        a_part_name		 char (*),	/* Name of partition */
	        a_pvid		 bit (36) aligned,	/* PVID of volume with partition */
	        a_pvtx		 fixed bin,	/* PVTE index */
	        a_subsystem		 char (4)		/* as in dska */
	        )			 parameter;

	dcl     code		 fixed bin (35);
	dcl     drive_name		 char (4);
	dcl     part_idx		 fixed bin;
	dcl     part_name		 char (4) aligned;
	dcl     part_pvtx		 fixed bin (8);
	dcl     pvtx		 fixed bin (17);
	dcl     record_buffer	 (1024) bit (36) aligned;
	dcl     subsys		 char (4);
	dcl     system_initializing	 bit (1);

	dcl     error_table_$nopart	 fixed bin (35) external static;
	dcl     pvt$n_entries	 fixed bin external static;
	dcl     pvt$root_pvtx	 fixed bin external static;

	dcl     disk_name_pvtx$subsys_dev
				 entry (char (4), char (4), fixed bin (17), fixed bin (35));
	dcl     config_$find_2	 entry (char (4) aligned, char (4) aligned, ptr);
	dcl     read_disk		 entry (fixed bin (8), fixed bin (18), pointer, fixed bin (35));

	dcl     (addr, null)	 builtin;
%page;
	a_code = 0;

	part_name = a_part_name;
	call config_$find_2 ("part", part_name, part_cardp);
	if part_cardp = null ()
	then do;
NO_PART:
		a_code = error_table_$nopart;
		return;
	     end;
	subsys = part_card.subsystem;
	drive_name = part_card.drive;
	goto find_pvtx;

given_drive:
     entry (a_part_name, a_subsystem, a_drive_name, a_pvtx, a_pvid, a_first_record, a_n_records, a_code);

	a_code = 0;

	part_name = a_part_name;
	drive_name = a_drive_name;
	subsys = a_subsystem;


find_pvtx:
	pvt_arrayp = addr (pvt$array);
	system_initializing = ^pvt_array (pvt$root_pvtx).used;

	call disk_name_pvtx$subsys_dev (subsys, drive_name, pvtx, code);
	if code ^= 0
	then do;
		a_code = code;
		return;
	     end;

	pvtep = addr (pvt_array (pvtx));
	if ^(pvte.used | system_initializing)
	then goto NO_PART;
	part_pvtx = pvtx;


	labelp = addr (record_buffer);

	call read_disk (part_pvtx, 0, labelp, code);
	if code ^= 0
	then do;
		a_code = code;
		return;
	     end;

	do part_idx = 1 to label.nparts;
	     if label.parts (part_idx).part = part_name
	     then do;
		     a_pvtx = part_pvtx;
		     a_pvid = pvte.pvid;
		     a_first_record = label.parts (part_idx).frec;
		     a_n_records = label.parts (part_idx).nrec;
		     return;
		end;
	end;

	a_code = error_table_$nopart;
	return;
%page;
%include config_part_card;
%page;
%include fs_vol_label;
%page;
%include pvte;
%page;
/* %include fs_dev_types; */
     end;
