/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(85-09-09,Farley), approve(85-09-09,MCR6979),
     audit(86-01-16,CLJones), install(86-03-21,MR12.0-1033):
     Support FIPS by
     adding "ipc fips" card.
                                                   END HISTORY COMMENTS */

/* config deck searches and the like */

/* Written Patriots' Day, 1983 by Chris Jones */
/* Modified Jan 1985 by Paul Farley to add IPC FIPS. */

/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
ioi_config:
     proc;

dcl	p_chanid		   char (8) aligned;

dcl	chanid		   char (8) aligned;
dcl	channo		   fixed bin (7);
dcl	code		   fixed bin (35);
dcl	iomno		   fixed bin (3);
dcl	portno		   fixed bin;

dcl	config_$find	   entry (char (4) aligned, ptr);

dcl	(divide, hbound, lbound, max, null, substr)
			   builtin;

/* Entry to find the controller (e.g. MPC or IPC) card in the config deck which contains a given channel.
   It returns a pointer to the first such card it finds (there should only be one of them)
   or null if it can't find one. */

find_controller_card:
     entry (p_chanid) returns (ptr);

	call find_controller_card_proc;
	return (mpc_cardp);

/* Entry to return the base channel of the given channel. */

find_base_channel:
     entry (p_chanid) returns (char (8) aligned);

	call find_controller_card_proc;		/* leaves mpc_cardp pointing at the right card */
	if mpc_cardp = null () then
	     return ("");				/* let our caller decide what to make of this */
	if mpc_card.word = IPC_CARD_WORD then do;
	     ipc_cardp = mpc_cardp;
	     if (ipc_card.iom = iomno) & (ipc_card.chan <= channo) & (channo < ipc_card.chan + ipc_card.nchan) then do;
		call io_chnl_util$iom_to_name (ipc_card.iom, (ipc_card.chan), chanid, code);
		if code = 0 then
		     return (chanid);
		else return ("");			/* oh well... */
	     end;
	end;
	if (substr (mpc_card.name, 1, 3) ^= "msp") & (substr (mpc_card.name, 1, 3) ^= "mtp") then
	     return (p_chanid);			/* not a multiplexed MPC, every channel is a base */

	do portno = lbound (mpc_card_array.port, 1) to hbound (mpc_card_array.port, 1);
	     if (mpc_card_array.port (portno).iom = iomno) & (mpc_card_array.port (portno).chan <= channo)
		& (channo < mpc_card_array.port (portno).chan + mpc_card_array.port (portno).nchan) then do;
		call io_chnl_util$iom_to_name (mpc_card_array.port (portno).iom, (mpc_card_array.port (portno).chan),
		     chanid, code);
		if code = 0 then
		     return (chanid);
		else return ("");			/* oh well... */
	     end;
	end;

	return ("");				/* can't happen... */

find_controller_card_proc:
     proc;

	chanid = p_chanid;
	mpc_cardp, ipc_cardp = null ();		/* Start at the beginning of the config deck. */
	call io_chnl_util$name_to_iom (chanid, iomno, channo, code);
	if code ^= 0 then
	     return;				/* illegal chanid, can't be on any mpc card */

	call config_$find (MPC_CARD_WORD, mpc_cardp);	/* find first mpc card */
	do while (mpc_cardp ^= null ());		/* ...or until we find what we're looking for */
	     do portno = lbound (mpc_card_array.port, 1) to hbound (mpc_card_array.port, 1);
		if (mpc_card_array.port (portno).iom = iomno) & (mpc_card_array.port (portno).chan <= channo)
		     & (channo < mpc_card_array.port (portno).chan + mpc_card_array.port (portno).nchan) then
		     return;			/* this is the one */
	     end;
	     call config_$find (MPC_CARD_WORD, mpc_cardp);/* on to the next one */
	end;

	call config_$find (IPC_CARD_WORD, ipc_cardp);	/* find first ipc card */
	do while (ipc_cardp ^= null ());		/* ...or until we find what we're looking for */
	     if ipc_card.type = IPC_FIPS then do;	/* for now only fips */
		if (ipc_card.iom = iomno) & (ipc_card.chan <= channo) & (channo < ipc_card.chan + ipc_card.nchan)
		then do;
		     mpc_cardp = ipc_cardp;		/* this is the one */
		     return;
		end;
	     end;
	     call config_$find (IPC_CARD_WORD, ipc_cardp);/* on to the next one */
	end;
	return;					/* wasn't on any of the card, signal failure */

     end find_controller_card_proc;

%include io_chnl_util_dcls;
%page;
%include config_mpc_card;
%page;
%include config_ipc_card;
     end ioi_config;
