/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-03-04,CLJones), approve(86-07-30,MCR7461),
     audit(86-07-31,Coren), install(86-08-19,MR12.0-1120):
     Allow workspace size to be changed when direct channels aren't active;
     allow a status queue for devices attached to direct channels.
  2) change(86-11-17,Farley), approve(86-11-20,MECR0002),
     audit(86-11-19,Fawcett), install(86-11-20,MR12.0-1222):
     Added check for channel being deleted or already deleted to the
     channel_required entry. It will now return a non-zero error code for these
     cases.
  3) change(86-12-19,Farley), approve(86-12-19,MCR7587),
     audit(86-12-19,Fawcett), install(87-01-05,MR12.0-1253):
     Formal installation to close out above MECR0002.
                                                   END HISTORY COMMENTS */


/* Entries to set various IOI parameters (timeout, event channel, etc.) */
/* Started by Charlie Hornig, finished by Chris Jones. */
/* Modified 1984-08-09 BIM for direct channel support */
/* Modified March 1985 by Keith Loepere to properly copy arguments. */

/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
ioi_set:
     procedure;

dcl	p_channel		   fixed bin (7) parameter;
dcl	p_code		   fixed bin (35) parameter;
dcl	p_devx		   fixed bin parameter;
dcl	p_evchn		   fixed bin (71) parameter;
dcl	p_iom		   fixed bin (3) parameter;
dcl	p_count		   fixed bin parameter;
dcl	p_offset		   fixed bin (18) parameter;
dcl	p_ring		   fixed bin (3) parameter;
dcl	p_time		   fixed bin (71) parameter;
dcl	p_workspace_ptr	   ptr parameter;
dcl	p_workspace_size	   fixed bin (19) parameter;

dcl	chanid		   char (8) aligned;
dcl	channel		   fixed bin (7);
dcl	code		   fixed bin (35);
dcl	devx		   fixed bin;
dcl	evchn		   fixed bin (71);
dcl	iom		   fixed bin (3);
dcl	n_entries		   fixed bin;
dcl	offset		   fixed bin (18);
dcl	ring		   fixed bin (3);
dcl	time		   fixed bin (71);
dcl	workspace_ptr	   ptr;
dcl	workspace_size	   fixed bin (19);

dcl	error_table_$bad_channel
			   fixed bin (35) ext static;
dcl	error_table_$bad_ring_brackets
			   fixed bin (35) ext static;
dcl	error_table_$buffer_big
			   fixed bin (35) ext static;
dcl	error_table_$chnl_already_deleted
			   fixed bin (35) ext static;
dcl	error_table_$chnl_being_deleted
			   fixed bin (35) ext static;
dcl	error_table_$dev_offset_out_of_bounds
			   fixed bin (35) ext static;
dcl	error_table_$device_active
			   fixed bin (35) ext static;
dcl	error_table_$no_operation
			   fixed bin (35) ext static;
dcl	error_table_$time_too_long
			   fixed bin (35) ext static;

dcl	pds$validation_level   fixed bin (3) external;
dcl	sys_info$page_size	   fixed bin external;
dcl	sys_info$seg_size_256K fixed bin external;

dcl	ioi_page_table$get	   entry (fixed bin (19), fixed bin, fixed bin (35));
dcl	ioi_page_table$ptx_to_ptp
			   entry (fixed bin) returns (ptr);
dcl	ioi_page_table$put	   entry (fixed bin, fixed bin (35));
dcl	ioi_device$get_dtep	   entry (fixed bin, ptr, fixed bin (35));
dcl	ioi_device$unlock	   entry (ptr);
dcl	ioi_usurp_channels$required
			   entry (ptr, fixed bin (35));
dcl	ioi_wire$unwire	   entry (ptr);
dcl	ioi_workspace$set_rb   entry (ptr, fixed bin (35));
dcl	ioi_workspace$set_max_size
			   entry (ptr, fixed bin (35));

dcl	(divide, null, ptr, rel, size)
			   builtin;

	return;

/* * * * * * * * * * TIMEOUT * * * * * * * * * */

/* Entry to set the time allowed for an I/O operation to complete on this device.  If the device runs longer
   than this, it is stopped and the caller receives a timeout status. */

timeout:
     entry (p_devx, p_time, p_code);

	time = p_time;
	call check_devx;

	if dte.direct then do;
	     call unlock;
	     p_code = error_table_$no_operation;
	     return;
	end;

	if (time > dte.max_timeout) & ^dte.priv then do;
	     call unlock;
	     p_code = error_table_$time_too_long;
	     return;
	end;

	dte.timeout = time;
	call unlock;
	p_code = code;
	return;

/* * * * * * * * * * MAX_TIMEOUT * * * * ** * * * */

/* Privileged entry to set the maximum the timeout value is allowed to be set to. */

max_timeout:
     entry (p_devx, p_time, p_code);

	time = p_time;
	call check_devx;

	dte.max_timeout = time;
	call unlock;
	p_code = code;
	return;

/* * * * * * * * * * EVENT * * * * * * * * * */

/* Entry to set the event channel over which status events are signalled for a device. */

event:
     entry (p_devx, p_evchn, p_code);

	evchn = p_evchn;
	call check_devx;

	dte.ev_chn = evchn;
	call unlock;
	p_code = code;
	return;

/* * * * * * * * * WORKSPACE * * * * * * * * * */

/* Entry to set the current size of the workspace. */

workspace:
     entry (p_devx, p_workspace_ptr, p_workspace_size, p_code);

	workspace_size =
	     divide (p_workspace_size + sys_info$page_size - 1, sys_info$page_size, 17) * sys_info$page_size;
	p_workspace_ptr, workspace_ptr = null ();
	call check_devx;

	if dte.active then do;
	     call unlock;
	     p_code = error_table_$device_active;
	     return;
	end;

	if (workspace_size <= 0) | (workspace_size > dte.max_bound) then do;
	     call unlock;
	     p_code = error_table_$buffer_big;
	     return;
	end;

	if workspace_size < dte.status_offset + dte.status_entries * size (istat) then do;
	     call unlock;
	     p_code = error_table_$dev_offset_out_of_bounds;
	     return;
	end;


	if dte.workspace_wired then
	     call ioi_wire$unwire (dtep);		/* can't be wired */

	dte.bound = workspace_size;
	if dte.ptx ^= 0 then do;
	     call ioi_page_table$put (dte.ptx, code);
	     dte.ptx = 0;				/* so we won't try again */
	     call quit_if_error;
	end;

	if dte.direct then
	     call ioi_page_table$get ((sys_info$seg_size_256K), dte.ptx, code);
	else call ioi_page_table$get (dte.bound, dte.ptx, code);
	call quit_if_error;
	dte.ptp = ioi_page_table$ptx_to_ptp (dte.ptx);
	workspace_ptr = dte.workspace_ptr;
	call unlock;

	p_workspace_ptr = workspace_ptr;
	p_code = code;
	return;

/* * * * * * * * * * MAX_WORKSPACE * * * * * * * * * */

/* Privileged entry to set the maximum workspace size allowed for a device. */

max_workspace:
     entry (p_devx, p_workspace_size, p_code);

	workspace_size =
	     divide (p_workspace_size + sys_info$page_size - 1, sys_info$page_size, 17) * sys_info$page_size;
	call check_devx;

	dte.max_bound = workspace_size;
	call ioi_workspace$set_max_size (dtep, code);
	call quit_if_error;
	call unlock;
	p_code = code;
	return;

/* * * * * * * * * * * LEVEL * * * * * * * * * */

/* Privileged entry to set the highest ring allowed to make IOI calls for a device. */

level:
     entry (p_devx, p_ring, p_code);

	ring = p_ring;
	call check_devx;

	if ring < pds$validation_level then do;
	     call unlock;
	     p_code = error_table_$bad_ring_brackets;
	     return;
	end;

	dte.ring = ring;
	call ioi_workspace$set_rb (dtep, code);
	call quit_if_error;
	call unlock;
	p_code = code;
	return;

/* * * * * * * * * * CHANNEL_REQUIRED * * * * * * * * * */

/* Privileged entry called to set a required channel for a device.  This will restrict the device
   to running on that channel. */

channel_required:
     entry (p_devx, p_iom, p_channel, p_code);

	iom = p_iom;
	channel = p_channel;
	call check_devx;

	if ^dte.priv then do;			/* must have a privileged assignment */
	     call unlock;
	     p_code = error_table_$no_operation;
	     return;
	end;

	if (iom = 0) & (channel = 0) then do;		/* special case, clear requirement */
	     dte.channel_required = "";
	     call unlock;
	     p_code = code;
	     return;
	end;

	call io_chnl_util$iom_to_name (iom, channel, chanid, code);
	if code ^= 0 then do;			/* bogus channel */
	     call unlock;
	     p_code = error_table_$bad_channel;
	     return;
	end;

	if dte.active then do;			/* device must not be running now */
	     call unlock;
	     p_code = error_table_$device_active;
	     return;
	end;

	gtep = ptr (dtep, dte.gtep);
	do ctep = ptr (gtep, gte.ctep) repeat ptr (ctep, cte.next_ctep) while (rel (ctep) ^= ""b);
	     if cte.chanid = chanid then do;		/* found it */

		if cte.deleted then do;		/* can't have a deleted channel */
		     call unlock;
		     p_code = error_table_$chnl_already_deleted;
		     return;
		end;

		if cte.deleting then do;		/* can't have this either */
		     call unlock;
		     p_code = error_table_$chnl_being_deleted;
		     return;
		end;

		if (gte.disk_data_subsystem_idx ^= 0) & ^cte.ioi_use then
						/* must grab channel from disk_control */
		     if ^gte.suspend_devices then do;	/* can't usurp if we're suspended */
			call ioi_usurp_channels$required (ctep, code);
			if code ^= 0 then do;
			     call unlock;
			     p_code = code;
			     return;
			end;
		     end;
		     else do;
			call unlock;
			p_code = error_table_$no_operation;
			return;
		     end;

		dte.channel_required = chanid;
		call unlock;
		p_code = code;
		return;
	     end;
	end;

	call unlock;
	p_code = error_table_$bad_channel;
	return;

/* * * * * * * * * * STATUS * * * * * * * * * */

/* Entry to set the offset (in the workspace) and number of entries in the circular status queue */

status:
     entry (p_devx, p_offset, p_count, p_code);

	offset = p_offset;
	n_entries = p_count;
	call check_devx;

	if (offset < 0) | (n_entries < 0) | (offset + (n_entries * size (istat)) > dte.bound) then do;
	     call unlock;
	     p_code = error_table_$dev_offset_out_of_bounds;
	     return;
	end;

	dte.status_control.status_offset = offset;
	dte.status_control.status_entries = n_entries;
	dte.status_control.status_entry_idx = 0;
	call unlock;
	p_code = code;
	return;

/* Routine to get the dtep given the devx.  It returns with dtep set and the dte locked.  If it cannot do both,
   it does not return, but passes the error code back to this program's caller. */

check_devx:
     procedure;

	p_code, code = 0;
	devx = p_devx;
	call ioi_device$get_dtep (devx, dtep, code);	/* cleverly setting p_code to 0 if all is cool. */
	if code ^= 0 then
	     goto QUIT;

     end check_devx;

/* Routine to unlock the dte */

unlock:
     procedure;

	call ioi_device$unlock (dtep);

     end unlock;

quit_if_error:
     proc;

	if code ^= 0 then do;
	     call unlock;
	     goto QUIT;
	end;

     end quit_if_error;

QUIT:
	p_code = code;
	return;

%include ioi_data;
%page;
%include ioi_stat;
%page;
%include io_chnl_util_dcls;

     end ioi_set;
