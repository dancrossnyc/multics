/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */
/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
ioi_connect:
     procedure (p_devx, p_offset, p_code);

/* Rewritten by C. Hornig, June 1982 */
/* Rewrite finished August 1982 by Chris Jones */
/* Modified 1984-08-10 BIM for direct channel support (ignore pcw and offset) */

dcl	p_devx		   fixed bin parameter;	/* (I) device index */
dcl	p_offset		   fixed bin (18) parameter;	/* (I) offset in workspace of DCW list */
dcl	p_pcw		   bit (36) aligned parameter;/* (I) PCW to be used for connect */
dcl	p_code		   fixed bin (35) parameter;	/* (O) status code */

dcl	ioi_device$get_dtep	   entry (fixed bin, ptr, fixed bin (35));
dcl	ioi_device$unlock	   entry (ptr);
dcl	ioi_masked$getwork_device
			   entry (ptr);
dcl	ioi_wire$wire	   entry (ptr);

dcl	error_table_$dev_offset_out_of_bounds
			   fixed bin (35) ext static;
dcl	error_table_$device_active
			   fixed bin (35) ext static;
dcl	error_table_$no_operation
			   fixed bin (35) ext static;
dcl	error_table_$out_of_main_memory
			   fixed bin (35) ext static;
dcl	error_table_$out_of_sequence
			   fixed bin (35) ext static;
dcl	code		   fixed bin (35);
dcl	auto_pcw		   bit (36) aligned;
dcl	devx		   fixed bin;
dcl	offset		   fixed bin (18);

dcl	(addr, binary, pointer)
			   builtin;

	auto_pcw = ""b;				/* default PCW */
	goto common;


ioi_connect_pcw:
     entry (p_devx, p_offset, p_pcw, p_code);

	auto_pcw = p_pcw;				/* user-supplied PCW */
	goto common;


common:
	devx = p_devx;
	offset = p_offset;
	idp = addr (ioi_data$);			/* find databases */
	call ioi_device$get_dtep (devx, dtep, code);	/* lock the device */
	if code ^= 0 then do;
	     p_code = code;
	     return;
	end;

	if dte.active & ^dte.direct then do;		/* already connecting */
	     call unlock;
	     p_code = error_table_$device_active;
	     return;
	end;

	if ^dte.direct then do;
	     if (offset < 0) | (offset >= dte.bound) then do;
						/* offset is patently ridiculous */
BOUNDS_ERR:
		call unlock;
		p_code = error_table_$dev_offset_out_of_bounds;
		return;
	     end;

	     gtep = pointer (idp, dte.gtep);
	     if gte.psia then do;			/* must do special checks for PSIA */
		if (auto_pcw ^= ""b) & ^dte.priv then do;
						/* no PCW unless privileged */
		     call unlock;
		     p_code = error_table_$no_operation;
		     return;
		end;

		call chase_tdcw;			/* skip leading TDCW's */
		dte.idcw_listx = offset;		/* remember where is IDCW */
		idcwp = addr (dte.idcw);
		idcw = pointer (dte.workspace_ptr, offset) -> idcw;
						/* get first IDCW */
		if idcw.code ^= "111"b then do;	/* no valid IDCW */
		     call unlock;
		     p_code = error_table_$no_operation;
		     return;
		end;

/**** Here would be a good place to check for weird device commands which should only be allowed if the controller
      has been attached or the caller is privileged.  However, the MPCs insist that the device code be 0 in this
      case, and the check below will take care of that.  In the case of IPCs, there are currently no such
      commands defined. */

		if ^dte.priv then
		     idcw.device = dte.device;
		else if idcw.device then
		     idcw.device = dte.device;

		offset = offset + 1;		/* now find the next DCW */
		call chase_tdcw;			/* keeping track of TDCW's */
	     end;
	end;					/* direct channels have no control words to check out */

	if dte.ptx = 0 then do;
	     call unlock;
	     p_code = error_table_$out_of_sequence;
	end;
	call ioi_wire$wire (dtep);			/* Wire the buffer */
	if ^dte.workspace_wired then do;		/* couldn't wire it */
	     call unlock;
	     p_code = error_table_$out_of_main_memory;
	     return;
	end;

	if ^dte.direct then
	     dte.listx = offset;			/* where to start in DCW list */
	dte.pcw = auto_pcw;

	call ioi_masked$getwork_device (dtep);		/* find a channel */

	call unlock;				/* release the device */
	p_code = 0;
	return;

/* * * * * * * * * CHASE_TDCW * * * * * * * * * */

chase_tdcw:
     procedure;

	tdcwp = pointer (dte.workspace_ptr, offset);
	if (tdcw.type = "10"b) & (tdcwp -> idcw.code ^= "111"b) then do;
						/* is it a TDCW? */
	     offset = binary (tdcw.address, 18);	/* yes, chase it */
	     if (offset < 0) | (offset >= dte.bound) then
		goto BOUNDS_ERR;
	end;

     end chase_tdcw;


unlock:
     procedure;

	call ioi_device$unlock (dtep);

     end unlock;

%include ioi_data;
%page;
%include iom_pcw;
%include iom_dcw;

     end ioi_connect;
