/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
delete_key:
     proc (p_journal_control_block_ptr, p_info_ptr, p_code);

/* After doing the specified delete_key operation on the vfile, an entry is made
   in the journal recording the key and descriptor.  Only the input_desc and input_key case is allowed.

   Written  by  Lindsey Spratt 08/06/79
   Modified by Chris Jones 02/15/85 for privileges and clean up.
*/
/* Parameter */



dcl	p_journal_control_block_ptr
			   ptr;
dcl	p_info_ptr	   ptr;
dcl	p_code		   fixed bin (35);

/* Automatic */

dcl	privileges_string	   bit (36) aligned;

/* Based */
/* Controlled */
/* Builtin */

dcl	null		   builtin;

dcl	cleanup		   condition;

/* Entry */

dcl	iox_$control	   entry (ptr, char (*), ptr, fixed bin (35));
dcl	rcprm_registry_util_$turn_off_privs
			   entry (bit (36) aligned);
dcl	rcprm_registry_util_$turn_on_privs
			   entry (bit (36) aligned);

/* External */

dcl	error_table_$locked_by_this_process
			   fixed bin (35) ext;
dcl	error_table_$bad_arg   fixed bin (35) ext;

	ak_info_ptr = p_info_ptr;
	journal_control_block_ptr = p_journal_control_block_ptr;
	if ^ak_info.input_desc | ^ak_info.input_key then do;
	     p_code = error_table_$bad_arg;
	     return;
	end;
	privileges_string = ""b;
	on cleanup call rcprm_registry_util_$turn_off_privs (privileges_string);

	call rcprm_registry_util_$turn_on_privs (privileges_string);

	call iox_$control (journal_control_block.vfile_iocb_ptr, "delete_key", ak_info_ptr, p_code);
	if p_code ^= 0 & p_code ^= error_table_$locked_by_this_process then
	     return;


	a_key_len = ak_info.key_len;
	a_rec_len = 0;
	alloc journal_entry in (journal_area);
	journal_entry.key_str = ak_info.key;
	journal_entry.descriptor = ak_info.descrip;
	journal_entry.inc_ref_count = "0"b;
	journal_entry.dec_ref_count = "0"b;
	journal_entry.type = DELETE_KEY;
	journal_entry.next_ptr = null;
	journal_entry.prev_ptr = journal_control_block.latest_entry_ptr;
	if journal_control_block.latest_entry_ptr ^= null then
	     journal_control_block.latest_entry_ptr -> journal_entry.next_ptr = journal_entry_ptr;
	journal_control_block.latest_entry_ptr = journal_entry_ptr;
	call rcprm_registry_util_$turn_off_privs (privileges_string);
	return;

%include journal_entry;
%include journal_control_block;
%include ak_info;
     end;						/* end delete_key */
