/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */

/* format: off */

/* Multics qedx Editor command interface */

/* Created:  January 1983 by G. Palter as part of implementation of qedx_ subroutine interface */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen */


qedx:
qx:
     procedure () options (variable);


dcl  argument character (argument_lth) unaligned based (argument_ptr);
dcl  argument_ptr pointer;
dcl  argument_lth fixed binary (21);
dcl  (n_arguments, argument_idx) fixed binary;

dcl  input_dirname character (168);
dcl  input_ename character (32);
dcl  input_component character (32);
dcl  input_file_ptr pointer;

dcl  exec_dirname character (168);
dcl  exec_ename character (32);
dcl  exec_component character (32);
dcl  exec_buffer_bc fixed binary (24);
dcl  exec_buffer_ptr pointer;

dcl  args_buffer character (4 * sys_info$max_seg_size) based (args_buffer_ptr);
dcl  args_buffer_used fixed binary (21);
dcl  args_buffer_ptr pointer;

dcl  1 local_qi aligned,				/* describes how we want the invocation setup */
       2 header like qedx_info.header,
       2 buffers (3) like qedx_info.buffers;		/* 0, exec, args */

dcl  ok_to_continue bit (1);				/* command_query_$yes_no should have used aligned */

dcl  (no_rw_path, have_pathname, have_macro_pathname, have_macro_arguments) bit (1) aligned;

dcl  idx fixed binary;
dcl  code fixed binary (35);

dcl  invocation_level fixed binary static initial (0);	/* # of active invocations of qedx */

dcl  NL character (1) static options (constant) initial ("
");

dcl  QEDX character (32) static options (constant) initial ("qedx");

dcl  1 RECURSION_EXPLANATION_SECTIONS aligned static options (constant),
       2 part1 character (200) unaligned
	  initial ("There ^[are^;is^] ^d suspended invocation^[s^] of the qedx command which you have
interrupted (eg: by a quit signal) that are still active.  If you
answer ""yes"" to this query, you will have an additio"),
       2 part2 character (200) unaligned initial ("nal invocation of
qedx.  Any changes that you have made to files in prior invocations
which you have not yet written will not be available to this new qedx.
In addition, any changes you make to files "),
       2 part3 character (200) unaligned initial ("in this qedx which you are
also editing in prior invocations will not be reflected in those prior
invocations and could be lost if you later write out the same file in
one of those other invocations.
"),
       2 part4 character (200) unaligned initial ("
We suggest that you answer ""no"" to this query and use either the
""start"" or ""program_interrupt"" command to resume one of your previous
invocations of qedx or that you use the ""release"" command to abo"),
       2 part5 character (200) unaligned initial ("rt
those older invocations if you are certain there aren't any modified
buffers in them.

qedx: Do you wish to continue?");

dcl  RECURSION_EXPLANATION character (920) defined (RECURSION_EXPLANATION_SECTIONS.part1) position (1);
						/* last part is only 120 characters */

dcl  sys_info$max_seg_size fixed binary (19) external;

/* format: off */
dcl (error_table_$badopt, error_table_$bigarg, error_table_$inconsistent, error_table_$noarg, error_table_$too_many_args)
	fixed binary (35) external;
/* format: on */

dcl  com_err_ entry () options (variable);
dcl  command_query_$yes_no entry () options (variable);
dcl  cu_$arg_count entry (fixed binary, fixed binary (35));
dcl  cu_$arg_ptr entry (fixed binary, pointer, fixed binary (21), fixed binary (35));
dcl  expand_pathname_$component entry (character (*), character (*), character (*), character (*), fixed binary (35));
dcl  expand_pathname_$component_add_suffix
	entry (character (*), character (*), character (*), character (*), character (*), fixed binary (35));
dcl  get_temp_segment_ entry (character (*), pointer, fixed binary (35));
dcl  initiate_file_$component
	entry (character (*), character (*), character (*), bit (*), pointer, fixed binary (24), fixed binary (35));
dcl  pathname_$component entry (character (*), character (*), character (*)) returns (character (194));
dcl  qedx_ entry (pointer, fixed binary (35));
dcl  release_temp_segment_ entry (character (*), pointer, fixed binary (35));
dcl  terminate_file_ entry (pointer, fixed binary (24), bit (*), fixed binary (35));
dcl  cleanup condition;

dcl  (divide, length, index, null, substr, string) builtin;
%page;
/* qedx: qx: procedure () options (variable); */

	call cu_$arg_count (n_arguments, code);
	if code ^= 0 then do;
	     call com_err_ (code, QEDX);
	     return;
	end;

	if invocation_level > 0 then do;		/* it would be nice to eliminate this... */
	     call command_query_$yes_no (ok_to_continue, 0, QEDX, RECURSION_EXPLANATION,
		"There ^[are^;is^] ^d suspended invocation^[s^;^] of qedx in your process.^/Do you wish to continue?",
		(invocation_level > 1), invocation_level, (invocation_level > 1));
	     if ^ok_to_continue then return;
	end;

	invocation_level = invocation_level + 1;	/* another qedx */

	input_file_ptr,				/* for cleanup handler */
	     exec_buffer_ptr, args_buffer_ptr = null ();

	on condition (cleanup) call cleanup_qedx_invocation ();


/* format: off */

/* Process arguments: syntax of the qedx command is --

      qedx {-control_args} {macro_path {macro_arguments}} */

/* format: on */

	no_rw_path,				/* allow r/w with pathnames and R/W */
	     have_pathname,				/* haven't seen -pathname yet */
	     have_macro_pathname,			/* haven't seen first non-control argument yet */
	     have_macro_arguments = "0"b;		/* haven't seen any macro arguments */

	do argument_idx = 1 to n_arguments;

	     call cu_$arg_ptr (argument_idx, argument_ptr, argument_lth, code);
	     if code ^= 0 then do;			/* sigh */
		call com_err_ (code, QEDX, "Fetching argument #^d.", argument_idx);
		go to RETURN_FROM_QEDX;
	     end;

	     if ^have_macro_pathname then		/* no non-control argument yet: can still accept -ca's */
		if index (argument, "-") = 1 then	/* ... a control argument */
		     if argument = "-no_rw_path" then no_rw_path = "1"b;
		     else if argument = "-rw_path" then no_rw_path = "0"b;

		     else if (argument = "-pathname") | (argument = "-pn") then
			if have_pathname then do;
			     call com_err_ (error_table_$too_many_args, QEDX,
				"""-pathname"" may only be specified once for this command.");
			     go to RETURN_FROM_QEDX;
			end;
			else do;			/* initial contents for buffer 0 ... */
			     have_pathname = "1"b;
			     if argument_idx = n_arguments then do;
				call com_err_ (error_table_$noarg, QEDX, "Pathname after ""^a"".", argument);
				go to RETURN_FROM_QEDX;
			     end;
			     argument_idx = argument_idx + 1;
			     call cu_$arg_ptr (argument_idx, argument_ptr, argument_lth, code);
			     if code ^= 0 then do;
				call com_err_ (code, QEDX, "Fetching argument #^d.", argument_idx);
				go to RETURN_FROM_QEDX;
			     end;
			     call expand_pathname_$component (argument, input_dirname, input_ename, input_component,
				code);
			     if code ^= 0 then do;
				call com_err_ (code, QEDX, "-pathname ^a", argument);
				go to RETURN_FROM_QEDX;
			     end;
			     call initiate_file_$component (input_dirname, input_ename, input_component, R_ACCESS,
				input_file_ptr, (0), code);
			     if code ^= 0 then do;	/* the file doesn't exist (sigh) */
				call com_err_ (code, QEDX, "-pathname ^a",
				     pathname_$component (input_dirname, input_ename, input_component));
				go to RETURN_FROM_QEDX;
			     end;
			     call terminate_file_ (input_file_ptr, 0, TERM_FILE_TERM, (0));
			     input_file_ptr = null ();
			end;

		     else do;
			call com_err_ (error_table_$badopt, QEDX, """^a""", argument);
			go to RETURN_FROM_QEDX;
		     end;

		else do;				/* first non-control argument: macro pathname */
		     have_macro_pathname = "1"b;
		     call expand_pathname_$component_add_suffix (argument, QEDX, exec_dirname, exec_ename,
			exec_component, code);
		     if code ^= 0 then do;
			call com_err_ (code, QEDX, "Macro file: ^a", argument);
			go to RETURN_FROM_QEDX;
		     end;
		     call initiate_file_$component (exec_dirname, exec_ename, exec_component, R_ACCESS,
			exec_buffer_ptr, exec_buffer_bc, code);
		     if code ^= 0 then do;		/* the file doesn't exist (sigh) */
			call com_err_ (code, QEDX, "Macro file: ^a",
			     pathname_$component (exec_dirname, exec_ename, exec_component));
			go to RETURN_FROM_QEDX;
		     end;
		end;

	     else do;				/* Nth non-control argument: a macro argument */
		if ^have_macro_arguments then do;	/* ... first macro argument */
		     call get_temp_segment_ (QEDX, args_buffer_ptr, code);
		     if code ^= 0 then do;
			call com_err_ (code, QEDX, "Obtaining buffer space for macro arguments.");
			go to RETURN_FROM_QEDX;
		     end;
		     args_buffer_used = 0;
		     have_macro_arguments = "1"b;
		end;
		call add_to_args_buffer (argument);
		call add_to_args_buffer (NL);
	     end;
	end;

	if no_rw_path & ^have_pathname then do;
	     call com_err_ (error_table_$inconsistent, QEDX, """-no_rw_path"" must be used with ""-pathname"".");
	     go to RETURN_FROM_QEDX;
	end;


/* Arguments have been validated: setup qedx_info data structure and invoke qedx_ */

	local_qi.header.version = QEDX_INFO_VERSION_1;
	local_qi.header.editor_name = QEDX;

	string (local_qi.header.flags) = ""b;
	local_qi.header.no_rw_path = no_rw_path;
	local_qi.header.query_if_modified = "1"b;	/* finally after all these years ... */

	local_qi.header.n_buffers = 0;		/* no initial buffers yet */

	if have_pathname then do;			/* include a buffer 0 containing requested file ... */
	     local_qi.header.n_buffers, idx = 1;
	     local_qi.buffers (idx).buffer_name = "0";
	     local_qi.buffers (idx).buffer_pathname = pathname_$component (input_dirname, input_ename, input_component);
	     string (local_qi.buffers (idx).flags) = ""b;
	end;

	if have_macro_pathname then do;		/* exec buffer containing a macro to execute ... */
	     local_qi.header.n_buffers, idx = local_qi.header.n_buffers + 1;
	     local_qi.buffers (idx).buffer_name = "exec";
	     local_qi.buffers (idx).buffer_pathname = ""; /* ... no pathname by default */
	     local_qi.buffers (idx).region_ptr = exec_buffer_ptr;
	     local_qi.buffers (idx).region_max_lth,	/* ... get size from the system */
		local_qi.buffers (idx).region_initial_lth = divide ((exec_buffer_bc + 8), 9, 21, 0);
	     string (local_qi.buffers (idx).flags) = ""b;
	     local_qi.buffers (idx).read_write_region, local_qi.buffers (idx).execute_buffer = "1"b;
	end;					/* ... get initial content from us but can't write back */

	if have_macro_arguments then do;		/* a "file" of arguments to the macro ... */
	     local_qi.header.n_buffers, idx = local_qi.header.n_buffers + 1;
	     local_qi.buffers (idx).buffer_name = "args";
	     local_qi.buffers (idx).buffer_pathname = ""; /* ... no pathname by default */
	     local_qi.buffers (idx).region_ptr = args_buffer_ptr;
	     local_qi.buffers (idx).region_max_lth, local_qi.buffers (idx).region_initial_lth = args_buffer_used;
	     string (local_qi.buffers (idx).flags) = ""b;
	     local_qi.buffers (idx).read_write_region = "1"b;
	end;					/* ... get initial content from us but can't write back */


	call qedx_ (addr (local_qi), code);		/* INVOKE THE EDITOR */


RETURN_FROM_QEDX:
	call cleanup_qedx_invocation ();

	return;
%page;
/* Add a character string to the macro arguments buffer */

add_to_args_buffer:
     procedure (p_string);

dcl  p_string character (*) parameter;

	if (args_buffer_used + length (p_string)) > length (args_buffer) then do;
	     call com_err_ (error_table_$bigarg, QEDX, "Too many macro arguments.  First failing argument: ""^a"".",
		argument);
	     go to RETURN_FROM_QEDX;
	end;

	substr (args_buffer, (args_buffer_used + 1), length (p_string)) = p_string;
	args_buffer_used = args_buffer_used + length (p_string);

	return;

     end add_to_args_buffer;



/* Cleanup after an invocation of qedx */

cleanup_qedx_invocation:
     procedure ();

	if input_file_ptr ^= null () then do;		/* a very small window nonetheless ... */
	     call terminate_file_ (input_file_ptr, 0, TERM_FILE_TERM, (0));
	     input_file_ptr = null ();
	end;

	if exec_buffer_ptr ^= null () then do;
	     call terminate_file_ (exec_buffer_ptr, 0, TERM_FILE_TERM, (0));
	     exec_buffer_ptr = null ();
	end;

	if args_buffer_ptr ^= null () then do;
	     call release_temp_segment_ (QEDX, args_buffer_ptr, (0));
	     args_buffer_ptr = null ();
	end;

	invocation_level = invocation_level - 1;	/* all gone */

	return;

     end cleanup_qedx_invocation;
%page;
%include qedx_info;
%page;
%include access_mode_values;

%include terminate_file;

     end qedx;
