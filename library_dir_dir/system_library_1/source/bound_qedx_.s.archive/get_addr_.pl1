/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(89-04-05,Huen), approve(89-04-05,MCR8093), audit(89-05-24,RWaters),
     install(89-05-31,MR12.3-1051):
     Fix Bug 209 in qedx
     editor - Extend the ignoring of leading spaces to include <TAB> character.
                                                   END HISTORY COMMENTS */

/* format: off */

/* get_addr_ .......... subroutine to find address portion of qedx request and locate addressed line in buffer */

/* Initial coding by R. C. Daley, August 1970 */
/* Modified for gapped buffer by T. Oke, June 1980 */
/* Changes merged and edited 03/03/82 S. Herbst */
/* Modified: January 1983 by G. Palter as part of making qedx reentrant */
/* Modified: March 1989 by S Huen - Extend the ignoring of leading spaces to
     include <TAB> character. (209) */
/* format: on,style4,delnl,insnl,ifthenstmt,ifthen */

get_addr_:
     procedure (aqidp, atp, ati, ate, afp, alb, aft, afe, ali, ale, api, ape, acode);

dcl  aqidp ptr,					/* pointer to qedx per-invocation data */
     atp ptr,					/* pointer to current typewriter input request line */
     ati fixed bin (21),				/* index of first unprocessed character in tw line */
     ate fixed bin (21),				/* index of last character in tw line */
     afp ptr,					/* pointer to current buffer file */
     alb fixed bin (21),				/* index of last character in lower half */
     aft fixed bin (21),				/* index of first character in upper half */
     afe fixed bin (21),				/* index of last character in buffer file */
     ali fixed bin (21),				/* index of first character of current line */
     ale fixed bin (21),				/* index of last character of current line */
     api fixed bin (21),				/* index of first character of addressed line (output) */
     ape fixed bin (21),				/* index of last character of addressed line (output) */
     acode fixed bin;				/* status code, 0= null address, 1= single address,
						   2= address pair expected (comma seen),
						   3= address pair expected (semi-colon seen),
						   4= search failed, 5= other error */


dcl  (tp, fp) ptr,					/* temporary storage */
     (ti, te, lb, ft, fe, li, le, i, j, num, code) fixed bin (21),
     temp_reg fixed bin init (0),
     digit fixed bin (9),
     (relsw, negsw, evalsw) bit (1) init ("0"b),
     (ch, nl) char (1);

dcl  last_index fixed bin (21);			/* used in last_line scan */

dcl  1 t based (tp) aligned,				/* structure to treat tw line as character array */
       2 c (1048576) char (1) unaligned;

dcl  1 f based (fp) aligned,				/* structure to treat buffer file as character array */
       2 c (1048576) char (1) unaligned;

dcl  string char (1048576) based aligned;		/* based character string for use with substr and index */

dcl  ioa_ entry options (variable),			/* external procedures used by get_addr_ */
     qx_search_file_
	entry (ptr, ptr, fixed bin (21), fixed bin (21), ptr, fixed bin (21), fixed bin (21), fixed bin (21),
	fixed bin (21), fixed bin (21), fixed bin (21), fixed bin (21));

dcl  (fixed, index, reverse, substr, unspec) builtin;
%page;
	tp = atp;					/* pointer to tw line buffer */
	ti = ati;					/* index to next character in tw line */
	te = ate;					/* index of last character in tw line */
	fp = afp;					/* pointer to input file */
	lb = alb;					/* index of last character of bottom half */
	ft = aft;					/* index of first character of top half */
	fe = afe;					/* index of last character in input file */
	li = ali;					/* index of first character of current line */
	le = ale;					/* index of last character of current line */
	acode = 0;				/* initialize acode to indicate null address */

	unspec (nl) = "000001010"b;			/* initialize nl character */
	go to scan2;				/* begin (or resume) scan of tw input line */


scan:
	acode = 1;				/* resume scan after processing address component */
	relsw = "1"b;				/* number are relative after first address component */
scan1:
	ti = ti + 1;				/* bump tw input character index */
scan2:
	if ti > te then do;				/* check for end of line */
bad_addr:
	     call ioa_ ("Address syntax error.");
	     go to fail;
	end;
	ch = t.c (ti);				/* pick up next character from tw input line */
	/* Bug 209: Extend the ignoring of leading spaces to include the <TAB> char */
	if (ch = " " | ch = "	")
	     then go to scan1;                            /* ignore whitespace at this level */
	if ch = "/" then go to reg;			/* "/" indicates start of regular expression */
	if ch = "$" then go to last;			/* "$" go to end of input file */
	if ch = "-" then go to neg;			/* "-" note minus sign seen */
	if ch = "+" then go to pos;			/* "+" note plus sign seen */
	if ch = "." then go to scan;			/* ignore "." for compatability */
	if ch >= "0" then
	     if ch <= "9" then go to get_num;		/* check for integer 0-9 */
	if ch = "," then do;			/* "," delimits line addresses */
	     ti = ti + 1;				/* bump tw input line index */
	     acode = 2;				/* indicate second address expected ("," seen) */
	end;
	if ch = ";" then do;			/* ";" also delimits line addresses */
	     ti = ti + 1;				/* bump tw input line index */
	     acode = 3;				/* indicate second address expected (";" seen) */
	end;

	if evalsw then call eval;			/* if numerically addressed line, get begin and end indices */

	if li > lb & li < ft then
	     api = ft;
	else api = li;				/* exit from scan on comma or unrecognized character */
	if le > lb & le < ft then
	     ape = ft;
	else ape = le;				/* return current line address */
	ati = ti;					/* update caller's tw line index to point after address */
	return;					/* normal return to caller (acode= 0, 1 or 2) */


reg_fail:
	acode = 4;				/* here if regular expression search failed */
	return;

fail:
	acode = 5;				/* here on any other failure during address scan */
	return;
%page;
reg:
	if evalsw then call eval;			/* if numerically addressed line, get begin and end indices first */

	i = ti + 1;				/*  look for regular expression */
	do ti = i to te;				/* scan expression and try to find matching "/" */
	     if t.c (ti) = "/" then go to reg1;		/* found match */
	     if t.c (ti) = "" then ti = ti + 1;	/* skip next if conceal character */
	     else if t.c (ti) = "\" then
		if te > ti then
		     if t.c (ti + 1) = "c" then ti = ti + 2;
						/* two character conceal symbol */
	end;

	call ioa_ ("Syntax error in regular expression.");/* error if no terminal "/" found */
	go to fail;

reg1:
	j = ti - i;				/* compute length of regular expression */

/* Processing is broken into two parts, starting in the top, and starting
   in the bottom.  Processing then enters into a string of part processing.
   If in the bottom, we either search to whole bottom, or part of the bottom.
   If searching the bottom, and we were in the top then we quit, else we search
   the top next.  Sounds complex (and it is) but perservere and the mud thins */

	if le + 1 <= lb then do;			/* we are starting in the bottom */
	     call search_section ((le + 1), (lb), (ft), (fe), (1), (le));
						/* search rest bot, top, bot */
	end;
	else do;
	     call search_section ((le + 1), (fe), (1), (lb), (ft), (le));
	end;
	goto scan;


last:
	if ft > fe & lb < 1 then go to scan;		/* here after "$" found, find last line */
	if fe < ft then
	     le = lb;				/* look in the bottom */
	else le = fe;				/* set current line end to last character in buffer */
						/* Modified last_line search to use index function across gapped buffer. */

	li = le - 1;				/* miss current nl */

retry:
	if li >= ft then do;
	     last_index = index (reverse (substr (fp -> string, ft, li - ft + 1)), nl);
						/* search upper */
	     if last_index = 0 then
		if lb > 0 then do;			/* move across gap to lower and re-try search */
		     li = lb;
		     goto retry;
		end;
		else do;				/* this must be the first line */
		     li = ft;
		     goto scan;			/* limit to section for line */
		end;
	end;
	else do;					/* search lower section */
	     if li < 1 then do;			/* limit to 1st line */
		li = 1;
		goto scan;
	     end;
	     if li > lb then li = lb;			/* force across gap */
	     last_index = index (reverse (substr (fp -> string, 1, li)), nl);
	     if last_index = 0 then do;		/* not found - force to 1st character */
		li = 1;
		goto scan;			/* continue address scan */
	     end;
	end;
	li = li - last_index + 1;			/* setup start index */

/* correct for overstep */

	if li = lb then
	     li = ft;				/* force up */
	else li = li + 1;				/* correct for pointing at nl */

	go to scan;				/* and resume address scan */


neg:
	negsw = "1"b;				/* here after "-" found, note that minus sign seen */
	go to scan;				/* and continue address scan */


pos:
	negsw = "0"b;				/* here after "+" found, note that plus sign seen */
	go to scan;				/* and continue address scan */


get_num:
	num = 0;					/* here after digit (0-9) found */
	do i = ti to te;				/* convert ingeter to binary */
	     ch = t.c (i);				/* pick up first or next digit of integer */
	     if ch < "0" then go to end_num;		/* terminate conversion on first non-digit (0-9) */
	     if ch > "9" then go to end_num;		/* .. */
	     digit = fixed (unspec (ch) & "000001111"b, 9);
						/* get numerical portion of ascii digit */
	     num = (num * 10) + digit;		/* convert into binary number */
	end;
	go to bad_addr;				/* error if no nl character to terminate conversion */

end_num:
	ti = i - 1;				/* here after non-digit found, re-adjust line index */
	evalsw = "1"b;				/* set switch to later evaluate */

	if ^relsw then do;				/* if line number address is absolute */
	     li, le = 0;				/* reset line indexes to beginning of buffer */
	     if num = 0 then li = 1;			/* special case for 0th line of buffer (li=1, le=0) */
	end;

	if negsw then do;				/* backup */
	     negsw = "0"b;				/* first turn off sw */
	     temp_reg = temp_reg - num;		/* then subtract */
	end;

	else temp_reg = temp_reg + num;		/* else go forward */

	go to scan;				/* continue address scan */


eval:
     proc;

/* Internal proceedure to evaluate numerical addresses and return character indices
   of beginning and end of addressed line. */

	evalsw = "0"b;				/* numerical address evaluated */

	if fe = 0 then
	     if temp_reg ^= 0 then do;		/* check for empty buffer */
		call ioa_ ("Buffer empty.");
		go to fail;
	     end;

	if temp_reg > 0				/* if positive address then go forward */
	then do i = 1 to temp_reg;			/*  skip foreward temp_reg lines in buffer */
	     if le + 1 > lb & le + 1 < ft then		/* move to upper half */
		le = ft - 1;
retry_forward:
	     if le = fe then do;			/* check if already at end of buffer */
		call ioa_ ("Address out of buffer (too big).");
		go to fail;
	     end;
	     li = le + 1;				/* move line index foreward one line */
	     if li <= lb then do;			/* search in bottom */
		j = index (substr (fp -> string, li, (lb - li + 1)), nl);
						/* find end of line */
		if j = 0 & ft <= fe then do;
		     j = index (substr (fp -> string, ft, (fe - ft + 1)), nl);
						/* find end of line split */
		     le = ft - 1;			/* jump last end of line to start of top */
		end;
	     end;
	     else j = index (substr (fp -> string, li, (fe - li + 1)), nl);
						/* find end of line in top */
	     if j = 0 then
		le = fe;				/* worry about buffer with no nl on last line */
	     else le = le + j;			/* otherwise, adjust index to last char of line in file */
	end;

	else do i = 1 to -temp_reg;			/* loop to move backward temp_reg lines in buffer */
	     if li - 1 < ft & li - 1 > lb then		/* move to lower buffer */
		li = lb + 1;
	     if li = 1 then do;			/* check if already at first line */
		call ioa_ ("Address out of buffer (negative address).");
		go to fail;
	     end;
	     le = li - 1;				/* set current line end back one line */
						/* Modified last_line search to use index function across gapped buffer. */

	     li = le - 1;				/* miss current nl */

retry:
	     if li >= ft then do;
		last_index = index (reverse (substr (fp -> string, ft, li - ft + 1)), nl);
						/* search upper */
		if last_index = 0 then
		     if lb > 0 then do;		/* move across gap to lower and re-try search */
			li = lb;
			goto retry;
		     end;
		     else do;			/* this must be the first line */
			li = ft;
			go to bk_next;
		     end;
	     end;
	     else do;				/* search lower section */
		if li < 1 then do;
		     li = 1;			/* limit to 1st line */
		     go to bk_next;
		end;
		if li > lb then li = lb;		/* force across gap */
		last_index = index (reverse (substr (fp -> string, 1, li)), nl);
		if last_index = 0 then do;		/* not found - force to 1st character */
		     li = 1;
		     go to bk_next;
		end;
	     end;
	     li = li - last_index + 1;		/* setup start index */

/* correct for overstep */

	     if li = lb then
		li = ft;				/* force up */
	     else li = li + 1;			/* correct for pointing at nl */

bk_next:
	end;

	temp_reg = 0;				/* clear temp register before returning */

	return;

     end;
%page;
/* Search sections of the gapped text buffer. */

search_section:
     proc (x1, y1, x2, y2, x3, y3);

dcl  (x1, x2, x3, y1, y2, y3) fixed bin (21);

dcl  (x, y, xx, yy) fixed bin (21);

/* search_section is a recursive searching routine which will search
   each of up to three sections of text in turn and order.  It is passed
   a series of three indicies governing search extents, and then goes through
   them to pick out a textual match.  This routine is only called after i and
   j have been setup to limit the search master string extents in the tw
   buffer. */

/* At the end and return of search_section the values of li and le delimit
   the matched line.  Any other return is a non-local error exit goto. */

	if x1 > lb & x1 < ft then
	     x = ft;
	else x = x1;

	if y1 > lb & y1 < ft then
	     y = ft;
	else y = y1;

	if y > x then do;				/* and extent to search */
	     call qx_search_file_ (aqidp, tp, i, j, fp, x, y, li, le, lb, ft, code);
	     if code = 0 then goto breakout_line;	/* string find - delimit line */
	     if code = 2 then goto fail;		/* bad master search string */

	end;

	if x1 = 0 then goto reg_fail;			/* couldn't find string in three tries */

	call search_section ((x2), (y2), (x3), (y3), (0), (0));
	return;

breakout_line:
	le = index (substr (fp -> string, li, (y - li + 1)), nl);
						/* delimit start and end of line containing text match. */

	if le = 0 then do;				/* section end without nl */
	     if x2 > lb & x2 < ft then
		xx = ft;
	     else xx = x2;
	     if y2 > lb & y2 < ft then
		yy = ft;
	     else yy = y2;

/* search in next section, if it exists, for end of line */

	     if xx > y then				/* search superior section */
		le = index (substr (fp -> string, xx, (yy - xx + 1)), nl);

	     if le = 0 then
		le = y;
	     else le = xx + le - 1;			/* find true end of line */
	end;
	else le = li + le - 1;

	do li = (li - 1) by -1 to x;			/* find previous nl */
	     if f.c (li) = nl then do;
		li = li + 1;
		return;				/* found and delimited */
	     end;
	end;
	li = x;					/* must be start of buffer */
     end;


     end get_addr_;
