/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


template_address_space: proc ();

/*

   Written October 31, 1975 by R. Bratt

   Last Modified:
   October 1984, Keith Loepere even though this is no longer called, to use 
      fs_modes.  Also removed use of hdr.  Also for terminate_.

   template_address_space provides functions for creating and deleting a template address space.
   A template address space is stored in a directory and is defined by two ring zero
   segments named "template_kst" and "template_dseg".

   ---> call template_address_space$create (dirname, access_calculated, code)

   create initiates the segment "kst_seg" in the given directory. It assumes
   that this segment has the format of a kst. create makes the following demands
   of its environment and the given segment:

   * kst.lowseg = active_all_rings_data$stack_base_segno
   * kst.highseg < active_all_rings_data$max_segno
   * kst.highest_used_segno > kst.lowseg+7
   * kst.time_of_bootload = sys_info$time_of_bootload
   * kst.highest_used_segno is consistent with bitcount
   * caller has read access to kst_seg
   * each kst entry from lowseg to highest_used_segno contains:
   *  a valid uid or a uid of "0"b
   *  baseno (kste.entryp) is valid w.r.t. this kst
   *  usage counts
   * the caller's address space contains every object in the kst to be built
   * no segment named "template_dseg" or "template_kst" exists in the given directory

   create makes two ring zero segments named "template_kst" and
   "template_dseg" with r *.*.* access. create then uses the information in
   kst_seg and its callers's address space to transform kst_seg into a secure, valid
   address space template. If an object in the new address space has a single acl
   term of *.*.* then access is precalculated in the template address space.
   If any inconsistancies are found in template_kst or if any of the assertion above
   are found to be violated then "template_kst" and "template_dseg" are deleted and an error
   is returned. If the address space template is sucessfully built then kst.template
   is set to help template_address_space$delete validate its right to delete
   this template address space and the count of segments which had access precalculated
   is returned.

   ---> call template_address_space$delete (dirname,code)

   delete is called to delete the template address space (template_kst, template_dseg) stored
   in a given directory. delete requires that the given directory contain
   two segments named "template_kst" and "template_dseg". These segments must have ring brackets
   of 0, 0, 0 and the caller must have modify permission to the containing directory.
   delete validates that the kst is marked as a template kst. Unfortunately,
   since we don't have property lists, delete cannot be absolutely certain that it is deleting
   a (template_kst, template_dseg) pair created by template_address_space$create.
   We assume, somewhat nervously, that the checks made by delete are
   sufficiently safe to prevent users from destroying ring zero segments not created
   by template_address_space$create.

*/



dcl  a_dirname char (*),
     a_access_calculated fixed bin (17),
     a_code fixed bin (35);
dcl  access_calculated fixed bin (17),
    (created_kst, created_dseg) bit (1) aligned,
     dirname char (168),
    (mode, exmode) bit (36) aligned,
     ring fixed bin (3),
     rings (3) fixed bin (3),
     level fixed bin (3),
    (my_kstp, my_kstep, my_dsegp, his_dsegp, his_kstp, his_kstep, input_kstp) ptr,
     bc fixed bin (24),
     hash_class fixed bin (17),
     code fixed bin (35),
    (slotx, parent_slotx, segno) fixed bin (17);
dcl  copy_kst bit (bc) aligned based;
dcl 1 star_dot_star_dot_star aligned,
    2 pers_name char (32) initial ("*"),
    2 proj_name char (32) initial ("*"),
    2 tag char (1) initial ("*"),
    2 modes bit (72);
dcl 1 all_access aligned,
    2 name char (32) initial ("*.*.*"),
    2 modes bit (36) initial ("01000"b),
    2 mbz bit (36) initial ("0"b),
    2 code fixed bin (35);
dcl  error_table_$action_not_performed ext fixed bin (35),
     sys_info$time_of_bootload ext fixed bin (71),
     active_all_rings_data$max_segno ext fixed bin (17),
     dseg$ ext fixed bin;
dcl  acc_list_$match entry (fixed bin, bit (36) aligned, ptr, ptr, ptr, fixed bin, fixed bin (35)),
     acl$areplace entry (char (*), char (*), ptr, fixed bin (17), bit (1), fixed bin (35)),
     append$branch entry (char (*), char (*), fixed bin (5), fixed bin (35)),
     delentry$dfile entry (char (*), char (*), fixed bin (35)),
     delentry$dseg entry (ptr, fixed bin (35)),
     fs_modes entry (ptr, bit (36) aligned, bit (36) aligned, (3) fixed bin (3), fixed bin (35)),
     initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35)),
     initiate$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35)),
     kstsrch entry (bit (36) aligned, fixed bin (17), ptr),
     level$get entry returns (fixed bin (3)),
     level$set entry (fixed bin (3)),
     lock$dir_unlock entry (ptr),
     set$bc_seg entry (ptr, fixed bin (24), fixed bin (35)),
     set$safety_sw_path entry (char (*), char (*), bit (1), fixed bin (35)),
     set$copysw entry (char (*), char (*), fixed bin (1), fixed bin (35)),
     sum$getbranch entry (ptr, bit (36) aligned, ptr, fixed bin (35)),
     terminate_$noname entry (ptr, fixed bin (35));

dcl  (addr, baseno, baseptr, bin, fixed, null, ptr, rel, string, substr, unspec) builtin;

create:	entry (a_dirname, a_access_calculated, a_code);

	dirname = a_dirname;
	a_access_calculated = 0;
	a_code = 0;

	access_calculated = 0;
	created_kst, created_dseg = "0"b;
	his_kstp, his_dsegp = null ();
	my_dsegp = addr (dseg$);
	my_kstp = pds$kstp;
	level = level$get ();
	call level$set (0);

/* verify that kst_seg exists, is a segment and is readable by caller */

	call initiate$initiate_count (dirname, "kst_seg", "", bc, 0, input_kstp, code);
	if input_kstp = null () then call abort_create (code);
	if my_kstp -> kst.kst_entry (fixed (baseno (input_kstp))).dirsw
	then call abort_create (0);			/* nice try fella */
	call fs_modes (input_kstp, mode, exmode, rings, code);
	if code ^= 0 then call abort_create (code);
	if (mode & R_ACCESS) ^= R_ACCESS | level > rings (2)
	then call abort_create (0);			/* nasty, nasty */

/* create template_kst */

	call append$branch (dirname, "template_kst", 01010b, code);
	if code ^= 0 then call abort_create (code);
	created_kst = "1"b;
	call initiate (dirname, "template_kst", "", 0, 0, his_kstp, code);
	if code ^= 0 then call abort_create (code);

/* create dseg */

	call append$branch (dirname, "template_dseg", 01010b, code);
	if code ^= 0 then call abort_create (code);
	created_dseg = "1"b;
	call initiate (dirname, "template_dseg", "", 0, 0, his_dsegp, code);
	if his_dsegp = null () then call abort_create (code);

/* copy kst_seg into template_kst */

	his_kstp -> copy_kst = input_kstp -> copy_kst;
	his_kstp -> kst.template = "0"b;
	call terminate_$noname (input_kstp, (0));

/* validate kst header */

	if his_kstp -> kst.time_of_bootload ^= sys_info$time_of_bootload
	then call abort_create (0);			/* must be made this bootload */
	if his_kstp -> kst.lowseg ^= my_kstp -> kst.lowseg
	then call abort_create (0);			/* the fool */
	if his_kstp -> kst.highseg > active_all_rings_data$max_segno
	then call abort_create (0);
	if his_kstp -> kst.highest_used_segno < his_kstp -> kst.lowseg + 7
	then call abort_create (0);
	if bin (rel (addr (his_kstp -> kst_entry (his_kstp -> kst.highest_used_segno + 1)))) * 36 ^= bc
	then call abort_create (0);
	if substr (string (his_kstp -> kst.prelinked_ring), 1, level - 1) ^= ""b
	then call abort_create (0);

/* clean out stuff we won't look at */

	his_kstp -> kst.free_list = "0"b;
	unspec (his_kstp -> kst.uid_hash_bucket) = "0"b;
	do slotx = his_kstp -> kst.lowseg to his_kstp -> kst.highest_used_segno;
	     his_kstep = addr (his_kstp -> kst.kst_entry (slotx));
	     his_kstep -> kste.segno = slotx;
	     his_kstep -> kste.fp = "0"b;
	     unspec (his_kstep -> kste.access_information) = "0"b;
	     unspec (his_kstep -> kste.flags) = "0"b;
	     his_kstep -> kste.infcount = 0;
	     his_kstep -> kste.dtbm = (36) "1"b;
	end;

/* verify and build kstes */

	do slotx = his_kstp -> kst.lowseg to his_kstp -> kst.highest_used_segno;
	     his_kstep = addr (his_kstp -> kst.kst_entry (slotx));
	     if his_kstep -> kste.uid = "0"b
	     then do;
		his_kstep -> kste.usage_count = 0;
		unspec (his_kstep -> kste.entryp) = "0"b;
		if slotx ^> his_kstp -> kst.lowseg + 7
		then his_kstep -> kste.fp = (18)"1"b;	/* reserve stack */
		else do;
		     his_kstep -> kste.fp = his_kstp -> kst.free_list;
		     his_kstp -> kst.free_list = rel (his_kstep);
		end;
	     end;
	     else do;
		call kstsrch (his_kstep -> kste.uid, hash_class, my_kstep);
		if my_kstep = null () then call abort_create (0);
		his_kstep -> kste.fp = his_kstp -> kst.uid_hash_bucket (hash_class);
		his_kstp -> kst.uid_hash_bucket (hash_class) = rel (his_kstep);
		segno = my_kstep -> kste.segno;
		if his_kstep -> kste.entryp ^= null ()
		then do;
		     parent_slotx = bin (baseno (his_kstep -> kste.entryp));
		     if his_kstp -> kst.kst_entry (parent_slotx).uid ^= my_kstp -> kst.kst_entry (bin (baseno (my_kstep -> kste.entryp))).uid
		     then call abort_create (0);
		     his_kstep -> kste.entryp = ptr (his_kstep -> kste.entryp, rel (my_kstep -> kste.entryp));
		     his_kstp -> kst.kst_entry (parent_slotx).infcount = his_kstp -> kst.kst_entry (parent_slotx).infcount + 1;
		end;
		else if my_kstep -> kste.entryp ^= null ()
		then call abort_create (0);
		call set_access ();
		his_kstep -> kste.dirsw, his_kstep -> kste.tms = my_kstep -> kste.dirsw;
		his_kstep -> kste.allow_write = "1"b;
		do ring = 7 to level + 1 while (his_kstep -> kste.usage_count (ring) = 0);
		end;
	     end;
	end;

/* mark it as a valid template_kst */

	his_kstp -> kst.template = "1"b;

/* fix access on template_dseg */

	call set$bc_seg (his_dsegp, (his_kstp -> kst.highest_used_segno + 1) * 72, code);
	if code ^= 0 then call abort_create (code);
	call acl$areplace (dirname, "template_dseg", addr (all_access), 1, "0"b, code);
	if code ^= 0 then call abort_create (code);

/* fix access on template_kst */

	call set$bc_seg (his_kstp, bc, code);
	if code ^= 0 then call abort_create (code);
	call acl$areplace (dirname, "template_kst", addr (all_access), 1, "0"b, code);
	if code ^= 0 then call abort_create (code);

/* cleanup */

	call terminate_$noname (his_kstp, (0));
	call terminate_$noname (his_dsegp, (0));
	call level$set (level);
	a_access_calculated = access_calculated;
	return;

set_access: proc ();

dcl dummy_rings (3) fixed bin (3);

	     call sum$getbranch (baseptr (segno), "0"b, ep, code);
	     if code ^= 0 then return;
	     if ep -> entry.acle_count = 1
	     then do;
		call acc_list_$match ((entry.acle_count), entry.uid, addr (entry.acl_frp),
		addr (star_dot_star_dot_star), (null ()), (0), code);
		if code = 0
		then do;
		     call fs_modes (baseptr (segno), ("0"b), ("0"b), dummy_rings, code);
		     if code = 0
		     then do;
			access_calculated = access_calculated + 1;
			his_kstep -> kste.access_information = my_kstep -> kste.access_information;
			his_dsegp -> sdwa (slotx).r1 = my_dsegp -> sdwa (segno).r1;
			his_dsegp -> sdwa (slotx).r2 = my_dsegp -> sdwa (segno).r2;
			his_dsegp -> sdwa (slotx).r3 = my_dsegp -> sdwa (segno).r3;
			his_dsegp -> sdwa (slotx).read = my_dsegp -> sdwa (segno).read;
			his_dsegp -> sdwa (slotx).write = my_dsegp -> sdwa (segno).write;
			his_dsegp -> sdwa (slotx).execute = my_dsegp -> sdwa (segno).execute;
		     end;
		end;
	     end;
	     call lock$dir_unlock (ptr (ep, 0));
	     return;
	end set_access;

abort_create: proc (code);
dcl  code fixed bin (35);
	     if created_dseg
	     then call delentry$dfile (dirname, "template_dseg", (0));
	     if created_kst
	     then call delentry$dfile (dirname, "template_kst", (0));
	     call level$set (level);
	     if code = 0
	     then a_code = error_table_$action_not_performed;
	     else a_code = code;
	     go to return_to_caller;
	end abort_create;

/*
   
*/

delete:	entry (a_dirname, a_code);

	dirname = a_dirname;
	a_code = 0;

	my_kstp = pds$kstp;
	his_kstp, his_dsegp = null ();
	level = level$get ();
	call level$set (0);

/* verify kst_seg exists, is a segment, and has brackets 0, 0, 0 */

	call initiate_r0_seg ("template_kst", his_kstp);

/* verify dseg exists, is a segment, and has brackets 0, 0, 0 */

	call initiate_r0_seg ("template_dseg", his_dsegp);

/* verify modify permission on containing directory */

	call fs_modes ((my_kstp -> kst.kst_entry (bin (baseno (his_kstp))).entryp), mode, exmode, rings, code);
	if code ^= 0 then call abort_delete (code);
						/* UNCOMMENT WHEN FS_GET FIXED
						   if level > rings (2) then call abort_delete (0);
						   */
	if (mode & M_ACCESS) ^= M_ACCESS then call abort_delete (0);

/* validate that this is a template kst */

	if ^his_kstp -> kst.template then call abort_delete (0);

/* okay lets do it */

	call delete_r0_seg (his_kstp, "template_kst");
	call delete_r0_seg (his_dsegp, "template_dseg");
	call level$set (level);
	return;

initiate_r0_seg: proc (ename, segptr);
dcl  ename char (*),
     segptr ptr;
	     call initiate (dirname, ename, "", 0, 0, segptr, code);
	     if segptr = null () then call abort_delete (code);
	     if my_kstp -> kst.kst_entry (bin (baseno (segptr))).dirsw
	     then call abort_delete (0);
	     call fs_modes (segptr, mode, exmode, rings, code);
	     if code ^= 0 then call abort_delete (code);
	     if rings (1) ^= 0 | rings (2) ^= 0 | rings (3) ^= 0
	     then call abort_delete (0);		/* tut, tut */
	     return;
	end initiate_r0_seg;

delete_r0_seg: proc (segptr, ename);
dcl  segptr ptr,
     ename char (*);
	     call delentry$dseg (segptr, code);
	     if code ^= 0
	     then do;
		call set$safety_sw_path (dirname, ename, "0"b, (0));
		call set$copysw (dirname, ename, 0, (0));
		call delentry$dseg (segptr, code);
		if code ^= 0 then call abort_delete (code);
	     end;
	     segptr = null ();
	     return;
	end delete_r0_seg;

abort_delete: proc (code);
dcl  code fixed bin (35);
	     if his_kstp ^= null () then call terminate_$noname (his_kstp, (0));
	     if his_dsegp ^= null () then call terminate_$noname (his_dsegp, (0));
	     call level$set (level);
	     if code = 0
	     then a_code = error_table_$action_not_performed;
	     else a_code = code;
	     go to return_to_caller;
	end abort_delete;

return_to_caller:
	return;
/*
   
*/
%include access_mode_values;
/*
   
*/
%include dir_entry;
/*
   
*/
%include kst;
/*
   
*/
%include sdw;

     end template_address_space;
