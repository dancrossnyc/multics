/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */

/* Procedure which contains some entires that now how to deal with uid pathnames.
   This module was written for use by Master directory Control. */

/* UID_PATH_UTIL has the following entries:

   1. uid_path_util$get: Given a pointer to a directory, this entry returns the uidpathname of its parent

   2. uid_path_util$get_uid_path: A gate entry which, given a pathname, returns
   a uid pathname.

   3. uid_path_util$decode_uidpath: A gate entry which, given a uid pathanme,
   returns a directory and entry name.


*/

/* Written March 1975 by Larry Johnson */
/* Modified July 1984 by Keith Loepere to use the new dc_find. */
/* Modified January 1985 by EJ Sharpe to handle et_$root */
/* Modified May 1985 by EJ Sharpe to add decode_uidpath_raw and decode_uidpath_priv,
	the decode_uidpath entry now requires "S" on parent */

uid_path_util: proc;

/* Parameters */

dcl  a_code			fixed bin (35);
dcl  a_dirname			char (*);		/* Name of directory to return */
dcl  a_dp				ptr;		/* Returned pointer to the directory */
dcl  a_ename			char (*);		/* Entry name to return */
dcl  a_uidpath			(0:15) bit (36) aligned; /* Pathname of directory to find */

/* Variables */

dcl  build_dir			char (168) var init ("");
dcl  code				fixed bin (35);
dcl  decodesw			bit (1) init ("0"b);/* Set if entered thru decode_uidpath entry */
dcl  dirsw			bit (1) init ("0"b);/* Set if entered thru dir entry */
dcl  dname			char (168);
dcl  ename			char (32);
dcl  i				fixed bin;
dcl  segnum			fixed bin;
dcl  uidpath			(0:15) bit (36) aligned;

/* Misc */

dcl  (ptr, segno, unspec)		builtin;

/* External */

dcl  error_table_$bad_uidpath		ext fixed bin (35);
dcl  error_table_$root		ext fixed bin (35);

/* Entries */

dcl  get_kstep$dir			entry (fixed bin, ptr, fixed bin (35));
dcl  uid_path_util$get		entry (ptr, dim (0:15) bit (36) aligned, fixed bin (35));
%page;

/* This entry will get a uid pathname from a directory pointer */

get: entry (a_dp, a_uidpath, a_code);

	a_code = 0;
	dp = a_dp;
	a_uidpath = "0"b;

	do i = dir.tree_depth to 0 by -1;		/* Scan backwards thru all parents */
	     segnum = segno (dp);
	     call get_kstep$dir (segnum, kstep, code);	/* Find the kst entry */
	     if code ^= 0 then go to err;
	     a_uidpath (i) = kste.uid;
	     dp = kste.entryp;			/* Back to parent */
	end;
	return;


/* This entry is called thru a gate. Given a directory and entry name,
   it returns the uidpath */

get_uidpath: entry (a_dirname, a_ename, a_uidpath, a_code);

	dname = a_dirname;
	ename = a_ename;
	unspec (a_uidpath) = "0"b;
	call dc_find$obj_status_read_priv (dname, ename, DC_FIND_NO_CHASE, ep, code); /* Find my seg */
	if code ^= 0 then go to err;
	dp = ptr (ep, 0);
	call uid_path_util$get (dp, uidpath, code);	/* Get uidpath of parent */
	if code ^= 0 then do;
	     call dc_find$finished (dp, "1"b);
	     go to err;
	end;
	uidpath (dir.tree_depth + 1) = entry.uid;	/* Finish up with uid of entry */
	call dc_find$finished (dp, "1"b);
	a_uidpath = uidpath;
	return;

err:	a_code = code;
	return;

/* This entry, called thru a gate, will return a directory and entry name,
   given a uidpath name.  The caller must have "S" access on parent of the entry.
   It is used by master directory control via admin_gate_. */

decode_uidpath: entry (a_uidpath, a_dirname, a_ename, a_code);

	uidpath = a_uidpath;
	a_dirname, a_ename = "";
	a_code = 0;

	call dc_find$obj_status_read_uid (uidpath, dname, ename, ep, code);
	goto decode_common;

/* This entry, called thru a gate, will return a directory and entry name,
   given a uidpath name.  The caller need not have "S" access on parent of the entry. */

decode_uidpath_priv: entry (a_uidpath, a_dirname, a_ename, a_code);

	uidpath = a_uidpath;
	a_dirname, a_ename = "";
	a_code = 0;

	call dc_find$obj_status_read_priv_uid (uidpath, dname, ename, ep, code);
	goto decode_common;

/* This entry, called thru a gate, will return a directory and entry name,
   given a uidpath name.  It allows access to the names of aim isolated dirs.
   It is called from the volume backup system via the hc_backup_ gate. */

decode_uidpath_raw: entry (a_uidpath, a_dirname, a_ename, a_code);

	uidpath = a_uidpath;
	a_dirname, a_ename = "";
	a_code = 0;

	call dc_find$obj_status_read_raw_uid (uidpath, dname, ename, ep, code);


decode_common:
	if code = error_table_$root
	then do;
	     code = 0;
	     ename = "";				/* no entry */
	end;
	else if code = error_table_$bad_uidpath then do;	/* return what we know */
	     a_dirname = dname;
	     a_ename = "";
	     go to err;
	end;
	else if code ^= 0
	     then go to err;			/* return the error */
	else call dc_find$finished (ptr (ep, 0), "1"b);	/* we're finished */

	a_dirname = dname;
	a_ename = ename;
	a_code = 0;
	return;
%page; %include dc_find_dcls;
%page; %include dir_entry;
%page; %include dir_header;
%page; %include kst;
     end uid_path_util;
