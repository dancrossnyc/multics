/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style4 */
chname: proc;

/*	Last modified (Date and reasons):
   by Keith Loepere to provide audit info and to change PAM to use uid's, November 1984.
   by Keith Loepere to use the new dc_find, August 1984.
   by BIM 1984 for sst reformat.
   by E. N. Kittlitz, May 1983, search_ast$check.
   by E. N. Kittlitz, March 1983, to not backup entry.dtem.
   by Keith Loepere January 1983 so bad ring bracket error makes it to user.
   by J. Bongiovanni to always flush pam on directory rename
   by THVV for bad_dir_ check, 7/77
   by D. Vinograd to add new entry retv for use by the volume retriever, 9/76
   by S. Barr to use new hash table format, 9/76
   by R. Bratt to call find_$finished, 06/01/76
   by R. Bratt for pam flush, 2/3/76.
   by BSG for NSS, 4/25/75.
   by Bernard S. Greenberg for SST name table, Feb. 18, 1975.
   by Richard H. Gumpertz 9 July 71 to interpret user not on acl as "null 7,7,7" when checking validation level
   by Richard H Gumpertz on 8 July 71 to check brackets for >= validation level
*/

cfile: entry (a_parent, a_ename, a_oldname, a_newname, a_code);

/*
   This proceedure to used to add, delete, and rename segments. It has two
   entry points. The entry point cfile" takes a directory path name and entry name
   to determine the segment affected while the entry point "cseg" uses a pointer.

   USAGE:	call chname$cfile(directory_name, entry_name, old_name, new_name, error_code);

   1. directory_name char(*)		path name of directory in which entry_name is an entry.

   2. entry_name char(*)		entry name of segment to be changed.

   3. old_name char(*)			name to be deleted from name list of entry_name.

   4. new_name char(*)			name to be added to name list of entry_name.

   5. error_code fixed bin(35)		file system error code (Output).

   USAGE:	call chname$cseg(segment_pointer, old_name, new_name, error_code);

   1. segment_pointer pointer		pointer to segment to be changed.

   2. - 4. Same as above.


   NOTE:	1. Caller must have write access with respect to the directory.

*/

dcl  a_code fixed bin (35);
dcl  a_ename char (*);
dcl  a_ep ptr;
dcl  a_newname char (*);
dcl  a_oldname char (*);
dcl  a_parent char (*);
dcl  a_sp ptr;

dcl  ep_known fixed bin static init (2) options (constant); ;
dcl  file fixed bin static init (0) options (constant);
dcl  seg fixed bin static init (1) options (constant); ;

dcl  areap ptr;
dcl  code fixed bin (35);
dcl  ename char (32);
dcl  entry_point fixed bin;
dcl  just_delete_name bit (1) aligned;
dcl  last_namep ptr;
dcl  namecnt fixed bin (18);
dcl  nep ptr;
dcl  new_np ptr;
dcl  newname char (32) aligned;
dcl  newname_p ptr;
dcl  next_np ptr;					/* ptr to next primary name before it is moved in */
dcl  old_np ptr;
dcl  oldname char (32) aligned;
dcl  oldname_p ptr;
dcl  parent char (168);
dcl  pvid bit (36) aligned;
dcl  save_fp bit (18);				/* save of old primary name forward thread */
dcl  sp ptr;
dcl  uid bit (36) aligned;
dcl  vtocx fixed bin;

dcl  active_hardcore_data$ensize fixed bin external;
dcl  error_table_$bad_ring_brackets fixed bin (35) external;
dcl  error_table_$namedup fixed bin (35) external;
dcl  error_table_$noalloc fixed bin (35) external;
dcl  error_table_$noentry fixed bin (35) external;
dcl  error_table_$nonamerr fixed bin (35) external;
dcl  error_table_$oldnamerr fixed bin (35) external;
dcl  error_table_$segnamedup fixed bin (35) external;
dcl  pds$processid bit (36) aligned ext;
dcl  1 pds$transparent aligned ext,
       2 m bit (1) unaligned,
       2 u bit (1) unaligned;
dcl  sst$ast_track bit (1) aligned external;

dcl  change_dtem entry (ptr);
dcl  fs_alloc$alloc entry (ptr, fixed bin, ptr);
dcl  fs_alloc$free entry (ptr, fixed bin, ptr);
dcl  hash$in entry (ptr, ptr, fixed bin (35));
dcl  hash$out entry (ptr, ptr, ptr, fixed bin (35));
dcl  hash$search entry (ptr, ptr, ptr, fixed bin (35));
dcl  level$get entry returns (fixed bin);
dcl  lock$dir_unlock entry (ptr);
dcl  lock$lock_ast entry;
dcl  lock$unlock_ast entry;
dcl  pathname_am$flush entry (bit (36) aligned);
dcl  search_ast$check entry (bit (36) aligned, bit (36) aligned, fixed bin, fixed bin (35)) returns (ptr);
dcl  sum$dirmod entry (ptr);

dcl  (addr, bin, bit, clock, divide, fixed, null, ptr, rel, rtrim) builtin;
%page;
	entry_point = file;				/* entered via chname entry point */
	parent = a_parent;
	ename = a_ename;

	go to common;

cseg: entry (a_sp, a_oldname, a_newname, a_code);

	entry_point = seg;				/* entered via chname$cseg entry point */
	sp = a_sp;
	goto common;

retv: entry (a_ep, a_oldname, a_newname, a_code);

	ep = a_ep;
	dp = ptr (ep, 0);
	entry_point = ep_known;

common:
	code = 0;
	oldname = a_oldname;
	newname = a_newname;

	if newname = "" then just_delete_name = "1"b;	/* if no name is to be added, then just remove a name */
	else just_delete_name = "0"b;			/* otherwise adding or replacing a name */

	if entry_point ^= ep_known then do;
	     if entry_point = file then call dc_find$obj_status_write (parent, ename, 0, FS_OBJ_RENAME, ep, code);
	     else call dc_find$obj_status_write_ptr (sp, FS_OBJ_RENAME, ep, code);
	     dp = ptr (ep, 0);
	     if code ^= 0 then go to finale;

	     if entry.bs then
		if ^(entry.dirsw) then
		     if fixed (entry.ring_brackets (1), 3) < (level$get ()) then do;
			code = error_table_$bad_ring_brackets;
			go to unlock;
		     end; else ;
		else if fixed (entry.ex_ring_brackets (1), 3) < (level$get ()) then do;
		     code = error_table_$bad_ring_brackets;
		     go to unlock;
		end; else ;
	end;

	namecnt = fixed (entry.nnames, 18);

	if namecnt = 1 then if just_delete_name		/* Will there be any names left after oldname is deleted */
	     then do;				/* and no name is added */
		code = error_table_$nonamerr;
		go to unlock;
	     end;

	areap = ptr (dp, dir.arearp);

	dir.modify = pds$processid;

	if just_delete_name then go to delete_name;

	newname_p = addr (newname);
	call hash$search (dp, newname_p, nep, code);
	if code = 0 then do;
	     if ep = nep then code = error_table_$segnamedup;
	     else code = error_table_$namedup;
	     go to unlock;
	end;
	if code ^= error_table_$noentry then go to unlock;

	call fs_alloc$alloc (areap, active_hardcore_data$ensize, new_np); /* allocate storage for newname */
	if new_np = null then go to noalloc_err;

	new_np -> names.name = newname;

	new_np -> names.entry_rp = rel (ep);
	new_np -> names.type = NAME_TYPE;
	new_np -> names.size = active_hardcore_data$ensize;
	new_np -> names.owner = entry.uid;

	call hash$in (dp, new_np, code);
	if code ^= 0 then go to hash_error;

	last_namep = ptr (ep, entry.name_brp);
	new_np -> names.bp = rel (last_namep);
	last_namep -> names.fp = rel (new_np);
	entry.name_brp = rel (new_np);
	namecnt = namecnt + 1;			/* increase count of number of names for "entry" */


delete_name: if oldname = "" then go to finish;

	oldname_p = addr (oldname);
	call hash$search (dp, oldname_p, nep, code);
	if code ^= 0 then go to finish;		/* if name not in hash table (most probably) */
	if ep ^= nep then go to name_err;		/* if name associated with another entry */

	call hash$out (dp, oldname_p, old_np, code);	/* Hash "oldname" to find its place in the */
	if code ^= 0 then do;			/* hash table and vacate this place. */
name_err:	     code = error_table_$oldnamerr;
	     go to finish;
	end;

	if old_np -> names.bp then do;		/* not primary name */
	     ptr (old_np, old_np -> names.bp) -> names.fp = old_np -> names.fp;
	     if old_np -> names.fp then ptr (old_np, old_np -> names.fp) -> names.bp = old_np -> names.bp;
	     else entry.name_brp = old_np -> names.bp;
	end;
	else do;

/* * The name entry for the primary name is stored in the entry structure.  If the name being deleted or changed
   * was the primary name, then the new primary name must be moved into this area.  The steps are:
   *	1. The new primary name is hashed out.
   *	2. The new primary name is threaded out.
   *	3. The contents of the new primary name are copied into the slot in the entry.
   *	4. The new primary name in its new location is hashed in.
*/
	     if just_delete_name then next_np = ptr (dp, old_np -> names.fp);
	     else next_np = new_np;

	     call hash$out (dp, addr (next_np -> names.name), next_np, code);
	     if code ^= 0 then goto finish;

/* Unthread new primary name. */

	     if next_np -> names.fp = "0"b
	     then entry.name_brp = next_np -> names.bp;	/* end of chain */
	     else ptr (dp, next_np -> names.fp) -> names.bp = next_np -> names.bp;
	     ptr (dp, next_np -> names.bp) -> names.fp = next_np -> names.fp;

/* Copy new primary name into entry slot, but save old primary threads. */

	     save_fp = old_np -> names.fp;
	     old_np -> names = next_np -> names;
	     old_np -> names.fp = save_fp;
	     old_np -> names.bp = "0"b;

	     call hash$in (dp, old_np, code);
	     if code ^= 0 then goto finish;
	     old_np = next_np;			/* set so space will be freed later */

	     if entry.bs & sst$ast_track then do;	/* AST names */
		uid = entry.uid;			/* Must extract info before locking AST */
		pvid = entry.pvid;
		vtocx = entry.vtocx;
		temp_entry_name = newname;		/* This is the new name */
		call lock$lock_ast;
		nm_astep = search_ast$check (uid, pvid, vtocx, (0)); /* ignore code since it's just for name table */
		if nm_astep ^= null then

%include make_sstnt_entry;
		call lock$unlock_ast;
	     end;
	end;

	namecnt = namecnt - 1;			/* decrease count of number of names for "entry" */

	call fs_alloc$free (areap, active_hardcore_data$ensize, old_np); /* free storage for "oldname" */
	if entry.dirsw
	then call pathname_am$flush (entry.uid);


finish:	entry.nnames = namecnt;
	if ^pds$transparent.m then			/* is it ok to change date */
	     if entry.dtem ^= bit (fixed (clock (), 52), 36) then /* if 'now', don't bother. we're not setfaulting */
		call change_dtem (ep);		/* if old, brighten it up */
	dir.modify = "0"b;
	call sum$dirmod (dp);			/* Notify control that "parent" has been modified */
	go to unlock1;

/* Error handlers. */

unlock:	dir.modify = "0"b;
unlock1:	if entry_point ^= ep_known then do;
	     if entry_point = file
	     then call dc_find$finished (dp, "1"b);
	     else call lock$dir_unlock (dp);
	end;
finale:	a_code = code;
	return;

hash_error:
	call fs_alloc$free (areap, active_hardcore_data$ensize, new_np);
	go to unlock;
noalloc_err:
	code = error_table_$noalloc;
	go to unlock;

/* format: off */

%page; %include aste;
%page; %include dc_find_dcls;
%page; %include dir_entry;
%page; %include dir_header;
%page; %include dir_ht;
%page; %include dir_name;
%page; %include fs_obj_access_codes;
%page; %include fs_types;
%page; %include sstnt;
     end chname;
