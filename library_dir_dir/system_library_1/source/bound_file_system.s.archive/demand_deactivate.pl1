/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style4 */
demand_deactivate: proc (a_segptr, a_code);

/* Written March 30, 1976 by R. Bratt

   This module allows priveleged users to deactivate a segment if certain
   conditions obtain. These conditions are:
   *	the segment must be known in the calling process
   *	the segment must be active
   *	all users who have connected to the aste must have specified explicit_deact_ok,
   *         or this is force entry
   *	the aste must be deactivateable

   Modified for external static SST, 04/19/81, W. Olin Sibert
   Modified for $force entrypoint, 04/21/81, WOS
   Modified for $force_given_segno entrypoint, 02/28/82, J. Bongiovanni
   Modified to lock ast on search, 05/30/83, E. N. Kittlitz
   Modified to respect threaded-out-ness, 84-01-08 BIM.
*/

dcl  a_segptr ptr parameter;
dcl  a_seg_uid bit (36) aligned parameter;
dcl  a_code fixed bin (35) parameter;

dcl  segno fixed bin (17);
dcl  code fixed bin (35);
dcl  uid bit (36) aligned;
dcl  force_sw bit (1) aligned;

dcl  sst$demand_deact_attempts fixed bin (35) external static;
dcl  sst$demand_deactivations fixed bin (35) external static;

dcl  deactivate entry (ptr, fixed bin (35));
dcl  get_kstep entry (fixed bin, pointer, fixed bin (35));
dcl  lock$lock_ast entry ();
dcl  lock$unlock_ast entry ();
dcl  search_ast entry (bit (36) aligned) returns (pointer);

dcl  error_table_$illegal_deactivation fixed bin(35) ext static;

dcl  (baseno, binary, null) builtin;

%page;

	force_sw = "0"b;				/* Don't, unless we're allowed to */
	goto FIND_UID;


demand_deactivate$force_given_segno:
     entry (a_segptr, a_code);

	force_sw = "1"b;

FIND_UID:
	segno = binary (baseno (a_segptr), 18);		/* Find the UID for the segment */

	call get_kstep (segno, kstep, code);
	if code ^= 0 then do;			/* Bad segno, or something */
	     a_code = code;
	     return;
	end;

	uid = kste.uid;
	goto COMMON;


demand_deactivate$force: entry (a_seg_uid, a_code);	/* Deactivate by UID, rather than segno, and force */

	uid = a_seg_uid;
	force_sw = "1"b;				/* Deactivate, if at all possible */


COMMON:	code = 0;					/* Assume success */
	sst$demand_deact_attempts = sst$demand_deact_attempts + 1;
	call lock$lock_ast ();

/* we don't go to the expense of deriving pvid, vtocx. If we have a double-uid,
   we'll either find the right segment active, or we'll harrass the other segment
   with the same uid.  In either case, the segment we want will end up inactive, if possible. */

	astep = search_ast (uid);
	if astep ^= null () then
	     if force_sw | aste.explicit_deact_ok then do;/* We're allowed to try it */
		if (astep -> aste.fp | astep -> aste.bp) = ""b
		then do;
		     code = error_table_$illegal_deactivation;
		     go to RETURN;
		end;
		call deactivate (astep, code);	/* See what happens */

		if code = 0 then sst$demand_deactivations = sst$demand_deactivations + 1;
	     end;					/* Record successes */
RETURN:
	call lock$unlock_ast ();
	a_code = code;
	return;

/*format: off */
%page; %include aste;
%page; %include kst;

     end demand_deactivate;
