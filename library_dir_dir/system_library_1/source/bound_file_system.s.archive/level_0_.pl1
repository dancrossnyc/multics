/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


level_0_: proc;

/* This a program to set the level to 0 before call the access primitives. */
/* Last modified 01/11/79 by C. D. Tavares to add dir_ring_brackets code */
/* Modified 04/26/82 by S Krupp to change declaration of dname and
   ename to char(*). */

dcl  dname char (*),
     ename char (*),
     aptr ptr,
     acount fixed bin,
     dbit bit (1) aligned,				/* daemon bit */
     code fixed bin (35),
     dir_ring_brackets (2) fixed bin (5),
     ring_brackets (3) fixed bin (5),
     esw fixed bin,
     save_level fixed bin;

dcl  level$get entry (fixed bin),
     level$set entry (fixed bin),
     asd_$add_sentries entry (char (*), char (*), ptr, fixed bin (17), fixed bin (35)),
     asd_$add_dentries entry (char (*), char (*), ptr, fixed bin (17), fixed bin (35)),
     asd_$replace_sall entry (char (*), char (*), ptr, fixed bin (17), bit (1) aligned, fixed bin (35)),
     asd_$replace_dall entry (char (*), char (*), ptr, fixed bin (17), bit (1) aligned, fixed bin (35)),
     asd_$del_sentries entry (char (*), char (*), ptr, fixed bin (17), fixed bin (35)),
     asd_$del_dentries entry (char (*), char (*), ptr, fixed bin (17), fixed bin (35)),
     ringbr_$set entry (char (*), char (*), (3) fixed bin (5), fixed bin (35)),
     ringbr_$set_dir entry (char (*), char (*), (2) fixed bin (5), fixed bin (35)),
     delentry$priv_dfile entry (char (*), char (*), fixed bin (35));


add_acl_entries: entry (dname, ename, aptr, acount, code);

	esw = 0;					/* add name or names to acl */
	go to start;

add_dir_acl_entries: entry (dname, ename, aptr, acount, code);

	esw = 1;					/* add name or names to dir acl */
	go to start;

replace_acl: entry (dname, ename, aptr, acount, dbit, code);

	esw = 2;					/* replace acls */
	go to start;

replace_dir_acl: entry (dname, ename, aptr, acount, dbit, code);

	esw = 3;					/* replace for a dir */
	go to start;

delete_acl_entries: entry (dname, ename, aptr, acount, code);

	esw = 4;					/* delete acls */
	go to start;

delete_dir_acl_entries: entry (dname, ename, aptr, acount, code);

	esw = 5;					/* delete for a dir */
	go to start;

set_ring_brackets: entry (dname, ename, ring_brackets, code);

	esw = 6;					/* modify the ring brackets */
	go to start;

set_dir_ring_brackets: entry (dname, ename, dir_ring_brackets, code);

	esw = 7;					/* modify the dir ring brackets */
	go to start;

delentry_file: entry (dname, ename, code);

	esw = 8;					/* delete a segment */
	goto start;

start:
	call level$get (save_level);			/* save the current level */
	call level$set (0);				/* set it to zero */

	if esw = 0 then call asd_$add_sentries (dname, ename, aptr, acount, code);
	else if esw = 1 then call asd_$add_dentries (dname, ename, aptr, acount, code);
	else if esw = 2 then call asd_$replace_sall (dname, ename, aptr, acount, dbit, code);
	else if esw = 3 then call asd_$replace_dall (dname, ename, aptr, acount, dbit, code);
	else if esw = 4 then call asd_$del_sentries (dname, ename, aptr, acount, code);
	else if esw = 5 then call asd_$del_dentries (dname, ename, aptr, acount, code);
	else if esw = 6 then call ringbr_$set (dname, ename, ring_brackets, code);
	else if esw = 7 then call ringbr_$set_dir (dname, ename, dir_ring_brackets, code);
	else if esw = 8 then call delentry$priv_dfile (dname, ename, code);

	call level$set (save_level);			/* restore the proper level */

	return;

     end;
