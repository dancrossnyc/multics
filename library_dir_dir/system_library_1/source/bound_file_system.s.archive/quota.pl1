/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */

quota: proc;

/* QUOTA - directory control interface for managing quotas.

   Quotas live in the VTOC entry; or in the ASTE when the seg is active.
   There are two "quota cells" for each directory: one for pages of segments and one for directory pages.
   Each quota cell contains
   .	quota
   .	used
   .	clock
   .	time-page product
   .	received count (quota + all inferior quotas)
   .	inferior quota count

   The current program does not handle directory quota at all.

   Quota cell is protected by the directory lock.
   But used can only be satisfactorily protected by the PTL.
   So quotaw is called to look at or manipulate used, and he must be called
   with the AST locked since his inputs are asteps.

   vtoc_attributes is used to  read and write quota cells in VTOC.
   It may be called with or without AST locked */

/* Last change: */
/* Modified May 1985 by EJ Sharpe to use dc_find$mdir_set_quota_uid and to
     enforce AIM restriction on removing quota from upgraded master dirs */
/* Modified January 1985 by Keith Loepere to set tup at append_mdir_set. */
/* Modified November 1984 by Keith Loepere for auditing info. */
/* Modified July 1984 by Keith Loepere to use the new dc_find. */
/* Modified BIM 84-05 for sst reformat. */
/* Modified BIM 83-12-06 to correctly check dir privilege and upgradedness, TR 16411 */
/* Modified BIM 3/82 to only hold read locks when appropriate */
/* Modified 05/05/82 by S. Krupp to change error code invalid_move_quota to
   invalid_move_qmax and return ai_not_restricted in case of no privilege */
/* Modified November 1979 by C. Hornig for privileged quota reading */
/* Modified 19 Feb 79 by D. Spector for 18-bit quota values */
/* Modified June 1, 1976 by R. Bratt to call find_$finished */
/* Modified March 1976 by Larry Johnson for master directory quota */
/* Extensive changes for NSS by TVV 6/75 */
/* Modified by Kobziar 10-21-74 to add qmove_mylock entry */
/* Modified by Kobziar July 74 to call new entry in access_mode and to check authorization */

/* Parameters */

dcl  a_code			fixed bin (35) parameter;
dcl  a_dp1			ptr parameter;
dcl  a_ename			char (*) parameter;
dcl  a_ep				ptr parameter;
dcl  a_ignore			fixed bin (17) parameter;
dcl  a_ltrp			fixed bin (71) parameter;
dcl  a_parent			char (*) parameter;
dcl  a_qchange			fixed bin (17) parameter;
dcl  a_quota			fixed bin (18) parameter;
dcl  a_seg_or_dir			bit (1) parameter;
dcl  a_segptr			ptr parameter;
dcl  a_slvid			bit (36) parameter;
dcl  a_taccsw			fixed bin (1) parameter;
dcl  a_trp			fixed bin (35) parameter;
dcl  a_trpc			fixed bin (35) parameter;
dcl  a_tup			bit (36) aligned parameter;
dcl  a_uchange			fixed bin (17) parameter;
dcl  a_uidpath			(0:15) bit (36) aligned parameter;
dcl  a_used			fixed bin (17) parameter;

/* Variables */

dcl  CHECK_ONLY			fixed bin (1) init (1) static options (constant);
dcl  LOTS				fixed bin (71) static options (constant) init (11111111111111111111111111111111111b); /* 35 1-bits */
dcl  ROOT_UID			bit (36) static options (constant) init ((36)"1"b);
dcl  SEC_PER_TICK			float bin static options (constant) init (.65536e-1); /* Convert fs time to seconds */

dcl  called_find			bit (1) aligned init ("0"b);
dcl  check_access			bit (1);
dcl  code				fixed bin (35);
dcl  curtime			bit (36) aligned;
dcl  dep				ptr;
dcl  dir_privilege			bit (1);
dcl  dir_quota_sw			bit (1) init ("0"b);/* TRUE only if doing dir quota */
dcl  dt				fixed bin (35);
dcl  ename			char (32);
dcl  len				fixed bin;
dcl  locked			bit (1) aligned init ("0"b);
dcl  ltrp				fixed bin (71);
dcl  moved_down			fixed bin (35);
dcl  mylock_entry			bit (1) aligned;
dcl  new_entry			bit (1) aligned init ("0"b);
dcl  not_root			bit (1) aligned init ("1"b);
dcl  now_terminal			bit (1);
dcl  parent			char (168);
dcl  parent_astep			ptr;
dcl  parent_dp			ptr;
dcl  parent_pvid			bit (36) aligned;
dcl  1 parent_qcell			like quota_cell aligned;
dcl  parent_uid			bit (36) aligned;
dcl  parent_vtocx			fixed bin;
dcl  pathname			char (168);
dcl  pvid				bit (36) aligned;
dcl  1 qcell			like quota_cell aligned;
dcl  qchange			fixed bin (18);
dcl  qt				fixed bin (18) init (0); /* default assumption is segs (=0) */
dcl  quota			fixed bin (18);
dcl  read_lock			bit (36) aligned init ("0"b);
dcl  segptr			ptr;
dcl  setquota_entry			bit (1) init ("0"b);
dcl  slvid			bit (36);
dcl  sstp				pointer;
dcl  taccsw			bit (1) aligned;
dcl  trp				fixed bin (35);
dcl  tup				bit (36) aligned;
dcl  uchange			fixed bin (18);
dcl  uid				bit (36) aligned;
dcl  uidpath			(0:15) bit (36) aligned;
dcl  unlock_son			bit (1);
dcl  used				fixed bin (18);
dcl  vtocx			fixed bin;
dcl  was_terminal			bit (1);
dcl  write_lock			bit (36) aligned init ("1"b);

/* External */

dcl  error_table_$ai_restricted	fixed bin (35) ext;
dcl  error_table_$argerr		fixed bin (35) ext;
dcl  error_table_$bad_ring_brackets	fixed bin (35) ext;
dcl  error_table_$invalid_move_qmax	fixed bin (35) ext;
dcl  error_table_$master_dir		fixed bin (35) ext;
dcl  error_table_$mdc_not_mdir	fixed bin (35) ext;
dcl  error_table_$rqover		fixed bin (35) ext;
dcl  pds$access_authorization		bit (72) aligned ext static;
dcl  sst_seg$			external static;
dcl  sst$root_astep			pointer external static;

/* Entries */

dcl  activate			entry (ptr, fixed bin (35)) returns (ptr);
dcl  aim_check_$greater		entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
dcl  level$get			entry returns (fixed bin (17));
dcl  lock$dir_unlock		entry (ptr);
dcl  lock$unlock_ast		entry;
dcl  quotaw$cu			entry (ptr, fixed bin (18), bit (1), fixed bin (1), fixed bin (35));
dcl  quotaw$mq			entry (ptr, ptr, fixed bin (18), bit (1), fixed bin (35));
dcl  quotaw$sq			entry (ptr, fixed bin (18), bit (1), fixed bin (1));
dcl  sum$getbranch			entry (ptr, bit (36) aligned, ptr, fixed bin (35));
dcl  sum$dirmod			entry (ptr);
dcl  vtoc_attributes$get_quota	entry (bit (36) aligned, bit (36) aligned, fixed bin (17), ptr, fixed bin (18), fixed bin (35));
dcl  vtoc_attributes$set_quota	entry (bit (36) aligned, bit (36) aligned, fixed bin (17), ptr, fixed bin (18), fixed bin (35));

/* Misc */

dcl  (addr, bin, bit, clock, fixed, length, min, null, ptr, rtrim, substr, unspec) builtin;
%page;

/* ========================================================== */

/* qlong_reset, reset - entries which modify the trp of the directory only */
/* these are called by accounting to reduce the trp once a month. */
/* qreset is very probably obsolete */

dqlong_reset: entry (a_parent, a_ltrp, a_code);

	dir_quota_sw = "1"b;
	qt = 1;

qlong_reset: entry (a_parent, a_ltrp, a_code);

	ltrp = a_ltrp;				/* Copy arguments */
	go to reset1;

qreset: entry (a_parent, a_trpc, a_code);

	ltrp = a_trpc;				/* .. old style */
reset1:
	parent = a_parent;

	code = 0;					/* Clear return code */
	call dc_find$dir_write_priv (parent, FS_OBJ_TRP_MOD, dp, code); /* get pointer to directory */
	if code ^= 0 then go to errxit;
	called_find, locked = "1"b;

	call get_quota_cell;			/* read VTOC */
	qcell.trp = qcell.trp - ltrp;			/* Perform subtraction */
	call vtoc_attributes$set_quota (uid, pvid, vtocx, addr (qcell), qt, code);
	call sum$dirmod (dp);			/* Make sure dir mod noted */
	goto done;

/* * * * * * * * * * * * * * * * * * * * * * */

/* qset, qset_mylock, qreload, qrestor - support for entries which set the quota cell */
/* all four are highly-privileged entrypoints */

dqset: entry (a_parent, a_quota, a_code);

	dir_quota_sw = "1"b;
	qt = 1;

qset: entry (a_parent, a_quota, a_code);

	setquota_entry = "1"b;
	taccsw = "1"b;				/* Default */
	quota = a_quota;				/* Copy arg */
	parent = a_parent;				/* copy into char(168) aligned */

	code = 0;					/* Clear return code */
	call dc_find$dir_write_priv (parent, FS_OBJ_QUOTA_MOD, dp, code); /* get pointer to directory */
	if code ^= 0 then go to errxit;
	called_find, locked = "1"b;

	call get_quota_cell;			/* Read VTOCE */
	go to common;

dqrestor: entry (a_parent, a_quota, a_ltrp, a_tup, a_ignore, a_taccsw, a_code);

	dir_quota_sw = "1"b;
	qt = 1;

qrestor: entry (a_parent, a_quota, a_ltrp, a_tup, a_ignore, a_taccsw, a_code);
	ltrp = a_ltrp;				/* Privileged entry for SysAdmin */
	go to qreload_common;			/* .. and daemon */

qreload: entry (a_parent, a_quota, a_trp, a_tup, a_ignore, a_taccsw, a_code);

	ltrp = a_trp;
qreload_common:

	tup = a_tup;				/* Copy args */
	taccsw = bit (a_taccsw, 1);
	quota = a_quota;
	parent = a_parent;				/* copy into char(168) aligned */

	code = 0;					/* Clear return code */
	call dc_find$dir_write_priv (parent, FS_OBJ_QUOTA_RELOAD, dp, code); /* get pointer to directory */
	if code ^= 0 then go to errxit;
	called_find, locked = "1"b;

	call get_quota_cell;			/* read in quota info */
	qcell.trp = ltrp;
	qcell.tup = tup;

common:
	sstp = addr (sst_seg$);			/* Make segment active */
	astep = make_seg_active (dp);
	if aste.tqsw (qt) = taccsw then		/* if no change to terminal status */
	     aste.quota (qt) = quota;			/* just change quota in AST entry */
	else do;					/* for non-term quota, used must be subtracted from parent */
	     call quotaw$sq (astep, quota, dir_quota_sw, fixed (taccsw, 1));
						/* sets quota, adds or subs used from sup accts */
	     if setquota_entry then qcell.tup = bit (bin (clock (), 52), 52); /* on first qset set tup */
	end;
	qcell.received = qcell.received + quota - qcell.quota;
	qcell.quota = quota;			/* set quota in VTOC */
	qcell.terminal_quota_sw = aste.tqsw (qt);
	if not_root then call lock$unlock_ast;

	call vtoc_attributes$set_quota (uid, pvid, vtocx, addr (qcell), qt, code);
	if not_root then do;			/* Unlock parent dir */
	     parent_dp = ptr (dep, 0);
	     call lock$dir_unlock (parent_dp);		/* unlock sup dir */
	end;
	call sum$dirmod (dp);			/* Make sure dir mod noted */
	goto done;

/* * * * * * * * * * * * * * * * * * * * * * */

/* mdir_set: entry to set quota on a master directory */

mdir_set: entry (a_uidpath, a_quota, a_code);

	uidpath = a_uidpath;
	quota = a_quota;

	call dc_find$mdir_set_quota_uid (uidpath, parent, FS_OBJ_MDIR_QUOTA_MOD, ep, dp, code); /* finds directory */
	if code ^= 0 then go to errxit;
	locked, called_find = "1"b;
	parent_dp = ptr (ep, 0);

	if ^entry.master_dir then do;
	     code = error_table_$mdc_not_mdir;
	     go to unlock2;
	end;

	if level$get () > fixed (entry.ex_ring_brackets (1), 3) then do;
	     code = error_table_$bad_ring_brackets;
	     go to unlock2;
	end;

	uid = dir.uid;				/* setup to read vtoce */
	pvid = dir.pvid;
	vtocx = dir.vtocx;
	call vtoc_attributes$get_quota (uid, pvid, vtocx, addr (qcell), 0, code);
	if code ^= 0 then go to unlock2;

	dir_privilege = addr (pds$access_authorization) -> aim_template.privileges.dir;
	qchange = quota - qcell.quota;
	if qchange < 0 then				/* If reducing quota */
	     if aim_check_$greater (entry.access_class, parent_dp -> dir.access_class) then /* its an upgraded dir */
		if ^dir_privilege then do;		/* If not privileged, forget it. */
						/* Could publish info if he did this */
		     code = error_table_$ai_restricted;
		     go to unlock2;
		end;
		else if qcell.quota + qchange <= 0 then do; /* if would make it zero, forget it too. */
		     code = error_table_$invalid_move_qmax;
		     go to unlock2;
		end;
	call lock$dir_unlock (parent_dp);		/* done with parent */

	astep = activate (ep, code);
	qcell.used = aste.used (0);			/*  aste is more up to date */
	moved_down = qcell.received - qcell.quota;	/* quota on lower directorys */
	qcell.received = quota;
	qcell.quota = quota - moved_down;
	if qcell.received < qcell.used + moved_down then do; /* not enough */
	     code = error_table_$rqover;
	     call lock$unlock_ast;
	     go to unlock1;
	end;
	aste.quota (0) = quota;
	call lock$unlock_ast;

	call vtoc_attributes$set_quota (uid, pvid, vtocx, addr (qcell), 0, code);
	call sum$dirmod (dp);
	go to done;

/* * * * * * * * * * * * * * * * * * * * * * */

/* append_mdir_set: special entry called by append to set initial master directory quota */

append_mdir_set: entry (a_ep, a_quota, a_code);

	ep = a_ep;
	quota = a_quota;
	uid = entry.uid;				/* set up for vtoc_attributes call */
	pvid = entry.pvid;
	vtocx = entry.vtocx;
	unspec (qcell) = "0"b;
	qcell.received, qcell.quota = quota;
	qcell.terminal_quota_sw = "1"b;
	curtime = bit (bin (clock (), 52), 52);
	qcell.tup = curtime;			/* trp clock starts NOW */

	astep = activate (ep, code);			/* must also update aste */
	aste.quota (0) = quota;
	aste.tqsw (0) = "1"b;
	call lock$unlock_ast;
	call vtoc_attributes$set_quota (uid, pvid, vtocx, addr (qcell), 0, code);
	a_code = code;
	return;



/* * * * * * * * * * * * * * * * * * * * * * */

/* qread, qget - entries to read the quota information */

dqread: entry (a_parent, a_quota, a_ltrp, a_tup, a_slvid, a_taccsw, a_used, a_code);

	dir_quota_sw = "1"b;
	qt = 1;
	check_access = "1"b;
	new_entry = "1"b;
	goto get_common;

qread: entry (a_parent, a_quota, a_ltrp, a_tup, a_slvid, a_taccsw, a_used, a_code);
	new_entry = "1"b;
	check_access = "1"b;
	goto get_common;

qget: entry (a_parent, a_quota, a_trp, a_tup, a_slvid, a_taccsw, a_used, a_code);

	check_access = "1"b;
	goto get_common;

priv_qread: entry (a_parent, a_quota, a_ltrp, a_tup, a_slvid, a_taccsw, a_used, a_code);

	new_entry = "1"b;
	check_access = "0"b;
	goto get_common;

priv_dqread: entry (a_parent, a_quota, a_ltrp, a_tup, a_slvid, a_taccsw, a_used, a_code);

	new_entry = "1"b;
	dir_quota_sw = "1"b;
	qt = 1;
	check_access = "0"b;

get_common:
	quota, trp, ltrp, used = 0;			/* zero return variables */
	tup = "0"b;
	taccsw = "0"b;
	parent = a_parent;				/* copy into char(168) aligned */

	code = 0;					/* Clear return code */
	if check_access then call dc_find$dir_read (parent, dp, code); /* get pointer to directory */
	else call dc_find$dir_read_priv (parent, dp, code);
	if code ^= 0 then go to errxit;
	called_find, locked = "1"b;

	call get_quota_cell;			/* get quota info */

	slvid = dir.sons_lvid;			/* Save sons LVID for later */
	sstp = addr (sst_seg$);
	astep = make_seg_active (dp);			/* To check used, must have active acct */
	qcell.used = aste.used (qt);			/* update from ast entry to temp */
	if not_root then do;			/* ok, now unlock */
	     parent_dp = ptr (dep, 0);
	     call lock$unlock_ast;
	     call lock$dir_unlock (parent_dp);		/* unlock parent dir */
	end;
	if qcell.terminal_quota_sw then do;		/* this is a terminal account, do full update */
	     curtime = bit (bin (clock (), 52), 52);	/* get time as bit string - high order bits */
						/* calc and add to the time-page product which is in page-secs */
	     dt = fixed (curtime, 36) - fixed (qcell.tup, 36); /* time since last update */
	     qcell.trp = qcell.trp + fixed ((dt * qcell.used) * SEC_PER_TICK + .5e0, 71);
	     qcell.tup = curtime;			/* .. */
	end;
	quota = qcell.quota;			/* copy info from dir header */
	ltrp = qcell.trp;				/* .. into return args */
	trp = min (ltrp, LOTS);			/* return max value if  overflow 35 bits */
	tup = qcell.tup;
	used = qcell.used;
	taccsw = qcell.terminal_quota_sw;

unlock:	call dc_find$finished (dp, "1"b);		/* Unlock directory */
	a_quota = quota;				/* .. and give args back to caller */
	if new_entry then a_ltrp = ltrp;
	else a_trp = trp;
	a_tup = tup;
	a_slvid = slvid;
	a_taccsw = fixed (taccsw, 1);
	a_used = used;
	a_code = code;
	return;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* entry called by append to see if can move quota */

check: entry (a_ep, a_uchange, a_code);

	ep = a_ep;				/* dir is not locked */
	unlock_son = "0"b;
	go to join;

check_file: entry (a_parent, a_ename, a_uchange, a_code);	/* Called by fs_move */

	parent = a_parent;
	ename = a_ename;
	code = 0;
	unlock_son = "1"b;				/* will lock the dir */
	call dc_find$obj_status_read (parent, ename, DC_FIND_CHASE, ep, code);
	dp = ptr (ep, 0);				/* Get ptr to parent */
	if code ^= 0 then go to errxit;		/* see if find it */
	called_find = "1"b;
	go to join;

check_seg: entry (a_segptr, a_uchange, a_code);		/* (not used currently) */

	segptr = a_segptr;
	code = 0;
	unlock_son = "1"b;
	call dc_find$obj_status_read_ptr (segptr, ep, code);
	if code ^= 0 then go to errxit;
	dp = ptr (ep, 0);

join:
	uchange = a_uchange;			/* What's the change in quota */
	dp = ptr (ep, 0);				/* get pointer to base of directory */

	sstp = addr (sst_seg$);
	astep = make_seg_active (dp);			/* Force active so look at used */
	call quotaw$cu (astep, uchange, dir_quota_sw, CHECK_ONLY, code); /* checks act acct with ptl set */
	if not_root then do;
	     parent_dp = ptr (dep, 0);
	     call lock$unlock_ast;
	     call lock$dir_unlock (parent_dp);		/* unlock parent dir */
	end;

unlock3:	if unlock_son then
	     if called_find then call dc_find$finished (dp, "1"b);
	     else call lock$dir_unlock (dp);
	a_code = code;
	return;

/* * * * * * * * * * * * * * * * * * * * * * */

/* This entry moves quota between a dir and its parent */

dqmove: entry (a_parent, a_ename, a_qchange, a_code);

	dir_quota_sw = "1"b;
	qt = 1;

qmove: entry (a_parent, a_ename, a_qchange, a_code);

	code = 0;
	qchange = a_qchange;			/* Copy arg */
	parent = a_parent;				/* copy into char(168) aligned */
	ename = a_ename;				/* copy into char(32) aligned */
	mylock_entry = "0"b;

	len = length (rtrim (parent));		/* Get dirname into pathname */
	if ename ^= "" then do;
	     if len + length (rtrim (ename)) + 1 > length (pathname) then do; /* too long */
bad_path:		code = error_table_$argerr;
		goto errxit;
	     end;
	     if len = 1 then pathname = substr (parent, 1, 1) || ename; /* dir is then root */
	     else pathname = substr (parent, 1, len) || ">" || ename;
	end;
	else do;
	     if len > length (pathname) then goto bad_path;
	     if len = 1 then goto bad_path;		/* don't bother with a single directory (root) */
	     pathname = parent;
	end;

	dir_privilege = addr (pds$access_authorization) -> aim_template.privileges.dir;

/* this is going to be useful later... */

	call dc_find$dir_move_quota (pathname, ep, dp, code);
	if code ^= 0 then goto errxit;
	called_find, locked = "1"b;
	parent_dp = ptr (ep, 0);			/* Locate parent */

	if level$get () > fixed (entry.ex_ring_brackets (1), 3) then do;
	     code = error_table_$bad_ring_brackets;	/* ringbrackets must be consistent with validation level */
	     go to unlock2;
	end;

	uid = dir.uid; pvid = dir.pvid; vtocx = dir.vtocx;/* Copy vars for son */
	call vtoc_attributes$get_quota (uid, pvid, vtocx, /* .. and read VTOC */
	     addr (qcell), qt, code);
	if code ^= 0 then go to unlock2;
	parent_uid = parent_dp -> dir.uid; parent_pvid = parent_dp -> dir.pvid; parent_vtocx = parent_dp -> dir.vtocx;
	call vtoc_attributes$get_quota (parent_uid, parent_pvid, parent_vtocx,
	     addr (parent_qcell), qt, code);
	if code ^= 0 then go to unlock2;

	if qcell.terminal_quota_sw then		/* if inferior dir has terminal acct */
	     if qcell.received > qcell.quota then	/* and it has inferior quotas */
		if qcell.quota + qchange <= 0 then do;	/* and the.change would make it non-terminal */
		     code = error_table_$invalid_move_qmax; /* don't allow change to be made */
		     go to unlock2;
		end;

	if qchange < 0 then				/* If moving quota up */
	     if aim_check_$greater (entry.access_class, parent_dp -> dir.access_class) then /* its an upgraded dir */
		if ^dir_privilege then do;		/* If not privileged, forget it. */
						/* Could publish info if he did this */
		     code = error_table_$ai_restricted;
		     go to unlock2;
		end;
		else if qcell.quota + qchange <= 0 then do; /* if would make non-term, forget it too. */
		     code = error_table_$invalid_move_qmax;
		     go to unlock2;
		end;

	go to skip_del_entry;

/* This entry is called from inside append, when creating an upgraded directory.
   Parent and new dir are both locked at this point */

qmove_mylock: entry (a_ep, a_dp1, a_qchange, a_seg_or_dir, a_code);

	dir_quota_sw = a_seg_or_dir;			/* Copy switch */
	qt = fixed (dir_quota_sw, 1);
	mylock_entry = "1"b;
	ep = a_ep;
	parent_dp = ptr (ep, 0);
	dp = a_dp1;				/* are already locked */
	qchange = a_qchange;

	uid = dir.uid; pvid = dir.pvid; vtocx = dir.vtocx;/* Copy vars */
	call vtoc_attributes$get_quota (uid, pvid, vtocx,
	     addr (qcell), qt, code);
	if code ^= 0 then go to errxit;
	parent_uid = parent_dp -> dir.uid; parent_pvid = parent_dp -> dir.pvid; parent_vtocx = parent_dp -> dir.vtocx;
	call vtoc_attributes$get_quota (parent_uid, parent_pvid, parent_vtocx,
	     addr (parent_qcell), qt, code);
	if code ^= 0 then go to errxit;
	if qchange = 0 then				/* If quota change arg is zero, */
	     qchange = -qcell.quota;			/* ..take the whole thing */

skip_del_entry:
	if ^dir_quota_sw & dir.master_dir then do;
	     code = error_table_$master_dir;		/* Apples an oranges */
	     if mylock_entry then go to errxit;
	     go to unlock2;
	end;
	if qchange = 0 then do;			/* If useless call */
	     code = 0;
	     if mylock_entry then go to errxit;
	     go to unlock2;
	end;

	if ^parent_qcell.terminal_quota_sw then do;	/* None to move */
	     code = error_table_$invalid_move_qmax;
	     if mylock_entry then go to errxit;
	     go to unlock2;
	end;

/* get pointers to AST entries for both directories */

	sstp = addr (sst_seg$);			/* Get SST */
	astep = activate (ep, code);			/* Activate son */

	parent_astep = ptr (sstp, aste.par_astep);	/* this is active because son is active */

/* update trp for both directories, since we may cause a sudden change to used */

	qcell.used = aste.used (qt);			/* Copy from AST */
	parent_qcell.used = parent_astep -> aste.used (qt);
	curtime = bit (bin (clock (), 52), 52);		/* same as above */
						/* calc & add the time-page product which is in page-seconds */
	dt = fixed (curtime, 36) - fixed (parent_qcell.tup, 36); /* time since trp was last updated */
	parent_qcell.trp = parent_qcell.trp + fixed ((dt * parent_qcell.used) * SEC_PER_TICK + .5e0, 71);
	parent_qcell.tup = curtime;
	was_terminal = qcell.terminal_quota_sw;		/* indicator if directory currently has terminal quota */
	if was_terminal then do;			/* only update son if it is terminal */
	     dt = fixed (curtime, 36) - fixed (qcell.tup, 36); /* time since trp was last updated */
	     qcell.trp = qcell.trp + fixed ((dt * qcell.used) * SEC_PER_TICK + .5e0, 71);
	     qcell.tup = curtime;
	end;

	call quotaw$mq (parent_astep, astep, qchange, dir_quota_sw, code);
						/* change quotas and maybe used with ptl locked */
	if code ^= 0 then do;			/* one if the quotas didn't cover the used */
	     call lock$unlock_ast;
	     if mylock_entry then go to errxit;		/* don't unlock */
	     else go to unlock2;
	end;
	qcell.quota = aste.quota (qt);		/* change quotas in the VTOCEs */
	parent_qcell.quota = parent_astep -> aste.quota (qt);
	now_terminal, qcell.terminal_quota_sw = aste.tqsw (qt); /* terminal status of directory may have changed */

/* clean up trps in case terminal status of directory has changed */

	if was_terminal ^= now_terminal then do;	/* Did status of inferior change? */
	     if was_terminal then do;
		parent_qcell.trp = parent_qcell.trp + qcell.trp; /* carry total trp up to parent */
	     end;
	     else do;
		qcell.tup = curtime;
	     end;
	     qcell.trp = 0;				/* just so it doesn't get charged twice */
	end;

	qcell.received = qcell.received + qchange;	/* Adjust total quota at this node */

	call lock$unlock_ast;			/* Unlock AST */

	call vtoc_attributes$set_quota (uid, pvid, vtocx, /* Write back */
	     addr (qcell), qt, code);
	call vtoc_attributes$set_quota (parent_uid, parent_pvid, parent_vtocx,
	     addr (parent_qcell), qt, code);

	if ^mylock_entry then do;			/* usually must unlock */
	     call sum$dirmod (dp);			/* indicate directory and parent modified */
	     if called_find then call dc_find$finished (dp, "1"b);
	     else call lock$dir_unlock (dp);
	     call lock$dir_unlock (parent_dp);
	end;
	a_code = code;
	return;

/* * * * * * * * * * * * * * * * * * * * * * */

/* Error handlers */

unlock2:	if not_root then call lock$dir_unlock (parent_dp);

done:
unlock1:	if called_find then call dc_find$finished (dp, locked);
	else call lock$dir_unlock (dp);

errxit:	a_code = code;				/* set return error code */
	return;

/* * * * * * * * * * * * * * * * * * * * * * */

/* Internal procedure to get directory's quota cell */

get_quota_cell: proc;

	uid = dir.uid; pvid = dir.pvid; vtocx = dir.vtocx;/* Copy vars */
	call vtoc_attributes$get_quota (uid, pvid, vtocx, addr (qcell), qt, code);
	if code ^= 0 then go to unlock1;

     end get_quota_cell;

/* * * * * * * * * * * * * * * * * * * * * * */

/* Internal procedure to make segment be active */

make_seg_active: proc (dpt) returns (ptr);		/* Returns astep */

dcl  dpt				ptr parameter;	/* .. given entry ptr */

dcl  ASTep			ptr;

	if dpt -> dir.uid = ROOT_UID then do;		/* root's active already */
	     not_root = "0"b;
	     return (sst$root_astep);
	end;
	else do;					/* no root */
	     call sum$getbranch (dpt, read_lock, dep, code); /* get branch (lock parent) */
	     if code ^= 0 then return (null);
	     ASTep = activate (dep, code);		/* Activate thing */
	end;
	return (ASTep);

     end make_seg_active;
%page; %include aim_template;
%page; %include aste;
%page; %include dc_find_dcls;
%page; %include dir_entry;
%page; %include dir_header;
%page; %include fs_obj_access_codes;
%page; %include quota_cell;
     end quota;
