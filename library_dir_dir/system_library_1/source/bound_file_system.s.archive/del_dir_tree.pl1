/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */

del_dir_tree: proc (a_dirname, a_ename, a_code);

/*
   Del_dir_tree is used to delete all branches, whether directory or
   not with respect to some node. If the sub tree with respect to that
   node has directories in it then the branches they contain must be deleted befor
   the directory can be. Care is taken to protect against another user appending
   a new branch while deletion is being done by always recycling over the
   whole directory when we return from a lower node.

   The basic operation of the program is to perform its own star_ list as it 
   goes, calling delentry to delete each object.  It keeps rescanning the dir
   (actually just looking at the first object which it then deletes) until the
   dir is empty.

   USAGE:	call del_dir_tree(parent_path_name, entry_dir_name, error_code);


   1. parent_path_name char(*)		path name of the directory whose sub tree structure
   is to be deleted.
   2. entry_dir_name char(*)		entry name of the directory whose sub tree structure
   is to be deleted.
   3. error_code fixed bin(35)		file system error code (Output).


   NOTES:	1. User must have status (to perform the star_ list we simulate
      here) and modify (for later deltion) modes on directory structure.
   2. The directory entry_dir_name is not deleted.

   */

/* Modified 2/85 by Keith Loepere to look for new error codes. */
/* Modified 12/84 by Keith Loepere for relocking strategy. */
/* Modified 6/84 by Keith Loepere to use the new dc_find. */
/* Modified 1/80 by Mike Grady to fix bad error handling code in main loop */
/* Modified 4/77 by M. Weaver to call makeknown_ instead of makeknown */
/* Modified 11/76 by D.Vinograd to add entry retv for use by volume reloader */
/* Modified June 1, 1976 by R. Bratt to call find_$finished when done with ep */
/* Modified 760309 by L. Scheffler to use info-only entries in dire_control_error */
/* Modified July 74 by Kobziar to call new entry in access_mode */
/* Modified by E Stone to delete directories in the subtree without SM access 5/74 */

/* Parameters */

dcl  a_code			fixed bin (35) parameter;
dcl  a_dirname			char (*) parameter;
dcl  a_ename			char (*) parameter;
dcl  a_retv			bit (1) parameter;

/* External */

dcl  error_table_$argerr		fixed bin (35) ext;
dcl  error_table_$copy_sw_on		fixed bin (35) ext;
dcl  error_table_$fulldir		fixed bin (35) ext;
dcl  error_table_$incorrect_access	fixed bin (35) ext;
dcl  error_table_$moderr		fixed bin (35) ext;
dcl  error_table_$mylock		fixed bin (35) ext;
dcl  error_table_$root		fixed bin (35) ext;
dcl  error_table_$safety_sw_on	fixed bin (35) ext;
dcl  error_table_$vtoce_connection_fail ext fixed bin (35);
dcl  pds$process_group_id		char (32) aligned ext;

/* Entries */

dcl  asd_$add_dentries		entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
dcl  delentry$dfile			entry (char (*), char (*), fixed bin (35));
dcl  delentry$retv			entry (char (*), char (*), fixed bin (35));
dcl  lock$dir_unlock		external entry (pointer);
dcl  set$copysw			entry (char (*), char (*), fixed bin (1), fixed bin (35));
dcl  set$safety_sw_path		entry (char (*), char (*), bit (1) aligned, fixed bin (35));
dcl  sum$getbranch_root_my		entry (ptr, bit (36) aligned, ptr, fixed bin (35));

/* Misc */

dcl  (addr, length, ptr, rel, rtrim)	builtin;

dcl  bad_dir_			condition;
dcl  seg_fault_error		condition;

/* Variables */

dcl  code				fixed bin (35);
dcl  1 dir_acl			aligned,
       2 access_name		char (32),
       2 mode			bit (36),
       2 status_code		fixed bin (35);
dcl  dirl				bit (1) aligned;
dcl  dirname			char (168);
dcl  ename			char (32);
dcl  entries_in_dir			fixed bin;
dcl  entries_seen			fixed bin;
dcl  name				char (32);
dcl  nnp				ptr;
dcl  pname			char (168);
dcl  rep				bit (18) aligned;
dcl  retv				bit (1) init ("0"b);
%page;
	goto join;

retv: entry (a_dirname, a_ename, a_code);

	retv = "1"b;
	goto join;


recurse: entry (a_dirname, a_ename, a_retv, a_code);

	retv = a_retv;
join:
	dirl = "0"b;
	code = 0;					/* clear status code */
	dirname = a_dirname;			/* copy arguments */
	ename = a_ename;

	if dirname = ">" then pname = ">" || ename;
	else if ename = "" then pname = dirname;
	else if length (rtrim (dirname)) + 1 + length (rtrim (ename)) > length (pname) then do;
	     code = error_table_$argerr;
	     go to finale;
	end;
	else pname = rtrim (dirname) || ">" || ename;

	if retv then call dc_find$dir_read_priv (pname, dp, code);
	else call dc_find$dir_read (pname, dp, code);	/* get a pointer to dir, check for s (those requiring m check it itself) */
	if code ^= 0 then go to finale;
	dirl = "1"b;

	if ^retv then do;				/* safety switch of directory must be off */
	     call sum$getbranch_root_my (dp, "0"b, ep, code);
	     if code = 0 then do;
		if entry.safety_sw then code = error_table_$safety_sw_on;
		call lock$dir_unlock (ptr (ep, 0));
	     end;
	     else if code = error_table_$mylock then
		if entry.safety_sw then code = error_table_$safety_sw_on;
		else code = 0;
	     else if code = error_table_$root then code = 0;
	     if code ^= 0 then go to finale;
	end;

	on seg_fault_error begin;
		code = error_table_$vtoce_connection_fail;
		goto finale;
	     end;

rescan_dir:
	entries_in_dir = dp -> dir.seg_count + dp -> dir.dir_count + dp -> dir.lcount;
	entries_seen = 0;
	do rep = dp -> dir.entryfrp repeat entry.efrp while (rep);
	     ep = ptr (dp, rep);			/* pick up pointer to entry */
	     entries_seen = entries_seen + 1;
	     if entries_seen > entries_in_dir then signal bad_dir_;
	     if entry.uid = ""b then go to end_loop;
	     if entry.bs then
		if (entry.owner ^= dp -> dir.uid)
		     | (entry.type ^= SEG_TYPE & entry.type ^= DIR_TYPE) then signal bad_dir_;
		else ;
	     else if (link.owner ^= dp -> dir.uid)
		     | (link.type ^= LINK_TYPE) then signal bad_dir_;
	     nnp = ptr (ep, entry.name_frp);
	     if nnp -> names.type ^= NAME_TYPE
		| nnp -> names.owner ^= entry.uid
		| nnp -> names.entry_rp ^= rel (ep) then signal bad_dir_;
	     name = nnp -> names.name;		/* get primary name of entry */
	     if name = "" then signal bad_dir_;
	     call dc_find$finished (dp, dirl);		/* unlock directory (delentry requires it) */
	     dirl = "0"b;
delent:	     if retv then call delentry$retv (pname, name, code);
	     else call delentry$dfile (pname, name, code);/* try to delete this entry */

	     if code = 0 then do;
		if retv then call dc_find$dir_read_priv (pname, dp, code);
		else call dc_find$dir_read (pname, dp, code);	/* get a pointer to dir, check for s (those requiring m check it itself) */
		if code ^= 0 then go to finale;
		dirl = "1"b;
		go to rescan_dir;
	     end;

	     if code = error_table_$safety_sw_on & ^retv then do; /* turn safety switch off */
		call set$safety_sw_path (pname, name, "0"b, code);
		if code = 0 then go to delent;
		else go to finale;			/* we can't continue */
	     end;

	     else if code = error_table_$copy_sw_on & ^retv then do; /* turn copy switch off */
		call set$copysw (pname, name, 0, code);
		if code = 0 then go to delent;
		else go to finale;
	     end;

	     else if code = error_table_$fulldir then do; /* directory has entries */
again:		call recurse (pname, name, retv, code); /* delete all entries in this dir */
		if code = 0 then goto delent;
		else if code = error_table_$incorrect_access | code = error_table_$moderr then do;
						/* try to give user proper access to delete sub-tree */
		     dir_acl.access_name = pds$process_group_id;
		     dir_acl.mode = "111"b;
		     call asd_$add_dentries (pname, name, addr (dir_acl), 1, code);
		     if code = 0 then goto again;
		     else goto finale;
		end;
		else go to finale;
	     end;
	     else go to finale;

end_loop: end;

finale:
	if dirl then call dc_find$finished (dp, DC_FIND_UNLOCK_DIR);
	a_code = code;
	return;
%page; %include dc_find_dcls;
%page; %include dir_entry;
%page; %include dir_header;
%page; %include dir_link;
%page; %include dir_name;
%page; %include fs_types;
     end del_dir_tree;
