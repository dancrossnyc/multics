/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style4 */
fs_move: proc;

/* Modified by E. Stone 8/73  to convert to version 2 and to check the max length of the TO segment */
/* Modified January 1983 by Keith Loepere so as to truncate target AFTER
   all validations */
/* Modified February 1983 by E. N. Kittlitz for 256K segments */
/* Modified November 1984 by Keith Loepere to rename terminate to terminate_ */

ffile: entry (a_dirname_from, a_ename_from, a_sw, a_dirname_to, a_ename_to, a_code);

dcl  a_dirname_from char (*);
dcl  a_dirname_to char (*);
dcl  a_ename_from char (*);
dcl  a_ename_to char (*);
dcl  a_sw fixed bin (2);
dcl  a_code fixed bin (35);

dcl  created_seg bit (1) aligned;
dcl  dirname_from char (168);
dcl  dirname_to char (168);
dcl  ename_from char (32);
dcl  ename_to char (32);
dcl  curlen fixed bin;
dcl  ldirname_from fixed bin;
dcl  ldirname_to fixed bin;
dcl  target_len bit (12);
dcl  entry_point fixed bin;
dcl  options bit (2) unaligned;
dcl  append_sw bit (1) unaligned def (options) pos (1);
dcl  truncate_sw bit (1) unaligned def (options) pos (2);
dcl  max_length fixed bin (19);
dcl  words fixed bin (19);
dcl  tcode fixed bin (35);
dcl  code fixed bin (35);
dcl  ptr_from ptr;
dcl  ptr_to ptr;
dcl  dptr ptr;

dcl  copy (words) bit (36) aligned based;

dcl  file fixed bin static init (0) options (constant);
dcl  seg fixed bin static init (1) options (constant);

dcl  error_table_$noentry fixed bin (35) ext static;
dcl  error_table_$segknown fixed bin (35) ext static;
dcl  error_table_$clnzero fixed bin (35) ext static;
dcl  error_table_$no_s_permission fixed bin (35) ext static;
dcl  error_table_$no_move fixed bin (35) external;

dcl  append$branch entry (char (*), char (*), fixed bin (5), fixed bin (35));
dcl  fs_get$path_name entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
dcl  status_$get_max_length_ptr entry (ptr, fixed bin (19), fixed bin (35));
dcl  initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  status_$long entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
dcl  terminate_$noname entry (ptr, fixed bin (35));
dcl  truncate$trseg entry (ptr, fixed bin, fixed bin (35));
dcl  quota$check_file entry (char (*), char (*), fixed bin, fixed bin (35));
dcl  set$max_length_path entry (char (*), char (*), fixed bin (19), fixed bin (35));

dcl  (addr, bit, fixed, null) builtin;

dcl  1 lbranch aligned,				/* structure to return long branch status */
       (2 (type bit (2), nnames bit (16), nrp bit (18)),
       2 dtm bit (36),
       2 dtu bit (36),
       2 (mode bit (5), pad1 bit (13), records bit (18)),
       2 dtd bit (36),				/* date time file and branch dumped */
       2 dtem bit (36),				/* date time branch modified */
       2 acct bit (36),				/* account number to which storage is charged */
       2 (curlen bit (12), bitcnt bit (24)),		/* highest 1024-word block used, bit count */
       2 (did bit (4), mdid bit (4), copysw bit (1), pad3 bit (9), rbs (0:2) bit (6)),
       2 uid bit (36)) unaligned;

%page;
	entry_point = file;				/* indicate that entry was via pathname entry point */
	dirname_from = a_dirname_from;		/* copy arguments */
	ename_from = a_ename_from;
	dirname_to = a_dirname_to;
	ename_to = a_ename_to;
	options = bit (a_sw, 2);			/* get options user has requested */
	created_seg = "0"b;				/* we didn't make output segment */
	code, tcode = 0;				/* initialize status codes */

	call initiate (dirname_from, ename_from, "", 0, 0, ptr_from, code);
						/* get pointer to FROM segment */

	if code ^= 0 then if code ^= error_table_$segknown then go to fin0;

try2:	call initiate (dirname_to, ename_to, "", 0, 0, ptr_to, code);
						/* get pointer to TO segment */

	if code ^= 0 then if code ^= error_table_$segknown then do;
						/* if TO segment does not exist */
		if created_seg then do;
		     if code = 0 then code = error_table_$no_move;
		     go to fin1;
		end;
		if code = error_table_$noentry then do;
		     if append_sw then do;		/* if append option given, try to make new TO seg */
			created_seg = "1"b;		/* first try to create */
			call status_$get_max_length_ptr (ptr_from, max_length, code); /* get max length of FROM segment */
			if code ^= 0 then go to fin1;
			call append$branch (dirname_to, ename_to, 01011b, code);
			if code ^= 0 then go to fin1; /* boo hoo */
			call set$max_length_path (dirname_to, ename_to, max_length, code);
			if code = 0 then go to try2;
		     end;
		end;
		go to fin1;			/*  unable to initiate TO seg or unable to create it */
	     end;
	go to common;

fseg: entry (a_ptr_from, a_ptr_to, a_sw, a_code);

dcl  (a_ptr_from, a_ptr_to) ptr;

	entry_point = seg;				/* indicate that entry was via the pointer entry point */
	ptr_from = a_ptr_from;			/* copy arguments */
	ptr_to = a_ptr_to;
	options = bit (a_sw, 2);			/* get options user has requested */
	code, tcode = 0;				/* initialize status codes */

	call fs_get$path_name (ptr_from, dirname_from, ldirname_from, ename_from, code);
						/* get pathname of FROM segment */

	if code ^= 0 then go to fin0;

	call fs_get$path_name (ptr_to, dirname_to, ldirname_to, ename_to, code);
						/* get pathname of TO sement */

	if code ^= 0 then go to fin0;

common:
	dptr = addr (lbranch);			/* get pointer to storage for status_ info */

	call status_$long (dirname_to, ename_to, 1, dptr, null, code);
						/* get status info on TO segment */

	if code ^= 0 then
	     if code = error_table_$no_s_permission then code = 0; /* non fatal error */
	     else go to fin2;			/* serious error */
	target_len = lbranch.curlen;			/* save for later chec */

	if lbranch.type ^= "01"b then do;		/* make sure that entry is a segment */
badmove:	     code = error_table_$no_move;
	     go to fin2;
	end;

	if (lbranch.mode & "01010"b) ^= "01010"b then go to badmove; /* need RW on TO segment */

	call status_$long (dirname_from, ename_from, 1, dptr, null, code);
						/* get status info on FROM segment */

	if code ^= 0 then
	     if code = error_table_$no_s_permission then code = 0; /* non fatal error */
	     else go to fin2;			/* serious error */

	if lbranch.type ^= "01"b then go to badmove;	/* make sure that entry is a segment */

	if (lbranch.mode & "01000"b) = "0"b then go to badmove; /* need R on FROM segment */

	curlen = fixed (lbranch.curlen, 12);		/* save current length in pages of FROM segment */
	words = curlen * 1024;			/* get number of words of FROM segment */

	call status_$get_max_length_ptr (ptr_to, max_length, code); /* get max length of TO segment */
	if code ^= 0 then go to badmove;
	if words > max_length then go to badmove;	/* make sure that TO segment has big enough max length */

	call quota$check_file (dirname_to, ename_to, curlen, code);
						/* make sure that there is enough quota to perform the copy */

	if code ^= 0 then go to badmove;		/* it wont fit */

	if target_len then				/* if TO seg has non-zero length */
	     if truncate_sw then do;			/* and if truncate option given, truncate TO seg */
		call truncate$trseg (ptr_to, 0, code);
		if code ^= 0 then go to fin2;
	     end;
	     else do;				/* and if truncate option not given, return status code */
		code = error_table_$clnzero;
		go to fin2;
	     end;

	ptr_to -> copy = ptr_from -> copy;		/* copy FROM segment to TO segment */

	call truncate$trseg (ptr_from, 0, code);	/* truncate FROM segment */

fin2:	if entry_point = seg then go to fin0;		/* if entered via pointer entry, skip terminating segs */
	call terminate_$noname (ptr_to, tcode);		/* terminate TO seg */
	if tcode ^= 0 then go to fin0;
fin1:	if entry_point = seg then go to fin0;
	call terminate_$noname (ptr_from, tcode);	/* terminate FROM seg */

fin0:	if tcode ^= 0 then a_code = tcode;
	else a_code = code;

	return;

     end;
