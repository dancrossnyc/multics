/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(88-06-10,Lippard), approve(88-07-04,MCR7929),
     audit(88-07-08,Parisek), install(88-07-15,MR12.2-1057):
     Modified to return error code of 0 and status_code of
     error_table_$user_not_found in case where specific ACLs are requested to
     be listed and entry has an empty ACL.
                                                   END HISTORY COMMENTS */


/* format: style2 */

asd_:
     procedure;

/* Modified 10/84 Keith Loepere to audit operation as an access change. */
/* Modified 84-07-03 BIM for ring number range checks.                    */
/* Modified 6/84 Keith Loepere to use the new dc_find. */
/* Modified 8/83 E. N. Kittlitz. setfaults$if_active pvid, vtocx args	    */
/* Modified 3/83 E. N. Kittlitz. setfaults on fatal_error if acl modified */
/* Modified 5/82 BIM to use Legal PL/I in the case where list_* is called */
/*	           on a null acl with a area pointer.	              */
/*		 a one-dim array is allocated, but a count of 0 is    */
/*		 returned, for compatability. (instead of returning   */
/*		 an error code)                                       */
/* Modified 3/82 BIM for no system free seg, refer extent entrypoints */
/* Modified by B. Margulies 05/10/79 to remove pds$xmode level restriction
 		and allow setting exacls within validation level */
/* Modified 07/77 by THVV for bad_dir_ check */
/* Modified by R. Bratt 06/01/76 to call find_$finished */
/* Modified by Kobziar 10/15/75 to copy et$user_not_found errors in delete structure */
/* NSS, 4/25/75, by Greenberg */
/* Modified by E. Stone Oct 1974 to place uid and dtem in double word */
/* Modified to copy arguments before using - 9/74 by A. Mason */
/* Modified by Kobziar on 11-12-73 to return dirseg and nondirseg error codes */

/* This is the gate level acl proc and contains 18 entries for listing, deleting, replacing, and
*   adding acl entries to segments, directories, and initial acls.
*  Entrypoints whose names begin with r_ are identical in function, but take
*  refer extend structures.
*
*  There are r_ entrypoints for acl listing, since for allocation of storage
*  refer extents are cleaner. The other entrypoints stay as they are,
*  because arrays are easier to declare in automatic structures.
*
*  It is always possible to pass addr (XXX_acl.entries), XXX_acl.count
*  into the other entrypoint.
*
*   _e_n_t_r_y		_a_r_g_u_m_e_n_t_s
*
*   list_dall	(a_dir_name, a_entryname, a_area_ptr, a_return_struc_ptr, a_acl_ptr, a_acl_count, a_code)
*   r_list_dall	(a_dir_name, a_entryname, a_area_ptr, a_return_struc_ptr, a_code);
*   r_list_sall	(a_dir_name, a_entryname, a_area_ptr, a_return_struc_ptr, a_code);
*   list_sall	as above.	Dall lists all of a directory acl and used the dir_acl structure(below)
*   .		while sall lists all of a segment's acl and uses the acl structure.
*
*   list_idall	(a_dir_name, a_entryname, a_area_ptr, a_return_struc_ptr, a_acl_ptr, a_acl_count, a_ring, a_code)
*   list_isall	List of initial acls for segments and directories, for the specified ring.
*   r_list_idall	(a_dir_name, a_entryname, a_area_ptr, a_return_struc_ptr, a_ring, a_code)
*   r_list_isall	(a_dir_name, a_entryname, a_area_ptr, a_return_struc_ptr, a_ring, a_code);
*
*   del_dentries	(a_dir_name, a_entryname, a_acl_ptr, a_acl_count, a_code)
*   del_sentries	as above. Dentries and sentries use the del_acl structure and delete the specified acl entries.
*   del_identries	(a_dir_name, a_entryname, a_acl_ptr, a_acl_count, a_ring, a_code)
*   del_isentries	Delete initial acls for segments and directories for the specified ring.
*   replace_dall	(a_dir_name, a_entryname, a_acl_ptr, a_acl_count, a_daemon_sw, a_code)
*   replace_sall	as above. Dall replaces a dir acl with the one given and uses the dir_acl structure
*   .		while sall replaces a segment's acl and uses the acl structure.
*   replace_idall	(a_dir_name, a_entryname, a_acl_ptr, a_acl_count, a_daemon_sw, a_ring, a_code)
*   replace_isall	Replace initial acl for segments and directories fir the specified ring.
*   add_dentries	(a_dir_name, a_entryname, a_acl_ptr, a_acl_count, a_code)
*   add_sentries	as above. Dentries adds (or changes the mode if the acl entry already exists) the
*   .		given entries to a directory acl and uses the dir_acl structure, while sentries
*   .		adds or changes the mode and uses the acl structure.
*   add_identries	(a_dir_name, a_entryname, a_acl_ptr, a_acl_count, a_ring, a_code)
*   add_isentries	Add to initial acls of segments or directories for the specified ring.
*
*
*
*   _a_r_g_u_m_e_n_t		_v_a_l_u_e
*
*   a_dir_name		char(*), the name of the directory (Input).
*   a_entryname		char(*), the name of the brnach in the above directory whoes acl is to be read or
*   .			written (Input).
*   a_area_ptr		ptr, used only in listing acls and pts to an area wher the entire acl should be
*   .			listed, otherwize it is null and only the modes in the given acl list will be listed.
*   .			(Input).
*   a_return_struc_ptr		ptr, is set to point to allocation in area (if a_area_ptr given) of the
*   .			acl list. (Output)
*   a_acl_ptr		ptr, points to an acl, dir_acl, or del_acl structure. (Input for all except
*   .			when listing whole acl rather than specified acl's modes, when it must be null).
*   a_acl_count		fixed bin(17), then number of acl entries in the given structure, (Input except
*   .			for list when listing whole acl, then output).
*   a_daemon_sw		bit(1) aligned, used to specify if want a *.SysDaemon.* rw or sma acl entry appended
*   .			to the acl replacement list. "0"b = yes, "1"b = no, (Input).
*   a_ring			fixed bin(3), the initial acl's ring number.(Must be >= validation level).
*   a_code			fixed bin(35), is a standard file system error code. If non zero then no
*   .			processing has been performed except in the case of deleting, where a user_not_found
*   .			code in the del_acl structure indicates that this entry wasn't found.
*
**/

	dcl     a_acl_count		 fixed bin (17) parameter;
	dcl     a_acl_ptr		 ptr parameter;
	dcl     a_area_ptr		 ptr parameter;
	dcl     a_code		 fixed bin (35) parameter;
	dcl     a_daemon_sw		 bit (1) parameter; /* indicates whether to remove a *.SysDaemon.* acl */
	dcl     a_dir_name		 char (*) parameter;
	dcl     a_entryname		 char (*) parameter;
	dcl     a_return_struc_ptr	 ptr parameter;
	dcl     a_ring		 fixed bin (3) parameter;

	dcl     1 acl1		 based (acl_entry_ptr) aligned,
						/* one entry  of an input acl list */
		2 ac_name,
		  3 person	 char (32),
		  3 project	 char (32),
		  3 tag		 char (1),
		2 mode		 bit (36),
		2 ex_mode		 bit (36);
	dcl     arg_area		 area based (area_ptr);

	dcl     1 a_n		 aligned like acl1;
	dcl     acl_entry_ptr	 ptr;
	dcl     acl_start_ptr	 ptr;
	dcl     add_sw		 bit (1);
	dcl     ael		 fixed bin;
	dcl     area_ptr		 ptr;
	dcl     called_find		 bit (1) aligned;
	dcl     caller_level	 fixed bin (3) unsigned;
	dcl     code		 fixed bin (35);
	dcl     d_s		 bit (1) aligned;
	dcl     daemon_sw		 bit (1) aligned;
	dcl     dirname		 char (168);
	dcl     entryname		 char (32);
	dcl     esw		 fixed bin (17);	/* indicates which entry point called */
	dcl     fail_sw		 bit (1) aligned;
	dcl     fatal_error_sets_faults
				 bit (1) aligned;
	dcl     i			 fixed bin;
	dcl     initial_acl		 bit (1) aligned;
	dcl     locked		 bit (1) aligned;
	dcl     locked_for_write	 bit (1) aligned;
	dcl     n_acls		 fixed bin;
	dcl     offset		 fixed bin;
	dcl     owning_structure	 bit (36) aligned;
	dcl     refer_allocation	 bit (1) aligned;	/* new style listing */
	dcl     return_acl_ptr	 pointer;
	dcl     ring		 fixed bin (17);
	dcl     structure_supplied	 bit (1) aligned;	/* no allocation needed */
	dcl     t_char1		 char (32) aligned;
	dcl     t_char2		 char (32) aligned;
	dcl     tag		 char (1) aligned;
	dcl     temp_access_name	 char (32) aligned;
	dcl     temp_extended_mode	 bit (36) aligned;
	dcl     temp_mode		 bit (36);
	dcl     work_p		 ptr;

	dcl     acc_name_$elements	 ext entry (ptr, ptr, fixed bin (35));
	dcl     acl_$add_entry	 entry (fixed bin, bit (36) aligned, ptr, ptr, bit (1), fixed bin (35));
	dcl     acl_$del_acl	 entry (fixed bin, bit (36) aligned, ptr);
	dcl     acl_$del_entry	 entry (fixed bin, bit (36) aligned, ptr, ptr, fixed bin (35));
	dcl     acl_$list_entry	 entry (fixed bin, bit (36) aligned, ptr, ptr, fixed bin, fixed bin (35));
	dcl     change_dtem		 entry (ptr);
	dcl     check_gate_acl_	 entry (ptr, bit (1) aligned, fixed bin (17), char (32) aligned, fixed bin (35));
	dcl     level$get		 entry returns (fixed bin (3));
	dcl     lock$dir_lock_read	 entry (ptr, fixed bin (35));
	dcl     lock$dir_unlock	 entry (ptr);
	dcl     setfaults$if_active	 entry (bit (36) aligned, bit (36) aligned, fixed bin, bit (1) aligned);
	dcl     sum$dirmod		 entry (ptr);

	dcl     error_table_$argerr	 ext fixed bin (35);
	dcl     error_table_$bad_acl_mode
				 ext fixed bin (35);
	dcl     error_table_$bad_ring_brackets
				 ext fixed bin (35);
	dcl     error_table_$dirseg	 ext fixed bin (35);
	dcl     error_table_$empty_acl ext fixed bin (35);
	dcl     error_table_$invalid_ascii
				 ext fixed bin (35);
	dcl     error_table_$invalid_mode
				 ext fixed bin (35);
	dcl     error_table_$noalloc	 ext fixed bin (35);
	dcl     error_table_$nondirseg ext fixed bin (35);
	dcl     error_table_$null_info_ptr
				 ext fixed bin (35);
	dcl     error_table_$user_not_found
				 ext fixed bin (35);
	dcl     pds$processid	 bit (36) aligned ext;

	dcl     ADD_DIR		 fixed bin static options (constant) init (4);
	dcl     ADD_SEG		 fixed bin static options (constant) init (8);
	dcl     DEL_DIR		 fixed bin static options (constant) init (2);
	dcl     DEL_SEG		 fixed bin static options (constant) init (6);
	dcl     LIST_DIR		 fixed bin static options (constant) init (1);
	dcl     LIST_SEG		 fixed bin static options (constant) init (5);
	dcl     REP_SEG		 fixed bin static options (constant) init (7);
	dcl     REP_DIR		 fixed bin static options (constant) init (3);

	dcl     (addr, bin, fixed, null, ptr, rtrim, substr)
				 builtin;

	dcl     (area, any_other, bad_dir_, cleanup, seg_fault_error)
				 condition;
%page;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

list_idall:
     entry (a_dir_name, a_entryname, a_area_ptr, a_return_struc_ptr, a_acl_ptr, a_acl_count, a_ring, a_code);
	initial_acl = "1"b;
	go to LIST_DALL_COMMON;
list_dall:
     entry (a_dir_name, a_entryname, a_area_ptr, a_return_struc_ptr, a_acl_ptr, a_acl_count, a_code);
	initial_acl = "0"b;

LIST_DALL_COMMON:
	refer_allocation = "0"b;

	go to R_LIST_DALL_COMMON;

r_list_idall:
     entry (a_dir_name, a_entryname, a_area_ptr, a_return_struc_ptr, a_ring, a_code);
	initial_acl = "1"b;
	go to R_LIST_DALL_COMMON_0;

r_list_dall:
     entry (a_dir_name, a_entryname, a_area_ptr, a_return_struc_ptr, a_code);
	initial_acl = "0"b;
R_LIST_DALL_COMMON_0:
	refer_allocation = "1"b;

R_LIST_DALL_COMMON:
	if initial_acl
	then ring = a_ring;

/* list the alc of a directory */
	esw = LIST_DIR;
	go to LIST_COMMON;

list_isall:
     entry (a_dir_name, a_entryname, a_area_ptr, a_return_struc_ptr, a_acl_ptr, a_acl_count, a_ring, a_code);

	initial_acl = "1"b;
	go to LIST_SALL_COMMON;

list_sall:
     entry (a_dir_name, a_entryname, a_area_ptr, a_return_struc_ptr, a_acl_ptr, a_acl_count, a_code);

	initial_acl = "0"b;

LIST_SALL_COMMON:
	refer_allocation = "0"b;

	go to R_LIST_SALL_COMMON;

r_list_isall:
     entry (a_dir_name, a_entryname, a_area_ptr, a_return_struc_ptr, a_ring, a_code);
	initial_acl = "1"b;
	go to R_LIST_DALL_COMMON_0;

r_list_sall:
     entry (a_dir_name, a_entryname, a_area_ptr, a_return_struc_ptr, a_code);
	initial_acl = "0"b;
R_LIST_SALL_COMMON_0:
	refer_allocation = "1"b;

R_LIST_SALL_COMMON:
	if initial_acl
	then ring = a_ring;

	esw = LIST_SEG;

/* The listing entrypoints happen here, via two internal procedures */
/* One is used when the structure is supplied, and selection is to take */
/* place. That is process_specific_list. The other is for allocation */
/* and return. That is process_list_all. */



LIST_COMMON:
	caller_level = level$get ();

	locked, locked_for_write, called_find, fatal_error_sets_faults = "0"b;

	area_ptr = a_area_ptr;
	if initial_acl
	then if ring < 0 | ring > 7
	     then call fatal_error (error_table_$argerr);
	d_s = esw < LIST_SEG;
	structure_supplied = (area_ptr = null);

	if structure_supplied
	then do;
		if refer_allocation
		then acl_ptr = a_return_struc_ptr;
		else acl_ptr = a_acl_ptr;

		if acl_ptr = null
		then call fatal_error (error_table_$null_info_ptr);

		if /* tree */ refer_allocation
		then if d_s
		     then do;
			     acl_count = directory_acl.count;
			     acl_ptr = addr (directory_acl.entries);
			end;
		     else do;
			     acl_count = segment_acl.count;
			     acl_ptr = addr (segment_acl.entries);
			end;
		else acl_count = a_acl_count;
	     end;
	else do;
		return_acl_ptr = null;
		acl_ptr = null;
		acl_count = 0;
	     end;


	on cleanup call cleanup_;
%page;
Retry_process_list_all:				/** Come here is the dir changed asychronously */
	call check_pathname_find_read_lock_and_check_access;

	acl_entry_ptr = addr (a_n);			/* used as a temp for constructing input acl ent */
	if initial_acl
	then do;
		if d_s
		then acl_start_ptr = addr (dir.iacl (ring).dir_frp);
		else acl_start_ptr = addr (dir.iacl (ring).seg_frp);
		if d_s
		then n_acls = dir.iacl_count (ring).dir;
		else n_acls = dir.iacl_count (ring).seg;
		owning_structure = dir.uid;		/* dir is owner of iacl entries */
	     end;
	else do;
		acl_start_ptr = addr (entry.acl_frp);
		n_acls = entry.acle_count;
		owning_structure = entry.uid;		/* When checking and making acles, entry owns em */
	     end;


/***** If the acl is null, the only work to do (allocating a null structure) */
/***** is done after the dir is unlocked. */

	if structure_supplied
	then call process_specific_list;
	else if n_acls > 0
	then call process_list_all;


/* Both of these return with the dir locked, and acl_ptr and acl_count */
/* ready to return */

	call dc_find$finished (dp, "1"b);

	if refer_allocation				/* new style */
	then if structure_supplied
	     then ;
	     else do;
		     if acl_count = 0
		     then do;			/* allocate 1-dim (legal pl1) */
			     acl_count = 1;
			     if d_s
			     then do;
				     allocate directory_acl in (arg_area);
				     directory_acl.count = 0;
						/* but report the fact that it is null */
				end;
			     else do;
				     allocate segment_acl in (arg_area);
				     segment_acl.count = 0;
				end;
			     return_acl_ptr = acl_ptr;/* share code with case just below */
			end;
		     a_return_struc_ptr = return_acl_ptr;
		end;

	else /* old style */
	     if structure_supplied
	then ;
	else do;
		if acl_count = 0			/* null acl */
		then do;
			acl_count = 1;		/* allocate 1-dim (legal pl1) */
			if d_s
			then allocate directory_acl_array in (arg_area);
			else allocate segment_acl_array in (arg_area);
			acl_count = 0;		/* but report 0 count */
		     end;
		a_return_struc_ptr = acl_ptr;
		a_acl_count = acl_count;
	     end;

	a_code = code;				/* reflect code from some bad entry */
	return;					/* So much for listing */

%page;
del_identries:
     entry (a_dir_name, a_entryname, a_acl_ptr, a_acl_count, a_ring, a_code);
	initial_acl = "1"b;				/* delete initial acl entries for dir at ring */
	go to DEL_DENTRIES_COMMON;
del_dentries:
     entry (a_dir_name, a_entryname, a_acl_ptr, a_acl_count, a_code);
						/* del part of dir acl */
	initial_acl = "0"b;
DEL_DENTRIES_COMMON:
	esw = DEL_DIR;
	goto start_proc;

del_isentries:
     entry (a_dir_name, a_entryname, a_acl_ptr, a_acl_count, a_ring, a_code);
	initial_acl = "1"b;				/* delete for segments */
	go to DEL_SENTRIES_COMMON;

del_sentries:
     entry (a_dir_name, a_entryname, a_acl_ptr, a_acl_count, a_code);
						/* del part of seg acl */
	initial_acl = "0"b;
DEL_SENTRIES_COMMON:
	esw = DEL_SEG;
	goto start_proc;

replace_idall:
     entry (a_dir_name, a_entryname, a_acl_ptr, a_acl_count, a_daemon_sw, a_ring, a_code);
	initial_acl = "1"b;				/* replace inatial acl for dirs at ring */
	go to REPLACE_DALL_COMMON;

replace_dall:
     entry (a_dir_name, a_entryname, a_acl_ptr, a_acl_count, a_daemon_sw, a_code);
						/* replace a dir acl with one provided */
	initial_acl = "0"b;
REPLACE_DALL_COMMON:
	esw = REP_DIR;
	daemon_sw = a_daemon_sw;
	goto start_proc;

replace_isall:
     entry (a_dir_name, a_entryname, a_acl_ptr, a_acl_count, a_daemon_sw, a_ring, a_code);
	initial_acl = "1"b;				/* replace for segments */
	go to REPLACE_SALL_COMMON;

replace_sall:
     entry (a_dir_name, a_entryname, a_acl_ptr, a_acl_count, a_daemon_sw, a_code);
						/* replace s seg acl with one given */
	initial_acl = "0"b;
REPLACE_SALL_COMMON:
	esw = REP_SEG;
	daemon_sw = a_daemon_sw;
	goto start_proc;

add_identries:
     entry (a_dir_name, a_entryname, a_acl_ptr, a_acl_count, a_ring, a_code);
	initial_acl = "1"b;				/* add initial acls for dir at ring */
	go to ADD_DENTRIES_COMMON;

add_dentries:
     entry (a_dir_name, a_entryname, a_acl_ptr, a_acl_count, a_code);
						/* add or replace  toa dir acl */
	initial_acl = "0"b;
ADD_DENTRIES_COMMON:
	esw = ADD_DIR;
	goto start_proc;

add_isentries:
     entry (a_dir_name, a_entryname, a_acl_ptr, a_acl_count, a_ring, a_code);
	initial_acl = "1"b;				/* add for segmemts */
	go to ADD_SENTRIES_COMMON;

add_sentries:
     entry (a_dir_name, a_entryname, a_acl_ptr, a_acl_count, a_code);
						/* add or relpace entries to seg acl */
	initial_acl = "0"b;
ADD_SENTRIES_COMMON:
	esw = ADD_SEG;

%page;
start_proc:
	caller_level = level$get ();
	locked, locked_for_write, called_find, fatal_error_sets_faults = "0"b;

	acl_ptr = a_acl_ptr;
	acl_count = a_acl_count;

	if initial_acl
	then do;
		ring = a_ring;
		if ring < 0 | ring > 7
		then call fatal_error (error_table_$argerr);
	     end;

	d_s = esw < LIST_SEG;

	if esw ^= REP_SEG & esw ^= REP_DIR
	then do;					/* if replacing, can replace with empty */
		if acl_ptr = null
		then call fatal_error (error_table_$null_info_ptr);

		if acl_count = 0
		then call fatal_error (error_table_$argerr);
	     end;

	if acl_ptr = null
	then acl_count = 0;
	else do;
		on any_other call fatal_error (error_table_$argerr);
		call check_in_structure;
		revert any_other;
	     end;

	call check_pathname_find_read_lock_and_check_access;
%page;
	acl_entry_ptr = addr (a_n);			/* used as a temp for constructing input acl ent */
	if initial_acl
	then do;
		if d_s
		then acl_start_ptr = addr (dir.iacl (ring).dir_frp);
		else acl_start_ptr = addr (dir.iacl (ring).seg_frp);
		if d_s
		then n_acls = dir.iacl_count (ring).dir;
		else n_acls = dir.iacl_count (ring).seg;
		owning_structure = dir.uid;		/* dir is owner of iacl entries */
	     end;
	else do;
		acl_start_ptr = addr (entry.acl_frp);
		n_acls = entry.acle_count;
		owning_structure = entry.uid;		/* When checking and making acles, entry owns em */
	     end;
%page;
	dir.modify = pds$processid;
	if ^initial_acl
	then do;
		call change_dtem (ep);
		fatal_error_sets_faults = "1"b;
	     end;

/*	*  *  *  delete  *  *  *	*/

	if (esw = DEL_DIR) | (esw = DEL_SEG)
	then do;

		on any_other call fatal_error (error_table_$argerr);
		delete_acl_array (*).status_code = 0;
		revert any_other;

		do i = 1 to acl_count;

		     on any_other call fatal_error (error_table_$argerr);
		     temp_access_name = delete_acl_array (i).access_name;
		     revert any_other;

		     call acc_name_$elements (addr (temp_access_name), acl_entry_ptr, code);
		     if code ^= 0
		     then do;
			     on any_other call fatal_error (error_table_$argerr);
			     delete_acl_array (i).status_code = code;
			     revert any_other;
			     call fatal_error (error_table_$argerr);
			end;

		     call acl_$del_entry (n_acls, owning_structure, acl_start_ptr, acl_entry_ptr, code);
		     if code ^= 0
		     then do;
			     if code = error_table_$user_not_found
			     then do;
				     on any_other call fatal_error (error_table_$argerr);
				     delete_acl_array (i).status_code = code;
				     revert any_other;
				     code = 0;
				     goto del_loop;
				end;
			     else call fatal_error (code);
			end;
		     if ^initial_acl
		     then entry.acle_count = entry.acle_count - 1;
		     else if d_s
		     then dir.iacl_count.dir (ring) = dir.iacl_count.dir (ring) - 1;
		     else dir.iacl_count.seg (ring) = dir.iacl_count.seg (ring) - 1;
		     dir.acle_total = dir.acle_total - 1;
del_loop:
		end;

		go to CLEAN_RETURN;
	     end;					/* esw  = DEL_DIR, DEL_SEG */
%page;

/*	*  *  *  replacement and addition  *  *  *	*/

/* esw = REP_DIR, REP_SEG, ADD_DIR, ADD_SEG */
/* see if have to check gate */

	if ^initial_acl				/* ep is invalid if initial_acl = "1"b */
	then if ((esw = REP_SEG) | (esw = ADD_SEG)) & caller_level > 1
		& fixed (entry.ring_brackets (2), 3) < fixed (entry.ring_brackets (3), 3)
	     then do;
		     call check_gate_acl_ (acl_ptr, "0"b, acl_count, (""), code);
		     if code ^= 0
		     then call fatal_error (code);
		     if esw = ADD_SEG
		     then if entry.acl_frp ^= ""b
			then do;			/* trying to sneek own project in? */
				call check_gate_acl_ (acl_start_ptr, "1"b, (entry.acle_count), (""), code);
				if code ^= 0
				then call fatal_error (code);
			     end;
		end;

	if (esw = REP_DIR) | (esw = REP_SEG)
	then do;
		if initial_acl
		then if d_s
		     then ael = dir.iacl_count.dir (ring);
		     else ael = dir.iacl_count.seg (ring);
		else ael = entry.acle_count;		/* start by deleting everything */
		call acl_$del_acl (n_acls, owning_structure, acl_start_ptr);
		n_acls = 0;
		if initial_acl
		then if d_s
		     then dir.iacl_count.dir (ring) = 0;
		     else dir.iacl_count.seg (ring) = 0;
		else entry.acle_count = 0;
		dir.acle_total = dir.acle_total - ael;	/* should *.SysDaemon be put back ? */
		if ^daemon_sw
		then do;
			t_char1 = "*.SysDaemon.*  ";
			call acc_name_$elements (addr (t_char1), acl_entry_ptr, (0));
			acl_entry_ptr -> acl1.mode = RW_ACCESS;

			if d_s
			then acl_entry_ptr -> acl1.ex_mode = SMA_ACCESS;
			else acl_entry_ptr -> acl1.ex_mode = ""b;
			call acl_$add_entry (n_acls, owning_structure, acl_start_ptr, acl_entry_ptr, add_sw, code);
			if code ^= 0		/* should never happen */
			then call fatal_error (code);

			n_acls = 1;

			if ^initial_acl
			then entry.acle_count = entry.acle_count + 1;
			else if d_s
			then dir.iacl_count.dir (ring) = dir.iacl_count.dir (ring) + 1;
			else dir.iacl_count.seg (ring) = dir.iacl_count.seg (ring) + 1;
			dir.acle_total = dir.acle_total + 1;
		     end;
	     end;

	do i = 1 to acl_count;

	     on any_other call fatal_error (error_table_$argerr);
	     if d_s
	     then do;
		     temp_access_name = directory_acl_array (i).access_name;
		     temp_mode = directory_acl_array (i).mode;
		     if substr (temp_mode, 4) ^= ""b
		     then do;
			     directory_acl_array (i).status_code = error_table_$bad_acl_mode;
			     call fatal_error (error_table_$argerr);
			end;
		end;
	     else do;
		     temp_access_name = segment_acl_array (i).access_name;
		     temp_mode = segment_acl_array (i).mode;
		     if substr (temp_mode, 5) ^= ""b	/* let a through */
		     then do;
			     segment_acl_array (i).status_code = error_table_$bad_acl_mode;
			     call fatal_error (error_table_$argerr);
			end;
		     temp_mode = temp_mode & REW_ACCESS;/* but not far */
		     temp_extended_mode = segment_acl_array (i).extended_mode;
		end;
	     revert any_other;

	     call acc_name_$elements (addr (temp_access_name), acl_entry_ptr, code);
	     if code ^= 0
	     then do;
		     on any_other call fatal_error (error_table_$argerr);
		     if d_s
		     then do;
			     directory_acl_array (i).status_code = code;
			     go to BAD_ACLE;
			end;
		     else do;
			     segment_acl_array (i).status_code = code;
BAD_ACLE:
			     revert any_other;
			     call fatal_error (error_table_$argerr);
			end;
		end;
	     if d_s
	     then do;
		     acl_entry_ptr -> acl1.mode = RW_ACCESS;
		     acl_entry_ptr -> acl1.ex_mode = temp_mode;
		end;
	     else do;
		     acl_entry_ptr -> acl1.mode = temp_mode;
		     acl_entry_ptr -> acl1.ex_mode = temp_extended_mode;
		end;

	     call acl_$add_entry (n_acls, owning_structure, acl_start_ptr, acl_entry_ptr, add_sw, code);
	     if code ^= 0
	     then call fatal_error (code);		/* hate to give up here, but no choice */
	     n_acls = n_acls + 1;

	     if add_sw
	     then do;				/* acl added, up count */
		     if ^initial_acl
		     then entry.acle_count = entry.acle_count + 1;
		     else if d_s
		     then dir.iacl_count.dir (ring) = dir.iacl_count.dir (ring) + 1;
		     else dir.iacl_count.seg (ring) = dir.iacl_count.seg (ring) + 1;
		     dir.acle_total = dir.acle_total + 1;
		end;

	end;					/* i do loop */

CLEAN_RETURN:
	if ^initial_acl
	then call setfaults$if_active ((entry.uid), (entry.pvid), (entry.vtocx), "1"b);
	call unlock_dir;
	a_code = 0;
	return;
%page;
check_pathname_find_read_lock_and_check_access:
     procedure;

	if initial_acl
	then do;					/* need ptr to locked dir */
		dirname = a_dir_name;
		entryname = a_entryname;
		if dirname = ">"
		then dirname = ">" || entryname;
		else if entryname ^= ""		/* compatable with old idiot programs */
		then dirname = rtrim (dirname) || ">" || entryname;

		if dirname = ""			/* this is always invalid */
		then call fatal_error (error_table_$argerr);

		if esw = LIST_DIR | esw = LIST_SEG
		then do;
			call dc_find$dir_read (dirname, dp, code);
			if code ^= 0
			then go to find_error;
			called_find, locked = "1"b;
		     end;
		else do;
			call dc_find$dir_write (dirname, FS_OBJ_IACL_MOD, dp, code);
			if code ^= 0
			then go to find_error;
			called_find, locked = "1"b;
			locked_for_write = "1"b;	/* fine, ready to go for iacls */

			if ring < caller_level | ring > 7
						/* only 8 rings, folks */
			then call fatal_error (error_table_$bad_ring_brackets);
		     end;
	     end;
	else do;					/* ordinary acl */
		dirname = a_dir_name;
		entryname = a_entryname;

		if dirname = ""			/* this is always invalid */
		then call fatal_error (error_table_$argerr);

		if esw = LIST_DIR | esw = LIST_SEG
		then do;
			call dc_find$obj_status_read (dirname, entryname, 1, ep, code);
			if code ^= 0
			then go to find_error;
			locked, called_find = "1"b;
			dp = ptr (ep, 0);
		     end;
		else do;
			call dc_find$obj_access_write (dirname, entryname, 1, FS_OBJ_ACL_MOD, ep, code);
			if code ^= 0
			then
find_error:
			     call fatal_error (code);
			locked, called_find = "1"b;
			dp = ptr (ep, 0);
			locked_for_write = "1"b;

			if entry.dirsw
			then if caller_level > bin (entry.ex_ring_brackets (1), 3)
						/* modify bracket */
			     then call fatal_error (error_table_$bad_ring_brackets);
			     else ;
			else if caller_level > bin (entry.ring_brackets (1))
			then call fatal_error (error_table_$bad_ring_brackets);
		     end;

		if entry.dirsw
		then do;
			if esw > ADD_DIR
			then call fatal_error (error_table_$dirseg);
						/* have already checked mode, safe to return */
		     end;

		else do;
			if esw <= ADD_DIR
			then call fatal_error (error_table_$nondirseg);
		     end;
	     end;

/* dp is set, ep is set for non-inacl case, access is okay */

     end check_pathname_find_read_lock_and_check_access;
%page;
check_in_structure:
     procedure;

/* Precheck structure to return errors without doing anything. */
/* check is repeated at actual run through acl to catch modifications */
/* from other processes */

	declare fail_sw		 bit (1) aligned;

	if esw = DEL_DIR | esw = DEL_SEG
	then delete_acl_array (*).status_code = 0;
	else if d_s
	then directory_acl_array (*).status_code = 0;
	else segment_acl_array (*).status_code = 0;

	fail_sw = "0"b;
	work_p = addr (a_n.ac_name);			/* a_n is a temp hold structure */
	do i = 1 to acl_count;			/* used for argument checking */

	     if (esw = DEL_DIR) | (esw = DEL_SEG)
	     then do;				/* when deleting acl entries, just perform name check */
		     call acc_name_$elements (addr (delete_acl_array (i).access_name), work_p, code);
		     if code ^= 0
		     then do;
			     delete_acl_array (i).status_code = code;
			     if code ^= error_table_$invalid_ascii
			     then fail_sw = "1"b;
			end;
		end;

	     else if d_s
	     then do;				/* look at directory acl modes and do name check */
		     if substr (directory_acl_array (i).mode, 4) ^= ""b
		     then do;
bad_mode:
			     directory_acl_array (i).status_code = error_table_$bad_acl_mode;
			     fail_sw = "1"b;
			end;
		     else if substr (directory_acl_array (i).mode, 1, 2) = "01"b
		     then do;			/* do not allow m without s permission */
			     directory_acl_array (i).status_code = error_table_$invalid_mode;
			     fail_sw = "1"b;
			end;

		     call acc_name_$elements (addr (directory_acl_array (i).access_name), work_p, code);
		     if code ^= 0
		     then do;
			     fail_sw = "1"b;
			     directory_acl_array (i).status_code = code;
			end;
		end;

	     else do;				/* look at segment acl modes and do name check */
		     if substr (segment_acl_array (i).mode, 5) ^= ""b
		     then do;			/* permit a mode for compatability */
			     segment_acl_array (i).status_code = error_table_$bad_acl_mode;
			     fail_sw = "1"b;
			end;
		     call acc_name_$elements (addr (segment_acl_array (i).access_name), work_p, code);
		     if code ^= 0
		     then do;
			     fail_sw = "1"b;
			     segment_acl_array (i).status_code = code;
			end;
		end;
	end;					/* do i = 1 to acl_count */
	if fail_sw
	then do;
		a_code = error_table_$argerr;
		go to ERROR_RETURN;
	     end;
     end check_in_structure;
%page;
process_specific_list:
     procedure;


	ael = acl_count;

/* zero out all status codes for unambiguous errors */

	on any_other call fatal_error (error_table_$argerr);
	if d_s
	then directory_acl_array (*).status_code = 0;
	else segment_acl_array (*).status_code = 0;
	revert any_other;

	fail_sw = "0"b;

	do i = 1 to ael;
	     offset = 0;

	     on any_other call fatal_error (error_table_$argerr);
	     if d_s
	     then temp_access_name = directory_acl_array (i).access_name;
	     else temp_access_name = segment_acl_array (i).access_name;
	     revert any_other;

	     call acc_name_$elements (addr (temp_access_name), acl_entry_ptr, code);
	     if code ^= 0
	     then do;
		     on any_other call fatal_error (error_table_$argerr);
		     if d_s
		     then directory_acl_array (i).status_code = code;
		     else segment_acl_array (i).status_code = code;
		     revert any_other;
		     fail_sw = "1"b;
		     go to list_loop;
		end;

	     call acl_$list_entry (n_acls, owning_structure, acl_start_ptr, acl_entry_ptr, offset, code);

	     if code ^= 0
	     then if code = error_table_$empty_acl
		then do;
			on any_other call fatal_error (error_table_$argerr);
			if d_s
			then do;
				directory_acl_array (*).status_code = error_table_$user_not_found;
				directory_acl_array (*).mode = ""b;
			     end;
			else do;
				segment_acl_array (*).status_code = error_table_$user_not_found;
				segment_acl_array (*).mode = ""b;
				segment_acl_array (*).extended_mode = ""b;
			     end;
			revert any_other;
			code = 0;
			return;
		     end;
	     else if code = error_table_$user_not_found
		then do;
			on any_other call fatal_error (error_table_$argerr);
			if d_s
			then do;
				directory_acl_array (i).status_code = code;
				directory_acl_array (i).mode = ""b;
			     end;
			else do;
				segment_acl_array (i).status_code = code;
				segment_acl_array (i).mode = ""b;
				segment_acl_array (i).extended_mode = ""b;
			     end;
			revert any_other;
			code = 0;
			goto list_loop;		/* no such user is okay, continue */
		     end;
		else call fatal_error (code);

	     on any_other call fatal_error (error_table_$argerr);
	     if d_s
	     then directory_acl_array (i).mode = acl_entry_ptr -> acl1.ex_mode;
	     else do;				/* check if can return ex mode */
		     segment_acl_array (i).mode = acl_entry_ptr -> acl1.mode;
		     segment_acl_array (i).extended_mode = acl_entry_ptr -> acl1.ex_mode;
		end;
	     revert any_other;
list_loop:
	end;
	if fail_sw
	then call fatal_error (error_table_$argerr);

     end process_specific_list;
%page;
process_list_all:
     procedure;
	declare saved_dir_change_pclock
				 fixed bin (35);

	acl_count = n_acls;

/* Unlock, allocate, relock */

	saved_dir_change_pclock = dir.change_pclock;

	call lock$dir_unlock (dp);
	locked = "0"b;

	on any_other call fatal_error (error_table_$argerr);
	on area call fatal_error (error_table_$noalloc);	/* specific takes precedence */

	if refer_allocation
	then do;
		if d_s
		then do;
			allocate directory_acl in (arg_area);
			directory_acl.count = acl_count;
			directory_acl.version = ACL_VERSION_1;
			return_acl_ptr = acl_ptr;
			acl_ptr = addr (directory_acl.entries);
		     end;
		else do;
			allocate segment_acl in (arg_area);
			segment_acl.count = acl_count;
			segment_acl.version = ACL_VERSION_1;
			return_acl_ptr = acl_ptr;
			acl_ptr = addr (segment_acl.entries);
		     end;
	     end;
	else do;
		if d_s
		then allocate directory_acl_array in (arg_area);
		else allocate segment_acl_array in (arg_area);
		return_acl_ptr = acl_ptr;
	     end;

	revert any_other, area;

/* Relock */
/* hmmm, perhaps we should censor seg_deleted ... ? */

	on seg_fault_error signal bad_dir_;
	call lock$dir_lock_read (dp, code);
	if code ^= 0
	then call fatal_error (code);
	locked = "1"b;
	revert seg_fault_error;

	if dir.change_pclock ^= saved_dir_change_pclock
	then do;
		call unlock_dir;			/* Locked_for_write guaranteed "0"b */
		go to Retry_process_list_all;
	     end;

	acl_entry_ptr = addr (a_n);

	do i = 1 to acl_count;
	     offset = i;				/* offset ^= 0, so list_entry will not match */

	     call acl_$list_entry (acl_count, owning_structure, acl_start_ptr, acl_entry_ptr, offset, code);
	     if code = error_table_$argerr
	     then /* see if listing all and count wrong */
		signal bad_dir_;

	     else if code ^= 0
	     then call fatal_error (code);

	     t_char1 = acl_entry_ptr -> acl1.ac_name.person;
	     t_char2 = acl_entry_ptr -> acl1.ac_name.project;
	     tag = acl_entry_ptr -> acl1.ac_name.tag;

	     on any_other call fatal_error (error_table_$argerr);

(nostringsize):
	     begin;
		if d_s
		then do;
			directory_acl_array (i).status_code = 0;
			directory_acl_array (i).access_name =
			     rtrim (t_char1) || "." || rtrim (t_char2) || "." || tag;
			directory_acl_array (i).mode = acl_entry_ptr -> acl1.ex_mode;
			directory_acl_array (i).status_code = 0;
		     end;
		else do;
			segment_acl_array (i).status_code = 0;
			segment_acl_array (i).access_name = rtrim (t_char1) || "." || rtrim (t_char2) || "." || tag;
			segment_acl_array (i).mode = acl_entry_ptr -> acl1.mode;
			segment_acl_array (i).extended_mode = acl_entry_ptr -> acl1.ex_mode;
		     end;
	     end /* the begin block */;
	     revert any_other;
	end;

     end process_list_all;
%page;
cleanup_:
     procedure;

						/** ASSUME that if a cleanup is in progress that verify_lock will be */
						/** called, so leave the dir locked for verify_lock to find and */
						/** salvage. */

	if /* case */ esw = LIST_DIR | esw = LIST_SEG
	then do;
		if /* case */ ^structure_supplied & acl_ptr ^= null
		then if /* tree */ refer_allocation
		     then if d_s
			then free directory_acl;
			else free segment_acl;
		     else if d_s
			then free directory_acl_array;
			else free segment_acl_array;
	     end;
	if called_find
	then call dc_find$finished (dp, "0"b);		/* leave locked for verify_lock */

     end cleanup_;

unlock_dir:
     procedure;

	if locked_for_write
	then do;
		call sum$dirmod (dp);
		dir.modify = ""b;
	     end;
	if called_find
	then call dc_find$finished (dp, locked);
	else if locked
	then call lock$dir_unlock (dp);
	locked, called_find = "0"b;
     end unlock_dir;


fatal_error:
     procedure (cc);
	declare cc		 fixed bin (35);

	a_code = cc;
	if fatal_error_sets_faults			/* only true if we have ep, etc. */
	then do;
		call setfaults$if_active ((entry.uid), (entry.pvid), (entry.vtocx), "1"b);
		fatal_error_sets_faults = ""b;
	     end;
	call unlock_dir;
	call cleanup_;				/* Free space, locking left untouched */
	go to ERROR_RETURN;
     end fatal_error;
ERROR_RETURN:
	return;
%page;
%include access_mode_values;
%page;
%include acl_structures;
%page;
%include dc_find_dcls;
%page;
%include dir_entry;
%page;
%include dir_header;
%page;
%include fs_obj_access_codes;
     end asd_;
