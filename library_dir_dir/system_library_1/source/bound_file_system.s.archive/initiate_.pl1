/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */

/* format: off */  /* This program was formatted via emacs. */

initiate_:
initiate:
    procedure (a_dname, a_ename, a_rname, a_segsw, a_copysw, a_segptr, a_code);

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* History of earlier versions of the program:			       */
/* Modified on 05/74 by E Stone to call status_$long when copy made	       */
/*    (to get curlen and to cause a branch update)		       */
/* Modified by Kobziar July 74 to call new entry in access_mode	       */
/*    and to add privileged initate entries			       */
/* Modified on 03/76 by R. Bratt to check mountedness of LV before okaying   */
/*    makeknown						       */
/* Modified on 06/01/76 by R. Bratt to call find_$finished		       */
/* Modified on 06/02/76 by R. Bratt to cleanup a piece of trash!	       */
/* Modified 760317 by L. Scheffler to properly call dir_control_error	       */
/*    entries						       */
/* Modified on 03/29/77 by M. Weaver to set lot fault when segment is first  */
/*    initiated in ring					       */
/* Modified on 78/02/21 by M. Weaver to call link_man$grow_lot at proper     */
/*    boundary						       */
/* Modified on 79/08/29 by Mike Grady to fix bug handling reserved segno's   */
/*    and copy sw						       */
/* Modified on 81/04/06 by J. Bongiovanni to fix max lot size check	       */
/* Modified May 1981 by C. Hornig to remove references to the copy switch.   */
/* Modified 04/30/84 by S. Herbst to add $get_segment_ptr_path	       */
/* Modified 07/18/84 by Keith Loepere to use the new dc_find.	       */
/* Modified 10/19/84 by Keith Loepere to do the right thing for initiating   */
/*    directories.						       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


/****^  HISTORY COMMENTS:
  1) change(85-12-10,GDixon), approve(86-08-09,MCR7388),
     audit(86-09-12,Farley), install(86-09-08,MR12.0-1150):
     Completely rewritten to:
      a) improve program structure and reduce number of switches used in code;
      b) keep directory locked while calling makeknown_, so that the pointer to
         dir entry remains valid;
      c) use dc_find$finished for most directory unlocking.
                                                   END HISTORY COMMENTS */


/* Parameters */

dcl  a_code fixed bin (35) parameter;
dcl  a_copysw fixed bin (2) parameter;
dcl  a_dname char (*) parameter;
dcl  a_dp ptr parameter;
dcl  a_ename char (*) parameter;
dcl  a_rname char (*) parameter;
dcl  a_count fixed bin (17);
dcl  a_segptr ptr parameter;
dcl  a_segsw fixed bin (1) parameter;
dcl  a_uid bit (36) parameter;

/* Variables */

dcl  1 in aligned,				/* copies of input parms.  */
       2 segp ptr,
       2 dirp ptr,
       2 dname char(168) unal,
       2 ename char(32) unal,
       2 rname char(32) varying;
dcl  1 entrypoint aligned,			/* per-entrypoint controls */
       2 dc_find entry (char(168), char(32), ptr, fixed bin(35)) variable,
       2 should_call_find_finished bit(1),
       2 should_unlock_dir bit(1),
       2 priv bit(1);
dcl  1 seg aligned,				/* intermediate data for   */
       2 dirp ptr,				/* segment being initiated.*/
       2 entp ptr,
       2 directory bit(1),
       2 hash_bucket fixed bin(17);
dcl  1 out aligned,				/* copies of output data.  */
       2 segp ptr,
       2 bc fixed bin(24),
       2 uid bit(36),
       2 code fixed bin(35);

/* External */

dcl  error_table_$dirseg external fixed bin (35);
dcl  error_table_$invalid_copy external fixed bin (35);
dcl  error_table_$seg_unknown external fixed bin (35);
dcl  error_table_$segknown external fixed bin (35);

/* Entries */

dcl  kstsrch entry (bit (36) aligned, fixed bin (17), ptr);

/* Misc */

dcl  (addr, baseno, baseptr, fixed, null, ptr, rtrim, unspec) builtin;
dcl  (FALSE init("0"b),
      TRUE  init("1"b)) bit(1) int static options(constant);

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* NAME:	initiate						       */
/*							       */
/* This module is a primitive which calls other routines to make a segment   */
/* known, i.e., to assign a segment number to the segment or a copy of the   */
/* segment.						       */
/*							       */
/* ENTRY:	initiate						       */
/*							       */
/* This is the main entrypoint.  Besides making a segment identified by      */
/* pathname known (optionally by a given reference name), it allows the      */
/* caller to optionally specify the segment number by which the segment      */
/* will be known.  The copysw argument is obsolete; a value of 2 (always     */
/* make a copy of the segment in the pdir) is diagnosed as an error;	       */
/* otherwise the switch is ignored.				       */
/*							       */
/* USAGE: call initiate (a_dname, a_ename, a_rname, a_segsw, a_copysw,       */
/*	  a_segptr, a_code);				       */
/*							       */
/* a_dname (char(*))					       */
/*    pathname of parent directory of the segment to be initiated (Input)    */
/* a_ename (char(*))					       */
/*    entryname of the segment to be initiated (Input)		       */
/* a_rname (char(*))					       */
/*    reference name by which the segment is to be made known if this	       */
/*    argument is of zero length, then the segment is made known by a null   */
/*    name (Input)						       */
/* a_segsw (fixed bin (1))					       */
/*    reserve segment switch  (Input)				       */
/*    (= 0 if no segment number reserved,			       */
/*     = 1 if segment number reserved)				       */
/* a_copysw (fixed bin (2))					       */
/*    formerly copy switch (Input)				       */
/*    (= 0 if default setting of copy switch to be used,		       */
/*     = 1 if segment never to be copied,			       */
/*     = 2 if segment always to be copied into process dir prior to	       */
/*	 initiation. This alternative is no longer implemented.  It	       */
/*	 produces an error.)				       */
/* a_segptr (pointer)					       */
/*    normally output.  If segsw = 1 then input pointer to previously known  */
/*    segment (used to input reserve segment number) .		       */
/* a_code (fixed bin (35))					       */
/*    status code (Output)					       */
/*							       */
/* ENTRY: priv_init						       */
/*							       */
/* This entry is identical to the initiate entrypoint, except that it	       */
/* ignores the impact of AIM and ring brackets when determining whether the  */
/* user has access to initiate the segment.			       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/* The real procedure statement is up above.  This one is useful documentation.

initiate_:
initiate:
    proc (a_dname, a_ename, a_rname, a_segsw, a_copysw, a_segptr, a_code); */

    call setup_args$initiate();
    entrypoint.dc_find = dc_find$obj_initiate;
    go to INITIATE_COMMON;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


priv_init:
    entry (a_dname, a_ename, a_rname, a_segsw, a_copysw, a_segptr, a_code);

    call setup_args$initiate();
    entrypoint.dc_find = dc_find$obj_initiate_raw;
    entrypoint.priv = TRUE;

INITIATE_COMMON:
    if out.code = 0 then do;
       call entrypoint.dc_find (in.dname, in.ename, seg.entp, out.code);
       if out.code = 0 then do;
	entrypoint.should_call_find_finished = TRUE;
	entrypoint.should_unlock_dir = FALSE;
	call check_entry();
	call make_entry_known_and_unlock_dir();
	end;
       end;
    a_segptr = out.segp;
    a_code = out.code;
    return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */





setup_args$initiate:
    proc;

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Input Args:						       */
/* a_dname, a_ename, a_rname,					       */
/* a_segsw, a_copysw, a_seg_ptr				       */
/*    input parameters, to be copied and tested.  Meanings of these parms    */
/*    are given in entrypoint descriptions above.			       */
/*							       */
/* Function:						       */
/* 1) copy a_dname, a_ename, a_rname.				       */
/* 2) copy, test and apply a_segsw to initial value of in.segp.	       */
/* 3) initialize out.segp, out.bc out.uid & entrypoint.priv.	       */
/* 4) copy and test a_copysw.  Set out.code according to test results.       */
/*							       */

/* Output Args:						       */
/* in.dname, in.ename, in.rname				       */
/*    copies of input parameters.				       */
/* in.segp						       */
/*    copy of a_segptr if a_segsw is on; otherwise set to null.	       */
/* out.segp						       */
/*    initialized to null (default output value if error occurs).	       */
/* out.bc							       */
/*    set to 0 (unused return argument).			       */
/* out.uid						       */
/*    set to "0"b (unused return argument).			       */
/* out.code						       */
/*    result of test of a_copysw.				       */
/* entrypoint.priv						       */
/*    set to off, assuming not entered at privileged		       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

dcl  copysw fixed bin (2);
dcl  segsw fixed bin (1);

    copysw = a_copysw;
    segsw = a_segsw;
    in.dname = a_dname;
    in.ename = a_ename;
    in.rname = rtrim(a_rname);

    if segsw = 0 then			/* a_segptr can only be    */
       in.segp = null;			/* copied if segsw ^= 0.   */
    else					/* Otherwise, it must not  */
       in.segp = a_segptr;			/* be touched, since its   */
					/* storage may not be in   */
					/* ptr format.	       */
    out.segp = null;
    out.bc = 0;
    out.uid = "0"b;
    if copysw = 2 then 
       out.code = error_table_$invalid_copy;
    else 
       out.code = 0;
    entrypoint.priv = FALSE;

    end setup_args$initiate;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* ENTRY:	initiate_count					       */
/*							       */
/* This entry is the same as initiate except that a bit count parameter      */
/* replaces the a_segsw parm.					       */
/*							       */
/* USAGE:	call initiate$initiate_count				       */
/*	  (a_dname, a_ename, a_rname, a_count, a_copysw, a_segptr, a_code);*/
/*							       */
/* a_count (fixed bin(24))					       */
/*    bit count of initiated segment (Output)			       */
/*							       */
/* ENTRY: priv_init_count					       */
/*							       */
/* This entry is like initiate_count, except that it ignores the impact of   */
/* AIM and ring brackets when determining whether the user has access to     */
/* initiate the segment.					       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

initiate_count:
    entry (a_dname, a_ename, a_rname, a_count, a_copysw, a_segptr, a_code);

    call setup_args$initiate_count();
    entrypoint.dc_find = dc_find$obj_initiate;
    go to INITIATE_COUNT_COMMON;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


priv_init_count:
    entry (a_dname, a_ename, a_rname, a_count, a_copysw, a_segptr, a_code);

    call setup_args$initiate_count();
    entrypoint.dc_find = dc_find$obj_initiate_raw;
    entrypoint.priv = TRUE;

INITIATE_COUNT_COMMON:
    if out.code = 0 then do;
       call entrypoint.dc_find (in.dname, in.ename, seg.entp, out.code);
       if out.code = 0 then do;
	entrypoint.should_call_find_finished = TRUE;
	entrypoint.should_unlock_dir = FALSE;
	call check_entry();
	call make_entry_known_and_unlock_dir();
	end;
       end;
    a_count = out.bc;
    a_segptr = out.segp;
    a_code = out.code;
    return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

setup_args$initiate_count:
    proc;

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Input Args:						       */
/* a_dname, a_ename, a_rname, a_copysw				       */
/*    input parameters, to be copied and tested.  Meanings of these parms    */
/*    are given in entrypoint descriptions above.			       */
/*							       */
/* Function:						       */
/* 1) copy a_dname, a_ename, a_rname.				       */
/* 2) initialize in.segp, out.segp, out.bc, out.uid & entrypoint.priv.       */
/* 3) copy and test a_copysw.  Set out.code according to test results.       */
/*							       */
/* Output Args:						       */
/* in.dname, in.ename, in.rname				       */
/*    copies of input parameters.				       */
/* in.segp						       */
/*    set to null (no reserved segment number specified).		       */
/* out.segp						       */
/*    set to null (default output value if error occurs).		       */
/* out.bc							       */
/*    set to value for bit count to be output if error occurs (0).	       */
/* out.uid						       */
/*    set to "0"b (unused output value).			       */
/* out.code						       */
/*    result of test of a_copysw.				       */
/* entrypoint.priv						       */
/*    set to off, assuming not entered at privileged entrypoint.	       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

dcl  copysw fixed bin (2);

    copysw = a_copysw;
    in.dname = a_dname;
    in.ename = a_ename;
    in.rname = rtrim(a_rname);
    in.segp = null;

    out.segp = null;
    out.bc = 0;
    out.uid = "0"b;
    if copysw = 2 then 
       out.code = error_table_$invalid_copy;
    else 
       out.code = 0;
    entrypoint.priv = FALSE;

    end setup_args$initiate_count;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* ENTRY:	initiate_seg_count					       */
/*							       */
/* This entry is the same as initiate_count except that it takes a	       */
/* directory pointer instead of a directory path name.  It is used solely    */
/* by fs_search.						       */
/*							       */
/* NOTE: a contract has been made that this entry can only be called by      */
/* fs_search.  dc_find knows this.  As such, dc_find does not do its normal  */
/* name lookup access check for this routine, and merely returns no_info     */
/* if the name doesn't exist or if the user doesn't have access.	       */
/*							       */
/* USAGE:	call initiate$initiate_seg_count			       */
/*	  (a_dp, a_ename, a_rname, a_count, a_copysw, a_segptr, a_code);   */
/*							       */
/* a_dp (ptr)						       */
/*    pointer to directory of entry ename. (Input)		       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

initiate_seg_count:
    entry (a_dp, a_ename, a_rname, a_count, a_copysw, a_segptr, a_code);

    call setup_args$initiate_seg_count();
    if out.code = 0 then do;

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Note that dc_find$obj_initiate_for_linker_dp, knowing it is called only   */
/* for fs_search, does not perform its normal name lookup access checks.     */
/* If the entry is not found, dc_find will return no_info, as it will (for   */
/* this one entry only) if the user lacks access to see the object.	       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

       call dc_find$obj_initiate_for_linker_dp (in.dirp, in.ename, seg.entp, out.code);
       if out.code = 0 then do;
	if in.dirp = null then do;

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* This means ename was a link to an object in another directory besides     */
/* that pointed to by in.dirp.  Therefore, we cannot unlock the dir but      */
/* must instead tell dc_find to do it.				       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	   entrypoint.should_unlock_dir = FALSE;
	   entrypoint.should_call_find_finished = TRUE;
	   end;

	else do;

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* This is the normal case, in which we can unlock in.dirp directly without  */
/* having to call dc_find.					       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	   entrypoint.should_call_find_finished = FALSE;
	   entrypoint.should_unlock_dir = TRUE;
	   end;

	call check_entry();
	call make_entry_known_and_unlock_dir();
	end;
       end;
    a_count = out.bc;
    a_segptr = out.segp;
    a_code = out.code;
    return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

setup_args$initiate_seg_count:
    proc;

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Input Args:						       */
/* a_dp, a_ename, a_rname,					       */
/* a_copysw						       */
/*    input parameters, to be copied and tested.  Meanings of these parms    */
/*    are given in entrypoint descriptions above.			       */
/*							       */
/* Function:						       */
/* 1) copy a_dp, a_ename, a_rname.				       */
/* 2) initialize in.segp, out.segp, out.bc, out.uid & entrypoint.priv.       */
/* 3) copy and test a_copysw.  Set out.code according to test results.       */
/*							       */
/* Output Args:						       */
/* in.dirp, in.ename, in.rname				       */
/*    copies of input parameters.				       */
/* in.segp						       */
/*    set to null (no reserved segment number specified).		       */
/* out.segp						       */
/*    set to null (default output value if error occurs).		       */
/* out.bc							       */
/*    set to value for bit count to be output if error occurs (0).	       */
/* out.uid						       */
/*    set to "0"b (unused output value).			       */
/* out.code						       */
/*    result of test of a_copysw.				       */
/* entrypoint.priv						       */
/*    set to off, not a privileged entrypoint.			       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

dcl  copysw fixed bin (2);

    in.dirp = a_dp;
    in.ename = a_ename;
    in.rname = rtrim(a_rname);
    in.segp = null;

    out.segp = null;
    out.bc = 0;
    out.uid = "0"b;
    copysw = a_copysw;
    if copysw = 2 then 
       out.code = error_table_$invalid_copy;
    else 
       out.code = 0;
    entrypoint.priv = FALSE;

    end setup_args$initiate_seg_count;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* ENTRY: get_segment_ptr_path				       */
/*							       */
/* This entry point returns a ptr and uid if the segment is already	       */
/* initiated; it returns an error if the segment is not already initiated.   */
/*							       */
/* USAGE: call initiate_$get_segment_ptr_path (a_dname, a_ename, a_segptr,   */
/*	   a_uid, a_code);					       */
/*							       */
/* a_dname (char(*))					       */
/*    parent directory. (Input)				       */
/* a_ename (char(*))					       */
/*    entry name. (Input)					       */
/* a_segptr (ptr)						       */
/*    pointer to the segment, or null. (Output)			       */
/* a_uid (bit(36))						       */
/*    file system uid. (Output)				       */
/* a_code (fixed(35))					       */
/*    zero or error_table_$seg_unknown. (Output)			       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

get_segment_ptr_path:
    entry (a_dname, a_ename, a_segptr, a_uid, a_code);

    call setup_args$get_segment_ptr_path();
    call dc_find$obj_initiate (in.dname, in.ename, seg.entp, out.code);
    if out.code = 0 then do;
       entrypoint.should_call_find_finished = TRUE;
       entrypoint.should_unlock_dir = FALSE;
       call check_entry();
       if seg.directory then do;
	out.code = error_table_$dirseg;
	out.uid = "0"b;
	end;
       else do;
	call kstsrch (out.uid, seg.hash_bucket, kstep);
	if kstep = null then do;
	   out.code = error_table_$seg_unknown;
	   out.uid = "0"b;
	   end;
	else 
	   out.segp = baseptr (kste.segno);
	end;
       call unlock_dir();
       end;
    a_uid = out.uid;
    a_segptr = out.segp;
    a_code = out.code;
    return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


setup_args$get_segment_ptr_path:
    proc;

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Input Args:						       */
/* a_dname, a_ename						       */
/*    input parameters, to be copied.  Meanings of these parms are given in  */
/*    entrypoint descriptions above.				       */
/*							       */
/* Function:						       */
/* 1) copy a_dname and a_ename				       */
/* 2) initialize in.segp, out.segp, out.bc, out.uid, out.code and	       */
/*    entrypoint.priv.					       */
/*							       */
/* Output Args:						       */
/* in.dname, in.ename					       */
/*    copies of input parameters.				       */
/* in.segp						       */
/*    set to null (no reserved segment number specified).		       */
/* out.segp						       */
/*    set to null (default output value if segment not known).	       */
/* out.bc							       */
/*    set to 0 (unused return argument).			       */
/* out.uid						       */
/*    set to uid value to output if error occurs (0).		       */
/* out.code						       */
/*    set to 0.						       */
/* entrypoint.priv						       */
/*    set to off, not a privileged entrypoint.			       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

    in.dname = a_dname;
    in.ename = a_ename;
    in.segp = null;

    out.segp = null;
    out.bc = 0;
    out.uid = "0"b;
    out.code = 0;
    entrypoint.priv = FALSE;

    end setup_args$get_segment_ptr_path;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

check_entry:
    proc;

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Input Args:						       */
/* seg.entp						       */
/*    pointer to the dir branch for the entry to be initiated.	       */
/*							       */
/* Function:						       */
/* 1) Check if target entry being initiated is the root dir.  If so	       */
/*    fabricate information.					       */
/* 2) Otherwise, extract output information from dir branch for the entry.   */
/*							       */
/* Output Args:						       */
/* seg.dirp						       */
/*    pointer to the containing dir.				       */
/* seg.directory						       */
/*    on if entry being initiated is a directory.			       */
/* out.uid						       */
/*    entry's unique ID					       */
/* out.bc							       */
/*    entry's bit count					       */
/* entrypoint.should_call_find_finished,		       	       */
/* entrypoint.should_unlock_dir				       */
/*    switches controlling whether/how directory is unlocked.  These are     */
/*    turned off if the entry is the root dir.			       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

    if seg.entp = null then do;		/* root		       */
       seg.dirp = null;
       seg.directory = TRUE;
       out.uid = "777777777777"b3;
       out.bc = 0;
       entrypoint.should_call_find_finished,	/* didn't lock anything    */
	entrypoint.should_unlock_dir = FALSE;
       end;
    else do;
       seg.dirp = ptr (seg.entp, 0);
       seg.directory = seg.entp -> entry.dirsw;
       out.uid = seg.entp -> entry.uid;
       out.bc = seg.entp -> entry.bc;
       end;
    end check_entry;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

make_entry_known_and_unlock_dir:
    proc;

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Input Args:						       */
/* in.segp						       */
/*    reserved segment number to use for initiate_ entrypoint	       */
/* in.rname						       */
/*    name by which segment is to be referenced (for ref_name_$insert)       */
/* seg.dirp						       */
/*    pointer to dir containing entry.				       */
/* seg.entp						       */
/*    pointer to entry's dir branch.				       */
/* seg.directory						       */
/*    on if entry being initiated is a directory.			       */
/* entrypoint.priv						       */
/*    on if calling entrypoint is privileged (for call to makeknown_)	       */
/* out.uid						       */
/*    entry's unique ID (for call to makeknown_)			       */
/*							       */
/* Function:						       */
/* 1) Ensures disk holding target entry is mounted.		       */
/* 2) Makes target entry known to process.			       */
/* 3) Unlocks containing directory.				       */
/* 4) Adds reference name table (RNT) entry for the known segment.	       */
/* 5) Sets LOT entry for the segment (in target ring) to lot_fault value.    */
/*							       */
/* Output Args:						       */
/* out.segp						       */
/*    pointer to initiated segment (remains unchanged if makeknown_ fails).  */
/* out.bc							       */
/*    bit count (set to 0 if makeknown_ fails).			       */
/* out.code						       */
/*    results from call to mountedp, makeknown_ and ref_name_$insert.	       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/* Variables */
dcl  ecode fixed bin (35);
dcl  1 mk_info aligned like makeknown_info;
dcl  ring fixed bin (3);
dcl  segno fixed bin;
dcl  use_count fixed bin (17);

/* External */
dcl  pds$stacks (0:7) ptr ext;
dcl  1 pds$useable_lot aligned ext,
       2 flags (0:7) bit (1) unal;

/* Entries */
dcl  level$get entry returns (fixed bin (3));
dcl  link_man$grow_lot entry (fixed bin (3));
dcl  makeknown_ entry (ptr, fixed bin, fixed bin, fixed bin (35));
dcl  mountedp entry (bit (36) aligned, fixed bin (35));
dcl  ref_name_$insert entry (char (32) varying, fixed bin, fixed bin (35));

    if ^seg.directory then do;		/* ensure LV is mounted    */
       call mountedp (seg.dirp -> dir.sons_lvid, out.code);
       if out.code ^= 0 then do;
	call unlock_dir();
	out.bc = 0;			/* Don't return bit count  */
	return;				/* if errors occur.	       */
	end;
       end;

    unspec (mk_info) = FALSE;
    mk_info.uid = out.uid;
    mk_info.entryp = seg.entp;		/* dir locked, seg.entp    */
					/* has been validated by   */
					/*  dc_find.	       */
    mk_info.dirsw = seg.directory;
    mk_info.priv_init = entrypoint.priv;
    mk_info.allow_write = TRUE;

    if in.segp ^= null then do;
       mk_info.rsw = TRUE;
       segno = fixed (baseno (in.segp), 17);
       end;
    else mk_info.rsw = FALSE;

    call makeknown_ (addr (mk_info), segno, use_count, out.code);
    call unlock_dir();			/* The dir must stay       */
					/* locked until after      */
    if out.code = 0 then;			/* makeknown_ returns, as  */
    else if out.code = error_table_$segknown then;/* per interface specs.    */
    else do;
       out.bc = 0;				/* Don't return bit count  */
       return;				/* if errors occur.	       */
       end;
    out.segp = baseptr (segno);		/* From this point on,     */
					/* makeknown_ has succeeded*/

    if in.rname ^= "" then do;		/* Add ref name to segment.*/
       call ref_name_$insert (in.rname, segno, ecode);
       if ecode ^= 0 then out.code = ecode;	/* Be careful not to zero  */
       end;				/* segknown code needlessly*/

    if use_count = 1 then do;			/* Made known for first    */
       ring = level$get ();			/* time in a ring?	       */
       if pds$useable_lot.flags (ring) then do;	/* diddle user ring lot    */
	if segno >= pds$stacks (ring) -> stack_header.cur_lot_size then
	   if segno < pds$stacks (ring) -> stack_header.max_lot_size then do;
	      call link_man$grow_lot (ring);
	      unspec (pds$stacks (ring) -> stack_header.lot_ptr -> lot.lp (segno)) = lot_fault;
					/* flag lot entry to tell  */
	      end;			/* run unit seg is known.  */
	   else;				/* high segno might be OK  */
					/* if seg not linked to.   */
	else  unspec (pds$stacks (ring) -> stack_header.lot_ptr -> lot.lp (segno)) = lot_fault;
	end;
       end;
    end make_entry_known_and_unlock_dir;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

unlock_dir:
    proc;

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Input Args:						       */
/* seg.dirp						       */
/*    pointer to dir containing entry.				       */
/* seg.entp						       */
/*    pointer to entry's dir branch.				       */
/* entrypoint.should_call_find_finished				       */
/*    on to call dc_find$finished to unlock and unhold dir.		       */
/* entrypoint.should_unlock_dir				       */
/*    on to call lock$unlock_dir to unlock dir.			       */
/*							       */
/* Function: unlock dir containing target entry.  Normally, it was locked    */
/* by dc_find$obj_initiate, which also holds the directory (by incrementing  */
/* its usage count) to keep it from being KST-garbage-collected.  So	       */
/* dc_find$finished must be called to undo this dir holding.	       */
/*							       */
/* However, the linker calls $initiate_seg_count, which uses	       */
/* dc_find$obj_initiate_for_linker_dp, which does NOT hold the containing    */
/* dir unless ename matches a link in the containing dir and the link gets   */
/* chased.  If no links were chased, then the dir is NOT held and	       */
/* lock$dir_unlock can be called directly.  If links were chased, then       */
/* dc_find$finished must be called to unhold the dir containing the chased   */
/* link target.						       */
/*							       */
/* Finally, if the entry being initiated is the root, then there is no       */
/* containing directory to unlock.  The input flags are set appropriately    */
/* by callers to cause the correct operation to occur.		       */
/*							       */
/* Output Args:						       */
/* entrypoint.should_call_find_finished,			       */
/* entrypoint.should_unlock_dir				       */
/*    turned off on output.					       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/* Entries */

dcl  lock$dir_unlock entry (pointer);

    if entrypoint.should_call_find_finished then
       call dc_find$finished (seg.entp, DC_FIND_UNLOCK_DIR);
    else if entrypoint.should_unlock_dir then
       call lock$dir_unlock(seg.dirp);
    entrypoint.should_call_find_finished, entrypoint.should_unlock_dir = FALSE;

    end unlock_dir;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

%include dc_find_dcls;

%include dir_entry;

%include dir_header;

%include kst;

%include lot;

%include makeknown_info;

%include stack_header;
     end initiate_;
