/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style4 */
acl: proc;

/* This is the acl write around for the directory change of 1972. */


/****^  HISTORY COMMENTS:
  1) change(73-01-21,Kobziar), approve(), audit(), install():
      Remove append from segments and obsolete CACLs.
  2) change(73-02-01,EStone), approve(), audit(), install():
      Rewritten in v2pl1 for performance improvements.
  3) change(74-10-01,EStone), approve(), audit(), install():
      Place uid and dtem in double word.
  4) change(75-04-25,Greenberg), approve(), audit(), install():
      Modified by BSG for NSS and no perm acls.
  5) change(76-06-01,RBratt), approve(), audit(), install():
      Modified to call find_$finished.
  6) change(76-06-01,VanVleck), approve(), audit(), install():
      Modified by THVV for no perm acls.
  7) change(77-07-01,VanVleck), approve(), audit(), install():
      Modified for bad_dir_ check.
  8) change(83-08-01,Kittlitz), approve(), audit(), install():
      Modified by E. N. Kittlitz for setfault$if_active pvid, vtocx args.
  9) change(84-06-01,Loepere), approve(), audit(), install():
      Modified by Keith Loepere for the new dc_find.
 10) change(84-10-01,Loepere), approve(), audit(), install():
      Modified for auditing operation as access change.
 11) change(86-06-03,Lippard), approve(86-09-04,MCR7534),
     audit(86-09-11,Dickson), install(86-09-16,MR12.0-1159):
      Modified by Jim Lippard to make dir modes RW rather than null.
                                                   END HISTORY COMMENTS */


/* Strategy used is to move input structure into an automatic structure acl(100) and call the new single acl
   primitives , thus avoiding seg faults while dir locked */

/* The entries to this routine are
   name	     entry switch
   $aadd		1
   $a1add		1
   $areplace	2
   $adelete	3
   $alist		4

   Up to 100 entries are handeled and the arguments for all but alist and a1add are
   1)   a_dirname character(*)	a directory path name. (Input)
   2)   a_ename character(*)	an entry name for this acl; was null for now obselete cacl. (Input)
   3)   a_aclp pointer	a pointer to an array of data to be entered or returned. (Input)
   4)   a_aclct fixed bin (17)	a count of the number of entries in the array. (Output/alist Input/others)
   5)   a_code fixed bin (17)	an error code. (Output)

   For $alist the argument a_uap is a pointer to a user area where the output will beallocated.

   For $a1add the first two arguments are as above and the rest are
   1)   a_name character(*)	name to be added to the ACL. (Input)
   2)   a_mode fixed bin (5)	the mode. (Input)
   3)   a_rb fixed bin (6)	 the ring brackets. (Input)

   This routine will do as much as it can, processing good entries in the data array
   and returning an error code in acla(i).reterr for the bad entries
   as well as an error code in a_code.


   If a_aclct = -1 for $adelete or if a_uap is non-null for $alist then the whole
   ACL list (up to 100 entries) will be listed or deleted as requested.
   The target ACL for replace is deleted before the new entries are made. */
%page;

/* Parameters */

dcl  a_aclct fixed bin parameter;
dcl  a_aclp ptr parameter;
dcl  a_code fixed bin (35) parameter;
dcl  a_dirname char (*) parameter;
dcl  a_ename char (*) parameter;
dcl  a_mode fixed bin (5) parameter;
dcl  a_name char (*) parameter;
dcl  a_rb (3) fixed bin (6) parameter;
dcl  a_uap ptr parameter;

/* Constants */

dcl  add fixed bin static options (constant) init (0);
dcl  add_one fixed bin static options (constant) init (1);
dcl  delete fixed bin static options (constant) init (3);
dcl  list fixed bin static options (constant) init (4);
dcl  replace fixed bin static options (constant) init (2);

/* Variables */

dcl  1 acl (100) aligned like temp_acl;
dcl  access_id char (32) varying;
dcl  acl_start_ptr ptr;
dcl  aclp ptr;
dcl  add_sw bit (1);
dcl  all bit (1) aligned;
dcl  count fixed bin;
dcl  cnt fixed bin;
dcl  code fixed bin (35);
dcl  dirname char (168);
dcl  dirsw bit (1) aligned;
dcl  dummy char (32) aligned;
dcl  entryname char (32);
dcl  fail_sw bit (1) aligned;
dcl  function fixed bin;
dcl  gate bit (1) aligned;
dcl  i fixed bin;
dcl  in_aclp ptr;
dcl  j fixed bin;
dcl  name char (32) aligned;
dcl  offset fixed bin;
dcl  p ptr;
dcl  ring (3) bit (3) aligned;
dcl  ringno fixed bin;
dcl  uap ptr;

/* External */

dcl  error_table_$argerr fixed bin (35) ext;
dcl  error_table_$bad_ring_brackets fixed bin (35) ext;
dcl  error_table_$invalid_mode fixed bin (35) ext;
dcl  error_table_$invalid_project_for_gate fixed bin (35) ext;
dcl  error_table_$noalloc fixed bin (35) ext;
dcl  error_table_$obsolete_function fixed bin (35) ext;
dcl  1 pds$access_name aligned ext,
       2 person char (32),
       2 project char (32),
       2 tag (1);
dcl  pds$processid bit (36) aligned ext;

/* Based */

dcl  1 acla (100) aligned based (aclp) like input_acl;
dcl  1 input_acl aligned based,
       2 userid char (32) aligned,
       2 mode bit (5) unaligned,
       2 reterr bit (13) unaligned,
       2 (rb1, rb2, rb3) bit (6) unaligned;
dcl  1 temp_acl aligned based,
       2 person char (32) aligned,
       2 project char (32) aligned,
       2 tag char (1) aligned,
       2 mode bit (36) aligned,
       2 ex_mode bit (36) aligned,
       2 status fixed bin (35),
       2 (rb1, rb2, rb3) fixed bin;
dcl  1 x aligned based,
       2 person char (32) aligned,
       2 project char (32) aligned,
       2 tag char (1) aligned,
       2 mode bit (36) aligned,
       2 ex_mode bit (36) aligned,
       2 status fixed bin (35),
       2 rb (3) fixed bin;

/* Entries */

dcl  acc_list_$match entry (fixed bin, bit (36) aligned, ptr, ptr, ptr, fixed bin, fixed bin (35));
dcl  acc_name_$elements entry (ptr, ptr, fixed bin (35));
dcl  acl_$add_entry entry (fixed bin, bit (36) aligned, ptr, ptr, bit (1), fixed bin (35));
dcl  acl_$del_acl entry (fixed bin, bit (36) aligned, ptr);
dcl  acl_$del_entry entry (fixed bin, bit (36) aligned, ptr, ptr, fixed bin (35));
dcl  acl_$list_entry entry (fixed bin, bit (36) aligned, ptr, ptr, fixed bin, fixed bin (35));
dcl  alloc_ entry (fixed bin, ptr, ptr);
dcl  change_dtem entry (ptr);
dcl  check_gate_acl_ entry (ptr, bit (1) aligned, fixed bin, char (32) aligned, fixed bin (35));
dcl  freen_ entry (ptr);
dcl  level$get entry (fixed bin);
dcl  setfaults$if_active entry (bit (36) aligned, bit (36) aligned, fixed bin, bit (1) aligned);
dcl  sum$dirmod entry (ptr);

/* Misc */

dcl  (area, bad_dir_) condition;

dcl  (addr, bin, bit, fixed, null, ptr, rtrim, size, substr) builtin;
%page;
aadd: entry (a_dirname, a_ename, a_aclp, a_aclct, a_code);

	function = add;				/* indicate which type of acl manipulation */

	call setup;				/* copy input arguments and initialize flags */

	if cnt = 0 then go to ret;			/* if number of acl entries to be added is zero, return */
	call check_count;				/* validate count and aclp */

	call clear_code;				/* clear return 13 bit error code */

	call fill_in_temp;				/* convert input structure to intermediate structure */

add_common:
	call get_entry_ptr;				/* get pointer to entry */

	if dirsw then call check_modes;		/* check validity of directory modes for dir acl  */

	else do;					/* for segment acl */

	     call get_rb;				/* get ring brackets of segment */
	     call check_rb;				/* perform check on input ring bracket array */

	     if gate then do;			/* if adding ACL to a gate, cannot add new project */

		call check_gate_acl_ (acl_start_ptr, "1"b, (ep -> entry.acle_count), dummy, code);
		if code ^= 0 then go to unlock;	/* cannot perform ACL addition */

	     end;

	end;

	call change_acl;				/* set modify switch and update dtm */

	call add_to_acl;				/* add acl list */

/* indicate to segment control that dir modified */
	call update_and_unlock;			/* and unlock the directory */

	go to finale;
%page;
a1add: entry (a_dirname, a_ename, a_name, a_mode, a_rb, a_code); /* add one only */

	function = add_one;				/* indicate which type of acl manipulation */

	call setup;

	p = addr (acl (1));				/* convert input to intermediate strucutre */
	cnt = 1;					/* adding one acl */

	name = a_name;				/* copy userid */

	if name = "" then do;			/* set userid to current user with tag = "*" */

	     p -> temp_acl.person = pds$access_name.person;
	     p -> temp_acl.project = pds$access_name.project;
	     p -> temp_acl.tag = "*";

	end;

	else do;					/* break up userid into 3 part access name */

	     call acc_name_$elements (addr (name), p, p -> temp_acl.status);
	     if p -> temp_acl.status ^= 0 then go to finale; /* if illegal name, stop right now */

	end;

	p -> temp_acl.mode = bit (fixed (a_mode, 4), 4);	/* copy mode, strip off trap bit */
	p -> temp_acl.ex_mode = "0"b;			/* clear extended mode */

	p -> temp_acl.status = 0;			/* clear error code */

	p -> x.rb = a_rb;				/* copy ring brackets */

	go to add_common;				/* transfer to acl adding code */
%page;
areplace: entry (a_dirname, a_ename, a_aclp, a_aclct, a_code);

	function = replace;				/* indicate what type of acl manipulation */

	call setup;				/* copy input arguments and initialize flags */

	if cnt = 0 then go to remove_acl;		/* if no ACLs to replace current ACL, delete present ACL */
	call check_count;				/* validate count and aclp */

	call clear_code;				/* clear return 13 bit error code */

	call fill_in_temp;				/* convert input structure to intermediate structure */

	call get_entry_ptr;				/* get pointer to entry and lock parent directory */

	if dirsw then call check_modes;		/* if replacing a dir acl check validity of dir modes */

	else do;					/* for segment acl */
	     p = addr (acl (cnt));
	     ring (1) = bit (fixed (p -> temp_acl.rb1, 3), 3); /* get ring brackets from intermediate structure */
	     ring (2) = bit (fixed (p -> temp_acl.rb2, 3), 3);
	     ring (3) = bit (fixed (p -> temp_acl.rb3, 3), 3);
	     call check_rb;				/* perform check on input ring bracket array */

	end;

	call change_acl;				/* set modify switch and update dtm */

	call delete_acl;				/* delete entire acl */

	call add_to_acl;				/* add ACL list */

	if ^dirsw then ep -> entry.ring_brackets = ring;	/* change ring brackets of segment ACL */

/* indicate to segment control that dir modified */
	call update_and_unlock;			/* and unlock the directory */

	go to finale;
%page;
adelete: entry (a_dirname, a_ename, a_aclp, a_aclct, a_code);

	function = delete;				/* indicate what type of acl manipulation we are doing */

	call setup;				/* copy input arguments and initialize flags */

	if cnt ^= -1 then do;			/* given a list of acl entries to delete */

	     if cnt = 0 then go to ret;		/* done if none to delete */
	     call check_count;			/* validate count and aclp */
	     call clear_code;			/* clear return 13 bit error code */
	     call get_names;			/* parse input userids */

	end;

	else do;					/* delete entire acl */

remove_acl:
	     all = "1"b;				/* set flag */
	     aclp = null;

	end;

	call get_entry_ptr;				/* get ptr to entry and lock directory */

	call change_acl;				/* set modify switch and update dtm */

	if all then call delete_acl;			/* delete whole acl */

	else call delete_from_acl;			/* or delete selected acl entries */

/* indicate to segment control that dir modified */
	call update_and_unlock;			/* and unlock the directory */

	go to finale;
%page;
alist: entry (a_dirname, a_ename, a_aclp, a_aclct, a_uap, a_code);

	function = list;				/* indicate what type of acl manipulation */

	call setup;				/* copy input arguments and initialize flags */

	uap = a_uap;				/* copy pointer to user's area */

	if uap = null then do;			/* if user provided no area, then list selected acl entries */

	     cnt = a_aclct;				/* copy number of acl entries to be listed */
	     if cnt = 0 then go to ret;		/* if number of acl entries is zero, return */

	     aclp = a_aclp;				/* copy pointer to input structure */

	     call check_count;			/* validate count and aclp */
	     call clear_code;			/* clear return 13 bit error code */
	     call get_names;			/* parse input userids */

	end;

	else do;					/* list entire acl */

	     all = "1"b;				/* set flag */
	     aclp = null;
	     cnt = -1;

	end;

	call get_entry_ptr;				/* get entry ptr and lock directory */

	if all then call list_acl;			/* list entire acl */

	else call list_acl_entries;			/* list certain acl entries */

	call get_rb;				/* get ring brackets of segment */

	call dc_find$finished (dp, "1"b);		/* unlock and unuse */

	if all then on area go to alloc_err;		/* enable area condition outside internal procedure */
						/* so that it will share external procedure's stack frame */
	call copy_acl;				/* copy from intermediate structure to user area */

	go to finale;
%page;
/* error and other miscellanous returns */

alloc_err:					/* user did not provide enough room when listing entire ACL */
	if aclp ^= null then call freen_ (aclp);	/* free what was allocated */
	a_aclp = null;				/* return null pointer to allocation, acl count = 0 and status code */
	a_aclct = 0;
	code = error_table_$noalloc;
	go to ret;				/* copy main status code - already unlocked directory */

arg_err:						/* global problem with input arguments */
	code = error_table_$argerr;
	go to ret;				/* copy main status code - not yet locked directory */

bracket_error:					/* rb of segment/directory not within write bracket */
	code = error_table_$bad_ring_brackets;
	go to unlock;				/* unlock directory - reflect individual errors */

unlock:						/* unlock the directory on error */
	dir.modify = "0"b;
	call dc_find$finished (dp, "1"b);		/* unlock and unuse */

finale:
	if function = add_one then do;		/* if entered via a1add, skip processing individual codes */
	     if code = 0 then code = p -> temp_acl.status;
	end;

	else if cnt > 0 then do i = 1 to cnt;		/* reflect individual code to user's structure */

	     p = addr (acl (i));
	     if p -> temp_acl.status ^= 0 then do;
		aclp -> acla (i).reterr = bit (fixed (p -> temp_acl.status, 13), 13);

/* if main status code is non-zero, reflect it up */
		if code = 0 then code = p -> temp_acl.status;

	     end;

	end;
ret:
	a_code = code;
	return;
%page;
setup:						/* copy arguments - set initial values for flags */
     proc;

	code = 0;					/* clear status code */

	dirname = a_dirname;			/* copy directory name */

	entryname = a_ename;			/* copy entry name */
						/* perform requested function */

	if function ^= list & function ^= add_one then do;/* if input args */

	     aclp = a_aclp;				/* copy pointer to input structure */
	     cnt = a_aclct;				/* copy count of entries in input structure */

	end;

	all,					/* clear various flags */
	     fail_sw,
	     gate = "0"b;

	call level$get (ringno);			/* get validation level */

     end setup;
%page;
check_count:					/* check input arguments - count of acl entries */
     proc;					/* and pointer to input structure */

	if cnt < 0 then go to arg_err;		/* count must be non-negative */
	if cnt > 100 then go to arg_err;		/* limit of 100 in this primitive */
	if aclp = null then go to arg_err;		/* trouble if pointer is null */

     end check_count;
%page;
clear_code:					/* clear error codes in user structure before doing anything */
     proc;

	do i = 1 to cnt;

	     in_aclp = addr (aclp -> acla (i));
	     in_aclp -> input_acl.reterr = "0"b;

	end;

     end clear_code;
%page;
get_entry_ptr:					/* procedure called when manipulating acls - get pointer to entry */
     proc;					/* lock dir - copy items from entry - define items for lower level primitives */

	if entryname = "" then do;			/* trying to get obsolete cacl */
	     code = error_table_$obsolete_function;
	     go to finale;
	end;

/* get pointer to entry and lock parent */

	if function = list then call dc_find$obj_status_read (dirname, entryname, 1, ep, code);
	else call dc_find$obj_access_write (dirname, entryname, 1, FS_OBJ_ACL_RING_MOD, ep, code);

	dp = ptr (ep, 0);				/* get directory pointer before checking status code */

	if code ^= 0 then go to ret;			/* non-zero codes do not lock the directory */

	dirsw = ep -> entry.dirsw;			/* copy directory flag */

	acl_start_ptr = addr (ep -> entry.acl_frp);	/* lower level acl primitives want to know where acl starts */

/* check that validation level is <= write bracket of segment */

	if function ^= list then
	     if dirsw then do;
						/* if a directory look at extended ring brackets */
		if ringno > bin (ep -> entry.ex_ring_brackets (1), 3) then go to bracket_error;
	     end;

	     else do;
						/* if a segment look at actual ring bracket */
		if ringno > bin (ep -> entry.ring_brackets (1), 3) then go to bracket_error;
	     end;

     end get_entry_ptr;
%page;
get_names:					/* break input userids into 3 part access names */
     proc;					/* and store in intermediate storage */

	do i = 1 to cnt;

	     p = addr (acl (i));
	     in_aclp = addr (aclp -> acla (i));

	     call acc_name_$elements (in_aclp, p, p -> temp_acl.status);

	end;

     end get_names;
%page;
update_and_unlock:					/* reflect change to ACL */
     proc;

	call setfaults$if_active ((ep -> entry.uid), (ep -> entry.pvid), (ep -> entry.vtocx), "1"b);

	dir.modify = "0"b;
	call sum$dirmod (dp);			/* turn on file modified switch of the directory */

	call dc_find$finished (dp, "1"b);		/* unlock and unuse */

     end update_and_unlock;
%page;
change_acl:					/* set dtem if user not transparent */
						/* set dtbm in kste */
     proc;					/* turn on modify switch in directory */

	dir.modify = pds$processid;

	call change_dtem (ep);

     end change_acl;
%page;
fill_in_temp:					/* fill in intermediate structure before locking directory */
     proc;					/* essentially copying arguments */

	do i = 1 to cnt;

	     p = addr (acl (i));
	     in_aclp = addr (aclp -> acla (i));
						/* store userid as 3 part access name */
	     call acc_name_$elements (in_aclp, p, p -> temp_acl.status);

/* copy input mode as is + strip off old trap bit */
	     p -> temp_acl.mode = substr (in_aclp -> input_acl.mode, 2);
	     p -> temp_acl.ex_mode = "0"b;		/* clear extended mode */

/* copy input ring brackets */
	     p -> temp_acl.rb1 = fixed (in_aclp -> input_acl.rb1, 6);
	     p -> temp_acl.rb2 = fixed (in_aclp -> input_acl.rb2, 6);
	     p -> temp_acl.rb3 = fixed (in_aclp -> input_acl.rb3, 6);

	end;

     end fill_in_temp;
%page;
delete_acl:					/* procedure to delete entire ACL */
     proc;
						/* call lower level procedure to do work */
	call acl_$del_acl ((entry.acle_count), entry.uid, acl_start_ptr);

/* update counts */
	dp -> dir.acle_total = dp -> dir.acle_total - ep -> entry.acle_count;
	ep -> entry.acle_count = 0;
     end delete_acl;
%page;
list_acl: proc;					/* list entire ACL */

	do i = 1 to 100;

	     p = addr (acl (i));
						/* get the i th ACL */
	     call acl_$list_entry ((entry.acle_count), entry.uid, acl_start_ptr, p, i, p -> temp_acl.status);

	     if p -> temp_acl.status ^= 0 then
		if p -> temp_acl.status = error_table_$argerr then do;
						/* have reached the end of the ACL list */

		     cnt = i - 1;			/* store the number of entries in the list */
		     count = ep -> entry.acle_count;

/* check the validity of the entry ACL count count */
		     if count ^= cnt then signal bad_dir_;
		     return;

		end;

	end;

	cnt = 100;				/* there are more than 100 entries in list */
	code = error_table_$argerr;			/* return first 100 entries + status code */

     end list_acl;
%page;
add_to_acl:					/* add entries to ACL */
     proc;

	count = 0;				/* zero count of new ACL entries */

	do i = 1 to cnt;

	     p = addr (acl (i));
	     if p -> temp_acl.status = 0 then do;	/* skip over items which previously produced errors */

/* add one entry to ACL */
		call acl_$add_entry ((entry.acle_count), entry.uid, acl_start_ptr,
		     p, add_sw, p -> temp_acl.status);

		if add_sw then do;			/* if atually added, update counts */
		     ep -> entry.acle_count = ep -> entry.acle_count + 1;
		     dp -> dir.acle_total = dp -> dir.acle_total + 1;
		end;

	     end;

	end;

     end add_to_acl;
%page;
delete_from_acl:					/* remove selected ACL entries */
     proc;

	count = 0;				/* zero count of entries deleted */

	do i = 1 to cnt;

	     p = addr (acl (i));
	     if p -> temp_acl.status = 0 then do;	/* ignore requests with previous errors */

/* delete the ACL entry */
		call acl_$del_entry ((entry.acle_count), entry.uid, acl_start_ptr, p, p -> temp_acl.status);

		if p -> temp_acl.status = 0 then count = count + 1;
						/* increment count of deletions if successful */
	     end;

	end;

	if count > 0 then do;			/* if any deletions took place, update counts */

	     ep -> entry.acle_count = ep -> entry.acle_count - count;
	     dp -> dir.acle_total = dp -> dir.acle_total - count;

	end;

     end delete_from_acl;
%page;
list_acl_entries:					/* list selected ACL entries */
     proc;

	do i = 1 to cnt;

	     p = addr (acl (i));
	     if p -> temp_acl.status = 0 then do;	/* if no previous error, */

/* find ACL entry in list */
		call acc_list_$match ((entry.acle_count), entry.uid, acl_start_ptr,
		     p, aclep, offset, p -> temp_acl.status);

		if p -> temp_acl.status = 0 then do;	/* if input access name on list */

/* copy mode + extended mode into intermediate store */
		     p -> temp_acl.mode = aclep -> acl_entry.mode;
		     p -> temp_acl.ex_mode = aclep -> acl_entry.mode;

		end;

	     end;

	end;

     end list_acl_entries;
%page;
get_rb: proc;					/* obtain ring brackets from branch */

	if dirsw then do;				/* directory ACL */

	     ring (1) = ep -> entry.ex_ring_brackets (1);
	     ring (2),
		ring (3) = ep -> entry.ex_ring_brackets (2);

	end;

	else do;					/* segment ACL */

	     ring (1) = ep -> entry.ring_brackets (1);
	     ring (2) = ep -> entry.ring_brackets (2);
	     ring (3) = ep -> entry.ring_brackets (3);

	end;

     end get_rb;
%page;
check_modes:					/* perform check on input directory modes for ACLs */
     proc;					/* map old REWA modes to new SMA modes - setup intermediate structure modes */

	do i = 1 to cnt;

	     p = addr (acl (i));

/* convert REWA mode to new SMA directory modes */
	     p -> temp_acl.ex_mode = substr (p -> temp_acl.mode, 1, 1) || substr (p -> temp_acl.mode, 3, 2);

	     p -> temp_acl.mode = RW_ACCESS;		/* rw mode for directory ACLs */

/* do not allow specification of M without S */
	     if (p -> temp_acl.ex_mode & "11"b) = "01"b then do;

		p -> temp_acl.status = error_table_$invalid_mode;
		if function = add_one then go to unlock;/* stop for add1 entry */

	     end;

	end;

     end check_modes;
%page;
check_rb:						/* check input ring brackets of segments for legality + consistency */
     proc;					/* check projects of gate segments */

	if ringno > 1 then				/* perform special checks if creating a gate segment by ACL replacement */
	     if ring (2) ^= ring (3) then		/* or if adding ACL entries to a gate segment */
		gate = "1"b;			/* from rings greater than the administrative ring */

	do i = 1 to cnt;

	     p = addr (acl (i));

	     p -> temp_acl.mode = p -> temp_acl.mode & "1110"b; /* strip off old append bit for segment ACLs */

/* ring must be less than 8 and non-negative */
	     if p -> temp_acl.rb1 > 7 then go to input_rb_error;
	     if p -> temp_acl.rb1 < 0 then go to input_rb_error;
	     if p -> temp_acl.rb2 > 7 then go to input_rb_error;
	     if p -> temp_acl.rb2 < 0 then go to input_rb_error;
	     if p -> temp_acl.rb3 > 7 then go to input_rb_error;
	     if p -> temp_acl.rb3 < 0 then go to input_rb_error;

/* ring brackets must be internally consistent */
	     if ringno > p -> temp_acl.rb1 then go to input_rb_error;
	     if p -> temp_acl.rb1 > p -> temp_acl.rb2 then go to input_rb_error;
	     if p -> temp_acl.rb2 > p -> temp_acl.rb3 then do;
input_rb_error:	p -> temp_acl.status = error_table_$bad_ring_brackets;
		fail_sw = "1"b;			/* abort after checking remainder of input ACLs */
		go to skip_rb_check;		/* and skip remainder of checking */
	     end;

	     if gate then				/* if manipulating a gate segment */
						/* check that user is adding/replacing his project or service project */
		if p -> temp_acl.project ^= pds$access_name.project then
		     if p -> temp_acl.project ^= "SysDaemon" then do;
			p -> temp_acl.status = error_table_$invalid_project_for_gate;
			fail_sw = "1"b;		/* stop after checking rest of input */
			go to skip_rb_check;
		     end;

	     do j = 1 to 3;				/* if no errors thus far */

/* check input rb against rb of existing segment (adding) */
/* or check all input rb against rb of last input rb (replacing) */
		if p -> x.rb (j) ^= fixed (ring (j), 3) then go to input_rb_error;

	     end;
skip_rb_check:
	end;

	if fail_sw then go to unlock;			/* if serious error, abort */

     end check_rb;
%page;
copy_acl:						/* format ACL for entry points which list */
     proc;					/* and copy from temporary storage into user's area */

	if all then do;				/* if listing entire ACL */

/* allocate in area provided by user */
	     call alloc_ (size (input_acl) * cnt, uap, aclp);
	     if aclp = null then go to alloc_err;
	     a_aclp = aclp;
	     a_aclct = cnt;

	end;

	do i = 1 to cnt;

	     p = addr (acl (i));			/* get ptr to intermediate entry */

/* omit requests which generated errors */
	     if p -> temp_acl.status = 0 then do;

		in_aclp = addr (aclp -> acla (i));	/* get ptr to output entry */

/* construct userid - use varying character string for efficiency */
		access_id = rtrim (p -> temp_acl.person);
		access_id = access_id || ".";
		access_id = access_id || rtrim (p -> temp_acl.project);
		access_id = access_id || ".";
		access_id = access_id || p -> temp_acl.tag;
		in_aclp -> input_acl.userid = access_id;

/* format directory mode - convert from SMA to REWA */
		if dirsw then in_aclp -> input_acl.mode =
			"0"b || substr (p -> temp_acl.ex_mode, 1, 1) || "1"b || substr (p -> temp_acl.ex_mode, 2, 2);

/* return segment ACL modes - add old trap and append bits */
		else in_aclp -> input_acl.mode = "0"b || substr (p -> temp_acl.mode, 1, 4);

/* return ring brackets */
		in_aclp -> input_acl.rb1 = (3)"0"b || ring (1);
		in_aclp -> input_acl.rb2 = (3)"0"b || ring (2);
		in_aclp -> input_acl.rb3 = (3)"0"b || ring (3);

		in_aclp -> input_acl.reterr = "0"b;	/* clear code */

	     end;

	end;

     end copy_acl;

/* format: off */
%page; %include access_mode_values;
%page; %include dc_find_dcls;
%page; %include dir_acl;
%page; %include dir_entry;
%page; %include dir_header;
%page; %include fs_obj_access_codes;
     end acl;
