/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */

/* format: style4 */

/* other_process_info - find out things about another process, typically
   by snooping in its pds */

/* 83-05-09 coded	E. N. Kittlitz */
/* 83-12-05 modified to lock AST while peeking at other guy's PDS */

other_process_info: proc;

dcl  a_code fixed bin (35);
dcl  a_processid bit (36) aligned;
dcl  a_privs bit (36) aligned;

dcl  abs_seg_ptr ptr;
dcl  pds_sdw bit (72) aligned;
dcl  pds_sdw_ptr ptr;
dcl  processid bit (36) aligned;

dcl  1 process_auth aligned like aim_template;

dcl  error_table_$process_unknown fixed bin (35) ext static;
dcl  initializer_abs_seg$ fixed bin ext static;
dcl  sst$ fixed bin ext static;

dcl  1 pds$access_authorization aligned like aim_template ext static;

dcl  get_ptrs_$given_astep entry (ptr) returns (bit (72) aligned);
dcl  lock$lock_ast entry;
dcl  lock$unlock_ast entry;
dcl  privileged_mode_ut$swap_sdw entry (ptr, ptr);
dcl  tc_util$get_aptep entry (bit (36) aligned, bit (1) aligned) returns (ptr);

dcl  (addr, null, ptr, rel) builtin;

	return;
%page;

get_privileges: entry (a_processid, a_privs, a_code);

	processid = a_processid;
	aptep = tc_util$get_aptep (processid, "1"b);
	if aptep = null then go to foo_process;
	abs_seg_ptr = addr (initializer_abs_seg$);
	pds_sdw_ptr = addr (pds_sdw);

	call lock$lock_ast;				/* AST LOCKED */

	pds_sdw = get_ptrs_$given_astep (ptr (addr (sst$), aptep -> apte.pds));
	call privileged_mode_ut$swap_sdw (abs_seg_ptr, pds_sdw_ptr);
	process_auth = ptr (abs_seg_ptr, rel (addr (pds$access_authorization))) -> aim_template;

	call lock$unlock_ast;			/* AST UNLOCKED */

	pds_sdw = ""b;
	call privileged_mode_ut$swap_sdw (abs_seg_ptr, pds_sdw_ptr);
	if apte.processid ^= processid then		/* something changed behind our backs */
	     go to foo_process;
	a_privs = unspec (addr (process_auth) -> aim_template.privileges);
	a_code = 0;
	return;

foo_process: a_code = error_table_$process_unknown;
	a_privs = ""b;
	return;

%page; %include aim_template;
%page; %include apte;

     end other_process_info;
