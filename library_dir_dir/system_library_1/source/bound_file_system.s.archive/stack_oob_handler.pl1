/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/* format: style2 */

stack_oob_handler:
     procedure (mcptr);

/* This procedure is called by the fim when an out_of_bounds fault
   has occurred on the stack.  It either extends the stack by  48K
   and returns to the fim  to signal storage or it terminates the process. */
/* coded by M. Weaver 5/29/74 */
/* re-coded by Mike Grady 8/79 to improve algorithim */
/* re-re-coded by Benson I. Margulies 1/82 to further improve algorithm */

/* Automatic */

	dcl     mcptr		 ptr;
	dcl     max_lng		 fixed bin (19);
	dcl     ca		 fixed bin (19);
	dcl     code		 fixed bin (35);
	dcl     e_code		 fixed bin (35);
	dcl     extend		 bit (1) aligned;
	dcl     extend_to		 fixed bin (19);
	dcl     signal_storage	 bit (1) aligned;
	dcl     signal_oob		 bit (1) aligned;

/* Constants */

	dcl     INCREMENT		 fixed bin int static init (49152) options (constant);
						/* 48K */

/* Externals */

	dcl     sys_info$max_seg_size	 ext fixed bin (19);
	dcl     error_table_$stack_overflow
				 fixed bin (35) ext;
	dcl     error_table_$oob_stack fixed bin (35) ext;
	dcl     error_table_$oob_stack_ref
				 fixed bin (35) ext;

/* Builtins */

	dcl     (addr, binary, bit, min, pointer, rel)
				 builtin;

/* Entries */

	dcl     status_$get_max_length_ptr
				 entry (ptr, fixed bin (19), fixed bin (35));
	dcl     set$max_length_ptr	 entry (ptr, fixed bin (19), fixed bin (35));
	dcl     terminate_proc	 entry (fixed bin (35));
	dcl     boundfault		 entry (ptr);

%page;
%include stack_header;
%page;
%include mc;
%page;
%include static_handlers;


	mcp = mcptr;
	sb = pointer (mc.prs (6), 0);			/* get ptr to stack at time of fault */
	call status_$get_max_length_ptr (sb, max_lng, code);
						/* get current max length  of stack */
	if code ^= 0
	then /* can't imagine this would ever happen */
	     call term_proc;

	e_code = 0;				/* code will be reset if signalling proves appropriate */

	scup = addr (mc.scu (0));			/* get addr of SCU data */
	ca = bin (scu.ca, 18);			/* pull out computed address */
	signal_storage = "0"b;
	signal_oob = "0"b;
	extend = "0"b;

/* If the reference is beyond the end of the pl1 stack, then */
/* extending is unneccessary. If, by coincidence, the end_ptr */
/* is also beyond the end, we will take another fault when the error */
/* handlers push, and then entend. The 64 words is slop for programs */
/* that authentically stash data off of the end. */


	if ca < max_lng
	then do;
		call boundfault (mcptr);		/* ordinary aste problem */
		e_code = mcptr -> mc.errcode;		/* preserve any code from boundfault */
		if e_code ^= 0
		then signal_oob = "1"b;
	     end;

	else if ca > (binrel (stack_header.stack_end_ptr) + 64)
						/* past the end */
	then do;
		signal_oob = "1"b;			/* no need to extend */
		e_code = error_table_$oob_stack_ref;
	     end;

	else if ca > (240 * 1024)			/* leave space for pl1 snap and all that */
	then do;
		signal_storage = "1"b;
		extend = "1"b;
		e_code = error_table_$stack_overflow;
		extend_to = sys_info$max_seg_size;	/* go for it */
	     end;

	else do;					/* extend silently, the max length is just < stack_end, and there is plenty of space */
						/** code stays zero */
		extend = "1"b;
		extend_to = binrel (stack_header.stack_end_ptr) + 64;
	     end;

/* Now do the extension if it was mandated. */


	if extend & (extend_to > (max_lng - 1))		/* needed */
	then do;
		if max_lng = sys_info$max_seg_size	/* see if we have extended all the way already */
		then call term_proc;		/* noplace to go */

		extend_to = min (extend_to, sys_info$max_seg_size);

		do while (max_lng <= extend_to);	/* move upto desired size */
		     max_lng = max_lng + INCREMENT;
		end;

		if max_lng > (240 * 1024)
		then do;				/* equivalent to storage condition case */
			signal_storage = "1"b;
			e_code = error_table_$stack_overflow;
			max_lng = sys_info$max_seg_size;
		     end;

		call set$max_length_ptr (sb, max_lng, code);
						/* extend the stack */
		if code ^= 0
		then call term_proc;

/* If we extended the stack, then we may need a bigger aste. So we might */
/* as well call boundfault to do that, instead of taking another fault. */

		call boundfault (mcptr);
		if mcptr -> mc.errcode ^= 0
		then do;
			signal_oob = "1"b;
			e_code = mcptr -> mc.errcode;
		     end;
	     end;

/* if mc.errcode is zero, the fim will restart the fault. So for the */
/* silent extension, it will be zero. */

	mc.errcode = e_code;
	if signal_oob
	then do;
		mc.fim_temp.resignal = "1"b;
		mc.fim_temp.fcode = bit (out_of_bounds_sct_index, 17);
	     end;
	else if signal_storage
	then do;
		mc.fim_temp.resignal = "1"b;
		mc.fim_temp.fcode = bit (storage_sct_index, 17);
	     end;

	return;

term_proc:
     procedure;

	call terminate_proc (error_table_$oob_stack);	/* terminate the process */

     end term_proc;

binrel:
     procedure (ptr_to_rel) returns (fixed bin (18) unsigned);

	dcl     ptr_to_rel		 pointer;

	return (binary (rel (ptr_to_rel), 18));
     end binrel;

     end stack_oob_handler;
