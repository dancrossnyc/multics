/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(85-07-01,CLJones), approve(86-08-05,MCR7458),
     audit(86-06-30,EJSharpe), install(86-08-19,MR12.0-1120):
     Made damaged and dnzp switch setting respect ring brackets.
  2) change(88-03-14,Lippard), approve(88-05-02,MCR7881),
     audit(88-06-09,Fawcett), install(88-08-02,MR12.2-1074):
     Added audit_flag_path, for setting entry audit switch
     (to cause generation of audit messages for all accesses to the
     object.
                                                   END HISTORY COMMENTS */


/* format: style4 */
set:
     proc;

/* Modified October 1984, Keith Loepere, for auditing info;
also to not allow the setting of bc for upgraded dirs. */
/* Modified June 1984, Keith Loepere, to use the new dc_find. */
/* Modified February 1984, Lindsey Spratt, changed the dm_gino check to be against the write bracket instead of the read bracket. */
/* Modified August 1983, E. N. Kittlitz, setfaults$if_active pvid, vtocx args */
/* Modified March 1983, E. N. Kittlitz, never set dtem back, delete tpd */
/* Modified February 1983, E. N. Kittlitz, 256K max length. */
/* Modified 30 July, 1981, W. Olin Sibert, to change the rules for damaged switch setting */
/* Modified 800409 by PG to add change_bc entries for WOS */
/* Modified 800314 by PG to add entries to set dnzp switch */
/* Modified 07/18/79 by Steve Webber to disallow setting bit count on directories given a pointer */
/* Modified by D.Vinograd 6/76 to add entry to set volume dump control switches */
/* Modified 05/31/76 by R. Bratt to call find_$finished when done */
/* Modified 04/20/76 by R. Bratt to check mountedness of LV */
/* Modified by R. Bratt for setting branch tpd */
/* Modified for NSS 4/75 by THVV: remove actind, use vtoc/aste */
/* Modified by Kobziar 9/74 to call appropriate entry in access_mode */
/* Modified by E. Stone to add entries to change the entry point bound - Aug 1974 */
/* Modified on 12-4-73 by Kobziar to not check for append perm. to set bc */

/* parameters */

dcl  a_audit_flag bit (1) aligned parameter;
dcl  a_auth char (*) parameter;
dcl  a_bitct fixed bin (24) parameter;
dcl  1 a_btimes aligned like based_btimes;
dcl  a_chasesw fixed bin (1) parameter;
dcl  a_code fixed bin (35) parameter;
dcl  a_copy fixed bin (1) parameter;
dcl  a_damaged_sw bit (1) parameter;
dcl  a_date bit (36) parameter;
dcl  a_datep ptr parameter;
dcl  a_delta_bc fixed bin (24) parameter;
dcl  a_dirname char (*) parameter;
dcl  a_dtime fixed bin (52) parameter;			/* time dumped */
dcl  a_ename char (*) parameter;
dcl  a_entry_bound fixed bin (14) parameter;
dcl  a_max_length fixed bin (19) parameter;
dcl  a_new_bc fixed bin (24) parameter;
dcl  a_ncd fixed bin parameter;
dcl  a_nid fixed bin parameter;
dcl  a_old_bc fixed bin (24) parameter;
dcl  a_safety_sw bit (1) parameter;
dcl  a_segptr ptr parameter;
dcl  a_setp ptr parameter;
dcl  a_synchronized_sw bit (1) aligned parameter;

/* based */

dcl  1 a_reload_set_info aligned based like reload_set_info;
dcl  1 based_time based aligned,
       2 dtem bit (36),
       2 dtd bit (36),
       2 dtu bit (36),
       2 dtm bit (36);

dcl  1 based_btimes based aligned,			/* times from backup */
       2 dtem fixed bin (52),
       2 dtd fixed bin (52),
       2 dtu fixed bin (52),
       2 dtm fixed bin (52);

/* automatic */

dcl  1 access_name aligned,				/* 3 part access name - used for author and bc_author */
       2 person char (32),
       2 project char (32),
       2 tag char (1);
dcl  audit_flag bit (1) aligned;
dcl  auth char (32) aligned;
dcl  authp ptr;
dcl  bitct fixed bin (24);
dcl  bs bit (1) aligned;
dcl  1 btimes aligned like based_btimes;
dcl  chasesw fixed bin (1);
dcl  check_rb bit (1) aligned;
dcl  code fixed bin (35);
dcl  copy fixed bin (1);
dcl  damaged_sw bit (1) aligned;
dcl  date bit (36);
dcl  delta_bc fixed bin (24);
dcl  detailed_operation fixed bin (18) uns;
dcl  dirname char (168);
dcl  dirsw bit (1) aligned;
dcl  dtm bit (36) aligned;
dcl  dtu bit (36) aligned;
dcl  ename char (32);
dcl  entry_bound fixed bin (14);
dcl  entry_type fixed bin;
dcl  find_was_called bit (1) aligned;
dcl  max_length fixed bin (19);
dcl  mxl fixed bin (9);
dcl  ncd fixed bin;
dcl  new_bc fixed bin (24);
dcl  nid fixed bin;
dcl  old_bc fixed bin (24);
dcl  1 pc_msk like vtoce_pc_sws aligned;
dcl  1 pc_val like vtoce_pc_sws aligned;
dcl  priv_ml bit (1) aligned init ("0"b);
dcl  pvid bit (36) aligned;
dcl  safety_sw bit (1) aligned;
dcl  segptr ptr;
dcl  setp ptr;
dcl  setting_for_reloader fixed bin init (0);
dcl  synchronized_sw bit (1) aligned;
dcl  1 time aligned like based_time;
dcl  uid bit (36) aligned;
dcl  val fixed bin (17);
dcl  vtocx fixed bin;

/* constants */

dcl  Normal_entry fixed bin init (1) static options (constant);
dcl  Set_bc_entry fixed bin init (2) static options (constant);
dcl  Change_bc_entry fixed bin init (3) static options (constant);
dcl  Dsw_entry fixed bin init (4) static options (constant);
dcl  Set_bc_entry_priv fixed bin init (5) static options (constant);
dcl  Normal_priv_entry fixed bin init (6) static options (constant);

/* external static */

dcl  error_table_$ai_restricted external fixed bin (35);
dcl  error_table_$argerr external fixed bin (35);
dcl  error_table_$bad_ring_brackets external fixed bin (35);
dcl  error_table_$dirseg external fixed bin (35);
dcl  error_table_$link external fixed bin (35);
dcl  error_table_$not_a_branch external fixed bin (35);
dcl  error_table_$not_dm_ring external fixed bin (35);
dcl  pds$access_name fixed bin (35) external;
dcl  1 pds$transparent ext aligned,
       2 m bit (1) unaligned,
       2 u bit (1) unaligned;
dcl  sys_info$data_management_ringno fixed bin external;
dcl  sys_info$seg_size_256K fixed bin (19) external;

/* entries */

dcl  acc_name_$delete entry (ptr);
dcl  acc_name_$elements entry (ptr, ptr, fixed bin (35));
dcl  acc_name_$encode entry (ptr, ptr, fixed bin (35));
dcl  change_dtem entry (ptr);
dcl  level$get returns (fixed bin (17));
dcl  lock$dir_unlock entry (pointer);
dcl  mountedp entry (bit (36) aligned) returns (fixed bin (35));
dcl  setfaults$if_active entry (bit (36) aligned, bit (36) aligned, fixed bin, bit (1) aligned);
dcl  sum$dirmod entry (pointer);
dcl  vtoc_attributes$reloading entry (bit (36) aligned, bit (36) aligned, fixed bin, bit (36) aligned, bit (36) aligned, fixed bin (9), fixed bin (35));
dcl  vtoc_attributes$set_dates entry (bit (36) aligned, bit (36) aligned, fixed bin, bit (36) aligned, bit (36) aligned, fixed bin (35));
dcl  vtoc_attributes$set_dump_switches entry (bit (36) aligned, bit (36) aligned, fixed bin, fixed bin, fixed bin, fixed bin (35));
dcl  vtoc_attributes$set_max_lth entry (bit (36) aligned, bit (36) aligned, fixed bin, fixed bin (9), bit (1) aligned, fixed bin (35));
dcl  vtoc_attributes$set_pc_switches entry (bit (36) aligned, bit (36) aligned, fixed bin, bit (36) aligned, bit (36) aligned, fixed bin (35));

/* builtins */

dcl  (addr, binary, bit, clock, fixed, divide, length, ptr, string, substr, unspec) builtin;
%page;
/* SET$COPYSW changes the setting of the copy switch in the branch effectively pointed to by
   "entry" in the directory with path name "dirname" to "copy" if caller has
   write permit in the directory. */

copysw:
     entry (a_dirname, a_ename, a_copy, a_code);

	detailed_operation = FS_OBJ_COPY_SW_MOD;
	copy = a_copy;				/* must copy input arguments into stack before locking */
	chasesw = 1;
	check_rb = "1"b;
	entry_type = Normal_entry;
	call find_entry;
	entry.copysw = bit (copy, 1);
	go to finish;
%page;
/* SET$AUTH changes the auth variable in the entry "ename" in the directory pointed to by
   the pathname "dirname" . The entry is "chased" if the chase switch is on. The caller must
   have write permit on the directory. */

auth:
     entry (a_dirname, a_ename, a_chasesw, a_auth, a_code);

	detailed_operation = FS_OBJ_AUTHOR_MOD;
	chasesw = a_chasesw;
	auth = a_auth;
	check_rb = "0"b;
	entry_type = Normal_entry;
	call find_entry;
	authp = addr (entry.author);			/* Get pointer to author. */

set_auth:
	call acc_name_$elements (addr (auth), addr (access_name), code);
	if code ^= 0
	then go to unlock;				/* Break up author into 3 part access name. */
	call acc_name_$delete (authp);		/* Delete previous author if any */
	call acc_name_$encode (authp, addr (access_name), code);
	go to unlock;
%page;
/* SET$BC changes the setting of the bit count item in the branch effectively pointed
   to by "entry" in the directory with path name "dirname" to "bitct"
   if caller has execute permit in the directory and write
   or append permit in the branch. */

/* SET$BC_SEG is the same as set$bc except that it takes a pointer to a segment rather than
   "dirname" and "entry" as input arguments.  */

bc_seg_priv:
     entry (a_segptr, a_bitct, a_code);			/* privileged bitcount setting - no access check */

	entry_type = Set_bc_entry_priv;
	go to bc_set_ptr_join;

bc_seg:
     entry (a_segptr, a_bitct, a_code);

	entry_type = Set_bc_entry;

bc_set_ptr_join:
	detailed_operation = FS_OBJ_BC_MOD;
	bitct = a_bitct;				/* copy input args */
	check_rb = "0"b;
	call get_entry_ptr;
	if dirsw
	then					/* disallow setting bc on directory given pointer */
	     goto dirseg;

	go to set_bc;				/* Join common code. */

bc:
     entry (a_dirname, a_ename, a_bitct, a_code);

	detailed_operation = FS_OBJ_BC_MOD;
	bitct = a_bitct;				/* must copy input arguments into stack before locking */
	chasesw = 1;
	check_rb = "0"b;
	entry_type = Set_bc_entry;
	call find_entry;

set_bc:
	if entry.dirsw then
	     if binary (entry.ring_brackets (1), 3) > 1 then
		if entry.multiple_class then		/* implies upgraded */
		     go to ai_error;

	entry.bc = bitct;				/* actually set the bit count in the entry */

	call acc_name_$delete (addr (entry.bc_author));	/* set the bc author */
	call acc_name_$encode (addr (entry.bc_author), addr (pds$access_name), code);

	go to finish;
%page;
/* SET$CHANGE_BC_PATH adds a specified amount to the bitcount, and returns the
   old and new bitcount to the caller. It can be used by multiple processes
   to synchronize their writing to an unstructured segment without any other
   locking protocol. */

change_bc_path:
     entry (a_dirname, a_ename, a_delta_bc, a_old_bc, a_new_bc, a_code);

	detailed_operation = FS_OBJ_BC_MOD;
	delta_bc = a_delta_bc;
	chasesw = 1;
	check_rb = "0"b;
	entry_type = Change_bc_entry;
	call find_entry;
	go to change_bc;

/* SET$CHANGE_BC_PTR is the same as set$change_bc_path except that it takes
   a pointer to a segment. */

change_bc_ptr:
     entry (a_segptr, a_delta_bc, a_old_bc, a_new_bc, a_code);

	detailed_operation = FS_OBJ_BC_MOD;
	delta_bc = a_delta_bc;
	check_rb = "0"b;
	entry_type = Change_bc_entry;
	call get_entry_ptr;
	if dirsw
	then go to dirseg;

change_bc:
	old_bc = entry.bc;
	new_bc, bitct = old_bc + delta_bc;
	go to set_bc;
%page;
/* SET$DTD changes the setting of the date time dumped item in the branch effectively pointed to
   by "entry" in the directory with path name "dirname" to "date"
   if caller has write permit in the directory . */

/* SET$BACKUP_DUMP_TIME is the same as set$dtd except that it takes a fixed bin (52)
   time instead of a bit (36) file system time.  */

dtd:
     entry (a_dirname, a_ename, a_date, a_code);

	date = a_date;				/* must copy input argument into stack before locking */
	entry_type = Normal_entry;
	go to set_dtd;				/* Join common code. */

backup_dump_time:
     entry (a_dirname, a_ename, a_dtime, a_code);

	date = substr (bit (a_dtime, 52), 1, length (date)); /* copy and convert input argument */
	entry_type = Normal_priv_entry;

set_dtd:
	detailed_operation = FS_OBJ_DT_DUMPED_MOD;
	chasesw = 0;
	check_rb = "0"b;
	call find_entry;
	if bs
	then entry.dtd = date;
	else link.dtd = date;
	go to unlock;
%page;
/* SET$DATES changes the setting of the date time used, date time modified and date time entry modified
   items in the branch effectively pointed to by "entry" in the directory with path name "dirname" to
   "date" if caller has write permit in the directory. */

dates:
     entry (a_dirname, a_ename, a_datep, a_code);

	detailed_operation = FS_OBJ_DATES_MOD;
	time = a_datep -> based_time;			/* must copy input into stack before locking */
	chasesw = 0;
	check_rb = "0"b;
	entry_type = Normal_entry;
	call find_entry;
	if bs then do;
	     uid = entry.uid;			/* Extract unique ID */
	     pvid = entry.pvid;
	     vtocx = entry.vtocx;
	     dtu = time.dtu;
	     dtm = time.dtm;
	     if dirsw
	     then code = 0;				/* assume RLV is always mounted */
	     else code = mountedp (dir.sons_lvid);	/* only if mounted! */
	     if code = 0
	     then call vtoc_attributes$set_dates (uid, pvid, vtocx, dtu, dtm, code);
	     if code ^= 0
	     then go to unlock;
	     entry.dtem = time.dtem;
	     entry.dtd = time.dtd;
	end;
	else do;
	     link.dtem = time.dtem;
	     link.dtd = time.dtd;
	end;
	go to unlock;
%page;
/* SET$DUMP_SWITCHES is used to set/reset the dump control switches  in the vtoce of
   a branch. The two switches, no_complete_dump and no incremental dump are set on
   if the input is positive, off if negative and not set if zero. */

volume_dump_switches:
     entry (a_dirname, a_ename, a_nid, a_ncd, a_code);

	detailed_operation = FS_OBJ_VOL_DUMP_SW_MOD;
	chasesw = 1;
	check_rb = "1"b;
	ncd = a_ncd;
	nid = a_nid;
	entry_type = Normal_entry;
	call find_entry;
	if bs then do;
	     uid = entry.uid;
	     pvid = entry.pvid;
	     vtocx = entry.vtocx;
	     if dirsw
	     then code = error_table_$dirseg;
	     else code = mountedp (dir.sons_lvid);
	     if code = 0
	     then call vtoc_attributes$set_dump_switches (uid, pvid, vtocx, nid, ncd, code);
	end;
	else code = error_table_$link;
	goto unlock;
%page;
/* SET$BACKUP_TIMES is used by the reloading process to set the following
   items in a directory branch: date-time entry modified,
   date-time dumped, date-time used, date-time modified.  */

backup_times:
     entry (a_dirname, a_ename, a_btimes, a_code);

	detailed_operation = FS_OBJ_BACKUP_TIMES_MOD;
	btimes = a_btimes;				/* copy structure argument */
	chasesw = 0;
	check_rb = "0"b;
	entry_type = Normal_entry;
	call find_entry;
	if bs then do;
	     uid = entry.uid;			/* Extract unique ID */
	     pvid = entry.pvid;
	     vtocx = entry.vtocx;
	     dtu = substr (bit (btimes.dtu, 52), 1, length (dtu));
	     dtm = substr (bit (btimes.dtm, 52), 1, length (dtm));
	     if dirsw
	     then code = 0;				/* assume RLV always mounted */
	     else code = mountedp (dir.sons_lvid);	/* only if mounted! */
	     if code = 0
	     then call vtoc_attributes$set_dates (uid, pvid, vtocx, dtu, dtm, code);
	     if code ^= 0
	     then go to unlock;
	     entry.dtem = substr (bit (btimes.dtem, 52), 1, length (entry.dtem));
	     entry.dtd = substr (bit (btimes.dtd, 52), 1, length (entry.dtd));
	end;
	else do;
	     link.dtem = substr (bit (btimes.dtem, 52), 1, length (link.dtem));
	     link.dtd = substr (bit (btimes.dtd, 36), 1, length (link.dtd));
	end;
	go to unlock;
%page;
/* SET$SAFETY_SWITCH_PTR changes the safety switch in the directory entry corresponding
   to the pointer "segptr".  */

/* SET$_SAFETY_SWITCH_PATH is identical to set$safety_switch pointer except that
   the "ename" and "dirname" are specified instead of a segment pointer.  */

safety_sw_ptr:
     entry (a_segptr, a_safety_sw, a_code);

	detailed_operation = FS_OBJ_SAFETY_SW_MOD;
	safety_sw = a_safety_sw;
	check_rb = "1"b;
	entry_type = Normal_entry;
	call get_entry_ptr;
	go to set_safety;				/* Join common code. */

safety_sw_path:
     entry (a_dirname, a_ename, a_safety_sw, a_code);

	detailed_operation = FS_OBJ_SAFETY_SW_MOD;
	safety_sw = a_safety_sw;
	chasesw = 1;
	check_rb = "1"b;
	entry_type = Normal_entry;
	call find_entry;

set_safety:
	entry.safety_sw = safety_sw;
	go to finish;
%page;
/* SET$AUDIT_FLAG_PATH changes the audit switch in the directory entry for
   the specified path. */

audit_flag_path:
     entry (a_dirname, a_ename, a_audit_flag, a_code);

	detailed_operation = FS_OBJ_AUDIT_FLAG_MOD;
	audit_flag = a_audit_flag;
	chasesw = 1;
	check_rb = "1"b;
	entry_type = Normal_entry;
	call find_entry;

set_audit_flag:
	entry.audit_flag = audit_flag;
	go to finish;
%page;
/* SET$DAMAGED_SW_PTR changes the damaged switch in the directory entry corresponding
   to the pointer "segptr".  */

/* SET$DAMAGED_SW_PATH is identical to set$damaged_sw_ptr except that
   the "ename" and "dirname" are specified instead of a segment pointer.  */

damaged_sw_ptr:
     entry (a_segptr, a_damaged_sw, a_code);

	detailed_operation = FS_OBJ_DAMAGED_SW_MOD;
	damaged_sw = a_damaged_sw;
	check_rb = "1"b;
	entry_type = Dsw_entry;
	call get_entry_ptr;
	go to set_damaged;				/* Join common code. */

damaged_sw_path:
     entry (a_dirname, a_ename, a_damaged_sw, a_code);

	detailed_operation = FS_OBJ_DAMAGED_SW_MOD;
	damaged_sw = a_damaged_sw;
	chasesw = 1;
	check_rb = "1"b;
	entry_type = Dsw_entry;
	call find_entry;

set_damaged:
	unspec (pc_val) = ""b;
	unspec (pc_msk) = ""b;
	pc_val.damaged = damaged_sw;
	pc_msk.damaged = "1"b;
	uid = entry.uid;
	pvid = entry.pvid;
	vtocx = entry.vtocx;
	if dirsw
	then code = 0;
	else code = mountedp (dir.sons_lvid);
	if code = 0
	then call vtoc_attributes$set_pc_switches (uid, pvid, vtocx, string (pc_val), string (pc_msk), code);
	if code ^= 0
	then go to unlock;
	go to finish;
%page;
/* SET$DNZP_SW_PTR changes the dnzp switch in the directory entry corresponding
   to the pointer "segptr".  */

/* SET$DNZP_SW_PATH is identical to set$dnzp_sw_ptr except that
   the "ename" and "dirname" are specified instead of a segment pointer.  */

/* parameters */

declare  a_dnzp_sw bit (1) aligned parameter;

/* automatic */

declare  dnzp_sw bit (1) aligned;

/* program */

dnzp_sw_ptr:
     entry (a_segptr, a_dnzp_sw, a_code);

	detailed_operation = FS_OBJ_DNZP_MOD;
	dnzp_sw = a_dnzp_sw;
	check_rb = "1"b;
	entry_type = Normal_entry;
	call get_entry_ptr;
	go to set_dnzp;				/* Join common code. */

dnzp_sw_path:
     entry (a_dirname, a_ename, a_dnzp_sw, a_code);

	detailed_operation = FS_OBJ_DNZP_MOD;
	dnzp_sw = a_dnzp_sw;
	chasesw = 1;
	check_rb = "1"b;
	entry_type = Normal_entry;
	call find_entry;

set_dnzp:
	if dirsw
	then go to dirseg;				/* Oh no you don't */

	unspec (pc_val) = ""b;
	unspec (pc_msk) = ""b;
	pc_val.dnzp = dnzp_sw;
	pc_msk.dnzp = "1"b;
	uid = entry.uid;
	pvid = entry.pvid;
	vtocx = entry.vtocx;
	if dirsw
	then code = 0;
	else code = mountedp (dir.sons_lvid);
	if code = 0
	then call vtoc_attributes$set_pc_switches (uid, pvid, vtocx, string (pc_val), string (pc_msk), code);
	if code ^= 0
	then go to unlock;
	go to finish;
%page;
/* SET$SYNCHRONIZED_SW changes the synchronized switch in the VTOCE
   corresponding to the path supplied. This is used by Data Management
   to order writes done by Page Control. */

synchronized_sw:
     entry (a_dirname, a_ename, a_synchronized_sw, a_code);

	detailed_operation = FS_OBJ_SYNC_SW_MOD;
	synchronized_sw = a_synchronized_sw;
	chasesw = 0;
	check_rb = "1"b;
	entry_type = Normal_entry;
	call find_entry;

	if dirsw
	then goto dirseg;

	if fixed (entry.ring_brackets (1), 3) > sys_info$data_management_ringno
	then do;
	     code = error_table_$not_dm_ring;
	     goto unlock;
	end;

	unspec (pc_val) = ""b;
	unspec (pc_msk) = ""b;
	pc_val.synchronized = synchronized_sw;
	pc_msk.synchronized = "1"b;
	uid = entry.uid;
	pvid = entry.pvid;
	vtocx = entry.vtocx;
	code = mountedp (dir.sons_lvid);
	if code = 0
	then call vtoc_attributes$set_pc_switches (uid, pvid, vtocx, string (pc_val), string (pc_msk), code);
	if code ^= 0 then goto unlock;
	goto finish;
%page;
/* SET$MAX_LENGTH_PTR resets the maximum length of the segment pointed to
   by "segptr" to the "max_length" specified in words.  */

/* SET$MAX_LENGTH_PATH is identical to set$max_length_ptr except that the
   "ename" and "dirname" of the segment are sepcified instead of the "segptr".  */

max_length_ptr:
     entry (a_segptr, a_max_length, a_code);

	detailed_operation = FS_OBJ_MAX_LEN_MOD;
	max_length = a_max_length;
	check_rb = "1"b;
	entry_type = Normal_entry;
	call get_entry_ptr;
	go to set_max_length;

max_length_priv:
     entry (a_dirname, a_ename, a_max_length, a_code);

	priv_ml = "1"b;
	check_rb = "0"b;
	goto cp_ml_args;

max_length_path:
     entry (a_dirname, a_ename, a_max_length, a_code);
	check_rb = "1"b;

cp_ml_args:
	detailed_operation = FS_OBJ_MAX_LEN_MOD;
	max_length = a_max_length;
	chasesw = 1;
	entry_type = Normal_entry;
	call find_entry;

set_max_length:
	if dirsw
	then go to dirseg;
	if max_length < 0
	then go to argerr;
	if max_length > sys_info$seg_size_256K
	then go to argerr;
	uid = entry.uid;				/* Extract unique ID */
	pvid = entry.pvid;
	vtocx = entry.vtocx;
	mxl = divide (max_length + 1023, 1024, 9, 0);	/* Correct units */
	code = mountedp (dir.sons_lvid);
	if code = 0
	then call vtoc_attributes$set_max_lth (uid, pvid, vtocx, mxl, priv_ml, code);
	if code ^= 0
	then go to unlock;
	go to finish;
%page;
/* SET$BC_AUTH_PATH is used by the reloader to set the bitcount author of the
   directory entry corresponding to the segment indicated by "ename" and
   "dirname". */

bc_auth_path:
     entry (a_dirname, a_ename, a_auth, a_code);

	detailed_operation = FS_OBJ_BC_AUTHOR_MOD;
	auth = a_auth;
	chasesw = 1;
	check_rb = "0"b;
	entry_type = Normal_entry;
	call find_entry;				/* no AIM check since privileged entry */

	authp = addr (entry.bc_author);		/* Get pointer to bit count author. */
	go to set_auth;				/* Join common author-setting code. */
%page;
/* SET$ENTRY_BOUND_PTR sets the entry point bound switch and changes the
   entry point bound of the segment pointed to by "segptr" to the "entry_bound"
   specified in words if "entry_bound" is greater than 0.
   If "entry_bound" equals 0, then the entry point bound switch is reset and
   the entry point bound is changed to 0. */

/* SET$ENTRY_BOUND_PATH is identical to set$entry_point_ptr except that
   then "dirname" and "ename" of the segment are specified instead of the "segptr". */

entry_bound_ptr:
     entry (a_segptr, a_entry_bound, a_code);

	detailed_operation = FS_OBJ_ENTRY_BOUND_MOD;
	entry_bound = a_entry_bound;
	check_rb = "1"b;
	entry_type = Normal_entry;
	call get_entry_ptr;
	go to set_call_limiter;

entry_bound_path:
     entry (a_dirname, a_ename, a_entry_bound, a_code);

	detailed_operation = FS_OBJ_ENTRY_BOUND_MOD;
	entry_bound = a_entry_bound;
	chasesw = 1;
	check_rb = "1"b;
	entry_type = Normal_entry;
	call find_entry;

set_call_limiter:
	if dirsw
	then go to dirseg;
	if entry_bound < 0
	then go to argerr;				/* Limited to 14 bits in sdw */
	if entry_bound > 16383
	then go to argerr;
	uid = entry.uid;
	pvid = entry.pvid;
	vtocx = entry.vtocx;
	call setfaults$if_active (uid, pvid, vtocx, "0"b);
	if entry_bound = 0 then do;
	     entry.entrypt_sw = "0"b;
	     entry.entrypt_bound = "0"b;
	end;
	else do;
	     entry.entrypt_sw = "1"b;
	     entry.entrypt_bound = bit (entry_bound, 14);
	end;
	go to finish;
%page;
/* SET$SET_FOR_RELOADER  changes a number of variables in the entry "ename" in
   the directory pointed to by the pathname "dirname".
   It also makes one call to set appropriate items in the VTOC.
   The entry is not chased.    The caller must have write permit
   on the directory.  It is intended that that this entry in set
   provide the sum of the functionality of a number of other entries:
   that is the usual checks are made and status codes are returned.
   Because this entry can only be reached through a priviliged gate,
   the max_length is not checked against the current length ---
   this is not only consistent with the privileged set_max_length entry,
   but also with the fact that the dumper will never write more
   meaningfull data than "max_length" to tape */

set_for_reloader:
     entry (a_dirname, a_ename, a_setp, a_code);

	detailed_operation = FS_OBJ_FOR_RELOADER_MOD;
	setp = a_setp;
	reload_set_info = setp -> a_reload_set_info;	/* copy input before locking */
	if reload_set_info.version ^= reload_set_version_2 then do;
						/* called with bad structure */
	     a_code = error_table_$argerr;
	     return;
	end;
	setting_for_reloader = 1;			/* remember to return info */
	chasesw = 0;
	check_rb = "0"b;
	entry_type = Normal_priv_entry;
	call find_entry;
	uid = entry.uid;				/* Extract unique ID */
	pvid = entry.pvid;
	vtocx = entry.vtocx;

	if ^bs then do;
	     code = error_table_$not_a_branch;
	     go to unlock;
	end;

	if reload_set_info.should_set.safety_sw
	then					/* set the safety_sw? */
	     entry.safety_sw = reload_set_info.safety_sw;

	if reload_set_info.should_set.audit_flag
	then					/* set the audit_flag? */
	     entry.audit_flag = reload_set_info.audit_flag;



	if reload_set_info.should_set.author then do;	/* author? */
	     authp = addr (entry.author);
	     call acc_name_$elements (addr (reload_set_info.author), addr (access_name), reload_set_info.author_code);
	     if reload_set_info.author_code = 0 then do;	/* if no errs proceed */
		call acc_name_$delete (authp);
		call acc_name_$encode (authp, addr (access_name), reload_set_info.author_code);
	     end;
	end;

	if reload_set_info.should_set.bc_author then do;	/* no AIM check since privileged entry */
	     authp = addr (entry.bc_author);
	     call acc_name_$elements (addr (reload_set_info.bc_author), addr (access_name),
		reload_set_info.bc_author_code);
	     if reload_set_info.bc_author_code = 0 then do;
		call acc_name_$delete (authp);
		call acc_name_$encode (authp, addr (access_name), reload_set_info.bc_author_code);
	     end;
	end;

/* Now for the tricky part */
/* go to vtoc to set dtm,dtu,mxl */
/* if go to vtoc for mxl,  need not do setfaults here */
/* even if setting entry_bound */

	if reload_set_info.should_set.dtu
	then dtu = reload_set_info.dtu;		/* dtu = 0 means va$ wont set */
	else dtu = "0"b;

	if reload_set_info.should_set.dtm
	then dtm = reload_set_info.dtm;		/* dtm = 0 means va$ wont set */
	else dtm = "0"b;

	mxl = -1;					/* mxl = -1 means va$ wont set, dont setfaults */
	if reload_set_info.should_set.max_length then do;
	     if dirsw
	     then reload_set_info.max_length_code = error_table_$dirseg;
						/* make some checks */
	     else if reload_set_info.max_length < 0
	     then reload_set_info.max_length_code = error_table_$argerr;
	     else mxl = divide (reload_set_info.max_length + 1023, 1024, 9, 0);
	end;

	if dtm | dtu | mxl >= 0 then do;		/* something to set in vtoc */
	     if dirsw
	     then code = 0;				/* RLV always mounted */
	     else code = mountedp (dir.sons_lvid);	/* check mountedness */
	     if code = 0
	     then call vtoc_attributes$reloading (uid, pvid, vtocx, dtu, dtm, mxl, code);
						/*  NOTE: for  now we are punting the no mounted case */
	end;					/* vtoc_attr has done setfaults if mxl >= 0 */

	if reload_set_info.should_set.entry_bound then do;/* see about epb */
	     if dirsw
	     then reload_set_info.entry_bound_code = error_table_$dirseg;
	     else if reload_set_info.entry_bound < 0
	     then reload_set_info.entry_bound_code = error_table_$argerr;
	     else if reload_set_info.entry_bound > 16383
	     then reload_set_info.entry_bound_code = error_table_$argerr;
	     else do;				/* we are willing to set it */
		if mxl < 0 | code ^= 0
		then				/* do setfault now, if not already done */
		     call setfaults$if_active (uid, pvid, vtocx, "0"b);
		if reload_set_info.entry_bound = 0 then do;
						/* clear relevant fields */
		     entry.entrypt_sw = "0"b;
		     entry.entrypt_bound = "0"b;
		end;
		else do;
		     entry.entrypt_sw = "1"b;
		     entry.entrypt_bound = bit (reload_set_info.entry_bound, 14);
		end;
	     end;
	end;

	if reload_set_info.should_set.dtem
	then					/* date time entry modified? */
	     entry.dtem = reload_set_info.dtem;

	if reload_set_info.should_set.dtd
	then					/* date time dumped? */
	     entry.dtd = reload_set_info.dtd;

	go to finish;
%page;
/* Update dtem, unlock entry, notify segment control that directory containing
   entry has been modified and return */

finish:
	if pds$transparent.m = "0"b
	then if entry.dtem ^= bit (binary (clock (), 52), 36)
	     then call change_dtem (ep);

unlock:
	call sum$dirmod (dp);
	if find_was_called
	then call dc_find$finished (dp, "1"b);
	else call lock$dir_unlock (dp);

	if setting_for_reloader ^= 0
	then setp -> a_reload_set_info = reload_set_info;
	else if entry_type = Change_bc_entry then do;
	     a_old_bc = old_bc;
	     a_new_bc = new_bc;
	end;

finale:
	a_code = code;
	return;

/* Error Handling */

ai_error: 
	code = error_table_$ai_restricted;
	go to unlock;

argerr:
	code = error_table_$argerr;
	go to unlock;

dirseg:
	code = error_table_$dirseg;
	go to unlock;

bracket_error:
	code = error_table_$bad_ring_brackets;
	goto unlock;
%page;
/* internal procedures */

find_entry:
     proc;					/* get a pointer to the entry and lock the directory */

	code = 0;
	dirname = a_dirname;
	ename = a_ename;
	if entry_type = Normal_entry then
	     call dc_find$obj_status_write (dirname, ename, chasesw, detailed_operation, ep, code);
	else if entry_type = Set_bc_entry then
	     call dc_find$obj_bc_write (dirname, ename, bitct, ep, code);
	else if entry_type = Change_bc_entry then
	     call dc_find$obj_bc_delta_write (dirname, ename, delta_bc, ep, code);
	else if entry_type = Dsw_entry then		/* allow no m on parent */
	     call dc_find$obj_attributes_write (dirname, ename, chasesw, detailed_operation, ep, code);
	else if entry_type = Set_bc_entry_priv | entry_type = Normal_priv_entry then
	     call dc_find$obj_status_write_priv (dirname, ename, chasesw, detailed_operation, ep, code);
	dp = ptr (ep, 0);
	if code ^= 0
	then go to finale;
	find_was_called = "1"b;
	go to check;

get_entry_ptr:
     entry;					/* get a pointer to the entry and lock the directory */

	code = 0;
	segptr = a_segptr;
	find_was_called = "0"b;
	if entry_type = Normal_entry then
	     call dc_find$obj_status_write_ptr (segptr, detailed_operation, ep, code);
	else if entry_type = Set_bc_entry then
	     call dc_find$obj_bc_write_ptr (segptr, bitct, ep, code);
	else if entry_type = Change_bc_entry then
	     call dc_find$obj_bc_delta_write_ptr (segptr, delta_bc, ep, code);
	else if entry_type = Dsw_entry then		/* allow no m on parent */
	     call dc_find$obj_attributes_write_ptr (segptr, detailed_operation, ep, code);
	else if entry_type = Set_bc_entry_priv | entry_type = Normal_priv_entry then
	     call dc_find$obj_status_write_priv_ptr (segptr, detailed_operation, ep, code);
	dp = ptr (ep, 0);
	if code ^= 0
	then go to finale;

check:
	bs = entry.bs;
	dirsw = entry.dirsw;
	if check_rb then do;			/* also need to check ring brackets */
	     val = level$get ();
	     if dirsw then do;
		if val > fixed (entry.ex_ring_brackets (1), 3)
		then go to bracket_error;
	     end;
	     else do;
		if val > fixed (entry.ring_brackets (1), 3)
		then go to bracket_error;
	     end;
	end;

     end find_entry;
%page;
/* include files */

%page; %include dc_find_dcls;
%page; %include dir_entry;
%page; %include dir_header;
%page; %include dir_link;
%page; %include fs_obj_access_codes;
%page; %include reload_set_info;
%page; %include vtoce_pc_sws;
     end set;
