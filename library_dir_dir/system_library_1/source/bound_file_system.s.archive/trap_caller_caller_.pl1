/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


trap_caller_caller_: proc (mcptr, header_ptr, def_ptr, type_ptr, link_ptr, ecode_ptr, code);

/* This procedure is called by the linker (link_snap) when a trap-before-link or
   trap-at-first-reference is to be satisfied.  It creates a frame in the stack
   of the faulting ring, putting machine conditions there (with the help of the signaller),
   sets up an argument list in that frame, and "calls" trap caller in the
   outer ring.  The pointer to trap_caller's entry point is obtained via
   link_snap$make_ptr so that its linkage section will be properly set up in the outer ring.

   The "call" will wipe out the stack we are running on, and the return from trap_caller
   will actually go to the return point in restart_fault so that the machine conditions
   can be restarted.

   The entry "for_linker" in signaller is used to perform some of the necessary "secure" features
   of the restart such as saving a copy of the machine conditions in ring 0 and setting up a
   cleanup handler to discard these saved machine conditions if they are not to be restarted.

   Initially coded by M Weaver June 1973
   Revised:
   April 75	by S. Webber to add "secure restart" features.
*/

declare (mcptr, header_ptr, def_ptr, type_ptr, link_ptr, entry_ptr, old_sp, ecode_ptr) ptr;

declare  i fixed bin;

declare  link_snap$make_ptr entry (ptr, char (*), char (*), ptr, fixed bin (35));
declare  signaller$for_linker entry (ptr, ptr);
declare  level$get entry () returns (fixed bin);

declare  code fixed bin (35);
declare  level fixed bin (18);
declare (frame_add, temp) fixed bin (19);
declare  pds$signal_data (48) fixed bin ext;
declare  m_c (48) fixed bin based;
declare  based_fixed based fixed bin;
declare  error_table_$no_trap_proc ext fixed bin (35);

declare  label_var label;
declare 1 label_temp aligned based,			/* label template */
        2 (locp, stackp) ptr;

declare (addr, addrel, baseno, baseptr, bin, bit, divide, null, ptr, rel) builtin;

declare 1 trap_return_frame aligned based (sp),		/* template for frame we will build */
        2 frame_header (40) fixed bin,
        2 pad (8) fixed bin,
        2 mach_cond (48) fixed bin,			/* put in same place that signaller would */
        2 arg (7) ptr,				/* are the arguments:
						   mcptr, header_ptr, def_ptr, type_ptr, link_ptr;
						   mcptr must stay where it is because
						   signaller may need it for illegal_return */
        2 arglist,
	3 arg_count bit (18) unaligned,
	3 code bit (18) unaligned,
	3 desc_count bit (18) unaligned,
	3 pad bit (18) unaligned,
	3 arg_ptrs (7) ptr,
        2 pad1 (2) fixed bin,
        2 on_unit (16) fixed bin;

/* The variables mach_cond and on_unit in the above structure must start at 48 and 128 words
   from the beginning of the structure respectively because the signaller uses these regions
   of the stack frame set up by trap_caller_caller_. */
/*  */
%include stack_header;
%include its;
%include stack_frame;
%include mc;
/*  */
/* get ptr to trap caller proc in outer ring */
/* validation level has already been set correctly */

begin:	call link_snap$make_ptr (null, "link_trap_caller_", "link_trap_caller_", entry_ptr, code);
	if code ^= 0 then do;			/* have linker return linkage_error */
	     code = error_table_$no_trap_proc;
	     return;
	end;

	if mcptr ^= null then old_sp = mcptr -> mc.prs (6); /* get ptr to proper stack */
	else do;					/* no mc; get old_sp by tracing threads */
	     label_var = begin;			/* use big kludge to get sp */
	     sp = addr (label_var) -> label_temp.stackp;	/* labels have stack ptrs */

/* get frame of caller of link_snap */
/* look for last sp in stack of validation level because */
/* external reference is being processed for ring of validation level */

	     level = level$get ();			/* get validation level */
	     i = 0;				/* initialize */
	     if level = 0 then old_sp = sp;		/* we are the last frame */
	     else do;
		do while (baseno (sp -> stack_frame.prev_sp) = baseno (sp));
		     sp = sp -> stack_frame.prev_sp;	/* try previous one */
		     i = i + 1;
		     if i = 2000 then do;		/* don't loop in ring 0 */
			code = error_table_$no_trap_proc;
			return;
		     end;
		end;
		if bin (addr (sp -> stack_frame.prev_sp) -> its.ringno, 3) ^= level then do;

/* there are stacks in rings between r0 and target ring which
   we are not prepared to handle, so we will abort with a
   linkage_error and let the condition mechanism clean up */

		     code = error_table_$no_trap_proc;
		     return;
		end;
		old_sp = sp -> stack_frame.prev_sp;	/* we found the most recent frame in target ring */
	     end;
	end;


	sb = ptr (old_sp, 0);			/* get ptr to base of new stack */
	temp = bin (rel (sb -> stack_header.stack_end_ptr), 18); /* find starting offset */
	if mcptr ^= null then do;			/* get ring number from mc */
	     frame_add = temp + stack_frame_min_length;
	     old_sp -> stack_frame_flags.signaller = "1"b; /* set appropiate flags so will know to truncate */
	     old_sp -> stack_frame_flags.old_signaller = "1"b;
	end;
	else do;					/* were called; frame not inconsistent */
	     frame_add = temp;			/* start where old left off */
						/* no mc, so don't worry about mod 16 */
	end;

/* add new frame to outer ring stack */

	sp,					/* get ptr to new stack frame */
	     old_sp -> stack_frame.next_sp = ptr (sb, frame_add);

/* thread in new frame */

	sp -> stack_frame.next_sp,
	     sb -> stack_header.stack_end_ptr = addrel (sp, size (trap_return_frame));
	sp -> stack_frame.prev_sp = old_sp;

	sp -> stack_frame_flags.link_trap = "1"b;	/* previous frame was faulted out of */
	sp -> stack_frame.translator_id = bit (bin (10, 18), 18); /* trap_caller_caller_ frame */

/* fill in arguments */

	if mcptr = null then sp -> trap_return_frame.arg (2) = null; /* no mc */
	else do;					/* arg must point to copied mc */
	     old_sp -> stack_frame_flags.old_signaller = "1"b; /* must be after next_sp is updated */
	     pds$signal_data = mcptr -> m_c;
	     sp -> trap_return_frame.arg (2) = addr (sp -> trap_return_frame.mach_cond);
	end;
	sp -> trap_return_frame.arg (1) = null;
	sp -> trap_return_frame.arg (3) = header_ptr;
	sp -> trap_return_frame.arg (4) = def_ptr;
	sp -> trap_return_frame.arg (5) = type_ptr;
	sp -> trap_return_frame.arg (6) = link_ptr;
	sp -> trap_return_frame.arg (7) = ecode_ptr;	/* points to ec in linker caller's frame */

/* fill in argument list */

	sp -> trap_return_frame.arglist.arg_count = bit (bin (12, 18), 18);
	sp -> trap_return_frame.arglist.code = bit (bin (4, 18), 18);
	sp -> trap_return_frame.arglist.desc_count,
	     sp -> trap_return_frame.arglist.pad = "0"b;


	do i = 1 to 7;
	     sp -> trap_return_frame.arglist.arg_ptrs (i) =
		addr (sp -> trap_return_frame.arg (i));
	end;

/* put arglist ptr where next proc can find it */

	sp -> stack_frame.operator_and_lp_ptr = addr (trap_return_frame.arglist);

	call signaller$for_linker (sp, entry_ptr);

	return;					/* this will never be executed */
     end;
