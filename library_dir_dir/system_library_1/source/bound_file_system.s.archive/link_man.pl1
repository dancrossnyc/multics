/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
     audit(86-08-01,Schroth), install(86-11-20,MR12.0-1222):	
     initialize the heap_header_ptr to null in get_initial_linkage.
  2) change(86-10-01,Fawcett), approve(86-10-01,MCR7473),
     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
     Changed to eliminate stack_header.old_lot_ptr, this obsolete ptr was
     replaced by stack_header.cpm_data_ptr for Control Point Management.
                                                   END HISTORY COMMENTS */

/* format: style4,delnl,insnl,tree,ifthenstmt,indnoniterend */
link_man$other_linkage:
     proc (atxp, alp, astp, asymbp, acode);

/* LINK_MAN
   "

   This program is the utility program used by the Multics ring 0 linker.


   Last modified (date and reason):

   9/20/74 by S.Webber Complete rewrite from an earlier version as part
   of combining stacks, lots, and clr's.

   rewritten 8/76 by M. Weaver to turn linkage regions into areas.
   modified 4/77 by M. Weaver to add entry combine_linkage for lot_fault_handler_
   modified 5/77 by M. Weaver to process perprocess_static bit
   modified 9/77 by M. Weaver to change assign_linkage to use assign_linkage_ptr
   modified 2/78 by M. Weaver to grow lot at correct boundary
   Modified April 1981 by J. Bongiovanni to fix recursive grow_lot bug
   Modified May, 1981, Charlie Hornig, to convert for ADP SDW formats
   Modified August 1981, E. N. Kittlitz per S. Harris (UNCA), check lot size in getlp
   Modified 83-12-08 BIM to flush support for .link segments, once and for all.
   Modified April 10, 1984 by M. Weaver to check ring arg in $combine_linkage
   Modified 84-07-02 BIM to check ring arg in grow_lot.
   Modified 85-01-22 Keith Loepere to increment usage count for segment in
   target ring when its linkage is combined.
*/

/* Parameters */

dcl  acode fixed bin (35);
dcl  alp ptr;
dcl  aring fixed bin;
dcl  astp ptr;
dcl  asymbp ptr;
dcl  atxp ptr;

/* Automatic */

dcl  1 ainfo aligned like area_info;
dcl  cl fixed bin (14);
dcl  cl_sw bit (1) aligned;
dcl  code fixed bin (35);
dcl  count fixed bin (24);
dcl  dummy bit (36) aligned;
dcl  lp ptr;
dcl  nwords fixed bin (18);
dcl  1 oi like object_info;
dcl  ring fixed bin;
dcl  rings (3) fixed bin;
dcl  1 sdwi aligned like sdw_info;
dcl  sp ptr;
dcl  stack_end fixed bin (18);
dcl  stp ptr;
dcl  target fixed bin;
dcl  target_sp ptr;
dcl  tcode fixed bin (35);
dcl  txp ptr;
dcl  type fixed bin (2);

/* Entries */

dcl  define_area_ entry (ptr, fixed bin (35));
dcl  level$get entry returns (fixed bin);
dcl  makestack entry (fixed bin);
dcl  object_info_$brief entry (ptr, fixed bin (24), ptr, fixed bin (35));
dcl  sdw_util_$dissect entry (ptr, ptr);
dcl  segno_usage$increment_other_ring entry (fixed bin, fixed bin, fixed bin (35));
dcl  status_$mins entry (ptr, fixed bin (2), fixed bin (24), fixed bin (35));
dcl  terminate_proc entry (fixed bin (35));

/* External */

dcl  dseg$ (0:1) fixed bin (71) ext;
dcl  error_table_$bad_segment fixed bin (35) ext;
dcl  error_table_$badringno fixed bin (35) ext;
dcl  error_table_$invalidsegno fixed bin (35) ext;
dcl  error_table_$no_linkage fixed bin (35) ext;
dcl  error_table_$noalloc fixed bin (35) ext;
dcl  error_table_$nrmkst fixed bin (35) ext;
dcl  error_table_$termination_requested fixed bin (35) ext;
dcl  pds$clr_stack_size (0:7) fixed bin (18) ext;
dcl  pds$lot_stack_size (0:7) fixed bin (17) ext;
dcl  pds$max_lot_size (0:7) fixed bin (17) ext;
dcl  pds$stacks (0:7) ptr ext;
dcl  sys_info$max_seg_size ext fixed bin (19);

/* Builtins */

dcl  (addr, addrel, baseno, bin, bit, divide, max, mod, null, ptr, size, segno, string, substr, wordno) builtin;

/* Conditions */

dcl  area condition;
dcl  cleanup condition;

/* Based */

dcl  based_area area (100) based;
dcl  based_array (nwords) bit (36) aligned based;
dcl  based_ptr ptr based;
dcl  based_word fixed bin based;
dcl  linkage_section (oi.llng) bit (36) aligned based;
dcl  static_section (oi.ilng) bit (36) aligned based;
%page;
/* EXECUTION OF LINK_MAN$OTHER_LINKAGE BEGINS HERE */

	cl_sw = "0"b;
	acode = 0;
	txp = atxp;
	alp = null;
	astp = null;
	asymbp = null;

	ring = level$get ();

/* Now get the target ring of the linkage fault, i.e. the ring in which
   the snapped link will be relevant */

/* The following  sequence of code (through the reference to sdw.r3) should be
   replaced by a call to fs_get$brackets when that entry becomes efficient */

retry:
	code = txp -> based_word;			/* touch the segment to make SDW valid */
	call sdw_util_$dissect (addr (dseg$ (segno (txp))), addr (sdwi));
	if sdwi.faulted
	then					/* try again */
	     goto retry;

	cl = sdwi.gate_entry_bound + 1;		/* get offset of linkage pointer in ring zero gates */
	rings (1) = bin (sdwi.r1, 3);			/* copy ring numbers */
	rings (2) = bin (sdwi.r2, 3);
	rings (3) = bin (sdwi.r3, 3);

	if ring < rings (1)
	then target = rings (1);			/* calculate target ring ... */
	else if ring > rings (2)
	     then target = rings (2);
	     else target = ring;

	if target = 0 then do;			/* snapping a link to hardcore gate */
	     alp = ptr (txp, cl + mod (cl, 2)) -> based_ptr;
						/* fetch linkage pointer from text */
	     return;				/* that's all for hardcore gates */
	     end;

	target_sp = get_sp (target);

	lp = null;
	call getlp (target_sp, txp, lp, stp);
	if lp ^= null then do;			/* yes, just return */
ret:
	     alp = lp;
	     astp = stp;
	     asymbp = lp -> header.symbol_ptr;
	     addr (alp) -> its_unsigned.ringno = target;	/* So we can link to gates */
	     return;
	     end;
cl_join:
	call status_$mins (txp, type, count, code);	/* get bit count for object info call */
	if code ^= 0 then goto error;

	code = error_table_$bad_segment;
	oi.version_number = object_info_version_2;	/* set version number of structure */
	oi.symbp = null;				/* in case object_info_ doesn't fill it in */
	if count > 0 then call object_info_$brief (txp, count, addr (oi), code);
	if code = error_table_$bad_segment then do;	/* all format flags are turned off */
	     acode = error_table_$no_linkage;
	     return;
	     end;
	else if code ^= 0 then do;
error:
		acode = code;
		return;
		end;

	tcode = 1;

	if oi.linkp -> its.its_mod = "100011"b
	then lp, stp = oi.linkp;			/* .link segment; pre-initialized when created */

	else do;
	     on area call terminate_proc (error_table_$noalloc);
	     allocate linkage_section in (target_sp -> stack_header.clr_ptr -> based_area) set (lp);
	     dummy = lp -> linkage_section (oi.llng);	/* avoid bounds fault during EIS copy */
	     lp -> linkage_section = oi.linkp -> linkage_section;
	     lp -> header.original_linkage_ptr = oi.linkp;

	     if lp -> virgin_linkage_header.first_ref_relp
	     then lp -> virgin_linkage_header.first_ref_relp = "000000000001000000"b;
						/* replace offset with flag */

	     if oi.separate_static then do;		/* must copy static separately */
		lp -> header.stats.static_length = bit (bin (oi.ilng, 18), 18);
		allocate static_section in (target_sp -> stack_header.combined_stat_ptr -> based_area) set (stp);
		dummy = stp -> static_section (oi.ilng);/* avoid bounds fault during EIS copy */
		stp -> static_section = oi.statp -> static_section;
		end;
	     else do;				/* combined static already copied */
		lp -> header.stats.static_length =
		     bit (bin (bin (lp -> header.stats.begin_links, 18) - size (header), 18), 18);
						/* static section is between header & first link */
		stp = lp;
		end;
	     lp -> header.stats.segment_number = baseno (txp);
	     lp -> header.symbol_ptr = oi.symbp;
	     end;

	call setlp (txp, lp, stp, target);
	substr (lp -> its.pad2, 9, 1) = oi.perprocess_static;
						/* set flag in 1st word of def_ptr for run unit manager */
	if cl_sw then return;			/* no output arguments for this entry */
	goto ret;
%page;
combine_linkage:
     entry (atxp, aring, acode);

/* This entry is available through hcs_ and is intended for the lot_fault handler */

	cl_sw = "1"b;
	txp = atxp;
	target = aring;
	if target ^= level$get () then do;		/* caller must set level to correct ring */
	     acode = error_table_$badringno;
	     return;
	     end;
	target_sp = get_sp (target);
	acode = 0;
	lp = null;

	goto cl_join;
%page;
own_linkage:
     entry (atxp, alp, astp, asymbp, acode);

/* Entry to return information about a segment and its linkage which has
   been set up earlier in the process */

	acode = 0;
	txp = atxp;
	alp, astp, asymbp = null;

	ring = level$get ();
	sb = get_sp (ring);
	call getlp (sb, txp, lp, stp);
	if lp = null then do;
	     acode = error_table_$no_linkage;
	     return;
	     end;
	;
	alp = lp;
	astp = stp;
	asymbp = lp -> header.symbol_ptr;
	return;
%page;
/* SET_LP
   "
*/

set_lp:
     entry (atxp, alp);

/* This entry is obsolete. It is used by the trap-before-link stuff, however, and must be supported.
   The callers of the entry must assume that no separate static will be allocated, hence, the
   static pointer passed to setlp is the same as the linkage pointer. */

	ring = level$get ();
	call setlp (atxp, alp, alp, ring);
	return;
%page;
/* GET_LP
   "
*/

get_lp:
     entry (atxp, alp);				/* OBSOLETE */

	ring = level$get ();			/* get caller's validation level */
	sb = get_sp (ring);
	call getlp (sb, atxp, alp, (null));
	return;
%page;
/* ASSIGN_LINKAGE
   "
*/

assign_linkage:
     entry (aamount, rp, rcode);

dcl  aamount fixed bin (18);
dcl  rcode fixed bin (35);
dcl  rp ptr;

	rcode = 0;
	rp = null;

	on area go to a_l_error;

	sb = get_sp ((level$get ()));
	nwords = aamount;
	allocate based_array in (sb -> stack_header.assign_linkage_ptr -> based_area) set (rp);
						/* must go in same seg as ipc static */

	return;

a_l_error:
	rcode = error_table_$noalloc;
	return;
%page;
/* GET_INITIAL_LINKAGE
   "
*/

get_initial_linkage:
     entry (aring);

/* This entry is called only by makestack when a new ring is being created. The program makestack
   may have been called by link_man. */

	sp = pds$stacks (aring);
	stack_end = wordno (sp -> stack_header.stack_end_ptr);

/* allocate space for lot in stack */

	nwords = pds$lot_stack_size (aring);
	if nwords = 0 then nwords = 512;		/* force 512 word lot in stack */
	lotp = sp;				/* unused part of lot overlays stack header */
	sp -> stack_header.cur_lot_size = nwords;
	stack_end = max (stack_end, nwords * 2);	/* the "2"  is for isot as well as lot */
	stack_end = divide (stack_end + 15, 16, 17, 0) * 16;
						/* round up */

/* set up linkage section area */

	if pds$clr_stack_size (aring) > 0 then do;	/* initial area is in stack */
	     ainfo.size = pds$clr_stack_size (aring);
	     ainfo.areap = ptr (sp, stack_end);
	     stack_end = stack_end + ainfo.size;	/* update length of stack */
	     stack_end = divide (stack_end + 15, 16, 17, 0) * 16;
						/* round up */
	     end;
	else do;					/* clr is to go into separate seg */
	     ainfo.size = sys_info$max_seg_size;
	     ainfo.areap = null;
	     end;

	ainfo.version = area_info_version_1;
	string (ainfo.control) = "0"b;
	ainfo.control.extend = "1"b;
	ainfo.control.zero_on_free = "1"b;
	ainfo.control.system = "1"b;
	ainfo.owner = "linker";
	call define_area_ (addr (ainfo), code);
	if code ^= 0 then call terminate_proc (error_table_$termination_requested);

	sp -> stack_header.max_lot_size = pds$max_lot_size (aring);
	sp -> stack_header.stack_end_ptr = ptr (sp, stack_end);
	sp -> stack_header.stack_begin_ptr = ptr (sp, stack_end);
	sp -> stack_header.lot_ptr = lotp;
	sp -> stack_header.isot_ptr = addrel (lotp, sp -> stack_header.cur_lot_size);
	sp -> stack_header.sct_ptr = addrel (lotp, sp -> stack_header.cur_lot_size);
	sp -> stack_header.system_free_ptr, sp -> stack_header.user_free_ptr, sp -> stack_header.assign_linkage_ptr,
	     sp -> stack_header.clr_ptr, sp -> stack_header.combined_stat_ptr = ainfo.areap;
	sp -> stack_header.heap_header_ptr = null;
	sp -> stack_header.sys_link_info_ptr = null;
	return;
%page;
grow_lot:
     entry (a_ring);

/* This entry is for initiate to call if it needs to before setting a lot_fault */

dcl  a_ring fixed bin (3);

dcl  grow_lot_invalid_ring_ condition;

	ring = a_ring;
	if ring ^= level$get () then signal grow_lot_invalid_ring_;
	call make_lot (ring);
	return;
%page;
setlp:
     proc (txp, lp, stp, ring);

dcl  lp ptr;
dcl  ring fixed bin;
dcl  stp ptr;
dcl  txp ptr;

dcl  segnum fixed bin;
dcl  shp ptr;

	shp = get_sp (ring);
	segnum = segno (txp);
	if segnum >= shp -> stack_header.cur_lot_size then do;
	     if segnum > shp -> stack_header.max_lot_size then do;
		code = error_table_$invalidsegno;
		go to error;
		end;
	     call make_lot (ring);			/* new lot will be max lot size */
	     end;

	call segno_usage$increment_other_ring (segnum, ring, code);
						/* setting linkage for segment in target ring is a good
						   reason to hold segment - prevents termination of lower ring gates */

	shp -> stack_header.lot_ptr -> lot.lp (segnum) = lp;
	shp -> stack_header.isot_ptr -> isot.isp (segnum) = stp;
	if baseno (lp) = "0"b then return;		/* just zeroing slot */

/* don't disturb flags in lower half of 2nd word in linkage header */

	if lp -> its.its_mod = "100011"b
	then return;				/*  def ptr already set */
	else if lp -> its.its_mod = "0"b
	     then lp -> its_unsigned.segno = segno (txp); /* defs in text */
	     else do;				/* defs in linkage after links */
		lp -> its_unsigned.segno = segno (lp);
		lp -> its_unsigned.offset = lp -> its_unsigned.offset + wordno (lp);
		end;
	lp -> its.its_mod = "100011"b;		/* turn it into a pointer */
	return;

     end setlp;
%page;
getlp:
     proc (gsp, gtxp, glp, gstp);

dcl  (glp, gsp, gstp, gtxp) ptr;
dcl  segnum fixed bin;

	glp, gstp = null;				/* assume the worst */
	segnum = segno (gtxp);
	if segnum >= gsp -> stack_header.cur_lot_size then return;
						/* lot isn't that big in this ring */
	if baseno (gsp -> stack_header.lot_ptr -> lot.lp (segnum))
						/* non-zero lot entry? */
	then glp = gsp -> stack_header.lot_ptr -> lot.lp (segnum);
	else return;				/* no linkage for this segno */

	if baseno (gsp -> stack_header.isot_ptr -> isot.isp (segnum)) ^= "0"b
	then gstp = gsp -> stack_header.isot_ptr -> isot.isp (segnum);

	return;
     end;
%page;
make_lot:
     proc (ring);

dcl  ring fixed bin;

dcl  lotp ptr;
dcl  newisotp ptr;
dcl  newlotp ptr;
dcl  save_max_lot_size fixed bin;
dcl  sp ptr;


/* This procedure is called to make a larger LOT than the initial lot given a process.
   It assumes the stack, lot, and clr are already there and makes a new lot
   by allocating one in the current linkage region.
*/


	sp = pds$stacks (ring);
	lotp = sp -> stack_header.lot_ptr;

	if sp -> stack_header.cur_lot_size >= sp -> stack_header.max_lot_size
	then call terminate_proc (error_table_$nrmkst);

	nwords = 2 * sp -> stack_header.max_lot_size;

/* Set stack_header.max_lot_size temporarily so that we won't be called
   recursively.  Otherwise, this could happen if a segment is
   created to satisfy the allocate								*/

	save_max_lot_size = sp -> stack_header.max_lot_size;
	sp -> stack_header.max_lot_size = sp -> stack_header.cur_lot_size;
	on cleanup
	     begin;				/* in case of crawlout			*/
	     sp -> stack_header.max_lot_size = save_max_lot_size;
	end;

	allocate based_array in (sp -> stack_header.clr_ptr -> based_area) set (newlotp);

	sp -> stack_header.max_lot_size = save_max_lot_size;
	revert cleanup;

	newisotp = addrel (newlotp, sp -> stack_header.max_lot_size);
	nwords = sp -> stack_header.cur_lot_size;
	newlotp -> based_array = lotp -> based_array;
	newisotp -> based_array = sp -> stack_header.isot_ptr -> based_array;
	sp -> stack_header.cur_lot_size = sp -> stack_header.max_lot_size;

	sp -> stack_header.lot_ptr = newlotp;
	sp -> stack_header.isot_ptr = newisotp;

	return;
     end make_lot;
%page;
get_sp:
     proc (ring) returns (ptr);

/* This procedure returns a pointer to the initial stack in a ring */

dcl  ring fixed bin;

	if pds$stacks (ring) = null then call makestack (ring);

	return (pds$stacks (ring));

     end;
%page;
%include area_info;
%include its;
%include linkdcl;
%include lot;
%include object_info;
%include sdw_info;
%include stack_header;
     end;
