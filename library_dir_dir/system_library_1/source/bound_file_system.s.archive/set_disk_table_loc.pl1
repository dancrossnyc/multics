/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */

set_disk_table_loc: proc (a_segptr, a_code);

/* set_disk_table_loc: this procedure is called by system startup
   to assert the VTOC index of the disk table on the
   root physical volume.

   Bernard Greenberg, Oct. 18, 1975. 
   Modified February, 1982, J. Bongiovanni to eliminate FSDCT 
   Modified October 1984, Keith Loepere to use dc_find.
*/

/* Entries */

dcl  fsout_vol			external entry (fixed bin);
dcl  lock$dir_unlock		entry (ptr);

/* External */

dcl  error_table_$action_not_performed	fixed bin (35) external;
dcl  pvt$disk_table_uid		bit (36) aligned external;
dcl  pvt$disk_table_vtocx		fixed bin external;
dcl  pvt$root_pvtx			fixed bin external;

/* Misc */

dcl  (addr, ptr)			builtin;

/* Parameters */

dcl  a_code			fixed bin (35);
dcl  a_segptr			ptr;		/* pointer to supposed disk table */

/* Variables */

dcl  code				fixed bin (35);
dcl  segptr			ptr;
%page;
	segptr = a_segptr;				/* copy param, we are a gate. */

	pvt_arrayp = addr (pvt$array);

	call dc_find$obj_status_read_priv_ptr (segptr, ep, code);
	if code ^= 0 then do;
	     a_code = code;
	     return;
	end;

	if entry.pvid ^= pvt_array (pvt$root_pvtx).pvid then do;

	     call lock$dir_unlock (ptr (ep, 0));	/* unlock the dir */
	     a_code = error_table_$action_not_performed;	/* Must be on rpv */
	     return;
	end;

	pvt$disk_table_uid = entry.uid;		/* Set the info */
	pvt$disk_table_vtocx = entry.vtocx;
	call lock$dir_unlock (ptr (ep, 0));
	call fsout_vol (pvt$root_pvtx);		/* fsout the RPV */
	a_code = 0;
	return;
%page; %include dc_find_dcls;
%page; %include dir_entry;
%page; %include pvte;
     end;
