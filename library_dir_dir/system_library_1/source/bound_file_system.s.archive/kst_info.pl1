/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */

kst_info: proc;

/*

   Written July 7, 1976 by Richard Bratt

   Last Modified:
   8/26/76 by M. Weaver  to add high_low_seg_count entry
   11/1/84 by K. Loepere to remove hdr.

   This module contains entries to extract information from a process' KST.
   These entries may be called by hardcore gates

   --->  get_uid (segptr, uid, code)

   This entry translates a segment number (represented as a segptr) into the unique identifier
   of the object to which the segment number is bound.

*/


get_uid: entry (a_segptr, a_uid, a_code);

/* Parameters */

dcl  a_code			fixed bin (35, 0) parameter;
dcl  a_hcsc			fixed bin (17) parameter;
dcl  a_high_seg			fixed bin (17) parameter;
dcl  a_segptr			ptr parameter;
dcl  a_uid			bit (36) aligned parameter;

/* Variables */

dcl  code				fixed bin (35, 0);
dcl  segptr			ptr;

/* Entries */

dcl  get_kstep			entry (fixed bin (17), ptr, fixed bin (35));

/* Misc */

dcl  segno			builtin;
%page;
	segptr = a_segptr;
	a_uid = "0"b;
	call get_kstep (segno (segptr), kstep, code);
	if code ^= 0 then do;
	     a_code = code;
	     return;
	end;

	a_uid = kste.uid;
	a_code = 0;
	return;
%page;
high_low_seg_count: entry (a_high_seg, a_hcsc);


/* 1) high_seg	the number to add to hcsc to get the highest segment number being used.

   2) hcsc	is the lowest non-hardcore segment number.
*/

	kstp = pds$kstp;

	a_hcsc = kstp -> kst.lowseg;

	a_high_seg = kstp -> kst.highest_used_segno - kstp -> kst.lowseg;

	return;
%page; %include kst;
     end kst_info;
