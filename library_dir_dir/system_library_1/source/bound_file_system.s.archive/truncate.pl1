/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */

truncate$trfile: proc (a_dirname, a_ename, a_addrs, a_code);

/* 	Date last modified and reasons:
   11/84 by Keith Loepere for terminate_.
   7/84 by Keith Loepere to use the new dc_find.
   1/82 BIM to lock dir for write to protect truncate_vtoce from activations.
   11/2/78 by B. Greenberg for raw/effective mode problem (not checking priv_init).
   760630 by L. Scheffler to not audit truncates on copy-on-write segs
   05/31/76 by R. Bratt to call find_$finished
   04/20/76 by R.  Bratt to  check mountedness before truncate
   760309 by L. Scheffler to use info-only entries in dir_control_error
   04/28/75 by Greenberg for NSS
   10/10/74 by Kobziar to call new access_mode entry
   08/24/71 by RHG for page multi-level and to clean up the overlay for zeroing
   07/27/71 by David Vinograd
   06/13/71 by R. Gumpertz to check for negative addrs
   06/12/71 by R. Gumpertz to add zeroing of last page after addrs
   and to check fpage properly against seg length
   and to eliminate accessing of a_addrs while
   a directory is locked
 */
%page;

/* Parameters */

dcl  a_addrs			fixed bin (17) parameter;
dcl  a_code			fixed bin (35) parameter;
dcl  a_dirname			char (*) parameter;
dcl  a_ename			char (*) parameter;
dcl  a_ep				ptr parameter;
dcl  a_segptr			ptr parameter;

/* Variables */

dcl  addrs			fixed bin (17);
dcl  by_name			bit (1) aligned init ("0"b);
dcl  code				fixed bin (35);
dcl  ename			char (32);
dcl  esw				fixed bin (17);
dcl  fpage			fixed bin (17);
dcl  overlay_size			fixed bin;
dcl  parent			char (168);
dcl  segptr			ptr;
dcl  write_lock			bit (36) aligned init ((36)"1"b);

/* Based */

dcl  overlay			bit (overlay_size) based aligned; /* This is used to get at the words to be zeroed */

/* External */

dcl  error_table_$argerr		fixed bin (35) external;
dcl  error_table_$boundviol		fixed bin (35) external;
dcl  error_table_$dirseg		fixed bin (35) external;
dcl  error_table_$rqover		fixed bin (35) external;
dcl  pds$processid			bit (36) aligned ext;

/* Entries */

dcl  get_kstep			entry (fixed bin (18), ptr, fixed bin (35));
dcl  initiate			entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  lock$dir_unlock		entry (ptr);
dcl  mountedp			entry (bit (36) aligned) returns (fixed bin (35));
dcl  sum$dirmod			entry (ptr);
dcl  terminate_$noname		entry (ptr, fixed bin (35));
dcl  truncate_vtoce			entry (ptr, fixed bin, fixed bin (35));

/* Misc */

dcl  (addrel, baseno, divide, fixed, null, ptr) builtin;

dcl  out_of_bounds			condition;
%page;
	esw = 0;					/* set entry point switch */
	code = 0;
	addrs = a_addrs;				/* copy the args */
	parent = a_dirname;				/* copy directory name */
	ename = a_ename;				/* copy entry name */
	call dc_find$obj_truncate (parent, ename, ep, code); /* get pointer to branch + lock directory */
	dp = ptr (ep, 0);
	if code ^= 0 then go to finale;
	by_name = "1"b;
	go to join;				/* transfer to common code */

trseg: entry (a_segptr, a_addrs, a_code);

	esw = 1;					/* set entry point switch */
	code = 0;
	addrs = a_addrs;				/* copy the addrs given */
	segptr = ptr (a_segptr, 0);			/* copy argument */

	call get_kstep (fixed (baseno (segptr)), kstep, code);
	if code ^= 0 then go to finale;

	if kste.priv_init then call dc_find$obj_truncate_raw_ptr (segptr, ep, code); /* get pointer to branch + lock directory */
	else call dc_find$obj_truncate_ptr (segptr, ep, code); /* get pointer to branch + lock directory */
	if code ^= 0 then go to finale;
	dp = ptr (ep, 0);

join:	if ep -> entry.dirsw then do;			/* truncating directories not allowed */
	     code = error_table_$dirseg;
	     go to unlock;
	end;

	if addrs < 0 then do;			/* check for negative length specified */
	     code = error_table_$argerr;
	     go to unlock;
	end;
						/* check for length too big */

	fpage = divide (addrs + 1023, 1024, 17, 0);	/* get number of first page to be truncated */

	go to join1;

trentry: entry (a_ep);

	esw = 2;
	fpage = 0;
	ep = a_ep;
	code = 0;
	dp = ptr (ep, 0);
join1:

	code = mountedp (dir.sons_lvid);
	if code = 0
	then do;
	     dir.modify = pds$processid;		/* Mark dir inconsistent */

	     call truncate_vtoce (ep, fpage, code);	/* Truncate the vtoce/aste */

	     if code ^= 0 then if code = error_table_$rqover then code = 0; /* ignore rqo */
	end;
	if esw = 2 then return;			/* if deleting, return */


	dir.modify = "0"b;
	call sum$dirmod (dp);
	if by_name
	then call dc_find$finished (dp, "1"b);
	else call lock$dir_unlock (dp);		/* unlock the directory */

/* 	The following code zeros out the last page of the segment starting
   at addrs. This is so that truncating will be to the word, rather than
   to the page.
   */

	if code ^= 0 then go to finale;

	on condition (out_of_bounds) go to boundviol;	/* Attempt to trunc beyond current length
						   may cause oob here */
	overlay_size = (fpage * 1024 - addrs) * 36;	/* compute n bits to zero */
	if overlay_size ^= 0 then do;			/* dont bother if none to zero */
	     if esw = 0 then do;			/* if entered without ptr, we must get one */
		call initiate (parent, ename, "", 0, 1, segptr, code);
		if segptr = null then goto finale;
		code = 0;				/* forget any segknowns */
	     end;
	     addrel (segptr, addrs) -> overlay = ""b;	/* clear the words */
	     if esw = 0 then call terminate_$noname (segptr, code); /* terminate the pointer if we had to get one */
	end;

finale:	a_code = code;
	return;

unlock:	if dir.modify then dir.modify = "0"b;
	if by_name
	then call dc_find$finished (dp, "1"b);
	else call lock$dir_unlock (dp);
	go to finale;

boundviol:
	a_code = error_table_$boundviol;
	return;
%page;
%page; %include dc_find_dcls;
%page; %include dir_entry;
%page; %include dir_header;
%page; %include kst;
     end;
