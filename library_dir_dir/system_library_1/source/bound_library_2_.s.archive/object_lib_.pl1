/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(1986-05-02,Elhard), approve(1986-05-02,MCR7391),
     audit(1986-10-03,DGHowe), install(1986-11-20,MR12.0-1222):
     Written to support object multisegment files, for initiation, definition
     searches, and info extraction.
  2) change(2016-04-01,Swenson), approve(2016-04-01,MCR10011),
     audit(2016-04-02,GDixon), install(2016-04-04,MR12.6e-10011):
     Fix issue with object_lib_$initiate initiating a segment, but not
     terminating it on error return.
                                                   END HISTORY COMMENTS */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

object_lib_:
  proc;

  /*** ****************************************************************/
  /***							*/
  /***	Name:	object_lib_				*/
  /***	Function:	This is a collection of subroutines used for the	*/
  /***		manipulation of executable binaries (segments or	*/
  /***		MSFs).					*/
  /***							*/
  /*** ****************************************************************/

  /* constants */

  dcl true		bit (1) static options (constant) init ("1"b);
  dcl false		bit (1) static options (constant) init ("0"b);

  dcl fault_tag_3		bit (6) static options (constant) init ("47"b3);

  /* parameters */

  dcl A_areap		ptr parameter;
  dcl A_code		fixed bin (35) parameter;
  dcl A_comp_infop		ptr parameter;
  dcl A_count		fixed bin (24) parameter;
  dcl A_dname		char (*) parameter;
  dcl A_ename		char (*) parameter;
  dcl A_live		bit (1) parameter;
  dcl A_offsetname		char (*) parameter;
  dcl A_oi_type		char (*) parameter;
  dcl A_refname		char (*) parameter;
  dcl A_segname		char (*) parameter;
  dcl A_segp		ptr parameter;
  dcl A_targetp		ptr parameter;
  dcl A_validate		bit (1) parameter;
  dcl A_version_reqd	char (8) parameter;
  dcl A_msf_sw		bit (1) parameter;

  /* procedures */

  dcl get_definition_	entry (ptr, char (*), char (*), ptr,
			fixed bin (35));
  dcl get_system_free_area_	entry () returns (ptr);
  dcl hcs_$fs_get_path_name	entry (ptr, char (*), fixed bin, char (*),
			fixed bin (35));
  dcl hcs_$initiate_count	entry (char (*), char (*), char (*),
			fixed bin (24), fixed bin (2), ptr,
			fixed bin (35));
  dcl hcs_$status_minf	entry (char (*), char (*), fixed bin (1),
			fixed bin (2), fixed bin (24),
			fixed bin (35));
  dcl hcs_$status_mins	entry (ptr, fixed bin (2), fixed bin (24),
			fixed bin (35));
  dcl hcs_$terminate_noname	entry (ptr, fixed bin (35));
  dcl initiate_file_	entry (char (*), char (*), bit (*), ptr,
			fixed bin (24), fixed bin (35));
  dcl object_info_$brief	entry (ptr, fixed bin (24), ptr,
			fixed bin (35));
  dcl object_info_$display	entry (ptr, fixed bin (24), ptr,
			fixed bin (35));
  dcl object_info_$long	entry (ptr, fixed bin (24), ptr,
			fixed bin (35));
  dcl pathname_		entry (char (*), char (*)) returns (char (168));
  dcl term_$no_clear	entry (char (*), fixed bin (35));
  dcl term_$single_refname	entry (char (*), fixed bin (35));

  /* external */

  dcl error_table_$bad_arg	external fixed bin (35);
  dcl error_table_$bad_class_def
			external fixed bin (35);
  dcl error_table_$bad_indirect_def
			external fixed bin (35);
  dcl error_table_$dirseg	external fixed bin (35);
  dcl error_table_$inconsistent_object_msf
			external fixed bin (35);
  dcl error_table_$namedup	external fixed bin (35);
  dcl error_table_$nolinkag	external fixed bin (35);
  dcl error_table_$segknown	external fixed bin (35);
  dcl error_table_$unimplemented_version
			external fixed bin (35);

  /* based */

  dcl based_area		area based (based_areap);
  dcl based_ptr		ptr based;
  dcl 01 def		aligned like definition based (defp);
  dcl 01 dh		aligned like definition_header based (dhp);
  dcl 01 mm		aligned like msf_map based (mmp);

  /* automatic */

  dcl based_areap		ptr automatic;
  dcl bc			fixed bin (24) automatic;
  dcl bit_count		fixed bin (24) automatic;
  dcl c			fixed bin automatic;
  dcl comp		fixed bin automatic;
  dcl defp		ptr automatic;
  dcl dhp			ptr automatic;
  dcl dname		char (168) automatic;
  dcl dnamel		fixed bin automatic;
  dcl ec			fixed bin (35) automatic;
  dcl ename		char (32) automatic;
  dcl i			fixed bin automatic;
  dcl info_ep		variable entry (ptr, fixed bin (24), ptr,
			fixed bin (35)) automatic;
  dcl mmp			ptr automatic;
  dcl n_comp		fixed bin (24) automatic;
  dcl no_clear_sw		bit (1) automatic;
  dcl 01 oi		aligned like object_info automatic;
  dcl segp		ptr automatic;
  dcl targetp		ptr automatic;
  dcl term_sw		bit (1) automatic;
  dcl type		fixed bin automatic;
  dcl terminate_on_exit       bit (1) automatic init("0"b);

  /* conditions */

  dcl cleanup		condition;

  /* builtin */

  dcl addr		builtin;
  dcl addrel		builtin;
  dcl char		builtin;
  dcl ltrim		builtin;
  dcl null		builtin;
  dcl unspec		builtin;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


initiate:
  entry (A_dname,			/** target dir name     ( in)	*/
       A_ename,			/** target entry name   ( in)	*/
       A_refname,			/** target refname	    ( in)	*/
       A_validate,			/** validate switch	    ( in) */
       A_targetp,			/** target pointer	    (out)	*/
       A_count,			/** bit_count	    (out) */
       A_msf_sw,			/** MSF switch	    (out)	*/
       A_code);			/** error code	    (out)	*/

  /*** ****************************************************************/
  /***							*/
  /***	Name:	object_lib_$initiate			*/
  /***	Input:	dname, ename, refname, validate		*/
  /***	Function:	Initiates the binary file (segment or MSF),	*/
  /***		specified by dir_name and entry_name, with the	*/
  /***		reference name specified.  If the pathname given	*/
  /***		specifies an MSF, component 0 is initiated with	*/
  /***		the given refname.  If the validate switch is set	*/
  /***		the resultant segment is checked via object_info_	*/
  /***		to insure that it is in fact an object segment.	*/
  /***		The object segment is also checked to determine	*/
  /***		if it is a valid object MSF.  The pointer to the	*/
  /***		segment is returned if the thing in question ends	*/
  /***		up referring to an object segment regardless of	*/
  /***		conflicting information about it being an object	*/
  /***		MSF.					*/
  /***	Output:	targetp, count, msf_sw, code			*/
  /***							*/
  /*** ****************************************************************/


  no_clear_sw = false;
  goto INITIATE_JOIN;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


init_no_clear:
  entry (A_dname,			/** target dir name	    ( in)	*/
       A_ename,			/** target entryname    ( in)	*/
       A_refname,			/** target ref name	    ( in)	*/
       A_validate,			/** validate switch	    ( in) */
       A_targetp,			/** target pointer	    (out)	*/
       A_count,			/** bit count	    (out) */
       A_msf_sw,			/** MSF switch	    (out)	*/
       A_code);			/** error code	    (out)	*/

  /*** ****************************************************************/
  /***							*/
  /***	Name:	object_lib_$init_no_clear			*/
  /***	Input:	dname, ename, refname, validate		*/
  /***	Function:	the same as object_lib_$initiate except that	*/
  /***		term_$no_clear is called rather than		*/
  /***		term_$single_refname if the refname is already	*/
  /***		on another entry and must be terminated.  It is	*/
  /***		intended for use only by find_command_ who will	*/
  /***		take care of its associative memory itself.	*/
  /***	Output:	targetp, count, msf_sw, code			*/
  /***							*/
  /*** ****************************************************************/

  no_clear_sw = true;
  goto INITIATE_JOIN;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


INITIATE_JOIN:
  dname = A_dname;
  ename = A_ename;
  n_comp = 0;
  term_sw = false;

  A_code = 0;
  A_targetp = null;
  A_msf_sw = false;
  A_count = 0;

  /* try to initiate the segment/MSF */

  call hcs_$initiate_count (dname, ename, A_refname, bc, 0, targetp, ec);

  /* if the target is a directory, see if it is an MSF and try to	*/
  /* initiate component 0.					*/

  if ec = error_table_$dirseg
    then do;
      call hcs_$status_minf (dname, ename, 0, 0, n_comp, ec);
      if ec ^= 0
        then call exit (ec);
      if n_comp = 0
        then call exit (error_table_$dirseg);
      dname = pathname_ (dname, ename);
      ename = "0";
      call hcs_$initiate_count (dname, ename, A_refname, bc, 0, targetp, ec);
    end;

  /* if another segment already has that refname, terminate the	*/
  /* refname and retry the initiation.				*/

  if ec = error_table_$namedup
    then do;
      if no_clear_sw
        then call term_$no_clear (A_refname, ec);
        else call term_$single_refname (A_refname, ec);
      if ec ^= 0
        then call exit (ec);
      term_sw = true;
      call hcs_$initiate_count (dname, ename, A_refname, bc, 0, targetp, ec);
    end;

  /* remember we need to terminate this segment, if we initiated it,
     and it wasn't already known to the process. */
     
  if targetp ^= null() & ec ^= error_table_$segknown
    then terminate_on_exit = "1"b;

  /* if at this point we have a problem other than that the segment	*/
  /* is already known, we give up and return the code.		*/

  if ec = error_table_$segknown
    then ec = 0;
  else if ec ^= 0
    then call exit (ec);

  if A_validate
    then do;

      /* now we try to validate the target segment. */

      oi.version_number = object_info_version_2;
      call object_info_$brief (targetp, bc, addr (oi), ec);

      /* first see if it is an object at all */

      if ec ^= 0
        then call exit (ec);

      /* if we have gotten this far, we actually have an object so we	*/
      /* can legitimately return the pointer and bit count		*/

      A_targetp = targetp;

      /* we have returned this pointer to the caller, so we should no longer
         terminate the segment on exit */

      terminate_on_exit = "0"b;

      A_count = bc;

      /* now we validate the status as a object MSF/segment */

      def_header_ptr = oi.defp;
      if definition_header.msf_map_relp ^= 0
        then do;

	/* if the definition_header/msf_map say this thing is a MSF	*/
	/* component, make sure the directory bit_count and the	*/
	/* msf_map agree on how many components are here, as well	*/
	/* as making sure that this component really is component 0	*/

	msf_map_ptr = addrel (def_header_ptr,
	     definition_header.msf_map_relp);
	if msf_map.version ^= msf_map_version_1
	  then A_msf_sw = false;
	  else do;
	    if (msf_map.component_count ^= n_comp) |
	         (msf_map.my_component ^= 0)
	      then call exit (error_table_$inconsistent_object_msf);
	    A_msf_sw = true;
	  end;
        end;
        else do;

	/* if the definition_header says there is no msf_map, make	*/
	/* sure we didn't find this thing through MSF indirection.	*/
	/* (ie. in an MSF component.)				*/

	if n_comp > 0
	  then call exit (error_table_$inconsistent_object_msf);
	A_msf_sw = false;
        end;
    end;
    else do;
      if n_comp > 0
        then A_msf_sw = true;
        else A_msf_sw = false;

      A_targetp = targetp;

      /* we have returned this pointer to the caller, so we should no longer
         terminate the segment on exit */

      terminate_on_exit = "0"b;

      A_count = bc;
    end;

  /* if everything checks out, return the pointer and msf_switch. If	*/
  /* the no_clear_sw and term_sw are both set, return the error code	*/
  /* error_table_$namedup so that find_command_ will know to adjust	*/
  /* its associative memory.					*/

  if term_sw & no_clear_sw
    then call exit (error_table_$namedup);
    else call exit (0);

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


get_component_info:
  entry (A_segp,			/** obejct segment ptr  (in )	*/
       A_areap,			/** area to allocate in (in ) */
       A_version_reqd,		/** version to return   (in ) */
       A_oi_type,			/** type of object_info (in ) */
       A_comp_infop,		/** component_info ptr  (out)	*/
       A_code);			/** error code	    (out) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	object_lib_$get_component_info		*/
  /***	Input:	segp, areap, version_reqd, oi_type		*/
  /***	Function:	given a pointer to an object segment or MSF	*/
  /***		component, initiate all of the components of the	*/
  /***		MSF and return various information about them.	*/
  /***	Output:	comp_infop, code				*/
  /***							*/
  /*** ****************************************************************/

  /* preset the return value */

  A_comp_infop = null;

  /* make sure the version requested is legitimate */

  if A_version_reqd ^= component_info_version_1
    then call exit (error_table_$unimplemented_version);

  /* get the area to allocate the return structure in */

  if A_areap = null
    then based_areap = get_system_free_area_ ();
    else based_areap = A_areap;

  /* get the bit count of the segment passed for the call to object_info_ */

  call hcs_$status_mins (A_segp, (0), bit_count, ec);
  if ec ^= 0
    then call exit (ec);

  /* get the section pointers and validate that this is an object seg */

  oi.version_number = object_info_version_2;
  if A_oi_type = "none" | A_oi_type = "brief"
    then info_ep = object_info_$brief;
  else if A_oi_type = "display"
    then info_ep = object_info_$display;
  else if A_oi_type = "long"
    then info_ep = object_info_$long;
  else call exit (error_table_$bad_arg);

  call info_ep (A_segp, bit_count, addr (oi), ec);
  if ec ^= 0
    then call exit (ec);

  /* see if we have an MSF component, a non-MSF returns a structure	*/
  /* with a single component entry and the msf flag false		*/

  dhp = oi.defp;
  if dh.msf_map_relp = 0
    then max_component = 0;
    else do;
      mmp = addrel (dhp, dh.msf_map_relp);
      if mm.version ^= msf_map_version_1
        then max_component = 0;
        else max_component = mm.component_count - 1;
    end;

  /* preset the structure pointer to remove cleanup error windows */

  comp_infop = null;
  c = -1;

  /* make sure the structure goes away if we abort */

  on cleanup
    begin;
    if comp_infop ^= null
      then do;
        do i = 0 to c;
	if component_info.comp (c).segp ^= null
	  then call hcs_$terminate_noname (component_info.comp (c).segp,
		  (0));
        end;
        free component_info in (based_area);
      end;
  end;

  /* allocate the component info structure */

  allocate component_info in (based_area);
  component_info.version = A_version_reqd;
  component_info.flags.mbz = ""b;
  component_info.comp (*).mbz = ""b;
  component_info.comp (*).segp = null;

  if max_component = 0
    then do;

      /* if we have only 1 component (ie. a non-MSF), just copy the	*/
      /* info for the segment we were passed.			*/

      component_info.flags.msf = false;
      component_info.comp (0).segp = A_segp;
      component_info.comp (0).bc = bit_count;
      component_info.comp (0).info = oi;
    end;
    else do;

      /* if we have an MSF component, get the containing dir path and	*/
      /* initiate each of the other components.			*/

      component_info.flags.msf = true;

      call hcs_$fs_get_path_name (A_segp, dname, (0), ename, ec);

      do c = 0 to max_component;
        if c ^= mm.my_component
	then do;

	  /* if this isn't the component we were passed, generate	*/
	  /* a name and try to initiate in the containing directory	*/

	  ename = ltrim (char (c));
	  call initiate_file_ (dname, ename, R_ACCESS,
	       component_info.comp (c).segp,
	       component_info.comp (c).bc, ec);

	  /* if any other code was returned, free the structure and	*/
	  /* complain that this MSF is broken.			*/

	  if ec ^= 0
	    then do;

	      /* terminate all of the segments that we initiated	*/

	      do i = 0 to c - 1;
	        if component_info.comp (i).segp ^= null
		   & i ^= mm.my_component
		then call hcs_$terminate_noname (
			component_info.comp (i).segp, (0));
	      end;

	      free component_info in (based_area);
	      call exit (error_table_$inconsistent_object_msf);
	    end;

	  /* if the initiate was ok, try to get the object_info_ */

	  if A_oi_type ^= "none"
	    then do;
	      component_info.comp (c).info.version_number =
		 object_info_version_2;
	      call info_ep (component_info.comp (c).segp,
		 component_info.comp (c).bc,
		 addr (component_info.comp (c).info), ec);
	      if ec ^= 0
	        then do;

		/* terminate all the segments that we initiated	*/

		do i = 0 to c;
		  if component_info.comp (i).segp ^= null
		       & i ^= mm.my_component
		    then call hcs_$terminate_noname (
			    component_info.comp (i).segp, 0);
		end;

		free component_info in (based_area);
		call exit (ec);
	        end;
	    end;
	    else unspec (component_info.comp (c).info) = ""b;

	end;
	else do;

	  /* if this was the component he passed us, just fill in	*/
	  /* the pointer and bit count 			*/

	  component_info.comp (c).segp = A_segp;
	  component_info.comp (c).bc = bit_count;
	  if A_oi_type ^= "none"
	    then component_info.comp (c).info = oi;
	    else unspec (component_info.comp (c).info) = ""b;
	end;
      end;
    end;

  /* everything worked so set the return pointer and return a 0 code */

  A_comp_infop = comp_infop;

  call exit (0);

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


get_def_target:
  entry (A_segp,			/** segment to search   (in )	*/
       A_count,			/** segment bit count   (in ) */
       A_segname,			/** segname to find	    (in ) */
       A_offsetname,		/** offsetname to find  (in ) */
       A_live,			/** active/static	    (in ) */
       A_targetp,			/** target of def found (out) */
       A_code);			/** error code	    (out) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	object_lib_$get_def_target			*/
  /***	Input:	segp, count, segname, offsetname, live		*/
  /***	Function:	searches the given segment for the definition	*/
  /***		specified and return a pointer to the eventual	*/
  /***		target.  If the specified definition is an	*/
  /***		indirect definition, the pointer returned is the	*/
  /***		target of the indirection, not a pointer to the	*/
  /***		indirect link itself.  If the target of the	*/
  /***		definition is in the static or linkage sections,	*/
  /***		the live switch is used to determine whether the	*/
  /***		active version is used, or the static copy in the	*/
  /***		actual object segment.			*/
  /***	Output:	targetp, code				*/
  /***							*/
  /*** ****************************************************************/

  A_targetp = null;

  /* get the object info for the target segment */

  oi.version_number = object_info_version_2;
  call object_info_$brief (A_segp, A_count, addr (oi), ec);
  if ec ^= 0
    then call exit (ec);

  dhp = oi.defp;

  /* search for the definition */

  call get_definition_ (dhp, A_segname, A_offsetname, defp, ec);
  if ec ^= 0
    then call exit (ec);

  /* if the live switch is set, use the active linkage and static	*/
  /* pointers from the LOT and ISOT rather than the ones returned	*/
  /* by object_info_.					*/

  if A_live
    then do;
      call get_lp (A_segp, oi.linkp, oi.statp, ec);
      if ec ^= 0
        then call exit (ec);
    end;

  /* derive the target pointer of the definition. */

  if def.class = CLASS_TEXT
    then targetp = addrel (oi.textp, def.thing_relp);
  else if def.class = CLASS_LINKAGE
    then targetp = addrel (oi.linkp, def.thing_relp);
  else if def.class = CLASS_SYMBOL
    then targetp = addrel (oi.symbp, def.thing_relp);
  else if def.class = CLASS_STATIC
    then targetp = addrel (oi.statp, def.thing_relp);
  else call exit (error_table_$bad_class_def);

  /* if we are in an MSF transfer vector, indirect through the TV */

  if def.flags.indirect
    then do;

      /* make sure the definition target is a partial link */

      if def.class ^= CLASS_LINKAGE
        then call exit (error_table_$bad_indirect_def);

      /* if the live target was requested, return the value of the	*/
      /* snapped partial link.  Otherwise check to see if the target	*/
      /* is an unsnapped partial link.				*/

      if A_live
        then if targetp -> partial_link.tag ^= ITS_MODIFIER
	     then call exit (error_table_$bad_indirect_def);
	     else do;
	       A_targetp = targetp -> based_ptr;
	       call exit (0);
	     end;
      else if targetp -> partial_link.tag ^= fault_tag_3
        then call exit (error_table_$bad_indirect_def);
      else ;

      /* get the pathname to find the target component */

      call hcs_$fs_get_path_name (targetp, dname, dnamel, ename, ec);
      if ec ^= 0
        then call exit (ec);

      comp = targetp -> partial_link.component;
      type = targetp -> partial_link.type;
      ename = ltrim (char (comp));

      /* initiate the target */

      call initiate_file_ (dname, ename, R_ACCESS, segp, bc, ec);
      if ec ^= 0
        then call exit (ec);

      call object_info_$brief (segp, bc, addr (oi), ec);
      if ec ^= 0
        then call exit (ec);

      /* apply the link offset to the appropriate section base */

      if type = CLASS_TEXT
        then targetp = addrel (segp, targetp -> partial_link.offset);
      else if type = CLASS_LINKAGE
        then targetp = addrel (oi.linkp, targetp -> partial_link.offset);
      else if type = CLASS_STATIC
        then targetp = addrel (oi.statp, targetp -> partial_link.offset);
      else if type = CLASS_SYMBOL
        then targetp = addrel (oi.symbp, targetp -> partial_link.offset);
      else call exit (error_table_$bad_indirect_def);

    end;

  A_targetp = targetp;

  call exit (0);

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


get_lp:
  proc (segp,			/** segment pointer	    (in )	*/
       linkp,			/** linkage section ptr (out) */
       statp,			/** static section ptr  (out) */
       ec);			/** error code	    (out) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	get_lp					*/
  /***	Input:	segp					*/
  /***	Function:	gets the live linkage/static section pointers for	*/
  /***		the segment specified from the LOT/ISOT.  If the	*/
  /***		sections have not been copied, an error code is	*/
  /***		returned.					*/
  /***	Output:	linkp, statp, ec				*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl segp		ptr;
  dcl linkp		ptr;
  dcl statp		ptr;
  dcl ec			fixed bin (35);

  /* automatic */

  dcl seg_no		fixed bin;

  /* builtin */

  dcl segno		builtin;
  dcl stackbaseptr		builtin;
  dcl unspec		builtin;

  /* get the lot and isot pointers from the stack header */

  sb = stackbaseptr ();
  lotp = stack_header.lot_ptr;
  isotp = stack_header.isot_ptr;

  /* get the segment number for the segment we want */

  seg_no = segno (segp);
  
  /* make sure the lot is big enough */
  
  if seg_no > stack_header.cur_lot_size
    then do;
      ec = error_table_$nolinkag;
      return;
    end;
    
  /* make sure there is a lot entry */

  if unspec (lot.lp (seg_no)) = lot_fault
    then do;
      ec = error_table_$nolinkag;
      return;
    end;

  /* extract the pointers from the lot and isot */

  linkp = lot.lp (seg_no);
  statp = isot.isp (seg_no);

  end get_lp;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


exit:
  proc (ec);			/** error code	    (in )	*/

  /*** ****************************************************************/
  /***							*/
  /***	Name:	exit					*/
  /***	Input:	ec					*/
  /***	Function:	returns from object_lib_ returning the		*/
  /***		supplied error code.			*/
  /***	Output:	none					*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl ec			fixed bin (35);

  A_code = ec;
  goto EXIT;

  end exit;

EXIT:
  if terminate_on_exit & targetp ^= null
    then call hcs_$terminate_noname (targetp, (0));

  return;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


%include access_mode_values;
%include definition_dcls;
%include its;
%include object_lib_defs;
%include object_info;
%include object_link_dcls;
%include lot;
%include stack_header;

  end object_lib_;
