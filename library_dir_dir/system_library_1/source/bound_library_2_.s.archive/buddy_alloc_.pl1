/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* buddy_alloc_ is called to allocate space in an area. the calling sequence is:
   call buddy_alloc_(size,area_ptr,return_ptr), where size is fixed bin(26) and is size of block desired,
   area_ptr is the pointer to the area and return_ptr is a pointer to the allocated space.
   area_ptr must be pointing to a legitimate base or unpredictable errors will occur.  if the area pointed to by area_ptr
   is not initialized, area_ will be called to initialize it.
   coded 8.16.72 by Alan Downing.
   */
/* modified by A. Downing 08/73 to put in loop checks */

/* Last modified: (date and reason)
   11/6/75	by S.Webber to rename it buddy_alloc_ from alloc_
*/

buddy_alloc_: procedure (size, area_ptr, return_ptr);
%include area_header_v2pl1;
%include block_header_v2pl1;
dcl  return_ptr ptr,
    (rel, addrel, ptr, fixed, null) builtin,
     bit1 bit (1) init ("0"b),			/* tells if entering at top */
     alloc_ ext entry (fixed bin (26), ptr, ptr),
     area_ ext entry (fixed bin (26), ptr),
    (count, stop, i, j, k, ind, save_offset, size, place, indx) fixed bin (26),
     sys_info$max_seg_size ext static fixed bin (35),
    (area, storage, bad_area_format) condition;
	bit1 = "1"b;				/* flag to signal the area condition if insufficient area for allocate statement */
buddy_storage_: entry (size, area_ptr, return_ptr);	/* for signaling storage condition instead of area */
	if area_ptr -> area_header (1) ^= 0 then do;	/* Not buddy system area */
	     call alloc_ (size, area_ptr, return_ptr);
	     return;
	end;
restart:						/* come here if area has been made right size */
	front = fixed (rel (area_ptr), 18);		/* point to front end of area */
	stop = 70000;				/* used to stop infinite loopking when bad area exists */
	i = area_ptr -> area_header (3);
	if area_ptr -> area_header (4) = 0 then do;

/* The following code will convert the area to a new style area and then allocate
   the block therein with the new area management code. */

	     call area_ (i, area_ptr);		/* must initialize */
	     call alloc_ (size, area_ptr, return_ptr);
	     return;
	end;

	area_ptr -> area_header (4) =
	     area_ptr -> area_header (3);		/* set high water mark */
retry:
	i = size;
	if area_ptr -> area_header (6) > 23 then
	     go to bad_area;			/* this word has evidently been overwritten */
	count = 0;
try_to_allocate:
	do ind = 2 to area_ptr -> area_header (6)-5;	/* find what stratum is large enough */
	     count = count + 1;
	     if count > stop then go to bad_area;
	     if exp_tbl (ind) >= i+2 then do;		/* found the right size now */
		i = exp_tbl (ind);
		place = ind+5;
		if area_ptr -> area_header (place) ^= 0 then do; /* got a chain of free blocks this size */
alloc_block:
		     if area_ptr -> area_header (place)+front+size > sys_info$max_seg_size then do;
			count = count + 1;
			if count > stop then
bad_area:			     do;			/* area is no good */
			     signal bad_area_format;
			     go to restart;
			end;
			block_ptr = addrel (area_ptr, area_ptr -> area_header (place));
			if block_ptr -> block_header.forwardptr = 0 then go to break_up;
			area_ptr -> area_header (place) = block_ptr -> block_header.forwardptr;
			buddy_block_ptr = addrel (area_ptr, area_ptr -> area_header (place));
			block_ptr -> block_header.forwardptr = buddy_block_ptr -> buddy_block_header.forwardptr;
			buddy_block_ptr -> buddy_block_header.forwardptr =
			     fixed (rel (block_ptr), 18)-front;
			go to alloc_block;
		     end;
		     block_ptr = addrel (area_ptr, area_ptr -> area_header (place)); /* set block_ptr to beginning of free block */


		     area_ptr -> area_header (place) =
			block_ptr -> block_header.forwardptr; /* relink chain */
		     block_ptr -> block_header.busy_bit = "1"b; /* indicate that this block is busy */
		     block_ptr -> block_header.new_area = "11111111"b; /* used by freen_ to indicate new type block */
		     return_ptr = addrel (block_ptr, 2); /* offset return_ptr to actual beginning of storage in this block */
		     return;
		end;				/* thats all for allocating a block */
		else
break_up:		do j = ind+1 to area_ptr -> area_header (6)-5; /* look for bigger blocks which are free */
		     if area_ptr -> area_header (j+5) ^= 0 then do;
			do k = j to ind+1 by -1;	/* break up this block */
			     place = k+5;
			     indx = exp_tbl (k-1);
			     buddy_block_ptr = addrel (area_ptr, area_ptr -> area_header (place)); /* point at this block */
			     if area_ptr -> area_header (place)+indx+front > sys_info$max_seg_size then do;
				if buddy_block_ptr -> buddy_block_header.forwardptr ^= 0 then do;
				     block_ptr = addrel (area_ptr, buddy_block_ptr -> buddy_block_header.forwardptr);
				     area_ptr -> area_header (place) =
					buddy_block_ptr -> buddy_block_header.forwardptr;
				     buddy_block_ptr -> buddy_block_header.forwardptr =
					block_ptr -> block_header.forwardptr;
				     block_ptr -> block_header.forwardptr = fixed (rel (buddy_block_ptr), 18) - front;
				     go to try_to_allocate;
				end;
				i = size * 2;
				go to try_to_allocate;
			     end;
			     buddy_block_ptr -> buddy_block_header.size = place-1;
			     area_ptr -> area_header (place) = buddy_block_ptr -> buddy_block_header.forwardptr;
			     place = place -1;
			     save_offset = area_ptr -> area_header (place);
			     buddy_block_ptr -> buddy_block_header.forwardptr =
				fixed (rel (buddy_block_ptr), 18)+indx-front;
			     area_ptr -> area_header (place) = fixed (rel (buddy_block_ptr), 18)-front;
						/* have just relinked both sized stratum chains */
			     buddy_block_ptr = addrel (buddy_block_ptr, indx); /* must free up other half of the original block */
			     buddy_block_ptr -> buddy_block_header.busy_bit = "0"b; /* not busy */
			     buddy_block_ptr -> buddy_block_header.backptr = fixed (rel (buddy_block_ptr), 18) - front; /* point at front of this area */
			     buddy_block_ptr -> buddy_block_header.size = place;
			     buddy_block_ptr -> buddy_block_header.forwardptr =
				save_offset;	/* close chain */
			end;
			go to alloc_block;
		     end;
		end;
	     end;					/* end of 2**ind being large enough */
	end;					/* end of ind do loop */
error_return:					/* come here if there is not room to allocate desired space */
	if bit1 then signal area;
	else signal storage;
	go to retry;				/* maybe some storage was freed */
     end;
