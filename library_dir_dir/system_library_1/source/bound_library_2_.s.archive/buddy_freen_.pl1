/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* freen_ coded 9.25.72 by Alan Downing as part of the pl1 area managment package.
   freen_ is called with a pointer to an allocated block of storage and free's this block using the
   buddy system of allocations and free's.  freen_ must be used with the style of area created by the area_ procedure
   which is part of this package.
   */
/* modified August 1973 to do loop checking */

/* Last modified (date and reason):
   11/6/75	by S.Webber to rename from freen_
*/

buddy_freen_: procedure (bptr);

dcl  bptr ptr;
dcl  bad_area_format condition;
dcl  temp_ptr ptr,
    (addrel, bin, null, addr, substr, bool, ptr, rel, divide) builtin,
     1 s1 aligned based (addr (i)),			/* just to put a bit string on a fixed bin */
     2 address (2) bit (18) unaligned,
     tempstr bit (18) aligned,
     1 s2 aligned based (addr (j)),
     2 buddy_address (2) bit (18) unaligned,
    (i, j, k, count, stop) fixed bin (26) init (0);
%include block_header_v2pl1;
%include area_header_v2pl1;

	block_ptr = addrel (bptr, -2);		/* point to actual beginning of this block */
	bptr = null ();
	area_ptr = addrel (block_ptr, - block_ptr -> block_header.backptr); /* set pointer to beginning of the area */
	front = bin (rel (area_ptr), 18);
	stop = 70000;				/* to eliminate infinite looping in a bad area */
	if area_ptr -> area_header (block_ptr -> block_header.size) = 0 then do; /* no others free of this size */
	     block_ptr -> block_header.busy_bit = "0"b;	/* no longer busy */
	     block_ptr -> block_header.new_area = "11111111"b;
	     block_ptr -> block_header.forwardptr = 0;	/* nothing to point to */
	     area_ptr -> area_header (block_ptr -> block_header.size) =
		bin (rel (block_ptr), 18)-front;	/* put this block in the proper stratum */
	     return;
	end;					/* nothing else to do if there were not others of this size */
	else
combine:	do;					/* must try to recombine */
	     count = count + 1;			/* keep a total of times through */
	     if count > stop then do;			/* looping */
bad_area:
		signal bad_area_format;
		return;
	     end;
	     address (2) = rel (block_ptr);		/* needed for address calculations */
	     i = i-24-front;			/* address arithmetic must be done with out the area header being regarded */
	     tempstr = "0"b;			/* reset the string */
	     k = 18 - (block_ptr -> block_header.size -5);
	     substr (tempstr, k, 1) = "1"b;		/* set the correct bit to 1 */
	     buddy_address (2) = bool (address (2), tempstr, "0110"b);
	     j = j+24+front;
	     buddy_block_ptr = ptr (block_ptr, j);	/* need a pointer to this buddy */
	     if buddy_block_ptr -> buddy_block_header.busy_bit |
	     buddy_block_ptr -> buddy_block_header.size ^=
	     block_ptr -> block_header.size then do;	/* can not recombine this buddy_block */
thats_it:
		block_ptr -> block_header.busy_bit = "0"b;
		block_ptr -> block_header.new_area = "11111111"b;
		block_ptr -> block_header.forwardptr =
		     area_ptr -> area_header (block_ptr -> block_header.size);
		area_ptr -> area_header (block_ptr -> block_header.size) =
		     bin (rel (block_ptr), 18)-front;	/* have relinked the chain */
		return;
	     end;
	     else do;				/* the buddy block is available for recombining */
		k = bin (rel (buddy_block_ptr), 18);
		temp_ptr = buddy_block_ptr;		/* save copy */
		buddy_block_ptr = addr (area_ptr -> area_header (buddy_block_ptr -> buddy_block_header.size));
		do while ("1"b);
		     if addrel (area_ptr, buddy_block_ptr -> buddy_block_header.forwardptr) =
		     temp_ptr then do;		/* found link and will remove it */
			buddy_block_ptr -> buddy_block_header.forwardptr =
			     temp_ptr -> buddy_block_header.forwardptr;
			go to found;
		     end;
		     else buddy_block_ptr = addrel (area_ptr, buddy_block_ptr -> buddy_block_header.forwardptr);
		     count = count + 1;
		     if count > stop then go to bad_area;
		end;
found:
		if j < i+24+front then block_ptr = temp_ptr; /* point to beginning of the new block */
		block_ptr -> block_header.size = block_ptr -> block_header.size + 1;
		if block_ptr -> block_header.size < area_ptr -> area_header (6) then go to combine;
		else do;
		     area_ptr -> area_header (4) = 25;	/* set high water mark down */
		     go to thats_it;
		end;
	     end;
	end;
     end;
