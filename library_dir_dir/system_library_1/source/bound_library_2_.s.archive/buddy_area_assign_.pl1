/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* buddy_area_assign_ assigns one area to another if possible.  If the sending area has no more allocated in it than
   can be held by the receiver, the assignment is successful.  If there is not enough room in the receiver,
   the area condition is signaled.  The state of the receiver after an unsuccessful assignment
   is unpredictable.
   usage, dcl buddy_area_assign_ ext entry(ptr,ptr), call buddy_area_assign_(receivingptr,sendingptr),
   the area pointed to by "receivingptr" is made equal to the area pointed to by "sendingptr".  note,
   equal means that what was allocated in one area is allocated at the same offset in the other, it does not
   mean that the areas have the same total size.
   coded on 12.26.72 by A. Downing */

buddy_area_assign_: proc (area_ptr, send_ptr);
dcl  send_ptr ptr,
    (null, rel, fixed) builtin,
     buddy_area_$buddy_redef ext entry (fixed bin (26), ptr),
     save_size fixed bin (26),
     image1 (receiver_size) based bit (36) aligned,
     receiver_size fixed bin (26),
     image2 (send_size) based bit (36) aligned,
     send_size fixed bin (26),
     area condition,
     sys_info$max_seg_size ext static fixed bin (26);
%include area_header_v2pl1;

	on condition (area) go to error_return;		/* can not make the desired area assignment */

	save_size, receiver_size = area_ptr -> area_header (3);
	if receiver_size + fixed (rel (area_ptr), 18) > sys_info$max_seg_size then
	     receiver_size = receiver_size - 24;
	if send_ptr -> area_header (4) < area_ptr -> area_header (3) then
	     send_size = send_ptr -> area_header (4);
	else do;
	     if area_ptr -> area_header (3) > send_ptr -> area_header (3) then
		send_size = send_ptr -> area_header (3);
	     else send_size = area_ptr -> area_header (3);
	end;
	if send_size + fixed (rel (send_ptr), 18) > sys_info$max_seg_size then
	     send_size = send_size - 24;
	if receiver_size < send_size then area_ptr -> image1 = send_ptr -> image1;
	else area_ptr -> image2 = send_ptr -> image2;
	call buddy_area_$buddy_redef (save_size, area_ptr);
	return;
error_return:
	revert area;				/* must do this so that the user thinks that the signal originated from buddy_area_assign_ */
	signal area;
	return;
     end buddy_area_assign_;
