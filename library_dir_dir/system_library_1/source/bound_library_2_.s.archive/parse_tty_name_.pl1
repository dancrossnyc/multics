/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style4,delnl,insnl,^ifthendo */
parse_tty_name_:
     proc (name, fno, type, ano, chno);

/* This procedure hides in one place all knowledge of how to change
   a tty channel name into an FNP number and adaptor and channel numbers. */

/* Coded May 1976 by Mike Grady */
/* Modified July 1978 by Larry Johnson for new style tty names */
/* Modified May 1981 by Robert Coren to recognize COLTS channel (X.c000) */

dcl  name char (*),
     (fno, ano, chno) fixed bin,
     code fixed bin (35),
     type bit (1);
dcl  tag char (1);

dcl  i fixed bin;
dcl  temp char (3);

dcl  TAGS char (8) int static options (constant) init ("abcdefgh");

dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin);

dcl  (bin, divide, index, mod, substr, verify) builtin;


	i = index (name, ".");			/* Check for presence of a period */
	if i = 0
	then do;					/* No period indicates old name */
	     ano = index ("012345678ABCDEFGHIJKLMNOPQRSTUVWXYZ*", substr (name, 4, 1));
	     if ano = 0
	     then do;
err:
		fno = -1;
		return;
	     end;
	     ano = ano - 1;
	     fno = divide (ano, 9, 17, 0) + 1;
	     ano = mod (ano, 9);
	     if ano > 5
	     then do;
		ano = ano - 6;
		type = "1"b;
	     end;
	     else type = "0"b;

	     chno = cv_dec_check_ (substr (name, 5, 2), code);
	     if code ^= 0
	     then go to err;
	end;

	else do;					/* New style name */
	     if i < 2
	     then go to err;			/* Must be x. */
	     call parse_fnp_name_ (substr (name, 1, i - 1), fno);
	     if fno < 0
	     then go to err;
	     if substr (name, i + 1, 1) = "l"
	     then type = "0"b;
	     else if substr (name, i + 1, 1) = "h"
	     then type = "1"b;
	     else if substr (name, i + 1, 1) = "c"	/* COLTS executive pseudo-channel */
	     then do;
		if substr (name, i + 2) ^= "000"	/* this is the only form allowed */
		then go to err;
		;
		type = "1"b;			/* pretend it's HSLA */
		ano = 7;				/* we will force line number of 1777(8) */
		chno = 63;
		return;
	     end;
	     else go to err;
	     temp = substr (name, i + 2, 3);		/* Rest is digits: adapter and sub-chan */
	     if temp ^= substr (name, i + 2)
	     then go to err;			/* Extra chars somewhere */
	     if verify (temp, "0123456789") ^= 0
	     then go to err;
	     ano = bin (substr (temp, 1, 1));
	     if ano > 5
	     then go to err;
	     if ano > 2 & type
	     then go to err;
	     chno = bin (substr (temp, 2, 2));
	end;

	return;

/* Entry for comparing two tty channel names for equality */
/* It compares old and new style names as equal */

compare_tty_name_:
     entry (name1, name2) returns (bit (1));

dcl  (name1, name2) char (*);
dcl  (fnp1, fnp2, adp1, adp2, chn1, chn2) fixed bin;
dcl  (hsla1, hsla2) bit (1);

	if name1 = name2
	then return ("1"b);
	call parse_tty_name_ (name1, fnp1, hsla1, adp1, chn1);
	if fnp1 = -1
	then return ("0"b);
	call parse_tty_name_ (name2, fnp2, hsla2, adp2, chn2);
	if fnp2 = -1
	then return ("0"b);
	return (fnp1 = fnp2 & hsla1 = hsla2 & adp1 = adp2 & chn1 = chn2);

/* entry to "parse" an fnp name */
/* the intention is that this be the only place in the system that knows the format of fnp names */

parse_fnp_name_:
     entry (name, fno);

	tag = substr (name, 1, 1);
	if tag ^= name
	then go to err;
	fno = index ("abcdefgh", tag);
	if fno = 0
	then go to err;
	return;

/* this entry, given the number returned by parse_fnp_name_, returns the fnp's name */

get_fnp_name_:
     entry (fno) returns (char (32));

	if fno < 1 | fno > length (TAGS)
	then return ("?");
	else return (substr (TAGS, fno, 1));

     end parse_tty_name_;
