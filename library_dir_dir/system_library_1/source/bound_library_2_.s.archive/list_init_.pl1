/****^  ******************************************
        *                                        *
        * Copyright, (C) Honeywell Limited, 1983 *
        *                                        *
        ****************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-10-21,DGHowe), approve(86-10-21,MCR7420), audit(86-11-12,Zwick),
     install(86-11-20,MR12.0-1222):
     Added the ability to initialize an external pointer to a
     non-constant value via list_init_.  Changed the calling sequence of
     list_init_ and already_zero.  Removed the signaling of malformed
     list template.  list_init_ now returns a standard error code leaving
     the error handling up to the caller.  Added a segment pointer to
     the variable node structure.
                                                   END HISTORY COMMENTS */


/* format: style3 */
list_init_:
     proc (variable_p, list_template_p, vsize, a_sb, a_seg_ptr, a_code) options (support);

/* Procedure to do a list template initialization of a variable. */
/* Created: 82-11-18. T. Oke (UNCA). */

/* Modification History:
   83-04-21 M. Weaver to add $variable_already_zero and to handle large datum
   83-05-10 M. Weaver to not use fortran_storage include file
   84-10-19 M. Mabey to enable skipping backwards while initializing.  Data
		skipped over is no longer zeroed.  The condition
		'malformed_list_template_entry_' is signalled when an
		error is encountered.  "options (support)" is added to
		the procedure declaration.
*/

/* Parameters

    variable_p	 Input pointer to base of variable.

    list_template_p	 Input pointer to 'list_init_info' or null to init to "0"b.

    vsize		 Input size of variable to be initialized.

    a_sb		 Input pointer to the stack header for the object 
		 containing the variable

    a_seg_ptr	 Input pointer to the segment containing the variable
		 reference or null if it would be impossible to initialize
		 a pointer to it or if the ext var has no pointers
		 When called from link_snap this is a pointer based on
		 the address in the init_info pointer (ie the 
		 list_template_p).

    a_code	 Is a system error code (Output).

*/

dcl	list_template_p	pointer parameter;
dcl	variable_p	pointer parameter;
dcl	vsize		fixed bin (35) parameter;
dcl	a_seg_ptr		pointer parameter;
dcl	a_code		fixed bin (35) parameter;
dcl	a_sb		pointer;



/* Automatic Storage */

dcl	fill_in_zeroes	bit (1) aligned automatic;	/* "1"b if reinitializing */
dcl	max_bit		fixed bin (35) automatic;	/* top bit in variable */
dcl	min_bit		fixed bin (35) automatic;	/* base bit in variable */
dcl	seg_end		fixed bin (35) automatic;	/* bit address of segment end */
dcl	skip_addr		fixed bin (35) automatic;	/* final address after skipping */
dcl	seg_ptr		ptr automatic;		/* local copy of seg ptr */
dcl	tp		ptr automatic;		/* local list pointer */
dcl	var_p		ptr automatic;		/* pointer to current point in variable */
dcl	vlength		fixed bin (35) automatic;	/* length to init */


/* Builtins */

dcl	(addr, addrel, addbitno, copy, currentsize, divide, 
	fixed, length, max, min, null, ptr, substr, segno,
	unspec)		builtin;


/* Linkage and external */

dcl	hcs_$link_force	entry (pointer, fixed bin, fixed bin (35));

dcl	error_table_$invalid_ptr_target
			fixed bin (35) external;
dcl	error_table_$malformed_list_template_entry
			fixed bin (35) external;
dcl	error_table_$null_info_ptr
			fixed bin (35) external;

dcl	pl1_operators_$VLA_words_per_seg_
			fixed bin (35) external;

/* list_init_ entry point: we set the fill in zeros flag because we can 
   not be sure if the variable was already zeroed
*/
	fill_in_zeroes = "1"b;

/* Driver */

join:
	a_code = 0;
	seg_ptr = a_seg_ptr;
	var_p = variable_p;
	tp = list_template_p;
	vlength = vsize * 36;
	max_bit = bit_logical (var_p, vlength);
	min_bit = bit_logical (var_p, 0);

	if tp = null ()
	then call init_zero (var_p, vlength, tp);

	else do while (tp ^= null ());		/* go through list */
		if tp -> list_template_entry.n_bits = 0 /* KEY END LIST */
		then tp = null ();

/* check for ptr intialization */


		else if tp -> list_template_entry.init_type = ITS_PTR_INIT
		then do;				/* ITS ptr initialization */
			call initialize_ptr (tp, seg_ptr, a_sb, ("1"b), var_p);
			tp = addrel (tp, currentsize (tp -> list_template_entry));
		     end;


		else if tp -> list_template_entry.init_type = PACKED_PTR_INIT
		then do;				/* packed ptr initialization */
			call initialize_ptr (tp, seg_ptr, a_sb, ("0"b), var_p);
			tp = addrel (tp, currentsize (tp -> list_template_entry));
		     end;


		else if tp -> list_template_entry.repeat = 0
						/* KEY FOR SKIPPING */
		then do;
			skip_addr = bit_logical (var_p, tp -> list_template_entry.n_bits);

			if skip_addr > max_bit | skip_addr < min_bit
			then do;
				a_code = error_table_$malformed_list_template_entry;
				goto ERROR_EXIT;
			     end;

			call p_inc (var_p, tp -> list_template_entry.n_bits);
			tp = addrel (tp, 2);
		     end;

		else do;
			call set_value (var_p, tp);
			tp = addrel (tp, currentsize (tp -> list_template_entry));
		     end;

	     end;
ERROR_EXIT:					/* escape */
	return;

/* External entrypoints ------------------------------------------ */

/* already_zero: the caller has asured us that the variable has been 
   zeroed so we can skip zeroing it.
*/

variable_already_zero:
     entry (variable_p, list_template_p, vsize, a_sb, a_seg_ptr, a_code);

	fill_in_zeroes = "0"b;
	go to join;


/* Internal Procedures ------------------------------------------- */



/* initializes a pointer to one of the following references text, linkage, 
   static sections. This routine sets var_p and the variable
   it points to. The basic format is 

   base_ptr = target_section + section_offset;
   target_ptr = base_ptr (snapped if linkage) + word_offset + bit_offset;

   The idea behind this type of initialization is to allow
   compilers such as the C compiler, to initialize external
   pointers to an object that is only known at runtime.  eg.  a
   pointer to a subroutine within an execution unit or a pointer to
   a string stored in the text section / static section of the
   object or a pointer to another external variable.
   
   The compiler can generate encoded information concerning the
   target. It knows where the target will be located and how to
   reference it but may not be able to get the exact address. The
   information required is stored in an existing format ie. the
   list_init_template. list_init_ through this routine converts
   that symbolic pointer information into a real pointer and stores
   the resulting address in the target variable via set_value.
   
   In this way compilers can initialize pointers to more than a
   constant value such as null().

   Parameters
   template_ptr    is a pointer to the template for the field being inited
   seg_ptr         is a pointer to the segment containing the initialization
	         information. The init_ptr can't be used due to the 
	         possibility of set_fortran_common being used to initialize
	         the variable. sfc creates its own initialization inforamtion
	         in some circumstances. The seg_ptr is used as a base for
	         text section references.
   sb	         stack base pointer
   is_its_ptr      specifies if the ptr to be inited is an its or an packed
	         if it is "0"b
   var_p	         is a pointer to the target variable where the datum is
	         to be copied.

*/

initialize_ptr:
     procedure (template_ptr, seg_ptr, sb, is_its_ptr, var_p);

/* parameters */

dcl	template_ptr	pointer parameter;
dcl	seg_ptr		pointer parameter;
dcl	sb		pointer parameter;
dcl	is_its_ptr	bit (1) parameter;
dcl	var_p		pointer parameter;

/* automatic */

dcl	bit_offset	fixed bin (6) unsigned automatic; /* num of bits to add to target addr */
dcl	datum_ptr		ptr automatic;		    /* ptr to ptr init template */
dcl	packed_section_ptr	pointer unaligned automatic;	    /* packed ptr to desired section */
dcl	section_offset	fixed bin (18) unsigned automatic; /* offset in wrds in specified section */
dcl	section_ptr	pointer automatic;		     /* ptr to desired section */
dcl	target_seg_ptr	pointer automatic;		     /* ptr to target seg */
dcl	target_ptr	pointer automatic;		     /* ptr to final target its */
dcl	target_packed_ptr	pointer unaligned;		     /* ptr to final target packed */
dcl	word_offset	fixed bin (18) unsigned automatic; /* offset from target base in wrds */

/* structures */

dcl	1 temp_template	like list_template_entry_ptr;

/* based */

dcl	1 ptr_typed_datum	like pointer_init_template based (datum_ptr);
dcl	target_its	pointer aligned based;

/* get general information about the passed segment */

	if seg_ptr = null ()
	then do;
		a_code = error_table_$malformed_list_template_entry;
		goto ERROR_EXIT;
	     end;


	target_seg_ptr = ptr (seg_ptr, 0);

/* get pointer information */

	datum_ptr = addr (template_ptr -> list_template_entry.datum);
	section_offset = ptr_typed_datum.section_offset;
	word_offset = ptr_typed_datum.word_offset;
	bit_offset = ptr_typed_datum.bit_offset;


/* make our own copy of the template */

	if is_its_ptr				/* copy important data to new template */
	then temp_template.n_bits = length (unspec (target_ptr));
	else temp_template.n_bits = length (unspec (target_packed_ptr));

	temp_template.mbz = ""b;
	temp_template.init_type = template_ptr -> list_template_entry.init_type;
	temp_template.repeat = template_ptr -> list_template_entry.repeat;

/* now get the target value by the section specifier */

	if ptr_typed_datum.ptr_type = PTR_INIT_TEXT
	then do;					/* text section reference */
		section_ptr = target_seg_ptr;
		target_ptr = addrel (section_ptr, section_offset);
		target_ptr = addrel (target_ptr, word_offset);
		target_ptr = addbitno (target_ptr, bit_offset);

		if is_its_ptr
		then unspec (temp_template.datum) = unspec (target_ptr);
		else do;
			target_packed_ptr = target_ptr;
			unspec (temp_template.datum) = unspec (target_packed_ptr);
		     end;
	     end;


	else if (ptr_typed_datum.ptr_type = PTR_INIT_LOT) | (ptr_typed_datum.ptr_type = PTR_INIT_ISOT)
	then do;
		if sb = null
		then do;
			a_code = error_table_$null_info_ptr;
			goto ERROR_EXIT;

		     end;

		if (segno (target_seg_ptr) > sb -> stack_header.cur_lot_size)
		then do;
			a_code = error_table_$malformed_list_template_entry;
			goto ERROR_EXIT;
		     end;

		packed_section_ptr = sb -> stack_header.lot_ptr -> lot.lp (segno (target_seg_ptr));

/* check if we have a valid seg number. If 0 the seg is invalid. If lot fault
   the linkage and static sections have not been combined.
*/

		if (unspec (packed_section_ptr) = lot_fault) | (fixed (unspec (packed_section_ptr)) = 0)
		then do;
			a_code = error_table_$malformed_list_template_entry;
			goto ERROR_EXIT;
		     end;

		if (ptr_typed_datum.ptr_type = PTR_INIT_ISOT)
		then /* ISOT ptr init */
		     packed_section_ptr = sb -> stack_header.isot_ptr -> isot.isp (segno (target_seg_ptr));

/* just in case we better check the ISOT entry for a valid reference even
   though it is set if the lot is set.  It doesn't hurt to make sure. ie.
   if the static section is combined the ISOT is set and if it is separate
   this better be set.
*/

		if (unspec (packed_section_ptr) = lot_fault) |
		   (fixed (unspec (packed_section_ptr)) = 0) |
		   (sb -> stack_header.isot_ptr -> isot1 (segno (target_seg_ptr)).flags.fault ="11"b)
		then do;
			a_code = error_table_$malformed_list_template_entry;
			goto ERROR_EXIT;
		     end;

/* try to initialize the pointer to the target.
   Get target link and snap it if it is not snapped. 
*/
		target_ptr = addrel (packed_section_ptr, section_offset);

		if ptr_typed_datum.ptr_type = PTR_INIT_LOT
		then do;
			if (target_ptr -> its.its_mod ^= ITS_MODIFIER)
			then do;			/* we have an unsnapped link so snap it */
				call hcs_$link_force (target_ptr, (0), a_code);
				if a_code ^= 0
				then do;
					a_code = error_table_$invalid_ptr_target;
					goto ERROR_EXIT;
				     end;
			     end;


/* now we have the address of the target link get the address of the target
   variable
*/
			target_ptr = addrel (target_ptr -> target_its, word_offset);
						/* indirect through the link and add the word offset */
			target_ptr = addbitno (target_ptr, bit_offset);

/* get address of target from link */
			if is_its_ptr
			then unspec (temp_template.datum) = unspec (target_ptr);
			else do;
				target_packed_ptr = target_ptr;
				unspec (temp_template.datum) = unspec (target_packed_ptr);
			     end;
		     end;

		else if ptr_typed_datum.ptr_type = PTR_INIT_ISOT
		then do;

			target_ptr = addrel (target_ptr, word_offset);
			target_ptr = addbitno (target_ptr, bit_offset);

			if is_its_ptr
			then unspec (temp_template.datum) = unspec (target_ptr);
			else do;
				target_packed_ptr = target_ptr;
				unspec (temp_template.datum) = unspec (target_packed_ptr);
			     end;
		     end;
	     end;					/* PTR_INIT_LOT & PTR_INIT_ISOT */

	else do;					/* unknown init type */
		a_code = error_table_$malformed_list_template_entry;
		goto ERROR_EXIT;
	     end;

	call set_value (var_p, addr (temp_template));

	return;



     end initialize_ptr;

/* Set Area to "0"b 
   Paramters
    var_p         points to the target variable
    vlength       is the length of the area to be zeroed
    tp            is a pointer to the init template
*/

init_zero:
     proc (var_p, vlength, tp);

/* Initialize the variable based at var_p to zero for vlength bits. */

/* If you look at this code you will believe that an explanation is in order.

   The purpose of this code is to efficiently set an area to "0"b, which may
   span over a segment boundary, and further to permit a segment to be seen as
   a certain key number of words (pl1_operators_$VLA_words_per_seg_) to be
   exact.  This is done by basing a bit variable on the desired point to start
   initializing, and then determining the length that can be done within this
   segment, if the full area can be done then this is done with an unspec
   assignment.  If the area to clear spans the segment end, then we slice off
   chunks and clear them individually.  At the end of the clear, var_p points
   to the next bit which would be affected. 
*/


dcl	var_p		ptr;
dcl	vlength		fixed bin (35);
dcl	tp		ptr;

dcl	(
	bsize,					/* size of area currently to set */
	vdone
	)		fixed bin (35);		/* amount of variable done */

dcl	variable		(bsize) bit (1) unaligned based (var_p);

	if bit_logical (var_p, vlength) > max_bit
	then do;
		a_code = error_table_$malformed_list_template_entry;
		goto ERROR_EXIT;
	     end;

	bsize = vlength;
	vdone = 0;

/* if we fit within a segment from our base, then do it. */

	seg_end = bit_logical (ptr (var_p, "0"b), pl1_operators_$VLA_words_per_seg_ * 36);

	if seg_end >= bit_logical (var_p, vlength)
	then do;
		if fill_in_zeroes
		then unspec (variable) = "0"b;
		call p_inc (var_p, bsize);
	     end /* simple set */;

/* clear multi-segment area, or across a segment bound */

	else do while (vdone < vlength);

/* find space left in this segment from current base.		*/
/* end of segment is next segment - 1 bit			*/

		seg_end = bit_logical (ptr (var_p, "0"b), pl1_operators_$VLA_words_per_seg_ * 36);

		bsize = min (vlength - vdone, seg_end - bit_logical (var_p, 0));
		if fill_in_zeroes
		then unspec (variable) = "0"b;

/* do center section til end */
		vdone = bsize + vdone;
		call p_inc (var_p, bsize);
	     end;
	return;
     end init_zero;

/* Set Area to value 
   the area pointed to by var_p is set to the value of the datum contained in
   the template and repeated by the repeat factor specified in the template

   Parameters
   var_p        pointer to the target variable
   tp	      pointer to the initialization template
*/

set_value:
     proc (var_p, tp);

/* This is again a complex procedure.			        */

/* Speed is an essential for multi-segment initializations. 

   Initialization is done by replicating the datum by doing a long
   OVERWRITING EIS move to replicate in one fast operation.  This is done in
   one of two methods.

   1. If the area left to initialize is small, or the datum is to be repeated 
      only once, then we do a simple copy to the area, 
      offset by the bit offset necessary from the last segment break.

   2. If the area left to initialize is large, then we do a copy of at least
      eight words of datum replication to the start of the area to init, offset
      within the datum by the point of the last segment break.  Then we do an
      EIS copy with intentional overwrite to replicate the datum.  This
      requires at least an eight word offset between the source position and
      the target bit position.  We chose up to 32 words to be safe on hardware
      capability changes.

   Slicing of initialization permits spanning segment bounds at any bit point
   within the datum replication. 
*/

dcl	var_p		ptr;
dcl	tp		ptr;

/* builtin */

dcl       mod                 builtin;
     

/* automatic */

dcl	bsize		fixed bin (35);		/* size in bits to do this slice */
dcl	bstart		fixed bin (18);		/* template offset from datum start */
dcl	copy_offset	fixed bin (35);		/* bit offset of target from source */
dcl	template_length	fixed bin (35);

dcl	p		ptr;
dcl	variable		(bsize) bit (1) based (var_p);
dcl	(
	vlength,					/* length of total set */
	vdone
	)		fixed bin (35);		/* length of set done */

dcl	template		bit (template_length) based (var_p);
						/* where template is stored */
dcl	replications	fixed bin;		/* number of copies of datum in template */

dcl	1 its		like its_unsigned based (addr (var_p));

/* Check if there is an invalid template entry */

	if tp -> list_template_entry.n_bits < 0
	then do;
		a_code = error_table_$malformed_list_template_entry;
		goto ERROR_EXIT;
	     end;

/* Find total length to set. */

	vlength = tp -> list_template_entry.n_bits * tp -> list_template_entry.repeat;


	if bit_logical (var_p, vlength) > max_bit
	then do;
		a_code = error_table_$malformed_list_template_entry;
		goto ERROR_EXIT;
	     end;
	bstart, vdone = 0;
	template_length = max (32 * 36, tp -> list_template_entry.n_bits);

/* do fast "0"b init if possible */

	if tp -> list_template_entry.datum = "0"b
	then call init_zero (var_p, vlength, tp);

/* do slower template initialization as necessary */

	else do while (vdone < vlength);

/* determine bit slice we can do, and number of repications needed.   */
/* find space left in this segment from current base.		*/
/* end of segment is next segment - 1 bit			*/

		seg_end = bit_logical (ptr (var_p, "0"b), pl1_operators_$VLA_words_per_seg_ * 36);

		bsize = min (vlength - vdone, seg_end - bit_logical (var_p, 0));

		if (bsize < 100 * 36) | (tp -> list_template_entry.repeat = 1)
		     | (bsize <= tp -> list_template_entry.n_bits)
		then do;
			replications =
			     divide (fixed (bsize, 30) + bstart + fixed (tp -> list_template_entry.n_bits, 24) - 1,
			     fixed (tp -> list_template_entry.n_bits, 24), 18);
			unspec (var_p -> variable) =
			     substr (copy (tp -> list_template_entry.datum, replications), bstart + 1, bsize);
		     end;

/* make minimum replications in a template area at base of variable, then use
   overlapping EIS move to replicate it throughout. */

		else do;

/* number of primary copies needed */

			p = var_p;
			replications =
			     divide (length (template) + bstart + fixed (tp -> list_template_entry.n_bits, 24) - 1,
			     fixed (tp -> list_template_entry.n_bits, 24), 18);
			copy_offset =
			     divide (length (template), fixed (tp -> list_template_entry.n_bits, 24), 24)
			     * fixed (tp -> list_template_entry.n_bits, 24);
			template =
			     substr (copy (tp -> list_template_entry.datum, replications), bstart + 1, copy_offset);

/* overlay copy the strings */

			begin;
dcl	source		bit (bsize - copy_offset) based (var_p);
dcl	target		bit (bsize - copy_offset) based (addr (substr (template, copy_offset + 1)));

			     target = source;
			end /* overlay copy */;
		     end;

		vdone = bsize + vdone;
		call p_inc (var_p, bsize);
		bstart = mod (bsize, fixed (tp -> list_template_entry.n_bits, 24));
	     end /* do set area */;
     end set_value;

/* increment a pointer by binc bits, keeping in mind the VLA_words_per_seg_
   limit of a segment and return the updated pointer. 

   Parameters
   var_p     pointer to the target variable
   binc	   is the increment to be added to the var_p to obtain the address
	   where further information is to be added.

*/

p_inc:
     proc (var_p, binc);

/* parameters */
dcl	var_p		ptr;
dcl	binc		fixed bin (35);

/* builtin */

dcl       mod                 builtin;


/* automatic */
dcl	address		fixed bin (35);
dcl	1 its		like its_unsigned based (addr (var_p));


	address = bit_logical (var_p, binc);
	its.bit_offset = mod (address, 36);
	address = divide (address, 36, 35);
	its.offset = mod (address, pl1_operators_$VLA_words_per_seg_);
	its.segno = divide (address, pl1_operators_$VLA_words_per_seg_, 18);
	return;
     end p_inc;


/* return a fixed bin (35) logical bit address from a pointer plus an offset
   use pl1_operators_$VLA_words_per_seg_ as the segment length determination 

   Parameters
   p          pointer to the start of the target
   offset	    offset to be added to the target ptr

*/

bit_logical:
     proc (p, offset) returns (fixed bin (35));

/* parameters */
dcl	p		ptr;
dcl	offset		fixed bin (35);

/* automatic */
dcl	address		fixed bin (35);
dcl	1 its		like its_unsigned based (addr (p));

	address =
	     (fixed (its.segno * pl1_operators_$VLA_words_per_seg_, 24) + its.offset) * 36 + its.bit_offset + offset;
	return (address);
     end bit_logical;
%page;
/* Include Files */

%include system_link_init_info;
%page;
%include its;
%page;
%include stack_header;
%page;
%include lot;
     end list_init_;
