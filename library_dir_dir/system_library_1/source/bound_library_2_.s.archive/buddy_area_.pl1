/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* area_ recoded 8.9.72 into pl1.
   calling sequence is:
   call area_(size,area_ptr) where size is number of words in the area, and is fixed bin(26),
   and area_ptr is its to area.  area_ptr is made to lie on a (0 mod 2) word boundery.
   coded by alan downing */
/* note: the actual size of this style area is the largest block which is a power of 2 <= size */

/* Last modified (date and reason):
   11/6/75	by S.Webber to rename it buddy_area_ from area_.
*/

buddy_area_: procedure (s, area_ptr);

%include area_header_v2pl1;
%include block_header_v2pl1;
dcl (s, size, i, j, k, l) fixed bin (26),
     sys_info$max_seg_size ext static fixed bin (26),
    (addrel, rel, bin, null) builtin,
     area condition;

	size = s;					/* make a copy of the size */
	if size < 28 | size > sys_info$max_seg_size + 24 then go to error_return;
	front = bin (rel (area_ptr), 18);
	area_ptr -> area_header (1), area_header (2) = 0; /* first two words are 0 if a new type area */
	area_ptr -> area_header (4) = 25;		/* if zero alloc_ knows its a virgin area */
	area_ptr -> area_header (5) = 24;		/* set up first usable storage word */
	do i = 7 to 23;
	     area_ptr -> area_header (i) = 0;		/* 0 header stratum words */
	end;
	if size = sys_info$max_seg_size then
	     size = sys_info$max_seg_size + 24;
	do i = 2 to 18 while (exp_tbl (i) <= size - 24);
	end;
	if i > 2 then do;				/* found actual usable size */
	     i = i-1;
	     area_ptr -> area_header (6) = i+5;
	     area_ptr -> area_header (3) =
		24 + exp_tbl (i);
	     block_ptr = addrel (area_ptr, 24);
	     block_ptr -> block_header.size = i+5;
	     block_ptr -> block_header.backptr = bin (rel (block_ptr), 18)-front;
	     block_ptr -> block_header.forwardptr = 0;
	     block_ptr -> block_header.busy_bit = "0"b;
						/* have just produced the dummy block_header */
	     area_ptr -> area_header (i+5) = 24;	/* set the correct stratum word */
break:
	end;
	else go to error_return;
	return;


buddy_redef:	entry (s, area_ptr);			/* alternate entry into area_ */
dcl  create_block bit (1);				/* used to indicate that a whole new block header is required */
	size = s;					/* copy the input argument */
	if size < 28 | size > sys_info$max_seg_size + 24 then do;
error_return:
	     signal area;
	     return;
	end;
	else do;					/* at least minimum amount of words required */
	     do i = 2 to 18 while (exp_tbl (i) <= size - 24);
	     end;
	     if i > 2 then do;			/* found right size */
		i = i-1;
		if i = area_ptr -> area_header (6)-5 then return; /* not changing the size */
		front = bin (rel (area_ptr), 18);
		if i > area_ptr -> area_header (6)-5 then do; /* must increase the area */
		     block_ptr = addrel (area_ptr, area_ptr -> area_header (3));
		     do j = area_ptr -> area_header (6)-5 to i-1;
			block_ptr -> block_header.backptr = bin (rel (block_ptr), 18) - front; /* point at front of area */
			block_ptr -> block_header.size = j+5;
			block_ptr -> block_header.forwardptr = 0;
			block_ptr -> block_header.busy_bit = "0"b;
			if j = area_ptr -> area_header (6)-5 then do;
			     block_ptr -> block_header.forwardptr =
				area_ptr -> area_header (j+5);
			     area_ptr -> area_header (j+5) = bin (rel (block_ptr), 18)- front; /* fix this stratum chain */
			end;
			else area_ptr -> area_header (j+5) = bin (rel (block_ptr), 18)- front; /* fix stratum */
			k = exp_tbl (j);
			block_ptr = addrel (block_ptr, k); /* point to next block */
		     end;
		     area_ptr -> area_header (6) = i+5;
		     area_ptr -> area_header (3) = 24 + exp_tbl (i);
		     if area_ptr -> area_header (4) > 25 then
			area_ptr -> area_header (4) = area_ptr -> area_header (3);
		     return;
		end;				/* of increasing the size */
		else do;				/* decreasing the size */
		     create_block = "0"b;		/* initialize the flag */
		     if area_ptr -> area_header (area_ptr -> area_header (6)) = 0 then /* whole area not free */
			do j = area_ptr -> area_header (6)-1 to i+5 by -1; /* see what blocks are free */
			if area_ptr -> area_header (j) <= 24 then go to error_return; /* can not shrink down because a block which is bigger is not free */
		     end;
		     else create_block = "1"b;
		     j = i+5;
		     do l = j to area_ptr -> area_header (6); /* now we do a shrink */
			area_ptr -> area_header (l) = 0;
		     end;
		     area_ptr -> area_header (3) = exp_tbl (i)+ 24;
		     area_ptr -> area_header (6) = j;
		     if area_ptr -> area_header (4) > 25 then
			area_ptr -> area_header (4) = area_ptr -> area_header (3);
		     if create_block then do;		/* no block was here before */
			area_ptr -> area_header (j) = 24;
			block_ptr = addrel (area_ptr, 24);
			block_ptr -> block_header.backptr = bin (rel (block_ptr), 18) - front;
			block_ptr -> block_header.size = j;
			block_ptr -> block_header.forwardptr = 0;
			block_ptr -> block_header.busy_bit = "0"b;
			block_ptr -> block_header.new_area = "11111111"b;
		     end;
		end;				/* of shrinking the area */
	     end;
	     else go to error_return;
	     return;
	end;
     end;
