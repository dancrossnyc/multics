/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style1,ind2,^inddcls,ifthenstmt,dclind2,declareind2,ifthendo,ifthen*/

rldr_check_pvol_: proc (rldr_datap, pvindex, code);

/* This routine cross checks the label info in the volume log with that on the physical volume in an
   attempt to predict if the physical volume is big enough to contain the reloaded information or will be usable
   after it is reloaded. Checks are made for  record number, vtoce number, min and max access class, and partition match. */
/* Written: In antiquity by Dave Vinograd.					  */
/* Modified: 3/1/83 by GA Texada to allow multiple physical volume reloading.		  */

dcl code		     fixed bin (35);
dcl (lidx, vidx, pvindex) fixed bin;
dcl match		     bit (1);

dcl myname	     char (16) int static init ("rldr_check_pvol_") options (constant);
dcl fatal		     fixed bin int static init (3) options (constant);
dcl unusable	     fixed bin int static init (1) options (constant);
dcl non_completion	     fixed bin int static init (2) options (constant);

dcl rldr_report_$online_output entry options (variable);
dcl convert_aim_attributes_ entry (bit (72) aligned, char (32));

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


/* initialize local variables */
    code = 0;
    labelp = rldr_data_.labelp (pvindex);
    bvlp = rldr_data_.bvlp (pvindex);
    vtoc_headerp = rldr_data_.vtoc_headerp (pvindex);
    vol_mapp = rldr_data_.vol_mapp (pvindex);
						/* check if volume initialized */
    if label.Multics ^= Multics_ID_String
      | label.version ^= 1 then do;
        code = fatal;
        call rldr_report_$online_output (rldr_datap, 0, myname, "Unitialized output volume, pv ^a",
	rldr_data_.pvname (pvindex));
        return;
      end;
    if ^rldr_data_.save then do;
        if vol_map.n_rec ^= vol_map.n_free_rec
	& vtoc_header.n_vtoce ^= vtoc_header.n_free_vtoce then do;
	  code = fatal;
	  call rldr_report_$online_output (rldr_datap, 0, myname, "Uninitialized output volume, pv ^a",
	    rldr_data_.pvname (pvindex));
	  return;
	end;
      end;
						/* check to see if whats to be reloaded will fit */

    if backup_volume_log.n_rec > vol_map.n_rec then do;
        call rldr_report_$online_output (rldr_datap, 0, myname, "Reload may overflow volume ");
        call rldr_report_$online_output (rldr_datap, 0, myname,
	"Disk label requires ^d records; Volog label requires ^d records on pv ^a",
	vol_map.n_rec, backup_volume_log.n_rec, rldr_data_.pvname (pvindex));
        code = non_completion;
      end;

    if backup_volume_log.n_vtoce > vtoc_header.n_vtoce then do;
        call rldr_report_$online_output (rldr_datap, 0, myname, "Reload may overflow vtoc");
        call rldr_report_$online_output (rldr_datap, 0, myname,
	"Disk label requires ^d vtoce; Volog label requires ^d vtoce on pv ^a",
	vtoc_header.n_vtoce, backup_volume_log.n_vtoce, rldr_data_.pvname (pvindex));
        code = non_completion;
      end;

/* Check if preinitialized volume is what was requested. We must special case the rpv since we have cold booted
   onto a temp pack thus the rpv uid will have changed. */

    if ^(rldr_data_.pvname (pvindex) = "rpv") then
         if backup_volume_log.pvid ^= label.pvid
	 | backup_volume_log.pv_name ^= label.pv_name then do;
	   code = unusable;
	   call rldr_report_$online_output (rldr_datap, 0, myname, "Volume mismatch");
	   call rldr_report_$online_output (rldr_datap, 0, myname,
	     "Disk label says name = ^a,pvid = ^w; Volog label says name = ^a,pvid = ^w",
	     label.pv_name, label.pvid, backup_volume_log.pv_name, backup_volume_log.pvid);
	   return;
	 end;
						/* cross check max access class */
    if backup_volume_log.max_access_class ^= label.max_access_class then do;
        call rldr_report_$online_output (rldr_datap, 0, myname, "Maximum access class mismatch");
        call rldr_report_$online_output (rldr_datap, 0, myname, "Disk label says: ^a; Volog label says: ^a for pv ^a",
	get_aim_access_ (label.max_access_class),
	get_aim_access_ (backup_volume_log.max_access_class),
	rldr_data_.pvname (pvindex));
        code = unusable;

      end;
						/* and min access class */
    if backup_volume_log.min_access_class ^= label.min_access_class then do;
        call rldr_report_$online_output (rldr_datap, 0, myname, "Minimum access class mismatch");
        call rldr_report_$online_output (rldr_datap, 0, myname, "Disk label says: ^a; Volog label says ^a for pv ^a",
	get_aim_access_ (label.min_access_class),
	get_aim_access_ (backup_volume_log.min_access_class),
	rldr_data_.pvname (pvindex));
        code = unusable;
      end;
						/* cross check partition names and extents */
    do vidx = 1 to backup_volume_log.nparts;
      match = "0"b;
      do lidx = 1 to label.nparts;
        if label.parts (lidx).part = backup_volume_log.parts (vidx).part then do;
	  match = "1"b;
	  if label.parts (lidx).nrec < backup_volume_log.parts (vidx).nrec then do;
	      code = unusable;
	      call rldr_report_$online_output (rldr_datap, 0, myname, "Partition ^a size mismatch",
	        label.parts (lidx).part);
	      call rldr_report_$online_output (rldr_datap, 0, myname,
	        "Disk label requires ^d records; Volog label requires ^d for pv ^a",
	        label.parts (lidx).nrec, backup_volume_log.parts (vidx).nrec, rldr_data_.pvname (pvindex));
	    end;
	end;
      end;
      if ^match then do;
	code = unusable;
	call rldr_report_$online_output (rldr_datap, 0, myname, "Partition ^a not found on physical volume ^a",
	  backup_volume_log.parts (vidx).part, rldr_data_.pvname (pvindex));
        end;
    end;
    return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


get_aim_access_: proc (access) returns (char (32));

/* This proc returns an AIM access class in a printable form. */

dcl access	     bit (72) aligned;
dcl aim_access	     char (32);
    call convert_aim_attributes_ (access, aim_access);
    return (aim_access);

  end get_aim_access_;

%include rldr_data_;

%include backup_volume_log;

%include backup_volume_header;
%include backup_pvol_info;

%include fs_vol_label;

%include vtoc_header;
%include vol_map;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   rldr_check_pvol_: Unitialized output volume

   S:	$rld_on

   T:	$reload

   M:	The output volume must be initialized with init_vol before use.

   A:	Switch the output volume to storage-system status
   with the sdu command and then use init_vol to set it up.


   Message:
   rldr_check_pvol_: Reload may overflow volume
   .br
   rldr_check_pvol_: Have NN records; Volog label requires NN records

   S:	$rld_on

   T:	$reload

   M:	The output volume is too small.

   A:	Reinitialize it correctly with init_vol.


   Message:
   rldr_check_pvol_: Reload may overflow vtoc
   .br
   rldr_check_pvol_: Have NN vtoce; Volog label requires NN vtoce

   S:	$rld_on

   T:	$reload

   M:	The output volume has too small a VTOC.

   A:	Reinitialize the output volume with init_vol.


   Message:
   rldr_check_pvol_: Volume mismatch
   .br
   rldr_check_pvol_: Have PVNAME,pvid = WWW; Volog label requires PVNAME,pvid = WWW

   S:	$rld_on

   T:	$reload

   M:	The output volume label disagrees with the volume log.

   A:	Reinitialize the output volume correctly with init_vol.


   Message:
   rldr_check_pvol_: Maximum access class mismatch
   .br
   rldr_check_pvol_: Have ACCESS_CLASS; Volog label requires ACCESS_CLASS

   S:	$rld_on

   T:	$reload

   M:	The maximum access class for the volume does not match the volume log.

   A:	$tryagn


   Message:
   rldr_check_pvol_: Minimum access class mismatch
   .br
   rldr_check_pvol_: Have ACCESS_CLASS; Volog label requires ACCESS_CLASS

   S:	$rld_on

   T:	$reload

   M:	The minimum access class for the volume does not match the volume log.

   A:	$tryagn


   Message:
   rldr_check_pvol_: Partition NAME size mismatch
   .br
   rldr_check_pvol_: Have NN records; Volog label requires MM

   S:	$rld_on

   T:	$reload

   M:	The size for partition NAME does not match.

   A:	Reinitialize the volume correctly.


   Message:
   rldr_check_pvol_: Partition NAME not found on physical volume

   S:	$rld_on

   T:	$reload

   M:	The partition NAME is missing from the volume label.

   A:	Reinitialize the volume correctly.


   END MESSAGE DOCUMENTATION */

  end rldr_check_pvol_;
