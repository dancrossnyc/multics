/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-02-11,GWMay), approve(), audit(), install():
     old history comments:
         Written in antiquity by Dave Vinograd.
         Modified: 03/83 by GA Texada to support multiple physical volume
                        reloading.
         Modified: Jan. 1985 by Greg Texada (fix by Steve Harris UNCA) to not
                        checksum null vtoces (phx18754).
         Modified: Feb. 1985 by Greg Texada for hardcore 821
  2) change(86-02-11,GWMay), approve(86-07-10,MCR7445), audit(86-07-14,GDixon),
     install(86-11-21,MR12.0-1223):
     added the value pvindex to the vtoc_buffer.array structure for use as
     a backward link to the owner PV info stored in rldr_data_. Changed the
     write routine to better implement the use of a single segment containing
     a the vtoc_buffer array limited to 100 entries. Formerly, a separate
     segment was created for each PV entry in rldr_data_. To reduce storage
     requirements for reloading when only the rpv is available, the vtoce segs
     were limited to one common segment to be used by all of the PVs. The idea
     is now to fill the buffer and then flush it when and end of volume is
     encountered or the array tops out at the limit. To make the emptying of
     the array easier, I added the pvindex value to the vtoc_buffer structure.
     The code now lopps throught the vtoc_buffer outputting the vtoce to the
     corresponding PV pointed to by vtoc_buffer.array(xxx).pvindex. Then
     clears both the control buffer_index and the vtoc_buffer entry.
                                                   END HISTORY COMMENTS */


/* format: style1,ind2,^inddcls,ifthenstmt,dclind2,declareind2,ifthendo,ifthen*/

rldr_vtoc_buffer_: proc;


dcl (buffer_idx, pvindex, vtocx) fixed bin;
dcl code		     fixed bin (35);

dcl myname	     char (32) int static init ("rldr_vtoc_buffer_") options (constant);
dcl all_parts	     fixed bin static init (3) options (constant);

dcl filemap_checksum_    entry (ptr, fixed bin, bit (36) aligned);
dcl rldr_report_$error_output entry options (variable);
dcl rldr_vtoc_buffer_$write entry (ptr, fixed bin (35));
dcl rldr_output_$read_vtoce entry (ptr, fixed bin, ptr, fixed bin, fixed bin, fixed bin (35));
dcl rldr_output_$write_vtoce entry (ptr, fixed bin, ptr, fixed bin, fixed bin, fixed bin (35));

dcl (addr, bin, hbound, lbound, unspec) builtin;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


put: entry (rldr_datap, pvindex, vtocep, vtocx, code);
    code = 0;
    vtocbp = rldr_data_.vtocbp (pvindex);
    controlp = rldr_data_.controlp (pvindex);
    if vtoc_buffer.next = hbound (vtoc_buffer.array, 1) then
      call rldr_vtoc_buffer_$write (rldr_datap, 0);
    vtoc_buffer.next = vtoc_buffer.next + 1;
    rldr_control (vtocx).buffer_idx = vtoc_buffer.next;
    vtoc_buffer (vtoc_buffer.next).vtocx = vtocx;
    vtoc_buffer (vtoc_buffer.next).pvindex = pvindex;
    unspec (vtoc_buffer (vtoc_buffer.next).vtoce) = unspec (vtocep -> vtoce);
    return;
 
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


get: entry (rldr_datap, pvindex, vtocep, vtocx, code);
    code = 0;
    vtocbp = rldr_data_.vtocbp (pvindex);
    controlp = rldr_data_.controlp (pvindex);
    buffer_idx = rldr_control (vtocx).buffer_idx;
    if buffer_idx = 0 then
      call rldr_output_$read_vtoce (rldr_datap, pvindex, vtocep, vtocx, all_parts, code);
    else unspec (vtocep -> vtoce) = unspec (vtoc_buffer (buffer_idx).vtoce);
    return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

write: entry (rldr_datap, code);

    code = 0;
    vtocbp = rldr_data_.vtocbp (1);			/* use 1 because the vtoc buffer is */
						/* always in the same segment.      */
						/* walk through the vtoc_buffer     */

    do buffer_idx = lbound (vtoc_buffer.array, 1) to vtoc_buffer.next;
						/* fill in vtoce info before output */

       if vtoc_buffer (buffer_idx).vtoce.uid ^= "0"b then do;
	call filemap_checksum_ (addr (vtoc_buffer (buffer_idx).vtoce.fm (0)),
	   bin (vtoc_buffer (buffer_idx).vtoce.csl),
	   vtoc_buffer (buffer_idx).vtoce.fm_checksum);
	vtoc_buffer (buffer_idx).vtoce.fm_checksum_valid = "1"b;
	vtoc_buffer (buffer_idx).vtoce.fm_damaged = "0"b;
       end;
						/* get the rldr control info for     */
						/* this vtoce.		       */

       controlp = rldr_data_(vtoc_buffer(buffer_idx).pvindex).controlp;

						/* write this vtoc_buffer entry vtoce*/
						/* to disk.		       */

       call rldr_output_$write_vtoce (rldr_datap, 
	vtoc_buffer (buffer_idx).pvindex,
	addr (vtoc_buffer (buffer_idx).vtoce),
	vtoc_buffer (buffer_idx).vtocx, all_parts, code);

       if code ^= 0 then
	call rldr_report_$error_output (rldr_datap, code, myname,
	   "Unable to update vtoce ^o on pv ^a",
	    vtoc_buffer (buffer_idx).vtocx, 
	    rldr_data_.pvname (vtoc_buffer(buffer_idx).pvindex));

						/* wipe out the control index which  */
						/* pointed to this vtoc_buffer entry */

       rldr_control(vtoc_buffer.array(buffer_idx).vtocx).buffer_idx = 0;

						/* now wipe out this vtoc_buffer ent.*/

       unspec (vtoc_buffer.array(buffer_idx)) = "0"b;

    end;
						/* reset the limiter of the array    */
    vtoc_buffer.next = 0;
    return;

%include rldr_data_;

%include fs_vol_label;
%include vol_map;
%include vtoc_header;

%include rldr_vtoc_buffer;
%include rldr_control;

%include vtoce;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   rldr_vtoc_buffer_: Unable to update vtoce WWW: ERROR_MESS

   S:	$rld_out

   T:	$reload

   M:	An error occurred updating a VTOCE. Reloading continues.

   A:	$ignore


   END MESSAGE DOCUMENTATION */

  end rldr_vtoc_buffer_;
