/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1992   *
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style1,ind2,^inddcls,ifthenstmt,dclind2,declareind2,ifthendo,ifthen*/

rldr_arg_reader_: proc (rldr_datap, a_alp, a_code);

/* This routine reads and handles the arguments
   *   for the reloader.
   *
   *  Usage:  dcl rldr_arg_reader_ entry ( pointer, pointer, fixed bin (35));
   *
   *	call rldr_arg_reader_ (rldr_datap, a_alp, a_code);
   *
   *	where
   *
   *      1) rldr_datap       is a pointer to the reloader data structure (Input).
   *
   *	2) a_alp		is a pointer to the argument list (Input).
   *
   *	3) a_code		is a standard status code (Output).
   *
   *	Modified 2/79 by Michael R. Jordan for MSS0500 support.
   *	Modified 3/1/83 by GA Texada for multiple physical volume reloading.
   *	Modified 3/6/84 by GA Texada for 'stranger' pv reloading.

*/

/****^  HISTORY COMMENTS:
  1) change(86-01-15,Fawcett), approve(86-04-11,MCR7383),
     audit(86-06-03,GWMay), install(86-07-17,MR12.0-1097):
     Add support for subvolumes by implementing the -pvname_device argument.
  2) change(86-02-25,Lippard), approve(86-04-11,MCR7383),
     audit(86-06-03,GWMay), install(86-07-17,MR12.0-1097):
     Initialize lmpvi to 0 at the beginning.
  3) change(86-10-23,Fawcett), approve(86-10-23,MCR7517),
     audit(86-10-30,Beattie), install(86-11-03,MR12.0-1206):
     Changed to remove the word BOS from message.
  4) change(92-09-14,WAAnderson), approve(92-09-14,MECR0017),
     audit(92-09-22,Vu), install(92-09-25,MR12.5-1018):
     The value of rldr_data_.usable_sectors is not being calculated properly
     for FIPS disks.  The constant 16 is being used instead of the appropriate
     value in sect_per_rec (declard in fs_dev_types_sector.incl.pl1). The
     result is a corrupted disk.  This fix replaces 16 with sect_per_rec.
  5) change(92-10-02,WAAnderson), approve(92-10-02,MCR8272),
     audit(92-10-13,Vu), install(92-10-21,MR12.5-1039):
     This MCR closes MECR0017.
                                                   END HISTORY COMMENTS */


dcl YES		     bit (1);
dcl (ignore, a_code, code) fixed bin (35);
dcl (a_alp, alp, ap, lmpvsp) ptr;
dcl (ac, al, nargs, i, j, lmpvi, mpvs) fixed bin;
dcl arg		     char (al) based (ap);
dcl 1 local_mpvs	     (mpvs) based (lmpvsp),
    2 pv		     char (32),
    2 dv		     char (8);


dcl myname	     char (16) int static init ("rldr_arg_reader_") options (constant);

dcl error_table_$bad_arg ext fixed bin (35);
dcl error_table_$namedup ext fixed bin (35);
dcl error_table_$noarg   ext fixed bin (35);
dcl error_table_$badopt  ext fixed bin (35);
dcl error_table_$inconsistent ext fixed bin (35);

dcl command_query_$yes_no entry () options (variable);
dcl hcs_$fs_search_get_wdir entry (ptr, fixed bin (35));
dcl rldr_report_$error_output entry options (variable);
dcl cu_$arg_ptr_rel	     entry (fixed bin, ptr, fixed bin, fixed bin (35), ptr);
dcl cu_$arg_count_rel    entry (fixed bin, ptr, fixed bin (35));

dcl (addr, divide, hbound, null, search, substr) builtin;
dcl cleanup	     condition;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

    code = 0;					/* set up and copy args */
    ac = 0;					/* first arg to fetch */
    alp = a_alp;					/* arg list pointer */
    lmpvsp = null ();
    lmpvi = 0;
    mpvs = 0;
    call cu_$arg_count_rel (nargs, alp, code);		/* find out how many for later.		*/
    do ac = 1 to nargs by 1;				/* scan the arg list */
      call cu_$arg_ptr_rel (ac, ap, al, code, alp);
      if code ^= 0 then do;
	if code = error_table_$noarg then return;
	else goto err;
        end;
continue_with_args:
      if arg = "-working_dir" | arg = "-wd" then
        rldr_data_.sys_dir = wdir_ ();
      else if arg = "-operator" then do;		/* this must be operator name */
	ac = ac + 1;
	call cu_$arg_ptr_rel (ac, ap, al, code, alp);
	if code ^= 0 then goto err;
	rldr_data_.operator = arg;
        end;
      else if arg = "-output_volume_desc" then do;	/* this must be attach description  */
	ac = ac + 1;
	call cu_$arg_ptr_rel (ac, ap, al, code, alp);
	if code ^= 0 then goto err;
	rldr_data_.output_volume_desc = arg;
        end;
      else if arg = "-input_volume_desc" then do;		/* this must be attach description  */
	ac = ac + 1;
	call cu_$arg_ptr_rel (ac, ap, al, code, alp);
	if code ^= 0 then goto err;
	rldr_data_.input_volume_desc = arg;
	rldr_data_.io_module = substr (arg, 1, search (arg, " ") - 1);
        end;
      else if arg = "-pvname_device" | arg = "-pvdv" then do;
	if (nargs - ac) <= 0 then do;			/* must have a physical volume name left	*/
	    goto no_pv_specified;
	  end;
	if lmpvsp = null () then do;
	    mpvs = nargs - ac;
	    allocate local_mpvs set (lmpvsp);
	    on cleanup begin;
	        if lmpvsp ^= null () then free local_mpvs;
	      end;
	  end;
get_next_pv_dev:
	ac = ac + 1;
	if ac > nargs then do;
	    if lmpvi > 0 then goto check_consistency_args;
	    else goto no_pv_specified;
	  end;
	call cu_$arg_ptr_rel (ac, ap, al, code, alp);
	if code ^= 0 then goto err;
	if substr (arg, 1, 1) = "-" then do;		/* this is the next ctl arg			*/
	    if lmpvi = 0 then do;			/* if we didn't get a pv name then		*/
	        call rldr_report_$error_output (rldr_datap, error_table_$noarg, myname,
						/* its an error				*/
		   "Expected physical volume name(s), found ^a", arg);
	        goto clean_up;
	      end;
	    else goto continue_with_args;
	  end;
	do j = 1 to lmpvi;				/* check for duplicate pv names now		*/
	  if local_mpvs (j).pv = arg then do;
	      code = error_table_$namedup;		/* make it meaninful			*/
	      call rldr_report_$error_output (rldr_datap, code, myname, "Physical volume ^a specified more than once",
		 arg);
	      goto clean_up;
	    end;
	end;
	lmpvi = lmpvi + 1;
	local_mpvs (lmpvi).pv = arg;
	ac = ac + 1;
	call cu_$arg_ptr_rel (ac, ap, al, code, alp);
	if code ^= 0 then goto err;
	if substr (arg, 1, 1) = "-" then do;
no_val_dev:
	    call rldr_report_$error_output (rldr_datap, error_table_$noarg, myname,
						/* its an error				*/
	         "Expected device name, found ^a", arg);
	    goto clean_up;
	  end;
	if al > 8 then goto no_val_dev;
	if substr (arg, 1, 3) ^= "dsk" then goto no_val_dev;
	local_mpvs (lmpvi).dv = arg;
	if local_mpvs (lmpvi).pv = "rpv" then rldr_data_.rpv = "1"b;
	goto get_next_pv_dev;
        end;

      else if arg = "-pvname" then do;
	if lmpvsp = null () then do;
	    mpvs = nargs - ac;
	    if mpvs <= 0 then do;			/* must have a physical volume name left	*/
no_pv_specified:
	        code = error_table_$noarg;
	        call rldr_report_$error_output (rldr_datap, code, myname, "Expected a physical volume name");
	        goto clean_up;
	      end;

	    allocate local_mpvs set (lmpvsp);
	    on cleanup begin;
	        if lmpvsp ^= null () then free local_mpvs;
	      end;

	  end;
get_next_pvname:
	ac = ac + 1;
	if ac > nargs then do;
	    if lmpvi > 0 then goto check_consistency_args;
	    else goto no_pv_specified;
	  end;
	call cu_$arg_ptr_rel (ac, ap, al, code, alp);
	if code ^= 0 then goto err;
	if substr (arg, 1, 1) = "-" then do;		/* this is the next ctl arg			*/
	    if lmpvi = 0 then do;			/* if we didn't get a pv name then		*/
	        call rldr_report_$error_output (rldr_datap, error_table_$noarg, myname,
						/* its an error				*/
		   "Expected physical volume name(s), found ^a", arg);
	        goto clean_up;
	      end;
	    else goto continue_with_args;
	  end;
	do j = 1 to lmpvi;				/* check for duplicate pv names now		*/
	  if local_mpvs (j).pv = arg then do;
	      code = error_table_$namedup;		/* make it meaninful			*/
	      call rldr_report_$error_output (rldr_datap, code, myname, "Physical volume ^a specified more than once",
		 arg);
	      goto clean_up;
	    end;
	end;
	lmpvi = lmpvi + 1;
	local_mpvs (lmpvi).pv = arg;
	local_mpvs (lmpvi).dv = "";
	if local_mpvs (lmpvi).pv = "rpv" then rldr_data_.rpv = "1"b;
	goto get_next_pvname;
        end;

      else if arg = "-disk_model" then do;		/* we will only use rldr_data_.disk_model(1)	*/
	ac = ac + 1;				/* because -disk_model is NOT allowed		*/
	call cu_$arg_ptr_rel (ac, ap, al, code, alp);	/* when multiple physical volumes are		*/
	if code ^= 0 then goto err;			/* to be reloaded, so it doesn't hurt		*/
	rldr_data_.disk_model (1) = arg;
	if rldr_data_.disk_model (1) = "m400" then rldr_data_.disk_model (1) = "d400"; /* For MR7.0 only */
	else if rldr_data_.disk_model (1) = "m450" then rldr_data_.disk_model (1) = "d450"; /* For MR7.0 only */
	do i = 1 to hbound (device_names, 1) while (device_names (i) ^= rldr_data_.disk_model (1));
	end;
	if i > hbound (device_names, 1) then goto bad_arg;
	rldr_data_.usable_sectors (1) = divide (sect_per_cyl (i), sect_per_rec (i), 17, 0) * sect_per_rec (i);
	rldr_data_.unusable_sectors (1) = sect_per_cyl (i) - rldr_data_.usable_sectors (1);
        end;
      else if arg = "-save" then rldr_data_.save = "1"b;
      else if arg = "-no_detach" then rldr_data_.detach = ""b; /* don't detach */
      else if arg = "-no_object" then rldr_data_.no_object = "1"b; /* don't write object */
      else if arg = "-manual" then rldr_data_.manual = "1"b;
      else if arg = "-restart" then rldr_data_.common.restart = "1"b;
      else if arg = "-error_on" then rldr_data_.err_online = "1"b;
      else do;
	code = error_table_$badopt;
	goto err;
        end;
    end;
check_consistency_args:				/* Check consistency of args			*/
    rldr_data_.npvs = lmpvi;				/* set the bounds				*/
    do lmpvi = 1 to rldr_data_.npvs;
      rldr_data_.pvname (lmpvi) = local_mpvs (lmpvi).pv;
      rldr_data_.device_name (lmpvi) = local_mpvs (lmpvi).dv;
    end;
    free local_mpvs;				/* finished with this now, so			*/
    lmpvsp = null ();				/* and set for clean_up			*/

    if rldr_data_.npvs > 1 then do;
        if ((rldr_data_.detach = ""b) | (rldr_data_.disk_model (1) ^= "")) then do;
	  code = error_table_$inconsistent;
	  call rldr_report_$error_output (rldr_datap, code, myname,
	       "^[-no_detach^] ^[-disk_model^] not allowed when reloading multiple physical volumes",
	       (rldr_data_.detach = ""b), (rldr_data_.disk_model (1) ^= ""));
	  goto clean_up;
	end;
        if rldr_data_.save then do;
	  call command_query_$yes_no (YES, 0, myname,
	       "The use of -save and more than one physical volume implies that all pv's named have been restored at BCE",
	       "Have all pv's named been restored at BCE");
	  if ^YES then do;
	      code = error_table_$bad_arg;
	      goto clean_up;
	    end;
	end;
      end;
    goto clean_up;					/* get around this old stuff			*/
bad_arg: code = error_table_$bad_arg;
err: call rldr_report_$error_output (rldr_datap, code, myname, "^a", arg);
clean_up:
    if lmpvsp ^= null () then free local_mpvs;
    a_code = code;
    return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


wdir_: proc returns (char (168) aligned);

/* This proc returns the working directory */

dcl wdir		     char (168) aligned;
    call hcs_$fs_search_get_wdir (addr (wdir), ignore);
    return (wdir);
  end wdir_;

%include rldr_data_;

%include backup_static_variables;
%include fs_dev_types;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   rldr_arg_reader_: ARG: ERROR_MESS

   S:	$info

   T:	$run

   M:	Invalid arguments were given to the reloader.

   A:	$tryagn

   Message:
 rldr_arg_reader_: Implementation Restriction, the RPV must be reloaded
 separately to obtain the required physical volume information.

   S:	$info

   T:	$run

   M:	Due to an implementation restriction, the RPV must be reloaded
	separately from the other physical volumes. Reload the RPV first,
	then re-invoke the reload_volue command with the other physical
	volume names to be reloaded.

   A:	$tryagn


   END MESSAGE DOCUMENTATION */

  end rldr_arg_reader_;
