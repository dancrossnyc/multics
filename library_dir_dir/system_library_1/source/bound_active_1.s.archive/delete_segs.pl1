/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */


delete_segs:
     procedure;

/* RE Mullen, v2pl1 oct 1973 */

/* Modified by Andre Bensoussan for new storage system - Feb 1975 */
/* 5/13/76 by BSG for prewithdrawing */
/* Modified March 1982, J. Bongiovanni, not to deposit addresses for init
   and temp segs */
/* Modified August 1982, J. Bongiovanni, to eliminate RLV parasites */
/* Modified November 1982 by C. Hornig to zero LOT entries */
/* Modified October 1983 to properly handle abs-segs */
/* Modified December 1983 by Keith Loepere for breakpoint page processing */

	dcl     list		 bit (18) unaligned based (aste_list_ptr);

	dcl     seg_size		 fixed bin (26);
	dcl     segno		 fixed bin (15);
	dcl     ptsi		 fixed bin (2);	/* page table size index (0-3 => 4k-256k) */
	dcl     aste_list_ptr	 ptr;

	dcl     pc$cleanup		 entry (ptr);
	dcl     pc$truncate		 entry (ptr, fixed bin);
	dcl     ptw_util_$make_null	 entry (ptr, bit (22) aligned);
	dcl     sdw_util_$get_size	 entry (ptr, fixed bin (26));
	dcl     thread$cin		 entry (ptr, bit (18));
	dcl     thread$out		 entry (ptr, bit (18));

	dcl     dseg$		 (0:4095) fixed bin (71) external;
	dcl     lot$		 (0:4095) fixed bin (35) external;
	dcl     slt$		 external;
	dcl     sst$		 external;
	dcl     sst$ainitp		 bit (18) unaligned external;
	dcl     sst$atempp		 bit (18) unaligned external;
	dcl     1 sst$level		 (0:3) aligned external,
		2 ausedp		 bit (18) unaligned,
		2 no_aste		 bit (18) unaligned;

	dcl     (addr, addrel, divide, ptr, rel, size, fixed) builtin;
%page;
/* * * * * * * * * TEMP * * * * * * * * * */

temp:
     entry;

	sltp = addr (slt$);
	aste_list_ptr = addr (sst$atempp);
	call expunge_segs;
	return;

/* * * * * * * * * * * DELETE_SEGS_INIT * * * * * * * * * */

delete_segs_init:
     entry;

	sltp = addr (slt$);				/* Get pointer to the SLT. */
	aste_list_ptr = addr (sst$ainitp);
	call expunge_segs;
	do segno = slt.first_init_seg to slt.last_init_seg;
						/* Iterate through the SLT init segs. */
	     dseg$ (segno) = 0;			/* Clear the SDW. */
	     lot$ (segno) = 0;
	end;
	return;

expunge_segs: proc;					/* delete segs in sst list */

	do while (aste_list_ptr -> list ^= "0"b);	/* Loop over all entries on list. */
	     astep = ptr (addr (sst$), aste_list_ptr -> list); /* Set AST pointer to next (top) entry. */
	     segno = fixed (astep -> aste.strp, 15);	/* Get segment number from AST entry */
	     sltep = addr (slt.seg (segno));
	     if slte.breakpointable & slte.wired then do; /* don't truncate breakpoint_page */
		     call sdw_util_$get_size (addr (dseg$ (segno)), seg_size);
		     call ptw_util_$make_null (addrel (astep, size (aste) + divide (seg_size, 1024, 17) - 1), make_sdw_null_addr);
		end;
	     dseg$ (segno) = 0;			/* Zero the SDW. */
	     lot$ (segno) = 0;
	     ptsi = fixed (astep -> aste.ptsi, 2);
	     astep -> aste.ddnp = "0"b;		/* Uninhibit depositable address reporting */

	     if slte.abs_seg then call pc$cleanup (astep);/* Just flush pages not in hc part */
	     else call pc$truncate (astep, 0);		/* free hc part pages */

	     call thread$out (astep, aste_list_ptr -> list); /* Thread entry out of its list. */

	     call thread$cin (astep, sst$level.ausedp (ptsi));
						/* thread the entry into the used list */
	     sst$level.ausedp (ptsi) = rel (astep);
	     astep -> aste_part.two = "0"b;		/* Zero the ASTE except fp, bp, ptsi and marker */
	end;
	return;
     end;
%page;
%include aste;
%include null_addresses;
%include slt;
%include slte;
     end delete_segs;
