" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                                    "
"	fast_connect_init                                          "
"                                                                    "
"	This routine is called during initialization of the prds   "
"	to initialize the connect fault handling code.             "
"                                                                    "
"	The code is copied to the prds, and is called directly on  "
"	a connect fault via the connect fault vector.  Its         "
"	purpose is to optimize the most frequent type of connect   "
"  	fault (to clear cam/cache) by doing so with minimal        "
"	context saving/restoring.  It also checks for other types  "
"	of connects, and transfers to wired_fim if necessary to    "
"	handle these. Otherwise, it returns to the interrupted     "
"	process.                                                   "
"                                                                    "
"	This routine does the following:                           "
"                                                                    "
"		1. copies the fast connect code (contained       "
"		   herein) to the prds                           "
"		2. fills in its pointers needed by this code     "
"		3. adjusts its pointers for per-processor arrays "
"		   to point to the correct array elements        "
"                                                                    "
"	Calling sequence:                                          "
"                                                                    "
"	call  fast_connect_init (prds_ptr, processor_tag, code)    "
"                                                                    "
"		prds_ptr = pointer to prds being initialized     "
"		processor_tag = cpu tag for cpu being initialized"
"		code = status code (0=>OK, ^0=>incorrect code    "
"		          size)			         "
"                                                                    "
"                                                                    "
"	Written February 1981 by J. Bongiovanni                    "
"	Modified 84-01-10 by SGH (UNCA) to fix cam_wait race.      "
"                                                                    "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

	name	fast_connect_init
	entry	fast_connect_init

"
	include	apte
	include	scs
	include	fault_vector
	include	mc

"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                                    "
"	This is the fast connect code which is copied to the prds  "
"                                                                    "
"	This code does the following                               "
"                                                                    "
"	1. As quickly as possible, check for cam/cache-clear       "
"	   pending and do it                                       "
"                                                                    "
"	2. With minimal register usage, check for other types of   "
"	   connects (saving all registers it uses).  To speed      "
"	   things up, skip checks for this processor (e.g., check  "
"	   for sys_trouble_pending on any processor). The real     "
"	   connect handler will straighten things out. Also check  "
"	   for tracing machine conditions.                         "
"                                                                    "
"	3. If no other type of connect pending, restore all        "
"	   registers it uses (hopefully not many), and return to   "
"	   the interrupted process directly                        "
"                                                                    "
"	4. If any other type of connect pending, restore all       "
"	   registers it uses, and transfer to the connect fault    "
"	   handler                                                 "
"                                                                    "
"	If the size of this code changes, this must be reflected   "
"	in the prds                                                "
"                                                                    "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+><+><+><+><+>

	even

fast_connect_code:
	staq	save_aq_temp-*,ic		we only use/restore a and q
	szn	fast_cam_pending_cpu-*,ic*	cam/cache pending this cpu
	tze	next-*,ic			no--check for other connects
	szn	cam_wait-*,ic*		cam with wait
	tnz	continue_quick-*,ic           yes--go to connect handler
	xed	cam_pair-*,ic*		cam/cache clear
	stz	fast_cam_pending_cpu-*,ic*	flag that we cleared
next:	
	staq	save_aq_temp-*,ic		we only use/restore a and q
	szn	sys_trouble_pending-*,ic*	sys_trouble action going down
	tnz	continue-*,ic		yes--go to connect handler
	szn	processor_start_wait-*,ic*	waiting for cpu to start
	tnz	continue-*,ic		yes--go to connect handler
	lda	processor_data_cpu-*,ic*	processor data this cpu
	cana	processor_data.delete_cpu,du  should this cpu delete self
	tnz	continue-*,ic		yes--go to connect handler
	lda	apte.flags,du		au=offset into apte to check
apte_ptr_au_1:
	ldq	0,*au			ldq with my apte.flags
	canq	apte.pre_empt_pending+apte.stop_pending,du
	tnz	continue-*,ic		pre-empt or stop
	lda	apte.ips_message,du		au=offset into apte to check
apte_ptr_au_2:
	ldq	0,*au			ldq with my apte.ips_message
	tnz	continue-*,ic		ips message pending
	szn	pds_mc_trace_sw-*,ic*	are we tracing machine conditions
	tmi	continue-*,ic		yes--go to connect handler
	lda	scu.indicators_word,du	check whether EIS instruction
	lda	scu_info_au-*,ic*		 was interrupted
	cana	scu.ir.mif,dl		   in mid-stream
	tze	skip_spl_lpl-*,ic		transfer if not
	lda	mc.eis_info-mc.scu,du	we must reset the EIS box
	spl	scu_info_au-*,ic*		thusly
	lpl	scu_info_au-*,ic*
skip_spl_lpl: 
	lda	scu.cpu_no_word,du		get offset of SCU2 in AU
	lda	scu_info_au-*,ic*		load A with SCU2
	ana	scu.cpu_no_mask,dl		mask unwanted bits
	als	7+12			right justify in AU, multiply by 128
	aos	fault_counters_connect-*,ic*	bump count of connect faults	
	ldaq	save_aq_temp-*,ic		restore what we used
cache_luf_reg:
	lcpr	0,02			turn on cache (prds$cache_luf_reg)
mode_reg_enabled:
	lcpr	0,04			and history registers (prds$mode_reg_enabled)
	rcu	scu_info-*,ic*		and restart

continue:
continue_quick: 
	lda	scu.cpu_no_word,du		get offset of SCU2 in AU
	lda	scu_info_au-*,ic*		load A with SCU2
	ana	scu.cpu_no_mask,dl		mask unwanted bits
	als	7+12			right justify in AU, multiply by 128
	aos	fault_counters_connect-*,ic*	bump count of connect faults	
	ldaq	save_aq_temp-*,ic		restore what we used
	tra	connect_handler-*,ic*	do full connect fault


	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><-><-><-><->
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                                    "
"	its pointers and data for fast connect code                "
"	This also lives on the prds                                "
"                                                                    "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

	even
save_aq_temp:
	bss	,2			temp storage for a and q
fast_cam_pending_cpu:
	its	-1,1			scs$fast_cam_pending+<cpu tag>
cam_pair:
	its	-1,1			scs$cam_pair
cam_wait:
	its	-1,1			scs$cam_wait
fault_counters_connect:
	its	-1,1			wired_hardcore_data$fault_counters
					" +FAULT_NO_CON mod by AU
sys_trouble_pending:
	its	-1,1			scs$sys_trouble_pending
processor_start_wait:
	its	-1,1			scs$processor_start_wait
processor_data_cpu:
	its	-1,1			scs$processor_data+<cpu tag>
scu_info:
	its	-1,1			copy of its pointer for scu in fault_vector
scu_info_au:
	its	-1,1			its pointer for scu in FV mod by au
connect_handler:
	its	-1,1			wired_fim$connect_handler
pds_mc_trace_sw: 
	its	-1,1			pds$mc_trace_sw	

	equ	fast_connect_code_words,*-fast_connect_code
	equ	fast_connect_code_chars,4*fast_connect_code_words


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                                    "
"	End of fast connect code copied to prds                    "
"                                                                    "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"

	
	link	fast_cam_pending_cpu_link,scs$fast_cam_pending
	link	cam_pair_link,scs$cam_pair
	link	cam_wait_link,scs$cam_wait
	link	fault_counters_connect_link,wired_hardcore_data$cpu_a_flt_ctr_array+FAULT_NO_CON,au
	link	sys_trouble_pending_link,scs$sys_trouble_pending
	link	processor_start_wait_link,scs$processor_start_wait
	link	processor_data_cpu_link,scs$processor_data
	link	apte_ptr_au_1_link,prds$apt_ptr
	link	apte_ptr_au_2_link,prds$apt_ptr
	link	cache_luf_reg_link,prds$cache_luf_reg
	link	mode_reg_enabled_link,prds$mode_reg_enabled
	link	fast_connect_code_link,prds$fast_connect_code
	link	fast_connect_code_end_link,prds$fast_connect_code_end
	link	scu_info_link,fault_vector$0+fv.f_scu_ptr+2*FAULT_NO_CON,*
	link	connect_handler_link,wired_fim$connect_handler
	link	scu_info_au_link,fault_vector$0+fv.f_scu_ptr+2*FAULT_NO_CON,*au
	link	pds_mc_trace_sw_link,pds$mc_trace_sw


	equ	pr2,2
	equ	pr4,4		" so that symbolic itp works

"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                                    "
"	Table to define its pointers in prds to be filled in       "
"                                                                    "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

	macro	its_link
	itp	pr4,&1_link
	itp	pr2,&1-fast_connect_code
	&end


	even
its_link_table:
	its_link	fast_cam_pending_cpu
	its_link	cam_pair
	its_link	cam_wait
	its_link	fault_counters_connect
	its_link	sys_trouble_pending
	its_link	processor_start_wait
	its_link	processor_data_cpu
	its_link	scu_info
	its_link	scu_info_au
	its_link	connect_handler
	its_link	pds_mc_trace_sw
its_link_table_end:

	equ	its_link_table_entry,4
	

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                                    "
"	Table of its pointers which refer to per-processor arrays  "
"	These pointers are adjusted by cpu tag                     "
"                                                                    "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


	macro	cpu_reloc
	itp	pr2,&1_cpu-fast_connect_code+1
	&end


cpu_tag_reloc_table:
	cpu_reloc	fast_cam_pending
	cpu_reloc	processor_data
cpu_tag_reloc_table_end:

	equ	cpu_tag_reloc_entry,2
	
"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                                    "
"	Table of instructions which refer to prds locations        "
"	outside of the fast connect code.  These will be           "
"	set appropriately.                                         "
"                                                                    "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


	macro	prds_rel
	itp	pr4,&1_link
	itp	pr2,&1-fast_connect_code
	&end


prds_rel_table:
	prds_rel	apte_ptr_au_1
	prds_rel	apte_ptr_au_2
	prds_rel	cache_luf_reg
	prds_rel	mode_reg_enabled
prds_rel_table_end:

	equ	prds_rel_table_entry,4
	


"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                                    "
"	Make sure the space reserved in the prds is the	         "
"	right size				         "
"						         "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
	
fast_connect_init:
	stz	pr0|6,*			clear return code
	eaa	pr4|fast_connect_code_link,*  au=offset of begin of code in prds
	neg
	eax0	pr4|fast_connect_code_end_link,*au  x0=length of area for code
	cmpx0	fast_connect_code_words,du	expected length
	tze	copy_fast_connect_code	correct
	stc1	pr0|6,*			return non-zero error code
	short_return			(no error_table_ yet)

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                                    "
"	Move the fast connect code to the prds                     "
"                                                                    "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

copy_fast_connect_code: 	
	epp1	pr0|2,*			
	epp1	pr1|0,*			pr1 -> base of new prds
	epaq	pr4|fast_connect_code_link,*	its pointer to prds$fast_connect_code
	epp2	pr1|0,qu			pr2->fast connect code in new prds

	mlr	(),(pr)
	desc9a	fast_connect_code,fast_connect_code_chars
	desc9a	pr2|0,fast_connect_code_chars



"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                                    "
"	Fill in its pointers                                       "
"                                                                    "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


	ldx0	its_link_table_end-its_link_table,du

next_its:
	eax0	-its_link_table_entry,x0	bump to next entry
	tmi	its_done			done table
	ldaq	its_link_table,x0*		proper its pointer
	staq	its_link_table+2,x0*		fill it in
	tra	next_its

its_done:



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                                    "
"	Adjust its pointers which refer to per-processor arrays    "
"                                                                    "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

	ldx0	cpu_tag_reloc_table_end-cpu_tag_reloc_table,du
	lxl1	pr0|4,*			cpu tag for new processor

next_cpu_tag:
	eax0	-cpu_tag_reloc_entry,x0	bump to next table entry
	tmi	cpu_tag_done		done table
	asx1	cpu_tag_reloc_table,x0*	adjust pointer by cpu tag
	tra	next_cpu_tag

cpu_tag_done:

"


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                                    "
"	Adjust addresses of instructions which refer to prds       "
"	cells outside of the fast connect code                     "
"                                                                    "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


	ldx0	prds_rel_table_end-prds_rel_table,du

next_prds_rel:
	eax0	-prds_rel_table_entry,x0	bump to next table entry
	tmi	prds_rel_done		done table
	ldaq	prds_rel_table,x0*		its pointer into prds
	eax1	0,qu			offset into prds
	stx1	prds_rel_table+2,x0*		into address field of instruction
	tra	next_prds_rel

prds_rel_done:


	short_return

	


	end
	