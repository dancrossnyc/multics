/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


sdw_util_: proc ();

	return;					/* Not an entrypoint */

/* *	SDW_UTIL_
   *
   *	This procedure is used to construct and modify SDWs. It uses the structure
   *	appropriate for the running system, or whichever one was requested, so that
   *	its callers need not be aware of multiple formats for SDWs. This procedure
   *	manipulates data only. Its caller is responsible for doing any cam/cache clearing
   *	which may be required for the modification to take effect.
   *
   *	The sdw_info structure is used to describe SDWs in a system independent fashion.
   *
   *	Every entrypoint comes in three varieties: XXX, XXX_l68, and XXX_adp. The
   *	unsuffixed entrypoints treat SDWs as appropriate for the running system.
   *	This is the only form which should be used in the hardcore. The XXX_l68
   *	and XXX_adp entrypoints manipulate Level 68 and ADP SDWs, respectively.
   *
   *	Entrypoints:
   *
   *	construct, construct_adp, construct_l68:
   *	   construct an SDW from the information in an sdw_info.
   *
   *	dissect, dissect_l68, dissect_adp
   *	   construct an sdw_info from a supplied SDW.
   *
   *	set_address, get_address, set_address_l68, get_address_l68, set_address_adp, get_address_adp
   *	   set/return the main memory address from the SDW.
   *
   *	set_access, get_access, set_access_l68, get_access_l68, set_access_adp, get_access_adp
   *	   set/return the access information in the SDW.
   *
   *	set_size, get_size, set_size_l68, get_size_l68, set_size_adp, get_size_adp
   *	   set/return the access information in the SDW.
   *
   *	set_faulted, set_valid, set_faulted_l68, set_valid_l68, set_faulted_adp, set_valid_adp
   *	   set the SDW either valid or faulted.
   *
   *	get_valid, get_valid_l68, get_valid_adp
   *	   return the state of the valid bit
   *
   *	03/10/81, W. Olin Sibert
   */

/*  */

dcl  P_sdw_ptr pointer parameter;
dcl  P_sdw_info_ptr pointer parameter;
dcl  P_address fixed bin (26) parameter;
dcl  P_size fixed bin (19) parameter;
dcl  P_access bit (4) unaligned parameter;
dcl  P_valid_bit bit (1) aligned parameter;

dcl  sdwp pointer;					/* Can't be declared in include file */

dcl  seg_size fixed bin (14);
dcl  system_type fixed bin;

dcl  sys_info$system_type fixed bin external static;

dcl (binary, bit, divide, max, string, substr, unspec) builtin;

/*  */

sdw_util_$construct: entry (P_sdw_ptr, P_sdw_info_ptr);

	system_type = sys_info$system_type;
	goto CONSTRUCT_COMMON;


sdw_util_$construct_l68: entry (P_sdw_ptr, P_sdw_info_ptr);

	system_type = L68_SYSTEM;
	goto CONSTRUCT_COMMON;


sdw_util_$construct_adp: entry (P_sdw_ptr, P_sdw_info_ptr);

	system_type = ADP_SYSTEM;
	goto CONSTRUCT_COMMON;


CONSTRUCT_COMMON:
	sdw_info_ptr = P_sdw_info_ptr;
	sdwp = P_sdw_ptr;				/* Make the sdws addressable */

	if system_type = ADP_SYSTEM then do;
	     unspec (adp_sdw) = ""b;		/* Start out empty, with all bits off */

	     string (adp_sdw.access) = string (sdw_info.access);
	     string (adp_sdw.rings) = string (sdw_info.rings);

	     adp_sdw.valid = ^sdw_info.faulted; /* Bits are different in state */
	     adp_sdw.unpaged = ^sdw_info.paged;

	     if sdw_info.gate_entry_bound > 0 then	/* not_a_gate is already zero */
		adp_sdw.entry_bound = bit (binary (sdw_info.gate_entry_bound - 1, 14), 14);
	     else adp_sdw.not_a_gate = "1"b;		/* entry bound is already zero */

	     adp_sdw.add = bit (binary (sdw_info.address, 26, 26));
	     if adp_sdw.unpaged then substr (adp_sdw.add, 26 - 3, 4) = "0000"b;

	     if ^adp_sdw.unpaged then 		/* Set the paged size */
		seg_size = 64 * divide (sdw_info.size + 1023, 1024, 17, 0);
	     else seg_size = divide (sdw_info.size + 15, 16, 17, 0);

	     adp_sdw.bound = bit (binary (max (seg_size - 1, 0), 14), 14);
	     end;

	else do;					/* Ordinary Level 68 */
	     unspec (l68_sdw) = ""b;			/* Start out empty, with all bits off */

	     string (l68_sdw.access) = string (sdw_info.access);
	     string (l68_sdw.rings) = string (sdw_info.rings);

	     l68_sdw.valid = ^sdw_info.faulted; /* Bits are different in state */
	     l68_sdw.unpaged = ^sdw_info.paged;
	     l68_sdw.cache = sdw_info.cache;		/* Only on the Level 68 */

	     if sdw_info.gate_entry_bound > 0 then	/* not_a_gate is already zero */
		l68_sdw.entry_bound = bit (binary (sdw_info.gate_entry_bound - 1, 14), 14);
	     else l68_sdw.not_a_gate = "1"b;		/* entry bound is already zero */

	     l68_sdw.add = bit (binary (sdw_info.address, 24), 24);

	     seg_size = divide (sdw_info.size + 15, 16, 17, 0);
	     l68_sdw.bound = bit (binary (max (0, seg_size - 1), 14), 14);
	     end;

	return;					/* End of sdw_util_$construct */

/*  */

sdw_util_$dissect: entry (P_sdw_ptr, P_sdw_info_ptr);

	system_type = sys_info$system_type;
	goto DISSECT_COMMON;


sdw_util_$dissect_l68: entry (P_sdw_ptr, P_sdw_info_ptr);

	system_type = L68_SYSTEM;
	goto DISSECT_COMMON;


sdw_util_$dissect_adp: entry (P_sdw_ptr, P_sdw_info_ptr);

	system_type = ADP_SYSTEM;
	goto DISSECT_COMMON;


DISSECT_COMMON:
	sdwp = P_sdw_ptr;				/* Make it addressable */
	sdw_info_ptr = P_sdw_info_ptr;
	unspec (sdw_info) = ""b;			/* Clear it out, and fill it in */

	if system_type = ADP_SYSTEM then do;
	     string (sdw_info.access) = string (adp_sdw.access);
	     string (sdw_info.rings) = string (adp_sdw.rings);

	     sdw_info.faulted = ^adp_sdw.valid; /* Bits are different in state */
	     sdw_info.paged = ^adp_sdw.unpaged;

	     if ^adp_sdw.not_a_gate then		/* Copy the entry bound, if interesting */
		sdw_info.gate_entry_bound = 1 + binary (adp_sdw.entry_bound, 14);

	     sdw_info.size = 16 + 16 * binary (adp_sdw.bound, 14);
	     sdw_info.address = binary (adp_sdw.add, 26);
	     end;

	else do;					/* Ordinary Level 68 */
	     string (sdw_info.access) = string (l68_sdw.access);
	     string (sdw_info.rings) = string (l68_sdw.rings);

	     sdw_info.faulted = ^l68_sdw.valid; /* Bits are different in state */
	     sdw_info.paged = ^l68_sdw.unpaged;
	     sdw_info.cache = l68_sdw.cache;		/* Only on the Level 68 */

	     if ^l68_sdw.not_a_gate then		/* Copy the entry bound, if interesting */
		sdw_info.gate_entry_bound = 1 + binary (l68_sdw.entry_bound, 14);

	     sdw_info.size = 16 + 16 * binary (l68_sdw.bound, 14);
	     sdw_info.address = binary (l68_sdw.add, 24);
	     end;

	return;					/* End of sdw_util_$dissect */

/*  */

sdw_util_$set_access: entry (P_sdw_ptr, P_access);

/* This sets the access in an SDW */

	system_type = sys_info$system_type;
	goto SET_ACCESS_COMMON;


sdw_util_$set_access_l68: entry (P_sdw_ptr, P_access);

/* This sets the access in a Level 68 SDW */

	system_type = L68_SYSTEM;
	goto SET_ACCESS_COMMON;


sdw_util_$set_access_adp: entry (P_sdw_ptr, P_access);

/* This sets the access in an ADP SDW */

	system_type = ADP_SYSTEM;
	goto SET_ACCESS_COMMON;


SET_ACCESS_COMMON:
	sdwp = P_sdw_ptr;

	if system_type = ADP_SYSTEM then
	     string (adp_sdw.access) = P_access;
	else string (l68_sdw.access) = P_access;

	return;					/* End of sdw_util_$set_access */

/*  */

sdw_util_$set_address: entry (P_sdw_ptr, P_address);

/* This sets the address in an SDW */

	system_type = sys_info$system_type;
	goto SET_ADDRESS_COMMON;


sdw_util_$set_address_l68: entry (P_sdw_ptr, P_address);

/* This sets the address in a Level 68 SDW */

	system_type = L68_SYSTEM;
	goto SET_ADDRESS_COMMON;


sdw_util_$set_address_adp: entry (P_sdw_ptr, P_address);

/* This sets the address in an ADP SDW */

	system_type = ADP_SYSTEM;
	goto SET_ADDRESS_COMMON;


SET_ADDRESS_COMMON:
	sdwp = P_sdw_ptr;

	if system_type = ADP_SYSTEM then do;
	     adp_sdw.add = bit (binary (P_address, 26, 26));
	     if adp_sdw.unpaged then substr (adp_sdw.add, 26 - 3, 4) = "0000"b;
	     end;

	else l68_sdw.add = bit (binary (P_address, 24), 24);

	return;					/* End of sdw_util_$set_address */

/*  */

sdw_util_$set_size: entry (P_sdw_ptr, P_size);

/* This sets the size of an SDW */

	system_type = sys_info$system_type;
	goto SET_BOUND_COMMON;


sdw_util_$set_size_l68: entry (P_sdw_ptr, P_size);

/* This sets the size of a Level 68 SDW */

	system_type = L68_SYSTEM;
	goto SET_BOUND_COMMON;


sdw_util_$set_size_adp: entry (P_sdw_ptr, P_size);

/* This sets the size of an ADP SDW */

	system_type = ADP_SYSTEM;
	goto SET_BOUND_COMMON;


SET_BOUND_COMMON:
	sdwp = P_sdw_ptr;

	if system_type = ADP_SYSTEM then do;
	     if ^adp_sdw.unpaged then 		/* Set the paged size */
		seg_size = 64 * divide (P_size + 1023, 1024, 17, 0);
	     else seg_size = divide (P_size + 15, 16, 17, 0);

	     adp_sdw.bound = bit (binary (max (seg_size - 1, 0), 14), 14);
	     if P_size = 0 then adp_sdw.valid = "0"b;	/* Set the size, but fault the SDW if it's zero */
	     end;

	else do;					/* Level 68 */
	     seg_size = divide (P_size + 15, 16, 17, 0);	/* Bound has same resolution paged or unpaged */
	     l68_sdw.bound = bit (binary (max (seg_size - 1, 0), 14), 14);
	     if P_size = 0 then l68_sdw.valid = "0"b;	/* Set the size, but fault the SDW if it's zero */
	     end;

	return;					/* End of sdw_util_$set_size */

/*  */

sdw_util_$get_access: entry (P_sdw_ptr, P_access);

	system_type = sys_info$system_type;
	goto GET_ACCESS_COMMON;


sdw_util_$get_access_l68: entry (P_sdw_ptr, P_access);

	system_type = L68_SYSTEM;
	goto GET_ACCESS_COMMON;


sdw_util_$get_access_adp: entry (P_sdw_ptr, P_access);

	system_type = ADP_SYSTEM;
	goto GET_ACCESS_COMMON;


GET_ACCESS_COMMON:
	sdwp = P_sdw_ptr;				/* Make it addressable */

	if system_type = ADP_SYSTEM then
	     P_access = string (adp_sdw.access);
	else P_access = string (l68_sdw.access);

	return;					/* End of sdw_util_$get_access */

/*  */

sdw_util_$get_address: entry (P_sdw_ptr, P_address);

	system_type = sys_info$system_type;
	goto GET_ADDRESS_COMMON;


sdw_util_$get_address_l68: entry (P_sdw_ptr, P_address);

	system_type = L68_SYSTEM;
	goto GET_ADDRESS_COMMON;


sdw_util_$get_address_adp: entry (P_sdw_ptr, P_address);

	system_type = ADP_SYSTEM;
	goto GET_ADDRESS_COMMON;


GET_ADDRESS_COMMON:
	sdwp = P_sdw_ptr;				/* Make it addressable */

	if system_type = ADP_SYSTEM then
	     P_address = binary (adp_sdw.add, 26);
	else P_address = binary (l68_sdw.add, 24);

	return;					/* End of sdw_util_$get_address */

/*  */

sdw_util_$get_size: entry (P_sdw_ptr, P_size);

	system_type = sys_info$system_type;
	goto GET_BOUND_COMMON;


sdw_util_$get_size_l68: entry (P_sdw_ptr, P_size);

	system_type = L68_SYSTEM;
	goto GET_BOUND_COMMON;


sdw_util_$get_size_adp: entry (P_sdw_ptr, P_size);

	system_type = ADP_SYSTEM;
	goto GET_BOUND_COMMON;


GET_BOUND_COMMON:
	sdwp = P_sdw_ptr;				/* Make it addressable */

	if system_type = ADP_SYSTEM then
	     P_size = 16 + 16 * binary (adp_sdw.bound, 14);
	else P_size = 16 + 16 * binary (l68_sdw.bound, 14);

	return;					/* End of sdw_util_$get_size */

/*  */

sdw_util_$set_valid: entry (P_sdw_ptr);

	system_type = sys_info$system_type;
	goto SET_VALID_COMMON;


sdw_util_$set_valid_l68: entry (P_sdw_ptr);

	system_type = L68_SYSTEM;
	goto SET_VALID_COMMON;


sdw_util_$set_valid_adp: entry (P_sdw_ptr);

	system_type = ADP_SYSTEM;
	goto SET_VALID_COMMON;


SET_VALID_COMMON:
	sdwp = P_sdw_ptr;				/* Make it addressable */

	if system_type = ADP_SYSTEM then
	     adp_sdw.valid = "1"b;
	else do;					/* Set valid, and set DF0, too */
	     l68_sdw.valid = "1"b;
	     l68_sdw.df_no = "00"b;
	     end;

	return;					/* End of sdw_util_$set_valid */

/*  */

sdw_util_$set_faulted: entry (P_sdw_ptr);

	system_type = sys_info$system_type;
	goto SET_FAULTED_COMMON;


sdw_util_$set_faulted_l68: entry (P_sdw_ptr);

	system_type = L68_SYSTEM;
	goto SET_FAULTED_COMMON;


sdw_util_$set_faulted_adp: entry (P_sdw_ptr);

	system_type = ADP_SYSTEM;
	goto SET_FAULTED_COMMON;


SET_FAULTED_COMMON:
	sdwp = P_sdw_ptr;				/* Make it addressable */

	if system_type = ADP_SYSTEM then
	     adp_sdw.valid = "0"b;
	else do;
	     l68_sdw.valid = "0"b;
	     l68_sdw.df_no = "00"b;			/* Refresh these bits, just in case */
	     end;

	return;					/* End of sdw_util_$set_faulted */

/*  */

sdw_util_$get_valid: entry (P_sdw_ptr, P_valid_bit);

	system_type = sys_info$system_type;
	goto GET_VALID_COMMON;


sdw_util_$get_valid_l68: entry (P_sdw_ptr, P_valid_bit);

	system_type = L68_SYSTEM;
	goto GET_VALID_COMMON;


sdw_util_$get_valid_adp: entry (P_sdw_ptr, P_valid_bit);

	system_type = ADP_SYSTEM;
	goto GET_VALID_COMMON;


GET_VALID_COMMON:
	sdwp = P_sdw_ptr;				/* Make it addressable */

	if system_type = ADP_SYSTEM then
	     P_valid_bit = adp_sdw.valid;
	else P_valid_bit = l68_sdw.valid;

	return;					/* End of sdw_util_$get_valid */



%page; %include "sdw.adp";
%page; %include "sdw.l68";
%page; %include sdw_info;
%page; %include system_types;

	end sdw_util_;
