/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


ptw_util_: proc ();

/* *	PTW_UTIL_
   *
   *	A utility for manipulating PTWs in a format appropriate to the
   *	running system. It is for data manipulation only; if used to
   *	modify live PTWs, the appropriate cam/cache functions must
   *	be performed by the caller.
   *
   *	April, 1981, W. Olin Sibert
   *      October 1983, Keith Loepere for $dissect and $set_phm
   */

	return;					/* Not an entrypoint */

dcl  P_ptw_ptr pointer parameter;
dcl  P_ptw_info_ptr pointer parameter;
dcl  P_coreadd fixed bin (26) parameter;
dcl  P_add_type bit (4) unaligned parameter;
dcl  P_diskadd fixed bin (20) parameter;
dcl  P_nulladd bit (22) aligned parameter;
dcl  P_pdadd fixed bin (16) parameter;
dcl  P_modified_bit bit (1) aligned;

dcl  ptp pointer;					 /* Can't be declared in the include file */
dcl  null_flag bit (1) aligned;
dcl 1 null_ptw aligned based (ptp),
    2 devadd bit (22) unaligned,
    2 pad bit (14) unaligned;

dcl  sst$cmp pointer external static;
dcl  sst$cmesize fixed bin external static;

dcl  sys_info$system_type fixed bin external static;

dcl (addr, divide, unspec) builtin;

/*  */

ptw_util_$make_core: entry (P_ptw_ptr, P_coreadd);

/* This entry fabricates a PTW which describes the specified core frame */

	ptp = P_ptw_ptr;

	if sys_info$system_type = ADP_SYSTEM then do;
	     unspec (adp_ptw) = ""b;
	     adp_core_ptw.frame = divide (P_coreadd, 1024, 16, 0);
	     adp_ptw.add_type = add_type.core;
	     adp_ptw.write = "1"b;			/* Always supposed to be writable */
	     adp_ptw.valid = "1"b;			/* And make it valid, too */
	     end;

	else do;					/* Ordinary Level 68 */
	     unspec (l68_ptw) = ""b;
	     l68_core_ptw.frame = divide (P_coreadd, 1024, 16, 0);
	     l68_ptw.add_type = add_type.core;
	     l68_ptw.df_no = "01"b;			/* Set the DF number correctly for initialization */
	     l68_ptw.valid = "1"b;			/* And make it valid, too */
	     end;

	return;					/* End of ptw_util_$make_core */

/*  */

ptw_util_$get_coreadd: entry (P_ptw_ptr, P_coreadd);

/* This entry returns the core address described by the PTW, if it is valid, or returns -1 */

	ptp = P_ptw_ptr;

	if sys_info$system_type = ADP_SYSTEM then
	     if ^adp_ptw.valid then
		P_coreadd = -1;
	     else P_coreadd = 1024 * adp_core_ptw.frame;

	else if ^l68_ptw.valid then			/* Ordinary Level 68 */
		P_coreadd = -1;
	     else P_coreadd = 1024 * l68_core_ptw.frame;

	return;					/* End of ptw_util_$get_coreadd */



ptw_util_$get_add_type: entry (P_ptw_ptr, P_add_type);

/* This entry returns the add_type from the PTW */

	ptp = P_ptw_ptr;

	if sys_info$system_type = ADP_SYSTEM then
	     P_add_type = adp_ptw.add_type;
	else P_add_type = l68_ptw.add_type;

	return;					/* End of ptw_util_$get_add_type */

/*  */

ptw_util_$make_disk: entry (P_ptw_ptr, P_diskadd);

/* This entry fabricates a PTW which describes a specified disk record */

	null_flag = "0"b;
	goto MAKE_DISK_COMMON;


ptw_util_$make_null_disk: entry (P_ptw_ptr, P_diskadd);

/* This entry fabricates a PTW which describes a specified, not yet written, disk record */

	null_flag = "1"b;
	goto MAKE_DISK_COMMON;


MAKE_DISK_COMMON:
	ptp = P_ptw_ptr;

	if sys_info$system_type = ADP_SYSTEM then do;
	     unspec (adp_ptw) = ""b;
	     adp_ptw.add = substr (bit (binary (P_diskadd, 20), 20), 3, 18); /* Only 18 bits for now */
	     adp_ptw.add_type = add_type.disk;
	     substr (adp_ptw.add, 1, 1) = null_flag;	/* First bit in disk address */
	     adp_ptw.write = "1"b;			/* Always supposed to be writable */
	     end;

	else do;					/* Ordinary Level 68 */
	     unspec (l68_ptw) = ""b;
	     adp_ptw.add = substr (bit (binary (P_diskadd, 20), 20), 3, 18); /* Only 18 bits for now */
	     l68_ptw.add_type = add_type.disk;
	     substr (l68_ptw.add, 1, 1) = null_flag;	/* First bit in disk address */
	     l68_ptw.df_no = "01"b;			/* Set the DF number correctly for initialization */
	     end;

	return;					/* End of ptw_util_$make_disk */

/*  */

ptw_util_$make_null: entry (P_ptw_ptr, P_nulladd);

/* This entry fabricates a PTW containing a standard form 22 bit null address */

	ptp = P_ptw_ptr;

	if sys_info$system_type = ADP_SYSTEM then do;
	     unspec (adp_ptw) = ""b;
	     null_ptw.devadd = P_nulladd;
	     adp_ptw.write = "1"b;			/* Always supposed to be writable */
	     end;

	else do;					/* Ordinary Level 68 */
	     unspec (l68_ptw) = ""b;
	     null_ptw.devadd = P_nulladd;
	     l68_ptw.df_no = "01"b;			/* Set the DF number correctly for initialization */
	     end;

	return;					/* End of ptw_util_$make_null */

/*  */

ptw_util_$make_pd: entry (P_ptw_ptr, P_pdadd);

/* This entry fabricates a PTW which describes a specified disk record */

	ptp = P_ptw_ptr;

	if sys_info$system_type = ADP_SYSTEM then do;
	     unspec (adp_ptw) = ""b;
	     adp_ptw.add = bit (binary (P_pdadd, 18), 18);
	     adp_ptw.add_type = add_type.pd;
	     adp_ptw.write = "1"b;			/* Always supposed to be writable */
	     end;

	else do;					/* Ordinary Level 68 */
	     unspec (l68_ptw) = ""b;
	     adp_ptw.add = bit (binary (P_pdadd, 18), 18);
	     l68_ptw.add_type = add_type.pd;
	     l68_ptw.df_no = "01"b;			/* Set the DF number correctly for initialization */
	     end;

	return;					/* End of ptw_util_$make_disk */

/*  */

ptw_util_$set_valid: entry (P_ptw_ptr);

/* This entry sets a PTW to be "valid"; that is, not faulted. No validation is performed. */

	ptp = P_ptw_ptr;				/* Make it addressable */

	if sys_info$system_type = ADP_SYSTEM then do;
	     adp_ptw.valid = "1"b;
	     adp_ptw.unusable1 = ""b; 		/* Clear out hardware padding, just in case */
	     adp_ptw.unusable2 = ""b;
	     end;

	else do;					/* Set valid, and set DF1, too */
	     l68_ptw.valid = "1"b;
	     l68_ptw.df_no = "01"b;
	     end;

	return;					/* End of ptw_util_$set_valid */




ptw_util_$set_faulted: entry (P_ptw_ptr);

/* This entry sets a PTW to be "faulted"; that is, not valid. No validation is performed. */

	ptp = P_ptw_ptr;				/* Make it addressable */

	if sys_info$system_type = ADP_SYSTEM then do;
	     adp_ptw.valid = "0"b;
	     adp_ptw.unusable1 = ""b; 		/* Clear out hardware padding, just in case */
	     adp_ptw.unusable2 = ""b;
	     end;

	else do;
	     l68_ptw.valid = "0"b;
	     l68_ptw.df_no = "01"b;			/* Refresh these bits, just in case */
	     end;

	return;					/* End of ptw_util_$set_faulted */

/*  */

ptw_util_$set_wired: entry (P_ptw_ptr);

/* This entry makes a PTW be "wired" */

	ptp = P_ptw_ptr;				/* Make it addressable */

	if sys_info$system_type = ADP_SYSTEM then
	     adp_ptw.wired = "1"b;
	else l68_ptw.wired = "1"b;

	return;					/* End of ptw_util_$set_wired */




ptw_util_$set_unwired: entry (P_ptw_ptr);

/* This entry makes a PTW be "unwired" */

	ptp = P_ptw_ptr;				/* Make it addressable */

	if sys_info$system_type = ADP_SYSTEM then
	     adp_ptw.wired = "0"b;
	else l68_ptw.wired = "0"b;

	return;					/* End of ptw_util_$set_wired */

ptw_util_$set_phm: entry (P_ptw_ptr);

/* This entry marks a PTW as modified. */

	ptp = P_ptw_ptr;				/* Make it addressable */

	if sys_info$system_type = ADP_SYSTEM then
	     adp_ptw.phm = "1"b;
	else l68_ptw.phm = "1"b;

	return;					/* End of ptw_util_$set_phm */

ptw_util_$reset_phm: entry (P_ptw_ptr);

/* This entry marks a PTW as unmodified. */

	ptp = P_ptw_ptr;				/* Make it addressable */

	if sys_info$system_type = ADP_SYSTEM then
	     adp_ptw.phm, adp_ptw.phm1 = "0"b;
	else l68_ptw.phm, l68_ptw.phm1 = "0"b;

	return;					/* End of ptw_util_$reset_phm */

ptw_util_$get_phm: entry (P_ptw_ptr, P_modified_bit);

/* This entry returns the state (phm | phm1) of the cumulative phm bit */

	ptp = P_ptw_ptr;

	if sys_info$system_type = ADP_SYSTEM then
	     P_modified_bit = adp_ptw.phm | adp_ptw.phm1;
	else P_modified_bit = l68_ptw.phm | l68_ptw.phm1;

	return;					/* End of ptw_util_$get_phm */

dissect: entry (P_ptw_ptr, P_ptw_info_ptr);

	ptp = P_ptw_ptr;
	ptw_info_ptr = P_ptw_info_ptr;
	if sys_info$system_type = ADP_SYSTEM then do;
	     if adp_ptw.add_type = add_type.core then do;
		ptw_info.address = adp_core_ptw.frame * 1024;
		ptw_info.null_disk = "0"b;
	     end;
	     else if adp_ptw.add_type = add_type.disk then do;
		ptw_info.address = bin (substr (adp_ptw.add, 2, 17), 17);
		ptw_info.null_disk = substr (adp_ptw.add, 1, 1);
	     end;
	     else do;
		ptw_info.address = bin (adp_ptw.add, 18);
		ptw_info.null_disk = "0"b;
	     end;
	     ptw_info = adp_ptw.flags, by name;
	end;
	else do;
	     if l68_ptw.add_type = add_type.core then do;
		ptw_info.address = l68_core_ptw.frame * 1024;
		ptw_info.null_disk = "0"b;
	     end;
	     else if l68_ptw.add_type = add_type.disk then do;
		ptw_info.address = bin (substr (l68_ptw.add, 2, 17), 17);
		ptw_info.null_disk = substr (l68_ptw.add, 1, 1);
	     end;
	     else do;
		ptw_info.address = bin (l68_ptw.add, 18);
		ptw_info.null_disk = "0"b;
	     end;
	     ptw_info = l68_ptw.flags, by name;
	end;
	return;					/* end of ptw_util_$dissect */
%page; %include "ptw.adp";
%page; %include "ptw.l68";
%page; %include add_type;
%page; %include ptw_info;
%page; %include system_types;

	end ptw_util_;
