/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */

/* format: style1 */

init_scu: proc (P_tag, P_errtag, P_code);

/* *	INIT_SCU - Initialize a System Controller.
   *
   *	History:
   *	Modified 4/84, Keith Loepere for collection_1_phase.
   *	Modified '82 for early initialization operation
   *	Modified 01/09/81, W. Olin Sibert, for scs$scas_page_table.
   *	Modified 12/01/79, Mike Grady, to improve mem config size checks.
   *	Modified 07/14/79, Mike Grady, to improve config checks.
   *	Modified sometime, BSG, for 8 cpu port expander.
   *	Coded 03/01/76, Noel I. Morris
*/


/****^  HISTORY COMMENTS:
  1) change(88-07-27,Farley), approve(88-10-05,MCR7968),
     audit(88-10-10,Beattie), install(88-10-14,MR12.2-1166):
     Added code to check for memory address overlap conditions.  This adds a
     call to pmut$check_for_mem_overlap and a new error code,
     rcerr_addscu_memoverlap.
                                                   END HISTORY COMMENTS */


	dcl     P_tag		 fixed bin (3) parameter; /* system controller tag */
	dcl     P_errtag		 fixed bin (3) parameter; /* CPU or mask in error */
	dcl     P_code		 fixed bin (35) parameter; /* error code */

	dcl     code		 fixed bin (35);	/* error code */
	dcl     tag		 fixed bin (3);	/* tag of SCU we are working on */
	dcl     ptp		 pointer;		/* Pointer to current SCAS PTW */
	dcl     i			 fixed bin (3);	/* iteration index */
	dcl     j			 fixed bin (3);	/* iteration index */
	dcl     x			 fixed bin (5);	/* SCAS index */
	dcl     low_base		 fixed bin;	/* for overlap check */
	dcl     high_base		 fixed bin;	/* for overlap check */
	dcl     mem_size		 fixed bin;	/* real mem size */
	dcl     found		 bit (1) aligned;	/* used to check mask assignments */
	dcl     unfound_mask	 (4) bit (1) unal;	/* used to check mask assignments also	*/

	dcl     cdp		 ptr;
	dcl     pdp		 ptr;
	dcl     1 cdata		 based (cdp) like scs$controller_data aligned; /* single element of controller data */
	dcl     1 pdata		 based (pdp) like scs$processor_data aligned; /* single element of processor data */

	dcl     privileged_mode_ut$check_for_mem_overlap
				 entry (fixed bin, fixed bin, fixed bin (35));
	dcl     scr_util$read_cfg	 entry (fixed bin (3));
	dcl     scr_util$set_mask	 entry (fixed bin (3), fixed bin (3), fixed bin (71));
	dcl     syserr		 entry options (variable);

	dcl     tag_letter		 (0:7) char (1) aligned static init ("A", "B", "C", "D", "E", "F", "G", "H"); /* for message */

	dcl     (addr, bit, divide, index, string) builtin;


	tag = P_tag;				/* Copy parameter */

	cdp = addr (scs$controller_data (tag));		/* Get pointer to data for this controller. */
	call set_scas_ptw ((tag), (cdata.base));	/* Set scas entry for this controller. */

/* Read CFG data from the controller and fill in data pertaining to
   the configuration of store units connected to the controller.	*/

	call scr_util$read_cfg (tag);			/* Now, do RSCR CFG from controller. */

	mem_size = cdata.lower_store_size + cdata.upper_store_size;

	if cdata.size < mem_size then /* Processor and controller sizes disagree. */
	     call init_error (rcerr_addscu_size, 0);

	if scs$controller_config_size (tag) > mem_size then
	     call init_error (rcerr_addscu_bigconfig, 0);

	if ^cdata.program then /* Must be in programmable mode. */
	     call init_error (rcerr_addscu_manual, 0);

	if (cdata.type < "0010"b) & (string (scs$expanded_ports) ^= ""b) then
	     call init_error (rcerr_addscu_oldexpand, 0); /* Can't have expanders on old SCU's */

/* Set up any additional SCAS PTWs */

	if (cdata.store_b_is_lower & cdata.store_a_online) |
	     (^cdata.store_b_is_lower & cdata.store_b_online) then
	     call set_scas_ptw (tag + 8, cdata.base + cdata.lower_store_size);

	if (cdata.store_b_is_lower & cdata.store_b1_online) |
	     (^cdata.store_b_is_lower & cdata.store_a1_online) then
	     call set_scas_ptw (tag + 16, cdata.base + divide (cdata.lower_store_size, 2, 17, 0));

	if (cdata.store_b_is_lower & cdata.store_a1_online) |
	     (^cdata.store_b_is_lower & cdata.store_b1_online) then
	     call set_scas_ptw (tag + 24, cdata.base + cdata.lower_store_size + divide (cdata.lower_store_size, 2, 17, 0));

/**** Check for possible memory address overlap, which can occur when
      stores A & A1 (and/or B & B1) should be enabled, but only A (and/or B)
      is actually enabled. */

						/** first check for overlap in lower store */

	if (cdata.store_b_is_lower & cdata.store_b_online & ^cdata.store_b1_online) |
	     (^cdata.store_b_is_lower & cdata.store_a_online & ^cdata.store_a1_online) then do;
		low_base = cdata.base;
		high_base = cdata.base + divide (cdata.lower_store_size, 2, 17, 0);
		call privileged_mode_ut$check_for_mem_overlap
		     (low_base, high_base, code);

		if code ^= 0 then
		     call init_error (rcerr_addscu_memoverlap, 0);
	     end;

						/** now check for overlap in lower store */

	if (cdata.lower_store_size = cdata.upper_store_size) then
	     if (cdata.store_b_is_lower & cdata.store_b_online & cdata.store_a_online & ^cdata.store_a1_online) |
		(^cdata.store_b_is_lower & cdata.store_a_online & cdata.store_b_online & ^cdata.store_b1_online) then do;
		     low_base = cdata.base + cdata.lower_store_size;
		     high_base = cdata.base + cdata.lower_store_size +
			divide (cdata.lower_store_size, 2, 17, 0);
		     call privileged_mode_ut$check_for_mem_overlap
			(low_base, high_base, code);

		     if code ^= 0 then
			call init_error (rcerr_addscu_memoverlap, 0);
		end;


/* Make sure that each assigned controller mask is assigned to
   a processor, and that at most one controller mask is assigned
   to each processor.					*/

	string (unfound_mask) = "1111"b;		/* Mark all masks as not yet found. */

	do i = 0 to 7;				/* Look at all CPU's. */
	     pdp = addr (scs$processor_data (i));	/* Get pointer to data for this CPU. */
	     if ^(pdata.offline | pdata.online) then /* Is CPU in the configuration ? */
		goto NEXT_CPU_LOOP;

	     found = "0"b;				/* Have not yet found mask for this processor. */
	     do j = 1 to 4;				/* Look at all mask assignments. */
		if cdata.eima_data (j).mask_assigned then do;
			if pdata.controller_port = cdata.eima_data (j).mask_assignment then do;
				if ^found then do;	/* Make sure neither mask nor port duplicates */
					unfound_mask (j) = "0"b; /* Found a mask for this CPU. */
					found = "1"b;
					call scr_util$set_mask (tag, (pdata.controller_port), 0);
				     end;

				else call init_error (rcerr_addscu_dup_mask, i); /* Found more than one mask. */
			     end;			/* Two masks are assigned to one port. */
		     end;				/* Of case for assigned mask */

		else unfound_mask (j) = "0"b;		/* No assignment for this mask. */
	     end;					/* Of loop through possible masks */

	     if (cdata.type < "0010"b) & ^found then /* If not 4MW SCU ... */
		call init_error (rcerr_addscu_no_mask, i); /* Every processor must have an assigned mask. */

NEXT_CPU_LOOP:
	end;					/* Of loop through processors */

	if string (unfound_mask) ^= ""b then /* If some mask not accounted for ... */
	     call init_error (rcerr_addscu_bad_mask, (index (string (unfound_mask), "1"b) - 1));
						/* Mask not assigned to a processor port. */

	if ^(sys_info$collection_1_phase = EARLY_INITIALIZATION | sys_info$collection_1_phase > SERVICE_INITIALIZATION)
	then if scs$controller_config_size (tag) < mem_size then
		call syserr (0, "init_scu: Warning - Not all of MEM ^a will be used.", tag_letter (tag));

	P_code = 0;				/* Indicate success */
	P_errtag = 0;

ERROR_RETURN:
	return;					/* End of code for init_scu */


final_scu: entry (P_tag);

	tag = P_tag;				/* Copy parameter */

	do x = tag by 8 while (x < 32);		/* Fault out all entries in SCAS for this controller. */
	     call reset_scas_ptw (x);
	end;

	return;					/* End of code for init_scu$final_scu */


init_error: proc (return_code, error_tag);

	dcl     return_code		 fixed bin parameter;
	dcl     error_tag		 fixed bin (3) parameter;


	call final_scu (tag);			/* Finish this SCU */

	P_code = return_code;			/* and return error parameters */
	P_errtag = error_tag;

	goto ERROR_RETURN;
     end init_error;



set_scas_ptw: proc (scasx, base);			/* procedure to set PTW in scas. */

	dcl     scasx		 fixed bin (5) parameter; /* index into the scas */
	dcl     base		 fixed bin (14) parameter; /* absolute address (in 1024 word blocks) for PTW */


	ptp = addr (scs$scas_page_table (scasx));	/* Find our PTW */

	ptp -> l68_ptw.add = bit (base);		/* Insert base address in PTW. */
	ptp -> l68_ptw.phu = "1"b;			/* Turn on used bit in PTW. */
	ptp -> l68_ptw.valid = "1"b;			/* Turn off directed fault in PTW. */

	return;
     end set_scas_ptw;



reset_scas_ptw: proc (scasx);				/* proc to reset PTW in scas. */

	dcl     scasx		 fixed bin (5) parameter; /* index into the scas */


	ptp = addr (scs$scas_page_table (scasx));	/* Find our PTW */

	ptp -> l68_ptw.valid = "0"b;			/* Turn on directed fault in PTW. */

	return;
     end reset_scas_ptw;

%page; %include collection_1_phases;
%page; %include scs;
%page; %include "ptw.l68";
%page; %include rcerr;


/* BEGIN MESSAGE DOCUMENTATION

   Message:
   init_scu: Warning - Not all of MEM Y will be used.

   S:	$info

   T:	$init

   M:	The actual amount of memory present in MEM Y does
   not agree with the config deck. Only as much as the configuration deck
   specifies will be used.

   A:	If this is an unintentional error,
   correct the configuration deck before the next bootload.


   END MESSAGE DOCUMENTATION */

     end init_scu;
