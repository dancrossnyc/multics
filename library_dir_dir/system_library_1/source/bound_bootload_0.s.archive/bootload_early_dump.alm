" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1984 *
" *                                                         *
" ***********************************************************
	segdef	bootload_early_dump
	segdef	flagbox_message

" This collection 0 program (also findable in collection 1 through the toehold)
" is capable of saving the low 512k of memory to tape when a crash occurs in
" early initialization.
" Keith Loepere, November 1983.
"
	include	adp_sdw
"
	include	bootload_cpu_macros
"
	include	bootload_equs
"
	include	coll0_segnos
"
	include	fault_vector
"
	include	flagbox
"
	include	io_status_word
"
	include	iom_word_macros
"
	include	l68_sdw
"
	include	make_data_macros
"
	include	system_types
"
	include	tape_io_commands
"
bootload_early_dump:
	inhibit	on
	tra	2,ic*		force into appending mode
	nop
	vfd	18/bbl0_segno_,18o/43
	vfd	18/now_appended,18/0
now_appended:
	lda	bootload_info$system_type
	cmpa	ADP_SYSTEM,dl
	tze	iox_setup

	decor	dps8
	eax1	7*64		set all controller masks
	fld	0,dl		mask all interrupts
	sscr	2*8,x1		..
	eax1	-64,x1		SSCR will do nothing for unassigned masks
	tpl	-2,ic		..
	tra	setup

iox_setup:
	decor	adp
	inhibit	on
	lda	=0,dl	mask interrupts
	limr
	decor	dps8

setup:	ldt	-1,du		Prevent timer runout
	inhibit	off

	epp	ds,template_slt_$dseg_ptr,*
	epp	mb,template_slt_$iom_mailbox_ptr,*
	epp	slt,template_slt_$slt_ptr,*
	epp	nt,template_slt_$name_table_ptr,*
	epp	prb,template_slt_$physical_record_buffer_ptr,*
	epp	fv,template_slt_$fault_vector_ptr,*

          epp6	bootload_early_dump$ignore_scu " Now, change to treat lockup faults and
          spri6	fv|fv.f_scu_ptr+FAULT_NO_TRO*2 " timer runouts like interrupts
	spri6	fv|fv.f_scu_ptr+FAULT_NO_LUF*2

          epp6	bootload_early_dump$ignore_fault
          spri6	fv|fv.f_tra_ptr+FAULT_NO_TRO*2
          spri6	fv|fv.f_tra_ptr+FAULT_NO_LUF*2

	epp	seg,template_slt_$flagbox_ptr,*
	lda	seg|fgbx.rtb
	ana	fgbx.mess,du		" look for fgbx msg
	tze	get_drive_num

	mlr	(pr),()
	desc9a	seg|fgbx.message,64
	desc9a	flagbox_message(1),64
	tsx2	bootload_error$flagbox_message

get_drive_num:
	tsx2	bootload_console$write_nl
	tsx2	bootload_error$early_dump_prompt
	tsx2	bootload_console$read_line
	arg	ascii_drive_num
	arg	ascii_drive_num_len
	tsx2	bootload_console$write_nl

	lda	ascii_drive_num
	cmpa	die_msg
	tze	die

	lrl	27			" convert to decimal
	qrl	27
	llr	36			" 1st char in q, 2nd in a
	sbq	=o60,dl
	tmi	get_drive_num
	cmpq	9,dl
	tpnz	get_drive_num		" 1st digit

	cmpa	0,dl
	tze	got_drive_num		" single digit

	sba	=o60,dl
	tmi	get_drive_num
	cmpa	9,dl
	tpnz	get_drive_num
	sta	ascii_drive_num		" 2nd digit

	mpy	10,dl
	adq	ascii_drive_num
got_drive_num:
	qls	24
	stcq	write_tape_idcw,20
	stcq	tape_density_idcw,20
	stcq	tape_rewind_idcw,20
	stcq	tape_backspace_idcw,20
	stcq	tape_erase_idcw,20

	absa_au	tape_buffer		" Initialize
	stca	write_tape_ddcw,70

	tsx2	bootload_io$connect		" try setting density
	arg	bootload_info$tape_iom_number
	arg	bootload_info$tape_channel_number
	arg	tape_io_pcw
	arg	tape_rewind_idcw

	staq	bootload_tape_fw$erstat	" check for success
	cana	bootload_info$status_mask
	tnz	tape_error

	tsx2	bootload_io$connect
	arg	bootload_info$tape_iom_number
	arg	bootload_info$tape_channel_number
	arg	tape_io_pcw
	arg	tape_density_idcw

	staq	bootload_tape_fw$erstat	" check for success
	cana	bootload_info$status_mask
	tnz	tape_error
"
	epbp6	memory_ptw_ptr,*
	lda	ds|2*ed_segno_		" find ptw for early_dump
	ldq	bootload_info$system_type	" (used to read memory pages)
	cmpq	ADP_SYSTEM,dl
	tze	3,ic
	arl	l68_sdw.add_shift
	tra	2,ic
	arl	adp_sdw.add_shift
	sba	iupt_absloc,dl	" ptw is addr(page_table) - addr(iupt)
	epp6	6|0,al
	spri6	memory_ptw_ptr	" within iupt

	sdbr	dbr		" save info so we can find 
	lda	bootload_info$system_type " our way around memory
	sta	system_type

	lda	0,dl
"
dump_memory_page:			" fetch page of memory
	sta	address		
	tsx2	bootload_dseg$make_core_ptw
	stq	memory_ptw_ptr,*
	lda	bootload_info$system_type
	cmpa	ADP_SYSTEM,dl
	tze	3,ic
	decor	l68
	camp
	tra	2,ic
	decor	adp
	camp1
	decor	l68

	epp	seg,=its(ed_segno_,0),*
	lda	4*1024,dl
	mlr	(pr,rl),(rl)
	desc9a	seg|0,al
	desc9a	memory_record,al
	lca	16,dl
	sta	error_count

write_record:
	tsx2	bootload_io$connect
	arg	bootload_info$tape_iom_number
	arg	bootload_info$tape_channel_number
	arg	tape_io_pcw
	arg	write_tape_idcw

	staq	bootload_tape_fw$erstat	" check for success
	cana	bootload_info$status_mask
	tze	next_page			" record written
	aos	error_count
	tpl	tape_error		" too many errors - give up

" error recovery - try backspace, erase, rewrite

	cana	io_st_word.initiate,du	" tape didn't move
	tnz	erase			" don't backspace

	tsx2	bootload_io$connect
	arg	bootload_info$tape_iom_number
	arg	bootload_info$tape_channel_number
	arg	tape_io_pcw
	arg	tape_backspace_idcw

	staq	bootload_tape_fw$erstat
	cana	bootload_info$status_mask
	tnz	tape_error

erase:	tsx2	bootload_io$connect
	arg	bootload_info$tape_iom_number
	arg	bootload_info$tape_channel_number
	arg	tape_io_pcw
	arg	tape_erase_idcw

	staq	bootload_tape_fw$erstat
	cana	bootload_info$status_mask
	tnz	tape_error

	tra	write_record

next_page:
	lda	address
	ada	1024,dl
	cmpa	2,du			" 512k
	tmi	dump_memory_page
"
	tsx2	bootload_io$connect		" rewind
	arg	bootload_info$tape_iom_number
	arg	bootload_info$tape_channel_number
	arg	tape_io_pcw
	arg	tape_rewind_idcw

	tsx2	bootload_error$early_dump_done

	inhibit	on
die:	dis			" die!
	tra	-1,ic
	inhibit	off

tape_error:
	tsx2	bootload_error$tape_dump_error
	tra	get_drive_num
"
	even
tape_buffer:
magic_number:
	oct	654365234214		" label record as early_dump
address:	oct	0
dbr:	oct	0,0
system_type:
	oct	0
	even
memory_record:
	bss	,1024
tape_buffer_end:

memory_ptw_ptr:
	its	iupt_segno_,0

ascii_drive_num_len:
	vfd	36/4

ascii_drive_num:
	vfd	36/0

die_msg:	aci	"die"

error_count:
	dec	0

	make_pcw	tape_io_pcw,TAPE.reset_status,0,0,nondata,terminate,1

	make_idcw	write_tape_idcw,TAPE.write_binary_record,0,record,terminate,0,0

	make_ddcw	write_tape_ddcw,0,tape_buffer_end-tape_buffer,iotd

	make_idcw	tape_density_idcw,TAPE.set_1600_bpi,0,nondata,terminate,1,0

	make_idcw	tape_rewind_idcw,TAPE.rewind,0,nondata,terminate,1,0

	make_idcw	tape_backspace_idcw,TAPE.backspace_record,0,nondata,terminate,1,0

	make_idcw	tape_erase_idcw,TAPE.erase,0,nondata,terminate,1,0
"
" Following is the data area for ignoring faults, and the instruction to do it.
"

          segdef    ignore_scu
          segdef    ignore_fault

          eight                         " Align for SCU data
ignore_scu:
          bss       ,8
pointers_and_lengths:
	bss	,8

          inhibit   on                  <+><+><+><+><+><+><+><+><+><+><+><+><+><+><->
ignore_fault:                           " Come here to do nothing
	spl	bbl0_absloc+pointers_and_lengths
	lpl	bbl0_absloc+pointers_and_lengths
          rcu       bbl0_absloc+ignore_scu " Complicated, isn't it?
          inhibit   off                 <-><-><-><-><-><-><-><-><-><-><-><-><-><-><->

flagbox_message:
	vfd	9/64,27/0
	bss	,64		acc string copy of fgbx.message for warning msg
	end
