" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" ***********************************************************

" HISTORY COMMENTS:
"  1) change(85-09-09,Farley), approve(85-09-09,MCR6979),
"     audit(86-03-05,GDixon), install(86-03-21,MR12.0-1033):
"      Support IMU and FIPS.
"                                                      END HISTORY COMMENTS


" BOOTLOAD_TAPE_FW
"
"  0) use bootload_loader to load firmware files.
"     They are init segs.
"  1) see if bootload_info$boot_without_query is set
"  2) if so, skip 3.
"  3) use bootload_console to ask for an MPC model
"  4) search collection 0.5 for that firmware
"  5) if none, complain and go to 3.
"  6) reset slt pointer to reuse firmware space,
"     and zero the sdw's for the firmware files.
" Note that we assume that the controller model name is the
" a segnam on each firmware file.

" Benson Margulies now admits to writing this.
" Modified November 1982 by C. Hornig.

	name	bootload_tape_fw

	even
	bss	fw_seg_ptr,2
	bss	saved_free_core_start,1
	bss	saved_free_core_size,1
	bss	saved_last_init_seg,1
	bss	first_fw_seg,1
	bss	last_fw_seg,1
	bss	RW_length,1
	bss	RW_index,1
	bss	CS_length,1
	bss	bs.start_addr,1
" 
	include	bootload_equs
	include_nolist	bootload_cpu_macros
	include_nolist	slt
	include	system_types
   	equ	segnam.names.name,1  " CIF is USELESS for level 3
	equ	segnam.names_size,9  " 32 chars + 1 word

	include_nolist	slte
	include_nolist	make_data_macros
	include_nolist	iom_word_macros
	include_nolist	tape_io_commands
	include	firmware_trailer
" 
" This subroutine is used to actually bootload the firmware.
"
"    Usage:
"
"	tsx2	bootload_tape_fw$boot
"

	Bentry	boot
boot:	Bpush

	szn	bootload_info$cold_tape_mpc	" F/W loaded?
	tnz	must_boot			" no

	tsx2	bootload_loader$skip_collection " skip the F/W
	tra	boot_return_		" and return

must_boot:
	lda	slt|slt.last_init_seg
	sta	saved_last_init_seg
	ada	1,dl
	sta	first_fw_seg
	stz	last_fw_seg
	lda	slt|slt.free_core_start
	sta	saved_free_core_start
	lda	slt|slt.free_core_size
	sta	saved_free_core_size

" Now we are prepared to un-load the firmware when we are done
" after the loader loads it.

" The next call will load up a bunch of firmware segments as init segments
" we load low to avoid 256K bug in MPC 
" (no firmware above 256K on unpaged IOM)

	tsx2	bootload_loader$load_collection

	lda	slt|slt.last_init_seg
	sta	last_fw_seg

" now find out what firmware is the correct firmware.

	szn	bootload_info$boot_without_query
	tze	query

	epp	seg2,bootload_info$tape_mpc_fw_name
	cmpc	(pr),()		" is it "-none"?
	desc9a	seg2|0,32
	desc9a	no_fw_specified,32
	tnz	have_fw_name

query:
	epp	seg2,bootload_info$tape_mpc_fw_name
	mlr	(),(pr),fill(040)
	desc9a	0,0
	desc9a	seg2|0,32

	tsx2	bootload_error$tape_fw_prompt
	tsx2	bootload_console$read_line
	arg	bootload_info$tape_mpc_fw_name
	arg	fwid_length
	tsx2	bootload_console$write_nl

	epp	seg2,bootload_info$tape_mpc_fw_name 
	cmpc	(),(pr)
	desc9a	help_string,4
	desc9a	seg2|0,4
	tnz	not_help

help:
	tsx2	bootload_error$tape_mpc_help_1
	tsx2	bootload_error$tape_mpc_help_2
	tra	query

not_help:
	cmpc	(),(pr)
	desc9a	ipc_string,3
	desc9a	seg2|0,3
	tnz	not_ipc
	tra	release_fw_return
not_ipc:
	cmpc	(),(pr)
	desc9a	shut_string,4
	desc9a	seg2|0,4

	tze	bootload_error$shutdown

	cmpc	(),(pr)
	desc9a	question_mark,1
	desc9a	seg2|0,1
	tnz	have_fw_name

	tsx2	list_fw_names
	tra	query
	
NO_MORE_SLTES:
	tsx2	bootload_error$no_such_tape_fw
	tra	query

have_fw_name:
	epp	seg2,bootload_info$tape_mpc_fw_name " copy name for 
	mlr	(pr),()		                " local convienience.
	desc9a	seg2|0,32-5
	desc9a	fw_name_wanted+1(1),32-5	" make fwid.NAME

" here with an ID. Now check out the SLTE's

	tsx2	bootload_slt_manager$get_seg_ptr
	arg	fw_name_wanted
	tra	NO_MORE_SLTES	" couldn't find it

	spri6	fw_seg_ptr	" save it
	als	2		" 4 words in SLTE
	ldq	slt|slt.seg+slte.bit_count_word,al
	div	36,dl		" turn it into a word count

" The first thing we do is adjust the length, by looking backward for the
" word which says "mpcbot".
"
	eaq	-64,ql		QU contains address of last 64 words
	lda	=hmpcbot		look for "mpcbot"
LOOP_FOR_END_OF_FW:
	cmpa	seg|0,qu		..
	tze	FOUND_END
	eaq	1,qu		..
	tra	LOOP_FOR_END_OF_FW

FOUND_END:
	epp6	seg|-(fw_trailer_size-1),qu
				" point to beginning of trailer

	lda	seg|fw_trailer.id_name
				" Get info for message
	sta	fwid
	lda	seg|fw_trailer.rev_level
	sta	fwrev		" save for printing

	ldx7	seg|fw_trailer.rw_start " get address of R/W mem part
	tnz	RW_present	    " x7 is the CS length
	eax7	seg|0		    " CS is all but trailer
				    " and seg|0 is 1 beyond CS
	stz	RW_length		    " no RW
	tra	RW_no_RW_common
RW_present:
	stx7	RW_index
	eax6	seg|0		" one word back of trailer is 
	sblx6	RW_index		" last word of RW.
	sxl6	RW_length
RW_no_RW_common:
	stx7	CS_length
	lxl1	bootload_info$tape_iom_number
	mlr	(x1),()		iom_number starts at 1, so start one
	desc9a	TAGS-1(3),1	char back.
	desc9a	iom_name(3),1

	tsx2	bootload_error$booting_tape_mpc
" 
" BOOT THE CONTROL STORE

	tsx2	reset_and_mask

	ldq	cs_idcw		" boot CS first
	stq	w.idcw

	epp	seg,fw_seg_ptr,*        
	absa_au	seg|0		" CS addr
	ldx7	CS_length		" CS length in X7

	tsx2	boot_a_section
	tra	cs_error		" Error return

	ldq	rw_idcw
	stq	w.idcw

	lxl7	RW_length		" length
	tze	NO_RW
	ldx3	RW_index
	absa_au	seg|0,x3		" address of RW part

	tsx2	boot_a_section
	tra	rw_boot_err

NO_RW:

" All done with booting.

	tsx2	bootload_error$booted_tape_mpc

	
" Now wipe the firmware out of memory

release_fw_return:
	stz	bootload_info$cold_tape_mpc	" F/W is now loaded

	lda	saved_free_core_start
	sta	slt|slt.free_core_start
	lda	saved_free_core_size
	sta	slt|slt.free_core_size
	lda	saved_last_init_seg
	sta	slt|slt.last_init_seg

	lda	first_fw_seg
	als	1		" segno * 2 LOWER
	eax1	0,al

	lda	last_fw_seg
	als	19		" segno * 2 UPPER
	sta	zero_limit
	
	eaa	0
	eaq	0
ZERO_SDWS:
	staq	ds|0,x1
	eax1	2,x1
	cmpx1	zero_limit
	tmi	ZERO_SDWS
	
boot_return_:
	boot_return
" 
boot_a_section:
	Bpush

	stca	w.dcw_1,70	" first DCW starts there
	sta	bs.start_addr	" save it UPPER
	eaa	0,x7		" grab the length
	arl	18		" to AL
	cmpa	=o010000,dl	" fits in one?
	tpl	bs.big_firmware
	tnz	bs.easy_small	" 4095 or less
	lda	0,dl		" 0 --> 4096!
bs.easy_small:			" 4095 or less, in A
				" clear out the IOTP to an IOTD 
	stca	w.dcw_1,07	" and store low half
	tra	bs.connect	" all set
bs.big_firmware:
	ldq	=o010000,dl	" max tally with IOTP type
	stcq	w.dcw_1,07	" store flags and tally
	sba	=o010000,dl	" reduce tally by amt used
	stca	w.dcw_2,03	" leave IOTD bit off
	lda	bs.start_addr	" UPPER
	ada	=o010000,du	" bump addr by amount used
	stca	w.dcw_2,70	" store address

bs.connect:		" Guaranteed to fit in 2 * 7777(8)
	rscr	32		" get the time
	staq	io_start_time	" save it
	ldaq	w.dcw_1		" get current dcws (1 & 2)
	staq	dcw_save_area	" and save for POF retry
bs.try_again:
	ldaq	dcw_save_area	" load old dcws (1 & 2)
	staq	w.dcw_1		" refresh the dcws (1 & 2)
	tsx2	bootload_io$connect
	arg	bootload_info$tape_iom_number
	arg	bootload_info$tape_channel_number
	arg	w.pcw
	arg	w.idcw

	cana	bootload_info$status_mask
	tze	bs.good_status	" status OK, now take short pause
	cmpa	=o600000,du	" Power Off Status?
	tze	bs.retry_pof	" OK to retry POFs
	tra	bs.error		" abort
bs.good_status:
	lda	=40000,dl		" should be about 1 second
	sbla	1,dl
	tze	bs.waited
	tra	*-2

" Power off faults should be retried for upto 20 seconds, because
" the new controllers and I/O units that contain micro processors require
" extra time to complete the RESET initiated via the reset_and_mask routine.
" The I/O Multiplexer will continue to return power-off (POF) until the
" controller signals that it is ready to accept the next I/O sequence.

bs.retry_pof:
	ldq	=o1000,dl		" small pause
	sblq	1,dl
	tpl	-1,ic
	rscr	32		" get the time
	sbaq	io_start_time	" rel-a-tize
	cmpaq	twenty_sec_limit	" is twenty seconds up?
	tmi	bs.try_again	" NO, try one mo time
	Breturn	0		" give up....

bs.waited:
	Breturn	1  " SKIP
bs.error:
	Breturn	0
" 
cs_error:
	staq	erstat
	lda	=a  cs
	tra	boot_err_join

rw_boot_err:
	staq	erstat
	lda	=a  rw
	tra	boot_err_join

boot_err_join:
	sta	fwtype
	tsx2	bootload_error$tape_mpc_boot_error
	tra	query 		" Ounce Agan
" 
	Bentry	reset_and_mask
reset_and_mask:
	Bpush

	tsx2	bootload_io$connect
	arg	bootload_info$tape_iom_number
	arg	bootload_info$tape_channel_number
	arg	reset_and_mask_pcw
	arg	0

	lda	=40000,dl			" should be about 1 second
	odd
	sba	1,dl
	tpl	-1,ic
	Breturn

	make_idcw	reset_and_mask_pcw,
		TAPE.reset_status,
		0,
		nondata,marker,,,mask    " for mask, marker means reset
" 
list_fw_names:
	Bpush

	tsx2	bootload_error$tape_mpc_type_list
	epp	seg2,slt|slt.seg	" first slte
	lda	first_fw_seg	" segno
	als	2		" * 4 for slte offset
	eax1	0,al		" seg2|0,x1 -> slte
	lda	last_fw_seg
	als	20		" make it * 4 DU
	sta	last_slte_offset

list.LOOP_ON_SLTES:
	ldx3	seg2|slte.names_ptr,x1	" DU
	epp	seg,nt|0,x3		" seg|0 -> segnam

" Only print first name with prefix fwid.

	lxl4	seg|segnam.count
	eax5	0
	epp	seg,seg|segnam.names  " Point to the array

list.LOOP_ON_NAMES:

	cmpc	(pr,x5),()
	desc9a	seg|segnam.names.name,5
	desc9a	fw_name_wanted,5

	tnz	list.NOT_FWID

	mlr	(pr,x5),(),fill(040)
	desc9a	seg|segnam.names.name+1(1),27
	desc9a	name_to_print.name,32

	tsx2	bootload_console$write
	arg	name_to_print
	arg	fwid_length
	tsx2	bootload_console$write_nl

	tra	list.NEXT_SLTE

list.NOT_FWID:			" next name, please
	eax4	-1,x4
	tze	list.NEXT_SLTE
	eax5	segnam.names_size*4,x5  " character offset
	tra	list.LOOP_ON_NAMES

list.NEXT_SLTE:
	eax1	4,x1
	cmpx1	last_slte_offset
	tmoz	list.LOOP_ON_SLTES
	Breturn

name_to_print:
name_to_print.spaces:
	aci	"    ",4   " 4 spaces indent
name_to_print.name:
	aci	"",32	 " name goes in here

" 

	segdef	fwid,fwrev,fwtype,erstat,iom_name

fwid:	bss	,1		F/W module ID
fwrev:	bss	,1		F/W module revision

fwtype:	bss	,1		for error messages
iom_name:	aci	"",4		for printing boot message
	even
erstat:	bss	,2		error status
TAGS:	aci	"ABCD",4		for IOM name

no_fw_specified:
	aci	"-none",32
fw_name_wanted:
	aci	"fwid.",32
zero_limit:
last_slte_offset:
	bss	,1
question_mark:
	aci	"?",4
help_string:
	aci	"help",4
ipc_string:
	aci	"ipc ",4
shut_string:
	aci	"shut",4

fwid_length:
	vfd	36/6		" FWID's are only 6 chars long

" WORKSPACE for booting the MPC

	even
	bss	dcw_save_area,2
	bss	io_start_time,2
twenty_sec_limit:
	dec	0,20000000	" twenty seconds (in micros)

	make_idcw	cs_idcw,
		TAPE.control_store_overlay,
		0,
		record,
		terminate
	make_idcw	rw_idcw,
		TAPE.main_memory_overlay,
		0,
		record,
		terminate

	make_idcw	w.pcw,
		TAPE.reset_status,
		0,
		nondata,
		proceed		
	bss	w.idcw,1			" stored for RW versus CS
	make_ddcw	w.dcw_1,0,0,iotp		" patched to IOTD if short
	make_ddcw	w.dcw_2,0,0,iotd              " always IOTD if used at all

" The data is in the firmware segment

	end
