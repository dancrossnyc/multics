" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1984 *
" *                                                         *
" ***********************************************************
	name	bootload_linker

" Prelinker for collection 1.
" Stolen from pre_link_(1 2), November 1982, by C. Hornig

	include	bootload_equs
	include_nolist	slt
" 
new_link:	bss	,2
type_pair:bss	,2
link_ptr:	bss	,2
def_ptr:	bss	,2
segno:	bss	,1
linkp:	bss	,1
limit:	bss	,1
last_pair:bss	,1
exp_word:	bss	,1
pass:	bss	,1
segname:	aci	"",32
ename:	aci	"",32

	segdef	prelink
	segdef	segname
	segdef	ename

prelink:
	Bpush

	lxl0	slt|slt.first_init_seg	" prelink the init segs
	lxl1	slt|slt.last_init_seg
	tsx2	scan_sltes

	lxl0	slt|slt.first_sup_seg	" and the sup segs
	lxl1	slt|slt.last_sup_seg
	tsx2	scan_sltes

	Breturn				" that's all, folks
" 
scan_sltes:
	Bpush

	sxl0	segno
	stx1	limit			" save the limit

scan_loop:
	szn	bootload_info$lot_ptr,*x0
	tnz	check_links

scan_next:
	aos	segno			" next segment
	lxl0	segno
	cmpx0	limit			" done?
	tmoz	scan_loop			" no

	Breturn				" yes
" 
" We have a linkage section.

check_links:
	lprp	seg2,bootload_info$lot_ptr,*x0 " SEG2 -> linkage
	spri1	link_ptr
	epp	seg,seg2|0,*		" SEG -> definitions
	spri6	def_ptr

	lxl7	seg2|6			" last link pair
	stx7	last_pair

	ldx1	seg2|6			" X1 -> 1st link pair

link_loop:
	cmpx1	last_pair			" done?
	tpl	scan_next			" yes

	stx1	linkp
	epp	seg2,link_ptr,*		" SEG2 -> linkage
	epp	seg,def_ptr,*		" SEG -> definitions

	lxl7	seg2|0,x1			" look at tag field
	cmpx7	=o46,du			" FT2?
	tnz	next_pair			" no

" start work on the link

	ldx7	seg2|1,x1			" get exp_ptr
	lda	seg|0,x7			" get expression word
	sta	exp_word			" save it

	ldq	seg|1,au			" get type pair
	lda	seg|0,au			" get type pair
	staq	type_pair			" save it

	tra	*+1,au			" dispatch
	tra	next_pair			" (0) unknown
	tra	type_1a			" (1) *|exp,m
	tra	next_pair			" (2)
	tra	type_3a			" (3)
	tra	type_4a			" (4)
	tra	next_pair			" (5)
	tra	type_6a			" (6)

type_1a:	tra	*+1,qu			" dispatch
	tra	t1_text
	tra	t1_link
	tra	next_pair

t1_text:	ldx7	seg2|7			" get the segment number
	easp	seg,0,x7			" pointer
	spri6	new_link
	tra	done

t1_link:	spri1	new_link			" linkage ptr
	tra	done

type_3a:	tsx2	find_seg			" find the segment
	tra	next_pair
	spri6	new_link
	tra	done

type_4a:	tsx2	find_seg			" find the segment
	tra	next_pair
	tsx2	find_def
	tra	next_pair
	tra	done

type_6a:	ldx7	seg|0,ql			" look at acc length
	canx7	=o777000,du		" null?
	tnz	type_4a
	tra	type_3a

done:	epp	seg2,link_ptr,*		" restore link ptr
	ldx1	linkp			" and offset
	lxl7	seg2|1,x1			" get the modifier
	sxl7	new_link+1		" store it
	lxl7	exp_word			" get exp
	asx7	new_link+1		" add it in

	ldaq	new_link			" get the new ptr
	staq	seg2|0,x1			" store it

next_pair:
	ldx1	linkp			" and offset
	eax1	2,x1			" on to the next
	tra	link_loop
" 
find_seg:
	Bpush

	epp	seg,seg|0,qu		" get ptr to segname
	lda	seg|0			" get length
	arl	9			" in AU
	mlr	(pr,rl),(),fill(040)	" copy it
	desc9a	seg|0(1),au
	desc9a	segname,32

	tsx2	bootload_slt_manager$get_seg_ptr
	arg	segname
	tra	find_seg_error
	Breturn	1
find_seg_error:
	Breturn	0
" 
find_def:
	Bpush

	stz	pass			" first pass
	spri6	new_link			" save the text pointer
	lxl7	type_pair+1
	epp	seg2,def_ptr,*x7		" SEG2 -> ename
	lda	seg2|0			" get length
	arl	9			" in AU
	mlr	(pr,rl),(),fill(040)	" copy it
	desc9a	seg2|0(1),au
	desc9a	ename,32

	ldx7	new_link			" get segment number
	szn	bootload_info$lot_ptr,*x7	" segment?
	tze	find_def_error	

	lprp	seg2,bootload_info$lot_ptr,*x7 " get linkage ptr
	epp	seg,seg2|0,*		" SEG -> definitions
	ldx3	seg|0			" start with first def
	tze	find_def_error	

next_def_3:
	ldx7	seg|2,x3			" get name ptr
	epp	seg2,seg|0,x7		" in SEG2
	lda	seg2|0			" get length
	arl	9			" in AU
	cmpc	(pr,rl),(),fill(040)
	desc9a	seg2|0(1),au
	desc9a	segname,32
	tze	found_def3

	ldx3	seg|1,x3			" go to next type-3
	tnz	next_def_3

pass_2:	szn	pass			" already done?
	tnz	find_def_error		" yes
rescan:	ldx3	seg|0			" start from scratch
	stc1	pass			" make full search
	tra	next_def

found_def3:
	lxl3	seg|2,x3			" check other defs
	tze	pass_2

next_def:	ldx7	seg|2,x3			" get name ptr
	epp	seg2,seg|0,x7		" in SEG2
	lda	seg2|0			" get length
	arl	9			" in AU
	cmpc	(pr,rl),(),fill(040)
	desc9a	seg2|0(1),au
	desc9a	ename,32
	tnz	def_no_match

	lxl7	seg|1,x3			" get the class
	anx7	=o7,du
	tra	*+1,x7			" dispatch
	tra	d_text			" 0
	tra	d_link			" 1
	tra	find_def_error		" 2
	tra	type_3			" 3
	tra	find_def_error		" 4

type_3:	szn	pass			" full search?
	tze	rescan			" no

def_no_match:
	ldx3	seg|0,x3			" get next def
	tnz	next_def
	tra	pass_2


d_link:	ldx7	new_link
	lprp	seg2,bootload_info$lot_ptr,*x7 " linkage
	spri1	new_link

d_text:	ldx7	seg|1,x3			" value
	asx7	new_link+1
	Breturn	1

find_def_error:
	tsx2	bootload_error$no_sym
	Breturn	0

	end	bootload_linker
