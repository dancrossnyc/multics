" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" ***********************************************************

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
" BOOTLOAD_CONSOLE 
"
"  console io for collection 0 (bound_bootload_0)
"
"

" HISTORY COMMENTS:
"  1) change(85-09-09,Farley), approve(85-09-09,MCR6979),
"     audit(86-03-04,GDixon), install(86-03-21,MR12.0-1033):
"      Support IMU and FIPS.
"                                                      END HISTORY COMMENTS

	name	bootload_console
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
" BIM 1982-08-08
" Modified 830622 for multiple OPC cards, (and consoles)... -E. A. Ranzenbach
" Modified 9/83 for adp by Keith Loepere.
" Modified 840306 for IPC-CONS-2 IDCW I/O... -E. A. Ranzenbach
" Modified June-July 1984 by Paul Farley to get IPC-CONS-2 to work.
" Modified June 1985 by Paul Farley to remove tape mpc reset/mask-connect.

	include	bootload_equs
	include	bootload_cpu_macros
	include_nolist	make_data_macros
	include_nolist	iom_word_macros
	include	console_io_commands
	include	config_deck
	include	config_prph_opc_card
	include	coll0_segnos
	include	system_types
"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
"	tsx2	bootload_console$write
"	arg	line_to_write
"	arg	length_in_chars
"
"
"	tsx2	bootload_console$write_alert
"
"	tsx2	bootload_console$init	
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


	mod	16
	bss	pr_save,16
	bss	register_save,8

	segdef	in_bootload_console
	bss	in_bootload_console,1

	macro	Centry
	Bentry	&F1

	macro	&1_return          " redefine
	stz	in_bootload_console
	lreg	register_save
	lpri	pr_save
	Breturn	&<&K,2&[0&;&2&]
&&end

&1:	Bpush
	stc1	in_bootload_console
	sreg	register_save
	spri	pr_save
&end


" WRITE entry begins here

	Centry	write,2

	szn	bootload_info$console_available
	tmi	write.okay
	write_return
write.okay:

	absa_au	0,x2*		" address of the string
	stca	write_ascii_ddcw,70

	lda	1,x2*		" length
	ada	3,dl		" round up
	ars	2                   " divide by 4, console dont unnerstand
				" chars.
	stca	write_ascii_ddcw,03	" bottom 6 bits is tally.

	tsx2	bootload_io$connect
	arg	bootload_info$console_iom_number
	arg	bootload_info$console_channel_number
	arg	write_pcw_ptr,*
	arg	write_dcw_list_ptr,*

	cana	bootload_info$status_mask
	tnz	console_write_error			" x2 destroyed

	write_return

"

" WRITE_NL

	Centry	write_nl
	eax5	0
	tra	nl_alert_common

" WRITE_ALERT entry begins here

	Centry	write_alert
	eax5	1
nl_alert_common:
	szn	bootload_info$console_available
	tmi	write_alert.okay
	write_alert_return

write_alert.okay:
	cmpx5	1,du
	tnz	nl
	tsx2	bootload_io$connect
	arg	bootload_info$console_iom_number
	arg	bootload_info$console_channel_number
	arg	write_alert_pcw_ptr,*
	arg	write_alert_dcw_list_ptr,*

	tra	nl_alert.check_status

nl:
	tsx2	bootload_io$connect
	arg	bootload_info$console_iom_number
	arg	bootload_info$console_channel_number
	arg	write_pcw_ptr,*
	arg	write_nl_dcw_list_ptr,*

nl_alert.check_status:
	cana	bootload_info$status_mask
	tnz	console_write_error			" x2 destroyed

	write_alert_return
"

"
" READ_LINE
"
"	tsx2	bootload_console$read_line
"	arg	buffer_to_read_to
"	arg	length_to_read
"	<return with the goods>

	equ	read_buffer,0
	equ	read_length,1

" We do not set the "in console package" flag.
" thus an error on input will provoke an attempt to
" do output for a message, which might even work.

	Bentry	read_line,2

read_line:
	Bpush
	epp6	read_buffer,x2*
	lda	read_length,x2*

	absa_au	pr6|0		" note the buffer address
	stca	read_line_ddcw,70

	lda	1,x2*		" length (round DOWN)
	ars	2                   " divide by 4, console dont unnerstand
				" chars.
	stca	read_line_ddcw,03	" bottom 6 bits is tally.

REREAD:
	mlr	(),(pr,rl),fill(040)   " clear out buffer
	desc9a	0
	desc9a	pr6|0,al

	tsx2	bootload_io$connect
	arg	bootload_info$console_iom_number
	arg	bootload_info$console_channel_number
	arg	read_line_pcw_ptr,*
	arg	read_line_dcw_list_ptr,*

	staq	last_console_status

	cana	=o200000770000         " power off or central or channel
	tnz	read_error
	ana	=o770000,du	" only major status
	cmpa	=o400000,du	" READY
	tze	read_succeeded
	cmpa	=o430000,du	" might be operator error or timeout
	tnz	read_error	" error based on major

" Now analyze minor status

	lda	last_console_status
	cana	=o000400,du	" OPERATOR ERROR
	tze	not_oper_err
	tsx2	write
	arg	operator_error_message
	arg	operator_error_length
	tra	REPROMPT_REREAD

not_oper_err:
	cana	=o001000,du	" TIMEOUT
	tze	not_timeout	
	tsx2	write
	arg	timeout_message
	arg	timeout_length
	tra	REPROMPT_REREAD

not_timeout:
	cana	=o004000,du
	tze	read_error
	tsx2	write_nl
	tsx2	write
	arg	too_long_message
	arg	too_long_length

REPROMPT_REREAD:
	tsx2	write_nl
	tsx2	write
	arg	reprompt_message
	arg	reprompt_length
	tra	REREAD

	" message	name,(TEXT OF MESSAGE)

	macro	message
&1_message:
	aci	~&2~
&1_length:
	dec	&l2
&end
	message	operator_error,( * Line ignored.)
	message	timeout,( * Console timeout.)
	message	too_long,( * Input too long.)
	message	reprompt,(Answer: )

read_succeeded:
	read_line_return

"
" INIT entry begins here

	Centry	init

	absa_au	cr
	stca	write_nl_ddcw,70			" relocate DCW

" If there is a config deck, expect a PRPH OPC.  If not, find the console.

	szn	bootload_info$assume_config_deck
	tze	poll_for_console

" Search config deck.

	epp	seg,=its(config_segno_,0),*	" seg -> config_deck
	eax1	0			" for skipping them

config_console.next_card:

	ldaq	seg|0,x1			" get word and name
	cmpaq     config_console.FREE_CARD	" is it a fence?...
	tze	poll_for_console		" yes, find the console...
	eraq	config_console.OPC_CARD	" or in the card...
	anaq	config_console.MASK_CARD	" mask it...
	tze	config_console.found_card

	eax1	config_card_size,x1		" skip it...
	tra	config_console.next_card

	even
config_console.OPC_CARD:
	aci	"prphopc ",8		" first two words
config_console.FREE_CARD:
	dec	-1			" all 7's...
	dec	-1
config_console.MASK_CARD:
	oct	777777777777		"777777777777777777777000
	oct	777777777000

	even
config_console.STATE:
	aci	"on  ",4			" console must be "on"...

" When we get here, seg|0 -> config_deck$, seg|0,x1 -> prph opc card.

config_console.found_card:

	epp	seg2,seg|0,x1		" point at base of OPC card
	lda	seg2|prph_opc_card.state	" -> status...
	cmpa	config_console.STATE	" is it on?...
	tze	config_console.active_console	" yes, start initialization...
	eax1	config_card_size,x1		" no, skip card...
	tra	config_console.next_card	" here we go again...

config_console.active_console:
	lda	seg2|prph_opc_card.iom         " multiple IOM's -- some day
	sta	bootload_info$console_iom_number
	lda	seg2|prph_opc_card.chan         " channel   
	sta	bootload_info$console_channel_number
	lda	seg2|prph_opc_card.model        " determines PCW vs. IDCW
	sta	bootload_info$console_model
	tra	find.got_it

poll_for_console:
	lda	bootload_info$system_type
	cmpa	ADP_SYSTEM,dl
	tze	ssf

	lda	8,dl			prepare to find operator's console
	sta	bootload_info$console_channel_number
	lda	bootload_info$tape_iom_number
	sta	bootload_info$console_iom_number

find.next:
	tsx2	bootload_io$connect_timeout
	arg	bootload_info$console_iom_number
	arg	bootload_info$console_channel_number
	arg	write_alert_pcw		" might be an EMC
	arg	write_alert_idcw		" or an IPC-CONS
	tra	find.skip_this_channel

	cana	bootload_info$status_mask
	tze	find.got_it

find.skip_this_channel:
	aos	bootload_info$console_channel_number
	lda	bootload_info$console_channel_number
	cmpa	64,dl
	tmi	find.next		try next one
	tra	poll_for_console	keep trying... hope lcc wakes up
" 
" We have a console. Now figure out what kind.

ssf:	stz	bootload_info$console_iom_number
	stz	bootload_info$console_channel_number
	tra	init.lcc

find.got_it:

" Short pause for ipc-cons-2 console to settle down

	even
	lda	=o40000,dl		" about a second
	sba	1,dl
	tpl	-1,ic

	tsx2	bootload_io$connect
	arg	bootload_info$console_iom_number
	arg	bootload_info$console_channel_number
	arg	read_id_pcw		" might be an EMC
	arg	read_id_idcw		" or an IPC-CONS

	cana	bootload_info$status_mask
	tnz	init.emc

init.lcc:	lda	6601,dl			" LCC model #
	sta	bootload_info$console_model

	mlr	(),()			" set up to use IDCW's
	desc9a	idcw_ptrs,n_dcw_ptrs*4
	desc9a	dcw_ptrs,n_dcw_ptrs*4

" Short pause for ipc-cons-2 console to settle down

	even
	lda	=o40000,dl		" about a second
	sba	1,dl
	tpl	-1,ic

	lda	=o400000,du
	sta	bootload_info$console_available	" set us up.
	sta	bootload_info$console_pcw_check " let's chk to see if PCWs are used
	sta	bootload_info$console_uses_pcw  " set the default to YES

	tsx2	bootload_io$connect		" bootload_io will make the final desision.
	arg	bootload_info$console_iom_number
	arg	bootload_info$console_channel_number
	arg	write_pcw_ptr,*
	arg	write_nl_dcw_list_ptr,*
	tra	init.model_join

init.emc:
	lda	6001,dl
	sta	bootload_info$console_model

	mlr	(),()			" use PCW's
	desc9a	pcw_ptrs,n_dcw_ptrs*4
	desc9a	dcw_ptrs,n_dcw_ptrs*4
	lda	=o400000,du
	sta	bootload_info$console_available	" set us up.

init.model_join:
	tsx2	bootload_error$first_message		" let them know

	init_return
"
console_write_error:
	staq	last_console_status
read_error:
	stz	bootload_info$console_available
	tra	bootload_error$console_failure

	even
	segdef	last_console_status
last_console_status:
	bss	,2

dcw_ptrs:
write_pcw_ptr:		arg	0
write_alert_pcw_ptr:	arg	0
read_line_pcw_ptr:		arg	0
write_dcw_list_ptr:		arg	0
write_nl_dcw_list_ptr:	arg	0
write_alert_dcw_list_ptr:	arg	0
read_line_dcw_list_ptr:	arg	0
	equ	n_dcw_ptrs,*-dcw_ptrs

pcw_ptrs:
	arg	write_pcw		" write
	arg	write_alert_pcw	" write_alert
	arg	read_line_pcw	" read_line
	arg	write_ascii_ddcw	" write
	arg	write_nl_ddcw	" write_nl
	arg	0		" write_alert
	arg	read_line_ddcw	" read_line

idcw_ptrs:
	arg	reset_status_p_pcw	" reset & proceed
	arg	reset_status_p_pcw  " reset & proceed
	arg	reset_status_p_pcw	" reset & proceed
	arg	write_ascii_idcw	" write
	arg	write_nl_idcw	" write_nl
	arg	write_alert_idcw	" write_alert
	arg	read_line_idcw	" read_line

	even

	make_pcw	write_pcw,
		CONSOLE.write_ASCII,
		0,0,
		record,terminate

	make_pcw	write_alert_pcw,
		CONSOLE.write_alert,
		0,0,
		nondata,terminate

	make_pcw	read_line_pcw,
		CONSOLE.read_ASCII,
		0,0,
		record,terminate

	make_pcw	reset_status_pcw,
		CONSOLE.reset_status,
		0,0,nondata,terminate

	make_pcw	reset_status_p_pcw,
		CONSOLE.reset_status,
		0,0,nondata,proceed,1

	make_pcw	read_id_pcw,
		CONSOLE.read_id,
		0,0,nondata,terminate

	null				" make room for pcw inserted 
					" as idcw in IOX case
	make_idcw	read_id_idcw,
		CONSOLE.read_id,
		0,
		record,
		terminate

	null
	make_idcw	write_ascii_idcw,
		CONSOLE.write_ASCII,
		0,
		record,
		terminate
	make_ddcw write_ascii_ddcw,
		0,0,iotd,word

	null
	make_idcw	write_alert_idcw,
		CONSOLE.write_alert,
		0,
		record,
		terminate

	null
	make_idcw	write_nl_idcw,
		CONSOLE.write_ASCII,
		0,
		record,
		terminate
	make_ddcw write_nl_ddcw,
		0,1,iotd,word

	null
	make_idcw	read_line_idcw,
		CONSOLE.read_ASCII,
		0,
		record,
		terminate
	make_ddcw	read_line_ddcw,
		0,0,iotd,word

cr:	vfd	o9/012,o9/015,18/0
	end
