" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" ***********************************************************

" HISTORY COMMENTS:
"  1) change(86-05-13,GJohnson), approve(86-05-13,MCR7387),
"     audit(86-05-13,Martinson), install(86-05-14,MR12.0-1056):
"     Correct error message documentation.
"                                                      END HISTORY COMMENTS


" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " 
"
"         BOOTLOAD_ERROR
"
"         This program is entered to report an error. It saves all registers,
"         and prints a message, possibly including the invalid data. For the
"         unexpected_fault entry, it also describes the fault.
"
"	Modified 9/83 by Keith Loepere for adp.
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " 
	name	bootload_error

	include		adp_scu
          include             bootload_equs
	include_nolist	bootload_formline
	include		coll0_segnos
	include		fault_vector
	include		flagbox
	include_nolist	slte
	include		system_types
	include		toe_hold

" RECURSION PROTECTION -- in case an error encounters processing an error.
" set nonzero when any entrypoint here is entered.

	bss	in_bootload_error,1

          inhibit   on        <+><+><+><+><+><+><+><+><+><+><+><+><+><+><+>
"
" This code all runs inhibited, just in case.
"

" Called as 
"		tsx2	write_message
"
" writes message currently in message buffer to console, if there is one.
"

write_message:
	Bpush

	tsx2	bootload_console$write
	arg	message_buffer
	arg	message_length
write_message.return:
	Breturn


" This location shows what error we came in on in the case of a failure.

	segdef	current_error_number

	bss	current_error_number,1

" When calling error_common, x2 is first saved here so it can
" be put into the machine conditions.

	bss	save_x2,1

"
" Stores machine conditions as available for most errors
" Assumption is that there is a unique entrypoint for each
" error call, so that entry via tra is reasonable.
" 
"  Called by:
"
"	tsx2	error_common
"
error_common:
	Bpush
	spri	mc_area+mc.prs	" Save everything
	ldx2	save_x2
	sreg	mc_area+mc.regs_word
	spl	mc_area+mc.eis_info
	lda	=o400000,du
	sta	in_bootload_error
          tsx2      save_rest_of_registers
	tsx2	clear_buffer
	tsx2	bootload_console$write_nl
	tsx2	bootload_console$write_alert

error_common.return:
	Breturn


	macro	IOA
	maclist	off,save
	formline	(^A&1),
		message_buffer,80,bootload_0_string&>&K,1&[,
		&Fq2&]
	sta	message_length
	tsx2	write_message
	maclist	restore
	&end

	set	unique_errorx,0

	macro	error_comment
	maclist	on
	null	***** ERROR &1 error number is &2
	maclist	off
&end
	
          macro     error
	maclist	off,save
	equ	&1_errorx,unique_errorx
	error_comment &1,unique_errorx

          segdef    &1
&1:	szn	in_bootload_error
	tze	&U.okay

	staq	disaster_AQ
	lda	&1_errorx,dl
	tra	recursion.die	
&U.okay:

	stx2	save_x2		" so that it can be put in machine 
				" conditions.
	ldx2	unique_errorx,du
	stx2	current_error_number
	tsx2	error_common
	IOA	&Fq2
	lda	unique_errorx,dl
          tra       finish_with_error


	set	unique_errorx,unique_errorx+1
	maclist	restore
&end

" disaster_AQ is used to safe_store the AQ on a recursive error.

recursion.die:
	oraq	RECURSION_PATTERN
	odd
	dis	*
	tra	-1,ic

	even
	segdef	disaster_AQ
	bss	disaster_AQ,2
RECURSION_PATTERN:
	oct	666666000000
	oct	666666000000

	macro	warning
	maclist	off,save
	segdef	&1
&1:
	Bpush
	IOA	&Fq2
	tsx2	bootload_console$write_nl
	Breturn
	maclist	restore
	&end

	macro	warning_nnl
	maclist	off,save
	segdef	&1
&1:
	Bpush
	IOA	&Fq2
	Breturn
	maclist	restore
	&end

bootload_0_string:
	acc	"bootload_0: "
message_buffer:
	aci	"",80
message_length:
	bss	,1

clear_buffer:
	Bpush
	mlr	(),(),fill(000)
	desc9a	0,0
	desc9a	message_buffer,80
	Breturn
" 
          mod       16                  " Data areas for error status
	segdef	mc
mc:
mc_area:            bss       ,48
          equ       mc_area_size,*-mc_area


          segdef    unexpected_scu      " Must be externally addressable
unexpected_scu:     bss       ,8        " Data is copied from here into mc_area

	segdef	current_segment
current_segment:	bss	,1	" Segno of current segment being loaded

" 

" OUT_OF_STACK is handled specially. There is no stack left
" for internal calls, so we do the best we can

	segdef	out_of_stack

out_of_stack:
	oraq	OUT_OF_STACK_PATTERN
	odd
	dis	*
	tra	-1,ic

	even
OUT_OF_STACK_PATTERN:
	oct	555555000000
	oct	555555000000
" 

" ORDINARY ERRORS

	error	shutdown,(Shutdown)

	error	console_failure,(Console status ^w ^w),
		bootload_console$last_console_status,
		bootload_console$last_console_status+1

          error     bad_cw,(Unexpected control word on tape.)

	error	tape_error,(Tape read error: ^w ^w),
                    bootload_loader$tape_status,
                    bootload_loader$tape_status+1

          error     bad_mst,(Bad MST format.)

          error     bad_sequence,(Improper text/link/def sequence for seg ^o),
                    current_segment

          error     out_of_main_memory,(Out of main memory for seg ^o),
                    current_segment

	error	too_many_segs,(Too many supervisor segments.)

	error	upt_overflow,(An unpaged page table overflowed for seg ^o),
		current_segment

          warning	first_message,(Booting system ^a^a generated ^a^a ^a^a ^a ^a.),
		bootload_info$sysid,
		bootload_info$sysid+1,
		bootload_info$creation_time_string,
		bootload_info$creation_time_string+1,
		bootload_info$creation_time_string+2,
		bootload_info$creation_time_string+3,
		bootload_info$creation_time_string+4,
		bootload_info$creation_time_string+5

	warning_nnl tape_fw_prompt,(Enter boot tape MPC model: )

	warning_nnl early_dump_prompt,(Enter tape drive number for memory dump: )

	warning	early_dump_done,(Early dump finished.)

	warning	tape_mpc_help_1,(Enter controller type as Annn.)
	warning	tape_mpc_help_2,(For list of controller types enter '?'.)
	warning	tape_mpc_type_list,(Valid controller types are:)

	warning	no_such_tape_fw,(Unknown tape MPC model ^a),
		bootload_info$tape_mpc_fw_name

	warning	booting_tape_mpc,(Booting ^a ^a ^d. with ^b ^b firmware.),
		bootload_info$tape_mpc_fw_name,
		bootload_tape_fw$iom_name,
		bootload_info$tape_channel_number,
		bootload_tape_fw$fwid,
		bootload_tape_fw$fwrev

	warning	booted_tape_mpc,(Booted tape MPC.)

	warning	tape_mpc_boot_error,(Error status ^w ^w booting ^a firmware.),
		bootload_tape_fw$erstat,
		bootload_tape_fw$erstat+1,
		bootload_tape_fw$fwtype

	warning	tape_dump_error,(Excessive tape errors: status ^w ^w.),
		bootload_tape_fw$erstat,
		bootload_tape_fw$erstat+1

	warning	flagbox_message,(^A),
		bootload_early_dump$flagbox_message

	warning	no_sym,(External symbol not found: ^a^a^a^a^a^a^a^a$^a^a^a^a^a^a^a^a.),
		bootload_linker$segname,
		bootload_linker$segname+1,
		bootload_linker$segname+2,
		bootload_linker$segname+3,
		bootload_linker$segname+4,
		bootload_linker$segname+5,
		bootload_linker$segname+6,
		bootload_linker$segname+7,
		bootload_linker$ename,
		bootload_linker$ename+1,
		bootload_linker$ename+2,
		bootload_linker$ename+3,
		bootload_linker$ename+4,
		bootload_linker$ename+5,
		bootload_linker$ename+6,
		bootload_linker$ename+7
" 

	segdef	unexpected_fault		" This entry is special, and does its own saving
unexpected_fault:
	szn	in_bootload_error
	tze	unexpected_fault.okay

	odd
	dis	*
	tra	*-1

unexpected_fault.okay:
	spri	mc_area+mc.prs
	sreg	mc_area+mc.regs_word
	spl	mc_area+mc.eis_info

	lda	=o400000,du
	sta	in_bootload_error
	ldx2	-1,du
	stx2	current_error_number	" -1 = fault
	
	tsx2	save_rest_of_registers	" Put anything else interesting in

	mlr	(),()			" Copy in the SCU data
	desc9a	unexpected_scu,8*4
	desc9a	mc_area+mc.scu,8*4

	tsx2	bootload_abs_mode$initial_prs	" restore the PR's

	tsx2	bootload_console$write_nl	" In case of mid-line

	lda	bootload_info$system_type
	cmpa	ADP_SYSTEM,dl
	tze	adp_fault_name

	lda	mc_area+mc.scu+1		" Get the fault/interrupt number
	ana	scu.fi_num_mask,dl
	ars	scu.fi_num_shift
	sta	fault_number

	ldq	mc_area+mc.scu+1		" See if the fault flag is set
	anq	scu.fi_flag,dl	 	" If not, print a different message
	tze	unexpected_interrupt_actually " otherwise, skip it

	als	1			" double fault number (still in A)
	ldaq	bootload_info$l68_fault_names,al
	tra	have_fault_name

adp_fault_name:
	lda	mc_area+mc.scu+adp_scu.fi_num_word " Get the fault/interrupt number
	ana	adp_scu.fi_num_mask,du
	ars	adp_scu.fi_num_shift
	sta	fault_number

	ldq	mc_area+mc.scu+adp_scu.fi_flag_word " See if the fault flag is set
	anq	adp_scu.fi_flag,du	 	" If not, print a different message
	tnz	unexpected_interrupt_actually " otherwise, skip it

	als	1			" double fault number (still in A)
	ldaq	bootload_info$adp_fault_names,al

have_fault_name:
	staq	fault_name		" store it so it can be printed
	IOA	(Unexpected ^a^a fault.),fault_name,fault_name+1
	tra	describe_unexpected_fault

unexpected_interrupt_actually:
	IOA	(Uexpected interrupt number ^oo.),fault_number

" 
describe_unexpected_fault:
	tsx2	bootload_console$write_nl

	lda	bootload_info$system_type
	cmpa	ADP_SYSTEM,dl
	tze	adp_scu_data

	lda	mc_area+mc.scu+scu.ppr_word	" Get the PSR
	ana	scu.psr_mask,du
	ars	scu.psr_shift
	sta	args.ppr.psr

	lda	mc_area+mc.scu+scu.ilc	" Get the IC tracker
	ars	18
	sta	args.ppr.ic

	lda	mc_area+mc.scu+scu.tsr_word	" Get the TSR
	ana	scu.tsr_mask,du
	ars	scu.tsr_shift
	sta	args.tpr.tsr

	lda	mc_area+mc.scu+scu.ca	" Get the computed address
	ars	18
	sta	args.tpr.ca
	tra	got_scu_data

adp_scu_data:
	lda	mc_area+mc.scu+adp_scu.psr_word " Get the PSR
	ana	adp_scu.psr_mask,du
	ars	adp_scu.psr_shift
	sta	args.ppr.psr

	lda	mc_area+mc.scu+adp_scu.ilc	" Get the IC tracker
	ars	18
	sta	args.ppr.ic

	lda	mc_area+mc.scu+adp_scu.tsr_word	" Get the TSR
	ana	adp_scu.tsr_mask,du
	ars	adp_scu.tsr_shift
	sta	args.tpr.tsr

	lda	mc_area+mc.scu+adp_scu.ca	" Get the computed address
	ana	=o777777,dl
	sta	args.tpr.ca

got_scu_data:
	epp6	mc_area			" Get the MC pointer
	epaq	pr6|0
	ana	=o077777,du		" Extract the segno
	ars	18
	sta	args.mcp.segno
	anq	=o777777,du
	qrs	18
	stq	args.mcp.word

	IOA	(PPR = ^o|^o, TPR = ^o|^o, MC at ^o|^o),
		args.ppr.psr,
		args.ppr.ic,
		args.tpr.tsr,
		args.tpr.ca,
		args.mcp.segno,
		args.mcp.word
	tsx2	bootload_console$write_nl
	tra	finish_with_error

		even
fault_name:	aci	"",8
fault_number:	dec	0
args.ppr.psr:	dec	0
args.ppr.ic:	dec	0
args.tpr.tsr:	dec	0
args.tpr.ca:	dec	0
args.mcp.segno:	dec	0
args.mcp.word:	dec	0

" 

save_rest_of_registers:
	Bpush
	ldi	0,dl

	lda	bootload_loader$segptr	" Record during what it happened
	arl	18
	sta	current_segment

	Breturn

finish_with_error:                      " Come here when it's all over
	tra	bootload_early_dump$0
" 

	even

" 

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"							"
"	Error message documentation.				"
"							"
"							"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

"BEGIN MESSAGE DOCUMENTATION


"         Message:
"         HALT with octal 6's in the upper half of the AQ.

"         S:    $crash

"         T:    $init

"         M:    A recursive error condition was encountered: that is,
"         the collection zero error handler was called recursively.
"         The low half of the A contains the unique error number
"         of the recursive error. See the listing of bootload_error.alm
"         for error numbers. bootload_error$disaster_AQ contains the
"         AQ at the time of recursive entry.

"         A:    This error indicates a logic error or a hardware problem.
"         Use execute switches to return to BOS.
"         Try a different tape. Failing that, look for a CPU problem.


"         Message:
"         HALT with octal 5's in the upper half of the AQ.

"         S:   $crash

"         T:   $init

"         M:   The collection zero call stack has overflowed. This
"         indicates a logic error in the collection zero
"         supervisor, or a hardware problem (possibly with
"         id or di modifiers).

"         A:   Try another tape, and/or look for a CPU bug.


"         Message:
"         bootload_0: Shutdown

"         S:    $crash

"         T:    $init

"         M:    The operator answered "shut" when asked for the bootload 
"         tape mpc information.

"         A:    $reboot


"         Message:
"         bootload_0: Console status WORD1 WORD2

"         S:    $crash

"         T:    $init

"         M:    An I/O error was encountered on the console. WORD1 and WORD2
"         are the two words of the status returned.

"         A:    Run T&D on the console.


"         Message:
"         bootload_0: Unexpected control word on tape CONTROL_WORD.

"         S:    $crash

"         T:    $init

"         M:    An unexpected Multics system tape control word was encountered.

"         A:    The system tape was generated improperly; use another copy
"         of the system tape.


"         Message:
"         bootload_0: Tape read error: WORD1 WORD2

"         S:    $crash

"         T:    $init

"         M:    An I/O error was encountered when reading the MST tape.  WORD1
"         and WORD2 are the two words of the status returned.

"         A:    $reboot


"         Message:
"         bootload_0: Bad MST format.

"         S:    $crash

"         T:    $init

"         M:    The records on the MST tape were out of sequence.

"         A:    Try another tape.


"         Message:
"         bootload_0: Improper text/link/def sequence.

"         S:    $crash

"         T:    $init

"         M:    Text, linkage, or definitions appeared out of proper sequence
"	on the Multics system tape.

"         A:    The system tape was generated improperly; use another copy
"	of the system tape.


"         Message:
"         bootload_0: Out of main memory.

"         S:    $crash

"         T:    $init

"         M:    Not enough main memory is configured in order to load
"	collection 1.

"         A:    Configure more main memory and boot again.


"         Message:
"         bootload_0: Too many supervisor segments.

"         S:    $crash

"         T:    $init

"         M:    More than 256 supervisor segments were declared on the MST.

"         A:    The system tape was generated improperly; use another copy 
"         of the system tape.


"         Message:
"         bootload_0: An unpaged page table overflowed for seg N.

"         S:    $crash

"         T:    $init

"         M:    The size of the page table needed for "unpaged" segment N
"         exceeded the area left for such page tables.

"         A:    The system tape was generated improperly; use another copy
"         of the system tape.


"         Message:
"         bootload_0: Booting system SYSID generated CREATION_TIME

"         S:     $info

"         T:     $init

"         M:     This is the first message printed by Multics, announcing the
"         sysid and creation date/time of the system tape.


"         Message:
"         bootload_0: Enter boot tape MPC model: 

"         S:    $info

"         T:    $init

"         M:    This query requests the operator to identify the bootload tape
"         mpc so that firmware may be loaded.  Refer to the MOH for details.


"         Message:
"         bootload_0: Enter tape drive number for memory dump: 

"         S:    $info

"         T:    $crash

"         M:    An initialization failure occured when the toehold was not active.
"         The system is requesting the number of a tape drive on the bootload
"         tape mpc on which to write a dump of memory.


"         Message:
"         bootload_0: Unknown tape MPC model NAME.

"         S:    $info

"         T:    $init

"         M:    The operator entered an unrecognizable mpc identifier.

"         A:    Try another mpc identifier.


"         Message:
"         bootload_0: Booting FWNAME IOM CHAN with FWID FWREV firmware.

"         S:    $info

"         T:    $init

"         M:    The system is about to boot firmware into the bootload
"         tape mpc.


"         Message:
"         bootload_0: Booted tape MPC.

"         S:    $info

"         T:    $init

"         M:    The system succeeded in booting the bootload tape mpc.


"         Message:
"         bootload_0: Error status WORD1 WORD2 booting FWTYPE firmware.

"         S:    $info

"         T:    $init

"         M:    An error occured when attempting to boot firmware into
"         the bootload tape mpc.  WORD1 and WORD2 are the status
"         returned.

"         A:    Try another firmware identifier.


"         Message:
"         bootload_0: Excessive tape errors: status WORD1 WORD2.

"         S:    $info

"         T:    $crash

"         M:    An excessive number of write errors occured when trying
"         to write an early dump tape.  The dump to this tape will
"         be aborted.

"         A:    Try another tape.


"         Message:
"         bootload_0: External symbol not found: SEG$ENTRY

"         S:    $info

"         T:    $init

"         M:    The entrypoint ENTRY was not found within the existant
"         segment SEG during pre-linking of collection 1.  This 
"         may indicate that the system tape was generated improperly.

"         END MESSAGE DOCUMENTATION

	end
