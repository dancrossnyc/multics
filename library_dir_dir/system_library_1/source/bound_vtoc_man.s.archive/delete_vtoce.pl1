/****^  ******************************************************
        *                                                    *
        * Copyright, (C) Honeywell Bull Inc., 1987           *
        *                                                    *
        * Copyright (c) 1987 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        * Copyright (c) 1972 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        ****************************************************** */

/*
   delete_vtoce (branchp, code)


   FUNCTION -

   This procedure deletes the vtoc entry of the segment whose branch is pointed  to
   by the input argument "branchp". It performs the following system functions:
   -  Disconnect  the  page table (if any) of the segment from any sdw that may be
   pointing to it.
   - Free all disk, bulk store and core addresses occupied by the  pages  of  that
   segment.
   - Free the vtoc entry for that segment.
   -  If  the  segment  is  a directory which received some quota from its parent,
   return this quota to the parent.


   IMPLEMENTATION -

   This procedure is called only by delentry.  It  assumes  the  following  initial
   conditions:
   -  The directory in which the branch resides is locked for writing on behalf of the current
   process.
   - All items of the branch pointed to by "branchp" are valid.
   - All conditions required to delete the segment have already been checked.
   - If the segment to be deleted is a directory, it is locked on  behalf  of  the
   current process.


   MODIFICATIONS -

   03/27/75	Andre Bensoussan.
   07/29/77	Greenberg, for TPP update.
   09/17/82	J. Bongiovanni to optimize by reducing work done under
   AST Lock
   10/26/82	J. Bongiovanni, for fm_damaged
   05/30/83	E. N. Kittlitz search_ast$check, setfaults$if_active pvid, vtocx args

*/


/* format: style4 */
%page;
delete_vtoce: procedure (branchp, code);


dcl  branchp ptr;					/* Input  - branch pointer */
dcl  code fixed bin (35);				/* Output - error code */

dcl  uid bit (36) aligned;
dcl  pvid bit (36) aligned;
dcl  (i, pvtx, vtocx) fixed bin (17);
dcl  n_deposit_pages fixed bin;
dcl  1 local_aste aligned like aste;
dcl  1 local_vtoce aligned like vtoce;
dcl  deposit_list (0:255) bit (22) aligned;
dcl  pageno_list (0:255) fixed bin aligned;

dcl  null builtin;

dcl  error_table_$vtoce_connection_fail external fixed bin (35);
dcl  sst$checksum_filemap fixed bin (35) external;

dcl  lock$lock_ast entry;
dcl  lock$unlock_ast entry;
dcl  search_ast$check entry (bit (36) aligned, bit (36) aligned, fixed bin, fixed bin (35)) returns (ptr);
dcl  setfaults$if_active entry (bit (36) aligned, bit (36) aligned, fixed bin, bit (1) aligned);
dcl  quotaw$mq entry (ptr, ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  vtoc_man$await_vtoce entry (bit (36) aligned, fixed bin, fixed bin, fixed bin (35));
dcl  vtoc_man$free_vtoce entry (bit (36) aligned, fixed bin, fixed bin, fixed bin (35));
dcl  get_pvtx entry (bit (36), fixed bin (35)) returns (fixed bin);
dcl  get_pvtx$hold_pvtx entry (bit (36) aligned, fixed bin, fixed bin (35));
dcl  get_pvtx$release_pvtx entry (bit (36) aligned, fixed bin);
dcl  activate entry (ptr, fixed bin (35)) returns (ptr);
dcl  deactivate$for_delete entry (ptr, fixed bin (35));
dcl  pc$get_file_map entry (ptr, ptr, ptr, fixed bin, ptr, ptr);
dcl  pc$deposit_list entry (fixed bin, fixed bin, ptr, fixed bin, ptr);
dcl  truncate_vtoce$truncate_vtoce_delete entry (ptr, fixed bin (35));
dcl  syserr$error_code entry options (variable);

dcl  (error_table_$mylock, error_table_$root) fixed bin (35) external;

%page;
	code = 0;
	ep = branchp;

	uid = entry.uid;
	pvid = entry.pvid;
	pvtx = get_pvtx (entry.pvid, code); if code ^= 0 then return;
	vtocx = entry.vtocx;


	call get_pvtx$hold_pvtx (pvid, pvtx, code);
	if code ^= 0 then return;
	call setfaults$if_active (uid, pvid, vtocx, "0"b);

	call truncate_vtoce$truncate_vtoce_delete (ep, code);
	if code ^= 0 then if code = error_table_$vtoce_connection_fail then do;
		code = 0;				/* delete the branch only */
		go to release;
	     end;
	     else go to release;

	if entry.dirsw then call RETURN_QUOTA;

	n_deposit_pages = 0;

	call lock$lock_ast;

	astep = search_ast$check (uid, pvid, vtocx, (0)); /* don't worry about double uid */
	if astep ^= null then do;
	     if aste.dius then do;			/* volume dumper is using this */
		call lock$unlock_ast;
		astep = activate (ep, code);
		if code ^= 0 then go to release;
	     end;
	     call pc$get_file_map (astep, addr (local_aste), addr (local_vtoce.fm), n_deposit_pages,
		addr (deposit_list), addr (pageno_list));
	     if aste.fm_damaged & (sst$checksum_filemap ^= 0)
	     then n_deposit_pages = 0;
	     call deactivate$for_delete (astep, code);
	end;

	if code = 0 then
	     call vtoc_man$free_vtoce (pvid, pvtx, vtocx, code);

	call lock$unlock_ast;
	if code ^= 0 then go to release;

	if n_deposit_pages > 0 then do;
	     call vtoc_man$await_vtoce (pvid, pvtx, vtocx, code);
	     if code = 0 then
		call pc$deposit_list (pvtx, n_deposit_pages, addr (deposit_list),
		     vtocx, addr (pageno_list));
	end;

release:
	call get_pvtx$release_pvtx (pvid, pvtx);

	return;



RETURN_QUOTA: procedure;

dcl  qsw bit (1) init ("0"b);
dcl  local_tpp (0:1) fixed bin (71) aligned;
dcl  fixedoverflow condition;
dcl  par_pvid bit (36) aligned;
dcl  par_pvtx fixed bin;
dcl  pep ptr;
dcl  par_vtocx fixed bin (17);
dcl  sumcode fixed bin (35);
dcl  READ_LOCK bit (36) options (constant) static init ("000000000000"b3) aligned;


dcl  sum$getbranch_root_my entry (ptr, bit (36) aligned, ptr, fixed bin (35));
dcl  lock$dir_unlock entry (ptr);
dcl  (vtoc_man$get_vtoce, vtoc_man$put_vtoce) entry (bit (36) aligned, fixed bin, fixed bin, bit (3), ptr,
	fixed bin (35));

dcl  1 local_vtoce like vtoce aligned;

	astep = activate (ep, code); if code ^= 0 then return; /* Locks the AST and leaves it locked */

	do i = 0 to 1;
	     if (i = 0 & aste.tqsw (i) & ^aste.master_dir) |
		(i = 1 & aste.tqsw (i)) then
		do;
		qsw = "1"b;
		call quotaw$mq (ptr (astep, astep -> aste.par_astep), astep, -aste.quota (i),
		     bit (fixed (i, 1), 1), code);
		if code ^= 0 then call syserr$error_code (4, code,
			"delete_vtoce: from quotaw, pvid ^w, vtocx ^o", pvid, vtocx);
	     end;
	end;

	call lock$unlock_ast;

	if ^qsw then return;

/*	UPDATE TPP TO THE SUPERIOR */

	call vtoc_man$get_vtoce (pvid, pvtx, vtocx, "100"b, addr (local_vtoce), code);
	if code ^= 0 then return;

	local_tpp = local_vtoce.trp;
	if local_tpp (0) = 0 & local_tpp (1) = 0 then return;


	dp = ptr (ep, 0);				/* We're deleting >a>b>c>d. dp -> >a>b>c */
	call sum$getbranch_root_my (dp, READ_LOCK, pep, sumcode);
						/* This locking of parent's parent is to prevent seg move on parent. */

	if sumcode = 0 | sumcode = error_table_$root | sumcode = error_table_$mylock then do;
	     par_pvid = dir.pvid;
	     par_vtocx = dir.vtocx;
	end;
	else do;
	     code = sumcode;
	     go to tploss;
	end;

	call lock$lock_ast;				/* must protect VTOCE */

	par_pvtx = get_pvtx ((par_pvid), code);
	if code ^= 0 then go to tpploss1;
						/* Shouldn't happen, RLV better be mounted. */
	call vtoc_man$get_vtoce (par_pvid, par_pvtx, par_vtocx, "100"b, addr (local_vtoce), code);
	if code ^= 0 then go to tpploss1;

	on fixedoverflow go to tpploss1;
	local_vtoce.trp = local_vtoce.trp + local_tpp;
	revert fixedoverflow;

	call vtoc_man$put_vtoce (par_pvid, par_pvtx, par_vtocx, "100"b, addr (local_vtoce), code);
tpploss1:
	call lock$unlock_ast;
tploss:
	if sumcode = 0 then call lock$dir_unlock (ptr (pep, 0));

	if code ^= 0 then call syserr$error_code (4, code,
		"delete_vtoce: cannot add time/page product (^d ^d) to pvid ^w vtocx ^o uid ^w.",
		local_tpp, par_pvid, par_vtocx, dir.uid);

	return;

     end RETURN_QUOTA;

/* format: off */
%page; %include aste;
%page; %include dir_header;
%page; %include dir_entry;
%page; %include vtoce;

/* format: on */
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   delete_vtoce: from quotaw, pvid PPP. vtocx VVV ERRORMESSAGE

   S: $log

   T: $run

   M: While deleting a directory which had a quota
   account, a quota handling  problem usually record
   quota overflow, was encountered.

   A: $ignore

   Message:
   delete_vtoce: cannot add time/page product (SEGTPP DIRTPP)
   to pvid PPP vtocx VVV uid UUU ERRORMESSAGE

   S: $log

   T: $run

   M: During the deletion of a directory which had
   a quota account, a difficulty was encountered in
   reflecting its time/page product upward. SEGTPP and
   DIRTPP are the time/page product for segments and directories,
   respectively.

   A: $notify_sa

   END MESSAGE DOCUMENTATION */
     end delete_vtoce;
