/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/*
   update_vtoce        (astep)
   update_vtoce$deact  (astep, code)





   FUNCTION -

   The procedure "update_vtoce" updates the vtoce using the aste pointed to by  the
   input  argument  "astep".  The  aste  can  be  regarded  as  being  some form of
   associative memory for almost all the vtoce items.  Therefore,  any  vtoce  item
   that  has  been  copied from the vtoce into the aste at activation time, must be
   copied back from the aste into the vtoce at update vtoce time, if the  value  of
   this  item  is  different  in  the  vtoce  and the aste. These items include the
   maximum segment length (msl), the current segment length (csl),  the  number  of
   disk  records  (records)  occupied by the segment, the date and time segment was
   used (dtu), the date and time the segment was modified (dtm) and  the  file  map
   (fm).  For  directories,  these  items,  in  addition, include all quota related
   information.

   The AST is supposed to be locked before calling "update_vtoce" and unlocked upon
   return. The procedure "update_vtoce" does not concern  itself  with  this  lock.
   When  it  is  obvious  that  no race condition can occur (initializer, emergency
   shutdown), this procedure may be called without locking the AST.

   The Page Table Lock however is not supposed  to  be  locked  (and  must  not  be
   locked) before calling this procedure.

   Update_vtoce  is  called  each  time  a segment is being deactivated. It is also
   called for segments which are not being deactivated,  in  order  to  update  the
   vtoce on the disk, if they have been active for a long time.


   IMPLEMENTATION -

   Basically   the   logic   of   "update_vtoce"   is  very  simple.   First,  call
   pc$get_file_map in order to get a  snapshot  of  the  aste  with  the  fm.  Then
   determine,  from  the aste, the pvtx and the vtocx of the vtoce, read the vtoce,
   update it with the items returned by pc$get_file_map, and write it back  on  the
   disk. At last, deposit the list of disk addresses that may have been returned by
   pc$get_file_map.   Although  this  simple  implementation  is  correct, it would
   probably be very expensive in terms of I/O requests since the 
   vtoce would be read and written each time. 

   The simple implementation is optimized as follows. A set of criteria are used
   to determine whether it is necessary to read the VTOCE. If it is not, part
   1 is written to disk (note that this can happen only for a segment whose
   file map fits into part 1). If it is necessary to read the VTOCE, the entire
   VTOCE is read and written back.
   





   MODIFIED BY:

        /84   Benson Margulies - to purge users of sst.incl
   10/01/82   J. Bongiovanni - synchronized switch, filemap checksum
   8/18/82    J. Bongiovanni - new pc$get_file_map, pc$deposit_list calling
			 sequence
   7/10/82    J. Bongiovanni - to simplify the optimization by reading the
		           entire VTOCE if it is necessary to read it at all
   3/18/82    J. Bongiovanni - to return an error code if called for a hardcore  segment
   10/10/77   B. Greenberg - update_vtoce$deact to take code, & implications thereof.
   Modified by D.Vinograd 6/76 to update volume dumper bit map so tha modified objects are dumped
   04/23/75   A. Bensoussan - wrote the first version for the new storage system to
   replace updateb.

*/





update_vtoce: procedure (a_astep);
	dsw = "0"b;
	go to join;

deact: entry (a_astep, a_code);
	dsw = "1"b;
join:

	dcl     a_astep		 ptr;


	dcl     1 local_vtoce	 like vtoce aligned;
	dcl     1 local_aste	 like aste aligned;

	dcl     (pvtx, vtocx)	 fixed bin (17);
	dcl     dsw		 bit (1);
	dcl     code		 fixed bin (35);
	dcl     a_code		 fixed bin (35);
	dcl     (n, i, pts, max)	 fixed bin (17);
	dcl     deposit_list	 (0:255) bit (22) aligned;
	dcl     pageno_list		 (0:255) fixed bin aligned;
	dcl     1 saved_fm		 aligned,
		2 fm		 (0:255) bit (18) unaligned;

	dcl     curtime		 bit (36) aligned;
	dcl     dt		 fixed bin (35);
	dcl     read_vtoce		 bit (1) aligned;
	dcl     parts_write		 bit (3);

	dcl     ALL_PARTS		 bit (3) int static options (constant) init ("111"b);
	dcl     PART_ONE		 bit (3) int static options (constant) init ("100"b);

	dcl     vtoc_man$get_vtoce	 entry (bit (36) aligned, fixed bin, fixed bin, bit (3), ptr, fixed bin (35));
	dcl     vtoc_man$put_vtoce	 entry (bit (36) aligned, fixed bin, fixed bin, bit (3), ptr, fixed bin (35));
	dcl     vtoc_man$await_vtoce	 entry (bit (36) aligned, fixed bin, fixed bin, fixed bin (35));
	dcl     pc$get_file_map	 entry (ptr, ptr, ptr, fixed bin, ptr, ptr);
	dcl     pc$deposit_list	 entry (fixed bin, fixed bin, ptr, fixed bin, ptr);
	dcl     filemap_checksum_	 entry (ptr, fixed bin, bit (36) aligned);

	dcl     (addr, bin, bit, clock, fixed, unspec) builtin;

	dcl     sst$checksum_filemap	 fixed bin (35) external;
	dcl     sst$pts		 (0:3) fixed bin (35) external static;

	dcl     error_table_$hardcore_sdw fixed bin (35) external;


/*	% include vtoce;		see at the end.	*/
/*	% include aste;		see at the end.	*/
/*	% include null_addresses;	see at the end.	*/

/* INITIALIZE POINTERS */

	n = 0;					/* For error recovery */
	astep = a_astep;
	if aste.hc_sdw then do;			/* Meaningless to update VTOCE for this type of segment */
		if dsw then a_code = error_table_$hardcore_sdw;
		return;
	     end;
	vtocep = addr (local_vtoce);
	pvtx = fixed (aste.pvtx); if pvtx <= 0 then return;
	vtocx = aste.vtocx;
	pts = sst$pts (fixed (aste.ptsi));

	read_vtoce = "0"b;

/* DETERMINE WHETHER IT IS NECESSARY TO READ THE VTOCE */

	if aste.dirsw & (aste.tqsw (0) | aste.tqsw (1))
	then read_vtoce = "1"b;
	if pts > 96 & aste.fmchanged
	then read_vtoce = "1"b;

	if read_vtoce then do;
		call vtoc_man$get_vtoce ("0"b, pvtx, vtocx, ALL_PARTS, vtocep, code);
		if code ^= 0 then go to serious_problem;
	     end;


/* GET A SNAPSHOT OF THE ASTE AND THE FILE MAP */

	if ^read_vtoce
	then unspec (vtoce) = ""b;

	call pc$get_file_map (astep, addr (local_aste), addr (vtoce.fm), n, addr (deposit_list), addr (pageno_list));
	if aste.fm_damaged & (sst$checksum_filemap ^= 0) then n = 0; /* Don't deposit if file map suspect */

	astep = addr (local_aste);

/* CHECK FOR RACE (FILE MAP UPDATED SINCE WE CHECKED) */

	if ^read_vtoce & aste.fmchanged & (pts > 96)
	then do;
		read_vtoce = "1"b;
		unspec (saved_fm.fm) = unspec (vtoce.fm);
		call vtoc_man$get_vtoce ("0"b, pvtx, vtocx, ALL_PARTS, vtocep, code);
		if code ^= 0 then goto serious_problem;
		unspec (vtoce.fm) = unspec (saved_fm.fm);
	     end;



/* UPDATE THE VTOCE IN LOCAL STORAGE */

	curtime = bit (bin (clock (), 52), 52);

	vtoce.uid = aste.uid;
	vtoce.msl = aste.msl;
	vtoce.csl = aste.csl;
	vtoce.records = aste.records;

	vtoce.dtu = aste.dtu;
	vtoce.dtm = aste.dtm;

	vtoce.nqsw = aste.nqsw;
	vtoce.deciduous = aste.hc_sdw;
	vtoce.per_process = aste.per_process;
	vtoce.damaged = aste.damaged;
	vtoce.fm_damaged = aste.fm_damaged;
	vtoce.synchronized = aste.synchronized;
	vtoce.dnzp = aste.dnzp;
	vtoce.gtpd = aste.gtpd;
	vtoce.nid = aste.nid;
	vtoce.dirsw = aste.dirsw;




	if aste.dirsw then
	     do;
		vtoce.master_dir = aste.master_dir;
		do i = 0, 1;
		     vtoce.used (i) = aste.used (i);
		     vtoce.quota (i) = aste.quota (i);
		     if aste.tqsw (i) then
			do;
			     dt = fixed (curtime, 36) - fixed (vtoce.trp_time (i), 36);
			     vtoce.trp (i) = vtoce.trp (i) + fixed (aste.used (i) * dt * .65536e-1 + .5e0, 71);
			     vtoce.trp_time (i) = curtime;
			end;
		end;
	     end;
	else seg_vtoce.usage = seg_aste.usage;		/* segments have pf count instead of quota */


/* DETERMINE THE PARTS TO BE WRITTEN AND WRITE THE VTOCE */

	if read_vtoce then do;
		parts_write = ALL_PARTS;
		max = 255;
	     end;
	else do;
		parts_write = PART_ONE;
		max = 95;
	     end;

	do i = pts to max; vtoce.fm (i) = update_vtoce_null_addr; end;

	if sst$checksum_filemap = 0 then do;
		vtoce.fm_checksum_valid = "0"b;
		vtoce.fm_checksum = ""b;
	     end;
	else if read_vtoce | (pts <= 96) then do;
		vtoce.fm_checksum_valid = "1"b;
		call filemap_checksum_ (addr (vtoce.fm), fixed (vtoce.csl, 9), vtoce.fm_checksum);
	     end;

	call vtoc_man$put_vtoce ("0"b, pvtx, vtocx, parts_write, vtocep, code);
	if code ^= 0 then go to serious_problem;


/* IF THERE ARE ANY DISK ADDRESSES TO BE DEPOSITED, THEN DO IT */

	if n > 0 then do;
		call vtoc_man$await_vtoce ("0"b, pvtx, vtocx, code);
		if code ^= 0 then go to serious_problem;
		call pc$deposit_list (pvtx, n, addr (deposit_list), vtocx, addr (pageno_list));
	     end;


/* RESET THE ASTE.FMCHANGED1 FLAG FOR PAGE CONTROL IF NECESSARY */

	if aste.fmchanged then a_astep -> aste.fmchanged1 = "0"b;

	if dsw then a_code = 0;
	return;

serious_problem:
	if dsw then a_code = code;
	a_astep -> aste.fmchanged = "1"b;		/* Cause trickle to do it */
	if n > 0
	then addr (pvt$array) -> pvt_array (aste.pvtx).vol_trouble_count
		= addr (pvt$array) -> pvt_array (aste.pvtx).vol_trouble_count + 1; /* Couldn't deposit */
	return;

%include vtoce;
%include pvte;
%include aste;
%include null_addresses;

     end update_vtoce;
