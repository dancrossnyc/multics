" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" ***********************************************************

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " 
"
"	vtoc_search - Routine to manage vtoc_buffer_seg's 
"	     hash table
"
"	Entries:
"
"	     hash_in  - hashes a VTOCE buffer desc into a list
"
"	     hash_out - hashes a VTOCE buffer desc out of a list
"
"	     search - searches for a given PVTE, VTOCE index
"
"	Written February 1982 by J. Bongiovanni
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " 

	name	vtoc_search

	entry	hash_in
	entry	hash_out
	entry	search

	temp	save_pvtx_vtocx

null_ptr:
	its	-1,1
"
	include vtoc_buffer
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " 
"
"	call vtoc_search$hash_in (vtoc_buf_descp)
"
"	     where vtoc_buf_descp -> buffer descriptor of interest
"
"	Must be called with VTOC buffer locked
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " 

hash_in:
	push
	eppbp	ap|2,*		" bp -> vtoc_buf_descp
	eppbp	bp|0,*		" bp -> vtoc_buf_desc
	lda	bp|vtoc_buf_desc.pvtx " Areg has pvtx in Upper, vtocx in Lower
	tsx7	setup		" Set pointers, compute hash table index
	eax0	bp|0		" x0 = offset of this vtoc_buf_desc
	ldx3	bb|vtoc_buffer.hash_table,x2 " x3 = 1st offset this bucket
	stx0	bb|vtoc_buffer.hash_table,x2 " Make this the first
	stx3	bp|vtoc_buf_desc.ht_thread   " And the first shall be next
	return
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " 
"
"	call vtoc_search$hash_out (vtoc_buf_descp)
"
"	where vtoc_buf_descp -> VTOC buffer descriptor of interest
"
"	This must be called with the VTOC buffer lock
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " 

hash_out:
	push
	eppbp	ap|2,*		" bp -> vtoc_buf_descp
	eppbp	bp|0,*		" bp -> vtoc_buf_desc
	lda	bp|vtoc_buf_desc.pvtx " Areg has pvtx in Upper, vtocx in Lower
	tsx7	setup		" Set pointers, compute hash index
	tsx7	search_it		" Look for this one in list
	eax1	0,x1		" Found?
	tze	hash_out_returns	" No - shouldn't happen
	ldx3	bp|vtoc_buf_desc.ht_thread  " x3 = offset of next after this
	eax0	0,x0		" x0 = offset of previous
	tze	hash_out_empty	" None previous
	stx3	bb|vtoc_buf_desc.ht_thread,x0 " Link previous to next
	tra	hash_out_common
hash_out_empty:
	stx3	bb|vtoc_buffer.hash_table,x2  " Make next the first
hash_out_common:
	eax3	0		" Clear thread offset
	stx3	bp|vtoc_buf_desc.ht_thread  " In this one
hash_out_returns:
	return
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " 
"
"	call vtoc_search$search (pvtx, vtocx, vtoc_buf_descp)
"
"	where
"
"	     pvtx = rel offset of PVTE (Input)
"	     vtocx = VTOCE index (Input)
"	     vtoc_buf_descp = ptr to vtoc_buf_desc or null
"
"	This must be called with the VTOC buffer lock.
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " 

search:
	push
	lda	ap|2,*		" pvtx 
	ana	-1,dl		" Strip out any garbage
	als	18		" pvtx in Upper
	ora	ap|4,*		" vtocx in Lower
	tsx7	setup		" Set pointers, compute hash index
	tsx7	search_it		" Search hash thread
	eax1	0,x1		" x1 = offset of buf desc
	tze	search_not_found	" Not there
	eppbp	bb|0,x1		" bp -> buffer descriptor
	tra	search_returns
search_not_found:
	eppbp	null_ptr,*
search_returns:
	spribp	ap|6,*		" Return pointer or null
	return
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " 
"
"	Internal procedure to search
"
"	tsx7	search_it
"
"	On entry,
"
"	     bb -> vtoc_buffer_seg
"	     Areg has pvte rel in Upper, vtocx in Lower
"	     x2 = hash index
"
"	On exit,
"
"	     x0 = offset of previous in thread (0 if none)
"	     x1 = offset of this entry (0 if none)
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " 

search_it:
	eax0	0		" Initialize to none
	eax1	0
	ldx1	bb|vtoc_buffer.hash_table,x2 " x1 = offset of first
	tze	0,x7		" None

search_it_loop:
	cmpa	bb|vtoc_buf_desc.pvtx,x1 " This one a match
	tze	0,x7		" yes - exit
	eax0	0,x1		" Previous = current
	ldx1	bb|vtoc_buf_desc.ht_thread,x1  " Next
	tnz	search_it_loop	" Next exists
	eax1	0		" Not found
	tra	0,x7
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " 
"
"	Internal procedure to set pointers and compute hash index
"
"	tsx7	setup
"
"	On entry,
"
"	     Areg has pvtx in Upper, vtocx in Lower
"
"	On exit,
"
"	     bb -> vtoc_buffer_seg
"
"	     x2 = hash index
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " 

setup:
	eppbb	vtoc_buffer_seg$
	sta	save_pvtx_vtocx	" pvtx, vtocx
	ldq	save_pvtx_vtocx

	qrl	18
	erq	save_pvtx_vtocx
	anq	bb|vtoc_buffer.hash_mask
	eax2	0,ql

	tra	0,x7


	end
