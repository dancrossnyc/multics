/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/*
   create_vtoce (branchp, pvid, vtocx, code)


   FUNCTION -

   This procedure creates a vtoc entry for the segment whose branch is  pointed  to
   by  the input argument (branchp). It returns the uid of physical volume in which
   the vtoc entry was created (pvid) and the vtoc index (vtocx) of this vtoc entry.

   If the operation is successful the code returned is zero. If it fails, then  one
   possible returned value is error_table_$log_vol_full.      In this case, no vtoc
   entry was created and pvid=0, vtocx = -1.

   The logical volume assigned to the vtoc entry is defined as follows: if the vtoc
   entry is for a directory, the logical volume is the system logical volume, where
   all  directories  reside;  if the vtoc entry is for a non directory segment, the
   logical volume is specified in the header of the parent directory.


   IMPLEMENTATION -

   The parent directory is supposed to be locked before this procedure  is  called.
   Also the branch is supposed to be initialized.

   The  physical  volume where the vtoc entry is created is the first member of the
   logical volume which is not full. The file map is initialized with zeros.

   MODIFIED BY *

   03/10/75	Andre Bensoussan for the new storage system.
   08/11/75 Bernard Greenberg - most-space allocation algorithm.
   10/01/75 RE Mullen - optimize filemap nulling.
   10/21/75 by Greenberg for allocation by recs available, seg mover.
   02/06/76 by Greenberg for dynamic demounter.
   02/18/76 by Richard Bratt for LVT
   03/22/76 by Larry Johnson to set master_dir switch in vtoce, and to call uid_path_util for uid pathname
   06/76 by D.Vinograd to update volume dumper bit map when creating new vtoce.
   09/27/76 by RE Mullen for (cycling | pro-rata) PV selection to reduce io contention
   29 Jan 79 by D. Spector to allocate vtoces for deciduous segments on the RPV
   10/03/79 by J. A. Bush to copy terminal quota info  when copying vtoce for segment_mover
   01/09/80 by Mike Grady to fix try_cycle bug for inop devices and speed up fm nuller code
   03/22/81 by J. Bongiovanni for bug fix
            for volume being salvaged, avoid per-process creation on saturated units
   06/24/81 by J. Bongiovanni for random selection of PV within LV, weighted
            by fraction of space left
   03/06/82 by J. Bongiovanni to eliminate vtoce.infqcnt, for new PVTE, and for
            optimize parameter for segmove
   06/02/82 by J. Bongiovanni to set vtoce.perm_flags.per_bootload
   83-12-06 by BIM to correctly check LV access class and audit violations.
   84-12-05 by EJ Sharpe to use access_audit_ instead of protection_audit_
   85-04-01 by Keith Loepere for access_audit_check_ep_.
*/


create_vtoce : procedure (branchp, pvid, vtocx, code);


dcl  branchp ptr;					/* Input  - ptr to the branch */
dcl  pvid bit (36);					/* Output - uid of the phys. vol. where vtoc entry is created */
dcl  vtocx fixed bin (17);				/* Output - index of the vtoc entry that was created */
dcl  code fixed bin (35);				/* Output - error code */

/* Arguments for segmove entry */

dcl  corout_pvtx fixed bin;				/* Input/Output - next pvtx to be tried */
dcl  a_skip_pvtx fixed bin;
dcl  skip_pvtx fixed bin;				/* Input - original segment pvtx */
dcl  a_nreq fixed bin;				/* Input - required number of records */
dcl  a_optimize bit (1) aligned;			/* Input - optimize allocation of PV */

dcl (i, pvtx, msl) fixed bin (17);
dcl  first_pvtx fixed bin (17);
dcl  nreq fixed bin (17);
dcl (mover, looped, looping, try_cycle, held) bit (1);
dcl  1 event_flags aligned like audit_event_flags;
dcl  force_rpv bit (1);
dcl  optimizing bit (1);
dcl  lvid bit (36);
dcl  queue_length fixed bin;
dcl (working_sum, random_number, sum_fract_empty) fixed bin (35, 18);
dcl  n_pvs fixed bin;
dcl  pv_found bit (1);
dcl  pv_alloc_x fixed bin;
dcl  1 pv_alloc (MAX_PV_PER_LV) aligned,
     2 pvtx fixed bin,
     2 fract_empty fixed bin (35, 18);

dcl  vtoc_buffer (96) fixed bin (71);
dcl 1 local_vtoce like vtoce aligned based (addr (vtoc_buffer));
dcl  based_class_range (2) bit (72) aligned based;

dcl  access_operations_$fs_obj_create bit (36) aligned ext;
dcl  sys_info$initialization_state fixed bin ext;
dcl  sst$cycle_pv_allocation fixed bin (35) external;
dcl  pvt$root_lvid bit (36) aligned external;
dcl  error_table_$log_vol_full ext fixed bin (35);
dcl  error_table_$pvid_not_found ext fixed bin (35);
dcl  error_table_$ai_restricted ext fixed bin (35);
dcl  sys_info$default_max_length ext fixed bin (19);
dcl  sys_info$default_dir_max_length ext fixed bin (19);
dcl  active_hardcore_data$sl1_uid bit (36) aligned external;

dcl  access_audit_check_ep_$self entry (bit (36) aligned, bit (36) aligned, ptr) returns (bit (1));
dcl  access_audit_$log_entry_ptr entry options (variable);
dcl  display_access_class_$range entry ((2) bit(72) aligned) returns(char(32) aligned);
dcl  vtoc_man$alloc_and_put_vtoce entry (bit (36) aligned, fixed bin (17), ptr, fixed bin (35)) returns (fixed bin);
dcl  logical_volume_manager$lvtep entry (bit (36) aligned, ptr, fixed bin (35));
dcl  clock_ entry returns (fixed bin (52));
dcl  level$get entry () returns (fixed bin);
dcl  read_allowed_ entry (bit(72) aligned, bit(72) aligned) returns(bit(1) aligned);
dcl  write_allowed_ entry (bit(72) aligned, bit(72) aligned) returns(bit(1) aligned);
dcl  get_pvtx$hold_pvtx entry (bit (36) aligned, fixed bin, fixed bin (35));
dcl  get_pvtx$release_pvtx entry (bit (36) aligned, fixed bin);
dcl  dbm_man$set_incr entry (fixed bin, fixed bin, fixed bin (35));
dcl  uid_path_util$get entry (ptr, dim (0:15) bit (36) aligned, fixed bin (35));
dcl  disk_control$queue_length_given_pvtx entry entry (fixed bin, fixed bin);

dcl  (addr, bit, clock, divide, fixed, high9, mod, multiply, null, ptr, rel, string, unspec) builtin;
	     

dcl  fm_nullifier char (256*2) aligned based (fmn_ptr);
dcl  fmn_ptr ptr;
dcl  uid_path (0:15) bit (36) aligned;

dcl  MAXQ_FOR_PDIR_CYCLE fixed bin int static options (constant) init (7);	/* number disk queue entries for saturation*/
dcl  MAX_PV_PER_LV fixed bin int static options (constant) init (32); /* maximum number of physical volumes on an LV*/
dcl  MODULUS fixed bin int static options (constant) init (1024);	/* for generating random number from clock*/
	     
	     

/* PREPARE A LOCAL COPY OF THE VTOCE USING THE BRANCH INFORMATION */

	mover = "0"b;				/* entry switch */
	skip_pvtx = 0;
	nreq = 0;
	optimizing = "1"b;
join:	code = 0;
	vtocep = addr (local_vtoce);
	ep = branchp;
	dp = ptr (ep, 0);

	if entry.dirsw then msl = divide (sys_info$default_dir_max_length, 1024, 17, 0);
	else msl = divide (sys_info$default_max_length, 1024, 17, 0);

	unspec (local_vtoce) = "0"b;
	local_vtoce.uid = entry.uid;
	local_vtoce.msl = bit (fixed (msl, 9));
	local_vtoce.dirsw = entry.dirsw;
	local_vtoce.primary_name = addr (entry.primary_name) -> names.name;
	local_vtoce.time_created = bit (clock_ (), 52);
	local_vtoce.dtu = local_vtoce.time_created;
	local_vtoce.dtm = local_vtoce.dtu;
	local_vtoce.par_pvid = dir.pvid;
	local_vtoce.par_vtocx = dir.vtocx;
	local_vtoce.per_process = entry.per_process_sw;
	local_vtoce.branch_rp = rel (ep);
	local_vtoce.access_class = entry.access_class;
	local_vtoce.master_dir = entry.master_dir;
	if dp -> dir.uid = active_hardcore_data$sl1_uid	/* parent is current >sl1 */
	     then local_vtoce.perm_flags.per_bootload = "1"b;
	if mover then				/* if called from segment_mover */
	     if tq_infop ^= null then			/* and we need to copy term quota attributes */
		do i = 0 to 1;			/* do it like this for efficiency */
		local_vtoce.trp (i) = tq_info.trp (i);	/* copy pertinent data */
		local_vtoce.trp_time (i) = tq_info.tup (i);
		local_vtoce.received (i) = tq_info.received (i);
	     end;

/* Fill the filemap with appropriate null addresses.  This is done using a */
/* based overlay in order to generate efficient code.  We are simulating */
/* do i = 0 to 255; local_vtoce.fm(i) = create_vtoce_null_addr; end; */
/* which is about 2500% slower. fm (0) MUST BE DOUBLE WORD ALIGNED */

	fmn_ptr = addr (local_vtoce.fm (0));		/* get ptr to base of filemap */
	fm_nullifier = high9(256*2);			/* set whole string - 256 bit (18)'s to */
						/* all one bits, done with single mlr */

/* GET THE UID_PATH OF THE PARENT FROM THE KST AND STORE IT IN THE VTOCE - THE UID_PATH IS AN ARRAY OF 16 ENTRIES
   NUMBERED FROM 0 TO 15 - ANY DIRECTORY WHICH IS IN THE PATH OF THE PARENT AND WHOSE TREE DEPTH IS i HAS ITS UID RECORDED
   IN UID_PATH(i)  - ANY ELEMENT OF THE UID_PATH THAT DOES NOT HOLD A UID HAS THE VALUE ZERO. */


	force_rpv = (dir.tree_depth = 0)		/* set for level 1 creations to go on rpv */
	     | dir.force_rpv			/* Better be on RLV ! */
	     | sys_info$initialization_state < 3;	/* make_sdw carefully placed deciduous
						   segments on the RPV. If we are creating segments
						   during collection 2, make sure the vtoce is allocated
						   on the RPV */

	call uid_path_util$get (dp, uid_path, code);	/* get uid path of parent */
	if code ^= 0 then return;
	local_vtoce.uid_path = uid_path;


/* If per process and not constrained attempt to cycle through PV's */

	try_cycle = ^mover & ^force_rpv 
	     & (dir.per_process_sw | sst$cycle_pv_allocation ^= 0);

/* DETERMINE IN WHICH LOGICAL VOLUME THE VTOCE IS TO BE CREATED. */

	if entry.dirsw = "0"b then lvid = dir.sons_lvid;
	else lvid = pvt$root_lvid;


restart:	call logical_volume_manager$lvtep ((lvid), lvtep, code);
	if code ^= 0 then return;
	if ^(read_allowed_ (entry.access_class, lvte.access_class.min) &
	     write_allowed_ (entry.access_class, lvte.access_class.max))
	then do;		
	     pvid = "0"b;
	     vtocx = -1;
	     code = error_table_$ai_restricted;
	     string(event_flags) = ""b;
	     if access_audit_check_ep_$self (string (event_flags), access_operations_$fs_obj_create, ep) then
		call access_audit_$log_entry_ptr ("create_vtoce", level$get(), string(event_flags),
		access_operations_$fs_obj_create, ep, code, null(), 0,
		"entry class range outside LV (^a LVID ^w)",
		display_access_class_$range (addr(lvte.access_class)->based_class_range), lvte.lvid);
	     return;
	end;

/* ALLOCATE A VTOCE ON SOME PV WITH A FREE VTOCE.  ALGORITHM:
   Satisfy segment_mover or force_rpv constraints if any.
   Else if per_process then try to cycle among the PV's. (always spread heavy I/O segments)
      Skip any PV whose disk queue is larger than MAXQ_FOR_PDIR_CYCLE, as this
      indicates local saturation in this cycle.
   Else place randomly (biased by fraction of space left on each PV).

   This algorithm attempts to gracefully handle the cases where some
   PV's are either empty (newly added?) or larger than others.
   It used to happen that if one PV was 2x larger, it would fill
   halfway before anything was placed on the others.
   It used to be that if one PV was by far the emptiest, then
   it would obtain all per-process segments thus creating an
   I/O bottleneck. --REM */


          pvt_arrayp = addr (pvt$array);
retry:
	held = "0"b;
	if try_cycle then do;			/* attempt to use cycle_pvtx */
	     try_cycle = "0"b;			/* don't do this more than once per creation */

	     looped, looping = "0"b;			/* not yet passed head of list */
	     pvtx = lvte.cycle_pvtx;			/* See if cycle has reasonable value */
	     if pvtx = 0 then looped = "1"b;		/* not good, reset and note */
	     else do;				/* maybe good */
		pvtep = addr (pvt_array (pvtx));	/* examine in detail */
		if pvte.lvid ^= lvid then looped = "1"b; /* not good, reset and note */
	     end;
	     if looped then pvtx, lvte.cycle_pvtx = lvte.pvtex; /* do the reset of cycle */
						/* Now pvtx and cycle_pvtx as good as can be, LV_wise */

	     do while (^looping);			/* dont loop forever if cant cycle */
		pvtep = addr (pvt_array (pvtx));
		call disk_control$queue_length_given_pvtx (pvtx, queue_length);
		if ^pvte.vacating
		& ^pvte.device_inoperative		/* bad idea if down */
		& pvte.n_free_vtoce > 0
		& pvte.nleft > 32 then do;		/* cycle not to cause immediate segmoves */
		     if dir.per_process_sw
			& queue_length>MAXQ_FOR_PDIR_CYCLE /* drive looks saturated		*/
			then do;			/* meter these				*/
			if pvte.skip_queue_count=262143    /* dont want overflow of meter		*/
			     then pvte.skip_queue_count = 0;
			else pvte.skip_queue_count = pvte.skip_queue_count + 1;
		     end;
		     else do;
			lvte.cycle_pvtx = pvte.brother_pvtx; /* leave cycle at next, may be Zero */
			pvid = pvte.pvid;
			go to got;
		     end;
		end;
		pvtx = pvte.brother_pvtx;	/* chase to next */
		if pvtx = 0 then do;		/* must wrap around */
		     if looped then looping = "1"b; /* wrap around only once */
		     else do;
			looped = "1"b;		/* note this first time */
			pvtx = lvte.pvtex;
		     end;
		end;
	     end;
	end;					/* end of try_cycle code */

	n_pvs = 0;
	sum_fract_empty = 0;
	pvtx = -1;

	if mover 
	then if corout_pvtx = 0
	     then first_pvtx = lvte.pvtex;		/* initialize */
	     else do;
		first_pvtx = pvt_array (corout_pvtx).brother_pvtx; /* pick up where we left off */
		corout_pvtx = 0;			/* reinitialize coroutine hack if scan is restarted */
	     end;
	else first_pvtx = lvte.pvtex;

	do i = first_pvtx repeat (pvte.brother_pvtx) while (i ^= 0);
	     pvtep = addr (pvt_array (i));
	     if pvte.lvid ^= lvid then go to restart;	/* LVT must have changed during scan */
	     if (^force_rpv | pvte.rpv)		/* Want to use rpv? */
	     then if pvte.n_free_vtoce > 0 & ^pvte.vacating /* Must be space for 1 new seg */
		then if (^mover | (pvte.nleft > nreq) & (i ^= skip_pvtx)) /* If moving, need nreq, not orig PV */
		     & ^pvte.device_inoperative	/* bad idea if down */
		     then do;
			if ^optimizing then do;	/* not trying to optimize			*/
			     pvtx = i;
			     goto got;
			end;
			else do;
			     n_pvs = n_pvs + 1;
			     pv_alloc (n_pvs).pvtx = i;
			     pv_alloc (n_pvs).fract_empty
				= divide (pvte.nleft, pvte.totrec, 35, 18);
			     sum_fract_empty = sum_fract_empty
				+ pv_alloc (n_pvs).fract_empty;
			end;
		     end;
	end;

/* Select a physical volume randomly biased by the fraction of space
   left on each physical volume.  The random number used is a modulus
   of the current clock.  This algorithm has the effect (for a reasonable
   number of segment creations) of cycling among physical volumes which
   are balanced in space used.  As a physical volume's space becomes
   exhausted (relative to other physical volumes in the same logical
   volume), it becomes progressively less favored for segment creation.				*/
	
	if n_pvs > 0 then do;
	     random_number = divide (multiply (mod (clock (), MODULUS), sum_fract_empty, 35, 18),
		MODULUS, 35, 18);			/* between 0 and sum_fract_empty		*/
	     working_sum = 0;
	     pv_found = "0"b;
	     do pv_alloc_x = 1 repeat pv_alloc_x + 1 
		while (^pv_found & pv_alloc_x < n_pvs);
		working_sum = working_sum + pv_alloc (pv_alloc_x).fract_empty;
		if working_sum >= random_number then do;
		     pv_found = "1"b;
		     pvtx = pv_alloc (pv_alloc_x).pvtx;
		end;
	     end;
	     if ^pv_found then pvtx = pv_alloc (n_pvs).pvtx;
	end;
	     
	

	if pvtx = -1 then
	     do ;
no_room:	     vtocx = -1;
	     pvid = "0"b;
	     code = error_table_$log_vol_full;
	     return;
	end;

got:	pvtep = addr (pvt_array (pvtx));
	if pvte.lvid ^= lvid then go to retry;
	pvid = pvte.pvid;
	

	call get_pvtx$hold_pvtx ((pvid), pvtx, code);
	if code ^= 0 then goto not_there;
	held = "1"b;

	vtocx = vtoc_man$alloc_and_put_vtoce ((pvid), pvtx, addr (local_vtoce), code);
	if code ^= 0 then do;
not_there:
	     vtocx = -1;
	     if held then call get_pvtx$release_pvtx ((pvid), pvtx);
	     pvid = "0"b;
	     return;
	end;
	if vtocx = -1 then do;			/* lost in window. There must be a better volume,
						   or LV is full, and we will find this out. */
	     if held then call get_pvtx$release_pvtx ((pvid), pvtx);
	     goto retry;
	end;
	call dbm_man$set_incr (pvtx, vtocx, code);

	call get_pvtx$release_pvtx ((pvid), pvtx);

	if mover then corout_pvtx = pvtx;		/* Start there next */
	return;

/*  */

/* create_vtoce$createv_for_segmove

   This entry is used to try to find a home for a segment which
   cannot allocate for a pendant page fault. segment_mover calls this
   entry maintaining the variable corout_pvtx for us. This enables us to
   scan the PVT. a_nreq is a minimum record requirement on a potential
   trial volume */


createv_for_segmove: entry (branchp, pvid, vtocx, code,	/* as regular */
	     corout_pvtx,				/* control state/pvtx answer */
	     a_skip_pvtx,				/* original pvtx, do not use */
	     a_nreq,				/* number or records needed */
	     tq_infop,				/* ptr to tq_info structure (null if no term quota) */
	     a_optimize);				/* ON => optimize allocation of PV */


	skip_pvtx = a_skip_pvtx;
	nreq = a_nreq;				/* copy args */
	mover = "1"b;				/* entry switch */
	optimizing = a_optimize;
	go to join;
%page; %include backup_static_variables;
%page; %include dir_entry;
%page; %include dir_header;
%page; %include dir_name;
%page; %include lvt;
%page; %include null_addresses;
%page; %include pvte;
%page; %include tq_info;
%page; %include vtoce;
%page; %include access_audit_eventflags;
%page;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   AUDIT (create_vtoce): DENIED creation of file system object ADDED_INFO entry class range outside LV (CLASS_RANGE lvid LVID)

   S:	$access_audit

   T:	$run

   M:	The specified user attempted to create a segment whose access class
	is outside the range accepted by the logical volume.

   A:	$inform_ssa

   END MESSAGE DOCUMENTATION */

     end create_vtoce;
