/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(88-03-01,GWMay), approve(89-10-03,MCR8135),
     audit(89-10-04,Beattie), install(89-10-18,MR12.3-1094:
     Changed to display reload group numbers correctly.
     Added displays for the number of incr and cons cycles are
     being retained in the volume log.
     Changed to display at 79 columns.
     Changed to add the -label, -no_label, -all and -header options.
                                                   END HISTORY COMMENTS */

/* format: off */
display_volume_log: proc;

/* This command displays the data in the specified volume log. This data consists
   of the names, start and stop times, and statistics about what was dumped onto each dump volume that contains
   objects from the physical volume that this volume log pertains to.

*/
/* Modified 4/27/82 by GA Texada to not REQUIRE w acces to display the volog.	  */
%page;
       myname = "display_volume_log";
       go to COMMON;

display_volog: entry;

       myname = "display_volog";
       go to COMMON;

dvl: entry;

       myname = "dvl";

COMMON:
/* init control variables */
	header_sw = "1"b;
	type = 0;
	volname = "";
	bvlp = null;
	entries = 0;
	seg_num, seg_rec, dir_num, dir_rec = 0;
	locked, stats, label_sw, all_sw = "0"b;

	on finish call finish_;
	on cleanup call finish_;
	volog_dir = ">daemon_dir_dir>volume_backup";
	call cu_$arg_ptr (1, argp, argl, code);
	if code ^= 0 then do;

argerr:	     call com_err_ (error_table_$noarg, myname);
	     call ioa_ (
"Usage:^10t^a volog {-control_args}
^10tcontrol_args:^25t^a^-^a^/^25t^a^-^a^/^25t^a^-^a^/^25t^a^-^a^/^25t^a^-^a^/^25t^a",
	        myname,
	        "-incremental, -incr     ", "-header, -he            ",
	        "-consolidated, -cons    ", "-no_header, -nhe        ",
	        "-complete, -comp        ", "-label, -lbl            ",
	        "-volname name, -vol name", "-no_label, -nlbl        ",
	        "-working_dir, -wd       ", "-status, -st            ",
	        "-all, -a                ");
	     return;
	end;
	if substr (arg, 1, 1) = "-" then goto argerr;

	call expand_pathname_$add_suffix(arg, "volog", ignore_dir, volog_name, ignore); 
	
	call cu_$arg_count (narg);
	ac = 2;
	do while (ac <= narg);
	     call cu_$arg_ptr (ac, argp, argl, code);
	     if code ^= 0 then do;
		call com_err_ (code, myname, "Unable to access arg after ^a", arg);
		goto finale;
	     end;
	     if arg = "-incremental" | arg = "-incr" then type = incr;
	     else if arg = "-working_dir" | arg = "-wd" then volog_dir = wdir_ ();
	     else if arg = "-consolidated" | arg = "-cons" then type = cons;
	     else if arg = "-complete" | arg = "-comp" then type = comp;
	     else if arg = "-all" | arg = "-a" then all_sw = "1"b;
	     else if arg = "-header" | arg = "-he" then header_sw = "1"b;
	     else if arg = "-nhe" | arg = "-no_header" then header_sw = "0"b;
	     else if arg = "-label" | arg = "-lbl" then label_sw = "1"b;
	     else if arg = "-no_label" | arg = "-nlbl" then label_sw = "0"b;
	     else if arg = "-status" | arg = "-st" | arg = "-stats" then do;
		type = -1;
		stats = "1"b;
	     end;
	     else if arg = "-vol" | arg = "-volname" then do;
		ac = ac + 1;
		call cu_$arg_ptr (ac, argp, argl, code);
		if code ^= 0 then do;
		     call com_err_ (code, myname, "Error getting volname");
		     goto finale;
		end;
		volname = arg;
		type = -1;
	     end;
	     else do;
		call com_err_ (error_table_$badopt, myname, "^a", arg);
		goto finale;
	     end;
	     ac = ac + 1;
	end;

						/* pick up name of volume log */
						/* get pointer to volume log */
	call hcs_$initiate (volog_dir, volog_name, "", 0, 0, bvlp, code);
	if bvlp = null then do;
	     call com_err_ (code, myname, "^a>^a", volog_dir, volog_name);
	     goto finale;
	end;

/* If possible, lock log before printing */

          call set_lock_$lock (backup_volume_log.lock, lock_wait_time, code);
	if code ^= 0 then do;
	     if code = error_table_$invalid_lock_reset then code = 0;
	     else do;
		if code = error_table_$no_w_permission then do;
		call ioa_("Unable to lock ^a, data may be in the process of being changed.", volog_name);
		goto cant_lock;
		end;
	     call com_err_ (code, myname, "Unable to lock volog ^a", volog_name);
	     goto finale;
	     end;
	end;
          locked = "1"b;
cant_lock:
          if label_sw | all_sw then do;
	   call ioa_ ("
Backup Volume Log Label for Multics Storage System Volume ^a^/",
	      volog_name);
	   call display_disk_label_ (addr (addr (backup_volume_log.info) -> backup_pvol_info.label));
	   if ^all_sw & type=0 then go to finale;
	   end;

	if header_sw then do;
	     call ioa_ ("
^2-Backup Volume Log for Physical Volume ^a
^2-       Consolidated Sets Saved: ^[all^s^;^d^]
^2-       Incremental Sets Saved : ^[all^s^;^d^]
^2-       Reload Groups          : ^d",
	        reverse(after(reverse(volog_name), ".")),
	        backup_volume_log.Nsaved_cons_sets < 1,
	        backup_volume_log.Nsaved_cons_sets,
	        backup_volume_log.Nsaved_incr_sets < 1,
	        backup_volume_log.Nsaved_incr_sets,
	        backup_volume_log.reload_groups);

	     if ^stats then
		call ioa_ ("
rld dump  volume^57tdir   dir   seg    seg
grp type  name^22tstart time^39tstop time^57tnum   rec   num    rec");
	     else call ioa_ ("entries^-dir num^-dir rec^-seg num^-seg rec");
	     end;
          else
	   call ioa_ ("");

						/* Examine each entry in the log and print as requested */
	comp_cycle_uid = "0"b;
	group = 1;
	comp_open_time = 0;

	do i = backup_volume_log.next to 1 by -1;
	     bvlep = addr (backup_volume_log.array (i));
	     if (volname ^= "" & volname = bvle.volname) | (volname = "")
	     | stats then do;
	        if bvle.dump_type = comp then do;
		   if bvle.cycle_uid ^= comp_cycle_uid then do;
		      if comp_cycle_uid ^= "0"b then
		         group = group + 1;
		      comp_cycle_uid = bvle.cycle_uid;

		      do lowest_start_idx = i to 1 by -1;
		         if backup_volume_log.array (lowest_start_idx).cycle_uid = bvle.cycle_uid then
			  comp_open_time = backup_volume_log.array (lowest_start_idx).open_time;
		         end;
		      end;
		   end;

                    if ^stats then
                       if type = 0 | type = bvle.dump_type then
		      call ioa_ ("^[^2d^s^;^s^2d^]  ^4a  ^10a^22t^15a^39t^15a^55t^5d ^5d ^5d ^6d",
   		         (comp_open_time < bvle.close_time & bvle.close_time > 0), group, group + 1,
 		         ascii_type (bvle.dump_type), bvle.volname, time_string_ (bvle.open_time),
		         time_string_ (bvle.close_time), bvle.dir_num, bvle.dir_rec, bvle.seg_num, bvle.seg_rec);
                       else;
		else do;
		     entries = entries + 1;
		     dir_num = dir_num + bvle.dir_num;
		     dir_rec = dir_rec + bvle.dir_rec;
		     seg_num = seg_num + bvle.seg_num;
		     seg_rec = seg_rec + bvle.seg_rec;
		end;
	     end;
	end;

	if stats then call ioa_ ("^d^-^d^-^d^-^d^-^d",
	     entries, dir_num, dir_rec, seg_num, seg_rec);
finale:						/* cleanup - unlock and terminate */
	call finish_;
	return;

time_string_: proc (time) returns (char (15));

/* This proc returns a time string suitable for printing */

dcl  time fixed bin (71);
	    return (date_time_$format (
	        "^my/^dm/^yc ^Hd^99v.9MH", time, "", ""));
	end time_string_;

finish_:	proc;
	     if (bvlp ^= null) & (locked) then call set_lock_$unlock (backup_volume_log.lock, ignore);
	     if bvlp ^= null then call hcs_$terminate_noname (bvlp, ignore);
	     call ioa_ ("");
	end finish_;
wdir_:	proc returns (char (168) aligned);

/* This proc returns the working directory */

dcl  wdir char (168) aligned;
	     call hcs_$fs_search_get_wdir (addr (wdir), ignore);
	     return (wdir);
	end wdir_;
%page;
dcl  volog_name char (32);
dcl  lowest_start_idx fixed bin;
dcl  group fixed bin;
dcl  comp_cycle_uid bit (36);
dcl  comp_open_time fixed bin (71);
dcl  narg fixed bin;
dcl  volog_dir char (168);
dcl  arg char (argl) based (argp);
dcl  argl fixed bin;
dcl  argp ptr;
dcl  i fixed bin;
dcl  ac fixed bin;
dcl  ignore_dir char(168);
dcl  volname char (32);
dcl  seg_num fixed bin;
dcl  seg_rec fixed bin;
dcl  entries fixed bin;
dcl  dir_rec fixed bin;
dcl  dir_num fixed bin;
dcl  stats bit (1);
dcl  code fixed bin (35);
dcl  ignore fixed bin (35);
dcl  type fixed bin;
dcl  header_sw bit (1);
dcl  label_sw bit (1);
dcl  all_sw bit (1);
dcl  locked bit(1);
dcl  myname char (32) var;		
dcl  ascii_type (3) char (4) int static init ("incr", "cons", "comp") options(constant);
dcl  lock_wait_time fixed bin static init(30) options(constant);

dcl  hcs_$fs_search_get_wdir entry (ptr, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  com_err_ entry options (variable);
dcl  display_disk_label_ entry (ptr);
dcl  expand_pathname_$add_suffix entry (char(*), char(*), char(*), char(*), fixed bin(35));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin, fixed bin, ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  date_time_$format entry (char(*), fixed bin(71), char(*), char(*)) returns(char(250) var);
dcl  set_lock_$lock entry (bit (36) aligned, fixed bin, fixed bin (35));
dcl  set_lock_$unlock entry (bit (36) aligned, fixed bin (35));
dcl  cu_$arg_count entry (fixed bin);

dcl  error_table_$badopt ext fixed bin (35);
dcl  error_table_$invalid_lock_reset ext fixed bin (35);
dcl  error_table_$noarg fixed bin(35) ext static;
dcl  error_table_$no_w_permission ext static fixed bin(35);
dcl (finish, cleanup) condition;

dcl (null, addr, after, reverse, substr) builtin;
%page;
%include backup_volume_log;
%include backup_pvol_info;
%include fs_vol_label;
%include backup_volume_header;
%include backup_static_variables;

     end display_volume_log;
