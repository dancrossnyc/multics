/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* MDCS_UTIL_:  Collection of primitives for maintaining Master Directory Control Segments */

/* Written April 1976 by Larry Johnson */
/* Modified September 1977 by Larry Johnson */
/* Modified Aug 1984 by EJ Sharpe for new param lists for delete_mdcs, rename_mdcs, and update_hvid.
            UID is passed from mdc_repair_ rather than obtained by calling hdx. */
/* Modified Sept 1984 by EJ Sharpe - change refs to "hdx" to "volume_registration_mgr_"
	change "hvid" to "lvid"
	change "hvname" to "lvname"
*/
/* Modified 84-10-30 by EJ Sharpe to upgrade to new volume_registration_mgr_$get_access which returns bit (36) */

mdcs_util_: proc;


/* Parameters */

dcl  arg_code fixed bin (35);				/* A standard status code */
dcl  arg_volume char (*);				/* Logical volume name */
dcl  arg_mdcsp ptr;					/* Pointer to MDCS */
dcl  arg_uid bit (36) aligned;			/* Unique id of a volume */
dcl  arg_new_uid bit (36) aligned;			/* Unique id of a volume */
dcl  arg_access bit (36) aligned;			/* Access to logical volume */
dcl  arg_newvol char (*);				/* New volume name on rename */
dcl  arg_dir char (*);

/* Automatic storage */

dcl  code fixed bin (35);
dcl  rings (3) fixed bin (3);				/* Array of ring brackets */
dcl  i fixed bin;
dcl  ename char (32);				/* Entry name of segment */
dcl  volume char (32) var;
dcl  temp_vol char (32);
dcl  uid bit (36) aligned;
dcl  access bit (36) aligned;
dcl  vl fixed bin;					/* Callers validation level */
dcl  current_ring fixed bin;
dcl  old_ename char (32);
dcl  new_uid bit (36) aligned;
dcl  must_check_mdcs bit (1);
dcl  pub_bit bit (1) aligned;			/* ignored return value from volume_registration_mgr_$get_access */

/* Entry variables */

dcl  area_ entry (fixed bin (18), ptr);
dcl  get_ring_ entry returns (fixed bin);
dcl  clock_ entry returns (fixed bin (71));
dcl  cu_$level_set entry (fixed bin);
dcl  cu_$level_get entry (fixed bin);
dcl  admin_gate_$reclassify_sys_seg entry (char (*), char (*), bit (72) aligned, fixed bin (35));
dcl  hcs_$append_branchx entry (char (*), char (*), fixed bin (5), dim (3) fixed bin (3), char (*), fixed bin (1),
     fixed bin (1), fixed bin (24), fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  hcs_$delentry_seg entry (ptr, fixed bin (35));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$truncate_seg entry (ptr, fixed bin (18), fixed bin (35));
dcl  hcs_$chname_seg entry (ptr, char (*), char (*), fixed bin (35));
dcl  volume_registration_mgr_$find_lvname entry (bit (36) aligned, char (*), fixed bin (35));
dcl  volume_registration_mgr_$find_lvid entry (char (*), bit (36) aligned, fixed bin (35));
dcl  volume_registration_mgr_$get_access entry (char (*), fixed bin, bit (36) aligned, bit (1) aligned, fixed bin (35));
dcl  mdc_check_mdcs_ entry (ptr, fixed bin (35));

dcl (addr, verify, reverse, null, length, size, substr) builtin;

dcl  sys_info$max_seg_size ext fixed bin (18);
dcl  sys_info$time_of_bootload ext fixed bin (71);
dcl  sys_info$access_class_ceiling ext bit (72) aligned;
dcl  error_table_$bad_arg ext fixed bin (35);
dcl  error_table_$namedup ext fixed bin (35);
dcl  error_table_$bad_segment ext fixed bin (35);
dcl  error_table_$mdc_mdirs_registered ext fixed bin (35);



/* Constants */

dcl  mdcsdir char (168) int static init (">lv");
dcl  mdcs_suffix char (5) int static options (constant) init (".mdcs");

%include mdcs;

/* Entry to initialize a master directory control segment */

create_mdcs: entry (arg_volume, arg_uid, arg_code);

	volume = arg_volume;
	uid = arg_uid;
	call make_mdcs_name;			/* Build name of mdcs */
	if arg_code ^= 0 then return;

	call set_validation_level;
	rings = current_ring;
	call hcs_$append_branchx (mdcsdir, ename, 01010b, rings, "*.*.*", 0, 0, 0, arg_code);
	if arg_code ^= 0 then
	     if arg_code ^= error_table_$namedup then go to reset_return; /* Namedup ok for now */

	if arg_code = 0 then do;
	     call admin_gate_$reclassify_sys_seg (mdcsdir, ename, sys_info$access_class_ceiling, arg_code);
	     if arg_code ^= 0 then go to reset_return;
	end;

	call hcs_$initiate (mdcsdir, ename, "", 0, 0, mdcsp, code); /* Find seg */
	if mdcsp = null then do;			/* This should work */
	     arg_code = code;
	     go to reset_return;
	end;

	if arg_code = 0 then go to cr_ok;		/* If append worked ok, then go initialize */
						/* Otherwise, check reason for namedup */

	if mdcs.version = 0 & ^mdcs.init then do;	/* Seems to be empty seg */
	     call hcs_$truncate_seg (mdcsp, 0, arg_code); /* Really empty now */
	     if arg_code = 0 then go to cr_ok;
	     else go to term_return;
	end;

	call validate_header;			/* See if header is reasonable */
	if arg_code ^= 0 then go to term_return;
	call mdc_check_mdcs_ (mdcsp, arg_code);		/* Not, look at rest */
	if arg_code ^= 0 then go to term_return;

	arg_code = error_table_$namedup;		/* This means old mdcs valid */
	go to term_return;

cr_ok:	mdcs.version = mdcs_version;			/* Initiailize new mdcs */
	mdcs.volume = volume;
	mdcs.uid = uid;
	mdcs.area_size = sys_info$max_seg_size - size (mdcs_head); /* Rest of seg is area */
	call area_ (mdcs.area_size, addr (mdcs.area));	/* This makes empty area */

	mdcs.init = "1"b;				/* Succeeded */
	arg_code = 0;

term_return:
	call hcs_$terminate_noname (mdcsp, code);
reset_return:
	call reset_validation_level;
	return;

/* Entry to find and initiate a master directory control segment */

find_mdcs: entry (arg_volume, arg_mdcsp, arg_access, arg_code);

	must_check_mdcs = "0"b;			/* Check of mdcs is not mandatory */
find_start:
	volume = arg_volume;
	arg_mdcsp = null;
	arg_access = "0"b;
	call set_validation_level;
	call volume_registration_mgr_$find_lvid ((volume), uid, arg_code);	/* See if registered */
	if arg_code ^= 0 then go to reset_return;
findcom:	call volume_registration_mgr_$get_access ((volume), vl, access, pub_bit, arg_code);
	if arg_code ^= 0 then go to reset_return;

	call make_mdcs_name;
	if arg_code ^= 0 then go to reset_return;
	call hcs_$initiate (mdcsdir, ename, "", 0, 0, mdcsp, arg_code); /* Find segment */
	if mdcsp = null then go to reset_return;
	call validate_header;			/* Be sure header is reasnalbe */
	if arg_code ^= 0 then go to term_return;

/* Now call mdc_check_mdcs_ to validate the MDCS. This is not always done, as it is too expensive. */

	if must_check_mdcs |			/* If check requested by caller */
	mdcs.time_checked < sys_info$time_of_bootload |	/* Hasn't been check this bootload */
	mdcs.time_checked > clock_ () |		/* The time last checked seems wierd */
	(clock_ () - mdcs.time_checked > 12*3600*1000000) then do; /* Or it hasnt been checked for 12 hours */
	     call mdc_check_mdcs_ (mdcsp, arg_code);
	     if arg_code ^= 0 then go to term_return;
	end;

	arg_mdcsp = mdcsp;				/* Ok */
	arg_access = access;
	arg_code = 0;
	go to reset_return;


/* This entry is the same as find_mdcs, excpet that a check of the mdcs is always performed */

find_mdcs_and_check: entry (arg_volume, arg_mdcsp, arg_access, arg_code);

	must_check_mdcs = "1"b;
	go to find_start;

/* Entry to find the mdcs given a uid */

find_mdcs_uid: entry (arg_uid, arg_mdcsp, arg_access, arg_code);

	uid = arg_uid;
	arg_mdcsp = null;
	arg_access = "0"b;
	call set_validation_level;
	call volume_registration_mgr_$find_lvname (uid, temp_vol, arg_code);
	if arg_code ^= 0 then go to reset_return;
	volume = temp_vol;
	must_check_mdcs = "0"b;
	go to findcom;				/* Join regular path */


/* Entry to terminate a mdcs */

term_mdcs: entry (arg_mdcsp);

	mdcsp = arg_mdcsp;
	if mdcsp = null then return;
	call set_validation_level;
	arg_mdcsp = null;
	go to term_return;

/* Entry to delete a master directory control segment by name */

delete_mdcs: entry (arg_volume, arg_uid, arg_code);

	volume = arg_volume;
	uid = arg_uid;
	call make_mdcs_name;			/* Get name of mdcs */
	if arg_code ^= 0 then return;

	call set_validation_level;

	call hcs_$initiate (mdcsdir, ename, "", 0, 0, mdcsp, arg_code);
	if mdcsp = null then go to reset_return;	/* Never was one */

	call validate_header;
	if arg_code ^= 0 then go to term_return;

delete_common:
	if mdcs.dir_offset ^= "0"b then do;		/* Still directories registered */
	     arg_code = error_table_$mdc_mdirs_registered;
	     go to term_return;
	end;

	mdcs.init = "0"b;				/* Make it look empty */
	mdcs.version = 0;

	call hcs_$delentry_seg (mdcsp, arg_code);
	go to reset_return;


/* Entry to delete a master directory control segment by pointer */

delete_mdcsp: entry (arg_mdcsp, arg_code);

	mdcsp = arg_mdcsp;
	call set_validation_level;
	go to delete_common;

/* Entry to perform mdcs part of renaming a logical volume */

rename_mdcs: entry (arg_volume, arg_uid, arg_newvol, arg_code);

	volume = arg_volume;
	uid = arg_uid;
	call make_mdcs_name;			/* Make name of old mdcs */
	if arg_code ^= 0 then return;
	call set_validation_level;

	call hcs_$initiate (mdcsdir, ename, "", 0, 0, mdcsp, arg_code);
	if mdcsp = null then go to reset_return;	/* Cant find it */
	call validate_header;			/* Among other things, this checks that the uid of
						   the new name is the same as uid for old name in mdcs */
	if arg_code ^= 0 then go to term_return;

	old_ename = ename;				/* Save old name */
	volume = arg_newvol;			/* New name */
	call make_mdcs_name;			/* Build new mdcs name */
	if arg_code ^= 0 then go to term_return;
	call hcs_$chname_seg (mdcsp, old_ename, ename, arg_code);
	if arg_code ^= 0 then go to term_return;
	mdcs.volume = volume;			/* This must agree with new name */
	arg_code = 0;
	go to term_return;


/* Entry that will change the unique id of a logical volume */
/* This may be a disaster if the are master directories registered */

update_lvid: entry (arg_volume, arg_uid, arg_new_uid, arg_code);

	volume = arg_volume;
	uid = arg_uid;				/* This is the _o_l_d uid */
	new_uid = arg_new_uid;
	call make_mdcs_name;
	if arg_code ^= 0 then return;

	call set_validation_level;

	call hcs_$initiate (mdcsdir, ename, "", 0, 0, mdcsp, arg_code);
	if arg_code ^= 0 then go to reset_return;
	call validate_header;			/* This checks that old uid is ok */
	if arg_code ^= 0 then return;

	mdcs.uid = new_uid;				/* This is the whole update */
	arg_code = 0;
	go to term_return;

/* Debugging entry that stores name of the directory containing mdcs */

set_mdcsdir: entry (arg_dir);

	mdcsdir = arg_dir;
	return;

/* Internal procedure to form name of master directory control segment */

make_mdcs_name: proc;

	     arg_code = 0;
	     if length (volume) = 0 then do;
bad_name:		arg_code = error_table_$bad_arg;
		return;
	     end;

	     i = verify (reverse (volume), " ");	/* Check for trailing blanks */
	     if i = 0 then go to bad_name;

	     i = length (volume) - i + 1;
	     if i > (length (ename) - length (mdcs_suffix)) then go to bad_name;

	     ename = substr (volume, 1, i) || mdcs_suffix;

	     return;

	end make_mdcs_name;

/* Procedure to handle validation level */

set_validation_level: proc;

	     call cu_$level_get (vl);
	     current_ring = get_ring_ ();
	     call cu_$level_set (current_ring);
	     return;

	end set_validation_level;

reset_validation_level: proc;

	     call cu_$level_set (vl);
	     return;

	end reset_validation_level;


/* Internal procedure that looks at the mdcs header */

validate_header: proc;

	     if mdcs.version ^= mdcs_version then go to bad_header;
	     if ^mdcs.init then go to bad_header;
	     if mdcs.volume ^= volume then go to bad_header;
	     if mdcs.uid ^= uid then go to bad_header;
	     arg_code = 0;
	     return;

bad_header:
	     arg_code = error_table_$bad_segment;
	     return;

	end validate_header;

     end mdcs_util_;
