/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style2,indcomtxt */

/* MDC_SET_: Entries which perform set type functions on master directories */

/* Written March 1976 by Larry Johnson */
/* Modified September 1977 by Larry Johnson to add delete_volume quota entry */
/* Modified 83-12-07 BIM for correct quota precisions */

mdc_set_:
     procedure;

/* Arguments */

	dcl     arg_volume		 char (*);	/* Logical volume name */
	dcl     arg_acct		 char (*);	/* Name of a quota account */
	dcl     arg_sw		 bit (1) aligned;	/* Quota change switch */
	dcl     arg_volume_quota	 fixed bin (35);	/* A quota, or quota adjustment */
	dcl     arg_mdir_quota	 fixed bin (18);
	dcl     arg_code		 fixed bin (35);
	dcl     arg_dir		 char (*);
	dcl     arg_ename		 char (*);
	dcl     arg_uidpath		 (0:15) bit (36) aligned;
						/* Uid pathname of directory */
	dcl     arg_index		 fixed bin;	/* Array index on dumper call */
	dcl     arg_increment	 fixed bin;	/* Amount to add on dumper call */

/* Automatic storage */

	dcl     volume		 char (32);
	dcl     code		 fixed bin (35);
	dcl     sw		 bit (1);		/* Copy of arg_sw */
	dcl     person		 char (22);	/* Person part of account name */
	dcl     project		 char (9);	/* Project part of account name */
	dcl     acct		 char (32);	/* Copy of account name */
	dcl     new_acct		 bit (1);		/* Set if new account is being added */
	dcl     (i, j)		 fixed bin;
	dcl     access		 bit (36) aligned;	/* Access to logical volume */
	dcl     voluid		 bit (36) aligned;	/* Logical volume unique id */
	dcl     uid_pathname	 (0:15) bit (36) aligned;
	dcl     dir		 char (168);
	dcl     ename		 char (32);
	dcl     (quota, new_quota, delta_quota, quota_used)
				 fixed bin (35);	/* Used in quota calculations (enough precision for vol or dir) */
	dcl     current_quota	 fixed bin (18);
	dcl     tacctp		 ptr;		/* Second pointer to an acctent */

	dcl     1 owner_struct	 aligned,
		2 person		 char (22) unal,
		2 project		 char (9) unal;

/* Entry variables */

	dcl     admin_gate_$mdir_status
				 entry (char (*), char (*), dim (0:15) bit (36) aligned, bit (36) aligned,
				 fixed bin (18), fixed bin (35));
	dcl     admin_gate_$set_mdir_quota
				 entry (dim (0:15) bit (36) aligned, fixed bin (18), fixed bin (35));
	dcl     mdc_lock_$cleanup	 entry;
	dcl     mdc_lock_$reset	 entry;
	dcl     mdc_lock_$set	 entry (fixed bin (35));
	dcl     mdc_parse_acct_	 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     mdc_parse_acct_$star	 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     mdc_util_$find_acctent entry (ptr, char (*), char (*), ptr);
	dcl     mdc_util_$find_matching_acctent
				 entry (ptr, char (*), char (*), ptr);
	dcl     mdc_util_$find_mdirent entry (ptr, dim (0:15) bit (36) aligned, ptr);
	dcl     mdc_util_$get_acctent	 entry (ptr, ptr, fixed bin (35));
	dcl     mdc_util_$thread_acctent
				 entry (ptr);
	dcl     mdc_util_$free_pathent entry (bit (18) aligned, ptr);
	dcl     mdc_util_$free_acctent entry (ptr);
	dcl     mdcs_util_$find_mdcs	 entry (char (*), ptr, bit (36) aligned, fixed bin (35));
	dcl     mdcs_util_$find_mdcs_uid
				 entry (bit (36) aligned, ptr, bit (36) aligned, fixed bin (35));
	dcl     mdcs_util_$term_mdcs	 entry (ptr);

	dcl     error_table_$argerr	 ext fixed bin (35);
	dcl     error_table_$mdc_mdir_registered
				 ext fixed bin (35);
	dcl     error_table_$mdc_bad_quota
				 ext fixed bin (35);
	dcl     error_table_$mdc_exec_access
				 ext fixed bin (35);
	dcl     error_table_$mdc_illegal_account
				 ext fixed bin (35);
	dcl     error_table_$mdc_no_access
				 ext fixed bin (35);
	dcl     error_table_$mdc_no_account
				 ext fixed bin (35);
	dcl     error_table_$mdc_no_quota
				 ext fixed bin (35);
	dcl     error_table_$mdc_no_quota_account
				 ext fixed bin (35);
	dcl     error_table_$mdc_not_mdir
				 ext fixed bin (35);
	dcl     error_table_$mdc_unregistered_mdir
				 ext fixed bin (35);

	dcl     cleanup		 condition;

	dcl     (ptr, rel, null, substr, string)
				 builtin;


/* Set volume quota for a quota account */

volume_quota:
     entry (arg_volume, arg_acct, arg_sw, arg_volume_quota, arg_code);

	volume = arg_volume;			/* Copy volume */
	mdcsp = null;
	on cleanup call clean_up;

	call locate_vol;

	if ^exec_access ()
	then go to not_exec;			/* Executive access to volume required */

	sw = arg_sw;				/* Copy params */
	new_quota = arg_volume_quota;
	acct = arg_acct;

	call mdc_parse_acct_$star (acct, person, project, code);
	if code ^= 0
	then go to term_return;

	new_acct = "0"b;				/* Assume old account for now */
	call mdc_util_$find_acctent (mdcsp, person, project, acctp);
						/* Find current entry */
	if acctp = null
	then do;					/* Account does not exist */
		if sw
		then do;				/* Can't do incremental on new account */
			code = error_table_$mdc_no_account;
			go to term_return;
		     end;
		new_acct = "1"b;			/* Remember that this is new */
		call mdc_util_$get_acctent (mdcsp, acctp, code);
						/* Get free entry */
		if code ^= 0
		then go to term_return;
		acctent.name.person = person;		/* Initialize new entry */
		acctent.name.project = project;
	     end;
	if sw
	then new_quota = acctent.quota + new_quota;	/* If incremental change */
	if new_quota < 0
	then new_quota = 0;
	acctent.quota = new_quota;			/* Update mdcs */
	if new_acct
	then call mdc_util_$thread_acctent (acctp);	/* New entry must be threaded */

good_exit:
	code = 0;
term_return:
	call mdcs_util_$term_mdcs (mdcsp);
unlock_return:
	call mdc_lock_$reset;
return_code:
	arg_code = code;
	return;

not_exec:
	code = error_table_$mdc_exec_access;
	go to term_return;

/* Entry to delete a quota account */

delete_volume_quota:
     entry (arg_volume, arg_acct, arg_code);

	volume = arg_volume;
	mdcsp = null;
	on cleanup call clean_up;

	call locate_vol;
	if ^exec_access ()
	then go to not_exec;

	acct = arg_acct;
	call mdc_parse_acct_$star (acct, person, project, code);
	if code ^= 0
	then go to term_return;			/* Bad account */

	call mdc_util_$find_acctent (mdcsp, person, project, acctp);
	if acctp = null
	then do;					/* Given non-existent account */
		code = error_table_$mdc_no_account;
		go to term_return;
	     end;

/* Make sure no master directories derive quota from this account */

	do mdirp = ptr (mdcsp, mdcs.dir_offset) repeat (ptr (mdcsp, mdirent.next)) while (rel (mdirp) ^= "0"b);
	     if mdirent.quota_offset = rel (acctp)
	     then do;
		     code = error_table_$mdc_mdir_registered;
		     go to term_return;
		end;
	end;

	do while (acctent.restrict_path ^= "0"b);	/* Free anya restrict path */
	     pathp = ptr (mdcsp, acctent.restrict_path);
	     call mdc_util_$free_pathent (acctent.restrict_path, pathp);
	end;

	call mdc_util_$free_acctent (acctp);		/* Finally,, free the account entry */
	go to good_exit;

mdir_owner:
     entry (arg_dir, arg_ename, arg_acct, arg_code);

	dir = arg_dir;				/* Copy arguments */
	ename = arg_ename;
	acct = arg_acct;

	mdcsp = null;
	on cleanup call clean_up;
	call locate_dir;				/* Find my directory */

	if ^exec_access ()
	then go to not_exec;

	call mdc_parse_acct_$star (acct, person, project, code);
	if code ^= 0
	then go to term_return;
	if person = "*" | project = "*"
	then do;					/* Must be real person */
		code = error_table_$mdc_illegal_account;
		go to term_return;
	     end;

	owner_struct.person = person;			/* Build structure to move */
	owner_struct.project = project;

	string (mdirent.owner) = string (owner_struct);	/* This is the update */

	go to good_exit;

/* Entry to set the quota on a master directory */

mdir_quota:
     entry (arg_dir, arg_ename, arg_sw, arg_mdir_quota, arg_code);

	dir = arg_dir;
	ename = arg_ename;
	sw = arg_sw;
	quota = arg_mdir_quota;

	mdcsp = null;
	on cleanup call clean_up;
	call locate_dir;				/* Find master dir */
	acctp = ptr (mdcsp, mdirent.quota_offset);	/* Pointer to account entry */

/* Check for access to perform update */

	if ^exec_access ()
	then do;					/* If not volume executive, perform user checks */
		call mdc_parse_acct_ ("", person, project, code);
						/* Find out my account */
		if code ^= 0
		then go to term_return;
		if person = mdirent.owner.person & /* If I am owner */ project = mdirent.owner.project
		then go to access_ok;
		call mdc_util_$find_matching_acctent (mdcsp, person, project, tacctp);
						/* Find my quota account */
		if tacctp ^= acctp
		then do;				/* If not a match, error */
			code = error_table_$mdc_no_access;
			go to term_return;
		     end;
	     end;
access_ok:					/* Check for sufficient quota */
	if sw
	then delta_quota = quota;			/* Compute change in quota */
	else delta_quota = quota - mdirent.quota;
	new_quota = mdirent.quota + delta_quota;	/* New directory quota */
	quota_used = acctent.quota_used + delta_quota;	/* New quota used for account */
	if new_quota < 1
	then do;					/* If directory quota illegal */
		code = error_table_$mdc_bad_quota;
		go to term_return;
	     end;
	if quota_used > acctent.quota
	then do;					/* No quota in account */
		code = error_table_$mdc_no_quota;
		go to term_return;
	     end;

/* Now do update */

	call admin_gate_$set_mdir_quota (uid_pathname, (new_quota), code);
	if code ^= 0
	then go to term_return;
	mdirent.quota = new_quota;
	acctent.quota_used = quota_used;

	go to good_exit;

/* Entry to change a master directory's quota account */

mdir_account:
     entry (arg_dir, arg_ename, arg_acct, arg_code);

	dir = arg_dir;
	ename = arg_ename;
	acct = arg_acct;

	mdcsp = null;
	on cleanup call clean_up;
	call locate_dir;				/* Find it */
	if ^exec_access ()
	then go to not_exec;			/* Must be volume executive */

	acctp = ptr (mdcsp, mdirent.quota_offset);	/* Current quota account */

	call mdc_parse_acct_$star (acct, person, project, code);
	if code ^= 0
	then go to term_return;
	if acct ^= ""
	then do;					/* If an account was given */
		call mdc_util_$find_acctent (mdcsp, person, project, tacctp);
		if tacctp = null
		then do;				/* No such account */
			code = error_table_$mdc_no_account;
			go to term_return;
		     end;
	     end;
	else do;					/* If no acct, use callers quota account */
		call mdc_util_$find_matching_acctent (mdcsp, person, project, tacctp);
		if tacctp = null
		then do;
			code = error_table_$mdc_no_quota_account;
			go to term_return;
		     end;
	     end;

	if acctp = tacctp
	then go to good_exit;			/* Already done */

	quota_used = tacctp -> acctent.quota_used + mdirent.quota;
						/* Check quota in new account */
	if quota_used > tacctp -> acctent.quota
	then do;
		code = error_table_$mdc_no_quota;
		go to term_return;
	     end;

	mdirent.quota_offset = rel (tacctp);		/* Do the update */
	tacctp -> acctent.quota_used = quota_used;
	quota_used = acctent.quota_used - mdirent.quota;	/* Quota for old account */
	if quota_used < 0
	then quota_used = 0;
	acctent.quota_used = quota_used;
	go to good_exit;

/* Entry to record dumper statistics */

dmpr_usage:
     entry (arg_volume, arg_uidpath, arg_index, arg_increment, arg_code);

	volume = arg_volume;			/* Copy params */
	uid_pathname = arg_uidpath;
	i = arg_index;
	j = arg_increment;

	if i < 1 | i > 3 | j < 0
	then do;
		arg_code = error_table_$argerr;
		return;
	     end;

	mdcsp = null;
	on cleanup call clean_up;

	call locate_vol;

	call mdc_util_$find_mdirent (mdcsp, uid_pathname, mdirp);
						/* Find directory */
	if mdirp = null
	then do;
		code = error_table_$mdc_not_mdir;
		go to term_return;
	     end;

	acctp = ptr (mdcsp, mdirent.quota_offset);	/* Ready to do update */
	call dmpr_add (mdcs.backup);
	call dmpr_add (acctent.backup);
	call dmpr_add (mdirent.backup);

	go to good_exit;

/* Procedure to perform adds for dumper */

dmpr_add:
     proc (stats);

	dcl     stats		 (3) fixed bin (35);
	dcl     dp_temp		 fixed bin (71);	/* Double precision temporary */
	dcl     sp_max		 fixed bin (35) int static options (constant)
				 init (11111111111111111111111111111111111b);

	dp_temp = stats (i);			/* Copy current */
	dp_temp = dp_temp + j;			/* Add increment */
	if dp_temp > sp_max
	then dp_temp = sp_max;			/* Fix single precision overflow */
	stats (i) = dp_temp;
	return;

     end dmpr_add;

/* Internal procedure whichs loactes the MDCS and mdirent for a directory */

locate_dir:
     proc;

	call mdc_lock_$set (code);
	if code ^= 0
	then go to return_code;

	call admin_gate_$mdir_status (dir, ename, uid_pathname, voluid, current_quota, code);
	if code ^= 0
	then go to unlock_return;

	call mdcs_util_$find_mdcs_uid (voluid, mdcsp, access, code);
						/* Find mdcs */
	if code ^= 0
	then go to unlock_return;

	call mdc_util_$find_mdirent (mdcsp, uid_pathname, mdirp);
						/* Find directory entry */
	if mdirp = null
	then do;
		code = error_table_$mdc_unregistered_mdir;
		go to term_return;
	     end;

	return;

     end locate_dir;

locate_vol:
     proc;

	call mdc_lock_$set (code);
	if code ^= 0
	then go to return_code;

	call mdcs_util_$find_mdcs (volume, mdcsp, access, code);
	if code ^= 0
	then go to unlock_return;
	return;

     end locate_vol;

/* Function which checks for exec access to volume */

exec_access:
     proc returns (bit (1));

	return ((access & E_ACCESS) = E_ACCESS);

     end exec_access;

/* Cleanup handler */


clean_up:
     proc;

	if mdcsp ^= null
	then call mdcs_util_$term_mdcs (mdcsp);
	call mdc_lock_$cleanup;
	return;

     end clean_up;

%include access_mode_values;
%include mdcs;

     end mdc_set_;
