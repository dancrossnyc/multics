/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* MDC_SET_PATH_: This module contains entries for managing master directory path restrictions */

/* Written April 1976 by Larry Johnson */

mdc_set_path_: proc;

/* Arguments */

dcl  arg_volume char (*);				/* A hierarchy volume name */
dcl  arg_dirs (*) char (*);				/* Array of directory names */
dcl  arg_status (*) fixed bin (35);			/* One status code for each directory */
dcl  arg_type fixed bin;				/* Indicator for type of chage:
						   0=replace, 1=add, 2=delete */
dcl  arg_code fixed bin (35);
dcl  arg_acct char (*);				/* Name of a quota account */

/* Automatic */

dcl  volume char (32);
dcl  ndirs fixed bin;				/* Number of directories in arg_dirs */
dcl  type fixed bin;
dcl  code fixed bin (35);
dcl  acct char (32);
dcl  person char (22);
dcl  project char (9);
dcl  share bit (1) init ("0"b);			/* Set when account shares volume default */
dcl (i, j) fixed bin;
dcl  dir char (168);
dcl  access bit (36) aligned;

/* External stuff */

dcl  admin_gate_$get_uidpath entry (char (*), char (*), dim (0:15) bit (36) aligned, fixed bin (35));
dcl  mdc_lock_$cleanup entry;
dcl  mdc_lock_$reset entry;
dcl  mdc_lock_$set entry (fixed bin (35));
dcl  mdc_parse_acct_$star entry (char (*), char (*), char (*), fixed bin (35));
dcl  mdc_util_$check_pathent entry (bit (18) aligned, dim (0:15) bit (36) aligned, fixed bin (35));
dcl  mdc_util_$find_acctent entry (ptr, char (*), char (*), ptr);
dcl  mdc_util_$find_matching_acctent entry (ptr, char (*), char (*), ptr);
dcl  mdc_util_$find_pathent entry (bit (18) aligned, dim (0:15) bit (36) aligned, ptr);
dcl  mdc_util_$free_pathent entry (bit (18) aligned, ptr);
dcl  mdc_util_$get_pathent entry (ptr, ptr, fixed bin (35));
dcl  mdc_util_$thread_pathent entry (bit (18) aligned, ptr);
dcl  mdcs_util_$find_mdcs entry (char (*), ptr, bit (36) aligned, fixed bin (35));
dcl  mdcs_util_$term_mdcs entry (ptr);

dcl  error_table_$argerr ext fixed bin (35);
dcl  error_table_$mdc_exec_access ext fixed bin (35);
dcl  error_table_$mdc_no_account ext fixed bin (35);
dcl  error_table_$mdc_no_quota_account ext fixed bin (35);
dcl  error_table_$mdc_path_dup ext fixed bin (35);
dcl  error_table_$mdc_path_dup_args ext fixed bin (35);
dcl  error_table_$mdc_path_not_found ext fixed bin (35);
dcl  error_table_$mdc_path_restrict ext fixed bin (35);
dcl  error_table_$mdc_some_error ext fixed bin (35);

dcl  cleanup condition;

dcl (null, hbound, ptr, rel, unspec, substr) builtin;

%include mdcs;

/* Entry to make adjustments in volume default path */

volume_default: entry (arg_volume, arg_dirs, arg_status, arg_type, arg_code);

	call test_params;

	mdcsp = null;
	on cleanup call clean_up;

	call locate_vol;

	call path_adjust (mdcs.default_path, "0"b);	/* Go do  the work */

term_return:
	call mdcs_util_$term_mdcs (mdcsp);
unlock_return:
	call mdc_lock_$reset;
return_code:
	arg_code = code;
	return;


/* Entry to set volume restriction path */

volume_restrict: entry (arg_volume, arg_dirs, arg_status, arg_type, arg_code);

	call test_params;

	mdcsp = null;
	on cleanup call clean_up;

	call locate_vol;

	call path_adjust (mdcs.restrict_path, "0"b);

	go to term_return;

/* Entryy to set path restriction for individual accoount */

account_restrict: entry (arg_volume, arg_acct, arg_dirs, arg_status, arg_type, arg_code);

	call test_params;

	acct = arg_acct;
	call mdc_parse_acct_$star (acct, person, project, code);
	if code ^= 0 then go to return_code;

	mdcsp = null;
	on cleanup call clean_up;

	call locate_vol;

	if ^substr (access, 2, 1) then do;		/* exec access required */
	     code = error_table_$mdc_exec_access;
	     go to term_return;
	end;

	if acct ^= "" then do;			/* If quota account given */
	     call mdc_util_$find_acctent (mdcsp, person, project, acctp); /* Find entry to update */
	     if acctp = null then do;
		code = error_table_$mdc_no_account;
		go to term_return;
	     end;
	end;
	else do;					/* User callers quota account */
	     call mdc_util_$find_matching_acctent (mdcsp, person, project, acctp);
	     if acctp = null then do;
		code = error_table_$mdc_no_quota_account;
		go to term_return;
	     end;
	end;

	share = (acctent.restrict_path = "0"b);		/* Set if this shares volume default */

	call path_adjust (acctent.restrict_path, mdcs.restrict_path);
	go to term_return;

/* This preocedure does some basic argument checking and copying */

test_params: proc;

	     volume = arg_volume;
	     ndirs = hbound (arg_dirs, 1);		/* Count of directorys given */
	     type = arg_type;

	     if type < 0 | type > 2 then do;
argerr:		code = error_table_$argerr;
		go to return_code;
	     end;

	     if ndirs < 0 then go to argerr;
	     if type ^= 0 then			/* If add  or delte, there must be dierectories */
		if ndirs ^> 0 then go to argerr;

	     return;

	end test_params;


/* Internal procedure that sets lock and locates mdcs */

locate_vol: proc;

	     call mdc_lock_$set (code);
	     if code ^= 0 then go to return_code;

	     call mdcs_util_$find_mdcs (volume, mdcsp, access, code);
	     if code ^= 0 then go to unlock_return;

	     return;
	end locate_vol;


/* Cleanup handler */

clean_up:	proc;

	     if mdcsp ^= null then call mdcs_util_$term_mdcs (mdcsp);
	     call mdc_lock_$cleanup;
	     return;

	end clean_up;

/* Procedure that does the work of adjusting the path list */

path_adjust: proc (head, restrict_head);

dcl  head bit (18) aligned;				/* Head of list being updated */
dcl  restrict_head bit (18) aligned;			/* List of restrictions on update (or "0"b) */

dcl  one_ok bit (1);
dcl (needed, next_ptr) fixed bin;

dcl  codes (ndirs) fixed bin (35);			/* Enough codes for arguments given */
dcl 1 paths (ndirs) aligned,
    2 list,
      3 uidpath (0:15) bit (36) aligned;		/* Enough paths for each argument */

	     one_ok = "0"b;				/* None definitely ok  yet */

/* Attemp to translate each directory given into  a uidpath */

	     do i = 1 to ndirs;			/* This first loop gets the uidpath of each dir given */
		dir = arg_dirs (i);			/* Copy it */
		call admin_gate_$get_uidpath (dir, "", paths.uidpath (i, *), code);
		codes (i) = code;
		if code = 0 then one_ok = "1"b;	/* At least one ok */
	     end;

	     if ^one_ok & ndirs > 0 then go to return_code_array; /* Give up if all paths bad */

/* Check the list of uidpaths for duplicates */

	     do i = 2 to ndirs;
		if codes (i) = 0 then do j = 1 to i-1;
		     if codes (j) = 0 then
			if unspec (paths.list (i)) = unspec (paths.list (j)) then
			     codes (i) = error_table_$mdc_path_dup_args;
		end;
	     end;

/* Check here for adding duplicates or deleting non-existent items */

	     if type ^= 0 then do;
		one_ok = "0"b;
		do i = 1 to ndirs;
		     if codes (i) = 0 then do;	/* If passed previous tests */
			if share then call mdc_util_$find_pathent (mdcs.default_path, paths.uidpath (i, *), pathp);
			else call mdc_util_$find_pathent (head, paths.uidpath (i, *), pathp);
			if type = 1 & pathp ^= null then codes (i) = error_table_$mdc_path_dup;
						/* Add of exisiting entry */
			else if type = 2 & pathp = null then codes (i) = error_table_$mdc_path_not_found;
						/* Delete of missing item */
			else one_ok = "1"b;		/* At least one in list passes */
		     end;
		end;
		if ^one_ok then go to return_code_array;
	     end;

/* Be sure that any new paths do not violate a restriction */

	     if restrict_head ^= "0"b & (type = 0 | type = 1) then do;
		one_ok = "0"b;
		do i = 1 to ndirs;
		     if codes (i) = 0 then do;
			call mdc_util_$check_pathent (restrict_head, paths.uidpath (i, *), code);
			codes (i) = code;
			if code = 0 then one_ok = "1"b;
		     end;
		end;
		if ^one_ok then go to return_code_array;
	     end;

/* Now calculate how many pathent structures will be needed. They all get allocated before update begins */

	     needed = 0;				/* Number needed for new paths */
	     if type = 0 | type = 1 then do i = 1 to ndirs; /* Only necessary for replace or add */
		if codes (i) = 0 then needed = needed + 1;
	     end;

	     if share & (type = 1 | type = 2) then do;	/* Must do this before deletes and adds */
		pathp = ptr (mdcsp, mdcs.default_path); /* Start of list */
		do while (rel (pathp) ^= "0"b);
		     needed = needed + 1;		/* Just count number in list so it can be copied */
		     pathp = ptr (mdcsp, pathent.next);
		end;
	     end;


/* Use a begin block to allocat an array of pointers so that all pathents can be allocated */

	     begin;

dcl  pathents (needed) ptr;

		do i = 1 to needed;
		     call mdc_util_$get_pathent (mdcsp, pathents (i), code);
		     if code ^= 0 then do;		/* Ran out of space */
			do j = 1 to i-1;		/* Release the ones just allocated */
			     call mdc_util_$free_pathent ("0"b, pathents (i));
			end;
			go to term_return;
		     end;
		end;

/* Now copy the default path list if required */

		next_ptr = 1;			/* Index into list of new pathents */
		if share & (type = 1 | type = 2) then do; /* Must make copy of list for the account */
		     pathp = ptr (mdcsp, mdcs.default_path); /* Head of list */
		     do while (rel (pathp) ^= "0"b);
			pathents (next_ptr) -> pathent = pathent;
			next_ptr = next_ptr + 1;
			pathp = ptr (mdcsp, pathent.next);
		     end;
		     do j = next_ptr -1 to 1 by -1;	/*  thread in reverse order so list looks the same */
			call mdc_util_$thread_pathent (head, pathents (j));
		     end;
		end;

/* If doing a replace, delete the old list */

		if type = 0 then do while (head ^= "0"b);
		     pathp = ptr (mdcsp, head);
		     call mdc_util_$free_pathent (head, pathp);
		end;

/* Now really do the update */

		if type = 2 then do i = 1 to ndirs;	/* Delete */
		     if codes (i) = 0 then do;
			call mdc_util_$find_pathent (head, paths.uidpath (i, *), pathp);
			if pathp ^= null then call mdc_util_$free_pathent (head, pathp);
		     end;
		end;

		else do i = 1 to ndirs;		/* Replace or add */
		     if codes (i) = 0 then do;
			pathp = pathents (next_ptr);
			next_ptr = next_ptr + 1;
			pathent.uidpath = paths.uidpath (i, *);
			call mdc_util_$thread_pathent (head, pathp);
		     end;
		end;
	     end;

return_code_array:
	     code = 0;
	     do i = 1 to ndirs;
		if codes (i) ^= 0 then code = error_table_$mdc_some_error;
		arg_status (i) = codes (i);
	     end;
	     return;


	end path_adjust;

     end mdc_set_path_;
