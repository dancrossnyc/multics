/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */

kstsrch: proc (uid, hash_bucket, kstep);

/*

   --->  kstsrch searches the KST unique identifier hash table and returns a pointer  to  the
   KSTE  desired  and the uid hash class.

   Modified November 1984 by Keith Loepere to remove hdr, also notion of
   undetectable objects.

   USAGE:  call kstsrch(uid, hash_bucket, kstep);

   uid bit(36) aligned ---- unique id of object searched for (input)
   hash_bucket fixed bin (17) ---- hash class (output)
   kstep ptr ---- pointer to the desired KSTE if found else null (output)

*/

/* Parameters */

dcl  hash_bucket			fixed bin (17) parameter;
dcl  uid				bit (36) aligned parameter;

/* dcl kstep			ptr parameter; */

/* Variables */

dcl  ring				fixed bin (3);

/* Misc */

dcl  (fixed, ptr, rel, null, mod, dimension) builtin;

/* Entries */

dcl  level$get			entry () returns (fixed bin (3));
%page;
	kstp = pds$kstp;
	ring = level$get ();
	hash_bucket = mod (fixed (uid), dimension (kst.uid_hash_bucket, 1));
	do kstep = ptr (kstp, kst.uid_hash_bucket (hash_bucket))
	     repeat (ptr (kstp, kste.fp)) while (rel (kstep) ^= "0"b);
	     if uid = kste.uid then return;
	end;
	kstep = null ();
	return;
%page; %include kst;
     end kstsrch;
