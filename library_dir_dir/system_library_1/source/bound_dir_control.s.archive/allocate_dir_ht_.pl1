/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


allocate_dir_ht_: proc (dp, num_names, code);

/* This procedure allocates the appropriate size hash table for the number of names specified.  It does not free
   the block of storage containing the old hash table.   A non-zero code is returned if allocation fails.
   The smallest hash table size that is greater or equal to the number of names specified is used.
*/
/* Written 9/76 by S. Barr */

dcl  num_names fixed bin;				/* number of names in directory */
dcl  code fixed bin (35);

dcl  i fixed bin;
dcl  table_size fixed bin;				/* number of slots in hash table */
dcl  block_size fixed bin;				/* number of words in hash table block */
dcl  alloc_block (block_size) bit (36) based;		/* used to set owner in hash table block */

dcl (min, null) builtin;

/* external */

dcl  active_hardcore_data$nalloc_sizes fixed bin ext;
dcl  active_hardcore_data$alloc_sizes (1) fixed bin ext;
dcl  active_hardcore_data$num_hash_table_sizes fixed bin ext;
dcl  active_hardcore_data$hash_table_sizes (1) fixed bin ext;
dcl  fs_alloc$alloc entry (ptr, fixed bin, ptr);

/*  */
%include dir_header;
%include dir_ht;
%include fs_types;
/*  */
	do i = 1 to active_hardcore_data$num_hash_table_sizes
		while (num_names > active_hardcore_data$hash_table_sizes (i));
	end;
	i = min (i, active_hardcore_data$num_hash_table_sizes);
	table_size = active_hardcore_data$hash_table_sizes (i);

	do i = 1 to active_hardcore_data$nalloc_sizes
		while (divide (table_size+1, 2, 17, 0) +4 > active_hardcore_data$alloc_sizes (i));
	end;
	block_size = active_hardcore_data$alloc_sizes (i);
	call fs_alloc$alloc (ptr (dp, dir.arearp), block_size, htp);
	if htp = null then return;

	hash_table.type = HASH_TABLE_TYPE;
	hash_table.size = block_size;
	htp -> alloc_block (block_size) = dir.uid;	/* owner */
	dir.hash_table_rp = rel (htp);
	dir.htsize = table_size;

	return;

     end allocate_dir_ht_;
