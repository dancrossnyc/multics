/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/* format: style3 */
vtoc_attributes$set_dates:
     proc (Uid, Pvid, Vtocx, Dtu, Dtm, Code);

/* VTOC_ATTRIBUTES - segment control interface for directory control.
   When DC wishes to set or get items from the VTOC it calls here.

   Entry points are:

   set_dates
   set_max_lth
   get_info
   get_quota
   set_quota
   reloading
   set_pc_switches
   set_dump_switches
   set_dump_info
   correct_qused
   salv_update
   get_dump_info


   THVV 4/75 

   $reloading added by RE Mullen Autumn 1975 
   Modified by D. Vinograd 7/76 to update volume dumper bit map so that modified vtoces are dumped. 
   unlock AST before vtoc read for $get_info:  RE Mullen, Winter 1976 
   Modified by D. Vinograd 8/76 to add entry to set the volume dumper control switches 
   $correct_qused - BSG 2/18/77 
   Modified 7/77 by S.E. Barr to add salv_update entry. 
   Modified 10/79 by Mike Grady to fix dormat seg time update bug 
   Modified 11/80 by E. N. Kittlitz to fix race in set_dates (active). Use clock builtin. 
   Modified 11/80 by E.N. Kittlitz for dtu/dtm change. 
   Modified 3/82 BIM for expanded sc_info. 
   Modified 3/82 by J. Bongiovanni to remove vtoce.infqcnt 
   Modified 8/82 by J. Bongiovanni for new vtoc_man 
   Modified 9/82 by J. Bongiovanni to do less work under AST lock, fix races
   Modified 8/83 by E. N. Kittlitz for search_ast$check
   Modified 83-12-01 BIM to not setfault on set_max_length unless necessary.
*/

/*  Parameter  */

dcl	Code		fixed bin (35) parameter;	/* Return Code */
dcl	Dtd		bit (36) aligned parameter;	/* File System Date-Time-Dumped */
dcl	Dtm		bit (36) aligned parameter;	/* File System Date-Time Modified */
dcl	Dtu		bit (36) aligned parameter;	/* File System Date-Time Used */
dcl	Dudelta		fixed bin (34);		/* Change in directory quota used */
dcl	Msk		bit (36) aligned;		/* Mask of which PC switches to diddle */
dcl	Mxl		fixed bin (9) parameter;	/* Maximum Length */
dcl	Ncd		fixed bin parameter;	/* No-Complete-Dump switch */
dcl	Nid		fixed bin parameter;	/* No-Incremental-Dump switch */
dcl	Priv_Sw		bit (1) aligned parameter;	/* ON => privileged call */
dcl	Pvid		bit (36) aligned parameter;	/* Physical Volume Unique ID */
dcl	Qcp		ptr parameter;		/* -> quota info structure */
dcl	Qtype		fixed bin parameter;	/* Type of Quota */
dcl	Salv_Updatep	ptr parameter;		/* -> salvager info structure */
dcl	Scip		ptr parameter;		/* -> status info structure */
dcl	Sudelta		fixed bin (34);		/* Change in segment quota used */
dcl	Sws		bit (36) aligned;		/* PC switch values */
dcl	Uid		bit (36) aligned parameter;	/* Segment Unique ID */
dcl	Volid		(3) bit (36) aligned parameter;
						/* Dump Volume IDs */
dcl	Vtocx		fixed bin parameter;	/* VTOCE index on volume */

/*  Automatic  */

dcl	active		bit (1) aligned;		/* ON => target segment is active */
dcl	add_to_dumper	bit (1) aligned;		/* ON => add to dumper bit map when done */
dcl	ast_is_locked	bit (1) aligned;		/* ON => AST lock held */
dcl	code		fixed bin (35);		/* Error Code */
dcl	code1		fixed bin (35);		/* Another Error Code */
dcl	curtime		fixed bin (71);		/* Used for dtu, dtm computations */
dcl	dtd		bit (36) aligned;		/* File System Date-Time-Dumped */
dcl	dtm		bit (36) aligned;		/* File System Date-Time-Modified */
dcl	dtu		bit (36) aligned;		/* File System Date-Time-Used */
dcl	dudelta		fixed bin (34);		/* Change in directory quota used */
dcl	1 local_aste	aligned like aste;		/* Pseudo-ASTE */
dcl	1 local_quota_cell	aligned like quota_cell;	/* Copy of quota structure */
dcl	1 local_salv_update_info
			aligned like salv_update_info;/* Copy of salvager infor structure */
dcl	1 local_sc_info	aligned like sc_info;	/* Copy of status info structure */
dcl	1 local_vtoce	aligned like vtoce;		/* Copy of VTOCE */
dcl	1 msk		aligned like vtoce_pc_sws;	/* Mask of PC switches to diddle */
dcl	mxl		fixed bin (9);		/* Maximum length */
dcl	mxl_bits		bit (9);			/* Maximum length */
dcl	ncd		fixed bin;		/* No-complete-dump switch */
dcl	need_vtoce	bit (1) aligned;		/* ON => VTOCE must be read, even if segment active */
dcl	nid		fixed bin;		/* No-incremental-dump switch */
dcl	priv_sw		bit (1) aligned;		/* ON => privileged call */
dcl	pvid		bit (36) aligned;		/* Physical Volume Unique ID */
dcl	pvtx		fixed bin;		/* PVT Index of Volume */
dcl	qt		fixed bin;		/* Quota type index */
dcl	qtype		fixed bin;		/* Quota type */
dcl	sudelta		fixed bin (34);		/* Change in segment quota used */
dcl	1 sws		aligned like vtoce_pc_sws;	/* PC switch values */
dcl	uid		bit (36) aligned;		/* Segment Unique ID */
dcl	update		bit (1) aligned;		/* ON => ASTE or VTOCE is being updated */
dcl	volid		(3) bit (36) aligned;	/* Dump volume IDs */
dcl	vtocx		fixed bin;		/* VTOCE index on volume */

/*  Static  */

dcl	ALL_PARTS		bit (3) int static options (constant) init ("111"b);

/*  Based  */

dcl	1 Quota_Cell	aligned like quota_cell based (Qcp);
dcl	1 Salv_Update_Info	aligned like salv_update_info based (Salv_Updatep);
dcl	1 Sc_Info		aligned like sc_info based (Scip);

/*  External  */

dcl	error_table_$dm_not_enabled
			fixed bin (35) external;
dcl	error_table_$invalid_max_length
			fixed bin (35) external;
dcl	error_table_$vtoce_connection_fail
			fixed bin (35) external;
dcl	sst$dm_enabled	bit (1) aligned external;

/*  Entry  */

dcl	dbm_man$set_incr	entry (fixed bin, fixed bin, fixed bin (35));
dcl	deactivate	entry (ptr, fixed bin (35));
dcl	get_pvtx		entry (bit (36) aligned, fixed bin (35)) returns (fixed bin);
dcl	lock$lock_ast	entry;
dcl	lock$unlock_ast	entry;
dcl	quotaw$cu		entry (ptr, fixed bin (34), bit (1) aligned, fixed bin (2), fixed bin (35));
dcl	pc$update_incore_fms
			entry (ptr);
dcl	search_ast$check	entry (bit (36) aligned, bit (36) aligned, fixed bin, fixed bin (35)) returns (ptr);
dcl	setfaults		entry (ptr, bit (1) aligned);
dcl	vtoc_man$get_vtoce	entry (bit (36) aligned, fixed bin, fixed bin, bit (3), ptr, fixed bin (35));
dcl	vtoc_man$put_vtoce	entry (bit (36) aligned, fixed bin, fixed bin, bit (3), ptr, fixed bin (35));

/*  Builtin  */

dcl	addr		builtin;
dcl	bit		builtin;
dcl	clock		builtin;
dcl	fixed		builtin;
dcl	null		builtin;
dcl	string		builtin;
dcl	unspec		builtin;
%page;
/* vtoc_attributes$set_dates - called by set$dates, etc., to set the dtu and
   dtm of a segment. */

	dtu = Dtu;
	dtm = Dtm;

	call SETUP (Code);
	if Code ^= 0
	then return;

	update = "1"b;
	add_to_dumper = "1"b;

	call GET_ASTE_VTOCE (code);
	if code = 0
	then do;
		call UPDATE_ACTIVE_DT;
		if dtu ^= ""b
		then aste.dtu = dtu;
		if dtm ^= ""b
		then aste.dtm = dtm;
	     end;

	call FINISH (code);

	Code = code;

	return;
%page;
/*  vtoc_attributes$set_max_lth - called by set$max_length to set the maximum
    length of a segment. Unless Priv_Sw is set, the max length cannot be
    set to less than the current length. */

set_max_lth:
     entry (Uid, Pvid, Vtocx, Mxl, Priv_Sw, Code);

	mxl = Mxl;
	mxl_bits = bit (mxl, 9);
	priv_sw = Priv_Sw;

	call SETUP (Code);
	if Code ^= 0
	then return;

	call GET_ASTE_VTOCE (code);
	if code = 0
	then do;
		if ^priv_sw
		then if mxl_bits < aste.csl
		     then code = error_table_$invalid_max_length;
	     end;
	if code = 0
	then if aste.msl ^= mxl_bits
	     then do;
		     update = "1"b;
		     add_to_dumper = "1"b;
		     if active & (mxl_bits < aste.msl)
		     then call setfaults (astep, "0"b);
		     aste.msl = mxl_bits;
		end;

	call FINISH (code);

	Code = code;

	return;
%page;
/*  vtoc_attributes$get_info - called by status_ to get the dates and lengths
    from the VTOCE */

get_info:
     entry (Uid, Pvid, Vtocx, Scip, Code);

	call SETUP (Code);
	if Code ^= 0
	then return;

	unspec (local_sc_info) = ""b;

	call GET_ASTE_VTOCE (code);
	if code = 0
	then do;
		call UPDATE_ACTIVE_DT;
		local_sc_info.dtu = aste.dtu;
		local_sc_info.dtm = aste.dtm;
		local_sc_info.records = fixed (aste.records, 9);
		local_sc_info.msl = fixed (aste.msl, 9) * 1024;
		local_sc_info.csl = fixed (aste.csl, 9) * 1024;
		local_sc_info.dnzp = aste.dnzp;
		local_sc_info.damaged = aste.damaged;
		local_sc_info.synchronized = aste.synchronized;
		if aste.dirsw
		then local_sc_info.pf_count = 0;
		else local_sc_info.pf_count = seg_aste.usage;

		local_sc_info.nid = "0"b;
		local_sc_info.ncd = "0"b;
		local_sc_info.vol_dtd = ""b;
		local_sc_info.volid (*) = ""b;

		if aste.dirsw
		then do qt = 0, 1;
			local_sc_info.qcell (qt).quota = aste.quota (qt);
			local_sc_info.qcell (qt).used = aste.used (qt);
			local_sc_info.qcell (qt).terminal_quota_sw = aste.tqsw (qt);
			local_sc_info.qcell (qt).received = 0;
			local_sc_info.qcell (qt).tup = ""b;
			local_sc_info.qcell (qt).trp = 0;
		     end;
	     end;

	call FINISH (code);

	if code = 0
	then Sc_Info = local_sc_info;
	else unspec (Sc_Info) = ""b;

	Code = code;

	return;
%page;
/*  vtoc_attributes$get_quota - called by quota to get the quota account. */

get_quota:
     entry (Uid, Pvid, Vtocx, Qcp, Qtype, Code);

	qtype = Qtype;

	call SETUP (Code);
	if Code ^= 0
	then return;

	need_vtoce = "1"b;
	unspec (local_quota_cell) = ""b;

	call GET_ASTE_VTOCE (code);
	if code = 0
	then do;
		local_quota_cell.quota = aste.quota (qtype);
		local_quota_cell.used = aste.used (qtype);
		local_quota_cell.terminal_quota_sw = aste.tqsw (qtype);
		local_quota_cell.received = vtoce.received (qtype);
		local_quota_cell.tup = vtoce.trp_time (qtype);
		local_quota_cell.trp = vtoce.trp (qtype);
	     end;

	call FINISH (code);

	if code = 0
	then Quota_Cell = local_quota_cell;
	else unspec (Quota_Cell) = ""b;

	Code = code;

	return;
%page;
/*  vtoc_attributes$set_quota - called by quota to meddle with the quota account. 
    This is a moderate crock, as it must know whether the segment is active.
    The reason for this is that the quota cells are protected by the PTL
    and are updated by quota earlier. This just updates the VTOCE.
*/

set_quota:
     entry (Uid, Pvid, Vtocx, Qcp, Qtype, Code);

	qtype = Qtype;
	local_quota_cell = Quota_Cell;

	call SETUP (Code);
	if Code ^= 0
	then return;

	need_vtoce = "1"b;
	update = "1"b;
	add_to_dumper = "1"b;

	call GET_ASTE_VTOCE (code);
	if code = 0
	then do;
		if ^active
		then do;
			aste.quota (qtype) = local_quota_cell.quota;
			aste.used (qtype) = local_quota_cell.used;
		     end;
		vtoce.received (qtype) = local_quota_cell.received;
		vtoce.trp_time (qtype) = local_quota_cell.tup;
		vtoce.trp (qtype) = local_quota_cell.trp;
	     end;

	call FINISH (code);

	Code = code;

	return;
%page;
/*  vtoc_attributes$reloading - called by set$set_for_reloader */

reloading:
     entry (Uid, Pvid, Vtocx, Dtu, Dtm, Mxl, Code);

	dtu = Dtu;
	dtm = Dtm;
	mxl = Mxl;
	mxl_bits = bit (mxl, 9);

	call SETUP (Code);
	if Code ^= 0
	then return;

	update = "1"b;
	add_to_dumper = "1"b;

	call GET_ASTE_VTOCE (code);
	if code = 0
	then do;
		if dtu ^= ""b
		then aste.dtu = dtu;
		if dtm ^= ""b
		then aste.dtm = dtm;
		if (mxl >= 0) & (mxl_bits ^= aste.msl)	/* use FB to preserve the sign bit! */
		then do;
			if active & (mxl_bits < aste.msl)
			then call setfaults (astep, "0"b);
			aste.msl = mxl_bits;
		     end;
	     end;

	call FINISH (code);

	Code = code;

	return;
%page;
/*  vtoc_attributes$set_pc_switches */

set_pc_switches:
     entry (Uid, Pvid, Vtocx, Sws, Msk, Code);

	string (sws) = Sws;
	string (msk) = Msk;

	if msk.synchronized & sws.synchronized
	then if ^sst$dm_enabled
	     then do;
		     Code = error_table_$dm_not_enabled;
		     return;
		end;

	call SETUP (Code);
	if Code ^= 0
	then return;

	update = "1"b;
	add_to_dumper = "1"b;

RETRY_SET:
	call GET_ASTE_VTOCE (code);
	if (code = 0) & active
	then if (msk.synchronized & ^aste.synchronized)
	     then do;
		     call deactivate (astep, code);
		     if code = 0
		     then do;
			     call lock$unlock_ast;
			     ast_is_locked = "0"b;
			     active = "0"b;
			     goto RETRY_SET;
			end;
		end;
	if code = 0
	then do;
		if msk.dnzp
		then aste.dnzp = sws.dnzp;
		if msk.damaged
		then aste.damaged = sws.damaged;
		if msk.synchronized
		then aste.synchronized = sws.synchronized;
	     end;

	call FINISH (code);

	Code = code;

	return;
%page;
/*  vtoc_attributes$set_dump_switches 
     switch values - negative => reset, zero => don't change, positive => set */

set_dump_switches:
     entry (Uid, Pvid, Vtocx, Nid, Ncd, Code);

	nid = Nid;
	ncd = Ncd;

	call SETUP (Code);
	if Code ^= 0
	then return;

	update = "1"b;
	need_vtoce = "1"b;
	add_to_dumper = "1"b;

	call GET_ASTE_VTOCE (code);
	if code = 0
	then do;
		aste.nid = (aste.nid & (nid = 0)) | (nid > 0);
		vtoce.ncd = (vtoce.ncd & (ncd = 0)) | (ncd > 0);
	     end;

	call FINISH (code);

	return;
%page;
/*  vtoc_attributes$set_dump_info */

set_dump_info:
     entry (Uid, Pvid, Vtocx, Dtd, Volid, Code);

	dtd = Dtd;
	volid (*) = Volid (*);

	call SETUP (Code);
	if Code ^= 0
	then return;

	update = "1"b;
	need_vtoce = "1"b;
	add_to_dumper = "1"b;

	call GET_ASTE_VTOCE (code);
	if code = 0
	then do;
		vtoce.dtd = dtd;
		vtoce.volid (*) = volid (*);
	     end;

	call FINISH (code);

	Code = code;

	return;
%page;
/*  vtoc_attributes$get_dump_info  */

get_dump_info:
     entry (Uid, Pvid, Vtocx, Dtd, Volid, Code);

	call SETUP (Code);
	if Code ^= 0
	then return;

	need_vtoce = "1"b;

	call GET_ASTE_VTOCE (code);
	if code = 0
	then do;
		dtd = vtoce.dtd;
		volid (*) = vtoce.volid (*);
	     end;

	call FINISH (code);

	if code = 0
	then do;
		Dtd = dtd;
		Volid (*) = volid (*);
	     end;

	Code = code;

	return;
%page;
/*  vtoc_attributes$correct_qused - called by adjust_qused to make final correction */

correct_qused:
     entry (Uid, Pvid, Vtocx, Sudelta, Dudelta, Code);

	sudelta = Sudelta;
	dudelta = Dudelta;
	code1 = 0;

	call SETUP (Code);
	if Code ^= 0
	then return;

	update = "1"b;
	add_to_dumper = "1"b;

	call GET_ASTE_VTOCE (code);
	if code = 0
	then do;
		if active
		then do;
			if sudelta ^= 0
			then call quotaw$cu (astep, sudelta, "0"b, 2, code1);
			if dudelta ^= 0
			then call quotaw$cu (astep, dudelta, "1"b, 2, code1);
		     end;
		else do;
			aste.used (0) = aste.used (0) + sudelta;
			aste.used (1) = aste.used (1) + dudelta;
		     end;
	     end;

	if code = 0
	then code = code1;

	call FINISH (code);

	Code = code;

	return;
%page;
/*  vtoc_attributes$salv_update - called by the directory salvager to update
    the VTOCE when VTOCE checking. */

salv_update:
     entry (Uid, Pvid, Vtocx, Salv_Updatep, Code);

	local_salv_update_info = Salv_Update_Info;

	call SETUP (Code);
	if Code ^= 0
	then return;

	need_vtoce = local_salv_update_info.set_uid_path | local_salv_update_info.set_primary_name;
	update = "1"b;

	call GET_ASTE_VTOCE (code);
	if code = 0
	then do;
		if local_salv_update_info.set_master_dir
		then aste.master_dir = local_salv_update_info.master_dir;
		if local_salv_update_info.set_primary_name
		then vtoce.primary_name = local_salv_update_info.primary_name;
		if local_salv_update_info.set_uid_path
		then vtoce.uid_path = local_salv_update_info.uid_path;
	     end;

	call FINISH (code);

	Code = code;

	return;
%page;
/*  vtoc_attributes$get_dump_switches  */

get_dump_switches:
     entry (Uid, Pvid, Vtocx, Nid, Ncd, Code);

	nid, ncd = 0;

	call SETUP (Code);
	if Code ^= 0
	then return;

	need_vtoce = "1"b;

	call GET_ASTE_VTOCE (code);
	if code = 0
	then do;
		if aste.nid
		then nid = 1;
		else nid = -1;
		if vtoce.ncd
		then ncd = 1;
		else ncd = -1;
	     end;

	call FINISH (code);

	if code = 0
	then do;
		Nid = nid;
		Ncd = ncd;
	     end;

	Code = code;

	return;


%page;
/*  Internal Procedure to set automatic variables, translate Physical Volume
    Unique ID to PVT Index.
*/

SETUP:
     proc (Code);

dcl	Code		fixed bin (35) parameter;

	Code = 0;
	ast_is_locked = "0"b;
	active = "0"b;
	need_vtoce = "0"b;
	update = "0"b;
	add_to_dumper = "0"b;
	uid = Uid;
	pvid = Pvid;
	vtocx = Vtocx;
	vtocep = addr (local_vtoce);
	pvtx = get_pvtx (pvid, Code);

     end SETUP;
%page;
/*  Internal Procedure to get a pointer to the ASTE and to read the VTOCE
    if necessary.

    On return, astep points to the ASTE (if the segment is active), or to
    a pseudo-ASTE in automatic storage. In the latter case, relevant
    VTOCE fields have been updated into the pseudo-ASTE so that caller
    can work with it, and not be concerned about whether the segment
    is active. Any modifications to the pseudo-ASTE will be reflected into
    the VTOCE in FINISH.

    The AST lock protects against activation or deactivation, and ensures
    that the copy of the VTOCE is the latest one. To avoid doing I/O
    under the AST lock, the following strategy is used:

          call vtoc_man$get_vtoce with the AST unlocked

	lock the AST

	call vtoc_man$get_vtoce again (this will probably not cause
	    an I/O, due to the way vtoc_man works)

    This routine uses/sets the following global flags:

          need_vtoce - will read VTOCE even if segment is active (used)

	ast_is_locked - what it says (set)

	active - ON if segment is active (set)

*/

GET_ASTE_VTOCE:
     proc (Code);

dcl	Code		fixed bin (35) parameter;

dcl	vtoce_read	bit (1) aligned;		/* ON => we have read the VTOCE */


	Code = 0;
	vtoce_read = "0"b;
	unspec (vtoce) = ""b;

	if need_vtoce
	then do;
		call vtoc_man$get_vtoce (""b, pvtx, vtocx, ALL_PARTS, vtocep, Code);
		if Code ^= 0
		then return;
		vtoce_read = "1"b;
	     end;

	call lock$lock_ast;
	ast_is_locked = "1"b;
	astep = search_ast$check (uid, pvid, vtocx, Code);
	if Code ^= 0
	then do;
		call lock$unlock_ast;
		ast_is_locked = "0"b;		/* well, it's true, isn't it? */
		return;
	     end;


	if astep = null () & ^vtoce_read
	then do;
		call lock$unlock_ast;
		ast_is_locked = "0"b;
		call vtoc_man$get_vtoce (""b, pvtx, vtocx, ALL_PARTS, vtocep, Code);
		if Code ^= 0
		then return;
		vtoce_read = "1"b;
		call lock$lock_ast;
		ast_is_locked = "1"b;
		astep = search_ast$check (uid, pvid, vtocx, Code);
		if Code ^= 0
		then do;
			call lock$unlock_ast;
			ast_is_locked = "0"b;
			return;
		     end;
	     end;

	if (astep = null ()) | need_vtoce
	then do;
		call vtoc_man$get_vtoce (""b, pvtx, vtocx, ALL_PARTS, vtocep, Code);
		if Code ^= 0
		then do;
VTOCE_ERROR:
			call lock$unlock_ast;
			ast_is_locked = "0"b;
			return;
		     end;
		if vtoce.uid ^= uid
		then do;
			Code = error_table_$vtoce_connection_fail;
			goto VTOCE_ERROR;
		     end;
	     end;

	if astep ^= null ()
	then active = "1"b;
	else do;
		astep = addr (local_aste);
		call VTOCE_TO_ASTE;
	     end;


     end GET_ASTE_VTOCE;
%page;
/*  Internal Procedure to clean up by unlocking and updating whatever
    is necessary.

    This routine uses the following global flags:

         ast_is_locked

         active

         update

         need_vtoce

*/

FINISH:
     proc (Code);

dcl	Code		fixed bin (35) parameter;


dcl	code		fixed bin (35);
dcl	code1		fixed bin (35);


	code, code1 = 0;

	if ^active & update & (astep ^= null ())
	then call ASTE_TO_VTOCE;

	if add_to_dumper & (Code = 0)
	then if ^vtoce.nid & ^vtoce.per_process & ^vtoce.deciduous & ^vtoce.per_bootload
	     then call dbm_man$set_incr (pvtx, vtocx, code);

	if update & (Code = 0)
	then if ^active | need_vtoce
	     then call vtoc_man$put_vtoce (""b, pvtx, vtocx, ALL_PARTS, vtocep, code1);

	if ast_is_locked
	then call lock$unlock_ast;
	ast_is_locked = "0"b;

	if Code = 0
	then if code ^= 0
	     then Code = code;
	     else Code = code1;

     end FINISH;
%page;
/*  Internal Procedure to update a pseudo-ASTE into a VTOCE */

ASTE_TO_VTOCE:
     proc;

dcl	i		fixed bin;


	vtoce.msl = aste.msl;
	vtoce.csl = aste.csl;
	vtoce.dtu = aste.dtu;
	vtoce.dtm = aste.dtm;
	vtoce.nqsw = aste.nqsw;
	vtoce.deciduous = aste.hc_sdw;
	vtoce.damaged = aste.damaged;
	vtoce.synchronized = aste.synchronized;
	vtoce.dnzp = aste.dnzp;
	vtoce.nid = aste.nid;
	vtoce.dirsw = aste.dirsw;

	if aste.dirsw
	then do;
		vtoce.master_dir = aste.master_dir;
		do i = 0, 1;
		     vtoce.used (i) = aste.used (i);
		     vtoce.quota (i) = aste.quota (i);
		end;
	     end;

     end ASTE_TO_VTOCE;
%page;
/*  Internal Procedure to fill in the fields of a pseudo-ASTE from a VTOCE */

VTOCE_TO_ASTE:
     proc;

dcl	i		fixed bin;


	unspec (aste) = ""b;

	aste.uid = vtoce.uid;
	aste.msl = vtoce.msl;
	aste.csl = vtoce.csl;
	aste.records = vtoce.records;
	aste.dtu = vtoce.dtu;
	aste.dtm = vtoce.dtm;
	aste.nqsw = vtoce.nqsw;
	aste.hc_sdw = vtoce.deciduous;
	aste.per_process = vtoce.per_process;
	aste.damaged = vtoce.damaged;
	aste.synchronized = vtoce.synchronized;
	aste.dnzp = vtoce.dnzp;
	aste.nid = vtoce.nid;
	aste.dirsw = vtoce.dirsw;
	aste.pvtx = pvtx;
	aste.vtocx = vtocx;

	if aste.dirsw
	then do;
		aste.master_dir = vtoce.master_dir;
		do i = 0, 1;
		     aste.quota (i) = vtoce.quota (i);
		     aste.used (i) = vtoce.used (i);
		end;
		aste.tqsw (0) = (vtoce.received (0) ^= 0) | aste.master_dir;
		aste.tqsw (1) = (vtoce.received (1) ^= 0);
	     end;
	else seg_aste.usage = seg_vtoce.usage;

     end VTOCE_TO_ASTE;
%page;
/*  Internal Procedure to Update date-time-used and date-time modified. */

UPDATE_ACTIVE_DT:
     proc;

	curtime = clock ();

	if (aste.np ^= ""b)
	then call pc$update_incore_fms (astep);		/* Update modification if noted */
	if aste.fms
	then do;
		add_to_dumper = "1"b;
		aste.fms = "0"b;
	     end;
	if ^aste.gtus
	then if ((aste.np ^= ""b) | (aste.infp ^= ""b))	/* pages in, or inferior ASTEs */
	     then aste.dtu = bit (fixed (curtime, 52), 52);
						/* it's in-use */

     end UPDATE_ACTIVE_DT;


/* format: off */
%page; %include aste; 
%page; %include quota_cell;
%page; %include sc_info;
%page; %include vtoce; 
%page; %include vtoce_pc_sws;
%page; %include vtoce_salv_update;

     end vtoc_attributes$set_dates;
