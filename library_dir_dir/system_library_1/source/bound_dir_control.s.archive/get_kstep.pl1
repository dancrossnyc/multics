/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


get_kstep:
     proc (a_segno, a_kstep, a_code);

/*

   Written March 1975 by R. Bratt

   get_kstep provides generally useful kste validation functions

   ---> get_kstep checks to see that the segment number is connected to a segment
   USAGE: call get_kstep (segno,kstep,code);

   ---> get_kstep$dir checks to see that the segment number is connected to a non-phoney directory
   USAGE: call get_kstep$dir (segno,kstep,code);



   segno fixed bin (17) - - - segment number
   kstep ptr - - - pointer to the kstep
   code fixed bin(35) - - - error code (output)

   */


dcl  a_kstep ptr,
     dir bit (1) aligned init ("1"b),
     a_code fixed bin (35),
    (a_segno, segno) fixed bin (17);

dcl (error_table_$invalidsegno, error_table_$notadir) ext fixed bin (35);

	%include kst;

	dir = "0"b;

dir:	entry (a_segno, a_kstep, a_code);

	segno = a_segno;
	a_kstep = null();
	a_code = 0;
	kstp = pds$kstp;
	if segno < kst.lowseg | segno > kst.highest_used_segno
	then do;
err:	     a_code = error_table_$invalidsegno;
	     return;
	end;
	kstep = addr (kst.kst_entry (segno));
	if unspec (kste.entryp) = "0"b then go to err;
	if dir
	then if ^kste.dirsw | kste.uid = "0"b
	     then do;
		a_code = error_table_$notadir;
		return;
	     end;
	a_kstep = kstep;
	return;

     end get_kstep;
