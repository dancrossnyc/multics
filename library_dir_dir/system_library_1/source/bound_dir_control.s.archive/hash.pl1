/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


hash: proc;

/* Modified 07/77 by THVV for bad_dir_ check */
/* Mod by S. E. Barr 4/77 to add a count to hash chain loop to prevent looping indefinitely */
/* Mod by S.E. Barr 9/76 to use hash threads and variable hash table sizes */
/* Mod by B. Greenberg 4/28/75 to remove in-directory hashing meters, for NSS */
/* Modified by E. Stone 8/73 to convert to version 2 and to meter unsuccessful searches as well as successful ones */
/*
   NAME:	hash

   This does all the necessary manipulations on the directory hash table.

   ENTRY:	hash$in

   This entry is called to add an entry to the directory hash table.
   It assumes that the name has already been allocated in the directory.

   USAGE:	call hash$in (dp, arg_name_entry_ptr, code);

   1) dp (ptr)				directory pointer (Input)
   2) arg_name_entry_ptr (ptr)		pointer to the name entry to be hashed (Input)
   3) code (fixed bin)			error code (Output)

   ENTRY:	hash$out

   This entry is called to remove an entry from the directory hash table.

   USAGE:	call hash$out (dp, arg_name_ptr, arg_name_entry_ptr, code);

   1) as above
   2) arg_name_ptr (ptr)			pointer to name to be hashed (Input)
   3) arg_name_entry_ptr (ptr)		pointer to the name entry which was hashed (Output)
   4) as above

   ENTRY:	hash$search

   This entry is called to search the directory hash table for a given name.

   USAGE:	call hash$search (dp, arg_name_ptr, arg_entry_ptr, code);

   1) as above
   2) arg_name_ptr (ptr)			pointer to name to be hashed (Input)
   3) arg_entry_ptr (ptr)			pointer to entry to which the name belongs (Output)
   4) as above

   */


/* arguments */

dcl  arg_name_ptr ptr;				/* pointer to character string with name */
dcl  arg_name_entry_ptr ptr;				/* pointer to name structure */
dcl  arg_entry_ptr ptr;				/* pointer to entry */
dcl  code fixed bin (35);				/* standard Multics error code */

/* automatic */

dcl  name_ptr ptr;					/* ptr to charcter string with name */
dcl  p ptr;					/* ptr to name structure */
dcl  cur_index fixed bin;				/* hash index for this name */
dcl  cur_offset bit (18) unal;			/* offset of current  entry name structure */
dcl  prev_offset bit (18) unal;			/* offset of previous entry name structure */
dcl  found bit (1) unal;				/* ON if name is in hash table */
dcl  names_seen fixed bin;				/* names_seen of names on hash chain */


dcl  name char (32) based (name_ptr);

dcl (error_table_$argerr, error_table_$noentry,
     error_table_$hashtbl_error) ext fixed bin (35);
dcl  active_hardcore_data$num_hash_table_sizes ext fixed bin;
dcl  active_hardcore_data$hash_table_sizes (1) ext fixed bin;
dcl  fs_alloc$free entry (ptr, fixed bin, ptr);
dcl  allocate_dir_ht_ entry (ptr, fixed bin, fixed bin (35));
dcl  hash_index_ entry (ptr, fixed bin, fixed bin, fixed bin) returns (fixed bin);
dcl (addr, index, null, ptr, rel, unspec) builtin;
dcl  bad_dir_ condition;


% include dir_header;
% include dir_ht;
/*  */
%include dir_entry;
%include dir_link;
% include dir_name;
% include fs_types;

/* This entry adds a name to the directory hash table.  If the hash location is full, the new name is threaded onto
   the front of the list for this hash index.  If the name is already in the list, nothing is done and a 0 code
   is returned.
*/

in:	entry (dp, arg_name_entry_ptr, code);

	if dir.rehashing then signal bad_dir_;

	if dir.htused >= dir.htsize then do;
	     call get_larger_hash_table;
	     if code ^= 0 then return;
	end;
	call add_name (arg_name_entry_ptr);

	return;

/* This entry removes a name from the directory hash table.
*/
out:	entry (dp, arg_name_ptr, arg_name_entry_ptr, code);

	if dir.rehashing then signal bad_dir_;

	name_ptr = arg_name_ptr;
	call hash_entry;

	if found then do;
	     arg_name_entry_ptr = p;
	     if prev_offset
	     then ptr (dp, prev_offset) -> names.hash_thread = p -> names.hash_thread;
	     else hash_table.name_rp (cur_index) = p -> names.hash_thread;
	     dir.htused = dir.htused - 1;
	end;
	else if code = 0 then code = error_table_$noentry;

	return;

/* This entry is given a pointer to the name of an entry and returns a pointer to that entry.
*/
search:	entry (dp, arg_name_ptr, arg_entry_ptr, code);

	if dir.rehashing then signal bad_dir_;

	name_ptr = arg_name_ptr;
	call hash_entry;

	if found then arg_entry_ptr = ptr (dp, p -> names.entry_rp);
	else do;
	     if code = 0 then code = error_table_$noentry;
	     arg_entry_ptr = null;
	end;

	return;

/* The hash table values are relative pointers to name entries.  If more than one entry hashes to the same location,
   the entries are chained together using the names.hash_thread location. A value of "0"b indicates an empty
   hash table location or an end of a hash chain.
*/

hash_entry: proc;

dcl  xp ptr;

	     found = "0"b;
	     code = 0;

	     htp = ptr (dp, dir.hash_table_rp);
	     cur_index = hash_index_ (name_ptr, 32, 0, (dir.htsize));
	     prev_offset = "0"b;

	     names_seen = 0;
	     do cur_offset = hash_table.name_rp (cur_index)
		     repeat p -> names.hash_thread
		     while (cur_offset);
		names_seen = names_seen + 1;
		if names_seen > dir.htused then signal bad_dir_;

		p = ptr (dp, cur_offset);
		if p -> names.type ^= NAME_TYPE then signal bad_dir_;
		xp = ptr (dp, p -> names.entry_rp);
		if p -> names.owner ^= xp -> entry.uid then signal bad_dir_;
		if name = p -> names.name then do;
		     if cur_index = p -> names.ht_index then found = "1"b;
		     else signal bad_dir_;
		     return;
		end;
		prev_offset = cur_offset;
	     end;

	     return;

	end hash_entry;

/*  */
/* This procedure adds one name to the hash table.  It is not considered an error if the name is already in the table.
   The new name entry is put at the head of the chain of names that hash to the current slot.
*/
add_name:	proc (nep);

dcl  nep ptr;					/* pointer to names structure */

	     name_ptr = addr (nep -> names.name);
	     call check_name;
	     if code ^= 0 then return;
	     call hash_entry;
	     if code = 0 & ^found then do;
		nep -> names.hash_thread = hash_table.name_rp (cur_index);
		hash_table.name_rp (cur_index) = rel (nep);

		nep -> names.ht_index = cur_index;
		dir.htused = dir.htused + 1;
	     end;

	     return;

	end add_name;



/* Entry name to be hashed may consist of any ascii character except ">" and must have at least one non-blank character */

check_name: proc;

dcl 1 check_for_ascii aligned static options (constant),	/* Overlay for entry name to check if name consists */
    2 part1 bit (9 * 16) init ((16)"110000000"b),		/* of ascii characters */
    2 part2 bit (9 * 16) init ((16)"110000000"b);		/* String must be so declared due to limits of compiler */

	     code = 0;
	     if (unspec (name) & unspec (check_for_ascii)) = "0"b
	     then if name ^= ""
		then if index (name, ">") = 0 then return;

	     code = error_table_$argerr;

	     return;

	end check_name;


/* This procedure allocates a new hash table with the next size.  It follows the entry chain and rehashes
   all names.  If any errors occur, the on line salvager is called.
*/
get_larger_hash_table: proc;

dcl (nentries, nnames, nentries_expected) fixed bin;
dcl  nep ptr;					/* ptr to names structure */
dcl  save_htp ptr;					/* ptr to old hash table block */

/*  */
/* Find next hash table and allocate the new hash table.  If the new one can't be allocated, use old one. */

	     code = 0;
	     if dir.htsize >= active_hardcore_data$hash_table_sizes (active_hardcore_data$num_hash_table_sizes) then return;

	     save_htp = ptr (dp, dir.hash_table_rp);
	     call allocate_dir_ht_ (dp, dir.htused+1, code);
	     if code ^= 0 then do;
		code = 0;
		return;
	     end;
	     dir.rehashing = "1"b;			/* set inconsistent bit in case of crash while rehashing */
	     call fs_alloc$free (ptr (dp, dir.arearp), (save_htp -> hash_table.size), save_htp);
	     htp = ptr (dp, dir.hash_table_rp);

/* Follow the entry chain and rehash all names on each entry */

	     dir.htused = 0;
	     nentries = 0;
	     nentries_expected = dir.seg_count + dir.dir_count + dir.lcount;
	     do ep = ptr (dp, dir.entryfrp)
		     repeat ptr (dp, ep -> entry.efrp)
		     while (rel (ep));

		nentries = nentries + 1;
		if nentries > nentries_expected
		then signal bad_dir_;
		if entry.bs then
		     if entry.owner ^= dir.uid
		     | (entry.type ^= SEG_TYPE & entry.type ^= DIR_TYPE) then signal bad_dir_;
		     else;
		else if link.type ^= LINK_TYPE | link.owner ^= dir.uid then signal bad_dir_;
		nnames = 0;
		do nep = ptr (dp, entry.name_frp) repeat ptr (dp, nep -> names.fp) while (rel (nep));
		     nnames = nnames + 1;
		     if nnames > entry.nnames
		     | nep -> names.type ^= NAME_TYPE
		     | nep -> names.owner ^= entry.uid
		     | nep -> names.entry_rp ^= rel (ep)
		     then signal bad_dir_;
		     call add_name (nep);
		     if code ^= 0 then signal bad_dir_;
		end;
	     end;
	     dir.rehashing = "0"b;

	     return;
	end get_larger_hash_table;

     end hash;
