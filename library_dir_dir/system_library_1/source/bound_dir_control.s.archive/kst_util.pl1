/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */
/* format: style4 */
/* 82-12-13 hewn from raw bits by E. N. Kittlitz */
/* 84-11-05 renamed terminate_ to makeunknown_ by Keith Loepere */

kst_util: proc;

dcl  a_segno fixed bin (17);				/* first segment number in range/allocated (input/output) */
dcl  a_count fixed bin (17);				/* number of segments required */
dcl  a_code fixed bin (35);				/* status code */
dcl  a_kstep ptr;					/* pointer to kste */
dcl  a_new_sw bit (2) aligned;			/* set_256K_switch input */
dcl  a_old_sw bit (2) aligned;			/* set_256K_switch output */

dcl  code fixed bin (35);
dcl  collected fixed bin;				/* count of KSTEs grabbed during a GC */
dcl  count fixed bin;				/* copy of a_count */
dcl  first_segno fixed bin;				/* first segno assigned */
dcl  free_range_trip fixed bin;			/* scanning segnos or actually freeing them */
dcl  headp ptr;					/* pointer to KSTE list head */
dcl  last_segno fixed bin;				/* last segno assigned */
dcl  level fixed bin (3);
dcl  new_sw bit (2) aligned;
dcl  rel_kstep bit (18) aligned;
dcl  run fixed bin;
dcl  segno fixed bin;				/* temporary index */
dcl  tries fixed bin;

dcl  head bit (18) unaligned based (headp);		/* head of KSTE list */

dcl  level$get entry returns (fixed bin (3));
dcl  makeunknown_ entry (fixed bin, bit (36) aligned, bit (1) aligned, fixed bin (35));
dcl  setfaults$if_256K entry (fixed bin);

dcl  error_table_$action_not_performed fixed bin (35) ext static;
dcl  error_table_$bad_arg fixed bin (35) ext static;
dcl  error_table_$invalidsegno fixed bin (35) ext static;
dcl  error_table_$nrmkst fixed bin (35) ext static;
dcl  error_table_$segno_in_use fixed bin (35) ext static;

dcl  pds$initial_ring fixed bin (3) static external;

dcl  N_STACKS fixed bin init (8) static options (constant);

dcl  (addr, baseno, binary, copy, dim, fixed, index, min, mod, null, ptr, rel, reverse, substr, unspec) builtin;

	return;					/* there is no kst_util */
%page;
/* free_range: put all the specified segnos back on the free list. They must ALL be reserved segnos */

free_range: entry (a_segno, a_count, a_code);

	kstp = pds$kstp;
	first_segno = a_segno;
	count = a_count;
	if count < 1 then
	     call abort (error_table_$bad_arg);
	last_segno = first_segno + count - 1;
	level = level$get ();
	if first_segno - kst.lowseg < level |		/* lower ring stack or hardcore */
	     last_segno > kst.highest_used_segno then	/* too big */
	     call abort (error_table_$invalidsegno);
	do free_range_trip = 1 to 2;
	     do segno = first_segno to last_segno;	/* check the whole bunch */
		kstep = addr (kst.kst_entry (segno));
		if kste.fp ^= "777777"b3 |		/* this should never happen on second trip, but let's be sure */
		     unspec (kste.entryp) ^= ""b then
		     call abort (error_table_$action_not_performed);
		if free_range_trip = 2 then do;
		     kste.fp = kst.free_list;
		     kst.free_list = rel (kstep);
		end;
	     end;
	end;
	a_code = 0;
	return;

%page;
/* garbage_collect: tidy up process address space by terminating directory segments
   that have no known inferiors, or segments not known in any ring */

garbage_collect: entry (a_code);

	kstp = pds$kstp;
	collected = 0;
	do segno = kst.lowseg + N_STACKS to kst.highest_used_segno;
	     call try_to_remove (segno, segno);		/* out, damn' spot */
	end;
	kst.garbage_collections = kst.garbage_collections + 1;
	if collected > 0 then do;
	     kst.entries_collected = kst.entries_collected + collected;
	     a_code = 0;
	end;
	else a_code = error_table_$nrmkst;
	return;
%page;
/* get_range: reserve from 1 to the largest conceivable number of consecutive
   segment numbers. */

get_range: entry (a_count, a_segno, a_code);

	kstp = pds$kstp;				/* setup */
	count = a_count;				/* copy argument */
	if count < 1 then				/* tsk tsk */
	     call abort (error_table_$bad_arg);
	code, run = 0;
	do tries = 1 to 2 while (code = 0 & run < count); /* up to two tries */
	     first_segno = -1;
	     do segno = kst.lowseg + N_STACKS to kst.highest_used_segno while (run < count);
		kstep = addr (kst.kst_entry (segno));
		if unspec (kste.entryp) ^= ""b |
		     kste.fp = "777777"b3 then do;	/* forget it */
		     first_segno = -1;
		     run = 0;
		end;
		else if first_segno < 0 then do;	/* starting a group */
		     first_segno = segno;
		     run = 1;
		end;
		else run = run + 1;			/* got a streak going */
	     end;					/* perusal of kst */
	     if first_segno < 0 then			/* try for space at end */
		first_segno = kst.highest_used_segno + 1;
	     last_segno = first_segno + count - 1;	/* just how far would we go? */
	     if run < count & tries = 1 then		/* don't have a free range yet */
		if last_segno <= kst.highseg then	/* we can fit at the top */
		     run = count;			/* blast out of loop */
		else call garbage_collect (code);	/* desperation measures */
	end;
	if last_segno > kst.highseg then		/* no space */
	     call abort (error_table_$nrmkst);
	if last_segno > kst.highest_used_segno then	/* expand! */
	     call initialize_region (last_segno);

	do segno = first_segno to last_segno;		/* now get the segment numbers off the free list */
	     kstep = addr (kst.kst_entry (segno));
	     call unthread_kste (kstep);		/* off the free list */
	     kste.fp = "777777"b3;			/* and now it's reserved */
	end;

	a_segno = first_segno;			/* why not tell the fella */
	a_code = 0;

RETURN:	return;
%page;
/* initialize_region: expand kst up through segment a_segno */

initialize_region: entry (a_segno);
	kstp = pds$kstp;
	last_segno = a_segno;
	do segno = kst.highest_used_segno + 1 to last_segno; /* initialize any new kstes and thread on free list */
	     kstep = addr (kst.kst_entry (segno));
	     kste.segno = segno;
	     unspec (kste.entryp) = "0"b;
	     kste.fp = kst.free_list;
	     kst.free_list = rel (kstep);
	     kst.highest_used_segno = segno;
	end;
	return;

%page;
/* set_256K_switch controls the use of 256K segments. if the KST switch is "1"b, you can
   talk to them. Otherwise, the limit is sys_info$max_seg_size, buster. */

set_256K_switch: entry (a_new_sw, a_old_sw, a_code);

	kstp = pds$kstp;
	new_sw = a_new_sw;
	a_old_sw = "1"b || kst.allow_256K_connect;	/* indicate old value valid */
	if substr (new_sw, 1, 1) ^= "1"b then		/* first bit not set, do nothing */
	     call abort (error_table_$action_not_performed);
	level = level$get ();
	if level > pds$initial_ring then
	     call abort (error_table_$action_not_performed);
	if substr (new_sw, 2, 1) = "1"b then
	     kst.allow_256K_connect = "1"b;
	else if kst.allow_256K_connect then do;		/* must disconnect existing 256K items */
	     kst.allow_256K_connect = "0"b;
	     do segno = kst.lowseg to kst.highest_used_segno;
		call setfaults$if_256K (segno);
	     end;
	end;
	a_code = 0;
	return;
%page;
/* Unthread_kste removes a  kste  from  the  list  on   which   it   is  threaded.
   If kste.entryp = 0 then the kste is assumed to be threaded onto the free list.
   Otherwise, the kste is assumed to be threaded onto a hash class list. */

unthread_kste: entry (a_kstep);
	kstp = pds$kstp;
	if a_kstep -> kste.fp = "777777"b3 then
	     return;
	if unspec (a_kstep -> kste.entryp) = "0"b then
	     headp = addr (kst.free_list);
	else headp = addr (kst.uid_hash_bucket (mod (fixed (a_kstep -> kste.uid), dim (kst.uid_hash_bucket, 1))));

	rel_kstep = rel (a_kstep);
	if head = rel_kstep
	then head = a_kstep -> kste.fp;
	else do kstep = ptr (a_kstep, head) repeat (ptr (kstep, kste.fp)) while (rel (kstep) ^= "0"b);
	     if kste.fp = rel_kstep then do;
		kste.fp = a_kstep -> kste.fp;
		return;
	     end;
	end;
	return;
%page;
/* INTERNAL PROCEDURES */

abort: proc (abort_code);				/* the prefered punter */
dcl  abort_code fixed bin (35);

	a_code = abort_code;
	go to RETURN;
     end abort;


try_to_remove: proc (rsegno, tsegno);
dcl  rsegno fixed bin;				/* segno to attempt to remove */
dcl  tsegno fixed bin;				/* highest segno caller has attemted to remove */

dcl  code fixed bin (35);
dcl  psegno fixed bin;
dcl  entryp ptr;
dcl  lkstep ptr;
dcl  1 lkste aligned like kste based (lkstep);

	lkstep = addr (kst.kst_entry (rsegno));
	if unspec (lkste.usage_count) ^= ""b then return; /* known in some ring */
	if unspec (lkste.entryp) = ""b then return;
	entryp = lkste.entryp;
	call makeunknown_ (rsegno, "0"b, ("0"b), code);
	if code ^= 0 then return;
	collected = collected + 1;			/* count it */
	if entryp ^= null then do;
	     psegno = binary (baseno (entryp));
	     if psegno < tsegno then			/* caller has already 'seen' our parent, so we must attack it */
		call try_to_remove (psegno, tsegno);
	end;
	return;
     end try_to_remove;

%page;
%include aste;
%page;
%include kst;


     end kst_util;
