/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


	/*


			vtoc_interrupt (core, code)	




              The  "vtoc_interrupt"  procedure  is called upon completion of any
          64-word I/O operation. Its input arguments are the absolute address of
          the 64-word buffer involved in the operation  and  a  code  indicating
          whether or not the operation was successful.

          If  the  operation was successful, the input argument code is zero. In
          this case the procedure aknowledges the successful I/O termination  by
          turning  the  out  of  service  switch  OFF  in  the  buffer descripor
          associated with the operation. In  addition,  it  notifies  the  event
          associated  with  this  particular buffer.  
          This  notification  takes place only if at least one process is waiting
          for the event.

          All these actions are performed without any  lock  and  are  therefore
          completely asynchronous with the execution of the vtoc_man procedures.

          If  the  operation was not successful, the input argument is non zero.
	The operation is posted with an error flag in the buffer control word.
	This causes read calls to return with an error,  freeing   the buffer,
	and write  calls to keep the  buffer 'hot', awaiting  later successful
	write calls or shutdown to requeue the I/O.


	Modified by :

	06/20/75	Andre Bensoussan.
	06/02/76  Bernard Greenberg for 'hot' buffers (non-fatal write errors)
	07/08/82 by J. Bongiovanni for new vtoc buffer strategy

	*/

vtoc_interrupt : procedure (core, code);


	dcl core		fixed bin(24);
	dcl code		fixed bin(35);

	dcl bufx		fixed bin;
	dcl p99		pic "99";
	dcl wait_event	bit (36) aligned;

	dcl pxss$notify	entry (bit (36) aligned);
	dcl disk_emergency  entry (fixed bin, bit (36) aligned);
	dcl syserr	entry options (variable);

	/*	% include	vtoc_buffer	see at the end	*/



          vtoc_buffer_segp = addr (vtoc_buffer_seg$);
	vtoc_buf_desc_arrayp = ptr (vtoc_buffer_segp, vtoc_buffer.buf_desc_offset);
	vtoc_buf_arrayp = ptr (vtoc_buffer_segp, vtoc_buffer.buf_offset);

	bufx = divide (core - vtoc_buffer.abs_addr - bin (rel (vtoc_buf_arrayp)), size (vtoce_buffer), 17)
	     + 1;
	if bufx < 1 | bufx > vtoc_buffer.n_bufs
	     then call syserr (CRASH, "vtoc_interrupt: Bad core address");

	vtoc_buf_descp = addr (vtoc_buf_desc_array (bufx));
	vtoc_bufp = addr (vtoce_buffer_array (bufx));
	
	if ^vtoc_buf_desc.os
	     then call syserr (CRASH, "vtoc_interrupt: Buffer not os at interrupt");

	if code ^= 0 then do;		/* An error */
	   if vtoc_buf_desc.write_sw then do;
	        pvt_arrayp = addr (pvt$array);
	        pvtep = addr (pvt_array (vtoc_buf_desc.pvtx));
	        call syserr (JUST_LOG, "vtoc_interrupt: Write error on ^a_^a vtocx ^o",
		   pvte.devname, convert (p99, pvte.logical_area_number), vtoc_buf_desc.vtocx);
	   end;
	   vtoc_buf_desc.err = "1"b;
	   call disk_emergency ((vtoc_buf_desc.pvtx), unspec (code));
	end;

	vtoc_buf_desc.os = "0"b;

	if vtoc_buf_desc.notify_sw then do;
	     wait_event = bit (bin (vtoc_buffer.wait_event_constant + vtoc_buf_desc.wait_index, 36), 36);
	     call pxss$notify (wait_event);
	end;

	return;

%page;
%include pvte;
%page;
%include syserr_constants;
%page;
%include vtoc_buffer;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   vtoc_interrupt: bad core address

   S: $crash

   T: $run

   M: The disk dim reported a main memory address to the
   VTOC manager which was not in the VTOC buffer segment,
   or was not designating a legal buffer boundary.
   $err

   A: $recover

   Message:
   vtoc_interrupt: Buffer not os at interrupt

   S: $crash

   T: $run

   M: An I/O completion was received for a VTOC buffer which was
   apparently not undergoing I/O.
   $err

   A: $recover

   Message:
   vtoc_interrupt: Write error on dskX_NN vtocx XXXXXX

   S: $log

   T: $run

   M: A bad I/O status was received by the VTOC manager for a write operation.
   The unwritten vtoce-part will remain in main memory until the next attempt is
   made to write it out, or demount or shutdown time.  Too many of these can
   cause the system to crash.

   A: $ignore

   END MESSAGE DOCUMENTATION */

end vtoc_interrupt;
