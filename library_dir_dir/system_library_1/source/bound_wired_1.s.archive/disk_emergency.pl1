/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(88-02-23,Farley), approve(88-02-23,MCR7759),
     audit(88-02-24,Fawcett), install(88-03-01,MR12.2-1029):
     Corrected main entry to copy a_errflags to erflagbuf.
                                                   END HISTORY COMMENTS */


disk_emergency: proc (a_pvtx, a_errflags);

/* Procedure in wired world to mark disks as inoperative
   at appropriate times.

   Bernard Greenberg  02/27/77  

   Modified March 1982 by J. Bongiovanni for new PVTE format
*/

dcl  a_pvtx fixed bin;
dcl  a_errflags bit (36) aligned;

dcl  addr builtin;
dcl  erflagbuf bit (36) aligned;
dcl  pvtx fixed bin;
dcl  tc_data$system_shutdown fixed bin (35) ext;
dcl  pvt$n_entries fixed bin ext;
dcl  syserr entry options (variable);
dcl (pmut$wire_and_mask, pmut$unwire_unmask) entry (fixed bin (71), ptr);
dcl  page$time_out entry;
dcl  disk_control$test_drive entry (fixed bin);

dcl  ptwp ptr;
dcl  oldmask fixed bin (71);
dcl  p99 pic "99";
dcl  masked bit (1) init ("0"b);

%include pvte;
%include device_error;



          pvt_arrayp = addr (pvt$array);
	pvtx = a_pvtx;
	pvtep = addr (pvt_array (pvtx));
	erflagbuf = a_errflags;
	erfp = addr (erflagbuf);

	if tc_data$system_shutdown = 0 then return;

	if ^pvte.device_inoperative then call mark;
	return;


test_all_drives_masked: entry;

	masked = "1"b;


test_all_drives: entry;				/* does like it says */
	pvt_arrayp = addr (pvt$array);
	erfp = addr (erflagbuf);
	errflags.device_inoperative = "1"b;


	if ^masked then call pmut$wire_and_mask (oldmask, ptwp);


	do pvtx = 1 to pvt$n_entries;
	     pvtep = addr (pvt_array (pvtx));
	     if (pvte.used | pvte.permanent) & pvte.storage_system
		then do;
		pvte.device_inoperative = "0"b;
		pvte.testing = "1"b;
		call disk_control$test_drive (pvtx);
		do while (pvte.testing);
		     call page$time_out;
		end;
		if pvte.device_inoperative then call mark;
	     end;
	end;

	if ^masked then call pmut$unwire_unmask (oldmask, ptwp);
	return;


mark:	proc;					/* Perform the actual marking */

	     if errflags.device_inoperative then do;
		pvte.device_inoperative = "1"b;
		p99 = pvte.logical_area_number;
		call syserr (3, "disk_emergency: ^a_^a inoperative: shutdown of ^a_^a suspended.",
		     pvte.devname, p99, pvte.devname, p99);
	     end;
	     return;
	end mark;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   disk_emergency: DSKX_NN inoperative; shutdown of DSKX_NN suspended

   S: $beep

   T: Emergency shutdown.

   M: During emergency shutdown, DSKX_NN was found inoperative.
   Data in main memory or on the paging device
   which need to be flushed
   to the pack on DSKX_NN cannot be written out.
   The data remain where they were and ESD may be tried again.

   A: If the drive
   can be made ready, make it ready and try ESD again.
   Do NOT move packs before trying ESD,
   unless address plugs are changed so that the same pack
   appears to have the same address.
   (If this action is performed, the MPC must be halted
   and restarted with a reset and branch.)
   If the pack is not successfully shut down,
   the system will volume salvage it
   when it is next brought up,
   and data from main memory which belongs on the pack will be lost.

   END MESSAGE DOCUMENTATION */

     end;
