/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */
/* SCR_UTIL - Procedure to Manipulate System Controller Registers and Data.
   coded 2/1/76 by Noel I. Morris
   modified 5/11/78 by J. A. Bush for processor testing
   modified 2/5/79 by B. Greenberg for port expanders.
   modified May 1981 by J. Bongiovanni to set anti-hog switches,
        validate sscr
*/


/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


scr_util$read_cfg: proc (port);

dcl  port fixed bin (3);				/* controller port number on active modules */

dcl  mr_data fixed bin (71),				/* data from RSCR-MR */
     i fixed bin,					/* iteration variable */
     ctag fixed bin (3),				/* system controller tag */
     bitno fixed bin,				/* mask bit offset */
     iscu fixed bin (5),				/* ISOLTS SCU tag */
     icpu fixed bin (5),				/* ISOLTS CPU tag */
     mcpu fixed bin (5),				/* ISOLTS mask cpu */
    (maska, maskb) bit (9),				/* temporary mask reg storage */
    (store_a_size, store_b_size) fixed bin (17),		/* size of stores A & B */
    scr_cfg2_temp fixed bin (71) aligned,		/* temp rscr storage			*/
    set_cfg_try_count fixed bin,			/* number times tried sscr			*/
    set_cfg_ok bit (1) aligned,
    mask_a_val char (3),
    mask_b_val char (3),
    cycle_priority_bits (7) bit (1),
    port_enable_bits (8) bit (1),
    nea_bits (7) bit (1);

	         
	         

dcl 1 cdata aligned like scs$controller_data based (cdp),	/* single element of scs$controller data */
     cdp ptr,					/* pointer to the above */
    1 pdata aligned like scs$processor_data based (pdp),	/* single element of scs$processor_data */
     pdp ptr;					/* pointer to the above */

dcl  masks (3) bit (72) aligned based (mkp),		/* array of interrupt masks */
     mkp ptr;					/* pointer to the above */

dcl  scr_cfg2_temp_overlay bit (72) aligned defined (scr_cfg2_temp);
	         

dcl  SCR_CFG2_PROGRAM_MASK bit (72) aligned int static options (constant)
        init ("777774037777777000077417"b3);		/* program settable bits in config register	*/
dcl  SET_CFG_TRY_LIMIT fixed bin int static options (constant)
        init (10);					/* number sscr attempts before punting		*/
dcl  LETTERS char (8) int static options (constant) init ("ABCDEFGH");

dcl  privileged_mode_ut$cioc entry (ptr),
     privileged_mode_ut$rscr entry (fixed bin (3), fixed bin (6), fixed bin (71)),
     privileged_mode_ut$sscr entry (fixed bin (3), fixed bin (6), fixed bin (71)),
     privileged_mode_ut$smcm entry (fixed bin (3), bit (72) aligned),
     syserr entry options (variable);
	         

dcl (addr, bin, bit, convert, index, mod, string, substr, unspec) builtin;



% include scs;


% include scr;



	cdp = addr (scs$controller_data (port));	/* Get pointer to appropriate element of array. */

	call privileged_mode_ut$rscr (port, SC_MR, mr_data); /* Read the controller mode register. */
	scrp = addr (mr_data);			/* Set pointer to data read. */
	cdata.type = scr_mr.identification;		/* Extract the controller ID code. */

	call privileged_mode_ut$rscr (port, SC_CFG, scs$cfg_data (port));
	scrp = addr (scs$cfg_data (port));		/* Read configuration data from controller. */

	if cdata.type >= "0010"b then do;		/* If 4MW SCU ... */
	     cdata.store_a_online = scr_cfg2.a_online;
	     cdata.store_a1_online = scr_cfg2.a1_online;
	     cdata.store_b_online = scr_cfg2.b_online;
	     cdata.store_b1_online = scr_cfg2.b1_online;
	     cdata.store_b_is_lower = scr_cfg2.lwr;
	     cdata.int_interlaced = scr_cfg2.int;
	     cdata.lower_store_size = power_of_two (bin (scr_cfg2.size, 3) + 5);
	     if (cdata.store_b_is_lower & cdata.store_a_online) |
	     (^cdata.store_b_is_lower & cdata.store_b_online) then
		if scr_cfg2.nea_enabled then		/* Compute size of upper store. */
		     cdata.upper_store_size =
		     bin (bit (scr_cfg2.nea, 12)) - mod (cdata.base, 4096) - cdata.lower_store_size;
		else
		cdata.upper_store_size = cdata.lower_store_size;
	     else
	     cdata.upper_store_size = 0;
	     string (cdata.cyclic_priority) = scr_cfg2.cyclic_prior;
	     call interpret_eima (1, scr_cfg2.mask_a_assign);
	     call interpret_eima (2, scr_cfg2.mask_b_assign);
	     cdata.eima_data (1).mask_available,
		cdata.eima_data (2).mask_available = "1"b;
	     cdata.eima_data (3).mask_available,
		cdata.eima_data (4).mask_available = "0"b;

	     cdata.program = scr_cfg2.mode;
	end;



	else do;					/* If 6000 SC ... */
	     cdata.store_a_online = (scr_cfg1.mode_a = "000"b);
	     cdata.store_b_online = (scr_cfg1.mode_b = "000"b);
	     cdata.store_b_is_lower = scr_cfg1.lwr;
	     cdata.int_interlaced = scr_cfg1.int;
	     if cdata.store_a_online then
		store_a_size = (bin (scr_cfg1.bdry_a, 3) + 1) * 32;
	     else
	     store_a_size = 0;
	     if store_a_size = 128 then
		cdata.store_a1_online = "1"b;		/* Two ports for 128K store. */
	     else
	     cdata.store_a1_online = "0"b;
	     if cdata.store_b_online then
		store_b_size = (bin (scr_cfg1.bdry_b, 3) + 1) * 32;
	     else
	     store_b_size = 0;
	     if store_b_size = 128 then
		cdata.store_b1_online = "1"b;		/* Two ports for 128K store. */
	     else
	     cdata.store_b1_online = "0"b;
	     if cdata.store_b_is_lower then do;
		cdata.lower_store_size = store_b_size;
		cdata.upper_store_size = store_a_size;
	     end;
	     else do;
		cdata.lower_store_size = store_a_size;
		cdata.upper_store_size = store_b_size;
	     end;
	     string (cdata.cyclic_priority) = (7)"0"b;
	     do i = 1 to 4;
		call interpret_eima (i, scr_cfg1.pima (i));
		cdata.eima_data (i).mask_available = "1"b;
	     end;

	     cdata.program = "1"b;
	end;

	return;



set_port_enable: entry (port, enable_sw);		/* entry to enable a controller port */

dcl  enable_sw bit (1) unal;				/* 1 => enable corresponding port */


	call set_port_enable_bit (port, enable_sw);	/* Set the bit first. */

	do ctag = 0 to 7;				/* Set ports in all controllers. */
	     cdp = addr (scs$controller_data (ctag));	/* Get pointer to controller data for this port. */

	     if cdata.online then			/* If controller is in use ... */
		call enable_ports (ctag);		/* Go set the port enable bits. */
	end;

	return;



set_port_enable_bit: entry (port, enable_sw);		/* entry to only set port enable bits */


	mkp = addr (scs$sys_level);			/* Get pointer to array of masks. */

	do i = 1 to scs$number_of_masks;		/* Modify all masks. */
	     scrp = addr (masks (i));			/* Get pointer to mask. */
	     if port < 4 then			/* If ports 0 thru 3 ... */
		substr (scr_msk.port_mask_1, port + 1, 1) = enable_sw;
	     else					/* If ports 4 thru 7 ... */
	     substr (scr_msk.port_mask_2, port - 3, 1) = enable_sw;
	end;

	return;



enable_ports: entry (port);				/* entry to set port enable bits in a controller */


	cdp = addr (scs$controller_data (port));	/* Get pointer to data for this controller. */
	scrp = addr (scs$cfg_data (port));		/* Get pointer to CFG data for this controller. */
	mkp = addr (scs$sys_level);			/* Get pointer to a mask. */

	if cdata.type >= "0010"b then do;		/* If 4MW SCU ... */
	     scr_cfg2.port_mask_0_3 = mkp -> scr_msk.port_mask_1;
	     scr_cfg2.port_mask_4_7 = mkp -> scr_msk.port_mask_2;
	     call set_cfg (port);			/* Actually set the controller. */
	end;

	else					/* If 6000 SC ... */
	if port = scs$interrupt_controller then		/* If bootload controller, allow interrupts. */
	     call privileged_mode_ut$smcm (port, scs$open_level);
	else					/* If not bootload controller, prevent interrupts. */
	call privileged_mode_ut$smcm (port, scs$sys_level);

	return;



disable_ports: entry (port);				/* entry to clear all port enable bits in a controller */


	cdp = addr (scs$controller_data (port));	/* Get pointer to data for this controller. */
	scrp = addr (scs$cfg_data (port));		/* Get pointer to CFG data for this controller. */

	if cdata.type >= "0010"b then do;		/* If 4MW SCU ... */
	     scr_cfg2.port_mask_0_3 = "0000"b;
	     scr_cfg2.port_mask_4_7 = "0000"b;
	     call set_cfg (port);			/* Actually set the controller. */
	end;

	else					/* If 6000 SC ... */
	call privileged_mode_ut$smcm (port, unspec (bin (0, 71)));

	return;



assign_mask: entry (port, target);			/* entry to assign a mask to a port */

dcl  target fixed bin (3);				/* port to which mask will be assigned */

dcl  mask_assignment bit (9);				/* mask assignment bits */


	cdp = addr (scs$controller_data (port));	/* Get pointer to correct array element. */
	scrp = addr (scs$cfg_data (port));		/* Get pointer to correct CFG data. */

	if cdata.type >= "0010"b then do i = 1 to 2;	/* Do this only for 4MW SCU. */
	     if ^cdata.eima_data (i).mask_assigned then do; /* Look for unused mask. */
		cdata.eima_data (i).mask_assignment = target;
		cdata.eima_data (i).mask_assigned = "1"b;
		mask_assignment = set_mask_assignment (target + 1);
		if i = 1 then			/* Set appropriate field in CFG data. */
		     scr_cfg2.mask_a_assign = mask_assignment;
		else
		scr_cfg2.mask_b_assign = mask_assignment;
	     end;
	end;

	return;



unassign_mask: entry (port, target);			/* entry to unassign a mask from a port */


	cdp = addr (scs$controller_data (port));	/* Get pointer to correct array element. */
	scrp = addr (scs$cfg_data (port));		/* Get pointer to correct CFG data. */

	if cdata.type >= "0010"b then do i = 1 to 2;	/* Do this only for 4MW SCU. */
	     if cdata.eima_data (i).mask_assigned &	/* Look for mask used for this target. */
	     (cdata.eima_data (i).mask_assignment = target) then do;
		cdata.eima_data (i).mask_assigned = "0"b;
		mask_assignment = set_mask_assignment (9);
		if i = 1 then			/* Set appropriate field in CFG data. */
		     scr_cfg2.mask_a_assign = mask_assignment;
		else
		scr_cfg2.mask_b_assign = mask_assignment;
	     end;
	end;

	return;




reassign_mask: entry (tag1, tag2);			/* entry to reassign mask to another port */

dcl  tag1 fixed bin (3),				/* processor tag of assigned mask */
     tag2 fixed bin (3);				/* processor tag for new assignment */


	ctag = scs$interrupt_controller;		/* Change bootload controller only. */

	if tag1 ^= -1 then do;			/* If assignment to be removed ... */	
	     pdp = addr (scs$processor_data (tag1));	/* Get pointer to data for this processor. */

	     if tag2 ^= -1 then 			/* Check for same-port (poss. expander) case and punt */
		if pdata.controller_port = scs$processor_data (tag2).controller_port then return;
	     call set_mask (ctag, (pdata.controller_port), 0);
						/* Clear the mask. */
	     call unassign_mask (ctag, (pdata.controller_port));
						/* Unassign the mask. */
	end;
	if tag2 ^= -1 then do;			/* If new assignment to be made ... */
	     pdp = addr (scs$processor_data (tag2));	/* Get pointer to data for this processor. */

	     call assign_mask (ctag, (pdata.controller_port));
						/* Make new mask assignment. */
	     call set_cfg (ctag);			/* Set switches in controller. */
	end;

	return;


update_export_xipmsk:
	entry (port);				/* Update port-expander XIP masks */

dcl 1 rcow based (addr (scs$reconfig_general_cow)) aligned like scs$reconfig_general_cow;

	unspec (rcow) = ""b;			/* Zero the cow. */
	do i = 0 to 7;
	     pdp = addr (scs$processor_data (i));	/* Address proc data element */
	     if pdata.expanded_port & pdata.controller_port = port
		then substr (rcow.sub_mask, pdata.expander_port + 1, 1) =  pdata.interrupt_cpu;
	end;
	rcow.expander_command = "2"b3;		/* Set XIP register */
	rcow.controller_port = port;
	call privileged_mode_ut$cioc (addr (rcow.cow));	/* We rely on this living in the bootload controller */
	return;

set_export_enable:
	entry (port, subport, enable_sw);

dcl  subport fixed bin (3);

	unspec (rcow) = ""b;			/* Clear out sutff */
	do i = 0 to 7;				/* Scan CPU's */
	     pdp = addr (scs$processor_data (i));
	     if pdata.expanded_port & pdata.controller_port = port
		then if pdata.expander_port = subport
		     then substr (rcow.sub_mask, pdata.expander_port + 1, 1) = enable_sw;
		     else substr (rcow.sub_mask, pdata.expander_port + 1, 1) = pdata.online;
         end;
	substr (rcow.sub_mask, 5, 1) = "1"b;		/* T. Ohlin wants exerciser bit on. */
         rcow.expander_command = "1"b3;			/* Set subport enables */
         rcow.controller_port = port;
         call privileged_mode_ut$cioc (addr (rcow.cow));	/* Zap the bootload SCU */
/* The enables on all the other SCU's will be left enabled */
         return;
		     
	

set_cfg:	entry (port);				/* entry to set CFG data in controller */


	if scs$controller_data (port).type >= "0010"b then do; /* If 4MW SCU ... */
	     if scs$set_cycle_switches then
		string (addr (scs$cfg_data (port)) -> scr_cfg2.cyclic_prior) = scs$cycle_priority_template;
try_to_set_cfg:
	     scrp = addr (scs$cfg_data (port));
	     unspec (port_enable_bits) = scr_cfg2.port_mask_0_3 || scr_cfg2.port_mask_4_7;
	     set_cfg_ok = "0"b;
	     do set_cfg_try_count = 1 repeat set_cfg_try_count + 1
		while (set_cfg_try_count <= SET_CFG_TRY_LIMIT & ^set_cfg_ok);
		call privileged_mode_ut$sscr (port, SC_CFG, scs$cfg_data (port));
		if unspec (port_enable_bits) = "0"b then set_cfg_ok = "1"b;     /* if we can't check, assume OK	*/
		else do;
		     call privileged_mode_ut$rscr (port, SC_CFG, scr_cfg2_temp); /* read to make sure it took	*/
		     if (unspec (scr_cfg2_temp) & SCR_CFG2_PROGRAM_MASK)
			= (unspec (scs$cfg_data (port)) & SCR_CFG2_PROGRAM_MASK)    /* check all program-settable bits*/
			then set_cfg_ok = "1"b;
		end;
	     end;
	     
/* If the sscr did not take within the requisite number of tries, we
   punt by printing instructions to the operator to clear the SCU
   manually.  This involves setting switches, flipping the mode into
   MANUAL, then back into PROGRAM.  When these two actions have happened,
   we check again, repeating the process if necessary						*/
	     
	     if ^set_cfg_ok then do;			/* drastic manual intervention		*/
		call syserr (3, "scr_util: error setting configuration register. SCU ^a must be set manually",
		     substr (LETTERS, port+1, 1));
		call syserr (0, "Set the following switches on SCU ^a",
		     substr (LETTERS, port+1,1));
		
		unspec (cycle_priority_bits) = scr_cfg2.cyclic_prior;
		unspec (nea_bits) = scr_cfg2.nea;
		mask_a_val = convert_to_mask_val (substr (scr_cfg2.mask_a_assign, 1, 8));
		mask_b_val = convert_to_mask_val (substr (scr_cfg2.mask_b_assign, 1, 8));
		
		call syserr (0, "^/^12x--PORT ENABLE--  --CYCLIC PRIORITY---^/^12x0 1 2 3 4 5 6 7  0/1 1/2 2/3 3/4 4/5 5/6 6/7^/^8xON  ^8(^[X^; ^] ^) ^7( ^[X^; ^]  ^)^/^8xOFF ^8(^[ ^;X^] ^) ^7( ^[ ^;X^]  ^)",
		     port_enable_bits, cycle_priority_bits, 
		     port_enable_bits, cycle_priority_bits);
		call syserr (0, "^/^8xNON-EXISTENT ADDRESS^/^17x2 3 4 5 6 7 8^/^8xON  ^[X^; ^]  1 ^7(^[X^; ^] ^)^/^8xOFF ^[ ^;X^]  0 ^7(^[ ^;X^] ^)",
		     scr_cfg2.nea_enabled, nea_bits,
		     scr_cfg2.nea_enabled, nea_bits);
		call syserr (0, "^/^8xSTORE A  A1 B  B1^/^8xON    ^4(^[X^; ^]  ^)^/^8xOFF   ^4(^[ ^;X^]  ^)",
		     scr_cfg2.a_online, scr_cfg2.a1_online, scr_cfg2.b_online, scr_cfg2.b1_online,
		     scr_cfg2.a_online, scr_cfg2.a1_online, scr_cfg2.b_online, scr_cfg2.b1_online);
		call syserr (0, "^/^8xLWR STORE SIZE - ^d^/^8xINTERLACE - ^[ON^;OFF^]^/^8xLWR STORE - ^[B^;A^]^/^8xMASK A - ^a^/^8xMASK B - ^a",
		     bin (scr_cfg2.size), scr_cfg2.int, scr_cfg2.lwr,
		     mask_a_val, mask_b_val);
		
		call syserr (0, "After setting the switches for SCU ^a place SCU ^a into Manual Mode and then into Program Mode",
		     substr (LETTERS, port+1, 1), substr (LETTERS, port+1, 1));

/* Wait for SCU to go into Manual Mode								*/
		
		do while (addr (scr_cfg2_temp) -> scr_cfg2.mode);
		     call privileged_mode_ut$rscr (port, SC_CFG, scr_cfg2_temp);
		end;
		
/* Wait for SCU to go into Program Mode								*/
		
		do while (^addr (scr_cfg2_temp) -> scr_cfg2.mode);
		     call privileged_mode_ut$rscr (port, SC_CFG, scr_cfg2_temp);
		end;
		

/* Check whether SCU cleared properly								*/
		
		if (unspec (scr_cfg2_temp) & SCR_CFG2_PROGRAM_MASK)
		     ^= (unspec (scs$cfg_data (port)) & SCR_CFG2_PROGRAM_MASK)
		     then goto try_to_set_cfg;
	     end;
	     

		
		

	end;
						/* Set CFG data in controller. */
	return;



set_mask:	entry (port, target, mask);			/* entry to set mask for controller port */

dcl  mask fixed bin (71);				/* mask to be set */


	call privileged_mode_ut$sscr (port, SC_MSK + 8 * target, mask);
						/* Set the mask. */

	return;




convert_to_mask_val:
	proc (scu_mask_bits) returns (char (*));	/* procedure to convert a mask to printable form	*/
	
dcl  scu_mask_bits bit (*) unaligned,
     mask_val pic "9";
	
	
	if index (scu_mask_bits, "1"b) >0 then do;
	     mask_val = index (scu_mask_bits, "1"b) - 1;
	     return (mask_val);
	end;
	else return ("Off");
	
	
end convert_to_mask_val;

	



interpret_eima: proc (n, eima);			/* procedure to determine port assignment from bits */

dcl  n fixed bin,					/* EIMA number */
     eima bit (9);					/* mask assignment bits */

dcl  x fixed bin;					/* port mask assigned to */


	     x = index (eima, "1"b);			/* Look for bit ON. */
	     if (x = 0) | (x = 9) then		/* If no bits ON, or last bit ON ... */
		cdata.eima_data (n).mask_assigned = "0"b; /* Mask is not assigned to any port. */
	     else do;				/* Mask is assigned. */
		cdata.eima_data (n).mask_assigned = "1"b;
		cdata.eima_data (n).mask_assignment = x - 1; /* Remember port to which mask is assigned. */
	     end;

	     return;

	end interpret_eima;



set_mask_assignment: proc (n) returns (bit (9) unal);	/* procedure to set correct mask assignment bit */

dcl  n fixed bin;					/* bit to be set */

dcl  m bit (9) aligned;				/* prototype mask assignment bits */


	     m = "0"b;				/* Clear all bits. */
	     substr (m, n, 1) = "1"b;			/* Set the desired bit. */

	     return (m);				/* Return assignment bits. */


	end set_mask_assignment;




power_of_two: proc (e) returns (fixed bin);		/* procedure to compute power of two */

dcl  e fixed bin;					/* exponent */

dcl  p fixed bin;					/* power of two */


	     p = 0;				/* Clear the result. */
	     substr (unspec (p), 36 - e, 1) = "1"b;	/* Very quick, and extremely dirty. */

	     return (p);


	end power_of_two;

/*  */

/* isolts_scu_p1 - entry to set config data in the SCU being used for ISOLTS, to isolate the processor under test */

isolts_scu_p1: entry;

	iscu = scs$processor_test_data.scu_tag;		/* pick up scu_tag, cpu_tag, and mask cpu tag */
	icpu = scs$processor_test_data.cpu_tag;		/* from processor test data structure */
	mcpu = scs$processor_test_data.mask_cpu;
	cdp = addr (scs$controller_data (iscu));
	scrp = addr (scs$cfg_data (iscu));
	pdp = addr (scs$processor_data (icpu));
	mkp = addr (scs$cpu_test_mask);

/* do the things common to both types of SCU's first */

	maska = set_mask_assignment (scs$processor_data (mcpu).controller_port + 1);
	maskb = set_mask_assignment (pdata.controller_port + 1);

/* set up scs$cpu_test mask */

	scs$cpu_test_mask = "0"b;			/* initialize it first */
	mkp -> scr_msk.port_mask_1 = substr ((maska | maskb), 1, 4); /* set port mask fields */
	mkp -> scr_msk.port_mask_2 = substr ((maska | maskb), 5, 4);

	if cdata.type >= "0010"b then do;		/* if 4MW SCU ... */

	     scr_cfg2.mask_a_assign = maska;		/* set up config data */
	     scr_cfg2.mask_b_assign = maskb;
	     scr_cfg2.port_mask_0_3 = mkp -> scr_msk.port_mask_1;
	     scr_cfg2.port_mask_4_7 = mkp -> scr_msk.port_mask_2;

	     call set_cfg ((iscu));			/* actually set config data in SCU */

	end;

	else call privileged_mode_ut$smcm ((iscu), scs$cpu_test_mask); /* 6000 SCU, just set port mask  */
	call set_mask ((iscu), (scs$processor_data (mcpu).controller_port), /* mask off interrupts */
	     fixed (scs$cpu_test_mask, 71));		/* in mask cpu */
	mkp -> scr_msk.interrupt_mask_1 = "1001000000001000"b; /* set int mask for cells 0 and 12 */
						/* and cell 3 for test progras */
	scs$processor_test_data.scu_state = "10"b;	/* set scu state to indicate where we are at */

	return;					/* thats all folks */

/*  */

/* isolts_scu_p2 - entry to re-enable original SCU ports + port for test cpu */

isolts_scu_p2: entry;

	iscu = scs$processor_test_data.scu_tag;		/* pick up scu_tag, cpu_tag, and mask cpu tag */
	icpu = scs$processor_test_data.cpu_tag;		/* from processor test data structure */
	mcpu = scs$processor_test_data.mask_cpu;
	cdp = addr (scs$controller_data (iscu));
	scrp = addr (scs$cfg_data (iscu));
	pdp = addr (scs$processor_data (icpu));
	mkp = addr (scs$cpu_test_mask);

/* do the things common to both types of SCU's first */

	maska = set_mask_assignment (pdata.controller_port + 1);
	pdp = addr (scs$sys_level);			/* get a pointer to a mask */
	mkp -> scr_msk.port_mask_1 = pdp -> scr_msk.port_mask_1 | substr (maska, 1, 4);
	mkp -> scr_msk.port_mask_2 = pdp -> scr_msk.port_mask_2 | substr (maska, 5, 4);

	if cdata.type >= "0010"b then do;		/* if 4MW SCU ... */

	     scr_cfg2.port_mask_0_3 = mkp -> scr_msk.port_mask_1;
	     scr_cfg2.port_mask_4_7 = mkp -> scr_msk.port_mask_2;

	     call set_cfg ((iscu));			/* actually set config data in SCU */

	end;

	else call privileged_mode_ut$smcm ((iscu),
	     "000000000017000000000017"b3 & scs$cpu_test_mask); /* 6000 SCU, set port mask */
	call set_mask ((iscu), (scs$processor_data (mcpu).controller_port), /* mask off interrupts */
	     fixed ("000000000017000000000017"b3 & scs$cpu_test_mask, 71)); /* in mask cpu */

	return;					/* thats all folks */


/*  */

/* isolts_scu_p3 - entry to restore orignial SCU port masks upon termination of ISOLTS CPU testing */

isolts_scu_p3: entry;

	iscu = scs$processor_test_data.scu_tag;		/* pick up scu_tag */
	cdp = addr (scs$controller_data (iscu));

	scs$cfg_data (iscu) = scs$cfg_data_save;	/* restoe orignial config data */

	if cdata.type >= "0010"b then			/* if 4MW SCU */
	     call set_cfg ((iscu));			/* actually set config data */
	else call privileged_mode_ut$smcm ((iscu), scs$sys_level); /* if 6000 SC */

	return;					/* thats all */

%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   scr_util: error setting configuration register. SCU X must be set manually.
   Set the following switches on SCU X
   < Diagram of SCU Maintenance Panel is Printed Here>
   After setting the switches for SCU X place SCU S into Manual Mode and then into Program Mode
   
   S: $beep

   T: Reconfiguration (e.g., adding or deleting a CPU)

   M: The supervisor was unable to set the configuration register in the SCU
   indicated after 10 attempts.  To avoid a system crash, the SCU must be
   cleared manually.  In this message, the supervisor will print a diagram
   of the SCU Maintenance Panel, indicating how each switch should be set.
   
   A: The operator should copy the diagram of the SCU Maintenance Panel
   printed by the supervisor (or take the copy printed, if possible).  The
   operator should then go to the Maintenance Panel of the SCU indicated
   and set each switch on the diagram to the indicated position, and then
   verify that each switch is in the correct position.  Following this, the
   operator should set the Program/Manual switch into the Manual position
   briefly, and then return it to the Program position.  If this procedure
   does not remedy the problem, the message will be repeated, and the
   System Programming Staff should be contacted.

   END MESSAGE DOCUMENTATION */
   
     end scr_util$read_cfg;
