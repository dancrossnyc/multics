/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


wired_plm: proc ();

/* RE Mullen, v2pl1, oct 1973 */
/* NSS by BSG */
/* BSG for lockless scheduler and global events, 9/20/77 */
/* Modified 03/21/81, W. Olin Sibert, for ADP PTW formats */
/* Metering added 04/17/81, WOS */
/* No PD, 07/25/83, E. N. Kittlitz */

dcl  apt_ptr ptr parameter;

dcl  rastep bit (18) aligned;
dcl  i fixed bin;
dcl (astep, ap) ptr;
dcl  sstp pointer;
dcl  ptp pointer;

dcl 1 p based (ap),
    2 a (0 : 1) bit (18) unaligned;

dcl  page$pread entry (ptr, fixed bin, fixed bin (35));
dcl  page$lock_ptl entry ();
dcl  page$unlock_ptl entry ();

dcl  pds$processid bit (36) aligned external static;
dcl  pds$apt_ptr ptr external static;
dcl  sst$astsize fixed bin external static;
dcl  sst$astap pointer external static;
dcl  sst$cmp pointer external static;
dcl  sst$wired fixed bin external static;
dcl  sys_info$system_type fixed bin external static;
dcl  tcm$loading_page_waits fixed bin (35) external static;

dcl  sst_seg$ external static;

dcl (addr, addrel, ptr, rel) builtin;

/*  */

/* LOAD: Entry to load a process by wiring down all critical pages
   needed by the process. */

wired_plm$load: entry (apt_ptr);

	aptep = apt_ptr;				/* Copy args */
	sstp = addr (sst_seg$);
	ap = addr (apte.asteps);			/* get pointer to asteps array */

	call page$lock_ptl;

	do i = 0 to 1;				/* loop over the asteps */
	     rastep = ap -> p.a (i);			/* get i-th rel pointer */
	     if rastep then do;			/* if rel pointer non zero */
		astep = ptr (sstp, rastep);
		ptp = addrel (astep, sst$astsize);	/* get pointer to page table */

		call load_this_page ();
		end;
	     end; 				/* of loop through asteps */

	call page$unlock_ptl;

	return;					/* All done */

/*  */

load_this_page: proc ();

dcl  wired_bit bit (1) aligned;
dcl  os_bit bit (1) aligned;
dcl  valid_bit bit (1) aligned;
dcl  wait_event fixed bin (35);


	if sys_info$system_type = ADP_SYSTEM then do;	/* Get the interesting bits */
	     valid_bit = adp_ptw.valid;
	     os_bit = adp_ptw.os;
	     wired_bit = adp_ptw.wired;
	     end;

	else do;
	     valid_bit = l68_ptw.valid;
	     os_bit = l68_ptw.os;
	     wired_bit = l68_ptw.wired;
	     end;

	if ^wired_bit then do;			/* If not already wired, wire it */
	     if sys_info$system_type = ADP_SYSTEM then
		adp_ptw.wired = "1"b;
	     else l68_ptw.wired = "1"b;
	     sst$wired = sst$wired + 1;
	     end;

	if ^valid_bit then do;			/* Not now in core */
	     if os_bit then 			/* But should be arriving any minute now */
		wait_event = binary (rel (ptp), 18);
	     else call page$pread (astep, 0, wait_event); /* Otherwise, ask for it */

	     if wait_event > 0 then			/* Have an event, remember to wait for it */
		apte.wait_event = bit (bin (wait_event, 36), 36);

	     if wait_event > 262143 then;		/* Global event -- ignore it */
	     else do;				/* It will end up here, so notify */
		if sys_info$system_type = ADP_SYSTEM then
		     cmep = addr (sst$cmp -> cma (adp_core_ptw.frame));
		else cmep = addr (sst$cmp -> cma (l68_core_ptw.frame));
		cme.notify_requested = "1"b;
		end;

/* THIS IS COMMENTED OUT until there is room in tcm for the new metering cell -- WOS, 04/17/81
	     tcm$loading_page_waits = tcm$loading_page_waits + 1; /* Meter */
	     end;

	return;
	end load_this_page;

%page; %include apte;
%page; %include cmp;
%page; %include "ptw.l68";
%page; %include "ptw.adp";
%page; %include system_types;

     end wired_plm;
