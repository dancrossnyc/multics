/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */
/* pc_recover_sst.pl1. The smarts of this program live in
   pc_check_tables_.pl1, which see. */

/* format: style2,indcomtxt */

pc_recover_sst:
     procedure;

/* BIM 84-01-11 */

%include pc_check_tables_info;

	declare arg_list_ptr_	 entry returns (pointer);
	declare syserr		 entry options (variable);
	declare syserr$error_code	 entry options (variable);
	declare ioa_$general_rs	 entry (pointer, fixed binary, fixed binary, character (*), fixed binary (21),
				 bit (1) aligned, bit (1) aligned);
	declare ioa_$rsnnl		 entry () options (variable);
	declare pc_check_tables_	 entry (pointer, fixed bin (35));
	declare debug_check		 entry (char (4) aligned) returns (bit (1) aligned);

	declare 1 CTI		 aligned like check_tables_info;

	declare sst_seg$		 external;
	declare core_map$		 external;
	declare slt$		 external;
	declare pvt$		 external;
	declare sys_info$system_type	 fixed bin (35) external static;

	declare code		 fixed bin (35);

	declare (addr, setwordno, segno)
				 builtin;


	CTI.version = PC_CHECK_TABLES_INFO_VERSION_1;
	CTI.flags = "0"b;
	CTI.flags.recover_errors = "1"b;
	CTI.flags.report_errors, CTI.report_state = debug_check ("esdt");
	CTI.flags.report_error_counts = CTI.flags.report_errors | debug_check ("esds");
	CTI.report = report_;
	CTI.display_ptw = display_ptw_;
	CTI.display_cme = display_cme_;
	CTI.display_aste = display_aste_;
	CTI.display_ptr = display_ptr_;
	CTI.display_pvname = display_pvname_;

	CTI.sst_ptr = addr (sst_seg$);
	CTI.core_map_ptr = addr (core_map$);		/* NOT sst.cmp */
	CTI.pvt_ptr = addr (pvt$);
	CTI.system_type = sys_info$system_type;

	call pc_check_tables_ (addr (CTI), code);
	if code ^= 0
	then call syserr$error_code (CRASH, code, "pc_recover_sst: could not recover sst/core_map. Reboot and salvage.")
		;
	return;

report_:
     procedure options (variable);

	declare long_string		 char (200);
	declare lsl		 fixed bin (21);

	call ioa_$general_rs (arg_list_ptr_ (), 1, 2, long_string, lsl, "0"b, "0"b);
	call syserr (ANNOUNCE, "^a", substr (long_string, 1, lsl));
	return;
     end report_;

display_ptw_:
     procedure (ptwp);

	declare ptwp		 pointer;

	call report_ (" --> PTW at ^6o", wordno (ptwp));
	return;
     end display_ptw_;

display_cme_:
     procedure (cmep);

	declare cmep		 pointer;

	call report_ (" --> CME at ^6o", wordno (cmep));
	return;
     end display_cme_;

display_aste_:
     procedure (astep);

	declare astep		 pointer;

	call report_ (" --> aste at ^6o", wordno (astep));
	return;
     end display_aste_;

display_ptr_:
     procedure (ap) returns (char (*));

	declare ap		 pointer;
	declare offset		 char (12);

	offset = "";
	call ioa_$rsnnl ("^o", offset, (0), wordno (ap));
	sltp = addr (slt$);
	names_ptr = slt.name_seg_ptr;
	sltep = addr (slt.seg (segno (ap)));
	namep = setwordno (names_ptr, bin (slte_uns.names_ptr, 18));
	return (rtrim (segnam.names (1).name) || rtrim (offset));
     end display_ptr_;

display_pvname_:
     procedure (pvtx) returns (char (32));

	declare pvtx		 fixed bin;

	declare 1 dname		 unaligned,
		2 devname		 char (4),
		2 u		 char (1) init ("_"),
		2 nn		 picture "99";

	pvt_arrayp = addr (pvt$array);
	pvtep = addr (pvt_array (pvtx));
	dname.devname = pvte.devname;
	dname.nn = pvte.logical_area_number;
	return (string (dname));
     end display_pvname_;


/* format: off */

%page; %include pvte;
%page; %include syserr_constants;
%page; %include slt;
%page; %include slte;

       end pc_recover_sst;
