" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

"
"         Coded by who knows who who knows when
"         Modified March 1981 Benson I. Margulies for no stack.
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	hash_index_
"
"	Calling sequence is:
"
"	index = hash_index_ (nameptr,length,bias,tablesize)
"
"	nameptr 	is a pointer to the name to be hashed
"	length	is the number of (significant) characters in the name, fixed (35)
"	bias	is an integer used in the hash algorithm(may be anything), fixed (35)
"	tablesize	is the size of the hash table of interest, fixed (35)
"	index	is the returned hash index, fixed (35)
"
"	All variables are fixed except the first which is pointer
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

	name	hash_index_
	segdef	hash_index_,hash_id
	set	string,2
	set	length,4
	set	bias,6
	set	tablesize,8
	set	index,10
hash_index_:
	epp2	ap|string,*	get pointer to pointer to string
	epp2	pr2|0,*		get pointer to string
	szn	ap|tablesize,*	check for zero divide
	tze	err		trouble
	eaa	0		clear the a register
	ldq	ap|length,*	get length of string
	cmpq	=32,dl		is it an entry name?
	tnz	compare		no, go to compare
	qrs	2		yes, ignore trailing blanks
strip:	lda	pr2|-1,ql		get end word
	cmpa	blanks		all blanks?
	tnz	add1		no, go to compare
	sbq	=1,dl		yes, backup 1 word
	tra	strip		loop back and try again
compare:	llr	70		divide by 4 and save remainder
	arl	16		shift remainder to upper a
	eax2	0,au		divisible by 4?
	tze	add1		yes go to compare
	lda	pr2|0,ql		no, make blanks out of last chars
	ana	mask,2
	ora	bits,2
	tra	add2
add1:	eaa	0		zero a reg-init sum
add2:
	qls	0		set sign of q
	tze	noadd		no words to be added in
	adla	pr2|-1,ql
	sblq	1,dl		go to next word
	tpl	add2
noadd:	sta	ap|index,*	save temporarily
	ldq	ap|bias,*	get bias
	mpy	=99991,dl		multipy by large prime number
	adq	ap|index,*	add in sum of the words
	div	ap|tablesize,*	divide by hash table size
	als	0		set zero indicator from remainder (in a-reg)
	tpl	*+2		must be positive answer
	neg
	sta	ap|index,*	return the remainder of the division
.rt:	short_return

err:	stz	ap|index,*	return zero as hash index if error
	tra	.rt

blanks:	aci	"    "
mask:	oct	0,777000000000,777777000000,777777777000
bits:	oct	0,000040040040,000000040040,000000000040


" 
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	hash_id
"
"	Calling sequence is:
"
"	index = hash_index_$hash_id (id, tablesize)
"
"	id	is the unique identifier (bit (36)) to be hashed
"
"	This is an awful algorithm. If you are not using it now,
"	do not start. It is here only for compatability.
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

	set	uid,2
	set	tablesize,4
	set	index,6
hash_id:
	ldq	ap|uid,*		pick up id word
	mpy	ap|uid,*		multiply it by itself
	ana	=o377777,dl	leave 17 bits (force positive)
	lrl	18
	div	ap|tablesize,*	divide by table size
	sta	ap|index,*	return the hash index
	short_return

	end
