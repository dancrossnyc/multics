/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */
/* format: style2 */

/**** DISPLAY_ACCESS_CLASS_ - This module converts a bit (72) representation of
   the Multics Access Isolation Mechanism (AIM) access class marking
   into a string of the form:

   LLL...L:CCC...C

   where "LLL...L" is a octal sensitivity level number (generally one digit)
   and "CCC...C" is an octal for the access category set.

   for a range, L:CCCCCC-L:CCCCC is used.

   for an authorization, L:CCCCCC,PPPPPP is used, where P are the privileges.

/* Originally coded 8/21/74 by Lee J. Scheffler */
/* 84-04-02 BIM : Range entrypoint added. */
/* 84-04-27 BIM : display_authorization_ added, modernized. */

display_access_class_: convert_aim_attributes_:
     procedure (aim_attributes) returns (char (32) aligned);

	dcl     aim_attributes	 bit (72) aligned parameter;
						/* access authorization or class */

	dcl     aim_string		 char (32);
	dcl     display_privileges	 bit (1) aligned;

	dcl     ioa_$rsnnl		 entry () options (variable);


%include aim_template;
	declare 1 AIM		 aligned like aim_template;


	display_privileges = "0"b;
	go to COMMON;

display_authorization_:
     entry (aim_attributes) returns (char (32) aligned);

	display_privileges = "1"b;

COMMON:
	unspec (AIM) = aim_attributes;

	aim_string = "";
	call ioa_$rsnnl ("^o:^.3b^[,^.3b^]", aim_string, (0), AIM.level, substr (AIM.categories, 1, 18), display_privileges,
	     string (AIM.privileges));

	return (aim_string);

range:
     entry (aim_range) returns (char (32) aligned);

	declare aim_range		 (2) bit (72) aligned;
	declare range_string	 (2) char (32) aligned;
	declare rx		 fixed bin;

	do rx = 1, 2;
	     range_string (rx) = display_access_class_ (aim_range (rx));
	end;
	aim_string = rtrim (range_string (1)) || "-" || range_string (2);
	return (aim_string);

     end display_access_class_;
