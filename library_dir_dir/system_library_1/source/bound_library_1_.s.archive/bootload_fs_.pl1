/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */
bootload_fs_:
     procedure;
	return;

/* format: style4,insnl,delnl,indattr */
/* Coded by Benson I. Margulies late at night(s) in early November 1980 */
/* Modified by Keith Loepere, March 1983 for get_ptr and put_ptr entrypoints. */
/* Modified by Keith Loepere, July 1984 for fixes relating to character lengths
   and force writing the file sys. */

/*

   bootload_fs_ manages a primitive file system in a disk partition for Bootload
   Multics.  The file system is intended to be unbreakable, and therefore in no
   need of salvaging EVER.  To this end, linked lists are not used. A finite file
   table is used, and files are contiguous. Any consistency checks must be
   possible on a local per-file level.

   *** ENTRIES ***

   bootload_fs_$lookup
   declare bootload_fs_$lookup entry (char (*), fixed bin (21), fixed bin (35));
   call bootload_fs_$lookup (file_name, length, code);

   where:
   file_name   (input)	is a file name, 32 characters or less. no checks
   are made on the legality of the characters.

   length	  (output) is the length of the file, in characters. files
   are always an even number of characters long.

   code	  (output) is a standard system status code,
   error_table_$noentry for a file that isn't there.

   bootload_fs_$list:
   declare bootload_fs_$list entry (area (*), pointer, fixed bin (35));
   call bootload_fs_$list (work_area, info_pointer, code);

   where:
   work_area	(input)	is an area in which a structure containing the
   list information can be allocated.

   info_pointer
   (output)	is a pointer to tthe structure
   bootload_fs_listing(.incl.pl1)

   code	(output)	is a standard system status code. It may be
   error_table_$noalloc if the work_area was not big
   enough.

   bootload_fs_$get:
   declare bootload_fs_$get (char (*), pointer, fixed bin (21), fixed bin (21),
   fixed bin (35));
   call bootload_fs_$get (file_name, data_pointer, max_length, length, code);

   where:
   file_name	(input)	is the file name, dummy.

   data_pointer
   (input)	is a pointer to the place to copy the data to.

   max_length
   (input)	is the maximum length (in characters) of the
   space pointed to by data_pointer.

   length	(output)  is the length of the file.

   code	(output)	is a standard system status code. It may be
   error_table_$long_record if the file cannot be
   fit into max_length.

   bootload_fs_$get_ptr:
   declare bootload_fs_$get_ptr (char (*), pointer, fixed bin (21),
   fixed bin (35));
   call bootload_fs_$get_ptr (file_name, data_pointer, length, code);

   where:
   file_name	(input)	is the file name.

   data_pointer
   (output)	is a pointer to the file in the partition.

   length	(output)  is the length of the file.

   code	(output)	is a standard system status code.

   bootload_fs_$put:
   declare bootload_fs_$put entry (char (*), pointer, fixed bin (21),
   bit (1) aligned, fixed bin (35));
   call bootload_fs_$put (file_name, data_pointer, length, create_switch, code);

   where:
   file_name	(input)	is the file name to be put.

   data_pointer
   (input)	is a pointer to the data to be put.

   length	(input)	is the length of the data in characters.

   create_switch
   (input)	if this is "1"b, the file must not already exist
   in the bootload file system. If it does not,
   error_table_$namedup is returned.

   code	(output)	is a standard system status code.

   bootload_fs_$put_ptr:
   declare bootload_fs_$put_ptr entry (char (*), fixed bin (21), bit (1) aligned,
   ptr, fixed bin (35));
   call bootload_fs_$put (file_name, length, create_switch, data_pointer, code);

   where:
   file_name	(input)	is the file name to be put.

   length	(input)	is the length of the data to be written in
   characters.

   create_switch
   (input)	if this is "1"b, the file must not already exist
   in the bootload file system. If it does not,
   error_table_$namedup is returned.

   data_pointer
   (output)	a ptr to the area in the partition into which
   to put the file

   code	(output)	is a standard system status code.

   Note: After a put_ptr op, the user should call bootload_fs_$flush_sys.

   bootload_fs_$delete:
   declare bootload_fs_$delete entry (char (*), fixed bin (35));
   call bootload_fs_$delete (file_name, code);

   where:
   file_name	(input)	is the name of the file to delete.

   code	(output)	is a standard system status code.

   bootload_fs_$rename:
   declare bootload_fs_$rename entry (char (*), char (*), fixed bin (35));
   call bootload_fs_$rename (old_file_name, new_file_name, code);

   where:
   old_file_name	(input)
   is the file to be renamed.

   new_file_name	(input)
   is the new name.

   code	(output)	is a standard system status code.

   bootload_fs_$init:
   declare bootload_fs_$init entry (bit (1) aligned, fixed bin, fixed bin (35));
   call bootload_fs_$init (init_switch, length, code);

   where:
   init_switch
   (input)	if this is "1"b, then reinitialize the partition
   to length length. Otherwise, expect it to be
   initialized.

   length	(input)   if init_switch is "1"b, this is the length in
   pages of the partition.

   code	(output)	is a standard error code. If init_switch is
   not "1"b, and the partition does not have the
   correct sentinels, it will be
   error_table_$improper_data_format.

*/
%page;

/*

   The following is the basic data structure of the partition.  The partition
   must be accessable before it can be seen as a segment by doing disk io to pick
   up the correct page.  The first two pages of the partition are reserved for the
   header.  This includes the directory and the free block map.  Thereafter the
   partition is considered to consist of 64 word character blocks, to make
   finding them easy.  Files are made of contiguous sets of blocks.
   Initialization or compaction sweeps the directory to recreate the
   free map to recover pages lost. All allocations start by clearing the free bit,
   so that blocks cannot be reused, ever.

*/

declare  1 bootload_file_partition$
			  aligned external,
	 2 part_header	  aligned,
	   3 small_things	  aligned,
	     4 sentinel	  char (32),
	     4 part_pages	  fixed bin,		/* length in pages of partition */
	     4 part_blocks	  fixed bin,		/* length in 64 word blocks WITHOUT header */
	   3 maps		  aligned,
	     4 free_block_map (4048) bit (1) unal,	/* max 64 word blocks in 253K */
						/* maximum number of 64 word blocks in a 255 word partition */
	     4 pad_align1	  bit (20) unal,
	     4 free_file_map  (174) bit (1) unal,
	     4 pad_align2	  bit (6) unal,		/* brings to 200 octal */
	   3 directory	  (174) aligned,
	     4 name	  char (32) unal,
	     4 length_in_chars
			  fixed bin (21),		/* not including fractional blocks */
	     4 first_block	  fixed bin,
	     4 n_blocks	  fixed bin,
	   3 pad_align3	  (6) fixed bin;		/* bring to 2 pages */

declare  1 partition_storage	  aligned based (addr (bootload_file_partition$)),
	 2 header_page	  (header_size) bit (36) aligned,
	 2 blocks		  (part_header.part_blocks) char (256) unal;

declare  block_map		  (part_header.part_blocks) bit (1) unal defined (part_header.free_block_map);

declare  block_map_string	  bit (part_header.part_blocks) defined (part_header.free_block_map) unal;

%include bootload_fs_list;

declare  (
         a_init_switch	  bit (1) aligned,
         a_area		  area (*),
         a_part_length	  fixed bin (19),
         a_file_name	  char (*),
         a_new_file_name	  char (*),
         a_code		  fixed bin (35),
         a_create_switch	  bit (1) aligned,
         a_data_pointer	  pointer,
         a_length		  fixed bin (21),
         a_max_length	  fixed bin (21)
         )		  parameter;

dcl  header_size	        fixed bin (19) init (size (bootload_file_partition$));
						/* size of the header in words */
dcl  i		        fixed bin;
dcl  code		        fixed bin (35);
dcl  file_name	        char (32);
dcl  new_file_name	        char (32);
dcl  copy_length	        fixed bin (21);
dcl  copy_data	        character (copy_length) based;
dcl  data_pointer	        pointer;
dcl  copy_pointer	        pointer;
dcl  file_idx	        fixed bin;
dcl  file_count	        fixed bin;
dcl  i_length	        fixed bin (21);
dcl  max_length	        fixed bin (21);
dcl  init_switch	        bit (1) aligned;
dcl  create_switch	        bit (1) aligned;
dcl  part_length	        fixed bin (19);
dcl  ptr_entry	        bit (1) aligned;


dcl  Sentinel	        char (32) aligned init ("Bootload Multics File Partition") internal static options (constant);
dcl  Blocks_per_page        fixed bin int static init (16) options (constant);
dcl  Chars_per_block        fixed bin int static init (256) options (constant);
dcl  (addr, bin, copy, divide, hbound, index, min, null, segno, size, string, substr, sum)
		        builtin;
dcl  area		        condition;
dcl  get_ptrs_$given_segno  entry (fixed bin (15)) returns (ptr);
dcl  get_ring_	        entry () returns (fixed bin (3));
dcl  pc_wired$write_wait    entry (ptr, fixed bin, fixed bin);
dcl  sub_err_	        entry () options (variable);
dcl  syserr$error_code      entry options (variable);
dcl  (
     error_table_$noentry,
     error_table_$noalloc,
     error_table_$namedup,
     error_table_$long_record,
     error_table_$improper_data_format
     )		        ext static fixed bin (35);
dcl  sys_info$bce_max_seg_size
		        ext static fixed bin (18);
dcl  sys_info$initialization_state
		        ext fixed bin;
%page;


init:
     entry (a_init_switch, a_part_length, a_code);
	init_switch = a_init_switch;
	part_length = a_part_length;
	call SETUP_init;
	if ^init_switch then do;			/* the partition has to be in good shape */
	     if part_header.sentinel ^= Sentinel then do;
		code = error_table_$improper_data_format;
		goto SET_CODE_RETURN;		/* caller should call us back with init_switch */
	     end;
	     a_code = 0;
	     return;
	end;
	else do;					/* we are redoing this */
	     part_header.part_pages = divide (part_length + 1023, 1024, 19, 0);
	     part_header.part_blocks =
		(part_header.part_pages - divide (header_size + 1023, 1024, 19, 0)) * Blocks_per_page;
	     string (part_header.free_block_map) = ""b;	/* allocate all possible blocks */
	     string (part_header.free_block_map) = copy ("1"b, hbound (part_header.free_block_map, 1));
						/* and free those that exist */
	     string (part_header.free_file_map) = copy ("1"b, hbound (part_header.directory, 1));
	     do i = 1 to hbound (part_header.directory, 1);
		part_header.directory (i).name = "";
		part_header.directory (i).first_block = -1;
						/* flag unused entries in case of bad crazyness */
		part_header.directory (i).n_blocks = 0;
		part_header.sentinel = Sentinel;
	     end;
	     call flush_sys;
	     code = 0;
SET_CODE_RETURN:
	     a_code = code;
	     return;
	end;
%page;

lookup:
     entry (a_file_name, a_length, a_code);
	file_name = a_file_name;
	code = 0;
	i_length = 0;
	call LOOKUP (file_name, file_idx, a_code);
	if code = 0 then do;
	     i_length = part_header.directory (file_idx).length_in_chars;
	end;
	a_length = i_length;
	a_code = code;
	return;					/* how simple */

%page;

list:
     entry (a_area, a_data_pointer, a_code);
	call SETUP;
	call COUNT_FILES (file_count);		/* dont depend on redundant (possibly inconsistant data) */
	if file_count = 0 then do;
	     a_code = error_table_$noentry;		/* avoid unnecessary  allocation */
	     a_data_pointer = null ();
	     return;
	end;
	bootload_fs_list_n_files = file_count;
	on area goto LIST_NO_ALLOC;
	allocate bootload_fs_list in (a_area);
	revert area;
	file_count = 0;
	do i = 1 to hbound (part_header.directory, 1) while (file_count < bootload_fs_list_n_files);
	     if ^part_header.free_file_map (i) then do;
		file_count = file_count + 1;
		bootload_fs_list.files (file_count).name = part_header.directory (i).name;
		bootload_fs_list.files (file_count).length = part_header.directory (i).length_in_chars;
	     end;
	end;
	a_code = code;
	a_data_pointer = bootload_fs_list_ptr;
	return;
LIST_NO_ALLOC:
	a_code = error_table_$noalloc;
	a_data_pointer = null ();
	return;
%page;

get:
     entry (a_file_name, a_data_pointer, a_max_length, a_length, a_code);
	call SETUP;
	max_length = a_max_length;
	data_pointer = a_data_pointer;
	file_name = a_file_name;
	call LOOKUP (file_name, file_idx, code);
	if code ^= 0
	then goto SET_CODE_RETURN;
	i_length = part_header.directory (file_idx).length_in_chars;
	copy_length = min (i_length, max_length);
	copy_pointer = addr (partition_storage.blocks (part_header.directory (file_idx).first_block));
	data_pointer -> copy_data = copy_pointer -> copy_data;
	if i_length > max_length
	then code = error_table_$long_record;
	a_code = code;
	a_length = i_length;
	return;

get_ptr:
     entry (a_file_name, a_data_pointer, a_length, a_code);
	call SETUP;
	file_name = a_file_name;
	call LOOKUP (file_name, file_idx, code);
	if code ^= 0
	then goto SET_CODE_RETURN;
	a_length = part_header.directory (file_idx).length_in_chars;
	a_data_pointer = addr (partition_storage.blocks (part_header.directory (file_idx).first_block));
	a_code = code;
	return;
%page;


put:
     entry (a_file_name, a_data_pointer, a_length, a_create_switch, a_code);
	ptr_entry = "0"b;
	data_pointer = a_data_pointer;
	goto put_join;

put_ptr:
     entry (a_file_name, a_length, a_create_switch, a_data_pointer, a_code);
	ptr_entry = "1"b;

put_join:
	call SETUP;
	file_name = a_file_name;
	i_length = a_length;
	if i_length > sys_info$bce_max_seg_size * 4 then do;
	     a_code = error_table_$long_record;
	     return;
	end;
	create_switch = a_create_switch;
	call LOOKUP (file_name, file_idx, code);
	if create_switch then do;			/* MUST not exist */
	     if code = 0 then do;
		a_code = error_table_$namedup;
		return;
	     end;
	end;
	else do;
	     if code = 0 then do;			/* we must delete old entry */
		call DELETE (file_name, (0));		/* it will succeed */
	     end;
	end;
	call CREATE (file_name, file_idx, i_length, code);/* perhaps no space */
	if code ^= 0 then do;
	     call flush_sys;			/* We may have deleted old */
	     goto SET_CODE_RETURN;
	end;
	if ptr_entry
	then a_data_pointer = addr (partition_storage.blocks (part_header.directory (file_idx).first_block));
	else do;
	     copy_length = i_length;
	     copy_pointer = addr (partition_storage.blocks (part_header.directory (file_idx).first_block));
	     copy_pointer -> copy_data = data_pointer -> copy_data;
	     call flush_sys;
	end;
	a_code = 0;
	return;

flush_sys:
     entry;					/* used after a put_ptr op */

	call flush_sys;
	return;
%page;


rename:
     entry (a_file_name, a_new_file_name, a_code);
	call SETUP;
	file_name = a_file_name;
	new_file_name = a_new_file_name;
	call LOOKUP (file_name, file_idx, code);
	if code ^= 0
	then goto SET_CODE_RETURN;
	call LOOKUP (new_file_name, (0), code);
	if code = 0 then do;
	     code = error_table_$namedup;
	     goto SET_CODE_RETURN;
	end;
	code = 0;
	part_header.directory (file_idx).name = new_file_name;
	call flush_sys;
	a_code = code;
	return;
%page;

delete:
     entry (a_file_name, a_code);
	call SETUP;
	file_name = a_file_name;
	call DELETE (file_name, code);
	call flush_sys;
	a_code = code;
	return;

%page;

LOOKUP:
     procedure (l_file_name, l_file_idx, l_code);

dcl  (
     l_file_name	        char (*),
     l_file_idx	        fixed bin,
     l_code	        fixed bin (35)
     )		        parameter;
dcl  l		        fixed bin;

	l_code = 0;
	l_file_idx = -1;
	do l = 1 to hbound (part_header.directory, 1) while (l_file_idx < 0);
	     if ^part_header.free_file_map (l)		/* we could do multiple indexes, but this dosent have to be fast */
	     then if part_header.directory (l).name = l_file_name then do;
		     l_file_idx = l;
		end;
	end;
	if l_file_idx = -1
	then l_code = error_table_$noentry;
	return;
     end LOOKUP;

DELETE:
     procedure (d_file_name, d_code);

dcl  (
     d_file_name	        char (*),
     d_code	        fixed bin (35)
     )		        parameter;
dcl  d		        fixed bin;
dcl  done		        bit (1) aligned;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* the free-ing allocation is as follows -- always turn off in-use FIRST. then if we	*/
/* crash in the middle, all we will do is lose track of some space, which we will	*/
/* recover at the next COMPACT, if we ever do one.  The other order might leave		*/
/* offsets to freed storage in the directory.					*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	d_code = 0;
	done = ""b;
	do d = 1 to hbound (part_header.directory, 1) while (^done);
	     if ^part_header.free_file_map (d)
	     then if part_header.directory (d).name = d_file_name then do;
		     part_header.free_file_map (d) = "1"b;
						/* FREE */
		     part_header.directory (d).name = "";
						/* cleanliness ... */
		     substr (block_map_string, part_header.directory (d).first_block,
			part_header.directory (d).n_blocks) = copy ("1"b, part_header.directory (d).n_blocks);
		     done = "1"b;
		end;
	end;
	if ^done
	then d_code = error_table_$noentry;
	return;
     end DELETE;

COUNT_FILES:
     procedure (count);

dcl  count	        fixed bin parameter;

	count = hbound (part_header.directory, 1) - sum (bin (part_header.free_file_map, 1));
						/* arent builtins wonderful? */
	return;
     end COUNT_FILES;
%page;

CREATE:
     procedure (c_file_name, c_file_idx, c_length, c_code); /* THIS DOES NOT CHECK NAMEDUP */

dcl  (
     c_file_name	        char (*),
     c_file_idx	        fixed bin,
     c_length	        fixed bin (21),
     c_code	        fixed bin (35)
     )		        parameter;

dcl  c_free_block	        fixed bin;
dcl  block_need	        fixed bin;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* strategy: FIRST allocate storage, so that if we compact we will search for a free index */
/* in the compacted file table.						*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	c_code = 0;
	block_need = divide (c_length + Chars_per_block - 1, Chars_per_block, 17, 0);
	c_free_block = FIND_FREE (block_need);		/* look for some space */
	if c_free_block < 1
	then
retry:
	     do;
		call COMPACT;			/* Squueeze, wring */
		c_free_block = FIND_FREE (block_need);
		if c_free_block < 1
		then goto C_NO_ALLOC;
	     end;

	substr (block_map_string, c_free_block, block_need) = ""b;
						/* check them off */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* if we got here, we made an allocation.					*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	c_file_idx = index (string (part_header.free_file_map), "1"b);
	if c_file_idx < 1 then do;
	     c_code = error_table_$noalloc;
	     if get_ring_ () = 0
	     then call syserr$error_code (3, c_code, "bootload_fs_: CREATE: no free file entries.");
	     else call sub_err_ (c_code, "bootload_fs_", "c", null (), (0), "CREATE: no free file entries.");
	     return;
	end;

	part_header.free_file_map (c_file_idx) = ""b;	/* all ours */
	part_header.directory (c_file_idx).first_block = c_free_block;
	part_header.directory (c_file_idx).name = c_file_name;
						/* it we die, leave a name that can be deleted */
	part_header.directory (c_file_idx).n_blocks = block_need;
	part_header.directory (c_file_idx).length_in_chars = c_length;

	return;
C_NO_ALLOC:
	c_code = error_table_$noalloc;
	if get_ring_ () = 0
	then call syserr$error_code (3, c_code, "bootload_fs_ CREATE: partition filled.");
	else call sub_err_ (c_code, "bootload_fs_", "c", null (), (0), "CREATE: partition filled.");
     end CREATE;

COMPACT:
     procedure;

dcl  copy_block_map	        (hbound (block_map, 1)) bit (1) unal;
dcl  copy_block_map_string  bit (hbound (block_map, 1)) unal defined (copy_block_map);
dcl  copy_file_map	        (hbound (part_header.free_file_map, 1)) bit (1) unal;
dcl  (n_to_free, first_to_free, free_block, next_file, c_file)
		        fixed bin;
dcl  (copy_pointer, data_pointer)
		        pointer;

	string (copy_block_map) = copy ("1"b, hbound (block_map, 1));
	string (copy_file_map) = copy ("1"b, hbound (part_header.free_file_map, 1));
						/* FREE all blocks and files */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* first we make a new block_map and file_map without any garbage -- useless directory	*/
/* entries or unclaimed blocks. If we get interrupted while putting one of these in	*/
/* there is no harm donw. Then we can shift down, allocation and freeing blocks one file	*/
/* at a time.								*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	do c_file = 1 to hbound (part_header.directory, 1);
	     if ^part_header.free_file_map (c_file) then do;
						/* claims to be for real */
		if part_header.directory (c_file).name ^= "" & part_header.directory (c_file).first_block > 0
		     & part_header.directory (c_file).n_blocks > 0 then do;
						/* its reasonable */
		     copy_file_map (c_file) = ""b;	/* IN USE */
		     substr (copy_block_map_string, part_header.directory (c_file).first_block,
			part_header.directory (c_file).n_blocks) = ""b;
						/* IN USE */
		end;
	     end;					/* do not bother to free garbage in the real maps. If we crash, the next init call will do this over */
	end;

/* now put in the new maps */

	part_header.free_file_map = copy_file_map;
	block_map = copy_block_map;

/* now we do the real compaction, closing up space, one file at a time */

	do free_block = FIND_FREE (1) repeat (FIND_FREE (1)) while (free_block > 0);
	     next_file = find_above (free_block);	/* are there any files above the first free block? */
	     if next_file < 1
	     then goto DONE_COMPACT;			/* no more files */
						/* move this file down into free_block and cetra */

	     substr (block_map_string, free_block, part_header.directory (next_file).first_block - free_block) = ""b;
						/* IN USE */
	     copy_pointer = addr (partition_storage.blocks (free_block));
	     data_pointer = addr (partition_storage.blocks (part_header.directory (next_file).first_block));
	     copy_length = part_header.directory (next_file).length_in_chars;
	     copy_pointer -> copy_data = data_pointer -> copy_data;
						/* data shifted down */
	     n_to_free = part_header.directory (next_file).first_block - free_block;
	     first_to_free =
		part_header.directory (next_file).first_block + part_header.directory (next_file).n_blocks
		- n_to_free;
	     part_header.directory (next_file).first_block = free_block;
	     substr (block_map_string, first_to_free, n_to_free) = copy ("1"b, n_to_free);
	end;
DONE_COMPACT:
	return;
find_above:
	procedure (what) returns (fixed bin);

dcl  what		        fixed bin;
dcl  fi		        fixed bin;

/* we have to look for a file that claims to own blocks above what */
/* contract is to return the file index of the file owning the block above */

	     do fi = 1 to hbound (part_header.directory, 1);
		if ^part_header.free_file_map (fi)
		then				/* has to be in use to be meaningful */
		     if part_header.directory (fi).first_block > what
		     then return (fi);
	     end;
	     return (-1);				/* no suce beastie */
	end find_above;
     end COMPACT;

FIND_FREE:
     procedure (f_length) returns (fixed bin);

dcl  f_length	        fixed bin;

	return (index (string (block_map), copy ("1"b, f_length)));
     end FIND_FREE;
SETUP:
     procedure;
	if part_header.sentinel ^= Sentinel then do;
	     a_code = error_table_$improper_data_format;
	     goto RETURN;
	end;
SETUP_init:
     entry;
	code = 0;
     end SETUP;
RETURN:
	return;
%page;
flush_sys:
     proc;

	if sys_info$initialization_state < 4
	then call pc_wired$write_wait (get_ptrs_$given_segno (segno (addr (bootload_file_partition$))), 0, -1);
						/* force write */
	return;
     end flush_sys;
     end bootload_fs_;
