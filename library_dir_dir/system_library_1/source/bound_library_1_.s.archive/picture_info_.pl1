/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style2 */

/* Modified 831010 BIM to initialize strings */

picture_info_:
     proc (string, info_pt, error_code);

	dcl     string		 char (*),
	        info_pt		 ptr,
	        error_code		 fixed bin;

	dcl     (i, j, n, count, indx, number, value)
				 fixed bin,
	        state		 fixed bin init (1),
	        (switch, minus_bit)	 bit (1) aligned init ("0"b),
	        char		 char (1) aligned,
	        sign3		 char (3) aligned init ("s+-") int static options (constant),
	        test_string		 char (64) var init (""),
	        normalized_string	 char (64) var init ("");

	dcl     picture_char	 char (32) aligned init ("axek9yvz*$+-scrdb.,/") int static options (constant);
	dcl     digit		 char (10) aligned init ("1234567890") int static options (constant);

	dcl     (divide, index, length, mod, substr)
				 builtin;

	dcl     1 picture_constant	 aligned based (info_pt) like picture_image;

	picture_constant.type, picture_constant.scalefactor, picture_constant.explength, error_code, number, n, value =
	     0;

	do i = 1 to length (string);

	     char = substr (string, i, 1);
	     goto pl (state);


pl (1):
	     if char = "("
	     then do;
		     state = 2;
		     goto next;
		end;

	     if char = "f"
	     then do;
		     state = 5;
		     goto next;
		end;

	     value = 1;

pl (4):
	     indx = index (picture_char, char);
	     if indx = 0
	     then goto err440;

	     if indx = 4 | indx = 7			/* k and v does not count in the picture */
	     then number = number + 1;

	     if indx < 3
	     then picture_constant.type = char_picture;
	     else if indx < 5
	     then picture_constant.type = real_float_picture;

	     switch = "1"b;				/* we have at least one picture character */
	     do j = 1 to value;
		normalized_string = normalized_string || char;
	     end;

	     if indx < 17
	     then do j = 1 to value;
		     test_string = test_string || char;
		end;

	     n = n + value;
	     state = 1;
	     value = 0;

	     goto next;

pl (2):
	     indx = index (digit, char);
	     if indx = 0
	     then goto err440;

	     value = value * 10 + mod (indx, 10);

	     state = 3;
	     goto next;

pl (3):
	     if char = ")"
	     then do;
		     state = 4;
		     goto next;
		end;

	     goto pl (2);

pl (5):
	     if char = "("
	     then do;
		     state = 6;
		     goto next;
		end;

	     goto err440;

pl (6):
	     if char = "+"
	     then do;
		     state = 7;
		     goto next;
		end;

	     if char = "-"
	     then do;
		     state = 7;
		     minus_bit = "1"b;
		     goto next;
		end;

pl (7):
	     indx = index (digit, char);
	     if indx = 0
	     then goto err440;

	     value = value * 10 + mod (indx, 10);

	     state = 8;
	     goto next;

pl (8):
	     if char = ")"
	     then do;
		     if i ^= length (string)
		     then goto err440;

		     if value > 255 | value > 256 & ^minus_bit
		     then goto err434;

		     if minus_bit
		     then value = -value;

		     picture_constant.scalefactor = value;

		     goto next;
		end;

	     goto pl (7);

next:
	end;

	if ^switch
	then goto err440;

	if n - number > 63
	then goto err414;

	if picture_constant.type = 0
	then picture_constant.type = real_fixed_picture;

	picture_constant.prec, picture_constant.scale = 0;

	picture_constant.varlength = n - number;

	picture_constant.piclength = n;

	picture_constant.drift_character = " ";

	picture_constant.chars = normalized_string;

	if picture_constant.type = char_picture
	then do;
		if verify (substr (normalized_string, 1, n), "9ax") ^= 0
		then goto err457;

		picture_constant.prec = n;

		return;
	     end;

	if picture_constant.type = real_float_picture
	then do;
		i = 0;
		state = 1;
		n = length (test_string);
		switch = "0"b;

fl:
		i = i + 1;
		if i > n
		then do;
			picture_constant.explength = count;
			return;
		     end;

		char = substr (test_string, i, 1);

		goto ll (state);

ll (1):
		indx = index (sign3, char);
		if indx ^= 0
		then do;
			state = 2;
			goto fl;
		     end;

ll (2):
		if ^digit_positions (i)
		then do;
			i = 1;
			goto ll (3);
		     end;

		state = 4;
		goto fl;

ll (3):
		if ^drifting_sign (i)
		then goto err458;

		state = 4;
		goto fl;

ll (4):
		if char ^= "e" & char ^= "k"
		then goto err458;

		count = 0;
		state = 5;
		goto fl;

ll (5):
		state = 6;

		indx = index (sign3, char);
		if indx ^= 0
		then goto fl;

ll (6):
		count = count + 1;
		if count > 3
		then goto err458;

		if char = "9"
		then do;
			switch = "1"b;
			goto fl;
		     end;

		if char = "z"
		then if switch
		     then goto err458;
		     else goto fl;

		goto err458;
	     end;

	if picture_constant.type = real_fixed_picture
	then do;
		n = length (test_string);

		if fixed_field ()
		then return;

		if drifting_field ()
		then return;

		goto err459;
	     end;

	return;

fixed_field:
     proc () returns (bit (1) aligned);

	dcl     (digit_position, dollar, sign)
				 bit (1) aligned init ("0"b);

	i = 0;

fx:
	i = i + 1;

	if i > n
	then if ^digit_position
	     then goto fx_ret0;
	     else goto fx_ret1;

	char = substr (test_string, i, 1);

	if char = "$"
	then do;
		if dollar
		then goto fx_ret0;
		dollar = "1"b;
		goto fx;
	     end;

	if index (sign3, char) ^= 0
	then do;
		if sign
		then goto fx_ret0;
		sign = "1"b;
		goto fx;
	     end;

	if digit_positions (i)
	then do;
		if digit_position
		then goto fx_ret0;
		digit_position = "1"b;
		goto fx;
	     end;

	if char = "c" & substr (test_string, i + 1, 1) = "r"
	     | char = "d" & substr (normalized_string, picture_constant.piclength, 1) = "b"
	then do;
		if sign
		then goto fx_ret0;
		if char = "d" & i = n
		then goto fx_ret1;
		if i + 1 ^= n
		then goto fx_ret0;
		goto fx_ret1;
	     end;

fx_ret0:
	return ("0"b);

fx_ret1:
	return ("1"b);

     end;

digit_positions:
     proc (i) returns (bit (1) aligned);

	dcl     c			 char (1) aligned init ("");
	dcl     (i, k)		 fixed bin;

	do k = i to n while (index ("z*", substr (test_string, k, 1)) = 0);
	end;

	if k <= n
	then c = substr (test_string, k, 1);

	if digit_v_digit (i)
	then if number >= 1000 | mod (number, 100) ^= 0
	     then goto dp_ret1;

	if c = ""
	then goto dp_ret0;

	if sandwich (c, i)
	then if mod (number, 100) ^= 0
	     then goto dp_ret1;
	     else do;
		     picture_constant.prec = divide (number, 1000, 15, 0);
		     if substr (test_string, i, 1) = c
		     then ;
		     else i = i - 1;
		end;
	else goto dp_ret0;

	i = i + 1;

	if ^digit_v_digit (i)
	then i = i - 1;

	goto dp_ret1;

dp_ret0:
	return ("0"b);

dp_ret1:
	picture_constant.scale = mod (number, 100);

	picture_constant.prec = picture_constant.prec + divide (number, 1000, 15, 0) + picture_constant.scale;
						/* i = k-1; purposely deleted */
	return ("1"b);

     end;

drifting_field:
     proc () returns (bit (1) aligned);

	dcl     (dr_dollar, dr_sign, dollar, sign)
				 bit (1) aligned init ("0"b);

	i = 0;
	state = 1;

df:
	i = i + 1;

	if i > n
	then if dr_sign | dr_dollar
	     then goto df1;
	     else goto df0;

	char = substr (test_string, i, 1);

	goto dfl (state);

dfl (1):
	if char = "$"
	then do;
		if dollar
		then goto df0;
		dollar = "1"b;

		state = 2;
		goto df;
	     end;

dfl (2):
	if drifting_sign (i)
	then do;
		if dr_sign
		then goto df0;
		dr_sign = "1"b;

		state = 1;
		goto df;
	     end;

	i = 1;
	state = 3;

dfl (3):
	if index (sign3, char) ^= 0
	then do;
		if sign
		then goto df0;
		sign = "1"b;

		state = 4;
		goto df;
	     end;

dfl (4):
	if drifting_dollar (i)
	then do;
		if dr_dollar
		then goto df0;
		dr_dollar = "1"b;

		state = 3;
		goto df;
	     end;

dfl (5):
	if char = "c" & substr (test_string, i + 1, 1) = "r"
	     | char = "d" & substr (normalized_string, picture_constant.piclength, 1) = "b"
	then do;
		if sign
		then goto df0;
		if char = "d" & i = n
		then goto df1;
		if i + 1 ^= n
		then goto df0;
		goto df1;
	     end;

df0:
	return ("0"b);

df1:
	return ("1"b);

     end;

drifting_sign:
     proc (i) returns (bit (1) aligned);

	dcl     c			 char (1) aligned;
	dcl     (i, k)		 fixed bin;

	do k = i to n while (index (sign3, substr (test_string, k, 1)) ^= 0);
	end;

	if k >= 3
	then c = substr (test_string, 1, 1);
	else goto ds0;

	if sandwich (c, i)
	then if number >= 1000
	     then if mod (number, 100) ^= 0
		then goto ds1;
		else if substr (test_string, i, 1) = c
		then i = i - divide (number, 1000, 15, 0) + 1;
		else i = i - divide (number, 1000, 15, 0);
	     else i = i - mod (number, 100);

	if ^signs (i)
	then goto ds0;

	picture_constant.prec = count;

	i = i + 1;

	if ^digit_v_digit (i)
	then i = i - 1;

	goto ds1;

ds0:
	return ("0"b);

ds1:						/* i = k-1; purposely deleted */
	picture_constant.scale = mod (number, 100);

	picture_constant.prec = picture_constant.prec + divide (number, 1000, 15, 0) + picture_constant.scale - 1;

	picture_constant.drift_character = c;

	return ("1"b);

     end;

drifting_dollar:
     proc (i) returns (bit (1) aligned);

	dcl     (i, k, count)	 fixed bin;

	number, count = 0;
	state = 1;
	k = i - 1;

dd_next:
	k = k + 1;
	if k > n
	then goto ddl1;

	char = substr (test_string, k, 1);

	goto ddl (state);

ddl (1):
	if char = "$"
	then do;
		state = 2;
		goto dd_next;
	     end;

	goto ddl0;

ddl (2):
	if char = "$"
	then do;
		count = count + 1;
		state = 3;
		goto dd_next;
	     end;

	if char = "v"
	then do;
		state = 5;
		goto dd_next;
	     end;

	goto ddl0;

ddl (3):
	if char = "$"
	then do;
		count = count + 1;
		goto dd_next;
	     end;

	if digit_v_digit (k)
	then do;
		if number = 100
		then state = 5;
		else state = 4;

		goto dd_next;
	     end;

ddl (4):
	goto ddl1;

ddl (5):
	if char = "$"
	then do;
		state = 6;
		picture_constant.scale = picture_constant.scale + 1;
		goto dd_next;
	     end;

	goto ddl0;

ddl (6):
	if char = "$"
	then do;
		picture_constant.scale = picture_constant.scale + 1;
		goto dd_next;
	     end;

	goto ddl1;

ddl0:
	return ("0"b);

ddl1:
	i = k - 1;
	picture_constant.scale = picture_constant.scale + mod (number, 100);

	picture_constant.prec = divide (number, 1000, 15, 0) + count + picture_constant.scale;

	picture_constant.drift_character = "$";

	return ("1"b);

     end;

digits:
     proc (i) returns (bit (1) aligned);

	dcl     (i, k)		 fixed bin;

	count = 0;

	do k = i to n;
	     char = substr (test_string, k, 1);

	     if char = "9" | char = "y"
	     then count = count + 1;
	     else goto digits_return;
	end;

digits_return:
	if count = 0
	then return ("0"b);

	i = k - 1;
	return ("1"b);

     end;

signs:
     proc (i) returns (bit (1) aligned);

	dcl     (i, k)		 fixed bin;
	dcl     c			 char (1) aligned;

	count = 0;

	do k = i to n;
	     char = substr (test_string, k, 1);

	     indx = index (sign3, char);
	     if indx ^= 0
	     then if count = 0
		then do;
			count = 1;
			c = char;
		     end;
		else if c ^= char
		then goto signs_return;
		else count = count + 1;
	     else goto signs_return;
	end;

signs_return:
	if count < 2
	then return ("0"b);

	i = k - 1;
	return ("1"b);

     end;

digit_v_digit:
     proc (i) returns (bit (1) aligned);

	dcl     (i, k)		 fixed bin;

	number = 0;
	state = 1;

	k = i - 1;

dvd:
	k = k + 1;
	if k > n
	then goto dvd_ret1;

	char = substr (test_string, k, 1);

	goto dvdl (state);

dvdl (1):
	if digits (k)
	then do;
		number = 1000 * count;
		state = 2;
		goto dvd;
	     end;

dvdl (2):
	if char = "v"
	then do;
		number = number + 100;
		state = 3;
		goto dvd;
	     end;

	if state ^= 1
	then goto dvd_ret1;

	return ("0"b);

dvdl (3):
	if digits (k)
	then do;
		number = number + count;
		state = 4;
		goto dvd;
	     end;

dvdl (4):
	goto dvd_ret1;

dvd_ret1:
	i = k - 1;
	return ("1"b);

     end;

sandwich:
     proc (c, i) returns (bit (1) aligned);

	dcl     c			 char (1) aligned;
	dcl     (i, k)		 fixed bin;

	number = 0;
	state = 1;

	k = i - 1;

sand:
	k = k + 1;
	if k > n
	then goto sand_ret1;

	char = substr (test_string, k, 1);

	goto sandl (state);

sandl (1):
	if char = c
	then do;
		number = number + 1000;
		goto sand;
	     end;

	if char = "v"
	then do;
		state = 2;
		number = number + 100;
		goto sand;
	     end;

	if number ^= 0
	then goto sand_ret1;

	return ("0"b);

sandl (2):
	if char = c
	then do;
		number = number + 1;
		goto sand;
	     end;

	goto sand_ret1;

sand_ret1:
	i = k - 1;
	return ("1"b);
	;

     end;

err414:
	error_code = 414;
	return;

err434:
	error_code = 434;
	return;

err440:
	error_code = 440;
	return;

err457:
	error_code = 457;
	return;

err458:
	error_code = 458;
	return;

err459:
	error_code = 459;
	return;

%include picture_image;
%include picture_types;

     end picture_info_;
