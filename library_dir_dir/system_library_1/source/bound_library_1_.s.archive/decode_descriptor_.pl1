/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* Name:  decode_descriptor_							*/
/*									*/
/*      This subroutine decodes an argument descriptor, returning from the descriptor	*/
/* the argument type, a packing indicator, the number of dimensions in the argument,	*/
/* and the size and scale of the argument.					*/
/*									*/
/* Status									*/
/*									*/
/* 1) Modified on:  September 16, 1975  by  Gary C. Dixon				*/
/*     a) bug fixed in decoding of new area descriptors; they had been treated as having	*/
/*	both size and scale; they now have only size.				*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/* Last modified (date and reason):
   Aug 9, 1977 by S. Webber to make better use of static storage
   Modified 771026 by PG to handle packed-decimal and unsigned descriptor types
   Modified 780407 by PG to delete packed-ptr descriptor code */
/* Changed for extended data types, removed V1 support 10/20/83 M. Weaver */
/* Modified Dec.14, 1983 by M. Weaver to make size arg fixed bin (24) */

decode_descriptor_:
     proc (P_arg_list_ptr, P_num, P_type, P_packed, P_ndims, P_size, P_scale);


/* Parameters */

dcl P_arg_list_ptr ptr;				/* Points to either arg_list or descriptor (Input) */
dcl P_num fixed bin;				/* index of arg, 0 => P_arg_list_ptr points to descrip */
dcl P_type fixed bin;				/* data type (Output) */
dcl P_packed bit (1) aligned;				/* "1"b if P_packed (Output) */
dcl P_ndims fixed bin;				/* number of array dims (Output) */
dcl P_size fixed bin (24);				/* string size or arithmetic precision (Output) */
dcl P_scale fixed bin;				/* arithmetic scale (Output) */

/* Automatic */

dcl arg_count fixed bin;

/* Constants */

dcl  new_type (518:528) fixed bin int static options (constant)
						/* Conversion table for old-style to new-style */
	init (18,					/* 518 -> Area */
	19,					/* 519 -> BS */
	21,					/* 520 -> CS */
	20,					/* 521 -> VBS */
	22,					/* 522 -> VCS */
	17,					/* 523 -> A-structure */
	18,					/* 524 -> A-area */
	19,					/* 525 -> ABS */
	21,					/* 526 -> ACS */
	20,					/* 527 -> AVBS */
	22);					/* 528 -> AVCS */

dcl (AREA_TYPE init (18),
     REAL_FIXED_DEC_LS_OVER_TYPE init (29),
     EXTENSION_TYPE init (58)) fixed bin int static options (constant);

/* Based */

%include arg_descriptor;
%include arg_list;
%page;
	if P_num = 0 then do;

	     arg_descriptor_ptr = P_arg_list_ptr;	/* points directly at the descriptor */
	     go to CHECK;
	end;

	arg_count = P_arg_list_ptr -> arg_list.header.arg_count;

	if P_num > arg_count then do;
BAD_DESCRIPTOR:
	     P_type = -1;
	     return;
	end;

	if P_arg_list_ptr -> arg_list.header.desc_count = 0 then go to BAD_DESCRIPTOR;

	if P_arg_list_ptr -> arg_list.header.call_type = Envptr_supplied_call_type then
	     arg_descriptor_ptr = P_arg_list_ptr -> arg_list_with_envptr.desc_ptrs (P_num);
	else arg_descriptor_ptr = P_arg_list_ptr -> arg_list.desc_ptrs (P_num);
CHECK:
	if ^arg_descriptor.flag then go to BAD_DESCRIPTOR;  /* Version 1 or invalid */

	P_type = arg_descriptor.type;
	P_packed = arg_descriptor.packed;
	P_ndims = arg_descriptor.number_dims;

	if P_type = EXTENSION_TYPE |
	     (P_type >= AREA_TYPE & P_type < REAL_FIXED_DEC_LS_OVER_TYPE) then do;

		P_size = arg_descriptor.size;
		P_scale = 0;
	end;
	else do;
	     P_size = fixed_arg_descriptor.precision;
	     P_scale = fixed_arg_descriptor.scale;
	end;

	if P_type = EXTENSION_TYPE then P_type = extended_arg_descriptor.real_type;

	return;

end decode_descriptor_;
