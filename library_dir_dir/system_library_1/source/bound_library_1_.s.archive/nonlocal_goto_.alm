" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

" UNWINDER_UTIL_ - Utility Programs for the unwinder.
"	9/20/72 - Noel I. Morris
" partly recoded and generalized to work with given entry pointer
" 	5/17/73 - M. B. Weaver
" modified to set stack ent pointer  3/10/78 - M. B. Weaver


	name	nonlocal_goto_


	include	stack_header

	include	stack_frame


" 
" NEW_RING - Switch to another stack and "call" a specified procedure.
"	A stack frame representing a call to the procedure has been
"	manufactured in the target stack.  This entry is called
"	when "calling" across stack segments.
"
" Calling sequence:
"	call nonlocal_goto_$different_ring (sp, entry_ptr)
"
" Where:
"	sp -> stack frame for procedure caller
"
"	entry_ptr -> procedure entry to be called
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "


	entry	different_ring

different_ring:
"	the next 3 instructions must be first because we want
"	to take everything we need out of the current stack before
"	abandoning it in case we get a fault in the middle
"
	eppbp	ap|2,*		bp -> current stack frame pointer
	eppbb	ap|4,*		bb -> location to transfer to
	eppsp	bp|0,*		sp -> new stack frame
	eppbp	sb|stack_header.stack_begin_ptr,*  reset the stack end ptr
	spribp	sb|stack_header.stack_end_ptr	abandon the current stack

"	now we  would like to call the procedure in the higher ring;
"	however, since one cannot directly call into a higher ring
"	an rtcd instruction will be used, and pr7 will be set ahead of time
"
	epbpsb	sp|0		set sb to new stack header
	eppap	sp|stack_frame.operator_ptr,*
	ldi	0,dl		must reset overflow mask for pl1
	rtcd	bb|0		bye bye



" 
" SAME_RING - Return to target stack frame.  Target pointer
"	has been placed in stack_frame's return pointer.
"	Intended to be called by the unwinder_.
"
" Calling sequence:
"	call nonlocal_goto_$same_ring (sp, entry_ptr)
"
" Where:
"	sp -> target stack frame.
"
"	entry_ptr -> procedure entry to be called
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "


	entry	same_ring

same_ring:
	eppbp	ap|2,*		bp -> current stack frame pointer
	eppbb	ap|4,*		bb -> location to transfer to
	epbpsb	bp|0,*		set sb to stack header
	eppap	bp|0,*		ap -> current (new) stack frame
	eppbp	ap|stack_frame.next_sp,*	bp -> new stack end
	inhibit	on
	spribp	sb|stack_header.stack_end_ptr  reset stack end pointer
	eppsp	ap|0		sp -> current stack frame
	inhibit	off

"	we would now like to say "return" to invoke the normal return
"	macro. However, doing this would cause a transfer (cross-ring)
"	to the user-ring version of pl1_oerators_ to invoke the operator.
"	Instead, we just hand code the same instructions ...
"	except that we use the supplied entry ptr in stead of return ptr

	eppap	sp|stack_frame.operator_ptr,*
	ldi	0,dl		must reset overflow mask for pl1
	rtcd	bb|0



	end
