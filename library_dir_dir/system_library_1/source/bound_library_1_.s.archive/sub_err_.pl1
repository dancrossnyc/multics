/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* Written by who knows who who knows when. */
/* Modified by Benson I. Margulies April 81 for new include file and q flag */
/* Modified by Benson I. Margulies November 81 for new calling sequence */

/* format: style2 */

sub_err_:
     procedure (P_code, name, flags, info_ptr, retval) options (support);

/* parameters */

	dcl     P_code		 fixed bin (35),	/* (input) status code */
	        name		 char (*),	/* (input) subsystem name */
	        flags		 bit (*),		/* (input) how to restart. "c" to continue, "s" to die  "q" to restart silently */
	        info_ptr		 ptr,		/* (input) optional further information */
	        retval		 fixed bin (35);	/* (input/output) return value from environment */


/* automatic */


	dcl     arg_list_ptr	 ptr,		/* ptr to our argument list */
	        arg_ptr		 ptr,		/* ptr to arg */
	        arg_len		 fixed bin (21),
	        arg_count		 fixed bin,
	        code		 fixed bin (35),	/* convert copy of status code */
	        cs		 char (256),	/* Formatted string */
	        lt		 fixed bin,	/* length of it */
	        cant_restart	 bit (1),		/* t if cnnnot restart */
	        ndims		 fixed bin,	/* junk for decode_descriptor_ */
	        packed		 bit (1) aligned,	/* .. */
	        prec		 fixed bin,	/* .. */
	        scale		 fixed bin,	/* .. */
	        type		 fixed bin;	/* .. */


	declare 1 sub_err_info	 aligned like sub_error_info automatic;

/* entries */

	dcl     cu_$arg_list_ptr	 entry (ptr);
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	dcl     cu_$arg_count	 entry (fixed bin, fixed bin (35));
	dcl     decode_descriptor_	 entry (ptr, fixed bin, fixed bin, fixed bin, bit (1) aligned, fixed bin,
				 fixed bin);
	dcl     ioa_$general_rs	 entry (ptr, fixed bin, fixed bin, char (*), fixed bin, bit (1), bit (1));
	dcl     signal_		 entry (char (*), ptr, ptr, ptr);

/* builtins */

	dcl     (addr, bin, index, null, size, substr)
				 builtin;

/* include files */

%include condition_info_header;
%include sub_error_info;
%include desc_dcls;
%include std_descriptor_types;

/* program */

	call cu_$arg_list_ptr (arg_list_ptr);
	call cu_$arg_count (arg_count, (0));
	if arg_count < 1
	then call error_no_args;

	call cu_$arg_ptr (1, arg_ptr, (0), code);
	call decode_descriptor_ (arg_list_ptr, 1, type, ndims, packed, prec, scale);

	if (type = real_fix_bin_1_dtype) & (packed = "0"b)
	then code = P_code;
	else do;
		intype = 2 * type + bin (packed, 1);
		if (type >= bit_dtype) & (type <= varying_char_dtype)
		then inclength = prec;
		else do;
			info.inprec = prec;
			info.inscale = scale;
		     end;
		outtype = 2 * real_fix_bin_1_dtype;
		outfo.outprec = 35;
		outfo.outscale = 0;
		call assign_ (addr (code), outtype, outscale_prec, arg_ptr, intype, inscale_prec);
	     end;

	sub_err_info.length = size (sub_err_info);	/* Fill in structure */
	sub_err_info.version = sub_error_info_version_1;
	cant_restart = "0"b;
	string (sub_err_info.action_flags) = ""b;
	sub_err_info.status_code = code;
	sub_err_info.retval = 0;
	sub_err_info.info_ptr = null ();
	sub_err_info.info_string = "";
	sub_err_info.name = "";

	if arg_count < 2
	then goto SIGNAL;

	sub_err_info.name = name;

	if arg_count < 3
	then go to SIGNAL;

	call cu_$arg_ptr (3, arg_ptr, arg_len, (0));
	call decode_descriptor_ (arg_list_ptr, 3, type, ndims, packed, prec, scale);
	if type = bit_dtype				/* new style call */
	then string (sub_err_info.action_flags) = string (flags);

	else begin;				/* This depends on the fact that an aligned char string is just an unaligned
   bit string that has some restrictions on its storage layout. Thus calling an
   aligned string unaligned is a harmless thing. */

		declare flags		 character (arg_len) based (arg_ptr) unaligned;

		sub_err_info.action_flags.cant_restart = (index (flags, "s") ^= 0);
						/* Fatal? */
		sub_err_info.action_flags.default_restart = (index (flags, "c") ^= 0);
						/* Continue? */
		sub_err_info.action_flags.quiet_restart = (index (flags, "q") ^= 0);

	     end;


	cant_restart = sub_err_info.action_flags.cant_restart;


	if arg_count < 4
	then go to SIGNAL;
	sub_err_info.retval = retval;

	if arg_count < 5
	then go to SIGNAL;

	sub_err_info.info_ptr = info_ptr;

	if arg_count < 6
	then go to SIGNAL;

	call ioa_$general_rs (arg_list_ptr, 6, 7, cs, lt, "0"b, "0"b);
	sub_err_info.info_string = substr (cs, 1, lt);

SIGNAL:
	call signal_ ("sub_error_", null, addr (sub_err_info), null);
						/* Blap out message */

	do while (cant_restart);			/* If user can't hack return */
	     call signal_ ("illegal_return", null, addr (sub_err_info), null);
	end;

	if arg_count >= 4
	then retval = sub_err_info.retval;		/* Return's ok, what did environment do? */
RETURN:
	return;

error_no_args:
     procedure;
	declare error_table_$badcall	 fixed bin (35) ext static;
	declare sub_err_		 entry external options (variable);
						/* get descriptors onto this call */

	call sub_err_ (error_table_$badcall, "sub_err_", ""b, (0), null (), "^a",
	     "No arguments supplied in a call to sub_err_.");
						/* and why not recurse */
	go to RETURN;
     end error_no_args;


     end sub_err_;
