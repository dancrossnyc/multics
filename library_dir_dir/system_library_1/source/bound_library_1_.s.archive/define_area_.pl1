/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


define_area_: proc (a_area_infop, a_code);


/****^  HISTORY COMMENTS:
  1) change(75-01-01,Webber), approve(), audit(), install():
      Unknown date, coded by S. Webber.
  2) change(76-08-01,Weaver), approve(), audit(), install():
      Modified by M. Weaver to fix get_next_area_ptr_.
  3) change(76-08-01,RBarnes), approve(), audit(), install():
      Modified for extendable no_free areas.
  4) change(77-04-01,Weaver), approve(), audit(), install():
      Modified to make release_area_ safer and easier to use.
  5) change(77-08-01,RBarnes), approve(), audit(), install():
      Modified to implement zero_on_alloc for no_free areas.
  6) change(77-08-20,Green), approve(), audit(), install():
      Modified by PG to fix bug (must init zero_on_free areas to zero).
  7) change(78-09-01,Carlyle), approve(), audit(), install():
      Modified by K. Carlyle to fix bug (area size must be at least 32).
  8) change(80-01-01,Weaver), approve(), audit(), install():
      Modified to make release_area_ zero only to next_virgin.
  9) change(81-06-01,Donner), approve(), audit(), install():
      Modified by E. Donner to set ring brackets on extensible area segment.
 10) change(86-05-15,Lippard), approve(86-06-23,MCR7438),
     audit(86-08-04,Hartogs), install(86-08-19,MR12.0-1120):
      Modified by Jim Lippard to set ring brackets on additional segments in
      area to be the same as component 0 regardless of system bit; and to not
      allow an area to be defined starting at an odd address.
 11) change(86-09-18,Lippard), approve(86-06-23,PBF7438),
     audit(86-09-24,Farley), install(86-09-25,MR12.0-1164):
      Modified to not always zero out new components of extensible areas.
                                                   END HISTORY COMMENTS */


/* Automatic */

	dcl     code		 fixed bin (35);
	dcl     next_areap		 ptr;
	dcl     new_extend_blockp	 ptr;
	dcl     defined		 bit (1) aligned;
	dcl     1 info		 aligned like area_info;
	dcl     area_size		 fixed bin (18);
	dcl     len		 fixed bin;
	dcl     dirname		 char (168);
	dcl     entname		 char (32);
	dcl     dlng		 fixed bin;
	dcl     rings		 (3) fixed bin (3);
	dcl     set_ring_brackets      bit (1) aligned;

/* Parameters */

	dcl     a_area_infop	 ptr;
	dcl     a_code		 fixed bin (35);
	dcl     1 a_control		 aligned like area_control;
	dcl     a_areap		 ptr;
	dcl     a_next_componentp	 ptr;

/* Constants */

	dcl     Max_Components	 fixed bin static init (1000) options (constant);

/* Based */

	dcl     based_area		 area (area_size) aligned based (areap);

/* Entries */

	dcl     unique_chars_	 entry (bit (*)) returns (char (15));
	dcl     get_temp_segment_      entry (char(*), ptr, fixed bin(35));
	dcl     hcs_$make_seg	 entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
	dcl     hcs_$get_ring_brackets entry (char (*), char (*), (3) fixed bin (3), fixed bin (35));
	dcl     hcs_$set_ring_brackets entry (char (*), char (*), (3) fixed bin (3), fixed bin (35));


	dcl     release_temp_segment_ entry (char (*), ptr, fixed bin (35));
	dcl     get_ring_		 entry () returns (fixed bin);
	dcl     hcs_$fs_get_path_name	 entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
	dcl     delete_$ptr		 entry (ptr, bit (6), char (*), fixed bin (35));

/* Builtins */

	dcl     (bit, empty, rel, null, bin, substr, addr, addrel, index, length, mod, unspec, wordno, size) builtin;

/* External */

	dcl     sys_info$max_seg_size	 fixed bin (18) ext;
	dcl     error_table_$unimplemented_version fixed bin (35) ext;
	dcl     error_table_$area_too_small fixed bin (35) ext;
	dcl     error_table_$boundviol fixed bin (35) ext;
	dcl     error_table_$noalloc	 fixed bin (35) ext;
	dcl     error_table_$no_odd_areas fixed bin (35) ext;

/* Conditions */

	dcl     area		 condition;
	dcl     bad_area_initialization condition;
	dcl     cleanup		 condition;

/*  */

/* This routine creates and initializes an area segment. It takes control information
   from its input structure and sets special bits in the area header to reflect
   the desired result. if the area is extensible, an extension blocks is allocated
   in the area and initialized appropriately.
*/

	area_infop = a_area_infop;

	if area_info.version ^= area_info_version_1 then do;
		a_code = error_table_$unimplemented_version;
		return;
	     end;
	else a_code = 0;

	if area_info.extend | (area_info.areap = null)
	then if area_info.size < size (area_header) + min_block_size + size (extend_block)
	     then go to MIN_SIZE_ERROR;
	     else ;
	else if area_info.size < size (area_header) + min_block_size then go to MIN_SIZE_ERROR;
	if area_info.size > sys_info$max_seg_size then go to MAX_SIZE_ERROR;

/* First create the area segment if necessary. The nullness of the input area pointer
   indicates what we are to do. */

	if area_info.areap = null then do;		/* null means we should get an area segment */
		len = index (area_info.owner, " ") - 1;
		if len < 0 then len = length (area_info.owner);
		if area_info.system | (get_ring_ () = 0)
		then call hcs_$make_seg ("", unique_chars_ (""b) || ".area." || substr (area_info.owner, 1, 10),
			"", 01110b, area_info.areap, code);
		else call get_temp_segment_ (substr (area_info.owner, 1, len) || ".area", area_info.areap, code);
		if code ^= 0 then goto ERROR;
		defined = "1"b;
	     end;
	else do;
	     if mod (wordno (area_info.areap), 2) ^= 0 then goto ODD_AREA_ERROR;
	     defined = "0"b;
	end;

	areap = area_info.areap;			/* this is the pointer we will use */

/* First we must empty the area */

	area_size = area_info.size;			/* get requested size of area */

/* implement zero_on_alloc for no_freeing areas */
/* (system areas are assumed to be zero to start with...) */

	if ^defined
	then if ^area_info.system & ((area_info.no_freeing & area_info.zero_on_alloc) | area_info.zero_on_free)
	     then unspec (areap -> based_area) = "0"b;

	on bad_area_initialization goto ERROR;
	areap -> based_area = empty;

/* Now we must fill in the control bits in the area header before attempting to allocate
   any extend structure */

	if area_info.no_freeing
	then do;
		area_header.allocation_method = NO_FREEING_ALLOCATION_METHOD;
		no_free_area_header.current_component = areap;
	     end;
	else area_header.allocation_method = STANDARD_ALLOCATION_METHOD;
	area_header.zero_on_free = area_info.zero_on_free;
	area_header.zero_on_alloc = area_info.zero_on_alloc;
	area_header.dont_free = area_info.dont_free;
	area_header.extend = area_info.extend;
	area_header.system = area_info.system;
	area_header.defined_by_call = defined;

/* Now see if we must allocate an extend block */

	if area_header.extend | area_header.defined_by_call then do; /* yes, do it */
		on condition (area) goto ERROR;
		allocate extend_block in (based_area) set (extend_blockp);
		extend_block.first_area = areap;
		extend_block.next_area = null;
		extend_block.sequence_no = 1;
		extend_block.name = area_info.owner;
		area_header.extend_info = bit (bin (bin (rel (extend_blockp), 18) - bin (rel (areap), 18), 18), 18);
	     end;
	return;

ERROR:	a_code = error_table_$noalloc;
	return;

ODD_AREA_ERROR: a_code = error_table_$no_odd_areas;
	return;

MIN_SIZE_ERROR: a_code = error_table_$area_too_small;
	return;

MAX_SIZE_ERROR: a_code = error_table_$boundviol;
	return;

change_area_attributes_: entry (a_areap, a_control, a_code);

	do areap = a_areap repeat next_areap while (areap ^= null);
	     area_header.extend = a_control.extend;
	     area_header.zero_on_alloc = a_control.zero_on_alloc;
	     area_header.zero_on_free = a_control.zero_on_free;
	     area_header.dont_free = a_control.dont_free;
	     area_header.system = a_control.system;
	     if a_control.no_freeing then area_header.allocation_method = NO_FREEING_ALLOCATION_METHOD;
	     if area_header.extend_info then next_areap = addrel (areap, area_header.extend_info) -> extend_block.next_area;
	     else next_areap = null;
	end;
	return;

get_next_area_ptr_: entry (a_areap, a_next_componentp);

/* This entry is called by alloc_ when it runs off the end
   of an extensible area segment */

	areap = a_areap;
	extend_blockp = addrel (areap, area_header.extend_info);
	if extend_block.next_area = null then do;
		if extend_blockp -> extend_block.sequence_no >= Max_Components then do;
abort:			a_next_componentp = null;
			return;
		     end;

		if area_header.system | (get_ring_ () = 0) then do;
		     call hcs_$fs_get_path_name (areap, dirname, dlng, entname, code);
						/* find out what directory area is in */
		     call hcs_$get_ring_brackets (dirname, entname, rings, code);
						/* save ring brackets of original area segment */
		     if code ^= 0 then go to abort;
		     entname =  (unique_chars_ (""b) || ".area." ||
			substr (extend_block.name, 1, 10));
		     call hcs_$make_seg (dirname, entname, "", 01110b, info.areap, code);
						/* create new component in same directory */
		     if code ^= 0 then goto abort;
		     call hcs_$set_ring_brackets (dirname, entname, rings, code);
		     if code ^= 0 then go to abort;
		     set_ring_brackets = "0"b;
		     end;
		else do;
		     info.areap = null ();
		     set_ring_brackets = "1"b;
		     end;

		info.version = area_info_version_1;
		info.extend = area_header.extend;
		info.zero_on_alloc = area_header.zero_on_alloc;
		info.zero_on_free = area_header.zero_on_free;
		info.dont_free = area_header.dont_free;
		info.no_freeing = (area_header.allocation_method = NO_FREEING_ALLOCATION_METHOD);
		info.system = area_header.system;
		info.size = sys_info$max_seg_size;
		info.owner = extend_block.name;
		call define_area_ (addr (info), code);
		if code ^= 0 then go to abort;

		info.areap -> area_header.flags.defined_by_call = "1"b; /* extended components are defined by call */

		extend_block.next_area = info.areap;
		new_extend_blockp = addrel (info.areap, info.areap -> area_header.extend_info);
		new_extend_blockp -> extend_block.sequence_no = extend_block.sequence_no + 1;
		new_extend_blockp -> extend_block.first_area = extend_block.first_area;

		if set_ring_brackets then do;
		     call hcs_$fs_get_path_name (areap, dirname, dlng, entname, code);
		     if code ^= 0 then go to abort;
		     call hcs_$get_ring_brackets (dirname, entname, rings, code);
		     if code ^= 0 then go to abort;
		     call hcs_$fs_get_path_name (info.areap, dirname, dlng, entname, code);
		     if code ^= 0 then go to abort;
		     call hcs_$set_ring_brackets (dirname, entname, rings, code);
		     if code ^= 0 then go to abort;
		end;
	     end;

	a_next_componentp = extend_block.next_area;
	return;

release_area_: entry (a_areap);

/* This entry, given a pointer to the first component of a possible multi-component
   area, deletes all components created by the define_area_ interface. */

/* THIS ENTRY MUST NOT BE CALLED IN RING ZERO! */

	dcl     (mask, oldmask)	 bit (36) aligned;
	dcl     i			 fixed bin;
	dcl     ips_names		 char (32) aligned;
	dcl     create_ips_mask_	 entry (ptr, fixed bin, bit (36) aligned);
	dcl     (hcs_$set_ips_mask, hcs_$reset_ips_mask) entry (bit (36) aligned, bit (36) aligned);

	ips_names = "-all";
	call create_ips_mask_ (addr (ips_names), 1, mask);
	oldmask = "0"b;
	on cleanup begin;
		if substr (oldmask, 36, 1) then do;
			mask = oldmask;
			call hcs_$reset_ips_mask (mask, oldmask);
		     end;
	     end;
	call hcs_$set_ips_mask (mask, oldmask);

	areap = a_areap;
	a_areap = null;				/* indicate to caller that we were called */
	do i = 1 to Max_Components while (areap ^= null);
	     if area_header.extend | area_header.defined_by_call then do;
		     extend_blockp = addrel (areap, area_header.extend_info);
		     next_areap = extend_block.next_area;
		     extend_block.next_area = null;
		end;
	     else next_areap = null;
	     if area_header.defined_by_call then do;
		     if ^area_header.flags.system then do;
			     len = index (extend_block.name, " ") - 1;
			     if len < 0 then len = length (extend_block.name);
			     call release_temp_segment_ (substr (extend_block.name, 1, len) || ".area", areap, code);
			     if code ^= 0 then call delete_$ptr (areap, "000100"b, "release_area_", code);
						/* this is to delete segments created in ring 0 */
			end;
		     else call delete_$ptr (areap, "000100"b, "release_area_", code);
		end;
	     else do;
		     if area_header.flags.zero_on_free then do;
			     area_size = bin (area_header.next_virgin, 18);
			     unspec (areap -> based_area) = "0"b;
			end;
		     area_size = bin (area_header.last_usable, 18);
						/* be sure area size is correct for empty */
		     areap -> based_area = empty;
		end;

	     areap = next_areap;

	end;

	mask = oldmask;
	call hcs_$reset_ips_mask (mask, oldmask);
	return;
						/*  */

%include area_structures;
%include area_info;

     end define_area_;
