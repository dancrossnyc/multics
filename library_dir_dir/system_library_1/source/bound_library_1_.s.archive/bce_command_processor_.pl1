/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */
/* Simple command line parser extracted from command_processor_ */
/* BIM 10/82 */
/* This does not have to be as ruthlessly efficient as the */
/* real command processor. */

/* format: style2 */

bce_command_processor_:
     procedure (Line, Command_finder, Info_ptr, Code);

	declare Line		 character (*);
	declare Command_finder	 entry (pointer, character (*), fixed binary (35)) returns (entry) variable;
	declare Info_ptr		 pointer;
	declare Code		 fixed binary (35);

/* Remaining declarations */

	dcl     1 arg_list		 aligned,		/* the argument list being constructed */
		2 twice_n_arguments	 fixed binary (18) unaligned unsigned,
		2 tag		 bit (18) unaligned initial ("000004"b3),
						/* PL/1 */
		2 twice_n_descriptors
				 fixed binary (18) unaligned unsigned,
		2 arg_ptrs	 (32) pointer,
		2 descriptor_ptrs	 (32) pointer;

	dcl     1 descriptors	 (32) aligned,	/* descriptions of above arguments */
		2 bits		 bit (12) unaligned,/* flag(1), type(6), packed(1), ndims(4) */
		2 size		 fixed binary (24) unaligned unsigned;

	dcl     descriptor_ptrs_for_move
				 bit (72 * n_arguments) aligned based;
						/* to move descriptor pointers to proper place in arglist */

	dcl     reading_command_name	 bit (1) aligned;	/* ON => picking up command name, not an argument */
	dcl     end_of_command	 bit (1) aligned;	/* ON => reached the end of a command */

	dcl     n_arguments		 fixed binary;	/* # of arguments for this command */

	dcl     (token_lth, next_start)
				 fixed binary (21);

	dcl     command_name	 character (command_name_lth) unaligned based (command_name_ptr);
	dcl     command_name_ptr	 pointer;		/* -> name of the command to invoke */
	dcl     command_name_lth	 fixed binary;
	dcl     command_entry_ptr	 pointer;		/* -> the actual command to be run */
	dcl     line_lth		 fixed binary (21);
	dcl     line_ptr		 pointer;
	dcl     line		 char (line_lth) based (line_ptr);
	dcl     start		 fixed binary;
	dcl     command_entry	 entry (pointer) variable;
	dcl     forbid_semicolons	 bit (1) aligned;

	dcl     error_table_$cp_reserved_syntax
				 external static fixed binary (35);
	dcl     error_table_$too_many_args
				 external static fixed binary (35);

	dcl     cu_$generate_call	 entry (entry, pointer);

%page;

	dcl     BREAKS		 character (12) static options (constant) initial (";()[]""|
	 ");						/* command language break characters and NL, HT, SP, VT, FF */

	dcl     TOKEN_BREAKS	 character (6) static options (constant) initial ("""
	 ");						/* breaks for tokens only: " NL HT SP VT FF */

	dcl     SIMPLE_BREAKS	 character (6) static options (constant) initial (";
	 ");						/* ; and whitespace (NL HT SP VT FF) */

	dcl     NON_SIMPLE_BREAKS	 character (6) static options (constant) initial ("()[]""|");
	dcl     NON_SIMPLE_BREAKS_SEMI character (7) static options (constant) initial ("()[]""|;");
						/* characters requiring special processing */

	dcl     COMMAND_BREAKS	 character (2) static options (constant) initial (";
");						/* characters which separate command invocations (;, NL) */

%page;

/* bce_command_processor_: proc (Line, Command_finder, Code) */

	ss_info_ptr = Info_ptr;
	forbid_semicolons = ss_info.forbid_semicolons;
	line_ptr = addr (Line);
	line_lth = length (Line);			/* first estimate */

	line_lth = length (rtrim (line, SIMPLE_BREAKS));
	start = verify (line, SIMPLE_BREAKS);
	if start = 0				/* null command line */
	then do;
		Code = 100;			/* just like everything else ... */
		return;
	     end;

	if (forbid_semicolons & search (line, NON_SIMPLE_BREAKS_SEMI) ^= 0)
	     | (^forbid_semicolons & search (line, NON_SIMPLE_BREAKS) ^= 0)
	then do;
		Code = error_table_$cp_reserved_syntax;
		return;
	     end;
	do while (start <= line_lth);


	     reading_command_name = "1"b;
	     end_of_command = "0"b;
	     n_arguments = 0;

	     do while (^end_of_command);

		token_lth = search (substr (line, start), SIMPLE_BREAKS) - 1;

		if token_lth = -1
		then /* rest of the command line */
		     token_lth = line_lth - start + 1;	/* break is one beyond the end */

		if reading_command_name
		then do;
			command_name_ptr = addr (substr (line, start, 1));
			command_name_lth = token_lth;
			reading_command_name = "0"b;
		     end;
		else do;
			n_arguments = n_arguments + 1;
			if n_arguments > hbound (arg_list.arg_ptrs, 1)
			then do;
				Code = error_table_$too_many_args;
				return;
			     end;
			arg_list.arg_ptrs (n_arguments) = addr (substr (line, start, 1));
			arg_list.descriptor_ptrs (n_arguments) = addr (descriptors (n_arguments));
			descriptors (n_arguments).bits = "5260"b3;
						/* unaligned, nonvarying string */
			descriptors (n_arguments).size = token_lth;
		     end;

		start = start + token_lth;		/* skip over token to delimiters */

		if (start > line_lth)
		then end_of_command = "1"b;		/* entire line used */

		else do;				/* search for next token and check for end of a command
						   invocation (semi-colon or new-line in delimiters) */
			next_start = verify (substr (line, start), SIMPLE_BREAKS);
			if (next_start = 0)
			then do;			/* rest of line is delimiters */
				next_start = line_lth - start + 2;
				end_of_command = "1"b;
			     end;
			else end_of_command =
				(search (substr (line, start, (next_start - 1)), COMMAND_BREAKS) ^= 0);
			start = start + next_start - 1;
		     end;
	     end;

	     arg_list.twice_n_arguments, arg_list.twice_n_descriptors = 2 * n_arguments;

	     if n_arguments < hbound (arg_list.arg_ptrs, 1)
	     then /* need to move descriptor pointers down */
		addr (arg_list.arg_ptrs (n_arguments + 1)) -> descriptor_ptrs_for_move =
		     addr (arg_list.descriptor_ptrs) -> descriptor_ptrs_for_move;

	     command_entry = Command_finder (Info_ptr, command_name, Code);
	     if Code ^= 0
	     then return;
	     ss_info.arg_list_ptr = addr (arg_list);
	     call command_entry (addr (ss_info));
	end;

%include bce_subsystem_info_;

     end bce_command_processor_;
