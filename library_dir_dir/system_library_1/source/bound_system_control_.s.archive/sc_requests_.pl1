/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */

/* format: style2 */

sc_requests_:
     procedure;

/**** SC_REQUESTS_
      ssu requests for the the system control subsystem.

      This program used to be execute_sc_command_.

      The smarts about setting up environments went to 
      sc_process_command_line_, and the commands landed here.  

      WHEN
      this procedure is entered, all I/O switches are correctly
      set up to allow reading and writing (or, in the case of sac,
      to abort appropriately).

      ALL
      the commands in here can be written as if they were executing
      in a normal user environment, just like the ones in admin_.

      THIS 
      procedure did not used to mask event calls, in spite of the
      clear requirement that anything that could conceivable block
      do so. Masking now takes place in sc_process_command_line_.
*/

/****
   Modified 01/82     B. I. Margulies. answer yes sc_command shut.
   Modified 01/02/82  E. N. Kittlitz.  added sc_stat_$Go.
   Modified 5/82	  E. N. Kittlitz.  New AS initialization.
   Modified 12/82	  E. N. Kittlitz.  Version 2 communications segment. encrypt admin password.
   Modified 1/83	  E. N. Kittlitz.  handle finish in admin mode.
   Modified 8/83	  K. Loepere       call_bce.
   Modified 1/84	  K. Loepere       make qedx_ the message editor.
   Rewritten for ssu_ 1984-10-26 BIM
   Modified 1985-01-08, BIM: mc access control, fix operator login for boot star.
   Modified 1985-01-28, E. Swenson: to call lg_ctl_ for login/logout messages.
   Modified 1985-01-29, E. Swenson: to fix operator login for boot star.
   Modified 1985-02-18, E. Swenson: to fix operator login for other problems.
*/

/****^  HISTORY COMMENTS:
  1) change(86-08-01,Cox), approve(87-05-25,MCR7690), audit(87-03-16,GDixon),
     install(87-08-03,MR12.1-1055):
     Modified to support virtual MC terminals.
  2) change(87-02-05,GDixon), approve(87-05-25,MCR7690),
     audit(87-05-06,Parisek), install(87-08-03,MR12.1-1055):
     Modified for a change to mc_anstbl.incl.pl1.  Correct coding standard
     violations.
  3) change(87-03-30,Lippard), approve(87-04-27,MCR7673),
     audit(87-05-15,Fawcett), install(87-05-26,MR12.1-1036):
     Added set_time_zone.
  4) change(87-06-10,GDixon), approve(87-04-27,MCR7673),
     audit(87-06-10,Parisek), install(87-08-03,MR12.1-1055):
      A) Merge changes 2 & 3.
      B) Add operator message documentation for the new call to sys_log_ in
         set_time_zone.
  5) change(87-06-23,Parisek), approve(87-06-23,MCR7690),
     audit(87-08-06,GDixon), install(87-08-11,MR12.1-1079):
     Correct an ioa_ control string error.
  6) change(87-07-17,Parisek), approve(87-07-17,MCR7716),
     audit(87-08-07,Fawcett), install(87-08-11,MR12.1-1079):
     Call call_ec_ subroutine instead of exec_com for executing the ssu.ec so
     errors can be detected, displayed and ec will continue execution.
                                                   END HISTORY COMMENTS */

	declare SCI_ptr		 pointer;
	declare SCI_info_ptr	 pointer;

	dcl     al		 fixed bin (21);
	dcl     ap		 pointer;
	dcl     arg_count		 fixed bin;
	dcl     argument		 char (al) based (ap);
	dcl     code		 fixed bin (35);
	dcl     destination		 char (32) varying;
	dcl     found_zone		 bit (1) aligned;
	dcl     lang_index		 fixed bin;
	dcl     message		 char (500);
	dcl     message_length	 fixed bin (21);
	dcl     operator_name	 char (32);
	dcl     old_name		 char (32);
	dcl     old_time_zone	 char (4) aligned;
	dcl     password		 char (8);
	dcl     reason		 char (100);
	dcl     sci_ptr		 pointer;
	dcl     temp_line		 char (500) varying;
	dcl     time_zone		 char (4) aligned;
	dcl     yea_shutdown	 bit (1) aligned;
	dcl     zone_index		 fixed bin;

	dcl     as_$as_init		 entry (fixed bin (35));
	dcl     as_$go		 entry (fixed bin (35));
	dcl     as_$reset		 entry ();
	dcl     as_$shut_ok		 entry (fixed bin (35));
	dcl     as_$startup		 entry (fixed bin (35));
	dcl     command_query_	 entry () options (variable);
	dcl     command_query_$yes_no	 entry options (variable);
	dcl     date_time_$set_zone	 entry (char (*), fixed bin (35));
	dcl     call_ec_		 entry options (variable);
	dcl     hphcs_$call_bce	 entry ();
	dcl     hphcs_$set_system_time_zone
				 entry (char (4) aligned, fixed bin (35));
	dcl     ioa_		 entry () options (variable);
	dcl     ioa_$rs		 entry () options (variable);
	dcl     ipc_$mask_ev_calls	 entry (fixed bin (35));
	dcl     ipc_$unmask_ev_calls	 entry (fixed bin (35));
	dcl     lg_ctl_$login_operator entry (ptr, bit (1) aligned, char (*), char (*));
	dcl     lg_ctl_$logout_operator
				 entry (ptr, char (*), char (*));
	dcl     mc_check_access_$quit	 entry (pointer, character (*), fixed binary (35));
	dcl     mc_check_access_$reply entry (pointer, character (*), fixed binary (35));
	dcl     mc_commands_$intercom	 entry (character (*) var, pointer, fixed bin (21), pointer, fixed binary (35));
	dcl     mc_commands_$quit_command
				 entry (char (*), ptr, fixed bin (35));
	dcl     mc_commands_$reply_command
				 entry (character (*) var, pointer, fixed bin (21), pointer, fixed binary (35));
	dcl     mc_commands_$sign_in	 entry (ptr, char (*), char (*));
	dcl     mc_commands_$sign_out	 entry (ptr, char (*), fixed bin (35));
	dcl     pnt_manager_$login_get_entry
				 entry (char (*), char (*), ptr, fixed bin (35));
	dcl     read_password_	 entry (character (*), character (*));
	dcl     restart_mc_ttys_	 entry;
	dcl     sc_abort_line_util_$real_abort_line
				 entry () options (variable);
	dcl     sc_admin_mode_	 entry;
	dcl     sc_edit_motd_	 entry;
	dcl     sc_ipc_mask_$remask	 entry (fixed binary);
	dcl     sc_ipc_mask_$unmask	 entry (fixed binary);
	dcl     scramble_		 entry (char (8)) returns (char (8));
	dcl     ssu_$abort_line	 entry () options (variable);
	dcl     ssu_$arg_count	 entry (ptr, fixed bin);
	dcl     ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21));
	dcl     ssu_$print_message	 entry () options (variable);
	dcl     sys_log_		 entry options (variable);
	dcl     sys_info$time_zone	 char (4) aligned ext static;

	dcl    (error_table_$id_not_found,
	        error_table_$noentry,
                  error_table_$unknown_zone)  fixed bin (35) ext static;

	dcl    (after, addr, before, byte, length, ltrim, null, rtrim)
     				 builtin;
	dcl     cleanup		 condition;

	dcl     (
	        GRANTED		 initial ("1"b),
	        DENIED		 initial ("0"b)
	        )			 bit (1) aligned internal static options (constant);

no_start_up:
     entry (SCI_ptr, SCI_info_ptr);
	call setup;

	sc_stat_$did_part1, sc_stat_$did_part2, sc_stat_$did_part3 = "1"b;
	return;

reply:
     entry (SCI_ptr, SCI_info_ptr);
	call setup;

/**** THIS IS A SPECIAL COMMAND -- called with one un-parsed argument. */

	if arg_count = 0
	then call ssu_$abort_line (sci_ptr, 0, "Usage: reply SOURCE LINE");

	call return_in_debug;
	call ssu_$arg_ptr (sci_ptr, 1, ap, al);
	temp_line = rtrim (ltrim (argument));
	destination = before (temp_line, " ");
	if destination = temp_line			/* no argument, all we have is a destination */
	then do;
		destination = temp_line;
		message = byte (10);
		message_length = 1;
	     end;
	else call ioa_$rs ("^a", message, message_length, after (temp_line, " "));

	call mc_check_access_$reply (sc_subsystem_info_ptr, (destination), code);
	if code = error_table_$noentry
	then call ssu_$abort_line (sci_ptr, code, "No MC ACS segment exists for the source ^a.", destination);
	else if code ^= 0
	then call ssu_$abort_line (sci_ptr, code, "Reply not permitted to message coordinator source ^a.", destination);

	call mc_commands_$reply_command (destination, addr (message), message_length, sc_subsystem_info.mc_atep, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code, "Reply not sent to ^a.", destination);
	return;


admin:
     entry (SCI_ptr, SCI_info_ptr);

	call setup;
	if arg_count > 0
	then call ssu_$abort_line (sci_ptr, 0, "Usage: admin");

	call sc_admin_mode_;			/* sc_stat_ carries all needed parameters */
	return;

bce:
     entry (SCI_ptr, SCI_info_ptr);
	call setup;
	if arg_count > 0
	then call ssu_$abort_line (sci_ptr, 0, "Usage: bce");
	call return_in_debug;
	if ^sc_stat_$test_mode
	then call hphcs_$call_bce;			/* call bce. */
	return;

go:
     entry (SCI_ptr, SCI_info_ptr);

	call setup;

	if arg_count > 0
	then call ssu_$abort_line (sci_ptr, 0, "Usage: go");
	call return_in_debug;

GO_COMMON:
	sc_stat_$Go_typed = "1"b;			/* Indicate 'go' has been requested */
	if ^sc_stat_$did_part2
	then /* Execute system startup, second part. */
	     call call_system_start_up_ec ("part2");
	sc_stat_$did_part2 = "1"b;
	call as_$go (code);				/* Now make all lines answer. */
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code, "Answering Service startup failed.");

	sc_stat_$Go = "1"b;				/* set the AS listening flag */
	if ^sc_stat_$did_part3
	then /* Execute system startup, third part */
	     call call_system_start_up_ec ("part3");
	sc_stat_$did_part3 = "1"b;
	ip = as_data_$rs_ptrs (0);
	if installation_parms.require_operator_login
	then sc_stat_$no_operator_login = "0"b;		/* Close the gate */
	if installation_parms.vchn_requires_accept
	then sc_stat_$vchn_requires_accept = installation_parms.vchn_requires_accept;
						/* "login personid -op -vchn foo" must be accepted by
						   operator if personid is not signed on system console */
	return;

message:
     entry (SCI_ptr, SCI_info_ptr);			/* edit the MOTD */

	call setup;
	if arg_count > 0
	then call ssu_$abort_line (sci_ptr, 0, "Usage: message");

	call return_in_debug;

	call sc_edit_motd_;
	return;


multics:
     entry (SCI_ptr, SCI_info_ptr);

	call setup;
	if arg_count > 0
	then call ssu_$abort_line (sci_ptr, 0, "Usage: multics");

	call return_in_debug;

	sc_stat_$Multics_typed = "1"b;		/* indicate 'multics' has been requested */
	if ^sc_stat_$did_part1
	then /* Execute initial part of system startup. */
	     call call_system_start_up_ec ("part1");
	sc_stat_$did_part1 = "1"b;
	call as_$as_init (code);			/* Initialize answering service (special session). */

	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code, "Fix problem and retry.");

	sc_stat_$Multics = "1"b;			/* set the Multics-session flag */
	return;


set_time_zone:
     entry (SCI_ptr, SCI_info_ptr);

	call setup;
	if arg_count ^= 1
	then call ssu_$abort_line (sci_ptr, 0, "Usage: stz zone");

	call ssu_$arg_ptr (sci_ptr, 1, ap, al);

	if al > length (time_zone)
	then call ssu_$abort_line (sci_ptr, error_table_$unknown_zone, "^a",
	     argument);

	time_zone = argument;

	found_zone = "0"b;				/* Validate zone.*/
	do lang_index = 1 to ti_zone.number_lang while (^found_zone);
	     do zone_index = 1 to ti_zone.number_zone while (^found_zone);
		if ti_zone.short (lang_index, zone_index) = time_zone
		then found_zone = "1"b;
	     end;					/* zones */
	end;					/* languages */

	if ^found_zone
	then call ssu_$abort_line (sci_ptr, error_table_$unknown_zone, "^a",
	     argument);

	call return_in_debug;

	old_time_zone = sys_info$time_zone;		/* Save old zone */

	call hphcs_$set_system_time_zone (time_zone, code);
	if code ^= 0				/* Set time zone */
	then call ssu_$abort_line (sci_ptr, code, "^a",	/* for the system*/
	     time_zone);

	call date_time_$set_zone ((time_zone), code);	/* Set zone for  */
	if code ^= 0				/* Initializer   */
	then call ssu_$abort_line (sci_ptr, code, "^a", time_zone);

	call sys_log_ (SL_LOG,			/* Log the change*/
	     "^a: Changed time zone from ^a to ^a.",
	     "sc_requests_ (set_time_zone)", old_time_zone, time_zone);
	return;


shutdown:
     entry (SCI_ptr, SCI_info_ptr);

	call setup;
	if arg_count > 0
	then call ssu_$abort_line (sci_ptr, 0, "Usage: shutdown");

	if sc_stat_$Multics
	then do;
		call as_$shut_ok (code);
		if code ^= 0
		then do;
			yea_shutdown = "0"b;
			call command_query_$yes_no (yea_shutdown, (0), "shutdown",
			     "These users will be logged off without any message. Use ""stop"" to warn and bump users",
			     "^d users still on. Do you want to shut down?  ", code);
			if ^yea_shutdown
			then return;
		     end;
	     end;
	go to sc_stat_$system_shutdown_label;

startup:
     entry (SCI_ptr, SCI_info_ptr);
	call setup;
	if arg_count > 0
	then call ssu_$abort_line (sci_ptr, 0, "Usage: startup");

	call return_in_debug;

	sc_stat_$Star_typed = "1"b;			/* indicate that someone typed 'startup'. */
	sc_stat_$Multics_typed = "1"b;
	if ^sc_stat_$did_part1
	then /* Execute first part of system startup */
	     call call_system_start_up_ec ("part1");
	sc_stat_$did_part1 = "1"b;

	call as_$startup (code);			/* Initialize answering service. (normal session) */
	if code ^= 0
	then return;
	sc_stat_$Multics = "1"b;			/* Get here, and library is loaded... */
	go to GO_COMMON;				/* join common code */


force_reset:
     entry (SCI_ptr, SCI_info_ptr);

	call setup;
	if arg_count > 0
	then call ssu_$abort_line (sci_ptr, 0, "Usage: force_reset");
	call return_in_debug;
	if sc_stat_$Multics
	then call as_$reset;
	go to RESET_COMMON;

reset:
     entry (SCI_ptr, SCI_info_ptr);

	call setup;
	if arg_count > 0
	then call ssu_$abort_line (sci_ptr, 0, "Usage: reset");
	call return_in_debug;

RESET_COMMON:
	call iox_$control (sc_stat_$master_iocb, "start", null, code);
	if sc_stat_$mc_is_on
	then call restart_mc_ttys_ ();		/* Kick all typers */
	code = 0;					/* Now get unmasked. */
	do while (code = 0);			/* .. by unmasking repeatedly. */
	     call ipc_$unmask_ev_calls (code);		/* unmask event call channels */
	end;
	return;

cripple:
     entry (SCI_ptr, SCI_info_ptr);
	call setup;
	if arg_count > 0
	then call ssu_$abort_line (sci_ptr, 0, "Usage: cripple");

	call ipc_$mask_ev_calls (code);		/* Stop all ipc signals, no dialups etc. */
	call ssu_$print_message (sci_ptr, 0, "Answering service crippled.");
	return;

intercom:						/** This is a SPECIAL request, called with 1 argument, the message */
     entry (SCI_ptr, SCI_info_ptr);
	call setup;

	if arg_count ^= 1
	then call ssu_$abort_line (sci_ptr, 0, "Usage: intercom DEST TEXT");

	call ssu_$arg_ptr (sci_ptr, 1, ap, al);
	temp_line = rtrim (ltrim (argument));
	destination = before (temp_line, " ");
	if destination = ""
	then do;
		destination = temp_line;
		message = byte (10);
		message_length = 1;
	     end;
	else call ioa_$rs ("^a", message, message_length, after (temp_line, " "));

	call mc_commands_$intercom (destination, addr (message), message_length, sc_subsystem_info.mc_atep, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code, "Message not sent to ^a.", destination);
	return;

quit:
     entry (SCI_ptr, SCI_info_ptr);
	call setup;

	if arg_count ^= 1
	then call ssu_$abort_line (sci_ptr, 0, "Usage: quit SOURCE");
	call ssu_$arg_ptr (sci_ptr, 1, ap, al);
	call mc_check_access_$quit (sc_subsystem_info_ptr, argument, code);
	if code ^= 0
	then do;
		if code = error_table_$noentry
		then call ssu_$abort_line (sci_ptr, code, "No MC ACS segment for the message coodrinator source ^a.",
			argument);
		else call ssu_$abort_line (sci_ptr, code, "Quit not permitted to message coordinator source ^a.",
			argument);
	     end;
	call mc_commands_$quit_command (argument, sc_subsystem_info.mc_atep, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code, "No quit signalled to ^a.", argument);
	return;

sign_on:
     entry (SCI_ptr, SCI_info_ptr);

	call setup;
	if arg_count > 1
	then call ssu_$abort_line (sci_ptr, 0, "Usage: sign_on OperatorName");
	if sc_subsystem_info.mc_atep = null ()
	then call sc_abort_line_util_$real_abort_line (sci_ptr, 0,
		"^a is not a terminal, so you cannot log in over it.", sc_subsystem_info.source_name);

	if arg_count = 0
	then do;
		query_info.version = query_info_version_6;
		operator_name = "";
		call command_query_ (addr (query_info), operator_name, "sign_on", "Operator name:");
		if operator_name = "QUIT" | operator_name = "quit"
		then call sc_abort_line_util_$real_abort_line (sci_ptr, 0, "sign_on aborted by quit.");
	     end;
	else do;
		call ssu_$arg_ptr (sci_ptr, 1, ap, al);
		operator_name = argument;
	     end;

	call read_password_ ("Password", password);
	if password = "quit" | password = "QUIT"
	then call sc_abort_line_util_$real_abort_line (sci_ptr, 0, "sign_on aborted by quit.");
	password = scramble_ (password);
	PNTE.version = PNT_ENTRY_VERSION_2;
	reason = "";
	call pnt_manager_$login_get_entry (operator_name, password, addr (PNTE), code);
	if code ^= 0
	then do;
		if code = error_table_$id_not_found
		then reason = "Unregistered name";
		else reason = "Bad password";
	     end;
	else if ^PNTE.flags.operator
	then reason = "Not operator";

	if reason ^= ""
	then do;
		call lg_ctl_$login_operator (sc_subsystem_info_ptr, DENIED, operator_name, reason);
		call sc_abort_line_util_$real_abort_line (sci_ptr, 0, "Login incorrect");
	     end;
	operator_name = PNTE.user_id;
	call mc_commands_$sign_in (sc_subsystem_info.mc_atep, operator_name, old_name);
	if old_name ^= ""
	then do;
		call ssu_$print_message (sci_ptr, 0, "^a signed out as operator.", old_name);
		call lg_ctl_$logout_operator (sc_subsystem_info_ptr, old_name, "sign_on");
	     end;
	sc_subsystem_info.access_control_name = rtrim (operator_name) || ".Operator.o";
	call ssu_$print_message (sci_ptr, 0, "^a signed on as operator on channel ^a.", operator_name,
	     sc_subsystem_info.source_name);
	call lg_ctl_$login_operator (sc_subsystem_info_ptr, GRANTED, operator_name, "sign_on");
	return;

sign_off:
     entry (SCI_ptr, SCI_info_ptr);
	call setup;

	if arg_count ^= 0
	then call ssu_$abort_line (sci_ptr, 0, "Usage: sign_off");
	if sc_subsystem_info.mc_atep = null ()
	then call ssu_$abort_line (sci_ptr, 0, "Not logged in.");
	call mc_commands_$sign_out (sc_subsystem_info.mc_atep, old_name, code);
	if code = 0
	then do;
		call lg_ctl_$logout_operator (sc_subsystem_info_ptr, old_name, "sign_off");
		call ssu_$print_message (sci_ptr, 0, "^a signed off.", old_name);
		sc_subsystem_info.access_control_name = sc_stat_$unidentified_access_name;
	     end;
	else call ssu_$abort_line (sci_ptr, 0, "No one is signed on to ^a.", sc_subsystem_info.source_name);
	return;

self_identify:
     entry (SCI_ptr, SCI_info_ptr);

	call setup;

	/*** Be nice and don't diagnose arguments */

	mc_atep = sc_subsystem_info.mc_atep;
	if mc_atep = null ()
	then call ioa_ ("system_control");
	else do;
		call ioa_ ("system_control:^[ channel ^a^[ (vchannel ^a)^;^s^]^;^3s^] ^[^a^;No operator^s^] signed on.",
		     ^mc_ate.the_system_console, mc_ate.real_tty_name, mc_ate.virtual, mc_ate.virtual_tty_name,
		     mc_ate.signed_on, mc_ate.personid);
	     end;
	return;
setup:
     procedure;

	sci_ptr = SCI_ptr;
	sc_subsystem_info_ptr = SCI_info_ptr;
	call ssu_$arg_count (sci_ptr, arg_count);
	return;
     end setup;

call_system_start_up_ec:
     procedure (P_arg1);

	declare P_arg1		 char (*);
	declare remask_count	 fixed bin;
	declare saved_access_control_name
				 char (32);

	remask_count = 0;
	saved_access_control_name = sc_subsystem_info.access_control_name;
	on cleanup
	     begin;
		call sc_ipc_mask_$remask (remask_count);
		sc_subsystem_info.access_control_name = saved_access_control_name;
	     end;

	call sc_ipc_mask_$unmask (remask_count);
	sc_subsystem_info.access_control_name = sc_stat_$exec_access_name;
	call call_ec_ ("system_start_up", P_arg1);
	call sc_ipc_mask_$remask (remask_count);
	return;
     end call_system_start_up_ec;

return_in_debug:
     procedure;

	declare ssu_$get_debug_mode	 entry (ptr) returns (bit (1) aligned);

	if ssu_$get_debug_mode (sci_ptr)
	then go to RETURN;
	return;
     end return_in_debug;

RETURN:
	return;

 %include as_data_;
 %include installation_parms;
	declare ip		 pointer;		/* req for above */
 %include iox_entries;
 %include mc_anstbl;
 %include pnt_entry;
	declare 1 PNTE		 aligned like pnt_entry;
 %include query_info;
 %include sc_stat_;
 %include sc_subsystem_info_;
 %include sys_log_constants;
 %include syserr_constants;
 %include time_names;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   sc_requests_ (set_time_zone): Changed time zone from OLD_ZONE to NEW_ZONE.

   S:	$sc

   T:	$run

   M:	This messages records that the set_time_zone operator request was
	given, and that the system default time zone was thereby changed 
	from OLD_ZONE to NEW_ZONE.

   A:	$ignore

   END MESSAGE DOCUMENTATION */

     end sc_requests_;
