/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */

/* sc_exec_request_ -- calls exec_com for the x request */
/* format: style2,indcomtxt,idind30 */

/**** Written 1984-11-01 BIM */


/****^  HISTORY COMMENTS:
  1) change(87-02-22,GDixon), approve(87-05-25,MCR7680),
     audit(87-05-06,Parisek), install(87-08-04,MR12.1-1055):
     Corrected coding standard violations.
                                                   END HISTORY COMMENTS */

sc_exec_request_:
     procedure (SCI_ptr, SSI_ptr);

	declare SCI_ptr		        pointer;
	declare SSI_ptr		        pointer;	/* subsystem info -- unused for now */

	declare cu_$make_entry_value	        entry (ptr, entry);
	declare exec_com_		        entry (character (*), character (*), character (*), pointer,
				        fixed binary (35));
	declare pathname_		        entry (character (*), character (*)) returns (character (168));
	declare sc_ipc_mask_$unmask	        entry (fixed binary);
	declare sc_ipc_mask_$remask	        entry (fixed binary);
	declare ssu_$arg_list_ptr	        entry (ptr, ptr);
	declare ssu_$abort_line	        entry () options (variable);

	declare code		        fixed bin (35);
	declare sci_ptr		        pointer;
	declare remask_count	        fixed bin;
	declare saved_access_name	        char (32);

	declare (addr, null, unspec)	        builtin;

	declare cleanup		        condition;


	sci_ptr = SCI_ptr;
	sc_subsystem_info_ptr = SSI_ptr;
	unspec (eci) = ""b;
	eci.version = exec_com_info_version_1;
	call ssu_$arg_list_ptr (sci_ptr, eci.arg_list_ptr);
	eci.first_arg = 1;
	call cu_$make_entry_value (null (), eci.execute_line);
	call cu_$make_entry_value (null (), eci.eval_string);
	call cu_$make_entry_value (null (), eci.ready);
	call cu_$make_entry_value (null (), eci.set_ready_mode);
	call cu_$make_entry_value (null (), eci.error);
	code = 0;
	remask_count = 0;
	saved_access_name = sc_subsystem_info.access_control_name;
	on cleanup
	     begin;
		call sc_ipc_mask_$remask (remask_count);
		sc_subsystem_info.access_control_name = saved_access_name;
	     end;
	sc_subsystem_info.access_control_name = sc_stat_$exec_access_name;
	call sc_ipc_mask_$unmask (remask_count);
	call exec_com_ (pathname_ (sc_stat_$sysdir, "admin.ec"), "", "exec", addr (eci), code);
	call sc_ipc_mask_$remask (remask_count);
	sc_subsystem_info.access_control_name = saved_access_name;
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code, "admin.ec");
	return;

%include exec_com_info;
	declare 1 eci		        aligned like exec_com_info;

%include sc_stat_;

%include sc_subsystem_info_;
     end sc_exec_request_;
