/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */
/* sc_ipc_mask_.pl1 -- utility for getting to a guaranteed mask. */
/* format: style2 */

/* Modification history:
   Created 1984-12-05 BIM */

/**** NOTE: Normally, the AS runs masked while executing commands.
      it unmasks when it is executing an exec_com or entering admin mode,
      on the theory that the control point will not block in the middle
      of a database update. When sc_command is used signals are masked
      again for the duration. */


sc_ipc_mask_$unmask:
     procedure (P_remask_count);

	declare P_remask_count	 fixed bin;
	declare code		 fixed bin (35);

	declare ipc_$unmask_ev_calls	 entry (fixed bin (35));
	declare ipc_$mask_ev_calls	 entry (fixed bin (35));

	P_remask_count = 0;
	code = 0;
	do while (code = 0);
	     call ipc_$unmask_ev_calls (code);
	     if code = 0
	     then P_remask_count = P_remask_count + 1;
	end;
	return;

sc_ipc_mask_$remask:
     entry (P_remask_count);

	declare remask_count_up	 fixed bin;

	do remask_count_up = 1 to P_remask_count;	/* PL/I copies the limit */
	     call ipc_$mask_ev_calls ((0));
	     P_remask_count = P_remask_count - 1;	/* so this is safe */
	end;
	return;
     end sc_ipc_mask_$unmask;
