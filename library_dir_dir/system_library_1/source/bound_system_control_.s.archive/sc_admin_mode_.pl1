/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */

/* format: style2,idind30 */

sc_admin_mode_:
     procedure;

/**** System control request to enter admin mode.
      This assumes that I/O switches are already set up reasonably. */

/**** Written 1984-11-02 BIM */


/****^  HISTORY COMMENTS:
  1) change(86-08-01,Swenson), approve(87-05-25,MCR7680),
     audit(87-02-19,GDixon), install(87-08-04,MR12.1-1055):
     Avoid calling hphcs_$syserr_error_code when running in system control test
     mode.
  2) change(87-02-19,GDixon), approve(87-05-25,MCR7680),
     audit(87-05-06,Parisek), install(87-08-04,MR12.1-1055):
     Correct coding standard violations.
                                                   END HISTORY COMMENTS */


	declare cu_$arg_list_ptr	        entry returns (ptr);
	declare cu_$get_cl_intermediary       entry (entry);
	declare cu_$generate_call	        entry (entry, ptr);
	declare cu_$reset_command_processor   entry;
	declare cu_$set_cl_intermediary       entry (entry);
	declare default_error_handler_$wall   entry;
	declare get_group_id_	        entry () returns (char (32));
	declare hcs_$fs_search_set_wdir       entry (char (*), fixed bin (35));
	declare hphcs_$syserr_error_code      entry entry options (variable);
	declare ioa_		        entry options (variable);
	declare listen_		        entry (char (*) var);
	declare pnt_manager_$priv_get_entry   entry (char (*), pointer, fixed bin (35));
	declare read_password_	        entry (character (*), character (*));
	declare sc_ipc_mask_$unmask	        entry (fixed binary);
	declare sc_ipc_mask_$remask	        entry (fixed binary);
	declare sc_signal_io_handler_	        entry;
	declare scramble_		        entry (character (8)) returns (character (8));
	declare ssu_$abort_line	        entry () options (variable);
	declare ssu_$get_info_ptr	        entry (ptr) returns (ptr);
	declare ssu_$print_message	        entry () options (variable);
	declare sys_log_		        entry options (variable);

	declare code		        fixed bin (35);
	declare default_cl_intermediary       entry variable;
	declare remask_count	        fixed bin;
	declare saved_access_name	        char (32);
	declare sci_ptr		        pointer;
	declare w_password		        char (8);

	declare (addr, null)	        builtin;

	declare any_other		        condition;
	declare cleanup		        condition;
	declare finish		        condition;
	declare signal_io_		        condition;

	declare ssu_$null_label	        label ext static;


	sci_ptr = sc_stat_$admin_sci_ptr;

	if sc_stat_$admin_listener_switch
	then call ssu_$abort_line (sci_ptr, 0, "Admin mode busy.");

	call pnt_manager_$priv_get_entry (OPERATOR_ADMIN_MODE_USER_NAME, addr (PNTE), code);
	if code ^= 0
	then do;
		if ^sc_stat_$test_mode
		then call hphcs_$syserr_error_code (LOG, code,
			"admin: Could not retrieve admin password from the PNT to check admin password. Entering admin mode."
			);
		call ssu_$print_message (sci_ptr, code,
		     "Could not retrieve admin password from the PNT to check admin password. Entering admin mode.");
	     end;
	else if ^PNTE.has_password
	then ;					/* no password required */
	else do;
		call read_password_ ("Password", w_password);
		if ^(scramble_ (w_password) = PNTE.password)
		then do;
			call sys_log_ (SL_LOG_SILENT, "admin: incorrect admin mode password given.");
			call ssu_$abort_line (sci_ptr, 0, "Password incorrect.");
		     end;
	     end;


	call cu_$get_cl_intermediary (default_cl_intermediary);
	sc_subsystem_info_ptr = ssu_$get_info_ptr (sci_ptr);

	on finish go to FINISH_SIGNALLED;
	on any_other call default_error_handler_$wall;
	on signal_io_ call sc_signal_io_handler_;	/* make sure our handler takes */

	remask_count = 0;

	saved_access_name = sc_subsystem_info.access_control_name;

	on cleanup call clean;			/* Allow for nonlocal exit */

	sc_subsystem_info.access_control_name = get_group_id_ ();
						/* Act as the Initializer */

	call cu_$set_cl_intermediary (ADMIN_CL_INTERMEDIARY);
	sc_stat_$admin_listener_exit_label = RETURN;
	sc_stat_$admin_listener_switch = "1"b;
	call iox_$control (iox_$user_io, "quit_enable", null (), (0));
	call sc_ipc_mask_$unmask (remask_count);

	call listen_ ("");				/* This dosen't usually return, but... */
	go to RETURN;

admin_mode_exit:
ame:
     entry;

	if sc_stat_$admin_listener_switch
	then go to sc_stat_$admin_listener_exit_label;

	else call ioa_ ("""admin_mode_exit"" ignored.");	/* else ignore exit command */
	return;

RETURN:
	revert any_other;
	call clean;				/* borrow */
	return;

FINISH_SIGNALLED:
	revert any_other;
	call clean;
	call ssu_$abort_line (sci_ptr, 0, "finish condition signalled.");


ADMIN_CL_INTERMEDIARY:
     procedure;

	on signal_io_ call sc_signal_io_handler_;
	call cu_$generate_call (default_cl_intermediary, cu_$arg_list_ptr ());
	return;
     end ADMIN_CL_INTERMEDIARY;

clean:
     procedure;
	sc_subsystem_info.access_control_name = saved_access_name;
	call sc_ipc_mask_$remask (remask_count);
	call iox_$control (iox_$user_io, "quit_disable", null (), (0));
	call cu_$set_cl_intermediary (default_cl_intermediary);
	sc_stat_$admin_listener_switch = "0"b;
	sc_stat_$admin_listener_exit_label = ssu_$null_label;
	call hcs_$fs_search_set_wdir (sc_stat_$sysdir, (0));
	call cu_$reset_command_processor;
	return;
     end clean;

%include iox_entries;

%include pnt_entry;
	declare 1 PNTE		        aligned like pnt_entry;

%include sc_subsystem_info_;

%include sc_stat_;

%include special_person_names;

%include sys_log_constants;

%include syserr_constants;

     end sc_admin_mode_;
