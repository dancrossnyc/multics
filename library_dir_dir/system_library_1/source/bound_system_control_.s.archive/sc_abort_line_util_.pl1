/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* sc_abort_line_util_.pl1 --					       */
/*    Procedure to implement (hopefully) temporary sc feature of mapping     */
/* abort_line into "abort_request".  The reasons for this mapping are not    */
/* fully understood.					       */
/*							       */
/*    This procedure also contains the ssu_-replacable procedure for	       */
/* ssu_$invoke_request.  This replacement procedure sets up the label for    */
/* the abort_request function, and also performs masking of IPC event calls  */
/* on a per-request basis.  This masking must properly be done on a	       */
/* per-request basis.  Masking is done based upon the value of	       */
/* sc_request_flags.dont_mask_calls which is defined for each request in the */
/* sc_request_table_.					       */
/*							       */
/*    The sequence in which procedures are called in order to invoke a       */
/* request is as follows:					       */
/*							       */
/*    ssu_$listen						       */
/*     |__sc_execute_command_line_				       */
/*         |__check for special commands; if special		       */
/*	     |__INVOKE_SPECIAL_PROCEDURE			       */
/*	    if not special					       */
/*	     |__SSU's execute_command_line			       */
/*	         |__sc_abort_line_util_$invoke_request		       */
/*	            |__SSU's locate_request			       */
/*		  |__if event calls should be masked for this request    */
/*		  |   |__ipc_$mask_ev_calls			       */
/*		  |					       */
/*		  |__SSU's invoke_request			       */
/*		  |   |__sc_execute_command_line_$locate_request	       */
/*		  |   |   |__SSU's locate request		       */
/*		  |   |	|__check_restrictions		       */
/*		  |   |					       */
/*		  |   |__REQUEST PROCEDURE			       */
/*		  |					       */
/*		  |__if event calls were masked		       */
/*		      |__ipc_$unmask_ev_calls			       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/* format: style2 */

sc_abort_line_util_:
     procedure;

/**** Modification history:
      Created 1985-02-01, BIM */
/**** Modified 1985-02-18, E. Swenson: to allow a "real" abort_line. */

/****^  HISTORY COMMENTS:
  1) change(87-02-22,GDixon), approve(87-05-25,MCR7680),
     audit(87-05-06,Parisek), install(87-08-05,MR12.1-1055):
     Moved per-request masking of IPC event calls from sc_execute_command_line_
     into our $invoke_request procedure.
  2) change(87-07-02,GDixon), approve(87-07-02,MCR7680),
     audit(87-05-06,Parisek), install(87-08-05,MR12.1-1055):
      A) Changed to determine whether to mask event calls, based upon
         per-request setting in sc_request_table_.
      B) Changed to unmask event calls based upon prior successful masking,
         rather than just a prior attempt to mask.
                                                   END HISTORY COMMENTS */

	declare P_sci_ptr		 pointer parameter;
	declare P_request_name	 char(*) parameter;
	declare P_arg_list_ptr	 ptr parameter;
	declare P_code		 fixed bin(35) parameter;

	declare cu_$arg_list_ptr	 entry returns (pointer);
	declare cu_$generate_call	 entry (entry, ptr);
	declare ipc_$mask_ev_calls	 entry (fixed bin (35));
	declare ipc_$unmask_ev_calls	 entry (fixed bin (35));
	declare ssu_$get_info_ptr	 entry (ptr) returns (ptr);
	declare ssu_$print_message	 entry () options (variable);

	declare 1 auto_request_data	 aligned like request_data automatic;
          declare code		 fixed bin(35);
	declare dont_mask		 bit(1);
	declare (masked_ev_calls_code, unmasked_ev_calls_code)
				 fixed bin (35);
	declare saved_abort_label	 label;
	declare sci_ptr		 pointer;

	declare addr		 builtin;
	declare cleanup		 condition;

	declare FALSE		init("0"b) bit(1) int static options(constant);

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


abort_line:
     entry (P_sci_ptr);				/* and many other args. */

	call cu_$generate_call (ssu_$print_message, cu_$arg_list_ptr ());
						/* print the message */
	sci_ptr = P_sci_ptr;
	sc_subsystem_info_ptr = ssu_$get_info_ptr (sci_ptr);
	go to sc_subsystem_info.abort_request_label;	/* Nonlocal unwind */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


invoke_request:
     entry (P_sci_ptr, P_request_name, P_arg_list_ptr, P_code);

	sci_ptr = P_sci_ptr;
	sc_subsystem_info_ptr = ssu_$get_info_ptr (sci_ptr);
	saved_abort_label = sc_subsystem_info.abort_request_label;
	masked_ev_calls_code, unmasked_ev_calls_code = -1;
	on cleanup
	     begin;
		sc_subsystem_info.abort_request_label = saved_abort_label;
		if masked_ev_calls_code = 0 & unmasked_ev_calls_code ^= 0
		then call ipc_$unmask_ev_calls (unmasked_ev_calls_code);
	     end;
	sc_subsystem_info.abort_request_label = ABORT_REQUEST;

	dont_mask = FALSE;
	request_data_ptr = addr(auto_request_data);
	sc_rf_ptr = addr (request_data.user_flags);
	call sc_subsystem_info.real_locate_request (sci_ptr, P_request_name,
	   addr(request_data), code);
	if code = 0 then				/* nonzero code reported later by ssu_ */
	   dont_mask = sc_request_flags.dont_mask_calls;

	if ^dont_mask
	then call ipc_$mask_ev_calls (masked_ev_calls_code);

	call cu_$generate_call (sc_subsystem_info.real_invoke_request, cu_$arg_list_ptr ());

ABORT_REQUEST:
	sc_subsystem_info.abort_request_label = saved_abort_label;
	if masked_ev_calls_code = 0 & unmasked_ev_calls_code ^= 0
	then call ipc_$unmask_ev_calls (unmasked_ev_calls_code);
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


real_abort_line:
     entry (P_sci_ptr);				/* and some other arguments */

/**** This entry is used to get the normal MR11 ssu_$abort_line functionality.
      It is used by sc_requests_$sign_on in order to abort the entire command
      line rather than just aborting the current request. */

	sci_ptr = P_sci_ptr;
	sc_subsystem_info_ptr = ssu_$get_info_ptr (sci_ptr);
	call cu_$generate_call (sc_subsystem_info.real_abort_line, cu_$arg_list_ptr ());
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


 %include sc_subsystem_info_;
 %include "_ssu_request_data";
     end sc_abort_line_util_;


