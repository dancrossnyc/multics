/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style2,idind30 */

system_control_:
     procedure;

/* System Control is the procedure called by the initializer process
   after system initialization has been completed in ring 1.
   It runs in ring 4, and is outwardly called by system_startup_ */

/*
   Initially coded by M. J. Spier on April 25, 1969
   Revised for mini_shell by R. C. Daley on June 29, 1969
   Recoded for efficiency by J.M. Grochow on December 22, 1969
   Recoded for the new User/System Control  by Michael J. Spier, March 27, 1970
   Completely recoded by Michael J. Spier on Saturday June 27, 1970
   Revised for operator communications by Dennis Capps Sept. 1972
   Intercom, input logging, elimination of bugs 5/74 THVV
   Split into seventeen little programs THVV 4/75
   Modified 750318 by PG to get test mode to work
   Modified for IOX April 1981 by Benson I. Margulies.
   Modified for call_bce August 1983 by Keith Loepere.
   Modified 1984-10-08 BIM for demise of communications 
   Modified 1984-10-26 BIM for ssu_ */

/****^  HISTORY COMMENTS:
  1) change(86-05-13,GJohnson), approve(86-05-13,MCR7387),
     audit(86-05-13,Martinson), install(86-05-14,MR12.0-1056):
     Correct error message documentation.
  2) change(86-08-01,Cox), approve(87-05-25,MCR7690), audit(87-03-13,GDixon),
     install(87-08-04,MR12.1-1055):
     Modified for change to mc_anstbl.incl.pl1.
  3) change(87-02-03,GDixon), approve(87-05-25,MCR7680),
     audit(87-05-06,Parisek), install(87-08-04,MR12.1-1055):
     Modified to meet coding standards by deleting unreferenced variables,
     declaring used builtins, etc.
                                                   END HISTORY COMMENTS */

/* DECLARATION OF BUILTIN FUNCTIONS */

	dcl     (addr, length, null, rtrim)   builtin;

/* CONDITIONS */

	dcl     any_other		        condition;
	dcl     signal_io_		        condition;

/* DECLARATION OF EXTERNAL ENTRIES */

	dcl     hphcs_$syserr	        entry options (variable);
	dcl     hphcs_$call_bce	        entry ();
	dcl     ioa_$ioa_switch	        entry () options (variable);
	dcl     sc_init_		        entry ();
	dcl     sc_process_command_line_      entry (pointer, pointer, fixed binary (21));
	dcl     sc_shutdown_	        entry;
	dcl     sc_signal_handler_	        entry ();
	dcl     sc_signal_io_handler_	        entry;


/* DECLARATION OF AUTOMATIC STORAGE VARIABLES */

	dcl     buffer		        char (500);
	dcl     command_line_length	        fixed bin (21);
	dcl     initial_command	        char (30);
	dcl     ip		        ptr automatic;


/* This section of the code initializes the system control environment. */

	initial_command = "";
	go to common;				/* if entered as result of "standard" */

startup_entry:
     entry;					/* entry to execute startup command upon entry */

	initial_command = "startup";

	go to common;

multics_entry:
     entry;					/* entry to execute multics cmd immediately upon entry */

	initial_command = "multics";
	go to common;

common:
	if ^sc_stat_$test_mode
	then on any_other
		begin;
		     call hphcs_$syserr (1, "system_control_: fault during init.");
		     call hphcs_$call_bce ();
		end;

	call sc_init_ ();

	on any_other call sc_signal_handler_;
	on signal_io_ call sc_signal_io_handler_;

	sc_stat_$system_shutdown_label = SHUTDOWN_COMES_HERE;

	if initial_command ^= ""
	then call sc_process_command_line_ (sc_stat_$master_sci_ptr, addr (initial_command),
		length (rtrim (initial_command)));



/* Here is the main loop of system control.
   All this program does is act like a regular listener:
   It reads a line from the master console, parses it to
   find out what the command is, and executes the command.

   The trick is that in the initializer process, there are
   a large number of static event call channels, in the process's
   event channel table, which can have events arrive on them.
   When such an event is signalled, the ipc_$block module
   appears (on a stack trace) to have called out instead of
   returning to the DIM for the console.

   The rule in the initializer is that any module which
   might encounter a block condition (such as an output dim)
   must mask event calls so that the only place where
   event calls can be activated is while the read call
   just below is blocked. */

	sc_stat_$master_abort_label = SYSTEM_CONTROL_LISTENER;

SYSTEM_CONTROL_LISTENER:
	do while ("1"b);
	     mc_atep = sc_stat_$initzer_ttyp;		/* it may get set at any time */
	     if ^sc_stat_$Multics | (mc_atep = null ())
	     then call ioa_$ioa_switch (sc_stat_$master_iocb, "Ready");
	     else call ioa_$ioa_switch (sc_stat_$master_iocb, "Ready^[ (^a)^;^s^]^[ (Not signed on.)^]",
		     mc_ate.signed_on, mc_ate.personid,
		     as_data_$rs_ptrs (0) -> installation_parms.require_operator_login & ^mc_ate.signed_on);
	     command_line_length = 0;
	     call iox_$get_line (sc_stat_$master_iocb, addr (buffer), length (buffer), command_line_length, (0));
	     if command_line_length > 0
	     then call sc_process_command_line_ (sc_stat_$master_sci_ptr, addr (buffer), command_line_length);
	end;

SHUTDOWN_COMES_HERE:
	call sc_shutdown_;

%include as_data_;

%include installation_parms;

%include iox_entries;

%include mc_anstbl;

%include sc_stat_;

/* BEGIN MESSAGE DOCUMENTATION

Message:
Ready

S:	$info

T:	In response to an operator command.

M:	The Initializer types Ready whenever it is ready to accept
an Initializer command in ring 4.

A:	Type the desired command.


Message:
system_control_: fault during init

S:	ring 4 system control.

T:	$init

M:	Some error condition has occurred unexpectedly while
starting up the ring 4 initializer environment.
The system will return to bce.

A:	$contact
$recover

   END MESSAGE DOCUMENTATION */

     end system_control_;
