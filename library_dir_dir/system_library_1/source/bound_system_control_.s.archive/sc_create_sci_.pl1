/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */

/* sc_create_sci_ -- create an invocation of the system control 
	        ssu invocation. */
/* format: style2,idind30 */

/**** Written 1984-11-01 BIM */
/**** Modified 1985-01-07, BIM: for access_control_name in sc_subsystem_info */
/**** Modified 1985-02-01, BIM: invoke_request to intercept abort_line */
/**** Modified 1985-02-18, E. Swenson: to save real abort_line routine */


/****^  HISTORY COMMENTS:
  1) change(87-02-22,GDixon), approve(87-05-25,MCR7680),
     audit(87-05-06,Parisek), install(87-08-04,MR12.1-1055):
     Modified to correct coding standard violations.
                                                   END HISTORY COMMENTS */


sc_create_sci_:
     procedure (Sci_ptr, Code);

	declare Sci_ptr		        pointer;
	declare Code		        fixed bin (35);

	dcl     (addr, null)	        builtin;

	declare sc_get_error_name_	        entry;
	declare sc_execute_command_line_      entry;
	declare sc_execute_command_line_$locate_request
				        entry;
	declare sc_abort_line_util_$invoke_request
				        entry;
	declare sc_abort_line_util_$abort_line
				        entry;
	declare ssu_$create_invocation        entry (char (*), char (*), ptr, ptr, char (*), ptr, fixed bin (35));
	declare ssu_$destroy_invocation       entry (ptr);
	declare ssu_$cpescape_disabled        entry;
	declare ssu_$get_area	        entry (ptr, ptr, char (*), ptr);
	declare ssu_$set_info_ptr	        entry (ptr, ptr);
	declare ssu_$set_procedure	        entry (ptr, char (*), entry, fixed bin (35));
	declare ssu_$set_prompt_mode	        entry (ptr, bit (*));
	declare ssu_$get_procedure	        entry (ptr, char (*), entry, fixed bin (35));
	declare ssu_$add_request_table        entry (ptr, ptr, fixed bin, fixed bin (35));
	declare ssu_$add_info_dir	        entry (ptr, char (*), fixed bin, fixed bin (35));
	declare ssu_$null_label	        label ext static;

	declare sc_request_table_$system_control_requests
				        ext bit (36) aligned;

	declare ssu_request_tables_$standard_requests
				        bit (36) aligned ext static;
	declare sci_ptr		        pointer;


	call ssu_$create_invocation ("system_control", "", null (), null (), "", sci_ptr, Code);
	if Code ^= 0
	then return;

	call ssu_$add_request_table (sci_ptr, addr (sc_request_table_$system_control_requests), 1, Code);
	if Code ^= 0
	then return;
	call ssu_$add_request_table (sci_ptr, addr (ssu_request_tables_$standard_requests), 10000, Code);
	if Code ^= 0
	then return;
	call ssu_$add_info_dir (sci_ptr, sc_stat_$info_dir, 0, (0));
	call ssu_$add_info_dir (sci_ptr, ">documentation>ss>ssu_info_dirs>standard_requests", 10000, (0));

	call ssu_$set_procedure (sci_ptr, "cpescape", ssu_$cpescape_disabled, (0));
	call ssu_$set_procedure (sci_ptr, "get_subsystem_and_request_name", sc_get_error_name_, (0));
	begin;
	     declare temp_area_ptr		   pointer;
	     call ssu_$get_area (sci_ptr, null (), "", temp_area_ptr);
	     allocate sc_subsystem_info in (temp_area_ptr -> sc_ss_area);
	     sc_subsystem_info.area_ptr = temp_area_ptr;
	end;
	sc_subsystem_info.mc_atep = null ();
	sc_subsystem_info.real_iocb = null ();
	sc_subsystem_info.restriction_flags = (36)"1"b;
	sc_subsystem_info.flags = "0"b;
	sc_subsystem_info.source_name = "system_control";
	sc_subsystem_info.access_control_name = sc_stat_$unidentified_access_name;

	call ssu_$get_procedure (sci_ptr, "execute_line", sc_subsystem_info.real_execute_line, (0));
	call ssu_$set_procedure (sci_ptr, "execute_line", sc_execute_command_line_, (0));
	call ssu_$get_procedure (sci_ptr, "locate_request", sc_subsystem_info.real_locate_request, (0));
	call ssu_$set_procedure (sci_ptr, "locate_request", sc_execute_command_line_$locate_request, (0));
	call ssu_$get_procedure (sci_ptr, "invoke_request", sc_subsystem_info.real_invoke_request, (0));
	call ssu_$set_procedure (sci_ptr, "invoke_request", sc_abort_line_util_$invoke_request, (0));
	call ssu_$get_procedure (sci_ptr, "abort_line", sc_subsystem_info.real_abort_line, (0));
	call ssu_$set_procedure (sci_ptr, "abort_line", sc_abort_line_util_$abort_line, (0));

	sc_subsystem_info.hangup_entry = HANGUP_NOOP;
	sc_subsystem_info.abort_request_label = ssu_$null_label;
	call ssu_$set_info_ptr (sci_ptr, addr (sc_subsystem_info));
	call ssu_$set_prompt_mode (sci_ptr, DONT_PROMPT); /* in case someone gets the idea ... */
	Sci_ptr = sci_ptr;
	return;

destroy:
     entry (Sci_ptr);
	call ssu_$destroy_invocation (Sci_ptr);
	return;

HANGUP_NOOP:					/* in case noone sets anything better */
     entry;
	return;

%include sc_stat_;
%include sc_subsystem_info_;
%include ssu_prompt_modes;
     end sc_create_sci_;
