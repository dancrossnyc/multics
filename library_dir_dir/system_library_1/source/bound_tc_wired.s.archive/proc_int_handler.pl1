/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(85-11-27,Herbst), approve(87-07-20,MCR7697),
     audit(87-07-20,GDixon), install(87-08-04,MR12.1-1055):
     Added system_message_sct_index.
                                                   END HISTORY COMMENTS */


/* format: style2,indcomtxt */

/* DESCRIPTION:
   Process Interrupts Are Sent Here.
*/

/* HISTORY:
Written by N. I. Morris, 09/14/71.
Modified:
10/02/72 by N. I. Morris:  for 6090.
12/04/75 by D. M. Wells:  to add neti condition.
02/12/76 by Noel I. Morris:  for new connect mechanism.
07/01/77 by T. Casey:  to add susp and term.
01/12/79 by C. Hornig:  to add wkp_.
12/03/83 by BIM:  for pgt_.
07/16/84 by R. Michael Tague:  Added dm_shutdown_warning_ and dm_user_shutdown_
08/22/84 by R. Michael Tague:  Removed dm_shutdown_warning_ and
            dm_user_shutdown_.  Added system_shutdown_scheduled_ and
            dm_shutdown_scheduled_.
*/

proc_int_handler:
     procedure;

	dcl     msg		 bit (36) aligned,	/* IPS message after masking */
	        stacq_temp		 bit (36) aligned,
	        new_ips_message	 bit (36) aligned,
	        mc_ptr		 ptr,		/* pointer to machine conditions */
	        fim_code		 fixed bin (17),	/* code to index into SCT */
	        i			 fixed bin,	/* index into mask data table */
	        ringno		 fixed bin (3),	/* ring number */
	        r			 fixed bin (3),	/* ring number iteration variable */
	        name		 char (31);	/* condition name from table */

	dcl     (
	        pds$apt_ptr		 ptr,		/* pointer to APT entry for this process */
	        pds$ips_mask	 (0:7) bit (36),	/* IPS masks for this process */
	        pds$auto_mask	 (0:7) bit (36),	/* automatic IPS masks for this process */
	        pds$signal_data	 (32) fixed bin
	        )			 ext;		/* machine conditions for signalling */

	dcl     1 pds$condition_name	 external,
	        ( 2 lth		 fixed bin (9) unsigned,
		2 name		 char (31)
		)		 unal;

	dcl     pds$process_group_id	 char (32) ext static;

	dcl     (addr, bit, fixed, length, rtrim, stacq, substr)
				 builtin;

	dcl     signaller		 ext entry;
	dcl     ring_alarm$set	 ext entry (fixed bin (3));
	dcl     syserr		 entry options (variable);


/* Get pointers to machine conditions and extract information. */

	mc_ptr = addr (pds$signal_data);		/* Machine conditions have been put here for us. */
	scup = addr (mc_ptr -> mc.scu);		/* Generate a pointer to SCU info. */
	ringno = fixed (scup -> scu.ppr.prr, 3);	/* Extract ring number from machine conditions. */
	aptep = pds$apt_ptr;			/* Get a pointer to APT entry for this process. */


/* See if any of the events set in the APT entry ips_message are unmasked
   in this ring or any higher ring.  If not, just return;			*/

	do r = ringno to 7;				/* Start checking in this ring. */
	     msg = apte.ips_message & pds$ips_mask (r);	/* Are we taking this signal in this ring? */
	     if msg
	     then do;				/* If so ... */
		     do i = 1 to sys_info$ips_mask_data.count;
						/* Search for bit. */
			if msg & sys_info$ips_mask_data.mask (i).mask
			then goto found_ips;	/* If found, go process it. */
		     end;
		     /*** got an invalid bit */
		     call syserr (LOG, "proc_int_handler: Invalid IPS interrupt(s) ^w for ^a.", msg,
			pds$process_group_id);
		     stacq_temp = apte.ips_message;
		     new_ips_message = stacq_temp & sys_info$all_valid_ips_mask;
		     do while (^stacq (apte.ips_message, new_ips_message, stacq_temp));
			stacq_temp = apte.ips_message;
			new_ips_message = stacq_temp & sys_info$all_valid_ips_mask;
		     end;
		     return;			/* Ignore unmeaningful messages. */
		end;
	end;
	return;					/* Message not unmasked in any ring. */


/* The message was found in some ring.  If the ring is higher than
   current ring, set ring alarm to catch exit to that ring.		*/

found_ips:
	if r > ringno
	then do;					/* If unmasked in a higher ring ... */
		call ring_alarm$set (r);		/* Set a ring alarm to go off later. */
		return;				/* Return to caller. */
	     end;


/* The message was found in this ring.  Remove appropriate bit
   from APT entry ips_message, and check for automatic masking.
   If automatic masking is indicated, mask _a_l_l IPS events after
   saving the current mask in the machine conditions.		*/

	msg = sys_info$ips_mask_data.mask (i).mask;	/* Get only the correct bit. */
	stacq_temp = apte.ips_message;
	new_ips_message = stacq_temp & ^msg;
	do while (^stacq (apte.ips_message, new_ips_message, stacq_temp));
	     stacq_temp = apte.ips_message;
	     new_ips_message = stacq_temp & ^msg;
	end;

	if msg & pds$auto_mask (ringno)
	then do;					/* If automatic masking to take place ... */
		mc_ptr -> mc.ips_temp = pds$ips_mask (ringno) | "000000000000000000000000000000000001"b;
						/* Save the mask with low-order bit on. */
		pds$ips_mask (ringno) = "0"b;		/* Now mask everything. */
	     end;
	else /* If not automatic masking ... */
	     mc_ptr -> mc.ips_temp = "0"b;		/* Clear the IPS mask in machine conditions. */


/* Copy the condition name and the machine conditions in PDS
   in preparation for signalling.  Finally, call the signaller
   to signal this event.					*/

	name = substr(sys_info$ips_mask_data.mask (i).name,1,length(name));
						/* Grab the name. */
	pds$condition_name.lth = length (rtrim (name));	/* Determine the length of the name. */
	pds$condition_name.name = name;		/* Set the condition name. */

	if i = 1
	then fim_code = quit_sct_index;
	else if i = 2
	then fim_code = cput_sct_index;
	else if i = 3
	then fim_code = alrm_sct_index;
	else if i = 4
	then fim_code = neti_sct_index;
	else if i = 5
	then fim_code = susp_sct_index;
	else if i = 6
	then fim_code = term_sct_index;
	else if i = 7
	then fim_code = wkp_sct_index;
	else if i = 8
	then fim_code = pgt_sct_index;
	else if i = 9
	then fim_code = system_shutdown_scheduled_sct_index;
	else if i = 10
	then fim_code = dm_shutdown_scheduled_sct_index;
	else if i = 11
	then fim_code = system_message_sct_index;
	else fim_code = 0;
	mc_ptr -> mc.fcode = bit (fim_code, 17);	/* place code in MC for outer-ring use */

	call signaller;				/* Transfer control to the signaller. */

/* format: off */
%page; %skip (4); %include mc;
%page; %skip (4); %include static_handlers;
%page; %skip (4); %include apte;
%page; %skip (4); %include ips_mask_data;
%page; %skip (4); %include syserr_constants;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   proc_int_handler: Invalid IPS interrupt(s) IPS_BITS for USERNAME.

   S:     $info

   T:     $run

   M:     One or more undefined IPS messages as indicated by IPS_BITS
   have been sent to user USERNAME. They are ignored.

   A:     $contact


   END MESSAGE DOCUMENTATION */

     end proc_int_handler;
