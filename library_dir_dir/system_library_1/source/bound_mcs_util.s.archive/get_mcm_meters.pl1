/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style4,delnl,insnl,^ifthendo */
get_mcm_meters:
     proc (pm_chan_name, pm_info_ptr, pm_code);

/* this procedure is called through phcs_ to get meters on MCM channels */

/* Written December 1980 by Robert Coren */
/* Modified February 1981 by Robert Coren to add chan_star_list entry */

/* PARAMETERS */

dcl  pm_chan_name char (*);
dcl  pm_info_ptr ptr;
dcl  pm_star_name char (*);
dcl  pm_version fixed bin;
dcl  pm_areap ptr;
dcl  pm_list_ptr ptr;
dcl  pm_code fixed bin (35);


/* AUTOMATIC */

dcl  devx fixed bin;
dcl  info_ptr ptr;
dcl  code fixed bin (35);
dcl  chan_name char (32);
dcl  state fixed bin;
dcl  star_name char (32);
dcl  version fixed bin;
dcl  star_areap ptr;
dcl  devx_listp ptr;
dcl  continue bit (1);
dcl  only_one bit (1);
dcl  all bit (1);
dcl  total_channels fixed bin;
dcl  actual_count fixed bin;
dcl  extra_count fixed bin;
dcl  i fixed bin;


/* BASED */

dcl  star_area area (100) based (star_areap);
dcl  devx_list (total_channels) fixed bin based (devx_listp);

dcl  1 extra_channels (extra_count) based aligned like chan_star_info.chan_entry;


/* ENTRIES */

dcl  check_star_name_$entry entry (char (*), fixed bin (35));
dcl  match_star_name_ entry (char (*), char (*), fixed bin (35));
dcl  priv_channel_manager$get_devx entry (char (*), fixed bin, fixed bin (35));
dcl  priv_channel_manager$priv_control entry (char (*), char (*), ptr, fixed bin (35));
dcl  tty_index$tty_order entry (fixed bin, char (*), ptr, fixed bin, fixed bin (35));


/* EXTERNAL STATIC */

dcl  error_table_$unimplemented_version fixed bin (35) external static;
dcl  error_table_$noalloc fixed bin (35) external static;
dcl  error_table_$nomatch fixed bin (35) external static;
dcl  error_table_$no_operation fixed bin (35) external static;
dcl  error_table_$undefined_order_request fixed bin (35) external static;


/* BUILTINS */

dcl  (addr, null) builtin;


/* CONDITIONS */

dcl  (cleanup, area) condition;

%include tty_buf;
%include lct;
%include multiplexer_types;
%include line_types;
%include dn355_data;
%include pcb;
%include get_comm_meters_info;
%include chan_star_info;

	chan_name = pm_chan_name;
	call priv_channel_manager$get_devx (chan_name, devx, code);
	if code ^= 0
	then do;
	     pm_code = code;
	     return;
	end;

	ttybp = addr (tty_buf$);
	lctp = tty_buf.lct_ptr;
	lctep = addr (lct.lcte_array (devx));
	info_ptr = pm_info_ptr;
	if info_ptr -> get_comm_meters_info.version ^= GET_COMM_METERS_INFO_VERSION_1
	then do;
	     pm_code = error_table_$unimplemented_version;
	     return;
	end;

	info_ptr -> get_comm_meters_info.subchan_type = lcte.channel_type;
	if lcte.channel_type = TTY_MPX
	then call tty_index$tty_order (devx, "get_meters", info_ptr, state, code);

	else call priv_channel_manager$priv_control (chan_name, "get_meters", info_ptr, code);
	if code = error_table_$undefined_order_request | code = error_table_$no_operation
						/* some multiplexer couldn't handle this */
	then do;
	     info_ptr -> get_comm_meters_info.subchan_ptr = null ();
	     info_ptr -> get_comm_meters_info.parent_ptr = null ();
	     code = 0;
	end;

	pm_code = code;
	return;

chan_star_list:
     entry (pm_star_name, pm_version, pm_areap, pm_list_ptr, pm_code);

/* This entry returns a list of channel names that match a given star name.
   Additional information is also passed back for each channel. */

	star_name = pm_star_name;
	version = pm_version;
	star_areap = pm_areap;

	if version ^= CHAN_STAR_INFO_VERSION_1
	then do;
	     pm_code = error_table_$unimplemented_version;
	     return;
	end;

	devx_listp = null ();
	chan_star_list_ptr = null ();
	chan_star_count = 0;
	ttybp = addr (tty_buf$);
	lctp = tty_buf.lct_ptr;
	lcntp = lct.lcnt_ptr;
	total_channels = lct.max_no_lctes;

	only_one, all = "0"b;

/* find out if we're to match one, some, or all names */

	call check_star_name_$entry (star_name, code);

	if code = 0				/* simple (non-star) name */
	then do;
	     only_one = "1"b;
	     chan_star_count = 1;
	end;

	else if code = 2				/* name is ** or the equivalent */
	then do;
	     all = "1"b;
	     chan_star_count = total_channels;
	     actual_count = 0;
	end;

	else if code ^= 1				/* code = 1 means starname */
	then do;					/* anything else is bad */
	     pm_code = code;
	     return;
	end;

	on cleanup call cleanup_proc;
	on area
	     begin;
		call cleanup_proc;
		pm_code = error_table_$noalloc;
		go to exit;
	     end;

	continue = "1"b;				/* initialize the loop flag */
	if all | only_one				/* we know how many we're going to get */
	then allocate chan_star_info in (star_area) set (chan_star_list_ptr);

	else allocate devx_list in (star_area) set (devx_listp);
						/* we'll count 'em now and allocate star structure later */

	do devx = 1 to total_channels while (continue);
	     lctep = addr (lct.lcte_array (devx));
	     if lcte.entry_in_use			/* if this is a real one */
	     then do;
		if all
		then do;
		     actual_count = actual_count + 1;
		     call fill_chan_info (actual_count, devx);
		end;

		else if only_one
		then if lcnt.names (devx) = star_name	/* this is the one */
		     then do;
			call fill_chan_info (1, devx);
			continue = "0"b;		/* loop no more */
		     end;
		     else ;

		else do;
		     call match_star_name_ (lcnt.names (devx), star_name, code);
		     if code = 0			/* this is one */
		     then do;
			chan_star_count = chan_star_count + 1;
			devx_list (chan_star_count) = devx;
		     end;
		     else if code ^= error_table_$nomatch
						/* this is the only other thing we would expect */
		     then do;
			free devx_list in (star_area);
			pm_code = code;
			return;
		     end;
		end;
	     end;
	end;

	code = 0;					/* reasonable assumption */
	if ^all & ^only_one				/* we had to do some matching */
	then do;
	     if chan_star_count = 0			/* only we didn't find any */
	     then code = error_table_$nomatch;
	     else do;
		allocate chan_star_info in (star_area) set (chan_star_list_ptr);
		do i = 1 to chan_star_count;
		     lctep = addr (lct.lcte_array (devx_list (i)));
		     call fill_chan_info (i, devx_list (i));
		end;
	     end;

	     free devx_list in (star_area);		/* we're through with this anyway */
	     devx_listp = null ();			/* so cleanup handler will work right */
	end;

	if only_one
	then if continue				/* there was only one and we didn't find it */
	     then do;
		free chan_star_info in (star_area);
		code = error_table_$nomatch;
	     end;

	if all
	then if actual_count < chan_star_count		/* we left out some unused LCTEs */
	     then do;
		extra_count = chan_star_count - actual_count;
						/* free the leftover ones */
		free addr (chan_star_info.chan_entry (actual_count + 1)) -> extra_channels;
		chan_star_info.n_channels = actual_count;
	     end;

	if code = 0
	then do;
	     chan_star_info.version = version;
	     pm_list_ptr = chan_star_list_ptr;
	end;

	pm_code = code;
exit:
	return;

/* FILL_CHAN_INFO -- procedure called by chan_star_list entry to fill in the structure for a channel that's been matched */

fill_chan_info:
     proc (a_element, a_chanx);

dcl  a_element fixed bin;				/* index in chan_star_list array of structure to be filled in */
dcl  a_chanx fixed bin;				/* devx of channel to be described */

dcl  element fixed bin;
dcl  chanx fixed bin;
dcl  parent_lctep ptr;				/* pointer to lcte of current channel's parent */

	element = a_element;
	chanx = a_chanx;

	chan_star_info.chan_entry (element).name = lcnt.names (chanx);
	chan_star_info.chan_entry (element).mpx_type = lcte.channel_type;

	if lcte.major_channel_devx <= 0		/* top-level multiplexer, no parent */
	then do;
	     chan_star_info.chan_entry (element).parent_type = -1;
	     chan_star_info.chan_entry (element).line_type = LINE_UNKNOWN;
	end;

	else do;
	     parent_lctep = addr (lct.lcte_array (lcte.major_channel_devx));
	     if parent_lctep -> lcte.channel_type = MCS_MPX
						/* it's a physical channel */
	     then do;				/* get its line type from the PCB */
		fnpp = parent_lctep -> lcte.data_base_ptr;
		pcbp = addr (fnp_info.pcb_array_ptr -> pcb_array (lcte.subchannel));
		chan_star_info.chan_entry (element).line_type = pcb.line_type;
	     end;

	     else chan_star_info.chan_entry (element).line_type = LINE_UNKNOWN;

	     chan_star_info.chan_entry (element).parent_type = parent_lctep -> lcte.channel_type;
	end;
	return;
     end fill_chan_info;

/* CLEANUP_PROC -- cleanup handler for chan_star_list. Frees anything it allocated */

cleanup_proc:
     proc;

	if devx_listp ^= null ()
	then free devx_list in (star_area);

	if chan_star_list_ptr ^= null ()
	then free chan_star_info in (star_area);
	return;
     end cleanup_proc;

     end get_mcm_meters;
