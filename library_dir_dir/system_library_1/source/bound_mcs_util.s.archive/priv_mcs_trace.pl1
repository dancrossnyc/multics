/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


priv_mcs_trace: procedure;

/* Control entrypoints for the MCM tracing software. */
/* Written by C. Hornig, March 1980 */
/* Updated for set_channel_trace, set_global_trace, 10 March 82, W. Olin Sibert */

declare   Table_size fixed bin parameter;		/* entries in trace table */
declare   Global_trace_flags bit (*) parameter;
declare   Devx fixed bin parameter;
declare   Channel_trace_flags bit (2) aligned parameter;
declare   Code fixed bin (35) parameter;

declare 1 trace_flags unaligned automatic like tty_buf.trace.flags;

declare   devx fixed bin;
declare   channel_trace_flags bit (2) aligned;

declare  (addr, binary, bit, currentsize, mod, null, pointer, rel, size, stacq, string, substr, unspec) builtin;

%include mcs_trace_data;

declare  (error_table_$invalid_state,
          error_table_$invalid_device,
          error_table_$noalloc) fixed bin (35) external static;

declare   bit_offset_ entry (pointer) returns (fixed bin (24));

%page;
/* * * * * * * * * * SET_TRACE_TABLE_SIZE * * * * * * * * * */

set_trace_table_size: entry (Table_size, Code);

	Code = 0;
	trace_array_size = Table_size;
	call find_stuff;

	if trace_array_size <= 0
	then do;					/* wants to delete table */
	     if trace_array_ptr = null () then return;
	     if tty_buf.trace.enable then do;		/* must be disabled */
		Code = error_table_$invalid_state;
		return;
	     end;

	     tty_buf.trace.data_offset = ""b;
	     call tty_space_man$free_space (currentsize (trace_array), trace_array_ptr); /* free the array */
	end;

	else do;					/* allocate a table */
	     if trace_array_ptr ^= null () then do;
		Code = error_table_$invalid_state;
		return;
	     end;

	     call tty_space_man$get_space (size (trace_array), trace_array_ptr);
	     if trace_array_ptr = null () then do;
		Code = error_table_$noalloc;
		return;
	     end;

	     trace_array.num_entries = trace_array_size;
	     trace_array.idx = bit (binary (1, 36));
	     unspec (trace_array.entry) = ""b;
	     tty_buf.trace.data_offset = rel (trace_array_ptr);
	     string (tty_buf.trace.flags) = ""b;	/* Turn it all off to start with */
	end;

	return;

%page;
/* * * * * * * * * * GET_TRACE_TABLE_SIZE * * * * * * * * * */

get_trace_table_size: entry (Table_size, Code);

	Code, Table_size = 0;
	call find_stuff;
	if trace_array_ptr ^= null ()
	then Table_size = trace_array.num_entries;
	else Table_size = 0;
	return;

%page;
/* * * * * * * * * * * SET_GLOBAL_TRACE * * * * * * * * * * */

set_global_trace: 
     entry (Global_trace_flags, Code);

          call find_stuff;

	if trace_array_ptr = null () then do;
	     Code = error_table_$invalid_state;
	     return;
	     end;

          string (trace_flags) = Global_trace_flags;
	tty_buf.trace.flags = trace_flags;

	Code = 0;
	return;
	
%page;
/* * * * * * * * * * * SET_CHANNEL_TRACE * * * * * * * * * * */

/* Turns on tracing for an individual channel entry. Note that the channel does
   not have to be currently in use or anything like that. The word containing 
   the trace flags is updated with stacq for precisely this reason, since we
   don't lock the channel here, either. */

set_channel_trace: 
     entry (Devx, Channel_trace_flags, Code);

          call find_stuff;

	devx = Devx;
	channel_trace_flags = Channel_trace_flags;
	Code = 0;

	if (devx < 1) | (devx > lct.max_no_lctes) then do;
	     Code = error_table_$invalid_device;
	     return;
	     end;

	lctep = addr (lct.lcte_array (devx));

	call setbit (lcte.trace, substr (channel_trace_flags, 1, 1));
	call setbit (lcte.trace_force, substr (channel_trace_flags, 2, 1));

	Code = 0;
	return;

%page;
/* * * * * * * * * * * SETBIT * * * * * * * * * * */

setbit:
     procedure (P_bit, P_value);

declare	P_bit bit (1) unaligned parameter;
declare	P_value bit (1) unaligned parameter;

declare	word_ptr pointer;
declare	based_word bit (36) aligned based;
declare	old_value bit (36) aligned;
declare	new_value bit (36) aligned;
declare	bit_number fixed bin;

/* This procedure is used to set the bits in the lcte flag word which control tracing. It uses stacq
   in this fashion because it doesn't want to try locking the lcte, since it might be uninitialized
   or something like that, and tracing is supposed to be completely independent of the rest of MCS. */

/* ***** Note that the use of stacq here depends on the ability for stacq to interlock with RAR type
   instructions (ansa, orsa) which are used elsewhere to set bits. */

	word_ptr = addr (P_bit);			/* Find the word, and which bit we're to set */
	bit_number = 1 + mod (bit_offset_ (word_ptr), 36);
	word_ptr = pointer (word_ptr, rel (word_ptr));	/* Align to word boundary */

	old_value = word_ptr -> based_word;		/* Set the requested bit */
	new_value = old_value;
	substr (new_value, bit_number, 1) = P_value;

	do while (^stacq (word_ptr -> based_word, new_value, old_value));
	     old_value = word_ptr -> based_word;	/* Keep trying to update indivisibly */
	     new_value = old_value;
	     substr (new_value, bit_number, 1) = P_value;
	     end;

	return;
	end setbit;

%page;
/* * * * * * * * * * * FIND_STUFF * * * * * * * * * * */

find_stuff: procedure;
	     ttybp = addr (tty_buf$);
	     lctp = tty_buf.lct_ptr;
	     if tty_buf.trace.data_offset = ""b
	     then trace_array_ptr = null ();
	     else trace_array_ptr = pointer (ttybp, tty_buf.trace.data_offset);
	end find_stuff;

/* * * * * * * * * * * * * * * * * * * */

%include tty_buf;
%include lct;
%include tty_space_man_dcls;

     end priv_mcs_trace;
