/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */
init_root_dir:
     procedure;

/*
   USAGE: call init_root_dir;

   NOTES: Called during system initialization "init_root_dir"  creates
   and initializes the root directory if the system is being cold booted.
   Various directory variables are set/preset such as the root id
   and all self referencing pointers. If the system is being
   warm booted these variables are not reset. In either case the root
   directory is made known to the initializer process.


   modified 4/75 for NSS by THVV
   modified 8/76 for variable size hash tables by S.E. Barr
   Modified by D. Vinograd 6/76 to set volume dumper bit map
   Modified 4/77 by M. Weaver to replace makeknown with makeknown_
   Modified 18 Feb 79 by D. Spector to extend root quota from 17 to 18 bits
   Modified February 1982 by C. Hornig to salvage root when necessary
   Modified March 1982 by J. Bongiovanni to eliminate use of FSDCT
   Modified October 1984 by K. Loepere for explicit activation of root.
*/

dcl  vtocx fixed bin;
dcl  pvtx fixed bin;
dcl  segno fixed bin;
dcl  code fixed bin (35);
dcl  cold bit (1) aligned;

dcl  pvt$rlv_needs_salv bit (1) aligned external;
dcl  pvt$root_pvtx fixed bin external;
dcl  pvt$root_vtocx fixed bin external;
dcl  sst$root_astep ptr external;

dcl  ROOT_UID bit (36) int static options (constant) init ((36)"1"b);

dcl  (addr, baseptr, binary, null, unspec) builtin;

dcl  create_root_dir entry (ptr);
dcl  create_root_vtoce entry;
dcl  find entry (char (*), ptr);
dcl  get_aste entry (fixed bin (9)) returns (ptr);
dcl  initialize_kst entry ();
dcl  makeknown_ entry (ptr, fixed bin, fixed bin, fixed bin (35));
dcl  pathname_am$initialize entry ();
dcl  pc$fill_page_table entry (ptr, ptr, fixed bin (9));
dcl  salvager$dir_salv_boot entry (char (*));
dcl  search_ast$hash_in entry (ptr);
dcl  syserr entry options (variable);
dcl  syserr$error_code entry options (variable);
dcl  vtoc_man$get_vtoce entry (bit (36) aligned, fixed bin, fixed bin, bit (3), ptr, fixed bin (35));

dcl  1 mk_info aligned like makeknown_info;

dcl  1 local_vtoce like vtoce aligned;
%page;
	intk_cardp = null ();
	call find ("intk", intk_cardp);		/* see if hierarchy is intact */
	cold = (intk_card.warm_or_cold = "cold");

	if cold then call create_root_vtoce;		/* Create the root */

	pvtx = pvt$root_pvtx;			/* Find the pack where the root is */
	vtocx = pvt$root_vtocx;			/* CONVENTION: root vtocx always 0 */
	vtocep = addr (local_vtoce);
	call vtoc_man$get_vtoce ("0"b, pvtx, vtocx, "111"b, vtocep, code);
	if code ^= 0 then call syserr$error_code (1, code, "init_root_dir: Error on root vtoce");

	sst$root_astep, astep = get_aste (64);		/* Obtain proper VTOC entry */
	aste.msl = vtoce.msl;			/* and activate the ROOT */
	aste.vtocx = vtocx;
	aste.pvtx = pvtx;
	aste.usedf, aste.gtus, aste.gtms, aste.nqsw, aste.dirsw, aste.master_dir, aste.ehs, aste.gtpd, aste.dnzp = "1"b;
	aste.dtu = vtoce.dtu;
	aste.dtm = vtoce.dtm;
	aste.csl = vtoce.csl;
	aste.records = vtoce.records;
	aste.quota (*) = vtoce.quota (*);
	aste.used (*) = vtoce.used (*);
	aste.tqsw (*) = "1"b;
	call pc$fill_page_table (astep, addr (vtoce.fm), binary (aste.csl, 9));
	aste.uid = ROOT_UID;
	call search_ast$hash_in (astep);

/* Set up Initializer's KST. Must be done after sys_info is initialized & before call to makeknown. */

	call initialize_kst;
	call pathname_am$initialize;

	unspec (mk_info) = "0"b;
	mk_info.uid = ROOT_UID;
	mk_info.entryp = null ();
	mk_info.dirsw = "1"b;
	mk_info.allow_write = "1"b;
	mk_info.activate = "1"b;
	call makeknown_ (addr (mk_info), segno, (0), code);
	if code ^= 0 then call syserr$error_code (1, code, "init_root_dir: Error from makeknown on root.");
	dp = baseptr (segno);

/* If this is a cold boot, set up the root directory. Code assumes new pages are zero. */

	if cold then call create_root_dir (dp);

	if dir.uid ^= ROOT_UID then call syserr (1, "init_root_dir: Root damaged.");

	if pvt$rlv_needs_salv | (dir.uid ^= ROOT_UID) | (dir.modify ^= ""b) then call salvager$dir_salv_boot (">");

	return;
%page;
%include aste;
%include config_intk_card;
%include dir_header;
%include makeknown_info;
%include vtoce;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   init_root_dir: Error on root vtoce ERROR_MESSAGE

   S:	$crash

   T:	$init

   M:	The supervisor cannot locate the VTOC entry for the root directory.
   The RPV may have been damaged.

   A:	$recover
   A recovery of the RPV may be required.


   Message:
   init_root_dir: Error from makeknown on root ERROR_MESSAGE

   S:	$crash

   T:	$init

   M:	$err

   A:	Reboot with a different version of the system.


   Message:
   init_root_dir: Root damaged.

   S:	$crash

   T:	$init

   M:	The unique ID of the root directory
   in the directory header is incorrect.
   The contents of the RPV may have been damaged.

   A:	$recover
   A recovery of the RPV may be required.


   END MESSAGE DOCUMENTATION */

     end init_root_dir;
