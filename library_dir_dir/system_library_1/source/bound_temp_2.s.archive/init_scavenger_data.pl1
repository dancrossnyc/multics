/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-01-15,Fawcett), approve(86-04-11,MCR7383),
     audit(86-05-21,Coppola), install(86-07-17,MR12.0-1097):
     Add subvolume support.
                                                   END HISTORY COMMENTS */


/* format: style3 */
init_scavenger_data:
     proc;


/*  Program to initialize scavenger_data. The number of processes allowed
    to scavenge simultaneously is based on the size of scavenger_data,
    which may be changed by a TBLS SCAV card. 

    Written July 1982 by J. Bongiovanni
    Modified November 1982 by J. Bongiovanni for static process memory assignment
*/

/*  Automatic  */


dcl	first_free_page	fixed bin;
dcl	max_rec_per_sv	fixed bin;
dcl	n_free_pages	fixed bin;
dcl	pages_per_process	fixed bin;
dcl	processx		fixed bin;
dcl	pvtx		fixed bin;
dcl	sc_data_pages	fixed bin;
dcl	sc_data_words	fixed bin (19);

/*  Static  */

dcl	N_OVFL		fixed bin int static options (constant) init (1023);
dcl	N_OVERHEAD_PAGES	fixed bin int static options (constant) init (1);
dcl	SCAVENGER_WAIT_EVENT
			bit (36) aligned int static options (constant) init ("555000000000"b3);

/*  External  */

dcl	dseg$		(0:1023) fixed bin (71) external;

/*  Entry  */

dcl	sdw_util_$get_size	entry (ptr, fixed bin (19));
dcl	syserr		entry options (variable);

/*  Builtin  */

dcl	addr		builtin;
dcl	baseno		builtin;
dcl	bin		builtin;
dcl	divide		builtin;
dcl	hbound		builtin;
dcl       lbound		builtin;
dcl	rel		builtin;
dcl	size		builtin;

%page;
	max_rec_per_sv = 0;
	pvt_arrayp = addr(pvt$array);
	/* set the max record number for the largest device configured */
	do pvtx = lbound (pvt_array, 1) to hbound (pvt_array, 1);
	     pvtep = addr(pvt_array(pvtx));
	     if rec_per_sv (pvte.device_type) > max_rec_per_sv
	     then max_rec_per_sv = rec_per_sv (pvte.device_type);
	end;

	scavenger_n_records = max_rec_per_sv;
	scavenger_n_ovfl = N_OVFL;
	pages_per_process = divide (size (scavenger_block) + 1023, 1024, 17);

	scavenger_datap = addr (scavenger_data$);

	call sdw_util_$get_size (addr (dseg$ (bin (baseno (scavenger_datap)))), sc_data_words);
	sc_data_pages = divide (sc_data_words, 1024, 17);

	scavenger_data.lock.wait_event = SCAVENGER_WAIT_EVENT;

	sc_n_processes = divide (sc_data_pages - N_OVERHEAD_PAGES, pages_per_process, 17);
						/* Assume header is 1 page */
	if sc_n_processes < 1
	then call syserr (CRASH, "init_scavenger_data: scavenger_data is too small.");

	sc_process_tablep = addr (scavenger_data.free);
	scavenger_data.process_table_ptr = sc_process_tablep;
	sc_process_table.max_n_processes = sc_n_processes;

	first_free_page = divide (bin (rel (addr (scavenger_data.free))) + size (sc_process_table) + 1023, 1024, 17);
	n_free_pages = sc_data_pages - first_free_page + 1;
	if first_free_page > N_OVERHEAD_PAGES
	then call syserr (CRASH, "init_scavenger_data: scavenger_data inconsistency.");

	do processx = 1 to sc_n_processes;
	     sc_process_table.process (processx).blockp = addr (scavenger_data_pages.page (first_free_page));
	     sc_process_table.process (processx).first_block_page = first_free_page;
	     first_free_page = first_free_page + pages_per_process;
	     n_free_pages = n_free_pages - pages_per_process;
	     if n_free_pages < 0
	     then call syserr (CRASH, "init_scavenger_data: scavenger_data inconsistency.");
	end;

	scavenger_data.error_severity = ANNOUNCE;


	return;					/* format: off */
%page;  %include fs_dev_types;
%page;  %include pvte;
%page;  %include scavenger_data;
%page;  %include syserr_constants;
%page;
/* BEGIN MESSAGE DOCUMENTATION

Message:
init_scavenger_data: scavenger_data too small.

S:        $crash

T:        $init

M:        The size of the scavenger_data segment is too small. It can be 
increased by the TBLS SCAV config card. It must be at least 68KW, with an
additional 67KW for each additional process (beyond 1) which is to be
scavenging simultaneously.

A:        Correct the configuration deck and reboot.

Message:
init_scavenger_data: scavenger_data inconsistency.

T:        $init

S:	$crash

M:	An error was encountered initializing the scavenger's data base.

A:	$contact

END MESSAGE DOCUMENTATION */

     end init_scavenger_data;
