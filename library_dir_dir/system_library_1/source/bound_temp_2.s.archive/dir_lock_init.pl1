/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */
/* dir_lock_init.pl1 -- intialization (collection 2) of dir_lock_seg. */
/* format: style2 */

dir_lock_init:
     procedure;

/* BIM 830212 */
/* Modified 831107 BIM for readers seperate from locks proper */
/* Modified 831111 BIM to remove threads. */

	declare make_sdw$unthreaded	 entry (fixed binary (18), fixed binary (71), pointer, pointer);
	declare pmut$swap_sdw	 entry (ptr, ptr);
	declare syserr		 entry options (variable);

	declare dir_lock_seg_size	 fixed bin;
	declare n_dir_locks		 fixed bin;
	declare code		 fixed bin (35);
	declare tsdw		 fixed bin (71);
	declare ptp		 pointer;
	declare astep		 pointer;
	declare i			 fixed bin;

	declare slt$		 external static;
	declare tc_data$max_max_eligible
				 fixed bin (35, 18) external static;
	declare active_all_rings_data$max_tree_depth
				 fixed bin external static;

	declare (addr, divide, segno, size)
				 builtin;

	declare 1 local_dir_lock_header
				 aligned like dir_lock_seg_header;


	dir_lock_segp = addr (local_dir_lock_header);
	dir_lock_seg.max_readers = tc_data$max_max_eligible;
	n_dir_locks, dir_lock_seg.n_dir_locks = tc_data$max_max_eligible * active_all_rings_data$max_tree_depth;
	dir_lock_seg_size = size (dir_lock_seg);	/* auto header makes reference to size of dir_lock possible */

	dir_lock_segp = addr (dir_lock_seg$);
	sltp = addr (slt$);
	sltep = addr (slt.seg (segno (dir_lock_segp)));

	slte_uns.abs_seg = "0"b;
	slte_uns.cur_length, slte_uns.max_length = divide (dir_lock_seg_size + 1023, 1024, 18, 0);
	call make_sdw$unthreaded (segno (dir_lock_segp), tsdw, astep, ptp);

	if astep = null ()
	then call syserr (CRASH, "dir_lock_init: Cannot get ASTE for dir_lock_seg.");
	call pmut$swap_sdw (dir_lock_segp, addr (tsdw));

	unspec (dir_lock_seg.header) = ""b;

	dir_lock_seg.n_dir_locks = n_dir_locks;
	dir_lock_seg.header.highest_in_use = 0;
	dir_lock_seg.header.max_readers = tc_data$max_max_eligible;
	dir_lock_seg.header.readers_ptr = addr (dir_lock_seg.readers);
	dir_lock_seg.header.locks_ptr = addr (dir_lock_seg.dir_locks);
	unspec (dir_lock_seg.dir_locks) = ""b;
	dir_lock_seg.readers (*, *) = ""b;

	unspec (dir_lock_seg.seg_lock.event) = unspec (DIR_LOCK_SEG_EVENT);
	return;

/* format: off */
%page; %include slt;
%page; %include slte;
%page; %include dir_lock_seg_;
%page; %include hc_lock;
%page; %include syserr_constants;

/* BEGIN MESSAGE DOCUMENTATION

Message:
dir_lock_init: cannot get ASTE for dir_lock_seg.

S:       $crash

T:       $init

M:       No space could be obtained for dir_lock_seg. This can result from inadequate ASTE pools or hardcore partition.

A:       $recover
$boot_tape

END MESSAGE DOCUMENTATION */

       end dir_lock_init;
