/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */
accept_rpv:
     procedure;

/****^  HISTORY COMMENTS:
  1) change(86-05-13,GJohnson), approve(86-05-13,MCR7387),
     audit(86-05-13,Martinson), install(86-05-14,MR12.0-1056):
     Correct error message documentation.
  2) change(86-05-19,Lippard), approve(85-12-02,MCR7309),
     audit(86-05-21,Coppola), install(86-07-17,MR12.0-1097):
     Modified by Jim Lippard to base determination of whether this volume is a
     root PV on the new root_lv flag in the pvt rather than on hc_part_used,
     since root PVs need not have hardcore partitions now.
  3) change(86-05-20,Fawcett), approve(86-04-11,MCR7383),
     audit(86-05-21,Coppola), install(86-07-17,MR12.0-1097):
     Add subvolume support.
  4) change(87-01-08,Farley), approve(87-01-12,MECR0008),
     audit(87-01-09,GDixon), install(87-01-12,MR12.0-1268):
     Changed to reset pvt$rpvs_requested after successfully accepting all the
     rlv. This will then allow system_startup_ to do a salvage_dirs when
     required.
  5) change(87-01-14,Farley), approve(87-01-14,MCR7608),
     audit(87-01-14,GDixon), install(87-01-14,MR12.0-1279):
     Offical installation of above corrections.
                                                   END HISTORY COMMENTS */
/*
   This procedure accepts the RPV during system initialization.

   Stolen from accept_fs_disk August 1980 by C. Hornig
   Modified March 1982, J. Bongiovanni, to eliminate use of FSDCT
   Modified '82 for english error codes.
   Modified 1985-03-28, BIM: pre-accept non-partition volumes.
*/

	dcl     pvt$n_entries	 fixed bin external;
	dcl     pvt$root_lvid	 bit (36) aligned external;
	dcl     pvt$root_pvtx	 fixed bin external;
	dcl     pvt$rlv_needs_salv	 bit (1) aligned external;
	dcl     pvt$rpv_needs_salv	 bit (1) aligned external;
	dcl     pvt$rpvs_requested	 bit (1) aligned external;
	dcl     salv_data$rpv	 bit (1) aligned external;

	dcl     accept_fs_disk	 entry (fixed bin, fixed bin (35));
	dcl     config_$find	 entry (char (4) aligned, ptr);
	dcl     config_$find_parm	 entry (char (4) aligned, ptr);
	dcl     make_sdw$reset_hcp	 entry;
	dcl     read_disk		 entry (fixed bin, fixed bin, ptr, fixed bin (35));
	dcl     salvager$volume_salvage entry (fixed bin, bit (36) aligned, fixed bin (35));
	dcl     (syserr, syserr$error_code) entry options (variable);
	dcl     wired_shutdown$enable	 entry;

	dcl     all_root_vols_accepted bit (1);
	dcl     code		 fixed bin (35);
	dcl     i			 fixed bin;
	dcl     pvtx		 fixed bin;
	dcl     severity		 fixed bin;
	dcl     n_hc_volmap_pages	 fixed bin;
	dcl     salv_rlv_request	 bit (1);
	dcl     1 buffer		 aligned like label;

	dcl     (addr, hbound, null, string) builtin;
%page;
	labelp = addr (buffer);
	pvt_arrayp = addr (pvt$array);

	call config_$find_parm ("hcpt", intk_cardp);
	if intk_cardp = null ()
	then severity = LOG;
	else severity = ANNOUNCE;

/* Check all the claimed "RLV" volumes for brotherhood of the RPV. */

	do pvtx = 1 to pvt$n_entries;			/* Scan the PVT */
	     pvtep = addr (pvt_array (pvtx));
	     if pvte.hc_part_used & ^pvte.rpv then do;
		     call read_disk (pvtx, LABEL_ADDR, labelp, code);
		     if code ^= 0
		     then call syserr$error_code (CRASH, code, "accept_rpv: Cannot read label of ^a.", name (pvte));

		     if label.lvid ^= pvt$root_lvid
		     then call syserr (CRASH, "accept_rpv: pv ^a lv ^a (^a) is not part of root.", label.pv_name,
			     label.lv_name, name (pvte));
		end;
	end;

/* With this in hand, deal with the RPV personally. */

	pvt$rpvs_requested = "0"b;
	salv_rlv_request = "0"b;
	intk_cardp = null ();			/* search config deck */
	call config_$find ("intk", intk_cardp);		/* for the INTK card */
	if intk_cardp ^= null ()
	then do i = 1 to hbound (intk_card.parms, 1);	/* search the card for RPVS and RLVS */
		if intk_card.parms (i) = "rpvs" then do;
			intk_card.parms (i) = "";	/* clear it out */
			pvt$rpvs_requested = "1"b;
		     end;
		else if intk_card.parms (i) = "rlvs" then do; /* Salvage all PVs in RLV */
			intk_card.parms (i) = "";
			pvt$rpvs_requested = "1"b;
			salv_rlv_request = "1"b;
		     end;
	     end;

	pvtx = pvt$root_pvtx;			/* Init_pvt left this here */
	pvtep = addr (pvt_array (pvtx));

	salv_data$rpv = "1"b;

	if pvt$rpv_needs_salv | pvt$rpvs_requested
	then pvt$rlv_needs_salv = "1"b;		/* Salvage critical directories */

	if pvt$rpvs_requested			/* Explicit salvage RPV */
	then call salvager$volume_salvage (pvtx, ""b, code);

	do pvtx = 1 to pvt$n_entries;
	     pvtep = addr (pvt_array (pvtx));
	     if pvte.hc_part_used
	     then do;
		     n_hc_volmap_pages = pvte.volmap_stock_ptr -> record_stock.n_volmap_pages;
		     call syserr (severity, "accept_rpv: HC part on ^a used ^d out of ^d records.", name (pvte),
			(pvte.totrec - pvte.nleft + n_hc_volmap_pages), pvte.totrec + n_hc_volmap_pages);
		end;
	end;

	call accept_fs_disk (pvt$root_pvtx, code);	/* Do the standard trip on the RPV */
	if code ^= 0 then call syserr$error_code (CRASH, code, "accept_rpv: Error accepting RPV");

	call wired_shutdown$enable;			/* Now if we crash clean it up */

	fgbxp = addr (flagbox$);			/* Set bit in the flagbox. */
	fgbx.ssenb = "1"b;

/* Flush the pvt brother threads that we had been using for HC part chain. */
/* They tend to bother logical_volume_manager. */

	call make_sdw$reset_hcp;

	do i = 1 to pvt$n_entries;
	     pvtep = addr (pvt_array (i));
	     pvte.brother_pvtx = 0;
	end;

/* Now try to get all those "root volumes" accepted. */

	all_root_vols_accepted = "1"b;		/* assume success */
	do pvtx = 1 to pvt$n_entries;
	     pvtep = addr (pvt_array (pvtx));
	     if pvte.root_lv & ^pvte.rpv then do;
		     if salv_rlv_request
		     then call salvager$volume_salvage (pvtx, ""b, code);
		     call accept_fs_disk (pvtx, code);
		     if code ^= 0 then all_root_vols_accepted = "0"b;
						/* rlv incomplete */
		end;
	end;

	salv_data$rpv = "0"b;

	if all_root_vols_accepted then pvt$rpvs_requested = "0"b; /* nolonger needed, if rlv accepted */

	return;

/* * * * * * * * * NAME * * * * * * * * * */

name:
     procedure (Pvte) returns (char (8) aligned);

	dcl     1 Pvte		 aligned like pvte parameter;
	dcl     1 dname		 aligned,
		2 dev		 char (4) unaligned,
		2 u		 char (1) unaligned,
		2 num		 pic "99" unaligned,
		2 sv		 char (1) unaligned;


	dname.dev = Pvte.devname;
	dname.u = "_";
	dname.num = Pvte.logical_area_number;
	if Pvte.is_sv then dname.sv = valid_sv_array (Pvte.sv_num);
	else dname.sv = "";
	return (string (dname));
     end name;
%page;
%include disk_pack;
%include flagbox;
%include fs_vol_label;
%include fs_dev_types;
%include config_intk_card;
%include pvte;
%include stock_seg;
%include syserr_constants;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   accept_rpv: pv PVNAME lv LVNAME (DSKX_NN) is not part of root.

   S: $crash

   T: $init

   M: The pack on the drive DSKX_NN, with pv name and lv name as read
   from its label, is specified on the ROOT CONFIG card, but is not
   part of the same logical volume as the RPV.

   A: Check the ROOT CONFIG card for errors. Check for the proper
   packs.  Reboot the system.


   Message:
   accept_rpv: Error ERRORMESSAGE accepting RPV

   S: $crash

   T: $init

   M: Some problem was encountered trying to set up the use of the RPV for
   normal segment creation and activation.  The label of the RPV may have been
   damaged, or encountered disk errors, as indicated by the ERRORMESSAGE.

   A: Make sure that the RPV label area (first eight records), or a dump of it,
   is available for system programmer inspection.
   $note

   Message: 
   accept_rpv: HC part on dskX_NN used XXX out of YYY records.

   S: This message is printed on the console if an HCPT card is in the config
   deck. Otherwise, it is logged into the syserr_log.

   T: $init

   M: The message appears for each disk volume which contains a Hardcore 
   Partition (PART HC). It indicates how many records  were actually used
   (XXX) in the partition, which had size YYY.

   A: $ignore

   END MESSAGE DOCUMENTATION */

     end accept_rpv;
