/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */
/* format: style3 */
init_vtoc_man:
     proc;

/*



				init_vtoc_man	





             The "init_vtoc_man" procedure initializes all constants located  in
          the  header  of the vtoc buffer segment. 

	It gets the number of buffers to use from the vtb parameter found
	on one of the parm cards.


	Modified by :

          07/09/82  J. Bongiovanni for new VTOC buffer strategy
	02/14/76	Steve Webber to call get_main
	06/20/75	Andre Bensoussan.

	*/


/*  Automatic  */

dcl	code		fixed bin (35);
dcl	mask		bit (36) aligned;
dcl	tsdw		fixed bin (71);

/*  Static  */

dcl	DEFAULT_MASK	bit (36) aligned int static options (constant) init ("000000000037"b3);
dcl	DEFAULT_N_BUCKETS	fixed bin int static options (constant) init (32);
dcl	DEFAULT_N_BUFFERS	fixed bin int static options (constant) init (30);
dcl	WAIT_EVENT	bit (36) aligned int static options (constant) init ("333000000000"b3);

/*  Entry  */

dcl	absadr		entry (ptr, fixed bin (35)) returns (fixed bin (24));
dcl	find_parm		entry (char (4) aligned, ptr);
dcl	get_main		entry (ptr, fixed bin (18), fixed bin (71));
dcl	pmut$swap_sdw	entry (ptr, ptr);
dcl	syserr		entry options (variable);

%page;
	vtoc_buffer_segp = addr (vtoc_buffer_seg$);

/* Determine the number of VTOCE buffers */

	call find_parm ("vtb ", parm_ptr);
	if parm_ptr = null ()
	then vtoc_buf_n_buffers = DEFAULT_N_BUFFERS;
	else vtoc_buf_n_buffers = numeric_parm.value;

/* Determine the number of hash buckets (currently constant)  */

	vtoc_buf_n_buckets = DEFAULT_N_BUCKETS;
	mask = DEFAULT_MASK;

/* Get contiguous memory for vtoc_buffer_seg and establish its SDW */

	call get_main (vtoc_buffer_segp, size (vtoc_buffer), tsdw);
	call pmut$swap_sdw (vtoc_buffer_segp, addr (tsdw));

/* Fill in vtoc_buffer_seg */

	vtoc_buffer.lock.wait_event = WAIT_EVENT;
	vtoc_buffer.n_bufs = vtoc_buf_n_buffers;
	vtoc_buffer.n_hash_buckets = vtoc_buf_n_buckets;
	vtoc_buffer.hash_mask = mask;

	vtoc_buffer.abs_addr = absadr (vtoc_buffer_segp, code);
	if code ^= 0
	then call syserr (CRASH, "init_vtoc_man: Unexpected error from absadr. Code ^o", code);

	vtoc_buffer.wait_event_constant = bin (WAIT_EVENT, 36);

	vtoc_buf_desc_arrayp = addr (vtoc_buffer.buf_desc);
	vtoc_buf_arrayp = addr (vtoc_buffer.buffer);

	vtoc_buffer.buf_desc_offset = rel (vtoc_buf_desc_arrayp);
	vtoc_buffer.buf_offset = rel (vtoc_buf_arrayp);
	vtoc_buffer.hash_table_offset = rel (addr (vtoc_buffer.hash_table));
	vtoc_buffer.search_index = 1;

	return;
%page;
%include config_parm_card;
%page;
%include syserr_constants;
%page;
%include vtoc_buffer;
%page;
/* BEGIN MESSAGE DOCUMENTATION


Message:
init_vtoc_man: Unexpected error from absadr. Code XX.

S:        $crash

T:	$init

M:	The absolute address of vtoc_buffer_seg could not be determined.
This indicates hardware or software malfunction.

A:        $recover


END MESSAGE DOCUMENTATION */

     end init_vtoc_man;
