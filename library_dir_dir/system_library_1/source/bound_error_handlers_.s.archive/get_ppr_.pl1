/****^  ******************************************************
        *                                                    *
        * Copyright, (C) Honeywell Bull Inc., 1987           *
        *                                                    *
        * Copyright (c) 1987 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        * Copyright (c) 1972 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        ****************************************************** */

/* format: style1 */

get_ppr_:
     proc (length_sw, asp, sptr, pname1, pname2, pname3);

/* This procedure returns the name(s) and location(s)  of the procedure(s)
   active when a condition occurred. If the condition occurred in a support 3
   procedure, the name of the most recent non-support procedure will also be returned. */

/* last modified by M. Weaver 23 October 1973 */
/* Modified by B. Margulies for include files and cleanup */
/* Further modified to check the ring brackets of the ppr segment before
   calling object_info on it */
/* Changed to use interpret_link_info.incl.pl1 05/12/83 S. Herbst */

	declare (pname1, pname2, pname3, ptemp)
				 char (500) aligned;
	declare (link_segname, op_seg_name)
				 char (32) aligned;

/* enttypoint is either the file system entryname or the 
   entrypoint name. The first comes from get_entry_name_, the second
   from interpret_link_. Note that interpret_link_ truncates to 32 */

	declare (entryname, entrypoint)
				 char (256) aligned;
	declare lang		 char (8) aligned;

	declare spno		 bit (18) aligned;
	declare find_op		 bit (1) aligned;

	declare length_sw		 fixed bin;
	declare lng		 fixed bin;
	declare segno		 fixed bin (18);
	declare code		 fixed bin (35);

	declare (asp, nsp, use_ptr, last_ptr, sptr)
				 ptr;

	declare (addr, after, baseno, baseptr, before, byte, bin, null, ptr, rel, rtrim, substr)
				 builtin;

	declare ioa_$rsnnl		 entry options (variable);
	declare stack_frame_exit_	 entry (ptr, ptr, ptr, bit (1) unaligned, ptr, char (32) aligned, ptr);

	declare get_entry_name_	 entry (ptr, char (*) aligned, fixed bin (18), char (8) aligned, fixed bin (35));
	declare is_cls_		 entry (ptr) returns (bit (1) aligned);

%include condition_info;
	declare 1 cond_info		 aligned like condition_info based (sptr);

	declare 1 situation		 aligned,
	        ( 2 bad_frame,
		2 exists_ppr,
		2 ppr_is_owner,
		2 ppr_is_ops,
		2 caller_is_owner,
		2 entry_ptr_invalid,
		2 ret_ptr_is_ops
		)		 bit (1) unal,
		2 pad		 bit (29) unal;

%include interpret_link_info;

%include mc;

%include stack_frame;

	pname1, pname2, pname3, ptemp = "";
	sp = asp;
	if cond_info.loc_ptr = null
	then return;

	if cond_info.user_loc_ptr ^= cond_info.loc_ptr
	then do;					/* get info from first non-support frame */
		spno = baseno (sp);			/* get segno of sp */
		nsp = sp;
		do while (baseno (nsp -> stack_frame.prev_sp) = spno);
		     nsp = nsp -> stack_frame.prev_sp;
		     if ^nsp -> stack_frame_flags.support
		     then do;			/* found non-support frame */
			     entryname, link_segname, entrypoint, op_seg_name = "";
			     find_op = "0"b;	/* no operator involved */
			     use_ptr = cond_info.user_loc_ptr;
			     call get_entry_name_ (nsp -> stack_frame.entry_ptr, entryname, segno, lang, code);
			     call check_call_link_ (nsp);
						/* see how frame's proc was called */
			     call put_together_ (pname1);
						/* format full name and offset */
			     if length_sw = 2
			     then go to find_real;	/* print support proc as well */
			     else go to test_crawlout;
			end;
		end;
	     end;

find_real:					/* obtain loc where condition occurred */
	entryname, link_segname, entrypoint = "";
	use_ptr = cond_info.loc_ptr;
	call stack_frame_exit_ (sp, cond_info.mc_ptr, cond_info.wc_ptr, cond_info.crawlout, last_ptr, op_seg_name,
	     addr (situation));

	if (ppr_is_owner | caller_is_owner | ^exists_ppr)
	then do;					/* use owner of stack frame */
		if ^entry_ptr_invalid
		then call get_entry_name_ (sp -> stack_frame.entry_ptr, entryname, segno, lang, code);
		call check_call_link_ (sp);		/* find out how owner was called */
	     end;
	else do;					/* know ppr is not owner */
		if is_cls_ (use_ptr)
		then do;				/* print frame owner anyway--don't want cls */
			use_ptr = last_ptr;
			call get_entry_name_ (sp -> stack_frame.entry_ptr, entryname, segno, lang, code);
		     end;				/* what frame owner last called seems to mislead as much as it helps */
						/*
						   else call check_call_link_(sp -> stack_frame.next_sp);
						   */
	     end;

	if ppr_is_ops
	then find_op = "1"b;			/* print operator name as well */
	else find_op = "0"b;

	call put_together_ (ptemp);			/* format name with offset */
	if (length_sw = 1) | (pname1 = " ")
	then pname1 = ptemp;
	else call ioa_$rsnnl ("^/  (actually by support procedure ^a)", pname2, lng, ptemp);

test_crawlout:
	if cond_info.crawlout
	then do;					/* if possible, get name of real faulting proc */
		if cond_info.mc_ptr ^= null
		then do;				/* have some info from lower ring */
			entryname, link_segname, entrypoint, op_seg_name = "";
			find_op = "0"b;
			scup = addr (cond_info.mc_ptr -> mc.scu (0));
			use_ptr = ptr (baseptr (bin (bin (scup -> scu.ppr.psr, 15), 18)), scup -> scu.ilc);
			call put_together_ (pname3);
		     end;
	     end;
	return;

check_call_link_:
     proc (asp);

/* This internal procedure tries to find out how the owner of the specified
   stack frame was called by looking at the last reference from the preceding
   stack frame */

	declare (asp, csp, callp, entry_ptr, link_ptr)
				 ptr;

	declare frame_flag		 bit (1) aligned;

	declare op_seg		 char (32) aligned;

	declare get_link_ptr_	 entry (ptr, ptr, ptr);
	declare interpret_link_	 entry (ptr, ptr, fixed bin (35));
	declare interpret_op_ptr_	 entry (ptr, ptr, ptr, char (32) aligned, bit (1) aligned);

	declare 1 auto_interpret_link_info aligned like interpret_link_info;


	csp = asp -> stack_frame.prev_sp;		/* get ptr to previous frame */
	if csp = null
	then return;				/* no previous frame */

/* get last location in owner of previous frame */

	call interpret_op_ptr_ (null, csp, callp, op_seg, frame_flag);
	if callp = null
	then callp = ptr (csp -> stack_frame.return_ptr, rel (csp -> stack_frame.return_ptr));
						/* return_ptr may have indicators in modifier */

	call get_link_ptr_ (callp, link_ptr, entry_ptr);

	if link_ptr ^= null
	then do;					/* link name probably more accurate */
		auto_interpret_link_info.version = INTERPRET_LINK_INFO_VERSION_1;

		call interpret_link_ (addr (auto_interpret_link_info), link_ptr, code);
		if code = 0
		then do;				/* use link name */
			link_segname = auto_interpret_link_info.segment_name;
			auto_interpret_link_info.entry_point_name =
			     substr (auto_interpret_link_info.entry_point_name, 2);
		     end;
		return;
	     end;

	if entry_ptr ^= null
	then /* see if we have reference to an entry */
	     call get_entry_name_ (entry_ptr, auto_interpret_link_info.entry_point_name, segno, lang, code);
	return;
     end;

put_together_:
     procedure (pname);

/* This internal procedure finds the rest of the pathname, figures out which of
   of the entry name pieces are appropriate, tries to avoid duplications and
   extra dollar signs, and formats the complete name */

/* If the segname is foo, and the entrypoint is foo$SOMETHING,
   then improve the message removing the second foo.
   foo. Admittedly, ALM or hand construction could make an object
   segment with both foo and foo$foo for entrypoints, but there
   is no reason users should see foo$foo$foo just in case that happens.
   This is a temporary measure until pl1 does multiple segnames right,
   and we can display the segment-entrypoint instead of the 
   entryname-pl1_entry_name_from_symbol_table. 
*/

	declare pname		 char (500) aligned;
	declare r_entrypoint	 char (256) var;
	declare r_entryname		 char (32);	/* fs entryname or segname */
	declare op_name		 char (32) aligned;
	declare op_msg		 char (57) aligned;
	declare line_msg		 char (13);	/* from get_line_no_ */

	declare formatx		 fixed bin;
	declare (add_offset, use_offset)
				 char (7);


	declare ioa_$rsnnl		 entry options (variable);
	declare find_operator_name_	 entry (char (*) aligned, ptr, char (32) aligned);
	declare find_pathname_	 entry (ptr, ptr, fixed bin (35));

	declare 1 name_info		 aligned like find_pathname_info;


	call find_pathname_ (use_ptr, addr (name_info), code);
						/* get pathname and offset pieces */

	if name_info.adjusted_offset ^= ""		/* if bound segment */
	then do;
		add_offset = name_info.real_offset;	/* for msg in () */
		use_offset = name_info.adjusted_offset; /* in component */
	     end;
	else do;
		use_offset = name_info.real_offset;
		add_offset = "";
	     end;

	op_msg = "";				/* assume no operator involved */

	if op_seg_name ^= ""			/* operator */
	then if find_op				/* global from main block -- operator is interesting */
	     then do;				/* condition happened in operator */
		     call find_operator_name_ (op_seg_name, use_ptr, op_name);
		     if op_name ^= ""		/* was an operator we could find */
		     then if substr (op_name, 1, 4) ^= "call"
			then op_msg =
				byte (10 /* NL */) || /* NL */ "(while in operator " || rtrim (op_name)
				|| ")";
		end;

	call get_line_no_ ();			/* try to find source line */

/* figure out which names and format to use */

	formatx = 0;				/* assume no dirname but full seg$entry|offset */

	if entryname ^= ""				/* main block found full description, probably from stack_frame.entry_ptr */
	then r_entrypoint = entryname;		/*  we like that */
	else if entrypoint ^= ""			/* link target entryname in file system */
	then r_entrypoint = entrypoint;		/* that will do */
	else do;					/* no obvious entrypoint description */
		r_entrypoint = "";
		formatx = 1;			/* so skip to format 1, use refname */
	     end;

/* Now, what goes in for a segname?? */
/* put the result in entryname as the putative fs entryname */

	if link_segname ^= ""			/* If a link was involved, use that */
	then r_entryname = link_segname;

/* resort to find_pathname_ */

	else if name_info.component_ename ^= ""		/* bound seg, show both component name and entryname */
	then r_entryname = name_info.component_ename;
	else do;
		r_entryname = "";
		/*** skip to one-entryname formats */
		formatx = formatx + 2;		/* 0, 1 go to 2, 3 */
	     end;

	if formatx = 3				/* we know all we are gonna know */
	then go to format (3);


	if formatx ^= 0
	then if (r_entryname = r_entrypoint)
	     then formatx = formatx + 1;

	if formatx < 2				/* r_entryname is in use */
	then if name_info.real_ename = r_entryname	/* but its the same as the find_pathname_ entryname, so punt it */
	     then formatx = formatx + 2;
	if formatx = 2
	then if (name_info.real_ename = r_entrypoint) /* redundant  */ | (r_entrypoint = "")
						/* unknown */
	     then formatx = 3;

	go to format (formatx);

format (0):

/* r_entryname$r_entrypoint_name|offset (line #)
   dirname>bound_seg_entryname|offset in pdir
   in operator operator name */

	if r_entryname = before (r_entrypoint, "$")
	then r_entrypoint = after (r_entrypoint, "$");

	if length_sw ^= 2				/* Dont want super-verbose */
	then add_offset = "";
	call ioa_$rsnnl ("^a$^a^a ^a^/(^a^a^a^a^a)^a^a", pname, lng, r_entryname, r_entrypoint, use_offset, line_msg,
	     name_info.dirname, name_info.gt_char, name_info.real_ename, add_offset, name_info.pdir_string, op_msg,
	     offset_msg);
	return;

format (1):

/* entryname|adj_offset (dname>real_entryname|real_off) */


	if length_sw ^= 2
	then add_offset = "";
	call ioa_$rsnnl ("^a^a ^a^/(^a^a^a^a^a) ^a^a", pname, lng, r_entryname, use_offset, line_msg, name_info.dirname,
	     name_info.gt_char, name_info.real_ename, add_offset, name_info.pdir_string, op_msg, offset_msg);
	return;

format (2):

/* dname>real_entryname$entrypoint_name|adj_offset */

	if name_info.real_ename = before (r_entrypoint, "$")
	then r_entrypoint = after (r_entrypoint, "$");

	call ioa_$rsnnl ("^a^a^a$^a^a^a ^a^a^a", pname, lng, name_info.dirname, name_info.gt_char, name_info.real_ename,
	     r_entrypoint, use_offset, name_info.pdir_string, line_msg, op_msg, offset_msg);
	return;

format (3):

/* dname>real_entryname|offset */

	call ioa_$rsnnl ("^a^a^a^a^a ^a^a^a", pname, lng, name_info.dirname, name_info.gt_char,
	     name_info.real_ename, use_offset, name_info.pdir_string, line_msg, op_msg, offset_msg);
	return;

get_line_no_:
     procedure;

/* This procedure finds the source line number corresponding to a given location */

	dcl     (segp, symbp)	 ptr;

	dcl     (start, num, line_no, offset)
				 fixed bin (18);
	dcl     bitcnt		 fixed bin (24);
	declare mode		 fixed bin (5);
	dcl     code		 fixed bin (35);

	dcl     std		 bit (1) aligned;

	dcl     (addr, addrel, baseptr, bin, bit, ptr, rel)
				 builtin;

	dcl     component_info_$offset entry (ptr, fixed bin (18), ptr, fixed bin (35));
	dcl     object_info_$brief	 entry (ptr, fixed bin (24), ptr, fixed bin (35));
	dcl     (
	        stu_$get_line_no,
	        stu_$get_runtime_line_no
	        )			 entry (ptr, fixed bin (18), fixed bin (18), fixed bin (18), fixed bin (18));



	dcl     ioa_$rsnnl		 entry options (variable);
	declare hcs_$status_mins	 entry (pointer, fixed bin (2), fixed bin (24), fixed bin (35));
	declare hcs_$fs_get_mode	 entry (pointer, fixed bin (5), fixed bin (35));

%include access_mode_values;
/* Include file symbol_header follows */
%include symbol_header;
%include component_info;

	dcl     1 oi		 aligned like object_info;

%include object_info;


	line_msg = "";
	segp = baseptr (baseno (use_ptr));		/* get ptr to beginning of seg */
	offset = bin (rel (use_ptr), 18);		/* extract offset of location */

/* First see if we have access to touch the segment AT ALL */

	call hcs_$fs_get_mode (segp, mode, code);
	if code ^= 0 /* Should not happen, but .. */
	     | ((bit (mode, 5) & bit (R_ACCESS_BIN, 5)) = "00000"b) /* no R */
	then return;

/* first see if seg is bound; if so use only component info */

	call component_info_$offset (segp, offset, addr (ci), code);
	if code = 0
	then do;					/* use info for component */
		symbp = ci.symb_start;
		std = ci.standard;
		go to call_stu;
	     end;

/* segment is not bound; see if seg itself has statement map */

	call hcs_$status_mins (segp, (0), bitcnt, code);
	if code ^= 0
	then return;

	oi.version_number = object_info_version_2;
	call object_info_$brief (segp, bitcnt, addr (oi), code);
	if code ^= 0
	then return;				/* no symbol section so no map */

	symbp = oi.symbp;
	std = oi.format.standard;

call_stu:
	start = -1;
	if std
	then call stu_$get_runtime_line_no (symbp, offset, start, num, line_no);
	else if symbp -> symbol_header.root
	then call stu_$get_line_no (addrel (symbp, symbp -> symbol_header.root), offset, start, num, line_no);

	if start > -1
	then call ioa_$rsnnl ("(line ^d)", line_msg, num, line_no);

	return;

     end get_line_no_;

     end put_together_;

%include find_pathname_info;
     end get_ppr_;
