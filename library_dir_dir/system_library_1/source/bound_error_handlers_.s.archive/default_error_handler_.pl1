/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(87-06-05,Lippard), approve(87-06-22,MCR7718),
     audit(87-07-01,Fawcett), install(87-07-15,MR12.1-1041):
     Modified to verify that entries returned by call to hcs_$make_ptr are
     actually in the segment message_table_.
  2) change(88-05-19,Hergert), approve(88-05-19,MCR7903),
     audit(88-05-19,Dupuis), install(88-08-01,MR12.2-1073):
     John Hergert (FMC) Added code to handle mrds_se_error_
     condition for MRDS.
  3) change(89-05-26,Farley), approve(89-06-22,MCR8114),
     audit(89-06-22,Fawcett), install(89-06-26,MR12.3-1064):
     Added initialization of the currently uninitailized no_restart flag to
     allow restarts as the default.
                                                   END HISTORY COMMENTS */


/*format: style2 */
/* default_error_handler_.pl1 */

dummy:
     procedure;

/* This is the default error handling routine used by Multics. There are several entries
   as follows:

   default_error_handler_ 	no condition wall	handles program_interrupt
   ignore_pi		no condition wall	ignores program_interrupt
   wall			yes condition wall	handles program_interrupt
   wall_ignore_pi		yes condition wall	ignores program_interrupt

   interpret_condition_	returns to caller without calling cu_$cl
   condition_interpreter_
   change_error_mode_
   reprint_error_message_
   reinterpret_condition_
   add_finish_handler

   /* initially coded by M. Weaver 12 February 1970 */
/* modified by M. Weaver 27 September 1971 */
/* recoded by M. Weaver 12 October 1973 to handle software conditions better */
/* modified by M. Weaver 6/13/74  for finish and storage conditions and to use iox_ */
/* modified 11/76 by  M. Weaver to move illegal_procedure handling to better place */

/*
   Last modified (Date and Reason):
   Aug 12, 1977 by Steve Webber to add wall entries and merge with standard_default_handler_.
   Aug 17, 1977 by Steve Webber to use new message_table_ format
   Nov 18, 1977 by Melanie Weaver to fix bugs in reprint_error and quit handling
   Dec 19, 1977 by Melanie Weaver to fix bug in illegal_procedure handling
   Nov. 22, 1978 by Melanie Weaver to print long messages in their entirety
   March 1979 by T. Casey to add call to sus_signal_handler_.
   July 1979 by Steve Webber to pass "finish" through the wall entries.
   April 1981 by Benson I. Margulies for null_pointer_ instead of simfault.
	     remove special cases for conditions already caught by
	     static handlers, use find_condition_info_,
	     respect the quiet_restart bit, and houseclean some.
  July 1981 by BIM for the new program interrupt (kludge) special case.
  December 1981 by E. N. Kittlitz for quit_info.
  June 1983 by M. Weaver for fortran_pause.
  September 1983 by M. Weaver to put newline before fortran_pause message.
  1984-10-18 BIM to special case signal_io_ in the normal case (
  terminate the process if user_i/o) and in the blowup_handler_ 
  (pass it through if on error_output).
   */


/* Parameters */
/* Used only by the interpreting entrypoints, not the actual handlers */

	dcl     a_mcptr		 ptr;
	dcl     a_conname		 char (*);
	dcl     a_wcptr		 ptr;
	dcl     a_infoptr		 ptr;
	dcl     a_flag		 bit (1) aligned;

/* Automatic */

	dcl     eof		 bit (1) aligned;
	dcl     establish_wall	 bit (1) aligned;
	dcl     found		 bit (1) aligned;
	dcl     1 dd		 aligned like decode_definition_str;
	dcl     iocb_ptr		 ptr;
	dcl     cond_id		 char (46) var;	/* for condition name */
	dcl     ring_mes		 char (10);	/* ring n or lower ring */
	dcl     retsw		 bit (1) aligned;
	dcl     realsw		 bit (1) aligned init ("1"b);
						/* indicates whether this is a "rerun" */
	dcl     defaultsw		 bit (1) aligned;	/* indicates to use conname as such in message */
	dcl     no_restart		 bit (1) aligned;
	dcl     ignore_pi_sw	 bit (1) aligned;
	dcl     pass_finish_sw	 bit (1) aligned;

	dcl     optr		 ptr;
	dcl     longsw_ptr		 ptr;
	dcl     lsp		 ptr;		/* ptr to stack frame at time of condition */
	dcl     new_con		 char (32) varying;
	dcl     temp_longsw		 fixed bin init (-1);
	dcl     (flong, i)
				 fixed bin;
	dcl     long		 fixed bin;
	dcl     code		 fixed bin (35);
	dcl     resetwrite		 bit (1) aligned;
	dcl     1 cl_arg		 aligned,
		2 reset_sw	 bit (1) unaligned,
		2 pad		 bit (35) unaligned;

/* External */

	dcl     message_table_$privileged_info
				 ext;
	dcl     message_table_$soft_default_info
				 ext;
	dcl     message_table_$hard_default_info
				 ext;
	dcl     message_table_$formats (26) char (104) var ext;

%include iox_entries;

/* Static */

	dcl     real_longsw		 fixed bin int static init (1);
	dcl     rptsw		 fixed bin (17) int static init (0);
						/* indicates level of recursion in blowup handler */

/* Based */

	dcl     based_var		 char (256) var based;
	dcl     longsw		 fixed bin based (longsw_ptr);
	dcl     ostring		 char (1000) aligned based (optr);
						/* based string for output */

	dcl     any_other		 condition;

/* Big String Department */

	dcl     (pname1, pname2, pname3, tname1, tname2)
				 char (500) aligned;
	dcl     linfo		 char (500) var;
	dcl     my_string		 char (1000);	/* actual space normally used for output */

/* Entries */

	declare condition_		 entry (char (*), entry);
	declare reversion_		 entry (char (*));
	dcl     cu_$cl		 entry (1 aligned, 2 bit (1) unaligned, 2 bit (35) unaligned);
	dcl     decode_definition_	 entry (ptr, ptr, bit (1) aligned);
	dcl     hcs_$make_ptr	 entry (ptr, char (*), char (*), ptr, fixed bin (35));
	dcl     (
	        ioa_$ioa_switch,
	        ioa_$rs,
	        ioa_$rsnnl
	        )			 entry options (variable);
	dcl     signal_		 ext entry options (variable);
	dcl     linkage_error_	 entry (ptr, fixed bin, ptr, ptr, char (500) aligned, char (500) aligned, ptr,
				 fixed bin);
	dcl     get_ppr_		 entry (fixed bin, ptr, ptr, char (500) aligned, char (500) aligned,
				 char (500) aligned);
	dcl     get_tpr_		 entry (ptr, ptr, ptr, char (500) aligned, char (500) aligned);
	dcl     special_messages_	 entry (ptr, ptr, char (500) var, bit (1), bit (1) aligned);

	dcl     interpret_info_struc_	 ext
				 entry (char (32), ptr, char (500) var, bit (1) aligned, bit (1) aligned,
				 bit (1) aligned, fixed bin);
	dcl     interpret_info_struc_$no_message
				 entry (char (32), ptr);
	dcl     find_condition_frame_	 entry (ptr) returns (ptr);
	dcl     find_condition_info_	 entry (ptr, ptr, fixed bin (35));
	dcl     continue_to_signal_	 entry (fixed bin (35));

	dcl     (addr, baseno, baseptr, bin, byte, codeptr, length, null, ptr, size, string, unspec)
				 builtin;

wall_ignore_pi:
     entry;

	pass_finish_sw = "1"b;
	ignore_pi_sw = "1"b;
	establish_wall = "1"b;
	go to COMMON;

standard_default_handler_:
wall:
     entry;


	pass_finish_sw = "0"b;
	ignore_pi_sw = "0"b;
	establish_wall = "1"b;
	goto COMMON;

ignore_pi:
     entry;

	pass_finish_sw = "1"b;
	ignore_pi_sw = "1"b;
	establish_wall = "0"b;
	go to COMMON;

default_error_handler_:
     entry;

	pass_finish_sw = "0"b;
	establish_wall = "0"b;
	ignore_pi_sw = "0"b;

COMMON:
	mtep = null ();
	iocb_ptr = iox_$error_output;
	lsp = null ();
	realsw = "1"b;				/* we are an error handler, not an interpreter */
	retsw = "0"b;				/* this entry usually does not just return */
	no_restart = "0"b;				/* allow restarts by default */

	call condition_ ("any_other", blowup_handler_);
	call get_condition_info;			/* pickup condition info */


/* Now check for common conditions */
/* finish passes walls */

	if (cond_info.condition_name = "finish")
	then do;
		if pass_finish_sw			/* can only be on if realsw is on */
		then call continue_to_signal_ (0);
		go to exit;
	     end;

/* we may need to do more for pi someday, so it is in its own statement */

/* ignore_pi_sw only on if realsw on */
	if ignore_pi_sw & (cond_info.condition_name = "program_interrupt")
	then do;
		call continue_to_signal_ (0);
		go to exit;
	     end;

/**** The following special case improves the system's behavior when
      then signal_io_ I/O module is in use on a critical switch */

	if realsw & (cond_info.condition_name = "signal_io_")
	then do;
		if cond_info.info_ptr -> signal_io_info.iocb_ptr = iox_$user_io
		     | cond_info.info_ptr -> signal_io_info.iocb_ptr = iox_$user_output
		     | cond_info.info_ptr -> signal_io_info.iocb_ptr = iox_$user_input
		     | cond_info.info_ptr -> signal_io_info.iocb_ptr = iox_$error_output
		then call terminate_process;		/* no one is dealing with critical I/O */
	     end;

	if realsw & cond_info.condition_name = "quit"
	then do;
		call reversion_ ("any_other");

/* check for condition_info which directs reset operations.  This is currently only
present if a call to signal_ was made.  sus_signal_handler_ does this very thing. */
		if cond_info.info_ptr ^= null
		then if cond_info.info_ptr -> quit_info.version = 1
			& cond_info.info_ptr -> quit_info.length = size (quit_info)
		     then resetwrite = cond_info.info_ptr -> quit_info.switches.reset_write;
		     else resetwrite = "1"b;		/* do the reset if not told otherwise */
		if resetwrite
		then call iox_$control (iox_$user_io, "resetwrite", null, (0));
		call iox_$control (iox_$user_io, "printer_on", null, (0));
		call ioa_$ioa_switch (iox_$user_io, "QUIT");
		if establish_wall
		then on any_other call wall_ignore_pi;
		cl_arg.reset_sw = "0"b;
		cl_arg.pad = "0"b;
		call cu_$cl (cl_arg);
		go to exit;
	     end;

	/*** format: off */     
	if (cond_info.condition_name = "command_error"
            | cond_info.condition_name = "command_question")
						/* preserve special case for private versions */
	then go to exit;
	/*** format: ^off */

/* reprinters and interpreters enter here */

begin:
	optr = addr (my_string);

begin_com:
	cl_arg.reset_sw = "1"b;			/* set resetread switch for all other conditions */
	cl_arg.pad = "0"b;

/* initialize variables to be args */

	if cond_info.mc_ptr ^= null ()
	then scup = addr (cond_info.mc_ptr -> mc.scu);
	else scup = null ();

/* the following must be initialized here as longsw can be referenced if cond_info.mc_ptr is null */
	if temp_longsw ^= -1
	then longsw_ptr = addr (temp_longsw);		/* have temporary message mode */
	else longsw_ptr = addr (real_longsw);


	defaultsw = "0"b;

/* Now get a pointer to the appropriate message_table entry */

	found = "0"b;

	call hcs_$make_ptr (codeptr (wall), "message_table_", (cond_info.condition_name), mtep, code);

	if mtep ^= null ()
	then do;
	     call decode_definition_ (baseptr (baseno (mtep)), addr (dd), eof);
	     do while (^eof & ^found);
		if dd.section = "segn" then if dd.symbol = "message_table_" then found = "1"b;
		call decode_definition_ (dd.next_def, addr (dd), eof);
	     end;

	     found = "0"b;
	     do while (^eof & ^found);
		if dd.section ^= "text" then eof = "1"b;
		else if dd.entrypoint = 0 then if dd.symbol = cond_info.condition_name then found = "1"b;
		else call decode_definition_ (dd.next_def, addr (dd), eof);
	     end;
	end;

	if ^found
	then do;
		if cond_info.mc_ptr = null
		then mtep = addr (message_table_$soft_default_info);
		else mtep = addr (message_table_$hard_default_info);
		defaultsw = "1"b;
	     end;

/* if the condition is mrds_se_error and we made it into default_error_handler_
   then we can assume the user did not handle the condition. We set the value 
   in mrds_se_error_info.header.info_string equal to the string 
   "default_error_handler_" to tell the signaller to handle the error.
*/
          if cond_info.condition_name = "mrds_se_error_" then do;
	     cond_info.info_ptr -> mrds_se_error_info.header.info_string =
		"default_error_handler_";
	     goto exit;
	end;

	if cond_info.condition_name = "error"
	then if cond_info.info_ptr = null ()
	     then do;				/* signalled by another handler */
		     linfo = "system handler for error returns to command level
";
		     long = length (linfo);
		     if cond_info.crawlout
		     then do;			/* must still tell user about crawlout */
			     ostring = "Error while processing in lower ring:" || byte (10) /* NL */ || linfo;
			     long = long + 38;
			end;
		     else ostring = linfo;
		     go to out;
		end;

	if mte.endpage
	then if ^cond_info.crawlout
	     then if cond_info.info_ptr ^= null ()
		then if realsw
		     then do;			/* indicate end of page in file */
			     call interpret_info_struc_$no_message ((cond_info.condition_name), cond_info.info_ptr);
			     go to exit;
			end;

	if cond_info.condition_name = "underflow"
	then if ^cond_info.crawlout			/* be sure test performed for all modes */
	     then retsw = "1"b;			/* default is to return, but can't on cond_info.crawlout */

	if longsw = 0
	then if cond_info.condition_name ^= "fortran_pause"
	     then do;				/* just print condition name */
		     if cond_info.crawlout
		     then if cond_info.mc_ptr ^= null
			then call ioa_$rs ("^/Error: ^a while in ring ^d", ostring, long, cond_info.condition_name,
				bin (scup -> scu.ppr.prr, 3));
			else call ioa_$rs ("^/Error: ^a while in lower ring", ostring, long,
				cond_info.condition_name);
		     else call ioa_$rs ("^/Error: ^a", ostring, long, cond_info.condition_name);
						/* just print name */
		     go to out;
		end;
	     else ;				/* handle fortran_pause later */
	else do;					/* (longsw > 0) print part common to all messages */
		if cond_info.crawlout
		then /* try to print ring no. */
		     if cond_info.mc_ptr ^= null
		     then call ioa_$rsnnl ("ring ^d", ring_mes, long, bin (scup -> scu.ppr.prr, 3));
		     else ring_mes = "lower ring";
	     end;

	if mte.undefined
	then do;					/* we have a division of illegal_procedure which the fim
						   didn't isolate for us */
		if scup -> scux.fd.isp
		then mtep = addr (message_table_$privileged_info);
						/* this is a special case */
		else do;				/* some other random type */
			mtep = addr (message_table_$hard_default_info);
			defaultsw = "1"b;		/* so cond_info.condition_name will get printed */
		     end;
	     end;

	if defaultsw
	then new_con = cond_info.condition_name;
	else new_con = "";				/*  rest of stuff contains  enough  information */

	if cond_info.info_ptr ^= null
	then do;
		if realsw & cond_info.info_ptr -> condition_info_header.action_flags.quiet_restart
		then go to exit;
		call interpret_info_struc_ ((cond_info.condition_name), cond_info.info_ptr, linfo, retsw, no_restart,
		     realsw, longsw);

/* Program interrupt has a special case here, because it is not
   strictly "quiet restart". See the source of program_interrupt.pl1
   for an explanation of the protocol, and interpret_info_struc_
   for the real work of this side of the protocol.
*/

		if cond_info.condition_name = "program_interrupt"
		then go to exit;

		if mte.active_func
		then do;
			ostring = linfo;
			long = length (linfo);
			go to out;		/* don't print pathname */
		     end;
	     end;					/* the following two conditions get special treatment */
	if mte.linkerr
	then if ^cond_info.crawlout
	     then do;				/* ordinary linkage _error */
		     call linkage_error_ (cond_info.mc_ptr, longsw, lsp, addr (cond_info), pname1, pname2, optr, long)
			;			/* linkage_error_ calls get_ppr_ itself */
		     go to out;
		end;

	if mte.sub_err
	then new_con = cond_info.info_ptr -> sub_error_info.name;
						/* use more descriptive name */

	if longsw = 0 & (cond_info.condition_name = "fortran_pause")
	then do;
		call ioa_$rs ("^/^a", ostring, long, linfo);
		go to out;
	     end;

/* get the name of the procedure that took the fault */
	call get_ppr_ (longsw, lsp, addr (cond_info), pname1, pname2, pname3);


/* find out what was being referenced */
	call get_tpr_ (lsp, addr (cond_info), mtep, tname1, tname2);


	cond_id = "";				/* set default value */
	if longsw = 2
	then cond_id = ptr (mtep, mte.cond_id_relp) -> based_var;
	if mte.no_special = "0"b
	then call special_messages_ (cond_info.mc_ptr, mtep, linfo, cond_info.crawlout, no_restart);
						/* format messages */

/* obtain  format string and assemble message */

	if cond_info.condition_name = "fortran_pause"
	then do;					/* this doesn't fit the message_table_ scheme */
		call ioa_$rs ("^/^a at ^a^a^[^/^;^]^a", ostring, long, linfo, pname1, pname2, longsw = 2, cond_id);
		go to out;			/* should not have a crawlout with this condition */
	     end;

	if cond_info.crawlout
	then do;
		call ioa_$rs (message_table_$formats (mte.format_x + 1), ostring, long, ring_mes, new_con,
		     ptr (mtep, mte.string_relp (1)) -> based_var, pname3,
		     ptr (mtep, mte.string_relp (2)) -> based_var, tname1, linfo,
		     ptr (mtep, mte.string_relp (3)) -> based_var, ptr (mtep, mte.string_relp (4)) -> based_var,
		     pname1, pname2, tname2, cond_id);
	     end;
	else do;					/* Not cond_info.crawlout */
		call ioa_$rs (message_table_$formats (mte.format_x), ostring, long, new_con,
		     ptr (mtep, mte.string_relp (1)) -> based_var, pname1, pname2,
		     ptr (mtep, mte.string_relp (2)) -> based_var, tname1, linfo,
		     ptr (mtep, mte.string_relp (3)) -> based_var, ptr (mtep, mte.string_relp (4)) -> based_var,
		     cond_id);
	     end;

/* warn user if any IPS interrupts have been recently disabled */

/*
   out:	if cond_info.mc_ptr ^= null then if substr(cond_info.mc_ptr -> mc.ips_temp,36,1) = "1"b then do;
   call hcs_$get_ips_mask (ips_mask);
   ips_string = "";
   do i = 1 to sys_info$ips_mask_data.count;
   if (cond_info.mc_ptr -> mc.ips_temp & sys_info$ips_mask_data.masks(i).mask)
   > (ips_mask & sys_info$ips_mask_data.masks(i).mask) then do;
   if ips_string = "" then ips_string =
   substr(masks(i).name, 1, index(masks(i).name, "")-1);
   else ips_string = ips_string || ", " ||
   substr(masks(i).name, 1, index(masks(i).name, "") -1 );
   end;
   end;
   if ips_string ^= "" then call ioa_$rs("^a^a disabled", ostring, long, ostring, ips_string);
   end;
*/

/* print it out at last! */
out:
	if (iocb_ptr ^= null)
	then if (long > 0) & (optr ^= null)
	     then do;
		     call iox_$put_chars (iocb_ptr, optr, (long), code);
		     call iox_$control (iocb_ptr, "start", null (), (0));
						/* just in case a timer that did not expect to print took a fault */
		end;
	     else ;
	else mlong = long;				/* called from return string entry */

last:						/* clean up and leave */
	if retsw
	then go to exit;
	else do;
		call reversion_ ("any_other");	/* but don't want blowup handler to get invoked */
		rptsw = 0;			/* can't enter blowup handler again */
		if mtep ^= null
		then if mte.sig_error		/* CHECK THIS SOMETIME */
		     then call signal_ ("error");	/* these are really pl1 conditions */
		     else go to go_to_cl;		/* pl1 clumsiness */
		else
go_to_cl:
		     do;
			if establish_wall
			then on any_other call wall_ignore_pi;
			call cu_$cl (cl_arg);
			if establish_wall
			then revert any_other;
		     end;

		if no_restart
		then do;				/* don't allow restart */
			call ioa_$ioa_switch (iox_$error_output, "computation cannot be restarted");
			go to go_to_cl;
		     end;
	     end;

exit:						/* we are here if we want to return and not abort */
	rptsw = 0;				/* can't enter blowup handler again */
	return;

interpret_condition_:
     entry (a_mcptr, a_conname, a_wcptr, a_infoptr, a_flag);/* this entry point prints out a message and returns */
						/* it can be used by procedures who want to call the default handler */

/* ASSERT: there is a fault frame on the stack, these arguments are
   not just constructed */

	call get_condition_info;

	realsw = "0"b;				/* do not suppress quiet conditions */
	retsw = "1"b;				/* definitely return */
	go to begin;

/*  */
blowup_handler_:
     procedure (mc_ptr, condition_name, wc_ptr, info_ptr, continue_flag);

	declare (
	        continue_flag	 bit (1) aligned,
	        (mc_ptr, wc_ptr, info_ptr)
				 pointer,
	        condition_name	 character (*)
	        )			 parameter;

	dcl     mess0		 char (40) aligned;
	dcl     short_mess		 char (8) aligned;	/* for convert_status_code_ */
	dcl     long_mess		 char (100) aligned;


	dcl     convert_status_code_	 entry (fixed bin (35), char (8) aligned, char (100) aligned);

/* this is the default handler for default_error_handler_ */


	/*** format: off */
	if condition_name = "quit"
           | condition_name = "alrm"
           | condition_name = "cput"
           | condition_name = "program_interrupt"
           | condition_name = "storage"
           | condition_name = "finish"
	 | condition_name = "signal_io_" /* might be needed to do the work */
	then do;
		call continue_to_signal_ ((0)); /* works fine */
		return;
	     end;
	/*** format: ^off */

	rptsw = rptsw + 1;				/* increase recursion indicator */
	if rptsw = 3
	then do;					/* can't even write on user_i/o; terminate proc */
		call terminate_process;
		go to last;			/* if not... */
	     end;

	if ^cond_info.crawlout
	then mess0 = byte (10) /* NL */ || "Error:";
	else mess0 = byte (10) /* NL */ || "Error while processing in lower ring:
";

/* the next section is for dire emergencies, when we don't trust anything */
	if rptsw = 2
	then do;					/* don't take chances with rqo--use user_i/o */
		call ioa_$ioa_switch (iox_$user_io, "^/^a^a  (Unable to obtain proper message.)", mess0,
		     condition_name);
		go to last;			/* rptsw will be reset there */
	     end;

/* at this point, try at least to get decent names to print */
	if mc_ptr ^= null
	then do;					/* have machine conditions */
		if (wc_ptr ^= null ())		/* crawlout */
		then pname1 = pname3;		/* print name from mc */
		if pname1 = ""
		then call format_name (ptr (baseptr (bin (bin (scup -> scu.ppr.psr, 15), 18)), scup -> scu.ilc),
			pname1);
		if tname1 = ""
		then call format_name (ptr (baseptr (bin (bin (scup -> scu.tpr.tsr, 15), 18)), scup -> scu.ca),
			tname1);
		if mc_ptr -> mc.errcode = 0
		then long_mess = "";
		else do;
			call convert_status_code_ ((mc_ptr -> mc.errcode), short_mess, long_mess);
			if short_mess = "xxxxxxxx"
			then long_mess = "";	/* don't print code not found */
		     end;

/* print basic message for original fault */
		call ioa_$rs ("^/^a  ^a condition by ^a^/referencing ^a^/^a", ostring, long, mess0,
		     cond_info.condition_name, pname1, tname1, long_mess);
	     end;
	else do;					/* no mc -> no pathnames */
		if linfo ^= ""
		then go to print;			/* have as much as we can get */
		if info_ptr ^= null
		then do;				/* see what we can find in info structure */

			call interpret_info_struc_ ((condition_name), info_ptr, linfo, retsw, no_restart, realsw,
			     longsw);
		     end;
print:
		call ioa_$rs ("^/^a  ^a condition^/^a", ostring, long, mess0, condition_name, linfo);
	     end;
	go to out;				/* print it out */


format_name:
     proc (p, name);

	dcl     p			 ptr;
	dcl     code		 fixed bin (35);
	dcl     find_pathname_	 entry (ptr, ptr, fixed bin (35));
	dcl     name		 char (500) aligned;
	dcl     1 name_info		 aligned like find_pathname_info automatic;


	call find_pathname_ (p, addr (name_info), code);

	if name_info.component_ename ^= ""
	then /* use name from bindmap */
	     call ioa_$rsnnl ("^a^a (^a^a^a^a^a)^a", name, long, name_info.component_ename, name_info.adjusted_offset,
		name_info.dirname, name_info.gt_char, name_info.real_ename, name_info.real_offset,
		name_info.pdir_string, name_info.offset_msg);

	else call ioa_$rsnnl ("^a^a^a^a^a^a", name, long, name_info.dirname, name_info.gt_char, name_info.real_ename,
		name_info.real_offset, name_info.pdir_string, name_info.offset_msg);

	return;
     end format_name;
     end blowup_handler_;


change_error_message_mode_:
     entry (longsw_val);

/* this entry allows the user to specify the length of the message that he wants */
/* the possibilities are:  0 for brief, 1 for normal, and 2 for long  */
/* (long means that both sets of machine conditions will be printed on crawl_outs */

	dcl     longsw_val		 fixed bin;

	if longsw_val < 0 | longsw_val > 2
	then real_longsw = 1;			/* set to default */
	else real_longsw = longsw_val;
	return;

reprint_error_message_:
     entry (areap, mptr, mlong, mode, depth, ecode);

/* this entry is called from a command and looks back in the stack for the arguments of a previous
   invocation of default_error_handler_.    These are used to call default_error_handler_ recursively
   nad print out the message again.  this feature would normally be used when the first message was
   of the short form and a longer message is desired.
*/

	dcl     (depth, ecode)	 fixed bin;	/* depth specifies how many stack frames to go back */

	i = 0;
	do lsp = find_condition_frame_ (null) repeat find_condition_frame_ (lsp);
						/* do not use language for test */
	     if lsp = null
	     then go to return_no_such_level;
	     i = i + 1;				/* count number of levels we have found */

/* we do not want a while loop, we want an until loop.
   so we hand to the test-and-go-to, to avoid an extra
   pass through the repeat code */

	     if i = depth
	     then go to found_level;
	end;

found_level:					/* get arguments from earlier frame so we can call ourself */
	call get_condition_info_code (code);
	if code ^= 0
	then do;
		call ioa_$ioa_switch (iox_$error_output, "condition information not available for level ^d", depth);
		ecode = -1;
		return;
	     end;

	call reinterpret_condition_ (areap, mptr, mlong, mode, cond_info.mc_ptr, (cond_info.condition_name),
	     cond_info.wc_ptr, cond_info.info_ptr, lsp);

return_no_such_level:
	ecode = i;				/* tell them how far we went */
	return;


reinterpret_condition_:
     entry (areap, mptr, mlong, mode, c_mcptr, c_conname, c_wcptr, c_infoptr, r_sp);

/* this entry is identical to condition_interpreter_ except that the real switch is turned off, and a stack ptr can be supplied */

	declare r_sp		 ptr;

	realsw = "0"b;
	retsw = "1"b;
	lsp = r_sp;
	go to ci_start;

condition_interpreter_:
     entry (areap, mptr, mlong, mode, c_mcptr, c_conname, c_wcptr, c_infoptr);

/* this entry is just like interpret_condition_ except that the string can be returned */
/* an area is provided for that purpose */

	dcl     (areap, mptr)	 ptr;
	dcl     (mlong, mode)	 fixed bin;
	dcl     (c_mcptr, c_wcptr, c_infoptr)
				 ptr;
	dcl     c_conname		 char (*);
	dcl     based_area		 area based (areap);
	dcl     re_map_mode		 (1:3) fixed bin init (1, 0, 2);

/* These next two bits are really very important. realsw causes this entrypoint
   to actually perform condition semantics, like setting the bit in the
   active_function_error structure to indicate that the message has been printed.
   It will also return null messages for conditions with quiet_restart.
   How it's caller is supposed to know whether restarting is appropriate
   is beyond me.

   retsw, on the other hand, prevents this entry from getting to command
   level. This entrypoint is not very useful, therefore, but its all
   we document. --bim 

  What we really want is an entrypoint with a return string AND realsw off
  and retsw on, which we lack. That might be more useful that this,
  but changing this to do that would be incompatable. */

	realsw = "1"b;
	retsw = "1"b;
	lsp = null ();
ci_start:
	call condition_ ("any_other", blowup_handler_);
	iocb_ptr = null ();				/* until proven otherwise */

	optr = addr (my_string);

/* if there is something on the stack it supercedes args */
/* so we call find_condition_info_ */

	call get_condition_info_code (code);
	if code ^= 0
	then do;					/* strictly caller should not call unless there is an error on the stack, but we try anyway */
		cond_info.version = condition_info_version_1;
		cond_info.mc_ptr = c_mcptr;
		cond_info.wc_ptr = c_wcptr;
		cond_info.info_ptr = c_infoptr;
		string (cond_info.flags) = ""b;
		if cond_info.wc_ptr ^= null ()
		then cond_info.crawlout = "1"b;	/* good guess */
		cond_info.pad2 = ""b;
		cond_info.user_loc_ptr = null ();
		cond_info.pad3 (*) = ""b;
	     end;

	if areap = null
	then iocb_ptr = iox_$error_output;		/* print error message rather than returning it */

	else do;					/* return message in area provided */
		iocb_ptr = null;			/* won't be using switch */
		allocate ostring in (based_area) set (optr);
		mptr = optr;			/* let caller know where message is */
		mlong = 0;			/* initialize in case there is no message to be returned */
	     end;

	if mode < 1 | mode > 3
	then temp_longsw = real_longsw;		/* if not specified, set to current mode */
	else temp_longsw = re_map_mode (mode);		/* be sure mode has correct value for us */
	retsw = "1"b;				/* definitely return */
	flong = 8;				/* indicates which arg is infoptr */

	go to begin_com;

/*  */
add_finish_handler:
     entry (fhandler, xcode);

/* this entry adds the specified entry to a list to be called for the finish condition */

	dcl     xcode		 fixed bin (35);
	dcl     fhandler		 entry ();
	dcl     add_epilogue_handler_	 entry (entry) returns (fixed bin (35));

	xcode = add_epilogue_handler_ (fhandler);
	return;

get_condition_info:
     procedure;
	declare code		 fixed bin (35);
	declare code_flag		 bit (1);
	code_flag = "0"b;
	goto common;

get_condition_info_code:
     entry (a_code);
	declare a_code		 fixed bin (35);
	code_flag = "1"b;
	a_code = 0;

common:
	unspec (cond_info) = ""b;
	cond_info.version = condition_info_version_1;
	cond_info.mc_ptr = null ();
	cond_info.wc_ptr = null ();
	cond_info.info_ptr = null ();
	cond_info.user_loc_ptr = null ();
	pname1, pname2, pname3, tname1, tname2, linfo = "";

	if lsp = null ()
	then lsp = find_condition_frame_ (null ());	/* find the offending frame */
	call find_condition_info_ (lsp, addr (cond_info), code);
	if code ^= 0
	then do;
		if code_flag
		then do;
			a_code = code;
			return;
		     end;
		else go to exit;			/* nothing on stack, we cannot do anything */
	     end;

	condition_info_header_ptr = cond_info.info_ptr;	/* find the bits */
     end get_condition_info;

terminate_process:
     procedure;

	declare terminate_process_	 entry (char (*), ptr);
	declare error_table_$unable_to_do_io
				 fixed bin (35) ext static;

	declare 1 terminate_info	 aligned,
		2 version		 init (0),
		2 status_code	 fixed bin (35);


	terminate_info.status_code = error_table_$unable_to_do_io;
	call terminate_process_ ("fatal_error", addr (terminate_info));
						/* should not return */
     end terminate_process;

%include condition_info;
	dcl     1 cond_info		 aligned like condition_info;
%include condition_info_header;
%page;
%include decode_definition_str;
%page;
%include quit_info;
%page;
%include mrds_se_error_info;
%page;
%include signal_io_info;
%include sub_error_info;
%page;
%include stack_header;
%include stack_frame;
%page;
%include mc;
%page;
%include message_table_entry;
%page;
%include find_pathname_info;
     end dummy;

