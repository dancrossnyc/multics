/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


find_pathname_: proc (locp, strucp, code);

/* This procedure returns pathname information about a given pointer. */
/* coded by M. Weaver  July 1973 */
/* last modified by M. Weaver 27 November 1973 */
/* Modified to use include file and clean up April 81 Benson i Margulies */

	declare (locp, segp, strucp)	 ptr;

	declare (code, ecode)	 fixed bin (35);
	declare error_table_$oldobj	 ext fixed bin (35);
	declare (lng, highct, hcsct, cur_lab) fixed bin;

	declare map		 bit (1) aligned;

	declare temp		 char (6) aligned;
	declare aligned_component_ename character (32) aligned;

	declare (bin, baseno, byte, rel, null, ptr) builtin;

	declare convert_binary_integer_$octal_string entry (fixed bin (35)) returns (char (13) var);
	declare ring0_get_$name	 entry (char (*), char (*), ptr, fixed bin (35));
	declare find_condition_info_	 entry (ptr, ptr, fixed bin (35));
	declare continue_to_signal_	 entry (fixed bin (35));
	declare hcs_$fs_get_path_name	 entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
	declare hcs_$high_low_seg_count entry (fixed bin, fixed bin);
	declare interpret_bind_map_	 entry (ptr, char (32) aligned, fixed bin (18), fixed bin (35));
	declare get_pdir_		 entry () returns (char (168));
	declare any_other		 condition;

%include find_pathname_info;

/* initialize structure so it will always be printable */

	find_pathname_info_ptr = strucp;
	component_ename = "";
	adjusted_offset = "";
	dirname = "";
	gt_char = "";
	real_ename = "";
	pdir_string = "";
	offset_msg = "";
	bin_adjusted_off = 0;
	bin_real_off = bin (rel (locp), 18);
	real_offset = "|" || convert_binary_integer_$octal_string (bin (bin_real_off, 35));

/* see if segment is in ring 0; if so, we can't get name from KST */

	segp = ptr (locp, 0);
	call hcs_$high_low_seg_count (highct, hcsct);	/* find out which segs are in r0 */
	if bin (baseno (segp), 18) <= hcsct then do;
		cur_lab = 1;			/* indicates return loc to handler */
		on any_other call catch;
		call ring0_get_$name (dirname, real_ename, segp, code);
		revert any_other;
		if code ^= 0 then go to ret_segno;	/* return something for name */
		if (dirname ^= "") & (dirname ^= ">") then gt_char = ">";
		return;
	     end;

/* pick up pathname */

	call hcs_$fs_get_path_name (segp, dirname, lng, real_ename, code);
	if code ^= 0 then do;			/* return something for name */
finish (1):
ret_segno:	real_ename = convert_binary_integer_$octal_string (bin (bin (baseno (segp), 18), 35));
		return;
	     end;

/* get component name from bindmap it it exists; be prepared for access fault */

	map = "0"b;				/* indicates have not looked at bind map */
	cur_lab = 2;				/* indicates return loc for handler */
	on any_other call catch;
	call interpret_bind_map_ (locp, aligned_component_ename, bin_adjusted_off, ecode);
	if ecode = 0
	then component_ename = aligned_component_ename;
	map = "1"b;				/* id not fault */
	revert any_other;

/* fill in rest of items */
finish (2):
	if dirname = get_pdir_ () then do;		/* don't print messy string */
		pdir_string = " (in process dir)";
		dirname = "";
	     end;

	if (dirname ^= "") & (dirname ^= ">") then gt_char = ">";

	if (ecode = error_table_$oldobj) | ^map then
	     offset_msg = byte (10 /* NL */) || "(offset is relative to base of segment)";

	if (ecode = 0) & map then do;			/* get compiler error when put all on 1 line */
		temp = convert_binary_integer_$octal_string (bin (bin_adjusted_off, 35));
		adjusted_offset = "|" || temp;
	     end;

	return;

catch: procedure;
%include condition_info;
	declare 1 CI		 aligned like condition_info;

	CI.version = condition_info_version_1;
	on any_other go to finish (cur_lab);
	call find_condition_info_ (null (), addr (CI), (0));
	revert any_other;
	if /* tree */ CI.condition_name ^= "quit"
	then if CI.condition_name ^= "alrm"
	     then if CI.condition_name ^= "cput"
		then if CI.condition_name ^= "storage"
		     then if CI.condition_name ^= "finish"
			then if CI.condition_name ^= "program_interrupt"
			     then go to finish (cur_lab); /* probably access fault */

	call continue_to_signal_ (0);
	return;
     end catch;



     end find_pathname_;
