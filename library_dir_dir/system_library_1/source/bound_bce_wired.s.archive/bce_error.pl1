/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */
/* BCE_ERROR -- com_err_ replacement for bootload environment */
/* BIM '82 */
/* Modified by Keith Loepere in 8/83 for new bce switches */
/* format: style4,indattr,ifthenstmt,ifthen,idind33,^indcomtxt */

bce_error:
     procedure (Code) /* options (variable) */;

declare  Code			  fixed bin (35) parameter;
declare  Me			  char (*) parameter;

declare  1 error_code		  aligned,
	 2 pad_segno		  bit (18) unaligned, /* for now, assume error_table_ */
	 2 error_table_offset	  fixed bin (18) uns unal;
declare  picture_code		  pic "------------9";

declare  etep			  pointer;

declare  1 error_table_entry		  aligned based (etep),
	 2 length			  fixed bin (9) unsigned unaligned,
	 2 message		  character (0 refer (error_table_entry.length)) unaligned;

declare  length			  builtin;
declare  pointer			  builtin;
declare  unspec			  builtin;

declare  n_args			  fixed bin;
declare  message_buffer		  char (512);
declare  work_buffer		  char (work_buffer_len) based (work_buffer_ptr);
declare  work_buffer_len		  fixed bin;
declare  work_buffer_ptr		  ptr;
declare  string_len			  fixed bin (21);
declare  tcode			  fixed bin (35);

declare  first_ioa_arg		  fixed bin;

declare  arg_list_ptr_		  entry () returns (pointer);
declare  cu_$arg_count		  entry (fixed bin, fixed bin (35));
declare  ioa_$general_rs		  entry (ptr, fixed bin, fixed bin, char (*), fixed bin (21), bit (1) aligned,
				  bit (1) aligned);
declare  bce_data$error_put_chars
				  entry (ptr, ptr, fixed bin, fixed bin (35)) external variable;
declare  error_table_$		  bit (36) aligned external static;
%page;
	work_buffer_ptr = addr (message_buffer);
	work_buffer_len = length (message_buffer);
	first_ioa_arg = 2;
	goto join;

com_err:
     entry (Code, Me);				/* options (variable); for com_err_ support */
	work_buffer_ptr = addr (message_buffer);
	work_buffer_len = length (message_buffer);
	string_len = length (rtrim (Me));
	substr (work_buffer, 1, string_len) = substr (Me, 1, string_len);
	substr (work_buffer, string_len + 1, 2) = ": ";
	work_buffer_ptr = addcharno (work_buffer_ptr, string_len + 2);
	work_buffer_len = work_buffer_len - (string_len + 2);
	first_ioa_arg = 3;

join:
	if Code ^= 0
	then do;
	     unspec (error_code) = unspec (Code);
	     if error_code.pad_segno ^= "077777"b3
	     then do;
		substr (work_buffer, 1, 5) = "Code ";
		picture_code = Code;
		string_len = length (ltrim (picture_code));
		substr (work_buffer, 6, string_len) =
		     substr (picture_code, length (picture_code) - string_len + 1, string_len);
		work_buffer_ptr = addcharno (work_buffer_ptr, 5 + string_len);
		work_buffer_len = work_buffer_len - (5 + string_len);
	     end;
	     else do;
		etep = pointer (addr (error_table_$), error_code.error_table_offset);
		substr (work_buffer, 1, error_table_entry.length) = error_table_entry.message;
		work_buffer_ptr = addcharno (work_buffer_ptr, error_table_entry.length);
		work_buffer_len = work_buffer_len - (error_table_entry.length);
	     end;
	     substr (work_buffer, 1, 1) = " ";
	     work_buffer_ptr = addcharno (work_buffer_ptr, 1);
	     work_buffer_len = work_buffer_len - 1;
	end;
	call cu_$arg_count (n_args, tcode);
	if n_args >= first_ioa_arg 
	then do;
	     call ioa_$general_rs (arg_list_ptr_ (), first_ioa_arg, first_ioa_arg + 1, work_buffer, string_len, "0"b, "0"b);
	     work_buffer_ptr = addcharno (work_buffer_ptr, string_len);
	     work_buffer_len = work_buffer_len - string_len;
	end;
	substr (work_buffer, 1, 1) = "
";
	work_buffer_ptr = addcharno (work_buffer_ptr, 1);
	work_buffer_len = work_buffer_len - 1;

	work_buffer_ptr = addr (message_buffer);
	work_buffer_len = length (message_buffer) - work_buffer_len;
	call bce_data$error_put_chars (addr (bce_data$error_put_chars), addr (work_buffer), length (work_buffer), (0));
	return;
     end bce_error;
