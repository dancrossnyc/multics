/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */
/* bce_execute_command_ -- use map_over_requests_ to find the request desired.
Call it appropriately. */

/* format: style2 */

/* Written by Benson Margulies or someone who programs like him.
Modified the last possible day of 1983 to allow Multics requests within bce
by Keith Loepere. */

bce_execute_command_:
     procedure (Info_ptr, Request, Arg_list_ptr, Code);

	declare Request		 char (*);
	declare Info_ptr		 pointer;	/* to ss_info */
	declare Arg_list_ptr	 pointer;	/* from command_processor_ */
	declare Code		 fixed bin (35);
	declare execute_entry	 entry (ptr) variable;
	declare 1 p_info		 aligned,	/* passed to CHECK_ONE */
		2 request_name	 char (32) unaligned,
		2 found		 entry (pointer);

	declare arg_count		 fixed bin;
	declare 1 entry_variable	 aligned,	/* template thereof */
		2 code_ptr	 pointer,
		2 env_ptr		 pointer;

	declare Global_RQ_data_ptr	 pointer;	/* global to FOUND */
	declare bce_map_over_requests_ entry (entry, ptr, ptr);
	declare cu_$af_arg_count_rel	 entry (fixed bin, fixed bin (35), ptr);
	declare cu_$generate_call	 entry (entry, ptr);
	declare error_table_$active_function
				 fixed bin (35) ext static;
	declare error_table_$bad_command_name
				 fixed bin (35) ext static;
	declare error_table_$not_act_fnc 
				 fixed bin (35) ext static;

	declare 1 bce_flags		 aligned based (addr (rq_data.flags)),
		2 system_flags	 bit (15) unal,	/* our own interpretation of rq_data.flags for bce */
		2 valid_at_early	 bit (1) unal,
		2 valid_at_boot	 bit (1) unal,
		2 valid_at_crash	 bit (1) unal;

	declare (addr, null, pointer, unspec)
				 builtin;
%page;
	Code = 0;
	ss_info_ptr = Info_ptr;
	ss_info.arg_list_ptr = Arg_list_ptr;
	p_info.request_name = Request;
	p_info.found = FOUND;

	call bce_map_over_requests_ (CHECK_ONE, addr (p_info), ss_info.request_table_ptr);

/**** Get here if not found ****/

	Code = error_table_$bad_command_name;
	return;

CHECK_ONE:
     procedure (Request_data_ptr, Info_ptr);

	declare Request_data_ptr	 pointer;	/* to ssu_ request table */
	declare Info_ptr		 pointer;

	declare 1 info		 based (Info_ptr) aligned like p_info; /* passed structure providing command name */
	declare nx		 fixed bin; /* name index */

	rq_data_ptr = Request_data_ptr;
	if sys_info$collection_1_phase = BCE_CRASH_INITIALIZATION then
	     if ^ (bce_flags.valid_at_boot | bce_flags.valid_at_crash) then return;
	     else;
	else if sys_info$collection_1_phase = CRASH_INITIALIZATION then
	     if ^ bce_flags.valid_at_crash then return;
	     else;
	else if sys_info$collection_1_phase = EARLY_INITIALIZATION then
	     if ^ bce_flags.valid_at_early then return;
	     else;
	else if sys_info$collection_1_phase = BOOT_INITIALIZATION then
	     if ^ bce_flags.valid_at_boot then return;
	     else;

	request_name_list_ptr = pointer (rq_data_ptr, rq_data.namelist_loc);
	do nx = 1 to request_name_list.n_names;
	     if request_name_list.name (nx) = info.request_name
	     then call info.found (rq_data_ptr);	/* never returns */
	end;

     end CHECK_ONE;

FOUND:
     procedure (Request_data_ptr);
	declare Request_data_ptr	 pointer;

	Global_RQ_data_ptr = Request_data_ptr;
	go to FOUND_LABEL;				/* nonlocal up the wazzu */
     end FOUND;

FOUND_LABEL:
	rq_data_ptr = Global_RQ_data_ptr;
	call cu_$af_arg_count_rel (arg_count, Code, Arg_list_ptr);
	if Code = 0 then  /* active function usage */
	     if ^ rq_data.allow_af then do;
		Code = error_table_$not_act_fnc;
		return;
	     end;
	     else;
	else if ^ rq_data.allow_command then do;
		Code = error_table_$active_function;
		return;
	     end;
	Code = 0;
	entry_variable.code_ptr = pointer (rq_data_ptr, rq_data.code_loc);
	entry_variable.env_ptr = null ();
	unspec (execute_entry) = unspec (entry_variable);

/* call routine with arg_list supplied depending on object type */

	if rq_data.multics_request then call cu_$generate_call (execute_entry, ss_info.arg_list_ptr);
	else call execute_entry (ss_info_ptr);
	return;

%include "_ssu_request_table";
%include "_ssu_request_data";
%include bce_subsystem_info_;
%include collection_1_phases;
     end bce_execute_command_;
