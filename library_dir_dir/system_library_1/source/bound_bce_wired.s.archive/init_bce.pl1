/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */
/* INIT_BCE.PL1 -- initialize the bootload_command_environment */
/* BIM 8/82 */
/* Modified by Keith Loepere in 83 for exec_com, file_out support */
/* Modified by Keith Loepere in March 85 to set bce cp_data_. */
/* format: style4,indattr,ifthenstmt,ifthen,idind33,^indcomtxt */

init_bce:
     procedure;

declare  1 AI			  aligned like area_info;
declare  fa1_ptr			  pointer;

declare  bce_data$console_alert_put_chars entry variable ext;
declare  bce_data$console_get_line	  entry variable ext;
declare  bce_data$console_put_chars	  entry variable ext;
declare  bce_data$error_put_chars	  entry variable ext;
declare  bce_data$exec_com_get_line	  entry variable ext;
declare  bce_data$free_area_ptr	  pointer ext;
declare  bce_data$get_line		  entry variable ext;
declare  bce_data$put_chars		  entry variable ext;
declare  dseg$			  (0:4095) fixed bin (71) ext;
declare  free_area_1$		  ext static bit (36) aligned;

declare  bce_console_io$get_line	  entry;
declare  bce_console_io$put_chars	  entry;
declare  bce_console_io$put_chars_alert	  entry;
declare  bce_exec_com_input		  entry;
declare  define_area_		  entry (ptr, fixed bin (35));
declare  sdw_util_$get_size		  entry (ptr, fixed bin (18));

declare  null			  builtin;
declare  stackbaseptr		  builtin;
%page;
wired: entry;					/* init all references to wired data */

	unspec (AI) = ""b;
	AI.version = 1;
	AI.owner = "";
	fa1_ptr = addr (free_area_1$);
	call sdw_util_$get_size (addr (dseg$ (bin (baseno (fa1_ptr)))), AI.size);
	AI.areap = fa1_ptr;
	AI.zero_on_free = "1"b;

	call define_area_ (addr (AI), (0));
	bce_data$free_area_ptr, stackbaseptr () -> stack_header.user_free_ptr, stackbaseptr () -> stack_header.system_free_ptr = fa1_ptr;

	bce_data$console_get_line, bce_data$get_line = bce_console_io$get_line;
	bce_data$console_put_chars, bce_data$put_chars = bce_console_io$put_chars;
	bce_data$console_alert_put_chars = bce_console_io$put_chars_alert;
	bce_data$error_put_chars = bce_console_io$put_chars;
	return;

paged: entry;					/* references to paged data */

	bce_data$exec_com_get_line = bce_exec_com_input;

	cp_data_$scratch_release_factor = 1;		/* temporary segments in BCE are a scarce resource */
	addr (cp_data_$permanent_scratch_segment_list) -> permanent_scratch_segment_list.n_scratch_segments = 1;
	return;
%page; %include area_info;
%page; %include cp_data_;
%page; %include stack_header;
     end init_bce;
