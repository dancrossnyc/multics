/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */
bce_get_to_command_level: proc (request_table_ptr);

/* Calls sets up appropriate ss_info structure for bootload Multics and calls
bce_listen_.  Also contains miscelaneous return to real_initializer code.
Written sometime in 1983 by Keith Loepere. */

/* Modified September of 1984 by Allen Ball to check and see if the storage 
system is enabled before querying the operator. */

/* format: style4,indattr,ifthenstmt,ifthen,idind33,^indcomtxt */

dcl  Boot_label		        label static;	/* used for aborting command level (the method to continue initialization and therefore boot) */
dcl  Info_ptr		        ptr parameter;
dcl  NL			        char (1) static options (constant) init ("
");
dcl  addr			        builtin;
dcl  arg			        char (arg_len) based (arg_ptr);
dcl  arg_count		        fixed bin;
dcl  arg_len		        fixed bin (21);
dcl  arg_ptr		        ptr;
dcl  bce_data$console_put_chars       entry (ptr, ptr, fixed bin, fixed bin (35)) ext variable;
dcl  bce_data$console_alert_put_chars entry (ptr, ptr, fixed bin, fixed bin (35)) ext variable;
dcl  bce_data$subsys_info_ptr	        ptr external;
dcl  bce_entry		        bit (1) aligned;	/* bce as opposed to boot command */
dcl  bce_listen_		        entry (ptr, char (*));
dcl  bce_query		        entry options (variable);
dcl  bce_query$yes_no	        entry options (variable);
dcl  clock_set		        bit (1) aligned;	/* false => must call init_clocks */
dcl  code			        fixed bin (35);
dcl  com_err_		        entry () options (variable);
dcl  cu_$arg_count_rel	        entry (fixed bin, ptr, fixed bin (35));
dcl  cu_$arg_ptr_rel	        entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
dcl  dimension		        builtin;
dcl  error_table_$bad_arg	        fixed bin (35) ext static;
dcl  force		        bit (1) aligned;	/* user used -force */
dcl  i			        fixed bin;		/* loop var */
dcl  init_clocks		        entry (bit (1) aligned);
dcl  ioa_			        entry () options (variable);
dcl  ioa_$nnl		        entry () options (variable);
dcl  length		        builtin;
dcl  1 my_ss_info		        aligned like ss_info;
dcl  request_abort_		        condition;
dcl  request_table_ptr	        ptr parameter;
dcl  saved_max_seg_size	        fixed bin (18);	/* saved value of sys_info$max_seg_size (we change it to bce buffer size) */
dcl  string		        builtin;
dcl  sys_boot_info$at_bce_cl	        bit (1) aligned ext static;
dcl  1 sys_boot_info$bce_intk_card    aligned ext static like intk_card;
dcl  sys_boot_info$config_has_been_modified bit (1) aligned ext static;
dcl  sys_info$bce_max_seg_size        fixed bin (18) ext static;
dcl  sys_info$max_seg_size	        fixed bin (18) ext static;
dcl  1 toehold$		        aligned external like toe_hold;
dcl  unspec		        builtin;
dcl  yes_no		        bit (1);

	saved_max_seg_size = sys_info$max_seg_size;
	sys_info$max_seg_size = sys_info$bce_max_seg_size;/* lie about size of pagable segs */
	my_ss_info.request_table_ptr = request_table_ptr;
	Boot_label = BOOT;
	my_ss_info.name = "bce";
	string (my_ss_info.flags) = "0"b;
	bce_data$subsys_info_ptr = addr (my_ss_info);
	fgbxp = addr (flagbox$);
	if fgbx.mess then do;
	     if fgbx.alert then call bce_data$console_alert_put_chars (addr (bce_data$console_alert_put_chars), addr (fgbx.message), length (fgbx.message), code);
	     else call bce_data$console_put_chars (addr (bce_data$console_put_chars), addr (fgbx.message), length (fgbx.message), code);
	     call bce_data$console_put_chars (addr (bce_data$console_put_chars), addr (NL), length (NL), code);
	     fgbx.mess = "0"b;
	end;
	sys_boot_info$at_bce_cl = "1"b;
	if fgbx.breakpoint then do;
	     call ioa_ ("Entering probe.");
	     call bce_listen_ (addr (my_ss_info), "probe");
	end;
	else if fgbx.manual_crash then call bce_listen_ (addr (my_ss_info), "");
	else call bce_listen_ (addr (my_ss_info), fgbx.return_to_bce_command);
	go to BOOT;

reinitialize: entry (Info_ptr);

	clock_set = "1"b;
	force = "0"b;

	ss_info_ptr = Info_ptr;
	call cu_$arg_count_rel (arg_count, ss_info.arg_list_ptr, code);
	if code ^= 0 then do;
	     call com_err_ (code, "reinitialize");
	     signal request_abort_;
	end;

	do i = 1 to arg_count;
	     call cu_$arg_ptr_rel (i, arg_ptr, arg_len, code, ss_info.arg_list_ptr);
	     if arg = "-force" | arg = "-fc" then force = "1"b;
	     else if arg = "-time" | arg = "-tm" then clock_set = "0"b;
	     else do;
		call com_err_ (error_table_$bad_arg, "reinitialize", "^a", arg);
		return;
	     end;
	end;

	fgbxp = addr (flagbox$);
	if ^force then
	     if sys_info$collection_1_phase = CRASH_INITIALIZATION then
		if fgbx.rtb.ssenb then do;
		     call bce_query$yes_no (yes_no, "Memory contains a valid Multics image.  Do you wish to destroy it? ");
		     if ^yes_no then signal request_abort_;
		end;

	if ^clock_set then call init_clocks (clock_set);
	if ^clock_set then return;

	sys_info$collection_1_phase = EARLY_INITIALIZATION; /* makes next phase boot phase */
	toehold$.memory_state = At_bce__early;
	go to Boot_label;

boot: entry (Info_ptr);				/* The command that leaves command level */

	bce_entry = "0"b;
	go to boot_join;

bce: entry (Info_ptr);				/* continue booting bce */

	bce_entry = "1"b;

boot_join:
	ss_info_ptr = Info_ptr;

	clock_set = (sys_info$collection_1_phase ^= EARLY_INITIALIZATION);
	force = "0"b;

	intk_cardp = addr (sys_boot_info$bce_intk_card);
	unspec (intk_card) = "0"b;
	intk_card.word = INTK_CARD_WORD;
	intk_card.n_fields = 2;
	intk_card.field_type (1) = CONFIG_STRING_TYPE;
	intk_card.warm_or_cold = "warm";		/* for now */
	intk_card.field_type (2) = CONFIG_DECIMAL_TYPE;
	intk_card.boot_drive = 0;
	do i = 1 to dimension (intk_card.parms, 1);
	     unspec (intk_card.parms (i)) = EMPTY_FIELD;
	end;

	if ^bce_entry then do;
	     call cu_$arg_count_rel (arg_count, ss_info.arg_list_ptr, code);
	     if code ^= 0 then do;
		call com_err_ (code, "boot");
		signal request_abort_;
	     end;

	     do i = 1 to arg_count;
		call cu_$arg_ptr_rel (i, arg_ptr, arg_len, code, ss_info.arg_list_ptr);
		if arg = "-force" | arg = "-fc" then force = "1"b;
		else if arg = "-cold" then intk_card.warm_or_cold = "cold";
		else if arg = "-time" | arg = "-tm" then clock_set = "0"b;
		else do;
		     intk_card.n_fields = intk_card.n_fields + 1;
		     if intk_card.n_fields > 14 then do;
			call com_err_ (0, "boot", "Too many options.");
			return;
		     end;
		     intk_card.parms (intk_card.n_fields - 2) = arg;
		     intk_card.field_type (intk_card.n_fields) = CONFIG_STRING_TYPE;
		end;
	     end;

	     if ^force then do;
		if intk_card.warm_or_cold = "cold" then do;
		     call bce_query$yes_no (yes_no, "Do you really wish to boot cold and there by destroy the system hierarchy? ");
		     if ^yes_no then signal request_abort_;
		end;
		if sys_boot_info$config_has_been_modified then do;
		     call bce_query$yes_no (yes_no, "The config deck has been modified.
Do you wish to boot service without reinitializing bce? ");
		     if ^yes_no then signal request_abort_;
		end;
	     end;
	end;

	if ^clock_set then call init_clocks (clock_set);
	if ^clock_set then return;

	goto Boot_label;				/* actually performs the boot */

BOOT:
	sys_info$max_seg_size = saved_max_seg_size;
	sys_boot_info$at_bce_cl = "0"b;
	fgbxp = addr (flagbox$);
	unspec (fgbx.rtb) = "0"b;
	return;
%page; %include bce_subsystem_info_;
%page; %include collection_1_phases;
%page; %include config_deck;
%page; %include config_intk_card;
%page; %include flagbox;
%page; %include toe_hold;
     end;
