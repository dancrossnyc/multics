/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */
/****^  HISTORY COMMENTS:
  1) change(85-09-11,Fawcett), approve(85-09-11,MCR6979),
     audit(86-01-17,CLJones), install(86-03-21,MR12.0-1033):
     Created to control
     the MCA in the IMU.
                                                   END HISTORY COMMENTS */
/* format: style4 */
/* Created Nov 1984 by R. A. Fawcett */
/* Modified May 1985 by P. K Farley to call admin_gate_$ocdcm_reconfigure
   to lock MCA input through the console. */

mca_init_: proc (a_mca_index, a_code);

dcl  a_mca_index fixed bin (3) parm;
dcl  a_code fixed bin (35) parm;
dcl  code fixed bin (35);
dcl  i fixed bin;
dcl  mca_index fixed bin;
dcl  rings (3) fixed bin (3);


dcl  hcs_$append_branchx entry (char (*), char (*), fixed bin (5), (3) fixed bin (3), char (*),
	fixed bin (1), fixed bin (1), fixed bin (24), fixed bin (35));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  admin_gate_$ocdcm_reconfigure entry (char (4), fixed bin, fixed bin (35));

dcl  (null, substr) builtin;

dcl  error_table_$bad_arg fixed bin (35) ext static;

	mca_index = a_mca_index;
	if mca_index < 1 | mca_index > 4 then do;
	     a_code = error_table_$bad_arg;
	     return;
	end;

/* does the data_segment exists */

	call hcs_$initiate (SYSTEM_DIR, DATA_SEG, "", 0, 0, mca_data_seg_ptr, code);
	if mca_data_seg_ptr = null () then do;

/* Ok then create the data segment with the rings of 1,1,1 and rw *.* " */

	     rings (*) = 1;
	     call hcs_$append_branchx (SYSTEM_DIR, DATA_SEG, 10, rings,
		"*.*.*", 0, 0, 0, code);
	     if code ^= 0 then do;
		a_code = code;
		return;
	     end;
	     call hcs_$initiate (SYSTEM_DIR, DATA_SEG, "", 0, 0, mca_data_seg_ptr, code);
	     if mca_data_seg_ptr = null () then do;
		a_code = code;
		return;
	     end;
						/* New segment init the data that will be needed */

	     mca_data_seg.version = MCA_data_version_1;	/* Set correct version */
	     do i = 1 to 4;
		mca_data_seg.array (i).state = MCA_NOT_CONFIGURED;
		mca_data_seg.array (i).lock = "0"b;
		mca_data_seg.array (i).name = substr ("abcd", i, 1);
		mca_data_seg.array (i).imu_number = i;
	     end;

/* Lock MCA input through the console. NOTE: Because we don't know which
   Console is the "Master" mca console, we will attempt to lock every
   configured console. */

	     call admin_gate_$ocdcm_reconfigure ("", LOCK_MCA_INPUT, code);
	end;

/* mark this MCA free */

	mca_data_seg.array (mca_index).state = MCA_FREE;

	a_code = 0;
	return;
%page;
%include mca_data;
%page;
%include opc_reconfig_options;
     end mca_init_;
