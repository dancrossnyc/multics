/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(85-09-09,Farley), approve(85-09-09,MCR6979),
     audit(86-01-17,CLJones), install(86-03-21,MR12.0-1033):
     Add IMU & MCA support
     also add no_protect and opr_int_available.
  2) change(88-03-12,Beattie), approve(88-05-31,MCR7864),
     audit(88-05-13,Brunelle), install(88-05-31,MR12.2-1046):
     Changed BEEP to ANNOUNCE for error messages during tape handler survey.
                                                   END HISTORY COMMENTS */

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend */

rcp_init:
     procedure;

/*	This is a system initialization procedure.  It initializes the
   *	RCP data base, rcp_data.  This procedure must be called sometime
   *	after ioi_init is called.
   *
   *	Created on 09/11/74 by Bill Silver.
   *	Changed on 03/24/76 by Bill Silver for NSS I/O disks.
   *	Modified on 01/20/77 by Noel I. Morris for multiple tape controllers.
   *	Modified on 03/05/77 by Bernard S. Greenberg for static "AC/DC" disks.
   *	Modified on 09/19/77 by R.J.C. Kissel to increase default workspace sizes.
   *	Modified on 04/28/78 by Michael R. Jordan for preloaded volumes and reservation software.
   *	Modified on 01/29/79 by Michael R. Jordan for MSS0500 subsystem.
   *	Modified 1/80 by Michael R. Jordan for MSU0501 subsystem.
   *	Modified April, 1981, Chris Jones, for io_manager conversion, etc.
   *	Modified 7/81 by M.R. Jordan to change to console model numbers and add CSU6601 support.
   *	Modified 5/82 by E. N. Kittlitz to increase URC device max-timeout for EURC.
   *	Modified February 1982 by C. Hornig to move to ring 1.
   *	Modified 09/20/82 by Chris Jones to increase tape drive max timeout so data security erase can finish, and
   *	     to increase default workspace size for tapes from 3 to 6 pages.
   *	Modified 830927 for multiple console cards... -E. A. Ranzenbach
   *      Modified 840415 to call IOI during automatic device deletion... C. L. Jones
   *      Modified 841024 to set state according to io_config_data... M. M. Pozzo
   *	Modifed 841213 to add IMU/MCA support.. Paul Farley
   *	Modifed 850213 to add no_protect and opr_int_available code.. Paul Farley
*/

/*		AUTOMATIC  DATA			*/

dcl  1 drive_name,					/* Used to generate tape and disk drive names. */
       2 dtype char (5),
       2 number pic "99";

dcl  1 prph_mca_card like prph_card;			/* Fake out a prph card for the MCA used for IMUs */

dcl  last_ptrs (8) ptr;				/* Ptr to last device entry for each device type. */

dcl  qualifiers (4) fixed bin;			/* Device qualifiers. */

dcl  device_len fixed bin;				/* Number of bits in a device entry. */
dcl  device_name char (8);				/* Unique physical device name. */
dcl  dtypex fixed bin;				/* Device type index. */
dcl  drive_num fixed bin;				/* Tape and disk drive numbers. */
dcl  ecode fixed bin (35);				/* Standard error_table_ code. */
dcl  (i, j) fixed bin;				/* Work indexes. */
dcl  model fixed bin;				/* Model field from prph card. */
dcl  modelx fixed bin;				/* MODELX from fs_dev_types */
dcl  num_channels fixed bin;				/* Number of channels for each device. */
dcl  num_drives fixed bin;				/* Number of disk devices for RCP to control. */
dcl  num_qualifiers fixed bin;			/* Number of device qualifiers. */
dcl  pairx fixed bin;				/* PRPH DSKx card pair index. */
dcl  prph_name char (3);				/* Prph card device type name. */
dcl  pvtx fixed bin;
dcl  rcs_size fixed bin;				/* Total size of RCS. */
dcl  reservable_flag bit (1);				/* ON => device reservable to system processes. */
dcl  save_dtypex fixed bin;				/* Temporary to save device type index. */
dcl  starting_time fixed bin (71);			/* Time metering started. */
dcl  fips bit (1);					/* used to see if we are FIPS or not		*/


/*		INTERNAL STATIC DATA	*/


dcl  special_dtypex fixed bin				/* Device type index for special devices. */
	static options (constant) init (7);

dcl  ws_maxs (8) fixed bin				/* IOI workspace limits in pages. */
	static options (constant) init (6, 2, 1, 1, 1, 1, 1, 1);

dcl  ws_pmaxs (8) fixed bin				/* Privileged IOI workspace limits. */
	static options (constant) init (44, 44, 44, 44, 44, 44, 44, 44);

dcl  to_maxs (8) fixed bin				/* IOI time-out limits in seconds. */
	static options (constant) init (420, 1, 180, 60, 60, 60, 240, 240);

dcl  histo_times (8, 3) fixed bin			/* Time intervals in minutes. */
	static options (constant) init (2, 5, 30,	/* TAPE */
	2, 5, 30,					/* DISK */
	2, 5, 30,					/* CONSOLE */
	5, 30, 120,				/* PRINTER */
	5, 20, 60,				/* PUNCH */
	5, 20, 60,				/* READER */
	2, 5, 30,					/* SPECIAL */
	2, 5, 30);				/* MCA */

dcl  prph_names (8) char (3)				/* Device type names on prph cards. */
	static options (constant) init ("tap", "dsk", "opc", "prt", "pun", "rdr", "spc", "mca");

dcl  sys_directory char (32)				/* Directory  used to define a system process. */
	static options (constant) init (">system_library_1");

dcl  sys_acs char (32)				/* Entry name used to define a system process. */
	static options (constant) init ("rcp_sys_");

dcl  acs_directory char (32)				/* Directory containing device ACSs. */
	static options (constant) init (">system_control_1>rcp");

dcl  rb (3) fixed bin (6)				/* Ring brackets for rcp_data */
	static options (constant) init (1, 1, 1);


/*		EXTERNAL ENTRIES CALLED	*/

dcl  (addr, divide, hbound, null, ptr, rel, rtrim, size, string, substr, fixed, clock) builtin;

dcl  sys_info$max_seg_size fixed bin (35) external;

dcl  admin_gate_$ioi_delete_device entry (char (*), fixed bin (35));
dcl  config_$find entry (char (4) aligned, ptr);
dcl  config_$find_2 entry (char (4) aligned, char (4) aligned, ptr);
dcl  get_max_authorization_ entry () returns (bit (72) aligned);
dcl  hcs_$append_branchx
	entry (char (*), char (*), fixed bin (5), (3) fixed bin (6), char (*), fixed bin, fixed bin, fixed bin,
	fixed bin (35));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  hphcs_$syserr entry options (variable);
dcl  hphcs_$syserr_error_code entry options (variable);
dcl  initializer_gate_$ss_io_reconfigure entry (fixed bin, bit (1) aligned, fixed bin (35));
dcl  rcp_tape_survey_ entry (char (*), fixed bin, bit (1) aligned, bit (1) aligned, (4) fixed bin (35), fixed bin (35));
dcl  resource_info_$limits entry (char (*), fixed bin, fixed bin, fixed bin, fixed bin (35));
dcl  system_privilege_$reclassify_sys_seg entry (char (*), char (*), bit (72) aligned, fixed bin (35));
dcl  mca_init_ entry (fixed bin (3), fixed bin (35));

/*		BASED  DATA		*/

dcl  based_device bit (device_len) based (device_ptr) aligned;


%page;
/*	Begin  rcp_init.
*/
	pvtp = addr (pvt$);
	pvt_arrayp = addr (pvt.array);

/* Get pointer to io_config_data device table */
	io_config_data_ptr = addr (io_config_data$);
	io_config_device_table_ptr = ptr (io_config_data_ptr, device_table_offset);

	call hcs_$append_branchx (sys_directory, "rcp_data", RW_ACCESS_BIN, rb, "*.*.*", 0, 0, 0, ecode);
	if ecode ^= 0 then goto MAKE_RCPD;
	call hcs_$initiate (sys_directory, "rcp_data", "", 0, 1, rcpd_ptr, ecode);
	if rcpd_ptr = null () then go to MAKE_RCPD;
	call system_privilege_$reclassify_sys_seg (sys_directory, "rcp_data", get_max_authorization_ (), ecode);
	if ecode ^= 0 then goto RECLASSIFY_RCPD;

	starting_time = clock ();			/* Same starting time for both segments. */

/*	Initialize the header info in RCPD.
*/
	lock_info_ptr = addr (rcpd.lock_info);		/* Initialize lock metering data. */
	call INIT_LOCK_INFO;

	rcpd.tot_dtypes = hbound (device_types, 1);
	rcpd.unload_sleep_time = 1000000;		/* Sleep for at most 1 sec. */

	do dtypex = 1 to hbound (device_types, 1);	/* Set up data for each device type. */
	     dtype_ptr = addr (rcpd.dtype (dtypex));	/* Get pointer to device type entry. */
	     dtype.device_type = device_types (dtypex);	/* Set up device type. */
	     do i = 1 to 3;				/* Set up device type histogram data in seconds. */
		dtype.histo_times (i) = histo_times (dtypex, i) * 60;
	     end;
	     last_ptrs (dtypex) = null ();
	end;

/*	Look at each prph card in the configuration deck.
*/
	prph_cardp = null ();			/* Start with first prph card. */
	do while ("1"b);
	     call config_$find (PRPH_CARD_WORD, prph_cardp);
						/* Get next prph card. */
	     if prph_cardp = null ()			/* Have we processed all prph cards? */
	     then goto END_OF_CARDS;			/* Yes. */
	     call PROCESS_PRPH_CARD;			/* Process this one prph card. */
	end;

END_OF_CARDS:					/* All prph cards processed OK. */
						/* Look at each iom card in the configuration deck, for IMUs.
						   Fake a prph card for mca incase we find an IMU */
	prph_mca_card.word = PRPH_CARD_WORD;
	prph_mca_card.chan = 3;
	prph_mca_card.model = 0;
	prph_cardp = addr (prph_mca_card);
	iom_cardp = null ();

	call config_$find (IOM_CARD_WORD, iom_cardp);	/* Start with first iom card. */
	do while (iom_cardp ^= null ());
	     if iom_card.model = "imu" | iom_card.model = "iioc" then do;
						/* Found an IMU so set up the data segment and process the fake prph card */
		call mca_init_ (iom_card.tag, ecode);
		if ecode ^= 0 then goto INIT_MCA_ERROR;
		prph_mca_card.iom = iom_card.tag;
		prph_mca_card.name = "mca" || substr ("abcd", iom_card.tag, 1);
		call PROCESS_PRPH_CARD;
		end;
	     call config_$find (IOM_CARD_WORD, iom_cardp);/* Get next iom card. */
	end;

	do dtypex = 1 to hbound (device_types, 1);	/* Set max concurrent limits. */
	     dtype_ptr = addr (rcpd.dtype (dtypex));	/* Get pointer to device type entry. */
	     if dtype.max_concurrent = 0		/* Unspecified => limit = num of devices of this type. */
	     then dtype.max_concurrent = dtype.num_devices;
	end;

/*	Now that we know the number of devices that use volumes we can
   *	initialize the array of volume entries.
*/
	do i = 1 to rcpd.last_volume;			/* Initialize each volume entry. */
	     volume_ptr = addr (rcpd.volume (i));
	     volume.volume_name = " ";
	     volume.group_id = "";
	     volume.reserved_by = "";
	     volume.state_time = starting_time;
	end;

	rcpd.tot_volumes =
	     divide ((sys_info$max_seg_size - fixed (rel (addr (rcpd.volume (1))), 18)), size (volume), 18, 0);

/*	Now initialize the RCP communications segment, rcp_com_seg.
   *	We must set up the list of free request entries.
*/
	call hcs_$append_branchx (sys_directory, "rcp_com_seg", RW_ACCESS_BIN, rb, "*.*.*", 0, 0, 0, ecode);
	if ecode ^= 0 then goto MAKE_RCS;
	call hcs_$initiate (sys_directory, "rcp_com_seg", "", 0, 1, rcs_ptr, ecode);
	if rcs_ptr = null () then goto MAKE_RCS;
	call system_privilege_$reclassify_sys_seg (sys_directory, "rcp_com_seg", get_max_authorization_ (), ecode);
	if ecode ^= 0 then goto RECLASSIFY_RCS;

	lock_info_ptr = addr (rcs.lock_info);		/* Initialize lock metering data. */
	call INIT_LOCK_INFO;

	do i = 1 to hbound (device_types, 1);		/* Save IOI device type limits in RCS. */
	     rcs.ws_maxs (i) = ws_maxs (i) * 1024;
	     rcs.ws_pmaxs (i) = ws_pmaxs (i) * 1024;
	     rcs.to_maxs (i) = to_maxs (i) * 1000000;
	end;

	rcs.sys_directory = sys_directory;		/* Fill in access control directory and entry names. */
	rcs.sys_acs = sys_acs;
	rcs.acs_directory = acs_directory;

	rcs_size = sys_info$max_seg_size;
	rcs.max_entries = divide ((rcs_size - size (rcs)), size (rcse), 17, 0);
	rcs.num_entries = rcpd.tot_devices * 2;		/* Start with 2 entries per device. */

	rcs.first_free_off = rel (addr (rcs.entry (1)));
	do i = 1 to rcs.num_entries;			/* Initialize each entry to be free. */
	     rcse_ptr = addr (rcs.entry (i));		/* Get pointer to entry. */
	     rcse.state_time = clock ();		/* Time entry initialized. */
	     rcse.free_off = rel (addr (rcs.entry (i + 1)));
	end;
	addr (rcs.entry (rcs.num_entries)) -> rcse.free_off = "0"b;

	call hcs_$terminate_noname (rcpd_ptr, ecode);
	call hcs_$terminate_noname (rcs_ptr, ecode);

	return;					/* All device types initialized OK. */

MAKE_RCPD:
	call hphcs_$syserr_error_code (CRASH, ecode, "rcp_init: Trying to create rcp_data");

RECLASSIFY_RCPD:
	call hphcs_$syserr_error_code (CRASH, ecode, "rcp_init: Trying to reclassify rcp_data");

MAKE_RCS:
	call hphcs_$syserr_error_code (CRASH, ecode, "rcp_init: Trying to create rcp_com_seg");

RECLASSIFY_RCS:
	call hphcs_$syserr_error_code (CRASH, ecode, "rcp_init: Trying to reclassify rcp_com_seg");

INIT_MCA_ERROR:
	call hphcs_$syserr_error_code (CRASH, ecode, "rcp_init: Trying to init mca_data.");
%page;
PROCESS_PRPH_CARD:
     procedure;

/*	We will take the name from the prph card and see if it matches one of
   *	the device types we know.  If it does we will go to a routine that
   *	knows how to process that device type.  If it does not belong to a type
   *	of device that we know then we will ignore it.
*/
	prph_name = substr (prph_card.name, 1, 3);	/* Get device type name. */
	do dtypex = 1 to hbound (device_types, 1);	/* Check all device type names. */
	     if prph_name = prph_names (dtypex)		/* Do we know this device type? */
	     then goto PRPH_CARD_OK;
	end;
	dtypex = special_dtypex;			/* Treat unknown as special device. */

PRPH_CARD_OK:					/* This is a device type that we know about. */
	dtype_ptr = addr (rcpd.dtype (dtypex));		/* Pointer to device type info. */
	device_name = prph_card.name;			/* Device type is prph card name. */
	reservable_flag = "0"b;			/* Assume device is not reservable. */
	model = prph_card.model;			/* Set up default qualifiers. */
	num_channels = 1;				/* Assume only one channel. */
	num_qualifiers = dtype_num_qualifiers (dtypex);
	fips = IS_FIPS_DEVICE ();
	goto DTYPE (dtypex);			/* Process prph card depending upon device type. */

DTYPE (1):					/* TAPE */
	call INIT_TAPES;				/* Special case tapes. */
	return;

DTYPE (2):					/* DISK */
	call INIT_DISKS;				/* Special case disks. */
	return;

DTYPE (3):					/* CONSOLE */
	prph_opc_cardp = prph_cardp;
	device_name = prph_opc_card.name;
	model = prph_opc_card.model;
	call INIT_DEVICE ();
	return;

DTYPE (4):					/* PRINTER */
	prph_prt_cardp = prph_cardp;
	qualifiers (1) = prph_prt_card.train;		/* Print train type. */
	qualifiers (2) = prph_prt_card.line_length;
	call INIT_DEVICE;				/* Set up device entry. */
	return;

DTYPE (5):					/* PUNCH */
DTYPE (6):					/* READER */
DTYPE (7):					/* SPECIAL */
DTYPE (8):					/* MCA */
	call INIT_DEVICE;				/* These device types processed the same way. */
	return;					/* Just set up the device entry. */

     end PROCESS_PRPH_CARD;
%page;
INIT_TAPES:
     procedure;

/*	This procedure will process the "tapX" prph card.  All tapX drives wlll
   *	be defined from this one card.  In addition, the special type device
   *	"tapX_00" will be defined, unless its a FIPS, then tapX is the special.
*/
	prph_tap_cardp = prph_cardp;

	call resource_info_$limits ("tape_drive", dtype.max_concurrent, (0), (0), ecode);
	if dtype.max_concurrent < 0 then dtype.max_concurrent = 0;

	if fips
	then device_name = substr (device_name, 1, 4);	/* FIPS controllers don't have a "_00"		*/
	else device_name = substr (device_name, 1, 4) || "_00";
						/* but non-FIPS do				*/
	call INIT_SPECIAL;				/* Set up special tape pseudo device. */

	drive_name.dtype = substr (device_name, 1, 4) || "_";
						/* Now set up the real tape drives. */
	if fips
	then drive_num = -1;			/* FIPS devices start at zero			*/
	else drive_num = 0;
	do pairx = 1 to hbound (prph_tap_card.group, 1);
	     num_drives = prph_tap_card.group (pairx).ndrives;
	     model = prph_tap_card.group (pairx).model;
	     if model = -1 then return;
	     if num_drives = -1 then goto NO_NDRIVES;

	     do j = 1 to num_drives;
		drive_num = drive_num + 1;
		if model ^= 0 then do;
		     call INIT_TAPE;
		     rcpd.last_volume = rcpd.last_volume + 1;
		     end;
	     end;
	end;

	return;

NO_NDRIVES:
	call hphcs_$syserr (ANNOUNCE,
	     "rcp_init:  ndrives not specified with last model number for PRPH ^a.  Assuming 0.", prph_tap_card.name);

     end INIT_TAPES;
%page;
INIT_TAPE:
     procedure;

dcl  tape_found bit (1) aligned;

/*	This procedure is called to initialize one tape drive
*/

	drive_name.number = drive_num;		/* Use picture conversion. */
	device_name = string (drive_name);

	reservable_flag = "1"b;
	call INIT_DEVICE;
	call rcp_tape_survey_ (substr (device_name, 1, 4), drive_num, (fips), tape_found, device.qualifiers, ecode);
	if ecode ^= 0 then call hphcs_$syserr_error_code (ANNOUNCE, ecode, "rcp_init: Error surveying ^a.", device_name);
	if ((^tape_found) | (DEVICE_DELETED (device_name))) then do;
	     call hphcs_$syserr (ANNOUNCE, "rcp_init: ^a deleted.", device_name);
	     call admin_gate_$ioi_delete_device (device_name, (0));
	     device.state = 2;			/* DELETED */
	     end;
	return;

     end INIT_TAPE;
%page;
INIT_DISKS:
     procedure;

/*	This procedure will create rcp_data entries for all controllers
   *	and drives in the system, usurp from the storage system all those
   *	specified on an applicable UDSK card, and delete all the others,
   *	pendant dynamic RCP/SS reconfiguration. */

dcl  i fixed bin;

	prph_dsk_cardp = prph_cardp;

	udsk_cardp = null ();
	call config_$find_2 ("udsk", prph_dsk_card.name, udsk_cardp);

	drive_name.dtype = prph_dsk_card.name || "_";	/* Set up disk device name. */
	drive_name.number = 0;			/* "dskX_00" */
	if fips
	then device_name = prph_dsk_card.name;
	else device_name = string (drive_name);
	model = 0;				/* Model number not used for special devices.	*/
	call INIT_SPECIAL;				/* Init "dskX_00" or dskX as a special device.	*/
						/* unless its FIPS, then dskX is special	*/

	if fips
	then drive_num = -1;
	else drive_num = 0;

	do pairx = 1 to hbound (prph_dsk_card.group, 1);	/* Process each set up drive pairs. */
	     num_drives = prph_dsk_card.group (pairx).ndrives;
	     model = prph_dsk_card.group (pairx).model;
	     if model = -1				/* (-1) => no drive pair specified. */
	     then return;				/* All done for this subsystem. */
	     if num_drives = -1			/* (-1) => no ndrives specified. */
	     then goto NO_NDRIVES;

	     modelx = 0;
	     do i = 2 to hbound (MODEL, 1) while (modelx = 0);
						/* skip bulk */
		if model = MODEL (i) then do;
		     modelx = MODELX (i);
		     model = MODELN (modelx);
		     end;
	     end;

	     if model ^= 0 then do;
		do j = 1 to num_drives;
		     drive_num = drive_num + 1;
		     drive_name.number = drive_num;
		     device_name = string (drive_name);
		     call INIT_DEVICE;
		     device.flags.not_removable_media = ^media_removable (modelx);
		     if fips then device.flags.no_protect = "1"b;
		     device.flags.opr_int_available = MPC_WITH_OI (prph_dsk_card.iom, prph_dsk_card.chan);
		     if (DEVICE_DELETED (device_name))
		     then device.state = 2;
		     else device.state = 3;		/* STORAGE SYSTEM */
		     if udsk_cardp ^= null () then call process_udsk;
		end;

		rcpd.last_volume = rcpd.last_volume + num_drives;
		end;
	     else drive_num = drive_num + num_drives;
	end;

	return;

NO_NDRIVES:
	call hphcs_$syserr (ANNOUNCE,
	     "rcp_init:  ndrives not specified with last model number for PRPH ^a.  Assuming 0.", prph_dsk_card.name);
	return;
%page;
process_udsk:
	procedure;

dcl  ux fixed bin;

	     do ux = 1 to hbound (udsk_card.group, 1);
		if (udsk_card.group (ux).drive ^= -1) & (udsk_card.group (ux).drive <= drive_num)
		     & ((udsk_card.group (ux).drive + udsk_card.group (ux).ndrives - 1) >= drive_num) then do;
		     do pvtx = 1 to pvt.max_n_entries;
			pvtep = addr (pvt_array (pvtx));
			if (pvte.devname = prph_dsk_card.name) & (pvte.logical_area_number = drive_num) then do;
			     if pvte.used | pvte.permanent then do;
				call hphcs_$syserr (CRASH, "rcp_init: ^a cannot be used for user I/O.",
				     device_name);
				return;
				end;
			     call initializer_gate_$ss_io_reconfigure (pvtx, "0"b, ecode);
			     if (DEVICE_DELETED (device_name))
			     then device.state = 2;
			     else device.state = 0;	/* FREE */
			     return;
			     end;
		     end;
		     end;
	     end;
	     return;
	end process_udsk;

     end INIT_DISKS;
%page;
INIT_SPECIAL:
     procedure;

/*	This procedure is called to set up a special type device for
   *	the tape or disk controller.
*/

	save_dtypex = dtypex;			/* Save real device type index. */
	dtypex = special_dtypex;			/* Get device type index for special devices. */
	dtype_ptr = addr (rcpd.dtype (dtypex));		/* Pointer to special device info. */
	num_qualifiers = 0;				/* No characteristics known about special devices. */

	call INIT_DEVICE;				/* Define a device. */

	dtypex = save_dtypex;			/* Restore original information. */
	dtype_ptr = addr (rcpd.dtype (dtypex));		/* Reset device type pointer */
	num_qualifiers = dtype_num_qualifiers (dtypex);

     end INIT_SPECIAL;
%page;
INIT_DEVICE:
     procedure;

/*	This procedure is called to initialize a device entry.
   *	It is called for each type of device.  Those fields that are
   *	only valid when the device is assigned or attached are not
   *	initialized.
*/

	do i = 1 to rcpd.tot_devices;			/* Test all devices defined so far. */
	     device_ptr = addr (rcpd.device (i));
	     if device.device_name = device_name then goto DUPLICATE_DEVICE;
	end;

	rcpd.tot_devices = rcpd.tot_devices + 1;	/* One new device added to list. */
	device_ptr = addr (rcpd.device (rcpd.tot_devices));

	if dtype.num_devices = 0			/* Is this the first device of this type? */
	then dtype.first_off = rel (device_ptr);
	else last_ptrs (dtypex) -> device.next_off = rel (device_ptr);

	last_ptrs (dtypex) = device_ptr;		/* Save pointer to this entry. */
	dtype.num_devices = dtype.num_devices + 1;

	device_len = size (device) * 36;		/* Get number of bits in device entry. */
	based_device = "0"b;			/* Zero device entry before initializing. */

	device.device_name = device_name;		/* Fill in entry. */
	device.volume_name = " ";			/* No volume now mounted. */
	device.dtypex = dtypex;
	device.model = model;			/* Save qualifying characteristics. */
	device.num_qualifiers = num_qualifiers;
	do i = 1 to num_qualifiers;
	     device.qualifiers (i) = qualifiers (i);
	end;
	device.state_time = clock ();			/* Time device initialized. */
	if (DEVICE_DELETED (device_name)) then device.state = 2;
	device.iom_num = prph_card.iom;
	device.chan_num = prph_card.chan;
	device.num_channels = num_channels;
	device.flags.reservable = reservable_flag;
	device.flags.fips = fips;
	device.group_id = " ";			/* So no name. */
	device.reservation_id = 0;			/* No reservation. */
	device.reserved_by = "";			/* Dito. */

	device.acs_name = rtrim (device_name) || ".acs";	/* Generate ACS name */

	return;

DUPLICATE_DEVICE:
	call hphcs_$syserr (CRASH, "rcp_init: Device ^a defined more than once", device_name);

     end INIT_DEVICE;
%page;
INIT_LOCK_INFO:
     procedure;

/*	This procedure is called to initialize the lock metering data.
*/
	lock_info.lock = "0"b;			/* Lock unlocked. */

	lock_info.num_locks,			/* Never has been locked. */
	     lock_info.num_lock_waits = 0;

	lock_info.tot_lock_time, lock_info.tot_wait_time = 0;

	lock_info.starting_time = starting_time;

     end INIT_LOCK_INFO;
%page;
DEVICE_DELETED:
     procedure (a_name) returns (bit (1));

/* local vars */
dcl  a_name char (*);
dcl  (found, deleted) bit (1) init ("0"b);
dcl  i fixed bin;

	do i = 1 to device_table.n_devices while (^found);
	     if device_entry (i).name = a_name then found = "1"b;
	end;

	if ^device_entry (i - 1).flags.configured then deleted = "1"b;

	return (deleted);
     end DEVICE_DELETED;
%page;
IS_FIPS_DEVICE:
     proc () returns (bit (1));

/*  This proc will look up the model in config_data_ for the
   dtypex checking for  device_0_valid */

dcl  i fixed bin;
dcl  groupx fixed bin;

	goto is_fips (dtypex);

is_fips (1):					/* TAPE */
	prph_tap_cardp = prph_cardp;
	do groupx = 1 to hbound (prph_tap_card.group, 1);
	     model = prph_tap_card.group (groupx).model;
	     if model ^= 0 then do;
		do i = 1 to config_data_$tape_drive_model_names.count;
		     if config_data_$tape_drive_model_names.names (i).model = model
		     then return (config_data_$tape_drive_model_names.names (i).device_0_valid);
		end;
		return ("0"b);
		end;
	end;
	return ("0"b);

is_fips (2):					/* DISK */
	prph_dsk_cardp = prph_cardp;
	do groupx = 1 to hbound (prph_dsk_card.group, 1);
	     model = prph_dsk_card.group (groupx).model;
	     if model ^= 0 then do;
		do i = 1 to config_data_$disk_drive_model_names.count;
		     if config_data_$disk_drive_model_names.names (i).model = model
		     then return (config_data_$disk_drive_model_names.names (i).device_0_valid);
		end;
		return ("0"b);
		end;
	end;
	return ("0"b);

is_fips (3):
is_fips (4):
is_fips (5):
is_fips (6):
is_fips (7):
is_fips (8):
	return ("0"b);
     end IS_FIPS_DEVICE;
%page;
MPC_WITH_OI:
     proc (a_iom, a_chan) returns (bit (1));

/*    If there is a mpc card for this device and it is not a DAU (MSP800)
   then we say it has an "Operator Interrupt" switch.
*/

dcl  a_iom fixed bin (3) parameter;
dcl  a_chan fixed bin (8) parameter;
dcl  i fixed bin;

	mpc_cardp = null ();
	do while ("1"b);
	     call config_$find (MPC_CARD_WORD, mpc_cardp);
	     if mpc_cardp = null () then return ("0"b);
	     do i = 1 to hbound (mpc_card.port, 1) while (mpc_card.port (i).iom ^= -1);
		if (a_iom = mpc_card.port (i).iom) & (a_chan >= mpc_card.port (i).chan)
		     & (a_chan < mpc_card.port (i).chan + mpc_card.port (i).nchan) then do;
		     if mpc_card.model = 800
		     then return ("0"b);
		     else return ("1"b);
		     end;
	     end;
	end;
	return ("0"b);
     end MPC_WITH_OI;
%page;
%include access_mode_values;
%include io_config_data;
%include config_deck;
%include config_data_dcls;
%include config_iom_card;
%include config_prph_card;
%include config_mpc_card;
%include config_prph_opc_card;
%include config_prph_prt_card;
%include config_prph_tap_card;
%include config_prph_dsk_card;
%include config_udsk_card;
%include fs_dev_types;
%include pvt;
%include pvte;
%include rcp_data;
%include rcp_com_seg;
%include rcp_device_types;
%include syserr_constants;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   rcp_init: Trying to create rcp_data ERRORMESSAGE

   S:	$crash

   T:	$init

   M:	$err

   A:	$recover


   Message:
   rcp_init: Trying to reclassify rcp_data ERRORMESSAGE

   S:	$crash

   T:	$init

   M:	$err

   A:	$recover


   Message:
   rcp_init: Trying to create rcp_com_seg ERRORMESSAGE

   S:	$crash

   T:	$init

   M:	$err

   A:	$recover


   Message:
   rcp_init: Trying to reclassify rcp_com_seg ERRORMESSAGE

   S:	$crash

   T:	$init

   M:	$err

   A:	$recover


   Message:
   rcp_init: Trying to init mca_data. ERRORMESSAGE

   S:	$crash

   T:	$init

   M:	$err

   A:	$recover


   Message:
   rcp_init: ndrives not specified with last model number for PRPH DDDD.  Assuming 0.

   S:	$info

   T:	$init

   M:	Detected a MODEL value at the end of PRPH card PPPP.  Each MODEL
   value should paired with an NDRIVE value.  The last model value will be
   assigned zero devices.  It is possible that there is another error elsewhere
   on this card to have caused this message.

   A:	$inform


   Message:
   rcp_init: Error surveying DDDD. ERRORMESSAGE

   S:	$info

   T:	$init

   M:	Attempted to access device DDDD but could not due to ERRORMESSAGE.

   A:	$inform


   Message:
   rcp_init: DDDD deleted.

   S:	$info

   T:	$init

   M:	Device DDDD could not be found or accessed and it will be deleted.

   A:	$inform


   Message:
   rcp_init: DDDD cannot be used for user I/O.

   S:	$crash

   T:	$init

   M:	An attempt was made to configure a device for user I/O which is being
   used by the system for system storage.

   A:	$recover


   Message:
   rcp_init: Device DEVICE defined more than once

   S:	$crash

   T:	$init

   M:	The configuration deck defines the device DEVICE more than once.

   A:	Perform an emergency shutdown, and correct the
   configuration deck.
   $recover


   END MESSAGE DOCUMENTATION */

     end rcp_init;
