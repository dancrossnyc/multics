/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(1986-05-13,GJohnson), approve(1986-05-13,MCR7387),
     audit(1986-05-13,Martinson), install(1986-05-14,MR12.0-1056):
     Correct error message documentation.
  2) change(1987-02-25,Farley), approve(1987-04-15,MCR7659),
     audit(1987-04-21,Fawcett), install(1987-04-28,MR12.1-1028):
     Corrected to call disk_table_$init before calling disk_table_$accept_rlv.
  3) change(2018-01-10,GDixon), approve(2018-01-10,MCR10037),
     audit(2018-01-12,Swenson), install(2018-01-12,MR12.6g-0001):
     Change system_startup_ to pass varying length arguments to called
     programs, instead of always passing char(32) arguments.
                                                   END HISTORY COMMENTS */

/* format: style2,indcomtxt */

/**** This procedure is the process overseer for the Multics initializer
      process.  The initializer starts out in ring 1.  Only a small set
      of commands are permitted primarily to allow a reload to take place.
      Once the reload is complete the standard process overseer for the
      initializer, "system_control_", is invoked in ring 4.

      Modified 1985-04-02, BIM: don't print error message if
      disk_table_$accept_rlv fails, because it prints plenty
      of messages. Don't run automatic salvage_dirs if root
      is not complete.
      Modified 85-03-27 by E. Swenson to add support for emergency listener.
      Modified 84-10-30 by EJ Sharpe to remove hvr_ declarations
      Modified 84-08-08 by EJ Sharpe to remove the volume registration
      commands: (add del change list)_volume_registration.
      Modified 84-02-02 BIM for amendments.
      Modified 831107 BIM to salvage crucial directories
      Modified August 1983 K. Loepere to change references to bce.
      Modified August 1983 K. Loepere to delete salv and force_pd_abandon
      commands.
      Modified 830529 BIM for error handler bugfixes.
      Modified May 1982 by E. N. Kittlitz to log config deck
      Modified March 1982 by J. Bongiovanni to rename >lv.root on NOLV
      Modified June 1981 by C. Hornig to flush bulk store.
      Modified April 1981 by Benson I. Margulies for IOX
      Modified April 1979 by B. Greenberg for NOLV/NODT boot card hacks.
      Modified Feb 1977 by D. Vinograd to add command for volume reloader.
      Modified Oct 75 for Nss by TVV
      Modified 750423 by T. Casey to add reload_system_release and
      reload_notrim, and delete update.
      Modified 741218 by PG to turn on soos, dir, and ipc privileges.
      "update" request added by RE Mullen Aug 1973
      Originally coded by R. J. Feiertag on March 25, 1971 */

system_startup_:
     procedure ();

	dcl     code		 fixed bin (35);
	dcl     (i, j)		 fixed bin;
	dcl     SC1		 char (168) init (">system_control_1") internal static;
						/* one wdir is as good as an other */
	dcl     ME		 character (32) init ("system_startup_") internal static options (constant);

	dcl     test_dir		 char (*) parameter;
	dcl     l			 fixed bin (21);	/* length of input command */
	dcl     1 local_status_branch	 aligned like status_branch;
	dcl     1 local_salv_args	 aligned like salv_args;
	dcl     vcommand		 character (80) varying;
	dcl     entry_var		 entry variable options (variable);
						/* arg to caller */

	dcl     nosc_parameter	 bit (1) aligned;
	dcl     buffer		 char (120) unaligned;
						/* Typewriter input buffer */
	dcl     IOX_up		 bit (1) aligned init ("0"b);
	dcl     disk_table_ok	 bit (1) aligned;

	dcl     init		 bit (1) internal static init ("0"b);
						/* have we been initialized */
	dcl     rings		 (3) fixed bin (3) int static init (7, 7, 7);
	dcl     debug		 bit (1) internal static init ("0"b);
	dcl     level		 fixed bin int static init (0);


	dcl     active_all_rings_data$initializer_tty
				 ext char (32),	/* id of initializer console */
	        active_all_rings_data$initializer_dim
				 ext char (32),
	        active_all_rings_data$system_id
				 ext char (32);

	dcl     error_table_$long_record
				 fixed bin (35) ext static;

	dcl     (
	        system_privilege_$soos_priv_on,
	        system_privilege_$dir_priv_on,
	        system_privilege_$ring1_priv_on,
	        system_privilege_$ipc_priv_on
	        )			 entry (fixed bin (35));

	dcl     get_system_free_area_	 entry returns (ptr);
	dcl     (get_temp_segments_, release_temp_segments_)
				 entry (character (*), (*) pointer, fixed binary (35));
	dcl     hcs_$quota_read	 entry (char (*), fixed bin (18), fixed bin (71), bit (36) aligned, bit (36),
				 fixed bin (1), fixed bin (18), fixed bin (35));
	dcl     hcs_$status_	 entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
	dcl     hcs_$history_regs_set	 entry (bit (1) aligned);
	dcl     hphcs_$salv_directory	 entry (ptr, char (*) var, ptr, fixed bin, fixed bin (35));
	dcl     sct_manager_$set	 entry (fixed bin, entry, fixed bin (35));
	dcl     timer_manager_$alarm_interrupt
				 entry;
	dcl     timer_manager_$cpu_time_interrupt
				 entry;
	dcl     call_outer_ring_	 entry (pointer, char (*), char (*), fixed bin (3), fixed bin (35));
	dcl     disk_table_$accept	 entry options (variable);
	dcl     disk_table_$general_mhv
				 entry (fixed bin (35));
	dcl     disk_table_$mount_hvol entry options (variable);
	dcl     disk_table_$list	 entry options (variable);
	dcl     iload		 entry options (variable);
	dcl     iload$system_release	 entry options (variable);
	dcl     disk_table_$remove	 entry options (variable);
	dcl     disk_table_$demount_hvol
				 entry options (variable);
	dcl     disk_table_$reregister entry options (variable);
	dcl     salv_caller$packsalv	 entry options (variable);
	dcl     salv_caller$rbld_disk	 entry options (variable);
	dcl     disk_table_$initialize_disk
				 entry options (variable);
	dcl     reload_volume	 entry options (variable);
	dcl     end_reload_volume	 entry options (variable);
	dcl     display_volume_log	 entry options (variable);
	dcl     disk_table_$io_ss_reconfig
				 entry options (variable);
	dcl     recover_volume_log	 entry options (variable);
	dcl     date_time_$format	 entry (char (*), fixed bin (71), char (*), char (*))
				 returns (char (250) varying);
	dcl     ioa_		 entry options (variable);
	dcl     ioa_$nnl		 entry options (variable);
	dcl     ioa_$rsnnl		 entry options (variable);
	dcl     com_err_		 entry options (variable);
	dcl     com_err_$suppress_name entry options (variable);
	dcl     condition_		 entry (char (*), entry);
	dcl     iox_$init_standard_iocbs
				 entry;
	dcl     disk_table_$accept_rlv entry (fixed bin (35));
	dcl     disk_table_$init	 entry (fixed bin (35));
	dcl     get_group_id_	 entry returns (char (32));
	dcl     hcs_$append_branchx	 entry (char (*), char (*), fixed bin (5), (3) fixed bin (3), char (*), fixed bin,
				 fixed bin, fixed bin, fixed bin (35));
	dcl     hcs_$chname_file	 entry (char (*), char (*), char (*), char (*), fixed bin (35));
	dcl     hcs_$fs_search_set_wdir
				 entry (char (*), fixed bin (35));
	dcl     hphcs_$call_bce	 entry;
	dcl     hphcs_$shutdown	 entry;
	dcl     hphcs_$syserr	 entry options (variable);
	dcl     hphcs_$syserr_error_code
				 entry options (variable);
	dcl     hphcs_$syserr_binary	 entry options (variable);
	dcl     rcp_init		 entry;
	dcl     rcp_reconfigure_$delete_device
				 entry (char (*), fixed bin (35));
	dcl     rcp_reconfigure_$add_device
				 entry (char (*), fixed bin (35));
	dcl     timer_manager_$sleep	 entry (fixed bin (71), bit (2));
	dcl     unique_chars_	 entry (bit (*)) returns (char (15));


	dcl     (addr, after, before, clock, codeptr, currentsize, divide, hbound, length, ltrim, max, min, null,
	        pointer, rtrim, size, substr, sum, unspec)
				 builtin;
	dcl     stringsize		 condition;
%page;

/* Program */

	call condition_ ("any_other", error);		/* find_condition_info_ aint on the tape */
	call sct_manager_$set (cput_sct_index, timer_manager_$cpu_time_interrupt, code);
	call sct_manager_$set (alrm_sct_index, timer_manager_$alarm_interrupt, code);

	call system_privilege_$soos_priv_on (code);	/* Turn on scodeurity-out-of-service privilege */
	call system_privilege_$dir_priv_on (code);	/* Turn on directory privileges */
	call system_privilege_$ring1_priv_on (code);	/* turn on ring 1 privileges */
	call system_privilege_$ipc_priv_on (code);	/* Turn on ipc privileges */
						/* code indicates if on previously, ignore */
	call hcs_$history_regs_set ("1"b);		/* save hregs */

	code = 0;

	if init
	then go to read_command;			/* if restart, skip initialization */

	call rcp_init;

	call iox_$init_standard_iocbs;
	call iox_$attach_ptr (iox_$user_io,
	     active_all_rings_data$initializer_dim || " " || active_all_rings_data$initializer_tty,
	     codeptr (system_startup_), code);
	if code ^= 0
	then call die ();

	call iox_$open (iox_$user_io, Stream_input_output, ""b, code);
	if code ^= 0
	then call die ();

test_entry:
     entry ();

	IOX_up = "1"b;

/* Obtain the first operator command from the BOOT command arguments */

	call get_config_size ();
	call log_configuration ();

	vcommand = "";
	nosc_parameter = "0"b;

	do i = 1 to config_n_cards while (vcommand = "");

	     if cards (i).word = INTK_CARD_WORD
	     then do;
		     intk_cardp = addr (config_deck.cards (i));
		     do j = 1 to hbound (intk_card_array.parms, 1);

			if intk_card.parms (j) = "nodt"
			then call root_rename ("disk_table");
			else if intk_card.parms (j) = "nolv"
			then call nolv_request;
			else if intk_card.parms (j) = "nosc"
			then nosc_parameter = "1"b;
			else vcommand = vcommand || intk_card.parms (j) || " ";
		     end;
		end;
	end;

	code = 0;
	call disk_table_$init (code);			/* Turn on the ring 1 storage system */
	if code = 0
	then disk_table_ok = "1"b;
	else disk_table_ok = "0"b;
	pvtp = addr (pvt$);
	if pvt.rlv_needs_salv & ^pvt.rpvs_requested	/* suppress for rpvs */
	then do;
		call disk_table_$accept_rlv (code);
		if code = 0
		then call salvage_dirs;		/* for speed. */
		else call com_err_ (0, ME,
			"The root logical volume is not complete. ""boot rlvs"" level 2 directory salvage aborted.")
			;
	     end;

	call hcs_$append_branchx (">", "system_control_1", 01011b, rings, get_group_id_ (), 1, 0, (0), (0));

	call hcs_$fs_search_set_wdir (SC1, (0));	/* set default value */

	call ioa_ ("Multics ^a - ^a", active_all_rings_data$system_id,
	     date_time_$format ("date_time", clock (), "", ""));

	init = "1"b;				/* initialization is complete */
	if disk_table_ok
	then do;					/* If disk table looks OK */
		if vcommand ^= ""
		then call exec (rtrim (vcommand));	/* do command ONLY if all is cool */
	     end;

	goto read_command;				/* Command processor loop */

read_command_entry:
     entry ();
	call condition_ ("any_other", error);		/* set it for this frame */
	goto read_command;
read_command_return:
	return;
read_command:
	do while ("1"b);
	     call ioa_$nnl ("^[Level ^d;  ^]Command: ", level ^= 0, level);
						/* Prompt for command. */
	     call iox_$get_line (iox_$user_io, addr (buffer), length (buffer), l, code);

	     if code = error_table_$long_record
	     then call com_err_ (code, ME, "Input line too long for command buffer.");
	     else if code ^= 0
	     then do;
		     call hphcs_$syserr_error_code (CRASH, code, "^a: Could not read command line.", ME);
		     call hphcs_$call_bce;		/* I MEANT THAT 1 */
		end;
	     else do;
		     l = l - 1;			/* throw away new line */
		     call exec (substr (buffer, 1, l));
		end;
	end;
%page;
exec:
     proc (buf);					/* This procedure is nonquick, it has a dependent string declaration */

	dcl     buf		 character (*);
	dcl     work_string		 character (length (buf)) varying;
	dcl     command		 character (32) varying;
	dcl     arg		 (0:20) char (32);
          dcl     argl		 (0:20) fixed bin;
	dcl     an		 fixed bin;
	dcl     varg		 char(32) varying;

	an = -1;					/* begin with no command, no arguments. */

	work_string = buf;
	do while (work_string ^= "");
	     work_string = ltrim (work_string);		/* leading blanks go away */
	     an = an + 1;				/* count command/args as we find them.  */
	     if an > hbound (arg, 1)
	     then do;
		     call ioa_ ("Too many arguments supplied. ^d is the maximum.", hbound (arg, 1));
		     return;
		end;
	     on stringsize
		begin;
		     call ioa_ ("Token longer than 32 characters: ^a.", before (work_string, " "));
		     go to exec_return;
		end;
(stringsize):
	     varg = before (work_string, " ");		/* trailing blanks go away */
	     revert stringsize;
	     arg (an) = varg;			/* record command or argument value */
	     argl(an) = length(varg);			/* record argument length  */
	     work_string = after (work_string, " ");
	end;
	if an = -1				/* no command, so nothing to invoke. */
	then
exec_return:
	     return;

	command = substr(arg(0),1,argl(0));

	do i = 1 to hbound (command_abbrev, 1) while (command ^= command_abbrev (i));
	end;
	if i > hbound (command_abbrev, 1)
	then do;
		do i = 1 to hbound (command_list, 1) while (command ^= command_list (i));
		end;
		if i > hbound (command_list, 1)
		then do;
			call ioa_ ("^a: ^a is not a legal command. Type help for a list of commands.", ME, command);
			return;
		     end;
	     end;
	command = command_list (i);			/* Expand abbrev */

	do j = 1 to hbound (check_commands, 1);
	     if check_commands (j) = command & ^(nosc_parameter & command = "standard")
						/* special case "boot stan nosc" */
	     then do;
		     code = 0;
		     call disk_table_$accept_rlv (code);/* prints error messages */
		     if code ^= 0
		     then go to read_command;
		end;
	end;
	go to handle (i);

handle (1):					/* "add_vol" command */
	entry_var = disk_table_$accept;
	call caller ();
	return;

handle (2):					/* "bce" command */
	call hphcs_$call_bce;
	return;

handle (3):					/* "list_disks" command */
	entry_var = disk_table_$list;
	call caller ();
	return;

handle (4):					/* "multics" command */
	call shutdown_iox;				/* this is in ring 1, so it is not crucial */
	call call_out ("multics_entry");
	return;

handle (5):					/* "reload" command */
	code = 0;
	call disk_table_$general_mhv (code);
	if code ^= 0
	then do;
		call com_err_ (0, ME, "Will not reload");
		return;
	     end;
	entry_var = iload;
	call caller ();
	return;

handle (6):					/* "del_lv" command */
	entry_var = disk_table_$demount_hvol;
	call caller ();
	return;

handle (7):					/* "reload_system_release" command */
	entry_var = iload$system_release;
	call caller ();
	return;

handle (8):					/* "del_vol" command */
	entry_var = disk_table_$remove;
	call caller ();
	return;

handle (9):					/* "shutdown" command */
	call hphcs_$shutdown;
	return;

handle (10):					/* "standard" command */
	call shutdown_iox;
	call call_out ("system_control_");		/* call standard process overseer */
	return;

handle (11):					/* "reregister" command */
	entry_var = disk_table_$reregister;
	call caller ();
	return;

handle (12):					/* "startup" command */
	call shutdown_iox;
	call call_out ("startup_entry");		/* call standard process overseer */
	return;

handle (13):					/* "salvage_vol" command */
	entry_var = salv_caller$packsalv;
	call caller ();
	return;

handle (14):					/* "init_vol" command */
	entry_var = disk_table_$initialize_disk;
	call caller ();
	return;

handle (15):					/* "add_lv" command */
	entry_var = disk_table_$mount_hvol;
	call caller ();
	return;

handle (16):					/* "help" command */
	do i = 1 to hbound (command_list, 1);
	     if command_abbrev (i) ^= ""
	     then call ioa_ ("^a (^a)", command_list (i), command_abbrev (i));
	     else call ioa_ ("^a", command_list (i));
	end;
	call ioa_ ("");
	return;

handle (17):					/* "addd" command */
	call rcp_reconfigure_$add_device (arg (1), code);
	return;

handle (18):					/* "deld" command */
	call rcp_reconfigure_$delete_device (arg (1), code);
	return;

handle (19):					/* rebuild_disk command */
	entry_var = salv_caller$rbld_disk;
	call caller ();
	return;

handle (20):					/* reload_volume command */
	entry_var = reload_volume;
	call caller ();
	return;

handle (21):					/* end_reload_volume command */
	entry_var = end_reload_volume;
	call caller ();
	return;

handle (22):					/* recover_volume_log command */
	entry_var = recover_volume_log;
	call caller ();
	return;

handle (23):					/* debug command */
	debug = "1"b;
	return;

handle (24):					/* release command */
	if level > 0
	then do;
		level = level - 1;
		goto read_command_return;
	     end;
	else do;
		call ioa_ ("At top of stack");
		return;
	     end;

handle (25):					/* display_volume_log command */
	entry_var = display_volume_log;
	call caller ();
	return;

handle (26):					/* set_drive_usage command */
	entry_var = disk_table_$io_ss_reconfig;
	call caller ();
	return;

handle (27):					/* salvage_dirs command */
	entry_var = salvage_dirs;
	call caller ();
	return;

	dcl     command_list	 (27) char (32) varying internal static options (constant)
				 init ("add_vol", "bce", "list_disks", "multics", "reload", "del_lv",
				 "reload_system_release", "del_vol", "shutdown", "standard", "reregister",
				 "startup", "salvage_vol", "init_vol", "add_lv", "help", "adddev", "deldev",
				 "rebuild_disk", "reload_volume", "end_reload_volume", "recover_volume_log",
				 "debug", "release", "display_volume_log", "set_drive_usage", "salvage_dirs");

	dcl     command_abbrev	 (27) char (4) varying internal static options (constant)
				 init ("av", "", "ld", "mult", "", "dlv", "", "dv", "shut", "stan", "", "star",
				 "sv", "", "alv", "", "addd", "deld", "", "", "", "", "", "", "", "sdu", "");

	dcl     check_commands	 (6) char (32) varying internal static options (constant)
				 init ("multics", "reload", "reload_system_release", "standard", "startup",
				 "salvage_dirs");	/* These require a complete RLV */
%page;
caller:
     proc ();

          dcl     a01                   char(argl( 1)) defined(arg( 1)),   /* Overlay non-space chars of each arg */
                  a02                   char(argl( 2)) defined(arg( 2)),
                  a03                   char(argl( 3)) defined(arg( 3)),
                  a04                   char(argl( 4)) defined(arg( 4)),
                  a05                   char(argl( 5)) defined(arg( 5)),
                  a06                   char(argl( 6)) defined(arg( 6)),
                  a07                   char(argl( 7)) defined(arg( 7)),
                  a08                   char(argl( 8)) defined(arg( 8)),
                  a09                   char(argl( 9)) defined(arg( 9)),
                  a10                   char(argl(10)) defined(arg(10)),
                  a11                   char(argl(11)) defined(arg(11)),
                  a12                   char(argl(12)) defined(arg(12)),
                  a13                   char(argl(13)) defined(arg(13)),
                  a14                   char(argl(14)) defined(arg(14)),
                  a15                   char(argl(15)) defined(arg(15)),
                  a16                   char(argl(16)) defined(arg(16)),
                  a17                   char(argl(17)) defined(arg(17)),
                  a18                   char(argl(18)) defined(arg(18)),
                  a19                   char(argl(19)) defined(arg(19)),
                  a20                   char(argl(20)) defined(arg(20));
     
          go to CALL(an);				/* compiler generates arg_list for appropriate arg count. */
	
CALL(0):	call entry_var ();
	return;
CALL(1):	call entry_var (a01);
	return;
CALL(2):	call entry_var (a01,a02);
	return;
CALL(3):	call entry_var (a01,a02,a03);
	return;
CALL(4):	call entry_var (a01,a02,a03,a04);
	return;
CALL(5):	call entry_var (a01,a02,a03,a04,a05);
	return;
CALL(6):	call entry_var (a01,a02,a03,a04,a05,a06);
	return;
CALL(7):	call entry_var (a01,a02,a03,a04,a05,a06,a07);
	return;
CALL(8):	call entry_var (a01,a02,a03,a04,a05,a06,a07,a08);
	return;
CALL(9):	call entry_var (a01,a02,a03,a04,a05,a06,a07,a08,a09);
	return;
CALL(10):	call entry_var (a01,a02,a03,a04,a05,a06,a07,a08,a09,a10);
	return;
CALL(11):	call entry_var (a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11);
	return;
CALL(12):	call entry_var (a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,a12);
	return;
CALL(13):	call entry_var (a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,a12,a13);
	return;
CALL(14):	call entry_var (a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,a12,a13,a14);
	return;
CALL(15):	call entry_var (a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,a12,a13,a14,a15);
	return;
CALL(16):	call entry_var (a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,a12,a13,a14,a15,a16);
	return;
CALL(17):	call entry_var (a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,a12,a13,a14,a15,a16,a17);
	return;
CALL(18):	call entry_var (a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,a12,a13,a14,a15,a16,a17,a18);
	return;
CALL(19):	call entry_var (a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19);
	return;
CALL(20):	call entry_var (a01,a02,a03,a04,a05,a06,a07,a08,a09,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20);

     end caller;

     end exec;
%page;
/* Internal procedure to do the NOLV work. This involves renameing
   >lv.root to a uniquely named thing, and removing all other names
   from it. */

nolv_request:
     proc;

	dcl     namex		 fixed bin;

	dcl     LV_ROOT_ENT		 char (7) int static options (constant) init ("lv.root");

	status_area_ptr = get_system_free_area_ ();
	status_ptr = addr (local_status_branch);
	call hcs_$status_ (">", LV_ROOT_ENT, 0, status_ptr, status_area_ptr, code);
	if code ^= 0
	then call com_err_ (code, ME, "Cannot remove names from >^a", LV_ROOT_ENT);
	else do;
		do namex = 1 to status_branch.nnames;
		     if status_entry_names (namex) ^= LV_ROOT_ENT
		     then do;
			     call hcs_$chname_file (">", LV_ROOT_ENT, (status_entry_names (namex)), "", code);
			     if code ^= 0
			     then call com_err_ (code, ME, "Removing name ^a from >^a", status_entry_names (namex),
				     LV_ROOT_ENT);
			end;
		end;
		free status_branch;
	     end;

	call root_rename (LV_ROOT_ENT);
	call root_rename ("lv");

	return;

     end nolv_request;
%page;
root_rename:
     proc (a_segname);

	dcl     a_segname		 char (*);
	dcl     new_ename		 char (32);

	new_ename = rtrim (a_segname) || "." || unique_chars_ (""b);
	call hcs_$chname_file (">", a_segname, a_segname, new_ename, code);
	if code = 0
	then call ioa_ ("system_startup_: Renamed >^a to >^a.", a_segname, new_ename);

     end root_rename;
%page;
/* This internal procedure handles all signalled errors */

error:
     proc (mcptr, name, wcptr, iptr);

	dcl     mcptr		 ptr,		/* pointer to machine conditions */
	        name		 char (*),	/* name of condition */
	        wcptr		 ptr,		/* pointer to wall crossing conditions */
	        iptr		 ptr;		/* points to misc information */

	dcl     convert_status_code_	 entry (fixed bin (35), char (8) aligned, char (100) aligned);

	dcl     1 auto_fault_msg	 aligned like fault_msg;
	dcl     error_name		 char (32);
	dcl     message		 char (100);
	dcl     i_message		 char (100) aligned;

%include condition_info_header;
%include sub_error_info;

	dcl     in_error_handler	 bit (1) aligned internal static init ("0"b);
						/* detect recursive errors */

	if in_error_handler
	then begin;

		declare dead_ptr		 pointer;
		declare death_value		 fixed bin;
		declare based_deadly	 based fixed bin;
		declare baseptr		 builtin;

		call hphcs_$syserr (CRASH, "^a: Recursive error condition.", ME);
						/* trust NOTHING */
		call hphcs_$call_bce ();
		dead_ptr = baseptr (-2);		/* take attempt to terminate initializer process if hphcs is broken. */
		death_value = dead_ptr -> based_deadly;
	     end;
	in_error_handler = "1"b;

	error_name = name;
	if iptr ^= null ()				/* Software Information */
	then do;
		condition_info_header_ptr = iptr;
		if condition_info_header.quiet_restart
		then
RETURN_FROM_ERROR:
		     do;
			in_error_handler = "0"b;
			return;
		     end;


		if name = "sub_error_"
		then do;
			sub_error_info_ptr = iptr;
			error_name = sub_error_info.name;
		     end;

		message = "";

		call ioa_$rsnnl ("Error: ^a condition", message, (0), error_name);
		call PRINT (message);

		if condition_info_header.status_code ^= 0
		then call convert_status_code_ (condition_info_header.status_code, "", i_message);
		else i_message = "";
		message = i_message;

		if condition_info_header.info_string ^= ""
		then call PRINT_V (condition_info_header.info_string);
		if message ^= ""
		then call PRINT (message);

		if condition_info_header.action_flags.default_restart
		then go to RETURN_FROM_ERROR;
	     end;

	else if mcptr = null ()
	then call hphcs_$syserr (BEEP, "^a: unclaimed ^a condition.", ME, name);
	else do;
		mcp = mcptr;
		unspec (auto_fault_msg.mach_cond) = unspec (mc);
		unspec (auto_fault_msg.hist_reg) = ""b; /* we cant get */
		call hphcs_$syserr_binary (LOG, addr (auto_fault_msg), SB_hw_fault, SBL_hw_fault, "^a:", ME);
		call hphcs_$syserr_error_code (BEEP, mcptr -> mc.errcode, "^a: unclaimed ^a condition.", ME, name);
		call hphcs_$syserr (ANNOUNCE, "^5xPointer Registers:");
		do i = 0 to 7;
		     call hphcs_$syserr (ANNOUNCE, "^-pr^d:^-^p", i, mc.prs (i));
		end;
		call hphcs_$syserr (ANNOUNCE, "^5x Registers:");
		call hphcs_$syserr (ANNOUNCE,
		     "^-x0: ^.3b x1: ^.3b x2: ^.3b x3: ^.3b^/^-x4: ^.3b x5: ^.3b x6: ^.3b x7: ^.3b", mc.x (0),
		     mc.x (1), mc.x (2), mc.x (3), mc.x (4), mc.x (5), mc.x (6), mc.x (7));
		call hphcs_$syserr (ANNOUNCE, "^-a: ^.3b q: ^.3b e:^.3b", mc.a, mc.q, mc.e);
		call hphcs_$syserr (ANNOUNCE, "^-timer: ^.3b ralr: ^.3b", mc.t, mc.ralr);
		call hphcs_$syserr (ANNOUNCE, "^5xSCU Data:^2(^/^w ^w ^w ^w^)", mc.scu);
	     end;

	if ^IOX_up
	then do;
		call hphcs_$syserr ("^a: Cannot do IO, crashing.");
		call hphcs_$call_bce;
	     end;

	if debug
	then do;
		level = level + 1;
		in_error_handler = "0"b;
		call read_command_entry;		/* save the stack */
	     end;
	if init
	then do;
		in_error_handler = "0"b;
		go to read_command;			/* Try again */
	     end;
	call hphcs_$syserr (CRASH, "^a: Error condition while initializing ring 1 environment.", ME);
	call hphcs_$call_bce;

PRINT:
     procedure (a_message);
	declare a_message		 char (*);

	if IOX_up
	then call ioa_ ("^a: ^a", ME, a_message);
	else call hphcs_$syserr (BEEP, "^a: ^a", ME, a_message);
	return;

PRINT_V:
     entry (a_v_message);
	declare a_v_message		 char (*) varying;
	if IOX_up
	then call ioa_ ("^a: ^a", ME, a_v_message);
	else call hphcs_$syserr (ANNOUNCE, "^a: ^a", ME, a_v_message);
	return;

     end PRINT;

     end error;

/* This internal procedures terminates the process */

die:
     proc;

	call hphcs_$syserr_error_code (CRASH, code, "^a: error on initializer io streams", ME);
	call hphcs_$call_bce;
     end die;

shutdown_iox:
     procedure;

/* leaving i/o switches around in ring 1 is not necessarily fatal. So we do
   not crash in here, but leave it to system_control_ to crash from ring 4
   for if something cannot be tolerated. */

	declare iox_$n_standard_iocbs	 external fixed bin;
	declare standard_iocb_ptrs	 (iox_$n_standard_iocbs) pointer based (iocb_ptrs_ptr);
	declare iox_$standard_iocb_ptrs
				 bit (36) aligned external static;
	declare iocb_ptrs_ptr	 pointer;

	IOX_up = "0"b;
	iocb_ptrs_ptr = addr (iox_$standard_iocb_ptrs);
	do i = 1 to iox_$n_standard_iocbs;
	     call iox_$close (standard_iocb_ptrs (i), (0));
	     call iox_$detach_iocb (standard_iocb_ptrs (i), (0));
	end;
     end shutdown_iox;
%page;
test:
     entry (test_dir);
	SC1 = test_dir;
	return;
%page;
get_config_size:
     proc ();

/* *	This procedure sets n_cards and max_cards appropriately, by examining
   *	the information in the config_deck segment.
*/

	dcl     idx		 fixed bin;
	dcl     linkage_error	 condition;


	config_max_cards = divide (4096 - 1, size (config_card), 17, 0);

	on linkage_error
	     begin;
		call hphcs_$syserr (CRASH, "^a: The config_deck segment is missing.", ME);
		call hphcs_$call_bce;
	     end;
	configp = addr (config_deck$);		/* Make addressable */
	revert linkage_error;

try_config_again:
	if config_deck.cards (1).word = ZERO_CARD_WORD
	then do;					/* It's empty already */
		call hphcs_$syserr (CRASH, "^a: The config deck is empty.", ME);
		call hphcs_$call_bce;
		go to try_config_again;		/* perhaps fixed up in bce */
	     end;

	do idx = 1 to config_max_cards;		/* Otherwise, look for the first free card */
	     if config_deck.cards (idx).word = FREE_CARD_WORD
	     then goto FOUND_FREE_CARD;
	end;

FOUND_FREE_CARD:
	config_n_cards = idx - 1;			/* Last card used is one before the free one */

	return;					/* All done */
     end get_config_size;
%page;
call_out:
     procedure (system_control_entrypoint);

	declare system_control_entrypoint
				 character (*);

	call call_outer_ring_ (codeptr (system_startup_), "system_control_", system_control_entrypoint, (/* ring */ 4),
	     code);
	call hphcs_$syserr_error_code (CRASH, code, "^a: Could not call out to system_control_$^a.", ME,
	     system_control_entrypoint);
	call hphcs_$call_bce;

     end call_out;
%page;
log_configuration:
     proc;					/* log the config deck */

	dcl     GROUP_SIZE		 fixed bin (17) init (16) static options (constant);

	dcl     cards_in_group	 fixed bin;	/* 16, or the (smaller) remainder of cards in the deck */
	dcl     card_index		 fixed bin;	/* which config card */
	dcl     n_groups		 fixed bin;	/* number of chunk calls required */

	dcl     1 card_group	 (cards_in_group) like config_card aligned
				 based (addr (config_deck.cards (card_index)));

	n_groups = divide (config_n_cards + GROUP_SIZE - 1, GROUP_SIZE, 17, 0);
	do card_index = 1 to config_n_cards by GROUP_SIZE;
	     cards_in_group = min (config_n_cards - card_index + 1, GROUP_SIZE);
	     call hphcs_$syserr_binary (LOG, addr (card_group), SB_config_deck, currentsize (card_group),
		"Config deck, part ^d of ^d", divide (card_index, GROUP_SIZE, 17, 0) + 1, n_groups);
	     call timer_manager_$sleep (1000, "10"b);	/* goof off for 1ms and let hproc run */
	end;

     end log_configuration;
%page;
salvage_dirs:
     procedure;

	declare dir_path		 char (168);
	declare starx		 fixed bin;
	declare hcs_$star_		 entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr,
				 fixed bin (35));

	call hcs_$star_ (">", "*", star_BRANCHES_ONLY, get_system_free_area_ (), star_entry_count, star_entry_ptr,
	     star_names_ptr, code);			/* Dont bother with foo.** */

	if code ^= 0
	then do;
		call com_err_ (code, ME, "Could not list the root.");
		return;
	     end;

	do starx = 1 to star_entry_count;
	     if star_entries (starx).type = star_DIRECTORY
	     then do;
		     dir_path = ">" || star_names (star_entries (starx).nindex);
		     if dir_path ^= ">system_library_1" & dir_path ^= ">process_dir_dir"
		     then do;
			     call salvage_dir (dir_path);
			     call ensure_quota$$first_pass (dir_path);
			end;
		end;
	end;

	call ensure_quota (">system_control_dir");
	call ensure_quota (">");
	return;
     end salvage_dirs;
%page;
salvage_dir:
     procedure (dir_pathname);
	declare dir_pathname	 character (*);

	declare a_time		 fixed bin (71);
	declare s_temps		 (2) ptr;
	declare salv_message	 char (2000) varying;

	call get_temp_segments_ (ME, s_temps, code);
	local_salv_args.temp1_ptr = s_temps (1);
	local_salv_args.temp2_ptr = s_temps (2);
	a_time = clock ();
	local_salv_args.salv_time = substr (unspec (a_time), 21, 36);
	local_salv_args.options = ""b;
	local_salv_args.correct_oosw, local_salv_args.delete_connection_failure = "1"b;
	local_salv_args.check_vtoce = mountedp (dir_pathname, "");
						/* Gross, but effective */
	local_salv_args.branch_ptr = null ();
	local_salv_args.current_length = 0;
	local_salv_args.pathname = dir_pathname;

	salv_message = "";
	call ioa_ ("Salvaging ^a.", dir_pathname);
	call hphcs_$salv_directory (addr (local_salv_args), salv_message, null (), (0), code);
	call com_err_$suppress_name (code, ME, "^[Salvager reported^/^a.^]", salv_message ^= "", salv_message);
	call release_temp_segments_ (ME, s_temps, code);
	return;
     end salvage_dir;
%page;
ensure_quota:
     procedure (dir_pathname);
	declare dir_pathname	 char (*);

	declare first_pass		 bit (1) aligned;

	dcl     hphcs_$correct_qused	 entry (char (*), fixed bin (34), fixed bin (34), fixed bin (34), fixed bin (34),
				 bit (1) aligned, fixed bin (35));
	declare hphcs_$quota_set	 external entry (char (*), fixed bin (18), fixed bin (35));
	declare (old_seg_used, old_dir_used, new_seg_used, new_dir_used)
				 fixed bin (34);
	declare did_something	 bit (1) aligned;
	declare code		 fixed bin (35);

	declare Qalloc		 fixed bin (18);
	declare trp		 fixed bin (71);
	declare tup		 bit (36) aligned;
	declare terminal_sw		 fixed bin (1);
	declare Qused		 fixed bin (18);
	declare sons_lvid		 bit (36);

	first_pass = "0"b;
	go to Common;

ensure_quota$$first_pass:
     entry (dir_pathname);

	first_pass = "1"b;

Common:
	call hphcs_$correct_qused (dir_pathname, old_seg_used, old_dir_used, new_seg_used, new_dir_used, did_something,
	     code);

	if did_something
	then do;
		if code ^= 0
		then call com_err_ (code, ME, "While fixing quota for ^a.", dir_pathname);
		if old_seg_used ^= new_seg_used
		then call ioa_ ("^a: Segment quota used changed from ^d to ^d.", dir_pathname, old_seg_used,
			new_seg_used);
		if old_dir_used ^= new_dir_used
		then call ioa_ ("^a: Directory quota used changed from ^d to ^d.", dir_pathname, old_dir_used,
			new_dir_used);
	     end;
	else call com_err_ (code, ME, "Warning: Could not validate/correct quota on ^a.", dir_pathname);

	if first_pass
	then return;

	call hcs_$quota_read (dir_pathname, Qalloc, trp, tup, sons_lvid, terminal_sw, Qused, code);

	if code ^= 0
	then do;
		call com_err_ (code, ME, "Could not read quota for ^a.", dir_pathname);
		return;
	     end;

	if terminal_sw = 0
	then return;				/* parent has been bothered */
	if (Qalloc - Qused) > 1000
	then return;

	call hphcs_$quota_set (dir_pathname, Qused + 1000, code);
	if code ^= 0
	then call com_err_ (code, ME, "Could not set quota for ^a, which has only ^d record available.", dir_pathname,
		Qalloc - Qused);
	else call ioa_ ("^a: Forcing quota for ^a from ^d to ^d. Run a quota salvage.", ME, dir_pathname, Qalloc,
		Qalloc + 1000);
	return;
     end ensure_quota;
%page;
mountedp:
     procedure (dir, entryname) returns (bit (1) aligned);

	declare (dir, entryname)	 char (*);
	declare 1 sb		 aligned like status_branch;

	declare hcs_$status_long	 entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
	declare hcs_$lv_attached	 entry (bit (36) aligned) returns (fixed bin (35));

	call hcs_$status_long (dir, entryname, (0), addr (sb), null (), code);
	if code ^= 0
	then return ("0"b);
	return (hcs_$lv_attached ((sb.lvid)) = 0);
     end mountedp;

/* format: off */

%page; %include config_intk_card;
%page; %include config_deck;
%page; %include static_handlers;
%page; %include iox_entries;
%page; %include iox_modes;
%page; %include mc;
%page; %include salv_args;
%page; %include star_structures;
%page; %include status_structures;
%page; %include syserr_binary_def;
%page; %include syserr_fault_msg;
%page; %include syserr_constants;
%page; %include pvt;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   Command:

   S:	$info

   T:	$init

   M:	The Initializer types this message whenever it is waiting
   for a ring 1 command.

   A:	Type the desired command.  The normal command to type when
   bringing the system up is startup.


   Message:
   Multics SYSID: DATE TIME

   S:	$info

   T:	$init

   M:	This is the first message that will be typed when the system
   is started up.  It indicates that the Initializer process is ready to go.
   The system ID on the tape is SYSID.

   A:	Check the date and time to ensure both are correct.  If the clock
   reading is wrong, shut down and correct the clock.


   Message:
   system_startup_: XYZ is not a legal command. Type help for a list of commands.

   S:	$info

   T:	$init

   M:	The operator has issued a command to the ring 1 environment
   that cannot be executed.
   No action was taken on the illegal command.

   A:	If the command is misspelled, retype it correctly.  If the
   command is intended for the ring 4 Answering Service, type "standard"
   first to leave the ring 1 environment and then retype the desired command.


   Message:
   system_startup_: unclaimed COND
   .br
   (machine conditions in octal)

   S:	$beep

   T:	$init

   M:	Some error condition has occurred unexpectedly inside
   the ring 1 environment.  Diagnostic information is typed after this
   line.  The system should return to Initializer command level, still
   in ring 1, and be able to continue running.

   A:	$inform

   Message:
   system_startup_: The root logical volume is not complete.
"boot rlvs" level 2 directory salvage aborted.

   S:	$info

   T:	$init

   M:	One or more physical volumes of the
   Root Logical Volume (RLV) registered in the volume registration 
database are not specified on the root config card, and are therefore
not mounted. Level 2 directory salvage cannot take place with an incomplete 
RLV.

   A:	Mount the missing packs with the add_vol command, and then
use the salvage_dirs command.


   Message:
   system_startup_: Will not reload

   S:	$info

   T:	Response to operator reload command.

   M:	One or more volumes cannot be mounted.
   Reloading cannot proceed.
   The system returns to ring 1 command level.

   A:	Correct the problem and try again.


   Message:
   system_startup_: The config_deck segment is missing.

   S:	$crash

   T:	$init

   M:	$crashes
   The segment config_deck is missing.  This error should not
   occur, because earlier steps in initialization depend
   upon the config deck.

   A:	$recover
   Use another boot tape,
   or check that the hardware is operating correctly.

   Message:
   system_startup_: The config deck is empty.

   S:      $crash

   T:      $init

   M:      $crashes
   The system will return to bce. This error should not
   occur, because earlier steps in initialization depend
   upon the config deck.
   If it does, however, type GO after putting a config deck in place.


   A:	$recover
   Use another boot tape,
   or check that the hardware is operating correctly.

   Message:
   system_startup_: error on initializer io streams

   S:	$crash

   T:	$init

   M:	$crashes
   The system will return to bce.

   A:	$recover
   Try another boot tape
   and check that the hardware is running correctly.


   Message:
   system_startup_: Recursive error condition.

   S:     $crash

   T:	$init

   M:     $crashes
   The system will return to bce.

   A:     $recover
   Boot another system, and examine the dump.

   Message:
   system_startup_: unclaimed {condition-name} condition.

   S:     $beep

   T:	$init

   M:	An error has occurred while executing in the ring 1
   Initializer environment. The system returns to ring 1 command level.
   For some errors machine conditions are displayed in subsequent messages.

   A:     $inform

   Message:
   system_startup_ Renamed >XXXXX to >XXXXX.!BBB.....

   S:	$info

   T:	$init

   M:	The segment >disk_table or the directory >lv (as specified
   by XXXXX in the message) was renamed in response to the "nodt"
   or "nolv" option on the bce "boot" command line.

   A:	$ignore

   END MESSAGE DOCUMENTATION */

     end system_startup_;
