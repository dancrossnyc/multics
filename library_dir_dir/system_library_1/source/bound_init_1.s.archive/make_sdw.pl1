/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */


make_sdw: proc (a_segno, a_tsdw, a_astep, a_ptp);

/*	Last Modified: (Date and Reason)
   09/22/71 by Richard H. Gumpertz to change null devadds to include rel(ptp) for page
   08/--/71 by David R. Vinograd for page multi-level
   02/12/74 by Bernard S. Greenberg for 6180 cache
   04/09/74 by Bernard S. Greenberg for TBLS card
   07/17/74 by Mike Grady to move code to temp wire pages and
     look for pds and pl1_operators_
   02/10/75 by Andre Bensoussan for the new storage system.
   07/09/75 by Greenberg, incorporating 1/6/75 change by Mabee
     making SDW parameters 'like', instead of fixed (71).
   12/08/75 by Greenberg for pre-withdraw against HC partition
   07/20/78 by Greenberg for multi-vol HC part.
   01/31/79 by D. Spector to allocate deciduous segments on root phys vol
   03/22/81, W. Olin Sibert, for ADP PTWs and SDWs
   04/16/81, WOS, to make parameters fixed bin (71) again, use sdw_util_
   02/28/82, J. Bongiovanni, to eliminate use of FSDCT, add entries
             thread_hcp, reset_hcp
   08/11/82, J. Bongiovanni, to eliminate RLV parasites.
   10/18/82, BIM, $no_pages, entry for establishing segs on partitions
   04/06/83, KPL, bug fix to $no_pages to fill in length fields in aste
   12/13/83, KPL, for adding breakpoint page to executable segments.
   07/12/84, KPL, for setting sentinel in breakpoint page.
   */

	dcl     a_segno		 fixed bin (18) parameter;
	dcl     a_tsdw		 fixed bin (71) parameter;
	dcl     a_ptp		 pointer parameter;
	dcl     a_astep		 pointer parameter;
	dcl     a_pvtx		 fixed bin parameter;

	dcl     (error_table_no, pdsno, dsegno, pl1_ops_no, pl1_ops_pages, no_pages_wired) fixed bin;
	dcl     (ptsi, loopcnt)	 fixed bin;
	dcl     pvtx		 fixed bin;
	dcl     temp_sdw		 fixed bin (71);
	dcl     save_pts		 fixed bin;
	dcl     dummy		 fixed bin;
	dcl     asp		 ptr;
	dcl     pts		 fixed bin (9);
	dcl     (i, j)		 fixed bin;
	dcl     unthreaded		 bit (1) aligned;	/* Switch is on if unthreaded entry */
	dcl     no_pages		 bit (1) aligned;

	dcl     1 sdwi		 aligned like sdw_info automatic;

	dcl     seg		 (0:262143) fixed bin based aligned;
	dcl     bfword		 (0:1) fixed bin based;

	dcl     hcp_thread		 fixed bin int static init (0);
	dcl     hcp_first		 fixed bin int static init (0);

	dcl     abs_seg$		 external static;
	dcl     breakpoint_page$	 external static;
	dcl     dseg$		 external static;
	dcl     name_table$		 external static;
	dcl     pds$		 external static;
	dcl     slt$		 external static;

	dcl     pl1_operators_$end_pl1_operators fixed bin external static;
	dcl     error_table_$	 external static;
	dcl     sys_info$system_type	 fixed bin external static;

	dcl     absadr		 entry (ptr, fixed bin (35)) returns (fixed bin (26));
	dcl     config_$find	 entry (char (4) aligned, ptr);
	dcl     get_ptrs_$given_astep	 ext entry (ptr) returns (fixed bin (71));
	dcl     pmut$swap_sdw	 entry (ptr, ptr);
	dcl     ptw_util_$make_core    entry (pointer, fixed bin (26));
	dcl     ptw_util_$make_null	 entry (pointer, bit (22) aligned);
	dcl     ptw_util_$set_wired	 entry (pointer);
	dcl     sdw_util_$construct	 entry (pointer, pointer);
	dcl     sdw_util_$dissect	 entry (pointer, pointer);
	dcl     syserr		 ext entry options (variable);
	dcl     thread$cin		 ext entry (ptr, bit (18));
	dcl     thread$out		 ext entry (ptr, bit (18));

	dcl     (addr, addrel, baseno, bin, bit, divide, fixed, hbound, max, null, ptr, rel, string, substr) builtin;

/*  */

	unthreaded = "0"b;				/* This is not the unthreaded entry */
	no_pages = "0"b;
	goto MAKE_SDW_COMMON;


unthreaded: entry (a_segno, a_tsdw, a_astep, a_ptp);	/* Entry for unthreaded AST entry */

	unthreaded = "1"b;
	no_pages = "0"b;
	goto MAKE_SDW_COMMON;

no_pages: entry (a_segno, a_tsdw, a_astep, a_ptp);
	no_pages = "1"b;
	unthreaded = "0"b;				/* thread in ! */

MAKE_SDW_COMMON:

	sstp = addr (sst_seg$);
	pvt_arrayp = addr (pvt$array);
	sltp = addr (slt$);
	sltep = addr (slt.seg (a_segno));		/* Set pointer to slt entry. */
	asp = addr (abs_seg$);			/* Used to withdraw seg */

	pdsno = fixed (baseno (addr (pds$)), 17);
	dsegno = fixed (baseno (addr (dseg$)), 17);
	pl1_ops_no = fixed (baseno (addr (pl1_operators_$end_pl1_operators)), 17);
	pl1_ops_pages = divide (fixed (rel (addr (pl1_operators_$end_pl1_operators)), 18) + 1023, 1024, 17, 0);
	error_table_no = fixed (baseno (addr (error_table_$)), 17);

	namep = ptr (addr (name_table$), slte.names_ptr); /* get ptr to name */
	do i = 1 to hbound (table_corresp, 1);		/* scan variable size table names */
	     if table_corresp (i).slt_name = namep -> segnam.name (1)
	     then do tbcp = null repeat (tbcp);		/* scan config deck for size spec */
		     call config_$find (tbl_card_name, tbcp); /* get a card */
		     if tbcp = null then go to no_card; /* no more in deck */
		     do j = 1 to hbound (tbls_card.tbl_spec, 1); /* scan this card */
			if tbls_card.tbl_name (j) = table_corresp (i).card_name then do;
				pts, save_pts = tbls_card.cur_length (j); /* get length from card */
				slte_uns.max_length =
				     max (pts, slte_uns.max_length);
				slte_uns.cur_length = pts; /* set from card */
				go to got_pts;
			     end;
		     end;
		end;
	end;

no_card:	pts = max (slte_uns.max_length, slte_uns.cur_length); /* get page table size */
	if (pts = 0 | (slte.abs_seg & ^ no_pages)) & ^unthreaded then do; /* No aste for abs segs unless user insists */
						/* If void seg, don't create unless forced */
						/* Avoid routine creation of abs segs */
		a_astep, a_ptp = null ();		/* Don't try using it */
		a_tsdw = 0;			/* Quick segfault */
		return;
	     end;

	if ^ slte.breakpointable & ^ no_pages & substr (slte_uns.access, 2, 1) then do;/* execute => breakpointable */
	     slte_uns.breakpointable = "1"b;
	     slte_uns.max_length = slte_uns.max_length + 1;
	     slte_uns.cur_length = slte_uns.cur_length + 1;
	     pts = pts + 1;
	end;
	save_pts = pts;

got_pts:	do i = 3 to 0 by -1 while (sst.pts (i) >= pts);	/* find correct page table pool */
	end;

	ptsi = i + 1;
	loopcnt = 0;				/* zero counter */
	pts = sst.pts (ptsi);			/* specify page table size */

	do astep = ptr (sstp, sst.ausedp (ptsi)) /* look for an ASTE for the segment */
	     repeat ptr (sstp, aste.fp) /* skip to next ASTE for free one */
	     while (aste.usedf & /* until it's free or */
	     loopcnt <= fixed (sst.no_aste (ptsi), 17));	/* there are no more ASTE's */
	     loopcnt = loopcnt + 1;			/* how many times through the loop */
	end;

	if loopcnt > fixed (sst.no_aste (ptsi), 18) then /* too many times; pool is empty */
	     call syserr (1, "make_sdw: aste pool ^d too small", ptsi);

	call thread$out (astep, sst.ausedp (ptsi));	/* thread the entry out of the used list */
	do i = 0 to sst.astsize - 2;			/* zero the AST entry */
	     astep -> bfword (i) = 0;
	end;

/*  */

	aste.usedf = "1"b;				/* mark it as being used */
	a_ptp = addrel (astep, sst.astsize);		/* get a pointer to the page table */

	if slte.wired then do;			/* if this a temp wired seg */
		if a_segno = pdsno then no_pages_wired = 1; /* wire first page of pds */
		else if a_segno = dsegno then no_pages_wired = 1; /* wire first page of dseg */
		else if a_segno = pl1_ops_no then no_pages_wired = pl1_ops_pages; /* wire just the first few pages */
		else if a_segno = error_table_no then no_pages_wired = 1;
		else no_pages_wired = save_pts;	/* otherwise wire all pages */
		sst.wired = sst.wired + no_pages_wired;
	     end;
	else no_pages_wired = 0;

	do i = 0 to pts - 1;			/* initialize the page table array for the entry */
	     call ptw_util_$make_null (addrel (a_ptp, i), make_sdw_null_addr);
	     if i < no_pages_wired then call ptw_util_$set_wired (addrel (a_ptp, i));
	end;

	if slte_uns.breakpointable then
	     if no_pages_wired > 0 then do;		/* wired seg - use breakpoint_page */
	          call ptw_util_$make_core (addrel (a_ptp, save_pts - 1), absadr (addr (breakpoint_page$), (0)));
		call ptw_util_$set_wired (addrel (a_ptp, save_pts - 1));
		if no_pages_wired = save_pts then sst.wired = sst.wired - 1;  /* wired was one too high from counting all pages as new wired pages */
	     end;

	if ^unthreaded				/* If threaded.. */
	then if slte.temp_seg then call thread$cin (astep, sst.atempp);
	     else if slte.branch_required then call thread$cin (astep, sst.ausedp (ptsi));
	     else if slte.init_seg then call thread$cin (astep, sst.ainitp);
	     else if slte.wired then do;		/* if this is wired then */
		     unthreaded = "1"b;		/* don't thread it */
		     aste.hc = "1"b;		/* and mark as hardcore */
		end;
	     else aste.hc = "1"b;

	a_tsdw = get_ptrs_$given_astep (astep);		/* Get initial SDW, */
	call sdw_util_$dissect (addr (a_tsdw), addr (sdwi)); /* and find out what's in it now */
	sdwi.size = save_pts * 1024;			/* Set the size as appropriate for a paged segment */
	string (sdwi.access) = slte.access;		/* Access from SLT entry */
	if sys_info$system_type = L68_SYSTEM then /* And cache, if appropriate */
	     sdwi.cache = slte.cache;
	call sdw_util_$construct (addr (a_tsdw), addr (sdwi)); /* and put it all back together again */

	aste.nqsw = "1"b;				/* turn on no quota switch */
	aste.dnzp = "1"b;				/* never null hardcore pages */
	aste.ddnp = "1"b;				/* Never report prewithdrawns to free */
	aste.strp = bit (a_segno, 18);		/* store segment number in AST */
	aste.ehs = "1"b;				/* Turn entry hold switch on if appropriate */
	aste.hc_sdw = "1"b;				/* sdw for a hardcore seg so no trailer */
	aste.vtocx = -1;				/* VTOCE-less segment */

	a_astep = astep;

/* If disk abs seg, don't attempt to prewithdraw pages. */

	if no_pages then aste.csl, aste.records = bit (bin (slte_uns.cur_length, 9), 9);  /* so status_, et al, know about it */

	if slte.abs_seg | no_pages then return;		/* If abs_seg forced, don't prewithdraw */
						/* or if pages are to be supplied by the caller */

/* Allocate a volume with a hardcore partition for the segment. */

	if hcp_thread = 0 then do;			/* This gets interesting. */
		if sst.root_pvtx = 0 then do;		/* PVT created before init-pvt */
			aste.pvtx = -1;		/* Cause a fault if used. */
			return;
		     end;
		call syserr (1, "make_sdw: no hardcore partitions available.");
	     end;

/* Allocate deciduous segments on root phys vol */
	if slte.branch_required then do;
		pvtx = sst.root_pvtx;
		pvtep = addr (pvt_array (pvtx));
		goto got_pvtx;
	     end;

	do pvtx = hcp_thread repeat pvte.brother_pvtx;
	     pvtep = addr (pvt_array (pvtx));
	     if pvte.nleft >= save_pts then go to got_pvtx;
	     if pvte.brother_pvtx = hcp_thread then call syserr
		     (1, "make_sdw: out of hardcore partition for ^a.", namep -> segnam.name (1));
	end;
got_pvtx:
	hcp_thread = pvte.brother_pvtx;		/* Keep chain rotating */
	aste.pvtx = pvtx;				/* This is where seg will go. */
	aste.hc_part = "1"b;			/* Uses a hardcore partition */

/* Touch all the pages, causing withdrawing nulled addresses against hc partition */

	call pmut$swap_sdw (asp, addr (a_tsdw));
	do i = 0 to save_pts - 1;			/* real cur length */
	     dummy = asp -> seg (i * 1024);		/* touch for nulled withdraw */
	end;

	if slte.breakpointable then do;		/* set sentinel in bkpt_page (keeps page from being nulled) */
	     sdwi.access.write = "1"b;
	     call sdw_util_$construct (addr (temp_sdw), addr (sdwi)); /* force access */
	     call pmut$swap_sdw (asp, addr (temp_sdw));
	     addrel (asp, (save_pts - 1) * 1024) -> bkpt_page.sentinel = BKPT_page_sentinel;
	end;

	temp_sdw = 0;
	call pmut$swap_sdw (asp, addr (temp_sdw));	/* clear slot */

	return;

%page;
/* Entries to manage allocation from the Hardcore Partition

   thread_hcp adds a PVTE index to the thread

   reset_hcp terminates allocation from the Hardcore Partition
*/

thread_hcp:
     entry (a_pvtx);

	pvt_arrayp = addr (pvt$array);
	if hcp_thread = 0				/* This is the first pvtx */
	then hcp_thread, hcp_first = a_pvtx;
	else do;
		pvt_array (hcp_thread).brother_pvtx = a_pvtx;
		hcp_thread = a_pvtx;
	     end;

	pvt_array (a_pvtx).brother_pvtx = hcp_first;

	return;


reset_hcp:
     entry;

	hcp_thread, hcp_first = 0;
	return;


%page; %include aste;
%page; %include bce_breakpoint_page;
%page; %include mc;
%page; %include null_addresses;
%page; %include pvte;
%page; %include sdw_info;
%page; %include slt;
%page; %include slte;
%page; %include sst;
%page; %include system_types;
%page; %include variable_tables;

/*  */

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   make_sdw: XXXk ast pool to small.

   S: $crash

   T: $init

   M: There were not enough AST entries of size XXX k to allocate
   the permanent AST entries of the supervisor.

   A: Increase the number of AST entries of that size, as specified on
   the SST CONFIG card, substantially, and reboot.

   Message:
   make_sdw: no hardcore partitions available.

   S: $crash

   T: $init

   M: No hardcore partitions were defined on any of the packs on the drives
   specified by the ROOT CONFIG card. At least the RPV must have a hardcore
   partition.  Supervisor segments cannot be created.

   A: If this is a cold boot, which is most likely, the RPV was
   initialized without a hardcore partition.  It must be reinitialized.
   Check the PART HC CONFIG card, one of which must describe the RPV
   during a cold boot, and reboot.  If this is not a cold boot, the RPV
   has been damaged, and volume recovery must be undertaken.

   Message:
   make_sdw: out of hardcore partition for SEGNAME.

   S: $crash

   T: $init

   M: In attempting to allocate space for hardcore segment SEGNAME, no
   more room could be found in any of the defined hardcore partitions.

   A: If this is a cold boot, redefine the hardcore partition of the RPV
   to be larger.  At least 1000 (decimal) records is recommended.  Change
   the PART HC CONFIG card describing the RPV to indicate this, and
   reboot.  If this is not a cold boot, this situation is highly unlikely
   and indicates damage to one or more RLV volume labels.  Volume
   recovery for part or all of the RLV should be undertaken.

   END MESSAGE DOCUMENTATION */

     end make_sdw;
