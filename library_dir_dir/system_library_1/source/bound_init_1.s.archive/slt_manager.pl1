/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */
slt_manager:
     procedure;

/* SLT manager for Collection 1 Initialization. */
/* Written November 1982 by C. Hornig */
/* Modified January 1983 by K. Loepere to build and use name ht */

dcl  Header_ptr ptr parameter;

dcl  name_table$ external;
dcl  slt$ external;

dcl  hash_index_ entry (ptr, fixed bin (35), fixed bin (35), fixed bin (35))
     returns (fixed bin (35));

dcl  (tsltep, tnamep, tpathp, taclp) ptr;
dcl  segment_no fixed bin (15);
dcl  namex fixed bin;
dcl  hash_value fixed bin;  		/* what name hashes to */
dcl  name_num fixed bin;		/* loop index for names */
dcl 1 name_entry aligned like segnam.names based (name_entry_ptr);
dcl  name_entry_ptr ptr;

dcl  size builtin;
%page;
build_entry:
     entry (Header_ptr) returns (ptr);

	names_ptr = addr (name_table$);		/* establish addressability */
	sltp = addr (slt$);

	tsltep = Header_ptr;			/* header begins with SLTE */
	tnamep = addrel (tsltep, size (tsltep -> slte));	/* followed by names */

	if tsltep -> slte.branch_required then do;	/* and (optionally) path and ACL */
	     tpathp = addrel (tnamep, currentsize (tnamep -> segnam));
	     taclp = addr (tpathp -> path.acls);
	     end;

	if tsltep -> slte.init_seg			/* pick a segment number */
	then segment_no, slt.last_init_seg = slt.last_init_seg + 1;
	else segment_no, slt.last_sup_seg = slt.last_sup_seg + 1;

	sltep = addr (slt.seg (segment_no));		/* use this from now on */
	slte = tsltep -> slte;			/* copy in the SLTE */
	slte_uns.segno = segment_no;			/* save the segment number */

	namep = allocate_nt (currentsize (tnamep -> segnam));
						/* allocate space for a name */
	segnam.count = tnamep -> segnam.count;		/* set the count */
	segnam = tnamep -> segnam;			/* copy the rest */
	slte.names_ptr = rel (namep);			/* set up ptr in SLTE */

	if slte.branch_required then do;		/* more work */
	     pathp = allocate_nt (currentsize (tpathp -> path) - 1);
						/* space for the pathname */
	     path.size = tpathp -> path.size;
	     path = tpathp -> path;
	     slte.path_ptr = rel (pathp);

	     if slte.acl_provided then do;
		aclp = allocate_nt (currentsize (taclp -> acls));
						/* and for ACL's */
		acls.count = taclp -> acls.count;
		acls = taclp -> acls;
		end;
	     end;

	do name_num = 1 to segnam.count;		/* hash in names */
	     hash_value = hash_index_ (addr (segnam.names (name_num).name), 
		length (segnam.names (name_num).name), 0,
		dimension (name_seg.ht, 1));
	     segnam.names (name_num).hp = name_seg.ht (hash_value);  /* thread in list */
	     name_seg.ht (hash_value) = rel (addr (segnam.names (name_num)));
	     segnam.names (name_num).segno = bit (fixed (segment_no, 12), 12);
	end;

	return (baseptr (segment_no));

/* * * * * * * * * ALLOCATE_NT * * * * * * * * */

allocate_nt:
     procedure (Words) returns (ptr);

dcl  Words fixed bin;
dcl  ntp ptr;

	ntp = ptr (names_ptr, name_seg.next_loc);
	name_seg.next_loc = rel (addrel (ntp, Words));
	return (ntp);
     end allocate_nt;
%page;
/* * * * * * * * * * GET_SEG_PTR * * * ** * * * * */

get_seg_ptr:
     entry (Name) returns (ptr);

dcl  Name char (32) aligned parameter;

	sltp = addr (slt$);
	names_ptr = addr (name_table$);

	hash_value = hash_index_ (addr (Name), length (Name), 0,
	     dimension (name_seg.ht, 1));
	do name_entry_ptr = ptr (names_ptr, name_seg.ht (hash_value))
	     repeat (ptr (names_ptr, name_entry.hp))
		while (rel (name_entry_ptr));	/* scan down names that hash alike */
	     if name_entry.name = Name then return (baseptr (fixed (name_entry.segno, 12)));  /* until (if) we find actual match */
	end;
	return (null ());
%page;
%include slt;
%include slte;

     end slt_manager;
