/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */

/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */

/* WARNING: THIS PROGRAM MUST BE RUN THROUGH PL1_MACRO BEFORE COMPILATION */

real_initializer:
     procedure;

/* *	REAL_INITIALIZER
   *
   *	This is the driving procedure for Multics initialization. It is called from
   *	initializer, a component of bound_active_1 which exists solely to call this
   *	program, so this program can be an init-seg and get deleted. Because it is
   *	essentially an extension of initializer itself, it calls itself initializer.
   *
   *      As of this program's installation, the collection structure
   *      of the MST is as follows:
   *      "collection" 0:
   *        - the bootable label, if booted from tape (bootload_tape_label)
   *        - bound_bootload_0, which:
   *            & sets up a fault environment
   *	      & loads tape firmware as needed, finding in in collection 0.5
   *            & loads collection 1.0
   *            & transfers to bootload_1 which
   *	         sets up the pl1 environment, and calls initializer, 
   *	         which calls us.
   *        - other segments at fixed absolute locations, such as the
   *	     flagbox, and iom_mailbox.
   *       collection 0.5
   *        - firmware images for tape mpc's. bound_bootload_0 reads through
   *          these until it finds the one it wants, and then uses it
   *          to boot the MPC. It and all other are then discarded.

   *       collection 1.0
   *        - formerly collection 1. Programs to initialize paging and io.
   *          they include this program, and are called by it.
   *       collection 1.2
   *	  - runcoms, config decks, etc for bootload Multics command level.
   *	    They are loaded after the loading of collection 1.0 but before 
   *	    entering any user subsystems.  They are paged.
   *	 collection 1.5
   *	  - programs paged off the bce partition for use by bce.

   *       collection 2.0:
   *        - formerly collection 2. The hardcore file system and relatives.
   *
   *       collection 3.0:
   *        - user ring programs neccessary for a cold boot.
   *
   *     This program can be called on in a number of situations.
   *     First, there either is or is not a config deck available.
   *        This is indicated by the value of sys_boot_info$assume_config
   *        deck.
   *     Second, there are three possible initializations to be performed:
   *      - service Multics. Complete initialization and return
   *        to initializer.pl1 for the call out to ring 1.
   *      - Collection 1 command level. Complete initialization as
   *        far as making segs paged, but use a special partition
   *        on the RPV other than the HC partition. Store an image
   *        of the unpaged collection 1 environment on disk to be
   *        returned to in case of a crash, before making_segs_paged.
   *      - cool boot without BOS, and therefore
   *        without a config deck. This happens iff sys_boot_info$assume_config
   *        deck is off. Fabricate a minimal config, asking the operator
   *        (or trusting sys_boot_info) for the RPV model, device, and channel,
   *        load firmware into the rpv disk mpc. Read a config deck from
   *        the config partition on the RPV, then start one of the other
   *        two initializations using the real config deck.
   *
*****************************************************************************
****** JOURNALIZATION *******************************************************
*****************************************************************************
   *
   *      Modification history:
   *	80-12-21, W. Olin Sibert: Split out of initializer.pl1
   *      82-07-01, BIM: Partially rethought, and brought up to date with 
   *         current version of initializer.pl1 (mr10.0)
   *      82-08-01, BIM: Metering and check_stop added back.
   *      82-08-12, JJB: RLV parasites expunged, scavenger added 
   *      83-02-05, ENK: kst_util$garbage_collect
   *      83-04-15, KPL: bootload command level, (through 5/84).
   *	83-06-20, E. A. Ranzenbach: Modified for ocdcm_$init_all_consoles
   *	   and ocdcm_$reconfigure.
   * 	83-06-26, CLJ: Deleted iobm stuff
   *	84-08-20, KPL: Modified to not call scs_and_clock_init
   *	   when shutting down bce.
   *	84-10-17, WOS: Modified for new init_syserr_log and to initialize
   *	   syserr log names in ring zero instead of AS initialization.
   *      84-11-09, ADB: Added entry point collection_2 and collection_3 to
   *         make setting breakpoints in bce probe easier.
   *	85-01-09, Keith Loepere: fix retry_rpv.
   *	85-01-23, Keith Loepere: power up date/time software in paged bce;
   *	   permanent collection 1.5 segs.
   */

/****^  HISTORY COMMENTS:
  1) change(86-06-05,GJohnson), approve(86-06-05,MCR7387),
     audit(86-06-10,Martinson), install(86-07-11,MR12.0-1091):
     Correct error message documentation.
  2) change(86-09-05,Farley), approve(86-07-18,MCR7439),
     audit(86-09-24,Fawcett), install(86-10-20,MR12.0-1189):
     To move IOI into collection 1.0, so that it will be available
     at BCE. Also reset sys_info$service_system. Added missing MESSAGE doc.
                                                   END HISTORY COMMENTS */

/****     MEMORY LAYOUT ISSUES:
   *      when this program is called, all of collection 1 has
   *      been loaded into the first 512K of absolute memory.
   *      init-segs and to-be-made-paged segs are high, and
   *      everything else (perm-wired segs) are low.
   *      
   *      Depending on what kind of initialization we are up to,
   *      this may need rearrangement.
   *
   *      If service is to be booted, the high segments are relocated
   *      to actually high memory, leaving the low memory to be used
   *      for the sst and core map (which want to be high in the low 
   *      controller).
   *      
   *      If we are booting the command environment, everything is left as is, 
   *      since the returnable-to system will be a pre-make-segs-paged
   *      core image, and it wants to be restricted to 512K.
   *      
   *      If there is no config deck at all, then we have no idea 
   *      memory is around, and there is no choice but to stay in 512K.
   *	Once the config deck has been read, all memory obtained with
   *      get_main is returned, and a command environment initialization is 
   *      undertaken.
   *      
   *      If the config deck is changed, initialization to store
   *      the returnable-to system is repeated.
   *      
   *      To turn a command environment into a service boot, the special
   *      segments, if any, are deleted, the memory allocated with
   *      get_main is returned, and a service initialization is undertaken.

   */

%set STOP_NUM to 0;

dcl  addr				builtin;
dcl  baseptr			builtin;
dcl  bin				builtin;
dcl  binary			builtin;
dcl  null				builtin;
dcl  pointer			builtin;
dcl  substr			builtin;

dcl  code				fixed bin (35);
dcl  done_one_initialization		bit (1) aligned;
dcl  meter_initialization		bit (1) aligned;
dcl  parm_ptr			pointer;
dcl  ready_to_y_and_s		bit (1) aligned;
dcl  saved_free_core_size		fixed bin (24);
dcl  saved_free_core_start		fixed bin (24);	/* Saved state of the SLT core allocation marks */
dcl  saved_iupt_lth			fixed bin;	/* allocations in int_unpaged_page_tables */
dcl  saved_upt_lth			fixed bin;	/* in unpaged_page_tables */
dcl  yell_and_scream		bit (1) aligned;

dcl  bce_abs_seg$free		entry;
dcl  config_$find			entry (char (4) aligned, pointer);
dcl  config_$find_parm		entry (char (4) aligned, pointer);
dcl  condition_			entry (char (*), entry);
dcl  initial_error_handler		entry;
dcl  ocdcm_$reconfigure		entry (char (4), fixed bin (17), fixed bin (35));
dcl  pmut$set_mask			entry (bit (72) aligned);
dcl  pmut$trace_rsw			entry (bit (36) aligned);
dcl  syserr			entry options (variable);
dcl  syserr$error_code		entry options (variable);

dcl  active_all_rings_data$system_id	char (32) ext static;
dcl  active_all_rings_data$version_id	char (32) ext static;
dcl  bce_request_table_$bce_request_table_ ext static;
dcl  config_deck$			(4096) bit (36) aligned ext static;
dcl  int_unpaged_page_tables$		ext static;
dcl  safe_config_deck$		(4096) bit (36) aligned ext static;
dcl  scs$sys_level			bit (72) aligned external static;
dcl  slt$				fixed bin external static;
dcl  sys_boot_info$assume_config_deck	bit (1) aligned external; /* implies BOS, by the way */
dcl  sys_boot_info$boot_without_query	bit (1) aligned external static;
dcl  sys_boot_info$bootload_mem_size	fixed bin (26) ext static;
dcl  sys_boot_info$config_has_been_modified bit (1) aligned ext static;
dcl  sys_boot_info$contig_mem_size	fixed bin (26) ext static;
dcl  sys_boot_info$rpv_cold_boot	bit (1) aligned external static;
dcl  sys_boot_info$system_type	fixed bin external static;
dcl  sys_info$initialization_state	fixed bin external static;
dcl  sys_info$service_system		bit (1) aligned external static;
dcl  sys_info$system_type		fixed bin external static;
dcl  1 toehold$			aligned external like toe_hold;
dcl  unpaged_page_tables$		ext static;
%page;

/* The programs called to to actual intitialization-like things. */

dcl  accept_rpv			entry;
dcl  announce_chwm$after		entry;
dcl  announce_chwm$before		entry;
dcl  bce_get_to_command_level		entry (ptr);
dcl  collect_free_core		entry;
dcl  dbm_man$init			entry;
dcl  debug_check$copy_card		entry;
dcl  delete_segs$temp		entry;
dcl  dir_lock_init			entry;
dcl  disk_reader$init		entry;
dcl  disk_reader$final		entry;
dcl  establish_config_deck		entry;
dcl  establish_temp_segs		entry;
dcl  find_file_partition		entry;
dcl  find_rpv_subsystem		entry;
dcl  fnp_init			entry;
dcl  get_io_segs			entry;
dcl  getuid$init			entry;
dcl  init_bce$paged			entry;
dcl  init_bce$wired			entry;
dcl  init_branches			entry;
dcl  init_dm_journal_seg		entry;
dcl  init_early_config		entry;
dcl  init_hardcore_gates		entry;
dcl  init_lvt			entry;
dcl  init_partitions		entry;
dcl  init_pvt			entry;
dcl  init_root_dir			entry;
dcl  init_root_vols			entry (fixed bin (35));
dcl  init_scavenger_data		entry;
dcl  init_sst$early			entry;
dcl  init_sst$normal		entry;
dcl  init_sst_name_seg		entry;
dcl  init_stack_0			entry;
dcl  init_str_seg			entry;
dcl  init_sys_var			entry;
dcl  init_toehold			entry;
dcl  init_toehold$save_safe_config_deck entry;
dcl  init_vtoc_man			entry;
dcl  initialize_faults$fault_init_one	entry;
dcl  initialize_faults$fault_init_two	entry;
dcl  initialize_faults$interrupt_init	entry;
dcl  io_config_init			entry;
dcl  ioi_init			entry;
dcl  ioi_page_table$init		entry;
dcl  iom_data_init			entry;
dcl  kst_util$garbage_collect		entry (fixed bin (35));
dcl  load_disk_mpcs			entry;
dcl  load_mst			entry;
dcl  load_mst$init_commands		entry;
dcl  load_mst$make_permanent		entry;
dcl  load_system			entry;
dcl  make_segs_paged		entry;
dcl  move_non_perm_wired_segs		entry;
dcl  ocdcm_$init_all_consoles		entry;
dcl  pre_link_hc			entry;
dcl  read_disk$init			entry;
dcl  scas_init			entry;
dcl  scs_and_clock_init$date_time	entry;
dcl  scs_and_clock_init$early		entry;
dcl  scs_and_clock_init$normal	entry;
dcl  segment_loader			entry;
dcl  init_syserr_log		entry;
dcl  syserr_seg_manager$initialize_log_names entry;
dcl  tape_reader$final		entry;
dcl  tape_reader$init		entry;
dcl  tc_init			entry;
dcl  tc_init$early			entry;
dcl  tc_init$part_2			entry;
dcl  tc_init$start_other_cpus		entry;
%page;
/* Set up debugging flags */

	done_one_initialization = "0"b;
	meter_initialization = "0"b;
	yell_and_scream = "0"b;

	sys_info$system_type = sys_boot_info$system_type;
	addr (unpaged_page_tables$) -> upt.sst_absloc = 0;
	addr (unpaged_page_tables$) -> upt.sst_last_loc = 0; /* so we don't confuse page table lookers */

	addr (flagbox$) -> fgbx.return_to_bce_command = "";

	if sys_boot_info$assume_config_deck then do;	/* if we came from BOS */
	     parm_ptr = null;
	     call config_$find_parm ("mtin", parm_ptr);
	     meter_initialization = (parm_ptr ^= null);

	     parm_ptr = null ();
	     call config_$find_parm ("erly", parm_ptr);
	     if parm_ptr ^= null () then sys_boot_info$assume_config_deck = "0"b;
	end;

/* Whatever the task at hand, set up fault handling */
/* The prds, set up by a call from scs_and_clock_init, is */
/* needed. */

/*	if meter_initialization then call initial_meters$init; */

/* Everyone is interested in the SLT */

	sltp = addr (slt$);

/* This cannot have any effect until faults are initialized */

	call condition_ ("any_other", initial_error_handler);

/* First see if we need to do an exceptional initialization to */
/* Find the config deck. */

	ready_to_y_and_s = "0"b;

	sys_info$service_system = "0"b;
	sys_info$initialization_state = 1;
	sys_info$collection_1_phase = EARLY_INITIALIZATION;

	if sys_boot_info$assume_config_deck then do;

/* When running BOS, we turn on rpv_cold_boot so that the normal pass */
/* of init_root_vols will format the root. When not running BOS, */
/* this is done in the early initialization pass. */

	     intk_cardp = null ();
	     call config_$find (INTK_CARD_WORD, intk_cardp);
	     if intk_cardp = null () then call syserr (CRASH, "initializer: intk card missing.");
	     sys_boot_info$rpv_cold_boot = (intk_card.warm_or_cold = "cold");
	     intk_card.warm_or_cold = "warm";

/* warm/cold here implies that of bce.  warm/cold of service is decided in boot
command */

%set STOP_NUM to STOP_NUM + 1;

	     call check_stop (STOP_NUM, "scs_and_clock_init$normal");
	     call scs_and_clock_init$normal;		/* may get called again to reflect config deck changes */

	     sys_info$collection_1_phase = BOOT_INITIALIZATION;
	end;

bootload_Multics:
	if sys_info$collection_1_phase ^= SERVICE_INITIALIZATION then do;
	     call collection_1;
	     if toehold$.memory_state = At_bce__shutdown then do; /*  return from a previous boot */
		call TURN_OFF$$masked;
		sys_info$collection_1_phase = SHUT_INITIALIZATION; /* start up again */
	     end;
	     else if toehold$.memory_state = At_bce__crash then do;
		call TURN_OFF$$masked;
		if toehold$.multics_state.old_memory_state = At_bce__early then sys_info$collection_1_phase = RE_EARLY_INITIALIZATION;
		else if toehold$.multics_state.old_memory_state = At_bce__boot then sys_info$collection_1_phase = BCE_CRASH_INITIALIZATION;
		else sys_info$collection_1_phase = CRASH_INITIALIZATION; /*  we made it far enough to feel config_deck was not the crash cause */
	     end;
	     else do;				/* normal pass completion */
		call TURN_OFF;
		if sys_info$collection_1_phase = EARLY_INITIALIZATION then
		     sys_info$collection_1_phase = BOOT_INITIALIZATION;
		else sys_info$collection_1_phase = SERVICE_INITIALIZATION;
	     end;
	     go to bootload_Multics;
	end;

/* Perform normal initialization. */

	call collection_1;
%page;
collection_1:
     proc;

/* Repeated collection 1 initialization.  This is run 4 times (for 
corresponding values of sys_info$collection_1_phase.  First to find the
config deck.  Second, to set up the crash handler and command environments.
Fourth for service.  The first uses limited everything.  The second uses 
limited memory (and sst).  The fourth uses all. 
The "third" time is when we shutdown and crash, to rebuild tables. */

collection_1_start:
	if sys_info$collection_1_phase = RE_EARLY_INITIALIZATION | sys_info$collection_1_phase = BCE_CRASH_INITIALIZATION then
	     config_deck$ = safe_config_deck$;

	sys_boot_info$config_has_been_modified = "0"b;	/* set when modified, forces query when booting service */

	ready_to_y_and_s = "0"b;

	saved_free_core_start = slt.free_core_start;
	saved_free_core_size = slt.free_core_size;
	saved_iupt_lth = addr (int_unpaged_page_tables$) -> upt.current_length;
	saved_upt_lth = addr (unpaged_page_tables$) -> upt.current_length;
	sys_boot_info$contig_mem_size = sys_boot_info$bootload_mem_size;
						/* for the benefit of announce_chwm */

	if sys_info$collection_1_phase = EARLY_INITIALIZATION then do;

%set STOP_NUM to STOP_NUM + 1;

	     call check_stop (STOP_NUM, "init_early_config");
	     call init_early_config;			/* Fill in console, clock default, tape mpc, itk, sst, tcd, */
						/* bootload cpu, mem, iom and dummy rpv subsystem */
	end;

%set STOP_NUM to STOP_NUM + 1;

RETRY_RPV:
	if sys_info$collection_1_phase = EARLY_INITIALIZATION then do;
						/* The early entrypoint is as the normal, except that it fills in */
						/* port number on the cpu card. */
	     call check_stop (STOP_NUM, "scs_and_clock_init$early");
	     call scs_and_clock_init$early;
	end;
	else do;
	     call check_stop (STOP_NUM, "scs_and_clock_init$normal");
	     call scs_and_clock_init$normal;		/* get new clok card if there is one */
	end;

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "initialize_faults$fault_init_one");
	call initialize_faults$fault_init_one;

%set STOP_NUM to STOP_NUM + 1;

	if sys_info$collection_1_phase = SERVICE_INITIALIZATION then do;
	     call check_stop (STOP_NUM, "move_non_perm_wired_segs");
	     call move_non_perm_wired_segs;		/* use memory, move segs, fix SLT header */
	end;

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "get_io_segs");
	call get_io_segs;				/* Allocate the disk_seg, pvt, iom_data, and ioi_data */
						/* appropriately for the configuration */

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "iom_data_init");
	call iom_data_init;				/* Initialize the iom_data for all configured devices. */

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "ocdcm_$init_all_consoles");
	call ocdcm_$init_all_consoles;

	parm_ptr = null;
	call config_$find_parm ("loud", parm_ptr);
	yell_and_scream = (parm_ptr ^= null);

	ready_to_y_and_s = "1"b;

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "scas_init");
	call scas_init;				/* Set up the SCAS again */

%set STOP_NUM to STOP_NUM + 1;

	if sys_info$collection_1_phase ^= SERVICE_INITIALIZATION then do;
	     call check_stop (STOP_NUM, "tc_init$early");
	     call tc_init$early;
	end;
	else do;
	     call check_stop (STOP_NUM, "tc_init");
	     call tc_init;
	end;

%set STOP_NUM to STOP_NUM + 1;

	if sys_info$collection_1_phase = SERVICE_INITIALIZATION then do;
	     call check_stop (STOP_NUM, "init_sst$normal");
	     call init_sst$normal;			/* Set up the full sized SST, with table sizes determined */
	end;
	else do;
	     call check_stop (STOP_NUM, "init_sst$early");
	     call init_sst$early;
	end;

	call debug_check$copy_card;			/* not worth a stop */

	if sys_info$collection_1_phase = EARLY_INITIALIZATION
	     | sys_info$collection_1_phase = BOOT_INITIALIZATION
	     | sys_info$collection_1_phase = SERVICE_INITIALIZATION then
	     call announce_chwm$before;		/* from the config deck, and announce the size of memory. */

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "disabling slt allocation");
	slt.free_core_start, slt.free_core_size = 0;	/* no more SLT mem allocations */

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "initialize_faults$interrupt_init");
	call initialize_faults$interrupt_init;

%set STOP_NUM to STOP_NUM + 1;

	if ^done_one_initialization then do;
	     call check_stop (STOP_NUM, "init_bce$wired");/* Bootload Command Environment */
	     call init_bce$wired;
	end;

	if sys_info$collection_1_phase = EARLY_INITIALIZATION then do;

/* This call locates the RPV either via sys_boot_info or */
/* operator query, as needed. it fills in the config */
/* ROOT card, and fixes the fields in the prph dska and appropriate mpc */
/* and (someday) mpcs cards. After it is called, paging can really be setup */

%set STOP_NUM to STOP_NUM + 1;

	     call check_stop (STOP_NUM, "find_rpv_subsystem");
	     call find_rpv_subsystem;
	end;

	if ^((sys_info$collection_1_phase = SERVICE_INITIALIZATION) |
	     (sys_info$collection_1_phase = EARLY_INITIALIZATION) |
	     (sys_info$collection_1_phase = BOOT_INITIALIZATION & sys_boot_info$assume_config_deck)) then do;

%set STOP_NUM to STOP_NUM + 1;

	     call check_stop (STOP_NUM, "load_disk_mpcs");
	     call load_disk_mpcs;
	end;

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "init_pvt");
	call init_pvt;

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "read_disk$init");
	call read_disk$init;			/* This has to come AFTER init_pvt */

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "init_root_vols");
	call init_root_vols (code);
	if code ^= 0 then
	     if sys_info$collection_1_phase = EARLY_INITIALIZATION then do;
		sys_boot_info$boot_without_query = "0"b;
		call TURN_OFF;
		go to RETRY_RPV;
	     end;
	     else call syserr (CRASH, "initializer: bad root volume.");

%set STOP_NUM to STOP_NUM + 1;

	if sys_info$collection_1_phase ^= SERVICE_INITIALIZATION then do;

	     call check_stop (STOP_NUM, "establish_temp_segs");
	     call establish_temp_segs;

%set STOP_NUM to STOP_NUM + 1;

	     call check_stop (STOP_NUM, "find_file_partition");
	     call find_file_partition;

	     if ^done_one_initialization then do;

%set STOP_NUM to STOP_NUM + 1;

		call check_stop (STOP_NUM, "tape_reader$init");
		call tape_reader$init;		/* Initialize the tape reading package. */

%set STOP_NUM to STOP_NUM + 1;

		call check_stop (STOP_NUM, "load_mst");
		call load_mst;

%set STOP_NUM to STOP_NUM + 1;

		call check_stop (STOP_NUM, "tape_reader$final");
		call tape_reader$final;
	     end;

%set STOP_NUM to STOP_NUM + 1;

	     call check_stop (STOP_NUM, "load_mst$init_commands");
	     call load_mst$init_commands;		/* and get into addr space
						load_mst$make_permanent is the counterpart for service pass */

%set STOP_NUM to STOP_NUM + 1;

	     if ^done_one_initialization then do;
		call check_stop (STOP_NUM, "init_bce$paged");
		call init_bce$paged;		/* and add to bce_data switches */
	     end;
	end;
	else do;

%set STOP_NUM to STOP_NUM + 1;

	     call check_stop (STOP_NUM, "load_mst$make_permanent");
	     call load_mst$make_permanent;		/* move coll 1.5 perm segs into coll 2 */
	end;

	sys_boot_info$rpv_cold_boot = "0"b;		/* in case it was on; we are done with special cold boot operations */

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "scs_and_clock_init$date_time");
	call scs_and_clock_init$date_time;		/* power up the date/time software */

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "io_config_init");
	call io_config_init;			/* initialize io_config_data */

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "ioi_init");
	call ioi_init;				/* Initialize the I/O Interfacer. */

%set STOP_NUM to STOP_NUM + 1;

	if sys_info$collection_1_phase = SHUT_INITIALIZATION then
	     sys_info$collection_1_phase = BOOT_INITIALIZATION;

	safe_config_deck$ = config_deck$;		/* config_deck$ is good, save for crashing */

	if ^done_one_initialization then do;
	     done_one_initialization = "1"b;		/* don't redo per-system initializations (set before saving toehold) */

/* Set up crash handler. */

	     call check_stop (STOP_NUM, "init_toehold");
	     call init_toehold;
	     if toehold$.memory_state = At_bce__crash | toehold$.memory_state = At_bce__shutdown then return; /* return to bce returns to image saved here */
	end;
	else if sys_info$collection_1_phase = EARLY_INITIALIZATION | sys_info$collection_1_phase = BOOT_INITIALIZATION | sys_info$collection_1_phase = SERVICE_INITIALIZATION then do;
	     call check_stop (STOP_NUM, "init_toehold$save_safe_config_deck");
	     call init_toehold$save_safe_config_deck;
	end;

	if sys_info$collection_1_phase = RE_EARLY_INITIALIZATION then
	     sys_info$collection_1_phase = EARLY_INITIALIZATION;

	if sys_info$collection_1_phase = EARLY_INITIALIZATION then
	     toehold$.memory_state = At_bce__early;
	else if sys_info$collection_1_phase = BOOT_INITIALIZATION then
	     toehold$.memory_state = At_bce__boot;
	else if sys_info$collection_1_phase = SERVICE_INITIALIZATION then
	     toehold$.memory_state = Multics;

	if sys_info$collection_1_phase = EARLY_INITIALIZATION | sys_info$collection_1_phase = BOOT_INITIALIZATION | sys_info$collection_1_phase = CRASH_INITIALIZATION | sys_info$collection_1_phase = BCE_CRASH_INITIALIZATION then do;

%set STOP_NUM to STOP_NUM + 1;

	     call check_stop (STOP_NUM, "bce_get_to_command_level");
	     call bce_get_to_command_level (addr (bce_request_table_$bce_request_table_));

	     if sys_info$collection_1_phase = BCE_CRASH_INITIALIZATION then do; /* operator decided to boot again */
		sys_info$collection_1_phase = BOOT_INITIALIZATION;
		toehold$.memory_state = At_bce__boot;
	     end;

/* As of now, the Early Initialization has completed its task. */
	end;

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "establish_config_deck");
	call establish_config_deck;			/* read in the config deck */

	if sys_info$collection_1_phase = SERVICE_INITIALIZATION then do;

%set STOP_NUM to STOP_NUM + 1;

	     call check_stop (STOP_NUM, "init_partitions");
	     call init_partitions;

%set STOP_NUM to STOP_NUM + 1;

	     call check_stop (STOP_NUM, "make_segs_paged");
	     call make_segs_paged;			/* Make all pageable segments paged */

%set STOP_NUM to STOP_NUM + 1;

	     call check_stop (STOP_NUM, "collect_free_core");
	     call collect_free_core;			/* and collect all unused core */
	     call announce_chwm$after;		/* Announce the results */
	end;
	return;

     end collection_1;
%page;

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "delete_segs$temp 1");
	call delete_segs$temp;			/* Delete collection one temp segs */

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "disk_reader$init");
	call disk_reader$init;

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "segment_loader 2.0");
	call segment_loader;			/* Load collection 2 */

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "pre_link_hc 2.0");
	call pre_link_hc;				/* prelink collection 2 */
%page;
/* COLLECTION TWO */

collection_2:
     entry;					/* This will make setting breakpoints in bce_probe easier. */


	sys_info$initialization_state = 2;		/* Begin collection 2 */

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "initialize_faults$fault_init_two");
	call initialize_faults$fault_init_two;

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "getuid$init");
	call getuid$init;				/* set up UID generator */
%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "init_vtoc_man");
	call init_vtoc_man;				/* Set up vtoc_man's buffers */

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "dbm_man$init");
	call dbm_man$init;				/* Init the volume dumper's bit map. */


%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "init_scavenger_data");
	call init_scavenger_data;

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "init_dm_journal_seg");
	call init_dm_journal_seg;


%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "init_sys_var");
	call init_sys_var;				/* Set some system variables */

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "dir_lock_init");
	call dir_lock_init;

%set STOP_NUM to STOP_NUM + 1;

/* ioi_page_table$init is also called by ioi_init, but this call is
   needed to have it switch over to using io_page_table_seg. */

	call check_stop (STOP_NUM, "ioi_page_table$init");
	call ioi_page_table$init;			/* setup standard io_page_table_seg */

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "fnp_init");
	call fnp_init;				/* make tty_buf SDW before tc_init$part_2 */

/* *	After this point, changes to the hardcore descriptor segment may
   *	not be reflected in idle process and hproc descriptor segments.
   */

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "tc_init$part_2");
	call tc_init$part_2;			/* Stage 2 of traffic control initialization */


%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "init_syserr_log");
	call init_syserr_log ();

	call syserr (LOG, "initializer: Multics ^a (^a) syserr logging initialized", active_all_rings_data$system_id,
	     active_all_rings_data$version_id);


%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "init_str_seg");
	call init_str_seg;				/* Initialize the trailer seg */

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "init_sst_name_seg");
	call init_sst_name_seg;			/* Set up the SST name table */


%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "init_hardcore_gates");
	call init_hardcore_gates;			/* initialize linkage pointers in gates */

/* The permanent file system has not been touched up to this point.
   Everything has been placed in the hc partition.		*/


%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "accept_rpv");
	call accept_rpv;				/* Flush PD, salvage, load vol map */

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "init_lvt");
	call init_lvt;				/* get LVT in order */

	call condition_ ("bad_dir_", bad_dir_handler);
	call condition_ ("seg_fault_error", seg_fault_handler);

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "init_root_dir");
	call init_root_dir;				/* Make the "root" known. */

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "kst_util$garbage_collect");
	call kst_util$garbage_collect ((0));		/* Clean up the KST after salvaging */

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "init_branches");
	call init_branches;				/* Set up branches for init. and per-process segs. */

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "syserr_seg_manager$initialize_log_names");
	call syserr_seg_manager$initialize_log_names ();

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "init_stack_0");
	call init_stack_0;

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "delete_segs$temp 2.0");
	call delete_segs$temp;			/* Delete collection 2 temp segs */
%page;

/*
   Initialize collection 3.
*/
	sys_info$initialization_state = 3;		/* Begin collection 3 */

collection_3:
     entry;					/* This will make setting breakpoints in bce_probe easier. */

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "load_system");
	call load_system;				/* Load collection 3. */

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "disk_reader$final");
	call disk_reader$final;

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "tc_init$start_other_cpus");


	call tc_init$start_other_cpus;		/* Start up additional CPUs */
	sys_info$initialization_state = 4;		/* Begin normal operation (collection 4) */
	sys_info$service_system = "1"b;

%set STOP_NUM to STOP_NUM + 1;

	call check_stop (STOP_NUM, "init_proc");

	return;
%page;
bad_dir_handler:
     procedure (a_mcp, a_condition, a_infop, a_wcp, a_continue);

dcl  a_mcp			pointer parameter;
dcl  a_condition			char (*) parameter;
dcl  a_infop			pointer parameter;
dcl  a_wcp			pointer parameter;
dcl  a_continue			bit (1) aligned parameter;

dcl  ppr				pointer;
dcl  tpr				pointer;

dcl  pvt$root_pvtx			fixed bin ext;

	pvt_arrayp = addr (pvt$array);
	pvt_array (pvt$root_pvtx).vol_trouble_count = pvt_array (pvt$root_pvtx).vol_trouble_count + 1;


CRASH_BAD_DIR:
	call syserr (CRASH, "initializer: bad_dir_ signal raised.");
	goto CRASH_BAD_DIR;



seg_fault_handler:
     entry (a_mcp, a_condition, a_infop, a_wcp, a_continue);

	mcp = a_mcp;
	scup = addr (mc.scu);
	ppr = pointer (baseptr (binary (scu.psr, 15)), scu.ilc);
	tpr = pointer (baseptr (binary (scu.tsr, 15)), scu.ca);

CRASH_SEG_FAULT:
	call syserr$error_code (CRASH, mc.errcode, "initializer: Segment fault error by ^p referencing ^p:", ppr, tpr);
	goto CRASH_SEG_FAULT;

     end bad_dir_handler;

check_stop:
     procedure (P_Stop_Number, About_To);
dcl  P_Stop_Number			fixed bin;
dcl  About_To			char (*);
dcl  cpu_switches			bit (36) aligned;
dcl  call_bce			entry;
dcl  stop_number			fixed bin;
dcl  Stop_Number			fixed bin;

	Stop_Number = P_Stop_Number + 1000 * sys_info$collection_1_phase;

/*	if meter_initialization then call initialization_meters$entry (Stop_Number, About_To); */

	if yell_and_scream & ready_to_y_and_s then call syserr (ANNOUNCE, "initializer: ^d^20t^a^2xstate ^d^2xphase ^d.", Stop_Number, About_To, sys_info$initialization_state, sys_info$collection_1_phase);

	call pmut$trace_rsw (cpu_switches);
	if substr (cpu_switches, 1, 9) = "123"b3 then do;
	     stop_number = BCD (substr (cpu_switches, 10, 24));
	     if stop_number = Stop_Number then do;
		if yell_and_scream & ready_to_y_and_s then call syserr (ANNOUNCE, "initializer: ^a check_stop.", About_To);
		call call_bce;
	     end;
	end;

BCD:
	procedure (Bits) returns (fixed bin);

declare  Bits			    bit (24);
declare  digits			    (4) fixed bin;
declare  digits_bits		    (4) bit (6) unaligned defined (Bits);

	     digits = bin (digits_bits, 6);		/* Aggregate */
	     return (digits (1) * 1000 + digits (2) * 100 + digits (3) * 10 + digits (4));
	end BCD;

     end check_stop;

TURN_OFF: procedure;

dcl  not_masked			bit (1) aligned init ("0"b);

	not_masked = "1"b;

TURN_OFF$$masked: entry;				/* We are already masked; also, our masks may be screwed up so don't try masking. */

	ready_to_y_and_s = "0"b;
	if not_masked then call ocdcm_$reconfigure ("", SUSPEND_CONSOLE_SERVICE, (0)); /* deactivate the console... */
	addr (syserr_data$syserr_area) -> sd.ocdcm_init_flag = "0"b; /* PANIC */

	call bce_abs_seg$free;			/* release SDWs */

	if not_masked then call pmut$set_mask (scs$sys_level);
	call initialize_faults$fault_init_one;

	addr (int_unpaged_page_tables$) -> upt.current_length = saved_iupt_lth;
	addr (unpaged_page_tables$) -> upt.current_length = saved_upt_lth;
	slt.free_core_start = saved_free_core_start;
	slt.free_core_size = saved_free_core_size;
	addr (unpaged_page_tables$) -> upt.sst_absloc = 0;
	addr (unpaged_page_tables$) -> upt.sst_last_loc = 0; /* so we don't confuse page table lookers */
	return;
     end TURN_OFF;
%page; %include collection_1_phases;
%page; %include config_intk_card;
%page; %include flagbox;
%page; %include opc_reconfig_options;
%page; %include pvt;
%page; %include pvte;
%page; %include slt;
%page; %include syserr_constants;
%page; %include syserr_data;
%page; %include toe_hold;
%page; %include unpaged_page_tables;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   initializer: intk card missing.

   S: $crash

   T: $init

   M: No "intk" card was found in the config deck.

   A: $config

   Message:
   initializer: Bad root volume.

   S: $crash

   T: $init

   M: A volume specified on a ROOT card was found ill formatted by
   init_root_vols.

   A: $recover

   Message:
   initializer: Multics SYSID (VERSION) syserr logging initialized.

   S: $log

   T: $init

   M: This is the first syserr message produced by every bootload.  It is
   produced as soon as the syserr logging mechanism is made operative, which
   insures that it is the first message logged for every bootload.  It
   identifies the system ID and version of the running system.

   A: $ignore

   Message:
   initializer: bad_dir_ signal raised

   S: $crash

   T: $init

   M: During system bootload, directory control has encountered an invalid
   directory.  This usually occurs due to damage to the root or to
   >system_control_1.  The RPV is automatically scheduled for volume salvage.

   A: $recover

   Message:
   initializer: Segment fault error by PPPP referencing PPPP: ERROR

   S: $crash

   T: $init

   M: During system bootload, a segment fault error has occurred.  This
   usually indicates running out of room on the RLV.  A BOOT RPVS may recover
   some of this space.  The procedure causing the error and the segment being
   referenced are identified, along with the error message.

   A: $recover

   Message:
   initializer: STOP_NUM  ENTRY_TO_CALL  state ISTATE  phase CPHASE.

   S: $beep

   T: $init

   M: The "loud" config parm is currently enabled.  This message gives the
   current stop number (STOP_NUM), that can be used to stop the initialization
   process and return to BCE before calling ENTRY_TO_CALL.  The current values
   of sys_info$initialization_state (ISTATE) and sys_info$collection_1_phase
   (CPHASE) are also given.

   A: $ignore

   Message:
   initializer: ENTRY_TO_CALL check_stop.

   S: $beep

   T: $init

   M: The initializer has detected that the first nine data switches on the CPU
   contain an octal "123" and the STOP number of the entry to be called and the
   current collection_1_phase match the other CPU data switches.  The
   initializer calls BCE after displaying this message, but before actually
   calling the entry.  The CPU data switches have the following usage:
   .spf;.inl +10;.unl +9
   0  -  8: must be set to an octal "123" for any other switches to be valid.
   .unl +9
   9  - 14: area for the BCD value of the collection_1_phase to stop in.
   .unl +9
   15 - 20: area for the BCD hundreds digit of the STOP number.
   .unl +9
   21 - 26: area for the BCD tens digit of the STOP number.
   .unl +9
   27 - 32: area for the BCD ones digit of the STOP number.
   .unl +9
   33 - 35: not used or checked.
   .inl -10

   A: Execute any BCE functions desired. Modify the setting of the CPU data
   switches as required. Execute the BCE "go" function to resume initialization.

   END MESSAGE DOCUMENTATION */
     end real_initializer;
