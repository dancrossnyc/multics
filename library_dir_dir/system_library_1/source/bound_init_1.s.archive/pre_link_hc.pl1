/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */
pre_link_hc:
     procedure;

/* Snap all the links in the hardcore. */
/* Written November 1982 by C. Hornig */

dcl  definitions_$ external;
dcl  lot$ external;
dcl  slt$ external;

dcl  get_defptr_ entry (ptr, ptr, ptr, ptr, fixed bin (35));
dcl  slt_manager$get_seg_ptr entry (char (32) aligned) returns (ptr);

dcl  segno fixed bin (15);

/* * * * * * * * * * PRE_LINK_HC * * * * * * * * * */

	definitions_ptr = addr (definitions_$);
	lotp = addr (lot$);
	sltp = addr (slt$);

	do segno = slt.first_sup_seg to slt.last_sup_seg;
	     call process_seg;
	end;

	do segno = slt.first_init_seg to slt.last_init_seg;
	     call process_seg;
	end;

	return;

/* * * * * * * * * * PROCESS_SEG * * * * * * * * * * */

process_seg:
     procedure;

dcl  (lp, dp, link_ptr, tgtp) ptr;
dcl  link_offset fixed bin (18);

	if unspec (lot.lp (segno)) = ""b then return;

	lp = lot.lp (segno);			/* linkage section */
	dp = lp -> header.def_ptr;			/* definitions */

	do link_offset = binary (lp -> header.stats.begin_links, 18) by 2
	     to binary (lp -> header.stats.block_length, 18) - 1;

	     link_ptr = addrel (lp, link_offset);
	     if link_ptr -> link.ft2 ^= "46"b3 then goto next_link;
						/* only look at unsnapped links */
	     tgtp = null ();
	     exp_ptr = addrel (dp, link_ptr -> link.exp_ptr);
						/* find exp word */
	     type_ptr = addrel (dp, exp_word.type_relp);	/* and type pair */
	     if type_pair.type = LINK_SELF_BASE
	     then if type_pair.segname_relp = SECTION_TEXT then tgtp = baseptr (segno);
		else if type_pair.segname_relp = SECTION_LINK then tgtp = lp;
		else goto next_link;
	     else if type_pair.type = LINK_REFNAME_BASE then call find_seg;
	     else if (type_pair.type = LINK_REFNAME_OFFSETNAME) | (type_pair.type = LINK_CREATE_IF_NOT_FOUND) then do;
		call find_seg;
		call find_def;
		end;
	     else goto next_link;

	     tgtp = addrel (tgtp, exp_word.expression);
	     addr (tgtp) -> link.modifier = link_ptr -> link.modifier;
	     link_ptr -> link = addr (tgtp) -> link;

next_link:
	end;

	return;

/* * * * * * * * * FIND_SEG * * * * * * * * */

find_seg:
	procedure;

	     tgtp = slt_manager$get_seg_ptr ((addrel (dp, type_pair.segname_relp) -> acc_string.string));
	     if tgtp = null () then goto next_link;
	     return;
	end find_seg;

/* * * * * * * * * FIND_DEF * * * * * * * * * */

find_def:
	procedure;

dcl  code fixed bin (35);

	     call get_defptr_ (addrel (definitions_ptr, definitions.dot (binary (baseno (tgtp), 15)).offset),
		addrel (dp, type_pair.segname_relp), addrel (dp, type_pair.offsetname_relp), def_ptr, code);
	     if code ^= 0 then goto next_link;

	     if definition.class = CLASS_TEXT then ;
	     else if definition.class = CLASS_LINKAGE then tgtp = lot.lp (binary (baseno (tgtp), 15));
	     else goto next_link;

	     tgtp = addrel (tgtp, definition.thing_relp);

	     return;
	end find_def;
%page;
%include definition_dcls;

     end process_seg;

%include hc_definitions_seg;
%include linkdcl;
%include lot;
%include slt;

     end pre_link_hc;
