/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4,delnl,insnl,tree,ifthenstmt,indnoniterend */
tc_init:
     proc;

/* This program initializes the various traffic controller data bases, the idle process
   data bases, and starts up the traffic controller. The entry part_2 is called after paging is
   operative and after the initializer's descriptor segment has all permanent hardcore SDW's filled
   in. It creates the idle processes and turns ON multiprogramming after starting the bootload cpu.
   The entry start_other_cpus is called late in initialization to get the other processors running.
*/

/* Last modified (date and reason):
   5/11/77 by RE Mullen for concurrent scheduler
   2/4/76	by S. Webber rewrite for new reconfiguration
   4/20/77 by B. Greenberg for PRDS renaming
   6/21/77 by M. Weaver to move template_pds stuff to part_2
   5/10/79 by B. Greenberg for stack_0 sharing
   10/29/80 by M. Pierret for pin_weight and io_priority
   3/5/81 by J. Bongiovanni for site-settable prds size
   11/11/81 by J. A. Bush to display contents of bootload cpu ID PROM (DPS8 CPU)
   before adding  other cpus whose state is "ON".
   04/04/81 by W. Olin Sibert, to remove direct SDW hacking
   01/09/81 by W. Olin Sibert, to make it runnable twice for Bootload Multics.
   4/27/82 by J. Bongiovanni for wcte.interactive_q, gv_integration
   7/15/82 by BIM to merge Siberts changes with Bongiovanni's.
   8/13/82 by BIM to fiddle, once again, with PID's.
   9/17/82 by J. Bongiovanni for tc_data$abort_ips_mask
   2/16/83 by E. N. Kittlitz for hex floating point.
   6/27/83 by Keith Loepere for early entrypoint.
   830728 by E. A. Ranzenbach for operator console polling time.
   10/4/83 by Keith Loepere for paged idle_pdses and idle_dsegs.
   84.11.15 by M. Pandolf to include hc_lock.
   11/05/84 by Keith Loepere to rename terminate  to terminate_.
   Modified 1984-11-12 by E. Swenson for IPC event channel validation.
   The value of apte.ipc_r_offset is initialized here for the
   Initializer process.
   Modified March 1985 by Keith Loepere to fix a bug in multiple pass init.
*/

/* Automatic */

dcl  early_call bit (1) aligned;
dcl  n_words fixed bin (18);
dcl  first_segno fixed bin;
dcl  processor_index fixed bin;
dcl  prdsp ptr;
dcl  no_apt fixed bin;
dcl  no_itt fixed bin;
dcl  tc_data_size fixed bin (18);
dcl  tc_data_no fixed bin;
dcl  tc_data_header_no fixed bin;
dcl  tc_data_header_ptr pointer;
dcl  tsdw fixed bin (71);
dcl  i fixed bin;
dcl  template_pds_size fixed bin (18);
dcl  idle_pds_p ptr;
dcl  aptp ptr;
dcl  aptx fixed bin;
dcl  ittp ptr;
dcl  ittx fixed bin;
dcl  tsize fixed bin (18);
dcl  time fixed bin (71);
dcl  code fixed bin (35);
dcl  prds_name char (32);
dcl  prds_length_kw fixed bin;
dcl  cpu_model char (13) aligned;			/* storage for cpu model number (from ID PROM) */
dcl  cpu_serial char (13) aligned;			/* storage for cpu serial number (from ID PROM) */
dcl  cpu_ship_date char (8) aligned;			/* storage for cpu ship date (from ID PROM) */
dcl  table_value fixed bin;

dcl  dseg_no fixed bin static;
dcl  pds_no fixed bin static;
dcl  prds_no fixed bin static;
dcl  template_pds_p ptr static;
dcl  tag fixed bin static;
dcl  idle_dsegs_sdw fixed bin (71) internal static;	/* pointers and SDWs for idle_dsegs$ and idle_pdses */
dcl  idle_pdses_sdw fixed bin (71) internal static;
dcl  idle_dsegs_p ptr static;
dcl  idle_pdses_p ptr static;
dcl  dseg_size fixed bin (18) internal static;		/* Amount to actually copy into idle dseg */
dcl  pds_size fixed bin (18) static;

dcl  header (n_words) fixed bin based;
dcl  copy_id bit (36) aligned based;
dcl  copy_ptr ptr based;
dcl  copy_group_id char (32) aligned based;
dcl  copy_pds (pds_size) fixed bin based;
dcl  copy_dseg (0:255) fixed bin (71) based;		/* stop copying before init segs */
dcl  1 apt (1) aligned like apte based (aptp);
dcl  1 itt (1) aligned based (ittp),
       2 fp bit (18) unaligned,
       2 bp bit (18) unaligned,
       2 filler (7) fixed bin;

dcl  append$branchx
	entry (char (*), char (*), fixed bin (5), (3) fixed bin, char (*), fixed bin, fixed bin, fixed bin,
	fixed bin (35));
dcl  chname$cfile entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl  config_$find entry (char (4) aligned, ptr);
dcl  config_$find_table entry (char (4) aligned, fixed bin);
dcl  delentry$dfile entry (char (*), char (*), fixed bin (35));
dcl  getuid entry returns (bit (36) aligned);
dcl  get_main entry (ptr, fixed bin (18), fixed bin (71));
dcl  get_ptrs_$given_segno entry (fixed bin) returns (ptr);
dcl  grab_aste$prewithdraw entry (ptr, fixed bin (19), fixed bin (35)) returns (ptr);
dcl  init_processor$init entry;
dcl  init_processor$return entry ext;
dcl  initiate entry (char (*), char (*), char (*), fixed bin, fixed bin, ptr, fixed bin (35));
dcl  pmut$swap_sdw entry (ptr, ptr);
dcl  privileged_mode_ut$read_id_prom entry (char (*) aligned, fixed bin);
dcl  pxss$get_entry entry (ptr);
dcl  sdw_util_$construct entry (ptr, ptr);
dcl  sdw_util_$dissect entry (ptr, ptr);
dcl  start_cpu entry (fixed bin, fixed bin (35));
dcl  syserr entry options (variable);
dcl  syserr$error_code entry options (variable);
dcl  terminate_$teseg entry (ptr, fixed bin (1), fixed bin (35));
dcl  thread$cin entry (ptr, bit (18) unaligned);

dcl  active_all_rings_data$stack_base_segno fixed bin (18) ext;
dcl  dseg$ (0:1023) fixed bin (71) external static;
dcl  error_table_$noentry external fixed bin (35);
dcl  idle_pdses$ (0:16383) fixed bin external static;
dcl  idle_dsegs$ (0:8191) fixed bin (71) external static;	/* All the idle process DSEGs */
dcl  prds$ ext;
dcl  prds$processor_tag fixed bin (3) external;
dcl  slt$ ext;
dcl  sys_info$hfp_exponent_available bit (1) aligned external;
dcl  sys_info$quit_mask bit (36) aligned external;
dcl  sys_info$susp_mask bit (36) aligned external;
dcl  sys_info$term_mask bit (36) aligned external;
dcl  sys_info$system_type fixed bin external static;
dcl  tc_data$ ext;
dcl  tc_data$prds_length fixed bin (19) external;
dcl  tc_data_header$ fixed bin external static;

dcl  pds$ ext;
dcl  pds$apt_ptr ptr ext;
dcl  pds$data fixed bin ext;
dcl  pds$lock_id bit (36) aligned external;
dcl  pds$dstep bit (18) aligned ext;
dcl  pds$initial_procedure ptr ext;
dcl  pds$process_group_id char (32) ext;
dcl  pds$processid bit (36) aligned ext;
dcl  pds$stack_0_ptr ptr ext;
dcl  pds$stack_0_sdwp ptr ext;
dcl  pds$trace ext;

dcl  template_pds$ ext;
dcl  template_pds$quota_inhib fixed bin external;
dcl  template_pds$save_history_regs bit (1) aligned external;
dcl  template_pds$apt_ptr ptr ext;
dcl  template_pds$initial_procedure ptr ext;
dcl  template_pds$process_group_id char (32) ext;
dcl  template_pds$processid bit (36) aligned ext;
dcl  template_pds$stack_0_sdwp ptr ext;
dcl  template_pds$stack_0_ptr ptr ext;

dcl  LETTERS char (8) internal static options (constant) init ("ABCDEFGH");
dcl  PRDS_DIR char (32) internal static options (constant) init (">system_library_1");
dcl  RW_mode fixed bin (5) internal static options (constant) init (01010b);
dcl  seg_rb (3) fixed bin internal static options (constant) init (0, 0, 0);

dcl  (addr, addrel, baseno, baseptr, bin, binary, bit, clock, divide, hbound, lbound, max, min, null, ptr, rel, size,
     string, substr, unspec) builtin;
%page;
	early_call = "0"b;
	go to part_1;

early:
     entry;
	early_call = "1"b;

part_1:
	tcmp = addr (tc_data$);			/* get necessary pointers, etc. */
	idle_pdses_p = addr (idle_pdses$);
	idle_dsegs_p = addr (idle_dsegs$);
	tc_data_no = bin (baseno (tcmp), 18);
	tc_data_header_ptr = addr (tc_data_header$);
	tc_data_header_no = binary (baseno (tc_data_header_ptr), 18);
	pds_no = bin (baseno (addr (pds$)), 18);
	dseg_no = bin (baseno (addr (dseg$)), 18);
	prds_no = bin (baseno (addr (prds$)), 18);

	if dseg$ (tc_data_header_no) = 0 then do;	/* First time - make header valid */
	     addr (addr (slt$) -> slt.seg (tc_data_no)) -> slte.paged = "0"b;
						/* Force to low memory */
	     call pmut$swap_sdw (tc_data_header_ptr, addr (dseg$ (tc_data_no)));
	     end;

	n_words = bin (rel (addr (tcm.apt)), 18);
	tag = scs$bos_processor_tag;

	if early_call then do;
	     no_apt = 4;
	     no_itt = 20;
	     end;
	else do;
	     tcd_cardp = null ();
	     call config_$find (TCD_CARD_WORD, tcd_cardp);/* get TCD card for sizes of APT and ITT. */
	     if tcd_cardp = null () then do;		/* not found, use defaults */
		no_apt = tc_data_header_ptr -> tcm.apt_size;
		no_itt = tc_data_header_ptr -> tcm.itt_size;
		end;
	     else do;				/* use values from card */
		no_apt = tcd_card.no_apt;
		no_itt = tcd_card.no_itt;
		end;
	     end;

/* Now, allocate the new tc_data in wired memory. The header specifies it as paged, since
   the header is created as a cds and must be copied into the wired tc_data. The first time
   this code is executed, the tc_data_header segment will be created (defined in the header
   as a zero length fabricated segment) as a segment defining the version of tc_data read
   from the tape, which contains only the tc_data header. Subsequently, tc_data is allocated
   in wired memory, and the header (defined by tc_data_header) is copied into it.
*/

	tc_data_size = n_words + no_apt * size (apt) + no_itt * size (itt);

	call get_main (tcmp, tc_data_size, tsdw);	/* get storage for tc_data */
	call pmut$swap_sdw (tcmp, addr (tsdw));		/* copy tc_data into new storage */
	tcmp -> header = tc_data_header_ptr -> header;	/* copy header */

/* We are now using the new wired version of tc_data. */

	tcm.apt_size = no_apt;
	tcm.itt_size = no_itt;

	tcm.system_type = sys_info$system_type;		/* Remember this fellow here */

/* Init WCTE's, then setup first two for self and others respectively. */


	do i = 0 to 16;
	     tcm.wcte (i).fp, tcm.wcte (i).bp = rel (addr (tcm.wcte (i)));
	     tcm.wcte (i).mnbz = "1"b;		/* Make this a sentinel */
	     tcm.wcte (i).resp1 = 2 * 1024 * 1024;
	     tcm.wcte (i).quantum1 = 1024 * 1024;
	     tcm.wcte (i).resp2 = 64 * 1024 * 1024;
	     tcm.wcte (i).quantum2 = 2 * 1024 * 1024;
	     tcm.wcte (i).realtime = 0;
	     tcm.wcte (i).purging = 1;
	     tcm.wcte (i).maxel = 0;			/* 0 means no limit */
	     tcm.wcte (i).nel = 0;
	     tcm.wcte (i).pin_weight = 1;
	     tcm.wcte (i).flags.io_priority = "0"b;
	     tcm.wcte (i).flags.interactive_q = "1"b;
	end;



	tcm.credits_per_scatter = 512 * 1024;		/* passout this many credits this often */
						/* credits are in microseconds */
	tcm.wcte (0).flags.defined = "1"b;
	tcm.wcte (0).flags.io_priority = "1"b;
	tcm.wcte (0).minf = 256 * 1024;		/* 50% for Initializer if need be. */
	tcm.wcte (0).resp1, tcm.wcte (0).resp2 = 256 * 1024;
						/* within 1/4 sec */
	tcm.wcte (0).quantum1, tcm.wcte (0).quantum2 = 2 * 1024 * 1024;
						/* give 2 sec */
	tcm.wcte (0).pin_weight = 3;			/* This number may have to be tuned */
	tcm.wcte (0).realtime = 1;
	tcm.wcte (1).flags.defined = "1"b;
	tcm.wcte (1).minf = 512 * 1024;		/* and 100% for everybody else. */
						/* The initializer does not generate credits */
	tcm.min_wct_index = rel (addr (tcm.wcte (0)));
	tcm.max_wct_index = rel (addr (tcm.wcte (1)));

/* Now set up the APT */

	aptp = ptr (tcmp, n_words);			/* APT is right after header */
	tcm.empty_q = rel (aptp);			/* thread first into empty list */
	do aptx = 1 to no_apt - 1;
	     apt (aptx).fp = rel (addr (apt (aptx + 1)));
	     apt (aptx).lock = "777777"b3;		/* init to unlocked, anyting but zero */
	end;
	apt (no_apt).lock = "777777"b3;		/* init to unlocked, anyting but zero */

	tcm.stat (0) = no_apt;			/* all processes are empty */

/* Now do the ITT */

	tcm.used_itt = 0;
	ittp = addr (apt (no_apt + 1));
	do ittx = 1 to no_itt - 1;
	     itt (ittx).fp = rel (addr (itt (ittx + 1)));
	end;
	itt (no_itt).fp = (18)"1"b;			/* head -1 when all itte taken, 0 means locked */
	tcm.itt_free_list = rel (ittp);
	tcm.cid2 = divide (no_itt - no_apt, 2, 18, 0);
	tcm.cid3 = divide (no_itt - no_apt, 3, 18, 0);
	tcm.cid4 = divide (no_itt - no_apt, 4, 18, 0);

/* Fill in data from SCHD card. */

	schd_cardp = null ();			/* search for config card */
	call config_$find (SCHD_CARD_WORD, schd_cardp);
	if schd_cardp ^= null () then do;		/* if found */
	     tcm.working_set_factor = schd_card.ws_factor;
	     tcm.tefirst = schd_card.tefirst * 125000;
	     tcm.telast = schd_card.telast * 125000;
	     tcm.timax = schd_card.timax * 125000;
	     if schd_card.min_eligible > 0 then tcm.min_eligible = schd_card.min_eligible * 262144;
	     if schd_card.max_eligible > 0
	     then if schd_card.max_eligible * 262144 >= tcm.min_eligible
		then tcm.max_eligible = schd_card.max_eligible * 262144;
	     if schd_card.max_max_eligible > 0 & schd_card.max_max_eligible < 1000
	     then tcm.max_max_eligible = schd_card.max_max_eligible * 262144;
	     else tcm.max_max_eligible = tcm.max_eligible + (10 * 262144);
	     end;

	if (tcm.max_eligible + tcm.max_stopped_stack_0 * 262144) <= tcm.max_max_eligible
	     & tcm.min_eligible <= tcm.max_eligible
	then ;					/* All OK */
	else call syserr (1, "Inconsistent SCHD config card values.");

	tcm.gv_integration = 4 * tcm.telast;

	tcm.abort_ips_mask = sys_info$quit_mask | sys_info$susp_mask | sys_info$term_mask;

/* Set up the length of the prds, either from the slt or the TBLS Config Card				*/

	sltep = addr (addr (slt$) -> slt.seg (prds_no));
	prds_length_kw = max (slte_uns.cur_length, slte_uns.max_length);
						/* default */

	call config_$find_table ("prds", table_value);	/* See if a TBLS PRDS card is to be found */
	if (table_value >= 0) & (table_value < prds_length_kw)
	then call syserr (ANNOUNCE, "tc_init: Size of PRDS on TBLS card too small; ^d KW will be used.", prds_length_kw)
		;

	if table_value > 0 then prds_length_kw = min (255, table_value);
						/* Don't let it be too big */
						/* else just stick with default */

	tcm.prds_length = 1024 * prds_length_kw;
	slte_uns.cur_length, slte_uns.max_length = prds_length_kw;

/* Allocate the stack_0_data segment */

	sdtp = addr (stack_0_data$);
	stack_0_data_init_number_of_stacks = divide (tcm.max_max_eligible, 262144, 17, 0);
	call get_main (sdtp, size (sdt), tsdw);
	call pmut$swap_sdw (sdtp, addr (tsdw));
	sdt.num_stacks = stack_0_data_init_number_of_stacks;
	unspec (sdt) = ""b;
	sdt.num_stacks = stack_0_data_init_number_of_stacks;

/* Allocate the APT entries for the initializer and the idle processes.
   Also figure out the total size of idle_dsegs and idle_pdses. */

	tsize = 0;
	call pxss$get_entry (aptep);
	pds$apt_ptr = aptep;
	do i = 0 to 7;
	     if scs$processor_data (i).offline then do;	/* All cpus are flagged as offline at this point */
		call pxss$get_entry (aptep);
		scs$idle_aptep (i) = aptep;
		tsize = tsize + 1;
		end;
	end;

/* Now get the DSEGs and PDSs for the idle procs */

/* Now get enough storage for the PDSes and DSEGs */

	if sys_info$system_type = ADP_SYSTEM then do;	/* For the ADP, because of cache sharing/overlap problems */
	     dseg_size = 2048;			/* each of these must be two pages. No further special */
	     pds_size = 2048;			/* casing need be done, since the initialization DSEG and */
	     end;					/* PDS are already this large */

	else do;					/* otherwise one page is more than enough */
	     dseg_size = 1024;
	     pds_size = 1024;
	     end;

	call get_main (idle_dsegs_p, tsize * dseg_size, idle_dsegs_sdw);

	call get_main (idle_pdses_p, tsize * pds_size, idle_pdses_sdw);

	call pmut$swap_sdw (idle_dsegs_p, addr (idle_dsegs_sdw));
	call pmut$swap_sdw (idle_pdses_p, addr (idle_pdses_sdw));
	return;
%page;
part_2:
     entry;

/* This entry is called after the initializer's DSEG is filled in and after paged segments
   have their ASTE's. It completes initialization of the traffic controller, starts the
   bootload CPU, and turns on multiprogramming. */

	tcmp = addr (tc_data$);

/* Now initialize the template_pds segment */

	template_pds_size = bin (rel (addr (pds$data)), 18);
						/* get size to copy */
	tcm.pdscopyl = template_pds_size;		/* save for later process creations */

	template_pds_p = addr (template_pds$);		/* get pointer to template_pds */

/* Now fill in some variables in template_pds */

	template_pds$quota_inhib = 0;
	template_pds$save_history_regs = "0"b;
	template_pds$stack_0_ptr = baseptr (active_all_rings_data$stack_base_segno);
	template_pds$stack_0_sdwp = addr (dseg$ (binary (baseno (template_pds$stack_0_ptr))));
	template_pds$processid = "444444444444"b3;
	template_pds$apt_ptr = null ();
	template_pds$process_group_id = "Idle.SysControl.z";
	template_pds$initial_procedure = null ();

	processor_index = -1;
	do i = lbound (scs$processor_data, 1) to hbound (scs$processor_data, 1);
						/* loop through all possible processors */
	     if scs$processor_data (i).offline then do;	/* Only do it for configurable CPUs */
						/* All cpus are flagged as offline at this point */
		processor_index = processor_index + 1;
		first_segno = processor_index * divide (dseg_size, 2, 17, 0);
						/* index, in idle_dsegs$, of first SDW for this */
		addr (idle_dsegs$ (first_segno)) -> copy_dseg = addr (dseg$) -> copy_dseg;
						/* idle process */

		idle_pds_p = addr (idle_pdses$ (processor_index * pds_size));
		idle_pds_p -> copy_pds = template_pds_p -> copy_pds;
						/* copy virgin pds */

		addrel (idle_pds_p, rel (addr (pds$processid))) -> copy_id = rel (scs$idle_aptep (i)) || "555555"b3;
		addrel (idle_pds_p, rel (addr (pds$apt_ptr))) -> copy_ptr = scs$idle_aptep (i);
		addrel (idle_pds_p, rel (addr (pds$stack_0_ptr))) -> copy_ptr = addr (prds$);
		addrel (idle_pds_p, rel (addr (pds$stack_0_sdwp))) -> copy_ptr =
		     addr (dseg$ (binary (baseno (addr (prds$)))));
		substr (addrel (idle_pds_p, rel (addr (pds$process_group_id))) -> copy_group_id, 17, 1) =
		     substr ("abcdefgh", i + 1, 1);
		addrel (idle_pds_p, rel (addr (pds$trace))) -> trace.last_available = 4;
		addrel (idle_pds_p, rel (addr (pds$trace))) -> trace.next_free = 0;

		call shrink_sdw (idle_dsegs_sdw, processor_index * dseg_size, dseg_size, tsdw);
		idle_dsegs$ (first_segno + dseg_no) = tsdw;
		scs$idle_aptep (i) -> apte.dbr = tsdw;

		call shrink_sdw (idle_pdses_sdw, processor_index * pds_size, pds_size, tsdw);
		idle_dsegs$ (first_segno + pds_no) = tsdw;
		end;
	end;

/* Now initialize the initializer process */

	pds$initial_procedure = addr (init_processor$return);
	aptep = pds$apt_ptr;
	pds$processid = rel (aptep) || (18)"1"b;
	pds$stack_0_sdwp = addr (dseg$ (binary (baseno (pds$stack_0_ptr))));
	tcm.initializer_id = pds$processid;
	apte.wct_index = tcm.min_wct_index;
	apte.deadline = clock ();
	call thread$cin (aptep, tcm.eligible_q_head.fp);
	apte.loaded = "1"b;
	apte.eligible = "1"b;
	apte.state = bit (bin (2, 18), 18);
	apte.dbr = dseg$ (dseg_no);
	apte.processid = pds$processid;
	apte.lock_id = getuid ();
	pds$lock_id = apte.lock_id;
	apte.timax = 0;
	apte.pds = rel (get_ptrs_$given_segno (pds_no));
	apte.dseg = pds$dstep;

/**** Here we set up apte.ipc_r_offset for the Initializer process.  This
      is an 18-bit unsigned integer used by IPC to validate event channel
      names in conjunction with apte.ipc_r_factor.  This latter number
      is determined later, in init_proc.  This is done on order to provide
      an undeterministic delay between the initialization of these two
      numbers in order to make it difficult to guess one given the other. */

	apte.ipc_r_offset = binary (substr (bit (binary (clock (), 54), 54), 37, 18), 18);

/**** Set the value of apte.ipc_r_factor to zero for debugging purposes
      so that we can determine whether it is getting set or not later. */

	apte.ipc_r_factor = 0;

	aptep = scs$idle_aptep (tag);
	apte.prds = rel (get_ptrs_$given_segno (prds_no));

	tcm.stat (2) = 1;				/* one process is ready */
	tcm.wcte (0).nel = 1;			/* one eligible in wc zero */

/* Now set up miscellaneous tc_data variables */

	tcm.n_eligible = 1;
	time = clock ();				/* get current time */
	tcm.next_alarm_time = time;
	tcm.opc_polling_time = time;
	tcm.disk_polling_time = time;
	tcm.tape_polling_time = time;
	tcm.volmap_polling_time = time;
	tcm.initialize_time = time;
	tcm.define_wc_time = time;
	tcm.nto_check_time = time;
	tcm.nto_delta = 30000000;			/* nto every 30 to 60 sec */

/* Now finish up creating the first idle process */

	call init_processor$init;			/* Initialize variables. */

	call start_cpu (tag, code);			/* Now start bootload CPU idle process. */
	if code ^= 0 then call syserr (CRASH, "tc_init: Cannot start up first idle process. Check switches.");

	tcm.wait_enable = 1;

	return;
%page;
shrink_sdw:
     proc (old_sdw, base, bound, new_sdw);

dcl  old_sdw fixed bin (71) parameter;
dcl  base fixed bin (24) parameter;
dcl  bound fixed bin (18) parameter;
dcl  new_sdw fixed bin (71) parameter;

dcl  1 sdwi aligned like sdw_info automatic;


	call sdw_util_$dissect (addr (old_sdw), addr (sdwi));
						/* Take the old one apart */
	sdwi.address = sdwi.address + divide (base, 1024, 26);
						/* Alter the base and bounds appropriately
						   (update the ptw address by n ptws) */
	sdwi.size = bound;
	call sdw_util_$construct (addr (new_sdw), addr (sdwi));
						/* And put it back */

     end shrink_sdw;
%page;
start_other_cpus:
     entry;

/* This entry is called late in initialization to start any
   CPUs in the configuration that are marked as online in
   the config deck */

/* first, if the bootload cpu is a DPS8M, enter the contents of the ID PROM in
   the syserr_log. We could not do it earlier in initialization beause syserr
   logging was not enabled. */

	if scs$processor_data (tag).cpu_type > 0
	then					/* if DPS8 cpu... */
	     if addr (scs$processor_switch_data (2)) -> dps8_rsw_2.id_prom then do;
						/* and id prom present */
		call privileged_mode_ut$read_id_prom (cpu_model, 0);
						/* get cpu model from ID PROM */
		call privileged_mode_ut$read_id_prom (cpu_serial, 13);
						/* get cpu serial # from ID PROM */
		call privileged_mode_ut$read_id_prom (cpu_ship_date, 26);
						/* get ship date from ID PROM */
		call syserr (4, "CPU ^a: Model #: ^a; Serial #: ^a; Ship date: ^a.",
						/* log info from id prom */
		     substr ("ABCDEFGH", tag + 1, 1), cpu_model, cpu_serial, cpu_ship_date);
		end;

/* second, delete all old prds's, to guard against changes in prds format from one bootload to the next. */


	do i = 1 to 8;
	     prds_name = "cpu_" || substr (LETTERS, i, 1) || ".prds";
	     call delentry$dfile (PRDS_DIR, prds_name, code);
	     if code ^= 0
	     then if code = error_table_$noentry then code = 0;
	     if code = 0 then do;
		if i - 1 = prds$processor_tag then do;	/* This processor. */
		     call chname$cfile (PRDS_DIR, "prds", "prds", prds_name, code);
		     if code ^= 0
		     then call syserr$error_code (ANNOUNCE, code, "tc_init: could not rename prds to ^a.", prds_name);
		     end;
		end;
	     else call syserr$error_code (ANNOUNCE, code, "tc_init: could not delete old ^a.", prds_name);
	end;

	cpu_cardp = null ();
	sys_info$hfp_exponent_available = "1"b;		/* let's pretend there are no L68s */
other_loop:
	call config_$find (CPU_CARD_WORD, cpu_cardp);
	if cpu_cardp = null () then return;		/* Return after all cards examined. */

	i = cpu_card.tag - 1;

/* Create and entry-hold the PRDS for all but the bootload CPU. This has already been done for
   the bootload PRDS, which is deciduous. Save the astep result in the idle APTE. */

	if i ^= tag then do;			/* Don't do bootload. */
	     prds_name = "cpu_" || substr (LETTERS, i + 1, 1) || ".prds";
	     call append$branchx (PRDS_DIR, prds_name, RW_mode, seg_rb, pds$process_group_id, 0, 0, 0, code);
	     if code = 0
	     then call initiate (PRDS_DIR, prds_name, "", 0, 0, prdsp, code);
	     else prdsp = null ();
	     if code = 0
	     then scs$idle_aptep (i) -> apte.prds = rel (grab_aste$prewithdraw (prdsp, tc_data$prds_length, code));
	     if code ^= 0 then do;
		call syserr$error_code (ANNOUNCE, code, "tc_init: cannot create ^a. This CPU may not be added.",
		     prds_name);
		cpu_card.state = "off";		/* avoid trying to start it. */
		scs$idle_aptep (i) = null ();		/* Cause easy crawlout later */
		end;
	     if prdsp ^= null () then call terminate_$teseg (prdsp, (0), code);
	     end;
	if cpu_card.state = "on"
	then					/* If CPU is to be added ... */
	     if i ^= tag then do;			/* If not the bootload processor ... */
		call start_cpu (i, code);
		if code ^= 0
		then call syserr (ANNOUNCE, "tc_init: Could not start CPU ^a.", substr ("ABCDEFGH", cpu_card.tag, 1));
		end;
	if cpu_card.type ^= "dps8"
	then					/* oh well */
	     sys_info$hfp_exponent_available = "0"b;	/* no mixed configurations for hex fp */
	go to other_loop;				/* Loop. */

/* format: off */
%page; %include stack_0_data;
%page; %include sys_trace;
%page; %include apte;
%page; %include sdw_info;
%page; %include tcm;
%page; %include hc_lock;
%page; %include scs;
%page; %include slt;
%page; %include slte;
%page; %include config_cpu_card;
%page; %include config_schd_card;
%page; %include config_tcd_card;
%page; %include syserr_constants;
%page; %include system_types;
%page; %include rsw;
%page;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   tc_init: No valid processor tags on CPU cards.

   S: $crash

   T: $init

   M: No CPU CONFIG cards contained valid (A - H) CPU tags. Normally this message will
   not appear if the bootload CPU is mis-specified, as this error will be detected by
   scas_init, and thus this may be indicative of a supervisor logic problem.

   A: Check that all CPU CONFIG cards are correct. If not, perform an emergency
   shutdown, correct them, and reboot. If so, be sure to get a dump and contact
   system programming personnel.

   Message:
   tc_init: Cannot start up first idle process. Check switches.

   S: $crash

   T: $init

   M: The idle process for the bootload CPU could not be started. This may be
   an error in setting of configuration switches, or may be indicative of a logic problem in the
   supervisor.

   A: Perform an emergency shutdown. Check all main module configuration switches.
   If a problem was corrected, reboot. Otherwise, be sure to get a dump and contact
   the systems programming staff.

   Message:
   tc_init: Could not rename prds to PRDSNAME. ERRORMESSAGE

   S: $info

   T: $init

   M: The segment "prds" in >system_library_1 could not be renamed to PRDSNAME, which
   is the correct name for the PRDS for the bootload processor.
   ERRORMESSAGE is a standard error_table_ message.

   A: Notify the system programming staff. Action should be taken by the programming staff to rename this
   segment. If the problem cannot be sorted out, avoid reconfiguring the bootload
   CPU during this bootload.

   Message:
   tc_init: Could not delete old PRDSNAME. ERRORMESSAGE

   S: $info

   T: $init

   M: The old PRDS PRDSNAME from the previous bootload, in >system_library_1, could not
   be deleted. When the CPU whose tag is part of PRDSNAME is added, the old PRDS will be used.
   ERRORMESSAGE is a standard error_table_ message.

   A: $notify

   Message:
   tc_init: Could not start CPU CPUTAG.

   S: $info

   T: $init

   M: The CPU whose tag is CPUTAG could not be automatically started by system bootload.

   A: Check all configuration switches on CPU and main memory modules, especially
   the CPU STEP switch on the CPU which could not be added, and its port
   enable switches. If all switches were correct, add the CPU via the addcpu command.

   Message:
   tc_init: cannot create cpu_X.prds. This CPU may not be added. ERROR_MESSAGE

   S: $info

   T: $init

   M: A difficulty was encountered in creating the PRDS for a configurable CPU.
   Later attempts to add this CPU will fail.  It will be marked as "off" in the CONFIG deck.

   A: $inform
   When the problem has been remedied, shut down and reboot, and then add this CPU.

   Message:
   tc_init: Inconsistent SCHD config card values.

   S: $crash

   T: $init

   M: The SCHD config card is not in the correct format, or some values
   are out of acceptable range. In particular, the value of min_eligible
   cannot exceed that of max_eligible; also, the value of max_eligible plus
   the max number of stopped stack_0's (default = 4) cannot exceed
   max_max_eligible.

   A: Check the SCHD config card (refer to the MOH) and correct. Re-boot the
   system.

   Message:
   tc_init: Size of PRDS on TBLS card too small; XXX KW will be used.

   S: $info

   T: $init

   M: The size of the PRDS specified on the TBLS card in the Configuration Deck
   is smaller than the size of the PRDS defined in the MST header.  The size of
   the PRDS will be that defined in the MST header.  Further, the TBLS card in
   the Configuration Deck has been changed to reflect the minimum size of the
   PRDS

   Message:
   CPU CPUTAG: Model #: MODEL; Serial #: SERIAL; Ship date: YY/MM/DD.

   S: $log

   T: When the bootload CPU is a DPS8, whose tag is CPUTAG is "added" to
   the system.

   M: The MODEL, SERIAL and YY/MM/DD information is read from the DPS8 cpu's ID PROM.
   It is intended to be used as historical information
   for identifing CPUs, regardless of what their current tag is assigned as.

   A: $ignore


   END MESSAGE DOCUMENTATION */


     end tc_init;
