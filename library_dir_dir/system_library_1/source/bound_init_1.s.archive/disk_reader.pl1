/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-06-05,GJohnson), approve(86-06-05,MCR7387),
     audit(86-06-10,Martinson), install(86-07-11,MR12.0-1091):
     Correct error message documentation.
                                                   END HISTORY COMMENTS */


disk_reader: proc (data_ptr, data_lth);

/* Routine to read a specified number of words from the mst area on disk.
This routine replaces tape_reader as far as segment_loader and load_system
are concerned.
Initially coded October 1983 by Keith Loepere. */

/* format: style4,indattr,ifthenstmt,ifthen,idind33,^indcomtxt */

dcl  Max_pages		        fixed bin init (256) static options (constant); /* max in a hardware segment */
dcl  addr			        builtin;
dcl  addrel		        builtin;
dcl  data_lth		        fixed bin (18) parameter;/* in words, desired */
dcl  data_ptr		        ptr parameter;	/* to user's area */
dcl  disk_mst_seg$		        external;		/* abs_seg mapped onto mst disk area */
dcl  disk_mst_seg_astep	        ptr static;
dcl  disk_mst_seg_sdw	        fixed bin (71);
dcl  divide		        builtin;
dcl  make_sdw$no_pages	        entry (fixed bin (15), fixed bin (71), ptr, ptr);
dcl  min			        builtin;
dcl  mst_area_left		        fixed bin (26) static;/* number of words left to read */
dcl  next_mst_word		        fixed bin (26) static;/* next word (within disk_mst_seg) to read */
dcl  page_table		        (0:255) bit (36) aligned based (ptp);
dcl  pc$cleanup		        entry (ptr);
dcl  pmut$camp		        entry;
dcl  pmut$swap_sdw		        entry (ptr, ptr);
dcl  ptp			        ptr static;		/* to page table for disk_mst_seg */
dcl  ptw_num		        fixed bin;		/* loop counter */
dcl  ptw_util_$make_disk	        entry (ptr, fixed bin (20));
dcl  pvt$root_pvtx		        fixed bin external;
dcl  segno		        builtin;
dcl  start_partition_record	        fixed bin (20) static;/* first record described by disk_mst_seg */
dcl  sys_boot_info$bce_part_frec      fixed bin (20) external;
dcl  sys_boot_info$bce_part_nrec      fixed bin (20) external;
dcl  sys_boot_info$mst_past_bce_frec  fixed bin (20) external;
dcl  syserr		        entry options (variable);
dcl  user_area		        (user_area_lth) bit (36) aligned based (user_area_ptr);
dcl  user_area_lth		        fixed bin (18);
dcl  user_area_ptr		        ptr;
dcl  user_data_lth		        fixed bin (18);	/* space needed yet */

	if mst_area_left < data_lth then call syserr (CRASH, "disk_reader: Attempt to read past end of mst area.");

	user_area_ptr = data_ptr;
	user_data_lth = data_lth;
	do while (user_data_lth > 0);
	     user_area_lth = min (user_data_lth, Max_pages * 1024 - next_mst_word);
	     user_area = addrel (addr (disk_mst_seg$), next_mst_word) -> user_area;
	     user_data_lth = user_data_lth - user_area_lth;
	     user_area_ptr = addrel (user_area_ptr, user_area_lth);
	     mst_area_left = mst_area_left - user_area_lth;
	     next_mst_word = next_mst_word + user_area_lth;
	     if next_mst_word = Max_pages * 1024 then do;
		call pc$cleanup (disk_mst_seg_astep);
		call advance_mst_seg;
	     end;
	end;
	return;
%page;
init: entry;

/* Initially set up disk_mst_seg onto the mst area of disk. */

	call make_sdw$no_pages (segno (addr (disk_mst_seg$)), disk_mst_seg_sdw, disk_mst_seg_astep, ptp);
	disk_mst_seg_astep -> aste.pvtx = pvt$root_pvtx;
	call pmut$swap_sdw (addr (disk_mst_seg$), addr (disk_mst_seg_sdw));
	start_partition_record = sys_boot_info$mst_past_bce_frec - Max_pages;
	mst_area_left = (sys_boot_info$bce_part_frec + sys_boot_info$bce_part_nrec - sys_boot_info$mst_past_bce_frec) * 1024;
	next_mst_word = 0;
	call advance_mst_seg;
	return;
%page;
final: entry;

/* free disk_mst_seg */

	call pc$cleanup (disk_mst_seg_astep);	/* free coremap entries */
	disk_mst_seg_sdw = 0;
	call pmut$swap_sdw (addr (disk_mst_seg$), addr (disk_mst_seg_sdw));
	return;
%page;
advance_mst_seg: proc;

/* Map the disk_mst_seg onto the next set of pages in the mst area. */

	start_partition_record = start_partition_record + Max_pages;
	next_mst_word = 0;
	do ptw_num = 0 to min (Max_pages, divide (mst_area_left + 1023, 1024, 20)) - 1;
	     call ptw_util_$make_disk (addr (page_table (ptw_num)), start_partition_record + ptw_num);
	end;
	call pmut$camp;
	return;
     end;
%page; %include aste;
%page; %include bce_partition_layout;
%page; %include syserr_constants;
%page;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   disk_reader: Attempt to read past end of mst area.

   S: $crash

   T: $init

   M: An attempt was made to read more data from the mst area of disk than was
   placed there from the MST.  This is most likely the result of an MST
   misformed originally.

   A: $recover
   $boot_tape

   END MESSAGE DOCUMENTATION */

     end;
