/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */
/* ADD_SCU - Reconfiguration Procedure to Add and Remove a System Controller. */
/* adapted from code originally written by Roger R. Schell in July, 1970 */
/* Modified 3/9/76 by Noel I. Morris */
/* Modified 5/79 by BSG for 8cpu port expander */
/* Modified September 1981 by J. Bongiovanni for set_procs_required */
/* Modified June 1982 by J. A. Bush to clear cache in each cpu before Mem is added */
/* Modified April 1984 by Chris Jones to update config deck to its partition after modifying it. */

/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
add_scu:
     proc (tag, errtag, rcode);

dcl	tag		   fixed bin (3),		/* tag of controller to be added */
	errtag		   fixed bin (3),		/* tag of CPU or mask in error */
	rcode		   fixed bin (35);		/* error code */

dcl	cdp		   ptr,			/* pointer to single element of controller data */
	i		   fixed bin (3),		/* iteration variable */
	enabled		   bit (1) aligned,		/* port enabled bit */
	base		   fixed bin (17),		/* base address of controller */
	size		   fixed bin (17),		/* size of controller */
	interlace		   fixed bin (3),		/* memory interlace type */
	code		   fixed bin (35),		/* error code */
	cpu_mask		   bit (8) aligned;		/* bit mask for CPUs required */


dcl	init_scu		   entry (fixed bin (3), fixed bin (3), fixed bin (35)),
	init_scu$final_scu	   entry (fixed bin (3)),
	privileged_mode_ut$clear_cache
			   entry,
	scr_util$set_mask	   entry (fixed bin (3), fixed bin (3), bit (72) aligned),
	scr_util$enable_ports  entry (fixed bin (3)),
	scr_util$disable_ports entry (fixed bin (3)),
	rsw_util$port_info	   entry (fixed bin (3), bit (1) aligned, fixed bin (17), fixed bin (17), fixed bin (3)),
	rsw_util$set_rsw_mask  entry (fixed bin (3), bit (1) aligned),
	set_procs_required	   entry (bit (8) aligned, fixed bin (35)),
	config_$find_2	   entry (char (4) aligned, fixed bin (3), ptr),
	config_$update	   entry (),
	syserr		   entry options (variable);

dcl	store		   condition,		/* store fault */
	op_not_complete	   condition;		/* op not complete fault */

dcl	1 cdata		   based (cdp) aligned like scs$controller_data;
						/* single element of controller_data */

dcl	(addr, hbound, lbound, substr)
			   builtin;

/* The following code adds a system controller. */

	rcode = 0;
	cdp = addr (scs$controller_data (tag));		/* Get pointer to data for this controller. */

	on condition (store) go to add_fault;		/* Catch store fault if ports not enabled. */
	on condition (op_not_complete) go to add_fault;	/* Catch op not complete if controller not enabled. */

	do i = lbound (scs$processor_data, 1) to hbound (scs$processor_data, 1);/* Run each and every processor. */
	     if scs$processor_data (i).online then do;	/* If processor online ... */
		cpu_mask = "0"b;
		substr (cpu_mask, i + 1, 1) = "1"b;
		call set_procs_required (cpu_mask, code);
						/* Run that processor. */
		if code ^= 0 then do;
		     rcode = rcerr_sprq_failed;	/* Shouldn't */
		     goto add_err;
		end;

		call rsw_util$port_info (tag, enabled, base, size, interlace);
						/* Get poop on controller. */
		if ^enabled then do;		/* If port not enabled ... */
		     rcode = rcerr_addscu_enable;
		     go to add_err;
		end;
		if (base ^= cdata.base) |		/* If some switches are incorrrect ... */
		     (size ^= cdata.size) | ((interlace ^= 0) ^= cdata.ext_interlaced)
		     | ((interlace ^= 0) & ((interlace = 4) ^= cdata.four_word)) then do;
		     rcode = rcerr_addscu_switches;
		     go to add_err;
		end;

		call init_scu (tag, errtag, rcode);	/* Try to get info about the controller. */
		call privileged_mode_ut$clear_cache;	/* clear out this cpus cache, before mem is added */

		call set_procs_required ("0"b, code);	/* Give up this processor. */

		if rcode ^= 0 then
		     return;			/* If failure, give up now. */
	     end;
	end;

	do i = 1 to 4;				/* Look at each assigned interrupt mask. */
	     if cdata.eima_data (i).mask_assigned then	/* If mask is assigned ... */
		call scr_util$set_mask (tag, (cdata.eima_data (i).mask_assignment), scs$sys_level);
	end;					/* Don't allow any interrupts. */

	call scr_util$enable_ports (tag);		/* Set correct ports to be enabled. */

	cdata.online = "1"b;			/* reflect change in SCS */
	cdata.offline = "0"b;

	call config_$find_2 (MEM_CARD_WORD, tag + 1, mem_cardp);
						/* Find the correct MEM config card. */
	mem_card.state = "on  ";			/* Change the config card. */

	call rsw_util$set_rsw_mask (tag, "1"b);		/* All new processors must have this port enabled. */

	call config_$update ();
	call syserr (ANNOUNCE, "addmem: Added MEM ^a.", substr ("ABCDEFGH", tag + 1, 1));

	return;


add_fault:
	call init_scu$final_scu (tag);		/* Clear out SCAS entry for controller. */
	rcode = rcerr_addscu_fault;			/* Give back an error. */

add_err:
	call set_procs_required ("0"b, code);		/* Unset any required processor. */

	errtag = i;				/* Identify active module in error. */

	return;


/* The following code removes a system controller. */

remove_scu:
     entry (tag);


	cdp = addr (scs$controller_data (tag));		/* Get pointer to data for this controller. */

	call scr_util$disable_ports (tag);		/* Disable all ports on controller. */

	call init_scu$final_scu (tag);		/* Remove entry from the SCAS. */

	cdata.offline = "1"b;			/* reflect change in SCS */
	cdata.online = "0"b;

	call config_$find_2 (MEM_CARD_WORD, tag + 1, mem_cardp);
						/* Find correct MEM config card. */
	mem_card.state = "off ";			/* Change the config card. */

	call rsw_util$set_rsw_mask (tag, "0"b);		/* New processors do not need this port enabled. */

	call config_$update ();
	call syserr (ANNOUNCE, "delmem: Removed MEM ^a.", substr ("ABCDEFGH", tag + 1, 1));

	return;

%include rcerr;
%page;
%include config_mem_card;
%page;
%include scs;
%page;
%include syserr_constants;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   addmem: Added MEM X.

   S:	$info

   T:	$response

   M:	The system control unit X has been added.

   A:	$ignore


   Message:
   delmem: Removed MEM X.

   S:	$info

   T:	$response

   M:	The system control unit X has been deleted.

   A:	$ignore



   END MESSAGE DOCUMENTATION */

     end add_scu;
