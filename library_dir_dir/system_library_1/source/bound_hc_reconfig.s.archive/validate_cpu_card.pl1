/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4 */

validate_cpu_card: proc (tag, rswp);

/* validate_cpu_card - entry to validate (and change if necessary) the cpu
   type and model fields on a cpu config card image.

   The entry parameter rswp is a pointer and is declared in rsw.incl.pl1
   The pointer, rswp should be pointing to the RSW (2) data that will be used to get
   the correct type and model of the desired cpu.

   Last Modified (Date and Reason)
   09/11/80 by J. A. Bush initial coding for the DPS8/70M CPU
   07/20/81 by J. A. Bush to remove references to the hc_psp segment.
   03/25/83 by J. A. Bush to correct DPS8/52 and DPS8/62 RSW (2) decodes.
   09/20/83 by J. A. Bush to add cpu cache size to cpu card image.
   04/09/84 by Chris Jones to use modern include files.
*/


/****^  HISTORY COMMENTS:
  1) change(86-10-23,Fawcett), approve(86-10-23,MCR7517),
     audit(86-10-30,Beattie), install(86-11-03,MR12.0-1206):
     Changed to remove the word BOS from Error message documentation.
                                                   END HISTORY COMMENTS */


dcl  (unspec, substr) builtin;
dcl  tag fixed bin (3);				/* tag of cpu to be validated */
dcl  ctype char (4);				/* for checking cpu type in config card */
dcl  cmodel fixed bin;				/*  for checking cpu model in config card */
dcl  cs_idx fixed bin;
dcl  (discrep, set_fields) bit (1);
dcl  LETTERS char (8) static options (constant) init ("ABCDEFGH");
dcl  CS_ARRAY (0:5) fixed bin int static options (constant) init (0, 2, 8, 8, 16, 32);
dcl  FENCE bit (36) int static options (constant) init ("777777777777"b3);
dcl  IGNORE_CACHE_SIZE fixed bin int static options (constant) init (7);
dcl  config_$find_2 entry (char (4) aligned, fixed bin, ptr);
dcl  syserr entry options (variable);

	discrep, set_fields = "0"b;			/* reset error flag */
	call config_$find_2 (CPU_CARD_WORD, tag + 1, cpu_cardp); /* Find correct CPU card. */
	cardp = cpu_cardp;

	cs_idx = scs$processor_data (tag).cache_size;	/* get auto cache size index */

/* determine correct type and model info from rsw (2) data */

	if dps8_rsw_2.cpu_type > 0 then do;		/* if DPS8 cpu */
	     ctype = "dps8";
	     if dps8_rsw_2.cpu_speed = "0000"b then	/* if model 70 */
		cmodel = 70;
	     else if dps8_rsw_2.cpu_speed = "0001"b then	/* else if model 52 */
		cmodel = 52;
	     else if dps8_rsw_2.cpu_speed = "0100"b then	/* else if model 62 */
		cmodel = 62;
	     else cmodel = 77;			/* this indicates a bad cpu_speed code */
	end;
	else do;					/* must be  DPS or L68 cpu */
	     if dps_rsw_2.dps_option then		/* if this is on it must be DPS cpu */
		ctype = "dps ";
	     else ctype = "l68 ";			/* otherwise must be L68 */
	     if dps_rsw_2.cache2 then			/* if we have cache */
		cmodel = 80;
	     else cmodel = 60;			/* no cache */
	end;

/* now check type and model values obtained from rsw (2) data against current cpu card values */

	if cpu_card.type ^= ctype then do;		/* cpu type field is wrong */
	     set_fields = "1"b;			/* set flag to correct card image */
	     if unspec (cpu_card.type) ^= FENCE then do;	/* CPU type recorded incorrectly? */
		call syserr (BEEP, "validate_cpu_card: CPU type for CPU ^a is incorrect, should be ""^a""",
		     substr (LETTERS, tag + 1, 1), ctype);
		discrep = "1"b;
	     end;
	end;

	if cpu_card.model ^= cmodel then do;		/* cpu model field is wrong */
	     set_fields = "1"b;			/* set flag to correct card image */
	     if cpu_card.model ^= -1 then do;		/* cpu model recorded incorrectly? */
		call syserr (BEEP, "validate_cpu_card: CPU model for CPU ^a is incorrect, should be ""^d.""",
		     substr (LETTERS, tag + 1, 1), cmodel);
		discrep = "1"b;			/* set error flag */
	     end;
	end;
	if cs_idx ^= IGNORE_CACHE_SIZE then		/* if not being called by ISOLTS reconfig.. */
	     if cpu_card.cache_size ^= CS_ARRAY (cs_idx) then do; /* cpu cache size is wrong */
		set_fields = "1"b;			/* set flag to correct card image */
		if cpu_card.cache_size ^= -1 then do;	/* cpu cache size recorded incorrectly? */
		     call syserr (BEEP, "validate_cpu_card: CPU cache size for CPU ^a is incorrect, should be ""^d.""",
			substr (LETTERS, tag + 1, 1), CS_ARRAY (cs_idx));
		     discrep = "1"b;		/* set error flag */
		end;
	     end;
	if set_fields then do;			/* if we must set/reset cpu card image fields */
	     if discrep then			/* if some discrepency exists ... */
		call syserr (ANNOUNCE,
		     "validate_cpu_card: CPU type, model, and/or cache size discrepencies will be corrected");
	     cpu_card.type = ctype;			/* set correct cpu type */
	     cpu_card.model = cmodel;			/* and model */
	     if cs_idx = IGNORE_CACHE_SIZE then do;	/* if being called by isolts, don't set cache size */
		if config_card.n_fields < 5 then	/* if cpu type/model not defined */
		     config_card.n_fields = 5;	/* do it now */
	     end;
	     else do;				/* set cache size as well */
		cpu_card.cache_size = CS_ARRAY (cs_idx);/* and cache_size */
		if config_card.n_fields < 6 then	/* if not enough fields defined */
		     config_card.n_fields = 6;	/* set it */
	     end;
	     config_card.field_type (4) = CONFIG_STRING_TYPE;
	     config_card.field_type (5) = CONFIG_DECIMAL_TYPE; /* and decimal for model */
	     config_card.field_type (6) = CONFIG_DECIMAL_TYPE; /* and decimal for cache size */
	end;

%include config_deck;
%page;
%include config_cpu_card;
%page;
%include rsw;
%page;
%include syserr_constants;
%page;
%include scs;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   validate_cpu_card: CPU type for CPU CPUTAG is incorrect, should be "CPUTYPE"

   S:	$beep

   T:	$run

   M:	The CPUTYPE as determined from RSW (2) information, did not match the
   CPUTYPE in the cpu type field of the config card image for CPU CPUTAG.

   A:	$ignore

   Message:
   validate_cpu_card: CPU model for CPU CPUTAG is incorrect, should be "CPUMODEL."

   S:	$beep

   T:	$run

   M:	The CPUMODEL as determined from RSW (2) information, did not match the
   CPUMODEL in the cpu model field of the config card image for CPU CPUTAG.

   A:	$ignore

   Message:
   validate_cpu_card: CPU cache size for CPU CPUTAG is incorrect, should be "CACHE_SIZE."

   S:	$beep

   T:	$run

   M:	The CACHE_SIZE as determined from cpu registers, did not match the
   CACHE_SIZE in the cpu cache size field of the config card image for CPU
   CPUTAG.

   A:	$ignore

   Message:
   validate_cpu_card: CPU type, model, and/or cache size discrepencies will be corrected

   S: $info

   T: $run

   M:	The indicated discrepencies in the cpu type, model, and cache size
   fields, will be corrected by validate_cpu_card.

   A:	The type, model, and/or cache size fields of the indicated cpu
   config card image should be corrected at BCE, before the next bootload.

   END MESSAGE DOCUMENTATION */

     end validate_cpu_card;
