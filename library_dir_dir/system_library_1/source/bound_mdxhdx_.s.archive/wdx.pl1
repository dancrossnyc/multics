/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


wdx$init: proc (a_evchn, a_ec);
	

/* wdx - ring 1 lv_attach_table manager 

   Runs in Initializer process, communicates lv_request_'s desires to table and user process. 
   Entries are accessible through initializer_mdc_


   Entry Points:

   check_mount		issue syserr message for overdue mount 
   free_lvate		clear one out 
   init			set up for bootload 
   invalidate_lvate		cause process to give up lv 
   mhvmessage		issue syserr message for Operator  
   poll_mounts		check for overdue mounts 
   respond_mount_lv		set return state, code, and bit 
   retrieve_lvate		dredge entry out of lvat 
   scan_lv		find all lv occurences 
   scan_process		find all process occurrences 
   set_lvinfo		put lvid and stuff in lvate 

   Bernard Greenberg 09/08/76   
   Modified December 1981 by J. Bongiovanni for poll_mounts, check_mount 
   Modified April 82 BIM for legal acls.
*/

/*  Parameter  */

dcl  a_array (*) fixed bin;
dcl  a_code fixed bin (35);
dcl  a_ec fixed bin (35);
dcl  a_evchn fixed bin (71);
dcl  a_lvatep ptr;
dcl  a_lvax fixed bin (17);
dcl  a_lvid bit (36) aligned;
dcl  a_lvname char (*);
dcl  a_lvx fixed bin;
dcl  a_n fixed bin;
dcl  a_next_time fixed bin (71);
dcl  a_pid bit (36) aligned;
dcl  a_state fixed bin;
dcl  a_unit_string char (*) varying;
dcl  a_username char (*);

/*  Automatic  */

dcl  1 seg_acl (1) aligned like segment_acl_entry;

dcl  ec fixed bin (35);
dcl  fixedipcmessage fixed bin (71);
dcl  lvax fixed bin;
dcl  lvname char (32);
dcl  n fixed bin;
dcl  next_time fixed bin (71);
dcl  pid bit (36) aligned;
dcl  save_lev fixed bin;
dcl  username char (32);

/*  Static  */

dcl  END_OF_TIME fixed bin (71) int static options (constant) init (1111111111111111111111111111111111111111111111111111b);
dcl  LVAT_NAME char (32) static init ("lv_attach_table") options (constant);
dcl  s_lvatp ptr static init (null);
dcl  SYSDIR char (168) static init (">lv");
dcl  TIMEOUT fixed bin (71) int static options (constant) init (240000000);	/* 4 minutes */
dcl  WDX_RING fixed bin init (1) static;
/*  Based  */

dcl  ipcmessage char (8) based (addr (fixedipcmessage));

/*  Entry  */

dcl  admin_gate_$reclassify_sys_seg entry (char (*), char (*), bit (72) aligned, fixed bin (35));
dcl  admin_gate_$syserr entry options (variable);
dcl  admin_gate_$syserr_error_code entry options (variable);
dcl  cu_$level_get entry (fixed bin);
dcl  cu_$level_set entry (fixed bin);
dcl  get_max_authorization_ returns (bit (72) aligned);
dcl  get_process_id_ entry returns (bit (36) aligned);
dcl  get_ring_ entry returns (fixed bin);
dcl  hcs_$add_acl_entries entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
dcl  hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$truncate_seg entry (ptr, fixed bin, fixed bin (35));
dcl  hcs_$wakeup entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35));

/*  Builtin  */

dcl  clock builtin;
dcl  min builtin;
dcl  null builtin;
dcl  stacq builtin;

/*  Condition  */

dcl  cleanup condition;
/*  */

	a_ec = 0;

	call cu_$level_get (save_lev);
	on cleanup call cu_$level_set (save_lev);
	call cu_$level_set (WDX_RING);
	call hcs_$make_seg (SYSDIR, LVAT_NAME, "", 1011b, s_lvatp, ec);
	if s_lvatp = null then do;
init_lose:     call cu_$level_set (save_lev);
	     a_ec = ec;
	     return;
	end;

	call hcs_$truncate_seg (s_lvatp, 0, ec);
	if ec ^= 0 then go to init_lose;

	call admin_gate_$reclassify_sys_seg (SYSDIR, LVAT_NAME, get_max_authorization_ (), ec);
	if ec ^= 0 then go to init_lose;

	seg_acl (1).access_name = "*.*.*";
	seg_acl (1).mode = RW_ACCESS;
	seg_acl (1).extended_mode = ""b;
	seg_acl (1).status_code = 0;

	call hcs_$add_acl_entries (SYSDIR, LVAT_NAME, addr (seg_acl), 1, ec);
	if ec = 0 then if seg_acl (1).status_code ^= 0 then ec = seg_acl (1).status_code;
	if ec ^= 0 then go to init_lose;

	call cu_$level_set (save_lev);
	lvatp = s_lvatp;

	lvat.master_pid = get_process_id_ ();
	lvat.master_evchn = a_evchn;

	lvat.max_n_entries = 10000;
	lvat.highest_used = 0;
	lvat.initialized = "1"b;
	return;

/* --------------------------------------------------------- */

retrieve_lvate: entry (a_lvax, a_lvatep, a_ec);

	lvax = a_lvax;

	lvatp = s_lvatp;
	if lvax > lvat.highest_used | lvax <= 0 then do;
	     a_ec = 5;
	     return;
	end;

	lvatep = addr (lvat.array (lvax));
	a_lvatep -> lvate = lvate;
	a_ec = 0;
	return;

/* --------------------------------------------------------- */

free_lvate: entry (a_lvax);

	lvatp = s_lvatp;
	lvatep = addr (lvat.array (a_lvax));

	if stacq (lvate.pid, "0"b, (lvate.pid)) then;
	return;

/* --------------------------------------------------------- */

respond_mount_lv: entry (a_lvax, a_state, a_code, a_ec);


	lvatp = s_lvatp;
	lvatep = addr (lvat.array (a_lvax));

	lvate.code = a_code;
	lvate.state = a_state;
	if lvate.state = 1 then do;
	     lvate.waiting = "0"b;
	     lvate.mounted = "1"b;
	end;
	else if lvate.state = 4 then do;
	     lvate.waiting = "1"b;
	     lvate.mount_request_timeout = clock () + TIMEOUT;
	     ipcmessage = "poll    ";
	     call hcs_$wakeup (lvat.master_pid, lvat.master_evchn, fixedipcmessage, ec);
	     if ec ^= 0
		then call admin_gate_$syserr_error_code (0, ec, "wdx: Unable to send wakeup on master channel");
	end;
	else lvate.waiting = "0"b;
	if lvate.state ^= 4 then lvate.pending_mount = "0"b;
	lvate.mount_req_answered = "1"b;

	ipcmessage = "lv_mount";

	call hcs_$wakeup (lvate.pid, lvate.evchn, fixedipcmessage, ec);

	a_ec = ec;
	return;

/* --------------------------------------------------------- */

scan_process: entry (a_pid, a_array, a_n);

	pid = a_pid;
	lvatp = s_lvatp;

	n = 0;

	do lvax = 1 to lvat.highest_used;
	     if lvat.array (lvax).pid = pid then do;
		n = n + 1;
		a_array (n) = lvax;
	     end;
	end;
	a_n = n;

	return;

/* --------------------------------------------------------- */

scan_lv:	entry (a_lvname, a_array, a_n);

	lvname = a_lvname;
	lvatp = s_lvatp;

	n = 0;

	do lvax = 1 to lvat.highest_used;
	     lvatep = addr (lvat.array (lvax));
	     if lvate.pid ^= "0"b then if lvate.pending_mount | lvate.mount_req_answered
		then if lvate.lvname = lvname & ^lvate.invalidated then do;
			n = n + 1;
			a_array (n) = lvax;
		     end;
	end;
	a_n = n;
	return;

/* --------------------------------------------------------- */

invalidate_lvate: entry (a_lvax);

	lvatp = s_lvatp;
	lvatep = addr (lvat.array (a_lvax));

	lvate.invalidated = "1"b;
	return;

/* --------------------------------------------------------- */

set_lvinfo: entry (a_lvax, a_lvid, a_lvx);

	lvatp = s_lvatp;
	lvatep = addr (lvat.array (a_lvax));

	lvate.lvid = a_lvid;
	lvate.lvx = a_lvx;
	return;

/* --------------------------------------------------------- */

mhvmessage: entry (a_lvax, a_username);

	lvatp = s_lvatp;
	lvatep = addr (lvat.array (a_lvax));

	username = a_username;
	call admin_gate_$syserr (3, "RCP: Mount logical volume ^a for ^a", lvate.lvname, username);
	return;

/* --------------------------------------------------------- */

poll_mounts:
	entry (a_array, a_n, a_next_time);
	
	lvatp = s_lvatp;
	next_time = END_OF_TIME;
	n = 0;
	do lvax = 1 to lvat.highest_used;
	     lvatep = addr (lvat.array (lvax));
	     if (lvate.pid ^= "0"b) & lvate.waiting & lvate.mount_req_answered & ^lvate.invalidated
		then do;
		if lvate.mount_request_timeout < clock () then do;
		     n = n + 1;
		     a_array (n) = lvax;
		     lvate.mount_request_timeout = clock () + TIMEOUT;
		end;
		next_time = min (next_time, lvate.mount_request_timeout);
	     end;
	end;
	a_n = n;
	if next_time = END_OF_TIME then a_next_time = -1;
	else a_next_time = next_time;
	return;
	

/* --------------------------------------------------------- */

check_mount:
	entry (a_lvax, a_username, a_unit_string);
	
	lvatp = s_lvatp;
	lvatep = addr (lvat.array (a_lvax));
	if lvate.pid ^= "0"b & lvate.waiting & lvate.mount_req_answered & ^lvate.invalidated
	     then call admin_gate_$syserr (3, "RCP: Check mount of logical volume ^a for ^a^/^15x^a",
	     lvate.lvname, (a_username), (a_unit_string));
	return;
	

/* --------------------------------------------------------- */
test:	entry (testdir);

dcl  testdir char (*);
	SYSDIR = testdir;
	WDX_RING = get_ring_ ();
	return;
						/*  */
%include acl_structures;
%include access_mode_values;
%include lv_atttbl;


/*  BEGIN MESSAGE DOCUMENTATION

   Message:
   RCP: Mount logical volume LVNAME for PROCESSNAME

   S: $beep

   T: $run

   M: A user (PROCESSNAME) has requested the attachment
   of logical volume LVNAME. It is not now mounted.  The
   initializer will issue mount messages for all physical volumes needed.

   A: Mount the required physical volumes, using the add_vol command
   to indicate when each has been made ready.  The user process will
   continue when the last volume has been mounted.  If the volume
   cannot be mounted, use the del_lv command to indicate this fact,
   and the user process will receive an error indication.


   Message:
   RCP: Check mount of logical volume LVNAME for PROCESSNAME
        PVNAME1(DRIVE1) ...

   S: $beep

   T: $run

   M: A user (PROCESSNAME) previously requested the attachment of logical volume
   LVNAME.  The mount has not been accomplished in a 4 minutes.
   All required physical volumes are specified (PVNAMEi, DRIVEi).

   A: Mount the required physical volumes, using the add_vol command
   to indicate when each has been made ready.  The user process will
   continue when the last volume has been mounted.  If the volume
   cannot be mounted, use the del_lv command to indicate this fact,
   and the user process will receive an error indication.

  
   Message:
   wdx: ERRORCODE Unable to send wakeup on master channel.

   S: $info

   T: $run

   M: The ring-1 logical volume mount software was unable to send a wakeup
   to the ring-4 software for the reason indicated.  Some mount requests
   may have been lost.

   A: $contact_sa

   END MESSAGE DOCUMENTATION */

     end;
