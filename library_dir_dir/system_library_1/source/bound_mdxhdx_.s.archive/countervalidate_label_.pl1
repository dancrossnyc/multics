/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
 1) change(99-06-23,Haggett):
    Y2K
                                                  END HISTORY COMMENTS */

countervalidate_label_: proc (a_labelp, a_valid_reg, a_valid_copy, a_ss_pack);

/* Countervalidator of labels for mdxhdx/rcp

   Bernard Greenberg 12/1/76 */
/* Modified 84-09-04 by EJ Sharpe - rename hdx refs to volume_registration_mgr_ */
/* Modified 84-10-29 by EJ Sharpe - change date_time_ refs to date_time_$format */

dcl  a_labelp ptr;
dcl  a_valid_reg bit (1);				/* 1 => instance of valid registered volume */
dcl  a_valid_copy bit (1);				/* 1 => valid and registered, but mtd copy exists */
dcl  a_ss_pack bit (1);				/* 1 => this is a storage system pack. */

dcl  volume_registration_mgr_$pvname_info entry (char (*), bit (36) aligned, char (*), bit (36) aligned, fixed bin, fixed bin (35));
dcl  mdx$check_lv entry (char (*), fixed bin (35));
dcl  code fixed bin (35);
dcl (lvname, pvname) char (32);
dcl addr		    builtin;

	labelp = a_labelp;

	if label.Multics ^= Multics_ID_String then do;	/* Not even ss pack */
	     a_valid_reg, a_valid_copy, a_ss_pack = "0"b;
	     return;
	end;

	pvname = label.pv_name;

	a_ss_pack = "1"b;				/* Is surely a ss pack */

	call volume_registration_mgr_$pvname_info (pvname, pvid, lvname, lvid, (0), code);
	if code ^= 0 then do;			/* No such volume */
	     a_valid_reg, a_valid_copy = "0"b;
	     return;
	end;

	if pvid = label.pvid & lvid = label.lvid & lvname = label.lv_name then do; /* It's real */
	     a_valid_reg = "1"b;
	     call mdx$check_lv (lvname, code);
	     a_valid_copy = (code = 0);
	end;
	else a_valid_reg, a_valid_copy = "0"b;
	return;

/* ----------------------------------------------------------- */

query:	entry (a_labelp, a_pvname, a_progname, a_drivename) returns (bit (1));

dcl  a_pvname char (32);
dcl (a_progname, a_drivename) char (*);
dcl (valid_reg, valid_copy, ss_pack) bit (1);
dcl  command_query_ entry options (variable);
dcl  answer char (10) varying;
dcl  date_time_$format entry (char(*), fixed bin(71), char(*), char(*)) returns(char(250) var);
dcl  chtime char (24);
dcl  story char (50);


dcl 1 query_info aligned,
    2 version fixed bin,
    2 yes_or_no_sw bit (1) unal,
    2 suppress_name_sw bit (1) unal,
    2 code fixed bin (35),
    2 query_code fixed bin (35);

dcl  initializer_mdc_$countervalidate_label_ entry (ptr, bit (1), bit (1), bit (1));


	labelp = a_labelp;
	pvname = a_pvname;

	call initializer_mdc_$countervalidate_label_ (labelp, valid_reg, valid_copy, ss_pack);
						/* Recursively get dope in other ring */
	if ^ss_pack then return ("1"b);		/* No problem here! */

	if ^valid_reg then story = "an unregistered pack named";
	else if pvname = label.pv_name
	then if valid_copy then story = "a copy of pv";
	     else story = "an earlier instance of pv";
	else if valid_copy then story = "a copy of Multics Storage System Volume";
	else story = "Multics Storage System Volume";
	if valid_reg & ^(^valid_copy & ^(pvname = label.pv_name))
 	then chtime = date_time_$format ("^9999yc-^my-^dm_^Hd:^MH", label.time_map_updated, "", "");
	else chtime = "";

	query_info.version = 2;
	query_info.yes_or_no_sw = "1"b;
	query_info.suppress_name_sw = "0"b;
	query_info.code = 0;
	query_info.query_code = 0;

	call command_query_ (addr (query_info), answer, a_progname,
	     "Volume on ^a is ^a ""^a""^[.^/^2s^;,^/^[which was never used^s^;last used ^a^]. ^]Do you wish to overwrite it?",
	     a_drivename, story, label.pv_name, chtime = "", label.time_map_updated = 0, chtime);
	return (answer = "yes");
	%include fs_vol_label;

     end;
