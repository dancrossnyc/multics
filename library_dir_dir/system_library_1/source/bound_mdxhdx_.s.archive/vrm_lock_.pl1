/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-06-05,GJohnson), approve(86-06-05,MCR7387),
     audit(86-06-10,Martinson), install(86-07-11,MR12.0-1091):
     Correct error message documentation.
                                                   END HISTORY COMMENTS */


/* VRM_LOCK_: Entries which handle logical volume registration lock */

/* Created 07/31/84 by EJ Sharpe - actually pirated mdc_lock_ */
/* Modified 84-11-01 by EJ Sharpe for some minor fixes */

vrm_lock_: proc;

/* Parameters */

dcl  arg_code fixed bin (35);

/* Automatic */

dcl  code fixed bin (35);
dcl  vl fixed bin;					/* Validation level */
dcl  vrm_data_rings (3) fixed bin (3);

/* Static */

dcl  saved_data_ptr ptr int static init (null);
dcl  test_mode bit (1) int static init ("0"b);		/* For debugging */

/* Constants */

dcl  vrm_data_dir char (32) int static options (constant) init (">system_library_1");
dcl  vrm_data_ename char (32) int static options (constant) init ("vrm_data");


%include vrm_data;


/* External stuff */

dcl  admin_gate_$syserr_error_code entry () options (variable);
dcl  clock_ entry returns (fixed bin (52));
dcl  cu_$level_get entry (fixed bin);
dcl  cu_$level_set entry (fixed bin);
dcl  get_group_id_ entry returns (char (32));
dcl  get_lock_id_ entry returns (bit (36));
dcl  get_ring_ entry returns (fixed bin);
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$truncate_file entry (char (*), char (*), fixed bin (19), fixed bin (35));
dcl  hcs_$append_branchx entry (char (*), char (*), fixed bin (5), dim (3) fixed bin (3), char (*), fixed bin (1),
     fixed bin (1), fixed bin (24), fixed bin (35));
dcl  admin_gate_$reclassify_sys_seg entry (char (*), char (*), bit (72) aligned, fixed bin (35));
dcl  set_lock_$lock entry (bit (36) aligned, fixed bin, fixed bin (35));
dcl  set_lock_$unlock entry (bit (36) aligned, fixed bin (35));

dcl  error_table_$invalid_lock_reset ext fixed bin (35);
dcl  error_table_$namedup ext fixed bin (35);

dcl  sys_info$access_class_ceiling bit (72) aligned external;

dcl (null) builtin;

/* Entries to handle the lock */

lock:	entry (arg_code);

	if test_mode then do;
	     arg_code = 0;
	     return;
	end;
	call find_vrm_data;				/* Get pointer */
	call set_lock_$lock (vrm_data.lock, 30, code);
	if code = 0 then go to locked;		/* Locked ok */
	if code = error_table_$invalid_lock_reset then do; /* Recoverable error */
	     call admin_gate_$syserr_error_code (4, code, "vrm_lock_$lock:");
	     code = 0;
	     go to locked;
	end;

	arg_code = code;

	return;					/* Lock failed */

locked:	vrm_data.lock_cnt = vrm_data.lock_cnt + 1;	/* Do some meters */
	vrm_data.time_locked = clock_ ();
	vrm_data.locker_name = get_group_id_ ();
	arg_code = code;
	return;


unlock:	entry;

	if test_mode then return;
	call find_vrm_data;
unlock_common:
	vrm_data.unlock_cnt = vrm_data.unlock_cnt + 1;
	vrm_data.time_spent_locked = vrm_data.time_spent_locked + clock_ () - vrm_data.time_locked;
	call set_lock_$unlock (vrm_data.lock, code);
	if code ^= 0 then call admin_gate_$syserr_error_code (4, code, "vrm_lock_$unlock:");
	return;


/* Entry called by cleanup handlers on crawl-out. It is not certain that the lock is locked */

cleanup:	entry;

	if test_mode then return;
	if saved_data_ptr = null then return;		/* Never called lock */
	vrm_datap = saved_data_ptr;

	if vrm_data.lock ^= get_lock_id_ () then return;	/* Not locked by me */
	go to unlock_common;			/* Join std path */

/* Entry to set test mode */

set_test_mode: entry;

	test_mode = "1"b;
	return;

/* Internal procedure to get a pointer to the vrm_data segment */

find_vrm_data: proc;

dcl  vrm_data_err condition;

	     if saved_data_ptr ^= null then do;		/* Pointer already knwon */
		vrm_datap = saved_data_ptr;
		return;
	     end;

	     call cu_$level_get (vl);
	     call cu_$level_set (get_ring_ ());
	     call hcs_$initiate (vrm_data_dir, vrm_data_ename, "", 0, 0, saved_data_ptr, code);
	     call cu_$level_set (vl);

	     if saved_data_ptr ^= null then do;		/* It worked */
		vrm_datap = saved_data_ptr;
		return;
	     end;

	     call admin_gate_$syserr_error_code (4, code,
		"vrm_lock_: Unable to initiate ^a>^a.", vrm_data_dir, vrm_data_ename);

	     signal vrm_data_err;			/* I don't know what else to do now */

	     return;

	end find_vrm_data;

/* Initialization entry to create the vrm_data segment which contains the lock */

vrm_data_init: entry;

	if test_mode then return;

	vrm_data_rings = get_ring_ ();
	call hcs_$append_branchx (vrm_data_dir, vrm_data_ename, 01010b, vrm_data_rings, "*.*.*", 0, 0, 0, code);
	if (code ^= 0) & (code ^= error_table_$namedup) then do;
	     call admin_gate_$syserr_error_code (0, code, "vrm_lock_$vrm_data_init: Unable to create ^a>^a.",
		vrm_data_dir, vrm_data_ename);
	     return;
	end;

	if code = error_table_$namedup then do;
	     call hcs_$truncate_file (vrm_data_dir, vrm_data_ename, 0, code);
	     if code ^= 0 then do;
		call admin_gate_$syserr_error_code (0, code, "vrm_lock_$vrm_data_init: Unable to truncate ^a>^a.",
		     vrm_data_dir, vrm_data_ename);
		return;
	     end;
	end;

	call admin_gate_$reclassify_sys_seg (vrm_data_dir, vrm_data_ename, sys_info$access_class_ceiling, code);
	if code ^= 0 then
	     call admin_gate_$syserr_error_code (0, code, "vrm_lock_$vrm_data_init: Unable to reclassify ^a>^a.",
	     vrm_data_dir, vrm_data_ename);
	return;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   vrm_lock_$lock: LOCK ERROR MESSAGE.

   S: $log

   T: $run

   M: A logical volume registration operation failed because of a problem
   with the vrm control lock.

   A: $ignore

   Message:
   vrm_lock_$unlock: LOCK ERROR MESSAGE.

   S: $log

   T: $run

   M: At the completion ofa logical volume registratin operation, some
   error occured unlocking the vrm control lock.

   A: $ignore

   Message:
   vrm_lock_: Unable to initiate PATHNAME. REASON.

   S: $log

   T: $run

   M: Logical volume registration control (vrm) was unable to initiate
   PATHNAME, which contains the vrm control lock, because of REASON.
   The logical volume registration control operation requested was
   not performed.

   A: $ignore

   Message:
   vrm_lock_$vrm_data_init: Unable to create PATHNAME. REASON.

   S: $info

   T: $init

   M: Logical volume registration control (vrm) was unable to create
   the segment PATHNAME, to be used for the vrm control lock, for the
   REASON given.  Subsequent logical volume registration control 
   operations may fail.

   A: $ignore

   Message:
   vrm_lock_$vrm_data_init: Unable to truncate PATHNAME. REASON.

   S: $info

   T: $init

   M: Logical volume registration control was unable to truncate
   the segment PATHNAME for the REASON given. This segment is to
   be used for the logical volume registration control lock.
   Subsequent logical volume registration control operations may fail.

   A: $ignore

   Message:
   vrm_lock_$vrm_data_init: Unable to reclassify PATHNAME. REASON.

   S: $info

   T: $init

   M: Logical volume registration control was unable to reclassify
   the segment PATHNAME to its proper access class for the REASON given.
   This segment is to be used for the logical volume registration control
   lock.  Subsequent logical volume registration control operations may fail.

   END MESSAGE DOCUMENTATION */


end vrm_lock_;
