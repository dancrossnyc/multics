/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


verify_label_: proc (a_dtp, a_dtep, a_pvtx, ec);

/* VERIFY_LABEL_: Ring-1 program to check the label of a file system disk.

   This interim version calls the hardcore to read the label.
   Later versions will call IOI to read the label in.

   */

dcl (a_dtp, a_dtep) ptr parameter,
     a_pvtx fixed bin,
     ec fixed bin (35) parameter;

dcl  initializer_gate_$read_disk entry (fixed bin, fixed bin, ptr, fixed bin (35));

dcl  error_table_$bad_label fixed bin (35) ext;
dcl  error_table_$no_label fixed bin (35) ext;
dcl  error_table_$ai_restricted fixed bin (35) ext;
dcl  reasonable_time fixed bin (71) int static init (2276881905645328);

dcl 1 label_buffer like label;

/* -------------------------------------------------------- */

	labelp = addr (label_buffer);
	ec = 0;
	call initializer_gate_$read_disk (a_pvtx, LABEL_ADDR, labelp, ec);
	if ec ^= 0 then return;

	dtp = a_dtp;
	dtep = a_dtep;
	ec = error_table_$no_label;
	if label.Multics ^= Multics_ID_String then return;
	if label.version ^= 1 then return;
	if label.time_registered < reasonable_time then return;
	ec = error_table_$bad_label;
	if label.pvid ^= dte.pvid then return;
	if label.root.here ^= dte.rpv then return;
	lvep = addr (dt.lv_array (dte.lvx));
	if label.lv_name ^= lve.lvname then return;
	if label.lvid ^= lve.lvid then return;
	if label.password ^= "0"b then return;
	if lve.lvname = "root" then dte.pvname = label.pv_name; /* Gran kludge */
	else if label.pv_name ^= dte.pvname then return;

	ec = error_table_$ai_restricted;
	if label.max_access_class ^= lve.max_access_class then return;
	if label.min_access_class ^= lve.min_access_class then return;
	ec = 0;


%include disk_pack;
%include fs_vol_label;
%include disk_table;
     end verify_label_;
