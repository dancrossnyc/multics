/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: ^inddcls,indattr,^indnoniterdo */

volume_registration_cmds_: vrc_: proc;

	comname = "volume_registration_cmds_"; ec = 0;
	call FAIL ("This entry not used.");
	return;

/* Logical Volume Registration Functions.

   add_volume_registration -pv name -lv name2 -model device_model ...
   change_volume_registration -pv|-lv name ...
   delete_volume_registration -pv|-lv name
   list_volume_registration -pv|-lv name {-bf}

   THVV
   Modified 4/79 by Michael R. Jordan to require -model in avr and print correct model number in lvr.
   Modified 84-08-21 by EJ Sharpe to move more of the database manipulation
		into ring-1 to make these system administrator rather
		than operator commands.
		Change name to volume_registration_cmds_ from hvr_.
                    Also added internal documentation.
   Modified 84-10-30 by EJ Sharpe for some minor upgrades
*/

/* AUTOMATIC */

dcl  ap		ptr;			/* arg pointer */
dcl  al   	fixed bin (21);		/* arg length */
dcl  bchr		char (al) based (ap);	/* args */

dcl  pvname 	char (32) init ("");	/* Physical volume name */
dcl  location	char (32) init ("uninitialized");
dcl  dt_str	char (24);
dcl  pvid           bit (36) aligned init ("0"b);
dcl  lvname 	char (32) init ("");	/* Logical volume name */
dcl  lvid           bit (36) aligned init ("0"b);
dcl  tcs 		char (32) init ("");	/* Control arg */
dcl  tcs1 	char (256) init ("");	/* Value */
dcl  temp_ptr       ptr init (null);
dcl  comname	char (32) init ("add_vol_registration");
dcl  aa_string	char (32) aligned;
dcl  auth_mnemonics char (172);
dcl  b36		bit (36) aligned init ("0"b);
dcl  fb35           fixed bin (35);
dcl  fb71           fixed bin (71);
dcl  old_lvid	bit (36) init ("0"b);
dcl  old_lvname	char (32) init ("");
dcl  access_range   (2) bit (72) aligned init ("0"b, sys_info$access_class_ceiling);
dcl  gave_access_low bit (1) init ("0"b);	/* TRUE if user specified */
dcl  gave_access_high bit (1) init ("0"b);	/* TRUE if user specified */
dcl  gave_public	bit (1) init ("0"b);	/* TRUE if user specified */
dcl  lv_already_registered	bit (1) init ("0"b);
dcl  new_lv	bit (1) init ("0"b);	/* TRUE if new seg */
dcl  acs_dir        char (168) init ("");
dcl  acs_ent        char (32) init ("");
dcl  ans	          bit (1);
dcl (i, j)	fixed bin;
dcl  more_args	bit (1) init ("1"b);
dcl  argno	fixed bin init (1);
dcl  serial	char (32) init ("unspecified"); /* Medium manufacturer's serial */
dcl  pubbit	bit (1) init ("1"b);	/* TRUE if public volume */
dcl  owner	char (32) init ("");	/* Person.Project of vol owner */
dcl  owneri	fixed bin;		/* .. index of dot in owner */
dcl  model	fixed bin init (0);		/* internal model number */
dcl  change_model   bit (1);
dcl  change_name    bit (1);
dcl  change_uid     bit (1);
dcl  change_auth    bit (1);
dcl  change_range   bit (1);
dcl  ec		fixed bin (35) init (0);
dcl  ec2		fixed bin (35) init (0);
dcl  temp_str	char (256);		/* for building error msgfs, etc */
dcl  str_len	fixed bin (21);		/* length of string passed to ioa_$rsnnl */


/* CONSTANTS */

dcl  YESNO (0:1) char (3) static init ("no", "yes");
dcl  PVNAME_LEGAL char (37) static options (constant)
		init ("0123456789abcdefghijklmnopqrstuvwxyz_");
dcl  LVNAME_LEGAL char (76) static options (constant)
		init (" `'_^~+-:{}!.0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");

/* MISC */

dcl (addr,
     clock,
     null,
     rtrim,
     fixed,
     hbound,
     index,
     length,
     substr,
     unspec,
     verify)	builtin;

dcl  cleanup	condition;

dcl  error_table_$ai_invalid_range fixed bin (35) ext;
dcl  error_table_$badopt	fixed bin (35) ext;
dcl  error_table_$bad_arg	fixed bin (35) ext;
dcl  error_table_$noarg	fixed bin (35) ext;

dcl  sys_info$access_class_ceiling	bit (72) aligned ext;

/* ENTRIES */

dcl  aim_check_$greater_or_equal entry (bit(72) aligned, bit(72) aligned) returns(bit(1) aligned);
dcl  com_err_		entry() options(variable);
dcl  convert_access_class_$from_string	entry (bit(72) aligned, char(*), fixed bin(35));
dcl  convert_access_class_$from_string_range entry ((2) bit(72) aligned, char(*), fixed bin(35));
dcl  convert_access_class_$to_string_short entry (bit(72) aligned, char(*), fixed bin(35));
dcl  convert_aim_attributes_	entry (bit(72) aligned) returns(char(32) aligned);
dcl  convert_date_to_binary_  entry (char(*), fixed bin(71), fixed bin(35));
dcl  cv_dec_check_		entry (char(*), fixed bin(35)) returns(fixed bin(35));
dcl  cv_oct_check_		entry (char(*), fixed bin(35)) returns(fixed bin(35));
dcl  cu_$arg_ptr		entry (fixed bin, ptr, fixed bin(21), fixed bin(35));
dcl  date_time_$format	entry (char(*), fixed bin(71), char(*), char(*)) returns(char(250) var);
dcl  expand_pathname_$add_suffix entry (char(*), char(*), char(*), char(*), fixed bin(35));
dcl  get_temp_segment_	entry (char(*), ptr, fixed bin(35));
dcl  release_temp_segment_	entry (char(*), ptr, fixed bin(35));
dcl  hcs_$truncate_seg	entry (ptr, fixed bin(19), fixed bin(35));
dcl  command_query_$yes_no	entry() options(variable);
dcl  mdc_priv_$change_lvr	entry (char(*), ptr, fixed bin(35));
dcl  mdc_priv_$change_pvr	entry (char(*), ptr, fixed bin(35));
dcl  mdc_priv_$delete_lvr	entry (char(*), fixed bin(35));
dcl  mdc_priv_$delete_pvr	entry (char(*), fixed bin(35));
dcl  mdc_priv_$read_lvr	entry (char(*), ptr, fixed bin(35));
dcl  mdc_priv_$read_pvr	entry (char(*), ptr, fixed bin(35));
dcl  mdc_priv_$add_lvr	entry (char(*), ptr, fixed bin(35));
dcl  mdc_priv_$add_pvr	entry (char(*), ptr, fixed bin(35));
dcl  mdc_$find_volname	entry (bit(36), char(*), char(*), fixed bin(35));
dcl  pathname_		entry (char(*), char(*)) returns(char(168));
dcl  unique_chars_		entry (bit(*)) returns(char(15));
dcl  get_group_id_            entry() returns(char(32));
dcl  ioa_			entry() options(variable);
dcl  ioa_$rsnnl		entry() options(variable);
%page;

add_volume_registration:
add_vol_registration:	/* operator command name - pre MR11 */
avr:	 entry;

/******************************************************************************

This is an administrative command used to register logical or physical volumes.
It accepts arguments which specify attributes of the volume being registered.
Its syntax is:

     avr -pv NAME {PV ATTRIBUTE ARGS}...
	... -lv NAME {LV ATTRIBUTE ARGS}

The "PV ATTRIBUTE ARGS" must include at least the device model.
The "LV ATTRIBUTE ARGS" are specified only when registering a new LV.
All arguments are non-positional except for the first two (i.e. "pv NAME").

The code is written like:

	entry
	setup
	process args
	check arg consistancy
	if LV not already registered then
	     fill in registration structure for new LV and new PV
	     call inner ring
	else
	     fill in registration structure for new PV
	     call inner ring
	cleanup
	exit

******************************************************************************/

	call set_up("add_volume_registration");
	on cleanup call clean_up;

	call getarg (tcs);				/* First arg must be "pv" */

	ec = 0;

	if ^(tcs = "pv"  /* retained for compatability */
	     | tcs = "-physical_volume"  | tcs = "-pv")  then do;
	     ec = error_table_$badopt;
	     call FAIL ("First arg must be ""-pv"".");
	end;

	call getarg (pvname);			/* Get physical volume name */
	if pvname = "" then call FAIL ("PV name not specified.");
	if verify (rtrim (pvname), PVNAME_LEGAL) ^= 0 then call FAIL ("Invalid characters in name: " || pvname);

	do while (more_args);
	     call getarg (tcs);			/* Get control arg */
	     call getarg (tcs1);			/* .. and value */

	/* The control args -lv, -access_(high low), -owner, -public,
	   -acs, and -lvid describe the Logical Volume */

	     if tcs = "-logical_volume"  |  tcs = "-lv" then do;
		lvname = tcs1;
		if verify (rtrim(lvname), LVNAME_LEGAL) ^= 0 then call FAIL("Illegal characters in LV name.");
	     end;
	     else if tcs = "-access_class"  |  tcs = "-acc" then do;
		call convert_access_class_$from_string_range (access_range, tcs1, ec);
		if ec ^= 0 then call FAIL (tcs1);
	     end;
	     /* -access_low and -access_high retained for compatability
		with the old operator avr command */
	     else if tcs = "-access_low"  |  tcs = "-ac_low" then do;
		call convert_access_class_$from_string (access_range(1), tcs1, ec);
		if ec ^= 0 then call FAIL ("Illegal auth: " || tcs1);
		gave_access_low = "1"b;
	     end;
	     else if tcs = "-access_high"  |  tcs = "-ac_high" then do;
		call convert_access_class_$from_string (access_range(2), tcs1, ec);
		if ec ^= 0 then call FAIL ("Illegal auth: " || tcs1);
		gave_access_high = "1"b;
	     end;
	     else if tcs = "-owner"  |  tcs = "-ow" then do;
		call check_owner;
		if owneri = 0 then call FAIL ("Invalid owner: " || tcs1);
	     end;
	     else if tcs = "-public"  |  tcs = "-pub" then do;
		if tcs1 ^= "yes"  &  tcs1 ^= "y"  &
		   tcs1 ^= "no"   &  tcs1 ^= "n"  then do;
		     ec = error_table_$bad_arg;
		     call FAIL("Public argument must be ""yes"" or ""no"".");
		end;
		pubbit = ( (tcs1 = "yes") | (tcs1 = "y") );
		gave_public = "1"b;
	     end;
	     else if tcs = "-acs_path"  |  tcs = "-acs" then do;
		if tcs1 ^= "" then do;
		     call expand_pathname_$add_suffix (tcs1, "acs", acs_dir, acs_ent, ec);
		     if ec ^= 0 then call FAIL ("Bad ACS path: " || tcs1);
		end;
		else do;
		     acs_dir = "";
		     acs_ent = "";
		end;
	     end;
	     else if tcs = "-logical_volume_uid"  |  tcs = "-lvid" then do;
		fb35 = cv_oct_check_ (tcs1, ec2);
		lvid = unspec(fb35);
		if ec2 ^= 0 then call FAIL ("Invalid LVID: " || tcs1);
	     end;

	/* The rest of the control arguments (-pvid, -model, -location,
	   and -serial) are PV specific	 */

	     else if tcs = "-physical_volume_uid"  |  tcs = "-pvid" then do;
		fb35 = cv_oct_check_ (tcs1, ec2);
		pvid = unspec(fb35);
		if ec2 ^= 0 then call FAIL ("Invalid PVID: " || tcs1);
	     end;
	     else if tcs = "-device_model"  |  tcs = "-model" then do;
		i = cv_dec_check_ (tcs1, ec2);
		if ec2 ^= 0 then call FAIL ("Invalid model: " || tcs1);
		do model = 1 to hbound (MODEL, 1) while (i ^= MODEL (model)); end;
		if model > hbound (MODEL, 1) then call FAIL ("Unknown model: " || tcs1);
		model = MODELX (model);
	     end;
	     else if tcs = "-manufacturer_serial"  |  tcs = "-serial" then
		     serial = tcs1;
	     else if tcs = "-location"  |  tcs = "-loc" then
		     location = tcs1;
	     /* no control arg for "password" field */
	     else do;
		ec = error_table_$badopt;
		call FAIL (tcs);
	     end;
	end;

	if model = 0				/* Missing -model control arg */
	then do;
	     ec = error_table_$noarg;
	     call FAIL ("-model must be specified");
	end;

	if lvname = "" 
	then call FAIL ("""-lv"" must be specified."); /* Check given args */

	call mdc_priv_$read_lvr (lvname, vrp, ec);
	lv_already_registered = ( ec = 0 );

	if lv_already_registered & (gave_access_low | gave_access_high |
		gave_public | owner^="" | acs_dir^="" | lvid)
	then call FAIL ("LV already registered, use change_volume_registration to modify its attributes.");

	call mdc_priv_$read_pvr (pvname, vrp, ec);
	if ec = 0 then call FAIL ("PV already registered: " || pvname);
	ec = 0;

	if gave_access_low | gave_access_high then
	     if ^aim_check_$greater_or_equal (access_range(2), access_range(1))
	     then do;
		ec = error_table_$ai_invalid_range;
		call FAIL ("");
	     end;

	call hcs_$truncate_seg (vrp, 0, ec); /* initialize registration */
	if ec ^= 0 then call FAIL ("Trouble initializing structure.");

	if ^lv_already_registered then do;  /* code to register new LV */

	     if ^pubbit | acs_dir ^= "" then do;	/* Is ACS requested or needed? */
		if acs_dir = "" then do;
		     str_len = length (acs_dir);
		     call ioa_$rsnnl (">udd>^a>^a", acs_dir, str_len, substr(owner, owneri+1), substr (owner, 1, owneri-1));
		     acs_ent = rtrim(lvname)||".acs";
		end;
		else if acs_ent ^= rtrim(lvname)||".acs"
		     then call FAIL ("Invalid ACS path.");
	     end;

	     /* first let's check with user */
	     call command_query_$yes_no (ans, 0, comname, "",
		"LV ""^a"" does not exist.  Do you wish to create it? ", lvname);
	     if ^ans then do;  /* must've mis-typed LV name */
		call clean_up;
		return;
	     end;

	     if owner = "" then do;		/* if owner not specified, we'll make it the caller */
		owner = get_group_id_ ();
		i = length(rtrim(owner))-2;
		owner = substr(owner, 1, i);  /* strip off tag */
		owneri = index (owner, ".");
	     end;

	     /* fill in the registration structure... */
	     volume_registration.version = Volume_Registration_Version_2;
	     if lvid then volume_registration.lvid = lvid;
	     else do;
		fb71 = clock();
		volume_registration.lvid = substr (unspec (fb71), 36, 36);
	     end;
	     volume_registration.lvname = lvname;
	     volume_registration.volume_owner = owner;
	     volume_registration.public = pubbit;
	     volume_registration.access_class_range = access_range;
	     if acs_dir = ""  &  acs_ent = ""
	     then volume_registration.acs_path = "";
	     else volume_registration.acs_path = pathname_ (acs_dir, acs_ent);
	     volume_registration.npv = 1;  /* registering first right now */

	     /* now, let's get the first PV into the registration */
	     volume_registration.npv = 1;

	     pvrp = addr (volume_registration.pv(1)); /* use first entry */
	     if pvid then pv_registration.pvid = pvid;
	     else do;
		fb71 = clock();
		pv_registration.pvid = substr (unspec (fb71), 36, 36);
	     end;
	     pv_registration.model = model;
	     pv_registration.pvname = pvname;
	     pv_registration.location = location;
	     pv_registration.mfg_serial = serial;
	     pv_registration.password = "0"b;
	     pv_registration.date_registered = clock ();

	     call mdc_priv_$add_lvr (lvname, vrp, ec);
	     if ec ^= 0 then call FAIL ("Cannot register: " || lvname);

	     call ioa_ ("^a: Registered PV ""^a"" (pvid ^w) on new LV ""^a"" lvid ^w).", comname,
		pvname, volume_registration.pv(1).pvid, lvname, volume_registration.lvid);

	end;
	else do;   /* we'll just add a new PV to an existing LV */

	     if pvid then pv_registration.pvid = pvid;
	     else do;
		fb71 = clock();
		pv_registration.pvid = substr (unspec (fb71), 36, 36);
	     end;

	     pv_registration.model = model;	/* Fill in per-pak data */
	     pv_registration.pvname = pvname;
	     pv_registration.location = location;
	     pv_registration.mfg_serial = serial;
	     pv_registration.password = "0"b;
	     pv_registration.date_registered = clock ();

	     call mdc_priv_$add_pvr (lvname, pvrp, ec);
	     if ec ^= 0 then call FAIL ("Cannot register: " || pvname);

	     call ioa_ ("^a: Registered PV ""^a"" (pvid ^w) on LV ""^a"".",
		comname, pvname, pvrp->pv_registration.pvid, lvname);
	end;

	call clean_up;

	return;
%page;

change_volume_registration:
change_vol_registration:	/* operator command name - pre MR11 */
cvr:	entry;

/******************************************************************************

This is an administrative command which facilitates the adjustment of
volume attributes.  Its syntax is:

     cvr [-pv | -lv] NAME {PV or LV ATTRIBUTE ARGS}

Some volume attributes should not be changed when the physical disk medium
has already been initialized.  This is because some attributes (e.g. name
and unique identifier) are written onto the medium label at initialization
and cannot be altered without re-initialization of the medium.

The code is written like:

	entry
	setup
	if first arg is "pv" then
	     process args for PV
	     check arg consistancy
	     fill in PV registration structure with changes
	     call inner ring
	else if first arg is "lv" then
	     process args for LV
	     check arg consistancy
	     fill in LV registration structure with changes
	     call inner ring
	else first arg is in error
	cleanup
	exit

******************************************************************************/

	call set_up("change_volume_registration");
	on cleanup call clean_up;

	call getarg (tcs);

	ec = 0;

	change_model, change_name, change_uid, change_auth, change_range = "0"b;

	if tcs = "pv" /* retained for compatability */
	     |  tcs = "-physical_volume"  |  tcs = "-pv" then do;
	     pvrp = vrp;   /* use pv_registration instead of volume_registration */
	     call getarg (pvname);			/* yes */
	     call mdc_priv_$read_pvr (pvname, pvrp, ec);
	     if ec ^= 0 then call FAIL ("PV not found: " || pvname);

	     do while (more_args);
		call getarg (tcs);			/* Get control arg */
		call getarg (tcs1);			/* .. and value */
		if tcs = "-device_model"  |  tcs = "-model" then do;
		     j = cv_dec_check_ (tcs1, ec2);
		     if ec2 ^= 0 then call FAIL("Invalid model: "||tcs1);
		     else do;
			do model = 1 to hbound (MODEL, 1) while (j ^= MODEL (model)); end;
			if model > hbound (MODEL, 1) then call FAIL("Unknown model: "||tcs1);
			else do;
			     model = MODELX (model);
			     pv_registration.model = model;
			end;
		     end;
		     change_model = "1"b;
		end;
		else if tcs = "-manufacturer_serial"  |  tcs = "-serial"
		     then pv_registration.mfg_serial = tcs1;
		else if tcs = "-location"  |  tcs = "-loc"
		     then pv_registration.location = tcs1;
		else if tcs = "-date_registered"  |  tcs = "-dtr" then do;
		     call convert_date_to_binary_ (tcs1, pv_registration.date_registered, ec);
		     if ec ^= 0 then call FAIL("Bad date: "||tcs1);
		end;
		else if tcs = "-name"  |  tcs = "-nm" then do;
		     if verify (rtrim (tcs1), PVNAME_LEGAL) ^= 0 then call FAIL ("Invalid characters in name: " || tcs1);
		     else pv_registration.pvname = tcs1;
		     change_name = "1"b;
		end;
		else if tcs = "-physical_volume_uid"  |  tcs = "-pvid" then do;
		     fb35 = cv_oct_check_ (tcs1, ec2);
		     b36 = unspec(fb35);
		     if ec2 ^= 0 then call FAIL("Invalid PVID: "||tcs1);
		     else pv_registration.pvid = b36;
		     change_uid = "1"b;
		end;
		/* there is no control arg for changing "password" field */
		else do;
		     ec = error_table_$bad_arg;
		     call FAIL("Bad control arg: "||tcs||" "||tcs1);
		end;
	     end;

	     if change_model | change_name | change_uid then do;
		call command_query_$yes_no (ans, 0, comname, "",
		     "PV model, name, or uid should not be changed for initialized volumes.  Do you wish to continue? ");
		if ^ans then do;
		     call clean_up;
		     return;
		end;
	     end;

	     /* now tell ring-1 to do it! */
	     call mdc_priv_$change_pvr (pvname, pvrp, ec);
	     if ec ^= 0 then call FAIL ("Could not make changes.");

	     call ioa_ ("^a: Changed attributes for PV ""^a"".", comname, pvname);
	end;
	else if tcs = "lv" /* retained for compatability */
	     |  tcs = "-logical_volume"  |  tcs = "-lv"  then do;
	     call getarg (lvname);
	     call mdc_priv_$read_lvr (lvname, vrp, ec);
	     if ec ^= 0 then call FAIL ("LV not registered: " || lvname);

	     volume_registration.npv = 0;   /* don't care about the PV entries... */

	     do while (more_args);
		call getarg (tcs);
		call getarg (tcs1);

		if tcs = "-access_class"  |  tcs = "-acc" then do;
		     call convert_access_class_$from_string_range (access_range, tcs1, ec);
		     if ec ^= 0 then call FAIL (tcs1);
		     change_range = "1"b;
		     volume_registration.access_class_range = access_range;
		end;
		/* -access_low and -access_high retained for compatability
		     with the old operator cvr command */
		else if tcs = "-access_low"  |  tcs = "-ac_low" then do;
		     call convert_access_class_$from_string (access_range(1), tcs1, ec);
		     if ec ^= 0 then call FAIL("Illegal auth: "||tcs1);
		     else volume_registration.access_class_range(1) = access_range(1);
		     change_auth = "1"b;
		end;
		else if tcs = "-access_high"  |  tcs = "-ac_high" then do;
		     call convert_access_class_$from_string (access_range(2), tcs1, ec);
		     if ec ^= 0 then call FAIL("Illegal auth: "||tcs1);
		     else volume_registration.access_class_range(2) = access_range(2);
		     change_auth = "1"b;
		end;
		else if tcs = "-public"  |  tcs = "-pub" then do;
			if tcs1 ^= "yes"  &  tcs1 ^= "y"  &
			   tcs1 ^= "no"   &  tcs1 ^= "n"  then call FAIL("Public argument must be ""yes"" or ""no"".");
			volume_registration.public = ( (tcs1 = "yes") | (tcs1 = "y") );
		     end;
		else if tcs = "-acs_path"  |  tcs = "-acs" then do;
		     if tcs1 ^= "" then do;
			call expand_pathname_$add_suffix (tcs1, "acs", acs_dir, acs_ent, ec);
			if ec ^= 0 then call FAIL("Bad acs path: "||tcs1);
			if acs_ent ^= rtrim(lvname)||".acs" then call FAIL ("Bad acs path: "||tcs1);
			volume_registration.acs_path = pathname_ (acs_dir, acs_ent);
		     end;
		     else do;
			acs_dir = "";
			acs_ent = "";
			volume_registration.acs_path = "";
		     end;
		end;
		else if tcs = "-owner"  |  tcs = "-ow" then do;
		     call check_owner;
		     if owneri = 0 then do;
			ec = error_table_$bad_arg;
			call FAIL("Invalid owner: "||tcs1);
		     end;
		     else volume_registration.volume_owner = owner;
		end;
		else if tcs = "-name"  |  tcs = "-nm" then do;
			if verify (rtrim(tcs1), LVNAME_LEGAL) ^= 0 then call FAIL("Illegal characters in LV name.");
			volume_registration.lvname = tcs1;
			change_name = "1"b;
		     end;
		else if tcs = "-logical_volume_uid"  |  tcs = "-lvid" then do;
		     fb35 = cv_oct_check_ (tcs1, ec2);
		     b36 = unspec(fb35);
		     if ec2 ^= 0 then call FAIL("Invalid LVID: "||tcs1);
		     else volume_registration.lvid = b36;
		     change_uid = "1"b;
		end;
		else do;
		     ec = error_table_$badopt;
		     call FAIL(tcs);
		end;
	     end;

	     if change_auth then
		if ^aim_check_$greater_or_equal (volume_registration.access_class_range(2),
						volume_registration.access_class_range(1))
		then do;
		     ec = error_table_$ai_invalid_range;
		     call FAIL ("");
		end;

	     if change_range | change_auth | change_name | change_uid then do;
		call command_query_$yes_no (ans, 0, comname, "",
		     "LV access class, name, or uid should not be changed for initialized volumes.  Do you wish to continue? ");
		if ^ans then do;
		     call clean_up;
		     return;
		end;
	     end;

	     /* now get ring-1 to make the changes */
	     call mdc_priv_$change_lvr (lvname, vrp, ec);
	     if ec ^= 0 then call FAIL ("Unable to make changes.");

	     call ioa_ ("^a: Changed attributes of LV ""^a"".", comname, lvname);
	end;

	else do;
	     ec = error_table_$badopt;
	     call FAIL ("First arg must be ""-pv"" or ""-lv"".");
	end;

	call clean_up;

	return;
%page;

delete_volume_registration:
del_vol_registration:	/* operator command name - pre MR11 */
dvr:      entry;
 
/******************************************************************************

This is an administrative command used to remove the registration of a logical
or physical volume.  Its syntax is:

     dvr [-lv | -pv] NAME

Physical volumes should only be deregistered when their contents have been
moved onto other physical volumes (within the same logical volume).
Logical volumes should only be deregistered when their corresponding directory
hierearchies have been removed from the system (thus leaving the whole LV
empty).  Since a logical volume must always have at least one
physical volume, the last PV in an LV may not be deleted from the LV, the
LV itself must be deleted.

The code is written like:

	entry
	setup
	if first arg is "pv" then
	     check existance of PV
	     get name of PV's LV
	     check LV for more than one PV
	     call inner ring to delete PV
	else if first arg is "lv" then
	     check existance of LV
	     list names of PVs being deleted with the LV
	     call inner ring to delete LV
	else first arg is invalid
	cleanup
	exit

******************************************************************************/

	call set_up("delete_volume_registration");
	on cleanup call clean_up;

	call getarg (tcs);

	ec = 0;

	if tcs = "pv"  /* retained for compatability */
	     |  tcs = "-physical_volume"  |  tcs = "-pv"  then do;
	     call getarg (pvname);
	     if verify (rtrim(pvname), PVNAME_LEGAL) ^= 0 then call FAIL("Illegal characters in PV name.");

	     call mdc_priv_$read_pvr (pvname, pvrp, ec);
	     if ec ^= 0 then call FAIL ("PV not found: " || pvname);

	     call mdc_$find_volname ((pv_registration.pvid), pvname, lvname, ec);
	     if ec ^= 0 then call FAIL ("Unable to get LV name.");
	     call mdc_priv_$read_lvr (lvname, vrp, ec);
	     if ec ^= 0 then call FAIL ("Unable to get LV data.");

	     if volume_registration.npv = 1 then do;
		str_len = length (temp_str);
		call ioa_$rsnnl ("PV ""^a"" is last in LV ""^a"".  User ""dvr lv ^a"".", temp_str, str_len, pvname, lvname, lvname);
		call FAIL (temp_str);
	     end;

	     call mdc_priv_$delete_pvr (pvname, ec);
	     if ec ^= 0 then call FAIL ("Cannot delete: " || pvname);

	     call ioa_ ("^a: Deleted PV ""^a"" from LV ""^a"".", comname, pvname, lvname);
	end;
	else if tcs = "lv"  /* retained for compatability */
	     |  tcs = "-logical_volume"  |  tcs = "-lv"  then do;
	     call getarg (lvname);
	     if verify(rtrim(lvname), LVNAME_LEGAL) ^= 0 then call FAIL("Illegal characters in LV name.");

	     call mdc_priv_$read_lvr (lvname, vrp, ec);
	     if ec ^= 0 then call FAIL ("LV not registered: " || lvname);

	     do i = 1 to volume_registration.npv;
		call ioa_ ("^a: Deleting PV ""^a"" from LV ""^a"".", comname, volume_registration.pv (i).pvname, lvname);
	     end;

	     call mdc_priv_$delete_lvr (lvname, ec);
	     if ec ^= 0 then call FAIL ("Cannot modify: " || lvname);

	     call ioa_ ("^a: Deleted LV ""^a"".", comname, lvname);
	end;
	else do;
	     ec = error_table_$badopt;
	     call FAIL ("First arg must be ""-pv"" or ""-lv"".");
	end;

	call clean_up;

	return;
%page;

list_volume_registration:
list_vol_registration:	/* operator command name - pre MR11 */
lvr:	entry;

/******************************************************************************

This is an administrative command which lists the attributes of the specified
logical or physical volume.  Its syntax is:

     lvr [-pv | -lv] NAME {-brief}

When listing a logical volume, all physical volumes in that logical volume
will be listed unless "-brief" is given.

The code is written like:

	entry
	setup
	if first arg is "pv" then
	     call inner ring for PV registration structure
	     format report of PV and print
	else if first arg is "lv" then
	     call inner ring for LV registration structure
		(including all PVs in that LV)
	     if brief arg not given then
		format report of LV and print
	     if brief arg given then
		print only the PV names
	     else format report of each PV and print
	else first arg is invalid
	cleanup
	exit

******************************************************************************/

	call set_up("list_volume_registration");
	on cleanup call clean_up;

	call getarg (tcs);

	if tcs = "pv"  /* retained for compatability */
	     |  tcs = "-physical_volume"  |  tcs = "-pv"  then do;
	     call getarg (pvname);
	     if verify(rtrim(pvname), PVNAME_LEGAL) ^= 0 then call FAIL("Illegal characters in PV name.");

	     call mdc_priv_$read_pvr (pvname, vrp, ec);
	     if ec ^= 0 then call FAIL ("PV not found: " || pvname);

	     call mdc_$find_volname ((pv_registration.pvid), pvname, lvname, ec);
	     if ec ^= 0 then call FAIL ("Unable to get LV name.");

	     call ioa_ ("^/pvname:^-^a", pv_registration.pvname);
	     call ioa_ ("pvid:^-^-^w  (^a)", pv_registration.pvid, unique_chars_((pv_registration.pvid)));
	     call ioa_ ("serial:^-^-^a", pv_registration.mfg_serial);
	     call ioa_ ("model:^-^-^d", MODELN (pv_registration.model));
	     call ioa_ ("location:^-^-^a", pv_registration.location);
	     dt_str = date_time_$format ("date_time", pv_registration.date_registered, "", "");
	     call ioa_ ("date registered:^-^a", dt_str);
	     /* password field not printed */
	     call ioa_ ("lvname:^-^-^a", lvname);
	end;
	else if tcs = "lv"  /* retained for compatability */
	     |  tcs = "-logical_volume"  |  tcs = "-lv"  then do;
	     call getarg (lvname);
	     if verify(rtrim(lvname), LVNAME_LEGAL) ^= 0 then call FAIL("Illegal characters in LV name.");

	     call mdc_priv_$read_lvr (lvname, vrp, ec);
	     if ec ^= 0 then call FAIL ("LV not registered: " || lvname);
	     call getarg (tcs);
	     if tcs ^= "-bf" & tcs ^= "-brief" then do;
		call ioa_ ("^/lvname:^-^a", lvname);
		call ioa_ ("lvid:^-^-^w  (^a)", volume_registration.lvid, unique_chars_((volume_registration.lvid)));
		call ioa_ ("public:^-^-^a", YESNO (fixed (volume_registration.public, 1)));
		call ioa_ ("owner:^-^-^a", volume_registration.volume_owner);
		aa_string = convert_aim_attributes_ (volume_registration.access_class_range(1));
		call convert_access_class_$to_string_short (volume_registration.access_class_range(1), auth_mnemonics, ec);
		if ec ^= 0 then do;
		     call com_err_ (ec, comname, "Unable to convert min auth to name string.");
		     auth_mnemonics = "system_low?";
		end;
		call ioa_ ("min_access_class:^-^a (^a)", aa_string, auth_mnemonics);
		aa_string = convert_aim_attributes_ (volume_registration.access_class_range(2));
		call convert_access_class_$to_string_short (volume_registration.access_class_range(2), auth_mnemonics, ec);
		if ec ^= 0 then do;
		     call com_err_ (ec, comname, "Unable to convert max auth to name string.");
		     auth_mnemonics = "system_high?";
		end;
		call ioa_ ("max_access_class:^-^a (^a)", aa_string, auth_mnemonics);
		call ioa_ ("acs_path:^-^-^a", volume_registration.acs_path);
		call ioa_ ("^/npv:^-^-^d", volume_registration.npv);
	     end;
	     do i = 1 to volume_registration.npv;
		pvrp = addr(volume_registration.pv(i));

		if tcs = "-bf" | tcs = "-brief"
		then call ioa_ ("^a", pv_registration.pvname);
		else do;
		     call ioa_ ("^/ pvname:^-^a", pv_registration.pvname);
		     call ioa_ (" pvid:^-^-^w  (^a)", pv_registration.pvid, unique_chars_((pv_registration.pvid)));
		     call ioa_ (" serial:^-^-^a", pv_registration.mfg_serial);
		     call ioa_ (" model:^-^-^d", MODELN (pv_registration.model));
		     call ioa_ (" location:^-^a", pv_registration.location);
		     dt_str = date_time_$format ("date_time", pv_registration.date_registered, "", "");
		     call ioa_ (" date registered:^-^a", dt_str);
		     /* password field not printed */
		end;
	     end;
	end;
	else do;
	     ec = error_table_$badopt;
	     call FAIL ("First arg must be ""-pv"" or ""-lv"".");
	end;

	call ioa_ ("");

	call clean_up;

	return;
%page;

/* -------------- UTILITY ROUTINES ---------------------- */
/* ------------------------------------------------------ */

set_up:   proc (name);	/* initializations for all entrypoints */

dcl  name		char (*);

	comname = name;
	ec = 0;
	temp_ptr, vrp, pvrp = null();
	call get_temp_segment_ (comname, temp_ptr, ec);
	if ec ^= 0 then call FAIL ("Trouble getting temporary segment.");
	vrp, pvrp = temp_ptr;  /* we'll use temp for either structure */

	return;

end set_up;

/* ------------------------------------------------------ */

clean_up:	proc ();		/* clean up our external mess... */

dcl  tptr     ptr;

	if temp_ptr ^= null ()
	then do;
	     tptr = temp_ptr;
	     temp_ptr = null ();   /* so we don't try this again */
	     call release_temp_segment_ (comname, temp_ptr, ec);
	end;

	return;

end clean_up;

/* ------------------------------------------------------ */

getarg:	proc (x);		/* get next argument on command line */

dcl  x char (*);
dcl  errc fixed bin (35);

	call cu_$arg_ptr (argno, ap, al, errc);
	if errc = 0 then do;
	     if al > length(x) then call FAIL ("Argument too long");
	     x = bchr;
	end;
	else x = "";
	argno = argno + 1;
	call cu_$arg_ptr (argno, ap, al, errc);
	if errc ^= 0 | bchr = "" then more_args = "0"b;

	return;

end getarg;

/* ------------------------------------------------------ */

FAIL:     proc (x);		/* come here when something bad happens */

dcl  x char (*);

	call com_err_ (ec, comname, "^a", x);
	call clean_up;
	go to BUST;

end FAIL;

BUST:	return;		/* return from this module */

/* ------------------------------------------------------ */

check_owner: proc;		/* validates Person_ID.Project_ID */

	owneri = index (tcs1, ".");
	if owneri = 0 then return;
	if index (substr (tcs1, owneri+1), ".") ^= 0 then owneri = 0;
	else owner = tcs1;

	return;

end check_owner;
%page;
%include volume_registration;
%page;
%include fs_dev_types;


/* ------------------------------------------------------ */
/* ------------------------------------------------------ */
end volume_registration_cmds_;
