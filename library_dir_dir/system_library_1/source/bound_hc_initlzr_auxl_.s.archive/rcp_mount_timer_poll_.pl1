/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


rcp_mount_timer_poll_$init_rcp_mount_timers: init: procedure;

/* rcp_mount_timer_poll_  Bernard Greenberg 10/28/76
   Designed by Greenberg and Silver */

/*  A brother of lv_request_, a friend of rcp_ */

/* Critical internal static variables */

dcl  RCP_RING fixed bin static init (1);		/* changes for test entry */
dcl  DELTA fixed bin (71) static init (240000000);	/* 4 minutes */
dcl  SL0 fixed bin static init (0);			/* similarly */
dcl  channel fixed bin (71) static init (0);		/* event channel for all doings */
dcl  my_processid bit (36) aligned static init ("0"b);
dcl  hx fixed bin static init (1);			/* first available table index */

dcl 1 tbl (100) static internal,			/* the actual polling table */
    2 time fixed bin (71) aligned,			/* maturation time */
    2 off bit (18) aligned;				/* rcp identifying offset */

/* DIVERS CONSTANTS */

dcl  ABS_MICROSECONDS bit (2) static init ("00"b) options (constant); /* for timer_manager_ */
dcl  ALARM___ char (8) static init ("alarm___") options (constant);
dcl  KEY char (4) static init ("rcmt") options (constant);	/* RCP messages */
dcl  myname char (32) init ("rcp_mount_timer_poll_") static options (constant);


/* AUTOMATIC STORAGE */

dcl  i fixed bin;
dcl  now fixed bin (71);
dcl  recheck_flag bit (1) aligned;
dcl  sender bit (36) aligned;
dcl  code fixed bin (35);

/* Format of transmissions from RCP */

dcl 1 mess,
    2 key char (4),					/* "rcmt" */
    2 off bit (18) unaligned,				/* rcp_data_ offset */
    2 mbz bit (18) unaligned;				/* like it says */

/* BASED */

dcl  mptr ptr parameter;				/* sorta like based */

/* IPC message format */

dcl 1 evmsg based (mptr) aligned,
    2 channel fixed bin (71),
    2 data bit (72),				/* transmission */
    2 pid bit (36),					/* sender */
    2 devsignal fixed bin (17) unaligned,
    2 ring fixed bin (17) unaligned;

/* ENTRIES */

dcl (sys_log_, sys_log_$error_log) entry options (variable);
dcl  ipc_$create_ev_chn entry (fixed bin (71), fixed bin (35));
dcl  ipc_$decl_ev_call_chn entry (fixed bin (71), entry, ptr, fixed bin, fixed bin (35));
dcl  timer_manager_$alarm_wakeup entry (fixed bin (71), bit (2), fixed bin (71));
dcl  rcp_sys_$init_mount_timer entry (fixed bin (71), fixed bin (35));
dcl  rcp_sys_$check_mount_timer entry (bit (18) aligned, bit (1) aligned, fixed bin (35));
dcl  clock_ entry returns (fixed bin (52));
dcl  get_process_id_ entry returns (bit (36) aligned);
dcl  get_ring_ entry returns (fixed bin);


/* ------------------------------------------------------- */

/* Init entry point */


	unspec (tbl) = "0"b;			/* for test re-inits */

	my_processid = "0"b;			/* ditto */
	hx = 1;


	call ipc_$create_ev_chn (channel, code);
	if code ^= 0 then do;
	     call sys_log_$error_log (2, code, myname, "Cannot create event channel");
	     return;
	end;

	call ipc_$decl_ev_call_chn (channel, interrupt, null (), 10, code);
	if code ^= 0 then do;
	     call sys_log_$error_log (2, code, myname, "Cannot declare event call channel");
	     return;
	end;

	call rcp_sys_$init_mount_timer (channel, code);

	if code ^= 0 then do;
	     call sys_log_$error_log (2, code, myname, "Error from rcp_sys_$init_mount_timer");
	     return;
	end;

	my_processid = get_process_id_ ();
	return;




/* -------------------------------------------------------- */
interrupt: entry (mptr);

	if my_processid = "0"b then return;		/* ignore if not init */

/* Entry for timer interrupts and RCP wakeups */

	now = clock_ ();

	if ^legal_message ()
	then return;

	if ^good_message ()
	then do;
	     call sys_log_ (SL0, "^a: Bad message from pid ^w: ^w ^w", myname, sender, evmsg.data);
	     return;
	end;

	if mess.key = KEY then do;			/* Slot wanted */

	     do i = 1 by 1 while (i < hx);
		if tbl (i).off = mess.off then do;
		     call set_timer (i);		/* Simply reorganize slot. */
		     return;
		end;
	     end;

	     if hx > hbound (tbl, 1) then do;
		call sys_log_ (SL0, "^a: No slot available for pid ^w, ^o", myname, sender, fixed (mess.off, 18));
		return;
	     end;


	     hx = hx + 1;
	     tbl (i).off = mess.off;
	     call set_timer (i);
	     return;
	end;
	else if unspec (evmsg.data) = unspec (ALARM___) then do; /* a timer */
	     do i = 1 by 1 while (i < hx);
		call check_time (i);
	     end;
	     return;
	end;

/* --------------------------------------------------------- */

check_time: proc (j);

dcl  j fixed bin;

	     do while (tbl (j).time < now);
		if tbl (j).time = 0 then return;
		call rcp_sys_$check_mount_timer ((tbl (j).off), recheck_flag, code);
		if code ^= 0 then do;
		     call sys_log_$error_log (SL0, code, myname, "From pid ^w on ^o",
			sender, fixed (tbl (j).off, 18));
		     call new_tenant;
		end;
		else if recheck_flag then call set_timer (j);
		else call new_tenant;
	     end;
	     return;

new_tenant:    procedure;				/* move up tbl (hx) into tbl (j) */

		hx = hx -1;			/* Can't possibly be 1 if new_tenant called */
		if hx ^= j then tbl (j) = tbl (hx);
		unspec (tbl (hx)) = "0"b;

	     end new_tenant;

	end check_time;

/* ---------------------------------------------------------- */

set_timer: procedure (k);				/*  Put time in slot, set off bomb */

dcl  k fixed bin;

	     tbl (k).time = now + DELTA;
	     call timer_manager_$alarm_wakeup (tbl (k).time, ABS_MICROSECONDS, channel);
	end set_timer;

/* --------------------------------------------------------- */

legal_message: procedure returns (bit (1));

	     sender = evmsg.pid;			/* copy out */

	     if evmsg.ring = RCP_RING then return ("1"b);
	     if sender = my_processid then return ("1"b);
	     return ("0"b);

	end legal_message;

/* --------------------------------------------------------- */

good_message: procedure returns (bit (1));

	     unspec (mess) = evmsg.data;		/* copy good stuff */

	     if evmsg.data = unspec (ALARM___) then return ("1"b);
	     if mess.key = KEY then return ("1"b);
	     return ("0"b);

	end good_message;

/* ----------------------------------------------------------- */

test:	entry;
	SL0 = 1;					/* all messages come out */
	RCP_RING = get_ring_ ();
	DELTA = 120000000;				/* don't have all nite */
	return;


     end;
