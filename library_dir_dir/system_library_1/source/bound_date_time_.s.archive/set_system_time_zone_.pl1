/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1987 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(87-03-26,Lippard), approve(87-04-27,MCR7673),
     audit(87-05-15,Fawcett), install(87-05-26,MR12.1-1036):
     Written by Jim Lippard.
                                                   END HISTORY COMMENTS */

/* This program sets the system time zone. */
set_system_time_zone_: proc (P_time_zone, P_code);

	dcl     P_time_zone		 char (4) aligned parm;
	dcl     P_code		 fixed bin (35) parm;

	dcl     code		 fixed bin (35);

	dcl     (lang_index, zone_index) fixed bin;

	dcl     found_zone		 bit (1) aligned;

	dcl     1 local_clok_card	 aligned like clok_card;

	dcl     time_correction	 fixed bin (71);
	dcl     time_zone		 char (4) aligned;

	dcl     user_ring		 fixed bin;

	dcl     zone_delta		 fixed bin;

	dcl     config_$find	 entry (char (4) aligned, ptr);
	dcl     config_$replace	 entry (ptr, ptr);

	dcl     error_table_$unknown_zone fixed bin (35) ext static;

	dcl     level$get		 entry (fixed bin);
	dcl     level$set		 entry (fixed bin);

	dcl     sys_info$time_correction_constant fixed bin (71) aligned ext static;
	dcl     sys_info$time_zone	 char (4) aligned ext static;

	dcl     (addr, divide, null) builtin;

	dcl     cleanup		 condition;

          dcl     MILSEC_IN_HR           fixed bin (71)  int static options (constant) init (3600000000);

	dcl     RING_ZERO		 fixed bin int static options (constant) init (0);

	dcl     TRUE		 bit (1) aligned int static options (constant) init ("1"b);
	dcl     FALSE		 bit (1) aligned int static options (constant) init ("0"b);
%page;
/* Copy input arguments. */
	time_zone = P_time_zone;
	code = 0;

/* Initialize clok config pointer. */
	clok_cardp = null ();

/* Validate input zone, get delta. */
	found_zone = FALSE;
	do lang_index = 1 to ti_zone.number_lang while (^found_zone);
	     do zone_index = 1 to ti_zone.number_zone while (^found_zone);
		if ti_zone.short (lang_index, zone_index) = time_zone then do;
			found_zone = TRUE;
			time_correction = ti_zone.delta (lang_index, zone_index);
		     end;
	     end;					/* zones */
	end;					/* languages */

	if ^found_zone then do;
		code = error_table_$unknown_zone;
		go to MAIN_RETURN;
	     end;

/* Calculate zone delta for CLOK card. */
	zone_delta = divide (time_correction, MILSEC_IN_HR, 17, 0);

/* Find the CLOK card in the config deck. */
	call config_$find (CLOK_CARD_WORD, clok_cardp);

/* Make a copy. */
	local_clok_card = clok_card;

/* Make changes. */
	local_clok_card.delta = zone_delta;
	local_clok_card.zone = time_zone;

/* Set validation level. */
	user_ring = -1;
	on cleanup begin;
	     if user_ring ^= -1 then call level$set (user_ring);
	end;
	call level$get (user_ring);
	call level$set (RING_ZERO);

/* Replace the CLOK card in the config deck. */
	call config_$replace (clok_cardp, addr (local_clok_card));

/* Change the system time zone in sys_info. */
	sys_info$time_zone = time_zone;
	sys_info$time_correction_constant = time_correction;

/* Reset validation level. */
	call level$set (user_ring);

MAIN_RETURN:
	P_code = code;
	return;

%include config_clok_card;
%page;
%include sys_log_constants;
%page;
%include time_names;
     end set_system_time_zone_;
