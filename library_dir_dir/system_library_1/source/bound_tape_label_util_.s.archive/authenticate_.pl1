/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


authenticate_: proc (resource_name) returns (char (3) aligned);

/* AUTHENTICATE_ - Generates a three-letter code which is a function of a tape
   number.  This code is placed on a sticker on each tape reel and disk pack.
   When the operator is requested to mount a tape or pack, he is told the reel
   number, and is required to type in the code from the sticker.  Use of
   authentication codes permits us to check up on the operator to make sure
   that the correct tape or pack is mounted, and that a typing error or
   one-character garble in a printed message does not lead to incorrect
   mounting of a volume.  The requirement for this feature is less severe if
   automatic volume recognition and access checking are performed by the
   operating system.

   The original program for generation authentication codes was written on
   CTSS.  A later version was written in BAL for the 360/67, by Dave Anderson.
   This PL/I version by THVV, 5/72.
   Modified 03/79 by C. D. Tavares for new RCP Resource Management to work
   with volume names > 6 characters and to differentiate lower-case.
   */

dcl  resource_name char (*) parameter;			/* name of resource for which authentication required. */

dcl  name_temp char (32) varying,
    (i, j) fixed bin,
     letter_val fixed bin,
     name_len fixed bin,
    (factor_up, factor_down) fixed bin (34),
    (hash_up, hash_down) fixed bin (71) init (0);		/* Temporary hash sums */

dcl  auth_code char (3) aligned init ("???");		/* Returned value */

dcl  magic_constant fixed bin init (89);		/* hashing divisor */

dcl  label_alphabet char (68) aligned int static init
    ("0123456789 ABCDEFGHIJKLMNOPQRSTUVWXYZ-----abcdefghijklmnopqrstuvwxyz");
						/* the extra dashes hold slots for other
						   punctuation we may later consider important */

dcl  NUMERICS char (10) aligned int static options (constant) initial
    ("0123456789");

dcl  auth_code_alphabet char (20) aligned int static options (constant) initial
    ("BCDFGHJKLMNPQRSTVWXY");


dcl (divide, mod, substr, index, length, verify) builtin;

/* -------------------------------------- */
	
	name_temp = rtrim (resource_name);

/* for compatibility with old authentications, pad to six chars with spaces
   if it is at all alphabetic */

	if length (name_temp) < 6 then
	     if verify (name_temp, NUMERICS) > 0 then
		name_temp = name_temp || copy (" ", 6 - length (name_temp));

	factor_up = 1;
	factor_down = 2 ** (length (name_temp) - 1);

	do i = 1 to length (name_temp);		/* Loop on chars in input. */
	     letter_val = index (label_alphabet, substr (name_temp, i, 1));
						/* Translate letter to number. */
	     if letter_val = 0 then letter_val = length (label_alphabet)+1;
						/* Treat all unknown punctuation alike. */
	     letter_val = letter_val - 1;		/* normalize to zero origin for hash */

/* Perform hashing function. */

	     hash_up = hash_up + letter_val * factor_up;	/* Shift each value left. */
	     hash_down = hash_down + letter_val * factor_down; /* ... another hash sum, shifting opposite. */
	     factor_up = factor_up + factor_up;		/* Double factor_up, to shift another position. */
	     factor_down = divide (factor_down, 2, 34, 0);
						/* Halve factor_down to shift one less. */
	end;

	hash_up = mod (hash_up, magic_constant) * magic_constant; /* Generate partial hash value. */
	hash_up = hash_up + mod (hash_down, magic_constant); /* Generate rest of hash value. */

	substr (auth_code, 3, 1) = substr (auth_code_alphabet, 1 + mod (hash_up, length (auth_code_alphabet)), 1);
	hash_up = divide (hash_up, length (auth_code_alphabet), 70, 0); /* Take it base 20. */
	substr (auth_code, 2, 1) = substr (auth_code_alphabet, 1 + mod (hash_up, length (auth_code_alphabet)), 1);
	hash_up = divide (hash_up, length (auth_code_alphabet), 70, 0); /* .. and turn it into letters. */
	substr (auth_code, 1, 1) = substr (auth_code_alphabet, 1 + mod (hash_up, length (auth_code_alphabet)), 1);

	return (auth_code);				/* All through. */

     end;
