/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-05-13,GJohnson), approve(86-05-13,MCR7387),
     audit(86-05-13,Martinson), install(86-05-14,MR12.0-1056):
     Correct error message documentation.
  2) change(87-03-31,Fawcett), approve(87-04-23,MCR7672),
     audit(87-04-23,Farley), install(87-04-28,MR12.1-1028):
     Corrected dir_unlock_given_uid to use "ind".  Put the mylock check in
     LOCK_FAST into the stac do loop to possibly avoid a missed cache write
     notify on lock.pid.  Added VALIDATE_CACHE  internal proc to insure that
     the  cache and memory contents of lock_count and highset_in_use are the
     same and detect any differences.
                                                   END HISTORY COMMENTS */


/* format: style3 */

lock:
     procedure;

/* format: off */

/* *	LOCK - ring zero primitive for shared data base locking.
   *
   *	This procedure supplies a number of entry points for manipulating
   *	locks.  Its coding is dependent on the read-alter-rewrite ability
   *	provided by the STAC and STACQ instructions.
   *
   *	The following entry points are available for setting a lock:
   *
   *	  lock$try -
   *
   *	    declare lock$try external entry (ptr, fixed bin(35), fixed bin(35), fixed bin(1));
   *	    call lock$try (lock_ptr, event, code, failsw);
   *
   *	  lock$wait -
   *
   *	    declare lock$wait external entry (ptr, fixed bin(35), fixed bin(35));
   *	    call lock$wait (lock_ptr, event, code);
   *
   *	  lock$dir_wait -
   *
   *	    declare lock$dir_wait external entry (ptr, bit(36) aligned, fixed bin(35));
   *	    call lock$dir_wait (dp, typelock,  code);
   *
   *	  lock$dir_try -
   *
   *	    declare lock$dir_try external entry (ptr, bit(36) aligned, fixed bin(35), fixed bin(1));
   *	    call lock$dir_try (dp, typelock, code, failsw);
   *
   *	Where -
   *	  lock_ptr	     is a pointer to the lock to be set. (Input)
   *	  dp	     is a pointer to the directory whose lock is to be set. (Input)
   *	  typelock     = "0"b if locked for read, = "1"b if locked for write. (Input)
   *	  code	     is a standard error code. (Output)
   *	  event	     is the event to be waited for if the lock cannot be set. (Input)
   *	  failsw	     = 0 if lock was set, = 1 if unable to set lock. (Output)
   *
   *        lock$dir_lock_(read write) -
   *           declare lock$dir_lock_(write read) entry (ptr, fixed bin (35));
   *           call lock$dir_lock_(write read) (dp, code);
   *
   *          These entries crash on mylock, and trust dir.uid, and salvage
   *          the directory under certain circumstances. They do wait for the lock.
   *
   *           lock$dir_lock_salvage -
   *
   *             declare lock$dir_lock_salvage entry (ptr, bit (36) aligned,
   *                 fixed bin (35));
   *             call lock$dir_lock_salvage (dp, uid, code);
   *
   *           This SIDE-DOOR for the salvager :
   *	     1) derives the UID for locking from the kst, not dir.uid.
   *           2) returns mylock rather than crashing
   *           3) takes a write lock.
   *           4) returns the UID used for locking
   *
   *
   *	The following entry points are available for unlocking a lock:
   *
   *        lock$dir_unlock_given_uid -
   *
   *	    declare lock$dir_unlock_given_uid
   *                external entry (bit (36) aligned);
   *	    call lock$dir_unlock_given_uid (dir_uid);
   *
   *        This entrypoint is for use when the contents of the directory
   *         are untrustworthy.  Primarily for the salvager.
   *
   *        lock$dir_unlock -
   *
   *        declare lock$dir_unlock entry (pointer);
   *         call lock$dir_unlock (dp);
   *
   *        This is the ordinary dir-unlocker.

   *
   *	  lock$unlock -
   *
   *	    declare lock$unlock external entry (ptr, fixed bin(35));
   *	    call lock$unlock (lock_ptr, event);
   *
   *	Where -
   *	  lock_ptr	     is a pointer to the lock to be unlocked. (Input)
   *	  dp	     is a pointer to the directory to be unlocked. (Input)
   *	  event	     is the event to be signalled after resetting the lock. (Input)
   *
   *
   *	Modifications:
   *	20 Apr 1975, Andre Bensoussan: Rewritten for the new storage system.
   *	23 Sep 1975, Andre Bensoussan: Move call to caller() from internal proc to beginning of each entry point.
   *	24 Sep 1975, Andre Bensoussan: dir.modify is no longer reset to 0 by unlock_dir.
   *	   Also the entry lock$modify_dir has been eliminated.
   *	   Added new entries for lock_ast and unlock_ast.
   *	25 Feb 1976, RE Mullen: Added ast lock metering code.
   *	13 Jul 1978, B. Greenberg: Changed not to DIRW per-process dirs, and clock and stacq bifs.
   *	13 Feb 1980, M. Grady: fixed race condition with lock_dir and on_line_salvager.
   *	10 Aug 1981, W. Olin Sibert: changed lock_dir to validate UID in dir header vs. UID in KSTE,
   *	   changes for external static SST, and, *sigh*, format_pl1'd it.
   *      21 Nov 1981, J. Bongiovanni for ast lock metering
          Dec 81/Jan 82, Benson I. Margulies, multiple reader dir locks.
   *      2/82 BIM for salvager dir sidedoors.
   *	7 August 1982, J. Bongiovanni, don't stash AST locks in pds$lock_array,
   *	         meter AST locking conditionally
   *	Modified 830111 BIM to improve interactions of locking and salvaging.
   *	13 January 1983, J. Bongiovanni, to fix some races and add a trap
   *      Modified 830118 BIM to try again to find the race.
   *      Modified 830817 BIM to use salvage_entry not salvage_sw.
   *      Modified 831107 BIM to make array of dir locks quick to reference.
   *      Modified 831110 BIM to revert to heap strategy for dir locks.
   *	Modified 841102 KPL to fix dirw and to improve its efficiency.
   */


/* format: on */

dcl	prds$processor_tag	ext fixed bin (3);
dcl	absadr		entry (ptr, fixed bin (35)) returns (fixed bin (26));
dcl	CPU_NAMES		char (8) aligned internal static options (constant) init ("abcdefgh");
dcl	a_lock_ptr	pointer parameter;		/* Arguments - pointer to lock */
dcl	a_dp		pointer parameter;		/* pointer to directory */
dcl	a_ind		bit (36) aligned parameter;	/* wait event for lock */
dcl	a_typelock	bit (36) aligned parameter;	/* = "0"b if read lock, = "1"b if write lock */
dcl	a_code		fixed bin (35) parameter;	/* standard error code */
dcl	a_failsw		fixed bin (1) parameter;	/* = 1 if try lock failed */
dcl	a_dir_uid		bit (36) aligned;		/* returned to salvager */

dcl	per_process_flag	bit (1);
dcl	must_salvage	bit (1) aligned;
dcl	ind		bit (36) aligned;		/* wait event for lock */
dcl	caller_ptr	pointer;			/* pointer to where we were called from (+1) */
dcl	dir_uid		bit (36) aligned;		/* global var set by LOCK_DIR_SALVAGE */
dcl	code		fixed bin (35);		/* code set by internal procedure LOCK */
dcl	failsw		fixed bin (1);
dcl	(time_in, time_out) fixed bin (52);		/* temporaries for ast lock metering */

dcl	seg_fault_error	condition;

dcl	error_table_$mylock fixed bin (35) external static;
dcl	error_table_$dir_damage
			fixed bin (35) external static;
dcl	error_table_$notadir
			fixed bin (35) ext static;

dcl	sst$ast_locked_at_time
			fixed bin (71) external static;
dcl	sst$ast_locked_total_time
			fixed bin (71) external static;
dcl	sst$ast_locking_count
			fixed bin (35) external static;
dcl	sst$ast_lock_wait_time
			fixed bin (71) external static;
dcl	sst$astl		bit (36) aligned external static;
dcl	sst$dirlock_writebehind
			fixed bin external static;
dcl	sst$lock_waits	fixed bin (35) external static;
dcl	sst$meter_ast_locking
			fixed bin external static;
dcl	tc_data$lock_error_severity
			fixed bin external static;

dcl	pds$block_lock_count
			fixed bin external static;	/* count of locks set to this process */
dcl	pds$processid	bit (36) aligned external static;
dcl	tc_data$system_shutdown
			fixed bin external static;	/* for determining whether to force the lock */

dcl	caller		entry returns (pointer);	/* returns a pointer to our caller */
dcl	get_kstep		entry (fixed bin, pointer, fixed bin (35));
dcl	meter_ast_lock$lock entry;
dcl	meter_ast_lock$unlock
			entry;
dcl	on_line_salvager	entry (pointer, fixed bin (35));
dcl	pxss$addevent	entry (bit (36) aligned);
dcl	pxss$delevent	entry (bit (36) aligned);
dcl	pxss$notify	entry (bit (36) aligned);
dcl	pxss$wait		entry;
dcl	syserr		entry options (variable);
dcl	update_vtoce	entry (pointer);

dcl	(addr, baseno, binary, clock, hbound, max, null, segno, stac, stacq, substr, unspec)
			builtin;


try:
     entry (a_lock_ptr, a_ind, a_code, a_failsw);

	caller_ptr = caller ();
	call LOCK (a_lock_ptr, a_ind, a_code, a_failsw, 0 /* waitsw */);
	return;

wait:
     entry (a_lock_ptr, a_ind, a_code);

	caller_ptr = caller ();
	call LOCK (a_lock_ptr, a_ind, a_code, failsw, 1 /* waitsw */);
	return;

unlock:
     entry (a_lock_ptr, a_ind);

	caller_ptr = caller ();
	call UNLOCK (a_lock_ptr, a_ind);
	return;




lock_fast:
     entry (a_lock_ptr);
	caller_ptr = caller ();
	call LOCK_FAST (a_lock_ptr);
	return;

unlock_fast:
     entry (a_lock_ptr);
	caller_ptr = caller ();
	call UNLOCK_FAST (a_lock_ptr);
	return;


lock_ast:
     entry;
	caller_ptr = caller ();
	time_in = clock ();
	call LOCK_FAST (addr (sst$astl));
	if sst$meter_ast_locking ^= 0
	then call meter_ast_lock$lock;
	time_out = clock ();
	sst$ast_lock_wait_time = sst$ast_lock_wait_time + time_out - time_in;
	sst$ast_locked_at_time = time_out;
	sst$ast_locking_count = sst$ast_locking_count + 1;
	return;


unlock_ast:
     entry;
	caller_ptr = caller ();
	sst$ast_locked_total_time = sst$ast_locked_total_time - sst$ast_locked_at_time + clock ();
	if sst$meter_ast_locking ^= 0
	then call meter_ast_lock$unlock;
	call UNLOCK_FAST (addr (sst$astl));
	return;

%page;

dir_wait:
     entry (a_dp, a_typelock, a_code);

	caller_ptr = caller ();
	call LOCK_DIR (a_dp, a_typelock, a_code, failsw, 1 /* waitsw */);

	return;

dir_try:
     entry (a_dp, a_typelock, a_code, a_failsw);

	caller_ptr = caller ();
	call LOCK_DIR (a_dp, a_typelock, a_code, a_failsw, 0 /* waitsw */);
	return;

dir_unlock:
     entry (a_dp);

	caller_ptr = caller ();
	ind = a_dp -> dir.uid;
	call UNLOCK_DIR (a_dp, ind);
	return;

dir_unlock_given_uid:
     entry (a_dir_uid);

	caller_ptr = caller ();
	ind = a_dir_uid;
	call UNLOCK_DIR_NOCHECK (null, ind);
	return;


dir_lock_read:
     entry (a_dp, a_code);

	caller_ptr = caller ();
	call LOCK_DIR (a_dp, (36)"0"b, a_code, failsw, 1 /* waitsw */);
	if a_code = error_table_$mylock
	then call syserr (CRASH, "lock: dir_lock_read mylock err. dp =^p", a_dp);
	return;

dir_lock_write:
     entry (a_dp, a_code);

	caller_ptr = caller ();
	call LOCK_DIR (a_dp, (36)"1"b, a_code, failsw, 1 /* waitsw */);
	if a_code = error_table_$mylock
	then call syserr (CRASH, "lock: dir_lock_write mylock err. dp =^p", a_dp);
	return;

dir_lock_salvage:
     entry (a_dp, a_dir_uid, a_code);

	caller_ptr = caller ();
	dir_uid = ""b;
	call LOCK_DIR_SALVAGE (a_dp, (36)"1"b, a_code, failsw, 1 /* waitsw */);
						/* Always locks for write */
	a_dir_uid = dir_uid;
	return;

%page;

LOCK:
     procedure (lock_ptr, ind, code, failsw, waitsw);

dcl	lock_ptr		ptr,
	ind		bit (36) aligned,
	code		fixed bin (35),
	failsw		fixed bin (1),
	waitsw		fixed bin (1);

dcl	lwd		bit (36) aligned based (lock_ptr);

	code = 0;
	failsw = 0;

	if tc_data$system_shutdown ^= 0
	then return;

	if lwd = pds$processid
	then do;
		code = error_table_$mylock;
		goto POST;
	     end;

	pds$block_lock_count = pds$block_lock_count + 1;

	do while (^stac (lock_ptr, pds$processid));
	     if waitsw = 0
	     then do;
		     failsw = 1;
		     pds$block_lock_count = pds$block_lock_count - 1;
		     goto POST;
		end;

	     call pxss$addevent (ind);

	     if lwd = "0"b
	     then call pxss$delevent (ind);
	     else do;
		     call pxss$wait;
		     sst$lock_waits = sst$lock_waits + 1;
		end;
	end;

POST:
	return;

     end LOCK;

%page;

UNLOCK:
     procedure (lock_ptr, ind);

dcl	lock_ptr		ptr,
	lwd		bit (36) aligned based (lock_ptr),
	ind		bit (36) aligned;



	code = 0;
	failsw = 0;

	if tc_data$system_shutdown ^= 0
	then return;				/* system shutdown ? */


	if pds$block_lock_count <= 0
	then do;
		call syserr (tc_data$lock_error_severity, "lock: pds$block_lock_count <= 0. caller = ^p.", caller ());
		pds$block_lock_count = 0;
	     end;

	if ^stacq (lwd, "000000000000"b3, pds$processid)
	then do;
		call syserr (tc_data$lock_error_severity, "lock: lock ^p not equal to processid. caller = ^p",
		     addr (lwd), caller ());
		goto FORGET_RETURN;
	     end;

	if lwd = pds$processid			/* Always crash if the hardware craps */
	then call syserr (CRASH, "lock: stacq hardware failure on ^p", lock_ptr);
	call pxss$notify (ind);			/* tell the world */

FORGET_RETURN:
	pds$block_lock_count = pds$block_lock_count - 1;

	return;

     end UNLOCK;

%page;

LOCK_FAST:
     proc (lock_ptr);


%include hc_lock;
/* the ptr in here becomes a parameter */

	if tc_data$system_shutdown ^= 0
	then return;

	do while (^stac (addr (lock.pid), pds$processid));
	     if lock.pid = pds$processid
	     then call syserr (CRASH, "lock: lock_fast mylock err ^p", lock_ptr);
	     lock.notify_sw = "1"b;
	     call pxss$addevent (lock.event);
	     if (lock.pid ^= "0"b & lock.notify_sw = "1"b)
	     then call pxss$wait;
	     else call pxss$delevent (lock.event);
	end;

	pds$block_lock_count = pds$block_lock_count + 1;
	return;

     end LOCK_FAST;

%page;

UNLOCK_FAST:
     proc (lock_ptr);

%include hc_lock;
/* the ptr in here becomes the parameter */


	if tc_data$system_shutdown ^= 0
	then return;

	if ^stacq (lock.pid, "000000000000"b3, pds$processid)
	then do;
		call syserr (tc_data$lock_error_severity,
		     "lock: unlock_fast lock ^p not locked to process. caller = ^p.", lock_ptr, caller ());
		return;
	     end;
	if lock.pid = pds$processid
	then call syserr (CRASH, "lock: stacq hardware failure on ^p", lock_ptr);

	if lock.notify_sw
	then do;
		lock.notify_sw = "0"b;
		call pxss$notify (lock.event);
	     end;
	pds$block_lock_count = pds$block_lock_count - 1;
	return;

     end UNLOCK_FAST;

%page;

LOCK_DIR:
     procedure (dirp, typelock, code, failsw, waitsw);

dcl	dirp		ptr;
dcl	typelock		bit (36) aligned;
dcl	code		fixed bin (35);
dcl	failsw		fixed bin (1);
dcl	waitsw		fixed bin (1);

dcl	get_kstep_code	fixed bin (35);
dcl	salvage_entry	bit (1) aligned;
dcl	severity		fixed bin;
dcl	uid_to_lock	bit (36) aligned;
dcl	dir_lockx		fixed bin;

	salvage_entry = "0"b;
	go to LOCK_START;

LOCK_DIR_SALVAGE:
     entry (dirp, typelock, code, failsw, waitsw);

	salvage_entry = "1"b;

LOCK_START:
	code = 0;
	failsw = 0;

	if tc_data$system_shutdown ^= 0
	then return;

	dir_lock_segp = addr (dir_lock_seg$);
	dir_lock_all_locksp = dir_lock_seg.header.locks_ptr;
	dir_lock_all_readersp = dir_lock_seg.header.readers_ptr;

	call get_kstep (segno (dirp), kstep, get_kstep_code);
						/* The code is nonzero for fake dirs -- */
						/* happens if dirp is a hardcore segment (stack_0) */
	if salvage_entry
	then do;
		if get_kstep_code ^= 0		/* needed for salvaging */
		then do;
			code = get_kstep_code;
			return;
		     end;
		if ^kste.dirsw
		then do;				/* Not a dir? */
			code = error_table_$notadir;
			return;
		     end;
		dir_uid = kste.uid;
	     end;

RELOCK:
	if salvage_entry
	then uid_to_lock = dir_uid;			/* The REAL uid, rather than what was recorded inside the dir */
	else uid_to_lock = dirp -> dir.uid;		/* let a seg_fault happen here */


/****
Here, we make sure that the UID in the directory matches the UID in the
kste, which, perforce, must have been derived from the branch at some time in
the past.  This check is skipped, however, if we find that the "directory" is
actually in a non-directory segment, since the supervisor occasionally
constructs imitation directory headers in automatic storage just so it can
lock with the right UID.  If the UID's fail to match, then the dir is 
salvaged. If we are called from the salvager, though, we skip all this.
*****/

	if ^salvage_entry
	then do;
		must_salvage = "0"b;
		if (dirp -> dir.uid = ""b)		/* Cannot be correct */
		then must_salvage = "1"b;
		else if (get_kstep_code = 0)
		then /* means segno is valid, and hence kstep is valid */
		     if kste.dirsw
		     then /* only check directories */
			if (dirp -> dir.uid ^= kste.uid)
			then must_salvage = "1"b;

		if must_salvage			/* Flunked the test */
		then do;				/* Neither the dir not dir_lock_seg is locked
here */
			call LOCK_FOR_SALVAGE_AND_SALVAGE (dirp, code);
						/* they will be locked and unlocked here. */
			if code = 0 & dirp -> dir.uid ^= ""b
			then go to RELOCK;		/* Dir is still valid */
			code = error_table_$dir_damage;
						/* dir went west */
			return;
		     end;				/** salvage case */
	     end;

/************************ LOCK DIR LOCK SEG *********************************/


	call LOCK_FAST (dir_lock_segp);

	dir_lockx = FIND_OR_MAKE_DIR_LOCK (uid_to_lock);
	dir_lockp = addr (dir_lock_all_dir_locks (dir_lockx));

	call VALIDATE_CACHE (addr (dir_lock.lock_count)); /* ensure cache is correct */

	if dir_lock.lock_count > 0
	then do;					/** Write Lock Locked */
		if dir_lock.write_locker ^= pds$processid
						/* Not Us */
		then go to LOCK_NOT_AVAILABLE;	/* common to read vs. write and write vs. write. */
		else go to MYLOCK_RETURN;
	     end;
	else do;					/* Read or no lock */
		dir_read_lockers_ptr = addr (dir_lock_all_readers (dir_lockx, 1));
		if THIS_PROCESS_IS_A_READER (dir_lockp, dir_read_lockers_ptr)
						/* some kind of mylock */
		then do;				/* we do not know a recovery mechanism for this one. */
			if typelock ^= ""b		/* We want write */
			then do;
				severity = tc_data$lock_error_severity;
				if severity ^= CRASH
				then severity = TERMINATE_PROCESS;

				call syserr (severity,
				     "lock: LOCK_DIR: write lock call with read lock held. dp = ^p, uid = ^w.",
				     dirp, uid_to_lock);
			     end;			/* Control never passes here */
			else go to MYLOCK_RETURN;	/* simple read mylock */
		     end;

		if /* tree */ typelock ^= ""b		/* want write ? */
		then if dir_lock.lock_count ^= 0	/* locked for read */
		     then goto LOCK_NOT_AVAILABLE;	/* wait for it */
		     else call LOCK_FOR_WRITE (dir_lockp);
		else call ADD_THIS_PROCESS_AS_READER (dir_lockp, dir_read_lockers_ptr);
						/* no, want read */
	     end;

/******* UNLOCK DIR LOCK SEG *********************************************/



UNLOCK_DIR_LOCK_SEG_RETURN:
	call UNLOCK_FAST (dir_lock_segp);

	if ^salvage_entry
	then if dirp -> dir.modify
	     then if code = 0
		then do;
			call dir_unlock (dirp);
			call LOCK_FOR_SALVAGE_AND_SALVAGE (dirp, code);
			if code = 0
			then go to RELOCK;
		     end;
	return;

/****** The following paths return to UNLOCK_DIR_LOCK_SEG_RETURN *****/


MYLOCK_RETURN:
	code = error_table_$mylock;
	go to UNLOCK_DIR_LOCK_SEG_RETURN;


LOCK_NOT_AVAILABLE:
	if waitsw = 0
	then do;
		failsw = 1;
		go to UNLOCK_DIR_LOCK_SEG_RETURN;
	     end;

/********** Waiting is required, wait. */

	call pxss$addevent (uid_to_lock);
	dir_lock.notify_sw = "1"b;
	call UNLOCK_FAST (dir_lock_segp);
	call pxss$wait;				/* since we set notify under the lock, there is no race. */
	sst$lock_waits = sst$lock_waits + 1;
	goto LOCK_START;				/* Anything can happen, so revalidate */


THIS_PROCESS_IS_A_READER:
     procedure (a_dir_lockp, a_dir_readersp) returns (bit (1) aligned);

declare	a_dir_lockp	pointer;
declare	a_dir_readersp	pointer;
declare	l_dir_readersp	pointer;
declare	l_dir_readers	(dir_lock_seg.header.max_readers) bit (36) aligned based (l_dir_readersp);
declare	rx		fixed bin;		/* ReaderIndex */


	if a_dir_lockp -> dir_lock.lock_count = 0
	then return ("0"b);
	l_dir_readersp = a_dir_readersp;
	do rx = 1 to dir_lock_seg.header.max_readers;
	     if l_dir_readers (rx) = pds$processid
	     then return ("1"b);
	end;
	return ("0"b);
     end THIS_PROCESS_IS_A_READER;


FIND_OR_MAKE_DIR_LOCK:
     procedure (a_UID) returns (fixed bin);

declare	a_UID		bit (36) aligned;
declare	UID		bit (36) aligned;
declare	dx		fixed bin;
declare	first_free_dx	fixed bin;
declare	l_dir_lockp	pointer;
declare	1 l_dir_lock	aligned like dir_lock based (l_dir_lockp);
declare	l_dir_readersp	pointer;
declare	find_only		bit (1) aligned;

	find_only = "0"b;
	go to Join;

FIND_DIR_LOCK:
     entry (a_UID) returns (fixed bin);

	find_only = "1"b;

Join:
	UID = a_UID;
	first_free_dx = 0;
	dir_lock_seg.header.meters.find_calls = dir_lock_seg.header.find_calls + 1;

	call VALIDATE_CACHE (addr (dir_lock_seg.header.highest_in_use));
						/* ensure cache is correct */
	do dx = 1 to dir_lock_seg.header.highest_in_use;
	     if dir_lock_all_dir_locks (dx).uid = UID
	     then go to FOUND_ENTRY;
	     else if dir_lock_all_dir_locks (dx).uid = (36)"0"b & first_free_dx = 0
	     then first_free_dx = dx;
	end;

	dir_lock_seg.header.meters.find_failures = dir_lock_seg.header.meters.find_failures + 1;
	if find_only
	then return (-1);


	if first_free_dx = 0
	then do;
		if dir_lock_seg.header.highest_in_use = dir_lock_seg.header.n_dir_locks
		then call syserr (CRASH, "lock: LOCK_DIR: dir_lock_seg full.");
		dir_lock_seg.header.highest_in_use, first_free_dx = dir_lock_seg.header.highest_in_use + 1;
		dir_lock_seg.header.meters.max_in_use = max (dir_lock_seg.header.meters.max_in_use, first_free_dx);
	     end;

	l_dir_lockp = addr (dir_lock_all_dir_locks (first_free_dx));
	unspec (l_dir_lock) = ""b;
	l_dir_readersp = addr (dir_lock_seg.readers (first_free_dx, 1));
	l_dir_readersp -> dir_read_lockers (*) = ""b;

	l_dir_lock.uid = a_UID;
	return (first_free_dx);

FOUND_ENTRY:
	l_dir_lockp = addr (dir_lock_all_dir_locks (dx));
	return (dx);
     end FIND_OR_MAKE_DIR_LOCK;

LOCK_FOR_WRITE:
     procedure (a_dir_lockp);

declare	a_dir_lockp	pointer;
declare	l_dir_lockp	pointer;
declare	1 l_dir_lock	aligned like dir_lock based (l_dir_lockp);
declare	rx		fixed bin;

	l_dir_lockp = a_dir_lockp;
	l_dir_lock.write_locker = pds$processid;
	l_dir_lock.lock_count = 1;
	l_dir_lock.notify_sw = "0"b;
	l_dir_lock.salvage_sw = salvage_entry;		/* GLOBAL */
	pds$block_lock_count = pds$block_lock_count + 1;
	return;

ADD_THIS_PROCESS_AS_READER:
     entry (a_dir_lockp, a_dir_readersp);

declare	a_dir_readersp	pointer;
declare	l_dir_readersp	pointer;
declare	l_dir_readers	(dir_lock_seg.header.max_readers) bit (36) aligned based (l_dir_readersp);

	l_dir_lockp = a_dir_lockp;
	l_dir_readersp = a_dir_readersp;
	do rx = 1 to hbound (l_dir_readers, 1) while (l_dir_readers (rx) ^= ""b);
	end;
	if rx > hbound (l_dir_readers, 1)
	then call syserr (CRASH, "lock: LOCK_DIR: Too many readers.");

	call VALIDATE_CACHE (addr (l_dir_lock.lock_count));
						/* ensure cache is correct */
	l_dir_lock.lock_count = l_dir_lock.lock_count - 1;
	l_dir_readers (rx) = pds$processid;
	pds$block_lock_count = pds$block_lock_count + 1;
	return;

UNLOCK_THIS_DIR:
     entry (a_dir_lockx, a_uid);			/* Checks for screwups */

declare	a_dir_lockx	fixed bin;
declare	a_uid		bit (36) aligned;

	l_dir_lockp = addr (dir_lock_all_dir_locks (a_dir_lockx));
	l_dir_readersp = addr (dir_lock_all_readers (a_dir_lockx, 1));
	if l_dir_lock.uid ^= a_uid
	then do;
		call syserr (tc_data$lock_error_severity, "lock: UNLOCK_DIR: UID Mismatch.");
		return;
	     end;

	call VALIDATE_CACHE (addr (l_dir_lock.lock_count));
						/* ensure cache is correct */
	if l_dir_lock.lock_count = 0
	then do;
		call syserr (tc_data$lock_error_severity, "lock: UNLOCK_DIR: lock count 0.");
		return;
	     end;
	else if l_dir_lock.lock_count < 0
	then do;
		do rx = 1 to hbound (l_dir_readers, 1) while (l_dir_readers (rx) ^= pds$processid);
		end;
		if rx > hbound (l_dir_readers, 1)
		then do;
			call syserr (tc_data$lock_error_severity,
			     "lock: UNLOCK_DIR: lock not read locked to process.");
			return;
		     end;
		l_dir_lock.lock_count = l_dir_lock.lock_count + 1;
		l_dir_readers (rx) = ""b;
		if l_dir_lock.notify_sw
		then if l_dir_lock.lock_count = 0
		     then do;
			     l_dir_lock.notify_sw = "0"b;
			     call pxss$notify (l_dir_lock.uid);
			end;
	     end;
	else if l_dir_lock.lock_count > 0
	then do;
		if l_dir_lock.write_locker ^= pds$processid
		then do;
			call syserr (tc_data$lock_error_severity,
			     "lock: UNLOCK_DIR: lock not write locked to process.");
			return;
		     end;
		l_dir_lock.lock_count = 0;
		l_dir_lock.write_locker = ""b;
		if l_dir_lock.notify_sw
		then do;
			l_dir_lock.notify_sw = "0"b;
			call pxss$notify (l_dir_lock.uid);
		     end;
	     end;
	pds$block_lock_count = pds$block_lock_count - 1;
	if (l_dir_lock.lock_count = 0) & (l_dir_lock.uid ^= (36)"1"b)
						/* leave the root at a nice low slot */
	then do;
		unspec (l_dir_lock) = ""b;

		call VALIDATE_CACHE (addr (dir_lock_seg.header.highest_in_use));
						/* ensure cache is correct */
		if a_dir_lockx = dir_lock_seg.header.highest_in_use
		then dir_lock_seg.header.highest_in_use = max (0, dir_lock_seg.header.highest_in_use - 1);
						/* last one out please close the light */
	     end;

	return;
     end LOCK_FOR_WRITE;

LOCK_FOR_SALVAGE_AND_SALVAGE:
     procedure (dir_ptr, code);
declare	dir_ptr		pointer;
declare	correct_uid	bit (36) aligned;
declare	code		fixed bin (35);

	code = 0;
	call dir_lock_salvage (dir_ptr, correct_uid, code);
	if code ^= 0
	then return;

	call on_line_salvager (dir_ptr, code);
	call dir_unlock_given_uid (correct_uid);

	return;
     end LOCK_FOR_SALVAGE_AND_SALVAGE;

%page;

UNLOCK_DIR:
     entry (dirp, a_uid);

dcl	a_uid		bit (36) aligned;

dcl	uid_to_unlock	bit (36) aligned;
dcl	nocheck_entry	bit (1);

dcl	get_ptrs_$given_segno
			entry (fixed bin) returns (ptr);
dcl	pc_wired$write_wait_uid
			entry (ptr, fixed bin, fixed bin, bit (36) aligned);


	nocheck_entry = "0"b;
	go to UNLOCK_START;

UNLOCK_DIR_NOCHECK:
     entry (dirp, a_uid);

	nocheck_entry = "1"b;

UNLOCK_START:
	uid_to_unlock = a_uid;
	if tc_data$system_shutdown ^= 0
	then return;

	dir_lock_segp = addr (dir_lock_seg$);
	dir_lock_all_locksp = dir_lock_seg.header.locks_ptr;
	dir_lock_all_readersp = dir_lock_seg.header.readers_ptr;

	per_process_flag = "0"b;

	if dirp ^= null & ^nocheck_entry
	then begin;

		on seg_fault_error go to DIR_GONE;

		if dirp -> dir.modify
		then call syserr (JUST_LOG, "lock: unlock_dir with dir.modify - uid = ^w - callerp = ^p", ind,
			caller ());
		per_process_flag = dirp -> dir.per_process_sw;
						/* Save for unlocking */
	     end;

DIR_GONE:
	call LOCK_FAST (dir_lock_segp);

	dir_lockx = FIND_DIR_LOCK (uid_to_unlock);

	if dir_lockx = -1
	then call TRY_TO_FIND_A_BETTER_UID;		/* This can change dir_lockx */
						/* and uid_to_unlock */
	if dir_lockx = -1
	then do;
		call syserr (tc_data$lock_error_severity, "lock: UNLOCK_DIR: dir ^w not locked. caller = ^p.", ind,
		     caller ());
		go to UNLOCK_SIDE_RETURN;
	     end;

	call PERHAPS_WRITE_BEHIND (dir_lockx);

	call UNLOCK_THIS_DIR (dir_lockx, uid_to_unlock);

UNLOCK_SIDE_RETURN:
	call UNLOCK_FAST (dir_lock_segp);
	return;




TRY_TO_FIND_A_BETTER_UID:
     procedure;

	if dirp = null ()
	then return;

	call get_kstep (binary (baseno (dirp)), kstep, get_kstep_code);
	if ^(get_kstep_code = 0 & kste.dirsw & kste.uid ^= uid_to_unlock)
	then return;

	uid_to_unlock = kste.uid;
	dir_lockx = FIND_DIR_LOCK (uid_to_unlock);

	call VALIDATE_CACHE (addr (dir_lock_all_dir_locks (dir_lockx).lock_count));
						/* ensure cache is correct */
	if dir_lock_all_dir_locks (dir_lockx).lock_count = 0
	then do;
		dir_lockx = -1;
		return;
	     end;

	call syserr (JUST_LOG, "lock: UNLOCK_DIR: dir ^w unlock called with bad uid, caller = ^p", ind, caller ());
     end TRY_TO_FIND_A_BETTER_UID;


PERHAPS_WRITE_BEHIND:
     procedure (dirx);

declare	dirx		fixed bin;

	if dirp = null ()
	then return;

	if sst$astl = pds$processid
	then call syserr (CRASH, "lock: AST lock set at dir unlock time.");

	if sst$dirlock_writebehind = 0 | per_process_flag
	then return;

	call VALIDATE_CACHE (addr (dir_lock_all_dir_locks (dirx).lock_count));
						/* ensure cache is correct */
	if dir_lock_all_dir_locks (dirx).lock_count < 0
	then return;

	astep = get_ptrs_$given_segno (segno (dirp));
	if astep ^= null
	then do;					/* Writebehind time. */
		call UNLOCK_FAST (dir_lock_segp);	/* force write not under dir_lock_seg lock */

		call pc_wired$write_wait_uid (astep, 0, -1, uid_to_unlock);
		if aste.fmchanged
		then do;				/* Cant be OFF fraudulently */
			call lock_ast;
			if aste.uid = uid_to_unlock
			then call update_vtoce (astep);
			call unlock_ast;
		     end;

		call LOCK_FAST (dir_lock_segp);	/* UNLOCK_THIS_DIR will make sure that dir_lockx still describes uid_to_unlock */
	     end;

     end PERHAPS_WRITE_BEHIND;
     end LOCK_DIR;

VALIDATE_CACHE:
     proc (word_ptr);
dcl	word		based (word_ptr) bit (36) aligned;
dcl	word_ptr		ptr;

	if ^stacq (word, word, word)			/* ensure cache is correct */
	then call syserr (ANNOUNCE, "lock: VALIDATE_CACHE: FAILED running on cpu ^a, memory address ^8o (oct)",
		substr (CPU_NAMES, (prds$processor_tag + 1), 1), absadr (word_ptr, (0)));

     end VALIDATE_CACHE;

/* format: off */
%page; %include hc_lock;
%page; %include dir_lock_seg_;
%page; %include aste;
%page; %include kst;
%page; %include dir_header;
%page; %include syserr_constants;
%page;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   lock: dir_lock_read mylock err. dp =PTR

   S: $crash

   T: $run

   M: An attempt to lock a directory for reading found the directory 
   already locked to this process.  This indicates a supervisor 
   programming error.

   A: $reboot

   Message:
   lock: dir_lock_write mylock err. dp =PTR

   S: $crash

   T: $run

   M: An attempt to lock a directory for writing found the directory
   already locked to this process.  This indicates a supervisor 
   programming error.

   A: $reboot

   Message:
   lock: pds$block_lock_count <= 0. caller = PTR

   S: $lock_severity

   T: $run

   M: An attempt to unlock a lock found that the process was holding no 
   locks.  This indicates a supervisor programming error.

   A: $reboot

   Message:
   lock: lock PTR not equal to processid. caller = PTR

   S: $lock_severity

   T: $run

   M: An attempt was made to unlock a lock found not to be held by this
   process.  This indicates a supervisor programming error.

   A: $reboot

   Message:
   lock: stacq hardware failure on PTR

   S: $crash

   T: $run

   M: The hardware failed to unlock the specified lock using a stacq 
   instruction.

   A: Fix the hardware.

   Message:
   lock: lock_fast mylock err PTR

   S: $crash

   T: $run

   M: An attempt to lock a fast lock found the lock already locked to
   the requesting process.  This indicates a supervisor programming 
   error.

   A: $reboot

   Message:
   lock: unlock_fast lock PTR not locked to process. caller = PTR

   S: $lock_severity

   T: $run

   M: An attempt to unlock a fast lock found that the lock was not held
   by the requesting process.  This indicates a supervisor 
   programming error.

   A: $reboot

   Message:
   lock: LOCK_DIR: write lock call with read lock held. dp = PTR, uid = UID.

   S: $term

   T: $run

   M: A request was made to lock a directory for writing when the process
   already possessed a read lock on that directory.  This indicates a 
   supervisor programming error.

   A: $reboot

   Message:
   lock: LOCK_DIR: dir_lock_seg full.

   S: $crash

   T: $run

   M: The segment used to record all locked directories overflowed.
   This may be a hardware problem.

   A: $reboot

   Message:
   lock: LOCK_DIR: Too many readers.

   S: $crash

   T: $run

   M: Too many processes attempted to request a read lock on a given 
   directory.  This may indicate a hardware problem.

   A: $reboot

   Message:
   lock: UNLOCK_DIR: UID Mismatch.

   S: $lock_severity

   T: $run

   M: When attempting to unlock a directory, the UID for the directory
   found in the dir_lock_seg entry did not match that of the directory.

   A: $reboot

   Message:
   lock: UNLOCK_DIR: lock count 0.

   S: $lock_severity

   T: $run

   M: An attempt to unlock a directory found the dir_lock_seg entry for
   the directory not listing the directory as locked.

   A: $reboot

   Message:
   lock: UNLOCK_DIR: lock not read locked to process.

   S: $lock_severity

   T: $run

   M: A request to unlock a directory locked for reading found that the
   requesting process was not holding the directory locked.

   A: $reboot

   Message:
   lock: UNLOCK_DIR: lock not write locked to process.

   S: $lock_severity

   T: $run

   M: A request to unlock a directory that was found to be locked for
   writing was not locked to this process.

   A: $reboot

   Message:
   lock: unlock_dir with dir.modify - uid = UID - callerp = PTR

   S: $log

   T: $run

   M: A directory being unlocked appears to have been undergoing
   a modification sequence that has not completed.

   A: The next reference to the directory will force a directory salvage.

   Message:
   lock: UNLOCK_DIR: dir DIR_LOCK_IND not locked. caller = PTR.

   S: $lock_severity

   T: $run

   M: A request to unlock a directory found that the dir_lock_seg entry
   does not show that the directory was locked.


  A: $reboot

   Message:
   lock: UNLOCK_DIR: dir DIR_LOCK_IND unlock called with bad uid, caller = PTR

   S: $log

   T: $run

   M: A request to unlock a directory found that the UID of the directory 
   does not match the UID at the time the directory was locked.  However,
   the UID does match that in the KST.  This normally indicates that 
   the directory was salvaged during the time that it was locked.

   Message:
   lock: AST lock set at dir unlock time.

   S: $crash

   T: $run

   M: The AST was found locked to this process at directory unlock time.
   This indicates a supervisor programming error.

   A: $reboot

   Message:
   lock: VALIDATE_CACHE: FAILED running on cpu N, memory address OOOOOOOO (oct).

   S: $info

   T: $run

   M:  This is most likely a cache write notify problem with the 8/70m
   processor "CPU N", or the System Control Unit containing the "memory
   address OOOOOOOO." 

   A: $contact_sa

   END MESSAGE DOCUMENTATION */

     end lock;
