/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


flush_ast_pool:
     procedure (a_ptsi);

/* Entry to hedge the AST against fatal crash. */

dcl a_ptsi fixed bin;

dcl fastep ptr;
dcl first bit (1) aligned;
dcl ptsi fixed bin;

dcl lock$lock_ast entry;
dcl lock$unlock_ast entry;
dcl update_vtoce entry (ptr);

dcl (addr, hbound, lbound, pointer, ptr) builtin;
     

/* * * * * * * * * * FLUSH_AST_POOL * * * * * * * * * */

	ptsi = a_ptsi;				/* copy magic to stack. */

	sstp = addr (sst_seg$);
	if (ptsi < lbound (sst.ausedp, 1)) | (ptsi > hbound (sst.ausedp, 1)) then return;

	call lock$lock_ast;				/* pull the shades */

	fastep = ptr (sstp, sst.ausedp (ptsi));
	first = "1"b;				/* until x3j1 gives in on until... */
	do astep = fastep repeat (pointer (astep, aste.fp)) while ((astep ^= fastep) | first);
						/* Scan whole loop. */
	     first = "0"b;

	     aste.deact_error = "0"b;			/* retry bad I/O's */

	     if aste.usedf & aste.fmchanged & ^aste.per_process then do;
		call update_vtoce (astep);
		sst.hedge_updatevs = sst.hedge_updatevs + 1;
		end;
	end;

	call lock$unlock_ast;
	return;
%page;
%include aste;
%include sst;

     end flush_ast_pool;
