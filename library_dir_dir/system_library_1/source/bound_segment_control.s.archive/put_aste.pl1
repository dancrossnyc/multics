/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/*
			put_aste (astep)




FUNCTION -

The procedure "put_aste" frees  the  ASTE  pointed  to  by  the  input  argument
"astep".  No matter if the ASTE was in the circular list or not, "put_aste" will
put it in the list associated with the size of its  page  table,  at  the  first
position.

It  does  not  concern  itself  with  the  AST lock. It assumes there is no race
condition. It is the responsibility of the caller to make sure no race condition
exists. If called by the initializer or  shutdown,  it  may  be  called  without
locking  the AST. In normal cases, however, the caller must make sure the AST is
locked before issuing the call and it will be unlocked upon return as soon as it
is safe to do so.

All items of the ASTE are zeroed except fp, bp, ptsi and marker. All  PTW's  are
initialized with a page not core flag and a coded null disk address.



MODIFICATIONS -

04/17/75	A. Bensoussan - Modified for the new storage system.
03/21/81	W. Olin Sibert, for ADP PTW formats
04/17/81	WOS -- remove ptw.os trap, convert for ptw_util_
11/01/82  J. Bongiovanni, for synchronized segments
84-01-16  BIM to zero aste counters.

*/


put_aste: procedure (a_astep);


dcl  a_astep	ptr;
dcl (i, pts)	fixed bin(17);
dcl  ptsi		fixed bin (3);
dcl  ptp		ptr;
dcl  pt		(1: pts) bit (36) aligned based;

dcl  hc_dm_util$deactivate    entry (fixed bin (3));
dcl  ptw_util_$make_null	entry (pointer, bit (22) aligned);
dcl  thread$cin		entry (ptr, bit (18) unal);
dcl  thread$out		entry (ptr, bit (18) unal);

dcl (addr, addwordno, fixed, rel) builtin;



	sstp = addr (sst_seg$);			/* get pointers */
	astep = a_astep;				/* copy argument */

	ptsi = fixed (astep -> aste.ptsi, 2);		/* get page table size index */
	pts = sstp -> sst.pts (ptsi);			/* get page table size */


          if aste.synchronized
	     then call hc_dm_util$deactivate (ptsi);

	if sst.ausedp(ptsi) ^= rel(astep) then		/* If ASTE not first in list, make it first */
	     do;
	     if aste.fp ^= "0"b then 			/* If ASTE is in the list, take it out */
		call thread$out (astep, sst.ausedp(ptsi));
	     call thread$cin (astep, sst.ausedp(ptsi));	/* Put ASTE at the end of the list */
	     sst.ausedp (ptsi) = rel (astep);		/* Move current ptr to ASTE to make it first */
	     end;

	aste.pvtx = 0;				/* Set pvtx to zero (unvalid pvtx) to prevent emergency
						  shutdown from updatig the vtoce with wrong addresses */

	aste.np, aste.csl, aste.records = ""b;		/* counters are irrelevant */

/* There used to be a trap here which inspected ptw.os for each PTW, crashing if it was
   found on, but this trap has outlived its usefulness. */

	ptp = addwordno (astep, sst.astsize);		/* Start with page zero */

	do i = 1 to pts;				/* Write coded null addresses in all PTW's */
	     call ptw_util_$make_null (addr (ptp -> pt (i)) , put_aste_null_addr);
	end;

	astep -> aste_part.two = "0"b;		/* Zero the ASTE except fb, bp, ptsi and marker */

	return;

%page; %include sst;
%page; %include aste;
%page; %include null_addresses;

	end put_aste;
