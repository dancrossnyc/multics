" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************
	name	meter_ast_lock
	entry	lock
	entry	unlock

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
"	meter_ast_lock
"
"	Routine to meter number of AST locks and time locked by
"	caller.  This data is maintained in ast_lock_meter_seg.
"	This routine is intended to be called only by lock, and
"	the data it collects is charged against the caller of
"	lock (i.e., the owner of the stack frame immediately 
"	preceding that of lock)
"
"	After locking the AST,
"		call	meter_ast_lock$lock
"
"	Before unlocking the AST,
"		call	meter_ast_lock$unlock
"
"	Note that ast_lock_meter_seg is protected by the AST lock.
"
"	Register Conventions:
"		ap -> stack frame of caller of lock
"		ab -> ast_lock_meter_seg
"		bp -> ast_lock_meters.meters
"
"	Written November 1981 by J. Bongiovanni
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
lock:
	eppap	sp|stack_frame.prev_sp,*	ap -> frame of caller of lock
	epaq	ap|stack_frame.return_ptr,*	AQ = return point in caller
	ars	18			convert to packed pointer
	lls	18			in Areg
	eppab	ast_lock_meter_seg$
	eppbp	ab|ast_lock_meters.meters
	ldq	ab|ast_lock_meters.n_entries	number currently in table
	qls	3+18			x (size of entry) in QU

find_caller_loop:
	eaq	-lock_meters_size,qu	decrement to next entry
	tmoz	caller_not_found		none left
	cmpa	bp|lock_meters.caller,qu	match on caller
	tnz	find_caller_loop		no
find_caller_join:
	stq	ab|ast_lock_meters.last_locker	save (protected by AST lock)

	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+><+><+><+><+><+>
	rccl	sys_info$clock_,*		current time
	staq	ab|ast_lock_meters.last_lock_time	save
	sbaq	pds$cpu_time		total CPU time
	sbaq	pds$virtual_delta		virtual CPU time
	staq	ab|ast_lock_meters.last_lock_vcpu
	lda	pds$page_waits		page faults
	sta	ab|ast_lock_meters.last_lock_pf

	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><-><-><-><-><-><->
	short_return

caller_not_found:				" create entry for caller
	ldq	ab|ast_lock_meters.n_entries	highest so far
	cmpq	ab|ast_lock_meters.max_n_entries  any room
	tmi	insert_caller		yes
	ldq	0,du			overflows to index 0
	tra	find_caller_join

insert_caller:
	qls	18+3			index x size in QU
	aos	ab|ast_lock_meters.n_entries	bump next
	sta	bp|lock_meters.caller,qu	save text pointer
	tra	find_caller_join

"
unlock:
	eppab	ast_lock_meter_seg$
	ldq	ab|ast_lock_meters.last_locker	offset to entry in QU
	tpl	unlock_meter		valid
	aos	ab|ast_lock_meters.invalid	no--meter and exit
	short_return			

unlock_meter:
	eppbp	ab|ast_lock_meters.meters
	eax0	0,qu			x0 = rel offset of entry

	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+><+><+><+><+><+>

	rccl	sys_info$clock_,*		current time
	sbaq	ab|ast_lock_meters.last_lock_time	time locked
	adaq	bp|lock_meters.time_locked,0	update entry
	staq	bp|lock_meters.time_locked,0	..
	rccl	sys_info$clock_,*		current time
	sbaq	pds$cpu_time		total CPU time
	sbaq	pds$virtual_delta		virtual CPU time
	sbaq	ab|ast_lock_meters.last_lock_vcpu	vcpu time locked
	adaq	bp|lock_meters.vcpu_locked,0
	staq	bp|lock_meters.vcpu_locked,0
	lda	pds$page_waits		page faults
	sba	ab|ast_lock_meters.last_lock_pf
	asa	bp|lock_meters.pf_locked,0	
	aos	bp|lock_meters.n_calls,0

	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><-><-><-><-><-><->

	short_return

"
	include 	ast_lock_meters
"
	include 	stack_frame

	end
