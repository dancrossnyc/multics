/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */
limit_covert_channel: proc (event_count);

/* Procedure to limit/audit uses of covert channels in ring 0.
The idea is that some primitive detected the potential use of a covert
channel that sent <event_count> events (bits).  This will be added to
pds$covert_event_count.  If the process hits a defined limit of events,
we determine the bandwidth of the transmission associated with the
events we have seen.  If this exceeds certain limits, the process will
be delayed, and possibly audited for the event.
Written by Keith Loepere in Januray 1985. 
*/

/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */

/* Arguments */

dcl  event_count			fixed bin parameter;

/* Constants */

dcl  BIG_fb_35_value		fixed bin (35) init (011111111111111111111111111111111111b) static options (constant);
dcl  ME				char (20) init ("limit_covert_channel") static options (constant);
dcl  Tics_per_sec			fixed bin (20) init (1000000) static options (constant);

/* Variables */

dcl  delay_time			fixed bin (71);
dcl  desired_event_count		fixed bin;
dcl  elapsed_time			fixed bin (71);
dcl  limit			bit (1) aligned;
dcl  my_audit_event_flags		bit (36) aligned;
dcl  new_event_count		fixed bin;
dcl  old_event_count		fixed bin;
dcl  time_per_bit			fixed bin (35);

/* Entries */

dcl  access_audit_$log_general	entry (char (*), fixed bin, bit (36) aligned, bit (36) aligned, char (*), fixed bin (35), ptr, fixed bin (21)) options (variable);
dcl  pxss$pause			entry (fixed bin (71));

/* External */

dcl  access_operations_$excessive_seg_state_chg bit (36) aligned ext;
dcl  pds$covert_event_count		fixed bin ext;
dcl  pds$first_covert_event_time	fixed bin (71) ext;
dcl  sst$audit_seg_state_change_bw	fixed bin ext;
dcl  sst$audit_seg_state_chg		fixed bin (35) ext;
dcl  sst$delayed_seg_state_chg	fixed bin (35) ext;
dcl  sst$max_seg_state_change_bw	fixed bin ext;
dcl  sst$seg_state_change_limit	fixed bin ext;
dcl  sst$seg_state_chg_delay		fixed bin (71) ext;

/* Misc */

dcl  (addr, clock, divide, null, stacq)	builtin;
%page;

/* We start by setting pds$covert_event_count to its correct value.  In
principle, this should be done under the PTL, since page control can
increment this value if we should take the wrong page fault.  However,
we can set this without locking the PTL as follows.  We determine what the
value should be and try to stacq it.  If we fail, page control must have
done its thing.  We then retry.  Admitedly, we can end up with page control
being invoked between when we set pds$covert_event_count and when we set
pds$first_covert_event_time, but, if we were to need to advance 
pds$first_covert_event_time, it follows that we returned pds$covert_event_count
to such a small value that it is unlikely that page control could find enough
events to need to care about pds$first_covert_channel_time until we can set
it. */

SET_count:
	limit = "0"b;
	old_event_count = pds$covert_event_count;
	desired_event_count, new_event_count = old_event_count + event_count;
	if desired_event_count >= 0 then do;		/* enough to determine bandwidth over */
	     limit = "1"b;
	     new_event_count = new_event_count - sst$seg_state_change_limit; /* counter is an upward counter to 0 */
	end;
	if ^set_event_count () then go to SET_count;	/* try setting new event count */

	if ^limit then return;			/* not yet hit number of events over which we determine bandwidth */

/* determine bandwidth of channel - this code parallels that in page_fault */

	elapsed_time = clock () - pds$first_covert_event_time;
	if elapsed_time > BIG_fb_35_value then go to set_time; /* bailout to avoid messy precision later */
	time_per_bit = divide (fixed (elapsed_time, 35), desired_event_count + sst$seg_state_change_limit, 35);

	if time_per_bit * sst$audit_seg_state_change_bw < Tics_per_sec then do; /* if time_per_bit < allowed time_per_bit */
	     sst$audit_seg_state_chg = sst$audit_seg_state_chg + 1;
	     my_audit_event_flags = "0"b;
	     addr (my_audit_event_flags) -> audit_event_flags.grant = "1"b;
	     addr (my_audit_event_flags) -> audit_event_flags.cc_10_100 = "1"b;
	     call access_audit_$log_general (ME, 0, my_audit_event_flags, access_operations_$excessive_seg_state_chg, "", 0, null, 0);
	end;

	if time_per_bit * sst$max_seg_state_change_bw < Tics_per_sec then do; /* if time_per_bit < allowed time_per_bit */
	     sst$delayed_seg_state_chg = sst$delayed_seg_state_chg + 1;
	     delay_time = (divide (Tics_per_sec, sst$max_seg_state_change_bw, 35) - time_per_bit) * (desired_event_count + sst$seg_state_change_limit);
	     sst$seg_state_chg_delay = delay_time + sst$seg_state_chg_delay;
	     delay_time = delay_time + clock ();
	     do while (clock () < delay_time);
		call pxss$pause (delay_time);
	     end;
	end;

set_time: pds$first_covert_event_time = clock ();
	return;
%page;
set_event_count: proc () returns (bit (1) aligned);	/* try to store new event_count */

dcl  new_value			bit (36) aligned based (addr (new_event_count));
dcl  old_value			bit (36) aligned based (addr (old_event_count));
dcl  word				bit (36) aligned based (addr (pds$covert_event_count));

	return (stacq (word, new_value, old_value));
     end;
%page; %include access_audit_eventflags;
     end;
