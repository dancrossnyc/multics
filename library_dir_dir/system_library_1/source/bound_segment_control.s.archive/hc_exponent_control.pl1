/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/* hc_exponent_control

   ring zero program to get/set the pds variables that control
   the fim's action on overflow and underflow and use of
   hexadecimal floating point exponent.

*/

/* format: style4 */
hc_exponent_control:
     proc;

	return;					/* never called here */

/* Coded February 80 Benson I. Margulies */
/* Modified February 83 E. N. Kittlitz. hexfp */
/* Modified March 83 E. N. Kittlitz (age 28) make hexfp use 2 bits */
/* Modified June 83 E. N. Kittlitz (still, but not for long) use pmut$load_mode_reg instead of ring_alarm */
/* Modified 831120 E. N. Kittlitz for hex exponent fault/restart control */
/* Modified Nov 1 84 by M. Sharpe to control access to HFP mechanism using an access control segment */

dcl  a_code fixed bin (35) aligned parameter;
dcl  a_max_value bit (72) aligned parameter;
dcl  a_new_hfp_sw bit (2) aligned parameter;
dcl  a_old_hfp_sw bit (2) aligned parameter;
dcl  a_restart_overflow bit (1) aligned parameter;
dcl  a_restart_underflow bit (1) aligned parameter;

dcl  control_bit_index fixed bin;
dcl  hfp_raw_mode bit (36) aligned automatic;
dcl  max_value bit (72) aligned;
dcl  new_hfp_sw bit (2) aligned;
dcl  restart_overflow bit (1) aligned;
dcl  restart_underflow bit (1) aligned;
dcl  val fixed bin (17);

dcl  substr builtin;

dcl  pds$exp_undfl_rest bit (2) aligned external static;
dcl  pds$exp_ovfl_rest bit (2) aligned external static;
dcl  pds$eovfl_value bit (72) aligned external static;
dcl  pds$hex_eovfl_value bit (72) aligned external static;
dcl  pds$initial_ring fixed bin (3) aligned external static;
dcl  pds$hfp_exponent_enabled bit (1) aligned external static;
dcl  sys_info$hfp_exponent_available bit (1) aligned external static;

dcl  error_table_$action_not_performed fixed bin (35) aligned external static;

dcl  acs_dir char (14) internal static options (constant) init (">sc1>admin_acs");
dcl  acs_seg char (15) internal static options (constant) init ("Fortran_hfp.acs");

dcl  level$get returns (fixed bin (17));
dcl  pmut$load_mode_reg entry;
dcl  status_$get_user_raw_mode entry (char (*), char (*), char (*), bit (36) aligned, fixed bin (35));
%page;

/**** *************************************************************************
      *   Usage:						        *
      *   						        *
      *   declare hc_exponent_control$exponent_control_get		        *
      *    entry (bit (1) aligned, bit (1) aligned, bit (72) aligned);        *
      *   ditto:  hc_exponent_control$hex_exponent_control_get	        *
      *   						        *
      *   call hc_exponent_control$exponent_control_get (restart_underflow,   *
      *      restart_overflow, overflow_value);			        *
      *   						        *
      *   declare hc_exponent_control$exponent_control_set		        *
      *    entry (bit (1) aligned, bit (1) aligned, bit (72) aligned,	        *
      *           fixed bin (35) aligned);			        *
      *   ditto: hc_exponent_control$hex_exponent_control_set	        *
      *   						        *
      *   call hc_exponent_control$exponent_control_set (restart_underflow,   *
      *	restart_overflow, overflow_value, code);		        *
      *   						        *
      *							        *
      *   All arguments are Output for get and Input for set.	        *
      *   						        *
      *   restart_overflow	"1"b to make the fim restart underflows with    *
      *			a zero result, "0"b to fault.		        *
      *   						        *
      *   restart_overflow	"1"b to make the fim restart overflows with     *
      *   			a defined result, "0"b to fault.      *
      *   						        *
      *   overflow_value	value to use for result of restarted overflow   *
      *   			if overflows are to be restarted.     *
      *							        *
      *   code		standard status code.		        *
      *							        *
      ************************************************************************* */

%page;

exponent_control_get:
     entry (a_restart_underflow, a_restart_overflow, a_max_value);

	control_bit_index = 1;
	a_max_value = pds$eovfl_value;
	go to ecg_join;

hex_exponent_control_get:
     entry (a_restart_underflow, a_restart_overflow, a_max_value);

	control_bit_index = 2;
	a_max_value = pds$hex_eovfl_value;

ecg_join: a_restart_underflow = substr (pds$exp_undfl_rest, control_bit_index, 1);
	a_restart_overflow = substr (pds$exp_ovfl_rest, control_bit_index, 1);
	return;

exponent_control_set:
     entry (a_restart_underflow, a_restart_overflow, a_max_value, a_code);

	control_bit_index = 1;
	go to ecs_join;

hex_exponent_control_set:
     entry (a_restart_underflow, a_restart_overflow, a_max_value, a_code);

	control_bit_index = 2;

ecs_join: val = level$get ();				/* get validation level */
	if val > pds$initial_ring then do;
	     a_code = error_table_$action_not_performed;
	     return;
	end;

	a_code = 0;
	restart_overflow = a_restart_overflow;
	restart_underflow = a_restart_underflow;
	max_value = a_max_value;

/* **********************************************************
   *   That copy may seem superfluous, but if someday	*
   *   anybody else wants to actually do something with 	*
   *   these values other than just copying them		*
   *   directly into the pds then this assures that they	*
   *   wont accidently introduce a 2 reference security 	*
   *   problem.					*
   ******************************************************** */

	substr (pds$exp_undfl_rest, control_bit_index, 1) = restart_underflow;
	substr (pds$exp_ovfl_rest, control_bit_index, 1) = restart_overflow;
	if control_bit_index = 1 then pds$eovfl_value = max_value;
	else pds$hex_eovfl_value = max_value;
	return;
%page;
/* Per-process control of use of hexadecimal exponent floating point.

   Interpretation of switch values:

   "10"b	-> disable hex exponent
   "11"b     -> enable hex exponent

   All other values ("00"b, "01"b) provide a handy method for determining the
   current value of the switch, or for setting a_code to a known non-zero value.
*/

set_hexfp_control: entry (a_new_hfp_sw, a_old_hfp_sw, a_code);

	new_hfp_sw = a_new_hfp_sw;			/* copy input arg */
	a_old_hfp_sw = "1"b || pds$hfp_exponent_enabled;	/* whip this out right away */
	val = level$get ();				/* get validation level */
	if val > pds$initial_ring |			/* got the oomph? */
	     substr (new_hfp_sw, 1, 1) ^= "1"b then do;	/* got the style? */
	     a_code = error_table_$action_not_performed;	/* sorry, kid. */
	     return;
	end;
	if substr (new_hfp_sw, 2, 1) = pds$hfp_exponent_enabled then do; /* no change */
	     a_code = 0;				/* hardcoresse oblige */
	     return;
	end;
	if substr (new_hfp_sw, 2, 1) = "1"b then do;	/* wants to turn it on */
	     if ^sys_info$hfp_exponent_available then do; /* smart boy wanted */
		a_code = error_table_$action_not_performed;
		return;
	     end;
	     call status_$get_user_raw_mode (acs_dir, acs_seg, "", hfp_raw_mode, a_code);
	     if a_code ^= 0
		then do;
		a_code = error_table_$action_not_performed;
		return;
	     end;

	     if (hfp_raw_mode & RW_ACCESS) = RW_ACCESS	/* has access to acs segment */
		then pds$hfp_exponent_enabled = "1"b;
	     else do;
		a_code = error_table_$action_not_performed;
		return;
	     end;
	end;

	else pds$hfp_exponent_enabled = ""b;		/* turn it off */


	a_code = 0;				/* no objections */
	call pmut$load_mode_reg;			/* zap - last of that exponent base */
	return;


%page;	%include access_mode_values;

     end;
