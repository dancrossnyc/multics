/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-01-15,Fawcett), approve(86-04-11,MCR7383),
     audit(86-05-21,Coppola), install(86-07-17,MR12.0-1097):
     Add support for subvolumes.
  2) change(87-02-04,Fawcett), approve(87-04-27,MCR7670),
     audit(87-04-27,Farley), install(87-04-28,MR12.1-1028):
     Correct ioa_ format string in syserr call.
                                                   END HISTORY COMMENTS */


/* format: style4 */
alm_syserr_caller: proc;

/* 83-05-30 E. N. Kittlitz */

/* this routine contains calls to syserr which are just not worth coding
   in the ALM routines from which we wish to call syserr. */

dcl  a_pvid bit (36) aligned;
dcl  a_uid bit (36) aligned;
dcl  a_vtocx fixed bin;
dcl  a_ignore1 fixed bin;
dcl  a_ignore2 fixed bin;

dcl  code fixed bin (35);
dcl  p99 pic "99";
dcl  pv_loc char (32) varying;
dcl  pvid bit (36) aligned;
dcl  pvtx fixed bin;
dcl  uid bit (36) aligned;
dcl  vtocx fixed bin;

dcl  get_pvtx entry (bit (36) aligned, fixed bin (35)) returns (fixed bin);
dcl  search_ast entry (bit (36) aligned) returns (ptr);
dcl  syserr entry options (variable);

dcl  (addr, convert, null, rtrim) builtin;

	return;					/* no syserr_caller$syserr_caller */
%page;

search_ast_hash_error: entry;

	call syserr (CRASH, "search_ast: hash error");
	return;


/* search_ast$check entry (a_uid, a_pvid, a_vtocx, a_code) returns (ptr)
   calls this entry with the same argument list. */

search_ast_double_uid: entry (a_uid, a_pvid, a_vtocx, a_ignore1, a_ignore2);

	uid = a_uid;
	pvid = a_pvid;
	vtocx = a_vtocx;
	pvt_arrayp = addr (pvt$array);
	pvtx = get_pvtx (pvid, code);
	if code = 0 then do;
	     pvtep = addr (pvt_array (pvtx));
	     pv_loc = pvte.devname || "_" || convert (p99, pvte.logical_area_number);
	     if pvte.is_sv then pv_loc = rtrim (pv_loc) || rtrim (pvte.sv_name);
	end;
	else do;
	     pvtep = null;
	     pv_loc = "*not-mounted*";
	end;
	astep = search_ast ((uid));
	if astep = null then
	     call syserr (CRASH, "syserr_caller$search_ast_double_uid spurious call, astep=null, uid=^w, pv=^a(^w), vtocx=^o.",
		uid, pv_loc, pvid, vtocx);
	else if pvt_array (aste.pvtx).pvid = a_pvid & aste.vtocx = a_vtocx then
	     call syserr (CRASH, "syserr_caller$search_ast_double_uid spurious call, aste=^p, uid=^w, pv=^a(^w), vtocx=^o",
		astep, uid, pv_loc, pvid, vtocx);
	else call syserr (LOG, "search_ast: double uid ^w. vtocx ^o on ^a(^w). active vtocx ^o on ^a^[^a^;^1s^](^w).",
		uid, vtocx, pv_loc, pvid,
		aste.vtocx, pvt_array (aste.pvtx).devname || "_" ||
		convert (p99, pvt_array (aste.pvtx).logical_area_number),
		pvt_array (aste.pvtx).is_sv, pvt_array (aste.pvtx).sv_name,
		pvt_array (aste.pvtx).pvid);
	return;

/* format: off */
%page; %include aste;
%page; %include pvte;
%page; %include syserr_constants;
%page;
/* format: on */

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   search_ast: hash error

   S:	$crash

   T:	$run

   M:	$err

   A:	$recover


   Message:
   search_ast: double uid UID. vtocx VTOCX on DRIVE(PVID). active vtocx VTOCX2 on DRIVE2(PVID2).

   S:	$log

   T:	$run

   M:	A mismatch has been detected between the branch and the ASTE
   for a segment. The two segments indicated by VTOCE index and
   physical volume location/identifier claim to have the same file system
   unique identifier. The operation either proceeds or returns a connection
   failure to the user process, as appropriate. This message is logged for the
   use of system programmers.

   This error can occur if damage to a directory branch has caused
   its unique ID to become incorrect, and if the incorrect unique ID
   happens to be identical to the unique ID of a segment already active.

   A:	$inform


   Message:
   syserr_caller$search_ast_double_uid spurious call, astep=null, uid=UID, pv=DRIVE(PVID), vtocx=VTOCX.

   S:	$log

   T:	$run

   M:	A call was made to indicate a double unique_id, but it was not possible
   to reconstruct the error. The unique_id, physical volume location/identifier,
   and VTOCE index are provided.

   A:	$ignore

   Message:
   syserr_caller$search_ast_double_uid spurious call, aste=desired, uid=UID, pv=DRIVE(PVID), vtocx=VTOCX.

   S:	$log

   T:	$run

   M:	A call was made to indicate a double unique_id, but it was not possible to
   reconstruct the error. The unique id, physical volume location/identifier,
   and vtoce index are provided.

   A:	$ignore

   END MESSAGE DOCUMENTATION */

     end alm_syserr_caller;
