/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */

seg_fault: proc (a_mcptr);


/****^  HISTORY COMMENTS:
  1) change(86-08-09,GDixon), approve(86-08-09,MCR7388),
     audit(86-09-02,Farley), install(86-09-08,MR12.0-1150):
     Document restrictions placed upon future callers of
     seg_fault$makeknown_activate.
                                                   END HISTORY COMMENTS */

/*
    1/85 by Keith Loepere to audit logical volume full conditions.
   10/84 by Keith Loepere to move access computations into dc_find, also to
         avoid dir unlocking/locking during makeknown_activates.
   07/84 by Keith Loepere for the new dc_find.
   09/83 by E. N. Kittlitz to ignore per-process 256K switch for dirs.
   02/83 by E. N. Kittlitz for 256K segments.
   02/82 by J. Bongiovanni to eliminate use of FSDCT.
   01/82 by Benson I. Margulies, to give initializer segbusteds.
   08/81 by W. Olin Sibert, for use of validate_entryp by makeknown_activate,
     to fix confusion caused by (you guessed it) the directory rebuild salvager.
   07/81 by J. Bongiovanni for seg_fault call metering
   04/81 by W. Olin Sibert, for ADP SDWs
   02/81 by E. N. Kittlitz for makeknown_activate entry
   04/77 by THVV for damaged switch and messages
   09/76 by R. Bratt to meter per-process seg_faults
   05/76 by Greenberg for signalling out_of_bounds for 0 max length seg
   03/76 by R. Bratt for gtpd, initiated mode, and user deactivate
   03/76 by R. Bratt to fix kst access setting bug
   02/76 by R. Bratt for private LV stuff
   04/75 by E. Stone to put access info in kst
   04/75 by Andre Bensoussan for the new storage system
   04/75 by R. Bratt for new kst (merge by tvv)
   07/74 by Kobziar to check for security out-of-service
   04/74 by Greenberg for 2 cpu cache
   04/74 by Greenberg for full entry bound mechanism
   02/74 by Greenberg for 6180 cache
   12/73 by Kobziar to set bound only on basis of max_length (drop "a" bit requirement to grow page)
   10/73 by Steve Webber to add KLUDGE for hardcore gate entry bounds.
   08/73 by R.B.Snyder to put in check for illegal segfaults.


   seg_fault: Handles all missing segment faults in the system. The segment
   must alreay have a KST entry and seg_fault will as necessary do the following:
   1. Create an AST entry.
   2. Compute the access for the SDW.
   3. Compute the bounds field for the SDW.
   4. Create the trailer for the segment.

   USAGE: call seg_fault(mc_ptr);

   1. machine_conditions_ptr pointer		an ITS pointer to the machine conditions
   in which the missing segment fault occured.


   makeknown_activate: Called by makeknown_ to activate and connect directories
   rather than deferring this until first reference (as is the case with
   non-directory segments).  This allows activation errors such as
   connection failure to be indicated by status code, causing a
   makeknown_ failure, rather than eventually causing a crawlout due
   to segment fault error.

   Currently makeknown_ is the only caller of this entrypoint.  Should other
   procedures need to call it in the future, they must meet the following
   requirements:
   
      The caller must have called sum$getbranch or sum$getbranch_root_my to 
      obtain a pointer to the directory entry corresponding to the segment
      (identified by a_kstep) to be activated.  This will lock the directory
      and validate that a_kstep->kste.entryp properly points to the directory
      entry for the segment.  The directory must remain locked until seg_fault
      returns, since seg_fault used kste.entryp.  If the directory were
      unlocked, another processor could move or delete the directory entry out
      from under seg_fault.

   USAGE: call seg_fault$makeknown_activate (a_kstep, a_code);

   1. a_kstep pointer to KST entry (input)
   2. a_code status error code (output)
   */

/* Parameters */

dcl  a_code			fixed bin (35) parameter;
dcl  a_kstep			pointer parameter;
dcl  a_mcptr			pointer parameter;

/* Variables */

dcl  activated_sw			bit (1) aligned;
dcl  audit_eventflags		bit (36) aligned;
dcl  branch_entrypt_bound		bit (14);
dcl  branch_entrypt_sw		bit (1);
dcl  code				fixed bin (35);
dcl  esw				fixed bin;
dcl  lsw				bit (1) aligned;
dcl  lvx				fixed bin (8);
dcl  mode				bit (36) aligned;
dcl  offset			fixed bin (18);
dcl  1 orig_sdwi			aligned like sdw_info automatic;
dcl  pts				fixed bin;
dcl  pw1				fixed bin (17);
dcl  pw2				fixed bin (17);
dcl  ringno			fixed bin;
dcl  sdw_address			fixed bin (26);
dcl  sdw_valid			bit (1) aligned;
dcl  1 sdwi			aligned like sdw_info automatic;
dcl  segno			fixed bin (17);
dcl  segptr			pointer;
dcl  time1			fixed bin (71);
dcl  time2			fixed bin (71);
dcl  tsdw				fixed bin (71);

/* External */

dcl  access_operations_$log_vol_full	bit (36) aligned external static;
dcl  active_all_rings_data$stack_base_segno fixed bin (18) external static;
dcl  dseg$			(0:4095) fixed bin (71) external static;
dcl  error_table_$big_seg		fixed bin (35) external static;
dcl  error_table_$boundviol		fixed bin (35) external static;
dcl  error_table_$log_vol_full	fixed bin (35) external static;
dcl  error_table_$mylock		fixed bin (35) external static;
dcl  error_table_$oosw		fixed bin (35) external static;
dcl  error_table_$seg_busted		fixed bin (35) external static;
dcl  error_table_$seg_deleted		fixed bin (35) external static;
dcl  pds$access_authorization		bit (72) aligned ext;
dcl  pds$dstep			bit (18) external static;
dcl  pds$segment_faults		fixed bin (35) external static;
dcl  pds$stacks			(0:7) ptr external static;
dcl  pvt$root_lvid			bit (36) aligned external static;
dcl  sst$cpu_sf_time		fixed bin (71) external static;
dcl  sst$makeknown_activations	fixed bin (35) external static;
dcl  sst$pts			(0:3) fixed bin external static;
dcl  sst$root_astep			pointer external static;
dcl  sst$tfreep			pointer external static;
dcl  sst$total_sf_pf		fixed bin (35) external static;
dcl  sst$total_sf			fixed bin (35) external static;
dcl  sst$seg_fault_calls		fixed bin (35) external static;
dcl  sys_info$seg_size_256K		fixed bin (19) external static;

/* Entries */

dcl  access_audit_$log_general	entry (char (*), fixed bin, bit (36) aligned, bit (36) aligned, char (*), fixed bin (35), ptr, fixed bin (18), char (*));
dcl  activate$activate_long		entry (ptr, bit (1) aligned, fixed bin (35)) returns (ptr);
dcl  get_kstep			entry (fixed bin (17), ptr, fixed bin (35));
dcl  get_ptrs_$given_astep		entry (pointer) returns (fixed bin (71));
dcl  level$get			entry () returns (fixed bin);
dcl  lock$dir_unlock		entry (pointer);
dcl  lock$lock_ast			entry;
dcl  lock$unlock_ast		entry;
dcl  logical_volume_manager$lvtep	entry (bit (36) aligned, ptr, fixed bin (35));
dcl  makestack			entry (fixed bin);
dcl  page$enter_data		entry (fixed bin (17), fixed bin);
dcl  private_logical_volume$lvx	entry (bit (36) aligned, fixed bin (8), fixed bin (35));
dcl  sdw_util_$construct		entry (pointer, pointer);
dcl  sdw_util_$dissect		entry (pointer, pointer);
dcl  sdw_util_$get_address		entry (pointer, fixed bin (26));
dcl  sdw_util_$get_valid		entry (pointer, bit (1) aligned);
dcl  segment_mover			entry (fixed bin (18), ptr, ptr, fixed bin, fixed bin (35));
dcl  setfaults$cache		entry (pointer, bit (1) aligned);
dcl  sum$getbranch_root_my		entry (pointer, bit (36) aligned, pointer, fixed bin (35));
dcl  syserr			entry options (variable);
dcl  thread$lin			entry (pointer, bit (18)); /* Requires bit (18) unal in upper halfword only */
dcl  usage_values			entry (fixed bin (17), fixed bin (71));

/* Constants */

dcl  FAULT			fixed bin static internal options (constant) init (0);
dcl  MAKEKNOWN			fixed bin static internal options (constant) init (1);

/* Miscelaneous */

dcl  (addr, baseptr, bin, binary, bit, min, null, ptr, rel, string, substr) builtin;
%page;

/* set initial pointer values */

	call usage_values (pw1, time1);		/* start metering of seg faults */
	esw = FAULT;
	code = 0;
	kstp = pds$kstp;
	mcp = a_mcptr;
	scup = addr (mc.scu (0));
	mc.errcode = 0;
	ringno = bin (scu.ppr.prr, 3);


/* NOW FIND OUT THE SEGMENT NUMBER OF THE FAULTING SEGMENT - IF THE RESTART BIT IN THE SCU
   DATA IS "ON", THE FAULTING SDW IS FOR THE PROCEDURE SEGMENT AND HENCE PSR SHOULD BE USED -
   OTHERWISE, TSR SHOULD BE USED */

	if scu.cu.if then segno = bin (scu.ppr.psr, 15);
	else segno = bin (scu.tpr.tsr, 15);

	call sdw_util_$get_valid (addr (dseg$ (segno)), sdw_valid);
	if sdw_valid then do;			/* Fault is a fraud */
	     call syserr (0, "seg_fault: illegal segfault on cpu ^a",
		substr ("ABCDEFGH", bin (scu.cpu_no, 3) + 1, 1)); /* log it and maybe crash */
	     return;				/* rcu the data and try again */
	end;

	call page$enter_data (segno, (seg_fault_start));	/* enter start of seg_fault in trace */

	offset = bin (scu.ca, 18);			/* get computed address */


/* CHECK FOR FAULT ON STACK SEGMENT */

	if segno >= active_all_rings_data$stack_base_segno then
	     if segno <= active_all_rings_data$stack_base_segno + 7 then
		if pds$stacks (segno - active_all_rings_data$stack_base_segno) = null then do;
		     call makestack (segno - active_all_rings_data$stack_base_segno); /* Will cause recursive segfault on stack */
		     go to finish;
		end;


/* GET KST ENTRY POINTER */

	segptr = baseptr (segno);			/* make a seg pointer */
	call get_kstep (segno, kstep, code);
	if code ^= 0 then go to err;

/* GET THE ASTE POINTER - IF IT IS THE ROOT, IT IS ALWAYS ACTIVE AND ITS ASTE POINTER IS IN THE SST -
   IF IT IS NOT THE ROOT, ONE HAS TO FIND THE BRANCH, LOCK THE PARENT AND GET AN ASTE FOR THE SEGMENT IF IT
   DOES NOT HAVE ONE ALREADY. */


COMMON:
	if kste.uid = (36)"1"b then do;		/* is this the root */

/* ROOT */

	     lsw = "0"b;				/* we won't lock the parent */
	     call lock$lock_ast;
	     if code ^= 0 then go to err;
	     astep = sst$root_astep;			/* this is easy */
	end;

/* NOT THE ROOT */

	else do;
	     if esw = MAKEKNOWN then lsw = "0"b;	/* guaranteed to be a locked directory */

	     else do;				/* normal seg_fault */

/* sum must be called here, not in dc_find.  This is because sum may take a
(recursive) seg_fault on the parent directory.  dc_find has too big a stack
frame to allow it to come into play in these recursive seg_fault occurences. */

		lsw = "0"b;
		call sum$getbranch_root_my (segptr, "0"b, ep, code);
		if code = 0 then lsw = "1"b;
		else if code = error_table_$mylock then code = 0;
		else if code = error_table_$seg_deleted then do;
		     dp, ep = null;
		     go to seg_audit;
		end;
		else go to err;
		dp = ptr (ep, 0);

/* Parent is guaranteed to be in service if we got this far.
   Make sure the entry is still in service. */

		if entry.security_oosw then
		     if ^addr (pds$access_authorization) -> aim_template.privileges.soos then do;
			code = error_table_$oosw;
			go to err1;
		     end;

		if ^entry.dirsw then do;		/* compute access (dirs are special cased later) */
seg_audit:	     call dc_find$seg_fault (kstep, ep, code);
		     if code ^= 0 then go to err1;
		end;
	     end;

	     if ^kste.dirsw then do;

/* COPY FROM BRANCH THOSE ITEMS THAT WILL BE NEEDED AFTER AST IS LOCKED
   SO THAT DIRECTORIES ARE NEVER REFERENCED WHILE THE AST IS LOCKED */

		branch_entrypt_bound = entry.entrypt_bound;
		branch_entrypt_sw = entry.entrypt_sw;

	     end;

/* MAKE SURE ITS LOGICALLY MOUNTED FOR THIS PROCESS (NOT NECESSARILY PHYSICALLY MOUNTED)
   TO AVOID PAGE FAULTS ON DIR HEADER AND LVT SEVERAL TESTS ARE MADE WHERE ONE WOULD DO */

	     if ^kste.dirsw then			/* not a dir which would be on RLV and hence public */
		if kste.infcount = 0 then		/* not marked as privately mounted */
		     if (entry.sons_lvid ^= pvt$root_lvid) |
			entry.master_dir then do;	/* cant prove its on RLV and hence public */
						/* oh well, time for the definitive test */
			call logical_volume_manager$lvtep (dir.sons_lvid, lvtep, code);
			if code ^= 0 then goto err1;	/* sorry, no such LV */
			if ^lvte.public then do;	/* LV not public so check for private mount */
			     call private_logical_volume$lvx (dir.sons_lvid, lvx, code);
			     if code ^= 0 then goto err1; /* sorry, not privately mounted */
			     kste.infcount = lvx;	/* remember that it was privately mounted */
			end;
		     end;

	     astep = activate$activate_long (ep, activated_sw, code); /* Returns with AST locked if OK */
	     if code ^= 0 then go to err1;

	     if esw = MAKEKNOWN then			/* meter ? */
		if activated_sw then
		     sst$makeknown_activations = sst$makeknown_activations + 1;
	end;

/* ARE THERE PAGE_CONTROL INDUCED EXCEPTION CONDITIONS ON SEGMENT ? */

	if aste.damaged & ^kste.dirsw then do;
	     code = error_table_$seg_busted;
	     go to err0;
	end;

/* IS THERE A PER-PROCESS SIZE LIMITATION (256K) ? */

	if ^kst.allow_256K_connect & ^kste.dirsw then	/* dir should never be 256K, but don't enforce it here */
	     if bin (aste.msl, 9) * 1024 >= sys_info$seg_size_256K then do;
		code = error_table_$big_seg;
		go to err0;
	     end;

/* MAKE SURE THE REFERENCE IS NOT OUT OF BOUNDS */

	if offset >= bin (aste.msl, 9) * 1024 then do;	/* NEVER for MAKENOWN, remember */
	     code = error_table_$boundviol;
	     mc.resignal = "1"b;			/* New signal code */
	     mc.fcode = bit (bin (out_of_bounds_sct_index, 17), 17);
	     go to err0;
	end;


/* SEE IF SEG MUST BE MOVED TO ANOTHER PV. CALL SEG MOVER IF SO.  
   If this is MAKEKNOWN entry, then makeknown_ will either (horrors) get
   a segment_mover error, or the process will just take a typical seg_fault */

	if aste.pack_ovfl then do;			/* Out of PV */
	     call segment_mover (offset, astep, ep, segno, code);
	     if code = error_table_$log_vol_full then do;
		audit_eventflags = "0"b;
		addr (audit_eventflags) -> audit_event_flags.cc_1_10 = "1"b;
		call access_audit_$log_general ("seg_fault", level$get (), audit_eventflags, access_operations_$log_vol_full, "", code, null, 0, "");
	     end;
	     go to err1;				/* He unlocked the AST. Signal or retry */
						/* as code is or is not 0 */
	end;



/* DOES THE PROCESS ALREADY HAVE A TRAILER FOR THIS SEGMENT */

MAKE_TRAILER:
	pts = sst$pts (bin (aste.ptsi, 3));		/* get page table size actually awarded */

	call sdw_util_$get_address (addr (dseg$ (segno)), sdw_address);
	if sdw_address = 0 then do;			/* Add a trailer if not connected */
	     if rel (sst$tfreep) = ""b then
		call syserr (1, "seg_fault: trailer storage area exhausted");

	     strp = sst$tfreep;			/* Get pointer to first free trailer */
	     if str.fp = "0"b then call syserr (1, "seg_fault: trailer list trap"); /* TRAP */
	     sst$tfreep = ptr (strp, str.fp);		/* (setq tfreep (cdr tfreep)) */
	     str.segno = bit (bin (segno, 18), 18);	/* Fill in the new trailer */
	     str.dstep = pds$dstep;			/* ditto */
	     str.fp, str.bp = "0"b;			/* ditto */
	     call thread$lin (strp, aste.strp);		/* Thread the new trailer in */

	     aste.gtus = aste.gtus & kste.tus;
	     aste.gtms = aste.gtms & kste.tms;
	     aste.explicit_deact_ok = aste.explicit_deact_ok & kste.explicit_deact_ok;
	end;


/* PREPARE A COPY OF THE SDW FOR THIS SEGMENT */

	tsdw = get_ptrs_$given_astep (astep);		/* get sdw for this astep */
	call sdw_util_$dissect (addr (tsdw), addr (sdwi));/* and prepare to modify it appropriately */

	if kste.dirsw then do;

/* DIR */

	     string (sdwi.access) = "1010"b;		/* access in ring 0 RW with rb of 0,0,0 */
	     sdwi.cache = "0"b;			/* directories not allowed in cache due to
						   use of abs-segs at deactivation time */
	end;

/* SEG */

	else do;
	     call sdw_util_$dissect (addr (dseg$ (segno)), addr (orig_sdwi)); /* Get info from the current SDW */
						/* This is where access & rings are stored betweentimes */

/* COMPUTE ACCESS FIELD */

	     string (sdwi.access) = string (orig_sdwi.access);
	     mode = substr (string (orig_sdwi.access), 1, 3);
	     string (sdwi.rings) = string (orig_sdwi.rings);
	     if branch_entrypt_sw then		/* Set the entry bound */
		sdwi.gate_entry_bound = binary (branch_entrypt_bound) + 1;
						/* sdw_info is # of entrypoints, not max offset */

/* COMPUTE ENCACHEABILITY OF SEGMENT - ASTEP IS VALID SINCE AST IS LOCKED */

	     sdwi.cache = "1"b;			/* assume encacheability at first */
						/* This will be ignored on the ADP */
	     if aste.any_access_on then		/* if there is either one SDW or only
						   read-permit SDW's */
		if substr (mode, 3, 1) |		/* and we are adding write access */
		     aste.write_access_on then do;	/* or there is 1 write SDW */
						/* We mut take seg out of cache */
		     call setfaults$cache (astep, "0"b);/* hit cache bits */
		     sdwi.cache = "0"b;		/* we will not encache either */
		     aste.any_access_on = "0"b;	/* inhibit further checks */
		end;
		else ;				/* adding 1 more read-only SDW */
						/* any_access_on is off -
						   could already be out of cache */
	     else if aste.write_access_on then		/* is out of cache */
		sdwi.cache = "0"b;
	     else aste.any_access_on = "1"b;

	     aste.write_access_on = aste.write_access_on | substr (mode, 3, 1);
						/* indicate write access on */
	end;

	sdwi.size = min (pts, bin (aste.msl, 9)) * 1024;	/* set bound */

/* STORE THE COPY OF THE SDW IN THE REAL SDW - UNLOCK THE AST - UNLOCK THE PARENT IF REQUIRED */

	call sdw_util_$construct (addr (dseg$ (segno)), addr (sdwi)); /* Put the SDW back */

err0:	call lock$unlock_ast;

err1:	if lsw then call lock$dir_unlock (dp);		/* Unlock the directory */

err:

	call usage_values (pw2, time2);		/* get final value for seg fault metering */
	sst$cpu_sf_time = sst$cpu_sf_time + time2 - time1;
	sst$total_sf_pf = sst$total_sf_pf + pw2 - pw1;
	sst$total_sf = sst$total_sf + 1;
	pds$segment_faults = pds$segment_faults + 1;
	if esw = MAKEKNOWN then do;
	     sst$seg_fault_calls = sst$seg_fault_calls + 1;
	     a_code = code;
	     return;
	end;

	mc.errcode = code;

finish:	call page$enter_data (segno, (seg_fault_end));	/* enter finish of seg_fault in trace */
	return;
%page;
makeknown_activate: entry (a_kstep, a_code);

	call usage_values (pw1, time1);
	esw = MAKEKNOWN;				/* our humble beginnings */
	kstp = pds$kstp;
	code = 0;
	mcp = null;				/* trap bad reference */
	scup = null;				/* ... */
	ringno = 0;				/* why not ? */
	offset = -1;				/* lower than lowest max seg length */
	kstep = a_kstep;				/* do quick what takes normal entry sooo long */
	ep = kste.entryp;
	dp = ptr (ep, 0);
	segno = kste.segno;
	segptr = baseptr (segno);
	go to COMMON;
%page; %include access_audit_eventflags;
%page; %include aim_template;
%page; %include aste;
%page; %include dc_find_dcls;
%page; %include dir_entry;
%page; %include dir_header;
%page; %include kst;
%page; %include lvt;
%page; %include mc;
%page; %include sdw_info;
%page; %include static_handlers;
%page; %include str;
%page; %include trace_types;
%page;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   seg_fault: illegal segfault on cpu X

   S:	$info

   T:	$run

   M:	The SCU data
   stored by processor X
   indicates that
   a segment fault has occurred
   but the SDW indicated by the SCU data
   has no directed fault indicator.
   $err
   The system attempts to retry the faulting instruction.

   A:	Inform field engineering personnel.
   If this message persists, attempt to delete the CPU.


   Message:
   seg_fault: trailer storage area exhausted

   S:	$crash

   T:	$run

   M:	There are no more free entries available in the system trailer
   segment, str_seg. This may be indicative of software- or hardware-induced
   damage to the SST or str_seg, or may be indicative of a number of
   logged-in processes which is vastly too large. A more likely cause is
   insufficiently large str_seg. The size of the str_seg can be changed
   by the TBLS STR card in the config deck.
   $err
   $crashes

   A:	$recover
   It may be necessary to increase the size of the str_seg by the TBLS STR
   card in the config deck.
   Be sure to get a dump.


   Message:
   seg_fault: trailer list trap

   S:	$crash

   T:	$run

   M:	An attempt was made to
   set sst$tfreep to zero.
   The supervisor checks for this
   situation and crashes here
   when one entry remains in the trailer segment
   in order to trap an elusive bug
   which used to cause "trailer storage area exhausted" crashes
   when the trailer segment was not full.
   $err
   $crashes

   A:	$recover
   Be sure to get a dump.

   END MESSAGE DOCUMENTATION */

     end seg_fault;
