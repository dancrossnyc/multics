/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

full_command_processor_: proc(input_linep, input_linel, code);

/* initially coded in December 1969 by V Voydock */
/* modified May 1970 by R. Frankston for Limited Service System */
/* Modified to use PL/I quoting convention, call com_err_ on errors and not expect lines
   to end in new line character in June 1971 by V. Voydock */
/* Modified in November 1971 by V. Voydock to use error_table codes, treat the new line character as
   the equivalent of the ";" and to fix a few minor bugs */

/* Modified in May 1972 by V. Voydock as part of fast command loop */

/* Modified 25 Aug 1973 by Richard H. Gumpertz to make "a ([x])" work where x returns "" */



dcl	(input_linel, 		/* length of input line passed to command processor */
	 temp_com_linel, 		/* length of temporary command line (if it is nec. to build it) */
	 inl, 			/* internal copy of input line length (changed during processing) */
	 i, 			/* Temporary variable */
	 j, 			/*    "            "    */
	 m, 			/*    "	         "    */
	 first(0:1) based(fp), 	/* Index (in command line) of first char of ith argument */
	 len(0:1) based(lp), 	/* Length of ith argument */
	 actual_first(0:26), 	/* vble "first" is based on this if less than 25 args in line */
	 actual_len(0:26), 		/* vble "len" is based on this if less than 25 args in line */
	 arg_limit, 		/* max number of args before more space must be allocated */
	 whereami, 		/* index of first free character in command line */
	 lng, 			/* length of atom returned by special syntactic construct handlers */
	 inl_left, 		/* number of chars left to be scanned in input line */
	 startno, 			/* index in input line  of first char of atom being processed */
	 argno, 			/* number of arguments to be passed to command */
	 atoml, 			/* space left in temp command line for returned atom */
	 max_com_line int static init(132), 	/* maximum size of expanded command line */
	 end_iter			/* 0 if no iteration sets have been found so far
				   1 if end of an iteration set has been reached
				   2 if iteration set is being processed, and end has not been reached */
		   ) fixed bin aligned;

dcl      (code, 
	error_table_$unbalanced_parentheses external, 
	error_table_$unbalanced_brackets external, 
	error_table_$mismatched_iter external
		) fixed bin(35) aligned;

dcl	(cp_data_$under_lss external, 		/* true if running under limited service system */
	 space_not_allocated init("1"b), 	/* true if space for expanded com line not yet allocated */
	 processing_active_string, 		/* true if we are processing an active string */
	 ignore_brack, 			/* true if we are not to treat brackets as special chars */
	 first_parenthesis init("1"b), 	/* true until first parenthesis is seen */
	 semicolon_seen init("0"b), 		/* true if semicolon has been seen while processing com line */
	 message_not_printed int static, 	/* true if error message has not yet been printed */
	 no_work_done init("1"b), 		/* true if no non-null command has been yet found in line */
	 in_iteration_set, 			/* true if processing an iteration set */
	 argspace_grown init("0"b), 		/* true if space had to be allocated for array "first" */
	 special_char_seen			/* true if special command lang char has been seen in command */

			) bit(1) aligned;
/*  */
dcl	(input_linep, 		/* ptr to input line to be processed */
	 inp, 			/* ptr to beg of command in input line or temp command line */
	 inlp, 			/* ptr to beginning of command in original input line */
	 fp init(addr(actual_first(0))), 	/* ptr to space on which "first" array is based */
	 lp init(addr(actual_len(0))), 	/* ptr to space on which "len" array is based */
	 tfp, 			/* temp copy of fp used by allocation procedure */
	 tlp, 			/* temp copy of lp used by allocation procedure */
	 atomp, 			/* ptr to "atom" to be processed by spec syntactic subroutines */
	 temp_com_linep, 		/* ptr to simple command line being built */
	 startp, 			/* ptr to beginning of spec syntactic construct */
	 cp_data_$command_table_ptr external		/* ptr to command table used with limited command systems */
				 ) ptr aligned;

dcl	com_line char(temp_com_linel) based(temp_com_linep) aligned,    /* input line is copied here piece by piece 
						      if '"', '(', or '[' are found in it */
	atom char(atoml) based(atomp), 
	input_line char(inl+1) based(inp) aligned, 	/* input line to be processed */
	nl char(1) aligned int static init("
"), 							/* New line character */
	nch char(1) aligned;     			/* character currently being examined */

dcl	cu_$gen_call ext entry(ptr, ptr), 
	cu_$grow_stack_frame ext entry(fixed bin, ptr, fixed bin(35)), 
	cu_$shrink_stack_frame ext entry(ptr, fixed bin(35)), 
	find_command_ ext entry(ptr, fixed bin, ptr, fixed bin(35)), 
	transform_command_ ext entry(ptr, fixed bin, ptr, fixed bin(35)), 
	proc_parens_ ext entry(ptr, fixed bin, fixed bin, ptr, fixed bin, fixed bin, bit(1) aligned, fixed bin(35)), 
	proc_quotes_ ext entry(ptr, fixed bin, fixed bin, ptr, fixed bin, fixed bin, bit(1) aligned, fixed bin(35)), 
	(proc_brackets_$nested_brackets, 
	 proc_brackets_)   ext entry(ptr, fixed bin, fixed bin, fixed bin, char(*) var, char(*) var, fixed bin(35)), 
	com_err_ ext entry options(variable);

dcl	(addr, addrel, bin, bit, divide, mod, null, search, string, substr) builtin;

		/* structure to scan input line */
dcl	1 x based(inp) aligned, 
	  2 ch(0:31) char(1) unaligned;

dcl	(cleanup, command_abort_) condition;
/**/
	/* ***********************************START OF SIMPLE COMMAND LOOP*********************************** */


	processing_active_string, ignore_brack = "0"b;

START:	message_not_printed = "1"b;
	temp_com_linel = input_linel;
	inl = input_linel-1;
	inp, inlp = input_linep;
	
NEXT_COMMAND:
	
		/* If called to evaluate active function, lower arg_limit to allow for return arg */
	if processing_active_string then arg_limit = 25;
	else arg_limit = 26;

NEXT_ITER:
	len(0), whereami, end_iter, code, startno = 0;
	in_iteration_set, special_char_seen = "0"b;
	argno = -1;
	
NEXT_ATOM:	/* Skip leading blanks */
	do i = startno to inl while(ch(i) = " "); end;
	
	j = i;	/* Set j = i in case we have line of the form "command;  ;"  */
	
		/* Check to see if we have reached the end of the command line or the
		   end of the command (the part ended by ";") and then check to see if
		   we must allocate more space for the first and len arrays */
	if i>inl then go to SCAN_DONE;
	nch = ch(i);		/* Pick up next character */
	if nch = nl then nch = ";";	/* nl < = > ;  */
	if nch = ";" then  do; semicolon_seen = "1"b; go to SCAN_DONE; end;
	argno = argno+1;
	if argno>arg_limit then do; tfp, tlp = null; on condition(cleanup) call cleanup_proc; call grow_space; end;

		/* Set index of first character in the atom.  If this is a simple command
		   this index is relative to the original input line, otherwise it is
		   relative to the temporary command line being built */
	if special_char_seen then first(argno) = whereami;
	else first(argno) = i;
/*  */
		/* Scan for next break or special character */

	if ignore_brack then j = search(substr(input_line,i+1,inl-i+1)," ;()""
");
		else j = search(substr(input_line,i+1,inl-i+1)," ;()[]""
");
	if j=0 then do;
	     j = inl+1;
	     go to END_OF_ATOM_FOUND;
	end;
	j = j+i-1;
	     nch = ch(j);
	     if nch = " " then  do;  startno = j+1;  go to END_OF_ATOM_FOUND;  end;
	     if nch = nl then nch = ";";			/* Treat nl as equivalent to ";" */
	     if nch = ";" then  do; semicolon_seen = "1"b; go to END_OF_ATOM_FOUND; end;
	     if nch = "(" then go to MORE_COMPLICATED;
	     if nch = """" then go to MORE_COMPLICATED;
	     if nch = "[" then go to CALL_PROC_BRACKETS;
	     if nch = ")" then do; code = error_table_$unbalanced_parentheses; go to PRINT_MESSAGE; end;
  	     if nch = "]" then do; code = error_table_$unbalanced_brackets; go to PRINT_MESSAGE; end;

END_OF_ATOM_FOUND:
	
		/* Save length of current atom */
	len(argno) = j-i;

		/* If one of the special command language syntactic characters has been seen then
		   copy the atom from the input line into the temporary command line being built */
	if special_char_seen then
	     do;
	     substr(com_line, whereami+1, len(argno)) = substr(input_line, i+1, len(argno));
	     whereami = whereami+len(argno);
	     end;

	if nch = " " then go to NEXT_ATOM;


SCAN_DONE:
	
		/* We have finished parsing a command.  Now test for a null command; that is a line
		   consisting of all blanks, or a portion of a line of the form ";  ;" etc */
	if len(0) = 0 then go to CHECK_FOR_ANOTHER_COMMAND;
	
		/* Test for end of iteration group */
	if end_iter = 1 then go to CHECK_FOR_ANOTHER_COMMAND;
	
		/* Indicate that a non-null command line has been typed */
	no_work_done = "0"b;
	
		/* If calling active function, set variables so that a varying
		   string return argument will be added to end of argument list */
	if processing_active_string then
	     do;
	     argno = argno+1;
	     len(argno), first(argno) = 1;
	     end;

		/* If a special char was seen, change inp to point to the temporary command line */
	if special_char_seen then  inp = temp_com_linep;
/*  */
		/* Enter begin block which allocates space for arg list. Set up arg list and call command */
	begin;

dcl	1 argument_list aligned, 
	  2 dum_ptr ptr,      /* dummy ptr used to force arg list to even word boundary */
	  2 twice_no_of_args bit(18) unaligned init(bit(bin(argno*2, 18), 18)), 
	  2 tag bit(18) initial("000000000000000100"b) unaligned, 
	  2 twice_no_of_descriptors bit(18) unaligned init(bit(bin(argno*2, 18), 18)), 
	  2 pad bit(18) initial("0"b) unaligned, 
	  2 argument_ptr(argno) ptr, 
	  2 descriptor_ptr(argno) ptr;
	 
dcl	1 descriptor(argno) aligned, 
	  2 flag bit(1) unaligned,
	  2 type bit(6) unaligned,
	  2 packed bit(1) unaligned,
	  2 ndims bit(4) unaligned,
	  2 size bit(24) unaligned;

dcl	(command_name_ptr initial(addr(ch(first(0)))), 		/* ptr to name of command to be called */
	 command_entry_ptr					/* ptr to entry pt of command to be called */
				) ptr aligned;

		/* Build argument list */
	do i = 1 to argno;
	     argument_ptr(i) = addr(ch(first(i)));
	     descriptor_ptr(i) = addr(descriptor(i));
	     string(descriptor(i)) = "1"b;		/* init */
	     descriptor(i).size = bit(bin(len(i), 24));
	     descriptor(i).type = bit(bin(21, 6));      /* indicates non-varying string */
	     descriptor(i).packed = "1"b;
	end;
	
		/* If calling active fnc, add varying str return arg to end of arg list */
	if processing_active_string then
	     do;
	     workspace = "";		/* default return value is "" (in case act fnc does not return value) */
	     argument_ptr(argno) = addrel(addr(workspace), 1);
	     descriptor(argno).flag = "1"b;
	     descriptor(argno).ndims = "0000"b;
	     descriptor(argno).size = bit(bin(max_com_line, 24));
	     descriptor(argno).type = bit(bin(22, 6));     /* indicates varying string */
	     descriptor(argno).packed = "1"b;
	     end;
	
		/* If running Limited Service System see if this is a legal command name */
	if cp_data_$under_lss then
	     do;
	     call transform_command_(command_name_ptr, len(0), cp_data_$command_table_ptr, code);
	     if code ^= 0 then return;
	     end;

		/* Get pointer to command whose name is pointed to by command_name_ptr */
	call find_command_(command_name_ptr, len(0), command_entry_ptr, code);
	if code ^= 0 then  do; message_not_printed = "0"b; return; end;

		/* watch for aborted command */
	on condition(command_abort_) go to ABORT_COMMAND;
	
		/* Generate a call to the command */
	call cu_$gen_call(command_entry_ptr, addr(twice_no_of_args));
ABORT_COMMAND:
	revert condition(command_abort_);
	end;
/*  */
		/* Build value to be returned (if any) */
	if processing_active_string then  ret_string = ret_string||workspace;

		/* If we are in an iteration set go process next member of set */
	if in_iteration_set then  do; inp = inlp; go to NEXT_ITER; end;
	
CHECK_FOR_ANOTHER_COMMAND:
	
		/* If we had to allocate space for the first and len arrays, free it up */
	if argspace_grown then
	     do;
	     free fp->first;
	     free lp->len;
	     fp = addr(actual_first(0));
	     lp = addr(actual_len(0));
	     revert condition(cleanup);
	     argspace_grown = "0"b;
	     end;
	
		/* If this is the end of the input, check for null command line and return */
	if nch ^= ";" then  do; if no_work_done then code = 100; return; end;

		/* We must now process the next command in the input line.  We must change inp to point
		   to the first character after the ";".  Since inp must point to a word boundary, we
		   must if necessary, blank out the ";" and characters before it and adjust inp */
	nch = " ";
	inp = inlp;
	j = j+1;
	i = mod(j, 4);
	if i>0 then substr(input_line, j-i+1, i) = " ";
	inp = addr(ch(j-i));
	inlp = inp;
	inl = inl-j+i;

		/* If we have had to use a temporary command line, deallocate the space */
	if ^space_not_allocated then
	     do;
	     call cu_$shrink_stack_frame(temp_com_linep, code);
	     space_not_allocated = "1"b;
	     end;

		/* Since the input line is shorter, adjust the variable which keeps track of how big a space
		   we must allocate if it is necessary to grow a temporary command line again */
	temp_com_linel = inl+1;
	go to NEXT_COMMAND;


	/* ***********************************END OF SIMPLE COMMAND LOOP*********************************** */
/*  */
	
		/* The following code is only executed if an error occurs or if one of the
		     special command language characters is seen */
MORE_COMPLICATED:
	
	m = j-i;
	
	if ^special_char_seen then
	     do;
	     if space_not_allocated then
	          do;
		/* allocate stack space for temporary command line */
	          m = divide(temp_com_linel, 4, 17, 0)+1;
	          call cu_$grow_stack_frame(m, temp_com_linep, code);
		if code ^= 0 then go to PRINT_MESSAGE;
	          space_not_allocated = "0"b;
	          end;
	     	/* copy constant part of command line into temporary */
	     if j>0 then substr(com_line, 1, j) = substr(input_line, 1, j);
	     whereami = j;     /* index of first free character in command line */
	     m = 0;
	     special_char_seen = "1"b;
	     end;
	
AGAIN:
	
		/* Get ptr to beginning of free space in temporary command line */
	atomp = addr(temp_com_linep->x.ch(whereami));
	
		/* Copy part of atom before "(" if any */
	if m>0 then
	     do;
	     substr(atom, 1, m) = substr(input_line, i+1, m);
	     whereami = whereami+m;
	     m = 0;
	     go to AGAIN;
	     end;
	
	atoml = max_com_line-whereami+1;      /* maximum allowable size of returned atom */
	startp = addr(ch(j));      /* ptr to beginning of special construction */
	inl_left = inl-j;      /* number of characters left in input line */
	
		/* Call appropriate special syntactic construct handler */
	if nch = "(" then
	     do;
	     in_iteration_set = "1"b;
	     call proc_parens_(startp, inl_left, startno, atomp, atoml, lng, first_parenthesis, code);
	     first_parenthesis = "0"b;
	     end;
	else  
	if nch = """" then call proc_quotes_(startp, inl_left, startno, atomp, atoml, lng, first_parenthesis, code);
/*  */
		/* Check for various special conditions.  The variable "end_iter" describes the
		   state of iteration sets in this command line.  If code = 0 and we were
		   processing parens (i.e. nch = "(") then we must check whether there a previous iteration
		   set in this command line was exhausted (e.g. an line of the form "f (a b) (c d e)"  )
		   This is an error and is indicated by end_iter = 1. Next, if the status code = 101 then
		   a quoted string has an iteration set as part of its tail (e. g. a line of the
		   form "f "abd"(de qwer)". If code = 102 a bracket was seen and we must invoke the bracket
		   processor.  If code = 103 then we have just found an exhausted iteration set.  If a previous
		   iteration set in the command line was not exhausted, indicated by end_iter = 2 this is an
		   error (e.g. a line of the form "f (a b c) (d e)"    )    */
	if code = 0 then
	     if nch = "(" then
		if end_iter = 1 then go to MISMATCHED_ITER;
		else end_iter = 2;
	     else;
	else
	if code = 101 then  do; code = 0;  in_iteration_set = "1"b; end;     /* case "abc"(def ghj)     */
	else
	if code = 102 then do; j = j+startno; go to CALL_PROC_BRACKETS; end;  /* "[" seen */
	else
	if code = 103 then do;
	     if end_iter = 2 then go to MISMATCHED_ITER;
	     end_iter = 1; code = 0;
	     goto UPDATE_STARTNO;
	end;
	else
	     do;
PRINT_MESSAGE: call com_err_(code, "command_processor_");
	     message_not_printed = "0"b;
	     return;
	     end;
	


		/* If no error has occured in the processing of this special
		   syntactic construct, then go process the next atom */
	len(argno) = lng+j-i;
	whereami = whereami+lng;
UPDATE_STARTNO:
	startno = startno+j;
	go to NEXT_ATOM;


MISMATCHED_ITER:

	code = error_table_$mismatched_iter;
	go to PRINT_MESSAGE;

/**/
			/* BRACKETS SEEN IN COMMAND LINE */

CALL_PROC_BRACKETS:
	
		/* Allocate space for returned string if necessary.  (Allocation is necessary
		     if this is the first time we are calling proc_brackets_ or if we
		     are processing a line of the form "ff [f x; g [h z]]".  In the latter case we need
		     the space for the value returned by the fnc h, since otherwise it would
		     "overwrite" the value already returned by the fnc f)     */
	if ^processing_active_string then 
GET_SPACE:     begin;
	     dcl  (return_string, working_space) char(max_com_line) var init("");
	     if ^processing_active_string then
		call proc_brackets_(inp, inl, j, max_com_line, return_string, working_space, code);
	     else
	          do;      /* case:  "ff [f x; g [h z]]"     */
	          call proc_brackets_$nested_brackets(inp, inl, j, max_com_line, return_string, working_space, code);
			/* Concatenate the value returned by the fnc g applied to "[h z]" with
			   the value already returned by f  */
	          ret_string = ret_string||return_string;
	          end;
	     end;
	else      
	if semicolon_seen then go to GET_SPACE;
	else call proc_brackets_$nested_brackets(inp, inl, j, max_com_line, ret_string, workspace, code);

		/* Command line with brackets has been processed.  Check for nonzero error code. If so, 
		   print error message and return. Otherwise, go process next command in input line */
	if code  ^=  0
	then if code  ^=  100
	     then if message_not_printed
		then go to PRINT_MESSAGE;
	return;
/*  */
		/* Internal procedure to allocate space for information about the arguments
		   (namely the first and len arrays).  It frees up the current arrays, if they were allocated */
grow_space: proc;

dcl	system_area area based(area_ptr);

dcl	old_arg_limit fixed bin aligned;

dcl	area_ptr internal static ptr aligned initial(null);

dcl	space(0:arg_limit) fixed bin aligned based;

dcl	get_system_free_area_ ext entry(ptr);

		/* Get pointer to the system free area in this ring, if we have not already done so */
	if area_ptr = null then call get_system_free_area_(area_ptr);

		/* Save current size of arg info.  Increase size (doubling each time called) */
	old_arg_limit = arg_limit;
	arg_limit = arg_limit+2*arg_limit;

		/* Allocate space for more arg info */
	argspace_grown = "1"b;
	allocate space in (system_area) set (tfp);
	allocate space in (system_area) set (tlp);

		/* Copy existing arg info into the newly allocated space */
	arg_limit = old_arg_limit;
	tfp->space = fp->space;
	tlp->space = lp->space;

		/* If current arg info was allocated (i. e. not in stack), free it up */
	if fp ^= addr(actual_first(0)) then free fp->space;
	if lp ^= addr(actual_len(0)) then free lp->space;

		/* Restore arg_limit. If called while evaluating active function, lower arg_limit
		   to allow for return argument.  Set pointers, null out tfp and tlp so
		   the cleanup procedure will not get confused if a certain race condition occurs */
	arg_limit = arg_limit+2*arg_limit;
	if processing_active_string then arg_limit = arg_limit-1;
	fp = tfp;
	lp = tlp;
	tfp, tlp = null;
	return;

end grow_space;
/*  */
		/* Cleanup procedure which frees any allocated arg info. */
cleanup_proc: proc;

		/* If we were interrupted after allocation of new space and before fp and/or lp
		   were set, free up appropriate space */
	if tfp ^= null then if tfp ^= fp then free tfp->first;
	if tlp ^= null then if tlp ^= lp then free tlp->first;

		/* if fp and lp point to allocated space, free it up */
	if fp ^= null then if fp ^= addr(actual_first(0)) then free fp->first;
	if lp ^= null then if lp ^= addr(actual_len(0)) then free lp->len;

end cleanup_proc;
/*  */
/**********************************************************************************************/
		/* Entry point called by proc_brackets_ and proc_brackets_$nested_brackets
		   to invoke active functions and pass back their return strings */
return_val: entry(input_linep, input_linel, iflag, ret_string, workspace, code);       

dcl	iflag bit(1) aligned;		/* indicates whether or not brackets should be ignored */

dcl	(ret_string, 			/* ret arg to be passed back to proc_brackets */
	 workspace			/* space in which to store intermediate results */
		   ) char(*) var;

	processing_active_string = "1"b;  ignore_brack = iflag;  go to START;
	


/**********************************************************************************************/
		/* This entry is called by proc_brackets after it has built a "bracketless" command
		   line, and wants to execute the result */
ignore_brackets: entry(input_linep, input_linel, iflag, code);

	processing_active_string = "0"b;  ignore_brack = iflag;  go to START;
	
	
/**********************************************************************************************/
		/* Entry point to set maximum command line size */
set_line: entry(newsize);

dcl	newsize fixed bin;
	
	max_com_line = newsize;
	return;
	
/**********************************************************************************************/
		/* Entry point to get the current maximum command line size */
get_line: entry(newsize);
	
	newsize = max_com_line;
	
	return;
	
/**********************************************************************************************/
		/* Entry point to cause command processor to check all commands
		   against a given table before invoking them.  Used by the Limited Service
		   System and various other limited command systems */
setup_lss: entry(table_ptr);

dcl	table_ptr ptr;

	cp_data_$under_lss = "1"b;
	cp_data_$command_table_ptr = table_ptr;
	return;
	
/**********************************************************************************************/
		/* Entry point to leave "lss mode".  Left in for debugging purposes */
reset_lss: entry;

	cp_data_$under_lss = "0"b;
	return;
	
	
end full_command_processor_;
