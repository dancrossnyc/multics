/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

proc_quotes_: proc(a_inp,inl,last_char_scanned,a_atomp,spaceleft,atomlng,first_parenthesis,code);

/* initially coded in January 1970 by V. Voydock */
/* Modified to use PL/I quoting convention in June 1971 by V. Voydock */
/* EIS version Steve Herbst 3/4/74 */

dcl	(inl,
	 startno,
	 i,j,k,
	 last_char_scanned,
	 length_of_quoted_string initial(0),
	 length_of_tail,
	 lng,
	 spaceleft,
	 atomlng
		) fixed bin;

dcl      (code,
	error_table_$unbalanced_quotes external,
	error_table_$unbalanced_brackets external
					) fixed bin(35);

dcl	first_parenthesis bit(1) aligned;

dcl	(inp initial(a_inp),
	 atomp initial(a_atomp),
	 a_inp,
	 a_atomp
			) ptr;

dcl	nch char(1) aligned,
	atom char(spaceleft) based(atomp),
	input_line char(inl+1) based(inp);

dcl	special char(8) init(" ;()""
[]");

dcl	proc_parens_ ext entry(ptr,fixed bin,fixed bin,ptr,fixed bin,fixed bin,bit(1) aligned,fixed bin(35));


dcl	(addr, index, search, substr) builtin;

dcl	ich(0:31) char(1) unaligned based(inp),
	ach(0:31) char(1) unaligned based(atomp);
	
/*  */
	last_char_scanned,code=0;
	
		/* Look for a second quote. If it is followed immediately by another quote,
		   keep on going. Quoted string gets copied into the atom being built. */
LOOP:	j = last_char_scanned;
   again:	i = j;
	j = index(substr(input_line,i+2,inl-i),"""");
	if j=0 then go to UNBALANCED;
	j = j+i;
	if j=inl then do; nch = " ";  go to END_QUOTE; end;
	if ich(j+1)="""" then do;
	     substr(atom,length_of_quoted_string+1,j-i) = substr(input_line,i+2,j-i);
	     length_of_quoted_string = length_of_quoted_string + j - i;
	     j = j+1;
	     go to again;
	end;
	else go to END_QUOTE;
	
UNBALANCED: code = error_table_$unbalanced_quotes;
	  return;
	
END_QUOTE:k = j-i-1;
	if k>0 then substr(atom,length_of_quoted_string+1,k) = substr(input_line,i+2,k);
	length_of_quoted_string = length_of_quoted_string + k;

		/* Now see if anything is attached to quoted string  (e. g. "abc"(def ghj)     ) */
	last_char_scanned = search(substr(input_line,j+2,inl-j),special);
	if last_char_scanned=0 then do;
	     last_char_scanned = inl+1;
	     nch = " ";
	     go to PROC_TAIL;
	end;
	last_char_scanned = last_char_scanned + j;
	nch=ich(last_char_scanned);
	i = index(special,nch);
	if i<7 then go to PROC_TAIL;
	if i=7 then do; code = 102; return; end;
	else do; code = error_table_$unbalanced_brackets; return; end;
	
PROC_TAIL:
		/* Compute length of "tail". Then copy it into the atom being built */
	length_of_tail=last_char_scanned-j-1;
	if length_of_tail=0 then go to CHECK;
	substr(atom,length_of_quoted_string+1,length_of_tail)=substr(input_line,j+2,length_of_tail);
	
		/* If paren terminates tail, call paren handler, if quote, loop back, else return */
CHECK:	if nch^="(" then
	     if nch^="""" then go to RETURN;
	     else  do; length_of_quoted_string=length_of_quoted_string+length_of_tail; go to LOOP; end;
	
		/* Call parenthesis handler to take care of rest of atom */
	call proc_parens_(addr(ich(last_char_scanned)),inl-last_char_scanned,startno,
		        addr(ach(length_of_quoted_string+length_of_tail)),
		        spaceleft-length_of_quoted_string-length_of_tail,lng,first_parenthesis,code);

		/* Bump indices, indicate that we are processing iteration set and return */
	length_of_tail=length_of_tail+lng;
	last_char_scanned=last_char_scanned+startno;
	if code=0 then code=101;
RETURN:	atomlng=length_of_quoted_string+length_of_tail;
	return;
	
end proc_quotes_;
