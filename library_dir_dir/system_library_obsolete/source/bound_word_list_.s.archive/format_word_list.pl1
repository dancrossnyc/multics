/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

format_word_list: fwl: proc;

/* Written by Jerry Stern */
/* modified by J. Stern 9/10/75 to add "-cols" option */
/* modified by J. Stern 12/3/76 to handle namedups */
/* modified by J. Stern 7/30/76 to fix bug (MCR 2088) */


dcl (seg_output, replace, got_pname) bit (1) aligned init ("0"b);
dcl (j, fi, ti) fixed bin (21);
dcl (ap, p, tp, np, xp) ptr init (null);
dcl (i, al) fixed bin;
dcl (wordlen, out_wordlen, printlen) fixed bin;
dcl  elen fixed bin;
dcl (cols, rows) fixed bin;
dcl  max_cols fixed bin;
dcl  last_col_rows fixed bin;
dcl (col_flags, next_col_flags) bit (72) aligned;
dcl  backspace char (1) aligned int static init ("");
dcl  arg char (al) based (ap);
dcl  code fixed bin (35);
dcl  dname char (168);
dcl (ename, oldname) char (32);
dcl  cleanup condition;
dcl  bc fixed bin (24);
dcl (c, r) fixed bin;
dcl  cs char (seglen) based;
dcl  seglen fixed bin (21);
dcl 1 page_array (6, 56),
    2 first fixed bin (21),
    2 len fixed bin unal,
    2 plen fixed bin unal;
dcl  page char (8000) varying;
dcl  nl char (1) aligned int static init ("
");
dcl  nl5 char (5) aligned int static init ("




");
dcl  nlff char (2) int static init ("
");
dcl (addr, index, substr, divide, length, null, addrel, search) builtin;
dcl  cu_$arg_ptr ext entry (fixed bin, ptr, fixed bin) returns (fixed bin (35));
dcl  com_err_ ext entry options (variable);
dcl  hcs_$make_seg ext entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  expand_pathname_ ext entry (char (*), char (*), char (*), fixed bin (35));
dcl  hcs_$initiate_count ext entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35));
dcl  iox_$put_chars entry (ptr, ptr, fixed bin, fixed bin (35));
dcl  cv_dec_check_ ext entry (char (*), fixed bin (35)) returns (fixed bin);
dcl  get_wdir_ ext entry returns (char (168));
dcl  hcs_$chname_seg ext entry (ptr, char (*), char (*), fixed bin (35));
dcl  hcs_$terminate_noname ext entry (ptr, fixed bin (35));
dcl  hcs_$delentry_seg ext entry (ptr, fixed bin (35));
dcl  hcs_$truncate_seg ext entry (ptr, fixed bin (21), fixed bin (35));
dcl  hcs_$set_bc_seg ext entry (ptr, fixed bin (24), fixed bin (35));
dcl  get_line_length_$switch entry (ptr, fixed bin (35)) returns (fixed bin);
dcl  nd_handler_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  error_table_$segnamedup ext fixed bin (35);
dcl  error_table_$namedup ext fixed bin (35);
dcl  error_table_$noarg ext fixed bin (35);
dcl  error_table_$entlong ext fixed bin (35);
dcl  error_table_$zero_length_seg ext fixed bin (35);
dcl  error_table_$inconsistent ext fixed bin (35);
dcl  iox_$user_output ext ptr;



	cols = 0;
	do i = 1 by 1 while (cu_$arg_ptr (i, ap, al) = 0); /* Examine args */
	     if substr (arg, 1, 1) ^= "-" then do;	/* not an option, must be pathname */
		if got_pname then go to badarg;	/* already have pathname => error */
		call expand_pathname_ (arg, dname, ename, code);
		if code ^= 0 then do;
		     call com_err_ (code, "format_word_list", arg);
		     return;
		end;
		got_pname = "1"b;
	     end;
	     else if arg = "-sm" then seg_output = "1"b;	/* "segment" output option */
	     else if arg = "-segment" then seg_output = "1"b;
	     else if arg = "-rp" then replace = "1"b;	/* "replace" option */
	     else if arg = "-replace" then replace = "1"b;
	     else if arg = "-cols" then do;
col_opt:		i = i + 1;			/* next arg is number of cols */
		code = cu_$arg_ptr (i, ap, al);
		if code ^= 0 then do;
		     call com_err_ (code, "format_word_list", "Attempting to get number of columns.");
		     return;
		end;
		cols = cv_dec_check_ (arg, code);	/* convert arg to fixed bin */
		if code ^= 0 then do;
		     call com_err_ (0, "format_word_list", "Non-numeric column specification.  ^a", arg);
		     return;
		end;
		if cols < 1 | cols > 6 then do;
		     call com_err_ (0, "format_word_list", "Number of columns is not between 1 and 6.");
		     return;
		end;
	     end;
	     else if arg = "-columns" then go to col_opt;
	     else do;
badarg:		call com_err_ (0, "format_word_list", "Unrecognized argument: ^a", arg);
		return;
	     end;
	end;
	if ^got_pname then do;			/* no pathname given */
	     code = error_table_$noarg;
gripe:	     call com_err_ (code, "format_word_list");
	     return;
	end;
	if seg_output & replace then do;		/* cannot have both options */
	     code = error_table_$inconsistent;
	     go to gripe;
	end;
	if replace then seg_output = "1"b;		/* let seg_output indicate either option */

	if seg_output then
	     if cols = 0 then cols = 6;		/* set default cols for seg output */
	     else;
	else do;					/* not seg output, check line length */
	     i = get_line_length_$switch (iox_$user_output, code);
	     if code ^= 0 then max_cols = 3;
	     else do;
		max_cols = divide (max (i-32, 0), 20, 17, 0) + 1;
		if max_cols > 6 then max_cols = 6;
		if cols > max_cols then do;
		     call com_err_ (0, "format_word_list", "Line length too small for specified number of columns.");
		     return;
		end;
	     end;
	     if cols = 0 then cols = max_cols;		/* set default for user_output */
	end;

	elen = index (ename, " ");			/* get entry name length */
	if elen = 0 then elen = 33;
	if substr (ename, elen - 3, 3) = ".wl" then elen = elen - 3; /* if suffix already there, shorten name length */
	if elen > 29 then do;			/* not enough room to add "fwl" suffix */
	     call com_err_ (error_table_$entlong, "format_word_list", "^a.fwl", ename);
	     return;
	end;
	substr (ename, elen, 3) = ".wl";		/* add the suffix */

	on cleanup call cleaner;

	call hcs_$initiate_count (dname, ename, "", bc, 0, p, code); /* Get ptr and length for word list seg */
	if p = null then go to err_exit;
	seglen = divide (bc, 9, 24, 0);		/* get character count */
	if seglen = 0 then do;
	     code = error_table_$zero_length_seg;
	     go to err_exit;
	end;

	if seg_output then do;			/* If segment output, make temp seg */
	     call hcs_$make_seg ("", "fwl_temp_", "", 01011b, tp, code);
	     if tp = null then do;
		ename = "fwl_temp_";
		dname = "(process directory)";
		go to err_exit;
	     end;
	     ti = 1;				/* init temp seg offset */

	     oldname = ename;			/* remember input seg name */
	     substr (ename, elen, 4) = ".fwl";		/* construct output seg name */

	     if ^replace then do;			/* create output seg */
		dname = get_wdir_ ();		/* in working dir */
		call hcs_$make_seg (dname, ename, "", 01011b, np, code);
		if np = null then go to err_exit;
	     end;
	end;


	rows, last_col_rows = 56;			/* use 56 rows per page */
	j = 1;					/* init word ptr */

/* Each pass thru the following loop produces one page of output */

	do while (j < seglen);			/* scan until word list is exhausted */

/* We now proceed to fill in the page array which has one entry
   for each word on the page.  The array is traversed in column major
   order while the input word list is scanned from beginning to end. */

	     next_col_flags = ""b;			/* init flags for first column */
	     do c = 1 to cols;			/* loop thru cols */
		col_flags = next_col_flags;		/* save flags for this column */
		next_col_flags = ""b;		/* init flags for next column */
		do r = 1 to rows;			/* loop thru rows */
		     if substr (col_flags, r, 1) then first (c, r) = 0; /* skip if flag set for this row */
		     else do;
			wordlen = index (substr (p -> cs, j + 1), nl); /* find end of next word */
			if wordlen = 0 then wordlen = seglen + 1 - j; /* if newline missing, assume one */
			i = index (substr (p -> cs, j, wordlen), backspace); /* test word for backspaces */
			if i ^= 0 then do;		/* if word contains backspaces, figure out "print length" */
			     printlen = i -2;	/* start at first backspace */
			     do i = i + 1 to wordlen - 1 while (printlen < 32); /* scan until max of 31 exceeded */
				if substr (p -> cs, j+i, 1) = backspace then /* this char is a backspace */
				     printlen = printlen - 1; /* decrement printlen */
				else printlen = printlen +1; /* increment printlen */
			     end;
			     if printlen = 32 then out_wordlen = i - 1; /* if printlen > 31, cut output by 1 */
			     else out_wordlen = i;	/* otherwise output full word */
			end;
			else if wordlen > 31 then do; /* no backspaces, so printlen = wordlen */
			     out_wordlen = 31;	/* if oversize word, cut output length to 31 */
			     printlen = 32;		/* set printlen to max */
			end;
			else out_wordlen, printlen = wordlen; /* wordlen small enough, so print whole word */
			if printlen > 19 then	/* space needed from next column ? */
			     if c ^= cols then substr (next_col_flags, r, 1) = "1"b; /* if not last col, set flag */

			first (c, r) = j;		/* save offset of first char in word */
			len (c, r) = out_wordlen;	/* save word length */
			plen (c, r) = printlen;	/* save print length */
			j = j + wordlen + 1;	/* increment word ptr */
			if j >= seglen then do;	/* end of word list? */
			     cols = c;		/* last page has c columns */
			     last_col_rows = r;	/* last column has r rows */
			     if cols = 1 then rows = last_col_rows; /* if only one col, last page has r rows */
			     go to init_page;
			end;
		     end;
		end;
	     end;

/* Now it's time to produce the actual text of the page.  The
   page array is traversed in row major order, thereby building the
   page a row, i.e. a line, at a time. */

init_page:     page = "";				/* null out page */
	     if seg_output then page = page || substr (nl5, 1, 2); /* if seg output, begin with 2 newlines */
	     else page = page || nl5;			/* If terminal output, begin with 5 new-lines */

	     do r = 1 to rows;			/* loop thru rows */
		do c = 1 to cols;			/* loop thru cols */
		     if c = cols then		/* if last column */
			if r > last_col_rows then go to end_of_row; /* anymore rows in last col? */
		     fi = first (c, r);		/* get word offset */
		     if fi ^= 0 then do;		/* if not zero due to large word in preceding column */
			wordlen = len (c, r);	/* get word length */
			printlen = plen (c, r);	/* get print length */
			page = page || substr (p -> cs, fi, wordlen); /* add word to page */
			if printlen = 32 then page = page || "?"; /* if oversize word, append "?" */
			if c < cols then do;	/* if not last column */
			     if printlen < 10 then go to two_tabs; /* add tabs to pad out column */
			     if printlen < 20 then go to one_tab;
			     if printlen < 30 then
two_tabs:			     page = page || "		"; else
one_tab:			     page = page || "	";
			end;
		     end;
		end;
end_of_row:	page = page || nl;			/* add newline at end of row */
	     end;

	     if ^seg_output then do;			/* Write page on the terminal */
		page = page || nl5;
		call iox_$put_chars (iox_$user_output, addrel (addr (page), 1), length (page), code);
	     end;
	     else do;				/* copy page into temp seg */
		page = page || nlff;
		substr (tp -> cs, ti, length (page)) = page;
		ti = ti + length (page);		/* increment temp seg offset */
	     end;
	end;

	if seg_output then do;			/* copy temp seg into permanent seg */
	     if replace then do;			/* if replace, rename input seg */
chname:		call hcs_$chname_seg (p, oldname, ename, code);
		if code ^= 0 then
		     if code ^= error_table_$segnamedup then
			if code = error_table_$namedup then do;
			     call nd_handler_ ("format_word_list", dname, ename, code);
			     if code ^= 0 then go to finish; /* user decided to abort or error in nd_handler_ */
			     go to chname;		/* conflicting name was removed, try again */
			end;
			else do;
			     ename = oldname;
			     go to err_exit;
			end;
		xp = p;
	     end;
	     else xp = np;
	     seglen = ti -1;
	     xp -> cs = tp -> cs;			/* copy seg */
	     call hcs_$truncate_seg (xp, divide (seglen+3, 4, 21, 0), code); /*  truncate to new length */
	     if code ^= 0 then go to err_exit;
	     call hcs_$set_bc_seg (xp, 9*seglen, code);	/* set bitcount */
	     if code ^= 0 then go to err_exit;
	end;

finish:	call cleaner;

cleaner:	proc;					/* cleanup handler */
	     if tp ^= null then call hcs_$delentry_seg (tp, code); /* delete temp seg */
	     do p = p, np;
		if p ^= null then call hcs_$terminate_noname (p, code); /* terminate input & output segs */
	     end;
	end cleaner;

	return;

err_exit:	call com_err_ (code, "format_word_list", "^a>^a", dname, ename);
	go to finish;

     end format_word_list;
