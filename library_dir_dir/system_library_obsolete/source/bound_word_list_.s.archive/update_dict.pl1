/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

update_dict: ud: proc;

/* Written by Jerry Stern */

dcl  vartemp char (64) varying;
dcl  suffix char (8) varying;
dcl  whoami char (16) varying;
dcl  cleanup condition;
dcl  temp_seg_name char (9);
dcl  tp ptr init (null);
dcl  code fixed bin (35);
dcl  bc fixed bin (24);
dcl  ti fixed bin (21);
dcl (argno, al) fixed bin;
dcl  ap ptr;
dcl  arg char (al) based (ap);
dcl  elen fixed bin;
dcl  verify_sw bit (1) aligned;
dcl (upd_sw, need_2_words, phase1) bit (1) aligned;
dcl (got_wl, got_dict) bit (1) aligned init ("0"b);
dcl  text char (9999) aligned based;

dcl 1 x aligned based (switchp),
    2 segp ptr init (null),
    2 seglen fixed bin (21),
    2 i fixed bin (21),
    2 len fixed bin,
    2 count fixed bin,
    2 word char (96),
    2 trword char (96),
    2 ename char (32) unal,
    2 dname char (168) unal;

dcl  switchp ptr;
dcl 1 wl aligned like x;
dcl 1 dict aligned like x;
dcl  xtext char (x.seglen) aligned based (x.segp);
dcl  upper_case char (26) aligned init static init ("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
dcl  lower_case char (26) aligned int static init ("abcdefghijklmnopqrstuvwxyz");
dcl  nl char (1) aligned int static init ("
");

dcl (addr, translate, divide, index, substr, null, verify) builtin;
dcl  cu_$arg_ptr ext entry (fixed bin, ptr, fixed bin) returns (fixed bin (35));
dcl  expand_path_ ext entry (ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  com_err_ ext entry options (variable);
dcl  ioa_ ext entry options (variable);
dcl  hcs_$initiate_count ext entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$truncate_seg ext entry (ptr, fixed bin (21), fixed bin (35));
dcl  hcs_$set_bc_seg ext entry (ptr, fixed bin (24), fixed bin (35));
dcl  hcs_$make_seg ext entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$delentry_seg ext entry (ptr, fixed bin (35));
dcl  hcs_$terminate_noname ext entry (ptr, fixed bin (35));
dcl (error_table_$entlong,
     error_table_$noentry,
     error_table_$zero_length_seg,
     error_table_$noarg) ext fixed bin (35);

	upd_sw, verify_sw = "1"b;			/* set switches for update_dict */
	whoami = "update_dict";			/* remember entry point name */
	temp_seg_name = "upd_temp_";			/* set temp seg name for update_dict */
	go to join;

reduce_word_list: rwl: entry;

	upd_sw, verify_sw = "0"b;			/* set switches for reduce_word_list */
	whoami = "reduce_word_list";			/* remember entry point name */
	temp_seg_name = "rwl_temp_";			/* set temp seg name for reduce_word_list */


join:	do argno = 1 by 1 while (cu_$arg_ptr (argno, ap, al) = 0); /* scan arguments */
	     if substr (arg, 1, 1) ^= "-" then		/* not an option */
		if ^got_wl then do;			/* this should be word list pathname */
		     switchp = addr (wl);
		     got_wl = "1"b;
expand:		     call expand_path_ (ap, al, addr (x.dname), addr (x.ename), code);
		     if code ^= 0 then do;
			call com_err_ (code, whoami, arg);
			return;
		     end;
		end;
		else if ^got_dict then do;		/* this should be dictionary pathname */
		     switchp = addr (dict);
		     got_dict = "1"b;
		     go to expand;
		end;
		else go to badarg;			/* have both pathnames, user in error */
	     else if ^upd_sw then go to badarg;		/* no options for reduce_word_list */
	     else if arg = "-nv" then verify_sw = "0"b;	/* no verification requested */
	     else if arg = "-no_verify" then verify_sw = "0"b;
	     else do;				/* bad option */
badarg:		call com_err_ (0, whoami, "Unrecognized argument: ^a", arg);
		return;
	     end;
	end;

	if ^got_wl then do;				/* word_list pathname missing */
noarg:	     call com_err_ (error_table_$noarg, whoami);
	     return;
	end;
	if ^got_dict then go to noarg;		/* dictionary pathname missing */

	elen = index (wl.ename, " ");			/* get word list name length */
	if elen = 0 then elen = 33;
	if substr (wl.ename, elen-3, 3) ^= ".wl" then	/* suffix not supplied */
	     if elen > 30 then do;			/* no room to add suffix */
		switchp = addr (wl);
entlong:		if switchp = addr (wl) then		/* if error on word list name */
		     suffix = ".wl";		/* use word list suffix */
		else suffix = ".dict.wl";		/* otherwise use dictionary suffix */
		call com_err_ (error_table_$entlong, whoami, "^a^a", x.ename, suffix);
		return;
	     end;
	     else substr (wl.ename, elen, 3) = ".wl";	/* add suffix */

	elen = index (dict.ename, " ");		/* get dictionary name length */
	if elen = 0 then elen = 33;
	if substr (dict.ename, elen-8, 8) ^= ".dict.wl" then /* suffix not supplied */
	     if elen > 25 then do;			/* no room to add suffix */
		switchp = addr (dict);
		go to entlong;
	     end;
	     else substr (dict.ename, elen, 8) = ".dict.wl"; /* add suffix */

	on cleanup call cleaner;

	switchp = addr (wl);			/* set up for possible transfer to err_exit */
	call hcs_$initiate_count (wl.dname, wl.ename, "", bc, 0, wl.segp, code); /* initiate the word list */
	if wl.segp = null then go to err_exit;
	wl.seglen = divide (bc, 9, 24, 0);		/* get char count */
	if wl.seglen = 0 then do;			/* word list empty */
	     code = error_table_$zero_length_seg;
	     go to err_exit;
	end;

	switchp = addr (dict);			/* set up for err_exit */
	call hcs_$initiate_count (dict.dname, dict.ename, "", bc, 0, dict.segp, code); /* initiate the dictionary */
	if dict.segp = null then
	     if ^upd_sw then go to err_exit;		/* must have dictionary for reduce_word_list */
	     else if code = error_table_$noentry then do; /* dictionary does not exist */
		call hcs_$make_seg (dict.dname, dict.ename, "", 01011b, dict.segp, code); /* create it */
		if code ^= 0 then go to err_exit;
		call com_err_ (0, whoami, "^a created", dict.ename);
		dict.seglen = 0;			/* init char count */
	     end;
	     else go to err_exit;
	else dict.seglen = divide (bc, 9, 24, 0);	/* get char count */

	call hcs_$make_seg ("", temp_seg_name, "", 01011b, tp, code); /* make temp output seg */
	if tp = null then do;
	     dict.ename = temp_seg_name;
	     dict.dname = "(process directory)";
	     go to finish;
	end;

	ti, wl.i, dict.i = 1;			/* init offsets for temp seg, word list, & dictionary */
	wl.count, dict.count = 0;			/* init word counts */
	need_2_words, phase1 = "1"b;			/* 2 words needed, begin phase 1 */
	switchp = addr (wl);
	call get_word;				/* get first word from word list */
	need_2_words = "0"b;			/* only 1 word needed now */
	switchp = addr (dict);
	call get_word;				/* get first word from dictionary */

get_word:	proc;					/* gets the next word from the word list or the dictionary */

repeat:	     if x.i > x.seglen then do;		/* no words left */
		if ^phase1 then go to report;		/* finished phase 2, wrap it up */
		if ^upd_sw then if switchp = addr (wl) then go to report; /* word_list exhausted, reduce_word_list done */
		go to leftovers;			/* one input seg exhausted, get leftovers */
	     end;

	     x.len = index (substr (xtext, x.i), nl);	/* get length of next word */
	     if x.len = 0 then do;			/* final newline missing, not a word list */
		vartemp = "^a does not end with a newline";
barf:		call com_err_ (0, whoami, vartemp, x.ename); /* gripe */
		go to finish;
	     end;
	     if x.len > 96 then do;			/* word length > 96, not a word list */
		vartemp = "^a contains a word exceeding 95 characters";
		go to barf;
	     end;
	     substr (x.word, 1, x.len) = substr (xtext, x.i, x.len); /* extract the word */
	     x.i = x.i + x.len;			/* increment seg offset */
	     if verify_sw then			/* verify lower-case only for update_dict */
		if switchp = addr (wl) then		/* verify the word_list, not the dictionary */
		     if verify (substr (x.word, 1, x.len-1), lower_case) ^= 0 then /* if not lower_case */
			go to repeat;		/* try the next word */
	     if phase1 then				/* still comparing, need lower case translation of word */
		substr (x.trword, 1, x.len) = translate (substr (x.word, 1, x.len), lower_case, upper_case);
	     return;

	end get_word;


put_word:	proc;					/* puts a word in the temp output seg */
	     substr (tp -> text, ti, x.len) = substr (x.word, 1, x.len); /* copy word */
	     ti = ti + x.len;			/* increment temp seg offset */
	     x.count = x.count + 1;			/* increment word count */
	end put_word;


/* The following loop implements "phase 1" of the algorithm.
   The current word list word is compared to the current dictionary
   word.  If appropriate, one of the words is added to the
   output.  Note that dictionaries are stored in alphabetical order
   rather than ASCII order.  Hence, an alphabetical comparison
   is performed.  First, lower case translations of the words are
   compared to see if the spelling differs.  If not, then the
   actual words are compared for differences in capitalization.
   Note also that reduce_word_list special cases words with the
   first letter capitalized or all letters capitalized as might appear
   in a title, beginning of a sentence, etc. */

loop:	if substr (wl.trword, 1, wl.len) < substr (dict.trword, 1, dict.len) then go to LT; /* less than */
	if wl.len = dict.len then
	     if substr (wl.trword, 1, wl.len) = substr (dict.trword, 1, wl.len) then /* same spelling */
		if substr (wl.word, 1, wl.len) < substr (dict.word, 1, wl.len) then go to LT; /* less than due to caps */
		else if substr (wl.word, 1, wl.len) = substr (dict.word, 1, wl.len) then go to EQ; /* equal */
	go to GT;					/* not less than or equal, must be greater than */

LT:	switchp = addr (wl);
	if ^upd_sw then				/* if reduce_word_list */
	     if wl.len = dict.len then		/* if word lengths equal */
		if substr (wl.trword, 1, wl.len) = substr (dict.word, 1, wl.len) then do; /* if spelled the same */
		     if verify (substr (wl.word, 2, wl.len -2), lower_case) = 0 then go to skip; /* first letter a cap */
		     if verify (substr (wl.word, 1, wl.len -1), upper_case) = 0 then go to skip; /* all caps */
		end;
	call put_word;				/* output word list word */
skip:	call get_word;				/* get next word list word */
	go to loop;

EQ:	need_2_words = "1"b;			/* replace both words */
GT:	switchp = addr (dict);
	if upd_sw then call put_word;			/* if update_dict, output dictionary word */
	call get_word;				/* get next dictionary word */
	if need_2_words then do;			/* both words were the same */
	     need_2_words = "0"b;
	     switchp = addr (wl);
	     call get_word;				/* get next word list word */
	end;
	go to loop;


/* One of the input segs has been exhausted.  All we do
   now is output the remaining words of the other input seg. */

leftovers: phase1 = "0"b;				/* begin phase 2 */
	if switchp = addr (wl) then switchp = addr (dict); /* one input seg exhausted, use the other */
	else switchp = addr (wl);
	if need_2_words then			/* didn't get next word yet */
loop2:	     call get_word;				/* get next word */
	call put_word;				/* output word */
	go to loop2;


/* Either both input segs are now exhausted or just the word list
   has been exhausted for reduce_word_list.  There's nothing left
   to do but report the results and copy the output. */

report:	if upd_sw then
	call ioa_ ("number of updates = ^d^/number of dictionary words = ^d", wl.count, wl.count + dict.count);
	else call ioa_ ("reduced number of words = ^d", wl.count);
	ti = ti -1;
	if upd_sw then switchp = addr (dict);		/* if update_dict, replace dictionary */
	else switchp = addr (wl);			/* otherwise, replace word list */
	substr (x.segp -> text, 1, ti) = substr (tp -> text, 1, ti); /* copy the output */
	call hcs_$truncate_seg (x.segp, divide (ti+3, 4, 21, 0), code); /* truncate to new length */
	if code ^= 0 then go to err_exit;
	call hcs_$set_bc_seg (x.segp, 9*ti, code);	/* set bit count */
	if code ^= 0 then go to err_exit;

finish:	call cleaner;

cleaner:	proc;					/* cleanup handler */
	     if tp ^= null then call hcs_$delentry_seg (tp, code); /* delete temp seg */
	     do wl.segp = wl.segp, dict.segp;
		if wl.segp ^= null then call hcs_$terminate_noname (wl.segp, code); /* terminate input segs */
	     end;
	end cleaner;

	return;

err_exit:	call com_err_ (code, whoami, "^a>^a", x.dname, x.ename);
	go to finish;

     end update_dict;
