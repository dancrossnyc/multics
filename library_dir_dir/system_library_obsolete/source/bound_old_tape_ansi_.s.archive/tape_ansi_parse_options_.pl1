/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* Modified 9/79 by R.J.C. Kissel to handle 6250 bpi tapes. */

/* format: style3,linecom,ifthenstmt,indthenelse,^indnoniterdo,indend,initlm3,dclind5,idind32 */
tape_ansi_parse_options_:
     procedure (taoP, options, error, code);

/* parameters */
dcl  options		       (*) char (*) varying,	/* attachment option array */
     error		       char (32) varying,	/* invalid option */
     code			       fixed bin (35);	/* error code */

%include tape_attach_options;


/* based storage */
dcl  opt			       char (nc_opt) based (optP);
						/* adjustable string for (*) varying -> (*) conversion */

/* automatic storage */
dcl  (i, j, k, temp)	       fixed bin,
     hyphen_ok		       bit (1),		/* volume name can begin with "-" switch */
     clock		       fixed bin (71),
     nc_opt		       fixed bin,		/* number of characters in opt string */
     optP			       ptr,		/* pointer to 1st char of (*) varying char string */
     temp21		       fixed bin (21),
     vn			       char (6),
     yy			       picture "99",
     ddd			       picture "999";

/* internal static storage */
dcl  1 key		       internal static,	/* option keywords */
       2 n		       fixed bin init (22),	/* number of keywords */
       2 long		       (22) char (16) varying init
						/* long forms */
			       ("-name", "-number", "-ring", "-extend", "-modify", "-generate", "-create", "-format",
			       "-block", "-record", "-mode", "-expires", "-user_labels", "-density", "-track",
			       "-device", "-retain", "-force", "-replace", "-dos", "-no_labels", "-clear"),
       2 short		       (22) char (4) varying
			       init ("-nm", "-nb", "-rg", "-ext", "-mod", "-gen", "-cr", "-fmt", "-bk", "-rec", "-md",
			       "-exp", "-ul", "-den", "-trk", "-dv", "-ret", "-fc", "-rpl", "", "-nlb", "-cl");

dcl  1 density		       internal static,	/* -density interpretation */
       2 n		       fixed bin init (5),	/* number of possibilities */
       2 type		       (5) char (4) varying init /* possibilities */ ("200", "556", "800", "1600", "6250"),
       2 code		       (5) fixed bin init /* interpretation */ (0, 1, 2, 3, 4);

dcl  1 mode		       internal static,	/* -mode interpretation */
       2 n		       fixed bin init (3),	/* number of possibilities */
       2 type		       (3) char (8) varying init
						/* possibilities */
			       ("ascii", "ebcdic", "binary"),
       2 code		       (3) fixed bin init	/* interpretation */
			       (1, 2, 3);

dcl  1 retain		       internal static,	/* -retain interpretation */
       2 n		       fixed bin init (4),	/* number of possibilities */
       2 type		       (4) char (8) varying init
						/* possibilities */
			       ("none", "device", "volume", "all"),
       2 code		       (4) fixed bin init	/* interpretation */
			       (1, 2, 3, 4);

/* conditions */
dcl  conversion		       condition;

/* builtin functions */
dcl  (addr, dimension, fixed, length, substr)
			       builtin;

/* external static */
dcl  sys_info$max_seg_size	       fixed bin (35) external static;

/* error codes */
dcl  (
     error_table_$bad_arg,
     error_table_$bad_tapeid,
     error_table_$badopt,
     error_table_$noarg,
     error_table_$nodescr,
     error_table_$inconsistent
     )			       fixed bin (35) ext static;

/* external procedures */
dcl  convert_date_to_binary_	       ext entry (char (*), fixed bin (71), fixed bin (35)),
     cv_dec_check_		       ext entry (char (*), fixed bin (35)) returns (fixed bin (35)),
     datebin_		       ext
			       entry (fixed bin (71), fixed bin, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin,
			       fixed bin, fixed bin, fixed bin),
     datebin_$dayr_clk	       ext entry (fixed bin (71), fixed bin);

	error = "";				/* initialize error message */
	code = 0;					/* initialize return code */

	tao.noptions = dimension (options, 1);		/* get number of array entries */
	if tao.noptions = 0
	     then do;				/* there must be at least a reel number */
		code = error_table_$noarg;
		return;
		end;

	hyphen_ok = "0"b;				/* initialize hyphen switch */
	i = 1;					/* begin with 1st option */
vol_loop:
	if options (i) = "-volume" then go to vol_op;	/* option is -volume */
	if options (i) = "-vol"
	     then do;				/* option is -vol */
vol_op:
		hyphen_ok = "1"b;			/* next option may begin with "-" */
		if no_next () then return;		/* no volume name follows */
		end;

	if substr (options (i), 1, 1) = "-"
	     then do;				/* option begins with "-" */
		if hyphen_ok
		     then hyphen_ok = "0"b;		/* allowed - reset ok switch */
		     else do;			/* not allowed */
			if i = 1
			     then do;		/* must be at least 1 volume name */
bad_volname:
				error = options (i);
				code = error_table_$bad_tapeid;
				return;
				end;
			go to normal_options;	/* this and remainder are contol options */
			end;
		end;
	     else hyphen_ok = "0"b;			/* in case vol name doesn't begin with "-" */

	if ^vname (options (i), vn)
	     then do;				/* option is invalid volume name */
bad_vol:
		error = options (i);
		code = error_table_$bad_tapeid;
		return;
		end;

	if tao.nvolumes = tao_max_volnames
	     then do;				/* too many */
		error = "Volume limit of 63 exceeded.";
		code = error_table_$bad_arg;
		return;
		end;
	tao.nvolumes = tao.nvolumes + 1;		/* increment volume count */
	tao.volname (tao.nvolumes) = vn;		/* save the volume name */
	i = i + 1;				/* increment to next option */
	if i > tao.noptions then return;		/* exit when done */

	if options (i) = "-comment" then go to com_op;	/* options is "-comment" */
	if options (i) = "-com"
	     then do;				/* option is "-com" */
com_op:
		if no_next () then return;		/* no comment string */
		if length (options (i)) > 64 then go to bad2;
						/* too long */
		tao.comment (tao.nvolumes) = options (i);
						/* save the comment */
		i = i + 1;			/* increment to next option */
		if i > tao.noptions then return;	/* done */
		end;

	go to vol_loop;				/* continue processing */

normal_options:
	do while (i <= tao.noptions);			/* and continue as long as options remain */

test:
	     do j = 1 to key.n;			/* test each keyword */
		if options (i) = key.long (j) then go to match (j);
						/* process when matched */
		if options (i) = key.short (j) then go to match (j);
						/* ditto */
	     end;
	     error = options (i);
	     code = error_table_$badopt;
	     return;


match (1):					/* -name */
	     if no_next () then return;		/* no fileid */
	     if length (options (i)) > 17 then go to bad2;/* bad fileid */
	     tao.file_id = options (i);
	     go to next;

match (2):					/* -number */
	     if no_next () then return;		/* no sequence number */
	     optP = addr (substr (options (i), 1));
	     nc_opt = length (options (i));
	     temp = fixed (cv_dec_check_ (opt, code), 17);/* convert to binary */
	     if code ^= 0 then go to bad2;		/* bad fileseq */
	     if temp < 1 then go to bad2;
	     if temp > 9999 then go to bad2;
	     tao.sequence = temp;			/* ok */
	     go to next;


match (3):					/* -ring */
	     tao.write_ring = "1"b;
	     go to next;


match (4):					/* -extend */
	     if tao.output_mode ^= 0
		then do;				/* previous mode */
mult_mode:
		     error = long (j) || " and " || long (output_mode + 3);
		     code = error_table_$inconsistent;
		     return;
		     end;
	     tao.output_mode = 1;
	     tao.write_ring = "1"b;
	     go to next;

match (5):					/* -modify */
	     if tao.output_mode ^= 0 then go to mult_mode;
	     tao.output_mode = 2;
	     tao.write_ring = "1"b;
	     go to next;

match (6):					/* -generate */
	     if tao.output_mode ^= 0 then go to mult_mode;
	     tao.output_mode = 3;
	     tao.write_ring = "1"b;
	     go to next;


match (7):					/* -create */
	     if tao.output_mode ^= 0 then go to mult_mode;
	     tao.output_mode = 4;
	     tao.write_ring = "1"b;
	     go to next;


match (8):					/* -format */
	     if no_next () then return;		/* no format */
	     tao.format = options (i);		/* save it */
	     go to next;


match (9):					/* -block */
	     if no_next () then return;		/* no block length */
	     optP = addr (substr (options (i), 1));
	     nc_opt = length (options (i));
	     temp = fixed (cv_dec_check_ (opt, code), 17);
	     if code ^= 0 then go to bad2;
	     if temp < 18 then go to bad2;
	     if temp > 8192 then go to bad2;
	     tao.blklen = temp;			/* ok */
	     go to next;

match (10):					/* -record */
	     if no_next () then return;		/* no record length */
	     optP = addr (substr (options (i), 1));
	     nc_opt = length (options (i));
	     temp21 = fixed (cv_dec_check_ (opt, code), 21);
	     if code ^= 0 then go to bad2;
	     if temp21 < 1 then go to bad2;
	     if temp21 > sys_info$max_seg_size * 4 then go to bad2;
	     tao.reclen = temp21;			/* ok */
	     go to next;


match (11):					/* -mode */
	     if no_next () then return;		/* no recording mode */
	     do k = 1 to mode.n;			/* validate */
		if options (i) = mode.type (k)
		     then do;			/* match? */
			tao.mode = mode.code (k);
			go to next;
			end;
	     end;
	     go to bad2;				/* no match */

match (12):					/* -expires */
	     if no_next () then return;		/* no date */
	     optP = addr (substr (options (i), 1));
	     nc_opt = length (options (i));
	     call convert_date_to_binary_ (opt, clock, code);
						/* convert date */
	     if code ^= 0 then go to bad2;
	     call datebin_$dayr_clk (clock, j);		/* get day of year */
	     call datebin_ (clock, 0, 0, 0, k, 0, 0, 0, 0, 0);
						/* get year */
	     ddd = j;				/* convert to characters */
	     yy = k - 1900;
	     tao.expiration = yy || ddd;		/* form Julian date */
	     go to next;


match (13):					/* -user_labels */
	     if tao.no_labels
		then do;				/* -user_labels and -no_labels */
lbl_error:
		     error = """-no_labels"" and ""-user_labels"".";
		     code = error_table_$inconsistent;
		     return;
		     end;
	     tao.user_labels = "1"b;
	     go to next;


match (14):					/* -density */
	     if no_next () then return;		/* no density */
	     do k = 1 to density.n;			/* validate */
		if options (i) = density.type (k)
		     then do;			/* match? */
			tao.density = density.code (k);
			go to next;
			end;
	     end;
	     go to bad2;				/* no match */


match (15):					/* -track */
	     if no_next () then return;		/* no track specification */
	     if options (i) = "7" then tao.ntracks = 7;
	     else if options (i) = "9" then tao.ntracks = 9;
	     else go to bad2;			/* bad track */
	     go to next;

match (16):					/* -device */
	     if no_next () then return;		/* no number of devices */
	     optP = addr (substr (options (i), 1));
	     nc_opt = length (options (i));
	     temp = fixed (cv_dec_check_ (opt, code), 17);/* convert ndevices */
	     if code ^= 0 then go to bad2;		/* bad ndevices */
	     if temp < 1 then go to bad2;
	     if temp > 63 then go to bad2;
	     tao.ndrives = temp;			/* ok */
	     go to next;

match (17):					/* -retain */
	     if no_next () then return;		/* no retention option */
	     do k = 1 to retain.n;			/* test each valid retain */
		if options (i) = retain.type (k)
		     then do;			/* match */
			tao.retain = retain.code (k);
			go to next;
			end;
	     end;
	     go to bad2;				/* no match */


match (18):					/* -force */
	     tao.force = "1"b;			/* set force overwrite bit */
	     go to next;


match (19):					/* -replace */
	     if no_next () then return;		/* no file identifier */
	     if length (options (i)) > 17 then go to bad2;
	     tao.replace_id = options (i);
	     go to next;


match (20):					/* -dos */
	     tao.DOS = "1"b;
	     go to next;


match (21):					/* -no_labels */
	     if tao.user_labels then go to lbl_error;	/* conflict */
	     tao.no_labels = "1"b;
	     go to next;

match (22):
	     tao.clear_cseg = "1"b;			/* flag to delete present cseg */


next:
	     i = i + 1;				/* get next keyword */
	end;
	return;					/* done */

bad2:
	error = options (i - 1) || " " || options (i);	/* form string */
	code = error_table_$bad_arg;
	return;

no_next:
     procedure returns (bit (1));			/* sees if 2nd part of two-part option exists */
	if i + 1 > tao.noptions
	     then do;				/* does 2nd part exist? */
		error = options (i);		/* no - get keyword */
		code = error_table_$nodescr;
		return ("1"b);
		end;
	     else do;				/* 2nd part does exist */
		i = i + 1;			/* increment the option index */
		return ("0"b);
		end;
     end no_next;


vname:
     procedure (in, inC6) returns (bit (1));		/* evaluates and normalizes a volume name */

dcl  in			       char (*) varying;	/* input volume name */
dcl  inC6			       char (6);		/* 6 alphanumeric characters */
dcl  inN6			       picture "999999";	/* 6 numeric characters */

	if length (in) > 6
	     then do;				/* invalid if > 6 characters */
		inC6 = "";
		return ("0"b);
		end;

	if length (in) = 6
	     then do;				/* valid if = 6 characters */
		inC6 = in;
		return ("1"b);
		end;

/* if numeric, pad on the left with zero */
/* if alphameric, pad on the right with blanks */

	on conversion go to alphameric;		/* not numeric if signalled */
	inN6 = fixed (in);				/* try to convert to a number */
	inC6 = inN6;
	return ("1"b);

alphameric:
	inC6 = in;				/* pad on right with " " */
	return ("1"b);

     end vname;

     end tape_ansi_parse_options_;
