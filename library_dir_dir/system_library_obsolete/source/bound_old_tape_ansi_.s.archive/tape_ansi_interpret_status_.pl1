/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* ***************************************************************
   *						     *
   *						     *
   * Copyright (c) 1975 by Massachusetts Institute of Technology *
   *						     *
   *						     *
   *************************************************************** */



tape_ansi_interpret_status_: procedure (hP);		/* interprets MTS500 hardware status bits */

/* hP points to a hardware status structure which contains the MTS500 status bits	*/
/* to be interpreted.  The error codes resulting from the interpretation of this string are	*/
/* returned in the structure.  Created May 3, 1974 by R.E. Klinger.				*/
/* Modified March 5, 1976 to add a new Command Reject substatus, Invalid Density		    */

dcl  hP pointer;					/* argument: pointer to hdw_status structure */

dcl 1 hdw_status based (hP),				/* hardware status structure */
    2 hard_stat bit (72) aligned,			/* tape status in bits 3-12 (from 1) (Input) */
    2 no_minor fixed bin,				/* number of minor status codes (Output) */
    2 major fixed bin (35),				/* major status code (Output) */
    2 minor (10) fixed bin (35);			/* minor status codes (Output) - 10 is arbitrary */

dcl  maj bit (4) unal based (addr (substr (hdw_status.hard_stat, 3))); /* major status portion of hardware status */

dcl  min bit (6) unal based (addr (substr (hdw_status.hard_stat, 7))); /* minor status portion of hardware status string */

/* automatic storage */
dcl (i, j) fixed bin;				/* temporary indices */

/* static storage */
dcl  init_req bit (1) internal static aligned init ("1"b);	/* initialization required bit */

dcl  major_bits (9) bit (4) internal static aligned init	/* major status bit possibilities */
    ("0101"b, "1101"b, "0100"b, "0011"b, "1011"b, "0010"b, "1010"b, "0001"b, "0000"b);

dcl  first_minor_index (9) fixed bin internal static init	/* lowest index into minor status mask and result arrays */
    (1, 8, 12, 16, 23, 35, 40, 50, 54);

dcl  last_minor_index (9) fixed bin internal static init	/* highest index into minor status mask and result arrays */
    (7, 11, 15, 22, 34, 39, 49, 53, 61);

dcl  mask (61) bit (6) internal static aligned init	/* minor status bit masks */
    ("111111"b,
     "111001"b,
     "111010"b,
     "111100"b,
    (10) (1) "111111"b,
     "000000"b,
     "111111"b,
     "111111"b,
     "000011"b,
     "000100"b,
     "001000"b,
     "010000"b,
     "100000"b,
    (12) (1) "111111"b,
     "110011"b,
     "111111"b,
     "100110"b,
     "101010"b,
     "110011"b,
    (15) (1) "111111"b,
     "001001"b,
     "111010"b,
     "000100"b,
     "110010"b,
     "110010"b,
     "110010"b,
     "111011"b);


dcl  result (61) bit (6) internal static aligned init	/* minor status match results */
    ("000000"b,
     "000001"b,
     "000010"b,
     "000100"b,
     "001000"b,
     "010000"b,
     "100000"b,
     "000001"b,
     "000010"b,
     "000011"b,
     "000100"b,
     "001111"b,
     "010011"b,
     "111111"b,
     "000000"b,
     "000001"b,
     "000010"b,
     "000011"b,
     "000100"b,
     "001000"b,
     "010000"b,
     "100000"b,
     "000001"b,
     "000010"b,
     "000011"b,
     "000100"b,
     "001000"b,
     "001001"b,
     "100000"b,
     "010000"b,
     "010001"b,
     "010010"b,
     "010011"b,
     "010100"b,
     "000001"b,
     "000010"b,
     "000100"b,
     "001000"b,
     "010000"b,
     "000001"b,
     "000010"b,
     "000011"b,
     "001000"b,
     "001100"b,
     "001101"b,
     "001110"b,
     "001111"b,
     "010000"b,
     "010001"b,
     "000001"b,
     "100000"b,
     "000010"b,
     "000100"b,
     "000000"b,
     "000001"b,
     "000010"b,
     "000100"b,
     "010000"b,
     "100000"b,
     "110000"b,
     "001000"b);


dcl  major_code (9) fixed bin (35) internal static;	/* major status codes */

dcl  minor_code (61) fixed bin (35) internal static;	/* minor status codes */

	
%include tape_status_codes;

dcl (addr, substr) builtin;


	
	if init_req then do;			/* initialize code arrays if necessary */
	     init_req = "0"b;
	     major_code (1) = tape_status_$command_reject;
	     major_code (2) = tape_status_$mpc_command_reject;
	     major_code (3) = tape_status_$end_of_file;
	     major_code (4) = tape_status_$device_data_alert;
	     major_code (5) = tape_status_$mpc_device_data_alert;
	     major_code (6) = tape_status_$device_attention;
	     major_code (7) = tape_status_$mpc_device_attention;
	     major_code (8) = tape_status_$device_busy;
	     major_code (9) = tape_status_$subsystem_ready;

	     minor_code (1) = tape_status_$invalid_density;
	     minor_code (2) = tape_status_$invalid_opcode;
	     minor_code (3) = tape_status_$invalid_device_code;
	     minor_code (4) = tape_status_$invalid_idcw_parity;
	     minor_code (5) = tape_status_$reject_at_bot;
	     minor_code (6) = tape_status_$read_after_write;
	     minor_code (7) = tape_status_$nine_track_error;
	     minor_code (8) = tape_status_$illegal_procedure;
	     minor_code (9) = tape_status_$illegal_lc_number;
	     minor_code (10) = tape_status_$illegal_susp_lc_number;
	     minor_code (11) = tape_status_$continue_not_set;
	     minor_code (12) = tape_status_$seven_track_eof;
	     minor_code (13) = tape_status_$nine_track_eof;
	     minor_code (14) = tape_status_$data_alert;
	     minor_code (15) = tape_status_$single_char_record;
	     minor_code (16) = tape_status_$transfer_timing;
	     minor_code (17) = tape_status_$blank_tape_on_read;
	     minor_code (18) = tape_status_$bit_during_erase;
	     minor_code (19) = tape_status_$transmission_parity;
	     minor_code (20) = tape_status_$lateral_parity;
	     minor_code (21) = tape_status_$longitudinal_parity;
	     minor_code (22) = tape_status_$end_of_tape;
	     minor_code (23) = tape_status_$transmission_alert;
	     minor_code (24) = tape_status_$inconsistent_command;
	     minor_code (25) = tape_status_$sum_check_error;
	     minor_code (26) = tape_status_$byte_locked_out;
	     minor_code (27) = tape_status_$pe_burst_error;
	     minor_code (28) = tape_status_$preamble_error;
	     minor_code (29) = tape_status_$marginal_condition;
	     minor_code (30) = tape_status_$multitrack_error;
	     minor_code (31) = tape_status_$skew_error;
	     minor_code (32) = tape_status_$postamble_error;
	     minor_code (33) = tape_status_$nrzi_ccc_error;
	     minor_code (34) = tape_status_$code_alert;
	     minor_code (35) = tape_status_$write_protect_attention;
	     minor_code (36) = tape_status_$no_such_device;
	     minor_code (37) = tape_status_$device_in_standby;
	     minor_code (38) = tape_status_$device_check;
	     minor_code (39) = tape_status_$blank_tape_on_write;
	     minor_code (40) = tape_status_$configuration_error;
	     minor_code (41) = tape_status_$multiple_devices;
	     minor_code (42) = tape_status_$illegal_device_id;
	     minor_code (43) = tape_status_$incompatible_mode;
	     minor_code (44) = tape_status_$tca_malfunction_port0;
	     minor_code (45) = tape_status_$tca_malfunction_port1;
	     minor_code (46) = tape_status_$tca_malfunction_port2;
	     minor_code (47) = tape_status_$tca_malfunction_port3;
	     minor_code (48) = tape_status_$mth_malfunction;
	     minor_code (49) = tape_status_$multiple_bot;
	     minor_code (50) = tape_status_$in_rewind;
	     minor_code (51) = tape_status_$device_reserved;
	     minor_code (52) = tape_status_$alternate_channel;
	     minor_code (53) = tape_status_$device_loading;
	     minor_code (54) = tape_status_$device_ready;
	     minor_code (55) = tape_status_$write_protected;
	     minor_code (56) = tape_status_$ready_at_bot;
	     minor_code (57) = tape_status_$nine_track_handler;
	     minor_code (58) = tape_status_$two_bit_fill;
	     minor_code (59) = tape_status_$four_bit_fill;
	     minor_code (60) = tape_status_$six_bit_fill;
	     minor_code (61) = tape_status_$ascii_alert;
	end;



	do i = 1 to 9;				/* look for the major status bits */
	     if maj = major_bits (i) then go to found;
	end;

found:	hdw_status.major = major_code (i);		/* set the major status code */
	hdw_status.no_minor = 0;			/* initialize the minor status count */
	do j = first_minor_index (i) to last_minor_index (i); /* look for minor status bits */
	     if (min & mask (j)) = result (j) then do;	/* test */
		hdw_status.no_minor = hdw_status.no_minor + 1; /* increment the minor status count */
		hdw_status.minor (hdw_status.no_minor) = minor_code (j); /* set the minor status code */
	     end;
	end;

	if i = 3 then hdw_status.no_minor = 1;		/* EOF major status - drop multiple SCR code */

	return;

     end tape_ansi_interpret_status_;
