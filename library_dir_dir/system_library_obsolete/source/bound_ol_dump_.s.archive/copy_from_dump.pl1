/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


copy_from_dump:
     proc (dump_ptrs, seg_index, offset, words, to_ptr, words_copied, code);


/* Subroutine to copy all or a portion of a segment from a BOS dump file.
   The segment is identified by its index in the BOS dump header.
   An array of pointers to the BOS dump components is passed as a parameter
   --this array points to segments of the dump in order (0, 1, 2, ...).

   Written March 1981 by J. Bongiovanni								*/


/* Parameter */

dcl  dump_ptrs (*) ptr;				/* array  of ptrs to dump components, in order	*/
dcl  seg_index fixed bin;				/* index of segment to copy in bos dump array	*/
dcl  offset fixed bin (18);				/* first word in segment to dump		*/
dcl  words fixed bin (18);				/* number of words to dump			*/
dcl  to_ptr ptr;					/* where to copy data			*/
dcl  words_copied fixed bin (18);			/* number of words actually copied		*/
dcl  code fixed bin (35);				/* standard error code			*/

/* Automatic */

dcl  dump_ptr_index fixed bin;
dcl  dump_seg_offset fixed bin (18);
dcl  fp ptr;
dcl  sector fixed bin (24);
dcl  segnum fixed bin;
dcl  tp ptr;
dcl  word_offset fixed bin (24);
dcl  words_left fixed bin (18);
dcl  words_move fixed bin (18);

/* Static */

dcl  HEADER_WORDS fixed bin (18) init (2048) int static options (constant); /* size of header for this version of FDUMP */
dcl  VERSION fixed bin init (2) int static options (constant); /* version expected			*/



/* Based */

dcl  based_move (words_move) fixed bin (35) aligned based;


/* External */

dcl  error_table_$bad_arg fixed bin (35) ext;
dcl  error_table_$improper_data_format fixed bin (35) ext;
dcl  sys_info$max_seg_size fixed bin (18) ext;

/* Builtin */

dcl  addrel builtin;
dcl  bin builtin;
dcl  divide builtin;
dcl  hbound builtin;
dcl  max builtin;
dcl  min builtin;
dcl  mod builtin;
dcl  ptr builtin;


%page;

	code = 0;
	dumpptr = dump_ptrs (1);
	if dump.version ^= VERSION then do;
	     code = error_table_$improper_data_format;	/* bad Fdump				*/
	     return;
	end;


	if seg_index > dump.num_segs then do;		/* segment not in dump			*/
	     code = error_table_$bad_arg;
	     return;
	end;

/* Compute word address of beginning of segment within dump file     					*/

	sector = 0;
	if seg_index > 1 then do segnum = 1 to seg_index - 1;
	     sector = sector + bin (dump.segs (segnum).length, 18);
	end;
	word_offset = sector * 64 + HEADER_WORDS + offset;

	dump_ptr_index = divide (word_offset, sys_info$max_seg_size, 17) + 1;
	dump_seg_offset = mod (word_offset, sys_info$max_seg_size);

	words_left = min (words, 64 * bin (dump.segs.length (seg_index), 18));
	words_copied = max (words_left, 0);
	tp = to_ptr;

	do while (words_left > 0);
	     if dump_ptr_index > hbound (dump_ptrs, 1) then do;
		code = error_table_$bad_arg;
		return;
	     end;
	     fp = ptr (dump_ptrs (dump_ptr_index), dump_seg_offset);
	     words_move = min (sys_info$max_seg_size - dump_seg_offset, words_left);
	     tp -> based_move = fp -> based_move;
	     words_left = words_left - words_move;
	     dump_ptr_index = dump_ptr_index + 1;
	     dump_seg_offset = 0;
	     tp = addrel (tp, words_move);
	end;
%page;

%include bos_dump;


     end copy_from_dump;
