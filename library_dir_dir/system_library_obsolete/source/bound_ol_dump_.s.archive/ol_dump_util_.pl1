/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


ol_dump_util_: proc;


/* Modified 7/80 by R.L. Coppola to fix bug in stk_validate_fwd and rev
   where p_valid went oosb due to addr of ptr being larger than max_length */
/* Modified 7/80 by R. L. Coppola to fix bug in p_valid. */
/* Modified Oct 1982 by Rich Coppola to change value used to increment
   offset to 2048 from 1024. */


	return;					/* should never enter here */
% include ol_dump_struc;

/* subroutine entry declarations */

dcl (ioa_, ioa_$rsnnl) entry options (variable);
dcl  ring0_get_$segptr_given_slt entry (char (*) aligned, char (*) aligned, ptr, fixed bin, ptr, ptr);
dcl  ring0_get_$name_given_slt entry (char (*) aligned, char (*) aligned, ptr, fixed bin, ptr, ptr);
dcl  cv_oct_check_ entry (char (*), fixed bin) returns (fixed bin);
dcl  object_info_$display entry (ptr, fixed bin (24), ptr, fixed bin (35));
dcl  expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  hcs_$initiate_count entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (24),
     fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  hcs_$make_seg entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (5), ptr, fixed bin (35));
dcl  copy_dump_seg_ entry (fixed bin, fixed bin, (0:31) ptr, (0:31) fixed bin, ptr, fixed bin);
dcl  namef_$no_comp entry (ptr, ptr) returns (char (*));
dcl  namef_ entry (ptr, ptr) returns (char (*));
dcl  get_line_length_$switch entry (ptr, fixed bin (35)) returns (fixed bin);

dcl  dbr fixed bin (24);				/* :: */
dcl  segno fixed bin;				/* seg number  to find ptr for */
dcl  seglen fixed bin (35);				/* length of requested segment in words (output) */
dcl  a_code fixed bin;				/* return a_code for fnd_dbr */
dcl (i, j, offset, nmelng, code) fixed bin;
dcl  mx_len fixed bin (19) int static;			/* to remember max_length in ol_dump_struc */
dcl  ring fixed bin (3) unsigned;
dcl  bcode fixed bin (35);
dcl  bitcnt fixed bin (24);
dcl  name2 char (32) aligned init ("");
dcl  dir_name char (168);
dcl  out char (70);
dcl (new_proc, fsttmsw, q_sw) bit (1) unaligned;
dcl (fixed, ptr, null, divide, mod, reverse, verify, length, size, baseptr, baseno, addr, hbound, addrel, substr) builtin;
dcl (dsegptr, genp, dptr, sptr, nxt_sp) ptr;
dcl  sdw_add bit (24) aligned based;
dcl 1 sig_stack like signaller_stack based (sigstp);
dcl  sigstp ptr;
dcl  mc_frame_owner char (32) var;



get_ptr_given_dbr: entry (dbr, segno, sptr, seglen, odsp);

	fsttmsw = "1"b;				/* set entry idicator sw */
	q_sw = "0"b;
	go to com1;

fnd_dbr:	entry (dbr, seglen, a_code, odsp);

	q_sw, fsttmsw = "0"b;			/* reset entry indicator sw */
	a_code = 0;				/* preset good return a_code */

com1:
	offset = size (dump);			/* start at first process */

/* find DBR value requested */

	do j = 1 to dumpp (0) -> dump.num_segs;		/* search entire array for dseg */
	     if fixed (dumpp (0) -> dump.segs (j).segno, 18) = dsegno then do; /* we found a new process */
		dsegptr = ptr (dumpp (divide (offset, max_length, 17, 0)), mod (offset, max_length));
		if fixed (dsegptr -> sdw_add, 24) = dbr then /* we found dbr */
		     if ^fsttmsw then do;		/*  if fnd_dbr entry */
			seglen = fixed (dumpp (0) -> dump.segs (j).length, 18) * 64;
			dbr_offset = j;
			proc_offset = offset;
			dbrsv = dbr;
			dsegp = dsegptr;
			return;
		     end;
		     else go to get_ptr_com;		/* go find seg in this process */
	     end;
	     offset = offset + fixed (dumpp (0) -> dump.segs (j).length, 18)*64;
	end;
	if fsttmsw then				/* if get_ptr_given_dbr entry */
	     sptr = null;				/* could not find dbr, return null ptr */
	else a_code = -1;				/* if  fnd_dbr entry */
	return;


get_ptr_quiet: entry (segno, sptr, seglen, odsp);
	q_sw = "1"b;
	go to gp_com;

get_ptr:	entry (segno, sptr, seglen, odsp);

	q_sw = "0"b;
	mx_len = max_length;			/* remember for future use */
gp_com:
	offset = proc_offset;
	j = dbr_offset;
get_ptr_com:
	fsttmsw = "0"b;
dmp_ptr_scr:
	new_proc = "0"b;
	do i = j to dumpp (0) -> dump.num_segs while (^new_proc);
	     if fixed (dumpp (0) -> dump.segs (i).segno, 18) = segno then do; /* we found the desired segment */
		seglen = fixed (dumpp (0) -> dump.segs (i).length, 18) * 64;
		sptr = ptr (dumpp (divide (offset, max_length, 17, 0)), mod (offset, max_length)); /* .. */
		if fixed (rel (sptr)) + seglen > max_length then do; /* must be going over dump seg boundary */
		     call ioa_$rsnnl ("^d.^o.copy", name2, nmelng, dumpp (0) -> dump.erfno, segno);
		     call hcs_$make_seg ("", name2, "", 1011b, sptr, bcode);
		     call copy_dump_seg_ (segno, dbr_offset, dumpp, dumpln, sptr, nmelng);
		end;
		return;
	     end;
	     if dumpp (0) -> dump.segs (i).segno = "0"b then /* if first seg on new process */
		if i ^= j then			/* first seg of this process */
		     new_proc = "1"b;		/* nxt time  new process */
	     offset = offset + fixed (dumpp (0) -> dump.segs (i).length, 18)*64;
	end;
	if segno <= hcscnt then			/* if s hard core seg */
	     if ^per_process (segno) then		/* and not  a per process seg */
		if ^fsttmsw then do;		/* and if we haven't already been here once */
		     fsttmsw = "1"b;		/* take a lap thru first dumped */
		     offset = size (dump);
		     j = 1;
		     go to dmp_ptr_scr;
		end;
	if ^q_sw then
	     call ioa_ ("Segment ^o not found in process", segno);
	sptr = null;
	return;

/*  */
fnd_hcseg: entry (ename, gp, bitcount, odsp);
dcl  ename char (32) aligned;
dcl  gp ptr;
dcl  bitcount fixed bin (24);
	do libx = 1 to hbound (search_dirs, 1);		/* search all given directorys */
	     call hcs_$initiate_count (search_dirs (libx), ename, "", bitcount, 0, gp, bcode);
	     if gp ^= null then return;
	end;
	return;					/* Cannot find in any given directory */
is_hardcore_seg: entry (a_segno, odsp) returns (bit (1));
dcl  a_segno fixed bin;

	if (a_segno <= hcscnt & ^per_process (a_segno)) then
	     return ("1"b);
	else return ("0"b);

per_process: proc (segno) returns (bit (1));
dcl  segno fixed bin;
	     if segno ^= dsegno then
		if segno ^= pdsseg then
		     if segno ^= prdsseg then
			if segno ^= kstseg then
			     return ("0"b);
	     return ("1"b);
	end per_process;


/*  */


/* stk_validate_fwd - entry to trace threads for a stack_segment and find the last valid in formward direction */

stk_validate_fwd: entry (stkb, stkp, stkbp);
dcl (stkp, stkb, p_sp, stkv, stkbp) ptr;
dcl  iv bit (1);

	sb = stkb;				/* copy stack base pointer */
	stkp, p_sp = null;
	if p_valid (addr (stack_header.stack_begin_ptr)) then /* check validity of begin ptr */
	     sp = addrel (sb, rel (stack_header.stack_begin_ptr)); /* start at begin ptr */
	else return;				/* begin ptr invalid, return null ptr */
	stkbp = sp;				/* set stack begin ptr */
	iv = "0"b;				/* set loop control */
	do while (^iv);				/* iterate through stack frames */
	     if p_valid (addr (next_sp)) & p_valid (addr (prev_sp)) then /* if all this is true */
		if fixed (rel (next_sp)) > fixed (rel (sp)) -fixed (rel (sb)) then
		     if p_sp = null | fixed (rel (prev_sp)) = fixed (rel (p_sp)) - fixed (rel (sb)) then do;
			p_sp = sp;		/* save previous stack pointer */
			sp = addrel (sb, rel (next_sp));

			if p_valid (addr (next_sp)) then do;
			     if fixed (rel (next_sp)) > mx_len then
				iv = "1"b;
			end;

		     end;
		     else iv = "1"b;
		else iv = "1"b;
	     else iv = "1"b;			/* set terminate condition */
	end;
	stkp = p_sp;				/* set stk pointer to last valid stack frame */
	return;


/* is_cond_frame - internal procedure to determine if a stack frame has a condition */

is_cond_frame: proc (stkp) returns (bit (1));

dcl  stkp ptr;
	     if p_valid (addr (stkp -> stack_frame.return_ptr)) then do;
		out = namef_ (stkp -> stack_frame.return_ptr, odsp);
		if index (out, "return_to_ring_") ^= 0 then do;
		     mc_frame_owner = "return_to_ring_0";
		     return ("1"b);
		end;
		if index (out, "$fim|") ^= 0 then do;
		     mc_frame_owner = "fim";
		     return ("1"b);
		end;
		if index (out, "signaller") ^= 0 then do;
		     mc_frame_owner = "signaller";
		     return ("1"b);
		end;
	     end;
	     return ("0"b);
	end is_cond_frame;
						/*  */

/* stk_validate_rev - entry to trace stack frame threads in rev direction */

stk_validate_rev: entry (stkb, stkp, stkv);

	sb = stkb;				/* copy stack base pointer */
	stkp, stkv = null;
	if p_valid (addr (stack_end_ptr)) then do;	/* check validity of stack end pointer */
	     i = fixed (rel (stack_end_ptr));
	     if fixed (rel (stack_end_ptr)) ^> mx_len then
		sp = addrel (sb, rel (stack_end_ptr));	/* start at end pointer */
	     else return;
	end;
	else return;				/* end pointer invalid, return null ptrs */
	if ^p_valid (addr (sp -> stack_frame.prev_sp)) then /* no thrad back */
	     return;
	if fixed (baseno (prev_sp)) ^= fixed (baseno (stack_end_ptr)) then
	     return;
	if p_valid (addr (stack_begin_ptr)) then
	     if fixed (rel (prev_sp)) < fixed (rel (stack_begin_ptr)) then
		return;
	     else;
	else return;
	p_sp = null;
	iv = "0"b;				/* start at stack_end ptr and go fwd to find last valid frame */
	do while (^iv);
	     if p_valid (addr (next_sp)) & p_valid (addr (prev_sp)) then /* if all this is true */
		if fixed (rel (next_sp)) > fixed (rel (sp)) - fixed (rel (sb)) then
		     if p_sp = null | fixed (rel (prev_sp)) = fixed (rel (p_sp)) - fixed (rel (sb)) then do;
			p_sp = sp;		/* save previous stack pointer */
			sp = addrel (sb, rel (next_sp));
		     end;
		     else iv = "1"b;
		else iv = "1"b;
	     else iv = "1"b;			/* set terminate condition */
	end;
	stkp, sp = p_sp;				/* set stk pointer to last valid stack frame */
	p_sp = null;
	iv = "0"b;				/* now go backward until we get to begin ptr  */
	do while (^iv & (fixed (rel (sp)) - fixed (rel (sb)) ^= fixed (rel (stack_begin_ptr))));
	     if p_valid (addr (next_sp)) & p_valid (addr (prev_sp)) then /* if all this is true */
		if fixed (rel (prev_sp)) < fixed (rel (sp)) - fixed (rel (sb)) then
		     if p_sp = null | (fixed (rel (next_sp)) = fixed (rel (p_sp)) - fixed (rel (sb))) then do;
			p_sp = sp;		/* save previous stack pointer */
			sp = addrel (sb, rel (prev_sp));
		     end;
		     else iv = "1"b;
		else iv = "1"b;
	     else iv = "1"b;			/* set terminate condition */
	end;
	stkv = sp;				/* we now have last valid sp */
	return;

/*  */

/* find_cond - entry to find condition frame and return things */

find_cond: entry (stkba, stkpa, cname, a_mcptr, hrptr);
dcl (stkba, stkpa, a_mcptr, hrptr, stkpb, stkva, stkep) ptr;
dcl  cname char (32) varying;
dcl (found_cond, l_cnt) bit (1);
dcl  ptra (0:10) ptr based aligned;
dcl 1 acc based (stkva),
    2 l fixed bin (8) unal,
    2 str char (32) unal;

	cname = "";				/* initialize return parameters */
	a_mcptr, hrptr = null;
	if stkpa = null then do;			/* if sp not given, search entire stack */
	     call stk_validate_rev (stkba, stkpb, stkva); /* validate threads from end ptr */
	     if stkpb = null then return;		/* no luck, basd stack seg */
	     l_cnt = "0"b;
try_fwd:
	     sb = stkba;
	     sp = stkpb;
	     iv, found_cond = "0"b;			/* initialize terminate condition */
	     do while (^found_cond & ^iv);
		if sp = stkva then
		     iv = "1"b;
		if is_cond_frame (sp) then		/* if we found condition frame */
		     found_cond = "1"b;		/* set terminte condition */
		else sp = addrel (sb, rel (prev_sp));	/* go to next frame */
	     end;
	     if ^found_cond then			/* didn't find condition */
		if ^l_cnt then do;			/* if this is first time through */
		     call stk_validate_fwd (stkba, stkpb, stkep); /* search stack from begin ptr */
		     if stkpb = null then return;	/* no luck, bad stack seg */
		     stkva = addrel (stkba, rel (stkba -> stack_begin_ptr));
		     l_cnt = "1"b;
		     go to try_fwd;
		end;
		else return;			/* could not find condition frame either fwd or rev */
	     stkpa = sp;				/* found condition frame, set sp */
	end;
	if ^is_cond_frame (stkpa) then		/* if not a condition frame return */
	     return;
	sb = stkba;
	sp = stkpa;
	if mc_frame_owner = "return_to_ring_0" | mc_frame_owner = "signaller" then do;
	     sigstp = addrel (addr (stack_frame.timer), +1);
	     a_mcptr = addr (sig_stack.mach_cond);	/* set machine cond pointer */
	     hrptr = addr (sig_stack.history_registers);	/* set history register pointer */
	end;

	else do;					/* must belong to fim */
	     a_mcptr = addrel (sp, 48);
	     hrptr = addrel (sp, 96);
	end;

	nxt_sp = addrel (sb, rel (next_sp));
	out = namef_ (nxt_sp -> return_ptr, odsp);
	if index (out, "signal_") ^= 0 then do;		/* if signal_ frame */
	     ap = addrel (sb, rel (addrel (sb, rel (next_sp)) -> arg_ptr)); /*  get arg list ptr */
	     stkva = addrel (sb, rel (ap -> ptra (1)));
	     cname = substr (acc.str, 1, acc.l);
	end;
	return;


/*  */

get_segno: entry (vname, odsp) returns (fixed bin);
dcl  vname char (32) varying;
dcl  enname char (32) aligned;

	enname = vname;
	name2 = "";

	if substr (enname, 1, 4) = "ring" then
	     if index (enname, "_") = 0 then
		go to bad_stk_rng;


	if substr (enname, 1, 5) = "stack" then
	     if index (enname, "_") = 0 then do;

bad_stk_rng:
		call ioa_ ("stack_<n>/ring_<n> must be of the form ""stack_<n> or ring_<n>"" not ^a",
		     rtrim (enname));
		return (-1);
	     end;

	if index (enname, "stack_") ^= 0 | index (enname, "ring_") ^= 0
	then do;					/* find stack_<n> */
	     j = index (enname, "_") +1;
	     i = cv_oct_check_ (substr (enname, j, 1), code);
	     if code ^= 0 then go to bad_stk_rng;

	     if code = 0 then do;			/* must be 0 - 7 only */
		ring = i;				/* copy ring number */
		if dsegp -> sdw.entry_bound ^= "0"b then /* if we have a stack */
		     return (bin (dsegp -> sdw.entry_bound || bit (ring))); /* cancat. ring to stack in dbr */

		else do;				/* ??? */
		     call ioa_ ("^/No stack base for ^a in this particular process.", rtrim (enname));
		     return (-1);
		end;

	     end;
	end;

	call ring0_get_$segptr_given_slt ("", enname, genp, code, sltptr, sltnp);
	if code = 0 then return (fixed (baseno (genp), 17));
	if sstnp = null then do;
	     call ioa_ ("NO SSTNT");
	     return (-1);
	end;


	if (baseno (genp) = "0"b) & (enname ^= "dseg") then
	     go to bad_name;


	call get_ptr (dsegno, dsegp, bcode, odsp);

	if dsegp = null then return (-1);
	i = divide (bcode, 2, 17, 0) - 1;
	do j = hcscnt + 1 to i while (i >= j);
	     out = namef_$no_comp (baseptr (j), odsp);
	     call expand_path_ (addr (out), length (out), addr (dir_name), addr (name2), bcode);
	     if name2 = enname then return (j);
	end;
bad_name:	call ioa_ ("^a not found", rtrim (enname));
	return (-1);

p_valid:	entry (p_ptr) returns (bit (1));
	b_ret = "1"b;
	if baseno (p_ptr) = "077777"b3 then		/* if null ptr */
	     return ("0"b);				/* return */
	if p_ptr -> its.mod then
	     return ("0"b);
	go to val_com;
val_ptr:	entry (p_ptr) returns (char (16) aligned);
dcl  p_ptr ptr;
dcl  va_ptr ptr;
dcl  b_ret bit (1);
dcl  ppasbit bit (72) based (p_ptr);
dcl  pasbit bit (72) based (addr (va_ptr));
dcl  illbitof bit (72) int static options (constant) init ("777777777777777777077000"b3);
dcl  valdt char (16) aligned;
	valdt = "";
	b_ret = "0"b;
val_com:
	if p_ptr -> its.its_mod ^= "100011"b then
	     if b_ret then
		return ("0"b);
	     else return ("Invalid");
	else if b_ret then
	     return ("1"b);
	pasbit = ppasbit & illbitof;			/* copy  and and out illegal bits in ptr */
	call ioa_$rsnnl ("^p", valdt, j, va_ptr);
	return (valdt);

/* output_mode - entry to determine  long/short output mode based on terminal or file line length */

output_mode: entry returns (bit (1));

dcl  oml fixed bin;
	oml = get_line_length_$switch (null, bcode);	/* find terminal line length */
	if oml < 118 & bcode = 0 then			/* if ll < 118 and not a file */
	     return ("0"b);				/* 4 words / line */
	else return ("1"b);				/* 8 words / line */

/*  */

/* dump_oct - entry to display words in octal depending on line length */

dump_oct:	entry (dmp, doffset, nwds);

dcl (dmp, pp, tp) ptr;
dcl (doffset, poffset) fixed bin (18);
dcl (ln, opl, mod8, div8, nwds) fixed bin;
dcl (lo, nprt, pequal) bit (1);
dcl  w (0 : 7) fixed bin based (pp);
dcl  wab bit (8 * 36) based;
dcl  vfmt char (184) int static options (constant) init
    ("^6o ^6o^[ ^w^;^2( ^w^)^;^3( ^w^)^;^4( ^w^)^;^4( ^w^)^[^2s^;^/^6o ^6o^] ^w^;^4( ^w^)^[^2s^;^/^6o ^6o^]^2( ^w^)^;^4( ^w^)^[^2s^;^/^6o ^6o^]^3( ^w^)^;^4( ^w^)^[^2s^;^/^6o ^6o^]^4( ^w^)^]");

	lo = output_mode ();			/* find terminal line length */
	div8 = divide (nwds - 1, 8, 17, 0);		/* find out how many full lines to dump */
	mod8 = 8;
	pp = dmp;
	tp = null;
	poffset = doffset;
	opl = doffset + nwds;
	nprt, pequal = "0"b;

	do i = 0 by 8 while (poffset < opl);
	     if nprt then				/* if last line was not printed */
		pequal = "1"b;
	     if tp ^= null then			/* if not first line */
		if tp -> wab = pp -> wab then		/* and if last line iss equal to this line */
		     nprt = "1"b;			/* then don't print it */
		else nprt = "0"b;			/* else print the line */
	     if pequal & (^nprt | div8 = 0) then do;	/* if we have skipped n lines print a string of "=" */
		pequal = "0"b;
		call ioa_ ("^7x========");
	     end;
	     if ^nprt | div8 = 0 then do;		/* if we wandt to print line or if last line */
		if div8 = 0 then
		     mod8 = mod (nwds, 8);
		if mod8 = 0 then
		     mod8 = 8;
		call ioa_ (vfmt, poffset, i, mod8, w (0), w (1), w (2), w (3), lo,
		     poffset + 4, i + 4, w (4), w (5), w (6), w (7));
	     end;
	     tp = pp;				/* copy current line pointer for equal line compare */
	     pp = addrel (pp, 8);			/* increment to nxt line */
	     poffset = poffset + 8;
	     div8 = div8 - 1;
	end;
	return;

/*  */

% include bos_dump;
% include its;
% include sdw;
% include stack_header;
% include stack_frame;
% include db_arg_list;
% include signaller_stack;
     end ol_dump_util_;
