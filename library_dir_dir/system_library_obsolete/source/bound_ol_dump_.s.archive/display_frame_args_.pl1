/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


display_frame_args_: proc (segno, stkp, stkbp, odsp);

/* Modified August, 1980 by Rich Coppola to fix bug causing oob when number */
/* of args ^= number expected. */
/* Modified April 1981 by Rich Coppola to fix bug causing causing OOSB attempting to output too many chars */

dcl  segno fixed bin;				/* segno of current stack seg */
dcl (stkp, stkbp) ptr;
% include ol_dump_struc;
dcl  ol_dump_util_$get_ptr entry (fixed bin, ptr, fixed bin (35), ptr);
dcl  ol_dump_util_$get_ptr_quiet entry (fixed bin, ptr, fixed bin (35), ptr);
dcl  ol_dump_util_$fnd_hcseg entry (char (32) aligned, ptr, fixed bin (24), ptr);
dcl  ol_dump_util_$p_valid entry (ptr) returns (bit (1));
dcl  hcs_$initiate_count entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (24),
     fixed bin (2), ptr, fixed bin (35));
dcl  expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  namef_$no_comp entry (ptr, ptr) returns (char (*));
dcl  namef_ entry (ptr, ptr) returns (char (*));
dcl (ioa_, ioa_$rsnnl) entry options (variable);
dcl  get_entry_arg_descs_ entry (ptr, fixed bin, (*) ptr, fixed bin (35));
dcl  decode_descriptor_ entry (ptr, fixed bin, fixed bin,
     bit (1) aligned, fixed bin, fixed bin, fixed bin);

dcl 1 arglist aligned based (ap),
    2 arg_count bit (17) unaligned,
    2 pad1 bit (1) unaligned,
    2 argcode bit (18) unaligned,			/* 4 for interproc call, 8 for internal call */
    2 desc_count bit (17) unaligned,
    2 pad2 bit (1) unaligned,
    2 argzero bit (18) unaligned;

dcl 1 desc based aligned,
    2 version bit (1) unal,
    2 type fixed bin (5) unal,
    2 packed bit (1) unal,
    2 ndims bit (4) unal,
    2 length fixed bin (23) unal;

dcl (sl, code) fixed bin (35);
dcl (i, j, k, a_cnt, d_cnt, epargs, type, dims, strl, scale) fixed bin;
dcl (ap, sb, tp, ep, dp, argp, fabp, fsbp) ptr;
dcl  b_ptr ptr based;
dcl  b_cnt fixed bin (24);
dcl  dir_name char (168) aligned;
dcl  sname char (32) aligned;
dcl  p_buf char (64);
dcl  argstr char (30);
dcl  descp (64) ptr;
dcl  h_desc (64) bit (36);
dcl  argptr (64) ptr;
dcl  c75 char (75) aligned;
dcl  ptr_array (0: 10) ptr based (argp);
dcl  bit17 bit (17) unaligned based (argp);
dcl  fword (4) fixed bin (35) based (argp);
dcl  flword (2) float bin based (argp);
dcl  dblword (2) float bin (63) based (argp);
dcl  dblfix (2) fixed bin (71) based (argp);
dcl  power float bin;
dcl  bit_string bit (strl) based (argp);
dcl  char_string char (strl) based (argp);
dcl  ttype char (20);

dcl (null, length, addr, addrel, baseno, divide, fixed, rel, hbound, substr, index, bin, float, max, min, search, verify, mod) builtin;

dcl (wordfix, wordfix1) fixed bin (35),
     hword fixed bin (35) based (argp),
     owordfix bit (36) aligned based (addr (wordfix)),
     owordfix1 bit (36) aligned based (addr (wordfix1)),
    (word_dblfix, word_dblfix1) fixed bin (71),
     oword_dblfix bit (72) aligned based (addr (word_dblfix)),
     oword_dblfix1 bit (72) aligned based (addr (word_dblfix1)),
    (wordflo, wordflo1) float bin (63),
     owordflo bit (72) aligned based (addr (wordflo)),
     owordflo1 bit (72) aligned based (addr (wordflo1)),
    (worddec, worddec1) fixed dec (59),
     oworddec char (60) based (addr (worddec)),
     oworddec1 char (60) based (addr (worddec1)),
    (worddecflo, worddecflo1) float dec (59),
     oworddecflo char (61) based (addr (worddecflo)),
     oworddecflo1 char (61) based (addr (worddecflo1));

dcl  bbits bit (1000) based (argp);
dcl  bchrs char (1000) based (argp);

dcl  packed bit (1) aligned;


dcl 1 fab based (fabp) aligned,
    2 switch bit (36),
    2 filename char (32);

dcl  packptr ptr based unal;

dcl 1 lv based (argp) aligned,
    2 ptr ptr,
    2 stack ptr;

dcl  NTYPES fixed bin int static options (constant) init (24);
dcl  argtypes (23) char (20) aligned int static init
    ("fixed bin",					/* real, short */
     "fixed bin",					/* real, long */
     "float bin",					/* real, short */
     "float bin",					/* real, long */
     "cplx fixed bin",				/* short */
     "cplx fixed bin",				/* long */
     "cplx float bin",				/* short */
     "cplx float bin",				/* long */
     "fixed dec",
     "float dec",
     "Cplx fixed dec",
     "Cplx float dec",
     "Pointer",
     "Offset",
     "Label",
     "Entry",
     "Structure",
     "Area",
     "Bit",
     "Varying bit",
     "Char",
     "Char varying",
     "File");

dcl  LEGAL char (96) int static options (constant) init	/* Printables except PAD, but with BS */
    (" !""#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~");

/*  */

	sb = stkbp;
	sp = stkp;
	if ^ol_dump_util_$p_valid (addr (arg_ptr)) then do; /* make sure we have a good ptr */
badap:
	     call ioa_ ("^/^8xARG Pointer invalid^/");
	     return;
	end;
	if arg_ptr = null then			/* we don't need to look at null arg ptrs */
	     go to badap;
	ap = arg_ptr;
	call ioa_ ("^/^8xARG list @ ^p", ap);

/* find out if arg list is in this stack seg */

	if fixed (baseno (ap)) ^= segno then do;
	     call ol_dump_util_$get_ptr_quiet (fixed (baseno (ap)), tp, sl, odsp);
	     if tp = null then			/* can't find seg in dump */
		call find_seg (ap, tp);		/* try search dirs */
	     if tp = null then do;			/* no luck give the bad news */
		call ioa_ ("^8xCannot initiate segment #^o (^a)",
		     fixed (baseno (ap)), namef_$no_comp (ap, odsp));
		return;
	     end;
	     ap = addrel (tp, rel (ap));
	     sb = tp;
	end;
	else ap = addrel (sb, rel (ap));
	a_cnt = fixed (arg_count);
	d_cnt = fixed (desc_count);

/* do some consistancy checking on the arg list first */

	if argzero ^= (18)"0"b then
	     go to badah;
	if argcode ^= "000004"b3 then
	     if argcode ^= "000010"b3 then
	     if argcode ^= "000000"b3 then
		go to badah;
	if d_cnt ^= 0 then
	     if d_cnt ^= a_cnt then do;
badah:
		call ioa_ ("^8xARG list header invalid^/");
		return;
	     end;
	if a_cnt = 0 then do;
	     call ioa_ ("^8xNo arguments^/");
	     return;
	end;

/* process arg pointers */

	dp = addrel (ap, 2);
	do i = 1 to a_cnt;				/* set up each arg ptr */
	     if ^ol_dump_util_$p_valid (addr (dp -> b_ptr)) then
		argptr (i) = null;
	     else do;
		if baseno (dp -> b_ptr) = baseno (sp -> stack_frame.arg_ptr) then
		     argptr (i) = addrel (sb, fixed (rel (dp -> b_ptr)));
		else do;
		     call ol_dump_util_$get_ptr_quiet (fixed (baseno (dp -> b_ptr)), tp, sl, odsp);
		     if tp = null then
			call find_seg (dp -> b_ptr, tp);
		     if tp = null then
			argptr (i) = null;
		     else argptr (i) = addrel (tp, fixed (rel (dp -> b_ptr)));
		end;
		if dp -> its.bit_offset &
		argptr (i) ^= null then do;
		     tp = addr (argptr (i));
		     tp -> its.bit_offset = dp -> its.bit_offset;
		end;
	     end;
	     dp = addrel (dp, 2);			/* get nxt arg pointer */
	end;

	if d_cnt = 0 then do;			/* no descriptors, use entry ptr or hueristics */
	     if ^ol_dump_util_$p_valid (addr (entry_ptr)) then
		go to hur_desc;			/* entry ptr invalid, use huristics */
	     call find_seg (entry_ptr, ep);		/* initiate the entry ptr segment */
	     if ep = null then			/* can't initiate seg, use huristics */
		go to hur_desc;
	     call huristicate_desc;

	     ep = addrel (ep, rel (entry_ptr));
	     call get_entry_arg_descs_ (ep, epargs, descp, code); /* get descriptors from entry seq */
	     if code ^= 0 then do;			/* no luck, huristicate descriptors */
hur_desc:
		call huristicate_desc;
	     end;
	end;

/* we will use the descriptors from the arg list */

	else do;
	     dp = addrel (ap, (a_cnt * 2) + 2);
	     do i = 1 to a_cnt;			/* set up each descriptor ptr */
		if argptr (i) ^= null then do;
		     if ^ol_dump_util_$p_valid (addr (dp -> b_ptr)) then
			go to hur_desc;		/* form descriptor with huristics */
		     else do;
			if baseno (dp -> b_ptr) = baseno (sp -> stack_frame.arg_ptr) then /* found desc in this stack seg */
			     descp (i) = addrel (sb, fixed (rel (dp -> b_ptr)));
			else do;
			     call ol_dump_util_$get_ptr_quiet (fixed (baseno (dp -> b_ptr)), tp, sl, odsp);
			     if tp = null then	/* can't find in dump, look online */
				call find_seg (dp -> b_ptr, tp);
			     if tp = null then
				go to hur_desc;	/* form descriptor with huristics */
			     else descp (i) = addrel (tp, fixed (rel (dp -> b_ptr)));
			end;
			if dp -> its.bit_offset then do;
			     tp = addr (descp (i));
			     tp -> its.bit_offset = dp -> its.bit_offset;
			end;
		     end;
		     if descp (i) -> desc.type > 23 | descp (i) -> desc.type <= 0 then
			go to hur_desc;
		end;
		else descp (i) = null;

		dp = addrel (dp, 2);		/* get nxt descriptor */
	     end;
	end;

/* We now should have valid pointers to args and descriptors. Now process args */

	dp = addrel (ap, 2);			/* set up dump arg ptr */
	do j = 1 to a_cnt;
	     call ioa_$rsnnl ("^8xARG ^2d @ ^p", argstr, i, j, dp -> b_ptr);
	     if argptr (j) = null then
		call ioa_ ("^29a Arg pointer invalid", argstr);
	     else do;
		call decode_descriptor_ (descp (j), 0, type, packed, dims, strl, scale);
		argp = argptr (j);			/* copy arg ptr */
		if type < -1 then go to unknown_type;
		if type > NTYPES then go to unknown_type;
		if type <= 12 then
		     call ioa_$rsnnl ("^a (^d,^d):^-", ttype, i,
		     argtypes (type), strl, scale);
		go to form (type);


/* Real fixed binary short. */

form (1):		if packed then do;			/* Unpack item if packed. */
		     wordfix = 0;
		     substr (owordfix, 36-strl, strl+1) = substr (bbits, 1, strl+1);
		end;
		else wordfix = fword (1);		/* Else just copy. */
		if scale = 0 then power = 1; else power = 2 ** -scale;
		if wordfix <= 7 then
		     call ioa_ ("^29a - ^a ^d", argstr, ttype, wordfix);
		else call ioa_ ("^29a - ^a ^d (dec) ^o (oct)", argstr, ttype, wordfix, wordfix);
		go to nxtarg;

/* Real fixed binary long. */

form (2):		if packed then do;
		     word_dblfix = 0;
		     substr (oword_dblfix, 72-strl, strl+1) = substr (bbits, 1, strl+1);
		end;
		else word_dblfix = dblfix (1);
		if scale = 0 then power = 1; else power = 2 ** -scale;
		call ioa_ ("^29a - ^a ^w ^w", argstr, ttype, substr (oword_dblfix, 1, 36), substr (oword_dblfix, 37, 36));
		go to nxtarg;

/* Real float binary short. */

form (3):		if packed then do;
		     owordflo = "0"b;
		     substr (owordflo, 1, strl+9) = substr (bbits, 1, strl+9);
		end;
		else wordflo = flword (1);
		call ioa_ ("^29a - ^a ^f", argstr, ttype, wordflo);
		go to nxtarg;

/* Real float binary long. */

form (4):		if packed then do;
		     owordflo = "0"b;
		     substr (owordflo, 1, strl+9) = substr (bbits, 1, strl+9);
		end;
		else wordflo = dblword (1);
		call ioa_ ("^29a - ^a ^f", argstr, ttype, wordflo);
		go to nxtarg;

/* Complex fixed binary short. */

form (5):		if packed then do;
		     wordfix = 0;
		     wordfix1 = 0;
		     substr (owordfix, 36-strl, strl+1) = substr (bbits, 1, strl+1);
		     substr (owordfix1, 36-strl, strl+1) = substr (bbits, strl+2, strl+1);
		end;
		else do;
		     wordfix = fword (1);
		     wordfix1 = fword (2);
		end;
		if scale = 0 then power = 1; else power = 2 ** -scale;
		call ioa_ ("^29a - ^a ^d + ^di", argstr,
		     wordfix, wordfix1);
		go to nxtarg;

/* Complex fixed binary long. */

form (6):		if packed then do;
		     word_dblfix = 0;
		     word_dblfix1 = 0;
		     substr (oword_dblfix, 72-strl, strl+1) = substr (bbits, 1, strl+1);
		     substr (oword_dblfix1, 72-strl, strl+1) = substr (bbits, strl+2, strl+1);
		end;
		else do;
		     word_dblfix = dblfix (1);
		     word_dblfix1 = dblfix (2);
		end;
		if scale = 0 then power = 1; else power = 2 ** -scale;
		call ioa_ ("^29a - ^a ^w ^w + ^w ^wi", argstr,
		     substr (oword_dblfix, 1, 36), substr (oword_dblfix, 37, 36),
		     substr (oword_dblfix1, 1, 36), substr (oword_dblfix1, 37, 36));
		go to nxtarg;

/* Complex float binary short. */

form (7):		if packed then do;
		     owordflo = "0"b;
		     owordflo1 = "0"b;
		     substr (owordflo, 1, strl+9) = substr (bbits, 1, strl+9);
		     substr (owordflo1, 1, strl+9) = substr (bbits, strl+10, strl+9);
		end;
		else do;
		     wordflo = flword (1);
		     wordflo = flword (2);
		end;
		call ioa_ ("^29a - ^a ^f + ^fi", argstr,
		     wordflo, wordflo1);
		go to nxtarg;

/* Complex float binary long. */

form (8):		if packed then do;
		     owordflo = "0"b;
		     owordflo1 = "0"b;
		     substr (owordflo, 1, strl+9) = substr (bbits, 1, strl+9);
		     substr (owordflo1, 1, strl+9) = substr (bbits, strl+10, strl+9);
		end;
		else do;
		     wordflo = dblword (1);
		     wordflo = dblword (2);
		end;
		call ioa_ ("^29a - ^a ^f + ^fi", argstr,
		     wordflo, wordflo1);
		go to nxtarg;

/* Real fixed decimal. */

form (9):		oworddec = (60)"0";
		substr (oworddec, 1, 1) = substr (bchrs, 1, 1);
		substr (oworddec, 60-strl, strl) = substr (bchrs, 2, strl);
		if scale = 0 then power = 1; else power = 10 ** -scale;
		call ioa_ ("^29a - ^a ^f", argstr, ttype, bin (float (worddec*power)));
		go to nxtarg;

/* Real float decimal. */

form (10):	oworddecflo = (61)"0";
		substr (oworddecflo, 1, 1) = substr (bchrs, 1, 1);
		substr (oworddecflo, 60-strl, strl+1) = substr (bchrs, 2, strl+1);
		call ioa_ ("^29a - ^a ^f", argstr, ttype, bin (worddecflo));
		go to nxtarg;

/* Complex fixed decimal. */

form (11):	oworddec, oworddec1 = (60)"0";
		substr (oworddec, 1, 1) = substr (bchrs, 1, 1);
		substr (oworddec, 60-strl, strl) = substr (bchrs, 2, strl);
		substr (oworddec1, 1, 1) = substr (bchrs, strl+2, 1);
		substr (oworddec, 60-strl, strl) = substr (bchrs, strl+3, strl);
		if scale = 0 then power = 1; else power = 10 ** -scale;
		call ioa_ ("^29a - ^a ^f + ^fi", argstr,
		     bin (float (worddec*power)), bin (float (worddec1*power)));
		go to nxtarg;

/* Complex float decimal */

form (12):	oworddecflo, oworddecflo1 = (61)"0";
		substr (oworddecflo, 1, 1) = substr (bchrs, 1, 1);
		substr (oworddecflo, 60-strl, strl+1) = substr (bchrs, 2, strl+1);
		substr (oworddecflo1, 1, 1) = substr (bchrs, strl+3, 1);
		substr (oworddecflo1, 60-strl, strl+1) = substr (bchrs, strl+4, strl+1);
		call ioa_ ("^29a - ^a ^f + ^fi", argstr,
		     bin (worddecflo), bin (worddecflo1));
		go to nxtarg;

/* Pointer. */

form (13):	if packed then do;			/* packed ptr */
		     tp = argp -> packptr;
		     go to pptr;
		end;
		if ol_dump_util_$p_valid (addr (argp -> b_ptr)) then do;
		     tp = argp -> ptr_array (0);
pptr:
		     call ioa_ ("^29a - ^[Packed ^;^]^a:^-^p ^a", argstr, packed,
			argtypes (type), tp, namef_ (tp, odsp));
		end;
		else call ioa_ ("^29a - ^w ^w", argstr, fword (1), fword (2));
		go to nxtarg;

/* Label, entry. */

form (15): form (16):
		call ioa_ ("^29a - ^p ^p ^a^a", argstr, argp -> lv.ptr, argp -> lv.stack,
		     namef_ (argp -> lv.ptr, odsp), namef_ (argp -> lv.stack, odsp));
		go to nxtarg;

/* Bit string. */

form (20):	strl = addrel (argp, -1) -> fword (1);

form (19):	c75 = """";			/* initial quote */
		k = 0;				/* count 1-bits */
		do i = 1 to min (strl, 72);
		     if substr (bit_string, i, 1) then do;
			k = k + 1;
			substr (c75, i+1, 1) = "1";
		     end;
		     else substr (c75, i+1, 1) = "0";
		end;
		substr (c75, i+1, 2) = """b";
		if (strl <= 72 & strl > 1) then	/* Maybe compress representation */
		     if k = 0 then call ioa_$rsnnl (" (^d)""0""b", c75, k, strl);
		     else if k = strl then call ioa_$rsnnl (" (^d)""1""b", c75, k, strl);
		k = mod (strl, 3);
		if k = 0 then
		     call ioa_$rsnnl ("""^.3b""b3", c75, k, substr (bbits, 1, strl));
		call ioa_ ("^29a - ^a (^d):^-^a", argstr, argtypes (type), strl, c75);
		go to nxtarg;

/* Character strings. */

form (22):	strl = max (addrel (argp, -1) -> fword (1), 0);



form (21):	strl = min (80, strl);
		call ioa_ ("^29a - ^a (^d):^-""^a""", argstr, argtypes (type),
		     strl, char_string);
		go to nxtarg;

/* File. */

form (23):	fsbp = ptr_array (2);		/* Locate File Static Block. */
		fabp = ptr_array (1);
		if fsb.open then
		     call ioa_ ("^29a - File ^a - ^a", argstr,
		     fsb.filename, fsb.title);
		else call ioa_ ("^29a - File ^a", argstr, fab.filename);
		go to nxtarg;

/* undetermined type from huristicate_desc */

form (24):
		call ioa_ ("^29a - ^w^-*Bad Descriptor*", argstr, hword);
		go to nxtarg;

/* Offset, or cannot determine type. */

form (-1): form (0): form (14):
		call ioa_ ("^29a - ^w", argstr, fword (1)); /* full word octal */
		go to nxtarg;

/* Types we cannot handle: Area, Structure. */

unknown_type:	call ioa_$rsnnl ("type ^d", ttype, strl, type);
		go to default;

form (17): form (18):
		ttype = argtypes (type);
default:		call ioa_ ("^29a - (^a at ^p) ^w", argstr, ttype, argp, fword (1));

		if dims > 0 then call ioa_ ("^- (^d-dim array)", dims);
		end;
nxtarg:	       dp = addrel (dp, 2);		/* increment arg ptr */

skiparg:	end;
	call ioa_ (" ");
	return;

/*  */

/* find_seg - internal procedure to initiate segment */


find_seg:	proc (inptr, otptr);
dcl (inptr, otptr) ptr;
	     p_buf = namef_$no_comp (inptr, odsp);
	     if substr (p_buf, 1, 1) = ">" then		/* if not hardcore */
		call expand_path_ (addr (p_buf), length (p_buf), addr (dir_name), addr (sname), code);
	     else sname = p_buf;			/* copy for compatibility */
	     if substr (p_buf, 1, 1) ^= ">" | substr (p_buf, 1, 4) = ">sl1" then
		call ol_dump_util_$fnd_hcseg (sname, otptr, b_cnt, odsp);
	     else call hcs_$initiate_count (dir_name, sname, "", b_cnt, 0, otptr, code);
	end find_seg;

/* huristicate_desc - internal procedure to form data descriptors by huristicates */

huristicate_desc: proc;

	     do i = 1 to a_cnt;			/* process 1 descriptor for each arg */
		if argptr (i) ^= null then do;
		     dp, descp (i) = addr (h_desc (i));
		     h_desc (i) = "0"b;
		     dp -> desc.version = "1"b;
		     tp = addr (argptr (i));
		     if substr (tp -> its.offset, 18, 1) ^= "1"b then /* if even offset */
			if tp -> its.bit_offset = "0"b then /* and no bit offset */
			     if ol_dump_util_$p_valid (argptr (i)) then do; /* valid ptr */
				dp -> desc.type = 13; /* set type = to ptr */
				go to ndesc;
			     end;
		     if verify (substr (argptr (i) -> bchrs, 1, 1), LEGAL) = 0 then do; /* char string */
			dp -> desc.type = 21;	/* set type to char string */
			dp -> desc.length = verify (argptr (i) -> bchrs, LEGAL) - 1;
		     end;
		     else dp -> desc.type = 24;	/* cannot huristicate desc */
		end;
		else descp (i) = null;
ndesc:
	     end;
	end huristicate_desc;

/*  */
% include stack_frame;
% include its;
% include plio2_fsb;

     end display_frame_args_;
