/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


display_am_: proc ();

	return;					/* should never enter here */

/* Associative memory display program for ol_dump.
   * Last modified 08/25/80 W. Olin Sibert, to make it work properly for PRDS assoc mems
   * Last modified 09/09/80 R. L. Coppola, to make it work for l68 or DPS8/70 cpu's
   * Last Modified June 1981 by Rich Coppola to add consistency checking.
   */

dcl (idx, jdx, type, IDX, first_entry, last_entry, first_level, last_level) fixed bin;
dcl  CPU_NO fixed bin (3);
dcl  tag (0:7) char (1) int static options (constant) init
    ("a", "b", "c", "d", "e", "f", "g", "h");
dcl  AM_LEVEL (1:4) char (1) int static options (constant) init
    ("A", "B", "C", "D");				/* levels of dps8 AMs */
dcl  DPS8xxM bit (1);				/* denotes a dps8 cpu */
dcl  val_btld bit (1) init ("0"b);
dcl  code fixed bin (35);
dcl  def_offset fixed bin (18);
dcl  error bit (1);
dcl (reg_ptr, ptr_ptr) ptr;
dcl  seg_ptr pointer;
dcl  flag_string char (7);
dcl  dup_entry (0:63) bit (1) unal;
dcl (first, last) fixed bin int static;
dcl (sdw_regs_ptr, sdw_ptrs_ptr, ptw_regs_ptr, ptw_ptrs_ptr) pointer;

dcl 1 sdw_regs (0:63) aligned like amsdwreg based (sdw_regs_ptr);
dcl 1 sdw_ptrs (0:63) aligned like amsdwptr based (sdw_ptrs_ptr);
dcl 1 ptw_regs (0:63) aligned like amptwreg based (ptw_regs_ptr);
dcl 1 ptw_ptrs (0:63) aligned like amptwptr based (ptw_ptrs_ptr);

dcl  ioa_ entry options (variable);
dcl  ioa_$rsnnl entry options (variable);
dcl  namef_ entry (ptr, ptr) returns (char (*));
dcl  namef_$no_comp entry (ptr, ptr) returns (char (*));
dcl  ring0_get_$definition_given_slt entry (ptr, char (*), char (*), fixed bin (18),
     fixed bin, fixed bin (35), ptr, ptr, ptr);
dcl  ol_dump_util_$get_ptr entry (fixed bin, ptr, fixed bin (35), ptr); /* :: */
dcl  ol_dump_util_$fnd_dbr entry (fixed bin (24), fixed bin (35), fixed bin (35), ptr);
dcl (addr, addrel, binary, baseptr, fixed, null, substr) builtin;
dcl  usage_string char (8);


dcl  nregs fixed bin;				/* number of regs/ptrs in am saved by fim.
						   * Could be 16/64 depending on whether
						   * the cpu is a dpse or l68 */

/*  */

display_am_$sdw: entry (odsp, CPU_NO);


	call get_args ("0"b, error, nregs);		/* get additional args, etc */
	if error then return;			/* if problem, go back to request */


	call validate_am_sdw (nregs, odsp);

	first_entry = 0;
	last_entry = 15;



	if DPS8xxM then do;
	     first_level = 1;
	     last_level = 4;
	end;

	else do;
	     first_level = 1;
	     last_level = 1;
	end;


	call ioa_ (" ADDRESS^2xRINGS^2xBOUND^2xREWPUGC^4xCL F/E USAGE-CT SEG # SEG_NAME");


	do IDX = first_level to last_level;
	     if DPS8xxM then
		call ioa_ ("^/LEVEL [^a]^/", AM_LEVEL (IDX));
	     do idx = first_entry to last_entry;
		call ioa_$rsnnl ("^[R^; ^]^[E^; ^]^[W^; ^]^[P^; ^]^[U^; ^]^[G^; ^]^[C^; ^]",
		     flag_string, (0),		/* generate the REWPUGC string */
		     sdw_regs (idx).read,
		     sdw_regs (idx).execute,
		     sdw_regs (idx).write,
		     sdw_regs (idx).privileged,
		     sdw_regs (idx).unpaged,
		     sdw_regs (idx).entry_bound_sw,
		     sdw_regs (idx).cache);

		if ^DPS8xxM then
		     call ioa_$rsnnl ("^6x^2d", usage_string, (0),
		     binary (sdw_ptrs (idx).usage, 4));

		else call ioa_$rsnnl ("^2x^6b", usage_string, (0),
		     sdw_ptrs (idx).usage);


		call ioa_ ("^8o^2x^1.3b,^1.3b,^1.3b ^6o^2x^7a ^[^5o^;^s^4x-^]^2x^[F^;E^]^2x^8a ^5o ^[^a^;^s N/A^]^[^/^-*** POSSIBLE DUPLICATE ENTRY ***^]",

		     binary (sdw_regs (idx).addr, 24),
		     sdw_regs (idx).r1,
		     sdw_regs (idx).r2,
		     sdw_regs (idx).r3,
		     binary ((sdw_regs (idx).bound || "0000"b), 18),
		     flag_string,
		     ((^sdw_regs (idx).entry_bound_sw) & sdw_regs (idx).execute), /* skip next if there is none */
		     binary (sdw_regs (idx).cl, 14),
		     sdw_ptrs (idx).valid,
		     usage_string,
		     binary (sdw_ptrs (idx).pointer, 15),
		     sdw_ptrs (idx).valid,		/* skip the naming if the entry isn't valid */
		     namef_$no_comp (baseptr (binary (sdw_ptrs (idx).pointer, 15)), odsp),
		     dup_entry (idx));
	     end;

	     first_entry = last_entry + 1;
	     last_entry = first_entry +15;

	end;
	return;

/*  */

display_am_$ptw: entry (odsp, CPU_NO);

	call get_args ("1"b, error, nregs);		/* get additional args, etc */
	if error then return;			/* if problem, go back to request */

	call ioa_ (" ADDRESS^3xM^2xF/E USAGE_CT SEG # PAGE SEG_NAME|OFFSET");
	call validate_am_ptw (nregs, odsp);


	first_entry = 0;
	last_entry = 15;



	if DPS8xxM then do;
	     first_level = 1;
	     last_level = 4;
	end;

	else do;
	     first_level = 1;
	     last_level = 1;
	end;


	do IDX = first_level to last_level;
	     if DPS8xxM then
		call ioa_ ("^/LEVEL [^a]^/", AM_LEVEL (IDX));
	     do idx = first_entry to last_entry;

		seg_ptr = addrel (baseptr (binary (ptw_ptrs (idx).pointer, 15)), (binary (ptw_ptrs (idx).pageno, 12) * 16));
						/* get a pointer to the segment, so we can get its name */

		if ^DPS8xxM then
		     call ioa_$rsnnl ("^6x^2d", usage_string, (0),
		     binary (ptw_ptrs (idx).usage, 4));

		else call ioa_$rsnnl ("^2x^6b", usage_string, (0),
		     ptw_ptrs (idx).usage);


		call ioa_ ("^8o^2x^[yes^;no ^]^2x^[F^;E^]^2x^8a ^5o ^4o ^[^a^;^s N/A^]^[^/^-*** POSSIBLE DUPLICATE ENTRY ***^]",
		     binary ((ptw_regs (idx).addr || "000000"b), 24),
		     ptw_regs (idx).modif,
		     ptw_ptrs (idx).valid,
		     usage_string,
		     binary (ptw_ptrs (idx).pointer, 15),
		     divide (binary (ptw_ptrs (idx).pageno, 12), 16, 12, 0),
		     ptw_ptrs (idx).valid,		/* skip the naming if this PTWAM entry is empty */
		     namef_ (seg_ptr, odsp),
		     dup_entry (idx));
	     end;

	     first_entry = last_entry + 1;
	     last_entry = first_entry +15;

	end;
	return;

/*  */

get_args:	proc (sp_bit, err_bit, nregs);

/* get_args - internal proc to process args for assosiative memory display requests */

dcl (sp_bit, err_bit) bit (1);
dcl  am_data_ptr pointer;
dcl  prds_ptr pointer;
dcl  def_offset fixed bin (18);
dcl  nregs fixed bin;
dcl  tempp ptr;
dcl  last_three_sets bit (48*36) based;			/* # regs * bits/words in the rest of the set */


	     err_bit = "0"b;			/* reset error flag */
	     dumpptr = dumpp (0);			/* set dump ptr to comp. 0 */

	     if argcnt < 1 then do;			/* if no args, prt assosiative mem. from dump */
		sdw_regs_ptr = addr (dump.amsdwregs);
		sdw_ptrs_ptr = addr (dump.amsdwptrs);
		ptw_regs_ptr = addr (dump.amptwregs);
		ptw_ptrs_ptr = addr (dump.amptwptrs);
	     end;

	     else do;				/* user wants them from prds */
		if argcnt > 1 | arg (1) ^= "prds" then do; /* tell user what to type */
		     call ioa_ ("Usage: am^[sdw^;ptw^] {prds}", sp_bit);
		     err_bit = "1"b;		/* set error flag */
		     return;
		end;

		call ol_dump_util_$get_ptr (prdsseg, prds_ptr, code, odsp); /* get ptr to prds */
		if prds_ptr = null then do;		/* did'nt find */
		     err_bit = "1"b;		/* set error flag */
		     return;
		end;

		call ring0_get_$definition_given_slt (null, "prds", "am_data",
		     def_offset, type, code, sltptr, sltnp, defptr);

		am_data_ptr = addrel (prds_ptr, def_offset);

		call ring0_get_$definition_given_slt (null, "prds", "ptw_am_regs",
		     def_offset, type, code, sltptr, sltnp, defptr);
		ptw_regs_ptr = addrel (prds_ptr, def_offset);


		call ring0_get_$definition_given_slt (null, "prds", "ptw_am_ptrs",
		     def_offset, type, code, sltptr, sltnp, defptr);
		ptw_ptrs_ptr = addrel (prds_ptr, def_offset);


		call ring0_get_$definition_given_slt (null, "prds", "sdw_am_regs",
		     def_offset, type, code, sltptr, sltnp, defptr);
		sdw_regs_ptr = addrel (prds_ptr, def_offset);


		call ring0_get_$definition_given_slt (null, "prds", "sdw_am_ptrs",
		     def_offset, type, code, sltptr, sltnp, defptr);

		sdw_ptrs_ptr = addrel (prds_ptr, def_offset);

	     end;

	     call ioa_ ("^[PTW^;SDW^] Associative Memory (from CPU ^a) ^[at time of dump^;at prds$am_data^].",
		sp_bit, tag (CPU_NO), (argcnt = 0));

	     tempp = addrel (ptw_regs_ptr, 16);		/* base to 2'nd set of am */
	     if tempp -> last_three_sets = "0"b then	/* if second set is zero then */
		nregs = 15;			/* am from l68 */
	     else nregs = 63;			/* am from dps8/70m */
	     if nregs = 15 then
		DPS8xxM = "0"b;
	     else DPS8xxM = "1"b;


	     return;
	end get_args;

%page;

validate_am: proc;

dcl  no_regs fixed bin;
dcl (i, j) fixed bin;
dcl  a_odsp ptr;

validate_am_sdw: entry (no_regs, a_odsp);


	     dup_entry (*) = "0"b;

	     do i = 0 to no_regs -1;
		do j = i+1 to no_regs;
		     if (sdw_ptrs (i).valid & sdw_ptrs (j).valid) then do;

			if sdw_regs (i).addr = sdw_regs (j).addr then do;
			     dup_entry (i) = "1"b;
			     dup_entry (j) = "1"b;
			end;

			else if sdw_ptrs (i).pointer = sdw_ptrs (j).pointer then do;
			     dup_entry (i) = "1"b;
			     dup_entry (j) = "1"b;
			end;

			else if sdw_ptrs (i).usage = sdw_ptrs (j).usage then do;
			     if ^DPS8xxM then do;	/* if its not a dps8 */
				dup_entry (i) = "1"b; /* for dps8 it is LRU not usage ctr */
				dup_entry (j) = "1"b;
			     end;
			end;


			if (dup_entry (i) & dup_entry (j)) then do;
			     if sdw_regs (i).addr = sdw_regs (j).addr then
				if sdw_regs (i).bound = sdw_regs (j).bound then
				     if (sdw_regs (i).r2 & sdw_regs (i).r3) ^=
				     (sdw_regs (j).r2 & sdw_regs (j).r3) then
					if sdw_ptrs (i).pointer ^= sdw_ptrs (j).pointer then do;
					     if DPS8xxM then go to cancel_dup_sdw;
					     if sdw_ptrs (i).usage ^= sdw_ptrs (j).usage then do;
cancel_dup_sdw:					dup_entry (i), dup_entry (j) = "0"b;
					     end;
					end;
			end;


			if ((dup_entry (i) & dup_entry (j)) & val_btld) then do;
			     call ioa_ ("^/Possible duplicate entry in SDW associative memory for CPU ^a;^/", tag (CPU_NO));
			     call ioa_ (" ADDRESS^2xRINGS^2xBOUND^2xREWPUGC^4xCL F/E USAGE-CT SEG # SEG_NAME");
			     reg_ptr = addr (sdw_regs (i));
			     ptr_ptr = addr (sdw_ptrs (i));
			     call display_mismatch_sdw (reg_ptr, ptr_ptr);
			     reg_ptr = addr (sdw_regs (j));
			     ptr_ptr = addr (sdw_ptrs (j));
			     call display_mismatch_sdw (reg_ptr, ptr_ptr);
			end;


		     end;
		end;
	     end;
	     return;

validate_am_ptw: entry (no_regs, a_odsp);


	     dup_entry (*) = "0"b;

	     do i = 0 to no_regs -1;
		do j = i+1 to no_regs;
		     if (ptw_ptrs (i).valid & ptw_ptrs (j).valid) then do;
			if ptw_regs (i).addr = ptw_regs (j).addr then do;
			     dup_entry (i) = "1"b;
			     dup_entry (j) = "1"b;
			end;

			else if ptw_ptrs (i).usage = ptw_ptrs (j).usage then do;
			     if ^DPS8xxM then do;	/* if its not a dps8 */
				dup_entry (i) = "1"b;
				dup_entry (j) = "1"b;
			     end;
			end;

			else if (ptw_ptrs (i).pointer = ptw_ptrs (j).pointer)
			& (ptw_ptrs (i).pageno = ptw_ptrs (j).pageno) then do;
			     dup_entry (i) = "1"b;
			     dup_entry (j) = "1"b;
			end;



			if (dup_entry (i) & dup_entry (j)) then do;
			     if ptw_regs (i).addr = ptw_regs (j).addr then
				if ptw_ptrs (i).pointer ^= ptw_ptrs (j).pointer then do;
				     if DPS8xxM then go to cancel_dup_ptw;
				     if ptw_ptrs (i).usage ^= ptw_ptrs (j).usage then do;
cancel_dup_ptw:				dup_entry (i), dup_entry (j) = "0"b;
				     end;
				end;
			end;



			if ((dup_entry (i) & dup_entry (j)) & val_btld) then do;
			     call ioa_ ("^/Possible duplicate entry in PTW associative memory for CPU ^a;^/", tag (CPU_NO));
			     call ioa_ (" ADDRESS^3xM^2xF/E USAGE_CT SEG # PAGE");
			     reg_ptr = addr (ptw_regs (i));
			     ptr_ptr = addr (ptw_ptrs (i));

			     call display_mismatch_ptw (reg_ptr, ptr_ptr);
			     reg_ptr = addr (ptw_regs (j));
			     ptr_ptr = addr (ptw_ptrs (j));
			     call display_mismatch_ptw (reg_ptr, ptr_ptr);
			end;
		     end;
		end;
	     end;
	     return;


	end validate_am;
%page;
/* This routine compares the assoc mem to what is in the dseg/sst to validate
   the contents of SDW and PTW assoc mem are correct */


validate_am_btld: entry (odsp, seg_len, CPU_NO, icode);
dcl (tempp, tdsegp, tasdwp, taptwp, sptp) ptr;
dcl  tdsdw bit (72) based (tdsegp);
dcl  tasdw bit (72) based (tasdwp);
dcl  tdsdw_mask bit (72) init ("777777777770777777777777"b3);
dcl  tsptw bit (36) based (sptp);
dcl  taptw bit (36) based (taptwp);
dcl  tsptw_mask bit (36) init ("777777000100"b3);
dcl (seg_len, icode) fixed bin (35);
dcl (j, ptsz) fixed bin;
dcl  dump_dbr fixed bin (24);
dcl  last_three_sets bit (48*36) based;			/* # regs * bits/words in the rest of the set */


	val_btld = "1"b;
	dumpptr = dumpp (0);			/* set dump ptr to comp. 0 */

	dump_dbr = fixed (substr (dump.dbr, 1, 24), 24);
	ol_dump_struc.boot_dbr = dump_dbr;
	call ol_dump_util_$fnd_dbr (dump_dbr, seg_len, icode, odsp);


	sdw_regs_ptr = addr (dump.amsdwregs);
	sdw_ptrs_ptr = addr (dump.amsdwptrs);
	ptw_ptrs_ptr = addr (dump.amptwptrs);
	ptw_regs_ptr = addr (dump.amptwregs);


	tempp = addrel (sdw_ptrs_ptr, 16);		/* base to 2'nd set of am */
	if tempp -> last_three_sets = "0"b then		/* if second set is zero then */
	     nregs = 15;				/* am from l68 */
	else nregs = 63;				/* am from dps8/70m */
	if nregs = 15 then
	     DPS8xxM = "0"b;
	else DPS8xxM = "1"b;


VALIDATE_SDW:


	call validate_am_sdw (nregs, odsp);


	do idx = 0 to nregs;			/* cycle thru ass mem */
	     if sdw_ptrs (idx).valid then do;		/* only for valid entries */
		tdsegp = addrel (dsegp, (bin (sdw_ptrs (idx).pointer, 15) * 2));
		tasdwp = addr (sdw_regs (idx));
		if (tdsdw & tdsdw_mask) ^= tasdw then do;
		     call ioa_ ("^/Mis-Match between SDWAM and dseg on BOS CPU (^a);^/", tag (CPU_NO));

		     call ioa_ (" ADDRESS^2xRINGS^2xBOUND^2xREWPUGC^4xCL F/E USAGE-CT SEG # SEG_NAME");
		     reg_ptr = addr (sdw_regs (idx));
		     ptr_ptr = addr (sdw_ptrs (idx));
		     call display_mismatch_sdw (reg_ptr, ptr_ptr);
		     call display_dseg_entry (tdsegp);
		end;


	     end;
	end;

VALIDATE_PTW:

	call validate_am_ptw (nregs, odsp);

	if sstptr = null then
	     return;

	sstp = sstptr;

	do idx = 0 to nregs;
	     if ptw_ptrs (idx).valid then do;
		sdwp = addr (dsegp -> sdwa (bin (ptw_ptrs (idx).pointer, 15)));
		ptp = ptr (sstp, fixed (sdw.add, 24) - fixed (sst.ptwbase, 18)); /* get a ptr to page tbl */
		astep = addrel (ptp, -sst.astsize);
		ptsz = sst.pts (fixed (aste.ptsi, 3));
		sptp = addrel (ptp, (divide (binary (ptw_ptrs (idx).pageno, 12), 16, 12, 0)));
		taptwp = addr (ptw_regs (idx));
		if (tsptw & tsptw_mask) ^= taptw then do; /* found a bad one */
		     call ioa_ ("^/Mis-Match between PTWAM and page table on BOS CPU (^a);^/", tag (CPU_NO));
		     call ioa_ (" ADDRESS^3xM^2xF/E USAGE_CT SEG # PAGE");
		     reg_ptr = addr (ptw_regs (idx));
		     ptr_ptr = addr (ptw_ptrs (idx));
		     call display_mismatch_ptw (reg_ptr, ptr_ptr);
		     call display_sst_entry (sptp);
		end;
	     end;
	end;



	return;
%page;
display_mismatch_sdw: proc (a_sdw_reg_ptr, a_sdw_ptr_ptr);
dcl (a_sdw_reg_ptr, a_sdw_ptr_ptr) ptr;
dcl 1 a_sdw_reg aligned like amsdwreg based (a_sdw_reg_ptr);
dcl 1 a_sdw_ptr aligned like amsdwptr based (a_sdw_ptr_ptr);



	     call ioa_$rsnnl ("^[R^; ^]^[E^; ^]^[W^; ^]^[P^; ^]^[U^; ^]^[G^; ^]^[C^; ^]",
		flag_string, (0),			/* generate the REWPUGC string */
		a_sdw_reg.read,
		a_sdw_reg.execute,
		a_sdw_reg.write,
		a_sdw_reg.privileged,
		a_sdw_reg.unpaged,
		a_sdw_reg.entry_bound_sw,
		a_sdw_reg.cache);


	     if ^DPS8xxM then
		call ioa_$rsnnl ("^6x^2d", usage_string, (0),
		binary (a_sdw_ptr.usage, 4));

	     else call ioa_$rsnnl ("^2x^6b", usage_string, (0),
		a_sdw_ptr.usage);



	     call ioa_ ("^8o^2x^1.3b,^1.3b,^1.3b ^6o^2x^7a ^[^5o^;^s^4x-^]^2x^[F^;E^]^2x^8a ^5o",
		binary (a_sdw_reg.addr, 24),
		a_sdw_reg.r1,
		a_sdw_reg.r2,
		a_sdw_reg.r3,
		binary ((a_sdw_reg.bound || "0000"b), 18),
		flag_string,
		((^a_sdw_reg.entry_bound_sw) & a_sdw_reg.execute), /* skip next if there is none */
		binary (a_sdw_reg.cl, 14),
		a_sdw_ptr.valid,
		usage_string,
		binary (a_sdw_ptr.pointer, 15));
	     return;
	end;
%page;

display_dseg_entry: proc (dseg_entp);
dcl  dseg_entp ptr;
dcl  flag_string char (7);
dcl 1 dseg_ent based (dseg_entp),
   (2 addr bit (24),
    2 ring1 bit (3),
    2 ring2 bit (3),
    2 ring3 bit (3),
    2 pad1 bit (4),
    2 bounds bit (14),
    2 rd bit (1),
    2 ex bit (1),
    2 wrt bit (1),
    2 priv bit (1),
    2 unp bit (1),
    2 ebs bit (1),
    2 cache bit (1),
    2 cl bit (14)) unal;


	     call ioa_$rsnnl ("^[R^; ^]^[E^; ^]^[W^; ^]^[P^; ^]^[U^; ^]^[G^; ^]^[C^; ^]",
		flag_string, (0),			/* generate the REWPUGC string */
		dseg_ent.rd,
		dseg_ent.ex,
		dseg_ent.wrt,
		dseg_ent.priv,
		dseg_ent.unp,
		dseg_ent.ebs,
		dseg_ent.cache);

	     call ioa_ ("^8o^2x^1.3b,^1.3b,^1.3b ^6o^2x^7a ^[^5o^]^-(dseg entry)",
		binary (dseg_ent.addr, 24), dseg_ent.ring1, dseg_ent.ring2,
		dseg_ent.ring3, binary ((dseg_ent.bounds || "0000"b), 18),
		flag_string, ((^dseg_ent.ebs) & dseg_ent.ex),
		binary (dseg_ent.cl, 14));


	     return;
	end;
%page;
display_mismatch_ptw: proc (a_ptw_reg_ptr, a_ptw_ptr_ptr);
dcl (a_ptw_reg_ptr, a_ptw_ptr_ptr) ptr;
dcl 1 a_ptw_reg aligned like amptwreg based (a_ptw_reg_ptr);
dcl 1 a_ptw_ptr aligned like amptwptr based (a_ptw_ptr_ptr);


	     if ^DPS8xxM then
		call ioa_$rsnnl ("^6x^2d", usage_string, (0),
		binary (a_ptw_ptr.usage, 4));

	     else call ioa_$rsnnl ("^2x^6b", usage_string, (0),
		a_ptw_ptr.usage);


	     call ioa_ ("^8o^2x^[yes^;no ^]^2x^[F^;E^]^2x^8a ^5o ^4o",
		binary ((a_ptw_reg.addr || "000000"b), 24),
		a_ptw_reg.modif,
		a_ptw_ptr.valid,
		usage_string,
		binary (a_ptw_ptr.pointer, 15),
		divide (binary (a_ptw_ptr.pageno, 12), 16, 12, 0));
	     return;
	end;


%page;
display_sst_entry: proc (a_ptp);

dcl  a_ptp ptr;
dcl 1 page_wd based (a_ptp),
   (2 addr bit (18),
    2 padd1 bit (11),
    2 modifd bit (1),
    2 padd2 bit (6) unal);


	     call ioa_ ("^8o^2x^[yes^;no ^]^2x(page table in memory)",
		binary ((page_wd.addr || "000000"b), 24),
		page_wd.modifd);

	     return;
	end;



%page;

%include ol_dump_struc;

%page;

%include assoc_mem;

%page;

%include bos_dump;

%page;

%include sst;

%page;

%include aste;

%page;

%include sdw;

%page;

%include ptw;


     end display_am_;
