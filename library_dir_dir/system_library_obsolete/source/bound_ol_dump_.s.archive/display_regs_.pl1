/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


display_regs_: proc;

/*   Modified 08/22/80 by R.L. Coppola for new history register analyzer. */
/*   Modified March 1981 by Rich Coppola for DPS8 support */


	return;					/* should never enter here */

% include ol_dump_struc;

dcl  ol_dump_util_$get_ptr entry (fixed bin, ptr, fixed bin (35), ptr); /* :: */
dcl  ol_dump_util_$output_mode entry returns (bit (1));
dcl  ol_dump_util_$find_cond entry (ptr, ptr, char (32) varying, ptr, ptr);
dcl  ol_dump_util_$get_segno entry (char (32) varying, ptr) returns (fixed bin); /* :: */
dcl  cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin);
dcl (ioa_, ioa_$rsnnl) entry options (variable);
dcl  hran_$hrlgnd_dps8_ entry (ptr);
dcl  hran_$hrlgnd_l68_ entry (ptr);
dcl  hran_$hranl entry (ptr, ptr, bit (1));
dcl  hran_$hran_bos entry (ptr, ptr, bit (1));
dcl  hran_$bos_no_thread entry (ptr, ptr, bit (5));
dcl  hran_$no_thread entry (ptr, ptr, bit (5));
dcl  ring0_get_$definition_given_slt entry (ptr, char (*), char (*), fixed bin (18),
     fixed bin, fixed bin (35), ptr, ptr, ptr);
dcl  prtscu_$dump entry (ptr, ptr, fixed bin (18), bit (1), ptr);
dcl  namef_ entry (ptr, ptr) returns (char (*));
dcl  namef_$no_comp entry (ptr, ptr) returns (char (*));
dcl  date_time_ entry (fixed bin (71), char (*) aligned);

dcl (i, j, k, offset, type, segno) fixed bin;
dcl  def_offset fixed bin (18);
dcl (segln, code) fixed bin (35);
dcl (p, p1, mp, stkp, mcptr, hrptr) ptr;
dcl  time char (24) aligned;
dcl (lg_sw, lo, all_sw) bit (1);
dcl  cname char (32) varying;
dcl  pmcdesc char (32);
dcl (addr, null, addrel, fixed, length, baseptr, rel, substr) builtin;
dcl (label1, label2) label;
						/*  */

/* mcpds - entry to display machine conditions on the pds */

mcpds:	entry (odsp);
	if argcnt < 1 then do;
mcp_label:
	     call ioa_ ("mcpds pgflt|fim|sig|all (lg)");
	     return;
	end;
	call ol_dump_util_$get_ptr (pdsseg, p, segln, odsp);
	if arg (1) = "all" then			/* was user requesting all machine cond */
	     all_sw = "1"b;
	else all_sw = "0"b;
	if argcnt > 1 then				/* does user want long form */
	     if arg (2) = "lg" then
		lg_sw = "1"b;
	     else go to mcp_label;			/* user goofed tell him about it */
	else lg_sw = "0"b;
	if arg (1) ^= "all" & arg (1) ^= "pgflt"
	& arg (1) ^= "fim" & arg (1) ^= "sig" then
	     go to mcp_label;			/* check for illegal requests */
	if all_sw | arg (1) = "pgflt" then do;		/* display page_fault data */
	     call ring0_get_$definition_given_slt (null, "pds", "page_fault_data",
		def_offset, type, code, sltptr, sltnp, defptr);
	     call prt_mc (addrel (p, def_offset), def_offset, pdsseg, "Page Fault Data");
	end;
	if all_sw | arg (1) = "fim" then do;		/* user wants to see fim data */
	     call ring0_get_$definition_given_slt (null, "pds", "fim_data",
		def_offset, type, code, sltptr, sltnp, defptr);
	     call prt_mc (addrel (p, def_offset), def_offset, pdsseg, "Fim Data");
	end;
	if all_sw | arg (1) = "sig" then do;		/* user wants to see signal data */
	     call ring0_get_$definition_given_slt (null, "pds", "signal_data",
		def_offset, type, code, sltptr, sltnp, defptr);
	     call prt_mc (addrel (p, def_offset), def_offset, pdsseg, "Signal Data");
	end;
	return;
						/*  */

/* mcprds - entry to display Machine conditions from the prds */

mcprds:	entry (odsp);
	if argcnt < 1 then do;
mcpr_label:
	     call ioa_ ("mcprds int|systroub|fim|all (lg)");
	     return;
	end;
	call ol_dump_util_$get_ptr (prdsseg, p, segln, odsp);
	if arg (1) = "all" then			/* was user requesting all machine cond */
	     all_sw = "1"b;
	else all_sw = "0"b;
	if argcnt > 1 then				/* does user want long form */
	     if arg (2) = "lg" then
		lg_sw = "1"b;
	     else go to mcpr_label;			/* user goofed tell him about it */
	else lg_sw = "0"b;
	if arg (1) ^= "all" & arg (1) ^= "int"
	& arg (1) ^= "systroub" & arg (1) ^= "fim" then
	     go to mcpr_label;			/* check for illegal requests */
	if all_sw | arg (1) = "int" then do;		/* display interrupt data */
	     call ring0_get_$definition_given_slt (null, "prds", "interrupt_data",
		def_offset, type, code, sltptr, sltnp, defptr);
	     call prt_mc (addrel (p, def_offset), def_offset, prdsseg, "Interrupt Data");
	end;
	if all_sw | arg (1) = "systroub" then do;	/* user wants to see system trouble data */
	     call ring0_get_$definition_given_slt (null, "prds", "sys_trouble_data",
		def_offset, type, code, sltptr, sltnp, defptr);
	     call prt_mc (addrel (p, def_offset), def_offset, prdsseg, "System Trouble Data");
	end;
	if all_sw | arg (1) = "fim" then do;		/* user wants to see fim data */
	     call ring0_get_$definition_given_slt (null, "prds", "fim_data",
		def_offset, type, code, sltptr, sltnp, defptr);
	     call prt_mc (addrel (p, def_offset), def_offset, prdsseg, "Fim Data");
	end;
	return;

/*  */

/* mc - entry to display machine conditions from anywhere */

mc:	entry (odsp);

	if argcnt < 1 then do;			/* not enough args */
mc_label:
	     call ioa_ ("mc segno|name|cond {name|no offset - cond segname|no} {cond offset} {lg}");
	     return;
	end;
	if arg (argcnt) = "lg" then do;		/* does user want long output mode */
	     lg_sw = "1"b;				/* set long output mode */
	     argcnt = argcnt - 1;			/* subtract this arg */
	end;
	else lg_sw = "0"b;				/* no reset switch */
	if arg (1) ^= "cond" then			/* take care of easy one first */
	     if argcnt = 2 then do;
		segno = cv_oct_check_ (substr (arg (1), 1, length (arg (1))), code);
		if code ^= 0 then do;		/* did not get seg number try for name */
		     segno = ol_dump_util_$get_segno (arg (1), odsp);
		     if segno = -1 then return;	/* not name or number forget it */
		end;
		call ol_dump_util_$get_ptr (segno, p, segln, odsp);
		if p = null then return;		/* could not find in dump */
		def_offset = cv_oct_check_ (substr (arg (2), 1, length (arg (2))), code);
		if code ^= 0 then go to mc_label;
		call prt_mc (addrel (p, def_offset), def_offset, segno, ""); /* display M. C. */
	     end;
	     else go to mc_label;			/* user goofed */
	else do;					/* arg 1 = cond */
	     label1 = mc_label;
	     label2 = mc_label2;
	     call fcond;				/* go get condition frame args */
	     def_offset = fixed (rel (mcptr), 18) - fixed (rel (p), 18);
	     if cname ^= "" then
		pmcdesc = cname || " condition";
	     else pmcdesc = "";
	     call prt_mc (mcptr, def_offset, segno, pmcdesc);
	end;
mc_label2:
	return;

/*  */

/* dump - entry to display registers saved at time of dump */

dump:	entry (odsp);
	dumpptr = dumpp (0);
	p = addr (dump.prs);
	if argcnt < 1 then arg (1) = "all";		/* default is all */
	if arg (1) = "ptr" then go to pptrs;
	if arg (1) = "preg" then go to ppregs;
	if arg (1) = "scu" then go to ppscu;
	if arg (1) ^= "all" then do;
	     call ioa_ ("dregs arg");
	     return;
	end;
	lg_sw = "1"b;				/* set conditional switches */
	call ioa_ ("^/Bootload CPU Registers at Time of Dump");
pptrs:
	call prtpr (p, odsp);
	if arg (1) ^= "all" then return;
ppregs:
	call prtregs (p);
	call ioa_ ("Descriptor Segment Base Register - ^12.3b ^12.3b",
	     substr (dump.dbr, 1, 36), substr (dump.dbr, 37, 36));
	if dump.modereg ^= "0"b then
	     call ioa_ ("Mode Register - ^12.3b", dump.modereg);
	if dump.cmodereg ^= "0"b then
	     call ioa_ ("Cache Mode Register - ^12.3b", dump.cmodereg);
	if dump.faultreg ^= "0"b then
	     call interpret_fault_reg ((dump.faultreg));
	if dump.ext_fault_reg ^= "0"b then
	     call interpret_ext_fault_reg ((dump.ext_fault_reg));
	if dump.bar ^= "0"b then
	     call ioa_ ("Base Address Register - ^12.3b", dump.bar);
	if arg (1) ^= "all" then return;
ppscu:
	call ioa_ ("^/SCU Data");
	p = addr (dump.scu);
	call prtscu_$dump (null, p, fixed (rel (p), 18), lg_sw, odsp);
	if arg (1) = "all" then
	     if substr (p -> scu.even_inst, 28, 1) then	/* if eis instruction */
		call epl (addr (dump.ptrlen), fixed (rel (addr (dump.ptrlen))));
	return;


/*  */

/* hregs - entry to display history registers in interpreted format */
hregs:	entry (odsp);

dcl  hreg_type bit (1) init ("0"b);			/* 0 for standard frame of 128 words */
						/* 1 for bos frame of 512 words */
dcl  hregs_saved bit (1) aligned based;			/* hregs saved indicator from PDS */
dcl  hregs_savedp ptr;
dcl (expand_sw, raw_sw, do_ou, do_cu, do_au, do_du, valid_cmd) bit (1);
dcl hran_switches bit (5) init ("0"b);
dcl (from_pds, from_dmp, from_cond, from_seg) bit (1) init ("0"b);

	i = 20;
	valid_cmd, expand_sw, raw_sw = "0"b;
	do_ou, do_cu, do_au, do_du = "0"b;

	lo = ol_dump_util_$output_mode ();		/* get terminal line length */
	if argcnt = 0 then go to do_pds;
						/* check args */
	if arg (1) = "pds" then do;
do_pds:	     call ol_dump_util_$get_ptr (pdsseg, p, segln, odsp);
	     call ring0_get_$definition_given_slt (null, "pds", "hregs_saved",
		def_offset, type, code, sltptr, sltnp, defptr);

	     hregs_savedp = addrel (p, def_offset);
	     if hregs_savedp -> hregs_saved = "0"b then do; /* ensure that hregs were saved so we don't print garbage */
		call ioa_ ("^/History registers not saved in PDS.");
		return;
	     end;
	     call ring0_get_$definition_given_slt (null, "pds", "history_reg_data",
		def_offset, type, code, sltptr, sltnp, defptr);
	     hrptr = addrel (p, def_offset);
	     valid_cmd, from_pds = "1"b;
	     i = 2;				/* for arg processing */
	end;

	else if arg (1) = "dmp" | arg (i) = "dump" then do;
	     hrptr = addr (dumpp (0) -> dump.ouhist (0));
	     hreg_type, valid_cmd, from_dmp = "1"b;
	     i = 2;				/* for arg processing */
	end;

	else if arg (1) = "help" then do;
	     if argcnt < 2 then do;
		call hran_$hrlgnd_l68_ (null);
		call ioa_ ("^/^/^/");
		call hran_$hrlgnd_dps8_ (null);
	     end;
	     else if arg (2) = "l68" then do;
		call hran_$hrlgnd_l68_ (null);
	     end;
	     else
	     call hran_$hrlgnd_dps8_ (null);
	     return;
	end;

	else if arg (1) = "cond" then do;		/* display hregs from condition frame */
	     label1 = hr_label;
	     label2 = hr_label2;
	     call fcond;				/* go find conditoion frame */
	     def_offset = fixed (rel (hrptr), 18) - fixed (rel (p), 18);
	     from_cond, valid_cmd = "1"b;
	     i = 4;				/* for arg processing */
	end;

	else do;					/* user wants to specify hregs somewhere else */
	     if argcnt >= 2 then do;
		segno = cv_oct_check_ (substr (arg (1), 1, length (arg (1))), code);
		if code ^= 0 then do;		/* did not get seg number try for name */
		     segno = ol_dump_util_$get_segno (arg (1), odsp);
		     if segno = -1 then return;	/* not name or number forget it */
		end;
		call ol_dump_util_$get_ptr (segno, p, segln, odsp);
		if p = null then return;		/* could not find in dump */
		def_offset = cv_oct_check_ (substr (arg (2), 1, length (arg (2))), code);
		if code ^= 0 then go to hr_label;
		hrptr = addrel (p, def_offset);
		valid_cmd, from_seg = "1"b;
		i = 3;				/* for arg processing */
	     end;
	  else go to hr_label;
	end;

	if valid_cmd = "0"b then go to hr_label;
	do i = i to argcnt;				/* if we have any more */
	     if arg (i) = "nothread" then
		raw_sw = "1"b;
	     else if arg (i) = "exp" then
		raw_sw, expand_sw = "1"b;
	     else if arg (i) = "ou" then
		do_ou = "1"b;
	     else if arg (i) = "cu" then
		do_cu = "1"b;
	     else if arg (i) = "au" then
		do_au = "1"b;
	     else if arg (i) = "du" then
		do_du = "1"b;
	     else go to hr_label;
	end;

	if from_pds then
	     call ioa_ ("^/History Registers at pds|^o", def_offset);
	else if from_dmp then
	     call ioa_ ("^/History Registers at Time of Dump from the Bootload CPU");
	else if from_cond then
	     call ioa_ ("^/History Registers for ^a condition at ^a|^o",
	     cname, namef_$no_comp (baseptr (segno), odsp), def_offset);
	else if from_seg then
	     call ioa_ ("^/History Registers at ^a|^o",
	     namef_$no_comp (baseptr (segno), odsp), def_offset);

	if (do_ou | do_cu | do_au | do_du) then		/* turn on raw */
	   raw_sw = "1"b;
	if ^(do_ou | do_cu | do_au | do_du) then	/* do all */
	     do_ou, do_cu, do_au, do_du = "1"b;

	hran_switches = expand_sw || do_ou || do_cu || do_au || do_du;

	if hreg_type then do;
	     if raw_sw = "0"b then
		call hran_$hran_bos (hrptr, null, lo);
	     else call hran_$bos_no_thread (hrptr, null, hran_switches);
	end;
	else do;
	     if raw_sw = "0"b then
		call hran_$hranl (hrptr, null, lo);
	     else call hran_$no_thread (hrptr, null, hran_switches);
	end;
hr_label2:

	return;

hr_label:
	call ioa_ ("hisregs pds|dmp|help {cpu_type}|cond|segname|no  {nothread|ou|cu|au|do|exp}^/^9t{cond segname|no | segname|no offset} {cond offset}");
	return;

/*  */


/* prtregs - entry to display processor registers included in machine conditions */
prtregs:	entry (mp);

	call ioa_ ("^/Processor Registers^/");
	call ioa_ ("X0 - ^o X1 - ^o X2 - ^o X3 - ^o X4 - ^o X5 - ^o X6 - ^o X7 - ^o",
	     fixed (mp -> mc.regs.x (0), 18), fixed (mp -> mc.regs.x (1), 18),
	     fixed (mp -> mc.regs.x (2), 18), fixed (mp -> mc.regs.x (3), 18),
	     fixed (mp -> mc.regs.x (4), 18), fixed (mp -> mc.regs.x (5), 18),
	     fixed (mp -> mc.regs.x (6), 18), fixed (mp -> mc.regs.x (7), 18));
	call ioa_ ("A Register - ^12.3b Q Register - ^12.3b E Register - ^o",
	     mp -> mc.regs.a, mp -> mc.regs.q, fixed (mp -> mc.regs.e, 8));
	call ioa_ ("Timer Register - ^9.3b Ring Alarm Register - ^1.3b",
	     mp -> mc.t, mp -> mc.ralr);
	return;

/* epl - entry to display Eis pointers and lengths */

epl:	entry (mp, offset1);
dcl  w (8) fixed bin (35) based (mp);
dcl  offset1 fixed bin;

	call ioa_ ("^/EIS Pointers and Lengths^/");
	call ioa_ ("^6o^-^4(^w ^)^/^-^4(^w ^)", offset1,
	     w (1), w (2), w (3), w (4), w (5), w (6), w (7), w (8));
	return;

/* prtpr - entry to display pointer registers */

prtpr:	entry (mp, odsp);

dcl  ptrfmt char (44) int static options (constant) init
    ("PR^o (^[ap^;ab^;bp^;bb^;lp^;lb^;sp^;sb^]) - ");
dcl 1 pwrd based (p1) aligned,
    2 w1 fixed bin (35),
    2 w2 fixed bin (35);

	call ioa_ ("^/Pointer Registers^/");
	do i = 0 to 7;
	     p1 = addr (mp -> mc.prs (i));
	     if p1 -> its.its_mod ^= "100011"b then
		call ioa_ (ptrfmt || "^w ^w", i, i+1, pwrd.w1, pwrd.w2);
	     else do;
		call ioa_$rsnnl (ptrfmt || "^p", time, j, i, i+1, mp -> mc.prs (i));
		call ioa_ ("^22a ^a", time, namef_ (mp -> mc.prs (i), odsp));
	     end;
	end;
	return;



/* fcond - internal procedure shared by mc and hisregs entry to find condition frame from args specifeied */

fcond:	proc;
	     segno = cv_oct_check_ (substr (arg (2), 1, length (arg (2))), code);
	     if code ^= 0 then do;			/* seg number not spicified, must be name */
		segno = ol_dump_util_$get_segno (arg (2), odsp);
		if segno = -1 then go to label2;	/* could not find in dump */
	     end;
	     call ol_dump_util_$get_ptr (segno, p, segln, odsp);
	     if p = null then go to label2;		/* could not find in dump */
	     if argcnt < 3 then			/* no offset specified */
		stkp = null;			/* find first cond */
	     else do;				/* offset arg specified */
		def_offset = cv_oct_check_ (substr (arg (3), 1, length (arg (3))), code);
		if code ^= 0 then go to label1;	/* must be octal */
		stkp = addrel (p, def_offset);	/* form frame offset */
	     end;
	     call ol_dump_util_$find_cond (p, stkp, cname, mcptr, hrptr);
	     if mcptr = null then do;			/* could not find cond frame */
		if argcnt >= 2 then			/* was he looking in entire stack */
		     call ioa_ ("No condition frames found in ^a",
		     namef_$no_comp (baseptr (segno), odsp));
		else call ioa_ ("^a|^o is not a condition frame",
		     namef_$no_comp (baseptr (segno), odsp), def_offset);
		go to label2;
	     end;
	     call ioa_ ("^/Condition frame at ^a|^o", namef_$no_comp (baseptr (segno), odsp),
		fixed (rel (stkp), 17) - fixed (rel (p), 17));
	end fcond;



/* prt_mc -  procedure to display machine conditions */

prt_mc:	proc (a_mcptr, a_offset, segn, mcdesc);
dcl  a_mcptr ptr;
dcl  segn fixed bin;
dcl (a_offset, mc_offset) fixed bin (18);
dcl  mcdesc char (32);
dcl  pdesc bit (1);
dcl  dps8_cpu bit (1) init ("0"b);

	     mcp = a_mcptr;				/* copy mc pointer */
	     scup = addr (mc.scu);			/* form pointer to scu data */
	     if mc.cpu_type ^= 0 then
		dps8_cpu = "1"b;
	     mc_offset = a_offset + (fixed (rel (addr (mc.scu))) - fixed (rel (mcp)));
	     if mcdesc = "" then			/* if we have a null M. C. description */
		pdesc = "0"b;			/* don't print it out */
	     else pdesc = "1"b;
	     call ioa_ ("^/^[DPS8 CPU ^]Machine Conditions ^[For ^a ^;^s^]At ^a|^o", dps8_cpu, pdesc,
		mcdesc, namef_$no_comp (baseptr (segn), odsp), a_offset);
	     if mc.fault_time ^= "0"b then do;		/* if time available */
		call date_time_ (fixed (mc.fault_time, 71), time); /* print it out */
		call ioa_ ("Time Stored - ^a (^18.3b)", time, mc.fault_time);
	     end;
	     if lg_sw then do;			/* if all regs wanted */
		call prtpr (mcp, odsp);		/* print them out */
		call prtregs (mcp);
		if mc.mask ^= "0"b then		/* if mask register is set */
		     call ioa_ ("SCU masks^-     - ^12.3b ^12.3b",
		     substr (mc.mask, 1, 36), substr (mc.mask, 37, 36));
		if mc.fault_reg ^= "0"b then		/* if fault reg exists, print it out */
		     call interpret_fault_reg ((mc.fault_reg));
		if mc.ext_fault_reg ^= "0"b then
		     call interpret_ext_fault_reg ((mc.ext_fault_reg));
	     end;
	     call ioa_ ("^/SCU Data at ^a|^o^/",
		namef_$no_comp (baseptr (segn), odsp), mc_offset);
	     call prtscu_$dump (null, scup, mc_offset, lg_sw, odsp);
	     if lg_sw then				/* if in long output mode */
		if substr (scu.even_inst, 28, 1) then	/* and if EIS instruction */
		     call epl (addr (mc.eis_info), mc_offset + 16);
	     return;
	end prt_mc;

prt_mc_:	entry (odsp, a_mcptr, a_offset, a_segn, a_mcdesc, a_lg_sw);
dcl  a_mcptr ptr;
dcl  a_offset fixed bin (18);
dcl  a_segn fixed bin;
dcl  a_mcdesc char (32);
dcl  a_lg_sw bit (1);

	lg_sw = a_lg_sw;

	call prt_mc (a_mcptr, a_offset, a_segn, a_mcdesc);
	return;

%page;
/* Internal procedure to print fault reg data */

interpret_fault_reg: proc (fault_reg);

dcl  fault_reg bit (36);
dcl (fault_no, break) fixed bin;
dcl 1 illeg_acts based (addr (fault_reg)),
   (2 pad bit (16),
    2 IA (4) bit (4),
    2 pad1 bit (4)) unal;
dcl  port_name (4) char (3) int static options (constant) init (
     "A: ", "B: ", "C: ", "D: ");

dcl (line1, line2) char (80) varying;
dcl (line1_sw, line2_sw) bit (1) init ("0"b);

dcl  FAULT_TYPES (36) char (15) var int static options (constant) init (
     "ILL OP",
     "ILL MOD",
     "ILL SLV",
     "ILL PROC",
     "NEM",
     "OOB",
     "WRT INH",
     "PROC PAR-UPR",
     "PROC PAR-LWR",
     "$CON A",
     "$CON B",
     "$CON C",
     "$CON D",
     "ONC (DA ERR1)",
     "ONC (DA ERR2)",
     "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
     "CACHE-PAR DIR",
     "CACHE-PAR STR",
     "CACHE-PAR IA",
     "CACHE-PAR BLK");


dcl  SC_IA_TYPES (1:15) char (42) var int static options (constant) init (
     "Unassigned (01)",
     "Non-existent Address (02)",
     "Stop on Condition (03)",
     "Unassigned (04)",
     "Data Parity, Store to SC (05)",
     "Data Parity in Store (06)",
     "Data Parity in Store AND Store to SC (07)",
     "Not Control (10)",
     "Port Not Enabled (11)",
     "Illegal Command (12)",
     "Store Not Ready ( 13)",
     "ZAC Parity, Active Module to SC (14)",
     "Data Parity, Active Module to SC (15)",
     "ZAC Parity, SC to Store (16)",
     "Data Parity, SC to Store (17)");


	     if fault_reg = "0"b then
		return;


	     line1, line2 = "";

	     do fault_no = 1 to 15;
		if substr (fault_reg, fault_no, 1) = "1"b then do;
		     line1 = line1 || FAULT_TYPES (fault_no) || ", ";
		     line1_sw = "1"b;
		end;
	     end;

	     break = 0;
	     do fault_no = 1 to 4 while (break = 0);	/* do IAs now */
		if IA (fault_no) then do;
		     line2 = "Ilegal Action on CPU Port " || port_name (fault_no);
		     line2 = line2 || SC_IA_TYPES (bin (IA (fault_no), 4)) || ", ";
		     line2_sw = "1"b;
		     break = 1;
		end;
	     end;

	     do fault_no = 33 to 36;
		if substr (fault_reg, fault_no, 1) = "1"b then do;
		     line1 = line1 || FAULT_TYPES (fault_no) || ", ";
		     line1_sw = "1"b;
		end;
	     end;

	     if line1_sw then			/* remove trailing comma & space */
		line1 = substr (line1, 1, (length (line1) -2));
	     if line2_sw then
		line2 = substr (line2, 1, (length (line2) -2));

	     call ioa_ ("Fault Register - ^12.3b^[  (^a)^;^s^]^[^/^18t(^a)^]",
		fault_reg, line1_sw, line1, line2_sw, line2);

	     return;

%page;
interpret_ext_fault_reg: entry (ext_fault_reg);

dcl  ext_fault_reg bit (15);
dcl  indx fixed bin;

dcl  EXT_FAULT_TYPES (15) char (39) var int static options (constant) init (
     "Bffr. Ovflw - Port A",
     "Bffr. Ovflw - Port B",
     "Bffr. Ovflw - Port C",
     "Bffr. Ovflw - Port D",
     "Bffr. Ovflw - Primary Dir",
     "Write Notify Parity Error on ANY Port",
     "Dup. Dir. LVL 0 Parity Error",
     "Dup. Dir. LVL 1 Parity Error",
     "Dup. Dir. LVL 2 Parity Error",
     "Dup. Dir. LVL 3 Parity Error",
     "Dup. Dir. Multi Match Error",
     "PTW Ass. Mem. Parity Error",
     "PTW Ass. Mem. Match Error",
     "SDW Ass. Mem. Parity Error",
     "SDW Ass. Mem. Match Error");


	     line1 = "";
	     do indx = 1 to 15;
		if substr (ext_fault_reg, indx, 1) = "1"b then
		     line1 = line1 || EXT_FAULT_TYPES (indx) || ", ";
	     end;

	     if line1 ^= "" then do;
		line1 = substr (line1, 1, (length (line1) -2));
		call ioa_ ("DPS8 Extended Fault Register - ^5.3b^/^32t(^a)",
		     ext_fault_reg, line1);
	     end;


	     return;


	end interpret_fault_reg;

%page;
% include bos_dump;
%page;
% include mc;
%page;
% include its;

     end display_regs_;
