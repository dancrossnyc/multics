/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(2016-02-24,Swenson), approve(2016-02-24,MCR10009),
     audit(2016-04-10,GDixon), install(2016-04-10,MR12.6e-0005):
     Fix references to (en de)code_clock_value_ to use 4-character time zone.
                                                   END HISTORY COMMENTS */

/* Completed for installation May 1982 by Rich Coppola from source provided
   by Dave Kitson */
/* Modified October 1982 by Jim Homan to handle trace wraparound, give correct
   offsets for pages faulted on, remove unnecessary rtrims and ltrims */

pds_trace_: proc (odsp);


%include ol_dump_struc;
%page;

/* external entries */

	dcl     ioa_		 entry options (variable);
	dcl     ol_dump_util_$get_ptr	 entry (fixed bin, ptr, fixed bin (35), ptr);
	dcl     ring0_get_$definition_given_slt entry (ptr, char (*), char (*), fixed bin (18),
				 fixed bin, fixed bin (35), ptr, ptr, ptr);
	dcl     namef_$no_comp	 entry (ptr, ptr) returns (char (*));
	dcl     namef_		 entry (ptr, ptr) returns (char (*));
	dcl     decode_clock_value_$date_time entry (fixed bin (71), fixed bin, fixed bin, fixed bin, fixed bin,
				 fixed bin, fixed bin, fixed bin (71), fixed bin, char (4),
				 fixed bin (35));


/* Based */

	dcl     1 trace_entry	 based (tr_ptr) like page_trace_entry;
	dcl     1 ext_trace_entry	 based (tr_ptr) like extended_page_trace_entry;
	dcl     cond		 char (4) based (addr (trace_entry.pad));
	dcl     pp		 ptr unal based (addr (trace_entry));
	dcl     1 ptr		 based (addr (trace_entry)),
		2 pseg		 bit (18),
		2 poff		 bit (18);

/* Constant */

	dcl     DAY		 (7) char (3) int static options (constant) init
				 ("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun");

/* Automatic */

	dcl     (code, segln)	 fixed bin (35);
	dcl     (type, Seg, i, len)	 fixed bin;
	dcl     (psegn, poffn, segn)	 char (12) aligned;
	dcl     (entryp, tr_ptr, pdsp) ptr;
	dcl     def_offset		 fixed bin (18);
	dcl     tsr_segno		 fixed bin (12);
	dcl     (trace_time, usec)	 fixed bin (71);
	dcl     (month, dom, year, hour, minute, second, dow) fixed bin;
	dcl     zone		 char (4) init ("");
	dcl     null		 builtin;
	dcl     count		 fixed bin;
	dcl     total		 fixed bin;
	dcl     start_index		 fixed bin;
	dcl     next		 fixed bin;
%page;
	count = 0;

	if argcnt > 1 | (argcnt = 1 & verify (arg (1), "0123456789") ^= 0) then do;
		call ioa_ ("Usage is: pds_trace {N}");
		return;
	     end;
	if argcnt = 1 then
	     count = fixed (arg (1), 18);

	call ol_dump_util_$get_ptr (pdsseg, pdsp, segln, odsp);
	if pdsp = null then do;
		call ioa_ ("^a", "Unable to get PDS for this process.");
		return;
	     end;

	call ring0_get_$definition_given_slt (null, "pds", "trace", def_offset,
	     type, code, sltptr, sltnp, defptr);

	trace_ptr = addrel (pdsp, def_offset);

	trace_time = trace.ttime;
	call decode_clock_value_$date_time (trace.ttime, month, dom, year, hour, minute,
	     second, usec, dow, zone, code);



	call ioa_ ("^3xTIME^14tmost recent first (AT ^2d/^2d/^4d ^d.^d.^d.^d ^a ^a)^/",
	     month, dom, year, hour, minute, second, usec, zone, DAY (dow));



	total = fixed (trace.last_available, 17);
	next = fixed (trace.next_free, 17);
	if count = 0 then /* do all valid entries */
	     count = hbound (trace.data, 1);

	if count > next
	then start_index = total + next - count + 1;
	else start_index = next - count + 1;


	do i = next to 1 by -1 while (count > 0), total to start_index by -1 while (count > 0);

	     count = count - 1;
	     tr_ptr = addr (trace.data (i));

	     trace_time = trace_time - fixed (trace_entry.time, 17);

	     zone = "";
	     call decode_clock_value_$date_time (trace_time, month, dom, year, hour, minute,
		second, usec, dow, zone, code);

	     if trace_entry.type = 0 then
		call ioa_ ("^d.^d.^d^14tring ^1d: page fault on segment ^5o page #^o^/^17t ^a",
		     minute, second, usec, trace_entry.ring, trace_entry.segment_number,
		     trace_entry.page_number,
		     namef_ (pointer (baseptr (trace_entry.segment_number), 1024 * trace_entry.page_number), odsp));

	     else if trace_entry.type = 2 then
		call ioa_ ("^d.^d.^d^14tsegfault start on seg ^5o^/^17t^a",
		     minute, second, usec, trace_entry.segment_number,
		     namef_$no_comp (baseptr (trace_entry.segment_number), odsp));

	     else if trace_entry.type = 3 then
		call ioa_ ("^d.^d.^d^14tsegfault end on seg ^5o",
		     minute, second, usec, trace_entry.segment_number,
		     namef_$no_comp (baseptr (trace_entry.segment_number), odsp));

	     else if trace_entry.type = 4 then do;
		     if trace_entry.pad = "0"b then
			call ioa_ ("^d.^d.^d^14tlinkage fault make-entry", minute, second, usec);
		     else
			call ioa_ ("^d.^d.^d^14tlinkage fault by ^6o|^o^/^17t^a", minute, second, usec,
			     pseg, poff, namef_ ((pp), odsp));
		end;

	     else if trace_entry.type = 5 then do;
		     call ioa_ ("^d.^d.^d^14tlink resolved to ^6o|^o^/^17t^a", minute, second, usec,
			pseg, poff, namef_ ((pp), odsp));
		end;

	     else if trace_entry.type = 6 then
		call ioa_ ("^d.^d.^d^14tboundsfault start on ^5o^/^17t^a", minute, second, usec,
		     trace_entry.segment_number,
		     namef_$no_comp (baseptr (trace_entry.segment_number), odsp));

	     else if trace_entry.type = 7 then
		call ioa_ ("^d.^d.^d^14tboundsfault end", minute, second, usec);

	     else if trace_entry.type = 8 then
		call ioa_ ("^d.^d.^d^14tsignaller for condition '^a'", minute, second, usec, cond);

	     else if trace_entry.type = 9 then
		call ioa_ ("^d.^d.^d^14trestart fault", minute, second, usec);

	     else if trace_entry.type = 10 then
		call ioa_ ("^d.^d.^d^14treschedule", minute, second, usec);

	     else if trace_entry.type = 11 then
		call ioa_ ("^d.^d.^d^14tmarker", minute, second, usec);

	     else if trace_entry.type = 12 then
		call ioa_ ("^d.^d.^d^14tinterrupt", minute, second, usec);

	     else if trace_entry.type = 15 then do;
		     tsr_segno = bin (ext_trace_entry.tsr_segno_1 ||
			ext_trace_entry.tsr_segno_2, 12);
		     
		     call ioa_ ("^d.^d.^d^14tpage fault by ^4o|^o referencing ^4o page #^o^/^17t^a^/^17treferencing ^a",
			minute, second, usec, ext_trace_entry.psr_segno,
			ext_trace_entry.psr_offset, tsr_segno,
			ext_trace_entry.tsr_pageno,
			namef_ (addrel (baseptr (ext_trace_entry.psr_segno),
		        ext_trace_entry.psr_offset), odsp),
			namef_ (addrel (baseptr (tsr_segno),
		        1024 * ext_trace_entry.tsr_pageno), odsp));
		end;

	     else call ioa_ ("unknown trace type");

	end;
	return;


%page;
%include sys_trace;
%page;
%include trace_types;
     end pds_trace_;
