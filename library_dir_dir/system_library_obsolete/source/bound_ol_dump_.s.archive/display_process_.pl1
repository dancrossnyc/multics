/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


display_process_: proc (odsp);

/* Modified July, 1980 by R.L. Coppola to fix bug in select of running process
   and display of processes by type.
   Modified Oct 1982 by Rich Coppola to display proc required data properly.

*/

% include ol_dump_struc;

dcl  ring0_get_$definition_given_slt entry (ptr, char (*), char (*), fixed bin (18),
     fixed bin, fixed bin (35), ptr, ptr, ptr);
dcl  ol_dump_util_$get_ptr_given_dbr entry (fixed bin (24), fixed bin, ptr, fixed bin (35), ptr);
dcl  ol_dump_util_$dump_oct entry (ptr, fixed bin, fixed bin);
dcl (ioa_, ioa_$nnl) entry options (variable);
dcl  cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin);

dcl (i, j, count, first, offset, exstate, type, rel_apte) fixed bin;
dcl  def_offset fixed bin (18);
dcl (code, segln) fixed bin (35);
dcl (lg_sw, tmr) bit (1);
dcl (fixed, addrel, addr, null, baseno, substr, length) builtin;
dcl  based_bit18 bit (18) aligned based;
dcl  w (0 : 63) fixed bin based;
dcl  usbuf char (32) based (p);
dcl (p, cpup, aptxp) ptr;
dcl  statopt (0 : 6) char (3) int static options (constant) init
    ("emp", "run", "rdy", "wat", "blk", "stp", "ptl");
dcl  statopt1 (6) char (3) int static options (constant) init
    ("run", "rdy", "wat", "blk", "stp", "ptl");
dcl  process_st (0 : 6) char (9) varying int static options (constant) init
    ("empty", "running", "ready", "waiting", "blocked", "stopped", "ptlocking");
dcl  tag (0 : 7) char (1) int static options (constant) init
    ("a", "b", "c", "d", "e", "f", "g", "h");
dcl  cpu_no fixed bin (3) based (cpup) aligned;
dcl  PROCS_REQUIRED char (8) int static options (constant) init
    ("ABCDEFGH");
dcl  cpu_str char (8) var init ("");


dcl  dump_infop ptr;
dcl 1 dump_info based (dump_infop),
    2 no_procs fixed bin,
    2 proc_data (proc_no refer (no_procs)) aligned,
      3 process_no fixed bin,
      3 proc_dbr fixed bin (24),
      3 apte_offs fixed bin,
      3 apte_flags like apte.flags unal,
      3 apte_state bit (18),
      3 apte_process_id bit (36);


/* apt - entry to display an apt entry */

apt:	entry (odsp);

	if argcnt < 1 then do;
proc_label:
	     call ioa_ ("proc no/state/cur/all (lg)");
	     return;
	end;
	if tcdp = null then do;
notcd:	     call ioa_ ("No tc_data.");
	     return;
	end;

	exstate = -123;
	lg_sw = "0"b;
	if argcnt = 2 then
	     if arg (2) = "lg" then			/* user wants an octal dump of the apt entry */
		lg_sw = "1"b;
	count = 1;				/* default is only 1 process */
	first = cv_oct_check_ (substr (arg (1), 1, length (arg (1))), code); /* convert the process number to octal */
	if code ^= 0 then do;
	     first = 0;
	     count = no_apt;
	     if arg (1) = "all" | arg (1) = "cur" | arg (1) = "run" then go to proc_ok;
	     do i = 0 to 6;
		if arg (1) = statopt (i) then do;
		     exstate = i;
		     go to proc_ok;
		end;
	     end;

	     if exstate = -123 then do;		/* bad input */
		call ioa_ ("^/invalid state (^a), accepted states are:^/ ^7(^a, ^) cur.", arg (1), statopt);
		return;
	     end;

	end;
proc_ok:
	call ioa_ ("Active Process Table in tc_data segment (seg. # ^o)^/", tcdseg);
	tmr = "0"b;
	do i = first to first+count-1 while (^tmr);
	     aptep = addrel (aptap, i*ol_dump_struc.apt_entry_size); /* get apointer to the process to look at */
	     sdwp = addr (aptep -> apte.dbr);
	     if code = 0 | arg (1) = "all" | arg (1) = "run" then go to pproc;
	     if arg (1) = "cur" then
		if fixed (sdw.add, 24) = dbrsv then
		     tmr = "1"b;			/* set terminate condition */
		else go to pproclp;
	     else if fixed (aptep -> apte.flags.state, 18) ^= exstate then go to pproclp;
pproc:

	     if arg (1) = "run" & apte.state ^= "000001"b3 then
		go to pproclp;

	     if arg (1) = "run" | arg (1) = "cur" then do;
		call ol_dump_util_$get_ptr_given_dbr (fixed (sdw.add, 24), pdsseg, p, segln, odsp);
		if p = null then go to pproclp;
	     end;
	     offset = fixed (rel (aptep), 18) - fixed (rel (tcdp), 18);
	     call ioa_ ("^/APTE #^o ADDR ^o^/", i, offset);
	     if lg_sw then do;
		call ol_dump_util_$dump_oct (aptep, offset, ol_dump_struc.apt_entry_size);
		call ioa_ (" ");
	     end;
	     call ioa_ ("DBR:^-  ^o^/Processid:  ^12.3b", fixed (sdw.add, 24), apte.processid);
	     if apte.wait_event ^= "0"b then
		call ioa_ ("Event:^-  ^w", apte.wait_event);
	     if apte.lock_id then
		call ioa_ ("Lockid:^-  ^12.3b", apte.lock_id);
	     call ioa_$nnl ("Flags:^-  ");
	     if apte.wakeup_waiting then call ioa_$nnl ("wk_up_waiting ");
	     if apte.stop_pending then call ioa_$nnl ("stop_pending ");
	     if apte.pre_empted then call ioa_$nnl ("pre_empted ");
	     if apte.hproc then call ioa_$nnl ("hproc ");
	     if apte.loaded then call ioa_$nnl ("loaded ");
	     if apte.eligible then call ioa_$nnl ("elig ");
	     if apte.idle then call ioa_$nnl ("idle ");
	     if apte.interaction then call ioa_$nnl ("interaction ");
	     if apte.pre_empt_pending then call ioa_$nnl ("pre_empt_p ");
	     if apte.always_loaded then call ioa_$nnl ("always_loaded ");
	     if apte.dbr_loaded then call ioa_$nnl ("dbr_loaded ");
	     if apte.being_loaded then call ioa_$nnl ("being_loaded ");
	     if apte.procs_required ^= "11111111"b then do;
		cpu_str = "";
		do i = 1 to 8;
		     if substr (apte.procs_required, i, 1) then
			cpu_str = cpu_str || substr (PROCS_REQUIRED, i, 1);
		end;
		call ioa_$nnl ("proc required [^a]", cpu_str);
	     end;
	     if apte.page_wait_flag then call ioa_$nnl ("page_wait ");
	     call ioa_ ("^/State:^-  ^a", process_st (fixed (apte.state, 3)));
	     if arg (1) = "run" | arg (1) = "cur" then do;
		call ring0_get_$definition_given_slt (null, "pds", "process_group_id",
		     def_offset, type, code, sltptr, sltnp, defptr);
		p = addrel (p, def_offset);		/* set ptr to userid area */
		call ioa_ ("Userid:^-  ^a", usbuf);	/* print userid */
		call ol_dump_util_$get_ptr_given_dbr (fixed (sdw.add, 24), prdsseg, cpup, segln, odsp);
		if cpup = null then go to pproclp;
		call ring0_get_$definition_given_slt (null, "prds", "processor_tag",
		     def_offset, type, code, sltptr, sltnp, defptr);
		cpup = addrel (cpup, def_offset);	/* get ptr to cpu number */
		call ioa_ ("ON:^-  cpu ^a (#^o)", tag (cpu_no), cpu_no);
	     end;
pproclp:
	end;
	return;
						/*  */

/* tcq - entry to display  traffic controller queue */

tcq:	entry (dump_infop, odsp);

dcl  FLAG_WORD bit (36) based;
dcl  pidp ptr;
dcl  pid_char char (32) based (pidp);
dcl (pidch, disp_all) bit (1) init ("1"b);


	if tcdp = null then do;
	     call ioa_ ("no tc_data");
	     return;
	end;

	exstate = -123;

	if argcnt < 1 then go to prtlp;		/* give 'em all */
	else do i = 1 to 6;				/* ck for all but emp */
	     if arg (1) = statopt1 (i) then do;
		exstate = i;
		disp_all = "0"b;
		go to prtlp;
	     end;
	end;

	if exstate = -123 then do;			/* bad input */
	     call ioa_ ("^/invalid state (^a), accepted states are:^/^5(^a, ^)ptl.", arg (1), statopt1);
	     return;
	end;

prtlp:
	call ioa_ ("^/PROC^6tREL-APTE^16tFLAGS^26tSTATE^41tDBR^50tPROCESS ID^/");
	if disp_all then
	     call ioa_ ("^18tReady list head");

	tmr = "0"b;

	do i = 1 to dump_info.no_procs;
	     p = addr (dump_info.apte_flags (i));
	     if (dump_info.apte_state (i) = "777777"b3) & disp_all then
		call ioa_ ("^18tReady tail/Idle head");
	     else do;
		if ^disp_all then
		     if fixed (dump_info.apte_state (i), 18) ^= exstate then go to bypprt;
		call ol_dump_util_$get_ptr_given_dbr (dump_info.proc_dbr (i),
		     pdsseg, pidp, segln, odsp);

		if pidp = null then
		     pidch = "0"b;
		call ring0_get_$definition_given_slt (null, "pds", "process_group_id",
		     def_offset, type, code, sltptr, sltnp, defptr);
		pidp = addrel (pidp, def_offset);

		call ioa_ ("^4d^6t^8o^16t^6.3b^26t^a^38t^8o^48t^[^a (^6.3b)^;^2s^]^[^6.3b^]",
		     dump_info.process_no (i), dump_info.apte_offs (i),
		     substr (p -> FLAG_WORD, 1, 18), process_st (fixed (dump_info.apte_state (i), 3)),
		     dump_info.proc_dbr (i), pidch, pid_char, substr (dump_info.apte_process_id (i), 19, 18),
		     ^pidch, substr (dump_info.apte_process_id (i), 19, 18));
	     end;
bypprt:
	end;

	if disp_all then
	     call ioa_ ("^18tIdle tail");
	return;

fdi:	entry (dump_infop, odsp);

dcl (found, proc_no, k) fixed bin;

	if tcdp = null then do;
	     dump_info.no_procs = 0;
	     return;
	end;


	i, found = 1;

	rel_apte = fixed (tcdp -> tcm.eligible_q_head.fp);
	tmr = "0"b;
	proc_no, dump_info.no_procs = 0;
dbr_lp:	do while (^tmr);
	     aptxp = addrel (tcdp, rel_apte);		/* get dbr's and init rest */
	     sdwp = addr (aptxp -> apte.dbr);
	     if fixed (aptxp -> w (1)) = -1 then do;
		if i = 2 then
		     go to DONE_PROC;
		rel_apte = fixed (tcdp -> tcm.eligible_q_tail.fp);
		dump_info.no_procs = dump_info.no_procs +1;
		dump_info.process_no (dump_info.no_procs) = -1;
		dump_info.proc_dbr (dump_info.no_procs) = -1;
		dump_info.apte_state (dump_info.no_procs) = "777777"b3;

		i = 2;
		go to dbr_lp;
	     end;
	     dump_info.no_procs = dump_info.no_procs +1;
	     dump_info.proc_dbr (dump_info.no_procs) = fixed (sdw.add, 24);
	     dump_info.apte_offs (dump_info.no_procs) = rel_apte;


	     if rel_apte = fixed (rel (aptap), 18) - fixed (rel (tcdp), 18) then
		found = 0;
	     rel_apte = fixed (aptxp -> based_bit18);
	end;

DONE_PROC:

	do i = 1 to dump_info.no_procs;
	     if dump_info.apte_state (i) ^= "777777"b3 then
		dump_info.apte_state (i) = "0"b;
	     dump_info.apte_process_id (i) = "0"b;
	end;

	rel_apte = fixed (tcdp -> tcm.eligible_q_head.fp);


	do k = 0 to no_apt-1 while (found ^= dump_info.no_procs);
	     aptep = addrel (aptap, k*ol_dump_struc.apt_entry_size);
	     if fixed (apte.state, 18) = -1 then
		go to fill_idle_;
	     tmr = "0"b;
	     sdwp = addr (aptep -> apte.dbr);


	     do j = 1 to dump_info.no_procs while (^tmr);
		if fixed (sdw.add, 24) = dump_info.proc_dbr (j) then do;
		     dump_info.process_no (j) = found;
		     dump_info.apte_flags (j) = apte.flags;
		     dump_info.apte_state (j) = apte.state;
		     dump_info.apte_process_id (j) = apte.processid;
		     found = found + 1;
		     tmr = "1"b;
		end;
	     end;
fill_idle_:

	end;

	return;


% include apte;

% include sdw;

% include tcm;
     end display_process_;
