/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



/*  Modified December 1980 by Rich Coppola to make lrn act more intelligently */
/*  Modified Oct 1982 by Rich Coppola to set dbr to first proc dumped instead
   of inzr's as the inzr is not always dumped. */

display_segment_: proc;
	return;					/* should never enter here */

% include ol_dump_struc;
%page;
% include sdw;
%page;



dcl  ring0_get_$segptr_given_slt entry (char (*) aligned, char (*) aligned, ptr, fixed bin, ptr, ptr);
dcl  cv_oct_check_ entry (char (*), fixed bin) returns (fixed bin);
dcl  cv_dec_check_ entry (char (*), fixed bin) returns (fixed bin);
dcl  namef_ entry (ptr, ptr) returns (char (*));
dcl  namef_$no_comp entry (ptr, ptr) returns (char (*));
dcl (ioa_, ioa_$rsnnl) entry options (variable);
dcl  ol_dump_util_$get_ptr entry (fixed bin, ptr, fixed bin (35), ptr);
dcl  ol_dump_util_$fnd_dbr entry (fixed bin (24), fixed bin (35), fixed bin, ptr);
dcl  ol_dump_util_$get_segno entry (char (32) varying, ptr) returns (fixed bin);
dcl (i, j, k, l, segno, code, first, count, last, offset) fixed bin init (0);
dcl  segln fixed bin (35) init (0);
dcl (fixed, substr, null, addrel, rel, addr, length) builtin;
dcl (cp, p, ap, pm) ptr init (null);
dcl  axstring char (7) init ("");
dcl  axbit (7) bit (1) based (ap);
dcl  out char (64) var;				/* output line */
dcl  type bit (2) aligned;				/* field type in config record */

dcl  carda (16) char (4) aligned based (cp),		/* to get config record name in columns 1-4 */
     cardf (16) fixed bin based (cp);			/* to test for "fence" at end of config deck */

dcl 1 card aligned based (cp),
    2 pad (15) fixed bin,
    2 types (18) bit (2) unal;			/* to determine config record field conversion for output */

dcl 1 sdwb based (sdwp) aligned,
   (2 pad1 bit (33),
    2 dfb bit (3),
    2 pad2 bit (36)) unaligned;
dcl  saved_kstseg fixed bin;
dcl  saved_kstptr ptr;
dcl  saved_dbr fixed bin (24);
%page;


name:	entry (odsp);
	if argcnt < 1 then do;
name_label:
	     call ioa_ ("name segno (offset)");
	     return;
	end;
	segno = cv_oct_check_ (substr (arg (1), 1, length (arg (1))), code); /* see if octal number ... */
	if code ^= 0 then go to name_label;
	if argcnt < 2 then do;			/* No offset arg, just name wanted */
	     call ioa_ ("^o = ^a", segno, namef_$no_comp (baseptr (segno), odsp));
	     return;
	end;
	else do;					/* relative offset of bound seg wanted */
	     offset = cv_oct_check_ (substr (arg (2), 1, length (arg (2))), code);
	     if code ^= 0 then go to name_label;
	     p = addrel (baseptr (segno), offset);
	     call ioa_ ("^p = ^a", p, namef_ (p, odsp));
	     return;
	end;
						/*  */

number:	entry (odsp);
	if argcnt < 1 then do;
	     call ioa_ ("segno name");
	     return;
	end;
	segno = ol_dump_util_$get_segno (arg (1), odsp);
	if segno = -1 then return;
	call ioa_ ("^a = ^o", arg (1), segno);
	return;

/*  */

dseg:
	entry (odsp);
	call ol_dump_util_$get_ptr (dsegno, dsegp, segln, odsp); /* get ptr to dseg for this process */
	if dsegp = null then return;
	first = 0;				/* set up default range */
	count = divide (segln, 2, 17, 0) - 1;

	if argcnt < 1 then
	     first = 0;


	if argcnt >= 1 then do;
	     first = cv_oct_check_ (substr (arg (1), 1, length (arg (1))), code);
	     if code ^= 0 then do;
lrnerr:		call ioa_ ("lrn from (oct) {to (oct)}");
		return;
	     end;
	     if first > count then do;		/* let em know its too large */
		call ioa_ ("Segment ^o is not known, last known segment is ^o.", first, count);
		return;
	     end;
	end;


	if argcnt = 2 then do;
	     last = cv_oct_check_ (substr (arg (2), 1, length (arg (2))), code);
	     if code ^= 0 then go to lrnerr;
	     if last < first then go to lrnerr;
	     if last > count then last = count;
	     else count = last;
	end;


	if argcnt = 1 then
	     count = first;

lrndef:						/* print out banner */
	call ioa_ ("^/DSEG ADD   SDW ADD RNGS FLT BOUND  REWPUGC    CL SEG #   SEG NAME");
	do segno = first to count;
	     sdwp = addrel (dsegp, segno * 2);
	     if sdw.add = "0"b & segno ^= 1 then go to lrnlp; /* don't print null segs */
	     offset = fixed (rel (sdwp), 18) - fixed (rel (dsegp), 18);
	     axstring = "REWPUGC";
	     ap = addr (sdw.read);
	     do i = 1 to 7;
		if axbit (i) = "0"b then substr (axstring, i, 1) = " ";
	     end;
	     call ioa_ ("^8o  ^8o  ^o^o^o  ^o  ^5o  ^7a ^5o   ^3o   ^a",
		offset, fixed (sdw.add, 24), fixed (sdw.r1, 3), fixed (sdw.r2, 3), fixed (sdw.r3, 3),
		fixed (sdwb.dfb, 3), fixed (sdw.bound, 14), axstring,
		fixed (sdw.entry_bound, 14), segno,
		namef_$no_comp (baseptr (segno), odsp));
lrnlp:
	end;
	return;

%page;

config:	entry (odsp);


	saved_kstseg = kstseg;			/* save values of the */
	saved_kstptr = kstptr;			/* process as it will change */
	saved_dbr = dbrsv;
	dbrsv = boot_dbr;

	call ol_dump_util_$fnd_dbr (dbrsv, segln, i, odsp);

	call ring0_get_$segptr_given_slt ("", "config_deck", p, code, sltptr, sltnp);
	if code ^= 0 then do;
	     call ioa_ ("Segment ""config_deck"" not found");
	     go to restore_dbr;
	end;
	call ol_dump_util_$get_ptr (fixed (baseno (p), 17), p, segln, odsp);
	if p = null then go to restore_dbr;
	if argcnt < 1 then do;			/*  All cards to be printed */
	     cp = p;
	     do while (cardf (1) ^= -1);
		call output;
		cp = addrel (cp, 16);
	     end;
	end;
	else do;					/*  Only cards spieified by args wanted */
	     do i = 1 to argcnt;
		cp = p;
		j = 0;
		do while (cardf (1) ^= -1);
		     if carda (1) = arg (i) then do;
			call output;
			j = j + 1;
		     end;
		     cp = addrel (cp, 16);
		end;
		if j = 0 then call ioa_ ("Config card ^a not found", arg);
	     end;
	end;
	go to restore_dbr;

output:	proc;

	     out = carda (1);			/* initialize output string */
	     do k = 2 to 15 while (cardf (k) ^= -1);	/* look at all words of the card */
		type = types (k-1);			/* get the type for the current word */
		if type = "01"b then do;
		     if cardf (k) > 8 | cardf (k) < 1 then go to oct;
		     call ioa_$rsnnl ("^a  ^a", out, l, out, substr ("abcdefgh", cardf (k), 1));
		end;
		else if type = "00"b then
oct:		     call ioa_$rsnnl ("^a  ^o", out, l, out, cardf (k));
		else if type = "11"b then call ioa_$rsnnl ("^a  ^d.", out, l, out, cardf (k));
		else
		call ioa_$rsnnl ("^a  ^a", out, l, out, carda (k));
	     end;
	     call ioa_ (out);
	     return;
	end output;
%page;
restore_dbr:

	dbrsv = saved_dbr;
	kstseg = saved_kstseg;
	kstptr = saved_kstptr;
	call ol_dump_util_$fnd_dbr (dbrsv, segln, i, odsp);
	call ol_dump_util_$get_ptr (kstseg, kstptr, segln, odsp);
	return;


     end display_segment_;
