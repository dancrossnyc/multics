/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/*  Modified Oct 1982 by Rich Coppola to not change DBR when dumping HC seg
   as it was a needless operation.
*/

display_dump_: proc (odsp);

% include ol_dump_struc;

dcl  db_print entry (ptr, char (*) aligned, ptr, char (*), fixed bin, fixed bin, ptr, fixed bin, fixed bin);
dcl  cv_oct_check_ entry (char (*), fixed bin) returns (fixed bin);
dcl  object_info_$display entry (ptr, fixed bin (24), ptr, fixed bin (35));
dcl  ring0_get_$name_given_slt entry (char (*) aligned, char (*) aligned, ptr, fixed bin, ptr, ptr);
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl (ioa_, com_err_) entry options (variable);
dcl  ol_dump_util_$fnd_dbr entry (fixed bin (24), fixed bin (35), fixed bin, ptr);
dcl  ol_dump_util_$get_ptr entry (fixed bin, ptr, fixed bin (35), ptr); /* :: */
dcl  ol_dump_util_$get_segno entry (char (32) varying, ptr) returns (fixed bin); /* :: */
dcl  ol_dump_util_$fnd_hcseg entry (char (32) aligned, ptr, fixed bin (24), ptr); /* :: */
dcl  ol_dump_util_$dump_oct entry (ptr, fixed bin, fixed bin);
dcl  ol_dump_util_$is_hardcore_seg entry (fixed bin, ptr) returns (bit (1));
dcl  namef_ entry (ptr, ptr) returns (char (*));

dcl (segln, bcode) fixed bin (35);
dcl (i, j, count, first, segno, code, k, edoc, offset) fixed bin;
dcl (substr, unspec, fixed, length, ptr, addr, addrel, rel, divide, null, baseptr) builtin;
dcl 1 oi aligned like object_info;			/* For compatibility with new object segment */
dcl  char_type char (1) aligned;
dcl  ename char (32) aligned;
dcl (mem_add, dbrsvm, sdwad) fixed bin (24) aligned;
dcl  bitcnt fixed bin (24);
dcl (p, pm) ptr;
dcl (init_hard, premature_end, mem_dump, offset_flag) bit (1) unaligned;
dcl  paged char (7) varying;
dcl  off18 fixed bin (18) aligned;
dcl  saved_kstseg fixed bin;
dcl  saved_kstptr ptr;


/*  */
	if argcnt < 1 | argcnt > 5 then do;		/* user goofed, tell him what to type in */
dump_label:
	     call ioa_ ("dump segno/name/mem {addr {+_offset}} {count} {mode}");
	     return;
	end;
	char_type = "o";				/* set up default mode (octal dump) */
	count = 1;				/* and unit count */
	first = 0;				/* and starting address */
	saved_kstseg = kstseg;			/* save values of the */
	saved_kstptr = kstptr;			/* process as it will change */
	dbrsvm = dbrsv;
	sstp = sstptr;

/*  process arguments */

	if argcnt = 1 then				/* only segno/name specified */
	     if arg (1) = "mem" then			/* mem dump needs address */
		go to dump_label;
	     else count = -1;			/* set count later (segment length) */
	else if argcnt >= 2 then do;
	     mem_add = cv_oct_check_ (substr (arg (2), 1, length (arg (2))), code);
	     if code ^= 0 then
		go to dump_label;
	     if arg (1) ^= "mem" then
		first = mem_add;
	end;
	if argcnt >= 3 then do;			/* process count or offset arg */
	     if substr (arg (3), 1, 1) = "+" | substr (arg (3), 1, 1) = "-" then do;
		offset = cv_oct_check_ (substr (arg (3), 2, length (arg (3)) - 1), code);
		if code ^= 0 then
		     go to dump_label;
		if substr (arg (3), 1, 1) = "+" then
		     first = first + offset;
		else first = first - offset;
		if first < 0 then
		     first = 0;
		offset_flag = "1"b;
	     end;
	     else do;
		count = cv_oct_check_ (substr (arg (3), 1, length (arg (3))), code);
		if code ^= 0 then
		     go to dump_label;
		offset_flag = "0"b;
	     end;
	end;
	if argcnt >= 4 then do;
	     if offset_flag then do;
		count = cv_oct_check_ (substr (arg (4), 1, length (arg (4))), code);
		if code ^= 0 then
		     go to dump_label;
	     end;
	     else char_type = arg (4);
	end;
	if argcnt = 5 then
	     char_type = arg (5);
	if arg (1) = "mem" then do;
	     if code ^= 0 then go to dump_label;
	     off18 = 0;
	     mem_dump = "1"b;
	     if offset_flag then
		mem_add = mem_add + first;
	     substr (unspec (off18), 19, 14) = substr (unspec (mem_add), 13, 14);

	     do k = 0 to no_apt;
		aptep = addrel (aptap, k * apt_entry_size);
		sdwp = addr (aptep -> apte.dbr);
		call ol_dump_util_$fnd_dbr (fixed (sdw.add, 24), segln, edoc, odsp);
		if edoc ^= -1 then do;
		     edoc = divide (segln, 2, 17, 0) - 1;
		     do i = 0 to edoc;
			sdwp = addrel (dsegp, i * 2);
			if sdw.add | i = 1 then do;
			     sdwad = fixed (sdw.add, 24);
			     if sdw.unpaged then do;
				j = ((fixed (sdw.bound, 14) + 1) * 16) - 1;
				if mem_add >= sdwad & mem_add <= sdwad + j then do;
				     first = mem_add - sdwad;
				     paged = "unpaged";
				     go to match;
				end;
				else go to nxt_lap;
			     end;
			     else do;
				ptp = addrel (sstptr, sdwad - fixed (sst.ptwbase, 18));
				astep = addrel (ptp, - (sst.astsize));
				do j = 0 to fixed (aste.csl, 9);
				     if ^ptw.df then go to pt_lap;
				     if fixed (ptw.add, 18) = off18 then do;
					first = j * 1024 + mod (mem_add, 1024);
					paged = "paged";
					go to match;
				     end;
pt_lap:
				     ptp = addrel (ptp, 1);
				end;
			     end;
			end;
nxt_lap:
		     end;
		end;
	     end;
	     call ioa_ ("Memory Address ^o is in free store", mem_add);
	     go to restore_dbr;

match:
	     pm = addrel (baseptr (i), first);
	     call ioa_ ("^o = ^a segment ^p ^a Process DBR ^o", mem_add, paged, pm,
		namef_ (pm, odsp), dbrsv);
	     segno = i;
	end;
	else do;					/* a segment dump requested */
	     segno = cv_oct_check_ (substr (arg (1), 1, length (arg (1))), code);
	     if code ^= 0 then do;
		segno = ol_dump_util_$get_segno (arg (1), odsp);
		if segno = -1 then return;
	     end;
	     mem_dump = "0"b;
	end;


	call ol_dump_util_$get_ptr (segno, p, segln, odsp);
	if count = -1 then count = segln;		/* requested to dump entire segment */
	premature_end, init_hard = "0"b;


	if p ^= null then do;
	     if first > segln then do;		/* check limits */
		call ioa_ ("Offset ^o not found in segment ^o. Last location = ^o",
		     first, segno, segln);
		go to restore_dbr;
	     end;

	     if char_type = "a" then do;
		if first + count * 4 > segln then do;
		     count = (segln - first) * 4;
		     premature_end = "1"b;
		end;
	     end;

	     else do;
		if first + count > segln then do;
		     count = segln - first;
		     premature_end = "1"b;
		end;
	     end;
	     if char_type = "o" then
		call ol_dump_util_$dump_oct (addrel (p, first), first, count);
	     else call db_print (null, "", addrel (p, first), (char_type), first, count, null, 0, 0);
	     if premature_end then
		call ioa_ ("End of segment");
	     go to restore_dbr;
	end;
ck_mem:
	if mem_dump then
	     go to restore_dbr;


	if p = null then do;			/* Pick up segment from search dirs */
	     p = baseptr (segno);
	     call ring0_get_$name_given_slt ("", ename, p, code, sltptr, sltnp);
	     if code ^= 0 then do;
		call ioa_ ("Segment ^o not found", segno);
		go to restore_dbr;
	     end;
	     call ol_dump_util_$fnd_hcseg (ename, p, bitcnt, odsp); /* go find segment in search dirs */
	     if p = null then
		go to restore_dbr;			/* if not found */
	     init_hard = "1"b;
	     call ioa_ ("Segment ^a (^o) found in ^a", ename, segno, search_dirs (libx));
	     oi.version_number = object_info_version_2;	/* Set version for object_info_ */
	     call object_info_$display (p, bitcnt, addr (oi), bcode);
	     if bcode ^= 0 then do;
		call com_err_ (bcode, "ol_dump");
		go to term_h;
	     end;
	     if first > oi.tlng then do;		/* Requested words not in text section */
		if first < oi.tlng + oi.dlng then do;
		     i = first - fixed (rel (oi.defp));
		     call ioa_ ("^o|^o found in definition section|^o", segno, first, i);
		     go to term_h;
		end;
		else if first < oi.tlng + oi.dlng + oi.llng then do;
		     i = first - fixed (rel (oi.linkp));
		     call ioa_ ("^o|^o found in linkage section|^o", segno, first, i);
		     go to term_h;
		end;
		else if first < oi.tlng + oi.dlng + oi.llng + oi.slng then do;
		     i = first - fixed (rel (oi.symbp));
		     call ioa_ ("^o|^o found in symbol section |^o", segno, first, i);
		     go to term_h;
		end;
		else call ioa_ ("Offset ^o not found in segment ^o", first, segno);
		go to term_h;
	     end;
	     else if first + count > oi.tlng then do;
		count = oi.tlng - first;
		premature_end = "1"b;
	     end;
	end;
	p = addrel (p, first);
	call ioa_ ("^/");				/* print out new line */
	call db_print (null, "", p, "i", first, count, null, 0, 0);
	if premature_end then
	     call ioa_ ("End of text section ");
term_h:
	if init_hard then
	     call hcs_$terminate_noname (p, bcode);	/* terminate segment */

restore_dbr:

	dbrsv = dbrsvm;
	kstseg = saved_kstseg;
	kstptr = saved_kstptr;
	call ol_dump_util_$fnd_dbr (dbrsvm, segln, i, odsp);
	call ol_dump_util_$get_ptr (kstseg, kstptr, segln, odsp);
	return;
%page;
% include aste;
% include sst;
% include object_info;
% include sdw;
% include ptw;
% include apte;

     end display_dump_;
