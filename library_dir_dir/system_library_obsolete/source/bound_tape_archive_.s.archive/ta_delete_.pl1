/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

ta_delete_: proc (table_ptr, arg_array, force, table_name, code);

/* This subroutine handles the delete key of tape_archive. */

/* Written 06/28/77 by C. D. Tavares.
   Modified 09/24/79 by CDT to implement star convention and fix a few minor
   bugs.
   Last modified 09/21/80 by CDT to implement table workspace strategy
   (indivisible updates).
*/

/* PARAMETERS */

dcl  arg_array (*) char (168) parameter,
     force bit (1) aligned parameter,
     table_name char (*) parameter,
     code fixed bin (35) parameter;

/* AUTOMATIC */

dcl  answer char (4) varying,
     arg char (168),
     component_slot fixed bin,
     dirname char (168),
     ename char (32),
     i fixed bin,
     locked bit (1) aligned,
     request_slot fixed bin;

/* CONDITIONS */

dcl  cleanup condition;

/* EXTERNAL STATIC */

dcl (error_table_$arg_ignored,
     error_table_$noarg) ext fixed bin (35) static;

dcl  sys_info$max_seg_size ext fixed bin (35) static;

/* INTERNAL STATIC */

dcl  system_free_ptr pointer static initial (null);

/* BASED */

dcl  system_free_area area (sys_info$max_seg_size) based (system_free_ptr);

/* ENTRIES */

dcl  check_star_name_$entry ext entry (char (*), fixed bin (35)),
     com_err_ ext entry options (variable),
     command_query_ ext entry options (variable),
     get_system_free_area_ ext entry returns (pointer);

dcl  ta_table_mgr_$find_component ext entry (pointer, char (*), char (*), bit (1) aligned, fixed bin, fixed bin, fixed bin (35)),
     ta_table_mgr_$lock ext entry (pointer, char (*), fixed bin, fixed bin (35)),
     ta_table_mgr_$star_list ext entry (pointer, char (*), fixed bin, pointer, fixed bin (35)),
     ta_table_mgr_$unlock ext entry (pointer, fixed bin (35)),
     ta_table_mgr_$setup_workspace ext entry (pointer, fixed bin, fixed bin, pointer),
     ta_table_mgr_$complete_table_op ext entry (pointer);

/* BUILTINS */

dcl (addr, dim, null, substr) builtin;

%page;
%include tape_archive_table_dcl;
%page;
%include tape_archive_star;
%page;
%include status_info_branch;
%page;
%include query_info_;
%page;

/* ta_delete_: proc... */

	locked = ""b;

	if system_free_ptr = null then
	     system_free_ptr = get_system_free_area_ ();


	if dim (arg_array, 1) = 0 then do;
	     code = error_table_$noarg;
	     call com_err_ (code, "tape_archive");
	     return;
	end;

	query_info.version = query_info_version_5;
	query_info.yes_or_no_sw = "1"b;

	do i = 1 to dim (arg_array, 1);

	     arg = arg_array (i);

/* Following line handles control args */

	     if substr (arg, 1, 1) = "-" then
		call com_err_ (error_table_$arg_ignored, "tape_archive", arg);

/* Following line handles args which should be component_names */

	     else call process_filearg (arg);
	end;

	code = 0;
return_hard:
	return;
%skip(5);
process_filearg: proc (component_name);

dcl  component_name char (*) parameter;

	     ename = component_name;

	     call check_star_name_$entry (ename, code);
	     if code = 0 then
		call delete_one (dirname, ename);

	     else if (code = 1) | (code = 2) then begin;	/* arbitrary starname or "**" */
						/* the begin keeps the current procedure fast by limiting
						   the scope of the following cleanup handler. */

dcl  i fixed bin;

		if code = 2 then do;		/* user specified "**" or equivalent */
		     call command_query_ (addr (query_info), answer, "tape_archive",
			"Do you really want to delete all components in ^a??", table_name);
		     if answer = "no" then return;
		end;

		ta_component_star_ptr = null;

		on cleanup begin;
		     if ta_component_star_ptr ^= null then
			free ta_component_star_info in (system_free_area);
		end;

		call ta_table_mgr_$star_list (table_ptr, ename, Component, ta_component_star_ptr, code);
		if code ^= 0 then goto not_processed;

		do i = 1 to ta_component_star_info.n_entries;
		     call delete_one (dirname, ta_component_star_info (i).ename);
		end;

		free ta_component_star_info in (system_free_area);
	     end;

	     else
not_processed: call com_err_ (code, "tape_archive", """^a"" not processed.", component_name);

	     return;
%skip(5);
delete_one:    proc (dirname, ename);

dcl (dirname, ename) char (*) parameter;

		on cleanup call ta_table_mgr_$unlock (table_ptr, code);

		locked = "1"b;
		call ta_table_mgr_$lock (table_ptr, table_name, Modify, code);
		if code ^= 0 then do;
		     call com_err_ (code, "tape_archive",
			"Arguments from ""^a"" could not be processed.", arg);
		     goto return_hard;
		end;

		call ta_table_mgr_$find_component (table_ptr, table_name, ename, "1"b, /* should be there */
		     component_slot, request_slot, code);
		if code ^= 0 then goto unlock_and_return; /* msg already printed */

		component_ptr = addr (component_table (component_slot));

		if component.safety_switch then
		     if ^force then do;
			call command_query_ (addr (query_info), answer, "tape_archive",
			     "Component ^a is protected.  Do you wish to delete it??  ", ename);
			if answer = "no" then goto unlock_and_return;
		     end;

		call ta_table_mgr_$setup_workspace (table_ptr, component_slot, request_slot, workspace_ptr);

		component_ptr = addr (workspace_ptr -> workspace.component_copy);
		component.date_time_deleted = (36)"1"b; /* make it nonzero, use it as "to be deleted" flag */

		workspace_ptr -> workspace.dead_records = workspace_ptr -> workspace.dead_records + component.file_length;
		workspace_ptr -> workspace.n_queued_requests = workspace_ptr -> workspace.n_queued_requests + 1;

		if workspace_ptr -> workspace.next_mount_type < Delete then
		     workspace_ptr -> workspace.next_mount_type = Delete;

		call ta_table_mgr_$complete_table_op (table_ptr);

unlock_and_return:
		call ta_table_mgr_$unlock (table_ptr, code);
		return;

	     end delete_one;
	end process_filearg;
     end ta_delete_;
