/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* format: style3,ind3,initlm3,dclind6,idind32 */
tape_util_:
   procedure;


/*	This procedure is part of the Multics standard tape DIM:  tape_.
*	Recoded by  Bill Silver  on 01/23/74.
*	Modified 7/79 by R.J.C. Kissel to support 6250 bpi tapes.
*
*	This procedure contains a set of unrelated utility entries.
*	Except for the "order" and "seek" entries, all of these utility
*	routines are used by tape_ itself.  A complete list of the entries
*	contained in this procedure is given below:
*
*	order:		- implements the tape_ order call.
*	seek:		- implements the tape_ seek  call.
	getsize:		- returns the element size.
*	rewind:		- rewinds the tape reel.
*	set_density:	- sets the density of the tape drive.
*/


/*		ARGUMENTS			*/

dcl   arg_arg_ptr		        ptr,		/* (I) Pointer to order call argument. */
      arg_density		        fixed bin,		/* (I) Density code. */
      arg_dummy1		        char (*),
      arg_dummy2		        char (*),
      arg_dummy3		        fixed bin,
      arg_elem_size		        fixed bin,		/* (O) Element size. */
      arg_error_code	        fixed bin (35),	/* (O) Standard system error code. */
      arg_order_name	        char (*),		/* (I) Order call name. */
      arg_status		        bit (72) aligned,	/* (O) Standard ios_ status. */
      arg_tsegp		        ptr,		/* (I) Pointer to TSEG. */
      arg_tts_ptr		        ptr;		/* (I) Pointer to TTS segment. */


/*		AUTOMATIC  DATA		*/

dcl   error_code		        fixed bin (35),	/* Standard system error code. */
      i			        fixed bin;

dcl   message		        (4) fixed bin (71);	/* Used in call to ipc_. */

dcl   1 wait_list,					/* Used in calls to ipc_. */
        2 num		        fixed bin,		/* Number of event channels = 1. */
        2 ev_chan		        fixed bin (71);	/* Event channel ID. */


/*		BASED  DATA		*/

dcl   error_count		        fixed bin based;	/* Argument returned by "error_count"
					*  order call. */

/*		INTERNAL STATIC DATA	*/

/*	These are the DCW command codes used to set the density on
*	a tape drive.
*/
dcl   density_codes		        (0:4) fixed bin (6) internal static init (110100b,
						/*  200 BPI */
			        110001b,		/*  556 BPI */
			        110000b,		/*  800 BPI */
			        110101b,		/* 1600 BPI */
			        100001b);		/* 6250 BPI */


/*		EXTERNAL ENTRIES		*/

dcl   (addr, null)		        builtin;

dcl   (
      error_table_$bad_density,
      error_table_$device_attention,
      error_table_$undefined_order_request
      )			        external fixed bin (35);

dcl   convert_ipc_code_	        entry (fixed bin (35)),
      tdcm_$tdcm_iocall	        entry (ptr, fixed bin (35)),
      tdcm_$tdcm_reset_signal	        entry (ptr, fixed bin (35)),
      tdcm_$tdcm_set_signal	        entry (ptr, fixed bin (35)),
      ioa_		        entry options (variable),
      ipc_$block		        entry (ptr, ptr, fixed bin (35)),
      tape_attach_$open	        entry (ptr, fixed bin (35)),
      tape_detach_$close	        entry (ptr, fixed bin (35)),
      tape_util_$order	        entry (ptr, char (*), ptr, bit (72) aligned),
      tape_util_$rewind	        entry (ptr, fixed bin (35)),
      tape_write_$flush	        entry (ptr, fixed bin (35));
						/*	*/
%include tape_temp_seg;





%include ios_sdb;
/*	*/
%include tseg;
/*	*/
%include mstd;
/*	*/
%include mstr;
/*	*/
%include ios_status;
/*	*/
%include iom_stat;
/*	*/
order:
   entry (arg_tts_ptr, arg_order_name, arg_arg_ptr, arg_status);


/*	This entry implements the tape_ order call.  Only two order calls
*	are currently supported:
*
*	error_count:	If the tape is opened for reading, a zero value is
*			returned.  If the tape is opened for writing then all
*			output data currently buffered will be written and the
*			up-to-date error count will be returned.
*
*	rewind:		This order call does more than just rewind the tape.
*			It closes the tape, then rewinds the tape reel, and
*			then opens the tape again.
*/

      tts_ptr = arg_tts_ptr;				/* Initialize pointers. */
      tsegp = addr (tape_temp_seg.tseg);
      mstd_ptr = tseg.areap;
      ios_statp = addr (arg_status);

      arg_status = "0"b;
      error_code = 0;


      if arg_order_name = "error_count"			/* Which order call is it? */
      then goto ORDER_ERROR_COUNT;
      if arg_order_name = "rewind"
      then goto ORDER_REWIND;

      error_code = error_table_$undefined_order_request;
      goto ORDER_RETURN;


ORDER_ERROR_COUNT:
      arg_arg_ptr -> error_count = 0;			/* Initialize error count. */

      if tseg.write_sw = 0				/* Is tape opened for reading? */
      then goto ORDER_RETURN;				/* YES, nothing to do. */

      call tape_write_$flush (tsegp, error_code);		/* Write all buffered output. */
      if error_code ^= 0
      then goto ORDER_RETURN;

      arg_arg_ptr -> error_count = mstd.work.error_count;	/* Return error count. */

      if mstd.head.flags.eot				/* If at End of Tape tell caller. */
      then ios_status.log_end_data, ios_status.phy_end_data = "1"b;

      goto ORDER_RETURN;



ORDER_REWIND:
      call tape_detach_$close (tsegp, error_code);	/* CLOSE this tape. */
      if error_code ^= 0
      then goto ORDER_RETURN;

      call tape_util_$rewind (tsegp, error_code);		/* REWIND tape reel. */
      if error_code ^= 0
      then goto ORDER_RETURN;

      call tape_attach_$open (tsegp, error_code);		/* OPEN tape again. */


ORDER_RETURN:
      ios_status.code = error_code;
      return;					/*	*/
seek:
   entry (arg_tts_ptr, arg_dummy1, arg_dummy2, arg_dummy3, arg_status);


/*	This is an obsolete entry.  We will tell this to anyone who calls
*	this entry.  This entry is treated as a "rewind" order call.
*	No checking of arguments is performed.
*/

      call ioa_ ("tape_: seek  call no longer checks arguments");
      call ioa_ ("tape_: seek  should be replaced by rewind order call");

      call tape_util_$order (arg_tts_ptr, "rewind", null (), arg_status);

      return;





getsize:
   entry (arg_tts_ptr, arg_elem_size, arg_status);

/*	This entry returns the element size.  Currently, it is always 36.
*/

      arg_elem_size = 36;
      arg_status = "0"b;

      return;					/*	*/
rewind:
   entry (arg_tsegp, arg_error_code);


/*	This entry will rewind the tape and wait for the special interrupt.  */



      tsegp = arg_tsegp;				/* Copy arguments and set up. */
      statp = addr (tseg.hardware_status);
      wait_list.num = 1;
      wait_list.ev_chan = tseg.ev_chan;

      tseg.command_count,				/* Flush any bad status. */
         tseg.buffer_count = 0;			/* Nothing actually done. */
      call tdcm_$tdcm_iocall (tsegp, error_code);
      if error_code ^= 0
      then goto REWIND_RETURN;

      call tdcm_$tdcm_set_signal (tsegp, error_code);	/* Set up to recieve special interrupt. */
      if error_code ^= 0
      then goto REWIND_RETURN;

      tseg.sync,					/* Now issue REWIND command. */
         tseg.command_count = 1;
      tseg.command_queue (1) = 111000b;
      call tdcm_$tdcm_iocall (tsegp, error_code);
      if error_code ^= 0
      then goto REWIND_RETURN;
      if tseg.completion_status ^= 1			/* Was rewind command actually initiated? */
      then goto REWIND_ERROR;				/* NO, nothing we can do. */

REWIND_WAIT:
      call ipc_$block (addr (wait_list), addr (message), error_code);
      if error_code ^= 0
      then
         do;
	  call convert_ipc_code_ (error_code);
	  goto REWIND_RETURN;
         end;

      tseg.command_count = 1;
      tseg.command_queue = 100000b;			/* RESET STATUS: make sure rewind done. */
      call tdcm_$tdcm_iocall (tsegp, error_code);
      if (error_code ^= 0) | /* Error? */ (tseg.completion_status = 1)
						/* Good status? */
      then goto REWIND_RETURN;			/* In either case nothing more to do. */
      if status.major = "0001"b			/* DEVICE BUSY: only bad status we handle. */
      then goto REWIND_WAIT;				/* YES, rewind still in progress. */

REWIND_ERROR:					/* We got status we didn't expect. */
      error_code = error_table_$device_attention;

REWIND_RETURN:					/* Cleanup before we return. */
      tseg.sync = 0;
      call tdcm_$tdcm_reset_signal (tsegp, error_code);
      arg_error_code = error_code;
      return;					/*	*/
set_density:
   entry (arg_tsegp, arg_density, arg_error_code);


/*	This routine is called to set the density of a tape drive.
*	The density argument is a code which represents one of the
*	following density settings:
*	0 =>  200 BPI
*	1 =>  556 BPI
*	2 =>  800 BPI
*	3 => 1600 BPI
*	4 => 6250 BPI
*/

      tsegp = arg_tsegp;				/* Initialize. */
      error_code = 0;

      tseg.buffer_count = 0;
      tseg.sync, tseg.command_count = 1;
      tseg.command_queue (1) = density_codes (arg_density);
      call tdcm_$tdcm_iocall (tsegp, error_code);
      if error_code ^= 0
      then goto DENSITY_RETURN;
      if tseg.completion_status = 1
      then goto DENSITY_RETURN;

      if addr (tseg.hardware_status) -> status.major = "0101"b
      then error_code = error_table_$bad_density;
      else error_code = error_table_$device_attention;

DENSITY_RETURN:
      tseg.sync = 0;				/* This must be reset. */
      arg_error_code = error_code;			/* Return whatever code we have. */
      return;



   end tape_util_;
