/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* format: style3,ind3,initlm3,dclind6,idind32 */
tape_attach_:
   procedure;


/*	Part of the Multics standard tape DIM:  tape_.
   *	Originally coded by  Bill Silver  on 12/27/73.
   *	Converted for RCP by Bill Silver  on 03/27/75.
   *	Name canonicalization added by C. D. Tavares, 05/10/79.
   *	Modified 7/79 by R.J.C. Kissel to support 6250 bpi.
*/


/*			ARGUMENT  DATA	*/

dcl   arg_error_code	        fixed bin (35),	/* (O) Standard error code. */
      arg_ioname1		        char (*),		/* (I) Dim name, but not used. */
      arg_ioname2		        char (*),		/* (I) Tape reel ID, etc. */
      arg_mode		        char (*),		/* (I) Attachment mode. */
      arg_status		        bit (72) aligned,	/* (O) Standard ios_ error status. */
      arg_tsegp		        ptr,		/* (I) Pointer to TSEG. */
      arg_tts_ptr		        ptr,		/* (I) Pointer to TAPE_TEMP_SEG. */
      arg_type		        char (*);		/* (I) Not used. */


/*			AUTOMATIC  DATA	*/

dcl   attach_flag		        bit (1),		/* ON => tape drive attached in ring 0. */
      density		        fixed bin,		/* Density of tape. */
      density_retry_flag	        fixed bin,		/* number of densities tried. */
      initial_den_idx	        fixed bin,
      error_code		        fixed bin (35),	/* Standard system error code. */
      volid		        char (16);		/* Tape reel ID. */

dcl   1 wait_list		        aligned,		/* Used to call ipc_. */
        2 num		        fixed bin,		/* Number of event channels.  Always = 1. */
        2 ev_chan		        fixed bin (71);	/* Event channel ID. */

dcl   1 message		        aligned,		/* Used to call ipc_. */
        2 chan_name		        fixed bin (71),
        2 message		        fixed bin (71),
        2 sender		        bit (36),
        2 origin,
        ( 3 dev_signal	        bit (18),
	3 ring		        bit (18)
	)		        unaligned,
        2 chanelx		        fixed bin;


/*		INTERNAL STATIC DATA	*/

dcl   tts_count		        fixed bin (35) /* Count of TTS segments created. */ init (0) internal static;

dcl   (
      den_800		        fixed bin init (2),	/* Density Indexes. */
      den_1600		        fixed bin init (3),
      den_6250		        fixed bin init (4)
      )			        internal static;


/*		EXTERNAL  ENTRIES		*/

dcl   (addr, index, length, null, ptr, substr)
			        builtin;

dcl   tape_dim_data_$tdcm_buf_size    fixed bin external;

dcl   (
      error_table_$bad_density,
      error_table_$bad_mode,
      error_table_$ionmat,
      error_table_$no_room_for_dsb
      )			        external fixed bin (35);

dcl   convert_binary_integer_$decimal_string
			        entry (fixed bin (35)) returns (char (12) varying),
      convert_ipc_code_	        entry (fixed bin (35)),
      hcs_$delentry_seg	        entry (ptr, fixed bin (35)),
      hcs_$make_seg		        entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35)),
      tdcm_$tdcm_attach	        entry (ptr, fixed bin (35)),
      tdcm_$tdcm_detach	        entry (ptr, fixed bin (35)),
      tdcm_$tdcm_message	        entry (ptr, char (*) aligned, fixed bin (1), fixed bin (35)),
      tdcm_$tdcm_reset_signal	        entry (ptr, fixed bin (35)),
      tdcm_$tdcm_set_buf_size	        entry (ptr, fixed bin, fixed bin (35)),
      tdcm_$tdcm_set_signal	        entry (ptr, fixed bin (35)),
      ioa_		        entry options (variable),
      ipc_$block		        entry (ptr, ptr, fixed bin (35)),
      ipc_$create_ev_chn	        entry (fixed bin (71), fixed bin (35)),
      tape_labeler_$read	        entry (ptr, char (*), fixed bin (35)),
      tape_labeler_$write	        entry (ptr, char (*) aligned, fixed bin (35)),
      tape_util_$rewind	        entry (ptr, fixed bin (35)),
      tape_util_$set_density	        entry (ptr, fixed bin, fixed bin (35));
						/* 	*/
%include tape_temp_seg;






%include ios_sdb;
/* 	*/
%include tseg;
/* 	*/
%include mstd;
/* 	*/
%include mstr;
/* 	*/
%include ios_status;
/* 	*/
attach:
   entry (arg_ioname1, arg_type, arg_ioname2, arg_mode, arg_status, arg_tts_ptr);

/*	This entry is called to attach a tape drive to a process.  This involves the
   *	following major tasks:
   *	1.  Making a temporary tape segment (TTS) that is used as a work area while
   *	    communicating with the attached tape drive.
   *	2.  Filling in the standard fields in the  stream_data_block (SDB)  associated with
   *	    this attachment.
   *	3.  Initialize the data block (TSEG) used to communicate with ring 0.
   *	4.  Call to get a tape drive.
   *	5.  Currently, we will also  OPEN  the tape.  See the tape_attach_$open entry.
*/

      attach_flag,					/* Flag turned ON when drive actually attached. */
         arg_status = "0"b;
      error_code = 0;
      ios_statp = addr (arg_status);
      tts_ptr = null ();				/* tape_temp_seg_ not created yet. */


      if arg_tts_ptr ^= null ()			/* Check for previous attachment. */
      then
         do;
	  error_code = error_table_$ionmat;
	  goto ATTACH_ERROR;
         end;

      if (substr (arg_mode, 1, 1) ^= "w") & /* Validate attachment mode. */ (substr (arg_mode, 1, 1) ^= "r")
      then
         do;					/* Error, mode not "write" or "read". */
	  error_code = error_table_$bad_mode;
	  goto ATTACH_ERROR;
         end;

/*	We must create a temporary work segment for this attachment.  This segment is
   *	created in the process directory.  Each such segment is given a unique name.
*/
      tts_count = tts_count + 1;
      call
         hcs_$make_seg ("", "tape_temp_seg_" || convert_binary_integer_$decimal_string (tts_count) || "_", "", 01011b,
         tts_ptr, error_code);
      if error_code ^= 0
      then
         do;
	  error_code = error_table_$no_room_for_dsb;
	  goto ATTACH_ERROR;
         end;

      sdb_ptr = addr (tape_temp_seg.sdb);		/* Get pointer to SDB. */
      mstd_ptr = addr (tape_temp_seg.mstd);		/* Get pointer to MSTD. */
      tsegp = addr (tape_temp_seg.tseg);		/* Get pointer to TSEG. */

      sdb.outer_module = "tape_";			/* Fill in SDB. */
      sdb.dev_names = addr (sdb.name_list);
      sdb.name_list.next_device = null ();
      sdb.name_list.name_size = length (arg_ioname2);
      sdb.name_list.name_string = arg_ioname2;

/*	Now set up the TSEG. */

      tseg.version_num = tseg_version_1;
      tseg.areap = mstd_ptr;				/* Save pointer to DIM work area. */

      call ipc_$create_ev_chn (tseg.ev_chan, error_code);
      if error_code ^= 0
      then
         do;
	  call convert_ipc_code_ (error_code);
	  goto ATTACH_ERROR;
         end;

      call ATTACH;					/* Get tape drive. */
      if error_code ^= 0				/* Was there an error while attaching? */
      then goto ATTACH_ERROR;

      call OPEN;					/* We will automatically open. */
      if error_code ^= 0				/* Was there an error while opening? */
      then goto ATTACH_ERROR;

      arg_tts_ptr = tts_ptr;				/* Return this pointer. */
      return;					/* Tape has been successfully attached
						   *  and opened. */

ATTACH_ERROR:
      ios_status.code = error_code;			/* Return dim error status. */
      ios_status.detach = "1"b;			/* Tell caller tape NOT attached. */
      if attach_flag				/* Was tape ever attached? */
      then call tdcm_$tdcm_detach (tsegp, error_code);
      if tts_ptr ^= null ()				/* Delete temp seg if created. */
      then call hcs_$delentry_seg (tts_ptr, error_code);
      return;					/* 	*/
open:
   entry (arg_tsegp, arg_error_code);


/*	Currently this entry is just called from within tape_.  It is assumed that
   *	the tape is attached.
*/

      tsegp = arg_tsegp;				/* Set up. */
      mstd_ptr = tseg.areap;
      tts_ptr = ptr (tsegp, "0"b);			/* Get pointer to base of segment. */
      sdb_ptr = addr (tape_temp_seg.sdb);		/* Now get pointer to SDB. */
      error_code = 0;

      call OPEN;					/* This is all we have to do. */

      arg_error_code = error_code;

      return;					/* 	*/
ATTACH:
   procedure;


/*	This internal procedure is called to attach a tape.
   *	tdcm_ via RCP will do all of the tape mounting work.
*/

      if substr (arg_mode, 1, 1) = "w"			/* Set write/read switch. */
      then tseg.write_sw = 1;
      else tseg.write_sw = 0;

      if index (arg_ioname2, ",7track") = 0		/* Is this a7 track reel? */
      then tseg.tracks = 0;				/* NO,  default is 9 track. */
      else tseg.tracks = 1;				/* YES, user specified "7track" in reel name. */

      tseg.density = "0"b;				/* Take any density. */

      call tdcm_$tdcm_attach (tsegp, error_code);		/* Perform actual attachment. */
      if error_code ^= 0
      then return;

      attach_flag = "1"b;				/* Note that tape actually attached. */

      call tdcm_$tdcm_set_signal (tsegp, error_code);
      if error_code ^= 0				/* We must be able to get specials. */
      then return;

      if tape_dim_data_$tdcm_buf_size = 4160
      then
         do;					/* Special user who wants a large buffer. */
	  call tdcm_$tdcm_set_buf_size (tsegp, 4160, error_code);
	  if error_code ^= 0
	  then return;
         end;

      call ioa_ ("tape_: Mounting tape ^a for ^a", arg_ioname2, arg_mode);

/* tdcm_ will do the mounting via RCP. */
      call tdcm_$tdcm_message (tsegp, sdb.name_list.name_string, tseg.write_sw, error_code);
      if error_code ^= 0
      then return;

      sdb.name_list.name_size = length (rtrim (sdb.name_list.name_string));

      wait_list.num = 1;				/* Now wait for mount to complete. */
      wait_list.ev_chan = tseg.ev_chan;			/* Set up the one event wait channel. */

      call ipc_$block (addr (wait_list), addr (message), error_code);
      if error_code ^= 0				/* Check for any IPC error. */
      then
         do;					/* Yes, sort out non standard codes. */
	  call convert_ipc_code_ (error_code);
	  return;
         end;

      call tdcm_$tdcm_reset_signal (tsegp, error_code);
      if error_code ^= 0
      then return;

      call ioa_ ("tape_: Tape ^a mounted on drive ^a", sdb.name_list.name_string, tseg.drive_name);

   end ATTACH;					/* 	*/
OPEN:
   procedure;

/*	This internal procedure is called to OPEN a tape.  The concept of opening a
   *	tape is not very precise.  Basically, those things which only have to be done
   *	once, when a user is assigned a tape drive, are part of attaching.  Those things
   *	which must be done each time a use wants to rewind a tape, and process it again,
   *	are part of opening.  At any rate, the major task of opening is label processing.
*/

/* We must set tye tape density. */
      if index (sdb.name_list.name_string, "=1600") ^= 0
      then
         do;
	  density = den_1600;
	  initial_den_idx = 2;
         end;

      else if index (sdb.name_list.name_string, "=6250") ^= 0
      then
         do;
	  density = den_6250;
	  initial_den_idx = 3;
         end;

      else
         do;
	  density = den_800;
	  initial_den_idx = 1;
         end;

      call tape_util_$set_density (tsegp, density, error_code);
      if error_code ^= 0
      then return;

      if tseg.write_sw ^= 0				/* Open different for read and write. */
      then
         do;					/* WRITE OPEN */
	  call tape_labeler_$write (tsegp, sdb.name_list.name_string, error_code);
	  return;
         end;

/* READ OPEN */
      density_retry_flag = 0;				/* Set before entering read loop. */
      do while (error_code = 0);			/* We may call twice if density problems. */
         call tape_labeler_$read (tsegp, volid, error_code);
         if error_code = 0				/* Was there any error? */
         then return;				/* NO,  jump out of loop. */
         else call RESET_DENSITY;			/* Yes, check for bad density. */
      end;


   end OPEN;					/* 	*/
RESET_DENSITY:
   procedure;


/*	This procedure is called to check the error code returned from the call
   *	to tape_labeler_$read.  If the error is not a density problem or if
   *	we have already reset the density once, then we will just return the
   *	error code.  Otherwize, we will try to set the density to a new value.
*/

dcl   den_table		        (3, 2) fixed bin internal static options (constant) init (3, 4, 4, 2, 2, 3);

      if (error_code ^= error_table_$bad_density) | (density_retry_flag = 2)
      then return;

      density_retry_flag = density_retry_flag + 1;
      density = den_table (initial_den_idx, density_retry_flag);

      call tape_util_$rewind (tsegp, error_code);		/* Tape must be at BOT to set density. */
      if error_code ^= 0
      then return;

      call tape_util_$set_density (tsegp, density, error_code);

   end RESET_DENSITY;


   end tape_attach_;
