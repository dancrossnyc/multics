/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4,delnl,insnl,indattr,ifthen,declareind10,dclind10 */
tape_mult_:
     procedure;

/*	This program is part of the Multics standard tape I/O module, tape_mult_.
   *
   *	Created on 10/24/74 by Bill Silver.
   *	Modified 7/79 by R.J.C. Kissel to add 6250 bpi support.
   *	Modified 7/81 by J. A. Bush for bootable tape labels
   *	Modified 01/82 by J. A. Bush to change the name from tape_mult_attach_ to tape_mult_
   *      Modified 8/82 by S. Krupp to change from tdcm_ to tape_ioi_ interface.
   *	Modified 12/15/82 by Chris Jones to not require the record length on reads (performance improvement).
   *      Modified 1985-03-18, BIM: add modes entrypoint for async processing.
   *
   *	This program implements the iox_$attach entry point.
*/


/*		ARGUMENT  DATA		*/

dcl	arg_com_err_flag	   bit (1),		/* (I) ON => call com_err_ on errors. */
	arg_error_code	   fixed bin (35),		/* (O) error_table_ code. */
	arg_iocb_ptr	   ptr,			/* (I) Pointer to I/O control block. */
	arg_options	   (*) char (*) varying;	/* (I) List of option and value strings. */


/*		AUTOMATIC  DATA		*/

dcl	1 auto_error_tally	   aligned like tec,
	com_err_flag	   bit (1),		/* ON => call com_err_. */
	activation_flag	   bit (1) aligned init ("0"b),
						/* ON => tape_ioi_ has been activated. */
	attach_flag	   bit (1) aligned init ("0"b),
						/* ON => tape drive attached by rcp_. */
          density                fixed bin,
	error_code	   fixed bin (35),		/* Standard system error code. */
	iocb_ptr		   ptr,			/* Pointer to our iocb. */
	reel_name		   char (32),		/* Tape reel name. */
	rcp_id		   bit (36) aligned,	/* id associated with a tape drive attachment */
	tioi_id		   bit (36) aligned,	/* id associated with a tape_ioi_ activation */
	event_channel	   fixed bin (71),		/* used by rcp for attachment and ioi */
	comment		   char (256),		/* user comment to operator */
	ioi_id		   fixed bin,		/* tape_ioi_ activation info */
	workspace_max	   fixed bin (19),
	timeout_max	   fixed bin (71),
	statex		   fixed bin,		/* state of pending tape drive attachment */
	req_work_area_len	   fixed bin (19),		/* requested size of work area allocation */
	act_work_area_len	   fixed bin (19);		/* actual size of allocated work area */

dcl	1 wait_list	   aligned,		/* Used to call ipc_. */
	  2 num		   fixed bin,		/* Number of event channels.  Always = 1. */
	  2 ev_chan	   fixed bin (71);		/* Event channel ID. */

dcl	1 event_info	   aligned,		/* Used to call ipc_. */
	  2 chan_name	   fixed bin (71),
	  2 message	   fixed bin (71),
	  2 sender	   bit (36),
	  2 origin,
	  ( 3 dev_signal	   bit (18),
	    3 ring	   bit (18)
	    )		   unaligned,
	  2 chanelx	   fixed bin;

dcl	1 auto_tmdb	   aligned like tmdb;

dcl	1 auto_tape_info	   aligned like tape_info;

dcl	1 auto_tioi_info	   aligned like tioi_info;

/*                  BUILTIN                       */

dcl	(addr, after, before, char, currentsize, index, ltrim, null, rtrim, unspec)
			   builtin;

/*                  CONDITIONS                    */

dcl	cleanup		   condition;

/*                  EXTERNAL STATIC DATA          */

dcl	(
	error_table_$area_too_small,
	error_table_$bad_density,
	error_table_$ionmat,
	error_table_$not_detached
	)		   fixed bin (35) ext static;

/*		INTERNAL STATIC DATA	*/

dcl	req_len		   bit (1) aligned init ("0"b) int static options (constant);

/*		EXTERNAL  ENTRIES		*/

dcl	tape_mult_detach_$detach
			   entry options (variable),
	tape_mult_util_$control
			   entry options (variable),
	tape_mult_open_$open   entry options (variable);
dcl       tape_mult_modes_       entry options (variable);

dcl	com_err_		   entry options (variable),
	convert_ipc_code_	   entry (fixed bin (35)),
	cv_dec_check_	   entry (char(*), fixed bin(35)) returns(fixed bin(35)),
	hcs_$assign_channel	   entry (fixed bin (71), fixed bin (35)),
	ioa_		   entry options (variable),
	iox_$propagate	   entry (ptr),
	ipc_$block	   entry (ptr, ptr, fixed bin (35)),
	ipc_$create_ev_chn	   entry (fixed bin (71), fixed bin (35)),
	tape_mult_parse_	   entry options (variable);

dcl	rcp_$attach	   entry (char (*), ptr, fixed bin (71), char (*), bit (36) aligned, fixed bin (35)),
	rcp_$check_attach	   entry (bit (36) aligned, ptr, char (*), fixed bin, fixed bin (19), fixed bin (71),
			   fixed bin, fixed bin (35)),
	rcp_$detach	   entry (bit (36) aligned, bit (*), fixed bin, char (*), fixed bin (35));
%page;
%include tmdb;
%page;
%include mstr;
%page;
%include tape_ioi_dcls;
%page;
%include tape_ioi_error_counts;
%page;
%include tape_ioi_info;
%page;
%include rcp_tape_info;
%page;
%include rcp_resource_types;
%page;
%include iocb;
%page;
tape_mult_attach:
     entry (arg_iocb_ptr, arg_options, arg_com_err_flag, arg_error_code);

/*	This entry is called to attach a tape drive to a process.  This involves the
   *	following major tasks:
   *	1.  Interface with rcp_ to make the tape drive attachment.
   *	2.  Initialize tmdb variables.
   *	3.  Set up the tape_ioi_ activation.
   *	4.  Fill in the standard fields in the I/O control block.
*/
	iocb_ptr = arg_iocb_ptr;			/* Copy arguments. */
	com_err_flag = arg_com_err_flag;

	reel_name = "noreel";			/* no reel specified yet. */
	tmdb_ptr = addr (auto_tmdb);			/* temp tmdb storage */

	unspec (tmdb) = "0"b;			/* init tmdb structure */

	if iocb_ptr -> iocb.attach_data_ptr ^= null then do;
						/* iocb is already attached. */
	     error_code = error_table_$not_detached;
	     goto ATTACH_ERROR;
	end;

/*	We must parse the attach options.  tape_mult_parse_ will do this.
   *	It puts the converted values in the tape_mult_ data block.
*/

	call tape_mult_parse_ (tmdb_ptr, arg_options, com_err_flag, error_code);
	if error_code ^= 0 then
	     goto ATTACH_ERROR;

          if index(tmdb.opt.reel_name, ",sys") > 0
          then tmdb.opt.system = "1"b;

	if index(tmdb.opt.reel_name, ",den=") > 0
	then do;
	     density = cv_dec_check_(before(after(tmdb.opt.reel_name, ",den="), ","), error_code);
	     if error_code ^= 0
	     then goto ATTACH_ERROR;
	     if density ^= 800 & density ^= 1600 & density ^= 6250
	     then do;
	          error_code = error_table_$bad_density;
		go to ATTACH_ERROR;
	     end;
	     tmdb.opt.density = density;
	end;

          tmdb.opt.reel_name = before(tmdb.opt.reel_name, ",");  /* Get real reel name. */
          reel_name = tmdb.opt.reel_name;

	on cleanup call cleanup_attach ();

	call ATTACH;				/* Get tape drive. */
	if error_code ^= 0				/* Was there an error while attaching? */
	then goto ATTACH_ERROR;

/*	Attachment has been completed successfully.  We must fill in the iocb.
   *	Then we must propagate this iocb.
*/
	iocb_ptr -> iocb.attach_descrip_ptr = addr (tmdb.attach);
	iocb_ptr -> iocb.attach_data_ptr = tmdb_ptr;
	iocb_ptr -> iocb.detach_iocb = tape_mult_detach_$detach;
	iocb_ptr -> iocb.open = tape_mult_open_$open;
	iocb_ptr -> iocb.control = tape_mult_util_$control;
	iocb_ptr -> iocb.modes = tape_mult_modes_;

	call iox_$propagate (iocb_ptr);		/* Propagate this iocb. */

	arg_error_code = 0;				/* Tape has been successfully attached. */
	return;

ATTACH_ERROR:
	arg_error_code = error_code;			/* Return error code. */
	if com_err_flag				/* Should we write com_err_ message? */
	then call com_err_ (error_code, "tape_mult_", "Error attaching tape reel ^a", reel_name);
	call cleanup_attach ();

	return;					/*						*/
ATTACH:
     procedure;

/*	This internal procedure is called to attach a tape
   *      and set up the tape_ioi_ activation which includes getting
   *      any needed workspace and setting the appropriate modes.
   *      Tape attachment is accomplished via rcp_.
*/

	tape_info_ptr = addr (auto_tape_info);
	tape_info.version_num = tape_info_version_2;
	tape_info.usage_time = 0;			/* Initialize, not used yet */
	tape_info.wait_time = 0;			/* Same */
	tape_info.system_flag = tmdb.opt.system;	/* System process */
	tape_info.device_name = "";			/* Any drive? */
	tape_info.model = 0;			/* Any model */
	tape_info.tracks = tmdb.opt.tracks;		/* User option */

	if tmdb.opt.density = 800			/* User option */
	then tape_info.density = "00100"b;
	else if tmdb.opt.density = 1600 then
	     tape_info.density = "00010"b;
	else tape_info.density = "00001"b;		/* 6250 bpi */

	tape_info.speed = tmdb.opt.speed;		/* User option */
	tape_info.unused_qualifier = "0"b;
	tape_info.volume_name = reel_name;		/* User option */
	tape_info.write_flag = tmdb.opt.ring;		/* User option */
	tape_info.position_index = 0;			/* Initialize, not used yet */

/*        Get event channel for rcp_. */

	call ipc_$create_ev_chn (event_channel, error_code);
	if error_code ^= 0 then do;
	     call convert_ipc_code_ (error_code);
	     return;
	end;

	tmdb.channels.rcp = event_channel;

	if tmdb.opt.system | tmdb.opt.density ^= 1600 | tmdb.opt.comment ^= ""
	then do;
	     comment = rtrim (reel_name);
	     if tmdb.opt.density ^= 1600 then
	          comment = rtrim(comment) || ",den=" || ltrim(rtrim(char(tmdb.opt.density)));
	     if tmdb.opt.system then
		comment = rtrim (comment) || ",sys";
	     if tmdb.opt.comment ^= "" then
		comment = rtrim (comment) || ",*" || tmdb.opt.comment;
	end;
	else comment = "";

/*        Attach drive. */

	call ioa_ ("Mounting tape ^a for ^a", reel_name, tmdb.opt.mount_mode);

	call rcp_$attach (DEVICE_TYPE (TAPE_DRIVE_DTYPEX), tape_info_ptr, event_channel, comment, rcp_id, error_code);
	if error_code ^= 0 then
	     return;

	attach_flag = "1"b;				/* Must be detached if error */

	wait_list.num = 1;
	wait_list.ev_chan = event_channel;

ATTACH_LOOP:
	comment = "";

	call rcp_$check_attach (rcp_id, tape_info_ptr, comment, ioi_id, workspace_max, timeout_max, statex, error_code);
	if comment ^= "" & com_err_flag then
	     call com_err_ (0, "tape_mult_", "RCP comment: ^a", comment);

	go to ATTACH_STATE (statex);

ATTACH_STATE (1):					/* short wait */
	call ipc_$block (addr (wait_list), addr (event_info), error_code);
	if error_code ^= 0 then do;
	     call convert_ipc_code_ (error_code);
	     return;
	end;

	go to ATTACH_LOOP;

ATTACH_STATE (2):					/* long wait, forget it */
	error_code = error_table_$ionmat;

ATTACH_STATE (3):					/* fatal error */
	return;

ATTACH_STATE (0):					/* success */
	tioi_info_ptr = addr (auto_tioi_info);
	tioi_info.version = tioi_info_version_1;
	tioi_info.ioi_index = ioi_id;
	tioi_info.timeout_max = timeout_max;
	tioi_info.workspace_max = workspace_max;

	call hcs_$assign_channel (event_channel, error_code);
	if error_code ^= 0
	then do;
	     call ipc_$create_ev_chn(event_channel, error_code);
	     if error_code ^= 0
	     then do;
	          call convert_ipc_code_(error_code);
		return;
	     end;
	end;

	tmdb.channels.ioi = event_channel;

	tioi_info.event_id = event_channel;

	call tape_ioi_$activate (tape_info_ptr, tioi_info_ptr, tioi_id, error_code);
	if error_code ^= 0 then
	     return;

	activation_flag = "1"b;

/*        Finish tmdb initialization. */

	tmdb.opt.reel_name = before(tape_info.volume_name, ",");	/* might have changed */
	tmdb.work.rcp_id = rcp_id;
	tmdb.work.tioi_id = tioi_id;

/*        Get workspace for permanent tmdb storage. */

	req_work_area_len = currentsize (tmdb);

	call tape_ioi_$allocate_work_area (tioi_id, req_work_area_len, act_work_area_len, tmdb_ptr, error_code);
	if error_code ^= 0 then
	     return;
	if act_work_area_len ^= req_work_area_len then do;
	     error_code = error_table_$area_too_small;	/* A different code should be used. */
	     return;
	end;

	tmdb = auto_tmdb;

	call ioa_ ("Mounted tape ^a on drive ^a", reel_name, tape_info.device_name);

/*        Set appropriate modes: not req_len by tape_ioi_, all other default. */

	call tape_ioi_$set_mode (tioi_id, "req_len", addr (req_len), error_code);

     end ATTACH;

cleanup_attach:
     proc ();

	if attach_flag then
	     call rcp_$detach (rcp_id, "0"b, (0), "", (0));

	if activation_flag then do;
	     auto_error_tally.version = TEC_VERSION_1;
	     call tape_ioi_$deactivate (tioi_id, addr (auto_error_tally), (0));
	end;

     end cleanup_attach;

     end tape_mult_;
