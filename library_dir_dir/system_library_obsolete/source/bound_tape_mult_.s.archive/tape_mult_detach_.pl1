/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4,delnl,insnl,ifthen */
tape_mult_detach_:
     procedure;

/*	This program is part of the Multics standard tape I/O module, tape_mult_.
   *
   *	Created on 10/28/74 by Bill Silver.
   *         Modified 7/28/81 by J. A. Bush for bootable tape labels
   *         Modified 8/82 by S. Krupp for change from tdcm_ to tape_ioi_ interface.
   *
   *	This program implements the iox_$detach_iocb entry point.
   *	Detaching involves the following steps:
   *	     1.  Calling rcp_ to detach the tape drive.
   *	     2.  Deleting the event channel that  was created for this attachment.
   *	     3.  Setting the iocb to the detached state.
*/


/*		ARGUMENTS			*/

dcl  arg_error_code fixed bin (35),			/* (O) Standard system error code. */
     arg_iocb_ptr ptr;				/* (I) Pointer to I/O control block. */


/*		AUTOMATIC  DATA		*/

dcl  error_code fixed bin (35),			/* Standard system error code. */
     error_count fixed bin,				/* Rcp error count. */
     event_channel fixed bin(71),
     iocb_ptr ptr,					/* Pointer to I/O control block. */
     ioi_channel fixed bin(71),
     rcp_id bit(36) aligned,				/* Id for tape drive attachment. */
     rcp_channel fixed bin(71),
     save_code fixed bin (35),			/* Used to play with error code. */
     tioi_id bit(36) aligned;				/* Id for tape_ioi_ activation. */

dcl  1 auto_error_tally aligned like tec;

/*                  STATIC                        */

dcl  DISPOSITION bit(1) init("0"b) int static options(constant);
						/* Disposition of tape drive */
						/* after rcp detachment. */

/*		EXTERNAL ENTRIES		*/

dcl  (addr, unspec, null) builtin;

dcl  hcs_$delete_channel entry (fixed bin(71), fixed bin(35)),
     ipc_$delete_ev_chn entry (fixed bin(71), fixed bin(35)),
     iox_$err_not_attached entry options (variable),
     iox_$propagate entry (ptr),
     rcp_$detach entry(bit(36) aligned, bit(*), fixed bin, char(*), fixed bin(35)),
     release_temp_segment_ entry (char (*), ptr, fixed bin (35)),
     convert_ipc_code_ entry (fixed bin (35));
%page;
%include iocb;
%page;
%include tmdb;
%page;
%include mstr;
%page;
%include tape_ioi_dcls;
%page;
%include tape_ioi_error_counts;
%page;
detach:
     entry (arg_iocb_ptr, arg_error_code);

	iocb_ptr = arg_iocb_ptr;			/* Copy argument. */

	tmdb_ptr = iocb_ptr -> iocb.attach_data_ptr;	/* Initialize pointer. */
	tioi_id = tmdb.work.tioi_id;
	rcp_id = tmdb.work.rcp_id;
	error_code, save_code = 0;
	if tmdb.tbpp ^= null then			/* user had boot pgm, and never opened */
	     call release_temp_segment_ ("tape_mult_", tmdb.opt.tbpp, (0));
						/* so release boot pgm temp seg now */

          rcp_channel = tmdb.channels.rcp;
	ioi_channel = tmdb.channels.ioi;

          unspec(auto_error_tally) = "0"b;
          auto_error_tally.version = TEC_VERSION_1;

          call tape_ioi_$deactivate(tioi_id, addr(auto_error_tally), save_code);
						/* release buffers and workspace, */
	call SAVE_CODE;				/* generally deactivate. */

          error_count = auto_error_tally.writes.errors + auto_error_tally.reads.errors + auto_error_tally.orders.errors;

	call rcp_$detach(rcp_id, DISPOSITION, error_count, "", save_code);
						/* Detach tape drive. */
	call SAVE_CODE;

	do event_channel = rcp_channel, ioi_channel;
	     call ipc_$delete_ev_chn(event_channel, save_code);
	     if save_code ^= 0
	     then call convert_ipc_code_(save_code);
	     call SAVE_CODE;
	end;

	iocb_ptr -> iocb.attach_data_ptr,		/* Now put iocb in detached state. */
	     iocb_ptr -> iocb.attach_descrip_ptr = null ();
	iocb_ptr -> iocb.open, iocb_ptr -> iocb.detach_iocb = iox_$err_not_attached;

	call iox_$propagate (iocb_ptr);		/* Propagate changes to I/O control block. */

	arg_error_code = error_code;
	return;					/*						*/
SAVE_CODE:
     procedure;

/*	Called to save first error code that is not zero. */

	if error_code = 0 then
	error_code = save_code;

     end SAVE_CODE;


     end tape_mult_detach_;
