/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4,delnl,insnl,indattr,ifthen,dclind9 */
tape_mult_parse_:
     procedure (arg_tmdb_ptr, arg_options, arg_com_err_sw, arg_error_code);

/*	This program is part of the Multics standard tape I/O module, tape_mult_.
   *
   *	Created on 10/24/74 by  Bill Silver.
   *	Modified 4/79 by R.J.C. Kissel to handle 6250 bpi.
   *	Modified 1/2/81 by J. A. Bush for bootable tape_labels
   *	Modified 1/7/82 by J. A. Bush for the "-error_tally" att. desc arg
   *      Modified 8/82 by S. Krupp for change from tdcm_ to tape_ioi_ interface.
   *
   *	This program is called to parse the attach options accepted by tape_mult_.
   *	It will set up all of the attach option defaults.  The option values will be
   *	returned in the tape_mult_ data block.  tape_mult_parse_ will also build the
   *	attach description string.
*/


/*		ARGUMENT  DATA		*/

dcl      arg_error_code	  fixed bin (35),		/* (O) error_table_ code. */
         arg_com_err_sw	  bit(1) aligned,		/* (I) I/O module comerr switch. */
         arg_options	  (*) char (*) varying,	/* (I) Array of input options. */
         arg_tmdb_ptr	  ptr;			/* (I) Pointer to tape_mult_ data block. */


/*		AUTOMATIC  DATA		*/

dcl      attach_description	  char (64) varying,	/* Used to build attach description. */
         com_err_sw		  bit(1) aligned,
         error_code		  fixed bin (35),		/* error_table_ code. */
         keyx		  fixed bin,		/* Index to option key arrays. */
         num_options	  fixed bin,		/* Number of attach options. */
         option		  char (32) varying,	/* A single option string. */
         optx		  fixed bin,		/* Index to options array. */
         value		  char (32) varying;	/* A single option value string. */


/*		INTERNAL STATIC DATA	*/

dcl      short_keys		  (8) char (4) internal static/* Table of short option key names. */
			  init ("-wrt", "-den", "-tk ", "-com", "-sys", "-vsn", "-et ", "-ips");

dcl      long_keys		  (8) char (16) internal static
						/* Table of long  option key names. */
			  init ("-write", "-density", "-track", "-comment", "-system", "-volume_set_name",
			  "-error_tally", "-speed");

dcl      value_flags	  (8) bit (1) internal static /* ON => option has accompanying value . */
			  init ("0"b, "1"b, "1"b, "0"b, "0"b, "1"b, "0"b, "1"b);


/*		EXTERNAL ENTRIES CALLED	*/

dcl      (hbound, index, length, null, string, substr)
			  builtin;

dcl      (
         error_table_$bad_arg,
         error_table_$inconsistent,
         error_table_$noarg,
         error_table_$wrong_no_of_args
         )		  fixed bin (35) external;

dcl      com_err_		  entry options (variable);
dcl      canon_for_volume_label_
			  entry (char (*), char (*), char (*), fixed bin, fixed bin (35));
dcl      get_group_id_	  entry () returns (char (32)),
         get_ring_		  entry returns (fixed bin);

%include tmdb;
%page;
%include mstr;
%page;
%include rcp_volume_formats;
%page;
%include rcp_resource_types;

	tmdb_ptr = arg_tmdb_ptr;			/* Copy argument. */
	com_err_sw  = arg_com_err_sw;

	error_code = 0;

	attach_description = "tape_mult_";		/* Initialize option values. */
	string(tmdb.opt.flags) = "0"b;		/* Defaults are all FALSE. */
	tmdb.opt.flags.com_err = com_err_sw;
	tmdb.opt.mount_mode = "reading";		/* Default is reading. */
	tmdb.opt.tracks = 9;			/* Default is 9 track tape drive. */
	tmdb.opt.density = 0;			/* Default depends upon track type. */
	tmdb.opt.speed = ""b;
	tmdb.opt.comment = " ";
	tmdb.opt.volume_set_id = "";			/* default is no volume set name */
	tmdb.opt.tbpp = null;			/* Use internal boot pgm by default */
	tmdb.opt.blp = null;			/* set boot label ptr to null, initially */

	num_options = hbound (arg_options, 1);		/* Get number of options. */
	if num_options < 1				/* There must be at least a reel name. */
	then do;					/* No options. */
	     error_code = error_table_$noarg;
	     goto RETURN;
	end;

	option = arg_options (1);			/* Copy reel name argument. */
	if (length (option) < 1) | /* Is it a valid reel name length? */ (length (option) > 32) then do;
						/* No, reject option. */
	     error_code = error_table_$bad_arg;
	     goto RETURN;
	end;

	if (get_group_id_ () = "Initializer.SysDaemon.z") & (get_ring_ () = 1) then do;
	     call canon_for_volume_label_ (VOLUME_TYPE (TAPE_VOL_VTYPEX), (option), tmdb.opt.reel_name,
		Volume_multics_tape, error_code);
	     if error_code ^= 0 then
		goto RETURN;
	end;
	else tmdb.opt.reel_name = option;

	attach_description = attach_description || " " || option;

	do optx = 2 to num_options;			/* Now look for all other options. */
	     option = arg_options (optx);		/* Copy next option string */
	     if length (option) < 5			/* Look for long or short key? */
	     then do;				/* Look through list of short keys. */
		do keyx = 1 to hbound (short_keys, 1);
		     if short_keys (keyx) = option then
			goto FOUND_OPTION_KEY;
		end;
	     end;
	     else do;				/* Look through list of long keys. */
		do keyx = 1 to hbound (long_keys, 1);
		     if long_keys (keyx) = option then
			goto FOUND_OPTION_KEY;
		end;
	     end;
	     error_code = error_table_$bad_arg;		/* No key matched. */
	     if tmdb.opt.flags.com_err then
		call com_err_ (0, "tape_mult_", "Unknown attach option ^a", option);
	     goto RETURN;

FOUND_OPTION_KEY:					/* We found the key that matched. */
	     call PROCESS_OPTION;			/* Now go process this option. */
	     if error_code ^= 0			/* Check for option errors. */
	     then goto RETURN;
	end;					/* All options OK, return attach description. */
	tmdb.attach.length = length (attach_description);
	tmdb.attach.description = attach_description;

	if tmdb.opt.tracks = 9 then			/* Is this a 9 track tape? */
	     if tmdb.opt.density = 0 then		/* Yes, default density is 1600 bpi */
		tmdb.opt.density = 1600;
	     else ;
	else if tmdb.opt.density = 0 then		/* No, 7 track. Was density specified? */
	     tmdb.opt.density = 800;			/* No, set 7 track default density to 800 bpi */
	else if tmdb.opt.density ^= 800 then		/* if density was specified, it must be 800 bpi */
	     error_code = error_table_$inconsistent;

RETURN:
	arg_error_code = error_code;
	return;

PROCESS_OPTION:
     procedure;

/*	This procedure is called to process the current option.  We
   *	know its option key index.  We will use this to goto a routine
   *	that knows how to process this option.  We will add this option
   *	string to the attach description.  If this option has an accompanying
   *	value then we will add the value string to the attach description.
   *	We will skip over this value argument in the option array.
*/
	attach_description = attach_description || " " || option;

	if value_flags (keyx)			/* Does this option have a value? */
	then do;					/* Yes, process value string. */
	     optx = optx + 1;			/* Skip to value argument in array. */
	     if optx > num_options			/* Make sure a value argument was given. */
	     then goto UNBALANCED_OPTION;
	     value = arg_options (optx);		/* Pick up value string. */
	     attach_description = attach_description || " " || value;
	end;

	goto OPTION (keyx);				/* GOTO based on key index. */

OPTION (1):					/* "-wrt" or "-write" */
	tmdb.opt.flags.ring, tmdb.opt.flags.write_sw = "1"b;
						/* Turn ON write ring flag and switch. */

	tmdb.opt.mount_mode = "writing";		/* Set mount mode field. */
	return;

OPTION (2):					/* "-den" or "-density" */
	if value = "1600"				/* Is it a legal density value? */
	then do;					/* Yes, 1600 BPI is legal. */
	     tmdb.opt.density = 1600;
	     return;
	end;
	if value = "800"				/* 800 BPI is legal too. */
	then do;
	     tmdb.opt.density = 800;
	     return;
	end;
	if value = "6250" then do;			/* 6250 bpi is legal too. */
	     tmdb.opt.density = 6250;
	     return;
	end;
	goto ILLEGAL_VALUE;				/* Illegal density option value. */

OPTION (3):					/* "-tk" or "-track" */
	if value = "9"				/* 9 track is valid. */
	then do;
	     tmdb.opt.tracks = 9;
	     return;
	end;
	if value = "7"				/* 7 track is valid. */
	then do;
	     tmdb.opt.tracks = 7;
	     return;
	end;
	goto ILLEGAL_VALUE;

OPTION (4):					/* "-com" or "-comment" */
	optx = optx + 1;				/* Value_flag for comment key is OFF. */
	if optx > num_options			/* Check for comment value. */
	then goto UNBALANCED_OPTION;
	tmdb.opt.comment = arg_options (optx);		/* Copy comment arg.  Not put in att desc. */
	return;

OPTION (5):					/* "-sys" or "-system" */
	tmdb.opt.flags.system = "1"b;
	return;

OPTION (6):
	tmdb.opt.volume_set_id = value;		/* "-vsn" or "-volume_set_name" */
	return;

OPTION (7):
	tmdb.opt.flags.err_tal = "1"b;		/* "-et" or "-error_tally" */
	return;

OPTION (8):					/* "-ips" or "-speed" */
	begin;
dcl      COMMA		  char (1) init (",") static options (constant);
dcl      current_value	  char (32) varying;
dcl      current_idx	  fixed bin;		/* how far we've gotten into value */

	     current_idx = 1;			/* start from the beginning of the string */
	     current_value = get_next_value ();
	     if current_value = "" then
		goto ILLEGAL_VALUE;			/* insist on at least one */
	     do while (current_value ^= "");
		if current_value = "75" then
		     tmdb.opt.speed = tmdb.opt.speed | "100"b;
		else if current_value = "125" then
		     tmdb.opt.speed = tmdb.opt.speed | "010"b;
		else if current_value = "200" then
		     tmdb.opt.speed = tmdb.opt.speed | "001"b;
		else goto ILLEGAL_VALUE;
		current_value = get_next_value ();
	     end;					/* do while ... */
	     return;

get_next_value:
     proc returns (char (32) varying);

dcl      next_value		  char (32) varying;

	if current_idx = -1 then
	     return ("");
	if index (substr (value, current_idx), COMMA) = 0 then do;
	     next_value = substr (value, current_idx);
	     current_idx = -1;			/* so next call will stop */
	     return (next_value);
	end;
	else do;
	     next_value = substr (value, current_idx, index (substr (value, current_idx), COMMA) - 1);
	     current_idx = current_idx + length (next_value) + 1;
	     return (next_value);
	end;

     end get_next_value;

	end;					/* the begin */

ILLEGAL_VALUE:					/* We don't know this value. */
	if substr (value, 1, 1) = "-"			/* Does this look like a key name? */
	then goto UNBALANCED_OPTION;			/* Yes, illegal because unbalanced. */
	error_code = error_table_$bad_arg;
	if tmdb.opt.flags.com_err then
	     call com_err_ (0, "tape_mult_", "Attachment option ^a is unknown.", option);
	return;

UNBALANCED_OPTION:
	error_code = error_table_$wrong_no_of_args;
	if tmdb.opt.flags.com_err then
	     call com_err_ (0, "tape_mult_", "Expected value with option ^a is missing.", option);

     end PROCESS_OPTION;


     end tape_mult_parse_;
