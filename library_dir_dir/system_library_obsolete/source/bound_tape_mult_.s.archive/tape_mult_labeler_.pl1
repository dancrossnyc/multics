/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4,delnl,insnl,indattr,ifthen,declareind10,dclind10 */
tape_mult_labeler_:
     procedure;

/*	This program is part of the Multics standard tape I/O module, tape_mult_.
   *
   *	Created on 10/26/74 by Bill Silver.
   *	Modified 3/80 by R.J.C. Kissel to fix a label writing bug.
   *	Modified 1/2/81 by J. A. Bush for bootable tape labels
   *	Modified 8/13/81 by J. A. Bush for pre-MR9.0 label compatibility
   *      Modified 8/82 by S. Krupp to change from tdcm_ to tape_ioi_ interface.
   *	Modified 12/14/82 by J. A. Bush to add header label version
   *      Modified 1985-05-14, BIM: reset record length to full after writing
   *	         label.
   *      Modified 1985-05-17, BIM: don't do an FSF command since its results
   *	         can be unpredictable.
   *
   *	This program is called to write or read the label of a Multics standard tape.
*/

/*		ARGUMENTS			*/

dcl	arg_error_code	   fixed bin (35),		/* (O) Standard system error code. */
	arg_tmdbp		   ptr,			/* (I) Pointer to tseg set up by tape_. */
	arg_volid		   char (*);		/* (I/O) Tape reel ID. */


/*		AUTOMATIC  DATA		*/

dcl	act_length	   fixed bin (21),		/* Actual length of buffer allocated. */
	act_number	   fixed bin,		/* Actual number of buffers allocated. */
	dummy_arrayp	   ptr,			/* Designates array of pointers to newly alocated I/O buffers. */
	error_code	   fixed bin (35),		/* Standard system error code. */
	n_bufs		   fixed bin,		/* Number of buffers currently being allocated. */
	record_data_len	   fixed bin,		/* Number of chars in data portion of label record. */
	record_data_size	   fixed bin,		/* Number of words in data portion of label record. */
	record_size	   fixed bin (21),		/* Number of words in the physical label record. */
	tioi_id		   bit (36) aligned,	/* Id for this tape_ioi_ activation. */
	tl_ptr		   ptr;			/* Pointer to our tape label data. */

/*                  BASED                         */

dcl	dummy_array	   (n_bufs) ptr based (dummy_arrayp);

/*		EXTERNAL  ENTRIES		*/

dcl	(addr, divide, hbound, null, size, string)
			   builtin;

dcl	(error_table_$bad_label)
			   external fixed bin (35);



dcl	tape_mult_read_$label  entry (ptr, ptr, fixed bin, fixed bin (35)),
	tape_mult_write_$eof   entry (ptr, fixed bin (35)),
	tape_mult_write_$label entry (ptr, fixed bin (35));
%page;
%include tape_ioi_dcls;
%page;
%include tmdb;
%page;
%include mstr;
%page;
%include iox_modes;
%page;
write:
     entry (arg_tmdbp, arg_error_code);

/*	This entry is called to write the label record of a Multics standard tape.  It
   *	must also write an EOF record after the label record.  tape_mult_ will only
   *	write records of size 1024 words.
*/

	tmdb_ptr = arg_tmdbp;
	tioi_id = tmdb.work.tioi_id;
	error_code = 0;

	record_data_size = 1024 -			/* must subtract length of transfer vector */
	     (hbound (arg_tmdbp -> mst_label.xfer_vector, 1) * 2);
	record_size =
	     record_data_size + size (mstr_header) + size (mstr_trailer)
	     + (hbound (arg_tmdbp -> mst_label.xfer_vector, 1) * 2);

	call INIT_TMDB;				/* Set up data in the TMDB. */
	if error_code ^= 0 then
	     goto WRITE_RETURN;

	tmdb.head.flags.admin, tmdb.head.flags.label = "1"b;
						/* Turn ON label flags. */
	call tape_mult_write_$label (tmdb_ptr, error_code);
	if error_code ^= 0 then
	     go to WRITE_RETURN;

	string (tmdb.head.flags) = "0"b;		/* Turn OFF all flags. */
	call tape_mult_write_$eof (tmdb_ptr, error_code);
	if error_code ^= 0 then
	     go to WRITE_RETURN;

	record_data_size = 1024;			/* Now that we have the bootable label written, reset to full length */
	record_size = record_data_size + size (mstr_header) + size (mstr_trailer);
	tmdb.work.rec_length = record_data_size * 4;
	tmdb.head.data_bit_len = record_data_size * 36;

	call COMPLETE_TMDB;				/* Label records written OK. */

WRITE_RETURN:					/* Common exit from this entry. */
	arg_error_code = error_code;
	return;
%page;
read:
     entry (arg_tmdbp, arg_volid, arg_error_code);

/*	This entry is called to read a label record and an End of File record from the
   *	beginning of a Multics standard tape.
*/

	tmdb_ptr = arg_tmdbp;
	tioi_id = tmdb.work.tioi_id;

	record_data_size = 1024;			/* Initially assume that this tape has large records. */
	record_size = record_data_size + size (mstr_header) + size (mstr_trailer);

	call INIT_TMDB;				/* Set up an TMDB. */
	if error_code ^= 0 then
	     goto READ_RETURN;

	tmdb.work.label_version = 1;			/* set to old type label initially */
	tmdb.work.output_mode = Stream_output;		/* default output mode is stream_output */
	tl_ptr = addr (tmdb.buffer);			/* Read label data into this buffer. */

	call tape_mult_read_$label (tmdb_ptr, tl_ptr, record_data_len, error_code);
						/* Read the label. */
	if error_code ^= 0 then
	     go to READ_RETURN;

/*	We have successfully read the first record of the tape.
   *	On some tapes, on some tape drives, FSF commands miss file marks
   *	that reads find. So instead of sending in an FSF here to
   *	skip the file mark, we leave the tape just after the label,
   *	and trust that tape_mult_read_ will cheerfully skip the 
   *	file mark (if the drive picks it up.)
   *	Now, we must see how many words are in this record.  The rest of the records on
   *	this tape should be the same size.  We must also check to see that this record is a
   *	valid Multics standard tape label record.
*/
	record_data_size = divide (tmdb.head.data_bit_len, 36, 17, 0);
	if (record_data_size ^= 1024) & (record_data_size ^= 256) then
	     goto BAD_LABEL;

	if ^tmdb.head.flags.admin |			/* Check that label flags are correct. */
	     ^tmdb.head.flags.label then
	     goto BAD_LABEL;			/* Both MUST be ON. */
	if tmdb.work.label_version > 2 then do;		/* if a bootable label.. */
	     tmdb.opt.blp = tl_ptr;			/* save ptr to full label for control */
	     tl_ptr = addr (tl_ptr -> mst_label.installation_id);
						/* adjust ptr to volume info */
	end;

	if tmdb.work.label_version > 1 then		/* if a new style  label */
	     if tmdb.opt.volume_set_id ^= "" then	/* and if a volume set was specified in att. desc. */
		if tl_ptr -> volume_identifier.volume_set_id ^= "" then
						/*  and if tape label has something besides blanks */
		     if tl_ptr -> volume_identifier.volume_set_id ^= tmdb.opt.volume_set_id then
						/* they must be equal */
			go to BAD_LABEL;

	string (tmdb.work.flags),			/* Zero work.flags. */
	     string (tmdb.head.flags) = "0"b;
	tmdb.opt.flags.begin = "1"b;			/* Tell tape_read_ that this is the beginning. */
	tmdb.work.label_uid = tmdb.head.uid;
	tmdb.work.rec_length = record_data_size * 4;	/* Set real data length. */

	call COMPLETE_TMDB;				/* Return a good TMDB to tape_. */
	if error_code ^= 0 then
	     go to READ_RETURN;

	arg_volid = tl_ptr -> volume_identifier.tape_reel_id;
						/* give caller right info. */
	goto READ_RETURN;


BAD_LABEL:
	error_code = error_table_$bad_label;

READ_RETURN:					/* Common exit from this entry. */
	arg_error_code = error_code;
	return;
%page;
INIT_TMDB:
     procedure;

/*	This internal procedure is called by both the write and read entries.
   *      Its job is to initialize the TMDB and set up a buffer for the
   *      label I/O.
*/

	tmdb.head.c1 = header_c1;			/* 670314355245 */
	tmdb.head.rec_within_file = -1;		/* Incremented before record is written. */
	tmdb.head.phy_file = 0;
	tmdb.head.data_bit_len = record_data_size * 36;
	string (tmdb.head.flags) = "0"b;
	tmdb.head.header_version = HEADER_VERSION;	/* set version number of record header */
	tmdb.head.c2 = header_c2;			/* 512556146073 */

	tmdb.trail.c1 = trailer_c1;			/* 107463422532 */
	tmdb.trail.tot_data_bits = 0;
	tmdb.trail.pad_pattern = "777777777777"b3;
	tmdb.trail.reel_num, tmdb.trail.tot_file = 0;
	tmdb.trail.tot_rec = -1;			/* Incremented before record is written. */
	tmdb.trail.c2 = trailer_c2;			/* 265221631704 */

	string (tmdb.work.flags) = "0"b;

	tmdb.work.buf_pos = 0;			/* Start with no data. */
	tmdb.work.rec_length = record_data_size * 4;
	tmdb.work.next_buf = null;			/* Only one now. */
	tmdb.work.buf_len = record_size * 4;
	tmdb.work.n_full = 0;
	tmdb.work.n_recs_to_eof = 0;
	tmdb.work.buffer (*) = null;

	if tmdb.work.n_bufs ^= 0			/* Make sure we only have one buffer for synchronous I/O */
	then do;
	     call tape_ioi_$deallocate_buffers (tioi_id, error_code);
	     if error_code ^= 0 then
		return;
	end;

	tmdb.work.n_bufs = 1;
	tmdb.work.bufs_per_subset = 1;

	n_bufs = 1;
	dummy_arrayp = addr (tmdb.work.buffer (1));

	call tape_ioi_$allocate_buffers (tioi_id, tmdb.work.buf_len, n_bufs, act_length, act_number, dummy_array,
	     error_code);				/* Allocate only 1 buffer now - rest later. */
						/* This is for synchronous I/O of label. */
	if error_code ^= 0 then
	     return;

	tmdb.work.curr_buf = dummy_array (1);		/* Buffer for label I/O. */

	return;

     end INIT_TMDB;
%page;
COMPLETE_TMDB:
     procedure;

/*	This internal procedure is called when we have successfully processed the tape label.
   *	Its job is to set up all the buffers that we will be using to process this tape.
   *      Previously, only one buffer was set up because we only wanted 1 record (the label record)
   *      and wanted to read/write it synchronously.  Tapes with the "-system" option specified
   *      get more buffers than ones without because RCP allows a greater maximum workspace
   *      size for system processes.
*/

	if tmdb.opt.system				/* System procs get more buffers. */
	then do;
	     tmdb.work.n_bufs = 16;
	     tmdb.work.bufs_per_subset = 8;
	end;
	else do;
	     tmdb.work.n_bufs = 4;
	     tmdb.work.bufs_per_subset = 2;
	end;

	n_bufs = tmdb.work.bufs_per_subset - 1;
	dummy_arrayp = addr (tmdb.work.buffer (2));
	call tape_ioi_$allocate_buffers (tioi_id, tmdb.work.buf_len, tmdb.work.n_bufs - 1, act_length, act_number,
	     dummy_array, error_code);

     end COMPLETE_TMDB;


     end tape_mult_labeler_;
