/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

/* Written by Chris Jones */
/* Modified July 1983 by Chris Jones to zero "recovery_succeeded" array on a reset_statistics call,
   and to accept a null error count pointer on a deactivate call. */

/* format: style4,delnl,insnl,indattr,ifthen,declareind10,dclind10 */
tape_ioi_activate:
activate:
     proc (p_rsc_ptr, p_tioi_info_ptr, p_tioi_id, p_code);

dcl	p_code		   fixed bin (35) parameter;	/* (O) system status code */
dcl	p_error_ptr	   ptr parameter;		/* (I) pointer to structure for error counts */
dcl	p_rsc_ptr		   ptr parameter;		/* (I) pointer to resource information */
dcl	p_tioi_id		   bit (36) aligned parameter;/* (O) tape_ioi_ assigned index */
dcl	p_tioi_info_ptr	   ptr parameter;		/* (I) pointer to the tape_ioi_info structure */

/*
   DESCRIPTION

   This procedure sets up and initializes the ioi workspace which is
   used by the rest of the tape_ioi_ procedures for internal communication
   and interfacing with ioi_.  It also builds the order command buffer and
   the first entry in the status queue.
   The assumption is made that the tai structure starts at offset
   zero in the workspace.  Other notes and restrictions are given in the
   tape_ioi_workspace include file, and in comments throughout the procedure.
*/
/*	JOURNALIZATION	*/
/*	Written April to May 1982 by Chris Jones from version of 8/78 by R.J.C. Kissel */

/* Automatic Variables */

dcl	code		   fixed bin (35);		/* error code */
dcl	device_number	   bit (6);
dcl	ioi_index		   fixed bin (17);
dcl	stq_length	   fixed bin (8);		/* Units of status queue entries. */
dcl	stq_offset	   fixed bin (18);		/* status queue offset in workspace (in words) */
dcl	wks_length	   fixed bin (19);		/* current length of workspace */


dcl	1 tape_ioi_id	   unal like tai.tioi_id;	/* Built for this activation. */

/* Static Variables */

dcl	next_tioi_actid	   fixed bin (18) unsigned unaligned internal static init (1);
						/* Incremented for each activation in this process. */

/* External Entries */

dcl	ioi_$set_event	   entry (fixed bin, fixed bin (71), fixed bin (35));
dcl	ioi_$set_status	   entry (fixed bin, fixed bin (18), fixed bin (8), fixed bin (35));
dcl	ioi_$timeout	   entry (fixed bin, fixed bin (71), fixed bin (35));
dcl	ioi_$workspace	   entry (fixed bin, ptr, fixed bin (19), fixed bin (35));
dcl	tape_ioi_utils$get_workspace_ptr
			   entry (bit (36) aligned, ptr);
dcl	tape_ioi_utils$io_in_progress
			   entry (ptr) returns (bit (1) aligned);

dcl	error_table_$bad_arg   fixed bin (35) ext static;
dcl	error_table_$device_active
			   fixed bin (35) ext static;
dcl	error_table_$unimplemented_version
			   fixed bin (35) ext static;

/* Builtin Functions and Conditions */

dcl	(addr, after, baseno, bin, bit, mod, null, ptr, rel, size, unspec)
			   builtin;

/*	Copy the input parameters. */

	p_tioi_id = ""b;				/* just for starters */
	tioi_info_ptr = p_tioi_info_ptr;
	if tioi_info.version ^= tioi_info_version then
	     call quit (error_table_$unimplemented_version);

	ioi_index = tioi_info.ioi_index;
	tape_info_ptr = p_rsc_ptr;

/*	Initialize various lengths, offsets, and other values. */

	wksp = null;

	wks_length = size (tai) + size (istat);		/* (General info + order buffer) + one status entry. */

	stq_offset = size (tai) + mod (size (tai), 2);	/* Status queue starts right after tai. */
	stq_length = 1;				/* Units of status queue entries. */

	device_number = bit (bin (after (tape_info.device_name, "_"), 6), 6);

/*	Set things up with ioi_. */

	call ioi_$workspace (ioi_index, wksp, wks_length, code);
	call quit_if_error;
	call ioi_$set_status (ioi_index, stq_offset, stq_length, code);
						/* This _m_u_s_t follow the call to ioi_$workspace. */
	call quit_if_error;
	call ioi_$set_event (ioi_index, tioi_info.event_id, code);
	call quit_if_error;
	call ioi_$timeout (ioi_index, tioi_info.timeout_max, code);
	call quit_if_error;

/*	Build the identifier for this tape_ioi_ activation. */

	tape_ioi_id.segno = baseno (wksp);
	tape_ioi_id.actid = next_tioi_actid;
	next_tioi_actid = next_tioi_actid + 1;		/* Increment for the next activation. */

/*	Initialize the general information in the workspace maintained by tape_ioi_. */

	tai.ioi_index = ioi_index;
	tai.tioi_id = tape_ioi_id;
	tai.event_id = tioi_info.event_id;
	tai.cur_timeout, tai.max_timeout = tioi_info.timeout_max;
	tai.workspace_max = tioi_info.workspace_max - 1;
	tai.workspace_len = wks_length - 1;
	tai.buffer_list_offset = 0;
	tai.free_list_offset = 0;
	tai.queue_list_offset = 0;
	tai.susp_list_offset = 0;
	tai.buffer_count = 0;
	tai.status_entry_count = stq_length;
	tai.status_queue_offset = stq_offset;
	tai.status_entry_idx = 0;
	tai.workarea_len = 0;
	tai.workarea_offset = 0;

/*	Initialize the mode settings for tape_ioi_. */

	tai.modes.data_code = "05"b3;			/* See the encoding in tape_ioi_workspace.incl.pl1 */
	tai.modes.cif_code = "20"b3;			/* See the encoding in tape_ioi_workspace.incl.pl1 */
	tai.modes.align = (tape_info.model = 500);	/* right alignment for model 500 tape drives only */
	tai.modes.length = "0"b;			/* normal length processing */
	tai.modes.recovery = "1"b;			/* we'll do the recovery by default */
	tai.modes.wait = "1"b;			/* we'll do the blocking by default */
	tai.modes.req_len = "1"b;			/* default is to always know the length of a record */

/*	Initialize the flags for tape_ioi_ operation. */

	string (tai.flags) = ""b;

	tai.pad1, tai.pad2 = ""b;

/*	Initialize counts of operations and errors */

	tai.total_reads, tai.total_writes, tai.total_orders = 0;
	tai.read_errors, tai.write_errors, tai.order_errors = 0;
	tai.times_tape_stopped, tai.times_status_lost, tai.extra_statuses = 0;
	tai.recovery_succeeded (*) = 0;
	tai.retry_count = 0;

/*	Initialize the order buffer IDCW. */

	idcwp = addr (tai.order_idcw);
	idcw.command = "0"b;			/* Set later with the actual order. */
	idcw.device = device_number;			/* Set the device number. */
	idcw.ext = "0"b;				/* Address extension. */
	idcw.code = "111"b;				/* Must be set to this. */
	idcw.ext_ctl = "0"b;			/* Do not reset address extension. */
	idcw.control = "00"b;			/* A list of orders is not allowed. */
	idcw.chan_cmd = "02"b3;			/* Non-data transfer command. */
	idcw.count = "0"b;				/* Set later with the actual count. */

/*	Initialize the order buffer DCW, this is only used by a few order commands
   that return data.  In setting up the data address we use the fact that the
   tai structure starts at a zero offset in the workspace to eliminate a subtraction. */

	dcwp = addr (tai.order_dcw);
	dcw.address = rel (addr (tai.order_data));
	dcw.char_pos = "0"b;			/* Start at the zeroth character. */
	dcw.m64 = "1"b;				/* Character tally. */
	dcw.type = "00"b;				/* Transmit and disconnect. */
	dcw.tally = "0"b;				/* Set later with the actual tally. */

/*	Clear the order data buffer. */

	tai.order_data (*) = "0"b;

/*	Clear the status queue. */

	isp = ptr (wksp, stq_offset);
	unspec (isp -> istat) = "0"b;

/*	Everything is done.  Set the output parameters and return. */

	p_tioi_id = unspec (tape_ioi_id);		/* Copy the structure into a 36 bit word. */
	p_code = 0;				/* No errors. */
	return;

/* entry to deactivate tioi_ */
deactivate:
     entry (p_tioi_id, p_error_ptr, p_code);

	if p_error_ptr ^= null () then
	     call get_statistics_proc;
	if tape_ioi_utils$io_in_progress (wksp) then
	     call quit (error_table_$device_active);

/* Shrink the workspace and invalidate the ioi_index in it */

	ioi_index = tai.ioi_index;
	call ioi_$set_status (ioi_index, 0, 1, (0));
	call ioi_$workspace (ioi_index, wksp, size (istat), (0));
	tai.ioi_index = 0;
	unspec (tai.tioi_id) = ""b;
	p_code = 0;
	return;

/* entry to get the statistics without deactivating tape_ioi_ */
get_statistics:
     entry (p_tioi_id, p_error_ptr, p_code);

	call get_statistics_proc;
	return;

/* entry to reset the statistics */

reset_statistics:
     entry (p_tioi_id, p_code);

	call setup;
	if tape_ioi_utils$io_in_progress (wksp) then
	     call quit (error_table_$device_active);
	tai.total_reads, tai.total_writes, tai.total_orders = 0;
	tai.read_errors, tai.write_errors, tai.order_errors = 0;
	tai.recovery_succeeded (*) = 0;
	return;

/* Error handling code. */

quit_if_error:
     proc;

	if code ^= 0 then
	     call quit (code);

     end quit_if_error;
quit:
     proc (code);

dcl	code		   fixed bin (35);

	p_code = code;
	goto ERROR_RETURN;

     end quit;

ERROR_RETURN:
	return;

setup:
     proc;

	call tape_ioi_utils$get_workspace_ptr (p_tioi_id, wksp);
	if wksp = null () then
	     call quit (error_table_$bad_arg);

     end setup;

get_statistics_proc:
     proc;

	call setup;
	tape_ioi_error_counts_ptr = p_error_ptr;
	if tec.version ^= TEC_VERSION then
	     call quit (error_table_$unimplemented_version);
	tec.reads.total = tai.total_reads;
	tec.reads.errors = tai.read_errors;
	tec.writes.total = tai.total_writes;
	tec.writes.errors = tai.write_errors;
	tec.orders.total = tai.total_orders;
	tec.orders.errors = tai.order_errors;
	tec.successful_retry_strategy = tai.recovery_succeeded;

     end get_statistics_proc;

%include tape_ioi_workspace;
%page;
%include tape_ioi_info;
%page;
%include ioi_stat;
%page;
%include iom_pcw;
%include iom_dcw;
%page;
%include rcp_tape_info;
%page;
%include tape_ioi_error_counts;

     end tape_ioi_activate;

