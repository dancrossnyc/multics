/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* Entry to interpret status information for last I/O operation. */
/* Written 29 June 1982 by Chris Jones. */
/* format: style4,delnl,insnl,indattr,ifthen,declareind10,dclind10 */

hardware_status:
     proc (p_tioi_id, p_ths_ptr, p_code);

/* Parameters */

dcl	p_code		   fixed bin (35) parameter;	/* (O) system status code */
dcl	p_ths_ptr		   ptr parameter;		/* (I) pointer to the ths structure */
dcl	p_tioi_id		   bit (36) aligned parameter;/* (I) tape_ioi_ activation ID */

/* Automatic storage */

dcl	1 auto_istat	   like istat;

/* Based storage */

dcl	fault_word	   bit (36) aligned based (statp);
						/* system fault word */

/* Externals */

dcl	analyze_ioi_istat_	   entry (ptr, ptr, char (*) var);
dcl	analyze_system_fault_$rsnnl
			   entry (char (*) var, bit (36) aligned);
dcl	tape_ioi_utils$get_workspace_ptr
			   entry (bit (36) aligned, ptr);
dcl	tape_ioi_utils$last_status_entry_offset
			   entry (ptr) returns (fixed bin (18) unsigned);

dcl	error_table_$bad_arg   fixed bin (35) ext static;
dcl	error_table_$unimplemented_version
			   fixed bin (35) ext static;

dcl	tape_status_table_$tape_status_table_
			   external;

/* Conditions */

dcl	any_other		   condition;

/* Builtins */

dcl	(addr, bin, null, ptr) builtin;

	call tape_ioi_utils$get_workspace_ptr (p_tioi_id, wksp);
	if wksp = null () then do;
	     p_code = error_table_$bad_arg;
	     return;
	end;
	ths_ptr = p_ths_ptr;
	if ths.version ^= THS_VERSION then do;
	     p_code = error_table_$unimplemented_version;
	     return;
	end;

	isp = ptr (wksp, tape_ioi_utils$last_status_entry_offset (wksp));
						/* point to the previous istat entry */
	auto_istat = istat;				/* copy it for analysis */
	auto_istat.st = "1"b;			/* turn the validity bit back on */
	statp = addr (auto_istat.iom_stat);

/* First, get the description of the status. */

	on any_other
	     begin;
		ths.description = "**** NO DESCRIPTION AVAILABLE ****";
		goto DESCRIPTION_DONE;
	     end;

	if auto_istat.level = IO_SYSTEM_FAULT_INTERRUPT_LEVEL then
	     call analyze_system_fault_$rsnnl (ths.description, fault_word);
	else call analyze_ioi_istat_ (addr (auto_istat), addr (tape_status_table_$tape_status_table_), ths.description);

/* Now, decode and reformat the status in a device independent way. */

DESCRIPTION_DONE:
	if auto_istat.time_out then
	     ths.major = TIME_OUT;
	else if auto_istat.level = IO_SYSTEM_FAULT_INTERRUPT_LEVEL then
	     ths.major = SYSTEM_FAULT;
	else if status.power then
	     ths.major = POWER_OFF;
	else if status.channel_stat then
	     ths.major = IOM_CHANNEL;
	else if status.central_stat then
	     ths.major = IOM_CENTRAL;
	else ths.major = bin (status.major);

	ths.minor = ""b;				/* initialize to no minor status */
	if ths.major = SUBSYSTEM_READY then
	     call fill_subsystem_ready_status;
	else if ths.major = DEVICE_BUSY then
	     call fill_device_busy_status;
	else if ths.major = DEVICE_ATTENTION then
	     call fill_device_attention_status;
	else if ths.major = DEVICE_DATA_ALERT then
	     call fill_device_data_alert_status;
	else if ths.major = END_OF_FILE then
	     call fill_end_of_file_status;
	else if ths.major = COMMAND_REJECT then
	     call fill_command_reject_status;
	else if ths.major = MPC_DEVICE_ATTENTION then
	     call fill_mpc_device_attention_status;
	else if ths.major = MPC_DEVICE_DATA_ALERT then
	     call fill_mpc_device_data_alert_status;
	else if ths.major = MPC_COMMAND_REJECT then
	     call fill_mpc_command_reject_status;
	else if ths.major = POWER_OFF then
	     call fill_power_off_status;
	else if ths.major = SYSTEM_FAULT then
	     call fill_system_fault_status;
	else if ths.major = IOM_CENTRAL then
	     call fill_iom_central_status;
	else if ths.major = IOM_CHANNEL then
	     call fill_iom_channel_status;
	else if ths.major = TIME_OUT then
	     call fill_time_out_status;

/* Lastly, pass back the IOM status and LPW */

	ths.iom = auto_istat.iom_stat;
	ths.lpw = auto_istat.lpw;
	p_code = 0;
	return;

/* Routines to fill in the various substatuses we keep track of. */

fill_subsystem_ready_status:
     proc;

	if (status.sub & "001001"b) = "000001"b then
	     ths.minor = ths.minor | WRITE_PROTECTED;
	if (status.sub & "111010"b) = "000010"b then
	     ths.minor = ths.minor | AT_BOT;
	if (status.sub & "111010"b) = "010000"b then
	     ths.minor = ths.minor | TWO_BIT_FILL;
	if (status.sub & "111010"b) = "100000"b then
	     ths.minor = ths.minor | FOUR_BIT_FILL;
	if (status.sub & "111010"b) = "110000"b then
	     ths.minor = ths.minor | SIX_BIT_FILL;
	if status.sub = "001100"b then
	     ths.minor = ths.minor | ASCII_ALERT;

     end fill_subsystem_ready_status;

fill_device_busy_status:
     proc;

	if status.sub = "000001"b then
	     ths.minor = ths.minor | REWINDING;
	if status.sub = "100000"b then
	     ths.minor = ths.minor | RESERVED;
	if status.sub = "000010"b then
	     ths.minor = ths.minor | ALTERNATE_CHANNEL;
	if status.sub = "000100"b then
	     ths.minor = ths.minor | LOADING;

     end fill_device_busy_status;

fill_device_attention_status:
     proc;

	if (status.sub & "110011"b) = "000001"b then
	     ths.minor = ths.minor | WRITE_PROTECTED;
	if status.sub = "000010"b then
	     ths.minor = ths.minor | NO_SUCH_HANDLER;
	if (status.sub & "100110"b) = "000100"b then
	     ths.minor = ths.minor | HANDLER_IN_STANDBY;
	if (status.sub & "101010"b) = "001000"b then
	     ths.minor = ths.minor | HANDLER_CHECK;
	if (status.sub & "110011"b) = "010000"b then
	     ths.minor = ths.minor | BLANK_TAPE_ON_WRITE;

     end fill_device_attention_status;

fill_device_data_alert_status:
     proc;

	if status.sub = "000001"b then
	     ths.minor = ths.minor | TRANSFER_TIMING_ALERT;
	if status.sub = "000010"b then
	     ths.minor = ths.minor | BLANK_TAPE_ON_READ;
	if (status.sub & "000011"b) = "000011"b then
	     ths.minor = ths.minor | BIT_DURING_ERASE;
	if status.sub & "000100"b then
	     ths.minor = ths.minor | TRANSMISSION_PARITY_ALERT;
	if status.sub & "001000"b then
	     ths.minor = ths.minor | LATERAL_PARITY_ALERT;
	if status.sub & "010000"b then
	     ths.minor = ths.minor | LONGITUDINAL_PARITY_ALERT;
	if status.sub & "100000"b then
	     ths.minor = ths.minor | END_OF_TAPE;

     end fill_device_data_alert_status;

fill_end_of_file_status:
     proc;

	if status.sub = "111111"b then
	     ths.minor = ths.minor | DATA_ALERT_CONDITION;

     end fill_end_of_file_status;

fill_command_reject_status:
     proc;

	if status.sub = "010000"b then
	     ths.minor = ths.minor | READ_AFTER_WRITE;
	if status.sub = "001000"b then
	     ths.minor = ths.minor | AT_BOT;
	if (status.sub & "111100"b) = "000100"b then
	     ths.minor = ths.minor | BAD_IDCW_PARITY;
	if (status.sub & "111010"b) = "000010"b then
	     ths.minor = ths.minor | BAD_DEVICE_CODE;
	if (status.sub & "111001"b) = "000001"b then
	     ths.minor = ths.minor | BAD_OP_CODE;
	if status.sub = "000000"b then
	     ths.minor = ths.minor | BAD_DENSITY;
	if status.sub = "100000"b then
	     ths.minor = ths.minor | NINE_TRACK_ERROR;

     end fill_command_reject_status;

fill_mpc_device_attention_status:
     proc;

	if status.sub = "000001"b then
	     ths.minor = ths.minor | CONFIG_SWITCH_ERROR;
	if status.sub = "000010"b then
	     ths.minor = ths.minor | MULTIPLE_DEVICES;
	if status.sub = "000011"b then
	     ths.minor = ths.minor | ILLEGAL_DEVICE_ID;
	if status.sub = "001000"b then
	     ths.minor = ths.minor | INCOMPATIBLE_MODE;
	if (status.sub & "111100"b) = "001100"b then
	     ths.minor = ths.minor | TCA_MALFUNCTION;
	if status.sub = "010000"b then
	     ths.minor = ths.minor | MTH_MALFUNCTION;
	if status.sub = "010001"b then
	     ths.minor = ths.minor | MULTIPLE_BOT;

     end fill_mpc_device_attention_status;

fill_mpc_device_data_alert_status:
     proc;

	if status.sub = "000001"b then
	     ths.minor = ths.minor | TRANSMISSION_PARITY_ALERT;
	if status.sub = "000010"b then
	     ths.minor = ths.minor | INCONSISTENT_COMMAND;
	if status.sub = "000011"b then
	     ths.minor = ths.minor | SUM_CHECK_ERROR;
	if status.sub = "000100"b then
	     ths.minor = ths.minor | BYTE_LOCKED_OUT;
	if status.sub = "001000"b then
	     ths.minor = ths.minor | ID_BURST_WRITE_ERROR;
	if status.sub = "001001"b then
	     ths.minor = ths.minor | PREAMBLE_ERROR;
	if status.sub = "100000"b then
	     ths.minor = ths.minor | MARGINAL_CONDITION;
	if status.sub = "010000"b then
	     ths.minor = ths.minor | MULTI_TRACK_ERROR;
	if status.sub = "010001"b then
	     ths.minor = ths.minor | SKEW_ERROR;
	if status.sub = "010010"b then
	     ths.minor = ths.minor | POSTAMBLE_ERROR;
	if status.sub = "010011"b then
	     ths.minor = ths.minor | NRZI_CCC_ERROR;
	if status.sub = "010100"b then
	     ths.minor = ths.minor | CODE_ALERT;

     end fill_mpc_device_data_alert_status;

fill_mpc_command_reject_status:
     proc;

	if status.sub = "000001"b then
	     ths.minor = ths.minor | ILLEGAL_PROCEDURE;
	if status.sub = "000010"b then
	     ths.minor = ths.minor | ILLEGAL_LC_NUMBER;
	if status.sub = "000011"b then
	     ths.minor = ths.minor | ILLEGAL_SUSPENDED_LC_NUMBER;
	if status.sub = "000100"b then
	     ths.minor = ths.minor | CONTINUE_BIT_NOT_SET;

     end fill_mpc_command_reject_status;

fill_iom_central_status:
     proc;

dcl	iom_central_statuses   (7) bit (36) aligned
			   init (LPW_TRO, CONSECUTIVE_TDCWS, BOUNDARY_ERROR, EXT_CHANGE_WHILE_RESTRICTED,
			   IDCW_WHILE_RESTRICTED, CP_SIZE_DISCREPANCY, BUS_PARITY_FROM_CHANNEL);

	ths.minor = ths.minor | iom_central_statuses (bin (status.central_stat));

     end fill_iom_central_status;

fill_iom_channel_status:
     proc;

dcl	iom_channel_statuses   (7) bit (36) aligned
			   init (CONNECT_WHILE_BUSY, BAD_PCW_CHANNEL_INST, INCORRECT_DCW,
			   INCOMPLETE_COMMAND_SEQUENCE, ""b, PARITY_ERROR_AT_PRPH_INTERFACE, BUS_PARITY_TO_CHANNEL);

	ths.minor = ths.minor | iom_channel_statuses (bin (status.channel_stat));

     end fill_iom_channel_status;

/* The following statuses don't have any minor statuses associated with them. */

fill_power_off_status:
fill_system_fault_status:
fill_time_out_status:
     proc;

     end fill_power_off_status;

%include tape_ioi_workspace;
%page;
%include tape_ioi_hw_status;
%page;
%include interrupt_levels;
%page;
%include ioi_stat;
%page;
%include iom_stat;

     end hardware_status;
