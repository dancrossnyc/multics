/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



/* Printer initialization routine:  initializes a newly-attached printer; it also is used to reset the printer's line and
   page counters and printer modes when required by the I/O daemon */

/* Created: 21 October 1974 by Noel I. Morris */
/* Modified: 10 March 1977 by Noel I. Morris */
/* Modified: 12 September 1980 by G. Palter to reset pci.flags (new member of structure) */
/* Modified: 26 November 1981 as part of the fix to entry 0035 (phx11995) from the io_daemon error list:
      If a print file contains the sequence "ESC c" which is the start of the skip to logical channel printer escape
      sequence, the I/O daemon will scan without printing all subsequent print data looking for the ETX character which
      terminates the sequence even though non-numeric characters are encountered before the ETX.  (This sequence consists
      of "ESC c" followed by a number from 1 to 16 followed by the ETX).  The daemon continues looking for the ETX across
      requests causing an unknown amount of printed output to be lost */


init_printer_:
     procedure (pip, pcip, iop, rcode);

dcl  iop entry (bit (36) aligned, bit (2) aligned, ptr, fixed bin (12), bit (1) aligned),
						/* procedure to do I/O */
     rcode fixed bin (35);				/* error code */
						/* 1 => bad configuration data */
						/* 2 => unable to read detailed status */
						/* 3 => unable to load train image */
						/* 4 => unable to load VFC image */
						/* 5 => printer does not need train or VFC image */

dcl  i fixed bin,					/* iteration index */
     reset_idcw bit (36) aligned,			/* to build a reset status idcw */
     errsw bit (1) aligned;				/* I/O procedure error indicator */

dcl  printer_images_$n_images fixed bin ext,
     printer_images_$image_numbers (10) fixed bin ext,
     printer_images_$image_base ext,
     printer_images_$image_offsets (10) fixed bin (18) ext,
     printer_images_$image_lengths (10) fixed bin (12) ext,
     pr2_conv_$pr2_conv_ ext,
     pr3_conv_$pr3_conv_ ext;

dcl (addr, addrel, bin, bit, null, size, string) builtin;




% include prt_info;

% include printer_types;




% include prt_conv_info;




% include iom_pcw;




	rcode = 0;				/* Clear error code. */

	do i = 1 to nmodels;			/* Search for model number. */
	     if prt_info.model = models (i) then go to model_found;
	end;

	rcode = 1;				/* Unable to find legitimate model number. */
	return;


model_found:
	prt_info.type = types (i);			/* Extract printer type. */
	if prt_info.line_length = -1 then		/* If line size not supplied ... */
	     prt_info.line_length = default_line_length;	/* Use default line length. */

	if pcip ^= null () then			/* If conversion info structure provided ... */
	     if prt_info.type = 1 then		/* If BCD type printer ... */
		pci.cv_proc = addr (pr2_conv_$pr2_conv_); /* Set conversion procedure. */
	     else					/* If ASCII type printer ... */
	     pci.cv_proc = addr (pr3_conv_$pr3_conv_);


	prt_info.print_idcw = make_idcw (WRITE (prt_info.type));
						/* Initialize IDCW to print line. */

	prt_info.term_idcw = make_idcw ("100000"b);	/* Initialize IDCW to stop printer. */
	idcwp = addr (prt_info.term_idcw);		/* Get pointer to IDCW. */
	idcw.chan_cmd = "000010"b;			/* Make it non-data transfer operation. */
	idcw.count = bit (bin (1, 6));

	if pcip ^= null () then do;			/* If conversion structure provided ... */
	     pci.phys_line_length = prt_info.line_length; /* Set physical line limitation. */
	     pci.phys_page_length = default_page_length + 6; /* Set length of physical page. */
	     pci.lpi = default_lpi;			/* Set number of lines per inch. */

	     call reset (pcip);			/* Reset line counters and modes. */

	     pci.level = 0;				/* Reset conversion info just once. */
	     pci.pos = 0;
	     pci.line = 1;
	     pci.slew_residue = 0;
	     pci.label_nelem = 0;
	     pci.temp = "0"b;
	end;




	if READ_STATUS (prt_info.type) then do;		/* If detailed status to be read ... */

/*	     call iop (make_idcw (READ_STATUS (type)), "10"b, addr (printerstatus), size (printerstatus),
   /*		errsw);
   /*	     if errsw then do;
   /*		rcode = 2;			/* unable to read status */
/*		return;
   /*	     end;
*/
	end;

/* Do a reset status operation to clear out any old status from previous user. */

	reset_idcw = make_idcw ("100000"b);		/* Build skelton idcw */
	idcwp = addr (reset_idcw);			/* get base of it */
	idcw.chan_cmd = "000010"b;			/* make it non-data transfer */
	idcw.count = "000001"b;
	call iop (reset_idcw, "00"b, null, 0, errsw);
	if errsw then do;
	     rcode = 2;
	     return;
	end;


	call load_image (pip, pcip, iop, rcode);	/* Make call to load train image. */
	if rcode = 5 then rcode = 0;			/* this model can't do it, that's OK */

/*	make a separate call to load the VFC image */

	return;




load_image: entry (pip, pcip, iop, rcode);

	rcode = 0;				/* Clear the error code. */

	if LOAD_IMAGE (prt_info.type) then do;		/* If image must be loaded ... */
	     do i = 1 to printer_images_$n_images;	/* Search for appropriate image. */
		if prt_info.train = printer_images_$image_numbers (i) then
		     go to image_found;
	     end;

	     rcode = 1;				/* Image not found. */
	     return;

image_found:
	     call iop (make_idcw (LOAD_IMAGE (prt_info.type)), "01"b,
		addrel (addr (printer_images_$image_base), printer_images_$image_offsets (i)),
		printer_images_$image_lengths (i),
		errsw);
	     if errsw then
		rcode = 3;			/* unable to load train image */
	end;

	else					/* This model printer does not have train image. */
	rcode = 5;

	return;




load_vfc:	entry (pip, pcip, iop, rcode);

dcl 1 vfc_image aligned,				/* print VFC image */
   (2 lpi fixed bin (8),				/* lines per inch */
    2 image_length fixed bin (8),			/* number of lines represented by image */
    2 toip,					/* top of inside page info */
      3 line fixed bin (8),				/* line number */
      3 pattern bit (9),				/* VFC pattern */
    2 boip,					/* bottom of inside page info */
      3 line fixed bin (8),				/* line number */
      3 pattern bit (9),				/* VFC pattern */
    2 toop,					/* top of outside page info */
      3 line fixed bin (8),				/* line number */
      3 pattern bit (9),				/* VFC pattern */
    2 boop,					/* bottom of outside page info */
      3 line fixed bin (8),				/* line number */
      3 pattern bit (9),				/* VFC pattern */
    2 pad bit (18)) unal;				/* fill out last word */

dcl (toip_pattern init ("113"b3),			/* top of inside page pattern */
     toop_pattern init ("111"b3),			/* top of outside page pattern */
     bop_pattern init ("060"b3))			/* bottom of page pattern */
     bit (9) static options (constant);

	rcode = 0;				/* Clear the error code. */

	if LOAD_VFC (prt_info.type) then do;		/* If VFC image must be loaded ... */
	     vfc_image.lpi = pci.lpi;			/* Fill in the VFC image. */
	     vfc_image.image_length = 2 * pci.phys_page_length;
	     vfc_image.toip.line = 4;
	     vfc_image.toip.pattern = toip_pattern;
	     vfc_image.boip.line = pci.phys_page_length - 2;
	     vfc_image.boip.pattern = bop_pattern;
	     vfc_image.toop.line = pci.phys_page_length + 4;
	     vfc_image.toop.pattern = toop_pattern;
	     vfc_image.boop.line = 2 * pci.phys_page_length - 2;
	     vfc_image.boop.pattern = bop_pattern;
	     vfc_image.pad = "0"b;

	     call iop (make_idcw (LOAD_VFC (prt_info.type)), "01"b, addr (vfc_image), size (vfc_image), errsw);
	     if errsw then
		rcode = 4;			/* unable to load VFC image */
	end;

	else					/* This model printer does not support VFC image. */
	rcode = 5;

	return;




make_idcw: proc (cmd) returns (bit (36) aligned);		/* interal proc to make IDCW */

dcl  cmd bit (6) aligned;				/* command code */

dcl 1 i like idcw aligned auto;			/* automatic copy of IDCW */


	     string (i) = "0"b;			/* Clear IDCW. */
	     i.command = cmd;			/* Copy command code. */
	     i.device = "000001"b;			/* Set device code. */
	     i.code = "111"b;			/* Set IDCW ID bits. */

	     return (string (i));			/* Return completed IDCW. */


	end make_idcw;




reset:	entry (pcip);				/* Entry to reset counters and modes. */


	pci.lmarg = 0;
	pci.rmarg = pci.phys_line_length;
	pci.page_length = pci.phys_page_length - pci.lpi;
	pci.sheets_per_page = 1;
	pci.line_count = 0;
	pci.page_count = 0;
	pci.func = 0;
	pci.modes = "0"b;
	pci.flags = "0"b;
	pci.top_label_line = "";
	pci.bot_label_line = "";
	pci.top_label_length = 0;
	pci.bot_label_length = 0;
	pci.esc_state = 0;
	pci.esc_num = 0;

	return;



     end init_printer_;
