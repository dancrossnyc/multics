/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



/* PRTDIM_ATTACH - Attach/Detach module for the printer DIM.
   coded 10/30/74 by Noel I. Morris	*/
/* Modified: 27 November 1981 by G. Palter to clear new reload_vfc_train_when_ready flag */


prtdim_attach:					/* attach a printer */
     procedure (stream_name, prt, device, mode, iostatus, sdb_ptr);

dcl  stream_name char (*),				/* name of IO stream */
     prt char (*),					/* name of DIM being attached */
     device char (*),				/* printer device name */
     mode char (*),					/* attachment mode */
     iostatus bit (72) aligned;			/* IOS status */

dcl  area_ptr ptr,					/* pointer to system free area */
     listen_based_area area ((16374)) based (area_ptr),	/* area in which to allocate sdb */
     wksp_max fixed bin (19),				/* max size of IOI workspace buffer */
     time_max fixed bin (52),				/* max time for IOI connect to complete */
     rcp_state fixed bin,				/* state variable from check_attach */
     rcode fixed bin (35);				/* error code */

dcl  get_system_free_area_ entry (ptr),
     ipc_$create_ev_chn entry (fixed bin (71), fixed bin (35)),
     ipc_$block entry (ptr, ptr, fixed bin (35)),
     ipc_$delete_ev_chn entry (fixed bin (71), fixed bin (35)),
     convert_ipc_code_ entry (fixed bin (35)),
     rcp_$attach entry (char (*), ptr, fixed bin (71), char (*), bit (36) aligned, fixed bin (35)),
     rcp_$check_attach entry (bit (36) aligned, ptr, char (*), fixed bin, fixed bin (19), fixed bin (52),
     fixed bin, fixed bin (35)),
     ioi_$workspace entry (fixed bin, ptr, fixed bin (18), fixed bin (35)),
     rcp_$detach entry (bit (36) aligned, bit (*), fixed bin, char (*), fixed bin (35)),
     prtdim_util$init entry (ptr, fixed bin (35)),
     prtdim_util$load_vfc entry (ptr, fixed bin (35));



/*  */

dcl  error_table_$ionmat fixed bin (35) ext,
     error_table_$no_room_for_dsb fixed bin (35) ext,
     error_table_$no_operation fixed bin (35) ext,
     config_deck$ ext;

dcl 1 rcp_info like printer_info aligned auto;		/* automatic copy of RCP info structure */

dcl 1 ipc_message aligned,
    2 chname fixed bin (71),				/* Chan over which message arrived */
    2 message fixed bin (71),				/* 2-word event message */
    2 sender bit (36),				/* Sending process */
    2 origin,					/* Origin of event message */
      3 devsignal bit (18),				/* 1 = device signal */
      3 ring bit (18),				/* Senders ring number */
    2 channel_index fixed bin;

dcl (addr, null, ptr, substr, unspec) builtin;


/*  */

% include prt_sdb;


/*  */

% include rcp_printer_info;

% include prt_info;


/*  */

% include prt_conv_info;

/*  */

% include iom_pcw;

/*  */

	iostatus = "0"b;				/* Clear returned status. */
	if sdb_ptr ^= null () then do;		/* Check for multiple attachments */
	     substr (iostatus, 1, 36) = unspec (error_table_$ionmat); /* If multiple attachment return code */
	     go to exit;
	end;					/* End sdb_ptr not null do group */

	call get_system_free_area_ (area_ptr);		/* Get ptr to area in listen_ before alloc */
	allocate sdb in (listen_based_area) set (sdb_ptr); /* Create stream data block */
	if sdb_ptr = null then do;			/* If this - then no room for sdb */
	     substr (iostatus, 1, 36) = unspec (error_table_$no_room_for_dsb); /* Send message */
	     go to exit;				/* Exit */
	end;					/* End sdb_ptr null do group */

	sdb.areap = area_ptr;			/* Save pointer to free area. */

	outer_module_name = prt;			/* Put name this outer module in sdb */
	device_name_list_ptr = addr (sdb.device_name);	/* Set pointer */
	next_device_ptr = null;			/* Only one device allowed */
	name_size = 32;				/* Set name size */
	name = device;				/* Put attached device name in sdb */
	sdb.stream_name = stream_name;		/* record the name of this attachment */

	call ipc_$create_ev_chn (evchan, rcode);	/* Create event channel so that the supervisor
						   knows who to wake when we are blocked */
	if rcode ^= 0 then do;
	     call convert_ipc_code_ (rcode);
	     go to free1;
	end;
	ev_list.count = 1;				/* Set count in event list. */

	pip = addr (sdb.info);			/* Get pointer to printer info. */
	prt_info.devname = name;			/* Set device name in structure. */

	printer_info_ptr = addr (rcp_info);		/* Get pointer to RCP info for printer. */
	rcp_info.version_num = 1;			/* Set up the RCP info structure. */
	rcp_info.usage_time = 0;			/* Don't know how long we'll use printer. */
	rcp_info.wait_time = 0;			/* We are not willing to wait. */
	rcp_info.system_flag = "0"b;			/* Not system process. */
	rcp_info.device_name = name;			/* Set device name. */

	call rcp_$attach ("printer", printer_info_ptr, evchan, "", rcp_id, rcode);
	if rcode ^= 0 then go to free;		/* Attempt to attach the printer. */

check:	call rcp_$check_attach (rcp_id, printer_info_ptr, "", prt_info.devx, wksp_max, time_max,
	     rcp_state, rcode);			/* Check on progress of attachment. */
	if rcode ^= 0 then go to free;

	go to attach_state (rcp_state);		/* Dispatch on state variable. */

attach_state (1):					/* Short wait needed */
	call ipc_$block (addr (sdb.ev_list), addr (ipc_message), rcode);
	if rcode ^= 0 then do;			/* Wait for attachment to complete. */
	     call convert_ipc_code_ (rcode);
	     go to free;
	end;
	go to check;				/* Perform check again. */

attach_state (2):					/* long wait */
attach_state (3):					/* error occurrence */
	go to free;				/* This is an error condition. */

attach_state (0):					/* Successful attachment */
	prt_info.model = rcp_info.model;		/* Extract info from RCP info structure. */
	prt_info.train = rcp_info.print_train;
	prt_info.line_length = rcp_info.line_length;

	call ioi_$workspace (prt_info.devx, wsegp, 1024, rcode); /* To wire down space for DCW list */
	if rcode ^= 0 then go to free;		/* Check error code */

	call prtdim_util$init (sdb_ptr, rcode);		/* Initialize printer information. */
	if rcode ^= 0 then go to free;		/* If unable to initialize printer ... */

	if mode ^= "save_vfc" then do;		/* are we to load a vfc now? */
	     call prtdim_util$load_vfc (sdb_ptr, rcode);	/* data is in  sdb.conv_info */
	     if rcode = error_table_$no_operation then rcode = 0;
	     else if rcode ^= 0 then go to free;	/* load error */
	end;

	idcwp = addr (prt_info.print_idcw);		/* Get pointer to IDCW for printing. */
	idcw.control = "10"b;			/* Set continue bit in IDCW. */

	stop, bgin, prev = 0;			/* Initialize DCW list pointers. */
	wait_flag = "0"b;				/* Reset waiting for special flag. */
	running = "0"b;				/* Indicate channel not running. */
	marker_count = 0;				/* Clear the marker status counter. */
	paper_low = "0"b;				/* Reset paper low flag. */
	error_count = 0;				/* Clear the error counter. */
	reload_vfc_train_after_special = "0"b;		/* Reset request to reload VFC/train after a special */
	chars_printed = 0;

	return;					/* All finished. */

/*  */

free:
free1:	substr (iostatus, 1, 36) = unspec (rcode);	/* Return error code. */

	go to detach;				/* try to clean up, but retain this error code */
						/* Drop into normal detach code. */


prtdim_detach: entry (sdb_ptr, device, mode, iostatus);	/* Detach entry point */

	iostatus = "0"b;				/* clear the status code */

detach:	call ipc_$delete_ev_chn (evchan, rcode);	/* Delete event channel */
	if rcode ^= 0 then if substr (iostatus, 1, 36) = "0"b then do;
		call convert_ipc_code_ (rcode);
		substr (iostatus, 1, 36) = unspec (rcode);
	     end;

	pip = addr (sdb.info);			/* Get pointer to info structure. */

	call rcp_$detach (rcp_id, "0"b, error_count, "", rcode);
	if rcode ^= 0 then				/* Attempt to detach the device. */
	     if substr (iostatus, 1, 36) = "0"b then	/* report error if none exists */
		substr (iostatus, 1, 36) = unspec (rcode); /* Put error code in return status */

	area_ptr = sdb.areap;			/* Get pointer to area. */
	free sdb in (listen_based_area);		/* Free-up allocated sdb */

exit:	substr (iostatus, 52, 1) = "1"b;		/* Set ioname detached bit */
	substr (iostatus, 41, 1) = "1"b;		/* Set transaction terminated bit */
	return;




     end prtdim_attach;
