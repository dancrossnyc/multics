/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

print_log: proc;

/* PRINT_LOG - print the answering service logs
   THVV */
/* args changed 7/76 THVV */
/* Modified March 1979 by T. Casey to add ability to automatically chase backpointers to previous logs. */

dcl  path char (168) aligned init (">system_control_1>log"),
     dn char (168) aligned,
     en char (32) aligned,
     print_count fixed bin init (0),
     shx fixed bin,
     nsharg fixed bin init (0),
     searcharg (32) char (64) varying,
     nexclarg fixed bin init (0),
     exclarg (32) char (64) varying,
     ioa_ entry options (variable),
     hcs_$initiate entry (char (*)aligned, char (*) aligned, char (*) aligned, fixed bin (1),
     fixed bin (2), ptr, fixed bin (35)),
     hcs_$terminate_noname entry (ptr, fixed bin (35)),
     expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35)),
     ec fixed bin (35),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35)),
     convert_date_to_binary_ entry (char (*), fixed bin (71), fixed bin (35)),
     xtime fixed bin (71),
     start_time fixed bin (71) initial (0),
     end_time fixed bin (71) init			/* This date is 12/31/99 2359. */
    (1011000110010110011001001110100110111010100100000000b), /* .. if Multics last this long we will have to fix */
     bchr char (al) based (ap) unaligned,
     hdsw bit (1) aligned init ("1"b),
     negative bit (1) init ("0"b),
     ap ptr,
     al fixed bin,
     date_time_ entry (fixed bin (71), char (*) aligned),
     sys_log_ptr ptr,
     com_err_ entry options (variable),
     timestr char (16) aligned,
     odate char (8) aligned init (" "),
     istart fixed bin init (1),
     i fixed bin,
     ss fixed bin init (0),
     pl fixed bin init (23),
     an fixed bin init (1);


dcl  log_ptrs (200) ptr;				/* should never need to look at more than 200 previous logs */
dcl  history (200) bit (1) unaligned;
dcl  xlls (200) char (12);
dcl  n_logs fixed bin init (0);			/* how many of the above pointers are valid */
dcl  log_no fixed bin;				/* which one are we printing now */
dcl  first_msg_found bit (1) aligned;			/* to tell when we have looked back far enough */
dcl  pathsw bit (1) aligned init (""b);			/* on if log pathname given */
dcl  sysdir char (168) init (">sc1");
dcl  log_name char (32) init ("log");
dcl  history_dir char (168) init (">udd>SysAdmin>admin>history");
dcl  iend fixed bin init (0);				/* number of last message, if -to N given */
dcl  convert_date_to_binary_$relative entry (char (*), fixed bin (71), fixed bin (71), fixed bin (35));
dcl  prev_arg char (32);				/* saved previous argument, for error messages */
dcl  me char (9) int static options (constant) init ("print_log");
dcl  fb71 fixed bin (71);
dcl  for_time_string char (32) init ("");
dcl  error_table_$noentry ext fixed bin (35);
dcl  n_msgs fixed bin init (0);
dcl  error_table_$badopt ext fixed bin (35);

dcl (abs, addr, hbound, index, null, rtrim, substr) builtin;

dcl  cleanup condition;

%include syslog;

/* ======================================================= */

	history (1) = ""b;
	an = 1;
arglp:	call cu_$arg_ptr (an, ap, al, ec);
	if ec ^= 0 then go to endarg;
	if bchr = "-a" | bchr = "-all" then ss = 0;	/* obsolete */
	else if bchr = "-n" then ss = 1;		/* obsolete */
	else if bchr = "-e" then ss = 2;		/* obsolete */
	else if bchr = "-severity" | bchr = "-sv" then do;
	     call get_next_arg;
	     ss = cv_dec_check_ (bchr, ec);
	     if ec ^= 0 then do;
		call com_err_ (0, "print_log", "Illegal -severity: ^a", bchr);
		return;
	     end;
	end;
	else if bchr = "-nhdr" | bchr = "-no_header" | bchr = "-nhe" then hdsw = "0"b;
	else if (bchr = "-word" | bchr = "-match") then do;
	     call get_next_arg;
ml1:	     nsharg = nsharg + 1;
	     if nsharg <= hbound (searcharg, 1) then searcharg (nsharg) = bchr;
	     else call com_err_ (0, "print_log", "-match arg ^a ignored - limit ^d", bchr, hbound (searcharg, 1));
	     an = an + 1;
	     call cu_$arg_ptr (an, ap, al, ec);
	     if ec = 0 then if substr (bchr, 1, 1) ^= "-" then go to ml1;
	     go to arglp;
	end;
	else if (bchr = "-ex" | bchr = "-exclude") then do;
	     call get_next_arg;
ml2:	     nexclarg = nexclarg + 1;
	     if nexclarg <= hbound (exclarg, 1) then exclarg (nexclarg) = bchr;
	     else call com_err_ (0, "print_log", "-exclude arg ^a ignored - limit ^d", bchr, hbound (exclarg, 1));
	     an = an + 1;
	     call cu_$arg_ptr (an, ap, al, ec);
	     if ec = 0 then if substr (bchr, 1, 1) ^= "-" then go to ml2;
	     go to arglp;
	end;
	else if bchr = "-tm" | bchr = "-time" | bchr = "-date" | bchr = "-dt" then do;
	     call get_next_arg;
	     call convert_date_to_binary_ (bchr, start_time, ec);
	     if ec ^= 0 then go to arg_err;
	end;
	else if bchr = "-to" then do;
	     call get_next_arg;
	     call convert_date_to_binary_ (bchr, xtime, ec);
	     if ec = 0 then end_time = xtime;
	     else do;
		iend = cv_dec_check_ (bchr, ec);
		if ec ^= 0 then go to date_dec_err;
	     end;
	end;
	else if bchr = "-from" | bchr = "-fm" then do;
	     call get_next_arg;
	     call convert_date_to_binary_ (bchr, xtime, ec);
	     if ec = 0 then start_time = xtime;
	     else do;				/* Not a date, see if number */
		i = cv_dec_check_ (bchr, ec);
		if ec ^= 0 then goto date_dec_err;
		else istart = i;
	     end;
	end;
	else if bchr = "-last" then do;
	     call get_next_arg;
	     i = cv_dec_check_ (bchr, ec);
	     if ec ^= 0 then goto dec_err;
	     else istart = -i;
	end;
	else if bchr = "-for" | bchr = "-next" then do;
	     call get_next_arg;
	     print_count = cv_dec_check_ (bchr, ec);
	     if ec ^= 0 then do;			/* must be a date-time */
		print_count = 0;
		for_time_string = bchr;		/* it is a relative date-time - e.g., "1hour" */
	     end;					/* so wait 'til we know the first message's date-time,
						   before converting the relative date-time */
	end;
	else if bchr = "-sysdir" then do;
	     call get_next_arg;
	     sysdir = bchr;
	end;
	else if bchr = "-history_dir" then do;
	     call get_next_arg;
	     history_dir = bchr;
	end;
	else if bchr = "-log" | bchr = "-log_name" | bchr = "-et" | bchr = "-entry" then do;
	     call get_next_arg;
	     log_name = bchr;
	end;
	else if substr (bchr, 1, 1) = "-" then do;
	     i = cv_dec_check_ (bchr, ec);		/* check for negative number */
	     if ec = 0 then do;
		istart = i;
		goto nxtarg;
	     end;

	     call com_err_ (error_table_$badopt, "print_log", "^a", bchr);
						/* if it's not a negative number, it must be an error */
	     return;
	end;
	else do;					/* obsolete */
	     i = cv_dec_check_ (bchr, ec);
	     if ec = 0 then do;
		istart = i;
		go to nxtarg;
	     end;
	     path = bchr;
	     pl = al;
	     pathsw = "1"b;
	     call expand_path_ (addr (path), pl, addr (dn), addr (en), ec);
	     if ec ^= 0 then goto arg_err;
	end;
nxtarg:	an = an + 1;
	go to arglp;

endarg:

/* Find first message to be printed. Might have to chase backpointers to previous logs.
   Only chase backpointers when log pathname not given.
   If -from DATE given and DATE is before first date in current log, or
   -last N given and there are less than N messages in logs initiated so far,
   then look in previous logs to find first message. */


	if ^pathsw then do;				/* if path not given, start with current log */
	     dn = sysdir;
	     en = log_name;
	end;

	on cleanup call terminate_logs;		/* set up cleanup handler before initiating logs */

	first_msg_found = ""b;
	do while (^first_msg_found);			/* keep looking 'til we find it */

	     if n_logs ^< hbound (log_ptrs, 1) then do;	/* if too many logs initiated */
		call com_err_ (0, me, "Limit of ^d previous logs exceeded.", hbound (log_ptrs, 1));
		first_msg_found = "1"b;		/* pretend we found it, and print what we have */
	     end;

	     else do;				/* initiate another log, and look at it */
		log_ptrs (n_logs+1) = null;		/* in case of cleanup */
		n_logs = n_logs + 1;
try_initiate:
		call hcs_$initiate (dn, en, "", 0, 1, log_ptrs (n_logs), ec);
		if log_ptrs (n_logs) = null then do;	/* if initiate failed */
		     if ec = error_table_$noentry & n_logs > 1 then do; /* previous log not there */
			if n_logs >= 2 & dn = sysdir then do; /*  previous log not in sysdir */
			     dn = history_dir;	/* it was probably moved to history directory */
			     goto try_initiate;	/* so much for gotoless programming */
			end;

			else do;			/* logs not saved that far back */
			     if n_logs = 2 then	/* immediately previous log not found */
				call com_err_ (0, me, "Previous ^a not found in ^a", en, dn);
			     else do;		/* some logs found, but not back far enough */
				if istart ^< 0 then do; /* if -last N not given, -from DATE must have been */
				     call date_time_ (time (1), timestr);
				     call com_err_ (0, me, "Saved logs go back only to ^a.", timestr);
				end;
				else call com_err_ (0, me, "Saved logs contain only the last ^d messages.", n_msgs);
			     end;
			     first_msg_found = "1"b;	/* stop looking, and print what we have */
			     n_logs = n_logs - 1;	/* don't try to print the one that wasn't there */
			end;

		     end;				/* end previous log not there */

		     else do;			/* real error */
			call com_err_ (ec, me, "^a>^a", dn, en);
			goto cleanup_and_return;
		     end;
		end;				/* end initiate failed */

		else if n_logs > 1 then do;		/* save info for printing log pathname in heading */
		     if dn = history_dir then history (n_logs) = "1"b;
		     xlls (n_logs) = lls;
		end;

		sys_log_ptr = log_ptrs (n_logs);	/* set pointer that log structure is based on */

/* See if this log contains the starting message that we want */

		n_msgs = n_msgs + count;		/* total messages in all initiated logs */

		if ^pathsw			/* if log pathname not given */
		& (start_time > 0 & start_time < time (1) /* and -from DATE given and DATE isn't in this log */
		| istart < 0 & abs (istart) > n_msgs	/* or -last N given and logs don't have N messages yet */
		| count = 0)			/* or log is empty (just contains name of previous one) */
		then en = rtrim (log_name) || ".-." || rtrim (lls); /* then construct entry name of previous log,
						   and look for it by staying in the loop */

		else first_msg_found = "1"b;		/* else first msg is in this log so stop looking */
	     end;					/* end log_ptrs array not full */
	end;					/* end do while ^first_msg_found */

/* We've found the log containing the first message. Now find the index of the message */

	if istart < 0 then				/* if -last N given */
	     istart = n_msgs + istart + 1;		/* equivalent to n_msgs - N + 1 */
	if istart < 1 then istart = 1;		/* if we don't have N messages, start with first one */

	if start_time > 0 then			/* if -from DATE given */
	     do istart = istart to count		/* scan log */
	     while (time (istart) < start_time); end;	/* for first message at or after that date-time */

/* Now see if -for TIME was given. If so, compute end time relative to start time */

	if for_time_string ^= "" then do;		/* if -for TIME was given */
	     if start_time > 0 then			/* if -from DATE was given */
		fb71 = start_time;			/* use that time */
	     else fb71 = time (istart);		/* otherwise use time of starting message */
	     call convert_date_to_binary_$relative (for_time_string, end_time, fb71, ec);
	     if ec ^= 0 then do;
		call com_err_ (ec, me, "^a", for_time_string);
		goto cleanup_and_return;
	     end;
	end;

/* Now print the log(s) */

	do log_no = n_logs to 1 by -1;

	     sys_log_ptr = log_ptrs (log_no);		/* copy pointer to log to be printed */

	     call date_time_ (ttime, timestr);
	     if hdsw then do;
		if ^pathsw then do;			/* unless path arg given, construct path to print in heading */
		     if history (log_no) then dn = history_dir;
		     else dn = sysdir;
		     if log_no = 1 then en = log_name;
		     else en = rtrim (log_name) || ".-." || rtrim (xlls (log_no));
		end;
		call ioa_ ("^/""^a>^a"" - ^d entries, last ^a^/", dn, en, count, timestr);
	     end;

	     do i = istart to count;

		if time (i) > end_time then go to endlp1;
		if svty (i) < ss then go to endlp;
		do shx = 1 to nsharg while (index (line (i), searcharg (shx)) = 0); end;
		if nsharg > 0 & shx > nsharg then go to endlp; /* If all fail skip */
		do shx = 1 to nexclarg while (index (line (i), exclarg (shx)) = 0); end;
		if nexclarg > 0 & shx <= nexclarg then go to endlp; /* If any found skip */

		call date_time_ (time (i), timestr);
		if substr (timestr, 1, 8) = odate then substr (timestr, 1, 8) = " ";
		else odate = substr (timestr, 1, 8);
		call ioa_ ("^4d ^16a ^d ^a", i, timestr, svty (i), line (i));
		print_count = print_count - 1;
		if print_count = 0 then go to endlp1;
		if iend > 0 & i = iend then goto endlp1;
endlp:	     end;

	     istart = 1;				/* start at beginning of next log */
	end;					/* end loop thru several logs */

endlp1:	call ioa_ ("");
cleanup_and_return:
	call terminate_logs;
	return;

arg_err:	call com_err_ (ec, me, "^a", bchr);
	return;

date_dec_err: call com_err_ (0, me, "Argument after ^a not date or decimal number: ^a", prev_arg, bchr);
	return;

dec_err:	call com_err_ (0, me, "Invalid decimal number (digit ^d): ^a", ec, bchr);
	return;

noarg_err: call com_err_ (ec, me, "after ""^a""", prev_arg);
	return;

/* ********** INTERNAL PROCEDURES ********** */

get_next_arg: proc;

	     prev_arg = bchr;			/* save current argument, for possible error message */
	     an = an + 1;				/* increment argument index */
	     call cu_$arg_ptr (an, ap, al, ec);
	     if ec ^= 0 then goto noarg_err;
	     return;

	end get_next_arg;

/* ********** ********** */

terminate_logs: proc;

dcl  i fixed bin;

	     do i = 1 to n_logs;
		call hcs_$terminate_noname (log_ptrs (i), (0));
	     end;
	     return;

	end terminate_logs;

     end print_log;
