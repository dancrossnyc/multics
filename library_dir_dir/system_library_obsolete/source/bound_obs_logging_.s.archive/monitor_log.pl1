/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



/* monitor_log.pl1 --  program to monitor and print on
   the users terminal  doings in a standard system log */
/* format: style2 */
monitor_log:
     procedure options (variable);

/* Various times in 1981, Benson I. Margulies */
/* honi soit qui mal y pense */

/* faults and such fixed BIM 11/82 */

%include syslog;
%page;
%include monitor_log_info_;


	declare cv_dec_check_	 entry (character (*), fixed bin (35)) returns (fixed bin (35));
	declare continue_to_signal_	 entry (fixed binary (35));
	declare convert_ipc_code_	 entry (fixed bin (35));
	declare com_err_		 entry options (variable);
	declare cu_$arg_count	 entry (fixed bin, fixed bin (35));
	declare cu_$arg_ptr		 entry (fixed bin, pointer, fixed bin (21), fixed bin (35));
	declare cu_$cp		 entry (pointer, fixed bin (21), fixed bin (35));
	declare expand_pathname_	 entry (character (*), character (*), character (*), fixed bin (35));
	declare (get_temp_segment_, release_temp_segment_)
				 entry (character (*), pointer, fixed bin (35));
	declare (
	        hcs_$set_ips_mask,
	        hcs_$reset_ips_mask
	        )			 entry (bit (36) aligned, bit (36) aligned);
	declare ioa_		 entry options (variable);
	declare monitor_log_util_$wakeup_handler
				 entry;
	declare monitor_log_util_$initiate_path
				 entry (char (*), char (*), char (*), ptr, fixed bin (35));
	declare monitor_log_util_$initiate_log
				 entry (ptr, fixed bin (35));
	declare monitor_log_util_$check_log_switch
				 entry (pointer) returns (bit (2) aligned);
	declare requote_string_	 entry (char (*)) returns (char (*));
	declare term_$single_refname	 entry (char (*), fixed bin (35));
	declare timer_manager_$alarm_call
				 entry (fixed bin (71), bit (2), entry);
	declare timer_manager_$reset_alarm_call
				 entry (entry);
	declare unique_chars_	 entry (bit (*)) returns (char (15));

	declare nargs		 fixed bin;
	declare old_logp		 pointer;
	declare emtp		 pointer;
	declare sys_log_ptr		 pointer;
	declare severity		 fixed binary;

	declare 1 toggles		 aligned,
		2 action_options	 aligned,
		  3 (have_print, have_off, have_time, have_match, have_exclude, remove_match, remove_exclude,
		       have_call, have_severity, have_no_severity)
				 bit (1) unaligned,
		  3 pad		 bit (24) unaligned,
		2 state_flags	 aligned,
		  3 (have_log, all_logs, have_this_log, match, have_numbered_log, have_path)
				 bit (1) unaligned,
		  3 pad		 bit (30) unaligned;

	declare log_number		 fixed bin;
	declare saved_ips_mask	 bit (36) aligned;
	declare time		 fixed bin (71);
	declare log_d		 character (168);
	declare log_e		 character (32);
	declare command		 character (512) aligned;
	declare current_argument	 fixed bin;
	declare ap		 pointer,
	        al		 fixed bin (21),
	        argument		 character (al) based (ap);
	declare i			 fixed bin;

	declare 1 em		 aligned based (emtp),
		2 current		 fixed bin,
		2 matches		 fixed bin,
		2 excludes	 fixed bin,
		2 entries		 (1024) aligned,
		  3 match		 bit (1),
		  3 string	 character (128) varying;

	declare (
	        error_table_$namedup,
	        error_table_$segknown,
	        error_table_$noentry,
	        error_table_$noarg,
	        error_table_$badopt,
	        error_table_$name_not_found,
	        error_table_$bad_conversion,
	        error_table_$inconsistent,
	        error_table_$too_many_args,
	        error_table_$too_many_names,
	        error_table_$action_not_performed
	        )			 ext static fixed bin (35);

	declare code		 fixed bin (35);
	declare any_other		 condition;
	declare cleanup		 condition;
	declare fixedoverflow	 condition;
	declare ME		 character (11) init ("monitor_log") int static options (constant);

	declare (codeptr, substr, null, length, string, index, search, after, before, rtrim)
				 builtin;


	emtp = null ();
	call cu_$arg_count (nargs, code);
	if code ^= 0
	then do;					/* we dont make a very useful af */
		call com_err_ (code, ME);
		return;
	     end;
	if nargs = 0
	then do;
		call com_err_ (0, ME, "Usage: monitor_log {log_path} -control_args");
		return;
	     end;
	emtp = null ();
	current_argument = 0;
	string (toggles) = ""b;			/* clear state and options */
	do while (current_argument < nargs);

	     call get_next_argument;
	     if index (argument, "-") ^= 1
	     then do;				/* noncontrol argument ==> must be logname  */
		     if have_log
		     then do;
two_logs:
			     call com_err_ (error_table_$too_many_names, ME,
				"^[Only one log name may be given.^;A log name may not be given with -all.^]",
				^all_logs);
			     goto RETURN;
			end;
		     call expand_pathname_ (argument, log_d, log_e, code);
		     if code ^= 0
		     then do;
			     call com_err_ (code, ME, "^a.", argument);
			     goto RETURN;
			end;
		     have_log = "1"b;
		     have_path = (search (argument, "<>") ^= 0);
		end;
	     else if argument = "-number" | argument = "-nb"
	     then do;
		     if have_log
		     then goto two_logs;
		     have_log, have_numbered_log = "1"b;
		     if current_argument = nargs
		     then do;
			     call com_err_ (error_table_$noarg, ME, "No log number giver with -number.");
			     return;
			end;
		     call get_next_argument;
		     log_number = cv_dec_check_ (argument, code);
		     if code ^= 0
		     then do;
			     if code > length (argument)
			     then call com_err_ (code, ME, "Could not convert ^a to a log number.", argument);
			     else call com_err_ (error_table_$bad_conversion, ME,
				     "Error converting ^a to a log number, character ^a in error.", argument,
				     substr (argument, code, 1));
			end;
		end;

	     else if argument = "-a" | argument = "-all"
	     then do;
		     if have_log
		     then do;
			     call com_err_ (error_table_$inconsistent, ME, "-all may not be given with a log name.")
				;
			     goto RETURN;
			end;
		     all_logs = "1"b;
		end;
	     else if argument = "-print" | argument = "-pr"
	     then do;
		     have_print = "1"b;
		end;

	     else if argument = "-no_print" | argument = "-no_pr"
	     then do;
		     have_print = "0"b;
		end;

	     else if argument = "-time" | argument = "-tm"
	     then do;
		     if current_argument = nargs
		     then do;			/* theres no time there */
NO_TIME:
			     call com_err_ (error_table_$noarg, ME, "A time must be specified for -time.");
			     goto RETURN;
			end;
		     call get_next_argument;
		     if index (argument, "-") = 1
		     then goto NO_TIME;		/* kludgily prevent negatives */
		     time = cv_dec_check_ (argument, code);
		     if code ^= 0
		     then do;
			     if code < length (argument)
			     then call com_err_ (error_table_$bad_conversion, ME, "Error at character ^a of ^a.",
				     substr (argument, code, 1), argument);
			     else call com_err_ (code, ME, "Could not convert ^a to a time.", argument);
			     goto RETURN;
			end;
		     have_time = "1"b;
		end;

	     else if argument = "-off"		/* there is no -no_off. -off is too "dangerous". We could have -on 
				    but that would be confusing with -time or -print */
	     then do;
		     if have_off
		     then do;
			     call com_err_ (error_table_$too_many_args, ME, "-off may only be given once.");
			     go to RETURN;
			end;
		     have_off = "1"b;
		end;
	     else if argument = "-no_severity" | argument = "-no_sv"
	     then do;
		     if have_no_severity
		     then do;
			     call com_err_ (error_table_$too_many_args, ME, "-no_severity may only be given once.");
			     go to RETURN;
			end;
		     have_no_severity = "1"b;
		     if have_severity
		     then
incon_severity:
			do;
			     call com_err_ (error_table_$inconsistent, ME,
				"Both -severity and -no_severity were given.");
			     go to RETURN;
			end;

		end;
	     else if argument = "-severity" | argument = "-sv"
	     then do;
		     if have_no_severity
		     then go to incon_severity;
		     if current_argument = nargs
		     then do;
			     call com_err_ (error_table_$noarg, ME, "No severity given with -severity.");
			     go to RETURN;
			end;
		     call get_next_argument;
		     severity = cv_dec_check_ (argument, code);
		     if code ^= 0
		     then do;
			     if index (argument, "-") = 1
			     then call com_err_ (error_table_$noarg, ME,
				     "No severity given with -severity. Control argument ^a found instead.",
				     argument);
			     else if code < length (argument)
			     then call com_err_ (error_table_$bad_conversion, ME,
				     "Could not convert ^a to a severity. Error at character ^a.", argument,
				     substr (argument, code, 1));
			     else call com_err_ (error_table_$badopt, ME, "Bad severity ^a.", argument);
			     go to RETURN;
			end;
		     have_severity = "1"b;
		end;

	     else if argument = "-call"
	     then do;
		     if current_argument = nargs
		     then do;
			     call com_err_ (error_table_$noarg, ME, "No command to call was given.");
			     return;
			end;
		     call get_next_argument;
		     command = argument;
		     have_call = "1"b;
		end;

	     else if argument = "-exclude" | argument = "-ex" | argument = "-match"
	     then do;
		     if (emtp = null ())		/* no temp yet */
		     then do;
			     on cleanup call release_temp_segment_ (ME, emtp, code);
			     call get_temp_segment_ (ME, emtp, code);
			     if code ^= 0
			     then do;
				     call com_err_ (code, ME, "no temp segs??");
				     return;
				end;
			     em.matches, em.excludes, em.current = 0;
			end;
		     state_flags.match = (argument = "-match");
		     if current_argument = nargs
		     then do;
NO_STRING:
			     call com_err_ (error_table_$noarg, ME, "No ^[match^;exclude^] string given.",
				state_flags.match);
			     goto RETURN;
			end;
		     call get_next_argument;
		     if index (argument, "-") = 1
		     then goto NO_STRING;		/* have to have a string */
		     if (^state_flags.match & remove_exclude) | (state_flags.match & remove_match)
		     then do;
BAD_MEXC:
			     call com_err_ (error_table_$inconsistent, ME,
				"Can't both remove and create exclusions or matches.");
			     goto RETURN;
			end;
		     em.current = em.current + 1;
		     em.entries.string (em.current) = argument;
		     em.entries.match (em.current) = state_flags.match;
		     if state_flags.match
		     then do;
			     em.matches = em.matches + 1;
			     have_match = "1"b;	/* at least one */
			end;
		     else do;
			     em.excludes = em.excludes + 1;
			     have_exclude = "1"b;
			end;
		end;
	     else if argument = "-remove_exclude" | argument = "-rmex"
	     then do;
		     if have_exclude
		     then goto BAD_MEXC;
		     remove_exclude = "1"b;
		end;
	     else if argument = "-remove_match" | argument = "-rm_match"
	     then do;
		     if have_match
		     then goto BAD_MEXC;
		     remove_match = "1"b;
		end;
	     else do;
		     call com_err_ (error_table_$badopt, ME, "^a", argument);
		     goto RETURN;
		end;
	end;


/* Here ends the lexical phase (sic) aka the argument parsing loop. On to the syntactic
   analyzer, to verify that all the arguments really make sense */


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* First check. If -all is specified, there must be something to do to them all.	*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	if all_logs & (string (action_options) = ""b)
	then do;					/* -all must specify existing log op, not addition of new log */
		call com_err_ (error_table_$inconsistent, ME, "-all is meaningless without a log operation.");
		goto RETURN;
	     end;


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* Second check. There must be some log spec. Or -time, which applies to all logs. */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	if ^(all_logs | have_log | have_time | have_print)
	then do;
		call com_err_ (error_table_$noarg, ME, "No log name supplied.");
		goto RETURN;
	     end;

	if ^have_log & ^have_time & have_print & ^have_off
	then all_logs = "1"b;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* Okay, they pass. We have some log to work on and something to do to it. Let us begin.	*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	if have_time
	then do;
		monitor_log_invocations_.interval = time;
		if monitor_log_invocations_.active
		then do;
			call timer_manager_$reset_alarm_call (monitor_log_util_$wakeup_handler);
			call timer_manager_$alarm_call (monitor_log_invocations_.interval, "11"b,
			     monitor_log_util_$wakeup_handler);
		     end;
	     end;
	if have_print
	then do;
		call ioa_ ("The wakeup interval is ^d second^[s^].", monitor_log_invocations_.interval,
		     (monitor_log_invocations_.interval ^= 1));
	     end;

	if ^(have_log | all_logs)
	then return;				/* thats all */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* From now on, the flag have_log is uninteresting. All_logs tells whether a particular	*/
/* log is under examination, and we have already reported an error if we had neither	*/
/* a log not -all.								*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


	if ^all_logs				/* find the one specified log, to see if we are making a new one */
	then do;
		if have_numbered_log
		then call find_numbered_log (log_number, code);
		else call find_log (have_path, code);
		have_this_log = (code = 0);		/* was it already active? */

		if ^have_this_log & have_numbered_log	/* if it was not, and was identified by number, we are stuck */
		then do;
			call com_err_ (error_table_$inconsistent, ME, "Log number ^d is not active.", log_number);
			go to RETURN;
		     end;

		if ^have_this_log & ^have_print & ^have_off
						/* all the other actions are also creation params */
		then do;
			call new_log;
			go to RETURN;
		     end;
		else do;				/* just one log to be tweaked */
			if ^have_this_log
			then do;
				call com_err_ (error_table_$name_not_found, ME, "No monitor set on the log ^a.",
				     log_e);
				return;
			     end;
			call process_a_log;
			go to RETURN;
		     end;
	     end;
	else do;					/* all_logs */
		if monitor_log_invocations_.lastp = monitor_log_invocations_.firstp
		then do;
			mlip = monitor_log_invocations_.firstp;
			if mlip = null
			then do;
				if ^(have_print & ^have_off)
				then call com_err_ (error_table_$name_not_found, ME, "There are no active logs.");
				go to RETURN;
			     end;
			call process_a_log;
			go to RETURN;
		     end;
		else
loop_down_logs:
		     begin;
			declare next_info_pointer	 pointer;

			do mlip = monitor_log_invocations_.firstp repeat (next_info_pointer)
			     while (mlip ^= null ());
			     next_info_pointer = monitor_log_info.forwardp;
			     call process_a_log;
			end;
		     end loop_down_logs;
		go to RETURN;
	     end;

process_a_log:
     procedure;

	call process_match_exclude;

	if have_print
	then do;
		call ioa_ ("Log # ^i: ^a>^a: ^d entries;^[ Severity >= ^d^;^s^]^[ Calling ^a.^]", monitor_log_info.id,
		     monitor_log_info.log_dir, monitor_log_info.log_entryname, monitor_log_info.last_count,
		     monitor_log_info.filter_severity, monitor_log_info.severity, monitor_log_info.call,
		     requote_string_ (rtrim (monitor_log_info.command_to_call)));
		if monitor_log_info.matches
		then call ioa_ ("^2xmatches:^(^5x""^a""^)", lm_match_array);
		if monitor_log_info.excludes
		then call ioa_ ("^2xexcludes:^(^5x""^a""^)", lm_exclude_array);
	     end;

	if have_call
	then do;
		monitor_log_info.call = (command ^= "");
		monitor_log_info.command_to_call = rtrim (command);
	     end;

	if have_severity
	then do;
		monitor_log_info.filter_severity = "1"b;
		monitor_log_info.severity = severity;
	     end;

	if have_no_severity
	then monitor_log_info.filter_severity = "0"b;

	if have_off
	then
remove_log:
	     begin options (non_quick);
		saved_ips_mask = ""b;

		call term_$single_refname (monitor_log_info.special_refname, (0));
		on any_other call cease_monitoring_immediately;

		monitor_log_info.log_entryname = "";	/* signal to monitor_log_util_$wakeup_handler that entry is defunct */
		call hcs_$set_ips_mask (""b, saved_ips_mask);
		on fixedoverflow
		     begin;
			monitor_log_invocations_.change_pclock = 0;
			go to SET_PCLOCK;
		     end;
		monitor_log_invocations_.change_pclock = monitor_log_invocations_.change_pclock + 1;
SET_PCLOCK:
		if monitor_log_info.backp ^= null ()
		then do;
			monitor_log_info.backp -> monitor_log_info.forwardp = monitor_log_info.forwardp;
						/* unlace */
		     end;
		else do;
			monitor_log_invocations_.firstp = monitor_log_info.forwardp;
						/* if backp was null, WE were first */
		     end;
		if monitor_log_info.forwardp ^= null
		then do;
			monitor_log_info.forwardp -> monitor_log_info.backp = monitor_log_info.backp;
		     end;
		else do;
			monitor_log_invocations_.lastp = monitor_log_info.backp;
						/* if forwardp is null WE are last */
		     end;
		free monitor_log_info;
		if monitor_log_invocations_.lastp = null () & monitor_log_invocations_.firstp = null ()
		then do;
			call timer_manager_$reset_alarm_call (monitor_log_util_$wakeup_handler);
			monitor_log_invocations_.id_pclock = 0;
						/* no more logs, we can reset */
			monitor_log_invocations_.active = "0"b;
		     end;

		call hcs_$reset_ips_mask (saved_ips_mask, saved_ips_mask);
		revert any_other;
	     end remove_log;
     end process_a_log;



process_match_exclude:
     procedure;

	declare (i, cm, ce)		 fixed bin;

	if (have_match | have_exclude)
	then do;
		if em.matches > 0
		then do;
			if monitor_log_info.matches
			then free lm_match_array;
			monitor_log_info.n_matches = em.matches;
			allocate lm_match_array;
			monitor_log_info.matches = "1"b;
		     end;
		if em.excludes > 0
		then do;
			if monitor_log_info.excludes
			then free lm_exclude_array;
			monitor_log_info.n_excludes = em.excludes;
			allocate lm_exclude_array;
			monitor_log_info.excludes = "1"b;
		     end;
		cm, ce = 0;
		do i = 1 to em.current;
		     if em.entries (i).match
		     then do;
			     cm = cm + 1;
			     lm_match_array (cm) = em.entries.string (i);
			end;
		     else do;
			     ce = ce + 1;
			     lm_exclude_array (ce) = em.entries.string (i);
			end;
		end;
		call release_temp_segment_ (ME, emtp, code);
		emtp = null ();
	     end;
	if remove_exclude & monitor_log_info.excludes
	then do;
		monitor_log_info.excludes = ""b;
		free lm_exclude_array;
	     end;
	if remove_match & monitor_log_info.matches
	then do;
		monitor_log_info.matches = ""b;
		free lm_match_array;
	     end;

     end process_match_exclude;



find_log:
     procedure (path_switch, code);

/*
If the user specified a pathname we must decide if it is the same log
as one we have. To do this we cannot just try to initiate, because a switch
of segments might have happened. So if a path (as opposed to an entryname)
has been given, we must run check_log_switch over each log so that the
errors from refname$$initiate will be useful. We use the refname instead
of a null refname to avoid the need to be always adding and removing spurious
null refnames.
*/

	declare path_switch		 bit (1);
	declare code		 fixed bin (35);
	declare got_it		 bit (1);
	declare the_logp		 pointer;
	declare numbered		 bit (1);
	declare number		 fixed bin;
	declare a_number		 fixed bin;

	numbered = ""b;
	go to common;

find_numbered_log:
     entry (a_number, code);
	number = a_number;
	numbered = "1"b;

common:
	got_it = ""b;
	code = 0;
	the_logp = null;
	do mlip = monitor_log_invocations_.firstp repeat (monitor_log_info.forwardp) while (^got_it & mlip ^= null ());
	     if /* tree */ numbered
	     then if monitor_log_info.id = number
		then got_it = "1"b;
		else ;
	     else if path_switch
		then if check_refname (log_d, log_e)
		     then got_it = "1"b;
		     else ;
		else if monitor_log_info.log_entryname = log_e
		     then got_it = "1"b;

	     if got_it
	     then the_logp = mlip;			/* save it */
	end;
	if ^got_it
	then code = error_table_$noentry;
	mlip = the_logp;
	return;					/* mlip will be correct */
     end find_log;



get_next_argument:
     procedure;

	current_argument = current_argument + 1;
	call cu_$arg_ptr (current_argument, ap, al, code);
	if code ^= 0
	then do;
		call com_err_ (code, ME, "Looking for argument # ^d.", current_argument);
		goto RETURN;
	     end;
	return;
     end;
RETURN:
	if emtp ^= null ()
	then call release_temp_segment_ (ME, emtp, code);
	return;



cease_monitoring_immediately:
     procedure;

	call timer_manager_$reset_alarm_call (monitor_log_util_$wakeup_handler);
	monitor_log_invocations_.firstp, monitor_log_invocations_.lastp = null ();
	monitor_log_invocations_.active = "0"b;
	if saved_ips_mask ^= ""b
	then call hcs_$reset_ips_mask (saved_ips_mask, saved_ips_mask);
	call com_err_ (0, ME, "Internal inconsistency detected. All monitors removed.");

	go to RETURN;

     end cease_monitoring_immediately;


new_log:
     procedure options (non_quick);			/* it sets a handler */

	mlip = null ();
	on cleanup
	     begin;
		if mlip ^= null ()
		then free monitor_log_info;
	     end;
	saved_ips_mask = ""b;

	allocate monitor_log_info;
	monitor_log_info.sentinel = monitor_log_sentinel_v1;
	monitor_log_info.log_dir = log_d;
	monitor_log_info.log_entryname = log_e;
	monitor_log_info.exclude_p, monitor_log_info.match_p = null ();
	monitor_log_info.special_refname = unique_chars_ (""b);
	call monitor_log_util_$initiate_log (mlip, code);
	if monitor_log_info.logp = null ()
	then do;
		free monitor_log_info;
		call com_err_ (code, ME, "^a>^a", log_d, log_e);
		goto RETURN;
	     end;

	monitor_log_invocations_.id_pclock = monitor_log_invocations_.id_pclock + 1;
	monitor_log_info.id = monitor_log_invocations_.id_pclock;
	monitor_log_info.call = have_call;
	if have_call
	then monitor_log_info.command_to_call = command;
	else monitor_log_info.command_to_call = "";
	call process_match_exclude;			/* this is complex */
	monitor_log_info.last_count = monitor_log_info.logp -> sys_log_file.count;
	on any_other
	     begin;
		if saved_ips_mask = ""b
		then call continue_to_signal_ (0);
		else do;
			call cease_monitoring_immediately;
			call hcs_$reset_ips_mask (saved_ips_mask, ""b);
			call continue_to_signal_ (0);
		     end;
	     end;

	call hcs_$set_ips_mask (""b, saved_ips_mask);
	on fixedoverflow
	     begin;
		monitor_log_invocations_.change_pclock = 0;
		go to SET_PCLOCK;
	     end;
	monitor_log_invocations_.change_pclock = monitor_log_invocations_.change_pclock + 1;

SET_PCLOCK:
	revert fixedoverflow;
	monitor_log_info.forwardp = null ();
	monitor_log_info.backp = monitor_log_invocations_.lastp;
	if monitor_log_invocations_.lastp ^= null ()
	then /* first entry */
	     monitor_log_invocations_.lastp -> monitor_log_info.forwardp = mlip;
	else monitor_log_invocations_.firstp, monitor_log_invocations_.lastp = mlip;
	monitor_log_invocations_.lastp = mlip;
	call hcs_$reset_ips_mask (saved_ips_mask, saved_ips_mask);
	revert any_other;
	if ^monitor_log_invocations_.active
	then do;
		call timer_manager_$alarm_call (monitor_log_invocations_.interval, "11"b,
		     monitor_log_util_$wakeup_handler);
		monitor_log_invocations_.active = "1"b;
	     end;
     end new_log;

check_refname:
     procedure (dir, entryname) returns (bit (1) aligned);
	declare (dir, entryname)	 character (*);
	declare cls_result		 bit (2) aligned;
	declare temp_log_ptr	 pointer;
	declare code		 fixed bin (35);

	call monitor_log_util_$initiate_path (dir, entryname, monitor_log_info.special_refname, temp_log_ptr, code);
	if code = 0
	then return ("0"b);				/* this is impossible. It would imply that the refname had gone away. */

	else if code = error_table_$segknown		/* this is the right log */
	then return ("1"b);
	else if code = error_table_$namedup		/* refname on another seg, check switch justincase */
	then do;
		if monitor_log_util_$check_log_switch (mlip) = LOG_SWITCHED
						/* well, perhaps it is the correct log */
		then if temp_log_ptr = monitor_log_info.logp
		     then return ("1"b);		/* same thing */
		     else return ("0"b);
		else return ("0"b);
	     end;
	else return ("0"b);

     end check_refname;
     end monitor_log;
