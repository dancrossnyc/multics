/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


file_monitor_: proc;

	return;					/* not a legal entry point */


/* FILE_MONITOR_ -- handles interface with ANSI tape DIM. Opens and closes files
   on the tape as required.
   0) Created 12/5/74 by Janice B. Phillipps
   1) Revised 7/10/75 by J.Phillipps for new IO Daemon.
   2) Modified 1/31/78 by J. C. Whitmore for new printer features and prtdim/spooldim merge.
*/




%include spooling_info;

dcl  terminal_sw fixed bin,				/* switch set when tape will be taken down */
     cnst fixed bin init (1),
     a_fnbr fixed bin,
     fnbr fixed bin,
     tm_sw fixed bin;				/* parameter for terminal_sw */

dcl  command_question condition;
dcl  attach_description char (256) varying;
dcl  comment_string char (80) var;			/* comment field for the attach description */

dcl  ctr fixed bin init (1);

dcl  spooling_question_handler_ entry (ptr, fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  iox_$control entry (ptr, char (*), ptr, fixed bin (35));
dcl  iox_$attach_ioname entry (char (*), ptr, char (*), fixed bin (35));
dcl  iox_$attach_iocb entry (ptr, char (*), fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));

dcl  spool_static_$debug fixed bin ext;

dcl  error_table_$dev_nt_assnd fixed bin (35) ext;
dcl  error_table_$fatal_error fixed bin (35) ext;

dcl  a_sip ptr,
     number pic "zzzzz9",
     line_length pic "zzzzz9",
     vols char (128) aligned varying,
     a_vols char (*),
    (i, ii, j, k) fixed bin,				/* indicies */
     code fixed bin (35),
     scode fixed bin (35);

dcl (verify, addr, null, fixed, substr) builtin;



attach:	entry (a_sip, a_vols, a_fnbr, code);

	sip = a_sip;				/* local ptr */
	fnbr = a_fnbr;
	vols = a_vols;
	code = 0;
	i, ii, j, k = 0;

	if spooling_info.version ^= spooling_info_version_4 then do;
	     code = error_table_$fatal_error;
	     return;
	end;

/* if tape_ansi_ asks for something */

	on command_question call spooling_question_handler_ (sip, scode);

	if spooling_info.fst_call then do;		/* 1st time thru set up vol list */
	     spooling_info.filenumber = 0;		/* initialize */
	     spooling_info.filesetid = spooling_info.volids (1); /* establish the file set identifier */
	     spooling_info.fst_call = "0"b;		/* reset */
	end;

	if spooling_info.filesetid = "" then do;
	     code = error_table_$dev_nt_assnd;
	     return;
	end;

	if spooling_info.nvols > 1 then do;		/* pass tape_ansi_ all mbrs of fileset */
	     vols = "";
	     do i = 2 to spooling_info.nvols;
		vols = vols || " " || spooling_info.volids (i);
	     end;
	     vols = vols || " " || a_vols;
	end;

	if fnbr > 0 then				/* was the file number given? */
	     spooling_info.filenumber = fnbr;
	else spooling_info.filenumber = spooling_info.filenumber + 1; /* otherwise use the next file in sequence */

	number = fixed (spooling_info.filenumber);	/* convert file index to character string */
	i = verify (number, " ");			/* mark first non-blank */
	spooling_info.static_number = substr (number, i);

	line_length = fixed (spooling_info.phys_line_length) + 5; /* convert to character string */
	j = verify (line_length, " ");		/* mark first non-blank */

	comment_string = "";			/* clear the comment field */
	if ^spooling_info.vol_mount then		/* when mounting the volume, give comment */
	     if spooling_info.comment ^= "" then
		comment_string = " -comment " || rtrim (spooling_info.comment);

	if spooling_info.flgs.io_sw then do;		/* setup for write */
	     attach_description = "tape_ansi_ " || spooling_info.filesetid || " " || vols || comment_string
		|| " -create -name FILE" || substr (number, i)
		|| " -number " || substr (number, i)
		|| " -record " || substr (line_length, j)
		|| " -block "|| spooling_info.block_lnth
		|| " -density " || spooling_info.density
		|| " -format db -retain all -force -mode ascii";
	end;
	else do;					/* setup to read the tape */
	     attach_description = "tape_ansi_ " || spooling_info.filesetid || " " || vols || comment_string
		|| " -number " || substr (number, i)
		|| " -retain all -mode ascii";
	end;

	if spool_static_$debug = 1 then
	     call ioa_ ("file_monitor_: attach description is^/^a", attach_description);

	call attach_and_open (scode);			/* internal proc to do the attachment */
	if scode = 0 then
	     spooling_info.flgs.vol_mount = "1"b;	/* volume up now */
	code = scode;

	return;


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
detach:	entry (a_sip, tm_sw, code);

	sip = a_sip;
	terminal_sw = tm_sw;			/* = 1 if wont count file in file count */
	code = 0;
	scode = 0;

	on command_question call spooling_question_handler_ (sip, scode);

	if terminal_sw = 1 then
	     call iox_$control (spooling_info.iocbp, "retain_none", addr (cnst), code);

	call close_and_detach (scode);
	if scode = 0 & terminal_sw = 1 then do;
	     spooling_info.flgs.vol_mount = "0"b;	/* volume no longer mounted */
	     spooling_info.filesetid = "";
	end;
	code = scode;

	return;


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
cleanup:	entry (a_sip, a_vols, code);

	sip = a_sip;
	vols = a_vols;
	scode, code = 0;

	if spooling_info.flgs.vol_mount then do;

	     call ioa_ ("^/Taking tape volume down.^/");

	     attach_description = "tape_ansi_ " || spooling_info.filesetid
		|| " -retain none -number 1";

	     if spool_static_$debug = 1 then
		call ioa_ ("file_monitor_$cleanup: attach desc: ^a", attach_description);

/* attach/detach sequence here required by ansi dim to take down volume */

	     call attach_and_open (scode);
	     call iox_$control (spooling_info.iocbp, "retain_none", addr (cnst), code); /* in case already attached */
	     call close_and_detach (scode);		/* dont increment file count */
	     if scode = 0 then do;			/* if it was good, mark it as done */
		spooling_info.flgs.vol_mount = "0"b;	/* volume no longer up */
		spooling_info.filesetid = "";
	     end;
	end;
	code = scode;
	return;



/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
attach_and_open: proc (rcode);			/* internal proc to do attach thru tape dim */

dcl  rcode fixed bin (35);
dcl  scode fixed bin (35);
dcl  open_mode fixed bin;

	     if spooling_info.iocbp = null then do;
		call iox_$attach_ioname ((spooling_info.switch_name), spooling_info.iocbp, (attach_description), rcode);
	     end;
	     else call iox_$attach_iocb (spooling_info.iocbp, (attach_description), rcode);

	     if spooling_info.flgs.io_sw then open_mode = 5; /* sequential output not extending */
	     else open_mode = 4;			/* sequential input */

	     call iox_$open (spooling_info.iocbp, open_mode, "0"b, scode); /* open I/O switch */

	     if scode = 0 then rcode = 0;		/* if open worked, all is well */
	     else if rcode = 0 then rcode = scode;	/* if attach worked, give open error */

	     return;

	end attach_and_open;


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
close_and_detach: proc (rcode);

/* close and detach the current io switch */

dcl  rcode fixed bin (35);

	     call iox_$close (spooling_info.iocbp, rcode);
	     call iox_$detach_iocb (spooling_info.iocbp, rcode);

	     return;

	end close_and_detach;

     end file_monitor_;
