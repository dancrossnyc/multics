/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


spooling_dim_write_: proc (a_sdbp, wkspptr, offset, nelem, nelemt, status);

/* SPOOLING_DIM_WRITE_ -- called each time a dprint request is to be spooled out onto tape.
   The spooling tape is written via the tape_ansi_ IO Module.
   0)  Created 12/4/74 by Janice B. Phillipps
   1)  Updated for new prtdim_ and new IO Driver design 7/21/75 by J.Phillipps.
   2) Modified 1/31/78 by J. C. Whitmore for prtdim-spoolingdim merge.
*/

%include prt_sdb;
%include prt_info;
%include spooling_info;
%include prt_conv_info;
%include status;

dcl (addr, substr, null) builtin;

dcl (command_question, quit) condition;

dcl  a_sdbp ptr,
     bp ptr,					/* ptr to buffer of converted output (from prt_conv_) */
     buf_len21 fixed bin (21),
     char_cnt fixed bin (18),				/* count of characters in output */
     code fixed bin (35),
     inp ptr,					/* ptr to of input for ptr_conv. Bit offset keeps track of pos */
     iocbp ptr,					/* ptr to ansi dim control block */
     lnth fixed bin (18),				/* length of input from output_request */
     nelem fixed bin,
     nelemt fixed bin,
     offset fixed bin,
     offst fixed bin,
     statp ptr,					/* ptr to status string */
     status bit (72) aligned,
     wkspptr ptr;

dcl  wksp char (1) based unal;			/* used for getting pointer to input string */

dcl  spool_static_$norestart fixed bin ext;		/* ext switch set when spooling is to terminate */
dcl  spool_static_$file_attch fixed bin ext;
dcl  spool_static_$debug fixed bin ext;

dcl  error_table_$tape_error fixed bin (35) ext;
dcl  error_table_$fatal_error fixed bin (35) ext;
dcl  error_table_$no_operation fixed bin (35) ext;
dcl  error_table_$eov_on_write fixed bin (35) ext;
dcl  error_table_$not_open fixed bin (35) ext;
dcl  error_table_$dev_nt_assnd fixed bin (35) ext;
dcl  error_table_$device_end fixed bin (35) ext;


dcl  com_err_ entry options (variable);
dcl  ioa_ entry options (variable);
dcl  iox_$write_record entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  prt_conv_ entry (ptr, fixed bin (18), ptr, fixed bin (18), ptr);
dcl  spooling_dim_order_ entry (ptr, char (*) aligned, ptr, bit (72) aligned);
dcl  spooling_question_handler_ entry (ptr, fixed bin (35));




/* - - - - - - - - - - - - - - - - - - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  - - - */
	sdb_ptr = a_sdbp;				/* ptr to stream data block */
	statp = addr (status);			/* ptr to overlay of ios status string */
	sip = addr (sdb.spool_info);			/* ptr to spooling control structure */
	pcip = addr (sdb.conv_info);			/* ptr to spooling conversion structure */
	status = (72)"0"b;
	code = 0;

	if spooling_info.version ^= spooling_info_version_4 then do;
	     stat.fbpart = error_table_$fatal_error;
	     return;
	end;

	on command_question begin;			/* tape_ansi_ asks a lot of questions */
	     call spooling_question_handler_ (sip, code);
	     if code ^= 0 then do;
		spool_static_$norestart = 1;		/* this will stop everything */
		if spool_static_$file_attch = 1 then
		     call ioa_ ("spooling_dim_write_: Last print request may not be fully processed.");
		stat.fbpart = error_table_$device_end;
		go to finish;
	     end;
	end;

	lnth = nelem;				/* length of a line of current request  */
	char_cnt = 0;				/* length of spooled line returned from prt_conv_ */
	offst = offset;				/* offset from input ptr */
	inp = addr (substr (wkspptr -> wksp, offset + 1, 1)); /* ptr to line to write */
	nelemt = 0;				/* initial number of elements returned is zero */

	iocbp = sip -> spooling_info.iocbp;		/* io control block ptr */
	if iocbp = null | spooling_info.vol_mount = "0"b then do;
	     stat.fbpart = error_table_$dev_nt_assnd;
	     return;
	end;
	bp = sdb_ptr -> sdb.buffer_ptr;		/* ptr to output buffer */

	if spool_static_$norestart = 1 then do;
	     stat.fbpart = error_table_$device_end;
	     return;
	end;

/* Now code convert user's dprint request line by line */

	do while (lnth > 0);			/* loop until all elements transmitted */
	     call prt_conv_ (inp, lnth, (bp), char_cnt, pcip); /* do code conversion */
	     nelemt = nelem - lnth;			/* undate number of chars transmitted */
	     buf_len21 = char_cnt;

	     call iox_$write_record (iocbp, bp, buf_len21, code); /* call to put line out on tape */
	     if code ^= 0 then do;			/* process errors */
		if code = error_table_$no_operation then do; /* tape put up without ring */
		     spool_static_$norestart = 1;	/* thats all this time */
		     if spool_static_$debug = 1 then
			call ioa_ ("spooling_dim_write_: tape mounted without ring and trying to write.");
		     stat.fbpart = code;
		end;
		else if code = error_table_$tape_error then do; /* unrecoverable error */
		     call spooling_dim_order_ (sdb_ptr, "demount_tape", null (), status);
		     spool_static_$norestart = 1;
		     stat.fbpart = error_table_$dev_nt_assnd;
		end;
		else do;
		     stat.fbpart = code;
		     if code = error_table_$not_open then
			call ioa_ ("Trying to write when file not open.");
		     else if code = error_table_$eov_on_write then /* hit end of tape */
			call ioa_ ("Hit end of tape mark while writing.");
		     else do;
			call com_err_ (code, "spooling_dim_write_", "error writing file: detaching current file.");
			call spooling_dim_order_ (sdb_ptr, "file_close", null (), status); /* close and detach file */
		     end;
		end;
		go to finish;
	     end;
	end;

finish:	sdb.chars_printed = sdb.chars_printed + nelem - lnth; /* bump the total count */

	return;


     end spooling_dim_write_;
