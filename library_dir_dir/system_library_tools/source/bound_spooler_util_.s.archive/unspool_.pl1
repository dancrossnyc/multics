/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


unspool_: proc (a_sip, code);


/* UNSPOOL_ -- called each time a file is to be taken from spooling tape and formatted
   for input to the Multics printer DIM -- be printed by a PRT300 or similar printer.
   0) Created 1/5/75  by Janice B. Phillipps  as part of the Multics spooling facility.
   1) Updated by J.Phillipps 7/75 for new printer dim
   2 Modified by J. C. Whitmore 1/78 for new printer features and prtdim/spooldim merge
*/

%include spooling_info;
%include status;




dcl  command_question condition;
dcl  slew_strng char (nelem) based (slewp);

dcl  strng char (plnth + 1) based;

dcl 1 buffer aligned,				/* buffer for reading in lines */
    2 cc char (1) unaligned,
    2 input_record char (165) unaligned,
    2 output_record char (165) aligned;

dcl (addr, substr, null) builtin;

dcl  a_sip ptr,
     bbp ptr,
     buf_len21 fixed bin (21),
     code fixed bin (35),
     init_flg bit (1) unaligned,
     inp ptr,
     iocbp ptr,					/* ptr to ansi dim control block */
     lnth fixed bin,
     nelem fixed bin,
     nelemt fixed bin,
     order char (18) varying,
     plnth fixed bin,
     slewp ptr,
     statp ptr,					/* ptr to status string */
     status bit (72) aligned,
     term_flg bit (1) unaligned;

dcl  spool_static_$debug ext;
dcl  error_table_$end_of_info fixed bin (35) ext;
dcl  error_table_$fatal_error fixed bin (35) ext;


dcl  com_err_ entry options (variable);
dcl  ioa_ entry options (variable);
dcl  ios_$write entry (char (*) aligned, ptr, fixed bin, fixed bin, fixed bin, bit (72) aligned);
dcl  ios_$order entry (char (*) aligned, char (*) aligned, ptr, bit (72) aligned);
dcl  iox_$read_record entry (ptr, ptr, fixed bin (21), fixed bin, fixed bin (35));
dcl  spooling_question_handler_ entry (ptr, fixed bin (35));

dcl 1 slew_table aligned internal static,
    2 space_one_line char (1) aligned,
    2 space_two_lines char (2) unaligned,
    2 space_three_lines char (3) unaligned,
    2 form_feed char (1) unaligned,
    2 carriage_return char (1) unaligned;


dcl  first bit (1) internal static init ("1"b);
dcl  CR char (1) aligned internal static init ("");
dcl  NL char (1) aligned internal static init ("
");
dcl  PR char (14) aligned internal static init ("printer_output");
dcl  FF char (1) aligned internal static init ("");

	sip = a_sip;
	statp = addr (status);
	status = (72)"0"b;
	code = 0;

	if spooling_info.version ^= spooling_info_version_4 then do;
	     code = error_table_$fatal_error;
	     return;
	end;

	on command_question call spooling_question_handler_ (sip, code);

	lnth = 0;					/* length of each lrec read from spooling tape */
	buf_len21 = sip -> spooling_info.phys_line_length + 1; /* should be 137 */
	nelemt = 0;				/* initial number of elements is zero */
	nelem = 0;				/* initialize */

	if first = "1"b then do;
	     slew_table.space_one_line = NL;
	     slew_table.space_two_lines = NL || NL;
	     slew_table.space_three_lines = NL || NL || NL;
	     slew_table.carriage_return = CR;
	     slew_table.form_feed = FF;
	     first = "0"b;
	end;

	iocbp = sip -> spooling_info.iocbp;		/* pick up iocb ptr for reading records from tape */
	bbp = addr (buffer);			/* pts to place to read in records from tape */


/* read from the file on the tape, one line at a time, and convert the carriage control characters for
   correct printing on the printer */

	init_flg = "1"b;
	term_flg = "0"b;
	inp = addr (buffer.output_record);

read:	buffer.cc = "";
	buffer.input_record = "";

	call iox_$read_record (iocbp, bbp, buf_len21, lnth, code); /* read a record from spooling tape */
	if code = 0 then do;
	     call convert (code);			/* if read ok, do code conversion and write line */
	     if code ^= 0 then return;		/* OOPS! */
	     go to read;
	end;

	if code = error_table_$end_of_info then do;	/* end of this spooled file */
	     code = 0;
	     term_flg = "1"b;			/* set up to terminate processing this file */
	     call convert (code);
	end;
	else do;
	     if spool_static_$debug = 1 then call ioa_ ("unspool: error reading record -- ^a", bbp -> strng);
	     code = error_table_$fatal_error;		/* thats all for this file */
	end;

	return;

convert:	proc (ec);

dcl  ec fixed bin (35);

/* little procedure for mapping ASA printer carriage control characters to "pre-slew" characters  */
/* code converts one logical record (printed line) per call */

	     order = "";				/* initialize */
	     if term_flg = "0"b then do;

		if buffer.cc = " " then do;		/* new line */
		     slewp = addr (slew_table.space_one_line);
		     nelem = 1;
		end;
		else if buffer.cc = "0" then do;	/* double space */
		     slewp = addr (slew_table.space_two_lines);
		     nelem = 2;
		end;
		else if buffer.cc = "-" then do;	/* triple space */
		     slewp = addr (slew_table.space_three_lines);
		     nelem = 3;
		end;
		else if buffer.cc = "1" then do;	/* form feed */
		     slewp = addr (slew_table.form_feed);
		     nelem = 1;
		end;
		else if buffer.cc = "+" then do;	/* carriage return */
		     slewp = addr (slew_table.carriage_return);
		     nelem = 1;
		end;
		else if buffer.cc = "7" then do;	/* space to top inside page */
		     order = "inside_page";
		     slewp = addr (slew_table.carriage_return);
		     nelem = 1;
		end;
		else if buffer.cc = "8" then do;	/*  space to top outside page  */
		     order = "outside_page";
		     slewp = addr (slew_table.carriage_return);
		     nelem = 1;
		end;
		if init_flg = "1"b then do;		/* 1st time thru just put out slew */
		     init_flg = "0"b;

		     if order ^= "" then
			call ios_$order (PR, (order), null (), status);

		     call ios_$write (PR, slewp, 0, nelem, nelemt, status);
		     if statp -> stat.fbpart ^= 0 then do;
			ec = statp -> stat.fbpart;
			call com_err_ (ec, "unspool_", "unspool_$convert: problem writing slew.");
		     end;
		     if lnth = 1 then buffer.output_record = ""; /* only slew one line */
		     else buffer.output_record = buffer.input_record;
		     plnth = lnth - 1;		/* save the length of the print line */
		     return;
		end;
	     end;
	     else do;				/* this is the last time around for this file */
		slewp = addr (slew_table.space_one_line);
		nelem = 1;
	     end;

/*	add the current slew char to the last print line and write */

	     buffer.output_record = substr (buffer.output_record, 1, plnth) || slew_strng;

	     call ios_$write (PR, inp, 0, plnth + nelem, nelemt, status);
	     if statp -> stat.fbpart ^= 0 then do;
		ec = statp -> stat.fbpart;
		call com_err_ (ec, "unspool_", "unspool_$convert: Writing: ^a", inp -> strng);
		return;
	     end;

	     plnth = lnth - 1;			/* save line length for next output */
	     buffer.output_record = buffer.input_record;	/* copy in the new line, then get the next slew */
	     if order ^= "" then
		call ios_$order (PR, (order), null (), status);

	     return;

	end convert;

     end unspool_;
