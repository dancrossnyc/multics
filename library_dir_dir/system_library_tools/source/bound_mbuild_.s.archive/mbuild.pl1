
/****^  HISTORY COMMENTS:
  1) change(2019-08-17,GDixon), approve(2019-10-23,MCR10069),
     audit(2020-01-20,Swenson), install(2020-01-20,MR12.6g-0035):
     Command to invoke the mbuild Subsystem.  For details, see:  MTB-1003
     mbuild Subsystem
  2) change(2020-01-25,GDixon), approve(2020-01-25,MCR10079),
     audit(2020-02-02,Swenson), install(2020-02-02,MR12.6g-0045):
      A) Add mbuild -scan_read control argument as default mode of operation.
      B) Change existing -scan control argument to omit build_script read.
  3) change(2020-02-10,GDixon), approve(2020-02-10,MCR10079),
     audit(2020-04-30,Swenson), install(2020-04-30,MR12.6g-0046):
      A) Change mbuild version number to mbuild__1.02
  4) change(2020-07-30,GDixon), approve(2021-02-22,MCR10086),
     audit(2021-03-17,Swenson), install(2021-03-17,MR12.6g-0051):
      A) Change mbuild version number to mbuild__1.03
  5) change(2021-02-22,GDixon), approve(2021-02-22,MCR10086),
     audit(2021-03-31,Swenson), install(2021-03-31,MR12.6g-0054):
      A) Change mbuild version number to mbuild_1.04
                                                   END HISTORY COMMENTS */

mbuild:
mb:	
     proc options(variable);

						/* Constant variables.			        */
  dcl  PROC char(6) int static options(constant) init("mbuild");
  dcl  VERSION char(12) internal static options(constant) init("mbuild_1.04 ");
  dcl  no_info_directory char(0) int static options(constant) init("");

  dcl  ioa_ entry() options(variable);
  dcl  iox_$user_input ptr ext static;			/* Subsystem accepts terminal input.		        */

						/* Supporting subroutines.			        */
  dcl  mbuild_$request entry options(variable);
  dcl  mbuild_data_$initialize_build_lists entry (ptr);
  dcl  mbuild_request_parms_ entry (ptr) returns(bit(1) aligned);
  dcl  mbuild_request_tables_$user_requests bit(36) aligned external;

						/* External subroutines.			        */
  dcl  com_err_ entry() options(variable);
  dcl  expand_pathname_ entry (char(*), char(*), char(*), fixed bin(35));
  dcl  pathname_ entry (char(*), char(*)) returns(char(168));
  dcl  translator_temp_$release_all_segments entry (ptr, fixed bin(35));

  dcl  error_table_$badopt fixed bin(35) ext static;

  dcl (addr, null) builtin;
%page;
/* ----------------------------------------------------------------------
    Structure to hold mbuild command arguments.
 * ---------------------------------------------------------------------- */

  dcl 1 CMD aligned,
      2 sciP ptr,
      2 request_lineP ptr,
      2 request_lineL fixed bin(21),
      2 info,
        3 prompt char(64) var,
        3 abbrev_profile char(168) unal,
        3 log_dir char(168) var,
        3 scan_read char(4),
      2 S aligned,
        3 (abbrevS,					/* T: Turn on abbrev processing within request lines.     */
           promptS,					/* T: Change mbuild's request line prompt string.	        */
	 request_loopS				/* T: Entry mbuild's listen, which prompts for requests.  */
	  ) bit(1) unal;
  dcl  request_line char (CMD.request_lineL) based (CMD.request_lineP);


/* ----------------------------------------------------------------------
    Initialize CMD control structure.
 * ---------------------------------------------------------------------- */

     CMD.sciP = null();
     CMD.request_lineP = null();
     CMD.request_lineL = 0;
     CMD.info = "";
     CMD.S = F;

     CMD.promptS = T;				/* Set default control arg values when invoking mbuild.   */
     CMD.request_loopS = T;
     CMD.scan_read = "scrd";

/* ----------------------------------------------------------------------
    Initialize most of the mbuild_data_ structure: build_data
     - This must be done very early, in case standalone invocation
       branches to the EXIT label.
        - build_data.ptrs elements are referenced at EXIT label 
          (by the SUBSYS_cleanup_handler call).
 * ---------------------------------------------------------------------- */

     build_data.info = "";
     build_data.version = mbuild_data_version_3;
     build_data.progress = F;
     build_data.ptrs = null();


/* ----------------------------------------------------------------------
    Process command arguments using an ssu_ standalone invocation.
    It will later be replaced by a standard subsystem invocation.
 * ---------------------------------------------------------------------- */

     isStandalone = T;
     on cleanup call standalone_cleanup_handler (isStandalone, CMD.sciP);
						/* On-unit to cleanup the standalone invocation.	        */

     call ssu_$standalone_invocation (CMD.sciP, PROC, VERSION, cu_$arg_list_ptr(), abort_to_EXIT, code);
     if code ^= 0 then goto EXIT;
     
     call arg_setup (CMD.sciP);			/* Process mbuild command arguments.		        */
     if args_remain() then
	call controlArgs (CMD);

     call standalone_cleanup_handler (isStandalone, CMD.sciP);
     revert cleanup;


/* ----------------------------------------------------------------------
    Create the subsystem invocation now.
 * ---------------------------------------------------------------------- */

     on cleanup call SUBSYS_cleanup_handler (addr(build_data));
						/* On-unit to cleanup the full ssu_ invocation.	        */

     call ssu_$create_invocation (PROC, VERSION, addr(build_data),
      	addr(mbuild_request_tables_$user_requests), no_info_directory, 
	build_data.sciP, code);
     if code ^= 0 then goto ERROR;


/* ----------------------------------------------------------------------
    Verify that all routines of mbuild have been compiled with latest
     version of the mbuild_data_ data structures.
 * ---------------------------------------------------------------------- */

     if ^mbuild_request_parms_(addr(build_data)) then goto EXIT;
     

/* ----------------------------------------------------------------------
    Finish initializing build_data structure.
     - Done after creating subsystem, so any errors can be reported thru ssu_.
 * ---------------------------------------------------------------------- */

     call mbuild_data_$initialize_build_lists (addr(build_data));


/* ----------------------------------------------------------------------
    Apply -control_args affecting ssu_ settings.
     -prompt
     -abbrev 
     -set_log_dir
     -request REQUEST_LINE
     -no_request_loop
 * ---------------------------------------------------------------------- */

     if  ^CMD.promptS  then 
	call ssu_$set_prompt_mode (build_data.sciP, DONT_PROMPT);
     else if CMD.prompt ^= "" then 
	call ssu_$set_prompt (build_data.sciP, CMD.prompt);

     if  CMD.abbrevS  then do;
	call mbuild_$request (build_data.sciP, "abbrev -on", F);
	if  CMD.abbrev_profile ^= ""  then  
	     call mbuild_$request (build_data.sciP, ".use ^a", F, CMD.abbrev_profile);
	end;					/* This method asks to create new profile, if not found   */

     build_data.log_directory = CMD.log_dir;

     if CMD.request_lineL > 0  &  CMD.request_lineP ^= null()  then do;
	call ssu_$execute_line (build_data.sciP, CMD.request_lineP, CMD.request_lineL, code);
	if code ^= 0 then
	     call ssu_$print_message (build_data.sciP, code, "Executing request line: ^a", 
	          request_line);
	end;
     
     if ^CMD.request_loopS then goto EXIT;


/* ----------------------------------------------------------------------
    Confirm installation directory to user.  Do env setup commands.
 * ---------------------------------------------------------------------- */

     if CMD.scan_read = "scrd" then do;
	call ioa_ ("^/Installation_directory: ^a^2/^- Scanning, with read of any build_script...^/", build_data.directory);
	call mbuild_$request (build_data.sciP, "scan", F);
	end;
     else if CMD.scan_read = "scan" then do;
	call ioa_ ("^/Installation_directory: ^a^2/^- Scanning...^/", build_data.directory);
	call mbuild_$request (build_data.sciP, "scan -no_query", F);
	end;
     else call ioa_ ("^/Installation_directory: ^a^/", build_data.directory);
     if CMD.scan_read ^= "scrd" then 
	call mbuild_$request (build_data.sciP, "read -description -banner -brief", F);

/* ----------------------------------------------------------------------
    Enter ssu_ request loop.
 * ---------------------------------------------------------------------- */

LISTEN:
     call ssu_$listen (build_data.sciP, iox_$user_input, code);
     if code ^= ssu_et_$subsystem_aborted then		/* ssu_$listen returns when user issue quit request, or   */
	goto ERROR;				/*  if a serious error is reported.		        */
     

/* ----------------------------------------------------------------------
    Normal exit from the subsystem.
 * ---------------------------------------------------------------------- */

EXIT:
     call standalone_cleanup_handler (isStandalone, CMD.sciP);
     call SUBSYS_cleanup_handler (addr(build_data));
     return;					/* Normal return point.			        */


ERROR:						/* Error exit from subsystem.			        */
     call com_err_ (code, PROC);			/*  - Report error entering/exiting ssu_ subsystem.       */
     goto EXIT;
%page;
/* ----------------------------------------------------------------------
    cleanup on-unit for subsystem invocation.
 * ---------------------------------------------------------------------- */

SUBSYS_cleanup_handler:
     proc (Abuild_dataP);

  dcl  Abuild_dataP ptr,
      1 bld aligned like build_data based (Abuild_dataP);

     if bld.areaP ^= null then			/* release area temp segments.		        */
	call translator_temp_$release_all_segments (bld.areaP, code);

     if bld.sciP ^= null then				/* if there is an ssu_ invocation		        */
	call ssu_$destroy_invocation (bld.sciP);
     
     end SUBSYS_cleanup_handler;

%page;
/* ----------------------------------------------------------------------
    Process mbuild control args passed to the ssu_ standalone invocation.
 * ---------------------------------------------------------------------- */

controlArgs:
     proc (aCMD);

  dcl 1 aCMD aligned like CMD;

  dcl  UNSET char(7) int static options(constant) init("(UNSET)");
  dcl  dirname char(168),
       entryname char(32);

     do while (args_remain());
	call ssu_$arg_ptr (aCMD.sciP, argI+1, argP, argL); /* Conditionally read next arg to command/af/request     */
					
	if isControlArg(arg) then do;

	     if       arg = "-ab"     | arg = "-abbrev"           then     aCMD.abbrevS = T;
	     else if  arg = "-pf"     | arg = "-profile"          then do; aCMD.abbrevS = T;
							       aCMD.abbrev_profile = UNSET;
							       end;
	     else if  arg = "-nab"    | arg = "-no_abbrev"        then     aCMD.abbrevS = F;

	     else if  arg = "-pmt"    | arg = "-prompt"           then do; CMD.prompt = UNSET;
							       CMD.promptS = T;
							       end;
               else if  arg = "-npmt"   | arg = "-no_prompt"        then do; CMD.prompt = "";
							       CMD.promptS = F;
							       end;

	     else if  arg = "-rq"     | arg = "-request"          then     aCMD.request_lineL = -1;
	     else if  arg = "-rql"    | arg = "-request_loop"     then     aCMD.request_loopS = T;
	     else if  arg = "-nrql"   | arg = "-no_request_loop"  then     aCMD.request_loopS = F;

               else if  arg = "-scrd"   | arg = "-scan_read"        then     CMD.scan_read = "scrd";
	     else if  arg = "-sc"     | arg = "-scan"             then     CMD.scan_read = "scan";
               else if  arg = "-nsc"    | arg = "-no_scan"          then     CMD.scan_read = "";

	     else if  arg = "-sld"    | arg = "-set_log_dir"      then     aCMD.log_dir = UNSET;


               else call ssu_$print_message (aCMD.sciP, error_table_$badopt, 
		     "Ignoring unsupported control arg: ^a", arg);
	     end;
	
	else if  aCMD.promptS & aCMD.prompt = UNSET  then
	     aCMD.prompt = arg;

	else if  aCMD.request_lineL = -1  then do;
	     aCMD.request_lineP = addr(arg);
	     aCMD.request_lineL = length(arg);
	     end;

	else if  aCMD.log_dir = UNSET  then do;
	     call expand_pathname_ (arg, dirname, entryname, code);
	     if  code ^= 0  then 
		call ssu_$print_message (aCMD.sciP, code, "-set_log_dir ^a", arg);
	     else aCMD.log_dir = pathname_ (dirname, entryname);
	     end;

	else if  aCMD.abbrevS & aCMD.abbrev_profile = UNSET  then
	     aCMD.abbrev_profile = arg;

	else do;					/* If arg not a -control_arg			        */
	     call ssu_$print_message (aCMD.sciP, error_table_$badopt, 
		"Ignoring unsupported operand: ^a", arg);
	     end;

	argI = argI + 1;				/* Record that we processed the arg just examined above.  */
	end;

     if  aCMD.request_lineL  = -1     then aCMD.request_lineL = 0;
     if  aCMD.abbrev_profile = UNSET  then aCMD.abbrev_profile = "";
     if  aCMD.log_dir        = UNSET  then aCMD.log_dir = "";     

     end controlArgs;
%page;
%include ssu_standalone_command_;
%include ssu_prompt_modes;
%page;
%include mbuild_Tlist_dcls_;
%page;
%include mbuild_data_;
     end mbuild;
