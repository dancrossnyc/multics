
/****^  HISTORY COMMENTS:
  1) change(2021-02-14,GDixon), approve(2021-02-22,MCR10086),
     audit(2021-03-17,Swenson), install(2021-03-17,MR12.6g-0051):
      - Starting from code for mbuild_info_checks_.pl1 as a template:
         - Added xref entrypoint.
                                                   END HISTORY COMMENTS */

mbuild_xref_:
     proc (AsciP, Abuild_dataP) returns (bit(1) aligned);

  dcl  PROC char(12) int static options(constant) init("mbuild_xref_");

     return (check_parms (mbuild_data_version_3));
/* -------------------- */

  dcl  check_star_name_$entry entry (char(*), fixed bin(35));
  dcl  ioa_$rsnnl entry() options(variable);
  dcl  pathname_$component entry (char(*), char(*), char(*)) returns(char(194));
  dcl  ssu_$arg_list_ptr entry (ptr, ptr);

  dcl  mbuild_$banner entry (ptr, char(*), bit(1) aligned) options(variable);
  dcl  mbuild_$general_request entry (ptr, char(*), bit(1) aligned, ptr, fixed bin);

  dcl  mbuild_Tlist_$empty_request_list entry (ptr);
  dcl  mbuild_Tlist_$request_Seg_match_star entry (ptr, char(*), fixed bin(35)) returns(ptr);

  dcl  mbuild_data_$exists_Seg entry (ptr, ptr) returns(bit(1) aligned);
  dcl  mbuild_data_$get_build_progress entry (ptr) returns(bit(*) aligned);

  dcl  mbuild_library_$compare entry (char(*), char(*) var, fixed bin(35)) returns(bit(1) aligned);
  dcl  mbuild_library_$library_directories entry (char(*) var, (*) char(200) var, fixed bin, fixed bin(35));

  dcl (addr, length, maxlength, null, string) builtin;

  dcl  cleanup condition;

  dcl (error_table_$bigarg,
       error_table_$nomatch,
       mbuild_et_$inexact_library,
       mbuild_et_$source_missing
        )fixed bin(35) ext static;

%page;
/* ======================================================================
   REQUEST:  xref {-pcref_control_args}
		Invoke peruse_crossref (pcref) command on all Include
		original-content segments in the install directory.
           
             xref SEG_NAME {-pcref_control_args}
                    Invoke peruse_crossref (pcref) on just the given Include
                    segment(s) in the install directory.  The .incl.* 
		suffix must included.  The star convention is permitted.  

   Reports all programs which include the given include files.
/* ========================================================================================== */

xref_request:
     entry(AsciP, Abuild_dataP);

  dcl 1 C aligned,
      2 sciP ptr,
      2 seg_name char(32) unal,
      2 seg_starness fixed bin(35),
      2 first_control_arg fixed bin;

     C.sciP = AsciP;
     C.seg_name = "";
     C.seg_starness = STAR_TYPE_MATCHES_EVERYTHING;
     C.first_control_arg = 1;


     call arg_setup (AsciP);

     if args_remain() then				/* User asks for a options via -Control_args	        */
	call controlArgs(C);

  dcl  arg_listP ptr;				/* Pointer to this request's argument list.	        */
     call ssu_$arg_list_ptr (C.sciP, arg_listP);


/* ----------------------------------------------------------------------
    - Ensure install directory has been scanned.
   ---------------------------------------------------------------------- */

     string(bld_progress) = mbuild_data_$get_build_progress (addr(bld));
     if ^bld_progress.scannedS then do;
	call ssu_$abort_line (AsciP, 0,
	     "Please obtain data for xref task with request:  scan  or  read");
	end;					/*  Need data from scan to perform xref tasks.	        */
     

/* ----------------------------------------------------------------------
    - List original content Info Segs from thread:  scan_Tb 
   ---------------------------------------------------------------------- */

  dcl 1 req aligned like request;			/* Provide storage for request structure.	        */
     requestP = addr(req);				/*  - per-request threaded lists are valid only during    */
     request.info = "";				/*    execution of that one request.  At end of request,  */
     request.struct = "req";				/*    the list must be emptied.		        */
     request.name = ssu_$get_request_name(C.sciP);
     call Tlist_initialize (addr(request.request_Tb), addr(request));
						/* request_Tb is a list for Seg structures.	        */

     on cleanup call xref_janitor(addr(request));

     do SegP = Tlist_first_item (addr(bld.scan_Tb)) 
        repeat Tlist_next_item  (addr(Seg.scan_Td)) while (SegP ^= null() );
	if  Seg.type = "Include"  &  Seg.operation ^= "DELETE"  then
	     call Tlist_add_to_tail (addr(request.request_Tb), addr(Seg), addr(Seg.request_Td));
	end;

     if  Tlist_is_empty (addr(request.request_Tb))  then 
	return;					/* Nothing to verify!			        */


/* ----------------------------------------------------------------------
    - Do requested vis operations.
   ---------------------------------------------------------------------- */

  dcl  segs_done fixed bin init(0);

     SegP = mbuild_Tlist_$request_Seg_match_star (addr(request), C.seg_name, C.seg_starness);
						/* This call removes Seg and all prior items from the     */
						/*  request list.				        */
     do while ( SegP ^= null() );			/* When this loop ends, entire request list is empty      */
	call do_xref (SegP, C);
	SegP = mbuild_Tlist_$request_Seg_match_star (addr(request), C.seg_name, C.seg_starness);
	end;

     if segs_done = 0 then
	call ssu_$print_message (C.sciP, error_table_$nomatch, 
	     "No Include segments were processed.");
     return;

xref_janitor:					/* Clean up request list if subsystem request is aborted. */
     proc (ArequestP);

  dcl  ArequestP ptr;
  dcl 1 Arequest aligned like request based(ArequestP);

     call mbuild_Tlist_$empty_request_list (ArequestP);

     end xref_janitor;
%page;
/* ----------------------------------------------------------------------
    - Compare one source file.
   ---------------------------------------------------------------------- */
do_xref:
     proc (aSegP, c);

  dcl  aSegP ptr,
      1 aSeg aligned like Seg based (aSegP);
  dcl 1 c aligned like C;
     
     segs_done = segs_done + 1;


/* ----------------------------------------------------------------------
    - Make sure source file exists in install directory.
   ---------------------------------------------------------------------- */

     if ^mbuild_data_$exists_Seg (addr(bld), aSegP) then do;
						/* File represented by Seg(Include) not in build dir.     */
	call mbuild_$banner (c.sciP, "^2/ " || Seg.name, T);
	call ssu_$print_message (c.sciP, mbuild_et_$source_missing, 
	     "Missing include file corresponding to ^a: ^a", aSeg.type, aSeg.name);
	return;
	end;

/* ----------------------------------------------------------------------
    - Look for crossref items referring to Include file.
   ---------------------------------------------------------------------- */

  dcl  request_line char(500);

     call mbuild_$banner (c.sciP, "^2/ " || Seg.name, T);
     call ioa_$rsnnl ("peruse_crossref ^a", request_line, 0, aSeg.name);
     call ssu_$arg_list_ptr (c.sciP, arg_listP);
	
     call mbuild_$general_request (c.sciP, request_line, T, arg_listP, c.first_control_arg);

     end do_xref;
%page;
/* ------------------------------------------------------------
 * Process print -control_arg arguments.
 * ------------------------------------------------------------ */

controlArgs:
     proc (c);

  dcl 1 c aligned like C;				/*  control arg specification data                   (in) */

     argI = 0;

     do while (args_remain());
	call ssu_$arg_ptr (c.sciP, argI+1, argP, argL);	/* Conditionally read next arg to command/af/request      */
					
	if isControlArg(arg) then do;

	     c.first_control_arg = argI + 1;		/* Found first vis control argument.		        */
	     return;
	     end;
	
	else if c.seg_name = "" then do;		/* If arg not a -control_arg			        */
	     c.seg_name = arg;
	     if length(arg) > maxlength(c.seg_name) then
		call ssu_$print_message (c.sciP, error_table_$bigarg, "^a may not be longer than ^d characters.",
		     arg, maxlength(c.seg_name));
	     call check_star_name_$entry (c.seg_name, c.seg_starness);
	     if ^(c.seg_starness = STAR_TYPE_USE_PL1_COMPARE | 
	          c.seg_starness = STAR_TYPE_USE_MATCH_PROCEDURE | 
		c.seg_starness = STAR_TYPE_MATCHES_EVERYTHING)  then
		call ssu_$abort_line (c.sciP, c.seg_starness, "^a", c.seg_name);
	     c.first_control_arg = argI + 2;
	     end;

	argI = argI + 1;				/* Record that we processed the arg just examined above.  */
	end;

     end controlArgs;

%page;
%include ssu_request_dcls_;
%page;
%include mbuild_request_parms_;
%page;
%include mbuild_info_;
%page;
%include mbuild_Tlist_;
%page;
%include mbuild_data_;
%page;
%include check_star_name;

     end mbuild_xref_;
