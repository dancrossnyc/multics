
/****^  HISTORY COMMENTS:
  1) change(2019-08-17,GDixon), approve(2019-10-25,MCR10069),
     audit(2020-01-20,Swenson), install(2020-01-20,MR12.6g-0035):
     Command/AF to display pathnames for items in Multics Libraries (or current
     library descriptor) as seen by the mbuild Subsystem.  An mbuild equivalent
     of the library_pathname command. Also implements the mbuild subsystem
     request:  library_pathname (lpn)
                                                   END HISTORY COMMENTS */

mbuild_lpn:
mblpn:
     proc options(variable);
	

display_usage:
	proc;

	call ioa_ ("^(^a^)",
"Syntax as a command:  mblpn {-lb library_name} star_name


Syntax as an active function:  [mblpn {-lb library_name} star_name]
");
	goto EXIT;
	end display_usage;

  dcl  ioa_ entry() options(variable);

  dcl (error_table_$bad_arg,
       error_table_$badopt,
       error_table_$noarg,
       error_table_$not_act_fnc,
       error_table_$too_many_names) fixed bin(35) ext static;

%page;
/* ======================================================================
 *
 * COMMAND/AF:  mbuild_lpn, mblpn
 *								
 * ====================================================================== */

  dcl  PROC    char(10) internal static options(constant) init("mbuild_lpn");
  dcl  VERSION char(16) internal static options(constant) init("mbuild_lpn___1.0");

  dcl 1 C aligned,					/* Structure to hold control information.	        */
      2 sciP ptr,					/*   ssu_ invocation pointer.			        */
      2 args,
        3 name char(32) unal,				/*   star_name				        */
        3 library char(32) unal;			/*   -library library_name			        */

						/* Setup cleanup on-unit for ssu_ standalone invocation.  */
     isStandalone = T;				/*   Command is running as standalone invocation.	        */
     C.sciP = null();				/*   Invocation has not been created yet.	        */
     on cleanup call standalone_cleanup_handler(isStandalone, C.sciP);

     call ssu_$standalone_invocation (C.sciP, PROC, VERSION, cu_$arg_list_ptr(), abort_to_EXIT, code);
						/* Initialize control data used by command & requests.    */
     goto COMMON;


/* ======================================================================
 *
 * REQUEST:  library_pathname, lpn
 *								
 * ====================================================================== */

lpn_request:
     entry (AsciP, AinfoP);
     
  dcl  AsciP ptr;					/* sci_ptr maintained by ssu_			        */
  dcl  AinfoP ptr;					/* info structure for communicating between requests.     */
						/*   This is not used for mbuild_type command or requests.*/
     isStandalone = F;
     C.sciP = AsciP;
     goto COMMON;

%page;
/* ------------------------------------------------------------
 * Setup to process incoming command/request arguments.
 * ------------------------------------------------------------ */

COMMON:
     call arg_setup (C.sciP);

     if ^args_remain() then do;			/* If no args given...			        */
	if isStandalone & ^isAF then			/*  - command displays usage			        */
	     call display_usage();

	C.args = "";				/*  - AF or ssu_ requests do default action.	        */
	end;
     else call controlArgs(C, 0);			/* Get seg_name or -control_arg		        */

/* ------------------------------------------------------------
   Process incoming command/request arguments.
   ------------------------------------------------------------ */

  dcl  paths (1000) char(200) var;			/* Array of paths matching starname found in libraries.   */
  dcl  pathsN fixed bin;				/* Number of paths actually returned.		        */
  dcl  pathI fixed bin;

  dcl  mbuild_library_$library_directories entry (char(*) var, (*) char(200) var, fixed bin, fixed bin(35));

     if C.library = "" then 
	C.library = "**";
     else do;					/* Validate -lb operand			        */
	call mbuild_library_$library_directories ((C.library), paths, pathsN, code);
	if code ^= 0 | pathsN = 0 then 
	     call ssu_$abort_line (C.sciP, code, "^[Unknown Multics Library ^]-lb ^a", 
		(pathsN = 0 & code = error_table_$bad_arg), C.library);
	end;

  dcl  mbuild_library_$search entry (char(*) var, char(*) var, (*) char(200) var, fixed bin, fixed bin(35));

     call mbuild_library_$search ((C.library), (C.name), paths, pathsN, code);
     if code ^= 0 then
	call ssu_$abort_line (C.sciP, code, "Getting paths for: ^[[^]^a -lb ^a ^a^[]^]", 
	     isAF, "mblpn", C.library, C.name, isAF);

     if ^isAF then
	call ioa_ ("^v(^/^a^)", pathsN, paths) ;

     else if isAF & code = 0 then do;
	do pathI = 1 to pathsN;
	     af_ret = af_ret || paths(pathI) || " ";
	     end;
	end;

EXIT:	
     call standalone_cleanup_handler(isStandalone, C.sciP);
     return;
%page;
/* ------------------------------------------------------------
   Process segment_name and -control_arg arguments.
   ------------------------------------------------------------ */

controlArgs:
     proc (c, code);

  dcl 1 c aligned like C;				/*  control arg specification data                   (in) */
  dcl  code fixed bin (35);				/*  status code, reporting missing arg, conversion        */
						/*   error, unknown options, etc.		        */
     c.args = "";
     code = 0;

  dcl  next_arg_is_library bit(1) aligned init(F);

     do while (args_remain());
	call ssu_$arg_ptr (c.sciP, argI+1, argP, argL);	/* Conditionally read next argument to call command/af.   */
	if next_arg_is_library then do;
	     c.library = arg;
	     next_arg_is_library = F;
	     end;

	else if isControlArg(arg) then do;

	     /* Global options */                              
	     if       arg = "-lb"     | arg = "-library"      then next_arg_is_library = T;

               else call ssu_$print_message (c.sciP, error_table_$badopt, 
		"Ignoring unsupported control arg: ^a", arg);
	     end;
	
	else c.name = arg;

	argI = argI + 1;				/* Note that we processed the arg just examined above.    */
	end;

     end controlArgs;

%page;
%include ssu_standalone_command_;

%page;
%include mbuild_info_;

     end mbuild_lpn;

     
