/****^  HISTORY COMMENTS:
  1) change(2019-08-17,GDixon), approve(2019-10-25,MCR10069),
     audit(2020-01-04,Swenson), install(2020-01-20,MR12.6g-0035):
     mbuild request:  set
  2) change(2020-01-27,GDixon), approve(2020-01-27,MCR10079),
     audit(2020-02-02,Swenson), install(2020-02-02,MR12.6g-0045):
     Change set -description to automatically save the new description value in
     the build_script file, using the save -description request.
  3) change(2020-02-10,GDixon), approve(2020-02-10,MCR10079),
     audit(2020-04-30,Swenson), install(2020-04-30,MR12.6g-0046):
      A) Change "set -Seg SEG_NAME -lb XXXX" to accept star convention.
  4) change(2020-08-30,GDixon), approve(2021-02-22,MCR10086),
     audit(2021-03-17,Swenson), install(2021-03-17,MR12.6g-0051):
     Provide missing hyphen in  "library, -lb" reference in intro comment for
     set_Seg() internal procedure.
                                                   END HISTORY COMMENTS */

mbuild_set_:
     proc (AsciP, Abuild_dataP) returns (bit(1) aligned);

  dcl  PROC char(11) int static options(constant) init("mbuild_set_");

     return (check_parms (mbuild_data_version_3));
/* -------------------- */

display_usage:					/* Display usage for command/active function.	        */
          proc();					/*   NOTE: Usage for subsystem request differs somewhat.  */

          call ioa_ ("^(^a^)", "
Syntax as a command:  set -description
		  set -log_dir
                      set -Seg SEG_NAME -library LIB_NAME");

	goto EXIT;
	end display_usage;

/* -------------------- */

  dcl  check_star_name_$entry entry (char(*), fixed bin(35));
  dcl  ioa_ entry() options(variable);
  dcl  iox_$get_line entry (ptr, ptr, fixed bin(21), fixed bin(21), fixed bin(35));
  dcl  iox_$user_input ptr ext static;

  dcl  mbuild_$request entry options(variable);

  dcl  mbuild_Tlist_$empty_request_list entry (ptr);
  dcl  mbuild_Tlist_$request_Seg_match_star entry (ptr, char(*), fixed bin(35)) returns(ptr);

  dcl  mbuild_display_$BOUNDOBJ entry (ptr, ptr, bit(*) aligned, fixed bin);
  dcl  mbuild_display_$COMPILE entry (ptr, ptr, bit(*) aligned, fixed bin);
  dcl  mbuild_display_$Seg entry (ptr, ptr, bit(*) aligned, fixed bin);
  dcl  mbuild_display_$UNBOUNDOBJ entry (ptr, ptr, bit(*) aligned, fixed bin);

  dcl  mbuild_library_$replace_library_component entry (char(*) var, char(*) var, char(*) var) returns(char(32) var);

  dcl (error_table_$badopt,
       error_table_$bigarg,
       error_table_$noarg,
       mbuild_et_$no_Seg
       ) fixed bin(35) ext static;

  dcl (addr, length, maxlength, rtrim, size, substr) builtin;

  dcl  cleanup condition;

%page;
/* ======================================================================
   REQUEST:  set

   Set information associated with this build.  

   Syntax:  set -log_dir LOG_DIR_PATHNAME
	  set -Seg bound_mbuild_ -library tools
            set -description

   Enter description (ending with a line containing only a period (.) character):
   MCR10056: 4-digit year info segment support. (MR12.6g-0021)
   .

/* ====================================================================== */

mbuild_set_$set_request:
     entry(AsciP, Abuild_dataP);

  dcl 1 C aligned,
      2 sciP ptr,
      2 operands,
        3 log_dir char(168),
        3 value char(32) var,
        3 seg_name char(32) unal,
      2 seg_starness fixed bin(35),
      2 S,
        3 operationS aligned,
	4 (SegS,
	   descriptionS,
	   log_dirS
             ) bit(1) unaligned,
        3 fieldS aligned,
          4 (libraryS
	   ) bit(1) unaligned;

     C.sciP = AsciP;
     C.operands = "";
     C.seg_starness = STAR_TYPE_USE_PL1_COMPARE;
     C.S = F;

     call arg_setup (AsciP);

     if args_remain() then
	call controlArgs(C);
     else call display_usage();
     
     if C.descriptionS then do;
	call set_description();
	end;
     
     else if C.log_dirS then 
	bld.log_directory = C.log_dir;

     else if C.SegS then do;
	call set_Seg();
	end;
     
     else call display_usage();

EXIT:
     return;
%page;
/* ----------------------------------------------------------------------
 *  Prompt user to enter a description of build/install operation, which 
 *  is stored in the build area.	
 * ---------------------------------------------------------------------- */

set_description:
     proc ();

  dcl  ENDER char(2) int static options(constant) init(".
");
  dcl  NL char(1) int static options(constant) init("
");

  dcl  descrip char(2000) var;			/* Variable in which description is built.	        */
  dcl  input char(200),
       input_readL fixed bin(21);

     descrip = "";
     call ioa_ ("Enter description (ending with a line containing only a period (.) character):");
     do while (T);
	call iox_$get_line (iox_$user_input, addr(input), length(input), input_readL, code);
	if code ^= 0 then call ssu_$print_message (C.sciP, code, "Reading description.");
	
	if input_readL = length(ENDER) & substr(input,1,input_readL) = ENDER then do;
	     goto STORE_DESCRIPTION;
	     end;

	if length(descrip) + input_readL > maxlength(descrip) then do;
	     call ssu_$print_message (AsciP, error_table_$bigarg, 
		"Length of description must be <= ^d characters.", maxlength(descrip));
	     return;
	     end;

	else descrip = descrip || substr(input,1,input_readL);
	end;

STORE_DESCRIPTION:
     descrip = rtrim(descrip, NL);
						/* Remove final NL from description.		        */
     call store_description (addr(bld), descrip);		/* Call support routine to store the new description.     */
     call mbuild_$request (bld.sciP, "save -description", F);
						/* Save the new description in new/existing build script. */
     end set_description;
%page;
/* ----------------------------------------------------------------------
 *  Arguments to set request specified:
 *   - Seg().name of segment to be modified.
 *   - Field to be modified:  -library, -lb
 *   - New value for that field.
 *
 *  No validation is performed for that field value.
 * ---------------------------------------------------------------------- */

set_Seg:
     proc();

/* ----------------------------------------------------------------------
    - Prepare to handle set requests.
   ---------------------------------------------------------------------- */

  dcl 1 req aligned like request;			/* Provide storage for request structure.	        */
     requestP = addr(req);				/*  - per-request threaded lists are valid only during    */
     request.info = "";				/*    execution of that one request.  At end of request,  */
     request.struct = "req";				/*    the list must be emptied.		        */
     request.name = ssu_$get_request_name(C.sciP);
     call Tlist_initialize (addr(request.request_Tb), addr(request));
						/* request_Tb is a list for Seg structures.	        */

     on cleanup call set_janitor (addr(request));


/* ----------------------------------------------------------------------
    - Process BOUNDOBJ matching seg_name on the thread: BOUNDOBJ_Tb
   ---------------------------------------------------------------------- */

  dcl  set_count fixed bin init(0);

  dcl  1 dispS aligned like display_switches_Seg;

     do BOUNDOBJp = Tlist_first_item (addr(bld.BOUNDOBJ_Tb)) 
             repeat Tlist_next_item  (addr(BOUNDOBJ.BOUNDOBJ_Td)) while (BOUNDOBJp ^= null() );
	call Tlist_add_to_tail (addr(request.request_Tb), addr(BOUNDOBJ), addr(BOUNDOBJ.request_Td));
	end;

     if ^Tlist_is_empty (addr(request.request_Tb))  then do;

	BOUNDOBJp = mbuild_Tlist_$request_Seg_match_star (addr(request), C.seg_name, C.seg_starness);
						/* This call removes BOUNDOBJ and all prior items from    */
						/*  request list.				        */
	do while ( BOUNDOBJp ^= null() );		/* When this loop ends, entire request list is empty      */
	     call do_BOUNDOBJ();
	     set_count = set_count + 1;
	     BOUNDOBJp = mbuild_Tlist_$request_Seg_match_star (addr(request), C.seg_name, C.seg_starness);
	     end;
	end;

/* ----------------------------------------------------------------------
    - Process UNBOUNDOBJ matching seg_name on the thread: UNBOUNDOBJ_Tb
   ---------------------------------------------------------------------- */

     do UNBOUNDOBJp = Tlist_first_item (addr(bld.UNBOUNDOBJ_Tb)) 
             repeat Tlist_next_item  (addr(UNBOUNDOBJ.UNBOUNDOBJ_Td)) while (UNBOUNDOBJp ^= null() );
	call Tlist_add_to_tail (addr(request.request_Tb), addr(UNBOUNDOBJ), addr(UNBOUNDOBJ.request_Td));
	end;

     if  ^Tlist_is_empty (addr(request.request_Tb))  then do;

	UNBOUNDOBJp = mbuild_Tlist_$request_Seg_match_star (addr(request), C.seg_name, C.seg_starness);
						/* This call removes UNBOUNDOBJ and all prior items from  */
						/*  request list.				        */
	do while ( UNBOUNDOBJp ^= null() );		/* When this loop ends, entire request list is empty      */
	     call do_UNBOUNDOBJ();
	     set_count = set_count + 1;
	     UNBOUNDOBJp = mbuild_Tlist_$request_Seg_match_star (addr(request), C.seg_name, C.seg_starness);
	     end;
	end;

/* ----------------------------------------------------------------------
    - Process Seg matching seg_name on the thread: Seg_Tb
   ---------------------------------------------------------------------- */

     do SegP = Tlist_first_item (addr(bld.Seg_Tb)) 
             repeat Tlist_next_item  (addr(Seg.Seg_Td)) while (SegP ^= null() );
	call Tlist_add_to_tail (addr(request.request_Tb), addr(Seg), addr(Seg.request_Td));
	end;

     if  ^Tlist_is_empty (addr(request.request_Tb))  then do;

	SegP = mbuild_Tlist_$request_Seg_match_star (addr(request), C.seg_name, C.seg_starness);
						/* This call removes Seg and all prior items from  */
						/*  request list.				        */
	do while ( SegP ^= null() );			/* When this loop ends, entire request list is empty      */
	     call do_Seg();
	     set_count = set_count + 1;
	     SegP = mbuild_Tlist_$request_Seg_match_star (addr(request), C.seg_name, C.seg_starness);
	     end;
	end;

     if  set_count = 0  then
	call ssu_$print_message (AsciP, mbuild_et_$no_Seg, "-Seg ^a", C.seg_name);
					/* Report that no Seg(...).name structure was found.      */
     call set_janitor (addr(request));
     return;


do_BOUNDOBJ:
     proc ();

     if C.libraryS then do;				/* If found, modify it's .library field.	        */
	dispS = F; dispS.typeS, dispS.headerS = T; dispS.libraryS = T;

	BOUNDOBJ.library = mbuild_library_$replace_library_component (BOUNDOBJ.library, C.value, "");
	call mbuild_display_$BOUNDOBJ (C.sciP, addr(BOUNDOBJ), string(dispS), 2);
						/*  - Display value of modified BOUNDOBJ structure.       */

	if BOUNDOBJ.bindfileP ^= null() then do;	/*  - Modify and display any Seg(bindfile) pointed to by  */
	     SegP = BOUNDOBJ.bindfileP;		/*    this BOUNDOBJ.			        */
	     Seg.library = mbuild_library_$replace_library_component (Seg.library, C.value, "");
	     call mbuild_display_$Seg (C.sciP, addr(Seg), string(dispS), 6);
	     end;

	if BOUNDOBJ.Bound_objP ^= null() then do;	/*  - Modify and display any Seg(Bound_obj) pointed to by */
	     SegP = BOUNDOBJ.Bound_objP;		/*    this BOUNDOBJ.			        */
	     Seg.library = mbuild_library_$replace_library_component (Seg.library, C.value, "");
	     call mbuild_display_$Seg (C.sciP, addr(Seg), string(dispS), 6);
	     end;
	     
	do sArchP = Tlist_first_item (addr(BOUNDOBJ.sourceArchs_Tb))
	     repeat Tlist_next_item  (addr(sArch.archs_Td))  while (sArchP ^= null());
	     sArch.library = mbuild_library_$replace_library_component (sArch.library, C.value, "");
	     call mbuild_display_$Seg (C.sciP, addr(sArch), string(dispS), 4);
						/*  - Modify and diplay any Seg(source_arch)...	        */

	     do SegP = Tlist_first_item (addr(sArch.inArch_Tb))
	        repeat Tlist_next_item  (addr(Seg.inArch_Td))  while (SegP ^= null());
		Seg.library = mbuild_library_$replace_library_component (Seg.library, C.value, "");
		call mbuild_display_$Seg (C.sciP, SegP, string(dispS), 6);
						/*  -  ... and component Seg(source) of this archive.     */

		if Seg.COMPILEp ^= null then do;
		     COMPILEp = Seg.COMPILEp;
		     COMPILE.library = mbuild_library_$replace_library_component (COMPILE.library, C.value, "");
		     call mbuild_display_$COMPILE (C.sciP, addr(COMPILE), string(dispS), 6);
		     end;				/*  -  ... and associated COMPILE of this source.	        */
		end;
	     end;

	do oArchP = Tlist_first_item (addr(BOUNDOBJ.objectArchs_Tb))
	     repeat Tlist_next_item  (addr(oArch.archs_Td))  while (oArchP ^= null());
	     oArch.library = mbuild_library_$replace_library_component (oArch.library, C.value, "");
	     call mbuild_display_$Seg (C.sciP, addr(oArch), string(dispS), 4);
						/*  - Modify and diplay any Seg(object_arch)...	        */

	     do SegP = Tlist_first_item (addr(oArch.inArch_Tb))
	        repeat Tlist_next_item  (addr(Seg.inArch_Td))  while (SegP ^= null());
		Seg.library = mbuild_library_$replace_library_component (Seg.library, C.value, "");
		call mbuild_display_$Seg (C.sciP, SegP, string(dispS), 6);
		end;				/*  -  ... and component Seg(Unbound_obj) of this archive.*/
	     end;
	end;
     return;

do_UNBOUNDOBJ:
     entry ();

     if C.libraryS then do;				/* If found, modify its .library field...	        */
	dispS = F; dispS.typeS, dispS.headerS = T; dispS.libraryS = T;

	UNBOUNDOBJ.library = mbuild_library_$replace_library_component (UNBOUNDOBJ.library, C.value, "");
	call mbuild_display_$UNBOUNDOBJ (C.sciP, addr(UNBOUNDOBJ), string(dispS), 2);

	if UNBOUNDOBJ.sourceP ^= null() then do;	/* ... and that of its attached Seg(source) structure.    */
	     SegP = UNBOUNDOBJ.sourceP;
	     Seg.library = mbuild_library_$replace_library_component (Seg.library, C.value, "");
	     call mbuild_display_$Seg (C.sciP, addr(Seg), string(dispS), 6);
	     if Seg.COMPILEp ^= null then do;
		COMPILEp = Seg.COMPILEp;
		COMPILE.library = mbuild_library_$replace_library_component (COMPILE.library, C.value, "");
		call mbuild_display_$COMPILE (C.sciP, addr(COMPILE), string(dispS), 6);
		end;				/*  -  ... and associated COMPILE of this source.	        */
	     end;				
	end;
     return;
     
do_Seg:
     entry ();

     if C.libraryS then do;				/* If found, modify its .library field and display change.*/
	dispS = F; dispS.typeS, dispS.headerS = T; dispS.libraryS = T;

	Seg.library = mbuild_library_$replace_library_component (Seg.library, C.value, "");
	if ^(Seg.type = "Include" | Seg.type = "Info") then
	     dispS.structureS = T;
	call mbuild_display_$Seg (C.sciP, addr(Seg), string(dispS), 2);
	end;
     return;

     end do_BOUNDOBJ;


set_janitor:					/* Clean up request list if subsystem request is aborted. */
     proc (ArequestP);

  dcl  ArequestP ptr;
  dcl 1 Arequest aligned like request based(ArequestP);

     call mbuild_Tlist_$empty_request_list (ArequestP);

     end set_janitor;

     end set_Seg;
%page;
/* ======================================================================
   ENTRYPOINT:  description

   Returns any description that has been set/read.
/* ====================================================================== */

description:
     entry (Abuild_dataP) returns (char(*));

     script_descripP = bld.script_descripP;
     if  script_descripP ^= null()  then
	return ( script_descrip.text );
     else return ( "" );


/* ======================================================================
   ENTRYPOINT:  description_stored

   Returns true if a description has been set/read.
/* ====================================================================== */

description_stored:
     entry (Abuild_dataP) returns (bit(1) aligned);

     return ( bld.script_descripP ^= null() );


/* ======================================================================
   ENTRYPOINT:  release_description

   Resets/clears storage location for description.
/* ====================================================================== */

release_description:
     entry (Abuild_dataP);

RELEASE_DESCRIPTION:
     bld.script_descripP = null();
     return;
     

/* ======================================================================
   ENTRYPOINT:  store_description

   Allocates storage to hold description, and assigns a value to that storage.
/* ====================================================================== */

store_description:
     entry (Abuild_dataP, Adescription);

  dcl  Adescription char(*) var;

     script_textL = length(Adescription);
     if script_textL = 0 then go to RELEASE_DESCRIPTION;

  dcl  translator_temp_$allocate entry (ptr, fixed bin) returns(ptr);

     script_descripP = translator_temp_$allocate (bld.areaP, size(script_descrip));
     script_descrip.L = script_textL;
     script_descrip.text = Adescription;
     bld.script_descripP = script_descripP;

     return;

%page;
/* ------------------------------------------------------------
 *  Process set -control_arg arguments.
 * ------------------------------------------------------------ */

controlArgs:
     proc (c);

  dcl 1 c aligned like C;				/* control arg specification data                    (in) */

  dcl  dirname char(168),
       entryname char(32);

  dcl  expect fixed bin(2);				/* what kind of arg is expected? 		        */
  dcl (eControlArg init(0), 
       eSegname    init(1), 
       eValue      init(2),
       eLogdir     init(3)
       ) fixed bin(2) int static options(constant);

  dcl  expand_pathname_ entry (char(*), char(*), char(*), fixed bin(35));
  dcl  pathname_ entry (char(*), char(*)) returns(char(168));

     expect = eControlArg;
     do while (args_remain());
	call ssu_$arg_ptr (c.sciP, argI+1, argP, argL);	/* Conditionally read next arg to command/af/request      */
					
	if isControlArg(arg) then do;

	     if expect ^= eControlArg then
		call ssu_$abort_line (c.sciP, error_table_$badopt, 
		     "^a^/^- Expecting ^[-Seg <seg-name>^;-library <lib-value>^]", arg, expect);

	     if       arg = "-desc"   | arg = "-description"    then do; c.operationS = F; c.descriptionS = T;
							     end;
	     else if  arg = "-seg"    | arg = "-Seg"            then do; c.operationS = F; c.SegS = T; 
						               expect = eSegname;
							     end;
	     else if  arg = "-ld"     | arg = "-log_dir"        then do; c.operationS = F; c.log_dirS = T; 
							     expect = eLogdir;
							     end;
               else if  arg = "-lb"     | arg = "-library"        then do; c.libraryS = T;
							     expect = eValue;
							     end;

               else call ssu_$print_message (C.sciP, error_table_$badopt, 
		"Ignoring unsupported control arg: ^a", arg);
	     end;
						/* If arg is a -control_arg operand		        */
	else if expect = eSegname then do;
	     if length(arg) > maxlength(c.seg_name) then
		call ssu_$abort_line (c.sciP, error_table_$bigarg, 
		     "'^a' may be up to ^d characters long.", arg, maxlength(c.seg_name));
	     c.seg_name = arg;
	     call check_star_name_$entry (c.seg_name, c.seg_starness);
	     if ^(c.seg_starness = STAR_TYPE_USE_PL1_COMPARE | 
	          c.seg_starness = STAR_TYPE_USE_MATCH_PROCEDURE | 
		c.seg_starness = STAR_TYPE_MATCHES_EVERYTHING)  then
		call ssu_$abort_line (c.sciP, c.seg_starness, "^a", c.seg_name);
	     expect = eControlArg;
	     end;
	else if expect = eValue then do;
	     if length(arg) > maxlength(c.value) then
		call ssu_$abort_line (c.sciP, error_table_$bigarg, 
		     "'^a' may be up to ^d characters long.", arg, maxlength(c.value));
	     c.value = arg;
	     expect = eControlArg;
	     end;
	else if expect = eLogdir then do;
	     call expand_pathname_ (arg, dirname, entryname, code);
	     if  code ^= 0  then 
		call ssu_$abort_line (c.sciP, code, "-log_dir ^a", arg);
	     else c.log_dir = pathname_ (dirname, entryname);
	     end;
	else do;
	     call ssu_$abort_line (c.sciP, error_table_$badopt, 
		"Unexpected argument ^a to set request.", arg);
	     end;

	argI = argI + 1;				/* Record that we processed the arg just examined above.  */
	end;

     if c.SegS & c.seg_name = "" then
	call ssu_$abort_line (AsciP, error_table_$noarg, "-Seg <seg-name>");

     end controlArgs;
%page;
%include ssu_request_dcls_;
%page;
%include mbuild_request_parms_;
%page;
%include mbuild_Tlist_;
%page;
%include mbuild_data_;
%page;
%include mbuild_display_dcls_;
%page;
%include check_star_name;

     end mbuild_set_;
