
/****^  HISTORY COMMENTS:
  1) change(2019-08-17,GDixon), approve(2019-10-26,MCR10069),
     audit(2020-01-12,Swenson), install(2020-01-20,MR12.6g-0035):
     mbuild request:  print, pr, p
  2) change(2020-01-26,GDixon), approve(2020-01-26,MCR10079),
     audit(2020-02-02,Swenson), install(2020-02-02,MR12.6g-0045):
      A) Change print to better handle behind-the-scenes use by the save request
         to store current description, or description plus analysis data
         in a build script segment.
  3) change(2020-11-09,GDixon), approve(2021-02-22,MCR10086),
     audit(2021-03-17,Swenson), install(2021-03-17,MR12.6g-0051):
      A) Use revised calling sequence for
         mbuild_Tlist_$find_(BOUNDOBJ COMPILE Seg UNBOUNDOBJ) to permit lists
         containing objects with same name but different operation/library.
                                                   END HISTORY COMMENTS */

mbuild_print_:
     proc (AsciP, Abuild_dataP) returns (bit(1) aligned);

  dcl  PROC char(13) int static options(constant) init("mbuild_print_");

     return (check_parms (mbuild_data_version_3));
/* -------------------- */

  dcl (ioa_, ioa_$nnl) entry() options(variable);
  dcl  mbuild_Tlist_$find_BOUNDOBJ entry (ptr, char(*) var, char(*) var, ptr) returns(ptr);
  dcl  mbuild_Tlist_$find_COMPILE entry (ptr, char(*) var, char(*) var, ptr) returns(ptr);
  dcl  mbuild_Tlist_$find_Seg entry (ptr, char(*) var, char(*) var, ptr) returns(ptr);
  dcl  mbuild_Tlist_$find_UNBOUNDOBJ entry (ptr, char(*) var, char(*) var, ptr) returns(ptr);
  dcl  mbuild_Tlist_$find_scan entry (ptr, char(*) var, char(*) var) returns(ptr);

  dcl  mbuild_data_$derived_Seg entry (ptr) returns(bit(1) aligned);
  dcl  mbuild_data_$exists_Seg entry (ptr, ptr) returns(bit(1) aligned);
  dcl  mbuild_data_$get_build_progress entry (ptr) returns(bit(*) aligned);
  dcl  mbuild_data_$important_type entry (char(*) var) returns(bit(1) aligned);
  dcl  mbuild_data_$mbuild_support_Seg entry (ptr) returns(bit(1) aligned);
  dcl  mbuild_data_$new_source_component entry (ptr) returns(bit(1) aligned);
  dcl  mbuild_data_$unknown_library_found entry (ptr, bit(1) aligned) returns(bit(1) aligned);

  dcl  mbuild_display_$BOUNDOBJ entry (ptr, ptr, bit(*) aligned, fixed bin);
  dcl  mbuild_display_$COMPILE entry (ptr, ptr, bit(*) aligned, fixed bin);
  dcl  mbuild_display_$UNBOUNDOBJ entry (ptr, ptr, bit(*) aligned, fixed bin);
  dcl  mbuild_display_$Seg entry (ptr, ptr, bit(*) aligned, fixed bin);

  dcl  mbuild_info_find_$thread_selector_by_ID entry (char(*) var) returns(fixed bin);
  dcl  mbuild_info_find_$thread_selector_ID_for_value entry (fixed bin) returns(char(16) var);
  dcl  mbuild_info_find_$thread_selector_summary entry ((*) char(32) var, fixed bin);

  dcl  mbuild_library_$archive_table entry (char(*), char(*) var, char(*) var, (*) char(32) var, fixed bin,
          fixed bin(35));

  dcl  mbuild_set_$description entry (ptr) returns(char(*));
  dcl  mbuild_set_$description_stored entry (ptr) returns(bit(1) aligned);

  dcl  (error_table_$badopt,
        error_table_$bigarg,
        error_table_$noarg,
        mbuild_et_$no_analysis,
        mbuild_et_$no_description,
        mbuild_et_$no_Seg,
        mbuild_et_$no_scan,
        mbuild_et_$not_saveable,
        mbuild_et_$unknown_thread_type
         ) fixed bin(35) ext static;

  dcl (addr, length, maxlength, null, string) builtin;

%page;
%include mbuild_info_;                                      /* Included early to use constants in label array.        */
%page;
/* ======================================================================
   ENTRYPOINT: Seg

    Print one Seg in format of the request:  print -scan 

   CALLED BY: mbuild_data_$unknown_library_found
   ====================================================================== */

Seg: entry (AsciP, ASegP, Aprior_archive_title, Aprior_type_name);
     
/*dcl  AsciP ptr;					/* ssu_ sci_ptr variable.			        */
  dcl  ASegP ptr;					/* Pointer to Seg structure to be printed.	        */
  dcl (Aprior_archive_title,				/* Labeling variables: = "" on first call	        */
       Aprior_type_name) char(32) var;			/*    passed in with prior value on subsequent calls      */
  
     call print_one_Seg (AsciP, ASegP, Aprior_archive_title, Aprior_type_name);
     return;

%page;
/* ======================================================================
   REQUEST:  print, pr, p

    Print the list of segments found in the input directory.  Or display other data
    gathered by mbuild.  Many information types are displayable.  See help file
    of the print request for more details.

   NOTE:  print_request is invoked via ssu_$execute_line by: mbuild.pl1, mbuild_script_.pl1
          If syntax of print_request changes, please update these programs as needed.
   ====================================================================== */

print_request:
     entry (AsciP, Abuild_dataP);

  dcl 1 C aligned,
      2 sciP ptr,
      2 name_operand char(32) var,
      2 thread_type fixed bin,
      2 S,
        3 operationS aligned,
          4 (directoryS,				/* Print absolute path of install directory.	        */
             log_dirS,				/* Print log_dir value  set via:  mbuild -set_log_dir     */
						/*               or via request:  set -log_dir	        */
             describeS,				/* Description field    set via:  set -description        */
						/*               or via request:  read -desc  or  read    */
             scanS,					/* Default data displayed after request:  scan	        */
             analyzeS,				/* Default data displayed after request:  analyze	        */
             newS,					/* After "scan; read": lists segments now in install dir  */
						/*  but not included in data read from Build_script       */
	   unknownS,				/* After analyze: display Seg.library contains "UNKNOWN"  */
             SegS,					/* Display all data about Seg.name = SEG_NAME	        */
             threadS				/* Display data about one or all threads.	        */
             ) bit(1) unaligned,
        3 controlS aligned,
          4 (saveS					/* Data for combo of:  print (-desc -analyze)	        */
	   ) bit(1) aligned,			/*  which is format of Build_script by request: save      */
        3 displayS aligned like display_switches_Seg;	/* Switches controlling what Seg elements to display.     */
						/*   These switches are in mbuild_display_dcls_.incl.pl1  */
     C.sciP = AsciP;
     C.name_operand = ""; 
     C.thread_type = 0;
     C.S = F;
     
     string(bld_progress) = mbuild_data_$get_build_progress (addr(bld));

     if bld_progress.analyzedS then do;                     /* Figure out what data is available to print request     */
          C.analyzeS = T;                                   /*  so it can choose the default print operation.	        */
          end;                                              /*  - Most inclusive format prints full analysis.         */
     else if bld_progress.scannedS then do;
          C.scanS = T;                                      /*  - scan format is less inclusive, but includes any     */
          end;                                              /*    description.                                        */
     else if bld_progress.describedS then do;
          C.describeS = T;                                  /*  - select just Description, if any.                    */
          end;
                                                            /*  - otherwise, there is no default print operation.     */

     call arg_setup (AsciP);                                /* User chooses data to display via -Control_args	        */

     if args_remain() then
          call controlArgs(C);

     if string(C.operationS) = F then                       /* Complain if there's no default operation, and user     */
          call ssu_$abort_line (C.sciP, error_table_$noarg, /*  didn't specify an operation.                          */
               "Please specify a print method:^/^- -description, -directory, -log_dir, -new, -unknown, or -list");

     if       C.analyzeS  then do;
	if  ^bld_progress.analyzedS  then
	     call ssu_$abort_line (C.sciP, mbuild_et_$no_analysis);
	else do;
	     if  C.saveS  then 
		if bld_progress.describedS  then 
		     call print_description(C.saveS);
	          else call save_installation_directory(S.saveS);
	     call print_after_analyze();
	     end;
	end;

     else if  C.describeS  then do;
	if  ^bld_progress.describedS  then
	     call ssu_$abort_line (C.sciP, mbuild_et_$no_description);
	else call print_description(C.saveS);
          end;

     else if  C.scanS  then do;
	if  ^bld_progress.scannedS  then
	     call ssu_$abort_line (C.sciP, mbuild_et_$no_scan);
	else call print_after_scan();
	end;


     else if  C.newS  then do;
          if ^bld_progress.scannedS  then 
	     call ssu_$abort_line (C.sciP, mbuild_et_$no_scan, "To look for new segments, first use request:  scan");
          else do;
               if bld.scan_Tb_via_request = "read" then
                    call print_new_Segs();
               else call ssu_$print_message (C.sciP, 0, "Last scan detected no new segments.");
               end;
          end;

     else if  C.unknownS  then do;
	if mbuild_data_$unknown_library_found (addr(bld), T) then;
						/* T: Seg.library contains UNKNOWN displays Seg structure */
	end;					/*    when found.				        */

     else if  C.directoryS  then
          call ioa_ ("^/Installation_directory: ^a", bld.directory);

     else if  C.log_dirS  then
          call ioa_ ("^/Log directory: ^a", bld.log_directory);

     else  if C.SegS  then
          call print_Seg();

     else  if C.threadS  then
          call print_thread();

EXIT:
     return;
%page;
/* ----------------------------------------------------------------------
   ROUTINE:  print_description

   Print the current description of the installation.
   ---------------------------------------------------------------------- */
print_description:					
     proc(in_save_formatS);                                                

  dcl  in_save_formatS bit(1) aligned;			/* T: Display in format appropriatie to save request.     */

     call ioa_ ("^[^/^]Description:^/^a", ^in_save_formatS, mbuild_set_$description (addr(bld)) );

save_installation_directory:
     entry (in_save_formatS);

     if  in_save_formatS  then
	call ioa_ ("^/Installation_directory:  ^a;", bld.directory);
     
     end print_description;
%page;
/* ----------------------------------------------------------------------
   ROUTINE:  print_Seg

   Searches for a given segment name in the following threaded lists:
      BOUNDOBJ_Tb  UNBOUNDOBJ_Tb  Seg_Tb  COMPILE_Tb
   In each list for which the name matches a structure, print -all information
   from the matching structure.
   ---------------------------------------------------------------------- */
print_Seg:
     proc();
     
  dcl foundItem bit(1) aligned init(F);
     
     BOUNDOBJp = mbuild_Tlist_$find_BOUNDOBJ (addr(bld), C.name_operand, "", null() );
     do while (BOUNDOBJp ^= null() );
          call mbuild_display_$BOUNDOBJ (C.sciP, addr(BOUNDOBJ), string(C.displayS), 1);
          foundItem = T;
	BOUNDOBJp = mbuild_Tlist_$find_BOUNDOBJ (addr(bld), C.name_operand, "", BOUNDOBJp );
          end;

     UNBOUNDOBJp = mbuild_Tlist_$find_UNBOUNDOBJ (addr(bld), C.name_operand, "", null() );
     do while (UNBOUNDOBJp ^= null() );
          call mbuild_display_$UNBOUNDOBJ (C.sciP, addr(UNBOUNDOBJ), string(C.displayS), 1);
          foundItem = T;
	UNBOUNDOBJp = mbuild_Tlist_$find_UNBOUNDOBJ (addr(bld), C.name_operand, "", UNBOUNDOBJp );
          end;

     SegP = mbuild_Tlist_$find_Seg (addr(bld), C.name_operand, "", null() );
     do while (SegP ^= null() );
          call mbuild_display_$Seg (C.sciP, addr(Seg), string(C.displayS), 1);
          foundItem = T;
	SegP = mbuild_Tlist_$find_Seg (addr(bld), C.name_operand, "", SegP );
          end;

     COMPILEp = mbuild_Tlist_$find_COMPILE (addr(bld), C.name_operand, "", null() );
     do while (COMPILEp ^= null() );
          call mbuild_display_$COMPILE (C.sciP, addr(COMPILE), string(C.displayS), 1);
          foundItem = T;
	COMPILEp = mbuild_Tlist_$find_COMPILE (addr(bld), C.name_operand, "", COMPILEp );
          end;

     if ^foundItem then
          call ssu_$print_message (AsciP, mbuild_et_$no_Seg, "-Seg ^a", C.name_operand);
     return;

     end print_Seg;
%page;    
/* ----------------------------------------------------------------------
   ROUTINE:  print_after_scan

   Display information about segments found by a scan or read request,
   in an order resembling the post-analyze display of structures.


   INPUT:  build_data.scan_Tb: list of Seg structures found by scan request,
	   with items sorted intelligently by type and bound_seg as the
	   list was constructed by scan/read requests.

  build_data elements   (Diagram after request: scan)
  - - - - - - - - - -
                Seg(source)  Seg(Include)  Seg(Info)  Seg(bindfile)  Seg(source_arch)  Seg(<other>)
     scan_Tb:    -scan_Td     -scan_Td      -scan_Td   -scan_Td       -scan_Td          -scan_Td
/* ---------------------------------------------------------------------- */

  dcl 1 briefS aligned like display_switches_Seg;

print_after_scan:
     proc ();

     SegP = Tlist_first_item (addr(bld.scan_Tb));
     if SegP ^= null() then
          call ioa_$nnl ("^/Segments found by ^a request:", bld.scan_Tb_via_request);

  dcl  prior_archive_title char(32) var init("");
  dcl  prior_type_name char(32) var init("");

     call ioa_ ("");
     do SegP = SegP  repeat Tlist_next_item (addr(Seg.scan_Td))  while (SegP ^= null());
	call print_one_Seg (C.sciP, SegP, prior_archive_title, prior_type_name);

          if  Seg.type = "source_arch"  then do;            /* For Seg(source_arch) being ADDed, list components.     */

  dcl  comps (100) char(32) var,
      (compI, compsN) fixed bin;
               
               call mbuild_library_$archive_table (bld.directory, Seg.name, "", comps, compsN, code);
               do compI = 1 to compsN;
                    call ioa_ ("^7tsource:^28t^a", comps(compI));
                    end;
               end;

          end;

     end print_after_scan;
%page;
print_one_Seg:
     proc (AsciP, ASegP, Aprior_archive_title, Aprior_type_name);

  dcl  AsciP ptr;
  dcl  ASegP ptr,
      1 ASeg aligned like Seg based(ASegP);
  dcl (Aprior_archive_title, Aprior_type_name) char(32) var;

  dcl  indent fixed bin;

     pdmP = ASeg.build_typeP;
          
     if ASeg.archive_name ^= "" & ASeg.archive_name ^= Aprior_archive_title  then do;
	Aprior_archive_title = ASeg.archive_name;
	call ioa_ ("^/  ^a:", ASeg.archive_name);
	Aprior_type_name = ASeg.type;
	end;

     if ASeg.type = "source_arch" & ASeg.name ^= Aprior_archive_title  then do;
	Aprior_archive_title = ASeg.name;
	call ioa_ ("^/  ^a:", ASeg.name);
	Aprior_type_name = ASeg.type;
	end;

     if ASeg.type ^= Aprior_type_name then do;
	Aprior_type_name = ASeg.type;
	call ioa_("");
	end;

     if mbuild_data_$important_type (ASeg.type) then do;
	briefS = F;
	briefS.typeS, briefS.libraryS, briefS.headerS, briefS.add_del_namesS = T;
	end;
     else do;
	briefS = F;
	briefS.structureS, briefS.typeS, briefS.libraryS, briefS.headerS, briefS.add_del_namesS = T;
	end;
          
     if  ASeg.type = "bindfile" | ASeg.type = "source_arch"  then
	indent = 5;
     else if ASeg.type = "source" & ASeg.archive_name ^= "" then
	indent = 5;
     else indent = 3;

     if  ASeg.type = "source" & ASeg.UNBOUNDOBJp ^= null()  then 
						/* For an unbound source already having its UNBOUNDOBJ    */
						/*  defined (by a read request) with add/del names...     */
	call mbuild_display_$UNBOUNDOBJ (AsciP, ASeg.UNBOUNDOBJp, Sbits(), 3);

     call mbuild_display_$Seg (AsciP, ASegP, Sbits(), indent);

     end print_one_Seg;
%page;
/* ----------------------------------------------------------------------
   ROUTINE:     print_after_analyze

   Print information in Build Script Language about segments identified
   by the most recent analyze request.  This includes all information 
   summarizing the changeset, broken down by installable-segment types.


   ENTRYPOINT:  print_after_analyze_in_save_format

   Prints same information as print_after_analyze(), preceded by any 
   Description field set by the installer.  The save request uses this
   format when creating the Build_script file.

   INPUTS:

  build_data elements   (Diagram after request: analyze)
  - - - - - - - - - -
                         Seg(mb_script)
mbuild_support_Tb:        -pdm_Td
                                                                          UNBOUNDOBJ
    UNBOUNDOBJ_Tb:                                                         -UNBOUNDOBJ_Td   
                                                 Seg(bindfile)              sP
      bindfile_Tb:                                -pdm_Td                    |
                                    bindfileP - -  BOUNDOBJp                 |
                                  BOUNDOBJ                                   |
      BOUNDOBJ_Tb:                 -BOUNDOBJ_Td                              |
                                    sourceArchsN                             |
                                    sourceArchs_Tb                           |
                                    /                                        |
                                archs_Td- - - - - - - - - archs_Td           |
                              Seg(source_arch)          Seg(source_arch)     |
source_archive_Tb:             -pdm_Td                   -pdm_Td             |
                                inArch_Tb                 inArch_Tb          |
                                /                              \             |
                        inArch_Td- - - - - inArch_Td          inArch_Td     UNBOUNDOBJp
                      Seg(source)       Seg(source)         Seg(source)    Seg(source)
        source_Tb:     -pdm_Td           -pdm_Td             -pdm_Td        -pdm_Td      
                        COMPILEp          COMPILEp            COMPILEp       COMPILEp
                            \                   \                   \               \    
                            sP oP               sP oP               sP oP           sP oP
                          COMPILE             COMPILE             COMPILE         COMPILE
       COMPILE_Tb:         -COMPILE_Td         -COMPILE_Td         -COMPILE_Td     -COMPILE_Td            

                       Seg(include)  Seg(info)     Seg(<other>) 
   target_only_Tb:      -pdm_Td       -pdm_Td       -pdm_Td     ...

                       Seg(exec_com)
 object_x_only_Tb:      -pdm_Td

                       Seg(listing)
       listing_Tb:      -pdm_Td

/* ---------------------------------------------------------------------- */

print_after_analyze:
     proc ();

     briefS = F;
     briefS.typeS, briefS.libraryS, briefS.headerS = T;

     if ^Tlist_is_empty (addr(bld.mbuild_support_Tb)) then do;
          call ioa_ ("");
          do SegP = Tlist_first_item (addr(bld.mbuild_support_Tb))
             repeat Tlist_next_item  (addr(Seg.pdm_Td)) while (SegP ^= null());
               call mbuild_display_$Seg (C.sciP, SegP, Sbits(), 2);
               end;
          end;

     do BOUNDOBJp = Tlist_first_item (addr(bld.BOUNDOBJ_Tb))
             repeat Tlist_next_item  (addr(BOUNDOBJ.BOUNDOBJ_Td)) while (BOUNDOBJp ^= null());

          briefS = F;
          briefS.typeS, briefS.libraryS, briefS.headerS = T;

          call ioa_ ("");
          call mbuild_display_$BOUNDOBJ (C.sciP, addr(BOUNDOBJ), Sbits(), 2);

          briefS = F;
          briefS.typeS, briefS.headerS = T;

          if BOUNDOBJ.bindfileP ^= null then
               call mbuild_display_$Seg (C.sciP, BOUNDOBJ.bindfileP, Sbits(), 6);

          do sArchP = Tlist_first_item (addr(BOUNDOBJ.sourceArchs_Tb))
               repeat Tlist_next_item  (addr(sArch.archs_Td))  while (sArchP ^= null());
                    
               if (sArch.operation = "ADD" | BOUNDOBJ.sourceArchsN > 1) then
                    call mbuild_display_$Seg (C.sciP, sArchP, Sbits(), 4);
               
               do SegP = Tlist_first_item (addr(sArch.inArch_Tb))
                  repeat Tlist_next_item  (addr(Seg.inArch_Td))  while (SegP ^= null());
                    call mbuild_display_$Seg (C.sciP, SegP, Sbits(), 6);
                    end;
               end;
          end;

     do UNBOUNDOBJp = Tlist_first_item (addr(bld.UNBOUNDOBJ_Tb))
             repeat Tlist_next_item  (addr(UNBOUNDOBJ.UNBOUNDOBJ_Td)) while (UNBOUNDOBJp ^= null());

          briefS = F;
          briefS.typeS, briefS.libraryS, briefS.headerS = T; briefS.add_del_namesS = T;

          call ioa_ ("");
          call mbuild_display_$UNBOUNDOBJ (C.sciP, addr(UNBOUNDOBJ), Sbits(), 2);

          briefS = F;
          briefS.typeS, briefS.headerS = T; briefS.add_del_namesS = F;

          if UNBOUNDOBJ.sourceP ^= null then
               call mbuild_display_$Seg (C.sciP, UNBOUNDOBJ.sourceP, Sbits(), 6);
          end;


  dcl  firstS bit(1) aligned;

     briefS = F;
     briefS.typeS, briefS.libraryS, briefS.headerS = T;

     firstS = T;
     do SegP = Tlist_first_item (addr(bld.target_only_Tb))  /* Display any Include files.                             */
        repeat Tlist_next_item  (addr(Seg.pdm_Td))  while (SegP ^= null());
          if Seg.type = "Include" then do;
               if firstS then do;
                    call ioa_ ("");
                    firstS = F;
                    end;
               call mbuild_display_$Seg (C.sciP, addr(Seg), Sbits(), 2);
               end;
          end;


     briefS = F;
     briefS.typeS, briefS.libraryS, briefS.headerS = T; briefS.add_del_namesS = T;

     firstS = T;
     do SegP = Tlist_first_item (addr(bld.target_only_Tb))  /* Display any Info files.                                */
        repeat Tlist_next_item  (addr(Seg.pdm_Td))  while (SegP ^= null());
          if Seg.type = "Info" then do;
               if firstS then do;
                    firstS = F;
                    call ioa_("");
                    end;
               call mbuild_display_$Seg (C.sciP, addr(Seg), Sbits(), 2);
               end;
          end;

     briefS = F;
     briefS.structureS, briefS.typeS, briefS.libraryS, briefS.headerS = T; briefS.add_del_namesS = T;

     firstS = T;
     do SegP = Tlist_first_item (addr(bld.target_only_Tb))  /* Search for first non-info, non-include seg in          */
                                                            /*  target_only thread.                                   */
        repeat Tlist_next_item  (addr(Seg.pdm_Td))  while (SegP ^= null());
          if ^(Seg.type = "Include" | Seg.type = "Info") then do;
               if firstS then do;
                    firstS = F;
                    call ioa_("");
                    end;
               call mbuild_display_$Seg (C.sciP, addr(Seg), Sbits(), 2);
               end;
          end;

     briefS = F;
     briefS.structureS, briefS.typeS, briefS.libraryS, briefS.headerS = T; briefS.add_del_namesS = T;

     firstS = T;
     do SegP = Tlist_first_item (addr(bld.object_x_only_Tb))/* Display any Segs on the object_x_only thread.	        */
        repeat Tlist_next_item  (addr(Seg.pdm_Td))  while (SegP ^= null());
	if firstS then do;
	     firstS = F;
	     call ioa_("");
	     end;
	call mbuild_display_$Seg (C.sciP, addr(Seg), Sbits(), 2);
          end;
     return;

     end print_after_analyze;


Sbits:                                                      /* KLUDGE: pl1 -ot tends to move bit catenations          */
     proc () returns (bit(36) aligned);                     /*   (string builtin) around in the code.                 */
     return ( string(briefS) | string(C.displayS) );
     end Sbits;
%page;
/* ----------------------------------------------------------------------
   ROUTINE:  print_thread

   Prints default information about structures found on a given threaded list.
   ---------------------------------------------------------------------- */

  dcl  THREADS_ALL fixed bin int static options(constant) init(19);

print_thread:
     proc();

  dcl  title char(32) var;
  dcl  anchorP ptr;

     if string(C.displayS) = F then do;                     /* If user didn't give display options, set defaults      */
          briefS = F;
          briefS.typeS, briefS.libraryS, briefS.headerS, briefS.add_del_namesS = T;       
          end;

     goto LIST(C.thread_type);

LIST(THREADS_ALL):
     do C.thread_type = PDM_mbuild_support, 
          STRUCT_BOUNDOBJ, PDM_bindfile, PDM_Bound_obj, PDM_source_arch, PDM_object_arch,
          STRUCT_UNBOUNDOBJ, 
          PDM_source, STRUCT_COMPILE, PDM_Unbound_obj, PDM_listing, SEG_INTERMEDIATE,
          PDM_target_only,
	PDM_object_x_only,
          SEG_scan, STRUCT_Seg;
          call print_thread();
          end;
     return;


LIST(STRUCT_BOUNDOBJ):
     if Tlist_is_empty (addr(bld.BOUNDOBJ_Tb)) then return;
     briefS = T; briefS.typeS = F;
     call ioa_ ("BOUNDOBJ_Tb:");
     do BOUNDOBJp = Tlist_first_item (addr(bld.BOUNDOBJ_Tb))
             repeat Tlist_next_item  (addr(BOUNDOBJ.BOUNDOBJ_Td))  while (BOUNDOBJp ^= null());
          call mbuild_display_$BOUNDOBJ (C.sciP, addr(BOUNDOBJ), Sbits(), 3);
          end;
     return;

LIST(STRUCT_COMPILE):
     if Tlist_is_empty (addr(bld.COMPILE_Tb)) then return;
     briefS = T; briefS.typeS = F;
     call ioa_ ("COMPILE_Tb:");
     do COMPILEp = Tlist_first_item (addr(bld.COMPILE_Tb))
             repeat Tlist_next_item  (addr(COMPILE.COMPILE_Td))  while (COMPILEp ^= null());
          call mbuild_display_$COMPILE (C.sciP, addr(COMPILE), Sbits(), 3);
          end;
     return;

LIST(STRUCT_UNBOUNDOBJ):
     if Tlist_is_empty (addr(bld.UNBOUNDOBJ_Tb)) then return;
     briefS = T; briefS.typeS = F;
     call ioa_ ("UNBOUNDOBJ_Tb:");
     do UNBOUNDOBJp = Tlist_first_item (addr(bld.UNBOUNDOBJ_Tb))
             repeat Tlist_next_item  (addr(UNBOUNDOBJ.UNBOUNDOBJ_Td))  while (UNBOUNDOBJp ^= null());
          call mbuild_display_$UNBOUNDOBJ (C.sciP, addr(UNBOUNDOBJ), Sbits(), 3);
          end;
     return;

LIST(STRUCT_Seg):
     if Tlist_is_empty (addr(bld.Seg_Tb)) then return;
     briefS = F; briefS.structureS = T; briefS.typeS = T; briefS.libraryS = T; briefS.headerS = T; briefS.add_del_namesS = T;
     call ioa_ ("Seg_Tb:");
     do SegP = Tlist_first_item (addr(bld.Seg_Tb))
        repeat Tlist_next_item  (addr(Seg.Seg_Td))  while (SegP ^= null());
          call mbuild_display_$Seg (C.sciP, addr(Seg), Sbits(), 3);
          end;
     return;


LIST(SEG_INTERMEDIATE):
     if Tlist_is_empty (addr(bld.INTERMEDIATE_Tb)) then return;
     briefS = F; briefS.structureS = T; briefS.typeS = T; briefS.libraryS = T; briefS.headerS = T;
     call ioa_ ("INTERMEDIATE_Tb:");
     do SegP = Tlist_first_item (addr(bld.INTERMEDIATE_Tb))
        repeat Tlist_next_item  (addr(Seg.INTERMEDIATE_Td))  while (SegP ^= null());
          call mbuild_display_$Seg (C.sciP, addr(Seg), Sbits(), 3);
          end;
     return;

LIST(SEG_scan):
     if Tlist_is_empty (addr(bld.scan_Tb)) then return;
     briefS = F; briefS.structureS = T; briefS.typeS = T; briefS.libraryS = T; briefS.headerS = T; briefS.add_del_namesS = T;
     call ioa_ ("scan_Tb:");
     do SegP = Tlist_first_item (addr(bld.scan_Tb))
        repeat Tlist_next_item  (addr(Seg.scan_Td))  while (SegP ^= null());
          call mbuild_display_$Seg (C.sciP, addr(Seg), Sbits(), 3);
          end;
     return;
     

LIST(PDM_source):
     briefS = T; briefS.structureS = F;
     anchorP = addr(bld.source_Tb);
     goto LIST_PARADIGM_THREAD;

LIST(PDM_bindfile):
     briefS = F; briefS.typeS = T; briefS.libraryS = T; briefS.headerS = T;
     anchorP = addr(bld.bindfile_Tb);
     goto LIST_PARADIGM_THREAD;

LIST(PDM_source_arch):
     briefS = T; briefS.structureS = F;
     anchorP = addr(bld.source_arch_Tb);
     goto LIST_PARADIGM_THREAD;

LIST(PDM_object_arch):
     briefS = T; briefS.structureS = F;
     anchorP = addr(bld.object_arch_Tb);
     goto LIST_PARADIGM_THREAD;

LIST(PDM_Bound_obj):
     briefS = F; briefS.typeS = T; briefS.libraryS = T; briefS.headerS = T;
     anchorP = addr(bld.Bound_obj_Tb);
     goto LIST_PARADIGM_THREAD;

LIST(PDM_Unbound_obj):
     briefS = T; briefS.structureS = F;
     anchorP = addr(bld.Unbound_obj_Tb);
     goto LIST_PARADIGM_THREAD;

LIST(PDM_target_only):
     briefS = F; briefS.structureS = T; briefS.typeS = T; briefS.libraryS = T; briefS.headerS = T; briefS.add_del_namesS = T;
     anchorP = addr(bld.target_only_Tb);
     briefS.structureS = T;
     goto LIST_PARADIGM_THREAD;

LIST(PDM_object_x_only):
     briefS = F; briefS.structureS = T; briefS.typeS = T; briefS.libraryS = T; briefS.headerS = T; briefS.add_del_namesS = T;
     anchorP = addr(bld.object_x_only_Tb);
     briefS.structureS = T;
     goto LIST_PARADIGM_THREAD;

LIST(PDM_listing):
     briefS = F; briefS.structureS = T; briefS.typeS = T; briefS.libraryS = T; briefS.headerS = T;
     anchorP = addr(bld.listing_Tb);
     briefS.structureS = T;
     goto LIST_PARADIGM_THREAD;

LIST(PDM_mbuild_support):
     briefS = F; briefS.structureS = F; briefS.typeS = T;
     anchorP = addr(bld.mbuild_support_Tb);
     goto LIST_PARADIGM_THREAD;

LIST_PARADIGM_THREAD:
     if Tlist_is_empty (anchorP) then return;
     call ioa_ ("^a_Tb:", mbuild_info_find_$thread_selector_ID_for_value(C.thread_type));
     do SegP = Tlist_first_item (anchorP)
        repeat Tlist_next_item  (addr(Seg.pdm_Td))  while (SegP ^= null());
          call mbuild_display_$Seg (C.sciP, addr(Seg), Sbits(), 3);
          end;
     return;

LIST(PDM_source_x_only):
     call ioa_ ("Per-paradigm list ^a_Tb not supported by mbuild.", 
          mbuild_info_find_$thread_selector_ID_for_value(C.thread_type));
     return;

     end print_thread;
%page;
/* ----------------------------------------------------------------------
   ROUTINE:  print_new_Segs()

   Look for original-content segments added since build script was last 
   saved.  A request sequence:
                scan
                read
   will have built a list of all Segs in install directory in Seg_Tb list; 
   and a list of all Segs found in build script file in scan_Tb list.
   Report any non-derived-content Segs in Seg_Tb not in scan_Tb.
    Exceptions:  Seg(source) which are components of Seg(source_arch) for
                 new bound segment being ADDed.

   A read request automatically calls to display this new information
   before printing its interpretation of data read from the Build_script.
   ---------------------------------------------------------------------- */

print_new_Segs:
     proc();

  dcl 1 scanSeg aligned like Seg based (scanSegP),
       scanSegP ptr;
  dcl  needs_heading bit(1) aligned init(T);

     do SegP = Tlist_first_item (addr(bld.Seg_Tb))
        repeat Tlist_next_item  (addr(Seg.Seg_Td)) while (SegP ^= null() );
	if  ^Tlist_member(addr(Seg.scan_Td))  then do;	/* Any Seg() not in scan_Tb list is either:               */
                                                            /*  - a derived segment created since last scan request;  */
						/*  - an mbuild_support segment; or		        */
                                                            /*  - an original content segment not listed in build     */
                                                            /*    script parsed by most recent read request.          */
               if   mbuild_data_$exists_Seg (addr(bld), SegP)  &
	         ^mbuild_data_$derived_Seg (SegP)  &  
	         ^mbuild_data_$mbuild_support_Seg (SegP)  &
	         ^mbuild_data_$new_source_component (SegP)  then do;
                    if  needs_heading  then do;
                         call ioa_ ("^/Original-content segments not in build script:");
                         needs_heading = F;
                         end;
                    call ioa_ ("^6t^a:^20t ^a", Seg.type, Seg.name);
                    end;
               end;
          end;

     end print_new_Segs;
%page;
/* ------------------------------------------------------------
   ROUTINE:  controlArgs

   Process print -control_arg arguments.
   ------------------------------------------------------------ */

controlArgs:
     proc (c);

  dcl 1 c aligned like C;                                   /*  control arg specification data                   (in) */

     do while (args_remain());
          call ssu_$arg_ptr (c.sciP, argI+1, argP, argL);   /* Conditionally read next arg to command/af/request      */
                                                  
          if isControlArg(arg) then do;

               if       arg = "-sc"     | arg = "-scan"           then do; c.operationS = F; c.scanS = T;
                                                                           c.displayS = F; 
                                                                           c.structureS, c.typeS, c.add_del_namesS = T;
                                                                           end;
               else if  arg = "-az"     | arg = "-analyze" |
                        arg = "-anal"   | arg = "-analysis"       then do; c.operationS = F; c.analyzeS = T;
                                                                           c.displayS = F;
                                                                           end;
               else if                    arg = "-new"            then do; c.operationS = F; c.newS = T;
                                                                           c.displayS = F;
                                                                           end;
               else if  arg = "-unk"    | arg = "-unknown"        then do; c.operationS = F; c.unknownS = T;
                                                                           c.displayS = F;
                                                                           end;
               else if  arg = "-seg"    | arg = "-Seg"            then do; c.operationS = F; c.SegS = T; 
                                                                           c.displayS = T;
                                                                           end;
               else if  arg = "-ls"     | arg = "-list"  |
                        arg = "-th"     | arg = "-thread"         then do; c.operationS = F; c.threadS = T; 
                                                                           c.displayS = F; 
                                                                           c.name_operand = "all";
                                                                           end;
               else if  arg = "-desc"   | arg = "-description"    then do; c.operationS = F; c.describeS = T;
                                                                           end;
               else if  arg = "-dir"    | arg = "-directory"      then do; c.operationS = F; c.directoryS = T;
                                                                           end;
               else if  arg = "-ld"     | arg = "-log_dir"        then do; c.operationS = F; c.log_dirS = T;
                                                                           end;
               else if                    arg = "-save_format" |
                        arg = "-sv"     | arg = "-save"           then c.saveS = T;


               else if  arg = "-a"      | arg = "-all"            then do; c.displayS = T; c.structureS = F; end;
               else if                    arg = "-structure"      then c.structureS = T;
               else if  arg = "-tp"     | arg = "-type"           then c.typeS = T;
               else if  arg = "-lb"     | arg = "-library"        then c.libraryS = T;
               else if  arg = "-he"     | arg = "-header"         then c.headerS = T;
               else if  arg = "-ac"     | arg = "-archive"        then c.archiveS = T;
               else if  arg = "-ptr"    | arg = "-pointer"        then c.pointersS, c.add_del_namesS = T;
               else if  arg = "-Tb"     | arg = "-thread_base"    then c.Tb_S = T;
               else if  arg = "-Td"     | arg = "-thread_data"    then c.Td_S = T;             
               else if  arg = "-nm"     | arg = "-name"           then c.add_del_namesS = T;

               else if                    arg = "-no_structure"   then c.structureS = F;
               else if  arg = "-ntp"    | arg = "-no_type"        then c.typeS = F;
               else if  arg = "-nlb"    | arg = "-no_library"     then c.libraryS = F;
               else if  arg = "-nhe"    | arg = "-no_header"      then c.headerS = F;
               else if  arg = "-nac"    | arg = "-no_archive"     then c.archiveS = F;
               else if  arg = "-nptr"   | arg = "-no_pointer"     then c.pointersS, c.add_del_namesS = F;
               else if  arg = "-nTb"    | arg = "-no_thread_base" then c.Tb_S = F;
               else if  arg = "-nTd"    | arg = "-no_thread_data" then c.Td_S = F;
               else if  arg = "-nnm"    | arg = "-no_name"        then c.add_del_namesS = F;

               else call ssu_$print_message (c.sciP, error_table_$badopt, 
                    "Ignoring unsupported control arg: ^a", arg);
               end;
          
          else do;                                          /* If arg is a -control_arg operand                       */
               if length(arg) > maxlength(c.name_operand) then
                    call ssu_$abort_line (c.sciP, error_table_$bigarg, 
                         "'^a' may be up to ^d characters long.", arg, maxlength(c.name_operand));
               c.name_operand = arg;
               end;

          argI = argI + 1;                                  /* Record that we processed the arg just examined above.  */
          end;

     if c.SegS & c.name_operand = "" then
          call ssu_$abort_line (AsciP, error_table_$noarg, "-Seg <seg-name>");
     if c.threadS then do;

  dcl  sels (20) char(32) var,
       selN fixed bin;

          if c.name_operand = "" then do;
               call mbuild_info_find_$thread_selector_summary (sels, selN);
               call ssu_$abort_line (AsciP, error_table_$noarg, 
                    "-thread THREADED_LIST_NAME^/^4tChoose from:^v(^/^-^a^)", selN, sels);
               end;
          else do;
               if c.name_operand = "all" then
                    c.thread_type = THREADS_ALL;
               else c.thread_type =  mbuild_info_find_$thread_selector_by_ID (c.name_operand);
               if c.thread_type <= 0 then do;
                    call mbuild_info_find_$thread_selector_summary (sels, selN);
                    call ssu_$abort_line (AsciP, mbuild_et_$unknown_thread_type,
                         "-thread ^a^/^4tChoose from:^v(^/^-^a^)", c.name_operand, selN, sels);
                    end;
               end;
          end;
     end controlArgs;
%page;
%include mbuild_display_dcls_;
%page;
%include ssu_request_dcls_;
%page;
%include mbuild_request_parms_;
%page;
%include mbuild_Tlist_;
%page;
%include mbuild_data_;
     end mbuild_print_;
