
/****^  HISTORY COMMENTS:
  1) change(2019-08-17,GDixon), approve(2019-10-27,MCR10069),
     audit(2020-01-20,Swenson), install(2020-01-20,MR12.6g-0035):
     mbuild_request:  clean, cl
  2) change(2020-01-26,GDixon), approve(2020-01-26,MCR10079),
     audit(2020-02-02,Swenson), install(2020-02-02,MR12.6g-0045):
      A) When analyze request is invoked (if needed), add -no_progress control.
  3) change(2020-11-09,GDixon), approve(2021-02-22,MCR10086),
     audit(2021-03-17,Swenson), install(2021-03-17,MR12.6g-0051):
      A) Change for revised calling sequence of mbuild_Tlist_$find_Seg(...).
                                                   END HISTORY COMMENTS */

mbuild_clean_:
     proc (AsciP, Abuild_dataP) returns (bit(1) aligned);

  dcl  PROC char(13) int static options(constant) init("mbuild_clean_");

     return (check_parms (mbuild_data_version_3));
/* -------------------- */

  dcl  command_query_$yes_no entry() options(variable);
  dcl  delete_$path entry (char(*), char(*), bit(36) aligned, char(*), fixed bin(35));
  dcl  ioa_ entry() options(variable);

  dcl  mbuild_$request entry (ptr, char(*), bit(1) aligned) options(variable);

  dcl  mbuild_Tlist_$empty_request_list entry (ptr);
  dcl  mbuild_Tlist_$find_Seg entry (ptr, char(*) var, char(*) var, ptr) returns(ptr);

  dcl  mbuild_archive_$clean entry (ptr, ptr);
  dcl  mbuild_compile_$clean entry (ptr, ptr);

  dcl  mbuild_data_$clean_build_progress_update entry (ptr);
  dcl  mbuild_data_$derived_Seg entry (ptr) returns(bit(1) aligned);
  dcl  mbuild_data_$disconnect_Seg entry (ptr);
  dcl  mbuild_data_$exists_Seg entry (ptr, ptr) returns(bit(1) aligned);
  dcl  mbuild_data_$get_build_progress entry (ptr) returns(bit(*) aligned);

  dcl  mbuild_install_$clean entry (ptr, ptr);

  dcl  mbuild_library_$get_primary_name entry (ptr, char(*), char(*), fixed bin(35)) returns(char(32));

  dcl (addr, null, rtrim, string) builtin;

  dcl  cleanup  condition;

  dcl (error_table_$badarg,
       error_table_$badopt,
       error_table_$noentry
        )fixed bin(35) ext static;

%page;
/* ======================================================================
   REQUEST:  clean

    - Ensure install directory has been scanned (via scan or read request).
    - Perform analyze request, if not already done.
    - Create a list of derived content segments.  These are associated with
      COMPILE and BOUNDOBJ relationship structures, located on the lists:
                           COMPILE_Tb  BOUNDOBJ_Tb  
    - Add to this list:
       - Any Seg() ever created that is not currently on the scan_Tb list
         (of original-content segments).  These are either:
          - Derived-content segments which were intentionally omitted by scan.
          - Derived-content segments created since the scan.
         Original-content segments added to install directory since the scan
         are recognized by clean, and are not added to the clean list.
    - Ask permission to remove all derived segments (unless -brief was given).
       - delete the actual segment; and 
       - disconnect/abandon its Seg structure.


  build_data elements   (Diagram 8)
  - - - - - - - - - -
                                                                                 UNBOUNDOBJ
    UNBOUNDOBJ_Tb:                                                                -UNBOUNDOBJ_Td   
                                                                                   sP
   object_arch_Tb:     -pdm_Td               -pdm_Td               -pdm_Td          |
                      Seg(object_arch)      Seg(object_arch)      Seg(object_arch)  |
                             archs_Td- - - -  archs_Td- - - - - - - archs_Td        |
                                    \                                               |
      bindfile_Tb:                   \                        -pdm_Td               |
                                     objectArchs_Tb          Seg(bindfile)          |
                                     bindfileP - - - - - - - - BOUNDOBJp            |
                                   BOUNDOBJ                                         |
      BOUNDOBJ_Tb:                  -BOUNDOBJ_Td                                    |
                                     sourceArchsN                                   |
                                     Bound_objP- - - - - - - - BOUNDOBJp            |
                                     sourceArchs_Tb          Seg(Bound_obj)         |
     Bound_obj_Tb:                     /                      -pdm_Td               |
                                      /                                             |
                                archs_Td- - - - - - - - - archs_Td                  |
                              Seg(source_arch)          Seg(source_arch)            |
   source_arch_Tb:             -pdm_Td                   -pdm_Td                    |
                                inArch_Tb                 inArch_Tb                 |
                               /         \                     \                    |
                        inArch_Td         inArch_Td          inArch_Td      UNBOUNDOBJp
                      Seg(source)       Seg(source)        Seg(source)    Seg(source)
        source_Tb:     -pdm_Td           -pdm_Td            -pdm_Td        -pdm_Td      
                        COMPILEp          COMPILEp           COMPILEp       COMPILEp
                            \                 \                  \              \    Seg(Unbound_obj) 
   Unbound_obj_Tb:           \                 \                  \              \    -pdm_Td   
                              \                 \                  \              \    COMPILEp
                               \   /             \   /              \   /          \    /
                               sP oP             sP oP              sP oP          sP oP
                             COMPILE           COMPILE            COMPILE        COMPILE
       COMPILE_Tb:            -COMPILE_Td       -COMPILE_Td        -COMPILE_Td    -COMPILE_Td   
                               lP                                   iP
                                |                                    |
                               COMPILEp                              |
                             Seg(listing)                            |
       listing_Tb:            -pdm_Td                              COMPILEp
                                                                 Seg(intermediate)
  INTERMEDIATE_Tb:                                                -INTERMEDIATE_Td   

                       Seg(include)    Seg(info)    Seg(exec_com)   Seg(<other>) 
   target_only_Tb:      -pdm_Td         -pdm_Td      -pdm_Td         -pdm_Td      ...

                       Seg(Build_script)  Seg(Build_exec_com)  Seg(Build_io)  Seg(Build_log)
mbuild_support_Tb:      -pdm_Td            -pdm_Td              -pdm_Td        -pdm_Td

/* ==================================================================================================== */

clean_request:
     entry(AsciP, Abuild_dataP);

  dcl 1 C aligned,
      2 sciP ptr,
      2 S,
        3 opS aligned,
	4 (allS,					/* All derived-content segments are candidates for clean  */
	   installedS,				/* Only derived-content from compile/archive_prep are     */
						/*  candidates for clean.			        */
	   intermediateS,				/* Only 1st step derived object from a 2-step compile     */
						/*  are candidates for clean.			        */
	   listingsS				/* Only listings are candidates for clean.	        */
             ) bit(1) unaligned,
        3 displayS aligned,
          4 (no_queryS				/* T: don't ask whether to clean candidates; just delete  */
	   ) bit(1) unaligned;			/*    them.				        */

     C.sciP = AsciP;
     C.S = F;
     C.installedS = T;

     call arg_setup (AsciP);

     if args_remain() then				/* User gives -Control_args			        */
	call controlArgs(C);


/* ----------------------------------------------------------------------
    - Ensure install directory has been scanned (via scan or read request).
   ---------------------------------------------------------------------- */

     string(bld_progress) = mbuild_data_$get_build_progress (addr(bld));
     if ^bld_progress.scannedS then do;
	call ssu_$abort_line (C.sciP, 0,
	     "clean needs data from request:  scan  or  read");
	end;					/*  - user decides whether to redo scan, or use data      */
						/*    captured in build script file.		        */

/* ----------------------------------------------------------------------
    - Perform analyze request, if not already done.
   ---------------------------------------------------------------------- */

     if ^bld_progress.analyzedS then do;		/* Don't know what to clean until after analyze.	        */
	call ioa_ ("^/^- Analyzing...");
	call mbuild_$request (C.sciP, "analyze -no_clean -no_progress;", F);
	end;

/* ----------------------------------------------------------------------
    - Create a list of derived content segments from the following requests:
        compile  archive_prep  install_ec
   ---------------------------------------------------------------------- */

  dcl 1 req aligned like request;			/* Provide storage for request structure.	        */
     requestP = addr(req);				/*  - per-request threaded lists are valid only during    */
     request.info = "";				/*    execution of that one request.  At end of request,  */
     request.struct = "req";				/*    the list must be emptied.		        */
     request.name = ssu_$get_request_name(C.sciP);
     call Tlist_initialize (addr(request.request_Tb), addr(request));
						/* request_Tb is a list for Seg structures.	        */
     on cleanup call clean_janitor(addr(request));

     if (S.allS | S.installedS)  then do;
	call mbuild_compile_$clean (addr(bld), addr(request));
	call mbuild_archive_$clean (addr(bld), addr(request));
	end;
     
     if  S.allS  then
	call mbuild_install_$clean (addr(bld), addr(request));
     
     if (S.allS | S.listingsS)  then do;		/* Just delete listings (.list) segments.	        */
	do SegP = Tlist_first_item (addr(bld.listing_Tb))
	   repeat Tlist_next_item  (addr(Seg.Seg_Td)) while (SegP ^= null() );
	     if ^Tlist_member (addr(Seg.request_Td)) then do;
						/*  - not already on clean list?		        */
		if  mbuild_data_$exists_Seg (addr(bld), SegP) &
		    mbuild_data_$derived_Seg (SegP)  then do;
		     call Tlist_add_to_tail (addr(request.request_Tb), addr(Seg), addr(Seg.request_Td));
		     end;
		end;
	     end;
	end;

     if (S.allS | S.intermediateS)  then do;		/* Just delete intermediate segments.		        */
	do SegP = Tlist_first_item (addr(bld.Seg_Tb))
	   repeat Tlist_next_item  (addr(Seg.Seg_Td)) while (SegP ^= null() );
	     if ^Tlist_member (addr(Seg.request_Td)) then do;
						/*  - not already on clean list?		        */
		if  Seg.produced_by_compiler ^= ""  then do;
		     if  mbuild_data_$exists_Seg (addr(bld), SegP)  then do;
			call Tlist_add_to_tail (addr(request.request_Tb), addr(Seg), addr(Seg.request_Td));
			end;
		     end;
		end;
	     end;
	end;
	
     if (S.listingsS | S.intermediateS)  then goto ASK;	/* Skip code below unless -all or -installed was given.   */

/* ----------------------------------------------------------------------
    - Add to what was found above any Seg which is:
        - not on the scanTb list;
        - exists in install dir;
        - has a name that identifies it as a derived seg content, and
          which is the primary name on that segment.
    This strategy only works if installation directory was scanned.  
    That's why it is scanned by default when invoking mbuild.
   ---------------------------------------------------------------------- */

  dcl 1 primarySeg aligned like Seg based (primarySegP),
       primarySegP ptr;
  dcl  primary_seg_name char(32) var;

     do SegP = Tlist_first_item (addr(bld.Seg_Tb))
        repeat Tlist_next_item  (addr(Seg.Seg_Td)) while (SegP ^= null() );
	if ^Tlist_member (addr(Seg.scan_Td)) then do;	/* Any Seg() not in scan_Tb list was ignored by scan as   */
						/*  a derived segment, and should be cleaned.	        */
	     if ^Tlist_member (addr(Seg.request_Td)) then do;
						/*  - not already on clean list?		        */
		if  mbuild_data_$exists_Seg (addr(bld), SegP) &
		    mbuild_data_$derived_Seg (SegP)  then do;
						/*  - has a segment in install dir, and a name which      */
						/*    identifies derived-content seg.		        */
		     
						/* Could be unusual case:  Seg(Unbound_obj).name can also */
						/*  be one of the names on Seg(Bound_obj) if that	        */
						/*  Seg(Unbound_obj) is a component of a Seg(object_arch) */
		     primary_seg_name = 
			rtrim ( mbuild_library_$get_primary_name (addr(bld), bld.directory, (Seg.name), code) );
		     if Seg.name ^= primary_seg_name then do;
			primarySegP = mbuild_Tlist_$find_Seg (addr(bld), primary_seg_name, "", null() );
			if primarySegP ^= null() then
			     goto SKIP_Seg;		/* Seg().name = primary_seg_name exists!  Process clean   */
			end;			/*  decision on basis of primary_Seg characteristics.     */
		     call Tlist_add_to_tail (addr(request.request_Tb), addr(Seg), addr(Seg.request_Td));
SKIP_Seg:		     end;
		end;
	     end;
	end;
%page;
/* ----------------------------------------------------------------------
    - Ask permission to remove all derived segments (unless -brief was given).
       - delete the actual segment; and 
       - disconnect/abandon its Seg structure.
   ---------------------------------------------------------------------- */

  dcl 1 delS aligned like delete_options;
  dcl  next_SegP ptr;
  dcl 1 source aligned like Seg based (sourceP),
       sourceP ptr;
  dcl  yesS bit(1) aligned;

ASK: if  Tlist_is_empty (addr(request.request_Tb))  then return;
     if C.no_queryS then 
	yesS = T;
     else do;
	call ioa_ ("  Derived-content segments eligible for clean:");
	do SegP = Tlist_first_item (addr(request.request_Tb))
	   repeat Tlist_next_item  (addr(Seg.request_Td)) while (SegP ^= null() );

	     call ioa_ ("^6t^a:^22t ^a^[^- (produced by: ^a)^;^s^]", Seg.type, Seg.name,
		Seg.produced_by_compiler ^= "", Seg.produced_by_compiler);
	     end;
	call command_query_$yes_no (yesS, 0, ssu_$get_subsystem_and_request_name(C.sciP), 
	     "Do you want to remove the derived-content segments above?", "Delete the segments above?");
	end;

     if yesS then do;
	string (delS) = F;
	delS.question, delS.segment, delS.raw = T;
	do SegP = Tlist_first_item (addr(request.request_Tb))  repeat next_SegP  while (SegP ^= null() );
	     next_SegP = Tlist_next_item  (addr(Seg.request_Td));
	     call delete_$path (bld.directory, (Seg.name), string(delS), 
		ssu_$get_subsystem_and_request_name(C.sciP), code);
	     if code ^= 0 then
		call ssu_$print_message (C.sciP, code, "Deleting  ^a: ^a", Seg.type, Seg.name);
	     else call mbuild_data_$disconnect_Seg(addr(Seg));
	     end;
	end;

     call clean_janitor (addr(request));

/* ----------------------------------------------------------------------
    - If clean was performed, mark following requests as 
      not having been performed:
        compile  archive_prep  install_ec
   ---------------------------------------------------------------------- */
     if  yesS & (C.allS | C.installedS)  then
	call mbuild_data_$clean_build_progress_update (addr(bld));
     return;

clean_janitor:
     proc (ArequestP);

  dcl  ArequestP ptr;
  dcl 1 Arequest aligned like request based(ArequestP);

     call mbuild_Tlist_$empty_request_list (ArequestP);

     end clean_janitor;
%page;
/* ======================================================================
   ENTRYPOINT:  delete_Seg

   If segment is a derived-content segment:
       - delete the actual segment; and 
       - disconnect/abandon its Seg structure.
/* ====================================================================== */
delete_Seg:
     entry (AsciP, Abuild_dataP, ASegP);

  dcl  ASegP ptr;

     SegP = ASegP;
     if SegP = null() then return;

     if mbuild_data_$derived_Seg (SegP) then do;
	string (delS) = F;				/* Subroutine does not ask questions; does enable         */
	delS.force, delS.segment, delS.raw = T;		/*  -force deletion of protected derived-content files.   */

	call delete_$path (bld.directory, (Seg.name), string(delS), "", code);
	if  code ^= 0 & code ^= error_table_$noentry  then
	     call ssu_$print_message (AsciP, code, "Deleting  ^a: ^a", Seg.type, Seg.name);
	else call mbuild_data_$disconnect_Seg(addr(Seg));
	end;
     return;

%page;
/* ------------------------------------------------------------
 * Process clean -control_arg arguments.
 * ------------------------------------------------------------ */

controlArgs:
     proc (c);

  dcl 1 c aligned like C;				/*  control arg specification data                   (in) */

     do while (args_remain());
	call ssu_$arg_ptr (c.sciP, argI+1, argP, argL);	/* Conditionally read next arg to command/af/request      */
					
	if isControlArg(arg) then do;

	     if       arg = "-qya"    | arg = "-query_all"      then c.no_queryS = F;
	     else if  arg = "-nqya"   | arg = "-no_query_all"   then c.no_queryS = T;

	     else if  arg = "-a"      | arg = "-all"            then do; C.opS = F; C.allS = T; end;
	     else if  arg = "-inst"   | arg = "-installed"      then do; C.opS = F; C.installedS = T; end;
	     else if  arg = "-inter"  | arg = "-intermediate"   then do; C.opS = F; C.intermediateS = T; end;
	     else if  arg = "-ls"     | arg = "-list"         |
                                          arg = "-listings"       then do; C.opS = F; C.listingsS = T; end;

               else call ssu_$print_message (c.sciP, error_table_$badopt, 
		"Ignoring unsupported control arg: ^a", arg);
	     end;
	
	else do;					/* If arg is a -control_arg operand		        */
	     call ssu_$print_message (c.sciP, error_table_$badarg, 
		"Ignoring operand: ^a", arg);
	     end;

	argI = argI + 1;				/* Record that we processed the arg just examined above.  */
	end;

     end controlArgs;

%page;
%include ssu_request_dcls_;
%page;
%include mbuild_request_parms_;
%page;
%include delete_options;
%page;
%include mbuild_Tlist_;
%page;
%include mbuild_data_;

     end mbuild_clean_;
