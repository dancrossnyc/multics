
/****^  HISTORY COMMENTS:
  1) change(2019-08-17,GDixon), approve(2019-10-27,MCR10069),
     audit(2020-01-12,Swenson), install(2020-01-20,MR12.6g-0035):
     mbuild subroutines specific to characteristics of the Multics Libraries
     and the multics_libraries_ descriptor.
  2) change(2020-01-26,GDixon), approve(2020-01-26,MCR10079),
     audit(2020-02-02,Swenson), install(2020-02-02,MR12.6g-0045):
      A) Add mbuild_library_$compare function.
  3) change(2020-11-09,GDixon), approve(2021-02-22,MCR10086),
     audit(2021-03-17,Swenson), install(2021-03-17,MR12.6g-0051):
      A) Change mbuild_library_$search to use larger paths array when
         searching the library for a segment.  Some info segment names appear
         in many of the info directories (e.g., help.info).
  4) change(2021-02-17,GDixon), approve(2021-02-22,MCR10086),
     audit(2021-03-17,Swenson), install(2021-03-17,MR12.6g-0051):
      A) Change mbuild_library_$locate to avoid overwriting Seg.archive_name
         if it is already non-blank (was specified in build script, etc).
                                                   END HISTORY COMMENTS */

mbuild_library_:
     proc(AsciP, Abuild_dataP) returns (bit(1) aligned);

  dcl  PROC char(16) aligned int static options(constant) init("mbuild_library_");

     return (check_parms (mbuild_data_version_3));
/* ------------------------------------------------------------ */
     

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* PROGRAM:  mbuild_library_							        */
	/*									        */
	/* Function:  provide information about contents and organization of the Multics Libraries  or    */
	/*            library designated by current library_descriptor (to see which, use: lds nm); or    */
	/*            provide access to active functions [library_pathname ...] or [library_descriptor]   */
	/*            that offer such information.					        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

  dcl (nmI, nmJ) fixed bin;
  dcl  pathI fixed bin;

  dcl  cu_$evaluate_active_string entry (ptr, char(*), fixed bin, char(*) var, fixed bin(35));
  dcl  hcs_$status_ entry (char(*), char(*), fixed bin(1), ptr, ptr, fixed bin(35));
  dcl  ioa_$rsnnl entry() options(variable);
  dcl  match_star_name_ entry (char(*), char(*), fixed bin(35));
  dcl  pathname_ entry (char(*), char(*)) returns(char(168));

  dcl  mbuild_lib_names_$get_lib_names entry (ptr, ptr, bit(1) aligned) returns(ptr);

  dcl (error_table_$badarg,
       error_table_$badpath,
       error_table_$command_line_overflow,
       error_table_$nomatch,
       error_table_$too_many_names
       ) fixed bin(35) ext static;

  dcl (mbuild_et_$multiple_lib_paths,
       mbuild_et_$unexpected_event
       ) fixed bin(35) ext static;

  dcl (addr, after, before, hbound, index, lbound, min, null, rtrim) builtin;

  dcl (active_function_error, cleanup) condition;

%page;
/* ======================================================================
 *
 * Entrypoint:  mbuild_library_$replace_library_component
 *
 * Function:    replace either <lib-name> or <dir-name> in a 2-component
 *              Multics library_name:
 *                 <lib-name>.<dir-name> 
 *              Examples:  sss.source, sss.info, privileged.info, sss.include
 *
 *  Replacement operations are tricky, since the library name being updated
 *  may contain only one of the two components.
 *
 *  No attempt is made to determine if the revised library name is actually
 *  defined by the current library_descriptor.  Thus new components like
 *  "UNKNOWN" are permitted by this entrypoint.
 *
 * ====================================================================== */

replace_library_component:
     entry (Alibrary_name, Anew_lib_component, Anew_dir_component) returns (char(32) var);
     
  dcl  Alibrary_name char(*) var;			/* Multics Library name.                             (in) */
						/*  <lib-name>.<dir-name> or <lib-name> or <dir-name>     */
  dcl  Anew_lib_component char(*) var;			/*  - A replacement for <lib-name> component.	        */
						/*    If non-empty, it will replace <lib-name> in a       */
						/*    2-component input Alibrary_name; or replace entire  */
						/*    1-component Alibrary_name.		        */
  dcl  Anew_dir_component char(*) var;			/*  - A replacement for <dir-name> component.	        */
						/*    If non-empty, it will replace <dir-name> in a       */
						/*    2-component input Alibrary_name; or replace entire  */
						/*    1-component Alibrary_name.		        */
  dcl (new_lib, new_dir) char(32) var;
  dcl  revised_library char(32) var;

  dcl  known_dirnames (7,2) char(12) var int static options(constant) init(
	"source",		"s",	/*  1 */
	"object", 	"o",	/*  2 */
	"execution", 	"x",	/*  3 */
	"listings",	"~~~",	/*  4 */
	"include", 	"incl",	/*  5 */
	"i", 		"~~~",	/*  6 */
	"info",		"~~~" );	/*  7 */

     if Anew_lib_component ^= "" then do;
	new_lib = before(Anew_lib_component, ".");
	if index(Alibrary_name, ".") = 0 then do;
	     do nmI = lbound(known_dirnames,1) to hbound(known_dirnames,1);
		do nmJ = lbound(known_dirnames,2) to hbound(known_dirnames,2);
		     if Alibrary_name = known_dirnames(nmI,nmJ) & known_dirnames(nmI,nmJ) ^= "~~~" then
			go to DIR_NAME_FOUND;
		     end;
		end;
	     revised_library = new_lib;
	     go to RETURN_REVISED_LIBRARY;

DIR_NAME_FOUND:
	     revised_library = new_lib || "." || Alibrary_name;
	     end;
	else revised_library = new_lib || "." || after(Alibrary_name, ".");
	end;

     else if Anew_dir_component ^= "" then do;
	if index(Anew_dir_component,".") > 0 then
	     new_dir = before(after(Anew_dir_component, "."), ".");
	else new_dir = Anew_dir_component;
	if index(Alibrary_name, ".") = 0 then
	     if Alibrary_name ^= "" then
	          revised_library = Alibrary_name || "." || new_dir;
	     else revised_library = new_dir;
	else revised_library = before(Alibrary_name, ".") || "." || new_dir;
	end;

     else revised_library = Alibrary_name;

RETURN_REVISED_LIBRARY:
	return (revised_library);

%page;
/* ======================================================================
 *
 * Entrypoint:  mbuild_library_$locate_Seg
 *
 * Function:    Search for a given Seg().name within the current library.
 *              If Seg.library is non-blank, it is used to narrow (speed-up)
 *              the searching; if blank, all library directories are 
 *	      searched.  If Seg.library contains "UNKNOWN" components, 
 *              those are removed before searching is attempted.
 *
 * Results:     If the segment is not found:  
 *               - Seg.operation = "ADD"
 *               - Seg.library changed to include UNKNOWN lib component.
 *                  - But if Seg.build_typeP -> segt.default_library matches
 *		  only 1 library in currect descriptor, that library is
 *		  used instead of UNKNOWN.
 *              If the segment is found in only 1 library directory:
 *	        If the segment is a source_arch or object_arch:
 *	          - Seg.operation = "UPDATE"
 *                Otherwise:
 *                  - Seg.operation = "REPLACE"
 *               - Seg.library replaced by one which identifies the 
 *                 library directory containing this segment.
 *               - Seg.archive_name is set to any archive which contains
 *                 the segment (e.g., a source archive containing a 
 *                 Seg(source).
 *              If the segment is found in several library directories:
 *               - Use first path beginning ">ldd>..." and make changes 
 *                 as if it were found in only that library directory.
 *               - If none match ">ldd>...", treat library as UNKNOWN.
 *
 * NOTE: This entrypoint only uses data items in Seg.header:
 *         Seg.type, Seg.name, Seg.library, Seg.operation, Seg.archive_name
 *       Some callers pass only a pointer to these Seg.header items, rather
 *       than to a full Seg structure.  BEWARE of any changes to the 
 *       algorithm below that might reference non-header Seg data elements.
 *  
 * ====================================================================== */

locate_Seg:					/* If Seg exists in current libraries, fill in details    */
     entry (Abuild_dataP, SegP);			/*  about its library, archive, etc.		        */

/*dcl  Abuild_dataP ptr;				/*  (Use declaration in mbuild_data_.incl.pl1)	        */
/*dcl  SegP ptr;					/* Pointer to a Seg structure.		        */
						/*  (Use declaration from mbuild_data_.incl.pl1)	        */

  dcl  lib_name char(32) var;
  dcl  paths (30) char(200) var;
  dcl  pathsN fixed bin;
  dcl  path_arch_name char(32) var;
  dcl  path_seg_name char(32) var;
/*dcl  code fixed bin(35); 									        */

     lib_name = Seg.library;				
     if index(lib_name, ".UNKNOWN") > 0 then do;		/* Library already presumed unknown?  Remove that         */
	lib_name = before(lib_name, ".UNKKOWN");	/*  designation temporarily to permit search.	        */
	if index(lib_name, "UNKNOWN.") > 0  then
	     lib_name = after(lib_name, "UNKNOWN.");		
	if lib_name = "UNKNOWN" then lib_name = "**";
	end;

     if  Seg.type = "Unbound_obj" & lib_name = "execution"  then do;
	call search ("object", Seg.name, paths, pathsN, code);
	if  pathsN >= 1  then do;			/* An Unbound_obj can be an object component of a	        */
	     Seg.library = "object";			/*  Bound_obj; or a non-bound object segment.	        */
	     lib_name = "object";			/*  Both are derived segments, but the component type     */
	     end;					/*  is only found in an object directory.	        */
	end;
     else if  Seg.type = "Bound_obj" & Seg.struct = "BND" & lib_name = "object"  then do;
	call search ("execution", Seg.name, paths, pathsN, code);
	if  pathsN >= 1  then do;			/* A BOUNDOBJ can be created to manage a bindfile change  */
	     Seg.library = "execution";		/*  but searching object dirs won't find the associated   */
	     lib_name = "execution";			/*  Bound_obj segment.			        */
	     end;
	end;

     call search (lib_name, Seg.name, paths, pathsN, code); /* Call library_pathname$mbuild		        */
     if code ^= 0 then do;				/* Unexpected error.			        */
	call ssu_$print_message (bld.sciP, code, 
	     "mbuild_library_$locate_Seg(^a) ^a in Multics Library: ^a", Seg.type, Seg.name, lib_name);
	return;
	end;
%page;
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* LIBRARY NAMES:								        */
	/*									        */
	/* Library names that more-specifically identify a particular install target directory are either */
	/* 1 or 2 component names, without use of * character.				        */
	/*  - Usually 2-components (<lib-name>.<dir-type>) are needed to identify a single dir: e.g.,     */
	/*    sss.source								        */
	/*  - For some seg suffixes, only one library dir ever contains that type of seg:                 */
	/*     e.g., include files.  Use the preferred 2-comp library name for such cases:  sss.include   */
	/*									        */
	/* The seg_type data from mbuild_info_ database returns either 1- or 2-component names, based     */
	/* upon seg suffix.  1-comp names each specify a dir-type (e.g., source, info, listings,	        */
	/* bindfile, etc.								        */
	/*									        */
	/* RULE: For an ADD operation, "UNKNOWN." should be inserted before a <dir-type> component.       */
	/*       This results in UNKNOWN.<dir-type> selecting a directory type in an UNKNOWN library.     */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

  dcl  starname char(32);

						/* How many paths found by calls (above) to search?       */
     if pathsN = 0 then do;				/* Seg not installed in library anywhere...	        */
	Seg.operation = "ADD";			/*  - It is being added.			        */
						
	if  lib_name ^= "" & lib_name ^= "**" & index(lib_name, ".") = 0   then do;
	     starname = "**." || lib_name || ".**";

	     lib_namesP = mbuild_lib_names_$get_lib_names (bld.sciP, addr(bld), F);
     
	     Seg.library = "";
	     do nmI = lbound(lib_names.node,1) to hbound(lib_names.node,1);
		call match_star_name_ ((lib_names.library(nmI)), starname, code);
		if code = 0 then do;
		     if Seg.library = "" then
			Seg.library = lib_names.library(nmI);
		     else do;
			Seg.library = "UNKNOWN." || lib_name;
			go to MULTIPLE_LIB_PATHS;
			end;
		     end;
		else if  code = error_table_$nomatch  then;
		else do;
		     call ssu_$print_message (bld.sciP, code,
			"finding library: ^a  for Seg(^a): ^a", starname, Seg.type, Seg.name);
		     end;
		end;
MULTIPLE_LIB_PATHS:					/* Multiple matching library names found.	        */
	     end;

	if index(Seg.library, ".") > 0 then;		/*  - Leave 2-comp library name alone.		        */
	else if Seg.library ^= "" then		/*  - Prefix 1-comp name with UNKNOWN lib-name	        */
	     Seg.library = "UNKNOWN." || Seg.library;
	else Seg.library = "UNKNOWN";			/*  - A 0-comp name just becomes UNKNOWN	        */

	if Seg.type = "bindfile" then do;		/* RULE: bindfile always stored in the object archive.    */
						/*  Assume only one archive is present.		        */
	     Seg.archive_name = before(Seg.name,".bind") || ".archive";
	     end;
	end;

     else if pathsN = 1 then do;
	pathI = 1;
USE_pathI:
	if Seg.operation = "" then			/* Preserve any .operation value already specified.       */
	     Seg.operation = "REPLACE";
	else if Seg.operation = "ADD" then		/*  - except cannot ADD; Seg exists in Multics Library    */
	     Seg.operation = "REPLACE";
	call path_components (paths(pathI), lib_name, path_arch_name, path_seg_name);
	if  lib_name = "" & path_arch_name = "" & path_seg_name = ""  then do;
	     call ssu_$print_message (bld.sciP, error_table_$badpath,
	          "unknown Multics Libraries path: ^a (path_components)", paths(pathI));
	     return;
	     end;

	if index(Seg.library,".") = 0 then		/* Override 1-comp name with one computed from path.      */
	     Seg.library = lib_name;
	else if Seg.library ^= lib_name then		/* Complain if user gave different 2-comp name that we    */
						/*  got from path.				        */
	     call ssu_$print_message (bld.sciP, 0, "  Seg(^a): ^a
  library: ^a  differs from
  library: ^a  obtained from search path: ^a", Seg.type, Seg.name, Seg.library, lib_name, paths(pathI));

	if path_arch_name = "" & path_seg_name ^= "" & path_seg_name ^= Seg.name then
						/* Should not occur...  SEVERE ERROR.		        */
	     call ssu_$print_message (bld.sciP, mbuild_et_$unexpected_event,
	          "Seg(^a): ^a  differs from seg_name found by path_components: ^a^/  ^a", 
		Seg.type, Seg.name, path_seg_name, paths(pathI));

	if path_arch_name ^= "" & path_seg_name = "" then do;
						/* For a source_arch or object_arch, default to "UPDATE". */
						/*  Use "REPLACE" for data_arch.		        */
	     if  Seg.type = "source_arch" | Seg.type = "object_arch"  then
		Seg.operation = "UPDATE";
	     if path_arch_name ^= Seg.name then		/* Should not occur...  SEVERE ERROR.		        */
		call ssu_$print_message (bld.sciP, mbuild_et_$unexpected_event,
		     "Seg(^a): ^a  differs from pathname found in library descriptor.^/  ^a", 
		     Seg.type, Seg.name, paths(pathI));
	     end;

	if path_arch_name ^= "" & path_seg_name ^= "" & Seg.archive_name = "" then
	     Seg.archive_name = path_arch_name;

	end;

     else do;					/* Seg appears in more than one library dir.	        */
	do pathI = 1 to pathsN;			/*  - Many seg types are installed in both object and     */
	     if index(paths(pathI),">ldd>") = 1 then	/*    execution dirs.  Use any path beginning with >ldd   */
		goto USE_pathI;
	     end;
						/* Not sure what case this represents.  For now, complain */
						/*  to installer.				        */
	call ssu_$print_message (bld.sciP, mbuild_et_$multiple_lib_paths, 
	     "Seg(^a): ^a  matches several library paths:^v(^/  ^a^)", 
	     Seg.type, Seg.name, pathsN, paths(*));
	end;
     return;

%page;
/* ======================================================================
 *									    
 * ROUTINE:  path_components
 *									    
 * Splits a Multics Library pathname into a library name, archive name, and segment name.  The
 * following combinations of non-empty return arguments should be handled by the caller:	    
 *									    
 *    Alibrary_name   Aarch_name   Aseg_name  : path designates a component of in an archive in Alibrary_name.
 *    Alibrary_name   Aarch_name              : path designates an archive in Alibrary_name.
 *    Alibrary_name                Aseg_name  : path designates an unarchived segment in Alibrary_name.
 *									       
 * ====================================================================== */

path_components:
     proc (Apath, Alibrary_name, Aarch_name, Aseg_name);
						/* Split a path in Multics Libraries into components      */
						/*  following rules of the library.		        */

  dcl  Apath char(*) var;				/* Path returned by mbuild_library_$library_paths.   (in) */
  dcl  Alibrary_name char(*) var;			/* Multics Library name associated with path.       (out) */
  dcl  Aarch_name char(*) var;			/* Multics Library archive name containing file.    (out) */
  dcl  Aseg_name char(*) var;				/* Segment name from Apath.                         (out) */

     Alibrary_name, Aarch_name, Aseg_name = "";

     lib_namesP = mbuild_lib_names_$get_lib_names (bld.sciP, addr(bld), F);

  dcl 1 nd aligned like lib_names.node based (lib_names.P(nmI));
						/* Access array of lib_names.node structures, ordered by  */
						/* length(lib_names.node.path) with longest path first.   */
						/*  - Look for node paths starting with longest, in case  */
						/*    this is directory contained in another node dir.    */
						/*    If node dirs are nested, the deepest path matched by*/
						/*    given library path is the correct lib.dir node.     */
     do nmI = lbound(lib_names.node,1) to hbound(lib_names.node,1);
	if index(Apath, nd.path || ">") = 1 then
	     goto FOUND_LIBRARY;
	end;
     return;					/* Examination of search pathname failed!	        */

FOUND_LIBRARY:
  dcl  p char(200) var;

     Alibrary_name = nd.library;
     p = substr (Apath, length(nd.path)+2);

     if index(p,"::") > 0 then do;
	Aarch_name = before(p,"::");
	Aseg_name  = after(p,"::");
	end;
     else if index(reverse(p),reverse(".archive")) = 1 then
	Aarch_name = p;
     else Aseg_name  = p;
     return;					/* Examination of search pathname succeeded!	        */

     end path_components;
%page;
/* ======================================================================
 *
 * Entrypoint:  mbuild_library_$archive_table
 *
 * Function:    provide a subroutine interface that returns results of 
 *              archive_table active function as an array of component 
 *              names.
 *
 * Note:        This subroutine has nothing to do with libraries
 *              per se, other than their containing archives.  It is
 *	      defined in mbuild_library_ to share the active function
 *	      invocation technology defined/used elsewhere in this module.
/* ====================================================================== */

archive_table:					/* Get names of archive components.		        */
     entry (Aarchive_dir, Aarchive_ent, Acomponent_star, Acomps, AcompsN, Acode);
						/*  (a subroutine interface for archive_table AF)         */
						/* Code: error_table_$too_many_names if returned paths    */
						/*  too numerous to fit in Acomps array.	        */
  dcl  Aarchive_dir char(*);
  dcl  Aarchive_ent char(*) var;
  dcl  Acomponent_star char(*) var;
  dcl  Acomps (*) char(32) var;
  dcl  AcompsN fixed bin;
/*dcl  Acode fixed bin(35);				/* Status code.				        */

  dcl  af_string char(200);
  dcl  af_stringL fixed bin(21);
  dcl  af_ret char(4000) var;				/* Enough for many archive comps or 200-char paths.        */

     af_string = "";
     call ioa_$rsnnl ("archive_table ^a ^a", af_string, af_stringL, pathname_(Aarchive_dir, (Aarchive_ent)), Acomponent_star);
						/* Construct active string.  cu_ does not require [ ]     */

     AcompsN = 0;					/* Initialize output: no paths, no errors so far.	        */
     Acode = 0;

     on active_function_error call af_error_to_code(act_AF_ERROR, Acode);

     call cu_$evaluate_active_string (null(), af_string, TOKENS_ONLY_ACTIVE_STRING, af_ret, Acode);
						/* Evaluate active string.			        */
     revert active_function_error;


     if Acode = error_table_$command_line_overflow then	/* cu_ reports my af_ret string too small to hold paths.  */
	Acode = error_table_$too_many_names;		/*  Map that to more meaningful error in array context.   */
     else if Acode ^= 0 then return;			/* All bets off if some unknown code is returned.	        */

     do while(af_ret ^= "");				/* library_pathname returns paths separated by 1 space ch */
	if AcompsN+1 <= hbound(Acomps,1) then do;	/* Remove comps one-by-one, storing them in Acomps array. */
	     AcompsN = AcompsN + 1;
	     Acomps(AcompsN) = before(af_ret, " ");
	     af_ret = after(af_ret, " ");
	     end;
	else do;					/* Stop removing if too many comps to fit in Acomps array */
	     Acode = error_table_$too_many_names;
	     return;
	     end;
	end;
     return;					/* Good!  All returned comps fit ok.		        */

act_AF_ERROR:
     if Acode = error_table_$nomatch then Acode = 0;	/* error_table_$nomatch is mapped to ApathsN = 0	        */
     return;					

%page;
/* ======================================================================
 *
 * Entrypoint:  mbuild_library_$compare
 *
 * Function:    provide a subroutine interface that returns results of 
 *              compare active function. 
 *
/* ====================================================================== */

compare:						/* Compare two versions of a file using the compare AF    */
     entry (Alibrary_path, Asegname, Acode) returns (bit(1) aligned);

  dcl  Alibrary_path char(*);
  dcl  Asegname char(*) var;
/*dcl  Acode fixed bin(35); */

     af_string = "";
     call ioa_$rsnnl ("compare ^a ^a", af_string, af_stringL, 
	Alibrary_path, Asegname);			/* Construct active string.  cu_ does not require [ ]     */

     Acode = 0;

     on active_function_error call af_error_to_code(cmp_AF_ERROR, Acode);

     call cu_$evaluate_active_string (null(), af_string, TOKENS_ONLY_ACTIVE_STRING, af_ret, Acode);
						/* Evaluate active string.			        */
     revert active_function_error;


     if Acode = error_table_$command_line_overflow then	/* cu_ reports my af_ret string too small to hold paths.  */
	Acode = error_table_$too_many_names;		/*  Map that to more meaningful error in array context.   */
     else if Acode ^= 0 then return;			/* All bets off if some unknown code is returned.	        */

     return ((af_ret = "true"));

cmp_AF_ERROR:
     if Acode = error_table_$nomatch then Acode = 0;	/* error_table_$bad is mapped to ApathsN = 0	        */
     return (F);					
%page;
/* ======================================================================
 *
 * Entrypoint:  mbuild_library_$library_directories
 *
 * Function:    provide a subroutine interface that returns results of 
 *              library_descriptor [lds] active function.  Given 
 *              Alibrary_star (a library starname), return array of paths
 *              in multics_libraries_ descriptor that match that path.
 *
/* ====================================================================== */

library_directories:				/* Get directory paths for a given library name.	        */
     entry (Alibrary_star, Apaths, ApathsN, Acode);	/*  (a subroutine interface for library_descriptor AF)    */

  dcl  Alibrary_star char(*) var;			/* Library to search in.  May be ** to search all libs.   */
  dcl  Apaths (*) char(200) var;			/* Array of paths matching starname found in libraries.   */
  dcl  ApathsN fixed bin;				/* Number of paths actually returned.		        */
  dcl  Acode fixed bin(35);				/* Code: error_table_$too_many_names if returned paths    */
						/*  too numerous to fit in Apaths array.	        */

     af_string = "";
     call ioa_$rsnnl ("library_descriptor pn ^[-lb ^a^;^s^]", af_string, af_stringL, Alibrary_star ^= "", Alibrary_star);
						/* Construct active string.  cu_ does not require [ ]     */

     ApathsN = 0;					/* Initialize output: no paths, no errors so far.	        */
     Acode = 0;

     on active_function_error call af_error_to_code(lds_AF_ERROR, Acode);

     call cu_$evaluate_active_string (null(), af_string, TOKENS_ONLY_ACTIVE_STRING, af_ret, Acode);
						/* Evaluate active string.			        */
     revert active_function_error;


     if Acode = error_table_$command_line_overflow then	/* cu_ reports my af_ret string too small to hold paths.  */
	Acode = error_table_$too_many_names;		/*  Map that to more meaningful error in array context.   */
     else if Acode ^= 0 then return;			/* All bets off if some unknown code is returned.	        */

     do while(af_ret ^= "");				/* library_descriptor returns paths separated by 1 space. */
	if ApathsN+1 <= hbound(Apaths,1) then do;	/* Remove paths one-by-one, storing them in Apaths array. */
	     ApathsN = ApathsN + 1;
	     Apaths(ApathsN) = before(af_ret, " ");
	     af_ret = after(af_ret, " ");
	     end;
	else do;					/* Stop removing if too many paths to fit in Apaths array */
	     Acode = error_table_$too_many_names;
	     return;
	     end;
	end;
     return;					/* Good!  All returned paths fit ok.		        */

lds_AF_ERROR:
     if Acode = error_table_$nomatch then Acode = 0;	/* error_table_$nomatch is mapped to ApathsN = 0	        */
     return;					

%page;
/* ======================================================================
 *
 * Entrypoint:  mbuild_library_$get_primary_name
 *
 * Function:    return primary (first) name on a given branch.
 *
/* ====================================================================== */

get_primary_name:
     entry (Abuild_dataP, Adir_name, Aentry_name, Acode) returns(char(32));

  dcl  Adir_name char(*);
  dcl  Aentry_name char(*);
  
  dcl  primary_name char(32);

  dcl 1 st aligned like status_branch.short;

     status_area_ptr = bld.ssu_areaP;
     st.nnames = 0;
     status_ptr = addr(st);
     on cleanup call gpn_janitor();

     call hcs_$status_ (Adir_name, Aentry_name, 0, status_ptr, status_area_ptr, Acode);
     if status_ptr ^= null() then 
	primary_name = status_entry_names(1);
     else primary_name = "";

     call gpn_janitor();
     return (primary_name);

gpn_janitor:
     proc ();

     if st.nnames ^= 0 then do;
	free status_entry_names;
	st.nnames = 0;
	end;

     end gpn_janitor;
%page;
/* ======================================================================
 *
 * Entrypoint:  mbuild_library_$search
 *
 * Function:    provide a subroutine interface that returns results of 
 *              library_pathname$mbuild active function.  Given 
 *              Alibrary_star (a library starname) and Astarname (a
 *              segment starname), returns an array of pathnames matching
 *              those inputs.  Returned paths are archive component 
 *              pathnames if Astarname identified a segment stored in a
 *              source/object archive.
 *
/* ====================================================================== */

search:						/* Search within Multics Libraries (ala library_pathname) */
     entry (Alibrary_star, Astarname, Apaths, ApathsN, Acode);

/*dcl  Alibrary_star char(*) var;			/* Library to search in.  May be ** to search all libs.   */
  dcl  Astarname char(*) var;				/* Starname to search for in those libraries.	        */
/*dcl  Apaths (*) char(200) var;			/* Array of paths matching starname found in libraries.   */
/*dcl  ApathsN fixed bin;				/* Number of paths actually returned.		        */
/*dcl  Acode fixed bin(35);				/* Code: error_table_$too_many_names if returned paths    */
						/*  too numerous to fit in Apaths array.	        */
     af_string = "";
     call ioa_$rsnnl ("library_pathname$mbuild ^a ^[-lb ^a^;^s^]", af_string, af_stringL, 
	Astarname, Alibrary_star ^= "", Alibrary_star);	/* Construct active string.  cu_ does not require [ ]     */

     ApathsN = 0;					/* Initialize output: no paths, no errors so far.	        */
     Acode = 0;

     on active_function_error call af_error_to_code(lpn_AF_ERROR, Acode);

     call cu_$evaluate_active_string (null(), af_string, TOKENS_ONLY_ACTIVE_STRING, af_ret, Acode);
						/* Evaluate active string.			        */
     revert active_function_error;


     if Acode = error_table_$command_line_overflow then	/* cu_ reports my af_ret string too small to hold paths.  */
	Acode = error_table_$too_many_names;		/*  Map that to more meaningful error in array context.   */
     else if Acode ^= 0 then return;			/* All bets off if some unknown code is returned.	        */


     do while(af_ret ^= "");				/* library_descriptor returns paths separated by 1 space. */
	if ApathsN+1 <= hbound(Apaths,1) then do;	/* Remove paths one-by-one, storing them in Apaths array. */
	     ApathsN = ApathsN + 1;
	     Apaths(ApathsN) = before(af_ret, " ");
	     af_ret = after(af_ret, " ");
	     end;
	else do;					/* Stop removing if too many paths to fit in Apaths array */
	     Acode = error_table_$too_many_names;
	     return;
	     end;
	end;
     return;					/* Good!  All returned paths fit ok.		        */

lpn_AF_ERROR:
     if Acode = error_table_$nomatch then Acode = 0;	/* error_table_$bad is mapped to ApathsN = 0	        */
     return;					
%page;
/* ----------------------------------------------------------------------
   SUBROUTINE:  af_error_to_code

   Called as an active_function_error condition handler (on-unit), to 
   extract and return status code from active_function_error's condition
   info structure.
   ---------------------------------------------------------------------- */

af_error_to_code:
          proc (ABORT_POINT, CHcode);

  dcl  ABORT_POINT label variable;
  dcl  CHcode fixed bin(35);

  dcl find_condition_info_ entry (ptr, ptr, fixed bin(35));

  dcl 1 CI aligned like condition_info;

	CI.version = condition_info_version_1;
	call find_condition_info_ (null (), addr (CI), (0));
	com_af_error_info_ptr = CI.info_ptr;
	CHcode = com_af_error_info.header.status_code;
	goto ABORT_POINT;

%include condition_info;
%include condition_info_header;
%include com_af_error_info;

          end af_error_to_code;

%page;
%include cp_active_string_types;
%page;
%include mbuild_Tlist_dcls_;
%page;
%include mbuild_data_;
%page;
%include status_structures;
%page;
%include ssu_subroutine_dcls_;
%include mbuild_request_parms_;

     end mbuild_library_;
