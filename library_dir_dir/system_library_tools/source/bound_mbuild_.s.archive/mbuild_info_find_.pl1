
/****^  HISTORY COMMENTS:
  1) change(2019-08-17,GDixon), approve(2019-10-24,MCR10069),
     audit(2020-01-20,Swenson), install(2020-01-20,MR12.6g-0035):
     mbuild subroutine to access structures declared in mbuild_info_.incl.pl1.
  2) change(2020-01-27,GDixon), approve(2020-01-27,MCR10079),
     audit(2020-02-02,Swenson), install(2020-02-02,MR12.6g-0045):
     Add mbuild_info_find_$prefix_for_build_type function.
                                                   END HISTORY COMMENTS */


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* Entrypoints in this source file locate elements of the various mbuild_info_ data structure     */
	/* arrays declared in mbuild_info_.incl.pl1, and populated by mbuild_info_.cds.		        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

mbuild_info_find_:
     proc;

  dcl (F init("0"b), T init("1"b)) bit(1) aligned int static options(constant);

  dcl  match_star_name_ entry (char(*), char(*), fixed bin(35));

  dcl (addr, after, before, hbound, index, lbound, null) builtin;

  dcl  code fixed bin(35);

%page;
/* ======================================================================
 *
 * ENTRYPOINT:  mbuild_info_find_$paradigm_by_name
 *
 * Function:    find bld_paradigm_info structure describing a given 
 *              paradigm name.
 *
 * Output:      pointer to that structure.
 *
 * ====================================================================== */

paradigm_by_name:					/* Returns the named build_paradigm table entry.	        */
     entry (Aparadigm_name) returns (ptr);
     
  dcl  Aparadigm_name char(*) var;
  dcl  pdmI fixed bin;
     
     do pdmI = lbound(mbuild_info.bld_paradigm_info, 1) 
            to hbound(mbuild_info.bld_paradigm_info, 1);
	if Aparadigm_name = mbuild_info.bld_paradigm_info (pdmI).name then
	     return ( addr(mbuild_info.bld_paradigm_info(pdmI)) );
	end;
     return ( null() );


/* ======================================================================
 *
 * ENTRYPOINT:  mbuild_info_find_$paradigm_by_index
 *
 * Function:    find bld_paradigm_info structure describing a given 
 *              paradigm index constant from mbuild_info_.incl.pl1:
 *                PDM_source, PDM_Bound_obj, ...
 *              These constants are also the values in 
 *	      seg_type.build_paradigm structure elements.
 *
 * Output:      pointer to that structure.
 *
 * ====================================================================== */

paradigm_by_index:					/* Returns the Ith build_paradigm table entry.	        */
     entry (ApIdx) returns (ptr);			/*  - Used to walk through all table entries.	        */

  dcl  ApIdx fixed bin;
     
     if ApIdx >= lbound(mbuild_info.bld_paradigm_info, 1) &
        ApIdx <= hbound(mbuild_info.bld_paradigm_info, 1) then do;
	return ( addr(mbuild_info.bld_paradigm_info(ApIdx)) );
	end;
     return ( null() );
     

/* ======================================================================
 *
 * ENTRYPOINT:  mbuild_info_find_$paradigm_index
 *
 * Function:    find index of bld_paradigm_info structure describing a 
 *              given paradigm name.
 *
 * Output:      index of that structure.
 *
 * ====================================================================== */

paradigm_index:					/* Returns the build_paradigm table index for a given     */
     entry (Aparadigm_name) returns (fixed bin);		/*  paradigm name.				        */

     do pdmI = lbound(mbuild_info.bld_paradigm_info, 1) 
            to hbound(mbuild_info.bld_paradigm_info, 1);
	if Aparadigm_name = mbuild_info.bld_paradigm_info (pdmI).name then
	     return ( pdmI );
	end;
     return ( 0 );
%page;
/* ======================================================================
 *
 * ENTRYPOINT:  mbuild_info_find_$seg_type_by_index
 *
 * Function:    find seg_type_info structure describing a given element
 *              of the seg_type_info array of constant structures.
 *              This permits walking sequentially through the array to
 *              analyze or display each array element (a seg_type_info 
 *	      structure).
 *
 * Output:      pointer to that structure.
 *               = null() if the index is outside bounds of the array.
 *
 * ====================================================================== */

seg_type_by_index:					/* Returns the Ith seg_type entry in the table.	        */
     entry (AsIdx) returns (ptr);			/*  - Used to walk through all table entries.	        */

  dcl  AsIdx fixed bin;

     if AsIdx >= lbound(mbuild_info.seg_type_info, 1) &
        AsIdx <= hbound(mbuild_info.seg_type_info, 1) then do;
	return ( addr(mbuild_info.seg_type_info(AsIdx)) );
	end;
     return ( null() );


/* ======================================================================
 *
 * ENTRYPOINT:  mbuild_info_find_$seg_type_for_seg_name
 *
 * Function:    find seg_type_info structure describing a given segment
 *              name by: walking through the array of these structures,
 *              comparing structure source_starname with given seg_name.
 *
 * Output:      pointer to first structure with matching starname is returned.
 *
 * ====================================================================== */

seg_type_for_seg_name:				/* Returns the seg_type entry for a given segment name.   */
     entry (Aseg_name) returns (ptr);
     
  dcl  Aseg_name char(*) var;				/* Segment name whose seg_type structure is wanted.       */

  dcl  typeI fixed bin;
 
     do typeI = lbound(mbuild_info.seg_type_info, 1)
             to hbound(mbuild_info.seg_type_info, 1);
	call match_star_name_((Aseg_name), (mbuild_info.source_starname(typeI)), code);
	if code = 0 then
	     return ( addr(mbuild_info.seg_type_info(typeI)) );
	end;
     return ( null() );


/* ======================================================================
 *
 * ENTRYPOINT:  mbuild_info_find_$build_type_is_valid
 *
 * Function:    validate name given by user as a possible mbuild_type.
 *
 * Output:      T if given name matches mbuild_type(I) for some seg_type_info
 *	      in the array of structures.
 *
 * ====================================================================== */

build_type_is_valid:				/* Returns T if given name matches an existing 	        */
     entry (Abuild_type_name) returns (bit(1) aligned);	/*  mbuild_type in any build_type table element.	        */

  dcl  Abuild_type_name char(*);

     do typeI = lbound(mbuild_info.seg_type_info, 1)
             to hbound(mbuild_info.seg_type_info, 1);
	if mbuild_info.mbuild_type(typeI) = Abuild_type_name then
	     return (T);
	end;
     return (F);


/* ======================================================================
 *
 * ENTRYPOINT:  mbuild_info_find_$prefix_for_build_type
 *
 * Function:    given an mbuild_type, finds the seg_type_info structure
 *	      describing that name; then extracts the beginning of
 *	      the source_starname element up to the first asterisk
 *	      in the starname (e.g., bound_* returns bound_).
 *
 * Output:      "" if the mbuild_type matches no seg_type_info structure; or
 *              prefix from matching seg_type_info.source_starname.
 *
 * ====================================================================== */

prefix_for_build_type:
     entry (Abuild_type_name) returns (char(12) var);
  dcl  return_value char(12) var init("");

     do typeI = lbound(mbuild_info.seg_type_info, 1)
             to hbound(mbuild_info.seg_type_info, 1);
	if mbuild_info.mbuild_type(typeI) = Abuild_type_name then
	     goto PREFIX_RETURN;
	end;
     return ("");

PREFIX_RETURN:
  dcl  starname char(32) var;

     starname = mbuild_info.source_starname(typeI);
     starname = before(starname, "*");
     return (starname);

/* ======================================================================
 *
 * ENTRYPOINT:  mbuild_info_find_$suffix_for_build_type
 *
 * Function:    given an mbuild_type, finds the seg_type_info structure
 *	      describing that name; then extracts the non-star portion
 *	      of the source_starname element in that structure.  This is
 *	      a name suffix (like .pl1 or .s.archive).
 *
 * Output:      "" if the mbuild_type matches no seg_type_info structure; or
 *              suffix from matching seg_type_info.source_starname.
 *
 * ====================================================================== */

suffix_for_build_type:
     entry (Abuild_type_name) returns (char(12) var);

     do typeI = lbound(mbuild_info.seg_type_info, 1)
             to hbound(mbuild_info.seg_type_info, 1);
	if mbuild_info.mbuild_type(typeI) = Abuild_type_name then
	     goto SUFFIX_RETURN;
	end;
     return ("");


/* ======================================================================
 *
 * ENTRYPOINT:  mbuild_info_find_$suffix_by_type_ID
 *
 * Function:    given an ID (array index) for a seg_type_info structure,
 *	      extracts the non-star portion of the source_starname 
 *	      element in that structure.  This is a name suffix 
 *	      (like .pl1 or .s.archive).
 *
 * Output:      "" if the mbuild_type matches no seg_type_info structure; or
 *              suffix from matching seg_type_info.source_starname.
 *
 * ====================================================================== */

suffix_by_type_ID:
     entry (AsIdx) returns (char(12) var);
     
     if AsIdx >= lbound(mbuild_info.seg_type_info, 1) &
        AsIdx <= hbound(mbuild_info.seg_type_info, 1) then do;
	typeI = AsIdx;
	goto SUFFIX_RETURN;
	end;
     return ("");


SUFFIX_RETURN:
     starname = mbuild_info.source_starname(typeI);
     do while (index (starname, "*.") > 0);
	starname = after(starname, "*.");
	end;
     if  index(starname, "*") > 0  then return ("");

     starname = "." || starname;
     if  length(starname) > maxlength(return_value) then return ("");
     return (starname);
%page;
/* ======================================================================
 *
 * ENTRYPOINT:  mbuild_info_find_$thread_selector_by_ID
 *
 * Function:    given one of the IDs for a given type of thread, 
 *	      returns the thread-type constant (a PDM_xxx Seg_xxx or
 *	      STRUCT_xxx constant) from mbuild_info_.incl.pl1.
 *
 *              This constant can be used as index in a PL/I label
 *	      array to select/display the thread named by the ID.
 *
 * ====================================================================== */

thread_selector_by_ID:				/* If ID is known, returns value for that ID.	        */
     entry (Aselector_ID) returns (fixed bin);		/* Else: return value = 0			        */

  dcl  Aselector_ID char(*) var;
  dcl  selI fixed bin;
     
     do selI = lbound(mbuild_info.selector_info, 1) 
            to hbound(mbuild_info.selector_info, 1);
	if  Aselector_ID = mbuild_info.selector_info (selI).sel_ID  then
	     return ( mbuild_info.selector_info(selI).sel_value );
	end;
     return ( 0 );


/* ======================================================================
 *
 * ENTRYPOINT:  mbuild_info_find_$thread_selector_ID_for_value
 *
 * Function:    given one of the thread-type constants (a PDM_xxx Seg_xxx 
 *	      or STRUCT_xxx constant) from mbuild_info_.incl.pl1, 
 *	      returns first ID name for that constant.
 *
 * ====================================================================== */

thread_selector_ID_for_value:				/* If value is known, returns ID for that value.	        */
     entry (Aselector_value) returns (char(16) var);	/* Else: return ID = ""			        */

  dcl  Aselector_value fixed bin;
     
     do selI = lbound(mbuild_info.selector_info, 1) 
            to hbound(mbuild_info.selector_info, 1);
	if  Aselector_value = mbuild_info.selector_info (selI).sel_value  then
	     return ( mbuild_info.selector_info(selI).sel_ID );
	end;
     return ( "" );


/* ======================================================================
 *
 * ENTRYPOINT:  mbuild_info_find_$thread_selector_summary
 *
 * Function:    Returns an array of all possible sel_IDs.  IDs having  
 *	      the same sel_value are separated by comma in the 
 *	      array element for that sel_value.
 *
 *              Used to prompt user with list of possible sel_IDs 
 *
 * ====================================================================== */

thread_selector_summary:
     entry (Aselectors, AselectorsN);

  dcl  Aselectors (*) char(32) var aligned;		/* Array into which possible selectors will be copied.    */
  dcl  AselectorsN fixed bin;				/* Count of selectors actually returned.  If this is      */
						/*  larger than the caller's dimension, some IDs won't    */
						/*  be returned.				        */

     AselectorsN = min(dimension(Aselectors,1), dimension(mbuild_info.selector_summary,1));
     
     if AselectorsN > 0 then do;

  dcl  my_sel (AselectorsN) char(32) var aligned based(addr(Aselectors));

	my_sel(*) = addr(mbuild_info.selector_summary(1))->my_sel(*);
	AselectorsN = dimension(mbuild_info.selector_summary,1);
	end;
     return;

%page;
%include mbuild_info_;

     end mbuild_info_find_;
