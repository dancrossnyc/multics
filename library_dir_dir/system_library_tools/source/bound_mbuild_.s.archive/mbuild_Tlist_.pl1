
/****^  HISTORY COMMENTS:
  1) change(2019-08-17,GDixon), approve(2019-10-25,MCR10069),
     audit(2020-01-20,Swenson), install(2020-01-20,MR12.6g-0035):
     mbuild subroutines to walk threaded lists, searching for items, emptying
     those lists, etc.
  2) change(2020-01-27,GDixon), approve(2020-01-27,MCR10079),
     audit(2020-02-02,Swenson), install(2020-02-02,MR12.6g-0045):
      A) Change $find_Seg to search add_name list for desired Seg name.
      B) Add $request_COMPILE_match_star to search a request list for
         desired COMPILE name in compile requests of mbuild.
      C) Add $request_Seg_match_star to search the add_name list for
         desired Seg name in compare and history requests of mbuild.
  3) change(2020-08-30,GDixon), approve(2021-02-22,MCR10086),
     audit(2021-03-17,Swenson), install(2021-03-17,MR12.6g-0051):
      A) Change request_Seg_match_star to test the request name against added names
         ONLY for Seg and UNBOUNDOBJ structures.  COMPILE and BOUNDOBJ structures
         do not have added names.
  4) change(2020-11-09,GDixon), approve(2021-02-22,MCR10086),
     audit(2021-03-17,Swenson), install(2021-03-17,MR12.6g-0051):
      A) Change $find_BOUNDOBJ, $find_COMPILE, $find_Seg, and $find_UNBOUNDOBJ
         entrypoints to accept a pointer to a previous return value, using
         that as starting point for next search within the list.  This
         supports searching for multiple objects in list with same name.
                                                   END HISTORY COMMENTS */

mbuild_Tlist_:
     proc(AsciP, Abuild_dataP) returns(bit(1) aligned);

  dcl  PROC char(13) int static options(constant) init("mbuild_Tlist_");

     return (check_parms(mbuild_data_version_3));
/* --------------- */

  dcl  match_star_name_ entry (char(*), char(*), fixed bin(35));

  dcl (addr, null) builtin;

%page;
/* ----------------------------------------------------------------------
    ENTRYPOINT:  empty_BOUNDOBJ_list

    Remove all BOUNDOBJ structures from build_data.BOUNDOBJ_Tb list.
   ---------------------------------------------------------------------- */
empty_BOUNDOBJ_list:
     entry (Abuild_dataP);
     
  dcl  BOUNDOBJ_nextP ptr;

     do BOUNDOBJp = Tlist_first_item (addr(bld.BOUNDOBJ_Tb))
        repeat BOUNDOBJ_nextP while (BOUNDOBJp ^= null);
	BOUNDOBJ_nextP = Tlist_next_item (addr(BOUNDOBJ.BOUNDOBJ_Td));
	BOUNDOBJ.BOUNDOBJ_Td = Tlist_initial_data;
	end;
     call Tlist_initialize (addr(bld.BOUNDOBJ_Tb), addr(bld));
     return;


/* ----------------------------------------------------------------------
    ENTRYPOINT:  empty_COMPILE_list

    Remove all COMPILE structures from build_data.COMPILE_Tb list.
   ---------------------------------------------------------------------- */
empty_COMPILE_list:
     entry (Abuild_dataP);
     
  dcl  COMPILE_nextP ptr;

     do COMPILEp = Tlist_first_item (addr(bld.COMPILE_Tb))
        repeat COMPILE_nextP while (COMPILEp ^= null);
	COMPILE_nextP = Tlist_next_item (addr(COMPILE.COMPILE_Td));
	COMPILE.COMPILE_Td = Tlist_initial_data;
	end;
     call Tlist_initialize (addr(bld.COMPILE_Tb), addr(bld));
     return;


/* ----------------------------------------------------------------------
    ENTRYPOINT:  empty_paradigm_list

    Remove all Seg structures from the build_data Alist_baseP per-paradigm list.
   ---------------------------------------------------------------------- */
empty_paradigm_list:
     entry (Abuild_dataP, Alist_baseP);
     
  dcl  Alist_baseP ptr,
      1 list_Tb aligned like Tlist_base based(Alist_baseP);

  dcl  Seg_nextP ptr;

     do SegP = Tlist_first_item (addr(list_Tb))
        repeat Seg_nextP while (SegP ^= null);
	Seg_nextP = Tlist_next_item  (addr(Seg.pdm_Td));
	Seg.pdm_Td = Tlist_initial_data;
	end;
     call Tlist_initialize (addr(list_Tb), addr(bld));
     return;


/* ----------------------------------------------------------------------
    ENTRYPOINT:  empty_request_list

    Remove all structures from the request threaded list.
   ---------------------------------------------------------------------- */
empty_request_list:
     entry (ArequestP);
     
  dcl  ArequestP ptr;				/* Pointer to request structure.		        */

  dcl 1 Sreq aligned like Seg.common based(SreqP),
     SreqP ptr;

  dcl  Sreq_nextP ptr;

     requestP = ArequestP;
     do SreqP = Tlist_first_item (addr(request.request_Tb))
        repeat Sreq_nextP while (SreqP ^= null);
	Sreq_nextP = Tlist_next_item (addr(Sreq.request_Td));
	Sreq.request_Td = Tlist_initial_data;
	end;
     call Tlist_initialize (addr(request.request_Tb), addr(request));
     return;


/* ----------------------------------------------------------------------
    ENTRYPOINT:  empty_scan_list

    Remove all Seg structures from the build_data.scan_Tb list.
   ---------------------------------------------------------------------- */
empty_scan_list:
     entry (Abuild_dataP);
     
  dcl 1 scan aligned like Seg based(scanP),
     scanP ptr;

  dcl  scan_nextP ptr;

     do scanP = Tlist_first_item (addr(bld.scan_Tb))
                repeat scan_nextP while (scanP ^= null);
	scan_nextP = Tlist_next_item (addr(scan.scan_Td));
	scan.scan_Td = Tlist_initial_data;
	end;
     call Tlist_initialize (addr(bld.scan_Tb), addr(bld));   
     return;


/* ----------------------------------------------------------------------
    ENTRYPOINT:  empty_Seg_inArch_list

    Remove all Seg structures from the ASeg(source_arch).inArch_Tb list
                                or the ASeg(object_arch).inArch_Tb list.
   ---------------------------------------------------------------------- */
empty_Seg_inArch_list:
     entry (ASegP);
     
  dcl  ASegP ptr,
      1 ASeg aligned like Seg based (ASegP);

     do SegP = Tlist_first_item (addr(ASeg.inArch_Tb))
        repeat Seg_nextP while (SegP ^= null);
	Seg_nextP = Tlist_next_item (addr(Seg.inArch_Td));
	Seg.inArch_Td = Tlist_initial_data;
	end;
     call Tlist_initialize (addr(ASeg.inArch_Tb), addr(ASeg));
     return;


/* ----------------------------------------------------------------------
    ENTRYPOINT:  empty_UNBOUNDOBJ_list

    Remove all UNBOUNDOBJ structures from build_data.UNBOUNDOBJ_Tb list.
   ---------------------------------------------------------------------- */
empty_UNBOUNDOBJ_list:
     entry (Abuild_dataP);
     
  dcl  UNBOUNDOBJ_nextP ptr;

     do UNBOUNDOBJp = Tlist_first_item (addr(bld.UNBOUNDOBJ_Tb))
        repeat UNBOUNDOBJ_nextP while (UNBOUNDOBJp ^= null);
	UNBOUNDOBJ_nextP = Tlist_next_item (addr(UNBOUNDOBJ.UNBOUNDOBJ_Td));
	UNBOUNDOBJ.UNBOUNDOBJ_Td = Tlist_initial_data;
	end;
     call Tlist_initialize (addr(bld.UNBOUNDOBJ_Tb), addr(bld));
     return;
%page;
/* ----------------------------------------------------------------------
    ENTRYPOINT:  find_BOUNDOBJ

    Search the build_data.BOUNDOBJ_Tb list for BOUNDOBJ having a 
     - given name and library value; or
     - given name value (if Alibrary = "").
   
    RETURNS:
     - if match was found: addr(BOUNDOBJ)
     - no match was found: null()
   ---------------------------------------------------------------------- */
find_BOUNDOBJ:
     entry (Abuild_dataP, Aname, Alibrary, Aprev_BOUNDOBJp) returns (ptr);

/*dcl  Abuild_dataP ptr;				/* Pointer to mbuild_data structures.		        */
  dcl  Aname char(*) var;				/* Name of BOUNDOBJ structure to look for.	        */
  dcl  Alibrary char(*) var;				/* Library of arch structure to look for.	        */
  dcl  Aprev_BOUNDOBJp ptr;				/* Pointer to BOUNDOBJ found in prior call to this        */
						/*  entrypoint; or null() if search from top of list.     */
     if Aprev_BOUNDOBJp ^= null() then do;
	BOUNDOBJp = Aprev_BOUNDOBJp;
	BOUNDOBJp = Tlist_next_item  (addr(BOUNDOBJ.BOUNDOBJ_Td));
	end;
     else BOUNDOBJp = Tlist_first_item (addr(bld.BOUNDOBJ_Tb));

     do BOUNDOBJp = BOUNDOBJp
             repeat Tlist_next_item  (addr(BOUNDOBJ.BOUNDOBJ_Td))  while (BOUNDOBJp ^= null);
	if  BOUNDOBJ.name = Aname then do;
	     if Alibrary = "" then
		return (BOUNDOBJp);
	     else if BOUNDOBJ.library = Alibrary  then
		return (BOUNDOBJp);
	     end;
	end;
     return ( null() );


/* ----------------------------------------------------------------------
    ENTRYPOINT:  find_COMPILE

    Search the build_data.COMPILE_Tb list for COMPILE having a 
     - given name and library value; or
     - given name value (if Alibrary = "").
   
    RETURNS:
     - if match was found: addr(COMPILE)
     - no match was found: null()
   ---------------------------------------------------------------------- */
find_COMPILE:
     entry (Abuild_dataP, Aname, Alibrary, Aprev_COMPILEp) returns (ptr);

/*dcl  Abuild_dataP ptr;				/* Pointer to mbuild_data structures.		        */
/*dcl  Aname char(*) var;				/* Name of COMPILE structure to look for.	        */
/*dcl  Alibrary char(*) var;				/* Library of arch structure to look for.	        */
  dcl  Aprev_COMPILEp ptr;				/* Pointer to COMPILE found in prior call to this         */
						/*  entrypoint; or null() if search from top of list.     */
     if Aprev_COMPILEp ^= null() then do;
	COMPILEp = Aprev_COMPILEp;
	COMPILEp = Tlist_next_item  (addr(COMPILE.COMPILE_Td));
	end;
     else COMPILEp = Tlist_first_item (addr(bld.COMPILE_Tb));

     do COMPILEp = COMPILEp
            repeat Tlist_next_item  (addr(COMPILE.COMPILE_Td))  while (COMPILEp ^= null);
	if  COMPILE.name = Aname then do;
	     if Alibrary = "" then
		return (COMPILEp);
	     else if COMPILE.library = Alibrary  then
		return (COMPILEp);
	     end;
	end;
     return ( null() );


/* ----------------------------------------------------------------------
    ENTRYPOINT:  find_request

    Search the request.request_Tb list for COMPILE having a 
     - given name and library value; or
     - given name value (if Alibrary = "").
   
    RETURNS:
     - if match was found: addr(COMPILE)
     - no match was found: null()
   ---------------------------------------------------------------------- */
find_request:
     entry (ArequestP, Aname, Alibrary) returns (ptr);

/*dcl  ArequestP ptr;				/* Pointer to request structure.		        */
/*dcl  Aname char(*) var;				/* Name of Seg structure to look for.		        */
/*dcl  Alibrary char(*) var;				/* Library of arch structure to look for.	        */

     requestP = ArequestP;
     do SegP = Tlist_first_item (addr(request.request_Tb))
        repeat Tlist_next_item  (addr(Seg.request_Td))  while (SegP ^= null);
	if  Seg.name = Aname then do;
	     if Alibrary = "" then
		return (SegP);
	     else if Seg.library = Alibrary  then
		return (SegP);
	     end;
	end;
     return ( null() );


/* ----------------------------------------------------------------------
    ENTRYPOINT:  find_mbuild_support

    Search the build_data.mbuild_support_Tb list for Seg having a 
     - given type
   
    RETURNS:
     - if match was found: addr(Seg)
     - no match was found: null()
   ---------------------------------------------------------------------- */
find_mbuild_support:
     entry (Abuild_dataP, Atype) returns (ptr);

/*dcl  Abuild_dataP ptr;				/* Pointer to mbuild_data structures.		        */
  dcl  Atype char(*) var;				/* Type of Seg structure to look for.		        */

     do SegP = Tlist_first_item (addr(bld.mbuild_support_Tb))
        repeat Tlist_next_item  (addr(Seg.pdm_Td))  while (SegP ^= null);
	if  Seg.type = Atype then
	     return (SegP);
	end;
     return ( null() );


/* ----------------------------------------------------------------------
    ENTRYPOINT:  find_scan

    Search the build_data.scan_Tb list for Seg having a 
     - given name and library value; or
     - given name value (if Alibrary = "").
   
    RETURNS:
     - if match was found: addr(Seg)
     - no match was found: null()
   ---------------------------------------------------------------------- */
find_scan:
     entry (Abuild_dataP, Aname, Alibrary) returns (ptr);

/*dcl  Abuild_dataP ptr;				/* Pointer to mbuild_data structures.		        */
/*dcl  Aname char(*) var;				/* Name of Seg structure to look for.		        */
/*dcl  Alibrary char(*) var;				/* Library of arch structure to look for.	        */

     do SegP = Tlist_first_item (addr(bld.scan_Tb))
        repeat Tlist_next_item  (addr(Seg.scan_Td))  while (SegP ^= null);
	if  Seg.name = Aname then do;
	     if Alibrary = "" then
		return (SegP);
	     else if Seg.library = Alibrary  then
		return (SegP);
	     end;
	end;
     return ( null() );


/* ----------------------------------------------------------------------
    ENTRYPOINT:  find_Seg

    Search the build_data.Seg_Tb list for Seg having a 
     - given name and library value; or
     - given name value (if Alibrary = "").
   
    RETURNS:
     - if match was found: addr(Seg)
     - no match was found: null()
   ---------------------------------------------------------------------- */
find_Seg:
     entry (Abuild_dataP, Aname, Alibrary, Aprev_SegP) returns (ptr);

/*dcl  Abuild_dataP ptr;				/* Pointer to mbuild_data structures.		        */
/*dcl  Aname char(*) var;				/* Name of Seg structure to look for.		        */
/*dcl  Alibrary char(*) var;				/* Library of arch structure to look for.	        */
  dcl  Aprev_SegP ptr;				/* Pointer to Seg found in prior call to this entrypoint; */
						/*  or null() if search from top of list.	        */
     if Aprev_SegP ^= null() then do;
	SegP = Aprev_SegP;
	SegP = Tlist_next_item  (addr(Seg.Seg_Td));
	end;
     else SegP = Tlist_first_item (addr(bld.Seg_Tb));

  dcl nmI fixed bin;

     do SegP = SegP
        repeat Tlist_next_item  (addr(Seg.Seg_Td))  while (SegP ^= null);
	nm_dataP = Seg.name_addP;
	if  Seg.name = Aname then do;
find_Seg_NAME_MATCH:
	     if Alibrary = "" then
		return (SegP);
	     else if Seg.library = Alibrary  then
		return (SegP);
	     end;
	else if  nm_dataP ^= null  then do;
	     do nmI = 1 to nm_data.N;
		if  nm_data.names(nmI) = Aname  then 
		     goto find_Seg_NAME_MATCH;
		end;
	     end;
	end;
     return ( null() );


/* ----------------------------------------------------------------------
    ENTRYPOINT:  find_UNBOUNDOBJ

    Search the build_data.UNBOUNDOBJ_Tb list for UNBOUNDOBJ having a 
     - given name and library value; or
     - given name value (if Alibrary = "").
   
    RETURNS:
     - if match was found: addr(UNBOUNDOBJ)
     - no match was found: null()
   ---------------------------------------------------------------------- */
find_UNBOUNDOBJ:
     entry (Abuild_dataP, Aname, Alibrary, Aprev_UNBOUNDOBJp) returns (ptr);

/*dcl  Abuild_dataP ptr;				/* Pointer to mbuild_data structures.		        */
/*dcl  Aname char(*) var;				/* Name of arch structure to look for.		        */
/*dcl  Alibrary char(*) var;				/* Library of arch structure to look for.	        */
  dcl  Aprev_UNBOUNDOBJp ptr;				/* Pointer to UNBOUNDOBJ found in prior call to this      */
						/*  entrypoint; or null() if search from top of list.     */
     if Aprev_UNBOUNDOBJp ^= null() then do;
	UNBOUNDOBJp = Aprev_UNBOUNDOBJp;
	UNBOUNDOBJp = Tlist_next_item  (addr(UNBOUNDOBJ.UNBOUNDOBJ_Td));
	end;
     else UNBOUNDOBJp = Tlist_first_item (addr(bld.UNBOUNDOBJ_Tb));

     do UNBOUNDOBJp = UNBOUNDOBJp
               repeat Tlist_next_item  (addr(UNBOUNDOBJ.UNBOUNDOBJ_Td))  while (UNBOUNDOBJp ^= null);
	if  UNBOUNDOBJ.name = Aname then do;
	     if Alibrary = "" then
		return (UNBOUNDOBJp);
	     else if UNBOUNDOBJ.library = Alibrary  then
		return (UNBOUNDOBJp);
	     end;
	end;
     return ( null() );
%page;
/* ----------------------------------------------------------------------
    ENTRYPOINT:  request_COMPILE_match_star

    Search the request.request_Tb list for COMPILE with:
     - a name on COMPILE matches a given star_name.

    Starting from beginning of request list, COMPILE structures are examined.
     - a COMPILE not matching star_name is removed from list.
     - a COMPILE that matches star_name:
        - is removed from list;
        - stops the search.

    RETURNS:
     - if match was found: addr(COMPILE)  with all request list items through
                                           Seg removed from request list.
     - no match was found: null()         with an emptied request list.
   ---------------------------------------------------------------------- */
request_COMPILE_match_star:
     entry (ArequestP, Astar_name, Astar_ness) returns (ptr);

/*dcl  ArequestP ptr;				/* Pointer to request structure.		        */
  dcl  Astar_name char(*);				/* Potential star_name to be matched.		        */
  dcl  Astar_ness fixed bin(35);			/* Type of star_name (i.e., result from check_star_name_) */

/*dcl nmI fixed bin;				/* Index within array of added names.		        */

/*dcl COMPILE_nextP ptr;				/* Pointer to next COMPILE structure in the request list. */

     requestP = ArequestP;
     do COMPILEp = Tlist_first_item (addr(request.request_Tb))
        repeat COMPILE_nextP  while (COMPILEp ^= null);

	COMPILE_nextP = Tlist_next_item (addr(COMPILE.request_Td));
						/* Get pointer to next item on the request list.	        */

	call Tlist_remove (addr(COMPILE.request_Td));	/* Remove current item from the request list.	        */

	if  (Astar_name = "" | Astar_ness = STAR_TYPE_MATCHES_EVERYTHING)  then
	     return (COMPILEp);			/* Check names on current item, including added names.    */

	else if  (Astar_ness = STAR_TYPE_USE_PL1_COMPARE)  then do;
	     if  COMPILE.name = Astar_name  then  return (COMPILEp);
	     end;

	else do;
	     call match_star_name_ ((COMPILE.name), Astar_name, code);
	     if  code = 0  then  return (COMPILEp);
	     end;
	end;

     call Tlist_initialize (addr(request.request_Tb), addr(request));
     return ( null() );				/* Request list emptied without finding a match.	        */
%page;
/* ----------------------------------------------------------------------
    ENTRYPOINT:  request_Seg_match_star

    Search the request.request_Tb list for Seg with:
     - a name on Seg matches a given star_name.

    Starting from beginning of request list, Seg structures are examined.
     - a Seg not matching star_name is removed from list.
     - a Seg that matches star_name:
        - is removed from list;
        - stops the search.

    RETURNS:
     - if match was found: addr(Seg)  with all request list items through
                                        Seg removed from request list.
     - no match was found: null()     with an emptied request list.
   ---------------------------------------------------------------------- */
request_Seg_match_star:
     entry (ArequestP, Astar_name, Astar_ness) returns (ptr);

/*dcl  ArequestP ptr;				/* Pointer to request structure.		        */
/*dcl  Astar_name char(*);				/* Potential star_name to be matched.		        */
/*dcl  Astar_ness fixed bin(35);			/* Type of star_name (i.e., result from check_star_name_) */

/*dcl nmI fixed bin;				/* Index within array of added names.		        */

/*dcl Seg_nextP ptr;				/* Pointer to next Seg structure in the request list.     */

     requestP = ArequestP;
     do SegP = Tlist_first_item (addr(request.request_Tb))
        repeat Seg_nextP  while (SegP ^= null);

	Seg_nextP = Tlist_next_item (addr(Seg.request_Td));
						/* Get pointer to next item on the request list.	        */

	call Tlist_remove (addr(Seg.request_Td));	/* Remove current item from the request list.	        */

	nm_dataP = null();				/* Only Seg and UNBOUNDOBJ structures have .name_addP     */
	if  Seg.struct = "Seg" then			/*  elements.  COMPILE and BOUNDOBJ do not have concept   */
	     nm_dataP = Seg.name_addP;		/*  of added names.				        */
	else if  Seg.struct = "UBND"  then
	     nm_dataP = SegP->UNBOUNDOBJ.ptrs.name_addP;

	if  (Astar_name = "" | Astar_ness = STAR_TYPE_MATCHES_EVERYTHING)  then
	     return (SegP);				/* Check names on current item, including added names.    */

	else if  (Astar_ness = STAR_TYPE_USE_PL1_COMPARE)  then do;
	     if  Seg.name = Astar_name  then  return (SegP);

	     if  nm_dataP ^= null  then do;
		do nmI = 1 to nm_data.N;
		     if  nm_data.names(nmI) = Astar_name  then  return (SegP);
		     end;
		end;
	     end;

	else do;
	     call match_star_name_ ((Seg.name), Astar_name, code);
	     if  code = 0  then  return (SegP);
	     
	     if nm_dataP ^= null then do;
		do nmI = 1 to nm_data.N;
		     call match_star_name_ ((nm_data.names(nmI)), Astar_name, code);
		     if  code = 0  then return (SegP);
		     end;
		end;
	     end;
	end;

     call Tlist_initialize (addr(request.request_Tb), addr(request));
     return ( null() );				/* Request list emptied without finding a match.	        */
%page;
%include ssu_subroutine_dcls_;
%page;
%include mbuild_request_parms_;
%page;
%include mbuild_data_;
%page;
%include mbuild_Tlist_;
%page;
%include check_star_name;

     end mbuild_Tlist_;
