
/****^  HISTORY COMMENTS:
  1) change(2019-08-17,GDixon), approve(2019-10-24,MCR10069),
     audit(2020-01-20,Swenson), install(2020-01-20,MR12.6g-0035):
     Command to display seg_type and paradigm information for segments in
     Multics Libraries. Also implements the mbuild subsystem requests:
     seg_type  and  paradigm
                                                   END HISTORY COMMENTS */


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* Name:  mbuild_type, mbt							        */
	/*									        */
	/* Function:  display selected elements of segment type and build paradigm arrays defined by the  */
	/* mbuild_info_.incl.pl1 structures, and the mbuild_info_.cds data creation program.	        */
	/*									        */
	/* Note:  This program operates as a standalone command/active function.  It also provides        */
	/*	entrypoints which implement the seg_type and paradigm requests of the mbuild subsystem. */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

mbuild_type:
mbt: proc options(variable);

display_usage:					/* Display usage for command/active function.	        */
          proc();					/*   NOTE: Usage for subsystem request differs somewhat.  */

          call ioa_ ("^(^a^)", "
Syntax as a command:  mbt paradigm {name} {-control_args}
                      mbt seg_type {seg_name} {-control_args}


Syntax as an active function:  [mbt paradigm paradigm_name {-control_args}]", "
                               [mbt seg_type seg_name {-control_args}]
");
	goto EXIT;
	end display_usage;


  dcl  ioa_ entry() options(variable);

  dcl (error_table_$bad_arg,
       error_table_$badopt,
       error_table_$bigarg,
       error_table_$noarg,
       error_table_$not_act_fnc) fixed bin(35) ext static;

%page;
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* COMMAND/AF:  mbuild_type, mbt						        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

  dcl  PROC    char(11) internal static options(constant) init("mbuild_type");
  dcl  VERSION char(16) internal static options(constant) init("mbuild_type__1.0");

  dcl (UNSET    init(0), 
       SEG_TYPE init(1), 
       PARADIGM init(2)) fixed bin(2) int static options(constant);

  dcl 1 C aligned,					/* Structure to hold control information.	        */
      2 sciP ptr,					/*   ssu_ invocation pointer.			        */
      2 operation fixed bin(2),			/*   0: UNSET;  1: SEG_TYPE;  2: PARADIGM	        */
      2 name char(32) var,				/*   seg_name or paradigm_name argument/operand, if any   */
      2 S,					/*   -control_arg switches.			        */
        3 allS bit(1) aligned ,
        3 for_paradigmS bit(1) aligned,
        3 segTypeSwitches aligned like seg_type_switches,
        3 paradigmSwitches aligned like bld_paradigm_switches;

						/* Setup cleanup on-unit for ssu_ standalone invocation.  */
     isStandalone = T;				/*   Command is running as standalone invocation.	        */
     sciP = null();					/*   Invocation has not been created yet.	        */
     on cleanup call standalone_cleanup_handler(isStandalone, sciP);

     call ssu_$standalone_invocation (sciP, PROC, VERSION, cu_$arg_list_ptr(), abort_to_EXIT, code);

     C.sciP = sciP;					/* Initialize control data used by command & requests.    */
     C.operation = UNSET;
     goto COMMON;

%page;
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* mbuild REQUEST:  seg_type, seg						        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

seg_type_request:
     entry (AsciP, AinfoP);
     
  dcl  AsciP ptr;					/* sci_ptr maintained by ssu_			        */
  dcl  AinfoP ptr;					/* info structure for communicating between requests.     */
						/*   This is not used for mbuild_type command or requests.*/
     isStandalone = F;
     C.sciP = AsciP;
     C.operation = SEG_TYPE;
     goto COMMON;


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* mbuild REQUEST: paradigm, pdm						        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

paradigm_request:
     entry (AsciP, AinfoP);
     
     isStandalone = F;
     C.sciP = AsciP;
     C.operation = PARADIGM;
     goto COMMON;
     
%page;
/* ------------------------------------------------------------
 * Setup to process incoming command/request arguments.
 * ------------------------------------------------------------ */

COMMON:
     call arg_setup (C.sciP);				/* Prepare to process arguments.		        */

     if ^args_remain() then do;			/* If no args given...			        */
	if isStandalone & ^isAF then			/*  - command displays usage			        */
	     call display_usage();

	C.name = "";				/*  - AF or ssu_ requests do default action.	        */
	C.S = F;
	end;
     else call controlArgs(C);			/* Get seg_name or paradigm_name from user args	        */
     

/* ------------------------------------------------------------
 * Process incoming command/request arguments.
 * ------------------------------------------------------------ */

  dcl pdmI fixed bin;
   
  dcl segtI fixed bin;

  dcl  mbuild_display_$paradigm entry (ptr, bit(*) aligned);
  dcl  mbuild_display_$seg_type entry (char(*) var, ptr, bit(*) aligned);

  dcl  mbuild_info_find_$paradigm_by_name  entry (char(*) var) returns(ptr);
  dcl  mbuild_info_find_$paradigm_index    entry (char(*) var) returns(fixed bin);   
  dcl  mbuild_info_find_$paradigm_by_index entry (fixed bin) returns(ptr);
  dcl  mbuild_info_find_$seg_type_for_seg_name entry (char(*) var) returns(ptr);
  dcl  mbuild_info_find_$seg_type_by_index     entry (fixed bin) returns(ptr);

     if C.operation = UNSET then do;			/* Check for argument consistency errors.	        */
	if isAF then
	     call ssu_$abort_line (C.sciP, error_table_$noarg, 
	          "First argument must be: seg_type, seg  or  paradigm, pdm");
	else call display_usage();
	end;

     if isAF then do;
	if length(C.name) = 0 then
	     call ssu_$abort_line (C.sciP, error_table_$noarg, 
		"A ^[seg_name^;paradigm_name^] must be given with active function.",
		C.operation = SEG_TYPE);

	else if C.for_paradigmS | C.allS then
	     call ssu_$abort_line (C.sciP, error_table_$badopt, 
	          "^[-for_paradigm^;-all^] cannot be given with active function.", S.for_paradigmS);
	end;
%page;
/* ------------------------------------------------------------
 * COMMAND: mbuild_type seg_type
 * REQUEST: seg_type
 * ------------------------------------------------------------ */
     if C.operation = SEG_TYPE then do;

	if C.allS & C.for_paradigmS then 
	     C.segTypeSwitches = T;
	else if C.allS & C.build_stepsS then
	     C.segTypeSwitches = T;
	else if C.allS then do;
	     C.segTypeSwitches = T;
	     C.build_stepsS = F;
	     end;

  dcl (only_starnames, only_types) bit(36) aligned;
	seg_type_switches = F;			/* Is only C.source_starnameS set?		        */
	seg_type_switches.source_starnameS = T;
	only_starnames = string(seg_type_switches);
	seg_type_switches = F;			/* Is only C.mbuild_typeS set?		        */
	seg_type_switches.mbuild_typeS = T;
	only_types = string(seg_type_switches);

	if C.for_paradigmS then do;
	     if C.build_stepsS then do;
		seg_type_switches = F;
		seg_type_switches.build_stepsS = T;
		if string(seg_type_switches) = string(C.segTypeSwitches) then do;
		     C.segTypeSwitches = T;
		     C.default_compile_optionsS, C.intermediate_suffixS, C.object_suffixS = F;
		     end;
		end;
	     else if string(C.segTypeSwitches) = F then do;
		C.segTypeSwitches = T;
		C.build_stepsS, C.default_compile_optionsS, C.intermediate_suffixS, C.object_suffixS = F;
		end;

	     if length(C.name) = 0 then
		call ssu_$abort_line (C.sciP, error_table_$noarg, 
		     "-for_paradigm must be followed by name of a build paradigm.");

	     else if length(C.name) > 0 then do;
						/* List all starnames having given build paradigm.        */
		pdmI = mbuild_info_find_$paradigm_index (C.name);
		if pdmI = 0 then goto EXIT;		/* Exit if paradigm name not found.		        */

		do segtI = 1 by 1;
		     segtP = mbuild_info_find_$seg_type_by_index (segtI);
		     if segtP = null() then goto EXIT;
		     if segt.build_paradigm = pdmI then
			call mbuild_display_$seg_type("", segtP, string(C.segTypeSwitches));
		     end;
		end;
	     end;

	else if length(C.name) = 0 & string(C.segTypeSwitches) ^= F then do;
						/* List all seg type specs known to mbuild?	        */
						
	     if string(C.segTypeSwitches) = only_types then do;
		call ioa_("^/Build types:");
		call print_build_types();
		end;
	     else do;
		if string(C.segTypeSwitches) = string(only_starnames) then 
		     call ioa_("^/Build can identify segments matching these starnames:");
		do segtI = 1 by 1;
		     segtP = mbuild_info_find_$seg_type_by_index (segtI);
		     if segtP = null() then goto EXIT;
		     call mbuild_display_$seg_type("", segtP, string(C.segTypeSwitches));
		     end;
		end;
	     end;

	else if length(C.name) = 0 then do;		/* List all starnames known to mbuild?		        */
	     C.segTypeSwitches = T;
	     C.build_stepsS, C.default_compile_optionsS, C.intermediate_suffixS, C.object_suffixS = F;
	     do segtI = 1 by 1;
		segtP = mbuild_info_find_$seg_type_by_index (segtI);
		if segtP = null() then goto EXIT;
		call mbuild_display_$seg_type("", segtP, string(C.segTypeSwitches));
		end;
	     end;

	else do;					/* List seg type which matches a given file name.	        */
	     segtP = mbuild_info_find_$seg_type_for_seg_name (C.name);
	     if segtP ^= null() then do;
		if ^isAF then do;	/* COMMAND: Display selected items from seg type spec.    */
		     if string(C.segTypeSwitches) = F then 
			C.segTypeSwitches = T;
		     call mbuild_display_$seg_type(C.name, segtP, string(C.segTypeSwitches));
		     end;

		else do;				/* AF: Just return requested data item.		        */
		     if C.source_starnameS then af_ret = segt.source_starname;
		     else if C.descriptionS then af_ret = segt.description;
		     else if C.mbuild_typeS then af_ret = segt.mbuild_type;
		     else if C.build_paradigmS | C.build_stepsS then do;
			pdmP = mbuild_info_find_$paradigm_by_index (segt.build_paradigm);
			if pdmP ^= null() then do;
			     if C.build_paradigmS then
				af_ret = pdm.name;
			     else af_ret = substr (pdm.steps,2);
			     end;
			else call ssu_$print_message (C.sciP, error_table_$bad_arg, 
			          "Seg type for ^a references unknown build paradigm (^d).",
				segt.source_starname, segt.build_paradigm);
			end;
		     else if C.compilerS then af_ret = segt.compiler;
		     else if C.default_compile_optionsS then af_ret = segt.default_compile_options;
		     else if C.intermediate_suffixS then af_ret = segt.intermediate_suffix;
		     else if C.object_suffixS then af_ret = segt.object_suffix;
		     else if C.default_libraryS then af_ret = segt.default_library;
		     end;
		end;

	     else call ssu_$abort_line (C.sciP, error_table_$bad_arg, 
		     "No segment type specification matches seg: ^a", C.name);
	     end;
	end;
%page;
/* ------------------------------------------------------------
 * COMMAND: mbuild_type paradigm
 * REQUEST: paradigm
 * ------------------------------------------------------------ */
     else if C.operation = PARADIGM then do;

	if C.allS then C.paradigmSwitches = T;

	if length(C.name) = 0 & string(C.paradigmSwitches) ^= F then do;
						/* List paradigms and data known to mbuild_type.	        */
	     if C.nameS & ^(C.purposeS | C.examplesS | C.stepsS) then
		call ioa_("^/paradigm names:");
	     else C.nameS = T;			/* If asking for particular field in many paradigms, also */
						/*  display the name of the paradigm.		        */
	     do pdmI = 1 by 1;
		pdmP = mbuild_info_find_$paradigm_by_index (pdmI);
		if pdmP = null() then goto EXIT;
		call mbuild_display_$paradigm(pdmP, string(C.paradigmSwitches));
		end;
	     end;

	else if length(C.name) = 0 then do;		/* List only name/description/examples for all paradigms? */
	     C.paradigmSwitches = F;
	     C.nameS, C.purposeS, C.examplesS = T;
	     do pdmI = 1 by 1;
		pdmP = mbuild_info_find_$paradigm_by_index (pdmI);
		if pdmP = null() then goto EXIT;
		call mbuild_display_$paradigm(pdmP, string(C.paradigmSwitches));
		end;
	     end;

	else do;					/* List paradigm which matches name given by user.        */
	     pdmP = mbuild_info_find_$paradigm_by_name (C.name);
	     if pdmP ^= null() then do;
		if ^isAF then do;			/* COMMAND: display selected paradigm details.	        */
		     if string(C.paradigmSwitches) = F then do;
			C.paradigmSwitches = F;
			C.nameS, C.purposeS, C.examplesS = T;
			end;
		     call mbuild_display_$paradigm(pdmP, string(C.paradigmSwitches));	
		     end;

		else do;				/* AF: returns selected information about paradigm.       */
		     if C.purposeS then af_ret = pdm.purpose;
		     else if C.examplesS then af_ret = pdm.examples;
		     else if C.stepsS then af_ret = substr (pdm.steps,2);
						/*  NB: Steps always begins with NL: remove it here.      */
						/*      Remaining text usually contains several lines of  */
						/*      data, separated by NL chars.		        */
		     else af_ret = pdm.name;		/* If didn't give some other control arg, return name.    */
		     end;
		end;

	     else call ssu_$abort_line (C.sciP, error_table_$bad_arg, 
		     "Unknown paradigm name: ^a", C.name);
	     end;
	end;

EXIT:						/* Exit command/request with appropriate cleanup	        */
     call standalone_cleanup_handler(isStandalone, sciP);
     return;
%page;
print_build_types:
     proc ();

  dcl  mbuild_info_find_$build_type_is_valid entry (char(*)) returns(bit(1) aligned);

  dcl  of_interest (10) char(20) init(
        "bindfile", "source_arch", "source", "Include", "Info", 
        "Build_script", "Build_exec_com", "Build_log", "Bound_obj", "Unbound_obj");
  dcl  seen (30) char(20),
       seenN fixed bin init(0);
     
  dcl (interestI, seenI) fixed bin;
     
     do interestI = lbound(of_interest,1) to hbound(of_interest,1);
	if mbuild_info_find_$build_type_is_valid (of_interest(interestI)) then do;
	     call ioa_ ("  ^a", of_interest(interestI));
	     seenN = seenN + 1;
	     if seenN <= hbound(seen,1) then
		seen(seenN) = of_interest(interestI);
	     end;
	end;
     
     do segtI = 1 by 1;
	segtP = mbuild_info_find_$seg_type_by_index (segtI);
	if segtP = null() then goto EXIT_pbt;

	do seenI = 1 to min(seenN, hbound(seen,1));
	     if seen(seenI) = segt.mbuild_type then goto NEXT_TYPE;
	     end;

	call ioa_ ("  ^a", segt.mbuild_type);
	seenN = seenN + 1;
	if seenN <= hbound(seen,1) then
	     seen(seenN) = segt.mbuild_type;
NEXT_TYPE:
	end;

EXIT_pbt:
     end print_build_types;
%page;
/* ------------------------------------------------------------
 * Process seg_name/paradigm_name, and -control_arg arguments.
 * ------------------------------------------------------------ */

controlArgs:
     proc (c);

  dcl 1 c aligned like C;				/*  control arg specification data                   (in) */

  dcl  code fixed bin (35);				/*  status code				        */

     c.name = "";
     c.S = F;

     do while (args_remain());
	call ssu_$arg_ptr (c.sciP, argI+1, argP, argL);	/* Conditionally read next arg to command/af/request      */
					
	if isControlArg(arg) then do;

	     if       arg = "-a"      | arg = "-all"          then c.allS = T;

	     else if  arg = "-nm"     | arg = "-name"         then c.source_starnameS, c.nameS = T;
						/*    -name applies either to seg_type or paradigm        */
	     else if  arg = "-desc"   | arg = "-description"  then c.descriptionS = T;
	     else if  arg = "-tp"     | arg = "-type"	    then c.mbuild_typeS = T;
	     else if  arg = "-pdm"    | arg = "-paradigm"     then c.build_paradigmS = T;
	     else if                    arg = "-compiler"     then c.compilerS = T;
	     else if  arg = "-op"     | arg = "-option"       then c.default_compile_optionsS = T;
	     else if  arg = "-isfx"   | arg = "-isuffix"      then c.intermediate_suffixS = T;
	     else if  arg = "-osfx"   | arg = "-osuffix"      then c.object_suffixS = T;
	     else if  arg = "-lb"     | arg = "-library"      then c.default_libraryS = T;
	     else if  arg = "-fpdm"   | arg = "-for_paradigm" then c.for_paradigmS = T;

	     else if                    arg = "-purpose"	    then c.purposeS = T;
	     else if                    arg = "-example"	    then c.examplesS = T;
	     else if                    arg = "-steps"	    then c.stepsS, c.build_stepsS = T;

               else call ssu_$print_message (C.sciP, error_table_$badopt, 
		"Ignoring unsupported control arg: ^a", arg);
	     end;
	
	else if c.operation ^= UNSET then do;		/* If operation given, next positional arg is name.       */

  dcl  expand_pathname_$component entry (char(*), char(*), char(*), char(*), fixed bin(35));
  dcl  test_dir_path char(168), test_entryname char(32), test_arch_comp char(32);

               call expand_pathname_$component (arg, test_dir_path, test_entryname, test_arch_comp, code);
	     if code ^= 0 then
		call ssu_$abort_line (C.sciP, code, 
		     "^[seg_name^; paradigm_name^]: ^a", c.operation = SEG_TYPE, arg);

	     if test_entryname ^= arg then
		call ssu_$abort_line (C.sciP, error_table_$bad_arg, 
		     "^[seg_name^;paradigm_name^]: ^a", c.operation = SEG_TYPE, arg);

	     if argL > maxlength(c.name) then
		call ssu_$abort_line (C.sciP, error_table_$bigarg, 
		     "'^a' may be up to ^d characters long.", arg, maxlength(c.name));

	     c.name = arg;
	     end;

	else do;					/* Command/AF needs an operation.  Choices are:	        */
	     if arg = "paradigm" | arg = "pdm" then
	          c.operation = PARADIGM;

	     else if arg = "seg_type" | arg = "seg" then
		c.operation = SEG_TYPE;

	     else call ssu_$abort_line(C.sciP, error_table_$bad_arg, 
		     "Unsupported operation: ^a^/Supported ops: paradigm or seg_type", arg);
	     end;

	argI = argI + 1;				/* Record that we processed the arg just examined above.  */
	end;

     end controlArgs;

%page;
%include ssu_standalone_command_;

%page;
%include mbuild_info_;

     end mbuild_type;

     
