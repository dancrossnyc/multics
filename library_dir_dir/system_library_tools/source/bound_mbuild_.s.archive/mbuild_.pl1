
/****^  HISTORY COMMENTS:
  1) change(2019-08-17,GDixon), approve(2019-10-24,MCR10069),
     audit(2020-01-20,Swenson), install(2020-01-20,MR12.6g-0035):
     mbuild subroutine to invoke other mbuild requests, or display a banner
     describing invocation of such requests.
                                                   END HISTORY COMMENTS */


/* ======================================================================
 *
 *  mbuild UTILITY ROUTINES
 *
 * ====================================================================== */

mbuild_:	
     proc();
     
  dcl  ioa_ entry() options(variable);
  dcl  ioa_$general_rs_control_string entry(ptr, char(*), fixed bin, char(*), fixed bin(21), bit(1) aligned,
	bit(1) aligned);
  dcl  ioa_$rsnnl entry() options(variable);
  dcl  cu_$arg_count_rel entry (fixed bin, ptr, fixed bin(35));
  dcl  cu_$arg_list_ptr entry (ptr);
  dcl  ssu_$evaluate_active_string entry (ptr, ptr, char(*), fixed bin, char(*) var, fixed bin(35));

  dcl  NL char(1) int static options(constant) init("
");
  dcl  NLNL char(2) int static options(constant) init("

");

  dcl (addr, length, rtrim, substr) builtin;
%page;
/* ----------------------------------------------------------------------
    ENTRYPOINT:  banner

    Display an mbuild banner line without executing any requests in the
    banner text.
   
    If Adisplay = T  &  Arequest_line begins with:
      "^/^/"  - then display of banner starts with banner hyphens.
      other   - then display only the banner.
   ---------------------------------------------------------------------- */
banner:
     entry (AsciP, Arequest_line, Adisplay) options(variable);     

  dcl  Arequest_line char(*);				/* ioa_ control string giving request to be executed.     */
  dcl  Adisplay bit(1) aligned;			/* T: display request line before executing it.	        */

  dcl  bannerS bit(1) aligned init(F);

     bannerS = T;
     goto DO_BANNER;


/* ----------------------------------------------------------------------
    ENTRYPOINT:  general_request

    Execute an mbuild request line, optionally displaying the entire 
    request line.
   
    If Adisplay = T  &  Arequest_line begins with:
      "^/^/"  - then display of request line starts with banner hyphens.
      other   - then display only the request line.

    Aarg_listP     = pointer to argument list containing args to be used in
                     request_line.
    Astarting_argI = number of first arg in that arg_list to be used.

   ---------------------------------------------------------------------- */
general_request:
     entry (AsciP, Arequest_line, Adisplay, Aarg_listP, Astarting_argI);

  dcl  Aarg_listP ptr;
  dcl  Astarting_argI fixed bin;
     
  dcl  arg_count fixed bin;
  dcl  ignore_code fixed bin(35);
  dcl  gen_request_line char(500);
  dcl  request_line char(500),
       request_lineL fixed bin(21);     

     call cu_$arg_count_rel (arg_count, Aarg_listP, ignore_code);
     if  arg_count < Astarting_argI  then do;
	request_line = Arequest_line;
	request_lineL = length(rtrim(Arequest_line));
	end;
     else do;
	arg_count = arg_count - (Astarting_argI-1);
	call ioa_$rsnnl ("^a^^^d( ^^a^^)", gen_request_line, request_lineL, Arequest_line, arg_count);
	call ioa_$general_rs_control_string (Aarg_listP, substr(gen_request_line,1,request_lineL), Astarting_argI, 
	     request_line, request_lineL, F, T);
	end;

     go to DO_REQUEST;


/* ----------------------------------------------------------------------
    ENTRYPOINT:  request

    Execute an mbuild request line, optionally displaying the entire 
    request line.
   
    If Adisplay = T  &  Arequest_line begins with:
      "^/^/"  - then display of request line starts with banner hyphens.
      other   - then display only the request line.
   ---------------------------------------------------------------------- */
request:
     entry (AsciP, Arequest_line, Adisplay) options(variable);

  dcl  arg_listP ptr;
  dcl  argI fixed bin init(4);

DO_BANNER:
     call cu_$arg_list_ptr (arg_listP);
     call ioa_$general_rs_control_string (arg_listP, Arequest_line, argI, request_line, request_lineL, F, T);
     
DO_REQUEST:
     if Adisplay then do;
	if  substr(request_line,1,length(NLNL)) = NLNL  then 
	     call ioa_ ("^/---------- ^a", substr(request_line, 1+length(NLNL), request_lineL-length(NLNL)));
	else call ioa_ (substr(request_line,1,request_lineL));
	end;

     if ^bannerS then
	call ssu_$execute_line (AsciP, addr(request_line), request_lineL, ignore_code);
     return;
%page;
/* ----------------------------------------------------------------------
    ENTRYPOINT:  general_active_request

    Execute an mbuild request line, optionally displaying the entire 
    request line.

    Aarg_listP     = pointer to argument list containing args to be used in
                     request_line.
    Astarting_argI = number of first arg in that arg_list to be used.

   ---------------------------------------------------------------------- */
general_active_request:
     entry (AsciP, Arequest_line, Astring_type, Aaf_ret, Aarg_listP, Astarting_argI);

/*dcl  Aarg_listP ptr;
  dcl  Astarting_argI fixed bin;  */
  dcl  Astring_type fixed bin;			/* a NON-ZERO type in: cp_active_string_types.incl.pl1    */
  dcl  Aaf_ret char(*) var;

  dcl  active_string char(request_lineL) based(addr(request_line));

     call cu_$arg_count_rel (arg_count, Aarg_listP, ignore_code);
     arg_count = arg_count - 1;			/*  - Don't count af_ret as an input argument.	        */
     if  arg_count < Astarting_argI  then do;
	request_line = Arequest_line;
	request_lineL = length(rtrim(Arequest_line));
	end;
     else do;
	arg_count = arg_count - (Astarting_argI-1);
	call ioa_$rsnnl ("^a^^^d( ^^a^^)", gen_request_line, request_lineL, Arequest_line, arg_count);
	call ioa_$general_rs_control_string (Aarg_listP, substr(gen_request_line,1,request_lineL), Astarting_argI, 
	     request_line, request_lineL, F, F);
	end;

     call ssu_$evaluate_active_string (AsciP, null(), active_string, Astring_type, Aaf_ret, code);
     if code ^= 0 then 
	call ssu_$print_message (AsciP, code, "^/   active string: ^[^;|^;||^][^a]^/   partial result: ^a", 
	     Astring_type, active_string, Aaf_ret);
     return;
%page;
%include ssu_subroutine_dcls_;
%page;
%include cp_active_string_types;
     end mbuild_;
