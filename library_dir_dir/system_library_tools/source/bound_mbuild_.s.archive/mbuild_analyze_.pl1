
/****^  HISTORY COMMENTS:
  1) change(2019-08-17,GDixon), approve(2019-10-25,MCR10069),
     audit(2020-01-20,Swenson), install(2020-01-20,MR12.6g-0035):
     mbuild request:  analyze, az
  2) change(2020-01-26,GDixon), approve(2020-01-26,MCR10079),
     audit(2020-02-02,Swenson), install(2020-02-02,MR12.6g-0045):
      A) Add -progress and -no_progress control argument to suppress
         invoking the progress request at end of the analysis.
  3) change(2020-11-09,GDixon), approve(2021-02-22,MCR10086),
     audit(2021-03-17,Swenson), install(2021-03-17,MR12.6g-0051):
      A) Remove unused (and now incorrect) declaration of
         mbuild_Tlist_$find_Seg subroutine.
      B) mbuild_data_$get_Seg now special-cases DELETE operation searches.
         Change az_source to use REPLACE operation when Seg(source) is
         being DELETEd from BOUNDSEG (during BOUNDSEG lookup).
      C) mbuild_data_$get_Seg now checks archive_name parameter against
         Seg().archive_name found by $find_Seg lookup of existing Seg
         structure.  If no-match, a new Seg structure is created.
                                                   END HISTORY COMMENTS */

mbuild_analyze_:
     proc (AsciP, Abuild_dataP) returns (bit(1) aligned);

  dcl  PROC char(15) int static options(constant) init("mbuild_analyze_");

     return (check_parms (mbuild_data_version_3));
/* -------------------- */

  dcl  ioa_ entry() options(variable);

  dcl  mbuild_$request entry (ptr, char(*), bit(1) aligned) options(variable);

  dcl  mbuild_Tlist_$empty_BOUNDOBJ_list entry (ptr);
  dcl  mbuild_Tlist_$empty_COMPILE_list entry (ptr);
  dcl  mbuild_Tlist_$empty_UNBOUNDOBJ_list entry (ptr);
  dcl  mbuild_Tlist_$empty_paradigm_list entry (ptr, ptr);

  dcl  mbuild_compile_$analyze_compilation entry (ptr, ptr);

  dcl  mbuild_data_$derived_Seg entry (ptr) returns(bit(1) aligned);
  dcl  mbuild_data_$get_build_progress entry (ptr) returns(bit(*) aligned);
  dcl  mbuild_data_$get_BOUNDOBJ entry (ptr, char(*) var, char(*) var, char(*) var, ptr) returns(ptr);
  dcl  mbuild_data_$get_COMPILE entry (ptr, char(*) var, char(*) var, ptr) returns(ptr);
  dcl  mbuild_data_$get_Seg entry (ptr, char(*) var, char(*) var, char(*) var, char(*) var, char(*) var) returns(ptr);
  dcl  mbuild_data_$get_UNBOUNDOBJ entry (ptr, char(*) var, char(*) var, char(*) var, ptr) returns(ptr);
  dcl  mbuild_data_$unknown_library_found entry (ptr, bit(1) aligned) returns(bit(1) aligned);

  dcl  mbuild_library_$archive_table entry (char(*), char(*) var, char(*) var, (*) char(32) var, fixed bin,
          fixed bin(35));

  dcl (error_table_$badarg,
       error_table_$badopt,
       mbuild_et_$derived_segment,
       mbuild_et_$not_intermediate,
       mbuild_et_$unexpected_event,
       mbuild_et_$unsupported_paradigm) fixed bin(35) ext static;

  dcl (addr, hbound, lbound, length, rtrim, sum) builtin;
%page;

          /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
          /*                                                                                                */
          /* PARADIGM:  A typical pattern or example of a model.                                            */
          /*                                                                                                */
          /* Items installed in the Multics Libraries include:                                              */
          /*  - Original content information:  source files, include files, info segments, bind files,      */
          /*                                    etc.                                                        */
          /*  - Derived content information:   unbound object files, bound object segments,                 */
          /*                                    source archives, object archives, etc.                      */
          /*                                                                                                */
          /* While most items are stored in a standard set of directories associated with each library      */
          /* (e.g., source, object, execution, listings), some items are targeted to a single               */
          /* directory shared by all libraries (e.g., include files).				        */
          /*                                                                                                */
          /* While most original content items are stored in the source directory, some items are           */
          /* installed only in object and execution directories (e.g., admin.ec).                           */
          /* Some original content is installed in only one target directory (e.g., probe.info)             */
          /*                                                                                                */
          /* mbuild has to know which pattern to follow to identify original content information for a      */
          /* change, in building derived content from that original content, and it installing those new    */
          /* or changed information items into the Multics Libraries.  The build patterns (paradigms)       */
          /* known to mbuild are defined in a data segment: the mbuild_info_.cds file.                      */
          /*                                                                                                */
          /* That file should be updated to: define any new build/install pattern or paradigm; or to        */
          /* assign additional file suffixes to an existing paradigm.  Many mbuild requests perform         */
          /* per-paradigm actions (steps) to implement the build or install paradigm for a given file.      */
          /* Look for such code by paradigm name in this module (mbuild_analyze_), and in other mbuild      */
          /* requests.                                                                                      */
          /*                                                                                                */
          /*                                                                                                */
          /* New Paradigm:                                                                                  */
          /*                                                                                                */
          /* To define a new paradigm: add elements to the info.build_paradigms struct (in mbuild_info_.cds)*/
          /*                     then: add code in mbuild to implement this new paradigm.                   */
          /*                                                                                                */
          /* Useful Commands:                                                                               */
          /*                                                                                                */
          /*    For a current list of paradigms, type:   mbuild_type pdm    (brief info for each paradigm)  */
          /*                                       or:   mbt pdm -a         (suggested build steps)         */
          /*                                       or:   mbt pdm -nm        (list of paradigm names)        */
          /*     To determine paradigm for given file:   mbt seg FILE_NAME                                  */
          /*      To list file types using a paradigm:   mbt seg -fpdm PARADIGM_NAME                        */
          /*                                                                                                */
          /* To list dirs matching given library name:   lds pn LIBRARY_NAME                                */
          /*                                       or:   lds rt LIBRARY_NAME -nm (all names on library dir) */
          /*                                                                                                */
          /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
%page;
/* ========================================================================================== 

    REQUEST:  analyze

    Analyzes Seg() structures built by earlier scan or read requests.

    NOTE: As each Seg is created, it was added to the Seg_Tb thread.  This threaded list will also 
	contain Seg structures for derived segments (compiled object files, bound objects, etc.).
	This mixture of original-content and derived item Segs is what distinguishes the
	Seg_Tb from the scan_Tb list (created by earlier scan or read request).

       mbuild_data_$get_Seg also calls mbuild_library_$locate_Seg to determine if a segment in the
       install dir is replacing an existing segment in Multics Libraries.  This routine:
        - Gets the existing segment's:
	 - containing directory path:    ex: >ldd>sss>source  or  >doc>info  or >ldd>include
	 - containing archive (if any):  bound_XXX_.s.archive or bound_xxx_.archive
        - Makes Seg.library structure element identify that specific library directory if possible
				   ex: sss.include for any **.incl.* segment.
        - Assigns Seg(source/bindfile).containing_arch for a source/bindfile replacing 
	a bound segment component.  Later analysis uses this archive name to create
	a Seg(source_arch) or Seg(object_arch) structure.

    The scan_Tb threaded list contains a Seg structure for each segment found in the install dir.  
    This directory usually starts out containing only the original-content files associated with 
    the change.  It might contain some derived-content files, if the build operation is restarted
    without cleanup of the prior build attempt.  These derived-content segments are not represented
    in the scan_Tb list.
  
    0) This pre-analyze step checks that the scan_Tb thread is non-empty.  That would mean neither scan 
       nor read request has been performed.  Report "nothing to analyze" if scan_Tb list is empty.

    1) Walk down the scan_Tb thread, using Seg.name to look up build_type and paradigm for each segment.  
       Warn installer of any derived-content segments found in the scan_Tb thread.

    NOTE: The look-up by Seg.name was actually done earlier by mbuild_data_$get_Seg as the Seg structure was 
	created, and placed on the scan_Tb list.

    Input:  build_data.scan_Tb: list of Seg structures for original-content files found in 
	  install dir by the earlier scan request.  The suffix for each file is looked up in
	  the mbuild_info_ database to identify the file's build-type.  These build-type values
	  are shown in parentheses in the diagram below (and in subsequent diagrams).

	        Seg(source)  Seg(Include)  Seg(Info)  Seg(bindfile)  Seg(source_arch)  Seg(<other>)
       scan_Tb:    -scan_Td     -scan_Td      -scan_Td   -scan_Td       -scan_Td          -scan_Td


    NOTE: For an explanation of structure diagrams like the one above,
	  see:  mbuild_data_.incl.pl1  (explanatory comments, legend, etc)

    RULE: In Seg(<build-type>), the <build-type> name comes from mbuild_info_ (the build_type.mbuild_type field).  
	It is stored in the Seg.type structure element.  

 * ========================================================================================== */

analyze_request:
     entry (AsciP, Abuild_dataP);

  dcl 1 C aligned,
      2 sciP ptr,
      2 S,
        3 (cleanS,
           progressS
           ) bit(1) unaligned;

     C.sciP = AsciP;
     C.S = T;

     call arg_setup (C.sciP);

     if args_remain() then				/* User asks for a format via -Control_args	        */
	call controlArgs(C);


/* ----------------------------------------------------------------------
    - Ensure install directory has been scanned (via scan or read request).
   ---------------------------------------------------------------------- */

     string(bld_progress) = mbuild_data_$get_build_progress (addr(bld));

     if ^bld_progress.scannedS then do;                     /* Complain if no prior scan or read request.             */
          call ssu_$abort_line (C.sciP, 0,
               "Obtain data to analyze with request:  scan  or  read^/^20t or both requests in that order.");
          end;                                              /*  - Nothing to analyze in that case.                    */

                                                            /* Check whether prior analysis was performed.            */
     if bld_progress.analyzedS then do;                     /*  - If so, empty lists built by prior analysis.         */
                                                            /*    Seg_Tb and scan_Tb lists remain untouched.          */
  dcl  paradigm_TbP ptr;

          do paradigm_TbP = addr(bld.source_Tb),         addr(bld.bindfile_Tb),
                            addr(bld.source_arch_Tb),    addr(bld.object_arch_Tb),
                            addr(bld.Bound_obj_Tb),      addr(bld.Unbound_obj_Tb),
                            addr(bld.target_only_Tb),    addr(bld.listing_Tb),
                            addr(bld.object_x_only_Tb),
                            addr(bld.mbuild_support_Tb);
               call mbuild_Tlist_$empty_paradigm_list (addr(bld), paradigm_TbP);
               end;

          call mbuild_Tlist_$empty_BOUNDOBJ_list(addr(bld));/*  - Make sure the per-structure type lists for          */
          call mbuild_Tlist_$empty_COMPILE_list(addr(bld)); /*    relationship symbol structures are empty.           */
          call mbuild_Tlist_$empty_UNBOUNDOBJ_list(addr(bld));
          end;
%page;
/* ------------------------------------------------------------------------------------------

REQUEST:  analyze (continued)

  2) Place each Seg on a separate thread devoted to its build paradigm.  For example,
     a Seg(source) would be added to the source_Tb paradigm list, in addition to remaining
     on the scan_Tb and Seg_Tb lists.

  3) For each Seg.type, take special action:
      a) For Seg(bindfile) paradigm, add a BOUNDOBJ (relationship symbol) structure to manage 
         bind operations which will use the bind file.
          - Point to the Seg(bindfile) in BOUNDOBJ.bindfileP
      b) For Seg(source_arch) paradigm (a new source archive being added to library):
          - Get a BOUNDOBJ, or find existing BOUNDOBJ.
          - Add the Seg(source_arch) to BOUNDOBJ.sourceArchs_Tb
          - For each component within Seg(source_arch):
             - Add a Seg(source) to the source_Tb list. (Note: these Segs are not on the scan_Tb list).
               Add these Seg(source) to Seg(source_arch).inArch_Tb list.
      c) For Seg(source) paradigm:
          i)  add a COMPILE structure to manage compiling the source.
          ii)  If existing segment is a component of a source archive:
                - link Seg(source) to a Seg(source_arch) structure.
          iii) If existing segment is not kept in a source archive: 
                - link Seg to an UNBOUNDOBJ structure.


   NOTE: For per-paradigm threads, each paradigm type has its own thread base (head/tail)
         data element, which is kept in build_data structure.  Within the Seg structure, 
         a pdm_Td element is used as the thread data for all paradigm types.  Each Seg 
         has only one paradigm type, so there is no overlap in use of the pdm_Td element.

  ------------------------------------------------------------------------------------------ 
  build_data elements   (Diagram after Step 3)
  - - - - - - - - - -
                         Seg(mb_script)
mbuild_support_Tb:        -pdm_Td
                                                                          UNBOUNDOBJ
    UNBOUNDOBJ_Tb:                                                         -UNBOUNDOBJ_Td   
                                                 Seg(bindfile)              sP
      bindfile_Tb:                                -pdm_Td                    |
                                    bindfileP - -  BOUNDOBJp                 |
                                  BOUNDOBJ                                   |
      BOUNDOBJ_Tb:                 -BOUNDOBJ_Td                              |
                                    sourceArchsN                             |
                                    sourceArchs_Tb                           |
                                    /                                        |
                                archs_Td- - - - - - - - - archs_Td           |
                              Seg(source_arch)          Seg(source_arch)     |
source_archive_Tb:             -pdm_Td                   -pdm_Td             |
                                inArch_Tb                 inArch_Tb          |
                                /                              \             |
                        inArch_Td- - - - - inArch_Td          inArch_Td     UNBOUNDOBJp
                      Seg(source)       Seg(source)         Seg(source)    Seg(source)
        source_Tb:     -pdm_Td           -pdm_Td             -pdm_Td        -pdm_Td      
                        COMPILEp          COMPILEp            COMPILEp       COMPILEp
                            \                   \                   \               \    
                            sP oP               sP oP               sP oP           sP oP
                          COMPILE             COMPILE             COMPILE         COMPILE
       COMPILE_Tb:         -COMPILE_Td         -COMPILE_Td         -COMPILE_Td     -COMPILE_Td            

                       Seg(include)  Seg(info)     Seg(<other>) 
   target_only_Tb:      -pdm_Td       -pdm_Td       -pdm_Td     ...

                       Seg(exec_com)
 object_x_only_Tb:      -pdm_Td

                      Seg(listing)
       listing_Tb:     -pdm_Td

  ------------------------------------------------------------------------------------------ */
%page;
  dcl  revised_library char(32) var;
  dcl  revised_name char(32) var;
  dcl  revised_operation char(12) var;

WALK_scan_Tb:
     do SegP = Tlist_first_item (addr(bld.scan_Tb))
        repeat Tlist_next_item  (addr(Seg.scan_Td)) while (SegP ^= null());
          segtP = Seg.seg_typeP;                            /* Address Seg build_type info.                           */

          if       segt.build_paradigm = PDM_Bound_obj & Seg.operation = "DELETE"  then
               call az_relationship();                      /* For each Seg(Bound_obj) being DELETEd:                 */
                                                            /*  - generate a BOUNDOBJ.operation = "DELETE"            */

          else if  segt.build_paradigm = PDM_Unbound_obj & Seg.operation = "DELETE"  then
               call az_relationship();                      /* For each Seg(Unbound_obj) being DELETEd:               */
                                                            /*  - generate an UNBOUNDOBJ.operation = "DELETE"         */

          else if  segt.build_paradigm = PDM_bindfile  then /* For each Seg(bindfile) in the scan_Tb list             */
               call az_bindfile();

          else if  segt.build_paradigm = PDM_source_arch  &  Seg.operation = "ADD"  then
               call az_source_arch();                       /* For each Seg(source_arch) ADDed in the scan_Tb list    */

          else if  segt.build_paradigm = PDM_source_arch  &  Seg.operation = "REPLACE"  then
               goto OPERATION_NOT_HANDLED;

          else if  segt.build_paradigm = PDM_source_arch  &  Seg.operation = "DELETE"  then
               goto OPERATION_NOT_HANDLED;

          else if  segt.build_paradigm = PDM_source_arch  &  Seg.operation = "UPDATE"  then;
						/* Handled by 1st component being updated in source_arch  */

          else if  segt.build_paradigm = PDM_object_arch  &  
                  (Seg.operation = "ADD" | Seg.operation = "REPLACE" | Seg.operation = "DELETE" ) then
               goto OPERATION_NOT_HANDLED;                  /* For each Seg(object_arch) ADDed/REPLACEd/DELETEd       */
						/*  - scan request ignores such derived segments, so such */
						/*    Seg() structures should not appear in scan_Tb list. */

          else if  segt.build_paradigm = PDM_source  then   /* For each Seg(source) in scan_Tb list:                  */
               call az_source();

          else if  segt.build_paradigm = PDM_target_only  then do;
                                                            /* For each Seg(XXX) in scan_Tb list in target_only       */
                                                            /* paradigm:                                              */
               call Tlist_add_to_tail (addr(bld.target_only_Tb), SegP, addr(Seg.pdm_Td));
               end;                                         /*  - Add it to the target_only_Td per-paradigm list.     */

          else if  segt.build_paradigm = PDM_object_x_only  then do;
                                                            /* For each Seg(XXX) in scan_Tb list in object_x_only     */
                                                            /* paradigm:                                              */
               call Tlist_add_to_tail (addr(bld.object_x_only_Tb), SegP, addr(Seg.pdm_Td));
               end;                                         /*  - Add it to the object_x_only_Td per-paradigm list.   */

          else if  segt.build_paradigm = PDM_mbuild_support  then do;
                                                            /* For each Seg(Build_XXX) in scan_Tb list:               */
               call Tlist_add_to_tail (addr(bld.mbuild_support_Tb), SegP, addr(Seg.pdm_Td));
               end;                                         /*  - Add it to the mbuild_support_Td per-paradigm list.  */

          else if  mbuild_data_$derived_Seg (SegP)  then do;
                                                            /* Analysis ignores paradigms for most derived objects.   */
               call ssu_$print_message (C.sciP, mbuild_et_$derived_segment, " ^a:  ^a", Seg.type, Seg.name);
               end;
                                                            /* Oops: somebody added a new paradigm type, and didn't   */
                                                            /*       tell us; or support hasn't been added for some   */
          else do;					/*       paradigm seldom-used in Multics Libraries.       */
OPERATION_NOT_HANDLED:             
               pdmP = Seg.build_typeP;
               call ssu_$abort_line (C.sciP, mbuild_et_$unsupported_paradigm, 
                    "Paradigm ^a for ^a of Seg(^a) ^a is not handled by ^a.",
                    pdm.name, Seg.operation, Seg.type, Seg.name, ssu_$get_subsystem_name(C.sciP));
               end;
SKIP_scan_Seg:
          end WALK_scan_Tb;

     if  C.cleanS  then
	call mbuild_$request (C.sciP, "^2/clean -all", T);

     if  C.progressS  then
	call mbuild_$request (C.sciP, "^2/progress", T);

     if mbuild_data_$unknown_library_found (addr(bld), T) then 
	call ioa_ ("^/Please resolve these library names before doing: compile, archive_prep, or install_ec.");

     return;
%page;
          /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
          /* Per-paradigm Analysis Routines                                                                 */
          /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
az_source:
     proc ();

     if Seg.operation = "REPLACE" then
REPLACE_SOURCE:
     do;
          call add_COMPILE_to_Seg(addr(Seg));               /*  - Tie it to a COMPILE structure.                      */

          if Seg.archive_name ^= "" then 
BOUND_SOURCE:
          do;                                               /* Replacing component of a bound object?                 */
               if Seg.BOUNDOBJp = null() then do;           /*  - Find/make a BOUNDOBJ structure.                     */
                    
                    revised_name = before(Seg.archive_name,".");
                                                            /* Convert source_arch name to name of its bound object   */
                    revised_library = before(Seg.library,".");
						/* Extract only library name from library.dir combo.      */
		if Seg.operation = "DELETE" then
		     revised_operation = "REPLACE";
		else revised_operation = Seg.operation;

                    BOUNDOBJp = 
                         mbuild_data_$get_BOUNDOBJ (addr(bld), revised_name, revised_library, revised_operation, null());

                    Seg.BOUNDOBJp = BOUNDOBJp;
                    end;
               else BOUNDOBJp = Seg.BOUNDOBJp;

               sArchP = Tlist_holder (addr(Seg.inArch_Td));
               if sArchP = null() then do;                  /* Seg not been added as component of Seg(source_arch)?   */

                    sArchP = mbuild_data_$get_Seg (addr(bld), unknown_type, Seg.archive_name, 
					 Seg.library, "UPDATE", no_containing_archive);
						/*  - Get containing source archive's Seg structure.      */
						/*    Let $get_Seg fill in the Seg(type) value.	        */
                    if sArch.BOUNDOBJp = null then do;      /*  - Link Seg(source_arch) to BOUNDOBJ (found above).    */
                         sArch.BOUNDOBJp = BOUNDOBJp;
                         call Tlist_add_to_tail (addr(BOUNDOBJ.sourceArchs_Tb), sArchP, addr(sArch.archs_Td));

                         if sArch.operation = "UPDATE" then /*  - Since most BOUNDOBJ have 1 source archive which     */
                              BOUNDOBJ.operation = "UPDATE";/*    is not visible in standard print request, reflect   */
                         end;                               /*    UPDATE operation in its BOUNDOBJ relationship symbol*/

                    if ^Tlist_member (addr(sArch.pdm_Td)) then
                                                            /*  - Put Seg(source_arch) on bld.source_archive_Tb list  */
                         call Tlist_add_to_tail (addr(bld.source_arch_Tb), addr(sArch), addr(sArch.pdm_Td));

                    call Tlist_add_to_tail (addr(sArch.inArch_Tb), addr(Seg), addr(Seg.inArch_Td));
                    end;                                    /*  - Add Seg(source) to Seg(source_arch) component list  */

               end BOUND_SOURCE;                            /* END of REPLACE/ADD component of bound segment.         */
               
          else 
REPLACE_UNBOUND_SOURCE:
          do;                                               /* Replacing source for UNBOUNDOBJ?                       */
               if Seg.UNBOUNDOBJp = null() then do;         /*  - Link to an UNBOUNDOBJ structure.                    */
                    revised_name = before(Seg.name,".");
                    revised_library = before(Seg.library,".");
                    UNBOUNDOBJp =
                         mbuild_data_$get_UNBOUNDOBJ (addr(bld), revised_name, revised_library, "REPLACE", addr(Seg));
                    Seg.UNBOUNDOBJp = UNBOUNDOBJp;
                    end;
               end REPLACE_UNBOUND_SOURCE;
          end REPLACE_SOURCE;
%page;
     else if Seg.operation = "ADD" & Seg.archive_name ^= "" then 
ADD_BOUND_SOURCE:
     do;
          call add_COMPILE_to_Seg(addr(Seg));               /*  - Tie Seg(source) to a COMPILE structure.	        */

          goto BOUND_SOURCE;                                /* ADDing bound source is same as REPLACing bound source  */
                                                            /*  when linking source with its source archive.          */
          end ADD_BOUND_SOURCE;


     else if Seg.operation = "ADD" & Seg.archive_name = "" then 
ADD_UNBOUND_SOURCE:
     do;                                                    /* Adding a new unbound object?                           */
          call add_COMPILE_to_Seg(addr(Seg));               /*  - Tie it to a COMPILE structure.                      */

          revised_name = before(Seg.name,".");
          revised_library = before(Seg.library,".");
          UNBOUNDOBJp =
               mbuild_data_$get_UNBOUNDOBJ (addr(bld), revised_name, revised_library, "ADD", addr(Seg));
          Seg.UNBOUNDOBJp = UNBOUNDOBJp;

          end ADD_UNBOUND_SOURCE;

     else if Seg.operation = "DELETE" & Seg.archive_name ^= "" then
DELETE_BOUND_SOURCE:
     do;
          call Tlist_add_to_tail (addr(bld.source_Tb), addr(Seg), addr(Seg.pdm_Td));
          goto BOUND_SOURCE;                                /* DELETE bound source is same as REPLACE bound source    */
                                                            /*  when linking source with its source archive.          */
          end DELETE_BOUND_SOURCE;
     
     else if Seg.operation = "DELETE" & Seg.archive_name = "" then 
          call ssu_$print_message (C.sciP, mbuild_et_$unexpected_event, 
	     "Deleting ^a: ^a  for an Unbound_obj - just delete that Unbound_obj", Seg.type, Seg.name);

     end az_source;
%page;
az_source_arch:
     proc ();                                               /* For each Seg(source_arch) in the scan_Tb list:         */
                                                            /*  Note: Though a source archive is just a container of  */
                                                            /*        original content items (and is therefore a      */
                                                            /*        derived item), we use a source archive as an    */
                                                            /*        original content specifier for sources of a new */
                                                            /*        bound object.  These should appear in an        */
                                                            /*        install dir only when ADDing new bound object.  */

     if Seg.operation ^= "ADD" then do;                     /*     See if source archive exists in library. If so,    */
                                                            /*     it is a derived seg from prior build attempt.      */
          call ssu_$print_message (C.sciP, mbuild_et_$derived_segment, " ^a:  ^a", Seg.type, Seg.name);
          goto SKIP_scan_Seg;                               /*     Skip it.                                           */
          end;

     call Tlist_add_to_tail (addr(bld.source_arch_Tb), addr(Seg), addr(Seg.pdm_Td));
                                                            /*  - Add it to the source_archive_Td per-paradigm list.  */

                                                            /*  - Create a BOUNDOBJ (relationship symbol) structure,  */
                                                            /*    tied to the Seg(source_arch).                       */
     revised_name = before(Seg.name,".");                   /*     - Convert source_arch name to name of bound object */
     revised_library = before(Seg.library,".");             /*     - ADDing new bound obj, so library is UNKNOWN.     */
     BOUNDOBJp = mbuild_data_$get_BOUNDOBJ (addr(bld), revised_name, revised_library, Seg.operation, null());
                                                            /*    Note: get_BOUNDOBJ will return BOUNDOBJ structure   */
                                                            /*          created by earlier Seg(bindfile) paradigm.    */
     Seg.BOUNDOBJp = BOUNDOBJp;
     BOUNDOBJ.sourceArchsN = BOUNDOBJ.sourceArchsN + 1;     /* Count this Seg(source_arch) as one of those tied to    */
                                                            /*  the BOUNDOBJ structure.                               */

     call Tlist_add_to_tail (addr(BOUNDOBJ.sourceArchs_Tb), SegP, addr(Seg.archs_Td));
                                                            /* Add Seg(source_arch) to BOUNDOBJ.sourceArchs_Tb list   */
                                                            
     call add_source_arch_components(addr(Seg));		/* For each archive component in Seg(source_arch):        */
     end az_source_arch;                                    /*  - Add a Seg(source) tied to a COMPILE structure.      */


az_bindfile:
     proc ();

     call Tlist_add_to_tail (addr(bld.bindfile_Tb), addr(Seg), addr(Seg.pdm_Td));
                                                            /*  - Add it to the bindfile_Td per-paradigm list.        */

                                                            /*  - Create a BOUNDOBJ (relationship symbol) structure,  */
                                                            /*    tied to the Seg(bindfile).                          */
     revised_name = before(Seg.name,".bind");               /*     - Convert bindfile name to name of its bound obj   */
     revised_library = before(Seg.library,".");             /*     - bound object library excludes any lib.directory  */
                                                            /*       component from the library name.                 */
     BOUNDOBJp = mbuild_data_$get_BOUNDOBJ (addr(bld), revised_name, revised_library, Seg.operation, addr(Seg));
     Seg.BOUNDOBJp = BOUNDOBJp;

     if BOUNDOBJ.operation = "REPLACE" then		/*  - Bound object files are never REPLACEd.  When some   */
	BOUNDOBJ.operation = "UPDATE";		/*    component changes, they are UPDATEd.	        */
						/*     - The REPLACE operation not defined for bound_obj_ */

     end az_bindfile;


az_relationship:                                            /* Seg(Bound_obj).operation   = "DELETE" => BOUNDOBJ      */
     proc ();                                               /* Seg(Unbound_obj).operation = "DELETE" => UNBOUNDOBJ    */

     if       Seg.type = "Bound_obj"  then
          BOUNDOBJp = mbuild_data_$get_BOUNDOBJ (addr(bld), Seg.name, Seg.library, Seg.operation, null() );
     else if  Seg.type = "Unbound_obj"  then
          UNBOUNDOBJp = mbuild_data_$get_UNBOUNDOBJ (addr(bld), Seg.name, Seg.library, Seg.operation, null() );

     end az_relationship;

%page;
          /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
          /* Support Subroutines                                                                            */
          /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

add_COMPILE_to_Seg:
     proc (ASegP);

  dcl  ASegP ptr;
  dcl 1 ASeg aligned like Seg based(ASegP);

  dcl 1 BSeg aligned like Seg based(BSegP),
       BSegP ptr;

  dcl 1 COMP aligned like COMPILE based (COMPp),
       COMPp ptr;

     call Tlist_add_to_tail (addr(bld.source_Tb), addr(ASeg), addr(ASeg.pdm_Td));

     COMPp = mbuild_data_$get_COMPILE (addr(bld), ASeg.name, ASeg.library, addr(ASeg));
     ASeg.COMPILEp = COMPp;

     call mbuild_compile_$analyze_compilation (addr(bld), COMPp);
						/* See if prior compile request left derived Segs in      */
						/*  install dir.  If so, connect them to COMPp.	        */
     end add_COMPILE_to_Seg;

						/* For each archive component in Seg(source_arch):        */
add_source_arch_components:				/*  - Add a Seg(source) tied to a COMPILE structure.      */
     proc (ASarchP);                                        /* This is called only when ADDing a bound object.        */

  dcl  ASarchP ptr;                                           
  dcl 1 ASarch aligned like Seg based(ASarchP);		/* Seg(source_archive)                                    */

  dcl  comps (200) char(32) var;                            /* Handle up to 200 components.                           */
  dcl (compI, compsN) fixed bin;
  dcl  code fixed bin(35);

  dcl 1 src aligned like Seg based(srcP),
       srcP ptr;

     call mbuild_library_$archive_table (bld.directory, ASarch.name, "", comps, compsN, code);
     if code ^= 0 then do;
          call ssu_$print_message (C.sciP, code, "Getting components of Seg(^a): ^a", ASarch.type, ASarch.name);
          return;
          end;

     do compI = 1 to compsN;
          srcP = mbuild_data_$get_Seg (addr(bld), unknown_type, comps(compI), ASarch.library, "ADD", ASarch.name);
						/*    Let $get_Seg fill in the Seg(type) value.	        */

          call Tlist_add_to_tail (addr(bld.source_Tb), addr(src), addr(src.pdm_Td));
          call Tlist_add_to_tail (addr(ASarch.inArch_Tb), addr(src), addr(src.inArch_Td));

          segtP = src.seg_typeP;                            /* Address Seg(source) build_type info.		        */
          call add_COMPILE_to_Seg (addr(src));
          end;

     end add_source_arch_components;
%page;
/* ------------------------------------------------------------
 * Process clean -control_arg arguments.
 * ------------------------------------------------------------ */

controlArgs:
     proc (c);

  dcl 1 c aligned like C;				/*  control arg specification data                   (in) */

     do while (args_remain());
	call ssu_$arg_ptr (c.sciP, argI+1, argP, argL);	/* Conditionally read next arg to command/af/request      */
					
	if isControlArg(arg) then do;

	     if       arg = "-cl"     | arg = "-clean"          then c.cleanS = T;
	     else if  arg = "-ncl"    | arg = "-no_clean"       then c.cleanS = F;

	     else if  arg = "-pg"     | arg = "-progress"       then c.progressS = T;
	     else if  arg = "-npg"    | arg = "-no_progress"    then c.progressS = F;

               else call ssu_$print_message (c.sciP, error_table_$badopt, 
		"Ignoring unsupported control arg: ^a", arg);
	     end;
	
	else do;					/* If arg is a -control_arg operand		        */
	     call ssu_$print_message (c.sciP, error_table_$badarg, 
		"Ignoring operand: ^a", arg);
	     end;

	argI = argI + 1;				/* Record that we processed the arg just examined above.  */
	end;

     end controlArgs;

%page;
/* ======================================================================

   ENTRYPOINT:  populated_threads

   Returns true if  mbuild_analyze_ placed some Segs on the per-paradigm
   threaded lists, and appropriate structures on the per-structure lists.
   
   Returns false if ALL such lists are empty.
   ====================================================================== */

populated_threads:
     entry (Abuild_dataP, AscannedS) returns (bit(1) aligned);

  dcl  AscannedS bit(1) unal;                               /* Progress of latest scan/read request.                  */

  dcl 1 list_Tb aligned like Tlist_base based(list_TbP),
       list_TbP ptr;
  dcl  threads_populatedS bit(1) aligned;

     if  ^AscannedS  then return (F);
     if  ^Tlist_is_empty (addr(bld.COMPILE_Tb))         then return (T);
     if  ^Tlist_is_empty (addr(bld.BOUNDOBJ_Tb))        then return (T);
/*   if  ^Tlist_is_empty (addr(bld.UNBOUNDOBJ_Tb))      then return (T);   */
/*           Don't want to test UNBOUNDOBJ list.  COMPILE list is not      */
/*           populated at this point.  So any UNBOUNDOBJ is from a read    */
/*           request, with name_add/deleteP pointers set.                  */
     if  ^Tlist_is_empty (addr(bld.target_only_Tb))     then return (T);
     if  ^Tlist_is_empty (addr(bld.object_x_only_Tb))   then return (T);
     if  ^Tlist_is_empty (addr(bld.mbuild_support_Tb))  then return (T);
     return (F);

%page;
%include ssu_request_dcls_;
%page;
%include mbuild_request_parms_;
%page;
%include mbuild_Tlist_;
%page;
%include mbuild_data_;
%page;
%include mbuild_info_;

     end mbuild_analyze_;
