
/****^  HISTORY COMMENTS:
  1) change(2019-08-17,GDixon), approve(2019-10-23,MCR10069),
     audit(2020-01-20,Swenson), install(2020-01-20,MR12.6g-0035):
     mbuild subroutine which verifies that subroutines of mbuild support the
     same (latest) version of the mbuild_data_.incl.pl1 structures.
  2) change(2020-02-02,GDixon), approve(2021-02-22,MCR10086),
     audit(2021-03-17,Swenson), install(2021-03-17,MR12.6g-0051):
      A) Add parameter check for the new mbuild_xref_.pl1 module.
  3) change(2020-02-02,GDixon), approve(2021-02-22,MCR10086),
     audit(2021-03-31,Swenson), install(2021-03-31,MR12.6g-0054):
      A) Add parameter check for the new mbuild_info_checks_.pl1 module.
                                                   END HISTORY COMMENTS */

mbuild_request_parms_:
     proc(Abuild_dataP) returns(bit(1) aligned);

  dcl  PROC char(22) int static options(constant) init("mbuild_request_parms_");

  dcl  my_ret bit(1) aligned init(T);

						/* mbuild subroutines referencing mbuild_data_.incl.pl1   */
  dcl  mbuild_Tlist_      entry (ptr, ptr) returns(bit(1) aligned);
  dcl  mbuild_analyze_    entry (ptr, ptr) returns(bit(1) aligned);
  dcl  mbuild_archive_    entry (ptr, ptr) returns(bit(1) aligned);
  dcl  mbuild_clean_      entry (ptr, ptr) returns(bit(1) aligned);
  dcl  mbuild_compare_    entry (ptr, ptr) returns(bit(1) aligned);
  dcl  mbuild_compile_    entry (ptr, ptr) returns(bit(1) aligned);
  dcl  mbuild_data_       entry (ptr, ptr) returns(bit(1) aligned);
  dcl  mbuild_display_    entry (ptr, ptr) returns(bit(1) aligned);
  dcl  mbuild_history_    entry (ptr, ptr) returns(bit(1) aligned);
  dcl  mbuild_info_checks_ entry (ptr, ptr) returns(bit(1) aligned);
  dcl  mbuild_install_    entry (ptr, ptr) returns(bit(1) aligned);
  dcl  mbuild_lib_names_  entry (ptr, ptr) returns(bit(1) aligned);
  dcl  mbuild_library_    entry (ptr, ptr) returns(bit(1) aligned);
  dcl  mbuild_progress_   entry (ptr, ptr) returns(bit(1) aligned);
  dcl  mbuild_print_      entry (ptr, ptr) returns(bit(1) aligned);
  dcl  mbuild_scan_       entry (ptr, ptr) returns(bit(1) aligned);
  dcl  mbuild_script_     entry (ptr, ptr) returns(bit(1) aligned);
  dcl  mbuild_script_parse_$check_parms entry (ptr) returns(bit(1) aligned);
  dcl  mbuild_set_	      entry (ptr, ptr) returns(bit(1) aligned);
  dcl  mbuild_xref_       entry (ptr, ptr) returns(bit(1) aligned);

     my_ret = check_parms (mbuild_data_version_3);	/* This subroutine (mbuild_request_parms_) has been       */
						/*  upgraded to support the current version of build_data */
						/*  in mbuild_data_.incl.pl1, and all of its other        */
						/*  data structures.			        */

						/* Call each of the other subroutines, asking if they     */
						/*  have been upgraded to support the current version of  */
     if ^mbuild_Tlist_     (bld.sciP, Abuild_dataP) then my_ret = F;
     if ^mbuild_analyze_   (bld.sciP, Abuild_dataP) then my_ret = F;
     if ^mbuild_archive_   (bld.sciP, Abuild_dataP) then my_ret = F;
     if ^mbuild_clean_     (bld.sciP, Abuild_dataP) then my_ret = F;
     if ^mbuild_compare_   (bld.sciP, Abuild_dataP) then my_ret = F;
     if ^mbuild_compile_   (bld.sciP, Abuild_dataP) then my_ret = F;
     if ^mbuild_data_      (bld.sciP, Abuild_dataP) then my_ret = F;
     if ^mbuild_display_   (bld.sciP, Abuild_dataP) then my_ret = F;
     if ^mbuild_history_   (bld.sciP, Abuild_dataP) then my_ret = F;
     if ^mbuild_info_checks_ (bld.sciP, Abuild_dataP) then my_ret = F;
     if ^mbuild_install_   (bld.sciP, Abuild_dataP) then my_ret = F;
     if ^mbuild_lib_names_ (bld.sciP, Abuild_dataP) then my_ret = F;
     if ^mbuild_library_   (bld.sciP, Abuild_dataP) then my_ret = F;
     if ^mbuild_progress_  (bld.sciP, Abuild_dataP) then my_ret = F;
     if ^mbuild_print_     (bld.sciP, Abuild_dataP) then my_ret = F;
     if ^mbuild_scan_      (bld.sciP, Abuild_dataP) then my_ret = F;
     if ^mbuild_script_    (bld.sciP, Abuild_dataP) then my_ret = F;
     if ^mbuild_script_parse_$check_parms (Abuild_dataP) then my_ret = F;
     if ^mbuild_set_       (bld.sciP, Abuild_dataP) then my_ret = F;
     if ^mbuild_xref_      (bld.sciP, Abuild_dataP) then my_ret = F;
     return (my_ret);

%page;
%include ssu_subroutine_dcls_;
%page;
%include mbuild_request_parms_;			/* Contains the check_parms subroutine.		        */
%page;
%include mbuild_Tlist_dcls_;				/* Included because mbuild_data_ dcls need these dcls.    */
%page;
%include mbuild_data_;				/* Allow check_parms to reference bld_data.version value  */

     end mbuild_request_parms_;
