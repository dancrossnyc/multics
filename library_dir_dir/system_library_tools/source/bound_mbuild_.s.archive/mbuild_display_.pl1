
/****^  HISTORY COMMENTS:
  1) change(2019-08-17,GDixon), approve(2019-10-24,MCR10069),
     audit(2020-01-20,Swenson), install(2020-01-20,MR12.6g-0035):
     mbuild subroutines to display major structures in mbuild_data_.incl.pl1.
                                                   END HISTORY COMMENTS */

mbuild_display_:
     proc (AsciP, Abuild_dataP) returns (bit(1) aligned);

  dcl  PROC char(15) int static options(constant) init("mbuild_display_");
     
     return (check_parms (mbuild_data_version_3));
/* ------------------------------------------------------------ */

  dcl (ioa_, ioa_$nnl) entry() options(variable);

  dcl (null, string) builtin;

%page;
/* ======================================================================
 *
 * ENTRYPOINT:  mbuild_display_$Seg
 * ENTRYPOINT:  mbuild_display_$BOUNDOBJ
 * ENTRYPOINT:  mbuild_display_$COMPILE
 * ENTRYPOINT:  mbuild_display_$UNBOUNDOBJ
 *
 * Subroutine to display major structures of mbuild_data_ in standard format.
 *
 * ====================================================================== */

Seg: entry (AsciP, SegP, Aswitches, Astarting_column );
     
  dcl  Aswitches bit(*) aligned;                            /* Switches identifying which fields to display.          */
  dcl  Astarting_column fixed bin;                          /* Column in which to start display (1 <= value < 10)     */
     
  dcl 1 segS aligned like display_switches_Seg;
  dcl  Seg_header fixed bin(3);

     string(segS) = Aswitches;

     if segS.structureS & segS.typeS then
          Seg_header = 1;
     else if segS.structureS then
          Seg_header = 2;
     else if segS.typeS then
          Seg_header = 3;
     else Seg_header = 4;

     call ioa_ (
	"^vt^[Seg(^a):^;Seg:^s^;^a:^;^s^]^28t^a^" || 
	"[^61t^[ IN: ^a^;^s^]^[^[  ^a^;^s^]^[^81t compiler: ^a^[ ^a^;^s^]^;^3s^]^;^6s^]^;^9s^];",
          Astarting_column, 
          Seg_header,
           Seg.type, 
          Seg.name, 
	(segS.libraryS & Seg.library ^= "") | (segS.headerS & (Seg.operation ^= "" | Seg.compiler ^= "")),
           (segS.libraryS & Seg.library ^= ""),
	  Seg.library,
	 (segS.headerS & (Seg.operation ^= "" | Seg.compiler ^= "")),
            Seg.operation ^= "", 
	   Seg.operation, 
            Seg.compiler ^= "", 
	   Seg.compiler, 
 	   Seg.compile_options ^= "",
	    Seg.compile_options);

     if (segS.archiveS & Seg.archive_name ^= "") | 
        (segS.pointersS & (Seg.BOUNDOBJp   ^= null()  |  Seg.COMPILEp ^= null() | 
		       Seg.UNBOUNDOBJp ^= null()  |  Seg.sArchP   ^= null()  ) )
     then do;
          call ioa_ ("^41t/^^ ^[ archive: ^a ^;^s^]^[^[ BOUNDOBJ: ^a ^;^s^]^[ COMPILE ^]" || 
	           "^[ UNBOUNDOBJ ^]^[ sArch: ^a ^;^s^]^;^4s^] ^^/",
               segS.archiveS & Seg.archive_name ^= "",
                Seg.archive_name,
               segS.pointersS,
                Seg.BOUNDOBJp ^= null(),
                 Seg.BOUNDOBJp -> BOUNDOBJ.name,
                Seg.COMPILEp ^= null(),
                Seg.UNBOUNDOBJp ^= null(),
	      Seg.sArchP ^= null(),
	       Seg.sArchP -> Seg.name );
          end;


  dcl  inArch_Tb_count  fixed bin;
     
     inArch_Tb_count = Tlist_count(addr(Seg.inArch_Tb));
     if (segS.Tb_S & inArch_Tb_count > 0) | 
        (segS.Td_S & (Tlist_member(addr(Seg.INTERMEDIATE_Td)) |
                      Tlist_member(addr(Seg.archs_Td)) | 
		  Tlist_member(addr(Seg.inArch_Td)) ) )
     then do;
          call ioa_ (
               "^41t/^^ ^[ inArch_Tb: ^d ^;^s^]^[^[ INTERMEDIATE_Td ^]^[ archs_Td ^]^[ inArch_Td ^]^;^5s^] ^^/",
               segS.Tb_S & inArch_Tb_count > 0,
                inArch_Tb_count,
               segS.Td_S,
                Tlist_member(addr(Seg.INTERMEDIATE_Td)),
                Tlist_member(addr(Seg.archs_Td)),
                Tlist_member(addr(Seg.inArch_Td)) );
          end;

     if segS.add_del_namesS then do;
          if Seg.name_addP ^= null() then do;
	     if  dimension(Seg.name_addP->nm_data.names,1) = 1  then
		call ioa_ ("^28t  add_name:  ^a;", Seg.name_addP->nm_data.names(*));
	     else call ioa_ ("^28t  add_name:^(^/^32t^a^);", Seg.name_addP->nm_data.names(*));
	     end;
          if Seg.name_deleteP ^= null() then do;
	     if  dimension(Seg.name_deleteP->nm_data.names,1) = 1  then
		call ioa_ ("^28t  delete_name:  ^a;", Seg.name_deleteP->nm_data.names(*));
	     else call ioa_ ("^28t  delete_name:^(^/^32t^a^);", Seg.name_deleteP->nm_data.names(*));
	     end;
          end;
     return;

%page;
BOUNDOBJ: 
     entry (AsciP, BOUNDOBJp, Aswitches, Astarting_column );
     
/*dcl  Aswitches bit(*) aligned;                            /* Switches identifying which fields to display.          */
/*dcl  Astarting_column fixed bin;                          /* Column in which to start display (1 <= value < 10)     */

     string(segS) = Aswitches;

     if segS.structureS & segS.typeS then
          Seg_header = 1;
     else if segS.structureS then
          Seg_header = 2;
     else if segS.typeS then
          Seg_header = 3;
     else Seg_header = 4;

     call ioa_ ("^vt^[BOUNDOBJ(^a):^;BOUNDOBJ:^s^;^a:^;^s^]^28t^a^[^61t^[ IN: ^a^;^s^]^[  ^a^;^s^]^;^4s^];",
          Astarting_column, 
          Seg_header,
           BOUNDOBJ.type, 
          BOUNDOBJ.name, 
	(segS.libraryS & BOUNDOBJ.library ^= "") | (segS.headerS & BOUNDOBJ.operation ^= ""),
	 (segS.libraryS & BOUNDOBJ.library ^= ""),
            BOUNDOBJ.library,
	 (segS.headerS & BOUNDOBJ.operation ^= ""),
            BOUNDOBJ.operation);

     if (segS.archiveS & BOUNDOBJ.sourceArchsN > 0 ) |
        (segS.pointersS & (BOUNDOBJ.bindfileP ^= null() | BOUNDOBJ.Bound_objP ^= null() ))
     then do;
          call ioa_ ("^41t/^^ ^[ source_archives: ^d ^;^s^]^[^[ bindfile: ^a ^;^s^]^[ Bound_obj ^]^;^3s^] ^^/",
	     segS.archiveS,
	      BOUNDOBJ.sourceArchsN,
	     (segS.pointersS & (BOUNDOBJ.bindfileP ^= null() | BOUNDOBJ.Bound_objP ^= null() )),
                BOUNDOBJ.bindfileP ^= null(),
                 BOUNDOBJ.bindfileP -> Seg.name,
                BOUNDOBJ.Bound_objP ^= null() );
          end;


  dcl (sourceArchs_Tb_count, objectArchs_Tb_count)  fixed bin;
     
     sourceArchs_Tb_count = Tlist_count (addr(BOUNDOBJ.sourceArchs_Tb));
     objectArchs_Tb_count = Tlist_count (addr(BOUNDOBJ.objectArchs_Tb));

     if  segS.Tb_S & (sourceArchs_Tb_count > 0 | objectArchs_Tb_count > 0)
     then do;
          call ioa_ (
               "^41t/^^ ^[ sourceArchs_Tb: ^d ^;^s^]^[ objectArchs_Tb: ^d ^;^s^] ^^/",
               sourceArchs_Tb_count > 0,
                sourceArchs_Tb_count,
               objectArchs_Tb_count > 0,
                objectArchs_Tb_count );
          end;

     return;

%page;
COMPILE: 
     entry (AsciP, COMPILEp, Aswitches, Astarting_column );
     
/*dcl  Aswitches bit(*) aligned;                            /* Switches identifying which fields to display.          */
/*dcl  Astarting_column fixed bin;                          /* Column in which to start display (1 <= value < 10)     */

     string(segS) = Aswitches;

     if segS.structureS & segS.typeS then
          Seg_header = 1;
     else if segS.structureS then
          Seg_header = 2;
     else if segS.typeS then
          Seg_header = 3;
     else Seg_header = 4;

     call ioa_ ("^vt^[COMPILE(^a):^;COMPILE:^s^;^a:^;^s^]^28t^a^[^61t^[ IN: ^a^;^s^]^[  ^a^;^s^]^;^4s^];",
          Astarting_column, 
          Seg_header,
           COMPILE.type, 
          COMPILE.name, 
	(segS.libraryS & COMPILE.library ^= "") | (segS.headerS & COMPILE.operation ^= ""),
	 (segS.libraryS & COMPILE.library ^= ""),
            COMPILE.library,
	 (segS.headerS & COMPILE.operation ^= ""),
            COMPILE.operation);

     if  segS.pointersS then do;
	if (COMPILE.sourceP ^= null() | COMPILE.objectP ^= null() ) then 
	     call ioa_ ("^41t/^^ ^[ source: ^20a ^;^s^]^[ object: ^a ^;^s^] ^^/",
		COMPILE.sourceP ^= null(),
		 COMPILE.sourceP -> Seg.name,
                    COMPILE.objectP ^= null(),
		 COMPILE.objectP -> Seg.name);
	if (COMPILE.listingP ^= null() | COMPILE.INTERMEDIATEp ^= null() ) then 
	     call ioa_ ("^41t/^^ ^[ listing: ^25a ^;^s^]^[ INTERMEDIATE: ^a ^;^s^] ^^/",
		COMPILE.listingP ^= null(),
		 COMPILE.listingP -> Seg.name,
                    COMPILE.INTERMEDIATEp ^= null(),
		 COMPILE.INTERMEDIATEp -> Seg.name);
          end;

     return;

%page;
UNBOUNDOBJ: 
     entry (AsciP, UNBOUNDOBJp, Aswitches, Astarting_column );
     
/*dcl  Aswitches bit(*) aligned;                            /* Switches identifying which fields to display.          */
/*dcl  Astarting_column fixed bin;                          /* Column in which to start display (1 <= value < 10)     */

     string(segS) = Aswitches;

     if segS.structureS & segS.typeS then
          Seg_header = 1;
     else if segS.structureS then
          Seg_header = 2;
     else if segS.typeS then
          Seg_header = 3;
     else Seg_header = 4;

     call ioa_ ("^vt^[Seg(^a):^;UNBOUNDOBJ:^s^;^a:^;^s^]^28t^a^[^61t^[ IN: ^a^;^s^]^[  ^a^;^s^]^;^4s^];",
          Astarting_column, 
          Seg_header,
           UNBOUNDOBJ.type, 
          UNBOUNDOBJ.name, 
	(segS.libraryS & UNBOUNDOBJ.library ^= "") | (segS.headerS & UNBOUNDOBJ.operation ^= ""),
	 (segS.libraryS & UNBOUNDOBJ.library ^= ""),
            UNBOUNDOBJ.library,
	 (segS.headerS & UNBOUNDOBJ.operation ^= ""),
            UNBOUNDOBJ.operation);

     if  segS.pointersS & UNBOUNDOBJ.sourceP ^= null()
     then do;
          call ioa_ ("^41t/^^ ^[ source: ^a ^;^s^] ^^/",
	     UNBOUNDOBJ.sourceP ^= null(),
                UNBOUNDOBJ.sourceP -> Seg.name);
          end;

     if segS.add_del_namesS then do;
          if UNBOUNDOBJ.name_addP ^= null() then do;
	     if  dimension(UNBOUNDOBJ.name_addP->nm_data.names,1) = 1  then
		call ioa_ ("^28t  add_name:  ^a;", UNBOUNDOBJ.name_addP->nm_data.names(*));
	     else call ioa_ ("^28t  add_name:^(^/^32t^a^);", UNBOUNDOBJ.name_addP->nm_data.names(*));
	     end;
          if UNBOUNDOBJ.name_deleteP ^= null() then do;
	     if  dimension(UNBOUNDOBJ.name_deleteP->nm_data.names,1) = 1  then
		call ioa_ ("^28t  delete_name:  ^a;", UNBOUNDOBJ.name_deleteP->nm_data.names(*));
	     else call ioa_ ("^28t  delete_name:^(^/^32t^a^);", UNBOUNDOBJ.name_deleteP->nm_data.names(*));
	     end;
          end;
     return;
%page;
/* ======================================================================
 *
 * ENTRYPOINT:  mbuild_display_$paradigm
 * ENTRYPOINT:  mbuild_display_$seg_type
 *
 * Subroutine to display major structures of mbuild_info_ in standard format.
 *
 * ====================================================================== */

paradigm:                                                   /* Output an mbuild_info_ bld_paradigm structure.         */
     entry (ApdmP, Aswitches);
     
  dcl  ApdmP ptr;

     pdmP = ApdmP;                                          /* Address structure to be displayed.                     */

  dcl 1 pS aligned like bld_paradigm_switches;              /* Convert incoming switches to a structure.              */

     string(pS) = Aswitches;

     if pS.nameS & ^(pS.purposeS | pS.examplesS | pS.stepsS) then
          call ioa_ ("  ^a", pdm.name);                     /* If only paradigm name was requested, use short format. */

     else do;                                               /* Otherwise, output requested element with labels.       */
          call ioa_("^/----------");
          if pS.nameS     then call ioa_ ("name:     ^a", pdm.name);
          if pS.purposeS  then call ioa_ ("purpose:  ^a", pdm.purpose);
          if pS.examplesS then call ioa_ ("example:  ^a", pdm.examples);
          if pS.stepsS    then call ioa_ ("steps:^a",     pdm.steps);
                                                            /* pdm.steps is multi-line string beginning with NL       */
          end;
     return;

%page;
seg_type:                                                   /* Output an mbuild_info_ seg_type structure.             */
     entry (Aseg_name, AsegtP, Aswitches);

  dcl  Aseg_name char(*) var;                               /* Name of the segment to which seg_type applies.         */
  dcl  AsegtP ptr;                                          /* Pointer to seg_type_info substructure to display.      */
/*dcl  Aswitches bit(*) aligned;                            /* Switches identifying which fields to display.          */

     segtP = AsegtP;                                        /* Address structure being displayed.                     */

  dcl 1 sS aligned like seg_type_switches;                  /* In sS, only sS.source_starnameS is selected.           */
     sS = F;
     sS.source_starnameS = T;

     if string(sS) = Aswitches then                         /* If caller asked only for starnames, output in shorter  */
          call ioa_ ("  ^a", segt.source_starname);         /*  format: just the starname                             */

     else do;                                               /* Otherwise, output the requested elements with labels.  */
          string(sS) = Aswitches;
          call ioa_("^/----------^[  ^a^;^s^]", Aseg_name ^= "", Aseg_name);
          if sS.source_starnameS         then call ioa_ ("source_starname:        ^-^a", segt.source_starname);
          if sS.descriptionS             then call ioa_ ("description:            ^-^a", segt.description);
          if sS.mbuild_typeS             then call ioa_ ("mbuild_type:            ^-^a", segt.mbuild_type);
          if segt.default_library ^= "" &
             sS.default_libraryS         then call ioa_ ("default_library:        ^-^a", segt.default_library);

          if sS.build_paradigmS | sS.build_stepsS then do;

  dcl  mbuild_info_find_$paradigm_by_index entry (fixed bin) returns(ptr);

               pdmP = mbuild_info_find_$paradigm_by_index(segt.build_paradigm);
               if pdmP = null() then
                    call ioa_ ("build_paradigm:         ^-(unknown)");
               else call ioa_ ("build_paradigm:         ^-^a^[^a^;^s^]", 
                    pdm.name, sS.build_stepsS, pdm.steps);
               end;

          if segt.compiler ^= "" then do;
               if sS.compilerS                     then call ioa_ ("compiler:            ^-^a", segt.compiler);
               if sS.default_compile_optionsS then call ioa_ ("default_compile_options:  ^-^a", segt.default_compile_options);
               if segt.intermediate_suffix ^= "" &
                  sS.intermediate_suffixS          then call ioa_ ("intermediate_suffix: ^-^a", segt.intermediate_suffix);
               if sS.object_suffixS                then call ioa_ ("object_suffix:       ^-^a", segt.object_suffix);
               end;
          end;
     return;

%page;
%include mbuild_display_dcls_;
%page;
%include ssu_subroutine_dcls_;
%page;
%include mbuild_request_parms_;
%page;
%include mbuild_data_;
%page;
%include mbuild_info_;
%page;
%include mbuild_Tlist_;

     end mbuild_display_;
