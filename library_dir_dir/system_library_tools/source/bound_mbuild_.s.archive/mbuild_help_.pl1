
/****^  HISTORY COMMENTS:
  1) change(2019-08-17,GDixon), approve(2019-10-24,MCR10069),
     audit(2020-01-20,Swenson), install(2020-01-20,MR12.6g-0035):
     mbuild request:  help, h
  2) change(2020-07-06,GDixon), approve(2021-02-22,MCR10086),
     audit(2021-03-17,Swenson), install(2021-03-17,MR12.6g-0051):
      A) Tell help_ to aggregate all paragraphs that will fit on terminal
         page.
      B) Change default mbuild help file to: summary.topic
      C) Allow searches for standard ssu_ requests:
           . (self_identify)
           ? (summarize_requests)
      D) Change order of searching directories:
          a) mbuild.info
             (multi-block info for most mbuild requests).
          b) >doc>subsystem>ssu.TOPIC.info
             (standard ssu_ requests in mbuild)
          c) info search paths
             (Multics cmds used as requests in mbuild)
      E) Limit starname topics to searching only the mbuild.info segment
         (see change D.a above).
      F) Call check_star_name_ to validate topic.
                                                   END HISTORY COMMENTS */

mbuild_help_:
     proc(AsciP);

  dcl  PROC char(12) int static options(constant) init("mbuild_help_");

/* -------------------- */
     
  dcl  check_star_name_ entry (char(*), bit(36), fixed bin(2), fixed bin(35));
  dcl  cu_$decode_entry_value entry (entry, ptr, ptr);
  dcl  get_page_length_$switch entry (ptr, fixed bin(35)) returns(fixed bin);
  dcl  hcs_$fs_get_path_name entry (ptr, char(*), fixed bin, char(*), fixed bin(35));

  dcl (error_table_$bigarg,
       error_table_$badopt
        ) fixed bin(35) ext static;

  dcl (addr, length, maxlength, null) builtin;

  dcl  cleanup condition;

%page;
/* ======================================================================
   REQUEST: help, h

   Function: Display information about a given mbuild request, or build topic.

   This is a simplistic version of the Multics help command, tailored for
   the ssu_ environment in which requests may originate from different sources:
     - requests defined by the current subsystem     (mbuild)
     - requests defined by the ssu_ subsystem itself (ssu_ built-ins)
     - requests that are Multics commands

   Info segments for each type of request are stored in different locations
   and in differing formats.

     - mbuild-specific requests are all defined as :Info: partitions within the 
       mbuild command info segment: mbuild.info

   This help request uses the Multics help_ subroutine to actually search
   for the info segment, and display it.  It sets the info search paths
    -referencing_dir
   search rule to be the execution dir containing the mbuild_help_$help_request
   entrypoint.
/* ====================================================================== */

help_request:
     entry (AsciP, Abuild_dataP);

  dcl  Abuild_dataP ptr;

  dcl 1 C aligned,
      2 sciP ptr,
      2 operands,
        3 topic char(425) var,
        3 ca_operand char(32) var,
      2 S,
        3 operationS aligned,
	4 (helpS
             ) bit(1) unaligned,
        3 displayS aligned,
	4 (allS,
	   briefS,
	   caS,
	   headerS
             ) bit(1) unaligned;

     C.sciP = AsciP;
     C.operands = "";
     C.S = F;

     C.topic = "summary.topic"; 
     C.helpS = T;

     call arg_setup (AsciP);				/* Select help topic, or a format via -Control_args       */
     if args_remain() then
	call controlArgs(C);

     if C.helpS then call help(C);
     return;
%page;
/* ------------------------------------------------------------
   Body of help request.
   ------------------------------------------------------------ */

help:
     proc (c);

  dcl 1 c aligned like C;

     Phelp_args = null;

     on cleanup
	call help_$term (ssu_$get_subsystem_name(c.sciP), Phelp_args, (0));

  dcl (entryP, envP) ptr;				/* Get directory for info search paths: -referencing_dir  */
     call cu_$decode_entry_value (help_request, entryP, envP);

  dcl  referencing_dir char(168);
     call hcs_$fs_get_path_name (entryP, referencing_dir, 0, "", code);


     call help_$init (ssu_$get_subsystem_name(c.sciP), "info", referencing_dir, Vhelp_args_3, Phelp_args, code);
     help_args.Sctl.inhibit_errors = T;			/* Initialize the help_ subroutine.		        */

     help_args.min_Lpgh, help_args.max_Lpgh = get_page_length_$switch( null(), code) - 3;
						/* With fast terminals, help should ask fewer questions.  */
     help_args.Npaths = 1;
     if c.caS & c.ca_operand ^= "" then
	help_args.Ncas = 1;
     else help_args.Ncas = 0;
     help_args.Nscns = 0;				/* 0-extent arrays are OK in this context.	        */
     help_args.Nsrhs = 0;

     if c.caS & c.ca_operand ^= "" then do;
	help_args.Sctl.ca = T;
	help_args.ca(1) = c.ca_operand;
	end;
     help_args.Sctl.bf = c.briefS;
     help_args.Sctl.all = c.allS;
     help_args.Sctl.he_pn = c.headerS;

  dcl  topic_is_starname bit(1) aligned;
  dcl  star_type fixed bin(2);
     if c.topic = "." | c.topic = "?" then do;		/* Suppress starname check on ? and bad_star on .	        */
	star_type = STAR_TYPE_USE_PL1_COMPARE;
	code = 0;
	end;
     else call check_star_name_ ((c.topic), CHECK_STAR_ENTRY_DEFAULT, star_type, code);
     if code ^= 0 then do;
	call ssu_$print_message (c.sciP, code, "Invalid help topic: ""^a"" ", c.topic);
	goto EXIT_help;
	end;
     topic_is_starname = star_type > STAR_TYPE_USE_PL1_COMPARE;

     if c.topic = "bugs" | c.topic = "changes" then
	help_args.path (1).value = ssu_$get_subsystem_name(c.sciP) || "." || c.topic;
     else do;
	help_args.path (1).value = ssu_$get_subsystem_name(c.sciP);
	help_args.path (1).S.info_name_not_starname = ^topic_is_starname;
	help_args.path (1).info_name = c.topic;
	end;
     call help_ (ssu_$get_subsystem_name(c.sciP), Phelp_args, "info", (0), code);

     if code ^= 0 then do;				/* If info not found in mbuild.info, search for topic     */
						/*  as documenting one of supplied ssu requests.	        */
	if topic_is_starname then
	     goto NOT_FOUND_help;
	help_args.path (1).value = ">doc>subsystem>ssu." || c.topic || ".info";
	help_args.path (1).S = F;
	help_args.path (1).S.pn_ctl_arg = T;		/*   - absolute pathname given.		        */
	help_args.path (1).info_name = "";
	call help_ (ssu_$get_subsystem_name(c.sciP), Phelp_args, "info", (0), code);

	if code ^= 0 then do;			/* If info not found as an ssu standard request, look for */
						/*  it using the topic's  info seg name.	        */
	     help_args.path (1).value = c.topic;
	     help_args.path (1).S = F;
	     help_args.path (1).info_name = "";
	     if ^topic_is_starname then		/* Suppress starname searches using info search paths.    */
		call help_ (ssu_$get_subsystem_name(c.sciP), Phelp_args, "info", (0), code);

	     if code ^= 0 then do;
NOT_FOUND_help:	call ssu_$print_message (c.sciP, 0, 
		     "There is no info available for ""^a"".", c.topic);
		end;
	     end;
	end;

EXIT_help:
     call help_$term (ssu_$get_subsystem_name(c.sciP), Phelp_args, (0));

     end help;
%page;
/* ------------------------------------------------------------
   Process help -control_arg arguments.
   ------------------------------------------------------------ */

controlArgs:
     proc (c);

  dcl 1 c aligned like C;				/*  control arg specification data                   (in) */

     do while (args_remain());
	call ssu_$arg_ptr (c.sciP, argI+1, argP, argL);	/* Conditionally read next arg to command/af/request      */
					
	if isControlArg(arg) then do;

	     if       arg = "-a"      | arg = "-all"            then c.allS = T;
	     else if  arg = "-bf"     | arg = "-brief"          then c.briefS = T;
	     else if  arg = "-ca"     | arg = "-control_arg"    then do; c.caS = T;
							     c.ca_operand = "";
							     end;
	     else if  arg = "-he"     | arg = "-header"         then c.headerS = T;

               else call ssu_$print_message (c.sciP, error_table_$badopt, 
		"Ignoring unsupported control arg: ^a", arg);
	     end;
	
	else do;					/* If arg is a -control_arg operand		        */
	     if c.caS & c.ca_operand = "" then
		c.ca_operand = arg;

	     else do;
		c.topic = arg;
		if length(arg) > maxlength(c.topic) then
		     call ssu_$print_message (c.sciP, error_table_$bigarg, 
		          "'^a' may be up to ^d characters long.", arg, maxlength(c.topic));
		end;
	     end;

	argI = argI + 1;				/* Record that we processed the arg just examined above.  */
	end;

     end controlArgs;
%page;
%include check_star_name;
%page;
%include ssu_request_dcls_;
%page;
%include help_args_;

     end mbuild_help_;
