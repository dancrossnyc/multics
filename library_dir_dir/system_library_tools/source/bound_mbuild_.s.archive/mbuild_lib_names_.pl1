
/****^  HISTORY COMMENTS:
  1) change(2019-08-17,GDixon), approve(2019-10-26,MCR10069),
     audit(2020-01-12,Swenson), install(2020-01-20,MR12.6g-0035):
     mbuild request:  lib_names, libs
                                                   END HISTORY COMMENTS */

mbuild_lib_names_:
     proc (AsciP, Abuild_dataP) returns (bit(1) aligned);

  dcl  PROC char(17) aligned int static options(constant) init("mbuild_lib_names_");

     return (check_parms (mbuild_data_version_3));
/* ------------------------------------------------------------ */

  dcl						/*	automatic variables			        */
       1 arg_struc_temp		structure like arg_struc,
      (d, i, j, l, n, p, pd, q)	fixed bin,	/* function index; also, do-group index.	        */
       progress			fixed bin;	/* progress of lib_descriptor_ operations.	        */

  dcl						/*	builtin functions & conditions	        */
      (addr, dimension, hbound, lbound, length, max, null, rtrim, unspec)
			       	builtin,
       cleanup			condition;

  dcl						/*	entries called			        */
       com_err_ entry options(variable),
       get_system_free_area_ entry returns(ptr),
       ioa_ entry options(variable),
       lib_args_ entry (1 aligned like LIBRARY, 1 aligned like STARNAME, 1 aligned like STARNAME, 
		    bit(72) aligned, bit(36) aligned, ptr, fixed bin(35)),
       lib_descriptor_$name entry (char(168) var),
       lib_descriptor_$libraries entry (char(168) varying, ptr, bit(72) aligned, ptr, ptr, fixed bin, fixed bin(35)),
       lib_error_list_ entry (char(32) varying, ptr, char(32) varying),
       lib_free_node_$array entry (ptr),
       sort_items_$general entry (ptr, entry),
       ssu_$arg_list_ptr entry (ptr) returns (ptr),
       translator_temp_$allocate entry (ptr, fixed bin) returns(ptr);
     
  dcl  error_table_$badopt fixed bin(35) ext static;

  						/*	static variables			        */
						/* Preferred lib-names for multics_libraries_ descriptor; */
  dcl  libs (29) char(16) var int static options(constant) init(
	"priv", "sss", "tools", "unb", "obs", "hard", "mcs", "am",
	"accounting", "azm", "bce", "dfm", "dfast", "dial_out", "emacs", "xforum", "xmail", "fast", "forum",
	"io_daemon", "kermit", "linus", "operator", "rdm", "r1_initializer", "rmdb", "report_writer", "sdm", "ssu" );
						/*   and preferred dir-names for all descriptors.	        */
  dcl  dirs (7) char(12) var int static options(constant) init(
	"source", "object", "execution", "listings", "include", "i", "info" );


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
%page;
/* ======================================================================
   REQUEST:  lib_names, libs

   Displays a list of library root directories, with their preferred
   -library value (a <lib-name>.<dir-name> value).
   ====================================================================== */

lib_names_request:
     entry (AsciP, Abuild_dataP);
     
  dcl 1 C aligned,
      2 sciP ptr,
      2 S,
        3 operationS aligned,
          4 (directoryS,				/* Display preferred directory names in any/all libraries */
             libraryS,				/* Display preferred library names in current library     */
	   sortedS,				/* Display preferred library names, sorted by length of   */
						/*   library root pathname.  This is to ensure uniqueness */
						/*   of library.directory names, when matching root paths */
						/*   where one library directory is contained within      */
						/*   another.  Undocumented, because this is a debugging  */
						/*   display option.			        */
             analyzeS				/* Display analysis of library names, as all possible     */
						/*  names are re-scanned.  This is mostly for debugging,  */
						/*  and to help explain lib.dir name preferences to the   */
						/*  installer.				        */
             ) bit(1) unaligned;

     C.sciP = AsciP;
     C.S = F;
     C.libraryS = T;
     
     call arg_setup (AsciP);                                /* Analyze user-specified  -Control_args	        */

     if args_remain() then
          call controlArgs(C);

     if C.libraryS then do;
	lib_namesP = get_lib_names (AsciP, Abuild_dataP, F);

  dcl 1 nd aligned like lib_names.node based (lib_names.P(i));

	call ioa_ ("  ^20a  ^40a^[^/^]^66t^a", "PREFERRED LIBRARY", "ROOT PATHNAME", F, "COMMENT");
	call ioa_ ("  ^20a  ^40a^[^/^]^66t^a", (20)"-", (40)"-", F, (10)"-");
	do i = lbound(lib_names.node,1) to hbound(lib_names.node,1);
	     if C.sortedS then
		call ioa_ ("  ^vx^a^26t^40a^[^/^]^67t^a", 
		     divide (20 - length(nd.library), 2, 17, 0), nd.library, 
		     nd.path, length(nd.path) > 40,
		     nd.problem );

	     else call ioa_ ("  ^vx^a^26t^40a^[^/^]^67t^a", 
		divide (20 - length(lib_names.library(i)), 2, 17, 0), lib_names.library(i), 
		lib_names.path(i), length(lib_names.path(i)) > 40,
		lib_names.problem(i) );
	     end;
	call ioa_ ("");
	end;
     
     else if C.directoryS then do;
	call ioa_ (" In a 2-component library name: <lib-name>.<dir-name>, the following are" || 
	         "^/ preferred <dir-name> values, used by mbuild to select install directory" ||
	         "^/ for various build paradigms:" ||
	         "^/   ^( ^a^)", dirs(*) );
	call ioa_ ("");
	end;
     else if C.analyzeS  then do;
	lib_namesP = get_lib_names (AsciP, Abuild_dataP, T);
	call ioa_ ("");
	end;
     return;
%page;
/* ======================================================================
   ENTRYPOINT:  get_lib_names

    1) Populates build_data.lib_namesP (if null).
    2) Returns pointer to the lib_names structure.
    3) Optionally displays details of the name analysis which led to
       choice of preferred library name for each library root directory.
   ====================================================================== */

get_lib_names:
     entry (AsciP, Abuild_dataP, Adisplay) returns (ptr);

  dcl  Adisplay bit(1) aligned;			/* Display full data from library path/name analysis.     */

  dcl  lib_desc_name char(168) var;

     if  bld.lib_namesP ^= null()  then do;
	if  Adisplay  then
	     call release_lib_names (Abuild_dataP);
          else do;
	     call lib_descriptor_$name (lib_desc_name);
	     lib_namesP = bld.lib_namesP;
	     if  lib_names.descriptor ^= lib_desc_name  then
		call release_lib_names (Abuild_dataP);
	     end;
	end;
     
     if  bld.lib_namesP ^= null()  then
	return (bld.lib_namesP);

     Parg_struc = addr(arg_struc_temp);			/* Code excerpt from library_descriptor command/AF.       */
     arg_struc.Srequirements_allowed = ""b;
     arg_struc.Srequirements_initial = ""b;
     arg_struc.Scontrol_allowed = ""b;
     arg_struc.Scontrol_initial = ""b;

     Sc_allowed.library = T;
     Sc_allowed.descriptor = T;
     Sreq_allowed.names = T;
     Sreq_allowed.matching_names = T;
     Sreq_allowed.primary_name = T;
     Sc_init.library = T;

     LIBRARY.N = 1;
     LIBRARY.V(1) = "**";
     LIBRARY.C(1) = 2;

     arg_struc.version = Varg_struc_1;
     arg_struc.program = PROC;
     arg_struc.Parg_list = ssu_$arg_list_ptr (AsciP);
     arg_struc.Iarg_list = 1;
     arg_struc.Larg_list = 0;
     arg_struc.put_error = com_err_;
     call lib_args_ (LIBRARY, STARNAME, EXCLUDE, Srequirements, Scontrol, addr(arg_struc), code);
     if code ^= 0 then return ( null() );

     S.names = T;
     S.type = T;
     S.pathname = T;
     S.root_search_proc = T;
     S.new_line = T;

     PDnodes = null;				/* Get path/names of all libraries in current descriptor  */
     on cleanup call lib_free_node_$array (PDnodes);
     Plibrary = addr(LIBRARY);
     call lib_descriptor_$libraries (arg_struc.descriptor, Plibrary, Srequirements, bld.ssu_areaP, PDnodes, progress, code);
     if code ^= 0 then go to BAD_LIB;

  dcl  namesN_max fixed bin init(0);			/* Count max names returned on any library.	        */
     do i = 1 to Dnodes.N;				/*  - Used to allocate temp stack space for rt structure  */
	Pnode = addr(Dnodes.nodes(i));
	if node.Pparent = null then do;
	     namesN_max = max(namesN_max, node.PD->D.Pnext->Dnames.N);
	     end;
	end;

space:						/* BEGIN BLOCK: allocate stack space for rt structure.    */
     begin;

  dcl 1 rt (Dnodes.N) aligned,
      2 path char(168) varying,
      2 namesN fixed bin,
      2 names_pref_dirN fixed bin,
      2 names_prefN fixed bin,
      2 names          (namesN_max) char(32) var,
      2 names_pref_dir (namesN_max) char(32) var,
      2 names_pref     (namesN_max) char(32) var,
      2 duplicates     (namesN_max) fixed bin;

  dcl  dirpart char(32) var,
       libpart char(32) var;

     unspec(rt) = F;

     do i = lbound(rt,1) to hbound(rt,1);		/* For each library node, scan its library names	        */
	Pnode = addr(Dnodes.nodes(i));		/*  - Library's node structure		        */
	if node.Pparent = null then do;		/* Node represent a library root directory.	        */
	     rt(i).path = link_node.link_target;	/*  - Save its path and actual name count.	        */
	     rt(i).namesN = node.PD->D.Pnext->Dnames.N;

	     pd = 0;				/*  - Found no names yet with preferred dir parts.        */
	     p = 0;				/*    and none with preferred lib.dir parts	        */

	     do n = 1 to rt(i).namesN;		/*  - Fill each element of names array for this node      */
		rt(i).names(n) = rtrim(node.PD->D.Pnext->Dnames.names(n));

		dirpart = after(rt(i).names(n), ".");	/*  - If it is 2-component name, might have preferred     */
		if dirpart ^= "" then do;		/*    components.				        */
		     libpart = before(rt(i).names(n), ".");
						/*  - First, compare dirpart with preferred dirs	        */
		     do d = lbound(dirs,1) to hbound(dirs,1);
			if  dirpart = dirs(d) then do;
			     pd = pd+1;		/*     - record every match as names_pref_dir value       */
			     rt(i).names_pref_dirN = pd;
			     rt(i).names_pref_dir(pd) = rt(i).names(n);
						/*  - Second, compare libpart with preferred libs	        */
			     do l = lbound(libs,1) to hbound(libs,1);
				if libpart = libs(l) then do;
				     p = p + 1;	/*     - record every match as names_pref value	        */
				     rt(i).names_prefN = p;
				     rt(i).names_pref(p) = rt(i).names(n);
				     goto FOUND_PREF_NAME;
				     end;
				end;
			     goto FOUND_PREF_NAME;
			     end;
			end;
FOUND_PREF_NAME:	     end;
		end;
	     end;
	end;

     do i = lbound(rt,1) to hbound(rt,1);		/* No preferred libpart?  Use shortest of preferred       */
	if rt(i).names_prefN = 0 then do;		/*  dirpart names.				        */
	     if rt(i).names_pref_dirN > 0 then do;
		rt(i).names_prefN = 1;
		rt(i).names_pref(1) = rt(i).names_pref_dir(1);
		do n = 2 to rt(i).names_pref_dirN;
		     if length(rt(i).names_pref_dir(n)) < length(rt(i).names_pref(1)) then
			rt(i).names_pref(1) = rt(i).names_pref_dir(n);
		     end;
		end;
	     end;
	end;

     do i = lbound(rt,1) to hbound(rt,1);		/* Look for lib_name.dir_name values that are on more     */
	if rt(i).names_prefN > 0 then do;		/*  than one library root dir.		        */
	     do p = 1 to rt(i).names_prefN;
		do j = lbound(rt,1) to hbound(rt,1);
		     if i = j then goto NEXT;
		     if rt(j).names_prefN > 0 then do;
			do q = rt(j).names_prefN;
			     if rt(i).names_pref(p) = rt(j).names_pref(q) then do;
				rt(i).duplicates(p) = j;
				rt(j).duplicates(q) = i;
				end;
			     end;
			end;
NEXT:		     end;
		end;
	     end;
	end;

     lib_namesN = dimension(rt,1);
     lib_namesP = translator_temp_$allocate (bld.areaP, size(lib_names));
     lib_names.descriptor = arg_struc.descriptor;
     lib_names.namesN = lib_namesN;
     lib_names.node(*) = "";
     do i = lbound(rt,1) to hbound(rt,1); 
	lib_names.path(i) = rt(i).path;
	if rt(i).names_prefN > 0 then do;		/* At least one preferred library name was found.	        */
	     lib_names.library(i) = rt(i).names_pref(1);
	     if rt(i).duplicates(1) > 0 then do;
		lib_names.problem(i) = "library identifies several lib root dirs.";
		do j = 2 to rt(i).names_prefN;
		     if rt(i).duplicates(j) = 0 then do;
			lib_names.library(i) = rt(i).names_pref(j);
			lib_names.problem(i) = "";
			end;
		     end;
		end;
	     end;
	else do;					/* No preferred library name was found.		        */
	     lib_names.library(i) = rt(i).names(1);
	     lib_names.problem(i) = "library uses non-preferred library name components.";
	     end;
	end;

     do i = lbound(lib_names.P,1) to hbound(lib_names.P,1); /* Sort array of pointers to node structures by length    */
	lib_names.P(i) = addr(lib_names.node(i));	/*  of node.path (longest paths first in sorted list).    */
	end;
     call sort_items_$general (addr(lib_names.namesN), order_by_longest_path);

     if Adisplay then do;
          call ioa_ ("     ^32a ^32a ^32a", "All names on library path", "Names with preferred <dir-name>", 
	     "Preferred library name");
          call ioa_ ("     ^32a ^32a ^32a", (31)"-", (31)"-", (31)"-");
	do i = lbound(rt,1) to hbound(rt,1);
	     call ioa_ ("^2d: ^a  ^[No preferred name.^]", i, rt(i).path, rt(i).names_prefN = 0);
	     do n = 1 to rt(i).namesN;
		call ioa_ ("     ^32a ^32a ^32a ^[^/^69t^a^;^s^]^[ ^d^;^s^]",
		     rt(i).names(n), rt(i).names_pref_dir(n), rt(i).names_pref(n), 
		     lib_names(i).problem ^= "" & n=1, lib_names(i).problem,
		     rt(i).duplicates(n) ^= 0, rt(i).duplicates(n));
		end;
	     end;
	end;

     end space;

     call lib_free_node_$array (PDnodes);

     bld.lib_namesP = lib_namesP;
     return (bld.lib_namesP);


BAD_LIB:	
     call ssu_$print_message (AsciP, code, 
  "While obtaining information about the libraries.
  descriptor:	^a", arg_struc.descriptor);
     call lib_error_list_ ("library name", Plibrary, arg_struc.program);
     if PDnodes ^= null then call lib_free_node_$array (PDnodes);
     return ( null() );

order_by_longest_path:
     proc (P1, P2) returns (fixed bin(1));
     
  dcl  (P1, P2) ptr unal;
  dcl 1 n1 aligned like lib_names.node based(P1),
      1 n2 aligned like lib_names.node based(P2);
     
     if length(n1.path) < length(n2.path) then
	return (+1);
     else if length(n1.path) = length(n2.path) then
	return ( 0);
     else return (-1);

     end order_by_longest_path;
%page;
/* ======================================================================
   ENTRYPOINT: release_lib_names

   Discard build_data.lib_namesP ptr (usually because their containing
   area segment is being reinitialized).
   ====================================================================== */

release_lib_names:
     entry (Abuild_dataP);
     
     bld.lib_namesP = null();
     return;

%page;
/* ------------------------------------------------------------
   ROUTINE:  controlArgs

   Process print -control_arg arguments.
   ------------------------------------------------------------ */

controlArgs:
     proc (c);

  dcl 1 c aligned like C;                                   /*  control arg specification data                   (in) */

     do while (args_remain());
          call ssu_$arg_ptr (c.sciP, argI+1, argP, argL);   /* Conditionally read next arg to command/af/request      */
                                                  
          if isControlArg(arg) then do;

               if       arg = "-lb"     | arg = "-library"        then do; c.operationS = F; c.libraryS = T;
                                                                           end;
               else if                    arg = "-sorted"         then do; c.operationS = F; c.libraryS, c.sortedS = T;
							     end;

               else if  arg = "-dir"    | arg = "-directory"      then do; c.operationS = F; c.directoryS = T; 
                                                                           end;
               else if  arg = "-az"     | arg = "-analyze" |
                        arg = "-anal"   | arg = "-analysis"       then do; c.operationS = F; c.analyzeS = T;
                                                                           end;
               else call ssu_$print_message (c.sciP, error_table_$badopt, 
                    "Ignoring unsupported control arg: ^a", arg);
               end;
          
          else do;                                          /* If arg is a -control_arg operand                       */
               call ssu_$abort_line (c.sciP, error_table_$badopt,
                    "Ignoring unsupported operand: ^a", arg);
               end;

          argI = argI + 1;                                  /* Record that we processed the arg just examined above.  */
          end;

     end controlArgs;

%page;
%include lib_arg_struc_;
%page;
%include lib_based_args_;
%page;
%include lib_node_;
%page;
%include ssu_request_dcls_;
%page;
%include mbuild_request_parms_;
%page;
%include mbuild_Tlist_dcls_;
%page;
%include mbuild_data_;

     end mbuild_lib_names_;
