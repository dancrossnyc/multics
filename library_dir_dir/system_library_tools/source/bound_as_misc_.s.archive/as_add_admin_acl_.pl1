/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-05-13,GJohnson), approve(86-05-13,MCR7387),
     audit(86-05-13,Martinson), install(86-05-14,MR12.0-1055):
     Correct error message documentation.
                                                   END HISTORY COMMENTS */


/* AS_ADD_ADMIN_ACL_

   Program to put all system administrators and all project administrators
   on the ACL of some entry.

   PG 741121
   Modified 750214 (Valentine's Day) by PG to add instance tag to user names.
   Modified 750813 by PG to watch out for null system administrator names.
*/

as_add_admin_acl_:
     procedure (bv_dname, bv_ename, bv_sat_ptr, bv_acl_program, bv_mode, bv_code);

/* parameters */

declare (bv_dname char (*),
         bv_ename char (*),
         bv_sat_ptr ptr,
         bv_acl_program variable entry (char (*), char (*), ptr, fixed bin, fixed bin (35)),
         bv_mode bit (*),
         bv_code fixed bin (35)) parameter;

/* automatic */

declare (satp, satep) ptr,
        (satx, adminx, aclx, n_dir_acls, n_seg_acls) fixed bin,
         seg bit (1) aligned,
         name char (32),
         code fixed bin (35);

/* builtins */

declare (addr, length, reverse, substr, verify) builtin;

/* entries */

declare  sys_log_$error_log entry options (variable);

/* external static */

declare  error_table_$argerr fixed bin (35) external static;

/* include files */

%include sat;
%include user_attributes;

/* program */

	satp = bv_sat_ptr;
	n_seg_acls = (4 * satp -> sat.n_projects) + 2;	/* maximum number of proj admins + 2 sys admins */
	n_dir_acls = 0;
	seg = "1"b;
	go to join;

as_add_admin_acls_$dir:
	entry (bv_dname, bv_ename, bv_sat_ptr, bv_acl_program, bv_mode, bv_code);

	satp = bv_sat_ptr;
	n_dir_acls = (4 * satp -> sat.n_projects) + 2;
	n_seg_acls = 0;
	seg = "0"b;

join:
	begin;					/* allocate the acl structure */

declare 1 directory_acls aligned dim (n_dir_acls) automatic,
        2 access_name char (32),
        2 modes bit (36),
        2 status_code fixed bin (35);

declare 1 segment_acls aligned dim (n_seg_acls) automatic,
        2 access_name char (32),
        2 modes bit (36),
        2 zero_pad bit (36),
        2 status_code fixed bin (35);

	     aclx = 1;
	     do satx = 1 to sat.current_size;		/* loop thru all used entries */
		satep = addr (sat.project (satx));	/* ptr to project entry */
		if project.state = 1 then do;		/* in use */
		     do adminx = 1 to 4 while (project.admin (adminx).userid ^= "");
			if seg then do;
			     segment_acls (aclx).access_name = add_tag (project.admin (adminx).userid);
			     segment_acls (aclx).modes = bv_mode;
			     segment_acls (aclx).zero_pad = ""b;
			     segment_acls (aclx).status_code = 0;
			end;
			else do;
			     directory_acls (aclx).access_name = add_tag (project.admin (adminx).userid);
			     directory_acls (aclx).modes = bv_mode;
			     directory_acls (aclx).status_code = 0;
			end;
			aclx = aclx + 1;
		     end;
		end;
	     end;

	     do adminx = 1 to 2 while (sat.system_admin (adminx) ^= "");
		if seg then do;
		     segment_acls (aclx).access_name = add_tag (sat.system_admin (adminx));
		     segment_acls (aclx).modes = bv_mode;
		     segment_acls (aclx).zero_pad = ""b;
		     segment_acls (aclx).status_code = 0;
		end;
		else do;
		     directory_acls (aclx).access_name = add_tag (sat.system_admin (adminx));
		     directory_acls (aclx).modes = bv_mode;
		     directory_acls (aclx).status_code = 0;
		end;
		aclx = aclx + 1;
	     end;
	     aclx = aclx - 1;			/* normalize to number used */

	     if seg then call bv_acl_program (bv_dname, bv_ename, addr (segment_acls), aclx, code);
	     else call bv_acl_program (bv_dname, bv_ename, addr (directory_acls), aclx, code);
	     if code ^= 0 then do;
		if code = error_table_$argerr then do;	/* oh, damn! */
		     do adminx = 1 to aclx;

			if seg then do;
			     code = segment_acls (adminx).status_code;
			     name = segment_acls (adminx).access_name;
			end;
			else do;
			     code = directory_acls (adminx).status_code;
			     name = directory_acls (adminx).access_name;
			end;

			if code ^= 0 then
			     call sys_log_$error_log (2, code,
			     "as_add_admin_acl_", "Could not add ^a to ACL of ^a>^a",
			     name, bv_dname, bv_ename);
		     end;
		end;
		else call sys_log_$error_log (2, code, "as_add_admin_acl_",
		     "Could not add to ACL of ^a>^a", bv_dname, bv_ename);

		bv_code = code;
		return;
	     end;
	end;					/* the begin block */
	bv_code = 0;				/* a-ok */
	return;

	

/* Internal procedure to add an instance tag to an administrator name */

add_tag:
	procedure (bv_access_name) returns (char (32));

/* parameters */

declare  bv_access_name char (*);

/* automatic */

declare  access_name char (32);
declare  n fixed bin;

/* program */

	     access_name = bv_access_name;		/* expand to char (32) */

	     n = length (access_name) - verify (reverse (access_name), " ") + 1;
						/* find length of access_name */

	     substr (access_name, n + 1, 2) = ".*";	/* splat */

	     return (access_name);

	end add_tag;

/* BEGIN MESSAGE DOCUMENTATION

Message:
as_add_admin_acl_: ERROR_MESSAGE. Could not add PGID to ACL of PATH.

S:	as (severity2)

T:	Answering Service initialization, or while the system is running.

M:	An error occurred while trying to rebuild the access control list (ACL) on PATH where:

ERROR_MESSAGE  is an error_table_ message
.br
PGID           is a process group id
.br
PATH           is a full pathname

A:	Manually give PGID read access (or status permission) to PATH.


Message:
as_add_admin_acl_: ERROR_MESSAGE. Could not add to ACL of PATH.

S:	as (severity2)

T:	Answering Service initialization, or while the system is running.

M:	Some fatal error occurred while rebuilding the access control list (ACL) of PATH.  ERROR_MESSAGE is an
error_table_ message and PATH is the full pathname of a segment or a directory.

A:	$contact
The operation that caused the error must be determined and the operation repeated
after correction.

   END MESSAGE DOCUMENTATION */

     end as_add_admin_acl_;
