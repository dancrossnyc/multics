/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(85-07-23,Swenson), approve(86-08-13,MCR7512),
     audit(86-08-13,EJSharpe), install(86-09-08,MR12.0-1150):
     Modified to correctly set the grant/deny flag in binary data of audit
     messages.
  2) change(86-09-11,Lippard), approve(85-12-30,MCR7326),
     audit(86-10-27,GDixon), install(86-10-28,MR12.0-1200):
     Added entry points abs_command_login and abs_command_cancel.
  3) change(87-03-11,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-27,Brunelle), install(87-08-04,MR12.1-1055):
      A) Added login and logout entrypoints for Login Server use.
      B) Correct coding standard violations.
      C) Updated for change to user_table_entry.incl.pl1.
  4) change(87-05-20,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-27,Brunelle), install(87-08-04,MR12.1-1055):
      A) Change as_access_audit_$process to accept a negative action code to
         audit a DENIED operation.  0-action identifies the operation that
         failed.
  5) change(87-06-08,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-27,Brunelle), install(87-08-04,MR12.1-1055):
      A) Make $process correctly audit failed LOGIN attempts as being DENIED.
      B) Restructure all messages to have the same format and content.
      C) Change calling sequence of $channel entrypoint to accommodate
         DIALIN, DIALOUT and DIAL SYSTEM, and MNA connections.
  6) change(87-06-29,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-27,Brunelle), install(87-08-04,MR12.1-1055):
      A) Omit tag from LOGOUT audit message if it hasn't been filled in yet.
      B) Add tag to process CREATE/CONNECT/etc messages.
  7) change(87-07-15,GDixon), approve(87-07-15,MCR7741),
     audit(87-07-27,Brunelle), install(87-08-04,MR12.1-1055):
      A) Add AS_AUDIT_PROCESS_TERMINATE action to $process entrypoint.
  8) change(87-07-24,Dickson), approve(87-07-24,MCR7722),
     audit(87-07-27,Brunelle), install(87-08-04,MR12.1-1055):
     Added three entry points for auditing access checks: dpg_buzzard,
     as_rqt_nt_pnt_chg, and asr_com_chnl_info_srvr.
  9) change(88-03-18,Parisek), approve(88-03-18,MCR7849),
     audit(88-03-22,Lippard), install(88-07-13,MR12.2-1047):
     Changed reference of ute.initial_ring to ute.lowest_ring when copying it
     to the ASIAAR.record.min_ring value.
                                                   END HISTORY COMMENTS */

/* format: style4,delnl,insnl,^ifthendo,ll79 */

as_access_audit_:
     procedure ();

/**** This program is the auditing module for the Answering Service.
      All programs which audit security-relevant actions should call
      this program to audit.  An exception to this is lg_ctl_, which
      due to the way it accumulates the audit information, is difficult
      to interface to as_access_audit_. */

/**** NOTE
      Since all of the messages logged by this module are described in
      AK50, the error message documentation requirement is waived.  */


/* Modification History:
   85-01-18 E. Swenson: Written.
   85-02-07 E. Swenson: Fixed bug which resulted in garbage in channel
   names.
*/

/* Parameters */

dcl  P_action fixed bin (17) parameter;
dcl  P_added_info char (*) parameter;
dcl  P_asrccip pointer parameter;
dcl  P_asrsp pointer parameter;
dcl  P_cdtep pointer parameter;
dcl  P_channel_audit_info_ptr pointer parameter;
dcl  P_code fixed bin (35) parameter;
dcl  P_dial_server_info_ptr ptr parameter;
dcl  P_dial_utep ptr parameter;			/* MNA ute for dialed terminal */
dcl  P_failed bit (1) aligned parameter;
dcl  P_name char (*) parameter;
dcl  P_request_id fixed bin (71) parameter;
dcl  P_target_process_utep ptr parameter;		/* pointer to ute we are trying to conect to */
dcl  P_utep pointer parameter;

/* Automatic */

dcl  1 ACAR aligned like as_channel_audit_record;
dcl  1 ADAR aligned like as_dial_service_audit_record;
dcl  1 ARH aligned like audit_record_header automatic;
dcl  1 ARHP aligned like audit_record_header_proxy automatic;
dcl  1 ASIAAR aligned like as_ia_audit_record_abs_proxy;
dcl  action fixed bin (17);				/* copy of P_action */
dcl  added_info char (128);				/* additional info for log message */
dcl  audit_record_size fixed bin automatic;
dcl  dial_utep ptr;
dcl  1 event_flags aligned like audit_event_flags automatic;
dcl  grant_sw bit (1) aligned;			/* whether the operation was a success or a failure */
dcl  mins fixed bin (35) automatic;
dcl  operation bit (36) aligned automatic;
dcl  secs fixed bin (35) automatic;
dcl  proc_type char (4) automatic;
dcl  request_id fixed bin (71) automatic;
dcl  severity fixed bin automatic;
dcl  target_utep ptr;


/* Based */

dcl  1 dial_ute aligned like ute based (dial_utep);	/* ute for dialed */
						/* MNA terminal  */
dcl  1 target_ute aligned like ute based (target_utep);	/* pointer to process's ute we are trying to connect to. */


/* External Entries */

dcl  sys_log_ entry options (variable);
dcl  sys_log_$binary entry options (variable);
dcl  sys_log_$error_log entry entry options (variable);


/* External Static */

dcl  (
     access_operations_$abs_command_cancel,
     access_operations_$abs_command_login,
     access_operations_$channel_attach,
     access_operations_$channel_detach,
     access_operations_$dial_system,
     access_operations_$dialid_start,
     access_operations_$dialid_stop,
     access_operations_$dialin,
     access_operations_$dialout,
     access_operations_$process_connect,
     access_operations_$process_create,
     access_operations_$process_destroy,
     access_operations_$process_disconnect,
     access_operations_$process_terminate,
     access_operations_$user_login,
     access_operations_$user_logout
     ) bit (36) aligned external;
dcl  error_table_$action_not_performed fixed bin (35) external static;


/* Constant */

dcl  AS_AUDIT_DATA_CLASS char (16) varying initial ("access_audit")
	internal static options (constant);
dcl  (
     DENIED initial ("0"b),
     GRANTED initial ("1"b)
     ) bit (1) aligned internal static options (constant);
dcl  ME char (32) initial ("as_access_audit_") internal static
	options (constant);
dcl  MILLION fixed bin (35) initial (1000000) internal static
	options (constant);
dcl  PROCESS_TYPES (-1:3) char (3)
	initial ("int", "???", "int", "abs", "dmn") internal static
	options (constant);
dcl  QNAME (0:4) char (4) internal static options (constant)
	initial ("Q FG", "Q 1", "Q 2", "Q 3", "Q 4");


/* Builtin */
dcl  (addr, after, before, divide, length, mod, null, reverse, rtrim, string,
     size, substr, unspec) builtin;
%page;
/* Program */

process:
     entry (P_utep, P_action, P_added_info);

	utep = P_utep;				/* get into automatic storage for efficiency */
	action = P_action;				/* ditto */

	if action < 0
	then do;					/* allow auditing */
	     grant_sw = DENIED;			/* of denials by */
	     action = -action;			/* negative      */
	end;					/* action	       */
	else grant_sw = GRANTED;

	if (action ^= AS_AUDIT_PROCESS_CREATE
	     & action ^= AS_AUDIT_PROCESS_DESTROY
	     & action ^= AS_AUDIT_PROCESS_CONNECT
	     & action ^= AS_AUDIT_PROCESS_DISCONNECT
	     & action ^= AS_AUDIT_PROCESS_TERMINATE)
	then do;
	     call sys_log_$error_log (SL_LOG_SILENT,
		error_table_$action_not_performed, ME,
		"Invalid action code ^d for as_access_audit_$process entrypoint.",
		action);
	     return;
	end;

	call FILL_IN_ARH (addr (ARH), grant_sw);

	if action = AS_AUDIT_PROCESS_CREATE
	then ARH.header.operation_code = access_operations_$process_create;
	else if action = AS_AUDIT_PROCESS_DESTROY
	then ARH.header.operation_code = access_operations_$process_destroy;
	else if action = AS_AUDIT_PROCESS_CONNECT
	then ARH.header.operation_code = access_operations_$process_connect;
	else if action = AS_AUDIT_PROCESS_DISCONNECT
	then ARH.header.operation_code =
		access_operations_$process_disconnect;
	else if action = AS_AUDIT_PROCESS_TERMINATE
	then ARH.header.operation_code =
		access_operations_$process_terminate;
	if action = AS_AUDIT_PROCESS_CREATE
	then do;
	     if ute.logout_type = "new_"
		| substr (ute.logout_type, 1, 2) = "np"
	     then added_info = "new_proc";
	     else added_info = "login";
	end;
	else if action = AS_AUDIT_PROCESS_DESTROY
	then do;
	     added_info = ute.logout_type;
	     if substr (added_info, 1, 2) = "np" | added_info = "new_"
	     then added_info = "new_proc";
	     else if added_info = "alar"
	     then added_info = "bump";
	     else if added_info = "dest"
	     then added_info = "destroy";
	end;
	else added_info = P_added_info;

	call sys_log_$binary (SL_LOG_SILENT, addr (ARH), size (ARH),
	     AS_AUDIT_DATA_CLASS,
	     "^a^[ DENIED^]^20t^[*^]^a.^a.^a ^a ^12.3b ^[(^a)^;^s^]",
	     AS_AUDIT_PROCESS_ACTIONS (action), ^grant_sw,
	     (ute.anonymous = 1), ute.person, ute.project, ute.tag,
	     ute.tty_name, ute.proc_id, (added_info ^= ""), added_info);
	return;
%page;
process_connect_denied:
     entry (P_utep, P_target_process_utep, P_added_info);

	utep = P_utep;
	target_utep = P_target_process_utep;
	added_info = P_added_info;

	call FILL_IN_ARH (addr (ARH), DENIED);
	ARH.header.operation_code = access_operations_$process_connect;

	call sys_log_$binary (SL_LOG_SILENT, addr (ARH), size (ARH),
	     AS_AUDIT_DATA_CLASS,
	     "CONNECT DENIED^20t^[*^]^a.^a ^a to ^[*^]^a.^a.^a ^12.3b (^a)",
	     (ute.anonymous = 1), ute.person, ute.project, ute.tty_name,
	     (target_ute.anonymous = 1), target_utep -> ute.person,
	     target_ute.project, target_ute.tag, target_ute.proc_id,
	     added_info);
	return;
%page;
channel:
     entry (P_cdtep, P_dial_utep, P_utep, P_action, P_channel_audit_info_ptr,
	P_added_info);

	cdtep = P_cdtep;
	dial_utep = P_dial_utep;
	utep = P_utep;
	action = P_action;				/* action/success fail indicator */
	channel_audit_info_ptr = P_channel_audit_info_ptr;
	added_info = P_added_info;

	if action < 0
	then do;
	     grant_sw = DENIED;			/* negative actions are failures */
	     action = -action;
	end;
	else grant_sw = GRANTED;			/* positive actions are successes */

	if action ^= AS_AUDIT_CHANNEL_ATTACH
	     & action ^= AS_AUDIT_CHANNEL_DETACH
	     & action ^= AS_AUDIT_CHANNEL_DIALIN
	     & action ^= AS_AUDIT_CHANNEL_DIALOUT
	     & action ^= AS_AUDIT_CHANNEL_DIAL_SYSTEM
	then do;
	     call sys_log_$error_log (SL_LOG,
		error_table_$action_not_performed, ME,
		"Invalid action code ^d for as_access_audit_$channel entrypoint.",
		action);
	     return;
	end;

	call FILL_IN_ARH (addr (ACAR.header), grant_sw);

	if action = AS_AUDIT_CHANNEL_ATTACH
	then ACAR.header.operation_code = access_operations_$channel_attach;
	else if action = AS_AUDIT_CHANNEL_DETACH
	then ACAR.header.operation_code = access_operations_$channel_detach;
	else if action ^= AS_AUDIT_CHANNEL_DIALIN
	then ACAR.header.operation_code = access_operations_$dialin;
	else if action ^= AS_AUDIT_CHANNEL_DIALOUT
	then ACAR.header.operation_code = access_operations_$dialout;
	else if action ^= AS_AUDIT_CHANNEL_DIAL_SYSTEM
	then ACAR.header.operation_code = access_operations_$dial_system;

	if channel_audit_info.valid.user_validation_level
	then ACAR.header.subject.ring =
		channel_audit_info.user_validation_level;
	else ACAR.header.subject.ring = 0;
	ACAR.record.type = AAB_channel;
	ACAR.record.version = AS_AUDIT_RECORD_CHN_VERSION_1;
%page;
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* This entrypoint may be called by MCS user control (dial_ctl_) or by MNA   */
/* ls user control (uc_dial_).				       */
/*							       */
/* MCS passes a cdte pointer if there is a channel associated with the       */
/* attach, detach, dial, dial system or dial_out request.  For dial	       */
/* requests, if dial -user was given, then the authenticated user's	       */
/* person.project is stored in the cdte along with the channel attributes.   */
/*							       */
/* MNA passes a dial_ute pointer if there is an authenticated user	       */
/* associated with the dial, dial system or login -operator request.	       */
/*							       */
/* In all cases the ute pointer identifies the process doing the attach,     */
/* detach or dial_out; or the target process of a dial, dial system or login */
/* -operator request.					       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	if cdtep = null () & dial_utep = null ()	/* No auth user  */
	then do;
	     ACAR.record.flags.channel_info_valid = "0"b;
	     ACAR.record.flags.current_access_class_valid =
		channel_audit_info.valid.access_class;
	     ACAR.record.pad1 = ""b;
	     ACAR.record.channel_name = channel_audit_info.channel_name;
	     if channel_audit_info.valid.access_class
	     then ACAR.record.current_access_class =
		     channel_audit_info.access_class;
	     else ACAR.record.current_access_class = ""b;
	     if channel_audit_info.valid.access_class_range
	     then ACAR.record.access_class_range =
		     channel_audit_info.access_class_range;
	     else ACAR.record.access_class_range =
		     ACAR.record.current_access_class;
	     ACAR.record.current_service_type = 0;
	     ACAR.record.service_type = 0;
	     ACAR.record.terminal_type = "";
	     ACAR.record.authenticated_user.personid = "";
	     ACAR.record.authenticated_user.projectid = "";
	     ACAR.record.authenticated_user.pad2 = ""b;
	end;
%page;
	else if cdtep ^= null ()
	then do;					/* attach, detach */
	     ACAR.record.flags.channel_info_valid = "1"b; /* dial chn known */
	     ACAR.record.flags.current_access_class_valid =
		cdte.dialup_flags.current_access_class_valid;
	     ACAR.record.pad1 = ""b;
	     ACAR.record.channel_name = cdte.name;
	     ACAR.record.current_access_class = cdte.current_access_class;
	     ACAR.record.access_class_range = cdte.access_class;
	     ACAR.record.current_service_type = cdte.current_service_type;
	     ACAR.record.service_type = cdte.service_type;
	     ACAR.record.terminal_type = cdte.current_terminal_type;
	     ACAR.record.authenticated_user.personid = cdte.user_name.person;
	     ACAR.record.authenticated_user.projectid =
		cdte.user_name.project;
	     ACAR.record.authenticated_user.pad2 = ""b;
	end;
	else if dial_utep ^= null ()
	then do;					/* dial, 	       */
						/* login -op     */
	     ACAR.record.flags.channel_info_valid = "1"b; /* auth user info */
	     ACAR.record.flags.current_access_class_valid = "1"b;
	     ACAR.record.pad1 = ""b;
	     ACAR.record.channel_name = dial_ute.tty_name;
	     if channel_audit_info.valid.access_class
	     then ACAR.record.current_access_class =
		     channel_audit_info.access_class;
	     else ACAR.record.current_access_class = ""b;
	     if channel_audit_info.valid.access_class_range
	     then ACAR.record.access_class_range =
		     channel_audit_info.access_class_range;
	     else ACAR.record.access_class_range =
		     ACAR.record.current_access_class;
	     ACAR.record.current_service_type = 0;
	     ACAR.record.service_type = 0;
	     ACAR.record.terminal_type = dial_ute.terminal_type;
	     ACAR.record.authenticated_user.personid = rtrim(dial_ute.person);
	     ACAR.record.authenticated_user.projectid = rtrim(dial_ute.project);
	     ACAR.record.authenticated_user.pad2 = ""b;
	end;

	call sys_log_$binary (SL_LOG_SILENT, addr (ACAR), size (ACAR),
	     AS_AUDIT_DATA_CLASS,
	     "^a^[ DENIED^]^20t^[^a.^a ^;^s^s^]channel ^a ^a ^[*^]^a.^a.^a ^12.3b^[ ^a=^a^;^s^s^]^[ (^a)^]",
	     AS_AUDIT_CHANNEL_ACTIONS (action), ^grant_sw,
	     ACAR.record.authenticated_user.personid ^= "",
	     ACAR.record.authenticated_user.personid,
	     ACAR.record.authenticated_user.projectid,
	     ACAR.record.channel_name, AS_AUDIT_CHANNEL_DIRECTION (action),
	     (ute.anonymous = 1), ute.person, ute.project, ute.tag,
	     ute.proc_id, channel_audit_info.valid.service_info,
	     AS_AUDIT_CHANNEL_SERVICE_INFO (action),
	     channel_audit_info.service_info, (added_info ^= ""), added_info)
	     ;
	return;
%page;
dialid:
     entry (P_utep, P_action, P_dial_server_info_ptr, P_added_info);

	utep = P_utep;
	action = P_action;				/* action/success fail indicator */
	added_info = P_added_info;
	dial_server_info_ptr = P_dial_server_info_ptr;
	if action < 0
	then do;
	     grant_sw = DENIED;			/* negative actions are failures */
	     action = -action;
	end;
	else grant_sw = GRANTED;			/* positive actions are successes */

	if action ^= AS_AUDIT_DIALID_START & action ^= AS_AUDIT_DIALID_STOP
	then do;
	     call sys_log_$error_log (SL_LOG_SILENT,
		error_table_$action_not_performed, ME,
		"Invalid action code ^d for as_access_audit_$dialid entrypoint.",
		action);
	     return;
	end;

	call FILL_IN_ARH (addr (ADAR.header), grant_sw);

	if action = AS_AUDIT_DIALID_START
	then ADAR.header.operation_code = access_operations_$dialid_start;
	else ADAR.header.operation_code = access_operations_$dialid_stop;

	ADAR.header.subject.ring = dial_server_info.server_ring;

	ADAR.record.type = AAB_dial_service;
	ADAR.record.version = AS_AUDIT_RECORD_DIALID_VERSION_1;
	ADAR.record.dial_server_ring = dial_server_info.server_ring;
	ADAR.record.flags.registered_server = dial_server_info.registered;
	ADAR.record.flags.privileged_server = dial_server_info.privileged;
	ADAR.record.dial_qualifier = dial_server_info.dial_qualifier;

	call sys_log_$binary (SL_LOG_SILENT, addr (ADAR), size (ADAR),
	     AS_AUDIT_DATA_CLASS,
	     "DIALID^[ DENIED^]^20t^[start^;stop^] service for ^[*^]^a.^a.^a ^12.3b id=^a^[ (^a)^]",
	     ^grant_sw, (action = AS_AUDIT_DIALID_START),
	     (ute.anonymous = 1), ute.person, ute.project, ute.tag,
	     ute.proc_id, dial_server_info.dial_qualifier,
	     (added_info ^= ""), added_info);
	return;
%page;
abs_command_cancel:
     entry (P_utep, P_asrsp, P_request_id, P_failed);

	utep = P_utep;
	as_request_sender_ptr = P_asrsp;
	request_id = P_request_id;
	grant_sw = ^P_failed;

	ARHP.header.type = ARH_TYPE_PROXY;
	ARHP.header.version = ACCESS_AUDIT_HEADER_VERSION_3;
	string (ARHP.header.flags) = ""b;
	ARHP.header.flags.subject_is_process = "1"b;
	ARHP.header.operation_code = access_operations_$abs_command_cancel;
	unspec (event_flags) = ""b;
	event_flags.special_op = "1"b;
	event_flags.grant = grant_sw;
	ARHP.header.event_flags = unspec (event_flags);
	ARHP.header.session_uid = ute.session_uid;

/* Binary info for the absentee process for which a cancellation request
   has been sent. */
	ARHP.subjects (1).person =
	     substr (ute.person, 1, length (ARHP.subjects (1).person));
	ARHP.subjects (1).project =
	     substr (ute.project, 1, length (ARHP.subjects (1).project));
	ARHP.subjects (1).tag = ute.tag;
	ARHP.subjects (1).ring = ute.initial_ring;
	ARHP.subjects (1).anonymous = (ute.anonymous = 1);
	ARHP.subjects (1).pad3 = ""b;
	ARHP.subjects (1).process_id = ute.proc_id;
	ARHP.subjects (1).authorization = ute.process_authorization;
	ARHP.subjects (1).authorization_range (1) =
	     ute.process_authorization_range (1);
	ARHP.subjects (1).authorization_range (2) =
	     ute.process_authorization_range (2);

/* Binary info for the process requesting the cancellation. */
	ARHP.subjects (2).person = before (as_request_sender.group_id, ".");
	ARHP.subjects (2).project =
	     before (after (as_request_sender.group_id, "."), ".");
	ARHP.subjects (2).tag =
	     after (after (as_request_sender.group_id, "."), ".");
	ARHP.subjects (2).ring = as_request_sender.validation_level;
	ARHP.subjects (2).anonymous =
	     (ARHP.subjects (2).person = "anonymous");
	ARHP.subjects (2).pad3 = ""b;
	ARHP.subjects (2).process_id = as_request_sender.process_id;
	ARHP.subjects (2).authorization = as_request_sender.authorization;
	ARHP.subjects (2).authorization_range (1) =
	     as_request_sender.authorization;
	ARHP.subjects (2).authorization_range (2) =
	     as_request_sender.max_authorization;

	call sys_log_$binary (SL_LOG_SILENT, addr (ARHP), size (ARHP),
	     AS_AUDIT_DATA_CLASS,
	     "ABS CANCEL^[ DENIED^]^20t^[*^]^a.^a.^a ^a ^12.3b (car by ^[*^]^a)",
	     ^grant_sw, (ute.anonymous = 1), ute.person, ute.project,
	     ute.tag, ute.tty_name, ute.proc_id, ARHP.subjects (2).anonymous,
	     as_request_sender.group_id);
	return;
%page;
abs_command_login:
     entry (P_asrsp);

	as_request_sender_ptr = P_asrsp;

	operation = access_operations_$abs_command_login; /* make pcref    */
						/* find where op */
						/* being audited */

	call sys_log_ (SL_LOG_SILENT,
	     "ABS LOGIN^20trequested by ^a Level=^d",
	     as_request_sender.group_id, as_request_sender.validation_level);
	return;
%page;
login:
     entry (P_utep, P_added_info);

	utep = P_utep;
	added_info = P_added_info;
	grant_sw = (ute.login_result = 0);

	unspec (ASIAAR) = ""b;
	call FILL_IN_ARH (addr (ASIAAR.header), grant_sw);
	ASIAAR.header.operation_code = access_operations_$user_login;

	if ute.process_type = PT_ABSENTEE
	then if ute.abs_attributes.proxy
	     then ASIAAR.record.type = AAB_ia_abs_proxy;
	     else ASIAAR.record.type = AAB_ia_abs;
	else ASIAAR.record.type = AAB_ia_int_dmn;

	ASIAAR.record.version = AS_AUDIT_RECORD_IA_VERSION_1;
	ASIAAR.record.process_type = ute.process_type;
	ASIAAR.record.min_ring = ute.lowest_ring;
	ASIAAR.record.max_ring = ute.highest_ring;
	ASIAAR.record.attributes = ute.at;
	ASIAAR.record.audit_flags = ute.audit;
	ASIAAR.record.channel = ute.tty_name;
	ASIAAR.record.terminal_type = ute.terminal_type;
	ASIAAR.record.answerback = ute.tty_id_code;
	ASIAAR.absentee_input_path = ute.input_seg;

	ASIAAR.proxy_user =
	     rtrim (ute.proxy_person) || "." || ute.proxy_project;

	proc_type = PROCESS_TYPES (ute.process_type);
	if ute.process_type = PT_ABSENTEE
	then do;
	     proc_type = QNAME (ute.queue);
	     if ute.abs_attributes.proxy
	     then audit_record_size = size (as_ia_audit_record_abs_proxy);
	     else audit_record_size = size (as_ia_audit_record_abs);
	end;
	else audit_record_size = size (as_ia_audit_record_int_dmn);

	if grant_sw
	then severity = SL_LOG;
	else severity = SL_LOG_SILENT;

	call sys_log_$binary (severity, addr (ASIAAR), audit_record_size,
	     AS_AUDIT_DATA_CLASS,
	     "LOGIN^[ DENIED^]^20t^[*^]^a.^a ^a ^a^[ [^a]^;^s^]^[ (^a)^;^]",
	     ^grant_sw, (ute.anonymous = 1), ute.person, ute.project,
	     proc_type, ute.tty_name, (ute.process_type = PT_ABSENTEE),
	     Abs_Entry_Name (ute.input_seg), (added_info ^= ""), added_info);
	return;
%page;
logout:
     entry (P_utep, P_added_info);

	utep = P_utep;
	added_info = P_added_info;
	secs = divide (ute.cpu_usage, MILLION, 35, 0);
	mins = divide (secs, 60, 35, 0);
	secs = mod (secs, 60);

	proc_type = PROCESS_TYPES (ute.process_type);
	if ute.process_type = PT_ABSENTEE
	then proc_type = QNAME (ute.queue);

	call FILL_IN_ARH (addr (ASIAAR.header), GRANTED);

	ASIAAR.header.operation_code = access_operations_$user_logout;

	call sys_log_$binary (SL_LOG, addr (ASIAAR.header),
	     size (audit_record_header), AS_AUDIT_DATA_CLASS,
	     "LOGOUT^20t^[*^]^a.^a^[.^a^;^s^] ^a ^a ^3d:^2d $^.2f (^a)",
	     (ute.anonymous = 1), ute.person, ute.project, (ute.tag ^= ""),
	     ute.tag, proc_type, ute.tty_name, mins, secs, ute.session_cost,
	     added_info);
	return;
%page;
FILL_IN_ARH:
     procedure (P_ahrp, P_grant_sw);

dcl  P_ahrp pointer parameter;
dcl  P_grant_sw bit (1) aligned parameter;
dcl  p pointer automatic;

	p = P_ahrp;				/* get pointer to audit_record_header */
	p -> audit_record_header.header.type = ARH_TYPE_NO_PROXY;
	p -> audit_record_header.header.version =
	     ACCESS_AUDIT_HEADER_VERSION_3;
	string (p -> audit_record_header.header.flags) = ""b;
	p -> audit_record_header.header.flags.subject_is_process = "1"b;

/* Here, we really should have more information passed to us about whether
   this is a privileged operation or not.  We could set the priv flag if
   we had this information. */

	unspec (event_flags) = ""b;
	event_flags.special_op = "1"b;
	event_flags.grant = P_grant_sw;
	p -> audit_record_header.header.event_flags = unspec (event_flags);
	p -> audit_record_header.header.session_uid = ute.session_uid;
	p -> audit_record_header.subject.person =
	     substr (ute.person, 1,
	     length (p -> audit_record_header.subject.person));
	p -> audit_record_header.subject.project =
	     substr (ute.project, 1,
	     length (p -> audit_record_header.subject.project));
	p -> audit_record_header.subject.tag = ute.tag;
	p -> audit_record_header.subject.ring = ute.initial_ring;
						/* updated later */
	p -> audit_record_header.subject.anonymous = (ute.anonymous = 1);
	p -> audit_record_header.subject.pad3 = ""b;
	p -> audit_record_header.subject.process_id = ute.proc_id;
	p -> audit_record_header.subject.authorization =
	     ute.process_authorization;
	p -> audit_record_header.subject.authorization_range =
	     ute.process_authorization_range;
	return;

     end FILL_IN_ARH;
%page;
Abs_Entry_Name:
     procedure (P_pathname) returns (char (*));

/**** This internal procedure returns the entryname portion of the absentee
      pathname minus the ".absin" suffix. */

dcl  P_pathname char (*) parameter;
dcl  dirname char (168);
dcl  entryname char (32);
dcl  code fixed bin (35);
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));

	call expand_pathname_ (P_pathname, dirname, entryname, code);
	if code ^= 0
	then return ("-invalid-");
	else return (reverse (after (reverse (entryname), "nisba.")));

     end Abs_Entry_Name;
%page;
as_rqt_nt_pnt_chg:
     entry (P_name, P_asrsp, P_code);

	as_request_sender_ptr = P_asrsp;

	call sys_log_$error_log (SL_LOG_SILENT, P_code, P_name,
	     "^[GRANTED^;Rejected^] NOTE_PNT_CHANGE request from ^a.^[  Validation level (^d) not Ring-1.^]",
	     (P_code = 0), as_request_sender.group_id, (P_code ^= 0),
	     as_request_sender.validation_level);

	return;

%page;
asr_com_chn_info_srvr:
     entry (P_name, P_asrsp, P_asrccip, P_code);

	as_request_sender_ptr = P_asrsp;
	asr_com_channel_info_ptr = P_asrccip;

	call sys_log_$error_log (SL_LOG, P_code, ME,
	     "^[GRANTED^;DENIED^] com_channel_info request for ^a on channel ^a.",
	     (P_code = 0), as_request_sender.group_id,
	     asr_com_channel_info.channel_name);

	return;


%page;
dpg_buzzard:
     entry (P_name, P_asrsp, P_code);

	as_request_sender_ptr = P_asrsp;

	call sys_log_$error_log (SL_LOG_SILENT, P_code, P_name,
	     "^[GRANTED^;DENIED^] process_termination_monitor request by ^a.",
	     (P_code = 0), as_request_sender.group_id);

	return;

/* Includes */

/* format: off */
%page; %include access_audit_binary_def;
%page; %include access_audit_bin_header;
%page; %include access_audit_eventflags;
%page; %include as_audit_structures;
%page; %include as_request_header;
%page; %include as_request_sender_;
%page; %include asr_com_channel_info;
%page; %include author_dcl;
%page; %include cdt;
%page; %include sys_log_constants;
%page; %include user_attributes;
%page; %include user_table_entry;
/* format: on */

     end as_access_audit_;
