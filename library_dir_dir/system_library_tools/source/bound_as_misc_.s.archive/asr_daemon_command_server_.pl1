/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-05-13,GJohnson), approve(86-05-13,MCR7387),
     audit(86-05-13,Martinson), install(86-05-14,MR12.0-1055):
     Correct error message documentation.
                                                   END HISTORY COMMENTS */


/* format: style2,idind30 */

asr_daemon_command_server_:
     procedure (ASR_info_ptr, ASR_sender_ptr);

/**** This program handles requests from administrators for
      commands to be sent to daemon processes via the message coordinator */

/**** Written 1985-01-14, BIM: from sc_admin_command_ */
/**** Modified 1985-03-14, E. Swenson: Removes extra NL from message 
      coordinator output. */
/**** Modified 1985-04-04, E. Swenson to send more precise reponse to 
      sender. */

	declare (ASR_info_ptr, ASR_sender_ptr)
				        pointer parameter;

	dcl     acs_mode		        bit (36) aligned;
	dcl     as_error_code	        fixed bin (35);
	dcl     code		        fixed bin (35);

	dcl     daemon_user_manager_$login_   entry (char (*), char (*), char (*), char (*), fixed bin (35));
	dcl     daemon_user_manager_$logout_source_no_access_check
				        entry (char (*), fixed bin (35));
	dcl     mc_wakeups_$reply_command     entry (character (*) var, pointer, fixed binary (21), pointer,
				        fixed binary (35));
	dcl     mc_check_acs_$reply	        entry (character (*), fixed binary (3), character (*), fixed binary (35));
	dcl     mc_check_acs_$log_daemon_in   entry (character (*), fixed binary (3), character (*), fixed binary (35));
	dcl     mc_check_acs_$log_daemon_out  entry (character (*), fixed binary (3), character (*), fixed binary (35));
	dcl     mc_check_acs_$quit	        entry (character (*), fixed binary (3), character (*), fixed binary (35));
	dcl     mc_commands_$reply_command    entry (character (*) var, pointer, fixed binary (21), pointer,
				        fixed binary (35));
	dcl     mc_commands_$quit_command     entry (character (*), pointer, fixed binary (35));

	dcl     sys_log_		        entry options (variable);
	dcl     sys_log_$error_log	        entry options (variable);
	dcl     up_sysctl_$check_acs	        entry (character (*), character (*), fixed binary, bit (36) aligned,
				        fixed binary (35));
	dcl     error_table_$action_not_performed
				        fixed bin (35) ext static;
	dcl     error_table_$badstar	        fixed bin (35) ext static;
	dcl     error_table_$insufficient_access
				        fixed bin (35) ext static;
	dcl     error_table_$ioname_not_found fixed bin (35) external static;
	dcl     error_table_$noentry	        fixed bin (35) external static;
	dcl     error_table_$unimplemented_version
				        fixed bin (35) ext static;
	dcl     error_table_$undefined_order_request
				        fixed bin (35) ext static;

	dcl     cleanup		        condition;


	asr_daemon_command_info_ptr = ASR_info_ptr;
	as_request_sender_ptr = ASR_sender_ptr;
	asr_reply_dc_ptr = addr (as_request_sender.reply_message);
	asr_reply_daemon_command.code = 0;
	asr_reply_daemon_command.flags = "0"b;

	if asr_daemon_command_info.version ^= ASR_DC_INFO_VERSION_1
	then do;
		asr_reply_daemon_command.code = error_table_$unimplemented_version;
		go to ERROR;
	     end;

	if asr_daemon_command_info.action_code ^= ASR_DC_LOGIN & asr_daemon_command_info.action_code ^= ASR_DC_LOGOUT
	     & asr_daemon_command_info.action_code ^= ASR_DC_QUIT & asr_daemon_command_info.action_code ^= ASR_DC_REPLY
	then do;
		asr_reply_daemon_command.code = error_table_$undefined_order_request;
		go to ERROR;
	     end;

	if asr_daemon_command_info.action_code = ASR_DC_LOGIN
	then /* user and project ignored in all other cases */
	     if asr_daemon_command_info.user_name = "*" | asr_daemon_command_info.project_name = "*"
		| asr_daemon_command_info.source_name = "*"
	     then do;
		     asr_reply_daemon_command.code = error_table_$badstar;
		     go to ERROR;
		end;

/**** Can we check an individual ACS, or must we check access to global acs */

	if ^installation_parms.validate_daemon_commands
	then do;					/* check global ACS segment */
		call up_sysctl_$check_acs ("send_daemon_command.acs", as_request_sender.group_id,
		     (as_request_sender.validation_level), acs_mode, code);
		if code ^= 0
		then do;
			call sys_log_$error_log (SL_LOG_SILENT, code, "asr_daemon_command_server_",
			     "Failed to check access for ^a to send_daemon_command.acs.",
			     as_request_sender.group_id);
			asr_reply_daemon_command.code = error_table_$insufficient_access;
			asr_reply_daemon_command.flags.command_refused = "1"b;
			go to ERROR;
		     end;
		if (acs_mode & RW_ACCESS) ^= RW_ACCESS
		then do;
			call sys_log_ (SL_LOG_SILENT,
			     "asr_daemon_command_server_: Denied daemon command for ^a in ring ^d.",
			     as_request_sender.group_id, as_request_sender.validation_level);
			asr_reply_daemon_command.code = error_table_$insufficient_access;
			asr_reply_daemon_command.flags.command_refused = "1"b;
			go to ERROR;
		     end;
	     end;
	else do;					/* We can check specific access of sender to daemon */
		if asr_daemon_command_info.action_code = ASR_DC_LOGIN
		then call mc_check_acs_$log_daemon_in (as_request_sender.group_id,
			(as_request_sender.validation_level), asr_daemon_command_info.source_name,
			asr_reply_daemon_command.code);

		else if asr_daemon_command_info.action_code = ASR_DC_LOGOUT
		then call mc_check_acs_$log_daemon_out (as_request_sender.group_id,
			(as_request_sender.validation_level), asr_daemon_command_info.source_name,
			asr_reply_daemon_command.code);


		else if asr_daemon_command_info.action_code = ASR_DC_REPLY
		then call mc_check_acs_$reply (as_request_sender.group_id, (as_request_sender.validation_level),
			asr_daemon_command_info.source_name, asr_reply_daemon_command.code);

		else if asr_daemon_command_info.action_code = ASR_DC_QUIT
		then call mc_check_acs_$quit (as_request_sender.group_id, (as_request_sender.validation_level),
			asr_daemon_command_info.source_name, asr_reply_daemon_command.code);

		if asr_reply_daemon_command.code ^= 0
		then do;
			asr_reply_daemon_command.flags.no_access_to_daemon = "1"b;
			go to ERROR;
		     end;
	     end;

/**** Okay, the sucker is authorized. Now log the command line. */

	call sys_log_ (SL_LOG,
	     "asr_daemon_command_server_: ^a: ^[LOGIN^;LOGOUT^;QUIT^;REPLY^]^[ ^a.^a^;^s^s^] ^a ^[^a^]",
	     as_request_sender.group_id, asr_daemon_command_info.action_code,
	     asr_daemon_command_info.action_code = ASR_DC_LOGIN, asr_daemon_command_info.user_name,
	     asr_daemon_command_info.project_name, asr_daemon_command_info.source_name,
	     (asr_daemon_command_info.action_code = ASR_DC_LOGIN | asr_daemon_command_info.action_code = ASR_DC_REPLY),
	     rtrim (asr_daemon_command_info.command, byte (10)));

/**** Now, do what the person asked */

	if asr_daemon_command_info.action_code = ASR_DC_LOGIN
	then do;
		call daemon_user_manager_$login_ (asr_daemon_command_info.user_name,
		     asr_daemon_command_info.project_name, asr_daemon_command_info.source_name,
		     asr_daemon_command_info.command, as_error_code);

/**** The following is really low-class.  daemon_user_manager_$login_ returns
      as error table codes which the user will not be able to convert.  Thus
      we convert it for him...in a less-than-optimal way.  A better solution
      would be, perhaps, to use regular error_table_ codes in the AS. */

		if as_error_code ^= 0
		then asr_reply_daemon_command.code = error_table_$action_not_performed;
		else asr_reply_daemon_command.code = 0;
	     end;
	else if asr_daemon_command_info.action_code = ASR_DC_LOGOUT
	then do;
		call daemon_user_manager_$logout_source_no_access_check (asr_daemon_command_info.source_name,
		     asr_reply_daemon_command.code);
		if asr_reply_daemon_command.code = error_table_$noentry
		then asr_reply_daemon_command.no_such_daemon = "1"b;
	     end;
	else if asr_daemon_command_info.action_code = ASR_DC_QUIT
	then do;
		call mc_commands_$quit_command (asr_daemon_command_info.source_name, null (),
		     asr_reply_daemon_command.code);
		if asr_reply_daemon_command.code = error_table_$ioname_not_found
		then asr_reply_daemon_command.no_such_daemon = "1"b;
	     end;
	else if asr_daemon_command_info.action_code = ASR_DC_REPLY
	then do;
		call mc_commands_$reply_command ((asr_daemon_command_info.source_name),
		     addr (asr_daemon_command_info.command), length (asr_daemon_command_info.command), null (),
		     asr_reply_daemon_command.code);
		if asr_reply_daemon_command.code = error_table_$ioname_not_found
		then asr_reply_daemon_command.no_such_daemon = "1"b;
	     end;

ERROR:
	return;


%include as_data_;
%include sys_log_constants;
%include access_mode_values;
%include as_request_header;
%include asr_daemon_command;
%include as_request_sender_;
%include installation_parms;
	declare ip		        pointer defined (as_data_$rs_ptrs (0));

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   asr_daemon_command_server_: PERSON: COMMAND INFO

   S:     $sc

   T:	$run

   M:	A system administrator has sent a for a daemon to the
   Initializer, which executes it.

   A:	$ignore


   Message:
   asr_daemon_command_server_: Failed to check access for USER.

   S:     $sc

   T:	$run

   M:	User USER requested the system to execute a daemon command,
   but validate_daemon_commands was not enabled and 
   the system could not determine their access to the send_daemon_command
   acs.

   A:	$ignore


   Message:
   asr_daemon_command_server_: Denied send_daemon_command for USER in ring RING.

   S:     $sc    

   T:	$run

   M:	User USER requested the system to execute a daemon command,
   but lacked access to >sc1>admin_acs>send_admin_command.acs or the appropriate
   daemon source ACS.

   A:	$ignore


   END MESSAGE DOCUMENTATION */

     end asr_daemon_command_server_;

