/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1987 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-08-01,Coren), approve(87-07-13,MCR7737), audit(87-03-09,GDixon),
     install(87-08-04,MR12.1-1055):
     Initially written.
  2) change(87-03-09,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-24,Brunelle), install(87-08-04,MR12.1-1055):
      A) Correct coding standard errors.
      B) Zero anstbl.ls_request_server_process_id when shutting down.
      C) Initialize connection list manager.
      D) Move initialization of ls_message_buffer out of ls_request_server_
         and into as_init_.
      E) Changed Set_Mseg_Acls to put a correct ACL on the message segment.
      F) Corrects $shutdown deletion of event channel.
  3) change(87-04-23,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-24,Brunelle), install(87-08-04,MR12.1-1055):
      A) Don't diagnose error is $shutdown finds server already down.
      B) Upgraded for change to answer_table.incl.pl1.
  4) change(87-07-14,GDixon), approve(87-07-14,MCR7737),
     audit(87-07-24,Brunelle), install(87-08-04,MR12.1-1055):
      A) Move initialization of network accounting from act_ctl_$init into
         ls_request_server_$init.  We need network accounting ONLY when
         running the login server.
                                                   END HISTORY COMMENTS */

/* format: style4,indattr */

ls_request_server_:
     procedure ();

/* Parameters */

dcl  P_code	        fixed bin (35) parameter;

/* Automatic */

dcl  abort_label	        label automatic;
dcl  code		        fixed bin (35) automatic;
dcl  error_message	        char (500) automatic;
dcl  request_ms_dirname     char (168) automatic;
dcl  request_ms_entryname   char (32) automatic;
dcl  request_ms_pathname    char (168) automatic;
dcl  system_area_ptr        ptr automatic;

/* Based */

dcl  system_area	        area based (system_area_ptr);

/* External */

dcl (error_table_$action_not_performed,
     error_table_$already_initialized,
     error_table_$noentry,
     error_table_$null_info_ptr,
     error_table_$out_of_sequence)
		        fixed bin (35) ext static;

/* Entries */

dcl  fs_util_$replace_acl   entry (char (*), char (*), ptr, bit (1), fixed bin (35));
dcl  get_group_id_	        entry () returns (char (32));
dcl  get_process_id_        entry () returns (bit (36));
dcl  get_temp_segment_      entry (char (*), ptr, fixed bin (35));
dcl  get_system_free_area_  entry () returns (ptr);
dcl  hpriv_connection_list_$init
		        entry (fixed bin (35));
dcl  ipc_$create_ev_chn     entry (fixed bin (71), fixed bin (35));
dcl  ipc_$decl_ev_call_chn  entry (fixed bin (71), entry, ptr,
		        fixed bin, fixed bin (35));
dcl  ipc_$delete_ev_chn     entry (fixed bin (71), fixed bin (35));
dcl  message_segment_$close entry (fixed bin, fixed bin (35));
dcl  message_segment_$create entry (char (*), char (*),
		        fixed bin (35));
dcl  message_segment_$delete entry (char (*), char (*),
		        fixed bin (35));
dcl  message_segment_$open  entry (char (*), char (*), fixed bin,
		        fixed bin (35));
dcl  network_accounting_gate_$clear_table
		        entry (char (*), fixed bin (35));
dcl  network_accounting_gate_$test
		        entry (char (*));
dcl  pathname_	        entry (char (*), char (*)) returns (char (168));
dcl  release_temp_segment_  entry (char (*), ptr, fixed bin (35));
dcl  uc_ls_rq_server_wakeup_ entry (ptr);

/* Constant */

dcl  FALSE	        bit (1) aligned initial ("0"b) internal static options (constant);
dcl  ME		        char (18) initial ("ls_request_server_") internal static options (constant);
dcl  NO_SYSDAEMON	        bit (1) initial ("1"b) internal static options (constant);
dcl  TRUE		        bit (1) aligned initial ("1"b) internal static options (constant);

/* Builtin */

dcl  (addr, dimension, null, unspec)
		        builtin;

/* Conditions */

dcl  cleanup	        condition;
%page;
/* Program */
init:
     entry (P_code);

	abort_label = INIT_RETURN;
	ls_request_server_info_ptr = null ();
	on cleanup
	     call Clean_Up ();

/**** Test if ls_request_server_ is already running in this process. */

	ansp = as_data_$ansp;
	if anstbl.ls_request_server_process_id = anstbl.as_procid then
	     call Abort (SL_LOG_SILENT, error_table_$out_of_sequence,
	     "^/ls_request_server_ is already running.  To stop, type:
ls_request_server stop");

/**** Clear out garbage from previous bootload */

	anstbl.ls_request_server_process_id = ""b;
	anstbl.ls_request_server_event_channel = 0;

	system_area_ptr = get_system_free_area_ ();
	allocate ls_request_server_info in (system_area)
	     set (ls_request_server_info_ptr);

	as_data_$ls_request_server_info_ptr =
	     ls_request_server_info_ptr;

	unspec (ls_request_server_info) = ""b;
	ls_request_server_info.version = LS_REQUEST_SERVER_INFO_VERSION_1;

	call get_temp_segment_ (ME, ls_request_server_info.reply_ptr,
	     code);
	call Abort (SL_LOG_BEEP, code,
	     "Could not get temporary segment for ls reply messages.");

	ls_request_server_info.request_ms.dirname = as_data_$sysdir;
	ls_request_server_info.request_ms.entryname =
	     "login_server_requests.ms";
	ls_request_server_info.request_ms.index = 0;	/* for now */

	call Setup_Message_Segment ();
	call Set_Mseg_Acls ();

	ls_request_server_info.flags.initialized = TRUE;

/* Initialize connection list manager */

	call hpriv_connection_list_$init (code);
	if code = error_table_$already_initialized then code = 0;
	if code ^= 0
	then call Abort (SL_LOG_BEEP, code,
	     "Could not initialize the connection list manager.");


/* Initialize network accounting. */

	if as_data_$debug_flag then
	     call network_accounting_gate_$test (as_data_$sysdir);

	call network_accounting_gate_$clear_table (error_message, code);
	if code ^= 0 then do;
	     call Abort (SL_LOG_BEEP, code,
		"Error from " || error_message);
	end;

INIT_RETURN:
	if code ^= 0 then
	     call Clean_Up ();

	P_code = code;
	return;
%page;
start:
     entry (P_code);

/**** This entry is called to actually start the login server request
      server.  We do this by publishing the login server request server
      info in the answer table. */

	abort_label = START_RETURN;
	code = 0;

	ansp = as_data_$ansp;
	ls_request_server_info_ptr = as_data_$ls_request_server_info_ptr;

	anstbl.ls_request_server_process_id = get_process_id_ ();
	call ipc_$create_ev_chn (anstbl.ls_request_server_event_channel, code);
	call Abort (SL_LOG_BEEP, code,
	     "Creating login server request server IPC event channel");

	call ipc_$decl_ev_call_chn (anstbl.ls_request_server_event_channel,
	     uc_ls_rq_server_wakeup_, ls_request_server_info_ptr, 1 /* priority */, code);
	call Abort (SL_LOG_BEEP, code,
	     "Declaring login server request server IPC channel.");

START_RETURN:
	P_code = code;
	return;
%page;
shutdown:
     entry (P_code);

	abort_label = SHUTDOWN_RETURN;
	ansp = as_data_$ansp;
	if anstbl.ls_request_server_process_id ^= anstbl.as_procid then do;
	     if anstbl.ls_request_server_process_id = ""b then do;
	          code = 0;				/* already down  */
		go to SHUTDOWN_RETURN;
		end;
	     call Abort (SL_LOG_SILENT, error_table_$action_not_performed,
		"Server not in operation.");
	     end;

	ls_request_server_info_ptr = as_data_$ls_request_server_info_ptr;
	if ls_request_server_info_ptr = null () then
	     call Abort (SL_LOG_SILENT, error_table_$null_info_ptr,
		"Server not in operation.");

	ls_request_server_info.flags.initialized = FALSE;

	call release_temp_segment_ (ME, ls_request_server_info.reply_ptr,
	     code);
	if code ^= 0 then
	     call Log_Error (code, "Cannot release ls reply temp segment.");

	call message_segment_$close (
	     ls_request_server_info.request_ms.index, code);
	if code ^= 0 then
	     call Log_Error (code,
		"Could not close ls request message segment.");

	anstbl.ls_request_server_process_id = ""b;
	call ipc_$delete_ev_chn (anstbl.ls_request_server_event_channel,
	     code);
	if code ^= 0 then
	     call Log_Error (code,
		"Could not delete request event channel.");
	anstbl.ls_request_server_event_channel = 0;

SHUTDOWN_RETURN:
	P_code = code;
	return;
%page;
Setup_Message_Segment:
     procedure ();

	request_ms_dirname = ls_request_server_info.request_ms.dirname;
	request_ms_entryname = ls_request_server_info.request_ms.entryname;
	request_ms_pathname = pathname_ (request_ms_dirname,
	     request_ms_entryname);

	call message_segment_$delete (request_ms_dirname,
	     request_ms_entryname, code);
	if code ^= 0 then
	     if code ^= error_table_$noentry then
		call Abort (SL_LOG_BEEP, code,
		     "Deleting message segment ^a.",
		     request_ms_pathname);

	call message_segment_$create (request_ms_dirname,
	     request_ms_entryname, code);
	call Abort (SL_LOG_BEEP, code, "Creating message segment ^a.",
	     request_ms_pathname);

	call message_segment_$open (request_ms_dirname, request_ms_entryname,
	     ls_request_server_info.request_ms.index, code);
	call Abort (SL_LOG_BEEP, code, "Opening message segment ^a.",
	     request_ms_pathname);

     end Setup_Message_Segment;
%page;
Set_Mseg_Acls:
     procedure ();

dcl  1 ms_acl	        aligned,			/* like general_acl */
       2 version	        char (8) aligned,
       2 count	        fixed bin,
       2 entries	        (6) like general_acl_entry;

	acl_ptr = addr (ms_acl);
	general_acl.version = GENERAL_ACL_VERSION_1;
	general_acl.count = dimension (ms_acl.entries, 1);
	general_acl.entries (1).access_name = get_group_id_ ();
	general_acl.entries (1).mode = MSEG_QUEUE_CREATOR_INITIAL_ACCESS;
	general_acl.entries (1).status_code = 0;
	general_acl.entries (2).access_name = "*.SysDaemon.*";
	general_acl.entries (2).mode = MSEG_QUEUE_SYSDAEMON_INITIAL_ACCESS;
	general_acl.entries (2).status_code = 0;
	general_acl.entries (3).access_name = "Login_Server.Daemon.*";
	general_acl.entries (3).mode = MSEG_QUEUE_USER_ACCESS;
	general_acl.entries (3).status_code = 0;
	general_acl.entries (4).access_name = "*.SysAdmin.*";
	general_acl.entries (4).mode = MSEG_QUEUE_ADMIN_ACCESS;
	general_acl.entries (4).status_code = 0;
	general_acl.entries (5).access_name = "*.SysMaint.*";
	general_acl.entries (5).mode = MSEG_QUEUE_ADMIN_ACCESS;
	general_acl.entries (5).status_code = 0;
	general_acl.entries (6).access_name = "*.*.*";
	general_acl.entries (6).mode = MSEG_QUEUE_OTHERS_INITIAL_ACCESS;
	general_acl.entries (6).status_code = 0;

	call fs_util_$replace_acl (request_ms_dirname, request_ms_entryname,
	     addr (general_acl), NO_SYSDAEMON, code);
	call Abort (SL_LOG_BEEP, code,
	     "Replacing ACL on message segment ^a.", request_ms_pathname);
	return;
     end Set_Mseg_Acls;
%page;
Clean_Up:
     procedure ();

	if ls_request_server_info_ptr ^= null () then do;
	     free ls_request_server_info;
	     as_data_$ls_request_server_info_ptr = null ();
	end;
	return;
     end Clean_Up;
%page;
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Abort:  report errors via sys_log_$general.			       */
/*							       */
/* Syntax:  call Abort (severity, code, ioa_ctl, args);		       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

Abort:
     procedure options (variable);

dcl  cu_$arg_list_ptr       entry returns (ptr);
dcl  sys_log_$general       entry (ptr);

	sl_info = sl_info_sev_code_msg;
	sl_info.caller = ME;
	sl_info.arg_list_ptr = cu_$arg_list_ptr ();
	call sys_log_$general (addr (sl_info));
	code = sl_info.code;
	if code ^= 0 then go to abort_label;

     end Abort;

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Log_Error: report error silently via sys_log_$general, but continue       */
/* execution.						       */
/*							       */
/* Syntax:  call Log_Error (code, ioa_ctl, args);			       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

Log_Error:
     procedure options (variable);

dcl  cu_$arg_list_ptr       entry returns (ptr);
dcl  sys_log_$general       entry (ptr);

	sl_info = sl_info_code_msg;
	sl_info.caller = ME;
	sl_info.arg_list_ptr = cu_$arg_list_ptr ();
	call sys_log_$general (addr (sl_info));

     end Log_Error;

/* format: off */
%page; %include acl_structures;
%page; %include answer_table;
%page; %include as_data_;
%page; %include ls_request_server_info;
%page; %include mseg_access_mode_values;
%page; %include sys_log_constants;
%page; %include user_table_header;

end ls_request_server_;
