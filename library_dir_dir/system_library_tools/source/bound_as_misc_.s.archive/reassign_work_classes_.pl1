/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4 */
reassign_work_classes_: proc (a_code);

/* This procedure set the work_class of each process to the
   proper value for the current shift, and defines the set of work_classes
   which are to be in effect for the current shift.  It is called by the
   Answering Service process at shift change time and whenever a new
   master_group_table (MGT) is installed or the operator executes the
   "maxu auto" command". */

/* Last modified date & reason: */
/* Coded July 8, 1975 by RE Mullen for Priority Scheduler */
/* Mod by RE Mullen, Summer '76 for Deadline Scheduler */
/* Modified May 1981, E. N. Kittlitz, assign daemons according to interactive specification */
/* Modified July 1981 by J. Bongiovanni for max_pct (governed work classes) */
/* Modified November 1981, E. N. Kittlitz.  user_table_entry conversion. */
/* Modified May 1982, E. N. Kittlitz. New AS initialization. */

/****^  HISTORY COMMENTS:
  1) change(86-05-13,GJohnson), approve(86-05-13,MCR7387),
     audit(86-05-13,Martinson), install(86-05-14,MR12.0-1055):
     Correct error message documentation.
  2) change(87-03-11,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-21,Hartogs), install(87-08-04,MR12.1-1055):
     Correct coding standard violations.  Support AS test mode by suppressing
     some operations when invoked in a test AS.
  3) change(87-04-26,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-21,Hartogs), install(87-08-04,MR12.1-1055):
     Upgraded for change to answer_table.incl.pl1 and user_table_entry.incl.pl1
                                                   END HISTORY COMMENTS */

dcl  a_code fixed bin (35);

dcl  ALL_IN_ONE bit (1) aligned;			/* "1"b => all processes go in first workclass */
dcl  code fixed bin (35);
dcl  curshift fixed bin;
dcl  force_compromise bit (1) aligned;			/* "1"b => call DEFINE_COMPROMISE if trouble */
dcl  i fixed bin;

dcl  1 new_wci like work_class_info aligned;

dcl  hphcs_$define_work_classes entry (ptr, fixed bin (35));
dcl  hphcs_$set_process_work_class entry (bit (36) aligned, fixed bin, fixed bin, fixed bin (35));
dcl  sys_log_ entry options (variable);

dcl (default_r1 init (4000000),			/* 4 seconds */
     default_q1 init (500000),			/* half second */
     default_r2 init (32000000),			/* 32 seconds */
     default_q2 init (1000000)) fixed bin (35) int static options (constant); /* one second */

dcl (error_table_$action_not_performed,
     error_table_$bad_processid,
     error_table_$bad_work_class) ext static fixed bin (35);

dcl  (addr, null, unspec) builtin;

/* END DCL */

/* First copy static pointers into automatic. */

	ansp = as_data_$ansp;
	autp = as_data_$autp;
	dutp = as_data_$dutp;

	code = 0;					/* Zero status code for now */

/* Make sure we know about this kind of MGT */

	if mgt.version_indicator ^= "VERSION " then go to MAIN_RETURN;
	else if mgt.version < MGT_version_3 - 1 then go to MAIN_RETURN;

/* Make sure priority scheduler exists. */

	if mgt.switches.prio_sked_on_tape = "0"b then go to MAIN_RETURN; /* If not, forget it. */

/* Now get the current shift. */

	curshift = anstbl.shift;


/* Gather info about new work_classes into new_wci structure. */
/* This will be used (but not modified) by GET_WC */
/* Later new_wci will be passed to the hardcore. */

	unspec (new_wci) = ""b;			/* clear structure */
	new_wci.version = WCI_version_3;
	new_wci.set_user_wc = "1"b;

	ALL_IN_ONE = "1"b;				/* Assume no workclasses defined. */

	if mgt.prio_sked_enabled then do;		/* There might be some defined. */
	     do i = 1 to 16;
		mgtep = addr (mgt.entry (i));
		new_wci.user_wc_defined (i) = work_class.defined (curshift);
		if new_wci.user_wc_defined (i) = "1"b then ALL_IN_ONE = "0"b;
		new_wci.user_wc_min_pct (i) = work_class.min_pct (curshift);
	     end;
	     if ALL_IN_ONE then do;			/* No wc defined, should've been. */
		call sys_log_ (2, "reassign_work_classes_: no work classes defined on current shift.");
	     end;
	end;

	if ALL_IN_ONE then do;			/* No wc defined or not to enable priosked. */
	     do i = 1 to 16;
		if i = 1 then do;
		     new_wci.user_wc_defined (i) = "1"b;/* only first defined. */
		     new_wci.user_wc_min_pct (i) = 100; /* Has whole machine. */
		end;
		else do;
		     new_wci.user_wc_defined (i) = "0"b;
		     new_wci.user_wc_min_pct (i) = 0;
		end;
	     end;
	end;

	do i = 1 to 16;				/* set at least default deadlines */
	     mgtep = addr (mgt.entry (i));		/* get ptr to workclass */
	     if mgt.version >= MGT_version_3		/* can use admin specified */
		& ^ALL_IN_ONE
		& mgt.prio_sked_enabled
		& new_wci.user_wc_defined (i) then do;
						/* one 1/100 sec = 10000 microsec */
		new_wci.resp1 (i) = 10000 * work_class.int_response (curshift);
		new_wci.quantum1 (i) = 10000 * work_class.int_quantum (curshift);
		new_wci.resp2 (i) = 10000 * work_class.response (curshift);
		new_wci.quantum2 (i) = 10000 * work_class.quantum (curshift);
		new_wci.realtime (i) = work_class.realtime (curshift);
		new_wci.governed (i) = (work_class.max_pct (curshift) > 0);
		new_wci.user_wc_max_pct (i) = work_class.max_pct (curshift);
	     end;
	     else do;				/* use defaults */
		new_wci.resp1 (i) = default_r1;
		new_wci.quantum1 (i) = default_q1;
		new_wci.resp2 (i) = default_r2;
		new_wci.quantum2 (i) = default_q2;
		new_wci.governed (i) = "0"b;
		new_wci.user_wc_max_pct (i) = 0;
	     end;
	end;

	if mgt.version >= MGT_version_3 & mgt.prio_sked_enabled then do;
	     new_wci.set_sked_mode = "1"b;
	     new_wci.deadline_mode = mgt.deadline_mode (curshift);
	end;

/* Compute new value of workclass for each user now logged in. */
/* Note: GET_WC will verify that the work_class will be defined. */

	mgtep = addr (mgt.entry (17));		/* Initialize GET_WC's assoc mem */

	do i = 1 to anstbl.current_size;
	     utep = addr (anstbl.entry (i));		/* get ptr to answer table entry */
	     call GET_WC;
	end;

	do i = 1 to dutbl.current_size;
	     utep = addr (dutbl.entry (i));		/* get ptr to daemon table entry */
	     call GET_WC;
	end;

	do i = 1 to autp -> autbl.current_size;
	     utep = addr (autp -> autbl.entry (i));	/* get ptr to autbl entry */
	     call GET_WC;
	end;


/* We now know that it is indeed possible to move all users
   to their new work_class and define a new set of work classes.
   There should be no furthur errors.  If there are
   it implies either somebody else is calling the hardcore in which case
   this procedure can be called again and probably succeed, or
   something is busted in which case we can be called again and fail. */

/* Define an all-inclusive set of work classes. */

	call DEFINE_COMPROMISE;


/* Move all users to new work_classes */

	force_compromise = "1"b;
	call MOVE_USERS;


/* Define new set of work classes. */

	if ^as_data_$debug_flag then do;
	     call hphcs_$define_work_classes (addr (new_wci), code);
	     if code ^= 0 then do;
		if new_wci.error_process_id ^= ""b then do; /* Point finger at guilty one. */
		     call sys_log_ (1, "reassign_work_classes_: process ^w remained in work class ^d.",
			new_wci.error_process_id, new_wci.error_work_class);
		end;
	     end;
	     go to MAIN_RETURN;
	end;


/* Force hardcore to rethread with new work_class definitions extant */

	force_compromise = "0"b;			/* no use compromise if swc fails */
	call MOVE_USERS;


/* Now reflect new work classes in mgt header. */

	mgt.user_wc_defined (*) = new_wci.user_wc_defined (*);
	mgt.user_wc_min_pct (*) = new_wci.user_wc_min_pct (*);


MAIN_RETURN:					/* Come here to return to caller */
	a_code = code;
	return;					/* return from main proc here if not sooner */



/* ==================================================================== */

GET_WC: proc;					/* IP to set ate.work_class from ate.group & mgt */

dcl  j fixed bin;
dcl  wc fixed bin;
	if ute.active >= NOW_HAS_PROCESS then do;
	     if ute.proc_id = anstbl.as_procid then return; /* Dont bother Initializer */

	     if ALL_IN_ONE then do;			/* Want all users in first work_class */
		wc = 1;				/* So be it. */
	     end;
	     else do;
		if ute.group ^= group.group_id then do; /* do lookup if grp not same as prev. */
		     do j = 17 to mgt.current_size;
			mgtep = addr (mgt.entry (j));
			if ute.group = group.group_id then go to gwc_got_grp;
		     end;
						/* here we should not be */
		     call sys_log_ (2, "reassign_work_classes_: load control group ""^a"" not found in mgt for user ^a.^a.^a.",
			ute.group, ute.person, ute.project, ute.tag);
		     go to gwc_abort;
		end;

gwc_got_grp:
		if ute.queue <= 0			/* Pick up new wc from approp place */
		then wc = group.int_wc (curshift);
		else wc = group.abs_wc (curshift);


		if new_wci.user_wc_defined (wc) = "0"b then do; /* Trouble */
		     call sys_log_ (2, "reassign_work_classes_: undefined work_class ^d required by load_control_group ^a", wc, ute.group);
gwc_abort:
		     call sys_log_ (2, "reassign_work_classes_: mgt clobbered, contact system administrator.");
		     code = error_table_$action_not_performed;
		     go to MAIN_RETURN;		/* Abort now. */
		end;
	     end;

	     ute.work_class = wc;			/* Tell rest of Answering Service */

	end;
     end GET_WC;

/* ================================================================ */


MOVE_USERS: proc;


/* Move all users with processes to new work_classes. */

	do i = 1 to anstbl.current_size;
	     utep = addr (anstbl.entry (i));		/* get ptr to answer table entry */
	     call SET_WC;
	end;

	do i = 1 to dutbl.current_size;
	     utep = addr (dutbl.entry (i));		/* get ptr to daemon table entry */
	     call SET_WC;
	end;


	do i = 1 to autp -> autbl.current_size;
	     utep = addr (autp -> autbl.entry (i));	/* get ptr to autbl entry */
	     call SET_WC;
	end;


     end MOVE_USERS;


/* ========================================================== */


SET_WC: proc;					/* IP to set hardcore wc from ate.work_class */

dcl  wc fixed bin;
dcl  old_wc fixed bin;

	if ute.active >= NOW_HAS_PROCESS then do;	/* Tell hardcore */

	     if ute.proc_id = anstbl.as_procid then return; /* Dont bother Initializer */

	     wc = ute.work_class;
	     if ^as_data_$debug_flag then do;
		call hphcs_$set_process_work_class (ute.proc_id, wc, old_wc, code);
		if code = 0 then ;
		else if code = error_table_$bad_work_class then do; /* Somebody undid compromise set */
		     if ^force_compromise then go to MAIN_RETURN; /* have failed */
		     call DEFINE_COMPROMISE;		/* Willing to retry this once */
		     call hphcs_$set_process_work_class (ute.proc_id, wc, old_wc, code);
		     if code ^= 0 then
			go to MAIN_RETURN;
		end;
		else if code = error_table_$bad_processid then
		     code = 0;			/* So What. */
		else				/* New errcode invented? */
		     go to MAIN_RETURN;
	     end;
	end;


     end SET_WC;
%page;
DEFINE_COMPROMISE: proc;				/* IP to define all 16 work classes */

dcl  dci fixed bin;


dcl  1 com_wci like work_class_info aligned;

	unspec (com_wci) = ""b;			/* clear structure */
	com_wci.set_user_wc = "1"b;			/* set user work classes */
	com_wci.set_sked_mode = "1"b;			/* Force the mode, */
	com_wci.deadline_mode = "0"b;			/* to percent mode for safety */
	do dci = 1 to 16;
	     com_wci.user_wc_defined (dci) = "1"b;	/* all user wc will be defined */
	     com_wci.user_wc_min_pct (dci) = 6;		/* each wc given 6% */
	     com_wci.resp1 (dci) = default_r1;
	     com_wci.quantum1 (dci) = default_q1;
	     com_wci.resp2 (dci) = default_r2;
	     com_wci.quantum2 (dci) = default_q2;
	     com_wci.realtime (dci) = "0"b;
	     com_wci.governed (dci) = "0"b;
	     com_wci.user_wc_max_pct (i) = 0;
	end;
	com_wci.version = WCI_version_3;		/* set version number */

	if ^as_data_$debug_flag then do;
	     call hphcs_$define_work_classes (addr (com_wci), code);
	     if code ^= 0 then do;			/* Heads will roll. */
		go to MAIN_RETURN;
	     end;
	end;

     end DEFINE_COMPROMISE;

%page; %include absentee_user_table;
%page; %include answer_table;
%page; %include as_data_;
%page; %include as_data_definitions_;
%page; %include dialup_values;
%page; %include daemon_user_table;
%page; %include mgt;
%page; %include user_attributes;
%page; %include user_table_entry;
%page; %include user_table_header;
%page; %include work_class_info;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   reassign_work_classes_: load control group "XXX" not found in mgt for user PERSON.PROJECT.TAG.
   .br
   reassign_work_classes_: mgt clobbered, contact system administrator.

   S:	as (severity2).

   T:	At shift change time, or after a "maxu auto" command.

   M:	Some logged in user's load control group has apparently disappeared
   from the mgt.  If the load control group specified in the message is valid, then
   the mgt has been destroyed.  Otherwise, the user's answer table entry
   has been destroyed.  All users will remain in their current work classes.

   A:	$contact_sa


   Message:
   reassign_work_classes_: undefined work class DD required by load control group XXX
   .br
   reassign_work_classes_: mgt clobbered, contact system administrator.

   S:	as (severity2)

   T:	At shift change time, or after a "maxu auto" command.

   M:	There is an inconsistency in the mgt.  Probably the mgt has been destroyed.
   All users will remain in their current work class.

   A:	$contact_sa


   Message:
   reassign_work_classes_: process NNN remained in work class NN

   S:	as (severity1)

   T:	At shift change time, or after a "maxu auto" command.

   M:	Some privileged user has interfered with the Answering Service's
   attempt to define a new set of work classes.  The Answering Service will
   automatically retry the reassignment of work classes.

   A:	$ignore


   Message:
   reassign_work_classes_: no work classes defined on current shift.

   S:	as (severity2)

   T:	At shift change time, or after a "maxu auto" command.

   M:	The table in the mgt that should define the work classes for the
   current shift has not been filled in.  Probably a new shift has been added to
   the installation_parms segment, but the work classes for that shift have
   not been specified in the mgt.  All users will be placed in a single work class.

   A:	$ignore

   END MESSAGE DOCUMENTATION */

     end reassign_work_classes_;

