/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-05-13,GJohnson), approve(86-05-13,MCR7387),
     audit(86-05-13,Martinson), install(86-05-14,MR12.0-1055):
     Correct error message documentation.
  2) change(87-03-11,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-24,Brunelle), install(87-08-04,MR12.1-1055):
     Correct coding standard violations.
  3) change(87-05-06,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-24,Brunelle), install(87-08-04,MR12.1-1055):
     Disable stringsize checking when assigning input parameter.  Caller may
     have passed a long string.
                                                   END HISTORY COMMENTS */

/* format: style4 */
as_dump_: proc (dumpid);

/* AS_DUMP_ - program to take off line dump of answering service stack.
   Modified 750210 by PG to try to cleanup after aborted dump.
   Modified January 1978 by T. Casey to try once more after an aborted dump so we can see why it aborted.
   Modified August 1981 by E. N. Kittlitz to not use mc until as_init_ says
   it is ok.
   Modified May 1982 by E. N. Kittlitz. New AS initialization.
   Modified Spetember 1982 by E. N. Kittlitz. USE static_dump_dir.
   Modified 1985-03-06, BIM: call trace_stack_$hregs
   Modified 1985-03-18, E. Swenson to pass signal_io_ condition.
*/

/* parameter */

dcl  dumpid char (*) parameter;			/* anything caller wants to say */

/* Automatic */

dcl  abort label;					/* escape route */
dcl  argl fixed bin (21);
dcl  argp ptr;
dcl  datstr char (24);
dcl  dir char (168);				/* where the dump goes */
dcl  dir_dumpid char (256) varying;			/* dump dir + dumpid for messages */
dcl  doing_stack_trace bit (1) aligned init (""b);
dcl  ec fixed bin (35);
dcl  error_entry entry variable options (variable);
dcl  i fixed bin;
dcl  iocbp ptr;
dcl  iqct fixed bin;
dcl  outname char (32);
dcl  quota fixed bin;
dcl  sp ptr;
dcl  taccsw fixed bin (1);
dcl  trp fixed bin (35);
dcl  tup bit (36) aligned;
dcl  ucs_recursion fixed bin initial (0);		/* trouble in as_dump_ counter */
dcl  use_r0m bit (1) aligned;				/* use phcs_ ("1"b)or use the Message Coord ("0"b) */
dcl  used fixed bin;

/* internal static */

dcl  ENOUGH fixed bin int static init (64);
dcl  STREAM char (32) int static init ("as_dump_stream_");
dcl  static_dump_dir char (168) static internal init ("");

/* based */

dcl  arg char (argl) based (argp);

/* entries */

dcl  absolute_pathname_ entry (char (*), char (*), fixed bin (35));
dcl  com_err_ entry options (variable);
dcl  condition_ entry (char (*), entry);
dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  cu_$stack_frame_ptr entry (ptr);
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  dprint_ entry (char (*), char (*), ptr, fixed bin (35));
dcl  hcs_$quota_get entry (char (*), fixed bin, fixed bin (35), bit (36) aligned, fixed bin, fixed bin (1), fixed bin, fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  ioa_$ioa_switch entry () options (variable);
dcl  iox_$attach_ptr entry (ptr, char (*), ptr, fixed bin (35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  iox_$find_iocb entry (char (*), ptr, fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  pathname_ entry (char (*), char (*)) returns (char (168));
dcl  phcs_$ring_0_message entry (char (*));
dcl  sys_log_ entry options (variable);
dcl  sys_log_$error_log entry options (variable);
dcl  trace_stack_$hregs entry (ptr, fixed bin, fixed bin, char (32) aligned, fixed bin);

/* builtins */

dcl  (addr, clock, null, rtrim, substr) builtin;

/* ====================================================== */

/* When taking an as_dump, we don't want to use portions of the AS of which
   we are not certain. During initialization, our problems might be due
   to something in the message coordinator, so we elect to not use the mc.
   After as_init_ has run, and sc_stat_$Multics is set at the end of initialization,
   we will avoid the MC only when we are dumping the MC itself (indicated by
   the user calling the dump_mc entry. */

	use_r0m = ^sc_stat_$Multics;			/* as as_init_ goes... */
	go to common;

dont_use_mc:					/* use ring_0_message for all console messages */
dump_mc:						/* this entry-name retained for compatibility */
     entry (dumpid);				/* Entry called from message coordr */

	use_r0m = "1"b;

common:
	if ^sc_stat_$test_mode then
	     error_entry = phcs_$ring_0_message;
	else error_entry = ioa_;

	abort = try_to_cleanup;			/* if get error while dumping, try to finish up */
	iocbp = null;
	call condition_ ("any_other", errx);		/* No recursion! */

	if static_dump_dir ^= "" then
	     dir = static_dump_dir;			/* something specific? */
	else dir = sc_stat_$sysdir;			/* no use default place */

	dir_dumpid = rtrim (dir) || " ";		/* set-up for
messages */
(nostringsize):
	dir_dumpid = dir_dumpid || dumpid;		/* directory name and dump identifier */
	call hcs_$quota_get (dir, quota, trp, tup, iqct, taccsw, used, ec);
	if ec ^= 0 then do;
	     if use_r0m then
		call error_entry ("as_dump_: Cannot obtain quota, dump aborted. " || dir_dumpid);
	     else call sys_log_$error_log (1, ec, "as_dump_", "Cannot obtain quota, dump aborted. ^a", dir_dumpid);
	     return;
	end;
	if quota ^= 0 then				/* Make sure there is room for the dump. */
	     if (quota - used) < ENOUGH then do;
		if use_r0m
		then call error_entry ("as_dump_: Out of room for dump " || dir_dumpid);
		else call sys_log_ (1, "as_dump_: Out of room for dump ^a", dir_dumpid);
		return;
	     end;
	call date_time_ (clock (), datstr);
	outname = "asdump.-." || substr (datstr, 1, 8) || "-" || substr (datstr, 11, 4);
	call iox_$find_iocb (STREAM, iocbp, ec);
	if ec ^= 0 then do;
attach_fail:   if use_r0m
	     then call error_entry ("as_dump_: Cannot attach I/O switch. No dump " || dir_dumpid);
	     else call sys_log_$error_log (1, ec, "as_dump_", "Cannot attach ^a to ^a. No dump ^a",
		     STREAM, outname, dir_dumpid);
	     return;
	end;
	call iox_$close (iocbp, (0));
	call iox_$detach_iocb (iocbp, (0));
	call iox_$attach_ptr (iocbp, "vfile_ " || pathname_ (dir, outname), null (), ec);
	if ec ^= 0 then go to attach_fail;
	call iox_$open (iocbp, Stream_output, ""b, ec);
	if ec ^= 0 then go to attach_fail;
	call ioa_$ioa_switch (iocbp, "^a  ^a^2/", datstr, dumpid);
	call cu_$stack_frame_ptr (sp);
	doing_stack_trace = "1"b;
	call trace_stack_$hregs (sp, 2, -1, (STREAM), 1);
	doing_stack_trace = ""b;
	call ioa_$ioa_switch (iocbp, "^/End of dump.^/");

try_to_cleanup:
	abort = just_return;			/* any errors from now on will return and not try to cleanup */
	if iocbp ^= null then do;
	     call iox_$close (iocbp, (0));
	     call iox_$detach_iocb (iocbp, (0));
	end;
	dpap = addr (dprint_arg_buf);			/* Set up to print segment. */
	dprint_arg.version = 1;
	dprint_arg.copies = 1;
	dprint_arg.delete = 0;
	dprint_arg.queue = 1;
	dprint_arg.pt_pch = 1;
	dprint_arg.notify = 0;
(nostringsize):
	dprint_arg.heading = " for asdump " || dumpid;
	dprint_arg.output_module = 1;
	dprint_arg.dest = "SysAdmin";

/**** Don't submit a dprint request for ASDUMP when we are debugging the
      answering service. */

	if ^sc_stat_$test_mode then
	     call dprint_ (dir, outname, dpap, ec);	/* Request IO daemon to print the dump. */

	if use_r0m
	then call error_entry ("as_dump_: Message coordinator dump created in segment " || outname);
	else call sys_log_ (1, "as_dump_: Answering service dump created in segment ^a", outname);
just_return:
	return;
%page;
set_as_dump_dir:
     entry options (variable);			/* establish residence of dumps */

dcl  reason char (64);

	reason = "Usage: as_$set_as_dump_dir <directory_path>";
	call cu_$arg_count (i, ec);
	if i ^= 1 | ec ^= 0 then do;
sdd_error:     call com_err_ (ec, "as_dump_$set_as_dump_dir", reason);
	     return;
	end;
	call cu_$arg_ptr (1, argp, argl, ec);		/* must have 1 arg */
	if ec ^= 0 then do;				/* how could this happen? */
	     call com_err_ (ec, "as_dump_$set_as_dump_dir", reason);
	     return;
	end;

	if arg = "" | arg = "-none" then do;
	     static_dump_dir = "";			/* indicate we should use working dir at time of fault */
	     return;
	end;

	reason = arg;
	call absolute_pathname_ (arg, dir, ec);		/* make sure it's absolute */
	if ec ^= 0 then go to sdd_error;		/* oh dear */
	reason = "getting quota";			/* make sure we can do this much later */
	call hcs_$quota_get (dir, quota, trp, tup, iqct, taccsw, used, ec);
	if ec ^= 0 then go to sdd_error;		/* but don't worry about actual quota */
	static_dump_dir = dir;			/* good enough to remember */
	return;
%page;
errx: proc (mcptr, cname, coptr, infoptr, cont);

dcl  (mcptr, coptr, infoptr) ptr, cname char (*), cont bit (1);

/* automatic */

dcl  reason char (64);
dcl  ucs_sp ptr;
dcl  try_again bit (1) aligned;

/* program */

	try_again = doing_stack_trace;		/* keep plugging to limit of recursion */
	if cname = "cleanup" then return;
	if cname = "storage" then go to foo;
	if cname = "command_error" then go to foo;
	if cname = "stack" then go to foo;
	if cname = "finish" then go to foo;
	if cname = "mme2" then go to foo;
	if cname = "cput" then go to foo;
	if cname = "alrm" then go to foo;
	if cname = "program_interrupt" then go to foo;
	if cname = "signal_io_" then go to foo;
	if cname = "quit" then do;
foo:	     cont = "1"b;
	     return;
	end;

	ucs_recursion = ucs_recursion + 1;
	if ucs_recursion <= 2 then do;
	     reason = "as_dump_: " || cname || " while dumping. Dump aborted.";
	     if ucs_recursion = 2 then do;		/* definitely the last time */
		use_r0m = "1"b;			/* don't use MC */
		try_again = "1"b;			/* remember to try */
	     end;
	     if use_r0m then			/* tell SOMEBODY */
		call error_entry (reason);
	     else call sys_log_ (1, reason);
	     if try_again then do;			/* once more? */
		call cu_$stack_frame_ptr (ucs_sp);
		call trace_stack_$hregs (ucs_sp, 2, -1, (STREAM), 1);
	     end;
	end;

	go to abort;

     end;

/* format: off */
%page; %include dprint_arg;
%page; %include iox_modes;
%page; %include sc_stat_;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   as_dump_: Answering service dump created in segment >sc1>asdump.-.MM/DD/YY-HHMM

   S:	as (severity1)

   T:	$run

   M:	Some program has encountered an unexpected fault and has
   called for a dump of the Answering Service.  This segment
   is automatically dprinted.

   A:	$ignore


   Message:
   as_dump_: Message coordinator dump created in segment >sc1>asdump.-.MM/DD/YY-HHMM

   S:	$info

   T:	$run

   M:	Some program has encountered an unexpected fault and has
   called for a dump of the message coordinator. This segment
   is automatically dprinted.

   A:	$ignore


   Message:
   as_dump_: CONDITION while dumping.  Dump aborted

   S:	as (severity1)

   T:	$run

   M:	During the attempt to perform an Answering Service dump, some
   unexpected fault occurred.  The dump is stopped and the system tries to continue.

   A:	Notify the system programming staff.


   Message:
   as_dump_: ERROR_MESSAGE.  Cannot attach as_dump_stream_ to FILENAME.  No dump asdump.MM/DD/YY-HHMM

   S:	as (severity1)

   T:	$run

   M:	The Answering Service dump program could not attach a file
   for the Answering Service dump.  The dump will abort, and the system
   will continue.

   A:	$inform


   Message:
   as_dump_: ERROR_MESSAGE. Cannot obtain quota of >sc1, dump aborted. DUMPID

   S:	as (severity2)

   T:	$run

   M:	An error occurred while dumping.
   No dump was taken.

   A:	$inform


   Message:
   as_dump_: Out of room for dump DUMPID

   S:	as (severity2)

   T:	$run

   M:	An error occurred while dumping.
   No dump was taken.

   A:	$inform


   Message:
   as_dump_: Cannot obtain quota, dump aborted. NAME

   S:	as (severity2)

   T:	$run

   M:	An error occurred while dumping.
   No dump was taken.

   A:	$inform


   Message:
   as_dump_: Cannot attach I/O switch. No dump NAME

   S:	as (severity2)

   T:	$run

   M:	An error occurred while dumping.
   No dump was taken.

   A:	$inform


   END MESSAGE DOCUMENTATION */

     end;
