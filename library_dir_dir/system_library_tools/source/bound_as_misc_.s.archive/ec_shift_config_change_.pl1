/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(87-06-02,Parisek), approve(86-04-17,MCR7715),
     audit(87-08-06,Fawcett), install(87-08-11,MR12.1-1080):
     Establish the system_control ssu_subsystem_info_ptr so this
     procedure will properly work in the system control environment.
  2) change(87-08-18,Parisek), approve(87-08-18,PBF7715),
     audit(87-09-03,Farley), install(87-09-10,MR12.1-1104):
     Remove unnecessary sc_subsystem_info_ references.
  3) change(87-09-17,Parisek), approve(87-09-18,PBF7715),
     audit(87-09-18,Farley), install(87-09-21,MR12.1-1111):
      a. Remove reference to sc_stat_$master_sci_ptr.
      b. Create our own sci ptr and set sc_stat_$admin_sci_ptr equal to our
         sci_ptr.
      c. Get sc_subsystem_info_ptr based on our new sc_stat_$admin_sci_ptr
         value.
      d. Set sc_subsystem_info.real_iocb to sc_stat_$master_iocb for
         signal_io_.
                                                   END HISTORY COMMENTS */


/* format: style4 */
ec_shift_config_change_: proc (sysdir, old, new, auto_maxu, ncpu, nkmem, nbulk);

/* Procedure to execute shift_config_change.ec, passing the old and new shift,
   the auto_maxu switch, and the configuration parameters: cpu, mem, and bulk,
   with an any_other handler set up to catch any errors in the exec_com and not
   let them abort whatever the caller might be doing (e.g., an accounting update).

   Written by T. Casey, May 1978
   Modified by E. N. Kittlitz, November 1982, first shot at as_check_condition_.

*/

dcl  sysdir char (*);				/* dir where shift_config_change.ec should be */
dcl  (old, new, auto_maxu, ncpu, nkmem, nbulk) fixed bin;	/* old and new shift, and load control parameters */

dcl  as_dump_ entry (char (*));
dcl  condition_ entry (char (*), entry);
dcl  cleanup condition;
dcl  call_ec_ entry options (variable);
dcl  hcs_$status_minf entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35));
dcl  ioa_$rsnnl entry options (variable);
dcl  sc_create_sci_ entry (ptr, fixed bin (35));
dcl  sc_create_sci_$destroy entry (ptr);
dcl  ssu_$get_info_ptr entry (ptr) returns (ptr);
dcl  sys_log_ entry options (variable);
dcl  sys_log_$error_log entry options (variable);

dcl  code fixed bin (35);
dcl  bc fixed bin (24);
dcl  entry_type fixed bin (2);
dcl  saved_admin_sci_ptr ptr;
dcl  sci_ptr ptr;
		     
dcl  seg_type fixed bin int static options (constant) init (1);

dcl  (char, ltrim, rtrim, null) builtin;


/* See if there is a shift_config_change.ec (there doesn't have to be) */

	call hcs_$status_minf (sysdir, "shift_config_change.ec", (1), entry_type, bc, code);

/* If there is, execute it after setting up an any_other handler */

	sci_ptr = null;
	saved_admin_sci_ptr = sc_stat_$admin_sci_ptr;
	if code = 0 & entry_type = seg_type then do;
	     call sc_create_sci_ (sci_ptr, code);
	     if code ^= 0 then do;
		call sys_log_$error_log (SL_LOG_SILENT, code, "ec_shift_config_change_",

		     "Failed to establish an SCI environment.");
		goto return_to_caller;
	     end;

	     on cleanup begin;
		sc_stat_$admin_sci_ptr = saved_admin_sci_ptr;
		call sc_create_sci_$destroy (sci_ptr);
	     end;

	     sc_stat_$admin_sci_ptr = sci_ptr;		/* sc_command requires sc_stat_$admin_sci_ptr to be valid */

	     sc_subsystem_info_ptr = ssu_$get_info_ptr (sci_ptr);
	     sc_subsystem_info.real_iocb = sc_stat_$master_iocb;

	     call condition_ ("any_other", ucs);
	     call call_ec_ (rtrim (sysdir) || ">shift_config_change",
		ltrim (char (old)), ltrim (char (new)), ltrim (char (auto_maxu)),
		ltrim (char (ncpu)), ltrim (char (nkmem)), ltrim (char (nbulk)));
	end;

return_to_caller:
	if sci_ptr ^= null then do;
	     sc_stat_$admin_sci_ptr = saved_admin_sci_ptr;
	     call sc_create_sci_$destroy (sci_ptr);
	end;
	return;

ucs: proc (mcptr, condname, coptr, infoptr, continue);

dcl  (mcptr, coptr, infoptr) ptr;
dcl  condname char (*);
dcl  continue bit (1);
dcl  msg char (120);
dcl  i fixed bin;
dcl  non_local bit (1) unaligned;
dcl  as_check_condition_ entry (char (*), bit (1), bit (1));

	call as_check_condition_ (condname, continue, non_local);
	if continue |				/* if not for us */
	     non_local then return;			/* cleanup, but nothing to clean up. */
	call ioa_$rsnnl ("ec_shift_config_change_: Error ^a while executing shift_config_change.ec",
	     msg, i, condname);
	call sys_log_ (SL_LOG_BEEP, "^a", msg);
	call as_dump_ (rtrim (msg));
	goto return_to_caller;

     end ucs;

%include sys_log_constants;
%page;
%include sc_subsystem_info_;
%page;
%include sc_stat_;
%page;
     end ec_shift_config_change_;
