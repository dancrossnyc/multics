/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
as_any_other_handler_:
     procedure (P_caller, P_cleanup_proc, P_cleanup_label, P_error_label);

/* *	AS_ANY_OTHER_HANDLER_
   *
   *	This procedure is used to handle unexpected conditions in the
   *	Answering Service.	It is designed to be called as follows:
   *
   *	on condition (any_other)
   *	     call as_any_other_handler_ ("name-of-calling-procedure",
   *		cleanup_procedure_for_owning_procedure,
   *		exit_label_for_exit_after_cleanup,
   *		exit_label_for_exit_without_cleanup);
   *
   *	It was abstracted from syserr_log_man_ in order to keep that
   *	procedure a little simpler.
   *
   *	Modification history:
   *	84-10-15, W. Olin Sibert: Moved from syserr_log_man_
   */

declare	P_caller char (*) parameter;
declare	P_cleanup_proc entry () parameter;
declare	P_cleanup_label label parameter;
declare	P_error_label label parameter;

declare	code fixed bin (35);
declare	call_cleanup_procedure bit (1);
declare	continue_sw bit (1);
declare	non_local_exit bit (1);

declare 1 cond_info aligned like condition_info automatic;

declare	as_check_condition_ entry (char (*), bit (1), bit (1));
declare	as_dump_ entry (char (*));
declare	continue_to_signal_ entry (fixed bin (35));
declare	find_condition_info_ entry (pointer, pointer, fixed bin (35));
declare	sys_log_ entry options (variable);
declare	sys_log_$error_log entry options (variable);

declare	WHOAMI char (32) internal static options (constant) init ("as_any_other_handler_");
declare	SYS_LOG_TYPE fixed bin internal static options (constant) init (1);

declare	any_other condition;

declare  (addr, null) builtin;

/* */

	call_cleanup_procedure = "1"b;
	goto HANDLER_COMMON;



as_any_other_handler_$no_cleanup:
     entry (P_caller, P_error_label);

	call_cleanup_procedure = "0"b;


HANDLER_COMMON:
	on condition (any_other)			/* Not a thing that can be done */
	     goto P_error_label;

	cond_info.version = condition_info_version_1;
	call find_condition_info_ (null (), addr (cond_info), code);
	if (code ^= 0) then do;
	     call sys_log_$error_log (SYS_LOG_TYPE, code, WHOAMI,
		"Cannot get condition information.");
	     goto P_error_label;
	     end;

	call as_check_condition_ ((cond_info.condition_name), continue_sw, non_local_exit);
	if continue_sw then do;			/* ONLY way to "return" from this procedure */
	     call continue_to_signal_ ((0));
	     return;
	     end;

	call sys_log_ (SYS_LOG_TYPE, "^a: Condition ^a signalled.",
	     P_caller, cond_info.condition_name);

	call as_dump_ (P_caller);

	if ^call_cleanup_procedure then		/* None supplied by caller */
	     goto P_error_label;

	else if non_local_exit then do;
	     call P_cleanup_proc ();
	     goto P_cleanup_label;
	     end;

	else goto P_error_label;

%page; %include condition_info;

	end as_any_other_handler_;
