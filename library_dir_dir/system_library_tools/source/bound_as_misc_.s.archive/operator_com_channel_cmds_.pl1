/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(85-12-05,MSharpe), approve(87-05-01,MCR7690),
     audit(87-05-07,Parisek), install(87-08-04,MR12.1-1055):
     Original coding.  Moved the com_channel related commands out of admin_.
  2) change(87-04-26,GDixon), approve(87-05-01,MCR7690),
     audit(87-05-07,Parisek), install(87-08-04,MR12.1-1055):
     Upgraded for change to answer_table.incl.pl1.
  3) change(88-09-08,Parisek), approve(88-09-28,MCR7996),
     audit(88-10-05,Hunter), install(88-10-07,MR12.2-1140):
     Removed references to sys_log_$command_error_log entry which does not
     exist and changed them to sys_log_$command_error which does exist.
                                                   END HISTORY COMMENTS */
/* format: style4,indattr */

operator_com_channel_cmds_: procedure ();

/* The following two entry points provide commands to change the state of
   a tty channel, attach, and remove.  Other commands which manipulate the
   process using the channel, ie., detach, terminate, bump, unbump, and
   disconnect may be found in in admin_process_commands_.

*/


%page;

/*  AUTOMATIC */

dcl  action	        char (8) aligned;
dcl  action_flag	        bit (1) aligned;
dcl  action_log	        char (12) aligned;
dcl  answer	        char (256) init ("");
dcl  arg_index	        fixed bin (17);
dcl  arg_length	        fixed bin (21);
dcl  arg_list_ptr	        ptr;
dcl  arg_ptr	        ptr;
dcl  code		        fixed bin (35);
dcl  comname	        char (12) aligned;
dcl  input_channel	        char (32);			/* channel id to look for */

/* BASED */

dcl  arg		        char (arg_length) based (arg_ptr);

/* BUILTIN */

dcl  (addr, null)	        builtin;


/* ENTRY */

dcl  asu_$asu_attach        entry (char (*), fixed bin (35));
dcl  asu_$asu_remove        entry (ptr);
dcl  cu_$arg_list_ptr       entry () returns (ptr);
dcl  cu_$arg_ptr_rel        entry (fixed bin, ptr, fixed bin (21),
		        fixed bin (35), ptr);
dcl  sys_log_$command       entry options (variable);
dcl  sys_log_$command_error entry options (variable);

/* EXTERNAL */

dcl  error_table_$action_not_performed fixed bin (35) ext static;

%page;
attach:
     entry options (variable);

/**** This is the operator "attach" command.  It allows the operator to
      attach a communications channel to the answering service. */

	arg_list_ptr = cu_$arg_list_ptr ();
	comname = "attach";
	action = "attach  ";
	action_log = "attached";
	action_flag = "0"b;
	do arg_index = 1 to 25;			/* take up to 25 args */
	     call cu_$arg_ptr_rel (arg_index, arg_ptr, arg_length,
		code, arg_list_ptr);		/* get one argument, channel id */
	     if code ^= 0
	     then go to ATTACH_RETURN;

	     input_channel = arg;			/* save channel id */

	     call asu_$asu_attach (input_channel, code);	/* add channel to answer table */
	     if code = 0 then do;			/* if no error */
		call sys_log_$command (-1, "attach: ^a attached.",
		     input_channel);
		action_flag = "1"b;			/* one worked. */
	     end;
	     else do;				/* some error occurred. */
		if code ^= error_table_$action_not_performed
						/* if asu_attach did not say what */
		then call sys_log_$command_error (1, code,
			comname, input_channel);
						/* we will do so */
	     end;
	end;

ATTACH_RETURN:

	if ^action_flag				/* complain if none worked. */
	then call sys_log_$command (-1, "attach: error: not done");

	return;

%page;
remove:
     entry options (variable);

	arg_list_ptr = cu_$arg_list_ptr ();
	comname = "remove";
	action = "remove  ";			/* set action code */
	action_log = "removed";
	action_flag = "0"b;				/* none done yet */
	do arg_index = 1 to 25;			/* take up to 25 args */
	     call cu_$arg_ptr_rel (arg_index, arg_ptr, arg_length,
		code, arg_list_ptr);		/* get one argument, channel id */
	     if code ^= 0
	     then go to REMOVE_RETURN;

	     input_channel = arg;			/* save channel id */
	     cdtep = FIND_CDTE (input_channel);
	     if cdtep = null ()
	     then call sys_log_$command (-1, "remove: Channel ^a not found.",
		     input_channel);
	     else do;
		if cdte.current_service_type = MC_SERVICE
		then call sys_log_$command (1,
			"remove: Channel ^a is in use by the message coordinator and can not be removed",
			cdte.name);
		else do;
		     call asu_$asu_remove (cdtep);	/* remove it */
		     action_flag = "1"b;		/* one worked */
		     call sys_log_$command (-1, "remove: ^a removed",
			input_channel);
		end;
	     end;
	end;

REMOVE_RETURN:
	if ^action_flag				/* complain if none worked. */
	then call sys_log_$command (-1, "remove: error: not done");

	return;

%page;

FIND_CDTE:
     procedure (P_channel_name) returns (ptr);

dcl  P_channel_name	        char (*) parameter;
dcl  cdtep	        ptr automatic;
dcl  i		        fixed bin (17) automatic;

	do i = 1 to scdtp -> cdt.current_size;
	     cdtep = addr (scdtp -> cdt.cdt_entry (i));
	     if cdtep -> cdte.in_use > NOW_FREE
	     then if cdtep -> cdte.name = P_channel_name
		then return (cdtep);
	end;

	return (null ());

     end FIND_CDTE;

%page; %include as_data_;
%page; %include as_data_definitions_;
%page; %include author_dcl;
%page; %include cdt;
%page; %include dialup_values;
%page; %include sc_stat_;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   attach: bad arg "AAAA"

   S:	as (severity1).

   T:	$response

   M:	A bad argument was furnished with an attach
   command.  The argument is skipped.

   A:	Enter a corrected command.


   Message:
   remove: bad arg "AAAA"

   S:	as (severity1).

   T:	$response

   M:	A bad argument was furnished with an remove
   command.  The argument is skipped.

   A:	Enter a corrected command.


   Message:
   attach: error: not done

   S:	as (severity1).

   T:	$response

   M:	Bad arguments were given to an attach
   command.  No action resulted.

   A:	$tryagain


   Message:
   remove: error: not done

   S:	as (severity1).

   T:	$response

   M:	Bad arguments were given to an remove
   command.  No action resulted.

   A:	$tryagain


   Message:
   remove: ttyXXX is in use by the message coordinator and can not be removed.

   S:	as (severity1).

   T:	$response

   M:	An operator remove command specified a message coordinator channel.
   The channel was not removed.

   A:	Enter a corrected command line.  Use the drop command to
   take a channel away from the message coordinator.


   Message:
   attach: TTYxxx attached

   S:	as (severity1).

   T:	In response to an operator attach command.

   M:	This is the response to an attach TTYxxx command.  The
   device channel is now connected to the Answering Service and ready for
   dialups.

   A:	$ignore


   Message:
   attach: Action not performed. ttyXXX

   S:	as (severity1).

   T:	In response to an operator attach command.

   M:	This is the response to attach TTYxxx if no more room is
   available in the answer table for channel entries.  The line is not
   attached.

   A:	$contact


   Message:
   remove: ttyXXX removed

   S:	as (severity1).

   T:	In response to an operator remove command.

   M:	This response to the operator command remove TTYxxx
   indicates the channel is no longer available for dialups.  If a user
   was on the channel, he is bumped with no message but "hangup".
   Note that if a user calls in on this channel, and the modem answers,
   the user gets a carriage return, but no welcoming message from the system,
   and he cannot log in.

   A:	Remember to busy out the modem so that no user can call
   the channel.


   END MESSAGE DOCUMENTATION */


     end operator_com_channel_cmds_;
