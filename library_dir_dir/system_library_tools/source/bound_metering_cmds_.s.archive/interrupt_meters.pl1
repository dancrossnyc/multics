/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4,delnl,insnl,tree,ifthenstmt,indnoniterend */
interrupt_meters:
intm:
     procedure options (variable, separate_static);

/* IOM_INTERRUPT_METERS - Program to Print Out Channel Interrupt Meters.
   coded 2/20/74 by N. I. Morris					*/

/* Modified  November 1978 by Larry Johnson to print names of the channels */
/* Modified  September 1980 by Warren Johnson to parse all fields on CHNL cards */
/* Modified  May 1981 by C. Hornig for new I/O system */
/* Modified August 1981, W. Olin Sibert, for decimal channel printout */
/* Modified August 1981 by J. Bongiovanni for metering_util_ */
/* Modified November 1984 by M. Pandolf to include hc_lock. */

dcl  argno fixed bin;
dcl  nargs fixed bin;
dcl  argptr ptr;
dcl  arglen fixed bin (21);
dcl  argument char (arglen) based (argptr);

dcl  (iom_no, first_iom, last_iom) fixed bin (3);
dcl  (channel_no, first_channel, last_channel) fixed bin (8);
dcl  rcode fixed bin (35);
dcl  (i, j) fixed bin;
dcl  dtx fixed bin (9);
dcl  (rs_sw, rr_sw, tt_sw, channel_sw, iom_sw) bit (1) aligned init ("0"b);

dcl  meter_time fixed bin (71);
dcl  formatted_meter_time char (10);
dcl  count fixed bin;
dcl  cput float bin (63);
dcl  ptime float bin (63);
dcl  itime float bin (63);
dcl  tm fixed bin (71);
dcl  total_count fixed bin;
dcl  total_time fixed bin (71);
dcl  other_count fixed bin;
dcl  other_time fixed bin (71);
dcl  iom_count fixed bin;
dcl  iom_time fixed bin (71);
dcl  iom_data_length fixed bin (19);
dcl  cur_ptrs (N_REGIONS) ptr;
dcl  prev_ptrs (N_REGIONS) ptr;
dcl  channel_name char (32);

dcl  unique fixed bin internal static init (0);
dcl  N_REGIONS fixed bin internal static options (constant) init (2);

dcl  1 cur_iom_data aligned like iom_data based (cur_ptrs (1));
dcl  1 prev_iom_data aligned like iom_data based (prev_ptrs (1));
dcl  1 cur_tcm aligned like tcm based (cur_ptrs (2));
dcl  1 prev_tcm aligned like tcm based (prev_ptrs (2));


dcl  error_table_$badopt fixed bin (35) external static;
dcl  error_table_$bad_arg fixed bin (35) external static;
dcl  error_table_$noarg fixed bin (35) external static;

dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  identify_io_channel_ entry (pointer, fixed bin (3), fixed bin (8), char (*), fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  metering_util_$define_regions entry options (variable);
dcl  metering_util_$fill_buffers entry (fixed bin, fixed bin (71), char (*), (*) ptr, (*) ptr, fixed bin (35));
dcl  metering_util_$reset entry (fixed bin, fixed bin (35));
dcl  parse_io_channel_name_ entry (char (*), fixed bin (3), fixed bin (8), fixed bin (35));
dcl  ring_zero_peek_$get_max_length entry (char (*), fixed bin (19), fixed bin (35));


dcl  WHOAMI char (32) internal static options (constant) init ("interrupt_meters");

dcl  (char, float, hbound, index, lbound, length, null, size, substr) builtin;

/**/

	if unique = 0 then do;			/* first time ... */
	     call ring_zero_peek_$get_max_length ("iom_data", iom_data_length, rcode);
	     if rcode ^= 0 then do;
		call com_err_ (rcode, WHOAMI, "iom_data");
		return;
		end;
	     call metering_util_$define_regions (unique, rcode, "iom_data", 0, iom_data_length, "tc_data", 0,
		size (tcm));
	     if rcode ^= 0 then do;
		call com_err_ (rcode, WHOAMI, "metering_util_$define_regions");
		return;
		end;
	     end;


	call cu_$arg_count (nargs, rcode);
	if rcode ^= 0 then do;
	     call com_err_ (rcode, WHOAMI);
	     return;
	     end;

	do argno = 1 to nargs;			/* Loop through arguments */
	     call cu_$arg_ptr (argno, argptr, arglen, (0));

	     if /* case */ (argument = "-rs") | (argument = "-reset") then rs_sw = "1"b;
	     else if (argument = "-report_reset") | (argument = "-reset_report") | (argument = "-rr") then rr_sw = "1"b;
	     else if (argument = "-totals") | (argument = "-total") | (argument = "-tt") then tt_sw = "1"b;
	     else if argument = "-iom" then do;		/* Examine specified IOM. */
		if argno = nargs then do;
ARG_MISSING:
		     call com_err_ (error_table_$noarg, WHOAMI, "After ^a", argument);
		     return;
		     end;

		argno = argno + 1;
		call cu_$arg_ptr (argno, argptr, arglen, (0));

		if length (argument) ^= 1 then do;
BAD_IOM_ARG:
		     call com_err_ (0, WHOAMI, "Invalid IOM tag: ^a", argument);
		     return;
		     end;

		if index ("ABCD", argument) ^= 0
		then iom_no = index ("ABCD", argument);
		else if index ("1234", argument) ^= 0
		     then iom_no = index ("1234", argument);
		     else goto BAD_IOM_ARG;

		iom_sw = "1"b;
		end;

	     else if (argument = "-channel") | (argument = "-chn") then do;
						/* Examine specified channel. */
		if argno = nargs then goto ARG_MISSING;
		argno = argno + 1;
		call cu_$arg_ptr (argno, argptr, arglen, (0));
		call parse_io_channel_name_ (argument, iom_no, channel_no, rcode);
		if rcode ^= 0 then do;
		     call com_err_ (rcode, WHOAMI, "Channel ^a", argument);
		     return;
		     end;
		channel_sw = "1"b;
		iom_sw = "1"b;
		end;

	     else do;				/* Bad argument */
		if char (argument, 1) = "-"
		then rcode = error_table_$badopt;
		else rcode = error_table_$bad_arg;
		call com_err_ (rcode, WHOAMI, "^a", argument);
		return;
		end;
	end;					/* Of loop through arguments */
%page;
	call metering_util_$fill_buffers (unique, meter_time, formatted_meter_time, cur_ptrs, prev_ptrs, rcode);
	if rcode ^= 0 then do;
	     call com_err_ (rcode, WHOAMI, "metering_util_$fill_buffers");
	     return;
	     end;

	ptime = cur_tcm.processor_time - prev_tcm.processor_time;
	itime = cur_tcm.idle - prev_tcm.idle;		/* This command used to compute interrupt time as */
	cput = ptime;				/* interrupt time taken in non-idle process. REM */
%page;
	call ioa_ ("^/Total metering time^-^a^/", formatted_meter_time);


	if ^rs_sw
	then call ioa_ (" IOM Ch     Int  Avg Time  % CPU  Name^/");
	else go to reset;

	if iom_sw
	then					/* If IOM was specified ... */
	     first_iom, last_iom = iom_no;
	else do;
	     first_iom = lbound (cur_iom_data.per_iom, 1);
	     last_iom = hbound (cur_iom_data.per_iom, 1);
	     end;

	if channel_sw
	then first_channel, last_channel = channel_no;
	else do;
	     first_channel = lbound (cur_iom_data.per_iom.chantab, 2);
	     last_channel = hbound (cur_iom_data.per_iom.chantab, 2);
	     end;

	iom_count, iom_time = 0;			/* Reset totals. */
	do i = first_iom to last_iom;			/* Iterate through IOM's. */
	     do j = first_channel to last_channel;	/* Iterate through channels. */
		dtx = cur_iom_data.per_iom (i).chantab (j);
		if dtx ^= 0 then do;
		     count = cur_iom_data.per_device (dtx).interrupts - prev_iom_data.per_device (dtx).interrupts;
		     tm = cur_iom_data.per_device (dtx).interrupt_time
			- prev_iom_data.per_device (dtx).interrupt_time;
		     end;
		else count, tm = 0;

		if ((count ^= 0) & ^tt_sw) | channel_sw then do;
		     call identify_io_channel_ (null (), (i), (j), channel_name, (0));
		     call ioa_ ("^x^1a^4d.^8d^8.3f^9.2f  ^a", substr ("ABCDEFGH", i, 1), j, count, cavg (tm, count),
			cpcnt (tm, cput), channel_name);
		     end;

		iom_count = iom_count + count;	/* Count totals. */
		iom_time = iom_time + tm;
	     end;
	end;

	if ^(channel_sw | iom_sw) | tt_sw then do;	/* If printing totals... */
	     total_count = cur_tcm.interrupt_count - prev_tcm.interrupt_count;
	     total_time = cur_tcm.interrupt_time - prev_tcm.interrupt_time;
	     other_count = total_count;
	     other_time = total_time - iom_time;

	     call ioa_ ("");

/* Sum of channel data */
	     call ioa_ ("^7a^8d^8.3f^9.2f", "Chan   ", iom_count, cavg (iom_time, iom_count), cpcnt (iom_time, cput));

/* Time in ii & iom_manager not metered per channel */
	     call ioa_ ("^7a^8d^8.3f^9.2f", "Ovhd   ", other_count, cavg (other_time, other_count),
		cpcnt (other_time, cput));

/* Total interrupt time, like ttm.interrupt_time, per actual interrupt */
	     call ioa_ ("^7a^8d^8.3f^9.2f", "Total  ", total_count, cavg (total_time, total_count),
		cpcnt (total_time, cput));
	     end;

reset:
	if rs_sw | rr_sw then do;
	     call metering_util_$reset (unique, rcode);
	     if rcode ^= 0 then do;
		call com_err_ (rcode, WHOAMI, "metering_util_$reset");
		return;
		end;
	     end;

	call ioa_ ("");

return_to_caller:
	return;
%page;
cavg:
     proc (t, c) returns (float bin);

dcl  t fixed bin (71),
     c fixed bin;


	if c = 0
	then return (0.e0);
	else return (float (t, 27) / c * 1.e-3);


     end cavg;



cpcnt:
     proc (t, c) returns (float bin);

dcl  t fixed bin (71),
     c float bin (63);

	return (float (t, 27) / c * 1.e2);

     end cpcnt;

%page;
%include tcm;
%page;
%include hc_lock;
%page;
%include iom_data;

     end interrupt_meters;
