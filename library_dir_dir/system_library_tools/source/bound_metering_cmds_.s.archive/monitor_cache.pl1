/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(87-11-25,Fawcett), approve(87-11-25,MCR7798),
     audit(88-02-22,Parisek), install(88-03-01,MR12.2-1031):
     Change to initialize the variable fact_dividend to the default value of
     15.
                                                   END HISTORY COMMENTS */


monitor_cache: proc ();

/* format: style1,ind2,^inddcls,ifthenstmt,dclind2,declareind2,ifthendo,ifthen*/



/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * *

          Name:	monitor_cache
          
          The monitor_cache command initiates and controls automatic monitoring of
          cache memory error data saved during normal fault processing.  This command
          should be used to constantly monitor the cache memory error data to provide
          a warning when error rates become excessive.  Error rate threshold values
          are compared against a per system, using the -priv control argument
          described below, or a per process threshold.  See "Changing the Threshold
          Values", below for information pertaining to changing the per-system
          defaults and for setting up per-process values that are different from the
          per-system defaults.  The current threshold values may be displayed using
          the display_cache_treshold command.
          
          Usage:	monitor_cache {list} {-control_arguments}
          
          where:
          
          1. list	is a list of cpu tags whose cache error rates should be monitored.
          	If list is not provided, then all possible cpu's will be monitored.
          
          2. -control_arguments may be chosen from the following:
          
             -brief, -bf
                    suppresses the "Cpu cpu_tag below cache error threshold." message
          	when the error rate is within the specified threshold limits. This
          	does not suppress the warning when the error rate is above the
          	threshold values. This is the default.
          
             -long, -lg
          	emits a "Cpu cpu_tag below cache error threshold." message on
          	the user_output i/o switch.
          
             -cpu   cpu_list
          	an alternate method of specifying list, above.
          
             -priv  causes  warning messages of "Cache above error threshold for cpu
          	cpu_tag." to be written into the syserr_log and output to the
          	operator console with an audible alarm. The use of this control
          	argument uses the per system threshold values in
          	>tools>cache_threshold_defaults_. The use of this control argument
          	causes the polling message described under -long above to be
          	put into the syserr_log instead of the user_output i/o switch.
          	The use of this control argument requires re access to the hphcs_ 
          	gate.
          
             -stop, -sp
          	stops monitoring for the cpu's in the list argument or the operands
          	of the -cpu control argument. If no cpu tags have been specified,
          	then monitoring for all cpus is terminated.
          
             -start, -sr
          	resumes monitoring for cpu's specified by the list argument or the
          	operands of the -cpu control argument. Monitoring will continue with
          	the next scheduled cycle.
          
             -time N, -tm N
          	specifies the monitoring interval in minutes. The default time is 15
          	minutes.
          
          Notes:
          
          Use of this command requires re access to the phcs_ gate.
          
          The monitor interval is closely associated with the threshold values
          in that the threshold is specified in terms of an acceptable error
          rate N in X time.  
          	
          Changing the Threshold Values:
          
          The per-system and per-process default threshold values are defined in
          >system_library_tools>cache_threshold_defaults_.  This segment is created by
          a cds source segment of the same name.  In order to change the system
          default values, it is necessary to change this source segment, recompile and
          install the generated object in >tools.  A per-process threshold that is
          different from the per-system values may be created by performing the same
          operations, except that it should be found in the process' object search
          rules before >tools or it may be specifically initiated.
                    	
       Status:
         	0) Created:     2/84 by GA Texada

*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

dcl cache_meters_$for_monitor entry (ptr, fixed bin, fixed bin (35)),
  com_err_	     entry () options (variable),
  cu_$arg_count	     entry (fixed bin, fixed bin (35)),
  cu_$arg_ptr	     entry (fixed bin, ptr, fixed bin (21), fixed bin (35)),
  hcs_$get_user_effmode  entry (char (*), char (*), char (*), fixed bin, fixed bin (5),
		     fixed bin (35)),
  hcs_$initiate	     entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr,
		     fixed bin (35)),
  hcs_$make_ptr	     entry (ptr, char (*), char (*), ptr, fixed bin (35)),
  hcs_$terminate_noname  entry (ptr, fixed bin (35)),
  hphcs_$syserr	     entry options (variable),
  get_temp_segment_	     entry (char (*), ptr, fixed bin (35)),
  release_temp_segment_  entry (char (*), ptr, fixed bin (35)),
  ioa_		     entry () options (variable),
  ipc_$create_ev_chn     entry (fixed bin (71), fixed bin (35)),
  ipc_$decl_ev_call_chn  entry (fixed bin (71), entry, ptr, fixed bin, fixed bin (35)),
  timer_manager_$alarm_wakeup entry (fixed bin (71), bit (2), fixed bin (71)),
  timer_manager_$reset_alarm_wakeup entry (fixed bin (71));

dcl (error_table_$bad_arg,
  error_table_$badcall,
  error_table_$bad_conversion,
  error_table_$badopt,
  error_table_$inconsistent,
  error_table_$not_privileged) fixed bin (35) ext static;

dcl CPU_TAGS	     char (16) int static init ("ABCDEFGHabcdefgh") options (constant),
  DEFAULT_INTERVAL	     fixed bin int static init (15) options (constant),
						/* 15 minutes is default interval		*/
  DEFAULT_SET	     bit (8) int static init ((8)"1"b) options (constant),
						/* all cpus				*/
  TRUE		     bit (1) int static init ("1"b) options (constant),
  FALSE		     bit (1) int static init ("0"b) options (constant),
  myname		     char (13) init ("monitor_cache") int static options (constant);

dcl ap		     ptr,
  Arg		     char (al) based (ap),
  (Nargs, ncpus, i, j)   fixed bin,
  al		     fixed bin (21),
  (countersp, static_threshold_ptr) ptr int static init (null ()),
  (brief, inited, priv)  bit (1) init static init ("0"b),
  (error_found, got_a_cpu, interval, start, stop) bit (1),
  code		     fixed bin (35),
  acpu_list	     bit (8) init ((8)"0"b),
  cpu_list	     bit (8) int static init ((8)"0"b),
  factor_dividend	     fixed dec (30, 2),
  factor		     fixed dec (30, 2) int static init (0),
  monitor_interval	     fixed bin (71) int static init (0),
  monitor_wakeup_chn     fixed bin (71) int static init (-1),
  (amonitor_interval, start_hack) fixed bin (71);

dcl 1 cache_counters     (MAX_CPUS) aligned based (countersp),
    2 cpu_tag	     fixed bin (35),
    2 cache_type	     fixed bin (35),
    2 cache_err_ctrs     (17) fixed bin (35);

dcl cleanup	     condition;

dcl (clock, divide, fixed, index, mod, null, substr, verify) builtin;



	call check_phcs_access (code);		/* if he doesn't have this then forget trying	*/
	if code ^= 0 then do;			/* because we can't get the meter data		*/
	    call com_err_ (code, myname, "Access to phcs_ is required.");
						/* from cache_meters_$for_monitor		*/
	    return;
	  end;
	if ^inited then do;
	    brief = TRUE;
	    priv = FALSE;
	  end;
          factor_dividend = DEFAULT_INTERVAL;
	amonitor_interval = DEFAULT_INTERVAL * 60000000;
						/* make it microseconds			*/
	got_a_cpu, interval, start, stop = FALSE;
	call cu_$arg_count (Nargs, code);
	if code ^= 0 then do;
	    call com_err_ (code, myname);
	    return;
	  end;
	if Nargs <= 0 then do;
	    if inited then goto recursive_invocation;
	  end;
	else do i = 1 to Nargs;
	    call cu_$arg_ptr (i, ap, al, code);
	    if code ^= 0 then do;
	        call com_err_ (code, myname);
	        call janitor (TRUE);
	        return;
	      end;
	    if substr (Arg, 1, 1) ^= "-" then do;	/* must be cpu tag or cpu list		*/
	        if verify (Arg, CPU_TAGS) ^= 0 then goto cpu_list_error;
	        call mark_cpu;
	      end;
	    else do;
have_next_arg:    if Arg = "-brief" | Arg = "-bf" then brief = TRUE;
	        else if Arg = "-long" | Arg = "-lg" then brief = FALSE;
	        else if Arg = "-priv" then do;
		  call check_hphcs_access (code);	/* might as well do it now...			*/
		  if code ^= 0 then do;
		      call com_err_ (code, myname, "hphcs_");
		      call janitor (TRUE);
		      return;
		    end;
		  else priv = TRUE;
		end;
	        else if Arg = "-stop" | Arg = "-sp" then stop = TRUE;
	        else if Arg = "-start" | Arg = "-sr" then start = TRUE;
	        else if Arg = "-time" | Arg = "-tm" then do;
		  call get_next_arg (TRUE);
		  if code ^= 0 then do;
		      call com_err_ (code, myname, "Missing monitor interval.");
		      call janitor (^inited);
		      return;
		    end;
		  if verify (Arg, "0123456789") ^= 0 then do;
						/* not a valid number			*/
		      call com_err_ (error_table_$bad_conversion, myname, "^a is not a valid number.", Arg);
		      call janitor (^inited);
		      return;
		    end;
		  amonitor_interval = fixed (Arg);
		  factor_dividend = fixed (Arg, 30, 2);
		  if amonitor_interval < 1 then do;
		      call com_err_ (0, myname, "The interval time must be greater than or equal to 1 minute.");
		      call janitor (^inited);
		      return;
		    end;
		  interval = TRUE;
		  amonitor_interval = amonitor_interval * 60000000;
						/* make it microseconds			*/
		end;
	        else if Arg = "-cpu" then do;		/* just monitor these			*/
		  do while (TRUE);
		    call get_next_arg (TRUE);
		    if ap = null () then do;
		        if ^got_a_cpu then do;
			  call com_err_ (code, myname, "Processing -cpu");
			  call janitor (^inited);
			  return;
			end;
		        else goto finished_args;
		      end;
		    if substr (Arg, 1, 1) = "-" then do;
		        if got_a_cpu then goto have_next_arg;
		        else goto cpu_list_error;
		      end;
		    if verify (Arg, CPU_TAGS) ^= 0 then do;
cpu_list_error:	        call com_err_ (error_table_$bad_arg, myname, "^a contains an invalid cpu tag.", Arg);
		        call janitor (^inited);
		        return;
		      end;
		    got_a_cpu = TRUE;
		    call mark_cpu ();
		  end;
		end;
	        else do;				/* hmm, don't know this ctl arg		*/
		  call com_err_ (error_table_$badopt, myname, "^a.", Arg);
		  call janitor (^inited);
		  return;
		end;
	      end;				/* must have been a ctl arg			*/
finished_args:
	  end;					/* all done with arguments			*/

	if ^inited then
	     if (stop) then do;			/* can't do this until we have started monitoring */
	         call com_err_ (error_table_$badcall, myname, "Monitoring has not been started, -stop ignored.");
	         return;
	       end;

	if inited then do;
	    if ^(start | stop) then do;
recursive_invocation:
	        call com_err_ (error_table_$badcall, myname,
		"Monitoring has already been invoked. Use the -stop control argument.");
	        call janitor (FALSE);
	        return;
	      end;
	    if interval then do;
	        call com_err_ (0, myname, "The monitoring interval may not be changed during monitoring.");
	        return;
	      end;
	    if (start & stop) then do;
	        call com_err_ (error_table_$inconsistent, myname, "Both ""-start"" and ""-stop"" specified.");
	        return;
	      end;
	    if start then do;			/* turn some back ON			*/
	        if acpu_list = (8)"0"b then do;
		  call com_err_ (0, myname, "No cpu list found for -start control argument.");
		  call janitor (FALSE);
		  return;
		end;
	        else do;
		  do i = 1 to MAX_CPUS;
		    if (substr (acpu_list, i, 1)) then substr (cpu_list, i, 1) = TRUE;
		  end;
		end;
	      end;
	    else if stop then do;			/* turn off if we have a list			*/
	        if acpu_list ^= (8)"0"b then do;
		  do i = 1 to MAX_CPUS;
		    if (substr (acpu_list, i, 1)) then substr (cpu_list, i, 1) = FALSE;
		  end;
		end;
	        else do;				/* ok stop all monitoring			*/
		  call janitor (TRUE);		/* cleanup and quit				*/
		  return;
		end;
	      end;
	  end;
	if ^inited then do;
	    on cleanup call janitor (TRUE);
	    cache_threshold_datap = null ();
	    if priv then call use_tools_for_defaults ();	/* always use >tools for priv			*/
	    else do;
	        call find_defaults ();
	        if cache_threshold_datap = null () then call use_tools_for_defaults ();
	      end;
	    if cache_threshold_datap = null () then do;
	        call com_err_ (code, myname, "Unable to find the cache threshold defaults.");
	        call janitor (TRUE);
	        return;
	      end;

	    static_threshold_ptr = cache_threshold_datap; /* save this				*/
	    call cache_meters_$for_monitor (null (), ncpus, code);
						/* null ptr tells of initial call to reset per process*/
	    if code ^= 0 then do;			/* meter data				*/
	        call com_err_ (code, myname, "Initial cache_meters_ call to reset counters.");
	        call janitor (TRUE);
	        return;
	      end;
	    call get_temp_segment_ (myname, countersp, code);
	    if code ^= 0 then do;
	        call com_err_ (code, myname, "Attempting to get a temporary segment.");
	        call janitor (TRUE);
	        return;
	      end;
	    if acpu_list = (8)"0"b then acpu_list = DEFAULT_SET;
						/* no cpu's specified, do 'em all		*/
	    call set_interval_and_factor ();
	    cpu_list = acpu_list;
	    call ipc_$create_ev_chn (monitor_wakeup_chn, code);
	    if code ^= 0 then do;
	        call com_err_ (code, myname, "Creating event channel.");
	        call janitor (TRUE);
	        return;
	      end;
	    call ipc_$decl_ev_call_chn (monitor_wakeup_chn, wakeup_monitor, null (), 1, code);
	    if code ^= 0 then do;
	        call com_err_ (code, myname, "Creating event call channel.");
	        call janitor (TRUE);
	        return;
	      end;
	    start_hack = clock ();
	    call timer_manager_$alarm_wakeup (start_hack + monitor_interval, "00"b, monitor_wakeup_chn);
	    inited = TRUE;
	  end;
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

display_cache_threshold: entry ();


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* This entry uses the current cache threshold data segment (if one is found via the	*/
/* search rules, or the default one in >tools.					*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

dcl di		     fixed bin;

	if static_threshold_ptr ^= null () then cache_threshold_datap = static_threshold_ptr;
						/* use this if we have one inited		*/
	else do;
	    call find_defaults ();
	    if cache_threshold_datap = null () then call use_tools_for_defaults;
	    if cache_threshold_datap = null () then do;
	        call com_err_ (code, "display_cache_threshold", "Unable to find the cache threshold defaults.");
	        return;
	      end;
	  end;
	call ioa_ ("	 Error Name	      Allowable per hour
-------------------------------------------------------");
	do di = 1 to NO_CACHE_ERR_TYPES;
	  call ioa_ ("^2x^32a^10x^d", CACHE_ERROR_NAME (di), cache_threshold_data_array (di));
	end;
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


wakeup_monitor:
     entry ();

	call timer_manager_$reset_alarm_wakeup (monitor_wakeup_chn);
	start_hack = clock ();
	call cache_meters_$for_monitor (countersp, ncpus, code);
	if code ^= 0 then do;
	    call com_err_ (code, myname);
	  end;

	else do;
	    if cpu_list = FALSE then ;		/* no checking done				*/
	    else do;
	        cache_threshold_datap = static_threshold_ptr;
	        do i = 1 to ncpus;
		error_found = FALSE;
		if (substr (cpu_list, cache_counters (i).cpu_tag)) then do;
		    do j = 1 to NO_CACHE_ERR_TYPES;
		      if cache_counters.cache_err_ctrs (i, j) >
		        (cache_threshold_data_array (j) * factor) then do;
			error_found = TRUE;		/* some kind kind of over threshold		*/
			call announce (TRUE, i, j, (cache_counters.cache_err_ctrs (i, j)));
						/* announce the error			*/
		        end;
		    end;
		    if (^error_found) & (substr (cpu_list, i, 1)) then call announce (FALSE, i, 0, 0);
						/* just in case			*/
		  end;				/* end if cpu is being monitored		*/
	        end;
	      end;
	  end;
	call timer_manager_$alarm_wakeup (start_hack + monitor_interval, "00"b, monitor_wakeup_chn);
	call janitor (FALSE);			/* we are done				*/
	return;


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

check_phcs_access: proc (code);

dcl code		     fixed bin (35),
  mode		     fixed bin (5);

    call hcs_$get_user_effmode (">sl1", "phcs_", "", 0, mode, code);
    if code ^= 0 then return;
    if (mode >= RE_ACCESS_BIN) then ;
    else code = error_table_$not_privileged;
    return;
  end check_phcs_access;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

check_hphcs_access: proc (code);

dcl code		     fixed bin (35),
  mode		     fixed bin (5);

    call hcs_$get_user_effmode (">sl1", "hphcs_", "", 0, mode, code);
    if code ^= 0 then return;
    if (mode >= RE_ACCESS_BIN) then ;
    else code = error_table_$not_privileged;
    return;
  end check_hphcs_access;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


get_next_arg: proc (required_arg);

dcl required_arg	     bit (1) parameter;

    i = i + 1;					/* set to next arg				*/
    call cu_$arg_ptr (i, ap, al, code);
    if ap = null () then do;
      end;
  end get_next_arg;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


mark_cpu: proc ();

dcl i		     fixed bin;

    do i = 1 to al;					/* now mark the tag as interested		*/
      substr (acpu_list, mod (index (CPU_TAGS, substr (Arg, i, 1)) - 1, 8) + 1, 1) = TRUE;
    end;
  end mark_cpu;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

announce:
  proc (error, cputag, error_number, how_many);

dcl error		     bit (1) parameter,
  (cputag, error_number, how_many) fixed bin parameter;

    if error then do;
        if priv then
	   call hphcs_$syserr (BEEP, "monitor_cache:  Cpu ^a is above the cache error threshold for ^a. ^d during this interval.",
	     CPU_NAMES (cache_counters.cpu_tag (cputag)), CACHE_ERROR_NAME (error_number), how_many);
        else call ioa_ (myname || ": Cpu ^a is above the cache error threshold for ^a. ^d during this interval.",
	     CPU_NAMES (cache_counters.cpu_tag (cputag)), CACHE_ERROR_NAME (error_number), how_many);
      end;
    else do;					/* no error, announce monitoring if applicable	*/
        if priv then call hphcs_$syserr (LOG, "monitor_cache:  Cpu ^a below cache error threshold.",
	     CPU_NAMES (cache_counters.cpu_tag (cputag)));
        else if ^brief then call ioa_ (myname || ":  Cpu ^a is below cache error threshold.",
	     CPU_NAMES (cache_counters.cpu_tag (cputag)));
      end;

  end announce;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

set_interval_and_factor: proc ();

    monitor_interval = amonitor_interval;		/* calculate the factor viv a vis 1 hour	*/
    factor = divide (factor_dividend, 60.0, 30, 2);
    if factor <= 0 then factor = 1;
  end set_interval_and_factor;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

janitor: proc (finish);

dcl finish	     bit (1) parameter;

    if finish then do;				/* stop all monitoring			*/
        if countersp ^= null () then do;		/* then finish up				*/
	  call release_temp_segment_ (myname, countersp, (0));
	  countersp = null ();
	end;
        if monitor_wakeup_chn ^= -1 then call timer_manager_$reset_alarm_wakeup (monitor_wakeup_chn);
        if static_threshold_ptr ^= null () then call hcs_$terminate_noname (static_threshold_ptr, (0));
        static_threshold_ptr = null ();
        inited = FALSE;
      end;
  end janitor;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

find_defaults: proc ();


    call hcs_$make_ptr (null (), "cache_threshold_defaults_", "", cache_threshold_datap, code);

  end find_defaults;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


use_tools_for_defaults: proc ();

    call hcs_$initiate (">system_library_tools", "cache_threshold_defaults_", "", 0, 0,
      cache_threshold_datap, code);
  end use_tools_for_defaults;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


%include cache_threshold_data;

%include fim_meters;

%include access_mode_values;

%include syserr_constants;
     end monitor_cache;
