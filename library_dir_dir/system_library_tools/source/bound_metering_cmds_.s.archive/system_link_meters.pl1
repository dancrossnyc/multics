/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



/* Updated by Alan Bier  March 1974 */

/* Cleaned up substantially by J. Bongiovanni  December 80 */

system_link_meters: slm: proc;

/* Automatic */

dcl  arg_count fixed bin;
dcl  arglen fixed bin (21);
dcl  argptr ptr;
dcl  atime (4) char (12) aligned;
dcl  avgpf (4) float;
dcl  avgt (4) float;
dcl  code fixed bin (35);
dcl  count (4, 2) fixed bin (35);
dcl  cpu_time float;
dcl  cur_buff_ptrs (3) ptr;
dcl  cur_meters ptr;
dcl  formatted_meter_time char (10);
dcl  i fixed bin;
dcl  idle_time float;
dcl  j fixed bin;
dcl  meter_time fixed bin (71);
dcl  name (3) char (20) init ("Segment Search", "Get Linkage", "Definition Search");
dcl  pcc (4) float;
dcl  pct (4) float;
dcl  pc_lk_cpu_time float;
dcl  pc_linker_time float;
dcl  pgfault (4, 5) fixed bin (35);
dcl  prev_buff_ptrs (3) ptr;
dcl  prev_meters ptr;
dcl  repsw bit (1) init ("0"b);
dcl  rs char (12);
dcl  rsw bit (1) init ("0"b);
dcl  slot_count fixed bin (35);
dcl  slot_time fixed bin (35);
dcl  ti float;
dcl  time (4, 5) fixed bin (35);
dcl  total_counts fixed bin (35);
dcl  total_linker_time fixed bin (35);
dcl  total_time float;

/* Static */

dcl  our_name char (18) init ("system_link_meters") int static options (constant);
dcl  unique fixed bin int static init (0);

/* External */

dcl  error_table_$badopt fixed bin (35) external;

/* Based */

dcl  arg char(arglen) based (argptr);
dcl  cur_cpu_time fixed bin (71) based (cur_buff_ptrs (1));
dcl  cur_idle_time fixed bin (71) based (cur_buff_ptrs (2));
dcl  prev_cpu_time fixed bin (71) based (prev_buff_ptrs (1));
dcl  prev_idle_time fixed bin (71) based (prev_buff_ptrs (2));

% include link_meters;
		     
/* Entry */

dcl  com_err_ entry() options(variable);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin(21), fixed bin(35));
dcl  ioa_ entry entry options(variable);
dcl  metering_util_$define_regions entry options (variable);
dcl  metering_util_$fill_buffers entry (fixed bin, fixed bin (71), char (*), (*) ptr, (*) ptr, fixed bin (35));
dcl  metering_util_$reset entry (fixed bin, fixed bin (35));

/* Builtin */

dcl  divide builtin;
dcl  mod builtin;
dcl  size builtin;

/*  */


          call cu_$arg_count (arg_count);

	do i = 1 to arg_count;
	     call cu_$arg_ptr (i, argptr, arglen, code);
	     if code ^= 0 | arglen = 0 then go to start;
	     if arg = "-report_reset" | arg = "-rr" then rsw, repsw = "1"b;
	     else if arg = "-reset" | arg = "-rs" then rsw = "1"b;
               else do;
		call com_err_ (error_table_$badopt, our_name, arg);
		return;
               end;
           end;


start:	if ^rsw then repsw = "1"b;

          if unique=0 then do;			/* not initialized yet			*/
	     call metering_util_$define_regions (unique, code,
		"tc_data", "processor_time", 2,
		"tc_data", "idle", 2,
		"active_hardcore_data", "link_meters", size (link_meters));
	     if code^=0 then do;
		call com_err_ (code, our_name, "Error initializing");
		return;
	     end;
	end;
	


get_data:
	total_linker_time = 0;
	total_counts = 0;
	call metering_util_$fill_buffers (unique, meter_time, formatted_meter_time,
	     cur_buff_ptrs, prev_buff_ptrs, code);
	if code^=0 then do;
	     call com_err_(code, our_name, "Filling buffers");
	     return;
	end;
	cur_meters = cur_buff_ptrs (3);
	prev_meters = prev_buff_ptrs (3);

	do i = 1 to 4;
               count (i, 1) = cur_meters -> link_meters (i).total
                    - prev_meters -> link_meters (i).total;
	     count (i, 2) = cur_meters -> link_meters (i).total_others
                    - prev_meters -> link_meters (i).total_others;
	     pgfault (i, 5) = cur_meters -> link_meters (i).others_pf
                    - prev_meters -> link_meters (i).others_pf;
	     time (i, 5) = cur_meters -> link_meters (i).others_time
                    - prev_meters -> link_meters (i).others_time;
	     time (i, 1) = cur_meters -> link_meters (i).time
                    - prev_meters -> link_meters (i).time;
	     time (i, 2) = cur_meters -> link_meters (i).search_time
                    - prev_meters -> link_meters (i).search_time;
	     time (i, 3) = cur_meters -> link_meters (i).get_linkage_time
                    - prev_meters -> link_meters (i).get_linkage_time;
	     time (i, 4) = cur_meters -> link_meters (i).defsearch_time
                    - prev_meters -> link_meters (i).defsearch_time;
	     pgfault (i, 1) = cur_meters -> link_meters (i).pf
                    - prev_meters -> link_meters (i).pf;
	     pgfault (i, 2) = cur_meters -> link_meters (i).search_pf
                    - prev_meters -> link_meters (i).search_pf;
	     pgfault (i, 3) = cur_meters -> link_meters (i).get_linkage_pf
                    - prev_meters -> link_meters (i).get_linkage_pf;
	     pgfault (i, 4) = cur_meters -> link_meters (i).defsearch_pf
                    - prev_meters -> link_meters (i).defsearch_pf;
               
	     total_linker_time = total_linker_time + time (i, 1);
	     total_counts = total_counts + count (i, 1);
	end;

          if repsw then do;				/* user wants report			*/

	     idle_time = cur_idle_time - prev_idle_time;
	     cpu_time = cur_cpu_time - prev_cpu_time - idle_time;
	     
	     call ioa_ ("^/Linkage Meters:");
	     total_time = meter_time;
	   

	     if total_time = 0 then pc_linker_time = 0;
	     else pc_linker_time = (total_linker_time * 1e2/ total_time);
	     if cpu_time = 0 then pc_lk_cpu_time = 0;
	     else pc_lk_cpu_time = (total_linker_time * 1e2/ cpu_time);
     
	     call ioa_ ("CPU Metering time^-^-^-^a", formatted_meter_time);
	     
	     ti = total_linker_time;
	     call get_time;
	     if total_linker_time = 0 then total_linker_time = 1;
	     if total_counts = 0 then total_counts = 1;
	     call ioa_ ("^/Total time in linker^-^-^a", rs);
	     call ioa_ ("Average time per link^-^-^6.2f msec.", (total_linker_time * 1e-3/total_counts));
	     call ioa_ ("Percentage of real time in linker^-^6.2f", pc_linker_time);
	     call ioa_ ("Percentage of CPU time in linker^-^6.2f", pc_lk_cpu_time);
	     
	     call ioa_ ("^/Time slot (msec)^-^7x<25^10x25-50^10x50-75^12x>75");
     
	     call ioa_ ("^/Calls^-^-^10d     ^10d     ^10d     ^10d", count (1, 1), count (2, 1), count (3, 1), count (4, 1));
     
	     do i = 1 to 4;
		ti = time (i, 1);
		call get_time;
		atime (i) = rs;
		pcc (i) = (count (i, 1)*1e2/total_counts);
		if count (i, 1) = 0 then count (i, 1) = 1;
		avgt (i) = (time (i, 1)*1e-3/count (i, 1));
		avgpf (i) = (pgfault (i, 1)*1e0/count (i, 1));
		pct (i) = (time (i, 1)*1e2/total_linker_time);
	     end;

	     call ioa_ ("Total time in slot^-^a     ^12a   ^12a   ^12a",
		atime (1), atime (2), atime (3), atime (4));

	     call ioa_ ("Percent total time ^-^10.2f^15.2f^15.2f^15.2f",
		pct (1), pct (2), pct (3), pct (4));
	     call ioa_ ("Percent total calls^-^10.2f^15.2f^15.2f^15.2f",
		pcc (1), pcc (2), pcc (3), pcc (4));
	     call ioa_ ("Average time^-^10.2f^15.2f^15.2f^15.2f", avgt (1), avgt (2), avgt (3), avgt (4));
	     call ioa_ ("Average page faults^-^10.2f^15.2f^15.2f^15.2f", avgpf (1), avgpf (2), avgpf (3), avgpf (4));
		
	     do i = 2 to 4;
		call ioa_ ("^/^a", name (i-1));
		do j = 1 to 4;
		     slot_time = time (j, 1) - time (j, 5);
		     slot_count = count (j, 1) - count (j, 2);
		     if slot_count = 0 then slot_count = 1;
		     if slot_time = 0 then slot_time = 1;
		     avgt (j) = (time (j, i)*1e-3/slot_count);
		     avgpf (j) = (pgfault (j, i)*1e0/slot_count);
		     pct (j) = (time (j, i)*1e2/slot_time);
		end;
		call ioa_ (" Average time^-^10.2f^15.2f^15.2f^15.2f", avgt (1), avgt (2), avgt (3), avgt (4));
		call ioa_ (" Average page faults^10.2f^15.2f^15.2f^15.2f", avgpf (1), avgpf (2), avgpf (3), avgpf (4));
		call ioa_ (" Percent time in slot^9.2f^15.2f^15.2f^15.2f", pct (1), pct (2), pct (3), pct (4));
               end;
	end;

if rsw then call metering_util_$reset (unique, code);


	return;


get_time:	proc;

dcl  HR pic "zzz9";
dcl  min fixed bin;
dcl  MIN pic "99";
dcl  sec fixed bin;
dcl  SEC pic "99";
	

	     sec = ti*1e-6;
	     min = divide (sec, 60, 17, 0);
	     HR = divide (min, 60, 17, 0);
	     MIN = mod (min, 60);
	     SEC = mod (sec, 60);
	     rs = HR || ":" || MIN || ":" || SEC;
	     return;
	end;



     end;
