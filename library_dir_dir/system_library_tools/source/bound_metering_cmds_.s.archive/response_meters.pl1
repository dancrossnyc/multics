/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4 */
response_meters:
     proc;

/*  response_meters

   Program to print response time data, summarized by work class.
   Sufficient access is required to copy out the tc_data header.
   If the user also has R access to the MGT and the answer table,
   work class names are printed.

   Written May 1981 by J. Bongiovanni								*/
/* 81-12-08 Modified by E. N. Kittlitz.  user_table_entry conversion. */
/* Modified November 1984 by M. Pandolf to include hc_lock. */


/****^  HISTORY COMMENTS:
  1) change(87-04-26,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-27,Hartogs), install(87-08-04,MR12.1-1055):
     Upgraded for change to answer_table.incl.pl1.
                                                   END HISTORY COMMENTS */


/* Automatic */

dcl  arg_len fixed bin (21);				/* length of input argument			*/
dcl  arg_no fixed bin;				/* current argument number			*/
dcl  arg_ptr ptr;					/* pointer to current argument		*/
dcl  code fixed bin (35);				/* standard error code			*/
dcl  cur_ptrs (1) ptr;				/* from metering_util_			*/
dcl  1 cur_total_wcte aligned like wct_entry;		/* dummy WCTE for current totals		*/
dcl  formatted_meter_time char (10);			/* total metering time HHHH:MM:SS		*/
dcl  lcg (0:MAX_WORK_CLASS) char (32) varying;		/* Load Control Group Names by work class	*/
dcl  meter_calls fixed bin;				/* number of calls to meter_response_time	*/
dcl  meter_invalid fixed bin;				/* number invalid state transitions		*/
dcl  meter_ovhd float;				/* total metering overhead in sec.		*/
dcl  meter_ovhd_call float;				/* metering ovrhead per call in msec.		*/
dcl  meter_time fixed bin (71);			/* total metering time in microseconds		*/
dcl  n_args fixed bin;				/* number of arguments			*/
dcl  prev_ptrs (1) ptr;				/* from metering_util_			*/
dcl  1 prev_total_wcte aligned like wct_entry;		/* dummy WCTE for previous totals		*/
dcl  range_no fixed bin;				/* vcpu range index				*/
dcl  report_sw bit (1);				/* true if report option specified		*/
dcl  reset_sw bit (1);				/* true if reset option specified		*/
dcl  tcmp1 ptr;					/* pointer to previous copy of tc_data		*/
dcl  tcmp2 ptr;					/* pointer to current copy of tc_data		*/
dcl  tt_arg bit (1);				/* ON => -total argument given		*/
dcl  wc_alph pic "zz9";				/* work class number for printing		*/
dcl  wc_arg bit (1);				/* ON => -work_class argument given		*/
dcl  wc_arg_num fixed bin;				/* work class number from -work_class arg	*/
dcl  wc_num fixed bin;				/* current work class number			*/

/* Static */

dcl  ANSWER_TABLE char (12) int static options (constant)
	init ("answer_table");			/* segment name of answer table		*/
dcl  CONTROL_DIR char (17) int static options (constant)
	init (">system_control_1");			/* directory where answer_table and MGT live	*/
dcl  init_sw bit (1) int static init ("0"b);		/* true if already initialized		*/
dcl  MAX_FLOAT float int static options (constant)
	init (99.99);				/* maximum floating point number we print	*/
dcl  MAX_WORK_CLASS fixed bin int static options (constant)
	init (16);				/* maximum work class allowed by system		*/
dcl  MGT char (3) int static options (constant)
	init ("mgt");				/* segment name of the MGT			*/
dcl  mgtp ptr int static init (null ());		/* pointer to MGT				*/
dcl  MYNAME char (15) int static options (constant)
	init ("response_meters");
dcl  static_ansp ptr int static init (null ());		/* pointer to answer table			*/
dcl  unique fixed bin int static init (0);		/* instance number for metering_util_		*/


/* Based */

dcl  arg char (arg_len) based (arg_ptr);		/* current argument				*/

%page;

/* External */

dcl  error_table_$bad_arg fixed bin (35) external;
dcl  error_table_$badopt fixed bin (35) external;
dcl  error_table_$inconsistent fixed bin (35) external;

/* Entry */

dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  metering_util_$define_regions entry options (variable);
dcl  metering_util_$fill_buffers entry (fixed bin, fixed bin (71), char (*), (*) ptr, (*) ptr, fixed bin (35));
dcl  metering_util_$reset entry (fixed bin, fixed bin (35));

/* Condition */

dcl  conversion condition;

/* Builtin */

dcl  addr builtin;
dcl  fixed builtin;
dcl  min builtin;
dcl  null builtin;
dcl  rtrim builtin;

%page;

/* Pick up and validate arguments.  If none "-report" assumed.					*/

	report_sw,
	     reset_sw,
	     tt_arg,
	     wc_arg = "0"b;

	call cu_$arg_count (n_args, code);
	if code ^= 0 then do;
	     call com_err_ (code, MYNAME);
	     return;
	end;

	if n_args = 0
	then report_sw = "1"b;
	else do arg_no = 1 to n_args;
	     call cu_$arg_ptr (arg_no, arg_ptr, arg_len, code);
	     if arg = "-report" then report_sw = "1"b;
	     else if arg = "-reset" | arg = "-rs" then reset_sw = "1"b;
	     else if arg = "-report_reset" | arg = "-rr" then do;
		report_sw = "1"b;
		reset_sw = "1"b;
	     end;
	     else if arg = "-work_class" | arg = "-wc" then do;
		wc_arg = "1"b;
		arg_no = arg_no + 1;
		call cu_$arg_ptr (arg_no, arg_ptr, arg_len, code);
		if code ^= 0 then do;
		     call com_err_ (code, MYNAME, "Work Class Number");
		     return;
		end;
		on conversion goto invalid_work_class;
		wc_arg_num = fixed (arg);
		revert conversion;
		if wc_arg_num < 0 | wc_arg_num > MAX_WORK_CLASS then do;
invalid_work_class:	     call com_err_ (error_table_$bad_arg, MYNAME, arg);
		     return;
		end;
	     end;
	     else if arg = "-total" | arg = "-tt" | arg = "-totals"
	     then tt_arg = "1"b;
	     else do;
		call com_err_ (error_table_$badopt, MYNAME, arg);
		return;
	     end;
	end;

	if ^reset_sw then report_sw = "1"b;
	if wc_arg & tt_arg then do;
	     call com_err_ (error_table_$inconsistent, MYNAME, "-work_class and -total");
	     return;
	end;
	if ^report_sw & (tt_arg | wc_arg) then do;
	     call com_err_ (error_table_$inconsistent, MYNAME, "Report options without -report");
	     return;
	end;


%page;

/* Initialize if not done already 								*/

	if ^init_sw then do;
	     call metering_util_$define_regions (unique, code,
		"tc_data", 0, "apt");
	     if code ^= 0 then do;
		call com_err_ (code, MYNAME, "Defining regions.");
		return;
	     end;
	     init_sw = "1"b;
	end;
	call metering_util_$fill_buffers (unique, meter_time,
	     formatted_meter_time, cur_ptrs, prev_ptrs, code);
	if code ^= 0 then do;
	     call com_err_ (code, MYNAME, "Filling buffers.");
	     return;
	end;

	call ioa_ ("^/Total metering time^-^a^/", formatted_meter_time);
%page;


/* Print the report if requested */

	if report_sw then do;

	     tcmp1 = prev_ptrs (1);			/* prev copy of tc_data			*/
	     tcmp2 = cur_ptrs (1);			/* current copy of tc_data			*/


	     prev_total_wcte.number_thinks,
		prev_total_wcte.number_queues,
		prev_total_wcte.total_think_time,
		prev_total_wcte.total_queue_time = 0;
	     cur_total_wcte.number_thinks,
		cur_total_wcte.number_queues,
		cur_total_wcte.total_think_time,
		cur_total_wcte.total_queue_time = 0;
	     do range_no = 1 to VCPU_RESPONSE_BOUNDS + 1;
		prev_total_wcte.number_processing (range_no),
		     prev_total_wcte.total_processing_time (range_no),
		     prev_total_wcte.total_vcpu_time (range_no) = 0;
		cur_total_wcte.number_processing (range_no),
		     cur_total_wcte.total_processing_time (range_no),
		     cur_total_wcte.total_vcpu_time (range_no) = 0;
	     end;


	     call fill_lcg;				/* pick up Load Control Group IDs		*/
	     call ioa_ ("WC  ---Thinks/--    ----Response Times by VCPU Range----  Load Control Group");
	     call ioa_ ("^4x---Queues---    -VCPU Range-     #  Avg   Avg   Resp");
	     call ioa_ ("^9x#  Avg      From    To    Int  VCPU   RT   Fact");

/* Print report type specified by arguments							*/

	     if wc_arg then do;			/* report on specified work class		*/
		wc_alph = wc_arg_num;
		call stats_for_work_class (addr (tcmp2 -> tcm.wcte (wc_arg_num)),
		     addr (tcmp1 -> tcm.wcte (wc_arg_num)), (wc_alph), lcg (wc_arg_num));
	     end;
	     else do;				/* all work classes or totals			*/

		do wc_num = 0 to MAX_WORK_CLASS;

		     if tcmp2 -> tcm.wcte (wc_num).defined then do;
			wc_alph = wc_num;
			if ^tt_arg then
			     call stats_for_work_class (addr (tcmp2 -> tcm.wcte (wc_num)),
				addr (tcmp1 -> tcm.wcte (wc_num)), (wc_alph), lcg (wc_num));

			cur_total_wcte.number_thinks
			     = cur_total_wcte.number_thinks + tcmp2 -> tcm.wcte (wc_num).number_thinks;
			cur_total_wcte.number_queues
			     = cur_total_wcte.number_queues + tcmp2 -> tcm.wcte (wc_num).number_queues;
			cur_total_wcte.total_think_time
			     = cur_total_wcte.total_think_time + tcmp2 -> tcm.wcte (wc_num).total_think_time;
			cur_total_wcte.total_queue_time
			     = cur_total_wcte.total_queue_time + tcmp2 -> tcm.wcte (wc_num).total_queue_time;
			do range_no = 1 to VCPU_RESPONSE_BOUNDS + 1;
			     cur_total_wcte.number_processing (range_no)
				= cur_total_wcte.number_processing (range_no)
				+ tcmp2 -> tcm.wcte (wc_num).number_processing (range_no);
			     cur_total_wcte.total_processing_time (range_no)
				= cur_total_wcte.total_processing_time (range_no)
				+ tcmp2 -> tcm.wcte (wc_num).total_processing_time (range_no);
			     cur_total_wcte.total_vcpu_time (range_no)
				= cur_total_wcte.total_vcpu_time (range_no)
				+ tcmp2 -> tcm.wcte (wc_num).total_vcpu_time (range_no);
			end;

			prev_total_wcte.number_thinks
			     = prev_total_wcte.number_thinks + tcmp1 -> tcm.wcte (wc_num).number_thinks;
			prev_total_wcte.number_queues
			     = prev_total_wcte.number_queues + tcmp1 -> tcm.wcte (wc_num).number_queues;
			prev_total_wcte.total_think_time
			     = prev_total_wcte.total_think_time + tcmp1 -> tcm.wcte (wc_num).total_think_time;
			prev_total_wcte.total_queue_time
			     = prev_total_wcte.total_queue_time + tcmp1 -> tcm.wcte (wc_num).total_queue_time;
			do range_no = 1 to VCPU_RESPONSE_BOUNDS + 1;
			     prev_total_wcte.number_processing (range_no)
				= prev_total_wcte.number_processing (range_no)
				+ tcmp1 -> tcm.wcte (wc_num).number_processing (range_no);
			     prev_total_wcte.total_processing_time (range_no)
				= prev_total_wcte.total_processing_time (range_no)
				+ tcmp1 -> tcm.wcte (wc_num).total_processing_time (range_no);
			     prev_total_wcte.total_vcpu_time (range_no)
				= prev_total_wcte.total_vcpu_time (range_no)
				+ tcmp1 -> tcm.wcte (wc_num).total_vcpu_time (range_no);
			end;


		     end;
		end;
		call stats_for_work_class (addr (cur_total_wcte), addr (prev_total_wcte),
		     "All", "");
	     end;


	     meter_calls = tcmp2 -> tcm.meter_response_time_calls
		- tcmp1 -> tcm.meter_response_time_calls;
	     meter_invalid = tcmp2 -> tcm.meter_response_time_invalid
		- tcmp1 -> tcm.meter_response_time_invalid;
	     meter_ovhd = (tcmp2 -> tcm.meter_response_time_overhead
		- tcmp1 -> tcm.meter_response_time_overhead);
	     if meter_calls = 0 then do;
		meter_ovhd_call = 0.0;
		meter_ovhd = 0.0;
	     end;
	     else do;
		meter_ovhd_call = meter_ovhd * 1.0e-3 / meter_calls;
		meter_ovhd = meter_ovhd * 1.0e2 / (tcmp2 -> tcm.processor_time - tcmp1 -> tcm.processor_time);
	     end;
	     call ioa_ ("^/^10d calls to meter_response_time ^10d invalid transitions.^/^11xOverhead = ^6.2f% (^7.3f ms./call)^/",
		meter_calls, meter_invalid, meter_ovhd, meter_ovhd_call);

	end;
%page;

/* Reset if requested 									*/

	if reset_sw then do;
	     call metering_util_$reset (unique, code);
	     if code ^= 0 then do;
		call com_err_ (code, MYNAME, "Resetting.");
		return;
	     end;
	end;

	return;
%page;

/* Internal Procedure to fill the array "lgc" with Load Control Group
   IDs corresponding to Work Classes								*/

fill_lcg: proc;

dcl  curshift fixed bin;
dcl  mgt_ix fixed bin;


	lcg (*) = "";
	lcg (0) = "Init";

	if mgtp = null () then do;
	     call hcs_$initiate (CONTROL_DIR, MGT, "", 0, 1, mgtp, code);
	     if mgtp = null () then return;
	end;

	if static_ansp = null () then do;
	     call hcs_$initiate (CONTROL_DIR, ANSWER_TABLE, "", 0, 1, static_ansp, code);
	     if static_ansp = null () then return;
	end;
	ansp = static_ansp;

	curshift = anstbl.shift;

	do mgt_ix = MAX_WORK_CLASS + 1 to mgt.current_size;
	     mgtep = addr (mgt.entry (mgt_ix));
	     lcg (group.int_wc (curshift)) =
		lcg (group.int_wc (curshift)) ||
		rtrim (group.group_id) || " ";
	end;

     end fill_lcg;
%page;
/* Internal Procedure to compute statistics for one work class and
   print these statistics									*/

stats_for_work_class:
     proc (cur_wcp, prev_wcp, wc_number_alph, lcg_info);

/* Parameter */

dcl  cur_wcp ptr;					/* pointer to current copy of WCTE		*/
dcl  prev_wcp ptr;					/* pointer to previous copy of WCTE		*/
dcl  wc_number_alph char (*);				/* printable work class number		*/
dcl  lcg_info char (*) varying;			/* Load Control Group information		*/

/* Automatic */

dcl  avg_queue_rt float;				/* average (pro-rated) queue time / interaction	*/
dcl  avg_queue float;				/* average queue time			*/
dcl  avg_think float;				/* average think time			*/
dcl  line_no fixed bin;				/* current output line no w/i WC		*/
dcl  n_queue fixed bin;				/* number of queues				*/
dcl  n_resp fixed bin;				/* number of interactions			*/
dcl  n_resp_wc fixed bin;			/* number of interactions for current work class	*/
dcl  n_think fixed bin;				/* number of thinks				*/
dcl  range_from float;				/* begin of range in sec			*/
dcl  range_to float;				/* end of range in sec			*/
dcl  total_rt float;				/* sum of processing times			*/
dcl  total_rt_wc float;				/* sum of processing times for work class	*/
dcl  total_vcpu float;				/* sum of VCPU times			*/
dcl  total_vcpu_wc float;				/* sum of VCPU times for work class		*/






	n_resp_wc = 0;
	do range_no = 1 to VCPU_RESPONSE_BOUNDS + 1;
	     n_resp_wc = n_resp_wc + cur_wcp -> wct_entry.number_processing (range_no)
		- prev_wcp -> wct_entry.number_processing (range_no);
	end;
	if n_resp_wc <= 0 then return;
	total_rt_wc, total_vcpu_wc = 0;

	line_no = 1;

	n_think = cur_wcp -> wct_entry.number_thinks
	     - prev_wcp -> wct_entry.number_thinks;
	n_queue = cur_wcp -> wct_entry.number_queues
	     - prev_wcp -> wct_entry.number_queues;
	if n_think = 0
	then avg_think = 0.0;
	else do;
	     avg_think = (cur_wcp -> wct_entry.total_think_time
		- prev_wcp -> wct_entry.total_think_time) / 1.0e6;
	     avg_think = avg_think / n_think;
	end;
	if n_queue = 0
	then avg_queue = 0.0;
	else do;
	     avg_queue = (cur_wcp -> wct_entry.total_queue_time
		- prev_wcp -> wct_entry.total_queue_time) / 1.0e6;
	     avg_queue = avg_queue / n_queue;
	end;

	avg_queue_rt = avg_queue * min (n_queue, n_resp_wc) / n_resp_wc;

	if avg_think > MAX_FLOAT then avg_think = MAX_FLOAT;
	if avg_queue > MAX_FLOAT then avg_queue = MAX_FLOAT;

/* Go through the range of virtual cpu times for the work class					*/

	do range_no = 1 to VCPU_RESPONSE_BOUNDS + 1;
	     if range_no = 1
	     then range_from = 0.0;
	     else range_from = tcmp2 -> tcm.vcpu_response_bounds (range_no - 1) / 1.0e6;
	     if range_no = VCPU_RESPONSE_BOUNDS + 1
	     then range_to = MAX_FLOAT;
	     else range_to = tcmp2 -> tcm.vcpu_response_bounds (range_no) / 1.0e6;

	     n_resp = cur_wcp -> wct_entry.number_processing (range_no)
		- prev_wcp -> wct_entry.number_processing (range_no);
	     total_vcpu = (cur_wcp -> wct_entry.total_vcpu_time (range_no)
		- prev_wcp -> wct_entry.total_vcpu_time (range_no)) / 1.0e6;
	     total_vcpu_wc = total_vcpu_wc + total_vcpu;
	     total_rt = (cur_wcp -> wct_entry.total_processing_time (range_no)
		- prev_wcp -> wct_entry.total_processing_time (range_no)) / 1.0e6;
	     total_rt_wc = total_rt_wc + total_rt;
	     call print_stats (n_resp, total_rt, total_vcpu, "0"b);
	end;

	call print_stats (n_resp_wc, total_rt_wc, total_vcpu_wc, "1"b);
	return;


%page;
/* Internal Procedure to print one line of statistics						*/

print_stats:
	proc (N_resp, T_rt, T_vcpu, total_flag);

/* Parameter */

dcl  N_resp fixed bin;				/* number of interactions			*/
dcl  T_rt float;					/* sum of processing time			*/
dcl  T_vcpu float;					/* sum of virtual cpu time			*/
dcl  total_flag bit (1);				/* ON => printing total for work class		*/

/* Automatic */

dcl  avg_rt float;					/* average response time			*/
dcl  avg_vcpu float;				/* average virtual cpu time			*/
dcl  resp_fact float;				/* response factor = avg resp time/avg vcpu time	*/

	     if N_resp = 0 then do;
		avg_vcpu = 0.0;
		avg_rt = 0.0;
		resp_fact = 0.0;
	     end;
	     else do;
		avg_vcpu = T_vcpu / N_resp;
		avg_rt = T_rt / N_resp + avg_queue_rt;

		resp_fact = avg_rt / avg_vcpu;

		if avg_vcpu > MAX_FLOAT then avg_vcpu = MAX_FLOAT;
		if avg_rt > MAX_FLOAT then avg_rt = MAX_FLOAT;
		if resp_fact > MAX_FLOAT then resp_fact = MAX_FLOAT;
	     end;

	     if N_resp > 0 then do;
		call ioa_ ("^[^[^/^3a ^6d ^5.2f    ^2s^;^3s^4x^6d ^5.2f    ^]^;^6s^20x^]^[^2(----- ^)^2s^;^2(^5.2f ^)^]^6d ^3(^5.2f ^)^[ ^a^;^]",
		     (line_no <= 2), line_no, wc_number_alph, n_think, avg_think,
		     n_queue, avg_queue, total_flag, range_from, range_to,
		     N_resp, avg_vcpu, avg_rt, resp_fact,
		     (line_no = 1), lcg_info);
		line_no = line_no + 1;
	     end;

	end print_stats;


     end stats_for_work_class;


%page; %include answer_table;
%page; %include mgt;
%page; %include tcm;
%page; %include hc_lock;
%page; %include user_table_header;

     end response_meters;
