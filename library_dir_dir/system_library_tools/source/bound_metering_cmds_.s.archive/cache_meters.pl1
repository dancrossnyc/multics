/* ***********************************************************
   *						 *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *						 *
   * Copyright (c) 1972 by Massachusetts Institute of	 *
   * Technology and Honeywell Information Systems, Inc.	 *
   *						 *
   *********************************************************** */
/* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */

/*   Written October 1983 by R. Coppola to display cache error counters */
/*   Modified: 2/15/84 by Greg Texada to add cache_meters_$for_monitor  */

cache_meters:
     proc;

/* Automatic */

dcl  INX fixed bin;
dcl  (all_sw, subroutine) bit (1);
dcl  argc fixed bin (21);				/* character index into current arg */
dcl  argl fixed bin (21);
dcl  argp ptr;
dcl  brief_sw bit (1);
dcl  code fixed bin (35);
dcl  cpu_string bit (MAX_CPUS) aligned;
dcl  (cur_ptr, prev_ptr) (1) ptr;
dcl  meter_cur (1) ptr;
dcl  1 cache_counters (MAX_CPUS) aligned,
       2 cpu_tag fixed bin (35),
       2 cache_type fixed bin (35),			/* 0 = L68, no cache
						   1 = L68, 2K
						   2 = DPS8, 8k
						   3 = VSSC, 8k
						   4 = VSSC, 16k
						   5 = VSSC, 32k */
       2 cache_err_ctrs (17) fixed bin (35);
dcl  do_totals bit (1);
dcl  field_count fixed bin (35);
dcl  formatted_time (MAX_CPUS) char (10);
dcl  found_name bit (1);
dcl  got_cpu (MAX_CPUS + 1) bit (1);
dcl  had_output bit (1);
dcl  have_ctrs bit (1);
dcl  (i, ii) fixed bin;
dcl  j fixed bin;
dcl  k fixed bin;
dcl  l fixed bin;
dcl  1 line unal,
       2 title char (31),
       2 field (9) char (12);
dcl  line_length fixed bin (17);
dcl  long bit (1);
dcl  meter_time (MAX_CPUS) fixed bin (71);
dcl  nargs fixed bin;
dcl  ncpus fixed bin;
dcl  nprint fixed bin;
dcl  pic12 picture "zzzzzzzzzzz9";
dcl  meter_prev (1) ptr;
dcl  print_fault (32) bit (1);
dcl  report bit (1);
dcl  reset bit (1);
dcl  single_fault_index fixed bin;
dcl  sort bit (1);
dcl  temp_sw bit (1) init ("0"b);
dcl  total_err_ctrs (17) fixed bin (35);
dcl  total_sw bit (1);
dcl  totals_only bit (1);


/* Static */

dcl  CPU_TAGS char (16) int static options (constant) init ("ABCDEFGHabcdefgh");
dcl  meter_unique (8) fixed bin int static init (0, 0, 0, 0, 0, 0, 0, 0);

dcl  my_name char (12) init ("cache_meters") int static options (constant);
dcl  entry_names (8) char (25) int static options (constant)
	init ("cpu_a_cache_err_ctr_array", "cpu_b_cache_err_ctr_array", "cpu_c_cache_err_ctr_array",
	"cpu_d_cache_err_ctr_array", "cpu_e_cache_err_ctr_array", "cpu_f_cache_err_ctr_array",
	"cpu_g_cache_err_ctr_array", "cpu_h_cache_err_ctr_array");

/* Based */

dcl  arg char (argl) based (argp);

dcl  1 prev_cache_ctrs (1) like cur_cache_ctrs based (prev_ptr (1)),
     1 cur_cache_ctrs (1) based (cur_ptr (1)),
       2 cache_type fixed bin (35),			/* 0 = L68, no cache
						   1 = L68, 2K
						   2 = DPS8, 8k
						   3 = VSSC, 8k
						   4 = VSSC, 16k
						   5 = VSSC, 32k */
       2 cache_err_ctrs (17) fixed bin (35);



/* Entry */

dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  get_line_length_$switch entry (ptr, fixed bin (35)) returns (fixed bin);
dcl  ioa_ entry options (variable);
dcl  metering_util_$define_regions entry options (variable);
dcl  metering_util_$fill_buffers entry (fixed bin, fixed bin (71), char (*), (*) ptr, (*) ptr, fixed bin (35));
dcl  metering_util_$reset entry (fixed bin, fixed bin (35));

/* External */

dcl  error_table_$bad_arg fixed bin (35) external;
dcl  error_table_$badopt fixed bin (35) external;
%page;


/* Pick up and validate each argument			  */

	ncpus = 0;
	totals_only, total_sw = "1"b;			/* default */
	subroutine, all_sw, brief_sw, cpu_string, do_totals, had_output, long, report, reset, sort, got_cpu (*) = "0"b;
	call cu_$arg_count (nargs);
	do i = 1 to nargs;
	     call cu_$arg_ptr (i, argp, argl, code);

	     if arg = "-report" then report = "1"b;
	     else if arg = "-reset" | arg = "-rs" then reset = "1"b;
	     else if arg = "-report_reset" | arg = "-rr" then do;
		report = "1"b;
		reset = "1"b;
		end;

	     else if arg = "-brief" | arg = "-bf" then brief_sw = "1"b;

	     else if arg = "-tt" | arg = "-total" then do_totals = "1"b;

	     else if arg = "-cpu" then do;
		call cu_$arg_ptr (i + 1, argp, argl, code);
		if code ^= 0 then do;
		     if (i + 1) > nargs then do;	/* user wants ALL cpus */
do_all_cpus:
			do j = 1 to MAX_CPUS;
			     substr (cpu_string, j, 1) = "1"b;
			end;
			go to done_cpu_arg;
			end;

		     else do;
			call com_err_ (code, my_name, "");
			return;
			end;
		     end;
		else if substr (arg, 1, 1) = "-" then goto do_all_cpus;

		i = i + 1;

		if argl > 8 then do;
		     call com_err_ (0, my_name, "Too many CPUs specified (^a).", arg);
		     return;
		     end;

		if verify (arg, CPU_TAGS) ^= 0 then do;
		     call com_err_ (0, my_name, "Invalid CPU Tag(s) ^a", arg);
		     return;
		     end;
		do argc = 1 to argl;
		     substr (cpu_string, mod (index (CPU_TAGS, substr (arg, argc, 1)) - 1, 8) + 1, 1) = "1"b;
		end;
done_cpu_arg:
		totals_only = "0"b;
		total_sw = "0"b;
		end;

	     else do;
		call com_err_ (error_table_$badopt, my_name, arg);
		return;
		end;
	end;
	code = 0;
	call init (meter_unique);
	if code ^= 0 then return;

	if ^report & ^reset then report = "1"b;		/* default is -report			*/
	if do_totals then total_sw = "1"b;

	if report then do;				/* how many CPUs per line? */
	     line_length = get_line_length_$switch (null (), code);
	     if line_length < 132 then
		line_length = 4;
	     else line_length = 9;
	     if code ^= 0 then line_length = 9;
	     code = 0;
	     call accum_meters (meter_unique);
	     if code ^= 0 then return;

	     if total_sw then do;			/* fill in TOTALs array */
		if ^totals_only then ncpus = ncpus + 1;
		cache_counters (ncpus).cpu_tag = MAX_CPUS + 1;
		cache_counters (ncpus).cache_type = 0;
		do i = 1 to 17;
		     cache_counters (ncpus).cache_err_ctrs (i) = total_err_ctrs (i);
		     if total_err_ctrs (i) ^= 0 then got_cpu (ncpus) = "1"b;
		end;
		end;
	     call ioa_ ("^/Total Metering Time:^-^a^/", formatted_time (1));

	     do i = 1 to ncpus + 1 by line_length;	/* max of 4/9 cpus per screen */
		nprint = min (line_length, ncpus + 1 - i);
		if i >= nprint then
		     l = ncpus;
		else l = nprint;
		have_ctrs = "0"b;
		do j = i to l while (have_ctrs = "0"b);
		     if got_cpu (j) then have_ctrs = "1"b;
		end;
		if ^have_ctrs then goto try_next_set;
		had_output = "1"b;			/* printed something */
		string (line) = "";
		line.title = "CPU Tag";
		do j = 1 to nprint;
		     INX = (i + j - 1);
		     if cache_counters (INX).cpu_tag ^= MAX_CPUS + 1 then
			line.field (j) = "           " || CPU_NAMES (cache_counters (INX).cpu_tag);
		     else line.field (j) = "         ALL";
		end;
		call ioa_ ("^a", string (line));
		string (line) = "";

		line.title = "Cache Type";
		do j = 1 to nprint;
		     INX = (i + j - 1);
		     if cache_counters (INX).cpu_tag ^= MAX_CPUS + 1 then
			line.field (j) = "    " || CACHE_TYPES (cache_counters (INX).cache_type);
		     else line.field (j) = "";
		end;
		call ioa_ ("^a", string (line));

		do k = 1 to NO_CACHE_ERR_TYPES;
		     string (line) = "";
		     field_count = 0;
		     if k = 2 then do;
			line.title = "DPS8 Write Notify Counters";
			call ioa_ ("^/^a", string (line));
			end;

		     line.title = CACHE_ERROR_NAME (k);

		     do j = 1 to nprint;
			INX = (i + j - 1);
			field_count = field_count + cache_counters (INX).cache_err_ctrs (k);
			pic12 = cache_counters (INX).cache_err_ctrs (k);
			line.field (j) = pic12;
		     end;
		     if brief_sw = "1"b then
			if field_count = 0 then go to skip_it;
		     call ioa_ ("^a", string (line));
skip_it:
		end;
		call ioa_ ("^/");
try_next_set:
	     end;
	     if ^had_output then
		call ioa_ ("^/All cache counters ^[for selected CPU'S ^]were equal to zero.", ^totals_only);
	     end;

	if reset then do;
	     do i = 1 to MAX_CPUS;
		call metering_util_$reset (meter_unique (i), code);
		if code ^= 0 then call com_err_ (code, my_name, "Resetting");
	     end;
	     end;
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


cache_meters_$for_monitor:
     entry (a_cache_counters_ptr, a_ncpus, a_code);


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* This entry provides a method for monitor_cache to get the cache memory errors that	*/
/* occured between calls.							*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


dcl  a_cache_counters_ptr ptr,
     a_ncpus fixed bin,
     a_code fixed bin (35),
     (
     monitor_cur (1),
     monitor_prev (1)
     ) ptr,
     monitor_unique (8) fixed bin int static init (0, 0, 0, 0, 0, 0, 0, 0),
     1 a_cache_counters (MAX_CPUS) like cache_counters aligned based (a_cache_counters_ptr);

	a_ncpus, ncpus, code, a_code = 0;
	subroutine = "1"b;
	cpu_string = (8)"1"b;			/* do em all				*/
	totals_only = "0"b;
	call init (monitor_unique);
	if code ^= 0 then goto RETURN;
	call accum_meters (monitor_unique);
	if code ^= 0 then goto RETURN;
	if a_cache_counters_ptr ^= null () then do;	/* if null, then is first "init" call		*/
	     a_cache_counters (*) = cache_counters (*);	/* give caller the data			*/
	     a_ncpus = ncpus;
	     end;
	do i = 1 to MAX_CPUS;			/* reset for interval calls			*/
	     call metering_util_$reset (monitor_unique (i), (0));
	end;
RETURN:
	a_code = code;
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


init:
     proc (munique);

/* Initialize if this is the first call			  */

dcl  munique (8) fixed bin parameter;

	do i = 1 to MAX_CPUS;
	     if munique (i) = 0 then do;
		call metering_util_$define_regions (munique (i), code, "wired_hardcore_data", entry_names (i), 18);
		if code ^= 0 then
		     if ^subroutine then call com_err_ (code, my_name, "Initializing");
		end;
	end;
     end init;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


accum_meters:
     proc (munique);

dcl  munique (8) fixed bin parameter;


	total_err_ctrs (*) = 0;

	if totals_only then ncpus = 1;
	do i = 1 to MAX_CPUS;
	     call metering_util_$fill_buffers (munique (i), meter_time (i), formatted_time (i), cur_ptr, prev_ptr, code)
		;
	     if code ^= 0 then do;
		if ^subroutine then call com_err_ (code, my_name, "Filling buffers");
		return;
		end;

	     if cur_cache_ctrs (1).cache_type = L68_NONE then goto try_next_cpu;
	     if (^subroutine)
		& (sum (cur_cache_ctrs (1).cache_err_ctrs (*)) - sum (prev_cache_ctrs (1).cache_err_ctrs (*)) = 0)
	     then					/* the subroutine needs ALL data, even zero counters */
		goto try_next_cpu;
	     if substr (cpu_string, i, 1) | total_sw then do;
		if ^totals_only then ncpus = ncpus + 1;
		got_cpu (ncpus) = "1"b;
		cache_counters (ncpus).cpu_tag = i;
		cache_counters (ncpus).cache_type = cur_cache_ctrs (1).cache_type;

		do j = 1 to 17;
		     cache_counters (ncpus).cache_err_ctrs (j) =
			cur_cache_ctrs (1).cache_err_ctrs (j) - prev_cache_ctrs (1).cache_err_ctrs (j);

		     total_err_ctrs (j) = total_err_ctrs (j) + cache_counters (ncpus).cache_err_ctrs (j);
		end;
		if (^totals_only) & (^subroutine) then	/* the subroutine needs ALL data, even zero counters */
		     if substr (cpu_string, i, 1) = "0"b then do;
						/* if this wasn't selected, undo it */
			ncpus = ncpus - 1;
			got_cpu (ncpus) = "0"b;
			end;
		end;
try_next_cpu:
	end;

     end accum_meters;
%page;
%include fim_meters;
%page;

     end cache_meters;
