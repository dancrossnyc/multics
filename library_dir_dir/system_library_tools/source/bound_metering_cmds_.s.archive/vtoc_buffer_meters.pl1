/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-01-16,Fawcett), approve(86-04-10,MCR7383),
     audit(86-05-27,Wallman), install(86-07-18,MR12.0-1098):
     Add support for 512_WORD_IO devices.
                                                   END HISTORY COMMENTS */


/* format: style3 */
vtoc_buffer_meters:
     proc;

/*  Program to print metering data from vtoc_buffer_seg

    Rewritten for new VTOC buffer strategy, July 1982, J. Bongiovanni

*/

/*  Automatic  */

dcl	arg_no		fixed bin;
dcl	argl		fixed bin (21);
dcl	argp		ptr;
dcl	code		fixed bin (35);
dcl	cur_ptrs		(1) ptr;
dcl	formatted_time	char (10);
dcl	meter_time	fixed bin (71);
dcl	meter_time_sec	float;
dcl	n_args		fixed bin;
dcl	prev_ptrs		(1) ptr;
dcl	report_sw		bit (1) aligned;
dcl	reset_sw		bit (1) aligned;
dcl	skips		fixed bin (35);
dcl	steps		fixed bin (35);

/*  Static  */

dcl	init		bit (1) aligned int static init ("0"b);
dcl	MYNAME		char (18) int static options (constant) init ("vtoc_buffer_meters");
dcl	unique		fixed bin int static;

/*  Based  */

dcl	arg		char (argl) based (argp);
dcl	1 cur_vtoc_buffer	aligned like vtoc_buffer based (cur_ptrs (1));
dcl	1 prev_vtoc_buffer	aligned like vtoc_buffer based (prev_ptrs (1));

/*  External  */

dcl	error_table_$badopt fixed bin (35) external;

/*  Entry  */

dcl	com_err_		entry options (variable);
dcl	cu_$arg_count	entry (fixed bin, fixed bin (35));
dcl	cu_$arg_ptr	entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl	ioa_		entry options (variable);
dcl	metering_util_$define_regions
			entry options (variable);
dcl	metering_util_$fill_buffers
			entry (fixed bin, fixed bin (71), char (*), (*) ptr, (*) ptr, fixed bin (35));
dcl	metering_util_$reset
			entry (fixed bin, fixed bin (35));

/*  Builtin  */

dcl	float		builtin;
dcl	size		builtin;

%page;
/*  Pick up and validate arguments  */

	call cu_$arg_count (n_args, code);
	if code ^= 0
	then do;
		call com_err_ (code, MYNAME);
		return;
	     end;

	report_sw, reset_sw = "0"b;

	do arg_no = 1 to n_args;
	     call cu_$arg_ptr (arg_no, argp, argl, code);
	     if arg = "-report"
	     then report_sw = "1"b;
	     else if arg = "-reset" | arg = "-rs"
	     then reset_sw = "1"b;
	     else if arg = "-report_reset" | arg = "-rr"
	     then report_sw, reset_sw = "1"b;
	     else do;
		     call com_err_ (error_table_$badopt, MYNAME, arg);
		     return;
		end;
	end;

	if ^report_sw & ^reset_sw
	then report_sw = "1"b;
%page;
/*  Initialize if this is the first time called this process   */

	if ^init
	then do;
		vtoc_buf_n_buffers, vtoc_buf_n_buckets = 1;

		call metering_util_$define_regions (unique, code, "vtoc_buffer_seg", 0, size (vtoc_buffer));
		if code ^= 0
		then do;
			call com_err_ (code, MYNAME, "From metering_util_$define_regions");
			return;
		     end;
		init = "1"b;
	     end;


/*  Get current buffers  */

	call metering_util_$fill_buffers (unique, meter_time, formatted_time, cur_ptrs, prev_ptrs, code);
	if code ^= 0
	then do;
		call com_err_ (code, MYNAME, "Filling buffers");
		return;
	     end;

	call ioa_ ("^/Total metering time:^-^a^/", formatted_time);
%page;
/*  Print report if requested  */

	if report_sw
	then do;

		meter_time_sec = float (meter_time) / 1.0e6;
		call ioa_ ("Routine^20x# calls ATB(sec)^/");

		call PRINT_CALL ("get_vtoce", cur_vtoc_buffer.meters.call_get - prev_vtoc_buffer.meters.call_get, "",
		     0);
		call PRINT_CALL ("put_vtoce", cur_vtoc_buffer.meters.call_put - prev_vtoc_buffer.meters.call_put, "",
		     0);
		call PRINT_CALL ("alloc_and_put_vtoce",
		     cur_vtoc_buffer.meters.call_alloc - prev_vtoc_buffer.meters.call_alloc, "", 0);
		call PRINT_CALL ("free_vtoce", cur_vtoc_buffer.meters.call_free - prev_vtoc_buffer.meters.call_free,
		     "", 0);
		call PRINT_CALL ("await_vtoce",
		     cur_vtoc_buffer.meters.call_await - prev_vtoc_buffer.meters.call_await, "", 0);
		call PRINT_CALL ("GET_BUFFERS",
		     cur_vtoc_buffer.meters.get_buffer_calls - prev_vtoc_buffer.meters.get_buffer_calls, "Hits",
		     cur_vtoc_buffer.meters.get_buffer_hits - prev_vtoc_buffer.meters.get_buffer_hits);
		call PRINT_CALL ("WAIT", cur_vtoc_buffer.meters.wait_calls - prev_vtoc_buffer.meters.wait_calls,
		     "TC Waits", cur_vtoc_buffer.meters.wait_os - prev_vtoc_buffer.meters.wait_os);

		call ioa_ ("^/Buffer Allocation^/^27x^6x# ATB(sec)^/");

		steps = cur_vtoc_buffer.meters.steps - prev_vtoc_buffer.meters.steps;
		skips = (cur_vtoc_buffer.meters.skip_os - prev_vtoc_buffer.meters.skip_os)
		     + (cur_vtoc_buffer.meters.skip_hot - prev_vtoc_buffer.meters.skip_hot)
		     + (cur_vtoc_buffer.meters.skip_wait - prev_vtoc_buffer.meters.skip_wait);

		call PRINT_STEPS ("Steps", steps, "", 0);
		call PRINT_STEPS ("Skips", skips, "steps", steps);
		call PRINT_STEPS ("  os", cur_vtoc_buffer.meters.skip_os - prev_vtoc_buffer.meters.skip_os, "skips",
		     skips);
		call PRINT_STEPS ("  hot", cur_vtoc_buffer.meters.skip_hot - prev_vtoc_buffer.meters.skip_hot,
		     "skips", skips);
		call PRINT_STEPS ("  wait", cur_vtoc_buffer.meters.skip_wait - prev_vtoc_buffer.meters.skip_wait,
		     "skips", skips);

		call ioa_ ("^/Disk I/Os^/^27x^6x# ATB(sec)^/");

		call PRINT_IO ("Reads", cur_vtoc_buffer.meters.disk_reads - prev_vtoc_buffer.meters.disk_reads);
		call PRINT_IO ("Writes", cur_vtoc_buffer.meters.disk_writes - prev_vtoc_buffer.meters.disk_writes);
		call PRINT_IO ("RAR", cur_vtoc_buffer.meters.soft_rar - prev_vtoc_buffer.meters.soft_rar);
		call ioa_ ("^/");

	     end;
%page;
/*  Reset buffers if requested  */

	if reset_sw
	then do;
		call metering_util_$reset (unique, code);
		if code ^= 0
		then do;
			call com_err_ (code, MYNAME, "Resetting");
			return;
		     end;
	     end;


	return;
%page;
/*  Internal Procedure to compute Average Time Between events in seconds  */

ATB:
     proc (N) returns (float);

dcl	N		fixed bin (35);

	if N = 0
	then return (0.0);
	else return (meter_time_sec / float (N));

     end ATB;
%page;
/*  Internal Procedures to print various lines  */

PRINT_CALL:
     proc (Routine, N_Calls, Extra_Name, N_Extra);

dcl	Routine		char (*);
dcl	N_Calls		fixed bin (35);
dcl	Extra_Name	char (*);
dcl	N_Extra		fixed bin (35);

dcl	pct_calls		float;

	if (Extra_Name ^= "")
	then do;
		if N_Calls = 0
		then pct_calls = 0.0;
		else pct_calls = (float (N_Extra) / float (N_Calls)) * 100.0;
	     end;

	call ioa_ ("^27a ^6d ^8.2f^[ ^6d ^8a (^5.1f% of calls)^;^3s^]", Routine, N_Calls, ATB (N_Calls),
	     (Extra_Name ^= ""), N_Extra, Extra_Name, pct_calls);

     end PRINT_CALL;



PRINT_STEPS:
     proc (Step_Name, N_Steps, Pct_Name, Pct_N);

dcl	Step_Name		char (*);
dcl	N_Steps		fixed bin (35);
dcl	Pct_Name		char (*);
dcl	Pct_N		fixed bin (35);

dcl	pct_steps		float;

	if (Pct_Name ^= "")
	then do;
		if Pct_N = 0
		then pct_steps = 0.0;
		else pct_steps = (float (N_Steps) / float (Pct_N)) * 100.0;
	     end;

	call ioa_ ("^27a ^6d ^8.2f^[ ^5.1f% of ^a^;^2s^]", Step_Name, N_Steps, ATB (N_Steps), (Pct_Name ^= ""),
	     pct_steps, Pct_Name);

     end PRINT_STEPS;



PRINT_IO:
     proc (IO_Name, IO_N);

dcl	IO_Name		char (*);
dcl	IO_N		fixed bin (35);

	call ioa_ ("^27a ^6d ^8.2f", IO_Name, IO_N, ATB (IO_N));

     end PRINT_IO;
%page;
%include vtoc_buffer;

     end vtoc_buffer_meters;
