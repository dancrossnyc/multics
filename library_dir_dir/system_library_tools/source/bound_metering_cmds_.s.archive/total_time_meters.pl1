/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Updated by Alan Bier - March 1974 */
/* Modified May 1980 by T. Casey to split Other into Virtual CPU Time and Other Overhead,
   -		         and to print a third column, %NI (percent of non-Idle) */
/* Modified April 1981 by J. Bongiovanni to print Other Fault and fix some errors */
/* Modified November 1984 by M. Pandolf to include hc_lock. */


ttm: total_time_meters: proc;

dcl (argp, sstp1, sstp2, tcdp1, tcdp2) ptr static;
dcl  com_err_ entry options (variable);
dcl (sum, ni_sum, ave_time, count, pc, ni_pc, time, meter_time, ni_meter_time, idle, fault_int_time) float bin;
dcl  metering_time fixed bin (71);
dcl  formatted_time char (10);
dcl  current_ptrs (2) ptr;
dcl  previous_ptrs (2) ptr;
dcl  cu_$arg_count entry returns (fixed bin);
dcl (argl, i) fixed bin;
dcl  code fixed bin (35);
dcl (rsw, repsw) bit (1) init ("0"b);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  arg char (argl) based (argp);
dcl  metering_util_$define_regions entry options(variable);
dcl  metering_util_$fill_buffers entry (fixed bin, fixed bin(71), char(*), (*) ptr, (*) ptr, fixed bin(35));
dcl  metering_util_$reset entry (fixed bin, fixed bin(35));
dcl  unique fixed bin static init (0);
dcl  prt_sw bit (1) aligned init ("1"b);
dcl  error_table_$badopt ext fixed bin (35);
dcl  MYNAME char (17) init ("total_time_meters") int static options (constant);
dcl  size builtin;
		    

/*  */

/* If we haven't yet allocated the static buffers, do so. */

	if unique = 0 then do;
	     call metering_util_$define_regions (unique, code,
		"tc_data", 0, "work_class_table",
		"sst", 0, size (sst));
	     if code ^= 0 then do;
		call com_err_ (code, MYNAME, "Defining metering regions.");
		return;
	     end;
	end;

/* Process arguments */

	do i = 1 to cu_$arg_count ();
	     call cu_$arg_ptr (i, argp, argl, code);
	     if code ^= 0 then go to endargs;
	     if arg = "-reset" | arg = "-rs" then rsw = "1"b;
	     else if arg = "-report_reset" | arg = "-rr" then rsw, repsw = "1"b;
	     else do;
		call com_err_ (error_table_$badopt, "ttm", arg);
		return;
	     end;
	end;

endargs:	if ^rsw then repsw = "1"b;

/* Initialize */

	call metering_util_$fill_buffers (unique, metering_time, formatted_time,
	     current_ptrs, previous_ptrs, code);
	if code^=0 then do;
	     call com_err_ (code, MYNAME, "Filling buffers.");
	     return;
	end;
	tcdp1 = previous_ptrs (1);
	sstp1 = previous_ptrs (2);
	tcdp2 = current_ptrs (1);
	sstp2 = current_ptrs (2);
	call ioa_ ("^/Total metering time ^a^/", formatted_time);

	if ^repsw then go to reset_code;

	meter_time = tcdp2 -> tcm.processor_time - tcdp1 -> tcm.processor_time; /* compute total processor time */

	call ioa_ ("^21t%^27t%NI^36tAVE^/");		/* print heading */

/* Compute idle now, for use in computing the values in the %NI column */

	idle = tcdp2 -> tcm.zero_idle - tcdp1 -> tcm.zero_idle; /* zero idle and NMP idle are true idle, while */
	idle = idle + tcdp2 -> tcm.nmp_idle - tcdp1 -> tcm.nmp_idle; /* loading idle and MP idle are really overhead */
	ni_meter_time = meter_time - idle;

	meter_time = meter_time/100e0;		/* easier than multiplying by 100 in each percent calculation */
	ni_meter_time = ni_meter_time/100e0;

	sum, ni_sum = 100e0;			/* initialize percents to 100; we'll deduct each that's printed,
						   and at the end, we'll print what's left as Other Overhead */

	fault_int_time = 0;			/* to be deducted from delta_vcpu		*/

/* Now calculate the page fault information */

	time = tcdp2 -> tcm.cpu_pf_time - tcdp1 -> tcm.cpu_pf_time;
	count = tcdp2 -> tcm.cpu_pf_count - tcdp1 -> tcm.cpu_pf_count;
	call prt ("Page Faults");
	fault_int_time = fault_int_time + time;

	time = sstp2 -> sst.loop_lock_time - sstp1 -> sst.loop_lock_time;
	count = sstp2 -> sst.loop_locks - sstp1 -> sst.loop_locks;
	if count > 0 then call prt_no_sum (" PC Loop Locks");

	time = sstp2 -> sst.pf_unlock_ptl_time - sstp1 -> sst.pf_unlock_ptl_time;
	count = sstp2 -> sst.pf_unlock_ptl_meterings - sstp1 -> sst.pf_unlock_ptl_meterings;
	if count > 0 then do;
	     call prt ("PC Queue");
	     fault_int_time = fault_int_time + time;
	end;


/* Now calculate the times for seg faults */

	time = sstp2 -> sst.cpu_sf_time - sstp1 -> sst.cpu_sf_time;
	count = sstp2 -> sst.total_sf - sstp1 -> sst.total_sf;
	call prt ("Seg Faults");
	fault_int_time = fault_int_time + time;

/* Now calculate the time for bound faults */

	time = sstp2 -> sst.cpu_bf_time - sstp1 -> sst.cpu_bf_time;
	count = sstp2 -> sst.total_bf - sstp1 -> sst.total_bf;
	call prt ("Bound Faults");
	fault_int_time = fault_int_time + time;

/* Now calculate the time for interrupts */

	time = tcdp2 -> tcm.interrupt_time - tcdp1 -> tcm.interrupt_time;
	count = tcdp2 -> tcm.interrupt_count - tcdp1 -> tcm.interrupt_count;
	call prt ("Interrupts");
	fault_int_time = fault_int_time + time;

/* At this point, we stop printing the AVE column. Tell the prt subroutine so, by setting count to -1. */

	count = -1e0;

/* Next compute unattributed fault overhead time.  This is time for handling
   connect faults and timer runout faults (primarily)						*/
	
	time = tcdp2 -> tcm.delta_vcpu - tcdp1 -> tcm.delta_vcpu;
	time = time - fault_int_time;
	call prt ("Other Fault");
	
/* Now calculate the time spent in get-work */

	time = tcdp2 -> tcm.getwork_time - tcdp1 -> tcm.getwork_time;
	count = tcdp2 -> tcm.getwork_count - tcdp1 -> tcm.getwork_count;
	call prt_no_sum (" Getwork");

	time = tcdp2 -> tcm.loop_lock_time - tcdp1 -> tcm.loop_lock_time;
	count = tcdp2 -> tcm.loop_locks - tcdp1 -> tcm.loop_locks;
	if count > 0 then call prt_no_sum (" TC Loop Locks");

	time = sstp2 -> sst.post_purge_time - sstp1 -> sst.post_purge_time;
	count = sstp2 -> sst.post_purge_calls - sstp1 -> sst.post_purge_calls;
	call prt_no_sum (" Post Purging");

/* Reset the printing of averages again */

	count = -1.0e0;

/* Now calculate the times spent idle */

	time = tcdp2 -> tcm.mp_idle - tcdp1 -> tcm.mp_idle;
	call prt ("MP Idle");

	time = tcdp2 -> tcm.work_class_idle - tcdp1 -> tcm.work_class_idle;
	call prt ("Work Class Idle");

	time = tcdp2 -> tcm.loading_idle - tcdp1 -> tcm.loading_idle;
	call prt ("Loading Idle");

	time = tcdp2 -> tcm.nmp_idle - tcdp1 -> tcm.nmp_idle;
	call prt ("NMP Idle");

	time = tcdp2 -> tcm.zero_idle - tcdp1 -> tcm.zero_idle;
	call prt ("Zero Idle");

/* Now calculate the useful virtual cpu time, without printing it. */

	prt_sw = ""b;				/* tell prt not to print */
	time = tcdp2 -> tcm.system_virtual_time - tcdp1 -> tcm.system_virtual_time;
	call prt ("Virtual CPU Time");

/* Now print the part that's unaccounted-for. */
	
	if sum < 0.0 then				/* won't be more than Planck's constant		*/
	     sum, ni_sum = 0.0;
	call ioa_ ("Other Overhead^17t^6.2f^7.2f", sum, ni_sum);

/* Now go back and print Virtual CPU Time. We want it to be last because the last line of ttm's output
   has always been the useful (non-idle, non-overhead) cpu time. */

	prt_sw = "1"b;
	call prt ("Virtual CPU Time");

reset_code:
	if rsw then do;
	     call metering_util_$reset (unique, code);
	     if code^=0 then do;
		call com_err_ (code, MYNAME, "Resetting.");
		return;
	     end;
	end;

	call ioa_ (" ");
	return;

/* **************************************** */

prt:	proc (name);				/* to calculate percent and print value */

dcl  name char (*);					/* name of value to be printed */
dcl  sum_sw bit (1) aligned;				/* whether or not to deduct this value from total percent */
dcl  avesw bit (1) aligned init ("1"b);			/* switch says "print the average column" when on */
dcl  nisw bit (1) aligned init ("1"b);			/* switch says "this is not idle" when on */

	     sum_sw = "1"b;				/* regular entry point: deduct the value from total percent */

prt_common:

	     if name = "Zero Idle" | name = "NMP Idle" then /* remember to treat the Idle figures differently */
		nisw = ""b;			/* by turning off the "this is not idle" switch */
	     if count = 0e0 then ave_time = 0e0;	/* if count is zero, don't try to divide by it */
	     else if count = -1e0 then avesw = ""b;	/* negative count means don't print the average column */
	     else ave_time = time/count;		/* otherwise compute the average time for this item */
	     pc = time/meter_time;			/* compute it's percent of total processor time */
	     ni_pc = time/ni_meter_time;		/* and it's percent of non-Idle processor time */
	     if sum_sw then do;			/* if this item should be deducted from percent */
		sum = sum - pc;			/* do so */
		if nisw then			/* if this is Idle */
		     ni_sum = ni_sum - ni_pc;		/* don't deduct it from the non-Idle percent */
	     end;
	     if prt_sw then				/* unless we're just calculating, print */
		call ioa_ ("^a^17t^6.2f^[^7.2f^;^s^]^[^12.3f^;^s^]", name, pc, nisw, ni_pc, avesw, ave_time);

	     return;

prt_no_sum:    entry (name);				/* alternate entry point to not deduct from percent */

	     sum_sw = ""b;
	     goto prt_common;

	end prt;



% include tcm;

% include hc_lock;

% include sst;
     end total_time_meters;
