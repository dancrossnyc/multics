/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* format: style3 */

traffic_control_meters:
tcm:
     proc;


/*  Traffic Control Metering Program

    Written by one of the Ancients (probably Webber)
    Cleaned up a bit, I/O boosts added, by J. Bongiovanni, August 1982
    Modified November 1984 by M. Pandolf to include hc_lock.
    Modified January 1985 by Keith Loepere to include pauses.
*/

/*  Automatic  */

dcl	arg_no		fixed bin;
dcl	argl		fixed bin (21);
dcl	argp		ptr;
dcl	atb		float bin;
dcl	c1		float bin;
dcl	code		fixed bin (35);
dcl	cpu		(16) float bin;
dcl	cpu_time		float bin;
dcl	cpusum		float bin;
dcl	counters_sw	bit (1) aligned;
dcl	cur_ptrs		(1) ptr;
dcl	delta		float bin;
dcl	formatted_time	char (10);
dcl	general_sw	bit (1) aligned;
dcl	i		fixed bin;
dcl	intc		float bin;
dcl	meter_time	float bin;
dcl	meter_time_micsec	fixed bin (71);
dcl	n_args		fixed bin;
dcl	numint		float bin;
dcl	p1		float bin;
dcl	pf		(16) float bin;
dcl	pfsum		float bin;
dcl	prev_ptrs		(1) ptr;
dcl	queue_sw		bit (1) aligned;
dcl	reset_sw		bit (1) aligned;
dcl	s1		float bin;
dcl	sc		(16) float bin;
dcl	scsum		float bin;
dcl	tbpf		(8) float bin;
dcl	tbs		(8) float bin;
dcl	total_notifies	fixed bin;
dcl	total_waits	fixed bin;

/*  Static  */

dcl	(
	MILLI		init ("1"b),
	SEC		init ("0"b),
	PER		init ("1"b),
	NOP		init ("0"b)
	)		bit (1) aligned int static options (constant);
dcl	MYNAME		char (22) int static options (constant) init ("traffic_control_meters");
dcl	unique		fixed bin int static init (0);

/*  Based  */

dcl	arg		char (argl) based (argp);
dcl	1 cur_tcm		aligned like tcm based (cur_ptrs (1));
dcl	1 prev_tcm	aligned like tcm based (prev_ptrs (1));

/*  External  */

dcl	error_table_$badopt fixed bin (35) external;


/*  Entry  */

dcl	com_err_		entry options (variable);
dcl	cu_$arg_count	entry (fixed bin, fixed bin (35));
dcl	cu_$arg_ptr	entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl	ioa_		entry options (variable);
dcl	metering_util_$define_regions
			entry options (variable);
dcl	metering_util_$fill_buffers
			entry (fixed bin, fixed bin (71), char (*), (*) ptr, (*) ptr, fixed bin (35));
dcl	metering_util_$reset
			entry (fixed bin, fixed bin (35));


/*  Builtin  */

dcl	fixed		builtin;
dcl	float		builtin;
dcl	size		builtin;


%page;


	reset_sw, counters_sw, queue_sw, general_sw = "0"b;

	call cu_$arg_count (n_args, code);
	if code ^= 0
	then do;
		call com_err_ (code, MYNAME);
		return;
	     end;

	if unique = 0
	then do;
		call metering_util_$define_regions (unique, code, "tc_data", 0, size (tcm));
		if code ^= 0
		then do;
			call com_err_ (code, MYNAME, "Defining regions");
			unique = 0;
			return;
		     end;
	     end;


	do arg_no = 1 to n_args;
	     call cu_$arg_ptr (arg_no, argp, argl, code);
	     if arg = "-gen"
	     then general_sw = "1"b;
	     else if arg = "-rs" | arg = "-reset"
	     then reset_sw = "1"b;
	     else if arg = "-ct" | arg = "-counters"
	     then counters_sw = "1"b;
	     else if arg = "-qu" | arg = "-queue"
	     then queue_sw = "1"b;
	     else if arg = "-rr" | arg = "-report_reset"
	     then general_sw, counters_sw, reset_sw, queue_sw = "1"b;
	     else do;
		     call com_err_ (error_table_$badopt, MYNAME, arg);
		     return;
		end;
	end;

	if n_args = 0
	then general_sw, counters_sw, queue_sw = "1"b;

	call metering_util_$fill_buffers (unique, meter_time_micsec, formatted_time, cur_ptrs, prev_ptrs, code);
	if code ^= 0
	then do;
		call com_err_ (code, MYNAME, "Filling buffers");
		return;
	     end;

	call ioa_ ("^/Total metering time^-^a", formatted_time);

	cpu_time = cur_tcm.processor_time - prev_tcm.processor_time;
	meter_time = float (meter_time_micsec) / 1.0e2;	/* micro-seconds, percent */

	if general_sw
	then do;
		total_waits, total_notifies = 0;
		call ioa_ ("^/Ave queue length^9.2f", cur_tcm.avequeue * 1e0);
		call ioa_ ("Ave eligible    ^9.2f", cur_tcm.ave_eligible * 1e0);
		numint = cur_tcm.response_count - prev_tcm.response_count;
		delta = cur_tcm.response_time - prev_tcm.response_time;
		if numint = 0e0
		then atb = 0e0;
		else atb = 1e-6 * delta / numint;
		call ioa_ ("Response time    ^9.3f sec", atb);
	     end;
	if counters_sw
	then do;
		call ioa_ ("^/  COUNTER          TOTAL         ATB       #/INT^/");
		intc, delta = cur_tcm.response_count - prev_tcm.response_count;
		call print ("Interactions", SEC, NOP);
		delta = cur_tcm.loadings - prev_tcm.loadings;
		call print ("Loadings", SEC, PER);
		delta = cur_tcm.blocks - prev_tcm.blocks;
		call print ("Blocks", SEC, NOP);
		delta = cur_tcm.pauses - prev_tcm.pauses;
		if delta ^= 0
		then call print ("Pauses", SEC, NOP);
		delta = cur_tcm.wakeups - prev_tcm.wakeups;
		call print ("Wakeups", SEC, NOP);
		delta = cur_tcm.schedulings - prev_tcm.schedulings;
		call print ("Schedulings", SEC, PER);
		delta = cur_tcm.lost_priority - prev_tcm.lost_priority;
		call print ("Lost priority", SEC, NOP);
		delta = cur_tcm.boost_priority - prev_tcm.boost_priority;
		call print ("Priority boosts", SEC, NOP);
		delta = cur_tcm.realtime_priorities - prev_tcm.realtime_priorities;
		call print ("I/O boosts", SEC, NOP);
		delta = cur_tcm.waits - prev_tcm.waits;
		total_waits = total_waits + delta;
		call print ("Wait Page", MILLI, PER);
		delta = cur_tcm.ptl_waits - prev_tcm.ptl_waits;
		total_waits = total_waits + delta;
		if delta ^= 0
		then call print ("Wait PTL", MILLI, PER);
		delta = cur_tcm.te_wait - prev_tcm.te_wait;
		total_waits = total_waits + delta;
		call print ("Wait Other", MILLI, PER);
		delta = total_waits;
		call print ("Total Waits", MILLI, PER);
		delta = cur_tcm.page_notifies - prev_tcm.page_notifies;
		total_notifies = total_notifies + delta;
		call print ("Notify Page", MILLI, NOP);
		delta = cur_tcm.ptl_waits - prev_tcm.ptl_waits - (cur_tcm.stat (6) - prev_tcm.stat (6));
						/* ptlnfy = ptlwaits - waiters */
		total_notifies = total_notifies + delta;
		if delta ^= 0
		then call print ("Notify PTL", MILLI, NOP);
		delta = cur_tcm.notifies - prev_tcm.notifies;
		total_notifies = total_notifies + delta;
		call print ("Notify Other", MILLI, NOP);
		delta = total_notifies;
		call print ("Total Notifies", MILLI, NOP);
		delta = cur_tcm.gp_done_count - prev_tcm.gp_done_count;
		call print ("Get Processor", MILLI, NOP);
		delta = cur_tcm.te_pre_empt - prev_tcm.te_pre_empt;
		call print ("Pre-empts", MILLI, PER);
		delta = cur_tcm.depth_count - prev_tcm.depth_count;
		call print ("Getwork", MILLI, NOP);
		delta = cur_tcm.gw_gp_window_count - prev_tcm.gw_gp_window_count;
		if delta ^= 0
		then call print ("Retry getwork", SEC, NOP);
		delta = cur_tcm.notify_nobody_count - prev_tcm.notify_nobody_count;
		if delta ^= 0
		then do;
			call print ("Extra notifies", SEC, NOP);
			call ioa_ (" Last EN event    ^w", cur_tcm.notify_nobody_event);
		     end;
		delta = cur_tcm.nto_count - prev_tcm.nto_count;
		if delta ^= 0
		then do;
			call print ("Notify timeout", SEC, NOP);
			call ioa_ (" Last NTO event   ^w", cur_tcm.nto_event);
		     end;
	     end;
	if queue_sw
	then do;
		call ioa_ ("^/ DEPTH   %PF   TBPF   %GTW   TBS   %CPU^/");
		pfsum, scsum, cpusum = 0e0;
		do i = 1 to 8;
		     p1, pf (i) = cur_tcm.pfdepth (i) - prev_tcm.pfdepth (i);
		     pfsum = pfsum + p1;
		     s1, sc (i) = cur_tcm.depths (i) - prev_tcm.depths (i);
		     scsum = scsum + s1;
		     c1, cpu (i) = cur_tcm.tdepths (i) - prev_tcm.tdepths (i);
		     if p1 <= 1e-6
		     then p1 = 1e0;
		     if s1 <= 1e-6
		     then s1 = 1e0;
		     cpusum = cpusum + c1;
		     tbpf (i) = c1 * 1e-3 / p1;
		     tbs (i) = c1 * 1e-3 / s1;
		end;
		p1 = 2e0;
		do i = 1 to 8 while (p1 > 1e0);
		     if pfsum = 0e0
		     then p1 = 0e0;
		     else p1 = (pf (i) * 100e0) / pfsum;
		     if scsum = 0e0
		     then s1 = 0e0;
		     else s1 = (sc (i) * 100e0) / scsum;
		     if cpusum = 0e0
		     then c1 = 0e0;
		     else c1 = (cpu (i) * 100e0) / cpusum;
		     call ioa_ ("^4d^9.1f^6.1f^7.1f^7.1f^6.1f", i, p1, tbpf (i), s1, tbs (i), c1);
		end;
	     end;

	if reset_sw
	then do;
		call metering_util_$reset (unique, code);
		if code ^= 0
		then do;
			call com_err_ (code, MYNAME, "Resetting");
			return;
		     end;
	     end;

	call ioa_ (" ");
	return;




print:
     proc (name, milli, per);

dcl	name		char (*);
dcl	milli		bit (1) aligned;
dcl	per		bit (1) aligned;


dcl	units		char (4);


	if delta = 0e0
	then atb = 0e0;
	else atb = meter_time / (delta * 1e1);
	if ^milli
	then atb = atb / 1e3;

	if milli
	then units = "msec";
	else units = "sec";


	if per
	then do;
		if intc = 0e0
		then numint = 0e0;
		else numint = delta / intc;
		call ioa_ ("^16a^8d^11.3f ^4a^8.3f", name, fixed (delta), atb, units, numint);
	     end;
	else do;
		call ioa_ ("^16a^8d^11.3f ^4a", name, fixed (delta), atb, units);
	     end;

     end print;
%page;
%include tcm;
%page;
%include hc_lock;
     end;
