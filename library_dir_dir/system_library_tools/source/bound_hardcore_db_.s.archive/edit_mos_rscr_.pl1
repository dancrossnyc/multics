/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* EDIT_MOS_RSCR_: Procedure to interpret and edit contents memory maintence register. */

/* Written May 1976 by Larry Johnson */
/* Modified September 1977 by Larry Johnson for 16k chips */
/* Modified November 1979 by Larry Johnson for $decode entry */
/* Modified April 1983 by Paul Farley, with input from D. A. Fudge (UofC), for 64k chips */

edit_mos_rscr_: proc (arg_scrp, arg_descrip);

/* Arguments */

dcl  arg_descrip char (*) var;			/* Description built here */
dcl  arg_mem_type char (*);
dcl  arg_error char (*);
dcl  arg_scrp ptr;

/* Automatic */

dcl  decode_sw bit (1);
dcl  mem_type char (32);
dcl  error char (32);
dcl  syndrome fixed bin;
dcl  bit_no fixed bin;
dcl  board char (1);
dcl  quad fixed bin;
dcl  i fixed bin;
dcl  chip fixed bin;

dcl  ioa_ entry options (variable);
dcl  ioa_$rsnpnnl entry options (variable);

dcl (bin, bit, divide, mod, substr) builtin;

%include scr;
%page;
/* The following delcarations are for 1k MOS chips */

/* This table translates a syndrome to a board bit number */

dcl  bit_1k (128) fixed bin (8) unal int static options (constant) init (
     19, 18, 19, 17, 18, 16, 15, -1, 19, 14, 13, 11, 12, 10, 09, -1,
     18, 08, 07, 05, 06, 04, 03, -1, -1, 02, 01, -1, 00, -1, -1, -1,
     19, -1, -1, 17, -1, 16, 15, -1, -1, 14, 13, 11, 12, 10, 09, -1,
     -1, 08, 07, 05, 06, 04, 03, -1, -1, 02, 01, -1, 00, -1, -1, -1,
     18, -1, -1, 17, -1, 16, 15, -1, -1, 14, 13, 11, 12, 10, 09, -1,
     -1, 08, 07, 05, 06, 04, 03, -1, -1, 02, 01, -1, 00, -1, -1, -1,
     -1, -1, -1, 17, -1, 16, 15, -1, -1, 14, 13, 11, 12, 10, 09, -1,
     -1, 08, 07, 05, 06, 04, 03, -1, -1, 02, 01, -1, 00, -1, -1, -1);

/* This table translates a syndrom into a "quandrant" in the error chart */

dcl  quad_1k (128) fixed bin (3) unal int static options (constant) init (
     4, 4, 3, 4, 3, 4, 4, 0, 2, 4, 4, 4, 4, 4, 4, 0,
     2, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 4, 0, 0, 0,
     1, 0, 0, 3, 0, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 0,
     0, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 0, 3, 0, 0, 0,
     1, 0, 0, 2, 0, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0,
     0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 0, 2, 0, 0, 0,
     0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0,
     0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0);

/* This table is used to determine a board number. One string applies to each quandrant. */

dcl  board_1k (4) char (8) int static options (constant) init (
     "ACEGBDFH", "JLNQKMPR", "LJGEKHFD", "USQNTRPM");

dcl  bay_1k (4) char (3) int static options (constant) init (
     "AA0", "AA0", "AA1", "AA1");

/* End of 1k chip declarations */
%page;
/* The following declarations are for 4k and 16k mos chips. */

dcl  bit_4k (128) fixed bin (8) unal int static options (constant) init (
     19, 18, 17, 15, 16, 14, 13, -1, 19, 12, 11, 09, 10, 08, 07, -1,
     18, 06, 05, 03, 04, 02, 01, -1, -1, 00, 19, -1, 18, -1, -1, -1,
     17, -1, -1, 17, -1, 16, 15, -1, -1, 14, 13, 11, 12, 10, 09, -1,
     -1, 08, 07, 05, 06, 04, 03, -1, -1, 02, 01, -1, 00, -1, -1, -1,
     16, -1, -1, 15, -1, 14, 13, -1, -1, 12, 11, 09, 10, 08, 07, -1,
     -1, 06, 05, 03, 04, 02, 01, -1, -1, 00, 19, -1, 18, -1, -1, -1,
     -1, -1, -1, 17, -1, 16, 15, -1, -1, 14, 13, 11, 12, 10, 09, -1,
     -1, 08, 07, 05, 06, 04, 03, -1, -1, 02, 01, -1, 00, -1, -1, -1);

/* The following table translate a syndrome into a quadrant in the error chard */

dcl  quad_4k (128) fixed bin (3) unal int static options (constant) init (
     4, 4, 4, 4, 4, 4, 4, 0, 2, 4, 4, 4, 4, 4, 4, 0,
     2, 4, 4, 4, 4, 4, 4, 0, 0, 4, 3, 0, 3, 0, 0, 0,
     2, 0, 0, 3, 0, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 0,
     0, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 0, 3, 0, 0, 0,
     2, 0, 0, 2, 0, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0,
     0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 1, 0, 1, 0, 0, 0,
     0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0,
     0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0);

dcl  board_4k (4) char (4) int static options (constant) init (
     "ABCD", "FGHJ", "KLMN", "QRST");

/* End of 4k chip declarations */
%page;
/* The following tables are for M264 16k chips */

dcl  bit_16k (128) fixed bin (8) unal int static options (constant) init (
     79, 78, 77, 71, 76, 70, 69, -1, 75, 68, 67, 65, 66, 64, 63, -1,
     74, 62, 61, 59, 60, 58, 57, -1, -1, 56, 55, -1, 54, -1, -1, -1,
     73, -1, -1, 53, -1, 52, 51, -1, -1, 50, 49, 47, 48, 46, 45, -1,
     -1, 44, 43, 41, 42, 40, 39, -1, -1, 38, 37, -1, 36, -1, -1, -1,
     72, -1, -1, 35, -1, 34, 33, -1, -1, 32, 31, 29, 30, 28, 27, -1,
     -1, 26, 25, 23, 24, 22, 21, -1, -1, 20, 19, -1, 18, -1, -1, -1,
     -1, -1, -1, 17, -1, 16, 15, -1, -1, 14, 13, 11, 12, 10, 09, -1,
     -1, 08, 07, 05, 06, 04, 03, -1, -1, 02, 01, -1, 00, -1, -1, -1);

dcl  chip_16k (0:79) char (3) unal int static options (constant) init (
     "0A", "2A", "4A", "6A", "0B", "2B", "4B", "6B", "0C", "2C",
     "4C", "6C", "0D", "2D", "4D", "6D", "0E", "2E", "4E", "6E",
     "0F", "2F", "4F", "6F", "0G", "2G", "4G", "6G", "0H", "2H",
     "4H", "6H", "0J", "2J", "4J", "6J", "0K", "2K", "4K", "6K",
     "0R", "2R", "4R", "6R", "0S", "2S", "4S", "6S", "0T", "2T",
     "4T", "6T", "0U", "2U", "4U", "6U", "0V", "2V", "4V", "6V",
     "0W", "2W", "4W", "6W", "0X", "2X", "4X", "6X", "0Y", "2Y",
     "4Y", "6Y", "0Z", "2Z", "4Z", "6Z", "0AA", "2AA", "4AA", "6AA");

dcl  board_16k (0:15) char (1) unal int static options (constant) init (
     "A", "B", "C", "D", "E", "F", "G", "H", "J", "K", "L", "M", "N", "P", "Q", "R");
%page;
/* The following tables are for M64 64k chips */

dcl  bit_64k (128) fixed bin (8) unal int static options (constant) init (
     79, 78, 77, 71, 76, 70, 69, -1, 75, 68, 67, 65, 66, 64, 63, -1,
     74, 62, 61, 59, 60, 58, 57, -1, -1, 56, 55, -1, 54, -1, -1, -1,
     73, -1, -1, 53, -1, 52, 51, -1, -1, 50, 49, 47, 48, 46, 45, -1,
     -1, 44, 43, 41, 42, 40, 39, -1, -1, 38, 37, -1, 36, -1, -1, -1,
     72, -1, -1, 35, -1, 34, 33, -1, -1, 32, 31, 29, 30, 28, 27, -1,
     -1, 26, 25, 23, 24, 22, 21, -1, -1, 20, 19, -1, 18, -1, -1, -1,
     -1, -1, -1, 17, -1, 16, 15, -1, -1, 14, 13, 11, 12, 10, 09, -1,
     -1, 08, 07, 05, 06, 04, 03, -1, -1, 02, 01, -1, 00, -1, -1, -1);

dcl  chip_64k_not_a6 (0:79) char (3) unal int static options (constant) init (
     "01A", "19A", "37A", "55A", "01B", "19B", "37B", "55B", "01C", "19C",
     "37C", "55C", "01D", "19D", "37D", "55D", "01E", "19E", "37E", "55E",
     "01F", "19F", "37F", "55F", "01G", "19G", "37G", "55G", "01H", "19H",
     "37H", "55H", "01J", "19J", "37J", "55J", "01K", "19K", "37K", "55K",
     "01N", "19N", "37N", "55N", "01P", "19P", "37P", "55P", "01Q", "19Q",
     "37Q", "55Q", "01R", "19R", "37R", "55R", "01S", "19S", "37S", "55S",
     "01T", "19T", "37T", "55T", "01U", "19U", "37U", "55U", "01V", "19V",
     "37V", "55V", "01W", "19W", "37W", "55W", "01X", "19X", "37X", "55X");

dcl  chip_64k_a6 (0:79) char (3) unal int static options (constant) init (
     "10A", "28A", "46A", "64A", "10B", "28B", "46B", "64B", "10C", "28C",
     "46C", "64C", "10D", "28D", "46D", "64D", "10E", "28E", "46E", "64E",
     "10F", "28F", "46F", "64F", "10G", "28G", "46G", "64G", "10H", "28H",
     "46H", "64H", "10J", "28J", "46J", "64J", "10K", "28K", "46K", "64K",
     "10N", "28N", "46N", "64N", "10P", "28P", "46P", "64P", "10Q", "28Q",
     "46Q", "64Q", "10R", "28R", "46R", "64R", "10S", "28S", "46S", "64S",
     "10T", "28T", "46T", "64T", "10U", "28U", "46U", "64U", "10V", "28V",
     "46V", "64V", "10W", "28W", "46W", "64W", "10X", "28X", "46X", "64X");

dcl  board_64k (0:15) char (1) unal int static options (constant) init (
     "A", "B", "C", "D", "E", "F", "G", "H", "J", "K", "L", "M", "N", "P", "Q", "R");
%page;
/* The edit_mos_rscr_ entry */

	decode_sw = "0"b;

join:	scrp = arg_scrp;
	mem_type, error = "";

/* First, determine the kind of memory */

	if scr_su.identification = "0000"b then mem_type = "High Speed Core, Model AA1";
	else if scr_su.identification = "0001"b then mem_type = "High Speed Core, Model AA3";
	else if scr_su.identification = "1100"b then mem_type = "MOS, 1k chip, EDAC disabled";
	else if scr_su.identification = "0100"b then call edit_1k;
	else if scr_su.identification = "1111"b then call edit_M16;
	else if scr_su.identification = "1110"b then call edit_M128;
          else if scr_su.identification = "1010"b then call edit_M64;
	else if scr_su.identification = "1011"b then call edit_M264;
	else if scr_su.identification = "0011"b then call edit_M32;
	else do;
	     call ioa_$rsnpnnl ("Unknown memory type, id=^4b", mem_type, (0), scr_su.identification);
	     call ioa_$rsnpnnl ("ZAC line(bits 36-41)=^b, syndrome=^.3b", error, (0), scr_su.ZAC_line, "0"b || scr_su.syndrome);
	end;

	if decode_sw then do;
	     arg_mem_type = mem_type;
	     arg_error = error;
	end;
	else call ioa_$rsnpnnl ("^a, ^[Error: ^a^;No error.^]", arg_descrip, (0), mem_type, (error ^= ""), error);
	return;



/* The edit_mos_rscr_$decode entry. Returns mem_type and error in seperate feilds */

decode:	entry (arg_scrp, arg_mem_type, arg_error);

	decode_sw = "1"b;
	go to join;
%page;
/* Procedure to edit data for 1k chip */

edit_1k:	proc;

dcl  a234 fixed bin;				/* Bits 2,3,4 of addr */
dcl  a56 fixed bin;					/* Bits 5 and 6 */

	     mem_type = "MOS, 1k chip";
	     if scr_su.syndrome = "0"b then return;	/* No error */

	     if ^substr (scr_su.syndrome, 8, 1) then do;	/* Syndrome must be odd */
bad_1k_synd:	call ioa_$rsnpnnl ("A2-A6=^b, syndrome=^.3b",
		     error, (0), substr (scr_su.ZAC_line, 1, 5), "0"b || scr_su.syndrome);
		return;
	     end;

	     syndrome = bin (substr (scr_su.syndrome, 1, 7), 7) + 1;
	     bit_no = bit_1k (syndrome);		/* Map syndrome into bit number */
	     if bit_no < 0 then go to bad_1k_synd;
	     quad = quad_1k (syndrome);

	     a234 = bin (substr (scr_su.ZAC_line, 2, 3), 3);
	     board = substr (board_1k (quad), a234 + 1, 1);
	     a56 = bin (substr (scr_su.ZAC_line, 5, 2), 2);
	     if bit_no < 10 then chip = 10 * a56 + bit_no + 1;
	     else chip = 10 * a56 + (bit_no - 10) + 41;
	     call ioa_$rsnpnnl ("board ^a-^a, chip A^d", error, (0), bay_1k (quad), board, chip);
	     return;

	end edit_1k;
%page;
/* Procedure to edit 4k mos data */

edit_M16:	proc;

dcl  a78 fixed bin;					/* Bits 7-8 of address */
dcl  a910 fixed bin;				/* Bits 9 and 10 of address */

	     mem_type = "MOS-M16, 4k chip";
	     if scr_su.syndrome = "0"b then return;

	     if ^substr (scr_su.syndrome, 8, 1) then do;	/* Must be odd */
bad_4k_synd:	call ioa_$rsnpnnl ("A7-A10=^b, syndrome=^.3b",
		     error, (0), substr (scr_su.ZAC_line, 1, 4), "0"b || scr_su.syndrome);
		return;
	     end;

	     syndrome = bin (substr (scr_su.syndrome, 1, 7), 7) + 1;
	     bit_no = bit_4k (syndrome);
	     if bit_no < 0 then go to bad_4k_synd;
	     quad = quad_4k (syndrome);
	     a78 = bin (substr (scr_su.ZAC_line, 1, 2), 2);
	     board = substr (board_4k (quad), a78 + 1, 1);
	     a910 = bin (substr (scr_su.ZAC_line, 3, 2), 2);
	     chip = 20 * a910 + bit_no;
	     call ioa_$rsnpnnl ("board ^a, chip A^d", error, (0), board, chip);
	     return;

	end edit_M16;
%page;
/* Procedure to edit data from 16-pin chip memories - 4k and 16k chips */

edit_M128: proc;

dcl  a45 fixed bin;
dcl  a678 fixed bin;
dcl  chip_letter char (1);
dcl  chip_pic picture "99";
dcl  addr_bits char (32) var;

	     mem_type = "MOS-M128, 16k chip";
	     addr_bits = "A4-A8";
edit_join:
	     if scr_su.syndrome = "0"b then return;	/* No error */

	     if ^substr (scr_su.syndrome, 8, 1) then do;	/* Syndrome not odd */
bad_M128_synd:	call ioa_$rsnpnnl ("^a=^b, syndrome=^.3b", error, (0),
		     addr_bits, substr (scr_su.ZAC_line, 1, 5), "0"b || scr_su.syndrome);
		return;
	     end;

	     syndrome = bin (substr (scr_su.syndrome, 1, 7), 7) + 1;
	     bit_no = bit_4k (syndrome);
	     if bit_no < 0 then go to bad_M128_synd;
	     quad = quad_4k (syndrome);
	     a45 = bin (substr (scr_su.ZAC_line, 1, 2));
	     a678 = bin (substr (scr_su.ZAC_line, 3, 3));
	     board = substr (board_4k (quad), a45 + 1);
	     chip_letter = substr ("ABCDEGHJKL", divide (bit_no, 2, 17, 0) + 1, 1);
	     if mod (bit_no, 2) = 1 then chip_pic = 7 - a678;
	     else chip_pic = 18 - a678;
	     call ioa_$rsnpnnl ("board ^a, chip ^a^a", error, (0),
		board, chip_pic, chip_letter);
	     return;

edit_M32:	     entry;

	     mem_type = "MOS-M32, 4k chip";
	     addr_bits = "A6-A10";
	     go to edit_join;

	end edit_M128;
%page;
/* Procedure to edit 16k M264 chip */

edit_M264: proc;

dcl  a4567 fixed bin;
dcl  a8 bit (1);
dcl  chip_name char (3);
dcl  chip_pic pic "9";

	     mem_type = "MOS-M264, 16k chip";

	     if scr_su.syndrome = "0"b then return;

	     if ^substr (scr_su.syndrome, 8, 1) then do;	/* Must be odd */
bad_M264_synd:	call ioa_$rsnpnnl ("A4-A8=^b, syndrome=^.3b", error, (0),
		     substr (scr_su.ZAC_line, 1, 5), "0"b || scr_su.syndrome);
		return;
	     end;

	     syndrome = bin (substr (scr_su.syndrome, 1, 7), 7) + 1;
	     bit_no = bit_16k (syndrome);
	     if bit_no < 0 then go to bad_M264_synd;
	     a4567 = bin (substr (scr_su.ZAC_line, 1, 4), 4);
	     a8 = substr (scr_su.ZAC_line, 5, 1);
	     chip_name = chip_16k (bit_no);
	     if a8 then do;
		chip_pic = bin (substr (chip_name, 1, 1)) + 1;
		substr (chip_name, 1, 1) = chip_pic;
	     end;
	     call ioa_$rsnpnnl ("board ^a, chip ^a", error, (0),
		board_16k (a4567), chip_name);
	     return;

	end edit_M264;
%page;
/* Procedure to edit 64k M64 chip */

edit_M64: proc;

dcl  a2345 fixed bin;
dcl  a6 bit (1);
dcl  chip_name char (3);

	     mem_type = "MOS-M64, 64k chip";

	     if scr_su.syndrome = "0"b then return;

	     if ^substr (scr_su.syndrome, 8, 1) then do;	/* Must be odd */
bad_M64_synd:	call ioa_$rsnpnnl ("A2-A6=^b, syndrome=^.3b", error, (0),
		     substr (scr_su.ZAC_line, 1, 5), "0"b || scr_su.syndrome);
		return;
	     end;

	     syndrome = bin (substr (scr_su.syndrome, 1, 7), 7) + 1;
	     bit_no = bit_64k (syndrome);
	     if bit_no < 0 then go to bad_M64_synd;
	     a2345 = bin (substr (scr_su.ZAC_line, 1, 4), 4);
	     a6 = substr (scr_su.ZAC_line, 5, 1);
	     if a6 then chip_name = chip_64k_a6 (bit_no);
               else chip_name = chip_64k_not_a6 (bit_no);     
	     call ioa_$rsnpnnl ("board ^a, chip ^a", error, (0),
		board_64k (a2345), chip_name);
	     return;

	end edit_M64;
%page;
/* The following debuging entries are commands which will check
   the translation tables for consistency and print a syndome table in a format
   similiar to that on the memory. These entries are not retained and are used
   only to help in verifying the correctness of the tables. */

debug_1k:	entry;

	call debug_test (bit_1k, quad_1k);
	return;

debug_4k:	entry;

	call debug_test (bit_4k, quad_4k);
	return;

debug_test: proc (b, q);

dcl  b (128) fixed bin (8) unal;
dcl  q (128) fixed bin (3) unal;
dcl  dat (4, 0:19) fixed bin;				/* Table built here */
dcl (i, j) fixed bin;
dcl  bits (4) bit (9);

	     dat = -1;
	     do i = 1 to 128;
		if ^(b (i) = -1 & q (i) = 0) then do;	/* If position not undefined */
		     if b (i) < 0 | b (i) > 19 | q (i) < 1 | q (i) > 4 then /* Bad number */
			call ioa_ ("error at ^d: ^d, ^d", i, b (i), q (i));
		     else if dat (q (i), b (i)) ^= -1 then /* Duplicate (reused address?) */
			call ioa_ ("duplicate at ^d: ^d, ^d", i, b (i), q (i));
		     else dat (q (i), b (i)) = i;
		end;
	     end;
	     do i = 1 to 4;				/* Check for missing entries */
		do j = 0 to 19;
		     if dat (i, j) = -1 then call ioa_ ("no entry for ^d, ^d", j, i);
		end;
	     end;
	     do j = 0 to 19;			/* Print table */
		do i = 1 to 4;
		     if dat (i, j) = -1 then bits (i) = (9)"1"b;
		     else bits (i) = bit (bin (dat (i, j)-1, 8), 8) || "1"b;
		end;
		call ioa_ ("^2d   ^(^3.3b ^)", j, bits);
	     end;
	     return;

	end debug_test;
%page;
debug_16k: entry;

	do i = 1 to 128;
	     if bit_16k (i) >= 0 then
		call ioa_ ("^.3b ^a", "0"b || bit (bin (2 * (i-1) + 1, 8), 8), bit_name_16k ((bit_16k (i))));
	end;
	do i = 0 to 79;
	     call ioa_ ("^4a ^a ^d^a", bit_name_16k (i), chip_16k (i), bin (substr (chip_16k (i), 1, 1)) + 1, substr (chip_16k (i), 2));
	end;
	return;

bit_name_16k: proc (b) returns (char (2));

dcl  b fixed bin;
dcl  p picture "99";

	     if b <= 71 then do;
		p = b;
		return (p);
	     end;
	     else do;
		p = b-71;
		return ("P" || substr (p, 2));
	     end;

	end bit_name_16k;
%page;
debug_64k: entry;

	do i = 1 to 128;
	     if bit_64k (i) >= 0 then
		call ioa_ ("^.3b ^a", "0"b || bit (bin (2 * (i-1) + 1, 8), 8), bit_name_64k ((bit_64k (i))));
	end;
	do i = 0 to 79;
	     call ioa_ ("^4a ^a ^a", bit_name_64k (i), chip_64k_not_a6 (i), chip_64k_a6 (i));
	end;
	return;

bit_name_64k: proc (b) returns (char (3));

dcl  b fixed bin;
dcl  p picture "99";

	     if b <= 71 then do;
		p = b;
		return (p);
	     end;
	     else do;
		p = b-71;
		return ("PC" || substr (p, 2));
	     end;

	end bit_name_64k;

     end edit_mos_rscr_;
