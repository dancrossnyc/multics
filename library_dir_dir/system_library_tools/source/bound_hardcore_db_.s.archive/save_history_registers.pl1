/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


save_history_registers: proc;

/* save_history_registers - command to set, reset  or  display  state  of  the  per-process  switch,
   pds$save_history_regs  or  the  per-system  switch  wired_hardcore_data$save_hregs,  (with the -priv
   control arg). When signalable faults ocurr, history registers are either stored or not stored in the
   signallers  stack frame (return_to_ring_0_) depending on the state of both of these switches. If the
   per-system switch is on, then all processes will store history registers  in  the  signallers  stack
   frame.  If  the  per-system switch is off but a users per-process switch is on, then only that users
   process will store history registers. The default state of both the per-process and  the  per-system
   switchs is "0"b or off.

   Written 9/16/80 by J. A. Bush for the DPS8/70M CPU
*/

dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl (com_err_, ioa_) entry options (variable);
dcl  hcs_$history_regs_set entry (bit (1) aligned);
dcl  hcs_$history_regs_get entry (bit (1) aligned);
dcl  hphcs_$history_regs_get entry (bit (1) aligned);
dcl  hphcs_$history_regs_set entry (bit (1) aligned);
dcl  ap ptr;
dcl (al, i) fixed bin;
dcl  code fixed bin (35);
dcl (desired_state, old_state, priv_sw, print_sw, set_sw) bit (1) aligned;
dcl  arg char (al) based (ap);
dcl  pname char (22) int static options (constant) init ("save_history_registers");
dcl  error_table_$bad_arg fixed bin (35) ext;

	priv_sw, print_sw, set_sw = "0"b;
	call cu_$arg_ptr (1, ap, al, code);		/* get arg * */
	if code ^= 0 then do;
usage:	     call com_err_ (code, pname, "Usage: ^a {on | off} {-priv} {-print (-pr)}", pname);
	     return;
	end;
	do i = 2 by 1 while (code = 0);
	     if arg = "-priv" then priv_sw = "1"b;	/* user wants per-system history regs */
	     else if arg = "-print" | arg = "-pr" then print_sw = "1"b; /* user wants old state of switch */
	     else if arg = "on" then			/* user wants history regs turned on */
		set_sw, desired_state = "1"b;
	     else if arg = "off" then do;		/* user wants  saving of hregs turned off */
		desired_state = "0"b;
		set_sw = "1"b;
	     end;
	     else do;
		code = error_table_$bad_arg;
		go to usage;			/* tell user what is valid */
	     end;
	     call cu_$arg_ptr (i, ap, al, code);	/* get next arg */
	end;
	if priv_sw then do;				/* if dealing with  per-system history reg saving */
	     if print_sw then do;			/* if user wants to know old state */
		call hphcs_$history_regs_get (old_state); /* get current setting */
		call ioa_ ("per-system history register saving ^[was previously^;is^] turned ^[on^;off^]",
		     set_sw, old_state);
	     end;
	     if set_sw then				/* if user wants to change state */
		call hphcs_$history_regs_set (desired_state);
	end;
	else do;					/* dealing with per-process history regs */
	     if print_sw then do;			/* if user wants to know old state */
		call hcs_$history_regs_get (old_state); /* get current setting */
		call ioa_ ("per-process history register saving ^[was previously^;is^] turned ^[on^;off^]",
		     set_sw, old_state);
	     end;
	     if set_sw then				/* if user wants to change state */
		call hcs_$history_regs_set (desired_state);
	end;

     end save_history_registers;
