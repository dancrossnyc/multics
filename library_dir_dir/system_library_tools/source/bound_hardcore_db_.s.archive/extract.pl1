/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* format: style1,ind2,^inddcls,ifthenstmt,dclind2,declareind2,ifthendo,ifthen*/

extract: ext: proc;

/* Modified 2/24/81 by J. A. Bush for larger fdump header size */
/* Modified 10/15/81 by J. A. Bush to add the "-pathname" control arg */
/* Modified: October 1984 by Greg Texada to use copy_erf_seg_ to get the data.				*/

dcl seg_no	     fixed bin (15) uns;
dcl delete_seg	     bit (1) init ("0"b);
dcl tc		     fixed bin;
dcl code		     fixed bin (35);
dcl arg		     char (tc) based (tp);
dcl (dump_name, ename, segname) char (32);
dcl (dirname, dump_dir)  char (168);
dcl p_length	     fixed bin (19) uns;
dcl (addrel, baseno, divide, fixed, mod, null, ptr, rel, size) builtin;
dcl (p, tp)	     ptr;

dcl (error_table_$namedup,
  error_table_$segknown) fixed bin (35) ext static;

dcl cu_$arg_ptr	     entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl copy_erf_seg_	     entry (char (*), uns fixed bin (15), ptr, uns fixed bin (19),
		     fixed bin (35));
dcl copy_erf_seg_$name   entry (char (*), char (*), ptr, uns fixed bin (19), fixed bin (35));
dcl delete_$ptr	     entry (ptr, bit (36) aligned, char (*), fixed bin (35));
dcl get_dump_ptrs_$dump_dir entry (char (*), char (*), (0:31) ptr,
		     (0:31) fixed bin, fixed bin, char (32));
dcl (ioa_, com_err_)     entry options (variable);
dcl ring0_get_$segptr_given_slt entry (char (*), char (*), ptr, fixed bin (35), ptr, ptr);
dcl cv_oct_check_	     entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl absolute_pathname_   entry (char (*), char (*), fixed bin (35));
dcl get_wdir_	     entry returns (char (168));
dcl hcs_$make_seg	     entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl hcs_$get_max_length_seg entry (ptr, fixed bin, fixed bin (35));
dcl hcs_$set_bc	     entry (char (*), char (*), fixed bin (24), fixed bin (35));
dcl terminate_file_	     entry (ptr, fixed bin (24), bit (*), fixed bin (35));
%page;
    segname = "";
    call cu_$arg_ptr (1, tp, tc, code);			/* pick up erf number */
    if code ^= 0 then do;
tell:   call ioa_ ("Usage: extract erfno seg_name/number {-pathname (-pn) path}");
        return;
      end;

    dump_name = arg;				/* get name of dump from which to extract the segment */
    call cu_$arg_ptr (3, tp, tc, code);			/* get possible pathname arg */
    if code = 0 then do;				/* if present, check for -pathname arg */
        if arg = "-pathname" | arg = "-pn" then do;
	  call cu_$arg_ptr (4, tp, tc, code);		/* get path */
	  if code ^= 0 then go to tell;		/* give user usage message */
	  call absolute_pathname_ (arg, dump_dir, code);	/* expand it */
	  if code ^= 0 then do;
	      call com_err_ (code, "extract", "expanding pathname ""^a""", arg);
	      return;
	    end;
	end;
        else go to tell;				/* give user usage message */
      end;
    call cu_$arg_ptr (2, tp, tc, code);			/* get name/number of segment to extract */
    if tc = 0 | code ^= 0 then goto tell;
    seg_no = cv_oct_check_ (arg, code);			/* assume octal arg was given */
    if code ^= 0 then segname = arg;
    dirname = get_wdir_ ();
    ename = arg || "." || dump_name;
    call hcs_$make_seg (dirname, ename, "", 01011b, p, code); /* make the segment to contain the data */
    if p = null then do;
        call com_err_ (code, "extract", "Creating ^a>^a", dirname, ename);
        return;
      end;
    delete_seg = ^(code = error_table_$namedup | code = error_table_$segknown);
						/* delete it if we can't do the work		*/
    if segname = "" then call copy_erf_seg_ (dump_name, seg_no, p, p_length, code);
    else call copy_erf_seg_$name (dump_name, segname, p, p_length, code);
    if code ^= 0 then do;
        call com_err_ (code, "extract", "Could not find ERF ^a using the dumps search list.", dump_name);
        if delete_seg then call delete_$ptr (p, "010111"b, "extract", code);
      end;
    else call terminate_file_ (p, 0, TERM_FILE_TERM, (0));
%page;
%include terminate_file;

  end extract;
