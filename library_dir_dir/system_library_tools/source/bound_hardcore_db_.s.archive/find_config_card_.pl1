/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* FIND_CONFIG_CARD_ - Procedure to find a card in the config deck */
/* Adapted January 1980 by Larry Johnson from hardcore procedure 'config', written 3/12/74 by N. I. Morris */
/* Modified September 1982 by C. Hornig to remove common code to config_. */

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend */
find_config_card_:
     procedure;

dcl  p ptr parameter;				/* pointer to config card */
dcl  a_iom fixed bin (3) parameter;
dcl  a_chan fixed bin (6) parameter;

dcl  config_$find entry (char (4) aligned, ptr);
dcl  config_$find_periph entry (char (4) aligned, ptr);

dcl  card_iom fixed bin (3);
dcl  card_chan fixed bin (8);
dcl  card_nchan fixed bin;
dcl  i fixed bin;					/* iteration variable */

dcl  (hbound, null, substr) builtin;
%page;
/* PRPH_FOR_CHANNEL - Given an iom and channel, this entry returns
   the prph card for the device connected to the channel.

   calling sequence:

   call find_config_card_$prph_for_channel (iom, chann, p); */

prph_for_channel:
     entry (a_iom, a_chan, p);

	prph_cardp = null ();
	do while ("1"b);
	     call config_$find ("prph", prph_cardp);
	     if prph_cardp = null () then goto no_prph;
	     if substr (prph_card.name, 1, 3) = "tap" then do;
		prph_tap_cardp = prph_cardp;
		card_iom = prph_tap_card.iom;
		card_chan = prph_tap_card.chan;
		card_nchan = prph_tap_card.nchan;
		end;
	     else if substr (prph_card.name, 1, 3) = "dsk" then do;
		prph_dsk_cardp = prph_cardp;
		card_iom = prph_dsk_card.iom;

		card_chan = prph_dsk_card.chan;
		card_nchan = prph_dsk_card.nchan;
		end;
	     else do;
		card_iom = prph_card.iom;
		card_chan = prph_card.chan;
		card_nchan = 1;
		end;
	     if (card_iom = a_iom) & (card_chan <= a_chan) & (card_chan + card_nchan > a_chan) then do;
		p = prph_cardp;
		return;
		end;
	end;

no_prph:
	chnl_cardp = null ();
	do while ("1"b);
	     call config_$find ("chnl", chnl_cardp);
	     if chnl_cardp = null () then do;
		p = null ();
		return;
		end;
	     do i = 1 to hbound (chnl_card.group, 1) while (chnl_card.iom (i) ^= -1);
		if (chnl_card.iom (i) = a_iom) & (chnl_card.chan (i) <= a_chan)
		     & (chnl_card.chan (i) + chnl_card.nchan (i) > a_chan) then do;
		     call config_$find_periph (chnl_card.name, p);
						/* Get associated prph card */
		     return;
		     end;
	     end;
	end;
%page;
/* MPC_FOR_CHANNEL - Given an iom and channel, this entry returns
   the mpc card for the controller connected to the channel.

   calling sequence:

   call find_config_card_$mpc_for_channel (iom, chann, p); */

mpc_for_channel:
     entry (a_iom, a_chan, p);

	mpc_cardp = null ();
	do while ("1"b);
	     call config_$find ("mpc", mpc_cardp);
	     if mpc_cardp = null () then do;
		p = null ();
		return;
		end;
	     do i = 1 to hbound (mpc_card.port, 1) while (mpc_card.port (i).iom ^= -1);
		if (a_iom = mpc_card.port (i).iom) & (a_chan >= mpc_card.port (i).chan)
		     & (a_chan < mpc_card.port (i).chan + mpc_card.port (i).nchan) then do;
		     p = mpc_cardp;
		     return;
		     end;
	     end;
	end;
%page;
%include config_chnl_card;
%include config_mpc_card;
%include config_prph_card;
%include config_prph_dsk_card;
%include config_prph_tap_card;

     end find_config_card_;

