/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4,delnl,insnl,ifthenstmt,indnoniterend */
parse_io_channel_name_:
     proc (arg_string, arg_iom, arg_channel, arg_code);

/* PARSE_IO_CHANNEL_NAME_ - Procedure to parse a character string representing an iom and channel */
/* Written February 1980 by Larry Johnson */
/* Modified 11 August, 1981, W. Olin Sibert, for decimal channel numbers */
/* Modified October 1982 by C. Hornig for new PRPH TAP card. */

/* The format of the string is:
   tdd - an iom tag (a thru h) followed by a channel number */

/* Arguments */

dcl  arg_string char (*);
dcl  arg_iom fixed bin (3);
dcl  arg_channel fixed bin (8);
dcl  arg_code fixed bin (35);

/* Automatic */

dcl  code fixed bin (35);
dcl  iom fixed bin (3);
dcl  channel fixed bin (35);

/* External */

dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));

dcl  error_table_$bad_channel fixed bin (35) ext static;

dcl  (index, length, substr) builtin;
%page;
	if length (arg_string) < 1 then do;
error:
	     arg_iom = 0;
	     arg_channel = 0;
	     arg_code = error_table_$bad_channel;
	     return;
	     end;

	iom = index ("abcdefgh", substr (arg_string, 1, 1));
	if iom = 0 then iom = index ("ABCDEFGH", substr (arg_string, 1, 1));
	if iom = 0 then go to error;
	if length (arg_string) < 2 then go to error;
	channel = cv_dec_check_ (substr (arg_string, 2), code);
	if code ^= 0 then go to error;
	if channel < 0 | channel > 63 then go to error;

	arg_iom = iom;
	arg_channel = channel;
	arg_code = 0;
	return;

     end parse_io_channel_name_;
