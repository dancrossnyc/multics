/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


copy_out: cpo: proc;

/* Fixed to delete output seg if copy fails 02/08/80 S. Herbst */
/* Fixed to copy non-connected segments properly, 09/19/80 W. Olin Sibert */

dcl (bound, tc, i) fixed bin;
dcl  bit_count fixed bin (24);
dcl  code fixed bin (35);
dcl  got_copy bit (1);
dcl (segptr, segptr0, tp) ptr;
dcl  dirname char (168);
dcl  (high_seg, hcsc) fixed bin;
dcl  test_word fixed bin (35);
dcl  tsdw fixed bin (71);
dcl  ename char (32);
dcl  targ char (tc) based (tp);

dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin);
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  get_wdir_ entry returns (char (168));
dcl  hcs_$delentry_file entry (char (*), char (*), fixed bin (35));
dcl  hcs_$high_low_seg_count entry (fixed bin, fixed bin);
dcl  hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$set_bc_seg entry (ptr, fixed bin(24), fixed bin(35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  phcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  nd_handler_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  pathname_ entry (char(*), char(*)) returns(char(168));
dcl  ring0_get_$name entry (char (*), char (*), ptr, fixed bin (35));
dcl  ring0_get_$segptr entry (char (*), char (*), ptr, fixed bin (35));
dcl  ring_zero_peek_ entry (ptr, ptr, fixed bin, fixed bin (35));
dcl (com_err_, com_err_$suppress_name, ioa_) entry options (variable);

dcl (error_table_$action_not_performed,
     error_table_$namedup,
     error_table_$segknown) fixed bin (35) external static;

dcl  myname char (32) int static options (constant) init ("copy_out");

dcl (cleanup, linkage_error) condition;

dcl (null, addr, addrel, binary, baseno, baseptr, size) builtin;

/*  */

	call cu_$arg_ptr (1, tp, tc, code);		/* pick up name of segment to copy out */
	if code ^= 0 | tc = 0 then do;		/* no arguments, give calling sequence */
	     call com_err_$suppress_name (0, myname, "Usage:  ^a name/number {alternate name}", myname);
	     return;
	     end;

	segptr = null;
	got_copy = "0"b;

	i = cv_oct_check_ (targ, code);		/* see if it's a number */
	if code ^= 0 then do;			/* it isn't, must be name */
	     call ring0_get_$segptr ("", targ, segptr0, code); /* get segptr for this name */
	     if segptr0 = null then do;		/* name not found */
		call expand_pathname_ (targ, dirname, ename, code);
		if code ^= 0 then do;
		     call com_err_ (code, myname);
		     return;
		     end;

		on condition (linkage_error) begin;
		     code = 0;
		     goto rzp_error;
		     end;

		call phcs_$initiate (dirname, ename, "", 0, 0, segptr0, code);

		revert condition (linkage_error);

		if segptr0 = null then do;
		     call com_err_ (code, myname, "^a", pathname_ (dirname, ename));
		     return;
		     end;
		goto get_alternate_name;
		end;
	     ename = targ;				/* default name of seg to create */
	     end;

	else do;					/* number was given */
	     call hcs_$high_low_seg_count (high_seg, hcsc);
	     if i > high_seg + hcsc
	     then do;
		call com_err_ (0, myname, "Segment ^o is greater than the highest segment number ^o.", i, high_seg+hcsc);
		return;
		end;
	     segptr0 = baseptr (i);			/* create pointer to segment */
	     call ring0_get_$name (dirname, ename, segptr0, code); /* get name for this segment */
	     if code ^= 0 then do;			/* no name for the segment */
		ename = targ;
		goto get_alternate_name;
		end;
	     call ioa_ ("Segment name is ^a", ename);	/* tell user name of segment */
	     end;

get_alternate_name:
	call cu_$arg_ptr (2, tp, tc, code);		/* see if optional segment name is given */
	if code ^= 0 | tc = 0 then do;
	     if dirname = ">" & ename = "" then ename = "root";
	     dirname = get_wdir_ ();
	     end;
	else do;					/* if arg is given expand_path_ it, else use wdir */
	     call expand_pathname_ (targ, dirname, ename, code);
	     if code ^= 0 then do;			/* trouble with path name */
cerr:		call com_err_ (code, myname, targ); /* tell user */
		call clean_up;
		return;
		end;
	     end;

/* Test whether copying is possible, and also cause segment fault to get sdw.bound right */

	call ring_zero_peek_ (segptr0, addr (test_word), size (test_word), code);
	if code ^= 0 then
	     goto rzp_error;

	call ring_zero_peek_ (addr (baseptr (0) -> sdwa (binary (baseno (segptr0), 15))),
	     addr (tsdw), size (tsdw), code);
	if code ^= 0 then
	     goto rzp_error;

	bound = (binary (addr (tsdw) -> sdw.bound, 14) + 1) * 16; /* get number of words */
	bit_count = bound * 36;			/* bit of segment */

	call ring_zero_peek_ (addrel (segptr0, bound - 1), addr (test_word), size (test_word), code);
	if code ^= 0 then				/* test whether whole segment is copyable -- in case we're */
	     goto rzp_error;			/* stuck with using metering_ring_zero_peek_ */

	on cleanup call clean_up;

CREATE:	call hcs_$make_seg (dirname, ename, "", 01011b, segptr, code); /* get segment to copy data into */
	if code ^= 0 then
	     if code = error_table_$namedup then do;
		call nd_handler_ ("copy_out", dirname, ename, code);
		if code = error_table_$action_not_performed then
		     return;
		goto CREATE;
		end;
	     else if code ^= error_table_$segknown then go to cerr;

	call ring_zero_peek_ (segptr0, segptr, bound, code); /* copy segment into user ring */
	if code ^= 0 then
	     goto rzp_error;

	got_copy = "1"b;

	call hcs_$set_bc_seg (segptr, bit_count, (0)); /* set bit count */
	call hcs_$terminate_noname (segptr, (0));	/* and terminate the segment */

	return;

rzp_error:
	call com_err_ (code, myname, "This operation requires access to phcs_.");
	call clean_up ();
	return;


clean_up: proc ();

	if segptr ^= null & ^got_copy then
	     call hcs_$delentry_file (dirname, ename, (0));

	end clean_up;

%page;
%include sdw;

	end copy_out;
