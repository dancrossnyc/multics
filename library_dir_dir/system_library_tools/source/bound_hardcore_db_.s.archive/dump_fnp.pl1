/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* DUMP_FNP - Command to dump fnp memory */
/* PATCH_FNP - Command to patch fnp memory */
/*
   Re-implemented October 1978 by Larry Johnson to use debug_fnp interfaces.
   Modified 1979 June 1 by Art Beattie to remove maximum address checks.
*/

dump_fnp: proc;

/* Automatic */

dcl  name char (16);
dcl  n_args fixed bin;
dcl  arg_no fixed bin;
dcl  arg_ptr ptr;
dcl  arg_len fixed bin;
dcl  fnp fixed bin;
dcl  fnp_addr fixed bin;
dcl  fnp_len fixed bin;
dcl  code fixed bin (35);
dcl  display_mode fixed bin;
dcl  length_given bit (1);
dcl  mem_buf (0:2047) bit (18) unal;
dcl  patch_buf (10) fixed bin (17) unal;

/* Based */

dcl  arg char (arg_len) based (arg_ptr);

/* External */

dcl  cu_$arg_count entry (fixed bin);
dcl  com_err_ entry options (variable);
dcl  db_fnp_memory_$fetch entry (ptr, fixed bin, fixed bin, fixed bin, ptr, fixed bin (35));
dcl  db_fnp_display_ entry (ptr, fixed bin, fixed bin, fixed bin, ptr, fixed bin, fixed bin (35));
dcl  db_fnp_memory_$store entry (ptr, fixed bin, fixed bin, fixed bin, ptr, char (*), fixed bin, fixed bin (35));
dcl  db_fnp_eval_ entry (ptr, fixed bin, char (*), ptr, char (*), fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));

dcl (addr, index, null, substr) builtin;

dcl  error_table_$too_many_args ext fixed bin (35);
dcl  error_table_$noarg ext fixed bin (35);

/* Dump_fnp command */

	name = "dump_fnp";
	call cu_$arg_count (n_args);
	if n_args < 2 then do;
	     call com_err_ (0, name, "Usage: ^a tag address {length} {-ch}", name);
	     return;
	end;

	arg_no = 1;
	fnp = get_fnp ();
	fnp_addr = get_address ();

	display_mode = 0;				/* Octal */
	length_given = "0"b;
	fnp_len = 1;				/* The default */
	do while (arg_no <= n_args);
	     call get_arg;
	     if arg = "-character" | arg = "-ch" then display_mode = 1;
	     else if ^length_given then do;
		fnp_len = eval_arg ();
		length_given = "1"b;
	     end;
	     else do;
		call com_err_ (0, name, "Unrecognized argument: ^a", arg);
		return;
	     end;
	end;

	call check_values;

	call db_fnp_memory_$fetch (null (), fnp, fnp_addr, fnp_len, addr (mem_buf), code);
	if code ^= 0 then do;
	     call com_err_ (code, name, "Unable to read memory.");
	     return;
	end;

	call db_fnp_display_ (null (), fnp, fnp_addr, fnp_len, addr (mem_buf), display_mode, code);
	if code ^= 0 then do;
	     call com_err_ (code, name, "Unable to display memory");
	     return;
	end;

	return;

/* Patch_fnp command */

patch_fnp: entry;

	name = "patch_fnp";
	call cu_$arg_count (n_args);
	if n_args < 3 then do;
	     call com_err_ (0, name, "Usage: ^a tag address word1 {... word10}", name);
	     return;
	end;

	arg_no = 1;
	fnp = get_fnp ();
	fnp_addr = get_address ();

	fnp_len = 0;
	do while (arg_no <= n_args);
	     call get_arg;
	     if fnp_len >= 10 then do;
		call com_err_ (error_table_$too_many_args, name, "^a", arg);
		return;
	     end;
	     fnp_len = fnp_len + 1;
	     patch_buf (fnp_len) = eval_arg ();
	end;

	call check_values;

	call db_fnp_memory_$store (null (), fnp, fnp_addr, fnp_len, addr (patch_buf), name, 2, code);
	if code ^= 0 then do;
	     call com_err_ (code, name, "Unable to patch memory");
	     return;
	end;

done:	return;

/* Check fnp arg */

get_fnp:	proc returns (fixed bin);

dcl  i fixed bin;

	     call get_arg;
	     i = index ("abcdefgh", arg);
	     if i = 0 then do;
bad_tag:		call com_err_ (0, name, "Bad FNP tag: ^a", arg);
		go to done;
	     end;
	     if substr ("abcdefgh", i, 1) ^= arg then go to bad_tag;
	     return (i);

	end get_fnp;

/* Get address argument */

get_address: proc returns (fixed bin);

	     if arg_no > n_args then do;
		call com_err_ (error_table_$noarg, name, "Address");
		go to done;
	     end;

	     call get_arg;
	     return (eval_arg ());

	end get_address;

/* Procedure to handle numeric args */

eval_arg:	proc returns (fixed bin);

dcl  i fixed bin;

	     call db_fnp_eval_ (null (), fnp, arg, null (), name, i, code);
	     if code ^= 0 then go to done;
	     return (i);

	end;

/* Get next argument */

get_arg:	proc;

	     call cu_$arg_ptr (arg_no, arg_ptr, arg_len, code);
	     if code ^= 0 then do;
		call com_err_ (code, name, "Arg ^d", arg_no); /* Should be impossible */
		go to done;
	     end;
	     arg_no = arg_no + 1;
	     return;

	end get_arg;

/* Check FNP address and length values */

check_values: proc;

	     if fnp_addr < 0 then do;
		call com_err_ (0, name, "Starting address out of range: ^o", fnp_addr);
		go to done;
	     end;

	     if fnp_len < 1 | fnp_len > dim (mem_buf, 1) then do;
		call com_err_ (0, name, "Invalid length: ^o", fnp_len);
		go to done;
	     end;

	     return;

	end check_values;

     end dump_fnp;
