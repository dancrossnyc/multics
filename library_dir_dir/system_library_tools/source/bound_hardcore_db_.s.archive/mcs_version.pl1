/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


mcs_version: proc;

/* a command/active function that returns/prints the name of the version
   *  of MCS most recently bootloaded into a specified FNP (defaults to a)
   *
   *  Written 6/9/77 by Robert Coren
*/


/* ENTRIES */

dcl  cu_$af_return_arg entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl (ioa_, com_err_, active_fnc_err_) entry options (variable);
dcl  ring0_get_$segptr entry (char (*), char (*), ptr, fixed bin (35));
dcl  ring_zero_peek_ entry (ptr, ptr, fixed bin, fixed bin (35));
dcl  parse_fnp_name_ entry (char (*), fixed bin);

dcl  err_entry entry variable options (variable);


/* ARGUMENT STUFF */

dcl  ret_ptr ptr;
dcl  ret_l fixed bin;
dcl  ret_str char (ret_l) varying based (ret_ptr);

dcl  argp ptr;
dcl  argl fixed bin;
dcl  arg char (argl) based (argp);


/* EXT STATIC */

dcl (error_table_$not_act_fnc,
     error_table_$too_many_args)
     fixed bin (35) ext static;


/* INTERNAL STATIC */

dcl  prog_name char (11) int static options (constant) init ("mcs_version");


/* AUTOMATIC */

dcl  code fixed bin (35);
dcl  nargs fixed bin;
dcl  fnp_no fixed bin;
dcl  sourcep ptr;
dcl  our_version char (4);
dcl  af bit (1);


dcl (addr, index) builtin;

%include dn355_data;

	call cu_$af_return_arg (nargs, ret_ptr, ret_l, code);
	if code = error_table_$not_act_fnc
	then do;
	     af = "0"b;
	     err_entry = com_err_;
	     call cu_$arg_count (nargs);
	end;

	else if code ^= 0
	then do;
	     call active_fnc_err_ (code, prog_name);
	     return;
	end;

	else do;
	     af = "1"b;
	     err_entry = active_fnc_err_;
	end;

	if nargs = 0
	then fnp_no = 1;

	else if nargs = 1
	then do;
	     call cu_$arg_ptr (1, argp, argl, code);
	     call parse_fnp_name_ (arg, fnp_no);
	     if fnp_no < 0
	     then do;
		call err_entry (0, prog_name, "Invalid FNP tag ^a", arg);
		return;
	     end;
	end;

	else do;
	     call err_entry (error_table_$too_many_args, prog_name,
		"Usage:  mcs_version {fnp_tag}");
	     return;
	end;

	call ring0_get_$segptr ("", "dn355_data", infop, code);
	if code ^= 0
	then do;
	     call err_entry (code, prog_name, "Could not get pointer to dn355_data");
	     return;
	end;

	sourcep = addr (datanet_info.per_datanet (fnp_no).version);
	call ring_zero_peek_ (sourcep, addr (our_version), 1, code);
	if code ^= 0
	then do;
	     call err_entry (code, prog_name, "Could not copy version from dn355_data");
	     return;
	end;
	if our_version = "" | our_version = low (4) then our_version = "none";

	if af
	then ret_str = our_version;
	else call ioa_ (our_version);

	return;
     end /* mcs_version */ ;
