/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


patch_ring_zero:
prz:
     procedure () options (variable);

/* This procedure allows privileged users to patch locations in ring 0.
   If necessary the descriptor segment is patched to give access to patch a non-write
   permit segment */

dcl  tc fixed bin (21);
dcl  tp pointer;
dcl  targ char (tc) based (tp);
dcl  code fixed bin (35);
dcl  i fixed bin;
dcl  first fixed bin;
dcl  force_sw bit (1) aligned;
dcl  processid bit (36) aligned;
dcl  data (0 : 99) fixed bin (35);
dcl  data1 (0 : 99) fixed bin (35);
dcl  count fixed bin (18);
dcl  datap pointer;
dcl  data1p pointer;
dcl  ok_to_patch bit (1) aligned;
dcl  segptr pointer;
dcl  dsp0 pointer;
dcl  tsdwp pointer;

dcl 1 tsdw aligned like sdw automatic;

dcl  error_table_$noarg fixed bin (35) external static;

dcl  com_err_ entry options (variable);
dcl  command_query_$yes_no entry options (variable);
dcl  cv_oct_ entry (char (*)) returns (fixed bin (35));
dcl  cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, pointer, fixed bin (21), fixed bin (35));
dcl  get_process_id_ entry () returns (bit (36) aligned);
dcl  hphcs_$pxss_set_timax entry (bit (36) aligned, fixed bin (35));
dcl  hphcs_$ring_0_patch entry (pointer, pointer, fixed bin (18));
dcl  ioa_ entry options (variable);
dcl  ring_zero_peek_ entry (pointer, pointer, fixed bin (18), fixed bin (35));
dcl  ring0_get_$segptr entry (char (*), char (*), pointer, fixed bin (35));

dcl  WHOAMI char (32) internal static options (constant) init ("patch_ring_zero");

dcl (fixed, null, addr, baseno, baseptr, ptr) builtin;

/*  */

	datap = addr (data);			/* get pointer to data area */
	count = 0;

	call cu_$arg_ptr (1, tp, tc, code);		/* pick up the first arg (name/number) */
	if code = error_table_$noarg then do;
mess:	     call com_err_ (0, WHOAMI, "Usage: ^a name/segno offset value1 ... valueN", WHOAMI);
	     return;
	end;
	i = cv_oct_check_ (targ, code);		/* get segment number */
	if code ^= 0 then do;			/* didn't give number */
	     segptr = null;				/* if null we're still in trouble */
	     call ring0_get_$segptr ("", targ, segptr, code); /* so assume ring 0 name */
	     if segptr = null then do;
		call com_err_ (0, WHOAMI, "^a not found.", targ);
		return;
	     end;
	     i = fixed (baseno (segptr));		/* get segment number */
	end;
	else segptr = baseptr (i);			/* segment number given */

	call cu_$arg_ptr (2, tp, tc, code);		/* pick up second arg (first word to dump ) */
	if code = error_table_$noarg then go to mess;
	first = cv_oct_ (targ);
	segptr = ptr (segptr, first);
	call ring0_get_$segptr ("", "dseg", dsp0, code);
	tsdwp = addr (dsp0 -> sdwa (i));		/* get a pointer to the SDW */


/* Now pick off the arguments */

	i = 2;
loop:	i = i + 1;				/* get next argument */
	call cu_$arg_ptr (i, tp, tc, code);
	if code = error_table_$noarg then go to endarg;
	data1 (i-3) = cv_oct_ (targ);			/* convert i'th arg */
	go to loop;
endarg:
	count = i - 3;
	if count = 0 then go to mess;
	call ring_zero_peek_ (segptr, datap, count, code);
	if code ^= 0 then do;
	     call com_err_ (code, WHOAMI);
	     return;
	end;
	do i = 0 to count-1;
	     call ioa_ ("^6o  ^w to ^w", first+i, data (i), data1 (i));
	end;

	call command_query_$yes_no (ok_to_patch, 0, WHOAMI, "", "Type ""yes"" if patches are correct:");
	if ^ok_to_patch then return;

/* Now set priority so that syserr messages dont hang process */

	processid = get_process_id_ ();
	call hphcs_$pxss_set_timax (processid, 1);

/* Now check the access on the segment about to be patched */

	data1p = addr (data1);
	call ring_zero_peek_ (tsdwp, addr (tsdw), size (tsdw), code); /* copy out the SDW */
	if code ^= 0 then do;
	     call com_err_ (code, WHOAMI, "Cannot get SDW for ^o", binary (baseno (segptr)));
	     return;
	end;

	if ^tsdw.write then do;
	     tsdw.write = "1"b;
	     force_sw = "1"b;
	     call hphcs_$ring_0_patch (addr (tsdw), tsdwp, size (tsdw));
	end;
	else force_sw = "0"b;			/* indicates we don't have to restore SDW */


/* Now do the patches */

	call hphcs_$ring_0_patch (data1p, segptr, count);

/* Now reset access (in dseg) if necessary */

	if force_sw then do;
	     tsdw.write = "0"b;
	     call hphcs_$ring_0_patch (addr (tsdw), tsdwp, size (tsdw));
	end;

	if processid ^= (36)"1"b then call hphcs_$pxss_set_timax (processid, -1);

	return;

%page; %include sdw;

     end;
