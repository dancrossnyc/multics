/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


reconfigure_rcp:  procedure;

/*	This program is an operator command that adds and deletes devices.
*	Created on 12/31/74 by Bill Silver.
*
*	This program has two entry points:
*	     1.	add_device    -	Add a deleted device back to the system.
*	     2.	del_device    -	Delete a device from the system.
*/

dcl	arg_len		fixed bin;	/* Length of device name argument. */
dcl	arg_ptr		ptr;		/* Pointer to device name argument. */
dcl	ecode		fixed bin(35);	/* error_table_ code. */

dcl	argument char(arg_len) based(arg_ptr);	/* Used to reference device name argument. */

dcl	com_err_		   entry  options(variable);
dcl	cu_$arg_ptr	   entry  (fixed bin,ptr,fixed bin,fixed bin(35));
dcl	rcp_sys_$add_device	   entry  (char(*),fixed bin(35));
dcl	rcp_sys_$delete_device entry  (char(*),fixed bin(35));
/*	*/
add_device:  entry;

/*	This entry is called to add a deleted device back to the system.
*/
	call cu_$arg_ptr (1,arg_ptr,arg_len,ecode);
	if   ecode ^= 0
	     then do;
		call com_err_ (ecode,"reconfigure_rcp","Error getting device name.");
		return;
	     end;

	call rcp_sys_$add_device (argument,ecode);
	if   ecode ^= 0
	     then call com_err_ (ecode,"reconfigure_rcp","Error adding device: ^a",argument);

	return;




del_device:  entry;

/*	This entry is called to delete a device from the system.
*	The device must be known to RCP, that is, it must be configured.
*	If the device is currently in use by some process that usage will be
*	terminated.  The device will not be assigned to any other process until
*	it is added again.
*/
	call cu_$arg_ptr (1,arg_ptr,arg_len,ecode);
	if   ecode ^= 0
	     then do;
		call com_err_ (ecode,"reconfigure_rcp","Error getting device name.");
		return;
	     end;

	call rcp_sys_$delete_device (argument,ecode);
	if   ecode ^= 0
	     then call com_err_ (ecode,"reconfigure_rcp","Error deleting device: ^a",argument);

	end  reconfigure_rcp;
