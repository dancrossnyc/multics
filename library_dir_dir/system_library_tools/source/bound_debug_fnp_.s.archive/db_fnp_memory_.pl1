/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


db_fnp_memory_: proc;

/* Parameters */

dcl  arg_corep ptr;					/* Address of fnp memory in a segment */
dcl  arg_fnp fixed bin;				/* The fnp number */
dcl  arg_fnp_addr fixed bin;				/* The fnp address to access */
dcl  arg_fnp_len fixed bin;				/* Length of data, in fnp words */
dcl  arg_data_ptr ptr;				/* Addr where data is to be stored */
dcl  arg_code fixed bin (35);
dcl  arg_caller char (*);				/* Name of caller, for command_query_ */
dcl  arg_mode fixed bin;				/* Options for store call -
						   0 = just patch,
						   1 = list changes and patch,
						   2 = list changes, ask if ok, then patch */

/* Automatic */

dcl  corep ptr;
dcl  fnp fixed bin;
dcl  fnp_name char (1);
dcl  code fixed bin (35);
dcl  state fixed bin;
dcl  mode fixed bin;
dcl  i fixed bin;
dcl  data_ptr ptr;
dcl  fnp_addr fixed bin;
dcl  check_buf (32) bit (18) unal;			/* Holds original copy */
dcl  answer char (3) var;				/* Reply from command_query_ */
dcl  fnp_len fixed bin;				/* Length of memory being moved */
dcl  fnp_mem (fnp_len) bit (18) unal based;		/* A piece of fnp memory */
dcl  dir char (168);
dcl  ename char (32);
dcl  replace_acl bit (1);
dcl  save_modes bit (36);

dcl 1 segment_acl (1) aligned,
    2 access_name char (32),
    2 modes bit (36),
    2 zero_pad bit (36),
    2 status_code fixed bin (35);

dcl 1 delete_acl (1) aligned,
    2 access_name char (32),
    2 status_code fixed bin (35);

dcl  dump_seg (0:32767) bit (18) unal based (corep);	/* Declaration of a dump */

dcl 1 fnp_info aligned,				/* Data structure for dump/patch fnp */
    2 fnp_addr fixed bin,
    2 fnp_len fixed bin,
    2 data_ptr ptr,
    2 prev_data_ptr ptr;

/* Constants */

dcl 1 query_info aligned int static options (constant),	/* For command_query_ */
    2 version fixed bin init (2),
    2 yes_or_no bit (1) unal init ("1"b),
    2 supp_name bit (1) unal init ("0"b),
    2 pad bit (34) unal init ("0"b),
    2 code1 fixed bin (35) init (0),
    2 code2 fixed bin (35) init (0);

/* Internal static */

dcl  call_type fixed bin int static init (0);		/* Says which kind of ring0 call to use */
dcl  init_sw bit (1) int static init ("0"b);
dcl  crmem fixed bin int static;

/* External stuff */

dcl  phcs_$tty_order entry (fixed bin, char (*), ptr, fixed bin, fixed bin (35));
dcl  hphcs_$tty_order entry (fixed bin, char (*), ptr, fixed bin, fixed bin (35));
dcl  phcs_$tty_control entry (char (*), char (*), ptr, fixed bin (35));
dcl  hphcs_$tty_control entry (char (*), char (*), ptr, fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  sub_err_ entry options (variable);
dcl  command_query_ entry options (variable);
dcl  hcs_$fs_get_path_name entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
dcl  hcs_$list_acl entry (char (*), char (*), ptr, ptr, ptr, fixed bin, fixed bin (35));
dcl  hcs_$add_acl_entries entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
dcl  hcs_$delete_acl_entries entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
dcl  get_group_id_$tag_star entry returns (char (32));
dcl  db_fnp_sym_util_$get_value entry (char (*)) returns (fixed bin);
dcl  get_fnp_name_ entry (fixed bin) returns (char (32));

dcl  error_table_$bad_arg ext fixed bin (35);
dcl  error_table_$unimplemented_version ext fixed bin (35);
dcl  error_table_$moderr ext fixed bin (35);
dcl  error_table_$dev_offset_out_of_bounds ext fixed bin (35);

dcl  linkage_error condition;
dcl  no_write_permission condition;

dcl (addr, min, null, substr) builtin;

/* Entry to fetch fnp memory */

fetch:	entry (arg_corep, arg_fnp, arg_fnp_addr, arg_fnp_len, arg_data_ptr, arg_code);

	corep = arg_corep;				/* Get ptr to memory image (if in segment) */
	fnp_addr = arg_fnp_addr;
	fnp_len = arg_fnp_len;

	if corep = null then do;			/* Dumping a real fnp */
	     fnp = arg_fnp;
	     fnp_name = get_fnp_name_ (fnp);
	     fnp_info.fnp_addr = fnp_addr;
	     fnp_info.fnp_len = arg_fnp_len;
	     fnp_info.data_ptr = arg_data_ptr;
	     fnp_info.prev_data_ptr = null;
	     do while (fnp_len > 0);
		fnp_info.fnp_len = min (fnp_len, 64);
retry_dump_call:
		if call_type = 0 then do;		/* Haven't established which call yet */
		     on linkage_error go to call_1_failed;
		     call phcs_$tty_order (fnp, "dump_fnp", addr (fnp_info), state, code);
		     revert linkage_error;		/* It worked */
		     call_type = 1;
		     go to check_fetch_code;
call_1_failed:	     on linkage_error go to call_2_failed;
		     call phcs_$tty_control (fnp_name, "dump_fnp", addr (fnp_info), code);
		     revert linkage_error;
		     call_type = 2;
		     go to check_fetch_code;
call_2_failed:	     revert linkage_error;
		     call sub_err_ (0, "db_fnp_memory_", "h", null (), (0),
			"No access to phcs_ gate; unable to read FNP memory.");
		     go to retry_dump_call;
		end;
		else if call_type = 1 then call phcs_$tty_order (fnp, "dump_fnp", addr (fnp_info), state, code);
		else call phcs_$tty_control (fnp_name, "dump_fnp", addr (fnp_info), code);
check_fetch_code:
		if code ^= 0 then go to fetch_return;
		fnp_info.fnp_addr = fnp_info.fnp_addr + fnp_info.fnp_len; /* Check next address */
		fnp_info.data_ptr = addr (fnp_info.data_ptr -> fnp_mem (fnp_info.fnp_len + 1));
		fnp_len = fnp_len - fnp_info.fnp_len;
	     end;
	end;
	else do;					/* Dumping from a segment */
	     call check_bounds;
	     if code ^= 0 then go to fetch_return;
	     arg_data_ptr -> fnp_mem = addr (dump_seg (arg_fnp_addr)) -> fnp_mem;
	     code = 0;
	end;

fetch_return:
	arg_code = code;
	return;

/* Entry to store into FNP memory */

store:	entry (arg_corep, arg_fnp, arg_fnp_addr, arg_fnp_len, arg_data_ptr, arg_caller, arg_mode, arg_code);


	corep = arg_corep;
	fnp = arg_fnp;
	fnp_addr = arg_fnp_addr;
	fnp_len = arg_fnp_len;
	mode = arg_mode;
	data_ptr = arg_data_ptr;

	if fnp_len < 1 | fnp_len > 32 then do;
	     code = error_table_$bad_arg;
	     go to store_return;
	end;

	call fetch (corep, fnp, fnp_addr, fnp_len, addr (check_buf), code); /* Get old values */
	if code ^= 0 then go to store_return;

	if mode ^= 0 then do;			/* If reporting needed */
	     do i = 1 to fnp_len;
		call ioa_ ("^6w  ^.3b to ^.3b", fnp_addr + i - 1,
		     check_buf (i), data_ptr -> fnp_mem (i));
	     end;
	     if mode = 2 then do;			/* Must ask for verification */
		call command_query_ (addr (query_info), answer, arg_caller, "Correct?");
		if answer ^= "yes" then do;
		     code = 0;
		     go to store_return;
		end;
	     end;
	end;

	if corep ^= null then do;			/* Patching a segment */
	     on no_write_permission go to force_access;
	     addr (dump_seg (fnp_addr)) -> fnp_mem = data_ptr -> fnp_mem;
	     revert no_write_permission;
	     code = 0;
	     go to store_return;

force_access:  revert no_write_permission;
	     call hcs_$fs_get_path_name (corep, dir, (0), ename, code); /* Get seg name, needed for acl primitives */
	     if code ^= 0 then go to store_return;
	     segment_acl.access_name (1) = get_group_id_$tag_star (); /* Get my current acl entry */
	     segment_acl.zero_pad (1) = "0"b;
	     call hcs_$list_acl (dir, ename, null (), (null ()), addr (segment_acl), (1), code);
	     if code ^= 0 then go to store_return;
	     if segment_acl.status_code (1) = 0 then do;	/* I did have an entry */
		save_modes = segment_acl.modes (1);	/* Save them */
		replace_acl = "1"b;			/* Remember to put them back */
	     end;
	     else replace_acl = "0"b;			/* No acl to replace */
	     segment_acl.modes (1) = "101"b;		/* Give rw access to me */
	     segment_acl.zero_pad (1) = "0"b;
	     call hcs_$add_acl_entries (dir, ename, addr (segment_acl), 1, code);
	     if code ^= 0 then go to store_return;
	     on no_write_permission begin;		/* Ready to begin, but be careful */
		code = error_table_$moderr;
		go to cleanup_acl;
	     end;

	     addr (dump_seg (fnp_addr)) -> fnp_mem = data_ptr -> fnp_mem; /* Try again */
	     code = 0;				/* It worked */
cleanup_acl:   revert no_write_permission;
	     if replace_acl then do;			/* Put back old access */
		segment_acl.modes (1) = save_modes;
		segment_acl.zero_pad (1) = "0"b;
		call hcs_$add_acl_entries (dir, ename, addr (segment_acl), 1, (0));
	     end;
	     else do;
		delete_acl.access_name (1) = segment_acl.access_name (1);
		call hcs_$delete_acl_entries (dir, ename, addr (delete_acl), 1, (0));
	     end;
	end;

	else do;					/* Patching a real FNP */
	     fnp_name = get_fnp_name_ (fnp);
	     fnp_info.fnp_addr = fnp_addr;
	     fnp_info.fnp_len = fnp_len;
	     fnp_info.data_ptr = data_ptr;
	     fnp_info.prev_data_ptr = addr (check_buf);
	     if call_type = 1 then call hphcs_$tty_order (fnp, "patch_fnp", addr (fnp_info), state, code);
	     else if call_type = 2 then call hphcs_$tty_control (fnp_name, "patch_fnp", addr (fnp_info), code);
	     else code = error_table_$unimplemented_version; /* Can't happen */
	end;

store_return: arg_code = code;
	return;


/* Internal procedure to check that an address and length is valid. This is only used for accesses to segments */

check_bounds: proc;

dcl  n fixed bin (18);

	     if ^init_sw then do;
		crmem = db_fnp_sym_util_$get_value (".crmem");
		init_sw = "1"b;
	     end;

	     if fnp_addr < 0 | fnp_len <= 0 then do;
		code = error_table_$bad_arg;
		return;
	     end;

	     n = bin (dump_seg (crmem), 18);
	     if n < 32767 | mod (n+1, 32768) ^= 0
	     then n = 262143;			/* Assume 256k for clobbered seg */

	     if fnp_addr > n | (fnp_addr + fnp_len - 1) > n then do;
		code = error_table_$dev_offset_out_of_bounds;
		return;
	     end;

	     code = 0;
	     return;

	end check_bounds;

     end db_fnp_memory_;
