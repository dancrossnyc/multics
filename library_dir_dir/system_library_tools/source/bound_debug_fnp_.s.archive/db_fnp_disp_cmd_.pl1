/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* DB_FNP_DISP_CMD_: Various entries to perform display type command for debug_fnp */
/* Extracted from main command, and added to, February 1978 by Larry Johnson */
/* Added set_flag and clear_flag commands October 1978 */

db_fnp_disp_cmd_: proc;

/* Arguments */

dcl  arg_corep ptr;
dcl  arg_fnp fixed bin;
dcl  arg_cmd_infop ptr;
dcl  arg_expr_infop ptr;

/* Automatic */

dcl  code fixed bin (35);
dcl  corep ptr;
dcl  fnp fixed bin;
dcl  unal_temp fixed bin (17) unal;
dcl  fnp_buf (0:2047) bit (18) unal;
dcl  flag_work bit (18);
dcl  flag_orig bit (18);
dcl  fnp_addr fixed bin;
dcl  fnp_len fixed bin;
dcl  expr_val fixed bin;
dcl  sw bit (1);
dcl  addr_sw bit (1);
dcl  first_sw bit (1);
dcl  found_sw bit (1);
dcl (i, j) fixed bin;
dcl  mask bit (18);
dcl  temp_word bit (18);
dcl  flag_name char (6);
dcl  symno fixed bin;
dcl  nbits fixed bin;
dcl  disp_type fixed bin;
dcl  disp_len fixed bin;
dcl  type_sw bit (1);
dcl  length_sw bit (1);
dcl  brief_sw bit (1);
dcl  set_flag_sw bit (1);

dcl  based_char char (i) based;

/* Internal static */

dcl  next_buf_addr fixed bin int static init (0);		/* Forward link from last buffer */
dcl  next_block_addr fixed bin int static init (0);	/* Forward link from last block */
dcl  block_length fixed bin int static init (0);
dcl  block_offset fixed bin int static init (0);

/* External */

dcl  ioa_ entry options (variable);
dcl  ioa_$nnl entry options (variable);
dcl  db_fnp_eval_ entry (ptr, fixed bin, char (*), ptr, char (*), fixed bin, fixed bin (35));
dcl  db_fnp_reader_$get_operand entry (ptr);
dcl  db_fnp_memory_$fetch entry (ptr, fixed bin, fixed bin, fixed bin, ptr, fixed bin (35));
dcl  db_fnp_memory_$store entry (ptr, fixed bin, fixed bin, fixed bin, ptr, char (*), fixed bin, fixed bin (35));
dcl  db_fnp_display_ entry (ptr, fixed bin, fixed bin, fixed bin, ptr, fixed bin, fixed bin (35));
dcl  db_fnp_sym_util_$lookup entry (char (*), ptr);
dcl  com_err_ entry options (variable);

dcl (addr, bin, copy, divide, hbound, index, lbound, length, mod, null, substr, unspec) builtin;

/* Entry to display memory in various forms */

display:	entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	call setup;

	call get_operand_req ("Address");
	call cv_expr_op;
	fnp_addr = expr_val;
	disp_type = expr_info.type;
	disp_len = expr_info.len;
	length_sw = "0"b;				/* Length not specified */
	type_sw = "0"b;
	call get_operand;				/* Look for more operands */
	do while (^cmd_info.endline);
	     if ^type_sw then do;
		call check_type;
		if type_sw then go to display_command2;
	     end;
	     if ^length_sw then do;
		call cv_length_op;
		disp_len = expr_val;
		length_sw = "1"b;
	     end;
	     else do;
		call ioa_ ("Invalid operand: ^a", operand);
		go to error_return;
	     end;
display_command2:
	     call get_operand;
	end;

	if length_sw & ^type_sw then disp_type = type_oct;
	call fetch (fnp_addr, disp_len, addr (fnp_buf));
	expr_info.star_addr = fnp_addr;		/* Now safe to remember this address as "*" */
	expr_info.star_known = "1"b;
	call db_fnp_display_ (corep, fnp, fnp_addr, disp_len, addr (fnp_buf), disp_type, code);
	if code ^= 0 then call com_err_ (code, "", "Unable to display memory.");
	return;

/* Entry to patch memory */

patch:	entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	call setup;

	call get_operand_req ("Address");
	call cv_expr_op;
	fnp_addr = expr_val;
patch_command2:
	fnp_len = 0;
	call get_operand_req ("Data word");
	do while (^cmd_info.endline);
	     if ^cmd_info.opstring then do;		/* If not a quoted string */
		if fnp_len >= 32 then do;
long_patch:	     call ioa_ ("Too much data");
		     go to error_return;
		end;
		call cv_expr_op;
		code = expr_val;			/* Move into full word area */
		fnp_buf (fnp_len) = substr (unspec (code), 19, 18);
		fnp_len = fnp_len + 1;
	     end;
	     else do;				/* Do a character patch */
		i = length (operand);
		i = i + mod (i, 2);			/* Round to full words */
		if i = 0 then i = 2;
		if (fnp_len + divide (i, 2, 17, 0)) > 32 then go to long_patch;
		addr (fnp_buf (fnp_len)) -> based_char = operand;
		fnp_len = fnp_len + divide (i, 2, 17, 0);
	     end;
	     call get_operand;
	end;
	expr_info.star_addr = fnp_addr;		/* Remember location as "*" */
	expr_info.star_known = "1"b;
	call store (fnp_addr, fnp_len, addr (fnp_buf));
	return;


/* Entry to do the = command, equivalent to patch * */

equal:	entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	call setup;

	if ^expr_info.star_known then do;
	     call ioa_ ("Value of ""*"" not known.");
	     go to error_return;
	end;
	fnp_addr = expr_info.star_addr;
	go to patch_command2;

/* Entries for dealing with buffers */

buffer:	entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	call setup;

	call parse_buffer_command;
	call display_buffer;

	return;


buffer_chain: entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	call setup;

	call parse_buffer_command;
	call display_buffer;
	do while (next_buf_addr ^= 0);
	     call ioa_ ("");
	     call display_buffer;
	end;
	return;

/* Entries for dealing with blocks chained together */

block:	entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	call setup;

	call parse_block_command;
	call display_block;

	return;

block_chain: entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	call setup;

	call parse_block_command;
	call display_block;
	do while (next_block_addr ^= 0);
	     call ioa_ ("");
	     call display_block;
	end;
	return;


forget:	entry;

	next_buf_addr, next_block_addr, block_offset = 0;
	block_length = 8;

	return;

/* Procudure to parse commands like buffer and buffer_chain */

parse_buffer_command: proc;

dcl  got_addr bit (1) init ("0"b);

	     type_sw = "0"b;
	     disp_type = type_char;
	     brief_sw = "0"b;
	     call get_operand;
	     do while (^cmd_info.endline);
		if operand = "brief" | operand = "bf" | operand = "-brief" | operand = "-bf" then do;
		     brief_sw = "1"b;
		     go to next_buffer_operand;
		end;
		if ^type_sw then do;
		     call check_type;
		     if type_sw then go to next_buffer_operand; /* Valid type */
		end;
		if ^got_addr then do;
		     call cv_expr_op;
		     next_buf_addr = expr_val;
		     got_addr = "1"b;
		end;
		else do;
		     call ioa_ ("Unrecognized operand: ^a", operand);
		     go to error_return;
		end;
next_buffer_operand: call get_operand;
	     end;
	     if ^got_addr then if next_buf_addr = 0 then do;
		     call ioa_ ("No next buffer");
		     go to error_return;
		end;
	     return;

	end parse_buffer_command;

/* Procedure to fetch and display a buffer */

display_buffer: proc;

dcl  i fixed bin;
dcl  nwords fixed bin;

	     if (next_buf_addr = 0) | (mod (next_buf_addr, 32) ^= 0) then do; /* Boundary is wrong */
		call ioa_ ("Invalid buffer address: ^o", next_buf_addr);
		go to error_return;
	     end;
	     call fetch (next_buf_addr, 2, addr (fnp_buf)); /* Read header */
	     if brief_sw then nwords = 2;		/* If brief, thats all */
	     else do;
		nwords = 32 * (bin (substr (fnp_buf (1), 1, 3)) + 1); /* Calc word count of buffer */
		call fetch (next_buf_addr + 2, nwords - 2, addr (fnp_buf (2))); /* Read rest of buffer */
	     end;
	     expr_info.star_addr = next_buf_addr;
	     expr_info.star_known = "1"b;
	     i = next_buf_addr;
	     next_buf_addr = bin (fnp_buf (0));
	     call db_fnp_display_ (corep, fnp, i, nwords, addr (fnp_buf), disp_type, code);
	     if code ^= 0 then do;
		call com_err_ (code, "", "Unable to display memory.");
		go to error_return;
	     end;
	     return;

	end display_buffer;

/* Procedure to parse command lines for block and block_chain commands */

parse_block_command: proc;

dcl  new_block_addr fixed bin;
dcl  new_block_length fixed bin;
dcl  new_block_offset fixed bin;
dcl  got_addr bit (1);

	     call get_operand;
	     if cmd_info.endline then do;
		if next_block_addr = 0 then do;
		     call ioa_ ("No block address.");
		     go to error_return;
		end;
		else return;
	     end;
	     new_block_offset = 0;
	     new_block_length = 8;
	     new_block_addr = next_block_addr;
	     got_addr = "0"b;
	     do while (^cmd_info.endline);
		if operand = "-offset" | operand = "-o" then do;
		     call get_operand_req ("Offset");
		     call cv_expr_op;
		     if expr_val < 0 | expr_val > 2044 then do;
			call ioa_ ("Invalid offset: ^a", operand);
			go to error_return;
		     end;
		     new_block_offset = expr_val;
		end;
		else if operand = "-length" | operand = "-l" then do;
		     call get_operand_req ("Length");
		     call cv_length_op;
		     new_block_length = expr_val;
		end;
		else if ^got_addr then do;
		     call cv_expr_op;
		     new_block_addr = expr_val;
		     got_addr = "1"b;
		end;
		else do;
		     call ioa_ ("Unrecognized operand: ^a", operand);
		     go to error_return;
		end;
		call get_operand;
	     end;

	     if new_block_offset >= new_block_length then do;
		call ioa_ ("Offset greater than block length");
		go to error_return;
	     end;
	     if new_block_addr = 0 then do;
		call ioa_ ("No block address");
		go to error_return;
	     end;
	     next_block_addr = new_block_addr;
	     block_length = new_block_length;
	     block_offset = new_block_offset;
	     return;

	end parse_block_command;

/* Procedure to display a block for block and block chain commands */

display_block: proc;

dcl  i fixed bin;

	     if next_block_addr = 0 then do;
		call ioa_ ("No next block address");
		go to error_return;
	     end;
	     call fetch (next_block_addr, block_length, addr (fnp_buf));
	     expr_info.star_addr = next_block_addr;
	     expr_info.star_known = "1"b;
	     i = next_block_addr;
	     next_block_addr = bin (fnp_buf (block_offset));
	     call db_fnp_display_ (corep, fnp, i, block_length, addr (fnp_buf), type_oct, code);
	     if code ^= 0 then do;
		call com_err_ (code, "", "Unable to display memory");
		go to error_return;
	     end;
	     return;

	end display_block;

/* Entry to display a word by interpreting its flags */

flags:	entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	call setup;

	call get_operand_req ("address");		/* Need address to decode */
	if substr (operand, 1, 1) = "=" then do;	/* A literal, no memory reference needed */
	     call db_fnp_eval_ (corep, fnp, substr (operand, 2), expr_infop, "", expr_val, code);
	     if code ^= 0 then go to error_return;
	     unal_temp = expr_val;			/* Need unaligned version for unspec */
	     flag_orig = unspec (unal_temp);
	     flag_name = "";
	     addr_sw = "0"b;
	end;
	else do;					/* Must read data from memory */
	     call cv_expr_op;
	     call fetch (expr_val, 1, addr (fnp_buf));	/* Get word */
	     flag_orig = fnp_buf (0);
	     flag_name = operand;			/* Flag type defaults to first operand */
	     if flag_name ^= operand then flag_name = ""; /* Unless too long */
	     addr_sw = "1"b;			/* Have address to print */
	     fnp_addr = expr_val;
	end;
	call get_operand;				/* Type of flag decoding to do */
	if ^cmd_info.endline then flag_name = operand;
	if flag_name = "" then do;
	     call ioa_ ("No flag type specified");
	     go to error_return;
	end;

	symbol_tablep = addr (db_fnp_symbols_$db_fnp_symbols_);
	found_sw, first_sw = "0"b;
	flag_work = flag_orig;			/* Starting value of word */
	do symno = 1 to symbol_table.cnt;		/* Scan entire symbol table */
	     symp = addr (symbol_table.entry (symno));
	     if sym.flag_mem = flag_name then do;	/* Symbol defines a flag in this kind of word */
		found_sw = "1"b;
		if ^first_sw then do;		/* Print start of line */
		     call ioa_$nnl ("^[^5o  ^;^s^]^.3b", addr_sw, fnp_addr, flag_orig);
		     first_sw = "1"b;
		end;
		temp_word = unspec (sym.value);	/* Copy value of symbol */
		i = index (temp_word, "1"b);		/* Find first 1 bit */
		if i = 0 then go to check_next_sym;	/* All zero value useless here */
		substr (temp_word, i, 1) = "0"b;	/* Turn off first bit */
		if temp_word then do;		/* Symbol is a multiple bit symbol */
		     nbits = 1;
		     do j = i+1 to 18 while (temp_word); /* First, count the bits */
			substr (temp_word, j, 1) = "0"b;
			nbits = nbits + 1;
		     end;
		     mask = unspec (sym.value);
		     temp_word = flag_orig & mask;	/* Isolate origional value of symbol */
		     if sym.type = type_oct then call ioa_$nnl (" ^a=^.3b", sym.name, copy ("0"b, mod (3 - mod (nbits, 3), 3)) || substr (temp_word, i, nbits));
		     else call ioa_$nnl (" ^a=^b", sym.name, substr (temp_word, i, nbits));
		     flag_work = flag_work & ^mask;	/* These bits have been explained */
		end;
		else do;				/* Simpler case, flag is a single bit */
		     temp_word = unspec (sym.value);
		     if temp_word & flag_work then do;	/* Bit is on */
			call ioa_$nnl (" ^a", sym.name);
			sw = "0"b;
			do i = symno+1 to symbol_table.cnt; /* Scan rest of table for synonyms */
			     symp = addr (symbol_table.entry (i));
			     if (unspec (sym.value) = temp_word) & (sym.flag_mem = flag_name) then do; /* Got one */
				call ioa_$nnl (" ^[^;(^]^a", sw, sym.name);
				sw = "1"b;
			     end;
			end;
			if sw then call ioa_$nnl (")"); /* Close list of synonyms */
		     end;
		     flag_work = flag_work & ^temp_word; /* Flag is identified */
		end;
	     end;
check_next_sym:
	end;

	if ^found_sw then do;
	     call ioa_ ("No flags found in symbol_table for ^a", flag_name);
	     go to error_return;
	end;
	if addr_sw then do;
	     expr_info.star_addr = fnp_addr;
	     expr_info.star_known = "1"b;		/* Remember flag addres as "*" */
	end;
	if ^first_sw then call ioa_ ("^[^5o  ^;^s^]^.3b", addr_sw, fnp_addr, flag_orig);
	else call ioa_ ("");
	if flag_work then call ioa_ ("No flags defined for ^.3b", flag_work);
	return;

/* Commands for setting and clearing flags */

set_flag:	entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	set_flag_sw = "1"b;
	go to join_clear_flag;

clear_flag: entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	set_flag_sw = "0"b;
join_clear_flag:
	call setup;

	call get_operand_req ("Flag");
	call db_fnp_sym_util_$lookup (operand, symp);
	if symp = null () then do;
	     call ioa_ ("Undefined symbol: ^a", operand);
	     go to error_return;
	end;
	if sym.flag_mem = "" then do;
	     call ioa_ ("Symbol is not a flag: ^a", operand);
	     go to error_return;
	end;

	call db_fnp_eval_ (corep, fnp, sym.flag_mem, expr_infop, "", expr_val, code);
	if code ^= 0 then go to error_return;

	call fetch (expr_val, 1, addr (fnp_buf));	/* Read old word value */
	expr_info.star_addr = expr_val;
	expr_info.star_known = "1"b;
	if set_flag_sw then fnp_buf (0) = fnp_buf (0) | unspec (sym.value);
	else fnp_buf (0) = fnp_buf (0) & ^unspec (sym.value);
	call store (expr_val, 1, addr (fnp_buf));
	return;

error_return:
	cmd_info.flush = "1"b;
	return;

/* Procedure to extract 1 operand from the command line */

get_operand: proc;

	     call db_fnp_reader_$get_operand (cmd_infop);
	     if cmd_info.error then go to error_return;
	     return;

	end get_operand;

get_operand_req: proc (s);

dcl  s char (*);

	     call get_operand;
	     if cmd_info.endline then do;
		call ioa_ ("^a missing.", s);
		go to error_return;
	     end;
	     else return;

	end get_operand_req;

/* Procedure to convert an operand intended to be a length */

cv_length_op: proc;

	     call cv_expr_op;
	     if (expr_val < 1) | (expr_val > 2044) then do;
		call ioa_ ("Invalid length: ^a", operand);
		go to error_return;
	     end;
	     return;

	end cv_length_op;

/* Procedure called when operand is an expression */

cv_expr_op: proc;

	     call db_fnp_eval_ (corep, fnp, operand, expr_infop, "", expr_val, code);
	     if code ^= 0 then go to error_return;
	     else return;

	end cv_expr_op;

/* Read some fnp words */

fetch:	proc (a, l, p);

dcl  a fixed bin;					/* Address to read */
dcl  l fixed bin;					/* Length to read */
dcl  p ptr;					/* Where to put it */

	     call db_fnp_memory_$fetch (corep, fnp, a, l, p, code);
	     if code ^= 0 then do;
		call com_err_ (code, "", "Unable to read fnp memory.");
		go to error_return;
	     end;
	     else return;

store:	     entry (a, l, p);

	     call db_fnp_memory_$store (corep, fnp, a, l, p, "", 2, code);
	     if code ^= 0 then do;
		call com_err_ (code, "", "Unable to patch memory");
		go to error_return;
	     end;


	end fetch;

/* Setup arguments */

setup:	proc;

	     corep = arg_corep;
	     fnp = arg_fnp;
	     cmd_infop = arg_cmd_infop;
	     expr_infop = arg_expr_infop;
	     return;

	end setup;

/* Procedure to check operand for valid display type */

check_type: proc;

dcl  i fixed bin;

	     do i = lbound (long_type_names, 1) to hbound (long_type_names, 1);
		if operand = short_type_names (i) | operand = long_type_names (i)
		| operand = "-" || short_type_names (i) | operand = "-" || long_type_names (i) then do;
		     type_sw = "1"b;
		     disp_type = i;
		     return;
		end;
	     end;
	     return;

	end check_type;


%include debug_fnp_data;

     end db_fnp_disp_cmd_;
