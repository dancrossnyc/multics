/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* DB_FNP_SYM_UTIL_ - Manages debug_fnp symbol tables */

/* Written February 1977 by Larry Johnson */
/* Modified August 1979 by Larry Johnson for apropos command */

db_fnp_sym_util_: proc;

/* Arguments */

dcl  arg_sym char (*);
dcl  arg_symp ptr;
dcl  arg_user_tablep ptr;
dcl  arg_expr_infop ptr;
dcl  arg_corep ptr;
dcl  arg_fnp fixed bin;
dcl  arg_cmd_infop ptr;
dcl  arg_member char (*);
dcl  arg_value fixed bin;

/* Automatic */

dcl (i, j) fixed bin;
dcl  req bit (1) init ("0"b);
dcl  set_sym_name char (6);
dcl  set_sym_value fixed bin;
dcl  code fixed bin (35);
dcl  apropos_listp ptr;
dcl  apr_cnt fixed bin;
dcl  found bit (1);

/* Based */

dcl  apropos_list (32) char (32) var based (apropos_listp);
dcl  based_area area based;

/* Constants */

dcl  name char (16) int static options (constant) init ("db_fnp_sym_util_");

/* External */

dcl  sub_err_ entry options (variable);
dcl  ioa_ entry options (variable);
dcl  db_fnp_reader_$get_operand entry (ptr);
dcl  db_fnp_eval_ entry (ptr, fixed bin, char (*), ptr, char (*), fixed bin, fixed bin (35));
dcl  get_system_free_area_ entry returns (ptr);

dcl  cleanup condition;

dcl (addr, addrel, hbound, index, null, unspec) builtin;

/* Entry to lookup a name in the standard symbol table */

lookup:	entry (arg_sym, arg_symp);


lookup_start:
	symbol_tablep = addr (db_fnp_symbols_$db_fnp_symbols_);

lookup_join:
	do i = 1 to symbol_table.cnt;
	     symp = addr (symbol_table.entry (i));
	     if arg_sym = sym.name then do;
		arg_symp = symp;
		return;
	     end;
	end;
	if req then call sub_err_ (0, name, "s", null, (0), "Unable to get value for FNP symbol ""^a"".", arg_sym);
	arg_symp = null;				/* Convertion meaning not found */
	return;


/* This entry is called by people who wont take no for an answer */

lookup_req: entry (arg_sym, arg_symp);

	req = "1"b;
	go to lookup_start;


/* Entry to lookup symbol in users symbol table */

lookup_user: entry (arg_user_tablep, arg_sym, arg_symp);

	symbol_tablep = arg_user_tablep;
	if symbol_tablep = null then do;
	     arg_symp = null;
	     return;
	end;
	else go to lookup_join;


/* Functions for returns values and lengths. these are not allowed to fail */

get_value: entry (arg_sym) returns (fixed bin);

	call lookup_req (arg_sym, symp);
	return (sym.value);

get_length: entry (arg_sym) returns (fixed bin);

	call lookup_req (arg_sym, symp);
	return (sym.len);

/* This entry, given a flag type and a value, returns the symbol that matches both */

lookup_member: entry (arg_value, arg_member, arg_sym);

	symbol_tablep = addr (db_fnp_symbols_$db_fnp_symbols_);
	do i = 1 to symbol_table.cnt;
	     symp = addr (symbol_table.entry (i));
	     if sym.flag_mem = arg_member then
		if sym.value = arg_value then do;
		     arg_sym = sym.name;
		     return;
		end;
	end;
	arg_sym = "";
	return;

/* Entry to implement the set command */

set_command: entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	cmd_infop = arg_cmd_infop;
	expr_infop = arg_expr_infop;

	call db_fnp_reader_$get_operand (cmd_infop);
	if cmd_info.error then go to error_return;
	if cmd_info.endline then do;
	     call ioa_ ("Symbol missing.");
	     go to error_return;
	end;
	set_sym_name = operand;
	if set_sym_name ^= operand then do;
	     call ioa_ ("Symbol name too long: ^a", operand);
	     go to error_return;
	end;
	call db_fnp_reader_$get_operand (cmd_infop);
	if cmd_info.error then go to error_return;
	if cmd_info.endline then do;
	     call ioa_ ("Value missing.");
	     go to error_return;
	end;
	call db_fnp_eval_ (arg_corep, arg_fnp, operand, expr_infop, "", set_sym_value, code);
	if code ^= 0 then go to error_return;

	if set_sym_name = "*" then do;		/* Check for standard names */
	     expr_info.star_addr = set_sym_value;
	     expr_info.star_known = "1"b;
	     return;
	end;
	else if set_sym_name = "tib" then do;
	     expr_info.tib_addr = set_sym_value;
	     expr_info.tib_known = "1"b;
	     return;
	end;
	else if set_sym_name = "hwcm" then do;
	     expr_info.hwcm_addr = set_sym_value;
	     expr_info.hwcm_known = "1"b;
	     return;
	end;
	else if set_sym_name = "sfcm" then do;
	     expr_info.sfcm_addr = set_sym_value;
	     expr_info.sfcm_known = "1"b;
	     return;
	end;


/* User defined symbol */

	symbol_tablep = expr_info.user_tablep;
	do i = 1 to symbol_table.cnt;			/* See if already there */
	     symp = addr (symbol_table.entry (i));
	     if sym.name = set_sym_name then go to store_sym;
	end;

	if symbol_table.cnt ^< symbol_table.maxcnt then do; /* See if room */
	     call ioa_ ("Symbol table full.");
	     go to error_return;
	end;

	symbol_table.cnt = symbol_table.cnt + 1;
	i = symbol_table.cnt;

store_sym:
	symp = addr (symbol_table.entry (i));
	unspec (sym) = "0"b;
	sym.name = set_sym_name;
	sym.value = set_sym_value;
	sym.len = expr_info.len;
	sym.type = expr_info.type;
	sym.reloc = reloc_abs;
	sym.flag_mem = "";
	return;

/* Entry to implement the explain command */

explain:	entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	cmd_infop = arg_cmd_infop;
	call db_fnp_reader_$get_operand (cmd_infop);
	if cmd_info.error then go to error_return;
	if cmd_info.endline then do;
	     call ioa_ ("Symbol missing");
	     go to error_return;
	end;
	do while (^cmd_info.endline);
	     call lookup (operand, symp);
	     if symp = null then call ioa_ ("Symbol ""^a"" undefined.", operand);
	     else if sym.explain = "0"b then call ioa_ ("Symbol ""^a"" has no explanation.", operand);
	     else do;
		exptextp = addrel (addr (db_fnp_symbols_$db_fnp_symbols_), sym.explain);
		call ioa_ ("""^a""^[ (in ^a)^;^s^] = ^a", operand,
		     (sym.flag_mem ^= ""), sym.flag_mem, exptext.data);
	     end;
	     call db_fnp_reader_$get_operand (cmd_infop);
	     if cmd_info.error then go to error_return;
	end;
	return;
error_return:
	cmd_info.flush = "1"b;
	return;

/* Implement apropos command. print symbols whose explanation contains
   the string given */

apropos:	entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	cmd_infop = arg_cmd_infop;
	apropos_listp = null ();
	on cleanup call apropos_cleanup;
	allocate apropos_list in (get_system_free_area_ () -> based_area);

	call db_fnp_reader_$get_operand (cmd_infop);
	if cmd_info.error then go to apropos_error;
	if cmd_info.endline then do;
	     call ioa_ ("Argument missing.");
	     go to apropos_error;
	end;
	apr_cnt = 0;
	do while (^cmd_info.endline);
	     if apr_cnt = hbound (apropos_list, 1) then do;
		call ioa_ ("Too many arguments");
		go to apropos_error;
	     end;
	     apr_cnt = apr_cnt + 1;
	     apropos_list (apr_cnt) = operand;
	     call db_fnp_reader_$get_operand (cmd_infop);
	     if cmd_info.error then go to apropos_error;
	end;

	symbol_tablep = addr (db_fnp_symbols_$db_fnp_symbols_);
	found = "0"b;
	do i = 1 to symbol_table.cnt;
	     symp = addr (symbol_table.entry (i));
	     if sym.explain ^= "0"b then do;
		exptextp = addrel (symbol_tablep, sym.explain);
		do j = 1 to apr_cnt;
		     if index (exptext.data, apropos_list (j)) ^= 0 then do;
			found = "1"b;
			call ioa_ ("""^a""^[ (in ^a)^;^s^] = ^a", sym.name,
			     (sym.flag_mem ^= ""), sym.flag_mem, exptext.data);
			go to next_apropos;
		     end;
		end;
	     end;
next_apropos:
	end;
	if ^found then do;
	     call ioa_ ("No symbols found.");
	     go to apropos_error;
	end;

	call apropos_cleanup;
	return;
apropos_error:
	call apropos_cleanup;
	go to error_return;

apropos_cleanup: proc;

	     if apropos_listp ^= null () then free apropos_list;
	     return;

	end apropos_cleanup;

/* This entry is a debuging entry to display the symbol table. It is called as a Multics command. */

db_fnp_dump_symbols: entry;

	symbol_tablep = addr (db_fnp_symbols_$db_fnp_symbols_);
	if symbol_table.cnt = 0 then do;
	     call ioa_ ("No symbols.");
	     return;
	end;

	call ioa_ ("NAME    VALUE  LEN RELOC  TYPE   FLAG     EXPLANATION^/");

	do i = 1 to symbol_table.cnt;
	     symp = addr (symbol_table.entry (i));
	     exptextp = addrel (symbol_tablep, sym.explain);
	     call ioa_ ("^6a^7o^5o  ^[    ^;tib ^;hwcm^;sfcm^;meters^]  ^6a ^8a ^[^a^;^s^]", sym.name, sym.value, sym.len,
		sym.reloc + 1, short_type_names (sym.type), sym.flag_mem, (sym.explain ^= "0"b), exptext.data);
	end;
	call ioa_ ("^/^d symbol^[s^].^/", symbol_table.cnt, symbol_table.cnt ^= 1);
	return;

%include debug_fnp_data;

     end db_fnp_sym_util_;
