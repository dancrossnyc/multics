/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Procedure to interpret fnp machine instructions */

/* Written February 1977 by Larry Johnson */
/* Modified January 1978 by Larry Johnson for assemble entry */

db_fnp_edit_inst_: proc (arg_corep, arg_fnp, arg_fnp_addr, arg_instr, arg_str);

/* Parameters */

dcl  arg_corep ptr;					/* Pointer to core image, if dump */
dcl  arg_fnp fixed bin;				/* Fnp number, for running fnp */
dcl  arg_instr bit (18);				/* Instruction to edit */
dcl  arg_str char (*) var;				/* The output string */
dcl  arg_asm_str char (*);				/* The string to assemble */
dcl  arg_expr_infop ptr;
dcl  arg_code fixed bin (35);
dcl  arg_fnp_addr fixed bin;

/* Automatic */

dcl  fnp fixed bin;
dcl  corep ptr;
dcl  str char (64) var;
dcl  instruction bit (18) aligned;
dcl  opc bit (12) aligned;
dcl (i, j) fixed bin;
dcl  offset fixed bin;
dcl  width fixed bin init (7);			/* Width to edit opcode field */
dcl  code fixed bin (35);
dcl  val fixed bin (35);
dcl  temp_str char (4);
dcl  char_addr_val bit (3);
dcl  edited_addr char (32) var;
dcl  fnp_addr_known bit (1);

dcl 1 mi aligned based (addr (instruction)),
    2 i bit (1) unal,				/* Indirect bit */
    2 x bit (2) unal,				/* Index register */
    2 c bit (6) unal,				/* The opcode (normally) */
    2 d bit (9) unal;				/* The displacement */

/* Constants */

dcl  reg_name (3) char (1) int static options (constant) init ("1", "2", "3");
dcl  char_addr (0:7) char (3) int static options (constant) init (
     "w.1", "w.2", "b.0", "b.1", "c.0", "c.1", "c.2", "idl");
dcl  reg_code (10) char (2) int static options (constant) init (
     "*", "1*", "2*", "3*", "*1", "*2", "*3", "1", "2", "3");
dcl  reg_val (10) bit (3) unal int static options (constant) init (
     "100"b, "101"b, "110"b, "111"b, "101"b, "110"b, "111"b, "001"b, "010"b, "011"b);
dcl  white_space char (2) int static options (constant) init (" 	"); /* Space and tab */

/* External stuff */

dcl  ioa_$rsnnl entry options (variable);
dcl  db_fnp_eval_ entry (ptr, fixed bin, char (*), ptr, char (*), fixed bin, fixed bin (35));
dcl  db_fnp_util_$edit_module_addr_paren entry (ptr, fixed bin, fixed bin, char (*) var, fixed bin (35));

dcl  error_table_$bad_arg ext fixed bin (35);

dcl (addr, bin, bit, copy, index, length, ltrim, reverse, rtrim, search, substr, unspec) builtin;

/* Edit an instruction */

	fnp_addr_known = "1"b;
start:	instruction = arg_instr;
	str = "";

	opc = substr (instruction, 1, 12);

	optablep = addr (db_fnp_opcodes_$);

	do i = 1 to optable.cnt;			/* Find instruction in table */
	     opp = addr (optable.entry (i));
	     if (opc & op.mask) = op.code then go to op_edit (op.type);
	end;

	arg_str = "";
	return;


/* Type 0 - storage reference instruction */

op_edit (0):
	if mi.x = "0"b then offset = fb (mi.d);		/* 9 bit displacement for ic modified instructions */
	else do;					/* Offset depends in type of character addressing */
	     i = bin (substr (mi.d, 1, 3));		/* Get char addr code */
	     if i < 2 | i > 6 then offset = fb (mi.d);	/* If invalid, use 9 bits */
	     else offset = fb (substr (mi.d, 4, 6));	/* Else use 6 bits */
	end;
	call ioa_$rsnnl ("^va ^o", str, (0), width, op.name, offset);
	if mi.x = "0"b then do;			/* IC modifier */
	     if mi.i then str = str || ",*";
	     if fnp_addr_known then do;		/* Evaluate address */
		call db_fnp_util_$edit_module_addr_paren (arg_corep, arg_fnp, arg_fnp_addr + offset, edited_addr,
		     code);
		if code = 0 then do;
		     str = str || copy (" ", 15 - length (str)); /* Increase to 15 characters */
		     str = str || edited_addr;
		end;
	     end;
	end;
	else do;					/* Index register modifier */
	     str = str || ",";
	     str = str || reg_name (bin (mi.x));
	     if mi.i then str = str || "*";
	     i = bin (substr (mi.d, 1, 3));		/* Get byte address */
	     if i >= 2 & i <= 6 then do;		/* Valid one */
		str = str || ",";
		str = str || char_addr (i);
	     end;
	end;
	go to op_done;

/* Type 1 - immediate instructions */

op_edit (1):
	call ioa_$rsnnl ("^va ^o", str, (0), width, op.name, fb (mi.d));
	go to op_done;

/* Type 2 - iacxn instruction */

op_edit (2):
	call ioa_$rsnnl ("^va ^o", str, (0), width, op.name, fb (substr (mi.d, 4, 6)));
	if substr (mi.d, 1, 3) ^= "0"b then do;
	     str = str || ",";
	     str = str || char_addr (bin (substr (mi.d, 1, 3)));
	end;
	go to op_done;

/* Type 3 - shifts */

op_edit (3):
	call ioa_$rsnnl ("^va ^o", str, (0), width, op.name, bin (substr (mi.d, 4, 6)));
	go to op_done;

/* Type 4 - no operands */

op_edit (4):
	str = rtrim (op.name);
	go to op_done;

/* All done */

op_done:
	arg_str = str;
	return;

/* Entry which returns a compressed version */

compressed: entry (arg_corep, arg_fnp, arg_instr, arg_str);

	width = 1;
	fnp_addr_known = "0"b;
	go to start;

/* Entry to "assemble" a character string into a machine instruction word */

assemble:	entry (arg_corep, arg_fnp, arg_asm_str, arg_expr_infop, arg_instr, arg_code);

	corep = arg_corep;
	fnp = arg_fnp;
	expr_infop = arg_expr_infop;
	arg_code = 0;
	arg_instr = "0"b;

	instruction = "0"b;
	str = rtrim (ltrim (arg_asm_str, white_space), white_space); /* Trim down input */
	i = search (str, white_space);		/* Look for space after opcode */
	if i = 0 then i = length (str);
	else i = i-1;
	optablep = addr (db_fnp_opcodes_$);
	do j = 1 to optable.cnt;
	     opp = addr (optable.entry (j));
	     if op.name = substr (str, 1, i) then go to op_found; /* Found opcode match */
	end;
asm_bad:	arg_code = error_table_$bad_arg;
	return;

op_found:	instruction = op.code;			/* Start instruction with opcode */
	if i >= length (str) then go to asm_complete;	/* No operands */
	str = ltrim (substr (str, i+1), white_space);
	if str = "" then go to asm_complete;
	go to asm (op.type);			/* Complete instruction based on type */

asm (0):						/* Storage reference */
	call get_char_addr;				/* Remove char addressing */
	if length (str) >= 2 then do;			/* May have index register */
	     i = index (reverse (str), ",");		/* Look for comma before index */
	     if (i = 2) | (i = 3) then do;		/* May really be there */
		temp_str = substr (str, length (str) - i + 2); /* Copy end of string */
		do j = 1 to 10;			/* Check possible codes */
		     if temp_str = reg_code (j) then do; /* Found match */
			mi.i = substr (reg_val (j), 1, 1);
			mi.x = substr (reg_val (j), 2, 2);
			str = substr (str, 1, length (str) - i); /* Trim off index */
			go to eval_disp;
		     end;
		end;
		go to asm_bad;
	     end;
	end;
eval_disp:
	call eval_str;				/* Evaluate rest of string as expression */
	if char_addr_val = "0"b then mi.d = substr (unspec (val), 28); /* 9 bit displacement */
	else do;
	     substr (mi.d, 1, 3) = char_addr_val;
	     substr (mi.d, 4, 6) = substr (unspec (val), 31); /* 6 bit displacement */
	end;
	go to asm_complete;

asm (1):						/* Immediate instructions */
	call eval_str;				/* Whole expr is amount */
	mi.d = substr (unspec (val), 28);
	go to asm_complete;

asm (2):						/* Iacxn */
	call get_char_addr;
	go to eval_disp;				/* Rest is like storage reference */

asm (3):						/* Shifts */
	call eval_str;
	substr (mi.d, 4, 6) = substr (unspec (val), 31);	/* 6 bit disp */
	go to asm_complete;

asm (4):						/* No operand instruction */
	go to asm_bad;				/* Operand is error */

asm_complete:
	arg_instr = instruction;
	arg_code = 0;
	return;

/* Fixed of bit function which respects the leading sign bit */

fb:	proc (bits) returns (fixed bin);

dcl  bits bit (*);
dcl  i fixed bin (35);

	     if substr (bits, 1, 1) = "0"b then i = 0;
	     else i = -1;
	     substr (unspec (i), 37 - length (bits)) = bits;
	     return (i);

	end fb;

/* Remove character addressing from instruction specification */

get_char_addr: proc;

dcl  i fixed bin;

	     char_addr_val = "0"b;
	     if length (str) < 4 then return;		/* Too short */
	     if substr (str, length (str) - 3, 1) ^= "," then return; /* Should be of form ,xxx */
	     temp_str = substr (str, length (str)-2);	/* Copy the xxx part */
	     do i = 2 to 6;				/* Check legal forms */
		if temp_str = char_addr (i) then do;
		     char_addr_val = bit (bin (i, 3), 3);
		     str = substr (str, 1, length (str)-4);
		     return;
		end;
	     end;
	     return;

	end get_char_addr;

/* Evaluate operand of instruction */

eval_str:	proc;

dcl  i fixed bin;

	     val = 0;
	     if str = "" then return;
	     call db_fnp_eval_ (corep, fnp, (str), expr_infop, "", i, code);
	     if code ^= 0 then go to asm_bad;
	     val = i;
	     return;

	end eval_str;

%include debug_fnp_data;

     end db_fnp_edit_inst_;
