/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* DEBUG_FNP - A tool for analyzing FNP dumps and debugging FNP software. */

/* Written February 1977 by Larry Johnson */
/* Modified 7/24/78 by J. Stern to add buffer_status command */
/* Modified September 1978 by Larry Johnson for call_trace command */

debug_fnp: db_fnp: proc;

/* Automatic and related things */

dcl  code fixed bin (35);
dcl  i fixed bin;
dcl  fnp fixed bin;					/* Current fnp, if working on live fnp */
dcl  corep ptr;					/* Pointer to fnp core image in a segment */
dcl  arg_ptr ptr;
dcl  arg_len fixed bin;
dcl  arg char (arg_len) based (arg_ptr);

dcl 1 auto_expr_info like expr_info aligned automatic;
dcl 1 auto_cmd_info like cmd_info aligned automatic;
dcl 1 auto_env like env aligned automatic;

dcl 1 user_symbol_table aligned,
    2 cnt fixed bin,
    2 maxcnt fixed bin,
    2 entry (50) unal,
      3 one_symbol like sym unal;

/* Constants */

dcl  name char (9) int static options (constant) init ("debug_fnp");

/* Commands are numbered internally as follows:
   01 - fnp
   02 - dump
   03 - image
   04 - map
   05 - e
   06 - quit
   07 - convert_address
   08 - display
   09 - line
   10 - .
   11 - patch
   12 - =
   13 - what
   14 - why
   15 - regs
   16 - buffer
   17 - buffer_chain
   18 - set
   19 - set_break
   20 - start
   21 - reset_break
   22 - list_break
   23 - dump_dir
   24 - dumps
   25 - last_dump
   26 - prev_dump
   27 - trace_mask
   28 - start_trace
   29 - stop_trace
   30 - print_trace
   31 - select_fnp
   32 - next_dump
   33 - block
   34 - block_chain
   35 - flags
   36 - explain
   37 - buffer_status
   38 - call_trace
   39 - set_flag
   40 - clear_flag
   41 - idle_time
   42 - ic_sample
   43 - sample_time
   44 - mdisp_data
   45 - apropos
   46 - when */

/* List of commands and their abbreviations. An index in this array is translated by cmd_no into a command number */

dcl  cmd_list (61) char (16) int static options (constant) init (
     "fnp",					/* 1 */
     "dump",					/* 2 */
     "image",					/* 3 */
     "map",					/* 4 */
     "e",						/* 5 */
     "quit",					/* 6 */
     "q",						/* 7 */
     "convert_address",				/* 8 */
     "cva",					/* 9 */
     "display",					/* 10 */
     "d",						/* 11 */
     "line",					/* 12 */
     ".",						/* 13 */
     "patch",					/* 14 */
     "=",						/* 15 */
     "what",					/* 16 */
     "why",					/* 17 */
     "regs",					/* 18 */
     "buffer",					/* 19 */
     "buf",					/* 20 */
     "buffer_chain",				/* 21 */
     "bufc",					/* 22 */
     "set",					/* 23 */
     "set_break",					/* 24 */
     "sb",					/* 25 */
     "start",					/* 26 */
     "sr",					/* 27 */
     "reset_break",					/* 28 */
     "rb",					/* 29 */
     "list_break",					/* 30 */
     "lb",					/* 31 */
     "dump_dir",					/* 32 */
     "dumps",					/* 33 */
     "last_dump",					/* 34 */
     "prev_dump",					/* 35 */
     "trace_mask",					/* 36 */
     "start_trace",					/* 37 */
     "stop_trace",					/* 38 */
     "print_trace",					/* 39 */
     "select_fnp",					/* 40 */
     "next_dump",					/* 41 */
     "block",					/* 42 */
     "blk",					/* 43 */
     "block_chain",					/* 44 */
     "blkc",					/* 45 */
     "flags",					/* 46 */
     "explain",					/* 47 */
     "buffer_status",				/* 48 */
     "bstat",					/* 49 */
     "call_trace",					/* 50 */
     "trace_call",					/* 51 */
     "trace_calls",					/* 52 */
     "set_flag",					/* 53 */
     "clear_flag",					/* 54 */
     ".q",					/* 55 */
     "idle_time",					/* 56 */
     "ic_sample",					/* 57 */
     "sample_time",					/* 58 */
     "mdisp_data",					/* 59 */
     "apropos",					/* 60 */
     "when");					/* 61 */

/* This array maps the index of "cmd_list" into a command number */

dcl  cmd_no (61) fixed bin (11) unal int static options (constant) init (
     01, 02, 03, 04, 05, 06, 06, 07, 07, 08,		/* 01-10 */
     08, 09, 10, 11, 12, 13, 14, 15, 16, 16,		/* 11-20 */
     17, 17, 18, 19, 19, 20, 20, 21, 21, 22,		/* 21-30 */
     22, 23, 24, 25, 26, 27, 28, 29, 30, 31,		/* 31-40 */
     32, 33, 33, 34, 34, 35, 36, 37, 37, 38,		/* 41-50 */
     38, 38, 39, 40, 06, 41, 42, 43, 44, 45,		/* 51-60 */
     46);						/* 61 */

/* This array, indexed by command number says whether some fnp, dump, or
   core image must be selected before the command can be used. */

dcl  select_required (46) bit (1) unal int static options (constant) init (
     "0"b, "0"b, "0"b, "1"b, "0"b, "0"b, "0"b, "1"b, "1"b, "0"b, /* 01-10 */
     "1"b, "1"b, "0"b, "1"b, "1"b, "1"b, "1"b, "0"b, "1"b, "1"b, /* 11-20 */
     "1"b, "1"b, "0"b, "0"b, "0"b, "0"b, "1"b, "1"b, "1"b, "1"b, /* 21-30 */
     "1"b, "0"b, "1"b, "1"b, "0"b, "0"b, "1"b, "1"b, "1"b, "1"b, /* 31-40 */
     "1"b, "1"b, "1"b, "1"b, "0"b, "1"b);		/* 41-46 */

/* All commands are passed through the following entry array. */

dcl  cmd_entry (46) entry (ptr, fixed bin, ptr, ptr) variable init (
     db_fnp_env_$fnp_cmd,				/* 1 */
     db_fnp_env_$dump_cmd,				/* 2 */
     db_fnp_env_$image_cmd,				/* 3 */
     db_fnp_util_$print_module_table,			/* 4 */
     execute_command,				/* 5 */
     quit_command,					/* 6 */
     db_fnp_convert_address_,				/* 7 */
     db_fnp_disp_cmd_$display,			/* 8 */
     db_fnp_env_$line,				/* 9 */
     dot_command,					/* 10 */
     db_fnp_disp_cmd_$patch,				/* 11 */
     db_fnp_disp_cmd_$equal,				/* 12 */
     db_fnp_env_$what,				/* 13 */
     db_fnp_dumps_$why,				/* 14 */
     db_fnp_dumps_$regs,				/* 15 */
     db_fnp_disp_cmd_$buffer,				/* 16 */
     db_fnp_disp_cmd_$buffer_chain,			/* 17 */
     db_fnp_sym_util_$set_command,			/* 18 */
     db_fnp_break_$set,				/* 19 */
     db_fnp_break_$start,				/* 20 */
     db_fnp_break_$reset,				/* 21 */
     db_fnp_break_$list,				/* 22 */
     db_fnp_env_$dump_dir,				/* 23 */
     db_fnp_env_$dumps,				/* 24 */
     db_fnp_env_$last_dump,				/* 25 */
     db_fnp_env_$prev_dump,				/* 26 */
     db_fnp_trace_$mask,				/* 27 */
     db_fnp_trace_$start_trace,			/* 28 */
     db_fnp_trace_$stop_trace,			/* 29 */
     db_fnp_trace_$print_trace,			/* 30 */
     db_fnp_env_$select_fdump_fnp,			/* 31 */
     db_fnp_env_$next_dump,				/* 32 */
     db_fnp_disp_cmd_$block,				/* 33 */
     db_fnp_disp_cmd_$block_chain,			/* 34 */
     db_fnp_disp_cmd_$flags,				/* 35 */
     db_fnp_sym_util_$explain,			/* 36 */
     db_fnp_buffer_status_,				/* 37 */
     db_fnp_call_trace_,				/* 38 */
     db_fnp_disp_cmd_$set_flag,			/* 39 */
     db_fnp_disp_cmd_$clear_flag,			/* 40 */
     db_fnp_scheduler_$idle_time,			/* 41 */
     db_fnp_scheduler_$ic_sample,			/* 42 */
     db_fnp_scheduler_$sample_time,			/* 43 */
     db_fnp_scheduler_$mdisp_data,			/* 44 */
     db_fnp_sym_util_$apropos,			/* 45 */
     db_fnp_env_$when);				/* 46 */

/* External stuff */

dcl  com_err_ entry options (variable);
dcl  cu_$cp entry (ptr, fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cu_$arg_count entry (fixed bin);
dcl  db_fnp_break_$list entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_break_$reset entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_break_$set entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_break_$start entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_buffer_status_ entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_call_trace_ entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_convert_address_ entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_disp_cmd_$flags entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_disp_cmd_$display entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_disp_cmd_$patch entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_disp_cmd_$equal entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_disp_cmd_$buffer entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_disp_cmd_$buffer_chain entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_disp_cmd_$block entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_disp_cmd_$block_chain entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_disp_cmd_$set_flag entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_disp_cmd_$clear_flag entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_dumps_$regs entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_dumps_$why entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_env_$fnp_cmd entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_env_$dump_cmd entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_env_$image_cmd entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_env_$dumps entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_env_$last_dump entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_env_$prev_dump entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_env_$next_dump entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_env_$select_fdump_fnp entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_env_$dump_dir entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_env_$what entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_env_$when entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_env_$line entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_env_$init entry (ptr);
dcl  db_fnp_env_$term entry (ptr);
dcl  db_fnp_reader_$get_command entry (ptr);
dcl  db_fnp_scheduler_$ic_sample entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_scheduler_$idle_time entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_scheduler_$mdisp_data entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_scheduler_$sample_time entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_sym_util_$apropos entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_sym_util_$set_command entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_sym_util_$explain entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_trace_$mask entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_trace_$print_trace entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_trace_$start_trace entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_trace_$stop_trace entry (ptr, fixed bin, ptr, ptr);
dcl  db_fnp_util_$print_module_table entry (ptr, fixed bin, ptr, ptr);
dcl  ioa_ entry options (variable);

dcl (cleanup, program_interrupt) condition;

dcl (addr, hbound, length, string) builtin;

/* Initialization */

	expr_infop = addr (auto_expr_info);
	cmd_infop = addr (auto_cmd_info);
	envp = addr (auto_env);
	cmd_info.flush = "1"b;
	cmd_info.envp = envp;
	expr_info.user_tablep = addr (user_symbol_table);
	user_symbol_table.cnt = 0;
	user_symbol_table.maxcnt = hbound (user_symbol_table.entry, 1);
	string (expr_info.flags) = "0"b;

	call db_fnp_env_$init (envp);			/* Initalize environment */
	fnp = env.fnp;
	corep = env.corep;
	on program_interrupt begin;
	     cmd_info.flush = "1"b;
	     go to next_cmd;
	end;
	on cleanup call db_fnp_env_$term (envp);

	call cu_$arg_count (i);
	if i > 0 then do;				/* There is an arg */
	     call cu_$arg_ptr (1, arg_ptr, arg_len, code);
	     cmd_info.inbuf = ";" || arg;
	     cmd_info.commandp = addr (cmd_info.inbuf);
	     cmd_info.commandl = arg_len + 1;
	     cmd_info.flush, cmd_info.error, cmd_info.endline = "0"b;
	end;


/* Command dispatcher */

next_cmd:						/* Everyone returns here for next command */
	call db_fnp_reader_$get_command (cmd_infop);
	do i = 1 to hbound (cmd_list, 1);		/* Check against all known commands */
	     if operand = cmd_list (i) then do;
		if select_required (cmd_no (i)) then
		     if ^(env.fnp_sw | env.dump_sw | env.image_sw) then do;
			call ioa_ ("No FNP, dump, or image selected.");
			cmd_info.flush = "1"b;
			go to next_cmd;
		     end;
		call cmd_entry (cmd_no (i)) (corep, fnp, cmd_infop, expr_infop);
		fnp = env.fnp;			/* In case changed */
		corep = env.corep;
		go to next_cmd;
	     end;
	end;
	call ioa_ ("Undefined command: ^a", operand);
	go to next_cmd;

/* Come here to stop command completely */

done:	call db_fnp_env_$term (envp);
	return;


/* DOT COMMAND - Doesn't do much */

dot_command: proc;

	     call ioa_ ("^a", name);
	     return;

	end dot_command;

/* QUIT COMMAND - Ends the program */

quit_command: proc;

	     go to done;

	end quit_command;

/* EXECUTE COMMAND - pass rest of command line to the current command processor */

execute_command: proc;

	     call cu_$cp (addr (command), length (command), code);
	     cmd_info.flush = "1"b;			/* We dont look at rest of line */
	     return;

	end execute_command;

%include debug_fnp_data;

     end debug_fnp;
