/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


vip7760_dump_:
     proc (pm_ttybp, pm_ttyap, pm_pvmdp, pm_subchan, pm_brief_sw);

/* Called by tty_dump and tty_analyze to interpret a polled vip multiplexer data base */
/* Coded 1/4/79 by J. Stern */
/* Modified 5/1/79 by J. Stern to add vip7760_analyze_ entry */


/* Parameters */

	dcl     pm_brief_sw		 bit (1);		/* ON for brief output format */
	dcl     pm_check_used_proc	 entry variable;	/* entry called to tally tty_buf space used */
	dcl     pm_devx		 fixed bin;	/* device index of multiplexer channel */
	dcl     pm_long_sw		 bit (1);		/* ON for long output format */
	dcl     pm_pvmdp		 ptr;		/* ptr to polled vip multiplexer data base */
	dcl     pm_subchan		 fixed bin;	/* subchannel number */
	dcl     pm_ttyap		 ptr;		/* ptr to tty_area segment */
	dcl     pm_ttybp		 ptr;		/* ptr to tty_buf segment */


/* Automatic */

	dcl     brief_sw		 bit (1);
	dcl     check_used_proc	 entry (ptr, fixed bin) variable;
	dcl     devx		 fixed bin;
	dcl     subchan		 fixed bin;


/* Builtins */

	dcl     (addr, bin, ptr, rel, size, null, unspec)
				 builtin;


/* Entries */

	dcl     ioa_		 entry options (variable);
	dcl     tty_dump$print_chain	 entry (ptr, char (*), fixed bin, bit (1));

%include polled_vip_mpx_data;


%include polled_vip_mpx_meters;


%include pvip_subchan_meters;

%include tty_buf;

%include lct;

%include tty_buffer_block;

	ttybp = pm_ttybp;
	pvmdp = pm_pvmdp;
	subchan = pm_subchan;
	brief_sw = pm_brief_sw;

/* Print major channel data */

	call ioa_ ("^/PVMD at ^o, channel ^a, devx ^o", bin (rel (pvmdp), 18), pvmd.name, pvmd.devx);
	call ioa_ ("nchan = ^d, nstation = ^d, station_mask = ^w", pvmd.nchan, pvmd.nstation, unspec (pvmd.station_mask));
	if pvmd.cur_nstation ^= pvmd.nstation
	then call ioa_ ("cur_nstation = ^d, cur_station_mask = ^w", pvmd.cur_nstation, unspec (pvmd.cur_station_mask));
	call ioa_ ("load_proc_id = ^.3b, load_ev_chan = ^.3b", pvmd.load_proc_id, unspec (pvmd.load_ev_chan));
	call ioa_ ("pause_time = ^d, max_text_len = ^d, max_message_len = ^d,  quit = ^a, formfeed = ^a", pvmd.pause_time, pvmd.max_text_len,
	     pvmd.max_message_len, pvmd.quit, pvmd.formfeed);
	call ioa_
	     (
	     "flags: ^[ send_output^]^[ mpx_started^]^[ mpx_loading^]^[ mpx_loaded^]^[ polling_started^]^[ controller_poll^]^[ partial_frame^]^[ crlf_echo^]^[ omit_nl^]^[ omit_ff^]^[ gcos_break^]^[ etb_mode^]"
	     , pvmd.send_output, pvmd.mpx_started, pvmd.mpx_loading, pvmd.mpx_loaded, pvmd.polling_started,
	     pvmd.controller_poll, pvmd.partial_frame, pvmd.crlf_echo, pvmd.omit_nl, pvmd.omit_ff, pvmd.gcos_break,
	     pvmd.etb_mode);

	if pvmd.writep ^= null
	then call ioa_ ("writep = ^p", pvmd.writep);
	if pvmd.write_chan ^= 0
	then call ioa_ ("write_chan = ^d", pvmd.write_chan);

	if pvmd.writep ^= null
	then call tty_dump$print_chain (ttybp, "WRITE_CHAIN", bin (rel (pvmd.writep)), brief_sw);

/* Print subchannel data */

	if subchan = -1				/* means we should dump all subchans */
	then do subchan = 1 to pvmd.nchan;
		call print_subchan;
	     end;
	else call print_subchan;

	return;

print_subchan:
     proc;

	dcl     i			 fixed bin;

	pvstep = addr (pvmd.subchan_table (subchan));
	call ioa_ ("^/PVSTE at ^o, channel ^a.^a, devx ^o, subchan ^o, station_addr ^o", bin (rel (pvstep), 18), pvmd.name,
	     pvste.name, pvste.devx, subchan, pvste.station_addr);

	if pvste.printer
	then i = pvmd.station_to_subchan (pvste.station_addr).printer;
	else i = pvmd.station_to_subchan (pvste.station_addr).display;
	if i ^= subchan
	then call ioa_ ("ERROR: ^[printer^;display^] station ^d maps to subchan ^d", pvste.printer, pvste.station_addr, i);

	call ioa_ ("flags: ^[ printer^]^[ hold_output^]^[ eop^]^[ hndlquit^]^[ listen^]^[ dialed^]^[ slave^]",
	     pvste.printer, pvste.hold_output, pvste.eop, pvste.hndlquit, pvste.listen, pvste.dialed, pvste.slave);
	;
	if pvste.printer
	then call ioa_ ("baud_rate = ^d", pvste.baud_rate);

	if pvste.pgofs + pvste.writes ^= 0
	then call ioa_ ("pgofs = ^d, writes = ^d", pvste.pgofs, pvste.writes);
	if pvste.naks ^= 0
	then call ioa_ ("naks = ^d", pvste.naks);

	if pvste.write_chain ^= 0			/* there's a write chain to print */
	then call tty_dump$print_chain (ttybp, "WRITE CHAIN", (pvste.write_chain), brief_sw);

     end;

vip7760_analyze_:
     entry (pm_ttybp, pm_ttyap, pm_devx, pm_check_used_proc, pm_long_sw);

	ttybp = pm_ttybp;
	devx = pm_devx;
	check_used_proc = pm_check_used_proc;
	brief_sw = ^pm_long_sw;

/* get ptr to polled vip multiplexer data base for specified devx */

	lctp = ptr (ttybp, rel (tty_buf.lct_ptr));
	lctep = addr (lct.lcte_array (devx));
	pvmdp = ptr (ttybp, rel (lcte.data_base_ptr));

/* display data base contents */

	call vip7760_dump_ (ttybp, pm_ttyap, pvmdp, -1, brief_sw);

/* account for all tty_buf space used by multiplexer */

	pvmd_nchan = pvmd.nchan;
	call check_used_proc (pvmdp, size (pvmd));
	call trace_chain (bin (rel (pvmd.writep)));

	do subchan = 1 to pvmd.nchan;			/* examine all subchans */
	     pvstep = addr (pvmd.subchan_table (subchan));
	     call trace_chain ((pvste.write_chain));
	end;

	return;

/* subroutine to trace a buffer chain and account for space used */

trace_chain:
     proc (chain_offset);

	dcl     chain_offset	 fixed bin (18);
	dcl     buf_offset		 fixed bin (18);


	buf_offset = chain_offset;
	do while (buf_offset ^= 0);
	     if buf_offset < bin (tty_buf.borig, 18)
	     then return;				/* give up on bad chain */

	     blockp = ptr (ttybp, buf_offset);
	     buf_offset = buffer.next;
	     call check_used_proc (blockp, 16 * (bin (buffer.size_code, 3) + 1));
	end;

     end;


     end;						/* vip7760_dump_ */
