/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* Interpret a HASP multiplexer database:  called from tty_dump and tty_analyze */

/* Created:  November 1979 by G. Palter */
/* Modified: December 1980 by G. Palter as part of "loopback bug" fix */
/* Modified: 30 March 1981 by G. Palter to add last_loopback_bcb to HMD */
/* Modified: 16 April 1981 by G. Palter to interpret rts_mode flag in HMD */
/* Modified: July 1981 by G. Palter to support SIGNON processing and metering */
/* Modified: 20 August 1981 by G. Palter to correct bugs in displaying minor-state and loopback stacks */
/* Modified: 29 December 1981 by G. Palter to let the analyze entry print the buffer chain and to properly order calls to
      the analyzer's check_used procedure which writes into its arguments */
/* Modified: 5 January 1982 by G. Palter to not display the HMD when displaying the HSTE of a single subchannel */


hasp_dump_:
     procedure (P_ttybp, P_ttyap, P_hmd_ptr, P_subchannel_idx, P_brief_sw);


/* Parameters */

dcl  P_ttybp pointer parameter;			/* -> tty_buf segment */
dcl  P_ttyap pointer parameter;			/* -> tty_area segment */

dcl  P_hmd_ptr pointer parameter;			/* hasp_dump_:  -> HASP multiplexer data */
dcl  P_subchannel_idx fixed binary parameter;		/* hasp_dump_:  index of sub-channel to dump (-1 for all) */
dcl  P_brief_sw bit (1) parameter;			/* hasp_dump_:  ON => brief output format */

dcl  P_devx fixed binary parameter;			/* hasp_analyze_:  LCT index of HASP multiplexer channel */
dcl  P_check_used entry variable parameter;		/* hasp_analyze_:  tracks space used in tty_buf */
dcl  P_long_sw bit (1) parameter;			/* hasp_analyze_:  ON => long output format */


/* Local copies of parameters */

dcl  subchannel_idx fixed binary;
dcl  brief_sw bit (1);

dcl  devx fixed binary;
dcl  check_used entry () options (variable) variable;


/* Remaining declarations */

dcl  analyze_entry bit (1) aligned;			/* ON => hasp_analyze_; OFF => hasp_dump_ */

dcl  idx fixed binary;

dcl (ioa_, ioa_$nnl) entry () options (variable);
dcl  tty_dump$print_chain entry (pointer, character (*), fixed binary (18), bit (1));

dcl (addr, binary, currentsize, null, pointer, rel, unspec) builtin;
%page;
/* Dump a HASP multiplexer database and sub-channels (if requested) */

/* hasp_dump_:
     entry (P_ttybp, P_ttyap, P_hmd_ptr, P_subchannel_idx, P_brief_sw); */

	analyze_entry = "0"b;

	ttybp = P_ttybp;				/* copy parameters */
	hmd_ptr = P_hmd_ptr;
	subchannel_idx = P_subchannel_idx;
	brief_sw = P_brief_sw;

	if (subchannel_idx = -1) | (subchannel_idx = 0) then
	     call dump_multiplexer_data ();		/* global data only */
	else call dump_subchannel_data (subchannel_idx);	/* data about one subchannel */

	return;



/* Analyze a HASP multiplexer database and all sub-channels */

hasp_analyze_:
     entry (P_ttybp, P_ttyap, P_devx, P_check_used, P_long_sw);

	analyze_entry = "1"b;

	ttybp = P_ttybp;				/* copy parameters */
	devx = P_devx;
	check_used = P_check_used;
	brief_sw = ^P_long_sw;			/* dump entry works the other way */

	lctp = pointer (ttybp, rel (tty_buf.lct_ptr));
	lctep = addr (lct.lcte_array (devx));
	hmd_ptr = pointer (ttybp, rel (lcte.data_base_ptr));

	call dump_multiplexer_data ();

	do subchannel_idx = 1 to hmd.n_subchannels;
	     call dump_subchannel_data (subchannel_idx);
	end;

	call trace_buffer_chain (binary (rel (hmd.output_chain_ptr), 18, 0));
	call trace_buffer_chain (binary (rel (hmd.input.first_bufferp), 18, 0));
	call trace_buffer_chain (binary (rel (hmd.loopback.first_bufferp), 18, 0));
	call trace_buffer_chain (binary (rel (hmd.output_block.first_bufferp), 18, 0));

	do idx = 1 to hmd.n_subchannels;
	     hste_ptr = addr (hmd.subchannels (idx));
	     call trace_buffer_chain (binary (rel (hste.input.first_bufferp), 18, 0));
	     call trace_buffer_chain (binary (rel (hste.loopback.first_bufferp), 18, 0));
	     call trace_buffer_chain (binary (rel (hste.output.first_bufferp), 18, 0));
	end;

	call check_used (hmd_ptr, currentsize (hmd));

	return;
%page;
/* Dump the multiplexer's database (and the requested sub-channels also) */

dump_multiplexer_data:
	procedure ();

	     call ioa_ ("^/HMD at ^o; channel ^a; devx ^o", binary (rel (hmd_ptr), 18, 0), hmd.name, hmd.devx);
	
	     call ioa_ ("configuration:^/^3xtype = ^[workstation^;host^]; max_block_size = ^d", (hmd.type + 1),
			hmd.max_block_size);
	     if ^brief_sw then do;			/* only in long mode, please... */
		call ioa_ ("^3xmax_device_input_records = ^d; max_device_output_records = ^d",
			 hmd.max_device_input_records, hmd.max_device_output_records);
		call ioa_ ("^3xic_timeout = ^d; receive_timeout = ^d; transmit_timeout = ^d",
			 hmd.ic_timeout, hmd.receive_timeout, hmd.transmit_timeout);
	     end;
	     call ioa_ ("^3xflags:^[ suspend_all_mode^]^[ signon_mode^]^[ multileave_mode^]^[ trace_mode^]^[ rts_mode^]",
			hmd.suspend_all_mode, hmd.signon_mode, hmd.multileave_mode, hmd.trace_mode, hmd.rts_mode);

	     if ^brief_sw then			/* keep it short when requested */
		call ioa_ ("loader_process = ^.3b; loader_event = ^.3b", hmd.loader_process_id, unspec (hmd.loader_event_channel));

	     call ioa_ ("state = ^[down^;loading^;loaded^;started^]; minor_state = ^[send-signon^;wait-signon-response^;normal^;send-sync^;loopback^;reprocess^;send-bad-bcb^;hangup^]",
			hmd.state, hmd.minor_state);

	     call ioa_ ("foreign_block_count = ^d; foreign_fcs_bytes = ^6.3b; local_block_count = ^d; local_fcs_bytes = ^6.3b",
			hmd.foreign_block_count, unspec (hmd.foreign_fcs_bytes),
			hmd.local_block_count, unspec (hmd.local_fcs_bytes));

	     call ioa_ ("subchannels_for_output.first = ^d; subchannels_for_output.last = ^d",
			hmd.subchannels_for_output.first, hmd.subchannels_for_output.last);

	     if hmd.output_chain_ptr ^= null () then
		call ioa_ ("output_chain_ptr = ^p", hmd.output_chain_ptr);

	     if hmd.input.first_bufferp ^= null () then
		call ioa_ ("input.first_bufferp = ^p; input.last_bufferp = ^p", hmd.input.first_bufferp, hmd.input.last_bufferp);

	     if hmd.loopback.first_bufferp ^= null () then
		call ioa_ ("loopback.first_bufferp = ^p; loopback.last_bufferp = ^p", hmd.loopback.first_bufferp, hmd.loopback.last_bufferp);

	     if hmd.output_block.first_bufferp ^= null () then
		call ioa_ ("output_block.subchannel_idx = ^d, output_block.tally = ^d; output_block.first_bufferp = ^p; output_block.last_bufferp = ^p",
			     hmd.output_block.subchannel_idx, hmd.output_block.tally,
			     hmd.output_block.first_bufferp, hmd.output_block.last_bufferp);

	     call ioa_ ("signon_data = ^[none^s^;^p^]; minor_state_stack = ^[none^s^;^p^]; loopback_block_chain_stack = ^[none^s^;^p^]; last_loopback_bcb = ^3.3b",
		      (hmd.signon_data_ptr = null ()), hmd.signon_data_ptr,
		      (hmd.minor_state_stack = null ()), hmd.minor_state_stack,
		      (hmd.loopback_block_chain_stack = null ()), hmd.loopback_block_chain_stack,
		      unspec (hmd.last_loopback_bcb));

	     call ioa_ ("input_wabs (0:8) =^9(^[ on^; off^]^)", hmd.input_wabs (*));
	     call ioa_ ("output_wabs (0:8) =^9(^[ on^; off^]^)", hmd.output_wabs (*));
	     call ioa_ ("send_rts (0:8) = ^9(^[ on^; off^]^)", hmd.send_rts (*));
	     call ioa_ ("send_rts_ack (0:8) =^9(^[ on^; off^]^)", hmd.send_rts_ack (*));

	     call ioa_$nnl ("flags:^[ suspend_all_output^]^[ suspend_all_input^]^[ send_output^]^[ input_available^]^[ output_in_progress^]^[ first_foreign_block^]^[ reset_local_block_count^]",
			hmd.suspend_all_output, hmd.suspend_all_input, hmd.send_output, hmd.flags.input_available,
			hmd.output_in_progress, hmd.first_foreign_block, hmd.reset_local_block_count);

	     call ioa_ ("^[ retry_transmit_output^]^[ retry_process_output^]^[ retry_process_loopback_records^]^[ retry_process_input^]",
		      retry_transmit_output, hmd.retry_process_output, hmd.retry_process_loopback_records,
		      hmd.retry_process_input);

	     call ioa_ ("console_hste_idx = ^d; n_subchannels = ^d", hmd.console_hste_idx, hmd.n_subchannels);

	     if hmd.output_chain_ptr ^= null () then
		call tty_dump$print_chain (ttybp, "Output-chain", binary (rel (hmd.output_chain_ptr), 18, 0), brief_sw);

	     if hmd.input.first_bufferp ^= null () then
		call tty_dump$print_chain (ttybp, "Input-chain", binary (rel (hmd.input.first_bufferp), 18, 0), brief_sw);

	     if hmd.loopback.first_bufferp ^= null () then
		call tty_dump$print_chain (ttybp, "Loopback-chain", binary (rel (hmd.loopback.first_bufferp), 18, 0), brief_sw);

	     if hmd.output_block.first_bufferp ^= null () then
		call tty_dump$print_chain (ttybp, "Output-block", binary (rel (hmd.output_block.first_bufferp), 18, 0), brief_sw);

	     if ^brief_sw then			/* keep it short */
		call dump_multiplexer_meters ();

	     if hmd.signon_data_ptr ^= null () then
		call dump_signon_data ();

	     if hmd.minor_state_stack ^= null () then
		call dump_minor_state_stack ();

	     if hmd.loopback_block_chain_stack ^= null () then
		call dump_loopback_block_chain_stack ();

	     return;

	end dump_multiplexer_data;
%page;
/* Print the database for an individual HASP sub-channel */

dump_subchannel_data:
	procedure (P_subchannel_idx);

dcl  P_subchannel_idx fixed binary parameter;

	     hste_ptr = addr (hmd.subchannels (P_subchannel_idx));

	     call ioa_ ("^/HSTE at ^o; channel ^a.^a; devx ^o", binary (rel (hste_ptr), 18, 0), hmd.name, hste.name, hste.devx);

	     call ioa_ ("subchannel_idx = ^d; device_type = ^[console^;reader^;printer^;punch^]; direction = ^[i/o^;input^;output^]",
			hste.subchannel_idx, hste.device_type, (hste.direction + 1));

	     call ioa_ ("rcb = ^3.3b; device_wab_idx = ^d", unspec (hste.rcb), hste.device_wab_idx);

	     call ioa_ ("state = ^[hungup^;listening^;dialed^]; minor_state = ^[normal^;send-rts^;wait-rts-ack^]; next_subchannel_for_output = ^d",
			hste.state, hste.minor_state, hste.next_subchannel_for_output);

	     if hste.input.first_bufferp ^= null () then
		call ioa_ ("input.n_records = ^d; input.first_bufferp = ^p; input.last_bufferp = ^p",
			     hste.input.n_records, hste.input.first_bufferp, hste.input.last_bufferp);

	     if hste.loopback.first_bufferp ^= null () then
		call ioa_ ("loopback.n_records = ^d; loopback.first_bufferp = ^p; loopback.last_bufferp = ^p",
			     hste.loopback.n_records, hste.loopback.first_bufferp, hste.loopback.last_bufferp);

	     if hste.output.first_bufferp ^= null () then
		call ioa_ ("output.first_bufferp = ^p; output.last_bufferp = ^p", hste.output.first_bufferp,
			     hste.output.last_bufferp);

	     call ioa_ ("flags:^[ requested_input^]^[ input_available^]^[ holding_output^]",
			hste.requested_input, hste.input_available, hste.holding_output);

	     if ^brief_sw then			/* keep it short */
		call dump_subchannel_meters ();

	     if hste.input.first_bufferp ^= null () then
		call tty_dump$print_chain (ttybp, "Input-chain", binary (rel (hste.input.first_bufferp), 18, 0), brief_sw);

	     if hste.loopback.first_bufferp ^= null () then
		call tty_dump$print_chain (ttybp, "Loopback-chain", binary (rel (hste.loopback.first_bufferp), 18, 0), brief_sw);

	     if hste.output.first_bufferp ^= null () then
		call tty_dump$print_chain (ttybp, "Output-chain", binary (rel (hste.output.first_bufferp), 18, 0), brief_sw);

	     return;

	end dump_subchannel_data;
%page;
/* Dump the multiplexer channel's metering data */

dump_multiplexer_meters:
	procedure ();

	     call ioa_ ("meters:^/^3xtime_mpx_booted = ^.3b; time_meters_copied = ^.3b; saved_meters_ptr = ^p",
		      unspec (hmd.time_mpx_booted), unspec (hmd.time_meters_copied), hmd.saved_meters_ptr);

	     call ioa_ ("^3xn_local_wab_set = ^d; n_input_blocks = ^d; n_input_records = ^d; n_duplicate_input_blocks = ^d",
		      hmd.n_local_wab_set, hmd.n_input_blocks, hmd.n_input_records, hmd.n_duplicate_input_blocks);

	     call ioa_ ("^3xn_foreign_wab_set = ^d; n_output_blocks = ^d; n_output_records = ^d",
		      hmd.n_foreign_wab_set, hmd.n_output_blocks, hmd.n_output_records);

	     call ioa_ ("^3xn_wraparounds = ^d; n_wraparound_blocks = ^d", hmd.n_wraparounds, hmd.n_wraparound_blocks);

	     return;

	end dump_multiplexer_meters;
%page;
/* Dump the meters associated with a subchannel */

dump_subchannel_meters:
	procedure ();

	     call ioa_ ("meters: saved_meters_ptr = ^p", hste.saved_meters_ptr);

	     call ioa_ ("^3xn_local_wab_set = ^d; n_input_records = ^d; n_input_eof_records = ^d",
		      hste.device_n_local_wab_set, hste.device_n_input_records, hste.device_n_input_eof_records);

	     call ioa_ ("^3xn_foreign_wab_set = ^d; n_output_records = ^d; n_output_eof_records = ^d",
		      hste.device_n_foreign_wab_set, hste.device_n_output_records, hste.device_n_output_eof_records);

	     return;

	end dump_subchannel_meters;
%page;
/* Dump the SIGNON data associated with this multiplexer */

dump_signon_data:
	procedure ();

	     hsd_ptr = pointer (ttybp, rel (hmd.signon_data_ptr));

	     if ^brief_sw then			/* keep it short */
		call ioa_ ("SIGNON data at ^o:^/^3xsignon_record_process = ^.3b; signon_record_event = ^.3b",
			 binary (rel (hsd_ptr), 18, 0), hmd_signon_data.processid,
			 unspec (hmd_signon_data.event_channel));

	     if analyze_entry then
		call check_used (hsd_ptr, currentsize (hmd_signon_data));

	     return;				/* don't bother to dump the actual record */

	end dump_signon_data;
%page;
/* Dump the minor state stack */

dump_minor_state_stack:
	procedure ();

dcl  next_msse_ptr pointer;

	     do msse_ptr = pointer (ttybp, rel (hmd.minor_state_stack))
		         repeat (next_msse_ptr) while (msse_ptr ^= null ());
		call dump_msse ();
		if (msse.previous = null ()) then
		     next_msse_ptr = null ();
		else next_msse_ptr = pointer (ttybp, rel (msse.previous));
	     end;

	     return;



/* Dump a single entry on the minor state stack */

dump_msse:     procedure ();

dcl  idx fixed binary;

		call ioa_ ("^/MSSE at ^o; ^[previous = ^p^;last entry^s^]; minor_state = ^[send-signon^;wait-signon-response^;normal^;send-sync^;loopback^;reprocess^;send-bad-bcb^;hangup^]",
			 binary (rel (msse_ptr), 18, 0), (msse.previous ^= null ()), msse.previous, msse.minor_state);

		do idx = 1 to hmd.n_subchannels;
		     if msse.subchannels(idx).loopback.first_bufferp ^= null () then do;
			call ioa_ ("^3xSubchannel ^d; loopback.n_records = ^d; loopback.first_bufferp = ^p; loopback.last_bufferp = ^d",
				 idx, msse.subchannels(idx).loopback.n_records,
				 msse.subchannels(idx).loopback.first_bufferp,
				 msse.subchannels(idx).loopback.last_bufferp);
			call tty_dump$print_chain (ttybp, "Saved loopback records",
					       binary (rel (msse.subchannels(idx).loopback.first_bufferp),
						     18, 0),
					       brief_sw);
			if analyze_entry then
			     call trace_buffer_chain (binary (rel (msse.subchannels(idx).loopback.first_bufferp),
						        18, 0));
		     end;
		end;

		if analyze_entry then
		     call check_used (msse_ptr, currentsize (msse));

		return;

	     end dump_msse;

	end dump_minor_state_stack;
%page;
/* Dump the loopback block chain stack */

dump_loopback_block_chain_stack:
	procedure ();

dcl  next_lbcse_ptr pointer;

	     do lbcse_ptr = pointer (ttybp, rel (hmd.loopback_block_chain_stack))
			repeat (next_lbcse_ptr) while (lbcse_ptr ^= null ());
		call dump_lbcse ();
		if (lbcse.previous = null ()) then
		     next_lbcse_ptr = null ();
		else next_lbcse_ptr = pointer (ttybp, rel (lbcse.previous));
	     end;

	     return;



/* Dump a single entry on the stack */

dump_lbcse:    procedure ();

		call ioa_ ("^/LBCSE at ^o; ^[previous = ^p^;last entry^s^]; first_bufferp = ^p; last_bufferp = ^p",
			 binary (rel (lbcse_ptr), 18, 0), (lbcse.previous ^= null ()), lbcse.previous,
			 lbcse.loopback.first_bufferp, lbcse.loopback.last_bufferp);

		if lbcse.loopback.first_bufferp ^= null () then do;
		     call tty_dump$print_chain (ttybp, "Saved loopback block chain",
					  binary (rel (lbcse.loopback.first_bufferp), 18, 0), brief_sw);
		     if analyze_entry then
			call trace_buffer_chain (binary (rel (lbcse.loopback.first_bufferp), 18, 0));
		end;

		if analyze_entry then
		     call check_used (lbcse_ptr, currentsize (lbcse));

		return;

	     end dump_lbcse;

	end dump_loopback_block_chain_stack;
%page;
/* Trace a chain and buffers and account for the space used */

trace_buffer_chain:
	procedure (P_chain_offset);

dcl  P_chain_offset fixed binary (18) parameter;

dcl  offset fixed binary (18);

	     offset = P_chain_offset;

	     do while (offset ^= 0);
		if (offset < binary (tty_buf.borig, 18, 0)) then
		     return;			/* invalid buffer chain */
		blockp = pointer (ttybp, offset);
		offset = buffer.next;		/* following call smashes buffer's contents */
		call check_used (blockp, (16 * (binary (buffer.size_code) + 1)));
	     end;

	     return;

	end trace_buffer_chain;
%page;
%include hasp_mpx_data;
%page;
%include hasp_load_data;
%page;
%include hasp_mpx_meters;
%page;
%include hasp_subchannel_meters;
%page;
%include mcs_interrupt_info;
%page;
%include tty_buf;
%page;
%include lct;
%page;
%include tty_buffer_block;

     end hasp_dump_;
