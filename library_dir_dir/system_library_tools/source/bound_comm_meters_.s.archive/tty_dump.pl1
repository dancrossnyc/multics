/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4,delnl,insnl,^ifthendo */

/* To dump info about a communications channel */

/* Modified: December 1984 by Robert Coren to report line_status_disabled flag */
/* Modified: October 1984 by Greg Texada to use new calling sequence to copy_erf_seg_			*/
/* Modified: 7 Sept 1984 by C Spitzer. correct format for call to dump_segment_ */
/* Modified: 16 August 1983 by Robert Coren to print a message if the channel is not up, and
   not to fault if the database pointer is 0. */
/* Modified: 5 January 1982 by G. Palter to allow the channel name to be a starname */
/* Modified: 29 December 1981 by G. Palter to use dump_segment_, accept format control arguments (-ascii, -ebcdic9), and
   add an entrypoint for tty_analyze to set static needed to allow multiplexer analyzers call print_chain */
/* Modified: November 1981 by E. N. Kittlitz for user_table_entry conversion */
/* Modified: 12 November 1980 by G. Palter to support can_type */
/* Modified January 1980 by C. Hornig for MCM tracing */
/* modified 10/20/78 by Robert Coren to work on dumps as well as live systems */
/* largely rewritten 10/16/78 by Robert S. Coren for new formats associated with demultiplexing */
/* modified 3/10/78 by Robert S. Coren for variable-size buffers */
/* modified 5/3/77 by J. Stern to introduce WTCBs and TCBs */

/****^  HISTORY COMMENTS:
  1) change(86-04-23,Coren), approve(86-04-23,MCR7300),
     audit(86-05-19,Beattie), install(86-07-08,MR12.0-1089):
     To know about 256-bit echo break tables.
  2) change(87-04-26,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-24,Hartogs), install(87-08-04,MR12.1-1055):
     Upgraded for change to answer_table.incl.pl1 and user_table_entry.incl.pl1
  3) change(87-07-24,GDixon), approve(87-07-24,MCR7741),
     audit(87-07-24,Hartogs), install(87-08-04,MR12.1-1055):
      A) Correct several stringsize conditions.
  4) change(88-06-24,Parisek), approve(88-06-24,MCR7928),
     audit(88-07-08,Beattie), install(88-07-19,MR12.2-1061):
     Added support of the UNCP multiplexer.  UNCP_MPX treated like MCS_MPX.
                                                   END HISTORY COMMENTS */

%page;
tty_dump:
td:
     procedure options (separate_static, variable);

dcl  name char (32);
dcl  (i, tablex, idx, devx, childs_devx, subchan) fixed bin;
dcl  code fixed bin (35);
dcl  last_erf char (32) int static init ("-1");
dcl  have_segs bit aligned static init ("0"b);
dcl  temp_segs (3) pointer static init ((3) null ());
dcl  ttyb_len fixed bin (19) unsigned int static init (0);
dcl  n_args fixed bin;
dcl  iarg fixed bin;
dcl  argp ptr;
dcl  argl fixed bin;
dcl  arg char (argl) based (argp);
dcl  erfno char (32);
dcl  areap ptr;
dcl  found bit (1);
dcl  (brief_sw, all_sw, subchan_sw, saved_subchan_sw, lcte_sw) bit (1);
dcl  person char (24);
dcl  project char (12);
dcl  group_id char (32);
dcl  short_message char (8) aligned;
dcl  long_message char (100) aligned;
dcl  print_entry entry (ptr, ptr, ptr, fixed bin, bit (1)) variable;
dcl  system_area area based (get_system_free_area_ ());

dcl  1 ds_format aligned internal static,		/* dump_segment_ control word */
       2 (address, offset, short, bcd, ascii, long, ebcdic9, ebcdic8, four_bit, hex8, hex9) bit (1) unaligned;

dcl  1 flags (lct.max_no_lctes) aligned based (flags_ptr),
       2 printed_lcte bit (1) unaligned,
       2 printed_subchan bit (1) unaligned,
       2 printed_major bit (1) unaligned,
       2 pad bit (35) unaligned;
dcl  flags_ptr pointer;

dcl  prog_name char (8) int static options (constant) init ("tty_dump");

dcl  (
     error_table_$badopt,
     error_table_$inconsistent,
     error_table_$noarg,
     error_table_$nomatch,
     error_table_$too_many_args
     ) external fixed binary (35);

dcl  iox_$user_output pointer external;

dcl  (addr, bin, codeptr, fixed, hbound, index, lbound, length, 
      null, pointer, ptr, rel, rtrim, string, substr, unspec) builtin;

dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cv_entry_ entry (char (*), ptr, fixed bin (35)) returns (entry);
dcl  copy_erf_seg_$name entry (char (*), char (*), ptr, fixed bin (19) uns, fixed bin (35));
dcl  dump_segment_ entry (ptr, ptr, fixed bin, fixed bin (18), fixed bin (18), bit (*));
dcl  get_system_free_area_ entry () returns (pointer);
dcl  get_temp_segments_ entry (char (*), (*) ptr, fixed bin (35));
dcl  release_temp_segments_ entry (char (*), (*) ptr, fixed bin (35));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin, fixed bin, ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (pointer, fixed binary (35));
dcl  (
     com_err_,
     com_err_$suppress_name,
     ioa_
     ) entry () options (variable);
dcl  get_userid_ entry (bit (36) aligned, char (*), char (*), fixed bin, fixed bin, fixed bin (35));
dcl  check_star_name_$entry entry (char (*), fixed bin (35));
dcl  match_star_name_ entry (char (*), char (*), fixed bin (35));
dcl  convert_status_code_ entry (fixed bin (35), char (8) aligned, char (100) aligned);

dcl  cleanup condition;

/**/

	call cu_$arg_count (n_args, code);
	if code ^= 0
	then do;					/* doesn't work as an active function */
	     call com_err_ (code, prog_name);
	     return;
	end;

	if n_args < 1
	then do;					/* should be at least 1 arg */
	     call com_err_$suppress_name (0, prog_name, "Usage:  ^a channel_name {-control_args}", prog_name);
	     return;
	end;

	brief_sw, all_sw, subchan_sw, lcte_sw = "0"b;
	string (ds_format) = ""b;			/* default is -octal */
	erfno = "-1";
	name, group_id = "";			/* so we can tell after if arguments were supplied */
	do iarg = 1 to n_args;
	     call cu_$arg_ptr (iarg, argp, argl, code);
	     if code ^= 0
	     then do;
CANT_GET_ARGUMENT:
		call com_err_ (code, prog_name, "Fetching argument #^d", iarg);
		return;
	     end;

	     if arg = "-dump" | arg = "-erf"
	     then do;				/* wants to look at a dump */
		if erfno ^= "-1"
		then do;				/* but already said so */
		     call com_err_ (error_table_$too_many_args, prog_name,
			"More than one ERF number given. ^a and ^a", erfno, arg);
		     return;
		end;
		iarg = iarg + 1;			/* next arg should be ERF number */
		if iarg > n_args
		then do;
		     call com_err_ (error_table_$noarg, prog_name, "ERF number after ""^a"".", arg);
		     return;
		end;
		call cu_$arg_ptr (iarg, argp, argl, code);
		if code ^= 0
		then go to CANT_GET_ARGUMENT;
		erfno = arg;

	     end;

	     else if arg = "-user"
	     then do;
		if group_id ^= ""
		then do;
		     call com_err_ (error_table_$too_many_args, prog_name,
			"More than one use of ""-user"". ""^a"" and ""^a""", group_id, arg);
		     return;
		end;
		iarg = iarg + 1;
		if iarg > n_args
		then do;
		     call com_err_ (error_table_$noarg, prog_name, "User name after ""^a"".", arg);
		     return;
		end;
		call cu_$arg_ptr (iarg, argp, argl, code);
		if code ^= 0
		then go to CANT_GET_ARGUMENT;
		group_id = arg;
		if index (group_id, ".") = 0
		then group_id = rtrim (group_id) || ".*";
		call check_star_name_$entry (group_id, code);
		if (code ^= 0) & (code ^= 1) & (code ^= 2)
		then do;				/* invalid starname */
		     call com_err_ (code, prog_name, "^a", arg);
		     return;
		end;
	     end;

	     else if arg = "-bf" | arg = "-brief"
	     then brief_sw = "1"b;

	     else if arg = "-long" | arg = "-lg"
	     then brief_sw = "0"b;

	     else if arg = "-all" | arg = "-a"
	     then all_sw = "1"b;

	     else if arg = "-subchan" | arg = "-sbc" | arg = "-sc"
	     then subchan_sw = "1"b;

	     else if arg = "-lcte"
	     then lcte_sw = "1"b;

	     else if arg = "-character" | arg = "-ch" | arg = "-ascii"
	     then do;
		ds_format.ascii = "1"b;		/* implies -long */
		brief_sw, ds_format.ebcdic8, ds_format.ebcdic9 = "0"b;
	     end;

	     else if arg = "-ebcdic8"
	     then do;
		ds_format.ebcdic8 = "1"b;
		brief_sw, ds_format.ascii, ds_format.ebcdic9 = "0"b;
	     end;

	     else if arg = "-ebcdic9"
	     then do;
		ds_format.ebcdic9 = "1"b;
		brief_sw, ds_format.ascii, ds_format.ebcdic8 = "0"b;
	     end;

	     else if arg = "-octal"			/* implies -long */
	     then brief_sw, ds_format.hex8, ds_format.hex9 = "0"b;

	     else if arg = "-hex8"
	     then do;
		ds_format.hex8 = "1"b;
		brief_sw, ds_format.hex9 = "0"b;
	     end;

	     else if arg = "-hex9"
	     then do;
		ds_format.hex9 = "1"b;
		brief_sw, ds_format.hex8 = "0"b;
	     end;

	     else if index (arg, "-") = 1
	     then do;
		call com_err_ (error_table_$badopt, prog_name, "^a", arg);
		return;
	     end;

	     else if name ^= ""			/* already specified name */
	     then do;
		call com_err_ (error_table_$too_many_args, prog_name,
		     "More than one channel name given. ""^a"" and ""^a""", name, arg);
		return;
	     end;

	     else do;				/* not control argument, must be channel name */
		name = arg;
		call check_star_name_$entry (name, code);
		if (code ^= 0) & (code ^= 1) & (code ^= 2)
		then do;				/* illegal starname */
		     call com_err_ (code, prog_name, "^a", arg);
		     return;
		end;
	     end;
	end;

	if (group_id = "") & (name = "")
	then do;					/* never specified channel name at all */
	     call com_err_ (error_table_$noarg, prog_name, "No channel name suppplied.");
	     return;
	end;

	if group_id ^= ""
	then do;
	     if name ^= ""
	     then do;
		call com_err_ (error_table_$inconsistent, prog_name, "Channel name (""^a"") and ""-user ^a"".", name,
		     group_id);
		return;
	     end;
	     if erfno ^= "-1"
	     then do;
		call com_err_ (error_table_$inconsistent, prog_name, """-user"" and ""-erf""");
		return;
	     end;
	end;

	if ds_format.ascii | ds_format.ebcdic8 | ds_format.ebcdic9
	then ds_format.long = "0"b;			/* if interpreting only four words per line */
	else ds_format.long = "1"b;			/* otherwise, eight will fit */

	flags_ptr, ansp, cdtp = null ();		/* for cleanup handler */

	on condition (cleanup)
	     begin;
	     if flags_ptr ^= null ()
	     then free flags in (system_area);
	     if ansp ^= null ()
	     then call hcs_$terminate_noname (ansp, (0));
	     if cdtp ^= null ()
	     then call hcs_$terminate_noname (cdtp, (0));
	end;

	if ^have_segs
	then do;					/* get some temp segs */
	     call get_temp_segments_ (prog_name, temp_segs, code);
	     if code ^= 0
	     then do;
		call com_err_ (code, prog_name, "Getting temporary segments.");
		return;
	     end;
	     have_segs = "1"b;
	end;
	ttybp = temp_segs (1);
	areap = temp_segs (2);
	infop = temp_segs (3);

	if erfno = "-1" | last_erf ^= erfno
	then do;					/* copy data if necessary */
	     call copy_erf_seg_$name (erfno, "tty_area", areap, (0), code);
	     if code ^= 0
	     then goto bad_copy;
	     call copy_erf_seg_$name (erfno, "tty_buf", ttybp, ttyb_len, code);
	     if code ^= 0
	     then goto bad_copy;
	     call copy_erf_seg_$name (erfno, "dn355_data", infop, (0), code);
	     if code ^= 0
	     then do;
bad_copy:
		call com_err_ (code, prog_name, "Unable to copy information.");
		return;
	     end;
	     last_erf = erfno;
	end;

	lctp = ptr (ttybp, rel (tty_buf.lct_ptr));
	lcntp = ptr (areap, rel (lct.lcnt_ptr));

	allocate flags in (system_area) set (flags_ptr);
	unspec (flags) = ""b;


/* Search the logical channel name table for matching channels */

	if name ^= ""
	then do;
	     found = "0"b;
	     do tablex = 1 to lct.max_no_lctes;
		call match_star_name_ (lcnt.names (tablex), name, code);
		if code = 0
		then if lct.lcte_array (tablex).entry_in_use
		     then do;
			found = "1"b;
			devx = tablex;
			saved_subchan_sw = subchan_sw;
			call print_info;
			subchan_sw = saved_subchan_sw;
		     end;
	     end;
	     if ^found
	     then call com_err_ (error_table_$nomatch, prog_name, "^a in the LCT", name);
	end;

	if group_id ^= ""
	then do;
	     call hcs_$initiate (">system_control_dir", "cdt", "", 0, 0, cdtp, code);
	     if cdtp = null ()
	     then do;
		call com_err_ (code, prog_name, "Unable to initiate CDT.");
		goto RETURN_FROM_TTY_DUMP;
	     end;
	     call hcs_$initiate (">system_control_dir", "answer_table", "", 0, 0, ansp, code);
	     if ansp = null ()
	     then do;
		call com_err_ (code, prog_name, "Unable to initiate answer table..");
		goto RETURN_FROM_TTY_DUMP;
	     end;

	     do tablex = 1 to cdt.current_size;
		cdtep = addr (cdt.cdt_entry (tablex));
		if cdte.state = TTY_DIALED
		then do;
		     if cdte.process ^= null ()
		     then do;
			utep = pointer (ansp, rel (cdte.process));
			person = ute.person;
			project = ute.project;
		     end;
		     else do;
			call get_userid_ (cdte.dialed_to_procid, person, project, 0, 0, code);
			if code ^= 0
			then person, project = "";
		     end;
		     call match_star_name_ (rtrim (person) || "." || rtrim (project), group_id, code);
		     if code = 0
		     then do;
			devx = cdte.twx;
			saved_subchan_sw = subchan_sw;
			call print_info;
			subchan_sw = saved_subchan_sw;
		     end;
		end;
	     end;
	end;

RETURN_FROM_TTY_DUMP:
	if flags_ptr ^= null ()
	then free flags in (system_area);

	if ansp ^= null ()
	then call hcs_$terminate_noname (ansp, (0));

	if cdtp ^= null ()
	then call hcs_$terminate_noname (cdtp, (0));

	if erfno = "-1"
	then do;					/* nothing useful in them now */
	     have_segs = "0"b;
	     call release_temp_segments_ (prog_name, temp_segs, code);
	end;

	return;

/**/

/* Print all information for a channel */

print_info:
     procedure ();

	lctep = addr (lct.lcte_array (devx));
	subchan = -1;				/* if starting chan is multiplexed, print all subchans */

	do while (devx ^= 0);
	     if ^subchan_sw
	     then do;
		if lcte_sw
		then call print_lcte;
		call find_entry_type;
	     end;
	     childs_devx = devx;
	     subchan = lcte.subchannel;
	     devx = lcte.major_channel_devx;		/* go up one level */
	     if devx ^= 0
	     then lctep = addr (lct.lcte_array (devx));	/* get new LCTE pointer */
	     if ^all_sw & ^subchan_sw
	     then devx = 0;
	     subchan_sw = "0"b;
	end;

	return;

     end print_info;

/**/

/* Finds the appropriate procedure to print data about a channel and invokes it */

find_entry_type:
     procedure ();

dcl  print_entry_name char (32);			/* name of the procedure that prints contents of a data base */

	if lcte.channel_type < lbound (mpx_types, 1) | lcte.channel_type > hbound (mpx_types, 1)
	then do;
	     call com_err_ (0, prog_name, "Invalid channel type for channel ^a (devx = ^d).  ^d", lcnt.names (devx),
		devx, lcte.channel_type);
	     go to RETURN_FROM_TTY_DUMP;
	end;

	if (subchan = -1) & flags (devx).printed_major	/* do not make the same call more than once */
	then return;
	if (subchan ^= -1)
	then if flags (childs_devx).printed_subchan
	     then return;

	if lcte.data_base_ptr = null | rel (lcte.data_base_ptr) = "0"b
	then do;
	     call ioa_ ("No data base for ^a .", lcnt.names (devx));
	     return;
	end;

	if lcte.channel_type = 0
	then call print_wtcb;

	else if lcte.channel_type = MCS_MPX | lcte.channel_type = UNCP_MPX
	then call print_pcb;

	else do;
	     print_entry_name = rtrim (mpx_types (lcte.channel_type)) || "_dump_";
	     print_entry = cv_entry_ (print_entry_name, codeptr (tty_dump), code);
	     if code ^= 0
	     then call com_err_ (code, prog_name, "Cannot get pointer to ^a", print_entry_name);
	     else call print_entry (ttybp, areap, ptr (ttybp, rel (lcte.data_base_ptr)), subchan, brief_sw);
	end;

	if subchan = -1
	then flags (devx).printed_major = "1"b;
	else flags (childs_devx).printed_subchan = "1"b;

	return;

     end find_entry_type;

/**/

/* Prints contents of an LCTE */

print_lcte:
     procedure ();

	if flags (devx).printed_lcte			/* only once per call, please */
	then return;

	call ioa_ ("^/LCTE at ^o, channel ^a, devx ^o", bin (rel (lctep)), lcnt.names (devx), devx);
	call ioa_ (
	     "channel type: ^a (^d)^/flags: ^[in_use ^]^[initialized ^]^[notify_reqd ^]^[locked_for_interrupt ^]^[space_needed ^]^[special_lock ^]^/physical channel devx ^o, major channel devx ^o, subchannel ^o"
	     , mpx_types (lcte.channel_type), lcte.channel_type, lcte.entry_in_use, lcte.initialized, lcte.notify_reqd,
	     lcte.locked_for_interrupt, lcte.space_needed, lcte.special_lock, lcte.physical_channel_devx,
	     lcte.major_channel_devx, lcte.subchannel);

	call ioa_ ("^[queue_head ^o, queue_tail ^o^/^;^2s^]input_words ^d, output_words ^d", lcte.queue_head ^= ""b,
	     bin (lcte.queue_head), bin (lcte.queue_tail), lcte.input_words, lcte.output_words);

	if lcte.data_base_ptr = null
	then call ioa_ ("No data base allocated.");
	else call ioa_ ("data base at ^o", bin (rel (lcte.data_base_ptr)));

	flags (devx).printed_lcte = "1"b;

	return;

     end print_lcte;

/**/

/* Displays the contents of the WTCB */

print_wtcb:
     procedure ();

dcl  two_words (2) fixed bin (35) based;
dcl  break_table_words (WORDS_IN_ECHO_BREAK_TABLE) bit (36) aligned based;
dcl  mode char (256);
dcl  flag_array char (128) varying;
dcl  mode_bits bit (36) aligned;
dcl  tablep ptr;
dcl  1 table_arrays aligned based (tablep),
       2 table (6) fixed bin (17) unal,
       2 default_table (6) fixed bin (17) unal;

dcl  table_names (6) char (18) int static options (constant)
	init ("input_translation", "output_translation", "input_conversion", "output_conversion", "special", "delay");

	wtcbp = ptr (ttybp, rel (lcte.data_base_ptr));

	call ioa_ ("^/WTCB at ^o, channel ^a, devx ^o^/line type = ^a, baud rate = ^d", bin (rel (wtcbp)),
	     lcnt.names (devx), devx, line_types (wtcb.line_type), wtcb.baud_rate);

	flag_array = "";				/* init flag string */

	if wtcb.flags.listen
	then flag_array = flag_array || "listen,";
	if wtcb.flags.dialed
	then flag_array = flag_array || "dialed,";
	if wtcb.flags.send_output
	then flag_array = flag_array || "send_output,";
	if wtcb.flags.qenable
	then flag_array = flag_array || "qenable,";
	if wtcb.flags.qflag
	then flag_array = flag_array || "qflag,";
	if wtcb.flags.end_frame
	then flag_array = flag_array || "end_frame,";
	if wtcb.flags.notify_reqd
	then flag_array = flag_array || "notify_reqd,";
	if wtcb.flags.work_reqd
	then flag_array = flag_array || "work_reqd,";
	if wtcb.flags.dialing
	then flag_array = flag_array || "dialing,";
	if wtcb.flags.dial_status_valid
	then flag_array = flag_array || "dial_status,";
	if wtcb.flags.line_status_present
	then flag_array = flag_array || "line_status,";
	if wtcb.flags.input_available
	then flag_array = flag_array || "input_available,";
	if wtcb.flags.tcb_initialized
	then flag_array = flag_array || "tcb_initialized,";
	if wtcb.flags.hndlquit
	then flag_array = flag_array || "hndlquit,";
	if wtcb.flags.count_lines
	then flag_array = flag_array || "count_lines,";
	if wtcb.flags.sync_line
	then flag_array = flag_array || "sync_line,";
	if wtcb.flags.breakall
	then flag_array = flag_array || "breakall,";
	if wtcb.flags.negotiating_echo
	then flag_array = flag_array || "negotiating_echo,";
	if wtcb.flags.wake_tbl
	then flag_array = flag_array || "wake_tbl,";
	if wtcb.flags.allow_wakeup
	then flag_array = flag_array || "allow_wakeup,";
	if wtcb.flags.receive_mode_device
	then flag_array = flag_array || "receive_mode_device,";
	if wtcb.flags.mark_set
	then flag_array = flag_array || "mark_set,";
	if wtcb.flags.masked
	then flag_array = flag_array || "masked,";

	if length (flag_array) ^= 0
	then substr (flag_array, length (flag_array), 1) = " ";
						/* zap last comma */

	call ioa_ ("flags:  ^a", flag_array);

	call ioa_ ("more_flags: ^[line_status_disabled^;^]", wtcb.line_status_disabled);

	if wtcb.uproc ^= ""b
	then do;
	     call get_userid_ ((wtcb.uproc), person, project, 0, 0, code);
	     if code = 0
	     then call ioa_ ("User name = ^a.^a", person, project);
	end;

	call ioa_ ("hevent = ^w ^w, event = ^w ^w", addr (wtcb.hevent) -> two_words, addr (wtcb.event) -> two_words);

	if wtcb.wflag
	then call ioa_ ("process blocked on output");
	if wtcb.rflag
	then call ioa_ ("process blocked on input");
	if wtcb.wru
	then call ioa_ ("reading answerback");

	call ioa_ (
	     "^[dial_status_code = ^o^/^;^s^]fblock = ^o, lblock = ^o, fchar = ^o^/at line ^d, column ^d, white_col = ^d^/^d read-ahead messages^/write_first = ^o, write_last = ^o^/maximum buffer size = ^d, buffer pad = ^d"
	     , wtcb.dial_status_valid, wtcb.dial_status_code, wtcb.fblock, wtcb.lblock, wtcb.fchar, wtcb.actline,
	     wtcb.actcol, wtcb.white_col, wtcb.nramsgs, wtcb.write_first, wtcb.write_last, wtcb.max_buf_size,
	     wtcb.buffer_pad);

	if wtcb.error_code ^= 0
	then do;
	     call convert_status_code_ (wtcb.error_code, short_message, long_message);
	     call ioa_ ("error code = ^w (^a)", wtcb.error_code, long_message);
	end;

	call ioa_ ("^[echo negotiation data at ^o^/^;^s^]^[wakeup table at ^o^/^;^s^]^[prompt string: ^va^;^]",
	     (wtcb.echdp ^= "0"b), wtcb.echdp, (wtcb.waketp ^= "0"b), wtcb.waketp, (wtcb.prompt_len > 0),
	     wtcb.prompt_len, substr (wtcb.prompt, 1, wtcb.prompt_len));

	call ioa_ ("line delimiter = ""^a""", wtcb.line_delimiter);

	if wtcb.devx ^= devx
	then call ioa_ ("wtcb.devx = ^o (differs from index in LCT)", wtcb.devx);

	if ^wtcb.flags.tcb_initialized		/* if a control block */
	then return;

	tcbp = ptr (areap, rel (wtcb.tcb_ptr));
	call ioa_ ("^/TCB at ^o", bin (rel (tcbp)));

	call ioa_ ("terminal type = ^a, old type = ^d", tcb.terminal_type, tcb.old_type);

	mode = "";				/* init mode string */
	idx = 1;

	mode_bits = string (tcb.modes);
	do i = 1 to n_modes;			/* get all the mode bits */
	     if substr (mode_bits, i, 1)
	     then do;
		substr (mode, idx) = modestr (i);
		idx = index (mode, " ") + 1;		/* replace first blank with comma */
		substr (mode, idx - 1, 1) = ",";
	     end;
	end;

	if (tcb.can_type < lbound (CAN_TYPE_NAMES, 1)) | (tcb.can_type > hbound (CAN_TYPE_NAMES, 1))
	then substr (mode, idx) = "can_type=unknown";
	else substr (mode, idx) = CAN_TYPE_NAMES (tcb.can_type);

	call ioa_ ("modes:  ^a", mode);

	call ioa_ (
	     "flags: ^[breakall_enabled ^;^]^[dont_count_next ^;^]^[keyboard_locking ^;^]^[no_printer_off ^;^]^[break_char_pending ^;^]^[uproc_attached ^;^]^[block_acknowledge ^;^]"
	     , tcb.breakall_enabled, tcb.dont_count_next, tcb.keyboard_locking, tcb.no_printer_off,
	     tcb.break_char_pending, tcb.uproc_attached, tcb.block_acknowledge);
	call ioa_ (
	     "shift state = ^b (^[none^;lower^;upper^;unknown^]) ll = ^d, pl = ^d^/answerback id = ^a^/erase ^a, kill ^a, frame_begin ^a, frame_end ^a^/input message size ^d characters"
	     , tcb.actshift, bin (tcb.actshift) + 1, tcb.colmax, tcb.linemax, tcb.id, tcb.erase, tcb.kill,
	     tcb.frame_begin, tcb.frame_end, tcb.input_msg_size);

	if tcb.input_suspend_seq.count > 0
	then call ioa_ ("input_suspend: ^a", substr (tcb.input_suspend_seq.chars, 1, tcb.input_suspend_seq.count));

	if tcb.input_resume_seq.count > 0
	then call ioa_ ("input_resume: ^a", substr (tcb.input_resume_seq.chars, 1, tcb.input_resume_seq.count));

	if tcb.output_suspend_etb_seq.count > 0
	then call ioa_ ("output_^[end_of_block^;suspend^]: ^a", tcb.block_acknowledge,
		substr (tcb.output_suspend_etb_seq.chars, 1, tcb.output_suspend_etb_seq.count));

	if tcb.output_resume_ack_seq.count > 0
	then call ioa_ ("output_^[acknowledge^;resume^]: ^a", tcb.block_acknowledge,
		substr (tcb.output_resume_ack_seq.chars, 1, tcb.output_resume_ack_seq.count));

	if tcb.max_output_block ^= 0
	then call ioa_ ("maximum output block size = ^d characters", tcb.max_output_block);

	tablep = addr (tcb.tables);
	do i = 1 to 6;
	     call ioa_ ("^a ^o ^[default ^o;^s^]", table_names (i), table_arrays.table (i),
		table_arrays.default_table (i));
	end;

	if wtcb.echdp ^= "000000"b3
	then do;
	     echo_datap = ptr (wtcbp, wtcb.echdp);
	     call ioa_ ("^/Echo Negotiation Data at ^o:^/", bin (rel (echo_datap)));
	     call ioa_ ("Line length left = ^d, ^d chars r0 echoed.", echo_data.horiz_room_left, echo_data.chars_echoed)
		;
	     call ioa_ ("Flags:^[ synchronized^]^[ mux_will_echnego^]^[ esps^] ^[ start_wait^]^[ stop_wait^]",
		echo_data.synchronized, echo_data.mux_will_echnego, echo_data.echo_start_pending_sndopt,
		echo_data.awaiting_start_sync, echo_data.awaiting_stop_sync);
	     call ioa_ ("Mux sync ctr = ^d dec, ^o octal.", echo_data.sync_ctr, echo_data.sync_ctr);
	     call ioa_ ("Break table^( ^w^)^/", addr (echo_data.break) -> break_table_words);
	end;
	call ptchain ("read", (wtcb.fblock));		/* print read chain */
	call ptchain ("WTCB write", (wtcb.write_first));

	return;

     end print_wtcb;

/**/

/* Displays the contents of a PCB */

print_pcb:
     procedure ();

dcl  dn355_no fixed bin;
dcl  line_no bit (12);

	dn355_no = index ("abcdefgh", substr (lcnt.names (devx), 1, 1));
	fnpp = addr (datanet_info.per_datanet (dn355_no));
	n_pcbs = fnp_info.no_of_channels;

	if subchan < 0
	then do;
	     call ioa_ ("FNP ^a: ^d subchannels.", fnp_info.fnp_tag, n_pcbs);
	end;

	else do;
	     pcbp = addr (ptr (ttybp, rel (fnp_info.pcb_array_ptr)) -> pcb_array (subchan));
	     line_no = "00"b || string (pcb.line_number);
	     call ioa_ (
		"^/PCB at ^o, channel ^a, devx ^o^/line number ^4.3b, logical subchannel ^o^/write_first ^o, write_last ^o, write_cnt ^d^/baud rate ^d, line type ^a, max_buf_size ^d"
		, bin (rel (pcbp)), lcnt.names (pcb.devx), pcb.devx, line_no, pcb.subchan, pcb.write_first,
		pcb.write_last, pcb.write_cnt, pcb.baud_rate, line_types (pcb.line_type), pcb.max_buf_size);
	     call ioa_ (
		"flags: ^[listen ^;^]^[dialed ^;^]^[send_output ^;^]^[high_speed ^;^]^[sync_line ^;^]^[end_frame ^;^]^[hndlquit ^;^]^[breakall_enabled ^;^]^[output_mbx_pending ^;^]^[copied_meters_ready ^;^]^[get_meters_waiting ^;^]^[tandd_attached ^;^]"
		, pcb.listen, pcb.dialed, pcb.send_output, pcb.high_speed, pcb.sync_line, pcb.end_frame, pcb.hndlquit,
		pcb.breakall_enabled, pcb.output_mbx_pending, pcb.copied_meters_ready, pcb.get_meters_waiting,
		pcb.tandd_attached);
	     call ptchain ("PCB write", (pcb.write_first));
	end;

	return;

     end print_pcb;

/**/

/* Prints a buffer chain optionally calling dump_segment_ to display the contents */

ptchain:
     proc (chname, chst);

dcl  or fixed bin (18),
     chst fixed bin,
     chname char (*);
dcl  bsize fixed bin (18);

	or = fixed (chst, 18);
	if or = 0					/* if no chain */
	then return;

	call ioa_ ("^a", chname);			/* print header */
	do while (or ^= 0);				/* loop through chain */
	     if or < bin (tty_buf.borig, 18) | or > ttyb_len
	     then do;
		call ioa_ ("bad block offset: ^6o", or);
		return;
	     end;

	     blockp = ptr (ttybp, or);
	     bsize = (bin (buffer.size_code, 3) + 1) * 16;
	     call ioa_ ("^6o   size = ^d, tally = ^d, flags:^[ eop^]^[ conv^]^[ break^]", or, bsize,
		bin (buffer.tally, 9), buffer.end_of_page, buffer.converted, buffer.break);
	     if ^brief_sw
	     then call dump_segment_ (iox_$user_output, blockp, 0, or, bsize, string (ds_format));
	     or = buffer.next;
	end;

	return;

     end ptchain;



/* Special entry called by multiplexer dump routines to print a buffer chain */

print_chain:
     entry (pm_ttybp, pm_chname, pm_chst, pm_brief_sw);

dcl  pm_ttybp ptr;
dcl  pm_chname char (*);
dcl  pm_chst fixed bin;
dcl  pm_brief_sw bit (1);

	ttybp = pm_ttybp;
	brief_sw = pm_brief_sw;
	call ptchain (pm_chname, pm_chst);
	return;



/* Called by tty_analyze to allow multiplexer analyzer entries to call print_chain properly */

set_static_for_analyze:
     entry (pm_tty_buf_len, pm_ds_format);

dcl  pm_tty_buf_len fixed binary (19) unsigned parameter;
dcl  1 pm_ds_format aligned parameter like ds_format;

	ttyb_len = pm_tty_buf_len;
	ds_format = pm_ds_format;
	return;

 %include answer_table;
 %include author_dcl;
 %include cdt;
 %include dialup_values;
 %include dn355_data;
 %include lct;
 %include line_types;
 %include mcs_echo_neg_sys;
 %include multiplexer_types;
 %include pcb;
 %include tcb;
 %include tty_buf;
 %include tty_buffer_block;
 %include tty_can_types;
 %include tty_mode_names;
 %include user_attributes;
 %include user_table_entry;
 %include user_table_header;
 %include wtcb;

     end tty_dump;
