/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* IBM3270_DUMP_ - Used by tty_dump for 3270 channels */
/* Written May 1979 by Larry Johnson */

ibm3270_dump_: proc (arg_ttybp, arg_ttyap, arg_mdp, arg_subchan, arg_brief_sw);

/* Arguments */

dcl  arg_ttybp ptr;
dcl  arg_ttyap ptr;
dcl  arg_mdp ptr;
dcl  arg_subchan fixed bin;
dcl  arg_brief_sw bit (1);

/* Automatic */

dcl  i fixed bin;
dcl  last_i fixed bin;
dcl  subchan fixed bin;
dcl  quit_key char (3);
dcl  formfeed_key char (5);

/* External */

dcl (ioa_, ioa_$nnl) entry options (variable);

dcl (addr, bin, null, rel, unspec) builtin;


/* Start of tty_dump code */

	ttybp = arg_ttybp;
	mdp = arg_mdp;
	subchan = arg_subchan;

	call ioa_ ("^/MPX DATA at ^o for ^a (devx ^o)", bin (rel (mdp)), md.name, md.devx);
	call ioa_ ("Boot process ^.3b, channel ^.3b", md.processid, unspec (md.event_channel));
	call ioa_ ("Controller addr ^d, poll ^.3b, select ^.3b, general poll ^.3b", md.controller_address,
	     unspec (md.controller_poll_address), unspec (md.controller_select_address),
	     unspec (md.general_poll_address));
	call ioa_ ("line type ^d, baud ^d, buf size ^d, buffer pad ^d", md.line_type, md.baud_rate,
	     md.max_buf_size, md.buffer_pad);
	if md.quit_key = md.pa1 then quit_key = "pa1";
	else if md.quit_key = md.pa2 then quit_key = "pa2";
	else if md.quit_key = md.pa3 then quit_key = "pa3";
	else quit_key = "?";
	if md.formfeed_key = md.pa1 then formfeed_key = "pa1";
	else if md.formfeed_key = md.pa2 then formfeed_key = "pa2";
	else if md.formfeed_key = md.pa3 then formfeed_key = "pa3";
	else if md.formfeed_key = md.clear then formfeed_key = "clear";
	else formfeed_key = "?";
	call ioa_ ("quit key is ""^a"", formfeed key is ""^a"".", quit_key, formfeed_key);
	call ioa_ (" ADDR   SUBCHAN");
	do i = 0 to 31;
	     if md.chan_map (i) = -1 then call ioa_ ("^4d^-NONE   (input recieved)", i);
	     else if md.chan_map (i) > 0 then call ioa_ ("^4d^-^d", i, md.chan_map (i));
	end;
	call ioa_ ("Last poll ^.3b, last select ^.3b", unspec (md.last_poll_address), unspec (md.last_select_address));
	call ioa_$nnl ("Current write channel: ^d", md.cur_write_chan);
	if md.write_chain_ptr = null () then call ioa_ ("");
	else call ioa_ (" write chain at ^o", bin (rel (md.write_chain_ptr)));
	if md.input_chain_ptr ^= null () then
	     call ioa_ ("input chain at ^o, length ^d", bin (rel (md.input_chain_ptr)), md.input_count);
	call ioa_ ("Flags:^[ ascii^]^[ debug^]^[ loading^]^[ loaded^]^[ started^]^[ poll_in_progress^]^[ output_in_progress^]^[ message_in_progress^]^[ eot_sent^]^[ send_output^]^[ allow_raw3270^]^[ allow_copy^]",
	     md.ascii, md.debug, md.loading, md.loaded, md.started, md.poll_in_progress, md.output_in_progress,
	     md.message_in_progress, md.eot_sent, md.send_output, md.allow_raw3270, md.allow_copy);

	if md.first_write_chan = 0 then last_i = 0;
	else do;
	     call ioa_$nnl ("Write queue:");
	     do i = md.first_write_chan repeat (mde.next_write_chan) while (i ^= 0);
		mdep = addr (md.mde_entry (i));
		call ioa_$nnl (" ^d", i);
		last_i = i;
	     end;
	     call ioa_ ("");
	end;
	if last_i ^= md.last_write_chan then
	     call ioa_ ("Last write chan invalid: is ^d, should be ^d", md.last_write_chan, last_i);

	if md.first_poll_chan = 0 then last_i = 0;
	else do;
	     call ioa_$nnl ("Poll queue:");
	     do i = md.first_poll_chan repeat (mde.next_poll_chan) while (i ^= 0);
		mdep = addr (md.mde_entry (i));
		call ioa_$nnl (" ^d", i);
		last_i = i;
	     end;
	     call ioa_ ("");
	end;
	if last_i ^= md.last_poll_chan then
	     call ioa_ ("Last poll chan invalid: is ^d, should be ^d", md.last_poll_chan, last_i);

	if md.first_control_chan = 0 then last_i = 0;
	else do;
	     call ioa_$nnl ("Control queue:");
	     do i = md.first_control_chan repeat (mde.next_control_chan) while (i ^= 0);
		mdep = addr (md.mde_entry (i));
		call ioa_$nnl (" ^d", i);
		last_i = i;
	     end;
	     call ioa_ ("");
	end;
	if last_i ^= md.last_control_chan then
	     call ioa_ ("Last control chan invalid: is ^d, should be ^d", md.last_control_chan, last_i);

	if unspec (md.error_stat) ^= "0"b then do;
	     call ioa_ ("Error statistics:");
	     if md.poll_failed ^= 0 then call ioa_ (" poll failures: ^d", md.poll_failed);
	     if md.bad_output ^= 0 then call ioa_ (" bad output: ^d", md.bad_output);
	     if md.write_eot ^= 0 then call ioa_ (" write eot: ^d", md.write_eot);
	     if md.write_abort ^= 0 then call ioa_ (" write abort: ^d", md.write_abort);
	     if md.select_failed ^= 0 then call ioa_ (" select failures: ^d", md.select_failed);
	     if md.wack_select ^= 0 then call ioa_ (" wack select: ^d", md.wack_select);
	     if md.nak_output ^= 0 then call ioa_ (" nak output: ^d", md.nak_output);
	     if md.input_reject ^= 0 then call ioa_ (" input reject: ^d", md.input_reject);
	     if md.needs_space ^= 0 then call ioa_ (" space needed: ^d", md.needs_space);
	     if md.space_available ^= 0 then call ioa_ (" space available: ^d", md.space_available);
	     if md.write_format_error ^= 0 then call ioa_ (" write format errors: ^d", md.write_format_error);
	end;

	if subchan = -1 then do subchan = 1 to md.nchan;
	     call print_mde;
	end;
	else call print_mde;
	call ioa_ ("");
	return;

print_mde:
	proc;

	     mdep = addr (md.mde_entry (subchan));
	     call ioa_ ("^/Subchan ^a.^a (devx ^o) address ^.3b", md.name, mde.name, mde.devx, unspec (mde.device_address));
	     call ioa_ ("screen size ^d, line size ^d, position ^d", mde.screen_size, mde.line_size, mde.position);
	     if mde.write_chain_ptr ^= null () then call ioa_ ("write chain at ^o", bin (rel (mde.write_chain_ptr)));
	     call ioa_ ("Flags:^[ listen^]^[ dialed^]^[ printer^]^[ hndlquit^]^[ waiting_for_ready^]^[ erase_req^]^[ sound_alarm^]^[ control_queued^]^[ end_of_page^]^[ keyboard_restore^]^[ rawo^]^[ rawi^]^[ raw3270^]^[ raw3270_in_effect^]^[ write_queued^]",
		mde.listen, mde.dialed, mde.printer, mde.hndlquit, mde.waiting_for_ready, mde.erase_req, mde.sound_alarm, mde.control_queued, mde.end_of_page, mde.keyboard_restore, mde.rawo, mde.rawi, mde.raw3270, mde.raw3270_in_effect, mde.write_queued);
	     return;

	end print_mde;

%include tty_buf;

%include ibm3270_mpx_data;
%include ibm3270_meters;
     end ibm3270_dump_;
