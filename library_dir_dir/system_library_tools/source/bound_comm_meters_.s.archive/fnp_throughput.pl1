/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4,delnl,insnl,^ifthendo */
fnp_throughput:
     procedure;

/* Command to report throughput statistics for one FNP or all FNPs */
/* Usage: fnp_throughput {fnp_name | * {-report_reset}} | {-reset} */

/* written September 1981 by Robert Coren */

/* AUTOMATIC */

dcl  nargs fixed bin;
dcl  code fixed bin (35);
dcl  chan_name char (1);
dcl  report bit (1);
dcl  reset bit (1);
dcl  iarg fixed bin;
dcl  fnp_no fixed bin;
dcl  reported bit (1);
dcl  time_now fixed bin (71);
dcl  areap ptr;
dcl  star_name (1) char (1);
dcl  n_channels fixed bin;
dcl  orig_chan_meterp ptr;
dcl  chanx fixed bin;
dcl  time_from fixed bin (71);
dcl  time_interval fixed bin (71);
dcl  cur_input_chars fixed bin (35);
dcl  cur_output_chars fixed bin (35);

dcl  1 fnp_stats aligned,
       2 input_chars fixed bin (35),
       2 output_chars fixed bin (35);

dcl  argp ptr;
dcl  argl fixed bin (21);
dcl  arg char (argl) based (argp);


/* ENTRIES */

dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  com_err_ entry () options (variable);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  parse_fnp_name_ entry (char (*), fixed bin);
dcl  get_system_free_area_ entry () returns (ptr);
dcl  comm_meters_ entry ((*) char (*), fixed bin, ptr, fixed bin, ptr, fixed bin (35));
dcl  comm_meters_$free entry (ptr, ptr, fixed bin (35));
dcl  system_info_$timeup entry (fixed bin (71));
dcl  ioa_ entry () options (variable);
dcl  meter_format_$picture entry (fixed bin (35), fixed bin) returns (char (15) var);
dcl  meter_format_$time entry (fixed bin (71)) returns (char (10));


/* EXTERNAL STATIC */

dcl  (
     error_table_$wrong_no_of_args,
     error_table_$badopt,
     error_table_$noarg,
     error_table_$inconsistent,
     error_table_$no_channel_meters
     ) fixed bin (35) external static;


/* INTERNAL STATIC */

dcl  CMD_NAME char (14) internal static options (constant) init ("fnp_throughput");

dcl  first_time bit (1) internal static init ("1"b);
dcl  earliest_time fixed bin (71) internal static;

dcl  1 prev_fnp_stats (8) aligned internal static like fnp_stats;


/* BUILTIN FUNCTIONS */

dcl  (substr, clock, max, divide) builtin;

	call cu_$arg_count (nargs, code);
	if code ^= 0
	then do;
	     call com_err_ (code, CMD_NAME);
	     return;
	end;

	if nargs < 1 | nargs > 2
	then do;
	     call com_err_ (error_table_$wrong_no_of_args, CMD_NAME,
		"^/Usage: ^a channel_name {-report_reset} | {-reset}", CMD_NAME);
	     return;
	end;

	chan_name = " ";
	report = "1"b;
	reset = "0"b;
	do iarg = 1 to nargs;
	     call cu_$arg_ptr (iarg, argp, argl, code);
	     if substr (arg, 1, 1) = "-"
	     then do;
		if arg = "-reset" | arg = "-rs"
		then do;
		     report = "0"b;
		     reset = "1"b;
		end;

		else if arg = "-report_reset" | arg = "-rr"
		then report, reset = "1"b;

		else do;
		     call com_err_ (error_table_$badopt, CMD_NAME, arg);
		     return;
		end;
	     end;

	     else do;
		if chan_name ^= " "
		then do;
		     call com_err_ (0, CMD_NAME, "More than one FNP name specified.");
		     return;
		end;

		if arg = "*"
		then ;
		else do;
		     call parse_fnp_name_ (arg, fnp_no);
		     if fnp_no = -1
		     then do;
			call com_err_ (0, CMD_NAME, "^a is not a valid FNP name.", arg);
			return;
		     end;
		end;

		chan_name = arg;
	     end;
	end;

	if chan_name = " "
	then if report
	     then do;				/* didn't tell us who to get */
		call com_err_ (error_table_$noarg, CMD_NAME, "No FNP name supplied.");
		return;
	     end;
	     else ;

	else if ^report
	then do;
	     call com_err_ (error_table_$inconsistent, CMD_NAME, "Cannot specify FNP name and -reset.");
	     return;
	end;

/* Arguments all parsed, now do the real work */

	reported = "0"b;
	if first_time
	then do;
	     prev_fnp_stats (*) = 0;
	     call system_info_$timeup (earliest_time);
	     first_time = "0"b;
	end;

	time_now = clock ();
	call ioa_ ("Total metering time ^a", meter_format_$time (time_now - earliest_time));

	if reset
	then star_name (1) = "*";			/* need statistics on everyone to reset */
	else star_name (1) = chan_name;

	areap = get_system_free_area_ ();
	call comm_meters_ (star_name, CHANNEL_METERS_VERSION_1, areap, n_channels, chan_meterp, code);
	if code ^= 0				/* comm_meters_ calls sub_err_, so don't sweat it */
	then return;

	orig_chan_meterp = chan_meterp;		/* we'll need this later for freeing */
	do chanx = 1 to n_channels;
	     if channel_meters.multiplexer_type = MCS_MPX /* only ones we're interested in */
	     then do;
		call parse_fnp_name_ ((channel_meters.channel_name), fnp_no);
						/* find out which one this is */
		if fnp_no > 0			/* it would be awfully surprising if it weren't */
		then do;
		     fnp_meterp = channel_meters.mpx_specific_meterp;
		     fnp_stats.input_chars = channel_meters.cumulative.unconverted_input_chars;
		     fnp_stats.output_chars = channel_meters.cumulative.converted_output_chars;

		     if report			/* not just -reset */
		     then if chan_name = "*"		/* we want them all */
			     | chan_name = channel_meters.channel_name
						/* or anyway we want this one */
			then do;
			     if ^reported
			     then do;
				call ioa_ ("^35tinput^10xoutput");
				reported = "1"b;
			     end;

			     time_from = max (earliest_time, fnp_meters.from_fnp.time_booted);
			     time_interval = divide (time_now - time_from, 1000000, 71, 0);
			     cur_input_chars = fnp_stats.input_chars - prev_fnp_stats (fnp_no).input_chars;
			     cur_output_chars = fnp_stats.output_chars - prev_fnp_stats (fnp_no).output_chars;

			     call ioa_ ("^/FNP ^a -- up ^[for ^a^;time not available^]",
				channel_meters.channel_name, fnp_meters.from_fnp.time_booted ^= 0,
				meter_format_$time (time_now - fnp_meters.from_fnp.time_booted));
			     call ioa_ ("Characters transmitted^29t^a^44t^a",
				meter_format_$picture (cur_input_chars, 11),
				meter_format_$picture (cur_output_chars, 11));
			     call ioa_ ("Characters per second^29t^a^44t^a",
				meter_format_$picture (divide (cur_input_chars, time_interval, 35, 0), 11),
				meter_format_$picture (divide (cur_output_chars, time_interval, 35, 0), 11));
			end;

		     if reset
		     then prev_fnp_stats (fnp_no) = fnp_stats;
		end;
	     end;

	     chan_meterp = channel_meters.next_channelp;	/* on to next channel */
	end;

	call comm_meters_$free (areap, orig_chan_meterp, code);
	if code ^= 0				/* unlikely, but we should check */
	then call com_err_ (code, CMD_NAME, "From comm_meters_$free");

	if report & ^reported			/* wanted some display and didn't get it */
	then call com_err_ (error_table_$no_channel_meters, CMD_NAME, chan_name);

	if reset
	then earliest_time = time_now;

	return;

%include channel_meters;
%page;
%include fnp_meters;
%page;
%include multiplexer_types;

     end fnp_throughput;
