/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4,delnl,insnl,^ifthendo */
channel_comm_meters:
     procedure;

/* Command to print meters on one or more communications channels (specified by
   a single starname). It calls comm_meters_ to get the information, and the
   appropriate multiplexer-specific entries to display it.
*/

/* Written April 1981 by Robert Coren */
/* Modified July 1981 by Robert Coren to handle sub_error_ */

/* AUTOMATIC */

dcl  brief bit (1);
dcl  error bit (1);
dcl  summary bit (1);
dcl  since_boot bit (1);
dcl  boot_spec bit (1);
dcl  dial_spec bit (1);
dcl  chan_spec bit (1);
dcl  i fixed bin;
dcl  code fixed bin (35);
dcl  ctl_arg char (16);
dcl  nargs fixed bin;
dcl  argl fixed bin (21);
dcl  argp pointer;
dcl  chan_star_name (1) char (32);			/* comm_meters_ requires an array */
dcl  areap pointer;
dcl  n_channels fixed bin;
dcl  orig_meterp pointer;
dcl  display_flags bit (36) aligned;
dcl  beginning fixed bin (71);			/* time from which meters are measured */
dcl  seconds fixed bin (71);
dcl  all_time fixed bin (71);				/* time since beginning */
dcl  time_string char (9);
dcl  chanx fixed bin;
dcl  name char (32);
dcl  entry_var entry options (variable) variable;
dcl  total_errors fixed bin;
dcl  user_name char (22);
dcl  user_proj char (9);
dcl  input_chars fixed bin (35);
dcl  output_chars fixed bin (35);
dcl  cps fixed bin;

dcl  1 auto_summary aligned like channel_summary;


/* BASED */

dcl  arg char (argl) based (argp);


/* ENTRIES */

dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  ioa_ entry () options (variable);
dcl  com_err_ entry () options (variable);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  get_system_free_area_ entry () returns (ptr);
dcl  get_userid_ entry (bit (36) aligned, char (*), char (*), fixed bin, fixed bin, fixed bin (35));
dcl  system_info_$timeup entry (fixed bin (71));
dcl  comm_meters_ entry ((*) char (32), fixed bin, pointer, fixed bin, pointer, fixed bin (35));
dcl  comm_meters_$free entry (pointer, pointer, fixed bin (35));
dcl  comm_meters_$get_mpx_entry entry (char (*), fixed bin) returns (entry);
dcl  meter_format_$time entry (fixed bin (71)) returns (char (10));
dcl  meter_format_$quotient entry (fixed bin (71), fixed bin (71), char (*)) returns (char (12) varying);
dcl  find_condition_info_ entry (ptr, ptr, fixed bin (35));
dcl  continue_to_signal_ entry (fixed bin (35));


/* EXTERNAL STATIC */

dcl  (
     error_table_$noarg,
     error_table_$badopt,
     error_table_$inconsistent,
     error_table_$bigarg,
     error_table_$no_channel_meters,
     error_table_$no_operation
     ) fixed bin (35) external static;


/* INTERNAL STATIC */

dcl  CMD_NAME char (19) internal static options (constant) init ("channel_comm_meters");


/* BUILTINS & CONDITIONS */

dcl  sub_error_ condition;

dcl  (substr, divide, clock, null, addr, unspec) builtin;

%include channel_meters;
%page;
%include channel_summary;
%page;
%include multiplexer_types;
%page;
%include condition_info;
%page;
%include sub_error_info;
%page;
%include condition_info_header;
%page;
%include comm_meters_error_info;

	call cu_$arg_count (nargs, code);
	if code ^= 0
	then do;
	     call com_err_ (code, CMD_NAME);
	     return;
	end;

	if nargs = 0
	then do;
	     call com_err_ (error_table_$noarg, CMD_NAME,
		"^/Usage: channel_comm_meters channel_name {-brief} {-error} {-summary} {-since_bootload | -since_dialup}"
		);
	     return;
	end;

	brief, error, summary, since_boot, boot_spec, dial_spec, chan_spec = "0"b;

	do i = 1 to nargs;				/* parse the arguments */
	     call cu_$arg_ptr (i, argp, argl, code);
	     if substr (arg, 1, 1) = "-"		/* control arg */
	     then do;
		ctl_arg = substr (arg, 2);

		if ctl_arg = "brief" | ctl_arg = "bf"
		then brief = "1"b;

		else if ctl_arg = "error"
		then error = "1"b;

		else if ctl_arg = "summary" | ctl_arg = "sum"
		then summary = "1"b;

		else if ctl_arg = "since_bootload" | ctl_arg = "boot"
		then do;
		     boot_spec = "1"b;
		     since_boot = "1"b;
		end;

		else if ctl_arg = "since_dialup" | ctl_arg = "dial"
		then do;
		     dial_spec = "1"b;
		     since_boot = "0"b;
		end;

		else do;
		     call com_err_ (error_table_$badopt, CMD_NAME, arg);
		     return;
		end;
	     end;

	     else do;
		if chan_spec			/* already gave a channel name */
		then do;
		     call com_err_ (error_table_$inconsistent, CMD_NAME,
			"Only one channel starname may be specified.");
		     return;
		end;

		if argl > 32			/* too big to be a channel name */
		then do;
		     call com_err_ (error_table_$bigarg, CMD_NAME, "^a. Channel name must not exceed 32 characters.",
			arg);
		     return;
		end;

		chan_spec = "1"b;
		chan_star_name (1) = arg;
	     end;
	end;

/* Now check for unacceptable combinations */

	if (brief | error) & summary
	then do;
	     call com_err_ (error_table_$inconsistent, CMD_NAME,
		"-summary may not be specified with either -brief or -error.");
	     return;
	end;

	if boot_spec & dial_spec
	then do;
	     call com_err_ (error_table_$inconsistent, CMD_NAME,
		"only one of -since_bootload and -since_dialup may be specified.");
	     return;
	end;


/* handler for sub_error_ */

	on sub_error_
	     begin;

dcl  pass_on bit (1);
dcl  1 auto_cond_info aligned like condition_info;

		pass_on = "0"b;
		condition_info_ptr = addr (auto_cond_info);
		call find_condition_info_ (null (), condition_info_ptr, code);
		if code ^= 0			/* rather unlikely */
		then pass_on = "1"b;		/* but we'll let someone else worry about it */

		else if condition_info.info_ptr = null () | condition_info.condition_name ^= "sub_error_"
						/* we're not about to deal with this */
		then pass_on = "1"b;

		else do;
		     sub_error_info_ptr = condition_info.info_ptr;
		     if sub_error_info.name ^= "comm_meters_"
						/* not someone we know */
		     then pass_on = "1"b;

		     else if sub_error_info.info_ptr = null ()
						/* simple enough */
		     then go to report_it;

		     comm_meters_errp = sub_error_info.info_ptr;
		     if comm_meters_error_info.version ^= COMM_METERS_ERR_V1
		     then pass_on = "1"b;

		     else do;
			if ^comm_meters_error_info.starname_matched
			then go to report_it;
			if sub_error_info.status_code ^= error_table_$no_channel_meters
						/* this is not worth reporting */
			     | ^comm_meters_error_info.more_than_one_match
						/* unless there's only one channel anyway */
			then do;

report_it:
			     call com_err_ (sub_error_info.status_code, CMD_NAME, sub_error_info.info_string);
			end;
		     end;
		end;

		if pass_on
		then call continue_to_signal_ (code);
	     end;

/* Now start to do some work */

	areap = get_system_free_area_ ();
	call comm_meters_ (chan_star_name, CHANNEL_METERS_VERSION_1, areap, n_channels, chan_meterp, code);
	if code ^= 0
	then return;				/* comm_meters_ calls sub_err_, which should explain everything */

	orig_meterp = chan_meterp;			/* save this for later freeing */
	display_flags = brief || error || summary || since_boot || (32)"0"b;

	call system_info_$timeup (beginning);
	all_time = clock () - beginning;
	call ioa_ ("Total metering time ^a", meter_format_$time (all_time));

	if summary				/* print header */
	then call ioa_ ("^/cps^7tcpsi^14tcpso^20tiotxXsbepQqa^34terr^39tABE^44tname^60tuser^/");

	do chanx = 1 to n_channels;
	     name = channel_meters.channel_name;
	     if ^summary
	     then do;
		call ioa_ ("^/^a^/", name);

		entry_var = comm_meters_$get_mpx_entry ("display_mpx", channel_meters.multiplexer_type);
		call entry_var (name, null (), chan_meterp, display_flags, code);
		if code ^= 0 & code ^= error_table_$no_operation
						/* don't fuss if entry simply not supplied */
		then call com_err_ (code, CMD_NAME, "No multiplexer meters for ^a (multiplexer type ^a)", name,
			mpx_types (channel_meters.multiplexer_type));

		if channel_meters.parent_type > 0	/* not level-1 mpx */
		then do;
		     entry_var = comm_meters_$get_mpx_entry ("display_subchan", channel_meters.parent_type);
		     call entry_var (name, null (), chan_meterp, display_flags, code);
		     if code ^= 0 & code ^= error_table_$no_operation
						/* as above */
		     then call com_err_ (code, CMD_NAME, "No subchannel meters for ^a (parent type ^a)", name,
			     mpx_types (channel_meters.parent_type));
		end;
	     end;

	     else do;				/* get summary information and print it ourselves */
		unspec (auto_summary) = "0"b;
		auto_summary.version = CHANNEL_SUMMARY_VERSION_1;

		entry_var = comm_meters_$get_mpx_entry ("mpx_summary", channel_meters.multiplexer_type);
		call entry_var (chan_meterp, since_boot, addr (auto_summary), code);

		total_errors = auto_summary.error_count;/* save this */
		auto_summary.error_count = 0;		/* parent may update this */

		if channel_meters.parent_type > 0
		then do;
		     entry_var = comm_meters_$get_mpx_entry ("subchan_summary", channel_meters.parent_type);
		     call entry_var (chan_meterp, since_boot, addr (auto_summary), code);
		     total_errors = total_errors + auto_summary.error_count;
		end;

		if since_boot
		then do;
		     input_chars = channel_meters.cumulative.unconverted_input_chars;
		     output_chars = channel_meters.cumulative.converted_output_chars;
		     seconds = divide (all_time, 1000000, 71, 0);
		end;

		else do;
		     input_chars =
			channel_meters.cumulative.unconverted_input_chars
			- channel_meters.saved.unconverted_input_chars;
		     output_chars =
			channel_meters.cumulative.converted_output_chars
			- channel_meters.saved.converted_output_chars;
		     seconds = divide (auto_summary.time_since_dial, 1000000, 71, 0);
		end;

		if auto_summary.user_process = "0"b
		then user_name = "";
		else call get_userid_ (auto_summary.user_process, user_name, user_proj, (0), (0), code);

		if auto_summary.synchronous
		then cps = divide (auto_summary.baud_rate, 8, 17, 0);
		else cps = divide (auto_summary.baud_rate, 10, 17, 0);

		call ioa_ (
		     "^3d^6t^a^13t^a^20t^[i^;^x^]^[o^;^x^]^[t^;^x^]^[x^;^x^]^[X^;^x^]^[s^;^x^]^[b^;^x^]^[e^;^x^]^[p^;^x^]^[Q^;^x^]^[q^;^x^]^[a^;^x^]^33t^4d^39t^[s^;a^]^[B^;^x^]^[E^;^x^]^44t^a^60t^a"
		     , cps, meter_format_$quotient ((input_chars), seconds, "^5.2f"),
		     meter_format_$quotient ((output_chars), seconds, "^5.2f"), auto_summary.invalid_input,
		     auto_summary.output_re_xmit, auto_summary.timeout, auto_summary.pre_exhaust,
		     auto_summary.exhaust, auto_summary.xte, auto_summary.bell_quit, auto_summary.echo_overflow,
		     auto_summary.parity, auto_summary.ssqo, auto_summary.hsqo, auto_summary.alloc_failure,
		     total_errors, auto_summary.synchronous, auto_summary.breakall, auto_summary.echoplex, name,
		     user_name);
	     end;

	     chan_meterp = channel_meters.next_channelp;
	end;

	call comm_meters_$free (areap, orig_meterp, code);
	if code ^= 0
	then call com_err_ (code, CMD_NAME, "While freeing channel meters.");

	return;
     end channel_comm_meters;
