/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4,delnl,insnl,^ifthendo */
meter_format_:
     procedure;

/* collection of routines to return nicely formatted numbers for metering commands */

/* PARAMETERS */

dcl  number fixed bin (35);
dcl  width fixed bin;
dcl  dividend fixed bin (71);
dcl  divisor fixed bin (71);
dcl  format char (*);
dcl  interval fixed bin (71);

/* AUTOMATIC */

dcl  picture pic "zzz,zzz,zzz,zz9";
dcl  result char (15) varying;
dcl  qresult float bin (27);
dcl  retval char (12) varying;
dcl  hours pic "zzz9";
dcl  minutes pic "99";
dcl  seconds pic "99";
dcl  all_seconds fixed bin (35);


/* ENTRIES */

dcl  ioa_$rsnnl entry options (variable);


/* BUILTINS & CONDITIONS */

dcl  (size, zerodivide) condition;

dcl  (divide, ltrim, copy, max, length, float) builtin;

picture:
     entry (number, width) returns (char (15) varying);

/* a function that, given a fixed bin number, returns it with commas, right-justified in a field of a given width */

	picture = number;				/* this does the magic conversion */
	result = ltrim (picture);			/* get rid of leading blanks */
						/* and then restore the right number of them */
	return (copy (" ", max (0, width - length (result))) || result);

quotient:
     entry (dividend, divisor, format) returns (char (12) varying);

/* a function that divides 2 fixed bins to get a floating result, and then returns it formatted as specified.
   Returns a nice character string in case of division by 0. */

	on zerodivide go to quotient_error;

	qresult = float (dividend) / float (divisor);
	call ioa_$rsnnl (format, retval, (0), qresult);
	return (retval);

quotient_error:
	return ("No data.");

time:
     entry (interval) returns (char (10));

/* a function that, given a time interval in microseconds, returns it in character
   string form as hours:minutes:seconds */

	on size go to time_error;
	all_seconds = divide (interval, 1000000, 35, 0);	/* elapsed time in seconds */
	hours = divide (all_seconds, 3600, 35, 0);
	minutes = divide (all_seconds, 60, 35, 0) - 60 * hours;
						/* residual minutes */
	seconds = all_seconds - 3600 * hours - 60 * minutes; /* residual seconds */
	return (hours || ":" || minutes || ":" || seconds);

time_error:
	return ("No data.");

     end meter_format_;
