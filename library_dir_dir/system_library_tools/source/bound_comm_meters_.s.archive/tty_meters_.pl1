/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4,delnl,insnl,^ifthendo */
tty_meters_:
     procedure;

/* This procedure contains entries to allocate and free metering structures, and display meters,
   for tty-type (non-multiplexed) channels. Only the _mpx entries are needed; a tty channel
   can never be a parent.
*/

/* Written February 1981 by Robert Coren */

	return;					/* main entry should never be called */

/* PARAMETERS */

dcl  a_area_ptr pointer;				/* pointer to area in which to perform allocations */
dcl  a_tty_meterp pointer;				/* pointer to structure to be allocated/freed (OUTPUT for alloc, INPUT for free */
dcl  a_chan_name char (*);				/* name of channel for display_mpx entry */
dcl  a_iocbp pointer;				/* pointer to IOCB for display_mpx */
dcl  a_chan_meterp pointer;				/* pointer to channel_meters structure, for display_mpx */
dcl  a_flags bit (36) aligned;			/* indicates what options were specified */
dcl  a_since_boot bit (1);				/* indicates -since_bootload specified  (summary entry) */
dcl  a_summary_ptr pointer;				/* pointer to structure used by summary entry */
dcl  a_code fixed bin (35);				/* status code (OUTPUT) */

/* AUTOMATIC */

dcl  areap pointer;
dcl  code fixed bin (35);
dcl  chan_name char (32);
dcl  iocbp pointer;
dcl  flags bit (36) aligned;
dcl  brief bit (1);
dcl  since_boot bit (1);
dcl  total_in_before_conv fixed bin (35);
dcl  total_in_after_conv fixed bin (35);
dcl  total_out_before_conv fixed bin (35);
dcl  total_out_after_conv fixed bin (35);
dcl  total_read_calls fixed bin (35);
dcl  total_write_calls fixed bin (35);
dcl  total_control_calls fixed bin (35);
dcl  total_read_time fixed bin (71);
dcl  total_write_time fixed bin (71);
dcl  total_control_time fixed bin (71);
dcl  total_ints fixed bin (35);
dcl  total_int_time fixed bin (71);
dcl  in_before_conv fixed bin (35);
dcl  in_after_conv fixed bin (35);
dcl  out_before_conv fixed bin (35);
dcl  out_after_conv fixed bin (35);
dcl  read_calls fixed bin (35);
dcl  write_calls fixed bin (35);
dcl  control_calls fixed bin (35);
dcl  read_time fixed bin (71);
dcl  write_time fixed bin (71);
dcl  control_time fixed bin (71);
dcl  interrupts fixed bin (35);
dcl  int_time fixed bin (71);
dcl  start_time fixed bin (71);
dcl  elapsed_time fixed bin (71);


/* BASED */

dcl  m_area area (256) based (areap);


/* ENTRIES */

dcl  ioa_$ioa_switch entry options (variable);
dcl  system_info_$timeup entry (fixed bin (71));
dcl  meter_format_$picture entry (fixed bin (35), fixed bin) returns (char (15) varying);
dcl  meter_format_$quotient entry (fixed bin (71), fixed bin (71), char (*)) returns (char (12) varying);


/* EXTERNAL STATIC */

dcl  error_table_$noalloc fixed bin (35) external static;
dcl  iox_$user_output pointer external static;


/* CONDITIONS */

dcl  area condition;

allocate_mpx:
     entry (a_area_ptr, a_tty_meterp, a_code);

/* entry to allocate a tty_channel_meters structure */

	areap = a_area_ptr;
	a_code = 0;
	on area
	     begin;
		a_code = error_table_$noalloc;
		go to exit;
	     end;

	allocate tty_channel_meters in (m_area) set (a_tty_meterp);
	a_tty_meterp -> tty_channel_meters.version = TTY_CHANNEL_METERS_VERSION_1;

exit:
	return;



free_mpx:
     entry (a_tty_meterp, a_code);

/* entry to free the tty_meters structure */

	tty_meterp = a_tty_meterp;
	free tty_channel_meters;
	a_code = 0;
	return;

display_mpx:
     entry (a_chan_name, a_iocbp, a_chan_meterp, a_flags, a_code);

	chan_name = a_chan_name;
	iocbp = a_iocbp;
	if iocbp = null ()
	then iocbp = iox_$user_output;
	chan_meterp = a_chan_meterp;
	flags = a_flags;
	a_code = 0;

	tty_meterp = channel_meters.mpx_specific_meterp;

	if flags & DISPLAY_MPX_SUMMARY		/* this routine doesn't do anything for summary */
	then return;

	if flags & DISPLAY_MPX_ERROR			/* this routine doesn't display any error conditions */
	then return;

	brief = flags & DISPLAY_MPX_BRIEF;
	total_in_before_conv = channel_meters.cumulative.unconverted_input_chars;
	total_in_after_conv = tty_channel_meters.current_meters.read_chars;
	total_out_before_conv = tty_channel_meters.current_meters.write_chars;
	total_out_after_conv = channel_meters.cumulative.converted_output_chars;
	total_read_calls = tty_channel_meters.current_meters.read_calls;
	total_write_calls = tty_channel_meters.current_meters.write_calls;
	total_control_calls = channel_meters.cumulative.control_calls;
	total_read_time = tty_channel_meters.current_meters.read_time;
	total_write_time = tty_channel_meters.current_meters.write_time;
	total_control_time = channel_meters.cumulative.control_call_time;
	total_ints = channel_meters.cumulative.software_interrupts;
	total_int_time = channel_meters.cumulative.interrupt_time;

	if flags & DISPLAY_MPX_SINCE_BOOT
	then do;					/* totals are the numbers we want */
	     in_before_conv = total_in_before_conv;
	     in_after_conv = total_in_after_conv;
	     out_before_conv = total_out_before_conv;
	     out_after_conv = total_out_after_conv;
	     read_calls = total_read_calls;
	     write_calls = total_write_calls;
	     control_calls = total_control_calls;
	     read_time = total_read_time;
	     write_time = total_write_time;
	     control_time = total_control_time;
	     interrupts = total_ints;
	     int_time = total_int_time;
	     call system_info_$timeup (start_time);
	end;

	else do;
	     in_before_conv = total_in_before_conv - channel_meters.saved.unconverted_input_chars;
	     in_after_conv = total_in_after_conv - tty_channel_meters.saved_meters.read_chars;
	     out_before_conv = total_out_before_conv - tty_channel_meters.saved_meters.write_chars;
	     out_after_conv = total_out_after_conv - channel_meters.saved.converted_output_chars;
	     read_calls = total_read_calls - tty_channel_meters.saved_meters.read_calls;
	     write_calls = total_write_calls - tty_channel_meters.saved_meters.write_calls;
	     control_calls = total_control_calls - channel_meters.saved.control_calls;
	     read_time = total_read_time - tty_channel_meters.saved_meters.read_time;
	     write_time = total_write_time - tty_channel_meters.saved_meters.write_time;
	     control_time = total_control_time - channel_meters.saved.control_call_time;
	     interrupts = total_ints - channel_meters.saved.software_interrupts;
	     int_time = total_int_time - channel_meters.saved.interrupt_time;
	     start_time = tty_channel_meters.last_dialed_time;
	end;

	elapsed_time = clock () - start_time;

	call ioa_$ioa_switch (iocbp, "^25tbefore conversion^45tafter conversion^64tratio");
	call ioa_$ioa_switch (iocbp, "Total characters input^25t^a^45t^a^65t^a",
	     meter_format_$picture (in_before_conv, 9), meter_format_$picture (in_after_conv, 9),
	     meter_format_$quotient ((in_after_conv), (in_before_conv), "^.2f"));

	call ioa_$ioa_switch (iocbp, "Total characters output^25t^a^45t^a^65t^a",
	     meter_format_$picture (out_before_conv, 9), meter_format_$picture (out_after_conv, 9),
	     meter_format_$quotient ((out_after_conv), (out_before_conv), "^.2f"));

	call ioa_$ioa_switch (iocbp, "Average length of input^29t^a^49t^a",
	     meter_format_$quotient ((in_before_conv), (read_calls), "^5.1f"),
	     meter_format_$quotient ((in_after_conv), (read_calls), "^5.1f"));

	call ioa_$ioa_switch (iocbp, "Average length of output^29t^a^49t^a",
	     meter_format_$quotient ((out_before_conv), (write_calls), "^5.1f"),
	     meter_format_$quotient ((out_after_conv), (write_calls), "^5.1f"));

	if ^brief
	then do;
	     call ioa_$ioa_switch (iocbp, "^/^34tread^45twrite^56tcontrol^64ttotal");
	     call ioa_$ioa_switch (iocbp, "Number of calls^34t^a^45t^a^56t^a^65t^a",
		meter_format_$picture (read_calls, 5), meter_format_$picture (write_calls, 5),
		meter_format_$picture (control_calls, 5),
		meter_format_$picture (read_calls + write_calls + control_calls, 5));

	     call ioa_$ioa_switch (iocbp, "Average time per call (msec.)^35t^a^46t^a^57t^a^66t^a",
		meter_format_$quotient (read_time, 1000 * read_calls, "^4.1f"),
		meter_format_$quotient (write_time, 1000 * write_calls, "^4.1f"),
		meter_format_$quotient (control_time, 1000 * control_calls, "^4.1f"),
		meter_format_$quotient (read_time + write_time + control_time,
		1000 * (read_calls + write_calls + control_calls), "^4.1f"));

	     call ioa_$ioa_switch (iocbp, "Average chars. processed per call^34t^a^45t^a",
		meter_format_$quotient ((in_before_conv), (read_calls), "^5.1f"),
		meter_format_$quotient ((out_before_conv), (write_calls), "^5.1f"));

	     call ioa_$ioa_switch (iocbp, "Number of software interrupts^34t^a", meter_format_$picture (interrupts, 9));

	     call ioa_$ioa_switch (iocbp, "Average time per interrupt (msec.)^35t^a^/",
		meter_format_$quotient (int_time, 1000 * interrupts, "^4.1f"));
	end;

	call ioa_$ioa_switch (iocbp, "^/^34tinput^45toutput");

	call ioa_$ioa_switch (iocbp, "Effective speed (cps)^34t^a^45t^a",
	     meter_format_$quotient (1000000 * in_before_conv, elapsed_time, "^7.1f"),
	     meter_format_$quotient (1000000 * out_before_conv, elapsed_time, "^7.1f"));

	return;

mpx_summary:
     entry (a_chan_meterp, a_since_boot, a_summary_ptr, a_code);

/* entry to fill in structure used by channel_comm_meters -summary */

	a_code = 0;				/* no errors are possible */
	summary_ptr = a_summary_ptr;
	chan_meterp = a_chan_meterp;
	since_boot = a_since_boot;
	tty_meterp = channel_meters.mpx_specific_meterp;

	channel_summary.baud_rate = tty_channel_meters.baud_rate;
	channel_summary.user_process = tty_channel_meters.user_process;
	if tty_channel_meters.last_dialed_time ^= 0
	then channel_summary.time_since_dial = clock () - tty_channel_meters.last_dialed_time;
	channel_summary.breakall = tty_channel_meters.breakall;
	channel_summary.echoplex = tty_channel_meters.echoplex;
	return;

%include tty_channel_meters;
%page;
%include tcb;
%page;
%include channel_meters;
%page;
%include comm_meters_disp_flags;
%page;
%include channel_summary;
     end tty_meters_;
