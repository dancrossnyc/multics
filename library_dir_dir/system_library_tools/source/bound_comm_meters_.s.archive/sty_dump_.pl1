/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* format: style4,delnl,insnl,ifthenstmt,indnoniterend */
sty_dump_:
     procedure (Ttybp, Areap, Dp, Sc, Brief);

/* Debugging display for STY channels. */
/* Written July 1981 by C. Hornig */
/* Modified April 1983 by Robert Coren to print access class if present */

dcl  (Ttybp, Areap, Dp) ptr parameter;
dcl  Sc fixed bin parameter;
dcl  Brief bit (1) aligned parameter;

dcl  convert_authorization_$to_string entry (bit (72) aligned, char (*), fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  mode_string_$get entry (ptr, char (*), fixed bin (35));
dcl  tty_dump$print_chain entry (ptr, char (*), fixed bin, bit (1));

dcl  her_sc fixed bin;
dcl  code fixed bin (35);
dcl  modes char (512);
dcl  access_class_string char (864);

dcl  (pointer, rel) builtin;
%page;
	sty_mpx_data_ptr = pointer (Areap, rel (Dp));

	if Sc > 0 then do;
	     pdep = addr (sty_mpx_data.pdes (Sc));
	     her_sc = 1 + mod (Sc - 1 + sty_mpx_data.n_pairs, sty_mpx_data.n_channels);
	     call ioa_ ("^d(^o) -> ^d(^o): ^d words^[ listening^]^[ wru^]^[ eop^]^[ notify_modes^]^[ output_ready^]",
		Sc, pde.devx, her_sc, sty_mpx_data.pdes (her_sc).devx, pde.words, pde.flags.listen, pde.flags.wru,
		pde.flags.end_of_page, pde.flags.notify_modes, pde.flags.output_ready);
	     if pde.mode_ptr ^= null () then do;
		call mode_string_$get (pointer (Areap, rel (pde.mode_ptr)), modes, code);
		if code ^= 0 then modes = "???";
		call ioa_ ("^-modes: ^a", modes);
		end;

	     if pde.access_class_set then do;
		call convert_authorization_$to_string (pde.access_class, access_class_string, code);
		if code ^= 0
		then call ioa_ ("^-access class: ^b3", pde.access_class);
		else call ioa_ ("^-access class: ^a", access_class_string);
		end;

	     call tty_dump$print_chain (Ttybp, "", (pde.head), (Brief));
	     end;

	else do;
	     call ioa_ ("STY MPX devx ^o, ^d channels.", sty_mpx_data.devx, sty_mpx_data.n_channels);
	     end;

	return;
%page;
%include sty_mpx_data;
%include mode_string_info;

     end sty_dump_;
