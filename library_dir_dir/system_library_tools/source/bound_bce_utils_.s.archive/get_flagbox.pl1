/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* Modified 9/83 by Keith Loepere for bce_command string */

/* format: style4,indattr,ifthenstmt,ifthen,idind33,^indcomtxt */

get_flagbox: proc;

dcl  af_result_len		        fixed bin;
dcl  af_result_ptr		        ptr;
dcl  arg_count		        fixed bin;
dcl  arg_len		        fixed bin;
dcl  arg_ptr		        ptr;
dcl  code			        fixed bin (35);
dcl  bce_command		        char (128);
dcl  flag_num		        fixed bin;
dcl  flags		        bit (36);
dcl  flags_to_reset		        bit (36) init ("0"b);
dcl  flags_to_set		        bit (36) init ("0"b);
dcl  name			        char (12) init ("get_flagbox");
dcl  not_active_fnc		        bit (1) init ("0"b);
dcl  result		        char (256) var;

dcl  af_result		        char (af_result_len) var based (af_result_ptr);
dcl  arg			        char (arg_len) based (arg_ptr);

dcl  error_table_$badopt	        fixed bin (35) ext;
dcl  error_table_$not_act_fnc	        fixed bin (35) ext;

dcl  active_fnc_err_	        entry options (variable);
dcl  active_fnc_err_$suppress_name    entry options (variable);
dcl  com_err_		        entry options (variable);
dcl  com_err_$suppress_name	        entry options (variable);
dcl  cu_$af_arg_ptr		        entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cu_$af_return_arg	        entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cu_$arg_count		        entry (fixed bin, fixed bin (35));
dcl  cu_$arg_ptr		        entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cv_dec_check_		        entry (char (*), fixed bin (35)) returns (fixed bin);
dcl  phcs_$get_bce_command	        entry (char (128));
dcl  phcs_$get_flagbox	        entry (bit (36));
dcl  hphcs_$set_bce_command	        entry (char (128));
dcl  hphcs_$set_flagbox	        entry (bit (36), bit (36));
dcl  ioa_			        entry options (variable);
dcl  requote_string_	        entry (char (*)) returns (char (*));

dcl  substr		        builtin;
%page;
	call cu_$af_return_arg (arg_count, af_result_ptr, af_result_len, code);
	if code ^= 0 then
	     if code = error_table_$not_act_fnc then do;
		not_active_fnc = "1"b;
		code = 0;
	     end;
	if arg_count ^= 1 | code ^= 0 then do;
	     if not_active_fnc then call com_err_$suppress_name (code, name, "Usage is: ^a <flag_name>.", name);
	     else call active_fnc_err_$suppress_name (code, name, "Usage is: ^a <flag_name>.", name);
	     return;
	end;

	call cu_$arg_ptr (1, arg_ptr, arg_len, code);

	if arg = "bce_command" then do;
	     call phcs_$get_bce_command (bce_command);
	     result = requote_string_ (bce_command);
	end;
	else do;
	     flag_num = cv_dec_check_ (arg, code);
	     if code ^= 0 then do;
		do flag_num = 1 to 36 while (arg ^= flagbox_flag_names (flag_num)); end;
		if flag_num > 36 then go to fail;
	     end;

	     call phcs_$get_flagbox (flags);
	     if substr (flags, flag_num, 1) then result = "true"; else result = "false";
	end;

	if not_active_fnc then call ioa_ (result);
	else af_result = result;
	return;
%page;
set_flagbox: entry;

	name = "set_flagbox";
	not_active_fnc = "1"b;
	call cu_$arg_count (arg_count, code);
	if arg_count ^= 2 | code ^= 0 then do;
	     call com_err_$suppress_name (code, name, "Usage is: ^a <flag_name> <value>.", name);
	     return;
	end;

	call cu_$arg_ptr (1, arg_ptr, arg_len, code);

	if arg = "bce_command" then do;
	     call cu_$arg_ptr (2, arg_ptr, arg_len, code);
	     bce_command = arg;
	     call hphcs_$set_bce_command (bce_command);
	end;
	else do;
	     flag_num = cv_dec_check_ (arg, code);
	     if code ^= 0 then do;
		do flag_num = 1 to 36 while (arg ^= flagbox_flag_names (flag_num)); end;
		if flag_num > 36 then go to fail;
	     end;
	     call cu_$arg_ptr (2, arg_ptr, arg_len, code);

	     if arg = "true" then substr (flags_to_set, flag_num, 1) = "1"b;
	     else if arg = "false" then substr (flags_to_reset, flag_num, 1) = "1"b;
	     else go to fail;

	     call hphcs_$set_flagbox (flags_to_set, flags_to_reset);
	end;
	return;

/* ------------------------------------------------------- */

fail:	code = error_table_$badopt;
	if not_active_fnc then call com_err_ (code, name, arg);
	else call active_fnc_err_ (code, name, arg);
	return;
%page;
%include flagbox_flags;
     end get_flagbox;
