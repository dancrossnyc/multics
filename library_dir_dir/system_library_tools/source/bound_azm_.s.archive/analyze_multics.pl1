/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

analyze_multics: azm: procedure () options (variable);

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */

/* Main procedure for Multics Online Analysis subsystem
   09/07/80 W. Olin Sibert

   Modified 06/23/83 by B. Braun to update user interface as per MTB-624

   Modified 03 Nov 83 by B. Braun to fix reference thru null pointer when it 
   encounters an unrecognized variable (phx16285).

   Modified 22 Oct 84 by B. Braun to add the ssu_ standard requests info dir, and the azm version number.
   Modified 27 Oct 84 by B. Braun to get rid of amu_arglist_ references as it was never used.
   Modified 13 Nov 84 by B. Braun to fix the RQO handler (phx17544).
   Modified 06 Dec 84 by B. Braun to call its start_up after initialization is complete. (phx18527).
*/

dcl  abbrev_sw			bit (1);
dcl  al				fixed bin (21);
dcl  alp				pointer;
dcl  amu_ptr			ptr;
dcl  ap				pointer;
dcl  arg				char (al) based (ap);
dcl  argno			fixed bin;
dcl  1 azm_info_automatic		aligned like azm_info automatic;
dcl  code				fixed bin (35);
dcl  cond_uid			bit(36) aligned;
dcl  debug_sw			bit (1) aligned;
dcl  dirname char(168);
dcl  dn_lth fixed bin;
dcl  ename char(32);
dcl  i				fixed bin;
dcl  info_dir			char (168);
dcl  my_uid			bit(36) aligned;
dcl  nargs			fixed bin;
dcl  profile_len			fixed bin(21);
dcl  profile_ptr			ptr;
dcl  profile_str			char(profile_len) based(profile_ptr);
dcl  prompt_len			fixed bin(21);
dcl  prompt_ptr			ptr;
dcl  prompt_string			char(prompt_len) based (prompt_ptr);
dcl  quit_sw			bit (1);
dcl  request_line			char(request_line_len) based (request_line_ptr);
dcl  request_line_len		fixed bin(21);
dcl  request_line_ptr		ptr;
dcl  rq_sw			bit (1) aligned;
dcl  startup_sw			bit(1);
dcl  temp_ptr			ptr;
dcl  where_ami_dir			char (168);
dcl  where_ami_entry		char (32);
dcl  where_ami_len			fixed bin;
dcl  where_ami_ptr			ptr;
dcl  why_sw			bit (1);
dcl  sci_ptr			pointer;


dcl  ssu_request_tables_$standard_requests
				bit(36) aligned external;
dcl ssu_info_directories_$standard_requests char (168) external;

/* External Static */

dcl  azm_request_table_$azm_request_table_ fixed bin external static;
dcl  (
     error_table_$bad_arg,
     error_table_$badopt,
     error_table_$noarg,
     ssu_et_$null_request_line,
     ssu_et_$program_interrupt,
     ssu_et_$request_line_aborted,
     ssu_et_$subsystem_aborted
     ) fixed bin (35) external static;

dcl  amu_$terminate_translation	entry (ptr),
     com_err_			entry options (variable),
     continue_to_signal_		entry (fixed bin (35)), 
     cu_$arg_count			entry (fixed bin, fixed bin (35)),
     cu_$arg_ptr			entry (fixed bin, pointer, fixed bin (21), fixed bin (35)),
     expand_pathname_$add_suffix	entry (char(*), char(*), char(*), char(*), fixed bin(35)),
     find_condition_frame_		entry (ptr) returns(ptr),
     hcs_$fs_get_path_name		entry (ptr, char (*), fixed bin, char (*), fixed bin (35)),
     hcs_$get_uid_seg		entry (ptr, bit(36) aligned, fixed bin(35)),
     hcs_$make_ptr			entry (ptr, char(*), char(*), ptr, fixed bin(35)),
     initiate_file_			entry (char(*), char(*), bit(*), ptr, fixed bin(24), fixed bin(35)),
     ioa_				entry () options (variable),
     ioa_$nnl			entry() options(variable),
     ssu_$add_info_dir		entry (ptr, char(*), fixed bin, fixed bin(35)),
     ssu_$add_request_table		entry (ptr, ptr, fixed bin, fixed bin(35)),
     ssu_$create_invocation		entry (char (*), char (*), pointer, pointer, char (*), pointer, fixed bin (35)),
     ssu_$destroy_invocation		entry (pointer),
     ssu_$execute_line		entry (ptr, ptr, fixed bin (21), fixed bin (35)),
     ssu_$execute_start_up		entry () options (variable),
     ssu_$get_area			entry (ptr, ptr, char(*), ptr),
     ssu_$get_default_rp_options	entry (ptr, char(8), ptr, fixed bin(35)),
     ssu_$listen			entry (pointer, pointer, fixed bin (35)),
     ssu_$set_debug_mode		entry (ptr, bit(1) aligned),
     ssu_$set_ec_suffix		entry (ptr, char(32)),
     ssu_$set_info_ptr		entry (pointer, pointer),
     ssu_$set_prompt		entry (pointer, char (*) varying),
     ssu_$set_prompt_mode		entry (ptr, bit(*)),
     ssu_$set_request_processor_options
				entry (ptr, ptr, fixed bin(35));

/* Internal Static */

dcl (False			bit(1) init("0"b),
     True				bit(1) init("1"b)) int static options(constant);
dcl  WHOAMI			char (32) internal static options (constant) init ("analyze_multics");
dcl  CURRENT_VERSION		char(4) init ("2.3 ") int static options(constant);

/* Condition Handlers */

dcl  (cleanup, record_quota_overflow)	condition;


/*  Builtins */

dcl  (addr, codeptr, index, 
      null, pointer, reverse, rtrim,
      substr, unspec)		builtin;
%page;

    where_ami_ptr, amu_ptr, sci_ptr, azm_info_ptr, amu_info_ptr, profile_ptr, request_line_ptr, prompt_ptr = null ();
    abbrev_sw, debug_sw, startup_sw, why_sw, quit_sw = "0"b;
    prompt_len = -1;
    profile_len, request_line_len, where_ami_len = 0;

    code = 0;					/* KLUDGE, because new version of cu_$arg_count not here yet. */

    on condition (cleanup)
       begin;
          call clean_up();
       end;

    on condition (record_quota_overflow)
       begin;
       /* Did azm signal this?  */
       sp = find_condition_frame_ (null());
       code = 0;
						/* get UID of owner of condition frame	*/
       call hcs_$get_uid_seg(sp->stack_frame.entry_ptr, cond_uid, code);
       if code ^= 0 then do;
	call continue_to_signal_(code);
	return;
	end;       
						/* get UID of me				*/
       where_ami_ptr = codeptr (analyze_multics);
       call hcs_$get_uid_seg(where_ami_ptr, my_uid, code);
       if code ^= 0 then do;
	call continue_to_signal_(code);
	return;
	end;       

       if cond_uid ^=  my_uid then do;		/* Not ours to handle			*/
					/* But it is ours if signaled by amu_			*/
					/* get ptr to amu_					*/
          call hcs_$make_ptr (null(), "amu_", "", amu_ptr, code);
          if amu_ptr = null() then do;
	   call continue_to_signal_(code);
	   return;
	   end;       
          call hcs_$get_uid_seg(amu_ptr, my_uid, code);	/* Get UID of amu_				*/
          if code ^= 0 then do;
	   call continue_to_signal_(code);
	   return;
	   end;       
	if cond_uid ^=  my_uid then do;		/* Not ours to handle			*/
	   call continue_to_signal_(code);
	   return;
	   end;       
          end;

       /* We called it, We'll handle it */

       call ioa_$nnl ("Record_quota_overflow:^2x");
       if azm_info_ptr = null () then do;
	/* ok time to punt */
	call ioa_ ();
	call continue_to_signal_ (code);
	end;
       amu_info_ptr = azm_info_automatic.aip;
       temp_ptr = null;
       if amu_info_ptr ^= null () then do;
	/* is current the first */
	if amu_info.chain.prev = null () then do;
	   /* is there a second */
	   if amu_info.chain.next ^= null () then do;
	      /* ok try this one */
	      temp_ptr = amu_info_ptr;
	      amu_info_ptr = amu_info.chain.next;
	      end;
	   else do;
	      /* we are realy out of luck */
	      call continue_to_signal_ (code);
	      end;
	   end;
          else do;
	   /* find the first */
	   temp_ptr = amu_info_ptr;
	   do while (temp_ptr -> amu_info.chain.prev ^= null ());
	      temp_ptr = temp_ptr -> amu_info.chain.prev;
	      end;
	   amu_info_ptr = temp_ptr;
	   temp_ptr = null;
	   end;
	if amu_info.type = FDUMP_PROCESS_TYPE then 
	   call ioa_ ("Will try deleting ERF ^a and continue...",fdump_info.erf_name);
	else call ioa_ ("Deleting SAVE_PROC");
	call amu_$terminate_translation (amu_info_ptr);

	if amu_info_ptr = null () then call continue_to_signal_ (code);
	end;
       end;
/* end record_quota_overflow condition */     

    call cu_$arg_count (nargs, code);
    if code ^= 0 then do;
       call com_err_ (code, WHOAMI);
       return;
       end;

    do argno = 1 to nargs;
       call cu_$arg_ptr (argno, ap, al, (0));
       if arg = "-request" | arg = "-rq" then do;
          call get_next_arg("request line", request_line_ptr, request_line_len);
          rq_sw = True;
          end;

       else if arg = "-profile" | arg = "-pf" then do;
	call get_next_arg ("profile path", profile_ptr, profile_len);
          call expand_pathname_$add_suffix(profile_str,"profile",dirname,ename,code);
	if code ^= 0 then call report_error(code, "^a",profile_str,"");
	call initiate_file_ (dirname, ename, R_ACCESS,  profile_ptr, (0), code);
	if profile_ptr = null() then do;
             call com_err_(code, WHOAMI, " -profile ^a^[>^]^a ", dirname, ename^=">", ename);
	   goto AZM_RETURN;
	   end;
	abbrev_sw = True;
	end;

       else if arg = "-ab" | arg = "-abbrev" then do;
	abbrev_sw = True;
	end;

       else if arg = "-nab" | arg = "-no_abbrev" then do;
	abbrev_sw = False;
	end;

       else if arg = "-start_up" | arg = "-su" then do;
	startup_sw  = True;
	end;

       else if arg = "-nsu" | arg = "-no_start_up" then do;
	startup_sw  = False;;
	end;

       else if arg = "-prompt" then do;
	call get_next_arg ("prompt string", prompt_ptr, prompt_len);
	end;

       else if arg = "-no_prompt" then do;
	prompt_len = 0;
          end;

       else if arg = "-db" | arg = "-debug" then debug_sw = "1"b;
       else if arg = "-ndb" | arg = "-no_debug" then debug_sw = "0"b;
       else if (arg = "-quit") then quit_sw = "1"b;

       else do;
          if char(arg,1) = "-" then code = error_table_$badopt;
	else code = error_table_$bad_arg;
          call com_err_ (code, WHOAMI, "^a", arg);
	goto AZM_RETURN;
	end;
       end;						/* of loop through arguments */

						/* azm_invocation_list */
    where_ami_ptr = pointer (codeptr (analyze_multics), 0);
    call hcs_$fs_get_path_name (where_ami_ptr, where_ami_dir, where_ami_len, where_ami_entry, code);
    if code ^= 0 then call report_error (code, WHOAMI, "where", "");

    call ssu_$create_invocation ("azm", CURRENT_VERSION, (null ()), addr (azm_request_table_$azm_request_table_),
	     ">documentation>subsystem>analyze_multics", sci_ptr, code);

    if code ^= 0 then call report_error(code,"^/While creating analyze_multics invocation.","", "");

    call ssu_$add_info_dir (sci_ptr, ssu_info_directories_$standard_requests,
                        9999, code);
    if code ^= 0 then call report_error(code,"^/While adding standard ssu_ info directory.","", "");

    call ssu_$add_request_table(sci_ptr, addr(ssu_request_tables_$standard_requests), 100000, code);
    if code ^= 0 then call report_error(code,"^/While adding standard ssu_ request table.","", "");

    if (prompt_len = 0) then call ssu_$set_prompt_mode (sci_ptr, DONT_PROMPT);
						/* Do not prompt				*/
    else if prompt_len >0 then do;			/* set the user specified prompt		*/
            call ssu_$set_prompt(sci_ptr, (prompt_string));
            end;
    else do; 					/* set the default prompt			*/
       call ssu_$set_prompt (sci_ptr, "^/azm^[ (^d)^]:^2x");
       call ssu_$set_prompt_mode (sci_ptr, PROMPT | PROMPT_AFTER_NULL_LINES | DONT_PROMPT_IF_TYPEAHEAD); 
       end;

    call ssu_$set_ec_suffix (sci_ptr, "azmec");

    if abbrev_sw then do;
       call ssu_$get_default_rp_options(sci_ptr, RP_OPTIONS_VERSION_1, addr(local_rpo), (0));
       local_rpo.abbrev_info.expand_request_lines = True;
       local_rpo.abbrev_info.default_profile_ptr = profile_ptr;
       local_rpo.abbrev_info.profile_ptr = profile_ptr;
       call ssu_$set_request_processor_options(sci_ptr, addr(local_rpo), (0));
       end;

    azm_info_ptr = addr (azm_info_automatic);

    unspec (azm_info) = ""b;
    azm_info.version = AZM_INFO_VERSION_2;
    azm_info.aip = amu_info_ptr;
    call ssu_$get_area (sci_ptr, null (), "azm_area", azm_info.area_ptr);    
    if amu_info_ptr ^= null () then do;
       if amu_info.type = FDUMP_TYPE | amu_info.type = FDUMP_PROCESS_TYPE then azm_info.flags.in_erf = "1"b;
           end;

    call ssu_$set_info_ptr (sci_ptr, azm_info_ptr);
    /* 6/24/83 currently debug mode does nothing, but it may in the future. -B. Braun */
    if debug_sw then call ssu_$set_debug_mode(sci_ptr, debug_sw);
    
    if startup_sw then do;
       call ssu_$execute_start_up (sci_ptr, code);
       if code ^= 0 then call report_error(code,"^/While executing start_up.","", "");
       end;

    if rq_sw then do;			/* just one request line specified 		*/
       call ssu_$execute_line (sci_ptr, request_line_ptr, request_line_len, code);
       if code ^= 0 then do;
          if code = ssu_et_$request_line_aborted  | code = ssu_et_$program_interrupt | code = ssu_et_$null_request_line
          then goto INVOKE_LISTEN;			/* enter request loop		*/
          if code = ssu_et_$subsystem_aborted then goto AZM_RETURN;
          call report_error(code,"^/While executing the request ^a.", (request_line), "");
          end;
       end;

    if quit_sw then goto AZM_RETURN;

INVOKE_LISTEN:

    call ssu_$listen(sci_ptr, null(),code);
    if code ^= ssu_et_$subsystem_aborted then call com_err_ (code,WHOAMI,"^/Calling subsystem listener.");

AZM_RETURN:
	call clean_up ();

	return;

%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

clean_up:
     proc ();

          if azm_info_ptr ^= null() then do;
	   amu_info_ptr = azm_info.aip; 
	   do while (amu_info_ptr ^= null);		/* amu_$terminate_translation should reset the       	*/
						/* amu_info_chain and set amu_info_ptr to that value */
	      call amu_$terminate_translation (amu_info_ptr);
	      end;
	   end;

	if sci_ptr ^= null () then call ssu_$destroy_invocation (sci_ptr);

	return;

     end clean_up;
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


get_next_arg: proc(Arg_expected, ap1, al1);

/*  This guy gets the next argument from the argument string, complaining if it's not there  */

dcl Arg_expected			char(*);
dcl (ap1				ptr,
     al1				fixed bin(21));
	    
	if (argno + 1) > nargs then do;
	     call report_error(error_table_$noarg, "A ^a expected after ^a.", Arg_expected, arg);
	     return;
	     end;

	argno = argno + 1;
	call cu_$arg_ptr (argno, ap1, al1, (0));
     
end get_next_arg;
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

report_error: proc(ecode, message, str1, str2);

/* reports error messages and aborts the line */

dcl ecode				fixed bin(35),
    (message, str1, str2)		char(*);
 
   call com_err_(ecode, WHOAMI, message, str1, str2);
   goto AZM_RETURN;

end report_error;
%page;%include access_mode_values;
%page;%include amu_fdump_info;
%page;%include amu_info;
%page;%include azm_info;
%page;%include ssu_rp_options;

dcl 1 local_rpo  like rp_options;
%page;%include ssu_prompt_modes;
%page;%include stack_frame;

     end analyze_multics;
