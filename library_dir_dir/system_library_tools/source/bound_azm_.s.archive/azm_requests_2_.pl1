/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(87-07-09,Leatherman), approve(87-07-09,MCR7746),
     audit(87-07-16,Fawcett), install(87-07-28,MR12.1-1049):
     Change references from "No translation selected" to "No dump selected" for
     better understanding.
  2) change(87-08-14,Parisek), approve(87-08-14,MCR7861),
     audit(88-07-08,Farley), install(88-07-12,MR12.2-1055):
     Correct bug in setting PTW pointer when given page address is greater
     than zero.
                                                   END HISTORY COMMENTS */


azm_requests_2_: proc ();

	return;					/* not an entrypoint */

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */


/* Assorted requests for analyze_multics. */


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* 0) Created: 06/25/83 by B. Braun from the original azm_misc_requests_ into smaller	*/
	/* modules. This contains azm requests associative_memory, verify_associative_memory,	*/
	/* scus, search, segment_name, segment_number, replace, value, set, clock, error_code,	*/
	/* quit, self_identify (.), absolute_address.					*/
	/* 1) Modified 12/8/83 by B. Braun to add "-a" syn for "-all" in value request and correct*/
	/* usage message.  Correct "number foo" to return "Segment not found."		*/
	/* 2) Modified July 84 by B. Braun to add knowledge of unpaged_page_tables to absadr.     */
	/* 3) Modified Sept 84 by B. Braun to add knowledge of int_unpaged_page_tables to absadr. */
	/* 4) Modified Nov 84 by B. Braun to change the number active request to return only the  */
	/*    segment number and not the offset.					*/
	/* 5) Modified 21 Nov 84 by B. Braun to correct "replace" request to use expand_pathname_ */
	/* 6) Modified 10 Jan 85 by BLB to correct the ioa_$rsnnl call in the name active request.*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


dcl  (
     P_sci_ptr pointer,
     P_azm_info_ptr pointer
     ) parameter;

/* Automatic */

dcl  af_sw			bit (1) aligned;
dcl  am_from_prds			bit (1);
dcl  amptw_pageno			fixed bin;
dcl  amsdw_segno			fixed bin;
dcl  axp				ptr init (null);
dcl  argl				fixed bin (21);
dcl  argno			fixed bin;
dcl  argp				pointer;
dcl  axstring			char (7) init ("");
dcl  brief_sw			bit (1) init ("0"b);
dcl  check_args			fixed bin;
dcl  code				fixed bin (35);
dcl  configp			ptr init (null);
dcl  cur_erf			bit (1) init ("0"b);
dcl  del_cur_erf			bit (1) init ("0"b);
dcl  del_erf			bit (1) init ("0"b);
dcl  dir_name			char (168);
dcl  dir_sw			bit (1) init ("0"b);
dcl  do_ptws			bit (1);
dcl  do_sdws			bit (1);
dcl  dsegp			ptr init (null);
dcl  erfs_found			bit (1) init ("0"b);
dcl  expand_ptr_sw			bit (1) init ("0"b);
dcl  expand_sw			bit (1) init ("0"b);   /* "1"b = expand syserr binary data */
dcl  first			fixed bin (18);
dcl  first_erf			bit (1) init ("0"b);
dcl  first_value_set		bit (1) init ("0"b);
dcl  forward_search			bit (1) init ("0"b);
dcl  frame_entry			bit (1) init ("0"b);
dcl  1 hard_ptr_space		like hardcore_cur;
dcl  hdr_printed			bit (1) init ("0"b);
dcl  ignore			fixed bin;
dcl  i				fixed bin;           /* for iterations */
dcl  last				fixed bin init (0);
dcl  last_erf			bit (1) init ("0"b);
dcl  list_erfs			bit (1) init ("0"b);
dcl  ll				fixed bin init (0);
dcl  ln				fixed bin init (0);
dcl  match_str			char (256) var init ("");	/* the syserr string to match on */
dcl  nargs			fixed bin;
dcl  namep			ptr;
dcl  next_erf			bit (1) init ("0"b);
dcl  offset			fixed bin (18);
dcl  only_full_ams			bit (1);
dcl  page				fixed bin (24);
dcl  prev_erf			bit (1) init ("0"b);
dcl  print_all_trans		bit (1) init ("0"b);
dcl  pts				fixed bin (24);
dcl  range			fixed bin (18);
dcl  range_value_set		bit (1) init ("0"b);
dcl  raw_syserr_data		bit (1) init ("0"b); /* "1"b = print it in octal */
dcl  real_address			fixed bin (35);
dcl  ret_str			char (168) var init ("");
dcl  rv_lth			fixed bin (21);
dcl  rv_ptr			ptr;
dcl  sci_ptr			pointer;		/* assorted info pointers */
dcl  segln			fixed bin (35) init (0);
dcl  search_string			char (12);
dcl  segname			char(32);
dcl  segno			fixed bin;
dcl  segno_sw			bit(1);
dcl  slog_code			fixed bin init (3);  /* the syserr_code, default to =< 3 */
dcl  start_configp			ptr init (null);
dcl  struct_sw			bit (1) init ("0"b);
dcl  t_amu_info_ptr			ptr;
dcl  t_pr_name			char (4);
dcl  t_seg_name			char (32);
dcl  temp_ptr			ptr;
dcl  temp_str			char (24) var init ("");
dcl  tname			char(256) var;
dcl  vs				char (99) varying;
dcl  why_erf			bit (1) init ("0"b);
dcl  word				fixed bin (24);

%page;

/* Based */

dcl  arg				char (argl) based (argp);
dcl  rs				char (rv_lth) varying based (rv_ptr);

/* Constants */

/* Builtins */

dcl  (addr, addrel, baseptr, char, 
      convert, divide, fixed, hbound,
      ltrim, null, pointer, reverse,
      rtrim, search, substr, index,
      mod, ptr)			builtin;

/* Conditions */

%page;

/* External Entries */

dcl amu_$current_deadproc		entry(ptr);
dcl amu_$definition_get_prn		entry (ptr, char (*), ptr, fixed bin (35));
dcl amu_$definition_set_prn		entry (ptr, char (*), fixed bin, fixed bin (18), fixed bin (35));
dcl amu_$do_translation_hunt_ptr	entry (ptr, ptr, ptr, fixed bin (35));
dcl amu_$fdump_mgr_cur_erf		entry (ptr);
dcl amu_$fdump_mpt_current_process	entry (ptr);
dcl amu_$get_name_no_comp		entry (ptr, ptr) returns (char (*));
dcl amu_$get_name			entry (ptr, ptr) returns (char (*));
dcl amu_$get_va_args		entry (ptr, ptr, ptr, fixed bin, ptr);
dcl amu_$get_va_args_given_start	entry (ptr, ptr, ptr, fixed bin, fixed bin, ptr);
dcl amu_$hardcore_info_set_cur_ptrs	entry (ptr, ptr);
dcl amu_$replace_trans		entry (ptr, char (168), char (32), fixed bin, fixed bin (35));
dcl amu_$resolve_virtual_addr		entry (ptr, ptr, char(*), fixed bin, fixed bin(18), fixed bin (35));
dcl amu_$search_seg			entry (ptr, ptr, fixed bin(21), fixed bin, fixed bin (18), fixed bin (18), 
				char (12), fixed bin (35));
dcl amu_$terminate_translation	entry (pointer);
dcl azm_display_am_			entry (ptr, ptr, bit (1), bit (1), bit (1), bit (1), fixed bin, fixed bin, 
				fixed bin (35));
dcl azm_dump_mem_$mem_config		entry (ptr, fixed bin (35));
dcl azm_find_mem_box_		entry (ptr, fixed bin (35), fixed bin, fixed bin (18), fixed bin (35));
dcl azm_verify_dump_ams_		entry (ptr, bit (1), bit (1), fixed bin (35));
dcl azm_verify_dump_ams_$af		entry (ptr, bit (1), bit (1), fixed bin (35)) returns (bit (1));
dcl cv_oct_check_			entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl expand_pathname_		entry (char (*), char (*), char (*), fixed bin (35));
dcl hcs_$initiate			entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl (
     ioa_,
     ioa_$rsnnl
     )				entry options (variable);
dcl ssu_$abort_line			entry options (variable);
dcl ssu_$abort_subsystem		entry options (variable);
dcl ssu_$add_request_table		entry (ptr, ptr, fixed bin, fixed bin (35));
dcl ssu_$arg_count			entry (pointer, fixed bin, bit (1) aligned);
dcl ssu_$arg_ptr			entry (pointer, fixed bin, pointer, fixed bin (21));
dcl ssu_$get_abbrev_info		entry (ptr, ptr, ptr, bit(1) aligned);
dcl ssu_$get_invocation_count		entry (ptr, fixed bin, fixed bin);
dcl ssu_$get_subsystem_name		entry (ptr) returns(char(32));
dcl ssu_$get_subsystem_version	entry (ptr) returns(char(32));
dcl ssu_$return_arg			entry (ptr, fixed bin, bit (1) aligned, ptr, fixed bin (21));

/* error codes */

dcl amu_et_$no_va_specified		fixed bin (35) external static;
dcl error_table_$badopt		fixed bin (35) external static;
dcl error_table_$wrong_no_of_args	fixed bin (35) external static;
dcl error_table_$segknown		fixed bin (35) external static;
dcl error_table_$noarg		fixed bin (35) external static;
dcl error_table_$bad_arg		fixed bin (35) external static;
dcl error_table_$inconsistent		fixed bin (35) external static;
dcl error_table_$too_many_args	fixed bin (35) external static;
%page;
/*****************************************************************************/

azm_requests_2_$absolute_address:
     entry (P_sci_ptr, P_azm_info_ptr);

dcl sdw_add fixed bin(26);
dcl relative_offset fixed bin(26);
dcl  bd_sdw fixed bin(24);

    call set_up;
    if ^trans_selected () then call ssu_$abort_line (sci_ptr, 0, "No dump selected.");

    if nargs = 0 then call ssu_$abort_line (sci_ptr, error_table_$noarg, "^/Usage: absaddr virtual-address");

    if nargs > 2 then call ssu_$abort_line (sci_ptr, error_table_$too_many_args, "^/Usage: absaddr virtual-address");

    /* process arguments */
    /* init va_args */

    va_args_ptr = addr(va_args);
    va.segno, va.offset, va.offset_modifier,
       va.va_position, va.ecode  = 0;
    va.va_switches = "0"b;
    va.error_msg, va.va_string = "";
    va.resolved_va = null();

    call ssu_$arg_ptr (sci_ptr, 1, argp, argl);
    call amu_$get_va_args(sci_ptr, amu_info_ptr, argp, nargs, va_args_ptr);
    if va.ecode ^= 0 | va.error_msg ^="" then do;
       call ssu_$abort_line (sci_ptr, va.ecode, "^a", va.error_msg);
       end;
 
    va.range_idx = 0;  /* A range is not valid for mc request */

    do argno = 1 to nargs;		/* looping to catch any invalid args */
       call ssu_$arg_ptr (sci_ptr, argno, argp, argl); 
       if ^va_arg(argno) then do;
          if substr(arg,1,1) = "-" then code = error_table_$badopt;
	else code = error_table_$bad_arg;
          call ssu_$abort_line(sci_ptr, code, " ^a", arg);
          end;
       end;   /* arg processing */

    segno = va.segno;
    first = va.offset;
    vs = "";
    hardcore_cur_ptr = addr (hard_ptr_space);
    call amu_$hardcore_info_set_cur_ptrs (amu_info_ptr, hardcore_cur_ptr);
    if hardcore_cur.sstp = null () then call ssu_$abort_line (sci_ptr, 0, "No sst in the fdump.");

    sstp = hardcore_cur.sstp;
				/* get a pointer to the SDW for the segment */
    call amu_$do_translation_hunt_ptr (amu_info_ptr, pointer (baseptr (hardcore_info.dseg), (2 * va.segno)), sdwp, code);
    if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Cannot get pointer to SDW for ^o., va.segno");
        
    if index (amu_$get_name (amu_info_ptr, addrel (baseptr (va.segno), va.offset)), "OUT-OF-BOUNDS") ^= 0 then
       go to ABSADR_OOSB;
    if sdw.unpaged /* see if the segment is paged */ then
       if sdw.df /* segment fault? */ then do;	/* nope, got the address */
	real_address = fixed (sdw.add, 24) + first;
	if af_sw then do;
	   call ioa_$rsnnl ("^8o", vs, ignore, real_address);
	   return;
	   end;
	call azm_find_mem_box_ (amu_info_ptr, real_address, segno, first, code);
	return;
	end;
       else do;				/* segment not active */
	call ioa_$rsnnl ("Segment ^a (^o) is unpaged and faulted.", vs, ignore,
	     amu_$get_name (amu_info_ptr, addrel (baseptr (va.segno), va.offset)), va.segno);

	if af_sw then do;
ABSADR_ABT_AF:
	   call ssu_$abort_line (sci_ptr, 0, "^a", vs);
	   end;
	go to ABS_ADDR_RET;
	end;

    upt_ptr = hardcore_cur.uptp;
    sdw_add = fixed(sdw.add,26);
    bd_sdw = fixed (sdw.bound, 24) * 16;
    pts = divide (bd_sdw, 1024, 18);
    word = mod (first, 1024);			/* get word within page */
    page = divide (first, 1024, 17, 0);		/* get PTW index */
						/* get a pointer to page table */
    if upt_ptr = null() then do;
       ptp = ptr (hardcore_cur.sstp, fixed (sdw.add, 24) - fixed (sst.ptwbase, 18));
       astep = addrel (ptp, -sst.astsize);		/* get ptr to ASTE */
       pts = sst.pts (fixed (aste.ptsi, 3));
       if page >= pts then do;
ABSADR_OOSB:
          call ioa_$rsnnl ("Offset ^o not found in segment ^o.", vs, ignore, first, segno);
          if af_sw then go to ABSADR_ABT_AF;
          go to ABS_ADDR_RET;
          end;
       else ptp = addrel (ptp, page);		/* get ptr to PTW */
       end;
         
    else if (sdw_add > upt.upt_absloc & sdw_add < upt.upt_last_loc) then do;
       relative_offset = sdw_add - upt.upt_absloc;
       ptp = addrel(upt_ptr, relative_offset);  
       end;

    else if (sdw_add > upt.iupt_absloc & sdw_add < upt.iupt_last_loc) then do;
       relative_offset = sdw_add - upt.iupt_absloc;
       ptp = addrel(upt_ptr, relative_offset);  
       end;

    else do;
       relative_offset = sdw_add - upt.sst_absloc;
       ptp = addrel(sstp, relative_offset);        
       end;

    if page > 0 then ptp = addrel (ptp, page);		/* get ptr to PTW */

    if ptw.df /* is page in memory? */ then do;	/* yes, it's there */
       real_address = (fixed (ptw.add, 18) * 64) + word;
       if af_sw then
	call ioa_$rsnnl ("^8o", rs, ignore, real_address);  
       else do;
	call azm_find_mem_box_ (amu_info_ptr, real_address, segno, first, code);
	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "^/Locating memory for ^o, real address ^8o.",
	    pointer (baseptr (segno), first), real_address);
	end;
       end;

    else do;
       call ioa_$rsnnl ("Page #^o of ^a (seg #^o) is not in main memory.", vs, ignore, page,
	  amu_$get_name (amu_info_ptr, addrel (baseptr (segno), first)), segno);
       if af_sw then go to ABSADR_ABT_AF;
       end;

ABS_ADDR_RET:

    if ^af_sw then call ioa_ ("^a", vs);
    return;
%page;
/*****************************************************************************/

azm_requests_2_$add_request_table:
     entry (P_sci_ptr, P_azm_info_ptr);

	call set_up;

          if nargs = 0 then call ssu_$abort_line(sci_ptr, error_table_$noarg, "^/Usage: arqt PATHNAME");
	if nargs ^= 1 then call ssu_$abort_line (sci_ptr, error_table_$too_many_args, "Only one pathname allowed.");

	call ssu_$arg_ptr (sci_ptr, 1, argp, argl);

	call expand_pathname_ (arg, dir_name, t_seg_name, code);

	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Expanding pathname.");
	call hcs_$initiate (dir_name, t_seg_name, "", 0, 0, temp_ptr, code);
	if code ^= 0 then
	     if code ^= error_table_$segknown then 
	        call ssu_$abort_line (sci_ptr, code, "Initiating ""^a"".", rtrim (dir_name) || ">" || rtrim (t_seg_name));

	call ssu_$add_request_table (sci_ptr, temp_ptr, 9999, code);
	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Adding request table.");

	return;

%page;
/*****************************************************************************/

azm_requests_2_$associative_memory:
     entry (P_sci_ptr, P_azm_info_ptr);

	call set_up;
	if ^trans_selected () then call ssu_$abort_line (sci_ptr, 0, "No dump selected.");

          code = 0;
	am_from_prds = "0"b;
	do_sdws, do_ptws = "1"b;			/* default to both */
	amsdw_segno, amptw_pageno = -1;		/* default to all */
	only_full_ams = "1"b;

	do argno = 1 to nargs;
	     call ssu_$arg_ptr (sci_ptr, argno, argp, argl);
	     if arg = "-dump" then am_from_prds = "0"b;
	     else if arg = "-prds" then am_from_prds = "1"b;
	     else if arg = "-all" | arg = "-a" then only_full_ams = "0"b;
	     else if arg = "-ptw" then do;
		do_ptws = "1"b;
		do_sdws = "0"b;
		end;

	     else if arg = "-sdw" then do;
		do_sdws = "1"b;
		do_ptws = "0"b;
		end;

	     else if arg = "-segno" then do;
		call get_next_arg("SEGNO", argp, argl);
		amsdw_segno = cv_oct_check_ (arg, code);
		if code ^= 0 then call ssu_$abort_line (sci_ptr, error_table_$bad_arg,
                                       "-segno requires an OCTAL value ""^a"".", arg);
		end;

	     else if arg = "-pageno" then do;
		call get_next_arg("PAGENO", argp, argl);
		amptw_pageno = cv_oct_check_ (arg, code);
		if code ^= 0 then call ssu_$abort_line (sci_ptr, error_table_$bad_arg,
		                  "-pageno requires an OCTAL value ""^a"".", arg);
		end;

	     else call ssu_$abort_line (sci_ptr, error_table_$badopt, "Usage: am {-ctl_args}");
	end;

	if ^do_ptws & amptw_pageno ^= -1 then call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
		"^/Cannot select a pageno without displaying PTWAM.");

	if amptw_pageno ^= -1 & amsdw_segno = -1 then do_sdws = "0"b;

	call azm_display_am_ (sci_ptr, amu_info_ptr, am_from_prds, do_sdws, do_ptws, only_full_ams, amsdw_segno, amptw_pageno,
	     code);

	if code ^= 0 then  call ssu_$abort_line (sci_ptr, code, "");

	return;
%page;
/*****************************************************************************/

azm_requests_2_$clock:
     entry (P_sci_ptr, P_azm_info_ptr);

sci_ptr = P_sci_ptr;
call ssu_$abort_line (sci_ptr, 0, "This request has not been implemented yet.");

return;
%page;
/*****************************************************************************/

azm_requests_2_$delete_request_table:
     entry (P_sci_ptr, P_azm_info_ptr);

/* this entrypoint is here only until ssu_ has its own standard delete_request_table request. 08/09/83 B. Braun */

sci_ptr = P_sci_ptr;
call ssu_$abort_line (sci_ptr, 0, "This request has not been implemented yet.");

return;
%page;
/*****************************************************************************/

azm_requests_2_$error_code:
     entry (P_sci_ptr, P_azm_info_ptr);

sci_ptr = P_sci_ptr;
call ssu_$abort_line (sci_ptr, 0, "This request has not been implemented yet.");

return;
%page;
/*****************************************************************************/

azm_requests_2_$list_request_table:
     entry (P_sci_ptr, P_azm_info_ptr);

/* this entrypoint is here only until ssu_ has its own standard list_request_table request. 08/09/83 B. Braun */

sci_ptr = P_sci_ptr;
call ssu_$abort_line (sci_ptr, 0, "This request has not been implemented yet.");

return;
%page;
/*****************************************************************************/

azm_requests_2_$name:
     entry (P_sci_ptr, P_azm_info_ptr);

    segno_sw = "0"b;
    goto SEGMENT_COMMON;

/*****************************************************************************/

azm_requests_2_$number:
     entry (P_sci_ptr, P_azm_info_ptr);

    segno_sw = "1"b;

SEGMENT_COMMON:
	
    call set_up;
    if ^trans_selected () then call ssu_$abort_line (sci_ptr, 0, "No dump selected.");
    code = 0;

    if nargs = 0 then code = error_table_$noarg;
    else if nargs > 2 then code = error_table_$too_many_args;
    if code ^= 0 then 
       call ssu_$abort_line (sci_ptr, code, "^/Usage: ^[segno <name>^;name <segno>^] | <virtual-address>", segno_sw);

    /* init va_args */

    va_args_ptr = addr(va_args);
    va.range = 1;
    va.segno, va.offset, va.offset_modifier,
       va.va_position, va.ecode  = 0;
    va.va_switches = "0"b;
    va.error_msg, va.va_string = "";
    va.resolved_va = null();

    call ssu_$arg_ptr (sci_ptr, 1, argp, argl);
    call amu_$get_va_args(sci_ptr, amu_info_ptr, argp, nargs, va_args_ptr);
    if va.ecode = amu_et_$no_va_specified then call ssu_$abort_line (sci_ptr, 0,
       "Segment ^[number^;name^] is not known^[ ""^a""^;^s^].", segno_sw, (va.va_string ^= ""), va.va_string);
    if va.ecode ^= 0 | va.error_msg ^="" then do;
       call ssu_$abort_line (sci_ptr, va.ecode, "^[^a^s^;^s^a^]", va.error_msg = "", va.va_string, va.error_msg);
       end;
  
    do argno = 1 to nargs;   /* check for illegal args */
       call ssu_$arg_ptr (sci_ptr, argno, argp, argl);
       if ^va_arg(argno) then do;    /* must be an error */
          if substr(arg,1,1) = "-" then code = error_table_$badopt;
	else code = error_table_$bad_arg;
	call ssu_$abort_line(sci_ptr, code, " ^a", arg);
	end;
       end;  /* processing loop */

    if segno_sw then do;
       if ^af_sw then call ioa_ ("^a = Segno ^o|^o.", va.va_string, va.segno, va.offset);
       else call ioa_$rsnnl ("^o", rs, ignore, va.segno);  /* dont return offset			*/
       end;

    else do;   /* called by name request */
       namep = addrel (baseptr (va.segno), va.offset);
       if ^af_sw then call ioa_ ("^p = ^a", namep, amu_$get_name (amu_info_ptr, namep));
       else do;  /* active request case */
	tname = amu_$get_name_no_comp (amu_info_ptr, baseptr (va.segno));
	i =  index(tname, ">");
	if i > 0 then tname =  reverse(substr(reverse(tname), 1, i-1));
	call ioa_$rsnnl ("^a", rs, ignore, rtrim(tname));
          end;
       end;

    return;
%page;
/*****************************************************************************/

azm_requests_2_$quit:
     entry (P_sci_ptr, P_azm_info_ptr);	

/* Leave the subsystem, and clean up. All cleaning up is actually done by the
   command, so this procedure does hardly anything at all.
*/

	call set_up;				

         /* start with the last in the chain  amu_info_chain should be the last created */

	if amu_info_ptr ^= null then do;
	t_amu_info_ptr = amu_info_ptr;

	/* now find the last amu_info in chain */

	do while (t_amu_info_ptr -> amu_info.chain.next ^= null);
	     t_amu_info_ptr = t_amu_info_ptr -> amu_info.chain.next;
	end;
	amu_info_ptr = t_amu_info_ptr;
	do while (amu_info_ptr ^= null);	          /* amu_$terminate_translation should reset the amu_info_chain */
	     call amu_$terminate_translation (amu_info_ptr);       /* and set amu_info_ptr to that value */
	end;
     end;
	azm_info.aip = amu_info_ptr;
	call ssu_$abort_subsystem (sci_ptr, 0);

	return;					/* just in case */
%page;
/*****************************************************************************/

azm_requests_2_$replace:
     entry (P_sci_ptr, P_azm_info_ptr);

	call set_up();
	if ^trans_selected () then call ssu_$abort_line (sci_ptr, 0, "No dump selected.");

	if nargs ^= 2 then 
	     call ssu_$abort_line (sci_ptr, error_table_$wrong_no_of_args,"^/Usage: rp segno/name PATH.");

	dir_name = " ";
	segname ="";
	t_seg_name = " ";
          code = 0;
	argno = 2;				/* process PATH first			*/
	call ssu_$arg_ptr (sci_ptr, argno, argp, argl);
	call expand_pathname_ (arg, dir_name, t_seg_name, code);
	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Expanding pathname. ^a", arg);

	argno = 1;
	call ssu_$arg_ptr (sci_ptr, argno, argp, argl);
	segno = cv_oct_check_ (arg, code);
	if code ^= 0 then do;			/* Assume user specified seg name not number	*/
	   segname = arg;
						/* translate segname to a segno 		*/
   	   call amu_$resolve_virtual_addr (sci_ptr, amu_info_ptr, segname, segno, offset, code);
	   if code ^= 0 then call ssu_$abort_line(sci_ptr, code, " ^a", segname);
	   end;

          if index(t_seg_name, "=") > 0 then do;
	   if segname = "" then t_seg_name = convert(t_seg_name, segno);
	   else t_seg_name = segname;
	   end;

	call amu_$replace_trans (amu_info_ptr, dir_name, t_seg_name, segno, code);
	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "^/dir: ^a ^/entry: ^a", dir_name, t_seg_name);

	return;
%page;
/*****************************************************************************/

azm_requests_2_$scus:
     entry (P_sci_ptr, P_azm_info_ptr);

	call set_up;
	if ^trans_selected () then call ssu_$abort_line (sci_ptr, 0, "No dump selected.");

	code = 0;
	if nargs > 0 then call ssu_$abort_line (sci_ptr, error_table_$too_many_args, "^/Usage: scus");

	call azm_dump_mem_$mem_config (amu_info_ptr, code);
	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "");

	return;
%page;
/*****************************************************************************/

azm_requests_2_$search:
     entry (P_sci_ptr, P_azm_info_ptr);

    call set_up;
    if ^trans_selected () then call ssu_$abort_line (sci_ptr, 0, "No dump selected.");

    if nargs <= 1 then
       call ssu_$abort_line (sci_ptr, error_table_$noarg, "^/Usage: search <virtual-addr> {range}  <SEARCH_STR>");
    else if nargs > 4 then 
       call ssu_$abort_line (sci_ptr, error_table_$too_many_args, "^/Usage: search <virtual-addr> {range}  <SEARCH_STR>");

    /* init va_args */

    va_args_ptr = addr(va_args);
    va.range = 0; /* this sets the default to the whole segment */
    va.segno, va.offset, va.offset_modifier,
       va.va_position, va.ecode  = 0;
    va.va_switches = "0"b;
    va.error_msg, va.va_string = "";
    va.resolved_va = null();

    call ssu_$arg_ptr (sci_ptr, 1, argp, argl);
    if nargs = 2 then check_args = 1;			/* NO range specified, don't check for it	*/
    else check_args = nargs-1;			/* Don't pass the search_string, it confuses get_va_args */

    call amu_$get_va_args(sci_ptr, amu_info_ptr, argp, check_args, va_args_ptr);
    if va.ecode ^= 0 | va.error_msg ^="" then do;
       call ssu_$abort_line (sci_ptr, va.ecode, "^a", va.error_msg);
       end;
  
    argno = 1;
    code = 0;
    search_string = "";

    do argno = argno to nargs;
       call ssu_$arg_ptr (sci_ptr, argno, argp, argl);
       if ^va_arg(argno) then do;    /* assume its the search string */
	if argl ^= 12 then call ssu_$abort_line (sci_ptr, 0, "SEARCH_STRING must be 12 characters.");
	search_string = arg;
	end;
       end;  /* processing loop */

    code = search (search_string, "0123457");
    if code = 0 then
       call ssu_$abort_line (sci_ptr, 0, "SEARCH_STRING must contain an octal value to search for ""^a"".", search_string);

    code = search (search_string, "89");
    if code ^= 0 then call ssu_$abort_line (ssu_$abort_line, 0,
       "SEARCH_STRING cannot have decimal number ""^a"".", substr (search_string, code, 1));

    code = search (search_string, "!#$%&'()=~^|\`{[{[_+;*:]}<,>.?/ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz");
    if code ^= 0 then call ssu_$abort_line (sci_ptr, 0, "Invalid mask ""^a"".", substr (search_string, code, 1));

    segno = va.segno;
    first = va.offset;
    range = va.range;
    call amu_$search_seg(amu_info_ptr, rv_ptr, rv_lth, segno, first, range, search_string, code);
    if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "^a", va.va_string);
    return;
%page;
/*****************************************************************************/

azm_requests_2_$self_identify:
     entry (P_sci_ptr, P_azm_info_ptr);

dcl id_str			char(80) varying;
dcl abbrev_enabled			bit(1) aligned;
dcl subsys_level			fixed bin;

	call set_up;

	id_str = rtrim (ssu_$get_subsystem_name (sci_ptr));
	id_str = id_str || " ";

          id_str = id_str || rtrim(ssu_$get_subsystem_version(sci_ptr));

	call ssu_$get_abbrev_info (sci_ptr, (null ()), (null()), abbrev_enabled);
	if abbrev_enabled then
	     id_str = id_str || " (abbrev)";

	call ssu_$get_invocation_count (sci_ptr, subsys_level, (0));
	if subsys_level ^= 1 then do;
	     id_str = id_str || " (level ";
	     id_str = id_str || ltrim (char (subsys_level));
	     id_str = id_str || ")";
	     end;

	if ^trans_selected () then id_str = id_str || " No dump selected.";
	call ioa_ ("^a", id_str);

	if amu_info_ptr ^= null () then do;
	   if amu_info.type = FDUMP_PROCESS_TYPE then do;
	      call amu_$fdump_mgr_cur_erf (amu_info_ptr);
	      call amu_$fdump_mpt_current_process (amu_info_ptr);
	      end;
	   else if amu_info.type = SAVED_PROC_TYPE then call amu_$current_deadproc (amu_info_ptr);
	   end;

	return;
%page;
/*****************************************************************************/

azm_requests_2_$set:
     entry (P_sci_ptr, P_azm_info_ptr);

	call set_up;
	if ^trans_selected () then call ssu_$abort_line (sci_ptr, 0, "No dump selected.");

	if nargs <= 1 then call ssu_$abort_line (sci_ptr, error_table_$noarg, "^/Usage: set PTR_N virtual-addr");

          /* first get the pointer name */

          argno = 1;
	call ssu_$arg_ptr (sci_ptr, argno, argp, argl);
	t_pr_name = arg;

          /* next get the virtual address */


    /* init va_args */

    va_args_ptr = addr(va_args);
    va.range = 1;
    va.segno, va.offset, va.offset_modifier,
       va.va_position, va.ecode  = 0;
    va.va_switches = "0"b;
    va.error_msg, va.va_string = "";
    va.resolved_va = null();

    call ssu_$arg_ptr (sci_ptr, 1, argp, argl);
    call amu_$get_va_args_given_start (sci_ptr, amu_info_ptr, argp, 2, nargs, va_args_ptr);
    if va.ecode ^= 0 | va.error_msg ^="" then do;
       call ssu_$abort_line (sci_ptr, va.ecode, "^a", va.error_msg);
       end;
  
    va.range_idx = 0;  /* ranges not allowed for this request */

    do argno = 2 to nargs;   /* check for illegal args */
       call ssu_$arg_ptr (sci_ptr, argno, argp, argl);
       if ^va_arg(argno) then do;    /* must be an error */
          if substr(arg,1,1) = "-" then code = error_table_$badopt;
	else code = error_table_$bad_arg;
	call ssu_$abort_line(sci_ptr, code, " ^a", arg);
	end;
       end;  /* processing loop */

    segno = va.segno;
    first = va.offset;
    call amu_$definition_set_prn (amu_info_ptr, t_pr_name, segno, first, code);

    if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Setting prN. ^a", t_pr_name);
    return;
%page;
/*****************************************************************************/

azm_requests_2_$value:
     entry (P_sci_ptr, P_azm_info_ptr);

	call set_up;
	if ^trans_selected () then call ssu_$abort_line (sci_ptr, 0, "No dump selected.");

          if nargs = 0 then call ssu_$abort_line (sci_ptr, error_table_$noarg, "^/Usage: value TEMP_PTR_NAME | -all.");

	do argno = 1 to nargs;
	     call ssu_$arg_ptr (sci_ptr, argno, argp, argl);
	     if arg = "-all" | arg = "-a" then do;
		do i = 0 to hbound (t_ptrs, 1);
		     call ioa_ ("^a = ^p", t_ptrs.name (i), t_ptrs.val (i));
		end;
		return;
		end;

	     t_pr_name = arg;
	     call amu_$definition_get_prn (amu_info_ptr, t_pr_name, temp_ptr, code);
	     if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "");
	     else call ioa_ ("^a = ^p", arg, temp_ptr);
	end;

	return;

%page;
/*****************************************************************************/

azm_requests_2_$verify_am:
     entry (P_sci_ptr, P_azm_info_ptr);

	call set_up;
	if ^trans_selected () then call ssu_$abort_line (sci_ptr, 0, "No dump selected");

	do_sdws, do_ptws = "0"b;

	if nargs = 0 then do;
	     do_sdws, do_ptws = "1"b;
	     go to verify_ams;
	     end;

	if nargs > 1 then call ssu_$abort_line (sci_ptr, error_table_$too_many_args, "^/Usage: vfam {-sdw | -ptw}");

	argno = 1;
	call ssu_$arg_ptr (sci_ptr, argno, argp, argl);
	if arg = "-sdw" then do_sdws = "1"b;
	else if arg = "-ptw" then do_ptws = "1"b;
	else call ssu_$abort_line (sci_ptr, error_table_$bad_arg, """^a"".", arg);

verify_ams:
	if ^af_sw then
	     call azm_verify_dump_ams_ (amu_info_ptr, do_sdws, do_ptws, code);
	else do;
	     if azm_verify_dump_ams_$af (amu_info_ptr, do_sdws, do_ptws, code) then
		rs = "true";
	     else rs = "false";
	     end;

	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "");
	return;
%page;
get_next_arg: proc(Arg_expected, ap1, al1);

/*  This guy gets the next argument from the argument string, complaining if it's not there  */

dcl Arg_expected			char(*);
dcl (ap1				ptr,
     al1				fixed bin(21));
	    
	if (argno + 1) > nargs then 
	     call ssu_$abort_line(sci_ptr, error_table_$noarg, "A ^a expected after ^a.", Arg_expected, arg);

	argno = argno + 1;
	call ssu_$arg_ptr (sci_ptr, argno, ap1, al1);
     
end get_next_arg;
%page;
set_up:
     proc;

	sci_ptr = P_sci_ptr;
	azm_info_ptr = P_azm_info_ptr;
	amu_info_ptr = azm_info.aip;
	rv_ptr = null();
	rv_lth = 0;
	axp, configp, dsegp, start_configp = null;
	axstring, match_str, ret_str, temp_str = "";
	brief_sw, cur_erf, del_cur_erf, del_erf, dir_sw, erfs_found,
	     expand_ptr_sw, expand_sw, first_erf, first_value_set,
	     forward_search, frame_entry, hdr_printed, last_erf, list_erfs, 
	     next_erf, prev_erf, print_all_trans, range_value_set,
	     raw_syserr_data, struct_sw, why_erf = "0"b;
	last, ll, ln, segln = 0;
	slog_code = 3;
	call ssu_$return_arg (sci_ptr, nargs, af_sw, rv_ptr, rv_lth);
	if ^af_sw then call ssu_$arg_count (sci_ptr, nargs, af_sw);

     end set_up;
%page;
trans_selected:
     proc () returns (bit (1));

	if amu_info_ptr = null () then return ("0"b);
	return ("1"b);
     end trans_selected;
%page;
va_arg:  proc(a_pos) returns(bit(1));
         
dcl a_pos fixed bin;
dcl i fixed bin;
dcl arg_positions (3) aligned based (Ppos);
dcl Ppos ptr;

    Ppos = addr(va.va_position);
    do i = 1 to hbound(arg_positions,1);
       if a_pos = arg_positions(i) then return("1"b);
       end;
    
    return("0"b);
end va_arg;
%page;
%include amu_definitions;
%page;
%include amu_hardcore_info;
%page;
%include amu_info;
%page;
%include aste;
%page;
%include azm_info;
%page;
%include sdw;
%page;
%include ptw;
%page;
%include sst;
%page;
%include azm_va_args;
%page;
%include unpaged_page_tables;

     end azm_requests_2_;
