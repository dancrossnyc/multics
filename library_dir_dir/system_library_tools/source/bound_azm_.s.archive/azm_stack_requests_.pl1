/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-12-16,Parisek), approve(87-07-09,MCR7746),
     audit(87-07-16,Fawcett), install(87-07-28,MR12.1-1049):
     ssu_$print_message is called instead of ssu_$abort_line if a stack segment
     cannot be located, therefore execution may resume during active requests
     (phx19331).
                                                   END HISTORY COMMENTS */


azm_stack_requests_: proc ();

	return;					/* not an entrypoint */

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */


/* Assorted requests for analyze_multics. */


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* 0) Created: 06/25/83 by B. Braun from the division of the original azm_misc_requests_	*/
	/* into smaller modules. This includes the azm requests stack, frame, why.		*/
	/* 1) Modified Sept 1984 by R. A. Fawcett to add azm_stack_requests_$locks (This should be some where else??). */
	/* 2) Modified Sept 1984 by R. A. Fawcett to add azm_stack_requests_$search_mcs. */
	/* 3) Modified Jan 1985 by B. Braun to change the why request message when it cannot find */
	/*    the cause of the failure.						*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	
dcl  (
     P_sci_ptr pointer,
     P_azm_info_ptr pointer
     ) parameter;

/* Automatic */

dcl  af_sw bit (1) aligned;
dcl  arg_sw bit (1);
dcl  argl fixed bin (21);
dcl  argno fixed bin;
dcl  argp pointer;
dcl  brief_sw bit (1) init ("0"b);
dcl  code fixed bin (35);
dcl  count fixed bin;
dcl  first				fixed bin(18);
dcl  for_sw bit (1);
dcl  force_sw bit (1);
dcl  fwd_sw bit (1);
dcl  long_sw bit (1);
dcl  lock_index fixed bin (17);
dcl  1 lock_info (0:6),
       2 lseg char (32) init ("tc_data", "sst_seg", "sst_seg", "scs", "tty_buf", "tty_buf","disk_seg"),
       2 lsymb char (32) init ("apt_lock", "ptl", "astl", "connect_lock", "slock", "timer_lock","lock"),
       2 lock_word bit (36) init ("0"b, "0"b, "0"b, "0"b, "0"b, "0"b,"0"b);
dcl  lock_name char (32);
dcl  nargs fixed bin;
dcl  ret_str char (168) var init ("");
dcl  rv_lth fixed bin (21);
dcl  rv_ptr ptr;
dcl  sci_ptr pointer;				/* assorted info pointers */
dcl  segno fixed bin;
dcl  set_sw bit (1);
dcl  struct_sw bit (1) init ("0"b);
dcl  temp_ptr			ptr;
dcl  val_arg fixed bin;
%page;

/* Based */

dcl  arg char (argl) based (argp);

/* Constants */

/* Builtins */

dcl  (addr, baseptr, hbound, pointer, null, substr) builtin;

/* Conditions */
%page;

/* External Entries */

dcl  amu_$get_va_args		entry (ptr, ptr, ptr, fixed bin, ptr);
dcl  azm_stack_trace_		entry (char(*), ptr, ptr, ptr, bit (1), bit (1), bit (1), bit (1), fixed bin, fixed bin (35));
dcl  azm_why_$find_bad_guy		entry (ptr, ptr, fixed bin (35));
dcl  azm_why_$mcs 	entry (ptr, ptr, fixed bin(35));
dcl  azm_why_$print_locks entry (ptr, ptr, char(*), bit(1), fixed bin(35));
dcl  cv_dec_check_			entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  ioa_				entry options (variable);
dcl  ssu_$abort_line		entry options (variable);
dcl  ssu_$arg_count			entry (pointer, fixed bin, bit (1) aligned);
dcl  ssu_$arg_ptr			entry (pointer, fixed bin, pointer, fixed bin (21));
dcl ssu_$print_message		entry() options(variable);
dcl  ssu_$return_arg		entry (ptr, fixed bin, bit (1) aligned, ptr, fixed bin (21));

/* error codes */

dcl  amu_et_$no_valid_stacks		fixed bin (35) external static;
dcl  error_table_$action_not_performed  fixed bin(35) ext static;
dcl  error_table_$bad_arg		fixed bin (35) external static;
dcl  error_table_$badopt		fixed bin (35) external static;
dcl  error_table_$noarg		fixed bin (35) external static;
dcl  error_table_$too_many_args	fixed bin(35) ext static;
%page;
azm_stack_requests_$frame:
     entry (P_sci_ptr, P_azm_info_ptr);

sci_ptr = P_sci_ptr;
call ssu_$abort_line (sci_ptr, 0, "This request has not been implemented yet.");

%page;
azm_stack_requests_$stack:
     entry (P_sci_ptr, P_azm_info_ptr);

    call set_up;
    if ^trans_selected () then call ssu_$abort_line (sci_ptr, 0, "No dump selected.");

    if nargs = 0 then call ssu_$abort_line (sci_ptr, error_table_$noarg, "^/Usage: stack <virtual-address> {-ctl_args}.");

    /* init va_args */

    va_args_ptr = addr(va_args);
    va.range = 0;
    va.segno, va.offset, va.offset_modifier,
       va.va_position, va.ecode  = 0;
    va.va_switches = "0"b;
    va.error_msg, va.va_string = "";
    va.resolved_va = null();

    call ssu_$arg_ptr (sci_ptr, 1, argp, argl);
    call amu_$get_va_args(sci_ptr, amu_info_ptr, argp, nargs, va_args_ptr);
    if va.ecode ^= 0 | va.error_msg ^="" then do;
       call ssu_$abort_line (sci_ptr, va.ecode, "^a", va.error_msg);
       end;
  
    fwd_sw, for_sw, arg_sw, long_sw, force_sw = "0"b;
    count, val_arg = 0;
    va.range_idx = 0;  /* range is not allowed for stack request */

    do argno = 1 to nargs;
       call ssu_$arg_ptr (sci_ptr, argno, argp, argl);
       if arg = "-lg" | arg = "-long" then long_sw = "1"b;
       else if arg = "-ag" | arg = "-arguments" then arg_sw = "1"b;
       else if arg = "-force" | arg = "-fc" then force_sw = "1"b;
       else if arg = "-for" then do;
	call get_next_arg("decimal number", argp, argl);
	count = cv_dec_check_ (arg, code);
	if code ^= 0 | count < 0 then 
             call ssu_$abort_line (sci_ptr, 0, "-for requires a positive decimal number ""^a"".");
	   for_sw = "1"b;
	   end;
       else if arg = "-fwd" | arg = "-forward" then fwd_sw = "1"b;
       else do;
          if ^va_arg(argno) then do;
	   if substr(arg,1,1) = "-" then code = error_table_$badopt;
	   else code = error_table_$bad_arg;
	   call ssu_$abort_line(sci_ptr, code, " ^a", arg);
	   end;
          end;
       end;   /* arg processing */
    segno = va.segno;
    first = va.offset;
    temp_ptr = pointer (baseptr (segno), first);
    call azm_stack_trace_ ("stack", sci_ptr, amu_info_ptr, temp_ptr, fwd_sw, arg_sw, long_sw, force_sw, count, code);
    if code ^= 0 then do;
       if code = amu_et_$no_valid_stacks then do;
	call ioa_ ("Frames may be invalid.");
	call ioa_ ("Stack_begin and stack_end are equal ^p.", temp_ptr);
	call ioa_ ("Use the -force and -fwd options and proceed at your own risk!");
	end;
      else call ssu_$print_message (sci_ptr, code, "trace of stack ^p.", temp_ptr);
      end;

    return;
%page;
azm_stack_requests_$why:
     entry (P_sci_ptr, P_azm_info_ptr);

	call set_up;
	if ^trans_selected () then do;
	     call ssu_$abort_line (sci_ptr, 0, "No dump selected.");
	     return;
	     end;
	if nargs ^= 0 then call ssu_$abort_line (sci_ptr, error_table_$bad_arg, "This request takes no arguments.");
	call azm_why_$find_bad_guy (sci_ptr, amu_info_ptr, code);

	if code = error_table_$action_not_performed then do;
	   call ssu_$print_message (sci_ptr,0,"Unable to determine the cause of the failure.");
	   return;
	   end;
	if code ^= 0 then do;
	     call ssu_$abort_line (sci_ptr, code, "why.");
	     end;
	return;

/* End why */
%page;
azm_stack_requests_$locks:
     entry (P_sci_ptr, P_azm_info_ptr);

	call set_up;
	if ^trans_selected () then do;
	     call ssu_$abort_line (sci_ptr, 0, "No dump selected.");
	     return;
	     end;
	if nargs > 3 then call ssu_$abort_line (sci_ptr,
	   error_table_$too_many_args, "This request takes 2 arguments max.");
	lock_name = "";
	set_sw = "0"b;
	do argno = 1 to nargs;
	   call ssu_$arg_ptr (sci_ptr, argno, argp, argl);
	   if arg = "-set" then set_sw = "1"b;
	   else do;
	      do lock_index = 0 to hbound(lock_info,1);
	         if arg = lock_info (lock_index).lsymb then do;
		  lock_name = arg;
		  goto call_lock_list;
		  end;
	         end;
	      call ioa_ ("valid locks are:");
	      do lock_index = 0 to hbound(lock_info,1);
	         call ioa_ ("^-^a",lock_info(lock_index).lsymb);
	         end;
	      return;
	      end;
	   end;
call_lock_list:
	
	call azm_why_$print_locks (sci_ptr, amu_info_ptr, lock_name,set_sw,code);

	if code ^= 0 then do;
	     call ssu_$abort_line (sci_ptr, code, "locks.");
	     end;

	return;
/* End locks */
%page;
azm_stack_requests_$search_mcs:
	
     entry (P_sci_ptr, P_azm_info_ptr);

	call set_up;
	if ^trans_selected () then do;
	     call ssu_$abort_line (sci_ptr, 0, "No dump selected.");
	     return;
	     end;
	if nargs ^= 0 then call ssu_$abort_line (sci_ptr,
	   error_table_$too_many_args, "This request takes no arguments.");
	call azm_why_$mcs (sci_ptr,amu_info_ptr,code);
	if code ^= 0 then call ssu_$print_message (sci_ptr,code);
	return;
/* end search_mcs */
%page;
get_next_arg: proc(Arg_expected, ap1, al1);

/*  This guy gets the next argument from the argument string, complaining if it's not there  */

dcl Arg_expected			char(*);
dcl (ap1				ptr,
     al1				fixed bin(21));
	    
	if (argno + 1) > nargs then do;
	     call ssu_$abort_line(sci_ptr, error_table_$noarg, "A ^a expected after ^a.", Arg_expected, arg);
	     return;
	     end;

	argno = argno + 1;
	call ssu_$arg_ptr (sci_ptr, argno, ap1, al1);
     
end get_next_arg;
%page;
set_up:
     proc;

	sci_ptr = P_sci_ptr;
	azm_info_ptr = P_azm_info_ptr;
	amu_info_ptr = azm_info.aip;
	call ssu_$return_arg (sci_ptr, nargs, af_sw, rv_ptr, rv_lth);
	if ^af_sw then call ssu_$arg_count (sci_ptr, nargs, af_sw);

     end set_up;
%page;
trans_selected:
     proc () returns (bit (1));

	if amu_info_ptr = null () then return ("0"b);
	return ("1"b);
     end trans_selected;
%page;
va_arg:  proc(a_pos) returns(bit(1));
         
dcl a_pos fixed bin;
dcl i fixed bin;
dcl arg_positions (3) aligned based (Ppos);

/*dcl 1 arg_positions	 aligned based (Ppos),
      2 indx (3) fixed bin; */
dcl Ppos ptr;

    Ppos = addr(va.va_position);
    do i = 1 to hbound(arg_positions,1);
       if a_pos = arg_positions(i) then return("1"b);
       end;
    
    return("0"b);
end va_arg;
%page;
%include amu_info;
%page;
%include amu_translation;
%page;
%include azm_info;
%page;
%include azm_va_args;

     end azm_stack_requests_;
